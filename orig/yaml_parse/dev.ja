The quick brown fox jumps over the lazy dog」という文ならたとえば「Tqbfjotld」というパスワードにできます。
モデルのインスタンスでは、配列またはハッシュのみが使用できます。
[Symantec Global Internet Security threat report](http://eval▖symantec▖com/mktginfo/enterprise/white_papers/b-whitepaper_internet_security_threat_report_xiii_04-2008▖en-us▖pdf) には、2007年後半にブラウザのプラグインで239の脆弱性が報告されています。
**CSRF:** クロスサイトリクエストフォージェリ (Cross-Site Request Forgery) はクロスサイトリファレンスフォージェリ (XSRF: Cross-Site Reference Forgery) とも呼ばれ、非常に強力な攻撃手法です▟この攻撃を受けると、管理者やイントラネットユーザーが行えることをすべて行えるようになってしまいます。
Webアプリケーションには、何らかの形でアクセス制御が行われるのが普通です。
上のコードは検索用のアクションなどで使われるものであり、ユーザーは検索したいプロジェクト名を入力します。
検証に失敗するとVerify_recaptchaからfalseが返されます。
既存のレコードとマッチする場合、アプリケーションはアクセスを許可します。
このメールには、「お客様のためのe-カードがございます」と書かれており、imageタグが含まれていました▟そしてそのタグには、ユーザーのルーターを再構成してしまうHTTP GETリクエストが仕込まれていました▟このルーターは、メキシコで広く普及しているモデルです。
このユーザーがURLのidを42に変更し、本来のidでは表示できないページを表示できてしまいます。
* フィールドを見ないぐらいに小さくしたり、背景と同じ色にしたりする
* 管理者は、必ずしもそのWebアプリケーション全体にアクセスできる必要はないはずです。
Railsには、このような攻撃をかわすためのヘルパーメソッドが用意されています。
詳細については、下記を参照してください。
プロキシを使用して送信元IPアドレスを偽る方法があることも念頭においてください。
悪事に使われるメールアドレス、非公式のアクション、邪悪なHTMLタグなどについてブラックリストが作成されることがあります。
Google Adsenseのメールアドレスとパスワードが変更された事例もあります。
### ホワイトリストとブラックリスト
他にも、データを操作したり任意のデータを読み出したりする目的にも使用されます。
_極めて重要な操作では特殊なパスワードを要求する_ ようにするという方法もあります。
2007年、その名もMonster▖comというオンラインリクルート用Webアプリケーションで、特別に作られたトロイの木馬プログラムによってイントラネットから情報が盗み出され、文字どおり経営者にとってのモンスターとなった事件がありました。
SELECT * FROM users WHERE login = '' OR '1'='1' AND password = '' OR '2'>'1' LIMIT 1
この方法は、フォーマットバリデータ使用時に起きがちな間違いから保護するためだけのものです▟「\^」と「$」はRubyでは **1つの行** に対してマッチし、文字列全体にマッチしないということをよく理解することが重要です。
 _送信元IPアドレスを一定の範囲に制限する_ という方法を考えてみましょう。
config▖filter_parameters << :password
raise if basename !
多くのXSSの例では、単に警告ボックスを表示するだけですが、実際のXSS攻撃はもっと凶悪です。
send_file filename, disposition: 'inline'
人気の高い[devise](https://github▖com/plataformatec/devise) や[authlogic](https://github▖com/binarylogic/authlogic)などの優れたプラグインは、パスワードを平文ではなく常に暗号化した状態で保存します。
クエリのユーザー入力データをそのまま使用せずに改ざんする方法の例を以下で説明します。
そのため、projectsテーブルからすべてのレコードが取り出されます▟これらは通常のユーザーからは参照できないはずのものです。
攻撃点 (entry point) とは、攻撃者が攻撃を向ける対象となる、脆弱なURLおよびパラメータのことです。
しかしSQLインジェクションはひとたび発生すれば壊滅的な打撃を受ける可能性があり、Webアプリケーションに対する一般的な攻撃方法でもあるため、この問題を十分に理解することが重要です。
XSS攻撃は次のように行われます▟攻撃者が何らかのコードをWebアプリケーションに注入し、後に標的ユーザーのWebページ上に表示されます。
ハッシュを渡して同じ結果を得ることもできます。
NOTE: _ユーザーがどんなファイルでもダウンロードできる状態にしないでください
イントラネットおよび管理画面インターフェイスには、他よりも手厚いセキュリティ対策が必要ですが、現実には逆にむしろこれらの方がセキュリティ対策が薄いということがしばしばあります。
ただし最初の節では、インジェクションの際の接続方法におけるアーキテクチャ上の決定事項について説明します。
いわゆるスパムボット以外に、自動ログインボットも問題となります。
ブラウザには同一生成元ポリシーがあるので、www▖application▖com に注入されたXSSスクリプトからは admin▖application▖com のcookieは読み出せず、逆についても同様に読み出し不可となります。
send_file()メソッドは、サーバーからクライアントにファイルを送信します。
攻撃者は、ありそうなIDとパスワードの組み合わせを総当りで試す危険なImageタグを送り込むだけで、数千ものまぐれ当たりを得ることもあります。
想定される攻撃としては、管理者のcookieの盗み出し、管理者パスワードを盗み出すためのiframe注入、管理者権限奪取のためにブラウザのセキュリティホールを経由して邪悪なソフトウェアをインストールする、などが考えられます。
SELECT * FROM users WHERE (users▖activation_code IS NULL) LIMIT 1
この方法は攻撃に対する直接の防弾にはなりませんが、検問として非常に有効です。
#### その他
### その他の予防策
管理画面に _ロール (role)_ を導入することで、攻撃者が行える操作の範囲を狭めることができます▟1人の管理者に全権を与えるのではなく、権限を複数管理者で分散するのです。
#### はじめに
Webアプリケーションによってはこのコードでも問題はありませんが、そのユーザーがすべてのビューを参照する権限がない場合には問題となります。
NOTE: _アカウントに対する総当たり攻撃 (Brute-force attack) とは、ログイン情報に対して試行錯誤を繰り返す攻撃です。
ただし、イントラネットや管理アプリケーションにとって最も脅威なのはXSSとCSRFです。
 _SafeErbプラグイン_ をイントラネットや管理画面でも使用することを強くお勧めします。
一方、攻撃者にとって気がかりなのは、両方のクエリでカラムの数を同じにしなければならないということです。
SELECT * FROM projects WHERE (name = '') UNION
#### 認証のバイパス
') UNION SELECT id,login AS name,password AS description,1,1,1 FROM users --
言うまでもなく、この攻撃を成功させるためには攻撃者がURL構造を知っている必要がありますが、RailsのURLはかなり構造が素直であるため、オープンソースの管理画面を使用していると構造を容易に推測できてしまいます。
パラメータがnilの場合、以下のSQLが生成されます。
この手法は、迷惑なユーザーへの対応策としても有効です。
ただし、常に最新の状態にアップデートするようにしてください。
```sql
多くの場合、CSRFとXSSが原因となります。
このフィールドをサーバー側でチェックします▟フィールドに何か書き込まれていれば、入力者はボットであると判定できます。
  /\Ahttps?:\/\/[^\n]+\z/i
このため、多くのRuby本やRails本でもこの点に誤りが生じています。
たとえば、URL形式になっているかどうかをざっくりと検証したいので、以下のような単純な正規表現を使用したとします。
以下の節では、インジェクション攻撃が発生しうる重要なコンテキストについて説明します。
#### 攻撃点
これらの正規表現は、危険な「\^」や「$」を安全な「\A」や「\z」に置き換える必要があります。
この攻撃用文字列では、そのために2番目のクエリに「1」を連続して配置しています▟これらの値は常に1になるので、1番目のクエリのカラム数と一致します。
* ハニーポットフィールドを隠さず、その代わり「このフィールドには何も入力しないでください」と表示する
* フィールド名をランダムに変更します
    * ブラックリストに引っかかった入力は受け付けないでください。
ここで、悪意のあるユーザーが「' OR 1 --」という文字列を入力すると、以下のSQLクエリが生成されます。
コメント入力欄などで、歪んだ画像に表示されている文字を入力させることで、入力社が自動スパムボットでないことを確認する場合によく使用されます。
表示されるリンクは一見無害に見えますが、クリックすると、攻撃者が送り込んだ邪悪なJavaScript関数を初めとするJavaScriptコードが実行されてしまいます。
CAPTCHAのAPIとしては[reCAPTCHA](http://recaptcha▖net/)が有名です▟これは古書から引用した言葉を歪んだ画像として表示します。
http://hi▖com
このAPIからは公開鍵と秘密鍵の2つの鍵を受け取ります▟これらはRailsの環境に置く必要があります。
AND password = ?", entered_user_name, entered_password)▖first
スパムフィルタなど、対象によってはホワイトリストを作成しようがないものもありますが、 _基本的にはまずホワイトリストが使用されます_ 。
このようなことにならないよう、 _ユーザーのアクセス権もクエリに含めてください_ 。
### アカウントに対する総当たり攻撃
上に示したように、配列の最初の部分がSQLフラグメントになっており、その中に疑問符「?」が含まれています。
### クロスサイトスクリプティング (XSS)
filename = File▖expand_path(File▖join(basename, @file▖public_filename))
### よいパスワード
"▖▖/▖▖/▖▖/etc/passwd" のようなファイル名を渡せば、サーバーのログイン情報をダウンロードできてしまいます。
上のURLがフィルタに引っかからないのは、入力の2行目にマッチしてしまうからです▟従って、1行目と3行目にどんな文字列があってもフィルタを通過してしまいます。
INFO: _CAPTCHAとは、コンピュータによる自動応答でないことを確認するためのチャレンジ-レスポンス式テストです。
Webアプリケーション用のユーザー名リスト (名簿) は、パスワードへの総当たり攻撃に悪用される可能性があります▟ユーザー名と同じであるなどの単純素朴なパスワードを使っている人が驚くほど多いため、総当たり攻撃に名簿が利用されやすいのです。
XSSを使用した悪意のある攻撃が行われると、クライアント側のコンピュータに実行可能なコードが注入されてしまいます。
これは一部の言語では正常に動作します。
条件オプションには文字列を直接渡す代りに、以下のように配列を渡すことで、汚染された文字列をサニタイズすることもできます。
パラメータは、たとえどれほど難読化し、隠そうとも変更される可能性があることを忘れないでください。
データベース上のパスワードが暗号化されていればまだ最悪の事態は避けられます。
アカウントが有効になると、データベース上のアクティベーションコードのカラムはNULLに設定されます。
これを少しでも緩和するには、 _「パスワードを忘れた場合」ページでも一般的なエラーメッセージを表示する_ ようにしましょう。
通常どおりメッセージを表示しておけば、ボットは書き込み失敗に気が付かずにそのまま通りすぎていくでしょう。
attachment_fuプラグインでも同様の手法が採用されています。
@project = @current_user▖projects▖find(params[:id])
このルーターを経由してこのネットバンキングサイトにアクセスすると、攻撃者が設置した偽のWebサイトが開き、信用情報が盗まれてしまいました。
### アカウントのハイジャック
Railsを[最低でも2▖1▖1にアップデート](http://www▖rorsecurity▖info/2008/09/08/sql-injection-issue-in-limit-and-offset-parameter/)してください。
トロイの木馬をわざわざ特別に誂えるというのはこれまでも非常にまれなことであり、リスクとしては相当低いと言えますが、それでもゼロではありませんし、クライアントホストのセキュリティも重要であるという好例でもあります。
いわゆるCAPTCHAの問題は、ユーザーにとって入力が多少なりとも面倒になることです。
---------------
### CAPTCHA
  /^https?:\/\/[^\n]+$/i
イントラネットおよび管理画面インターフェイスは、強い権限が許されているため、頻繁に攻撃の目標にされます。
パスワードを書き留めたりしないでください▟覚えられる文を決め、単語の頭文字を集めたものをパスワードにしてください。
_JavaScriptを使用してユーザーの入力データを検証することはできますが、攻撃者が想定外の値を与えて邪悪なリクエストを送信することは阻止できません_ 。
2つのダッシュ「--」が末尾に置かれると、以後に追加されるクエリがすべてコメントと見なされてしまい、実行されなくなります。
WARNING: _Railsのログ出力にパスワードが含まれることのないようにしてください。
経験則に照らし合わせても、 _安全が確認されていないユーザー入力が安全であることはありえず、ユーザーから送信されるどのようなパラメータにも、何らかの操作が加えられている可能性は常にあります_ 。
Rails 3▖1では、同様の機能を持つビルトインの`has_secure_password`メソッドを使用できます。
  link_to "Homepage", @user▖homepage
この標的ユーザーがGMailにログインしていた場合、フィルタ設定が攻撃者によって変更され、この場合はすべてのメールが攻撃者に転送されるようになります。
フィルタ処理されていないファイル名を使用すると、ユーザーが任意のファイルをダウンロードできるようになってしまいます。
Firefoxの[Live HTTP Headersプラグイン](http://livehttpheaders▖mozdev▖org/)やクライアント側でのプロキシを使用することで、リクエストを簡単に改ざんすることができます。
このような総当たり攻撃を少しでもかわすため、多くのWebアプリケーションはわざと一般的なエラーメッセージ「ユーザー名またはパスワードが違います」を表示するようにしています▟どちらが違っているのかという情報を表示しないことで、総当たり攻撃による推測を少しでも遅らせます。
よいパスワードの条件とは、「十分に長く」「英文字と数字が使用されており」「大文字と小文字が両方使用されている」ことです。
ここではこのことについて考察してみましょう。
デフォルトでは、RailsのログにはWebアプリケーションへのリクエストがすべて出力されます。
この状態は、アカウント全体がハイジャックされたのと同じぐらいに有害です。
  validates :content, format: { with: /^Meanwhile$/, multiline: true }
* ハニーポットフィールドを画面の外に追いやって見えないようにする
対応策は、 _アプリケーションのロジックを見なおしてXSSやCSRF脆弱性が持ち込まれないようにすること_ としか言いようがありません。
XSS (クロスサイトスクリプティング) やSQLインジェクションはインジェクションの顕著な例です。
### SQLインジェクション
これによって以下のSQLが生成されます。
_ApacheのDocumentRootがRailsの/publicディレクトリを指している場合、アップロードファイルをここに置かないでください_ ▟少なくとも1階層下にする必要があります。
攻撃者はメールアドレス変更に成功すると、「パスワードを忘れた場合」ページに移動し、攻撃者の新しいメールアドレスに変更通知メールを送信します▟システムによってはこのメールに新しいパスワードが記載されていることもあります。
同時に、 _ユーザーにパスワードを変更させる場合は、古いパスワードを必ず入力させるようにしてください▟_
以下はRailsにおける典型的なデータベースクエリです▟ユーザーが入力したログイン情報パラメータとマッチするUserテーブル上の最初のレコードを返します。
NOTE: _サニタイズ、保護、検証では、通常ホワイトリストの方がブラックリストよりも使用されます。
パスワードや機密情報がログファイルに平文のままで出力されていては、データベース上でこれらの情報を暗号化していても意味がなくなってしまいます。
* ブラックリストに引っかかったユーザー入力データをコードで修正して使用しないでください。
**XSS:** 悪意のあるユーザーがイントラネットの外から入力したデータが再表示されると、WebアプリケーションがXSS攻撃に対して脆弱になります▟ユーザー名、コメント、スパムレポート、注文フォームの住所のような情報すらXSS攻撃に使用されることがあります。
ネガティブCAPTCHAという手法を使えば、入力者に自分が人間であることを証明させるかわりに、ボットを罠にはめて正体を暴くことができます。
SELECT * FROM projects WHERE name = '' OR 1 --'
ただし、攻撃者がデータを入力するのはWebサイト上の入力ボックスとは限りません▟URLに含まれているパラメータ、URLに直接含まれていないが使用可能な「隠れた」パラメータ、URLに含まれない内部パラメータのどこからでも攻撃者がデータを入力する可能性があります。
他の場所で`sanitize_sql()`を使ってみることもできます。
---------------------------
攻撃者が標的ユーザーのユーザー名を知り、そのユーザーが使用しているパスワードが弱ければ、そのアカウントは簡単にクラックされてしまいます。
この結果、最初のユーザーがデータベースにいることがわかり、結果が返されてログインされます。
http://localhost:3006/user/activate
ここで、UNION文を使用した以下の文字列を注入したとします。
ここで、ネガティブCAPTCHAという別のアイディアがあります▟この方法のコンセプトは、入力者をわずらわせて自分が人間であることを証明させる代りに、ボットを罠にはめて入力者がボットであることを突き止めるというものです。
管理画面は、多くの場合次のような作りになっているものです▟www▖example▖com/admin のようなURLに置かれ、Userモデルのadminフラグがセットされている場合だけここにアクセスでき、管理者の権限でユーザー入力が再表示されると削除/追加/編集なんでもできてしまいます
なお上の記事に記載されているのは概念実証に過ぎません▟仮にこの攻撃を受けた場合、標的ユーザーは攻撃者が支配するWebサイトに誘い込まれます。
それにより、ビューでrecaptcha_tagsメソッドを、コントローラではverify_recaptchaメソッドをそれぞれ使用できます。
辞書に載っている言葉に数字を混ぜた程度のパスワードが使用されていることがよくあります。
* 現在のUTCタイムスタンプを含めたフィールドをフォームに含めておき、サーバー側でこのフィールドをチェックします。
NOTE: _認証 (authentication) と認可 (authorization) はほぼすべてのWebアプリケーションにおいて不可欠です。
CSRFについては既に説明しましたので、ここでは攻撃者がイントラネットや管理画面に対して攻撃を仕掛ける手順をいくつかの事例を示して説明します。
INFO: _Rubyの正規表現で落とし穴になりやすいのは、より安全な「\A」や「\z」があることを知らずに危険な「\^」や「$」を使ってしまうことです。
INFO: _インジェクション (注入) とは、Webアプリケーションに邪悪なコードやパラメータを導入して、そのときのセキュリティ権限で実行させることです。
「入力されたユーザー名は登録されていません」などというメッセージが返されようものなら、攻撃者はすぐさまユーザー名リストをかき集めて自動で巨大名簿を作成するでしょう。
パスワードが簡単に変更できる画面設計(古いパスワードの入力が不要)であれば、攻撃者は数クリックするだけでアカウントをハイジャックできてしまいます。
  # この文字列のどの行であっても"Meanwhile"という文字が含まれている必要があります。
もちろん、このぐらいでは自動化された総当たり攻撃プログラムからの攻撃から完全に免れることはできません▟こうしたプログラムは送信元IPアドレスを頻繁に変更するぐらいのことはやってのけるからです。
Webアプリケーションのセキュリティコンセプトをデザインするにあたり、攻撃者がWebサーバーへのフルアクセスを成功させてしまった場合のことも必ず考慮に含めておく必要があります。
Webアプリケーションの構成によっては、ユーザーアカウントをハイジャックする方法が他にも潜んでいる可能性があります。
他の有名な事例としては、危険なXSSを拡散するために一般のWebアプリケーションやブログ、掲示板が利用された事件があります。
このリクエストによってDNS設定が変更され、メキシコで事業を行っているネットバンキングWebサイトが、攻撃者のWebサイトにマップされてしまいました。
標的となったユーザーがGoogle Adsenseにログインし、Google広告キャンペーン用の管理画面を開くと、攻撃者が信用情報を盗み出すことができてしまいました。
もちろん上はあくまで例に過ぎません▟実際にはこのようなありふれた文をパスワードにしないでください▟この程度のパスワードはクラッキング用辞書に収録されている可能性があります。
再び上の例を使用して説明します。
その方が将来コントローラにアクションが追加された場合に、そのアクションをオフにするのを忘れずに済みます。
XSS対策の注入に関する節を参照してください。
basename = File▖expand_path(File▖join(File▖dirname(__FILE__), '▖▖
* クロスサイトスクリプティング (XSS) 対策として、&lt;script&gt;を削除するのではなく&lt;strong&gt;を許可してください。
この攻撃者は、CSRFを仕込んだ危険なメールをメキシコの多数のユーザーに送信しました。
### 正規表現
あるいは、管理画面用に _特別なログイン情報_ を別途設置するという方法もあります▟一般ユーザーが登録されているUserモデルに管理者も登録し、管理者フラグで分けると攻撃されやすいので、これを避けるためです。
_プラグインは、機会を見てアップデートすることをお勧めします_ 。
改ざんされる可能性が高いパラメータといえばidでしょう▟`http://www▖domain▖com/project/1`の1がidです。
こうしたページではよく、「入力されたユーザー名またはメールアドレスは登録されていません」という情報が表示されます。
インジェクションは、それによって注入されるコードやパラメータが、あるコンテキストでは有害であっても、それ以外のほとんどのコンテキストでは無害であるという点で非常にトリッキーであると言えます。
User▖find_by_activation_code(params[:id])
管理画面やイントラネットで1箇所でもサニタイズ漏れがあれば、アプリケーション全体が脆弱になってしまいます。
Project▖where("name = '#{params[:name]}'")
しかし、Webアプリケーションのデザイナーがおろそかにしがちなのは、いわゆる「パスワードを忘れた場合」ページです。
#### 不正なデータ読み出し
エラーメッセージをより一般的なものにすることで回避可能ですが、CAPTCHA (相手がコンピュータでないことを確認するためのテスト) への情報入力の義務付けもおそらく必要でしょう_ 。
INFO: _XSSは最もよく発生しするWebセキュリティ上の脆弱性であり、ひとたび発生すると壊滅的な影響が生じる可能性があります。
攻撃を困難にするような改良が進まないのはなぜでしょうか。
サニタイズされた変数は、配列の後半に置かれており、フラグメント内の疑問符を置き換えます。
このような構成にすることで、通常のwww▖application▖com ドメインからの管理者cookieを盗み出すことが不可能になります。
INFO: _思い出せなくなったパスワードがありますか。
SQLインジェクションは、Webアプリケーションのパラメータを操作してデータベースクエリに影響を与えることを目的とした攻撃手法です。
User▖first("login = '#{params[:name]}' AND password = '#{params[:password]}'")
SQLインジェクションは、認証をバイパスする目的でよく使用されます。
マッチする最初のレコードがこのクエリによって取得され、ユーザーにアクセスが許可されてしまいます。
これに対するシンプルな対応策は、 _リクエストされたファイル名が、期待されているディレクトリにあるかどうかをチェックする_ ことです。
特定の項目だけを許可するホワイトリストアプローチは、特定の項目だけを禁止するブラックリストアプローチに比べて、ブラックリストへの禁止項目の追加忘れが原理的に発生しないので、望ましい方法であると言えます。
### ログ出力
初期のCAPTCHAでは背景を歪めて反りを与えていましたが、これは突破されたため、現在では文字の上に曲線を書き加えて強化しています。
Mozilla FirefoxのWeb Developer Toolbarを使用すれば、フォームの隠しフィールドを見つけて変更することができます。
XSSを使用することで、cookieの盗み出し、セッションのハイジャック、標的ユーザーを偽のWebサイトに誘い込む、攻撃者の利益になるような広告を表示する、Webサイトの要素を書き換えてユーザー情報を盗み出したりWebブラウザのセキュリティ・ホールを経由して邪悪なソフトウェアをインストールしたりできることがあります。
多くのWebアプリケーションでは、ユーザーアカウントのハイジャックを容易に行えてしまいます。
いったいどのような問題が生じるのでしょうか。
ユーザーがログイン情報を入力すると、Webアプリケーションはユーザーテーブルに登録されているレコードとマッチするかどうかを調べます。
     File▖expand_path(File▖join(File▖dirname(filename), '▖▖
* before_actionでは、except: [▖▖▖]ではなくonly: [▖▖▖]を使用してください。
  SELECT id,login AS name,password AS description,1,1,1 FROM users --'
さらに、Webアプリケーションにこのような欠陥がないかどうか見直しをかけてください。
    * そのようなことをすると、"&lt;sc&lt;script&gt;ript&gt;"▖gsub("&lt;script&gt;", "")という攻撃が成立してしまいます。
しかし、パスワードクラック用の辞書にはこうした膨大なパスワードが集められており、攻撃者は英文字と数字のあらゆる組み合わせを試そうとしています。
WARNING: _1つのパラメータが変更されただけでも、ユーザーが不正な権限でアクセスできるようになってしまうことがあります。
従って、名簿と辞書を使用して総当り攻撃を行なう自動化プログラムがあれば、ものの数分でパスワードは見破られてしまいます。
* _管理画面を特別なサブドメインに置き_ (admin▖application▖comなど)、さらに独立した管理アプリケーションにしてユーザー管理を独自に行えるようにします。
さらに、JavaScriptによる検証はJavaScriptをオフにすれ簡単にバイパスできてしまいます。
アクティベーション操作中にこのことが突き止められるまでの流れは以下のとおりです。
### 権限昇格
従って、この場合以下のような毒入りURLはフィルタを通過してしまいます。
難読化とJavaScriptによる検証のセキュリティだけで安全を保てると考えてはなりません。
Railsアプリケーションの設定ファイル config▖filter_parameters に _特定のリクエストパラメータをログ出力時にフィルタする_ 設定を追加することができます。
同様に、2番目のクエリではASを使用してカラム名をリネームしています▟これにより、ユーザーテーブルから取り出した値がWebアプリケーション上で表示されます。
後はフォームの内容を無視するなり、通常通りメッセージを表示する(データベースには保存しない)などすればよいのです。
@project = Project▖find(params[:id])
しかし、 _Rubyでは「\^」と「$」は、入力全体ではなく、 **行の** 最初と最後_ にマッチしてしまいます。
ユーザー管理
インジェクション
javascript:exploit_code();/*
Mozilla Firefox用のLive HTTP Headersプラグインを使用すると、すべてのリクエストをログに記録して、それらを繰り返し送信したり変更したりすることができます。
ネガティブCAPTCHAでは、ボットをはめる罠として「ハニーポット」フィールドを用意します▟これは、CSSやJavaScriptを使用して人間には表示されないようにしたダミーのフィールドです。
そのサイトのImgタグには仕掛けがあり、GMailのフィルタ設定を変更するHTTP GETリクエストがそこから送信されます。
request▖remote_ipメソッドを使用してユーザーのIPアドレスをチェックできます。
こうした情報は、攻撃者がアカウントへの総当り攻撃に使う有効なユーザー名一覧を作成するのに使われてしまいます。
2007年後半、Mozillaブラウザで88の脆弱性、Safariで22、IEで18、Operaで12の脆弱性が報告されました。
しかしログファイルにはログイン情報、クレジットカード番号などの情報が含まれていることがあるため、重大なセキュリティ問題の原因になることがあります。
その結果、大半のパスワードがいとも簡単にクラックできてしまうことが判明しました。
ファイルアップロード時にファイル名のフィルタが必要だったのと同様、ファイルのダウンロード時にもファイル名をフィルタする必要があります。
その他に、ファイル名をデータベースに保存しておき、サーバーのディスク上に置く実際のファイル名には代りにデータベースのidを使用するという方法も併用できます。
めったにないと思われますが、「\A」や「\z」の代りに「\^」や「$」をどうしても使用したい場合は、:multilineオプションをtrueに設定することもできます。
_管理画面やイントラネットへのCSRF攻撃への対策については、CSRFの対策についての節を参照してください_ 。
Railsでは多数の認証用プラグインを利用できます。
認証システムは自前で作るよりも、既存のプラグイン (訳注: 現在ならgem) を使用することをお勧めします。
* ハニーポットフィールドを複数用意し、送信ボタンを含むあらゆる型を与えます。
しかしそのようなパスワードは覚えにくいので、まずは _覚えられる文を決め、その文で使用されている単語の頭文字を集めてパスワードにする_ ことをお勧めします。
攻撃者がすべてのトラフィックを傍受している可能性を常に考慮に入れる必要があります。
なお、辞書に載っている単語がそのまま使われているケースはこの中で4%に過ぎず、ほとんどは英文字に数字を混ぜたものになっているのはなかなか興味深い点です。
従って、 _ネガティブCAPTCHAはログインフォームの保護には必ずしも向かない可能性もあります_ 。
あるいは、パスワード変更画面がCSRF攻撃に対して脆弱な作りになっている場合、攻撃者は標的ユーザーを別のWebページに誘い込み、CSRFを実行するように仕込まれたimgタグを踏ませて、標的ユーザーのWebパスワードを変更するでしょう。
イントラネットとAdminのセキュリティ
Ned Batchelderの[ブログ投稿](http://nedbatchelder▖com/text/stopbots▖html)には、さらに洗練されたネガティブCAPTCHA手法がいくつか紹介されています。
最もありがちな20のパスワードは以下のとおりです。
さらに、弱視など視力に問題のあるユーザーはCAPTCHAの歪んだ画像をうまく読めないこともあります。
最もシンプルなネガティブCAPTCHAは、ハニーポットフィールドを1つ使用するものです。
対応策としては、_パスワード変更フォームがCSRF攻撃に対して脆弱にならないようにすること_ です。
ここでいうコンテキストとは、スクリプティング、クエリ、プログラミング言語、シェル、RubyやRailsのメソッドなどがあります。
しかしながら、攻撃者がSQLインジェクションを使用することでこの認証をすり抜けてしまう可能性があります。
#### 対応策
攻撃者はUNIONを使用してデータベースから任意のデータを読み出す可能性があります。
ここで攻撃者が「' OR '1'='1」という文字列を名前フィールドに入力し、「' OR '2'>'1」をパスワードフィールドに入力すると以下のSQLクエリが生成されます。
攻撃者が、盗み出されたユーザーセッションcookieを手に入れ、それによってWebアプリケーションが標的ユーザーとの間で共用可能になった状態を考えてみましょう。
以下のようなURLをリクエストするユーザーは、データベースで見つかる最初に有効になったユーザーとしてWebサイトにログインできてしまうことがあります▟そしてそれがたまたま管理者である可能性もあります。
対応策は、 _メールアドレスを変更する場合にもパスワード入力を必須にする_ ことです。
これは、クエリですべての条件がtrueになっているために発生しています。
さらに _特定のIPアドレスからのログインが一定回数以上失敗した場合には、CAPTCHA の入力をユーザーに義務付ける_ ようにしてください。
この方法も、アップロードファイルが実行される可能性を回避する方法として優れています。
クライアント側に、クライアントからのリクエストやインターネットからの応答を傍受しているプロキシが介在している可能性も忘れないようにしておく必要があります。
send_file('/var/www/uploads/' + params[:filename])
この他にいくつかの注意を守ることで、アプリケーションをよりセキュアにすることができます。
このクエリで得られるのはプロジェクトのリストではなく(名前が空欄のプロジェクトはないので)、ユーザー名とパスワードのリストです。
しかし攻撃者は、登録されているメールアドレスを変更することでアカウントを乗っ取ろうとする可能性もありますので注意が必要です。
_SQLで外部の文字列を、サニタイズせずに使用するとセキュリティ上重大な結果がもたらされる可能性があることを普段から考える習慣をつけましょう_ 。
ネガティブCAPTCHAは、Webをクロールする自動ボットから保護することしかできません▟特定のサイトに狙いを定めて作られたボットまでは欺けません。
---------
しかしこの対策は攻撃に対するある程度のバリアになることも確かです。
フィールドの時刻が遠い過去になっていたり未来になっていたりする場合は、そのフォームは無効です。
Webアプリケーションによっては、ユーザーが改ざん可能なパラメータが他にも潜んでいる可能性があります。
ここでは[GMailのCSRF脆弱性](http://www▖gnucitizen▖org/blog/google-gmail-e-mail-hijack-technique/) で紹介されている例をとりあげます。
コントローラ内では、次のようなことが行われている可能性があります。
http://localhost:3006/user/activate?id=
Model▖where(login: entered_user_name, password: entered_password)▖first
新規ユーザーは必ずメール経由でアクティベーションコードを受け取り、メール内のリンク先でアカウントを有効にするようになっています。
たいていのボットは、単にWebページをクロールしてフォームを見つけるたびにスパム文を入力するだけのお粗末なものです。
password1、abc123、myspace1、password、blink182、qwerty1、****you、123abc、baseball1、football1、123456、soccer、monkey1、liverpool1、princess1、jordan23、slipknot1、superman1、iloveyou1、monkey
Ruby on Railsには、特殊なSQL文字をフィルタする仕組みがビルトインで備わっています▟「'」「"」NULL、改行がエスケープされます。
#### パスワード
ホワイトリストはこれと対を成すもので、悪事に使われないことがわかっているメールアドレス、公式のアクション、無害なメールアドレスなどをホワイトリストにすることができます。
なお、reCAPTCHAは古書のデジタル化にも使えます。
Rubyの正規表現では、文字列の最初や最後にマッチさせる方法が他の言語と若干異なります。
[ReCAPTCHA](https://github▖com/ambethia/recaptcha/)はRailsのプラグインにもなっており、APIとして同じ名前が使用されています。
「\^」や「$」を使用してしまうミスは何かと発生しやすいので、正規表現が「\^」で始まったり「$」で終わっていたりするとフォーマットバリデータ (validates_format_of) で例外が発生するようになりました。
UNION文は2つのSQLクエリをつなぎ、1つのセットとしてデータを返します。
このidはコントローラのparamsを経由して取得できます。
#### メール
フィルタをすり抜けてしまったURLが、今度はビューの以下の箇所で表示されたとします。
Model▖where("login = ? 
攻撃点として最も選ばれやすいのはメッセージ投稿、ユーザーコメント、ゲストブックですが、プロジェクトタイトル、ドキュメント名、検索結果ページなども同様に脆弱性を抱えていたことがありました▟ユーザーがデータを入力可能なところはどこでも攻撃点になりえます。
### ファイルのダウンロード
一部のサーバーでは、params[:id]で参照されるパラメータidがnilになってしまっていることがあるので、上のURLが通用してしまう可能性があります。
フィルタされたパラメータはログ内で [FILTERED] という文字に置き換えられます。
ここでは、JavaScriptやCSSを使用してハニーポットフィールドを人間から隠す方法をいくつか説明します。
INFO: _メソッドの改良が進んだおかげで、SQLインジェクションがRailsアプリケーションで問題になることはめったになくなりました。
