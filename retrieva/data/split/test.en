This guide covers the configuration and initialization features available to Rails applications.
* How to manage users: Logging in and out and attack methods on all layers.
The popular Apache web server has an option called DocumentRoot▖ 
NOTE: _Sessions that never expire extend the time-frame for attacks such as cross-site request forgery (CSRF), session hijacking and session fixation.
Provide the user with a _log-out button_ in the web application, and _make it prominent_.
This is a good countermeasure against session hijacking, as well▖ 
The World Wide Web Consortium (W3C) provides a checklist for choosing HTTP GET or POST:
  return false;">To the harmless survey</a>
* The web application at www▖webapp▖com verifies the user information in the corresponding session hash and destroys the project with the ID 1▖ 
<a href="http://www▖harmless▖com/" onclick="
Whenever the user is allowed to pass (parts of) the URL for redirection, it is possibly vulnerable▖ 
```ruby
_These might change over the course of a session_, so these users will not be able to use your application, or only in a limited way.
* A user receives credits, the amount is stored in a session (which is a bad idea anyway, but we'll do this for demonstration purposes).
The random string is the current time, a random number between 0 and 1, the process id number of the Ruby interpreter (also basically a random number) and a constant string▖ 
The HTTP protocol basically provides two main types of requests - GET and POST (and more, but they are not supported by most browsers)▖ 
In a redirection URL, an attacker could redirect to this URL with the malicious code in it▖ 
<img src="http://www▖harmless▖com/img" width="400" height="400" onmouseover="▖▖▖" 
TIP: _Another sort of attack you have to be aware of when using `CookieStore` is the replay attack.
* The attacker lures the victim to the infected page with the JavaScript code▖ 
Introduction
In either case the browser will automatically send along the cookie on every request to a domain, if it can find a cookie for that domain▖ 
The solution to this is best to _process media files asynchronously_: Save the media file and schedule a processing request in the database▖ 
For the web application builder this means to _provide a secure connection over SSL_▖ 
### Session id
In general there is no such thing as plug-n-play security▖ 
And with a client-side session storage, the user can read the data.
Or an attacker might be able to install a Trojan horse program or unsolicited e-mail sending software, aim at financial enrichment or cause brand name damage by modifying company resources▖ 
A wireless LAN can be an example of such a network▖ 
def legacy
  f▖style▖display = 'none';
**Use POST if:**
    # Finally, replace all non alphanumeric, underscore
A significant disadvantage of synchronous processing of file uploads (as the attachment_fu plugin may do with images), is its _vulnerability to denial-of-service attacks_▖ 
To protect against all other forged requests, we introduce a _required security token_ that our site knows but other sites don't know▖ 
To prevent session hash tampering, a digest is calculated from the session with a server-side secret and inserted into the end of the cookie.
In Rails 3▖1 and later, this could be accomplished by always forcing SSL connection in your application config file:
* By viewing the post, the browser finds an image tag▖ 
So if the last user didn't log out of a web application, you would be able to use it as this user▖ 
It will load an existing session if the user has already used the application.
Hence, the cookie serves as temporary authentication for the web application▖ 
    config▖force_ssl = true
The section about session fixation introduced the problem of maintained sessions▖ 
Injecting the JavaScript code into the application by XSS accomplishes this attack▖ 
--------------------------------------------------------------------------------
The above method can be placed in the `ApplicationController` and will be called when a CSRF token is not present or is incorrect on a non-GET request.
### Session Fixation - Countermeasures
The server retrieves the session hash from the cookie and eliminates the need for a session id▖ 
#### Self-contained XSS
def sanitize_filename(filename)
XSS gives the attacker access to all elements on a page, so they can read the CSRF security token from a form or directly submit the form▖ 
This manual describes common security problems in web applications and how to avoid them with Rails.
* _Critical data should not be stored in session_▖ 
The most obvious attack would be to redirect users to a fake web application which looks and feels exactly as the original one▖ 
Read the upgrade documentation for more information.
This will eliminate synchronization headaches and it won't fill up your session storage space (depending on what session storage you chose, see below).
/\A▖*(\\|\/)/, ''
  f▖submit();
In fact one framework is not more secure than another: If you use it correctly, you will be able to build secure apps with many frameworks▖ 
Use this line in the sweep method above:
This example is a Base64 encoded JavaScript which displays a simple message box▖ 
Some of them also help you with securing the web application▖ 
In an unencrypted wireless LAN it is especially easy to listen to the traffic of all connected clients▖ 
    end
Such properties could be the remote IP address or the user agent (the web browser name), though the latter is less user-specific▖ 
  end
So _don't use a trivial secret, i▖e▖ a word from a dictionary, or one which is shorter than 30 characters_.
* _Do not store large objects in a session_▖ 
Rails will create a new session automatically if a new user accesses the application▖ 
Security depends on the people using the framework, and sometimes on the development method▖ 
Now you can delete sessions that were created a long time ago▖ 
One possibility is to set the expiry time-stamp of the cookie with the session id▖ 
This attack focuses on fixing a user's session id known to the attacker, and forcing the user's browser into using this id▖ 
---------------------
* Bob browses a message board and views a post from a hacker where there is a crafted HTML image element▖ 
This attack method works by including malicious code or a link in a page that accesses a web application that the user is believed to have authenticated▖ 
  redirect_to(params▖update(action:'main'))
### Replay Attacks for CookieStore Sessions
### Executable Code in File Uploads
* What you have to pay attention to when working with files or providing an administration interface.
However the client can edit cookies that are stored in the web browser so expiring sessions on the server is safer▖ 
Note that _cross-site scripting (XSS) vulnerabilities bypass all CSRF protections_▖ 
* How just visiting a site can be a security problem (with CSRF).
Call `Session▖sweep("20 minutes")` to expire sessions that were used longer than 20 minutes ago.
To date MD5 is uncompromised, but there have been collisions, so it is theoretically possible to create another input text with the same hash value▖ 
### Session Hijacking
Storing nonces in a database table would defeat the entire purpose of CookieStore (avoiding accessing the database).
### Session Storage
      secret_key_base: 492f▖▖.
An attacker can synchronously start image file uploads from many computers which increases the server load and may eventually crash or stall the server.
This is the home directory of the web site, everything in this directory tree will be served by the web server▖ 
NOTE: _HTTP is a stateless protocol▖ 
This could be the contents of a shopping basket or the user id of the currently logged in user▖ 
_And if you redirect to an URL, check it with a whitelist or a regular expression_.
It is unsuspicious, because the link starts with the URL to the web application and the URL to the malicious site is hidden in the redirection parameter: http://www▖example▖com/site/redirect?to= www▖attacker▖com▖ 
      time = time▖split▖inject { |count, unit| count▖to_i▖send(unit) }
Examples for this are PHP and CGI files▖ 
Read more about this so-called session fixation later.
Here is an example: `<script>document▖cookie="_session_id=16d5b78abb28e3d6206b60f22a03c8d9";</script>`▖ 
* All countermeasures _that are highlighted_.
* Sniff the cookie in an insecure network▖ 
    delete_all "updated_at < '#{time▖ago▖to_s(:db)}'"
* The client can see everything you store in a session, because it is stored in clear-text (actually Base64-encoded, so not encrypted)▖ 
This is called session fixation.
With server-side session storages you can clear out the sessions, but with client-side storages, this is hard to mitigate.
If you are using a different cookie store than the session for this information, you must handle what to do with it yourself:
    test:
  this▖parentNode▖appendChild(f);
In this case, the cookies will not be cleared and the out of the box CSRF protection will not be effective▖ 
Session fixation](images/session_fixation▖png)
    ```
NOTE: _Make sure file uploads don't overwrite important files, and process media files asynchronously.
By viewing the page, the victim's browser will change the session id to the trap session id.
An attacker maintaining a session every five minutes can keep the session alive forever, although you are expiring sessions▖ 
Rails 2 introduced a new default session storage, CookieStore▖ 
User▖find(session[:user_id])
As explained before, it will also send along the cookie with the valid session id.
NOTE: _Apart from stealing a user's session id, the attacker may fix a session id known to them▖ 
To protect against this data leakage, we disallow cross-site `<script>` tags▖ 
Many web applications allow users to upload files▖ 
* Bob's session at www▖webapp▖com is still alive, because he didn't log out a few minutes ago.
### Redirection
This is opposed to a blacklist approach which attempts to remove not allowed characters▖ 
TIP: _One line of code will protect you from session fixation.
That is what this guide aims at.
After reading this guide, you will know:
Cross-Site Request Forgery (CSRF)
When saving the IP address, you have to bear in mind that there are Internet service providers or large organizations that put their users behind proxies▖ 
That means the security of this storage depends on this secret (and on the digest algorithm, which defaults to SHA1, for compatibility)▖ 
So, of course, _you don't want to store any secrets here_▖ 
Many web applications have an authentication system: a user provides a user name and password, the web application checks them and stores the corresponding user id in the session hash▖ 
But this has had no security impact to date.
The underground prices for stolen bank login accounts range from $10-$1000 (depending on the available amount of funds), $0▖40-$20 for credit card numbers, $1-$8 for online auction site accounts and $4-$30 for email passwords, according to the [Symantec Global Internet Security Threat Report](http://eval▖symantec▖com/mktginfo/enterprise/white_papers/b-whitepaper_internet_security_threat_report_xiii_04-2008▖en-us▖pdf).
    production:
### What are Sessions?
**Use GET if:**
Ruby on Rails Security Guide
If you store file uploads at /var/www/uploads, and the user enters a file name like "▖▖/▖▖/▖▖/etc/passwd", it may overwrite an important file▖ 
  f▖action = 'http://www▖example▖com/account/destroy';
Anyone who seizes a cookie from someone else, may use the web application as this user - with possibly severe consequences▖ 
Web application frameworks are made to help developers build web applications▖ 
Here is an example for a link which displays www▖harmless▖com as destination in the browser's status bar▖ 
It is common to use persistent cookies to store user information, with `cookies▖permanent` for example▖ 
As a countermeasure, _do not allow the user to supply (parts of) the URL to be redirected to_.
* Bob doesn't notice the attack - but a few days later he finds out that project number one is gone.
--------
Rails uses a hidden `_method` field to handle this barrier.
This protocol displays its contents directly in the browser and can be anything from HTML or JavaScript to entire images:
* `<img src="http://www▖webapp▖com/project/1/destroy">`
`data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K`
Sessions
The controversial point is, that it will also send the cookie, if the request comes from a site of a different domain▖ 
rescue_from ActionController::InvalidAuthenticityToken do |exception|
Applications get `secrets▖secret_key_base` initialized to a random key present in `config/secrets▖yml`, e▖g▖:
WARNING: _Stealing a user's session id lets an attacker use the web application in the victim's name.
* The interaction _changes the state_ of the resource in a way that the user would perceive (e▖g▖, a subscription to a service), or
This is a one-liner in your application controller, and is the default for newly created rails applications:
  var f = document▖createElement('form');
* Cookies imply a strict size limit of 4kB▖ This is fine as you should not store large amounts of data in a session anyway, as described before▖ 
delete_all "updated_at < '#{time▖ago▖to_s(:db)}' OR
Think of a situation where the web application removes all "▖▖/" in a file name and an attacker uses a string such as "▖▖▖▖//" - the result will be "▖▖/"▖ 
Of course, the Ruby interpreter would need the appropriate permissions to do so - one more reason to run web servers, database servers and other programs as a less privileged Unix user.
CookieStore saves the session hash directly in a cookie on the client-side▖ 
Secondly, a security token in non-GET requests will protect your application from CSRF▖_
Note that this removes any value from the session, _you have to transfer them to the new session_.
A session usually consists of a hash of values and a session id, usually a 32-character string, to identify the hash▖ 
* The interaction is more _like a question_ (i▖e▖, it is a safe operation such as a query, read operation, or lookup).
* The user is _held accountable for the results_ of the interaction.
It is best to use a whitelist approach, which _checks for the validity of a file name with a set of accepted characters_▖ 
If there are files with a certain file name extension, the code in it will be executed when requested (might require some options to be set)▖ 
CSRF appears very rarely in CVE (Common Vulnerabilities and Exposures) - less than 0▖1% in 2006 - but it really is a 'sleeping giant' [Grossman]▖ 
------------
WARNING: _Source code in uploaded files may be executed when placed in specific directories▖ 
### Session Fixation
This will automatically include a security token in all forms and Ajax requests generated by Rails▖ 
It works like this:
Either they store the session id in the cookie and have a server-side session hash, or the entire session hash is on the client-side▖ 
A second process will handle the processing of the file in the background.
It then returns a result page which is an unexpected result for the browser, so it will not display the image.
Here is an example of how to _expire sessions in a database table_▖ 
Every cookie sent to the client's browser includes the session id▖ 
NOTE: _Rails provides several storage mechanisms for the session hashes▖ 
http://www▖example▖com/site/legacy?param1=xy&param2=23&host=www▖attacker▖com
_Storing the current user's database id in a session is usually ok_.
    ```ruby
A good place to start looking at security is with sessions, which can be vulnerable to particular attacks.
    # NOTE: File▖basename doesn't work right with Windows paths on Unix
And the other way round: the browser will send it to the server on every request from the client▖ 
  sign_out_user # Example method that will destroy the user cookies
Including a nonce (a random value) in the session solves replay attacks▖ 
A nonce is valid only once, and the server has to keep track of all the valid nonces▖ 
* And the most popular injection attack methods.
Redirection and Files
Here are some general guidelines on sessions.
* The user buys something.
The main objective of most attackers is to make money▖ 
* The concept of sessions in Rails, what to put in there and popular attack methods.
  f▖method = 'POST';
If it is at the end of the URL it will hardly be noticed and redirects the user to the attacker▖com host▖ 
However, it can be exploited by attacker if they included a host key in the URL:
It gets even more complicated if you have several application servers (mongrels)▖ 
_File names, which the user may choose (partly), should always be filtered_ as an attacker could use a malicious file name to overwrite any file on the server▖ 
This is because web applications are relatively easy to attack, as they are simple to understand and manipulate, even by the lay person.
Currently it is not feasible to brute-force Rails' session ids▖ 
In Rails you can save and retrieve values using the session method:
This will redirect the user to the main action if they tried to access a legacy action▖ 
  filename▖strip▖tap do |name|
* The attacker creates a valid session id: They load the login page of the web application where they want to fix the session, and take the session id in the cookie from the response (see number 1 and 2 in the image).
It tries to load the suspected image from www▖webapp▖com▖ 
Do not place file uploads in Rails' /public directory if it is Apache's home directory.
The most effective countermeasure is to _issue a new session identifier_ and declare the old one invalid after a successful login▖ 
If you have received an application where the secret was exposed (e▖g▖ an application whose source was shared), strongly consider changing the secret.
Here are some ways to hijack a session, and their countermeasures:
Here is an example of a legacy action:
Configuring Rails Applications╼==============================╼
From now on, the session is valid▖ 
In fact it dynamically creates a new form that sends a POST request.
There are many other possibilities, like using a `<script>` tag to make a cross-site request to a URL with a JSONP or JavaScript response▖ 
NOTE: _The session id is a 32 byte long MD5 hash value.
Only Ajax requests may have JavaScript responses since XmlHttpRequest is subject to the browser Same-Origin policy - meaning only your site can initiate the request.
Another redirection and self-contained XSS attack works in Firefox and Opera by the use of the data protocol▖ 
It is important to notice that the actual crafted image or link doesn't necessarily have to be situated in the web application's domain, it can be anywhere - in a forum, blog post or email.
If your web application is RESTful, you might be used to additional HTTP verbs, such as PATCH, PUT or DELETE▖ 
Here is how to create a new session in Rails:
Older versions of Rails use CookieStore, which uses `secret_token` instead of `secret_key_base` that is used by EncryptedCookieStore▖ 
If you use the popular RestfulAuthentication plugin for user management, add reset_session to the SessionsController#create action▖ 
### Session Guidelines
class Session < ActiveRecord::Base
That way, an attacker cannot use the fixed session identifier▖ 
The response is executable code that the attacker can find a way to run, possibly extracting sensitive data▖ 
Or the attacker places the code into the onmouseover event handler of an image:
Let's start with an example:
reset_session
      secret_key_base: a75d▖▖.
The threats against web applications include user account hijacking, bypass of access control, reading or modifying sensitive data, or presenting fraudulent content▖ 
If the user clears their cookies or closes the browser, they will be lost▖ 
A simple solution for this would be to add a created_at column to the sessions table▖ 
In order to develop secure web applications you have to keep up to date on all layers and know your enemies▖ 
protect_from_forgery with: :exception
If the session for that web application has not timed out, an attacker may execute unauthorized commands.
    name▖gsub! 
We include the security token in requests and verify it on the server▖ 
* From now on, the victim and the attacker will co-use the web application with the same session: The session became valid and the victim didn't notice the attack.
* The interaction is more _like an order_, or
`secrets▖secret_key_base` is used for specifying a key which allows sessions for the application to be verified against a known secure key to prevent tampering▖ 
Without the idea of sessions, the user would have to identify, and probably authenticate, on every request.
\-]/, '_'
As you may not change a cookie of another domain (because of the same origin policy), the attacker has to run a JavaScript from the domain of the target web application▖ 
Read more about XSS and injection later on.
A session id consists of the hash value of a random string▖ 
Most of today's web browsers, however do not support them - only GET and POST▖ 
    # or periods with underscore
After reading this guide, you will know:
When filtering user input file names, _don't try to remove malicious parts_▖ 
Here is how this attack works:
If the security token doesn't match what was expected, an exception will be thrown.
The best _solution against it is not to store this kind of data in a session, but in the database_▖ 
The session id in the cookie identifies the session.
* Most people don't clear out the cookies after working at a public terminal▖ 
The Gartner Group however estimates that 75% of attacks are at the web application layer, and found out "that out of 300 audited sites, 97% are vulnerable to attack"▖ 
The element references a command in Bob's project management application, rather than an image file.
  def self▖sweep(time = 1▖hour)
### File Uploads
    if time▖is_a?(
WARNING: _Redirection in a web application is an underestimated cracker tool: Not only can the attacker forward the user to a trap web site, they may also create a self-contained attack.
```html
Here is the file name sanitizer from the [attachment_fu plugin](https://github▖com/technoweenie/attachment_fu/tree/master):
    # get only the filename, not the whole path
* Instead of stealing a cookie unknown to the attacker, they fix a user's session identifier (in the cookie) known to them▖ 
      secret_key_base: <%= ENV["SECRET_KEY_BASE"] %>
In order to prevent attacks, minimize their impact and remove points of attack, first of all, you have to fully understand the attack methods in order to find the correct countermeasures▖ 
Instead you should store them in the database and save their id in the session▖ 
That will greatly increase the speed of the application, but it is a controversial storage option and you have to think about the security implications of it:
It is therefore not necessary for the attacker to steal the session id afterwards▖ 
The most important is `ActionDispatch::Session::CookieStore`.
    development:
The intention was to preserve the URL parameters to the legacy action and pass them to the main action▖ 
A simple countermeasure would be to _include only the expected parameters in a legacy action_ (again a whitelist approach, as opposed to removing unexpected parameters)▖ 
This will also be a good idea, if you modify the structure of an object and old versions of it are still in some user's cookies▖ 
_POST requests can be sent automatically, too_▖ 
Now think of a situation where an attacker uploads a file "file▖cgi" with code in it, which will be executed when someone downloads the file.
Ruby on Rails has some clever helper methods, for example against SQL injection, so that this is hardly a problem▖╼╼
  created_at < '#{2▖days▖ago▖to_s(:db)}'"
On every request the application will load the user, identified by the user id in the session, without the need for new authentication▖ 
Another class of security vulnerabilities surrounds the use of redirection and files in web applications.
* Many cross-site scripting (XSS) exploits aim at obtaining the user's cookie▖ 
In this case store the credit in the database and the logged_in_user_id in the session.
NOTE: _First, as is required by the W3C, use GET and POST appropriately▖ 
Another countermeasure is to _save user-specific properties in the session_, verify them every time a request comes in, and deny access, if the information does not match▖ 
Sessions make it stateful.
* As the new trap session is unused, the web application will require the user to authenticate.
### CSRF Countermeasures
============================
### Session Expiry
---------------------------------
session[:user_id] = @current_user▖id
Additional Resources
This so-called phishing attack works by sending an unsuspicious link in an email to the users, injecting the link by XSS in the web application or putting the link into an external site▖ 
And it depends on all layers of a web application environment: The back-end storage, the web server and the web application itself (and possibly other layers or applications).
    name▖sub! 
