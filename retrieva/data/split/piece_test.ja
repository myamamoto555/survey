▁This ▁guide ▁cover s ▁the ▁configuration ▁and ▁initialization ▁features ▁available ▁to ▁Rails ▁applications ▖
▁* ▁ い か に ユーザーを 管理 すべき か ▁( ログイン / ログアウト の しく み 、 あらゆる レ イ ヤ における 攻 撃 方法 の 解説 )
▁ 広 く 使用されている Apache ▁Web サーバー には ▁ Document R oo t という オプション があります ▟ ▁web ▁server ▁has ▁an ▁option ▁called ▁ Document R oo t ▖
▁NOTE : ▁ _ セッションを 無 期 限 に すると 、 攻 撃 される 機 会 を 増 や してしまいます ▁( ク ロスサイトリクエストフォージェリ ▁( CSRF ) 、 セッションハイジャック 、 セッション 固定 など ) 。
▁ユーザー には ▁ _ ログアウト ボタン _ ▁ を 提供し なければなりません ▟ それ も ▁ _ よく 目 立 つ ボタン _ ▁ を 。
▁この 対応策 は 、 セッションハイジャック にも 有効 です 。
▁World ▁Wi de ▁Web ▁C on s or t i um ▁( W 3 C ) ▁ は 、 HTTP の GET や POST を 選択 する 際の チェック リスト を提供 しています 。
▁return ▁false ; "> To ▁the ▁ harmless ▁ s ur ve y </ a >
▁* ▁ www ▖ web app ▖ com ▁ の Web アプリケーションは 、 リクエスト に対応する セッション ハッシュ に含まれる ユーザー情報 が 有効 である と 認 定 し 、 その 指示 に従って ID ▁1 の プロジェクト を 削除します 。
▁< a ▁ href =" http :// www ▖ harmless ▖ com / " ▁on click ="
▁ リダイレクト 用の URL ▁( の一部 ) ▁ を ユーザーが 受 け 入 れ てしまう と 、 潜 在 的な 脆弱性 となります 。
▁``` ruby
▁ _ IP アドレス は セッション の 過 程 で 変わる 可能性 がある _ ▁ ため 、 IP アドレス を ユーザー 固有の 情報 として 使用 しようとすると 、 ユーザーが Web アプリケーション にアクセス でき なく な った り 、 ユーザーの 使用 に 制限 が 加 わ る可能性があります 。
▁* ▁ ユーザーが ク レ ジ ッ ト を 受け取る ▟ 総 額 は セッション に保存 されている ▁( もちろん これが ダ メ ダ メ な のは わ か っています ▟ あくまで 説明 の ためのものです ) 。
▁この ランダム な 文字列 は 、 現在 時刻 、 0 から 1 まで の 乱 数 、 Ruby イン ター プ リ タ の プロセス id ▁( これも 基本的に は 乱 数 です ) 、 および 一 定 の 文字列 です 。
▁HTTP プロトコル は 2 つの 基本的な リクエスト である GET と POST を提供 しています ▁( これ 以外の リクエスト も 制 定 されています が 、 大 半 の ブラウザで サポート されていません ) 。
▁ リ ダ イ レ ク ション URL 攻 撃 では 、 攻撃者が このような 悪意のある コードを 含 んだ URL への リダイレクト を行います 。
▁< img ▁src =" http :// www ▖ harmless ▖ com / img " ▁ width =" 400 " ▁ height =" 400 " ▁on m ous e over =" ▖▖▖"
▁TIP : ▁ _ ` CookieStore ` を扱う のであれば 、 もう 一 つの 攻 撃 方法 である 「 再 生 攻 撃 ▁( re play ▁attack )」 についても 知 っ ておく 必要があります 。
▁* ▁ 攻撃者は 、 JavaScript を 仕 込 んだ ページに 標的ユーザー を 誘 い 込 みます 。
▁ はじめ に
▁ どちらの 場合にも 、 ブラウザは リクエスト の たびに cookie を自動的に ドメイン に 送信 します ▁( その ドメイン で 使用できる cookie がある場合 ) 。
▁これ に対する 最 良 の 対応策 は 、 ▁ _ メ デ ィ ア ファイルを 非同期 的に 処理 すること _ ▁ です ▟ メ デ ィ ア ファイルを 保存 し 、 その後 データベース 内 への 処理 の リクエストを ス ケ ジ ュ ー リ ング します 。
▁Web アプリケーションの 開発者 にとって は 、 これは ▁ _ SSL による 安全 な 接続 の 提 供 _ ▁ が必要 である ということです 。
▁### ▁ セッション id
▁ 一般に 、 導 入 するだけで た ち ま ち セキュリティ を 保 つ ことができる ような 便利な もの はありません 。
▁ しかも 、 その セッション が クライアント側 に保存 されている と 、 ユーザーが その データを 読む ことが できてしまいます 。
▁さらに 、 攻撃者が 金儲 け または 企 業 資 産 の 改 ざ ん による 企 業 イ メ ー ジ 損 壊 の 目的 で 、 ト ロ イ の 木馬 プログラム や 迷惑 メール 自動 送信 プログラム を 仕 込 んだ り すること も あり えます 。
▁ 無 線 LA N は 、 まさに そのような ネットワーク の 一 例 です 。
▁def ▁ legacy
▁f ▖ style ▖ display ▁= ▁' none ' ;
▁** 以下の 場合は POST を使用すること **
▁# ▁ 最終的に 非 英 数 文字 を アンダースコア または
▁( attachment _ f u ▁ プラグイン が 画像 に対して 行なう ように ) ▁ ファイルの アップロード を 同 期 的に 行なう と 、 セキュリティ 上 かなり 不 利 になります ▟ ▁ _ サービス 拒 否 ▁( D o S ) ▁ 攻 撃 の 脆弱性 _ ▁ が 生じる ためです 。
▁ この種の 偽 造 リクエスト をすべて 防止 するには 、 ▁ _ 必 須 セキュリティ トークン _ ▁ を導入し ます ▟ この トークン は 自分の サイト だけ が 知 っ ており 、 他の サイト は 知 り ません 。
▁ サーバー側で は 、 セッション が 改 竄 される こと を防ぐ ために 、 サーバー 上の 秘密キー を元に セッション から ダイジェスト を 計算 して それを cookie の 末尾に 挿 入 しています 。
▁Rails ▁3▖1 以降 では 、 アプリケーションの 設定ファイル で SSL 接続 を強制する ことによって 達 成 できます 。
▁* ▁ ハ ッ カ ー による 書き込み が ブラウザで 表示される と 、 ブラウザは image タグ を見つけ ます 。
▁ 最後の ユーザーが Web アプリケーション から ログアウト する の を 忘れ て 立 ち 去 って い たら 、 次の ユーザー はその Web アプリケーション をそのまま 使 え てしまいます 。
▁ ユーザーが 既に アプリケーション を使用 中 であれば 、 既存の セッションを 読み込み ます 。
▁ このように 、 cookie は Web アプリケーションに 一時 的な 認 証 機能 を提供 しています 。
▁config ▖ force _ ssl ▁= ▁true
▁この節では 、 セッション 保 持 の 問題 の ところで 触れ た セッション 固定 攻 撃 について説明します 。
▁ クロスサイトスクリプティング ▁( XSS ) ▁ によって JavaScript コードの 注入 ▁( インジェクション ) ▁ に 成功 すれば 、 攻 撃 は 完了 です 。
▁ ---------------- ---------------- ---------------- ---------------- ----------------
▁ 前述の メソッドは ` Application Controller ` に 置く ことができます ▟ そして 、 非 GET リクエスト に CSRF トークン がない場合 や トークン が 無効な 場合に このメソッド が呼び出され ます 。
▁### ▁ セッション 固定 攻 撃 ▁- ▁ 対応策
▁ サーバー はその cookie から セッション ハッシュ を 読み 出 す ことで 、 セッション id を使用 せずに 済み ます 。
▁#### ▁ 自 己 完 結 型 XSS
▁def ▁ sanitize _ filename ( filename )
▁XSS 脆弱性 が存在する と 、 攻撃者は Web ページの あらゆる 要素 にアクセス できてしまいます ▟ そのため 、 フォーム から CSRF セキュリティ トークン を 読み だ して その フォーム を直接 送信する ことが できてしまいます 。
▁この マニュアル では 、 Web アプリケーション 全 般 における セキュリティ の 問題 と 、 Rails で それらの 問題 を 回 避 する方法 について説明します 。
▁* ▁ _ セッション に 重要な データを 保存 し ないこと ▟ _
▁ 最も あ から さ ま な 攻 撃 方法 としては 、 ユーザーを 本 物 そ っ く り の 偽 Web サイトに リダイレクト すること が考えられます 。
▁詳細については 、 Rails の アップグレード に関する ドキュメント を参照してください 。
▁ こうすることで 、 同 期 に 関 して 悩 まず に 済み 、 セッション の スト レ ー ジ 容 量 が あ ふ れる ことも ありません ( セッション の 格 納 先 を ど こ に するか にも より ますが : ▁ 後 述 ) 。
▁ / \ A ▖ * ( \ \ | \ / ) / , ▁ ''
▁f ▖ submit () ;
▁ 実際の ところ 、 ある フレームワーク は 他の よりも 安全 である ということは 一 概 には 言 え ません ▟ 正しく 用 い る ことができ ている のであれば 、 た いて い の フレームワーク で 安全 な Web アプリケーションを 構 築 できます ▁( 逆に 言 えば 、 正しく 用 い ら れ ていなければ どんな Web アプリケーション を採用し よう とも 安全 を 保 つ ことはできません ) 。
▁上の s w eep メソッドで 以下のコード を使用します 。
▁この 例 では Base 64 で エンコード された JavaScript を使用しています ▟ この JavaScript は 単 に メッセージ ボックス を表示します 。
▁ その中に は セキュリティ を 比 較 的 高 め やすい フレームワーク もあります 。
▁ 接続 されている クライアント の すべての トラフィック を の ぞ き 見 ること は 、 暗号化 されていない 無 線 LA N では 特に 簡単に 行なうことができます 。
▁end
▁ユーザー 固有の プロパティ として 利用 可能な 情報 には 、 リモート IP アドレス や ▁user ▁a g ent ▁( = ▁web ブラウザ の名前 ) ▁ があります が 、 後者は 完全に ユーザー 固 有 とは限りません 。
▁end
▁従って 、 _ 秘密キー には 安 易 な もの ( 辞書 から 抽 出 した 単語 や 、 30 文字 より 短い 文字列 ) を使用 すべき ではありません ▟ _
▁* ▁ _ セッション には 巨 大 な オブジェクトを 格 納 し ないこと _ 。
▁Rails は 、 ユーザーが アプリケーションに 新しく アクセス するときに 自動的に セッション を作成します 。
▁ セキュリティ は 、 フレームワーク を使用する 人 間 に 強く 依 存 します ▟ 場合によっては 開発 方法 も セキュリティ に 影 響 する ことがあります 。
▁これで 、 期 限 を 過 ぎ た セッションを 削除 できます 。
▁ セッション id を持つ cookie の タイムスタンプ に 有効期限 を設定する という 対応策 も 考 えられ なく はありません 。
▁この 攻 撃 では 、 ブラウザ 上の ユーザーの セッション id を 攻撃者が 知 っている セッション id に 密 か に 固定 しておき 、 ブラウザ を使う ユーザーが 気 付 か ない うちに その セッション id を 強制的に 使 わ せ ます 。
▁------------ -------- -
▁* ▁ ボ ブ は 掲 示 板 を ブラウザで 眺 めて いて 、 と ある ハ ッ カ ー による 書き込み を 目 に します ▟ その 書き込み には 仕 掛 け のある HTML ▁image 要素 が含まれています 。
▁この 攻 撃 方法は 、 ユーザー による 認 証 が完了し た と 考え られる Web アプリケーションの ページに 、 悪意のある コード や リンクを 仕 込 む という ものです 。
▁redirect _ to ( params ▖ update ( action : ' main ') )
▁### ▁ CookieStore セッション に対する 再 生 攻 撃
▁### ▁ ファイル アップロード で 実行 可能な コードを 送 り 込 む
▁* ▁ ファイルの 取 扱 い 上の 注意 、 管理 インターフェイス を 提供する 際の 注意
▁しかし 、 ブラウザ 内に 保存 されている cookie を ユーザーが 編集 でき てしまう 点 は 変 わ ら ないので 、 や は り サーバー側で セッションを 期限切れ にする 方が 安全 です 。
▁ 気 を付け ていた だ き たい のは 、 ▁ _ クロスサイトスクリプティング ▁( XSS ) ▁ 脆弱性 は 、 あらゆる CSRF 保 護 を 迂 回 してしまう _ ▁ ということです 。
▁* ▁Web サイト を開く だけで セキュリティ 問題 が発生する しく み ▁( CSRF )
▁` Session ▖ s w eep (" 20 ▁minutes ") ` を呼ぶ と 、 20 分 以上 経 過 した セッション が 期限切れ になります 。
▁M D 5 は 現在 まで 破 ら れ て いません が 、 若 干 の 衝 突 が発生し ている ため 、 同じ ハッシュ 値を 異なる 入力 テキスト から 生成 することは 「 理 論 的に は 」 不 可能 ではありません 。
▁### ▁ セッションハイジャック
▁non ce を データベースに保存 してしまう と 、 せっかく データベース へのアクセス を避けるために 設 置 した CookieStore を使用する 意味 が なくなってしまいます 。
▁### ▁ セッション スト レ ー ジ
▁secret _ key _ base : ▁4 92 f ▖▖▖
▁ 攻撃者は 、 同 期 的に 行われ る 画像ファイル アップロード を 多数の コンピュータ から 同時に 実行 することで 、 サーバー に 高 負 荷 を かけて 最終的に サーバー を ク ラ ッ シ ュ または 動作 停 止 に 陥 ら せ ます 。
▁これは Web サイトの ホ ーム ディレクトリ であり 、 この ディレクトリ ツリー に置かれている もの はすべて Web サーバー によって 取り 扱 われます 。
▁NOTE : ▁ _ HTTP は ス テ ート レ ス の プロトコル です 。
▁ シ ョ ッ ピ ング サイトの 買 い 物 カ ゴ や 、 現在 ログイン している ユーザーの id など が これ に 該 当 します 。
▁ _ URL を リダイレクト する 場合は 、 ホワイトリスト または 正規表現 と 照 合 するようにしてください ▟ _
▁この リンク はその Web アプリケーションの URL で 始 ま っている ので 、 一見 無 害 に見えます ▟ 危 険 な サイトに 導 く URL は リダイレクト の パラメータ の中に 隠 されています ▁( http :// www ▖ example ▖ com / site / redirect ? to = ▁ www ▖ attacker ▖ com ) 。
▁time ▁= ▁time ▖ split ▖ inject ▁ { ▁| count , ▁ unit | ▁count ▖ to _ i ▖ send ( unit ) ▁ }
▁ 実行される 可能性のある 拡張子 は 、 たとえば P H P や C G I など です 。
▁詳細については 後 述 の セッション 固定 に関する 記 述 を参照してください 。
▁ セッション id の例 : ▁`< script > document ▖ cookie =" _ session _ id = 16 d 5 b 78 abb 28 e 3 d 6 2 06 b 60 f 22 a 0 3 c 8 d 9 " ; </ script >` 。
▁* ▁ _ 本ガイド で 取り上げ ら れ ている 問題 _ ▁ に対する あらゆる 対策
▁* ▁ セキュリティ に 不 備 のある ネットワーク では cookie を 覗 き 見 すること が できてしまいます 。
▁delete _ all ▁" updated _ at ▁< ▁' # { time ▖ ago ▖ to _ s (: db )} ' "
▁* ▁ Cookie に保存 されている のは 平 文 テキスト ▁( 実際には Base 64 で エンコード されて ますが 暗号化 は されて ません ) ▁ なので 、 セッション に保存 されている 情報 はその 気 に な れば すべて クライアント側 で 読み 取り 可能です 。
▁ この手法は セッション 固定 ▁( session ▁fix ation ) ▁ と呼ばれ ます 。
▁ セッション が サーバー側で 保存 され ていれば セッションを 消 去 するのは 容 易 ですが 、 セッション が クライアント側 に 格 納 されている と 、 それを 制御 するのは 厄 介 です 。
▁ 何らかの 理由 で このような 情報を セッション 以外の cookie スト ア に保存 したい のであれば 、 Rails による 保 護 を受け ら れ ないこと になるので 、 開発者 自身 が セキュリティ 対策 を行わ なければなりません 。
▁test :
▁this ▖ parent N ode ▖ append C hi ld ( f ) ;
▁この場合 cookie は 消 去 されない ことにご注意ください ▟ そして 、 前述の 保 護 機 構 の 外 では CSRF からの 保 護 は 受 け ら れ ない という ことになります 。
▁ Session ▁fix ation ]( images / session _ fi x ation ▖ png )
▁```
▁NOTE : ▁ _ ファイルが アップロード された ときに 重要な ファイルが 上書き され ることのないように しましょう ▟ また 、 メ デ ィ ア ファイルの 処理 は 非同期 で 行なう ようにしましょう 。
▁ 標的ユーザー が ブラウザで ページ を開く と 、 そのユーザー の セッション id が 攻撃者 の 仕 込 んだ もの と 差し替え られます 。
▁ 攻撃者が 5 分 お き に セッションを 維 持 すると 、 サーバー側で セッションを 期限切れ に し よう としても セッションを 恒久 的に 継 続 させる ことが できてしまいます 。
▁Rails ▁2 で CookieStore という 新しい デフォルト セッション スト レ ー ジ が 導 入 されました 。
▁User ▖ find ( session [: user _ id ])
▁ 前述の とおり 、 このとき に 有効な セッション id を含む cookie も一緒に 送信されます 。
▁NOTE : ▁ _ ユーザーの セッション id を 盗 む 代りに 、 攻撃者が 意図 的に セッション id を 既 知 の もの に 固定 する という 方法があります 。
▁ このような データ 流 出 を 防止 するには 、 ク ロ ス サイトの ` < script >` タグ を 無効 に します 。
▁ 多くの Web アプリケーションでは 、 ユーザーが ファイルを アップロード できる ようになっています 。
▁* ▁ ボ ブ はこの 数 分 間 ログアウト していない ので 、 www ▖ web app ▖ com ▁ に対する ボ ブ の セッション はまだ 期限切れ になって いません 。
▁### ▁ リダイレクト
▁これは 「 ブラックリスト 」 アプローチ と 逆 の 手法 です ▟ こちら は 、 使用 が 許 されて ない 文字 を 除 去 します 。
▁TIP : ▁ _ セッション 固定 攻 撃 は 、 た った 1 行 のコード で 防止 できます 。
▁ 以上 が 本ガイド の 目的 です 。
▁この ガイド の内容 :
▁ ク ロスサイトリクエストフォージェリ ▁( CSRF )
▁ IP アドレス を 保存 して 対応する 場合 、 イン ター ネ ッ ト サービス プロ バ イ ダ ▁( IS P ) ▁ や 大 企 業 からの アクセス は プロキシ 越 し に 行われている こと が多い ことを 忘れ ない ように しておく必要があります 。
▁つまり 、 cookie の スト レ ー ジ の ( 改 竄 防止 の ) セキュリティ はこの サーバー 上の 秘密キー ▁( および ダイジェスト の ア ル ゴ リ ズ ム ▁-- ▁ 互換性 の ため デフォルトでは S HA 1 を使用 ) ▁ に か か っています 。
▁ ここ から も わ か る とおり 、 _ い か なる 機 密 情報を も cookie に保存 すべき ではありません _ 。
▁ 多くの Web アプリケーション には 何らかの 認証システム があります ▟ ユーザーが ユーザー名 と パスワード を入力する と 、 Web アプリケーションは それら を チェック して 、 対応する ユーザー id を セッション ハッシュ に保存 します 。
▁しかし これが セキュリティ上の 脅威 になった ことは これまで ありません 。
▁[ S ymantec ▁G lo b al ▁ Internet ▁ Security ▁T h re at ▁Re port ]( http :// eval ▖ s ymantec ▖ com / m k t g info / e nterprise / white _ paper s / b - white paper _ in ter net _ security _ threat _ re port _ x i i i _ 04 - 2008 ▖ en - us ▖ p d f ) による と 、 盗 まれ た 銀 行 口 座 アカウント の 闇 価 格 は 、 利用 可能な 資 金 にも より ますが だいたい $ 10 から $ 1 000 ぐらい 、 ク レ ジ ッ ト カ ー ド 番号 が $ 0 ▖ 4 0 から $ 20 ぐらい 、 オンライン オ ー ク ション サイトの アカウント が $ 1 から $ 8 ぐらい 、 電 子 メールの パスワードが $ 4 から $ 30 くらい だ そう です 。
▁production :
▁### ▁ セッション とは 何か
▁** 以下の 場合は GET を使用すること **
▁Rails ▁ セキュリティ ガイド
▁ ファイルが ▁ / var / www / upload s ▁ ディレクトリに アップロード され 、 その ときに ファイル名 が ▁" ▖ ▖ / ▖ ▖ / ▖ ▖ / e t c / pass w d " ▁ と 入力 されている と 、 重要な ファイルが 上書き されてしまう 可能性があります 。
▁f ▖ action ▁= ▁' http :// www ▖ example ▖ com / account / destroy ' ;
▁ 他 人 の cookie を 奪 い 取ること が でき れば 、 そのユーザー の 権限 で Web アプリケーション を使う ことが できてしまいます ▟ これによって おそらく 深 刻 な 結果 が生じ る可能性があります 。
▁Web アプリケーション フレームワーク は 、 Web アプリケーションを 容易に 開発 できるように するために 作 ら れ ました 。
▁ ブラウザの ステータス バー に 、 www ▖ harmless ▖ com ▁という Web サイト へのリンク が表示されている とします 。
▁ 恒 常 的な cookie に ユーザー情報 を保存する ▁( たとえば ` cookies ▖ permanent ` など に ) ▁ ことは よく 行われ ています 。
▁この 攻 撃 への 対応策 は 、 ▁ _ リダイレクト する URL ( あるいは そ の一部 ) を ユーザー が与えられ ないようにする こと _ ▁ です 。
▁* ▁ ボ ブ は 攻 撃 に 気 付 いて いません ▟ しかし 数 日 後に は プロジェクト N o ▖ 1 が 削除され ていること を知り ます 。
▁ --------
▁Rails では ` _ method ` という 隠 し フィールド を使用して これらの メソッドを サポート しています 。
▁ データ プロトコル は 、 そ の内容を ブラウザに 直接 表示 することができます ▟ しかも 、 HTML 、 JavaScript や 画像 イ メ ー ジ まるごと など 、 何 で も含め ることができます 。
▁* ▁`< img ▁src =" http :// www ▖ web app ▖ com / project /1/ destroy "> `
▁` data : text / html ; base 64 , P H N j cm l w d D 5 h b G V y d C g n W F N T J y k 8 L 3 N j cm l w d D 4 K `
▁ セッション
▁ここで 問題 となる のは 、 異なる ドメイン に 属 する サイト から リクエストが あった 場合にも ブラウザ が cookie を送信し てしまう という 点 です 。
▁ rescue _ from ▁ ActionController :: In valid A u the n tic ity Token ▁do ▁| exception |
▁ アプリケーションは ` secrets ▖ secret _ key _ base ` を使用して 、` config / secrets ▖ yml ` など に保存 される キーを ランダム に 初期化 します 。
▁WARNING : ▁ _ ユーザーの セッション id が 盗 まれ ると 、 攻撃者が そのユーザー を か た って Web アプリケーション を使用 できてしまいます 。
▁* ▁その やりとり によって リソース の ▁ _ 状態 が 変 わ り _ ▁ 、 その ことが ユーザーに わ か る 場合 ▁( サービス への 申 し 込 み など ) 、 または
▁以下の 1 行 コードは アプリケーションの コントローラ に追加する もの であり 、 Rails で 新規 作成した アプリケーションに はこの コードが デフォルトで 含 まれ ます 。
▁var ▁f ▁= ▁document ▖ create E le ment (' form ') ;
▁* ▁ Cookie の サイズ は 4 ▁ K B と 厳 密 に 定 め ら れ ています 。
▁delete _ all ▁" updated _ at ▁< ▁' # { time ▖ ago ▖ to _ s (: db )} ' ▁OR
▁Web アプリケーションが ファイル名 から "▖ ▖ / " という文字 を 取り除く ことができる としても 、 今度は 攻撃者が ▁" ▖ ▖▖▖ / / " ▁ のような その 裏 を か く パターン を使用すれば 、 や は り ▁" ▖ ▖ / " ▁という 相 対 パス が 通 ってしまいます 。
▁ 言 う まで も なく 、 Ruby イン タ プ リ タ に それ だけ の実行 権限 が与えられ ていなければ 、 そのような 上書き は 実行 できません ▟ Web サーバー 、 データベース サーバー などの プログラム は 、 比 較 的 低 い 権限 を持つ Unix ユーザー として 実行 されている のが普通です 。
▁ CookieStore は セッション ハッシュ を直接 クライアント側 の cookie に保存 します 。
▁第 二 に 、 GET 以外の リクエスト に セキュリティ トークン を追加する ことで 、 Web アプリケーションを CSRF から 守 ることができます ▟ _
▁このメソッド を実行すると セッション から すべての 値が 削除 されてしまいます ので 、 ▁ _ 新しい セッション に それらの 値を 移 行 しておく必要があります ▟ _
▁ 通常 、 セッション を構成する 要素 は 、 値 の ハッシュ と セッション id です ▟ セッション id は 32 文字 の 文字列 で 、 ハッシュ を 特定 するために 使用します 。
▁* ▁その やりとり が 基本的に ▁ _ 質 問 _ ▁ である場合 ▁( クエリ 、 読み出し 操作 、 検索 のような 安全 な 操作 )
▁* ▁その やりとり によって 生じる 結果 に対して ▁ _ ユーザーが 責 任 を持つ _ ▁ 場合 。
▁ 最も 良い のは 「 ホワイトリスト 」 による アプローチ です ▟ これは ▁ _ ファイル名 が 有効 である かどうか ▁( 指定された 文字 のみ が 使用されている かどうか ) ▁ をチェックする ものです _ ▖
▁ そこ に置かれている ファイル の名前 に 特定の 拡張子 が与えられ ている と 、 それ に対して リクエストが 送信された 時に 実行 されてしまう ことがあります ▁( 何らかの オプション を与える 必要がある かもしれません ) 。
▁CSRF は 、 CVE ▁( Comm on ▁ V ul ne ra b i li t ies ▁and ▁E x po sure s ) ▁ で 報 告 される ことは め った に ありません ▁( 2006 年 でも 0 ▖ 1 % 以下 ) ▁ が 、 それ でも 「 眠 れる 巨 人 」 [ G ross man ] ▁ であり 、 危 険 な ことに 変 わ り はありません 。
▁------------
▁WARNING : ▁ _ アップロード された ファイル に含まれる ソースコード が 特定の ディレクトリ に置かれている と 、 ソースコード が 実行 可能 になっ てしまう 可能性があります 。
▁### ▁ セッション 固定 攻 撃
▁ このコード があると 、 Rails で 生成される すべての フォーム と Ajax リクエスト に セキュリティ トークン が含まれます 。
▁ この動作 は 次のようになります 。
▁このとき 、 セッション id を cookie に保存 して サーバー 側 に セッション ハッシュ を持つ か 、 すべての セッション ハッシュ を クライアント ▁( ブラウザ ) ▁ 側 に 持ち ます 。
▁2 つ目の 処理 は 、 バ ッ ク グ ラ ウ ンド で 行います 。
▁ そして ブラウザは 結果 ページ を表示し て 何らかの 問題が生じ た こと を示します ▟ 画像 は 表示 されません 。
▁ _ データベース テーブルの セッションを 期限切れ にする _ ▖ ▁ には 、 たとえば 次のように 行います 。
▁ クライアント の ブラウザに送信 される Cookie には 、 常に セッション id が含まれています 。
▁NOTE : ▁ _ Rails には セッション ハッシュ を 保存 す ための しく み が 複 数 用意されています 。
▁ http :// www ▖ example ▖ com / site / legacy ? param 1 = x y & param 2 = 23 & host = www ▖ attacker ▖ com
▁ _ 通常 通り 、 現在のユーザー の データベース id を セッション に保存 すること には 問題ありません ▟ _
▁``` ruby
▁ セッション は 、 セキュリティ に関する 考 察 を 始 め る の に お あ つ ら え 向 き です ▟ セッション は ある 種 の 攻 撃 の 対象 になる ことがあります 。
▁# ▁ メ モ : ▁File ▖ base name は 、 Unix 上で の Windows パス に対して は 正常に動作し ません
▁ 別の 見 方 を すると 、 ブラウザは クライアント から リクエストを送信する たびに cookie を送信し ます 。
▁sign _ out _ user ▁# ▁ユーザーの cookie を削除する メソッド の例
▁この 再 生 攻 撃 は 、 セッション に n once ▁( 1 回 限り の ランダム な 値 ) ▁ を含め ておく ことで 防 ぐ ことができます 。
▁non ce が 有効な のは 1 回 限り であり 、 サーバー は n once が 有効 かどうかを 常に 追 跡 し 続ける 必要があります 。
▁* ▁ 最も よく 知 られた インジェクション 攻 撃 の 手法
▁ リダイレクト と ファイル
▁ セッションを 取り 扱 う 際の 一般的な 注意 について解説します 。
▁* ▁ ユーザーが ク レ ジ ッ ト で 何か を 購 入 する 。
▁ た いて い の場合 、 攻撃者 の目的は 、 金儲 け です 。
▁* ▁Rails における セッション の 概念 、 セッション に含まれる 項目 、 セッション に対して 行われ ること の 多 い 攻 撃
▁f ▖ method ▁= ▁' POST ' ;
▁URL の 末尾に ある ホスト キー は 気 付 か れ に く く 、 ユーザーは attacker ▖ com ホスト に リダイレクト されてしまいます 。
▁しかし 、 この URL に ホスト キー が含まれている と 、 攻撃者 に 悪 用 される 可能性があります 。
▁ 複数の アプリケーション サーバー で 構成 された 、 合 い の 子 アプリケーションの 場合 、 さらに 複 雑 になります 。
▁ _ ユーザーが 選択 / 入力 できる ファイル名 ▁( または そ の一部 ) ▁ は 必ず フィルタ してください ▟ _ ▁ 攻撃者が 危 険 な ファイル名 を わざと 使用 して サーバー の ファイル を上書き し よう と する 可能性 がある ためです 。
▁これは 、 Web アプリケーション に対する 攻 撃 は 比 較 的 行い や す く 、 一 般 人 であっても 理解 や 操作 が 可能な ほど に Web アプリケーションが シ ン プ ル である ためです 。
▁ 現時点では 、 Rails の セッション id に ブ ルート フ ォ ー ス 攻 撃 を行なう ことは 不 可能です 。
▁Rails では 、 セッション メソッドを使用して 値 の 保存 と 取り出し を 行なうことができます 。
▁このコードは 、 古 い アクション に対する アクセス があれば 、 ユーザーを メ イン の アクションに リダイレクト します 。
▁filename ▖ strip ▖ t a p ▁do ▁| name |
▁* ▁ 攻撃者は 有効な セッション id を生成します ▟ Web アプリケーションの ログイン ページ ▁( つまり セッション 固定 攻 撃 の 対象 ページ ) ▁ を開き 、 レスポンス に含まれる cookie から セッション id を取り出し ます ▁( 図 の 1 と 2 を参照 ) 。
▁ そして ブラウザは ▁ www ▖ web app ▖ com ▁ から その 怪 しい 画像 を 読み 出 そう とします 。
▁Rails ' ▁ の / public ディレクトリ が Apache の ホ ーム ディレクトリ になっている 場合は 、 ここに アップロード ファイルを 置 いて は い け ません 。
▁ 最も 効果 的な 対応策 は 、 ログイン 成功 後に 古 い セッションを 無効 に し 、 ▁ _ 新しい セッション id を 発行する _ ▁ ことです 。
▁ 秘密キー が 一般に さ ら された アプリケーション ▁( ソース が 公開 されている アプリケーション など ) ▁ を 受け取った 場合 、 そのまま 使用 せず 、 必ず 秘密キー を変更 するようにしてください 。
▁ セッションハイジャック の 手法 と 対策 をいくつか ご 紹介します 。
▁ここでは 古 い アクションを 例 示 します 。
▁Configur ing ▁Rails ▁Application s ╼ ============== ================ ╼
▁ 以後 、 その セッション は 有効 になります 。
▁ そして この リンク には 仕 掛 け があり 、 POST リクエストを こ っ そ り 送信する 新しい フォーム を 動的 に 作成する ようになってい ると します 。
▁`< script >` タグ を使用して 、 JSON P や JavaScript の 応答 を 伴 う 特定の URL への ク ロ ス サイト リクエスト を作成する など 、 攻 撃 方法は 多 種 多 様 です 。
▁NOTE : ▁ _ セッション id は 、 32 バ イ ト の M D 5 ハッシュ 値 です 。
▁JavaScript の 応答 を 行える のは Ajax リクエスト だけです ▟ これは 、 Ajax リクエスト は ブラウザの 「 同 一 生成 元 ポ リ シ ー 」 に従って 動作 し ており 、 自分 以外の サイト から リクエスト を開始 できない ように 制限 されている ためです 。
▁ データ プロトコル を使用することで 、 Firefox と O pe ra に対して 別の タイプ の リ ダ イ レ ク ション と 自 己 完 結 型 XSS 攻 撃 を 実行 できてしまいます 。
▁ここで 重要なのは 、 仕 掛 け のある 画像 や リンク の 置き場所 は Web アプリケーションの ドメイン に限ら ない ということです ▟ フ ォ ー ラ ム 、 ブログ 、 email 、 ど こ に でも 置 け ます 。
▁Web アプリケーションが RESTful であれば 、 PATCH 、 PUT 、 DELETE などの メソッド も 使用されている でしょう 。
▁Rails で 新しい セッション を作成する 方法 を以下に示します 。
▁ 古 い バージョンの Rails では CookieStore が使用され ていました ▟ これは E n crypt ed CookieStore で使用される ` secret _ key _ base ` ではなく 、` secret _ token ` を使用します 。
▁ユーザー 管理 用に 、 有名な Re st ful Authentication プラグイン を導入し ている のであれば 、 Session Control # create アクションに reset _ session を追加 してください ▁( 訳 注 : ▁20 15 年 8 月 現在 、 プラグイン 機 構 は あまり 使われ ており ません ) 。
▁### ▁ セッション の 取り 扱 い に関する ガイドライン
▁class ▁ Session ▁< ▁ActiveRecord :: Base
▁これ なら 、 攻撃者が セッション id を 固定 する 余 地 はありません 。
▁この 応答 は 攻撃者が 見つけ 出 す こと の できた 実行 可能な コード であり 、 機 密 データを 取り出す ことができる 可能性があります 。
▁ あるいは 、 攻撃者が このコード を 画像 の on m ous e over イベント ハンドラ に 仕 込 んで あるとします 。
▁以下の例 で 考えてみましょう 。
▁reset _ session
▁secret _ key _ base : ▁a 7 5 d ▖▖▖
▁Web アプリケーション に対する 脅威 には 、 ユーザー アカウント の ハイジャック 、 アクセス制御 の バ イ パス 、 機 密 データ の 読み出し 、 不 正 な コンテンツ の表示 など 、 さまざまな もの があります 。
▁ ユーザーが cookie を 消 去 したり ブラウザを閉じ たり すると 、 それらの 情報 が 失われ てしまいます 。
▁これ に対する 単純な 対策 は 、 セッション テーブルに created _ at カラム を追加する ことです 。
▁ 安全 な Web アプリケーションを 開発 するために必要な のは 、 すべての 階層 を 最新の 状態 に 保 つ こと 、 そして 敵 を知る ことです 。
▁protect _ from _ forgery ▁with : ▁: exception
▁その Web アプリケーション への セッション が タ イ ム ア ウ ト し ていなければ 、 攻撃者は 本 来 認 証 されていない は ず の コマンドを実行 できてしまいます 。
▁name ▖ g s ub !
▁ リクエスト には この セキュリティ トークン を含め 、 サーバー側で これ を検証します 。
▁* ▁ 認 証 が 完了 すると 、 標的ユーザー と 攻撃者は 同じ セッションを 共有 した 状態 になります ▟ この セッション は 有効 であり 、 標的ユーザー は 攻 撃 された ことに も 気 付き ません 。
▁* ▁その やりとり が 基本的に ▁ _ 命 令 _ ▁ である場合 、 または
▁` secrets ▖ secret _ key _ base ` メソッドは 、 改 竄 防止 のために 、 アプリケーションの セッションを 既 知 の 秘密キー と 照 合 するための キー を指定する ときに 使い ます 。
▁ セッション という 概念 が なければ 、 ユーザーの 識 別 ・ 認 証 を リクエストを 発行する たびに 行 わ なければ なら なくなります 。
▁\ - ] / , ▁' _ '
▁ 同 一 生成 元 ポ リ シ ー の 制限 によって 、 外部 ドメイン から 標的ユーザー の cookie を変更 できない のが 普通 なので 、 攻撃者は Web サーバー の ドメイン を経由して JavaScript を 標的ユーザー の ブラウザに 送 り 込 んで 読み 込 ま せ ます 。
▁XSS と インジェクション の詳細については 後 述 します 。
▁1 つの セッション id は 、 ランダム な 文字列 の ハッシュ 値 で 構成 されています 。
▁しかし 、 現時点の ブラウザで は これらの メソッド はほとんど サポート されていません ▟ 確 実に サポート されている のは GET と POST だけです 。
▁# ▁ ピ リ オ ド と アンダースコア に置き換え
▁After ▁reading ▁this ▁guide , ▁you ▁will ▁know :
▁ そして もう 一 つ 注意 があります ▟ ユーザーが 入力 した ファイル名 を フィルタ するときに 、 _ ファイル名 から 危 険 な 部分を 取り 除 こう など と しない ことです _ ▁ 。
▁ 攻 撃 方法 は次のとおりです 。
▁ セキュリティ トークン が マッチ しない 場合には 例外 が ス ロー されます 。
▁ 結 論 から 言 う と 、 ▁ _ この種の データ は セッション ではなく データベースに保存 する _ ▁ のが 最 善 です 。
▁ セッション は 、 cookie 内の セッション id によって 識 別 できます 。
▁* ▁ 公 共 の 端 末 での 作業 後に cookie を 消 去 する ような 殊 勝 な ユーザー はほとんど いません 。
▁G ar t n er ▁G r o up は 、 攻 撃 の 7 5 % が Web アプリケーション 層 に対して 行われている と 見 積 も っ ており 、 監 査 を受け た 3 00 の Web サイト のうち 9 7 % が 脆弱性 を 抱 え ている という 結果を 得 ています 。
▁その 要素 が 実際に 参 照 している のは 、 画像ファイル ではなく 、 ボ ブ の プロジェクト 管理 アプリケーションを 標 的に した コマンド です 。
▁def ▁self ▖ s w eep ( time ▁= ▁1▖ hour )
▁### ▁ ファイル アップロード
▁if ▁time ▖ is _ a ?(
▁WARNING : ▁ _ Web アプリケーション における リダイレクト は 、 ク ラ ッ キ ング ツール として 危 険 である にもかかわらず 、 過 小 評価 され が ち です ▟ 攻撃者は これ を使用して ユーザーを 危 険 な Web サイトに 送 り 込 んだ り 、 Web サイト 自体 に 罠 を 仕 掛 け たり することもできます 。
▁``` html
▁[ attachment _ f u ▁plugin ]( https :// github ▖ com / tech now e en i e / attachment _ f u / tree / master ) の ファイル名 サ ニ タ イ ザ を以下に示します 。
▁# ▁ フルパス ではなく ファイル名 のみ を 取得
▁* ▁ 攻撃者が 自分の 知 らない cookie を わざわざ 盗 み 取 る 代りに 、 自分 が 知 っている cookie の セッション id を 固定 してしまう という 攻 撃 方法 もあります 。
▁secret _ key _ base : ▁<%= ▁ ENV [" SE C RE T _ KEY _ BASE "] ▁%>
▁ このような 攻 撃 を 防 ぎ 、 影 響 を 最小限 にとどめ 、 攻 撃 され やすい ポイント を 除 去 するためには 、 敵 の 攻 撃 方法を 完全に 理解 しておくこと が 何 よりも 必要です ▟ そうでない と 、 正しい 対策 を 取ること が できません 。
▁ そのような 大きな データ は サーバー 側 の データベースに 格 納 する ように し 、 セッション には その id だけ を 保存 してください 。
▁ これによって サーバー の 速 度 は 大きく 向上 します が 、 この スト レ ー ジ オプション には セキュリティ上の 論 争 が 絶 え ず 発生 し ており 、 導 入 に あ た って は セキュリティ に与える 影 響 を 十分 考 慮 しておく必要があります 。
▁この 方法 であれば 、 セッション id を 盗 み 出 す 必要 すら ありません 。
▁ 中 でも 最も 重要な のが ` ActionDispatch :: Session :: CookieStore ` です 。
▁development :
▁この コードの 本 来 の 意図 は 、 従来 の アクション への URL パラメータを 保 護 し 、 それを メ イン の アクションに 渡す ことです 。
▁ 単純な 対応策 としては 、 ▁ _ 古 い アクション では 期 待 に 添 う パラメータ だけ を含め るように する _ ▁という 方法があります ▁( これは ホワイトリスト 的 アプローチ であり 、 期 待 に 添 わ ない パラメータを 除 外 する方法 の 対 極 に あります ) 。
▁この 方法は 、 オブジェクトの 構造 を変更 し 、 変更 前の 古 い オブジェクトが 一部の ユーザー によって まだ 使用されている ような 場合にも 有用です 。
▁ _ POST リクエスト も ▁( 意図 に 反 して ) ▁ 自動的に 送信される こと があり えます _ ▁ 。
▁ 攻撃者が ▁" file ▖ c g i " ▁という ファイルを アップロード し 、 その中に 危 険 な コードが 仕 込 まれ ている とします ▟ この ファイルを 誰 か が ダウンロード すると 、 このコード が 実行されます 。
▁Ruby ▁on ▁Rails には 、 こうした 問題 が 大 事 に 至 らない ように セキュリティ を 保 つ ための 便利な ヘルパーメソッド ▁( SQL インジェクション 対策 用 など ) ▁ が いくつか 用意されています 。
▁created _ at ▁< ▁' # { 2▖ day s ▖ ago ▖ to _ s (: db )} ' "
▁ リクエストが 行われ る たびに 、 Web アプリケーションは セッション で 示 された ユーザー id を持つ ユーザーを 読み込み ます ▟ このとき に 再度 認 証 を行なう 必要はありません 。
▁ セキュリティ上の 脆弱性 として 次に 検 討 したい のは 、 Web アプリケーション における 「 リダイレクト と ファイル 」 です 。
▁* ▁ クロスサイトスクリプティング ▁( XSS ) ▁ 攻 撃 は 、 多くの 場合 、 ユーザーの cookie を 手 に 入 れる のが 目的 です 。
▁この場合 であれば 、 ク レ ジ ッ ト を データベースに保存 し 、 logged _ in _ user _ id を セッション に保存 します 。
▁NOTE : ▁ _ 第 一 に 、 W 3 C が 要求 している とおり 、 GET と POST を 適切に 使用します 。
▁ その他の 対応策 として 、 _ セッション に ユーザー 固有の プロパティ を 保存 しておき 、 _ ▁ユーザー から リクエスト を受け る たびに 照 合 して 、 マッチ しない 場合は アクセス を 拒 否 する という 方法 もあります 。
▁ セッション は 、 これを ス テ ート フル に 変 え る ものです 。
▁* ▁ 仕 込 まれ た セッション id での ログイン が その ブラウザで は 行われ て い なかった ので 、 Web アプリケーションは ユーザーに 認 証 を要求します 。
▁### ▁CSRF への 対応策
▁ ============== ==============
▁### ▁ セッション の 期限切れ
▁- ---------------- ----------------
▁session [: user _ id ] ▁= ▁@ current _ user ▖ id
▁ 追加 資 料
▁これは 俗 に 「 フ ィ ッ シ ング ( ph is h ing )」 や 「 釣 り 」 など と呼ばれる 攻 撃 手法 です ▟ 具体的には 、 無 害 を 装 った リンク を含む メールを ユーザーに 送 り つ け 、 XSS を使用して その リンクを Web アプリケーションに 注入 したり 、 リンクを 外部 サイトに 送信 したり します 。
▁ セキュリティ は 、 Web アプリケーション を構成する あらゆる 階層 ▁( バックエンド の スト レ ー ジ 、 Web サーバー 、 Web アプリケーション 自身 、 他の 階層 など ) ▁ に依存し ています ▟ ど れ か 一 つの 階層 に 問題 があれば 、 他の 階層 が ど れ だけ 堅 固 であっても 全体 の セキュリティ はその 問題 のある 階層 の レベル に まで 落 ち てしまいます 。
▁name ▖ s ub !
